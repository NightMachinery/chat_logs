[00:03:47] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 268 seconds)
[00:04:27] *** Quits: wolfshappen (~waff@irc.furworks.de) (Read error: Connection reset by peer)
[00:05:15] *** Quits: alp (~alp@user/alp) (Ping timeout: 252 seconds)
[00:06:38] <[exa]> "acting on Left value" sounds a tiny bit like `catch` to me
[00:07:55] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 240 seconds)
[00:09:06] <[exa]> (from Control.Monad.Catch, with `e~SomeException => Left e a` not the IO one)
[00:09:16] <[exa]> (s/Left/Either/ whoops)
[00:10:00] *** Joins: jgeerds (~jgeerds@55d4548e.access.ecotel.net)
[00:10:59] *** Joins: boxscape_12 (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de)
[00:11:02] *** Quits: boxscape_12 (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de) (Client Quit)
[00:12:05] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[00:12:37] *** Quits: CodeKiwi (~kiwi@137.184.156.191) (Ping timeout: 240 seconds)
[00:14:36] *** Quits: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca) (Ping timeout: 252 seconds)
[00:17:48] *** Joins: michalz (~michalz@185.246.204.119)
[00:17:54] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[00:18:01] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[00:18:04] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[00:18:16] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[00:19:32] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[00:20:08] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[00:23:52] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[00:26:07] *** Joins: CodeKiwi (~kiwi@137.184.156.191)
[00:29:55] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 240 seconds)
[00:30:05] <maerwald> danso: either f (\_ -> pure ())?
[00:30:07] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[00:30:29] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[00:32:35] *** Joins: jakalx (~jakalx@base.jakalx.net)
[00:33:49] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[00:34:24] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[00:39:24] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[00:39:33] *** Quits: rond_ (~rond_@90.254.208.190) (Quit: Client closed)
[00:39:36] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[00:41:03] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:41:33] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[00:42:01] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[00:42:07] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[00:42:39] *** Quits: vglfr (~vglfr@88.155.46.233) (Ping timeout: 252 seconds)
[00:43:14] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[00:43:47] *** Lord_of_Life_ is now known as Lord_of_Life
[00:45:37] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 240 seconds)
[00:47:09] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[00:48:28] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[00:48:41] *** Joins: pavonia (~user@user/siracusa)
[00:48:44] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[00:49:58] <unit73e> hey. finally got xp3 extract working with the dumbest method. just use drop and take in a bytearray many times... not very efficient but apparently xp3 segments can be any range, including intersect with other ranges.
[00:50:27] <unit73e> hopefully it doesn't exaust memory in large files
[00:51:54] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[00:54:10] *** Quits: DigitalKiwi (~kiwi@159.223.106.6) (Quit: quite.)
[00:54:46] *** Joins: wolfshappen (~waff@irc.furworks.de)
[00:55:14] *** CodeKiwi is now known as DigitalKiwi
[00:57:55] *** Quits: zer0bitz_ (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Ping timeout: 256 seconds)
[00:58:24] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[00:59:24] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[01:00:02] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[01:03:53] *** Joins: Pickchea (~private@user/pickchea)
[01:05:55] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[01:06:25] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Remote host closed the connection)
[01:08:15] *** Joins: deadmarshal_ (~deadmarsh@95.38.230.121)
[01:10:00] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Ping timeout: 272 seconds)
[01:13:10] *** Quits: deadmarshal_ (~deadmarsh@95.38.230.121) (Ping timeout: 272 seconds)
[01:13:21] <hololeap> lets say you build a library with -O2 and install it globally, then build an executable which uses dynamic linking. would the -O2 potentially affect the executable's performance?
[01:15:41] <hololeap> I would think it would, but I just wanted to double check
[01:17:31] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[01:18:21] <geekosaur> the shared object includes an abi hash which includes among other things optimization level, so (a) when you build the executable you have to specify you want the -O2 version of the library or it'll build it again with -O1 (cabal / stack default) (2) it'll only use that shared library, not one with a different optimization level 
[01:18:50] <sm> if building with cabal or stack,  I had the impression they would always build deps optimised, and only your project's local packages, or the packages you requested on the command line, would be affected
[01:19:05] <geekosaur> this is one of the reasons we don't usually build shared; it doesn't gain you anything with ghc, since abi hashes have to match or bad things happen
[01:20:12] <hololeap> right, but the optimization level of the library will affect performance when you eventually use it
[01:20:21] <geekosaur> with cabal you can stick a stanza like "package *\n  optimization: 2" in your cabal.project
[01:21:02] <hololeap> it's probably such an obvious question that it's difficult to answer
[01:21:19] <geekosaur> and if you don't do that or the equivalent, it'll go for -O1, look and see no cached build at -O1,and build it all over again
[01:21:27] <sm> this is haskell tooling, nothing is obvious :)
[01:21:56] <hpc> sufficiently researched nuance is indistinguishable from obvious
[01:22:06] *** AlexZenon_2 is now known as AlexZenon
[01:22:28] <hololeap> hypothetically, this isn't using cabal-v2, so there is no chance that it will rebuild the library
[01:23:05] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[01:23:38] <napping> hololeap: I think the sticky point is that ghc can't actually produce an single executable that would be capable of using either the O1 or O2 version of the library, so it's not exactly a change. But yes, executable and library built with -O2 ought to be faster than executable and library built from the same source with -O1
[01:23:42] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[01:24:50] <hololeap> oh, sorry, I didn't mean to imply that the executable could be linked to both -O1 and -O2. I just wanted to confirm that -O2 on the library will affect performance on the executable
[01:24:58] *** Joins: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca)
[01:25:00] <hololeap> ok
[01:25:35] <hpc> is testing it infeasible?
[01:26:00] <hololeap> no, I just wanted a general response, because like sm said, haskell is full of surprises
[01:26:17] <geekosaur> -O2 will affect it but may do so oddly because of laziness
[01:26:49] <geekosaur> like, of an optimized portion forces a thunk that was generated by lower optimization code, it'll confuse your timings
[01:27:43] <geekosaur> which is another reason to build everything at the same optimization level: it can be *really* hard to tell. (plus -O2 doesn't often make much of a runtime difference over -O1)
[01:27:57] *** Quits: DigitalKiwi (~kiwi@137.184.156.191) (Quit: quite.)
[01:28:17] <hololeap> without any flags, does it default to -O0?
[01:28:36] *** Joins: DigitalKiwi (~kiwi@137.184.156.191)
[01:28:42] <hololeap> I would like to use -O2 on everything, but I've got limited ram on this system
[01:28:51] <hololeap> so I was just curious
[01:32:40] <sclv> without any flags we default to O1 and that's what's recommended.
[01:32:55] <hololeap> ok, good
[01:33:16] <sclv> only certain very specific packages will benefit significantly from O2, and often at an undesired cost not only in compilation time but generated binary size
[01:33:32] <sclv> and it may even be that the blowup in binary size hurts caches in a way that undercuts the optimization
[01:35:24] <hololeap> I noticed that aeson has a 'fast' flag
[01:36:46] <hololeap> if flag(fast); ghc-options: -O0; else; ghc-options: -O2
[01:37:25] <hololeap> I guess they took that out in v2
[01:38:15] <hololeap> but I take that to mean that they decided -O2 was worth it most of the time for that lib
[01:38:34] <sclv> i imagine fast was for development, but they decided they could just pass it manually
[01:38:41] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[01:39:00] <hololeap> I'm more curious about the -O2 by default
[01:39:19] <sclv> well something like aeson it really matters for because it really relies on pervasive inlining
[01:39:42] <sclv> O2 is basically about how much you try to expand and inline, so it especially especially matters when there's fusion stuff happening
[01:40:12] <hololeap> I see
[01:41:02] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[01:41:35] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[01:46:44] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[01:50:36] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[01:52:09] *** Joins: tremon (~tremon@83-84-18-241.cable.dynamic.v4.ziggo.nl)
[01:53:15] *** Quits: michalz (~michalz@185.246.204.119) (Remote host closed the connection)
[01:53:56] *** Quits: Axman6 (~Axman6@user/axman6) (Ping timeout: 260 seconds)
[01:56:19] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[02:00:40] *** Quits: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca) (Remote host closed the connection)
[02:00:53] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Read error: Connection reset by peer)
[02:00:57] *** Joins: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca)
[02:05:58] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:08:55] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 240 seconds)
[02:10:33] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[02:11:06] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[02:12:19] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[02:12:32] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[02:12:39] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[02:12:55] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[02:13:20] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 272 seconds)
[02:13:33] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[02:14:45] <sm> possible addition for https://www.extrema.is/articles/haskell-books, tcard: https://www.reddit.com/r/haskell/comments/tpsbti/new_early_access_book_functional_programming_for
[02:18:34] <tcard> sm: Thank you!  With the current policy, however, I only put books that are complete in the index.  Early access books are not in the index.
[02:19:00] <sm> oops, gotcha
[02:19:25] *** Joins: alp (~alp@user/alp)
[02:19:52] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[02:19:54] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:20:02] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[02:20:07] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[02:20:14] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[02:20:22] <sm> slightly unfortunate for discovery of WIP books
[02:21:55] <tcard> Indeed.  I agree.  There are drawbacks to including WIP books as well, and it was a difficult decision to make.
[02:22:10] <sm> oh, this one's not freely readable, I didn't notice. That makes it a bit less important to discover early
[02:22:27] <tcard> It looks really good, though! :)
[02:22:54] <sm> yup it looks fun 
[02:28:46] *** Joins: yauhsien_ (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[02:28:46] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[02:29:45] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[02:35:15] *** Quits: yauhsien_ (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[02:38:30] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[02:39:12] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi) (Quit: Leaving.)
[02:47:16] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[02:48:37] *** Joins: Axman6 (~Axman6@user/axman6)
[02:53:34] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[02:53:49] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[02:53:56] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[02:54:10] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[02:54:17] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[02:55:37] *** Quits: Midjak (~Midjak@82.66.147.146) (Quit: Leaving)
[02:56:14] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[02:56:47] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[02:58:33] *** Quits: sagax (~sagax_nb@user/sagax) (Quit: Konversation terminated!)
[03:04:58] *** Joins: dsrt^ (~dsrt@96-91-136-49-static.hfc.comcastbusiness.net)
[03:07:44] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[03:08:17] *** s4msung is now known as EldenJohn
[03:08:58] *** EldenJohn is now known as s4msung
[03:09:04] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 272 seconds)
[03:09:48] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[03:11:05] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[03:12:02] *** Quits: Axman6 (~Axman6@user/axman6) (Ping timeout: 240 seconds)
[03:13:21] *** Quits: tremon (~tremon@83-84-18-241.cable.dynamic.v4.ziggo.nl) (Quit: getting boxed in)
[03:13:47] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[03:16:40] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[03:20:49] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[03:21:44] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 272 seconds)
[03:22:16] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.5)
[03:23:17] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[03:24:04] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Quit: ChaiTRex)
[03:24:19] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[03:24:58] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[03:26:50] *** Joins: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo)
[03:26:56] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[03:30:17] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[03:38:03] *** Quits: acidjnk (~acidjnk@p200300d0c7049f8284fff18517a389b2.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[03:38:04] *** Quits: `2jt (~jtomas@210.red-88-24-179.staticip.rima-tde.net) (Remote host closed the connection)
[03:40:52] *** Quits: gurkenglas (~gurkengla@dslb-178-012-018-212.178.012.pools.vodafone-ip.de) (Ping timeout: 260 seconds)
[03:42:04] *** Quits: Guest98 (~Guest98@82.212.116.123) (Quit: Client closed)
[03:44:37] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[03:45:16] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[03:45:35] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Ping timeout: 240 seconds)
[03:48:04] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[03:49:23] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[03:49:35] *** Quits: shailangsa (~shailangs@host86-162-150-212.range86-162.btcentralplus.com) ()
[03:50:13] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[03:51:12] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[03:53:27] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Ping timeout: 260 seconds)
[03:54:37] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[03:55:46] *** Joins: Axman6 (~Axman6@user/axman6)
[03:58:51] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[04:02:02] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[04:05:38] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[04:06:02] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[04:11:57] *** Quits: pera (~pera@user/pera) (Quit: leaving)
[04:17:58] *** Joins: stiell_ (~stiell@gateway/tor-sasl/stiell)
[04:18:15] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Ping timeout: 240 seconds)
[04:22:16] *** Joins: machinedgod (~machinedg@24.105.81.50)
[04:22:18] *** Joins: Topsi (~Tobias@dyndsl-095-033-020-104.ewe-ip-backbone.de)
[04:23:43] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[04:25:01] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[04:27:10] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.4)
[04:29:24] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[04:31:19] *** Quits: jgeerds (~jgeerds@55d4548e.access.ecotel.net) (Ping timeout: 256 seconds)
[04:35:49] *** Quits: xsarnik (xbraun1@lounge.fi.muni.cz) (Quit: Ping timeout (120 seconds))
[04:36:06] *** Joins: xsarnik (xsarnik@lounge.fi.muni.cz)
[04:38:19] *** Joins: shailangsa (~shailangs@host86-162-150-212.range86-162.btcentralplus.com)
[04:38:35] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[04:38:48] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[04:39:50] <cheater> hi
[04:40:33] <geekosaur> hi
[04:41:03] <cheater> i have a question (possibly about backpack). if i have a program that normally imports modules, and i'd like to, from my build system, to be able to override the source of one of those modules to come from another place, is that somehow possible without the original source doing something more involved than "import Foo.Bar" and the like?
[04:42:11] <geekosaur> I don't know enough about backpack to say if that's easily possible, and it's really poorly documented :(
[04:42:25] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[04:43:00] <cheater> my question comes from some thinking about how a plugin system could work in haskell. essentially the simplest way to do things is to expose "hooks", i.e. places where you can override the default code, or add to a list of delegation targets, stuff like that. but then how do you know what hooks to expose? if you look at something like drupal, they have about a million hooks, and on scale, that system sucks. so essentially, what you want, is a system 
[04:43:01] <cheater> that'll let you override anything at all when you're building the program
[04:43:10] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[04:44:23] <cheater> so one way of looking at this is something like: if your main.hs imports some files, and that imports some files, etc, that's a tree of dependencies. so using file path notation (where X/Y means X imports Y), let's say your change is inside main/X/Y/A/B (function foo)
[04:45:12] <cheater> in this case, if you were able to override things like that, then you would be able to write your own "plugin" for anything you wanted
[04:45:55] <cheater> so if main imports X, if in your build system you were able to say "instead of giving main X, give it my own X' " then you would be happy. because then you could go and say also "X' = X except of instead of giving it Y give it Y' " and so on
[04:46:33] <geekosaur> mm, mixins (cabal support for backpack) might do that but I don't know what support is needed for it to work
[04:46:36] <hpc> you may want to look at having a message bus or microservice sort of thing
[04:46:47] <hpc> your plugin callbacks become talking to some other process instead
[04:46:48] <cheater> you could denote it something like: X' = X[Y=Y']
[04:46:51] *** Quits: xff0x (~xff0x@i121-117-52-147.s41.a013.ap.plala.or.jp) (Ping timeout: 256 seconds)
[04:47:03] <hpc> and then the plugins can be whatever you want, or even on other machines
[04:47:23] <cheater> yes but then you still have to specify the plugin sites manually in the original un-plugged-in source code
[04:47:39] <cheater> whereas if the build system had a natural support for plugins like that, then you wouldn't have to specify anything
[04:48:20] <hpc> i think i would rather have control over where the plugins are allowed to hook themselves in
[04:48:22] *** Joins: mvk (~mvk@2607:fea8:5cc3:7e00::7980)
[04:48:45] <cheater> why. it's not yours to decide. if i have the source code i can do anything at all
[04:48:55] <hpc> at that point just fork it :P
[04:48:57] <geekosaur> then do it with the source code
[04:49:03] <cheater> right, but that's cumbersome
[04:49:09] <hpc> eh, it's not so bad
[04:49:11] <geekosaur> tough, it's what you bought
[04:49:17] *** Quits: Topsi (~Tobias@dyndsl-095-033-020-104.ewe-ip-backbone.de) (Read error: Connection reset by peer)
[04:49:25] <hpc> do it with patch files
[04:49:26] <cheater> why are you shutting down this conversation
[04:49:39] <cheater> must it stop or can we continue talking about this
[04:49:55] <hpc> take a look at how linux distros do it, they maintain tens of thousands of packages at once, most of which have edits exactly like you describe
[04:50:08] <hpc> they keep track of it with patch files that get applied at build time
[04:50:09] <cheater> i know how they do it, they do it badly...
[04:50:48] <hpc> i have done it this way before too at $dayjob
[04:51:17] <cheater> so have i
[04:51:19] <hpc> when you have a git repo to start with, it's almost trivially easy
[04:51:35] <cheater> well, there's improvements to be had
[04:51:48] <geekosaur> I already pointed you to something to look at
[04:51:54] <cheater> it's not what i want
[04:52:08] <hpc> you keep a pristine branch that you can pull from upstream, and periodically merge it with your changes and resolve conflicts
[04:52:10] <geekosaur> now you're getting some experience in why that'susually not the way to go, and you don't ewant to hear it
[04:52:37] <geekosaur> so now you want magic that isn't mixins and isn't what is known to work
[04:52:43] <cheater> i've been a programmer for 30 years. you're not telling me anything new and it seems like you don't want to talk about what i want to talk about.
[04:52:57] <cheater> so, it looks like you just want me not to talk about my idea
[04:52:59] <cheater> which... sucks
[04:53:17] <geekosaur> you put foreward your idea. the question is implementation. I pointed you to mixins
[04:53:37] <cheater> sorry, i thought you were talking about patches there.
[04:53:41] <geekosaur> if you don't like that, you have to come upwith an implementation you do like, so we have something to discuss
[04:54:06] <cheater> well, before i go and spend 12 months on writing an implementation, am i allowed to talk about the idea first, or is that not allowed ...
[04:54:12] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 272 seconds)
[04:54:48] <dibblego> Once I plugged a function into another function called map and it configured another function that does things to list. I like this plugin system best. 
[04:54:53] <geekosaur> as for mixins, just having a mixins field is not enough but I don't know much aside from that it involves module signatures
[04:55:02] <geekosaur> and none of this is documented :(
[04:55:13] <cheater> i haven't found anything online about mixins unfortunately
[04:56:06] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[04:56:20] <geekosaur> https://gitlab.haskell.org/ghc/ghc/-/wikis/backpack
[04:56:32] <cheater> this doesn't explain much ugh https://cabal.readthedocs.io/en/3.4/cabal-package.html
[04:56:33] <geekosaur> but as it notes, the cabal documentation is still lacking
[04:56:40] <cheater> yeah
[04:56:42] <cheater> let me look at your link
[04:57:10] <geekosaur> it does have some examples of actual packages using backpack, so you can look at those
[04:57:25] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[04:57:33] <cheater> i looked, i don't understand the syntax
[04:58:06] <cheater> how would I express that main should take Str from package foo and not from package bar which it normally does?
[04:58:48] <jackdk> Use nix to build an alternate version of foo
[04:59:07] <cheater> that does not make main use foo instead of bar
[04:59:39] <geekosaur> that's where the mixins field comes in, it specifies to take x module fromn a different package — but the possible packages and modules for that need module signatures
[04:59:57] <cheater> what is the syntax to take x module from a different package?
[05:00:13] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 240 seconds)
[05:00:13] <cheater> i've looked at the docs, but i couldn't figure it out
[05:00:24] <geekosaur> mixins = package (module)
[05:00:56] <cheater> i don't get it
[05:01:00] <geekosaur> similar to import and export lists, but at the level of packages and exported/imported modules
[05:01:22] * Axman6 mumbles something about ImplicitParams
[05:01:32] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[05:02:49] <cheater> it would be nice if this stuff had rts support, so that you can swap modules out at runtime, or at least at start
[05:02:56] <cheater> start-up
[05:03:08] <cheater> so if you have a binary you're not stuck with it working exactly one way
[05:03:13] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[05:03:36] <geekosaur> that's not going to happen, with cross-module optimization it would have to rewrite a lot of code on the fly
[05:03:59] <geekosaur> you could suppress that with -O0 but pay a high cost in performance
[05:05:05] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[05:05:36] <cheater> yeah, it would. or not optimize
[05:05:42] <cheater> i know that's a problem sadly
[05:06:12] <koz> > fmap (+1) (2 :: Int, 3)
[05:06:13] <lambdabot>  (2,4)
[05:06:37] <Axman6> do the plugins or ... hint packages still work?
[05:08:09] <geekosaur> ? is this about hls?
[05:08:38] <geekosaur> oh, wait. afaik hint should work, dunno if plugins has bene updated for 9.x yet
[05:09:18] <cheater> i mean
[05:10:02] <geekosaur> mm, updated today even, and versions don't exclude 9.x
[05:10:07] <geekosaur> so presumably it works
[05:10:20] <geekosaur> (plugins)
[05:10:30] <cheater> do you suppose that cross-module optimization would HAVE to rewrite a lot of code? what if we knew where a specific piece of code went, and just rewrote those parts
[05:10:52] <cheater> you'll often be replacing optimizations with others that have a similar shape...
[05:11:00] <cheater> sorry
[05:11:03] <geekosaur> you… don't really understand this, do you?
[05:11:06] <cheater> i meant replacing *implementations*
[05:11:14] <geekosaur> it's a question of inlining
[05:11:18] <cheater> yes
[05:11:18] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 272 seconds)
[05:11:28] <cheater> but that doesn't mean it's intractable
[05:11:41] <cheater> if you know what you inlined where, then you'd only have to check / update those sites
[05:11:47] <geekosaur> it is if the replacement doesn't fit in the binary
[05:11:53] <cheater> it's additional book keeping
[05:12:00] <geekosaur> this rapidly becomes *very* difficult
[05:12:08] *** Joins: pottsy (~pottsy@2400:4050:b560:3700:780b:edcd:33e6:5339)
[05:12:10] <cheater> binary sizes don't matter much if you can jmp out of the site
[05:12:16] <geekosaur> and I doubt they'dcomplicate ghc to support such an unusualuse case
[05:12:52] <cheater> i'm more curious how this could be done rather than what the % probability is it'll get implemented, just like that.
[05:13:50] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[05:14:56] <jackdk> Use nix to build an alternate version of bar, which re-exports symbols from foo.
[05:17:56] *** Joins: chenqisu1 (~chenqisu1@183.217.201.88)
[05:18:21] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[05:22:08] <geekosaur> it's actually harder than I was saying because there's further optimization after inloining which could e.g. inline part of the existing code into the inlined code, or combine it in other ways that would mean simple patching in of a different version won't work
[05:23:11] *** Joins: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp)
[05:25:44] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[05:26:48] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[05:26:52] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[05:27:38] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[05:31:06] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Ping timeout: 260 seconds)
[05:31:57] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[05:33:45] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[05:36:33] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[05:36:46] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[05:37:15] *** Quits: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[05:38:20] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Remote host closed the connection)
[05:39:12] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[05:40:02] *** Joins: PapuaHardyNet (uid546676@user/PapuaHardyNet)
[05:40:25] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[05:40:50] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Remote host closed the connection)
[05:41:13] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[05:42:50] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Remote host closed the connection)
[05:43:16] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[05:44:50] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Remote host closed the connection)
[05:45:16] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[05:46:31] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[05:48:27] *** Joins: tzh_ (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[05:48:50] *** Quits: tzh_ (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[05:49:01] *** eldritch_ is now known as eldritch
[05:50:06] *** Quits: dextaa_ (~dextaa@user/dextaa) (Read error: Connection reset by peer)
[05:51:11] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[05:51:35] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Ping timeout: 240 seconds)
[05:53:04] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[05:53:45] *** Joins: dextaa_ (~dextaa@user/dextaa)
[05:56:46] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[05:57:55] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 240 seconds)
[05:58:41] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[06:01:20] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[06:03:54] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[06:03:55] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 240 seconds)
[06:04:17] *** Joins: hololeap (~hololeap@user/hololeap)
[06:06:40] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[06:06:55] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[06:14:57] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[06:30:13] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[06:33:54] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[06:38:24] <cheater> cool
[06:47:01] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 245 seconds)
[06:48:08] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[06:50:58] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:51:19] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[06:53:52] *** Quits: Natch (~natch@c-67bae255.014-297-73746f25.bbcust.telenor.se) (Remote host closed the connection)
[06:55:36] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[06:55:49] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[06:59:15] *** Joins: Natch (~natch@c-67bae255.014-297-73746f25.bbcust.telenor.se)
[07:01:18] *** Parts: danso (~danso@danso.ca) ()
[07:09:51] <Christoph[m]> In his 1989 paper "Theorems for free!", Philip Wadler announces a further paper with a reformulation of parametricity in terms of category theory. Did that ever happen?
[07:10:56] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[07:10:56] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:10:56] *** finn_elija is now known as FinnElija
[07:12:54] *** Quits: jdm (jesse@c-68-62-216-212.hsd1.al.comcast.net) (Ping timeout: 272 seconds)
[07:25:47] *** Quits: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca) (Ping timeout: 260 seconds)
[07:30:18] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[07:30:22] *** Joins: deadmarshal_ (~deadmarsh@95.38.115.47)
[07:40:49] *** Quits: m1dnight (~christoph@78-22-9-5.access.telenet.be) (Ping timeout: 256 seconds)
[07:41:40] *** Joins: m1dnight (~christoph@78-22-9-5.access.telenet.be)
[07:48:40] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Read error: Connection reset by peer)
[07:48:40] *** Joins: awschnap (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[07:50:17] *** Quits: awschnap (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[07:54:26] *** Joins: vglfr (~vglfr@88.155.45.251)
[07:57:28] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[08:16:59] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[08:19:51] <abastro[m]> So that is the kind of PHD+ question
[08:23:41] *** Joins: uncomfy (~uncomfy@27.110.174.130)
[08:25:41] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[08:28:13] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[08:29:59] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[08:31:28] *** Joins: pnotequalnp (~kevin@user/pnotequalnp)
[08:31:36] *** Quits: vglfr (~vglfr@88.155.45.251) (Ping timeout: 260 seconds)
[08:31:49] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[08:32:42] *** Quits: deadmarshal_ (~deadmarsh@95.38.115.47) (Ping timeout: 272 seconds)
[08:33:08] *** Joins: charukiewicz (~charukiew@2600:1702:a90:2750::3c)
[08:38:24] *** Quits: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[08:40:55] *** Quits: zyklotomic (~ethan@res380d-128-61-83-1.res.gatech.edu) (Ping timeout: 260 seconds)
[08:42:34] *** Joins: zyklotomic (~ethan@res380d-128-61-82-167.res.gatech.edu)
[08:45:03] *** Quits: pottsy (~pottsy@2400:4050:b560:3700:780b:edcd:33e6:5339) (Remote host closed the connection)
[08:50:32] *** Quits: stiell_ (~stiell@gateway/tor-sasl/stiell) (Remote host closed the connection)
[08:50:52] *** Joins: stiell_ (~stiell@gateway/tor-sasl/stiell)
[08:54:56] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[08:59:46] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[09:01:31] *** Joins: mbuf (~Shakthi@122.174.50.185)
[09:02:17] *** Joins: bh (bh@bsd.tilde.team)
[09:02:23] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[09:02:59] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[09:03:11] *** Parts: bh (bh@bsd.tilde.team) ()
[09:05:45] *** Quits: c_wraith (~c_wraith@adjoint.us) (*.net *.split)
[09:05:45] *** Quits: cross (~cross@spitfire.i.gajendra.net) (*.net *.split)
[09:05:45] *** Quits: ncopa (~ncopa@alpine/developer/ncopa) (*.net *.split)
[09:05:45] *** Quits: hiredman (~hiredman@frontier1.downey.family) (*.net *.split)
[09:05:45] *** Quits: mjrosenb (~mjrosenb@pool-108-54-97-96.nycmny.fios.verizon.net) (*.net *.split)
[09:05:49] *** Quits: EsoAlgo (~EsoAlgo@152.70.142.52) (*.net *.split)
[09:05:49] *** Quits: Philonous (~Philonous@user/philonous) (*.net *.split)
[09:05:49] *** Quits: exarkun (~exarkun@user/exarkun) (*.net *.split)
[09:05:49] *** Quits: thaumavorio (~thaumavor@thaumavor.io) (*.net *.split)
[09:05:49] *** Quits: sudden (~cat@user/sudden) (*.net *.split)
[09:05:49] *** Quits: joeyh (~joeyh@kitenet.net) (*.net *.split)
[09:05:49] *** Quits: Jonno_FTW (~come@user/jonno-ftw/x-0835346) (*.net *.split)
[09:05:49] *** Quits: dixie (~dixie@real.wilbury.sk) (*.net *.split)
[09:05:49] *** Quits: sweater (~sweater@206.81.18.26) (*.net *.split)
[09:05:49] *** Quits: greenbourne277 (~greenbour@2001:4b98:dc2:45:216:3eff:fe8a:bbf0) (*.net *.split)
[09:05:49] *** Quits: codedmart_ (~codedmart@li335-49.members.linode.com) (*.net *.split)
[09:05:49] *** Quits: akhesacaro (~caro@212.83.144.58) (*.net *.split)
[09:05:49] *** Quits: Rembane (~Rembane@li346-36.members.linode.com) (*.net *.split)
[09:05:49] *** Quits: bastelfreak (~bastelfre@basteles-bastelknecht.bastelfreak.org) (*.net *.split)
[09:05:52] *** Joins: mjrosenb (~mjrosenb@pool-108-54-97-96.nycmny.fios.verizon.net)
[09:05:54] *** Joins: hiredman (~hiredman@frontier1.downey.family)
[09:05:54] *** Joins: c_wraith (~c_wraith@adjoint.us)
[09:05:57] *** Joins: dixie (~dixie@real.wilbury.sk)
[09:05:57] *** Joins: Rembane (~Rembane@li346-36.members.linode.com)
[09:05:59] *** Joins: joeyh (joeyh@kitenet.net)
[09:06:00] *** Joins: Jonno_FTW (~come@api.carswap.me)
[09:06:01] *** Joins: ncopa (~ncopa@gbr2-dev1.alpinelinux.org)
[09:06:01] *** Joins: akhesacaro (~caro@212.83.144.58)
[09:06:06] *** Joins: codedmart (~codedmart@li335-49.members.linode.com)
[09:06:08] *** Quits: Jonno_FTW (~come@api.carswap.me) (Changing host)
[09:06:08] *** Joins: Jonno_FTW (~come@user/jonno-ftw/x-0835346)
[09:06:09] *** Joins: sudden (~cat@user/sudden)
[09:06:14] *** Joins: cross (~cross@spitfire.i.gajendra.net)
[09:06:20] *** Joins: greenbourne277 (~greenbour@2001:4b98:dc2:45:216:3eff:fe8a:bbf0)
[09:06:20] *** Joins: bastelfreak (~bastelfre@basteles-bastelknecht.bastelfreak.org)
[09:06:28] *** Joins: thaumavorio (~thaumavor@thaumavor.io)
[09:06:31] *** Joins: EsoAlgo (~EsoAlgo@152.70.142.52)
[09:06:31] *** Joins: Philonous (~Philonous@user/philonous)
[09:06:42] *** Joins: sweater (~sweater@206.81.18.26)
[09:08:10] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[09:08:41] *** Joins: exarkun (~exarkun@user/exarkun)
[09:08:44] *** Quits: nattiestnate (~nate@202.138.250.62) (Quit: WeeChat 3.4.1)
[09:12:51] *** Quits: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee) (Ping timeout: 245 seconds)
[09:22:04] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[09:29:48] *** Quits: pnotequalnp (~kevin@user/pnotequalnp) (Ping timeout: 240 seconds)
[09:35:04] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[09:36:49] *** Joins: cdman (~dcm@user/dmc/x-4369397)
[09:37:34] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[09:37:49] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[09:39:00] *** Joins: deadmarshal_ (~deadmarsh@95.38.115.47)
[09:39:20] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[09:42:31] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[09:44:04] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[09:44:21] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[09:47:59] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[10:00:29] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[10:00:46] *** Joins: img (~img@user/img)
[10:00:57] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[10:02:38] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Ping timeout: 272 seconds)
[10:03:04] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[10:03:19] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[10:03:42] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[10:04:14] <phma> I have a module Data.GosperBase in ~/src/gosperbase/Data/GosperBase.hs . I'm thinking of renaming it to Data.GosperBase.Internals . Do I need to make a directory Data/GosperBase/ or a file GosperBase.Internals.hs ?
[10:05:47] <abastro[m]> I guess you have to move it to `Data/GosperBase/Internals`, never tried myself but IIRC there is no exception to module name-directory correspondence
[10:05:48] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[10:06:08] <abastro[m]> That is, `Data/GosperBase/Internals.hs` will correspond to `Data.GosperBase.Internals` module
[10:07:21] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[10:07:24] *** Joins: p0lyph3m (~polyphem@2a00:20:c056:33c3:c59d:d67:df03:351a)
[10:08:04] *** Joins: inversed_ (~inversed@94.13.111.159)
[10:08:39] *** Quits: inversed (~inversed@94.13.111.159) (Ping timeout: 260 seconds)
[10:14:47] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[10:14:59] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[10:16:06] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[10:18:32] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[10:23:04] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Ping timeout: 246 seconds)
[10:27:57] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[10:27:58] *** Quits: shriekingnoise (~shrieking@201.231.16.156) (Quit: Quit)
[10:30:17] *** Quits: napping (~brandon@65.128.43.198) (Quit: leaving)
[10:35:49] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Quit: mikoto-chan)
[10:40:35] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 240 seconds)
[10:42:04] *** Quits: charukiewicz (~charukiew@2600:1702:a90:2750::3c) ()
[10:42:46] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[10:45:21] *** Joins: nate1 (~nate@98.45.167.61)
[10:48:49] *** Quits: uncomfy (~uncomfy@27.110.174.130) (Quit: uncomfy)
[10:50:01] *** Quits: nate1 (~nate@98.45.167.61) (Ping timeout: 246 seconds)
[10:50:39] *** Joins: acidjnk (~acidjnk@p200300d0c7049f67fc06a0258b52409e.dip0.t-ipconnect.de)
[10:57:35] *** Joins: benin (~benin@183.82.24.110)
[10:59:17] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[11:02:38] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[11:06:21] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:908a:bab:b0c0:af34)
[11:09:32] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[11:10:07] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[11:14:04] *** Joins: machinedgod (~machinedg@24.105.81.50)
[11:14:41] *** Quits: benin (~benin@183.82.24.110) (Quit: The Lounge - https://thelounge.chat)
[11:15:28] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[11:17:35] *** Joins: pnotequalnp (~kevin@user/pnotequalnp)
[11:19:16] *** Quits: zyklotomic (~ethan@res380d-128-61-82-167.res.gatech.edu) (Ping timeout: 272 seconds)
[11:21:08] *** Joins: zyklotomic (~ethan@res380d-128-61-85-52.res.gatech.edu)
[11:25:54] <dminuoso> abastro[m]: GHC imposes this requirement when you have an import, If not, you can give the file any name you want.
[11:26:20] *** Joins: cfricke (~cfricke@user/cfricke)
[11:26:28] <dminuoso> That is, a module you import must be located relative to the base path, with dots replaced by directory separators.
[11:26:32] <abastro[m]> Oh, wdym by "when you have an import"?
[11:26:41] <abastro[m]> Oh, when you import that module
[11:27:08] <abastro[m]> ..but if it cannot be imported, what is it for?
[11:27:11] <dminuoso> Right. So for single-module programs you can name the file any way you want, and give it a completely different module name.
[11:27:21] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[11:27:26] <dminuoso> Or for single module libraries.
[11:27:48] <dminuoso> Though the latter is likely not very useful in general if you dont intend to import it from haskell side
[11:30:34] <abastro[m]> Single module programs, I see
[11:30:49] *** Joins: Midjak (~Midjak@82.66.147.146)
[11:32:13] *** Quits: troydm (~troydm@host-176-37-124-197.b025.la.net.ua) (Ping timeout: 240 seconds)
[11:32:37] *** Joins: fendor (~fendor@178.115.48.110.wireless.dyn.drei.com)
[11:33:51] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:36:15] *** Quits: stiell_ (~stiell@gateway/tor-sasl/stiell) (Ping timeout: 240 seconds)
[11:42:51] *** Joins: alp (~alp@user/alp)
[11:49:22] *** Joins: stiell_ (~stiell@gateway/tor-sasl/stiell)
[11:49:46] *** Quits: Orbstheorem (~orbstheor@2001:470:69fc:105::a56) (Quit: Bridge terminating on SIGTERM)
[11:49:46] *** Quits: siraben (~siraben@user/siraben) (Quit: Bridge terminating on SIGTERM)
[11:49:46] *** Quits: peddie (~peddie@2001:470:69fc:105::25d) (Quit: Bridge terminating on SIGTERM)
[11:49:46] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Quit: Bridge terminating on SIGTERM)
[11:49:46] *** Quits: juhp[m] (~juhpmatri@2001:470:69fc:105::6e9) (Quit: Bridge terminating on SIGTERM)
[11:49:46] *** Quits: moats (~oats@user/oats) (Quit: Bridge terminating on SIGTERM)
[11:49:46] *** Quits: Arathorn (~arathorn@2001:470:69fc:105::1f) (Quit: Bridge terminating on SIGTERM)
[11:49:46] *** Quits: sm (~sm@plaintextaccounting/sm) (Quit: Bridge terminating on SIGTERM)
[11:49:46] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (Quit: Bridge terminating on SIGTERM)
[11:49:46] *** Quits: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b) (Quit: Bridge terminating on SIGTERM)
[11:49:46] *** Quits: unclechu (~unclechu@2001:470:69fc:105::354) (Quit: Bridge terminating on SIGTERM)
[11:49:46] *** Quits: VarikValefor[m] (~varikvale@2001:470:69fc:105::a5d) (Quit: Bridge terminating on SIGTERM)
[11:49:46] *** Quits: nomagno (~nomagno@2001:470:69fc:105::c1f0) (Quit: Bridge terminating on SIGTERM)
[11:49:46] *** Quits: bitonic (~bitonic@2001:470:69fc:105::1812) (Quit: Bridge terminating on SIGTERM)
[11:49:46] *** Quits: Artem[m] (~artemtype@2001:470:69fc:105::75b) (Quit: Bridge terminating on SIGTERM)
[11:49:46] *** Quits: ongy[m] (~ongymatri@2001:470:69fc:105::5018) (Quit: Bridge terminating on SIGTERM)
[11:49:46] *** Quits: euphrates[m] (~euphrates@2001:470:69fc:105::fbb5) (Quit: Bridge terminating on SIGTERM)
[11:49:47] *** Quits: fendor[m] (~fendormat@2001:470:69fc:105::fcbd) (Quit: Bridge terminating on SIGTERM)
[11:49:47] *** Quits: Guillaum[m] (~guiboumat@2001:470:69fc:105::1:72ac) (Quit: Bridge terminating on SIGTERM)
[11:49:47] *** Quits: zfnmxt (~zfnmxtzfn@user/zfnmxt) (Quit: Bridge terminating on SIGTERM)
[11:49:47] *** Quits: ericson2314 (~ericson23@2001:470:69fc:105::70c) (Quit: Bridge terminating on SIGTERM)
[11:49:47] *** Quits: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8) (Quit: Bridge terminating on SIGTERM)
[11:49:47] *** Quits: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee) (Quit: Bridge terminating on SIGTERM)
[11:49:47] *** Quits: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886) (Quit: Bridge terminating on SIGTERM)
[11:49:47] *** Quits: smichel17[m] (~smichel17@2001:470:69fc:105::2d32) (Quit: Bridge terminating on SIGTERM)
[11:49:47] *** Quits: reza[m] (~rezaphone@2001:470:69fc:105::3eda) (Quit: Bridge terminating on SIGTERM)
[11:49:47] *** Quits: jneira[m] (~jneiramat@2001:470:69fc:105::d729) (Quit: Bridge terminating on SIGTERM)
[11:49:47] *** Quits: Yehoshua (~yehoshua@2001:470:69fc:105::1:593f) (Quit: Bridge terminating on SIGTERM)
[11:49:47] *** Quits: Ash[m] (~signal-wa@2001:470:69fc:105::1:2318) (Quit: Bridge terminating on SIGTERM)
[11:49:47] *** Quits: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be) (Quit: Bridge terminating on SIGTERM)
[11:49:47] *** Quits: kalxd[m] (~kalxdmatr@2001:470:69fc:105::1:576e) (Quit: Bridge terminating on SIGTERM)
[11:49:47] *** Quits: Joe[m]12 (~jsricemat@2001:470:69fc:105::1:b4ce) (Quit: Bridge terminating on SIGTERM)
[11:49:48] *** Quits: justosophy[m] (~justosoph@2001:470:69fc:105::572f) (Quit: Bridge terminating on SIGTERM)
[11:49:48] *** Quits: sekun[m] (~hsekmatri@2001:470:69fc:105::d18f) (Quit: Bridge terminating on SIGTERM)
[11:49:48] *** Quits: jmcantrell (~jmcantrel@user/jmcantrell) (Quit: Bridge terminating on SIGTERM)
[11:49:48] *** Quits: cronjob[m] (~cronjobma@2001:470:69fc:105::74e7) (Quit: Bridge terminating on SIGTERM)
[11:49:48] *** Quits: aviladev[m] (~aviladevm@2001:470:69fc:105::1:cbc7) (Quit: Bridge terminating on SIGTERM)
[11:49:49] *** Quits: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba) (Quit: Bridge terminating on SIGTERM)
[11:49:50] *** Quits: shlevy[m] (~shlevymat@2001:470:69fc:105::1:d3b1) (Quit: Bridge terminating on SIGTERM)
[11:49:50] *** Quits: o1lo0lol1o[m] (~o1lo0lol1@2001:470:69fc:105::1:d1c0) (Quit: Bridge terminating on SIGTERM)
[11:49:50] *** Quits: kadoban (~kadoban@user/kadoban) (Quit: Bridge terminating on SIGTERM)
[11:49:50] *** Quits: Deide (~deide@user/deide) (Quit: Bridge terminating on SIGTERM)
[11:49:50] *** Quits: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe) (Quit: Bridge terminating on SIGTERM)
[11:49:50] *** Quits: ninioArtillero[m (~ninioarti@2001:470:69fc:105::1:d1ef) (Quit: Bridge terminating on SIGTERM)
[11:49:50] *** Quits: solomon[m] (~solomonco@2001:470:69fc:105::1:6000) (Quit: Bridge terminating on SIGTERM)
[11:49:51] *** Quits: jinsun_ (~jinsun@user/jinsun) (Quit: Bridge terminating on SIGTERM)
[11:49:51] *** Quits: Las[m] (~lasmatrix@2001:470:69fc:105::74e) (Quit: Bridge terminating on SIGTERM)
[11:49:51] *** Quits: marinelli[m] (~marinelli@2001:470:69fc:105::2d8) (Quit: Bridge terminating on SIGTERM)
[11:49:51] *** Quits: ac (~aloiscoch@2001:470:69fc:105::65) (Quit: Bridge terminating on SIGTERM)
[11:49:51] *** Quits: ksqsf[m] (~ksqsfmatr@2001:470:69fc:105::1:d8fa) (Quit: Bridge terminating on SIGTERM)
[11:49:51] *** Quits: boxscape (~boxscape@user/boxscape) (Quit: Bridge terminating on SIGTERM)
[11:49:51] *** Quits: abastro[m] (~abastroma@2001:470:69fc:105::1:e119) (Quit: Bridge terminating on SIGTERM)
[11:49:51] *** Quits: methylene[m] (~methylene@2001:470:69fc:105::1:ccc0) (Quit: Bridge terminating on SIGTERM)
[11:49:51] *** Quits: july541[m] (~july541ma@2001:470:69fc:105::1:e416) (Quit: Bridge terminating on SIGTERM)
[11:49:51] *** Quits: cdsmith (~cdsmithma@2001:470:69fc:105::284) (Quit: Bridge terminating on SIGTERM)
[11:49:51] *** Quits: kevin[m]1 (~pnotequal@2001:470:69fc:105::a54) (Quit: Bridge terminating on SIGTERM)
[11:49:52] *** Quits: polykernel[m] (~polykerne@user/polykernel) (Quit: Bridge terminating on SIGTERM)
[11:49:52] *** Quits: pareto-optimal-d (~pareto-op@2001:470:69fc:105::1:b61f) (Quit: Bridge terminating on SIGTERM)
[11:49:52] *** Quits: VanceIsM7[m] (~vanceism7@2001:470:69fc:105::3ad) (Quit: Bridge terminating on SIGTERM)
[11:49:52] *** Quits: kadenwolff[m] (~kadenwolf@2001:470:69fc:105::1:d97f) (Quit: Bridge terminating on SIGTERM)
[11:49:52] *** Quits: schuelermine[m] (~schuelerm@user/schuelermine) (Quit: Bridge terminating on SIGTERM)
[11:49:52] *** Quits: ThadeuPaula[m] (~thadeudep@2001:470:69fc:105::1:ded7) (Quit: Bridge terminating on SIGTERM)
[11:49:53] *** Quits: TimothyBess[m] (~dorksidem@2001:470:69fc:105::1:e14e) (Quit: Bridge terminating on SIGTERM)
[11:49:53] *** Quits: dgpratt[m] (~dgprattma@2001:470:69fc:105::1:dcdd) (Quit: Bridge terminating on SIGTERM)
[11:49:53] *** Quits: yosef36 (~yosefweis@2001:470:69fc:105::1:e501) (Quit: Bridge terminating on SIGTERM)
[11:49:53] *** Quits: fgaz (~fgaz@2001:470:69fc:105::842) (Quit: Bridge terminating on SIGTERM)
[11:49:53] *** Quits: sofviic[m] (~sofviicma@2001:470:69fc:105::1:51fd) (Quit: Bridge terminating on SIGTERM)
[11:49:53] *** Quits: psydroid (~psydroid@user/psydroid) (Quit: Bridge terminating on SIGTERM)
[11:49:54] *** Quits: jkaye[m] (~jkayematr@2001:470:69fc:105::1:86f7) (Quit: Bridge terminating on SIGTERM)
[11:49:54] *** Quits: oak- (~oakuniver@2001:470:69fc:105::fcd) (Quit: Bridge terminating on SIGTERM)
[11:49:54] *** Quits: ArshiaAghaei[m] (~arshiaagh@2001:470:69fc:105::1:c382) (Quit: Bridge terminating on SIGTERM)
[11:49:54] *** Quits: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1) (Quit: Bridge terminating on SIGTERM)
[11:49:54] *** Quits: maralorn (~maralorn@2001:470:69fc:105::251) (Quit: Bridge terminating on SIGTERM)
[11:49:54] *** Quits: tsmc[m] (~tsmcmatri@2001:470:69fc:105::1:7e1) (Quit: Bridge terminating on SIGTERM)
[11:49:54] *** Quits: corisco[m] (~coriscokd@2001:470:69fc:105::1:dea6) (Quit: Bridge terminating on SIGTERM)
[11:49:54] *** Quits: AdamConner-Sax[m (~adamcsmat@2001:470:69fc:105::1:e2c8) (Quit: Bridge terminating on SIGTERM)
[11:49:54] *** Quits: hughjfchen[m]1 (~hughjfche@2001:470:69fc:105::c29d) (Quit: Bridge terminating on SIGTERM)
[11:49:54] *** Quits: jaror[m] (~jaror@2001:470:69fc:105::265) (Quit: Bridge terminating on SIGTERM)
[11:49:54] *** Quits: charukiewicz[m] (~charukiew@2001:470:69fc:105::ded4) (Quit: Bridge terminating on SIGTERM)
[11:49:54] *** Quits: weeezes[m] (~weeezesma@2001:470:69fc:105::1:da65) (Quit: Bridge terminating on SIGTERM)
[11:49:56] *** Quits: eddiemundo (~eddiemund@2001:470:69fc:105::a80) (Quit: Bridge terminating on SIGTERM)
[11:49:58] *** Quits: reactormonk[m] (~reactormo@2001:470:69fc:105::3c24) (Quit: Bridge terminating on SIGTERM)
[11:49:59] *** Quits: AdamS[m] (~adamvalko@2001:470:69fc:105::1:d5f0) (Quit: Bridge terminating on SIGTERM)
[11:49:59] *** Quits: sjanssen (~sjanssenm@2001:470:69fc:105::1:61d8) (Quit: Bridge terminating on SIGTERM)
[11:52:26] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:53:36] *** Quits: jinsun (~jinsun@user/jinsun) ()
[11:53:39] *** Joins: juhp[m] (~juhpmatri@2001:470:69fc:105::6e9)
[11:53:56] *** Joins: alphabeta (~kilolympu@31.205.200.235)
[11:54:06] *** Quits: kilolympus (~kilolympu@31.205.200.235) (Ping timeout: 272 seconds)
[11:54:18] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Client Quit)
[11:55:24] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:57:46] *** Joins: jinsun (~jinsun@user/jinsun)
[11:58:30] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[12:00:15] *** Quits: stiell_ (~stiell@gateway/tor-sasl/stiell) (Ping timeout: 240 seconds)
[12:00:46] *** Joins: fgaz (~fgaz@2001:470:69fc:105::842)
[12:00:46] *** Joins: peddie (~peddie@2001:470:69fc:105::25d)
[12:00:46] *** Joins: VarikValefor[m] (~varikvale@2001:470:69fc:105::a5d)
[12:00:46] *** Joins: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b)
[12:00:46] *** Joins: Orbstheorem (~orbstheor@2001:470:69fc:105::a56)
[12:00:46] *** Joins: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32)
[12:00:46] *** Joins: ericson2314 (~ericson23@2001:470:69fc:105::70c)
[12:00:46] *** Joins: unclechu (~unclechu@2001:470:69fc:105::354)
[12:00:46] *** Joins: sekun[m] (~hsekmatri@2001:470:69fc:105::d18f)
[12:00:46] *** Joins: marinelli[m] (~marinelli@2001:470:69fc:105::2d8)
[12:00:46] *** Joins: schuelermine[m] (~schuelerm@user/schuelermine)
[12:00:46] *** Joins: sm (~sm@plaintextaccounting/sm)
[12:00:46] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[12:00:46] *** Joins: maralorn (~maralorn@2001:470:69fc:105::251)
[12:00:46] *** Joins: Deide (~deide@user/deide)
[12:00:46] *** Joins: Artem[m] (~artemtype@2001:470:69fc:105::75b)
[12:00:46] *** Joins: psydroid (~psydroid@user/psydroid)
[12:00:46] *** Joins: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8)
[12:00:46] *** Joins: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba)
[12:00:46] *** Joins: ongy[m] (~ongymatri@2001:470:69fc:105::5018)
[12:00:47] *** Joins: siraben (~siraben@user/siraben)
[12:00:47] *** Joins: july541[m] (~july541ma@2001:470:69fc:105::1:e416)
[12:00:47] *** Joins: smichel17[m] (~smichel17@2001:470:69fc:105::2d32)
[12:00:47] *** Joins: methylene[m] (~methylene@2001:470:69fc:105::1:ccc0)
[12:00:47] *** Joins: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be)
[12:00:47] *** Joins: kadenwolff[m] (~kadenwolf@2001:470:69fc:105::1:d97f)
[12:00:47] *** Joins: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe)
[12:00:47] *** Joins: fendor[m] (~fendormat@2001:470:69fc:105::fcbd)
[12:00:47] *** Joins: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886)
[12:00:47] *** Joins: jmcantrell (~jmcantrel@user/jmcantrell)
[12:00:47] *** Joins: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee)
[12:00:47] *** Joins: jinsun_ (~jinsun@user/jinsun)
[12:00:48] *** Joins: moats (~oats@user/oats)
[12:00:48] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[12:00:48] *** Joins: bitonic (~bitonic@2001:470:69fc:105::1812)
[12:00:48] *** Joins: Guillaum[m] (~guiboumat@2001:470:69fc:105::1:72ac)
[12:00:48] *** Joins: reactormonk[m] (~reactormo@2001:470:69fc:105::3c24)
[12:00:48] *** Joins: kalxd[m] (~kalxdmatr@2001:470:69fc:105::1:576e)
[12:00:48] *** Joins: euphrates[m] (~euphrates@2001:470:69fc:105::fbb5)
[12:00:48] *** Joins: jneira[m] (~jneiramat@2001:470:69fc:105::d729)
[12:00:48] *** Joins: VanceIsM7[m] (~vanceism7@2001:470:69fc:105::3ad)
[12:00:49] *** Joins: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1)
[12:00:49] *** Joins: yosef36 (~yosefweis@2001:470:69fc:105::1:e501)
[12:00:49] *** Joins: polykernel[m] (~polykerne@user/polykernel)
[12:00:49] *** Joins: Arathorn (~arathorn@2001:470:69fc:105::1f)
[12:00:49] *** Joins: tsmc[m] (~tsmcmatri@2001:470:69fc:105::1:7e1)
[12:00:49] *** Joins: kadoban (~kadoban@user/kadoban)
[12:00:49] *** Joins: nomagno (~nomagno@2001:470:69fc:105::c1f0)
[12:00:49] *** Joins: TimothyBess[m] (~dorksidem@2001:470:69fc:105::1:e14e)
[12:00:49] *** Joins: abastro[m] (~abastroma@2001:470:69fc:105::1:e119)
[12:00:50] *** Joins: ac (~aloiscoch@2001:470:69fc:105::65)
[12:00:50] *** Joins: solomon[m] (~solomonco@2001:470:69fc:105::1:6000)
[12:00:50] *** Joins: eddiemundo (~eddiemund@2001:470:69fc:105::a80)
[12:00:50] *** Joins: aviladev[m] (~aviladevm@2001:470:69fc:105::1:cbc7)
[12:00:50] *** Joins: Ash[m] (~signal-wa@2001:470:69fc:105::1:2318)
[12:00:50] *** Joins: boxscape (~boxscape@user/boxscape)
[12:00:58] *** Joins: ninioArtillero[m (~ninioarti@2001:470:69fc:105::1:d1ef)
[12:00:58] *** Joins: reza[m] (~rezaphone@2001:470:69fc:105::3eda)
[12:00:59] *** Joins: justosophy[m] (~justosoph@2001:470:69fc:105::572f)
[12:01:00] *** Joins: Yehoshua (~yehoshua@2001:470:69fc:105::1:593f)
[12:01:00] *** Joins: kevin[m] (~pnotequal@2001:470:69fc:105::a54)
[12:01:00] *** Joins: dgpratt[m] (~dgprattma@2001:470:69fc:105::1:dcdd)
[12:01:00] *** Joins: sofviic[m] (~sofviicma@2001:470:69fc:105::1:51fd)
[12:01:00] *** Joins: jkaye[m] (~jkayematr@2001:470:69fc:105::1:86f7)
[12:01:00] *** Joins: ksqsf[m] (~ksqsfmatr@2001:470:69fc:105::1:d8fa)
[12:01:01] *** Joins: hughjfchen[m] (~hughjfche@2001:470:69fc:105::c29d)
[12:01:01] *** Joins: shlevy[m] (~shlevymat@2001:470:69fc:105::1:d3b1)
[12:01:01] *** Joins: Joe[m]12 (~jsricemat@2001:470:69fc:105::1:b4ce)
[12:01:02] *** Joins: pareto-optimal-d (~pareto-op@2001:470:69fc:105::1:b61f)
[12:01:02] *** Joins: oak- (~oakuniver@2001:470:69fc:105::fcd)
[12:01:02] *** Joins: ArshiaAghaei[m] (~arshiaagh@2001:470:69fc:105::1:c382)
[12:01:02] *** Joins: charukiewicz[m] (~charukiew@2001:470:69fc:105::ded4)
[12:01:02] *** Joins: cdsmith (~cdsmithma@2001:470:69fc:105::284)
[12:01:02] *** Joins: o1lo0lol1o[m] (~o1lo0lol1@2001:470:69fc:105::1:d1c0)
[12:01:02] *** Joins: AdamS[m] (~adamvalko@2001:470:69fc:105::1:d5f0)
[12:01:02] *** Joins: weeezes[m] (~weeezesma@2001:470:69fc:105::1:da65)
[12:01:03] *** Joins: ThadeuPaula[m] (~thadeudep@2001:470:69fc:105::1:ded7)
[12:01:03] *** Joins: sjanssen (~sjanssenm@2001:470:69fc:105::1:61d8)
[12:01:04] *** Joins: corisco[m] (~coriscokd@2001:470:69fc:105::1:dea6)
[12:01:04] *** Joins: Las[m] (~lasmatrix@2001:470:69fc:105::74e)
[12:01:04] *** Joins: AdamConner-Sax[m (~adamcsmat@2001:470:69fc:105::1:e2c8)
[12:01:05] *** Joins: jaror[m] (~jaror@2001:470:69fc:105::265)
[12:01:51] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[12:02:29] *** Joins: stiell_ (~stiell@gateway/tor-sasl/stiell)
[12:04:25] *** Joins: michalz (~michalz@185.246.204.97)
[12:12:21] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[12:13:29] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[12:15:04] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[12:16:51] *** Joins: kuribas (~user@ptr-25vy0i6qxp87tp43k9a.18120a2.ip6.access.telenet.be)
[12:18:55] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Client Quit)
[12:19:32] *** Joins: vglfr (~vglfr@88.155.45.251)
[12:21:12] <kuribas> hmm, hkd records are pretty useful.
[12:21:25] *** Joins: cronjob[m] (~cronjobma@2001:470:69fc:105::74e7)
[12:21:43] <kuribas> You can even make them work over constrained functions, by reifying the constraints.
[12:22:10] <dminuoso> I find them to be a pain in the butt.
[12:22:25] <kuribas> data Dict c a where (c a) => Dict a
[12:22:32] <kuribas> dminuoso: can you explain why?
[12:22:35] <dminuoso> I think most uses of HDK disappear if we had the possibility of attaching arbitrary metadata outside the type system but accessible via generics
[12:22:45] <dminuoso> *HKD
[12:23:14] <kuribas> but wouldn't that be in favour of HKD?  No language extension needed.
[12:23:29] <dminuoso> HKD need TONS of extension
[12:23:38] <kuribas> true
[12:23:51] <kuribas> How would metadata help to make a parser for records?
[12:24:24] <dminuoso> Well you can use TH or generics already to make a parser for records.
[12:24:41] <kuribas> but then, which one is simpler?
[12:24:45] <dminuoso> Attaching arbitrary metadata let you attach whatever you need, like documentation, or maybe field information
[12:24:52] <dminuoso> Well, what I propose is completely transparent to the user
[12:25:03] <dminuoso> Fields no longer have bizarre types that require type families to resolve
[12:25:12] <dminuoso> Say:
[12:25:20] <kuribas> HKD doesn't require type families...
[12:25:46] <dminuoso> Say something like `data User = User { name :: T.Text {~ FieldSpec { descr = "It's a username", jsonField = "user_name", jsonOpts = NullToEmpty } ~} }`
[12:25:52] <dminuoso> If you want to stay sane they do.
[12:26:13] <dminuoso> OTherwise your entire code base gets infested with Identity/Const, whatever
[12:26:33] <kuribas> I don't really see why people make a problem about that.
[12:26:38] <kuribas> it's just a light wrapper.
[12:26:56] <dminuoso> kuribas: Every time you write typeclass instances they are in the way.
[12:26:57] <kuribas> Much less boilerplate than the typical OO, getters/setters/wrapper classes.
[12:27:02] <dminuoso> All the generics stuff from other libraries wont work
[12:27:14] <dminuoso> And the interface is so not obvious
[12:27:46] <kuribas> I can write "deriving instance Show (MyRec Identity)"
[12:28:24] <kuribas> show over an arbitrary functor isn't even possible anyway.
[12:28:34] <kuribas> I didn't try generics though...
[12:29:00] <kuribas> But I assume that I can make it work with Identity as well...
[12:29:16] <dminuoso> It's an abstraction leak, plain and simple.
[12:29:34] <dminuoso> It's an artifact that is present because people insist on attaching information at the type level.
[12:33:13] <tdammers> I'm having some trouble getting a certain UI element to behave as it should in xmonad, any ideas as to where I should start poking? The UI element in question is, oddly specifically, the instrument selector dropdown in Pianoteq; when run as an LV2 plugin, the dropdown will disappear when you hover over it, but only in some spots, and it sometimes gets cut off along the edge of its parent window.
[12:33:15] <tdammers> However, the standalone version works fine, and the LV2 plugin is also fine when opened in Xfce. It only misbehaves when opened from within Ardour, in Xmonad.
[12:35:21] <dminuoso> tdammers: geekosaur for all your xmonad bizarrities. :-)
[12:37:56] <kuribas> dminuoso: hkd is not information at type level, it's a value level construct.
[12:38:20] <kuribas> dminuoso: which is why I think it's better than type level lists, data, etc...
[12:38:34] <kuribas> though admittedly, not very beginner friendly.
[12:38:37] <dminuoso> kuribas: It is a type-level selector for what you want.
[12:38:48] <dminuoso> And the beginner friendly ness is an indicator of why its a bad idea
[12:38:57] <dminuoso> It's an abstraction leak, plain and simple
[12:39:09] <dminuoso> Also it's contract based, as if you have HKD values nothing guarantees they are even used
[12:40:00] <kuribas> the type describes the thing, for example (MyRec Parser), is a record of parsers.
[12:40:18] <kuribas> I find that pretty useful.
[12:40:24] <dminuoso> If you expose `data User k = ...` as a library, every usage site *must* explicitly pick the correct parameter, and then if you dont use tyfams deal with Identity/Const/etc artifacts in every place
[12:41:17] <kuribas> I see its usefulness more in applications, than libraries.
[12:41:43] <kuribas> I find its usage in beam rather convoluted...
[12:41:56] <tdammers> wrt modelling domain entities (presuming that this is what this is about), my personal sweet spot so far has been TH, for better or worse.
[12:42:27] <tdammers> I'm not normally a huge fan of TH, but this is exactly the use case where it can shine - write a bunch of boilerplate code for me.
[12:42:31] <dminuoso> tdammers: Yeah. And I would *love* being able to attach information to fields accessible in generics/TH. That would be my desired sweet spot.
[12:42:51] <tdammers> you *kind of* can, with newtypes, but it's a bit awkward
[12:43:14] <dminuoso> Right, I meant it sort of like {- ANN -}
[12:43:32] <kuribas> tdammers: TH is also hard to read and write.
[12:43:37] <dminuoso> {-# ANN ... #-} even
[12:43:59] <dminuoso> Except ANN gives me metadata in the wrong direction. :)
[12:44:09] <kuribas> tdammers: my usecase is for code that will be rewritten in clojure.  So instead of having hashmaps with domain logic, I use HKD records.
[12:44:14] <tdammers> kuribas: maybe, but only on the "producer" side. You write your difficult TH abstractions once, and then you apply them to 100 domain types. Applying them is not the hard part though.
[12:44:45] <tdammers> and if you code is going to be rewritten in clojure anyway, why write it in haskell in the first place?
[12:45:23] <tdammers> dminuoso: you could also make a DSL to be interpreted by TH to achieve this, but that's even uglier IMO
[12:45:24] <kuribas> tdammers: well, they allowed me to do me a favor, also because then it was a safe project to experiment with haskell (for the rest of the team).
[12:45:31] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[12:45:39] <kuribas> ideally it will not be converted to clojure.
[12:45:59] <tdammers> still begging to be allowed to use haskell on the job?
[12:46:17] <kuribas> no, I am allowed now :)
[12:46:39] <kuribas> Still trying to get other on board, but its a matter of patience.
[12:47:15] <kuribas> My goal is to have our formula engine rewritten in haskell.
[12:47:25] <kuribas> It's already agreed that it is too complicated.
[12:48:04] <dminuoso> tdammers: DSL would indeed not be ideal, you would require additional tooling to assert the DSL even matches your data types.
[12:48:10] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[12:48:45] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[12:48:59] <kuribas> I think haskell would be ideal there.
[12:49:16] <kuribas> As you can describe the formulas and indicators with a ADT.
[12:49:33] <kuribas> And it could be "simple" haskell.
[12:49:47] <kuribas> no TH, generics, HKD, ...
[12:50:20] *** Joins: ccntrq (~Thunderbi@2a01:c22:89e6:e500:da63:dc92:f465:54d0)
[12:50:42] <kuribas> It could be that they will insist on lisp/clojure, I'll make it clear that i'll jump ship then.
[12:51:08] <[exa]> kuribas: is there an explicit need to typecheck the stuff with actual haskell typechecker? if you have a DSL and a set of programs in it, you can enjoy a bit of polymorphism to extract the "types" from DSL programs at runtime and just make a test that compares them to the expectations
[12:51:32] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[12:51:37] <kuribas> [exa]: are you refering to the HKD?
[12:51:47] <[exa]> yes, more like removal of these
[12:52:01] <kuribas> [exa]: I could do that, but then I might as well write the damn thing in clojure.
[12:52:36] *** Quits: pnotequalnp (~kevin@user/pnotequalnp) (Ping timeout: 240 seconds)
[12:53:19] <[exa]> like, I guess that in haskell you can make this into a 20-liner-ish program
[12:53:45] <kuribas> perhaps I have trouble imagining your solution...
[12:54:38] <kuribas> frankly, my current solution uses HKD and GADTs, but is otherwise pretty clean.
[12:55:04] <kuribas> There is some generic magic in the HKD library, and another library I wrote...
[12:55:18] <kuribas> But compared to, say servant, it is quite easy to follow.
[12:55:30] *** Joins: pnotequalnp (~kevin@user/pnotequalnp)
[12:57:49] *** Joins: Pickchea (~private@user/pickchea)
[12:58:04] <kuribas> but yeah, my case is a bit atypical, make code which can generate clojure code.
[12:59:00] <kuribas> By putting most of the logic into data.
[13:00:08] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[13:00:13] <kuribas> tdammers: our current code for calculating the formulas is using an ad-hoc lisp DSL that does rewrite rules to generate formulas from configuration data.
[13:00:42] <kuribas> tdammers: and its hard to see the structure of the generated formula, since there is no type defining it.
[13:01:18] *** Quits: dextaa_ (~dextaa@user/dextaa) (Remote host closed the connection)
[13:01:18] <kuribas> tdammers: IMO this can all be simplified with pure functions and well defined data types.
[13:02:19] <kuribas> tdammers: it's also almost impossible to follow the rewrite rules, which are all over the place, with some imperative effects mingled in between.
[13:02:56] <kuribas> my colleage told me that if I manage to simplify it in haskell, he'd be willing to learn haskell well.
[13:03:03] <tdammers> oh god, yeah, no, that sounds like a horrible design
[13:03:13] <tdammers> like the trac wiki "parser"
[13:03:25] <tdammers> check it out, it's hilarious and sad at the same time
[13:03:57] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[13:04:04] *** Quits: pnotequalnp (~kevin@user/pnotequalnp) (Ping timeout: 246 seconds)
[13:04:09] <tdammers> also, seems to be a common antipattern in the lisp world, this "rewriting". probably because it's so tempting when you aren't guided by types
[13:04:11] <kuribas> but lispers love this stuff.
[13:04:33] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[13:04:33] <tdammers> yeah, I know. another example is selmer, absolutely horrible and 100% unmaintainable
[13:05:36] *** Joins: gurkenglas (~gurkengla@dslb-178-012-018-212.178.012.pools.vodafone-ip.de)
[13:06:13] <tdammers> The sane way of doing "HTML templates" in this style would be to first parse things into an AST, then interpret that AST (filling in variables, evaluating expressions, etc.), and finally write out the result. But Selmer doesn't do that; it uses a kind of weird, ad-hoc incremental rewrite approach, and it's just horrible.
[13:06:18] <kuribas> we were starting to use azure yaml scripts, which did the same, but I managed to reduce most of it by simply having the main functionality in bash.
[13:06:37] <tdammers> this kind of nonsense is a major factor in my decision to rage-quit clojure
[13:07:46] <kuribas> Our rest api is not nearly that bad luckily...
[13:08:06] <kuribas> it's just so hard to get things rewritten once they are there.
[13:08:37] <kuribas> There is very little incentive, if it doesn't bring immediate benefits.
[13:11:51] <kuribas> tdammers: what annoys me about clojure, is that even within it's "types are just in the way" narrative, it is still not optimal.
[13:12:01] <kuribas> like "everything is a hashmap", or nil punning.
[13:12:32] <kuribas> Both of which scheme does better.
[13:12:45] *** Joins: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de)
[13:12:48] <kuribas> You'll get an error trying to access a field which isn't defined on the record.
[13:13:28] *** Quits: michalz (~michalz@185.246.204.97) (Remote host closed the connection)
[13:13:51] <maerwald> I'll never forget how I once forgot a closing bracket in clojurescript. The code compiled, but the page went blank once you clicked a certain button.
[13:14:10] <maerwald> never again.
[13:14:45] <kuribas> clojurists seem to generally agree that sweeping problems under the rug is good design.
[13:15:02] *** Quits: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net) (Remote host closed the connection)
[13:15:12] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[13:15:22] *** Joins: MajorBiscuit (~MajorBisc@86.88.79.148)
[13:15:44] <kuribas> But I can see some advantages to the clojure approach.
[13:16:01] <kuribas> Sometimes not typing things can lead to more flexible and simple code.
[13:16:51] <kuribas> while the equivalent in haskell is using HKD + GADTs + data families.
[13:17:28] <kuribas> The clojure approach is perfectly possible in haskell as well though.
[13:17:42] <kuribas> haskellers are just more reluctant to use partial functions.
[13:18:14] <jackdk> DMaps are also a great choice for heterogeneous maps
[13:18:57] <kuribas> jackdk: I prefer HKD records.
[13:20:54] <abastro[m]> How is scheme doing?
[13:21:05] <kuribas> doing what?
[13:21:27] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[13:21:37] <abastro[m]> I wonder how scheme compare with haskell w.r.t popularity, usage, ...
[13:22:11] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[13:22:54] <tdammers> the clojure idea of "loosely defined interfaces" and "embracing failure" is not a bad one; when it comes to interfacing independently evolving components in a fast-moving problem space, it's the only sane thing you can do, because rigidly defining the interfaces couples them too much, and prevents you from evolving fast. it's just a shitty idea to extend this beyond that particular use case.
[13:23:29] <kuribas> abastro[m]: it's mostly used for teaching AFAIK. Or was, because now it's largely replaced by Python.
[13:23:43] <maerwald> tdammers: yes, people say haskell is so composable, but that's simply not true for libraries, unless they're designed to work with one another
[13:24:04] <maerwald> if you have very loose interfaces/types, you may not even need integration
[13:24:13] <abastro[m]> Oh no, python replacing scheme
[13:24:14] <dminuoso> tdammers: Im not convinced this is even remotely true. You can bake variability into interfaces in the beginning.
[13:24:19] <kuribas> maerwald: the solution is often to send a PR to the library author.
[13:24:20] <abastro[m]> The heck is this world
[13:24:28] <dminuoso> Better yet, that even explicitly documents where interfaces are lose and where not, and in what repect they are rigid.
[13:24:58] <dminuoso> I feel its rather an attitude of not wanting to think about your software.
[13:25:30] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[13:25:33] <dminuoso> This is the modern form of "the software is the specification/documentation"
[13:25:52] <maerwald> kuribas: sending a PR to one of snoymans libraries to use a different streaming library than conduit? xD
[13:25:54] <maerwald> yeah sure
[13:26:08] <dminuoso> Besides, quickly evolving components and interfaces to me is a bad symptom
[13:26:26] <tdammers> maybe, but you don't always get a choice
[13:26:31] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 260 seconds)
[13:26:39] *** Quits: Katarushisu (~Katarushi@cpc147334-finc20-2-0-cust27.4-2.cable.virginm.net) (Quit: The Lounge - https://thelounge.chat)
[13:26:42] <kuribas> dminuoso: yeah, and in clojure you end up with SPEC, which is just types in another form :)
[13:26:46] <maerwald> dminuoso: I thought so too, but not anymore
[13:26:47] <tdammers> I'm talking about situations where you are talking to, say, a third-party JSON API
[13:26:53] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[13:27:20] *** Joins: Katarushisu (~Katarushi@cpc147334-finc20-2-0-cust27.4-2.cable.virginm.net)
[13:27:25] <maerwald> sometimes engineering decisions have to align with business interests
[13:27:38] <abastro[m]> I think ppl say haskell is composable because of language where they came from
[13:27:45] <maerwald> and sometimes that is going fast and not designing your software as if it's a control piece in an airplane
[13:27:47] <tdammers> There's no point negotiating an interface, really, because the time at which you write your consumer and the time at which you run it are not the same, and there's no way you can prevent the other side from changing in the meantime. All you can do is error out at runtime, one way or antoher.
[13:28:32] <tdammers> So instead of going all SOAP on it, it's usually a better idea to formalize the consumer side alone: don't type the interface, just type what the consumer expects.
[13:28:43] <maerwald> the most interesting space here is in fact blockchain... they both have to go super fast due to competition, but also make sure they don't mess up, otherwise they're done
[13:28:50] *** Quits: Katarushisu (~Katarushi@cpc147334-finc20-2-0-cust27.4-2.cable.virginm.net) (Client Quit)
[13:29:53] *** Joins: Katarushisu (~Katarushi@cpc147334-finc20-2-0-cust27.4-2.cable.virginm.net)
[13:30:02] <dminuoso> tdammers: It's a difficult proposition. In an ideal world I would chose to not work with unstable APIs.
[13:30:08] *** Quits: cronjob[m] (~cronjobma@2001:470:69fc:105::74e7) (Quit: You have been kicked for being idle)
[13:30:46] <dminuoso> Perhaps this is the reality of software, dealing with the fact that its all buggy and constantly changing. So rather than achieving stable software, the best we can hope for in modern development a low friction factor
[13:30:46] <kuribas> tdammers: isn't that an interface though? :-P
[13:31:06] <tdammers> kuribas: yes, but it's unilateral.
[13:31:37] <tdammers> kuribas: as opposed to the producer explicitly declaring their interface, and the consumer doing runtime type checking to make sure it's the same interface they have been using
[13:31:59] <kuribas> I don't see how those two are different.
[13:32:17] <kuribas> The consumer declares an interface, or the producer, but it's still the same interfacen.
[13:32:27] <tdammers> the difference is that in one scenario, you go, "I expected to get a field named 'blah', but it's not there - ERROR"; in the other, you go "I expected interface version 123.45, but got version 123.46 - ERROR"
[13:32:27] <kuribas> Or better, the interface is independent.
[13:32:57] <abastro[m]> 123.45 vs 123.46 sounds like much better error message
[13:33:20] <tdammers> The difference is that the consumer-declared interface isn't shared with the producer. There is no negotiating of a shared type; the consumer just checks whether what they're getting meets their own requirements.
[13:33:55] *** Joins: dextaa_ (~dextaa@user/dextaa)
[13:34:34] <kuribas> tdammers: Ideally I would have an interface which is defined independently, then the implementation is shown to be consistent with that interface (using dependent types for example), and the consumer uses the interface to run queries.
[13:34:38] <tdammers> abastro[m]: but it's not; for two reasons. The first one being that you get a lot of false negatives this way. Say you add an optional field; a consumer that doesn't need the field doesn't need to change, but it will still see a different version number and error out, even though that would be unnecessary.
[13:35:09] <tdammers> The second reason is that version numbers are artificial; they don't mean anything, and so they don't tell you what the actual problem is.
[13:35:29] <tdammers> I don't care what version number you have, what I care about is whether you can give me the 'blah' field or not.
[13:35:41] <abastro[m]> Tho in my experience, the versioning scheme worked quite well
[13:35:53] <kuribas> tdammers: the nice thing of my approach is that it works with your usecase.  If the new interface version doesn't break anything existing, the consumer code will just work.
[13:36:08] <abastro[m]> Chances are, when those optionals are added it would also introduce subtle changes
[13:36:30] <tdammers> I mean, there's no silver bullet, each approach has its pros and cons
[13:36:43] <abastro[m]> If it works, consumer will eventually have version bound updated
[13:36:53] <abastro[m]> Oh I thought you were pushing for something
[13:37:33] <tdammers> my point is that while the "untyped interface" approach can be the right choice when it comes to interfacing between independent, fast-evolving components, it is not a good paradigm for architecting software systems in general, and it is definitely not great for interfacing between components that you control and evolve together
[13:37:45] *** Quits: vglfr (~vglfr@88.155.45.251) (Read error: Connection reset by peer)
[13:37:58] *** Joins: vglfr (~vglfr@88.155.45.251)
[13:38:23] <maerwald> well, we have weak types too in Haskell... if you won't buy into a streaming library, you can go full lazy ByteString, at least for some use cases
[13:38:44] <tdammers> I'm not talking about weak types
[13:38:56] <tdammers> types are great for everything that happens inside each component
[13:39:29] <tdammers> you absolutely should have a type firewall between the loosely-defined "outside", and the well-defined inner workings of your component.
[13:40:04] <tdammers> I just think that trying to achieve type safety *between* networked components is lunacy, in most cases
[13:40:22] *** Quits: chenqisu1 (~chenqisu1@183.217.201.88) (Remote host closed the connection)
[13:41:59] <kuribas> tdammers: you could have an interface stored somewhere, then a CI/CD that runs when the interface changes.
[13:42:17] <kuribas> it requires coordination, but seems doable.
[13:42:27] <lortabac> TBH I'd say Haskell is a very good choice when you work with underspecified third-party API's
[13:42:29] <kuribas> And AFAIK nobody ever tried it.
[13:42:35] *** Quits: tiferrei (~tiferrei@user/tiferrei) (Ping timeout: 240 seconds)
[13:43:18] <kuribas> tdammers: For example, project A depends on interface B.  interface B changes, so all projects dependening on it, like project A, will be rebuild using the CI/CD.
[13:43:29] <lortabac> because you can say exactly what your components needs, and if somehow the API doesn't provide the necessary data you fail with a precise message
[13:43:38] <abastro[m]> Btw is Java more composable than haskell
[13:43:41] <tdammers> Problem though: now you have an n*m situation
[13:43:55] <abastro[m]> Because when ppl say haskell is composable, I think they are comparing against those languages
[13:44:17] <tdammers> you need to not only rebuild, but also redeploy
[13:44:51] *** Joins: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[13:45:14] <tdammers> realistically, if you don't want your stuff to come to a grinding CI/CD halt eventually, you need to figure out a way to upgrade components independently, on both sides
[13:46:21] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[13:46:23] <maerwald> abastro[m]: no. Java has even more API-lock.
[13:46:39] <kuribas> tdammers: yeah.
[13:46:44] <abastro[m]> Hm, wait why?
[13:46:50] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 272 seconds)
[13:46:56] <maerwald> and since everything is hidden inside an objects behavior, it's even harder to write compatibility layers
[13:47:08] <abastro[m]> Hmm
[13:47:11] <tdammers> Neither java nor haskell are "composable". They are programming languages, and you cannot compose programming languages. "Composing a programming language", what would that even mean?
[13:47:20] <abastro[m]> Yea that explains why ppl say haskell is composable
[13:47:21] *** Joins: jonathanx__ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[13:47:23] <kuribas> tdammers: another way with versioning is to have the server accept previous versions.
[13:47:29] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Ping timeout: 252 seconds)
[13:47:34] <tdammers> I think what people mean is rather whether a language lends itself to writing composable code
[13:47:45] <maerwald> tdammers: composability of functions, modules, libraries, approaches
[13:47:51] *** Joins: tiferrei (~tiferrei@user/tiferrei)
[13:47:55] <abastro[m]> Meh yea I meant composable by that
[13:47:55] <maerwald> haskell does well in terms of composing functions 
[13:48:00] <abastro[m]> Capability at writing composable code
[13:48:12] <maerwald> wrt modules, there are already better approaches
[13:48:15] <maerwald> wrt libraries, yeah no
[13:48:25] <tdammers> so, yeah, the question, I think, is whether a language makes it easy to write library code such that it is easy to compose
[13:48:50] <tdammers> and I think Haskell fares relatively well on this front, though it's not ideal
[13:48:54] <abastro[m]> Ye, perhaps Java is indeed even worse at that compared to hasel
[13:48:55] <abastro[m]> What a shame
[13:49:35] <abastro[m]>  /s/hasel/haskell
[13:49:54] <tdammers> in many cases, careful library authors can write Haskell libraries that are very composable while not forcing a lot of dependencies on the user; things like typeclasses and parametric polymorphism help a lot on this front, and they work better than Java's inheritance model IMO
[13:50:02] <tdammers> but it's still nowhere near perfect
[13:50:19] *** Joins: michalz (~michalz@185.246.204.126)
[13:50:19] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[13:50:28] <abastro[m]> I think JS at least fairs better at this
[13:50:31] <maerwald> we tried to solve it with backpack, but yeah :D
[13:50:38] <tdammers> untyped languages are at an advantage here, in that they can keep all sorts of requirements implicit
[13:50:38] *** Quits: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Ping timeout: 272 seconds)
[13:50:52] <abastro[m]> It should be better than haskell if we'd rationalize irs dominance
[13:51:03] <tdammers> but of course that becomes a practical burden to the developers, because now the tooling won't help you track down your compatibility issues
[13:51:18] <tdammers> the Free Lunch Theory applies, I gues
[13:51:26] <abastro[m]> Yea, JS, the wannabe lisp, is great at that
[13:51:49] <tdammers> it doesn't really matter which untyped language you pick - JS, Python, Clojure, it's pretty much the same
[13:51:59] <tdammers> (except PHP - PHP is just worse in each and every regard)
[13:52:11] *** Quits: jonathanx__ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Ping timeout: 260 seconds)
[13:52:38] <abastro[m]> Lmaoooooo
[13:52:54] <maerwald> so what is the right way to express external API if it's not types?
[13:53:04] <abastro[m]> There is one thing I am grateful at in my country, PHP is pretty much expunged.
[13:53:16] <abastro[m]> But at what cost? Java everywhere..
[13:53:35] <tdammers> maerwald: need to decide on a per-case basis
[13:53:37] <kuribas> abastro[m]: that's a big improvement.
[13:53:45] <abastro[m]> Hehehe
[13:53:51] <kuribas> abastro[m]: java isn't that bad, as long as you follow some guidelines.
[13:54:15] <kuribas> abastro[m]: Like, no spring, no big inheritance hierarchies, prefer immutable objects.
[13:54:18] <tdammers> java usually just amounts to procedural with extra steps
[13:54:22] <maerwald> SQL? Yeah fun if your dependency changes database tables
[13:54:33] <kuribas> abastro[m]: also, no ORM.
[13:54:38] <abastro[m]> Well yea I was like, why everyone using Java.. and then remembered they probably have been using PHP before
[13:54:43] <abastro[m]> Why no ORM
[13:54:47] <abastro[m]> Oh 
[13:54:49] <boxscape_> kuribas oh nice sounds like the exact opposite of our codebase at work
[13:54:58] <abastro[m]> I briefly forgot what is ORM
[13:55:07] <kuribas> object relational mapping.
[13:55:22] <maerwald> ORM is "I suck at writing actualy SQL"
[13:55:28] <kuribas> Because you get an impedance mismatch.  It only works for simple usecases (the ones shown in tutorials).
[13:55:29] <tdammers> depends on what kind of ORM you use
[13:55:39] <abastro[m]> Hehehe writing SQL
[13:55:45] <kuribas> Then you run into all kinds of performance problems.
[13:55:58] <abastro[m]> Well some ppl might find SQL veeeery verbose
[13:56:15] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[13:56:18] <tdammers> the sane ones use objects to accurately reflect database interactions; the insane ones make you think that the data in your database can be made to act like objects
[13:56:29] <boxscape_> abastro[m] don't worry using ORMs in Java is usually more verbose
[13:56:43] <abastro[m]> Oh god no
[13:56:50] <abastro[m]> Jaaaavaa pls
[13:57:20] <abastro[m]> Perhaps it might be right decision to kill Java.. using Go
[13:57:54] <maerwald> you complain about verbose and then mention Go?
[13:58:20] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[13:58:25] <abastro[m]> At least Go folks won't write that much long names
[13:58:28] <maerwald> verbose is not that bad, if you have healthy wrists
[13:58:33] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[13:58:37] <abastro[m]> Boilerplate is better
[14:00:26] <maerwald> in Go they write small tools that generate code
[14:00:33] <maerwald> because they have no other option
[14:00:56] <tdammers> I mean; user = connection.execute(dbSchema.usersTable.getByUserID(userID)) // I have no problem with that.
[14:00:56] <abastro[m]> Yea, I think they find it easier to read that way.
[14:01:18] <tdammers> OTOH, user = new User(userID); user.load(); // holy crap, get out, this is terrible
[14:01:52] <boxscape_> i.e. expression-based > statement-based?
[14:02:37] <tdammers> more like, "objects that act like database things" > "objects that pretend to act like plain old objects, but fall flat on their face because database rows are fundamentally not objects"
[14:02:37] <abastro[m]> By Java verbose I mean sth like `DatabaseDecoratorInfoValue`
[14:02:55] <abastro[m]> Or `ComposerManagerRepository`
[14:03:15] <abastro[m]> Or.. `SingletonBridgeTestProxyAdvisor`
[14:05:08] <abastro[m]> Hm wait, database rows are ofc not objects
[14:05:13] <kuribas> tdammers: yeah, add to that lazy loading in sqlalchemy.
[14:05:15] <abastro[m]> But why are ppl using it as objects???
[14:05:31] <kuribas> tdammers: bugs galore.
[14:06:12] *** Quits: raym (~raym@user/raym) (Ping timeout: 252 seconds)
[14:07:45] <kuribas> tdammers: so no user.load, but using "user.name", will actually load the user object lazily.
[14:07:51] *** Quits: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp) (Ping timeout: 256 seconds)
[14:08:00] *** Joins: raym (~raym@user/raym)
[14:08:20] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[14:09:42] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:10:02] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[14:10:43] <kuribas> tdammers: there is so much wrong with that, one that using the attribute will actually invoke a function, the other that you get side-effects at unpredictable times.
[14:10:54] <kuribas> And all of it is invisible to the user.
[14:14:21] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[14:15:42] <maerwald> the things ORM is useful for are usually *simple* queries. But I don't need assistance with those.
[14:16:00] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[14:16:39] *** Joins: benin (~benin@183.82.24.110)
[14:17:05] *** Quits: ncopa (~ncopa@gbr2-dev1.alpinelinux.org) (Changing host)
[14:17:05] *** Joins: ncopa (~ncopa@alpine/developer/ncopa)
[14:17:26] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[14:17:59] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[14:20:01] <abastro[m]> Indeed
[14:20:17] <abastro[m]> Hm perhaps many enterprises do need such assistances
[14:20:32] <maerwald> The only time I started with an ORM was with python's django and it took only 2 months until performance was a problem.
[14:20:36] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[14:20:58] <maerwald> Coming up with a performant query took me an entire weekend.
[14:21:19] <maerwald> And since then, it was never touched again
[14:22:06] <maerwald> Refactoring queries or tables a lot is a rather specific problem.
[14:22:08] <tdammers> yeah, so "mapping rows to objects" is fine, as long as we're clear about the fact that what we're mapping is not a live database row, but a row in a result set, as it was returned from a query
[14:22:28] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Ping timeout: 246 seconds)
[14:22:40] <tdammers> oh, and, "ORM" generally involves two completely different parts: mapping database data to objects, and using objects to construct queries
[14:23:58] <tdammers> when it comes to query abstractions, a similar problem tends to occur though - it turns out that SQL is a pretty good DSL for expressing relational queries, and you don't usually win anything by wrapping it in an OOP-based DSL
[14:24:12] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[14:24:21] <maerwald> I've worked a little with beam, but the time I'm confused about the odd API probably doesn't outweigh the time it would take me to write plain SQL.
[14:24:31] <tdammers> but you potentially lose a lot. SQL is widely known and has a huge tooling ecosystem; your custom OOP DSL doesn't.
[14:25:19] <abastro[m]> SQL is great DSL, indeed
[14:25:33] <abastro[m]> But ppl love OOP so NoSQL is coming
[14:25:53] <tdammers> and that promise of making the database backend and the SQL dialect that comes with it transparent? that never really works fully, and it's pretty useless anyway, because "we have to rewrite our codebase to run against a completely different SQL dialect" pretty much never happens
[14:26:26] <tdammers> (and when it does, rewriting your data access layer is the least of your problems)
[14:26:50] <merijn> Just write your SQL in the postgres dialect, then you support the only 2 databases to care about :p
[14:26:52] <maerwald> I've migrated django sqlite to django postgresql and it wasn't just turning a switch.
[14:27:16] <tdammers> merijn: 2? what's the other one?
[14:27:45] <tdammers> oh, sqlite?
[14:27:59] <tdammers> I'd consider that a "configuration file format" that happens to present an SQL API
[14:28:18] <tdammers> it's absolutely awesome for that, but I wouldn't use it as a database proper
[14:28:33] <tdammers> or, well, "data file format", more generally
[14:28:44] <tdammers> it's also great for things like working with scientific datasets and such
[14:28:49] <tdammers> caching things, too
[14:29:08] <merijn> Exactly what I'm using it for now :p
[14:29:42] <kuribas> tdammers: Our new database model is basically an object model, without subtyping, but with interfaces.
[14:30:55] <kuribas> tdammers: We have tables for each of the "interfaces", tables for relations between objects, and an "object" table which contains the unique ids.  So what I am doing now is expressing in data how the objects relate to the tables using (HKD) data.
[14:31:15] <kuribas> tdammers: doing it this way still allows me any freedom to generate sql as I want it.
[14:31:21] <abastro[m]> I've been using sqlite because I thought it would be great for personal use
[14:31:30] <tdammers> merijn: well, my point is that IME, it's usually pretty clear whether you want postgres or sqlite, so you should never have to switch your code from one to the other later on
[14:31:35] <abastro[m]> Turns out it lacks user improvmenets..
[14:32:02] <kuribas> tdammers: but it allows the queries to be written generically.
[14:32:24] <kuribas> tdammers: it also allows me to proof the the object model and database model are consistent.
[14:32:37] <tdammers> kuribas: to me, the sweet spot in that problem domain, at least for now, is to instate a bunch of conventions, and then use TH to write the "boring" queries for me
[14:33:24] <kuribas> tdammers: your TH can be buggy.
[14:33:30] <tdammers> e.g., I'd say data User = User { username :: String, password :: HashedPassword, email :: EMail }, and then $(deriveEntity 'User), and it would generate all the boring SQL queries for me
[14:33:42] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.4.1)
[14:33:46] <kuribas> I found that my DB library already caught subtle errors with nullability.
[14:33:54] <tdammers> yes, but the beauty of it is that when the TH is buggy, it will most likely blow up across the board, so I get a nice loud early failure
[14:34:15] *** Quits: tiferrei (~tiferrei@user/tiferrei) (Ping timeout: 240 seconds)
[14:34:16] <kuribas> not always.
[14:34:24] <tdammers> no, not always
[14:34:38] <tdammers> but the idea that you can have identical types between postgres and haskell is a pipe dream anyway
[14:34:48] <tdammers> some manual diligence and abundant testing are inevitable
[14:35:06] <kuribas> No, not identical, but an expicit mapping between the two.
[14:35:26] <kuribas> Which is proven consistent at compile time.
[14:35:52] <tdammers> oh, and another bit of wisdom I've inferred is that in most cases, you should have two sets of data types: one set that represents data as it is stored in the database, or rather, retrieved from the database; and one set that you use in your domain logic.
[14:36:40] <tdammers> "proven consistent at compile time" is worthless unless you can somehow guarantee that the database schema will always match at runtime the one you saw at compile time
[14:36:48] <tdammers> but that's quite the coupling requirement
[14:37:05] <kuribas> tdammers: I agree with you, but in our case, our database is explicitly modelled as a object model.
[14:37:23] <tdammers> sounds like a terrible idea to me
[14:37:32] <kuribas> tdammers: still, I allow for changing field names, making custom queries, etc...
[14:38:18] <merijn> bleh, the most recent SQLite releases sound like they'd massively speed up some of my queries, but then I'd have to do a lot of work to support a new persistent and update persistent-sqlite to a newer SQLite
[14:38:21] <kuribas> tdammers: not really, the coupling is not mandatory, just convenient.
[14:39:07] <tdammers> if you don't mandate the coupling, then your type guarantees become suggestions, and thus worthless
[14:39:16] <tdammers> well, maybe useful for documentation purposes, but that's it
[14:39:36] <kuribas> tdammers: well, it's the task of the database deployment to make sure that databases are consistent, not the task of the haskell code.
[14:40:09] <kuribas> tdammers: nope, the type garantees that no queries will fail at runtime (unless the database schema is not updated).
[14:40:12] *** Quits: vglfr (~vglfr@88.155.45.251) (Read error: Connection reset by peer)
[14:40:14] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[14:40:24] *** Joins: vglfr (~vglfr@88.155.45.251)
[14:40:38] *** Joins: tiferrei (~tiferrei@user/tiferrei)
[14:40:40] <tdammers> yes. but it means that you have two choices: a) force the database deployment to always happen in lock-step with application code deployments; or b) write your code to handle the case where the database schema doesn't match
[14:40:43] *** Quits: deadmarshal_ (~deadmarsh@95.38.115.47) (Ping timeout: 260 seconds)
[14:41:02] <tdammers> option a) is shitty, because that's exactly the kind of coupling you want to avoid
[14:41:09] <tdammers> option b) means your types don't buy you much
[14:41:17] *** Joins: Pickchea (~private@user/pickchea)
[14:41:26] <kuribas> it will just throw an exception, like any database code does.
[14:41:49] <kuribas> tdammers: yes, because I need to fix the database, not the code.
[14:42:17] <kuribas> fixing the database is easy (update to new schema), updating the code isn't (find all mismatching values).
[14:42:23] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[14:42:58] <tdammers> yes, but throwing an exception if the data doesn't match your expectations is what happens either way. the types don't prevent that.
[14:43:22] <abastro[m]> I really began using some haskell binding for SQLite, instead of directly using SQLite commandline tool
[14:43:32] <tdammers> essentially, what you get is the guarantee that your code matches *some* schema, but not that it matches the schema it will encounter at runtime
[14:43:41] <kuribas> tdammers: which is fine, no?
[14:43:51] <tdammers> yes, but it's nowhere near as useful as it may seem
[14:43:59] <kuribas> disagree
[14:44:28] <kuribas> I once spend a whole sunday updating code since we changed the database schema.
[14:44:29] <tdammers> the whole appeal of a type-checked database layer is that it's guaranteed to match the schema, but that only works when the schema cannot be changed from under your butt
[14:44:34] <kuribas> With this, it would be 30 minutes work.
[14:45:25] <tdammers> then your schema migration strategy sucks
[14:45:32] <kuribas> For that we have deployment procedures, making sure that the database version matches the app version.
[14:45:57] <tdammers> well yeah, so now your database and application code are tightly coupled
[14:46:07] <kuribas> as in any application?
[14:46:11] <tdammers> no?
[14:46:36] <tdammers> one awesome feature of an SQL database is that multiple clients can concurrently connect to it
[14:46:38] <kuribas> every application makes assumptions about the database schema.
[14:46:50] <kuribas> or you need to use NoSQL.
[14:46:59] <tdammers> yes, it does, but there are plenty of ways you can write your code, and evolve your schema, to do this safely but independently
[14:47:12] <tdammers> and NoSQL has nothing to do with it, the problem is exactly the same
[14:47:38] <tdammers> if your architecture is such that each database is owned by exactly one instance of one component, then it's fine to tightly couple them
[14:47:56] <tdammers> but otherwise, you need to do it such that you can roll out database changes and application changes independently
[14:48:02] *** Joins: xff0x (~xff0x@i121-117-52-147.s41.a013.ap.plala.or.jp)
[14:48:03] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[14:48:18] *** Quits: p0lyph3m (~polyphem@2a00:20:c056:33c3:c59d:d67:df03:351a) (Ping timeout: 260 seconds)
[14:48:30] <tdammers> in fact, in most situations, you want to be able to support a situation where two different versions of the same application are running against the same database in production
[14:48:54] <tdammers> because if you don't, then you cannot do zero-downtime deployments
[14:50:04] <kuribas> that's an orthogonal issue.
[14:50:10] <kuribas> Making the database backwards compatible.
[14:50:39] <kuribas> Has nothing to do with checking the application against the database schema.
[14:50:47] <abastro[m]> Is it  hard to decouple database layer?
[14:51:18] <kuribas> abastro[m]: depends
[14:51:31] <kuribas> if your needs are simple, just make individual queries.
[14:51:39] <kuribas> Otherwise you'll need to compose queries.
[14:52:42] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 272 seconds)
[14:53:17] <tdammers> it depends on how you architect things
[14:54:01] <tdammers> one approach is the "one database per component" approach; if you roll with this one, then nothing outside the component will ever talk to the database directly, and the way you achieve "decoupling" is through the API layer that the component adds
[14:54:36] <tdammers> another approach is to use the database itself as an API between components; in this case, a common approach is to use views and stored procedures to provide a stable API over evolving table schemas
[14:55:03] <kuribas> tdammers: "one database per component" is not our approach.
[14:55:10] <abastro[m]> Components? Hmm
[14:55:13] <tdammers> you can also use a hybrid approach, where you have one central database, but you wrap it in a central API, which all other components talk to
[14:55:42] <tdammers> well, components of a larger system. nodes, servers, processes, whatever you want to call them.
[14:55:43] <abastro[m]> Do you mean microservice by 'components'
[14:55:44] <kuribas> tdammers: though we will have one component to write changes to the database.
[14:55:53] <abastro[m]> Oh, I see
[14:56:02] <tdammers> could be microservices, but doesn't have to be "micro", nor a "service" in the strict sense
[14:56:07] <kuribas> tdammers: but multeple components can read the database.
[14:56:28] <abastro[m]> I can sense incredible coupling
[14:56:35] <kuribas> IMO microservices is just the actor model, in a clumsy way.
[14:56:43] <tdammers> kuribas: arguably, yes
[14:57:02] <tdammers> abastro[m]: if you do it naively, then yes, you will introduce a lot of coupling.
[14:58:07] <abastro[m]> Yep
[14:58:28] <abastro[m]> I mean, is it easy to avoid coupling when there are multiple components reading into the DB?
[14:58:31] <kuribas> still, ideally, each actor should have a formally specified interface.
[15:01:16] <abastro[m]> But that's too ideal
[15:03:23] <kuribas> it's possible with dependend types :)
[15:03:39] <kuribas> or just a big test-suite in another language.
[15:04:26] <tdammers> so just write the test suite
[15:04:51] *** Joins: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee)
[15:05:12] <abastro[m]> If only dependent types were easy
[15:07:16] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[15:07:37] *** Quits: vglfr (~vglfr@88.155.45.251) (Ping timeout: 246 seconds)
[15:08:54] *** Joins: vglfr (~vglfr@88.155.45.251)
[15:10:51] <kuribas> There aren't easy, but they aren't as complicated people make them out to be.
[15:11:13] <kuribas> As long as you don't try to proof your whole program correct in them.
[15:11:28] <kuribas> IMO dependent types are easier than haskell once you get into type system extensions.
[15:11:42] *** Quits: dextaa_ (~dextaa@user/dextaa) (Ping timeout: 272 seconds)
[15:13:01] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[15:13:10] <abastro[m]> Eh idk, my experience in Coq and Agda beg to differ
[15:13:28] <abastro[m]> At least, laziness is not yet implemented there
[15:13:51] <kuribas> abastro[m]: try idris.
[15:14:01] <kuribas> it has optional lazyness.
[15:14:04] *** Joins: dextaa_ (~dextaa@user/dextaa)
[15:14:09] <kuribas> It's also less proof oriented.
[15:14:19] *** Quits: vglfr (~vglfr@88.155.45.251) (Read error: Connection reset by peer)
[15:14:21] <abastro[m]> Yep but I don't think Idris would help much either
[15:14:31] *** Joins: vglfr (~vglfr@88.155.45.251)
[15:14:41] <abastro[m]> When you want to do proof, like any kind of proof, you'd require lots of boilerplates
[15:15:29] <kuribas> not necessarily.
[15:16:37] <kuribas> For example, this function takes an int: foo :: Int -> Int; foo x = x + 1
[15:16:44] <kuribas> it's not a hard proof.
[15:17:21] <abastro[m]> I don't mean the kind of proof which is easy in haskell as well
[15:17:21] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[15:17:56] *** Joins: zeenk (~zeenk@2a02:2f04:a110:7d00:2011:cfed:bad7:3c94)
[15:18:55] *** Quits: vglfr (~vglfr@88.155.45.251) (Read error: Connection reset by peer)
[15:19:06] *** Joins: vglfr (~vglfr@88.155.45.251)
[15:20:38] <kuribas> hard in haskell: foo :: IsRowInSchema row table a Schema => SQL a;  foo = select $ table @. row 
[15:20:43] <kuribas> easy in idris.
[15:21:33] *** Joins: CiaoSen (~Jura@p200300c95735b0002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[15:21:48] <kuribas> abastro[m]: for example, in my library I generate all the rows and tables from the schema, in idris that could be just a value level function which is lifted into a constraint.
[15:22:09] <kuribas> abastro[m]: other example: putting a REST API interface in servant.
[15:22:15] *** Quits: acidjnk (~acidjnk@p200300d0c7049f67fc06a0258b52409e.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[15:22:16] <kuribas> in idris that could be just a value level interface.
[15:25:23] <abastro[m]> I mean, did you try that it works?
[15:26:08] <kuribas> abastro[m]: yes
[15:26:22] <abastro[m]> Hmm
[15:26:24] <kuribas> though I haven't worked out the idris version, is it is lacking so many helper l ibraries.
[15:26:31] <kuribas> like bytestring builders.
[15:26:42] <kuribas> A mysql client library.
[15:27:08] <kuribas> perhaps the latter can be simplified with a scheme ffi binding.
[15:27:18] <kuribas> abastro[m]: but I did try the concept.
[15:27:40] <abastro[m]> Didn't you say that you worked it out with idris ?
[15:27:54] <abastro[m]> That is, the constraint using value level function
[15:27:54] <kuribas> yes, the contraint part.
[15:27:58] <kuribas> indeed.
[15:28:20] <abastro[m]> Did you hooked it up to actual query statement and checked if it works?
[15:28:31] *** Joins: xkuru (~xkuru@user/xkuru)
[15:28:38] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 260 seconds)
[15:28:38] <kuribas> no, but it will work.
[15:29:02] <abastro[m]> Because I personally doubt that
[15:29:12] <kuribas> abastro[m]: https://hackage.haskell.org/package/hasqlator-mysql-0.1.0
[15:29:16] <kuribas> abastro[m]: why?
[15:30:27] *** Quits: m1dnight (~christoph@78-22-9-5.access.telenet.be) (Quit: WeeChat 3.4.1)
[15:30:40] *** Joins: Inst (~Liam@c-98-208-218-119.hsd1.fl.comcast.net)
[15:30:48] *** Joins: m1dnight (~christoph@78-22-9-5.access.telenet.be)
[15:31:08] <abastro[m]> Because it basically requires proving that the constraint works (on the real world usecases)
[15:33:04] <kuribas> So instead of a generated row, I use a string: do t <- from "object"; pure $ sel $ t "id"
[15:33:52] <abastro[m]> Eh
[15:33:53] *** Quits: vglfr (~vglfr@88.155.45.251) (Read error: Connection reset by peer)
[15:35:01] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Quit: User was banned)
[15:35:02] *** Quits: siraben (~siraben@user/siraben) (Quit: User was banned)
[15:35:02] *** Quits: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32) (Quit: User was banned)
[15:35:03] *** Quits: VarikValefor[m] (~varikvale@2001:470:69fc:105::a5d) (Quit: User was banned)
[15:35:03] *** Quits: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe) (Quit: User was banned)
[15:35:03] *** Quits: Deide (~deide@user/deide) (Quit: User was banned)
[15:35:03] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (Quit: User was banned)
[15:35:03] *** Quits: bitonic (~bitonic@2001:470:69fc:105::1812) (Quit: User was banned)
[15:35:05] *** Quits: peddie (~peddie@2001:470:69fc:105::25d) (Quit: User was banned)
[15:35:06] *** Quits: fgaz (~fgaz@2001:470:69fc:105::842) (Quit: User was banned)
[15:35:06] *** Quits: jmcantrell (~jmcantrel@user/jmcantrell) (Quit: User was banned)
[15:35:06] *** Quits: sm (~sm@plaintextaccounting/sm) (Quit: User was banned)
[15:35:08] *** Quits: Arathorn (~arathorn@2001:470:69fc:105::1f) (Quit: User was banned)
[15:35:10] *** Quits: juhp[m] (~juhpmatri@2001:470:69fc:105::6e9) (Quit: User was banned)
[15:35:10] *** Quits: maralorn (~maralorn@2001:470:69fc:105::251) (Quit: User was banned)
[15:35:10] *** Quits: psydroid (~psydroid@user/psydroid) (Quit: User was banned)
[15:35:12] *** Joins: vglfr (~vglfr@88.155.45.251)
[15:35:13] *** Quits: jinsun_ (~jinsun@user/jinsun) (Quit: User was banned)
[15:35:14] *** Quits: Orbstheorem (~orbstheor@2001:470:69fc:105::a56) (Quit: User was banned)
[15:35:16] *** Quits: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b) (Quit: User was banned)
[15:35:17] *** Quits: unclechu (~unclechu@2001:470:69fc:105::354) (Quit: User was banned)
[15:35:17] *** Quits: jneira[m] (~jneiramat@2001:470:69fc:105::d729) (Quit: User was banned)
[15:35:17] *** Quits: Artem[m] (~artemtype@2001:470:69fc:105::75b) (Quit: User was banned)
[15:35:17] *** Quits: ongy[m] (~ongymatri@2001:470:69fc:105::5018) (Quit: User was banned)
[15:35:17] *** Quits: kadoban (~kadoban@user/kadoban) (Quit: User was banned)
[15:35:20] *** Quits: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8) (Quit: User was banned)
[15:35:21] *** Quits: ericson2314 (~ericson23@2001:470:69fc:105::70c) (Quit: User was banned)
[15:35:21] *** Quits: methylene[m] (~methylene@2001:470:69fc:105::1:ccc0) (Quit: User was banned)
[15:35:25] *** Quits: nomagno (~nomagno@2001:470:69fc:105::c1f0) (Quit: User was banned)
[15:35:28] *** Quits: smichel17[m] (~smichel17@2001:470:69fc:105::2d32) (Quit: User was banned)
[15:35:33] *** Quits: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee) (Quit: User was banned)
[15:35:34] *** Quits: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886) (Quit: User was banned)
[15:35:35] *** Quits: kadenwolff[m] (~kadenwolf@2001:470:69fc:105::1:d97f) (Quit: User was banned)
[15:35:39] *** Quits: euphrates[m] (~euphrates@2001:470:69fc:105::fbb5) (Quit: User was banned)
[15:35:44] *** Quits: polykernel[m] (~polykerne@user/polykernel) (Quit: User was banned)
[15:35:44] *** Quits: Ash[m] (~signal-wa@2001:470:69fc:105::1:2318) (Quit: User was banned)
[15:35:45] *** Quits: moats (~oats@user/oats) (Quit: User was banned)
[15:35:45] *** Quits: Guillaum[m] (~guiboumat@2001:470:69fc:105::1:72ac) (Quit: User was banned)
[15:35:45] *** Quits: ac (~aloiscoch@2001:470:69fc:105::65) (Quit: User was banned)
[15:35:46] *** Quits: schuelermine[m] (~schuelerm@user/schuelermine) (Quit: User was banned)
[15:35:46] *** Quits: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be) (Quit: User was banned)
[15:35:46] *** Quits: boxscape (~boxscape@user/boxscape) (Quit: User was banned)
[15:35:46] *** Quits: abastro[m] (~abastroma@2001:470:69fc:105::1:e119) (Quit: User was banned)
[15:35:46] *** Quits: solomon[m] (~solomonco@2001:470:69fc:105::1:6000) (Quit: User was banned)
[15:35:47] *** Quits: yosef36 (~yosefweis@2001:470:69fc:105::1:e501) (Quit: User was banned)
[15:35:50] *** Quits: reactormonk[m] (~reactormo@2001:470:69fc:105::3c24) (Quit: User was banned)
[15:35:50] *** Quits: sekun[m] (~hsekmatri@2001:470:69fc:105::d18f) (Quit: User was banned)
[15:35:50] *** Quits: marinelli[m] (~marinelli@2001:470:69fc:105::2d8) (Quit: User was banned)
[15:35:50] *** Quits: fendor[m] (~fendormat@2001:470:69fc:105::fcbd) (Quit: User was banned)
[15:35:59] *** Quits: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1) (Quit: User was banned)
[15:35:59] *** Quits: VanceIsM7[m] (~vanceism7@2001:470:69fc:105::3ad) (Quit: User was banned)
[15:36:03] <kuribas> from has a constraint on the argument, that checks if it is in the schema.
[15:36:13] *** Quits: kalxd[m] (~kalxdmatr@2001:470:69fc:105::1:576e) (Quit: User was banned)
[15:36:18] *** Joins: juhp[m] (~juhpmatri@2001:470:69fc:105::6e9)
[15:36:27] *** Quits: july541[m] (~july541ma@2001:470:69fc:105::1:e416) (Quit: User was banned)
[15:36:30] *** Quits: eddiemundo (~eddiemund@2001:470:69fc:105::a80) (Quit: User was banned)
[15:36:31] *** Quits: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba) (Quit: User was banned)
[15:36:31] *** Quits: TimothyBess[m] (~dorksidem@2001:470:69fc:105::1:e14e) (Quit: User was banned)
[15:36:32] *** Joins: fgaz (~fgaz@2001:470:69fc:105::842)
[15:36:32] *** Quits: aviladev[m] (~aviladevm@2001:470:69fc:105::1:cbc7) (Quit: User was banned)
[15:36:39] *** Quits: tsmc[m] (~tsmcmatri@2001:470:69fc:105::1:7e1) (Quit: User was banned)
[15:36:45] *** Quits: ninioArtillero[m (~ninioarti@2001:470:69fc:105::1:d1ef) (Quit: User was banned)
[15:36:45] *** Quits: Yehoshua (~yehoshua@2001:470:69fc:105::1:593f) (Quit: User was banned)
[15:36:45] *** Quits: reza[m] (~rezaphone@2001:470:69fc:105::3eda) (Quit: User was banned)
[15:36:45] *** Quits: justosophy[m] (~justosoph@2001:470:69fc:105::572f) (Quit: User was banned)
[15:36:45] *** Quits: hughjfchen[m] (~hughjfche@2001:470:69fc:105::c29d) (Quit: User was banned)
[15:36:45] *** Quits: cdsmith (~cdsmithma@2001:470:69fc:105::284) (Quit: User was banned)
[15:36:45] *** Quits: kevin[m] (~pnotequal@2001:470:69fc:105::a54) (Quit: User was banned)
[15:36:45] *** Quits: ksqsf[m] (~ksqsfmatr@2001:470:69fc:105::1:d8fa) (Quit: User was banned)
[15:36:45] *** Quits: shlevy[m] (~shlevymat@2001:470:69fc:105::1:d3b1) (Quit: User was banned)
[15:36:45] *** Quits: sofviic[m] (~sofviicma@2001:470:69fc:105::1:51fd) (Quit: User was banned)
[15:36:45] *** Quits: oak- (~oakuniver@2001:470:69fc:105::fcd) (Quit: User was banned)
[15:36:45] *** Quits: dgpratt[m] (~dgprattma@2001:470:69fc:105::1:dcdd) (Quit: User was banned)
[15:36:45] *** Quits: Joe[m]12 (~jsricemat@2001:470:69fc:105::1:b4ce) (Quit: User was banned)
[15:36:45] *** Quits: pareto-optimal-d (~pareto-op@2001:470:69fc:105::1:b61f) (Quit: User was banned)
[15:36:45] *** Quits: jkaye[m] (~jkayematr@2001:470:69fc:105::1:86f7) (Quit: User was banned)
[15:36:45] *** Quits: o1lo0lol1o[m] (~o1lo0lol1@2001:470:69fc:105::1:d1c0) (Quit: User was banned)
[15:36:45] *** Quits: AdamS[m] (~adamvalko@2001:470:69fc:105::1:d5f0) (Quit: User was banned)
[15:36:45] *** Quits: ArshiaAghaei[m] (~arshiaagh@2001:470:69fc:105::1:c382) (Quit: User was banned)
[15:36:45] *** Quits: sjanssen (~sjanssenm@2001:470:69fc:105::1:61d8) (Quit: User was banned)
[15:36:45] *** Quits: Las[m] (~lasmatrix@2001:470:69fc:105::74e) (Quit: User was banned)
[15:36:45] *** Quits: charukiewicz[m] (~charukiew@2001:470:69fc:105::ded4) (Quit: User was banned)
[15:36:45] *** Quits: weeezes[m] (~weeezesma@2001:470:69fc:105::1:da65) (Quit: User was banned)
[15:36:45] *** Quits: corisco[m] (~coriscokd@2001:470:69fc:105::1:dea6) (Quit: User was banned)
[15:36:45] *** Quits: jaror[m] (~jaror@2001:470:69fc:105::265) (Quit: User was banned)
[15:36:45] *** Quits: AdamConner-Sax[m (~adamcsmat@2001:470:69fc:105::1:e2c8) (Quit: User was banned)
[15:36:45] *** Quits: ThadeuPaula[m] (~thadeudep@2001:470:69fc:105::1:ded7) (Quit: User was banned)
[15:36:47] *** Joins: peddie (~peddie@2001:470:69fc:105::25d)
[15:36:48] *** Joins: VarikValefor[m] (~varikvale@2001:470:69fc:105::a5d)
[15:37:02] *** Joins: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b)
[15:37:18] *** Joins: Orbstheorem (~orbstheor@2001:470:69fc:105::a56)
[15:37:32] *** Joins: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32)
[15:37:46] *** Joins: ericson2314 (~ericson23@2001:470:69fc:105::70c)
[15:37:49] *** Quits: VarikValefor[m] (~varikvale@2001:470:69fc:105::a5d) (Client Quit)
[15:37:49] *** Quits: peddie (~peddie@2001:470:69fc:105::25d) (Client Quit)
[15:37:49] *** Quits: juhp[m] (~juhpmatri@2001:470:69fc:105::6e9) (Client Quit)
[15:37:49] *** Quits: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b) (Client Quit)
[15:37:49] *** Quits: fgaz (~fgaz@2001:470:69fc:105::842) (Client Quit)
[15:37:49] *** Quits: Orbstheorem (~orbstheor@2001:470:69fc:105::a56) (Client Quit)
[15:37:49] *** Quits: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32) (Client Quit)
[15:37:49] *** Quits: ericson2314 (~ericson23@2001:470:69fc:105::70c) (Client Quit)
[15:38:00] *** Joins: unclechu (~unclechu@2001:470:69fc:105::354)
[15:38:04] <kuribas> he's gone :)
[15:38:12] *** Joins: sekun[m] (~hsekmatri@2001:470:69fc:105::d18f)
[15:38:21] <kuribas> I scared hime away with the dependent types.
[15:38:26] *** Joins: maralorn (~maralorn@2001:470:69fc:105::251)
[15:38:32] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[15:38:38] *** Joins: reza[m] (~rezaphone@2001:470:69fc:105::3eda)
[15:38:52] *** Joins: marinelli[m] (~marinelli@2001:470:69fc:105::2d8)
[15:39:07] *** Joins: Yehoshua (~yehoshua@2001:470:69fc:105::1:593f)
[15:39:22] *** Joins: schuelermine[m] (~schuelerm@user/schuelermine)
[15:39:24] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[15:39:36] *** Joins: sm (~sm@plaintextaccounting/sm)
[15:39:52] *** Joins: justosophy[m] (~justosoph@2001:470:69fc:105::572f)
[15:39:52] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[15:40:06] *** Joins: Deide (~deide@user/deide)
[15:40:18] *** Joins: Artem[m] (~artemtype@2001:470:69fc:105::75b)
[15:40:30] *** Joins: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8)
[15:40:30] *** Joins: psydroid (~psydroid@user/psydroid)
[15:40:42] *** Joins: ongy[m] (~ongymatri@2001:470:69fc:105::5018)
[15:40:54] *** Joins: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba)
[15:40:54] *** Joins: siraben (~siraben@user/siraben)
[15:40:54] *** Joins: july541[m] (~july541ma@2001:470:69fc:105::1:e416)
[15:41:08] *** Joins: smichel17[m] (~smichel17@2001:470:69fc:105::2d32)
[15:41:21] *** Joins: methylene[m] (~methylene@2001:470:69fc:105::1:ccc0)
[15:41:33] *** Joins: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be)
[15:41:45] *** Joins: kadenwolff[m] (~kadenwolf@2001:470:69fc:105::1:d97f)
[15:41:57] *** Joins: fendor[m] (~fendormat@2001:470:69fc:105::fcbd)
[15:41:57] *** Joins: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886)
[15:42:11] *** Joins: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe)
[15:42:23] *** Joins: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee)
[15:42:23] *** Joins: jmcantrell (~jmcantrel@user/jmcantrell)
[15:42:23] *** Joins: jinsun_ (~jinsun@user/jinsun)
[15:42:37] *** Joins: cdsmith (~cdsmithma@2001:470:69fc:105::284)
[15:42:37] *** Joins: moats (~oats@user/oats)
[15:42:50] *** Joins: hughjfchen[m] (~hughjfche@2001:470:69fc:105::c29d)
[15:43:03] *** Joins: kevin[m] (~pnotequal@2001:470:69fc:105::a54)
[15:43:16] *** Joins: ksqsf[m] (~ksqsfmatr@2001:470:69fc:105::1:d8fa)
[15:43:16] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[15:43:16] *** Joins: bitonic (~bitonic@2001:470:69fc:105::1812)
[15:43:29] *** Joins: sofviic[m] (~sofviicma@2001:470:69fc:105::1:51fd)
[15:43:41] *** Joins: Guillaum[m] (~guiboumat@2001:470:69fc:105::1:72ac)
[15:43:55] *** Joins: reactormonk[m] (~reactormo@2001:470:69fc:105::3c24)
[15:44:07] *** Joins: shlevy[m] (~shlevymat@2001:470:69fc:105::1:d3b1)
[15:44:20] *** Joins: kalxd[m] (~kalxdmatr@2001:470:69fc:105::1:576e)
[15:44:34] *** Joins: oak- (~oakuniver@2001:470:69fc:105::fcd)
[15:44:46] *** Joins: dgpratt[m] (~dgprattma@2001:470:69fc:105::1:dcdd)
[15:44:59] *** Joins: Joe[m] (~jsricemat@2001:470:69fc:105::1:b4ce)
[15:45:00] *** Joins: euphrates[m] (~euphrates@2001:470:69fc:105::fbb5)
[15:45:00] *** Joins: jkaye[m] (~jkayematr@2001:470:69fc:105::1:86f7)
[15:45:12] *** Joins: jneira[m] (~jneiramat@2001:470:69fc:105::d729)
[15:45:27] *** Joins: VanceIsM7[m] (~vanceism7@2001:470:69fc:105::3ad)
[15:45:41] *** Joins: polykernel[m] (~polykerne@user/polykernel)
[15:45:41] *** Joins: pareto-optimal-d (~pareto-op@2001:470:69fc:105::1:b61f)
[15:45:41] *** Joins: yosef36 (~yosefweis@2001:470:69fc:105::1:e501)
[15:45:55] *** Joins: Arathorn (~arathorn@2001:470:69fc:105::1f)
[15:46:10] *** Joins: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1)
[15:46:23] *** Joins: tsmc[m] (~tsmcmatri@2001:470:69fc:105::1:7e1)
[15:46:23] *** Joins: nomagno (~nomagno@2001:470:69fc:105::c1f0)
[15:46:35] *** Joins: abastro[m] (~abastroma@2001:470:69fc:105::1:e119)
[15:46:48] *** Joins: kadoban (~kadoban@user/kadoban)
[15:47:02] *** Joins: TimothyBess[m] (~dorksidem@2001:470:69fc:105::1:e14e)
[15:47:14] *** Joins: o1lo0lol1o[m] (~o1lo0lol1@2001:470:69fc:105::1:d1c0)
[15:47:28] *** Joins: AdamS[m] (~adamvalko@2001:470:69fc:105::1:d5f0)
[15:47:40] *** Joins: ac (~aloiscoch@2001:470:69fc:105::65)
[15:47:52] *** Joins: solomon[m] (~solomonco@2001:470:69fc:105::1:6000)
[15:47:52] *** Quits: Inst (~Liam@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 246 seconds)
[15:48:04] *** Joins: weeezes[m] (~weeezesma@2001:470:69fc:105::1:da65)
[15:48:16] *** Joins: ArshiaAghaei[m] (~arshiaagh@2001:470:69fc:105::1:c382)
[15:48:29] *** Joins: eddiemundo (~eddiemund@2001:470:69fc:105::a80)
[15:48:30] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[15:48:41] *** Joins: aviladev[m] (~aviladevm@2001:470:69fc:105::1:cbc7)
[15:48:55] *** Joins: Las[m] (~lasmatrix@2001:470:69fc:105::74e)
[15:48:55] *** Joins: Ash[m] (~signal-wa@2001:470:69fc:105::1:2318)
[15:49:09] *** Joins: boxscape (~boxscape@user/boxscape)
[15:49:21] *** Joins: sjanssen (~sjanssenm@2001:470:69fc:105::1:61d8)
[15:49:35] *** Joins: jaror[m] (~jaror@2001:470:69fc:105::265)
[15:49:47] *** Joins: charukiewicz[m] (~charukiew@2001:470:69fc:105::ded4)
[15:50:00] *** Joins: corisco[m] (~coriscokd@2001:470:69fc:105::1:dea6)
[15:50:12] *** Joins: AdamConner-Sax[m (~adamcsmat@2001:470:69fc:105::1:e2c8)
[15:50:24] *** Joins: ThadeuPaula[m] (~thadeudep@2001:470:69fc:105::1:ded7)
[15:50:41] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[15:54:06] *** Quits: vglfr (~vglfr@88.155.45.251) (Read error: Connection reset by peer)
[15:55:09] *** Joins: vglfr (~vglfr@88.155.45.251)
[15:57:59] *** Joins: razetime (~quassel@117.254.35.152)
[15:58:04] *** Quits: vglfr (~vglfr@88.155.45.251) (Read error: Connection reset by peer)
[15:58:11] *** Joins: vglfr (~vglfr@88.155.45.251)
[15:58:30] *** Joins: jakalx (~jakalx@base.jakalx.net)
[15:59:42] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[16:01:38] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[16:05:03] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:05:22] *** Joins: acidjnk (~acidjnk@p200300d0c7049f67fc06a0258b52409e.dip0.t-ipconnect.de)
[16:06:14] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:950:287b:c4be:ac00)
[16:08:37] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[16:09:27] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:f9b9:c2d3:ad62:759d) (Ping timeout: 250 seconds)
[16:16:12] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[16:16:12] *** Quits: vglfr (~vglfr@88.155.45.251) (Read error: Connection reset by peer)
[16:16:21] *** Joins: vglfr (~vglfr@88.155.45.251)
[16:30:41] *** Quits: feetwind (~mike@user/feetwind) (Ping timeout: 250 seconds)
[16:34:11] *** Joins: jakalx (~jakalx@base.jakalx.net)
[16:36:53] *** Quits: nf (~n@monade.li) (Ping timeout: 252 seconds)
[16:37:55] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 246 seconds)
[16:38:44] *** Joins: Maxdaman1us (~Maxdamant@user/maxdamantus)
[16:38:47] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (Ping timeout: 260 seconds)
[16:38:52] *** Joins: nf (~n@monade.li)
[16:39:05] *** Quits: CiaoSen (~Jura@p200300c95735b0002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[16:39:59] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:41:03] *** Maxdaman1us is now known as Maxdamantus
[16:42:07] *** Quits: vglfr (~vglfr@88.155.45.251) (Ping timeout: 260 seconds)
[16:42:46] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[16:44:13] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[16:46:17] *** Quits: dut (~dut@user/dut) (Ping timeout: 240 seconds)
[16:46:47] *** Quits: acidjnk (~acidjnk@p200300d0c7049f67fc06a0258b52409e.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[16:49:07] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Ping timeout: 246 seconds)
[16:49:11] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:49:15] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[16:54:52] *** Quits: kuribas (~user@ptr-25vy0i6qxp87tp43k9a.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
[16:54:58] *** Joins: Pickchea (~private@user/pickchea)
[16:55:06] *** Joins: kuribas (~user@ptr-25vy0i6qxp87tp43k9a.18120a2.ip6.access.telenet.be)
[16:57:48] *** Joins: vglfr (~vglfr@88.155.45.251)
[17:00:38] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[17:04:10] *** Quits: vglfr (~vglfr@88.155.45.251) (Ping timeout: 246 seconds)
[17:13:51] *** Joins: bahamas (~lucian@86.120.77.115)
[17:14:03] *** Joins: feetwind (~mike@user/feetwind)
[17:17:07] *** Quits: dsrt^ (~dsrt@96-91-136-49-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[17:17:19] *** Quits: sekun[m] (~hsekmatri@2001:470:69fc:105::d18f) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: schuelermine[m] (~schuelerm@user/schuelermine) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: unclechu (~unclechu@2001:470:69fc:105::354) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: bitonic (~bitonic@2001:470:69fc:105::1812) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: reza[m] (~rezaphone@2001:470:69fc:105::3eda) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: moats (~oats@user/oats) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: justosophy[m] (~justosoph@2001:470:69fc:105::572f) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: marinelli[m] (~marinelli@2001:470:69fc:105::2d8) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: euphrates[m] (~euphrates@2001:470:69fc:105::fbb5) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: psydroid (~psydroid@user/psydroid) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: maralorn (~maralorn@2001:470:69fc:105::251) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: Deide (~deide@user/deide) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: methylene[m] (~methylene@2001:470:69fc:105::1:ccc0) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: jinsun_ (~jinsun@user/jinsun) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: siraben (~siraben@user/siraben) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: july541[m] (~july541ma@2001:470:69fc:105::1:e416) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: Yehoshua (~yehoshua@2001:470:69fc:105::1:593f) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: yosef36 (~yosefweis@2001:470:69fc:105::1:e501) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: ongy[m] (~ongymatri@2001:470:69fc:105::5018) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: cdsmith (~cdsmithma@2001:470:69fc:105::284) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: jmcantrell (~jmcantrel@user/jmcantrell) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: jkaye[m] (~jkayematr@2001:470:69fc:105::1:86f7) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: Joe[m] (~jsricemat@2001:470:69fc:105::1:b4ce) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: VanceIsM7[m] (~vanceism7@2001:470:69fc:105::3ad) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: Arathorn (~arathorn@2001:470:69fc:105::1f) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: fendor[m] (~fendormat@2001:470:69fc:105::fcbd) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: nomagno (~nomagno@2001:470:69fc:105::c1f0) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: Ash[m] (~signal-wa@2001:470:69fc:105::1:2318) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: AdamS[m] (~adamvalko@2001:470:69fc:105::1:d5f0) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: sm (~sm@plaintextaccounting/sm) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: Artem[m] (~artemtype@2001:470:69fc:105::75b) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: smichel17[m] (~smichel17@2001:470:69fc:105::2d32) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: Guillaum[m] (~guiboumat@2001:470:69fc:105::1:72ac) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: hughjfchen[m] (~hughjfche@2001:470:69fc:105::c29d) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: ksqsf[m] (~ksqsfmatr@2001:470:69fc:105::1:d8fa) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: jneira[m] (~jneiramat@2001:470:69fc:105::d729) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: tsmc[m] (~tsmcmatri@2001:470:69fc:105::1:7e1) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: kadoban (~kadoban@user/kadoban) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: TimothyBess[m] (~dorksidem@2001:470:69fc:105::1:e14e) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: charukiewicz[m] (~charukiew@2001:470:69fc:105::ded4) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: ThadeuPaula[m] (~thadeudep@2001:470:69fc:105::1:ded7) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: kevin[m] (~pnotequal@2001:470:69fc:105::a54) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: reactormonk[m] (~reactormo@2001:470:69fc:105::3c24) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: kalxd[m] (~kalxdmatr@2001:470:69fc:105::1:576e) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: ac (~aloiscoch@2001:470:69fc:105::65) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: kadenwolff[m] (~kadenwolf@2001:470:69fc:105::1:d97f) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: abastro[m] (~abastroma@2001:470:69fc:105::1:e119) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: shlevy[m] (~shlevymat@2001:470:69fc:105::1:d3b1) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: pareto-optimal-d (~pareto-op@2001:470:69fc:105::1:b61f) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: corisco[m] (~coriscokd@2001:470:69fc:105::1:dea6) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: AdamConner-Sax[m (~adamcsmat@2001:470:69fc:105::1:e2c8) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: oak- (~oakuniver@2001:470:69fc:105::fcd) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: Las[m] (~lasmatrix@2001:470:69fc:105::74e) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: sjanssen (~sjanssenm@2001:470:69fc:105::1:61d8) (Quit: Bridge terminating on SIGTERM)
[17:17:20] *** Quits: dgpratt[m] (~dgprattma@2001:470:69fc:105::1:dcdd) (Quit: Bridge terminating on SIGTERM)
[17:17:20] *** Quits: o1lo0lol1o[m] (~o1lo0lol1@2001:470:69fc:105::1:d1c0) (Quit: Bridge terminating on SIGTERM)
[17:17:20] *** Quits: ArshiaAghaei[m] (~arshiaagh@2001:470:69fc:105::1:c382) (Quit: Bridge terminating on SIGTERM)
[17:17:20] *** Quits: eddiemundo (~eddiemund@2001:470:69fc:105::a80) (Quit: Bridge terminating on SIGTERM)
[17:17:20] *** Quits: sofviic[m] (~sofviicma@2001:470:69fc:105::1:51fd) (Quit: Bridge terminating on SIGTERM)
[17:17:20] *** Quits: polykernel[m] (~polykerne@user/polykernel) (Quit: Bridge terminating on SIGTERM)
[17:17:20] *** Quits: boxscape (~boxscape@user/boxscape) (Quit: Bridge terminating on SIGTERM)
[17:17:20] *** Quits: solomon[m] (~solomonco@2001:470:69fc:105::1:6000) (Quit: Bridge terminating on SIGTERM)
[17:17:20] *** Quits: weeezes[m] (~weeezesma@2001:470:69fc:105::1:da65) (Quit: Bridge terminating on SIGTERM)
[17:17:20] *** Quits: aviladev[m] (~aviladevm@2001:470:69fc:105::1:cbc7) (Quit: Bridge terminating on SIGTERM)
[17:17:20] *** Quits: jaror[m] (~jaror@2001:470:69fc:105::265) (Quit: Bridge terminating on SIGTERM)
[17:19:08] *** Joins: ninioArtillero[m (~ninioarti@2001:470:69fc:105::1:d1ef)
[17:24:25] *** Joins: CiaoSen (~Jura@p200300c95735b0002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[17:25:57] *** Quits: chomwitt (~chomwitt@2a02:587:dc18:da00:e2ec:eb52:4039:9bfe) (Ping timeout: 256 seconds)
[17:26:05] *** Joins: chomwitt (~chomwitt@athedsl-352218.home.otenet.gr)
[17:26:57] *** Joins: juhp[m] (~juhpmatri@2001:470:69fc:105::6e9)
[17:26:57] *** Joins: fgaz (~fgaz@2001:470:69fc:105::842)
[17:26:57] *** Joins: peddie (~peddie@2001:470:69fc:105::25d)
[17:26:57] *** Joins: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b)
[17:26:57] *** Joins: VarikValefor[m] (~varikvale@2001:470:69fc:105::a5d)
[17:26:57] *** Joins: Orbstheorem (~orbstheor@2001:470:69fc:105::a56)
[17:26:57] *** Joins: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32)
[17:26:57] *** Joins: unclechu (~unclechu@2001:470:69fc:105::354)
[17:26:57] *** Joins: sekun[m] (~hsekmatri@2001:470:69fc:105::d18f)
[17:26:57] *** Joins: ericson2314 (~ericson23@2001:470:69fc:105::70c)
[17:26:57] *** Joins: maralorn (~maralorn@2001:470:69fc:105::251)
[17:26:57] *** Joins: reza[m] (~rezaphone@2001:470:69fc:105::3eda)
[17:26:57] *** Joins: marinelli[m] (~marinelli@2001:470:69fc:105::2d8)
[17:26:58] *** Joins: Yehoshua (~yehoshua@2001:470:69fc:105::1:593f)
[17:26:58] *** Joins: schuelermine[m] (~schuelerm@user/schuelermine)
[17:26:58] *** Joins: sm (~sm@plaintextaccounting/sm)
[17:26:58] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[17:26:58] *** Joins: Deide (~deide@user/deide)
[17:26:58] *** Joins: Artem[m] (~artemtype@2001:470:69fc:105::75b)
[17:26:58] *** Joins: psydroid (~psydroid@user/psydroid)
[17:26:58] *** Joins: ongy[m] (~ongymatri@2001:470:69fc:105::5018)
[17:26:58] *** Joins: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba)
[17:26:58] *** Joins: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8)
[17:26:58] *** Joins: siraben (~siraben@user/siraben)
[17:26:58] *** Joins: smichel17[m] (~smichel17@2001:470:69fc:105::2d32)
[17:26:58] *** Joins: methylene[m] (~methylene@2001:470:69fc:105::1:ccc0)
[17:26:58] *** Joins: july541[m] (~july541ma@2001:470:69fc:105::1:e416)
[17:26:58] *** Joins: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be)
[17:26:59] *** Joins: kadenwolff[m] (~kadenwolf@2001:470:69fc:105::1:d97f)
[17:26:59] *** Joins: fendor[m] (~fendormat@2001:470:69fc:105::fcbd)
[17:26:59] *** Joins: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886)
[17:26:59] *** Joins: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe)
[17:26:59] *** Joins: jmcantrell (~jmcantrel@user/jmcantrell)
[17:26:59] *** Joins: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee)
[17:26:59] *** Joins: jinsun_ (~jinsun@user/jinsun)
[17:26:59] *** Joins: moats (~oats@user/oats)
[17:27:00] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[17:27:00] *** Joins: bitonic (~bitonic@2001:470:69fc:105::1812)
[17:27:01] *** Joins: reactormonk[m] (~reactormo@2001:470:69fc:105::3c24)
[17:27:01] *** Joins: Guillaum[m] (~guiboumat@2001:470:69fc:105::1:72ac)
[17:27:01] *** Joins: kalxd[m] (~kalxdmatr@2001:470:69fc:105::1:576e)
[17:27:01] *** Joins: Joe[m] (~jsricemat@2001:470:69fc:105::1:b4ce)
[17:27:01] *** Joins: jkaye[m] (~jkayematr@2001:470:69fc:105::1:86f7)
[17:27:01] *** Joins: euphrates[m] (~euphrates@2001:470:69fc:105::fbb5)
[17:27:01] *** Joins: jneira[m] (~jneiramat@2001:470:69fc:105::d729)
[17:27:01] *** Joins: VanceIsM7[m] (~vanceism7@2001:470:69fc:105::3ad)
[17:27:01] *** Joins: yosef36 (~yosefweis@2001:470:69fc:105::1:e501)
[17:27:01] *** Joins: polykernel[m] (~polykerne@user/polykernel)
[17:27:02] *** Joins: Arathorn (~arathorn@2001:470:69fc:105::1f)
[17:27:02] *** Joins: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1)
[17:27:02] *** Joins: tsmc[m] (~tsmcmatri@2001:470:69fc:105::1:7e1)
[17:27:02] *** Joins: kadoban (~kadoban@user/kadoban)
[17:27:02] *** Joins: abastro[m] (~abastroma@2001:470:69fc:105::1:e119)
[17:27:02] *** Joins: nomagno (~nomagno@2001:470:69fc:105::c1f0)
[17:27:02] *** Joins: TimothyBess[m] (~dorksidem@2001:470:69fc:105::1:e14e)
[17:27:02] *** Joins: ac (~aloiscoch@2001:470:69fc:105::65)
[17:27:02] *** Joins: ArshiaAghaei[m] (~arshiaagh@2001:470:69fc:105::1:c382)
[17:27:02] *** Joins: solomon[m] (~solomonco@2001:470:69fc:105::1:6000)
[17:27:02] *** Joins: eddiemundo (~eddiemund@2001:470:69fc:105::a80)
[17:27:02] *** Joins: aviladev[m] (~aviladevm@2001:470:69fc:105::1:cbc7)
[17:27:02] *** Joins: Ash[m] (~signal-wa@2001:470:69fc:105::1:2318)
[17:27:03] *** Joins: boxscape (~boxscape@user/boxscape)
[17:27:04] *** Joins: charukiewicz[m] (~charukiew@2001:470:69fc:105::ded4)
[17:27:10] *** Joins: justosophy[m] (~justosoph@2001:470:69fc:105::572f)
[17:27:11] *** Joins: ksqsf[m] (~ksqsfmatr@2001:470:69fc:105::1:d8fa)
[17:27:11] *** Joins: kevin[m] (~pnotequal@2001:470:69fc:105::a54)
[17:27:12] *** Joins: hughjfchen[m] (~hughjfche@2001:470:69fc:105::c29d)
[17:27:13] *** Joins: dgpratt[m] (~dgprattma@2001:470:69fc:105::1:dcdd)
[17:27:13] *** Joins: sofviic[m] (~sofviicma@2001:470:69fc:105::1:51fd)
[17:27:13] *** Joins: cdsmith (~cdsmithma@2001:470:69fc:105::284)
[17:27:14] *** Joins: o1lo0lol1o[m] (~o1lo0lol1@2001:470:69fc:105::1:d1c0)
[17:27:14] *** Joins: shlevy[m] (~shlevymat@2001:470:69fc:105::1:d3b1)
[17:27:14] *** Joins: pareto-optimal-d (~pareto-op@2001:470:69fc:105::1:b61f)
[17:27:14] *** Joins: weeezes[m] (~weeezesma@2001:470:69fc:105::1:da65)
[17:27:14] *** Joins: AdamS[m] (~adamvalko@2001:470:69fc:105::1:d5f0)
[17:27:15] *** Joins: AdamConner-Sax[m (~adamcsmat@2001:470:69fc:105::1:e2c8)
[17:27:15] *** Joins: oak- (~oakuniver@2001:470:69fc:105::fcd)
[17:27:15] *** Joins: ThadeuPaula[m] (~thadeudep@2001:470:69fc:105::1:ded7)
[17:27:15] *** Joins: sjanssen (~sjanssenm@2001:470:69fc:105::1:61d8)
[17:27:15] *** Joins: corisco[m] (~coriscokd@2001:470:69fc:105::1:dea6)
[17:27:17] *** Joins: Las[m] (~lasmatrix@2001:470:69fc:105::74e)
[17:27:17] *** Joins: jaror[m] (~jaror@2001:470:69fc:105::265)
[17:31:43] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.5)
[17:32:17] *** Quits: mncheckm (~mncheck@193.224.205.254) (Ping timeout: 240 seconds)
[17:39:44] *** Joins: neurocyte0917090 (~neurocyte@IP-213188117233.dynamic.medianet-world.de)
[17:39:44] *** Quits: neurocyte0917090 (~neurocyte@IP-213188117233.dynamic.medianet-world.de) (Changing host)
[17:39:44] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[17:40:34] *** neurocyte0917090 is now known as neurocyte
[17:42:46] *** Quits: chomwitt (~chomwitt@athedsl-352218.home.otenet.gr) (Read error: Connection reset by peer)
[17:43:23] *** Joins: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca)
[17:43:31] *** Quits: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca) (Remote host closed the connection)
[17:43:58] *** Joins: acidjnk (~acidjnk@p200300d0c7049f67fc06a0258b52409e.dip0.t-ipconnect.de)
[17:46:06] *** Joins: Inst (~Liam@c-98-208-218-119.hsd1.fl.comcast.net)
[17:50:03] *** Joins: deadmarshal_ (~deadmarsh@95.38.115.47)
[17:53:53] *** Quits: MajorBiscuit (~MajorBisc@86.88.79.148) (Ping timeout: 260 seconds)
[17:54:13] *** Quits: deadmarshal_ (~deadmarsh@95.38.115.47) (Ping timeout: 246 seconds)
[17:54:27] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[17:56:24] *** Quits: razetime (~quassel@117.254.35.152) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[17:58:36] *** Quits: Moyst_ (~moyst@user/moyst) (Remote host closed the connection)
[17:58:52] *** Joins: Moyst_ (~moyst@user/moyst)
[17:59:43] *** Quits: dextaa_ (~dextaa@user/dextaa) (Remote host closed the connection)
[18:01:20] *** Joins: dextaa_ (~dextaa@user/dextaa)
[18:04:34] *** Joins: shriekingnoise (~shrieking@201.231.16.156)
[18:05:21] *** Quits: ccntrq (~Thunderbi@2a01:c22:89e6:e500:da63:dc92:f465:54d0) (Remote host closed the connection)
[18:05:49] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:07:53] *** Quits: zeenk (~zeenk@2a02:2f04:a110:7d00:2011:cfed:bad7:3c94) (Ping timeout: 260 seconds)
[18:08:05] *** Joins: mncheckm (~mncheck@193.224.205.254)
[18:15:10] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[18:16:00] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[18:16:16] *** Quits: bahamas (~lucian@86.120.77.115) (Ping timeout: 246 seconds)
[18:17:46] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[18:18:27] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[18:20:49] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Ping timeout: 246 seconds)
[18:33:43] *** Quits: justOkay (~justache@user/justache) (Remote host closed the connection)
[18:34:40] *** Joins: justOkay (~justache@user/justache)
[18:35:32] *** Quits: dextaa_ (~dextaa@user/dextaa) (Remote host closed the connection)
[18:36:02] *** Joins: Akiva (~Akiva@user/Akiva)
[18:38:29] *** Joins: vglfr (~vglfr@88.155.45.251)
[18:39:36] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[18:39:40] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Quit: ZNC - https://znc.in)
[18:41:56] *** Joins: dextaa_ (~dextaa@user/dextaa)
[18:47:07] *** Quits: acidjnk (~acidjnk@p200300d0c7049f67fc06a0258b52409e.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[18:49:03] *** Joins: zeenk (~zeenk@2a02:2f04:a312:5400:bab:b48f:4ed5:7407)
[18:53:30] *** Joins: zeenk2 (~zeenk@2a02:2f04:a313:b800:d260:40a8:2db3:e9ec)
[18:53:50] *** Quits: zeenk (~zeenk@2a02:2f04:a312:5400:bab:b48f:4ed5:7407) (Ping timeout: 252 seconds)
[18:55:11] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.4.1)
[18:57:43] *** Quits: nf (~n@monade.li) (Quit: Fairfarren.)
[18:57:56] *** Joins: zeenk (~zeenk@2a02:2f04:a204:c800:8271:db23:e63b:d87a)
[18:58:19] *** Quits: zeenk2 (~zeenk@2a02:2f04:a313:b800:d260:40a8:2db3:e9ec) (Ping timeout: 256 seconds)
[18:58:38] *** Joins: nf (~n@monade.li)
[18:59:19] *** Quits: vglfr (~vglfr@88.155.45.251) (Ping timeout: 246 seconds)
[19:01:03] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[19:03:04] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[19:03:12] *** Joins: bahamas (~lucian@84.232.140.158)
[19:04:17] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 252 seconds)
[19:05:48] *** Quits: dibblego (~dibblego@haskell/developer/dibblego) (Ping timeout: 240 seconds)
[19:06:56] *** Joins: dibblego (~dibblego@122-199-1-30.ip4.superloop.com)
[19:06:56] *** Quits: dibblego (~dibblego@122-199-1-30.ip4.superloop.com) (Changing host)
[19:06:56] *** Joins: dibblego (~dibblego@haskell/developer/dibblego)
[19:07:35] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[19:08:31] *** Quits: zeenk (~zeenk@2a02:2f04:a204:c800:8271:db23:e63b:d87a) (Ping timeout: 256 seconds)
[19:09:08] *** Quits: gurkenglas (~gurkengla@dslb-178-012-018-212.178.012.pools.vodafone-ip.de) (Ping timeout: 260 seconds)
[19:12:07] *** Joins: vglfr (~vglfr@88.155.45.251)
[19:12:39] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[19:14:03] *** Joins: zeenk (~zeenk@79.115.191.105)
[19:18:37] *** Quits: CiaoSen (~Jura@p200300c95735b0002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[19:20:23] *** Joins: deadmarshal_ (~deadmarsh@95.38.115.47)
[19:21:39] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[19:23:09] *** Joins: stef204 (~stef204@user/stef204)
[19:24:04] *** Joins: slack1256 (~slack1256@191.125.99.79)
[19:26:00] <slack1256> I have gotten pretty good at grasping the `Rep a x` that I will get from an `a` ADT, this for GHC.Generics. I wonder how stable are these representation, as I want to pattern match on them to do some light "uniplate-like" function without extra dependencies. Is this a bad idea?
[19:27:15] *** Quits: cdman (~dcm@user/dmc/x-4369397) (Ping timeout: 260 seconds)
[19:27:43] <fendor[m]> can I instruct cabal to put logs somewhere else than ~/.cabal/logs?
[19:28:14] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[19:28:51] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[19:29:20] <slack1256> fendor[m]: Yes, check /home/fendor/.cabal/config .
[19:29:32] <slack1256> The logs-dir parameter should be commented.
[19:29:44] <fendor[m]> ah, thanks!
[19:31:58] <fendor[m]> apparently I deleted that parameter some time ago
[19:32:00] *** Quits: vglfr (~vglfr@88.155.45.251) (Ping timeout: 272 seconds)
[19:33:37] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Ping timeout: 246 seconds)
[19:35:42] <ProfSimm> How does Haskell accumulate "state" internally before it calculates it/
[19:35:50] <ProfSimm> Does it make a bigger and bigger application chain?
[19:36:15] <slack1256> It does not such thing. It is expression reduction all the way down.
[19:36:21] <ProfSimm> Hmm
[19:36:23] <slack1256> Put the code sample on a paste bin
[19:36:59] <ProfSimm> slack1256: it stores full expression trees at runtime?
[19:38:24] <c_wraith> the program is represented as a graph, which expressions map to nicely.  Note that because of sharing they don't need to be trees.
[19:38:27] <slack1256> It represents the expressions on a graph that it traverses and expand on a "by need" basis.
[19:38:31] <geekosaur> @tell tdammers we've seen some odd cases with such programs where you need to run a compositor for it to work right. I've also had problems with Qt-based programs not drawing/treating menus or popups right without _NET_WORKAREA set
[19:38:31] <lambdabot> Consider it noted.
[19:38:47] <c_wraith> and because of recursion it need not be acyclic
[19:38:53] <geekosaur> @tell tdammers probably best to ask in #xmonad, I had to scroll way back to find your question
[19:38:53] <lambdabot> Consider it noted.
[19:39:20] <slack1256> But even in the context of graph reduction, it is expression reduction.
[19:40:51] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[19:41:17] *** Joins: mixfix41 (~homefame@user/mixfix41)
[19:42:13] *** Quits: deadmarshal_ (~deadmarsh@95.38.115.47) (Ping timeout: 250 seconds)
[19:42:30] <ProfSimm> Apart from seq, how otherwise do I force things to run
[19:42:50] <c_wraith> seq doesn't force things to run.  It links evaluation of two expressions
[19:43:03] <ProfSimm> right
[19:43:11] <c_wraith> Something else still has to cause the evaluation
[19:43:15] <ProfSimm> right
[19:43:19] <slack1256> `seq` sequences evaluation. It doesn not force it
[19:43:22] <slack1256> @type evaluate 
[19:43:23] <lambdabot> a -> IO a
[19:43:30] <geekosaur> @tell tdammers the third possible problem is that canvases or windows popped up over them can't find themselves because the program is using a Windows-compatible window model (screen-relative addressing instead of window-relative). There's no good workaround for that, since non-reparenting window managers break that model.
[19:43:30] <lambdabot> Consider it noted.
[19:43:37] <c_wraith> being demanded by an IO action is what causes evaluation
[19:43:48] <c_wraith> by an IO action that's being executed, that is
[19:44:01] <ProfSimm> Excel is like Haskell, it only runs when you look at the cells :P
[19:44:50] *** Joins: Vajb (~Vajb@2001:999:62:aa00:7f5a:4f10:c894:3813)
[19:46:10] <c_wraith> slack1256: I don't like saying it sequences evaluation, because... it doesn't, intrinsically. pseq does, though. seq is looser, allowing evaluation to happen in either order, so long as both happen.
[19:46:21] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[19:47:43] * slack1256 nods at wisdom
[19:48:38] <slack1256> Mmm I will say from now on that `seq` **links** evaluation (but won't say in what order) haha.
[19:49:19] <tomsmeding> relevant: https://hackage.haskell.org/package/base-4.16.1.0/docs/src/GHC-Conc-Sync.html#line-499
[19:49:33] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[19:50:29] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 252 seconds)
[19:51:19] <geekosaur> that's pretty accurate, I'd say. seq promises that when the right side has been evaluated, so has the left, but doesn't promise which orderor even if they're concurrent
[19:51:59] <tomsmeding> s/when the right side/when the seq/
[19:52:10] *** Joins: slac78047 (~slack1256@186.11.57.103)
[19:52:13] *** Joins: bahamas (~lucian@84.232.140.158)
[19:52:15] <slac78047> Are the ADTs in GHC.Generics stable? How about the DeriveGeneric instance? Am I allowed to pattern match on the `Rep a` ADT or is that an internal module?
[19:52:31] <tomsmeding> or, hm, also s/so has the left/both left and right have also been/
[19:52:32] <tomsmeding> or something
[19:53:41] <tomsmeding> slac78047: I'm quite sure that's public, but not too sure whether ghc guarantees that the association structure of n-ary products or sums remains stable
[19:53:43] <geekosaur> well, I stressed the right because that'swhat is produced by the seq
[19:53:45] *** Joins: razetime (~quassel@117.254.35.152)
[19:53:55] *** Quits: slack1256 (~slack1256@191.125.99.79) (Ping timeout: 250 seconds)
[19:53:57] <geekosaur> so it's what the program "sees" from evaluation of seq
[19:54:03] <tomsmeding> right
[19:54:05] *** slac78047 is now known as slack1256
[19:54:16] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 246 seconds)
[19:54:19] *** Quits: dextaa_ (~dextaa@user/dextaa) (Remote host closed the connection)
[19:55:01] <tomsmeding> slack1256: see https://hackage.haskell.org/package/base-4.15.0.0/docs/GHC-Generics.html#g:9
[19:55:27] <geekosaur> anyway Control.Exception.evaluate is a way to force execution, but it has a bunch of caveats
[19:55:42] <geekosaur> and is very easy to get wrong
[19:56:37] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 240 seconds)
[19:57:35] <slack1256> tomsmeding: Thanks... but ouch.
[19:57:50] <slack1256> I need to use depend on uniplate then ;_;
[19:57:52] <geekosaur> as perits location, it is normally used to force an exception to be thrown at a particular place (usually inside a catch or bracket etc.) instead of leaking out as an unevaluated thunk, but again it has to be used carefully
[19:58:09] <geekosaur> *per its
[19:58:18] <slack1256> s/use //_
[19:58:28] <tomsmeding> slack1256: or you can put the product/sum entries in a list yourself, to become independent of the association order
[19:59:18] <tomsmeding> geekosaur: because it only forces up to WHNF and not further, and it's easy to "accidentally" box something?
[19:59:34] <slack1256> tomsmeding: How so? Do I have access to `toList` on `(:*:)` ?
[19:59:42] <tomsmeding> that wouldn't typecheck
[19:59:53] <tomsmeding> I guess it depends on what exactly you want to do with the Rep
[20:00:11] <geekosaur> yeh, it's not like print that (usually) has to touch an entire value to render it
[20:00:33] <geekosaur> so you still need to seq/deepseq/whatever within it
[20:00:36] <c_wraith> tomsmeding: and it's easy to write something that you think summarizes that data type sufficiently to cause the whole thing to be evaluated - and later discover it missed something
[20:00:47] <tomsmeding> yeah
[20:00:50] <slack1256> I want some uniplate like capabilities on a program that cannot import uniplate (per project guidelines). I wanted to see how much I can do working from the `Rep a` of an ADT.
[20:01:11] * tomsmeding looks up uniplate
[20:01:24] <slack1256> @where uniplate
[20:01:24] <lambdabot> <https://www.haskell.org/haskellwiki/Uniplate>,<https://hackage.haskell.org/package/uniplate>,<http://community.haskell.org/~ndm/uniplate/>,<http://community.haskell.org/~ndm/darcs/uniplate/uniplate.
[20:01:24] <lambdabot> htm>,<https://github.com/ndmitchell/uniplate>,<https://ndmitchell.com/#uniplate_09_oct_2013>,<http://www-users.cs.york.ac.uk/~ndm/uniplate/>
[20:01:48] <tomsmeding> ok uniplate looks like the kithen sink, so "some uniplate like capabilities" tells me nothing lol
[20:01:52] <c_wraith> isn't uniplate mostly a couple helpers built on top of Data.Data? Couldn't you just reimplement that core?
[20:01:57] *** Joins: slaydr (~slaydr@193.19.109.228)
[20:01:58] <slack1256> It is the easy fragment of SYB presented on a modern form.
[20:02:50] <slack1256> *gasp* Data.Data is in base!
[20:02:57] <slack1256> I thought it was on the syb package!
[20:03:54] <geekosaur> nope, it's the basis for GHC.Generics
[20:04:02] <geekosaur> well, the publicly exposedpart
[20:04:15] <slack1256> So now Data.Data is implemented on top of GHC.Generics?
[20:04:26] <tomsmeding> geekosaur: is it? "data.data" has no hits on the GHC.Generics docs page
[20:04:55] <slack1256> I was on the idea that Data.Data and SYB were softly abandoned in favor of GHC.Generics... Is that not the case? if so, I am grad.
[20:04:58] <c_wraith> :t uniplate -- maybe I'm being misled by the type here.  (No, this is not from the actual uniplate package, it's something designed to emulate it)
[20:04:59] <lambdabot> (Data a, Applicative f) => (a -> f a) -> a -> f a
[20:05:00] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[20:05:02] <slack1256> s/grad/glad/
[20:05:28] <geekosaur> hm. thought Data.Data was the lowest levelstuff (slightly above Data.Typeable) and the rest was atop either that or the lower level stuff Data.Data is the public front for
[20:05:50] <geekosaur> so it may be exposing the lowest level part of GHC.Generics
[20:06:25] <c_wraith> I think Data.Data is entirely separate from GHC.Generics
[20:06:27] <tomsmeding> looks like if Data.Data and GHC.Generics are connected, it's at least not advertised in the docs
[20:07:03] <geekosaur> that seems like an odd duplication, then
[20:07:24] <geekosaur> maybe it's just not worth fixing
[20:08:04] <tomsmeding> Data.Data looks a lot more "dynamically typed" to me, like you don't really get type-level information about the structure
[20:08:18] <tomsmeding> you get _value-level_ information about the structure, whereas GHC.Generics gives you both (linked)
[20:08:41] <tomsmeding> not saying there is no duplication though
[20:09:34] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:908a:bab:b0c0:af34) (Quit: WeeChat 2.8)
[20:12:27] *** Joins: deadmarshal_ (~deadmarsh@95.38.115.47)
[20:13:57] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 240 seconds)
[20:16:41] *** Quits: deadmarshal_ (~deadmarsh@95.38.115.47) (Ping timeout: 250 seconds)
[20:16:56] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[20:17:34] <slack1256> tomsmeding: Are they used for the same purpouses? It seems to me that GHC.Generics is really oriented to provide generic typeclass instances for consumers and Data.Data/syb is oriented to traverse ADT "generically".
[20:17:35] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[20:17:38] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[20:18:08] <tomsmeding> I guess, yes, though you can implement (2) using (1) of course
[20:18:13] <tomsmeding> though potentially less nicely
[20:18:32] <tomsmeding> slack1256: what functions from uniplate would you need most dearly
[20:19:19] <tomsmeding> just 'Data.Generics.Uniplate.Operations.uniplate'?
[20:19:38] <tomsmeding> also, that function seems to have to make a choice regarding associativity as well lol
[20:20:03] <slack1256> Just Data.Generics.Uniplate.Operations.uniplate yes
[20:20:21] <slack1256> Hahah you cannot escape associativity.
[20:20:38] <tomsmeding> slack1256: because 'Str' is a binary tree :p
[20:20:58] *** Joins: dsrt^ (~dsrt@96-91-136-49-static.hfc.comcastbusiness.net)
[20:22:01] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Ping timeout: 245 seconds)
[20:26:05] <tomsmeding> it seems uniplate does things left-associatively
[20:26:07] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:26:18] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[20:27:58] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[20:30:05] *** Quits: bitonic (~bitonic@2001:470:69fc:105::1812) (Quit: You have been kicked for being idle)
[20:30:49] <slack1256> To operate over a `Rep a`/Generic structure given the associativity problem, I need to do so defining a new class with the function I am interested and define the correct instances. That is the correct approach it seems.
[20:31:06] <tomsmeding> I think 'uniplate' is definable from Generic
[20:31:18] *** Joins: vglfr (~vglfr@88.155.45.251)
[20:31:47] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[20:32:12] *** Joins: gurkenglas (~gurkengla@dslb-178-012-018-212.178.012.pools.vodafone-ip.de)
[20:35:16] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[20:35:46] *** Joins: fendor_ (~fendor@77.119.209.169.wireless.dyn.drei.com)
[20:35:51] *** Quits: vglfr (~vglfr@88.155.45.251) (Ping timeout: 260 seconds)
[20:35:52] *** Joins: cheater (~Username@user/cheater)
[20:37:15] *** Joins: vglfr (~vglfr@88.155.45.251)
[20:38:33] <slack1256> Well I will go back to work. Thanks for the discussion tomsmeding, c_wraith ; it helped me clarify .
[20:38:33] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[20:38:39] *** Quits: fendor (~fendor@178.115.48.110.wireless.dyn.drei.com) (Ping timeout: 260 seconds)
[20:38:45] *** Quits: lambdap2 (~lambdap@static.167.190.119.168.clients.your-server.de) (Quit: lambdap2)
[20:38:58] *** Quits: mncheckm (~mncheck@193.224.205.254) (Ping timeout: 260 seconds)
[20:39:07] *** Joins: lambdap2 (~lambdap@static.167.190.119.168.clients.your-server.de)
[20:40:39] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:40:56] *** Quits: Axman6 (~Axman6@user/axman6) (Ping timeout: 260 seconds)
[20:44:13] *** Quits: vglfr (~vglfr@88.155.45.251) (Ping timeout: 260 seconds)
[20:45:56] *** Joins: vglfr (~vglfr@88.155.45.251)
[20:47:00] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Quit: WeeChat 3.5)
[20:47:07] *** Quits: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[20:47:49] *** Joins: rawley (~rawley@142.99.241.242)
[20:50:51] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[20:53:11] <tomsmeding> slack1256: https://paste.tomsmeding.com/rKtfDDDI
[20:53:18] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[20:55:09] *** Quits: mbuf (~Shakthi@122.174.50.185) (Quit: Leaving)
[20:55:36] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[20:55:52] <tomsmeding> slack1256: if you don't like the standalone instance declaration, you can also use DeriveAnyClass, but I'm personally not a fan of that: https://paste.tomsmeding.com/bqAuXkK5
[20:57:36] *** Quits: Vajb (~Vajb@2001:999:62:aa00:7f5a:4f10:c894:3813) (Read error: Connection reset by peer)
[20:57:43] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[21:01:59] *** Quits: vglfr (~vglfr@88.155.45.251) (Ping timeout: 260 seconds)
[21:03:36] *** Joins: troydm (~troydm@host-176-37-124-197.b025.la.net.ua)
[21:04:13] *** Joins: bahamas (~lucian@84.232.140.158)
[21:04:46] *** Joins: CiaoSen (~Jura@p200300c95735b0002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[21:04:52] *** Joins: Sgeo_ (~Sgeo@user/sgeo)
[21:06:31] *** Joins: awpr (uid446117@id-446117.lymington.irccloud.com)
[21:08:04] *** Joins: vglfr (~vglfr@88.155.45.251)
[21:08:07] *** Quits: Sgeo (~Sgeo@user/sgeo) (Ping timeout: 260 seconds)
[21:08:49] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 246 seconds)
[21:09:33] *** Quits: kuribas (~user@ptr-25vy0i6qxp87tp43k9a.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
[21:14:51] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Quit: WeeChat 3.5)
[21:15:02] *** Joins: deadmarshal_ (~deadmarsh@95.38.115.47)
[21:16:54] *** Joins: Sgeo__ (~Sgeo@user/sgeo)
[21:19:59] *** Quits: Sgeo_ (~Sgeo@user/sgeo) (Ping timeout: 256 seconds)
[21:22:05] *** Joins: jackalope (~jackalope@165.91.13.36)
[21:23:43] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[21:24:59] *** Joins: pnotequalnp (~kevin@user/pnotequalnp)
[21:25:27] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[21:25:35] *** Quits: vglfr (~vglfr@88.155.45.251) (Read error: Connection reset by peer)
[21:25:53] *** Joins: vglfr (~vglfr@88.155.45.251)
[21:31:53] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[21:32:31] *** Joins: __monty__ (~toonn@user/toonn)
[21:33:34] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) ()
[21:34:22] *** Quits: vglfr (~vglfr@88.155.45.251) (Ping timeout: 246 seconds)
[21:34:37] *** Joins: vglfr (~vglfr@88.155.45.251)
[21:43:38] *** Quits: razetime (~quassel@117.254.35.152) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:43:57] *** Joins: razetime (~quassel@117.254.35.152)
[21:44:27] *** Quits: razetime (~quassel@117.254.35.152) (Client Quit)
[21:49:17] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[21:49:20] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Client Quit)
[21:49:25] *** Quits: vglfr (~vglfr@88.155.45.251) (Ping timeout: 246 seconds)
[21:51:21] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[22:00:17] *** Joins: econo (uid147250@user/econo)
[22:02:13] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[22:04:11] *** Quits: zeenk (~zeenk@79.115.191.105) (Quit: Konversation terminated!)
[22:06:39] *** Joins: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net)
[22:09:17] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[22:11:49] *** Quits: pnotequalnp (~kevin@user/pnotequalnp) (Ping timeout: 246 seconds)
[22:12:07] *** Quits: CiaoSen (~Jura@p200300c95735b0002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[22:15:51] *** Joins: bahamas (~lucian@84.232.140.158)
[22:19:16] *** Joins: vorpuni (~pvorp@2001:861:3881:c690:b8bb:8dc:5301:55cc)
[22:20:13] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 246 seconds)
[22:21:02] *** Joins: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de)
[22:21:32] *** Quits: raym (~raym@user/raym) (Remote host closed the connection)
[22:22:36] *** Joins: raym (~raym@user/raym)
[22:22:53] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Quit: WeeChat 3.5)
[22:23:15] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[22:28:42] *** Quits: jackalope (~jackalope@165.91.13.36) (Ping timeout: 272 seconds)
[22:30:24] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[22:30:24] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[22:30:33] *** allbery_b is now known as geekosaur
[22:30:49] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[22:30:49] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[22:30:52] *** allbery_b is now known as geekosaur
[22:31:14] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[22:31:14] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[22:31:17] *** allbery_b is now known as geekosaur
[22:31:39] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[22:31:39] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[22:31:42] *** allbery_b is now known as geekosaur
[22:32:03] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[22:32:03] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[22:32:03] *** Quits: allbery_b (~geekosaur@xmonad/geekosaur) (K-Lined)
[22:32:31] *** Quits: mvk (~mvk@2607:fea8:5cc3:7e00::7980) (Ping timeout: 256 seconds)
[22:35:40] *** Quits: deadmarshal_ (~deadmarsh@95.38.115.47) (Ping timeout: 272 seconds)
[22:36:04] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[22:38:50] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 272 seconds)
[22:40:35] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[22:41:29] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[22:42:12] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[22:42:38] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[22:42:51] *** Joins: hololeap (~hololeap@user/hololeap)
[22:43:01] <unit73e> is it just me or hls crashes a lot? :\
[22:43:27] <slack1256> unit73e: It doesn't crashes to me that much.
[22:43:44] <slack1256> s/crashes/crash/
[22:44:06] <slack1256> Usually if it is failling on a loop, it is not doing the setup/initial build correctly.
[22:44:26] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:44:48] <unit73e> hum, whenever I change something in the cabal it doesn't know I made that change, but that's fine I just restart, and then crashes
[22:45:02] <unit73e> when it figures out the setup it works fine
[22:45:33] <unit73e> not sure if hls works better with stack or not
[22:45:44] <unit73e> I'm not really picky on the builder, whatever is fine
[22:45:56] <tomsmeding> unit73e: does does it print something in the error log when it crashes?
[22:46:08] <unit73e> no, just error...
[22:46:17] <unit73e> minus something error
[22:46:25] <tomsmeding> what editor do you use?
[22:46:32] <unit73e> vim with coc
[22:46:57] <tomsmeding> could you post the hls stderr log?
[22:47:04] <tomsmeding> if you know where that gets sent
[22:48:26] <unit73e> executing hls in the console would be the same right? I just got an error
[22:49:08] <unit73e> https://paste.tomsmeding.com/qDbMkwfp
[22:49:34] <tomsmeding> right
[22:49:39] <tomsmeding> how have you installed HLS?
[22:50:15] <unit73e> with debug: https://paste.tomsmeding.com/xeWej2DQ
[22:50:22] *** Joins: pnotequalnp (~kevin@user/pnotequalnp)
[22:50:49] <unit73e> I installed this: https://aur.archlinux.org/packages/haskell-language-server-static
[22:51:06] <unit73e> it's a glorified extract of what's in github
[22:51:16] <unit73e> so no inventions
[22:51:46] <unit73e> it ends up working after a while but it's annoying
[22:51:49] <tomsmeding> somehow I can't find the relevant issue now, but this is 99.9% sure the standard issue where a static-linked HLS wreaks havoc
[22:52:16] <tomsmeding> the tried and true method of working around that is to compile hls yourself, possibly using `ghcup compile hls`
[22:52:45] <tomsmeding> presumably the ghcup-distributed hls doesn't have this issue anymore since very recently, but I haven't tried that yet
[22:53:42] <unit73e> tomsmeding, oof might as well wait in that case. thanks. it was really bugging me.
[22:54:47] <unit73e> also i'll post my xp3 archive soon. I need a CLI and archive and that's it.
[22:54:59] <unit73e> archive as in, opposite of extract
[22:59:38] <maerwald> unit73e: what platform?
[22:59:38] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Read error: Connection reset by peer)
[23:00:13] <unit73e> maerwald, I don't get your question. what platform what?
[23:00:31] <maerwald> unit73e: your platform
[23:00:44] <unit73e> what os I'm using? arch linux
[23:00:45] *** Joins: Graham31515 (~Graham@user/Graham31415)
[23:01:05] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[23:01:55] *** Joins: slac82471 (~slack1256@191.125.227.201)
[23:02:25] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[23:02:26] <maerwald> you can try: ghcup install hls -u 'https://github.com/hasufell/haskell-language-server/releases/download/v1.6.2.2-rc1/haskell-language-server-1.6.1.1-x86_64-fedora27-linux.tar.xz' 1.6.1.1
[23:02:39] <maerwald> that one is dynamically linked
[23:02:59] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[23:03:18] *** Joins: jackalope (~jackalope@50-24-138-131.bcstcmta02.res.dyn.suddenlink.net)
[23:04:05] *** Quits: slack1256 (~slack1256@186.11.57.103) (Ping timeout: 252 seconds)
[23:04:26] *** slac82471 is now known as slack1256
[23:05:22] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[23:06:07] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[23:06:16] <unit73e> maerwald, thanks. these are the next releases?
[23:06:33] <maerwald> yeah
[23:07:46] <tomsmeding> maerwald: that url seems to have an identity crisis regarding its version, is it 1.6.1.1 or 1.6.2.2-rc1? :p
[23:07:52] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[23:07:59] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[23:08:03] <maerwald> use at your own risk
[23:08:46] <maerwald> but if you don't test now, you'll be a tester for the actual release anyway...
[23:09:58] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Client Quit)
[23:13:27] <Graham31515> I've been reading through Richard Bird's "Thinking functionally with Haskell", and have become quite frustrated upon reaching the section on algorithmic time complexity. I think the problem is that Bird skips too many steps in the time complexity examples, such that I can't see how the result is arrived at. Can anyone recommend Haskell-oriented resources for calculating the time complexity of 
[23:13:33] <Graham31515> algorithms?
[23:13:49] *** Joins: vicfred (~vicfred@user/vicfred)
[23:14:25] <janus> Graham31515: would you otherwise recommend the book? sounds like it is difficult
[23:14:56] *** Quits: mixfix41 (~homefame@user/mixfix41) (Ping timeout: 272 seconds)
[23:15:21] <Graham31515> janus, its my second Haskell book after "Learn you a Haskell", and so far it has been quite accessible.
[23:15:29] <janus> interesting
[23:15:56] <janus> Graham31515: have you looked at 'Algorithm Design with Haskell'? co-authored by Bird. is it on your list?
[23:16:50] <Graham31515> i looked at it briefly, but was turned off by the choice to use a non-fixed-width font for the code snippets. It hurt my eyes, to be honest!
[23:18:52] <Graham31515> I've started reading Thinking Functionally along side the errata list, becase there are some mistakes which could be quite confusing if you don't notice https://www.cs.ox.ac.uk/publications/books/functional/errata.html
[23:19:28] *** Joins: mixfix41 (~homefame@user/mixfix41)
[23:19:42] <janus> oh that's a bummer, hopefully they have fixed them in the ebook version if there is one
[23:19:46] *** Quits: stef204 (~stef204@user/stef204) (Quit: WeeChat 3.5)
[23:20:38] *** Joins: nosewings (~ngpc@2603-8081-3e05-e2d0-d1c9-95f0-ca37-6e6f.res6.spectrum.com)
[23:21:22] <[exa]> Graham31515: the "algorithmic time complexity" there is the big-O notation or something more specific?
[23:21:51] <Graham31515> Well, Bird uses big theta, but yeah.
[23:22:11] <tapas> sm: aight you good i 0.4.2.4 is out
[23:22:59] <[exa]> Graham31515: that's a related convention (people usually don't distinguish these much unless going into uncanny details)
[23:23:49] <[exa]> Graham31515: anything specific that's unclear with that? (does the book include the formal definition?)
[23:23:55] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 246 seconds)
[23:24:01] *** Quits: justOkay (~justache@user/justache) (Read error: Connection reset by peer)
[23:24:45] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[23:25:01] *** Joins: justOkay (~justache@user/justache)
[23:25:16] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[23:25:26] <Graham31515> [exa]: Right. I'm familiar with the terms and ideas, but I'm not sure the notation is particularly standard. The book introduces the concept and presents some equations for simple algorithms in a way that suggests one can just rearrage the equations to find the result. But then Bird just gives the answer instead of showing how the answer was found.
[23:27:27] <Graham31515> if you search google, its easy to find a pdf of the book should that interest you. Pg 158 is where i start getting lost.
[23:27:47] <Graham31515> (i have the dead tree version, btw)
[23:29:12] <[exa]> ok I'll google a bit
[23:29:17] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[23:29:42] <Graham31515> In any event, I'd be happy to look at other resources. Perhaps someone knows of some they can recommend?
[23:30:50] *** Joins: bahamas (~lucian@84.232.140.158)
[23:31:05] <monochrom> Big Theta is standard, just less popular than Big O.
[23:31:53] <monochrom> Big Theta is more honest than Big O, given how people actually use Big O.
[23:32:29] <Graham31515> Yes, when I say non-standard notation, I don't refer to the Theta. Bird shows things like: T(foldr (++) []))(0, n) = \Theta(1).
[23:33:45] <monochrom> Perhaps Big Theta is less popular just because, until Unicode became widespread, it had been impossible to even transmit the letter Θ.
[23:33:46] <Graham31515> But maybe that's just how folks write this stuff. I have an EE degree, not CS, and it was a while ago so I'm not sure we covered this at all.
[23:33:51] *** Quits: shriekingnoise (~shrieking@201.231.16.156) (Quit: Quit)
[23:34:12] *** Joins: shriekingnoise (~shrieking@201.231.16.156)
[23:35:31] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 260 seconds)
[23:36:00] *** Quits: Zemyla (~ec2-user@ec2-54-196-172-247.compute-1.amazonaws.com) (Ping timeout: 252 seconds)
[23:36:45] *** Joins: Zemyla (~ec2-user@ec2-54-196-172-247.compute-1.amazonaws.com)
[23:37:45] *** Quits: rawley (~rawley@142.99.241.242) (Ping timeout: 272 seconds)
[23:38:01] <sm> tapas: thanks!
[23:38:20] <[exa]> Graham31515: ok got the pdf, there's a bit of extra non-standard notation in how the algorithms are parametrized by m,n for problem sizes but that's doable I guess
[23:38:25] <maerwald> tapas: good Haskell citizen :D
[23:38:58] *** Quits: benin (~benin@183.82.24.110) (Ping timeout: 246 seconds)
[23:39:44] <Franciman> does haskell have undelimited continuations?
[23:40:44] <Graham31515> [exa]: great! is the idea that one can just rearrange the equations to "solve" for, say, T(foldl (++) [])(k, m, n)? And if so, how?
[23:41:13] <[exa]> Franciman: if that means "not the shift/reset style" then I'd say yes, anything can be simulated within Cont (even call/cc)
[23:41:30] <Franciman> [exa]: how do you get the continuation of the whole program? 
[23:41:39] <Franciman> i always see it to be limited to runCont
[23:41:43] <maerwald> tomsmeding: I have a great suggestion for the playground
[23:41:43] <[exa]> ah, not this sense of "undelimited" then :D
[23:41:49] <Franciman> so i'd have to just run my whole program in runCont
[23:41:50] <Franciman> ofc
[23:41:59] <[exa]> Graham31515: lemme check
[23:42:01] <maerwald> tomsmeding: allow to compile on windows :D
[23:42:07] *** Joins: benin (~benin@183.82.24.110)
[23:42:35] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 252 seconds)
[23:43:13] <tomsmeding> maerwald: ._.
[23:43:17] <tomsmeding> someone else can do that
[23:43:25] <maerwald> I'd use it for regular development then
[23:43:36] *** Joins: slac59003 (~slack1256@186.11.57.103)
[23:43:38] <tomsmeding> yes I am aware of the value that would bring :p
[23:43:39] <maerwald> I have 32gb ram, but having an open windows VM stretches even that
[23:43:47] <tomsmeding> :')
[23:45:13] <Graham31515> [exa]: note also there is some relevant errata for these pages
[23:45:30] <maerwald> I can imagine some great hacks to let those windows build run on github CI runners
[23:45:37] *** Quits: slack1256 (~slack1256@191.125.227.201) (Ping timeout: 246 seconds)
[23:46:05] <[exa]> Graham31515: yeah I see, like wtf is the 'mn' there
[23:47:53] <maerwald> tomsmeding: you have a pipeline with a hundred windows jobs that always fails. Then you restart a job via API. The job pulls files from your pastebin and runs them, then fails again before uploading the results to pastebin again
[23:47:58] *** Joins: bahamas (~lucian@84.232.140.158)
[23:48:03] <maerwald> xD
[23:48:19] <tomsmeding> lol
[23:48:42] <tomsmeding> turnaround time would be atrocious
[23:48:43] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[23:48:59] <maerwald> just need more spinners with cool effects
[23:49:03] <maerwald> "starting pod..."
[23:49:07] <maerwald> "chopping wood..."
[23:49:26] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[23:49:45] <[exa]> Graham31515: okay I guess I chewed through that
[23:50:01] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[23:51:33] <monochrom> Perhaps mn just means m times n.
[23:52:10] <[exa]> yeah it took me a second to switch to eager evaluation to see why m*n :D
[23:53:06] <sm> anyone interested in getting yesod working with GHC 9.2: https://github.com/yesodweb/yesod/issues/1757 
[23:54:09] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[23:59:13] <maerwald> nah
[23:59:36] <maerwald> I mean, no one except M1 users :D
[23:59:58] <maerwald> because their only hope is the latest GHC version from last week :p
