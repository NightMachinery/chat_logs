[00:02:59] *** Joins: selwyn (~selwyn@user/selwyn)
[00:16:05] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[00:19:01] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 250 seconds)
[00:28:21] <gilberth> Can one add comments to Libre Office spread sheet cells?
[00:30:21] <gilberth> And where is imake? I don't have that neither with macOS nor with Linux. :/
[00:30:29] *** Quits: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte) (Quit: Leaving)
[00:32:27] *** Joins: lisp123 (~lisp123@45.86.202.65)
[00:34:12] <moon-child> seems to be in an 'imake' package, at least on arch linux
[00:34:36] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:40:02] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[00:41:52] *** Quits: lisp123 (~lisp123@45.86.202.65) (Ping timeout: 250 seconds)
[00:42:27] <gilberth> moon-child: I found it for Debian, too. It hides in an xutils-dev package.
[00:43:21] * gilberth implements a little help screen.
[00:52:10] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 240 seconds)
[00:55:20] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[00:55:36] <dave0> maw
[00:56:24] <gilberth> Hello dave0 !
[00:56:42] <dave0> hey gilberth space!
[00:57:28] <gilberth> Oops, I lost one, but you found it. Thanks!
[00:57:44] <dave0> aha
[00:57:53] <dave0> spaces are fungible
[01:01:37] *** Quits: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net) (Quit: leaving)
[01:02:24] <pjb> dave0: as long as you put them on the blockchain…
[01:06:49] <hayley> shka: Nope, no C in SICL.
[01:09:10] *** Joins: lisp123 (~lisp123@45.86.202.65)
[01:12:20] <edgar-rft> are you blind? SI *C* L
[01:12:35] <hayley> https://www.youtube.com/watch?v=7vtFGZz_XKg
[01:12:35] -ixelp- Julia's Song (Peel Session 1) - YouTube
[01:13:18] *** Quits: lisp123 (~lisp123@45.86.202.65) (Read error: Connection reset by peer)
[01:14:11] <hayley> edgar-rft: Bollocks.
[01:17:13] <dave0> that stands for cookie
[01:17:37] <edgar-rft> yeah, I want Cookie Lisp! :-)
[01:19:44] *** Joins: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net)
[01:20:11] * lotuseater ran out of the last cookie an hour ago
[01:22:48] <edgar-rft> munch, munch...
[01:26:35] <recordgroovy> Finally
[01:27:19] <recordgroovy> I was able to prep the sha1 library so that fukamachiware can replace ironclad with it
[01:27:44] <recordgroovy> Now I just need to wait
[01:27:51] <lotuseater> yes those double-oat-choco cookies like from IKEA
[01:27:56] <hayley> https://www.youtube.com/watch?v=KQORryj3Li0
[01:27:57] -ixelp- Oh! 2025 - YouTube
[01:39:03] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[01:39:29] <edgar-rft> lotuseater: did the IKEA cookies come with assembly instructions?
[01:40:19] <lotuseater> no, and they're quite monolithic
[01:40:30] <lotuseater> not like oreos
[01:41:05] <lotuseater> but wait, there are nice memes with IKEA instruction manuals
[01:42:13] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 250 seconds)
[01:42:46] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[01:45:18] <lotuseater> https://trash.randomerror.de/c9hg2/one_punch.jpg
[01:45:37] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[01:49:36] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[01:50:07] *** Quits: ck_ (~ck@plskthx.org) (Ping timeout: 240 seconds)
[01:52:40] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 240 seconds)
[02:00:29] <hayley> So some authors allow for pointers from the global heap to local heaps, but set up a read trap of some sort, which the thread that created the object handles and proceeds to copies out lazily. But that means threads can't be blocked arbitrarily long (okay, the SICL GC design has provisions for this around IO), and what are you supposed to do when the creator thread stops? 
[02:01:17] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 250 seconds)
[02:01:19] <hayley> I suppose I could imagine it being handled by a daemon thread that kicks out objects from nurseries, and/or the major GC fixing things up.
[02:03:06] *** Joins: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte)
[02:06:00] <hayley> But then how do you do the damn read barrier?
[02:11:15] <edgar-rft> I know it's hard, but have you tried going to school?
[02:12:35] <hayley> Yes.
[02:13:34] <edgar-rft> ...and, did it work?
[02:15:27] <hayley> No.
[02:15:56] <hayley> Though there were graphs, I can't imagine programs in which things are made globally reachable but still not used still.
[02:16:04] <hayley> s/graphs/graphs showing otherwise
[02:17:20] <edgar-rft> That sounds like a good strategy - if you can't read just look at the pictures!
[02:34:03] *** Quits: Alfr (~Alfr@user/alfr) (Killed (zirconium.libera.chat (Nickname regained by services)))
[02:34:07] *** Joins: Alfr (~Alfr@user/alfr)
[02:45:04] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[02:45:30] *** Joins: Alfr (~Alfr@user/alfr)
[02:47:05] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[02:48:32] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[02:48:48] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[02:57:30] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 250 seconds)
[03:26:24] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Quit: ec_)
[03:32:17] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 250 seconds)
[03:40:29] *** Joins: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa)
[03:56:27] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 240 seconds)
[04:22:31] * lotuseater discovers once again how useful :ALLOCATION :CLASS and UPDATE-INSTANCE-FOR-DIFFERENT-CLASS can be
[04:28:54] <hayley> https://twitter.com/AnarchistLib/status/1430936287448535045 no-foucalt-allowed
[04:32:53] <lotuseater> i know and also no defun is allowed
[04:33:00] <lotuseater> haha
[04:34:38] <lotuseater> another difference between defstruct and defclass. when giving accessor names the former defines its (SETF FOO) by DEFUN, the latter with DEFGENERIC/DEFMETHOD so one is more flexible
[04:35:00] <kakuhen> for the object-oriented events API, we had to make after methods for update-instance-for-different-class
[04:35:40] <kakuhen> mostly because the way we make objects listen for events involves mixing them in with an event listener class
[04:35:41] <lotuseater> yes
[04:35:58] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[04:36:11] <kakuhen> we still have to implement namespaces for events but ive been too lazy to fix it
[04:36:48] <kakuhen> http://0x0.st/-tVr.lisp
[04:36:49] <lotuseater> can you explain that more?
[04:36:52] <lotuseater> ah
[04:37:26] <kakuhen> a convenient way to view that file is by opening it in eww and enabling lisp-mode
[04:40:24] *** Joins: lisp123 (~lisp123@45.86.202.65)
[04:40:41] <lotuseater> oh someone is now going with iterate :P
[04:41:03] <lotuseater> right, lemme try ..
[04:42:45] <kakuhen> i've been using iterate for this codebase
[04:42:53] <kakuhen> the informal rule is to never use loop, only iterate, for consistency.
[04:42:58] <lotuseater> so i can also call helm-lisp-indent
[04:43:06] <lotuseater> aha?
[04:43:15] <lotuseater> who told you that?
[04:43:18] <kakuhen> the only reason i use loop is when I am too lazy to figure out how to add cl-iter as a dependency to a package
[04:43:26] <kakuhen> nobody told me that
[04:43:30] <kakuhen> it's a rule I made for the codebase
[04:43:39] <lotuseater> okay for yours then :)
[04:43:41] <kakuhen> for consistency we'll use iter rather than randomly choosing iter and loop
[04:44:01] <lotuseater> so then.
[04:46:25] <kakuhen> also my friend butchered the docstring for responder-lambda
[04:46:33] <kakuhen> I had a really concise one and he added a bunch of fluff i dont understand lol
[04:46:58] <lotuseater> okay
[04:48:24] <lotuseater> when heavily using long package names like alexandria you could also do in defpackage a (:local-nicknames (#:a #:alexandria)) or such
[04:51:45] <kakuhen> alexandria isn't that long to me 
[04:51:59] <lotuseater> hm in the responder-lambda macro of your, wouldn't be a (progn ,@body) better instead of the ,body ?
[04:52:10] <lotuseater> if you mean so
[04:53:34] <kakuhen> doesn't ,@body evaluate the body at macroexpansion time
[04:53:39] <lotuseater> no
[04:53:44] <kakuhen> idk what the difference is then
[04:53:57] <kakuhen> these functions get added to an alist and are executed at a very specific time
[04:54:02] <lotuseater> it lifts up the forms one level
[04:54:48] <hayley> http://humaniterations.net/2015/04/17/anarchy-is-a-scale-independent-proposition/
[04:54:48] -ixelp- Anarchy Is A Scale-Independent Proposition
[04:55:22] <lotuseater> the point is the ELSE in an IF can't by multiple expressions all on their own as with the THEN in a WHEN
[04:55:48] <lotuseater> so you wrap them into a PROGN and lift the body up with ,@
[04:57:47] <lotuseater> (defmacro %when (test &body body) `(if ,test (progn ,@body)))
[04:59:08] <lotuseater> (defmacro %unless (test &body body) `(%when (not ,test) ,@body))
[05:00:41] <lotuseater> it's like when one of your macros shall produce multiple toplevel forms you also wrap that into PROGN and that's also in your code :)
[05:08:40] *** Quits: lisp123 (~lisp123@45.86.202.65) (Ping timeout: 240 seconds)
[05:10:45] <lotuseater> or when defining (defmacro %%when (test &body body) `(if ,test ,body)) and the body would have always two forms, then it would do something, but not the way it should ^^
[05:36:41] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Quit: leaving)
[05:37:01] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[05:46:10] <copec> https://twitter.com/theavalkyrie/status/1429893337176330241?s=21
[05:47:21] <hayley> "the runtime could actually make optimizations based on type information." First get a compiler. Then read Chamber's PhD thesis.
[05:47:47] <lotuseater> packaging on python is pain, even with NixOS
[05:48:12] <hayley> Pay particular attention to 5.2.2 "Interface-level type declarations do not help".
[05:48:13] <lotuseater> hayley: maybe she would conter with Cython or such
[05:48:33] <lotuseater> how is the title of the PhD thesis?
[05:48:49] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Quit: leaving)
[05:48:58] <hayley> lotuseater: Static analysis is mostly not useful with subclassing, moreso with multiple inheritance where you can't just stick more slots on the "end" of an object.
[05:49:15] <hayley> http://www.wolczko.com/tmp/ChambersThesis.pdf "The design and implementation of the Self compiler, an optimizing compiler for object-oriented programming languages"
[05:49:19] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[05:50:17] <lotuseater> thank you :)
[05:52:22] <copec> What led you to that thesis Hayley? 
[05:52:49] <lotuseater> oh Linux turned 30 yesterday
[05:53:02] <copec> I’d like to understand your discovery process, because you put me onto many neat things 
[05:53:57] <copec> Linux is still a city just figuring out where to out the streets, but I loves it
[05:54:07] <hayley> copec: Gnuxιe (random Greek letter so she isn't pinged while sleeping) worked on a Self-esque VM for a university project, and now we are planning a new VM. So she found the thesis to figure what would could be implemented efficiently.
[05:55:01] <copec> Cool
[05:55:28] <copec> nice
[05:57:16] <lotuseater> ⍳∊
[05:59:14] <lotuseater> that's indeed a program giving back a lambda function :D
[06:00:50] <lotuseater> now I remember I also wanted reading on Joe Armstrong's PhD thesis sometime
[06:04:43] <copec> How did you come to use CL hayley?
[06:05:20] <hayley> Python was too slow, C++ and Java were a pain in the ass.
[06:07:23] <copec> For me, I've always trying to get at this string to fundamentally represent computations that somehow got a handle on the fundamental information as humans understand it
[06:07:38] <lotuseater> "Oh but since C++11 everything become great!"
[06:07:47] <copec> most languages just feel like more concise assembly to me
[06:07:49] <hayley> Funny, I picked up CL in 2017.
[06:07:57] <copec> well, it could be argued that they are
[06:08:55] <copec> I picked it up in the 90's, but never really became a profluent programmer 
[06:09:27] <lotuseater> cool, but it's indeed a big thing :)
[06:10:29] <copec> I have actual OCD, not just joking about it, and I regularly get caught up on small things
[06:11:11] <lotuseater> and assembly can be more to a certain style of lisp: (tagbody ...)
[06:11:19] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 250 seconds)
[06:11:20] <lotuseater> what does OCD stand for?
[06:11:57] <copec> obsessive compulsive disorder
[06:12:20] <copec> In the words of Alan Perlis, "Is it possible that software is not like anything else, that it is meant to be discarded: that the whole point is to always see it as a soap bubble?"
[06:12:21] <lotuseater> i have to look this up
[06:12:52] <copec> I have a hard time of just writing something and moving on, to use the lessons in the next thing I write
[06:12:59] <lotuseater> or as a ball of mud if you have luck ^^
[06:13:56] <lotuseater> okay I see
[06:13:59] <copec> but those people you know who are experts are those who have written a lot of stuff, with thought, but are able to complete projects without some odd perfectionism getting in the way
[06:14:58] <lotuseater> yes perfectionism can be quite self-destroying :)
[06:16:07] <copec> I have an easier time doing systems admin, so I can just complain about what other people wrote
[06:16:11] <copec> and how they should have done it
[06:16:17] <copec> :-p
[06:16:23] <lotuseater> hehe good
[06:17:43] <lotuseater> about python system scripts that replace bash files or such
[06:26:04] <lotuseater> copec: was ANSI CL out when you picked up CL?
[06:30:32] <copec> Yeah it was, I used clisp for a long time
[06:30:46] <copec> Still wish it was the python that python is now
[06:33:43] <copec> clisp is still faster than many jit languages I have messed around with, at least according to my anecdotal evidence :-)
[06:43:47] <gilberth> copec: Large parts of CL are implemented in C with CLISP.
[06:45:40] <kakuhen> CLISP means C Lisp
[06:46:49] <hayley> CLISP stands for "it bootstraps steel banks Common Lisp"
[06:46:52] <gilberth> Really? Why was it implemented in assembler initially?
[06:46:58] <kakuhen> hayley: but that's what I use ECL for
[06:47:05] <hayley> kakuhen: I agree
[06:47:05] <lotuseater> kakuhen: i don't think so
[06:47:17] <lotuseater> ah ok hm
[06:47:19] <kakuhen> lotuseater: yes; look at lang/sbcl in freebsd ports
[06:47:28] <kakuhen> we pull in ECL just to bootstrap SBCL
[06:47:45] <kakuhen> i have no idea how macports does it though
[06:48:11] <lotuseater> me neither
[06:48:15] <kakuhen> binary blob
[06:48:20] <kakuhen> im looking at the portfile rn
[06:48:27] <kakuhen> they pull in a binary copy of a really old SBCL and use it to build the latest SBCL
[06:48:42] <lotuseater> did you try out the stuff with , vs ,@ ?
[06:48:56] <kakuhen> not yet
[06:49:05] <kakuhen> since i didnt write responder-lambda, i sent it to my friend for his thoughts
[06:49:58] <lotuseater> it's more about you learn the difference apart from your specific macro
[06:50:02] <kakuhen> "the difference is the object parameter so that the macro isn't anaphoric? I thought about that, it's arguably a better design but basically I didn't feel like it. no technical reason"
[06:50:14] <kakuhen> this was the response when i asked him about the progn thing
[06:50:19] <kakuhen> also i know virtually nothing about macros
[06:50:38] * gilberth "rebooted" Firefox to free 10GB of RAM usage and approx 15% of CPU usage.
[06:51:03] <kakuhen> remember when firefox was considered more memory efficient than chrome?
[06:51:49] <lotuseater> so do as you please, I'll remember that for next time
[06:51:52] <gilberth> I rather ask myself (a) what the hell is in that 10GB? and (b) why do I care about memory leaks in my own code again?
[06:52:12] <lotuseater> just try out the three i gave and look at their expands
[06:52:51] <kakuhen> yeah i am going to apply your change most likely
[06:52:54] <lotuseater> wtf no technical reason
[06:53:56] <kakuhen> basically my friend actually makes the interfaces
[06:54:04] <kakuhen> and i just use them without question to implement stuff in the game
[06:54:22] <kakuhen> so i rarely touch his code, but this time i'll do it
[06:55:22] <kakuhen> oh one exception, the RNG ... that was entirely by myself and I had to remove a lot of instances of (1+ (random 6)) for dice rolls in the game
[06:55:40] <lotuseater> even this little piece would run easily into bugs at compile time
[06:55:46] <lotuseater> yes I know :)
[06:55:58] <kakuhen> also i liked your macrolet a lot
[06:56:19] <lotuseater> thx, if it makes things more specific
[06:56:44] <lotuseater> or also with symbol-macrolet
[06:56:49] <kakuhen> but yeah I understand your argument for using (progn ,@body)
[06:56:55] <kakuhen> my confusion is more why my friend stuck with ,body
[06:57:05] <kakuhen> and his answer was basically "oh i didn't feel like using the former"
[06:58:26] <kakuhen> oh also in the middle of implementing crc checksums for flac, I noticed one huge thing that I find discomforting
[06:58:44] <lotuseater> maybe he isn't quite aware of things himself yet
[06:58:46] <kakuhen> what happens if the frame and its checksum both bit rot such that their checksums match
[06:59:00] <lotuseater> oh hm
[06:59:06] <kakuhen> i mean, there's no way around this
[06:59:14] <kakuhen> this is "worst case scenario" for CRC checksums for data integrity
[06:59:16] <kakuhen> but it's fun to think about
[06:59:36] <kakuhen> what if the audio data corrupts, along with its recorded checksum, but they stay with identical checksums anyway
[07:00:18] <hayley> How many bits do you have to accidentally flip to get a collision?
[07:01:19] <kakuhen> well, crc is just division
[07:01:26] <kakuhen> so i guess the answer is "not that much" for crc-8
[07:01:29] <kakuhen> and "quite a lot" for crc-32
[07:02:32] <kakuhen> flac itself uses crc-8 checksums to verify frame metadata and crc-16 for frame data
[07:02:41] <kakuhen> and then for some reason md5 for the streaminfo block
[07:03:09] <hayley> Say, for example, a Hamming code might be able to fix one random bit, but if you messed up all of them, you might not detect corruption. I'd wager you'd be sticking your hard drive in the microwave to get enough faults.
[07:10:00] <gilberth> kakuhen: Have you found the missing (LOGAND #xFF ...)?
[07:10:21] <kakuhen> i'm confused
[07:10:36] <kakuhen> is this about some lisp code i posted last night?
[07:11:28] <gilberth> The CRC8 routine. The THEN DO part of the IF misses it.
[07:11:40] <kakuhen> Yeah, I added that later on, but I never sent it here
[07:12:00] <kakuhen> And now I have code that generates tables for crc-8 and crc-16, and I'm refactoring the crc functions to use the table
[07:13:14] <gilberth> Sure, that is what one usually does.
[07:13:15] <kakuhen> https://plaster.tymoon.eu/view/2611#2611
[07:13:39] <kakuhen> one problem I ran into, for make-array, is that the compiler really wants to know the exact type
[07:14:07] <kakuhen> I couldn't just use '(unsigned-byte n), and I dont know of an obvious way to defer the make-array, so I just added no element-type
[07:14:52] <gilberth> You still miss the LOGAND, don't you?
[07:15:12] <kakuhen> (logand mask  ... )
[07:15:29] <kakuhen> oh you meant in line 12?
[07:15:50] <hayley> Why not (ldb (byte 8 0) ...)
[07:15:52] <gilberth> 10 actually.
[07:16:04] <gilberth> hayley: Matter of taste.
[07:16:18] <lotuseater> (deftype flac-uint8 () '(unsigned-byte 8)); (make-array 256 :element-type 'flac-uint8 :initial-contents ...)
[07:16:18] <kakuhen> hayley: I prefer that, but then it went over 80 columns
[07:16:19] <gilberth> FWIW I would also prefer LOGBITP or LOGTEST.
[07:16:40] <kakuhen> oh actually ldb works here too
[07:16:44] <hayley> (declaim (inline ub8)) (defun ub8 (x) (ldb (byte 8 0) x))
[07:17:05] <gilberth> An 80 column limit is most silly. IMHO
[07:17:20] <kakuhen> it is, but i developed the bad habit for that.
[07:17:26] <kakuhen> for objective-c I use 100 columns
[07:17:49] <kakuhen> lotuseater: the problem is that I want to be able to use one function for crc-8 and crc-16 tables
[07:17:55] <kakuhen> I'm not sure how that example helps here
[07:18:48] <hayley> Then you can't have both in one loop; do you have a (unsigned-byte 8) accumulator or a (unsigned-byte 16) accumulator?
[07:19:35] <hayley> Another toy example FWIW, say our hash function was (defun hash (bytes) (reduce #'logxor bytes)). Now if I flip one bit, I am guaranteed to have a different hash.
[07:19:58] <lotuseater> (defun make-flac-array (&key element-type initial-contents) (declare (type (member flac-uint8 flac-uint16 ...) element-type)) ...)
[07:20:12] <lotuseater> ah wait
[07:20:18] <hayley> (member A B C) = (or (eql A) (eql B) (eql C))
[07:20:28] <lotuseater> surely the dimension has to be in the lambda list too
[07:20:53] <gilberth> When it needs to be fast and generic a macro would help.
[07:20:58] <lotuseater> right
[07:21:57] <lotuseater> and as I saw from the flac C code it also has arrays with dimension like '(8 256)
[07:22:10] <gilberth> Or a compiler macro rather.
[07:22:43] <lotuseater> yes :)
[07:26:46] <hayley> https://camdez.com/blog/2021/08/14/regex-optimization-in-clojure/ lol no RE derivatives
[07:26:48] -ixelp- Regex Optimization in Clojure · camdez
[07:36:16] <hayley> $ apropos xfig
[07:36:22] <hayley> xfig: nothing appropriate.
[07:36:25] <hayley> $ apropos shit
[07:36:29] <hayley> sane-matsushita (5)  - SANE backend for Panasonic KV-SS high speed scanners
[07:38:33] *** Joins: lisp123 (~lisp123@45.86.202.65)
[07:41:55] <gilberth> hayley: As xfig is not available you wanted to draw figures with pen and pencil and then scan them?
[07:42:47] <hayley> Probably not a good idea. All the diagrams in the SICL book are fig files.
[07:42:47] *** Quits: lisp123 (~lisp123@45.86.202.65) (Ping timeout: 240 seconds)
[07:43:31] <dave0> coding with pen and paper is tight !
[07:43:49] <gilberth> Worked for this little real life game: <http://bauhh.de/briefkasten/>
[07:43:49] -ixelp- Briefkasten, das Geschicklichkeitsspiel
[07:44:52] <gilberth> German, because this was for my lawyer. Sorry.
[07:44:55] <kakuhen> use tikz to make fancy figures in latex
[07:45:04] <kakuhen> it's a giant kitchen sink but that's what makes it powerful
[07:45:17] * hayley makes too many pencils or something and they begin phasing out of the bin.
[07:45:42] <hayley> .oO( Source physics again. )
[07:47:16] <hayley> setInterval(schuss, 200)
[07:48:10] <hayley> Ah, they are letters.
[07:48:20] <dave0> is that why i can never find a pencil!
[07:48:39] <gilberth> Yes, and the "Korb" is where they are supposed to go. And the "Altpapier" is the waste basket.
[07:49:22] <gilberth> The slit at the LHS is the slit near the front door of the building for throwing mail into.
[07:50:26] <hayley> /usr/sbin/pacaur: line 837: vi: command not found
[07:50:29] <hayley> Nice, when did I do that?
[07:51:13] <gilberth> What is pacaur?
[07:51:43] <hayley> User repository manager for lazy people.
[07:53:06] <kakuhen> symlink vi to mg to own the libs
[07:54:11] <hayley> https://www.youtube.com/watch?v=5c1_-02AIBI "Girls are getting into abstract analysis!"
[07:54:12] -ixelp- The Girls Want to Be with the Girls (2004 Remaster) - YouTube
[07:55:19] <hayley> Unfun fact: one of the maths teachers was a lesbian and taught path finding algorithms to the class. So my friend told me about Dykestra's algorithm.
[07:55:45] <kakuhen> ok this is epic
[07:56:50] <hayley> I now have xfig. And oh boy is it crusty.
[07:57:46] * hayley uploaded an image: (24KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/AGwREnDsrNMMSLgcQpIkWCcr/Screenshot_2021-08-27_13-33-30.png >
[08:02:42] <gilberth> At least you have fake-3d-ish buttons. And gray!
[08:05:24] <dave0> i also like the gray
[08:07:12] <dave0> they could have gone with any old colour
[08:07:25] <dave0> but they went with gray!
[08:07:33] *** Joins: lisp123 (~lisp123@45.86.202.65)
[08:09:10] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 240 seconds)
[08:09:54] *** Quits: lisp123 (~lisp123@45.86.202.65) (Client Quit)
[08:11:41] *** Parts: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net) ()
[08:21:51] * hayley spots a refcount.sty while TeXing and wonders if that makes it slow.
[08:24:35] <hayley> Guess I gave up on learning the text UI and just started editing the .fig file in Emacs.
[08:32:07] * hayley uploaded an image: (45KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/padqTevjLRDdrrxAAqyIWAKb/Screenshot_2021-08-27_14-06-20.png >
[08:33:32] *** Joins: ln43 (~ln43@user/ln43)
[08:47:29] <gilberth> The stack is upside-down.
[08:59:40] <moon-child> nah, it just has its origin in the top left like any sane graphic
[09:04:27] <Alfr> ... and then we enumerate the elements diagonally.
[09:07:33] <ln43> following the major aka main diagonal
[09:08:49] <ln43> basically i had troubles also to read the datasets for clml : /
[09:09:20] <ln43> yes with paths ...
[09:36:59] <hayley> gilberth: Tell beach that.
[09:37:11] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[09:37:36] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[09:37:44] *** Quits: mala (~mala@user/malaclyps) (Read error: Connection reset by peer)
[09:38:07] *** Joins: mala (~mala@user/malaclyps)
[09:38:18] <kakuhen> the stack is sideways
[09:38:22] <kakuhen> (and upside down)
[09:40:28] <ln43> but is there a way to inspect for example the starting address of an array form whitin the repl?
[09:40:47] <ln43> yes i'm asking to understand better how :adjustable works ...
[09:43:22] <gilberth> That would the starting address tell you? And which one?
[09:43:45] <ln43> ok to see where it's located
[09:44:24] <ln43> and after that to see how resizsing is accomplisched 
[09:46:20] <gilberth> By resizing? I mean, what would #x30200198D4CD tell you? And which starting address, exactly?
[09:47:33] <ln43> after resizing i would like to see if the new portion is contiguous for example
[09:48:04] <ln43> i mean if it starts directly after the first or not
[09:49:05] <gilberth> Which start? Where the elements are stored?
[09:49:15] <ln43> the address of the first element should be the starting address
[09:49:45] <gilberth> You answered your question already.
[09:50:52] <gilberth> As you phrase it, you assume that elements are all in one continuous part of the virtual address space. That's reasonable, but there is nothing in the spec which would actually demand that.
[09:53:18] <ln43> so i get virtual adresses, not physical ones ... ok, it's  a bit different form C then
[09:53:22] <ln43> or not ?
[09:54:05] <ln43> ok, i'm not used to reason with virtual addresses and i supposed the one i see in gdb for example are physical ones
[09:54:18] <ln43> but maybe they're virtual 
[10:03:15] <gilberth> ln43: Since when do you see physical addresses? Hacking a kernel?
[10:04:13] <gilberth> And: gdb cannot know the physical address.
[10:05:41] <ln43> yes, ok
[10:09:23] <hayley> gilberth: beach says that he can't picture a stack not growing upwards, though on the x86 it grows downwards. Lead to some confusion for me.
[10:10:40] <gilberth> Which stacks grow upwards?
[10:11:42] <hayley> A stack of plates, I guess.
[10:12:06] <gilberth> Sure.
[10:14:58] <gilberth> hayley: But then I suggest you indicate the direction of the growing. And not by an arrow. It find it very confusing this way.
[10:15:22] <gilberth> * I
[10:15:37] <hayley> In text I follow the MPS convention and call the end with the newer frames "hot", and the other "cold".
[10:16:38] <gilberth> Would not help.
[10:17:18] * hayley wonders why you can only find For Future Reference by Dramatis uploaded with vastly worse album covers and "repackaged" names. The original looks nice.
[10:18:25] <gilberth> Because new is always better, forgot? So quit using a language from mid-last-century.
[10:19:01] <hayley> See https://www.discogs.com/Dramatis-For-Future-Reference/release/422668 - it looks perfect as an inaccurate prediction of your 2025 house.
[10:19:02] -ixelp- Dramatis – For Future Reference (1981, Vinyl) - Discogs
[10:20:05] <gilberth> Mine?
[10:20:21] <hayley> Otherwise, e.g. the picture on https://www.youtube.com/watch?v=KQORryj3Li0 looks like shit. And there is another with a picture of some cyborg with a "blow your brains out" label and cartoonish depiction of that.
[10:20:21] -ixelp- Oh! 2025 - YouTube
[10:20:41] <hayley> gilberth: Hm, it looks like somewhere you would live.
[10:21:37] <gilberth> Heh, yes, it's the kind of place I would enjoy.
[10:22:05] <hayley> There's a quill and paper, typewriter, and a computer in the same room.
[10:23:05] <gilberth> Yes, and somewhat baroque. I like that.
[10:23:19] <hayley> (FWIW I'm mostly bothered by the latter cover because it hasn't been that long since someone decided it'd be funny to post a video of someone actually blowing their brains out in a Discord server I used to clean up. Haven't unseen it yet.)
[10:25:58] <kakuhen> oh i think ive seen that video too
[10:26:06] <kakuhen> i forgot it existed until now
[10:27:31] <hayley> Sorry.
[10:28:40] <kakuhen> it's ok; don't worry about it
[10:29:16] <kakuhen> one of my friends is a moderator for some imageboard and he regularly has to scrub illegal content off the website
[10:29:34] <kakuhen> i wonder how people can do this for long periods of time
[10:30:01] <hayley> Generally, they don't.
[10:30:08] <ln43> so i was trying to access the second element of a vector using something like this: (sb-sys:sap-ref-32  (sb-sys:int-sap  (sb-kernel:get-lisp-obj-address *x*)) ...) in sbcl: is it wrong?
[10:30:19] <hayley> c.f. https://www.cnet.com/news/facebook-to-pay-52-million-in-settlement-with-former-content-moderators-suffering-from-ptsd/
[10:30:21] -ixelp- Facebook reaches $52M settlement with ex-content moderators over PTSD - CNET
[10:30:42] <ln43> i should put  eventally where are ... something like the size of the elements in bytes
[10:30:57] <hayley> What kind of array do you have? And yes, that is incorrect, as you have "hidden" a reference in a fixnum momentarily, and there is a header to the vector.
[10:30:59] <ln43> but anyway: there is any fallacy using that approach ?
[10:31:28] <gilberth> ln43: What the hell are you trying to do? AREF not working for you?
[10:31:59] <hayley> Rather try (sb-sys:vector-sap <some vector>) and note that the vector can't have boxed elements, i.e. it must be a string, or it has at most 64-bit integers and double-floats.
[10:32:09] <hayley> Yeah, still what are you doing?
[10:33:18] <ln43> ok... i was using  (defvar *x* (make-array 5 :fill-pointer 0)) and then (vector-push 0 *x*) and (vector-push 1 *x*)
[10:33:38] <ln43> used (sb-kernel:get-lisp-obj-address *x*) to get the address of the first element
[10:33:58] <ln43> and i was trying to see to find the second element knowing the starting adress
[10:34:08] <hayley> Won't work. That gives you the address of the vector, not of any elements. This is not C.
[10:34:28] <hayley> Oh, and VECTOR-SAP only works iff you have a simple array. You do not.
[10:34:28] <gilberth> Still: (1) what are you trying to do and (2) what makes you thing that this would be address of the first element in general?
[10:34:49] <gilberth> think, even.
[10:35:30] <ln43> i would like to know the placement in memory of elements for an adjustable array
[10:35:41] <ln43> only that
[10:35:45] <gilberth> What for?
[10:35:55] <ln43> for instruction 
[10:36:06] <hayley> .oO( So in April, 1000 EUR = 1500 AUD or so. Now it is 1622 AUD? Sheesh. )
[10:36:30] <hayley> Well, I bet if you push it will not reuse the storage, and so the address will change.
[10:36:32] <ln43> yes just to find the layout 
[10:36:40] <gilberth> ln43: Then read the source.
[10:37:04] <ln43> make-array
[10:37:05] <ln43> ok
[10:37:21] <hayley> You could reuse if you shrink it, but then you lose some thread safety (as now you can't just cache the size of the backing vector).
[10:37:41] * gilberth is still puzzled why that is important.
[10:38:10] <ln43> adjustable is ignored by default
[10:38:23] <hayley> In other words, if it didn't move, you probably lose thread safety and/or have slow bounds checking.
[10:40:26] <ln43> what does means (apply #'%make-array dimensions widetag shift args) inside the make-array function definition, in particular i don't understand this:  #'%make-array 
[10:40:45] <ln43> what the #'% stands for? which is its utility ?
[10:40:58] * hayley places a cushion between gilberth and his desk.
[10:41:25] <ln43> looks like a recursive call ... but what is the #'%  ?
[10:41:41] <gilberth> hayley: I still don't have a real desk. But thanks.
[10:42:28] <gilberth> ln43: #'foo is just (FUNCTION FOO). The function is called %MAKE-ARRAY.
[10:43:45] <ln43> ...ok, thanks... why is it used that % on the front of many symbols, which is its purpose ?
[10:45:37] <gilberth> It's for decoration.
[10:47:04] <ln43> no i don't think so...
[10:47:41] <hayley> It is a decoration which means "call me at your own peril", give or take.
[10:47:43] <gilberth> I think, it looks cute, doesn't it? ;)
[10:48:43] <ln43> what idoes it means?
[10:49:01] <ln43> i'm trying to find its meaning but whitout succes
[10:49:04] <ln43> success
[10:51:07] <ln43> ok, it's a way to call an internal defined function
[10:52:01] <ln43> so maybe it's convenient when it's not required to export 
[10:52:13] <kakuhen> % basically signals that it is an internal function and you shouldn't really use it yourself (unless I guess you really know what you are doing)
[10:52:34] <kakuhen> i recall a webpage recording these conventions  but i cant find it rn
[10:52:34] <ln43> even if with  :: i should be able to access even not exported symbols if i remember
[10:53:10] <gilberth> Which does not make that a good idea.
[10:53:59] *** Joins: shka (~herr@109.231.62.239)
[10:58:52] *** Joins: razzy (~razzy@user/razzy)
[11:14:20] *** Joins: cranium (~cranium@user/cranium)
[11:16:50] <hayley> https://developer.sony.com/develop/open-devices/guides/access-uart-ports
[11:17:02] <hayley> A guide on how to solder a damn UART to your phone‽
[11:21:27] <ln43> ok,i was trying to figure out how make-array should work  but yes, %vector-widetag-and-n-bits-shift is long and difficult to digest
[11:21:31] <gilberth> What happened to cu(1)?
[11:21:45] <ln43> anyway i appreciate the effort people put in write those things
[11:27:52] *** Quits: vats (~vats@180.149.226.8) (Remote host closed the connection)
[11:42:26] *** Quits: ln43 (~ln43@user/ln43) (Quit: Connection closed)
[11:51:05] *** Quits: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte) (Ping timeout: 248 seconds)
[12:08:48] *** Quits: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa) (Remote host closed the connection)
[12:32:47] *** Quits: contrapunctus (a75f5b1571@jabberfr.org) (Ping timeout: 240 seconds)
[12:35:35] *** Joins: nihaal (~nihaal@171.60.228.170)
[12:40:49] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[12:41:21] <pjb> gilberth: cu(1) is still distributed with macOS darwin! ;-)
[12:41:27] <pjb> gilberth: it comes with uucp.
[12:41:43] <pjb> man cu precises: BUGS: This program does not work very well.
[12:41:43] <pjb>  
[12:46:05] <kakuhen> check out the manpage for roff
[12:46:34] <kakuhen> BUGS: UNIX(R) is a registered trademark of the Open Group. But things have improved considerably after Caldera had bought SCO UNIX in 2001.
[12:47:24] <contrapunctus> hayley: GC gang go brr https://news.ycombinator.com/item?id=28305762
[12:47:25] -ixelp- Friendship ended with the garbage collector | Hacker News
[12:48:01] <hayley> Well spooked my prototypes
[12:49:26] <kakuhen> >The best program for editing a roff document is Emacs (or Xemacs)
[12:49:31] <kakuhen> vim users owned
[12:50:28] <hayley> The Twitch Go hack is because they decided to dumb GC down and give you no other tuning mechanisms.
[12:52:24] <hayley> I don't see RC with stack allocation (basically the proposed "alternative") as anything good at all. I'd even say without lifetime types, it becomes incomprehensible to figure where you can hand out objects.
[12:53:25] <hayley> And who in their right minds would use a memory lookup with a _hash table_ for method dispatch, rather than a memory-less binary search (aka "beach dispatch")?
[12:54:23] <hayley> I see pl made his way to the comments already :)
[12:56:51] <pl> hayley: I had more, but I didn't see how to write them in a way that contributed instead of just snarked 
[12:57:20] <hayley> I don't see how you don't snark sometimes.
[12:57:21] <kakuhen> garbage collector bad
[12:57:50] <pl> hayley: I'm /trying/ to be better 
[12:57:53] <kakuhen> why would you ever need a gc? just don't make mistakes with malloc/free haha
[12:58:07] <kakuhen> one other thing I don't under--***stack smashing detected (aborted)***
[12:58:30] <pl> kakuhen: fun thing is when malloc/free is slower than GC
[12:59:36] <hayley> pl: noooooooooo 6x more memory* nooooooooooo too slow
[12:59:47] <kakuhen> noooooo you forgot to turn on [esoteric, unsafe GCC-specific optimization]??
[12:59:52] <hayley> *compared to manual memory management-automating algorithm which cannot and will not perceivably exist
[13:00:02] <kakuhen> oh ignore the question marks at the end i forgot to remove them after editing my msg
[13:00:06] <hayley> *on machine which started swapping at 3x overhead btw
[13:01:27] <pl> hayley: adding GC to big C++ project increased memory overhead only by 15% and reduced known reliable-to-crash class of bugs to 0
[13:02:13] <hayley> pl: noooooo you haven't read Hertz and Berger 2006 they did the cache simulator noooooooo
[13:02:14] <pl> Also, I find it very funny that the people crowing about manual memory management usually have no idea about allocators at all 
[13:02:36] * hayley hopefully is demonstrating why she can't be trusted to not snark
[13:03:14] <pl> Ehh here we go again 
[13:03:25] * Gnuxie has no idea about allocators at all 
[13:03:34] * pl boots up Su-25 "The GC" snarkinator 
[13:03:42] <hayley> So the other examples of "GC bad" are Python and Ruby: https://www.reddit.com/r/ProgrammingLanguages/comments/pbbbbg/friendship_ended_with_the_garbage_collector/hadb7i4/
[13:03:43] -ixelp- Friendship ended with the garbage collector : ProgrammingLanguages
[13:03:58] <kakuhen> allocators? yeah I know a lot about malloc and calloc :^)
[13:04:00] <pl> Python famously tries to avoid GC 
[13:04:16] <hayley> "In short, Inko gains deterministic memory management, lower memory usage (at least in theory), deterministic destructors, and all that without pauses." MMU graphs or gtfo
[13:04:47] <kakuhen> hayley: i-it works on my machine!! that's all I need to know GC bad.
[13:04:56] <kakuhen> maybe on yours it wont, but on mine it does, and id expect yours to have similar results...
[13:05:38] <hayley> I think everyone who says RC is "without pauses" and "determinstic" better fucking show a minimum mutator usage graph, eh?
[13:06:19] <hayley> Just saying, when someone proclaims a GC to be "real time" enough, they show the graphs.
[13:06:56] <pl> hayley: there's a blog post where a crabbist discovers RC pauses and has to hack out async deallocator 
[13:07:13] * hayley uploaded an image: (237KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/lcNqmGzDifodisbzeCHmFEyV/gencgc.png >
[13:07:13] <kakuhen> im just glad all of the software  i write will never become so large that i need to worry about performance (or efficiency) of a GC :x
[13:07:16] <hayley> pl: Never heard of it.
[13:08:32] <pl> https://abramov.io/rust-dropping-things-in-another-thread
[13:08:34] -ixelp- Rust: Dropping heavy things in another thread can make your code 10000 times faster
[13:08:40] * hayley was joking, see the prior image.
[13:09:11] <pl> Ahh, sorry, I didn't see the image cause I was looking for the link XD 
[13:10:19] <hayley> BTW I computed I'd need 13 threads doing full GC on SBCL to suffer a worse pause than that. Which is good, cause I have a 12 thread machine :)
[13:10:53] <kakuhen> that's a lot of threads
[13:11:12] <pl> And isn't SBCL's GC single-threaded? 
[13:11:16] <hayley> And, well, compared to anything in Java or C♯, I have to say the SBCL collector is kinda shit.
[13:11:22] <hayley> Yes, single-threaded stop the world.
[13:11:39] <pl> It's quite simple, yes 
[13:12:05] <kakuhen> it's still faster than the other impls I've tried based on very naive benchmarks i ran myself
[13:12:24] <hayley> Sure, shit is a rude word to use. It works, and at least it is generational and compacts.
[13:12:27] <kakuhen> do something a thousand times that requires a lot of consing and comparing the time spent in gc
[13:12:37] <kakuhen> I dont have any numbers to show since I didnt record sadly
[13:12:40] <kakuhen> but I can try to collect some right now
[13:13:00] <pl> The reason for some of the advanced GCs in Java isn't because simple can't cut it, it's because GC at terabyte-sized heaps with hundreds of threads can get non-trivial 
[13:13:09] <kakuhen> in my experience, SBCL will run considerably faster than CCL, for instance, but will have 3x more total consing (not that that means much since it's not staying on the heap)
[13:13:45] <hayley> But I suspect I wouldn't want to use it with terabytes of disk-backed virtual memory (it has ~1s pauses running decentralise2 tests with a 10GB heap), or with any more cores.
[13:14:11] <pl> Python-based implementations in general lean kN the other resources to get zomg speed 
[13:14:53] <pl> *lean on
[13:15:22] <hayley> Yes, it is not easy to write a "fast" GC. And sticking a refcount and associated stack frame doesn't help relative to anything not flaming garbage (e.g. CPython, Ruby, Go).
[13:15:52] <hayley> "As Wilson also notes, wastage can be measured monetarily: Considered globally, poor allocation schemes cost people perhaps even billions of dollars in memory chips." — Doug Lea
[13:16:33] <gilberth> What does "not keeping up" mean? This is silly. Only because you always pay a fee, the fee goes away?
[13:17:09] <hayley> idk, but I don't want to know if the pinnacle of GC development is CPython.
[13:18:04] <hayley> gilberth: Well, seriously, the mutator conses more than the GC collects. But you just stop the damn mutator, and/or give the GC more time, to bound usage.
[13:18:26] <pl> Ruby at least acknowledges the need for GC and doesn't piss on PL development history and knowledge base 
[13:18:33] <hayley> Also, read the Instagram article: "But in Python land, because of reference counting, things get interesting. Every time we read a Python object, the interpreter will increase its refcount, which is essentially a write to its underlying data structure. This causes CoW. So with Python, we’re doing Copy-on-Read (CoR)!"
[13:18:53] <gilberth> That's the next thing. People say "GC is bad." not "Python's GC is bad." And then using slow Python.
[13:18:54] <hayley> "It was GC all along! Even when it was refcounting, I still knew it was GC!"
[13:19:22] <hayley> Maybe I should ask if they think Python and Ruby are the best examples of good GC.
[13:19:45] <kakuhen> GC bad because like, something in Java or whatever gave me trouble
[13:20:38] <kakuhen> "good GC" means GCs in languages I think are popular :)
[13:20:48] <kakuhen> because popular thing always good
[13:21:15] <hayley> Correction, they didn't actually find a benefit from disabling RC. But it is still a shitty comparison.
[13:21:16] <gilberth> Folks, I don't care. Let them believe what they want. It doesn't bother me. Why should it.
[13:21:39] <kakuhen> ok ill tone down my shitposting for now
[13:22:29] <gilberth> You may vent as much as you like. I still like to listen, though. :)
[13:24:07] <kakuhen> im too young to have seen the best of NSGarbageCollector sadly
[13:24:16] <gilberth> The general sad part is, that the C mindset won. And move toward what is state of the art for decades, is slow, very slow.
[13:24:19] <hayley> .oO( Don't be too rude, the guy only moderates r/programminglanguages too. )
[13:25:04] <gilberth> It all was already there before even /me was born.
[13:25:14] <hayley> That in mind, deferred RC basically approaches tracing GC behaviour but...well, without global tracing. But then a copying or mark-compact also isn't "global" per se.
[13:25:26] <shka> python garbage collection is indeed weird
[13:25:49] <gilberth> shka: Yes? What does it do exactly?
[13:26:02] <hayley> And the kind of generational GC I want to implement basically has a reference count from tenured cards to newspace, so that I may perform incremental sweeping of tenured space.
[13:26:08] <pl> Mostly by being a shitty "lipstick on a pig" applied to RC
[13:26:21] <shka> gilberth: refcounting + tracing GC
[13:26:37] <shka> both
[13:26:40] <shka> at the same time
[13:26:54] <pl> And memory management uses RC so you can't really disable it
[13:27:11] <pl> The tracing GC was added because of loops 
[13:27:11] <shka> and you can't use other RC either
[13:27:17] <hayley> And then, didn't that "GC the Movie" say generational GC was a mix of Baker copying and refcounting?
[13:28:15] <gilberth> Wait a second! We don't have generational collectors in our Lisp? Dammit.
[13:28:34] <shka> also, every integer in python is boxed
[13:28:40] <hayley> https://www.youtube.com/watch?v=3vJWVyEBcdE
[13:28:41] -ixelp- Garbage the Video - YouTube
[13:28:43] <shka> and the box has the refcounter
[13:28:57] <shka> so you are holding integer, box for integer, and another integer
[13:29:04] <shka> and a pointer to integer
[13:29:22] <shka> because fuck you, that's why xD
[13:29:53] <gilberth> Well, nobody told them about tagging.
[13:30:25] <gilberth> So it's not their fault.
[13:30:35] <hayley> "...such as the ephemeral garbage collector which is a hybridisation of reference counting and [unintelligible to me, probably semispace copying?]"
[13:30:44] <shka> gilberth: nah, it is because python API assumes that EVERYTHING is mutable in C
[13:31:11] <gilberth> shka: Even integers?
[13:31:32] <hayley> They mention the "dynamic garbage collector" by Henry Baker, apparently invented in 1973. But the paper dates to 78?
[13:32:03] <shka> gilberth: even integers
[13:32:14] <hayley> If you look at the bottom of the animations, you can see a lispm who-line AFAICT.
[13:32:44] <gilberth> Strange. (progn (incf 1 1) (+ 1 1)) => 4?
[13:33:03] <shka> in C only
[13:33:08] <shka> not in python
[13:33:15] <shka> because most of python is C
[13:33:20] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[13:33:38] <gilberth> Which also points to a design flaw, IMHO.
[13:33:44] <hayley> With some hacking, you can break the pre-allocated set of integer objects and do that.
[13:33:45] <shka> i agree
[13:35:02] <gilberth> But Emacs is the same.
[13:36:54] <gilberth> "We don't need addresses, so we get rid of them, too." I like that.
[13:37:46] <gilberth> This is as much anti-C as you can get :-)
[13:37:47] <hayley> Addresses? You have EQ, no?
[13:38:11] <gilberth> Do you need addresses for that? I have atoms.
[13:38:36] <gilberth> And do integers have addresses?
[13:38:47] <White_Flame> addresses are for runtime environment implementation details, not for application programming.  you'd have to be nuts to think otherwise!
[13:39:11] <gilberth> Where is ln43?
[13:39:43] <hayley> gilberth: Some other things about the language: they use a VM but claim there are optimizations with static typing. No way! And they have the only "programming language" which uses the Immix heap.
[13:40:48] *** Joins: selwyn (~selwyn@user/selwyn)
[13:40:53] <hayley> 1. READ CHAMBER'S DAMN PHD THESIS 2. What are you going to optimize in a bytecode? Remove a few type tests maybe? Pfft.
[13:41:18] <White_Flame> or are their optimizations involved during the bytecode generation?
[13:41:37] <White_Flame> that's how I'd read it
[13:41:39] <gilberth> hayley: Did he say "CDRs on the left?"
[13:42:11] <hayley> Also n.b. they wrote the VM in Rust, so it is not as if you can just not look at type tags (without unsafe?) and save some cycles there.
[13:42:30] <hayley> gilberth: idk, all the diagrams have CDRs on the right.
[13:43:09] <hayley> Oh well, I will write a VM that goes just as fast. On a bloody microcontroller. BWAHAHAHA...
[13:43:35] <gilberth> Yes, but he must mix up left and right as I do at times. He said: "CARs on the right, CDRs on the left." The right hand is the one with the thumb left.
[13:43:52] <pjb> hayley: the way the instructions are encoded is irrelevant.  You can perform the same optimization in a byte-code machine than on any other machine.  pipelining, branch prediction, just-in-time-transputation, whatever you want.
[13:44:40] <hayley> pjb: An interpreter though? I'd rather do the instruction decoding once (i.e. generate machine code), then do the rest in hardware. i.e. all machine code.
[13:46:43] * hayley uploaded an image: (110KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/qqeRNLEHFzPHQmRzJFeoTJIH/Screenshot_2021-08-27_19-22-18.png >
[13:46:51] <hayley> If you don't want to read all 247 pages, here is the important section of the thesis.
[13:48:19] <hayley> The main point is that any optimization you get from types are types which encode layout in memory, so aren't polymorphic and thus bad style.
[13:49:25] <White_Flame> if the machine can determine the layout, instead of the human directly controlling it, it could be made fully transparent and thus not affect user input style
[13:49:45] <hayley> Hence the thesis :)
[13:49:50] <White_Flame> ah, ok
[13:50:07] <White_Flame> is it in Sufficiently Advanced Compiler™ territory?
[13:51:12] <hayley> No, merely "lives in your web browser right now" territory.
[13:51:15] <Gnuxie> no it's in actual compiler that exists territory 
[13:52:16] <Gnuxie> uhh nda said it better
[13:52:28] * hayley thinks "used in mainstream compilers for mainstream language" is more convincing.
[13:52:53] <hayley> As compared to a "research" language or "research" compiler or idk what excuses people have these days.
[13:54:17] <kakuhen> offtopic but, the only thing i hate more about cocoapods are projects that cant make up their mind whether they use it or not
[13:54:32] <kakuhen> the build instructions are plastered all over with "yeah just run this random ruby script and it'll work ;)"
[13:54:36] <kakuhen> then the latest commit "begone pods"
[13:56:04] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[13:56:29] *** Joins: selwyn (~selwyn@user/selwyn)
[14:05:34] <gilberth> hayley: lol. I like the movie. "Oh no! No! It can't be, not now." "What is it?" "It's, It's garbage collecting. Oh oh. *cry*"
[14:07:00] *** Quits: nihaal (~nihaal@171.60.228.170) (Ping timeout: 250 seconds)
[14:17:13] <hayley> "It's garbage collecting :laser-eyed-beach:"
[14:19:07] <kakuhen> oh my god
[14:19:30] <kakuhen> i was dreading learning how to use OpenAL for streaming pcm sample to an output device 
[14:19:41] <kakuhen> then i land myself at a medium article doing just that in the best possible scenario
[14:19:53] <kakuhen> >using Objective C
[14:20:08] <kakuhen> so the hard part will be figuring out how to make this play nicely with bodge-openal
[14:21:30] <hayley> "SATISFACTION GUARANTEED OR DOUBLE YOUR GARBAGE BACK" - Genera source code
[14:23:27] <kakuhen> https://a.uguu.se/FHxujeOt.png
[14:23:39] <kakuhen> who do i throw my wallet at to get one of these genera thingies
[14:59:53] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[15:01:24] *** Joins: ln43 (~ln43@user/ln43)
[15:09:38] *** Joins: makomo (~makomo@user/makomo)
[15:14:43] *** Joins: random-nick (~random-ni@87.116.182.72)
[15:48:34] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[15:48:49] *** Joins: ck_ (~ck@plskthx.org)
[15:51:33] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 250 seconds)
[15:58:57] <ln43> i'm not sure if to insert tilde and backquote in emacs the better thing to do is define a new keybinding but at least it works in editor and minibuffer too, now i have f5 for tilde and f6 for backquote :/
[16:00:01] <lotuseater> what do you have for a keyboard?
[16:00:03] <hayley> kakuhen: The pirate seas are a good start.
[16:00:23] <hayley> Mr Schmidt the salesman even left a comment congratulating you on downloading the greatest OS ever made.
[16:02:48] <ln43> qwerty keyboard maybe
[16:03:13] <ln43> ok but i don'h have those two symbols on it 
[16:03:13] <lotuseater> and then why it's a problem with tilde and backquote?
[16:03:24] <lotuseater> oh hm
[16:03:51] <ln43> yes instead of tilde i see \ and |
[16:03:52] <lotuseater> or you just don't have the labeling for them
[16:04:03] <ln43> i don't know
[16:04:21] <ln43> what does means labeliing in this case ?
[16:05:14] <lotuseater> i have qwertz, tilde is with Alt Gr and +, backquote with shift and double press the key right next to ß/?
[16:05:48] <lotuseater> labeling? it just means which fonts are printed on your keys in default
[16:05:58] <ln43> ok on the keyb caps i don't see their labels, yes
[16:06:04] *** Joins: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa)
[16:06:38] <lotuseater> https://en.wikipedia.org/wiki/QWERTY#/media/File:KB_United_States.svg
[16:07:08] <ln43> mine is not U.S.
[16:07:35] <lotuseater> so with qwerty both seem to be on the seen key, i get with this ^, ° and the APL diamonds ⋄ ⌺
[16:08:05] <lotuseater> then figure out what type is yours
[16:14:05] <ln43> yes the layout is different
[16:14:15] <ln43> but ok, it only complicates things
[16:14:45] <ln43> basically i think that in my case i should use an U.S keyboard without any problem
[16:15:39] <lotuseater> then do setxkbmap us
[16:17:18] <ln43> ok, i'm not on linux using x
[16:17:46] <lotuseater> well
[16:26:42] <ln43> anyway i was trying to do that because using the tutor provided by paip fails some of the tests
[16:26:56] <ln43> for example redefines constants and so on
[16:28:03] <ln43> so i was searching a way to not open a debug session redefining a constant but simply ignore the redefinition and print a message
[16:39:05] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[16:40:04] <hayley> pl: https://www.youtube.com/watch?v=5SQdBxVjZx4
[16:40:05] -ixelp- David Bowie - The Laughing Gnome - YouTube
[16:40:21] <hayley> "What's that clicking noise?" "That's Fred, he's a metrognome!"
[16:41:46] <pl> Heh
[16:42:07] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[16:42:10] <pl> Still, RC and determinism? Big oof 
[16:43:12] * hayley uploaded an image: (102KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/oifSWEUEduFpwcsSoPzrdIba/3e1b3424891aca18.jpeg >
[16:45:40] * hayley is still looking for thread local GC papers. If she is going to have 64 cores under a desk some day, they better not be CASing all day to collect.
[16:47:29] <hayley> Sadly most search results are either for thread local variables, or thread local allocation buffers (cool, but I want a fast collector too), and what is left I have read most of ):
[16:48:25] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[16:56:54] <ln43> ok but why a fast collectorif there are many examples of cl systems performing for example number chrunching faster than using other compiled languages
[16:57:46] <hayley> I doubt it, given automatic vectorization these days. But GC is for symbolic stuff, where you aren't just twiddling floats all day.
[16:58:14] <hayley> And that is more of a problem with more cores, as you hit a bandwidth wall.
[16:59:12] <ln43> why doing gc on many cores that wall is hit ?
[17:00:07] <hayley> Because primary memory is slow. So I'd rather keep enough of the heap in cache, and collect in cache.
[17:02:08] <ln43> yes but that should be the default "behaviour" even on a system with few cores
[17:02:52] <ln43> yes that is the reason for example why nowdays swap space is no more used as in the past
[17:03:14] <hayley> You can get away with only global heaps and thread local allocation buffers with a fair few cores. But I'd rather not.
[17:03:22] <ln43> ok, in that case was required a write opertion on a disk but the concept is similar
[17:06:31] *** Joins: chiselfu1e (~chiselfus@user/chiselfuse)
[17:08:05] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[17:10:41] * hayley reads the Shenandoah 2 slides
[17:11:01] <hayley> Hey, the read barrier is only 10% slower these days. Not zero, but it's also not huge.
[17:14:11] <notzmv> https://www.smbc-comics.com/comic/agi-2
[17:14:12] -ixelp- Saturday Morning Breakfast Cereal - AGI
[17:19:09] <hayley> .oO( Maybe we should just pool money to get some RISC-V chip manufacturer to throw in read barriers. That would make things easy. )
[17:28:27] <ln43> iis it a multi-threaded gc with concurrent evacuation ? ... i'm reading slide 13 here https://archive.fosdem.org/2016/schedule/event/shenandoah2016/attachments/slides/1268/export/events/attachments/shenandoah2016/slides/1268/Shenandoah2016.pdf
[17:28:43] <ln43> nice idea ... but it should be difficult to implement
[17:29:27] <ln43> basically the even if small stop-the-world-time should ensire that nothing of undesiderable happens in the meantime, or not?
[17:29:51] <hayley> I don't think it is awfully complicated. But, while they nailed getting pause time down, you still pause for global state changes.
[17:31:06] <ln43> ok, then yes
[17:32:20] <hayley> You can avoid stopping the world, but it means you have to handle threads in intermediate states. So, as well as GC design, you have to nail concurrency design.
[17:33:58] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[17:34:00] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[17:34:21] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[17:34:37] <shka> https://www.youtube.com/watch?v=dVHdUakiEo4
[17:34:38] -ixelp- 『新世紀エヴァンゲリオン』OP映像 にゃんこ大戦争ver - YouTube
[17:34:51] *** Joins: selwyn (~selwyn@user/selwyn)
[17:37:43] <hayley> Do it, though, and look ma, no pauses. Go does it AIUI but they have crap throughput on the other hand.
[17:39:23] <ln43> but forwarding pointers are used only to copy and save changes to the new copied object, right?
[17:40:23] <ln43> copy maybe not but redirection to the new object that should replace the old one (slide 18)
[17:41:02] <hayley> Yes.
[17:42:05] <ln43> and there was the cas operation you used for concurrent hash tables too time ago, nice
[17:42:56] <hayley> You'll find it is a pretty common operation for atomic updates.
[17:45:46] <selwyn> found out today that anki is written in python and rust
[17:45:50] <selwyn> how does that work
[17:47:16] * hayley uploaded an image: (400KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/HVQHWlfCOquAGRAweqDNkGSF/gun-baker.png >
[17:47:54] <ln43> hayley: but using which CL implementation are you generally doing experimentation with this GC stuff ?
[17:48:12] <hayley> I am not doing any yet.
[17:48:26] <ln43> i suppose is some that requires you a quite low-level approach and knowledge of may implementation details
[17:48:47] <ln43> ah ok... but it's an exiciting idea anyway
[17:48:52] <hayley> Maybe I should ask Cliff Click if he knows much about wheeling 864 cores to a safepoint. But he got enough cache and bandwidth to pull it off.
[17:49:09] <hayley> Probably does, still.
[17:51:58] *** Quits: chiselfu1e (~chiselfus@user/chiselfuse) (Quit: leaving)
[17:56:21] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[18:01:11] *** Quits: ln43 (~ln43@user/ln43) (Quit: Connection closed)
[18:02:16] <pl> hayley: have you looked into direction of .NET gc papers?
[18:02:56] <pl> I believe they do some per-core data for book keeping, so that the GC can effectively work multithreaded
[18:06:42] <selwyn> perhaps some of the closos bux can be used to hire cliff click
[18:39:04] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Quit: leaving)
[18:39:56] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[18:42:45] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[18:58:17] *** Quits: razzy (~razzy@user/razzy) (Ping timeout: 248 seconds)
[19:04:52] *** Joins: derelict (~derelict@user/derelict)
[19:07:07] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[19:09:23] *** Joins: santiagopim (~user@90.166.58.152)
[19:16:01] *** Quits: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa) (Remote host closed the connection)
[19:23:17] *** Joins: notzmv (~zmv@user/notzmv)
[19:35:07] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[19:36:44] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[19:36:46] *** Joins: notzmv (~zmv@user/notzmv)
[20:09:23] *** Joins: razzy (~razzy@user/razzy)
[20:14:47] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[20:17:04] *** Joins: lisp123 (~lisp123@45.86.202.65)
[20:21:57] *** Quits: lisp123 (~lisp123@45.86.202.65) (Ping timeout: 250 seconds)
[20:50:52] *** Quits: razzy (~razzy@user/razzy) (Ping timeout: 250 seconds)
[20:52:40] *** Joins: razzy (~razzy@user/razzy)
[20:53:53] *** Quits: shka (~herr@109.231.62.239) (Quit: Konversation terminated!)
[20:54:12] *** Joins: shka (~herr@109.231.62.239)
[20:56:25] *** Quits: okflo (~okflo@188-23-113-20.adsl.highway.telekom.at) (Quit: WeeChat 3.2)
[20:57:18] *** Joins: okflo (~okflo@188-23-113-20.adsl.highway.telekom.at)
[21:06:27] *** Quits: razzy (~razzy@user/razzy) (Ping timeout: 240 seconds)
[21:16:59] <gilberth> Good morning #lispcafe!
[21:17:48] <amirouche> morning gilberth 
[21:18:39] <selwyn> hi
[21:19:07] *** Joins: humasect (~humasect@2001:1970:57e0:4100::3d20)
[21:21:06] <gilberth> Do we have coffee?
[21:21:37] <humasect> no
[21:21:51] <humasect> guy ate all the LavAZza two days ago =( 
[21:22:38] <gilberth> How did managment not notice?
[21:24:10] <humasect> i am management =(
[21:24:29] <humasect> have him a nice block of vacuum sealed, gone in two days ! 
[21:25:24] <humasect> lavAzza
[21:25:38] <humasect> guy is 65. i broke my rib when he fell down the stairs drunk and i caught him from dying
[21:25:50] <humasect> or rib(s) could not breathe or cough for about 2mo.
[21:25:58] <gilberth> Hmm, and I always believed I would be Lisp Café management.
[21:26:29] <gilberth> humansect: What was wrong with that guy. Is he a hacker even?
[21:27:02] * gilberth searches the cupboards in the hope to find anything with caffeine.
[21:29:02] <humasect> gilberth: house mate
[21:29:08] <humasect> do you have tea ?
[21:30:56] <pjb> I have TEA: com.informatimago.common-lisp.cesarum.tea  (Tiny Encryption Algorithm: http://web.archive.org/web/20070929150931/http://www.simonshepherd.supanet.com/tea.htm )
[21:30:57] -ixelp- The Tiny Encryption Algorithm
[21:31:01] <gilberth> I found some coffee hinding behind all kind of other stuff. It says: "Best before 10/2012" Nah, I won't die from that.
[21:31:07] <selwyn> lol
[21:31:49] *** Quits: humasect (~humasect@2001:1970:57e0:4100::3d20) (Read error: Connection reset by peer)
[21:31:51] *** Quits: okflo (~okflo@188-23-113-20.adsl.highway.telekom.at) (Quit: WeeChat 3.2)
[21:32:03] <pjb> For coffee, there's htcpcp in emacs lisp: https://github.com/themad/htcpcp
[21:32:06] *** Joins: humasect (~humasect@2001:1970:57e0:4100::3d20)
[21:32:13] <pjb> Somebody should port it to CL…
[21:32:13] <gilberth> humansect: Wait a second. Your story is real?
[21:32:27] *** Joins: okflo (~okflo@188-23-113-20.adsl.highway.telekom.at)
[21:33:19] <gilberth> pjb: Won't help when there is no coffee that the coffee maker could brew.
[21:33:21] <humasect> gilberth: yeah always! what do you mean ?
[21:33:34] <pjb> eating how much coffee? He might have had a heart attack, hence the fall.
[21:33:35] <humasect> not creative enough to fabricate (outside of playing with language, as a coder..)
[21:34:00] <humasect> ohhh well "eat" i mean ingest kirby-style inhale "gone with the wind"
[21:34:03] <humasect> 2 days !
[21:34:22] <gilberth> hamansect: Ok. You're fine again?
[21:34:27] <humasect> https://www.lavazza.com/content/dam/lavazza/products/caffe/macinato/crema-e-gusto/de/pack/cremagusto-250-thumb.png.transform/high/a99f92d65af10f4d3cbfb73a6505a352cb4155a1/img.png 
[21:34:39] <humasect> why typing humansect =) yes human insect (teenage years) but 8 chars
[21:34:44] <humasect> you call yourself a coder 
[21:34:59] <humasect> gilberth: i wasnt fine ?
[21:35:21] <humasect> fine-ground like that missing coffee =( nah i havent been drinking it for 1.5 years. except maybe 3 coffees.
[21:35:22] <gilberth> humasect: Sorry. (1) I had no coffee (2) I have no completion.
[21:35:22] * White_Flame hums a sect
[21:35:29] <selwyn> our office bought a coffee machine
[21:35:34] <pjb> if starbuck were that smart, they'd hook their coffee machines to htcpcp with the http payment extension (you know the 402 payment required status) https://tools.ietf.org/id/draft-hope-bailie-http-payments-00.html  to let all the people in the district order coffee thru htcpcp…
[21:35:40] <humasect> oh my listen to this dream from a week ago:
[21:35:46] <selwyn> issue is that it is meant to make hundreds of cups a day
[21:36:02] <selwyn> in practice it makes much less than that so the pipes are always scaling up with limestone
[21:36:10] <pjb> So basically he ingested 100s of cups of coffee?
[21:36:19] <pjb> IIRC 35 is the lethal dose, no?
[21:36:31] <White_Flame> pjb: except starbucks is based on custom upsells to their coffee
[21:36:32] <pjb> It was a suicide attempt.
[21:36:38] <selwyn> a french artist got to 49 before dying iirc
[21:37:14] <White_Flame> pretty much every "real" coffee drinker thinks starbucks is bitter nasty swill, intentionally to sell the sweeter additions to mask that
[21:37:20] <humasect> it was either jim carey or ryan reynolds. or nicolas cage idk. so he was being spendy with his money. we are at this gathering party thing. so he is wearing an.... inflatable coffee maker. it was like a pool toy, all clear plastic. about the height of his torso, just tied to him like he is wearing it. he inflates it and makes coffee in it. 
[21:37:20] <pjb> yes, there's a song about that: https://www.youtube.com/watch?v=UGtKGX8B9hU
[21:37:21] -ixelp- Le Cafe - Oldelaf | Future Shorts - YouTube
[21:37:36] <selwyn> i had ten cups in one day and damn i felt loopy
[21:37:40] <humasect> pjb: in that little sack ?
[21:37:42] <selwyn> not good for you
[21:38:10] <humasect> not sure how much is in that package
[21:38:30] <humasect> White_Flame: theres people that like McCafe, others like Tim's ... 
[21:38:47] <humasect> throw enough sugar and cream and its just drinking ice cream that gets you high 
[21:39:04] <humasect> weee just got to remember to land the plane. taking off is easy 
[21:40:41] <humasect> im looking for music software
[21:43:44] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 250 seconds)
[21:47:55] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 252 seconds)
[21:49:42] *** Joins: shka (~herr@109.231.62.239)
[21:50:05] *** Joins: pjb (~pjb@user/pjb)
[21:50:19] *** Joins: razzy (~razzy@user/razzy)
[21:53:13] <pjb> humasect: not always.  With small planes it's often easier to land than to take off.
[21:54:31] <humasect> ohh. lets call that soft v. hard =O =) 
[21:54:31] *** Quits: Alfr (~Alfr@user/alfr) (Ping timeout: 252 seconds)
[22:04:10] *** Quits: shka (~herr@109.231.62.239) (Quit: Konversation terminated!)
[22:06:19] *** Joins: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte)
[22:10:10] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[22:12:07] *** Joins: shka (~herr@109.231.62.239)
[22:15:16] *** Quits: humasect (~humasect@2001:1970:57e0:4100::3d20) (Read error: Connection reset by peer)
[22:15:46] *** Joins: humasect (~humasect@2001:1970:57e0:4100::3d20)
[22:17:38] *** Quits: selwyn (~selwyn@user/selwyn) (Quit: Leaving)
[22:32:41] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[22:32:59] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[22:44:24] <shka> https://github.com/cs-books/influential-cs-books
[22:58:21] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[22:58:41] <pjb> humasect: for example, small 1-engine propellers will derive to the left (well, depending on the way the helice turns) when you start moving.  And they requirei quite ample correction on the stick to counter balance.  This makes it more difficult to take off than to land, where you can basically land by sliding.
[22:58:43] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[23:00:25] <pjb> humasect: even with heavy planes, if you know the slone and stall speed, it's rather easy to hit the ground safely.  But taking off offer its challenges.  You cannot pull too hard, too early or too late. You much reach the right speed (which is higher than when loading, since you will have more fuel), etc.
[23:00:56] <humasect> pjb: whoa didnt realise that! the direction of helice. 
[23:01:11] <humasect> multi engine planes are better? ie ones with engine on each side (prop or)
[23:01:29] <pjb> 2-engines will have helices rotating in opposite dirrections to avoid this effect.
[23:01:34] <humasect> ohhh
[23:01:53] <humasect> interesting how they had to time the props to the machine guns 
[23:02:11] <pjb> but if an engine fails during take off, you might veer off the runway.
[23:02:34] <pjb> Yes, the synchronization. It was even mechanical.
[23:02:42] <humasect> so if an engine goes just counter/compensate 
[23:03:24] <pjb> Yes, you will have to.
[23:04:02] <pjb> Now when you flight in war simulator, you often come back to base, with a broken plane and you have to put sometimes a lot of correction, trimming not being enough.
[23:04:14] *** Quits: humasect (~humasect@2001:1970:57e0:4100::3d20) (Read error: Connection reset by peer)
[23:04:19] <pjb> In real life, a F15 came back from Irak with a single wing!
[23:04:43] <pjb> https://www.youtube.com/watch?v=wxJcEz3h4tU
[23:04:44] -ixelp- F-15 Lands with One Wing - YouTube
[23:05:26] *** Joins: humasect (~humasect@2001:1970:57e0:4100::3d20)
[23:05:26] <humasect> played pilotwings recently so i feel i have some experience 
[23:06:14] *** Joins: Alfr (~Alfr@user/alfr)
[23:06:17] <pjb> DCS World, FlightGear, MS Flight Sim.
[23:06:55] <pjb> Once I came back on the vertical stabilizer! Landing was really acrobatic :-)
[23:07:40] <pjb> I've always been very careful with taxpayer money in my flight simulations…
[23:09:01] <humasect> =) 
[23:09:10] <humasect> my bro doing driving sims
[23:09:27] <humasect> i had some logitech steering gear but missing power adapter so i scrapped it 
[23:09:40] <humasect> got 3ds instead if i need to play a Video Game
[23:28:01] *** Quits: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte) (Ping timeout: 252 seconds)
[23:28:40] <pjb> No, I mean, I take great care to bring the planes back, and not to waste missiles for nothing.
[23:29:10] <pjb> Even a broken plane back to base, is better than crashed in enemy territory.
[23:43:57] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[23:44:23] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Read error: Connection reset by peer)
[23:44:42] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[23:46:43] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[23:47:04] *** Quits: humasect (~humasect@2001:1970:57e0:4100::3d20) (Remote host closed the connection)
[23:47:16] *** Joins: selwyn (~selwyn@user/selwyn)
[23:51:04] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[23:52:00] <copec> https://www.reddit.com/r/lisp/comments/pctjh9/optimizing_a_path_tracer/?utm_source=share&utm_medium=ios_app&utm_name=iossmf
[23:52:02] -ixelp- Optimizing a path tracer : lisp
[23:57:51] *** Joins: humasect (~humasect@2001:1970:57e0:4100::3d20)
