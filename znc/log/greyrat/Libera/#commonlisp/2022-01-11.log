[00:00:02] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[00:02:08] *** Quits: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi) (Ping timeout: 256 seconds)
[00:02:34] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[00:02:56] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[00:05:05] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[00:05:24] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[00:07:22] *** Joins: karlosz (~karlosz@47.151.136.69)
[00:08:13] *** Quits: dre (~dre@2001:8003:c932:c301:50d2:4546:b9eb:e49) (Ping timeout: 240 seconds)
[00:10:26] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10fe:29e:29d8:5b5e:f41b:9b27) (Read error: Connection reset by peer)
[00:11:16] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[00:12:29] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[00:17:13] *** Quits: rogersm (~rogersm@90.166.180.250) (Quit: Leaving...)
[00:20:18] *** Joins: waku (~user@catv87040.tac-net.ne.jp)
[00:24:57] *** Quits: waku (~user@catv87040.tac-net.ne.jp) (Ping timeout: 240 seconds)
[00:25:42] *** Joins: dre (~dre@2001:8003:c932:c301:2a8:19cc:bc04:bd69)
[00:26:38] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[00:28:41] *** Quits: theothornhill (~user@2a01:799:159d:aa00:3085:8eab:86cd:42cb) (Remote host closed the connection)
[00:33:21] *** Quits: dre (~dre@2001:8003:c932:c301:2a8:19cc:bc04:bd69) (Ping timeout: 268 seconds)
[00:34:00] <phoe> how can I check if a symbol names a method combination?
[00:37:37] *** Joins: theothornhill (~user@2a01:799:159d:aa00:3085:8eab:86cd:42cb)
[00:44:06] *** Quits: theothornhill (~user@2a01:799:159d:aa00:3085:8eab:86cd:42cb) (Remote host closed the connection)
[00:50:42] *** Joins: dre (~dre@2001:8003:c932:c301:c69e:ead4:d381:5280)
[00:58:18] <_death> there's find-method-combination if you know the gf
[01:00:16] *** anticomputer_ is now known as anticomputer
[01:04:59] *** Joins: theothornhill (~user@2a01:799:159d:aa00:3085:8eab:86cd:42cb)
[01:06:22] *** Quits: morganw (~user@80.225.24.132) (Remote host closed the connection)
[01:06:38] <rotateq> Maybe phoe's question goes more the direction if for a symbol there even exists a method-combination that can be used with a generic-function.
[01:08:22] *** Quits: theothornhill (~user@2a01:799:159d:aa00:3085:8eab:86cd:42cb) (Remote host closed the connection)
[01:08:36] <phoe> ^
[01:08:46] <rotateq> such as (method-combination-p 'progn) => T
[01:10:02] <mfiano> wouldn't you need to know the non-standard metaclasses for that?
[01:10:42] <phoe> I want to know if there ever was a DEFINE-METHOD-COMBINATION done with a given symbol passed as its name, that's all
[01:12:48] <mfiano> unlikely without looking through all gf's without some wrapper macro
[01:12:57] <mfiano> i could be wrong though.
[01:15:28] *** Joins: theothornhill (~user@2a01:799:159d:aa00:3085:8eab:86cd:42cb)
[01:15:34] *** Joins: morganw (~user@80.225.24.132)
[01:16:21] *** Quits: theothornhill (~user@2a01:799:159d:aa00:3085:8eab:86cd:42cb) (Remote host closed the connection)
[01:21:51] <_death> doesn't look like sb-mop:find-method-combination cares about the gf though..
[01:23:28] <phoe> hmmmm
[01:23:31] <phoe> nice find
[01:23:47] <_death> maybe a particular gf metaclass could store them locally or even generate them dynamically?
[01:23:49] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[01:24:13] <phoe> (sb-mop:find-method-combination (sb-mop:class-prototype (find-class 'generic-function)) 'progn nil) works on this particular implementation
[01:24:35] <phoe> but breaks on CCL
[01:24:37] <phoe> oh well
[01:26:08] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:26:44] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[01:27:42] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[01:31:13] *** Joins: akovalenko (~akovalenk@91.77.165.170)
[01:32:45] *** Joins: theothornhill (~user@2a01:799:159d:aa00:3085:8eab:86cd:42cb)
[01:33:57] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[01:37:49] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 240 seconds)
[01:39:25] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[01:40:15] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[01:45:38] <theothornhill> When using the %slot naming for clos slots, is it generally preferred to use with-accessors or with-slots when accessing these in the code? What is the reasoning to prefer one over the other?
[01:48:51] *** Joins: waku (~user@catv87040.tac-net.ne.jp)
[01:48:59] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:50:18] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[01:51:25] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[01:51:34] <phoe> in what code?
[01:51:46] <phoe> if it's internal, then follow your logic
[01:51:50] <theothornhill> internally in your own code
[01:51:56] <phoe> if your accessors have logic assigned to them then use them
[01:52:06] *** Joins: nature (~nature@45.32.235.173)
[01:52:12] <theothornhill> Right
[01:52:13] <phoe> if you know that you want to invoke no accessor logic and just set some slot value then use with-slots
[01:52:20] <phoe> or just SETF SLOT-VALUE directly
[01:52:31] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[01:52:42] <phoe> and if it's external, then use whatever exports have been provided
[01:53:10] <theothornhill> So that may mean that it might be smarter to use with-accessors, in case you want to extend the accessors to contain logic?
[01:53:16] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[01:53:16] <rotateq> hm maybe when scoping one object of class FOO via a WITH-FOO macro that expands into a WITH-SLOTS form, when multiple foos after each other then via WITH-ACCESSORS cause it can be well distinguished then
[01:53:20] *** Quits: waku (~user@catv87040.tac-net.ne.jp) (Ping timeout: 256 seconds)
[01:53:28] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:53:52] <theothornhill> because it lexically scopes them, you mean?
[01:53:54] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[01:53:55] <phoe> theothornhill: correct - but then, it's you who is supposed to know whether accessors contain logic
[01:54:06] <rotateq> theothornhill: do you have an idea how WITH-SLOTS expands?
[01:54:09] <phoe> so it is up to you to decide that
[01:54:39] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[01:54:55] <theothornhill> rotateq: Yeah, but I'm sure you have something particular in mind?
[01:55:22] <rotateq> ehm no :) just that SYMBOL-MACROLET is very useful ^^
[01:55:36] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[01:56:02] <theothornhill> Ah, I see :)
[01:57:22] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[01:57:45] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[01:58:34] <theothornhill> Is there a hypothetical performance cost to with-accessors? I'm guessing that the compilers are smart enough for it not to matter, but maybe lots for accessing can be costly?
[01:59:24] *** Joins: brandflake11 (~user@2601:5c0:c380:83e0:779a:eb64:5e4b:dff3)
[01:59:55] <rotateq> yes it can be, but better think about correctness and comprehensibility first :)
[02:00:08] *** Quits: rgherdt (~rgherdt@ip5f5af455.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[02:00:22] <theothornhill> Yes ofc :)
[02:00:36] <rotateq> hihi
[02:08:15] <rotateq> and can be funny (or confusing) when giving multiple slots in a class definition the same initarg ^^
[02:09:30] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:12:22] <Bike> in order to account for redefinition of accessor functions, practically speaking your compiler will probably not coalesce together multiple accesses
[02:12:58] <phoe> unless they're structure accessors for which the compiler may do that, especially if you declare them inline
[02:13:01] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 256 seconds)
[02:13:16] <Bike> still probably not
[02:13:23] <phoe> oh
[02:13:27] <rotateq> hmm
[02:13:28] <Bike> it also has to account for the possibility of some other function or thread modifying the instance
[02:13:35] <Bike> meaning the separate reads should get separate values
[02:14:16] <Bike> this said, slot access is probably not going to cause as much slowdown as a bad algorithm
[02:16:30] *** Quits: theothornhill (~user@2a01:799:159d:aa00:3085:8eab:86cd:42cb) (Remote host closed the connection)
[02:22:29] *** Joins: dra (~dra@2a04:4540:640f:9400:e533:1ee:7186:242a)
[02:24:38] <Bike> but like, imagine FOO is established by with-accessors, and then you have (loop while condition do (f ... foo ...)). in order for the compiler to move the read outside of the loop, it would have to know that both f and the condition can't possibly modify the instance being read
[02:24:52] *** Quits: makomo (~makomo@user/makomo) (Quit: WeeChat 3.3)
[02:24:55] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 256 seconds)
[02:25:03] <Bike> which would require knowing that the instance is not bound to any dynamic variables, not part of a closure f could possibly access, etc
[02:25:06] <Bike> pretty difficult
[02:29:46] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:4856:a4ca:ca7b:cdae) (Remote host closed the connection)
[02:31:13] *** Joins: phantomics (~phantomic@97-118-136-125.hlrn.qwest.net)
[02:31:53] *** Joins: theothornhill (~user@2a01:799:159d:aa00:3085:8eab:86cd:42cb)
[02:33:00] *** Joins: pillton (~user@58-6-233-159.tpgi.com.au)
[02:34:10] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[02:34:30] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net)
[02:35:30] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[02:36:41] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:36:55] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Client Quit)
[02:37:32] *** Quits: random-nick (~random-ni@87.116.181.150) (Ping timeout: 256 seconds)
[02:39:01] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[02:39:22] <bollu> Here's an sly-db annoyance I have. Say I'm at sly-db debugging some stack trace, and so I focus on the 7th stack frame, hit `e` to evaluate in the stack frame. I then type an unbound variable, which takes me to a sub-handler. When I quit this subhandler with  0: [ABORT] Return to sly-db level 1, the cursor has now moved to the 1st stack frame! Can
[02:39:22] <bollu> I make sly remember that I was in the 7th stack frame?
[02:40:26] <phoe> bollu: ask on the sly discussions page on github, or file an issue perhaps
[02:40:38] <phoe> the maintainer likes getting that sort of questions there
[02:41:26] <bollu> phoe this happens with slime as well FWIW
[02:41:58] *** Joins: gaqwas (~john@dynamic-077-002-039-110.77.2.pool.telefonica.de)
[02:42:49] <phoe> then the fix could possibly be backported to slime too!
[02:44:22] *** Quits: pve (~pve@176-93-118-10.bb.dnainternet.fi) (Quit: leaving)
[02:49:29] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:50:46] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[02:50:49] *** Quits: theothornhill (~user@2a01:799:159d:aa00:3085:8eab:86cd:42cb) (Remote host closed the connection)
[02:51:49] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 240 seconds)
[02:53:02] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[02:58:12] *** Joins: s-liao (~s-liao@101.86.96.21)
[03:01:15] *** Joins: igemnace (~ian@user/igemnace)
[03:02:10] <bollu> phoe done, filed an issue: https://github.com/joaotavora/sly/issues/488
[03:02:52] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[03:03:47] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[03:06:55] *** Quits: dra (~dra@2a04:4540:640f:9400:e533:1ee:7186:242a) (Remote host closed the connection)
[03:08:15] <sm2n> phoe: by accessor logic do you just mean a GF method that calls slot-value and maybe does other things? Or is this some MOP thing?
[03:08:49] <sm2n> Because as I understand it, WITH-ACCESSORS is not well-defined for the former
[03:09:13] <phoe> sm2n: WITH-ACCESSORS doesn't care if it is going to call a GF or something else
[03:09:52] <sm2n> Well, yes, any sane implementation will work that way
[03:10:07] <sm2n> but http://www.lispworks.com/documentation/HyperSpec/Body/m_w_acce.htm says "The consequences are undefined if any accessor-name is not the name of an accessor for the instance."
[03:10:27] <sm2n> I'm not sure how else to read that
[03:11:01] <sm2n> The notes seem to say it's fine though
[03:13:17] <phoe> I mean, I expect this to work
[03:13:27] <phoe> (let ((cons (cons 1 2))) (with-accessors ((cons-car car) (cons-cdr cdr)) cons (setf cons-car :foo cons-cdr :bar) cons))
[03:15:04] <phoe> the way I read it and the way the glossary speaks, in this context an accessor is anything that is capable of performing reads and writes, like CAR or GETF
[03:15:23] <phoe> even if it isn't a function, like SETF of GETF
[03:16:46] <yottabyte> So are some things in lisp multithreaded by default, like let bindings? That's why they have let*, if you want the bindings evaluated sequentially?
[03:16:48] <phoe> so, by accessor logic, I mean anything more than performs more logic than just writing some value somewhere - can be typechecks, caching, computation, anything
[03:17:01] <phoe> yottabyte: lexical bindings are always thread-local
[03:17:19] <phoe> s/lexical/dynamic/
[03:17:39] *** Joins: waku (~user@catv87040.tac-net.ne.jp)
[03:17:40] <phoe> global bindings are usually global, and lexical bindings can be shared across threads via closures
[03:18:16] <phoe> also you seem to be confusing "multithreaded" with "parallel"
[03:18:54] <yottabyte> Well how are they evaluated in parallel if not in multiple threads?
[03:18:55] <phoe> the former implies multiprocessing, the latter simply means that latter bindings in a binding form cannot observe the effects of the former bindings
[03:19:11] <yottabyte> I see...
[03:20:48] <phoe> https://plaster.tymoon.eu/view/2855#2855
[03:21:18] <phoe> might be slightly wrong, it's 1 AM for me
[03:22:29] *** Quits: gaqwas (~john@dynamic-077-002-039-110.77.2.pool.telefonica.de) (Remote host closed the connection)
[03:22:29] <phoe> but basically it's a two-step process
[03:22:34] <phoe> first, you compute all the values
[03:22:37] <phoe> second, you perform binding
[03:22:41] <phoe> that's how LET works
[03:23:07] <phoe> with LET* you interleave these steps: compute X → bind X → compute Y → bind Y → ...
[03:23:27] <phoe> so effectively LET* is just a series of nested LETs, each with one binding
[03:27:09] <yottabyte> I see
[03:28:34] <phoe> for a true multithreaded solution, (ql:quickload :lparallel) and then (lparallel:plet ((x (sleep 1)) (y (sleep 1)) (z (sleep 1))) (list x y z))
[03:28:37] <phoe> :D
[03:28:47] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[03:29:43] *** Joins: Algernon69 (~Algernon6@88.124.69.179)
[03:29:46] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[03:34:38] *** Quits: Algernon69 (~Algernon6@88.124.69.179) (Ping timeout: 252 seconds)
[03:35:21] *** Joins: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925)
[03:36:21] *** Quits: VincentVega (~user@212.97.1.105) (Remote host closed the connection)
[03:38:33] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[03:38:34] *** Joins: VincentVega (~user@212.97.1.105)
[03:39:13] *** Parts: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net) (#commonlisp)
[03:40:13] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:cb46:c04b:665a:c687) (Ping timeout: 240 seconds)
[03:40:30] *** Joins: Oladon (~olad@98.43.81.226)
[03:40:32] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[03:42:10] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[03:45:33] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[03:46:01] <Bike> yottabyte: in fact, both LET and LET* mandate that the value forms are evaluated sequentially.
[03:46:05] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[03:47:19] *** Joins: s-liao (~s-liao@101.86.96.21)
[03:52:04] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[03:52:34] *** Quits: reb (~brown@2603-7000-d93b-e900-b63a-b62a-a1d1-b433.res6.spectrum.com) (Remote host closed the connection)
[03:52:46] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[03:55:31] <sm2n> phoe: Fair enough
[04:00:28] <rotateq> yottabyte: You could have read-up about emulating LET* with LET forms in 'On Lisp' by Paul Graham. Even how to emulate LET with LAMBDA. But in CL of those three only LET and LET* are two of the 25 special operators.
[04:01:21] *** Quits: morganw (~user@80.225.24.132) (Remote host closed the connection)
[04:01:49] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[04:03:31] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[04:04:40] *** Quits: VincentVega (~user@212.97.1.105) (Remote host closed the connection)
[04:05:13] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[04:05:24] *** Joins: akoana (~ah@user/akoana)
[04:06:40] *** Joins: notzmv (~zmv@user/notzmv)
[04:07:30] *** Quits: jstoddard (~user@107-142-159-57.lightspeed.sndgca.sbcglobal.net) (Quit: ERC (IRC client for Emacs 27.2))
[04:08:46] *** Quits: waku (~user@catv87040.tac-net.ne.jp) (Ping timeout: 256 seconds)
[04:16:37] *** Joins: waku (~user@catv87040.tac-net.ne.jp)
[04:22:52] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:24:29] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[04:25:02] *** Joins: gaqwas (~john@dynamic-077-002-039-110.77.2.pool.telefonica.de)
[04:33:08] *** Quits: gaqwas (~john@dynamic-077-002-039-110.77.2.pool.telefonica.de) (Ping timeout: 256 seconds)
[04:41:38] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:87d8:fa0a:4d3d:df57)
[04:57:01] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[04:57:57] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[04:59:37] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[05:08:24] *** Quits: raeda (~raeda@72.49.214.135) (Remote host closed the connection)
[05:08:34] *** Joins: raeda (~raeda@72.49.214.135)
[05:09:58] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 256 seconds)
[05:48:28] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:87d8:fa0a:4d3d:df57) (Ping timeout: 268 seconds)
[05:54:02] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[06:13:24] *** Joins: xsperry (~xs@user/xsperry)
[06:25:00] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[06:26:37] *** Joins: Alfr (~Alfr@user/alfr)
[06:27:15] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[06:28:55] *** Joins: Alfr (~Alfr@user/alfr)
[06:30:55] *** Joins: antonv (~antonv@46.53.246.3)
[06:31:49] *** Joins: s-liao (~s-liao@101.86.96.21)
[07:01:24] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[07:05:38] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[07:15:12] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:16:06] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:17:12] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[07:27:23] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[07:30:47] <beach> Good morning everyone!
[07:36:23] *** Quits: semz (~none@user/semz) (Ping timeout: 268 seconds)
[07:36:49] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:69b8:e285:4414:d6cb)
[07:38:30] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[07:42:37] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:43:12] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Read error: Connection reset by peer)
[07:44:15] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[07:45:48] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[07:46:37] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 240 seconds)
[07:47:30] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[07:48:56] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:49:08] *** Joins: semz (~none@user/semz)
[07:53:17] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[08:09:36] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[08:18:28] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[08:20:36] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[08:26:26] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:69b8:e285:4414:d6cb) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:33:44] *** Quits: semz (~none@user/semz) (Ping timeout: 268 seconds)
[08:34:52] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: sleepin)
[08:43:37] *** Quits: brandflake11 (~user@2601:5c0:c380:83e0:779a:eb64:5e4b:dff3) (Remote host closed the connection)
[08:46:36] *** Joins: semz (~none@user/semz)
[08:51:25] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[08:54:09] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:54:58] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[08:58:22] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Ping timeout (120 seconds))
[09:06:16] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 256 seconds)
[09:08:43] *** Joins: miique (~miique@181.46.139.166)
[09:14:31] *** Quits: jealousmonk (~user@2804:431:e7c5:b880:889f:205:ed34:5b22) (Remote host closed the connection)
[09:22:49] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[09:28:54] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[09:30:10] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[09:37:02] *** Joins: qhong_ (~qhong@rescomp-21-400677.stanford.edu)
[09:37:10] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[09:39:42] *** Quits: qhong (~qhong@rescomp-21-400677.stanford.edu) (Ping timeout: 256 seconds)
[09:49:09] *** Joins: attila_lendvai (~alendvai@2a02:120b:2c72:1dc0:2e07:56d9:2bb8:283d)
[09:56:11] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:c53f:d83a:dd8d:27ab)
[10:14:29] *** Joins: s-liao (~s-liao@101.86.96.21)
[10:15:16] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[10:28:53] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[10:31:41] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[10:33:23] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[10:35:05] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Ping timeout: 256 seconds)
[10:35:17] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[10:45:21] *** Joins: shka (~herr@109.231.0.226)
[10:58:35] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:2c67:7cfa:cdb8:6538)
[11:03:59] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[11:06:46] *** Joins: karlosz (~karlosz@47.151.136.69)
[11:10:10] *** Joins: Lycurgus (~juan@98.4.112.204)
[11:16:37] *** Quits: akovalenko (~akovalenk@91.77.165.170) (Read error: Connection reset by peer)
[11:17:53] *** Joins: Algernon69 (~Algernon6@2a04:cec0:10fe:29e:449a:bca0:c3c9:f532)
[11:20:14] *** Quits: attila_lendvai (~alendvai@2a02:120b:2c72:1dc0:2e07:56d9:2bb8:283d) (Ping timeout: 268 seconds)
[11:30:48] *** Joins: miique_ (~miique@181.46.139.166)
[11:32:37] *** Quits: miique (~miique@181.46.139.166) (Ping timeout: 240 seconds)
[11:34:56] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[11:41:03] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[11:43:16] *** Joins: gaqwas (~john@dynamic-077-009-101-217.77.9.pool.telefonica.de)
[11:53:09] <mgl> Reading https://sabracrolleton.github.io/testing-framework, I was amazed by the number of testing frameworks, but https://xkcd.com/927/ struck, and now I'm announcing the final word on testing called Try that tries to do almost everything these libraries do while remaining conceptually simple. The design is closest to Stefil's. If you are
[11:53:10] <mgl> interested, read the tutorial here: https://github.com/melisgl/try#x-28TRY-3A-40TRY-2FTUTORIAL-20MGL-PAX-3ASECTION-29
[11:53:17] *** Quits: antonv (~antonv@46.53.246.3) (Ping timeout: 256 seconds)
[12:00:35] *** Joins: MajorBiscuit (~MajorBisc@c-001-007-038.client.tudelft.eduvpn.nl)
[12:01:17] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net)
[12:04:04] *** Joins: s-liao (~s-liao@101.86.96.21)
[12:26:11] *** Joins: pve (~pve@87-93-236-6.bb.dnainternet.fi)
[12:31:47] <Shinmera> Parachute already did the 'do everything' thing.
[12:35:50] <jackdaniel> the only thing multitude of test frameworks doesn't do is not rewriting the same purpose library over and over again
[12:36:48] <jackdaniel> if anyone thinks about writing the next one, there are a few name spots open: 3am, 4am, 6am :)
[12:36:55] *** Quits: gaqwas (~john@dynamic-077-009-101-217.77.9.pool.telefonica.de) (Ping timeout: 256 seconds)
[12:38:35] *** Joins: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi)
[12:40:12] <jackdaniel> (and, to not leave anyone out, "brolly" is also a fine system name)
[12:40:15] <phoe> oh no
[12:45:04] <mgl> Deservedly great reception! Have a look though, it may float your boat, especially if you like your tests to be functions.
[12:45:07] *** Joins: user51 (~user51@176.228.148.215)
[12:45:25] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[12:46:14] *** Joins: amb007 (~a_bakic@151.13.23.93.rev.sfr.net)
[12:50:50] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:50:51] *** Quits: amb007 (~a_bakic@151.13.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[12:50:58] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[13:04:07] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[13:07:59] <lisp123> I'm thinking of memoizing function calls for multiple functions. Which is better, to have a giant hash table where I look up the function & its arguments or have individual hash tables for each function?
[13:08:19] <lisp123> [The latter could be streamlined into a list of nested hash tables]
[13:08:22] <moon-child> I would do the latter
[13:08:34] <lisp123> moon-child: Thanks
[13:19:01] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (Ping timeout: 240 seconds)
[13:19:55] *** Joins: varjag (~user@188.95.247.247)
[13:22:13] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[13:26:39] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:27:35] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:41:32] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[13:44:35] *** Joins: attila_lendvai (~alendvai@220.33.199.178.dynamic.wline.res.cust.swisscom.ch)
[13:45:55] *** Quits: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925) (Quit: ERC (IRC client for Emacs 27.2))
[13:55:23] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:4f29:e68c:50c9:fe2)
[13:55:39] <phoe> the latter will be faster and individual caches can be easily removed this way
[13:55:39] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:dc6a:cea3:1af:140f)
[14:01:50] <moon-child> phoe: they left
[14:03:23] *** Quits: varjag (~user@188.95.247.247) (Quit: ERC (IRC client for Emacs 28.0.50))
[14:03:49] <phoe> minion: memo for lisp123: individual hash tables for functions will be faster and individual caches can be easily removed this way
[14:03:50] <minion> Remembered. I'll tell lisp123 when he/she/it next speaks.
[14:03:52] <phoe> moon-child: thanks
[14:06:56] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:07:01] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:08:16] *** Lord_of_Life_ is now known as Lord_of_Life
[14:08:26] <moon-child> hmm, it occurs to me in a context where you make a more broad and sophisticated cache, you might actually not want to do that.  Rather, you would have a more unified architecture where you devote a certain amount of space to cache, and evict based on frequency and expense
[14:08:59] <moon-child> but I generally associate 'memoize' with a more ad-hoc, specialised thing
[14:09:01] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:09:38] <phoe> yes
[14:10:04] <phoe> if you want something more advanced then you need techniques for controlling cache size, eviction, etc.. so a simple hash table won't do anymore
[14:13:15] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[14:13:28] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[14:17:16] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[14:21:44] <lisp123win> phoe: Thanks for the additional color
[14:23:39] *** Quits: pillton (~user@58-6-233-159.tpgi.com.au) (Quit: ERC (IRC client for Emacs 27.2))
[14:28:06] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[14:33:56] *** Joins: varjag (~user@188.95.247.247)
[14:34:42] *** Joins: loke (~loke@junk.nocrew.org)
[14:39:19] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[14:48:56] <lisp123win> beach: Have you finalised your submission to ELS?
[14:49:19] <lisp123win> Looks like only 2 months away!
[14:53:18] *** Quits: pieguy12- (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca) (Ping timeout: 260 seconds)
[14:55:43] <phoe> the CfP is due soon IIRC
[14:57:22] *** Joins: theothornhill (~user@2a01:799:159d:aa00:3085:8eab:86cd:42cb)
[14:58:14] <phoe> oh right, extended until 23rd
[15:01:34] *** Joins: igemnace (~ian@user/igemnace)
[15:05:44] *** Joins: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net)
[15:08:57] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 250 seconds)
[15:12:11] *** Quits: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi) (Ping timeout: 256 seconds)
[15:12:52] <lisp123win> phoe: Are you submitting anything?
[15:12:56] <phoe> nope
[15:13:20] <lisp123win> I see
[15:14:58] *** Quits: theothornhill (~user@2a01:799:159d:aa00:3085:8eab:86cd:42cb) (Remote host closed the connection)
[15:25:37] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[15:27:10] *** Joins: nature (~nature@45.32.235.173)
[15:32:10] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[15:32:49] *** Joins: amb007 (~a_bakic@136.13.23.93.rev.sfr.net)
[15:35:41] *** Joins: biog (~user1@static.39.160.132.142.clients.your-server.de)
[15:35:59] *** Quits: attila_lendvai (~alendvai@220.33.199.178.dynamic.wline.res.cust.swisscom.ch) (Ping timeout: 256 seconds)
[15:37:18] *** Quits: amb007 (~a_bakic@136.13.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[15:37:58] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[15:48:52] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:55:47] *** Quits: unyu (~pyon@user/pyon) (Quit: Reboot.)
[16:05:35] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[16:05:56] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[16:06:29] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:08:11] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[16:08:28] *** Joins: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925)
[16:17:52] *** Joins: random-nick (~random-ni@87.116.167.125)
[16:19:12] *** Quits: varjag (~user@188.95.247.247) (Ping timeout: 256 seconds)
[16:20:09] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Read error: No route to host)
[16:23:17] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:dc6a:cea3:1af:140f) (Ping timeout: 240 seconds)
[16:31:00] *** Joins: akovalenko (~akovalenk@45.137.112.220)
[16:33:55] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:38:51] *** Quits: akovalenko (~akovalenk@45.137.112.220) (Read error: Connection reset by peer)
[16:39:17] *** Quits: triffid (~triffid@gateway/tor-sasl/triffid) (Remote host closed the connection)
[16:39:49] *** Joins: triffid (~triffid@gateway/tor-sasl/triffid)
[16:40:18] *** Joins: attila_lendvai (~alendvai@2a02:120b:2c72:1dc0:2e07:56d9:2bb8:283d)
[16:41:43] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[16:42:46] *** Joins: amb007 (~a_bakic@136.13.23.93.rev.sfr.net)
[16:48:12] *** Joins: Everything (~Everythin@37.115.210.35)
[16:54:31] *** Joins: unyu (~pyon@user/pyon)
[17:12:06] *** Quits: amb007 (~a_bakic@136.13.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[17:12:39] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[17:14:37] *** Joins: Bike (~Glossina@71.69.170.70)
[17:14:37] *** ChanServ sets mode: +o Bike
[17:21:24] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[17:22:12] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[17:24:51] <beach> lisp123win: I have some more work to do.
[17:28:17] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[17:30:00] *** Joins: Equill (~Equill@154.red-80-39-174.dynamicip.rima-tde.net)
[17:30:57] <rotateq> I don't know how it's about you, but I often realized with myself how much the urge of perfection can be a curse. :/
[17:31:00] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[17:33:48] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:39:51] *** Joins: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com)
[17:41:04] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[17:41:15] *** Parts: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net) (#commonlisp)
[17:43:39] <Equill> rotateq: I feel it. Took a *lot* of work to get myself to internalise that "good enough" really can be.
[17:45:15] <rotateq> It has already ruined a lot of things in my life (which is not that long).
[17:46:18] <Equill> It probably helped when I looked at the quest for perfection as an asymptote, and realised that it's often a question of when the delta is small enough. It wasn't much of a step from there to think in more practical terms, and realise that the smart approach is to accept "good enough" as when the delta is small enough that your *customers* don't notice or care about the difference.
[17:47:42] <Equill> I concluded that perfection should always be what you *aim* for, but it's not only OK to not reach it, but it should be a pleasant surprise when you actually do.
[17:47:57] <rotateq> Maybe applying the 80:20 rule.
[17:48:24] <Equill> Pretty much; that's one of the well-known ways of looking at it.
[17:48:31] <rotateq> But I often feel like I can't ever understand many things *really* deeply and that frustrates me too.
[17:49:07] <Equill> Oh, I know that one.
[17:50:24] <Equill> Again, it's a case of accepting that there just isn't enough time to understand everything as deeply as you feel you should. Then it's a question of how deep it's worth diving down any given rabbit-hole.
[17:50:44] <Equill> Then again, it's well enough for me to speak: I *still* have more hobbies than I have time for them :)
[17:51:16] <rotateq> Yes of course, as I can't prove everything in the kind of maths I do myself, or doing every physics experiment and and and ...
[17:51:53] <Equill> Yeah, that. Frustrating is one word for it :)
[17:53:31] <rotateq> I was wondering if the new James Webb telescope has again some CL running on it like the scheduling system on Hubble. But as I read they completely used "standardized" things by IBM.
[17:54:56] <rotateq> So the question still remains how they debug and reprogram parts that fail as it runs, like in the talk about "debugging from 60 million miles away" having a CL REPL on board to connect to.
[17:58:14] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[18:01:12] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[18:02:13] <pjb> rotateq: usually, it's just done by having two partitions.  When there's a bug, they upload a new system image (or more probably in these cases, a patch to build a new system image) in the other partition, and reboot.
[18:02:32] <pjb> rotateq: see how it's done on your favorite Android system.
[18:03:17] <rotateq> I have no favorite Android system. ^^ But ok, could update my Lineage OS, my camera doesn't initialize since a few days now.
[18:03:35] <rotateq> And omg really? :D I shouldn't comment that.
[18:03:53] <pjb> rotateq: of course, if the problem is just in a program, they may just upgrade the specific executable.  They usually have persistent memory organized as a MS-DOS file system.
[18:04:40] <rotateq> Ah okay. Came across again at HAL/S, we talked about it some time ago and you told me it has the capability of reading 2D-equations. ^^
[18:04:59] <pjb> Exact.
[18:05:15] <rotateq> As I heard even on FPGAs it's possible that they change parts of themselves as they run.
[18:05:52] <rotateq> The long HAL/S tutorial is very well written and enjoyable.
[18:06:06] <rotateq> And just 153 keywords. :)
[18:24:57] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[18:26:13] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[18:28:22] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Client Quit)
[18:30:00] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[18:44:20] <frodef> Hi all, any recommendation for sending email from CL?
[18:48:05] <rotateq> hm maybe not trivial-mail ^^
[18:48:34] <pve> frodef: I've been using cl-smtp. It works fine for my purposes.
[18:49:57] <frodef> thanks
[18:50:13] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:51:46] *** Joins: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi)
[18:55:24] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:18e:85f:67dd:e924)
[19:00:34] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[19:05:05] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 256 seconds)
[19:07:07] <frodef> cl-smtp works very nicely!
[19:13:35] *** Joins: treflip (~user@user/treflip)
[19:14:35] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 252 seconds)
[19:17:42] *** Joins: booaa (~user@150.116.171.108)
[19:23:04] *** Quits: unyu (~pyon@user/pyon) (Quit: brb)
[19:26:15] <rotateq> It's so exhausting, one mentions "and with CLOS you missed really something more in getting the idea of OOP" and instantly it's called 'scary' and such. I shouldn't care.
[19:27:57] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:18e:85f:67dd:e924) (Ping timeout: 240 seconds)
[19:28:29] <rotateq> "Oh you don't know the flyweight pattern?" pfff
[19:29:14] <rotateq> Then I looked and just thought: so when using :allocation :class for a slot it seems to be it, even with following a sane update protocol for all made instances.
[19:30:24] *** Joins: ebrasca (~user@librepanther.com)
[19:31:10] *** Quits: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925) (Remote host closed the connection)
[19:41:03] *** Quits: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com) (Quit: WeeChat 3.4)
[19:41:20] *** Joins: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com)
[19:42:30] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-227.dsl.bell.ca)
[19:43:07] *** Joins: varjag (~user@188.95.247.247)
[19:44:56] *** Parts: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (ERC (IRC client for Emacs 27.2))
[19:45:09] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Read error: Connection reset by peer)
[19:45:19] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[19:45:53] *** Joins: unyu (~pyon@user/pyon)
[19:49:17] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-227.dsl.bell.ca) (Ping timeout: 256 seconds)
[20:01:44] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[20:03:02] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[20:03:10] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[20:04:01] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-183.dsl.bell.ca)
[20:07:13] <phoe> Online Lisp Meeting #13 starting in 20 minutes: https://www.twitch.tv/TwitchPlaysCommonLisp
[20:08:33] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-183.dsl.bell.ca) (Ping timeout: 256 seconds)
[20:11:23] *** Quits: booaa (~user@150.116.171.108) (Ping timeout: 256 seconds)
[20:11:28] <mfiano> At last, a useful time for America
[20:12:07] <phoe> dbotton requested it, hence I complied
[20:12:25] <phoe> speakers' preference is of highest priority here
[20:17:34] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[20:18:07] <etimmons> exciting! I'm hoping to put together one in a couple months. (and would probably request this time as well)
[20:19:05] <phoe> sure! I'll accept it and gladly display it
[20:19:14] <dbotton> It is not such a bad time for Europe, early evening
[20:21:33] <phoe> yes
[20:21:47] <phoe> although bad for Australians and Asia
[20:21:59] <phoe> timezones are, as always, a hard problem
[20:23:15] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[20:27:01] *** Quits: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com) (Ping timeout: 240 seconds)
[20:28:18] *** Joins: domovod (~domovod@176.196.122.197)
[20:28:39] *** Quits: MajorBiscuit (~MajorBisc@c-001-007-038.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.3)
[20:29:42] *** Joins: jealousmonk (~user@2804:431:e7c5:b880:889f:205:ed34:5b22)
[20:29:44] *** Joins: thomp (~thomp@162.212.34.219)
[20:32:01] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:18e:85f:67dd:e924)
[20:38:03] *** Joins: cage (~cage@dynamic-adsl-84-221-50-16.clienti.tiscali.it)
[20:39:28] *** Quits: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi) (Quit: Client closed)
[20:43:46] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[20:45:20] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10eb:9295:449a:bca0:c3c9:f532)
[20:49:11] *** Quits: Algernon69 (~Algernon6@2a04:cec0:10fe:29e:449a:bca0:c3c9:f532) (Ping timeout: 252 seconds)
[20:51:52] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[20:53:16] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[20:55:45] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:2c67:7cfa:cdb8:6538) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:58:26] *** Joins: jstoddard (~user@107-142-159-57.lightspeed.sndgca.sbcglobal.net)
[21:05:32] <cage> dbotton: can we draw on the html canvas using clog?
[21:07:18] <cage> thanks ;-)
[21:12:11] <cage> found the tutorial, nice!
[21:13:39] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:14:40] <lisp123> beach: Looking forward to reading the latest ideas soon
[21:14:40] <minion> lisp123, memo from phoe: individual hash tables for functions will be faster and individual caches can be easily removed this way
[21:15:21] <lisp123> Equill & rotateq - I know what you mean on perfection
[21:16:01] *** Quits: domovod (~domovod@176.196.122.197) (Quit: WeeChat 3.4)
[21:16:08] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[21:16:50] <lisp123> My latest theory is that the expressivity and freedom offered by Lisp (by providing building blocks that can be combined vs. a restrictive dogmatic language like others) makes it difficult for many to program in
[21:17:03] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[21:17:29] <dbotton> cage - yes there is a tutorial on it
[21:17:31] <lisp123> And that's one of the reasons why other languages became more popular. They are "easier" to get something done - whereas there seems to a curse in lisp where many keep striving for perfection
[21:17:35] <etimmons> Thanks phoe and dbotton!
[21:18:02] <drakonis> oh, latest ideas?
[21:18:10] <lisp123> (well at least for me - i feel some times I'm spinning wheels and not progressing fast enough)
[21:18:56] <cage> dbotton:  found them! Seems a very nice project CLOG, thanks for writing it and showing to us :)
[21:19:23] <phoe> The Common Lisp Omnificent GUI - Online Lisp Meeting #13, 11.01.2022 - https://youtu.be/SeYK7Id3cd8 + https://youtu.be/pkQ-WlzQudw
[21:21:08] *** Joins: VincentVega (~user@212.97.1.105)
[21:21:13] <cage> dbotton: i wonder if was possible to attach clog lambda function (so to say) to canvas event (like mouse clicking)
[21:22:15] *** Joins: sveit_ (~sveit@45.77.0.246)
[21:22:53] <sveit_> hi. I am confused about inheritance of metaclasses, and I was wondering if someone could explain what is going on. More specifically, the following code gives an error in SBCL:
[21:23:09] <sveit_> (defclass a () () (:metaclass closer-mop:funcallable-standard-class)) (defclass b (a) ()) (make-instance 'b)
[21:23:50] <sveit_> the definition of class b seems clear, what is the "right" way to fix this and make b inherit the metaclass as well? and why does it not do so "automatically"?
[21:23:58] <jackdaniel> you need to specify the metaclass also for class b
[21:24:11] <jackdaniel> it doesn't do so, defclass defaults to standard-class
[21:24:23] *** Quits: mmk2410 (~mmk2410@user/mmk2410) (Quit: ZNC - https://znc.in)
[21:25:10] <phoe> I was curious if there is some way to automatically inject the proper metaclass based on stuff like in https://github.com/phoe-trash/value-semantics-utils/blob/main/src/always-bound-class.lisp#L20-L33
[21:25:16] <phoe> but I have no idea how/if that would work with DEFCLASS
[21:25:22] *** Joins: mmk2410 (~mmk2410@user/mmk2410)
[21:25:28] <lisp123> phoe: thanks for posting, watching now
[21:25:31] <phoe> and I have no time to explore it now because I need to run :(
[21:25:37] <phoe> lisp123: no problem
[21:25:41] <Equill> lisp123win: you may have a point there. I've seen senior Java developers look *scared* at the mention of Lisp. I suspect the fear of freedom (and the responsibility of choice that comes with it) is a factor. But I've also come to see functional and procedural/imperative programming as transform-oriented and register-oriented respectively, and the underlying mindsets are just wildly different.
[21:25:54] <sveit_> i see. if you don't mind, can you explain (1) the rationale behind such a decision and (2) can I signal to some part of MOP that when inheriting from 'a one should inherit the metaclass?
[21:26:44] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[21:26:47] <Equill> Some people are just much more comfortable with the idea of rephrasing the problem to suit the machine, than phrasing it in terms of what you do to the data on its way through.
[21:27:57] <dbotton> cage yes and no, the canvas is just a bitmap so there are limits to what you can do out of the box.
[21:28:05] <yitzi> sveit_: I don't think that the metaclass has to be the same, just compatible according to validate-superclass.
[21:28:27] <phoe> ;; Equill: whereas lisp people are comfortable with doing both, always at the same time, while also adding tons of abstractions along the way
[21:28:36] * phoe runs off
[21:28:44] <Equill> ...kinda :)
[21:28:51] <phoe> and macros
[21:28:52] <jackdaniel> yitzi: but the expectation here is that sveit_ want's to make an instance of funcallable-standard-class, not standard-class
[21:28:53] <phoe> everyone loves macros
[21:29:08] * Equill looks at his own code
[21:29:08] <cage> dbotton: thanks!
[21:29:40] <Equill> Less imperative than it used to be, but that's more to do with switching from cl-who to html-template :)
[21:30:40] <lisp123> Equill: That's an interesting way to put it
[21:30:50] <jackdaniel> sveit_: I can't speak on behalf of the standard authors, but I rationalize it this way, that when the reader sees (defclass foo …) they assume standard class
[21:31:01] <jackdaniel> so implicit change to that would make the code less readable
[21:31:44] <sveit_> yitzi, jackdaniel: yes, jackdaniel is right with what I want; (defclass a () () (:metaclass closer-mop:funcallable-standard-class)), and inheriting from 'a means your metaclass becomes closer-mop:funcallable-standard-class (and in general 'a metaclass)
[21:31:49] <Bike> sveit_: for one thing, the metaclass can affect the way inheritance works. the system can't be sure what classes a new class inherits from until it knows the metaclass and makes an instance of it.
[21:32:22] <Equill> phoe: I love having macros available for when I need to call on them, but apparently I just don't build anything big enough to actually need them.
[21:32:43] <lisp123> Equill: I did A LOT of Microsoft Excel (5 - 10 years daily), which is not a programming language in any way, but it made "transform-oriented" much more natural to me. So Lisp felt natural from day 1 and since I dislike too much of an imperative style
[21:32:55] <Bike> e.g. just yesterday phoe sent me some code with a metaclass that made it so that (defclass foo () ... (:metaclass ...)) would result in foo inheriting from a FOO-OBJECT class instead of STANDARD-OBJECT
[21:32:58] <rotateq> Equill: It hasn't be big to make sense having more. :)
[21:33:26] <sveit_> I guess my case is also special since funcallable-standard-class seems to be a strict superset of standard-class, so it would not break anything to force children of b to have a's metaclass in this case. i suspect (given how big MOP seems to be, although i know very little of it) that somehow i can encode this fact
[21:33:35] <Equill> lisp123win: that makes sense. And it _is_ programming, just in more of a declarative idiom. But you also have my sympathy for having to spend so much time in it :)
[21:33:49] <sveit_> sorry, chidren of a to have a's metaclass
[21:33:49] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 268 seconds)
[21:33:57] <Bike> funcallable-standard-class is actually a subclass of standard-class
[21:34:10] <Bike> although i guess by superset you mean that it seems to be standard-class with some extra stuff
[21:34:43] <Bike> under the hood, this is not necessarily the case; a standard instance (i.e. instance of a standard-class) may be represented differently and incompatibly from a funcallable standard instance
[21:35:20] <sveit_> Bike: exactly, so in this case it seems (and in my case it is essential) that inheriting from 'a (i.e. being a subclass of 'a) means your metaclass becomes that of 'a (or a child of it's metaclass).
[21:35:52] <Bike> in this case it is important you keep the metaclass, yes. but as i mentioned above, it is not possible to determine inheritance before knowing the metaclass, in general.
[21:36:23] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[21:37:05] <Bike> also, even if that were not the case, you could have a situation with multiple inheritance in which the superclasses have different metaclasses.
[21:37:44] <lisp123> Equill: I actually don't mind it at all :-) What does suck is Microsoft's closed APIs so its very difficult to do anything significant programmatically outside of VBA
[21:38:29] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[21:38:50] <Equill> lisp123win: that was a pretty hostile design decision, but I'll spare you my grumbling about what they were like pre-Satya Nadella :)
[21:38:50] <sveit_> Bike: thanks, I understand the default behaviour better now. Is there a way to modify it in this case? :) of course I am also interested more generally if I can let MOP know some special precedence of metaclasses in special cases
[21:39:51] <lisp123> Equill: We are getting off topic, but its not much better these days. Today I tried renaming a file, but that feature is only available if I save on One Drive and not locally
[21:40:46] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[21:41:14] <Equill> lisp123win: dang. And yes, we're way off-topic now.
[21:41:30] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[21:41:37] <phoe> #lispcafe might welcome this discussion
[21:41:38] <Bike> sveit_: again, the usual procedure is that the system figures out the metaclass based on :metaclass or the default, and then makes an instance of it, passing in the specified list of direct superclasses. you're talking about doing it in the opposite order, and there's no way for the system to understand that it should do something different with the metaclass when it does that before dealing with the
[21:41:41] * phoe disappears again
[21:41:44] <Bike> superclasses.
[21:41:53] <Bike> sveit_: easy way out is to define a macro that does defclass with a :metaclass specified for you.
[21:42:12] *** Joins: brandflake11 (~user@2607:b400:26:0:4380:5e92:2f20:c218)
[21:43:11] <jackdaniel> (defmacro define-class (name super &rest args) `(defclass ,name ,super ,@args (:metaclass ,(class-name (class-of (find-class (first super)))))))
[21:48:33] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:18e:85f:67dd:e924) (Remote host closed the connection)
[21:50:19] *** Quits: VincentVega (~user@212.97.1.105) (Quit: ERC (IRC client for Emacs 27.2))
[21:51:41] <pl> lisp123: have you tried MSOffice OLE Automation APIs?
[21:52:14] <pl> There was even in older days a lisper here who used ECL to build commercial, custom Excel extensions with those APIs
[21:56:04] <sveit_> Bike: i would have guessed there would be a more "CLOSY" way of doing it by specializing initialize-instance with an :around method or something of the sort.
[21:57:49] *** Joins: VincentVega (~user@212.97.1.105)
[21:58:40] <jackdaniel> defclass expands to ensure-class that calls ensure-class-using-class
[21:58:56] <Bike> sveit_: but like, what would you be initializing? the new class. and in order to make the new class, you need to know its class, i.e. the metaclass.
[21:58:58] <jackdaniel> you could specialize the latter
[21:59:42] <jackdaniel> and check for the key metaclass, if not supplied then you may change the default value
[21:59:45] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[21:59:56] *** Quits: Equill (~Equill@154.red-80-39-174.dynamicip.rima-tde.net) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[22:00:11] <jackdaniel> that said you'd need to specialize on something, and as bike says, the class is already a metaobject (or nil)
[22:00:51] <jackdaniel> when it is nil then you can't really specialize, when it is /something/ then what you are doing is redefining the class, so that's not a good way of doing things
[22:03:57] *** Quits: brandflake11 (~user@2607:b400:26:0:4380:5e92:2f20:c218) (Ping timeout: 240 seconds)
[22:07:54] *** Joins: victor (uid208353@user/victor)
[22:08:26] <sveit_> I see, thanks for the explanation. that's too bad, it seems a bit inelegant from the design perspective (surely /sometimes/ it makes sense to inherit the metaclass, and from my perspective it seems actually that if one is inheriting from some non-standard metaclass almost always you want to either have the same or a child metaclass of at least one of the parents)
[22:09:01] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10eb:9295:449a:bca0:c3c9:f532) (Ping timeout: 240 seconds)
[22:09:17] *** Joins: brandflake11 (~user@2607:b400:26:0:4380:5e92:2f20:c218)
[22:13:57] *** Quits: brandflake11 (~user@2607:b400:26:0:4380:5e92:2f20:c218) (Ping timeout: 240 seconds)
[22:14:30] *** Joins: Oladon (~olad@98.43.81.226)
[22:16:18] *** Joins: pjb (~pjb@user/pjb)
[22:17:20] *** Quits: miique_ (~miique@181.46.139.166) (Ping timeout: 256 seconds)
[22:17:44] *** Joins: miique (~miique@181.46.139.166)
[22:20:01] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[22:26:57] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Ping timeout: 276 seconds)
[22:27:40] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[22:29:41] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10eb:9295:449a:bca0:c3c9:f532)
[22:30:35] *** Joins: miique_ (~miique@181.46.139.166)
[22:32:37] *** Quits: miique (~miique@181.46.139.166) (Ping timeout: 240 seconds)
[22:34:15] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[22:34:46] *** Quits: treflip (~user@user/treflip) (Quit: ERC (IRC client for Emacs 27.2))
[22:36:39] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[22:38:24] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[22:43:02] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10eb:9295:449a:bca0:c3c9:f532) (Ping timeout: 240 seconds)
[22:43:05] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:46:11] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-198.dsl.bell.ca)
[22:51:25] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-198.dsl.bell.ca) (Ping timeout: 240 seconds)
[22:53:38] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[22:54:22] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[22:55:07] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[22:55:17] *** Joins: miique (~miique@181.46.139.166)
[22:55:18] *** Quits: miique_ (~miique@181.46.139.166) (Ping timeout: 256 seconds)
[22:57:21] *** Joins: theothornhill (~user@2a01:799:159d:aa00:f55e:93c1:18c0:6811)
[23:00:13] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:00:45] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-43-67-70-144-25.dsl.bell.ca)
[23:02:53] *** Quits: theothornhill (~user@2a01:799:159d:aa00:f55e:93c1:18c0:6811) (Remote host closed the connection)
[23:04:47] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[23:06:25] *** Joins: theothornhill (~user@2a01:799:159d:aa00:f55e:93c1:18c0:6811)
[23:07:12] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[23:08:22] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[23:11:09] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[23:12:25] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[23:19:19] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[23:19:43] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[23:22:23] *** Joins: morganw (~user@80.225.24.132)
[23:30:56] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[23:31:16] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[23:34:31] *** Joins: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi)
[23:36:25] *** Quits: cage (~cage@dynamic-adsl-84-221-50-16.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:39:24] *** Joins: gaqwas (~john@dynamic-077-009-101-217.77.9.pool.telefonica.de)
[23:41:28] *** Quits: theothornhill (~user@2a01:799:159d:aa00:f55e:93c1:18c0:6811) (Remote host closed the connection)
[23:42:40] *** Quits: gaqwas (~john@dynamic-077-009-101-217.77.9.pool.telefonica.de) (Remote host closed the connection)
[23:48:07] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[23:51:30] *** Joins: theothornhill (~user@2a01:799:159d:aa00:6a66:e04c:d41f:79bd)
[23:52:18] *** Joins: Catie (~user@user/catie)
[23:52:33] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[23:52:39] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 250 seconds)
[23:52:53] *** Quits: VincentVega (~user@212.97.1.105) (Quit: ERC (IRC client for Emacs 27.2))
[23:53:14] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[23:57:15] *** Joins: VincentVega (~user@212.97.1.105)
[23:57:50] *** Quits: miique (~miique@181.46.139.166) (Read error: Connection reset by peer)
[23:59:18] *** Joins: miique (~miique@181.46.139.166)
