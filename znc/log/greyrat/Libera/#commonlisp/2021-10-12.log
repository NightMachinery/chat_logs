[00:09:55] *** Quits: lottaquestions (~nick@2607:fa49:503e:3000:dae8:1099:d49d:bb8c) (Ping timeout: 250 seconds)
[00:11:57] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[00:15:01] *** Joins: lottaquestions (~nick@2607:fa49:503e:3000:150b:5b0b:e9fd:4323)
[00:26:37] <copec> White_Flame, what kind of organizational system would you have in mind? Storing the code in some sort of DB under declarations & scopes?
[00:36:23] <pjb> copec: this could still be files, for compatibility with current tools (git, asdf, quicklisp).
[00:36:33] <pjb> copec: but the point is that where to put the code would be decided by the system.
[00:37:34] <pjb> copec: the heuristic would start with 1 package = 1 file, plus some topological sorting of dependencies (compilation-time and run-time), so eval-when or separate dependent files would be generated automatically.
[00:43:10] *** Quits: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 260 seconds)
[00:44:11] *** edgar-rft is now known as all
[00:44:21] *** all is now known as Guest5617
[00:44:46] *** Guest5617 is now known as edgar-rft
[00:45:38] *** Joins: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net)
[00:50:48] *** Joins: lad (~lad@user/lad)
[00:52:18] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:53:26] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 245 seconds)
[00:53:37] *** Lord_of_Life_ is now known as Lord_of_Life
[00:55:31] *** Quits: pve (~pve@37-33-53-192.bb.dnainternet.fi) (Quit: leaving)
[00:57:11] *** Quits: lottaquestions (~nick@2607:fa49:503e:3000:150b:5b0b:e9fd:4323) (Ping timeout: 245 seconds)
[01:12:34] *** Joins: cjb (~cjb@user/cjb)
[01:13:44] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 265 seconds)
[01:24:05] *** Joins: skeemer (~skeemer@h-158-174-23-142.na.cust.bahnhof.se)
[01:27:28] <skeemer> hello all, i am reading SICP and fell in love with lispy languages... i know the book uses MIT-scheme but I found scheme implementations frustrating for their lack of ecosystem and libraries... which i find too fragmented... I was wondering how common lisp was in this concern...
[01:27:41] <skeemer> can anybody share his/her ideas?
[01:27:54] *** Quits: patrice (~patrice@user/patrice) (Quit: Leaving)
[01:29:26] <Lycurgus> there's also a #quicklisp but its author isn't currently there (but is here)
[01:29:32] <pjb> skeemer: yes, CL is better in this respect.
[01:29:58] <edgar-rft> skeemer: in contrast to Scheme, Common Lisp incudes the "standard library" in its specification.
[01:31:37] <mzan> skeemer: hi, I'm new here too. I used recently Racket, that it is a Scheme with a rather broad set of libraries. Now I'm trying CL. I'm using QuickLisp and it seems very very good.
[01:32:09] <mzan> (quicklisp is a package manager, not a version of CL)
[01:34:16] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[01:34:37] *** Joins: Alfr (~Alfr@user/alfr)
[01:34:57] <etimmons> skeemer: There are a lot of libraries for CL and they tend to be relatively stable since the core language is not continuously evolving.
[01:35:00] <skeemer> thanks Lycurgus for pointing me out all these channels
[01:35:11] <Lycurgus> np
[01:35:35] <skeemer> pjb, mzn what i liked about scheme was functional programming, is it something lisp does/allows?
[01:36:16] <mzan> I saw some CL packages with persistent data structures. So this can be a first step.
[01:36:26] <mzan> Lisp is inherently multi paradigm, so I hope o.
[01:36:29] <mzan> so
[01:36:58] <etimmons> However, there are some frustrations. There does seem to be a tendency for libraries to be reimplemented, resulting in a number of libraries that so similar things (this seems especially prevalent in anything web related)
[01:37:19] <etimmons> s/so/do/
[01:37:31] <skeemer> etimmons, i am ok with having a bunch of libraries... for doing the same thing and having the choice
[01:38:25] <Odin-> etimmons: The thing is, that's even _worse_ in some other languages.
[01:38:29] <Odin-> *cough*node*cough*
[01:39:13] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[01:39:17] <skeemer> how is the common lisp landscape in terms of modernity of the language, i mean is it a dying language or people is still developing libraries/modules and so on ?
[01:39:50] <random-nick> there is still plenty of development going on
[01:39:52] <etimmons> Additionally, I think there's a lack of documentation (no clue how the Schemes fair on this front). Quickdocs is nice, but IMO, extracted docstrings does not a user manual make.
[01:40:19] <random-nick> not even close to how much languages like python, c++ or javascript get tho
[01:41:05] <Odin-> skeemer: While a fair question, I suspect even COBOL is more 'alive' than people would expect in those terms.
[01:42:06] <Odin-> skeemer: And one of the problems I've had with modern JavaScript is that it's _so_ live that something that worked three months ago might not do so now, unless you've been keeping it working for the duration.
[01:42:41] <Odin-> It's a benchmark that can easily steer one wrong, is my point. :D
[01:43:00] <etimmons> Last, this is related to documentation, but I don't think there are any great channels for developers to communicate what has changed between versions of their systems.
[01:43:08] <etimmons>  A lot of projects don't have numbered versions, nor changelogs. And for those that do, we don't have a great way to disseminate that information when someone is installing or upgrading a dep
[01:43:13] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 265 seconds)
[01:44:08] <Odin-> Are there languages that solve that by means other than tooling and convention?
[01:44:11] <etimmons> But, other than that, in my experience CL systems tend to be high quality and typically don't arbitrarily break things on you, even when they're still being actively developed
[01:44:30] <skeemer> another thing that confuses me is that lisp is case insensitive when it comes to function/variables/constant
[01:44:53] <Odin-> skeemer: Case sensitive, but case folding by default.
[01:45:00] *** Joins: aeth (~aeth@user/aeth)
[01:45:09] <Odin-> skeemer: This is an unusual attribute, but shared with e.g. SQL.
[01:46:00] <etimmons> Odin-, skeemer : The problem with multiple approaches to the same thing is it's very frustrating when they do practically the same thing except for a handful of situations, but the developers just decided to not work together
[01:46:02] <Odin-> skeemer: The underlying system _is_ case sensitive, but unless you specifically mark that you don't want it to, everything gets uppercased.
[01:46:11] <mfiano> skeemer: CL is case sensitive to all of those
[01:46:13] <ulfvonbe`> it can be a little unusual when you try using mathematical symbols like δ and find that it gets printed as Δ ;-)
[01:47:36] <etimmons> One example that comes to mind is Drakma and Dexador. Dexador is so much easier to deploy on Windows because it uses built-in Windows libs, but I prefer Drakma everywhere else because its code is more readable and I've had fewer problems with it
[01:49:17] <etimmons> Odin-: I think tooling and convention is largely how other languages I've used solve it.
[01:50:37] <etimmons> I'm slowly working on CLPM (a QL alternative), and one thing I'm particularly proud of is that it uses conditions to tell you what systems its going to update and drops you in the debugger to let you have final approval/disapproval.
[01:51:41] <etimmons> I'd love to attach changelogs to those conditions so that it could say "I'm updating system A from 1.1 to 1.3, here are the changes as summarized by the project author" so you can make more informed decisions about upgrades and take advantage of new capabilities
[01:51:51] <etimmons> But it's turning out to be really hard to bootstrap that
[01:52:16] <Odin-> There's work on establishing that for CL. Honestly, the notion that most programs will predominantly consist of code that's part of other projects developed independently is newer than you'd think.
[01:54:26] <etimmons> Do you have any pointers to people working on that? All efforts I'm aware of that seem to be going that direction are either related to CLPM or dead (Qi, CLDM)
[01:54:56] <GreaseMonkey> "the notion that most programs will predominantly consist of code that's part of other projects developed independently is newer than you'd think" --> it's probably due to the popularity of making libraries non-copyleft open-source which tends to get exploited by a lot of companies
[01:55:53] <GreaseMonkey> on a more on-topic note, do you have a git repo or something for CLPM yet?
[01:56:11] <etimmons> <https://gitlab.common-lisp.net/clpm/clpm>
[01:56:17] <GreaseMonkey> awesome
[01:56:20] <skeemer> also how didfficult is it to do FFI in common lisp ?
[01:56:37] <skeemer> like to wrap libs written in C and/or other languages? is it something explained in practical common lisp ?
[01:56:48] <Odin-> In my experience, not.
[01:57:25] <etimmons> skeemer: I don't think PCL describes it. CFFI is the de facto, portable way of doing FFI and it's a pleasure to use for relatively small libs
[01:57:36] * Odin- has on more than one occasion used a CL REPL to experiment with a C library in preference to short C programs.
[01:57:56] <GreaseMonkey> if you want a good test library for CFFI, zlib is worth doing... unless the zlib wrapper in quicklisp is no longer hopelessly broken
[01:58:17] <Odin-> ... that said, big C libraries are usually a pain to work with from any language.
[01:58:25] <etimmons> For larger libs, you may want to consider evaluating things like CLAW or cl-autowrap to automatically generate the low level bindings for you and then slap a Lisp-ier interface on top
[01:59:47] *** Joins: john-a-carroll (~john-a-ca@host-92-28-178-6.as13285.net)
[02:00:36] <etimmons> But the standard feeling around these parts is that it's better to make a native CL solution if possible, rather than use FFI
[02:01:10] <etimmons> Easier to distribute and leaves you (and your users) less at the whim of the C library devs
[02:02:33] <Odin-> Also worth keeping in mind that there are CL implementations that are not based around the C runtime abstraction, such as ABCL.
[02:02:36] <skeemer> Odin-, do you have any good tutorial/blog article explaining how to do what you do? like experimenting with a C library with a lisp repl ?
[02:03:56] <Odin-> skeemer: I don't. I started doing it based on the material in the CFFI manual.
[02:05:37] <skeemer> ok thanks Odin-
[02:07:44] *** Quits: cjb (~cjb@user/cjb) ()
[02:07:55] *** Quits: gaqwas (~john@dynamic-077-004-048-156.77.4.pool.telefonica.de) (Ping timeout: 252 seconds)
[02:18:35] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Quit: ERC (IRC client for Emacs 27.1))
[02:21:20] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[02:22:33] <jcowan> etimmons: It is certainly possible to do crypto or TCP/IP in Lisp (indeed, Interlisp does), but doesn't strike me as a good idea in either case.
[02:23:59] <hayley> Crypto in C is only marginally easier - I read the OpenSSL developers read the assembler output for what C code they have to make sure it's still constant time.
[02:24:36] <hayley> See e.g. https://bearssl.org/constanttime.html
[02:33:12] *** Joins: aeth_ (~aeth@user/aeth)
[02:33:13] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[02:33:17] *** aeth_ is now known as aeth
[02:35:03] *** ulfvonbe` is now known as ulfvonbelow
[02:37:50] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 265 seconds)
[02:40:47] *** Quits: john-a-carroll (~john-a-ca@host-92-28-178-6.as13285.net) (Quit: Ping timeout (120 seconds))
[02:46:32] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[02:54:16] *** Quits: lad (~lad@user/lad) (Ping timeout: 245 seconds)
[02:56:25] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[02:58:31] *** Quits: waleee (~waleee@h-98-128-228-119.na.cust.bahnhof.se) (Ping timeout: 252 seconds)
[03:01:38] *** Joins: igemnace (~ian@user/igemnace)
[03:03:08] *** Quits: katya (~mariari@user/mariari) (Quit: WeeChat 3.2.1)
[03:05:49] *** Joins: mariari (~mariari@user/mariari)
[03:08:14] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[03:11:59] <jcowan> hayley: My point is that you shouldn't write your own crypto code in any language: you should use a widely deployed library.
[03:14:07] <jcowan> as the saying is, "unless you trust nobody and your crypto skills are second to none"
[03:14:21] <ulfvonbelow> I always thought "don't roll your own crypto" generally referred to devising cryptographic algorithms, not necessarily writing or porting an implementation
[03:16:16] <jcowan> That is certainly even worse.  But if you are concerned with covert timing channels, porting is also a Bad Thing.
[03:17:02] <ulfvonbelow> yeah, I imagine the GC probably gives out timing information like it's candy
[03:17:47] <hayley> Not so much the GC, provided you use machine integers.
[03:20:23] <mzan> Is there someone using CL, coming from Scheme? I'm using Racket in some semi-production utility, but I want to test CL.
[03:21:17] <ulfvonbelow> For sufficiently large probabilistic sets, existential and universal qualifiers become trivially true and false, respectively
[03:22:39] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 265 seconds)
[03:24:46] *** Quits: taiju (~taiju@m014013236064.v4.enabler.ne.jp) (Read error: Connection reset by peer)
[03:26:03] <mzan> For trivial enough questions, the set of answers will be empty :-)
[03:26:15] <mzan> trivial/boring
[03:26:39] *** Joins: taiju (~taiju@240b:253:ec40:2400:85f3:1e5:6cf:4cce)
[03:27:00] <ulfvonbelow> I have used scheme, and I am using CL, so I guess I fit that description
[03:27:43] *** Quits: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu) (Ping timeout: 252 seconds)
[03:27:54] *** Joins: Guest-liao (~Guest-lia@101.86.98.144)
[03:28:05] <mzan> ulfvonbelow: "used Scheme" ... "using CL", so you prefer CL. Many thanks :-)
[03:30:27] *** Quits: pieguy128_ (~pieguy128@bras-base-mtrlpq5031w-grc-57-65-92-163-194.dsl.bell.ca) (Ping timeout: 240 seconds)
[03:32:15] <ulfvonbelow> heh, I'd say they both have their charm, but I do like the lack of opinion of CL, the gradual typing system, the simplicity of writing macros, and the fact that the standard designers thought of just about everything possible (want to specialize your data structure that requires an integer serialization to hold characters, but don't know how high a char-code can go? CHAR-CODE-LIMIT, built right into the standard!)
[03:34:34] *** Quits: Guest-liao (~Guest-lia@101.86.98.144) (Quit: Ping timeout (120 seconds))
[03:34:53] <mzan> I tried Typed Racket, and it seems very good in this regard. My first impression with CL and SBCL it is that it is all more professional and industrial grade.
[03:34:53] *** Joins: Guest-liao (~Guest-lia@101.86.98.144)
[03:39:22] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca)
[03:41:20] *** Joins: asarch (~asarch@2806:10ae:7:d358:cc4d:ac7:7368:6d8b)
[03:57:46] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 260 seconds)
[04:00:47] *** Joins: selwyn (~selwyn@user/selwyn)
[04:26:00] *** Quits: Guest-liao (~Guest-lia@101.86.98.144) (Quit: Client closed)
[04:31:32] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[04:43:14] *** Quits: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net) (Remote host closed the connection)
[04:52:58] <hayley> Does anyone know where the Intel intrinsic guide was moved to? It's not at <https://software.intel.com/sites/landingpage/IntrinsicsGuide/> and the search tool isn't really helping.
[04:53:39] <hayley> (It is for Lisp code, not that anyone cares, but I need to check how the instructions work. And I don't know where else you ask a question like that.)
[05:04:06] *** Quits: brettgilio (~brettgili@x-node.gq) (Read error: Connection reset by peer)
[05:04:10] *** Quits: jsatk (sid304796@helmsley.irccloud.com) (Ping timeout: 260 seconds)
[05:04:10] *** Quits: iisi (sid19824@hampstead.irccloud.com) (Ping timeout: 260 seconds)
[05:04:21] *** Joins: iisi (sid19824@id-19824.hampstead.irccloud.com)
[05:04:27] *** Joins: brettgilio (~brettgili@x-node.gq)
[05:05:07] *** Joins: jsatk (sid304796@id-304796.helmsley.irccloud.com)
[05:05:20] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (Ping timeout: 260 seconds)
[05:06:03] *** Joins: rdrg109 (~rdrg109@51.195.232.80)
[05:15:14] *** Quits: taiju (~taiju@240b:253:ec40:2400:85f3:1e5:6cf:4cce) (Ping timeout: 260 seconds)
[05:28:10] *** Quits: jealousmonk (~user@2804:431:e7c4:7e2f:f785:531d:f45d:57b8) (Ping timeout: 252 seconds)
[05:32:15] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[05:39:27] *** Joins: taiju (~taiju@240b:253:ec40:2400:85f3:1e5:6cf:4cce)
[05:55:04] *** Joins: prxq (~quassel@x4db4ce0a.dyn.telefonica.de)
[05:55:08] *** Quits: prxq_ (~quassel@dynamic-077-012-193-044.77.12.pool.telefonica.de) (Ping timeout: 268 seconds)
[05:55:31] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Read error: No route to host)
[06:20:13] <White_Flame> copec: files could be brought together arbitrarily, you could have your own potentially overlapping groupings of views of related toplevel forms, you could have some things (or just their docstrings) always in view for reference, etc
[06:20:18] <White_Flame> s/files/functions/
[06:20:49] <White_Flame> the model of each having a fixed place in a linear file and only a file-based view is limiting and fundamentally disorganized
[06:21:27] <White_Flame> and yes, the actual storage doesn't have to match what's onscreen at all in terms of how it composes into a saved artifact
[06:21:56] <White_Flame> it's similar to not having to manually deal with the b-tree structures in your database when you're just grabbing rows or browsing tables
[06:22:21] <White_Flame> the file's specific format & on-disk layout should just be a hidden implementation detail
[06:22:57] <White_Flame> however, CL would have to change, as its toplevel forms are not necessarily unordered declarations, but ordered mutations to an image or compilation unit state
[06:31:50] <beach> Good morning everyone!
[06:36:34] <White_Flame> y
[06:36:35] <White_Flame> y0
[06:52:36] *** Quits: semz (~none@user/semz) (Ping timeout: 245 seconds)
[07:06:17] *** Joins: semz (~none@user/semz)
[07:11:11] *** Quits: opcode (~nathan@user/opcode) (Quit: WeeChat 3.3)
[07:17:00] *** Joins: opcode (~nathan@user/opcode)
[07:17:01] *** Joins: skeemer__ (~skeemer@h-158-174-23-142.NA.cust.bahnhof.se)
[07:17:01] *** Quits: skeemer (~skeemer@h-158-174-23-142.na.cust.bahnhof.se) (Remote host closed the connection)
[07:33:17] *** Joins: jealousmonk (~user@2804:431:e7c5:3f2:5f6e:d4b3:6e97:d2df)
[07:34:50] *** Quits: jealousmonk (~user@2804:431:e7c5:3f2:5f6e:d4b3:6e97:d2df) (Client Quit)
[07:34:51] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[07:52:21] *** Quits: srhm (~srhm@user/srhm) (Ping timeout: 265 seconds)
[07:58:17] *** Quits: taiju (~taiju@240b:253:ec40:2400:85f3:1e5:6cf:4cce) (Ping timeout: 265 seconds)
[08:00:24] *** Joins: Guest-liao (~Guest-lia@101.86.98.144)
[08:31:24] *** Joins: taiju (~taiju@240b:253:ec40:2400:85f3:1e5:6cf:4cce)
[08:32:36] *** Quits: ulfvonbelow (~user@2604:cb00:32b:af00:ec5c:e4b6:22d9:7247) (Remote host closed the connection)
[08:32:44] *** Joins: ulfvonbelow (~user@2604:cb00:32b:af00::e68)
[09:04:22] *** Quits: ulfvonbelow (~user@2604:cb00:32b:af00::e68) (Ping timeout: 260 seconds)
[09:06:46] *** Joins: ulfvonbelow (~user@h17.43.88.75.dynamic.ip.windstream.net)
[09:46:49] *** Quits: frgo (~frgo@p548a3042.dip0.t-ipconnect.de) (Remote host closed the connection)
[09:50:28] *** Quits: asarch (~asarch@2806:10ae:7:d358:cc4d:ac7:7368:6d8b) (Quit: Leaving)
[09:50:34] *** Quits: taiju (~taiju@240b:253:ec40:2400:85f3:1e5:6cf:4cce) (Ping timeout: 260 seconds)
[09:52:54] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 260 seconds)
[09:58:16] *** Joins: gaqwas (~john@dynamic-077-009-026-023.77.9.pool.telefonica.de)
[10:04:38] *** Quits: aeth (~aeth@user/aeth) (*.net *.split)
[10:04:38] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (*.net *.split)
[10:04:38] *** Quits: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net) (*.net *.split)
[10:04:38] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (*.net *.split)
[10:04:39] *** Quits: sm2n (~sm2n@user/sm2n) (*.net *.split)
[10:04:39] *** Quits: luna-is-here (~quassel@ip-95-223-59-100.hsi16.unitymediagroup.de) (*.net *.split)
[10:04:39] *** Quits: jcowan (sid325434@ilkley.irccloud.com) (*.net *.split)
[10:04:39] *** Quits: mzan (~quassel@mail.asterisell.com) (*.net *.split)
[10:04:39] *** Quits: borodust (~irc@user/borodust) (*.net *.split)
[10:04:39] *** Quits: mingus (~jan-magnu@ti0135a400-1977.bb.online.no) (*.net *.split)
[10:04:39] *** Quits: samebchase (~thelounge@51.15.68.182) (*.net *.split)
[10:06:27] *** Joins: igemnace (~ian@user/igemnace)
[10:07:27] *** Joins: snits (~quassel@ip98-179-76-75.ph.ph.cox.net)
[10:07:41] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 265 seconds)
[10:20:05] *** Joins: pve (~pve@188-67-215-13.bb.dnainternet.fi)
[10:20:20] <pjb> About cryptography, C compilers can also perform optimizations that could be counter-productive to the security of the cryptographic system. Even writing it in assembler is not a guarantee, since the processor itself may have optimization features or other.  It may be difficult to find in a processor, instructions that wouldn't leak some RF or some power usage depending on the data being processed.
[10:20:58] <pjb> That said, those cryptographic system requirements are not something that can be dealt with at the language level, but at the implementation level.
[10:21:37] <pjb> It is therefore quite possible to design an implementation with an option to generate code that would be adequate to implement cryptgraphic systems.
[10:22:42] <pjb> (declaim (declaration tempest-protection))  (defun encrypt (message key) (declare tempest-protection) …)
[10:26:26] *** Joins: aeth (~aeth@user/aeth)
[10:26:26] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[10:26:26] *** Joins: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net)
[10:26:26] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[10:26:26] *** Joins: mzan (~quassel@mail.asterisell.com)
[10:26:26] *** Joins: sm2n (~sm2n@user/sm2n)
[10:26:26] *** Joins: luna-is-here (~quassel@ip-95-223-59-100.hsi16.unitymediagroup.de)
[10:26:26] *** Joins: jcowan (sid325434@ilkley.irccloud.com)
[10:26:26] *** Joins: borodust (~irc@user/borodust)
[10:26:26] *** Joins: mingus (~jan-magnu@ti0135a400-1977.bb.online.no)
[10:26:26] *** Joins: samebchase (~thelounge@51.15.68.182)
[10:28:45] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Max SendQ exceeded)
[10:29:26] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[10:36:00] <madnificent> pjb: with infinite research budget, introducing unexpected changes into the layers of abstraction sounds like a great way to create issues which are nearly impossible to catch during a code review.  one could even introduce them on another layer after the code has been reviewed.
[10:37:02] <madnificent> I strongly suspect our reality is much simpler and that many issues found in systems are far simpler than incompatibilities between the layers of abstraction but it would be a cool thing to pursue.
[10:38:14] *** Joins: frgo (~frgo@2a01:1e8:c003:9306:79de:9da9:a990:eb00)
[10:38:54] *** Joins: makomo (~makomo@user/makomo)
[10:42:15] *** Joins: taiju (~taiju@240b:253:ec40:2400:85f3:1e5:6cf:4cce)
[10:42:46] *** Quits: frgo (~frgo@2a01:1e8:c003:9306:79de:9da9:a990:eb00) (Ping timeout: 252 seconds)
[10:43:39] *** Joins: frgo (~frgo@195.154.189.212)
[10:43:43] *** Joins: cranium (~cranium@user/cranium)
[10:47:16] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[10:47:43] <jackdaniel> madnificent: but this comes even without such unobvious things like encryption. you assume that when you write a conforming program you are safe, but implementations have bugs and even interpret differently some parts; there may be changes inside the compiler you did not anticipate
[10:48:16] <pjb> madnificent: well, implementing an algorithm can be validated.  In cryptography, the problem is that it's not sufficient to have a correct algorithm. The code must be written so as to minimize physical and logical side effects induced by the execution of the correct code, that could lead to leaking information about the keys or other cryptographic elements.
[10:49:09] <pjb> Already, running on a VM is bad, since the VM can see what's occuring.  But there are solutions: white-box cryptography, where the key are encrypted, and kept encrypted when used.
[10:49:53] <pjb> But other statistical properties about the keys could be detected from temperature, power, speed variations (physical phenomenon outside of the direct influence of the algorithm and code).
[10:50:40] *** Joins: Cymew (~ante@h-158-174-56-13.a137.corp.bahnhof.se)
[10:50:47] <pjb> Perhaps (setf x (* 2 x)) produces more heat when x is full of 1s instead of full of 0s?  Perhaps (setf x (ash x 1)) produces the same heat in both cases?
[10:51:11] <pjb> Depends on the compiler and hardware.  Algorithmically, it's the same. Both codes are correct.
[10:51:56] <pjb> What I'm saying is that it's better to have a compiler option to let it ensure that the code generated from both forms minimize the heat produced and execution speed variation.
[10:52:12] <pjb> Actually, that it's the only way to ensure that the cryptographic system requirements are met.
[10:52:35] <pjb> You must include in the requirement fulfillment the specific compiler and hardware, to validate the cryptographic system.
[10:53:19] <pjb> So, write all the cryptographic code you want, it's not up to the programmer to ensure validity of the final cryptographic system, but up to the integrator who will select the compiler and compiler options, and the hardware.
[10:54:28] *** Joins: cosimone (~user@151.14.38.15)
[10:54:40] <pjb> Of course, the designers of cryptographic algorithms can help by avoiding things like "if bit 0 of x is 1 then do-something-taking-little-time-and-energy else do-somethign-taking-a-lot-of-time-and-energy".
[10:55:05] <pjb> But as programmers, as long as we implement the algorithms, we've done our job.
[10:55:22] *** Quits: mingus (~jan-magnu@ti0135a400-1977.bb.online.no) (Ping timeout: 252 seconds)
[11:04:02] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[11:04:03] *** Quits: Cymew (~ante@h-158-174-56-13.a137.corp.bahnhof.se) (Remote host closed the connection)
[11:06:26] *** Quits: frgo (~frgo@195.154.189.212) (Remote host closed the connection)
[11:08:26] *** Quits: gaqwas (~john@dynamic-077-009-026-023.77.9.pool.telefonica.de) (Ping timeout: 245 seconds)
[11:33:29] *** Quits: Guest-liao (~Guest-lia@101.86.98.144) (Ping timeout: 256 seconds)
[11:35:06] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 245 seconds)
[11:35:24] *** Joins: Guest-liao (~Guest-lia@101.86.98.144)
[11:37:03] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:38:15] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:43:13] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 252 seconds)
[11:47:23] *** Quits: Guest-liao (~Guest-lia@101.86.98.144) (Quit: Client closed)
[11:51:47] *** Joins: notzmv (~zmv@user/notzmv)
[11:52:41] *** Joins: selwyn (~selwyn@user/selwyn)
[11:55:55] *** Quits: taiju (~taiju@240b:253:ec40:2400:85f3:1e5:6cf:4cce) (Ping timeout: 252 seconds)
[11:58:10] *** Joins: cosimone` (~user@5.170.240.249)
[11:59:43] *** Quits: cosimone (~user@151.14.38.15) (Ping timeout: 252 seconds)
[12:04:15] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[12:05:32] *** Joins: heisig (~heisig@p508b531b.dip0.t-ipconnect.de)
[12:07:21] <JeromeLon> Are there any active projects to make a new lisp IDE or to make alternative/radical improvements to emacs/slime? Code or variable extraction, inlining, renaming, real-time warnings, smarter completion, are all taken for granted nowadays, but are not available when using emacs. Presumable these all require the editor to have a deeper understanding of what each character means, which in turns
[12:07:23] <JeromeLon> would requires swank to expose a knowledge that goes beyond its capabilities.
[12:08:41] <beach> Yes, we are working on an IDE but progress is slow.
[12:08:58] <beach> ... mainly be cause we are both busy with other things.
[12:09:17] <JeromeLon> anything you can share about this project?
[12:09:40] <beach> Sure...
[12:10:50] <beach> This paper http://metamodular.com/incremental-parsing.pdf shows how we use READ (the Eclector version of it) to incrementally parse the buffer contents.
[12:11:35] <beach> Then the plan is to run the code through the first phase(s) of a compiler-like think to determine determine the role of each expression.
[12:12:18] <beach> From that result, we compute indentation (which I kind of know how to do, but that I haven't worked out the mechanics of yet) and highlighting information.
[12:12:55] *** Quits: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 252 seconds)
[12:13:14] <beach> Then there is the debugger part.  This is what I think we should do: http://metamodular.com/SICL/sicl-debugging.pdf
[12:13:32] <beach> But it requires support from the Common Lisp implementation.
[12:13:50] <beach> The rest is fairly straightforward.
[12:14:03] <JeromeLon> thanks, I'll read all this
[12:14:52] <beach> Let me know if you have any questions.
[12:18:28] *** Joins: cosimone (~user@151.14.38.15)
[12:20:28] *** Quits: fengshaun (~fengshaun@S010680615f0c2c0a.cg.shawcable.net) (Quit: bibi!)
[12:20:50] *** Joins: fengshaun (~fengshaun@S010680615f0c2c0a.cg.shawcable.net)
[12:21:42] *** Quits: cosimone` (~user@5.170.240.249) (Ping timeout: 265 seconds)
[12:21:44] *** Joins: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net)
[12:25:05] *** Joins: makomo (~makomo@user/makomo)
[12:26:49] *** Joins: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu)
[12:34:07] *** Quits: mmk2410 (~mmk2410@user/mmk2410) (Quit: ZNC - https://znc.in)
[12:34:58] *** Joins: mmk2410 (~mmk2410@user/mmk2410)
[12:38:31] *** Joins: taiju (~taiju@240b:253:ec40:2400:85f3:1e5:6cf:4cce)
[12:40:25] *** Quits: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 265 seconds)
[12:42:13] *** Joins: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net)
[12:43:22] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[12:47:07] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:998b:7cbb:625e:1581)
[12:48:37] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[12:48:43] *** Joins: hendursaga (~weechat@user/hendursaga)
[12:53:29] *** Quits: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 264 seconds)
[12:53:39] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[12:53:54] *** Joins: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net)
[12:54:24] *** Joins: frgo (~frgo@195.154.189.212)
[12:56:48] <beach> pjb: Wow, MIT LOOP is worse than what you pointed out.  This is SBCL: (loop for x in '(a b c) append (cons x 'foo)) => (a b c . foo)
[12:57:23] <beach> and (loop for i from 1 to 2 if (oddp i) append (cons 'a 'b) else collect 'c) => (a c)
[13:01:39] *** Quits: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 268 seconds)
[13:04:23] *** Joins: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net)
[13:07:55] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 252 seconds)
[13:09:16] *** Quits: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 268 seconds)
[13:10:24] <beach> pjb: (defparameter *l* '(c d)) (tailp *l* (sicl-loop:loop for l in (list '(a b) *l*) append l)) => T
[13:10:35] <beach> pjb: (defparameter *l* '(c d)) (tailp *l* (cl:loop for l in (list '(a b) *l*) append l)) => NIL
[13:11:05] *** Joins: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net)
[13:11:33] *** Joins: Inline (~Inline@2a02:908:1252:7a80:89dc:6a58:9f2a:ff3d)
[13:12:26] <beach> pjb: (sicl-loop:loop for x in '(a b c) append (cons x 'foo)) => type-error
[13:12:40] <beach> pjb: (cl:loop for x in '(a b c) append (cons x 'foo)) => (a b c . foo)
[13:13:20] *** Joins: ahc (~ahc@121.98.229.241)
[13:18:51] *** Quits: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 245 seconds)
[13:19:27] <beach> In https://github.com/robert-strandh/SICL/tree/master/Code/Loop there are three files collect-clause.lisp, append-clause.lisp, and nconc-clause.lisp where I changed the methods on BODY-FORM specalized to COLLECT-FORM-CLAUSE, APPEND-FORM-CLAUSE, and NCONC-FORM-CLAUSE respectively.  But there is significant duplication, and I did not change the methods specialized to the -IT- or -INTO- clauses.  If someone feels like fixing the existin
[13:19:27] <beach> duplication and changing the remaining methods, feel free.
[13:19:37] <beach> Then run the test suite.
[13:20:03] <beach> Also, ANSI tests should be added for the issues I indicated above.
[13:21:44] *** Joins: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net)
[13:22:10] <beach> That someone could also extract the entire LOOP code to a separate repository.  Then we would have a LOOP library that is much more conforming that what most implementations currently have.
[13:24:14] <beach> Oops, forgot to push the update.
[13:25:41] <beach> There.
[13:30:40] <jackdaniel> doesn't part about append fall into "undefined behavior"? the loop append is specified to exact as the function append and the latter says that arguments (except for the last one) must be proper lists, but doesn't mention what happens when they are not
[13:31:13] <jackdaniel> in contrary to tailp which mentions the exceptional situation
[13:31:32] <jackdaniel> s/exact/behave/
[13:32:11] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 245 seconds)
[13:33:46] *** Quits: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 252 seconds)
[13:34:08] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[13:34:09] <beach> You might be right.  Let me check the dictionary entry for APPEND.
[13:34:17] *** Joins: molson__ (~molson@2001-48F8-704A-CA1-0-0-75F-101F-static.midco.net)
[13:34:30] *** Joins: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net)
[13:34:49] <beach> Yes, you are right.
[13:35:15] <beach> So SICL LOOP conforms to WSCL as well as to the Common Lisp standard. :)
[13:35:55] <beach> On the other hand, SBCL APPEND signals an error, and LOOP is supposed to behave as if APPEND were used.
[13:36:58] <beach> "... as if they were arguments to the function APPEND."
[13:37:11] *** Quits: molson_ (~molson@2001-48F8-704A-CA1-0-0-75F-1019-static.midco.net) (Ping timeout: 245 seconds)
[13:37:42] *** Quits: ahc (~ahc@121.98.229.241) (Quit: Client closed)
[13:37:46] <jackdaniel> I'd interpret that: so if they are not proper lists, then undefined consequences follow - expecting uniform undefined consequences would be quite a requirement ;)
[13:38:29] <beach> It is not terribly important.  What is important is that it is better to have a stricter LOOP version than a sloppier one.
[13:38:52] <beach> But, yes, your interpretation is valid.
[13:40:09] <beach> Also, I encourage people to replace the native version of LOOP by the SICL one, because it is more strict.  Xach has been known to do this to check whether systems in Quicklisp are conforming.
[13:40:53] <beach> And I encourage maintainers of Common Lisp systems to load SICL LOOP as a replacement for the native one, unless the native one is as conforming of course.
[13:47:58] <beach> Anyway, time for a lunch break.  I'll screen all the candidates when I get back, and make a long list sorted by experience, availability, and attitude.
[13:49:53] *** Joins: gaqwas (~john@dynamic-077-009-026-023.77.9.pool.telefonica.de)
[13:49:55] *** Quits: frgo (~frgo@195.154.189.212) (Remote host closed the connection)
[13:50:17] <Gnuxie> candidates?
[13:50:42] *** Joins: selwyn_ (~selwyn@user/selwyn)
[13:51:39] <jackdaniel> people who will replace loop of the implementation of their choosing and maintainers who will replace loop in the implementation
[13:51:47] <jackdaniel> (I think)
[13:53:56] *** Joins: makomo (~makomo@user/makomo)
[13:54:10] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 260 seconds)
[13:54:16] <beach> Yes, s/candidates/applicants/
[13:55:51] *** Quits: gaqwas (~john@dynamic-077-009-026-023.77.9.pool.telefonica.de) (Ping timeout: 250 seconds)
[13:57:11] *** Quits: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 245 seconds)
[13:59:18] *** Quits: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu) (Ping timeout: 260 seconds)
[13:59:52] *** Joins: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net)
[14:00:42] *** Joins: theBlack1ragon (~dragon@fvwm/admin)
[14:00:52] *** Quits: theBlack1ragon (~dragon@fvwm/admin) (Client Quit)
[14:15:31] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 245 seconds)
[14:15:36] *** Joins: selwyn__ (~selwyn@user/selwyn)
[14:19:22] *** Quits: selwyn_ (~selwyn@user/selwyn) (Ping timeout: 260 seconds)
[14:21:03] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[14:23:55] *** Joins: random-nick (~random-ni@87.116.183.117)
[14:25:28] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[14:25:37] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[14:29:59] *** Joins: Guest-liao (~Guest-lia@101.86.98.144)
[14:32:26] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 260 seconds)
[14:32:51] *** Joins: amb007 (~a_bakic@218.148.22.93.rev.sfr.net)
[14:32:54] <_death> beach: nice, I tried testing one of my systems with sicl-loop, and it found a nonstandard loop form, the usual (loop while ... for ...) which again filled me with knee-jerk anti-loopism and made me replace it with DO
[14:37:15] <hayley> What's wrong with good ol' (loop for nil = (when blah (return)) for x = y ...)
[14:40:05] <_death> tagbodies, tagbodies everywhere
[14:40:15] <skeemer__> does common lisp support having tests within the same file of the implementation such as racket ?
[14:40:52] <jdz> skeemer__: Tests are code, and yes, code can be put with other code.
[14:41:55] <jdz> Another question is whether one should.
[14:42:32] *** Joins: mingus (~jan-magnu@ti0135a400-1638.bb.online.no)
[14:44:10] *** Joins: rogersm_ (~rogersm@90.166.177.48)
[14:47:23] <ecraven> skeemer__: it all depends on your test framework / library
[14:47:45] <skeemer__> ecraven, what test framework od you suggest? what is the most used one?
[14:48:11] *** Joins: NeoCron (~NeoCron@p200300c4cf195d00df9b3d9f9a455325.dip0.t-ipconnect.de)
[14:48:18] <ecraven> unfortunately, I have no idea ;)
[14:48:56] <hayley> I like Parachute.
[14:49:08] <jackdaniel> recently there was a lenghy comparison blogpost about test frameworks
[14:49:44] <jackdaniel> the most popular seems to be fiveam, then many people hold dear lift and/or parachute
[14:50:13] <jackdaniel> skeemer__: https://sabracrolleton.github.io/testing-framework
[14:50:30] <hayley> I used to use fiveam, but then ported to Parachute. Can't remember why though.
[14:53:34] <skeemer__> what do users of common lisp think about clojure? what are the drawbacks of it?
[14:53:39] <skeemer__> wrt common lisp
[14:54:00] <mfiano> Too much hand holding. Not enough "stay out of my way and let me code how I want".
[14:54:09] <hayley> I like objects.
[14:54:39] *** Quits: Guest-liao (~Guest-lia@101.86.98.144) (Ping timeout: 256 seconds)
[14:55:11] *** Joins: frgo (~frgo@p200300deef0cee00c1b0e1d7086384a7.dip0.t-ipconnect.de)
[14:55:44] <jackdaniel> Clojure was designed by a person with specific needs and opinions while Common Lisp standard is a result of trying to accomodate various needs of different parties
[14:55:46] <skeemer__> mfiano, hand holding for what?
[14:55:57] *** Joins: Guest-liao (~Guest-lia@101.86.98.144)
[14:56:11] <mfiano> Pretty much everything. It is a very opinionated language.
[14:56:16] <hayley> Cliff Click once rated using STM for side effects a "double unsmiley", though I think I might have some use for it in CL code.
[14:56:20] <jackdaniel> that leads to a situation that clojure as a language promotes "the right way" (whatever that means for the language) while common lisp as a language supports you in implementing whatever abstraction you like
[14:56:33] <jackdaniel> in the worst case scenario this whatever abstraction is a garbage :)
[14:57:14] <mfiano> I'm not a fan of "gimmick languages". Clojure is no exception.
[14:59:29] *** Quits: attila_lendvai_ (~alendvai@catv-213-222-131-28.catv.broadband.hu) (Quit: Leaving)
[14:59:34] *** Joins: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu)
[15:09:03] *** Joins: Tomte (~th@p200300db9f1fd800ecab8cb99dfb1c87.dip0.t-ipconnect.de)
[15:09:19] *** Quits: Tomte (~th@p200300db9f1fd800ecab8cb99dfb1c87.dip0.t-ipconnect.de) (Client Quit)
[15:09:35] *** Joins: Tomte (~th@p200300db9f1fd800ecab8cb99dfb1c87.dip0.t-ipconnect.de)
[15:16:13] <beach> _death: That's a strange reaction.
[15:16:17] *** Quits: amb007 (~a_bakic@218.148.22.93.rev.sfr.net) (Ping timeout: 264 seconds)
[15:17:14] *** Joins: amb007 (~a_bakic@27.197.204.77.rev.sfr.net)
[15:19:10] <hayley> Well, I used FOR NIL = ... in my least favourite module, which does something tricky with locks. Not that translating it to DO would help, but it might be a sign that something has been designed wrong.
[15:24:57] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[15:52:02] *** Quits: amb007 (~a_bakic@27.197.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[15:52:17] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:55:06] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[15:55:51] <hayley> Out of curiosity, has anyone considered modifying Ironclad to use the x86-64 extensions for SHA1 and SHA2 operations? I noticed that they have accelerated AES already, but I can't find much on hashing.
[15:56:14] *** Joins: Cymew (~ante@h-158-174-56-13.a137.corp.bahnhof.se)
[16:07:23] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:07:54] *** Quits: euandreh (~euandreh@191.181.59.160) (Ping timeout: 265 seconds)
[16:20:05] <yitzi> *no-defun-allowed*: I would find an accelerated SHA2 (including digests) in its own library very useful. I know they are talking about making Ironclad more modular.
[16:30:47] *** Joins: Bike (~Glossina@71.69.170.70)
[16:30:47] *** ChanServ sets mode: +o Bike
[16:32:35] <pjb> beach:  appending non-proper-lists seems correct; it's implementation dependent anyways. #+ccl (loop for x in '(a b c) append (cons x 'foo))  #| --> (a b c . foo) |#  (append '(a . b) '(c . foo)) #| ERROR: The value b is not of the expected type list. |#  but indeed, append signals an error.
[16:33:00] <pjb>  (loop for i from 1 to 2 if (oddp i) append (cons 'a 'b) else collect 'c) #| --> (a c) |#  (nconc (append '(a . b)) 'c) #| --> (a . c) |#
[16:33:36] <pjb> hmmm collect not nconc…   (append (append '(a . b)) (list 'c)) #| ERROR: The value b is not of the expected type list. |#
[16:34:18] <pjb> beach: congratulation for sicl-loop being conforming! :-)
[16:34:22] <beach> Yes, it is undefined behavior.
[16:34:27] <beach> Thank you!
[16:35:29] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Remote host closed the connection)
[16:35:41] *** Joins: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b)
[16:36:00] <pjb> beach: but still, I think that wscl should do something about it, because in the case where we append into a variable, at each step, the last element should not be copied (I would infer that intention from the specification); this would be quite impractical.
[16:36:37] <beach> I totally agree, which is why I made SICL LOOP do the right thing.
[16:36:39] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:ce7f:4e93:4cc4:1ccd)
[16:37:31] <beach> It wasn't very hard.  I just do a "lazy copying" of CONS cells.
[16:38:11] <beach> A suffix of the accumulated list that has been attached by APPEND is copied only when new stuff is attached.
[16:38:15] <beach> Very simple.
[16:39:07] <pjb> Yes, after all, just a matter of ordering in the loop body…
[16:39:29] <beach> Exactly.
[16:41:22] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[16:43:12] *** Joins: robin (~robin@user/terpri)
[16:45:42] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[16:45:45] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[16:49:37] <beach> I no longer accept applications from potential loop maintainers for the abstractions I suggested (because I implemented them myself).  But if someone wants to extract the entire module to a separate repository and work on it there, I am still interested.
[16:50:55] *** Quits: OlCe` (~user@lfbn-nic-1-565-28.w90-118.abo.wanadoo.fr) (Quit: ERC (IRC client for Emacs 27.1))
[16:51:08] *** Joins: OlCe (~user@lfbn-nic-1-565-28.w90-118.abo.wanadoo.fr)
[16:51:11] <beach> This is what the code for the APPEND clause looks like now: https://github.com/robert-strandh/SICL/blob/master/Code/Loop/append-clause.lisp
[16:51:36] <beach> The code for the NCONC and COLLECT clauses looks similar.
[16:55:27] *** Joins: xaotuk (~sasha@net224-33-245-109.mbb.telenor.rs)
[16:56:16] *** susam is now known as susam_
[16:56:25] *** susam_ is now known as susam
[17:19:21] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[17:30:23] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:ca92:d9c8:f6e8:70eb)
[17:33:01] *** Quits: Cymew (~ante@h-158-174-56-13.a137.corp.bahnhof.se) (Ping timeout: 252 seconds)
[17:34:40] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[17:36:26] *** Joins: aeth (~aeth@user/aeth)
[17:38:04] *** Joins: bauripalash (~bauripala@2401:4900:3829:d0e9:1:2:7b3d:518e)
[17:38:08] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[17:44:16] *** Quits: xaotuk (~sasha@net224-33-245-109.mbb.telenor.rs) (Ping timeout: 245 seconds)
[17:44:56] *** Joins: john-a-carroll (~john-a-ca@host-92-28-178-6.as13285.net)
[17:45:10] *** Quits: bauripalash (~bauripala@2401:4900:3829:d0e9:1:2:7b3d:518e) (Ping timeout: 260 seconds)
[17:49:29] *** Joins: knobo (~knobo@138.62.255.10)
[17:54:00] *** Quits: john-a-carroll (~john-a-ca@host-92-28-178-6.as13285.net) (Quit: Ping timeout (120 seconds))
[18:04:46] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:05:34] <lisp123> Did Franz make their CLIM / Allgero Serve libraries open source? https://github.com/franzinc/clim2 for example
[18:06:21] <beach> They did with CLIM.  In #clim they would know more.
[18:06:54] <beach> But McCLIM is a better CLIM implementation that theirs, I believe.
[18:07:04] <lisp123> I see
[18:07:17] <lisp123> I wonder how Allegro Serve compares vs Hunchentoot
[18:08:59] <lisp123> Hmmm "AllegroServe works on all versions of Allegro Common Lisp since 6.0." --> Guess it might not be portable
[18:15:59] <beach> That phrase does not imply what you said.
[18:16:33] <lisp123> No it doesn't
[18:21:42] <yitzi> AllegroServe is LGPL I believe.
[18:22:11] *** Quits: Guest-liao (~Guest-lia@101.86.98.144) (Quit: Client closed)
[18:22:20] *** Quits: cosimone (~user@151.14.38.15) (Remote host closed the connection)
[18:24:32] *** Quits: xsperry (~xs@user/xsperry) ()
[18:27:51] <lisp123> I see
[18:28:06] <lisp123> They seem to get a bad rap while LispWorks gets a good one
[18:28:36] <lisp123> (between the paid distributions of course)
[18:35:40] *** Joins: CptKirk (~CptKirk@70-57-27-195.hlrn.qwest.net)
[18:38:39] *** Joins: srhm (~srhm@user/srhm)
[18:43:45] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[18:44:10] *** Quits: knobo (~knobo@138.62.255.10) (Ping timeout: 256 seconds)
[18:48:05] *** Joins: srhm (~srhm@user/srhm)
[18:57:18] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[18:57:56] *** molson__ is now known as molson
[19:06:21] *** Joins: igemnace (~ian@user/igemnace)
[19:06:37] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[19:11:39] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[19:15:13] *** Quits: srhm (~srhm@user/srhm) (Ping timeout: 250 seconds)
[19:18:54] *** Joins: srhm (~srhm@user/srhm)
[19:32:44] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[19:36:13] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 252 seconds)
[19:36:14] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[19:38:20] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[19:39:04] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:43:40] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[19:43:52] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:46:08] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:f025:3836:ea6c:baba)
[19:46:47] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[19:46:47] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[19:46:56] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[19:51:41] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 265 seconds)
[19:51:58] *** Joins: amb007 (~a_bakic@43.197.204.77.rev.sfr.net)
[20:01:11] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[20:05:22] *** Quits: amb007 (~a_bakic@43.197.204.77.rev.sfr.net) (Ping timeout: 252 seconds)
[20:06:19] *** Joins: amb007 (~a_bakic@137.132.22.93.rev.sfr.net)
[20:12:47] <frgo> lisp123: I do use AllegroCL Enterprise Edition currently and have been using Lispworks in the past. As you may be aware, the value (i.e. usefulness, applicability, flexibility, a.s.o) depends on the actual use cases. Whatever someone else says about a *tool* (LW and ACL are not enduser apps) like these CL implementations, may be entirely biased. I do have use cases where only ACL fits.
[20:13:46] *** Joins: makomo (~makomo@user/makomo)
[20:14:28] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[20:14:46] *** Joins: makomo_ (~makomo@user/makomo)
[20:15:01] <pve> frgo: does the use case involve AllegroGraph?
[20:15:16] <frgo> Well, yes, it does.
[20:15:48] <pve> ok
[20:26:17] <lisp123> frgo: Thanks & Agree
[20:33:55] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[20:34:53] *** Quits: dstein64 (~dstein64@dannyadam.com) (Ping timeout: 264 seconds)
[20:35:03] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 265 seconds)
[20:35:04] <JeromeLon> sbcl newbie here. I can't get sbcl to step into a function call, it's as if any function call leaves the debugger. What am I missing?
[20:35:29] *** Joins: aeth (~aeth@user/aeth)
[20:35:35] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:ca92:d9c8:f6e8:70eb) (Ping timeout: 246 seconds)
[20:35:42] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (Ping timeout: 250 seconds)
[20:35:49] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:ca92:d9c8:f6e8:70eb)
[20:36:42] *** Joins: dstein64 (~dstein64@dannyadam.com)
[20:36:42] <JeromeLon> With the following:
[20:37:17] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[20:37:24] <JeromeLon> (declaim (optimize (speed 0) (space 0) (debug 3))) (defun f2 () (format t "hello~%")) (defun f1 () (break) (f2) (format t "a~%"))
[20:38:10] <lisp123> Seems to work
[20:38:22] <lisp123> (step (f1 3))
[20:38:46] <JeromeLon> I am getting to "Evaluating call: (F2) With arguments: [Condition of type STEP-FORM-CONDITION]", press s, and everything else runs without any debug step
[20:39:31] <lisp123> CS325-USER> (step (f1))
[20:39:31] <lisp123> hello
[20:39:31] <lisp123> a
[20:39:33] <lisp123> NIL
[20:40:11] *** Quits: makomo_ (~makomo@user/makomo) (Quit: WeeChat 3.2)
[20:40:17] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[20:40:20] *** Joins: makomo_ (~makomo@user/makomo)
[20:40:35] <lisp123> After immediately running it, I get "Evaluating call: (F1) With Arguments ...."
[20:40:36] *** Quits: amb007 (~a_bakic@137.132.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[20:40:48] <lisp123> Then I pressed 0 to [STEP-CONTINUE]
[20:40:49] *** Joins: amb007 (~a_bakic@137.132.22.93.rev.sfr.net)
[20:40:49] *** Quits: amb007 (~a_bakic@137.132.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[20:40:58] <JeromeLon> lisp123: precisely. I was expecting to be able to [S]tep into the (f2) expression call, then to [s]tep into the format call.
[20:41:02] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[20:41:38] <Bike> well, format probably wasn't compiled with stepping
[20:41:57] <JeromeLon> But as soon as I step into "(f2)" everything else runs in one go.
[20:42:23] <lisp123> JeromeLon: Okay, sorry I understand what you mean and get the same. See Bike's comments above I guess
[20:42:59] <Bike> also, with a constant format string, sbcl is probably going to not actually call format in the compiled code... i don't know if (debug 3) disables that
[20:43:22] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[20:44:09] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:f025:3836:ea6c:baba) (Remote host closed the connection)
[20:45:20] <JeromeLon> Bike: oh, right, so format is not a good one to experiment. I have a much bigger case that doesn't work, and was hoping to exhibit my issue with this minimal case using format. I'll come up with a better example and come back. Thanks!
[20:45:49] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 265 seconds)
[20:47:02] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[20:49:21] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Read error: Connection reset by peer)
[20:51:19] *** Joins: amb007 (~a_bakic@137.132.22.93.rev.sfr.net)
[20:51:19] *** Quits: amb007 (~a_bakic@137.132.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[20:51:41] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[20:55:28] <JeromeLon> Yes, that was it. A lot of stuff is optimized away despite (debug 3). Adding some (setq x (+ x 42)) everywhere makes everything work.
[21:10:05] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[21:11:10] <skeemer__> people is anybody here using SLIME while also using evil mode?
[21:11:21] <skeemer__> i can't understand how to navigate the history of the repl...
[21:12:53] <lisp123> skeemer__: I do but I'm not an advanced user
[21:13:17] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[21:13:19] <skeemer__> me neither lisp123
[21:13:27] <lisp123> skeemer__: This may help (add-to-list 'evil-emacs-state-modes 'eww-mode)
[21:13:51] <lisp123> If you can figure out which mode Evil is affecting you, you can set to revert to Emacs state
[21:13:52] *** Joins: hendursaga (~weechat@user/hendursaga)
[21:13:53] <lisp123> for that
[21:14:38] <lisp123> If you mean navigating via M-p and M-n, it seems to work well for me in normal mode
[21:14:40] <Arcsech> I use SLIME with evil but my solution is just: don't use the repl history so not super helpful 🤷
[21:15:03] <skeemer__> lisp123, ok i was missing the M-p M-n
[21:15:05] <skeemer__> thanks a lot
[21:15:27] <lisp123> Welcome :)
[21:15:32] <skeemer__> lisp123, although you said you are a beginner you solved my problem thanks
[21:15:39] <skeemer__> i am very excited with common lisp
[21:15:42] <skeemer__> seems a reasonable lisp
[21:16:30] <lisp123> Is your background Scheme or another Lisp?
[21:17:30] *** Joins: synbian (~user@45.182.92.125)
[21:17:35] <synbian> hello
[21:17:36] <lisp123> (Common Lisp is great, but this is #commonlisp channel, so it might be a biased view ;)
[21:18:43] <synbian> all will become lisp btw
[21:19:06] <skeemer__> lisp123, yeah i started with scheme
[21:20:01] <skeemer__> lisp123, i think scheme is not approachable by beginners for real world practical projects, seemed to fragmented, except racket
[21:20:08] <skeemer__> which some somebody is not reallyh a scheme anymore
[21:20:57] <lisp123> synbian: Yes, indeed. Lisp is the singularity of all higher level programming languages
[21:21:07] <synbian> i see the complete oposity skeemer__, data types on racket is too verbose and also the way the language is evolve to become some kind of java for lisps...
[21:21:39] <lisp123> skeemer__: Yes I found the same, I like Scheme as well (especially built in continuations), but for anything serious, Common Lisp seems to be a much better platform
[21:22:21] <synbian> and is, mustely because of MACROs, CL is the lisp for macros, sorry little schemer...
[21:23:07] <skeemer__> lisp123, i also saw that there is an idea of saving data as s-expression as a sort of small file databases... is this a lispy thing?
[21:25:57] <lisp123> skeemer__: I'll let someone more experienced come back to you on that. (I think there are various considerations / issues when serialising data, for example the state of the image at the time when you write the s-expressions to file vs. when you read them)
[21:26:35] <Arcsech> I mean, it's hella easy (in the simple case at least) because you can just `PRINT` it out and the `READ` it back in, which is enabled by the lispiness, but just writing out representations of data structures to small files like that isn't especially lispy.
[21:27:10] <Arcsech> But like any other language you'll hit edge cases and security concerns and it's probably best to just use sqlite from the start if you need to save files to a disk but don't really care about how that's done
[21:27:37] <Arcsech> Neat trick for small programs, though
[21:27:48] <lisp123> Arcsech: Have you heard of BKNR?
[21:28:09] <skeemer__> lisp123, what is that?
[21:28:39] <Arcsech> https://common-lisp.net/project/bknr/html/home.html probably
[21:28:42] <lisp123> Its a Lisp Library that lets you add a few words to your class definitions and get them to automaically save to file
[21:29:04] <Arcsech> Looks weird, I'll have to check it out. I have some concerns about how that would work long-term or in a production setting but it's cool
[21:29:07] <lisp123> Every time you create a class instance, it writes to the data store, you can then read instances based on their properties
[21:30:21] <lisp123> Arcsech: I use BKNR in conjunction with XML for a "backup" solution. The authors are pretty well regarded so I think its quite robust. You could substitute SQLite for XML (but you would have to write that code yourself)
[21:32:03] <Arcsech> It seems like in a long-running system you'd build up enough instances that loading the dribble file (or whatever its called) would be slow. And your data set needs to fit in memory. As long as you're okay with those limitations it seems like it might be neat to use.
[21:32:42] <lisp123> Agree
[21:32:55] <Arcsech> I'd also want to know what the implementation looks like, the naive implementation of this would be semi-likely to lose data in the event of a crash/power failure/etc
[21:39:01] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[21:40:51] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:41:40] *** Quits: lisp123 (~lisp123@5.30.23.247) (Client Quit)
[21:48:08] *** Joins: cosimone (~user@2001:b07:ae5:db26:d50b:b9d7:e822:c65a)
[21:52:04] *** Joins: lisp123e (~user@5.30.23.247)
[21:52:16] *** Joins: notzmv (~zmv@user/notzmv)
[21:53:16] *** Parts: lisp123e (~user@5.30.23.247) ()
[21:57:08] *** Joins: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.sdns.net.rogers.com)
[21:57:32] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[22:09:51] *** Quits: synbian (~user@45.182.92.125) (Ping timeout: 250 seconds)
[22:09:54] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:10:45] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 265 seconds)
[22:11:46] *** Joins: amb007 (~a_bakic@153.132.22.93.rev.sfr.net)
[22:15:52] *** Quits: Tomte (~th@p200300db9f1fd800ecab8cb99dfb1c87.dip0.t-ipconnect.de) (Quit: Leaving)
[22:19:02] *** Quits: amb007 (~a_bakic@153.132.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[22:19:05] *** Quits: cosimone (~user@2001:b07:ae5:db26:d50b:b9d7:e822:c65a) (Remote host closed the connection)
[22:19:20] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[22:19:45] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[22:22:22] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:ca92:d9c8:f6e8:70eb) (Ping timeout: 260 seconds)
[22:27:05] *** Quits: rogersm_ (~rogersm@90.166.177.48) (Quit: Leaving...)
[22:27:23] *** Joins: rogersm (~rogersm@90.166.177.48)
[22:36:03] *** Quits: rogersm (~rogersm@90.166.177.48) (Quit: Leaving...)
[22:40:59] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:77ec:1bae:cf66:681)
[22:45:26] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[22:46:23] *** Joins: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it)
[23:07:55] *** Quits: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.sdns.net.rogers.com) (Quit: ERC (IRC client for Emacs 27.2))
[23:18:41] *** Quits: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:27:49] <skeemer__> is this guy a troll? https://www.youtube.com/watch?v=okEhaE93Sts
[23:27:54] <skeemer__> Xach lee
[23:28:10] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:28:29] <skeemer__> can't understand if he is a respected member of the community or not, because it seems to talk bad about weverything lisp but still uses lisp
[23:30:29] <pjb> skeemer__: he's a weirdo, but he still contributes some nice pages.
[23:30:40] <semz> I don't think Xah Lee can be categorized
[23:30:53] <skeemer__> he was talking about race and stuff like that
[23:30:57] <skeemer__> seemed weird
[23:30:59] <skeemer__> actually
[23:31:05] <pjb> skeemer__: at least he was clothed in this video!
[23:31:19] <pjb> (incf semz)
[23:31:21] <skeemer__> ahahaha wtf???
[23:31:26] <pjb> really…
[23:31:40] <skeemer__> pjb, well he said that the infix syntax lisp used is stupid and harder to read
[23:31:51] <pjb> :-)
[23:31:58] <pjb> lisp uses prefix syntax.
[23:32:40] <skeemer__> sorry i meant prefix syntax
[23:32:49] <skeemer__> he was referring to prefix syntax
[23:32:52] <pjb> ok.
[23:33:36] <pjb> http://xahlee.info/index.html
[23:33:46] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 260 seconds)
[23:35:33] *** Joins: aeth (~aeth@user/aeth)
[23:35:49] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[23:44:02] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[23:47:53] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[23:51:57] <skeemer__> pjb, thanks
[23:53:52] <skeemer__> pjb, he is the same xach who is on this channel?
[23:55:02] <Arcsech> I don't know of any other `xach`s in the lispiverse
[23:55:42] <etimmons> skeemer__: The person you linked to is Xah Lee (no c)
[23:56:04] <etimmons> so no, the xach in this channel is not Xah Lee
[23:56:47] <Arcsech> Ah, that's what that was in reference to. Yeah, xach's homepage is https://xach.com/lisp/
[23:58:19] <skeemer__> ohh okok thanks etimmons Arcsech
