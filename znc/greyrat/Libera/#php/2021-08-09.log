[00:00:13] *** Quits: Rockwood (~Rocky@user/rocky) (Ping timeout: 258 seconds)
[00:06:54] *** Quits: Rockwood_ (~Rocky@user/rocky) (Quit: The Time is Over)
[00:09:22] *** Quits: delboy1978uk (~delboy197@d51A46DB4.access.telenet.be) (Quit: delboy1978uk)
[00:10:57] *** Joins: molt (~molt@79.140.150.21)
[00:11:56] *** Joins: delboy1978uk (~delboy197@d51a46db4.access.telenet.be)
[00:22:56] *** Quits: delboy1978uk (~delboy197@d51a46db4.access.telenet.be) (Quit: delboy1978uk)
[00:23:46] *** Joins: delboy1978uk (~delboy197@d51a46db4.access.telenet.be)
[00:49:03] *** Quits: magla (~gelignite@55d4cb3d.access.ecotel.net) (Quit: Stay safe!)
[00:55:51] *** Joins: NakedKing (~NakedKing@user/nakedking)
[01:00:42] *** Joins: Poboy (~Poboy@user/poboy)
[01:01:18] <NakedKing> What is the best opensource and real "libre" php editor on linux?
[01:04:03] <da_wunder> I would just use PhpStorm - and sure it will cost something, but the benefits of that will pay it back in literally in days
[01:04:31] <da_wunder> or just use those EAP versions of that - you can update to next one and use that for free
[01:05:27] <da_wunder> but really supporting jetbrains as a company, you will also support PHP community because Nikita is working for Jetbrains nowadays
[01:08:39] <NakedKing> okay da_wunder, danke ^^
[01:35:00] *** Quits: delboy1978uk (~delboy197@d51a46db4.access.telenet.be) (Quit: delboy1978uk)
[01:40:13] *** Quits: genom (~g@37.214.30.182) (Remote host closed the connection)
[02:02:04] *** Quits: Blondie101010 (~Blondie10@user/blondie101010) (Ping timeout: 272 seconds)
[02:09:58] *** Quits: DaNeenjah (~jake@21.sub-72-106-110.myvzw.com) (Quit: WeeChat 3.2)
[02:12:12] *** Quits: Poboy (~Poboy@user/poboy) (Quit: Client closed)
[02:14:13] *** Joins: celphi (uid97751@user/celphi)
[02:23:25] *** Quits: Vision (~Vision@024-178-231-173.res.spectrum.com) (Ping timeout: 268 seconds)
[02:26:35] *** Joins: Blondie101010 (~Blondie10@user/blondie101010)
[02:36:06] <relipse> phpstorm for the win
[02:42:54] *** Quits: Warped (~Warped@user/warped) (Quit: We Gone! Bye Bye)
[02:43:47] <Blondie101010> !+ide
[02:43:47] <php-bot> Questions about specific IDEs and IDE discussion in general usually degrades rapidly due to personal preference.  It is not a valid topic for ##php. For a list of editors, /msg php-bot editors
[02:45:18] <da_wunder> wtf - so people cannot discuss about editors or ides here?
[02:45:44] <da_wunder> sounds quite odd - imho
[02:47:17] * da_wunder not sure who triggered that bot - because I don't see any messages from anyone after 23:38 < NakedKing> okay da_wunder, danke ^^ and before that bot message...
[02:47:23] <__adrian> da_wunder: we generally avoid the whole "recommendation" thing as it almost always boils down to arguments and opinions. especially when words like "best" are involved
[02:48:12] <da_wunder> hmm, and when I was that the "best" option is phpstorm?
[02:48:14] <da_wunder> wtf
[02:48:23] <__adrian> we also have this factoid (which i think is more useful):  !+recommend due diligence
[02:48:23] <php-bot> we also have this factoid (which i think is more useful):, we recommend you research many, try a few, pick one; rinse and repeat as necessary. see also /msg php-bot recommend
[02:48:56] <__adrian> it's fine that you like phpstorm
[02:49:18] <da_wunder> I was just saying _my_ own opinion - I didn't say it's the "best" or anything else...
[02:49:36] <__adrian> ah - no, i wasn't referring to your response. "best" was in the question
[02:51:10] <da_wunder> in which question was "best" mentioned?
[02:51:27] <__adrian> ...the one you answered
[02:51:35] <__adrian> "What is the best ..."
[02:52:08] <da_wunder> that was just for the open source one - and I recommend some not open source one... so cannot see why you're accusing me for breaking some "rules" here...
[02:52:40] <Byteflux> There was no accusation.
[02:52:45] <__adrian> i'm not accusing you of anything. you asked whether editors/ides were on topic here
[02:52:56] <da_wunder> for me that sounded like that...
[02:52:58] <__adrian> i was answering why we discourage those conversations
[02:53:21] <Byteflux> Sounds like a personal problem.
[02:54:06] <da_wunder> hmm, isn't this channel for PHP and not for mental problems?
[02:54:26] <TinoDidriksen> And IDEs are not PHP.
[02:54:53] <__adrian> ok... we've covered the actual question. let's get back on topic, please.
[02:58:38] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:26:09] *** Quits: tone0 (~tone0@071-011-252-111.res.spectrum.com) (Remote host closed the connection)
[03:42:25] *** Quits: Pricey (~pricey@libera/staff/pricey) (Remote host closed the connection)
[03:42:43] *** Joins: Pricey (~pricey@libera/staff/pricey)
[03:52:08] *** Quits: CyberCr33p (~chris@bnc.cretaforce.gr) (Ping timeout: 258 seconds)
[03:58:27] *** Joins: harpia (~harpia@58.148.205.168.dynamic.vibefibra.com.br)
[04:06:33] *** Quits: Lukeyface (~Luke@2.218.182.67) ()
[04:12:03] *** Joins: forgotmynick (uid24625@id-24625.stonehaven.irccloud.com)
[04:12:27] *** Joins: franco (~franco@37.218.244.251)
[04:42:06] *** Joins: CobraK (uid144971@id-144971.stonehaven.irccloud.com)
[04:47:01] *** Joins: funhouse (~funhouse@user/funhouse)
[04:47:17] <funhouse> Anyone using slim for API's?
[04:50:31] <da_wunder> funhouse: personally I don't use slim, but most likely someone is using that for API's - so I just recommend you to ask your real question (I'm assuming that question isn't just how many people are using slim for API's)
[04:51:18] <funhouse> da_wunder ok, basically I dont want to use laravel, and just wondering if anyone is using slim instead of laravel
[04:51:38] <__adrian> both are fairly popular
[04:51:49] <__adrian> looks at slim and see if it does what you need
[04:51:52] <__adrian> s/s//
[04:51:53] <da_wunder> funhouse: most likely yes, personally I prefer Symfony more
[04:52:31] <__adrian> they have a slack, and a channel on freenode (or, they did; i don't know if it's still there, or if there's a channel on libera)
[04:53:40] <da_wunder> Symfony has slack and channel in here libera
[04:54:14] <funhouse> da_wunder ah ok great thank you will have a look
[04:55:37] <da_wunder> funhouse: just try those all and make your _own_ decision which is best for your use case - we cannot do that
[05:09:52] <Byteflux> Symfony support is more active on Slack. Laravel can be found on Discord. I think Slim is overall just not as big and lacks support in general. Laravel's equivalent of Slim is Lumen, so that's another you can potentially experiment with.
[05:14:28] *** Joins: pmercado (~pmercado@190.22.89.183)
[05:15:38] *** Joins: starz (starz@ns378512.ip-37-59-36.eu)
[05:23:36] *** Quits: harpia (~harpia@58.148.205.168.dynamic.vibefibra.com.br) (Quit: Leaving)
[05:28:31] <da_wunder> and for Symfony you could just start with bare skeleton and add packages that you need as your appliation grows
[05:29:48] <da_wunder> this doc should help you with that - https://symfony.com/doc/current/setup.html#creating-symfony-applications
[05:30:27] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:30:49] <da_wunder> and personally I recommend always start with bare skeleton - thne you know what you add and why
[05:40:36] <funhouse> Byteflux thank you
[05:44:38] *** Joins: CyberCr33p (~chris@2a01:4f8:1c1c:4ad1::1)
[05:52:30] *** Quits: CyberCr33p (~chris@2a01:4f8:1c1c:4ad1::1) (Read error: Connection reset by peer)
[05:53:54] *** Joins: vlm (~vlm@user/vlm)
[06:04:42] <celphi> Hi peeps
[06:05:10] <celphi> Just saying hello. Going back to my C++ datastructures video
[06:12:52] *** Joins: CyberCr33p (~chris@bnc.cretaforce.gr)
[06:25:06] *** Joins: Poboy (~Poboy@user/poboy)
[06:28:03] *** Joins: Warped (~Warped@user/warped)
[06:31:52] *** Quits: entuland (~entuland@user/entuland) (Ping timeout: 272 seconds)
[06:32:47] *** Joins: autopsy (~autopsy@ip70-190-159-27.ph.ph.cox.net)
[06:33:12] <autopsy> Is there a way in PHP command shell line terminal whatever to test regions of memory for errors?
[06:33:56] <__adrian> i'm not sure what you mean, but I'd hazard "no"
[06:34:08] <__adrian> php doesn't generally have direct access to memory
[06:34:30] <autopsy> Well I'm facing a dead end here..
[06:34:41] <__adrian> why would you want to use php to test memory?
[06:35:23] <autopsy> I can't use C because the program I got segfaults at *address = pattern; on line 51 and so far I have been unable to tell exactly why even with gdb and debugging and everything.
[06:36:37] <autopsy> Can PHP not declare a section or variable, and a size to allocate for the variable fill it with data then read it back and compare it to the original known data block for reasons to integrity test memory?
[06:38:55] <da_wunder> I don't remember to seen something like that
[06:42:43] <Blondie101010> autopsy:  use memtest86+
[06:43:38] <Blondie101010> the error you mentioned is less likely to be caused by a hardware fault than a program bug, but running the proper memtest will be pretty reliable to rule out a hardware problem
[06:45:54] <Blondie101010> properly duplicating the operation that crashes onto a different machine would also be advisable to do similar validations
[06:46:09] <autopsy> [18:52:44] <autopsy> Hey guys I'm sorry but I cannot run memtest86+ since I don't have a USB flash device and when I installed it natively and ran grub2-mkconfig it saw it and then I rebooted and it finds the kernel elf-memtest86+.5.3x.? but it just sits at a blue screen so I think it is corrupt..... can anyone here try to help me write my own program in C to just briefly touch the memory regions and read them back, memcmp them
[06:46:09] <autopsy> and iterate through another block of
[06:46:10] <autopsy> [18:52:44] <autopsy> memory in C?
[06:46:45] <Blondie101010> fix your install or buy a USB key
[06:47:15] <__adrian> autopsy: i'd buy a usb key
[06:47:33] <__adrian> but you could also remove sticks one at a time and see when/if the error goes away
[06:47:50] <Blondie101010> hmmmm I don't think that's advisable
[06:48:00] <Blondie101010> not unless something validates that it is a hardware fault
[06:48:19] *** Joins: Rockwood (~Rocky@user/rocky)
[06:48:42] <__adrian> suppose. it's all pretty far outside what php would be a good/practical idea for, though
[06:48:59] <Blondie101010> autopsy:  and FYI:  the Linux kernel can anonymize memory addresses, making it impossible for a userspace program to check what you want
[07:19:01] <autopsy> Ok. Blondie exactly thats virtaul memory I see... but in C I could do it right?
[07:19:05] <autopsy> As root?
[07:19:18] <Blondie101010> no
[07:19:39] <Blondie101010> the kernel manages the memory addressing, not the program itself
[07:20:15] <Blondie101010> memtest86 runs in single protected mode
[07:20:19] <Blondie101010> -single
[07:22:43] <Blondie101010> it is the tool I find most reliable to identify hardware faults caused by CPU, RAM, motherboard and PSU problems
[07:22:53] *** Joins: pmercado_ (~pmercado@190.22.89.183)
[07:23:22] *** Quits: pmercado (~pmercado@190.22.89.183) (Ping timeout: 240 seconds)
[07:23:29] <Blondie101010> basically a good tool to crash a defective machine
[07:27:51] <s17> I used it once to find bad RAM and then used BadRAM to extend its life
[07:28:19] <s17> sell it on eBay with an exclusion
[07:28:21] <s17> ++
[07:29:06] <s17>  those RAMs can be sold under a white label for less money
[07:33:41] *** pmercado_ is now known as pmercado
[07:48:21] *** Quits: Poboy (~Poboy@user/poboy) (Quit: Client closed)
[07:50:49] *** Joins: ferdna (~ferdna@user/ferdna)
[07:56:27] *** Joins: Poboy (~Poboy@user/poboy)
[08:02:48] *** Quits: autopsy (~autopsy@ip70-190-159-27.ph.ph.cox.net) (Quit: Leaving)
[08:10:43] *** Joins: WishBoy (~WishBoy@user/wishboy)
[08:22:42] *** Joins: guidoc (~guido@151.47.124.87)
[08:29:27] *** Quits: Norkle (~norkle@admin.nasa-g0v.com) (Quit: Lost terminal)
[08:29:54] *** Joins: Akimb (~Akimb@86.100.13.100)
[08:36:49] *** Joins: pmercado_ (~pmercado@190.22.89.183)
[08:37:17] *** Quits: Akimb (~Akimb@86.100.13.100) (Read error: Connection reset by peer)
[08:40:24] *** Quits: pmercado (~pmercado@190.22.89.183) (Ping timeout: 258 seconds)
[08:45:16] *** Quits: burrows (burrows@user/burrows) (Quit: Quitting)
[08:45:57] *** Quits: pmercado_ (~pmercado@190.22.89.183) (Ping timeout: 245 seconds)
[08:46:14] *** Joins: pmercado_ (~pmercado@190.22.89.183)
[08:46:43] *** Joins: burrows (burrows@user/burrows)
[08:54:11] *** Quits: ZeiP (zeip@greenore.zeip.eu) (Remote host closed the connection)
[08:55:00] *** Quits: Rockwood (~Rocky@user/rocky) (Quit: The Time is Over)
[08:59:58] *** Quits: Poboy (~Poboy@user/poboy) (Quit: Client closed)
[09:20:29] *** Joins: Akimb (~Akimb@82-135-197-171.static.zebra.lt)
[09:22:57] *** Quits: Northwoods (~Northwood@103.223.9.125) (Ping timeout: 258 seconds)
[09:24:39] *** Joins: Northwoods (~Northwood@180.188.236.125)
[09:28:49] *** Quits: WishBoy (~WishBoy@user/wishboy) (*.net *.split)
[09:28:50] *** Quits: vlm (~vlm@user/vlm) (*.net *.split)
[09:28:50] *** Quits: franco (~franco@37.218.244.251) (*.net *.split)
[09:28:50] *** Quits: Blondie101010 (~Blondie10@user/blondie101010) (*.net *.split)
[09:28:50] *** Quits: uhu (~uhu@2a01:4f9:c010:1087::2) (*.net *.split)
[09:28:50] *** Quits: mishehu (~mishehu@tunnel44858-pt.tunnel.tserv8.dal1.ipv6.he.net) (*.net *.split)
[09:28:50] *** Quits: acidsys (~LSD@2.lsd.systems) (*.net *.split)
[09:28:50] *** Quits: nbin (~nbin@user/nbin) (*.net *.split)
[09:28:51] *** Quits: SilverEagleDev (~SilverEag@azuracast/lead-developer/SilverEagleDev) (*.net *.split)
[09:28:51] *** Quits: xep (~xep@76-210-4-7.lightspeed.sntcca.sbcglobal.net) (*.net *.split)
[09:28:51] *** Quits: kilitary (~kilitary@kilitary.ru) (*.net *.split)
[09:28:51] *** Quits: FightingFalcon (~none@user/fightingfalcon) (*.net *.split)
[09:28:51] *** Quits: dyCrazyEd (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (*.net *.split)
[09:29:09] *** Joins: WishBoy (~WishBoy@user/wishboy)
[09:29:09] *** Joins: vlm (~vlm@user/vlm)
[09:29:09] *** Joins: franco (~franco@37.218.244.251)
[09:29:09] *** Joins: Blondie101010 (~Blondie10@user/blondie101010)
[09:29:09] *** Joins: uhu (~uhu@2a01:4f9:c010:1087::2)
[09:29:09] *** Joins: mishehu (~mishehu@tunnel44858-pt.tunnel.tserv8.dal1.ipv6.he.net)
[09:29:09] *** Joins: acidsys (~LSD@2.lsd.systems)
[09:29:09] *** Joins: nbin (~nbin@user/nbin)
[09:29:09] *** Joins: SilverEagleDev (~SilverEag@azuracast/lead-developer/SilverEagleDev)
[09:29:09] *** Joins: xep (~xep@76-210-4-7.lightspeed.sntcca.sbcglobal.net)
[09:29:09] *** Joins: kilitary (~kilitary@kilitary.ru)
[09:29:09] *** Joins: dyCrazyEd (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[09:29:09] *** Joins: FightingFalcon (~none@user/fightingfalcon)
[09:31:03] *** Quits: VectorX (~VectorX@user/vectorx) (*.net *.split)
[09:31:03] *** Quits: Albright (~Albright@149.28.13.173) (*.net *.split)
[09:31:03] *** Quits: salathe (~peter@idle.php.net) (*.net *.split)
[09:31:03] *** Quits: fkrauthan (~fkrauthan@user/fkrauthan) (*.net *.split)
[09:31:03] *** Quits: kantlivelong (~kantlivel@cpe-67-250-125-43.hvc.res.rr.com) (*.net *.split)
[09:31:03] *** Quits: Derick (~derickr@Xdebug/derick) (*.net *.split)
[09:31:03] *** Quits: Nomikos (~nemo@about/web/climber) (*.net *.split)
[09:31:03] *** Quits: simius (~simius@user/simius) (*.net *.split)
[09:31:03] *** Quits: ss23 (~ss23@irc.ss23.geek.nz) (*.net *.split)
[09:31:04] *** Quits: s1b1 (~s1b1@user/s1b1) (*.net *.split)
[09:31:04] *** Quits: couture (~couture@user/couture) (*.net *.split)
[09:31:04] *** Quits: qwedfg (~qwedfg@user/qwedfg) (*.net *.split)
[09:31:04] *** Quits: ringo_ (~ringo@157.230.117.128) (*.net *.split)
[09:31:04] *** Quits: Sammitch (~Jerkface@user/sammitch) (*.net *.split)
[09:31:04] *** Quits: Cork (~Cork@user/cork) (*.net *.split)
[09:31:04] *** Quits: fiddlerwoaroof_ (~fiddlerwo@user/fiddlerwoaroof) (*.net *.split)
[09:31:06] *** Joins: residue_ (~couture@user/couture)
[09:31:06] *** Joins: salathe_ (~peter@idle.php.net)
[09:31:07] *** Quits: franco (~franco@37.218.244.251) (Read error: Connection reset by peer)
[09:31:07] *** Joins: simius_ (~simius@user/simius)
[09:31:12] *** Joins: Sammitch_ (~Jerkface@user/sammitch)
[09:32:23] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[09:32:23] *** Joins: fkrauthan (~fkrauthan@user/fkrauthan)
[09:32:26] *** Joins: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof)
[09:32:35] *** Quits: Rubin (~rubin@2001:470:69fc:105::17e) (Ping timeout: 250 seconds)
[09:32:57] *** Quits: wutzelputz (~wutzelput@2001:470:69fc:105::3117) (Ping timeout: 272 seconds)
[09:32:57] *** Joins: ringo_ (~ringo@157.230.117.128)
[09:33:42] *** Joins: kantlivelong (~kantlivel@cpe-67-250-125-43.hvc.res.rr.com)
[09:33:54] *** Joins: Cork (~Cork@user/cork)
[09:34:27] *** Quits: acidsys (~LSD@2.lsd.systems) (Excess Flood)
[09:34:50] *** Quits: greyrat_ (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[09:36:39] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[09:36:58] *** Joins: DCTWD (~dc@uz.utmappro.com)
[09:37:26] *** Quits: dyCrazyEd (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 272 seconds)
[09:38:28] *** Server sets mode: +Ccnrtzf ##please-register
[09:39:41] *** Joins: s1b1 (~s1b1@user/s1b1)
[09:39:42] *** Quits: Northwoods (~Northwood@180.188.236.125) (Ping timeout: 245 seconds)
[09:39:49] *** Quits: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net) (Ping timeout: 258 seconds)
[09:41:15] *** Joins: Northwoods (~Northwood@103.223.9.173)
[09:45:41] *** Joins: franco (~franco@37.218.244.251)
[09:48:48] *** Joins: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net)
[10:00:46] *** Quits: pmercado_ (~pmercado@190.22.89.183) (Quit: Konversation terminated!)
[10:25:36] *** Joins: Naktibalda (~Naktibald@88.135.22.17)
[10:27:08] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[10:28:10] *** Quits: BlackIkeEagle (~BlackIkeE@archlinux/trusteduser/blackikeeagle) (Quit: BlackIkeEagle)
[10:30:26] *** Joins: BlackIkeEagle (~BlackIkeE@archlinux/trusteduser/blackikeeagle)
[10:31:50] *** Joins: Rubin (~rubin@2001:470:69fc:105::17e)
[10:35:01] *** Quits: WishBoy (~WishBoy@user/wishboy) ()
[10:44:28] *** Joins: wutzelputz (~wutzelput@2001:470:69fc:105::3117)
[10:51:07] *** Quits: dimbag (~dimbag@ppp-62-76-16-3.ppp.kmv.ru) (Ping timeout: 258 seconds)
[11:01:48] *** Quits: forgotmynick (uid24625@id-24625.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[11:11:40] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[11:13:42] *** Joins: LucaTM (~LucaTM@user/lucatm)
[11:35:10] *** Joins: epolanski (uid312403@id-312403.brockwell.irccloud.com)
[11:36:24] *** Joins: ss23 (~ss23@irc.ss23.geek.nz)
[11:40:16] *** Joins: fahrradToken (~fahrradTo@2a02:810b:149f:f0f4::676e)
[11:43:47] *** Quits: CyberCr33p (~chris@bnc.cretaforce.gr) (Read error: Connection reset by peer)
[11:45:22] *** Joins: Nomikos (~nemo@about/web/climber)
[11:55:52] *** Quits: fahrradToken (~fahrradTo@2a02:810b:149f:f0f4::676e) (Remote host closed the connection)
[12:03:04] *** Joins: fahrradToken (~fahrradTo@2a02:810b:149f:f0f4::676e)
[12:07:04] *** Joins: aloy (~luna@2001:41f0:3fe:3:406c:b5a8:8644:c496)
[12:21:48] *** Joins: novns (~novns@user/novns)
[12:23:51] *** Quits: guidoc (~guido@151.47.124.87) (Read error: Connection reset by peer)
[12:24:55] <novns> hello!
[12:25:13] <novns> what is the correct method to get "Class not found" or "Call to undefined method" in an exception handler function?
[12:25:29] <novns> except parsing the exception's message
[12:26:14] <novns> no proper subclasses, just a general Error
[12:26:52] <novns> parsing the message would be slow
[12:27:09] <AllenJB> There is no other method.
[12:27:41] <novns> ok, thanks
[12:28:31] <AllenJB> Generally you wouldn't care about speed in these cases because it's an exceptional circumstance. Unless this is a case you're going to encounter hundreds of times in a loop, any performance impact is going to be negligible
[12:29:14] <novns> it's not slow only, it's also ugly :)
[12:29:46] *** Quits: molt (~molt@79.140.150.21) (Ping timeout: 240 seconds)
[12:29:58] <AllenJB> You may be able to use class_exists() and method_exists() to pre-test in cases where you actually expect a class may not be defined for some reason
[12:30:01] <novns> and unpredictable, those messages are not part of standard
[12:31:04] <novns> AllenJB, I try to get rid of class_exists() in multiple places, to use one common exception handler
[12:31:15] <novns> to make code less bloaty
[12:31:51] <TinoDidriksen> You should not rely on exceptions for flow control or feature detection.
[12:32:11] <novns> why not
[12:33:36] <novns> it's a web framework than explicitly routes /module/action to class "Module" and method "Action"
[12:33:58] <TinoDidriksen> If you need a feature, check up front that it exists in the installer or setup tools. Then the exception handler can show a link to the feature checker.
[12:34:29] <novns> and if class or module are not available I would prefer to detect this in an exception handler
[12:34:45] <novns> instead of manual checks
[12:35:16] <novns> *class or method
[12:36:12] <novns> TinoDidriksen, what installer or setup tools?  those are irrelevant
[12:36:16] <TinoDidriksen> That would be horrible to debug. You lack one, fix that, try again only to find you lack another...repeat. No. Having a single place that checks all 3rd party features are there and reports which are missing or misconfigured is so much cleaner.
[12:36:41] <novns> no so horrible, you got backtrace
[12:36:44] *** Joins: molt (~molt@79.140.150.21)
[12:37:35] <novns> and there are no 3rd party features, due to NIH syndrome :)
[12:38:11] <TinoDidriksen> What I'm saying is don't detect it in the exception handler. Have it show the backtrace and everything it can, but also link to the "is the baseline system status good?" page.
[12:38:22] <TinoDidriksen> No 3rd party? Then how can a class/method ever go missing?
[12:38:50] *** Quits: franco (~franco@37.218.244.251) (Ping timeout: 252 seconds)
[12:38:58] <novns> because class/method names come from routing of an URL
[12:39:29] <novns> /class_name/mathod_name/blablabla
[12:39:35] <novns> *method
[12:39:53] <biberu> that sounds interesting to localize
[12:39:55] <TinoDidriksen> Then you need a whitelist anyway.
[12:39:59] <novns> and wrong names have to return 404 error
[12:41:01] <novns> TinoDidriksen, no need for whitelists, names are guarded by the namespace
[12:41:28] <TinoDidriksen> So you'd want to turn an exception into a benign 404? No no no. That's not what exceptions are for. Exceptions are 500-class errors. 404 can and should be detected up front.
[12:42:13] <novns> it would be better if those exceptions had their own subclasses instead of Error
[12:42:14] <TinoDidriksen> You are abusing exceptions for flow control.
[12:43:32] <novns> TinoDidriksen, the goal is to create the easiest web framework at the cost of flexibility
[12:44:44] <novns> so an user would not need to write a lot of code, just implement classes and methods
[12:44:44] <biberu> $router->get("/", fn ($r) => "hello world!");
[12:45:16] <novns> biberu, classical routing is not ok in php, because it would be slow
[12:45:59] <novns> because you don't write a running app, all your scripts are executed from scratch on every request
[12:47:01] <novns> and initialization of routing is a slow process
[12:47:34] <novns> there are some weird projects like swoole to solve this, but those are buggy
[12:49:06] <AllenJB> novns: Have you looked at FastRoute (and pretty much everything that came after it)? IMO (Fast) routing is pretty much a solved problem at this point (and is completely separate from whether you run under php-fpm or a long-running application process)
[12:49:36] <biberu> novns: i don't have time to get into this right now, but i believe you have some misconceptions in whatever "classical routing" means to you
[12:50:39] <novns> biberu, classical routing is when you initialize/setup routing once, and then you use this routing object for every request
[12:50:54] <novns> and it's not available in php
[12:51:24] <novns> with PHP you have to initialize/setup routing on every request
[12:51:35] <biberu> no you don't
[12:51:49] <novns> FPM helps to speed things a little, but still too much overhead
[12:52:02] <biberu> if that's a real issue for you, you could have your routing be composable and lazy
[12:53:49] <novns> I'm waiting to a working solution for running a PHP application
[12:54:22] <novns> like appserver or swoole, but not so buggy
[12:55:54] <novns> biberu, implementing lazyness is a lot of overhead too
[12:56:26] <novns> and building some caches elsewhere
[12:56:55] <biberu> a function call is a lot of overhead?
[12:57:18] <novns> biberu, tracking and caching what was calculated is
[12:57:32] <biberu> that's optional
[12:59:12] <Byteflux> Sounds like premature optimization.
[12:59:33] <Byteflux> If you're using an opcode cache such as the built-in opcache extension, bytecode is cached in memory and re-used between requests.
[12:59:50] <biberu> novns: anyway, i'm at work and don't have time right now, but i agree with others here that you shouln't use exceptions in that way, and even if you automate discovery of endpoints i'd hide that behind a router that allows you more flexibility
[13:00:17] <AllenJB> novns: If you haven't already you may want to look at DriftPHP and (currently in closed beta development) Framework X (both built on ReactPHP). You should also read up on opcache and preloading. I don't think the performance of routing / initialization is as bad as you think it is.
[13:00:17] <Byteflux> PHP tends to be faster than some alternatives and just as fast as others despite its "stateless" nature.
[13:01:28] <novns> Byteflux, it's not about caching of compiled opcode, it's about needlessly repeated runtime routines on every request
[13:01:45] <Byteflux> Just having processes on standby ready to go (as php-fpm does with workers) is more than performant for the vast majority of cases.
[13:01:57] <Byteflux> Combined with cached bytecode.
[13:02:30] <novns> it's a compromise, but I don't like it
[13:02:30] <biberu> novns: is that a meaningful part of your execution time?
[13:02:56] <biberu> (i get that it's nice to optimize, but perhaps you'd save more by investing that time somewhere else)
[13:03:14] <novns> biberu, I expect rather high load
[13:03:23] <Byteflux> lol, everyone says that
[13:03:24] <Robdgreat> sounds like you want to be doing your web dev in assembler
[13:03:34] <Robdgreat> glad I could help
[13:04:08] <biberu> novns: the question is still relevant
[13:04:14] <Byteflux> You'd probably end up spending less time just making your app scalable across multiple containers.
[13:04:24] <Byteflux> And then deploying more instances behind a load balancer.
[13:04:26] <novns> Byteflux, the userbase is already formed by organization, and once some projects are announced - everyone is trying them
[13:05:12] <novns> it's not the first time, and usually I prefer Python or Go
[13:05:20] <Byteflux> Python is slower than PHP.
[13:05:28] <novns> but this time PHP is not to be avoided
[13:05:47] <novns> Byteflux, slower in what way?
[13:06:04] <Byteflux> As in the CPython runtime is much slower than PHP's.
[13:06:06] <TinoDidriksen> Ah. Python likes to use exceptions as flow control. Maybe that's where you got that notion.
[13:06:15] <Byteflux> Having an app server running in CPython is actually *slower* than the php-fpm approach.
[13:06:27] <novns> Byteflux, oh, come one
[13:06:33] <Byteflux> You could use PyPy, I suppose, but that's limited to 3.7, last I checked.
[13:06:33] <novns> *come on
[13:06:48] <Byteflux> It's no secret that CPython is horribly slow.
[13:06:50] <Byteflux> Are you unaware of this?
[13:06:51] <novns> Byteflux, that's a BS, because it all depends on your code
[13:07:08] <Robdgreat> your code doesn't influence the speed of the runtime
[13:07:16] <Byteflux> Sure, code plays a part, but there comes a point where it doesn't. The actual runtime is slow. Python is pretty well known for having a slow runtime.
[13:07:34] <novns> the speed of runtime doesn't make big difference
[13:07:36] <AllenJB> Can we avoid language performance comparisons and stick to PHP please
[13:07:44] <Byteflux> That's kinda the whole point PyPy exists in the first place.
[13:08:07] <Byteflux> It makes a huge difference, which again, is why PyPy exists.
[13:08:22] *** Joins: guidoc (~guido@rm-19-8-250.service.infuturo.it)
[13:08:44] <Byteflux> I just thought it's interesting that you're worrying about PHP performance but blissfully unaware of how much slower CPython is even with a spun up runtime.
[13:09:08] <novns> Byteflux, the "initialize things from scratch on every request" - this makes the difference
[13:09:10] <Byteflux> Don't get me wrong, I love Python.
[13:09:32] <TinoDidriksen> Benchmark it with full optimizations and opcache. Prove it.
[13:09:35] <novns> Byteflux, and speed runtime is really not so important
[13:09:53] <Robdgreat> TinoDidriksen: and ruin the narrative? not likely
[13:09:56] <novns> *the speed of runtime
[13:10:39] <novns> but thanks, I got the answer
[13:10:40] <Byteflux> I mean you could keep telling yourself that, but obviously runtime performance is very important... it is what runs your code. If it's slow, your app is slow.
[13:11:05] <Byteflux> Just because you have bytecode doesn't automatically mean the runtime executes that bytecode performantly.
[13:11:20] <Robdgreat> I'm beginning to suspect PHP killed novns' family
[13:11:30] <novns> Byteflux, you are wrong.  thanks for a discussion
[13:12:20] <Byteflux> Feel free to ask the people over at #python lol
[13:12:39] <novns> there's no need to start flamewars
[13:12:59] <Byteflux> They're well aware of the shortcomings of CPython's performance and they will explain to you that performance is not a priority in CPython.
[13:13:01] <novns> I have my experience, and I did my benchmarks
[13:13:20] <novns> it's ton a thing to argue about
[13:13:23] <novns> *not
[13:13:32] <Robdgreat> "and PHP is a big stupid doodoohead"
[13:13:41] <Nomikos> novns: welcome to #php!
[13:13:46] <novns> Robdgreat, those are not my words
[13:13:49] <Byteflux> If you did your benchmarks correctly you'd also know PHP performs great, better than CPython :)
[13:14:20] <biberu> regardless of that you should profile your app to see where it spends time before you start spending time on optimizations
[13:14:26] <Byteflux> Mind you this applies to PHP 7+
[13:15:06] <novns> I will try swoole again, btw
[13:15:16] <novns> hope they fixed some bugs
[13:15:21] <Byteflux> Even with Python being as dreadfully slow as it is, I wouldn't really worry about performance when you can just design the app to scale beyond a single instance.
[13:15:23] <Robdgreat> biberu: this only applies to the impartial. There's clearly a strong bias going on here
[13:15:51] <Byteflux> One of the perks about web apps, easy to scale horizontally.
[13:16:14] <biberu> Robdgreat: but i was told that pythonistas like science
[13:16:25] <novns> Byteflux, "slow" is just a myth from 90s, when perl was faster than python
[13:16:34] *** Joins: dyCrazyEd (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[13:16:37] <Robdgreat> biberu: clearly.
[13:17:35] <Byteflux> novns: I'm afraid you may be operating on incorrect benchmarks.
[13:17:53] <Byteflux> It's easy to mess up benchmarks.
[13:18:30] <novns> and besides speed, there are things I love in Python and miss in PHP
[13:18:37] <Byteflux> Me too.
[13:19:10] <novns> sets are lovely, generator expressions, etc
[13:20:10] <novns> and proper exceptions too :)
[13:20:18] <biberu> ew, exceptions
[13:20:38] <Byteflux> Sure, those are all great. I agree, speed is not very important compared to those things.
[13:20:49] <Byteflux> That's why it's still a very popular language.
[13:21:30] <Byteflux> That's why chunks of libraries like SciPy and NumPy are written in C to overcome to poor performance.
[13:21:42] <novns> and there is a thing that keeps me nervous about PHP - security
[13:21:42] <Byteflux> because at the end of the day, Python is fun to work with
[13:22:11] <biberu> novns: what kind of security?
[13:22:33] <novns> biberu, remember the MOPB story
[13:22:54] <novns> I don't believe things are different today
[13:22:56] <ss23> I'm a penetration tester, so I spend a lot of my time working with security, and I can say that PHP applications don't seem to have meaningfully worse security than other languages
[13:24:26] <ss23> Most PHP language issues aren't super relevant to developers since most developers aren't letting people execute arbitrary code, but FWIW, I definitely would feel unsafe running a shared hosting service for multiple customers on a shared box :P
[13:24:32] <Byteflux> What is this a vulnerability from well over a decade ago? lol
[13:25:13] <Byteflux> The internals have undergone major transformations and hardening since then.
[13:26:09] <novns> Byteflux, not a vulnerability but a lot of vulnerabilities that were reported to PHP developers and were not fixed
[13:26:34] <novns> not fixed for years, until one of developers published them
[13:27:21] <novns> he started that "Month of PHP Bugs" projects, and published one vulnerability a day
[13:28:17] <novns> because he wanted to fix them when he was in the PHP security team, but he was denied
[13:29:14] <Naktibalda> that was 14.5 years ago, right?
[13:29:18] <novns> they preferred the obscurity those days
[13:29:36] <novns> Naktibalda, yes and I don't believe things are different today
[13:29:44] <Byteflux> There are generally well defined/accepted reporting/disclosure processes for exploits these days.
[13:30:14] <novns> Byteflux, it's about the reputation, and it was damaged forever
[13:30:50] <novns> "we will not allow you to fix vulnerabilities to keep good faces"
[13:30:55] *** Joins: franco (~franco@37.218.244.251)
[13:31:15] <Byteflux> You're free to believe what you want :)
[13:31:29] <novns> it happened once
[13:31:38] <Byteflux> Don't think anyone is gonna lose sleep over it, certainly not the devs :P
[13:31:38] <novns> so that's still the issue
[13:33:20] <novns> Byteflux, if a man scammed you 14 years ago, would you trust him today?
[13:34:54] <Byteflux> Seems like a comparison which would end up branching into other questions and not actually proving the point you think it would.
[13:35:00] <novns> so it's another issue that I worry about, and I will never use PHP until I have to
[13:35:11] <Byteflux> Since nobody is able to highlight an issue at present, I guess there's nothing to worry about :0
[13:35:16] *** Joins: entuland (~entuland@user/entuland)
[13:39:45] <novns> btw, I tried Rust for a web app, using Rocket with Askama templates
[13:40:34] <novns> but it's hard, learning Rust is pain, and compilations are slow pain
[13:41:52] <novns> though the result is ultra fast
[13:42:21] <Byteflux> Should really look at Rust as something you'd use in place of C or C++. Would you write web apps with either of those? Probably not. But also slow compilation is going to be a turn off in general.
[13:42:37] <novns> Byteflux, in place of C++ - definitely
[13:43:07] <novns> C nice is for low level things, and will stay there long
[13:43:17] <novns> *is nice
[13:45:00] *** Quits: fahrradToken (~fahrradTo@2a02:810b:149f:f0f4::676e) (Ping timeout: 272 seconds)
[13:45:07] <novns> Rust itself is a nice language if you have learned it properly (I haven't)
[13:45:52] <novns> and it's better than C++ with ugly templates
[13:50:56] *** Joins: fahrradToken (~fahrradTo@2a02:810b:149f:f0f4::7845)
[14:04:22] *** Joins: \mSg (~mSg@user/msg/x-0285936)
[14:24:54] *** Quits: molt (~molt@79.140.150.21) (Ping timeout: 276 seconds)
[14:30:50] *** Joins: Linkandzelda (~Linkandze@cloudirc.laz.li)
[14:32:21] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[14:47:57] *** Joins: ideclon-uk (uid470002@id-470002.highgate.irccloud.com)
[14:56:11] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[15:05:16] *** Joins: dlundgren (~dlundgren@75-9-109-251.lightspeed.milwwi.sbcglobal.net)
[15:07:39] *** Joins: CyberCr33p (~chris@bnc.cretaforce.gr)
[15:14:45] *** Joins: wolfshappen (~waff@irc.furworks.de)
[15:17:09] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 258 seconds)
[15:30:59] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[15:31:50] *** Quits: wolfshappen (~waff@irc.furworks.de) (Quit: later)
[15:32:14] *** Joins: wolfshappen (~waff@irc.furworks.de)
[15:37:08] *** Joins: molt (~molt@79.140.150.21)
[15:46:39] *** Joins: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:e817:6dcd:3832:b47a)
[16:02:01] *** Joins: forgotmynick (uid24625@id-24625.stonehaven.irccloud.com)
[16:40:37] *** Joins: omegatron (~some@p54849842.dip0.t-ipconnect.de)
[16:47:54] *** Quits: celphi (uid97751@user/celphi) (Quit: Connection closed for inactivity)
[16:49:06] *** Joins: __adrian_ (~adrian@user/adrian/x-7832151)
[16:49:15] *** ChanServ sets mode: +o __adrian_
[16:49:23] *** __adrian_ is now known as __adrian
[16:58:00] *** Joins: cspray (~cspray@75.76.18.60)
[17:05:13] *** Quits: guidoc (~guido@rm-19-8-250.service.infuturo.it) (Ping timeout: 248 seconds)
[17:08:44] *** Joins: BukkitGerman (~BukkitGer@v2202101139897141171.quicksrv.de)
[17:17:36] *** Quits: ideclon-uk (uid470002@id-470002.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[17:29:10] *** Joins: guidoc (~guido@rm-19-13-203.service.infuturo.it)
[17:31:18] *** Parts: iiz (~iiz@c-67-172-73-103.hsd1.fl.comcast.net) ()
[17:37:07] *** Joins: pmercado (~pmercado@190.22.89.183)
[17:40:39] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[17:51:41] *** Joins: Poboy (~Poboy@user/poboy)
[17:53:00] *** Quits: Cork (~Cork@user/cork) (Quit: .)
[17:54:15] *** Joins: Cork (~Cork@user/cork)
[17:54:34] *** Quits: LSD (~LSD@2.lsd.systems) (Ping timeout: 240 seconds)
[17:57:55] *** Joins: NoiseEee (~NoiseEee@178.128.153.219)
[18:04:44] *** Joins: LSD (~LSD@2.lsd.systems)
[18:12:49] *** Quits: Akimb (~Akimb@82-135-197-171.static.zebra.lt) (Read error: Connection reset by peer)
[18:18:09] *** Joins: Anticom (~Anticom@87.190.49.75)
[18:21:31] *** Quits: forgotmynick (uid24625@id-24625.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[18:22:53] *** Joins: magla (~gelignite@55d4b6ce.access.ecotel.net)
[18:23:31] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[18:25:25] *** Quits: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:e817:6dcd:3832:b47a) (Ping timeout: 268 seconds)
[18:30:35] *** Quits: Warped (~Warped@user/warped) (Quit: We Gone! Bye Bye)
[18:31:21] *** Joins: Warped (~Warped@user/warped)
[18:39:26] *** Joins: olle (~olle@p578524f9.dip0.t-ipconnect.de)
[18:59:44] *** Joins: wovixo (~wovixo@128.104.205.49)
[19:19:42] <olle> Wanna discuss degrees of separation in SoC?
[19:25:55] <__adrian> what?
[19:26:09] <__adrian> system on chip ?
[19:26:35] <olle> __adrian: Sorry, Separation of concerns
[19:26:51] *** Quits: toretto (~0xe3b7@user/toretto) (Quit: leaving)
[19:29:35] <paule32> hello
[19:29:52] <paule32> i have documents with utf-8 encoded character set
[19:30:18] <paule32> this means, that umlauts or other signs are 2-byte in size
[19:30:45] <paule32> so, for the german a-umlaut: 0xc3 0x84 - Ä
[19:31:23] <paule32> how can i read such documents byte by byte and check, the code is in file
[19:31:50] <__adrian> (a) check what?  (b) not "byte by byte"
[19:32:12] <biberu> paule32: ^, also note that there are different normalization forms, there are several ways to represent Ä
[19:32:17] <paule32> the problem is: only umlauts have 2bytes
[19:32:23] <paule32> the rest is ascii 1 byte
[19:32:29] <Naktibalda> why is it a problem?
[19:32:29] <__adrian> ...so?
[19:32:35] <__adrian> that's utf-8.
[19:32:47] <__adrian> (it's not ascii) (it's ascii-compatible)
[19:32:59] <__adrian> *the single-byte characters are ascii-compatible, that is
[19:33:00] <Naktibalda> do you want to check visually or programatically?
[19:33:01] <biberu> there are many codepoints that are 2 bytes long but that are not umlauts, and umlauts do not need to use 2 bytes
[19:33:01] <paule32> yes, but i can't read as ascii file, and can't read as utf-8
[19:33:15] <__adrian> "can't read as utf-8"  why
[19:33:56] <paule32> the thing is, i would convert utf-8 signs like Ä - the german a-umlaut to &Auml;
[19:34:03] <paule32> for html use
[19:34:34] <__adrian> for html, sure. (though that's completely unnecessary, i'd suggest it's a waste of time.) what's that have to do with charsets
[19:34:52] <__adrian> why "can't read as utf-8" ?
[19:35:01] <biberu> paule32: 41cc88 is also Ä
[19:35:32] <paule32> __adrian: i have a php script that modified some files - html files, and some browsers dont handle each sign as it should
[19:36:06] <__adrian> are you trying to support incredibly old/broken browsers?
[19:36:11] <paule32> so the 0xc384 or Ä is displayed other than, when you use $Auml;
[19:36:18] <__adrian> are you setting the proper charset in your Content-type header?
[19:36:57] <paule32> thats all ?
[19:37:09] <__adrian> it was two questions
[19:37:33] <paule32> i have to look to header content
[19:37:42] <paule32> old browsers? no
[19:37:46] <__adrian> good
[19:38:14] <__adrian> no modern/mainstream browser has any substantial problem with utf-8
[19:38:41] <paule32> ok
[19:40:35] *** Joins: junktext (~junktext@109.201.152.168)
[19:41:01] *** Joins: forgotmynick (uid24625@id-24625.stonehaven.irccloud.com)
[19:43:51] *** Quits: bodiccea (~bodiccea@user/bodiccea) (Read error: Connection reset by peer)
[19:48:52] *** Joins: bodiccea (~bodiccea@user/bodiccea)
[19:50:23] *** Joins: genom (~g@37.214.30.182)
[19:59:40] *** LSD is now known as acidsys
[20:06:54] *** Joins: celphi (uid97751@user/celphi)
[20:17:21] *** Quits: travisghansen (~travisgha@192.74.130.86) (Read error: Connection reset by peer)
[20:17:58] *** Joins: travisghansen (~travisgha@192.74.130.86)
[20:25:10] *** Quits: Naktibalda (~Naktibald@88.135.22.17) (Ping timeout: 256 seconds)
[20:31:16] *** Joins: Oclair (~Oclair@www.aventia.pw)
[20:37:30] *** Joins: sidy (~sidy@user/sidy)
[20:38:42] *** Joins: Rockwood (~Rocky@user/rocky)
[20:45:46] *** Quits: olle (~olle@p578524f9.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[21:05:21] *** Quits: Anticom (~Anticom@87.190.49.75) (Quit: Leaving)
[21:09:56] *** Quits: fahrradToken (~fahrradTo@2a02:810b:149f:f0f4::7845) (Ping timeout: 256 seconds)
[21:11:07] <relipse> What type of background check would a potential employer do
[21:21:24] <AllenJB> This doesn't sound like a PHP question, and is also dependent on factors such as jurisdiction and what type of work you're doing
[21:21:37] <__adrian> indeed.
[21:21:47] <__adrian> ask them.
[21:21:56] <Rockwood> __adrian, hi how are you sir?
[21:22:02] <__adrian> hi
[21:29:49] *** Quits: guidoc (~guido@rm-19-13-203.service.infuturo.it) (Read error: Connection reset by peer)
[21:29:51] *** Joins: Rockwood_ (~Rocky@user/rocky)
[21:32:40] *** Quits: Rockwood (~Rocky@user/rocky) (Ping timeout: 268 seconds)
[21:58:45] *** Joins: goddard (~goddard@user/goddard)
[21:58:49] <goddard> hi
[21:59:03] <goddard> how safe is file_get_contents('php://');
[21:59:08] <goddard> never used it before
[21:59:15] <goddard> at least for input
[21:59:24] <goddard> how safe is file_get_contents('php://input');
[21:59:26] <goddard> sorry
[21:59:28] <goddard> thats it
[22:04:50] <entuland> safe in what sense? and likely depends on what you're going to do with that data, as it is user data
[22:05:03] <da_wunder> ^
[22:05:08] <entuland> user provided* data
[22:06:45] <Rockwood_> safety always a concern but i am sure if ur computer connected with internet means no secure
[22:07:24] <entuland> computers may be extremely dangerous even when completely powered off - imagine being thrown one at
[22:09:25] <goddard> it appears that is the only way to get POST data from this webhook
[22:09:32] <goddard> is that because it is using some kind of socket?
[22:13:29] <Rockwood_> why not token
[22:14:23] <goddard> its sendgrid so i dont know
[22:17:53] *** Joins: Akimb (~Akimb@86.100.13.100)
[22:19:36] *** Joins: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:e8d6:b4f8:666:c83e)
[22:20:53] *** Joins: DLange (~DLange@about/linux/staff/DLange)
[22:23:37] *** Quits: Akimb (~Akimb@86.100.13.100) (Ping timeout: 248 seconds)
[22:33:57] <NoiseEee> goddard: its fine, just don't make it web-accessible
[22:34:07] <NoiseEee> goddard: don't let me upload a file and then http to it
[22:36:08] <Rockwood_> NoiseEee, o/
[22:36:20] <goddard> ya gonna be blocked by a signing key pair
[22:36:31] <goddard> to verify its actually sendgrid
[22:36:49] <goddard> but i just thought it was strange because ive never used file get contents like that
[22:45:58] *** Quits: cryocaustik (~cryocaust@user/cryocaustik) (Quit: Ping timeout (120 seconds))
[22:46:24] *** Joins: cryocaustik (~cryocaust@user/cryocaustik)
[22:47:56] <__adrian> goddard: php://input is just a file-like wrapper around the raw request body  https://php.net/wrappers.php  it's perfectly normal
[22:48:34] <goddard> ok well learn something new every dya
[22:49:07] <__adrian> every good day  :)
[22:50:06] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[22:51:30] *** Joins: ___Rockwood__ (~Rocky@user/rocky)
[22:51:39] *** ___Rockwood__ is now known as Rockwood
[22:53:53] *** Joins: dimbag (~dimbag@pppoe38h127.ppp.kmv.ru)
[22:55:05] *** Quits: Rockwood_ (~Rocky@user/rocky) (Ping timeout: 248 seconds)
[22:55:23] <dimbag> Hi
[22:58:57] *** Joins: s17 (~nobody@user/s17)
[22:59:32] *** Quits: sidy (~sidy@user/sidy) (Read error: Connection reset by peer)
[23:10:40] <Rockwood> good night cya
[23:11:15] *** Quits: Rockwood (~Rocky@user/rocky) (Quit: The Time is Over)
[23:15:16] *** Quits: funhouse (~funhouse@user/funhouse) (Quit: Client closed)
[23:20:49] *** Quits: kenoba (~kenoba@user/kenoba) (Quit: Ping timeout (120 seconds))
[23:21:12] *** Joins: kenoba (~kenoba@user/kenoba)
[23:36:37] *** Quits: kenoba (~kenoba@user/kenoba) (Read error: Connection reset by peer)
[23:36:59] *** Joins: kenoba (~kenoba@user/kenoba)
[23:51:48] *** Quits: kenoba (~kenoba@user/kenoba) (Ping timeout: 272 seconds)
[23:54:40] *** Joins: kenoba (~kenoba@user/kenoba)
