[00:01:00] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[00:01:41] *** Joins: evanextreme (~evan@2604:4080:1000:8150:e023:d964:d20f:a5e5)
[00:05:36] *** Joins: adip (~adip@crd88.neoplus.adsl.tpnet.pl)
[00:05:38] *** Joins: adip_ (~adip@crd88.neoplus.adsl.tpnet.pl)
[00:08:34] *** Joins: frm (~frm@user/frm)
[00:08:42] <pyzozord> what does it mean "unlike c, go has no pointer arthmetic"
[00:09:47] <seebs> it means you can't add to a pointer to get a pointer to something else
[00:09:55] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[00:11:04] <frm> in c, you can add or subtract a numeric value to a pointer (which is an address), to make it point to another location in memory
[00:11:49] <frm> e.g. if p points to the beginning of an array, *p is the first element of the array, *(p+1) is the second, etc.
[00:14:19] <pyzozord> so in other words in go a pointer will always point to the same exact memory
[00:15:24] <frm> yes, for all intents and purposes it is like that. you can circumvent this behavior using the unsafe package, but if you do that you are stepping out of the safety mechanisms provided by the language.
[00:15:52] <pyzozord> got it, thanks
[00:15:59] <frm> you're welcome!
[00:16:42] *** Joins: rednul (~rednul@mc.emailserverz.com)
[00:17:46] <b0nn> just one thing to note, Go also has unsafe pointers, and those you can do addition on
[00:18:10] <b0nn> but that's more a trivia knowledge thing than "you will use these with this feature"
[00:18:34] <pyzozord> are unsafe pointers part of the syntax or part of the unsafe package
[00:18:44] <b0nn> unsafe package
[00:19:13] <frm> you have to use the unsafe package, see for example this question on SO: https://stackoverflow.com/questions/32700999/pointer-arithmetic-in-go
[00:20:13] <b0nn> pyzozord: as I say, you won't ever use them, but I was just pointing out that they do exist with that feature
[00:21:03] <pyzozord> b0nn: thanks, I do like to get into the nitty gritty, even if I won't use it
[00:21:13] <pyzozord> btw what is "uintptr"?
[00:21:45] *** Quits: mrniranjan (~mniranja@103.208.71.181) (Ping timeout: 252 seconds)
[00:21:51] <pyzozord> it seems like the type for normal go pointers? I'm not sure how to understand it
[00:22:24] <b0nn> it's the address in a pointer, it's treated differently to a uint
[00:22:30] <frm> uintptr is the type that go uses to represents a generic, untyped pointer
[00:24:46] <frm> uintptr is platform-dependent and it is guaranteed to be big enough to store a pointer on the platform your program is running on
[00:25:11] <b0nn> uhhh a pointer stores a pointer
[00:25:36] <b0nn> uintptr is just the address
[00:25:50] <b0nn> you need to convert it back to a pointer to use it as one
[00:26:36] <frm> b0nn i had to double-check this, but the wording seems to be consistent. according to the language docs, a uintptr is "an unsigned integer large enough to store the uninterpreted bits of a pointer value"
[00:27:28] <pyzozord> so go pointers in runtime have type uintptr
[00:27:28] <b0nn> try and use one as a pointer
[00:27:42] <pyzozord> but in compile type they will have type *Foo
[00:29:40] <b0nn> https://github.com/golang/go/blob/master/src/unsafe/unsafe.go#L51
[00:29:47] <b0nn> Converting a Pointer to a uintptr produces the memory address of the value
[00:29:58] <b0nn> pointed at, as an integer. The usual use for such a uintptr is to print it.
[00:30:05] <b0nn> It's the address.
[00:30:30] <pyzozord> does normal go pointer have any more data in runtime than just the address?
[00:30:31] <b0nn> And the next comment: Conversion of a uintptr back to Pointer is not valid in general.
[00:30:32] <frm> at this point is a matter of semantics. at the lower level, the bit representation of a uintptr is the same of a *Foo, if they point to the same address in memory. what changes is that by converting a *Foo to a uintptr you let go of the type system.
[00:30:50] <pyzozord> I suppose maybe it does, maybe it has type information in runtime too
[00:30:56] <seebs> note that the pointer is essentially immediately invalid, like, if you obtain it, and store it, by the time you can do anything else, it's no longer meaningfully a valid pointer that you could convert back to a pointer type and expect it to work.
[00:30:59] *** Joins: mrniranjan (~mniranja@103.208.71.133)
[00:31:27] <b0nn> It's literally the address, not the value stored at the address.
[00:31:31] <seebs> in general the simple answer is "you should completely ignore uintptr until you know a lot more about it, and once you know a lot more about it, you should keep ignoring it because then you'll know *why* to ignore it"
[00:31:53] <frm> i can stand behind this statement ;)
[00:32:02] <seebs> and to be clear, no, pointers don't have type uintptr in runtime. they always have to have pointer types.
[00:32:09] <b0nn> Again, the next comment down A uintptr is an integer, not a reference.
[00:32:22] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[00:32:22] <seebs> the distinction matters because the compiler and runtime track which locations in memory hold pointers, and which hold non-pointers.
[00:32:24] <pyzozord> yes yes I get that, that doesn't satiate my curiosity though, I like to understand this stuff indepth if I can
[00:32:26] <seebs> and uintptr is a non-pointer
[00:32:50] <seebs> and because it's a non-pointer, it does not enjoy the assurances that we get on pointers, like that their storage won't be garbage-collected out from under us.
[00:33:16] <b0nn> or replaced
[00:33:27] <seebs> so, pointers in runtime have specific pointer types, in general, or possibly the special type unsafe.Pointer, which is still known to be a pointer but doesn't have a specific type that it points to.
[00:34:25] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[00:34:32] <pyzozord> so all objects in go lang will have bit representation of [metadata_including_type, value]
[00:35:02] <seebs> not really
[00:35:04] <pyzozord> and normal pointers will have [metadata_including_*Foo_type, uintptr]
[00:35:04] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[00:35:09] <foobaz> no, since go is staticly typed, the metadata doesn't need to be stored at runtime
[00:35:10] <seebs> definitely not
[00:35:23] <seebs> there is in fact information about their type, but it's not stored in the object, it's stored in the code
[00:35:29] <seebs> which knows which types it's storing in which locations
[00:35:46] *** Quits: rvalue (~rvalue@user/rvalue) (Read error: Connection reset by peer)
[00:35:48] <pyzozord> it must be stored in the memory somewhere, otherwise reflect package wouldn't work
[00:35:54] <seebs> so there's data being created that has flags indicating which parts are pointers, and the reflection stuff all works, but that doesn't mean that the type information is stored in or with the object
[00:36:00] *** Joins: rvalue (~rvalue@user/rvalue)
[00:36:12] <b0nn> hmm reflect is a weird beast that causes some serious misunderstandings
[00:36:15] <seebs> the reflect package works on *interfaces*
[00:36:23] <seebs> and *interfaces* store type information and a pointer to the actual data
[00:36:45] <seebs> pointers don't have metadata stored with them, it's just that any code generated for *using* a pointer will have the type information available when the code is generated.
[00:37:03] <seebs> so the code the compiler generates can immediately insert the correct metadata inline if it needs it, instead of looking it up in memory.
[00:37:17] <pyzozord> I see so reflect package cannot give me type of my pointer in runtime?
[00:37:20] <foobaz> when you convert a variable to an interface type, like when you pass it to a reflect function, that's when it adds the runtime type information
[00:37:24] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[00:37:35] *** Joins: amk (~amk@109.255.169.126)
[00:37:46] <seebs> reflect package can give you the type of a pointer, because *when you pass the pointer to it, the code doing so embeds the type information*
[00:37:58] <seebs> it's all smoke and mirrors
[00:38:02] <b0nn> reflect provides a /reflection/
[00:38:17] <foobaz> when you pass a pointer to reflect, the compiled code combines the runtime value of the pointer with the type known at compile time, it's like passing a const int
[00:38:43] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[00:38:53] *** Joins: amk (~amk@109.255.169.126)
[00:38:54] <foobaz> if you never pass your pointer to something that takes an interface type, the type information is never stored anywhere
[00:39:10] <pyzozord> I see so indeed except interfaces all objects do not have runtime information, the reflect package will "bake in" the type information during compilation for all non-interface objects. Interfaces hold runtime type information.
[00:39:20] <seebs> basically, yeah
[00:39:24] <pyzozord> s/Interaces hold/Only interfaces hold/
[00:40:09] <foobaz> yes exactly
[00:40:18] <b0nn> https://github.com/golang/go/blob/c016133c50512e9a83e7442bd7ac614fe7ca62de/src/reflect/type.go
[00:40:20] <foobaz> it's a lot like C++ RTTI if you know anything about that
[00:40:28] <pyzozord> in that case it would follow that pointers do have uintptr type in runtime
[00:40:28] <foobaz> (run-time type information)
[00:40:49] <foobaz> no, they don't, they have the pointer type
[00:41:09] <foobaz> for one thing, uintptr would not encode the type being pointed to, which is important information
[00:41:59] <pyzozord> I mean pointers have the *Foo type in compilation sure, but as we just established non-interface objects do not carry type information into runtime
[00:42:01] <foobaz> the bit representation of a pointer is the same size as the bit representation of a uintptr, but other than that they are not identical
[00:42:07] <seebs> they don't "have uintptr type". they're just pointers. the *code generated* knows that they are pointers, and marks them as pointers when necessary, for instance when telling the gc what to scan
[00:42:26] <seebs> yes, but even then, the code *relating to* those objects knows about type information and does things based on it
[00:42:27] <seebs> so like
[00:42:39] <seebs> var u uintptr; return &x
[00:42:41] <seebs> er &u
[00:42:41] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[00:42:49] <seebs> this will cause the allocation of an object big enough to hold a uintptr
[00:42:51] <seebs> also!
[00:42:58] <seebs> the *garbage collector will know that it is not a pointer*
[00:42:59] <pyzozord> so what is uintptr for?
[00:43:01] <seebs> on the other hand
[00:43:09] <seebs> var x *int; return &x
[00:43:21] <seebs> this causes the allocation of an object the same size, but *the garbage collector will know that the object is a pointer*
[00:43:51] <foobaz> uintptr is for doing pointer arithmetic, which you don't often need to do
[00:44:05] <seebs> so even though the bits stored in memory holding the object itself might be the same, and there is no "type" data stored... the creation of the object actually caused a different bit to be written *somewhere else* in memory, which distinguishes between "is a pointer" and "is not a pointer"
[00:44:23] <seebs> yeah. uintptr is also sometimes used for interoperability with, say, C code.
[00:45:15] <foobaz> i use uintptr in a cgo opengl wrapper, since opengl takes pointer offsets, for it to do pointer arithmetic with
[00:45:40] <pyzozord> I see
[00:45:44] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[00:46:10] <foobaz> it is pretty rare to need uintptr, it's only included so you can do super low level stuff if you need to, but it's not something most programs ever need
[00:46:55] *** Quits: strubbl891941988 (~strubbl@ipbcc1859d.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[00:47:17] <pyzozord> got it
[00:47:25] <pyzozord> I try to be not most programmers
[00:47:27] <b0nn> I use them for discovering how badly I can code :)
[00:49:07] <seebs> any language can be an esolang if you try hard and believe in yourself
[00:49:34] <foobaz> it's not like uintptr is some powerful black magic that most people can't handle, it's actually legitimately not useful, even to skilled programmers
[00:52:21] *** Quits: nmollerup (~nmollerup@customer-2a00-7660-1612-0168-cd71-7ee7-6c17-8a93.ip6.gigabit.dk) (Quit: Leaving)
[00:52:55] *** Joins: amk (~amk@109.255.169.126)
[00:54:02] <b0nn> This codebase had 1.7% code test coverage when I started
[00:54:13] <b0nn> I've got it up to ~10%
[00:54:40] <b0nn> But I'm finding bug after bug from changes that didn't take into account other paths using the data
[00:55:03] *** Joins: rairden (~rairden@2603:9000:de04:9613::1a20)
[00:55:04] <b0nn> and I'm getting it in the neck for being "slow" because I'm having to check *everything*
[00:55:10] <foobaz> bugs in the original code, or bugs in the tests?
[00:55:16] <b0nn> in the code
[00:55:18] <Church> Hmm, any good way to bundle a C-based .so lib into/with a golang binary?
[00:55:21] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[00:55:31] *** Joins: amk (~amk@109.255.169.126)
[00:55:46] <b0nn> at one point someone refactored, they built a query, then just... walked away and never used it
[00:56:06] <b0nn> then in Spet last year they raised a bug about this thing not working
[00:56:11] <b0nn> Sept*
[00:56:52] <seebs> 1.7% test coverage
[00:56:53] <seebs> wow
[00:56:58] <seebs> that is possibly the lowest i've ever heard of
[00:57:16] <b0nn> I'm being actively told NOT to write tests by the owner/PM
[00:57:19] <analogsalad> it's basically not tested
[00:57:21] <Church> Wat
[00:57:23] <foobaz> Church: if it's C and you have the source, you can copy all of the source files into your go project, and use cgo to build it into the binary
[00:57:30] <Church> Oh awesome
[00:57:39] <seebs> why... why would you not write tests
[00:57:41] <Church> Was worried I was gonn have to rewrite this in Rust and use the Rust interface
[00:57:47] *** Joins: alwyn (~alwyn@user/alwyn)
[00:57:59] *** Quits: alwyn (~alwyn@user/alwyn) (Client Quit)
[00:58:00] <b0nn> they view it as time/$ cost
[00:58:03] <foobaz> Church: there may be a better way that uses the .so and the linker, not sure how to do that sorry
[00:58:14] <Church> foobaz: I'm assuming there are docs for this? It's a mixture of C and Rust iirc. Has both a plain C interface and Rust interface.
[00:58:21] <seebs> you know, six hours of debugging can save five minutes of reading the documentation
[00:58:30] <Church> b0nn: I mean yeah I get that, but tests are always good heh.
[00:58:32] <seebs> and a week of debugging can save you five or ten hours of writing reliable tests
[00:58:34] <Church> Guess some folks don't see that.
[00:58:40] <b0nn> and, like I say, the code is riddled with bugs, and it's taking me forever to work through things, but that's on me
[00:58:50] <foobaz> Church: my technique doesn't allow you to compile the rust, only the C
[00:58:57] <foobaz> for the docs, look up cgo on go.dev
[00:59:06] <b0nn> anyways - back to twitter to whine :)
[00:59:14] <Church> Rewrote some system daemons from nodeJS to Rust last August, most important part was the tests. Caught a good few bugs, both impl and just exisiting heh
[00:59:17] <foobaz> hopefully you don't need the rust, because your code code uses the C interface
[00:59:22] <foobaz> *your go code
[00:59:33] <Church> Yeah it's intermixed I think... guess I'll see
[00:59:53] <Church> Trying to compile in a remote replicating vfs for sqlite a coworker wrote.
[01:00:19] <Church> https://github.com/backtrace-labs/verneuil/
[01:00:49] *** Quits: ugjka (~ugjka@ugjka.net) (Quit: Rabooting the server https://ugjka.net)
[01:00:56] <foobaz> that sounds dangerously ACID noncompliant
[01:01:05] <foobaz> although i guess it's better than having no backup at all
[01:01:24] *** Joins: ugjka (~ugjka@ugjka.net)
[01:01:35] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[01:02:36] <Church> Afaik consistency was key.
[01:02:56] <Church> And it's held up, we're using this on some large datasets across our fleet metadata wise.
[01:03:06] <foobaz> impressive
[01:03:17] *** Quits: unautre (~unautre@omsk.bandar-log.dev) (Ping timeout: 240 seconds)
[01:03:56] <Church> Yeah we're doing some rad stuff with sqlite at work to speed up our custom db. Bit above me but the stuff I grokked is impressive.
[01:04:41] *** Joins: unautre (~unautre@omsk.bandar-log.dev)
[01:07:59] *** Joins: amk (~amk@109.255.169.126)
[01:10:46] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[01:14:20] *** Joins: masoudd_ (~masoudd@user/masoudd)
[01:15:03] *** evanextreme is now known as evanextreme[away
[01:17:24] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 240 seconds)
[01:17:34] <Church> foobaz: Yeah we've had it work on some 1-2GB+ sized db's. I want to fuzz it and see what the limit is now.
[01:18:35] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[01:18:57] *** Joins: LiftLeft2 (~LiftLeft@gateway/vpn/pia/liftleft)
[01:25:00] *** Quits: ovelny (~ovelny@user/ovelny) (Ping timeout: 252 seconds)
[01:26:17] *** Quits: LiftLeft2 (~LiftLeft@gateway/vpn/pia/liftleft) (Quit: Bye)
[01:26:58] *** Joins: ovelny (~ovelny@user/ovelny)
[01:30:34] *** Quits: ekathva (~ekathva@n3k02urgmuqvuf9nu-1.v6.elisa-mobile.fi) (Remote host closed the connection)
[01:32:52] *** Quits: achilleas (~ach@user/achilleas) (Quit: :wq)
[01:33:32] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[01:33:48] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 240 seconds)
[01:34:14] *** Joins: achilleas (ach@user/achilleas)
[01:35:24] *** Quits: marius_m (~marius_m@84.211.92.9) (Ping timeout: 240 seconds)
[01:37:51] *** Quits: admin123 (~harrymore@pool-71-125-21-97.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[01:38:12] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 252 seconds)
[01:46:48] <pyzozord> whats ^ in go?
[01:46:57] <pyzozord> is this a bitwise not?
[01:47:35] <rewt> isn't it xor?
[01:48:18] <rewt> yep, 7^5==2, xor
[01:48:47] <rewt> and also not
[01:48:55] <rewt> ^2==3
[01:49:07] <rewt> -3
[01:49:50] <pyzozord> what does unary xor do
[01:50:10] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[01:50:17] <foobaz> it's bitwise NOT
[01:50:29] *** Joins: ska (~ska@user/ska)
[01:50:40] <pyzozord> oh sorry missed message right above the example
[01:51:44] <ska> with go1.17.* i don't seem to need a GOROOT, it just works.. Is that new?
[01:52:10] <foobaz> i never needed a GOROOT before, either
[01:52:58] <ska> What about the workspace structure that has a 'github.com' or other folders, is that still needed?
[01:53:20] <foobaz> yes that's GOPATH
[01:53:44] <foobaz> GOROOT usually has a compiled-in default that doesn't need changing
[01:54:18] <braxas> is there an easy way to get `go env GOARCH` without go
[01:54:49] <ska> foobaz, I don't have any GOPATH env either..
[01:54:56] <fizzie> GOPATH *also* has a compiled-in default that you could use, it's just a bit of an intrusive one ($HOME/go).
[01:55:12] <fizzie> (And with modules, it's a lot less important anyway.)
[01:55:25] *** Quits: wolfshappen (~waff@irc.furworks.de) (Ping timeout: 256 seconds)
[01:55:32] <braxas> I want to use it to determine which of these to download: https://github.com/warrensbox/terraform-switcher/releases
[01:55:40] <fizzie> (It's just the default location for the module cache and the checksum database, pretty much.)
[01:56:30] <ska> fizzie: ok, yea i see ~/go is default. Its not too horribly intrusive.
[01:56:45] <ska> I suppose it could be ~/.go
[01:56:45] <rewt> braxas, if you know your OS and CPU, it's usually easy to tell
[01:57:01] <fizzie> (Oh, and I guess it's also still the default for GOBIN, where `go install` will put executables into.)
[01:57:01] <braxas> yes but I want to script it
[01:57:17] <b0nn> braxas: uname -rms?
[01:57:39] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[01:57:40] <b0nn> and you can script the `go`call
[01:57:43] <pyzozord> I do ~/.go
[01:57:51] <pyzozord> ~/go is very selfish
[01:57:52] <braxas> Linux 5.16.5-200.fc35.x86_64 x86_64 - it does not contain amd64 - I want the same value as would be returned from `go env GOARCH`
[01:57:56] <foobaz> why are you hiding your source code from yourself? :)
[01:58:06] <fizzie> There's no source code in my $GOPATH.
[01:58:14] <braxas> I just don't want to install go because it is in construction of a docker image
[01:58:51] <fizzie> Well, source code I'd look at, anyway. I guess there's some under all those pkg/mod/... directories.
[01:58:55] <b0nn> lol, so you want to know what the output of go env GOARCh but you don't want to install go
[01:58:57] <foobaz> fizzie: how do you import the packages of your program? or do you put everything in the main package?
[01:58:59] <pyzozord> I don't put source in ~/.go only package cache seems to be there
[01:59:10] <pyzozord> and some bins
[01:59:27] <fizzie> No, I put things in modules. It's the year 2022, after all.
[01:59:31] <fizzie> (Almost wrote 2021 there.)
[01:59:51] <b0nn> There's no reason you can't do both
[02:00:09] <b0nn> (use modules *and* have code in GOPATH
[02:00:24] <pyzozord> foobaz: when you said "main package" did you mean "main module"?
[02:00:29] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:00:48] <fizzie> I guess you could. But I had a ~/src already, and didn't seem a need to stuff all Go code into a dedicated location.
[02:00:53] <b0nn> ooo go1.18rc1 just dropped
[02:01:06] <pyzozord> foobaz: no sorry, nevermind
[02:01:29] <pyzozord> a module can export multiple packages right?
[02:02:13] *** Joins: Atque (~Atque@user/atque)
[02:02:58] <fizzie> Yes. I mean, they're not specifically exported, but a module can contain multiple packages.
[02:09:12] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[02:11:16] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[02:14:05] *** Quits: lxdr (~lxdr@user/lxdr) (Remote host closed the connection)
[02:14:09] *** Quits: frm (~frm@user/frm) (Quit: frm)
[02:14:11] *** Quits: evanextreme[away (~evan@2604:4080:1000:8150:e023:d964:d20f:a5e5) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:14:14] *** Joins: k8yun (~k8yun@user/k8yun)
[02:18:31] *** Joins: rcernin (~rcernin@124.190.132.36)
[02:27:52] *** Quits: arinov_ (~arinov@213.194.126.155) (Ping timeout: 272 seconds)
[02:31:29] *** Quits: greatgatsby_ (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-7.dsl.bell.ca) (Read error: Connection reset by peer)
[02:33:45] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 252 seconds)
[02:34:01] *** Joins: ofh (~felix@2001:44b8:30c9:336:6f0:21ff:fe3c:d4d7)
[02:34:17] *** Quits: yelnah (~felix@2001:44b8:3084:172:6f0:21ff:fe3c:d4d7) (Ping timeout: 240 seconds)
[02:39:50] <lilgopher> why are maps pointers unlike other data structures in Go? https://go.dev/blog/maps
[02:40:57] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[02:41:32] <seebs> strictly speaking, they're not pointers, but they're reference-y, and the answer is, because they functionally have to be to work
[02:42:45] <lilgopher> hmm
[02:43:37] <lilgopher> I guess I will have to look under the hood a little to try to understand. It always feels weird having to remember interfaces and maps are different than the others
[02:43:45] <seebs> basically, the map data structure is large and unwieldy and is just gonna be a pointer to something anyway
[02:44:06] <seebs> because it's a messy data structure, and having a small map-shaped reference that you hand around is a lot more convenient
[02:44:52] *** Quits: analogsalad (~analogsal@user/analogsalad) (Quit: bye)
[02:44:55] <lilgopher> for interfaces it makes sense, they are IIRC a pointer and a type I think, but for maps I will have to look more
[02:45:01] *** Quits: leah2 (~leah@vuxu.org) (Ping timeout: 240 seconds)
[02:45:28] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[02:46:04] <lilgopher> seebs: so they assume you just never want to pass a copy of a map because of the size?
[02:46:25] <lilgopher> or copying it is a pita?
[02:46:41] <foobaz> the trouble is, a map is not a single contiguous area of memory, it's many allocations linked together
[02:46:46] <foobaz> so yea, copying it is a pita
[02:49:47] <b0nn> What am I doing wrong here https://go.dev/play/p/AVa7Yw4Fhb8 - I cant get the body into the FormValue for the test
[02:51:00] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 240 seconds)
[02:51:03] <seebs> yeah, "many allocations linked together" is probably a significant component of that.
[02:51:15] <seebs> it has to change in size as you write to it.
[02:51:25] <seebs> same reason that slices are sort-of-referencey
[02:51:50] <seebs> except that for slices, we get the header as the "object", because it's just three words.
[02:52:02] <lilgopher> b0nn: did you see you are missing a comma and a parenthesis?
[02:52:05] <seebs> but a map that required a similar append, etc., operation would suck
[02:52:21] <b0nn> lilgopher: possibly a copy/paste error
[02:52:36] <lilgopher> that's what I thought but just in case ;)
[02:52:45] <b0nn> but I can't get the data to show up in the FormValue, I can get it to show up in the request in other spots though
[02:54:39] <fizzie> There's also that rule that a zero value of any type must be an all-bits-zero structure. Easy to make that happen when the "value" is just a pointer. Otherwise they'd have to design the underlying structure (`runtime.hmap`) with that in mind.
[02:55:15] <fizzie> https://dave.cheney.net/2017/04/30/if-a-map-isnt-a-reference-variable-what-is-it "In the very early days what we call maps now were written as pointers, so you wrote *map[int]int. We moved away from that when we realized that no one ever wrote `map` without writing `*map`."
[02:56:09] *** Quits: jjonah (~jjonah@p200300d5d727ec00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:57:20] *** Joins: leah2 (~leah@vuxu.org)
[03:03:48] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 240 seconds)
[03:05:02] *** Quits: braxas (sid508886@id-508886.lymington.irccloud.com) (Ping timeout: 240 seconds)
[03:05:02] *** Quits: telemachus (sid2004@id-2004.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[03:05:21] *** Quits: theckman (sid295081@user/theckman) (Ping timeout: 245 seconds)
[03:05:21] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (Ping timeout: 250 seconds)
[03:05:21] *** Quits: hjmcnew_____ (sid86092@id-86092.tinside.irccloud.com) (Ping timeout: 250 seconds)
[03:05:25] *** Quits: Manouchehri (sid384576@id-384576.hampstead.irccloud.com) (Ping timeout: 240 seconds)
[03:05:32] *** Quits: xoebus (sid61319@id-61319.uxbridge.irccloud.com) (Ping timeout: 240 seconds)
[03:05:32] *** Quits: recursion (sid504862@id-504862.ilkley.irccloud.com) (Ping timeout: 240 seconds)
[03:05:38] *** Quits: r0bby (r0bby@user/r0bby) (Ping timeout: 260 seconds)
[03:05:38] *** Quits: computerquip (sid423484@user/computerquip) (Ping timeout: 260 seconds)
[03:05:46] *** Quits: dba (uid533975@id-533975.hampstead.irccloud.com) (Ping timeout: 245 seconds)
[03:05:46] *** Quits: nikki93 (sid200244@id-200244.tinside.irccloud.com) (Ping timeout: 245 seconds)
[03:05:46] *** Quits: soren (sid124229@id-124229.uxbridge.irccloud.com) (Ping timeout: 245 seconds)
[03:05:46] *** Quits: griffinmb (sid410590@id-410590.helmsley.irccloud.com) (Ping timeout: 245 seconds)
[03:05:47] *** Quits: jamra_ (sid16103@id-16103.ilkley.irccloud.com) (Ping timeout: 250 seconds)
[03:05:49] *** Quits: liam__ (sid7517@id-7517.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[03:05:59] *** Quits: mjl (sid16781@id-16781.tinside.irccloud.com) (Read error: Connection reset by peer)
[03:05:59] *** Quits: eric_hill (sid323132@id-323132.tinside.irccloud.com) (Write error: Connection reset by peer)
[03:05:59] *** Quits: nescafe1001 (sid211018@id-211018.tinside.irccloud.com) (Read error: Connection reset by peer)
[03:05:59] *** Quits: qaisjp (sid26374@user/qaisjp) (Read error: Connection reset by peer)
[03:05:59] *** Quits: Balooga (sid407689@id-407689.lymington.irccloud.com) (Read error: Connection reset by peer)
[03:05:59] *** Quits: st3fan (sid43079@id-43079.lymington.irccloud.com) (Read error: Connection reset by peer)
[03:05:59] *** Quits: else- (sid23924@tinside.irccloud.com) (Read error: Connection reset by peer)
[03:06:00] *** Quits: trollixx (sid289131@id-289131.uxbridge.irccloud.com) (Read error: Connection reset by peer)
[03:06:00] *** Quits: jimcroft_______ (sid148498@id-148498.uxbridge.irccloud.com) (Read error: Connection reset by peer)
[03:06:00] *** Quits: wangledorf_ (sid505185@id-505185.ilkley.irccloud.com) (Read error: Connection reset by peer)
[03:06:00] *** Quits: bw (sid2730@user/betawaffle) (Read error: Connection reset by peer)
[03:06:00] *** Quits: castlelore (sid341703@id-341703.ilkley.irccloud.com) (Read error: Connection reset by peer)
[03:06:00] *** Quits: fdv (sid27570@id-27570.helmsley.irccloud.com) (Read error: Connection reset by peer)
[03:06:00] *** Quits: kubblai (sid478659@fedora/kubblai) (Read error: Connection reset by peer)
[03:06:00] *** Quits: mustafa (sid502723@rockylinux/releng/mustafa) (Read error: Connection reset by peer)
[03:06:00] *** Quits: vds__ (sid12483@id-12483.helmsley.irccloud.com) (Write error: Connection reset by peer)
[03:06:00] *** Quits: Shrike (sid305680@id-305680.helmsley.irccloud.com) (Write error: Connection reset by peer)
[03:06:01] *** Quits: chromis (sid150893@id-150893.tinside.irccloud.com) (Read error: Connection reset by peer)
[03:06:01] *** Quits: derfj (sid19429@id-19429.tinside.irccloud.com) (Read error: Connection reset by peer)
[03:06:02] *** Quits: avery (sid501608@id-501608.uxbridge.irccloud.com) (Read error: Connection reset by peer)
[03:06:02] *** Quits: Teckla (uid172075@user/teckla) (Read error: Connection reset by peer)
[03:06:02] *** Quits: jakesyl__ (sid56879@id-56879.hampstead.irccloud.com) (Read error: Connection reset by peer)
[03:06:02] *** Quits: flukes (sid527792@user/flukes) (Read error: Connection reset by peer)
[03:06:02] *** Quits: pl (sid98063@id-98063.helmsley.irccloud.com) (Read error: Connection reset by peer)
[03:06:09] *** Joins: jamra_ (sid16103@id-16103.ilkley.irccloud.com)
[03:06:16] *** Joins: vds__ (sid12483@2a03:5180:f:1::30c3)
[03:06:21] *** Joins: trollixx (sid289131@id-289131.uxbridge.irccloud.com)
[03:06:23] *** Joins: else- (sid23924@id-23924.tinside.irccloud.com)
[03:06:23] *** Joins: Teckla (sid172075@id-172075.uxbridge.irccloud.com)
[03:06:23] *** Joins: Balooga (sid407689@id-407689.lymington.irccloud.com)
[03:06:23] *** Joins: soren (sid124229@id-124229.uxbridge.irccloud.com)
[03:06:24] *** Joins: nescafe1001 (sid211018@id-211018.tinside.irccloud.com)
[03:06:24] *** Joins: kubblai (sid478659@id-478659.helmsley.irccloud.com)
[03:06:24] *** Joins: dba (sid533975@id-533975.hampstead.irccloud.com)
[03:06:26] *** Quits: kubblai (sid478659@id-478659.helmsley.irccloud.com) (Changing host)
[03:06:26] *** Joins: kubblai (sid478659@fedora/kubblai)
[03:06:26] *** Joins: avery (sid501608@id-501608.uxbridge.irccloud.com)
[03:06:27] *** Quits: Teckla (sid172075@id-172075.uxbridge.irccloud.com) (Changing host)
[03:06:27] *** Joins: Teckla (sid172075@user/teckla)
[03:06:28] *** Joins: computerquip (sid423484@user/computerquip)
[03:06:28] *** Joins: braxas (sid508886@id-508886.lymington.irccloud.com)
[03:06:29] *** Joins: liam__ (sid7517@id-7517.helmsley.irccloud.com)
[03:06:29] *** Joins: fdv (sid27570@2a03:5180:f:1::6bb2)
[03:06:29] *** Joins: Manouchehri (sid384576@id-384576.hampstead.irccloud.com)
[03:06:31] *** Quits: normen (~normen@pd9eec481.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[03:06:33] *** Joins: pl (sid98063@id-98063.helmsley.irccloud.com)
[03:06:37] *** Joins: recursion (sid504862@id-504862.ilkley.irccloud.com)
[03:06:42] *** Joins: castlelore (sid341703@2a03:5180:f:3::5:36c7)
[03:06:42] *** Joins: nikki93 (sid200244@id-200244.tinside.irccloud.com)
[03:06:42] *** Joins: griffinmb (sid410590@id-410590.helmsley.irccloud.com)
[03:06:43] *** Joins: jakesyl__ (sid56879@2a03:5180:f:4::de2f)
[03:06:44] *** Joins: eric_hill (sid323132@2a03:5180:f::4:ee3c)
[03:06:47] *** Joins: mjl (sid16781@2a03:5180:f::418d)
[03:06:48] *** Joins: jimcroft_______ (sid148498@id-148498.uxbridge.irccloud.com)
[03:06:49] *** Joins: normen_ (~normen@p200300d717235c00c8e00fdc4007a670.dip0.t-ipconnect.de)
[03:06:50] *** Joins: telemachus (sid2004@id-2004.helmsley.irccloud.com)
[03:06:51] *** Joins: st3fan (sid43079@2a03:5180:f:2::a847)
[03:06:52] *** Joins: flukes (sid527792@id-527792.helmsley.irccloud.com)
[03:06:52] *** Quits: flukes (sid527792@id-527792.helmsley.irccloud.com) (Changing host)
[03:06:52] *** Joins: flukes (sid527792@user/flukes)
[03:06:54] *** Joins: xoebus (sid61319@2a03:5180:f:5::ef87)
[03:06:54] *** Joins: hjmcnew_____ (sid86092@2a03:5180:f::1:504c)
[03:06:55] *** Joins: sa (sid1055@2a03:5180:f::41f)
[03:06:55] *** Joins: chromis (sid150893@2a03:5180:f::2:4d6d)
[03:06:55] *** Joins: bw (sid2730@user/betawaffle)
[03:06:56] *** Joins: Shrike (sid305680@2a03:5180:f:1::4:aa10)
[03:06:56] *** Joins: r0bby (r0bby@user/r0bby)
[03:06:56] *** Joins: theckman (sid295081@user/theckman)
[03:07:06] *** Joins: qaisjp (sid26374@user/qaisjp)
[03:07:06] *** Joins: mustafa (sid502723@rockylinux/releng/mustafa)
[03:07:06] *** Joins: derfj (sid19429@id-19429.tinside.irccloud.com)
[03:07:10] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[03:07:12] *** Joins: wangledorf_ (sid505185@id-505185.ilkley.irccloud.com)
[03:08:28] *** Quits: n-st (~n-st@user/n-st) (Quit: ␄)
[03:08:43] *** Joins: n-st (~n-st@user/n-st)
[03:11:20] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[03:14:15] *** Joins: crashrep (~crashrep@user/crashrep)
[03:16:29] <lilgopher> that's pretty funny
[03:22:08] *** Quits: jjakob (~quassel@user/jjakob) (Ping timeout: 252 seconds)
[03:22:51] *** Joins: jjakob (~quassel@user/jjakob)
[03:23:57] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[03:24:35] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Read error: Connection reset by peer)
[03:29:03] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[03:38:46] *** Quits: pmcnabb (~pmcnabb@user/pmcnabb) (Quit: Ping timeout (120 seconds))
[03:39:10] *** Joins: pmcnabb (~pmcnabb@user/pmcnabb)
[03:39:50] *** Joins: KDDLB4 (kevin@user/kddlb)
[03:39:59] *** Joins: buffet3 (~buffet@buffet.sh)
[03:40:01] *** Joins: L1Cafe7 (~L1Cafe@user/l1cafe)
[03:40:36] *** Joins: lucerne0 (~lucerne@ip202.ip-51-178-215.eu)
[03:40:43] *** Joins: Bitflux (~byte@byteflux.net)
[03:41:07] *** Quits: jlaffaye_ (~jlaffaye@user/jlaffaye) (Ping timeout: 256 seconds)
[03:41:07] *** Quits: dvdmuckle (~dvdmuckle@user/dvdmuckle) (Ping timeout: 256 seconds)
[03:41:09] *** Quits: masoudd_ (~masoudd@user/masoudd) (Read error: Connection reset by peer)
[03:41:14] *** Joins: dvdmuckle_ (~dvdmuckle@user/dvdmuckle)
[03:41:20] *** Joins: jlaffaye (~jlaffaye@user/jlaffaye)
[03:41:34] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Ping timeout: 250 seconds)
[03:41:35] *** lucerne0 is now known as lucerne
[03:41:35] *** Quits: tiferrei (~tiferrei@user/tiferrei) (Ping timeout: 240 seconds)
[03:41:38] *** dvdmuckle_ is now known as dvdmuckle
[03:41:41] *** Quits: L1Cafe (~L1Cafe@user/l1cafe) (Ping timeout: 256 seconds)
[03:41:41] *** Quits: buffet (~buffet@buffet.sh) (Ping timeout: 256 seconds)
[03:41:41] *** Quits: Byteflux (~byte@byteflux.net) (Ping timeout: 256 seconds)
[03:41:41] *** Quits: KDDLB (kevin@user/kddlb) (Ping timeout: 256 seconds)
[03:41:41] *** buffet3 is now known as buffet
[03:41:41] *** KDDLB4 is now known as KDDLB
[03:43:24] *** Quits: ShotokanZH (~ShotokanZ@aitch.me) (Ping timeout: 240 seconds)
[03:43:34] *** Joins: L1Cafe (~L1Cafe@user/l1cafe)
[03:44:24] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Read error: Connection reset by peer)
[03:44:44] *** Quits: crashrep (~crashrep@user/crashrep) (Remote host closed the connection)
[03:45:05] *** Joins: crashrep (~crashrep@user/crashrep)
[03:45:24] *** Quits: L1Cafe7 (~L1Cafe@user/l1cafe) (Ping timeout: 240 seconds)
[03:45:40] *** Joins: tyson2` (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[03:46:44] *** Joins: ShotokanZH (~ShotokanZ@aitch.me)
[03:48:56] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Ping timeout: 272 seconds)
[03:52:00] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[03:52:29] *** Joins: k8yun (~k8yun@user/k8yun)
[03:55:35] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 240 seconds)
[03:55:44] *** Joins: bindu_ (~bindu@user/bindu)
[03:57:32] *** Joins: lungaro_ (~lungaro@99-117-118-33.lightspeed.sndgca.sbcglobal.net)
[03:57:42] *** bindu_ is now known as bindu
[03:57:53] *** Quits: lungaro (~lungaro@99-117-118-33.lightspeed.sndgca.sbcglobal.net) (Remote host closed the connection)
[03:57:53] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Read error: Connection reset by peer)
[03:57:53] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[03:57:54] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Quit: Ping timeout (120 seconds))
[03:58:43] *** Quits: clemens3 (~clemens@225.40.150.83.ftth.as8758.net) (Ping timeout: 268 seconds)
[03:59:03] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[04:00:21] *** Quits: shtirlic_ (~shtirlic@178.71.248.137) (Ping timeout: 272 seconds)
[04:00:22] *** Joins: clemens3 (~clemens@225.40.150.83.ftth.as8758.net)
[04:19:28] *** Parts: mrniranjan (~mniranja@103.208.71.133) ()
[04:20:18] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[04:27:53] *** Quits: eroux (~eroux@102-65-81-186.ftth.web.africa) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:30:12] *** Quits: tyson2` (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Ping timeout: 240 seconds)
[04:30:52] *** Joins: tyson2` (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[04:31:33] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 256 seconds)
[04:33:34] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.4)
[04:35:00] *** Quits: daved (~daved@162.67.197.35.bc.googleusercontent.com) (Quit: So long, and thanks for all the fish.)
[04:36:26] *** Quits: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de) (Ping timeout: 272 seconds)
[04:39:00] *** Quits: tyson2` (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Ping timeout: 240 seconds)
[04:39:49] *** Joins: tyson2``` (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[04:42:18] *** Quits: ovelny (~ovelny@user/ovelny) (Quit: leaving)
[04:44:03] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[04:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:37] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:47:50] *** Quits: tyson2``` (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Ping timeout: 272 seconds)
[04:50:17] *** Quits: hub (~hub@user/hub) (Quit: -)
[04:50:50] *** Joins: hub (~hub@user/hub)
[04:51:09] *** Joins: Guest83 (~Guest83@104-184-54-53.lightspeed.hstntx.sbcglobal.net)
[04:53:33] *** Quits: k8yun (~k8yun@user/k8yun) (Read error: Connection reset by peer)
[04:53:59] *** Joins: k8yun (~k8yun@user/k8yun)
[04:54:20] *** Quits: moog (~moog@107.77.244.68) (Remote host closed the connection)
[04:55:07] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:56:49] *** Joins: moog (~moog@107.77.244.68)
[04:57:15] *** Parts: Guest83 (~Guest83@104-184-54-53.lightspeed.hstntx.sbcglobal.net) ()
[05:02:35] *** Quits: easbarba (~user@2804:1b2:80:171:419f:96dd:efe2:3a4c) (Remote host closed the connection)
[05:11:47] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 256 seconds)
[05:12:59] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[05:18:14] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 272 seconds)
[05:22:40] *** Quits: k8yun (~k8yun@user/k8yun) (Ping timeout: 272 seconds)
[05:24:15] *** Quits: haniaF (~haniaF@83.24.223.148.ipv4.supernova.orange.pl) (Ping timeout: 256 seconds)
[05:24:56] *** Joins: haniaF (~haniaF@79.191.92.1.ipv4.supernova.orange.pl)
[05:26:16] *** Joins: leitz (~LeamHall@072-182-158-027.res.spectrum.com)
[05:27:58] *** Quits: fjb (~fjb@2804:378:91d5:800:c731:237f:11da:3731) (Quit: fjb)
[05:28:26] <leitz> I could use some project restructuring wisdom. I have a web app that uses one of its own packages (https://github.com/makhidkarun/crewgen), and the web app is on the project root directory. For my next trick I want to make a CLI app that uses the same packages. Should I put the web stuff into a separate pkg, or put the common packages in a totally different repo, or ???
[05:31:38] *** Joins: k8yun (~k8yun@user/k8yun)
[05:31:50] <leitz> The other issue is that one of the imported packages needs data files, and I have no idea how to handle those outside of "run in the same directory".
[05:32:54] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[05:33:23] *** Joins: k8yun_ (~k8yun@user/k8yun)
[05:34:36] *** Quits: haniaF (~haniaF@79.191.92.1.ipv4.supernova.orange.pl) (Ping timeout: 240 seconds)
[05:34:39] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[05:34:43] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[05:35:03] *** Joins: haniaF (~haniaF@83.24.216.182.ipv4.supernova.orange.pl)
[05:35:39] *** Quits: Kyros (~kyros@user/kyros) (Quit: ZNC 1.8.2 - https://znc.in)
[05:35:52] *** Joins: NotKyros (~kyros@user/kyros)
[05:36:16] *** NotKyros is now known as Kyros
[05:37:52] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 272 seconds)
[05:37:52] *** Quits: k8yun (~k8yun@user/k8yun) (Ping timeout: 272 seconds)
[05:38:43] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[05:40:31] *** Joins: andlabs (~andlabs@70.107.171.168)
[05:43:31] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 256 seconds)
[05:44:31] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[05:49:16] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 272 seconds)
[05:49:23] <DHowett> leitz: as of go1.16 you can use the embed directive (docs for package embed will help- https://pkg.go.dev/embed) to build the data files into the final binary -- it presents an interface that is compatible with various things that need filesystems
[05:50:07] <DHowett> leitz: a common project layout is to throw things into $/cmd/x; you can keep the web package at the root like that, if you want, but you could also easily migrate it to $/cmd/whatever_server (naming is not my best quality)
[05:50:24] <leitz> DHowett, thanks! I'm torn between embedding and giving the user the option to make their own files.
[05:50:27] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[05:51:44] <DHowett> you could always do both! present a fs.FS (package io/fs) to consumers and late-bind on the decision of whether to use the "nearby" files or the embedded ones (:
[05:56:09] * leitz makes notes
[05:58:49] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 256 seconds)
[06:00:36] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[06:02:02] *** Quits: leitz (~LeamHall@072-182-158-027.res.spectrum.com) (Quit: nappy time)
[06:03:26] <crashrep> file system embedding is perhaps one of the coolest things about golang i have ever learned, unfortunately i don't have any good uses for it in my projects :P
[06:03:33] *** Quits: justGhost (~justache@user/justache) (Remote host closed the connection)
[06:03:40] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:3511:c1b2:b4e7:7f1c)
[06:05:03] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 256 seconds)
[06:05:06] *** Joins: justGhost (~justache@user/justache)
[06:06:25] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[06:07:35] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:c9dd:301:29f7:88f5) (Ping timeout: 250 seconds)
[06:10:10] *** Quits: rcernin (~rcernin@124.190.132.36) (Ping timeout: 272 seconds)
[06:12:04] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 272 seconds)
[06:13:08] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[06:17:24] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 240 seconds)
[06:18:57] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[06:24:06] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 272 seconds)
[06:24:45] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[06:27:29] *** Quits: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de) (Remote host closed the connection)
[06:29:48] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 272 seconds)
[06:30:34] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[06:33:36] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 272 seconds)
[06:35:30] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 272 seconds)
[06:36:23] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[06:36:37] *** Joins: rcernin (~rcernin@124.190.132.36)
[06:41:12] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 272 seconds)
[06:42:12] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[06:49:49] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 256 seconds)
[06:51:28] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[06:53:15] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:56:03] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 256 seconds)
[06:57:47] *** Joins: DrAnything (uid538291@id-538291.lymington.irccloud.com)
[07:05:07] *** Joins: theo3 (~theo@user/theo)
[07:05:28] *** Quits: theo (~theo@user/theo) (Read error: Connection reset by peer)
[07:05:28] *** theo3 is now known as theo
[07:11:55] *** Quits: dante443 (~dante443@99-88-166-99.lightspeed.milwwi.sbcglobal.net) (Ping timeout: 256 seconds)
[07:27:47] *** Joins: bluedust (~bluedust@103.161.144.138)
[07:30:12] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:3511:c1b2:b4e7:7f1c) (Ping timeout: 240 seconds)
[07:30:45] *** Quits: greypw254 (~greypw2@grey.pw) (Remote host closed the connection)
[07:31:02] *** Joins: adtac (~adtac@192.159.181.180)
[07:31:08] *** Joins: greypw254 (~greypw2@grey.pw)
[07:31:49] *** Quits: greypw254 (~greypw2@grey.pw) (Remote host closed the connection)
[07:32:12] *** Joins: greypw254 (~greypw2@grey.pw)
[07:32:41] *** Quits: greypw254 (~greypw2@grey.pw) (Remote host closed the connection)
[07:33:02] *** Joins: masoudd (~masoudd@user/masoudd)
[07:33:05] *** Joins: greypw254 (~greypw2@grey.pw)
[07:33:30] *** Quits: greypw254 (~greypw2@grey.pw) (Remote host closed the connection)
[07:33:52] *** Joins: greypw254 (~greypw2@grey.pw)
[07:34:03] *** Quits: greypw254 (~greypw2@grey.pw) (Remote host closed the connection)
[07:34:43] *** Joins: k8yun__ (~k8yun@user/k8yun)
[07:37:48] *** Joins: evanextreme (~evan@2604:4080:1000:8150:e023:d964:d20f:a5e5)
[07:38:12] *** Quits: k8yun_ (~k8yun@user/k8yun) (Ping timeout: 240 seconds)
[07:41:41] *** Quits: k8yun__ (~k8yun@user/k8yun) (Quit: Leaving)
[07:51:52] *** Joins: bpalmer (~user@user/bpalmer)
[07:54:11] *** Quits: zwr (~zwr@2804:d45:b966:fb00:5d07:4fd9:1d9:2b23) (Ping timeout: 250 seconds)
[07:54:57] *** Joins: zwr (~zwr@2804:d45:b966:fb00:2d7c:db02:239b:d206)
[07:58:19] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[08:03:24] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 240 seconds)
[08:17:57] *** evanextreme is now known as evanextreme[away
[08:18:49] *** Quits: dsrt^ (~dsrt@50.235.176.163) (Remote host closed the connection)
[08:20:27] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[08:21:11] *** Joins: fdan (~fdan@207.141.66.99)
[08:22:31] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[08:32:11] *** Quits: bluedust (~bluedust@103.161.144.138) (Remote host closed the connection)
[08:33:08] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[08:35:05] *** Joins: bluedust (~bluedust@103.161.144.138)
[08:50:51] *** Quits: Nex8192 (~Nex8192@user/nex8192) (Ping timeout: 256 seconds)
[08:53:36] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[08:54:15] *** Joins: bpalmer` (~user@user/bpalmer)
[08:54:30] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[08:56:35] *** Quits: bpalmer (~user@user/bpalmer) (Ping timeout: 250 seconds)
[08:56:40] *** bpalmer` is now known as bpalmer
[08:58:29] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[08:59:01] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 256 seconds)
[09:01:24] *** Quits: pepee (~pepee@user/pepee) (Ping timeout: 240 seconds)
[09:07:20] *** Quits: DrAnything (uid538291@id-538291.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[09:16:46] *** Joins: eroux (~eroux@102-65-81-186.ftth.web.africa)
[09:25:45] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[09:30:38] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Read error: Connection reset by peer)
[09:31:19] *** Joins: emhwfhrom^ (~emhwfhrom@50.235.176.163)
[09:39:04] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[09:41:10] *** Quits: evanextreme[away (~evan@2604:4080:1000:8150:e023:d964:d20f:a5e5) (Quit: My laptop has gone to sleep. Bye!)
[09:43:24] *** Quits: go_ (~puck@undernet.hu) (Ping timeout: 250 seconds)
[09:52:55] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 240 seconds)
[09:55:48] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 240 seconds)
[10:03:01] *** Joins: ghost08 (~ghost08@62.168.104.146)
[10:03:05] *** Joins: evanextreme (~evan@2604:4080:1000:8150:e023:d964:d20f:a5e5)
[10:07:48] *** Quits: normen_ (~normen@p200300d717235c00c8e00fdc4007a670.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[10:07:55] *** evanextreme is now known as evanextreme[away
[10:07:55] *** Quits: evanextreme[away (~evan@2604:4080:1000:8150:e023:d964:d20f:a5e5) (Quit: My laptop has gone to sleep. Bye!)
[10:09:36] *** Quits: rvalue (~rvalue@user/rvalue) (Read error: Connection reset by peer)
[10:09:50] *** Joins: rvalue (~rvalue@user/rvalue)
[10:11:14] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:16:43] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[10:17:16] *** Quits: ghost08 (~ghost08@62.168.104.146) (Quit: WeeChat 3.4)
[10:18:01] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[10:26:16] *** Joins: hanzo (uid532183@user/hanzo)
[10:28:05] *** Joins: jcajka (~jcajka@ip-86-49-255-10.net.upcbroadband.cz)
[10:33:40] *** Joins: normen_ (~normen@p200300d717235c00c8e00fdc4007a670.dip0.t-ipconnect.de)
[10:40:35] *** Joins: adlternative (~adl@111.2.144.92)
[10:42:47] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[10:44:08] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[10:45:21] *** Quits: rairden (~rairden@2603:9000:de04:9613::1a20) (Quit: rairden)
[10:45:46] *** Quits: adlternative (~adl@111.2.144.92) (Quit: Konversation terminated!)
[10:45:53] *** Joins: ghost08 (~ghost08@62.168.104.146)
[10:46:00] *** Quits: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52) (Ping timeout: 252 seconds)
[10:47:34] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 272 seconds)
[10:51:29] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[10:55:33] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Client Quit)
[10:56:08] *** Joins: mrig (~mrig@user/mrig)
[11:03:11] *** bkircher_afk is now known as bkircher
[11:06:13] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[11:07:27] *** Quits: Natch (~natch@c-4db8e255.014-297-73746f25.bbcust.telenor.se) (Remote host closed the connection)
[11:07:58] *** Joins: EdFletcher (~PKD@user/edfletcher)
[11:09:29] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[11:10:26] *** Quits: rcernin (~rcernin@124.190.132.36) (Quit: WeeChat 3.4)
[11:11:56] *** Joins: arinov_ (~arinov@213.194.126.155)
[11:12:50] *** Joins: Natch (~natch@c-4db8e255.014-297-73746f25.bbcust.telenor.se)
[11:14:16] *** Joins: Kohe (~Kohe@46.12.76.236.dsl.dyn.forthnet.gr)
[11:14:52] *** Joins: RhinosF1 (uid339563@miraheze/RhinosF1)
[11:31:52] *** Joins: shka (~herr@109.231.3.55)
[11:34:26] *** Joins: marius_m (~marius_m@80.91.33.151)
[11:35:29] *** Joins: xsteadfastx (~marv@94.31.99.245)
[11:35:33] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[11:37:10] *** Quits: marius_m (~marius_m@80.91.33.151) (Client Quit)
[11:37:25] *** Quits: gpeskens (~gpeskens@2001:985:7aa4:1:f4f7:e256:f206:c040) (Remote host closed the connection)
[11:41:22] *** Joins: saschagrunert (~saschagru@46.128.124.48)
[11:47:08] *** Joins: absc (~absc@81.31.144.28)
[11:49:59] *** Joins: c10l3 (~c10l@user/c10l)
[11:50:40] *** Quits: ghost08 (~ghost08@62.168.104.146) (Quit: WeeChat 3.4)
[11:52:10] *** Quits: c10l (~c10l@user/c10l) (Ping timeout: 272 seconds)
[11:52:11] *** c10l3 is now known as c10l
[11:53:20] *** Joins: rendar (~rendar@user/rendar)
[11:59:10] *** Joins: wolfshappen (~waff@irc.furworks.de)
[11:59:52] *** Quits: wolfshappen (~waff@irc.furworks.de) (Client Quit)
[12:05:43] *** Joins: wolfshappen (~waff@irc.furworks.de)
[12:05:45] *** Quits: jcajka (~jcajka@ip-86-49-255-10.net.upcbroadband.cz) (Ping timeout: 252 seconds)
[12:08:35] *** dr0n is now known as dr0n|away
[12:19:11] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:19:27] *** Joins: markkuit_ (~markkuit@81.56.16.6)
[12:19:54] *** Joins: et_ (~et@user/et)
[12:20:36] *** Quits: markkuit (~markkuit@81.56.16.6) (Ping timeout: 252 seconds)
[12:21:09] *** Quits: et (~et@user/et) (Ping timeout: 252 seconds)
[12:21:09] *** et_ is now known as et
[12:22:49] *** Joins: Ergo^ (~ergo@91.238.59.144)
[12:23:12] *** Joins: iateadonut (~dan@121.177.17.154)
[12:24:18] <iateadonut> is there a site/forum or whatever where people review their job interview assessments?  (they never give feedback.)
[12:24:28] *** Quits: Kohe (~Kohe@46.12.76.236.dsl.dyn.forthnet.gr) (Ping timeout: 272 seconds)
[12:29:00] *** Joins: bindu (~bindu@user/bindu)
[12:31:00] <pyzozord> if it's go specific I guess you can ask here, otherwsie ##programming is also good to ask questions about interviews
[12:31:05] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[12:31:36] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[12:32:19] *** Joins: bindu (~bindu@user/bindu)
[12:35:24] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 240 seconds)
[12:39:31] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[12:40:49] <iateadonut> thanks.
[12:42:26] *** Quits: iateadonut (~dan@121.177.17.154) (Quit: Leaving.)
[12:45:49] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[12:46:14] <mickey8> what's an efficient way of sorting a map[string]int by the int value? it's a counter and i need to get the top N strings
[12:46:56] <mickey8> few dozen thousand keys in there
[12:50:54] *** Joins: Kohe (~Kohe@46.12.76.236.dsl.dyn.forthnet.gr)
[12:56:06] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[12:56:19] <senoraraton> How do I find out where my $GOROOT is supposed to be?
[12:59:00] *** Quits: et (~et@user/et) (Ping timeout: 240 seconds)
[12:59:38] <ikke> Did you install golang manually yourself somewhere?
[13:03:10] *** Joins: et (~et@user/et)
[13:05:34] *** Joins: jcajka (~jcajka@ip-86-49-255-10.net.upcbroadband.cz)
[13:06:04] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[13:06:48] *** nikos_ is now known as nikos
[13:06:54] <senoraraton> I think so? *shrug*
[13:07:06] <senoraraton> I moved it to .config/go because I don't like things cluttering up my home directory
[13:07:09] *** Joins: et_ (~et@user/et)
[13:08:03] *** Quits: et (~et@user/et) (Ping timeout: 256 seconds)
[13:08:03] *** et_ is now known as et
[13:14:54] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:15:36] * shiroyasha has GOCACHE, GOENV, GOMODCACHE and GOPATH in /tmp
[13:18:08] *** Joins: et_ (~et@user/et)
[13:18:49] *** Quits: et (~et@user/et) (Ping timeout: 256 seconds)
[13:18:49] *** et_ is now known as et
[13:20:33] *** Joins: simerax (~quassel@p200300caa7315c00041bd8ae92c14d7f.dip0.t-ipconnect.de)
[13:21:15] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 240 seconds)
[13:22:12] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 240 seconds)
[13:22:39] *** Quits: R2robot (~R2robot@user/r2robot) (Ping timeout: 250 seconds)
[13:23:55] *** Quits: et (~et@user/et) (Ping timeout: 256 seconds)
[13:26:36] *** Joins: R2robot (~R2robot@user/r2robot)
[13:28:11] *** Joins: et (~et@user/et)
[13:28:42] *** Joins: itsalexjones (~itsalexjo@82.4.99.241)
[13:30:27] *** Quits: Kohe (~Kohe@46.12.76.236.dsl.dyn.forthnet.gr) (Ping timeout: 252 seconds)
[13:32:34] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[13:34:34] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[13:37:12] <simerax> is it possible to send multiple messages into a channel atomically without using a mutex? I basically need to guarantee that two messages are send one after the other with no other message in between from some other goroutine.
[13:38:13] <simerax> i know you probably say "but that's bad" and i would agree but my usecase is valid and a little out of scope to explain ^^
[13:38:15] <mickey8> when i have counter := map[string]struct { infavor int; against int }{}, why does count["word"].infavor = 1 throw this at me cannot assign to struct field counter[w].infavor in map ?
[13:38:36] <mickey8> (counter, not count)
[13:38:42] *** Joins: lxdr (~lxdr@user/lxdr)
[13:39:04] <albertito> simerax: in the general case, no, you can't send more than one message on the same channel atomically
[13:39:32] <albertito> simerax: a workaround could be make the channel be of slices of messages, instead of messages
[13:39:52] <A_Dragon> mickey8: some expressions dont allow you to assign to them
[13:40:14] <A_Dragon> you could do that with x := map[thing]; x.stuff = 0; map[thing]= x
[13:40:31] <A_Dragon> or make it a map[string]*struct{} {}
[13:40:43] <A_Dragon> (contents of struct eluded for brevity)
[13:40:44] <albertito> mickey8: also if you do x := count["word"], x will be a _copy_ of the struct so assigning it wouldn't change the one inside the map
[13:40:56] <A_Dragon> yeah, thats why I assigned it back
[13:40:56] <simerax> albertito: thanks ill think about that
[13:40:56] <albertito> (to complement what A_Dragon is saying)
[13:54:12] *** Quits: adip_ (~adip@crd88.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[13:55:00] *** Quits: adip (~adip@crd88.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[13:56:43] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:59:52] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[14:00:37] *** Quits: adtac (~adtac@192.159.181.180) (Quit: Client closed)
[14:01:31] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[14:01:53] <mickey8> im sorry but i lost you there
[14:01:56] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[14:02:15] <mickey8> i changed the counter to map[string]*struct{}{}
[14:02:19] *** Joins: edd_lc (~edd_lc@85.64.203.19.dynamic.barak-online.net)
[14:05:21] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Client Quit)
[14:05:57] <mickey8> counter["word"] is still nil, even after i set counter["word"].infavor = 1. probably related to what you mentioned about copies, but i dont get it
[14:06:20] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[14:06:59] <fizzie> Well, the zero value of a pointer is nil.
[14:07:19] <fizzie> You'd need to set counter["word"] to a valid pointer before trying to do counter["word"].infavor = 1.
[14:07:40] <fizzie> (Which is probably awkward for an unnamed struct type.)
[14:08:12] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[14:08:46] <mickey8> right. do i have to loop through this to initialize structs on each word or there's a better way?
[14:08:53] <fizzie> The part about copies was said in the context of keeping the existing `map[string]struct{...}` type, where doing `c := counter["word"]; c.infavor = 1` would not be sufficient to update the value in the map.
[14:08:57] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 252 seconds)
[14:09:52] <fizzie> You could go with that option, especially since it's such a small struct. Just needs the assignment back to the map A_Dragon showed.
[14:12:06] *** Joins: Atque (~Atque@user/atque)
[14:13:00] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[14:19:21] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[14:23:32] *** Joins: ghost08 (~ghost08@62.168.104.146)
[14:24:10] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 272 seconds)
[14:28:49] *** Quits: fdan (~fdan@207.141.66.99) (Ping timeout: 256 seconds)
[14:28:51] *** Quits: bluedust (~bluedust@103.161.144.138) (Remote host closed the connection)
[14:29:00] *** Joins: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de)
[14:35:16] *** Quits: Icedream (~icedream@hzn-b.serverkomplex.de) (Quit: A lol made me boom.)
[14:37:30] *** Joins: Icedream (~icedream@hzn-b.serverkomplex.de)
[14:38:49] *** Quits: edd_lc (~edd_lc@85.64.203.19.dynamic.barak-online.net) (Quit: leaving)
[14:42:40] *** Joins: yoonkn (~user@175.197.208.79)
[14:43:38] *** Joins: stuart|w (~stuart|w@213.61.234.5)
[14:51:48] *** Quits: stuart|w (~stuart|w@213.61.234.5) (Ping timeout: 240 seconds)
[14:52:06] *** Joins: Nex8192 (~Nex8192@user/nex8192)
[14:55:37] *** Joins: nhanb (~nhanb@27.64.81.134)
[14:55:52] *** Quits: nhanb (~nhanb@27.64.81.134) (Client Quit)
[15:09:28] *** Quits: saschagrunert (~saschagru@46.128.124.48) (Remote host closed the connection)
[15:16:07] *** Joins: adip (~adip@dia24.neoplus.adsl.tpnet.pl)
[15:16:09] *** Joins: adip_ (~adip@dia24.neoplus.adsl.tpnet.pl)
[15:19:19] *** Quits: Ergo^ (~ergo@91.238.59.144) (Read error: Connection reset by peer)
[15:23:50] *** Joins: Kohe (~Kohe@46.12.76.236.dsl.dyn.forthnet.gr)
[15:27:42] <L1Cafe> Does anyone have any recommendations for a systems design book that goes beyond CS101? I'm looking for something like a case study of a distributed DB implementation, a distributed OS, or designing and implementing load balancers from scratch (ie no keepalived, Nginx, but the design considerations of these)
[15:27:48] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[15:29:22] *** Quits: normen_ (~normen@p200300d717235c00c8e00fdc4007a670.dip0.t-ipconnect.de) (Quit: WeeChat 3.4)
[15:30:10] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Read error: Connection reset by peer)
[15:34:36] *** Quits: xsteadfastx (~marv@94.31.99.245) (Ping timeout: 240 seconds)
[15:43:34] *** Joins: normen (~normen@p200300d717235c00c8e00fdc4007a670.dip0.t-ipconnect.de)
[15:44:36] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[15:44:50] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[15:45:05] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[15:48:36] *** Joins: jjonah (~jjonah@p200300d5d727ec00dea632fffeb3342f.dip0.t-ipconnect.de)
[15:50:43] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[15:54:45] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 272 seconds)
[15:55:06] *** Joins: CoolerX (~CoolerX@user/coolerx)
[15:58:21] *** Quits: bbear_ (~znc@21212.s.t4vps.eu) (Ping timeout: 256 seconds)
[15:58:35] *** Joins: bbear (~znc@21212.s.t4vps.eu)
[16:00:52] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:02:39] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[16:02:59] *** Quits: jjonah (~jjonah@p200300d5d727ec00dea632fffeb3342f.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[16:05:44] *** Quits: ghost08 (~ghost08@62.168.104.146) (Quit: WeeChat 3.4)
[16:07:36] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[16:09:14] *** Joins: pepee (~pepee@user/pepee)
[16:10:04] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[16:10:13] *** Joins: bindu (~bindu@user/bindu)
[16:10:19] *** Joins: mickey8 (~user@user/mickey)
[16:11:41] *** Joins: jjonah (~jjonah@p200300d5d727ec00dea632fffeb3342f.dip0.t-ipconnect.de)
[16:11:48] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 240 seconds)
[16:18:57] *** Joins: Ergo^ (~ergo@91.238.59.144)
[16:23:00] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Ping timeout: 240 seconds)
[16:26:40] *** Joins: crashrep (~crashrep@user/crashrep)
[16:32:18] *** Joins: greatgatsby (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-7.dsl.bell.ca)
[16:32:39] *** Joins: xsteadfastx (~marv@p200300d2df0c060008996ad6daaaf248.dip0.t-ipconnect.de)
[16:33:12] *** Joins: doorzan (~doorzan@2800:200:f540:73::c)
[16:33:42] *** Quits: doorzan (~doorzan@2800:200:f540:73::c) (Changing host)
[16:33:42] *** Joins: doorzan (~doorzan@user/doorzan)
[16:39:51] *** Joins: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de)
[16:41:41] *** Quits: Kohe (~Kohe@46.12.76.236.dsl.dyn.forthnet.gr) (Ping timeout: 256 seconds)
[16:47:56] *** Joins: jackneilll (~jackneill@20014C4E180D1C0008D843A8555C0D46.dsl.pool.telekom.hu)
[16:48:29] *** Quits: jackneill (~jackneill@20014C4E180D1C00B15BE67A6B631134.dsl.pool.telekom.hu) (Ping timeout: 250 seconds)
[16:49:28] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[16:53:56] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[16:56:03] *** Joins: zunino (~zunino@2804:7f5:f380:74e0:bb03:11ad:2cf5:e64d)
[17:01:17] *** Quits: masoudd (~masoudd@user/masoudd) (Quit: Leaving)
[17:15:09] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[17:17:24] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[17:21:15] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Ping timeout: 240 seconds)
[17:21:17] *** Joins: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52)
[17:22:17] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[17:23:23] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[17:28:02] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[17:29:53] *** Joins: pmcnabb1 (~pmcnabb@user/pmcnabb)
[17:30:12] *** Quits: pmcnabb (~pmcnabb@user/pmcnabb) (Ping timeout: 240 seconds)
[17:30:12] *** pmcnabb1 is now known as pmcnabb
[17:35:48] *** Quits: pmcnabb (~pmcnabb@user/pmcnabb) (Ping timeout: 240 seconds)
[17:36:35] *** Joins: arkurious (~arkurious@user/arkurious)
[17:39:31] *** Quits: endre (end.re@end.re) (Ping timeout: 245 seconds)
[17:44:46] *** Joins: endre (~end.re@end.re)
[17:53:01] *** Quits: CoolerX (~CoolerX@user/coolerx) (Quit: Leaving)
[17:54:36] *** Quits: xsteadfastx (~marv@p200300d2df0c060008996ad6daaaf248.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[17:55:53] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[17:56:28] <LambdaComplex> i just googled a Go question and found an answer that danderson posted back in 2012. so....thanks!
[18:00:12] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 240 seconds)
[18:07:37] *** Joins: maroloccio (~marolocci@pousada3ja.mma.com.br)
[18:10:06] *** Joins: masoudd (~masoudd@user/masoudd)
[18:10:21] *** Joins: bluedust (~bluedust@103.161.144.138)
[18:14:16] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[18:14:31] *** Quits: gspbirel56 (~gspbirel5@c-73-214-199-7.hsd1.pa.comcast.net) (Quit: The Lounge - https://thelounge.chat)
[18:14:54] *** Joins: gspbirel56 (~gspbirel5@c-73-214-199-7.hsd1.pa.comcast.net)
[18:19:26] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[18:19:43] *** Joins: mickey8 (~user@user/mickey)
[18:22:31] *** Joins: Kohe (~Kohe@46.12.76.236.dsl.dyn.forthnet.gr)
[18:23:51] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[18:24:15] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 240 seconds)
[18:27:05] *** Joins: tachoknight (~textual@2600:1700:3060:3ee0:f467:fda7:b67f:3b6)
[18:27:43] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[18:40:36] *** Quits: emhwfhrom^ (~emhwfhrom@50.235.176.163) (Ping timeout: 240 seconds)
[18:42:05] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[18:42:08] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[18:43:36] *** Joins: ejjfunky (~ejjfunky@125.164.21.66)
[18:50:23] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[18:54:36] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 240 seconds)
[18:59:21] *** Quits: doorzan (~doorzan@user/doorzan) (Ping timeout: 252 seconds)
[18:59:54] *** Quits: yoonkn (~user@175.197.208.79) (Read error: Connection reset by peer)
[19:01:15] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[19:01:43] *** Joins: fef (~thedawn@user/thedawn)
[19:07:19] *** Quits: jcajka (~jcajka@ip-86-49-255-10.net.upcbroadband.cz) (Ping timeout: 256 seconds)
[19:08:32] *** Joins: jcajka (~jcajka@ip-86-49-255-10.net.upcbroadband.cz)
[19:19:40] *** Joins: emhwfhrom^ (~emhwfhrom@50.235.176.163)
[19:20:44] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[19:22:27] *** Quits: SuperLag (~akulbe@user/superlag) (Quit: leaving)
[19:24:32] *** Joins: SuperLag (~akulbe@user/superlag)
[19:26:13] *** Quits: pepee (~pepee@user/pepee) (Ping timeout: 250 seconds)
[19:28:25] *** Joins: pepee (~pepee@user/pepee)
[19:29:57] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[19:36:07] *** Joins: Midjak (~Midjak@91-169-30-149.subs.proxad.net)
[19:38:40] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[19:42:52] *** Quits: emhwfhrom^ (~emhwfhrom@50.235.176.163) (Remote host closed the connection)
[19:42:58] *** Joins: doorzan (~doorzan@2800:200:f540:73::c)
[19:43:46] *** Joins: xsteadfastx (~marv@94.31.99.245)
[19:48:53] *** Joins: ldiamond (~ldiamond@user/ldiamond)
[19:49:33] <ldiamond> Without generics, can I have a function take a parameter of some interface X and return the same actual type that was passed in?
[19:50:18] <andlabs> no
[19:50:34] <andlabs> you have to know what that type is to be able to write that function to begin with
[19:50:36] <ikke> ldiamond: No, you need to specify a concrete type, and the only concrete types that allow that specific type to be returned are interface{} and the interface you received
[19:50:59] <andlabs> what are you trying to o
[19:51:00] <andlabs> do
[19:53:39] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[19:54:00] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[19:54:11] *** Joins: bluedust_ (~bluedust@68.235.43.173)
[19:54:12] <ldiamond> andlabs: I'm trying to avoid writing two functions that do essentially the same just to return different types. I'm dealing with a utility that takes an interface in and populates the given object fields. So I pass an object of type X which matches interface I and return it back.
[19:55:55] *** Quits: bluedust (~bluedust@103.161.144.138) (Remote host closed the connection)
[19:56:40] *** Joins: bluedust (~bluedust@103.161.144.138)
[19:58:05] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Quit: WeeChat 3.3)
[19:59:50] *** Quits: bluedust_ (~bluedust@68.235.43.173) (Ping timeout: 272 seconds)
[20:01:31] *** Parts: pyzozord (pyzozord@user/pyzozord) ()
[20:01:38] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[20:03:24] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 240 seconds)
[20:07:08] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[20:10:58] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[20:14:47] *** Joins: whaley (~whaley@097-082-197-228.res.spectrum.com)
[20:16:21] *** Quits: zunino (~zunino@2804:7f5:f380:74e0:bb03:11ad:2cf5:e64d) (Ping timeout: 252 seconds)
[20:17:17] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[20:18:23] *** Joins: zunino (~zunino@2804:7f5:f380:9edf:bc27:5e20:ffa3:eff1)
[20:18:29] *** Quits: zunino (~zunino@2804:7f5:f380:9edf:bc27:5e20:ffa3:eff1) (Client Quit)
[20:19:19] *** Joins: sleepingforest (~sleepingf@user/sleepingforest)
[20:19:51] *** Quits: ejjfunky (~ejjfunky@125.164.21.66) (Ping timeout: 256 seconds)
[20:23:10] *** Joins: crashrep (~crashrep@user/crashrep)
[20:26:26] *** Quits: xsteadfastx (~marv@94.31.99.245) (Ping timeout: 272 seconds)
[20:27:09] <sleepingforest> what could be the reason for a chan string to have empty values in it if i am not sending empty values?  I'm trying to reproduce it to share, but im unsuccessful
[20:29:26] <siXy> sleepingforest: Sounds like a problem with the sending or receving code. channels won't do that - but it's very possible to write code that looks like it's sending a non-empty string when it isn't.
[20:29:37] <siXy> shadowing, for example, might be one reason for this
[20:31:02] <seebs> one reason might be if you closed it
[20:31:11] <seebs> you can always read zero values from a closed channel
[20:37:15] *** Quits: bluedust (~bluedust@103.161.144.138) (Remote host closed the connection)
[20:37:46] <sleepingforest> thanks
[20:38:26] <sleepingforest> i figured it out, i initialized a string array size 10 and overlooked it
[20:45:49] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[20:49:14] *** Joins: mug3n (~mugen@gateway/tor-sasl/mugen)
[20:51:35] *** Quits: mugen (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 240 seconds)
[20:51:51] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[20:58:02] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[20:59:13] *** Quits: simerax (~quassel@p200300caa7315c00041bd8ae92c14d7f.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Komfortabler Chat. Überall.)
[21:01:13] *** Joins: bluedust (~bluedust@103.161.144.138)
[21:01:19] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: WeeChat 3.4)
[21:07:43] *** Quits: absc (~absc@81.31.144.28) (Quit: Leaving)
[21:13:00] *** Quits: doorzan (~doorzan@2800:200:f540:73::c) (Ping timeout: 252 seconds)
[21:15:58] *** Joins: Guest87 (~Guest87@117.194.197.128)
[21:21:58] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[21:22:31] *** Joins: mickey8 (~user@user/mickey)
[21:34:37] *** Joins: nightrider (~nightride@31.187.110.131)
[21:34:54] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[21:39:12] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[21:48:34] *** Quits: mncheck (~mncheck@193.224.205.254) (Read error: Connection reset by peer)
[21:49:26] *** Quits: rogersm_ (~rogersm@90.166.180.250) (Quit: Leaving...)
[21:49:26] *** dr0n|away is now known as dr0n
[21:51:33] *** Quits: maroloccio (~marolocci@pousada3ja.mma.com.br) (Quit: WeeChat 3.0)
[21:55:59] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:56:54] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[22:01:35] *** Quits: Guest87 (~Guest87@117.194.197.128) (Ping timeout: 256 seconds)
[22:11:27] <vt> do you know any way to set a timeout, a deadline or a context to net.DialTCP ?
[22:14:00] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[22:15:34] <siXy> vt: Use DialContext
[22:16:05] *** Quits: jjonah (~jjonah@p200300d5d727ec00dea632fffeb3342f.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[22:16:18] <siXy> var d net.Dialer; c, err := d.DialContext(fluff)
[22:17:30] *** Joins: ajfriesen701 (~ajfriesen@cable-78-35-98-50.nc.de)
[22:17:31] *** Joins: daved (~daved@162.67.197.35.bc.googleusercontent.com)
[22:18:15] <vt> siXy: thanks, is it possible to feed it with an IP [4]byte and a port (uint16) ?
[22:18:38] <demsh> vt: here are the docs https://pkg.go.dev/net#Dialer.DialContext
[22:18:39] <vt> I thought using net.DialContext instead, but I get the IP/port to connect to already in []byte/int from the source and I find it a little bit counterintuitive to convert that to a string "123.123.123.123:12345" just to have it converted back right away after DialContext.
[22:19:11] *** Quits: ajfriesen70 (~ajfriesen@cable-78-35-98-50.nc.de) (Ping timeout: 272 seconds)
[22:19:11] *** ajfriesen701 is now known as ajfriesen70
[22:19:48] <vt> from the doc, I don't understand the "address string". string is like an immutable []byte, so we could fit the four bytes of an IPv4 in a string of len 4. But what about the port number ? Where should it go ?
[22:21:04] <siXy> I feel like worrying about the cost of []byte/string conversion operations when you're _dialing a tcp socket_ is... something. Sure a nuclear bomb went off in your backyard, but did you see that little firework?!
[22:21:29] <siXy> Let's maintain a little perspective here, is all I'm saying
[22:22:01] <demsh> here is an example https://pkg.go.dev/net#example-Dialer-Unix
[22:22:45] <demsh> oh, it's this one https://pkg.go.dev/net#example-Dialer
[22:22:53] <demsh> but they are near each other
[22:24:00] <vt> ok thank you. I guess I will convert []byte+uint16 to string (for go to convert it back right away), if there are no other possibility
[22:24:42] <demsh> function signature requires string, no way around that
[22:25:55] *** Parts: oznt- (~oznt@vmd62887.contaboserver.net) ()
[22:27:50] <vt> I was hoping to get a static binary, because I don't need a resolver, but using DialContext it might want to dynamically link to libc, as a side effect
[22:30:45] <moldorcoder7> how to update gopls , i did go get golang.org/x/tools/gopls@latest but there is a warning that i have to use go install
[22:30:56] <moldorcoder7> and with go install gopls i have nothing pulled/updated
[22:31:33] <fizzie> `go install golang.org/x/tools/gopls@latest`
[22:32:08] <fizzie> And https://go.dev/doc/go-get-install-deprecation for more context.
[22:33:05] *** Joins: edd_lc (~edd_lc@85.64.220.62.dynamic.barak-online.net)
[22:34:47] *** Joins: jpw (~jpw@user/jpw)
[22:35:35] <fizzie> (And https://pkg.go.dev/golang.org/x/tools/gopls#readme-installation for an official recommendation of that specific command plus some commentary about how usually your editor does that.)
[22:37:45] <moldorcoder7> ho im dumb, i did go install gopls
[22:37:54] <moldorcoder7> thanks
[22:40:47] *** Joins: jackneill (~jackneill@20014C4E180D1C00C65DBF4A1F87FFE6.dsl.pool.telekom.hu)
[22:42:25] *** Joins: slowtyper (~slowtyper@user/slowtyper)
[22:42:36] *** Quits: jackneilll (~jackneill@20014C4E180D1C0008D843A8555C0D46.dsl.pool.telekom.hu) (Ping timeout: 240 seconds)
[22:42:37] *** Quits: slowtype- (~slowtyper@2a02:214c:8494:a100:8f:b3ce:d37b:a68d) (Ping timeout: 240 seconds)
[22:47:07] *** Joins: slowtype- (~slowtyper@79.103.111.41.dsl.dyn.forthnet.gr)
[22:47:17] *** Quits: slowtyper (~slowtyper@user/slowtyper) (Ping timeout: 250 seconds)
[22:50:38] *** Joins: slowtyper (~slowtyper@user/slowtyper)
[22:51:20] *** Joins: doorzan (~doorzan@2800:200:f540:73::c)
[22:52:04] *** Quits: jcajka (~jcajka@ip-86-49-255-10.net.upcbroadband.cz) (Quit: Leaving)
[22:52:07] *** Quits: slowtype- (~slowtyper@79.103.111.41.dsl.dyn.forthnet.gr) (Ping timeout: 272 seconds)
[22:57:38] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:01:34] *** Joins: slowtype- (~slowtyper@79.103.224.184.dsl.dyn.forthnet.gr)
[23:01:41] *** Joins: ttpp (~tttppp@37.115.45.192)
[23:02:13] *** Quits: slowtyper (~slowtyper@user/slowtyper) (Ping timeout: 256 seconds)
[23:12:51] *** Quits: bkircher (~bkircher@2001:a61:246d:f401:4760:9a66:af72:3722) (Ping timeout: 250 seconds)
[23:12:53] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[23:13:30] *** Joins: strubbl891941988 (~strubbl@ipbcc0c7cb.dynamic.kabel-deutschland.de)
[23:18:43] *** Quits: doorzan (~doorzan@2800:200:f540:73::c) (Changing host)
[23:18:43] *** Joins: doorzan (~doorzan@user/doorzan)
[23:21:04] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[23:32:07] <vt> (Golang 1.18 is coming with net/netip and it seems that this []byte to string and back will not be necessary anymore)
[23:33:22] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Remote host closed the connection)
[23:38:43] *** Joins: crashrep (~crashrep@user/crashrep)
[23:44:57] *** Quits: edd_lc (~edd_lc@85.64.220.62.dynamic.barak-online.net) (Ping timeout: 240 seconds)
[23:45:42] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[23:47:17] *** Joins: andlabs (~andlabs@70.107.171.168)
[23:47:22] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[23:47:35] <b0nn> L1Cafe: You're asking a big question
[23:48:21] <b0nn> A lot of people have started down the Domain Driven Design path https://martinfowler.com/bliki/DomainDrivenDesign.html
[23:48:27] *** Joins: bluedust_ (~bluedust@81.92.205.26)
[23:48:28] *** Quits: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de) (Ping timeout: 272 seconds)
[23:49:11] <b0nn> Personally, though, although I found the idea interesting - I've only ever encountered one person actually using the terminolgy of theparadigm (meaning that most ppl merely pay lip service to it)
[23:51:31] *** Quits: bluedust (~bluedust@103.161.144.138) (Ping timeout: 256 seconds)
[23:52:12] <b0nn> Lindsey Kuper has a lecture seires on YouTube that I am currently working through (she is a prof at UCSC) https://www.youtube.com/watch?v=rZPRjLMWOao&list=PLNPUF5QyWU8PydLG2cIJrCvnn5I_exhYx&index=4
[23:53:12] *** Joins: sailorTheCat (~sailorCat@mail2.gajsin.name)
[23:54:05] *** Joins: rogersm (~rogersm@90.166.180.250)
[23:54:06] <b0nn> Generally speaking though - I mostly end up reading Uber/Netflix Engineering blogs,
[23:54:12] *** Quits: sailorCat (~sailorCat@mail2.gajsin.name) (Read error: Connection reset by peer)
[23:56:21] <b0nn> Oh, A LOT of people speak highly of "Designing Data-Intensive Applications" - I have a copy and I think that I've read it, but I don't recall what impact it had on me
[23:57:33] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
