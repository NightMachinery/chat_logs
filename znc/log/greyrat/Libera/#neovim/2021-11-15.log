[00:01:09] *** Quits: Ilyu (~quassel@166.215.82.79.rev.sfr.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:03:16] *** Quits: oddmunds (~oddmunds@81.0.173.254) (Ping timeout: 256 seconds)
[00:08:06] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Quit: varioust)
[00:11:12] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[00:11:48] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[00:14:06] *** Joins: kuklo4ev2004[m] (~kuklo4ev2@2001:470:69fc:105::1:3484)
[00:14:21] *** Joins: cjb (~cjbayliss@user/cjb)
[00:14:45] *** Joins: bindu (~bindu@user/bindu)
[00:14:55] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[00:16:27] *** Quits: bubbler (~bubbler@2a02:810d:8cc0:3fa0::e8b5) (Quit: WeeChat 3.3)
[00:19:10] *** Quits: leon (~leon@user/leon) (Read error: Connection reset by peer)
[00:19:24] *** Joins: leon (~leon@user/leon)
[00:19:27] *** Joins: bubbler (~bubbler@2a02:810d:8cc0:3fa0::e8b5)
[00:20:00] <matu3bamatu3ba[m> @kylo
[00:20:12] <matu3bamatu3ba[m> * 
[00:23:42] *** Joins: kyooo (~kyooo@2a02:a31d:a13c:5600:559d:f748:905d:cda9)
[00:28:28] *** Joins: jamesbombeelu[m] (~jamesbomb@2001:470:69fc:105::1:3487)
[00:44:23] *** Quits: guido (~guido@host-79-18-248-9.retail.telecomitalia.it) (Quit: WeeChat 3.3)
[00:47:48] *** Joins: mjlbach[m] (~atriusmat@2001:470:69fc:105::39bd)
[00:48:14] <mjlbach[m]> kylo252: as you probably noticed, I was in an lspconfig-ey mood today
[00:48:26] <mjlbach[m]> if you want anything else reviewed, you can ping me
[00:48:54] *** Quits: potamides (~amnifiliu@2003:a:270f:c400:28d8:e046:7d92:3970) (Quit: WeeChat 3.3)
[00:49:52] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[00:50:08] *** Joins: bindu (~bindu@user/bindu)
[00:54:26] *** Joins: oddmunds (~oddmunds@81.0.173.254)
[00:57:55] *** Quits: kyooo (~kyooo@2a02:a31d:a13c:5600:559d:f748:905d:cda9) (Quit: Leaving)
[00:58:01] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 245 seconds)
[00:58:05] *** Quits: leon (~leon@user/leon) (Read error: Connection reset by peer)
[00:58:13] *** Joins: leon (~leon@user/leon)
[01:03:20] *** Quits: X-Scale (~ARM@83.223.243.66) (Ping timeout: 256 seconds)
[01:03:50] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[01:05:00] *** X-Scale` is now known as X-Scale
[01:11:20] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Quit: varioust)
[01:20:31] *** Quits: rgrinberg (~textual@190.113.102.153) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:23:47] <syntaxman> Soo... when I run checkhealth, whichkey tells me that there is a "collision" for the binding: gcc.  It tells me that my commenting plugin is using it, but doesn't tell me what it's colliding with.
[01:23:57] <syntaxman> How would I track that down?
[01:24:14] <syntaxman> It is definitely not something I manually defined.
[01:25:44] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[01:28:34] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[01:32:42] *** Joins: leon_ (~znc@user/leon)
[01:34:00] *** Joins: jbox (~jbox@user/jbox)
[01:40:36] *** Joins: dre (~dre@2001:8003:c932:c301:e788:c1b2:43c3:18c)
[01:41:44] *** Joins: leon- (~znc@user/leon)
[01:41:52] *** Quits: leon_ (~znc@user/leon) (Ping timeout: 256 seconds)
[01:42:11] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Ping timeout: 245 seconds)
[01:42:19] *** Joins: leon_ (~znc@user/leon)
[01:43:43] *** Quits: dre (~dre@2001:8003:c932:c301:e788:c1b2:43c3:18c) (Remote host closed the connection)
[01:46:08] *** Joins: rgrinberg (~textual@190.113.102.153)
[01:46:33] *** Quits: leon- (~znc@user/leon) (Ping timeout: 268 seconds)
[01:47:38] *** Joins: dre (~dre@2001:8003:c932:c301:c5de:7260:cf6e:da0c)
[01:50:55] *** Parts: kuklo4ev2004[m] (~kuklo4ev2@2001:470:69fc:105::1:3484) ()
[01:52:30] *** Quits: leon_ (~znc@user/leon) (Quit: see you later, alligator)
[01:54:49] *** Joins: user777 (~user777@2001:16b8:af3b:9600:9c2e:9377:bad9:2b17)
[01:55:04] <dumbdemic[m]> <syntaxman> "It is definitely not something I..." <- Disable your commenting plugging to confirm problem scope and change keybind if necessary
[01:55:16] *** Parts: user777 (~user777@2001:16b8:af3b:9600:9c2e:9377:bad9:2b17) (Leaving)
[02:00:28] <dundargoc> !h bisect
[02:00:28] <nvim-bot[m]> Links to referenced help pages:
[02:00:29] <nvim-bot[m]> * [`bisect`](https://neovim.io/doc/user/starting.html#bisect) in *starting.txt*
[02:01:02] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[02:11:07] *** Joins: leon_ (~znc@user/leon)
[02:11:21] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 245 seconds)
[02:15:07] *** Joins: cassepipe (~cassepipe@176-155-131-22.abo.bbox.fr)
[02:15:26] <syntaxman> dumbdemic[m], dundargoc: thank you.  Mostly I'd hoped someone would know a way to list mappings before I started deconstructing my plugins.lua file.
[02:16:37] <syntaxman> I probably should file an issue with whichkey to let them know that the error msg only lists half of the needed info.
[02:16:49] <sunjonSenghanBri> `map g` and `map gc`
[02:16:58] <sunjonSenghanBri> will list any conflicts
[02:18:13] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[02:18:32] <syntaxman> It only lists the plugin binding.  I wonder if the error message was wrong.
[02:20:16] <syntaxman> been using vi/vim/neovim since the late 80's, and didn't know the map command could do that... Embarassing.
[02:20:48] *** Quits: eggbean (~eggbean@user/eggbean) (Quit: WeeChat 3.3)
[02:20:56] <sunjonSenghanBri> I started last Tuesday. Be ashamed
[02:21:00] *** Joins: eggbean (~eggbean@user/eggbean)
[02:21:38] <syntaxman> sunjonSenghanBri: If I forgot to say, "thank you," GOOD! ;-)
[02:21:47] *** Quits: choucavalier (~choucaval@peanutbuttervibes.com) (Quit: ZNC 1.8.2 - https://znc.in)
[02:22:05] *** Joins: choucavalier (~choucaval@peanutbuttervibes.com)
[02:22:09] <sunjonSenghanBri> it's not fixed yet
[02:22:47] <syntaxman> I'll just have to disable the plugin and see what :map says is mapped to that binding.
[02:23:06] <sunjonSenghanBri> makes sense
[02:25:34] *** Quits: towb (~bwot@user/towb) (Quit: WeeChat 3.3)
[02:41:32] *** Quits: rgrinberg (~textual@190.113.102.153) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:47:04] *** Joins: rgrinberg (~textual@190.113.102.153)
[02:48:33] *** Joins: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net)
[02:55:03] *** Joins: Guest520 (~Guest5@200.159.173.45)
[02:58:36] *** Quits: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net) (Remote host closed the connection)
[03:00:22] *** Joins: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net)
[03:05:29] *** Quits: oddmunds (~oddmunds@81.0.173.254) (Ping timeout: 268 seconds)
[03:09:27] *** Quits: Guest520 (~Guest5@200.159.173.45) (Quit: Client closed)
[03:10:45] *** Quits: dre (~dre@2001:8003:c932:c301:c5de:7260:cf6e:da0c) (Quit: Leaving)
[03:11:02] *** Joins: dre (~dre@2001:8003:c932:c301:c5de:7260:cf6e:da0c)
[03:11:02] *** Quits: exondation (~wadii@2a01:e34:eca5:6c30:efb2:2c4c:ed9e:3b0d) (Ping timeout: 268 seconds)
[03:12:54] *** Quits: cottoneyejim (~cottoneye@2a01:261:354:8500:ea6a:64ff:fe4f:b643) (Ping timeout: 268 seconds)
[03:14:50] *** Quits: senkwich (~senkwich@li2303-61.members.linode.com) (Quit: ZNC 1.8.2 - https://znc.in)
[03:15:21] *** Joins: senkwich (~senkwich@li2303-61.members.linode.com)
[03:16:36] *** Joins: slice (~slice@user/slice)
[03:21:43] *** Quits: ublx (~ublx@user/ublx) (Quit: ublx)
[03:28:59] *** Quits: cassepipe (~cassepipe@176-155-131-22.abo.bbox.fr) (Remote host closed the connection)
[03:30:12] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[03:30:28] <hgc> Neovim is good!
[03:30:37] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[03:32:33] *** Quits: sebastorama (~sebastora@190.83.56.68) (Quit: Textual IRC Client: www.textualapp.com)
[03:33:40] <windwp[m]> <sunjonSenghanBri> "I started last Tuesday. Be..." <- lier
[03:37:02] <mjlbach[m]> hi sunjon :) 
[03:42:30] *** Joins: sebastorama (~sebastora@190.83.56.68)
[03:43:31] *** Quits: slice (~slice@user/slice) (Quit: zzz)
[04:07:14] *** Joins: slice (~slice@user/slice)
[04:12:09] <han-`> I believe him. Immediately after completing vimtutor he ran :help map
[04:12:23] *** Quits: SirJitsu (~SirJitsu@162-231-111-175.lightspeed.livnmi.sbcglobal.net) (Ping timeout: 264 seconds)
[04:16:51] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Quit: Leaving)
[04:23:19] *** Joins: hololeap_ (~hololeap@user/hololeap)
[04:23:21] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[04:43:39] *** Joins: SirJitsu (~SirJitsu@162-231-111-175.lightspeed.livnmi.sbcglobal.net)
[04:44:17] *** Quits: lilgopher (~textual@2601:241:8000:38f0:f03f:654:e769:8104) (Quit: Textual IRC Client: www.textualapp.com)
[04:46:35] *** Quits: troyt (troyt@2601:681:4100:d591:44dd:acff:fe85:9c8e) (Ping timeout: 264 seconds)
[04:47:42] *** Quits: sebastorama (~sebastora@190.83.56.68) (Read error: Connection reset by peer)
[04:50:42] *** Joins: troyt (troyt@2601:681:4100:d591:44dd:acff:fe85:9c8e)
[04:52:28] *** Joins: sebastorama (~sebastora@190.83.56.68)
[04:53:04] *** Joins: Julian (~tos9@python/site-packages/Julian)
[05:00:11] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 268 seconds)
[05:01:19] *** Joins: X-Scale` (~ARM@31.22.167.45)
[05:01:24] *** hololeap_ is now known as hololeap
[05:02:29] *** X-Scale` is now known as X-Scale
[05:03:44] *** Quits: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net) (Quit: varioust)
[05:06:21] *** Quits: arthurpbs (~arthurpbs@168.121.99.71) (Ping timeout: 268 seconds)
[05:10:56] *** Joins: kyle[m] (~kylekpsni@2001:470:69fc:105::1:34a6)
[05:15:53] *** Parts: kyle[m] (~kylekpsni@2001:470:69fc:105::1:34a6) ()
[05:17:31] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[05:19:50] *** Joins: arthurpbs (~arthurpbs@168.121.98.23)
[05:22:23] *** Quits: nyah (~nyah@94.6.71.219) (Ping timeout: 268 seconds)
[05:34:33] *** Joins: pvp72 (~pierrepri@p5b2068a9.dip0.t-ipconnect.de)
[05:34:55] *** Joins: selsta (sid124829@user/selsta)
[05:35:47] *** Quits: pvp7 (~pierrepri@p4ff13581.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[05:35:47] *** pvp72 is now known as pvp7
[05:37:06] <selsta> Is it normal that neovim appears more choppy at scrolling compared to regular vim? Is it due to syntax highlighting?
[05:38:08] *** Joins: pvp78 (~pierrepri@p5b2068f1.dip0.t-ipconnect.de)
[05:38:08] <selsta> (neovim master vs vim 8.2.3489 on macOS)
[05:40:16] *** Quits: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de) (Ping timeout: 265 seconds)
[05:40:26] *** Quits: pvp7 (~pierrepri@p5b2068a9.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[05:40:26] *** pvp78 is now known as pvp7
[05:41:16] *** Joins: a6a45081-2b83 (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507)
[05:49:23] <mjlbach[m]> do you have syntax highlighting enabled in vim?
[05:50:17] *** Joins: mud (~mud@user/kadoban)
[05:53:41] <ii14[m]> run a diff on vim and neovim syntax file
[05:54:02] <ii14[m]> are you using debian/ubuntu?
[05:54:06] <selsta> both have the exact same config
[05:54:10] <selsta> macOS
[05:54:44] <selsta> yes, both have `syntax enable`
[05:54:48] <ii14[m]> on what filetype have you noticed difference in performance?
[05:55:38] <selsta> in all
[05:56:34] *** Joins: utraciss (~utraciss@1.32.68.183)
[05:57:20] <ii14[m]> same config, same plugins for both etc?
[05:57:33] <selsta> yes, that is with quick trackpad scrolling, don't have a mouse at home currently to see if it makes a difference
[05:58:11] <ii14[m]> what input device you're using doesn't make a difference
[05:58:24] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[06:00:03] <ii14[m]> the thing is that neovim and vim syntax highlighting should be more or less the same
[06:01:42] <ii14[m]> maybe something changed in vim, and those changes were merged to neovim, but you have an older version of vim or something?
[06:02:39] <ii14[m]> s/maybe something changed in vim, and those changes were merged to neovim, but you have an older version of vim or something?/maybe something changed in vim, and those changes were merged to neovim and you got them, while being at older version of vim or something?/
[06:05:49] <selsta> the latest version of vim (installed with package manger) did indeed feel slightly worse
[06:06:09] <selsta> so could be a performance regression in vim itself, but it's difficult to measure and I don't want to claim something false
[06:09:37] *** Quits: kron (~weechat@user/qaph) (Ping timeout: 250 seconds)
[06:10:02] *** Joins: kron (~weechat@user/qaph)
[06:14:02] <selsta> syntime also doesn't show anything interesting as far as I can tell
[06:15:48] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[06:17:52] *** Joins: bindu (~bindu@user/bindu)
[06:18:31] *** Joins: Julian (~tos9@python/site-packages/Julian)
[06:19:49] *** Joins: furincleavagesit (~textual@47.203.181.175)
[06:23:48] *** Quits: furincleavagesit (~textual@47.203.181.175) (Quit: Textual IRC Client: www.textualapp.com)
[06:26:32] *** Quits: keypusher (keypusher@user/keypusher) (Ping timeout: 240 seconds)
[06:27:53] *** Joins: keypusher (keypusher@user/keypusher)
[06:36:50] *** Joins: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de)
[06:45:14] <mjlbach[m]> side note why do we depend on symbols from libgcc on a musl system?
[06:45:48] <ii14[m]> you mean link with?
[06:47:23] <ii14[m]> you mean libgcc_s.so?
[06:47:35] <mjlbach[m]> yes
[06:47:58] <mjlbach[m]> gcompat is insufficient
[06:48:01] <ii14[m]> https://gcc.gnu.org/onlinedocs/gccint/Libgcc.html
[06:48:05] <mjlbach[m]> it's explicitly libgcc
[06:48:24] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[06:49:08] <ii14[m]> maybe it can be inlined somehow
[06:50:52] <ii14[m]> `-static-libgcc`
[06:54:44] <ii14[m]> the question is do you actually want it, because maybe there are downsides to doing this. gcc uses the shared library by default
[06:55:35] <mjlbach[m]> I'm just curious, I couldn't answer a question
[06:55:54] <mjlbach[m]> I knew it was a dependency, I didn't know why (I was aware of what libgcc was)
[06:56:13] <ii14[m]> yeah, gcc does this by default
[06:56:14] <hendry> dependency on glibc isn't a size issue, it's more of code portability type issue for me
[06:56:36] <hendry> i want my editor to compile and use muslc, np
[06:56:40] <mjlbach[m]> it's libgcc not glibc
[06:57:07] <hendry> what is libgcc, so that it can compile/parse code?
[06:57:25] <ii14[m]> you can see the link above
[06:58:22] <hendry> "perform some operation that is too complicated to emit inline code for"
[06:58:26] * mjlbach[m] sent a code block: https://libera.ems.host/_matrix/media/r0/download/libera.chat/2ab2945bdb4adf9413479c24c644e5031a2f6ee0
[06:58:57] <ii14[m]> > Most of the routines in libgcc handle arithmetic operations that the target processor cannot perform directly.
[06:59:07] <hendry> mjlbach[m]: niiice
[06:59:42] <hendry> ii14[m]: seems a bit weird, wth is neovim doing that really requires this
[07:00:53] <ii14[m]> I'm not sure what's exactly there, but my programs are linked with it too
[07:01:34] <hendry> mjlbach[m]: how do I find your Dockefile for try.nvim:base-nightly-musl please?
[07:01:38] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.3)
[07:01:44] <ii14[m]> seems like mostly floating point arithmetic
[07:01:55] <mjlbach[m]> it's the same as the standard one
[07:01:57] <mjlbach[m]> tbh
[07:02:04] <mjlbach[m]> I just named it differently by accident
[07:02:09] <mjlbach[m]> I literally didn't do anything special hah
[07:02:44] <ii14[m]> and stack unwinding for C++
[07:03:33] <ii14[m]> and stuff like that
[07:04:25] <hendry> do IIUC libgcc prevents static builds right?
[07:04:31] <hendry> mjlbach[m]: oh right, just https://github.com/nvim-lsp/try.nvim/blob/master/base/Dockerfile
[07:04:52] <ii14[m]> I think it can be disabled with `-static-libgcc`
[07:06:02] <ii14[m]> "disabled"
[07:06:58] <ii14[m]> also, if you're depending only on musl, why not go all the way and link statically with musl too
[07:08:41] <hendry> ii14[m]: even go static binaries don't link libc, so need to go "all the way"?
[07:09:10] <SmashMineGameSma> Is there a way for me to get filename autocomplete with nvim-cmp? I've recently switched to native-lsp from coc but that's a feature I miss.
[07:09:55] <mjlbach[m]> SmashMineGameSma: yup
[07:10:07] <ii14[m]> is that a question? I'm not sure if I get what you mean
[07:10:12] <mjlbach[m]> should be a source
[07:10:23] <Bowuigi[m]> hendry: Musl time?
[07:10:53] <SmashMineGameSma> My mistake; I meant how would I get filename autocomplete with nvim-cmp?
[07:10:56] <mjlbach[m]> https://github.com/hrsh7th/cmp-path
[07:11:00] <hendry> ii14[m]: i'm saying there is no need to link libc when producing a static build. I'm taking Go binaries as a example.
[07:11:13] <mjlbach[m]> Add that to your plugins
[07:11:17] <mjlbach[m]> and add 
[07:11:17] <mjlbach[m]> ```
[07:11:23] <mjlbach[m]>  * and add... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/7a35e11947ab4cb6721e0f5c678b52c4be6d9dd1)
[07:11:25] <mjlbach[m]> ofc join sources
[07:12:17] <ii14[m]> sure, but go is its own thing, it's not even written in C. vim uses functions from libc
[07:13:43] <ii14[m]> and musl's libc is smaller, so you might as well include it in the executable and don't depend on any shared libraries at all
[07:15:29] <ii14[m]> if you're not using the standard library then sure, there is no need to link libc
[07:16:07] <mjlbach[m]> hmm I thought I could just plop  `add_compile_options(-static-libgcc)` into the cmake file
[07:16:08] <hendry> ii14[m]: i agree a completely statalone neovim with linked libc would be nice
[07:16:13] <mjlbach[m]> still seems to be a runtime dependency
[07:16:25] <mjlbach[m]> imo this is not the lowest hanging fruit lmao
[07:16:55] <ii14[m]> oh and with statically linked libc, LTO can potentially make it faster
[07:17:45] <ii14[m]> but that'd probably be a really minor improvement, if at all
[07:18:01] <hendry> ii14[m]: what is LTO?
[07:18:09] *** Joins: cjb35394 (~cjbayliss@user/cjb)
[07:18:11] <ii14[m]> link time optimizations
[07:18:21] <Bowuigi[m]> ii14[m]: And it would be portable to just about every Linux distro of the same archiecture
[07:18:42] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Ping timeout: 260 seconds)
[07:19:54] <ii14[m]> for example normally function inlining happens when compiling the source code to asm, and LTO could inline already compiled code
[07:19:55] <hendry> Bowuigi[m]: exactly, no Docker / Flatpak / Appimage craziness. Just a binary ;)"
[07:20:20] *** Quits: cjb (~cjbayliss@user/cjb) (Ping timeout: 260 seconds)
[07:20:47] <Bowuigi[m]> * And it would be portable to just about every Linux distro of the same architecture
[07:21:12] <ii14[m]> because you can't inline a function that's inside a shared library, that misses the point of shared libraries
[07:21:15] <Bowuigi[m]> hendry: Yeah, also glibc updates wouldn't matter, so no testing for that required
[07:21:33] <Bowuigi[m]> Lighter load on the distro maintainers
[07:22:07] <hendry> Tbh neovim typically has 10 plugins, so static probably a bit moot
[07:22:23] <ii14[m]> maintainers don't like static builds
[07:22:39] <hendry> ii14[m]: why? i love static builds
[07:23:07] *** Quits: sebastorama (~sebastora@190.83.56.68) (Quit: Textual IRC Client: www.textualapp.com)
[07:23:19] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[07:23:43] *** cjb35394 is now known as cjb
[07:24:33] <Bowuigi[m]> ii14[m]: Wait why?
[07:24:56] <ii14[m]> I forget what exactly the argument is, but they have their own reasons. they don't like applications to vendor its dependencies
[07:24:58] <Bowuigi[m]> I mean, as long as you provide a link to the source the program should stand right?
[07:25:10] <Bowuigi[m]> ii14[m]: Ah, that is why
[07:25:24] <Bowuigi[m]> Because they can't do their dependency management
[07:27:03] <hendry> typical arg against static builds is that say libssl becomes impossible to update or something like that
[07:27:43] <ii14[m]> well, if you're 
[07:27:47] <Bowuigi[m]> Interesting
[07:28:34] <ii14[m]> well, but if you're using only open source software then that's not that big of a deal
[07:28:39] <ii14[m]> you can just recompile
[07:29:06] <hendry> exactly
[07:30:00] <hendry> one arg that ppl forget with static builds, is that the linker should only pull in a subset of functions. often functions that have nothing to do with a potential CVE or something
[07:30:11] <ii14[m]> and some applications like firefox have their own copy of libssl lol
[07:30:40] <hendry> however that becomes impossible to track. i.e. you don't know what buggy function is used easily in a static binary
[07:31:55] <hendry> unless i am missing a tool. i guess you could work it out if you had all the non-stripped symbols and some extra metadata
[07:32:36] <hendry> even in Go I think this has not been quite realised. i.e. you don't quite know what versions went into a static library. Unless something changed in the last year.
[07:33:49] <ii14[m]> you can always include debug symbols
[07:34:00] <ii14[m]> or other kind of metadata
[07:34:47] <hendry> ii14[m]: i've not seen it to date. and there is always someone who things it's a good idea to strip, haha
[07:34:51] <ii14[m]> okay, I'm just repeating exactly what you've said :)
[07:36:16] *** Quits: cjb (~cjbayliss@user/cjb) ()
[07:40:16] *** Quits: noex (~noex@2600:8804:1280:aa0:5857:94a:25de:c513) (Quit: my dad's not a phone!)
[07:47:34] *** Joins: noex (~noex@2600:8804:1280:aa0:5857:94a:25de:c513)
[07:49:44] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:02:11] *** Quits: jbox (~jbox@user/jbox) (Ping timeout: 264 seconds)
[08:06:13] *** Quits: a6a45081-2b83 (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507) (Quit: Konversation terminated!)
[08:29:08] <hgc> Building is good
[08:37:10] *** Quits: tarruda (~rpi@170.238.137.7) (Quit: ZNC 1.8.2 - https://znc.in)
[08:37:56] *** Joins: tarruda (~rpi@170.238.137.7)
[08:42:17] *** Quits: slice (~slice@user/slice) (Quit: zzz)
[08:46:36] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Ping timeout: 260 seconds)
[09:00:01] *** Quits: xenrox (~xenrox@user/xenrox) (Remote host closed the connection)
[09:02:23] *** Joins: xenrox (~xenrox@user/xenrox)
[09:03:43] *** Joins: slice (~slice@user/slice)
[09:04:42] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[09:06:15] *** Quits: slice (~slice@user/slice) (Client Quit)
[09:19:35] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[09:25:24] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 256 seconds)
[09:31:14] *** Joins: slice (~slice@user/slice)
[09:32:09] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[09:33:03] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Client Quit)
[09:34:41] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[09:34:54] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Client Quit)
[09:54:58] *** Quits: rgrinberg (~textual@190.113.102.153) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:55:26] *** Quits: bindu (~bindu@user/bindu) (Quit: Leaving)
[09:55:53] *** Joins: bindu (~bindu@user/bindu)
[10:03:36] *** Joins: DixieFlatline (~soryuu@pool-173-61-70-58.cmdnnj.fios.verizon.net)
[10:09:23] *** Quits: leon (~leon@user/leon) (Ping timeout: 264 seconds)
[10:10:57] *** leon_ is now known as leon
[10:12:56] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[10:14:22] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Client Quit)
[10:28:39] *** Quits: Exa (exa@irc.moe) (*.net *.split)
[10:28:39] *** Quits: lazycat (~lazycat@user/lazycat) (*.net *.split)
[10:28:39] *** Quits: baakeydow (~baake@163.172.145.178) (*.net *.split)
[10:28:39] *** Quits: bailon (~gizzard@saturn.whatbox.ca) (*.net *.split)
[10:28:39] *** Quits: alerque1 (~caleb@2a01:4f8:150:6366::2) (*.net *.split)
[10:28:39] *** Quits: zq_ (~zq@xorshift.org) (*.net *.split)
[10:28:39] *** Quits: lux0r (~lux0r@65.56.68.34.bc.googleusercontent.com) (*.net *.split)
[10:28:39] *** Quits: jaawerth (~jaawerth@104.131.115.202) (*.net *.split)
[10:28:39] *** Quits: amenonsen (~amenonsen@pitta.toroid.org) (*.net *.split)
[10:28:39] *** Quits: LowTax (~LowTax@arch64-iad.elecompte.info) (*.net *.split)
[10:28:39] *** Quits: snappy (~snappy@user/snappy) (*.net *.split)
[10:28:39] *** Quits: deniska (~denis@user/deniska) (*.net *.split)
[10:28:39] *** Quits: taw10 (~taw@46.235.227.49) (*.net *.split)
[10:28:39] *** Quits: mabi (~m42e@pb42.de) (*.net *.split)
[10:28:39] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (*.net *.split)
[10:28:40] *** Quits: weather-beaten (~minhtrann@2001:19f0:5:352d:5400:3ff:fe22:36c5) (*.net *.split)
[10:28:40] *** Quits: drocan (~drocan@user/drocan) (*.net *.split)
[10:28:48] *** Joins: bailon (~gizzard@saturn.whatbox.ca)
[10:28:48] *** Joins: zq_ (~zq@xorshift.org)
[10:28:50] *** Joins: deniska (~denis@user/deniska)
[10:28:53] *** Joins: taw10 (~taw@46.235.227.49)
[10:28:55] *** Joins: lazycat (~lazycat@mail.nubecula.net)
[10:29:00] *** Quits: lazycat (~lazycat@mail.nubecula.net) (Changing host)
[10:29:00] *** Joins: lazycat (~lazycat@user/lazycat)
[10:29:08] *** Joins: Exa (exa@irc.moe)
[10:29:11] *** Joins: alerque1 (~caleb@2a01:4f8:150:6366::2)
[10:29:11] *** Joins: snappy (~snappy@45.32.228.130)
[10:29:16] *** Joins: baakeydow (~baake@2001:bc8:65c:2601::1)
[10:29:17] *** Joins: mabi (~m42e@pb42.de)
[10:29:20] *** Quits: snappy (~snappy@45.32.228.130) (Signing in (snappy))
[10:29:20] *** Joins: snappy (~snappy@user/snappy)
[10:29:30] *** Joins: weather-beaten (~minhtrann@45.63.13.78)
[10:29:44] *** Joins: drocan (~drocan@user/drocan)
[10:29:45] *** Joins: LowTax (~LowTax@arch64-iad.elecompte.info)
[10:29:46] *** Joins: lux0r (~lux0r@65.56.68.34.bc.googleusercontent.com)
[10:29:47] *** Joins: jaawerth (~jaawerth@104.131.115.202)
[10:30:01] *** Joins: amenonsen (~amenonsen@pitta.toroid.org)
[10:31:04] *** Quits: snappy (~snappy@user/snappy) (Client Quit)
[10:31:17] *** Joins: snappy (~snappy@user/snappy)
[10:34:22] *** Quits: hbjy (~hbjy@rockylinux/web/hbjy) (*.net *.split)
[10:34:23] *** Quits: gigamo (~gigamo@user/gigamo) (*.net *.split)
[10:34:23] *** Quits: Altreus (~altreus@2a03:b0c0:1:e0::439:5001) (*.net *.split)
[10:34:23] *** Quits: pez (~pez@user/pez) (*.net *.split)
[10:34:23] *** Quits: earthbreaker (earthbreak@2600:3c03::f03c:91ff:fece:9070) (*.net *.split)
[10:34:44] *** Joins: pez (~pez@user/pez)
[10:34:47] *** Joins: earthbre- (~earthbrea@li778-229.members.linode.com)
[10:34:57] *** Joins: hbjy (~hbjy@rockylinux/web/hbjy)
[10:35:00] *** Joins: gigamo (~gigamo@user/gigamo)
[10:35:00] *** Joins: Altreus (~altreus@2a03:b0c0:1:e0::439:5001)
[10:51:44] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[10:52:05] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[10:53:16] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[10:53:50] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Client Quit)
[10:58:49] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[11:01:11] *** Joins: the_lanetly_052 (~the_lanet@194.135.167.16)
[11:02:45] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Client Quit)
[11:05:52] *** Joins: ixil (~ixil@mpp-cp1-natpool-1-071.ethz.ch)
[11:14:12] *** Joins: tlde[m] (~tldematri@2001:470:69fc:105::1:34cf)
[11:14:55] *** Quits: carlavilla (~carlavill@2a0c:5a84:3607:2f00:221:6bff:fe3b:cee4) (Remote host closed the connection)
[11:20:52] *** Quits: dsrt^ (~dsrt@h50.174.139.63.static.ip.windstream.net) (Remote host closed the connection)
[11:35:54] *** Joins: dfip^ (~dfip@h50.174.139.63.static.ip.windstream.net)
[11:36:19] *** Quits: slice (~slice@user/slice) (Quit: cya)
[11:37:38] *** Joins: oddmunds (~oddmunds@176.111.206.100)
[11:44:26] *** Joins: AtomicInteger (~primamate@p2e545658.dip0.t-ipconnect.de)
[11:51:53] *** Joins: AsenMx (~AsenMx@user/asenmx)
[12:01:28] *** Quits: kron (~weechat@user/qaph) (Remote host closed the connection)
[12:02:03] *** Joins: kron (~weechat@user/qaph)
[12:03:32] <numToStr[m]> mjlbach: 
[12:03:33] <numToStr[m]> I have `eslint` and `tsserver` attached to a buffer and I configured `vim.diagnostics` to show the server name ie. `{ virtual_text = { source = 'if_many' } }` but the server name isn't showing up. This only works if I set `source = 'always'`. Is this expected?
[12:10:23] <sunjonSenghanBri> sounds like you and the code disagree what "many" is? :] ?
[12:10:49] <sunjonSenghanBri> I was playing with this yesterday, and it "seemed more than 1 from each source" was enough for it to label them
[12:13:59] <numToStr[m]> setting up `eslint` and `tsserver` with lspconfig feels like a war xD
[12:14:28] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[12:15:33] <numToStr[m]> sunjon (Senghan Bright): Are you saying that I miss something? 🤔
[12:16:05] <sunjonSenghanBri> no, I'm just throwing my limited experience/observations into the mix
[12:20:02] <mjlbach[m]> idk
[12:20:04] <mjlbach[m]> I never use more than a single language server
[12:20:10] <mjlbach[m]> and vim.diagnostic is now not my problem :) 
[12:20:19] <mjlbach[m]> I would try without "if_many"
[12:20:28] <mjlbach[m]> 'always' I think it is
[12:20:31] <mjlbach[m]> Oh
[12:20:32] <mjlbach[m]> you did
[12:20:47] <mjlbach[m]> if_many will only show IIRC if there are multiple diagnostics currently in the given line
[12:21:07] <mjlbach[m]> I would have to look at the source again (always the best reference)
[12:21:15] <sunjonSenghanBri> the format() option might be route to getting exactly what you want? I assume you get the source info in that callback (haven't tried)
[12:21:21] <mjlbach[m]> sunjonSenghanBri: yeah
[12:21:45] *** Joins: exondation (~wadii@2a01:e34:eca5:6c30:ae19:a90e:8628:bd43)
[12:21:54] <mjlbach[m]> I don't like the if_many/always type stringed options which is why I keep pushing gpanders to stick with formatting functions 😆
[12:22:24] <numToStr[m]> > if_many will only show IIRC if there are multiple diagnostics currently in the given line
[12:22:24] <numToStr[m]> This might be the answer I was looking for. I think I might go with `always` :) Thanks mjlbach 
[12:22:30] <numToStr[m]>  * > 
[12:22:30] <numToStr[m]> if_many will only show IIRC if there are multiple diagnostics currently in the given line
[12:22:30] <numToStr[m]> This might be the answer I was looking for. I think I might go with `always` :) Thanks mjlbach
[12:22:37] <mjlbach[m]> haha no worries
[12:22:55] <mjlbach[m]> vim.diagnostic has changed a lot since it moved out of the vim.lsp submodule and now I only review ~half those PRs
[12:30:09] *** Quits: Miek[m] (~miek8096m@2001:470:69fc:105::1:1aa8) (Quit: You have been kicked for being idle)
[12:30:09] *** Quits: AmateurAssassin[ (~amateuras@2001:470:69fc:105::3562) (Quit: You have been kicked for being idle)
[12:30:09] *** Quits: tami5[m] (~tami6matr@2001:470:69fc:105::be42) (Quit: You have been kicked for being idle)
[12:30:20] *** Quits: mvortex[m] (~mvortexma@2001:470:69fc:105::8f3a) (Quit: You have been kicked for being idle)
[12:30:20] *** Quits: tbach[m] (~tbachmatr@2001:470:69fc:105::1:156e) (Quit: You have been kicked for being idle)
[12:30:20] *** Quits: cacheerror[m] (~cacheerro@2001:470:69fc:105::734f) (Quit: You have been kicked for being idle)
[12:30:20] *** Quits: Boss[m] (~bossbigbi@2001:470:69fc:105::2acd) (Quit: You have been kicked for being idle)
[12:30:20] *** Quits: DivenTanwer[m] (~diven09ma@2001:470:69fc:105::eec3) (Quit: You have been kicked for being idle)
[12:30:20] *** Quits: f0rizen[m] (~f0rizenma@2001:470:69fc:105::3a04) (Quit: You have been kicked for being idle)
[12:30:20] *** Quits: mizlan[m] (~mizlanmat@2001:470:69fc:105::1f2b) (Quit: You have been kicked for being idle)
[12:30:20] *** Quits: LordRishav[m] (~lordrisha@2001:470:69fc:105::3a46) (Quit: You have been kicked for being idle)
[12:30:20] *** Quits: rothman[m] (~rothmanma@2001:470:69fc:105::835) (Quit: You have been kicked for being idle)
[12:30:20] *** Quits: Nakhtiar[m] (~nakhtiarm@2001:470:69fc:105::1:8b6) (Quit: You have been kicked for being idle)
[12:30:20] *** Quits: DmitryDubinin[m] (~dubininma@2001:470:69fc:105::c72e) (Quit: You have been kicked for being idle)
[12:30:20] *** Quits: RohitGoswami[m] (~rgoswamim@2001:470:69fc:105::16cc) (Quit: You have been kicked for being idle)
[12:30:20] *** Quits: oush9[m] (~oush9matr@2001:470:69fc:105::eb5) (Quit: You have been kicked for being idle)
[12:30:20] *** Quits: Trev[m] (~trevdevma@2001:470:69fc:105::4e71) (Quit: You have been kicked for being idle)
[12:30:21] *** Quits: Zacktamondo[m] (~fifo999ma@2001:470:69fc:105::15dd) (Quit: You have been kicked for being idle)
[12:30:21] *** Quits: Chris[m]12345 (~chris01ni@2001:470:69fc:105::1:6b7) (Quit: You have been kicked for being idle)
[12:30:21] *** Quits: spicyrice[m] (~spicyrice@2001:470:69fc:105::b9a7) (Quit: You have been kicked for being idle)
[12:30:21] *** Quits: hypn0z[m] (~hypn0zmat@2001:470:69fc:105::c65b) (Quit: You have been kicked for being idle)
[12:30:21] *** Quits: joentje[m] (~joentjema@2001:470:69fc:105::decb) (Quit: You have been kicked for being idle)
[12:30:21] *** Quits: Neel[m] (~neel12mat@2001:470:69fc:105::d99b) (Quit: You have been kicked for being idle)
[12:30:21] *** Quits: unrust[m] (~unrustmat@2001:470:69fc:105::1:712) (Quit: You have been kicked for being idle)
[12:30:21] *** Quits: willsir[m] (~willsirma@2001:470:69fc:105::dfa2) (Quit: You have been kicked for being idle)
[12:30:21] *** Quits: fenuks[m] (~fenuksmat@2001:470:69fc:105::ba90) (Quit: You have been kicked for being idle)
[12:30:21] *** Quits: JaredMohammed[m] (~jaredmatr@2001:470:69fc:105::15cd) (Quit: You have been kicked for being idle)
[12:30:21] *** Quits: ectocooler[m] (~ectocoole@2001:470:69fc:105::3f44) (Quit: You have been kicked for being idle)
[12:30:21] *** Quits: waveshine[m] (~waveshine@2001:470:69fc:105::1:8) (Quit: You have been kicked for being idle)
[12:30:21] *** Quits: SalamaSalama[m] (~moustafa5@2001:470:69fc:105::e6c4) (Quit: You have been kicked for being idle)
[12:30:21] *** Quits: infinitum41[m] (~infinitum@2001:470:69fc:105::fd65) (Quit: You have been kicked for being idle)
[12:30:21] *** Quits: dogfoodpizza[m] (~dogfoodpi@2001:470:69fc:105::ef69) (Quit: You have been kicked for being idle)
[12:31:07] *** Quits: ixil (~ixil@mpp-cp1-natpool-1-071.ethz.ch) (Remote host closed the connection)
[12:31:43] *** Quits: AtomicInteger (~primamate@p2e545658.dip0.t-ipconnect.de) (Quit: WeeChat 3.3)
[12:32:20] *** Joins: ixil (~ixil@mpp-cp1-natpool-2-101.ethz.ch)
[12:39:16] *** Quits: keypusher (keypusher@user/keypusher) (Ping timeout: 245 seconds)
[12:41:15] *** Joins: zostj (~rue@1-162-44-145.dynamic-ip.hinet.net)
[12:41:51] *** Joins: keypusher (keypusher@user/keypusher)
[13:03:22] <Phil[m]1> kinda wondering, whats the benefit of using a plugin like lightspeed/hop over just / search?
[13:03:55] <clason[m]> you don't have to cancel out of search
[13:04:18] <clason[m]> and you can jump to the nth (visible) match directly without spamming `n`
[13:04:56] <mjlbach[m]> I think it's kinda fun
[13:05:05] <mjlbach[m]> I've gotten really good at predicting the number of ns I need
[13:05:06] <clason[m]> also, looks cool :)
[13:05:40] <Phil[m]1> clason[m]: ah I can see that being a tangible benefit when you copy-paste a lot of code 
[13:06:10] <clason[m]> not just copy-paste
[13:06:23] <clason[m]> it's also helpful when you write text (and have long lines)
[13:08:30] <mjlbach[m]> if only it supported treesitter phaazon 
[13:09:14] <clason[m]> somebody just needs to write the extension ;)
[13:09:31] <mjlbach[m]> (inside joke)
[13:09:36] <clason[m]> (but `hintVariable` seems like it could be _very_ useful)
[13:10:51] <clason[m]> oh, and also operator mode -- you can't `d/foo` 
[13:11:35] <phaazon[m]> mjlbach[m]: as clason said, you are now free to right a Hop extension plugin supporting it 🙂
[13:11:57] <clason[m]> (which is still missing the inclusive/exclusive flag ;))
[13:12:19] <phaazon[m]> it should probably even be rather trivial right now if you have a treesitter API to get the visible part of the tree and walk it
[13:12:33] <phaazon[m]> clason: yes, it’s planned, with callbacks support
[13:12:43] <maverun[m]> wait it didnt supported treesitter? time to uninstall it then
[13:12:55] <maverun[m]> /s of course
[13:12:57] <phaazon[m]> last week I was working on another project, I should be able to do that this week
[13:13:13] <phaazon[m]> maverun: I’m genuinely interested in someone making a treesitter plugin
[13:13:23] <phaazon[m]> so that people realize how useless it would be
[13:13:25] <mjlbach[m]> phaazon[m]: poesie 2???
[13:13:26] <phaazon[m]> and stop this madness once and for all
[13:13:34] <phaazon[m]> mjlbach: no, luminance
[13:13:38] <mjlbach[m]> oh cool
[13:13:54] <mjlbach[m]> he says disappointedly
[13:13:55] <maverun[m]> wasn't there kinda treesitter hop? or wasn't really using treesitter for that?
[13:14:16] <mjlbach[m]> maverun[m]: I was just making a joke because there was some drama about forking hop to add treesitter support which never materialized
[13:14:17] <clason[m]> there's a fork that uses tree-sitter, to some extent
[13:14:30] <phaazon[m]> this « treesitter in Hop » thing makes me think of the joke / meme of business and marketing people using buzzwords just for the sake of them without understanding what’s behind
[13:14:34] <maverun[m]> right i remember that, couldn't remember a details
[13:14:36] <clason[m]> (or wants to; I didn't follow it)
[13:14:37] <phaazon[m]> « But it’s new! We need it everywhere then! »
[13:14:56] <phaazon[m]> mjlbach[m]: I think it did materialize?
[13:15:11] <phaazon[m]> https://github.com/IndianBoy42/hop.nvim
[13:15:12] <phaazon[m]> ah
[13:15:12] <mjlbach[m]> I thought it was forked and then didn't receive attention/commits
[13:15:12] <clason[m]> phaazon[m]: I think you're doing tree-sitter (and yourself) a disservice by blindly dismissing it
[13:15:15] <phaazon[m]> the fork is deprecated
[13:15:21] <phaazon[m]> that’s… really surprising
[13:15:30] <phaazon[m]> clason[m]: you don’t understand?
[13:15:38] <phaazon[m]> the extension plugin allows for it
[13:15:38] <clason[m]> I really don't
[13:15:40] <phaazon[m]> if I really dismissed it
[13:15:45] <phaazon[m]> I would have never written an extension plugin
[13:15:54] <mjlbach[m]> imo it's the way
[13:15:54] <phaazon[m]> the thing is, I don’t want people not to be able to use it
[13:16:00] <phaazon[m]> and I don’t want to have to maintain it
[13:16:00] <mjlbach[m]> nvim-cmp/hop have it right
[13:16:02] <phaazon[m]> so yes, it’s the way to me
[13:16:11] <clason[m]> I understand that _you_ are not interested in writing it, but just claiming "it's useless" is poor form...
[13:16:16] <mjlbach[m]> implement the core feature set and delegate to plugins
[13:16:42] <phaazon[m]> clason: it doesn’t follow the core principles of Hop
[13:16:48] <clason[m]> which are?
[13:16:53] <phaazon[m]> so yes, in that sense, it’s not a good additions
[13:17:00] <clason[m]> highlight only what you think is useful?
[13:17:07] <clason[m]> never mind other people's workflow?
[13:17:22] <clason[m]> But you forget: FOSS is about being relevant to me!
[13:17:34] <phaazon[m]> clason: jumping in a buffer shouldn’t have a strong context
[13:17:40] <phaazon[m]> it should be visual, not semantics
[13:17:44] <phaazon[m]> when I want to jump HERE
[13:17:57] <phaazon[m]> I don’t want to check first in my brain that « around this are argument variables, so this is a function definition »
[13:17:57] <clason[m]> why? 
[13:18:06] <numToStr[m]> The same wrote a hop extension for treesitter https://github.com/IndianBoy42/hop-extensions
[13:18:06] <phaazon[m]> because it’s way slower and requires much more mental effort
[13:18:18] <clason[m]> I understand that you don't think you'll find it useful
[13:18:25] <phaazon[m]> exactly
[13:18:27] <phaazon[m]> and then
[13:18:34] <phaazon[m]> what is it you don’t understand that I created the extension system
[13:18:38] <phaazon[m]> so that people can do whatever they want?
[13:18:40] <clason[m]> But that doesn't mean it won't be useful to anyone -- which is what you're claiming
[13:18:44] <phaazon[m]> what’s your complaint here actually?
[13:18:54] <clason[m]> that you're needlessly dismissive
[13:18:56] <maverun[m]> numToStr[m]: that one i was thinking of
[13:19:05] <phaazon[m]> oh I think a lot of people will realize that it’s not practical, yes
[13:19:10] <phaazon[m]> « useless » is a bit too strong yes
[13:20:02] <clason[m]> I think there are circumstances where it can be very useful. (Those will not be always, of course.)
[13:20:17] <phaazon[m]> numToStr[m]: thanks for the link, I didn’t know, and I’m happy to see how short the plugin is
[13:20:28] <phaazon[m]> I guess the extension system of Hop, which took me a whole weekend to right, is okay then 😀
[13:20:47] <phaazon[m]> clason: I thought about that a few months ago
[13:21:01] <clason[m]> oh, for sure. no complaints about the code; the extension system is the right way of going about it
[13:21:21] <phaazon[m]> like « it could be interesting to jump to Markdown headlines right away… wait, I can simply do that with the words() mode or line mode already… »
[13:21:29] <mjlbach[m]> phaazon[m]: or gO
[13:21:36] <mjlbach[m]> actually that may not work on md
[13:21:48] <mjlbach[m]> heh nvm
[13:22:09] <mjlbach[m]> could make it work tho
[13:22:09] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[13:22:12] <clason[m]> OK, here's a (fictitious for now) example: Jump to math context in a LaTeX buffer
[13:22:12] <phaazon[m]> but as I said (and it’s in the help pages), if something provides interesting hinting, I will add it back to core
[13:22:21] <phaazon[m]> but I don’t want to have to maintain something like treesitter hinting
[13:22:57] <mjlbach[m]> wonder if it works ootb with rst table of contents
[13:23:00] <phaazon[m]> however, to me, the « jump to … » would be much better implemented as a telescope extension
[13:23:01] <phaazon[m]> like
[13:23:07] <phaazon[m]> « I wanna jump to this function I know »
[13:23:18] <clason[m]> yeah, function makes little sense
[13:23:18] <phaazon[m]> that’s something I would really want
[13:23:32] <phaazon[m]> because jumping to workspace symbols is often broken with rust-analyzer
[13:23:36] <clason[m]> that's something Telescope document_symbol will do better
[13:23:40] <phaazon[m]> (i.e. the 128 limit cap, etc.)
[13:23:52] <clason[m]> ah, bad language server is a problem
[13:24:11] <clason[m]> hop is for navigating what's on the screen
[13:24:23] <phaazon[m]> yes
[13:24:30] <clason[m]> if there's a lot on the screen, adding structure can be helpful
[13:24:32] <phaazon[m]> hence why I don’t think using treesitter hinting is that useful
[13:24:36] <phaazon[m]> yes
[13:24:40] <phaazon[m]> but even then
[13:24:41] <mjlbach[m]> Well
[13:24:46] <mjlbach[m]> I think some things would be cool
[13:24:48] <phaazon[m]> with the current algorithm I have implemented in Hop
[13:24:50] <mjlbach[m]> like navigating up the AST
[13:24:51] <phaazon[m]> even with a shitload of things
[13:25:01] <phaazon[m]> you still have 2 / 3 key labels
[13:25:03] <clason[m]> I think you have a very limited idea of what tree-sitter does (and can do)...
[13:25:05] <mjlbach[m]> with asdf for example
[13:25:18] <phaazon[m]> I think I understand perfectly what treesitter does 😀
[13:25:36] <phaazon[m]> mjlbach: yes, I wanted to make a plugin to do that
[13:25:40] <phaazon[m]> moving in the AST by semantics blocks
[13:25:54] <phaazon[m]> like, go to next function, go to next instruction, go to next section in yaml, etc.
[13:26:04] <phaazon[m]> a bit like what `paredit` is in emacs for Lisp
[13:26:12] <phaazon[m]> but generalized for treesitter
[13:26:13] <maverun[m]> speaking of treesitter, i map swap from text object into left/right arrow key XD, very useful and better
[13:26:20] <mjlbach[m]> I think the hop interface is reusable for that
[13:26:27] <mjlbach[m]> because in many cases the AST would be present on the same page
[13:26:49] <mjlbach[m]> * cases the elements in the buffer corresponding to the pertinent parts of the AST would
[13:26:54] <phaazon[m]> I thought more about a « h j k l » version of it
[13:27:09] <mjlbach[m]> I like the symmetry of asdf haha
[13:27:11] <phaazon[m]> there is a difference between moving to a semantics position and moving to « somewhere on the screen to me »
[13:27:15] <mjlbach[m]> I guess it should be sdfg
[13:27:22] <mjlbach[m]> idgaf
[13:27:28] <phaazon[m]> I like idgaf
[13:27:30] <phaazon[m]> for obvious reasons
[13:27:31] <phaazon[m]> 😀
[13:27:39] <maverun[m]> are we talking about key?
[13:27:47] <mjlbach[m]> ofc what else would we be talking about 
[13:28:04] <maverun[m]> oh..uh.. hiding something
[13:28:05] <maverun[m]> nothing else
[13:28:12] <mjlbach[m]> ;)
[13:28:59] <bfredl> that would be conceal :]
[13:31:23] <phaazon[m]> 🙂
[13:53:12] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Read error: Connection reset by peer)
[13:55:15] *** Quits: AsenMx (~AsenMx@user/asenmx) (Ping timeout: 250 seconds)
[13:55:49] <phaazon[m]> the work computer crashed on me
[13:55:52] <phaazon[m]> I… didn’t have the buffer saved
[13:55:54] *** Joins: AsenMx (~AsenMx@user/asenmx)
[13:56:04] <phaazon[m]> I guess I deserve it for disabling autosave
[13:56:12] <maverun[m]> oh well time to nuke repo?
[13:57:15] <phaazon[m]> wait, what is that option again?
[13:57:18] <maverun[m]> i map <esc><cmd>:update<cr> to <esc> of insert mode
[13:57:47] <ii14[m]> maybe it's in undo history?
[13:58:37] <ii14[m]> how often does vim write to shada?
[13:59:03] <ii14[m]> is it regularly or just on exit
[13:59:19] <ii14[m]> wait no, undo history is not in shada
[14:00:31] <ii14[m]> check :undolist when the last edit was
[14:01:18] <ii14[m]> or undotree()
[14:06:32] *** Joins: potamides (~amnifiliu@2001:41b8:83c:fa01:6ccf:3460:4fec:ae63)
[14:08:04] <leiserfg[m]> <mjlbach[m]> "or gO" <- Adding to my todo list making a plugin to implement that using tree-sitter for markdown and org-mode,   potential name "MangO tree" 
[14:12:14] *** Joins: guido (~guido@2001:b07:6455:ac4f:3641:5dff:fe55:2a8f)
[14:13:24] *** Quits: AsenMx (~AsenMx@user/asenmx) (Ping timeout: 265 seconds)
[14:13:47] *** Joins: AsenMx (~AsenMx@user/asenmx)
[14:15:19] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[14:15:39] <ii14[m]> you don't need treesitter for that
[14:16:15] <ii14[m]> it's literally just something like `:g/^#\s\+\w/#`
[14:16:15] <clason[m]> yes, but then you can't use that name (which is the whole point of the exercise...)
[14:17:25] <ii14[m]> okay, I don't know the context
[14:20:13] <clason[m]> (the context was that it's a joke.)
[14:20:28] <ii14[m]> speaking of easymotion like plugins
[14:20:41] <phaazon[m]> the context is that clason wants treesitter hopping
[14:20:43] <ii14[m]> some time ago I made something like that for buffers
[14:20:46] <ii14[m]> https://github.com/ii14/bufjump.vim
[14:20:54] <phaazon[m]> and I said I don’t care using a bad form 🙂
[14:21:00] <phaazon[m]> for which I apologize
[14:21:20] <clason[m]> all good, "I don't care" is perfectly acceptable ,)
[14:21:39] <phaazon[m]> yes but « useless » is not
[14:21:46] <clason[m]> indeed
[14:22:07] *** Joins: taupiqueur (~taupiqueu@9.146.204.77.rev.sfr.net)
[14:22:23] <clason[m]> "useless _to me_, so I'm not going to spend any time on it" is, however
[14:23:04] <bfredl> open source is about being relevant to me, solving real problems, i e my problems
[14:23:17] <clason[m]> real itches
[14:23:26] <clason[m]> (aka scratch my back)
[14:24:54] <ii14[m]> clason cool idea, but would it actually be any better than just searching for characters?
[14:25:04] <clason[m]> what would?
[14:25:11] <ii14[m]> treesitter hopping
[14:25:21] <clason[m]> well, depends on the context (and the language)
[14:25:59] <clason[m]> for example, imagine you have a screenful of LaTeX
[14:26:22] <clason[m]> and you want to jump to a certain inline math context
[14:26:30] <clason[m]> which are delimited by `$`
[14:26:45] <clason[m]> so typing `$` will give you a lot of targets
[14:27:14] <maverun[m]> the moment clason give example, you should expect it would be something related to latex...
[14:27:21] <clason[m]> but you know you want to go to the start of that math context, so you can cut down on half the targets right out of the box
[14:27:31] <clason[m]> sure, because that is what I'm most familiar with
[14:27:58] <ii14[m]> can't you search for two characters? makes it more accurate
[14:28:00] <clason[m]> (and because it's a useful example to illustrate that not everybody uses Neovim in exactly the same way)
[14:28:19] <clason[m]> sure, but then you have to type those
[14:28:25] <ii14[m]> well yeah, using something like hop/easymotion is just something else
[14:28:30] <clason[m]> and think about which two to select
[14:29:01] <clason[m]> another example could be hinting just variables
[14:29:49] <clason[m]> or even just variable declarations
[14:30:36] <clason[m]> I'm not saying it's categorically better than character-based hinting; I'm just saying that it can (in some situations, for some people) be a useful alternative
[14:33:54] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:34:48] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[14:35:41] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Client Quit)
[14:36:25] <hendry> been staring at https://www.reddit.com/r/neovim/comments/q893u5/eslint_language_server_added_to_nvimlspconfig/ and I still don't understand how to configure the lsp for eslint
[14:44:42] *** Quits: kron (~weechat@user/qaph) (Remote host closed the connection)
[14:45:01] *** Joins: kron (~weechat@user/qaph)
[14:48:00] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[14:51:23] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 264 seconds)
[14:53:12] *** Joins: the_lanetly_052_ (~the_lanet@185.30.88.43)
[14:54:24] <numToStr[m]> hendry: I feel you man. Although I did set it up but it is sending false errors across the project (which is large and created w/ yarn workspaces).
[14:55:56] *** Quits: the_lanetly_052 (~the_lanet@194.135.167.16) (Ping timeout: 265 seconds)
[15:01:34] *** Joins: afidegnum (~afidegnum@102.176.94.225)
[15:01:57] <afidegnum> hi, most of the tree viewers I come across are associated to a file explorer. is there a custom tree viewer i can extend? i.e load tree from json, edit nodes etc... ?
[15:02:34] <clason[m]> oh, that sounds like an interesting idea
[15:02:41] <clason[m]> (I'm not aware of one, no.)
[15:02:54] <clason[m]> [insert tree-sitter joke here]
[15:04:50] *** Joins: KOKOUAFIDEGNON[m (~afidegnum@2001:470:69fc:105::1:34e0)
[15:05:09] <KOKOUAFIDEGNON[m> hi
[15:05:18] <windwp[m]> dap-ui have a tree you can click and view node
[15:05:43] <afidegnum> dap-ui, is it not part of the LSP ?
[15:05:56] <sunjonSenghanBri> I think I have some code somewhere that turns a generic table into a tree
[15:06:02] <sunjonSenghanBri> might be in python, but wouldn't be hard to convert
[15:06:17] <afidegnum> python will be fine, 
[15:07:19] <sunjonSenghanBri> I'll try find it shortly
[15:07:53] *** Quits: guido (~guido@2001:b07:6455:ac4f:3641:5dff:fe55:2a8f) (Quit: WeeChat 3.3)
[15:11:03] *** Quits: zostj (~rue@1-162-44-145.dynamic-ip.hinet.net) (Quit: WeeChat 3.3)
[15:11:22] *** Joins: zostj (~rue@1-162-44-145.dynamic-ip.hinet.net)
[15:14:51] <leiserfg[m]> https://github.com/kristijanhusak/vim-dadbod-ui has one too
[15:17:21] <afidegnum> ok, thanks, 
[15:18:13] <sunjonSenghanBri> windwp: heh, I've only just noticed the running cat you mentioned on Github
[15:25:35] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 264 seconds)
[15:25:52] <sunjonSenghanBri> afidegnum:libera.chat: I can't find it at the moment
[15:27:20] <windwp[m]> i see it often . my internet speed is not good :)
[15:32:09] <afidegnum> sunjonSenghanBri: ok, thanks a lot in advance, i'm still searching though 
[15:33:18] <sunjonSenghanBri> I did find a few years worth of  old freenode #neovim logs :]
[15:33:24] <sunjonSenghanBri> 2016-11-10 14:48:12     boonkerz        vim or neovim 😄
[15:33:25] <sunjonSenghanBri> 2016-11-10 15:27:42     JustinMKeyesGitt        goal of neovim is: "you don't need to choose"
[15:37:39] <sunjonSenghanBri> it's bad form to resurrect 4 years old conversations, right? right!
[15:37:48] <sunjonSenghanBri> 2016-11-10 15:50:22     LeoNerd How is it nobody's written a decent .pcapng-style format for terminal captures? script(1) is rubbish
[15:37:57] <sunjonSenghanBri> I need this atm 
[15:38:21] <LeoNerd> Hi what?
[15:38:55] <sunjonSenghanBri> is there anything better than script that you're aware of now?
[15:39:25] <sunjonSenghanBri> I'm building something around dtach, and was going to use script + altscreen to try inject scrollback
[15:40:23] <LeoNerd> Oh, no there still isn't
[15:40:42] <LeoNerd> I might have to make it, but eugh.. I don't have much use for it so it'd be waaay down my already-huge TODO heap
[15:40:49] <LeoNerd> DAG
[15:40:54] <LeoNerd> .. maybe-A
[15:53:49] *** Joins: brian__ (~brianc@46.7.105.181)
[15:55:19] <wyre> what's `:e` for? :think
[15:55:22] <wyre> 🤔
[15:56:02] <sunjonSenghanBri> !h :edit
[15:56:07] <nvim-bot[m]> Links to referenced help pages:
[15:56:07] <nvim-bot[m]> * [`:edit`](https://neovim.io/doc/user/editing.html#:edit) in *editing.txt*
[15:56:21] *** Quits: brian_ (~brianc@46.7.105.181) (Ping timeout: 245 seconds)
[15:56:35] *** Quits: taupiqueur (~taupiqueu@9.146.204.77.rev.sfr.net) (Ping timeout: 250 seconds)
[15:56:54] <wyre> hmmm, I don't get why `:edit ++ff=unix` does show Windows's carriage return 
[15:57:27] <wyre> oh, it overrides the file format ... I see
[16:00:48] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[16:05:31] *** Quits: afidegnum (~afidegnum@102.176.94.225) (Ping timeout: 245 seconds)
[16:07:39] *** Joins: afidegnum (~afidegnum@41.66.202.243)
[16:08:15] *** Quits: afidegnum (~afidegnum@41.66.202.243) (Client Quit)
[16:17:02] <windwp[m]> sunjon (Senghan Bright): if i delete my message now but you still have a copy of my message on 4 years later
[16:17:30] <sunjonSenghanBri> yes. logs are evil
[16:35:37] *** Joins: taupiqueur (~taupiqueu@4.196.204.77.rev.sfr.net)
[16:37:47] <numToStr[m]> `eslint` and `yarn workspace` users, let's cry together https://github.com/neovim/nvim-lspconfig/issues/1427
[16:38:54] <clason[m]> You should know better than to ask usage questions on the nvim-lspconfig issue tracker...
[16:40:10] <numToStr[m]> IDK how to put it. It seems like an issue and I've reproduced it in a demo project. I could change the title :)
[16:42:01] <clason[m]> sounds like you need a custom `root_dir` in the setup
[16:42:04] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[16:46:04] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[16:46:41] <numToStr[m]> Will it work with multiple config files? As I have multiple `eslint` config files, each for every project.
[16:46:54] <clason[m]> I have no idea.
[16:47:18] <numToStr[m]> [sad noises]
[16:47:57] <clason[m]> That depends on how eslint works, which I have no experience with
[16:48:27] <numToStr[m]> vscode and coc.nvim spolied us all :) 
[16:48:38] <clason[m]> well, that's a bit apples and oranges
[16:48:58] <clason[m]> the main question is how eslint wants to be fed its configuration file
[16:50:23] <elianiva[m]> not sure about yarn workspace but I use npm workspace with multiple config per workspace and eslint worked just fine
[16:50:34] <elianiva[m]> s/config/configs/, s/per workspace//
[16:51:08] <elianiva[m]> I think clason is right, you'd want to feed eslint the correct root_dir
[16:51:36] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:53:04] <numToStr[m]> elianiva: Do you have a project with npm workspace? Also, did you configure eslint server or just using the vanilla config from lspconfig?
[16:54:16] <elianiva[m]> Yes. 
[16:54:16] <elianiva[m]> I was using eslint with null-ls but switched to eslint lang server, they both works fine. I didn't pass any option to it.
[16:55:02] <numToStr[m]> Would you mind sharing the project?
[16:55:13] <elianiva[m]> https://github.com/teknologi-umum/graphene
[16:55:19] <wsdjegWangShidon> `has('python3')` is too slow in neovim. how to fix it?
[16:55:32] <wsdjegWangShidon> it take about 147ms on startup.
[16:56:04] <clason[m]> :h g:python3_host_prog
[16:56:14] <wsdjegWangShidon> I have set g:python3_host_prog
[16:56:51] <clason[m]> then that's as fast as it gets
[16:59:47] <wsdjegWangShidon> hmm
[17:00:16] <wsdjegWangShidon> my nvim startup is too slow, with same config, vim8 only need 50ms
[17:00:26] <wsdjegWangShidon> neovim needs 450ms
[17:01:46] <clason[m]> depends very much on the platform
[17:01:52] <clason[m]> my neovim starts in 15ms
[17:02:13] <ShougoShougo[m]> My neovim starts in 15ms
[17:02:46] <windwp[m]> numToStr:  you  should print log  on root_dir  of eslint server may be it find wrong root_dir
[17:02:50] <ShougoShougo[m]> > `has('python3')` is too slow in neovim. how to fix it?
[17:03:01] <ShougoShougo[m]> No magic.  You should not call it in your vimrc
[17:05:38] <phaazon[m]> hm, `gx` doesn’t work on my neovim
[17:06:57] <clason[m]> needs a few more details...
[17:07:36] <phaazon[m]> opening URL links with `gx` yields an error about `netrw#BrowseX` not being available :sus: 
[17:08:04] <sunjonSenghanBri> `gx` comes from netrw
[17:08:23] <phaazon[m]> hm, I will override that then
[17:08:28] <sunjonSenghanBri> you might have disabled it with one of the `_loaded` optimisations
[17:08:33] <phaazon[m]> is there a default way to do that with neovim? or do I need a plugin or something?
[17:08:44] <clason[m]> or not configured a viewer
[17:08:47] <clason[m]> !h netrw-gx
[17:08:49] <nvim-bot[m]> Links to referenced help pages:
[17:08:50] <nvim-bot[m]> * [`netrw-gx`](https://neovim.io/doc/user/pi_netrw.html#netrw-gx) in *pi_netrw.txt*
[17:08:55] <sunjonSenghanBri> just bind it to your own function. mine calls xdg-open
[17:09:09] <phaazon[m]> my function?
[17:09:21] <sunjonSenghanBri> https://paste.sh/LjSlU24V#fCGwGdLngz5zrdG-LGhByhwg
[17:10:03] <sunjonSenghanBri> not the prettiest, but you get the point :]
[17:11:15] <windwp[m]> i think we need a lua version
[17:11:35] <phaazon[m]> yeah I think there is a plugin that does all that
[17:11:40] <phaazon[m]> ult, maybe?
[17:14:58] *** Quits: noex (~noex@2600:8804:1280:aa0:5857:94a:25de:c513) (Quit: my dad's not a phone!)
[17:15:41] *** Joins: SirJitsu2 (~SirJitsu@162-231-111-175.lightspeed.livnmi.sbcglobal.net)
[17:16:10] *** Joins: noex (~noex@ip68-13-181-143.om.om.cox.net)
[17:20:53] *** Joins: MarcelKrger[m]1 (~marcel2kr@2001:470:69fc:105::1:34f8)
[17:21:22] <ShougoShougo[m]> Hi
[17:21:23] <ShougoShougo[m]> https://github.com/neovim/neovim/pull/16251
[17:21:36] <ShougoShougo[m]> I have fixed `set cmdheight=0` problems.
[17:22:48] <sunjonSenghanBri> nice :]
[17:22:59] <ayhomaru[m]> nice thx!
[17:23:05] <ShougoShougo[m]> I will test the feature.
[17:23:35] <ShougoShougo[m]> It is better than other PRs.  It is very hard...
[17:26:17] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 250 seconds)
[17:32:57] <ayhomaru[m]> Btw guys anyone is using nvim mouseshape option in Alacritty? It does work in st (simple terminal) when I set the $TERM variable, but I could not get it to work with alacritty :(
[17:33:10] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[17:35:24] <sunjonSenghanBri> I suggest you browse alarcitty issues
[17:35:42] <sunjonSenghanBri> It's super unlikely that if it doesn't work, you're the first to notice at this late point
[17:36:28] *** Joins: bindu (~bindu@user/bindu)
[17:36:29] <ayhomaru[m]> Just checked them, but they are all close but I am gonna try further with adjusting the terminfo or trying some xterm compatibility mode
[17:36:34] <ayhomaru[m]> *closed
[17:40:24] <numToStr[m]> <windwp[m]> "numToStr:  you  should print log..." <- If `LspInfo` is correct then `root_dir` changes relative to the package that I am working on. IDK if that correct or not. Would you mind telling me the steps to debug the `root_dir`?
[17:43:31] <sunjonSenghanBri> numtostr:matrix.org: https://github.com/emacs-lsp/lsp-mode/discussions/3095 is a generic explanation
[17:46:13] <clason[m]> also `:help lspconfig-root`
[17:47:17] *** Joins: cottoneyejim (~cottoneye@2a01:261:3ed:2c00:ea6a:64ff:fe4f:b643)
[17:47:54] *** Joins: nyah (~nyah@94.6.71.219)
[18:00:04] *** Joins: arkurious (~arkurious@user/arkurious)
[18:03:47] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[18:04:29] *** Joins: bindu (~bindu@user/bindu)
[18:17:00] *** Quits: Kesava (~Kesava@user/kesava) (Quit: Quitting)
[18:17:32] *** Joins: Kesava (~Kesava@user/kesava)
[18:22:51] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[18:25:02] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Client Quit)
[18:25:38] *** Joins: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net)
[18:28:44] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[18:38:29] *** Joins: qaph (~weechat@user/qaph)
[18:40:53] *** Quits: kron (~weechat@user/qaph) (Ping timeout: 246 seconds)
[18:40:56] *** qaph is now known as kron
[18:53:50] *** Quits: kotto (~kotto@2001:8a0:ee37:f500:2ad2:44ff:fe68:9566) (Ping timeout: 246 seconds)
[18:59:29] *** Joins: fazidevirfazidev (~fazidevir@2001:470:69fc:105::1:350a)
[18:59:30] <fazidevirfazidev> Hello. I have a super stupid question. I'm trying to get lspsaga to work from here.
[19:00:30] <fazidevirfazidev> https://github.com/glepnir/lspsaga.nvim there are some icons in there. but all I see are squares. I have been struggling for 3 hours trying different fonts to make them appear. anyone knows what I should do to see them and copy them? ( I know I can replace them with my own thing, but I wanted to ask)
[19:01:04] <clason[m]> lspsaga is unmaintained and broken on current master; I'd advise moving away from it.
[19:01:16] <clason[m]> (Most things can be done with built-in functionality now.)
[19:02:57] <fazidevirfazidev> [![Screenshot_20211115_190210.png](https://files.gitter.im/5506b96e15522ed4b3dd5317/tuAE/thumb/Screenshot_20211115_190210.png)](https://files.gitter.im/5506b96e15522ed4b3dd5317/tuAE/Screenshot_20211115_190210.png)
[19:04:01] <fazidevirfazidev> Thank you for letting me know. I wont use it then. but for just my curiosity and since I'm losing my mind. can you check that if you see just squares instead of symbols as well? 
[19:05:41] <sunjonSenghanBri> you can just paste the symbols into your terminal command line
[19:06:04] <sunjonSenghanBri> if they don't render, it's a terminal/font problem
[19:07:22] <fazidevirfazidev> well they wont render on Android, Windows and Linux. so I assume they might be apple symbols?
[19:08:17] <sunjonSenghanBri> no, you're guessing
[19:08:25] <sunjonSenghanBri> type `echo '\u25ba'` into your terminal
[19:08:33] *** Quits: dfip^ (~dfip@h50.174.139.63.static.ip.windstream.net) (Remote host closed the connection)
[19:09:18] <fazidevirfazidev> it returns \u25ba
[19:09:35] <sunjonSenghanBri> ah bash
[19:09:47] *** Joins: comment (~comment@CBL192-116-57-18.bb.netvision.net.il)
[19:09:51] <sunjonSenghanBri> try `$'\u25ba'` instead
[19:10:08] *** Parts: koon (johan@91.231.153.182) ()
[19:10:15] <fazidevirfazidev> it shows an arrow
[19:10:32] <fazidevirfazidev> but that was the only readable thing for me on their github
[19:10:49] <sunjonSenghanBri> 4/5 of the default characters are that char
[19:10:52] <fazidevirfazidev> rename_prompt_prefix = '➤'
[19:11:08] *** Quits: oddmunds (~oddmunds@176.111.206.100) (Ping timeout: 265 seconds)
[19:11:39] <sunjonSenghanBri> ah there's loads
[19:11:49] <sunjonSenghanBri> I'm 99% sure this is your font.
[19:11:53] <sunjonSenghanBri> what are you using?
[19:12:05] <fazidevirfazidev> Linux. tried on windows and android as well tho
[19:12:18] <sunjonSenghanBri> which font.
[19:12:39] <sunjonSenghanBri> you need something patched with the appropriate unicode symbols
[19:12:44] <fazidevirfazidev> I tried Hack, Dejavu. both unpatched and patched with nerdfonts
[19:12:50] *** Joins: zro (~zro@user/zro)
[19:14:28] <mjlbach[m]> <numToStr[m]> "`eslint` and `yarn workspace..." <- When people open issues like these, they are just going to sit unanswered, because I have 0 functional knowledge of the JS ecosystem 
[19:15:18] <leiserfg[m]> <sunjonSenghanBri> "type `echo '\u25ba'` into your..." <- is advisable to always use `printf` as `echo` is shell dependent 
[19:15:29] *** Quits: comment (~comment@CBL192-116-57-18.bb.netvision.net.il) (Ping timeout: 250 seconds)
[19:15:55] <dundargoc> Is advisable to not use shell scripting ever
[19:16:00] <dundargoc> #hottake
[19:16:01] <mjlbach[m]> There are basically only 3 things lspconfig can ever do wrong, it sends the wrong root dir, it sends the wrong initializationOptions, or it sends the wrong settings
[19:16:51] <sunjonSenghanBri> #superdeep
[19:18:35] *** Quits: zro (~zro@user/zro) (Ping timeout: 268 seconds)
[19:18:45] <mjlbach[m]> Or the server needs some environmental variable set (pyright, pylsp) which imo is outside the purview of lspconfig
[19:19:00] *** Joins: zro (~zro@user/zro)
[19:20:22] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[19:20:53] *** Joins: bindu (~bindu@user/bindu)
[19:25:06] *** Joins: jamietanna[m] (~jamietann@2001:470:69fc:105::30f0)
[19:25:34] *** Quits: ixil (~ixil@mpp-cp1-natpool-2-101.ethz.ch) (Remote host closed the connection)
[19:25:53] *** Quits: falk689 (~falk689-q@gateway/tor-sasl/falk689) (Remote host closed the connection)
[19:26:23] *** Joins: falk689 (~falk689-q@gateway/tor-sasl/falk689)
[19:27:11] *** Quits: keypusher (keypusher@user/keypusher) (Ping timeout: 250 seconds)
[19:27:56] <leiserfg[m]> I guess that's a niche functionality of those using yarn workspaces and probably requires to extend `settings.workspace.library` to include the packages yarn is installing wherever it wants to 
[19:28:15] *** Joins: ixil (~ixil@mpp-cp1-natpool-2-189.ethz.ch)
[19:29:00] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[19:30:07] *** Quits: she3o[m] (~she3omatr@2001:470:69fc:105::1:cc6) (Quit: You have been kicked for being idle)
[19:30:07] *** Quits: Ayresia[m] (~ayresiama@2001:470:69fc:105::1:1a58) (Quit: You have been kicked for being idle)
[19:30:08] *** Quits: ubLIX[m] (~ublixmatr@2001:470:69fc:105::5c0) (Quit: You have been kicked for being idle)
[19:31:26] *** Quits: ixil (~ixil@mpp-cp1-natpool-2-189.ethz.ch) (Read error: Connection reset by peer)
[19:31:41] <mjlbach[m]> Yeah the eslint configuration page is huge
[19:31:41] <mjlbach[m]> https://eslint.org/docs/user-guide/configuring/
[19:32:35] <kylo252[m]> <mjlbach[m]> "When people open issues like..." <- amen
[19:33:11] <kylo252[m]> apparently null-ls doesn't do CodeActions for eslint, so that's one way to push people to try and learn about this server at least
[19:35:00] *** Joins: towb (~bwot@user/towb)
[19:35:18] *** Parts: the_lanetly_052_ (~the_lanet@185.30.88.43) (Leaving)
[19:35:34] *** Joins: rgrinberg (~textual@152.231.136.22)
[19:35:41] *** Joins: ixil (~ixil@mpp-cp1-natpool-2-189.ethz.ch)
[19:35:55] <mjlbach[m]> I 100% prefer people to use real language servers when possible hah
[19:36:18] <mjlbach[m]> I just have thus far avoided gaining any functional web development knowledge  and intend for it to stay this way
[19:48:10] *** Joins: sebastorama (~sebastora@190.83.56.68)
[19:49:12] <kylo252[m]> I was wondering why this isn't a thing until I saw how the request needs to be sent, and now I'm bummed about it:
[19:49:12] <kylo252[m]> https://github.com/neovim/neovim/issues/14869
[19:50:40] <mjlbach[m]> Well
[19:50:47] <mjlbach[m]> you could do something off-spec
[19:50:56] <mjlbach[m]> if you controlled the server implementation :) 
[19:52:06] *** Joins: keypusher (keypusher@user/keypusher)
[19:52:12] <kylo252[m]> I tried to see how vscode are handling it, and apparently it's also per-line. and even then it's not always shown for certain situations 
[19:53:04] <p00f> <mjlbach[m]> "I 100% prefer people to use real..." <- or just use ale
[19:54:05] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Quit: varioust)
[19:54:15] <mjlbach[m]> kylo252[m]: yup
[19:54:33] *** Joins: lilgopher (~textual@2601:241:8000:38f0:edd5:dcfc:17ed:129)
[19:55:47] <sunjonSenghanBri> I did a lightbult (before lightbulb) and just cached/validated-cache codeactions on a timer(200ms) tick
[19:56:10] <mjlbach[m]> yup That Is the Way
[19:56:11] <mjlbach[m]> sadly
[19:56:22] <mjlbach[m]> one of the four most annoying things about 3.17
[19:57:10] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[20:00:26] *** Quits: zro (~zro@user/zro) (Ping timeout: 265 seconds)
[20:01:35] <kylo252[m]> I'm reading their implementation, and there are so many goddamn corner cases. it's quite a bit more annoying to implement than I had originally expected tbh:... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/5d7a5077e6754cefb8bd5a86b3311a2039cb15f3)
[20:01:55] <mjlbach[m]> would be way easier to subscribe to them like diagnostics
[20:02:00] <mjlbach[m]> via push notifications
[20:02:06] <mjlbach[m]> a pull would be fine too
[20:02:18] *** Joins: zro (~zro@user/zro)
[20:10:13] *** Quits: utraciss (~utraciss@1.32.68.183) (Quit: %quit from znc%)
[20:12:17] *** Quits: exondation (~wadii@2a01:e34:eca5:6c30:ae19:a90e:8628:bd43) (Quit: WeeChat 3.3)
[20:17:50] *** Quits: taupiqueur (~taupiqueu@4.196.204.77.rev.sfr.net) (Ping timeout: 265 seconds)
[20:33:13] *** Joins: jy (~jy@166.147.161.66.ded-dsl.fuse.net)
[20:37:38] *** Quits: lux0r (~lux0r@65.56.68.34.bc.googleusercontent.com) (Ping timeout: 260 seconds)
[20:38:01] *** Joins: lux0r (~lux0r@65.56.68.34.bc.googleusercontent.com)
[20:38:29] <sb[m]1> Hmmm, all the hype with treesitter... but at least for C++, I prefer vim's original syntax highlighting and the treesitter-based auto-indenting is also weird. (using 0.5.1, maybe it has all become better with later versions)
[20:39:41] *** Joins: exondation (~wadii@2a01:e34:eca5:6c30:2015:651a:ffd8:d717)
[20:39:45] <clason[m]> really? vim's builtin syntax for C++ is especially poor
[20:39:53] <clason[m]> (as in "offers very few syntax groups")
[20:39:57] <p00f> also treesitter is much much more than highlighting
[20:40:16] <clason[m]> and indenting isn't fully working yet
[20:40:25] <p00f> clason[m]: garbage java highlighting was why I got into nvim-treesitter
[20:40:57] *** Quits: jy (~jy@166.147.161.66.ded-dsl.fuse.net) (Remote host closed the connection)
[20:41:24] <p00f> p00f: and iirc was able to atleast recreate vscode after a lot of effort and bugging vigoux and theHamsta
[20:42:10] <sb[m]1> clason[m]: It is, e.g. methods etc are not highlighted in a special way. However, treesitter has big problems with macros (e.g. when using Qt), #if 0 ... #endif is not regarded as commented out code (which is probably a taste-based thing), sometimes variable names are highlighted like types, etc. ...
[20:42:29] <sb[m]1> All in all I prefer less highlighting over wrong highlighting :)
[20:42:32] <kylo252[m]> c++ is also pretty fucked if you excuse my language 
[20:42:48] <sb[m]1> kylo252[m]: Totally agree :D
[20:42:59] <clason[m]> Yeah, that's a matter of taste.
[20:43:04] <kylo252[m]> I meant that it's hard even for treesitter
[20:43:27] <clason[m]> And "I prefer..." is perfectly acceptable, I'm not fighting you ;) Just surprised that's all.
[20:43:51] <kylo252[m]> gotta wait for semantic tokens, or for someone to implement a proper `clangd` wrapper 
[20:44:11] <rj1> neovim is so good!!!!!!
[20:44:19] <clason[m]> completely different things. please don't mix up tree-sitter and semantic tokens
[20:44:32] <clason[m]> * up tree-sitter (or any syntax-based highlighting) and semantic
[20:45:01] <sb[m]1> kylo252[m]: Oh wow, that would be an awesome thing
[20:45:22] <kylo252[m]> clason[m]: where did I do that? 
[20:45:23] *** Joins: jy (~jy@166.147.161.66.ded-dsl.fuse.net)
[20:45:40] <clason[m]> kylo252[m]: ☝️
[20:45:47] <kylo252[m]> I meant more to augment treesitter 
[20:45:56] *** Joins: oddmunds (~oddmunds@81.0.173.254)
[20:46:06] <clason[m]> but that won't "fix" those issues, at all...
[20:46:56] <kylo252[m]> I'm treating the issue as a "user-experience" 
[20:47:31] <mjlbach[m]> I don't understand what a "proper" clangd wrapper is
[20:47:51] <mjlbach[m]> we have a PR for semantic tokens outstanding that I've reviewed
[20:47:54] <mjlbach[m]> and will hopefully make it into 0.6
[20:48:06] <clason[m]> but the `#if 0 ... #endif` will still not be highlighted as comments; variable names will remain highlighted as types...
[20:48:18] *** Quits: sebastorama (~sebastora@190.83.56.68) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:48:19] <kylo252[m]> mjlbach[m]: I thought you were the one that wanted `clangd.nvim`, when did that change?
[20:49:04] *** Joins: sebastorama (~sebastora@190.83.56.68)
[20:49:07] <clason[m]> (although I believe the latter can be fixed by adjusting color schemes; treesitter internally uses much more detailed highlight groups than Vim's builtin "basic" ones, and these can be colored independently)
[20:49:31] <clason[m]> mjlbach[m]: by one of the main nvim-treesitter devs, to boot
[20:49:33] <sb[m]1> clason[m]: I am not much into nvim internals, but is there a way to get code highlighting inside comments? That would make sense for #if 0... #endif in C++, you could then see it as "shaded out" code... and it would make sense for code inside comments, e.g. example code in library documentation. Makes even more sense for rust, where you can compile examples in code comments.
[20:50:03] <mjlbach[m]> kylo252[m]: wrapper 
[20:50:08] <mjlbach[m]> > <@kylo252:matrix.org> I thought you were the one that wanted `clangd.nvim`, when did that change?
[20:50:08] <mjlbach[m]>  * wrapper != plugin
[20:50:19] <mjlbach[m]> when someone has wrapper I think typescript server
[20:50:32] <clason[m]> sb[m]1: Not like that, no -- at least not without major effort (you'd need a custom "C++ comment code parser" and add injections for that)
[20:50:41] *** Joins: arclitgold (~arclitgol@c-73-140-238-149.hsd1.wa.comcast.net)
[20:52:59] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 250 seconds)
[20:53:29] <arclitgold> Morning all!  Setting up nvim for Rust dev and trying to move all my previous config to lua.  I previously had a snippet inside an autocmd like so
[20:53:29] <arclitgold> `autocmd CursorMoved *.rs lua require'lsp_extensions'.inlay_hints{}`.  I thought I could  move that to /ftplugin/rust.lua and remove the autocmd bit and leave the `require` bit.  But now inlay hints only show up if I `filetype detect` instead of when the file opens.  Halp!
[20:53:49] <arclitgold> Ugh - sorry for the ugly code formatting, not used to this webclient
[20:53:50] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Quit: varioust)
[20:54:49] <sb[m]1> clason[m]: I didn't think of the parsing side, more on the highlighting side. I mean one could have every highlight group for actual code copied for the case of code-inside-a-comment, or one could have a "hey this is code inside a comment, let's just use the normal highlight group, but with a twist*" (* = to be defined)
[20:54:56] <mjlbach[m]> Also in the case of clangd their semantic tokens response is on spec
[20:55:01] <mjlbach[m]> so we don't need a custom plugin
[20:55:30] <clason[m]> sb[m]1: Yes, but the syntax first needs to be parsed into _syntax groups_ before you can assign _highlight groups_ to them
[20:55:56] <clason[m]> that's the part that's missing
[20:58:25] <clason[m]> so right now, (Neo)Vim stops at "this is comment; let's slap a `Comment` syntax group on it and move on"
[20:58:29] *** Quits: potamides (~amnifiliu@2001:41b8:83c:fa01:6ccf:3460:4fec:ae63) (Ping timeout: 268 seconds)
[20:59:46] <p00f> <arclitgold> "`autocmd CursorMoved *.rs lua..." <- i don't understand why that would work if you remove autocmd
[21:02:04] <arclitgold> p00f sry my message probably wasn't clear.  I thought having an ftplugin/rust.lua file with _only_ `require'lsp_extensions'....` would work.  But when I open a rust file, I don't get inlay hints until I `:filetype detect`...
[21:03:08] <clason[m]> yes. your thought was wrong :)
[21:03:37] <p00f> arclitgold: ye won't work
[21:04:18] <clason[m]> you need to keep your autocommand
[21:04:31] <p00f> ftplugin handles the *.rs part, not the cursormoved part if that makes sense
[21:04:32] <clason[m]> just wrap it in a `vim.cmd [[...]]`
[21:04:32] <arclitgold> huh, ok
[21:04:48] <arclitgold> ahhhh ok - I think that makes sense
[21:04:53] <arclitgold> ty!!!!
[21:04:56] <clason[m]> (or put it in a `/ftplugin/rust.vim`)
[21:05:44] <arclitgold> Thanks p00f clason[m]!
[21:07:00] <arclitgold> Also trying to move from nvim-completion to nvim-cmp... which apparently requires a snippets plugin, which I didn't have before.  So I'm trudging through that
[21:07:17] *** Joins: marbuka[m] (~marbukama@2001:470:69fc:105::1:3522)
[21:07:34] <clason[m]> it doesn't "require" one, you can use it fine without
[21:07:52] *** Joins: sammie (~sammie@155.33.134.60)
[21:07:57] <clason[m]> (unless you want snippets completion, of course, but that was true for completion-nvim as well)
[21:08:02] <Mathias[m]> <mjlbach[m]> "via push notifications" <- From language server implementation perspective I think that would be quite the pain
[21:08:51] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[21:12:46] <mjlbach[m]> perhaps
[21:12:58] *** Quits: arclitgold (~arclitgol@c-73-140-238-149.hsd1.wa.comcast.net) (Quit: Client closed)
[21:13:10] *** Joins: arclitgold (~arclitgol@c-73-140-238-149.hsd1.wa.comcast.net)
[21:13:21] <arclitgold> clason[m] Oh I see that now
[21:14:33] <arclitgold> I guess I'm confused why calling `:filetype detect` does the right thing and shows the inlay hints, but opening the file does not.  Doesn't nvim essentially "detect" the file type and load the ftplugin?
[21:14:53] <clason[m]> yes, but only once
[21:14:59] <clason[m]> and before the LSP starts up, probably
[21:15:11] <arclitgold> ah - yeah that's probably what's happening
[21:15:46] <arclitgold> hehe is there a "wait for the lsp" function ?
[21:15:53] <clason[m]> I don't use rust-analyzer, but going from the autocommand, the `inlay_hints()` doesn't activate some functionality but actually shows the inlay hints for the current line
[21:17:04] <jcbjoe2021> i had a dream i was in nvim and did a command that i woke up and wrote down 01jj lol didn't do nothing. stupid dreams :P
[21:18:01] <p00f> jcbjoe2021: i once mapped 0 to something
[21:18:24] <p00f> idk how i forgot 0 does something
[21:19:14] <jcbjoe2021> ok back to ideling :D
[21:20:21] <arclitgold> clason[m] hm.  I'm not sure about that.  If I `filetype detect` the inlay hints show up everywhere - not just the current line
[21:21:00] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Quit: elastic_dog)
[21:21:02] *** Joins: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[21:21:08] <mjlbach[m]> I would use rust tools
[21:21:14] *** Quits: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Client Quit)
[21:21:37] <p00f> arclitgold: you do have only_current_line = true right?
[21:21:41] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[21:21:42] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[21:21:44] <clason[m]> as I said, I have zero Rust experience; just guessing
[21:21:59] <p00f> mjlbach[m]: also this
[21:22:24] *** Quits: sammie (~sammie@155.33.134.60) (Quit: WeeChat 3.0.1)
[21:23:02] <arclitgold> hehe - I'm a little leery of rust-tools, but only because it seems like a bunch of stuff that I'm not sure what it all does.  I've been building from the ground up... maybe I'm just being a luddite
[21:25:04] *** Quits: jobias (~jobias@user/jobias) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:28:46] *** Quits: rgrinberg (~textual@152.231.136.22) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:30:11] *** Joins: potamides (~amnifiliu@46.183.103.17)
[21:31:12] *** Quits: jy (~jy@166.147.161.66.ded-dsl.fuse.net) (Read error: Connection reset by peer)
[21:32:00] *** Joins: jy (~jy@166.147.161.66.ded-dsl.fuse.net)
[21:32:33] *** Quits: ruptwelve_ (~ruptwelve@ip5b40b6a9.dynamic.kabel-deutschland.de) (Quit: ZNC 1.8.2 - https://znc.in)
[21:32:53] *** Joins: ruptwelve (~ruptwelve@ip5b40b6a9.dynamic.kabel-deutschland.de)
[21:33:18] *** Quits: jy (~jy@166.147.161.66.ded-dsl.fuse.net) (Remote host closed the connection)
[21:33:19] *** Joins: emf (~emf@162.218.217.186)
[21:33:36] <phaazon[m]> I have a problem ☹️ is there anyone knowing when `nvim_win_set_cursor` wraps around the column to the last column of the buffer?
[21:33:37] <phaazon[m]> because it looks like I can’t go past the end
[21:33:43] <phaazon[m]> unless I have `virtualedit=onemore`
[21:33:56] <phaazon[m]> the problem is that I can’t locally enable that for operator pending modes ☹️
[21:34:05] <phaazon[m]> so it has to be set globally by the user
[21:34:26] <phaazon[m]> the only fix I see here is to do the wrapping after operator pending modes have finished
[21:34:42] <phaazon[m]> I’m not even sure this is possible ☹️
[21:34:49] <phaazon[m]> since both API might be completely unrelated
[21:34:59] <phaazon[m]> i.e. operator pending modes and changing the cursor position
[21:35:07] <phaazon[m]> I guess I will make a notice about that in hop’s user guide
[21:35:44] <p00f> <arclitgold> "hehe - I'm a little leery of..." <- nah that is reasonable
[21:36:29] <siduck[m]> <lainon_[m]> "I'm trying to install NVChad..." <- create an issue on the repo , dont bother people here
[21:37:48] *** Joins: emf_ (~emf@2620:10d:c090:400::5:91bf)
[21:38:11] *** Quits: emf (~emf@162.218.217.186) (Ping timeout: 264 seconds)
[21:38:42] *** Quits: arclitgold (~arclitgol@c-73-140-238-149.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[21:39:51] *** Joins: FluffyMask (~masque@user/fluffymask)
[21:44:45] *** Joins: defiant[m] (~defiant-m@2001:470:69fc:105::1:1fc6)
[21:53:22] *** Quits: sebastorama (~sebastora@190.83.56.68) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:54:24] <theh> Is there a way to make nvim reload sessions based on the working directory? I.e. once you "init" a session (not if don't), it starts tracking your open buffers & windows and saves them upon exit.
[21:54:35] *** Joins: sebastorama (~sebastora@190.83.56.68)
[21:54:56] <mjlbach[m]> <arclitgold> "hehe - I'm a little leery of..." <- I am a luddite and I am telling you it is worth it lmao
[21:55:22] <mjlbach[m]> RA has a lot of off-spec stuff that we're not going to implement in core
[21:55:28] <mjlbach[m]> but core is extensible for exactly this purpose
[21:57:11] <theh> I'm thinking each session could be stored in nvim's XDG_DATA, so no local session tracking file is needed in the dir. How other editors do it was well I reckon.
[21:58:22] *** Quits: ixil (~ixil@mpp-cp1-natpool-2-189.ethz.ch) (Ping timeout: 265 seconds)
[22:05:36] *** Joins: jobias (~jobias@user/jobias)
[22:07:04] <p00f> p sure there are plugins which do that
[22:11:12] <clason[m]> phaazon: ❤️
[22:11:29] <phaazon[m]> clason: ❤️
[22:12:00] <clason[m]> (if I want to operate up to and including the last character in a line, I'll just use `Y`/`D` etc. anyway)
[22:12:09] <mjlbach[m]> <3
[22:14:27] *** Quits: potamides (~amnifiliu@46.183.103.17) (Ping timeout: 250 seconds)
[22:19:02] <theh> p00f: I'll give rmagatti/auto-session a try, that one looks fairly straight forward.
[22:22:26] <rmagatti[m]> theh: Glad to hear that :) do ping me if you run into any problems
[22:22:26] <rmagatti[m]> PS: author here 
[22:23:33] *** Joins: arclitgold (~arclitgol@c-73-140-238-149.hsd1.wa.comcast.net)
[22:24:45] <p00f> why did i get pinged lol
[22:24:47] * p00f uploaded an image: (20KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/CsguFjgZmSeBzXkgAYAlCDHq/image.png >
[22:26:45] *** Joins: chianuo2 (chianuo@gateway/vpn/protonvpn/chianuo)
[22:26:58] *** Quits: chianuo2 (chianuo@gateway/vpn/protonvpn/chianuo) (Client Quit)
[22:27:59] <YorickPeterse[m]> p00f: They really just wanted to keep you in the loop 🙂
[22:28:34] <theh> Hehe! Well thanks you both :)
[22:30:39] *** Joins: chianuo (chianuo@gateway/vpn/protonvpn/chianuo)
[22:31:03] *** Joins: sm1999 (~sm1999@2001:470:69fc:105::1:38c)
[22:31:08] *** Quits: sebastorama (~sebastora@190.83.56.68) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:31:53] *** Joins: sebastorama (~sebastora@190.83.56.68)
[22:35:29] <Bowuigi[m]> <p00f> "why did i get pinged lol" <- Animations and pings repeat on a replied message
[22:36:05] <Bowuigi[m]> Also happens with the fireworks, with the snow, space invaders and every other Element easter egg
[22:37:58] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Read error: Connection reset by peer)
[22:38:47] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[22:43:19] *** Quits: exondation (~wadii@2a01:e34:eca5:6c30:2015:651a:ffd8:d717) (Ping timeout: 265 seconds)
[22:43:38] *** Quits: CRThaze1 (~weechat@188.166.44.58) (Ping timeout: 260 seconds)
[22:43:52] *** Joins: exondation (~wadii@2a01:e34:eca5:6c30:aaed:6e16:aa74:a77a)
[22:43:58] *** Joins: CRThaze1 (~weechat@188.166.44.58)
[22:44:48] *** Joins: Julian (~tos9@python/site-packages/Julian)
[22:45:58] *** Quits: zostj (~rue@1-162-44-145.dynamic-ip.hinet.net) (Quit: WeeChat 3.3)
[22:48:45] *** Joins: potamides (~amnifiliu@2003:a:270f:c400:28d8:e046:7d92:3970)
[22:52:56] *** Quits: arclitgold (~arclitgol@c-73-140-238-149.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[22:57:31] *** Joins: rgrinberg (~textual@200.5.63.76)
[23:04:19] *** Joins: awb99 (~quassel@80-110-207-163.static.upcbusiness.at)
[23:04:49] *** Joins: taupiqueur (~taupiqueu@31.106.204.77.rev.sfr.net)
[23:05:07] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Quit: varioust)
[23:05:50] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[23:06:03] *** Joins: dfip^ (~dfip@h50.174.139.63.static.ip.windstream.net)
[23:06:35] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[23:09:02] *** Joins: Betal (~Betal@user/betal)
[23:09:59] *** Quits: Cyrus (~Cyrus@144.202.93.237) (Ping timeout: 264 seconds)
[23:13:52] *** Quits: xsteadfastx (~marv@94.31.100.46) (Ping timeout: 256 seconds)
[23:17:26] <phaazon[m]> so tonight was productive; two features added to Hop! 🙂 I’ll make a reddit announcement so that people don’t freak out because they haven’t seen an update in three days
[23:20:38] <bfredl> 🎉
[23:21:59] <GlennOberlander[> When setting keymaps. If you already use `'n'` in your keymap, do you still need to use `{noremap = true}` in your options?... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/847b6d966623e94b8446aa30c58f7a96fa92ce85)
[23:22:25] *** Quits: chianuo (chianuo@gateway/vpn/protonvpn/chianuo) (Quit: WeeChat 3.4-dev)
[23:22:29] <GlennOberlander[> s///, s/options/examples/
[23:22:41] *** Joins: chianuo (chianuo@gateway/vpn/protonvpn/chianuo)
[23:22:57] <bfredl> noremap is recommended unless you explicitly want to expand the rhs to another mapping
[23:23:10] <bfredl> most typcially a `<plug>` mapping
[23:23:18] *** Joins: xsteadfastx (~marv@94.31.100.46)
[23:23:45] <GlennOberlander[> but what does `'n'` not do that the option `noremap` do?
[23:23:50] <GlennOberlander[> s/do/does/
[23:23:55] *** Joins: arclitgold (~arclitgol@c-73-140-238-149.hsd1.wa.comcast.net)
[23:24:12] <GlennOberlander[> bfredl: what would be an example using my keymap example? 
[23:24:15] <bfredl> no, that is for normal mode
[23:24:30] <bfredl> so `nnoremap` in this case
[23:24:58] <GlennOberlander[> reading the manual, noremap is for several modes: `:map   :noremap  :unmap     Normal, Visual, Select, Operator-pending`
[23:26:20] *** Quits: exondation (~wadii@2a01:e34:eca5:6c30:aaed:6e16:aa74:a77a) (Ping timeout: 265 seconds)
[23:26:39] <GlennOberlander[> from that tutorial: 
[23:26:39] <GlennOberlander[> > The first argument passed to the function is a string containing the name of the mode for which the mapping will take effect:
[23:26:39] <GlennOberlander[> So in that case it's `'n'` which signifies normal mode. But you're saying if i added the boolean `nnoremap = true` that would be 'n' only in normal mode, but `noremap` includes other modes
[23:26:46] <GlennOberlander[> s///
[23:26:50] <GlennOberlander[>  * from that tutorial:
[23:26:50] <GlennOberlander[> > The first argument passed to the function is a string containing the name of the mode for which the mapping will take effect:
[23:26:50] <GlennOberlander[> So in that case it's `'n'` which signifies normal mode. But you're saying if i added the boolean `nnoremap = true` that would be 'n' only in normal mode, but `noremap` includes other modes
[23:27:25] *** Quits: arclitgold (~arclitgol@c-73-140-238-149.hsd1.wa.comcast.net) (Client Quit)
[23:28:25] <bfredl> no `"noremap"` flag is only for the noremap behavior, not what specific mode.
[23:28:39] <bfredl> so `"n"` in combination with `"noremap"` behaves like `"nnoremap"` command.
[23:28:49] <theh> Glenn Oberlander: Basically, `{ "<mode>", "noremap" }` is the clear arrangement, vim's `nnoremap`, `vnoremap`, `inoremap` is the confusing syntax.
[23:29:25] *** Quits: xsteadfastx (~marv@94.31.100.46) (Ping timeout: 250 seconds)
[23:30:18] <maverun[m]> hope i understood this clearly
[23:30:19] <maverun[m]> `nnoremap` allow things like `<leader>gd` then `<leader>gdr` while `noremap` only allow former, and nothing will happen if you do `<leader>gdr`?
[23:30:38] <GlennOberlander[> bfredl: and so `'n'` without boolean behaves like "noremap"
[23:32:22] <GlennOberlander[> sorry for my confusion, i never really messed with mappings in regular vim, and now exploring it in nvim, so don't have the fundamental understanding of how `noremap` and `nnoremap` differ with keymap behaviour
[23:32:42] <bfredl> GlennOberlander[: no, `nmap` :)
[23:33:19] <bfredl> the api function is not the most direct user friendliest design tbh, we would like to have some lua-native wrapper around it
[23:33:32] <GlennOberlander[> bfredl: ohh ok
[23:33:33] <bfredl> * have some nice lua-native wrapper
[23:35:20] *** Joins: mcint (mcint@user/mcint)
[23:35:32] <GlennOberlander[> ok so just using `'n'` makes that keymap work ONLY in normal mode (aka `nnoremap`). But if you use `'n'` and then set boolean `noremap = true` you want that keymap to work in Visual, Select, and Operational-pending
[23:37:03] <bfredl> no, `noremap` flag has nothing to do with the mode. it is for `noremap` rather than `map
[23:37:08] <bfredl> * than `map`
[23:37:35] *** Quits: han-` (~han`@li987-55.members.linode.com) (Changing host)
[23:37:35] *** Joins: han-` (~han`@user/han-/x-0887595)
[23:37:59] *** Joins: exondation (~wadii@2a01:e34:eca5:6c30:bfd7:f342:91a9:b548)
[23:38:01] <bluemonksr[m]> n-nore-map = n for normal mode, nore for non recursive mapping and map for map. in lua syntax, n for normal mode, boolean noremap= true to enable the same non recursive
[23:38:26] <theh> Glenn Oberlander: To repeat in case there is confusion: `noremap` is `no remap`, it's an option. The `n` for "normal" mode has nothing do with it. `nnoremap` is `n_noremap`, like `vnoremap` is `v_noremap`.
[23:39:19] <theh> And you can omit the mode (e.g. `n`) which makes your mapping active for several modes by default.
[23:39:43] *** Quits: jobias (~jobias@user/jobias) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:39:51] <bfredl> it's some legacy cruft, had I designed the api then "nore" behaviour would have been the default and then a "recursive" flag to enable re-cursive map-ings
[23:40:15] <theh> Right
[23:40:21] <bluemonksr[m]> does anyone know if nvim-cmp can source friendly-snippets when there is no LSP present? I want to use orgmode snippets in org files and glsl snippets in shader files. but as both filetypes have no lsp, the snippets just wont show up in cmp's popup
[23:41:06] <GlennOberlander[> bluemonksr[m]: ohh doh... i was thinking `remap` was `normal mode remapping` i forgot that `re` stands for recursive >.<
[23:41:12] *** Joins: cjb (~cjbayliss@user/cjb)
[23:41:56] <GlennOberlander[> theh: that does clear up, thank you. 
[23:42:33] <theh> bluemonksr: My understanding is that LSP servers aren't involved there at all. But maybe I misunderstand your angle here.
[23:42:35] <GlennOberlander[> bfredl: ya it'd be nice to have it be explicit
[23:42:57] <GlennOberlander[> thanks all for your help!
[23:43:06] <bfredl> yes, to iterate we don't intend this to be the "final" interface for init.lua usage, eventually there will be a nicer interface
[23:44:06] <bluemonksr[m]> theh: well for whatever reason, luasnip works with friendly-snippets by default when the buffer has an lsp running, but luasnip (or cmp, dont know which is responsible) does not see friendly-snippets when no lsp is running
[23:44:16] <maverun[m]> autocmd tho
[23:45:00] *** Joins: tech_assist[m] (~techassis@2001:470:69fc:105::1:3541)
[23:45:10] <bew[m]> bluemonksr[m]: luasnip should be responsible of this
[23:45:38] <bluemonksr[m]> bluemonksr[m]: so for orgmode or glsl filetypes, as there is no assosicated lsp, the snippets for these filetypes from friendly-snippets just dont show up
[23:45:49] *** Joins: fredrick (~fred@156.sub-174-245-19.myvzw.com)
[23:45:55] <theh> bluemonksr: That's certainly strange.  Personally I only have few snippets (borrowed from friendly-snippets examples) that I source with LuaSnip. They do appear in nvim-cmp for files that certainly don't have LSP running (e.g. simple config files).
[23:46:34] *** Quits: sebastorama (~sebastora@190.83.56.68) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:46:40] <theh> So maybe some unforeseen interaction in your config?
[23:46:40] *** tar_xvf is now known as Guest81
[23:46:51] <bluemonksr[m]> theh: probably
[23:46:54] *** Quits: Guest81 (~tar_xvf@ec2-3-136-243-174.us-east-2.compute.amazonaws.com) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[23:47:13] *** Joins: tar_xvf (~tar_xvf@ec2-3-136-243-174.us-east-2.compute.amazonaws.com)
[23:47:13] *** tar_xvf is now known as Guest81
[23:47:23] *** Joins: sebastorama (~sebastora@190.83.56.68)
[23:47:31] <bew[m]> Did you configure luasnips in your lsp-is-attached function?
[23:47:32] *** Joins: jobias (~jobias@user/jobias)
[23:47:41] <bew[m]> (don't remember its name) 
[23:48:13] <bew[m]> * lsp-is-attached function? 'cause that would explain your behavior bluemonksr 
[23:48:20] *** Parts: fredrick (~fred@156.sub-174-245-19.myvzw.com) (Igloo IRC: https://iglooirc.com)
[23:49:38] *** Guest81 is now known as tar_xvf
[23:49:56] <bluemonksr[m]> bew[m]: the only luasnip config I have is to do with expand-snippet mapping in cmp's mapping block
[23:50:01] <theh> bluemonksr: My `nvim-cmp` setup function:... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/e1836b2e679fc34740c8657a412f27af80903b7b)
[23:50:07] *** Joins: ixil (~ixil@82.197.178.137)
[23:50:14] *** tar_xvf is now known as tar
[23:50:27] <bluemonksr[m]> > <@theh:matrix.org> bluemonksr: My `nvim-cmp` setup function:... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/406311fec76bce91e08c09651881a25ad7da5655)
[23:50:39] *** tar is now known as Guest81
[23:50:49] *** Guest81 is now known as tar_xvf
[23:51:07] *** Quits: tar_xvf (~tar_xvf@ec2-3-136-243-174.us-east-2.compute.amazonaws.com) (Client Quit)
[23:51:13] <theh> Not trying to correct you, just showing what I use (works for me)
[23:51:35] *** Joins: Jmtrix (~qed@user/jmtrix)
[23:51:41] <bluemonksr[m]> the snippets from friendly snippets do show up in c++ and other filetypes with an active lsp attached. just not in glsl or orgmode, or others without lsp
[23:51:57] *** Joins: fredrick (~fred@156.sub-174-245-19.myvzw.com)
[23:52:14] *** Quits: fredrick (~fred@156.sub-174-245-19.myvzw.com) (Client Quit)
[23:53:00] <theh> It's certainly odd. Maybe comment out your config and re-enable step by step until it breaks, that's probably faster than seeking input from others right now; unless the problem is known already.
[23:53:28] *** Joins: Cyrus (~Cyrus@144.202.93.237)
[23:53:40] <bluemonksr[m]> yea that certainly seems the best option. Will do that over the weekend
[23:56:02] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Quit: varioust)
[23:57:03] *** Joins: fredrick (~fred@075-133-138-024.res.spectrum.com)
[23:57:35] *** Quits: fredrick (~fred@075-133-138-024.res.spectrum.com) (Client Quit)
[23:57:40] *** Quits: sebastorama (~sebastora@190.83.56.68) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:58:24] *** Joins: sebastorama (~sebastora@190.83.56.68)
