[00:01:37] *** Joins: schmudde (~schmudde@93-35-145-186.ip55.fastwebnet.it)
[00:07:01] *** Joins: piotrts (~piotrts@188.147.99.42.nat.umts.dynamic.t-mobile.pl)
[00:12:20] *** Quits: piotrts (~piotrts@188.147.99.42.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 272 seconds)
[00:14:07] *** Quits: shiranaihito_ (~textual@123-192-192-149.dynamic.kbronet.com.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[00:15:15] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[00:15:32] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[00:30:52] *** Quits: son0p (~ff@181.136.122.143) (Remote host closed the connection)
[00:42:49] *** Joins: piotrts (~piotrts@188.147.99.42.nat.umts.dynamic.t-mobile.pl)
[00:47:31] *** Quits: piotrts (~piotrts@188.147.99.42.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 256 seconds)
[00:50:03] *** Joins: son0p (~ff@181.136.122.143)
[00:52:38] *** Joins: kipper (~kipz@2a02:8010:6876:0:84d3:6cc8:8d1e:53ee)
[00:56:32] *** Quits: kipz (~kipz@2a02:8010:6876:0:6060:ced1:dd03:9982) (Ping timeout: 240 seconds)
[01:08:12] *** Quits: Vaelatern (~Vaelatern@voidlinux/maintainer/Vaelatern) (Ping timeout: 240 seconds)
[01:12:35] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[01:14:40] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:16:59] *** Joins: piotrts (~piotrts@188.147.99.42.nat.umts.dynamic.t-mobile.pl)
[01:22:05] *** Quits: piotrts (~piotrts@188.147.99.42.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 256 seconds)
[01:22:14] *** Quits: selfsymmetric-mu (~matt@c-73-29-248-41.hsd1.nj.comcast.net) (Ping timeout: 260 seconds)
[01:22:16] *** Joins: Vaelatern (~Vaelatern@cpe-76-183-97-243.tx.res.rr.com)
[01:22:16] *** Quits: Vaelatern (~Vaelatern@cpe-76-183-97-243.tx.res.rr.com) (Changing host)
[01:22:16] *** Joins: Vaelatern (~Vaelatern@voidlinux/maintainer/Vaelatern)
[01:23:03] *** Joins: selfsymmetric-mu (~matt@c-73-29-248-41.hsd1.nj.comcast.net)
[01:51:48] *** Joins: piotrts (~piotrts@188.147.99.42.nat.umts.dynamic.t-mobile.pl)
[01:56:50] *** Quits: piotrts (~piotrts@188.147.99.42.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 272 seconds)
[02:12:42] *** Joins: eddof13 (~eddof13@2806:102e:12:64:a0cc:1315:5073:f3f7)
[02:24:17] *** Quits: dalek_caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru) (Quit: dalek_caan)
[02:24:42] *** Quits: schmudde (~schmudde@93-35-145-186.ip55.fastwebnet.it) (Ping timeout: 272 seconds)
[02:26:47] *** Joins: piotrts (~piotrts@188.147.99.42.nat.umts.dynamic.t-mobile.pl)
[02:29:39] *** Joins: daemonises (uid545329@id-545329.uxbridge.irccloud.com)
[02:30:09] *** Quits: eddof13 (~eddof13@2806:102e:12:64:a0cc:1315:5073:f3f7) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:32:18] *** Quits: piotrts (~piotrts@188.147.99.42.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 272 seconds)
[02:56:28] *** Quits: uncleyear (~ian@31.173.85.72) (Ping timeout: 256 seconds)
[03:02:58] *** Joins: piotrts (~piotrts@188.147.99.42.nat.umts.dynamic.t-mobile.pl)
[03:07:36] *** Quits: piotrts (~piotrts@188.147.99.42.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 252 seconds)
[03:14:51] *** Quits: fluxit (~fluxit@techsmix.net) (Quit: Bye!)
[03:36:29] *** Joins: piotrts (~piotrts@188.147.99.42.nat.umts.dynamic.t-mobile.pl)
[03:41:29] *** Quits: piotrts (~piotrts@188.147.99.42.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 256 seconds)
[03:50:25] *** Quits: seschwar (~seschwar@user/seschwar) (Quit: :wq)
[04:04:29] *** Quits: unyu (~pyon@user/pyon) (Quit: WeeChat 3.4)
[04:07:46] *** Quits: selfsymmetric-mu (~matt@c-73-29-248-41.hsd1.nj.comcast.net) (Remote host closed the connection)
[04:10:48] *** Joins: piotrts (~piotrts@188.147.99.42.nat.umts.dynamic.t-mobile.pl)
[04:15:11] *** Joins: unyu (~pyon@user/pyon)
[04:15:48] *** Quits: piotrts (~piotrts@188.147.99.42.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 256 seconds)
[04:21:45] *** Joins: selfsymmetric-mu (~matt@c-73-29-248-41.hsd1.nj.comcast.net)
[04:26:17] *** Joins: eddof13 (~eddof13@2806:102e:12:64:a0cc:1315:5073:f3f7)
[04:29:00] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[04:38:03] *** Quits: eddof13 (~eddof13@2806:102e:12:64:a0cc:1315:5073:f3f7) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:43:52] *** Joins: piotrts (~piotrts@188.147.99.42.nat.umts.dynamic.t-mobile.pl)
[04:48:40] *** Quits: piotrts (~piotrts@188.147.99.42.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 256 seconds)
[04:50:56] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 256 seconds)
[05:17:44] *** Joins: piotrts (~piotrts@188.147.99.42.nat.umts.dynamic.t-mobile.pl)
[05:22:40] *** Quits: piotrts (~piotrts@188.147.99.42.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 272 seconds)
[05:30:45] *** Quits: unyu (~pyon@user/pyon) (Quit: brb)
[05:33:22] *** Joins: unyu (~pyon@user/pyon)
[05:34:02] *** Joins: eddof13 (~eddof13@2806:102e:12:64:a0cc:1315:5073:f3f7)
[05:36:34] *** Joins: piotrts (~piotrts@188.147.97.216.nat.umts.dynamic.t-mobile.pl)
[05:41:00] *** Quits: piotrts (~piotrts@188.147.97.216.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 240 seconds)
[05:54:39] *** Quits: harrow (~harrow@static.38.6.217.95.clients.your-server.de) (Quit: Leaving)
[05:54:39] *** Quits: dustinm (~dustinm@static.38.6.217.95.clients.your-server.de) (Quit: Leaving)
[05:56:33] *** Joins: AlaskanEmily (~AlaskanEm@user/alaskanemily)
[06:00:49] *** Joins: harrow (~harrow@static.38.6.217.95.clients.your-server.de)
[06:10:46] *** Joins: piotrts (~piotrts@188.147.97.216.nat.umts.dynamic.t-mobile.pl)
[06:10:51] *** Joins: dustinm (~dustinm@static.38.6.217.95.clients.your-server.de)
[06:15:56] *** Quits: piotrts (~piotrts@188.147.97.216.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 256 seconds)
[06:35:16] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[06:43:06] *** Joins: piotrts (~piotrts@188.147.97.216.nat.umts.dynamic.t-mobile.pl)
[06:47:37] *** Quits: piotrts (~piotrts@188.147.97.216.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 240 seconds)
[07:01:30] *** Quits: eddof13 (~eddof13@2806:102e:12:64:a0cc:1315:5073:f3f7) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:11:52] *** Joins: Iacob (~Thunderbi@117.15.90.146)
[07:16:38] *** Joins: piotrts (~piotrts@188.147.97.216.nat.umts.dynamic.t-mobile.pl)
[07:21:02] *** Quits: piotrts (~piotrts@188.147.97.216.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 240 seconds)
[07:41:55] *** Joins: mbuf (~Shakthi@122.174.51.86)
[07:49:38] *** Joins: piotrts (~piotrts@188.147.97.216.nat.umts.dynamic.t-mobile.pl)
[07:54:32] *** Quits: piotrts (~piotrts@188.147.97.216.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 256 seconds)
[08:13:18] *** Quits: pflanze (~pflanze@61-41-178-139.dyn.fiber.qlnet.ch) (Quit: Leaving)
[08:19:52] *** Joins: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw)
[08:22:41] *** Joins: piotrts (~piotrts@188.147.97.216.nat.umts.dynamic.t-mobile.pl)
[08:27:24] *** Quits: piotrts (~piotrts@188.147.97.216.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 256 seconds)
[08:56:22] *** Joins: piotrts (~piotrts@188.147.97.216.nat.umts.dynamic.t-mobile.pl)
[09:01:24] *** Quits: piotrts (~piotrts@188.147.97.216.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 256 seconds)
[09:10:34] *** Quits: ajb (~ajb@cupid.whatbox.ca) (Quit: bye)
[09:11:26] *** Quits: res0nat0r08 (~Fletch@dia.whatbox.ca) (Quit: The Lounge - https://thelounge.chat)
[09:22:25] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[09:22:52] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[09:31:52] *** Joins: piotrts (~piotrts@188.147.97.216.nat.umts.dynamic.t-mobile.pl)
[09:36:36] *** Quits: piotrts (~piotrts@188.147.97.216.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 240 seconds)
[09:37:47] *** Joins: puchka (~marius@165.73.242.6)
[09:41:08] *** Joins: struchu (~struchu@staticline-31-183-183-16.toya.net.pl)
[09:43:25] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[09:43:44] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[09:49:57] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 240 seconds)
[09:50:07] *** Joins: piotrts (~piotrts@188.147.97.216.nat.umts.dynamic.t-mobile.pl)
[09:50:50] *** Quits: endidragon (~elle@cpe-76-167-67-22.natsow.res.rr.com) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[09:52:05] *** Joins: endidragon (~elle@cpe-76-167-67-22.natsow.res.rr.com)
[10:07:02] *** Quits: piotrts (~piotrts@188.147.97.216.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 272 seconds)
[10:14:56] *** Joins: eddof13 (~eddof13@2806:102e:12:64:a0cc:1315:5073:f3f7)
[10:19:59] *** Quits: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[10:20:50] *** Joins: piotrts (~piotrts@188.147.97.216.nat.umts.dynamic.t-mobile.pl)
[10:25:00] *** Quits: piotrts (~piotrts@188.147.97.216.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 240 seconds)
[10:30:20] *** Joins: res0nat0r08 (~Fletch@dia.whatbox.ca)
[10:33:09] *** Joins: dalek_caan (~Thunderbi@109.252.124.86)
[10:37:18] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[10:45:06] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 256 seconds)
[10:46:07] <seebs> so i had some free cycles and spent some time reading and thinking about https://aphyr.com/posts/312-clojure-from-the-ground-up-modeling
[10:46:17] <seebs> and it starts with:
[10:46:23] <seebs> (defn atlas-v
[10:46:23] <seebs>  []
[10:46:23] <seebs>   {:dry-mass  50050 [...] )
[10:47:26] <seebs> and many other things in this are defined with (def), and i'm wondering why this particular thing is a function rather than an object. i am thinking it's because the idiom is that instead of "functions which modify the object", we expect "functions which take the object as an input and return a new object as an output", and this makes it more idiomatic to have this be a generator-of-atlas-v rather than a single instance, maybe?
[10:48:53] <jeaye> That just should be a def.
[10:54:34] *** Joins: piotrts (~piotrts@188.147.97.216.nat.umts.dynamic.t-mobile.pl)
[10:55:42] *** Joins: shiranaihito (~textual@27.105.50.111)
[10:58:57] *** Quits: piotrts (~piotrts@188.147.97.216.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 240 seconds)
[10:59:16] *** Quits: puchka (~marius@165.73.242.6) (Ping timeout: 256 seconds)
[11:00:22] *** Quits: mbuf (~Shakthi@122.174.51.86) (Quit: Leaving)
[11:00:50] *** Joins: puchka (~marius@165.73.242.6)
[11:01:44] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[11:06:17] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 240 seconds)
[11:28:58] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[11:29:13] *** Joins: piotrts (~piotrts@188.147.97.216.nat.umts.dynamic.t-mobile.pl)
[11:34:24] *** Quits: piotrts (~piotrts@188.147.97.216.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 256 seconds)
[11:39:11] *** Quits: selfsymmetric-mu (~matt@c-73-29-248-41.hsd1.nj.comcast.net) (Ping timeout: 256 seconds)
[11:44:11] *** Parts: linjian (~linj@user/linj) ()
[11:47:32] *** Quits: eddof13 (~eddof13@2806:102e:12:64:a0cc:1315:5073:f3f7) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:48:30] *** Joins: jespada (~jespada@85.255.234.169)
[11:54:17] *** Quits: puchka (~marius@165.73.242.6) (Ping timeout: 240 seconds)
[11:55:31] *** Quits: shiranaihito (~textual@27.105.50.111) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[11:56:26] *** Joins: puchka (~marius@165.73.242.5)
[12:01:36] *** Joins: piotrts (~piotrts@188.147.97.216.nat.umts.dynamic.t-mobile.pl)
[12:06:44] *** Quits: piotrts (~piotrts@188.147.97.216.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 272 seconds)
[12:14:33] *** Joins: shiranaihito (~textual@2001-b011-4011-34fa-246c-6c61-0ef7-4bee.dynamic-ip6.hinet.net)
[12:19:35] *** Joins: uncleyear (~ian@94.25.169.213)
[12:22:11] *** Joins: yason (yason@kapsi.fi)
[12:33:15] *** Quits: AlaskanEmily (~AlaskanEm@user/alaskanemily) (Remote host closed the connection)
[12:35:20] *** Joins: piotrts (~piotrts@188.147.97.216.nat.umts.dynamic.t-mobile.pl)
[12:36:11] *** Quits: uncleyear (~ian@94.25.169.213) (Ping timeout: 245 seconds)
[12:44:06] *** Quits: piotrts (~piotrts@188.147.97.216.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 256 seconds)
[13:01:58] *** Quits: dalek_caan (~Thunderbi@109.252.124.86) (Quit: dalek_caan)
[13:03:30] *** Quits: jespada (~jespada@85.255.234.169) (Ping timeout: 268 seconds)
[13:03:43] *** Joins: paul_j (~user@67.26.169.217.in-addr.arpa)
[13:04:36] *** Quits: paul_j (~user@67.26.169.217.in-addr.arpa) (Remote host closed the connection)
[13:08:20] *** Joins: paul_j (~user@67.26.169.217.in-addr.arpa)
[13:12:46] *** Joins: schmudde (~schmudde@2001:b07:ae6:7d19:f440:ceee:5307:581d)
[13:22:46] *** Joins: jespada (~jespada@148.252.132.235)
[13:31:45] *** Joins: uncleyear (~ian@94.25.169.213)
[13:43:13] *** Quits: Iacob (~Thunderbi@117.15.90.146) (Quit: Iacob)
[13:44:01] *** Quits: uncleyear (~ian@94.25.169.213) (Remote host closed the connection)
[13:45:13] *** Joins: uncleyear (~ian@94.25.169.213)
[13:48:27] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[13:49:02] <sobel> i've written trivial functions like that when i've made machinery that operates on functions only.
[13:50:50] *** Joins: selfsymmetric-mu (~matt@c-73-29-248-41.hsd1.nj.comcast.net)
[14:00:51] *** Quits: jespada (~jespada@148.252.132.235) (Ping timeout: 268 seconds)
[14:04:26] *** Joins: jespada (~jespada@148.252.132.235)
[14:09:31] *** Quits: uncleyear (~ian@94.25.169.213) (Remote host closed the connection)
[14:10:26] *** Joins: uncleyear (~ian@94.25.169.213)
[14:14:59] *** Quits: uncleyear (~ian@94.25.169.213) (Read error: Connection reset by peer)
[14:15:25] *** Joins: uncleyear (ian@gateway/vpn/protonvpn/uncleyear)
[14:56:46] *** Joins: DasBrain (~DasBrain@user/dasbrain)
[15:07:27] *** Quits: schmudde (~schmudde@2001:b07:ae6:7d19:f440:ceee:5307:581d) (Ping timeout: 268 seconds)
[15:11:04] *** Joins: yauhsien (~Yau-Hsien@61-231-43-120.dynamic-ip.hinet.net)
[15:53:03] *** Quits: selfsymmetric-mu (~matt@c-73-29-248-41.hsd1.nj.comcast.net) (Ping timeout: 256 seconds)
[15:53:16] *** Joins: selfsymmetric-mu (~matt@c-73-29-248-41.hsd1.nj.comcast.net)
[15:55:54] *** Quits: jespada (~jespada@148.252.132.235) (Read error: Connection reset by peer)
[16:15:29] *** Quits: puchka (~marius@165.73.242.5) (Quit: leaving)
[16:16:02] *** Quits: uncleyear (ian@gateway/vpn/protonvpn/uncleyear) (Ping timeout: 240 seconds)
[16:18:02] *** Joins: uncleyear (~ian@31.173.85.72)
[16:22:21] *** Quits: struchu (~struchu@staticline-31-183-183-16.toya.net.pl) (Quit: WeeChat 3.3)
[16:23:48] *** Joins: puchka (~marius@165.73.240.117)
[16:35:21] *** Quits: Frozenlock (~user@modemcable251.64-203-24.mc.videotron.ca) (Remote host closed the connection)
[16:52:54] *** Joins: yewscion (~yewscion@52.94.133.128)
[17:12:56] *** Joins: jespada (~jespada@148.252.132.235)
[17:17:46] *** Quits: paul_j (~user@67.26.169.217.in-addr.arpa) (Remote host closed the connection)
[17:27:17] *** Joins: pflanze (~pflanze@61-41-178-139.dyn.fiber.qlnet.ch)
[17:38:14] <aphyr> seebs: I'd planned to parameterize it later.
[17:38:59] <aphyr> And if you look later on the page, atlas-v starts taking args
[17:43:24] *** Quits: jespada (~jespada@148.252.132.235) (Read error: Connection reset by peer)
[17:43:35] *** Joins: schmudde (~schmudde@2001:b07:ae6:7d19:cc5e:e8a9:4e09:5715)
[17:45:09] *** Joins: jespada (~jespada@148.252.132.235)
[18:06:37] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:7f03:8b0:a81c:56d7) (Ping timeout: 240 seconds)
[18:14:08] *** Quits: jespada (~jespada@148.252.132.235) (Read error: Connection reset by peer)
[18:17:14] *** Quits: sailorCat (~sailorCat@mail2.gajsin.name) (Quit: ZNC 1.8.2 - https://znc.in)
[18:17:33] *** Joins: jespada (~jespada@148.252.132.235)
[18:20:02] *** Joins: sailorCat (~sailorCat@mail2.gajsin.name)
[18:30:50] *** Quits: puchka (~marius@165.73.240.117) (Quit: leaving)
[18:37:00] *** Quits: yewscion (~yewscion@52.94.133.128) (Ping timeout: 240 seconds)
[18:50:18] <seebs> ohhh. that makes sense.
[19:17:48] *** Joins: shiranaihito_ (~textual@123-192-192-149.dynamic.kbronet.com.tw)
[19:19:31] *** Quits: shiranaihito (~textual@2001-b011-4011-34fa-246c-6c61-0ef7-4bee.dynamic-ip6.hinet.net) (Ping timeout: 245 seconds)
[19:25:02] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:e5ea:1ffe:3a64:8fa7)
[19:30:59] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:e5ea:1ffe:3a64:8fa7) (Ping timeout: 250 seconds)
[19:36:43] <ToxicFrog> sobel: in cases like that I generally pass in (constantly foo) when I need to functionize it.
[19:39:13] *** Joins: mwnaylor (~user@2601:5ce:4300:5560::68b3)
[19:46:15] *** Joins: silasfox (~sbv@p200300cec71b49000fb32acff10041ab.dip0.t-ipconnect.de)
[20:00:41] *** Quits: seabre_ (~seabre@user/seabre) (Ping timeout: 256 seconds)
[20:16:51] *** Quits: DasBrain (~DasBrain@user/dasbrain) (Killed (NickServ (GHOST command used by DasBrain_)))
[20:16:58] *** Joins: DasBrain_ (~DasBrain@user/dasbrain)
[20:20:17] *** Joins: paul_j (~user@67.26.169.217.in-addr.arpa)
[20:21:05] *** Joins: Frozenlock (~user@modemcable251.64-203-24.mc.videotron.ca)
[20:22:17] <Frozenlock> I'm sure I'm missing something obvious... How can I use `with-open` inside a macro? It complains about the provided symbol not being 'simple'. :-/
[20:22:34] *** Joins: vchepeli (~vchepeli@217.30.64.206)
[20:22:37] <Frozenlock> I tried quoting the symbol, but macroexpand still shows it as namespaced
[20:23:40] *** Quits: molson (~molson@172-103-21-94-dynamic.midco.net) (Quit: Leaving)
[20:27:57] <Frozenlock> Oh derp, I was missing '#'
[20:29:44] *** Joins: seschwar (~seschwar@user/seschwar)
[20:30:24] *** Quits: uncleyear (~ian@31.173.85.72) (Ping timeout: 252 seconds)
[20:32:25] *** Joins: uncleyear (ian@gateway/vpn/protonvpn/uncleyear)
[20:51:21] <seebs> so prewalk and postwalk have stated orders. is plain-old walk in-order, or unspecified order?
[20:56:10] <Para> There are only three ways to walk a tree :)
[20:56:29] * aphyr perks up
[20:57:05] <Para> breadth first, post and pre
[20:57:22] <Para> Well okay, fourth one is "your own custom logic"
[20:57:40] <aphyr> fine, fine ;-)
[20:57:52] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[21:05:03] *** Joins: dalek_caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru)
[21:14:58] *** Quits: jespada (~jespada@148.252.132.235) (Read error: Connection reset by peer)
[21:16:46] <seebs> well, "walk" seems to imply it can walk things other than trees
[21:18:20] <seebs> what's the idiomatic approach for Reading A Binary File? Like, I know what the file format is, and if it were C, I'd be doing stuff like shifting and oring bytes together to assemble values.
[21:18:32] <aphyr> seebs: got a format in mind?
[21:18:40] <seebs> ... sadly, yes
[21:19:22] <aphyr> I don't know if this is *idiomatic* per se, but reading binary files tends to be Gnarly Stateful Stuff
[21:19:22] <seebs> so at one point i wanted a thing to edit Minecraft NBT files, and i spent a while studying the spec, and eventually concluded that the spec was written insanely badly, and misdescribed what it was doing, and came up with a revised implementation which reads files and actually makes any sense at all, which i did in go.
[21:19:44] <aphyr> And if you're up for that, I actually wrote a whole file format in Clojure recently--this might be helpful: https://github.com/jepsen-io/jepsen/blob/main/jepsen/src/jepsen/store/format.clj
[21:19:46] <seebs> well, conveniently, if the file's small enough to fit in memory (which it is) it's pretty much just "parse a tree".
[21:20:29] <seebs> like, at any given point, either i know what i'm expecting next and can read it, or i can read a couple of bytes to find out what's next and then read it, i think.
[21:20:47] <seebs> it's been a few years since i did that and i'd need to reread it, and the original document bitrotted away, but eh.
[21:21:01] <aphyr> Yeah, I think my first inclination would be to grab a FileChannel, allocate a few ByteBuffers, and use the usual java.nio stuff from there
[21:21:24] <seebs> worth noting: i last did anything at all in Java probably... 15-20 years ago, and it didn't involve files. :)
[21:21:25] <aphyr> (assuming you're planning on writing your own parser and don't want to, say, generate one from a spec?)
[21:21:38] <seebs> it's a very trivial recursive parser, i think
[21:22:04] <seebs> https://github.com/seebs/nbt <-- i did a trivial partial one in Go as a couple-afternoon project once
[21:22:09] <aphyr> https://github.com/clj-commons/byte-streams might come in handy, but for anything nontrivial I think the filechannel API is probably easier/simpler than trying to find the right wrapper
[21:22:22] <seebs> it's messy because Go has/had no generics, etc
[21:23:19] <aphyr> another thing you might find useful if you're parsing structs is https://github.com/ztellman/vertigo, which lets you wrap raw bytebuffers with nice accessors
[21:24:28] <seebs> that might come close. it's a very naive format, it's... like, say you didn't know anything about file formats and tried to write one.
[21:24:43] <seebs> and you wanted it to handle maps, arrays, strings, and integers, roughly. but you didn't know at ALL what you were doing.
[21:24:53] <seebs> okay, now take what you're thinking of, and make it... say, 20% more drunk
[21:24:56] <aphyr> haha
[21:25:24] <seebs> so like, the description of it is all "everything is a name followed by a value", except actually, no, only the map data structure is name followed by value, and really, the entire file is just a top-level unnamed map
[21:25:33] <seebs> and once you know that it makes a ton more sense
[21:26:19] <seebs> the original documentation is full of "but in this case you can skip the name" "if it's an array of values, you don't need the type header for each value", but really, it's just confused because the initial claim that everything is name/type/value is wrong.
[21:26:39] <aphyr> Length prefixed variable-length fields?
[21:26:53] <seebs> if they need a length, yes, otherwise you just know the length
[21:27:36] *** Quits: unyu (~pyon@user/pyon) (Quit: brb)
[21:27:38] <seebs> so if you have an IntArray, you need length for the array, if you have a StringArray, I think each string is prefixed with a length, etc.
[21:28:04] <aphyr> Yeah, this should be really straightforward with FileChannel
[21:28:18] <aphyr> Here's an example of getting a bytebuffer out of a file from some byte offset: https://github.com/jepsen-io/jepsen/blob/main/jepsen/src/jepsen/store/format.clj#L360-L375
[21:29:31] <aphyr> and here's an example of reading various-sized structures (32-bit and 64-bit ints) out of a bytebuffer and into a clojure structure: https://github.com/jepsen-io/jepsen/blob/main/jepsen/src/jepsen/store/format.clj#L749-L762
[21:30:12] <seebs> neat. what's an assert+
[21:30:28] <aphyr> assert, but throws customizable exceptions, and returns its truthy argument
[21:30:53] <aphyr> https://github.com/aphyr/dom-top/blob/master/src/dom_top/core.clj#L9-L45
[21:31:17] <seebs> ahh. and... .getInt... *stares* heyyyy is (.name foo) an idiom for calling foo's method "name"?
[21:31:37] <aphyr> Yup! Oh, yes, sorry, you haven't seen java interop yet have you?
[21:31:48] <seebs> nope! but it's pretty straightforward.
[21:32:18] <aphyr> That's exactly it. (Math/pow 4 10) means Math.pow(4, 10), and (.put map k v) means map.put(k, v)
[21:32:24] <seebs> the mix of what i get confused by and what i can't understand how anyone could not know is honestly completely incomprehensible
[21:32:58] <seebs> as a data point, i did not learn C. someone handed me printouts of some C source for a program i knew fairly well (the old roguelike hack, ancestor of nethack), and *forgot to tell me i couldn't read it*
[21:35:03] <seebs> what are the implications of a ^type annotation on something?
[21:35:20] <aphyr> It helps the compiler generate faster method calls
[21:35:46] <aphyr> If you leave one out, the compiler often has to generate a reflective call instead, which is a lot slower. In this case performance matters, so you'll see lots of type hints
[21:36:07] <seebs> if you get the type hint wrong, does it explode at compile time, run time, or only in your soul?
[21:36:26] <aphyr> Definitely runtime
[21:36:49] <aphyr> Maybe compile time if there's no such method on that type--can't recall if that shows up only on `lein check` or during compilation too
[21:37:40] <aphyr> A simple rule of thumb is write your code with no type hints and it'll pretty much Do The Right Thing (TM). Then run `lein check` and add ones, if you care about perf.
[21:41:18] *** Joins: unyu (~pyon@user/pyon)
[21:46:56] *** Joins: seabre (~seabre@user/seabre)
[21:47:55] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:49fc:dd14:62fe:1d6f)
[21:54:12] *** Quits: seabre (~seabre@user/seabre) (Ping timeout: 240 seconds)
[21:56:28] *** Joins: seabre (~seabre@user/seabre)
[22:03:55] *** Quits: vchepeli (~vchepeli@217.30.64.206) (Quit: Leaving...)
[22:09:03] *** Joins: puchka (~marius@165.73.240.181)
[22:19:18] *** Quits: puchka (~marius@165.73.240.181) (Quit: leaving)
[22:21:30] <sobel> in my practice, i've recovered minutes of my time by optimizing a query, and once by replacing some ugly stuff with a transducer, but otherwise optimizing clojure code has not recovered more than a second or so.
[22:22:04] <aphyr> I think I've probably saved... decades?
[22:22:28] <sobel> my operation leans on a database for nearly everything interesting
[22:22:44] <aphyr> This file format thing I linked above, that got me like a five orders of magnitude perf improvement
[22:22:48] <technomancy> sobel: yeah same here; multiple orders of magnitude more saved optimizing in the DB vs the clojure side
[22:23:17] <Para> hrrrrhhh, I think I've told the story before, but that does remind me of back when I worked in analytics about a certain set of Hive queries...
[22:23:20] <sobel> i mean, clojure has already saved me a gob of time over java. golfing down my clojure code hasn't brought me much, if i already had a reasonably-concurrent implementation.
[22:23:51] <aphyr> yeah I think I'm weird by doing a lot of actual data analysis and IO in clojure itself
[22:23:56] <technomancy> also multiple orders of magnitude more time saved optimizing startup time vs actual runtime code but that's just because I work on lein so I can't generalize on that =)
[22:24:14] <sobel> heh
[22:24:22] <Para> We hired a pretty cool guy one springtime, his job was to be a primary data analyst engineer person. He was really good at it. So our unit also got a "must optimize costs" call from higher-ups, lets say by 10% from our monthly overall costs.
[22:24:45] <Para> So we started optimizing, shaving pennies and sometimes dollars, lots of simple stuff we just hadn't had thought of before like autodeletion to S3 buckets.
[22:24:57] <aphyr> the perf improvements in Jepsen's checkers brought some of these tasks down from like "this will literally never terminate in inputs of 1000 operations" to "sixty seconds on 100K ops"
[22:25:24] <sobel> nice
[22:25:30] <Para> This analyst guy, however, went through literally tens of thousands of crap SQL written by "analysts" from another unit, converted them to one parameterized Spark query which ran in like 4% of the time AND only one run was needed instead of 20+ there previously was.
[22:25:41] <aphyr> Para: ooooooh
[22:25:43] <seebs> five orders of magnitude? wow!
[22:25:47] <Para> That sure was a fun demo session to be in :D
[22:26:15] <seebs> i once got asked to look at bumping the cache lifetime of a caching layer because queries were slowing down enough that they started crushing a database server
[22:26:20] <seebs> query took 47 seconds to run
[22:26:36] <Para> He basically explained the issue to the whole unit of ~60 devs, showed how his stuff is insanely better, pointed out he deleted more rows than he added by several magnitudes and as a punchline also told us he's resigning.
[22:26:41] <seebs> so it turns out, postgresql will let you index anything, even "a query against a subfield of a json blob", if for some reason you made such a query.
[22:26:45] <aphyr> seebs: yeah. There was a thing that needed a pass-fail result and a little bit of metadata out of each file, and each file was a single massive fressian blob. Parsing a full GB of data for like 20 bytes.
[22:27:21] <seebs> ohhh yeah that'll do it
[22:27:25] *** Quits: mwnaylor (~user@2601:5ce:4300:5560::68b3) (Ping timeout: 240 seconds)
[22:27:42] <sobel> Para: reminds me of an analyst i worked with. as member #3 of this DBA team, i trained #4-10. so we had some momentum at refactoring the DB on the fly.
[22:27:43] <aphyr> I think the best optimization passes I've done without actually changing the shape of the data/algo got like... maybe 2 orders of mag
[22:27:48] <seebs> actually exactly the same issue, i think -- if you do a query against a component of a json blob, postgresql is doing the parse, if you have a covering index, it's Not
[22:27:52] <Para> The best(?) part of course was that when we saved the savings to the higher-ups, which obviously shot way beyond the targets with all this reporting details such as why our complaints of people from other units not understanding how to do efficient queries isn't a good idea...well, we got the sort of "uhhh, you weren't supposed to actually solve this"
[22:28:07] <Para> Turns out they wanted to reduce staff and were planning on using the failed reduction of costs as leverage.
[22:28:11] <aphyr> Para: oh no
[22:28:13] <seebs> oops
[22:28:21] <sobel> Para: but this one analyst came in, spent about 6 weeks taking some measurements, then rewrote all the call center queries, and took us from 98% capacity to 65%.
[22:28:23] <aphyr> picturing the jaws dropping in that meeting
[22:28:36] <seebs> performance is the only field in which a 1000x improvement is credibly plausible and a 1% improvement is plausibly impressive.
[22:29:14] <goodger> Para: why did he resign?
[22:29:14] <aphyr> That's a great saying
[22:29:18] <Para> It always helps if the people before you have no idea what even is an index.
[22:29:28] <Para> goodger: he got hired by a very high-profile company :)
[22:29:35] <Para> He's still there, after like 7 years or smth.
[22:29:36] <seebs> i love fiddly little performance bits but sadly most of the time they're a complete waste of time. what's really frustrating is that most stuff has at least an order of magnitude just lying around for the taking with a casual effort.
[22:29:53] <seebs> the 1000x/1% thing isn't mine, i forget where i saw it originally
[22:30:12] <aphyr> Yeah like the Clojure reflector you literally can get a 10-100x speedup in a callsite just by adding a type hint sometimes
[22:30:45] <Para> So this might be a bit different around the world, here in Finland we have a 4-6 months probationary period during which for a good reason the contract can be terminated almost immediately. There's some limits but they're not that bad, idea is that either side can bail out at moment's notice if there's a problem.
[22:30:48] <sobel> my analyst figured out two query plans applied differently depending on whether it was morning or evening batch execution. i think one or two indexes needed to be added for her scheme.
[22:30:49] <seebs> yeah, makes sense. and if it's rarely-hit whatever, but if it's in the hot path...
[22:31:21] <seebs> ahh, yeah, we have that too, it's called "it's just always like that" in most of the US. :P
[22:31:55] <aphyr> yeah, you get rid of the reflection and shorten the callstack, suddenly more stuff fits in the inliner's scope and gets pulled up, JIT can work more magic...
[22:32:13] <seebs> how's clojure set for profiling-type tools, etc?
[22:32:28] <aphyr> I use yourkit & jvisualvm, both work pretty darn well IMO
[22:32:44] <sobel> FWIW we ended up running pgBadger after her work, to follow up on bad queries, and discovered another THIRD of db performance was going to the most stupid thing: Ruby web app that issued the same query 30-ish times in the same request handler, rather than pass values around internally
[22:32:57] <seebs> wow
[22:33:18] <aphyr> sobel: this analyst was worth her weight in gold hahaha
[22:33:44] <sobel> we tried hard not to share that result beyond management/dba team. it was basically explosive, because there was already some tension around the "incompetence" word flying around.
[22:34:19] <Para> That'd be an interesting problem to hide.
[22:34:42] <Para> "We just shaved off a third of CPU load but need to mask it somehow...uhh, lets run some cryptominers I guess?"
[22:34:59] <sobel> it had to get fixed but it was chopped up into some tasks before the source data was really made available widely
[22:35:15] <sobel> they had to get ahead of the finger-pointing and realize it was a cat well out the bag
[22:36:02] <sobel> this was IOPS we were saving, so wear & tear on disks
[22:36:16] <Para> mmmhh
[22:36:28] <Para> Oh, the first time I got an SSD... :)
[22:36:41] <sobel> this is the team that made me allergic to Ruby :)
[22:36:47] <seebs> one of the things i like about $dayjob is that if i find a 10x performance improvement, no one gets super defensive about it, we all know perfectly well that we're writing clear/easy code first and coming back for performance as time allows.
[22:37:07] <seebs> i had one thing that ended up needing to perform multiple etcd queries in order to retrieve a string.
[22:37:32] <seebs> specifically, it had to query for some things, unmarshal json from the results, search through them for an entry where a given field matched a string it already had, then return that entry and extract *that* field from it
[22:37:52] <sobel> i get super defensive when i find a 10x perf improvement kicking around today. it's all my code by now, so... =)
[22:37:55] <seebs> which sounds incredibly stupid, but it was the simplest, clearest, way to express the thing it was doing if you didn't think about how it worked.
[22:38:02] <Para> I've seen etcd used raw in like two places.
[22:38:21] <Para> Always wondered what the intended usage pattern with that actually is.
[22:38:49] <seebs> i'm not sure there's a single defined intended usage pattern. we're doing it for trying to ensure that things in a cluster agree on certain stuff.
[22:38:54] <Para> Especially since everyone seems to like to hit it tens of thousands of times per second.
[22:39:04] <sobel> ow
[22:39:10] <seebs> yeah
[22:39:31] <seebs> we had some of that and i finally managed to remove the constant full-multi-node-query things and replace them with monitoring in the background.
[22:39:44] <seebs> this was opposed because What If The Monitor Is Stale, which is a valid question
[22:40:07] <seebs> and my answer is that the thing we're monitoring is whether another node has dropped, and if it has, *we won't notice for at least five seconds*, so i seriously don't care about another three milliseconds of wrong.
[22:41:01] <Para> That one r&d project from while back we had used a "seen x seconds ago" logic for all cluster comms.
[22:41:50] <Para> Turns out that's a pretty light way to ensure everything's in order, and if actual millisecond accuracy is needed, you're not burning the data center with api calls :)
[22:43:41] *** Joins: piotrts (~piotrts@188.147.97.216.nat.umts.dynamic.t-mobile.pl)
[22:48:02] *** Joins: desantra (~skykanin@user/skykanin)
[22:52:24] *** Joins: cyberbanjo (~user@2607:fb90:42b7:213f:732e:306d:a6f3:7f1)
[22:52:43] *** Quits: cyberbanjo (~user@2607:fb90:42b7:213f:732e:306d:a6f3:7f1) (Remote host closed the connection)
[22:55:55] *** Joins: cyberbanjo (~user@2607:fb90:42b7:213f:732e:306d:a6f3:7f1)
[23:01:05] *** Quits: schmudde (~schmudde@2001:b07:ae6:7d19:cc5e:e8a9:4e09:5715) (Ping timeout: 252 seconds)
[23:06:02] *** Quits: piotrts (~piotrts@188.147.97.216.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 272 seconds)
[23:17:42] *** Joins: schmudde (~schmudde@2001:b07:ae6:7d19:3541:d690:3ce7:867e)
[23:23:52] *** Quits: unyu (~pyon@user/pyon) (Quit: brb)
[23:27:41] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[23:27:56] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[23:31:57] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[23:32:11] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[23:46:03] *** Quits: dalek_caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru) (Quit: dalek_caan)
[23:54:30] *** Joins: unyu (~pyon@user/pyon)
[23:55:04] *** Quits: desantra (~skykanin@user/skykanin) (Quit: WeeChat 3.3)
