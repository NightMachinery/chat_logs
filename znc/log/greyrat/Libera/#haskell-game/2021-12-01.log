[00:10:24] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Remote host closed the connection)
[00:33:41] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[00:51:15] *** Joins: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[01:11:19] *** Quits: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[01:16:17] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[01:23:51] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[01:30:02] *** Quits: chomwitt (~chomwitt@2a02:587:dc16:f200:12c3:7bff:fe6d:d374) (Ping timeout: 252 seconds)
[02:31:28] *** Quits: __monty__ (~toonn@user/toonn) (Ping timeout: 264 seconds)
[02:32:57] *** Joins: __monty__ (~toonn@user/toonn)
[03:27:18] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[03:30:03] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (*.net *.split)
[03:30:03] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (*.net *.split)
[03:30:03] *** Quits: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de) (*.net *.split)
[03:30:28] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[03:32:55] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[03:57:58] <EvanR> u guys, I have a command line
[03:58:23] <EvanR> I can type, backspace, back up, go forward, home, end, and insert chars in the middle xD
[03:58:30] <EvanR> oh, and press Enter
[04:00:53] <ManofLetters[m]> yay, with Unicode?
[04:03:15] <EvanR> this shitty font has plenty of not ascii characters but that's the least of my problems now
[04:04:06] <EvanR> though I guess it's important if I want to make a The Matrix screen saver or something
[04:04:20] <EvanR> which I kind of don't want to do
[04:04:32] <ManofLetters[m]> I mean, inserting text with Unicode is hard, given that a character can have many bytes, etc.
[04:05:51] <EvanR> the number of bytes doesn't seem to be a thing, it's Char
[04:06:08] <EvanR> and the space to put a glyph is 7 pixels
[04:06:27] <EvanR> so that's the limitation
[04:06:59] <ManofLetters[m]> "Well, it's not always that simple. Sometimes it can take multiple key presses to produce a character. Sometimes a single key press can produce multiple characters."
[04:07:05] <ManofLetters[m]> https://wiki.libsdl.org/Tutorials-TextInput
[04:07:11] <EvanR> lol... SDL
[04:07:21] <EvanR> epitome of unicode support
[04:07:37] <EvanR> actually I read all about it in the unicode docs
[04:08:01] <ManofLetters[m]> so, is SDL full of it?
[04:08:15] <EvanR> I'm using GLFW, and I don't have a single not ascii char on my keyboard
[04:08:29] <ManofLetters[m]> I'd welcome that, becuase implementing text input is still ahead of me
[04:08:32] <EvanR> so it's kind of moot
[04:08:55] <ManofLetters[m]> how is GLFW different?
[04:09:06] <EvanR> it's slightly different with the Text api
[04:09:11] <EvanR> but similar
[04:09:36] <EvanR> it's supposed to support e.g. a japanese user typing japanese with an input method, which SDL also supposedly does
[04:09:53] <ManofLetters[m]> and isn't the point of "multiple key presses to produce a character" that you can produce Unicode characters that are not on your keyboard?
[04:10:31] <EvanR> I can already type letters with multiple key presses look
[04:10:34] <ManofLetters[m]> oh, so you are using the GLFW implementation of text input? not writing your own from scratch? I somehow assumed you do
[04:10:36] <EvanR> SHIFT+a = A xD
[04:10:58] <ManofLetters[m]> haha
[04:11:03] <ManofLetters[m]> Unicode!
[04:11:04] <f-a> well done 
[04:11:06] <EvanR> I'm just taking the simple text input event, which gives you in that case 'A' not 'a'
[04:11:14] <f-a> you might want to think about your game now :P
[04:11:18] <EvanR> not using any input method
[04:11:50] <ManofLetters[m]> k, nice; I wish I could use the same for SDL, web, ANSI, etc.
[04:11:59] <ManofLetters[m]> without implementing my own
[04:12:00] <EvanR> SDL has this feature
[04:12:15] <EvanR> the unicode field of the key event
[04:12:38] <f-a> yup
[04:12:49] <EvanR> which is different from the input method integration
[04:13:43] <EvanR> as an american person who can't speak any languages and has no experience with input methods, trying to deal with any of that would be tantamount to cultural appropriation
[04:13:43] <ManofLetters[m]> oh, nice, I'm only using the raw keypresses in SDL so far, so that I can differentiated numeric keypad from numbers from HOME/END/PGUP block, etc.
[04:14:21] <EvanR> yeah your char input data will have e.g. u umlaut too, not just caps
[04:14:27] <EvanR> deadkeys should also work
[04:14:35] <EvanR> so europeans are covered
[04:15:16] <f-a> you are not capturing keydown/up, right?
[04:15:29] <f-a> if so, that is pretty hardcore
[04:15:47] <EvanR> for the command line I respond to keydown or key repeating 
[04:17:10] <EvanR> so left arrow makes the cursor fly to the left if you hold it
[04:20:46] <EvanR> here's the mapping https://paste.tomsmeding.com/f677qEQ9
[04:23:57] <f-a> gut
[04:29:37] * sm is all on board with this fully international-scale new text input library
[04:29:52] <EvanR> the code for the console behavior is an RWS thing... https://paste.tomsmeding.com/411Ps61j
[04:32:30] <EvanR> for giggles, what sort of keyboard does everyone have?
[04:32:56] <EvanR> anything not ascii on it
[04:35:51] <EvanR> I can test your keyboard layout and see if my font is up to the task
[04:36:38] <EvanR> I might wanna get SDL for audio next
[04:39:34] <ManofLetters[m]> US keyboard
[04:39:38] <ManofLetters[m]> no game
[04:40:43] <EvanR> lame
[04:53:01] <f-a> I used US_intl (dead keys, most European languages)
[04:53:11] <f-a> now I just use US+xcompose
[05:54:32] <EvanR> is flowing paragraphs of text across a fixed width term something ansi-terminal does
[09:49:28] *** Joins: chomwitt (~chomwitt@2a02:587:dc16:f200:12c3:7bff:fe6d:d374)
[12:11:17] *** Quits: chomwitt (~chomwitt@2a02:587:dc16:f200:12c3:7bff:fe6d:d374) (Quit: Leaving)
[12:51:47] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[13:10:50] <f-a> ansi-terminal-game yes, EvanR 
[13:11:10] <f-a> via https://hackage.haskell.org/package/linebreak
[13:17:26] <ManofLetters[m]> oooh, shiny
[13:22:31] <ManofLetters[m]> does it try not to break at space in phrases like "a table" or "the chair?
[13:24:10] *** Joins: nek0 (~nek0@nek0.eu)
[13:29:21] <f-a> I don‚Äôt think so, it is based on knuth-liang, and I suspect that works on words full stop? I should check
[13:31:38] <ManofLetters[m]> if that's the same as in TeX, they expect you to use a non-breakable space (~ in LaTeX) for "a~table", so I guess there is no special support
[13:32:38] <ManofLetters[m]> does "a&nbsp&table" break after the fiirst 'a'?
[13:32:53] <ManofLetters[m]> I mean the Unicode nbsp character
[13:33:50] <f-a> what is the result for  Œª> length (words ""a&nbsp&table")  ?
[13:33:56] <f-a> if 1, there is
[13:34:12] <f-a> if not 1, I can add it in
[13:34:24] <f-a> sod it, I will try this now
[13:35:04] <f-a> Œª> words "la mamma"
[13:35:04] <f-a> ["la","mamma"]
[13:35:05] <f-a> woops
[13:35:26] <ManofLetters[m]> perhaps that's a bug in `words`
[13:35:39] <ManofLetters[m]> or in Char.isSpace
[13:35:51] <ManofLetters[m]> though nbsp is space
[13:35:55] <ManofLetters[m]> just not a breakable one
[13:35:58] <ManofLetters[m]> doh
[13:36:20] <ManofLetters[m]> anyway, users are surely too lazy to learn to input nbsp
[13:37:08] <ManofLetters[m]> LaTeX users have it easier, but LaTeX is not WYSIWYG and ansi-terminal-game is :)
[13:38:00] <ManofLetters[m]> I hack it by capturing andy "a foo" and "the foo", but it's rather crude
[13:38:05] <ManofLetters[m]> *any
[13:59:57] <f-a> Œª> hyphenate english_US "table"
[13:59:58] <f-a> ["ta","ble"]
[13:59:58] <f-a> Œª> hyphenate english_US "the table"
[13:59:58] <f-a> ["the table"]
[14:00:07] <f-a> this is what  Text.Hyphenate  does
[14:00:27] <f-a> I guess ‚Äúthe tab-le‚Äù would be acceptable?
[14:00:35] <f-a> should, rather
[14:02:26] <ManofLetters[m]> yes, it should
[14:03:34] <ManofLetters[m]> where is "Text.Hyphenate" from?
[14:04:04] <f-a> of course a EK package https://hackage.haskell.org/package/hyphenation
[14:04:21] <ManofLetters[m]> Text.Hyphenation ?
[14:04:50] <f-a> yes
[14:05:01] <ManofLetters[m]> so it knows about "the", but is buggy, too :)
[14:05:08] <f-a> no it does not
[14:05:22] <f-a> Œª> hyphenate english_US "apple dolphin"
[14:05:23] <f-a> ["ap","ple ","dol","phin"]
[14:05:28] <f-a> oh weird it does
[14:05:34] <f-a> I will file a bug
[14:06:11] <ManofLetters[m]> BTW, was the space in you "the table" example the nbsp one?
[14:06:23] <ManofLetters[m]> it all displays the same on my screen
[14:06:26] <f-a> Œª> hyphenate english_US "the\x00a0table"
[14:06:26] <f-a> ["the\160table"]
[14:06:40] <ManofLetters[m]> ok, yep, seems like a bug
[14:07:41] <ManofLetters[m]> perhaps when they see a strange Unicode character they just freak out
[14:08:10] <ManofLetters[m]> to the end of the word, as in "it's not in the language for which I have hyphenation rules"
[14:20:24] <f-a> https://github.com/ekmett/hyphenation/issues/20 voil√°
[14:21:16] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Quit: Leaving)
[14:22:19] <ManofLetters[m]> +1
[14:27:20] <f-a> ¬´Play my free game at¬ª
[14:28:04] <ManofLetters[m]> yeah, it's broken outside the full profile view
[14:28:23] <ManofLetters[m]> I don't care
[14:28:38] <f-a> it is better
[14:28:49] <f-a> I guess many people clicked b/c FOMO, like me
[14:29:12] <ManofLetters[m]> haha
[14:30:05] *** Joins: __monty__ (~toonn@user/toonn)
[14:34:49] <f-a> 9> And after hyphenation I'm removing hyphens between f and any char from "filjt" to not break font ligatures.
[14:34:53] <f-a> I definitely do not like this
[14:36:50] <__monty__> That doesn't sound great but I don't know what the proper behavior would even be?
[14:40:29] <f-a> wait I take that back, is there a word hyphened between ‚Äòf‚Äô and oneOf ‚Äúfiljt‚Äù?
[14:41:33] <__monty__> Probably if you don't do proper hyphenation in the first place?
[14:42:57] <ManofLetters[m]> ef-fort
[14:43:18] <f-a> excellent example ManofLetters[m] 
[14:43:23] <ManofLetters[m]> :D
[14:43:54] <f-a> yeah, with effort one should hyphenate it and not ‚Äúforce‚Äù ligatures
[14:44:58] <f-a> ligatures were invented in the XV century to be easier on the eyes, they should not trump readability
[14:45:22] <ManofLetters[m]> but, e.g., Polish hyphenation actively tries to split syllables like that so that syllables start and end with consontants, so outside of English that may be common
[14:45:33] <f-a> s/invented/incorporated in typography
[14:54:47] *** Joins: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de)
[16:10:53] *** Joins: chomwitt (~chomwitt@2a02:587:dc0d:6d00:12c3:7bff:fe6d:d374)
[16:15:43] *** Quits: chomwitt (~chomwitt@2a02:587:dc0d:6d00:12c3:7bff:fe6d:d374) (Ping timeout: 252 seconds)
[16:17:54] *** Joins: chomwitt (~chomwitt@2a02:587:dc0d:6d00:12c3:7bff:fe6d:d374)
[19:30:09] *** Quits: thekyriarchy (~thekyriar@2001:470:69fc:105::493) (Quit: You have been kicked for being idle)
[19:55:20] <EvanR> f-a, the length of ['a', nbsp, nbsp] would be three regardless of what nbsp is
[19:55:20] *** Joins: thekyriarchy (~thekyriar@2001:470:69fc:105::493)
[19:55:39] <EvanR> er ['a', nbsp, table]
[19:56:28] <EvanR> not to be confused with some unicode idea of length
[20:06:20] <f-a> length the haskell function
[20:07:02] <f-a> > length . words $ ["the table"]
[20:07:20] <f-a> with ‚ê£ as the non breaking space
[20:19:44] <EvanR> oh length . words
[20:52:01] *** Quits: srk (~sorki@user/srk) (Ping timeout: 245 seconds)
[21:02:05] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[21:21:30] *** Joins: srk (~sorki@user/srk)
[21:53:07] *** Joins: Guest1723 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[22:01:11] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[22:25:16] *** Quits: Guest1723 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 256 seconds)
[23:29:58] <f-a> I think we are losing our case, ManofLetters[m] 
[23:31:33] <ManofLetters[m]> that's only because we don't want bloodshed
[23:31:52] <EvanR> what's up?
[23:32:28] <f-a> https://github.com/ekmett/hyphenation/issues/20
[23:33:29] <EvanR> damn, vshabanov is a dick xD
[23:35:03] <ManofLetters[m]> I don't take it so personally; but then, it wasn't my ticket that was executed so rapidly ;)
[23:35:09] <f-a> not really, there is value in keeping boundaries to libraries you maintain. But I think he is wrong in this case. I am ready to dig up Unicode definitions etc. but I think in the end it will be useless if he‚Äôs not into it
[23:35:29] <EvanR> I kind of don't understand, you want the function break no-break space across lines?
[23:35:51] <EvanR> i.e. do the opposite of what it says on the tin
[23:36:04] <f-a> haha
[23:36:05] <f-a> sorry
[23:36:10] <f-a> I must have written it wrong
[23:36:53] <f-a> but the example is correct
[23:37:03] <f-a> Œª> hyphenate english_US "the\x00a0table"
[23:37:04] <f-a> should
[23:37:17] <f-a> ["the ta", "ble"]
[23:37:29] <f-a> where the list is ¬´semigroup w/ soft hyphen¬ª
[23:39:58] <EvanR> oh I see
[23:41:12] <EvanR> oh yeah now I see where they are coming from, it's supposed to split words only
[23:41:36] <EvanR> asking them to find the word first seems like a lot
[23:42:16] <ManofLetters[m]> Et tu, Brute?
[23:42:43] <ManofLetters[m]> but you are repeating a strawman, I think
[23:43:21] <ManofLetters[m]> "the\x00a0table" is a single word IMHO
[23:43:22] <f-a> I believe it is a strawman, yeah
[23:43:25] <f-a> indeed it is
[23:43:28] <EvanR> um
[23:43:37] <EvanR> why
[23:43:43] <EvanR> is it a single word
[23:43:45] <ManofLetters[m]> (not so sure about "a single English word", but they should not be so tied to languages)
[23:45:27] <ManofLetters[m]> (and that wasn't his argument, I think)
[23:46:42] <EvanR> you can split your text into words in a way that preserves the kind of whitespace so you can put it back later
[23:49:35] <ManofLetters[m]> I don't think so
[23:50:32] <ManofLetters[m]> I think hyphenate should tell me if "a man" can be split or needs to be moved whole to the next line
[23:51:15] <ManofLetters[m]> if I instead split off "a" and "man" and hyphenate tells me "man" should be moved to the next line, I need to backtrack to know that "a" should be moved, too
[23:51:28] <ManofLetters[m]> that's basically repeating hyphenate's functionality
[23:51:41] <ManofLetters[m]> I guess it's not very far from writing hyphenate from scratch
[23:52:18] <ManofLetters[m]> and I may be missing even more subtle cases where context matters
[23:53:09] <ManofLetters[m]> (I don't know how hyphenate works nor what exactly the language rules are)
[23:54:23] <ManofLetters[m]> the context being, that if we don't split, a much larger prefix gets moved to the next line than is apparent
[23:54:35] <ManofLetters[m]> or even some phonetic context IDK
[23:55:57] <f-a> ‚Üë
[23:57:04] <EvanR> rename the function to hyphenateWord and implement whatever ManofLetters[m] is talking about? xD
[23:57:46] <f-a> from a ¬´do things in their proper space¬ª pov, I would rather not
[23:57:52] <EvanR> hyphenateCorpus
[23:57:52] <f-a> but alas, that is my only choice then
