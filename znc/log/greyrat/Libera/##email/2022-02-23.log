[00:13:57] <rob0> RFC 5321 and predecessors (2821, 821) only specify that SMTP commands should be terminate with CRLF.  Says nothing about the DATA payload other than headers.
[00:17:27] <lunaphyte> nor the format of files which may be attached to a given email and end up in the body
[00:23:23] *** Parts: dob1 (~dob1@user/dob1) (Leaving)
[00:23:28] *** Joins: dob1 (~dob1@user/dob1)
[00:32:37] *** Quits: minimal (~minimal@user/minimal) (Quit: Leaving)
[00:33:01] *** Joins: Tang3nt-Man (~Tang3nt-M@138.199.21.54)
[00:35:17] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Ping timeout: 240 seconds)
[01:19:45] *** Quits: Deknos (~someone@user/menace) (Quit: Deknos)
[01:21:48] *** Joins: dingdreher (~dingdrehe@2a02:aa08:401e:fff2:65dc:ab5d:8da2:d8b4)
[02:00:38] *** Joins: Atque (~Atque@user/atque)
[02:17:31] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:a1e9:5294:11ab:484a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:26:54] *** Joins: richard_h (~richard@2406:e001:8:a900:6e62:6dff:fe05:ae29)
[02:48:15] *** Quits: FingerlessGloves (~Fingerles@user/fingerlessgloves) (Quit: I'll be back)
[02:49:09] *** Joins: FingerlessGloves (~Fingerles@user/fingerlessgloves)
[02:51:22] *** Quits: richard_h (~richard@2406:e001:8:a900:6e62:6dff:fe05:ae29) (Quit: Leaving.)
[02:57:28] *** Joins: tex (~super@user/dix)
[03:25:44] *** Joins: minimal (~minimal@user/minimal)
[03:42:28] *** Quits: tex (~super@user/dix) (Quit: tex)
[04:32:18] *** Quits: jaybe (~~@user/jaybe) (Quit: ./pewpew.py)
[04:35:38] *** Joins: bsd4me (~usingbsd@user/bsd4me)
[04:42:40] *** Quits: Tang3nt-Man (~Tang3nt-M@138.199.21.54) (Quit: Leaving)
[04:46:45] *** Quits: dob1 (~dob1@user/dob1) (Quit: quit)
[04:48:43] *** Joins: dob1 (~dob1@user/dob1)
[04:54:38] *** Quits: dob1 (~dob1@user/dob1) (Quit: quit)
[05:00:17] *** Joins: dob1 (~dob1@user/dob1)
[05:03:51] *** Quits: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8) (Ping timeout: 252 seconds)
[05:04:23] *** Joins: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8)
[05:07:08] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[05:08:24] *** Joins: Atque (~Atque@user/atque)
[05:27:12] *** Joins: jaybe (~~@user/jaybe)
[05:37:23] *** Quits: Guest6792 (~vit@chello085216193138.chello.sk) (Ping timeout: 252 seconds)
[05:41:09] *** Quits: minimal (~minimal@user/minimal) (Quit: Leaving)
[06:03:55] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:a526:824c:9b4d:f939)
[06:43:26] *** Quits: dob1 (~dob1@user/dob1) (Quit: quit)
[06:44:12] *** Joins: dob1 (~dob1@user/dob1)
[07:00:05] *** Quits: Duchess (~Duchess@2604:3d08:1:1b:c189:b6ab:68c1:858f) (Quit: Client closed)
[07:07:29] *** Joins: Azem (~haise01@user/haise01)
[07:10:45] *** Quits: Emet-Selch (~haise01@user/haise01) (Ping timeout: 256 seconds)
[07:15:13] *** Quits: dob1 (~dob1@user/dob1) (Quit: quit)
[07:15:33] *** Joins: dob1 (~dob1@user/dob1)
[07:20:09] *** Joins: richard_h (~richard@2406:e001:8:a900:6e62:6dff:fe05:ae29)
[09:17:40] *** Joins: Duchess (~Duchess@2604:3d08:1:1b:c189:b6ab:68c1:858f)
[09:44:48] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Ping timeout: 272 seconds)
[09:51:58] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:a526:824c:9b4d:f939) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:00:36] *** Quits: bsd4me (~usingbsd@user/bsd4me) (Ping timeout: 240 seconds)
[10:18:31] <hpfr> sorry for the delay, but I ran `dos2unix -ih` on a bunch of emails in a maildir synced with `mbsync`, and it reported all unix line endings in all of them. does that mean maybe mbsync or IMAP is changing the line endings? because there is no crlf in the message files anywhere
[10:36:52] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[11:31:38] *** Quits: richard_h (~richard@2406:e001:8:a900:6e62:6dff:fe05:ae29) (Quit: Leaving.)
[11:35:46] <hpfr> also, the body part of many of these messages is quoted-printable, and the spec says that should wrap with CRLF, but it's all unix newlines
[12:15:57] <Khepra> hpfr: what spec?
[12:16:06] <Khepra> and what is your end goal, what are you trying to do?
[12:16:30] <hpfr> https://www.w3.org/Protocols/rfc1341/5_Content-Transfer-Encoding.html
[12:16:52] <hpfr> I am not trying to do anything really, just trying to learn
[12:17:58] <Khepra> that's.... http .....
[12:19:49] <hpfr> no, it's not. would you prefer this address lol https://www.rfc-editor.org/rfc/rfc1341.html ?
[12:20:09] <Khepra> yes that's http.   for email, this is the spec: https://datatracker.ietf.org/doc/html/rfc2045#section-6.7
[12:21:23] <hpfr> it's really http? the name of the spec is "MIME (Multipurpose Internet Mail Extensions): Mechanisms for Specifying and Describing the Format of Internet Message Bodies"
[12:21:52] <Khepra> hrm.... and 2045 also says CRLF
[12:22:18] <Khepra> hpfr: I meant the first link you gave. http headers have different requirements
[12:22:52] <hpfr> the first link happened to be hosted by w3 but it's still about rfc1341
[12:23:14] <hpfr> but now I'm confused because 2045 discusses the same stuff but doesn't obsolete 1341 lol
[12:23:53] <Khepra> hpfr: see the header of 1341? "obsoleted by 1521" which in turn is obsaoleted by 2045 and friends.
[12:24:02] <Khepra> but nevermind... 2045 also says CRLF.
[12:24:08] <tuxick> mail is obsolete
[12:24:11] <Khepra> true that.
[12:24:16] <hpfr> ah, I missed that there was one in between, thanks
[12:24:56] <hpfr> yeah. my original question, basically "can you email long lines", has been answered, because quoted-printable and base64 transfer encodings break lines without affecting the content
[12:25:05] <Khepra> yeah
[12:25:19] <hpfr> but now I'm curious why my message files in my maildir use unix newlines. I wonder if mbsync does that
[12:25:24] <hpfr> or imap
[13:02:12] <merpaderp> hello email ppl, I was wondering about DKIM keys, if I have multiple smtp servers, should they all have same set of keys for domain, or each to have own key with own selector
[13:02:54] <merpaderp> like, smtp120220223._domainkey for first server and smtp220220223._domain key for second
[13:03:12] <merpaderp> or just dont bother and make mail._domainkey on both, sync keys and never rotate them?
[13:03:34] <merpaderp> do people regularly rotate DKIM keys?
[13:18:42] <dminuoso> So this is mostly a matter of how much automation you have set up
[13:18:50] <pj> merpaderp: separate keys for each host makes sense because if the key from one host becomes compromised it limits the damage.  Rotating keys can help as well, although not so much and if you do rotate keys you need to leave the old one in place long enough for mail that was signed with that key to pass through any systems that may check it.
[13:18:58] <dminuoso> In our new mail cluster we automatically rotate DKIM keys
[13:19:36] <dminuoso> And we use separate keys for each domain, because really with the automation it's not really extra effort
[13:19:58] <pj> right, that makes sense.
[13:20:15] <dminuoso> The main issue was just locking the DNS API up tightly.
[13:20:28] <dminuoso> But we wrote our own powerdns authorization proxy that gives us very fine grained permission control
[13:21:16] <dminuoso> pj: What kind of nameserver are you operating? Your own?
[13:21:22] <pj> yeah, well that may be beyond the scope of most mail admins, but nowadays most DNS providers have a decent enough API that you can use.
[13:21:27] <dminuoso> No they dont.
[13:21:44] <dminuoso> Most DNS providers have blanked "a key lets you manipulate the entirety of a damn zone"
[13:21:45] <tuxick> an API??
[13:21:49] <dminuoso> If they have an API at all
[13:21:52] <tuxick> in many cases you get a crappy webui
[13:22:22] <dminuoso> Actually come to think of it, every DNS provider that also exposes an API... *none* of them have fine grained permission control for API keys
[13:22:24] <dminuoso> its absolutely ridiculous
[13:22:37] <dminuoso> Some odd exception might exist
[13:23:01] <dminuoso> Anyway. If you're interested, powerdns together with https://gitlab.com/wobcom/haskell/powerdns-gerd
[13:23:26] <dminuoso> Oh hah, missing a license
[13:23:41] <dminuoso> It's going to be BSD-3 for what its worth, Ill do that later
[13:24:02] <pj> dminuoso: I've used bind in the past, haven't really gotten into powerdns.
[13:24:34] <dminuoso> pj: Its the only freely available open source nameserver with a usable API.
[13:25:03] <dminuoso> And it doesnt even have permissions in any way either (beyond a simple "one key lets you manipulate *every* zone completely). 
[13:25:21] <pj> bind has rndc
[13:27:17] <dminuoso> pj: So one of our requirements was being able to say `User A may modify TXT records on _acme-challenge.*.foo.bar., but nothing else`
[13:28:28] <pj> dminuoso: fair enough.
[13:28:36] <pj> I never got into that much fine-grained control.
[13:28:54] <pj> But I will keep it in mind, I might need it for a new venture.
[13:29:18] <dminuoso> Such that each mail server may modify the records necessary for ACME DNS-01 challenges, and perhaps we also grant them access to `TXT *._domain.foo.bar.`
[13:29:41] <dminuoso> Well, the power of DNS yields incredible trust
[13:30:41] <tuxick> i've had dnssec on my todo list for years now
[13:31:02] <tuxick> guess got some catching up to do
[13:32:21] <dminuoso> tuxick: Meh DNSSEC is a major waste of time I think.
[13:32:32] <tuxick> ah good!
[13:32:33] <dminuoso> We spend some time on it, but in retrospec its completely in vain
[13:32:55] <dminuoso> It doesnt really add much trust for most use cases beyond what TLS already gives
[13:33:47] <dminuoso> It's mostly SPF, DKIM and ACME DNS-01 that would be secured
[13:33:50] <pj> It does help with enforcing certificate validation for your MX server, though.
[13:34:00] <dminuoso> pj: Mmm, not that I can see.
[13:34:07] <dminuoso> Here's why:
[13:35:03] <dminuoso> Most mailservers have the lets encrypt root certificates added to their trust store
[13:36:12] <pj> so?  How does that change anything?
[13:37:03] <merpaderp> that powerdns auth proxy kicks ass, can totally automate certain subdomain type changes automatically
[13:37:14] <merpaderp> I am doing that right now with Knot, sort of
[13:37:29] <dminuoso> merpaderp: You mean ours? :)
[13:37:40] <merpaderp> yea
[13:37:58] <merpaderp> I knew of pdns API, but since its this-key-manages-whole-server, never bothered with it
[13:38:05] <dminuoso> Happy to hear that. :)
[13:38:34] <merpaderp> do you use ansible to automate rotation by any chance?
[13:39:21] <dminuoso> No, our mail cluster is described by nixos expressions. We have some simple nix code that generates systemd units and timers.
[13:39:46] <merpaderp> one thing I didnt understand was how to obsolete old signing keys once some weeks have passed and those wont be used anymore, figured to write a script which sorts by YYYYMM used and remove once month has passed
[13:39:59] <merpaderp> oh boy sounds complex
[13:40:03] <dminuoso> Not really
[13:40:29] <merpaderp> its like bash but more sane?
[13:40:40] <dminuoso> It's almost, but not quite, entirely unlike bash.
[13:41:22] <dminuoso> Anyway. The key is that all you need is just a systemd timer
[13:41:34] <dminuoso> So what you'd do is this:
[13:42:04] <dminuoso> We wrote some simple powerdns bindings: https://hackage.haskell.org/package/powerdns
[13:42:25] <dminuoso> Then you have a simplistic program that simply talks to the powerdns api, for each domain's dkim domain, i.e. _domainkeys.foo.bar
[13:42:28] <dminuoso> And get all TXT records
[13:42:42] <dminuoso> Then by convention you do something like
[13:43:39] <dminuoso> Assume the selector consists of `${mailserver-name}--${issueing-date}._domainkeys.foo.bar.` like `mail-server-1--2022-23-02._domainkeys.foo.bar`
[13:43:55] <dminuoso> Then you just grab all records that exist, parse them, get todays date
[13:44:12] <dminuoso> then you know whether or not to issue a new one, and whether or not delete an old one
[13:44:29] <dminuoso> And you run this thing in a systemd timer daily
[13:44:48] <merpaderp> all that runs on same server where postfix with opendkim lives?
[13:44:56] <dminuoso> in our case rspamd, but sure.
[13:45:23] <merpaderp> systemd timer is fancy name for cron?
[13:45:32] <dminuoso> No, systemd timer is a fancy name for systemd timer.
[13:45:40] <dminuoso> If you have systemd, you really shouldnt be using cron anymore.
[13:46:55] <merpaderp> okay, so you select all TXT _domainkeys entries for many domains you have, iterate and compare against today's date
[13:47:06] <dminuoso> Yes
[13:47:22] <merpaderp> and if older than month, issue new one, if older than two months - remove completely. just as example.
[13:47:30] <dminuoso> (I mean I guess you could also do that in bash, and even use `dig` or whatever)
[13:47:39] <dminuoso> but that moves trust into your own resolvers
[13:47:47] <merpaderp> I just now realized opendkim can actually run on completely separate host and many postfixes can talk to single opendkim
[13:47:47] <dminuoso> by using powerdns api you have validation via TLS
[13:47:56] <dminuoso> merpaderp: Yes.
[13:48:16] <merpaderp> I have something like this already for ACME challenges, but I use axfr with a TSIG against Knot authoritative server
[13:49:31] <dminuoso> powerdns-gerd is what allows you to put servers in control over selective records that affect them without compromising security
[13:49:55] <dminuoso> Im almost confident that big mail providers do something similar
[13:50:10] <dminuoso> But really, you dont have to dot his from the server
[13:50:24] <dminuoso> you can also do this as a sort of "quarterly calendar entry" where you execute some ansible thing that does the same.
[13:51:03] <dminuoso> where perhaps you would leave old keys around for another 3 months
[13:51:09] <merpaderp> indeed
[13:51:42] <dminuoso> but you still have these permission issues, I dont want my laptop to have any token lying around that can manipulate the entirety of our nameservers
[13:52:15] <merpaderp> yea, entirety is bad, but a certain type of certain subdomain - OK
[13:52:43] <dminuoso> there's also powerdns-auth-proxy, but that's a ball of poorly written flask, but there you can do only per-zone permissions, and worst of all a singular zone can only be managed by a single user.
[13:52:47] <merpaderp> well I am now thinking, how does your gerd compare to what I have been thinking to use this far Knot DNS servers acl controls - https://www.knot-dns.cz/docs/3.1/html/configuration.html#access-control-list-acl
[13:53:02] <dminuoso> which means you're fragmenting your powerdns into a gazillion zones, but that doesnt work well if you have shared access to a zone
[13:53:31] <dminuoso> Let me take a look
[13:54:29] <merpaderp> so with that Knot acls, you can define that this particular TSIG key, can do axfr update against certain type of certain domain
[13:54:39] <merpaderp> and from only this or that IP or whole block.
[13:55:04] <merpaderp> I will be honest and admit I havent really got that update-owner-name and -match part working
[13:55:24] *** Quits: dob1 (~dob1@user/dob1) (Read error: Connection reset by peer)
[13:55:32] <dminuoso> merpaderp: In some fields it seems more flexible (you can explicitly deny, you can also talk about IP addresses), but you seem to lack the pattern match language that we have (i.e. `foo.**.bar.` or `foo.*.bar.*.quux.`)
[13:55:43] *** Joins: dob1 (~dob1@user/dob1)
[13:56:01] <merpaderp> like I said, it has sub-or-equal, which should work, but it doesnt.
[13:56:06] <dminuoso> And the ergonomics of AXFR is a bit weird I must admit. For general interaction its simpler to just quickly talk with a JSON API
[13:56:14] <merpaderp> so yea, I am puzzled now because it seems like pdns proxy auth is superior, and easier to configure
[13:56:16] <dminuoso> merpaderp: its still not the same
[13:56:31] <dminuoso> merpaderp: note there's also powerdns-auth-proxy, but that's a big ball of bad code I would not recommend to anyone.
[13:56:39] <merpaderp> noted
[13:57:45] <dminuoso> merpaderp: Okay, so after some initial looks it seems perfectly fine if AXFR is enough for. With powerdns-gerd you can do *more*, since the powerdns api exposes a lot of different functionality.
[13:58:21] <dminuoso> But our pattern language can do more, sub-or-equal is not even remotely the same
[13:58:30] <dminuoso> Because we can have glob or globstar in the *middle* of a domain name
[13:58:34] <dminuoso> Which is useful for something like:
[13:58:49] <dminuoso> `_acme-challenge.*.mail.foo.com`
[13:59:09] <merpaderp> where * can be hostnames of various mail servers?
[13:59:17] <dminuoso> Yeah
[13:59:21] <merpaderp> so they all can order a cert for themselfs
[13:59:23] <merpaderp> that is so neat
[13:59:42] <dminuoso> Our primary use case is
[14:00:04] <dminuoso> So each device and VM at our company has a particular internal name, something like `abcd1234` - a unique identifier
[14:00:14] <merpaderp> aha
[14:00:28] <dminuoso> And we have a DKIM/IPAM -> DNS automation that automatically genedates acbd1234.some.special.domain records
[14:00:42] <dminuoso> (Which are considered canonical records, and all other relating records would be CNAME to those)
[14:00:56] <dminuoso> So that's how it started
[14:01:05] <merpaderp> that sounds complex
[14:01:37] <dminuoso> merpaderp: so the key is that * expands to only a single label
[14:01:40] <dminuoso> we allow our automation to access:
[14:01:43] *** Quits: jimpop (~jimpop@user/jimpop) (Quit: leaving)
[14:01:50] <dminuoso> [A, AAAA] on *.some.special.domain.
[14:02:02] <dminuoso> But that does not give you control over say `foo.abcd1234.some.special.domain`
[14:02:20] <dminuoso> merpaderp: We've been doing automation engineering for the better part of 3 years with 5 people. :)
[14:02:21] <merpaderp> * doesnt traverse dots, you mea
[14:02:31] <dminuoso> merpaderp: if thats how you want to phrase it, sure.
[14:02:37] <dminuoso> DNS terminology uses the word "label"
[14:02:40] <merpaderp> that's how I format it in my brain
[14:02:45] <dminuoso> Thing is, labels can have dots inside them
[14:03:09] <dminuoso> there's no standardized representation format, this `foo.bar.` that we write is just some convention that is not specified anywhere.
[14:03:23] <dminuoso> ["foo" "bar"] might be more adecquate, perhaps
[14:03:33] <dminuoso> Or ["foo", "bar"] if you prefer
[14:04:06] <merpaderp> oh well
[14:04:19] <dminuoso> So in our pattern language `*` matches a single arbitrary label, and `**` greedly matches as many labels as possible.
[14:04:53] <dminuoso> this breaks the BIND convention, where * denotes arbitrary numbers of labels - but we deemed this to be okay, as this would not provoke security bugs, at worst you'd have less permission than hoped for.
[14:05:21] <merpaderp> why is bind even relevant here?
[14:05:40] <dminuoso> Some people are used to bind, so if they see `*.foo.bar.` they might thing this would match `quux.baz.foo.bar.`
[14:05:44] <dminuoso> Because that's how BIND works
[14:06:01] <merpaderp> ah, ok, that person is not me
[14:06:04] <dminuoso> :)
[14:06:14] <merpaderp> I see * and think of pcre regex
[14:06:25] <dminuoso> Well, that knowledge wouldnt really work here
[14:06:51] *** Joins: jimpop (~jimpop@user/jimpop)
[14:06:54] <dminuoso> The kleene star is followed by some set of characters or strings
[14:07:19] <dminuoso> The * here is rather a glob/globstar in the sense of say gitignore patterns
[14:07:27] <dminuoso> Or bash
[14:07:41] <dminuoso> (I borrowed the globstar term from bash in fact)
[14:08:46] <merpaderp> okay, so I guess I will grab that gerhard proxy and give it a test
[14:08:57] <merpaderp> a lot of things to automate with it we can </yoda>
[14:13:14] <dminuoso> Are you fine with building it yourself? We currently dont provide binaries
[14:16:52] <dminuoso> Or just grab the artifact from the menu to the right of https://gitlab.com/wobcom/haskell/powerdns-gerd/-/pipelines
[14:16:54] <dminuoso> :p
[14:17:30] <dminuoso> The way we do integration of everything, we dont need prebuilt binary artifacts.. so..
[15:01:01] *** Joins: Guest6792 (~vit@chello085216193138.chello.sk)
[15:06:02] *** Quits: dob1 (~dob1@user/dob1) (Ping timeout: 240 seconds)
[15:09:22] *** Joins: dob1 (~dob1@user/dob1)
[15:51:23] *** Joins: minimal (~minimal@user/minimal)
[15:54:29] <merpaderp> its first time I witness a haskell application me myself
[16:05:48] *** Quits: dob1 (~dob1@user/dob1) (Ping timeout: 240 seconds)
[16:20:13] *** Joins: dob1 (~dob1@user/dob1)
[16:22:51] *** Quits: dob1 (~dob1@user/dob1) (Client Quit)
[17:01:34] <dminuoso> It's more than likely you interacted with one indirectly, or even used one.
[17:08:27] *** Joins: dob1 (~dob1@user/dob1)
[17:09:42] *** Quits: ecdhe_ (~ecdhe@user/ecdhe) (Ping timeout: 260 seconds)
[17:35:47] <merpaderp> any famous ones?
[17:36:14] <merpaderp> isnt haskell compiler called hg or something
[17:42:13] <dminuoso> There used to be another compiler called hugs a long while ago
[17:42:23] <dminuoso> GHC is the current reference implementation
[17:43:00] <dminuoso> merpaderp: pandoc is probably the most ubiquitous userspace software you may have encountered. It's more than likely you have interacted with some kind document that was processed by pandoc.
[17:43:07] <dminuoso> Or you may have used it directly
[17:44:03] <dminuoso> And virtually any interaction (any click, any message, anything really) you may have done at facebook is processed and evaluated by a stack of Haskell software.
[17:44:20] <dminuoso> So yeah, Haskell affects billion people world wide every day!
[17:44:43] <dminuoso> But anyway
[17:45:02] <dminuoso> merpaderp: If you need any help in building gerd, Id be happy to help - maybe I can carve out a guide or perhaps just set up a CI to spit out artifacts for you.
[17:45:14] <dminuoso> The CI sort of builds static binaries that appear in the CI pipeline jobs right now
[17:45:25] <dminuoso> (statically linked for a particular use case we have right now)
[17:49:57] *** Joins: bsd4me (~usingbsd@user/bsd4me)
[17:55:40] <merpaderp> yea, no, I dont use facebook
[17:55:46] * merpaderp evades haskell like pro
[17:56:11] <merpaderp> cant I just clone repo, read INSTALL and go from there?
[18:01:39] <dminuoso> the README has a few things. the main annoyance might just be that there's some considerable compilation time
[18:01:39] *** Joins: richard_h (~richard@2406:e001:8:a900:6e62:6dff:fe05:ae29)
[18:01:52] <dminuoso> as it will build all dependencies from scratch, and GHC isnt exactly the fastest compiler in the world
[18:04:34] <dminuoso> Gotta run take care of some things, will be back later tonight or tomorrow
[18:12:14] <merpaderp> okay, take care
[18:31:52] *** Joins: ecdhe (~ecdhe@user/ecdhe)
[18:35:21] *** Joins: bitblit_ (~bitblit@gateway/tor-sasl/bitblit)
[18:35:48] *** Quits: bsd4me (~usingbsd@user/bsd4me) (Read error: Connection reset by peer)
[18:36:07] *** Joins: bsd4me (~usingbsd@user/bsd4me)
[18:36:35] *** Quits: bitblit (~bitblit@gateway/tor-sasl/bitblit) (Ping timeout: 240 seconds)
[18:38:48] *** Quits: bsd4me (~usingbsd@user/bsd4me) (Read error: Connection reset by peer)
[18:39:07] *** Joins: bsd4me (~usingbsd@user/bsd4me)
[18:40:18] *** Quits: bsd4me (~usingbsd@user/bsd4me) (Read error: Connection reset by peer)
[18:40:37] *** Joins: bsd4me (~usingbsd@user/bsd4me)
[19:01:48] *** Quits: bsd4me (~usingbsd@user/bsd4me) (Remote host closed the connection)
[19:02:07] *** Joins: bsd4me (~usingbsd@user/bsd4me)
[19:05:22] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[19:30:19] *** Quits: richard_h (~richard@2406:e001:8:a900:6e62:6dff:fe05:ae29) (Quit: Leaving.)
[19:51:15] *** Quits: minimal (~minimal@user/minimal) (Quit: Leaving)
[20:17:13] *** Quits: furrymcgee (~devuan@cgn-89-1-209-226.nc.de) (Quit: leaving)
[20:33:51] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Remote host closed the connection)
[20:39:23] *** Joins: bsd4me_ (~bsduser@user/bsd4me)
[20:40:42] *** Quits: bsd4me (~usingbsd@user/bsd4me) (Quit: Leaving)
[21:25:52] *** Joins: rgrinberg (~textual@2806:101e:7:7728:18a:215f:c191:4d5d)
[21:28:33] *** Quits: CyberTailor (~cyber@gateway/tor-sasl/cybertailor) (Quit: Konversation terminated!)
[21:38:46] *** Quits: Duchess (~Duchess@2604:3d08:1:1b:c189:b6ab:68c1:858f) (Quit: Client closed)
[21:41:11] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[21:43:16] *** Joins: Duchess (~Duchess@2604:3d08:1:1b:c189:b6ab:68c1:858f)
[21:49:03] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Remote host closed the connection)
[21:51:00] *** Quits: jotik (~J@user/jotik) ()
[21:52:27] *** Joins: jotik (~J@user/jotik)
[22:09:59] *** Quits: rgrinberg (~textual@2806:101e:7:7728:18a:215f:c191:4d5d) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:11:47] *** Quits: noarb (~noarb@user/noarb) (Read error: Connection reset by peer)
[22:14:06] *** Joins: rgrinberg (~textual@2806:101e:7:7728:18a:215f:c191:4d5d)
[22:14:40] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[22:33:44] *** Joins: noarb (~noarb@user/noarb)
[22:35:00] *** Quits: bsd4me_ (~bsduser@user/bsd4me) (Quit: Lost terminal)
[23:06:36] *** Quits: rgrinberg (~textual@2806:101e:7:7728:18a:215f:c191:4d5d) (Ping timeout: 245 seconds)
[23:08:31] *** Joins: SallyAhaj_ (SallyAhaj@user/sallyahaj)
[23:08:43] *** Quits: SallyAhaj_ (SallyAhaj@user/sallyahaj) (Remote host closed the connection)
[23:11:40] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Ping timeout: 272 seconds)
[23:45:04] *** Joins: minimal (~minimal@user/minimal)
[23:47:29] *** Joins: Tangent-Man (~Tang3nt-M@138.199.21.36)
