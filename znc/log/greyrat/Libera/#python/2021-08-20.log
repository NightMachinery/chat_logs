[00:00:15] <p-i-> Makes my testcode nice and symmetrical
[00:00:50] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[00:02:24] <aphysically> there isn't anything in standard library already to insert escapes for a specific list of characters is there? (it's easy enough to write so if not I'll just do it)
[00:02:59] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:44cf:3126:f216:a81c) (Quit: Textual IRC Client: www.textualapp.com)
[00:03:52] <SnoopJ> aphysically, do you want str.translate() ?
[00:04:08] *** Quits: ano (~weechat@user/ano) (Remote host closed the connection)
[00:04:22] *** Joins: ano (~weechat@user/ano)
[00:05:47] *** Joins: dba (uid502594@id-502594.stonehaven.irccloud.com)
[00:06:22] <cluelessperson> aphysically, could just use urllib urlencode
[00:06:43] *** Joins: Amun-Ra (~amun-ra@retro.rocks)
[00:07:26] <aphysically> translate is interesting, so I learned something new, but really would be more complicated than my own function
[00:07:34] <aphysically> I'm just implementing https://ffmpeg.org/ffmpeg-all.html#Notes-on-filtergraph-escaping
[00:07:45] <aphysically> only the first two levels since I'm not in a shell
[00:10:04] *** Joins: daevski (~daevski_@76-253-184-89.lightspeed.rlghnc.sbcglobal.net)
[00:10:12] <aphysically> just something like this should be fine https://bpa.st/BXUA
[00:10:25] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:10:26] *** Quits: weltio (~weltio@89.21.53.190) (Quit: Konversation terminated!)
[00:10:28] *** Joins: bn_work (uid268505@id-268505.highgate.irccloud.com)
[00:10:30] *** Joins: y1n (~y1n@84-115-64-177.wifi.dynamic.surfer.at)
[00:10:37] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 252 seconds)
[00:10:48] *** Joins: goldfish (~goldfish@user/goldfish)
[00:10:50] *** Quits: goldfish (~goldfish@user/goldfish) (Remote host closed the connection)
[00:11:00] *** Joins: philipp64|work (~philipp64@174.27.28.163)
[00:11:10] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[00:11:30] <Repiphany> string.replace doesn't mutate in-place
[00:11:52] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[00:12:23] <aphysically> right, that's why I'm returning it, to use the returned value
[00:12:32] <aphysically> or have I made some other mistake?
[00:13:00] <Repiphany> Try running it
[00:13:04] *** Lord_of_Life_ is now known as Lord_of_Life
[00:13:22] *** Quits: nergar (~Nergar@177.225.152.13) (Ping timeout: 252 seconds)
[00:14:07] <stealth_> aphysically, `new_var = 'abc'.replace(...); return new_var`
[00:14:10] *** Quits: pragmaticenigma (~pragmatic@user/pragmaticenigma) (Quit: Leaving)
[00:14:28] <aphysically> oh!!!
[00:14:34] <aphysically> right
[00:14:38] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[00:14:42] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Read error: Connection reset by peer)
[00:15:39] <Repiphany> You don't need to loop using str.maketrans and str.translate
[00:16:16] *** Quits: CrypticSquared (~CrypticS_@user/crypticsquared) (Read error: Connection reset by peer)
[00:16:29] *** Quits: Zeturic (~Orimendix@50-25-46-156.krmtcmta02.res.dyn.suddenlink.net) (Ping timeout: 268 seconds)
[00:16:31] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[00:16:53] <SnoopJ> aphysically, why would it be more complicated?
[00:17:07] *** Joins: petemc (~pete@vps-80fad31a.vps.ovh.net)
[00:17:29] <SnoopJ> you feed translate() a table that maps length-one strings to arbitrary-length strings
[00:17:46] <SnoopJ> (or to None, which deletes that element)
[00:17:58] *** Quits: besnn (~besnn@user/besnn) (Quit: Leaving)
[00:18:05] *** Joins: CrypticSquared (~CrypticS_@user/crypticsquared)
[00:18:09] *** Joins: BlackBishop (dexter@user/blackbishop)
[00:18:20] <aphysically> don't I have to construct the dictionary, then maketrans, then translate instead of one loop, I don't know maybe I'm not thinking of a pythonic way to do the construction
[00:18:38] *** Parts: BlackBishop (dexter@user/blackbishop) ()
[00:18:43] *** Joins: BlackBishop (dexter@user/blackbishop)
[00:19:30] * aphysically looks up dict comprehensions
[00:19:45] <SnoopJ> aphysically, sorry, I'm not understanding what it is you don't like about building a table with maketrans() and then calling translate()
[00:20:05] *** Joins: Pickchea (~private@user/pickchea)
[00:21:01] *** Quits: RougeR (~rougex250@user/rouger) (Ping timeout: 258 seconds)
[00:21:04] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 252 seconds)
[00:21:16] *** Quits: BlackBishop (dexter@user/blackbishop) (Client Quit)
[00:21:27] *** Joins: BlackBishop (dexter@user/blackbishop)
[00:22:34] *** Joins: dimbag (~Couture@pppoe247h3.ppp.kmv.ru)
[00:23:29] <aphysically> https://bpa.st/7TFA
[00:24:14] *** Joins: nergar (~Nergar@177.225.152.13)
[00:24:33] <cluelessperson> aphysically, do you want to translate everything in the same way?
[00:24:33] *** Quits: mattil (~mattil@87-92-63-124.bb.dnainternet.fi) (Quit: Leaving)
[00:24:40] <cluelessperson> escaping right?
[00:24:44] <aphysically> yeah
[00:25:57] <aphysically> ah, can't use it like this, do indeed have to call translate
[00:26:34] *** Quits: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 252 seconds)
[00:26:53] *** Quits: mei (~mei@user/mei) (Read error: Connection reset by peer)
[00:27:46] <aphysically> good lord I can barely write basic functions today https://bpa.st/BCFA
[00:28:13] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0)
[00:29:23] *** Joins: cloudbender (~cloudbend@user/cloudbender)
[00:30:04] *** Joins: piscvau (~odile@alyon-652-1-90-155.w90-42.abo.wanadoo.fr)
[00:31:27] *** Quits: cypris (uid507362@user/cypris) (Quit: Connection closed for inactivity)
[00:32:20] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:33:13] *** Quits: puff (~user@s0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[00:33:58] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[00:34:15] <piscvau> hello I a importing an sql dump in a database using python subprocess.run. The subprocess fails with acces denied whereas the same arguments used in mysql command does not fail. The code is here https://bpa.st/XGCA. Is seems there is an extra spce in the user name going to mysql server. ANy idea?
[00:35:41] *** Joins: dhill (~dhill@modemcable103.217-80-70.mc.videotron.ca)
[00:35:48] <aphysically> oooo codecs module is cool but beyond what I need
[00:36:01] <SnoopJ> aphysically, there isn't a semantic difference between these in this case (there might be if your translation keys and targets overlapped, replace() wouldn't be suitable for that). The first one does all the work itself, the second one lets the runtime do all the work in one pass
[00:36:10] <jabberwock> https://docs.python.org/dev/library/shlex.html#shlex.quote maybe?
[00:36:22] <jabberwock> piscvau, ^^
[00:36:26] <nedbat> piscvau: change f'-u {user}',  to  '-u', user,
[00:36:33] <jabberwock> even if that's not the solution - I see shell injection potential in your code
[00:36:39] *** Joins: ice9 (~ice9@user/ice9)
[00:36:47] <nedbat> piscvau: or take the space out:  f'-u{user}'
[00:37:09] *** Quits: nabuco (~skeksil@139.47.69.197) (Quit: leaving)
[00:37:13] <aphysically> SnoopJ: oh that's a good point about overlap
[00:37:14] <SnoopJ> aphysically, if you want to think about it in terms of complexity, the middle one is 2 scans of the string (2N operations), the top one is N scans (NÂ² operations)
[00:37:54] <jabberwock> I love that you think in code complexity
[00:38:27] <SnoopJ> oh, sorry, I conflated chars and string. If string is length N, chars is length M, the top one is N*M work, the bottom is N+M work
[00:39:05] <SnoopJ> but it's just kind nicer to express what you want done than *how* you want it done, and translate() does a nice job expressing "I want these thingies turned into those thingies"
[00:39:21] *** Joins: wakeup (~wakeup@user/wakeup)
[00:39:31] <wakeup> let's say I have a list A. What would be the way to iterate only the last element of A?
[00:39:47] <wakeup> for example, if A = [1, 2, 3], I want just one iteration in the for loop and that should be 3
[00:39:57] <wakeup> i.e. the variable in the loop should just take the value 3
[00:39:59] *** Joins: Adoi (~Adoi@user/adoi)
[00:40:09] <aphysically> my first one is really just wrong, I should have looped through the string, but isn't that still M*N
[00:40:10] <aphysically> like uhh
[00:40:25] <Repiphany> wakeup: A[-1:]
[00:40:26] <grym> for x in mylist[-1:] ?
[00:40:27] <stealth_> wakeup, `A[-1]`
[00:40:41] <grym> stealth_: no, that's the element itself, not a list of one thing
[00:40:50] <grym> 'list'
[00:40:51] <grym> slice.
[00:41:05] <SnoopJ> aphysically, replace() does that loop for you, but usually in a faster language.
[00:41:30] <aphysically> what I mean by 'just wrong' is that in my intended use case I *did* have overlap - \ is one of the characters I need to escape
[00:41:41] <aphysically> for c in string, if c in chars: c=c+\, something like this is still M*N isn't it?
[00:41:52] <SnoopJ> aphysically, can you explain what you don't like about using translate()?
[00:41:53] <wakeup> thanks
[00:41:58] *** Quits: y1n (~y1n@84-115-64-177.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[00:42:01] <aphysically> I *did* use translate, you convinced me
[00:42:03] <aphysically> earlier
[00:42:09] <SnoopJ> Then I'm not sure why you're talking about loops at all
[00:42:24] <aphysically> I'm wondering what translate is doing that's not M*N
[00:42:28] <SnoopJ> other than building the translation table, which I'd probably do on a separate line so I could give it a nice name
[00:42:56] <aphysically> oh! because it actually uses a table instead of looping through the chars like my pseudocode just now
[00:42:58] <stealth_> grym, what would be the point of using a for loop if all you want is the last value
[00:43:06] <SnoopJ> yes, the table lookups are O(1)
[00:43:11] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[00:43:17] *** Quits: piscvau (~odile@alyon-652-1-90-155.w90-42.abo.wanadoo.fr) (Quit: Leaving)
[00:43:22] <aphysically> yes I see now, I was thinking it's looping through but it doesn't because it's a table
[00:43:28] <grym> stealth_: no idea! ask wakeup
[00:43:30] <SnoopJ> it *is* looping on the input
[00:43:39] <SnoopJ> but it doesn't do *another* loop for each item
[00:43:40] *** Quits: daoudr (~daoudr@2a02:1205:c681:1650:c745:6b49:e157:f17c) (Ping timeout: 240 seconds)
[00:43:49] <aphysically> right like my pseudocode but with table instead of item loop
[00:44:00] *** Quits: wakeup (~wakeup@user/wakeup) (Client Quit)
[00:44:04] <aphysically> for c in string, if c in chars: c=c+\
[00:44:20] <aphysically> this but not for c in chars, a table
[00:44:26] <SnoopJ> that's still N*M
[00:44:30] <SnoopJ> `in` does a scan
[00:44:42] <aphysically> yes
[00:45:40] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 240 seconds)
[00:46:58] <aphysically> for c in string, c=dict[c] where dict returns key by default
[00:47:01] *** Quits: computeiro (~Wender@189.15.148.197) (Remote host closed the connection)
[00:47:31] <SnoopJ> essentially yes
[00:49:00] <SnoopJ> sometimes you'll see cases where the "let the runtime do it" spelling lets the runtime perform optimizations because it knows what the user wanted. If you write the "how" yourself, it just has to do whatever you told it about. Not sure if there are any optimizations in translate() though
[00:49:50] <SnoopJ> ah, there is a fast path for ASCII -> ASCII apparently
[00:50:09] *** Joins: audiobirb (~audio@2603-8081-1801-3bb5-e83e-f8c6-9aa2-28bc.res6.spectrum.com)
[00:50:14] <aphysically> yeah,  same idea as when using numpy to try to find the highest level task to do what you really want so it can use whatever optimized internal linar algebra libraries and such it has
[00:50:36] <aphysically> highest level routine I mean
[00:50:54] <SnoopJ> same idea of moving (potentially) hot code out of the slow loop yea
[00:50:57] <aphysically> but there's also the readable thing you mentioned: translate is spelling out what I actually want
[00:51:08] <SnoopJ> yea, it expresses *what* you want done
[00:52:16] <aphysically> can you even make a defaultdict return a key
[00:52:22] <aphysically> let's find out!
[00:53:22] <aphysically> can subclass dictionary and implement __missing__ apparently
[00:53:33] <bjs> aphysically: no, but you can make your own dict with __missing__
[00:53:46] <bjs> but it's "ugh" to do :)
[00:54:01] *** Joins: shibboleth (~shibbolet@user/shibboleth)
[00:54:15] <grym> https://treyhunner.com/2019/04/why-you-shouldnt-inherit-from-list-and-dict-in-python/ is a list of footguns
[00:54:59] <aphysically> this filtergraph escaping is a bit silly https://ffmpeg.org/ffmpeg-all.html#Notes-on-filtergraph-escaping but not the most silly escaping
[00:55:28] <grym> ffmpeg is on my list of "roll face on keyboard and hit enter until it works" CLI APIs
[00:56:07] <aphysically> when I had a really really portable tmux config I somehow ended up with some strings under 4 levels of escaping after which I gave up on the portability
[00:56:45] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0) (Quit: Leaving)
[00:58:16] *** Joins: mat001 (~mat001@246.sub-174-194-131.myvzw.com)
[00:59:05] *** Joins: aead (~aead@pool-96-232-187-142.nycmny.fios.verizon.net)
[00:59:09] <SnoopJ> aphysically, the idiomatic spelling of "give me the value in this dict associated with this key, or the key itself" is `d.get(k, k)`
[01:00:07] <aphysically> ah
[01:00:42] *** Quits: aead (~aead@pool-96-232-187-142.nycmny.fios.verizon.net) (Changing host)
[01:00:42] *** Joins: aead (~aead@user/aead)
[01:01:55] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[01:02:30] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Quit: Bridge terminating on SIGTERM)
[01:03:40] *** Quits: mat001 (~mat001@246.sub-174-194-131.myvzw.com) (Remote host closed the connection)
[01:04:06] *** Joins: cdown (~cdown@82-69-42-66.dsl.in-addr.zen.co.uk)
[01:04:20] *** Joins: d0ku (~d0ku@178.43.198.70.ipv4.supernova.orange.pl)
[01:06:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 248 seconds)
[01:08:16] *** Joins: mat001 (~mat001@246.sub-174-194-131.myvzw.com)
[01:11:34] *** Parts: xx (~xx@user/xx) ()
[01:12:34] *** Joins: xMopx (~xMopx-lib@192.95.23.134)
[01:13:32] *** Quits: cloudbender (~cloudbend@user/cloudbender) (Ping timeout: 258 seconds)
[01:14:00] <xMopx> boy do i love finding bad code i wrote a long time ago
[01:14:07] <xMopx> width = min(width, x_width if x_width > 0 else 99999)
[01:15:29] <grym> obviously, you meant float.max there
[01:15:53] *** Joins: loadedanvils (uid128751@id-128751.highgate.irccloud.com)
[01:16:46] <loadedanvils> hey all, does anyone have a preferred tool for parsing a binary data file in python? Iâve got basically a bunch of C structs to read (but I donât know all the fields in it) and I would like to explore one.
[01:17:11] <SnoopJ> loadedanvils, the `struct` module may be of immediate interest to you
[01:17:13] <loadedanvils> exploring a binary file, rather
[01:17:35] <loadedanvils> Iâve used it before, the syntax for it with HHHX is a bit cumbersome
[01:17:52] <loadedanvils> and in particularly, I donât know the full structure of the data (and some of it is unaligned)
[01:17:54] <SnoopJ> loadedanvils, for "exploring" I usually reach for a hex editor
[01:18:14] *** Joins: korros (korros@2600:3c03::f03c:92ff:febf:689a)
[01:18:37] *** birb is now known as erica
[01:18:46] <korros> .
[01:20:02] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0)
[01:20:59] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0) (Client Quit)
[01:21:06] *** Joins: matsaman (~matsaman@user/matsaman)
[01:21:13] *** Quits: gloomy_desktop (~ldorigo@81.161.149.37) (Ping timeout: 248 seconds)
[01:22:08] *** Quits: c10l (~c10l@89.34.167.207) (Quit: The Lounge - https://thelounge.chat)
[01:22:45] *** Joins: Enitin (~Enitin@82.102.22.84)
[01:22:55] *** Quits: Nact (~l@host-85-27-122-107.dynamic.voo.be) (Quit: Konversation terminated!)
[01:23:20] *** Quits: mat001 (~mat001@246.sub-174-194-131.myvzw.com) (Remote host closed the connection)
[01:23:20] *** Joins: ice99 (~ice9@user/ice9)
[01:24:09] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Quit: FinnElija)
[01:24:19] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[01:25:58] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 252 seconds)
[01:26:35] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: shgvbvri)
[01:27:20] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 258 seconds)
[01:27:32] *** Joins: Enitin (~Enitin@82.102.22.85)
[01:31:09] *** Joins: mat001 (~mat001@246.sub-174-194-131.myvzw.com)
[01:31:56] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 258 seconds)
[01:32:32] *** Joins: Enitin (~Enitin@82.102.22.84)
[01:32:48] *** Joins: fanis30 (~fanis30@adsl-11.37.6.3.tellas.gr)
[01:33:15] *** Joins: ssbr (~ssbr@python/site-packages/ssbr)
[01:33:16] *** Joins: ice9 (~ice9@user/ice9)
[01:33:50] *** Joins: odoood (~odoood@2601:c8:c003:a550::8)
[01:34:04] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0)
[01:34:09] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[01:34:28] *** Quits: aead (~aead@user/aead) (Quit: aead)
[01:34:53] *** Quits: ogis (~Android@p2037202-ipngn201011tokaisakaetozai.aichi.ocn.ne.jp) (Quit: -a- Connection Timed Out)
[01:35:00] *** Quits: ice99 (~ice9@user/ice9) (Ping timeout: 258 seconds)
[01:35:06] *** Joins: ogis (~Android@p2037202-ipngn201011tokaisakaetozai.aichi.ocn.ne.jp)
[01:36:39] *** Joins: sparse (~Guest71@ec2-54-156-82-79.compute-1.amazonaws.com)
[01:36:53] *** naan is now known as Naan
[01:37:47] <sparse> Hi everyone - I'm fairly new to the python ecosystem and very new to irc (please let me know if I'm doing something wrong or breaking etiquette)
[01:37:55] <loadedanvils> welcome, sparse
[01:38:20] <grym> sparse: howdy
[01:38:21] <mefistofeles> sparse: hey, welcome
[01:38:31] <mefistofeles> sparse: nevermind grym, it's a bot
[01:38:49] <sparse> thanks!
[01:39:16] <sparse> i'm hoping to find a tool that can help me audit my flask dependencies and come up with a list of deps that aren't actually being used in my project, has anyone used anything like this before?
[01:39:29] <SnoopJ> mefistofeles, why do you say that?
[01:39:48] <mefistofeles> SnoopJ: bad jk
[01:39:56] *** Quits: fanis30 (~fanis30@adsl-11.37.6.3.tellas.gr) (Quit: Leaving)
[01:40:07] *** Joins: hanaan (~naan@user/naan)
[01:40:15] *** Quits: darksun (~darksun@user/darksun) (Remote host closed the connection)
[01:40:33] *** Quits: Naan (~Naan@user/naan) (Quit: Leaving)
[01:40:49] <mefistofeles> SnoopJ: maybe pip-tools and specifically pip-sync can help, specially if you are running this inside a virtualenv
[01:40:55] <mefistofeles> err, sparse â
[01:41:10] <p-i-> If I 'except Exception as e: print(e)' I get nothing, even though print_exc clearly shows httpcore.ReadTimeout
[01:41:12] *** hanaan is now known as Naan
[01:41:16] <p-i-> How can I recover httpcore.ReadTimeout?
[01:41:19] <loadedanvils> I suppose you could use grep to search for all âimport *â or âfrom * import *â statements and cross correlate them with your pip freeze list
[01:41:22] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.1)
[01:41:49] <foo> One of my most exciting refactor moments is renaming context to ctx throughout my code, heh.
[01:41:58] <SnoopJ> p-i-, are you sure the exception is passing through that handler?
[01:42:32] <p-i-> sparse: have you looked at poetry? `poetry show --list` shows you your deps-tree, and you can `poetry remove foo` to prune dups.
[01:42:47] <loadedanvils> oh thatâs probably a good idea
[01:43:10] <grym> https://pypi.org/project/pip-check-reqs/  seems maintained
[01:43:15] *** Joins: mohabaks (~mohabaks@gateway/tor-sasl/mohabaks)
[01:43:44] <p-i-> SnoopJ: 'except Exception as e' catches everything I think. And I'm doing `print('ERROR', e)` and it just prints ERROR. So it's catching it.
[01:43:50] *** Joins: aead (~aead@user/aead)
[01:44:07] <SnoopJ> p-i-, try printing repr(e)
[01:44:19] *** Quits: aead (~aead@user/aead) (Client Quit)
[01:44:27] *** Quits: supakeen (~user@python/site-packages/supakeen) (Remote host closed the connection)
[01:44:51] *** Joins: supakeen (~user@python/site-packages/supakeen)
[01:45:09] <p-i-> Yes! That nailed it.
[01:45:10] <p-i-> âï¸ from proxy # 6 : ProxyError('')
[01:45:46] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 252 seconds)
[01:46:07] *** Joins: aead (~aead@user/aead)
[01:46:34] *** Joins: Enitin (~Enitin@82.102.22.86)
[01:46:52] *** Quits: rndm (~rndm@143.59.164.79) (Ping timeout: 252 seconds)
[01:47:10] *** Quits: molt (~molt@79.140.150.21) (Ping timeout: 240 seconds)
[01:48:01] <sparse> grym: thanks i'll check it out
[01:48:05] *** Quits: kmh_ (~kmh@p5dcc62e1.dip0.t-ipconnect.de) (Quit: Leaving)
[01:48:39] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[01:48:53] *** Joins: stevieh (~skrodzki@p2e584735.dip0.t-ipconnect.de)
[01:48:58] *** Quits: gambl0re (~gambl0re@104.247.245.205) (Ping timeout: 268 seconds)
[01:49:18] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[01:50:55] *** Quits: aead (~aead@user/aead) (Client Quit)
[01:51:10] <jmcantrell> Why does this work on mypy-play, but I get `NameError: name 'MyClass' is not defined` locally? https://mypy-play.net/?mypy=latest&python=3.9&gist=67cdf53a37ce6ede4f0a6e50dcc25568
[01:51:10] *** Joins: aead (~aead@user/aead)
[01:51:40] *** Quits: rakoon (~rakoon@2a02:2149:824f:5900:4c94:ca1:e2f4:e8ad) (Ping timeout: 240 seconds)
[01:52:16] <jinsun> jmcantrell: maybe because mypy-play is running mypy and you are running python
[01:52:19] <jmcantrell> It makes sense that I get a NameError, and I'm curious how I can do this kind of thing with mypy, but I'm also not sure why mypy-play seems ok with it.
[01:52:21] *** Joins: pycurious (~Adium@user/pycurious)
[01:52:27] *** Quits: aead (~aead@user/aead) (Client Quit)
[01:52:47] *** Joins: rakoon (~rakoon@2a02:2149:824f:5900:ec48:bb4a:e4d8:a4f6)
[01:52:55] *** Joins: aead (~aead@user/aead)
[01:53:04] <jmcantrell> ah, yeah, sure enough.
[01:53:21] <jinsun> use "MyClass" instead of MyClass inside the class definition
[01:53:40] <jinsun> or do `from __future__ import annotations` at the top of your file
[01:53:41] <jmcantrell> jinsun: thanks
[01:54:35] *** Joins: gambl0re (~gambl0re@104.247.245.205)
[01:54:53] *** Quits: stevieh (~skrodzki@p2e584735.dip0.t-ipconnect.de) (Quit: Leaving.)
[01:55:04] *** Quits: jokoon (~eio@2a01:e0a:542:b20:3da2:ca44:66c6:d0f8) (Quit: Leaving)
[01:55:37] *** Quits: ogis (~Android@p2037202-ipngn201011tokaisakaetozai.aichi.ocn.ne.jp) (Quit: -a- Connection Timed Out)
[01:58:34] *** Quits: mat001 (~mat001@246.sub-174-194-131.myvzw.com) (Remote host closed the connection)
[01:58:46] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[01:59:28] *** Joins: i0e (~is0ke3@user/is0ke3)
[01:59:39] *** Joins: ogis (~Android@p2037202-ipngn201011tokaisakaetozai.aichi.ocn.ne.jp)
[01:59:55] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 258 seconds)
[02:00:04] *** Quits: trace1918 (~trace1918@94-137-125-182.customers.ownit.se) (Ping timeout: 268 seconds)
[02:00:25] *** lukedashjr is now known as luke-jr
[02:00:29] *** Quits: spithash (~spithash@user/spithash) (Ping timeout: 244 seconds)
[02:01:00] *** Quits: Aminda (~sid12355@Feneas/Mikaela) (Ping timeout: 244 seconds)
[02:01:23] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzzâ¦)
[02:02:26] *** Joins: spithash (~spithash@user/spithash)
[02:02:59] *** Joins: Aminda (~sid12355@Feneas/Mikaela)
[02:03:34] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[02:04:31] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 258 seconds)
[02:05:10] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[02:05:58] *** Joins: mavhq (~quassel@mapp-14-b2-v4wan-161519-cust401.vm15.cable.virginm.net)
[02:07:37] *** Joins: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it)
[02:07:40] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 240 seconds)
[02:07:48] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[02:07:55] *** lukedashjr is now known as luke-jr
[02:08:45] *** Quits: mohabaks (~mohabaks@gateway/tor-sasl/mohabaks) (Ping timeout: 244 seconds)
[02:09:14] *** Joins: todda7 (~torstein@18.red-80-32-216.staticip.rima-tde.net)
[02:10:10] *** Quits: rakoon (~rakoon@2a02:2149:824f:5900:ec48:bb4a:e4d8:a4f6) (Ping timeout: 240 seconds)
[02:10:24] *** Joins: Ivyy (~Ivyy@2001:a61:135b:5001:5339:b191:4d7f:4dd7)
[02:10:50] *** Joins: mohabaks (~mohabaks@gateway/tor-sasl/mohabaks)
[02:11:06] *** Quits: Barones (~Barones@2804:48dc:8500:0:50d:e6a:15b7:131f) (Quit: Leaving)
[02:12:16] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Quit: WeeChat 3.2)
[02:13:56] *** Quits: kindablue (znc@irc.tpurist.com) (Quit: System Rebooting..)
[02:15:02] *** Joins: LSync (~ls@user/deepspace-link)
[02:17:23] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Quit: shibboleth)
[02:20:25] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 252 seconds)
[02:21:09] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[02:21:11] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[02:21:29] *** Joins: Enitin (~Enitin@82.102.22.85)
[02:21:34] <df_data> Hi all, I have this code https://bpa.st/DJUA it compares values in on csv and saves a new csv with the matched value but CodeTT5 for some matches get saved as CodeTT6 anyone know what I may be doing wrong?
[02:22:00] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[02:22:05] <df_data> Only some CodeTT5 values tho not all of them.
[02:22:37] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 252 seconds)
[02:22:41] <grym> df_data: repasted for you https://bpa.st/UNDQ
[02:23:21] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[02:24:03] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[02:25:06] *** Quits: gloin (~gloin@user/gloin) (Read error: Connection reset by peer)
[02:25:18] *** Joins: gloin (~gloin@user/gloin)
[02:26:13] *** LSync is now known as bcast
[02:27:20] <df_data> CODETT6 doesnât actually exist in my df
[02:27:41] *** Quits: Ivyy (~Ivyy@2001:a61:135b:5001:5339:b191:4d7f:4dd7) (Remote host closed the connection)
[02:28:00] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Remote host closed the connection)
[02:28:08] <df_data> I originally never had it in my list because it would just be blank in the new csv so the record would be saved but not the col value it matched on
[02:28:25] *** Joins: c10l (~c10l@89.34.167.207)
[02:28:39] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:29:13] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 252 seconds)
[02:32:31] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 252 seconds)
[02:33:04] *** Quits: cedric (~cedric@2a01:cb11:867:c200:9428:858b:ae17:fcc8) (Quit: Konversation terminated!)
[02:33:10] *** Quits: wilz (~michel@modemcable036.177-131-66.mc.videotron.ca) (Ping timeout: 240 seconds)
[02:33:31] <AhmedAmerican> here's my tree --> https://bpa.st/P3SA now am trying to save into `results` folder using `..results/` but i getting `FileNotFoundError`
[02:33:33] <AhmedAmerican> OS: Windows
[02:34:12] *** Joins: Barones (~Barones@2804:7f3:8987:a56:1904:b84d:d454:b1fa)
[02:34:53] *** Quits: ogis (~Android@p2037202-ipngn201011tokaisakaetozai.aichi.ocn.ne.jp) (Quit: -a- Connection Timed Out)
[02:35:10] *** Joins: ogis (~Android@p2037202-ipngn201011tokaisakaetozai.aichi.ocn.ne.jp)
[02:36:45] <jinsun> df_data: 1) use black to format the code and use names that actually describe what the value is so that it is easier to read yourr code
[02:36:51] <jinsun> df_data: 2) 2) your problem is probably the line `df2['Location'] = Location_list2`
[02:36:57] *** Quits: rany (~rany@user/rany) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[02:37:02] <AhmedAmerican> need to mention that am trying to access the parent from cnkisc.py` using  `../` but getting`[Errno 2] No such file or directory: '../results/HWJS202102011.json'`
[02:37:10] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[02:37:10] *** Joins: rany (~rany@user/rany)
[02:37:30] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Remote host closed the connection)
[02:37:41] *** Quits: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 268 seconds)
[02:37:46] <jinsun> df_data: looks like that overwrites CodeTT5 with CodeTT6 when the next iteration of the loop happens
[02:39:17] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[02:39:28] *** Joins: dontyouloveshort (~julius@2a02:8108:8100:18c4:3d26:df8c:7070:d838)
[02:39:29] <dontyouloveshort> hi
[02:39:43] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[02:39:52] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Quit: gildasio)
[02:40:10] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 268 seconds)
[02:40:26] <dontyouloveshort> im in a python3 virtual env and when running "pip list" i get a list of dependencies, none of which is mariadb. but when running "pip install mariadb" it errors with: MariaDB Connector/Python requires MariaDB Connector/C >= 3.2.4, found version 3.1.14
[02:40:35] <jinsun> AhmedAmerican: "../results" will try to go back from os.getcwd(), not the folder where cnkisc.py is saved, you probably want `pathlib.Path(__file__).parent.joinpath("results", "HWJS202102011.json")`
[02:40:47] <dontyouloveshort> i installed mariadb with pip in another virtualenv just a few days ago
[02:41:17] <grym> dontyouloveshort: thatvenv/bin/python -m pip list
[02:41:30] <grym> any different?
[02:41:33] *** Quits: todda7 (~torstein@18.red-80-32-216.staticip.rima-tde.net) (Remote host closed the connection)
[02:41:42] *** Quits: Cyp (~cyp@192038129116.mbb.telenor.dk) (Ping timeout: 258 seconds)
[02:41:57] *** Quits: Sheilong (uid293653@id-293653.charlton.irccloud.com) ()
[02:42:01] <cluelessperson> dontyouloveshort, I think that suggests the system installed version of mariadb is older than expected.
[02:42:01] *** Quits: rany (~rany@user/rany) (Client Quit)
[02:42:05] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[02:42:15] <cluelessperson> dontyouloveshort, and perhaps the python package has updated to expect the newer version?
[02:42:18] <dontyouloveshort> grym, no its the same list, and: venv3/bin/python -m pip list|grep mariadb    outputs nothing
[02:43:13] *** Joins: rany (~rany@user/rany)
[02:43:18] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: shgvbvri)
[02:43:27] <dontyouloveshort> cluelessperson, mariadb-server is already the newest version (1:10.3.31-0ubuntu0.20.04.1)        thats pretty recent
[02:43:31] *** Quits: jean-luc (~gryster@104.244.73.251) (Remote host closed the connection)
[02:43:41] <BtbN> Try an older version of the connector
[02:43:51] <dontyouloveshort> output from apt update && apt install mariadb-server
[02:44:06] <dontyouloveshort> BtbN, the connector gets pulled in when running pip install mariadb
[02:44:18] <BtbN> yes, so? Install an older version of it.
[02:44:23] <cluelessperson> dontyouloveshort, well if pip list isn't showing it, it's probably not installed, so:   pip install mariadb   ?
[02:44:58] *** Quits: syrius (syrius@titan.stormtek.net) (Remote host closed the connection)
[02:45:10] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 252 seconds)
[02:45:34] <dontyouloveshort> cluelessperson, that shows the above error with the version conflict
[02:45:37] *** Joins: wilz (~wilz@modemcable036.177-131-66.mc.videotron.ca)
[02:45:43] *** Quits: sparse (~Guest71@ec2-54-156-82-79.compute-1.amazonaws.com) (Quit: Client closed)
[02:45:47] *** Joins: MrAlexBailey (~Alex@104-11-73-100.lightspeed.tukrga.sbcglobal.net)
[02:46:08] <cluelessperson> dontyouloveshort, I'd say delete the virtual env and recreate it
[02:46:33] *** Quits: cth (~Cthulchu@213.174.21.101) (Ping timeout: 248 seconds)
[02:46:36] *** Joins: todda7 (~torstein@18.red-80-32-216.staticip.rima-tde.net)
[02:46:40] *** Quits: odoood (~odoood@2601:c8:c003:a550::8) (Ping timeout: 240 seconds)
[02:47:25] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[02:47:26] *** Quits: mohabaks (~mohabaks@gateway/tor-sasl/mohabaks) (Quit: WeeChat 3.2)
[02:48:31] <dontyouloveshort> ah ok, with now i see it.  the new project tries to install mariadb-1.1.0 but just a few days ago i installed mariadb-1.0.7 in the other project
[02:49:47] *** Joins: masoudd_ (~masoudd@user/masoudd)
[02:50:07] *** Quits: qlixed (~qlixed@181.45.80.239) (Ping timeout: 252 seconds)
[02:50:14] <dontyouloveshort> althoug even with a fresh venv it throws the same error:  MariaDB Connector/Python requires MariaDB Connector/C >= 3.2.4, found version 3.1.14           but running "pip install mariadb==1.0.7 works
[02:50:23] <aphysically>     print(issubclass(type(futures[-1]), (collections.MutableSequence, collections.MutableSet, collections.MutableMapping)))
[02:50:26] <aphysically> false
[02:50:27] <dontyouloveshort> maybe the install process for 1.1.0 is faulty?
[02:50:39] <aphysically> surly this is where I messed up when I was appending futures to multiple things since it made copies
[02:50:55] <bjs> aphysically: what made copies?
[02:51:13] *** Quits: rubion (~rubion@cpc124306-ayle4-2-0-cust188.15-2.cable.virginm.net) (Ping timeout: 252 seconds)
[02:51:22] <aphysically> I haven't remade the testcase yet, I was just about to start doing it and I went to check if future was mutable
[02:51:36] <df_data> @jinsun: but CODETT6 doesnât exist in the CSV at all.
[02:51:37] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Quit: quit)
[02:51:42] <bjs> aphysically: I mean a Future is not a Sequence or a Set or a Mapping so it wouldn't be a mutable one of those either
[02:52:04] <df_data> In my main dataframe
[02:52:40] <bjs> aphysically: a Future object is clearly mutable though, it has a .set_result() method (at least the common Future classes have something similar)
[02:52:43] <jinsun> df_data: okay it might not have been there originally, but you put it there when your code runs
[02:52:53] <aphysically> to loop around to a language question
[02:53:03] *** Joins: odoood (~odoood@c-73-184-143-53.hsd1.ga.comcast.net)
[02:53:03] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[02:53:25] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 252 seconds)
[02:53:31] <aphysically> if I do mystring = 'hi' and mylist=[] and mylist.append(mystring) then mystring = 'bye' then print(mylist)
[02:53:50] <aphysically> it will print the list with hi in it, but at what point does a new string get made
[02:54:01] <aphysically> does it happen when I set bye, or when I appended to the list
[02:54:02] <bjs> aphysically: when you did the assignment
[02:54:10] <df_data> So the list may be adding count for it? Why would it do that? @jinsun thanks for helping
[02:54:17] <jinsun> df_data: when you do `df2['Location'] = Location_list2` that Location_list2 will be CODETT6 for one iteration
[02:54:21] <bjs> aphysically: well when you append()ed the string didn't exist yet, you hadn't got to that line
[02:54:52] <aphysically> sorry I should have pasted it, it existed (first line is mystring = 'hi')
[02:55:01] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Quit: Leaving)
[02:55:01] *** Joins: Warped (~Warped@user/warped)
[02:55:16] <bjs> aphysically: well okay well 'hi' exists when you do the assignment
[02:55:16] *** Quits: odoood (~odoood@c-73-184-143-53.hsd1.ga.comcast.net) (Remote host closed the connection)
[02:55:22] <bjs> and 'bye' exists when you do the next assignment
[02:55:29] *** Quits: c10l (~c10l@89.34.167.207) (Quit: The Lounge - https://thelounge.chat)
[02:55:37] *** Quits: ogis (~Android@p2037202-ipngn201011tokaisakaetozai.aichi.ocn.ne.jp) (Quit: -a- Connection Timed Out)
[02:55:41] *** Joins: odoood (~odoood@2601:c8:c003:a550::8)
[02:55:42] <bjs> (when you said "new string" I assumed you meant the "bye" one, that was my fault, I misunderstood.)
[02:55:48] *** Joins: ogis (~Android@p2037202-ipngn201011tokaisakaetozai.aichi.ocn.ne.jp)
[02:56:09] <aphysically> so only one copy of 'hi' exists after the appending?
[02:56:17] <bjs> aphysically: copy?
[02:56:20] *** Joins: kindablue (znc@2001:19f0:6001:175a:dedb:79f4:38d:5b35)
[02:56:40] *** Quits: BigShip (~BigShip@user/bigship) (Ping timeout: 240 seconds)
[02:57:02] <bjs> There is no copying in this code, there is 1 'hi' object and 1 'bye' object
[02:57:18] *** Joins: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[02:57:23] <bjs> the 'hi' object (or if you want, a reference to it) was put into the list
[02:57:26] *** Quits: WarpedAI (~Warped@user/warped) (Ping timeout: 256 seconds)
[02:57:47] <bjs> and the `mystring` variable just switches between which string it refers to
[02:58:25] *** Joins: BigShip (~BigShip@user/bigship)
[02:59:09] <aphysically> yeah okay
[02:59:22] <aphysically> let me work on trying to recreate whatever was going wrong last night
[02:59:54] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 250 seconds)
[03:01:39] *** Joins: y1n (~y1n@84-115-64-187.wifi.dynamic.surfer.at)
[03:02:14] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[03:02:21] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:03:36] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:04:24] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.2)
[03:04:40] *** Quits: Barones (~Barones@2804:7f3:8987:a56:1904:b84d:d454:b1fa) (Ping timeout: 240 seconds)
[03:07:32] *** Joins: c10l (~c10l@89.34.167.207)
[03:08:48] *** Joins: m1n10n (georgecloo@cpe-76-184-204-251.tx.res.rr.com)
[03:09:04] *** Joins: comradeCrow (~comradeCr@cpe-172-116-137-199.socal.res.rr.com)
[03:11:22] <foo> What's the python package to organize my imports again?
[03:11:30] <matsaman> ew
[03:11:44] <matsaman> pretty sure black will do that
[03:11:51] <matsaman> but every time you use it, an angel loses its wings
[03:11:59] <foo> matsaman: bet you $5 it won't.
[03:12:14] *** Quits: kenwoodfox_ (~quassel@user/kenwoodfox) (Ping timeout: 268 seconds)
[03:12:20] <matsaman> I mean I can get $5 but I don't have it on me. I'd take the bet, just 'cause $5 isn't that much. =)
[03:12:32] * matsaman remembers cash
[03:12:38] <foo> matsaman: ok. Pretty sure black won't do that. /me checks
[03:12:39] *** Joins: kenwoodfox (~quassel@user/kenwoodfox)
[03:12:43] *** Joins: Harlin (~DonQixote@c-24-128-8-53.hsd1.co.comcast.net)
[03:12:43] <SnoopJ> foo, isort
[03:13:06] <df_data> Is there a better way of doing it so it doesnât skew the data @jinsun as CODETT6 isnât in the dataframe so the list creates it for some reason and matches someone to it :/
[03:13:09] *** Quits: Akuli (~Akuli@82-203-162-212.bb.dnainternet.fi) (Quit: Leaving)
[03:13:20] <SnoopJ> if you use it alongside black, use `--profile black`
[03:13:21] <matsaman> yeah internet says black doesn't do it
[03:13:31] *** Quits: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com) (Quit: WeeChat 3.1)
[03:13:47] <matsaman> that means my coworkers who abuse black have been saying "now I make the code black'd dur dur dur" _and_ manually ordering imports =P
[03:14:02] <matsaman> (or also using isort, etc.)
[03:14:30] <foo> I can't tell if A) black actually organizes imports OR B) it simply breaks imports into multiple lines - https://black.readthedocs.io/en/stable/guides/using_black_with_other_tools.html#isort
[03:14:31] *** Quits: moog (~moog@107.126.48.145) (Remote host closed the connection)
[03:14:34] <foo> Can someone clarify?
[03:14:47] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[03:14:51] <foo> By "organize" I mean sort imports / from __ import __ alphabetically
[03:15:25] *** Quits: MrAlexBailey (~Alex@104-11-73-100.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 252 seconds)
[03:15:36] <SnoopJ> foo, black *formats* your imports, but does not sort them
[03:16:05] <SnoopJ> isort will also format them as that documentation points out, so that's why you want to tell isort to use the profile associated with black, otherwise the two will fight.
[03:16:32] <foo> matsaman: We might have to cancel our bet on a technicality - I wasn't specific enough. Haha.
[03:16:36] *** Joins: masoudd__ (~masoudd@user/masoudd)
[03:17:01] <aphysically> bjs: I figured it out! :)
[03:17:34] <aphysically> I was trying to (very wrongly) use a namedtuple like it was a uhhhhh dataclass I guess? of lists
[03:17:39] <matsaman> foo: =P
[03:18:05] <matsaman> lib fight!
[03:18:43] *** Quits: freeworld (~vit@chello085216193138.chello.sk) (Ping timeout: 252 seconds)
[03:19:30] <aphysically> that's what I get for trying to work on code at 2 am
[03:19:50] *** Quits: masoudd_ (~masoudd@user/masoudd) (Ping timeout: 250 seconds)
[03:19:50] *** Quits: todda7 (~torstein@18.red-80-32-216.staticip.rima-tde.net) (Ping timeout: 250 seconds)
[03:20:20] *** Quits: bcast (~ls@user/deepspace-link) ()
[03:21:11] *** Quits: masoudd__ (~masoudd@user/masoudd) (Ping timeout: 258 seconds)
[03:23:09] <aphysically> (which was okay by itself, but then I accidentally put tuples inside it instead of lists)
[03:25:52] *** Quits: y1n (~y1n@84-115-64-187.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[03:26:27] *** Joins: masoudd (~masoudd@user/masoudd)
[03:26:50] *** Joins: drincruz (drincruz@2607:5300:203:3f52::19)
[03:29:10] *** Quits: junktext (~junktext@77.247.181.210) (Ping timeout: 252 seconds)
[03:29:43] *** Joins: mutandis (~mut@c-73-129-211-144.hsd1.va.comcast.net)
[03:31:22] *** Joins: martums9 (~martums@user/martums)
[03:33:27] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 258 seconds)
[03:33:40] *** Quits: martums (~martums@user/martums) (Ping timeout: 240 seconds)
[03:33:40] *** martums9 is now known as martums
[03:35:42] *** Joins: emika1 (~emika@83.136.182.231)
[03:36:44] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[03:37:25] *** Quits: emika (~emika@83.136.182.41) (Ping timeout: 252 seconds)
[03:37:25] *** emika1 is now known as emika
[03:37:34] *** Joins: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net)
[03:37:41] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[03:37:52] <xMopx> does anyone know of a tool/library that i can feed in a hex color code and it will produce many random color hex codes with at least some degree of contrast from the original color?
[03:38:17] <SnoopJ> xMopx, how many is "many?"
[03:38:35] <xMopx> SnoopJ: random and infinite would be ideal
[03:38:44] *** Quits: frat3rius (~frat3rius@host-85.14.84.172.static.3s.pl) (Quit: Ping timeout (120 seconds))
[03:38:46] <xMopx> not looking for a palette / shade generator
[03:39:05] *** Joins: frat3rius (~frat3rius@host-85.14.84.172.static.3s.pl)
[03:39:09] <matsaman> xMopx: so
[03:39:10] *** Quits: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it) (Quit: Leaving.)
[03:39:11] <matsaman> if you start from HSL
[03:39:18] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:39:19] <matsaman> and divide the entirety of the color spectrum evenly
[03:39:22] <matsaman> that's a really good way
[03:39:27] <xMopx> im somewhat familiar with HSL, trying to avoid writing it myself :)
[03:39:34] <matsaman> I think all the "big" colors are like ... 60 off from one another? Or 30?
[03:39:35] <matsaman> something like that
[03:39:36] <xMopx> iirc 180Ë off on h is a perfect invert
[03:39:49] <SnoopJ> cubehelix would be a good choice
[03:39:55] <SnoopJ> for a color-spacey thing
[03:40:07] <xMopx> ill check that out, ty
[03:40:19] <matsaman> xMopx: yeah 30: https://hslpicker.com/#ff9d00
[03:40:20] <SnoopJ> matplotlib has an implementation, but this is not a "throw in a hex code, get out hex codes" solution
[03:40:29] <matsaman> xMopx: just change the first value, 0, 30, 60, 90, 120
[03:40:34] <SnoopJ> and it's a little more perceptually uniform than HSL
[03:40:37] <SnoopJ> well, not a little, a lot
[03:40:52] <matsaman> after you get to 330 that's about it, you get into closer colors
[03:41:08] <matsaman> but you can still divide as much as you want
[03:41:27] *** Quits: fofoni (~fofoni@user/fofoni) (Quit: Leaving)
[03:41:29] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Read error: Connection reset by peer)
[03:41:30] <matsaman> 0, 30, 60, ... 330, 15, 45, 75, ...
[03:41:32] <SnoopJ> I'm not really sure how I'd approach "I want an infinite number of colors that contrast with this one," mostly because of the infinite
[03:41:56] <matsaman> I mean there are infinite colors, but the more you use the less contrast they'll have to the extant ones
[03:42:01] <xMopx> in other words, some kind of rule that prevents it from emitting a color too similar to the source color
[03:42:04] <matsaman> but it's still worth pursing for lots of things
[03:42:11] <xMopx> matsaman: i think the degree offsets you mentioned would take care of that
[03:42:20] <matsaman> yeah it'd work pretty well for a long while
[03:42:32] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[03:42:35] <matsaman> something else you could do, depending on the use case
[03:42:40] <matsaman> is something more like a random gravatar image
[03:42:41] <SnoopJ> it'll work as long as you don't care about the perceptual information in the rest of the color space, which is a lot
[03:42:43] <matsaman> instead of a color
[03:43:18] <SnoopJ> https://bids.github.io/colormap/ has some information on perceptual uniformity from when matplotlib got nicer colormaps, but I don't know if anything in there is going to be "ready to go" for this task.
[03:43:49] *** Joins: Midnite (~human@user/midnightlantern)
[03:44:03] <Midnite> Any improvements I could make to this simple program? https://bpa.st/HV5A
[03:44:08] *** Midnite is now known as midnite
[03:44:22] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[03:45:15] <xMopx> matsaman: SnoopJ: hmm thanks for the ideas. Looks like ive got some reading to do
[03:45:35] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0) (Quit: Leaving)
[03:45:45] *** Joins: Barones (~Barones@2804:7f3:8987:a56:1904:b84d:d454:b1fa)
[03:45:54] <dontyouloveshort> why can people call this pythonic: result = [{columns[index][0]:column for index, column in enumerate(value)} for value in cursor.fetchall()]         and everybody just accepts thats that the way good code should look like, its not intuitive to read at all
[03:46:07] <midnite> I suppose I could use for i in range(8)
[03:46:45] *** Quits: blddk (~admin@185.233.252.229) (Ping timeout: 268 seconds)
[03:46:50] <SnoopJ> dontyouloveshort, I certainly don't think "good code" should look like that
[03:47:32] <matsaman> xMopx: to my mind with HSL it'd be pretty simple to do: 0, 180, 90, 270, 45, 225, and so on, bisecting & alternating forever
[03:48:09] <matsaman> xMopx: but doing the other way I already mentioned would be almost as good and far simpler
[03:48:09] <SnoopJ> with the caveat that some choices will "contrast more" than others because that's just how eyes work
[03:48:26] *** Joins: deviantfero (~deviantfe@190.150.27.58)
[03:48:27] *** Joins: ljkimz (~ljkimz@97.119.129.88)
[03:48:59] <midnite> https://bpa.st/UDFQ is this pythonic?
[03:49:08] <dontyouloveshort> SnoopJ, go to know
[03:49:32] <ljkimz> Hello, can anyone give me the outlook of pymssql vs pyodbc? pymssql seems to be marginally easier to use but I'm concerned about it's longevity since they seemed to be on the verge of stopping development back in 2015 or so.
[03:52:14] *** Joins: blddk (~admin@185.233.252.229)
[03:52:38] *** Quits: JanC (~janc@user/janc) (Remote host closed the connection)
[03:52:48] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Read error: Connection reset by peer)
[03:52:50] <df_data> @jinsun when I print(location_list2) I do get the list I create, but that record should match on a created value
[03:52:52] *** Joins: JanC (~janc@user/janc)
[03:53:23] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[03:55:30] *** Joins: Wulf4 (~Wulf@user/wulf)
[03:56:03] <dontyouloveshort> ljkimz, use mariadb, forget mssql
[03:56:10] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[03:56:11] *** Quits: dontyouloveshort (~julius@2a02:8108:8100:18c4:3d26:df8c:7070:d838) (Quit: Leaving)
[03:56:38] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[03:59:05] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 268 seconds)
[03:59:06] *** Wulf4 is now known as Wulf
[03:59:17] *** Quits: m1n10n (georgecloo@cpe-76-184-204-251.tx.res.rr.com) (Remote host closed the connection)
[04:00:52] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 244 seconds)
[04:01:45] *** Quits: deviantfero (~deviantfe@190.150.27.58) (Ping timeout: 248 seconds)
[04:08:22] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0)
[04:08:43] *** Joins: KombuchaKip (~kip@192.252.230.5)
[04:09:12] *** Quits: emerent (~quassel@p200300cd57058cd4ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[04:10:01] *** Joins: emerent (~quassel@p5b265d23.dip0.t-ipconnect.de)
[04:12:37] *** Quits: midnite (~human@user/midnightlantern) (Ping timeout: 252 seconds)
[04:13:17] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[04:14:16] *** Quits: d0ku (~d0ku@178.43.198.70.ipv4.supernova.orange.pl) (Ping timeout: 252 seconds)
[04:16:14] *** Quits: c10l (~c10l@89.34.167.207) (Quit: The Lounge - https://thelounge.chat)
[04:18:10] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[04:18:53] *** Joins: puff (~user@s0106d4ca6d80a83c.vs.shawcable.net)
[04:19:49] <graingert[m]> <ljkimz> "Hello, can anyone give me the..." <- Use it through sqlalchemy so you can swap the driver
[04:20:38] *** Joins: DrBrownBear (~DrBrownbe@2600:1700:9aa1:6bc0:f1f8:636b:7e5a:9374)
[04:20:52] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[04:22:01] *** Joins: wyclif (~wyclif@user/wyclif)
[04:22:44] *** Joins: c10l (~c10l@89.34.167.207)
[04:23:10] *** Quits: masoudd (~masoudd@user/masoudd) (Read error: Connection reset by peer)
[04:23:55] *** Quits: DrBrownBear (~DrBrownbe@2600:1700:9aa1:6bc0:f1f8:636b:7e5a:9374) (Client Quit)
[04:26:17] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 248 seconds)
[04:26:34] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 250 seconds)
[04:27:33] <AhmedAmerican> how to pass a dynamic `filename` to `JsonItemExporter ` within scrapy?
[04:28:08] *** Quits: MikZyth (~MikZyth@188.65.243.46) (Quit: WeeChat 3.1)
[04:31:41] <ljkimz> graingert[m] thanks for that feedback. I was probably a little broad. We're really just using it for some simple custom plugins for Ansible. It doesn't need to be so flexible.
[04:31:47] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 268 seconds)
[04:32:12] <graingert[m]> sqlalchemy is pretty great in general tbh
[04:32:50] *** Joins: wyclif (~wyclif@user/wyclif)
[04:34:04] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 252 seconds)
[04:34:19] <ljkimz> I have no doubt but we just need something light and simple.
[04:35:31] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-c0b1-7a9b-d75d-e24d.res6.spectrum.com) (Read error: Connection reset by peer)
[04:35:43] *** Quits: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:302d:31fb:8cf9:9946) (Read error: Connection reset by peer)
[04:36:10] *** Quits: nergar (~Nergar@177.225.152.13) (Read error: Connection reset by peer)
[04:38:03] *** Joins: Zeturic (~Orimendix@50-25-46-156.krmtcmta02.res.dyn.suddenlink.net)
[04:39:37] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 248 seconds)
[04:41:11] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[04:43:55] *** Quits: dba (uid502594@id-502594.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[04:46:07] *** Quits: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net) (Quit: bilb_ono)
[04:46:15] *** Joins: cloudbender (~cloudbend@user/cloudbender)
[04:46:21] *** Joins: qpdb (~qpdb@user/qpdb)
[04:46:26] *** Joins: knowmadic (~ryan@user/knowmadic)
[04:49:40] *** Quits: qpdb| (~qpdb@user/qpdb) (Ping timeout: 268 seconds)
[04:51:45] <aphysically> if I decide to implement a config file is there something that should be done for default search locations on windows a la XDG specification on Linux?
[04:52:02] <grym> aphysically: yes, and appdirs is cross-platform: https://github.com/ActiveState/appdirs
[04:52:34] <grym> easy to vendor, too
[04:54:09] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[04:54:50] <aphysically> because it's MIT licensed?
[04:56:11] <grym> vendoring more specifically means "just copying the entire file into your source tree"
[04:56:26] <grym> appdirs is just one file; many libraries/packages aren't
[04:56:54] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Ping timeout: 250 seconds)
[04:56:55] <aphysically> you answered my real question that I didn't ask
[04:57:26] <aphysically> :
[04:57:28] <aphysically> :)
[04:57:56] <grym> everyone gets lucky sometimes
[04:59:23] <aphysically> I need to learn about some other conventions in python
[05:00:39] <aphysically> like, should I use some type of main function? how? what kind of extra hint variables or something should I be setting? commenting conventions? what actually is a docstring?
[05:00:52] <aphysically> still getting to things
[05:01:07] *** Joins: heco (~redrum@user/redrum88)
[05:01:24] <grym> the usual starting places for such things are https://www.python.org/dev/peps/pep-0008/  https://www.python.org/dev/peps/pep-0257/
[05:01:36] <grym> and the tutorial and language reference on python.org
[05:01:49] <grym> what other languages are you up to speed on right now
[05:02:04] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[05:02:37] *** Joins: lapno (~lapno@eok184.neoplus.adsl.tpnet.pl)
[05:02:40] <aphysically> well, my best languages are C (not C++), bash, and python in roughly that order - I've actually used python for a long time for scientific computing but usually as a go-between for programs in C or with mostly numpy
[05:02:50] <grym> the other areas of many choices lots of confusion include: packaging and distribution, cli parsing, venvs and python versions
[05:02:59] <grym> ok, so you're kind of like me
[05:03:32] *** Joins: ice9 (~ice9@user/ice9)
[05:03:42] <aphysically> I've sort of ignored learning about these things when using python before
[05:03:57] <grym> many of my fellow scientists have also done so
[05:04:16] <grym> you can get pretty far, but it's hard to share after a point
[05:04:25] <grym> and that's when the retroactive pain sets in
[05:05:12] *** Quits: portalrat (~portalrat@user/portalrat) (Remote host closed the connection)
[05:05:32] *** Joins: portalrat (~portalrat@user/portalrat)
[05:06:01] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[05:07:57] *** Quits: Naan (~naan@user/naan) (Read error: Connection reset by peer)
[05:08:40] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 240 seconds)
[05:09:02] *** Joins: deviantfero (~deviantfe@190.150.27.58)
[05:10:38] *** Quits: wereii (~wereii@37.205.14.89) (Ping timeout: 268 seconds)
[05:11:40] *** Quits: odoood (~odoood@2601:c8:c003:a550::8) (Ping timeout: 240 seconds)
[05:12:01] *** Joins: Guddu (~Guddu@190.84.88.92)
[05:12:40] *** Quits: loadedanvils (uid128751@id-128751.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[05:14:00] *** Joins: lapno_ (~lapno@eok184.neoplus.adsl.tpnet.pl)
[05:17:15] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.2)
[05:18:21] <df_data> @jinsun: I changed df2=[âLocationâ] =location_list2 to underneath the matching and it works exactly as it should. Not sure why that was so but you pointed me in the right direction.
[05:21:25] *** Quits: reset (~reset@user/reset) (Quit: reset)
[05:22:35] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[05:25:13] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[05:25:43] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[05:27:30] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[05:30:00] *** Quits: DragoonAethis (~quassel@2a01:4f8:c2c:3359::1) (Quit: hej-hej!)
[05:30:33] *** Joins: DragoonAethis (~quassel@2a01:4f8:c2c:3359::1)
[05:30:34] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:33:17] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[05:34:32] *** Joins: vlm (~vlm@user/vlm)
[05:34:36] *** Quits: cloudbender (~cloudbend@user/cloudbender) (Ping timeout: 250 seconds)
[05:35:53] *** Joins: wereii (~wereii@2a03:3b40:fe:4f::1)
[05:39:00] *** Quits: shailangsa (~shailangs@host86-145-14-24.range86-145.btcentralplus.com) (Ping timeout: 268 seconds)
[05:42:49] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Ping timeout: 252 seconds)
[05:43:11] *** Quits: ljkimz (~ljkimz@97.119.129.88) (Quit: Client closed)
[05:43:42] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.2)
[05:44:08] *** Quits: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 250 seconds)
[05:45:42] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[05:50:18] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[05:54:55] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 252 seconds)
[05:55:43] *** Quits: lapno_ (~lapno@eok184.neoplus.adsl.tpnet.pl) (Quit: Leaving)
[05:57:59] *** Joins: et_ (~et@user/et)
[05:58:47] *** Quits: et (~et@user/et) (Ping timeout: 245 seconds)
[05:58:47] *** et_ is now known as et
[05:59:08] *** Joins: sharperguy_ (~sharpergu@2001:16b8:5c49:a000:879d:c7f0:63b9:2b36)
[06:01:48] *** Quits: sharperguy (~sharpergu@2001:16b8:5cb9:7100:fd25:3463:bca1:1493) (Ping timeout: 258 seconds)
[06:07:02] *** Quits: puff (~user@s0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[06:07:32] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[06:07:34] *** Quits: deviantfero (~deviantfe@190.150.27.58) (Ping timeout: 252 seconds)
[06:07:45] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[06:09:53] *** Quits: fassl (~fassl@2a02:8388:1987:9380:c4ee:81c5:625a:a215) (Quit: Leaving)
[06:11:40] *** Quits: audiobirb (~audio@2603-8081-1801-3bb5-e83e-f8c6-9aa2-28bc.res6.spectrum.com) (Ping timeout: 240 seconds)
[06:14:48] *** Quits: lapno (~lapno@eok184.neoplus.adsl.tpnet.pl) (Remote host closed the connection)
[06:20:11] *** Joins: audiobirb (~audio@2603-8081-1801-3bb5-ecc4-2df9-195d-cbcb.res6.spectrum.com)
[06:20:33] *** dyCrazyEd is now known as CrazyEddy
[06:20:45] *** Quits: Barones (~Barones@2804:7f3:8987:a56:1904:b84d:d454:b1fa) (Quit: Leaving)
[06:21:39] *** Joins: jazzy (~jaziz@2600:380:4548:2564:9586:3cbe:697a:6fd1)
[06:22:22] *** Quits: stealth_ (~stelath_@216-197-160-97.regn.static.sasknet.sk.ca) (Quit: Leaving)
[06:23:36] *** Joins: califax- (~califax@user/califx)
[06:24:57] *** Joins: brabrax_ (~brabrax@user/brabrax)
[06:25:45] *** Quits: i0e (~is0ke3@user/is0ke3) (Remote host closed the connection)
[06:26:29] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 268 seconds)
[06:26:29] *** brabrax_ is now known as brabrax
[06:26:34] *** Quits: califax (~califax@user/califx) (Ping timeout: 244 seconds)
[06:26:35] *** califax- is now known as califax
[06:27:14] *** Quits: blackop (~ocloud@user/blackop) (Quit: leaving)
[06:27:54] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.2)
[06:27:55] *** Joins: i0e (~is0ke3@user/is0ke3)
[06:28:32] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[06:28:46] *** Joins: dancing_hourse (~Dan_Kolod@77.125.21.148)
[06:30:04] *** Joins: mickey (~user@user/mickey)
[06:32:21] <dancing_hourse> what is the best way to  search public github repo using python
[06:34:47] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[06:42:58] *** Joins: Fiji (~Fiji@user/fiji)
[06:48:51] *** Joins: minip (~minip@user/minip)
[06:53:13] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 252 seconds)
[06:53:33] *** Joins: HaMsTeRs (~mx@182.152.39.95)
[06:54:17] *** Joins: cloudbender (~cloudbend@user/cloudbender)
[06:55:08] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:55:24] *** Quits: cloudbender (~cloudbend@user/cloudbender) (Client Quit)
[06:59:29] <habnabit_> dancing_hourse, use the api
[07:01:10] *** Quits: audiobirb (~audio@2603-8081-1801-3bb5-ecc4-2df9-195d-cbcb.res6.spectrum.com) (Ping timeout: 240 seconds)
[07:02:34] *** Quits: fstd (~fstd@xdsl-78-35-72-109.nc.de) (Ping timeout: 272 seconds)
[07:02:36] *** Joins: rob4226 (~Thunderbi@64.64.117.170)
[07:04:18] *** Quits: dancing_hourse (~Dan_Kolod@77.125.21.148) (Ping timeout: 250 seconds)
[07:05:10] *** Quits: ssbr (~ssbr@python/site-packages/ssbr) (Ping timeout: 240 seconds)
[07:08:12] *** Joins: c4017__ (~c4017@S0106c0943583f893.vf.shawcable.net)
[07:09:33] *** Joins: pegaso (~reis-r@131.72.121.2)
[07:09:36] *** Quits: mmalter (~mmalter@88.171.43.194) (Quit: Lost terminal)
[07:11:14] *** Quits: Harlin (~DonQixote@c-24-128-8-53.hsd1.co.comcast.net) (Quit: Leaving)
[07:11:34] *** Quits: c4017_ (~c4017@2604:3d08:747f:7c90:54b4:c0da:a55c:9131) (Ping timeout: 258 seconds)
[07:12:46] *** Joins: Harlin (~DonQixote@c-24-128-8-53.hsd1.co.comcast.net)
[07:13:13] *** Joins: jesse-s (sid98646@id-98646.stonehaven.irccloud.com)
[07:14:50] *** Joins: audiobirb (~audio@2603-8081-1801-3bb5-27c8-a94a-768a-c5a3.res6.spectrum.com)
[07:19:15] *** Joins: DrBrownBear (~DrBrownbe@2600:1700:9aa1:6bc0:f1f8:636b:7e5a:9374)
[07:21:09] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[07:21:20] <jochum> https://github.com/PyGithub/PyGithub
[07:23:08] *** Quits: Guddu (~Guddu@190.84.88.92) (Read error: Connection reset by peer)
[07:24:19] *** Joins: geforce (~geforce@142.113.38.29)
[07:27:24] *** Quits: heco (~redrum@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[07:30:43] <aphysically> ffmpeg supports too many prefixes https://dpaste.com/3LVV8RT96
[07:30:55] <aphysically> they didn't support da prefix though - literally unusable
[07:31:25] <aphysically> oh I need to change the fractions back I was just experimenting with how it handled together
[07:32:20] *** Joins: HaMcHi (~mx@14-0-153-207.static.pccw-hkt.com)
[07:32:40] <aphysically> oops that should be a .6f not a .6
[07:33:43] *** Quits: HaMcHi (~mx@14-0-153-207.static.pccw-hkt.com) (Client Quit)
[07:34:33] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[07:34:38] *** Quits: HaMsTeRs (~mx@182.152.39.95) (Ping timeout: 250 seconds)
[07:36:10] *** Quits: humbertowoody (~humbertow@187.202.253.37) (Ping timeout: 240 seconds)
[07:40:12] *** Joins: foozle (~foozle@2001-b011-c001-16ef-ce66-7871-df14-42ce.dynamic-ip6.hinet.net)
[07:49:32] *** Joins: ogis_ (~Android@p311253-omed01.osaka.ocn.ne.jp)
[07:50:21] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 268 seconds)
[07:50:40] *** Quits: ogis (~Android@p2037202-ipngn201011tokaisakaetozai.aichi.ocn.ne.jp) (Ping timeout: 250 seconds)
[07:51:14] *** Quits: de-facto (~de-facto@user/de-facto) (Quit: See you around. ð¤)
[07:51:56] *** Joins: de-facto (~de-facto@user/de-facto)
[07:56:30] *** Joins: matsaman (~matsaman@user/matsaman)
[07:57:47] *** Quits: jab416171 (~jab416171@c-174-52-176-66.hsd1.ut.comcast.net) (Ping timeout: 252 seconds)
[07:58:26] *** Quits: ogis_ (~Android@p311253-omed01.osaka.ocn.ne.jp) (Read error: Connection reset by peer)
[07:58:26] *** Joins: CodePoint (~BitShift@2600:1700:3070:3790::29)
[07:58:56] *** Joins: ogis (~Android@p2037202-ipngn201011tokaisakaetozai.aichi.ocn.ne.jp)
[07:58:58] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[07:59:36] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Ping timeout: 268 seconds)
[07:59:47] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[08:00:03] *** Joins: cloudbender (~cloudbend@user/cloudbender)
[08:00:48] <AhmedAmerican> am using `response.xpath('normalize-space(.//div[@class="head-tag"]/b/text())').get().strip()` which keep return `'ï¼æçå®ç¨¿ï¼ç½ç»é¦åæ¶é´ï¼2021-08-11 14:36:23'`
[08:01:16] <AhmedAmerican> when i access the first char using `[0]`, it's output ` (` so the space is still there
[08:02:37] *** Joins: jab416171 (~jab416171@c-174-52-176-66.hsd1.ut.comcast.net)
[08:03:30] <Repiphany> "ï¼" is a full width space, not <space>(
[08:03:38] <Repiphany> full-width bracket*
[08:03:43] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0) (Quit: Leaving)
[08:03:54] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:03:58] <AhmedAmerican> Repiphany: how to deal with it ? i usually have this issue
[08:04:14] <Repiphany> What do you mean "deal with it"
[08:04:19] <Repiphany> It's common in CJK
[08:04:27] *** Joins: humbertowoody (~humbertow@2806:107e:f:5e47:2837:e8bf:d880:11fb)
[08:04:54] <AhmedAmerican> how to remove it
[08:05:09] <Repiphany> Why do you want to remove it
[08:05:11] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[08:05:17] <Repiphany> What are you trying to do processing Chinese
[08:05:39] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Read error: Connection reset by peer)
[08:06:07] *** Joins: newbs (~androirc@2600:380:d9cf:ad4e:122:5a6d:bebd:43eb)
[08:07:12] *** Joins: humberto1 (~humbertow@2806:107e:f:5e47:746b:9383:3a2f:5a)
[08:07:25] *** Joins: vicfred (~vicfred@user/vicfred)
[08:07:42] <newbs> (newbs) when installing python modules from a file on my hard drive Does python just know where to install them or do I need to use the setup.py in a specific Directory?
[08:09:04] *** Quits: humbertowoody (~humbertow@2806:107e:f:5e47:2837:e8bf:d880:11fb) (Ping timeout: 258 seconds)
[08:09:40] *** Quits: kindablue (znc@2001:19f0:6001:175a:dedb:79f4:38d:5b35) (Quit: System Rebooting..)
[08:09:55] *** Parts: geforce (~geforce@142.113.38.29) (Leaving)
[08:10:10] *** Quits: emika (~emika@83.136.182.231) (Ping timeout: 250 seconds)
[08:10:31] *** Quits: knowmadic (~ryan@user/knowmadic) (Remote host closed the connection)
[08:10:31] *** Joins: kindablue (znc@2001:19f0:6001:175a:dedb:79f4:38d:5b35)
[08:12:01] *** Joins: emika (~emika@83.136.182.67)
[08:12:50] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[08:18:23] <josh_h> *loading.......*
[08:19:10] <josh_h> newbs: your python install should have a sense of where its modules go, but if you run a 'pip install' against your local you'll need to give pip the directory path to the root of your project
[08:19:13] <josh_h> is that helpful?
[08:19:36] <josh_h> fwiw python packaging is a tire fire, you're not the only one to get confused by it
[08:20:12] <matsaman> although I'll take it over some other languages' package management
[08:20:21] <josh_h> this isn't to shit on python packaging per se, there are a lot of good parts of it - wheels are miles ahead of the situation in node.js for example
[08:20:37] <josh_h> but it's not the ideal either, there are plenty of burrs to sand off
[08:20:47] *** Quits: ente_ (~ente@p200300dc5f0e88004800c925eda717c4.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[08:20:52] <newbs> can i run pip install on a setup.py file with out internet?
[08:21:05] <matsaman> compared to the average GNU/Linux package manager, it's pretty rough
[08:22:46] *** Parts: nickodd (~nickodd@user/nickodd) ()
[08:22:47] *** Joins: ente_ (~ente@p200300dc5f14f500b681f952e085d8f4.dip0.t-ipconnect.de)
[08:23:47] *** Quits: Roey (~Roey@user/Roey) (Quit: Client exiting)
[08:24:25] <AhmedAmerican> Repiphany: thanks a lot, I've just read about it within Wikipedia .  you learned me a good thing today :P
[08:25:12] *** Joins: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net)
[08:29:26] *** Joins: ice9 (~ice9@user/ice9)
[08:31:13] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[08:31:38] *** Joins: PinealGlandOptic (~PinealGla@37.115.210.35)
[08:31:41] *** Quits: humberto1 (~humbertow@2806:107e:f:5e47:746b:9383:3a2f:5a) (Ping timeout: 258 seconds)
[08:34:58] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: shgvbvri)
[08:35:31] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[08:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:36:37] *** Joins: akaWolf (~akaWolf@akawolf.org)
[08:36:42] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[08:37:10] *** Quits: newbs (~androirc@2600:380:d9cf:ad4e:122:5a6d:bebd:43eb) (Ping timeout: 240 seconds)
[08:37:40] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[08:39:40] *** Quits: AlanMD (~AlanMD@193.105.140.131) (Ping timeout: 240 seconds)
[08:41:49] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Remote host closed the connection)
[08:41:52] *** Quits: i0e (~is0ke3@user/is0ke3) (Quit: Zzzzzz.....)
[08:42:52] *** Joins: AlanMD (~AlanMD@193.105.140.131)
[08:43:36] *** Joins: rakoon (~rakoon@2a02:2149:824f:5900:1d1:a38c:828f:88d3)
[08:45:02] *** Quits: CodePoint (~BitShift@2600:1700:3070:3790::29) (Quit: Never gonna give you up, never gonna let you down...)
[08:47:35] *** Joins: wyclif (~wyclif@user/wyclif)
[08:50:01] *** Joins: jpodivin (~jpodivin@118.108.broadband14.iol.cz)
[08:50:34] *** Quits: jpodivin (~jpodivin@118.108.broadband14.iol.cz) (Client Quit)
[08:51:46] *** Quits: Fiji (~Fiji@user/fiji) (Quit: Leaving)
[08:52:55] *** Quits: pyre (~pyre@crimeboss.nillas-power.com) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[08:53:31] *** Joins: humberto1 (~humbertow@2806:107e:f:5e47:746b:9383:3a2f:5a)
[08:54:22] *** Quits: envex (~envex@cpe-173-91-189-33.neo.res.rr.com) ()
[08:55:54] *** Joins: pyre (~pyre@crimeboss.nillas-power.com)
[08:56:03] *** Quits: pegaso (~reis-r@131.72.121.2) (Remote host closed the connection)
[08:58:10] *** Quits: humberto1 (~humbertow@2806:107e:f:5e47:746b:9383:3a2f:5a) (Ping timeout: 240 seconds)
[09:05:04] *** Joins: cpif (~pi@2601:282:a00:fe50::7430)
[09:05:27] *** Quits: cpif (~pi@2601:282:a00:fe50::7430) (Client Quit)
[09:07:15] *** Joins: shailangsa (~shailangs@host86-186-136-25.range86-186.btcentralplus.com)
[09:08:00] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[09:11:06] *** Joins: paulman (~kulernil@gateway/tor-sasl/kuler)
[09:11:31] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[09:11:36] *** Quits: kulernil (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[09:17:25] *** Joins: fikran (~fikran@user/fikran)
[09:20:23] *** Joins: frost (~frost@59.71.240.119)
[09:20:50] *** Quits: Zeturic (~Orimendix@50-25-46-156.krmtcmta02.res.dyn.suddenlink.net) (Quit: Leaving)
[09:28:19] *** Quits: cloudbender (~cloudbend@user/cloudbender) (Ping timeout: 252 seconds)
[09:30:06] *** Joins: fdan (~fdan@192.146.154.3)
[09:30:45] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Remote host closed the connection)
[09:31:17] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[09:31:17] *** Joins: stranac (~stranac@195.29.239.126)
[09:35:47] <aphysically> well I'm coding enough python now I should actually look into loading up vim with something QoL
[09:35:53] *** Joins: zBeeble42 (~zBeeble@2001:1928:1::35)
[09:35:55] *** Quits: zBeeble (~zBeeble@2001:1928:1::35) (Remote host closed the connection)
[09:36:38] <aphysically> I think the included indentation could be improved and maaaaaybe look for an autocompleter or linteR?
[09:38:20] *** Joins: jamwil (~jamwil@d23-17-44-99.abhsia.telus.net)
[09:38:47] *** Quits: foozle (~foozle@2001-b011-c001-16ef-ce66-7871-df14-42ce.dynamic-ip6.hinet.net) (Quit: Leaving)
[09:39:02] <aphysically> I always shy away from those because they always seem so in my face
[09:40:53] *** Joins: Enitin (~Enitin@82.102.22.85)
[09:41:28] *** Quits: zware (~zach@python/psf/zware) (Ping timeout: 256 seconds)
[09:43:26] *** Joins: hyperknot (~hyperknot@catv-89-133-47-146.catv.broadband.hu)
[09:44:06] *** Joins: zware (~zach@python/psf/zware)
[09:45:00] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[09:46:03] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[09:46:52] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[09:49:56] <foo> Trying to get credentials into this library but I need to pass a file, I cannot pass individual values: https://github.com/W1ndst0rm/Treillage/blob/dev/treillage/treillage.py#L14 -> I can see on line 22 it sets up the credential via https://github.com/W1ndst0rm/Treillage/blob/dev/treillage/credential.py#L11 . Short of forking this library and modifying this, is there any other option here to pass in the
[09:50:02] <foo> individual key and secret?
[09:50:04] <foo> Thank you
[09:51:50] <Repiphany> foo: Does https://github.com/W1ndst0rm/Treillage#getting-started not help
[09:52:10] *** Quits: jamwil (~jamwil@d23-17-44-99.abhsia.telus.net) (Ping timeout: 240 seconds)
[09:52:48] <foo> Repiphany: thank you. Perhaps I could be more clear. By default, the library works like this: async with Treillage(credentials_file="creds.yml") as tr: -> I don't want to pass in creds.yml, I want to dynamically pass a key and secret arg
[09:53:08] <foo> I could manually fork this and modify code to make this work. I think that's my only option here but wanted to ask just in case
[09:53:59] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: shgvbvri)
[09:54:39] <Repiphany> Make a fake file using StringIO or something
[09:55:07] <Repiphany> https://docs.python.org/3/library/io.html#text-i-o
[09:56:16] *** Joins: upsala (~zcb@185.213.155.160)
[09:57:15] *** Joins: jamwil (~jamwil@d23-17-44-99.abhsia.telus.net)
[09:57:40] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 240 seconds)
[09:59:25] <Repiphany> or just subclass Treillage and overwrite __init__ to pass those things directly
[10:01:17] *** Joins: cheater (~Username@user/cheater)
[10:01:19] <rakoon> Can i import from a sub-directory that has no __init__.py? (Python treats it as namespace, I have only one file a.py). OR namespace packages are meant to have subpackages with __init__.py ?
[10:02:02] <rakoon> (which means i either put an __init__.py and from namespace i make a python package OR i bring that file 1 directory up and remove that directory)
[10:02:03] <Repiphany> You could add it to sys.path
[10:02:28] <rakoon> Repiphany: sure but i want to know if i can import as is from there
[10:02:38] <Repiphany> Try it and find out
[10:02:52] <rakoon> yeah i cant and im trying to verify how it works
[10:03:10] <rakoon> so namespace packages are meant to have (sub) python packages
[10:03:17] <foo> Repiphany: oh, subclassing could work - I like that.
[10:04:09] <rakoon> All this time I thought i could import: from a.some_namespace.module import function
[10:04:28] <rakoon> (i dont have __init__.py inside some_namespace)
[10:04:42] <rakoon> (and i import while being in top level "a")
[10:05:19] <foo> Repiphany: thank you, I believe that's as simple as this - correct? https://bpa.st/3UIA
[10:06:08] <Repiphany> If you change lines 5 and 13, sure
[10:06:59] <foo> Repiphany: yeah, I would. Cool, giving this a shot.
[10:08:55] <Repiphany> rakoon: I don't understand your problem, you only need one __init__.py in a/ and you can import things from a/some_namespace/module.py
[10:09:03] <Repiphany> if that's what you're asking
[10:10:00] <jochum> rakoon: you explicity want implicit namespaces?
[10:10:02] *** Quits: jamwil (~jamwil@d23-17-44-99.abhsia.telus.net) (Changing host)
[10:10:02] *** Joins: jamwil (~jamwil@user/jamwil)
[10:10:14] <Repiphany> foo: You'd also need to import Credential probably
[10:10:18] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[10:10:43] <Repiphany> and whatever BaseURL is
[10:10:45] <jochum> Implicit namespaces: https://www.python.org/dev/peps/pep-0420/
[10:10:50] *** Joins: jrgriffiniii (~jrgriffin@24.102.212.32.res-cmts.t132.ptd.net)
[10:11:00] <foo> Repiphany: Yup, thank you. I think I want this: https://bpa.st/3ISQ#1L13 -> testing now.
[10:11:42] <rakoon> jochum: no
[10:11:43] <Repiphany> Presumably you'd want to pass key and secret in as arguments of __init__
[10:12:59] <rakoon> Repiphany: my top level is a, where inside there i have the app.py (entryppoint), from inside there i try to import module.py from some_namespace as you showed
[10:13:01] <foo> Repiphany: yup, super appreciate this. I don't subclass enough to know to go to this but this seems like it would do the trick
[10:13:13] *** Quits: jrgriffiniii (~jrgriffin@24.102.212.32.res-cmts.t132.ptd.net) ()
[10:13:13] *** Joins: lapno (~lapno@enx167.neoplus.adsl.tpnet.pl)
[10:13:25] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 252 seconds)
[10:13:37] <rakoon> Repiphany: a directory has __init__.py
[10:13:45] *** Joins: Enitin (~Enitin@82.102.22.84)
[10:14:02] <rakoon> Repiphany: my sys.path has as 1st element the path of "a"
[10:14:16] *** Joins: ice99 (~ice9@user/ice9)
[10:14:25] <Repiphany> Then in a/app.py you can have something like `from .some_namespace.module import function`
[10:14:38] <rakoon> Repiphany: alright let me try
[10:15:16] *** Quits: fdan (~fdan@192.146.154.3) (Quit: Client closed)
[10:15:47] *** Joins: ihristov (~ihristov@85.187.46.226)
[10:16:29] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 268 seconds)
[10:16:54] *** Joins: jpodivin (~jpodivin@118.108.broadband14.iol.cz)
[10:17:34] *** Joins: ice9 (~ice9@user/ice9)
[10:17:34] *** Quits: ice99 (~ice9@user/ice9) (Read error: Connection reset by peer)
[10:17:36] <rakoon> Repiphany: thanks it worked i dont get why i couldnt make it work :(
[10:17:56] *** Joins: fdan (~fdan@192.146.154.3)
[10:21:12] *** Joins: ice99 (~ice9@user/ice9)
[10:22:06] *** Quits: ice99 (~ice9@user/ice9) (Remote host closed the connection)
[10:22:28] *** Joins: nickodd (~nickodd@user/nickodd)
[10:23:40] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 240 seconds)
[10:25:40] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[10:26:46] *** Joins: wyclif (~wyclif@user/wyclif)
[10:28:12] *** Quits: jamwil (~jamwil@user/jamwil) (Ping timeout: 268 seconds)
[10:28:25] <foo> https://github.com/W1ndst0rm/Treillage/blob/dev/treillage/treillage.py#L14 -> I am getting this error when I try to subclass with https://bpa.st/SMZQ : TypeError: __init__() missing 1 required positional argument: 'credentials_file' - > but I don't see where I set credentials_file as a required arg
[10:28:30] <foo> Am I missing something?
[10:28:49] <foo> oh, whoops, I have a newer paste
[10:29:09] <foo> https://bpa.st/5LHQ , added line 5 + 6
[10:30:28] <Yhg1s> foo: 'credentials_file' is a parameter without a default value, so it is required.
[10:30:31] <foo> meh, that paste has a typo line 4, if I yank that out now I get: AttributeError: 'TreillageMod' object has no attribute 'key'
[10:30:34] <foo> Yhg1s: Aha!
[10:30:35] <foo> ok
[10:30:46] <foo> I just yanked it out since I'm not using it anywhere
[10:31:10] <Repiphany> Line 15 shoud be `self.__credential = Credential(key, secret)
[10:31:14] <Yhg1s> foo: you're using 'self.key' and 'self.secret' on line 15. Did you mean to just use 'key' and 'secret'?
[10:31:26] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 250 seconds)
[10:31:38] <foo> Repiphany / Yhg1s - thanks, just added that. I'm confused, I thought I needed self. But maybe that's used in other methods and not in __init__
[10:31:44] * foo is a bit new to this subclassing stuff
[10:32:04] * foo investigates AttributeError: 'TreillageMod' object has no attribute '_Treillage__base_url'
[10:32:07] *** Quits: plitter (~plitter@user/plitter) (Ping timeout: 245 seconds)
[10:32:16] *** Joins: wyclif (~wyclif@user/wyclif)
[10:33:13] <foo> I suppose I can feed in base_url although I didn't have that before
[10:33:26] <foo> I believe that's getting set here:
[10:33:27] <foo> base_url: Union[str, BaseURL] = BaseURL.UNITED_STATES.value,
[10:33:45] *** Joins: stevieh (~skrodzki@p2e584735.dip0.t-ipconnect.de)
[10:34:11] <foo> Passing base_url as an arg to TreillageMod didn't seem to solve that. /me digs a bit more
[10:34:13] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:34:14] *** Quits: fengshaun (~fengshaun@68.69.214.210) (Quit: bibi!)
[10:34:35] *** Joins: fengshaun (~fengshaun@68.69.214.210)
[10:37:04] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 250 seconds)
[10:37:41] <foo> https://bpa.st/GAWA is throwing: AttributeError: 'TreillageMod' object has no attribute '_Treillage__base_url' - I do import https://github.com/W1ndst0rm/Treillage/blob/dev/treillage/treillage.py#L7 so I don't think that should be happening
[10:37:43] *** Joins: wyclif (~wyclif@user/wyclif)
[10:38:33] *** Joins: ice9 (~ice9@user/ice9)
[10:39:13] <foo> If I don't subclass, it works fine
[10:39:31] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[10:39:33] <Yhg1s> foo: it's happening because you're making the mistake of using double leading underscores. Use a single leading underscore. Or, no leading underscore.
[10:39:33] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[10:40:46] *** Joins: kosh (~kosh@user/kosh)
[10:41:21] <foo> Yhg1s: that was a straight copy from here: https://github.com/W1ndst0rm/Treillage/blob/dev/treillage/treillage.py#L24
[10:41:40] <foo> Yhg1s: which subclassed, and there was no issues if I don't subclass. Little confused here since it works without me subclassing
[10:42:17] *** Quits: r3m (~launch@user/r3m) (Quit: WeeChat 3.3-dev)
[10:42:43] *** Joins: jetchisel (jetchisel@user/jetchisel)
[10:43:26] *** Joins: kosh_ (~kosh@user/kosh)
[10:44:00] <Repiphany> Double underscore does some name mangling to avoid overwriting attributes but in this case you actually do want to overwrite them
[10:44:17] *** Joins: r3m (~launch@user/r3m)
[10:44:22] <foo> Repiphany: aha! So this is a nuance of subclassing, it sounds like.
[10:44:30] *** Joins: cloudbender (~cloudbend@user/cloudbender)
[10:44:40] <Repiphany> So you can replace the self.__credential and similar lines with self._Treillage__credential
[10:45:19] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 252 seconds)
[10:45:46] *** Joins: Enitin (~Enitin@82.102.22.86)
[10:45:47] <foo> Repiphany: thank you. This seems to have worked: https://bpa.st/4NFA
[10:46:17] <foo> Repiphany: so, does self._Treillage__credential actually mean "overwrite self.__credential in Treillage" ? Or could I do Treillage self._TreilANYTHING__credential and that work?
[10:46:22] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:46:43] *** Joins: PyT001 (~PyT001@2402:e280:3d22:227:a497:ef4b:b3f:c965)
[10:46:53] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[10:46:59] *** Joins: seednode (~seednode@user/seednode)
[10:47:17] <Repiphany> In the original Treillage class, all of the self.__var actually resolve to _Treillage__var
[10:47:26] <foo> Repiphany: aha! I see.
[10:47:37] <foo> Repiphany: I assume that's specific to __ and self._var would not resolve to similar.
[10:47:56] <Repiphany> Yes, it's a feature of double underscore specifically
[10:48:15] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[10:48:16] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[10:48:24] <Yhg1s> foo: it's not a 'nuisance of subclassing', it's a *mistake* to use double leading underscores.
[10:48:33] <AhmedAmerican> is there something such ass `l.add_xpath('Test', 'xpath', default_value_if_none='N/A')` within scrapy ?
[10:48:37] *** Quits: gambl0re (~gambl0re@104.247.245.205) (Ping timeout: 252 seconds)
[10:49:18] *** Joins: brabrax (~brabrax@user/brabrax)
[10:49:52] <foo> Repiphany: thank you.
[10:50:12] *** Joins: AlanMD_ (~AlanMD@5-12-8-103.residential.rdsnet.ro)
[10:50:19] <foo> Yhg1s: I assume you mean, mistake to use double underscores in a subclass, not a mistake to use __ in general - right? (I'm trying to understand of the original library made a mistake using __ or I did in the subclass, assuming latter)
[10:51:29] *** Quits: lapno (~lapno@enx167.neoplus.adsl.tpnet.pl) (Quit: Leaving)
[10:51:45] <aphysically> hmmm I don't like most of these plugins cause they're a bit invasive - autopep8 does strike a good balance for me for running occasionally
[10:51:46] *** Joins: gusto (~Augustus@109.255.100.54)
[10:51:50] *** Joins: lapno (~lapno@enx167.neoplus.adsl.tpnet.pl)
[10:52:17] <aphysically> not super opinionated about my formatting like black but fixed some spacing stuff - although I should find a plugin for vim that parses the syntax different
[10:52:28] *** Quits: AlanMD (~AlanMD@193.105.140.131) (Ping timeout: 252 seconds)
[10:52:30] <aphysically> the automatic tabbing it's doing right now isn't quite right
[10:53:09] *** Quits: lapno (~lapno@enx167.neoplus.adsl.tpnet.pl) (Client Quit)
[10:53:45] *** Joins: lapno (~lapno@enx167.neoplus.adsl.tpnet.pl)
[10:53:59] <foo> Repiphany: looks like I need to subclass this too, https://github.com/W1ndst0rm/Treillage/blob/dev/treillage/treillage.py#L54 - since this library calls itself I think.
[10:54:34] <stranac> AhmedAmerican: i don't think so, but youcould make a custom field processor to create a default if nothing was found
[10:55:13] <AhmedAmerican> stranac: ItemLoader itself never send the None value to the processor :S
[10:56:43] <stranac> AhmedAmerican: not even the output processor? i thought at least it would get an empty sequence
[10:57:25] <AhmedAmerican> stranac: https://bpa.st/KBNA  and https://github.com/scrapy/itemloaders/issues/40
[10:58:31] *** Quits: AlanMD_ (~AlanMD@5-12-8-103.residential.rdsnet.ro) (Ping timeout: 252 seconds)
[10:58:33] <Yhg1s> foo: no, I mean double leading underscores in general. It's a bad idea to use them. They have a very specific but still dubious use-case, and you're _much_ better off not worrying about it.
[10:58:53] <foo> Yhg1s: ok, so never use __ in a class attribute. Got it. Thank you.
[10:58:56] <Yhg1s> foo: see https://stackoverflow.com/questions/165883/python-object-attributes-methodology-for-access/166098#166098 for alonger explanation.
[10:59:18] <stranac> AhmedAmerican: i'm not really sure how to handle it if that doesn't work, sorry
[10:59:25] *** Quits: hyper_dave (~hyper_dav@197.156.103.172) (Read error: No route to host)
[10:59:34] <AhmedAmerican> stranac: that's ok
[11:00:18] *** Quits: lapno (~lapno@enx167.neoplus.adsl.tpnet.pl) (Quit: Leaving)
[11:00:21] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[11:01:12] *** Joins: palasso (~palasso@user/palasso)
[11:01:59] *** Joins: AlanMD (~AlanMD@193.105.140.131)
[11:02:16] <foo> Yhg1s: so, the reason not to use them is for the exact issue I'm having trying to subclass this library... if I'm following.
[11:03:01] *** Joins: dalan623 (~dalan@14-203-203-26.tpgi.com.au)
[11:04:12] *** Quits: dalan62 (~dalan@14-203-203-26.tpgi.com.au) (Ping timeout: 245 seconds)
[11:04:12] *** dalan623 is now known as dalan62
[11:04:24] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[11:06:15] *** Quits: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com) (Quit: ZNC - https://znc.in)
[11:06:19] <foo> meh, this is getting rather nuanced: https://bpa.st/KQHQ -> this is my traceback. Throwing: treillage.exceptions.TreillageHTTPException: Failed to get API tokens -> it would seem that my credentials, despite my subclass aren't properly getting passed around. What I don't understand is the credentials at this point should be __credential:
[11:06:24] <foo> https://github.com/W1ndst0rm/Treillage/blob/21cc11a9feb343086b00ed456bffd00bda9bf68b/treillage/connection_manager.py#L34 ...
[11:06:53] *** Joins: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com)
[11:07:17] <foo> It seems like here: https://bpa.st/KQHQ#1L14 -> that self._Treillage__credential = Credential(key, secret) is not getting passed as __credential within the https://github.com/W1ndst0rm/Treillage/blob/dev/treillage/treillage.py#L39
[11:07:27] <foo> This may be exactly what Yhg1s is talking and the hassle of this.
[11:07:46] <deniska> foo: __foo more or less means "don't let my subclasses to redefine it"
[11:08:21] <deniska> or rather more accurately "create an identifier only accessible in this class body"
[11:08:25] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[11:08:53] *** Joins: lapno (~lapno@enx167.neoplus.adsl.tpnet.pl)
[11:09:06] <foo> deniska: but I do want to overwrite it, this is the original class: https://github.com/W1ndst0rm/Treillage/blob/dev/treillage/treillage.py#L22 - it accepts a file, I'm trying to pass in key/value args and generate the credential per https://bpa.st/KQHQ#1L14
[11:09:48] <foo> maybe I'll overwrite __async_init too.
[11:10:04] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[11:10:16] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[11:10:20] *** Joins: y1n (~y1n@84-115-64-37.wifi.dynamic.surfer.at)
[11:10:41] <deniska> foo: this class practically screams "subclassing me is futile"
[11:10:43] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[11:11:09] <foo> deniska: so I'm learning. :) What do you suggest? fork the whole project, remove the __'s everywhere so I can subclass better?
[11:12:18] <deniska> foo: if you can change the original class, change it. If you can't, you can access name mangled attributes like this: _Treillage__credential
[11:12:34] <hexnewbie> foo: with tempfile.NamedTemporaryFile() as f: json.dump({'key': key, 'secret': secret}, f)  Treillage(credentials_file=f) # JSON is valid-ish YAML, if you're YAML-literate, you should use that instead though
[11:13:26] <hexnewbie> I suppose yaml.safe_dump({'key': key, 'secret': secret}, f)
[11:13:34] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[11:14:03] *** Joins: ssbr (~ssbr@python/site-packages/ssbr)
[11:14:56] <foo> hexnewbie: that is the other option here, too, I think I like that more (it seems cleaner/simpler). The only thought there is ... the arg is expecting a filename, not a file. eg. https://github.com/W1ndst0rm/Treillage/blob/dev/treillage/credential.py#L12
[11:15:06] <hexnewbie> foo: [09:40:17] bitdex [~bitdex@gateway/tor-sasl/bitdex] has joined #python
[11:15:11] <foo> hexnewbie: would that still work with your logic?
[11:15:15] <hexnewbie> foo: Oops, wrong paste. I meant: https://bpa.st/4J3Q
[11:15:34] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 252 seconds)
[11:16:02] <foo> hexnewbie: ð¤¯
[11:16:11] <foo> hexnewbie: ... I've never seen something like this before. Giving it a shot.
[11:16:19] <foo> hexnewbie: I understand what's happening, how cool is this.
[11:16:26] *** Joins: Enitin (~Enitin@82.102.22.86)
[11:18:12] <hexnewbie> Be careful that this would save the credentials to some storage, which can be possibly on a persistent media, and leak it. If this is e.g. Linux, you can use NamedTemporaryFile(dir='/dev/shm') to make it reside in memory, though it can still be swapped out (but don't hardcode for the general case to make sure code is portable)
[11:18:47] *** Quits: aphysically (~aphysical@user/aphysically) (Ping timeout: 268 seconds)
[11:18:56] *** Quits: fflam (~mdt@ip70-179-20-127.sd.sd.cox.net) (Ping timeout: 256 seconds)
[11:18:56] <foo> hexnewbie: thanks, this is Linux.
[11:19:06] *** Quits: hyperknot (~hyperknot@catv-89-133-47-146.catv.broadband.hu) (Quit: Textual IRC Client: www.textualapp.com)
[11:19:34] <foo> hexnewbie: do you see any issues with this? https://bpa.st/EOSA
[11:19:37] *** Joins: gloomy_desktop (~ldorigo@81.161.149.37)
[11:19:41] <foo> hexnewbie: namely, line 9.
[11:19:50] <foo> ... returning from within a with like this?
[11:20:20] *** Joins: aphysically (~aphysical@user/aphysically)
[11:20:44] *** Joins: fflam (~mdt@ip70-179-20-127.sd.sd.cox.net)
[11:21:18] <hexnewbie> foo: It's fine. There's an issue (but my example also suffers from it) that if Treillage's implementation changes to reinitialize the credentials file lazily it would break, but there isn't an obvious solution to that.
[11:21:26] *** Joins: cth (~Cthulchu@213.174.21.101)
[11:21:28] <foo> yaml.safe_dump({"key": key, "secret": secret}, f) is throwing TypeError: a bytes-like object is required, not 'str'
[11:21:32] *** Joins: fstd (~fstd@xdsl-78-35-86-208.nc.de)
[11:21:41] * foo checks if "f" is a string
[11:21:54] <hexnewbie> Maybe closing the file until after connection or something
[11:22:51] <Yhg1s> foo: 'f' would be a file, but it's a file opened in binary mode. yaml.safe_dump is trying to write text to it, so make sure it's open in text mode.
[11:23:12] <Repiphany> 0
[11:23:47] *** Quits: cloudbender (~cloudbend@user/cloudbender) (Quit: Connection closed)
[11:24:04] <foo> Yhg1s: thank you.
[11:24:06] * foo looks at https://docs.python.org/3/library/tempfile.html#tempfile.NamedTemporaryFile
[11:24:30] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Read error: Connection reset by peer)
[11:24:44] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[11:25:12] <foo> hexnewbie: to avoid it the file from persisting, I think I can pass delete=True ?
[11:25:50] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[11:26:10] <supakeen> (which is the default)
[11:26:42] <foo> supakeen: heh, good eye.
[11:26:46] * foo approaching midnight
[11:26:48] *** Joins: fikran (~fikran@user/fikran)
[11:27:23] <hexnewbie> foo: The with block closes and deletes the file. Which can become if the class implementation changes to parse the file at another point in the execution, but if you don't know when, there's little you can do about it now other than investigate. Here's my idea with the fix for the issue Yhg1s noticed, and the use of memory instead of disk: https://bpa.st/CXWA
[11:28:05] <hexnewbie> Which can become a problem, I mean
[11:28:52] <foo> hexnewbie: Aha, I had set the mode but I like how you set up the kwargs here to first check if it's accessed. I feel like I've been in a similar situation here so many times, no idea tempfile's can be generated/passed like this.
[11:28:56] * foo tries this
[11:30:25] *** Quits: kosh (~kosh@user/kosh) (Killed (NickServ (GHOST command used by kosh_)))
[11:30:25] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[11:30:27] *** kosh_ is now known as kosh
[11:30:32] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[11:30:45] *** Joins: kosh_ (~kosh@user/kosh)
[11:31:08] *** Joins: djhankb (~djhankb@208.113.164.68)
[11:31:22] *** Joins: d0ku (~d0ku@178.43.198.70.ipv4.supernova.orange.pl)
[11:31:27] <foo> hexnewbie: this library may continue to not play nice. /me investigates this error: https://bpa.st/M4RA
[11:31:54] <foo> Oh, I see the issue.
[11:32:48] <foo> Ok, back to this: https://bpa.st/J33Q
[11:32:50] * foo investigates
[11:34:02] * foo drops into a pdb to see what is being passed around here
[11:34:42] *** Quits: cth (~Cthulchu@213.174.21.101) (Ping timeout: 250 seconds)
[11:36:33] <foo> Huh.
[11:36:40] <foo> I can clearly see https://github.com/W1ndst0rm/Treillage/blob/21cc11a9feb343086b00ed456bffd00bda9bf68b/treillage/token_manager.py#L87 has the appropriate apiKey
[11:36:45] * foo scratches head and looks again
[11:37:01] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 252 seconds)
[11:38:10] *** Quits: ssbr (~ssbr@python/site-packages/ssbr) (Ping timeout: 250 seconds)
[11:38:55] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[11:40:54] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[11:41:04] *** Quits: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Read error: Connection reset by peer)
[11:41:43] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[11:43:22] *** Joins: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[11:44:52] *** Quits: km (~km@static.55.93.181.135.clients.your-server.de) (Quit: Leaving)
[11:45:15] *** Joins: km (~km@static.55.93.181.135.clients.your-server.de)
[11:45:23] *** Joins: Enitin (~Enitin@82.102.22.85)
[11:45:47] *** Joins: wyclif (~wyclif@user/wyclif)
[11:45:58] *** Quits: roniez_ (~roniez@nixsec.se) (Quit: ZNC 1.8.2 - https://znc.in)
[11:46:27] <foo> hexnewbie, supakeen, Yhg1s, Repiphany, deniska - heh, there was an extra space in the API Secret Key. Super grateful for all your help. I learned about __'s in classes and the role the play, I learned about tempfiles, I learned about paying attention to defaults for args in a method, and more. Grateful for your individual roles as I worked through. :) Thank you, thank you.
[11:46:30] *** Joins: Hunterkll (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3)
[11:47:08] *** Quits: ideopathic (~ideopathi@99-6-12-70.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 268 seconds)
[11:47:35] *** Joins: ssbr (~ssbr@python/site-packages/ssbr)
[11:48:44] *** Quits: rob4226 (~Thunderbi@64.64.117.170) (Quit: rob4226)
[11:48:58] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Ping timeout: 244 seconds)
[11:49:02] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.2)
[11:49:11] *** Joins: Atque (~Atque@user/atque)
[11:49:26] *** Joins: Guddu (~Guddu@190.84.88.92)
[11:50:33] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[11:50:36] *** Joins: Nact (~l@host-85-27-122-107.dynamic.voo.be)
[11:53:40] *** Quits: y1n (~y1n@84-115-64-37.wifi.dynamic.surfer.at) (Ping timeout: 240 seconds)
[11:56:10] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 240 seconds)
[11:57:26] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:2489:d8ec:6e6c:e38b)
[11:58:28] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 252 seconds)
[11:59:14] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[12:00:34] *** Joins: gtz (~gtz@185.12.215.241)
[12:00:58] <gtz> I installed something via "pip install" and I see that it added entries to my sys.path. How does this work?
[12:01:06] <gtz> I can't find documentation about it.
[12:01:13] *** Quits: Warped (~Warped@user/warped) (Quit: We Gone! Bye Bye)
[12:01:40] <Yhg1s> gtz: there are a number of ways to do it, but it probably installed .pth files.
[12:01:56] <gtz> Yhg1s, I can't find any pth files
[12:03:18] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[12:04:12] *** Joins: mickey (~user@user/mickey)
[12:05:50] *** Joins: ParseError (~Parse_Err@2a01cb0807b805008982921db73973dc.ipv6.abo.wanadoo.fr)
[12:06:00] *** Quits: p-i- (~Ohmu@2403:6200:8870:41ad:ddbd:4a28:9a94:dc2) (Remote host closed the connection)
[12:06:58] *** Joins: p-i- (~Ohmu@2403:6200:8870:41ad:2401:260b:c92e:fea4)
[12:07:31] *** Joins: y1n (~y1n@84-115-65-142.wifi.dynamic.surfer.at)
[12:08:47] *** Joins: Warped (~Warped@user/warped)
[12:10:02] *** Joins: ideopathic (~ideopathi@99-6-12-70.lightspeed.irvnca.sbcglobal.net)
[12:10:28] *** Joins: ubert (~Thunderbi@178.115.64.138.wireless.dyn.drei.com)
[12:11:32] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[12:12:39] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:12:56] *** Joins: slav0nic (slav0nic@python.su)
[12:18:11] *** Joins: civillian (~nick@124-171-97-43.dyn.iinet.net.au)
[12:19:58] *** Joins: Gudddu (~Guddu@190.84.88.92)
[12:20:36] *** Joins: sazawal (~sazawal@106.213.43.60)
[12:21:21] *** Quits: schumaml (~schumaml@dslb-188-104-190-238.188.104.pools.vodafone-ip.de) (Quit: WeeChat 3.0.1)
[12:21:30] <gtz> never mind, I found it
[12:23:06] <jmcantrell> Why does this not work? https://mypy-play.net/?mypy=latest&python=3.9&gist=2378e74777da44a04d7ffc8b91c9a033
[12:23:13] *** Quits: Guddu (~Guddu@190.84.88.92) (Ping timeout: 252 seconds)
[12:24:29] *** Quits: minip (~minip@user/minip) (Remote host closed the connection)
[12:24:41] *** Quits: stevieh (~skrodzki@p2e584735.dip0.t-ipconnect.de) (Quit: Leaving.)
[12:26:31] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[12:27:26] *** Joins: wyclif (~wyclif@user/wyclif)
[12:28:52] *** Joins: hyper_dave (~hyper_dav@197.156.103.172)
[12:31:34] *** Joins: schumaml (~schumaml@dslb-188-104-190-238.188.104.pools.vodafone-ip.de)
[12:32:20] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 250 seconds)
[12:32:22] <Yhg1s> jmcantrell: what doesn't work about it?
[12:32:37] *** Joins: Julian (~tos9@python/site-packages/Julian)
[12:32:56] *** Joins: wyclif (~wyclif@user/wyclif)
[12:33:06] <jmcantrell> Yhg1s: `main.py:16: error: Cannot instantiate abstract class "Base" with abstract attribute "foo"`
[12:33:17] <AhmedAmerican> is there more faster way than https://bpa.st/4USQ
[12:33:37] <Yhg1s> jmcantrell: is that a mypy error, or a Python one?
[12:33:40] *** Quits: ubert (~Thunderbi@178.115.64.138.wireless.dyn.drei.com) (Ping timeout: 252 seconds)
[12:33:47] <jmcantrell> mypy
[12:34:34] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-56739f-227.dhcp.inet.fi)
[12:34:44] *** Joins: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[12:34:56] <bookworm> AhmedAmerican: just update directly?
[12:35:21] <Yhg1s> jmcantrell: sounds like a bug in mypy then.
[12:35:36] <jmcantrell> ok
[12:35:36] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:35:53] <bookworm> you want to set items not in B to NA right?
[12:36:32] <bookworm> so I'd just loop over the indices in A-B rather than your pointless zipping
[12:36:46] *** Quits: Gudddu (~Guddu@190.84.88.92) (Quit: Leaving)
[12:36:58] *** Quits: emika (~emika@83.136.182.67) (Ping timeout: 252 seconds)
[12:37:24] <jmcantrell> Yhg1s: do you use mypy? just curious
[12:37:58] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 250 seconds)
[12:38:03] *** Joins: emika (~emika@83.136.182.173)
[12:38:03] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:38:23] *** Joins: wyclif (~wyclif@user/wyclif)
[12:39:43] <AhmedAmerican> I've a list which i want to check a dictionary keys if all keys is there, and if not , so i want to assign the keys with `N/A` values
[12:42:09] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[12:45:15] <jmcantrell> will `cls.__subclasses__()` always return the classed in the order that they're defined?
[12:45:23] <Yhg1s> jmcantrell: no.
[12:45:39] <Yhg1s> jmcantrell: also, no, I don't use mypy. When I use a static typechecker, I use pytype.
[12:45:42] *** Joins: manti7 (~manti7@176.10.104.94)
[12:45:58] <jmcantrell> ok, thanks
[12:46:42] *** Quits: srji (~srji@static.43.141.203.116.clients.your-server.de) (Quit: Lost terminal)
[12:46:54] *** Joins: murr4y (ali@user/murr4y)
[12:47:02] *** Joins: srji (~srji@static.43.141.203.116.clients.your-server.de)
[12:51:40] *** Quits: fstd (~fstd@xdsl-78-35-86-208.nc.de) (Ping timeout: 240 seconds)
[12:52:08] <jinsun> pyright also complains about that line, I guess the type of cls cannot be figured out from that line, so is assumes Base, and Base cannot be instantiated obviously
[12:53:26] <jinsun> you can do `[cast(Any, cls)() for cls in Base.__subclasses__()]` to force it to assume Any instead of Base
[12:54:01] *** Quits: y1n (~y1n@84-115-65-142.wifi.dynamic.surfer.at) (Ping timeout: 248 seconds)
[12:55:04] <bookworm> AhmedAmerican: why do that at all? You can just use the .get() method on a dict to get a default when you actually need it
[12:55:37] <mgedmin> AhmedAmerican: for key in list_of_keys: my_dict.setdefault(key, 'N/A')
[12:57:31] *** Isthmusi is now known as Zal
[12:57:59] <AhmedAmerican> bookworm: am after a function which return for me a dict. then i compare the dict keys against that static list to assign the missed keys with `N/A` values
[12:58:51] <bookworm> yes, I'm arguing that you probably don't need to do that at all. mgedmin's solution should work nicely for you
[12:59:07] *** Joins: varaindemian (uid73404@id-73404.charlton.irccloud.com)
[12:59:59] <bookworm> 'N/A' can't be used easily in Python so I assume that's for the human to read?
[13:00:27] <bookworm> in any case, it seems like a structural problem
[13:00:31] *** Joins: jean-luc (~gryster@104.244.73.251)
[13:00:58] *** Joins: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net)
[13:02:41] *** Joins: cth (~Cthulchu@213.174.21.101)
[13:03:43] <AhmedAmerican> instead of checking all dict keys, i think it's better to check only the missed keys like that --> `[b.setdefault(k, 'N/A') for k in a if k not in b]`
[13:04:03] <AhmedAmerican> https://bpa.st/6JBA
[13:04:03] <mgedmin> setdefault already does the check
[13:04:38] <mgedmin> it is bad style to use a list comprehension solely for side effects; write a straightforward for loop instead
[13:04:51] <AhmedAmerican> got it.
[13:04:54] <AhmedAmerican> Thank you.
[13:05:38] *** Joins: plastico (~plastico@neomutt/plastico)
[13:05:48] <AhmedAmerican> :D it was a struggle with `ItemLoader` where i needed to monkeybatch that thing https://stackoverflow.com/questions/68853596/how-to-assign-n-a-value-for-items-not-found-within-itemloader
[13:06:13] *** dcaro_away is now known as dcaro
[13:06:17] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 248 seconds)
[13:06:24] *** Joins: trace1918 (~trace1918@94-137-125-182.customers.ownit.se)
[13:07:05] *** Joins: y1n (~y1n@84-115-64-118.wifi.dynamic.surfer.at)
[13:07:09] *** Joins: rubion (~rubion@cpc124306-ayle4-2-0-cust188.15-2.cable.virginm.net)
[13:08:29] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[13:08:42] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[13:09:12] *** Joins: shad (~shad@user/shad)
[13:10:57] *** Joins: Obo (~roberto@h-46-59-103-134.a498.priv.bahnhof.se)
[13:14:34] *** Joins: txtsd (~txtsd@user/txtsd)
[13:16:25] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[13:17:52] *** Quits: jazzy (~jaziz@2600:380:4548:2564:9586:3cbe:697a:6fd1) (Read error: Connection reset by peer)
[13:18:38] *** Joins: jazzy (~jaziz@2600:380:4548:2564:b0c1:fe1:d496:dc8b)
[13:19:52] *** Quits: rubion (~rubion@cpc124306-ayle4-2-0-cust188.15-2.cable.virginm.net) (Ping timeout: 252 seconds)
[13:20:10] *** Quits: tomboy64 (~tomboy64@user/tomboy64) (Ping timeout: 240 seconds)
[13:22:01] *** Joins: freeworld (~vit@chello085216193138.chello.sk)
[13:22:07] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (Ping timeout: 268 seconds)
[13:24:44] *** Joins: Dantalion (~Dantali0n@217-123-73-108.cable.dynamic.v4.ziggo.nl)
[13:25:48] *** Quits: Dantali0n (~Dantali0n@217-123-73-108.cable.dynamic.v4.ziggo.nl) (Ping timeout: 268 seconds)
[13:26:29] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[13:27:27] *** Quits: zaquest (~notzaques@5.128.210.178) (Remote host closed the connection)
[13:27:51] *** Quits: comradeCrow (~comradeCr@cpe-172-116-137-199.socal.res.rr.com) (Read error: Connection reset by peer)
[13:31:38] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[13:31:51] *** Joins: georgios (~georgios@user/georgios)
[13:32:26] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[13:32:31] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[13:33:32] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[13:34:26] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[13:35:16] *** Quits: WayToDoor7 (~WayToDoor@user/waytodoor) (Quit: See you later :))
[13:36:07] *** Joins: tomboy64 (~tomboy64@user/tomboy64)
[13:36:09] *** Joins: fikran (~fikran@user/fikran)
[13:36:19] *** Joins: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it)
[13:36:37] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:39:32] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[13:39:59] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:41:03] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[13:41:51] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:42:58] *** Quits: Dantalion (~Dantali0n@217-123-73-108.cable.dynamic.v4.ziggo.nl) (Ping timeout: 252 seconds)
[13:45:12] *** Joins: diamondbond (~diamondbo@175.157.238.245)
[13:52:44] *** Quits: diamondbond (~diamondbo@175.157.238.245) (Quit: Leaving)
[13:52:46] *** Quits: frost (~frost@59.71.240.119) (Quit: Connection closed)
[13:53:31] *** Koffa is now known as list
[13:53:35] *** list is now known as Koffa
[13:53:41] *** Koffa is now known as list
[13:53:42] *** list is now known as Koffa
[13:53:58] *** Quits: y1n (~y1n@84-115-64-118.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[13:55:42] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-58c384-213.dhcp.inet.fi)
[13:56:42] *** Joins: darksun (~darksun@user/darksun)
[14:04:10] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Ping timeout: 240 seconds)
[14:04:48] <jmcantrell> is parsing output of `mount` the best way to get the mounted filesystems?
[14:04:51] *** Quits: georgios (~georgios@user/georgios) (Quit: Konversation terminated!)
[14:05:06] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[14:05:30] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 250 seconds)
[14:05:37] *** Joins: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk)
[14:05:51] <mgedmin> probably not
[14:06:11] <deniska> jmcantrell: if you don't mind pulling in additional packages, psutil has functions for that
[14:06:13] <mgedmin> I would look for a package on pypi
[14:06:44] <deniska> https://psutil.readthedocs.io/en/latest/#disks
[14:06:47] *** Joins: Julian (~tos9@python/site-packages/Julian)
[14:06:51] <jmcantrell> i just noticed is_mount() in os.path and pathlib
[14:07:29] *** Joins: Naan (~Naan@user/naan)
[14:07:53] *** Joins: Ergo^ (~ergo@91.238.59.144)
[14:07:53] <mgedmin> yeah, but it wouldn't be useful for enumerating mounts
[14:08:04] *** Joins: bandit_za (~bandit_za@2c0f:ed28:b016:7760::1ed)
[14:08:25] <mgedmin> you don't want to recursively walk / and call .is_mount() on every subdirectory
[14:11:01] <jmcantrell> for this, i don't need to. i just need to know if the path given is a mount point
[14:11:19] <mgedmin> ah, cool
[14:11:47] <mgedmin> BTW .is_mount() merely checks the st_dev field so it won't notice bind mounts, in case that's important for your use case
[14:13:53] *** Joins: Anderson-D (sid146635@id-146635.tinside.irccloud.com)
[14:14:27] <Anderson-D> Is it possible to parse & split complex nested multi-statement PostgreSQL query string into an array of multiple queries?
[14:14:30] <jmcantrell> mgedmin: i don't think so, but i appreciate you pointing that out
[14:14:42] <Anderson-D> (Using psycopg2, e.g.)
[14:15:14] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[14:15:46] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[14:16:23] *** Quits: noctavian (~noctavian@gateway/tor-sasl/noctavian) (Remote host closed the connection)
[14:18:42] *** Joins: bandit_za39 (~bandit_za@2c0f:ed28:b016:7760::1ed)
[14:19:04] *** Quits: bandit_za (~bandit_za@2c0f:ed28:b016:7760::1ed) (Killed (NickServ (GHOST command used by bandit_za39)))
[14:19:09] *** bandit_za39 is now known as bandit_za
[14:19:51] *** Joins: Enitin (~Enitin@82.102.22.85)
[14:20:22] *** Quits: cdown (~cdown@82-69-42-66.dsl.in-addr.zen.co.uk) (Ping timeout: 252 seconds)
[14:22:13] *** Joins: noctavian (~noctavian@gateway/tor-sasl/noctavian)
[14:24:13] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 252 seconds)
[14:25:32] *** connor_goodwolf_ is now known as connor_goodwolf
[14:28:28] *** Quits: cth (~Cthulchu@213.174.21.101) (Ping timeout: 250 seconds)
[14:32:03] *** Joins: besnn (~besnn@user/besnn)
[14:33:02] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-56739f-227.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:33:40] *** Quits: upsala (~zcb@185.213.155.160) (Ping timeout: 250 seconds)
[14:35:01] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[14:35:09] *** Quits: ihristov (~ihristov@85.187.46.226) (Quit: Connection closed)
[14:35:30] *** Joins: upsala (~zcb@185.213.155.160)
[14:38:38] *** Joins: oelewapperke (~cde@ns509915.ip-198-245-49.net)
[14:40:15] *** Joins: jokoon (~eio@2a01:e0a:542:b20:3da2:ca44:66c6:d0f8)
[14:41:00] *** Quits: kosh_ (~kosh@user/kosh) (Quit: Leaving)
[14:43:05] <lericson> how is it that a < b < c works in python?
[14:43:50] <deniska> lericson: as a special part of syntax
[14:43:53] <grawity> it just does
[14:44:07] <grawity> language syntax works in whatever way it's defined to work
[14:44:19] <lericson> i mean mechanically why does it work
[14:44:24] <lericson> while it doesn't with numpy for example
[14:44:38] <deniska> lericson: python translates it to (a < b) and (b < c)
[14:44:53] <lericson> aha
[14:45:04] <lericson> and this coerces a < b into a bool
[14:45:13] <lericson> whereas it's an array of bools in the numpy case
[14:45:17] <mgedmin> and also takes care to evaluate b only once
[14:45:46] <deniska> lericson: `and` doesn't coerce to bool, but code can't override what `and` is doing
[14:46:14] <lericson> and what is and doing
[14:46:38] <deniska> `and` evaluates either to the left side if it's truthy, or to the right side if it's falsy
[14:46:46] <deniska> wait, that's `or`
[14:46:50] <lericson> i called that coerce to bool but i guess that's not literally true
[14:46:55] <deniska> `and` evaluates either to the right side if it's truthy, or to the left side if it's falsy
[14:47:15] <lericson> "squint at it boolishly"
[14:48:29] <deniska> it does call bool() on an object, but it evaluates to the object itself, not to what bool() returned
[14:49:11] <lericson> so if you could have numpy understand that arrays compare either universally or existentially quantified, you could have a < b c work
[14:49:21] <lericson> like a context manager that makes a < b actually a bool
[14:49:52] <lericson> or some kind of annotation, np.compares_all(arr) < b
[14:50:00] *** Joins: arinov (~arinov@213.194.126.155)
[14:50:04] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 252 seconds)
[14:50:50] *** Joins: computeiro (~Wender@189.37.69.233)
[14:50:50] <deniska> lericson: well, there's no way to make numpy_array[a < b < c] work with the current python data model
[14:51:00] <lericson> that won't work
[14:51:07] <lericson> but my_funny_business(arr) < b < c
[14:51:16] <lericson> or well it'd have to be on b
[14:51:27] <sunny93> where is Modules/Setup.local file in Cpython? I am reading the python c extension document (https://docs.python.org/3.8/extending/extending.html#compilation-and-linkage).
[14:52:03] <sunny93> "just place your file (spammodule.c for example) in the Modules/ directory of an unpacked source distribution, add a line to the file Modules/Setup.local describing your file:"
[14:52:05] <lericson> sunny93: you create it
[14:52:06] <deniska> lericson: you mean inventing an object which would keep track what it was just compared to?
[14:52:12] <lericson> sunny93: https://github.com/python/cpython/blob/main/Modules/Setup
[14:52:18] *** Quits: shad (~shad@user/shad) (Ping timeout: 250 seconds)
[14:53:20] <sunny93> ok thanks
[14:53:42] *** Joins: stevieh (~skrodzki@p2e584735.dip0.t-ipconnect.de)
[14:54:54] *** Joins: aakashi2001 (~aakashi20@user/aakashi2001)
[14:55:20] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[14:56:16] *** Joins: shad (~shad@user/shad)
[14:56:39] *** Quits: aakashi2001 (~aakashi20@user/aakashi2001) (Remote host closed the connection)
[14:57:55] *** Joins: aakashi2001 (~aakashi20@user/aakashi2001)
[14:58:50] *** Joins: fassl (~fassl@2a02:8388:1987:9380:c4ee:81c5:625a:a215)
[15:02:16] *** Quits: besnn (~besnn@user/besnn) (Ping timeout: 250 seconds)
[15:03:40] *** Quits: audiobirb (~audio@2603-8081-1801-3bb5-27c8-a94a-768a-c5a3.res6.spectrum.com) (Ping timeout: 240 seconds)
[15:04:24] <lericson> deniska: https://bpa.st/PL3Q
[15:04:26] <lericson> boom
[15:05:06] *** Quits: amoe (~amoe@visarend.solasistim.net) (Quit: leaving)
[15:05:37] *** Joins: cdown (~cdown@82-69-42-66.dsl.in-addr.zen.co.uk)
[15:06:42] *** Quits: mickey (~user@user/mickey) (Remote host closed the connection)
[15:07:11] *** Joins: mickey (~user@user/mickey)
[15:09:52] *** Quits: cdown (~cdown@82-69-42-66.dsl.in-addr.zen.co.uk) (Ping timeout: 252 seconds)
[15:11:27] *** Joins: georgios (~georgios@user/georgios)
[15:12:58] <p-i-> Can anyone help me with a git-clone / import issue? I've just done 'git clone ...' which created python-binance/ in my proj-root. I renamed it to python_binance. Doc 'hello world' says to `from binance import AsyncClient` but I can't get this to work.
[15:13:12] <p-i-> `import python_binance` works
[15:14:07] <p-i-> But `from python_binance import AsyncClient` doesn't work.
[15:14:19] <p-i-> `from python_binance.binance import AsyncClient` doesn't work.
[15:14:23] <p-i-> I'm guessing at this point.
[15:15:29] <deniska> lericson: ah, you wanted to check whether all elements are within range?
[15:15:33] <p-i-> The original clone had a path python-binance/binance so I'm guessing that pip-install would have exposed that 'binance' subfolder. And that's why the hello-world-doc `from binance import AsyncClient` works for a non-clone user.
[15:15:47] <p-i-> Am I hitting a relative/absolute path issue?
[15:16:13] <p-i-> I'm guessing I have to sys.path.add('python_binance')
[15:17:35] <deniska> p-i-: why not to pip install what you've cloned?
[15:17:44] *** Joins: i0e (~is0ke3@user/is0ke3)
[15:17:51] <p-i-> deniska: I didn't know I could do that. How to do it?
[15:18:07] <p-i-> yeah now I'm running into more errors, I think I need to do this.
[15:18:15] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-56739f-227.dhcp.inet.fi)
[15:18:15] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[15:18:53] <deniska> p-i-: pip install path/to/directory
[15:18:59] *** Joins: matkor (~matkor@93.179.197.152)
[15:19:04] *** Joins: puff (~user@s0106d4ca6d80a83c.vs.shawcable.net)
[15:19:08] <p-i-> https://stackoverflow.com/questions/30292039/pip-install-forked-github-repo <-- looks like I can do it straight from the remote without creating a local
[15:19:09] <deniska> p-i-: and don't clone it inside your project tree, put it elsewhere
[15:19:21] <deniska> p-i-: and yeah, you can pip install a git url
[15:19:28] <p-i-> groovy
[15:20:05] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[15:22:58] *** Quits: sazawal (~sazawal@106.213.43.60) (Quit: Leaving)
[15:23:08] *** Quits: aakashi2001 (~aakashi20@user/aakashi2001) (Quit: Leaving)
[15:23:39] *** Quits: Abrax (~Abrax@user/abrax) (Read error: Connection reset by peer)
[15:23:43] <p-i-> Fantastic! So much cleaner. I had to abandon poetry. :( It's lovely for only using polished packages, but anything that requires special install it's a fail.
[15:23:57] <p-i-> back to the bash installer scripts.
[15:24:04] *** Joins: Abrax (~Abrax@user/abrax)
[15:25:29] *** Quits: mikkel (~mike@208.110.120.167) (Ping timeout: 248 seconds)
[15:25:38] *** Joins: Enitin (~Enitin@82.102.22.85)
[15:25:38] *** Joins: Dantali0n (~Dantali0n@217-123-73-108.cable.dynamic.v4.ziggo.nl)
[15:25:52] *** Joins: p-i-_ (~Ohmu@2403:6200:8870:41ad:f0a9:ab63:3b64:b6a3)
[15:26:55] *** Joins: Jonny[5] (~Jonny5]@185.26.194.49)
[15:28:14] <txtsd> What package would y'all recommend to build an IRC bot/client in? Not a bot that just replies to commands like limnoria.
[15:28:34] <txtsd> I've tried pydle, but the documentation isn't current or very helpful.
[15:29:31] *** Quits: p-i- (~Ohmu@2403:6200:8870:41ad:2401:260b:c92e:fea4) (Ping timeout: 258 seconds)
[15:30:00] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:31:03] *** Joins: analoq (~yashi@p508bee85.dip0.t-ipconnect.de)
[15:32:12] *** Quits: jokoon (~eio@2a01:e0a:542:b20:3da2:ca44:66c6:d0f8) (Ping timeout: 258 seconds)
[15:33:00] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[15:33:19] *** Joins: mikkel (~mike@208.110.120.167)
[15:34:39] *** Joins: MrAlexBailey (~Alex@104-11-73-100.lightspeed.tukrga.sbcglobal.net)
[15:36:55] *** Quits: jean-luc (~gryster@104.244.73.251) (Changing host)
[15:36:55] *** Joins: jean-luc (~gryster@user/jean-luc)
[15:37:49] *** Joins: torandu (~sean@94.10.125.197)
[15:39:01] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 252 seconds)
[15:39:36] *** Quits: torandu (~sean@94.10.125.197) (Client Quit)
[15:43:25] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[15:44:46] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[15:45:31] *** Joins: fikran (~fikran@user/fikran)
[15:45:58] *** Joins: besnn (~besnn@user/besnn)
[15:49:51] *** Quits: p-i-_ (~Ohmu@2403:6200:8870:41ad:f0a9:ab63:3b64:b6a3) (Remote host closed the connection)
[15:50:26] *** Joins: p-i- (~Ohmu@mx-ll-171.6.231-122.dynamic.3bb.co.th)
[15:52:08] *** Joins: pycurious (~Adium@user/pycurious)
[15:52:21] *** Joins: aakashi2001 (~aakashi20@user/aakashi2001)
[15:53:49] <p-i-> Does anyone know how to prevent VSCode's hilighter from flagging an import (that actually does work)?
[15:54:13] <p-i-> It doesn't seem to be smart enough to process the shebang & find the package.
[15:55:01] *** Quits: aakashi2001 (~aakashi20@user/aakashi2001) (Remote host closed the connection)
[15:55:04] *** Joins: kostkon (~kostkon@2a02:587:a110:6f20:b1f0:6beb:6b69:cf32)
[15:55:14] <foureyes> set up your env correctly
[15:55:42] *** Joins: y1n (~y1n@84-115-64-115.wifi.dynamic.surfer.at)
[15:56:37] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[15:57:03] *** Joins: wyclif (~wyclif@user/wyclif)
[15:57:28] *** Joins: aakashi2001 (~aakashi20@user/aakashi2001)
[15:59:10] *** Quits: MrAlexBailey (~Alex@104-11-73-100.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 240 seconds)
[16:00:03] *** Quits: aakashi2001 (~aakashi20@user/aakashi2001) (Remote host closed the connection)
[16:00:23] *** Joins: jokoon (~eio@2a01:e0a:542:b20:1561:2cb9:9952:8544)
[16:00:40] *** Quits: shad (~shad@user/shad) (Ping timeout: 240 seconds)
[16:01:10] *** Quits: roadt (~roadt@36.5.93.233) (Ping timeout: 240 seconds)
[16:01:35] *** Joins: roadt (~roadt@36.5.216.242)
[16:01:38] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 250 seconds)
[16:02:31] *** Joins: wyclif (~wyclif@user/wyclif)
[16:03:10] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[16:04:32] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-56739f-227.dhcp.inet.fi) (Read error: Connection reset by peer)
[16:07:37] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[16:08:00] *** Joins: wyclif (~wyclif@user/wyclif)
[16:09:05] *** Quits: optimant (quasselcor@user/optimant) (Quit: Quitting)
[16:09:29] *** Joins: optimant (~prime@user/optimant)
[16:11:39] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[16:13:21] *** Quits: lapno (~lapno@enx167.neoplus.adsl.tpnet.pl) (Remote host closed the connection)
[16:14:38] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 250 seconds)
[16:15:14] *** Quits: Voxel (~Voxel@ip178-67-155-188.onego.ru) (Quit: Client closed)
[16:15:59] *** Quits: milosz_ (~milosz@user/milosz) (Ping timeout: 252 seconds)
[16:16:19] *** Joins: wyclif (~wyclif@user/wyclif)
[16:19:36] *** Joins: nomic (~nomic@185.192.69.143)
[16:19:50] *** Quits: stevieh (~skrodzki@p2e584735.dip0.t-ipconnect.de) (Quit: Leaving.)
[16:20:07] *** Quits: dre (~dre@2001:8003:c932:c301:2c3:7064:672c:648) (Ping timeout: 258 seconds)
[16:20:09] *** Joins: rannnn8888 (~rannnn888@bzq-79-183-158-130.red.bezeqint.net)
[16:21:06] *** Joins: nomic2 (~nomic@2a00:23c6:9902:2401:f819:f4e0:c7b3:7b76)
[16:21:18] <rannnn8888> to deal with rss in site ? i need make a loop ? or have other way :X  ?
[16:21:22] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[16:21:49] *** Joins: wyclif (~wyclif@user/wyclif)
[16:21:58] *** Quits: nomic2 (~nomic@2a00:23c6:9902:2401:f819:f4e0:c7b3:7b76) (Client Quit)
[16:22:01] *** Quits: nomic (~nomic@185.192.69.143) (Client Quit)
[16:23:07] *** Joins: shad (~shad@user/shad)
[16:24:25] <rannnn8888> i get 403 after sometimes , if site make rss why its block this ?
[16:24:37] *** Joins: dez (uid92154@user/dez)
[16:25:58] *** Joins: zeden (~zeden@user/zeden)
[16:26:40] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[16:27:18] *** Joins: wyclif (~wyclif@user/wyclif)
[16:27:54] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-56739f-227.dhcp.inet.fi)
[16:30:46] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[16:31:10] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 240 seconds)
[16:31:22] *** Joins: djhankb (~djhankb@208.113.164.68)
[16:31:32] *** Quits: ssbr (~ssbr@python/site-packages/ssbr) (Ping timeout: 250 seconds)
[16:34:52] *** Joins: nabuco (~skeksil@139.47.69.197)
[16:35:25] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-56739f-227.dhcp.inet.fi) (Read error: Connection reset by peer)
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:37:17] *** Quits: PyT001 (~PyT001@2402:e280:3d22:227:a497:ef4b:b3f:c965) (Quit: Client closed)
[16:40:34] *** Joins: humberto1 (~humbertow@2806:107e:f:5e47:24b1:cf7d:64:580d)
[16:42:00] *** Quits: hyper_dave (~hyper_dav@197.156.103.172) (Quit: WeeChat 3.2)
[16:44:34] *** Joins: nomic (~nomic@185.192.69.143)
[16:44:56] *** Joins: akaWolf (~akaWolf@akawolf.org)
[16:46:11] *** Joins: audiobirb (~audio@2603-8081-1801-3bb5-65bf-4803-7300-cd0a.res6.spectrum.com)
[16:46:45] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:48:42] *** Quits: y1n (~y1n@84-115-64-115.wifi.dynamic.surfer.at) (Ping timeout: 268 seconds)
[16:53:10] *** Quits: mutandis (~mut@c-73-129-211-144.hsd1.va.comcast.net) (Quit: meow)
[16:54:29] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[16:54:57] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[16:55:29] *** Joins: hyper_dave (~hyper_dav@197.156.103.172)
[16:59:04] *** Joins: MrAlexBailey (~Alex@104-11-73-100.lightspeed.tukrga.sbcglobal.net)
[16:59:42] *** Quits: hyper_dave (~hyper_dav@197.156.103.172) (Ping timeout: 250 seconds)
[17:00:20] *** Joins: y1n (~y1n@84-115-64-115.wifi.dynamic.surfer.at)
[17:00:38] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[17:02:37] *** Quits: emika (~emika@83.136.182.173) (Ping timeout: 252 seconds)
[17:02:40] *** Quits: nabuco (~skeksil@139.47.69.197) (Ping timeout: 258 seconds)
[17:02:41] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[17:02:47] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[17:02:55] *** Joins: nabuco (skeksil@gateway/vpn/protonvpn/nabuco)
[17:03:18] *** Joins: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net)
[17:04:04] *** Joins: emika (~emika@83.136.182.14)
[17:07:28] *** Joins: lxer (~lx@ip5f5bf666.dynamic.kabel-deutschland.de)
[17:09:40] *** Quits: audiobirb (~audio@2603-8081-1801-3bb5-65bf-4803-7300-cd0a.res6.spectrum.com) (Ping timeout: 240 seconds)
[17:10:04] *** Quits: Nact (~l@host-85-27-122-107.dynamic.voo.be) (Quit: Konversation terminated!)
[17:11:13] *** Quits: puff (~user@s0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[17:11:39] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-56739f-227.dhcp.inet.fi)
[17:11:40] *** Joins: tmm88 (~tmm88@2001:8a0:ff48:1500:b66b:fcff:fe62:e4a9)
[17:12:03] *** Joins: puff (~user@s0106d4ca6d80a83c.vs.shawcable.net)
[17:13:46] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[17:14:40] *** Joins: hyper_dave (~hyper_dav@197.156.103.172)
[17:17:28] *** Quits: dulanic (~dulanic@47.187.144.163) (Ping timeout: 252 seconds)
[17:19:23] <lxer> Does anyone know some good, large python codebase (using some good architecture and python practices). I want to use it to study how large python projects are structured, but it is hard to find any.
[17:20:11] *** Joins: Naan` (~Naan@user/naan)
[17:22:39] *** Joins: phylaz (~phylaz@219.92-221-176.customer.lyse.net)
[17:23:34] *** Quits: rannnn8888 (~rannnn888@bzq-79-183-158-130.red.bezeqint.net) (Ping timeout: 246 seconds)
[17:24:04] <IceMichael> lxer, excellent question, would also love to see something like that
[17:24:19] *** Quits: venue (~venue@user/venue) (Quit: adios)
[17:26:02] *** Quits: jabberwock (~jessy@user/jabberwock) (Quit: ZNC 1.9.x-git-111-f2cdc3db - https://znc.in)
[17:27:09] *** Parts: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it) ()
[17:27:19] *** Quits: nomic (~nomic@185.192.69.143) (Quit: Leaving)
[17:27:29] <p-i-> How to write this asyncio code correctly: https://bpa.st/JH5A ?
[17:27:50] <p-i-> It should perform a couple of initial queries, then spawn a never-ending task (websocket listener).
[17:27:52] *** Quits: shad (~shad@user/shad) (Ping timeout: 250 seconds)
[17:27:56] <p-i-> But how to stop it terminating?
[17:28:10] <p-i-> while True: await asyncio.sleep(1) ?
[17:28:36] *** Quits: gloomy_desktop (~ldorigo@81.161.149.37) (Remote host closed the connection)
[17:29:15] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[17:29:46] *** Joins: torandu (~sean@94.10.125.197)
[17:30:07] *** Joins: jabberwock (~jessy@user/jabberwock)
[17:30:20] *** Joins: dulanic (~dulanic@47.187.144.163)
[17:31:58] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[17:32:24] *** Joins: Elzington_ (~Elzington@68.235.43.100)
[17:32:32] *** Quits: Jonny[5] (~Jonny5]@185.26.194.49) (Read error: Connection reset by peer)
[17:33:05] *** Quits: ogis (~Android@p2037202-ipngn201011tokaisakaetozai.aichi.ocn.ne.jp) (Quit: -a- IRC for Android 2.1.59)
[17:33:29] <gitesh> I don't remember scope well
[17:33:47] <gitesh> while we invoke a function by providing arguments
[17:33:56] <gitesh> those arguments are aliases right?
[17:34:40] *** Quits: Elzington (~Elzington@68.235.43.14) (Ping timeout: 240 seconds)
[17:39:16] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 268 seconds)
[17:39:43] <Yhg1s> gitesh: they are references. Everything in Python is a reference. (See bit.ly/pynames1)
[17:39:50] *** Joins: lapno (~lapno@enx167.neoplus.adsl.tpnet.pl)
[17:43:15] *** Joins: Sheilong (uid293653@id-293653.charlton.irccloud.com)
[17:43:40] <gitesh> Yhg1s: are there precedence over references
[17:43:48] <gitesh> like reference in a function
[17:43:49] <bjs> gitesh: what does that mean?
[17:44:03] <gitesh> like global variable reference and local variable reference
[17:44:22] <bjs> gitesh: arguments to functions always become local variables,  if that's what you're asking?
[17:44:39] <bjs> (with the parameter as the variable name)
[17:44:48] <gitesh> yeah ok got that bjs
[17:45:00] <bjs> p-i-: why not `await kline_listener(client)` rather than this start_soon(asyncio.create_task, ...)
[17:45:22] <bjs> p-i-: if you create_task a thing you really need to `await` it somewhere probably
[17:46:18] *** Joins: deviantfero (~deviantfe@190.150.27.58)
[17:47:42] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:48:16] *** Quits: y1n (~y1n@84-115-64-115.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[17:49:10] *** Quits: jaggz (~jaggz@user/jaggz) (Ping timeout: 240 seconds)
[17:50:51] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-56739f-227.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:53:00] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[17:54:53] *** Joins: fikran (~fikran@user/fikran)
[17:54:55] <jean-luc> if you wanna do async programming look into node
[17:55:00] <jean-luc> its designed for that
[17:55:12] <jean-luc> <3 python but yeah use the proper tool for the job as well
[17:56:10] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[17:56:17] *** Joins: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it)
[17:57:23] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-56739f-227.dhcp.inet.fi)
[17:57:41] <Yhg1s> jean-luc: you realise, I hope, that node's design was based on a Python library.
[17:58:44] *** Joins: be3uykpy (~be3uykpy@2a00:a040:19a:b060:890a:9376:978d:c599)
[17:58:45] *** Quits: Naan (~Naan@user/naan) (Quit: Leaving)
[17:59:09] <Yhg1s> (also, async programming isn't a job, it's a tool)
[17:59:51] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[18:00:17] *** Joins: y1n (~y1n@84-115-64-115.wifi.dynamic.surfer.at)
[18:00:57] *** Joins: Barones (~Barones@2804:7f3:8987:a56:1904:b84d:d454:b1fa)
[18:01:28] *** Joins: mexen (uid495612@user/mexen)
[18:01:41] *** Joins: shad (~shad@user/shad)
[18:02:07] <jean-luc> no i didnt know that re a python library
[18:03:08] <jean-luc> which one would that be?
[18:03:42] <Wulf> How can I retrieve a specific object from a set? i.e. obj0 = "blah"; s = {obj0}; obj1 = s.get("blah"); obj0 is obj1
[18:03:53] *** Quits: MrAlexBailey (~Alex@104-11-73-100.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 248 seconds)
[18:04:03] <grym> Wulf: aiui, you don't
[18:04:05] <Yhg1s> jean-luc: Twisted.
[18:04:06] <grym> that's not what sets are for
[18:04:20] <jean-luc> thanks i'll look into that
[18:04:27] <Wulf> grym: why not?
[18:04:42] <Yhg1s> Wulf: because it's just a collection of objects. There's no key attached to them.
[18:04:51] *** Joins: sn1tch3r (~sn1tch3r@user/sn1tch3r)
[18:04:56] <Wulf> each is its own key
[18:05:06] <Yhg1s> Wulf: then you need a dict.
[18:05:12] <grym> Wulf: there's add, remove, discard, and pop
[18:05:19] *** Quits: Atque (~Atque@user/atque) (Ping timeout: 252 seconds)
[18:05:33] <rud0lf> why do you need obj1 = s.get(obj1) ?
[18:05:41] <Wulf> rud0lf: want to save memory
[18:05:59] <bjs> Wulf: but if you wanted `obj0 is obj1` then you don't need to "get" from the set at all
[18:06:02] <bjs> Wulf: oh, save memory?
[18:06:05] <jean-luc> a unique* collection of objects
[18:06:17] <jean-luc> thanks Yhg1s is this the twisted of which u speak https://twistedmatrix.com/trac/
[18:06:20] <bjs> I could see this being useful if you had `obj0 is not obj1`
[18:06:27] <Yhg1s> jean-luc: yes.
[18:06:30] <jean-luc> ty
[18:07:39] <bjs> Wulf: I don't really understand because if you already have obj0 then why do you want to retrieve it from the set? You already have it.  I can't see how this saves memory
[18:08:12] <Wulf> bjs: I don't have it anymore, only inside the set. This was just for illustration
[18:08:14] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Client Quit)
[18:08:25] <bjs> Wulf: but then how can you get() it if you don't have it?
[18:08:31] <grym> ^
[18:08:32] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[18:09:09] <Wulf> bjs: I'd create a new one which is "==" but not "is"
[18:09:26] <bjs> Wulf: okay, what you're describing is a dict
[18:09:50] *** Joins: thiras (~thiras@user/thiras)
[18:10:09] *** Joins: MrAlexBailey (~Alex@104-11-73-100.lightspeed.tukrga.sbcglobal.net)
[18:12:27] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[18:15:56] *** Quits: fdan (~fdan@192.146.154.3) (Quit: Client closed)
[18:17:42] *** Quits: gtz (~gtz@185.12.215.241) (Ping timeout: 250 seconds)
[18:18:02] *** Joins: todda7 (~torstein@240.red-81-37-247.dynamicip.rima-tde.net)
[18:18:56] *** Joins: stevieh (~skrodzki@p2e584735.dip0.t-ipconnect.de)
[18:20:40] *** Quits: shad (~shad@user/shad) (Ping timeout: 240 seconds)
[18:20:43] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[18:23:10] *** Joins: shad (~shad@user/shad)
[18:26:52] *** Joins: gambl0re (~gambl0re@104.247.245.205)
[18:30:54] *** Quits: matkor (~matkor@93.179.197.152) (Quit: Konversation terminated!)
[18:31:15] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[18:32:00] *** Quits: nabuco (skeksil@gateway/vpn/protonvpn/nabuco) (Remote host closed the connection)
[18:32:16] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 252 seconds)
[18:33:25] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[18:33:55] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[18:34:10] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[18:35:51] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-6422-dda3-b794-731f.res6.spectrum.com)
[18:36:38] *** Joins: Julian (~tos9@python/site-packages/Julian)
[18:38:37] *** Joins: plaisthos (~arne@openvpn/developer/plaisthos)
[18:39:38] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[18:39:58] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 252 seconds)
[18:40:21] <plaisthos> I am trying to figure out how to do padding in f string that works with % with "negative" padding
[18:40:27] *** Joins: Enitin (~Enitin@82.102.22.84)
[18:40:30] <plaisthos> "%-10s %-10s" % ("foo", "bar") works fine
[18:40:31] <plaisthos> but
[18:40:36] <plaisthos>  f'{"foo":10} {"bar":-10s}'
[18:40:40] <plaisthos> throws an error
[18:40:48] *** Joins: Roey (~Roey@user/Roey)
[18:42:43] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Ping timeout: 252 seconds)
[18:43:41] <grym> plaisthos: i think you want :<10
[18:43:56] <grym> (right justify)
[18:44:01] <grym> > is left-justified
[18:44:32] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[18:44:34] <plaisthos> thanks
[18:44:36] <grym> f'{"foo":<10} {"bar":<10}' == "%-10s %-10s" % ("foo", "bar")
[18:44:41] <plaisthos> yes that works
[18:44:58] <grym> silly DSLs :)
[18:45:20] <plaisthos> I looked at https://docs.python.org/3/reference/lexical_analysis.html#f-strings but I didn't see it there
[18:46:14] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Client Quit)
[18:47:37] <OMGOMG> https://www.w3schools.com/python/ref_string_format.asp
[18:47:48] <grym> https://docs.python.org/3/library/string.html#format-specification-mini-language
[18:47:53] <grym> stupid thing hides
[18:48:02] *** Quits: y1n (~y1n@84-115-64-115.wifi.dynamic.surfer.at) (Ping timeout: 250 seconds)
[18:48:30] <OMGOMG> help(str.format) is unusually useless
[18:49:26] <grym> there's also pyformat.info but it's kind of awkwardly out of date not
[18:49:28] <grym> now*
[18:50:02] *** Quits: Brion (~Brion@gateway/tor-sasl/brion) (Remote host closed the connection)
[18:50:10] *** Quits: lapno (~lapno@enx167.neoplus.adsl.tpnet.pl) (Ping timeout: 268 seconds)
[18:50:51] *** Joins: Brion (~Brion@gateway/tor-sasl/brion)
[18:51:57] *** Parts: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it) ()
[18:52:28] *** Joins: Samian (~Sami@2620:10d:c091:480::1:4ae4)
[18:52:41] <Samian> Is it considered bad practice to not use a unit test framework to do unit test? For example, I have a program where many code paths can be taken. Single GPU codepath. Multi-GPU codepath. Multi-node, multi-gpu code path. And many within those.  I have an idea of storing values in sqlite and testing code paths against each other to make sure that the same inputs always return the same outputs no matter what code path.
[18:53:11] <grym> Samian: i run my non-unit test tests in pytest too
[18:53:15] <Samian> I'm not even sure if there's a unit test framework, library, or python package that even does that
[18:53:55] <grym> some of my pytest tests talk to a sqlite database to cache results, though
[18:55:24] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 250 seconds)
[18:55:56] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Read error: Connection reset by peer)
[18:56:16] <Samian> What stands out about my sqlite results comparison idea is that I'd need to add a bunch of if unit_test_mode: do_unit_test_comparison_stuff()
[18:56:25] *** Joins: nabuco (~skeksil@139.47.69.197)
[18:56:26] <Samian> and I'm not sure if that's a good idea.
[18:56:32] <grym> that's a bad idea
[18:56:46] <Samian> I don't remember pytest not having a bunch of code stick in the middle of the program
[18:56:48] <grym> or at least an ungainly one
[18:57:36] <Samian> grym  but how do I get around that when the results aren't returned?  aha.. I can make break up the program a bit more
[18:57:53] <grym> "promote I/O to management" :)
[18:58:00] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[18:58:01] <grym> https://www.youtube.com/watch?v=DJtef410XaM
[18:58:12] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[18:58:22] *** Quits: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk) (Quit: Leaving)
[18:58:42] *** Joins: akk (~akk@174-28-98-206.albq.qwest.net)
[18:59:12] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[18:59:25] <Samian> grym have you tried unittest and you still prefer pytest over it?
[18:59:37] <grym> Samian: yes
[18:59:40] *** Quits: besnn (~besnn@user/besnn) (Quit: Leaving)
[18:59:44] *** Joins: fabs (~fabs@2607:fb60:2501:2805:dea6:32ff:fed8:2af3)
[19:00:10] <grym> conveniently, pytest can run unittest tests
[19:00:11] <Samian> cool. You're a wiseman so I'll save myself time and go with pytest :D
[19:00:58] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[19:01:12] *** Joins: y1n (~y1n@84-115-65-221.wifi.dynamic.surfer.at)
[19:02:24] *** Joins: Intruder777 (~Intruder7@user/intruder777)
[19:02:31] *** Quits: aead (~aead@user/aead) (Ping timeout: 252 seconds)
[19:02:43] *** Quits: puff (~user@s0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[19:03:33] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[19:04:39] *** Joins: aead (~aead@user/aead)
[19:05:37] *** Joins: dcaro_ (~dcaro@user/dcaro)
[19:06:28] <Intruder777> How do I define a function Y(x) with numpy if I have two files: x.txt - 100 lines of x values; Y.txt - 100 lines of Y values which correspond to x.txt values ?
[19:07:08] <grym> Intruder777: read both x and y into ndarrays with, probably, np.loadtxt
[19:07:17] *** Quits: PinealGlandOptic (~PinealGla@37.115.210.35) (Quit: leaving)
[19:07:19] *** Quits: tmm88 (~tmm88@2001:8a0:ff48:1500:b66b:fcff:fe62:e4a9) (Quit: Client closed)
[19:07:58] *** Quits: Elzington_ (~Elzington@68.235.43.100) (Ping timeout: 250 seconds)
[19:08:40] *** Quits: dcaro (~dcaro@user/dcaro) (Ping timeout: 268 seconds)
[19:08:41] *** dcaro_ is now known as dcaro
[19:09:41] *** Quits: bitblit (~bitblit@gateway/tor-sasl/bitblit) (Ping timeout: 244 seconds)
[19:09:50] <Samian> grym  I'm working on this code: https://github.com/facebookresearch/dlrm/blob/master/dlrm_s_pytorch.py
[19:10:44] <Samian> the neural net innerworks and the code to measure the performance are all in the same file.  hmm
[19:11:20] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[19:12:24] *** Quits: d0ku (~d0ku@178.43.198.70.ipv4.supernova.orange.pl) (Remote host closed the connection)
[19:12:30] <Intruder777> grym: thanks, I did load those with np.loadtxt, so now I have two arrays: Y_Y and Y_t - how do I define function Y(t) by those points in order to use it in scipy?
[19:14:04] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 252 seconds)
[19:14:13] <grym> Intruder777: typically you define functions with `def`
[19:14:34] *** Quits: y1n (~y1n@84-115-65-221.wifi.dynamic.surfer.at) (Remote host closed the connection)
[19:15:56] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[19:18:54] *** Joins: FluffyMask (~masque@user/fluffymask)
[19:19:43] *** Joins: Enitin (~Enitin@82.102.22.84)
[19:20:05] *** Joins: no_gravity (~no_gravit@user/no-gravity/x-5639427)
[19:21:07] <no_gravity> If you put this into a module, will it count the number of times it was imported? if 'a' in vars(): a = a+1; else: a = 0
[19:21:37] <Intruder777> grym: you mean like `def Y(x): return Y_Y[Y_x.index(x)]` ?
[19:22:11] *** Joins: stdout (~stdout@216.163.21.11)
[19:22:13] <mefistofeles> no_gravity: I don't think so, I think it's only imported once, but it might depend on some conditions
[19:22:23] *** Joins: ganchan (~thomas_w@user/ganchan)
[19:22:26] <avu> no_gravity: no, modules are only executed once
[19:22:37] <no_gravity> Interesting
[19:24:11] *** Quits: ano (~weechat@user/ano) (Remote host closed the connection)
[19:24:41] *** Joins: cth (~Cthulchu@213.174.21.101)
[19:25:04] *** Quits: aead (~aead@user/aead) (Ping timeout: 252 seconds)
[19:25:18] *** Quits: rakoon (~rakoon@2a02:2149:824f:5900:1d1:a38c:828f:88d3) (Ping timeout: 250 seconds)
[19:25:19] *** Quits: trace1918 (~trace1918@94-137-125-182.customers.ownit.se) (Ping timeout: 268 seconds)
[19:25:55] *** Joins: Julian (~tos9@python/site-packages/Julian)
[19:26:41] *** Joins: lapno (~lapno@enx167.neoplus.adsl.tpnet.pl)
[19:26:54] *** Joins: ano (~weechat@user/ano)
[19:26:59] *** Joins: aead (~aead@user/aead)
[19:27:04] *** Joins: cloudbender (~cloudbend@user/cloudbender)
[19:29:33] *** Quits: rud01f (rud0lf@user/rud0lf) (Read error: Connection reset by peer)
[19:30:00] *** Quits: i0e (~is0ke3@user/is0ke3) (Remote host closed the connection)
[19:30:07] <plaisthos> grym: ah thanks. The links are a confusing there
[19:30:32] <grym> plaisthos: they are
[19:30:36] *** Joins: dcaro_away (~dcaro@user/dcaro)
[19:30:56] *** Quits: dcaro (~dcaro@user/dcaro) (Ping timeout: 250 seconds)
[19:31:15] *** Quits: Strom (strom@fedora/strom) ()
[19:31:39] *** Joins: rud01f (rud0lf@user/rud0lf)
[19:31:40] *** Quits: aead (~aead@user/aead) (Ping timeout: 252 seconds)
[19:31:44] *** dcaro_away is now known as dcaro
[19:31:48] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 250 seconds)
[19:31:57] *** Quits: no_gravity (~no_gravit@user/no-gravity/x-5639427) (Quit: leaving)
[19:33:19] *** Joins: aead (~aead@user/aead)
[19:33:27] *** Joins: Strom (strom@fedora/strom)
[19:35:37] *** Quits: shad (~shad@user/shad) (Ping timeout: 258 seconds)
[19:37:43] *** Quits: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 252 seconds)
[19:38:19] *** Joins: zebrag (~chris@user/zebrag)
[19:40:17] <foo> What's the appropriate way to store user/pass in a database? I'm thinking: store a hash versioned of the password, have a salt that decrypts it... BUT, what should that salt be and should it be unique per user? I could probably have the salt be a combination of the user sign up date, with some other stuff, then each user would have their own hashed password with a different salt which would need to be
[19:40:23] <foo> decrypted appropriately to match successful login
[19:40:58] <plaisthos> normally you use random bytes to create the salt
[19:41:04] <plaisthos> and make that part of the password string
[19:41:23] <plaisthos> but don't reinvent the wheel, there are already solutions to this
[19:41:34] *** Joins: Julian (~tos9@python/site-packages/Julian)
[19:41:34] <foo> plaisthos: oh. Wait, but the users set their own password.
[19:41:39] <foo> I'm open to libraries that help with this
[19:43:37] *** Joins: i0e (~is0ke3@user/is0ke3)
[19:44:12] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 245 seconds)
[19:45:36] *** Joins: junktext (~junktext@77.247.181.209)
[19:45:43] *** Joins: Hax0r (~Hax0r@87.101.193.195)
[19:47:10] *** Quits: jokoon (~eio@2a01:e0a:542:b20:1561:2cb9:9952:8544) (Ping timeout: 240 seconds)
[19:50:32] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[19:50:35] *** Joins: shad (~shad@user/shad)
[19:50:38] *** Joins: jaggz (~jaggz@user/jaggz)
[19:50:54] *** Quits: jaggz (~jaggz@user/jaggz) (Remote host closed the connection)
[19:50:56] *** Quits: varaindemian (uid73404@id-73404.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[19:51:15] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-56739f-227.dhcp.inet.fi) (Quit: Leaving)
[19:52:25] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[19:52:50] *** Quits: lapno (~lapno@enx167.neoplus.adsl.tpnet.pl) (Quit: Leaving)
[19:52:59] *** Quits: Hax0r (~Hax0r@87.101.193.195) (Remote host closed the connection)
[19:53:58] <Intruder777> foo, right, user set their password and you set the random sault
[19:54:01] <Intruder777> *salt
[19:54:12] *** Joins: Hax0r (~Hax0r@87.101.193.195)
[19:54:20] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 250 seconds)
[19:55:31] <foo> Intruder777: ok, so I store hash user password, then I store in another column in that table the random salt, then the decrypt/login process decrypts user's password against their random salt - correct?
[19:56:06] *** Quits: Hax0r (~Hax0r@87.101.193.195) (Remote host closed the connection)
[19:56:22] *** Quits: MrNaz (sid133418@id-133418.highgate.irccloud.com) (Ping timeout: 245 seconds)
[19:56:47] *** Quits: jposer (sid132110@highgate.irccloud.com) (Ping timeout: 268 seconds)
[19:56:47] *** Quits: ericoc (sid179921@id-179921.highgate.irccloud.com) (Ping timeout: 245 seconds)
[19:57:10] *** Quits: bn_work (uid268505@id-268505.highgate.irccloud.com) (Ping timeout: 240 seconds)
[19:57:13] *** Quits: hogarius (hogarius@highgate.irccloud.com) (Read error: Connection reset by peer)
[19:57:13] *** Quits: matthewwilkes (sid500242@highgate.irccloud.com) (Read error: Connection reset by peer)
[19:57:15] *** Quits: r0bby (r0bby@user/r0bby) (Read error: Connection reset by peer)
[19:57:16] *** Quits: cmagina (sid286142@user/cmagina) (Read error: Connection reset by peer)
[19:57:17] *** Joins: Hax0r (~Hax0r@87.101.193.195)
[19:57:17] <Intruder777> foo: you have password string from user and you have salt string generated yourself, then you store hash(password + salt) in one filed of your db and the salt in the other field
[19:57:41] *** Quits: Hax0r (~Hax0r@87.101.193.195) (Read error: Connection reset by peer)
[19:58:00] *** Quits: Pixi (~Pixi@user/pixi) (Quit: Leaving)
[19:58:41] *** Joins: bluesmonk (uid318026@id-318026.brockwell.irccloud.com)
[19:58:53] *** Joins: Hax0r (~Hax0r@87.101.193.195)
[19:59:02] <foo> Intruder777: thanks. I already use this in our code: https://bpa.st/IKAA - I can probably hook this into our auth and set a different KEY. Does this look adequate?
[19:59:05] *** Quits: Barones (~Barones@2804:7f3:8987:a56:1904:b84d:d454:b1fa) (Quit: Leaving)
[19:59:18] *** Quits: georgios (~georgios@user/georgios) (Quit: Konversation terminated!)
[19:59:30] <foo> secure enough / appropriate?
[19:59:31] *** Quits: thurs8 (~thurs@ip68-228-237-69.ph.ph.cox.net) (Read error: Connection reset by peer)
[19:59:40] <foo> I'm not dealing with bank level sensitive info, but I would like to follow best practices.
[19:59:49] <Intruder777> foo: and then when you need to check the login of user 'username' you calculate hash(password_entered_by_user + salt_of_username) and compare it with the hash which is stored for username
[20:00:20] *** Joins: the-mask (~the-mask@user/the-mask)
[20:00:27] *** Joins: rakoon (~rakoon@2a02:2149:824f:5900:3774:cabe:e203:e3f8)
[20:00:52] *** Joins: cmagina (sid286142@user/cmagina)
[20:00:53] *** Joins: MrNaz (sid133418@highgate.irccloud.com)
[20:00:56] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[20:01:20] *** Joins: Adoi (~Adoi@user/adoi)
[20:01:21] <foo> Intruder777: when you say "and then..." do you mean, both username and password should be hashed with salt? Or B) do you mean salt should be tied to a username and be username-specific, not password-specific.
[20:01:36] <foo> I likely will have a separate Password table since not all users will have a password.
[20:01:48] *** Joins: thurs8 (~thurs@ip68-228-237-69.ph.ph.cox.net)
[20:02:08] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[20:02:27] <LordKalma> I have a setuptools setup.py with a cffi_modules argument
[20:02:29] <Intruder777> foo: salt should be username specific and is stored in plain text
[20:02:29] *** Joins: ericoc (sid179921@id-179921.highgate.irccloud.com)
[20:02:36] *** Joins: jposer (sid132110@id-132110.highgate.irccloud.com)
[20:02:37] *** Joins: hogarius (hogarius@id-222644.highgate.irccloud.com)
[20:02:44] *** Joins: bn_work (uid268505@id-268505.highgate.irccloud.com)
[20:02:57] *** Joins: r0bby (r0bby@user/r0bby)
[20:03:12] <LordKalma> I have a setuptools setup.py with a cffi_modules argument*, but when I run like `pip install .` it doesn't execute the cffi process... This worked before... Do you know if this was somehow broken recently?
[20:03:41] <foo> Intruder777: Copy. Correct me if I'm mistaken, but I think as long as I set the KEY (eg. salt, I believe): https://bpa.st/IKAA - I should be able to use this and it'll be sufficient, correct?
[20:04:14] *** Joins: fikran (~fikran@user/fikran)
[20:04:43] *** Joins: mei (~mei@user/mei)
[20:05:11] <Intruder777> foo: I'm not really familiar with nacl, but from what I see in your code - are you just encrypting the clear text password using salt as a key?
[20:05:35] *** Joins: mwichmann (~mats@209-188-119-117.taosnet.com)
[20:05:51] *** Joins: qlixed (~qlixed@181.44.129.13)
[20:06:07] <aphysically> foo: you should use a specialized key derivation function intended for use with passwords
[20:06:27] *** Joins: Pixi (~Pixi@user/pixi)
[20:06:46] *** Quits: fabs (~fabs@2607:fb60:2501:2805:dea6:32ff:fed8:2af3) (Remote host closed the connection)
[20:06:51] <foo> Intruder777: Yes, we pass the KEY into this: https://pynacl.readthedocs.io/en/latest/secret/#nacl.secret.SecretBox - and that takes care of it. I *think* this is sufficient.
[20:06:54] <aphysically> e.g. argon2i, yescrypt, pbkdf
[20:07:01] <aphysically> 2
[20:07:10] <foo> aphysically: hey, thanks for chiming in.
[20:07:44] <aphysically> it is not sufficient that the hash algorithm be cryptographically secure and salted
[20:07:58] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 252 seconds)
[20:08:09] <foo> aphysically: ah. So those functions will generate the salt/key but I could still feed into https://bpa.st/IKAA if I'm following, correct?
[20:08:32] <jinsun> foo: there shouldn't be any encryption or decryption happening, just store the hashes, you can use one of these for hashing https://docs.python.org/3/library/hashlib.html#key-derivation
[20:09:23] <jinsun> and store the salt too so that you can reproduce the hash
[20:09:27] *** Joins: seednode2 (~seednode@user/seednode)
[20:09:29] <foo> jinsun: thank you. I thought the ... Oh wait, well, I was thinking user enters clear text password. I pull that user's salt, I feed to encrypt their clear text with their salt and I search that in the database?
[20:09:37] *** Quits: seednode (~seednode@user/seednode) (Ping timeout: 252 seconds)
[20:09:37] *** seednode2 is now known as seednode
[20:09:40] *** Joins: matthewwilkes (sid500242@id-500242.highgate.irccloud.com)
[20:09:43] <foo> jinsun: I guess there is no "decryption" here, just encryption.
[20:09:49] <foo> jinsun: ... which we don't need, we just need to hash.
[20:09:54] <foo> eg. this is a 1 way process
[20:10:03] <foo> I think I'm following now, thank you jinsun for jumping in
[20:10:05] <aphysically> pbkdf2 is fine even if becoming a little out of vogue
[20:10:20] <foo> is there a preferred between argon2i, yescrypt, pbkdf these days?
[20:10:24] * foo looks into pbkdf2
[20:11:19] <aphysically> I imagine you will want to choose whatever is widely available to you, but argon2i/yescrypt are newer and intended to replace pbkdf2 but pbkdf2 has been the standard for a while now
[20:11:52] <jinsun> foo: the salt is for inpputting into the hashing function, not to do any encryption
[20:11:54] <foo> aphysically: aha! I see.
[20:12:30] <foo> jinsun: right, right, I need to be thinking in terms of hashing here not encrypting/decrypting. eg. hashes have no need to be "undone", they're 1 way
[20:12:43] <jean-luc> no way*
[20:12:47] * foo is grateful for this feedback, been wondering how to do this for a while.
[20:12:57] <foo> jean-luc: 1 way as in they can .. actually, you're right. Haha. Thakns.
[20:12:58] *** Joins: fabs (~fabs@2607:fb60:2501:2805:dea6:32ff:fed8:2af3)
[20:12:59] <foo> Thanks *
[20:13:06] *** Joins: nomic (~nomic@185.192.69.192)
[20:13:45] <aphysically> argon2 is the default for cryptsetup these days I believe, but I wouldn't feel bad about using pbkdf2; as I said, it's been the standard for a while
[20:13:51] *** Quits: nomic (~nomic@185.192.69.192) (Client Quit)
[20:14:09] *** Joins: nomic (~nomic@185.192.69.192)
[20:14:11] <gitesh> what is that `await` and `async` stuff , is that advance stuff i don't have it in my book?
[20:14:16] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 250 seconds)
[20:14:33] *** Joins: rendar (~rendar@user/rendar)
[20:15:26] <foo> aphysically: thanks. https://pypi.org/project/argon2-cffi/ could do the trick. Although, it looks like pbkdf2 is already in hashlib. Which I already have and wouldn't need to install anything more to work with. Actually, this might be different: https://docs.python.org/3/library/hashlib.html#hashlib.pbkdf2_hmac
[20:15:38] <akk> gitesh: new in 3.7, I think? so a lot of books might not have it.
[20:16:13] *** Quits: nabuco (~skeksil@139.47.69.197) (Ping timeout: 252 seconds)
[20:16:44] <jinsun> 3.7 just made async and await reserved keywords, asyncio has been there for a while
[20:16:56] <jinsun> but beginner tutorials usually don't cover it
[20:17:01] *** Quits: rendar (~rendar@user/rendar) (Client Quit)
[20:17:46] <aphysically> that's pbkdf2
[20:17:53] *** Joins: Enitin (~Enitin@82.102.22.84)
[20:18:17] *** Joins: jess (~jess@libera/staff/jess)
[20:18:17] *** Joins: nabuco (skeksil@gateway/vpn/protonvpn/nabuco)
[20:18:25] *** Quits: roadt (~roadt@36.5.216.242) (Ping timeout: 252 seconds)
[20:18:30] *** Joins: rendar (~rendar@user/rendar)
[20:18:37] <foo> aphysically: perfect. really appreciate it, thank you
[20:18:51] *** Joins: roadt (~roadt@36.5.216.242)
[20:19:02] *** Quits: jazzy (~jaziz@2600:380:4548:2564:b0c1:fe1:d496:dc8b) (Ping timeout: 250 seconds)
[20:19:06] <aphysically> only guideline is choose as many iterations (high as possible) that you can handle at scale in your intended deployment/usage
[20:19:17] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 3.0)
[20:19:33] <foo> So it looks like dk = hashlib.pbkdf2_hmac('sha256', b'password', b'salt', 100000).hex() can be used to hash a password. Is there any suggestions in generating the salt?
[20:19:35] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[20:19:57] <foo> Perhaps salt1 = os.urandom(blake2b.SALT_SIZE) ?
[20:19:58] *** Quits: xheimlich (~xheimlich@179.218.1.150) (Quit: leaving)
[20:20:46] *** Quits: nomic (~nomic@185.192.69.192) (Quit: Leaving)
[20:21:10] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 252 seconds)
[20:21:12] *** Quits: martums (~martums@user/martums) (Ping timeout: 250 seconds)
[20:21:33] *** Joins: Julian (~tos9@python/site-packages/Julian)
[20:21:41] <aphysically> the algorithms are intentionally designed to be as slow as possible so they often have a tweaking factor (in the case of pbkdf2 it's the number of iterations of the hash it's built on)
[20:22:05] *** Joins: martums (~martums@user/martums)
[20:22:11] <aphysically> you want it to be as slow as you know you'll be able to handle in your deployment within reason
[20:22:16] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 252 seconds)
[20:22:26] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[20:22:32] *** Joins: morte_ (~user@190.104.116.134)
[20:23:04] <foo> aphysically: is 100000 a reasonable number of iterations? Per the docs it looks like that should be a min, which is probably sufficient.
[20:23:12] <foo> I'll benchmark 100000 but it sounds like that's a good starting point
[20:23:16] <foo> aphysically: again, really appreciate you sharing - thank
[20:24:00] *** Quits: Julian (~tos9@python/site-packages/Julian) (Client Quit)
[20:24:07] <bjs> gitesh: yes it's advanced, it's for concurrency (doing multiple things at once)
[20:25:00] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[20:27:13] *** Quits: akk (~akk@174-28-98-206.albq.qwest.net) (Ping timeout: 252 seconds)
[20:27:19] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[20:27:57] *** Quits: Pixi (~Pixi@user/pixi) (Read error: Connection reset by peer)
[20:27:59] <aphysically> the intent is that if anyone ever got a hold of your password hashes that it wouldn't be practically possible to brute force the password even though passwords usually have too little bits of security to be safe against brute forcing
[20:28:23] *** Joins: Pixi (~Pixi@user/pixi)
[20:28:33] <foo> aphysically: thanks, that makes sense
[20:29:58] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 252 seconds)
[20:30:31] *** Joins: Enitin (~Enitin@82.102.22.85)
[20:30:46] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:30:54] *** Joins: cidtest (~cidtest@89.238.185.210)
[20:31:15] *** Quits: cidtest (~cidtest@89.238.185.210) (Client Quit)
[20:31:24] *** Joins: rendar (~rendar@user/rendar)
[20:31:57] *** Joins: bitblit (~bitblit@gateway/tor-sasl/bitblit)
[20:34:25] <aphysically> the intent of the salts is that nobody can make use of (for brute forcing) precomputed hash tables for any commonly used algorithm/parameter set - the work would always need to be completely repeated for any password
[20:34:53] <foo> :w
[20:35:15] <foo> aphysically: I could say, ":w" was in the wrong window - or ":w" was me writing your sharings to my memory. :)
[20:38:33] *** Quits: qlixed (~qlixed@181.44.129.13) (Ping timeout: 248 seconds)
[20:38:44] <aphysically> so should all arg parsing be within a main function?
[20:39:58] *** Joins: zaquest (~notzaques@5.128.210.178)
[20:40:00] <foo> aphysically: I assume that's a general question and not directed at me/our password discussion.
[20:40:06] <aphysically> correct
[20:40:12] <grym> aphysically: depends on how you call main
[20:40:24] <aphysically> I'm open to suggestions
[20:40:37] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[20:40:40] <grym> (or, i guess,if you ever want to call main outside of "if __name__ ..."
[20:40:42] *** Quits: jpodivin (~jpodivin@118.108.broadband14.iol.cz) (Ping timeout: 250 seconds)
[20:40:43] *** Joins: qlixed (~qlixed@181.44.129.13)
[20:41:02] <aphysically> the intent should be to make any e.g. classes I make usable by import without running all this arg code and such?
[20:43:37] *** Joins: cloudbender30 (~cloudbend@user/cloudbender)
[20:44:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[20:44:43] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.2)
[20:45:28] *** Quits: cloudbender (~cloudbend@user/cloudbender) (Ping timeout: 250 seconds)
[20:45:48] *** Joins: Barones (~Barones@2804:48dc:8500:0:490e:ac21:7882:d414)
[20:47:02] *** Joins: gggp (~textual@111.63.14.121)
[20:47:05] *** Quits: the-mask (~the-mask@user/the-mask) (Ping timeout: 248 seconds)
[20:47:34] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 252 seconds)
[20:47:45] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[20:48:02] *** Quits: zBeeble42 (~zBeeble@2001:1928:1::35) (Remote host closed the connection)
[20:48:31] *** Joins: zBeeble (~zBeeble@2001:1928:1::35)
[20:48:49] <SnoopJ> aphysically, right, you don't want to screw up sys.argv if someone imports your package, but intends to do their own thing with arguments
[20:49:14] *** Joins: jokoon (~eio@2a01:e0a:542:b20:1561:2cb9:9952:8544)
[20:49:17] *** Joins: no_gravity (~no_gravit@user/no-gravity/x-5639427)
[20:49:53] <grym> aphysically: splitting the difference, put the parser stuff outside of main, but inside the if __name__ test, and pass main arguments like any other function
[20:49:57] <grym> (then you can test main!)
[20:50:00] <grym> (without hating yourself)
[20:50:11] <no_gravity> Is this creating a dict? o={'x'}
[20:50:19] *** Quits: simplicity (~yti@user/simplicity) (Remote host closed the connection)
[20:51:10] *** Joins: bloodninja (~bloodninj@user/bloodninja)
[20:51:22] *** Joins: simplicity (~yti@user/simplicity)
[20:51:31] <aphysically> grym: I like that better because it keeps my args global like I already wrote some of the code assuming >.> <.<
[20:51:37] *** Joins: lastshell (~lastshell@user/lastshell)
[20:52:29] <hodapp> no_gravity: pretty sure that's a set
[20:52:35] <no_gravity> hodapp: I see
[20:52:36] <jinsun> no_gravity: you can check that by runing `print(type(o))`
[20:52:45] <no_gravity> jinsun: I see
[20:52:52] <aphysically> I don't think it's bad per se since the parts assuming it can't really be used by import
[20:52:58] <aphysically> but I'm not sure if I should change that
[20:53:17] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[20:53:24] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Client Quit)
[20:53:41] <no_gravity> hodapp, jinsun: I was looking for a shortcut syntax for {'x': None, 'y': None, 'z': None}
[20:53:46] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[20:53:56] <no_gravity> Aka a shorter way to create dicts where all elements are none.
[20:54:28] <hodapp> defaultdict?
[20:54:35] <no_gravity> hodapp: What is that?
[20:55:07] <Repiphany> {key:None for key in keys}
[20:55:30] <hodapp> no_gravity: a dict where all keys have a default value
[20:55:38] <hodapp> which may or may not be what you actually want
[20:55:48] <hodapp> if it's specific keys, just do Repiphany's way
[20:55:56] <no_gravity> I see.
[20:56:04] <no_gravity> So Repiphanies way is the shortest.
[20:56:23] <hodapp> there might be shorter ways but Repiphany's way is probably the most idiomatic and readable
[20:56:48] <jean-luc> readable <> optimized
[20:56:52] *** Quits: xa0s (~xa0s@mab.sdf.org) (Quit: Lost terminal)
[20:56:53] <no_gravity> Like this? {key:None for key in ['x','y','z']}
[20:56:56] <jean-luc> python tries to bridge that gap :-p
[20:57:08] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[20:57:13] *** Joins: jaggz (~jaggz@user/jaggz)
[20:57:43] *** Quits: jaggz (~jaggz@user/jaggz) (Client Quit)
[20:57:50] <aphysically> ahhh I'm confused
[20:57:57] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[20:58:26] *** Joins: jaggz (~jaggz@user/jaggz)
[20:58:36] <aphysically> I have a @dataclass that uses the args in its definitions, but it throws an error when the program runs
[20:58:54] <aphysically> I thought the variables in a dataclass were run on instance creation not class initialization
[20:59:03] <aphysically> like, they were moved into a __init__
[21:00:16] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[21:00:23] <jinsun> no_gravity: there is also dict.fromkeys(["x", "y", "z"])
[21:00:26] *** Quits: c4017w (~c4017@209.52.68.8) (Read error: Connection reset by peer)
[21:02:11] <grym> aphysically: https://bpa.st/UEXA  is what i had in mind, by the way
[21:02:26] <aphysically> ah
[21:04:07] <aphysically> why does the first one error out because of no args but the second one doesn't? https://bpa.st/OD6A
[21:04:10] <grym> hahah aggressive query-replace and i didn't notice i named the parser arser
[21:04:15] <aphysically> is my understanding of dataclasses just wrong?
[21:04:35] <aphysically> (errors because it doesn't have the args variable during initialization!)
[21:04:52] <grym> i think you have to do that in __post_init__
[21:05:10] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[21:05:10] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 252 seconds)
[21:05:18] <grym> attrs spells those .ib(init=False) and then you populate them in the gross dunder
[21:05:36] *** Joins: hendursaga (~weechat@user/hendursaga)
[21:05:47] <grym> but i don't see where `args` comes from in the second example either; it's not an argument to your init
[21:06:15] <aphysically> it's argparse, it *was* a global, but right now I'm reorganizing my code with a main function so it may or may not end up being a global
[21:06:19] <grym> yich
[21:06:20] <grym> don't do that
[21:06:52] <aphysically> it's a global in yours too, but I think what you really mean is it shouldn't be coded to use it as such
[21:06:59] <grym> it is not a global in mine
[21:07:09] <jinsun> aphysically: in the second case the __init__ is not called till you make an instance, in the first case those are class variables so those assingments are executed when you define the class
[21:07:29] <aphysically> how do you mean, isn't args = arser.parse_args() called only under an if function, so it should be a global?
[21:07:42] <grym> well.  it's a module-level variable that's available inside the if-block.
[21:08:26] <grym> but.  pass it where you need it
[21:09:13] <jinsun> I like to make main take argv: Optioonal[Sequence[str]] and if argv is None then argv = sys.argv, then call parse_args inside main
[21:09:15] <aphysically> yeah, okay, but now I have some more questions :P
[21:09:20] *** Joins: nomic (~nomic@185.192.69.192)
[21:09:41] *** Joins: daevski6 (~daevski_@76-253-184-89.lightspeed.rlghnc.sbcglobal.net)
[21:10:20] <aphysically> jinsun: I must have gotten the wrong idea, I thought @dataclass meant that the class variables all became instance variables
[21:10:26] <aphysically> automagically
[21:10:30] <grym> aphysically: none of those are class variables, is the thing
[21:10:52] <grym> jinsun: i like to use typer, personally
[21:10:53] <aphysically> (note I'm changing the code so you don't have to convince me of that, I'm just trying to understand where I went wrong in my dataclass understanding)
[21:10:58] *** Quits: nomic (~nomic@185.192.69.192) (Client Quit)
[21:11:46] *** Quits: deviantfero (~deviantfe@190.150.27.58) (Ping timeout: 252 seconds)
[21:11:48] <jinsun> grym: yeah it looks cool, I want to try it the next time I make a cli
[21:12:01] <grym> jinsun: "if click and fastAPI were best buds"
[21:12:38] *** Joins: spithash_ (~spithash@user/spithash)
[21:12:39] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:13:13] *** Quits: daevski (~daevski_@76-253-184-89.lightspeed.rlghnc.sbcglobal.net) (Ping timeout: 248 seconds)
[21:13:13] *** daevski6 is now known as daevski
[21:13:41] *** Quits: spithash (~spithash@user/spithash) (Ping timeout: 244 seconds)
[21:13:52] <analoq> https://onlinegdb.com/dX_diwDIq why does sort() not work in this context but sorted() does?
[21:14:21] <jinsun> aphysically: dataclass is a decorator, so first the original class is made, then it is passed to dataclass, cls = dataclass(cls)
[21:14:26] *** Quits: gggp (~textual@111.63.14.121) (Quit: My MacBook has gone to sleep. ZZZzzzâ¦)
[21:14:53] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[21:15:02] *** Joins: magla (~gelignite@55d4beb4.access.ecotel.net)
[21:15:15] *** Joins: deviantfero (~deviantfe@190.150.27.58)
[21:15:32] <jinsun> aphysically: the magic happens inside the dataclass function, before that the class definition happens normally
[21:15:44] *** Quits: no_gravity (~no_gravit@user/no-gravity/x-5639427) (Quit: leaving)
[21:17:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[21:18:12] *** Joins: gggp (~textual@60.10.194.45)
[21:18:30] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[21:19:40] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 240 seconds)
[21:19:41] *** Joins: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it)
[21:19:45] *** Quits: deviantfero (~deviantfe@190.150.27.58) (Client Quit)
[21:20:16] *** Quits: kikijiki (~Thunderbi@user/kikijiki) (Quit: kikijiki)
[21:21:07] *** Quits: nabuco (skeksil@gateway/vpn/protonvpn/nabuco) (Ping timeout: 252 seconds)
[21:21:30] *** Quits: zaquest (~notzaques@5.128.210.178) (Quit: Leaving)
[21:21:48] *** Joins: mohabaks (~mohabaks@gateway/tor-sasl/mohabaks)
[21:21:56] *** Joins: nomic (~nomic@185.192.69.192)
[21:21:57] *** Joins: bloodninja123 (~bloodninj@user/bloodninja)
[21:22:45] *** Joins: zaquest (~notzaques@5.128.210.178)
[21:26:04] *** Quits: bloodninja (~bloodninj@user/bloodninja) (Ping timeout: 252 seconds)
[21:26:18] *** Quits: pan (~quassel@pankid.club) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:26:36] *** Joins: pan (~quassel@pankid.club)
[21:27:20] *** Quits: falk689 (~falk689-q@gateway/tor-sasl/falk689) (Remote host closed the connection)
[21:27:42] *** Quits: jaggz (~jaggz@user/jaggz) (Ping timeout: 246 seconds)
[21:27:50] *** Joins: falk689 (~falk689-q@gateway/tor-sasl/falk689)
[21:28:01] <aphysically> I see
[21:28:41] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[21:30:08] *** Joins: emika8 (~emika@83.136.182.141)
[21:30:11] *** Quits: wolfgang (~wolfgang@101.174.6.197) (Remote host closed the connection)
[21:30:31] <nedbat> analoq: sort() returns None, it changes the list in-place.  sorted() returns a new sorted list.
[21:30:33] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[21:31:04] *** Joins: djhankb (~djhankb@208.113.164.68)
[21:31:34] *** Quits: emika (~emika@83.136.182.14) (Ping timeout: 252 seconds)
[21:31:34] *** emika8 is now known as emika
[21:33:23] <analoq> nedbat: i see what you mean. but isnt the a.sort() evaluated first and then print sees a print(a)? :/
[21:33:34] *** Quits: rakoon (~rakoon@2a02:2149:824f:5900:3774:cabe:e203:e3f8) (Ping timeout: 250 seconds)
[21:33:50] <nedbat> analoq: a.sort() happens first, and then print() will print whatever a.sort() produces
[21:33:51] <analoq> i mean it seemingly isn't, but i dont quite get why
[21:33:52] *** Joins: wolfgang (~wolfgang@101.174.6.197)
[21:34:10] <nedbat> analoq: would you expect print(2+2) to print 2? No, it prints the result of 2+2
[21:34:13] <analoq> yeah that makes sense
[21:34:25] <analoq> otherwise a.len() would print a and not the len of a
[21:34:51] <analoq> mystery solved. thanks :)
[21:35:03] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[21:37:54] *** Joins: the-mask (~the-mask@user/the-mask)
[21:38:41] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[21:39:09] *** Quits: bloodninja123 (~bloodninj@user/bloodninja) (Quit: So long king bowser!)
[21:39:27] *** Joins: bloodninja (~bloodninj@user/bloodninja)
[21:40:52] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:f41d:36f4:eaf6:b945)
[21:41:12] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[21:41:55] *** Quits: nomic (~nomic@185.192.69.192) (Quit: Leaving)
[21:42:12] <the-mask> hello
[21:42:18] *** Joins: no_gravity (~no_gravit@user/no-gravity/x-5639427)
[21:42:32] <rama> o/
[21:42:41] <no_gravity> Is it possible to import a module and clone it, so the clone is not sharing its state with the imported module?
[21:42:48] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-60dd-0669-6d92-7e2a.res6.spectrum.com)
[21:45:05] *** Quits: Yasumoto (~Yasumoto@ec2-34-212-228-153.us-west-2.compute.amazonaws.com) (Quit: leaving)
[21:45:45] *** Quits: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Ping timeout: 248 seconds)
[21:46:08] *** Joins: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net)
[21:47:12] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:47:52] *** Quits: gggp (~textual@60.10.194.45) (Ping timeout: 250 seconds)
[21:48:15] *** Joins: derelict (~derelict@user/derelict)
[21:48:37] *** Quits: drd (~drd@93-39-151-19.ip76.fastwebnet.it) (Ping timeout: 252 seconds)
[21:48:41] <emerent> what cursed things are you trying to do
[21:49:00] <Xavierdarkness>  
[21:49:43] *** Quits: cloudbender30 (~cloudbend@user/cloudbender) (Ping timeout: 252 seconds)
[21:50:50] <no_gravity> I tried it with copy(): https://trinket.io/python3/d2ecbad323
[21:51:03] <no_gravity> But that says it "can't pickle module objects" :)
[21:51:28] *** Quits: sgn (~sgn@user/sgn) (Ping timeout: 268 seconds)
[21:52:06] *** Joins: tga (~tga@user/tga)
[21:52:48] <tga> greetings. what's a good library for generating charts in python only, with either image or js output?
[21:53:02] <nedbat> no_gravity: that sounds kind of impossible.  help us understand why you want to do that.
[21:53:18] *** Joins: sandb0y (~pirate@user/sandb0y)
[21:53:32] <tga> I'm already looking at plotly, I'm wondering whether it's a good way to go
[21:53:39] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Quit: Leaving...)
[21:54:29] <no_gravity> Oh wow, this works: https://trinket.io/python3/2b25f09d91
[21:54:46] <no_gravity> nedbat: "impossible" is rarely a thing in turing complete systems :)
[21:54:59] *** Joins: c4017w (~c4017@209.52.68.8)
[21:55:09] <tga> I need something more flashy than scientific, so matplotlib isn't ideal
[21:55:14] *** Quits: MrAlexBailey (~Alex@104-11-73-100.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 250 seconds)
[21:55:18] <nedbat> no_gravity: true enough.  what is this for?
[21:55:27] <no_gravity> nedbat: The use case is in that example. A module that is not expecting to be used twice. But you want to have 2 of it.
[21:55:47] <nedbat> no_gravity: that's not an explanation :)  What module, and why do you want two?
[21:55:56] <no_gravity> nedbat: This way, modules are like Classes. But with less boilerplate code.
[21:56:47] <nedbat> no_gravity: are you saying you could simply use a class, in the normal way, but you would rather make something weird and confusing? :)
[21:57:23] <no_gravity> nedbat: Look at "hello.py". As a class, it would take like 50% more code or more.
[21:57:35] *** Joins: cdown (~cdown@82-69-42-66.dsl.in-addr.zen.co.uk)
[21:57:44] *** Quits: bloodninja (~bloodninj@user/bloodninja) (Read error: Connection reset by peer)
[21:57:58] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[21:58:15] <jinsun> no_gravity: you should look into dataclasses/attrs if you don't like the boilterplate of usuai classes
[21:58:19] <nedbat> no_gravity: this seems like another of your micro-optimizations. In a real class, with 100 lines of code, it would still be only a few lines more to make a class.
[21:58:29] <AhmedAmerican> is there a setting for scrapy to retry failed request till success ?
[21:59:50] *** Quits: Hax0r (~Hax0r@87.101.193.195) (Remote host closed the connection)
[21:59:50] <no_gravity> nedbat: A few lines more *plus* "self this and self that and self everywhere".
[22:00:01] *** Joins: nomic (~nomic@185.192.69.192)
[22:00:14] <no_gravity> jinsun: Can you make "hello.py" use that so we can compare?
[22:00:40] <nedbat> no_gravity: dataclasses/attrs will also use self.
[22:00:54] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 258 seconds)
[22:01:03] <no_gravity> nedbat: So "imp" it is!
[22:01:04] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[22:01:19] *** Joins: Hax0r (~Hax0r@87.101.193.195)
[22:01:21] <nedbat> no_gravity: i recommend writing Python as if it were Python, but you are going to do what you are going to do.
[22:01:23] *** Joins: Enitin (~Enitin@82.102.22.84)
[22:01:41] <jinsun> ya if you want to avoid self then they won't help much, they just automate some things like __init__
[22:02:09] <nedbat> no_gravity: you won't be able to use @classmethod, @property, etc.
[22:02:25] <jinsun> altthough getting rid of the __init__ usually gets rid of most of the use of self also
[22:03:09] <no_gravity> nedbat: I don't even know those.
[22:03:21] <nedbat> no_gravity: so you aren't sure what you are avoiding?
[22:03:33] <no_gravity> nedbat: How do you mean?
[22:03:52] <nedbat> no_gravity: you think classes are too much overhead, but you don't know all the features of classes.
[22:04:02] <aphysically> grym: ok I fixed it to not rely on args being global and to have a main and such :)
[22:04:05] <nedbat> no_gravity: it's really better to learn the language first, and then decide what you don't like about it.
[22:04:45] <aphysically> glad I did it now before it became too annoying https://dpaste.com/DLSMGTUQX <- this is the thing I'm writing in Python for learning right now, it's a conversion of a bash script I wrote into Python for learning mostly
[22:05:02] <no_gravity> nedbat: I go different about it. I prefer shorter over longer unless I get a benefit from longer. "hello.py" is better this way it seems.
[22:05:06] <aphysically> so I'm trying to learn and follow conventions even when/if not strictly necessary just to learn how
[22:05:19] <nedbat> no_gravity: and I'm saying there's a benefit to longer that you don't understand yet.
[22:05:43] <no_gravity> nedbat: You can fork hello.py if you want to convince me that longer has hidden benefits.
[22:06:08] <nedbat> no_gravity: you need to learn the full capabilities of classes.  A toy two-line class isn't going to show you that.
[22:06:19] <aphysically> (so likewise I'm open to any broad suggestions in that department grym)
[22:06:21] *** Quits: Hax0r (~Hax0r@87.101.193.195) (Remote host closed the connection)
[22:06:25] <nedbat> no_gravity: but like i said, you are going to do what you are going to do.
[22:06:33] <no_gravity> nedbat: I think in real code. As Linus Torvalds says "Words are cheap, show me code".
[22:06:42] <nedbat> no_gravity: hello.py is not real code.
[22:06:55] <nedbat> no_gravity: you've proven difficult to sway in the past, i don't know why this will be different.
[22:07:02] <no_gravity> nedbat: Feel free to come up with another example then.
[22:07:16] <nedbat> no_gravity: search GitHub for @classmethod.
[22:07:31] *** Joins: Hax0r (~Hax0r@87.101.193.195)
[22:07:52] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 252 seconds)
[22:08:01] <no_gravity> nedbat: first hit: https://github.com/classmethod/gradle-aws-plugin
[22:08:13] *** Joins: sudomann (~sudomann@50.238.46.18)
[22:08:26] <hodapp> ...
[22:08:28] *** Quits: stevieh (~skrodzki@p2e584735.dip0.t-ipconnect.de) (Quit: Leaving.)
[22:08:30] <nedbat> no_gravity: you didn't bother to limit yourself to Python examples? You aren't even trying. Learn the language.
[22:08:40] <bjs> no_gravity: you need to learn the language and GitHub search before you say things like that
[22:08:54] <aphysically> oops, I'm still using tempdir/tempdirp as a global :\
[22:08:55] <bjs> @classmethod is very common,  I'm not sure what the argument here is about though
[22:09:02] <no_gravity> bjs: Say things like what?
[22:09:03] *** Quits: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ¦)
[22:09:06] <grym> aphysically: that's a looot in one file
[22:09:21] <aphysically> one more thing to fix
[22:09:27] <no_gravity> nedbat: I'm not logged into Github, so I don't think I can search in code. I am not a big GitHub user.
[22:09:37] <nedbat> no_gravity: you do you
[22:09:39] <bjs> no_gravity: stop saying these things
[22:09:47] <aphysically> grym: yeah.....and I don't even have all the options from the corresponding bash script ported yet (nor do I have most of these options *implemented* yet)
[22:09:47] <bjs> if you don't know how to use github search just say oyu don't know
[22:09:54] <bjs> instead of making up restrictions you think it might have because you don't know how it worsk
[22:10:01] <nedbat> no_gravity: you can learn about @classmethod by reading about Python
[22:10:10] *** Joins: MrAlexBailey (~Alex@104-11-73-100.lightspeed.tukrga.sbcglobal.net)
[22:10:11] <hodapp> also, re: Turing completeness: 99.9% of the time that someone tells you something is 'impossible' in a language, they're not saying that it's literally impossible computationally, they're saying that it can't be expressed in the language at the level of that language.
[22:10:20] <bjs> no_gravity: this is a consistent thing with you where you don't really understand it so you just make something up instead
[22:10:37] <no_gravity> bjs: I make up what? I don't understand what you mean.
[22:10:53] *** Joins: cellofellow (~user@166.70.50.58)
[22:10:57] *** Quits: nomic (~nomic@185.192.69.192) (Quit: Leaving)
[22:11:09] <bjs> no_gravity: it doesn't matter,  I think you'd find actually learning the language
[22:11:19] <bjs> and doing things the way that people usually do in Python
[22:11:31] <no_gravity> For now, I am happy using the imp magic.
[22:11:43] <aphysically> grym: so I should learn about project management and split into a directory or some such?
[22:11:47] <hodapp> tga: did anyone respond yet? have you looked at altair-viz?
[22:11:56] <bjs> will benefit you a lot, at least until you actually *understand* how it all works so then you can fall back to the magic
[22:12:02] <aphysically> I think right now only a subset of it makes sense to split into another file (the classes and functions for dealing with ffmpeg stuff generically)
[22:12:02] <no_gravity> Only fear I have is it might negatively impact performance. But I will benchmark that.
[22:12:08] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[22:12:09] <grym> aphysically: i would.  you might first read https://sedimental.org/the_packaging_gradient.html for some meta-context
[22:12:29] <nedbat> no_gravity: you aren't afraid that you are missing out on class functionality that you haven;t even learned yet? odd.
[22:12:57] <aphysically> and the point for me here wouldn't be to split or use some sort of project thing strictly out of need, but I want to do whatever is the most pedagogical in that regard really
[22:13:18] <nedbat> no_gravity: i guarantee you this multi-module thing will be significantly slower than instantiating a class.
[22:13:34] <bjs> no_gravity: you are going to find it very painful to program in Python if you avoid classes so heavily just to avoid some extra lines of code or some imagined overhead (that may or may not even exist)
[22:13:36] *** Joins: fikran (~fikran@user/fikran)
[22:15:01] <no_gravity> nedbat: How much overhead do you expect per instantiation?
[22:15:08] *** Quits: mikkel (~mike@208.110.120.167) (Quit: leaving)
[22:15:10] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 250 seconds)
[22:15:28] <nedbat> no_gravity: making an object from a class is very quick.  Your code will require searching the import path each time, and executing a file.
[22:15:34] <no_gravity> bjs: I already find Python very enjoyable.
[22:15:35] *** Joins: Enitin (~Enitin@82.102.22.86)
[22:15:49] <bjs> no_gravity: it'll depend on the class but generally instaniating a class is very cheap. __init__ can be expensive depending on what it does.  and obviously other methods are free to be as cheap or expensive as they want.
[22:16:59] <no_gravity> If it is only the intantiation that is slow, then code that is like "hey, you probably need this only once, if not use imp" would be fine I guess.
[22:16:59] <bjs> but there is always some non-0 cost to making an instance.
[22:17:22] <bjs> no_gravity: why would imp save here, I'm not even sure what the problem is you're trying to solve?
[22:17:23] <no_gravity> My main fear would be that it negatively impacts optimization of the whole code.
[22:17:45] <bjs> no_gravity: making a new instance is far cheaper than copying a module
[22:17:56] <nedbat> no_gravity: so you are saying that even if multi-modules is slow, you will use it?
[22:17:57] <no_gravity> bjs: No problem. The benefit of "modules as classes" is "name" is shorter than "self.name".
[22:18:26] <nedbat> no_gravity: you've been here micro-optimizing list() vs [], and now you invent a new weird thing which is definitely slower, but you are going to use it....
[22:18:31] <no_gravity> nedbat: Depends on how slow. Python is like 7x slower than PHP yet I use it because the code is nicer.
[22:18:31] <bjs> no_gravity: except the horrendous performance you'd get from making modules-as-objects and the total lack of support in the language
[22:18:52] *** Quits: aead (~aead@user/aead) (Ping timeout: 252 seconds)
[22:19:02] <nedbat> no_gravity: and you haven't even learned what features you are leaving behind.  You have a very strange approach.
[22:19:12] *** Quits: ganchan (~thomas_w@user/ganchan) (Quit: Leaving)
[22:19:47] <no_gravity> Terseness is a high value for me.
[22:19:53] <aphysically> grym: I've been sticking exclusively to internal python libraries for now, but if I figure out a packaging for my project I guess I will feel less obligated to do so
[22:20:11] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[22:20:12] <jinsun> you can write s.name instead of self.name if you want to save keystrokes
[22:20:17] <bjs> no_gravity: this seems like a lot of work to avoid saying "self"
[22:20:31] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 252 seconds)
[22:20:33] <bjs> a lot of work that is easy to get wrong,  easy to make slow,  easy to make expensive
[22:20:39] *** Joins: aead (~aead@user/aead)
[22:21:10] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[22:21:14] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 250 seconds)
[22:21:55] *** Joins: cloudbender (~cloudbend@user/cloudbender)
[22:21:57] <grym> aphysically: yeah, and then you can probably save about 250 lines
[22:22:06] <grym> aphysically: argparse is fairly verbose
[22:22:28] *** Gustavo6046_ is now known as Gustavo6046
[22:22:42] <no_gravity> bjs: I am converting a moderately complex codebase to "modules as classes" now - afterwards I can benchmark before/after to have real world data.
[22:23:03] <aphysically> want to see the bash script original? :D grym: https://dpaste.com/AP3EG2LTW
[22:23:03] <no_gravity> It does not do many instantiations though.
[22:23:38] <aphysically> I worked *really* hard to make it somewhat readable but at the end of the day it was a lost cause
[22:23:43] <aphysically> it's bash after all
[22:23:52] <grym> aphysically: ok, so _normally_, the joke is "you can write java in any language"
[22:23:59] <grym> but for you i'll make an exception :P
[22:24:22] *** Joins: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net)
[22:24:42] <aphysically> for the most part it's pure bash too (except where it would be extraordinarily painful not to)
[22:25:17] *** Joins: bloodninja (~bloodninj@user/bloodninja)
[22:25:19] *** Joins: bukzor (~bukzor@2603-6000-8100-9c55-90f1-cd5a-9ee9-5576.res6.spectrum.com)
[22:25:59] <aphysically> the stuff that is things like: path to my compiled ffmpeg from git master, that sort of thing, I want to move to a config file later but I haven't gotten to it yet in the python
[22:26:26] *** Joins: pragmaticenigma (~pragmatic@user/pragmaticenigma)
[22:27:07] *** Joins: pycurious (~Adium@user/pycurious)
[22:30:29] *** Joins: sgt_chuckles (~sgt_chuck@pool-71-190-209-205.nycmny.fios.verizon.net)
[22:30:30] *** Parts: sgt_chuckles (~sgt_chuck@pool-71-190-209-205.nycmny.fios.verizon.net) ()
[22:31:45] <aphysically> a side comment of sorts on packaging: I almost like venv, except for that it's virtually impossible to just port one to a new system python release (at least on Gentoo), you always have to remake it which is annoying
[22:32:01] *** Joins: reset (~reset@user/reset)
[22:32:04] <bjs> aphysically: Python packaging is just terrible sadly :(
[22:32:23] *** Quits: beencubed (~beencubed@209.131.238.248) (Quit: Leaving)
[22:32:42] <aphysically> it's not as bad if I use a wrapper like virtualenvwrapper that puts the venvs in a centralized place, then I can just make sure I keep a requirements.txt up to date or something to remake it without having to move project files in and out of the directory
[22:32:55] <cloudbender> all packaging is terrible
[22:32:56] <aphysically> but still
[22:33:06] *** Quits: Brion (~Brion@gateway/tor-sasl/brion) (Remote host closed the connection)
[22:33:35] <grym> aphysically: venvs are not movable inside the same *machine*, as a general rule
[22:33:46] *** Joins: Brion (~Brion@gateway/tor-sasl/brion)
[22:33:53] <grym> so a nontrivial part of the packaging system exists to automate venv juggling
[22:33:54] <LordKalma> oi. I'm using futures, and I have this function that returns return {"constellation": const_out, "power": power_local} but the future.result() gives me and array, and printing it says "<Future at 0x16f89db8370 state=finished returned ndarray>", which is just the first argument. Is this known?
[22:34:20] *** Joins: sazawal (~sazawal@106.213.43.60)
[22:34:31] <grym> LordKalma: that sounds like what i'd expect a future object to be
[22:34:43] <LordKalma> yes, the problem is that result() ain't giving me my dictionary back
[22:34:43] <grym> (ie, it's not the return value of your function)
[22:35:00] <grym> well, it also says you're returning a ndarray
[22:35:04] <LordKalma> yes
[22:35:11] <grym> which is not in agreement with what you think it's returning
[22:35:25] <LordKalma> the function says return {"constellation": const_out, "power": power_local}
[22:35:42] <LordKalma> which is clearly not an ndarray
[22:36:02] <LordKalma> it has one, sure
[22:36:05] <LordKalma> but it's not one
[22:36:21] *** Joins: Betal (~Betal@user/betal)
[22:36:32] <LordKalma> nevermind, found the bug
[22:37:05] <grym> quack, quack
[22:37:12] <LordKalma> thanks
[22:39:05] *** Quits: MrAlexBailey (~Alex@104-11-73-100.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 248 seconds)
[22:39:26] *** Quits: cdown (~cdown@82-69-42-66.dsl.in-addr.zen.co.uk) (Ping timeout: 250 seconds)
[22:40:07] <grym> does pydantic have a version of attr.evolve? i can never remember
[22:40:19] *** Quits: cloudbender (~cloudbend@user/cloudbender) (Ping timeout: 252 seconds)
[22:40:28] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[22:42:21] *** Joins: Cyp (~cyp@192038130244.mbb.telenor.dk)
[22:44:30] *** Quits: no_gravity (~no_gravit@user/no-gravity/x-5639427) (Quit: leaving)
[22:44:43] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[22:44:58] *** Joins: raxor2k (~raxor2k@78.158.231.197)
[22:45:05] *** Joins: yogoyo (~paddy@user/yogoyo)
[22:45:27] *** Joins: rubion (~rubion@cpc124306-ayle4-2-0-cust188.15-2.cable.virginm.net)
[22:45:35] <raxor2k> im kind of trying to follow this tutorial: https://www.tensorflow.org/tutorials/load_data/csv     ... but when i try to read my CSV file nothing happens? : https://bpa.st/O3CA
[22:45:50] <raxor2k> graingert: im corona free, and im feeling so good
[22:45:59] *** Joins: jaggz (~jaggz@user/jaggz)
[22:46:33] *** Joins: MrAlexBailey (~Alex@104-11-73-100.lightspeed.tukrga.sbcglobal.net)
[22:46:38] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[22:47:01] <graingert[m]> raxor2k: Nice one
[22:47:27] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[22:48:40] <syllin> where do all the people who understand programmatic excel access hang out? i.e. http://www.python-excel.org/ ?
[22:49:00] <jinsun> raxor2k: if by nothing happens you mean nothing is printed, then you have to add print() around the last line (or run that code in a jupyter cell)
[22:49:47] <DPA> "\N{PAW PRINTS}" - From where does python know which name <-> number correspond to each other? Where / how does it look it up?
[22:49:49] <raxor2k> jinsun: thanks
[22:50:54] <nedbat> DPA: those are Unicode code point names, but I'm not sure where the database is on disk
[22:54:39] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[22:55:40] <philipp64|work> Hi. Iâve got a naive question about âglobalâ.  If I have my main module, say âmyapp.pyâ and it has âvar = Noneâ at the global scope, then that will be visible in functions inside that module.  However, if I have âmylib.pyâ that gets imported into âmyapp.pyâ, and within âmylib.pyâ it does âlibvar = Noneâ globallyâ¦ but then within my function libfunc() I do âlibvar = json.load(â¦)â that seems to affect a *local*
[22:55:41] <philipp64|work> version of âlibvarâ in âlibfunc()ââ¦ unless I preface the function with âglobal libvarâ â¦ my question, is âWhy? Why isnât it the same behavior in both places?â
[22:56:50] <nedbat> philipp64|work: being visible is different than assigning.  Assignment makes a name local to the function, unless "global" tells the compiler differently.
[22:57:14] *** Joins: cpif (~pi@2601:282:a00:fe50::6769)
[22:57:15] <philipp64|work> Butâ¦ only in library modules it seems.
[22:57:22] <nedbat> philipp64|work: no, it's the same everywhere
[22:57:29] <nedbat> philipp64|work: can you link us to some code to look at?
[22:58:07] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[22:58:30] <philipp64|work> I need to run out to a meeting but Iâll try to come up with a test case when I get back and post it.
[22:58:54] <philipp64|work> 2nd questionâ¦ are there any good examples of forcing a schema when parsing JSON?
[22:59:21] <nedbat> DPA: the database seems to be a strangely encoded thing
[22:59:40] *** Quits: Abrax (~Abrax@user/abrax) (Read error: Connection reset by peer)
[23:00:04] *** Joins: Abrax (~Abrax@user/abrax)
[23:00:10] *** Quits: jokoon (~eio@2a01:e0a:542:b20:1561:2cb9:9952:8544) (Ping timeout: 240 seconds)
[23:00:13] <jinsun> DPA: `unicodedata.lookup("PAW PRINTS") == "\N{PAW PRINTS}"` and  `unicodedata.name("\N{PAW PRINTS}") == "PAW PRINTS"`, unicodedata docs link to https://www.unicode.org/Public/13.0.0/ucd/ as the source
[23:01:27] <DPA> Thanks, this is exactly what I was looking for.
[23:01:39] *** Joins: ckdCreations (~ckdCreati@147.55.130.33)
[23:01:42] <grym> philipp64|work: i find pydantic very useful for deserialising json
[23:04:38] *** Joins: netsan (~netsan@user/netsan)
[23:06:44] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[23:07:00] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[23:10:12] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Client Quit)
[23:12:07] *** Joins: akaWolf (~akaWolf@akawolf.org)
[23:13:13] *** Joins: Pandadub (~Barones@2804:7f3:8987:a56:1904:b84d:d454:b1fa)
[23:13:21] *** Joins: Akuli (~Akuli@82-203-162-19.bb.dnainternet.fi)
[23:13:26] <aphysically> grym: looks like uhhhhhh pex+setuptools maybe for something simple? or just setuptools for now since I'm not distributing it (but maybe learn *how* to distribute it with pex)
[23:13:58] *** Joins: manin (~x@185.242.190.95)
[23:15:09] *** Joins: pro_z (~pro_z@37.214.32.238)
[23:15:14] <grym> aphysically: shiv, too
[23:15:23] <grym> aphysically: shiv and pex get you out of some but not all binds
[23:15:55] <grym> critically, the deploy target has to have the python interpreter (and non python deps you may require) preinstalled
[23:18:23] <aphysically> I'm not sure how to run a setuptools project locally, I could pip install it but I don't really want to pip install anything on the system or user level (shudder), I guess I could make a wrapper script to enter a venv and run it
[23:18:47] <aphysically> .....or just learn pex and use the deployment when i want to run it outside of development
[23:19:02] *** Quits: Jigsy (~Jigsy@user/jigsy) (Killed (NickServ (GHOST command used by Jigsy`)))
[23:19:08] *** Joins: Jigsy` (~Jigsy@user/jigsy)
[23:19:52] *** Quits: twobitsprite (~twobitspr@195.181.171.237) (Ping timeout: 258 seconds)
[23:20:36] *** Joins: sirn- (~sirn@user/sirn)
[23:21:01] *** Jigsy` is now known as Jigsy
[23:21:02] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[23:21:32] *** Joins: twobitsprite (~twobitspr@107.13.51.62)
[23:21:59] *** Joins: upsala (~zcb@185.213.155.160)
[23:22:38] <grym> aphysically: install into a venv
[23:23:11] <aphysically> I mean I get that - I meant how I want to use it when I'm an actual user on my system without activating a venv every time just to run a script :p
[23:23:13] <grym> like the basic incantation is base_python -m venv somevenv; somevenv/bin/python -m pip my_thing; everthing else is window dressing
[23:23:22] *** Quits: sirn (~sirn@user/sirn) (Ping timeout: 245 seconds)
[23:23:22] *** sirn- is now known as sirn
[23:23:24] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Client Quit)
[23:23:41] <grym> aphysically: https://chriswarrick.com/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/ and then venv/bin/my_script_entry_point_string --options
[23:23:52] <aphysically> I think the best solution is to use a built pex myself
[23:24:13] <aphysically> when I'm developing I would use the package installed in a development venv I guess
[23:24:14] <grym> i use pipx , which does what i just said (but nicely): https://pypa.github.io/pipx/
[23:24:35] <aphysically> pipx = virtualenvwrapper but not?
[23:24:40] <grym> aphysically: so here's a really concrete example.  I have a stupid little script that lets me upload stuff to a pastebin. It lives at https://tildegit.org/grym/oxo
[23:24:57] <aphysically> ok, following
[23:25:17] <grym> i install it on my machine with `pipx install git+https://tildegit.org/grym/oxo`  and then oxo is on my path
[23:25:29] <grym> and it's Just Another Shell Tool
[23:26:20] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[23:27:06] <grym> that line makes a venv, hides it away, installs oxo and all its dependencies, and symlinks the entry point into ${HOME}/.local/bin
[23:28:14] <grym> for that to work, i the user have to 1. have pipx installed and 2. have a modern python installed.  I have those things _anyway_
[23:28:47] <aphysically> but
[23:28:51] <aphysically> sorry mistake
[23:29:39] *** Quits: somlis (~somlis@user/somlis) (Quit: WeeChat 3.2)
[23:30:56] <aphysically> grym: "ln -s oxovenv/bin/oxo ${HOME}/.local/bin # optional."
[23:31:02] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Client Quit)
[23:31:22] <grym> yeah, if you want it callable
[23:31:22] <aphysically> question: pip packages in a venv can run outside the venv? and all their dependencies and stuff are fine?
[23:31:41] <grym> that sounds a little confused
[23:31:45] <aphysically> I am a little confused
[23:31:51] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[23:31:57] <grym> but you can call an entry_point in a venv from anywhere you want, by full path, and it'll work out what its site is
[23:32:22] *** Joins: somlis (~somlis@user/somlis)
[23:32:39] *** Joins: jokoon (~eio@2a01:e0a:542:b20:1561:2cb9:9952:8544)
[23:32:51] <grym> activation of a venv is always strictly optional
[23:33:01] <grym> good thing too because doing it in cron is a pain in the ass
[23:33:39] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Client Quit)
[23:36:07] <aphysically> ok, and pip puts entry points defined in setuptools in the /bin folder?
[23:36:12] <aphysically> entry_point s
[23:36:30] <aphysically> ok
[23:36:50] <aphysically> that's not so bad then
[23:36:53] <grym> yep
[23:37:15] <grym> venvs are like ... 2/3 of the way to flatpak
[23:37:19] <grym> if that's fair
[23:37:34] <grym> the thing they absolutely cannot do is manage anything non-python that you need to have around.
[23:39:35] <aphysically> okay so a short term project can be:
[23:39:41] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[23:40:16] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 252 seconds)
[23:40:22] *** Quits: bukzor (~bukzor@2603-6000-8100-9c55-90f1-cd5a-9ee9-5576.res6.spectrum.com) (Quit: Client closed)
[23:40:30] <aphysically> 1) convert project to setuptools structure, trying to learn about how to do this canonically
[23:40:38] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 268 seconds)
[23:40:47] <aphysically> 2) after all of this is done, learn how to package it in pex
[23:40:52] <grym> there are three canons! ha ha ha
[23:41:09] <aphysically> and what are those
[23:41:24] <grym> pyproject.toml (pep 517/518), setup.cfg, setup.py
[23:41:26] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Client Quit)
[23:41:26] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[23:41:50] <grym> oxo is an example of the first.  i recommend, though, writing setup.py at least once
[23:41:55] *** Joins: djapo (~archangel@user/djapo)
[23:42:21] <grym> it's the least "magic", and everything else tries to "do what setup.py does but better", so it's useful to know what setup.py does
[23:43:03] <aphysically> so with the first I wouldn't have to necessarily depend on setuptools, but setup.py is setuptools and is probably used by the wider python package community at large or one of its derivatives (setup.cfg?) when they became disenchanted with it?
[23:43:13] *** Joins: Nact (~l@2a02:a03f:c0b0:f600:3253:5994:1b4f:e854)
[23:43:14] <grym> ( so that when you look at something like poetry and go "ok, shiny thing, why aren't you working", you have some intuition )
[23:43:32] <grym> end of the day, i don't care what you use as long as i can `pip install` your thing
[23:43:38] <grym> if i can't do that, i'm sad
[23:43:54] <grym> if i can, i don't care what's under the covers
[23:44:13] <grym> and i think i'm not alone in that sentiment
[23:44:50] <aphysically> setup.py = setuptools internal thing, supported by pip? (and also setup.cfg is setuptools? I'm trying to figure this out)
[23:45:10] *** Joins: ovnicraft (~ovnicraft@179.49.44.28)
[23:45:27] <grym> i think setup.py and setup.cfg are both setuptools
[23:45:52] <aphysically> and the .toml is python spec in the sense that it's usable in a system with only a modern python installed?
[23:45:56] <grym> pyproject.toml and to a certain extent setup.cfg do double-duty as "how i install stuff" but also "a central place to ram like, linter options into"
[23:46:02] *** Quits: ano (~weechat@user/ano) (Remote host closed the connection)
[23:46:09] <grym> any supported python can handle pyproject.toml projects
[23:46:12] <grym> that means 3.6+
[23:46:23] *** Joins: ano (~weechat@user/ano)
[23:46:32] <grym> (and n.b., 3.6 dies in december)
[23:46:43] <aphysically> I'm not at this time interested in learning to support less than the latest stable release (3.9.x)
[23:46:49] <grym> good!
[23:46:51] <grym> life will suck less
[23:46:53] <grym> for you
[23:47:01] <grym> i have this luxury too
[23:47:12] <grym> well, i have to support 3.7 still because tensorflow
[23:47:39] *** Joins: Doffi (~doffi@91.132.197.188)
[23:47:46] <grym> but pretty close
[23:48:37] <aphysically> if I run "pip install blah" and my system doesn't have setuptools, does pip pull in setuptools or fail
[23:49:08] <grym> it should fail, but i don't use either system python or the user install site
[23:49:13] *** Quits: ovnicraft (~ovnicraft@179.49.44.28) (Client Quit)
[23:49:14] <grym> so i don't know for sure
[23:49:46] <aphysically> would you say most of the major packages people use are using some form of setuptools or its derivatives, or are toml popular as well?
[23:50:16] <grym> the bulk of the world uses setuptools.  newer build backends (poetry, flit) exist and are growing, but are still well in the minority
[23:50:43] <grym> the bulk of the world that bothers to have packaging at all, i should say
[23:50:54] <grym> instead of doing fairly unholy things :)
[23:51:21] <aphysically> your script https://tildegit.org/grym/oxo uses poetry (and so needs it installed on the system to run the pip command presumably?)
[23:51:42] <grym> aphysically: my package uses poetry, you  the user don't need to have poetry installed
[23:51:46] <grym> you need a modern-ish pip
[23:51:56] <aphysically> fairly unholy things like what I'm doing or worse?
[23:52:00] <grym> you would need to have poetry installed if you wanted to send me a PR or something
[23:52:05] *** Joins: node1 (~node1@user/node1)
[23:52:12] <grym> aphysically: the Bad Things are like, diddling with sys.path
[23:52:16] <grym> or setting PYTHONPATH
[23:52:25] <aphysically> does poetry manage your  pyproject.toml for you?
[23:52:27] <grym> or relying on cwd
[23:52:32] <grym> aphysically: it does
[23:52:34] <aphysically> I forgot you also had a toml
[23:52:42] *** Joins: venue (~venue@user/venue)
[23:53:36] *** Quits: Obo (~roberto@h-46-59-103-134.a498.priv.bahnhof.se) (Quit: WeeChat 2.8)
[23:54:45] *** Joins: rendar (~rendar@user/rendar)
[23:55:33] <grym> i also hand-edited parts of that file
[23:55:44] <grym> to add tool configuration options for black and isort
[23:55:53] *** Quits: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ¦)
[23:56:03] <grym> (which are autoformatters)
[23:56:23] <aphysically> I've been trying to navigate the world of autoformatters
[23:56:46] <grym> my preferences are pretty obvious :)
[23:57:13] <grym> my preference is "i don't want to think about this"
[23:57:29] <aphysically> I don't mind aggressively reformatting my code except for that I'd like a teeny bit of control sometimes
[23:57:51] <grym> theres' #fmt: off
[23:58:12] <grym> once in a while i have to inline a matrix or something, and i'll use that sparingly
[23:58:25] <aphysically> like if I'm defining a fixed matrix and want the array formatted in the readable form, or uh like in
[23:58:36] <aphysically> when I'm defining my commands I want the flag and its argument on the same line
[23:58:48] <aphysically> '-v', 'verbose',
[23:59:17] <aphysically> I tried black and when I did #fmt: off I managed to kill it :D
