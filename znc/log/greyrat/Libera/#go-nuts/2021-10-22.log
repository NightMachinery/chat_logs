[00:13:06] *** Quits: tane (~tane@dslb-002-201-234-197.002.201.pools.vodafone-ip.de) (Quit: Leaving)
[00:16:16] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[00:17:27] *** Joins: AlmogBaku (~AlmogBaku@bzq-230-168-31-226.red.bezeqint.net)
[00:17:52] *** Quits: hentai (~hentai@user/hentai) (Read error: Connection reset by peer)
[00:17:57] *** Quits: dza (~dza@user/dza) (Quit: Leaving.)
[00:18:09] *** Joins: hentai (~hentai@2a01:e0a:a5c:a070:bf4b:d0ec:1d9e:8893)
[00:18:09] *** Quits: hentai (~hentai@2a01:e0a:a5c:a070:bf4b:d0ec:1d9e:8893) (Changing host)
[00:18:09] *** Joins: hentai (~hentai@user/hentai)
[00:18:10] *** Quits: AlmogBaku (~AlmogBaku@bzq-230-168-31-226.red.bezeqint.net) (Client Quit)
[00:19:36] *** Quits: jkl1337 (~jkl@user/jkl) (Quit: Gone.)
[00:20:37] *** Quits: mikoto-chan (~mikoto-ch@185.237.102.126) (Read error: Connection reset by peer)
[00:20:51] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[00:20:57] *** Joins: jkl (~jkl@user/jkl)
[00:21:43] *** Quits: dab21 (~dab21@pistis.amyanddavid.net) (Quit: ZNC 1.8.2 - https://znc.in)
[00:25:59] *** Joins: dab21 (~dab21@pistis.amyanddavid.net)
[00:26:02] *** Joins: ahappydeath (~ahappydea@user/ahappydeath)
[00:27:39] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:30:25] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Remote host closed the connection)
[00:30:26] *** Quits: ahappydeath (~ahappydea@user/ahappydeath) (Ping timeout: 260 seconds)
[00:31:07] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[00:32:21] *** Joins: ahappydeath (ahappydeat@user/ahappydeath)
[00:32:52] *** Quits: nekron (~nekron@noordsee.de) (Remote host closed the connection)
[00:34:20] *** Joins: nekron (~nekron@noordsee.de)
[00:37:45] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 260 seconds)
[00:41:32] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-848c-99f6-3ab2-978a.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:42:45] *** Joins: plasticmae (~plasticma@185.242.5.35)
[00:46:16] *** Joins: freakazoid12345 (~matt@2603-9000-cf0f-80e3-21be-bb4c-16b0-568a.inf6.spectrum.com)
[00:49:19] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:d5d4:c269:2217:de9f) (Ping timeout: 258 seconds)
[00:55:20] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[00:55:21] *** Quits: zwr (~zwr@2804:d45:b966:fb00:ecc0:34ba:7ca0:1eda) (Remote host closed the connection)
[00:58:28] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[00:58:57] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Client Quit)
[01:06:27] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[01:08:41] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[01:12:05] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-848c-99f6-3ab2-978a.res6.spectrum.com)
[01:12:18] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-848c-99f6-3ab2-978a.res6.spectrum.com) (Client Quit)
[01:16:07] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[01:18:16] *** Joins: plasticmae_ (~plasticma@cpe-172-249-151-214.socal.res.rr.com)
[01:19:13] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 258 seconds)
[01:20:50] *** Quits: plasticmae (~plasticma@185.242.5.35) (Ping timeout: 260 seconds)
[01:21:20] *** Joins: fikran (~fikran@user/fikran)
[01:24:40] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-848c-99f6-3ab2-978a.res6.spectrum.com)
[01:26:12] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[01:29:16] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[01:30:32] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[01:31:17] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[01:31:35] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[01:43:42] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 260 seconds)
[01:47:34] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-848c-99f6-3ab2-978a.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:53:51] *** Joins: brainfreeze (~brainfree@2a03:1b20:4:f011::20d)
[02:09:15] *** Joins: awmv1 (~awmv@2a02:21b0:644f:c181:5da1:b6f3:cab7:4428)
[02:09:31] *** Quits: awmv1 (~awmv@2a02:21b0:644f:c181:5da1:b6f3:cab7:4428) (Client Quit)
[02:09:58] *** Joins: awmv8 (~awmv@2a02:21b0:644f:c181:5da1:b6f3:cab7:4428)
[02:11:03] *** Quits: awmv8 (~awmv@2a02:21b0:644f:c181:5da1:b6f3:cab7:4428) (Client Quit)
[02:11:14] *** Joins: Guest91 (~Guest91@2a02:21b0:644f:c181:5da1:b6f3:cab7:4428)
[02:11:29] *** Quits: awmv (~awmv@2a02:21b0:644f:c181:58aa:15e0:1029:d3ef) (Ping timeout: 256 seconds)
[02:11:46] *** Quits: Guest91 (~Guest91@2a02:21b0:644f:c181:5da1:b6f3:cab7:4428) (Client Quit)
[02:11:55] *** Joins: awmv (~awmv@2a02:21b0:644f:c181:5da1:b6f3:cab7:4428)
[02:14:36] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[02:19:54] *** Joins: gggpkm (~gggpkm@114.245.104.31)
[02:20:32] *** Joins: gggpkm_ (~gggpkm@114.245.104.31)
[02:21:03] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-848c-99f6-3ab2-978a.res6.spectrum.com)
[02:24:02] *** Quits: meinside (uid24933@helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[02:24:35] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:21be:bb4c:16b0:568a)
[02:24:38] *** Quits: yelnah (~felix@2001:44b8:3082:ad:6f0:21ff:fe3c:d4d7) (Ping timeout: 268 seconds)
[02:24:46] *** Quits: gggpkm (~gggpkm@114.245.104.31) (Ping timeout: 260 seconds)
[02:27:38] *** Quits: freakazoid12345 (~matt@2603-9000-cf0f-80e3-21be-bb4c-16b0-568a.inf6.spectrum.com) (Ping timeout: 265 seconds)
[02:28:01] *** Joins: yonson (~yonson@2600:8801:d900:7bb:1e69:7aff:fea2:4e85)
[02:30:26] *** Quits: hentai (~hentai@user/hentai) (Read error: Connection reset by peer)
[02:30:42] <yonson> whats the reason for checking if `m != nil` in this case? https://play.golang.org/p/zGoRwTc3g77
[02:30:45] *** Joins: hentai (~hentai@2a01:e0a:a5c:a070:bf4b:d0ec:1d9e:8893)
[02:30:45] *** Quits: hentai (~hentai@2a01:e0a:a5c:a070:bf4b:d0ec:1d9e:8893) (Changing host)
[02:30:45] *** Joins: hentai (~hentai@user/hentai)
[02:33:26] <fizzie> It's not entirely uncommon to make methods callable on a nil receiver.
[02:33:32] <fizzie> All proto accessors do that, for example.
[02:34:02] <fizzie> And of course if you want to do that, you need to have a `m != nil` check in order for the `m.getUserFn` access not to panic.
[02:35:28] <b0nn> hmm, you shouldn't be able to call that function if m is nil
[02:35:44] <fizzie> No, you're perfectly able to call that method even if m is nil.
[02:35:57] *** Parts: hentai (~hentai@user/hentai) (Leaving)
[02:36:10] <fizzie> As long as you have a value of type `*userTeamMock`, you can call the method on it.
[02:37:30] <fizzie> https://play.golang.org/p/CNRLk7yEEt3 and so on.
[02:38:25] <fizzie> I mean, you can certainly argue making methods not panic on a nil pointer receiver is a bad idea and you shouldn't do it, if that's what you meant. But the language doesn't have any rule against it.
[02:38:50] *** Parts: jsanford_ (~jsanford@lax.froop.com) ()
[02:39:23] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[02:39:32] <b0nn> Oh, TIL https://play.golang.org/p/CL7uf5Q7RGU
[02:39:43] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[02:41:46] *** Joins: jsanford (~jsanford@user/jsanford)
[02:42:53] *** Joins: yelnah (~felix@2001:44b8:3088:5a:6f0:21ff:fe3c:d4d7)
[02:45:01] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[02:46:24] *** Joins: mov_eax (~mov_eax@user/mov-eax/x-5035058)
[02:47:51] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:9cdf:8aa:f338:8a34)
[02:49:00] *** Quits: ahappydeath (ahappydeat@user/ahappydeath) (Ping timeout: 260 seconds)
[02:50:50] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:21be:bb4c:16b0:568a) (Ping timeout: 265 seconds)
[02:52:34] *** Joins: rbn (~rbn@user/rbn)
[02:52:34] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:9cdf:8aa:f338:8a34) (Read error: Connection reset by peer)
[02:53:15] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:9cdf:8aa:f338:8a34)
[02:53:57] *** Quits: mov_eax (~mov_eax@user/mov-eax/x-5035058) (Quit: WeeChat 3.3)
[02:55:35] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:9cdf:8aa:f338:8a34)
[02:59:03] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:9cdf:8aa:f338:8a34) (Ping timeout: 265 seconds)
[03:02:41] *** Joins: burningserenity (~burningse@2603-9001-0f01-ad99-0000-0000-0000-1008.inf6.spectrum.com)
[03:04:38] *** Quits: burningserenity (~burningse@2603-9001-0f01-ad99-0000-0000-0000-1008.inf6.spectrum.com) (Client Quit)
[03:12:12] *** Joins: jackneill (~jackneill@20014C4E18136400DB8E16626349094B.dsl.pool.telekom.hu)
[03:12:18] <jackneill> hey
[03:12:58] <jackneill> is there a pro of doing struct X { MyInterface } instead of var _ Iface = ..
[03:13:26] <KirkMcDonald> These don't seem like comparable things.
[03:13:39] *** Joins: burningserenity (~burningse@2603-9001-0f01-ad99-0000-0000-0000-1008.inf6.spectrum.com)
[03:14:28] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[03:14:30] <jackneill> KirkMcDonald, both test that the type (here struct) impls the iface?
[03:14:40] *** Quits: jawn-smith (~william@192-063-104-161.res.spectrum.com) (Ping timeout: 260 seconds)
[03:15:27] <KirkMcDonald> No. `struct X { I }` merely declares a struct that has the interface as an embedded field.
[03:16:11] *** Joins: jawn-smith (~william@2001:67c:1562:8007::aac:417c)
[03:16:41] <jackneill> oh i see. thank you
[03:16:59] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[03:28:40] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[03:29:32] *** Joins: bpalmer (~user@user/bpalmer)
[03:30:40] *** Joins: fikran (~fikran@user/fikran)
[03:33:23] *** Quits: krux02 (~krux02@p200300e81728d600319fb3a709c9a336.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[03:33:47] *** Joins: gggpkm__ (~gggpkm@114.245.104.31)
[03:34:06] <yonson> fizzie: thanks for the explanation!
[03:37:06] *** Quits: gggpkm_ (~gggpkm@114.245.104.31) (Ping timeout: 260 seconds)
[03:38:15] *** Joins: zalt (~zalt@user/zalt)
[03:39:24] <zalt> what would happen if you updated a global variable that's being accessed by a different thread?
[03:39:42] <bpalmer> who can say? (which is the problem)
[03:39:53] <fizzie> A data race.
[03:39:55] <zalt> can something like a segfault happen? or are there magical protections against such concurrency issues?
[03:40:05] <bpalmer> There are no magical protections.
[03:40:20] <zalt> hmm, it works on my pc
[03:40:42] <zalt> it's a toy project, i think the right way of solving this is using channels or using a mutex
[03:40:58] <fizzie> A lot of things unfortunately work in practice, at least up to a point. You may get https://golang.org/doc/articles/race_detector to trip on it though.
[03:44:13] <zalt> i see, thanks.
[03:44:51] <zalt> go seems to be "less safe" than other languages like java
[03:45:27] <zalt> so far i like it, there's no bullshit, the basics can be learned in 2 days for an experienced programmer
[03:45:48] <bpalmer> zalt: java has the exact same issue with shared data being accessed from multiple threads.
[03:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[03:47:01] <zalt> but instead of a segfault/memory corruption, doesn't the jvm detect it?
[03:47:15] <b0nn> In fact, the case you point to is why globals are frowned upon in all concurrent programming
[03:47:37] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[03:48:04] <zalt> yes, i know, but it's a toy project
[03:49:10] <zalt> the easiest way to do concurrent programming is to split things into different data sets and have a thread or a coroutine handle each one, i'm doing the exact opposite to see what happens
[03:49:21] *** Joins: krux02 (~krux02@p200300e817076e005ebbf251e029334f.dip0.t-ipconnect.de)
[03:50:01] <b0nn> If only there were decades of research on the very subject
[03:50:34] *** Joins: jlindgren[m] (~jlindgren@2001:470:69fc:105::1:2056)
[03:50:59] <zalt> i mean to see what happens in go.
[03:51:41] <zalt> i already have plenty of experience with pthreads in C
[03:52:48] <zalt> https://github.com/nilput/go_playground/blob/master/concurrent-io/http/http_serve.go#L10
[03:53:47] <zalt> i have a program that reads stdin and an http server running concurrently, the server prints the global variable Content, the stdin coroutine can update it
[03:59:52] <zalt> are there instances where concurrency issues were exploitable for something other than denial of service?
[04:00:08] *** Joins: mhorn (~textual@134.134.137.89)
[04:00:36] *** Quits: burningserenity (~burningse@2603-9001-0f01-ad99-0000-0000-0000-1008.inf6.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[04:00:38] *** Quits: mhorn (~textual@134.134.137.89) (Client Quit)
[04:01:01] <lazyreader> I mean a data race means the state of the programs' memory is unknown
[04:01:27] <lazyreader> the program _will_ immediately panic and exit in the case of overlapping reads and writes
[04:02:15] <zalt> doesn't this imply magical protection mechanisms?
[04:02:41] <lazyreader> well, if "protect" you mean "immediately prevent any further damage and quit"
[04:04:18] <zalt> but this only happens if something goes horribly wrong like the pointer pointing to a non accessible region of memory which gets detected by the operating system no?.
[04:05:29] <lazyreader> I'm not sure what you're trying to argue here. there's no such thing as a benign data race.
[04:06:07] <zalt> yes, there isn't from the point of view of program correctness.
[04:07:04] <zalt> but i'm wondering from the point of view of an attacker who cares about how things are implemented and how memory operations are done on a given architecture.
[04:08:01] <lazyreader> I'm not sure what the answer to that question is, but I'm not sure the answer matters either
[04:09:28] *** Quits: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (Quit: ZNC 1.8.2 - https://znc.in)
[04:10:22] <zalt> i think the reason it doesn't matter is it's nearly impossible to reproduce the same behaviour in data race bugs, otherwise it would be a new class of vulnerabilities.
[04:10:44] *** Joins: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net)
[04:10:45] <lazyreader> I can think of many bugs with extreme real-world consequences that involve data races
[04:11:22] <lazyreader> I was wrong earlier though, go only panics on racy map accesses: https://dave.cheney.net/2015/12/07/are-go-maps-sensitive-to-data-races
[04:11:35] <lazyreader> everything else you can try and catch with -race
[04:11:42] <lazyreader> https://dave.cheney.net/2014/06/27/ice-cream-makers-and-data-races
[04:13:29] <lazyreader> what is https://en.wikipedia.org/wiki/Therac-25, after all, but a very bad data race?
[04:17:42] *** Joins: pylong_ (~bluehoney@cpe-75-81-204-188.mi.res.rr.com)
[04:19:45] *** Joins: pylong__ (bluehoney@gateway/vpn/protonvpn/bluehoney)
[04:20:30] <zalt> interesting..
[04:22:22] *** Quits: pylong_ (~bluehoney@cpe-75-81-204-188.mi.res.rr.com) (Ping timeout: 260 seconds)
[04:33:42] *** Quits: krux02 (~krux02@p200300e817076e005ebbf251e029334f.dip0.t-ipconnect.de) (Remote host closed the connection)
[04:39:55] *** gggpkm__ is now known as gggpkm
[04:40:03] <gggpkm> Does it increase ref count after  deepcopy for one string ?
[04:44:52] *** Quits: andlabs (~andlabs@2a00:79e1:abc:1a12:b51a:eaef:e823:704c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:49:45] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 260 seconds)
[04:51:08] *** Joins: plasticmae__ (~plasticma@185.242.5.35)
[04:52:31] *** Quits: plasticmae_ (~plasticma@cpe-172-249-151-214.socal.res.rr.com) (Ping timeout: 252 seconds)
[04:53:50] *** Quits: plasticmae__ (~plasticma@185.242.5.35) (Client Quit)
[04:57:23] *** Quits: yelnah (~felix@2001:44b8:3088:5a:6f0:21ff:fe3c:d4d7) (Quit: ZNC 1.8.2 - https://znc.in)
[04:58:30] *** Joins: mud (~mud@user/kadoban)
[05:02:46] *** Joins: zwr (~zwr@2804:d45:b966:fb00:c559:3de9:7a37:317a)
[05:04:14] *** Quits: pylong__ (bluehoney@gateway/vpn/protonvpn/bluehoney) (Ping timeout: 258 seconds)
[05:09:01] *** Quits: jespada (~jespada@2803:9800:9842:7a62:9560:3718:bb2f:f5ee) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:10:53] *** Quits: kiril (~kiril@85.91.153.163) (Quit: ZNC - https://znc.in)
[05:11:37] *** Rhvs is now known as Rhys
[05:12:05] *** Joins: kiril (~kiril@85.91.153.163)
[05:12:30] *** Quits: zalt (~zalt@user/zalt) (Ping timeout: 260 seconds)
[05:13:32] *** Quits: dab21 (~dab21@pistis.amyanddavid.net) (Quit: ZNC 1.8.2 - https://znc.in)
[05:14:38] *** Joins: dab21 (~dab21@pistis.amyanddavid.net)
[05:16:33] *** Joins: Guest64 (~Guest64@2600:1700:9850:1a20:7152:a177:5b08:7dfc)
[05:16:39] *** Joins: justicefries (sid26447@id-26447.tinside.irccloud.com)
[05:17:13] *** Quits: awmv (~awmv@2a02:21b0:644f:c181:5da1:b6f3:cab7:4428) (Quit: Client closed)
[05:20:02] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Remote host closed the connection)
[05:20:24] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[05:23:28] *** Joins: andlabs (~andlabs@2604:ca00:178:4ef6:cdfc:ff3b:a47b:8e5)
[05:24:21] *** Quits: Guest64 (~Guest64@2600:1700:9850:1a20:7152:a177:5b08:7dfc) (Quit: Client closed)
[05:38:10] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[05:40:01] *** Joins: fikran (~fikran@user/fikran)
[05:40:35] *** Quits: andlabs (~andlabs@2604:ca00:178:4ef6:cdfc:ff3b:a47b:8e5) (Ping timeout: 264 seconds)
[05:47:12] *** Joins: andlabs (~andlabs@209.107.182.187)
[05:48:37] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[05:49:26] *** Quits: yonson (~yonson@2600:8801:d900:7bb:1e69:7aff:fea2:4e85) (Remote host closed the connection)
[05:49:33] *** Joins: yonson (~yonson@2600:8801:d900:7bb:1e69:7aff:fea2:4e85)
[05:56:10] *** Quits: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net) (Ping timeout: 260 seconds)
[05:57:25] *** Quits: justicefries (sid26447@id-26447.tinside.irccloud.com) (Ping timeout: 260 seconds)
[05:57:31] *** Quits: hdm (sid500490@aha/hacker/hdm) (Ping timeout: 258 seconds)
[05:58:31] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (Ping timeout: 252 seconds)
[05:58:39] *** Joins: hdm (sid500490@aha/hacker/hdm)
[05:58:40] *** Quits: liam (sid7517@id-7517.helmsley.irccloud.com) (Ping timeout: 258 seconds)
[05:59:30] *** Joins: sa (sid1055@tinside.irccloud.com)
[05:59:42] *** Joins: justicefries (sid26447@tinside.irccloud.com)
[06:00:22] *** Joins: liam (sid7517@helmsley.irccloud.com)
[06:11:49] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[06:11:49] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[06:13:43] *** Joins: gggpkm_ (~gggpkm@60.10.194.46)
[06:16:17] *** Joins: gggpkm__ (~gggpkm@60.10.23.170)
[06:17:10] *** Quits: gggpkm (~gggpkm@114.245.104.31) (Ping timeout: 260 seconds)
[06:20:08] *** Quits: gggpkm_ (~gggpkm@60.10.194.46) (Ping timeout: 258 seconds)
[06:20:45] *** Quits: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de) (Ping timeout: 260 seconds)
[06:22:00] *** Joins: dsrt^ (~dsrt@wsip-68-227-92-38.mc.at.cox.net)
[06:22:32] *** Joins: dza (~dza@user/dza)
[06:24:38] *** Quits: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[06:27:15] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[06:29:34] *** Joins: andlabs_ (~andlabs@2604:ca00:178:97:bdcd:f1:381b:8ccb)
[06:31:34] *** Quits: andlabs (~andlabs@209.107.182.187) (Ping timeout: 265 seconds)
[06:36:15] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[06:41:39] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[06:43:59] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Read error: Connection reset by peer)
[06:44:11] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[06:47:54] *** Quits: jawn-smith (~william@2001:67c:1562:8007::aac:417c) (Remote host closed the connection)
[06:48:36] *** Quits: andlabs_ (~andlabs@2604:ca00:178:97:bdcd:f1:381b:8ccb) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:50:29] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-848c-99f6-3ab2-978a.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[06:50:30] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 260 seconds)
[07:04:17] *** Joins: zalt (~zalt@user/zalt)
[07:04:47] *** Joins: gggpkm_ (~gggpkm@114.245.104.31)
[07:08:00] *** Quits: gggpkm__ (~gggpkm@60.10.23.170) (Ping timeout: 260 seconds)
[07:14:52] *** Joins: andlabs (~andlabs@70.107.171.168)
[07:17:42] *** Joins: mkopriva (~mkopriva@ip-78-45-72-123.net.upcbroadband.cz)
[07:21:38] *** Joins: freakazoid333 (~matt@2603:9000:cf0f:80e3:c432:627d:b3c0:9304)
[07:23:00] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:9cdf:8aa:f338:8a34) (Ping timeout: 258 seconds)
[07:26:34] *** gggpkm_ is now known as gggpkm
[07:47:42] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[07:49:22] *** Joins: fikran (~fikran@user/fikran)
[08:06:34] *** Joins: mikoto-chan (~mikoto-ch@185.237.102.125)
[08:12:23] *** Quits: rockyh (~rockyh@user/rockyh) (Ping timeout: 264 seconds)
[08:19:01] *** Joins: rockyh (~rockyh@user/rockyh)
[08:24:22] *** Joins: lompik (~lompik@user/lompik)
[08:25:53] *** Quits: Awoobis (A_D@libera/staff/dragon) (Ping timeout: 624 seconds)
[08:26:13] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[08:26:22] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:27:24] *** Quits: ilpanda (ilpanda@user/ilpanda) (Ping timeout: 258 seconds)
[08:34:37] *** Quits: freakazoid333 (~matt@2603:9000:cf0f:80e3:c432:627d:b3c0:9304) (Read error: Connection reset by peer)
[08:35:15] *** Joins: freakazoid333 (~matt@2603-9000-cf0f-80e3-c432-627d-b3c0-9304.inf6.spectrum.com)
[08:36:16] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[08:36:47] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[08:42:33] *** Quits: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net) (Ping timeout: 265 seconds)
[08:45:43] *** Quits: arcatech (~arcatech@user/arcatech) (Ping timeout: 252 seconds)
[08:46:30] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[08:50:01] *** Joins: cfel (~cfel@104.167.156.180)
[08:51:24] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[08:56:30] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 260 seconds)
[09:01:41] *** Joins: A_Dragon (A_D@libera/staff/dragon)
[09:06:15] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 276 seconds)
[09:06:40] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[09:07:29] *** Joins: mei (~mei@user/mei)
[09:07:44] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:c432:627d:b3c0:9304)
[09:08:08] *** Quits: cfel (~cfel@104.167.156.180) (Quit: Lost terminal)
[09:08:14] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[09:09:34] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[09:10:44] *** Quits: freakazoid333 (~matt@2603-9000-cf0f-80e3-c432-627d-b3c0-9304.inf6.spectrum.com) (Ping timeout: 265 seconds)
[09:15:30] *** Quits: mikoto-chan (~mikoto-ch@185.237.102.125) (Quit: mikoto-chan)
[09:22:05] *** Joins: ilpanda (~ilpanda@shell.xshellz.com)
[09:27:38] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[09:30:23] *** Quits: ilpanda (~ilpanda@shell.xshellz.com) (Ping timeout: 264 seconds)
[09:46:02] *** Joins: bkircher (~bkircher@2001:a61:24b5:cd01:711f:b4dc:f9:b325)
[09:52:05] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:55:14] *** Joins: freakazoid12345 (~matt@35.136.210.185)
[09:56:06] *** Joins: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de)
[09:56:43] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 258 seconds)
[09:57:05] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[09:57:52] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:c432:627d:b3c0:9304) (Ping timeout: 258 seconds)
[09:58:23] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[09:58:43] *** Joins: fikran (~fikran@user/fikran)
[09:59:51] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[10:00:30] *** Joins: ckeshav (~keshavcha@103.66.50.47)
[10:02:24] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[10:02:51] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Client Quit)
[10:04:34] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:05:10] *** Joins: ilpanda (~ilpanda@shell.xshellz.com)
[10:10:36] *** Joins: freakazoid343 (~matt@2603-9000-cf0f-80e3-c432-627d-b3c0-9304.inf6.spectrum.com)
[10:11:00] *** ckeshav is now known as ckeshav_
[10:11:34] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[10:11:34] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[10:12:39] *** ckeshav_ is now known as ckeshav__
[10:13:25] *** Quits: freakazoid12345 (~matt@35.136.210.185) (Ping timeout: 265 seconds)
[10:13:46] *** ckeshav__ is now known as ckeshav
[10:14:19] *** Quits: ilpanda (~ilpanda@shell.xshellz.com) (Quit: ZNC 1.6.5+deb1+deb9u2 - http://znc.in)
[10:16:11] *** Quits: ckeshav (~keshavcha@103.66.50.47) (Changing host)
[10:16:11] *** Joins: ckeshav (~keshavcha@user/ckeshav)
[10:17:16] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[10:17:45] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Client Quit)
[10:17:59] *** Joins: mickey8 (~user@user/mickey)
[10:21:16] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[10:21:42] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Client Quit)
[10:21:42] *** Joins: theoceaniscool (~theoceani@119.12.232.133)
[10:21:59] *** Quits: zalt (~zalt@user/zalt) (Ping timeout: 264 seconds)
[10:27:59] *** Quits: adip (~adip@die201.neoplus.adsl.tpnet.pl) (Ping timeout: 264 seconds)
[10:29:24] *** Quits: ckeshav (~keshavcha@user/ckeshav) (Quit: Leaving)
[10:34:39] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Ping timeout: 276 seconds)
[10:40:23] <mickey8> i wanna try calling SetThreadLocale on windows, but i cant find that in any of the official packages
[10:40:25] <mickey8> any ideas?
[10:40:47] <dngray[m]> does anyone know of a maintained tool like https://github.com/kolypto/j2cli but for go text/template?
[10:43:37] *** Quits: brainfreeze (~brainfree@2a03:1b20:4:f011::20d) (Quit: Leaving)
[10:46:07] *** Joins: arcatech (~arcatech@user/arcatech)
[10:48:45] <andlabs> mickey8: note that goroutines hop threads so you will need ot lock the OS thread if you want that call to actually do anything
[10:49:24] <mickey8> i ultimately just want to run some native windows app and force it to return the output in english regardless of the user's settings
[10:49:26] <andlabs> once you do that check golang.org/x/sys
[10:49:34] <andlabs> oh uhh
[10:49:35] *** Joins: gggpkm_ (~gggpkm@60.10.23.170)
[10:49:38] *** Joins: arinov (~arinov@213.194.126.155)
[10:49:40] <andlabs> I'm actually not sure if you can do that in Go
[10:49:54] <andlabs> ...or on Windows
[10:49:58] <mickey8> i was hoping setthreadlocale would help :q
[10:52:30] *** Quits: gggpkm (~gggpkm@114.245.104.31) (Ping timeout: 260 seconds)
[10:52:32] <andlabs> https://stackoverflow.com/questions/24060071/change-language-in-windows-before-calling-process yeah no SetThreadLocale is not inherited
[10:52:53] <andlabs> (and Windows processes don't "inherit" like that to begin with; this is not fork/exec)
[10:53:03] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[10:53:05] <andlabs> (and even if it was you can't really fork/exec in Go with arbitrary code between the two)
[10:53:37] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Client Quit)
[10:53:52] *** Quits: arcatech (~arcatech@user/arcatech) (Ping timeout: 252 seconds)
[10:54:40] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[10:55:03] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[11:01:53] *** Quits: dsrt^ (~dsrt@wsip-68-227-92-38.mc.at.cox.net) (Ping timeout: 258 seconds)
[11:03:17] *** Quits: bkircher (~bkircher@2001:a61:24b5:cd01:711f:b4dc:f9:b325) (Quit: WeeChat 3.2)
[11:04:12] *** Joins: mrig (~AdiIRC@user/mrig)
[11:20:22] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:c432:627d:b3c0:9304)
[11:21:45] *** Quits: gggpkm_ (~gggpkm@60.10.23.170) (Read error: Connection reset by peer)
[11:21:55] *** Joins: gggpkm_ (~gggpkm@60.10.194.46)
[11:23:10] *** Quits: freakazoid343 (~matt@2603-9000-cf0f-80e3-c432-627d-b3c0-9304.inf6.spectrum.com) (Ping timeout: 265 seconds)
[11:32:10] *** Joins: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu)
[11:34:40] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[11:35:00] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[11:37:35] *** Joins: freakazoid343 (~matt@2603-9000-cf0f-80e3-c432-627d-b3c0-9304.inf6.spectrum.com)
[11:40:36] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:c432:627d:b3c0:9304) (Ping timeout: 258 seconds)
[11:42:27] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[11:42:49] *** Joins: freakazoid12345 (~matt@2603-9000-cf0f-80e3-89b9-fad9-1d10-8fb2.inf6.spectrum.com)
[11:43:02] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Client Quit)
[11:43:10] *** Joins: bkircher (~bkircher@2001:a61:24b5:cd01:711f:b4dc:f9:b325)
[11:46:22] *** Quits: freakazoid343 (~matt@2603-9000-cf0f-80e3-c432-627d-b3c0-9304.inf6.spectrum.com) (Ping timeout: 265 seconds)
[11:51:37] *** Quits: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu) (Ping timeout: 252 seconds)
[11:55:30] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:58:13] *** Joins: jhchabran (~jhchabran@user/jhchabran)
[12:00:21] *** Quits: mkopriva (~mkopriva@ip-78-45-72-123.net.upcbroadband.cz) (Remote host closed the connection)
[12:00:24] *** Joins: teasea1 (~teasea@user/teasea)
[12:00:33] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[12:02:02] *** Quits: teasea (~teasea@user/teasea) (Ping timeout: 260 seconds)
[12:02:02] *** teasea1 is now known as teasea
[12:06:23] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[12:08:04] *** Joins: fikran (~fikran@user/fikran)
[12:11:05] *** Quits: freakazoid12345 (~matt@2603-9000-cf0f-80e3-89b9-fad9-1d10-8fb2.inf6.spectrum.com) (Read error: Connection reset by peer)
[12:11:46] *** Joins: freakazoid12345 (~matt@2603-9000-cf0f-80e3-89b9-fad9-1d10-8fb2.inf6.spectrum.com)
[12:14:21] *** Joins: krux02 (~krux02@p200300e817076e005ebbf251e029334f.dip0.t-ipconnect.de)
[12:22:50] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:e191:12b3:f2eb:fce5)
[12:24:52] *** Joins: Asgaroth (~Asgaroth@93.107.191.92)
[12:25:28] *** Joins: gggpkm__ (~gggpkm@60.10.23.170)
[12:26:30] *** Quits: freakazoid12345 (~matt@2603-9000-cf0f-80e3-89b9-fad9-1d10-8fb2.inf6.spectrum.com) (Ping timeout: 268 seconds)
[12:28:45] *** Quits: gggpkm_ (~gggpkm@60.10.194.46) (Ping timeout: 265 seconds)
[12:31:10] *** Quits: BUSY (~BUSY@user/busy) (Ping timeout: 265 seconds)
[12:32:08] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[12:32:43] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Client Quit)
[12:35:02] *** Joins: alzgh (~alzgh@user/alzgh)
[12:42:28] *** A_Dragon is now known as Awoobis
[12:57:20] *** Joins: kurashiX48 (~kurashiX4@2601:410:0:c03:bd46:ad6a:716d:4d8e)
[13:08:29] <dngray[m]> > does anyone know of a maintained tool like https://github.com/kolypto/j2cli but for go text/template?
[13:08:30] <dngray[m]> ah this looks to be what i want https://github.com/hairyhenderson/gomplate
[13:08:30] <dngray[m]> either that or https://github.com/noqcks/gucci
[13:13:33] *** Quits: holgersson (~quassel@user/holgersson) (Quit: “Format C:........[Done]“)
[13:17:56] *** Joins: mkopriva (~mkopriva@ip-78-45-72-123.net.upcbroadband.cz)
[13:22:51] *** Joins: kurashiki48 (~kurashiX4@c-68-60-88-212.hsd1.mi.comcast.net)
[13:24:59] *** Quits: kurashiX48 (~kurashiX4@2601:410:0:c03:bd46:ad6a:716d:4d8e) (Ping timeout: 264 seconds)
[13:26:23] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[13:41:07] *** Joins: belak51 (~belak@user/belak)
[13:42:08] *** Quits: belak (~belak@user/belak) (Ping timeout: 268 seconds)
[13:42:41] *** belak51 is now known as belak
[13:45:38] *** Joins: pylong__ (bluehoney@gateway/vpn/protonvpn/bluehoney)
[13:47:05] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:47:37] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:8548:be69:a29e:b485)
[13:50:35] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:e191:12b3:f2eb:fce5) (Ping timeout: 265 seconds)
[13:53:20] *** Joins: ckeshav (~keshavcha@user/ckeshav)
[14:00:02] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:00:06] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 265 seconds)
[14:04:26] *** Joins: normen (~normen@p200300d71721dd008d8518b5d0bc74e4.dip0.t-ipconnect.de)
[14:06:06] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[14:06:17] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Client Quit)
[14:10:45] *** Joins: X-Scale` (~ARM@50.77.166.178.rev.vodafone.pt)
[14:11:15] *** Quits: X-Scale (~ARM@46.50.2.19) (Ping timeout: 258 seconds)
[14:12:22] *** X-Scale` is now known as X-Scale
[14:15:17] *** Joins: gggpkm_ (~gggpkm@60.10.23.170)
[14:15:30] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[14:17:25] *** Joins: fikran (~fikran@user/fikran)
[14:18:30] *** Quits: gggpkm__ (~gggpkm@60.10.23.170) (Ping timeout: 260 seconds)
[14:19:08] *** Joins: neurocyte0132889 (~neurocyte@213.188.113.91)
[14:19:08] *** Quits: neurocyte0132889 (~neurocyte@213.188.113.91) (Changing host)
[14:19:08] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[14:31:05] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:8548:be69:a29e:b485)
[14:32:53] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[14:33:29] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Client Quit)
[14:33:53] *** Quits: Icedream (~icedream@hzn-b.serverkomplex.de) (Quit: A lol made me boom.)
[14:34:09] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:8548:be69:a29e:b485) (Ping timeout: 268 seconds)
[14:36:44] *** Joins: Icedream (~icedream@hzn-b.serverkomplex.de)
[14:39:16] *** Joins: X-Scale` (~ARM@83.223.233.104)
[14:40:03] *** Rhys is now known as Guest5041
[14:40:03] *** Quits: Guest5041 (Rhys@help.lux.melted.me) (Killed (sodium.libera.chat (Nickname regained by services)))
[14:40:13] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 265 seconds)
[14:40:15] *** Joins: Rhvs (Rhys@help.lux.melted.me)
[14:41:23] *** X-Scale` is now known as X-Scale
[14:42:11] *** Joins: holgersson (~quassel@user/holgersson)
[14:49:34] *** Quits: orn (~orn@2a01:6f00:2:a51d:468a:5bff:fea5:bf9d) (Ping timeout: 268 seconds)
[14:50:23] *** Joins: orn (~orn@2a01:6f00:2:a51d:468a:5bff:fea5:bf9d)
[14:50:52] *** Joins: fub (uid190747@id-190747.ilkley.irccloud.com)
[14:53:35] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[14:57:13] *** Quits: kurashiki48 (~kurashiX4@c-68-60-88-212.hsd1.mi.comcast.net) (Read error: No route to host)
[14:57:30] *** Joins: kurashiX48 (~kurashiX4@2601:410:0:c03:c4c:f44c:f296:7f37)
[15:00:04] *** gggpkm_ is now known as gggpkm
[15:00:55] <gggpkm> why some methods return address of local variable,which is constructed on the stack ?
[15:12:00] <bookworm> gggpkm: welcome to a garbage collected language. It won't be put on the stack if it escapes but on the "heap"
[15:12:31] <gggpkm> sounds good ,but more details
[15:12:36] <bookworm> do note that the compiler hides the concept though, as long as the behavior is as given in the language spec they can do whatever
[15:12:55] <bookworm> what do you mean by "more details"? What don't you understand?
[15:13:20] <gggpkm> so what does go call this behavior
[15:13:44] <gggpkm> official name
[15:15:03] <bookworm> of the behavior? Escaping
[15:16:00] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[15:16:22] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:17:27] <gggpkm> so I google : golang local variable escaping
[15:18:20] <bookworm> gggpkm: https://www.ardanlabs.com/blog/2017/05/language-mechanics-on-stacks-and-pointers.html
[15:18:27] <bookworm> for example
[15:19:35] *** Quits: ckeshav (~keshavcha@user/ckeshav) (Ping timeout: 264 seconds)
[15:19:38] *** Joins: freakazoid12345 (~matt@2603-9000-cf0f-80e3-8548-be69-a29e-b485.inf6.spectrum.com)
[15:19:41] <gggpkm> bookworm, okay ,thanks ,I also get some search results
[15:20:35] <bookworm> you can use the stack vs heap mentality you have from C to recognize some bad patterns. Returning a pointer from a function is perfectly normal though and in go you generally don't have to worry about it
[15:21:11] <gggpkm> yeah , this is very helpful
[15:22:33] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:8548:be69:a29e:b485) (Ping timeout: 258 seconds)
[15:27:22] *** Quits: pylong__ (bluehoney@gateway/vpn/protonvpn/bluehoney) (Remote host closed the connection)
[15:53:11] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[15:55:22] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 260 seconds)
[15:58:56] *** Joins: bluehoney (~bluehoney@cpe-75-81-204-188.mi.res.rr.com)
[15:59:57] *** Quits: alzgh (~alzgh@user/alzgh) (Ping timeout: 256 seconds)
[16:00:29] *** Joins: pylong_ (bluehoney@gateway/vpn/protonvpn/bluehoney)
[16:00:49] *** Joins: mei6 (~mei@user/mei)
[16:01:10] *** Quits: mei (~mei@user/mei) (Ping timeout: 260 seconds)
[16:01:11] *** mei6 is now known as mei
[16:02:01] *** Joins: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de)
[16:03:30] *** Quits: bluehoney (~bluehoney@cpe-75-81-204-188.mi.res.rr.com) (Ping timeout: 260 seconds)
[16:12:31] *** Joins: kurashiki48 (~kurashiX4@2601:410:0:c03:bd46:ad6a:716d:4d8e)
[16:13:58] *** Joins: alzgh (~alzgh@user/alzgh)
[16:17:11] *** Quits: kurashiX48 (~kurashiX4@2601:410:0:c03:c4c:f44c:f296:7f37) (Ping timeout: 264 seconds)
[16:20:03] *** Joins: AlmogBaku (~AlmogBaku@bzq-230-168-31-226.red.bezeqint.net)
[16:22:10] *** Quits: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de) (Ping timeout: 260 seconds)
[16:25:05] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[16:26:46] *** Joins: fikran (~fikran@user/fikran)
[16:27:44] *** Quits: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[16:31:22] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[16:35:11] *** Quits: darkapex_ (~darkapex@user/darkapex) (Ping timeout: 264 seconds)
[16:43:21] *** Joins: jespada (~jespada@2803:9800:9842:7a62:c904:aff:1e1a:fc0a)
[16:45:58] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:46:35] *** Quits: kurashiki48 (~kurashiX4@2601:410:0:c03:bd46:ad6a:716d:4d8e) (Ping timeout: 264 seconds)
[16:46:40] *** Joins: freakazoid343 (~matt@2603-9000-cf0f-80e3-8548-be69-a29e-b485.inf6.spectrum.com)
[16:47:08] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[16:49:25] *** Quits: freakazoid12345 (~matt@2603-9000-cf0f-80e3-8548-be69-a29e-b485.inf6.spectrum.com) (Ping timeout: 265 seconds)
[16:53:22] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca)
[16:59:07] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Quit: Leaving)
[17:05:59] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[17:06:32] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[17:12:18] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-848c-99f6-3ab2-978a.res6.spectrum.com)
[17:17:07] *** Quits: AlmogBaku (~AlmogBaku@bzq-230-168-31-226.red.bezeqint.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:19:20] *** Joins: adip (~adip@aedy49.neoplus.adsl.tpnet.pl)
[17:19:33] *** Joins: AlmogBaku (~AlmogBaku@bzq-230-168-31-226.red.bezeqint.net)
[17:25:36] *** Joins: BUSY (~BUSY@user/busy)
[17:32:25] *** Joins: gggpkm_ (~gggpkm@114.245.104.31)
[17:32:26] *** Quits: AlmogBaku (~AlmogBaku@bzq-230-168-31-226.red.bezeqint.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:33:31] *** Quits: gggpkm_ (~gggpkm@114.245.104.31) (Remote host closed the connection)
[17:36:15] *** Quits: gggpkm (~gggpkm@60.10.23.170) (Ping timeout: 260 seconds)
[17:41:43] *** Joins: INeedAHandle (~INeedAHan@39.124.72.106)
[17:45:21] *** Joins: AlmogBaku (~AlmogBaku@bzq-230-168-31-226.red.bezeqint.net)
[17:50:30] <krux02> I have a question regarding C, not Go, but maybe an answer within go anso applies to C.
[17:50:51] *** Joins: tg (~tg@rockylinux/infra/tg)
[17:50:58] <bookworm> there's #c
[17:51:09] <krux02> I don't do c#
[17:51:27] <bookworm> that's the channel prefix my dear
[17:51:31] <krux02> I write a compiler in Go that compiles to C
[17:51:43] <krux02> oh
[17:51:47] <krux02> thanks
[17:53:03] *** Quits: ugjka (~ugjka@ugjka.net) (Quit: Rabooting the server https://ugjka.net)
[17:53:20] *** Joins: jla (~jordi@tao.ddns.jazztel.es)
[17:53:37] *** Joins: ugjka (~ugjka@ugjka.net)
[18:01:35] *** Quits: normen (~normen@p200300d71721dd008d8518b5d0bc74e4.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[18:02:19] *** Quits: sshow (~sshow@neo.hackeriet.no) (Ping timeout: 252 seconds)
[18:02:40] *** Joins: pulsepoint433[m] (~pulsepoin@2001:470:69fc:105::1:1f25)
[18:02:51] *** Joins: sshow (~sshow@neo.hackeriet.no)
[18:03:36] *** Parts: pulsepoint433[m] (~pulsepoin@2001:470:69fc:105::1:1f25) ()
[18:04:16] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[18:05:10] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:b5d1:8630:c799:7a99)
[18:05:21] *** Joins: lilgopher (~textual@2601:241:8000:38f0:8d2b:81a9:aa03:d249)
[18:08:12] *** Quits: freakazoid343 (~matt@2603-9000-cf0f-80e3-8548-be69-a29e-b485.inf6.spectrum.com) (Ping timeout: 265 seconds)
[18:10:13] *** Quits: houze (~houze@user/houze) (Quit: WeeChat 2.9)
[18:21:49] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[18:25:57] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[18:30:59] *** Joins: arcatech (~arcatech@user/arcatech)
[18:32:47] *** Joins: normen (~normen@p200300d71721dd008d8518b5d0bc74e4.dip0.t-ipconnect.de)
[18:34:09] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[18:36:07] *** Joins: fikran (~fikran@user/fikran)
[18:38:37] *** Quits: mud (~mud@user/kadoban) (Quit: quit)
[18:38:42] *** Joins: pulsepoint433[m] (~pulsepoin@2001:470:69fc:105::1:1f25)
[18:40:16] *** Quits: normen (~normen@p200300d71721dd008d8518b5d0bc74e4.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[18:42:49] *** Joins: mud (~mud@user/kadoban)
[18:44:40] *** Joins: norbinaa (~be3uykpy@2a00:a040:19a:b060:14e6:9eab:38fa:7ba)
[18:45:31] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[18:48:35] *** Quits: be3uykpy_ (~be3uykpy@2a00:a040:19a:b060:310f:bfb1:fa2b:d263) (Ping timeout: 260 seconds)
[18:50:05] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[18:50:42] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:b5d1:8630:c799:7a99)
[18:53:09] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:b5d1:8630:c799:7a99) (Ping timeout: 265 seconds)
[18:53:46] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[18:54:25] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Ping timeout: 260 seconds)
[18:56:25] *** Joins: dntreou (~yakiza@inet-2a02-6900-8808-e010--a1.oracle-ocna.com)
[18:58:03] *** Quits: AlmogBaku (~AlmogBaku@bzq-230-168-31-226.red.bezeqint.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:00:40] *** Parts: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca) ()
[19:06:07] *** Quits: jla (~jordi@tao.ddns.jazztel.es) (Quit: Leaving.)
[19:12:09] *** Joins: normen (~normen@p200300d71721dd008d8518b5d0bc74e4.dip0.t-ipconnect.de)
[19:13:04] *** Joins: burningserenity (~burningse@2603-9001-0f01-ad99-0000-0000-0000-1008.inf6.spectrum.com)
[19:14:49] <lazyreader> ok that's one of the funnier interactions I've seen in this channel
[19:16:28] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:b5d1:8630:c799:7a99) (Read error: Connection reset by peer)
[19:20:34] *** Joins: tane (~tane@dslb-002-201-234-197.002.201.pools.vodafone-ip.de)
[19:24:01] *** Joins: arcatech (~arcatech@user/arcatech)
[19:25:28] *** Quits: lungaro_ (~lungaro@99-117-118-33.lightspeed.sndgca.sbcglobal.net) (Remote host closed the connection)
[19:27:05] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-848c-99f6-3ab2-978a.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[19:27:35] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-848c-99f6-3ab2-978a.res6.spectrum.com)
[19:27:56] *** Quits: arcatech (~arcatech@user/arcatech) (Client Quit)
[19:29:03] *** Joins: lungaro (~lungaro@99-117-118-33.lightspeed.sndgca.sbcglobal.net)
[19:30:46] *** Joins: arcatech (~arcatech@user/arcatech)
[19:36:42] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[19:37:52] *** Joins: arcatech (~arcatech@user/arcatech)
[19:38:25] *** Quits: arcatech (~arcatech@user/arcatech) (Client Quit)
[19:41:05] *** Quits: normen (~normen@p200300d71721dd008d8518b5d0bc74e4.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[19:41:11] <dntreou> Hello people, I have got a variable that is of type time.Time and I am wondering if it is possible to make that variable nil, At the moment when I try to do something along the lines of mytime = nil I get an error saying it cannot convert time to nil
[19:42:02] <fizzie> `time.Time` is a struct, and a struct value can't be nil.
[19:42:26] <fizzie> You can use `time.Time{}` though, and the https://pkg.go.dev/time#Time.IsZero function to test if it's that.
[19:42:43] <fizzie> As long as you don't need January 1, year 1, 00:00:00 UTC to be a valid value, anyway.
[19:44:31] <fizzie> See https://play.golang.org/p/6tHdc5YgD3d for example.
[19:45:54] <dntreou> fizzie:  I see, thank you for sharing the link to the isZero and the code much appreitate it gonna use that instead
[19:47:34] <fizzie> Other possible alternatives include (a) using `*time.Time` as a nil-able time.Time, but then you need to handle making objects; (b) using database/sql.NullTime, which is basically just a struct with a time.Time and a bool flag, but that feels odd outside a database/sql context; or (c) having your own `Valid bool` flag next to the time.Time value in wherever you're keeping it.
[19:49:06] <dntreou> it introduced a huge load of handling
[19:49:10] <dntreou> I see your point
[19:50:14] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[19:51:25] *** Quits: mei (~mei@user/mei) (Read error: Connection reset by peer)
[19:51:45] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Client Quit)
[19:54:46] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Quit: ERC (IRC client for Emacs 27.2))
[19:57:31] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-848c-99f6-3ab2-978a.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[19:58:37] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[20:04:10] *** Quits: notepad (~notepad@129.159.46.243) (Quit: The Lounge - https://thelounge.chat)
[20:04:42] *** Joins: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca)
[20:04:54] *** Quits: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca) (Changing host)
[20:04:54] *** Joins: aportnoy (~aportnoy@user/aportnoy)
[20:05:38] *** Joins: notepad (~notepad@129.159.46.243)
[20:05:56] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[20:06:15] *** Joins: alzgh (~alzgh@user/alzgh)
[20:11:06] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[20:11:51] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:13:30] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[20:14:37] *** Joins: normen (~normen@p200300d71721dd008d8518b5d0bc74e4.dip0.t-ipconnect.de)
[20:17:58] *** Joins: mzumquadrat (~mzumquadr@user/mzumquadrat)
[20:18:22] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[20:21:07] *** Joins: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net)
[20:22:17] *** Joins: zalt (~zalt@user/zalt)
[20:24:59] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[20:28:12] *** Joins: AlmogBaku (~AlmogBaku@141.226.246.156)
[20:29:32] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:31:31] *** Quits: zalt (~zalt@user/zalt) (Ping timeout: 258 seconds)
[20:37:02] *** Joins: burakcank (burakcank@has.arrived.and.is.ready-to.party)
[20:42:20] *** Joins: tebruno990 (~tebruno99@user/tebruno99)
[20:43:30] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[20:44:40] *** Quits: tebruno99 (~tebruno99@user/tebruno99) (Ping timeout: 260 seconds)
[20:44:40] *** tebruno990 is now known as tebruno99
[20:45:28] *** Joins: fikran (~fikran@user/fikran)
[20:50:47] *** Joins: jla (~jordi@tao.ddns.jazztel.es)
[20:51:05] *** Quits: theoceaniscool (~theoceani@119.12.232.133) (Ping timeout: 260 seconds)
[20:52:04] *** Quits: jla (~jordi@tao.ddns.jazztel.es) (Client Quit)
[20:56:04] *** Quits: since_ (d1cb7284cb@ircbox.informatik.uni-erlangen.de) (Ping timeout: 252 seconds)
[21:05:59] *** Quits: strubbl891941988 (~strubbl@ipbcc0b2d1.dynamic.kabel-deutschland.de) (Quit: The Lounge - https://thelounge.github.io)
[21:06:48] *** Quits: aportnoy (~aportnoy@user/aportnoy) (Read error: Connection reset by peer)
[21:07:06] *** Quits: yonson (~yonson@2600:8801:d900:7bb:1e69:7aff:fea2:4e85) (Remote host closed the connection)
[21:07:07] *** Joins: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca)
[21:07:14] *** Joins: yonson (~yonson@2600:8801:d900:7bb:1e69:7aff:fea2:4e85)
[21:07:27] *** Joins: strubbl891941988 (~strubbl@ipbcc0b2d1.dynamic.kabel-deutschland.de)
[21:08:20] *** Quits: marlinc (~marlinc@user/marlinc) (Ping timeout: 265 seconds)
[21:18:41] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-848c-99f6-3ab2-978a.res6.spectrum.com)
[21:19:30] *** Joins: bugtrial6 (bugtrial@gateway/vpn/protonvpn/bugtrial)
[21:20:27] *** Quits: bugtrial (bugtrial@gateway/vpn/protonvpn/bugtrial) (Ping timeout: 240 seconds)
[21:20:27] *** bugtrial6 is now known as bugtrial
[21:23:45] *** Quits: dntreou (~yakiza@inet-2a02-6900-8808-e010--a1.oracle-ocna.com) (Ping timeout: 260 seconds)
[21:25:44] *** Joins: arinov (~arinov@31.142.50.8)
[21:27:47] *** Joins: since_ (d1cb7284cb@ircbox.informatik.uni-erlangen.de)
[21:28:49] *** Quits: AlmogBaku (~AlmogBaku@141.226.246.156) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:30:18] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[21:38:30] *** Quits: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca) (Remote host closed the connection)
[21:38:47] *** Joins: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca)
[21:40:14] *** Quits: pylong_ (bluehoney@gateway/vpn/protonvpn/bluehoney) (Ping timeout: 260 seconds)
[21:41:46] *** Joins: AlmogBaku (~AlmogBaku@141.226.246.156)
[21:41:47] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-848c-99f6-3ab2-978a.res6.spectrum.com) (Ping timeout: 264 seconds)
[21:44:08] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[21:46:08] *** Joins: marlinc (~marlinc@user/marlinc)
[21:48:21] *** Joins: mrig (~mrig@user/mrig)
[21:51:15] *** Joins: klottie (~klottie@176.42.30.130)
[21:55:35] *** Joins: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu)
[21:57:05] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[22:01:59] *** Quits: chripell_ (~chripell@109.255.230.3) (Ping timeout: 265 seconds)
[22:02:28] *** Quits: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca) (Ping timeout: 265 seconds)
[22:07:53] *** Joins: brainfreeze (~brainfree@2a03:1b20:4:f011::20d)
[22:18:04] *** Joins: goldfish (~goldfish@user/goldfish)
[22:19:49] *** Joins: danmurf (~danmurf@user/danmurf)
[22:19:53] *** Joins: theoceaniscool (~theoceani@static-58-53-60-95.ipcom.comunitel.net)
[22:20:41] *** Quits: lompik (~lompik@user/lompik) (Quit: WeeChat 3.3)
[22:22:41] *** Quits: cnf (~cnf@d5152daf0.static.telenet.be) (Quit: Ping timeout (120 seconds))
[22:22:56] *** Joins: cnf (~cnf@d5152daf0.static.telenet.be)
[22:23:10] *** Quits: arinov (~arinov@31.142.50.8) (Ping timeout: 260 seconds)
[22:24:37] *** Quits: danmurf (~danmurf@user/danmurf) (Remote host closed the connection)
[22:25:37] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[22:26:04] *** Joins: mickey8 (~user@user/mickey)
[22:27:27] *** Quits: klottie (~klottie@176.42.30.130) (Quit: Client closed)
[22:30:59] *** Joins: klottie (~klottie@176.42.30.130)
[22:32:16] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[22:33:04] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[22:40:04] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[22:41:08] *** Quits: c10l (~c10l@user/c10l) (Quit: Ping timeout (120 seconds))
[22:41:49] *** Joins: fikran (~fikran@user/fikran)
[22:42:04] *** Joins: c10l (~c10l@user/c10l)
[22:44:22] *** Quits: c10l (~c10l@user/c10l) (Client Quit)
[22:44:46] *** Joins: c10l (~c10l@user/c10l)
[22:49:18] *** Quits: theoceaniscool (~theoceani@static-58-53-60-95.ipcom.comunitel.net) (Ping timeout: 260 seconds)
[22:49:37] *** Quits: AlmogBaku (~AlmogBaku@141.226.246.156) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:53:45] *** Joins: arinov (~arinov@213.194.126.155)
[22:58:13] *** Quits: tane (~tane@dslb-002-201-234-197.002.201.pools.vodafone-ip.de) (Changing host)
[22:58:13] *** Joins: tane (~tane@user/tane)
[23:01:42] *** Quits: brainfreeze (~brainfree@2a03:1b20:4:f011::20d) (Quit: Leaving)
[23:04:17] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[23:10:36] *** Quits: burningserenity (~burningse@2603-9001-0f01-ad99-0000-0000-0000-1008.inf6.spectrum.com) (Ping timeout: 258 seconds)
[23:15:49] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1008)
[23:19:21] *** Quits: klottie (~klottie@176.42.30.130) (Quit: Client closed)
[23:19:55] *** Joins: klottie (~klottie@176.42.30.130)
[23:25:31] <klottie> Hi, is there anything wrong with this code? https://play.golang.org/p/Aqc_JNTX4Mi  It does not give errors and successfully unmarshals in my local computer. I wonder if the commented out code should be preferred.
[23:26:12] <seebs> seems fine.
[23:26:44] <seebs> json is looking at the type, and overwriting it. if it finds a pointer-to-x, it creates an x and sets the pointer to point to that x.
[23:27:21] <seebs> i am actually not sure off the top of my head whether it would use the existing pointer if you gave it a pointer to an empty object or just replace it.
[23:27:39] <seebs> although! if you gave it a pointer to an empty object, you could in principle then use that pointer, instead of its address.
[23:27:47] <seebs> Right now, you're passing a pointer-to-pointer-to-Response.
[23:30:27] <fizzie> That's what the commented-out variant does, pretty much.
[23:30:52] *** Quits: c10l (~c10l@user/c10l) (Quit: Ping timeout (120 seconds))
[23:30:55] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1008) (Quit: ZNC 1.8.2 - https://znc.in)
[23:31:05] <klottie> yes, I'm passing a pointer-to-pointer-to-Response. I would expect it to be an error. But it works, and I'm not sure why that's so. Why doesn't it expect a pointer-to-Response?
[23:31:13] *** Joins: c10l (~c10l@user/c10l)
[23:31:38] <fizzie> json.Unmarshal expects a pointer to something it knows how to unmarshal to, and it has a defined way of how to unmarshal into a pointer value.
[23:31:53] <fizzie> ("To unmarshal JSON into a pointer, Unmarshal first handles the case of the JSON being the JSON literal null. In that case, Unmarshal sets the pointer to nil. Otherwise, Unmarshal unmarshals the JSON into the value pointed at by the pointer. If the pointer is nil, Unmarshal allocates a new value for it to point to.")
[23:33:11] *** Quits: keiser0091075852 (~keiser@83.25.208.187.ipv4.supernova.orange.pl) (Quit: The Lounge - https://thelounge.chat)
[23:33:24] <fizzie> In practical terms, I think the only difference between your commented and uncommented versions is that the commented version will also accept the JSON literal `null` and return nil, while the uncommented one will always return a non-nil `*Response` (and possibly error out if the input JSON is null?).
[23:33:28] *** Quits: c10l (~c10l@user/c10l) (Client Quit)
[23:33:44] *** Joins: c10l (~c10l@user/c10l)
[23:33:47] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[23:35:21] *** Joins: theoceaniscool (~theoceani@static-58-53-60-95.ipcom.comunitel.net)
[23:35:59] *** Joins: evocatus (~evocatus@84.51.113.13)
[23:36:02] <fizzie> No, seems like it won't error out in the uncommented case either, it will just leave the object untouched: https://play.golang.org/p/tBebfitWoc9
[23:37:02] <fizzie> Turns out that was documented later on, too. ("Because null is often used in JSON to mean “not present,” unmarshaling a JSON null into any other Go type has no effect on the value and produces no error.")
[23:40:48] *** Joins: AlmogBaku (~AlmogBaku@141.226.246.156)
[23:41:11] *** Quits: theoceaniscool (~theoceani@static-58-53-60-95.ipcom.comunitel.net) (Ping timeout: 264 seconds)
[23:43:09] *** Quits: seanBE_ (~seanBE@ec2-34-243-193-160.eu-west-1.compute.amazonaws.com) (Quit: Goodbye)
[23:44:21] <klottie> So, other than the JSON null case, they are practically equivalent, right? Should either one be preferred over the other?
[23:44:24] *** Quits: c10l (~c10l@user/c10l) (Quit: Ping timeout (120 seconds))
[23:45:53] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[23:46:36] *** Joins: mickey8 (~user@user/mickey)
[23:48:20] *** Quits: AlmogBaku (~AlmogBaku@141.226.246.156) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:49:58] <fizzie> I don't think there's any particularly *objective* reason to prefer either over the other. I'd personally maybe write something akin to `unmarshal3` at https://play.golang.org/p/5ySxwz4xOTY -- but that's just because I find named result parameters and "naked" returns statements odd-looking, even in short functions.
[23:50:56] *** Quits: kinlo (~peter@user/kinlo) (Ping timeout: 245 seconds)
[23:54:05] <lungaro> i have a worker pool of goroutines that accepts jobs, but now i've got a case where i dont want the same job to be scheduled if its already running/scheduled.
[23:54:11] <klottie> thanks fizzie. thanks a lot for the answers.
[23:54:47] <lungaro> What's a good way to deduplicate tasks in a scheduler?
[23:55:30] *** Joins: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca)
[23:56:21] *** Joins: kinlo (~peter@user/kinlo)
[23:57:11] <lungaro> Maybe I should make this another interface and just wire it into the scheduler
