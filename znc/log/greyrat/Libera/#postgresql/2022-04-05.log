[00:00:33] *** Quits: viaSanctus (~viaSanctu@user/viasanctus) (Ping timeout: 248 seconds)
[00:01:08] *** Quits: csd (~csd@c-73-22-175-211.hsd1.il.comcast.net) (Quit: Client closed)
[00:02:33] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[00:03:58] *** Joins: veesh (~veesh@5.28.154.27)
[00:05:57] *** Quits: austb_ (~austb@c-73-240-245-80.hsd1.or.comcast.net) (Ping timeout: 268 seconds)
[00:06:34] *** Quits: mizi_ (~mizi@user/mizi) (Ping timeout: 268 seconds)
[00:06:48] <funhouse> is it possible to do a insert select and keep a running total, and change the select results depending on the running total?
[00:07:28] *** Joins: StyXman (~mdione@2a01:e0a:931:5060:20d:b9ff:fe52:1a0)
[00:07:30] <peerce> change the results how ?
[00:07:44] *** Joins: vnf (~vnf@85.174.194.51)
[00:08:01] <peerce> there are window aggregates which can be a sort of running total (using a window sum)
[00:08:27] <StyXman> if I have 'select ... where exp = ... and exp > ... and P(exp)', can I avoid writing exp 3 times?
[00:08:55] <funhouse> peerce --> https://dpaste.org/6p0XCBk/raw basically i grab distinct ifa, i choose with the one with greater sum. i cannot go over the `total_population` in `total_population_by_pc_2020`, so i need to select another pc7
[00:09:17] <ilmari> StyXman: use a subselect (but check EXPLAIN to make sure the conditions get pushed down)
[00:09:49] <funhouse> or should i just create a script and go thru row by row
[00:11:27] <StyXman> ilmari: with WITH?
[00:13:30] *** Joins: kakashiA1 (~kakashi@ip-037-201-198-071.um10.pools.vodafone-ip.de)
[00:14:53] <ilmari> StyXman: i was thinking `select … from (select exp, … from table) as t where exp = … and …;`
[00:15:11] *** Quits: idontneedanick (~idontneed@h-85-24-184-105.A189.priv.bahnhof.se) (Ping timeout: 260 seconds)
[00:15:45] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[00:16:47] *** Quits: cerill (~cerill@h-155-4-198-153.A785.priv.bahnhof.se) (Quit: Client closed)
[00:18:13] *** Quits: vnf (~vnf@85.174.194.51) (Quit: Leaving)
[00:18:17] *** Quits: kakashiA1 (~kakashi@ip-037-201-198-071.um10.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[00:21:53] *** Quits: iliv (~iliv@user/iliv) (Ping timeout: 248 seconds)
[00:22:59] *** Quits: berkhan (~berkhan@159.146.43.242) (Quit: Leaving for now. See you next time.)
[00:23:29] <StyXman> yeah, that worked, thanks
[00:26:19] <peerce> basically, the WHERE clause can't refer to anything evaulated on the SELECT clause, because WHERE is run *before* selecting rows
[00:28:29] *** Joins: john_johnk (~Thunderbi@2a02-8428-013e-4001-c5d2-b4b6-66ca-869f.rev.sfr.net)
[00:30:23] *** Quits: ekathva (~ekathva@2001:999:250:8f1f:9d72:5a3d:d0:fe01) (Quit: Leaving)
[00:31:31] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:84f3:9cd1:2f26:201d)
[00:33:58] *** Joins: mattil (~mattil@87-92-46-217.bb.dnainternet.fi)
[00:36:17] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:84f3:9cd1:2f26:201d) (Ping timeout: 248 seconds)
[00:37:52] *** Joins: BadAdviceCat (~BadAdvice@user/badadvicecat)
[00:38:25] *** Quits: mattil (~mattil@87-92-46-217.bb.dnainternet.fi) (Ping timeout: 248 seconds)
[00:42:16] *** Joins: spacenautx (~spacenaut@user/spacenautx)
[00:42:20] *** Quits: tnewman (~tnewman@118.150.44.48) (Ping timeout: 246 seconds)
[00:43:17] *** Quits: zer0bitz (~zer0bitz@2001:2003:f750:a200:d52e:866a:6f3a:60a1) (Ping timeout: 256 seconds)
[00:47:55] *** Quits: shiranaihito_ (~textual@123-192-192-149.dynamic.kbronet.com.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[00:51:22] *** Joins: kakashiA1 (~kakashi@ip-037-201-198-071.um10.pools.vodafone-ip.de)
[00:51:29] *** Joins: tnewman (~tnewman@118.150.44.48)
[00:53:12] *** Joins: idontneedanick (~idontneed@h-85-24-184-105.A189.priv.bahnhof.se)
[00:57:39] *** Quits: V (~v@anomalous.eu) (Changing host)
[00:57:39] *** Joins: V (~v@ircpuzzles/2022/april/winner/V)
[01:00:12] *** Quits: james_lavin (~jameslavi@ool-457981b2.dyn.optonline.net) (Ping timeout: 272 seconds)
[01:02:25] *** Quits: john_johnk (~Thunderbi@2a02-8428-013e-4001-c5d2-b4b6-66ca-869f.rev.sfr.net) (Ping timeout: 248 seconds)
[01:05:43] *** Joins: cerill (~cerill@h-155-4-198-153.A785.priv.bahnhof.se)
[01:08:06] *** Joins: james_lavin (~jameslavi@ool-457981b2.dyn.optonline.net)
[01:15:01] *** Quits: idontneedanick (~idontneed@h-85-24-184-105.A189.priv.bahnhof.se) (Ping timeout: 268 seconds)
[01:17:03] *** Joins: dustymugs (~dustymugs@astound-69-42-23-219.ca.astound.net)
[01:19:06] *** Joins: LuxuryMode (uid91005@id-91005.ilkley.irccloud.com)
[01:20:14] *** Joins: tnewman5 (~tnewman@118.150.44.48)
[01:22:02] *** Joins: dionysus69 (~Thunderbi@78.40.106.28)
[01:22:25] *** Quits: tnewman (~tnewman@118.150.44.48) (Ping timeout: 268 seconds)
[01:22:25] *** tnewman5 is now known as tnewman
[01:24:48] *** Joins: Likorn (~Likorn@c114-150.icpnet.pl)
[01:26:44] *** Quits: dionysus69 (~Thunderbi@78.40.106.28) (Ping timeout: 268 seconds)
[01:28:10] *** Joins: wgrant (~wgrant@ubuntu/member/wgrant)
[01:32:33] *** Joins: ivii (~ivan@user/ivii)
[01:33:02] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:84f3:9cd1:2f26:201d)
[01:33:53] *** Quits: magla (~gelignite@d5365b83.access.ecotel.net) (Quit: Stay safe!)
[01:38:09] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:84f3:9cd1:2f26:201d) (Ping timeout: 248 seconds)
[01:43:19] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[01:43:50] *** Joins: ur5us (~ur5us@2406:e002:689a:b901:e214:9926:5ee8:c50f)
[01:46:47] *** Quits: vieira (uid370194@id-370194.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[01:47:15] *** Joins: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net)
[01:47:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[01:49:01] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.4)
[01:54:47] *** Quits: fcr (~fran@r186-48-46-24.dialup.adsl.anteldata.net.uy) (Ping timeout: 246 seconds)
[01:57:17] *** Joins: jazzy (~jaziz@user/jaziz)
[01:57:38] *** Joins: DWD (~DanielDew@user/dwd)
[01:58:48] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[01:59:55] *** Joins: fcr (~fran@r167-60-7-45.dialup.adsl.anteldata.net.uy)
[02:00:48] *** Quits: DWD (~DanielDew@user/dwd) (Client Quit)
[02:02:27] *** Parts: StyXman (~mdione@2a01:e0a:931:5060:20d:b9ff:fe52:1a0) (http://quassel-irc.org - Chat comfortably. Anywhere.)
[02:08:49] *** Quits: michalz (~michalz@185.246.204.33) (Remote host closed the connection)
[02:11:32] *** Quits: Likorn (~Likorn@c114-150.icpnet.pl) (Quit: WeeChat 3.4.1)
[02:11:40] *** Joins: Nekomander (~BadAdvice@user/badadvicecat)
[02:12:13] *** Joins: Likorn (~Likorn@c114-150.icpnet.pl)
[02:12:50] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[02:13:02] *** Quits: BadAdviceCat (~BadAdvice@user/badadvicecat) (Ping timeout: 272 seconds)
[02:17:14] *** Joins: nuttingd (~nuttingd@2607:fb90:b7e0:81c8:ad3:2e58:51f0:5f8)
[02:21:36] *** Quits: DNH (~DNH@2a02:8109:b740:2c4:c037:4b3d:a51c:742a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:23:24] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:84f3:9cd1:2f26:201d)
[02:23:57] *** Joins: hrob (~hrob@31-209-221-88.dsl.dynamic.simnet.is)
[02:28:49] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:84f3:9cd1:2f26:201d) (Ping timeout: 248 seconds)
[02:29:12] *** Quits: fordfrog (~fordfrog@gentoo/developer/fordfrog) (Quit: Leaving)
[02:30:46] *** Quits: MrZeus_ (~MrZeus@185.206.227.135) (Ping timeout: 272 seconds)
[02:31:52] *** Quits: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net) (Ping timeout: 260 seconds)
[02:36:34] *** Joins: DNH (~DNH@2a02:8109:b740:2c4:6d7f:99b6:5035:1068)
[02:37:00] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[02:37:53] *** Quits: ivii (~ivan@user/ivii) (Read error: Connection reset by peer)
[02:38:22] *** Quits: Reiner_Unsinn_ (~quassel@p579d7cd9.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[02:38:34] *** Quits: funhouse (~funhouse@user/funhouse) (Quit: Client closed)
[02:41:21] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 268 seconds)
[02:41:57] *** Joins: idontneedanick (~idontneed@h-85-24-184-105.A189.priv.bahnhof.se)
[02:43:26] *** Quits: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 246 seconds)
[02:44:08] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 260 seconds)
[02:45:55] *** Quits: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c) (Remote host closed the connection)
[02:46:00] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[02:46:01] *** Joins: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[02:47:32] *** Joins: Amadiro__ (~Amadiro@45.154.138.41)
[02:47:39] *** Quits: hrob (~hrob@31-209-221-88.dsl.dynamic.simnet.is) (Quit: Client closed)
[02:49:20] *** Quits: pedja (~pedja@user/deus-ex/x-7934090) (Quit: Leaving)
[02:50:13] *** Quits: Amadiro_ (~Amadiro@45.154.138.90) (Ping timeout: 256 seconds)
[02:52:21] *** Quits: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net) (Quit: Client closed)
[02:58:06] *** Quits: cerill (~cerill@h-155-4-198-153.A785.priv.bahnhof.se) (Quit: Client closed)
[02:59:34] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:84f3:9cd1:2f26:201d)
[03:02:31] *** Joins: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net)
[03:04:35] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:84f3:9cd1:2f26:201d) (Ping timeout: 260 seconds)
[03:06:08] *** Joins: w_lehinsun (~lehinsun@188.113.178.220)
[03:08:00] <kakashiA1> if I implement SQL that I wrap in a function that looks like this: updateDocument(id, updatedAt)
[03:08:03] <kakashiA1> in this case my query will use WHERE id = ... AND WHERE updated_at = ...
[03:08:05] <kakashiA1> - how do I know, when id exists but updatedAt did not match?
[03:08:07] <kakashiA1> - how do I know, when both WHERE conditions (id, updated_at) matched?
[03:08:09] <kakashiA1> - how do I know, when id does not exists?
[03:11:39] <Michelle> any problem with pg_serial having 27k files in it? how does it get cleared out?
[03:12:48] <Michelle> (all the files are from January this year - server has been restarted since)
[03:15:19] *** Quits: DNH (~DNH@2a02:8109:b740:2c4:6d7f:99b6:5035:1068) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:17:56] *** Quits: nuttingd (~nuttingd@2607:fb90:b7e0:81c8:ad3:2e58:51f0:5f8) (Quit: Quit)
[03:20:42] *** Quits: AceSlash (~slash@2a01:e0a:432:c050:cd12:393c:3664:2a6e) (Quit: Leaving)
[03:21:27] <peerce> kakashiA1; write the function to do the UPDATE ..... RETURNING (id,updated_at), and return that from your function.
[03:21:32] <ilmari> kakashiA1: if this is pl/pgsql, the FOUND variable will be true after the UPDATE if it matched a row
[03:23:00] *** Joins: MrZeus_ (~MrZeus@194.37.96.151)
[03:23:09] <ilmari> peerce: that won't help distinguish between the id not existing and it existing but not having the expected updated_at
[03:24:52] <peerce> well, he knows the id he passed in and the updated_at value, too.
[03:25:19] <peerce> there's like 4 states there. both matched & row updated, id matched, no update, updated_at matched, no update, nothing matched, no update.
[03:25:41] <peerce> and of course, if this function is called with a set of id,updated_at values, it oculd match some rows but not others
[03:26:29] *** Quits: realies (~realies@user/realies) (Quit: Ping timeout (120 seconds))
[03:27:00] *** Joins: realies (~realies@user/realies)
[03:27:42] <ilmari> with repeatable read you could query for the updated_at of the passed-in document_id in the !FOUND case
[03:27:57] *** Joins: richard_h (~richard@2406:e001:8:a900:6e62:6dff:fe05:ae29)
[03:29:07] <ilmari> I assume in the case where the document ID doesn't exist, the fact that some other document with the specified updated_at exist is not interesting
[03:36:03] *** Quits: op2 (~op2@user/op2) (Ping timeout: 260 seconds)
[03:40:25] *** Joins: inak (~justme@228-134-237-24.gci.net)
[03:46:38] <peerce> yeah, assuming this id is in fact the PK and not something else
[03:47:59] *** Quits: immibis (~hexchat@62.156.144.218) (Remote host closed the connection)
[03:48:17] *** Joins: immibis (~hexchat@62.156.144.218)
[03:49:49] *** Quits: Auron (Auron956@user/auron) (Remote host closed the connection)
[03:50:34] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 272 seconds)
[03:53:37] <ilmari_> this sounds like some sort of optimistic concurrency control, so I assume the response to "document exists, but timestamp changed" would be to re-read the document and apply the change again, and "document doesn't exist" would be to insert it
[03:57:46] *** Quits: Likorn (~Likorn@c114-150.icpnet.pl) (Quit: WeeChat 3.4.1)
[03:59:27] <peerce> i generally handle situations like that by doing a SELECT FOR UPDATE  at the start of the transaction
[04:01:07] <ilmari> yeah, that's pessimistic concurrency control, which is simpler
[04:01:37] <ilmari> there's also the option of using serializable snapshot isolation for optimistic concurrency control
[04:01:39] *** Joins: tnewman1 (~tnewman@118.150.44.48)
[04:03:45] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 248 seconds)
[04:03:59] *** Quits: tnewman (~tnewman@118.150.44.48) (Ping timeout: 268 seconds)
[04:03:59] *** tnewman1 is now known as tnewman
[04:04:20] *** Quits: sympatico (~textual@ip184-181-47-47.no.no.cox.net) (Quit: My iMac has gone to sleep. ZZZzzz…)
[04:11:24] *** Joins: nuttingd (~nuttingd@97-115-107-88.ptld.qwest.net)
[04:11:55] <peerce> well, the idea of doing the select for update is so you KNOW the updated_at value, and can fetch whatever new data based on that from whatever external source/api ....
[04:12:06] *** Joins: BadAdviceCat (~BadAdvice@user/badadvicecat)
[04:12:48] *** Quits: Nekomander (~BadAdvice@user/badadvicecat) (Ping timeout: 260 seconds)
[04:19:13] *** Quits: laidback_01 (~jax@98.97.66.6) (Ping timeout: 260 seconds)
[04:19:42] *** Quits: MrZeus_ (~MrZeus@194.37.96.151) (Ping timeout: 272 seconds)
[04:20:44] *** Quits: peteyboy1 (~peteyboy1@199.157.133.37.dynamic.jazztel.es) (Ping timeout: 246 seconds)
[04:20:53] *** Quits: sakasama (~sakasama@user/sakasama) (Remote host closed the connection)
[04:21:53] *** Quits: nuttingd (~nuttingd@97-115-107-88.ptld.qwest.net) (Ping timeout: 248 seconds)
[04:23:57] *** Joins: laidback_01 (~jax@98.97.66.6)
[04:24:22] *** Joins: nuttingd (~nuttingd@97-115-107-88.ptld.qwest.net)
[04:29:15] *** seifeslimene_ is now known as seifeslimene
[04:35:56] *** Joins: robins (~robin@25.51-174-133.customer.lyse.net)
[04:36:39] *** Joins: riceandb1ans (~zach@dev07.raasta.org)
[04:36:57] *** Joins: cleverrness (~Clevernes@pool-108-54-152-186.nycmny.fios.verizon.net)
[04:37:33] *** Quits: rdunklau (~rdunklau@static-176-158-121-96.ftth.abo.bbox.fr) (Ping timeout: 256 seconds)
[04:37:33] *** Quits: jrjsmrtn (~jrjsmrtn@ip-83-134-41-224.dsl.scarlet.be) (Ping timeout: 256 seconds)
[04:37:33] *** Quits: weyhmueller (~weyhmuell@blofeld.nc.w9r.de) (Ping timeout: 256 seconds)
[04:37:33] *** Quits: NightMonkey (~NightMonk@user/nightmonkey) (Ping timeout: 256 seconds)
[04:37:33] *** Quits: CalimeroTeknik (~calimero@user/calimeroteknik) (Ping timeout: 256 seconds)
[04:37:34] *** Joins: sehrope_ (~sehrope@23-24-81-162-static.hfc.comcastbusiness.net)
[04:37:35] *** Joins: Faradome5 (~Faradome@129.158.252.89)
[04:37:36] *** Joins: Malin8 (lounge@pirate.pt)
[04:37:40] *** Joins: jancoow9 (~jancoow@user/jancoow)
[04:37:41] *** Joins: ysch_ (~ysch@91.211.93.148)
[04:37:42] *** Joins: irwiss4 (~irwiss@user/irwiss)
[04:37:45] *** Joins: Gibheer_ (~gibheer@phoebe.zero-knowledge.org)
[04:37:53] *** Joins: andysomniac9 (~notasquir@138.68.174.251)
[04:38:09] *** Quits: Cleverness (~Clevernes@pool-108-54-152-186.nycmny.fios.verizon.net) (Read error: Connection reset by peer)
[04:38:11] *** Quits: stairmast0r (~stairmast@user/stairmast0r) (Quit: Bye)
[04:38:16] *** Quits: jelly (~me@user/jelly) (Remote host closed the connection)
[04:38:23] *** Joins: weyhmueller (~weyhmuell@blofeld.nc.w9r.de)
[04:38:30] *** Joins: stairmast0r (~stairmast@user/stairmast0r)
[04:38:32] *** Quits: blinky42 (~quassel@user/blinky42) (Read error: Connection reset by peer)
[04:38:33] *** Joins: jrjsmrtn (~jrjsmrtn@ip-83-134-41-224.dsl.scarlet.be)
[04:38:41] *** Quits: kelo (~atanyukev@mx7.olek.im) (Ping timeout: 256 seconds)
[04:38:41] *** Quits: omantere (~pi@85-156-109-34.elisa-laajakaista.fi) (Ping timeout: 256 seconds)
[04:38:42] *** Quits: spacenautx (~spacenaut@user/spacenautx) (Quit: WeeChat 3.4.1)
[04:39:02] *** Quits: Bebef (sbreit@phobos.bebef.de) (Quit: bye)
[04:39:03] *** Joins: NightMonkey (~NightMonk@user/nightmonkey)
[04:39:05] *** Quits: irwiss (~irwiss@user/irwiss) (Read error: Connection reset by peer)
[04:39:05] *** irwiss4 is now known as irwiss
[04:39:06] *** Joins: CalimeroTeknik (~calimero@ctkarch.org)
[04:39:07] *** Quits: wolfshappen (~waff@irc.furworks.de) (Read error: Connection reset by peer)
[04:39:11] *** Quits: Malin (lounge@pirate.pt) (Read error: Connection reset by peer)
[04:39:11] *** Malin8 is now known as Malin
[04:39:15] *** Quits: robinsmidsrod (~robin@25.51-174-133.customer.lyse.net) (Ping timeout: 256 seconds)
[04:39:15] *** Quits: g2anj (~v@58.228.230.4) (Ping timeout: 256 seconds)
[04:39:15] *** Quits: jpaa (~jpaa@161.97.129.36) (Ping timeout: 256 seconds)
[04:39:15] *** Quits: stw (stwalkerst@wikimedia/stwalkerster) (Ping timeout: 256 seconds)
[04:39:15] *** Quits: Munnu (~timo@81-197-122-250.elisa-laajakaista.fi) (Ping timeout: 256 seconds)
[04:39:15] *** Quits: jancoow (~jancoow@user/jancoow) (Ping timeout: 256 seconds)
[04:39:15] *** Quits: miker (~quassel@dc.esilibrary.com) (Ping timeout: 256 seconds)
[04:39:15] *** Quits: Faradome (~Faradome@129.158.252.89) (Ping timeout: 256 seconds)
[04:39:15] *** Quits: wez (~wez@about/web/wez) (Ping timeout: 256 seconds)
[04:39:15] *** Faradome5 is now known as Faradome
[04:39:15] *** jancoow9 is now known as jancoow
[04:39:18] *** Joins: kelo (~atanyukev@mx7.olek.im)
[04:39:19] *** Quits: andysomniac (~notasquir@138.68.174.251) (Read error: Connection reset by peer)
[04:39:19] *** andysomniac9 is now known as andysomniac
[04:39:23] *** Joins: stw (stwalkerst@wikimedia/stwalkerster)
[04:39:23] *** Joins: jpaa (~jpaa@161.97.129.36)
[04:39:29] *** Joins: miker (~quassel@dc.esilibrary.com)
[04:39:38] *** Joins: omantere (~pi@85-156-109-34.elisa-laajakaista.fi)
[04:39:41] *** Joins: blinky42 (~quassel@jabber.blinkylight.net)
[04:39:41] *** Quits: blinky42 (~quassel@jabber.blinkylight.net) (Changing host)
[04:39:41] *** Joins: blinky42 (~quassel@user/blinky42)
[04:39:49] *** Quits: riceandbeans (~zach@user/riceandbeans) (Ping timeout: 256 seconds)
[04:39:49] *** Quits: Gibheer (~gibheer@phoebe.zero-knowledge.org) (Ping timeout: 256 seconds)
[04:39:50] *** Joins: rdunklau (~rdunklau@static-176-158-121-96.ftth.abo.bbox.fr)
[04:40:03] *** Joins: wolfshappen (~waff@irc.furworks.de)
[04:40:20] *** Joins: AJTJ (~AJTJ@d205-234-49-159.yt.northwestel.net)
[04:40:23] *** Quits: ysch (~ysch@91.211.93.148) (Ping timeout: 256 seconds)
[04:40:23] *** Quits: sehrope (~sehrope@23-24-81-162-static.hfc.comcastbusiness.net) (Ping timeout: 256 seconds)
[04:40:32] *** ysch_ is now known as ysch
[04:41:02] *** Joins: wez (~wez@about/web/wez)
[04:41:15] *** Joins: g2anj (~v@58.228.230.4)
[04:42:39] *** Quits: ninjabanjo (~ninjabanj@107.150.45.163) (Ping timeout: 256 seconds)
[04:42:39] *** Quits: onu (~onufn@gibbs.uberspace.de) (Ping timeout: 256 seconds)
[04:42:39] *** Quits: dslegends (~dslegends@user/dslegends) (Ping timeout: 256 seconds)
[04:42:39] *** Quits: AsenMx (~asen@user/asenmx) (Ping timeout: 256 seconds)
[04:42:39] *** Quits: TheStormsOfFury (~StormsOfF@wsip-207-162-134-107.tu.ok.cox.net) (Ping timeout: 256 seconds)
[04:42:39] *** Quits: mrhansen (~john@45.124.52.33) (Ping timeout: 256 seconds)
[04:42:58] *** Joins: Brewster_ (~Brewster@us.8bitshort.com)
[04:43:01] *** Joins: minus_ (~minus@user/minus)
[04:43:02] *** Joins: AsenMx (~asen@user/asenmx)
[04:43:13] *** Quits: grove (~grove@teresa.3001.dk) (Ping timeout: 256 seconds)
[04:43:13] *** Quits: osm (~osm@c-894770d5.034-59-6762673.bbcust.telenor.se) (Ping timeout: 256 seconds)
[04:43:13] *** Quits: gastus (~gastus@mawercer.de) (Ping timeout: 256 seconds)
[04:43:13] *** Quits: sjas (~sjas@irc.sjas.de) (Ping timeout: 256 seconds)
[04:43:19] *** Joins: onu (~onufn@gibbs.uberspace.de)
[04:43:30] *** Joins: dslegends (~dslegends@user/dslegends)
[04:43:47] *** Quits: otherj (~j@user/otherj) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: Profpatsch (~Profpatsc@static.88-198-193-255.clients.your-server.de) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: Brewster (~Brewster@us.8bitshort.com) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: ChrisN (~ChrisN@ginkgo.ccn.me) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: arcanez (~arcanez@warpedreality.org) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: queso_ (~queso@cpe-71-77-41-168.nc.res.rr.com) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: davidfetter (~davidfett@xvm-110-146.dc2.ghst.net) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: pnorman (~pnorman@d207-216-224-102.bchsia.telus.net) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: wkalt (~wkalt@user/wkalt) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: andres (~andres@ec2-54-219-173-204.us-west-1.compute.amazonaws.com) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: Ekho (~Ekho@user/ekho) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: rick123 (~rick123@157.245.192.96) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: ReimuHakurei_ (~Reimu@raphi.vserver.alexingram.net) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: percY- (~percY@138.68.239.19) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: sobel (~matt@66.219.34.76) (Ping timeout: 256 seconds)
[04:43:48] *** Joins: Bebef (sbreit@phobos.bebef.de)
[04:44:02] *** Joins: ninjabanjo (~ninjabanj@107.150.45.163)
[04:44:04] *** Quits: nuttingd (~nuttingd@97-115-107-88.ptld.qwest.net) (Ping timeout: 268 seconds)
[04:44:21] *** Quits: minus (~minus@user/minus) (Ping timeout: 256 seconds)
[04:44:21] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Ping timeout: 256 seconds)
[04:44:21] *** Quits: rhamby (~quassel@dc.esilibrary.com) (Ping timeout: 256 seconds)
[04:44:25] *** Joins: rhamby_ (~quassel@dc.esilibrary.com)
[04:44:29] *** Joins: fjmorazan_ (~quassel@user/fjmorazan)
[04:44:30] *** Joins: percY- (~percY@138.68.239.19)
[04:44:32] *** Joins: andres (~andres@ec2-54-219-173-204.us-west-1.compute.amazonaws.com)
[04:44:55] *** Joins: grove (~grove@teresa.3001.dk)
[04:44:58] *** Joins: TheStormsOfFury (~StormsOfF@wsip-207-162-134-107.tu.ok.cox.net)
[04:45:00] *** Joins: osm (~osm@c-894770d5.034-59-6762673.bbcust.telenor.se)
[04:45:02] *** Joins: gastus (~gastus@mawercer.de)
[04:45:10] *** Joins: otherj (~j@fano.forth.com)
[04:45:10] *** Quits: otherj (~j@fano.forth.com) (Changing host)
[04:45:10] *** Joins: otherj (~j@user/otherj)
[04:45:13] *** Joins: ReimuHakurei (~Reimu@raphi.vserver.alexingram.net)
[04:45:13] *** Joins: ChrisN (~ChrisN@ginkgo.ccn.me)
[04:45:15] *** Joins: davidfetter (~davidfett@xvm-110-146.dc2.ghst.net)
[04:45:25] *** Joins: rick123 (~rick123@157.245.192.96)
[04:45:28] *** Joins: wkalt (~wkalt@user/wkalt)
[04:45:30] *** Joins: pnorman (~pnorman@d207-216-224-102.bchsia.telus.net)
[04:45:43] *** Joins: queso (~queso@cpe-71-77-41-168.nc.res.rr.com)
[04:46:57] *** Quits: ur5us (~ur5us@2406:e002:689a:b901:e214:9926:5ee8:c50f) (Ping timeout: 256 seconds)
[04:48:21] *** Joins: Sammitch (~Jerkface@user/sammitch)
[04:50:01] *** Quits: trane (~trane@login.redpill-linpro.com) (Ping timeout: 256 seconds)
[04:50:13] <kakashiA1> peerce, ilmari: not realy getting it
[04:50:20] <kakashiA1> I wrote this little fiddle:
[04:50:23] <kakashiA1> http://sqlfiddle.com/#!17/fd3db/1
[04:50:46] <kakashiA1> could you show me what you mean, so I can study it more and understand your strategies
[04:51:26] <peerce> geez, that fiddle only has 9.3 and 9.6 ?!?
[04:52:13] *** Joins: Munnu (~timo@81-197-122-250.elisa-laajakaista.fi)
[04:52:20] *** Joins: sobel (~matt@66.219.34.76)
[04:52:25] <peerce> https://dbfiddle.uk/?rdbms=postgres_14&fiddle=8afd607769e4894e6e4760a29dc5a032
[04:52:29] <peerce> so whats the question ?
[04:53:59] <kakashiA1> peerce: I want to do an UPDATE, but with the argument id and updated_at, but I want 3 results to know when:
[04:54:21] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Remote host closed the connection)
[04:54:28] <kakashiA1> 1. id exists but updated_at is not found found e.g.: (1, 2022)
[04:54:54] <kakashiA1> 2. id exists and updated_at exists e.g.: (1, 2019)
[04:55:03] <kakashiA1> 3. id does not exists
[04:55:23] *** Quits: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 246 seconds)
[04:55:23] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 246 seconds)
[04:55:24] <kakashiA1> e.g.: (42, 2019)
[04:56:03] *** Joins: sjas (~sjas@irc.sjas.de)
[04:56:07] *** Joins: Ekho (~Ekho@user/ekho)
[04:56:42] *** Joins: Profpatsch (~Profpatsc@static.88-198-193-255.clients.your-server.de)
[04:56:45] *** Joins: mrhansen (~john@harry.mrhansen.id.au)
[04:56:54] *** Joins: arcanez (~arcanez@warpedreality.org)
[04:57:18] <peerce> https://dbfiddle.uk/?rdbms=postgres_14&fiddle=c4811a4658449cceb9a30be51dcf3a56
[04:57:49] *** Quits: seifeslimene (~seifeslim@197.2.10.72) (Quit: Konversation terminated!)
[04:58:15] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[04:59:41] *** Joins: jelly (jelly@user/jelly)
[05:00:17] *** Joins: Guest9702 (~Thunderbi@p8019032-ipngn39401marunouchi.tokyo.ocn.ne.jp)
[05:00:37] <kakashiA1> peerce: I was not clear enough, let me rephrase
[05:00:37] *** Quits: james_lavin (~jameslavi@ool-457981b2.dyn.optonline.net) (Ping timeout: 260 seconds)
[05:01:10] <kakashiA1> update DOC-C to DOC-X, but only if if and updated_at values are uses that are in the table
[05:01:23] <kakashiA1> in this case (3, 2021)
[05:01:36] <kakashiA1> if you use (3, 2022) nothing should be updated
[05:01:48] <peerce> so test that where i put the comment in
[05:01:48] *** Joins: trane (~trane@login.redpill-linpro.com)
[05:02:01] <peerce> you know, in your PROGRAM
[05:02:29] <peerce> if you get back nothing from that select, then the id doesn't exist.
[05:02:55] <kakashiA1> you mean your query is correct?
[05:03:40] <peerce> it is what it is.
[05:05:04] <kakashiA1> what I want is if you pass (3, 2022) it should tell you: "the id = 3 exists, but your updated_at value is not equal to the value in the row"
[05:05:51] <peerce> so test that in your app at the point of my comment.
[05:06:09] <kakashiA1> hmm... give me a moment to figure that out
[05:06:43] *** Joins: james_lavin (~jameslavi@ool-457981b2.dyn.optonline.net)
[05:08:10] *** Quits: Siecje (~Siecje@97.111.200.190) (Remote host closed the connection)
[05:09:19] <peerce> just remember to rollback the transaction if you are aborting it
[05:12:53] *** Quits: Guest9702 (~Thunderbi@p8019032-ipngn39401marunouchi.tokyo.ocn.ne.jp) (Ping timeout: 246 seconds)
[05:23:57] *** Quits: relight (~relight@user/relight) (Ping timeout: 250 seconds)
[05:24:12] *** Joins: relight (~relight@user/relight)
[05:25:20] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[05:26:05] <kakashiA1> peerce: do you mean something like this?
[05:26:08] <kakashiA1> https://paste.xinu.at/FSpZip/SQL
[05:26:32] <peerce> don't you have an application program that is invoking SQL ?
[05:26:40] <peerce> and no, you can't use a case like that in sql
[05:28:56] <kakashiA1> at the moment I want a SQL solution only to understand it, later I can wrap that in my app
[05:29:43] <peerce> then you'd need to write it in plpgsql as a stored procedure
[05:29:52] <peerce> since functions have no transactional capability
[05:30:28] <kakashiA1> hmmm....
[05:31:03] <peerce> plain SQL can't do any decision making, its all declarative.
[05:34:36] *** Quits: haniaF (~haniaF@79.191.93.146.ipv4.supernova.orange.pl) (Ping timeout: 240 seconds)
[05:35:38] *** Joins: haniaF (~haniaF@79.191.100.214.ipv4.supernova.orange.pl)
[05:37:43] <kakashiA1> peerce: can you help me out ?:(
[05:38:18] <peerce> um, what more can I do?  you want me to do your job for you?  whats it pay?
[05:39:38] <kakashiA1> ohh...is that this complex? okay, let me see if I can figure it out, because its complete new field for me to do this
[05:44:44] *** Quits: haniaF (~haniaF@79.191.100.214.ipv4.supernova.orange.pl) (Ping timeout: 246 seconds)
[05:45:22] *** Joins: haniaF (~haniaF@79.191.91.134.ipv4.supernova.orange.pl)
[05:51:11] <peerce> this is the most simple sort of application programming w/ sql queries
[05:52:19] <kakashiA1> not sure what you want to say with that, but let me try something
[05:52:32] *** Quits: f3f3lix (~weechat@55d49a95.access.ecotel.net) (Ping timeout: 260 seconds)
[05:54:08] *** Joins: f3f3lix (~weechat@55d48b81.access.ecotel.net)
[05:55:02] *** Quits: AJTJ (~AJTJ@d205-234-49-159.yt.northwestel.net) (Quit: Leaving...)
[05:57:46] <Xgc> kakashiA1: Is there something before the SELECT that you wanted to rollback or did you just want to essentially "do nothing" relative to the "FOR UPDATE"?
[05:58:47] *** Joins: xenoterracide (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net)
[05:58:52] <kakashiA1> Xgc: I want to update by id and date, if both values are not the same as in the table, do nothing
[05:59:38] <Xgc> kakashiA1: Why not just perform the simple update?
[06:00:00] <kakashiA1> at the same time I want to know if the id exists or not AND if id exists and date exists and update was successfull and if id exists but date is not correct
[06:00:20] <peerce> to know that, you have to test values.
[06:00:26] <kakashiA1> Xgc: if I do a simple UPDATE it wont tell me much, if you know what I mean
[06:00:31] <peerce> thats something you do in an application program NOT in SQL
[06:00:53] <Xgc> kakashiA1: https://www.postgresql.org/docs/9.5/dml-returning.html
[06:01:54] <peerce> Xgc; an UPDATE that doesn't update anything won't return anything.
[06:02:37] <Jonno_FTW> is it reasonable for an index scan to take 400ms for a table with 135k rows?
[06:02:42] <peerce> hence my SELECT updated_at FROM table WHERE id=2;     i f that returns no rows, then there's no id=2;   if that returns the wrong value for updated_at, then you need to test that and do whatever it is you want in that case.
[06:02:58] <peerce> Jonno_FTW; depends on how many index rows it had to scan
[06:03:05] <Jonno_FTW> how do I found out?
[06:04:07] <Xgc> peerce: Doesn't PG support UPDATE and SELECT with CTEs, where UPDATE can be in one term and the SELECT can assist in returning the appropriate state requested?
[06:04:19] <kakashiA1> Xgc:
[06:04:21] <kakashiA1> in the table we have a document with the values: (1, 2019, 'DOC-A'), here is what I want:
[06:04:24] <kakashiA1> updatedDocument(1, 2019, 'DOC-X')  // updated successfully, returns updated id
[06:04:26] <kakashiA1> updatedDocument(1, 2042, 'DOC-X')  // NO update, because id is correct but date is != 2019, returns FALSE
[06:04:28] <kakashiA1> updatedDocument(42, 2042, 'DOC-X')  // NO update, because id does not exists, returns NULL
[06:04:28] <Jonno_FTW> actually there's 135k rows in the result, I'm doing a COUNT(*)
[06:04:33] <Xgc> kakashiA1: No need to paste.
[06:04:47] <kakashiA1> Xgc: sorry, hope its clear now
[06:05:16] <peerce> you can't return a id value *or* a boolean from the same function, as ineger and boolean are two different types.
[06:06:03] <kakashiA1> peerce: I know, but we need 3 different values to express 3 different results, not sure how to express that
[06:06:48] <peerce> doquery("SELECT updated_at .... FOR UPDATE");
[06:07:03] <peerce> if nResults = 0 then ... docase1;
[06:07:14] <peerce> if updated_at != desired_value then docase2;
[06:07:33] <peerce> doquery("UPDATE .....")
[06:07:41] <peerce> thats in your application program.
[06:08:27] <kakashiA1> peerce: you want to do all transaction-logic in your app?
[06:08:42] <peerce> if you need to know that level of detail?  yes.
[06:09:04] <kakashiA1> peerce: but why do you avoid to do that all in SQL?, because its not possible?
[06:09:16] <peerce> bbecause SQL has no IF statement
[06:09:26] <peerce> and a query can only return a known datatype
[06:09:41] <peerce> you COULD do this in a plpgsql function, it would be fairly ugly
[06:10:30] <peerce> and would do exactly the same thing, but have to return some stupid values like -1 for no id match, etc.
[06:10:31] <kakashiA1> it hurts to hear that, I thought you always tried to avoid data-close stuff in your app layer
[06:11:02] <peerce> your appserver layer is where your business logic belongs.
[06:11:11] <peerce> this is most certainly business logic
[06:11:36] <kakashiA1> I do not see that as business logic, I see that more as keeping your data consistent
[06:12:23] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:84f3:9cd1:2f26:201d)
[06:12:48] *** Joins: Nekomander (~BadAdvice@user/badadvicecat)
[06:13:08] <peerce> What are you doing with this knowlege that you did or did not update this row?  how is that NOT business logic ?
[06:13:29] *** Quits: BadAdviceCat (~BadAdvice@user/badadvicecat) (Ping timeout: 268 seconds)
[06:14:23] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[06:14:24] *** Joins: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[06:15:30] *** Joins: ur5us (~ur5us@2406:e002:689a:b901:e214:9926:5ee8:c50f)
[06:17:03] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:84f3:9cd1:2f26:201d) (Ping timeout: 260 seconds)
[06:17:26] <kakashiA1> peerce: correct me if I am wrong, but if you update something, the databse should tell you: "hey bruh, you think you are updating your document from the year 2019-03-01, but its not correct, please look at the latest document and do the query to get the latest doc"
[06:18:26] <peerce> with my approach, you would SELECT FOR UPDATE  look at the value, then get the latest data and do your UPDATE
[06:19:03] <kakashiA1> peerce: sure, I just have to become a bit more comfortable that this is business logic
[06:19:10] <kakashiA1> which is not clear to me yet
[06:19:59] <kakashiA1> but I like your solution, even if I wished that the DB can do that in a cleaner matter :)
[06:21:08] <kakashiA1> peerce: to get the terminology right:
[06:21:24] <kakashiA1> because we are using FOR UPDATE (locking) it is pessimistic, right?
[06:22:03] <peerce> that way another process can't manipulate the same row til this one is done.
[06:22:40] <kakashiA1> optimistic would be "UPDATE ... WHERE date=2019 AND id=1" so I am "optimistic that it will succeed", right?
[06:22:55] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[06:23:09] <kakashiA1> it was more a "is it pessimistic or optimistic" question:)
[06:23:25] <peerce> thats subjective terminology.
[06:23:27] *** Quits: bmomjian1 (~bruce@momjian.us) (Ping timeout: 260 seconds)
[06:23:47] <kakashiA1> peerce: ohh... okay
[06:23:51] <peerce> the rows updated returned from that update would tell you it succeeded
[06:23:58] *** Quits: xenoterracide (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net) (Ping timeout: 268 seconds)
[06:24:17] <kakashiA1> sure, just wanted to know if its optimistic or pessimistic :)
[06:24:53] <kakashiA1> just a side question: this case that I am asking, is it totaly alien for you?
[06:25:09] *** Joins: gambl0re (~gambl0re@2607:fea8:a59f:c360::7377)
[06:25:36] <peerce> its odd, seems to be a tiny piece of something thats probably not well thought out, and you're focusing way too much attention on this at the expense of the overall structure
[06:25:39] <kakashiA1> just to give you my motivation: if you update a doc, that is already updated, I will let you know and let you chose if you want to query the latest or just overwrite it
[06:26:02] *** Joins: walterwhip (~walterwhi@user/walterwhip)
[06:26:48] <peerce> if you do NOT do that within a transaction, then the result may already be wrong by the time you see it.
[06:26:52] <kakashiA1> "hey, you want to update doc-x, but peter already updated it, do you want to refresh to get the latest or do you want to overwrite no matter what"
[06:27:02] <kakashiA1> sure
[06:27:09] <peerce> hence the select for update to lock it til you make that decision
[06:27:26] <gambl0re> hi
[06:27:40] <kakashiA1> thats why transaction + lock is needed, but my question is more if that strategie is totaly alien for you?
[06:27:43] <gambl0re> how do i update a jsonb column that has a boolean value
[06:28:48] <peerce> jsonb has no 'boolean', just number or text
[06:29:30] <peerce> i assume this 'boolean' is a value within a larger json structure ?
[06:30:59] <gambl0re> i have a settings column that is jsonb and it looks like this -> { receive_emails: boolean }
[06:31:12] <gambl0re> i dont know how to update the boolean value
[06:31:20] <gambl0re> im also using a function to update values
[06:31:31] <gambl0re> so the function accepts a boolean argument that is used to update the jsonb column
[06:31:35] <peerce> UPDATE somettable SET jsonbfield = jsonb_set(jsonbfield, JSONPATH[], $2) WHERE id=$1
[06:31:37] <gambl0re> not sure if that makes sense
[06:31:52] *** Joins: schinckel (uid38120@user/schinckel)
[06:32:18] <peerce> ??jsonpath
[06:32:19] <pg_docbot> https://www.postgresql.org/docs/current/functions-json.html#FUNCTIONS-SQLJSON-PATH :: https://www.postgresql.org/docs/current/datatype-json.html#DATATYPE-JSONPATH
[06:32:48] <Xgc> kakashiA1: Review this.  You can use that kind of logic and then use the return of the SELECT to decide what to tell the caller.  The update occurs too.  https://dbfiddle.uk/?rdbms=postgres_14&fiddle=e8d50d9cac1609c9f50c2ac5c577b39f
[06:33:18] <Xgc> kakashiA1: This handles multiple updates at once, just for the test case.
[06:33:49] <Xgc> kakashiA1: Only id = 2 matched both id and updated_at.
[06:33:59] <gambl0re> peerce
[06:34:04] <gambl0re> peerce: https://pastebin.com/vJA3bKPS
[06:34:10] <gambl0re> like that?
[06:34:21] <peerce> does it work?
[06:34:25] <gambl0re> no
[06:34:27] <Xgc> kakashiA1: You can simplify this for your specific requirement.
[06:34:43] <gambl0re> ERROR:  function jsonb_set(jsonb, unknown, boolean) does not exist
[06:34:45] <gambl0re> LINE 15:   settings = jsonb_set(settings, '{receive_notifications}', ...
[06:34:47] <gambl0re>                       ^
[06:34:49] <gambl0re> HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
[06:34:51] <gambl0re> SQL state: 42883
[06:34:53] <gambl0re> Character: 395
[06:34:56] <gambl0re> thats the error I get
[06:35:43] <gambl0re> Xgc: are you able to help me out?
[06:35:45] <peerce> try    jsonb_set(settings, '{receive_notifications}':text[], $6)
[06:36:26] <gambl0re> that doesnt work either
[06:36:29] <peerce> and afaik, JSON has no concept of boolean, just number or text
[06:36:31] <gambl0re> same error
[06:37:29] <peerce> oh, the newvalue has to be expressed as jsonb
[06:38:01] *** Joins: idontnee_ (~idontneed@h-85-24-184-105.A189.priv.bahnhof.se)
[06:38:13] <peerce> try to_jsonb($6)
[06:38:17] <gambl0re> I tried doing   settings = jsonb_set(settings, '{receive_notifications}', $6::JSONB)
[06:38:26] <gambl0re> but then I got ERROR:  cannot cast type boolean to jsonb
[06:38:36] <peerce> try to_jsonb($6)
[06:38:54] <peerce> and, um,   again, cast the path as ::text[]
[06:39:05] *** Joins: Alan3 (~alan@user/alan)
[06:39:13] *** Quits: n0fun (~jack@mue-88-130-48-145.dsl.tropolys.de) (Ping timeout: 260 seconds)
[06:39:23] *** Quits: mattmcc (~matt@li807-33.members.linode.com) (Ping timeout: 256 seconds)
[06:39:23] *** Quits: indy (~indy@dsl-static-104.213-160-167.telecom.sk) (Ping timeout: 256 seconds)
[06:39:23] *** Quits: axsuul (~axsuul@138.68.30.232) (Ping timeout: 256 seconds)
[06:40:04] *** Joins: renihs_ (~renihs@89.58.15.194)
[06:40:11] *** Joins: dysfigured (~dfg@dfg.rocks)
[06:40:13] *** Joins: Mmike_ (~mario@li1411-253.members.linode.com)
[06:40:20] *** Joins: axsuul (~axsuul@138.68.30.232)
[06:40:25] *** Joins: brethil_ (~brethil@host-57-108-136-83.retail.pianetafibra.it)
[06:40:25] *** Quits: brethil_ (~brethil@host-57-108-136-83.retail.pianetafibra.it) (Changing host)
[06:40:25] *** Joins: brethil_ (~brethil@user/brethil)
[06:40:31] *** Quits: idontneedanick (~idontneed@h-85-24-184-105.A189.priv.bahnhof.se) (Ping timeout: 256 seconds)
[06:40:31] *** Quits: dfg (~dfg@user/dfg) (Ping timeout: 256 seconds)
[06:40:31] *** Quits: OneMirror (~far@onegrandcircle.com) (Ping timeout: 256 seconds)
[06:40:31] *** Quits: renihs (~renihs@89.58.15.194) (Ping timeout: 256 seconds)
[06:40:31] *** Quits: potatoe (~potatoe@1g.is) (Ping timeout: 256 seconds)
[06:41:00] *** Joins: indy (~indy@dsl-static-104.213-160-167.telecom.sk)
[06:41:05] *** Quits: Alan (~alan@user/alan) (Ping timeout: 256 seconds)
[06:41:05] *** Quits: brethil (~brethil@user/brethil) (Ping timeout: 256 seconds)
[06:41:05] *** Quits: tehenderz (~tehenderz@ti0018a400-8221.bb.online.no) (Ping timeout: 256 seconds)
[06:41:05] *** Quits: Mmike (~mario@user/mmike) (Ping timeout: 256 seconds)
[06:41:05] *** Quits: ario (~ario@159.65.220.102) (Ping timeout: 256 seconds)
[06:41:05] *** Quits: ses1984 (~stephanst@128.27.196.35.bc.googleusercontent.com) (Ping timeout: 256 seconds)
[06:41:05] *** Alan3 is now known as Alan
[06:41:38] *** Joins: tehenderz (~tehenderz@ti0018a400-8221.bb.online.no)
[06:41:39] *** Quits: axisys (~axisys@ec2-52-207-123-244.compute-1.amazonaws.com) (Ping timeout: 256 seconds)
[06:41:39] *** Quits: pekster (~rewt@user/pekster) (Ping timeout: 256 seconds)
[06:42:15] *** Joins: OneMirror (~far@onegrandcircle.com)
[06:42:49] *** Joins: ses1984 (~stephanst@128.27.196.35.bc.googleusercontent.com)
[06:42:55] *** Joins: ario (~ario@159.65.220.102)
[06:43:12] *** Joins: pekster (~rewt@user/pekster)
[06:43:12] *** Joins: axisys (~axisys@ec2-52-207-123-244.compute-1.amazonaws.com)
[06:43:14] *** Joins: potatoe (~potatoe@1g.is)
[06:43:15] <gambl0re> peerce: it works :)
[06:43:43] <gambl0re> i had to add the to_jsonb($6)
[06:43:57] <gambl0re> i thought $6::JSONB does casting also
[06:44:23] *** dysfigured is now known as dfg
[06:44:32] *** Quits: dfg (~dfg@dfg.rocks) (Changing host)
[06:44:32] *** Joins: dfg (~dfg@user/dfg)
[06:45:09] <peerce> afaik,   ::jsonb lets you take a text '{json thing}' and treat it as jsonb
[06:46:31] *** Joins: mattmcc (~matt@li807-33.members.linode.com)
[06:47:08] *** Quits: LuxuryMode (uid91005@id-91005.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[06:47:45] <peerce> like this '[1,2,3,4]'::jsonb   or '{"a":1, "b":2}'::jsonb
[06:50:05] <gambl0re> oh I see. Useful info, Appreciate the help. thanks
[06:50:24] *** Joins: bmomjian (~bruce@momjian.us)
[06:53:56] <Jonno_FTW> will the engine simplify a is NULL AND a is NULL?
[06:55:39] <peerce> presumably
[07:09:45] *** Joins: trafficjam (~trafficja@103.231.88.30)
[07:13:59] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 246 seconds)
[07:17:25] *** Joins: dive (~dive@user/dive-o)
[07:17:42] <dive> Anybody else notice PGDG broke `systemctl reload pgbouncer` in the second-to-last revision?
[07:18:13] <peerce> on what OS packaging system ?
[07:18:16] <dive> debian
[07:19:32] <dive> https://gist.github.com/sdigit/88f6d8da1de1f7693fc1bacf449a4bb8
[07:19:59] <dive> when systemd-ified, reload was apparently not considered
[07:20:03] <dive> this broke production for us today
[07:20:49] <peerce> thats from apt.postgresql.org, or is it from the default debian repos ?
[07:21:30] <dive> "deb http://apt.postgresql.org/pub/repos/apt/ buster-pgdg main"
[07:21:48] <dive> same on both the working and broken hosts, only difference is one has the last two changes and one does not
[07:21:54] <peerce> k, report bugs here -> https://wiki.postgresql.org/wiki/Apt#Resources (under "Bugs"...)
[07:22:26] <dive> sigh. it's GNATS or nothing, still, in 2022?
[07:23:28] <dive> redmine i gues
[07:24:28] *** Joins: EvanCarroll (~ecarroll@4.78.9.75)
[07:24:29] *** Quits: bmomjian (~bruce@momjian.us) (Ping timeout: 246 seconds)
[07:24:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[07:27:19] <dfg> <peerce> and afaik, JSON has no concept of boolean, just number or text  json has booleans, as well as null
[07:28:41] *** Quits: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 246 seconds)
[07:28:41] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 246 seconds)
[07:30:10] *** Joins: austb_ (~austb@c-73-240-245-80.hsd1.or.comcast.net)
[07:31:08] *** Quits: Vacuity (~Vacuity@user/vovo) (Ping timeout: 246 seconds)
[07:32:54] *** Joins: Vacuity (~Vacuity@user/vovo)
[07:37:11] *** Joins: austb (~austb@156.146.51.110)
[07:37:14] *** Quits: gumnos (~gumnos@2600:1702:410:f440:ba70:f4ff:fe1e:1ef2) (Ping timeout: 260 seconds)
[07:39:12] *** Quits: austb_ (~austb@c-73-240-245-80.hsd1.or.comcast.net) (Ping timeout: 268 seconds)
[07:41:34] *** Quits: rewrit3 (~rewrit3@user/rewrit3) (Remote host closed the connection)
[07:52:33] *** Quits: EvanCarroll (~ecarroll@4.78.9.75) (Ping timeout: 248 seconds)
[07:54:35] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[07:55:29] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[07:55:30] *** Joins: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[07:55:45] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[07:57:58] *** Quits: sreve_ (~quassel@p549d73f7.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[07:58:09] *** Joins: sreve (~quassel@p4ff44df3.dip0.t-ipconnect.de)
[08:00:01] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 248 seconds)
[08:00:11] *** Joins: EvanCarroll (~ecarroll@4.78.9.75)
[08:09:15] *** Joins: fstd_ (~fstd@xdsl-87-78-201-176.nc.de)
[08:12:12] *** Quits: fstd (~fstd@xdsl-89-0-80-77.nc.de) (Ping timeout: 240 seconds)
[08:13:18] *** Joins: BadAdviceCat (~BadAdvice@user/badadvicecat)
[08:13:24] *** Quits: erisco (~erisco@d24-57-249-233.home.cgocable.net) (Ping timeout: 240 seconds)
[08:13:43] *** Quits: Nekomander (~BadAdvice@user/badadvicecat) (Ping timeout: 260 seconds)
[08:13:44] *** Joins: erisco (~erisco@d24-57-249-233.home.cgocable.net)
[08:13:53] *** BadAdviceCat is now known as Nekomander
[08:15:56] <Xgc> kakashiA1: A little simpler, but still supports multiple updates: https://dbfiddle.uk/?rdbms=postgres_14&fiddle=6d5fc9ee416d9f14400834fe6f170b51
[08:16:52] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[08:23:13] *** Joins: iliv (~iliv@93-77-147-152.lvv.volia.net)
[08:23:49] *** Quits: EvanCarroll (~ecarroll@4.78.9.75) (Ping timeout: 240 seconds)
[08:24:02] <peerce> xkgc; you can use VALUES (), (), ...  instead of that SELECT ... UNION SELECT.... construct
[08:24:03] <peerce> https://dbfiddle.uk/?rdbms=postgres_14&fiddle=d483fca3041264ddc6dc9197dad05ab6
[08:24:10] *** Quits: iliv (~iliv@93-77-147-152.lvv.volia.net) (Changing host)
[08:24:10] *** Joins: iliv (~iliv@user/iliv)
[08:26:04] *** Quits: gp5st_ (~gp5st@pool-72-77-44-213.pitbpa.fios.verizon.net) (Ping timeout: 272 seconds)
[08:27:13] <peerce> but thats still not something you can pass in parameterically.
[08:27:15] <Xgc> peerce: Sure.  But that was just the test data.  It won't have anything to do with the actual point.,
[08:27:59] <peerce> the actual point is, application supplied data, and kakashiA1 can only handle one at a time as they are having issues with the fundamentals of even doing that
[08:28:15] <Xgc> He was just handling one case at a time in the function.  This was just to pass the 3 cases he cared to test.
[08:28:47] <peerce> he wants to know which of 3 cases for each row
[08:28:58] <peerce> 1) no id, 2) mismatched updated_at, 3) success.
[08:29:19] <Xgc> peerce: Yes. The last two columns provide that, plus it updates the data, as he originally asked, before the rest of the conversation.
[08:29:45] <peerce> by returning the whole table and letting him pick through it and try and figure out what he just did?
[08:29:47] <peerce> that won't scale
[08:29:55] <Xgc> It's just an example. He can adjust that to be one column with a status.
[08:31:06] <Xgc> He asked if this kind of thing can be done in direct foundational SQL.  This is an example.
[08:35:32] *** Joins: tnewman4 (~tnewman@118.150.44.48)
[08:37:21] *** Quits: tnewman (~tnewman@118.150.44.48) (Ping timeout: 248 seconds)
[08:37:21] *** tnewman4 is now known as tnewman
[08:38:15] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:84f3:9cd1:2f26:201d)
[08:38:23] *** Quits: EGH (~EGH@185.25.195.104) (Ping timeout: 256 seconds)
[08:38:56] *** Joins: EGH (~EGH@185.25.195.104)
[08:40:02] *** Joins: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw)
[08:40:05] *** Quits: tolecnal (tolecnal@login.xiro.net) (Ping timeout: 256 seconds)
[08:40:57] *** Quits: tnewman (~tnewman@118.150.44.48) (Quit: Ping timeout (120 seconds))
[08:41:24] *** Joins: tnewman (~tnewman@118.150.44.48)
[08:41:27] *** Joins: tolecnal (tolecnal@login.xiro.net)
[08:42:27] *** Quits: jconway (~jconway@072-017-018-098.res.spectrum.com) (Ping timeout: 260 seconds)
[08:42:41] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:84f3:9cd1:2f26:201d) (Ping timeout: 248 seconds)
[08:43:08] *** Joins: ekathva (~ekathva@2001:999:250:8f1f:76db:3839:8c62:de89)
[08:43:21] *** Quits: Xof (~Xof@157-131-136-66.dedicated.static.sonic.net) (Quit: Bye.)
[08:45:26] *** Quits: trafficjam (~trafficja@103.231.88.30) (Ping timeout: 250 seconds)
[08:46:23] *** Joins: fordfrog (~fordfrog@gentoo/developer/fordfrog)
[08:48:03] *** Joins: jconway (~jconway@072-017-018-098.res.spectrum.com)
[08:49:33] *** Quits: jconway (~jconway@072-017-018-098.res.spectrum.com) (Remote host closed the connection)
[08:51:39] *** Joins: favadi (~favadi@2001:ee0:4081:610b:31ed:8a80:88bc:7e7b)
[08:52:57] *** Joins: jconway (~jconway@072-017-018-098.res.spectrum.com)
[08:53:03] *** Quits: jconway (~jconway@072-017-018-098.res.spectrum.com) (Remote host closed the connection)
[08:55:19] *** Joins: jconway (~jconway@072-017-018-098.res.spectrum.com)
[09:00:36] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 268 seconds)
[09:02:36] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[09:03:41] *** Quits: james_lavin (~jameslavi@ool-457981b2.dyn.optonline.net) (Ping timeout: 268 seconds)
[09:08:45] *** Joins: tnewman2 (~tnewman@118.150.44.48)
[09:08:47] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 246 seconds)
[09:10:25] *** Quits: tnewman (~tnewman@118.150.44.48) (Ping timeout: 248 seconds)
[09:10:25] *** tnewman2 is now known as tnewman
[09:11:47] *** Joins: KombuchaKip (~kip@192.252.230.5)
[09:15:05] *** Joins: noarb (~noarb@user/noarb)
[09:16:06] *** Quits: xinming (~xinming@115.219.37.168) (Ping timeout: 272 seconds)
[09:17:27] *** Joins: xinming (~xinming@115.219.39.109)
[09:26:46] *** Quits: blaklistd (~blaklistd@user/blaklistd) (Quit: au revoir)
[09:27:28] *** Joins: sympatico (~textual@ip184-181-47-47.no.no.cox.net)
[09:28:28] *** Joins: blaklistd (~blaklistd@user/blaklistd)
[09:32:03] *** Quits: gambl0re (~gambl0re@2607:fea8:a59f:c360::7377) (Ping timeout: 268 seconds)
[09:32:53] *** Joins: KaitoDaumoto (Frat@user/kaitodaumoto)
[09:43:42] *** Joins: Reiner_Unsinn (~quassel@p579d7cd9.dip0.t-ipconnect.de)
[09:43:46] *** Quits: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 268 seconds)
[09:43:46] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 268 seconds)
[09:44:00] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[09:45:45] *** Joins: mattil (~mattil@d54vzm2ccn6pv72-8rz-4.rev.dnainternet.fi)
[09:46:09] *** Quits: austb (~austb@156.146.51.110) (Ping timeout: 248 seconds)
[09:47:32] *** Joins: humanBird (~humanBird@cpe-23-241-168-220.socal.res.rr.com)
[09:48:43] *** Quits: mattil (~mattil@d54vzm2ccn6pv72-8rz-4.rev.dnainternet.fi) (Read error: Connection reset by peer)
[09:50:37] *** Joins: mattil (~mattil@d54vzm2ccn6pv72-8rz-4.rev.dnainternet.fi)
[09:51:10] *** Quits: ur5us (~ur5us@2406:e002:689a:b901:e214:9926:5ee8:c50f) (Ping timeout: 268 seconds)
[09:53:25] *** Quits: mattil (~mattil@d54vzm2ccn6pv72-8rz-4.rev.dnainternet.fi) (Read error: Connection reset by peer)
[09:53:48] *** Quits: favadi (~favadi@2001:ee0:4081:610b:31ed:8a80:88bc:7e7b) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:54:17] *** Quits: zmt00 (~zmt00@user/zmt00) (Quit: Leaving)
[09:56:17] *** Joins: zmt00 (~zmt00@user/zmt00)
[09:59:49] *** Joins: dionysus69 (~Thunderbi@78.40.106.31)
[10:01:05] *** Joins: BadAdviceCat (~BadAdvice@user/badadvicecat)
[10:02:16] *** Quits: Nekomander (~BadAdvice@user/badadvicecat) (Ping timeout: 268 seconds)
[10:03:45] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[10:04:20] *** Quits: fordfrog (~fordfrog@gentoo/developer/fordfrog) (Quit: Leaving)
[10:05:57] *** Joins: favadi (~favadi@2001:ee0:4081:610b:dd2e:cd79:159f:cf8d)
[10:06:17] *** Joins: manti7 (~manti7@176.10.104.94)
[10:07:22] *** Joins: Petruchio (~ray@dynamic-acs-24-154-115-19.zoominternet.net)
[10:08:05] *** Joins: mattil (~mattil@d54vzm2ccn6pv72-8rz-4.rev.dnainternet.fi)
[10:10:36] *** Quits: inak (~justme@228-134-237-24.gci.net) (Quit: Leaving)
[10:13:19] *** Joins: austb (~austb@c-73-240-245-80.hsd1.or.comcast.net)
[10:18:56] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[10:21:45] *** Quits: favadi (~favadi@2001:ee0:4081:610b:dd2e:cd79:159f:cf8d) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:22:03] *** Quits: mattil (~mattil@d54vzm2ccn6pv72-8rz-4.rev.dnainternet.fi) (Remote host closed the connection)
[10:22:04] *** Joins: triberio13 (~triberio1@195.53.32.158)
[10:22:46] *** Joins: favadi (~favadi@2001:ee0:4081:610b:7121:c8f9:8c62:8f60)
[10:26:08] *** Quits: podverse-mitch (~mitch-pod@c-73-176-137-149.hsd1.il.comcast.net) (Ping timeout: 246 seconds)
[10:30:07] *** Joins: gleu (~guillaume@2a01cb0c0e54b8007e39e75cb4390e1c.ipv6.abo.wanadoo.fr)
[10:30:15] *** Quits: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[10:32:25] *** Quits: w_lehinsun (~lehinsun@188.113.178.220) (Quit: Leaving)
[10:33:31] *** Joins: mattil (~mattil@helsinki.portalify.com)
[10:34:32] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[10:34:36] *** Joins: podverse-mitch (~mitch-pod@c-73-176-137-149.hsd1.il.comcast.net)
[10:35:18] *** Joins: mattil (~mattil@helsinki.portalify.com)
[10:35:26] *** Quits: mattil (~mattil@helsinki.portalify.com) (Read error: Connection reset by peer)
[10:35:31] *** Joins: shiroyas1 (~shiroyash@ec2-3-124-70-31.eu-central-1.compute.amazonaws.com)
[10:35:38] *** Joins: mattil (~mattil@helsinki.portalify.com)
[10:37:23] *** Quits: peb (~PEB@debian/peb) (Ping timeout: 256 seconds)
[10:37:23] *** Quits: shiroyasha (~shiroyash@ec2-3-124-70-31.eu-central-1.compute.amazonaws.com) (Ping timeout: 256 seconds)
[10:40:07] *** Joins: DNH (~DNH@2a02:8109:b740:2c4:9487:ccc0:d294:ae76)
[10:48:44] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:84f3:9cd1:2f26:201d)
[10:50:01] *** Quits: DNH (~DNH@2a02:8109:b740:2c4:9487:ccc0:d294:ae76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:50:11] *** Joins: peb (~PEB@debian/peb)
[10:53:05] *** Joins: mrwick (~mrwick@user/mrwick)
[10:53:31] *** Joins: mexen (uid495612@user/mexen)
[10:53:42] *** Joins: darutoko (~darutoko@95.191.57.152)
[10:56:35] *** Quits: iliv (~iliv@user/iliv) (Ping timeout: 246 seconds)
[10:58:08] *** Joins: DNH (~DNH@2a02:8109:b740:2c4:9487:ccc0:d294:ae76)
[10:58:10] *** Joins: fordfrog (~fordfrog@gentoo/developer/fordfrog)
[11:00:28] *** Joins: iliv (~iliv@93-77-147-152.lvv.volia.net)
[11:00:28] *** Quits: iliv (~iliv@93-77-147-152.lvv.volia.net) (Changing host)
[11:00:28] *** Joins: iliv (~iliv@user/iliv)
[11:01:31] *** Quits: favadi (~favadi@2001:ee0:4081:610b:7121:c8f9:8c62:8f60) (Ping timeout: 260 seconds)
[11:03:32] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[11:03:51] *** Joins: jmarsac (~jmarsac@195.25.246.177)
[11:05:03] *** Joins: odnes (~odnes@5-203-209-2.pat.nym.cosmote.net)
[11:05:39] *** Joins: palasso (~palasso@user/palasso)
[11:07:00] *** Joins: the_lanetly_052 (~the_lanet@194.135.152.222)
[11:08:29] *** Joins: SAS (~SAS@2001:41d0:1:4547::1)
[11:09:36] *** Quits: DNH (~DNH@2a02:8109:b740:2c4:9487:ccc0:d294:ae76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:10:48] *** Joins: shiranaihito (~textual@2001-b011-4011-34b6-01ac-a49c-9c8e-95ba.dynamic-ip6.hinet.net)
[11:13:26] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[11:14:07] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[11:16:39] *** Joins: michalz (~michalz@185.246.204.37)
[11:17:40] *** Joins: maxzor (~maxzor@2a01cb04054faa00039336efa77b9bc7.ipv6.abo.wanadoo.fr)
[11:19:45] *** Joins: sakasama (~sakasama@user/sakasama)
[11:20:49] *** Quits: sakasama (~sakasama@user/sakasama) (Remote host closed the connection)
[11:23:19] *** Quits: jmarsac (~jmarsac@195.25.246.177) (Quit: Leaving)
[11:26:41] *** Quits: randir (~randir@95-31-138-202.broadband.corbina.ru) (Remote host closed the connection)
[11:28:12] <maret> What are options to updating large tables? I need to add extra column and use data from other table to do a simple computation ( its pretty much  multiplying 2 integers with extra integer coming from outside of db). Issue is that there are 7 billion rows.
[11:29:09] <peerce> so you are sayign, all 7 billion rows will need a new a new tuple updated?
[11:29:11] *** Joins: bomb (~bomb@user/bomb)
[11:29:18] <peerce> yeah, thats gonna be expensive.
[11:29:31] <peerce> a 7B row table probably shoudl ahve been partitioned some time ago
[11:29:54] <peerce> and then you could update one partition at a time, as long as you could afford the downtime
[11:30:53] <maret> Yeah, I am thinking about copy data to something more faster like BigQuery or  maybe something like that on AWS OR dumping the table to csv and process csv and reimport data
[11:30:55] <peerce> 7 billion new tuples == a lot of space if they are all updated in one pass, since the old space can't be vacuumed til the oldest transaction is complete.
[11:31:03] <maret> this is one off thing
[11:31:22] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 240 seconds)
[11:31:46] <peerce> is this a dedicated server you have control of, or some cloudy service thing?
[11:31:58] <maret> amazon rds so cloudy thing
[11:32:22] <maret> although in principle I can move it locally to my server
[11:32:29] <maret> copy it
[11:32:50] <peerce> gonna be painful any way youd do it.  amazon will charge you to upload your csv files.
[11:33:37] <maret> I am will to accept that
[11:34:15] *** Joins: ivii (~ivan@user/ivii)
[11:34:57] <maret> willing
[11:42:07] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:84f3:9cd1:2f26:201d) (Ping timeout: 260 seconds)
[11:43:59] *** Quits: xinming (~xinming@115.219.39.109) (Ping timeout: 260 seconds)
[11:44:23] *** Joins: xinming (~xinming@115.219.39.109)
[11:44:25] *** Joins: shka (~herr@109.231.3.55)
[11:52:40] *** Joins: asymmentric (~asymmentr@157.45.133.223)
[11:57:55] *** Joins: ba|ch (~user@p200300f3a7089c14c98bae83a2c32a56.dip0.t-ipconnect.de)
[12:00:01] *** Joins: op2 (~op2@user/op2)
[12:01:21] *** Quits: schinckel (uid38120@user/schinckel) (Quit: Connection closed for inactivity)
[12:01:41] *** Quits: BadAdviceCat (~BadAdvice@user/badadvicecat) (Ping timeout: 246 seconds)
[12:01:46] *** Quits: tnewman (~tnewman@118.150.44.48) (Quit: Ping timeout (120 seconds))
[12:02:05] *** Joins: tnewman (~tnewman@118.150.44.48)
[12:03:07] *** Joins: trafficjam (~trafficja@203.176.111.34)
[12:04:45] <trafficjam> hey yall
[12:08:06] <maret> peerce so would it help if I download data locally on my local server which I can use however I want?
[12:10:33] *** Quits: michalz (~michalz@185.246.204.37) (Ping timeout: 260 seconds)
[12:11:22] <peerce> maret; um, that would depend entirely on your use case, and data costs.
[12:12:27] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:84f3:9cd1:2f26:201d)
[12:14:15] *** Quits: ba|ch (~user@p200300f3a7089c14c98bae83a2c32a56.dip0.t-ipconnect.de) (Remote host closed the connection)
[12:16:24] *** Joins: _vanessa_ (~farawayas@103.160.128.7)
[12:17:18] *** Joins: ba|ch (~user@p200300f3a7089c14adce12c8646f3465.dip0.t-ipconnect.de)
[12:19:10] *** Quits: vanessa (~farawayas@103.160.128.7) (Ping timeout: 268 seconds)
[12:20:19] *** Joins: foxo (~foxofoxom@2001:470:69fc:105::e34f)
[12:20:21] *** Quits: trafficjam (~trafficja@203.176.111.34) (Quit: Client closed)
[12:20:24] *** Joins: epony (epony@user/epony)
[12:21:59] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:84f3:9cd1:2f26:201d) (Ping timeout: 252 seconds)
[12:25:01] *** Quits: bomb (~bomb@user/bomb) (Remote host closed the connection)
[12:25:33] *** Joins: bomb (~bomb@user/bomb)
[12:27:45] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:84f3:9cd1:2f26:201d)
[12:35:36] *** Joins: magga (magga@ti0036a400-3577.bb.online.no)
[12:39:59] *** Joins: trafficjam (~trafficja@203.176.111.34)
[12:42:21] *** Quits: maxzor (~maxzor@2a01cb04054faa00039336efa77b9bc7.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[12:43:23] *** Joins: maxzor (~maxzor@2a01cb04054faa00a75904040f18d50a.ipv6.abo.wanadoo.fr)
[12:43:57] *** Joins: peteyboy1 (~peteyboy1@199.157.133.37.dynamic.jazztel.es)
[12:44:17] <maret> data cost isnt the issue here. I just want to find some reasonable to update the data in day or two
[12:44:25] <maret> or 3
[12:44:26] *** Joins: ^vanessa^ (~farawayas@103.160.128.7)
[12:45:38] *** Joins: cerill (~cerill@h-155-4-198-153.A785.priv.bahnhof.se)
[12:46:05] <trafficjam> what can i create a versioned template system that can be updated without breaking older versions?
[12:47:32] *** Quits: _vanessa_ (~farawayas@103.160.128.7) (Ping timeout: 268 seconds)
[12:48:38] *** Joins: _vanessa_ (~farawayas@103.160.128.7)
[12:50:13] *** Quits: azlev (~azlev@189.120.73.227) (Ping timeout: 260 seconds)
[12:50:37] *** Quits: ^vanessa^ (~farawayas@103.160.128.7) (Ping timeout: 268 seconds)
[12:52:04] *** Quits: _vanessa_ (~farawayas@103.160.128.7) (Client Quit)
[12:55:24] *** Joins: ur5us (~ur5us@203.86.198.200)
[12:56:29] *** Quits: asymmentric (~asymmentr@157.45.133.223) (Quit: Ping timeout (120 seconds))
[12:56:52] *** Quits: ur5us (~ur5us@203.86.198.200) (Remote host closed the connection)
[12:59:32] *** Joins: ur5us (~ur5us@2406:e002:689a:b901:920f:b571:c0ce:1fdb)
[13:06:33] *** Quits: CalimeroTeknik (~calimero@ctkarch.org) (Changing host)
[13:06:33] *** Joins: CalimeroTeknik (~calimero@user/calimeroteknik)
[13:14:23] *** Joins: pete-needs-help (~pete-need@cpc137346-soli7-2-0-cust336.19-1.cable.virginm.net)
[13:15:56] <pete-needs-help> Good morning saviors. Is here a good place to ask a question about a strange entry in my logs that is worrying me?
[13:16:08] <Myon> sure
[13:16:37] <pete-needs-help> I'm getting this repeated 500 times....
[13:16:41] <pete-needs-help> 2022-04-05T08:14:31.000000+00:00 app[postgres.2321273]: [WHITE] [180-1]  sql_error_code = 00000 LOG:  temporary file: path "pg_tblspc/16386/PG_12_201909212/pgsql_tmp/pgsql_tmp1473752.395", size 14263872
[13:16:42] <pete-needs-help> 2022-04-05T08:14:31.000000+00:00 app[postgres.2321273]: [WHITE] [180-2]  sql_error_code = 00000 CONTEXT:  SQL function "datapipe_report_transform_staging_data" statement 23
[13:16:42] <pete-needs-help> 2022-04-05T08:14:31.000000+00:00 app[postgres.2321273]: [WHITE] [180-3]  sql_error_code = 00000 STATEMENT:  CALL public.datapipe_report_transform_staging_data($1, $2)
[13:16:43] <pete-needs-help> 2022-04-05T08:14:31.000000+00:00 app[postgres.2321273]: [WHITE] [181-1]  sql_error_code = 00000 LOG:  temporary file: path "pg_tblspc/16386/PG_12_201909212/pgsql_tmp/pgsql_tmp1473752.324", size 14284508
[13:16:43] <pete-needs-help> 2022-04-05T08:14:31.000000+00:00 app[postgres.2321273]: [WHITE] [181-2]  sql_error_code = 00000 CONTEXT:  SQL function "datapipe_report_transform_staging_data" statement 23
[13:16:44] <pete-needs-help> 2022-04-05T08:14:31.000000+00:00 app[postgres.2321273]: [WHITE] [181-3]  sql_error_code = 00000 STATEMENT:  CALL public.datapipe_report_transform_staging_data($1, $2)
[13:16:44] <pete-needs-help> 2022-04-05T08:14:31.000000+00:00 app[postgres.2321273]: [WHITE] [182-1]  sql_error_code = 00000 LOG:  temporary file: path "pg_tblspc/16386/PG_12_201909212/pgsql_tmp/pgsql_tmp1473752.234", size 14246176
[13:16:45] <pete-needs-help> 2022-04-05T08:14:31.000000+00:00 app[postgres.2321273]: [WHITE] [182-2]  sql_error_code = 00000 CONTEXT:  SQL function "datapipe_report_transform_staging_data" statement 23
[13:16:45] <pete-needs-help> 2022-04-05T08:14:31.000000+00:00 app[postgres.2321273]: [WHITE] [182-3]  sql_error_code = 00000 STATEMENT:  CALL public.datapipe_report_transform_staging_data($1, $2)
[13:16:46] <pete-needs-help> 2022-04-05T08:14:31.000000+00:00 app[postgres.2321273]: [WHITE] [183-1]  sql_error_code = 00000 LOG:  temporary file: path "pg_tblspc/16386/PG_12_201909212/pgsql_tmp/pgsql_tmp1473752.508", size 14273028
[13:16:46] <pete-needs-help> 2022-04-05T08:14:31.000000+00:00 app[postgres.2321273]: [WHITE] [183-2]  sql_error_code = 00000 CONTEXT:  SQL function "datapipe_report_transform_staging_data" statement 23
[13:16:47] <foxo> Yes
[13:16:47] <pete-needs-help> 2022-04-05T08:14:31.000000+00:00 app[postgres.2321273]: [WHITE] [183-3]  sql_error_code = 00000 STATEMENT:  CALL public.datapipe_report_transform_staging_data($1, $2)
[13:16:47] <pete-needs-help> 2022-04-05T08:14:31.000000+00:00 app[postgres.2321273]: [WHITE] [184-1]  sql_error_code = 00000 LOG:  temporary file: path "pg_tblspc/16386/PG_12_201909212/pgsql_tmp/pgsql_tmp1473752.440", size 14248556
[13:16:48] <pete-needs-help> 2022-04-05T08:14:31.000000+00:00 app[postgres.2321273]: [WHITE] [184-2]  sql_error_code = 00000 CONTEXT:  SQL function "datapipe_report_transform_staging_data" statement 23
[13:16:48] <pete-needs-help> 2022-04-05T08:14:31.000000+00:00 app[postgres.2321273]: [WHITE] [184-3]  sql_error_code = 00000 STATEMENT:  CALL public.datapipe_report_transform_staging_data($1, $2)
[13:16:49] <pete-needs-help> 2022-04-05T08:14:32.000000+00:00 app[postgres.2321273]: [WHITE] [185-1]  sql_error_code = 00000 LOG:  temporary file: path "pg_tblspc/16386/PG_12_201909212/pgsql_tmp/pgsql_tmp1473752.296", size 14221844
[13:16:49] <pete-needs-help> 2022-04-05T08:14:32.000000+00:00 app[postgres.2321273]: [WHITE] [185-2]  sql_error_code = 00000 CONTEXT:  SQL function "datapipe_report_transform_staging_data" statement 23
[13:16:50] <pete-needs-help> 2022-04-05T08:14:32.000000+00:00 app[postgres.2321273]: [WHITE] [185-3]  sql_error_code = 00000 STATEMENT:  CALL public.datapipe_report_transform_staging_data($1, $2)
[13:16:53] <foxo> HELP
[13:17:00] <Myon> pete-needs-help: next time, use a paste site
[13:17:02] <foxo> Please use a pastebin.
[13:17:02] <pete-needs-help> it is poorly written long-running stored procedure
[13:17:19] <kjetilho> ??paste
[13:17:19] <pg_docbot> https://explain.depesz.com/ :: https://www.db-fiddle.com/
[13:17:20] <pg_docbot> https://paste.depesz.com/ :: https://dpaste.org
[13:17:30] <Myon> you can simply disable log_temp_files and the messages are gone :)
[13:17:34] <foxo> "These log lines don't indicate any errors as sql_error_code = 00000 LOG translates to "successful completion". "
[13:17:37] <pete-needs-help> Noted - I'll use a paste bin next time - thanks for the links
[13:17:38] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 260 seconds)
[13:18:12] <depesz> pete-needs-help: all these are 100% ok. you could increase work_mem and it should decrease number of them.
[13:18:13] <Myon> probably simply not enough work_mem for sorting
[13:18:20] <bomb> pete better helps us
[13:18:59] <kjetilho> pete-needs-help: what's your current work_mem value?
[13:19:30] <pete-needs-help> Great answer depesz thank you
[13:19:40] <pete-needs-help> let me check kjetilho
[13:19:58] *** Joins: fruity_tomato (~fruity_to@user/fruity-tomato/x-3541336)
[13:21:34] <Myon> dive: fixed, sorry for the trouble and thanks for spotting&reporting!
[13:21:44] <pete-needs-help> kjetilho - I know I can check postgres.conf when it is hosted locally but it's on Heroku. Do you know how I check there?
[13:21:57] <Myon> dive: will be live in 30min
[13:22:07] <kjetilho> pete-needs-help: show work_mem;
[13:22:12] <kjetilho> (in psql)
[13:23:31] *** Quits: fordfrog (~fordfrog@gentoo/developer/fordfrog) (Quit: Leaving)
[13:24:15] <pete-needs-help> 32MB
[13:24:27] <foxo> That's not very high.
[13:24:30] *** Joins: Klinda (~superleag@user/klinda)
[13:24:55] <pete-needs-help> Would you like me to describe the app to determine a better value? Or is it just a case of increasing it?
[13:25:31] <foxo> https://pgtune.leopard.in.ua/
[13:25:42] <foxo> You can use this tool here to get some safe defaults to use with your hardware.
[13:26:13] <trafficjam> anyone have any tips?
[13:26:42] <pete-needs-help> Thanks foxo - does that work with a Heroku hosted PostGres do you know?
[13:27:06] <kjetilho> trafficjam: I didn't understand the question.  what kind of templates?
[13:27:15] <foxo> "Fully managed database" - i don't think you can edit configurations like this honestly, so meh
[13:27:20] <selckin> 64gb ram, 24 cores, and it proposes 20mb work_mem
[13:27:29] <peerce> when you you are using someone elses computers, youa re at their mercy
[13:27:47] <trafficjam> kjetilho: template in the sense of a set of predefined key/values (possibly nested)
[13:27:48] <foxo> selckin: you probably set a very high number of concurrent connections
[13:27:59] <pete-needs-help> yes - I think we have a crap box too, as this runs much faster locally
[13:28:11] <selckin> foxo: 200 yeah, i don't consider that very high tho :/
[13:28:53] <kjetilho> selckin: usually better to use a connection pooler.  you don't want 200 active queries on 24 cores
[13:29:07] <foxo> selckin: Do you have 200 connections active at the same time all pulling/pushing data?
[13:30:16] <peerce> yeah mrore than 2-4X the cpu core/thread count in concurrent short queries usually results in slower total trasnsactions/second
[13:30:17] <foxo> kjetilho: ^
[13:30:48] <selckin> guess its a bit much for my 24 cores, but yeah on our servers with 64 cores, we sometimes do, multiple pools sized to number of cpus that burst a bit
[13:31:57] <pete-needs-help> Thanks guys - you've been a great help
[13:32:30] <kjetilho> it depends on the application, for sure.  on my Bareos server, it opens a connection per running job - but they only do work 2-3 times per job/connection, which can last hours.  so in my case it is OK to bump max_connections since the concurrency isn't actually that great.
[13:34:27] <peerce> if its all short conenctions/transactiuons, then using a pooler like pgbouncer, can make a hgue performance boost.
[13:35:35] <foxo> I have an absurdly high connection limit on my server but i still oversize the work_mem knowing that the amount of active queries are still pretty low
[13:36:16] <trafficjam> basically i want to be able to choose the current version of a template "foo", and then render some data to a webpage, but if the underlying template changes, a user shouldn't notice any difference
[13:37:14] <selckin> doesn't sound like a postgres question
[13:37:43] <trafficjam> it is, how do i represent this in postgres
[13:38:19] <selckin> its not.
[13:38:31] <trafficjam> it is.
[13:39:27] <Myon> you simply store the rendered result, and don't update it when the template changes
[13:39:34] *** minus_ is now known as minus
[13:39:45] <trafficjam> Myon: store the rendered html?
[13:40:15] <Myon> whatever is required so the output doesn't change
[13:40:43] <Myon> or you need versioning for your templates, and remember which version you rendered
[13:41:05] *** Joins: dsrt^ (~dsrt@c-24-99-107-170.hsd1.ga.comcast.net)
[13:41:12] <trafficjam> yeah versioning feels like the right thing to do, just not sure the best way to implement that in a database
[13:41:29] <Myon> ??periods
[13:41:29] <pg_docbot> https://github.com/xocolatl/periods
[13:42:27] <trafficjam> oh neat, didn't know about this
[13:45:33] <kjetilho> Myon: what DB's support this?
[13:46:06] *** Joins: Floflobel_ (~Floflobel@cosium-fo-152-18.fib.nerim.net)
[13:46:24] *** Joins: Guest9625 (~Thunderbi@p8019032-ipngn39401marunouchi.tokyo.ocn.ne.jp)
[13:48:04] *** Quits: Guest9625 (~Thunderbi@p8019032-ipngn39401marunouchi.tokyo.ocn.ne.jp) (Client Quit)
[13:48:13] <Myon> PostgreSQL
[13:49:42] *** Quits: held (~heldchen@user/held) (Ping timeout: 260 seconds)
[13:49:49] *** Quits: azeem (~mbanck@ppp-188-174-62-125.dynamic.mnet-online.de) (Ping timeout: 240 seconds)
[13:50:14] *** Joins: azeem (~mbanck@ppp-188-174-62-125.dynamic.mnet-online.de)
[13:51:45] <ilmari> kjetilho: it's a postgres extension
[13:57:52] *** Quits: trafficjam (~trafficja@203.176.111.34) (Ping timeout: 250 seconds)
[13:57:53] *** Quits: fcr (~fran@r167-60-7-45.dialup.adsl.anteldata.net.uy) (Ping timeout: 248 seconds)
[13:59:21] *** Joins: michalz (~michalz@185.246.204.104)
[14:02:50] *** Joins: fcr (~fran@r167-56-24-144.dialup.adsl.anteldata.net.uy)
[14:05:07] <kjetilho> ilmari: I meant the SQL:2016 syntax
[14:05:41] <Myon> probably oracle
[14:07:55] *** Joins: held (~heldchen@user/held)
[14:13:14] *** Joins: AceSlash (~slash@2a01:e0a:432:c050:cd12:393c:3664:2a6e)
[14:15:03] *** Joins: nviroepah9832 (~q3lont@94.131.133.177)
[14:19:21] *** Joins: xenoterracide (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net)
[14:19:49] *** Quits: k_sze (~k_sze@mail2.kalunite.net) (Quit: ZNC 1.8.2 - https://znc.in)
[14:21:12] *** Joins: csm3105 (~csm3105@143.red-83-48-84.staticip.rima-tde.net)
[14:21:38] *** Joins: k_sze (~k_sze@mail2.kalunite.net)
[14:24:59] *** Joins: Moonsilence (~Moonsilen@mx2.intend.de)
[14:25:11] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Ping timeout: 252 seconds)
[14:26:13] *** Joins: alioui (~medeva293@102.157.8.53)
[14:26:23] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[14:27:30] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Max SendQ exceeded)
[14:29:40] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[14:31:59] *** Quits: SDr (~SDr@user/sdr) (Ping timeout: 256 seconds)
[14:32:04] *** Joins: SDr8 (~SDr@li1189-192.members.linode.com)
[14:37:05] *** Quits: nyov (~nyov@user/nyov) (Ping timeout: 246 seconds)
[14:38:58] *** Joins: nyov (~nyov@user/nyov)
[14:41:22] *** Quits: k_sze (~k_sze@mail2.kalunite.net) (Quit: ZNC 1.8.2 - https://znc.in)
[14:41:51] *** Joins: k_sze (~k_sze@mail2.kalunite.net)
[14:45:35] *** Joins: fordfrog (~fordfrog@gentoo/developer/fordfrog)
[14:47:33] *** Joins: sepi (~sepi@fw.mnhn.lu)
[14:47:50] *** Quits: sepi (~sepi@fw.mnhn.lu) (Remote host closed the connection)
[14:54:17] *** Quits: KaitoDaumoto (Frat@user/kaitodaumoto) (Remote host closed the connection)
[14:55:11] *** Joins: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[14:55:12] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[14:56:10] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[14:56:41] *** Quits: xenoterracide (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net) (Ping timeout: 246 seconds)
[14:57:39] *** Quits: ur5us (~ur5us@2406:e002:689a:b901:920f:b571:c0ce:1fdb) (Ping timeout: 268 seconds)
[15:00:17] *** Quits: maxzor (~maxzor@2a01cb04054faa00a75904040f18d50a.ipv6.abo.wanadoo.fr) (Ping timeout: 248 seconds)
[15:00:58] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[15:06:31] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[15:06:38] *** Quits: jasonaowen (~owenja@user/jasonaowen) (Quit: leaving)
[15:08:35] *** Joins: jasonaowen (~owenja@user/jasonaowen)
[15:11:50] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 268 seconds)
[15:17:27] *** Quits: daftaupe (~daftaupe@82.66.95.80) (Ping timeout: 252 seconds)
[15:19:53] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:20:33] *** Joins: Siecje (~Siecje@97.111.200.190)
[15:20:59] *** Quits: humanBird (~humanBird@cpe-23-241-168-220.socal.res.rr.com) (Quit: Client closed)
[15:26:06] *** Quits: firewyre (~firewyre@pool-71-184-153-62.bstnma.fios.verizon.net) (Quit: ZNC - https://znc.in)
[15:26:27] *** Joins: firewyre (~firewyre@pool-71-184-153-62.bstnma.fios.verizon.net)
[15:30:28] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[15:36:46] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[15:41:48] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:7904:da90:b863:898)
[15:44:09] *** Joins: psoo (~psoo@dslb-002-202-190-148.002.202.pools.vodafone-ip.de)
[15:44:36] *** Quits: zoraj (~zoraj@vmi794994.contaboserver.net) (Read error: Connection reset by peer)
[15:48:16] *** Joins: zoraj (~zoraj@vmi794994.contaboserver.net)
[15:48:55] *** Joins: maxzor (~maxzor@2a01cb04054faa00817fec2f2541fffd.ipv6.abo.wanadoo.fr)
[15:54:39] *** Quits: cleverrness (~Clevernes@pool-108-54-152-186.nycmny.fios.verizon.net) (Quit: Leaving)
[15:57:40] *** Joins: Croves (~Croves@2804:58:c08c:9200:203e:19c5:88db:c25f)
[15:57:57] *** Parts: Croves (~Croves@2804:58:c08c:9200:203e:19c5:88db:c25f) ()
[15:58:39] <Moonsilence> Hi! Whem pg_restore gives me errors like "pg_restore: warning: restoring tables WITH OIDS is not supported anymore", will it have restored the table without OIDS or skipped the table?
[15:58:59] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 246 seconds)
[15:59:13] <wez> Moonsilence: TIAS
[15:59:22] <Moonsilence> What?
[15:59:39] <wez> Try It And See
[16:00:20] <ilmari> Moonsilence: connect to the database you restored to with psql and do `\d the_table`
[16:01:19] <Moonsilence> OK, thanks
[16:01:19] <wez> ilmari: so, you recommend tias too?
[16:01:28] <ilmari> yes
[16:01:33] <wez> :)
[16:01:36] * ilmari is a great fan of tias
[16:01:44] *** Joins: daftaupe (~daftaupe@82.66.95.80)
[16:01:45] <wez> <3
[16:01:47] <wez> sane
[16:01:51] <wez> same*
[16:09:10] *** Quits: newdimension (~newdimens@user/newdimension) (Quit: Ping timeout (120 seconds))
[16:09:32] *** Joins: newdimension (~newdimens@user/newdimension)
[16:10:13] <dive> Myon: thanks!!
[16:10:23] *** Quits: magnush (~mha@postgresql/overlord) (Remote host closed the connection)
[16:10:43] *** Joins: magnush (~mha@postgresql/overlord)
[16:11:38] *** Joins: n0fun (~jack@mue-88-130-48-193.dsl.tropolys.de)
[16:12:18] <Moonsilence> The tables did get created, witout OIDs and were not skipped :)
[16:12:32] *** Joins: pedja (~pedja@user/deus-ex/x-7934090)
[16:13:31] <wez> yay
[16:13:45] *** Quits: wolfshappen (~waff@irc.furworks.de) (Quit: later)
[16:14:00] <wez> Moonsilence: there's your anserr then    great work!
[16:14:10] *** Joins: wolfshappen (~waff@irc.furworks.de)
[16:14:19] <Moonsilence> Doing an upgrade von 11 to 13, so the OIDs are deprecated.
[16:15:58] *** Joins: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c)
[16:18:28] *** Quits: the_lanetly_052 (~the_lanet@194.135.152.222) (Ping timeout: 260 seconds)
[16:18:28] *** Quits: CanuteTheGreat (~CanuteThe@user/canutethegreat) (Ping timeout: 260 seconds)
[16:19:02] *** Joins: CanuteTheGreat (~CanuteThe@user/canutethegreat)
[16:20:25] <ilmari> not deprecated. dropped.
[16:21:07] *** Joins: gp5st_ (~gp5st@pool-72-77-44-213.pitbpa.fios.verizon.net)
[16:23:08] *** Joins: the_lanetly_052 (~the_lanet@194.135.152.222)
[16:29:51] *** Quits: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[16:29:51] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Remote host closed the connection)
[16:30:43] *** Joins: bmomjian (~bruce@momjian.us)
[16:30:44] *** Joins: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[16:32:01] *** Quits: maxzor (~maxzor@2a01cb04054faa00817fec2f2541fffd.ipv6.abo.wanadoo.fr) (Ping timeout: 248 seconds)
[16:34:23] *** Quits: agrosant (~agrosant@79.103.182.92.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[16:35:03] *** Joins: agrosant (~agrosant@79.103.182.92.dsl.dyn.forthnet.gr)
[16:35:38] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[16:36:06] *** Quits: tnewman (~tnewman@118.150.44.48) (Quit: Ping timeout (120 seconds))
[16:36:25] *** Joins: tnewman (~tnewman@118.150.44.48)
[16:37:37] <dim> hi friends! in pg_restore catalog I have entries such as 3299; 0 0 INDEX ATTACH public idx_fk_payment_p2020_01_staff_id postgres -- that's missing the OID of the target object (here, an index), so it makes it hard to implementing filtering
[16:37:45] <dim> do we know if that's a bug or done on purpose?
[16:38:04] <dim> I can't find comments about that in pg_dump.c dumpIndexAttach function, for instance
[16:39:35] *** Quits: dsrt^ (~dsrt@c-24-99-107-170.hsd1.ga.comcast.net) (Remote host closed the connection)
[16:39:44] <Myon> you mean the "0 0" part?
[16:43:20] <dim> yeah, exactly
[16:44:49] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:7904:da90:b863:898) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:45:02] <Myon> does that "attach" even have an oid? Isn't that just a pg_depend entry?
[16:45:19] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:7904:da90:b863:898)
[16:45:44] <ilmari> it's very unlikely that the OID will be the same in the restored database, so it's not really meaningful, is it?
[16:46:24] *** Joins: henrydance (~henrydanc@static-n49-176-146-220.meb4.vic.optusnet.com.au)
[16:46:25] *** Quits: gp5st_ (~gp5st@pool-72-77-44-213.pitbpa.fios.verizon.net) (Ping timeout: 248 seconds)
[16:46:35] <henrydance> ??paste
[16:46:35] <pg_docbot> https://explain.depesz.com/ :: https://www.db-fiddle.com/
[16:46:35] <pg_docbot> https://paste.depesz.com/ :: https://dpaste.org
[16:46:37] <Myon> I guess it is useful if you are looking at the source database
[16:47:21] <henrydance> why would the limit not be working with this query: https://paste.depesz.com/s/PSj
[16:47:52] <Myon> it's applied after GROUP BY, if that is the question
[16:48:36] <Myon> that BETWEEN makes me weep
[16:49:57] <henrydance> Myon: what's wrong with the between?
[16:50:01] <henrydance> should it not be used?
[16:50:02] <dim> ilmari: yeah like Myon says, the filtering has to be done with the source database, and that's what I'm doing in pgcopydb
[16:50:12] <ilmari> henrydance: you don't want messages sent in the first minute of 2022-03-28 and the last minute of 2022-04-04?
[16:50:20] <ilmari> 2022-04-03 even
[16:50:25] <Myon> what's with messages from 2022-03-28 00:00:00.2134 or 2022-04-03 23:59:44 ?
[16:50:33] *** Quits: uncleyear (~ian@178.176.77.60) (Ping timeout: 260 seconds)
[16:50:50] <ilmari> you probably want time_stamp >= '2022-03-28 00:00:00' AND time_stamp < '2022-04-04 00:00:00'
[16:51:01] <henrydance> That is a good point :0
[16:51:16] <dim> now, I can't see a way to filter out those INDEX ATTACH entries that are targeting indexes that have been filtered out already, other than parsing the index name from the pg_restore catalog entry, and matching by name, which I could avoid for everything else :/
[16:51:31] <henrydance> So with the LIMIT, must that be before the GROUP BY?
[16:51:53] <ilmari> henrydance: what exactly do you want to limit?
[16:52:12] <Myon> dim: at least it's machine-readable...
[16:52:32] <dim> in simple cases yeah
[16:52:34] <ilmari> the count in each group? the total number of messages considered before grouping?
[16:52:45] <dim> I need to see how schema names are printed out when they contain spaces, for instance
[16:52:55] <Myon> or newlines *uargh*
[16:53:04] <dim> and you can only parse the catalog lines when you have a list of emitted targs
[16:53:11] <Myon> (though not supporting that might be a feature)
[16:53:56] <dim> let's try and avoid opinionated tools when they're meant to implement a generic approach ;-)
[16:54:16] <dim> (it's like not supporting tablespaces in pg_auto_failover, I could say it's a feature, I'm still happy we made it work in the end)
[16:54:47] <ilmari> it seems to replace newlines with spaces (see sanitize_line() in pg_backup_archiver.c)
[16:55:11] <dim> does it double-quote schema/object names that contains spaces then?
[16:56:00] <dim> it doesn't seem like it would
[16:56:16] <dim> at least I'm missing where, from reading PrintTOCSummary in pg_backup_archiver.c
[16:56:36] <dim> so you can't split the line on space, and there is no other separator
[16:56:42] <dim> machine readable? I think not
[16:57:35] *** Quits: fordfrog (~fordfrog@gentoo/developer/fordfrog) (Quit: Leaving)
[17:01:34] *** Joins: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec)
[17:01:39] <Myon> it's not as bad as not supporting a major feature like tablespaces - you'd still be supporting all databases using the feature with only sane names, and of course any database not using the feature at all
[17:01:56] *** Joins: uncleyear (~ian@178.176.75.183)
[17:02:36] *** Joins: fordfrog (~fordfrog@gentoo/developer/fordfrog)
[17:03:26] <dim> yeah that's true
[17:03:52] <dim> at the moment pgcopydb fails entirely when you filter out some partitions of a table if those partitions have indexes attached
[17:03:58] <Myon> AND all databases with insane names, when no --exclude is used
[17:04:27] <dim> I don't think that's acceptable, and solving that is going to be a lot of trouble, because pg_dump and pg_restore feels more and more like second class citizen to me
[17:04:46] *** robins is now known as robinsmidsrod
[17:04:54] <Myon> no no no, they are 1st class, just --exclude isn't :)
[17:05:34] <dim> they're not meant to be useful building blocks like the rest of the Postgres design is
[17:06:02] <dim> they're meant to be as low maintenance as possible and achieve the smaller possible scope, or at least they feel like that
[17:06:20] <Myon> "full restore" is the only thing that works without footnotes
[17:06:32] <dim> exactly my point, yeah, that's a better summary, thanks
[17:06:57] <Myon> they can't be much smarter as they operate on files only
[17:07:10] <dim> anyway enough ranting, I need to find a way to filter out those INDEX ATTACH lines ; and possibly without having to parse them at all
[17:07:16] <Myon> the smartness would have to be in a tool that knows which tables already exist... like pgcopydb
[17:08:01] <dim> the smarts I'm asking of pg_dump and pg_restore is to make it easy to compose them in a tool chain, the unix way
[17:08:21] <dim> even from a code organization standpoint it's a problem, how many times have libpgdump been asked for already?
[17:08:41] *** Joins: gp5st_ (~gp5st@pool-72-77-44-213.pitbpa.fios.verizon.net)
[17:08:51] <Myon> ack
[17:08:59] <dim> is there a way to list other pg_catalog --list entries that could have the 0 0 oid stuff like INDEX ATTACH has?
[17:09:22] <Myon> I'm always astonished how spread things are between pg_dump and pg_get_whateverdef() functions
[17:15:40] *** Quits: bomb (~bomb@user/bomb) (Quit: ‎)
[17:16:31] <dim> 			attachinfo->dobj.objType = DO_TABLE_ATTACH;
[17:16:31] <dim> 			attachinfo->dobj.catId.tableoid = 0;
[17:16:31] <dim> 			attachinfo->dobj.catId.oid = 0;
[17:16:37] <dim> sorry for 3-lines paste
[17:16:48] <dim> I mean ATTACH TABLE will have the same problem as ATTACH INDEX it seems
[17:17:28] <dim> that said dependencies being tracked in the pg_dump catalog itself might solve the problem at pg_restore --use-list time
[17:18:41] <dim> (I doubt that)
[17:19:23] <Myon> ideally the pg_dump-oids wouldn't be necessary and --use-list would use some textual thing directly
[17:21:11] *** Joins: maxzor (~maxzor@2a01cb04054faa00b0d6c6caafc0c1f8.ipv6.abo.wanadoo.fr)
[17:21:14] *** Joins: james_lavin (~jameslavi@ool-457981b2.dyn.optonline.net)
[17:22:30] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 272 seconds)
[17:23:11] *** Joins: tnewman5 (~tnewman@118.150.44.48)
[17:24:50] <mage> I have an application (Nextcloud) which fail badly with pgbouncer in front (with stuff like: SQLSTATE[55000]: Object not in prerequisite state: 7 ERROR: lastval is not yet defined in this session) even in pool_mode set to "session".. any idea?
[17:25:22] <Myon> that doesn't sound like session pooling
[17:25:39] *** Quits: tnewman (~tnewman@118.150.44.48) (Ping timeout: 268 seconds)
[17:25:39] *** tnewman5 is now known as tnewman
[17:26:06] <mage> mmh
[17:27:05] <Myon> lastval is bad style, but you can't fix that on the DB side
[17:27:18] *** Quits: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 260 seconds)
[17:27:18] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 260 seconds)
[17:27:36] <mage> yeah.. Nextcloud is an horrible piece of shit from the database point of view
[17:27:38] *** Quits: Affliction (affliction@idlerpg/player/affliction) (Ping timeout: 250 seconds)
[17:28:05] *** Joins: ArchNoob (~archnoob@196.249.99.58)
[17:28:17] <Zr40> if it breaks due to the addition of the bouncer in session pool mode, nextcloud might be making incorrect assumptions about sessions
[17:28:37] *** Joins: krux02 (~krux02@p200301003f0391003e208a5028265eb9.dip0.t-ipconnect.de)
[17:28:55] <Zr40> e.g. call nextval(); release session; reacquire session; call lastval()
[17:28:55] <Myon> I can't think of anything that should still be breaking
[17:29:21] <Myon> that would break without pgbouncer as well
[17:30:41] *** Quits: ArchNoob (~archnoob@196.249.99.58) (Changing host)
[17:30:41] *** Joins: ArchNoob (~archnoob@user/archnoob)
[17:30:44] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[17:31:12] *** Quits: dionysus69 (~Thunderbi@78.40.106.31) (Ping timeout: 268 seconds)
[17:31:16] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[17:31:16] *** Joins: mattil (~mattil@helsinki.portalify.com)
[17:31:21] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[17:31:33] *** Joins: mattil (~mattil@helsinki.portalify.com)
[17:31:37] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[17:32:24] *** Joins: mattil (~mattil@helsinki.portalify.com)
[17:32:40] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[17:32:44] <mage> mmh ok
[17:33:03] *** Quits: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net) (Ping timeout: 250 seconds)
[17:33:18] <mage> also I don't understand very well the usefullness of reserve_pool_size in pgbouncer.. what are the use-cases?
[17:35:55] <mage> I think the issue is that I have a pool size of 10 and when an user upload a lot of files (as nextcloud opens one connection per files) in parrallel this is not enough
[17:36:47] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 260 seconds)
[17:36:57] <Myon> session pooling is almost useless, might as well go without pgbouncer then
[17:37:22] *** Quits: mattil (~mattil@helsinki.portalify.com) (Ping timeout: 268 seconds)
[17:37:28] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[17:37:28] *** Joins: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[17:37:57] <mage> yeah the reason I was using it is to avoid tons of fork()
[17:38:21] <Myon> right
[17:40:08] *** Joins: mattil (~mattil@d54vzntjl0nz0pwq99y-4.rev.dnainternet.fi)
[17:43:24] *** Quits: gp5st_ (~gp5st@pool-72-77-44-213.pitbpa.fios.verizon.net) (Ping timeout: 240 seconds)
[17:44:02] *** Quits: krux02 (~krux02@p200301003f0391003e208a5028265eb9.dip0.t-ipconnect.de) (Remote host closed the connection)
[17:44:19] <mage> is there a way in pgbouncet to configure a pool size of x but allow it to grow to x+20 for a short period of time?
[17:44:22] <mage> pgbouncer*
[17:44:36] *** Quits: mattil (~mattil@d54vzntjl0nz0pwq99y-4.rev.dnainternet.fi) (Remote host closed the connection)
[17:45:04] *** Joins: mattil (~mattil@d54vzntjl0nz0pwq99y-4.rev.dnainternet.fi)
[17:45:18] *** Quits: mattil (~mattil@d54vzntjl0nz0pwq99y-4.rev.dnainternet.fi) (Read error: Connection reset by peer)
[17:45:26] *** Joins: mattil (~mattil@d54vzntjl0nz0pwq99y-4.rev.dnainternet.fi)
[17:45:26] *** Joins: gp5st_ (~gp5st@pool-72-77-44-213.pitbpa.fios.verizon.net)
[17:46:03] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[17:46:15] <Myon> iirc there's timeouts, so just set it to x+20
[17:49:28] *** Quits: iliv (~iliv@user/iliv) (Ping timeout: 260 seconds)
[17:50:49] *** Quits: mattil (~mattil@d54vzntjl0nz0pwq99y-4.rev.dnainternet.fi) (Remote host closed the connection)
[17:51:15] *** Joins: mattil (~mattil@d54vzntjl0nz0pwq99y-4.rev.dnainternet.fi)
[17:51:23] *** Joins: cs (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec)
[17:51:33] *** Quits: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec) (Read error: Connection reset by peer)
[17:51:42] *** Quits: mattil (~mattil@d54vzntjl0nz0pwq99y-4.rev.dnainternet.fi) (Remote host closed the connection)
[17:51:52] *** Joins: mattil (~mattil@d54vzntjl0nz0pwq99y-4.rev.dnainternet.fi)
[17:52:04] *** Joins: off^ (~off@c-24-99-107-170.hsd1.ga.comcast.net)
[17:52:20] <mage> ok I'll try that
[17:54:53] <Myon> (plus set the timeouts)
[17:57:22] *** Quits: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c) (Remote host closed the connection)
[17:58:41] <mage> which means that the process will be killed after a certain period of inactivity?
[17:59:08] <Myon> I was thinking of idle sessiosn
[17:59:31] <Myon> for PostgreSQL active sessions, there's settings in PostgreSQL
[17:59:44] <Myon> idle = kept open by pgbouncer
[18:00:35] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[18:00:41] <mage> sorry I don't get it.. should I configure a timeout on the PostgreSQL or on the pgbouncer side?
[18:01:11] <Myon> I thought about pgbouncer
[18:01:20] <Myon> but really, what problem do you want to solve?
[18:01:33] <mage> ah this one idle_transaction_timeout
[18:03:09] <mage> Nextcloud is running with php-fpm and one process is created for every file upload (with one pg connection)
[18:03:33] <mage> and when the pool is exhausted $users are getting tons of errors in the web interface
[18:03:57] <mage> but I think I'll disable pgbouncer for Nextcloud
[18:04:41] *** Quits: mattil (~mattil@d54vzntjl0nz0pwq99y-4.rev.dnainternet.fi) (Remote host closed the connection)
[18:05:07] *** Joins: mattil (~mattil@d54vzntjl0nz0pwq99y-4.rev.dnainternet.fi)
[18:05:59] *** Joins: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net)
[18:06:20] *** Quits: ArchNoob (~archnoob@user/archnoob) (Read error: Connection reset by peer)
[18:08:12] *** Quits: cs (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec) (Read error: Connection reset by peer)
[18:08:46] *** Joins: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec)
[18:09:53] *** Quits: mattil (~mattil@d54vzntjl0nz0pwq99y-4.rev.dnainternet.fi) (Ping timeout: 260 seconds)
[18:10:50] *** Joins: ArchNoob (~archnoob@196.249.99.58)
[18:12:40] *** Joins: randir (~randir@93.159.239.42)
[18:13:48] *** Quits: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[18:14:02] *** Joins: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net)
[18:14:37] *** Joins: ArchNoob_ (~archnoob@169.255.185.105)
[18:15:19] *** Quits: tnewman (~tnewman@118.150.44.48) (Quit: Ping timeout (120 seconds))
[18:15:38] *** Joins: tnewman (~tnewman@118.150.44.48)
[18:16:44] *** Quits: ArchNoob (~archnoob@196.249.99.58) (Ping timeout: 252 seconds)
[18:16:52] *** Quits: triberio13 (~triberio1@195.53.32.158) (Quit: Konversation terminated!)
[18:22:45] *** Joins: rewrit3 (~rewrit3@user/rewrit3)
[18:30:18] *** Quits: walterwhip (~walterwhi@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[18:31:23] *** Joins: xocolatl_ (~xocolatl@14.149.88.79.rev.sfr.net)
[18:31:28] *** Quits: xocolatl (~xocolatl@14.149.88.79.rev.sfr.net) (Ping timeout: 260 seconds)
[18:33:00] *** Joins: mattil (~mattil@87-92-46-217.bb.dnainternet.fi)
[18:33:02] *** Joins: EvanCarroll (~ecarroll@4.78.9.75)
[18:33:18] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[18:33:58] *** Joins: ArchNoob (~archnoob@196.249.96.39)
[18:34:43] *** Quits: podverse-mitch (~mitch-pod@c-73-176-137-149.hsd1.il.comcast.net) (Ping timeout: 268 seconds)
[18:35:12] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[18:36:08] *** Quits: ArchNoob_ (~archnoob@169.255.185.105) (Ping timeout: 246 seconds)
[18:37:10] *** Joins: podverse-mitch (~mitch-pod@c-73-176-137-149.hsd1.il.comcast.net)
[18:38:09] *** Quits: fruity_tomato (~fruity_to@user/fruity-tomato/x-3541336) (Quit: Client closed)
[18:38:23] *** Quits: mattil (~mattil@87-92-46-217.bb.dnainternet.fi) (Ping timeout: 260 seconds)
[18:38:25] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 248 seconds)
[18:40:45] *** Joins: cs (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec)
[18:41:28] *** Joins: ovnicraft_ (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[18:41:28] *** Quits: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec) (Read error: Connection reset by peer)
[18:45:23] *** Quits: cs (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec) (Ping timeout: 260 seconds)
[18:50:59] *** Joins: Likorn (~Likorn@c114-150.icpnet.pl)
[18:53:21] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Ping timeout: 248 seconds)
[18:54:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[18:55:01] <depesz> Myon: sorry for singling you out, but any chance you know how to use pgl_ddl_deploy?
[18:55:14] <depesz> you are listed as contributor, so i figured I'll ask you
[18:56:01] <Myon> depesz: tbh I have no idea what the package is doing, I was just helping Jeremy get it packaged
[18:56:07] <depesz> :(
[18:56:50] *** Joins: asymmentric (~asymmentr@223.189.103.103)
[18:57:45] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:59:50] *** Joins: iliv (~iliv@93-77-147-152.lvv.volia.net)
[19:00:01] *** Joins: gambl0re (~gambl0re@2607:fea8:a59f:c360::7377)
[19:01:33] *** Quits: tnewman (~tnewman@118.150.44.48) (Quit: Ping timeout (120 seconds))
[19:01:44] *** Quits: Siecje (~Siecje@97.111.200.190) (Remote host closed the connection)
[19:01:50] *** Joins: tnewman (~tnewman@118.150.44.48)
[19:02:40] <depesz> I don't understand what is happening/why it's not working, and the docs are less than helpful
[19:02:47] *** Joins: dionysus69 (~Thunderbi@176.221.255.69)
[19:03:42] *** Quits: ArchNoob (~archnoob@196.249.96.39) (Remote host closed the connection)
[19:04:34] *** Quits: iliv (~iliv@93-77-147-152.lvv.volia.net) (Changing host)
[19:04:34] *** Joins: iliv (~iliv@user/iliv)
[19:22:07] *** Joins: texasmynsted (~texasmyns@99.96.221.112)
[19:22:28] <texasmynsted> I am not sure the best words to describe this for googling...
[19:22:31] *** Joins: Csm319_ (~csm3105@31.4.136.151)
[19:22:50] *** Quits: Brewster_ (~Brewster@us.8bitshort.com) (Changing host)
[19:22:50] *** Joins: Brewster_ (~Brewster@user/brewster)
[19:22:50] *** Brewster_ is now known as Brewster
[19:24:01] <texasmynsted> I would like to write a user defined function or procedure to identify data discrepancies. I noticed when attempting to remove some _normalized_ data that I could not without violating an FK.
[19:25:11] *** Quits: Csm319_ (~csm3105@31.4.136.151) (Read error: Connection reset by peer)
[19:25:17] *** Quits: csm3105 (~csm3105@143.red-83-48-84.staticip.rima-tde.net) (Ping timeout: 268 seconds)
[19:25:37] <texasmynsted> That sounds fine but what happened was there were data that appeared to belong to two different foreign relations that conflict.
[19:26:09] *** Quits: gleu (~guillaume@2a01cb0c0e54b8007e39e75cb4390e1c.ipv6.abo.wanadoo.fr) (Quit: Leaving.)
[19:26:16] <texasmynsted> I am not sure how the database could get into that state unless some data were manually changed or manually loaded.
[19:26:53] *** Joins: Csm319_ (~csm3105@143.red-83-48-84.staticip.rima-tde.net)
[19:27:16] <texasmynsted> What would a procedure be called that goes through all the data in the database identifying records that do not make sense?
[19:27:44] <texasmynsted> I plan to add this procedure to other data hygiene procedures.
[19:28:14] <Myon> select from t1 where not exists (select from t2 where t1.t2_id = t2.id);
[19:28:36] <Myon> set enable_indexscan = off; set enable_indexonlyscan = off; set enable_bitmapscan = off;
[19:30:05] <Myon> is the in-database FK formally violated, or just some app-level one?
[19:37:08] *** Quits: fordfrog (~fordfrog@gentoo/developer/fordfrog) (Quit: Leaving)
[19:37:29] *** Quits: cerill (~cerill@h-155-4-198-153.A785.priv.bahnhof.se) (Quit: Client closed)
[19:38:18] *** Joins: mizi_ (~mizi@user/mizi)
[19:38:43] *** Quits: randir (~randir@93.159.239.42) (Remote host closed the connection)
[19:39:04] *** Joins: Asgaroth (~Asgaroth@93.107.191.92)
[19:43:57] *** Quits: bindu (~bindu@user/bindu) (Quit: Leaving)
[19:44:13] *** Joins: bindu (~bindu@user/bindu)
[19:45:01] *** Quits: austb (~austb@c-73-240-245-80.hsd1.or.comcast.net) (Ping timeout: 268 seconds)
[19:47:41] <texasmynsted> the FKs are _not_ violated. Only when I try to remove data would the FKs be violated. departments are associated with a facility which is associated with a network.
[19:48:17] *** Quits: EvanCarroll (~ecarroll@4.78.9.75) (Ping timeout: 248 seconds)
[19:50:22] <texasmynsted> sigh. It just gets more convoluted. The net is that one table shows data associated with one network, and another table with another network. I need to remove one of the networks but
[19:50:52] <texasmynsted> because some data is associated with the wrong network, this would violate the FK of one or more tables.
[19:51:48] *** Quits: asymmentric (~asymmentr@223.189.103.103) (Quit: Connection closed)
[19:51:57] *** Joins: randir (~randir@95-31-138-202.broadband.corbina.ru)
[19:53:07] <texasmynsted> oh interesting. what does removing index scan do? Does it force a table scan and not trust the indexes?
[19:53:31] <Myon> yes
[19:53:52] *** Quits: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net) (Ping timeout: 272 seconds)
[19:54:41] <texasmynsted> Is there something to run to "validate" the indexes and constraints?
[19:56:00] <Myon> for FK see above
[19:56:04] <Myon> for indexes, REINDEX
[19:56:06] <texasmynsted> I feel like something like what I am wanting must exist as an extension or something. I just do not know what it would be called.
[19:56:37] <Myon> see also https://github.com/df7cb/pg_dirtyread/blob/master/contrib/index_duplicates.sql https://github.com/df7cb/pg_dirtyread/blob/master/contrib/foreign_key.sql
[19:56:46] <texasmynsted> Maybe Reindex verbose or something?
[19:57:29] <texasmynsted> I am guessing reindex is going to work always, but maybe not tell me where there are problems.
[19:58:12] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[19:59:05] *** Quits: Moonsilence (~Moonsilen@mx2.intend.de) (Ping timeout: 246 seconds)
[20:00:26] *** Joins: ivii (~ivan@user/ivii)
[20:02:11] *** Joins: Sh4dowmonk (~textual@dynamic-046-114-171-017.46.114.pool.telefonica.de)
[20:02:12] <texasmynsted> (read through pg_dirtyread a bit).
[20:02:51] *** Joins: EvanCarroll (~ecarroll@172.58.103.214)
[20:03:03] *** Quits: Csm319_ (~csm3105@143.red-83-48-84.staticip.rima-tde.net) (Quit: Leaving)
[20:03:30] *** Joins: magla (~gelignite@d5363ac5.access.ecotel.net)
[20:03:59] *** Quits: podverse-mitch (~mitch-pod@c-73-176-137-149.hsd1.il.comcast.net) (Ping timeout: 246 seconds)
[20:05:22] *** Quits: idontnee_ (~idontneed@h-85-24-184-105.A189.priv.bahnhof.se) (Quit: Leaving...)
[20:06:48] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[20:09:13] <texasmynsted> Reindex just works, and verbose just gives runtime and which indexes were rebuilt.
[20:09:14] *** Joins: podverse-mitch (~mitch-pod@c-73-176-137-149.hsd1.il.comcast.net)
[20:10:35] <texasmynsted> Somehow I need to read out across multiple table relationships. I suppose without indexes as you suggested.
[20:11:05] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[20:11:20] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[20:11:43] *** Joins: asymmentric (~asymmentr@223.189.103.103)
[20:11:45] *** Quits: xinming (~xinming@115.219.39.109) (Ping timeout: 248 seconds)
[20:11:48] *** Quits: mrwick (~mrwick@user/mrwick) (Ping timeout: 260 seconds)
[20:12:06] <texasmynsted> Hmm. or maybe add network with an FK to the network table for all children... That feels wrong though.
[20:12:10] *** Joins: xinming (~xinming@115.219.39.109)
[20:13:22] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[20:13:41] *** Quits: maret (~maret@nat-88-212-37-89.antik.sk) (Read error: Connection reset by peer)
[20:14:30] *** Joins: ivii (~ivan@user/ivii)
[20:14:46] *** Joins: maret (~maret@nat-88-212-37-89.antik.sk)
[20:16:56] *** Quits: podverse-mitch (~mitch-pod@c-73-176-137-149.hsd1.il.comcast.net) (Ping timeout: 246 seconds)
[20:17:49] *** Quits: asymmentric (~asymmentr@223.189.103.103) (Quit: Connection closed)
[20:19:49] *** Quits: magla (~gelignite@d5363ac5.access.ecotel.net) (Quit: Stay safe!)
[20:21:04] *** Joins: shiranaihito_ (~textual@123-192-192-149.dynamic.kbronet.com.tw)
[20:22:01] *** Quits: maxzor (~maxzor@2a01cb04054faa00b0d6c6caafc0c1f8.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[20:22:23] *** Joins: podverse-mitch (~mitch-pod@c-73-176-137-149.hsd1.il.comcast.net)
[20:23:28] *** Quits: shiranaihito (~textual@2001-b011-4011-34b6-01ac-a49c-9c8e-95ba.dynamic-ip6.hinet.net) (Ping timeout: 260 seconds)
[20:23:55] *** Quits: Sh4dowmonk (~textual@dynamic-046-114-171-017.46.114.pool.telefonica.de) (Quit: Textual IRC Client: www.textualapp.com)
[20:24:34] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[20:24:38] *** Joins: hightower3 (~hightower@141-136-179-127.dsl.iskon.hr)
[20:25:03] <hightower3> Hey folks just a basic question, if I define a unique constraint on (field1, field2), does that implicitly also create an index on them?
[20:25:36] *** Joins: ivii (~ivan@user/ivii)
[20:25:58] <Snow-Man> yes
[20:26:04] <hightower3> great, thanks
[20:26:43] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[20:28:47] <hightower3> Does it create a joint index somehow, or it creates separate indices on both fields?
[20:28:56] <hightower3> s/both/each/
[20:35:13] *** Quits: held (~heldchen@user/held) (Ping timeout: 248 seconds)
[20:35:52] *** Joins: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c)
[20:36:51] <ilmari> it creates a single multi-column index
[20:37:56] *** Quits: Likorn (~Likorn@c114-150.icpnet.pl) (Quit: WeeChat 3.4.1)
[20:42:21] *** Joins: ivii (~ivan@user/ivii)
[20:44:56] *** Quits: EvanCarroll (~ecarroll@172.58.103.214) (Ping timeout: 245 seconds)
[20:45:03] *** Joins: TomyWork (~TomyLobo@p200300e80f158200f12e0ecc7b19eb6b.dip0.t-ipconnect.de)
[20:46:47] <hightower3> ++
[20:48:22] *** Joins: fordfrog (~fordfrog@gentoo/developer/fordfrog)
[20:49:50] *** Quits: n0fun (~jack@mue-88-130-48-193.dsl.tropolys.de) (Ping timeout: 246 seconds)
[21:01:19] *** Joins: zer0bitz (~zer0bitz@2001:2003:f750:a200:5019:823:a50e:5ee6)
[21:04:58] *** Quits: wolfshappen (~waff@irc.furworks.de) (Read error: Connection reset by peer)
[21:05:32] *** Joins: Xof (~Xof@157-131-136-66.dedicated.static.sonic.net)
[21:06:46] *** Joins: asymmentric (~asymmentr@223.189.103.103)
[21:07:25] *** Joins: held (~heldchen@user/held)
[21:09:51] *** Quits: asymmentric (~asymmentr@223.189.103.103) (Client Quit)
[21:10:12] *** Quits: sreve (~quassel@p4ff44df3.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[21:10:14] *** Joins: asymmentric (~asymmentr@223.189.103.103)
[21:15:37] *** Joins: sreve (~quassel@p54a7110f.dip0.t-ipconnect.de)
[21:15:37] *** Quits: TomyWork (~TomyLobo@p200300e80f158200f12e0ecc7b19eb6b.dip0.t-ipconnect.de) (Changing host)
[21:15:37] *** Joins: TomyWork (~TomyLobo@user/TomyLobo)
[21:20:39] *** Quits: rewrit3 (~rewrit3@user/rewrit3) (Quit: rewrit3)
[21:22:36] *** Quits: sreve (~quassel@p54a7110f.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[21:24:46] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:84f3:9cd1:2f26:201d) (Remote host closed the connection)
[21:27:06] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:d157:eebd:f395:11a5)
[21:30:28] *** Quits: kakashiA1 (~kakashi@ip-037-201-198-071.um10.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[21:31:25] *** Joins: Auron (Auron956@user/auron)
[21:31:59] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:d157:eebd:f395:11a5) (Ping timeout: 260 seconds)
[21:32:43] *** Joins: jnnnnnnnnn (~jnnnnnnnn@65.99.151.178)
[21:34:47] *** Quits: RangerRick (~quassel@99-69-21-21.lightspeed.rlghnc.sbcglobal.net) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[21:36:37] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[21:38:00] *** Joins: ba|ch` (~user@p200300f3a7089c03f4d8bbbe08262675.dip0.t-ipconnect.de)
[21:38:14] *** Joins: econo (uid147250@user/econo)
[21:38:32] *** Joins: RangerRick (~quassel@99-69-21-21.lightspeed.rlghnc.sbcglobal.net)
[21:39:53] *** Quits: ba|ch (~user@p200300f3a7089c14adce12c8646f3465.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[21:40:25] *** Quits: Floflobel_ (~Floflobel@cosium-fo-152-18.fib.nerim.net) (Remote host closed the connection)
[21:40:42] *** Joins: EvanCarroll (~ecarroll@172.58.103.214)
[21:43:29] *** Joins: kakashiA1 (~kakashi@ip-037-201-198-071.um10.pools.vodafone-ip.de)
[21:43:31] *** Quits: asymmentric (~asymmentr@223.189.103.103) (Ping timeout: 250 seconds)
[21:48:21] *** Quits: kakashiA1 (~kakashi@ip-037-201-198-071.um10.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[21:49:25] *** Quits: gambl0re (~gambl0re@2607:fea8:a59f:c360::7377) (Ping timeout: 240 seconds)
[21:51:51] *** Joins: john_johnk (~Thunderbi@2a02-8428-013e-4001-34c0-6b46-48d2-8b78.rev.sfr.net)
[21:52:28] *** Joins: Likorn (~Likorn@c114-150.icpnet.pl)
[21:53:48] *** Quits: jnnnnnnnnn (~jnnnnnnnn@65.99.151.178) (Quit: Textual IRC Client: www.textualapp.com)
[21:55:17] *** Joins: mastermind (~mastermin@83.215.245.171)
[21:56:17] *** Joins: asymmentric (~asymmentr@223.189.103.103)
[21:56:20] *** Quits: cation (cation@user/cation) (Quit: Leaving)
[21:56:40] *** Joins: cation (cation@user/cation)
[21:57:22] *** Quits: pglife_bot (~pglife@momjian.us) (Ping timeout: 272 seconds)
[21:57:23] *** Quits: bmomjian (~bruce@momjian.us) (Ping timeout: 246 seconds)
[22:00:21] *** Joins: kakashiA1 (~kakashi@ip-037-201-198-071.um10.pools.vodafone-ip.de)
[22:02:12] *** Quits: asymmentric (~asymmentr@223.189.103.103) (Quit: Connection closed)
[22:02:30] *** Joins: momomo (~momomo@user/momomo)
[22:02:49] *** Joins: mthall_ (~quassel@mail.thalliman.com)
[22:03:04] *** Quits: mthall (~quassel@mail.thalliman.com) (Ping timeout: 272 seconds)
[22:07:53] *** Quits: mastermind (~mastermin@83.215.245.171) (Ping timeout: 260 seconds)
[22:11:58] *** Joins: bmomjian (~bruce@momjian.us)
[22:12:24] *** Quits: TomyWork (~TomyLobo@user/TomyLobo) (Quit: Leaving)
[22:15:05] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:d157:eebd:f395:11a5)
[22:15:29] *** Quits: nviroepah9832 (~q3lont@94.131.133.177) (Ping timeout: 268 seconds)
[22:15:34] *** Quits: carragom (~textual@201.204.94.76) (Quit: Textual IRC Client: www.textualapp.com)
[22:16:36] *** Quits: held (~heldchen@user/held) (Ping timeout: 245 seconds)
[22:17:42] *** Joins: pglife_bot (~pglife@momjian.us)
[22:19:45] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:d157:eebd:f395:11a5) (Ping timeout: 248 seconds)
[22:21:18] *** Quits: dionysus69 (~Thunderbi@176.221.255.69) (Ping timeout: 260 seconds)
[22:21:37] *** Quits: fordfrog (~fordfrog@gentoo/developer/fordfrog) (Quit: Leaving)
[22:23:20] *** Quits: kakashiA1 (~kakashi@ip-037-201-198-071.um10.pools.vodafone-ip.de) (Ping timeout: 272 seconds)
[22:24:21] *** Joins: funhouse (~funhouse@user/funhouse)
[22:24:36] *** Quits: maret (~maret@nat-88-212-37-89.antik.sk) (Quit: maret)
[22:25:59] *** Joins: fordfrog (~fordfrog@gentoo/developer/fordfrog)
[22:27:12] *** Quits: EvanCarroll (~ecarroll@172.58.103.214) (Ping timeout: 268 seconds)
[22:37:23] *** Joins: held (~heldchen@user/held)
[22:44:33] *** Quits: Likorn (~Likorn@c114-150.icpnet.pl) (Quit: WeeChat 3.4.1)
[22:44:59] *** Joins: Likorn (~Likorn@c114-150.icpnet.pl)
[22:49:48] *** Quits: psoo (~psoo@dslb-002-202-190-148.002.202.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[22:49:59] *** Joins: inak (~akD1@228-134-237-24.gci.net)
[22:56:11] *** Quits: mizi_ (~mizi@user/mizi) (Ping timeout: 246 seconds)
[22:58:42] *** Joins: wolfshappen (~waff@irc.furworks.de)
[22:59:22] *** Quits: michalz (~michalz@185.246.204.104) (Remote host closed the connection)
[23:01:13] <dfg> how come timerange isnt a core type? the docs show you how to construct it yourself, but one has to wonder why it was omitted from the builtin range types
[23:01:43] <Berge> dfg: What do you mean by timerange?
[23:02:31] <Berge> dfg: interval is a type, and the range types for timestamptz (and timestamp, don't use it) are bulit-in
[23:03:14] <ilmari> Berge: presumably a range with subtype = time
[23:03:29] <Berge> tsrange?
[23:03:33] <Berge> ah, _just_ time?
[23:03:38] <ilmari> time <> timestamp
[23:03:41] <dfg> no that's a timestamp, right, just a range of times
[23:03:53] <dfg> https://www.postgresql.org/docs/current/rangetypes.html#RANGETYPES-DEFINING the docs show you how to DIY at the end of this section
[23:04:10] <Berge> yeah, sorry
[23:04:34] <Berge> I've never had the use for that, I think
[23:05:37] <dfg> i just had to steer someone from using a json column to describe restaurant hours of operation, they had an array like
[23:05:42] <dfg> {{"day":"Mon","fromHours":14,"fromMinutes":30,"toHours":14,"toMinutes":30},...]
[23:06:10] <Zr40> you can't use that to represent "opens at 18:00, closes at 02:00"
[23:06:24] <dfg> so i put together this fiddle using a timerange, but i found it disappointing i had to construct the timerange manually https://www.db-fiddle.com/f/bG9JTjkVoPu8DDBK1qTEkm/0
[23:07:02] <Berge> Representing opening times isn't trivial
[23:07:10] <Zr40> s/opening//
[23:07:14] <Berge> true
[23:08:05] <dfg> i dont disagree, but my question is: why do the docs describe how to construct a timerange type manually, instead of including the type in the built-in list of range types
[23:08:17] *** Quits: AceSlash (~slash@2a01:e0a:432:c050:cd12:393c:3664:2a6e) (Ping timeout: 248 seconds)
[23:08:27] <Berge> Perhaps because it isn't trivial? (-:
[23:08:34] <Berge> I don't know, though.
[23:09:26] *** Joins: EvanCarroll (~ecarroll@172.58.103.214)
[23:09:59] <Zr40> a true timerange that doesn't include a date should wrap, and ranges don't do that
[23:11:01] <dfg> 🤔
[23:11:15] <Zr40> that's the 18:00 to 02:00 range I mentioned
[23:11:49] <Zr40> you can't construct that range in postgres because the lower bound must be than the upp
[23:11:56] <Zr40> must not be greater than the upper bound*
[23:12:11] <StuckMojo> ??jsquery
[23:12:11] <pg_docbot> http://www.pgcon.org/2014/schedule/events/696.en.html :: https://www.youtube.com/watch?v=2dQjfdXxtJw
[23:12:12] <pg_docbot> https://github.com/postgrespro/jsquery
[23:12:34] <dfg> ahh i see your point. do you have any suggestions for a better alternative?
[23:13:07] <Berge> dfg: What are you representing? Opening times specifically?
[23:13:23] <Berge> How do you want it to work, and what sort of queries will you do?
[23:14:38] *** Quits: odnes (~odnes@5-203-209-2.pat.nym.cosmote.net) (Quit: Leaving)
[23:15:34] <dfg> this not even my project, i believe they were just storing data on a restaurant like their menu, item prices, and hours of operation
[23:15:45] <dfg> *restaurants, lots of restaurants
[23:16:18] <dfg> got nerd sniped a little bit thinking about the proper way to describe those hours
[23:16:39] <dfg> but idk what sort of queries they plan on doing against it
[23:20:34] *** Joins: n0fun (~jack@mue-88-130-48-193.dsl.tropolys.de)
