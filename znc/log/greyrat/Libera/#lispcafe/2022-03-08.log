[00:21:32] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[00:24:54] <hayley> Good morning everyone!
[00:25:16] *** Joins: kevingal (~quassel@37.228.202.100)
[00:25:36] <drakonis> https://i.imgur.com/oN2zLka.gifv behold, a python in a nutshell
[00:25:37] -ixelp- My house
[00:29:00] *** Quits: kevingal (~quassel@37.228.202.100) (Client Quit)
[00:38:11] <waleee> hayley: seen this? https://old.reddit.com/r/rust/comments/t8szom/media_yall_ever_try_to_do_something_really_cool/
[00:38:12] -ixelp- [Media] Y'all ever try to do something really cool but your crate ends up looking like this : rust
[00:38:42] <hayley> I hadn't until now.
[00:41:53] *** Joins: kevingal (~quassel@80.233.49.178)
[00:42:37] *** Joins: rogersm (~rogersm@90.166.180.250)
[00:56:52] <pl> https://twitter.com/apolyakova/status/1500939189302538242
[00:59:40] * hayley reads r/programming
[01:00:03] <hayley> "This selection code looks terrible, why not use xpath?" "Ah, yes, because as we all know, stringly typed, unsafe crap is always preferable to a statically typed API. /s"
[01:00:20] <pl> oh god...
[01:00:24] <pl> I actually like XPath
[01:00:36] <hayley> Funny, I want to use compilers to give one-more-re-nightmare type inference magic.
[01:00:38] <pl> but that like is seriously attacked by a horrible little product from Switzerland
[01:00:44] <hayley> s/compilers/compiler macros/
[01:01:13] <hayley> e.g. (omrn:first-match "«a»b" something) should be of type (OR NULL (SIMPLE-VECTOR 4)) with my API.
[01:01:59] <hayley> But my little poll suggests that people want one-more-re-nightmare on Quicklisp sooner rather than later. sigh
[01:02:56] <hayley> DO-MATCHES is smart, though, and provides expands appropriately for SBCL to do type inference.
[01:05:05] <hayley> But, of course that isn't really a solution, because the compiler macro can only detect a string literal where it wants it. A real type system that could say anything about the type of query results would likely be neck deep in dependent types.
[01:05:30] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[01:05:36] <hayley> e.g. (let ((s "blah")) (omrn:first-match s "blah")) infers differently to (omrn:first-match "blah" "blah")
[01:07:32] <hayley> pl: The punchline of all this, is that regex in CL is a "compiled language", and it is an "interpreted language" in static languages.
[01:10:13] <pl> indeed
[01:11:43] <shka> well https://github.com/NTSFka/template_regex
[01:11:44] -ixelp- GitHub - NTSFka/template_regex: C++ regular expression library implemented using templates
[01:12:15] <shka> not nearly as handy but here it is 
[01:14:08] * hayley has competition
[01:15:08] <shka> implementing this kind of stuff with template is annoying 
[01:16:06] <shka> but is possible 
[01:16:27] <shka> in theory everything is possible with templates, in a very painful and annoying way
[01:16:28] <hayley> I could make a one-more-re-nightmare poster, like the 42nd-at-threadmill poster, which solely relies on that joke.
[01:16:50] <shka> good night everyone 
[01:17:29] <hayley> Night.
[01:25:49] *** Quits: rogersm (~rogersm@90.166.180.250) (Quit: Leaving...)
[01:32:58] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 260 seconds)
[01:55:00] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[02:09:10] <hayley> https://www.youtube.com/watch?v=hZRlKeC2d3w Humour from when we had the swine flu pandemic.
[02:09:11] -ixelp- The Chaser's War on Everything - Season 3 Episode 02 - YouTube
[02:16:50] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Quit: Aurora_v_kosmose)
[02:26:29] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[02:46:12] *** Quits: kevingal (~quassel@80.233.49.178) (Ping timeout: 240 seconds)
[02:46:33] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:85ab:4026:a390:3cc7)
[02:56:20] <hayley> https://www.youtube.com/watch?v=vksB2S90FVY Pictured: gilberth reading BYOL
[02:56:21] -ixelp- Uncle Roger HATE Jamie Oliver Thai Green Curry - YouTube
[02:57:36] <moon-child> https://jabde.com/wp-content/uploads/2022/03/MinimumNyquistSampling.pdf
[02:59:49] <hayley> lol
[03:15:25] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[03:24:51] <moon-child> oh, reminds me of this classic https://0x0.st/oPGU.pdf
[03:26:48] <hayley> "I still don’t know anything about how neural networks work, and as far as I can tell, neither does anyone else."
[03:27:23] <hayley> "The initial set of hyperparameters used a value of 0.9 for decay and a value of 10^−5 for epsilon, because that’s what pix2pix did. The results were, hey, wait, this is the wrong section for that."
[03:31:08] <gilberth> moon-child: I like the conclusion.
[03:32:29] <gilberth> To the Tiffany Sampling Problem I cannot relate as it's usually me talking all the time.
[03:35:00] <hayley> https://pages.cs.wisc.edu/~kovar/hall.html
[03:35:01] -ixelp- Kovar/Hall
[03:35:11] <hayley> "Electron Band Structure In Germanium, My Ass"
[04:15:20] <hayley> "Bruh my lecturer pronounces header file like "pedophile""
[04:15:21] <hayley> O.o
[04:16:01] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:85ab:4026:a390:3cc7) (Remote host closed the connection)
[04:16:08] <moon-child> is his name peter file?
[04:16:19] <gilberth> This sure is regression. My bench with mcclim as I found it with quicklisp takes 23s and is broken. The version of macclim circa 2006 with CMUCL 18e takes like 3s remote! *sigh*
[04:17:37] <gilberth> * mcclim rather :-)
[04:29:38] <hayley> (describe (lambda (x) (one-more-re-nightmare:first-match "«a|aa»+" x))) ⇒ Derived type: (FUNCTION (T) (VALUES (OR (SIMPLE-VECTOR 4) NULL) &OPTIONAL))
[04:30:39] <hayley> Look ma, type inference on regexen.
[04:31:39] <gilberth> You still adhere to the idea to cons vectors for multiple values?
[04:31:56] <hayley> Seemingly.
[04:32:47] <gilberth> You seem to have plenty of cycles or a damn good compiler.
[04:32:55] <hayley> It's nice that SBCL can infer types for G in (declaim (inline f)) (defun f (n) (make-array n)) (defun g () (make-array 42)); that's the trick here. Not magic, it inlines F and does type inference on the result.
[04:34:21] <hayley> gilberth: Yes, I have plenty of cycles spare from using a damn good compiler.
[04:34:48] <gilberth> Good for you.
[04:35:01] <hayley> Once I was doing some GPU work, and once thought "eh, this is more code and it's only 10% faster." 10% faster was like another 10× compared to my competitor on a CPU.
[04:45:54] <scymtym> gilberth: can you share the benchmark? i would interested in things like recording being enabled/disabled and whether the lines are FORMATted to the stream pane(?) or to a string buffer (and yes, there have been performance regressions in upstream mcclim)
[04:47:03] <hayley> I think gilberth usually did something like (dotimes (i 100000) (format t "~&~:r" i)) over a remote X connection.
[04:47:07] <gilberth> scymtym: (setf *s* (open-window-stream)) (time (dotimes (i 10000) (print i *s*)))
[04:47:27] <scymtym> gilberth: thanks
[04:47:43] <gilberth> hayley: Yep. I do. This time just using PRINT to get the pretty printer out of the equation.
[04:48:17] <hayley> "Never ask a man his salary" "Never ask a woman her age" "Never ask gilberth when Free-CLIM will be released"
[04:48:41] <gilberth> Indeed.
[04:49:14] <hayley> gilberth: I take it you've heard me joke about how regexen in CL are now "a compiled language"?
[04:49:33] <gilberth> But remote I only use when I need Linux. As my Linux box is remote.
[04:50:25] <hayley> I consider this to be enough compile-time magic: https://plaster.tymoon.eu/view/2969
[04:52:00] <hayley> Though, I only added all this magic because one-more-re-nightmare feeding SBCL makes for slow(er) compile times.
[04:52:56] <gilberth> I could have my wife bring me my X11R4 terminal which works over 10Mbps ethernet over coax. That would be the right kind of display server to benchmark with.
[04:53:38] <gilberth> Though I would need to find some network adapter for that.
[04:54:23] *** Quits: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Remote host closed the connection)
[04:54:54] * hayley does her first wontfix for one-more-re-nightmare ):
[04:55:11] <hayley> (It's the "can you make CL-PPCRE functions" issue which will never happen.)
[04:55:58] <gilberth> I believe it's a VT1200.
[04:58:01] <hayley> Still, no pressure to publish if I were to put up one-more-re-nightmare on Quicklisp?
[04:58:03] <hayley> Not that I know what I'm supposed to do for that. hm.
[04:58:24] * |3b| always just lets users deal with it if they want something in ql :p
[04:58:59] * gilberth has a web site.
[04:59:41] <gilberth> hayley: I am in CLIM mode at the moment.
[04:59:43] <|3b|> (anyone can submit a project for inclusion into ql, just file an issue on quicklisp/quicklisp-projects on github. only thing original author might have to do is make sure .asd file has the required metadata)
[05:00:54] <gilberth> And I would need put slashes in system names, which is very silly as you can't put slashes into filenames with UNIX.
[05:01:47] * |3b| thought the whole point of slashes in system names was that you couldn't put them in file names
[05:02:08] <gilberth> I mean how are those .asd files supposed to be found?
[05:02:57] <|3b|> asdf looks for .asd matching part before first /
[05:03:14] <gilberth> Even more brilliant.
[05:03:29] <|3b|> so you can put multiple systems in one asd without risking finding an asd for some other project which happens to have a common prefix, or without requireing users to manually load the containing asd
[05:04:01] <gilberth> Oh and when I don't want to put multiple system definitions into one .asd file?
[05:04:02] <|3b|> if you don't put multiple systems in one asd, you don't need / in the system names
[05:04:56] <|3b|> just use same name for system and .asd file
[05:05:17] <gilberth> Which is what I do.
[05:07:10] <random-nick> hayley: there's this blogpost about publishing on quicklisp, I don't know if it's entirely up to date tho http://blog.quicklisp.org/2015/01/getting-library-into-quicklisp.html
[05:07:11] -ixelp- Quicklisp news: Getting a library into Quicklisp
[05:07:19] <hayley> I read it, thanks.
[05:07:52] * hayley wonders if the name one-more-re-nightmare is still too silly for a RE library.
[05:08:21] <hayley> "Won't add: Discipline Global Mobile has threatened to sue me if I add it"
[05:11:24] * |3b| doesn't think it is particularly silly, and wonders if RE libs have different limits for silliness than other libraries
[05:17:13] <hayley> https://github.com/quicklisp/quicklisp-projects/issues/2142 welp
[05:17:14] -ixelp- Please add one-more-re-nightmare · Issue #2142 · quicklisp/quicklisp-projects · GitHub
[05:18:09] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 256 seconds)
[05:21:28] * |3b| wonders about that claim "most users of cl-ppcre use the custom s-expression syntax". i never have (i also wouldn't complain about a regex lib that only accepted s-exp syntax though, so my data point doesn't affect the conclusion)
[05:22:16] <hayley> Yes, I don't buy that either.
[05:26:29] * hayley gets screwed over while picking assignment groups
[05:27:47] <hayley> Lecturer: "After the results of the vote, we decided you can pick your own groups." Someone I was planning to work with: "The teacher in this class [as I go to a different class, but it is not an issue] made me join a group with some random people."
[05:27:47] <kakuhen> why do people hate dynamic types again
[05:28:04] <hayley> Hard to reason about for the programmer and compiler, usually.
[05:28:08] <kakuhen> i mentioned to someone how amusing it was that CCL generated some 2005 lines of assembly for my function that correlates a joint stereo signal to stereo again
[05:28:13] <kakuhen> but when i gave explicit types for the vectors
[05:28:19] <kakuhen> assembly output is now 900 lines
[05:28:35] <kakuhen> i thought it was a nice example of "optimization" but one of my friends insists "see!! dynamic types bad!!"
[05:28:54] <kakuhen> but dynamics are why i was quickly able to write something that works in the first  place...
[05:29:08] <hayley> As a rule of thumb, you might want to help your Lisp compiler move the type dispatch outside an iteration loop.
[05:29:50] <hayley> i.e. write a macro for which (type-split array ...) = (typecase array ((simple-array single-float ...) ...) ((simple-array double-float ...) ...) ... (t ...))
[05:30:26] <|3b|> people hate dynamic types because thinking is hard :p
[05:30:32] <|3b|> same reason people hate static types
[05:30:42] <kakuhen> hayley: i see; in my case i ended up giving a type for the elements of my vector and using vector-push-extend, which takes in an output typespec iirc
[05:30:46] <|3b|> or any other overgeneralized hate (or like for that matter)
[05:30:56] <kakuhen> and doing those two things reduced the amount of assembly in half
[05:31:16] <kakuhen> i guess in my case the way im iterating is a bit funny because i was lazy and just wanted to MAP over vectors so i can write everything in one line
[05:31:31] <kakuhen> because my function to correlate joint stereo signals deals with 3 specific cases, each of which are a bit special
[05:31:34] <|3b|> that example does in fact show "dynamic types bad" (and "gradual types good") for performance, and "dynamic types good" for developer efficiency
[05:31:50] <kakuhen> two of them are a simple MAP-INTO call, but the case of mid+side signal requires me to do a lot more operations across every element of a vector
[05:32:13] <kakuhen> im assuming that 3rd case is where the majority of assembly code is going into
[05:32:42] <kakuhen> because i have to compute like (2*M - S) / 2 for a single channel, where M and S are vectors of finite (but unknown) length
[05:32:50] <|3b|> but measuring good/bad on multiple axes at once, and thinking of actual specifics of a particular instance of "static types" or "dynamic types", including all the non-type context like compiler quality and other language features of that particular instance, is too much work
[05:33:08] <gilberth> People are more afraid of runtime errors than of overflows.
[05:33:26] <|3b|> so people just pick something to hate that makes them feel better about whetever they are stuck with (or picked for whatever reason) and keep doing what they were doing :)
[05:34:04] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 272 seconds)
[05:34:10] <hayley> As far as I can tell, one-more-re-nightmare has the best type inference for regexen. So much for CL being "dynamically typed".
[05:34:32] <gilberth> |3b|: Yep, perhaps.
[05:35:04] <kakuhen> yeah that's a fair assessment i think
[05:35:12] * hayley reads https://github.com/cabal-club/cable
[05:35:18] <hayley> "Goals: - bridge across different network transports"
[05:35:23] <kakuhen> sbcl, while a bit slower to compile my project, does give me much more succinct output when i disassemble this same joint stereo correlation function
[05:35:28] <gilberth> hayley: You mistyped "regular expressions". Don't let beach see that. Or do you also use "boxen"?
[05:35:28] <|3b|> and even people willing to be more nuanced about things have different brains, so different things work better for them
[05:35:39] *** Joins: aeth (~aeth@user/aeth)
[05:35:44] <hayley> 🎶 Well show me, the way, to the next whiskey bar... 🎶
[05:36:23] <hayley> Must be time to write the one-more-re-nightmare book.
[05:36:27] <kakuhen> oh also here's a fun fact i learned the hard way
[05:36:40] <kakuhen> byte-specifiers in sbcl are really cheap to construct because it stores the ranges in a single cons
[05:36:47] <kakuhen> as long as you do not exceed sb-kernel::size you should be fine
[05:36:54] <kakuhen> but CCL will manually construct the number for the byte range
[05:37:04] <hayley> SBCL will inline (ldb (byte X Y) ...) so you don't construct anything.
[05:37:04] <kakuhen> so if you do something hilariously dumb like (byte 1234567890 0)
[05:37:08] <kakuhen> CCL will instantly consume 4 gb of ram
[05:37:30] <kakuhen> but SBCL will either be fine or complain that 1234567890 exceeds sb-kernel::size if you have a fairly ancient processor i guess
[05:37:32] <hayley> https://www.youtube.com/watch?v=nbtEkZIvMAg
[05:37:33] -ixelp- Alabama Song (Whisky Bar) - YouTube
[05:37:38] <gilberth> People don't realize that there is no free lunch. They believe just because all types are static there won't be any need to check things at runtime. Often statically typed languages are also unsafe languages. So their program runs faster because it would happily overflow when in doubt.
[05:38:07] <White_Flame> and people end up effectively writing type-dispatching interpreters in static languages all the time
[05:38:07] <moon-child> indeed
[05:38:26] <White_Flame> so anything dynamic gets super slow in C
[05:38:33] <hayley> "If Rust is so good, why do so many people write shit Lisp interpreters in it???"
[05:38:38] <moon-child> (and jit, which is a lot more common in dynamically languages, ameliorate runtime dynamism, I think definitionally)
[05:38:43] <moon-child> *ameliorates
[05:39:15] <White_Flame> I wish there was a good lisp jit
[05:39:59] <kakuhen> oh speaking of a lisp jit
[05:40:03] <|3b|> jit isn't inherently different from aot, it just tends to enable some different optimizations since it can have access to runtime info, and doesn't have to worry as much about size
[05:40:14] <hayley> White_Flame: https://i.redd.it/0pmmgg7bb5981.png
[05:40:18] <moon-child> |3b|: yes, exactly
[05:40:25] <kakuhen> i recall some common lisp package on openbsd requiring you to configure your kernel to allow specific programs to be able to have write/execute memory privileges, or something like that
[05:40:39] <kakuhen> apparently openbsd in general disallows programs to have these WX thingies unless they are in a specific path and owned by a specific trusted user
[05:40:53] <kakuhen> this causes a problem for a certain lisp implementation but im forgetting which one
[05:41:07] <moon-child> |3b|: jit exists to take advantage of predictability in nominally dynamic or divergent language features
[05:41:12] <White_Flame> |3b|: and that is an inherent difference.  It creates and maintains data that AOT doesn't have
[05:41:34] <moon-child> devil's advocate: pgo
[05:41:39] <White_Flame> and code replacement strategies are much more involved than AOT
[05:41:47] <hayley> Maybe I should add APL\3000 to the one-more-re-nightmare history section.
[05:41:48] <|3b|> White_Flame: the option is an inherent difference, but nothing requires using it :)
[05:42:06] <random-nick> eh, depends on what one means under jit
[05:42:15] <moon-child> I gave a definition
[05:42:21] <White_Flame> recompiling based on runtime knowledge
[05:42:22] <moon-child> which I think is more useful than other definitions
[05:42:25] <moon-child> but feel free to supply another
[05:42:38] <White_Flame> "JIT" itself is quite a misnomer, though
[05:42:45] <hayley> Eventually I'll add runtime feedback to SIMD (to decide whether to use vectorised scan or not - it's slower for short distances skipped), but feedback will just be used to branch, and nothing will get recompiled.
[05:42:58] <White_Flame> it's not just-in-time, it's when-things-can-optimize--time compilation
[05:43:08] <random-nick> taking jit at face value would mean pretty much all common lisp implementations are jits
[05:43:26] <|3b|> CL are mostly runtime aot :)
[05:43:28] <hayley> Average JIT fan vs "The dynamic incremental compiler of APL\3000" enjoyer
[05:43:42] <moon-child> as |3b| says
[05:43:43] <random-nick> |3b|: I've seen many people use jit to refer to that
[05:43:49] <|3b|> they compile at runtime, when told to compile
[05:44:07] <|3b|> jit implies compiling at runtime, when told to evaluate
[05:44:27] <White_Flame> and more specifcially, compilation is called before execution.  JIT is really PHrC, post-hoc recompilation
[05:44:33] <|3b|> and yeah, nobody agrees on terms :/
[05:44:49] <hayley> beach dispatch for generic functions is JIT.
[05:45:09] <White_Flame> yes, that's the one place where lisps do such things
[05:45:16] <|3b|> true, clos implementations do some JIT
[05:45:22] <random-nick> there are also some terms like "method jit" which some people use to refer to runtime aot
[05:45:28] <White_Flame> but they never recompile the call site, which is where a bunch of for instance JVM optimizations can come from
[05:45:50] <hayley> White_Flame: hold my polymorphic inline caches
[05:46:17] <White_Flame> caches aren't sufficient.  need "virtual function call inlining"
[05:46:24] <moon-child> ^
[05:46:57] <|3b|> lisp makes things blurrier since runtime compilation lets user code (including user-level code included in the standard libs like clos) "jit" things, while the usual interpretation of "jit" suggests the VM or evaluator is doing the jit
[05:47:09] <White_Flame> yep
[05:47:27] <White_Flame> but still, replacement of in-flight functions is impossible in CL, too
[05:47:33] <hayley> PICs do inline methods into the PIC.
[05:47:44] <hayley> https://bibliography.selflanguage.org/_static/pics.pdf p.5
[05:48:30] <White_Flame> skimming that it still seems like just selfmodding a call pointer
[05:48:41] <random-nick> there's also the term "template jit" which refers to a specific optimisation for bytecode VMs where a bunch of blocks of machine code are concatenated to produce native code for some method, where one block of machine code corresponds to one bytecode op 
[05:49:03] <moon-child> White_Flame: 'replacement of in-flight functions' I was thinking about that recently--what would it take to allow reasonably useful user-driven on-stack replacemenet?
[05:49:12] <random-nick> so the term jit itself seems to be very ambiguous
[05:50:22] <|3b|> that "template jit" seems like normal JIT (if done when code is evaluated rather than some arbitrary time in advance), it just happens to be a really bad compiler :)
[05:50:53] <|3b|> and adds no ambiguity to the term "jit"
[05:51:42] <random-nick> I remember seeing some instance where it's used as the primary way of executing bytecodes
[05:52:30] <|3b|> sure, running a compiler on the bytecode is a reasonable way to evaluate bytecode, just like running a compiler on lisp code is reasonable in cl :)
[05:53:40] <|3b|> actually, i guess CL implementations may JIT things by my definition, if they compile everything before evaluation
[05:54:44] <random-nick> there's also the term "tracing jit" which is things like V8 and luajit
[05:55:09] <|3b|> right, tracing is where it starts to take advantage of the increased information available at runtime for optimization
[05:55:11] <random-nick> but it seems common to simply refer to those as "jit"?
[05:56:12] <|3b|> yeah, you don't usually call aot compilers "type inferring compilers" or "register coloring compilers" or whatever other properties it might have in general discussion, they are just "compilers"
[05:56:31] <hayley> Tracing means that the unit of compilation is a "trace" of instructions executed in a loop, rather than a method or function or such.
[05:56:45] <|3b|> similarly you only mention the "tracing" or "template" modifiers of "jit" when it matters (or when you want to advertise them)
[05:57:10] <hayley> e.g. https://static.usenix.org/events/vee06/full_papers/p144-gal.pdf
[05:59:02] <random-nick> don't the most renowned jits compile traces?
[06:00:48] <hayley> Define "renowned". HotSpot is a method JIT.
[06:01:11] <random-nick> v8, luajit, whatever firefox uses
[06:02:14] <|3b|> well, by that definition you already have at least 2 of 3, so sounds like most  :)
[06:02:44] <hayley> V8 is a method JIT, LuaJIT and TraceMonkey are tracing. But idk if TraceMonkey is the newest JIT for Firefox.
[06:05:30] <hayley> https://wiki.mozilla.org/JaegerMonkey apparently is a method JIT. But I still don't know which is used in Firefox nowadays.
[06:05:32] -ixelp- JaegerMonkey - MozillaWiki
[06:06:59] <hayley> https://firefox-source-docs.mozilla.org/js/index.html#javascript-jits manages to be useless for this question.
[06:07:00] -ixelp- SpiderMonkey — Firefox Source Docs documentation
[06:10:38] <hayley> Well, TraceMonkey was killed off a decade ago or so. IonMonkey seems to be a method JIT, but can bail out to an interpreter whenever it feels like it.
[06:10:59] <|3b|> warpmonkey seems to be the current one
[06:11:14] <|3b|> and seems like the general answer is "js JITs are complicated now" :p
[06:11:26] <|3b|> https://hacks.mozilla.org/2020/11/warp-improved-js-performance-in-firefox-83/
[06:11:27] -ixelp- Warp: Improved JS performance in Firefox 83 - Mozilla Hacks - the Web developer blog
[06:11:47] <random-nick> so spidermonkey does pretty much the same thing v8 does?
[06:12:07] <|3b|> v8 is presumably similarly complicated
[06:12:21] <hayley> Yes, though it's been a method JIT since the dawn of time.
[06:13:29] <hayley> PyPy is a meta-tracing JIT, meaning that it instruments an interpreter to generate traces, too.
[06:17:14] <|3b|> also doesn't help that there could be multiple things called "compilation" involved, you AOT compile some source to bytecode, that gets JITed to some machine code when run, then because the user is silly, that machine code gets JITted again to some other machine code because it is running in an emulator, etc :)
[06:18:29] <random-nick> it seems .net's jit is also essentially just aot
[06:19:20] <random-nick> it even has a background service to compile all the dlls and save the results to disk
[06:20:46] <|3b|> yeah, to some extent "jit compiler" is just an implementation detail of "interpreter" or "bytecode vm" :)
[06:21:12] <|3b|> and running sooner or later or both is just a tradeoff of speed/space/etc
[06:24:16] <kakuhen> is anyone here familiar with ipfs nodes
[06:24:17] <random-nick> actually, the .net situation might have changed with the transition to .net core
[06:24:29] <random-nick> but the pages about it are unclear
[06:24:34] <kakuhen> i am hosting some music with my own ipfs node, but how do i automatically host other people's music
[06:24:45] <kakuhen> i know pin services exist, but i want to make my own "pin service," so to speak
[06:31:15] *** Quits: random-nick (~random-ni@87.116.176.196) (Ping timeout: 256 seconds)
[07:09:18] <hayley> random-nick: I've heard that Azul's JVM caches code too.
[07:11:37] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[07:49:04] *** Joins: semz_ (~semz@user/semz)
[07:51:50] *** Quits: semz (~semz@user/semz) (Ping timeout: 250 seconds)
[08:08:08] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[09:07:30] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[09:23:14] *** Joins: Lycurgus (~juan@98.4.112.204)
[09:34:52] *** Joins: dre (~dre@2001:8003:c932:c301:171a:f969:49b7:a76a)
[09:52:13] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[10:12:47] <hayley> https://twitter.com/ErinInTheMorn/status/1500983611364978698 Lovely.
[10:20:55] * hayley thinks she just agreed to work with someone who runs entrepenur LinkedIn and Instagram accounts. Oops!
[10:21:39] <hayley> Note to self: Do the background check BEFORE you open your mouth. Fuck.
[10:22:14] <moon-child>  lol
[10:22:16] <moon-child> glhf
[10:23:22] *** Joins: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[10:25:47] <hayley> At least it's supposed to be a 3-4 person group, so I can afford to have one luser. Sadly they won't count Bakerposting as a member.
[10:25:48] <Bakerposting> Shapiro, E.  "The Family of Concurrent Logic Programming Languages".  ACM Comput. Surv. 21,3 (Sept. (Pragmatic Parsing in Common Lisp <https://plover.com/~mjd/misc/hbaker-archive/Prag-Parse.html>)
[10:25:49] -ixelp- ACM Lisp Pointers 4, 2 (Apr/Jun 1991), 3-15.
[10:26:40] <hayley> Which reminds me that I should port it to Twitter.
[10:28:39] *** semz_ is now known as semz
[10:36:21] *** Joins: aeth_ (~aeth@user/aeth)
[10:36:21] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[10:36:26] *** aeth_ is now known as aeth
[10:43:43] <hayley> "safety ain't free. the abstract syntax tree gotta actually be free of litter thanks to garbage collection. C aka "the MIT computer virus" is NOT my systems language, it is unsafe and unergonomic as well :DDD CLOSOS and common lisp, not GNU/Linux, okay? praise Symbolics"
[10:52:18] <pl> "MIT computer virus"? 
[10:55:28] <ck_> or GNU+Linux
[10:55:35] <ck_> .. as I've recently come to call it.  end quote
[11:00:16] <hayley> pl: Worse-is-better reference?
[11:00:56] <pl> Maybe, but then it should be New Jersey virus 
[11:01:19] * hayley nods
[11:02:15] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Ping timeout: 240 seconds)
[11:02:18] <pl> If I recall my lore correctly 
[11:02:38] <hayley> pl: What are my odds of survival, if I'm going to work with an "entrepeneur" who posts inspirational quotes on LinkedIn as a hobby?
[11:02:46] <hayley> Yeah, seems about right.
[11:02:57] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[11:03:20] <pl> Not much to go on, to be honest. LinkedIn spam is so endemic these days... 
[11:03:44] <hayley> Sure. I don't want to doxx the poor fella or myself.
[11:05:20] <hayley> Also has a website with "data" in the name, with far too many exclamation marks in the blog posts. Writes the language name as JAVA. Mind you that this is a university student, and we are working on university projects.
[11:05:33] <hayley> (Forgot to mention the website is about machine learning.)
[11:07:21] <hayley> But still, have to remind myself again that there will be someone else in the group, too, and I got 99% in my last semester, despite having two of four slackers.
[11:07:27] *** Quits: dre (~dre@2001:8003:c932:c301:171a:f969:49b7:a76a) (Quit: Leaving)
[11:08:19] <dave0> far out
[11:13:48] * hayley thinks
[11:14:44] <hayley> This is year two of study. The blog posts date to 2020. Thus this person was likely going at it during high school (assuming they didn't waste another year at a worse university, like I did).
[11:20:06] <moon-child> aghh
[11:20:17] <moon-child> ldmxcsr is fast on intel
[11:20:19] <moon-child> slow on amd
[11:21:24] <aeth> prefer AMD :-p
[11:21:50] <hayley> Write barriers are apparently faster on AMD than Intel these days.
[11:22:51] <hayley> Hm, MMTk porting meetup is tomorrow night. Main problem I have so far is that MMTk only seems like the better evil to me.
[11:23:01] <moon-child> yeah, to be sure, amd is fast at a lot of things.  But some annoying gaps
[11:23:23] <hayley> "But some annoying gaps" /me stares at 256-bit AVX code
[11:23:36] <moon-child> zen2 :)
[11:23:49] <moon-child> but gather is another one.  I have to twiddle bits like a delighted hacker because I can't use luts for tzcnt
[11:23:57] <moon-child> on intel I bet gather would be competitive
[11:24:05] <hayley> Thanks. But I needed a new computer just after the 1600 came out.
[11:25:45] <hayley> "Every time you complain, we make another computer" "my mom complains 24/7 so infinity computers for her" This lucky person just got a whole lot of computers.
[11:26:38] <hayley> (There should be "about computers" after "complain" but I thought it'd be easy to figure out implicitly.)
[11:29:29] *** Joins: pjb (~pjb@user/pjb)
[11:43:50] *** Joins: shka (~herr@109.231.3.55)
[11:56:24] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[13:04:08] *** Quits: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Remote host closed the connection)
[13:13:01] <kakuhen> is it a controversial opinion to disagree with the claim "git is the best SCM we have"
[13:13:31] <kakuhen> i'm willing to bet some academic somewhere has made a versioning system where applying patches is actually commutative, so you don't deal with the ugly rebase stuff that git forces on you
[13:13:48] <moon-child> darcs?
[13:13:56] <moon-child> that said, snapshots > diffs
[13:13:58] <moon-child> sorry
[13:15:23] <moon-child> a claim such as 'git is the best SCM' has two parts.  'git ui is the best ui of any scm we have' and 'git operational model is the best operational model of any scm we have'.  I don't think anyone thinks the former.  I think the operational model is generally considered rather good
[13:15:35] <kakuhen> yeah im talking about the latter
[13:15:43] <kakuhen> the former claim i think is more stated as UX
[13:15:55] <kakuhen> if magit didn't exist then i'd never use git i think lol
[13:16:32] <moon-child> the thing about 'applying patches is actually commutative' is that it's not true
[13:16:36] *** Joins: cosimone (~user@93-47-229-38.ip115.fastwebnet.it)
[13:16:53] <moon-child> so any prospective solution based on patches has to work around that
[13:18:51] <moon-child> one problem with git, imo, is that 'commit' is at once too granular and too coarse.  I want to record the individual edits I make as I arrive at a commit, and I want to be able to bundle up multiple commits into, say, a 'feature addition'
[13:19:02] <moon-child> latter is kind of served by tags, but not really
[13:40:41] <hayley> https://gist.github.com/no-defun-allowed/24c89a26c92790b18ecdbd018f12f665 ← How to make C++ use the Boehm GC, apparently.
[13:40:42] -ixelp- böhm.cpp · GitHub
[13:43:00] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 272 seconds)
[13:46:08] <hayley> I've recommended people don't use it for C++ class, because it'll make their lecturer mad. But it's probably a good move.
[13:48:03] <moon-child> a good 'move'?
[13:48:09] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[13:48:10] <moon-child> anyway: for a class project, why not just leak?
[13:49:41] <hayley> Someone was also excited to read beach's uniform reference semantics article, since they didn't quite get why the pointers were there.
[13:51:25] <pl> moon-child: there are extensions that build on that, but you can't really bundle commits other than through having multiple commits with a pointer to head, unfortunately
[13:51:54] <pl> moon-child: that said, a think most people forget is that git is designed to operate on sending patches around that are incorporated as individual commits
[14:37:49] *** Joins: lisp123 (~lisp123@120.154.103.52)
[14:45:58] <hayley> moon-child: GC is just leaking with style(tm)
[14:47:55] * hayley checks emails
[14:47:56] <moon-child> better yet, gc is leaking with _rigour_!
[14:48:19] <hayley> New hackathon that you can win an internship (again) + $1000 (not again) for: "You will design and implement a machine learning model using the Python machine learning libraries to quantify the depression severity through speech data. You will be given pre-processed speech data to train and  fine-tune your model. You model will be evaluated on un-seen test data held by the organisers in terms of prediction accuracy. A notebook paper describing
[14:48:19] <hayley> your model and findings must be submitted together with your software."
[14:49:01] <hayley> I don't know how this "addresses the challenge of digital mental health with AI" - guessing if they sound depressed helps somehow?
[14:49:41] <hayley> I've faked being happy for years. And there's one TF2 gamer on YouTube that always sounds depressed. So how's that gonna work?
[14:49:53] <moon-child> all problems become perverse at scale
[14:50:18] <moon-child> (even physics!)
[14:54:02] <hayley> https://www.youtube.com/watch?v=Eh-W8QDVA9s
[14:54:03] -ixelp- Best of Marvin (The Hitchhiker's Guide To The Galaxy) - YouTube
[14:54:04] <pjb> The perversity of galactic physics!
[14:57:56] <dave0> hayley: ooh clicking!
[14:58:19] <dave0> marvin is voiced by hans gruber, the best villian ever
[14:58:48] * ck_ .oO( he is hans grubers .. brother [DRAMATIC MUSIC STING] )
[14:59:08] <dave0> twist!
[15:02:13] <ck_> when is the temperature crossover for the hemispheres? I've never looked that up
[15:09:33] <pl> ehhh, when I hear Gruber, I think of Hubert
[15:09:48] <hayley> dave0: "Oops! No bullets! Gimme that, you think I'm fuckin' stupid Hans?"
[15:12:45] <dave0> hayley: haha
[15:13:05] <dave0> "now i have a machine gun ho ho ho"
[15:14:25] <ck_> so many great moments in that movie
[15:24:18] <hayley> pl: https://old.reddit.com/r/LispMemes/comments/s7fckr/savelispanddie_hard/
[15:24:19] -ixelp- SAVE-LISP-AND-DIE Hard : LispMemes
[15:29:10] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[15:32:27] <hayley> "I want to write something 'relevant' but I'd write something anonymously next time" "the first and last time I did that, I was accused of being a 4chan psychological operation"
[15:40:30] *** Joins: random-nick (~random-ni@87.116.176.196)
[15:42:01] <hayley> On one hand, I feel that most of what I say about writing and distributed systems is telling stories about the bad old times. On the other hand, they're funny stories.
[16:19:06] <gilberth> Good morning #lispcafe!
[16:27:15] <dave0> hey gilberth !
[16:27:53] * gilberth is too tired to spot the space.
[16:28:03] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[16:28:22] <gilberth> dave0: Hi there.
[16:29:12] <dave0> got enough spaces?
[16:29:34] <gilberth> No, I haven't got enough coffee.
[16:33:25] *** Joins: Brucio-61 (~Brucio-67@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[16:34:35] <gilberth> Someone should clean up the issue of medium transformations with regard to the medium ink. This is somewhat solved for line styles and text styles by LINE-STYLE-UNIT and :TRANSFORM-GLYPHS. Still there is nothing to tell what transformation to apply to the ink.
[16:36:13] *** Quits: Brucio-61 (~Brucio-67@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Remote host closed the connection)
[16:36:41] <gilberth> Other graphics APIs differ here. Taking the line width as an example. In some APIs when you say (set-line-width 3) (scale 2) (draw-line ..) you get a line of width 6 in some of width 3. That is: Sometimes the CTM is applied to the line style at the time the line style is set, sometimes it is applied at the time it is used.
[16:36:42] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[16:38:42] <gilberth> CLIM is clear here for the clipping region only. The CTM at the time the clipping is set is applied. For line styles, it's either the mysterious identity transformatin or the CTM at the moment of use depending on LINE-STYLE-UNIT. For the ink it's always the mysterious identity transformation.
[16:39:50] <gilberth> For text, you say so at the DRAW-TEXT with :TRANSFORM-GLYPHS
[16:40:34] *** Joins: Brucio-61 (~Brucio-67@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[16:42:55] <gilberth> There is no right or wrong. Take a CAD drawing. You would expect that when you scale the drawing, line style and text style would scale as well. However you might want to shade some areas in lack of colours with something like /////. You may want that this shading is not scaled. As you also don't want that dithering or half-toning is scaled.
[16:45:36] <gilberth> This comes up with regions. Suppose a b/w display with dithering. You don't expect that (with-scaling (t 10) (draw-design t +gray-50+)) would scale the dithering by 10. But you will perhaps expect that (with-scaling (t 10) (draw-design (make-line* t 0 0 10 10))) would scale the line.
[16:46:00] <gilberth> Hmm, (draw-design t (make-line* ...)) rather
[16:47:55] <gilberth> What ought to happen to patterns is not clear. What also is not clear: How to move output records? Would moving an output record also translate the ink or the clipping region? *sigh*
[17:13:06] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:14:14] <gilberth> How is the non-translational part of a transformation called?
[17:18:23] <ck_> non-translational
[17:20:06] <ck_> gilberth: is "linear" the term you were looking for?
[17:20:18] <White_Flame> or maybe pass-through?
[17:20:33] <White_Flame> or identity
[17:22:04] <gilberth> I am not sure. Take [[a b tx] [c d ty]]. I then mean [[a b 0] [c d 0]].
[17:22:45] <gilberth> This is a bit blurred as [[a b tx] [c d ty]] really is an abbreviation for the 3x3 matrix [[a b tx] [c d ty] [0 0 1]]
[17:24:38] <ck_> afair using [x y 1] and the matrices you mentioned is called the "affine embedding" of R^2. Maybe you can find something for the other direction with that
[17:24:48] <ck_> sorry, canonical embedding
[17:27:06] <gilberth> Yep. And this is why "affine part" doesn't work. Or would be confusing.
[17:28:14] <ck_> confusing? it would be the wrong term, a translation is an affine transformation
[17:28:45] <gilberth> Perhaps I'd go with "non-translational part". I was hoping for something briefer.
[18:06:37] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:7f03:8b0:a81c:56d7) (Ping timeout: 240 seconds)
[19:01:24] <gilberth> I wonder whether I could craft a test suite for graphics? I could test for regression with X11 by just comparing bitmaps. But in the general case for different backends the exact pixel values are not defined. Hmm.
[19:03:56] *** Joins: Lycurgus (~juan@98.4.112.204)
[19:04:12] <gilberth> And I seem to hack in circles. I experience deja vues while fixing things. That's bad.
[19:11:39] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[19:14:43] <Lycurgus> i've got a weird thing where on one host grep seems to be stuck in a prior search
[19:15:06] <Lycurgus> i can work around it but it just bugs me and having a hard time letting it go
[19:16:08] <pl> https://twitter.com/Shinmera/status/1501212848323764231/photo/1 some awesome lisping :)
[19:18:17] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Quit: ec_)
[19:25:02] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:e5ea:1ffe:3a64:8fa7)
[19:30:59] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:e5ea:1ffe:3a64:8fa7) (Ping timeout: 250 seconds)
[19:34:10] <Lycurgus> turned out to be grep quirk (#grep was invaluable in finding that out)
[19:37:32] <ck_> what exactly was the issue?
[19:55:09] <Lycurgus> there were files in the tree starting with underscore
[19:55:25] <Lycurgus> so the parameter '--' to grep was needed
[19:55:53] <Lycurgus> (an older lisp system but a famous and high quality one)
[19:56:19] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[19:58:14] <Lycurgus> s/underscore/hyphen/
[19:59:57] *** Joins: shka (~herr@109.231.3.55)
[20:01:05] <gilberth> They joys of "everything is just a string".
[20:01:14] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 252 seconds)
[20:05:00] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[20:06:08] <ck_> yeah, or just a file
[20:06:45] * gilberth likes files.
[20:07:07] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:07:12] <ck_> reminds me of "saying unix is great at resource handling through process creation and exit is like medicine treating illness through birthing and dying, i.e. it is ignoring the problem"
[20:07:30] * ck_ likes strings, like this one <---
[20:07:39] <ck_> doesn't mean everything has to be one
[20:10:41] <gilberth> It's more about external versus internal representation. Or: How do I need to escape today? And here: The shell not being aware about how to escape file names matched.
[20:12:04] <gilberth> And instead of fixing the shell people come up with all kind of solutions like "--". I mean things would be sane, if "*" would never expand to something starting with a dash.
[20:17:37] *** Joins: X-Scale` (~ARM@135.232.28.37.rev.vodafone.pt)
[20:18:26] <shka> https://economictimes.indiatimes.com/news/international/world-news/russia-becomes-worlds-most-sanctioned-country/articleshow/90070310.cms?from=mdr
[20:18:26] -ixelp- russia sanctions: Russia becomes world's most sanctioned country - The Economic Times
[20:18:34] <shka> lol, take that north korea!
[20:18:36] *** Quits: X-Scale (~ARM@46.50.5.194) (Ping timeout: 240 seconds)
[20:18:36] *** X-Scale` is now known as X-Scale
[20:20:23] <gilberth> To be fair, I believe there is less to sanction North Korea with.
[20:20:35] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[20:21:12] <gilberth> I wonder, if in the future Russia will have access to chips.
[20:21:45] <shka> potato chips or silicon?
[20:21:58] <shka> and seriously
[20:22:03] <shka> they have their own fabs
[20:22:04] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:22:06] <gilberth> The non-edible kind.
[20:22:14] <shka> not world-leading or anything
[20:22:23] <shka> also, they have own CPU design
[20:22:31] <shka> VLIW
[20:22:57] <gilberth> I am aware that they have their own fabs, but how many years are those behind? Could they build new ones? Who makes the machinery for a fab?
[20:23:16] <shka> https://www.youtube.com/watch?v=7LQgLl_89Po
[20:23:17] -ixelp- A Russian 🇷🇺 CPU: The 8-core МЦСТ Эльбрус-8С! (MCST Elbrus) - YouTube
[20:23:35] <shka> it is kinda cool, but very difficult to get your hands on 
[20:23:40] *** Quits: molson (~molson@172-103-21-94-dynamic.midco.net) (Quit: Leaving)
[20:23:41] <Lycurgus> some MSM outlet has a pic of a gas station in california with $6/gal gas
[20:23:42] <shka> and absurdly expensive :/
[20:25:09] <pl> they don't have anything modern, aafaik
[20:25:58] <pl> nothing in any of the last few generations of ASML gear, and they are pretty much monopolists on last few generations of silicon etching
[20:26:00] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 252 seconds)
[20:26:49] *** Joins: X-Scale` (~ARM@31.22.167.35)
[20:27:22] <Lycurgus> you don't see a lot of awareness of the fact that russia letting ukraine go would be like china letting hubei oder go
[20:27:32] <Lycurgus> or the US letting new england go
[20:27:53] *** Quits: X-Scale (~ARM@135.232.28.37.rev.vodafone.pt) (Ping timeout: 256 seconds)
[20:27:53] *** X-Scale` is now known as X-Scale
[20:28:12] <Lycurgus> it's central to russian culture
[20:28:24] <pl> Lycurgus: because it's a shit take
[20:28:31] <pl> heavily manufactured by Putin
[20:28:48] <Lycurgus> so it's loss is a threat to the integrity of a far flung empire, in the mind of the current tsar
[20:28:58] <Lycurgus> an intolerable one
[20:29:01] <pl> Yes, it's central Rus culture - of the *Kievan Rus* as it is called in English, which was *Ukrainian*
[20:29:13] <pl> it's culturally distinct from Moscow Rus
[20:29:51] <X-Scale> isn't Ukraine an independent country since 1991 ?
[20:29:51] <Lycurgus> right i didn grasp that till I looked into it and realized it's more the case that russia was a part of ukraine than the other way around
[20:30:01] <pl> X-Scale: it is
[20:30:24] <Lycurgus> i must say also that the wiki article lgbt rights in ukraine somewhat colors my attitude 
[20:30:42] <pl> Also, a better comparison than New England would be Canada in 1812
[20:31:00] <pl> with Putin as Madison expecting present-day Canadians to happily join
[20:31:39] <pl> Lycurgus: remember that a) Russia is worse on LGBTQ+ b) Russia exports and *sponsors* a lot of LGBTQ+ hate in so-called western world
[20:31:51] <pl> it was even part of the propaganda work up for the invasion
[20:32:34] <Lycurgus> but only a lil bit; yeah my guess is he will maybe accept taking everything east of the dniepr
[20:32:36] <pl> meanwhile now, whether real or not, The Ukrainian mythos is getting memes of LGTBQ+ volunteers fighting against invader
[20:33:12] <Lycurgus> including ofc kiev
[20:33:22] <pl> Lycurgus: even the areas Putin considers parts of Donetsk and Luhansk republics have something like >50% population that really fucking hates Russia
[20:33:31] <Lycurgus> assuming he retains power
[20:34:06] <pl> so trying to hold even just the "claimed" borders of Luhansk and Donetsk is going to be bloody insurgency
[20:34:46] <Lycurgus> it's really they haven't completed throwing off the soviet system which didn complete throwing off the tsarist system
[20:35:05] <Lycurgus> there are smart people there so should figure it out
[20:36:11] <Lycurgus> it's almost as if they only like to be led by evil or clownish strongmen
[20:36:28] <Lycurgus> a gorbachev gets no respect
[20:36:34] <pl> Lycurgus: Putin provided perceptual "stability" after decade of chaos
[20:37:07] <Lycurgus> yeah and it turns out he didn actually seek power, it was thrust upon him by yeltsin
[20:37:22] <pl> fun fact - it's suspected (can't ask the author anymore, he is dead) that Gorbachev shows up as on of legendary heroes in Wheel Of Time
[20:37:46] <pl> Lycurgus: ohhh, that's ... a take, considering what's known of Putin's history
[20:37:56] <Lycurgus> nope it's a fact
[20:38:15] <Lycurgus> yeltsin had an heir apparent but he didn like him
[20:38:24] <Lycurgus> he would have been a competent good guy
[20:38:41] <Lycurgus> putin at first refused because nobody knew him
[20:38:44] <pl> Lycurgus: That doesn't mean Putin didn't maneuveur himself into position
[20:38:45] <shka> you mean nemtsov?
[20:39:13] <pl> I mean, you don't get from "low ranking functionary in KGB" through "mobster" to "President" by accident
[20:39:20] <Lycurgus> so somebody came up with the idea of him being acting prime minister which established him as a public figure
[20:39:52] <Lycurgus> maybe nemetsov, saw it in '17 bbc hour long thing on putin
[20:40:02] <Lycurgus> putin the new tsar, iirc
[20:40:05] <pl> Also, he established his "stability" idea by staging false flag bombings in Moscow
[20:40:39] <pl> anyway, the end result is that apparently he had only yes-men around himself and now replicated 1904 crisis
[20:41:00] <Lycurgus> he's not going to go nuclear, pretty clear on that now
[20:41:37] <Lycurgus> in the lead up the russian forces sought to open a hotline with the US military which the US at first refused
[20:42:27] <Lycurgus> and just the other day lavrov said were not crazy people, we have a nuclear strategy/rules
[20:42:53] <shka> the last realist in Putin inner circle was probably Surkov
[20:43:09] <Lycurgus> also they prolly know they would loose in a conflict with NATO
[20:44:00] <Lycurgus> a lot of people are referring to that quote from bismarck about committing suicide for fear of death
[20:44:26] <Lycurgus> that's what a nuclear confrontation with NATO would be for russia
[20:44:35] <pl> Lycurgus: well, it's quite obvious that at least all high ministers were feeding him bullshit, and probably believed it themselves
[20:45:48] <shka> well, remember that chief spy bit
[20:45:55] <shka> that was weird as fuck
[20:46:08] <Lycurgus> there are rumours, i'm sure unsubtantiated that he has cancer, abdominal
[20:46:25] <Lycurgus> supposedly had surgery for it in '20
[20:46:43] <shka> well, i will believe once fucker is dead
[20:46:54] <Lycurgus> his paranoia about covid or whatever doesn't fit the tough guy image
[20:47:20] <shka> well, this is all speculations
[20:47:35] <shka> i can pull stuff out of thin air as well
[20:48:11] <shka> for instance: he is a transplant receiver and undergoing immunosuppression therapy  
[20:48:18] <Lycurgus> well the images of him seperated by 10 or 20 meters from anybody he's meeting with isn't speculation
[20:48:28] <shka> or: he is actually HIV positive 
[20:48:43] <shka> but that's just silly
[20:48:53] <pl> he's putin-positive ;)
[20:49:50] <shka> well, whatever, system he created in russia is a disgrace to all of the humanity 
[20:50:08] <shka> and he is only in power because he conditioned Russians for apathy 
[20:51:06] <Lycurgus> russia of 2022 isn't the old russia
[20:51:28] <Lycurgus> it's been fully integrated in the international system for a generation
[20:51:56] <pl> and old russia is... what? 1794, 1812, 1904/5, 1917, 1920, 1939, 1953?
[20:52:00] <shka> and yet it is also just like old russia
[20:52:39] <Lycurgus> but it's definitely weird to see young people in ukraine who talk to their parents in russia who tell them there's no war
[20:52:57] <Lycurgus> the russia before 1990
[20:54:17] <pl> Lycurgus: that's not a single, coherent thing either
[20:55:05] <Lycurgus> pl, which isn't, the parents response?
[20:56:12] <Lycurgus> that's their getting their info from state media and being the law that they can't say there's a war i presume
[20:56:18] <pl> And Putin had been mostly harking to 1772-1850
[20:56:38] <pl> I meant the the time period of "Russia before 1990"
[20:56:46] <shka> https://img-9gag-fun.9cache.com/photo/aXrLOx2_700bwp.webp i start to think that Ukrainians are actually devastating Russian army
[20:57:17] <pl> Soviet Union, at least in propaganda and ideals, wouldn't be able to push the course put by Putin. Even with holodomor
[20:57:35] <shka> the thing that gets me in this whole Russian thing
[20:57:44] <shka> is the whole perception of "culture"
[20:57:52] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[20:57:54] <shka> as immutable, transcended entity
[20:58:46] <shka> it is not even purely Russian at this point, but i don't understand this whole line of thinking 
[20:59:01] <shka> it is just a form of mysticism really
[21:00:35] <Lycurgus> by russia before 1990 i meant a country that was largely closed to the outside world
[21:01:56] <White_Flame> shka: don't forget that the russian army is devastating the russian army, too.  surrendering, dumping their fuel, refusing to fire on ukranians, etc
[21:02:42] <shka> yes but this tank
[21:03:33] *** Joins: jeosol (~jeosol@user/jeosol)
[21:03:54] <gilberth> It's sad to notice that after all this war is due to some chemical imbalance in some single brain.
[21:04:10] <White_Flame> dangers of (effective) dictatorship
[21:05:12] <shka> where is the reactive armor?
[21:05:30] <shka> in a country that has thousands of anti-tank missiles
[21:05:42] <shka> and why nobody cared to fix those headlights
[21:06:26] <shka> there is supposed to be IR spotlight also
[21:06:53] <pl> Lycurgus: even the perception of USSR being closed to the outside world isn't exactly correct
[21:06:54] <gilberth> Headlight? Won't the tanks pass the inspection check for road safety (TÜV)? Is it illegal to operate them on public roads?
[21:07:28] <shka> gilberth: dunno, ask Ukrainian police :P
[21:07:59] <pl> shka: it looks like T-72 pulled from museum
[21:07:59] <gilberth> shka: Good idea!
[21:08:14] <Lycurgus> pl, no that's why i qualified it by largely;less so in the soviet era than tsarist
[21:08:27] <shka> pl: no, museum actually preserves their exhibit 
[21:10:44] <shka> pl: this looks like something that war literally scrapped 
[21:10:50] <shka> *was
[21:11:17] <pl> I can't even figure the exact model, because it looks like it's missing parts
[21:12:57] <shka> i think it has to be A
[21:13:26] <shka> oh, no 
[21:13:30] <shka> this is B
[21:13:33] <shka> ... wtf?
[21:13:46] <shka> it misses also smoke launchers
[21:14:16] <pl> Also, is it T-72 or T-80?
[21:14:30] <pl> and I thought it was hard to find T-80 without reactive panels
[21:14:47] <pl> it looks like *T-80 prototype*
[21:14:54] <shka> it has to be T-72B
[21:15:10] <shka> missing smoke launchers, are very telling
[21:15:17] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[21:15:41] <pl> did T-72B get rid of that "V" wedge in front?
[21:15:46] <shka> no
[21:15:54] <shka> this was for variants missing reactive armor
[21:16:02] <shka> which B is supposed to have
[21:16:10] <shka> but this one lacks
[21:16:29] <pl> ...
[21:16:31] <shka> you can see that it was removed, all those pegs on the armor
[21:16:52] <shka> oh, it is also supposed to have machine gun 
[21:20:19] <shka> i think it still has coax 
[21:20:37] <shka> so that's something
[21:21:13] *** Joins: notzmv (~zmv@user/notzmv)
[21:24:44] <shka> pl: i start to think that Ukraine is not bullshitting with the Russian looses 
[21:25:11] <shka> https://www.youtube.com/watch?v=xxXlD4e-wTE
[21:25:12] -ixelp- Forget Small ... What About Micro Nuclear Energy? - YouTube
[21:25:23] <pl> shka: well, even just counting confirmed russian losses brings Oryx to despair
[21:28:02] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[21:28:14] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[21:33:39] <gilberth> I get garbled data when I ask for a Z-IMAGE got from a one-bit depth pixmap with CLX. Somehow I can't believe that CLX is buggy here.
[21:37:46] <gilberth> When I convert the raw byte sequence myself, everything is fine. Hmm.
[21:47:55] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:49fc:dd14:62fe:1d6f)
[21:51:36] <gilberth> The panic at the stock market seems to be cancelled.
[22:03:10] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[22:27:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[22:52:24] *** Joins: cyberbanjo (~user@2607:fb90:42b7:213f:732e:306d:a6f3:7f1)
[22:52:43] *** Quits: cyberbanjo (~user@2607:fb90:42b7:213f:732e:306d:a6f3:7f1) (Remote host closed the connection)
[22:55:59] *** Joins: cyberbanjo (~user@2607:fb90:42b7:213f:732e:306d:a6f3:7f1)
[23:37:39] *** Joins: ec (~ec@gateway/tor-sasl/ec)
