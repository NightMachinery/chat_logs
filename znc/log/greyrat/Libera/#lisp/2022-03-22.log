[01:00:43] <pjb> In lisp, we can mutate things, but we can also avoid it.  So we have operators that may share structure, and other that may re-use the allocated memory, and by being a little careful (adopting different programming styles), we avoid most problem, while having at our finger tips the tools to write efficient code when needed (mutation, without over copying).
[01:00:48] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Remote host closed the connection)
[01:01:03] *** Joins: makomo (~makomo@user/makomo)
[01:03:09] *** Quits: rogersm (~rogersm@90.166.180.250) (Remote host closed the connection)
[01:03:09] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[01:04:26] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[01:04:27] *** Joins: idurand (~user@88.214.180.100)
[01:05:18] *** Joins: rogersm (~rogersm@90.166.180.250)
[01:05:22] <theseb> This simple 2 liner prints (2 3) ... (defun get_rest (l) (rest l))    (print (get_rest (list 1 2 3)))
[01:05:41] *** Quits: idurand (~user@88.214.180.100) (Client Quit)
[01:05:51] <theseb> However, the list (list 1 2 3) is ephemeral and only exists in the function call stack
[01:06:09] <theseb> So seems it should be garbage collected and be missing when print looks for it?
[01:06:23] <theseb> (Yes I'm thinking too hard about lisp implementation)
[01:07:09] *** Quits: CrashTestDummy (~CrashTest@ool-ad020ec7.dyn.optonline.net) (Quit: Leaving)
[01:09:31] *** Quits: rogersm (~rogersm@90.166.180.250) (Ping timeout: 245 seconds)
[01:10:53] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[01:16:37] <wasamasa> you don't need to cross-post
[01:17:23] <edgar-rft> except when you're jesus
[01:19:02] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[01:20:44] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[01:24:33] *** Joins: strajder (~strajder@user/strajder)
[01:32:36] *** Quits: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Remote host closed the connection)
[01:33:39] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[01:35:41] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[01:43:29] *** Quits: dlowe (~dlowe@user/dlowe) (Read error: Connection reset by peer)
[01:43:47] *** Joins: dlowe (~dlowe@user/dlowe)
[01:45:05] *** Quits: wacki (~wacki@87.122.80.7) (Quit: Leaving.)
[01:45:52] *** Quits: dlowe (~dlowe@user/dlowe) (Read error: Connection reset by peer)
[01:46:42] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[01:47:49] <pjb> theseb: nothing says the list has a dynamic extend.  There's no reason to collect it after get-rest returns.
[01:48:01] *** Quits: seabre_ (~seabre@user/seabre) (Quit: ZNC 1.8.2 - https://znc.in)
[01:48:23] <pjb> theseb: on the contrary, there remains a reference the (cdr list), passed to print, so (cdr list) is live and must definitely not be collected!
[01:49:18] <pjb> theseb: if you wrote (defun get-rest (l) (declare (dynamic-extend l) (rest l)))  then it would be a bug, because you declare it dynamic extend, but you return (rest l)!!!
[01:49:28] *** Joins: seabre (~seabre@user/seabre)
[01:49:53] <pjb> theseb: in short: don't allocate data on the stack. Allocate it on the heap, managed by the garbage collector!
[01:54:15] * edgar-rft wants a garbage collector that collects garbage code *before* it gets evaluated
[01:55:51] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Ping timeout: 252 seconds)
[01:56:36] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[01:59:43] <jackdaniel> (ext:quit) ;?
[01:59:55] <pjb> edgar-rft: ARC ?
[02:00:38] <theseb> pjb: when i implement a lisp i can't just naively delete functions stacks after function calls...i need to have smart code that checks for references!?
[02:02:18] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[02:02:51] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:746b:7a76:5f:680b)
[02:03:42] *** Parts: buoy49 (sid386684@id-386684.uxbridge.irccloud.com) ()
[02:06:57] <Alfr> pjb, unless you're willing to recompile all calls to get-rest if it is redefined, I don't think it's legal to stack allocate that list argument.
[02:07:42] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[02:08:05] <Alfr> pjb, s/you're willing/the implementation arranges/
[02:08:11] *** Joins: lisp123 (~lisp123@143.238.164.103)
[02:08:13] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[02:12:32] *** ec_ is now known as ec
[02:12:35] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[02:12:45] *** Quits: lisp123 (~lisp123@143.238.164.103) (Ping timeout: 256 seconds)
[02:14:22] <pjb> theseb: (defun list (&rest elements) (copy-list elements))
[02:14:22] <pjb> theseb: (defun copy-list (list) (let* ((result (cons nil nil)) (tail result)) (dolist (element list) (setf (cdr tail) (car element nil) tail (cdr tail))) (cdr result)))
[02:14:49] <pjb> theseb: ie. list (and copy-list) are mere functions. They don't know they're called to build a parameter to get-rest.
[02:15:07] <pjb> theseb: only cons allocates a new cons cell.  It has to allocate it on the heap.
[02:28:37] *** Quits: trumae (~trumae@2804:431:c7c1:c8d4:3473:e0f9:d8:6df3) (Ping timeout: 240 seconds)
[02:29:02] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 240 seconds)
[02:29:25] *** Joins: trumae (~trumae@2804:18:8ba:e036:1:0:9c70:3a6e)
[02:29:53] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[02:32:40] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Client Quit)
[02:35:07] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:35:16] <theseb> pjb: i don't know CL that well to follow your code...can you speak qualitatively about the principles?
[02:36:03] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[02:36:05] <theseb> pjb: when you invoke a function you create a bit of new environment...aka function call stack.....that gets erased after the function invocation
[02:36:18] <theseb> that's my problem
[02:36:20] <theseb> how implement that
[02:37:27] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[02:38:44] *** Quits: Lumine (lumi@user/luminousnine) (Quit: In the land of the blind, the one-eyed man is king)
[02:40:58] *** Quits: EsoAlgo (~EsoAlgo@152.70.142.52) (Remote host closed the connection)
[02:42:46] *** Joins: EsoAlgo (~EsoAlgo@152.70.142.52)
[02:43:20] *** Joins: dre (~dre@2001:8003:c932:c301:70ee:1824:1d7e:5401)
[02:48:17] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[02:49:24] *** Joins: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net)
[02:50:27] <pjb> theseb: what lisp do you know? This is fairly common lispâ€¦
[02:51:28] <pjb> theseb: the environments you create at function calls only contain the parameters of the function.  The arguments have been computed before that.  You store references to the arguments in the parameter variables of the new environment.
[02:52:43] <pjb> theseb: the link between your stack of environment and the heap, is that the stack of environment is automatically added to the rootset of the heap: all the objects that can be referenced from the stack of environments are deemed alive.
[02:53:01] <pjb> theseb: therefore when you return from a function, you only have to pop its environment and that's it.
[02:53:55] <pjb> theseb: note: those environments themselves can be stored on the heap. This is a simple solution for closures: you can use the same environments for closures (at the cost of keeping some objects alive longer than they should because of the closures).
[02:54:22] <pjb> theseb: I could advise this book to learn how to implement a lisp: Lisp in Small Pieces   http://pagesperso-systeme.lip6.fr/Christian.Queinnec/WWW/LiSP.html  http://pagesperso-systeme.lip6.fr/Christian.Queinnec/Books/LiSP-2ndEdition-2006Dec11.tgz
[02:54:40] <theseb> pjb: i wrote a basic one..i know the basics of schme and CL
[02:55:13] <theseb> pjb: man..you sure know this stuff well...
[02:55:21] <theseb> you could teach it
[02:56:17] <pjb> theseb: you may also study how existing implementations do it. and watch how a new implementation is being implemented in #sicl 
[02:57:34] <theseb> pjb: you said " The arguments have been computed before that.  You store references to the arguments in the parameter variables of the new environment."
[02:58:35] <pjb> Well, this would be one way to do it. Another indeed, would be to create the environment, and to store the arguments as they are computed.
[02:59:20] <pjb> creating the environment first would avoid a little problem of having to add the computed objects to the root-set.
[02:59:43] <theseb> pjb: but when you do (f sexp-1 sexp-2 sexp-3) ....you only evaluate sexp-1, sexp-2, sexp-3 for the invocation...so they don't exist beyond
[02:59:44] <theseb> ?
[03:00:16] <pjb> they could exist after the end of the execution of f, if they're stored in some data structure or returned from the function call.
[03:00:43] <theseb> pjb: yes! 
[03:01:27] <theseb> pjb: you *might* erase invocation stuff...you may not...ok i think that is what i was looking for
[03:02:00] <theseb> thanks
[03:04:27] <theseb> pjb: "they could exist after the end of the execution of f, if they're stored in some data structure or returned from the function call." <=--- i didn't know that was allowed...i thought there was some rule "Thou must always erase everything after execution of function" for some reason
[03:07:01] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 240 seconds)
[03:07:28] *** Joins: rogersm (~rogersm@90.166.180.250)
[03:08:41] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 245 seconds)
[03:08:49] *** Quits: rogersm (~rogersm@90.166.180.250) (Read error: Connection reset by peer)
[03:09:07] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[03:09:23] *** Joins: rogersm (~rogersm@90.166.180.250)
[03:10:09] <pjb> theseb: for example: https://termbin.com/wbrp
[03:11:08] <pjb> theseb: you must distinguish the values = lisp objects which are stored in the heap and of which we have references to, from the variables, and the slots.
[03:11:20] <pjb> theseb: the variables and the slots contain a reference to a lisp object.
[03:11:48] <pjb> theseb: the variables storage is on the stack; the slot storage is in lisp objects (vector, arrays, structures, objects).
[03:12:15] <holycow> oh hot damn
[03:12:16] <pjb> (a parameter is a variable; an argument is a value aka lisp object).
[03:13:02] <pjb> Since variables and slots only contain references to objects, they can contain references to any type (or class) of objects.
[03:13:25] <pjb> On the other hand, the type  is a property of a lisp object, of the values.  Not of the variables.  
[03:13:33] <holycow> hm ignore me pls
[03:13:35] <pjb> This is the difference between lisp and languages like C.
[03:13:57] *** Quits: rogersm (~rogersm@90.166.180.250) (Ping timeout: 252 seconds)
[03:22:30] <theseb> pjb: to use your example...eval(expr2) and eval(expr3) will be saved because returns (cdr s)...HOWEVER, if (g s) REMOVES eval(expr2) or eval(expr3) from s then both will NOT be saved..correct?
[03:23:05] <theseb> pjb: in short..the body of f determines if .eval(expr2) and eval(expr3) are permanently saved or not!
[03:23:41] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 245 seconds)
[03:24:28] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[03:30:51] *** Joins: rogersm (~rogersm@90.166.180.250)
[03:31:09] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Quit: WeeChat 3.4)
[03:32:05] *** Joins: son0p (~ff@181.136.122.143)
[03:32:37] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[03:34:55] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[03:35:24] *** Quits: rogersm (~rogersm@90.166.180.250) (Ping timeout: 252 seconds)
[03:36:32] *** Joins: rogersm (~rogersm@90.166.180.250)
[03:37:34] *** Joins: monkey_ (~user@190.104.116.153)
[03:40:53] *** Quits: rogersm (~rogersm@90.166.180.250) (Ping timeout: 252 seconds)
[03:41:59] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 252 seconds)
[03:51:55] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[03:52:43] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Quit: Leaving)
[03:53:12] <son0p> Hi, I'm trying to encode a osc message, a working example is: (osc:encode-message "/foo/bar" 11.0 33.0 20.0), I tried (defvar path "/foo/bar") (defvar payload (11.0 33.0 20.0)) and (osc:encode-message (cons path payload)) which result in error  
[03:53:50] <son0p> 'the value "/foo/bar" is not of type CHARACTER'
[03:54:30] <son0p> the complete code of the function is here https://paste.debian.net/1235181/
[03:56:19] *** Joins: lisp123 (~lisp123@143.238.164.103)
[04:01:10] *** Quits: lisp123 (~lisp123@143.238.164.103) (Ping timeout: 260 seconds)
[04:09:07] *** Joins: son0p_m (uid440805@id-440805.hampstead.irccloud.com)
[04:11:59] *** Joins: lisp123 (~lisp123@143.238.164.103)
[04:15:49] *** Quits: dre (~dre@2001:8003:c932:c301:70ee:1824:1d7e:5401) (Ping timeout: 240 seconds)
[04:18:09] <pjb> theseb: correct.
[04:19:48] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:964:33b9:5b34:486d)
[04:19:48] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:964:33b9:5b34:486d) (Changing host)
[04:19:48] *** Joins: skapata (~Skapata@user/skapata)
[04:21:52] *** Quits: lisp123 (~lisp123@143.238.164.103) (Remote host closed the connection)
[04:24:11] <pjb> son0p: 1- you didn't wrap the special variables with * so confusion may arise (notably,  you have a lexical parameter variable named path in osc-send-test1 !)
[04:24:19] <pjb> and payload too.
[04:24:39] <pjb> son0p: 2- you didn't define the function address.
[04:24:48] <pjb> son0p: 3- 11.0 is not the name of a function.
[04:26:05] <son0p_m> pjb: thanks for your help
[04:26:33] <pjb> son0p: and 4-  you didn't call osc-send-test1 which therefore is useless.
[04:26:49] <pjb> son0p: https://termbin.com/dwnh
[04:28:22] <son0p_m> pjb: I'll try to fix the points you are addressing, thanks
[04:28:38] <pjb> son0p: otherwise, if you call: (osc:encode-message (cons *path* *payload*))
[04:28:51] <pjb> the stack frames are clear:
[04:28:51] <pjb>   0: (char-code "/foo/bar")
[04:28:51] <pjb>   1: (map vector #<Compiled-function char-code #x30000013DCCF> ("/foo/bar" 11.0 33.0 20.0))
[04:28:51] <pjb>   2: (osc::encode-address ("/foo/bar" 11.0 33.0 20.0))
[04:28:54] <pjb>   3: (osc:encode-message ("/foo/bar" 11.0 33.0 20.0))
[04:29:40] <pjb> You should not cons a string to the payload, which should just be octets.  I'd avoid using floats there!
[04:29:46] <pjb> (code-char 32.0) #| ERROR: The value 32.0 is not of the expected type (mod 1114112). |# 
[04:30:48] <pjb> err, sorry, not octet, but characters. encode-message expects a sequence of characters, eg. a string.
[04:30:59] <pjb> (osc:encode-message "Hello") --> #(72 101 108 108 111 0 0 0 44 0 0 0)
[04:31:06] <pjb> Perhaps you could try reading the documentation?
[04:32:17] <pjb> son0p: or: (osc:encode-message *path* *payload*) #| --> #(47 102 111 111 47 98 97 114 0 0 0 0 44 98 0 0 0 0 0 3 11 33 20 0) |# 
[04:32:17] <pjb>  
[04:32:40] <pjb> why did you want to pass a list to osc:encode-message?
[04:33:32] *** Quits: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[04:34:23] *** Quits: el_kevino (~mote@2604:a880:400:d1::901:5001) (Quit: WeeChat 3.4.1)
[04:35:09] <son0p_m> Pjb I would like to construct the list of floats, and pass it as argument to the function
[04:35:36] *** Joins: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt)
[04:39:08] *** Joins: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[04:43:52] <pjb> son0p: ok, but don't put strings in it.
[04:46:43] <pjb> son0p: however, encode-message takes the data as &rest, so (apply (function osc:encode-message) *path* 1.1 2.2 3.3 4.4 5.5 *payload*) #| --> #(47 102 111 111 47 98 97 114 0 0 0 0 44 102 102 102 102 102 105 105 105 0 0 0 63 140 204 205 64 12 204 205 64 83 51 51 64 140 204 205 64 176 0 0 0 0 0 11 0 0 0 33 0 0 0 20) |# 
[04:49:27] <pjb> son0p: of course, it also depend on the structure of the data you want to encode in the message.  When you call it as (osc:encode-message *path* *payload*) it will encode the list of floats as a blob.  Compare:
[04:49:27] <pjb>  (osc:encode-message *path* *payload*)                  #| --> #(47 102 111 111 47 98 97 114 0 0 0 0 44 98 0 0 0 0 0 3 11 33 20 0) |# 
[04:49:27] <pjb>  (apply (function osc:encode-message) *path* *payload*) #| --> #(47 102 111 111 47 98 97 114 0 0 0 0 44 105 105 105 0 0 0 0 0 0 0 11 0 0 0 33 0 0 0 20) |# 
[04:49:55] <pjb> 98 is blob, 105 is int32
[04:50:14] <pjb> you need to know what you're doing.
[04:50:39] <pjb> That said, good night!
[04:52:31] *** Joins: lisp123 (~lisp123@143.238.164.103)
[04:55:18] <son0p_m> pjb: good night thanks a lot
[04:56:14] *** Quits: random-nick (~random-ni@87.116.176.196) (Ping timeout: 260 seconds)
[04:57:39] *** Quits: lisp123 (~lisp123@143.238.164.103) (Ping timeout: 256 seconds)
[05:06:03] *** Joins: Akiva (~Akiva@user/Akiva)
[05:09:42] *** Joins: random-nick (~random-ni@87.116.167.125)
[05:14:57] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 252 seconds)
[05:15:27] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Remote host closed the connection)
[05:16:18] *** Joins: asarch (~asarch@2806:10ae:7:2198:c359:d1ec:eb4b:c2b9)
[05:20:38] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[05:21:12] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Remote host closed the connection)
[05:24:23] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[05:28:43] *** Joins: X-Scale` (~ARM@219.206.137.78.rev.vodafone.pt)
[05:29:57] *** Quits: X-Scale (~ARM@46.50.5.55) (Ping timeout: 256 seconds)
[05:29:57] *** X-Scale` is now known as X-Scale
[05:30:30] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[05:33:39] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[05:34:35] *** Joins: herme5 (~mote@2604:a880:400:d1::901:5001)
[05:34:55] *** herme5 is now known as el_kevino
[05:35:34] *** Joins: aeth (~aeth@user/aeth)
[05:37:51] *** Joins: rogersm (~rogersm@90.166.180.250)
[05:40:13] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[05:41:26] *** Quits: Techcable (~Techcable@168.235.93.147) (Changing host)
[05:41:26] *** Joins: Techcable (~Techcable@user/Techcable)
[05:42:02] *** Quits: rogersm (~rogersm@90.166.180.250) (Ping timeout: 240 seconds)
[05:45:05] *** Joins: X-Scale` (~ARM@89.214.146.25)
[05:45:34] *** Quits: X-Scale (~ARM@219.206.137.78.rev.vodafone.pt) (Ping timeout: 272 seconds)
[05:45:50] *** X-Scale` is now known as X-Scale
[05:52:03] *** Quits: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt) (Ping timeout: 256 seconds)
[05:57:59] *** Joins: libniwtr (~libniwtr@2408:8207:2422:3b11:b88b:135:2fa6:c9a)
[06:08:28] *** Joins: Lumine (~Lumine@user/luminousnine)
[06:32:47] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 268 seconds)
[06:36:53] *** Quits: VincentVega (~user@212.97.4.212) (Ping timeout: 252 seconds)
[06:39:59] *** Joins: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net)
[06:43:37] *** Joins: dre (~dre@2001:8003:c932:c301:c38d:68f8:7c3:7e20)
[07:03:31] *** Joins: parjanya (~esb@2804:14c:1ad:9351:da4f:f2c4:abd6:1e10)
[07:07:14] *** Quits: asarch (~asarch@2806:10ae:7:2198:c359:d1ec:eb4b:c2b9) (Quit: Leaving)
[07:17:48] *** Joins: Inline__ (~Inline@p200300cd470e6400705287adc1f2aa0f.dip0.t-ipconnect.de)
[07:19:56] *** Quits: Inline (~Inline@p200300cd4709f600befffe6df48235ec.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[07:22:08] *** Joins: cl-irc (~cl-irc@111.37.112.185)
[07:30:48] *** Quits: cl-irc (~cl-irc@111.37.112.185) (Ping timeout: 252 seconds)
[07:41:03] *** Joins: In0perable (~PLAYER_1@fancydata.science)
[07:41:04] *** Joins: light_ (~light@user/light)
[07:41:04] *** Joins: Marsh (~MiningMar@user/miningmarsh)
[07:41:05] *** Joins: gko`` (~user@2400:8902::f03c:91ff:fe70:e605)
[07:41:06] *** Joins: elflng_ (~elflng@5.28.137.182)
[07:41:29] *** Quits: MiningMarsh (~MiningMar@user/miningmarsh) (*.net *.split)
[07:41:29] *** Quits: Inoperable (~PLAYER_1@fancydata.science) (*.net *.split)
[07:41:29] *** Quits: light (~light@user/light) (*.net *.split)
[07:41:29] *** Quits: jrjsmrtn (~jrjsmrtn@ip-83-134-41-224.dsl.scarlet.be) (*.net *.split)
[07:41:29] *** Quits: elflng (~elflng@5.28.137.182) (*.net *.split)
[07:41:29] *** Quits: gko` (~user@user/gko) (*.net *.split)
[07:41:58] *** Joins: jrjsmrtn (~jrjsmrtn@ip-83-134-41-224.dsl.scarlet.be)
[07:42:22] *** Quits: Lumine (~Lumine@user/luminousnine) (Quit: brb)
[07:42:27] *** Marsh is now known as MiningMarsh
[07:52:01] *** Joins: Lumine (~Lumine@user/luminousnine)
[07:57:35] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[07:58:13] *** Quits: son0p_m (uid440805@id-440805.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[08:06:33] *** Joins: Akiva (~Akiva@user/Akiva)
[08:07:25] *** Quits: Techcable (~Techcable@user/Techcable) (Ping timeout: 240 seconds)
[08:10:08] *** Quits: Lumine (~Lumine@user/luminousnine) (Quit: leaving)
[08:12:12] *** Joins: Lumine (~Lumine@user/luminousnine)
[08:17:47] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[08:19:43] *** Joins: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de)
[08:32:09] *** light_ is now known as light
[08:41:07] *** Quits: trumae (~trumae@2804:18:8ba:e036:1:0:9c70:3a6e) (Remote host closed the connection)
[08:50:37] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[08:51:11] *** Quits: xiews (~xiews@101.88.37.70) (Ping timeout: 245 seconds)
[08:53:17] *** Quits: libniwtr (~libniwtr@2408:8207:2422:3b11:b88b:135:2fa6:c9a) (Ping timeout: 240 seconds)
[09:00:45] *** Quits: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[09:07:02] *** Joins: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net)
[09:09:21] *** Joins: Techcable (~Techcable@user/Techcable)
[09:10:15] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[09:17:41] *** Quits: dre (~dre@2001:8003:c932:c301:c38d:68f8:7c3:7e20) (Quit: Leaving)
[09:18:48] *** Joins: piuk (~puke@user/puke)
[09:18:48] *** puke is now known as Guest1014
[09:18:48] *** piuk is now known as puke
[09:21:15] *** Quits: Guest1014 (~puke@user/puke) (Ping timeout: 250 seconds)
[09:24:11] *** Joins: xiews (~xiews@101.88.37.70)
[09:24:20] *** Quits: Lumine (~Lumine@user/luminousnine) (Quit: leaving)
[09:25:00] *** Quits: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 240 seconds)
[09:33:13] *** Joins: dre (~dre@2001:8003:c932:c301:c38d:68f8:7c3:7e20)
[09:33:42] *** Quits: dre (~dre@2001:8003:c932:c301:c38d:68f8:7c3:7e20) (Remote host closed the connection)
[09:38:59] *** Joins: rogersm (~rogersm@90.166.180.250)
[09:43:57] *** Quits: rogersm (~rogersm@90.166.180.250) (Ping timeout: 268 seconds)
[09:54:57] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Quit: WeeChat 3.4.1)
[09:57:59] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 256 seconds)
[09:58:21] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[10:17:09] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Quit: WeeChat 3.4.1)
[10:17:40] *** Joins: lisp123 (~lisp123@143.238.164.103)
[10:20:22] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[10:22:23] *** Quits: lisp123 (~lisp123@143.238.164.103) (Ping timeout: 252 seconds)
[10:32:16] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[10:40:35] *** Joins: libniwtr (~libniwtr@123.119.100.178)
[10:41:09] *** Quits: libniwtr (~libniwtr@123.119.100.178) (Client Quit)
[10:42:12] *** Joins: libniwtr (~libniwtr@123.119.100.178)
[10:51:34] *** Quits: gko`` (~user@2400:8902::f03c:91ff:fe70:e605) (Quit: ERC (IRC client for Emacs 27.2))
[10:52:06] *** Joins: gko (~user@user/gko)
[11:02:24] *** Quits: Techcable (~Techcable@user/Techcable) (Remote host closed the connection)
[11:04:37] *** Joins: Techcable (~Techcable@user/Techcable)
[11:05:21] *** Quits: hjudt (~hjudt@62-178-177-178.cable.dynamic.surfer.at) (Ping timeout: 245 seconds)
[11:16:34] *** Joins: Lumine (~Lumine@user/luminousnine)
[11:22:13] *** Joins: hjudt (~hjudt@62-178-177-178.cable.dynamic.surfer.at)
[11:27:19] *** Joins: msk (~Thunderbi@89.205.124.59)
[11:47:44] *** Joins: wacki (~wacki@87.122.80.7)
[11:59:02] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 240 seconds)
[12:08:55] *** Quits: prokhor_ (~Prokhor@46-22-24-242-dynamic-cpe.cust.swissbackbone.net) (Remote host closed the connection)
[12:09:27] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 256 seconds)
[12:11:52] *** Joins: rogersm (~rogersm@90.166.180.250)
[12:14:21] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[12:18:17] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 240 seconds)
[12:18:53] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[12:19:28] *** Joins: shka (~herr@109.231.3.55)
[12:26:09] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[12:29:32] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 240 seconds)
[12:32:20] *** Quits: les (znc@user/les) (Quit: Adios)
[12:33:04] *** Quits: OlCe (~user@lfbn-nic-1-262-219.w90-116.abo.wanadoo.fr) (Remote host closed the connection)
[12:34:14] *** Joins: les (znc@user/les)
[12:35:41] *** Joins: Grauwolf (~grauwolf@user/grauwolf)
[12:40:11] *** Joins: joeyzheng5403_ (~kerwin@124.126.18.162)
[12:41:36] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 245 seconds)
[12:59:09] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[13:11:34] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:5e66:8d:7679:aecb)
[13:12:13] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 250 seconds)
[13:12:51] *** Joins: amb007 (~a_bakic@59.132.22.93.rev.sfr.net)
[13:21:31] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:5e66:8d:7679:aecb) (Quit: Client closed)
[13:24:12] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[13:24:29] *** Joins: lisp123 (~lisp123@143.238.164.103)
[13:26:25] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:32:03] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[13:42:22] *** Joins: Akiva (~Akiva@user/Akiva)
[13:42:46] *** Quits: lisp123 (~lisp123@143.238.164.103) (Remote host closed the connection)
[13:45:15] *** Joins: mgl (~mgl@2a00:79e0:4a:203:b0ad:72bc:14d2:c731)
[13:48:18] *** Joins: OlCe (~user@lfbn-nic-1-262-219.w90-116.abo.wanadoo.fr)
[13:49:23] *** Joins: lisp123 (~lisp123@143.238.164.103)
[13:52:34] *** Quits: lisp123 (~lisp123@143.238.164.103) (Remote host closed the connection)
[13:52:46] *** Joins: lisp123 (~lisp123@143.238.164.103)
[13:53:19] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[13:58:37] *** Joins: prokhor (~Prokhor@46-22-24-242-dynamic-cpe.cust.swissbackbone.net)
[13:59:19] *** Quits: Lumine (~Lumine@user/luminousnine) (Quit: leaving)
[14:02:48] *** Quits: lisp123 (~lisp123@143.238.164.103) (Remote host closed the connection)
[14:03:41] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[14:06:02] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 240 seconds)
[14:06:47] *** Joins: JohnMS_WORK (~kvirc@194.110.240.100)
[14:11:03] *** Quits: xiews (~xiews@101.88.37.70) (Ping timeout: 256 seconds)
[14:13:09] *** Joins: lisp123 (~lisp123@143.238.164.103)
[14:22:41] *** Quits: libniwtr (~libniwtr@123.119.100.178) (Quit: Leaving)
[14:26:23] *** Quits: SAL9000 (~SAL9000@shirakumo/sal9000) (Ping timeout: 268 seconds)
[14:26:28] *** Joins: kevingal (~quassel@92.51.199.18)
[14:31:07] *** Quits: AdmiralBumbleBee (~AdmiralBu@47.203.174.105) (Ping timeout: 256 seconds)
[14:31:33] *** Joins: SAL9000 (~SAL9000@shirakumo/sal9000)
[14:46:04] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[14:47:01] *** Joins: notzmv (~zmv@user/notzmv)
[15:29:21] *** Joins: xiews (~xiews@101.88.37.70)
[15:37:30] *** Joins: random-nick (~random-ni@87.116.176.196)
[15:47:37] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 256 seconds)
[15:48:18] *** Quits: madvax (~madvax@hellboy.kuang11.net) (Remote host closed the connection)
[15:50:00] *** Joins: razetime (~quassel@117.254.35.226)
[16:02:26] *** Quits: razetime (~quassel@117.254.35.226) (Remote host closed the connection)
[16:04:03] *** Quits: kevingal (~quassel@92.51.199.18) (Ping timeout: 256 seconds)
[16:07:12] *** Joins: razetime (~quassel@117.254.35.226)
[16:11:29] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Quit: WeeChat 3.4.1)
[16:13:38] *** Joins: kevingal (~quassel@92.51.199.18)
[16:13:58] *** Joins: kevingal_ (~quassel@92.51.199.18)
[16:25:11] *** Quits: joeyzheng5403_ (~kerwin@124.126.18.162) (Remote host closed the connection)
[16:27:41] *** Quits: lisp123 (~lisp123@143.238.164.103) (Remote host closed the connection)
[16:28:43] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[16:32:12] *** Quits: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[16:33:43] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 250 seconds)
[16:35:36] *** Joins: aeth (~aeth@user/aeth)
[16:52:32] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[17:04:41] *** Joins: lisp123 (~lisp123@143.238.164.103)
[17:06:36] *** Quits: hjudt (~hjudt@62-178-177-178.cable.dynamic.surfer.at) (Ping timeout: 245 seconds)
[17:09:47] *** Quits: lisp123 (~lisp123@143.238.164.103) (Ping timeout: 256 seconds)
[17:11:00] *** Quits: kevingal_ (~quassel@92.51.199.18) (Ping timeout: 240 seconds)
[17:11:01] *** Quits: kevingal (~quassel@92.51.199.18) (Ping timeout: 240 seconds)
[17:25:07] *** Joins: livoreno (~livoreno@user/notzmv)
[17:28:29] *** Joins: hjudt (~hjudt@62-178-177-178.cable.dynamic.surfer.at)
[17:32:58] *** Joins: inky_ (~inky@5.77.205.35)
[17:35:48] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[17:35:53] <theseb> pjb: thanks again
[17:36:11] *** Quits: inky (~inky@46.36.114.138) (Ping timeout: 245 seconds)
[17:37:51] *** Quits: JohnMS_WORK (~kvirc@194.110.240.100) (Ping timeout: 250 seconds)
[17:38:59] *** Joins: lispy (~lispy@user/lispy)
[17:40:55] <edgar-rft> Nearly all modern lisps have a garbage collector, but none of them has a garbage contructor. What please is then the garbage collector good for?
[17:41:20] <Nomikos> most of my scripts are garbage o.o;
[17:41:33] <holycow> i was about to make that joke
[17:41:37] <holycow> >_>
[17:41:43] <jackdaniel> doesn't cons stand for "garbage constructor"? (gc is silent)
[17:42:28] *** Quits: OlCe (~user@lfbn-nic-1-262-219.w90-116.abo.wanadoo.fr) (Remote host closed the connection)
[17:44:47] *** Quits: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net) (Ping timeout: 250 seconds)
[17:45:34] <edgar-rft> Sometimes writing Lisp feels like working on a huge garbage construction plant :-)
[17:50:08] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[17:50:15] *** Joins: robin_ (~robin@user/terpri)
[17:50:27] *** Quits: razetime (~quassel@117.254.35.226) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[17:51:37] *** Joins: strajder (~strajder@user/strajder)
[18:02:33] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[18:06:29] *** Joins: OlCe (~user@lfbn-nic-1-262-219.w90-116.abo.wanadoo.fr)
[18:17:39] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Quit: Leaving)
[18:18:14] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[18:20:05] <pjb> edgar-rft: (defun garbage-constructor (how-much) (loop repeat how-much do (cons nil nil)))
[18:26:51] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[18:27:55] *** Quits: anticomputer_ (~anticompu@gateway/tor-sasl/anticomputer) (Remote host closed the connection)
[18:28:14] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[18:34:29] *** Joins: kevingal (~quassel@92.51.199.18)
[18:34:42] *** Joins: kevingal_ (~quassel@92.51.199.18)
[18:38:56] *** Joins: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net)
[18:43:48] *** Joins: aadcg (~user@2001:818:daa9:6700:f21c:5ab6:8d75:5824)
[18:49:49] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[19:00:55] *** Quits: robin_ (~robin@user/terpri) (Remote host closed the connection)
[19:01:14] *** Joins: robin_ (~robin@user/terpri)
[19:01:17] *** Joins: aartaka (~aartaka@141.136.78.91)
[19:02:18] *** Quits: aartaka (~aartaka@141.136.78.91) (Read error: Connection reset by peer)
[19:02:39] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[19:06:33] *** Quits: Brucio-61 (~Brucio-21@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Remote host closed the connection)
[19:08:15] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Ping timeout: 240 seconds)
[19:08:46] *** Quits: Inline__ (~Inline@p200300cd470e6400705287adc1f2aa0f.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[19:08:52] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[19:09:16] *** Joins: Inline (~Inline@p200300cd470e6400705287adc1f2aa0f.dip0.t-ipconnect.de)
[19:11:37] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[19:12:02] *** Quits: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net) (Ping timeout: 252 seconds)
[19:12:10] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[19:12:37] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[19:27:08] *** Joins: inky (~inky@78.109.66.134)
[19:27:24] *** Quits: inky_ (~inky@5.77.205.35) (Ping timeout: 240 seconds)
[19:28:50] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Read error: Connection reset by peer)
[19:29:04] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[19:38:42] *** Joins: eddof13 (~eddof13@2806:102e:12:64:f838:6484:5e24:bd9f)
[19:41:02] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[19:48:54] *** Joins: razetime (~quassel@117.254.35.226)
[19:48:58] *** Quits: eddof13 (~eddof13@2806:102e:12:64:f838:6484:5e24:bd9f) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[19:51:51] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[19:52:08] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[19:55:02] *** Joins: eddof13 (~eddof13@2806:102e:12:64:f838:6484:5e24:bd9f)
[19:55:27] *** Joins: Brucio-61 (~Brucio-21@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[19:56:54] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Ping timeout: 260 seconds)
[19:58:58] *** Quits: lispy (~lispy@user/lispy) (Quit: Leaving)
[20:00:21] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Ping timeout: 256 seconds)
[20:00:58] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[20:01:04] *** Joins: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net)
[20:01:23] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:02:50] *** Joins: inky_ (~inky@5.77.176.214)
[20:05:01] *** Quits: inky (~inky@78.109.66.134) (Ping timeout: 240 seconds)
[20:09:45] *** Joins: karlosz (~karlosz@193.137.37.182)
[20:10:31] *** Quits: pjb (~pjb@user/pjb) (Read error: Connection reset by peer)
[20:18:07] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:f52e:1e16:af5a:322a)
[20:18:07] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:f52e:1e16:af5a:322a) (Changing host)
[20:18:07] *** Joins: skapata (~Skapata@user/skapata)
[20:19:24] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[20:19:55] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[20:20:33] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:5e66:8d:7679:aecb)
[20:22:43] *** Joins: sp41 (~spal@64.253.214.14)
[20:22:43] *** Quits: sp41 (~spal@64.253.214.14) (Changing host)
[20:22:43] *** Joins: sp41 (~spal@user/sp41)
[20:32:56] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[20:36:44] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 252 seconds)
[20:37:02] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[20:38:11] *** Quits: aadcg (~user@2001:818:daa9:6700:f21c:5ab6:8d75:5824) (Remote host closed the connection)
[20:40:30] *** Quits: son0p (~ff@181.136.122.143) (Remote host closed the connection)
[20:40:36] *** Joins: Akiva (~Akiva@user/Akiva)
[20:40:53] *** Quits: karlosz (~karlosz@193.137.37.182) (Quit: karlosz)
[20:44:40] *** Joins: karlosz (~karlosz@193.137.37.182)
[20:45:35] *** Joins: morte_ (~user@190.104.116.153)
[20:46:58] *** Joins: gproto23 (~gproto23@user/gproto23)
[20:59:44] *** Quits: karlosz (~karlosz@193.137.37.182) (Quit: karlosz)
[21:00:59] *** Quits: mgl (~mgl@2a00:79e0:4a:203:b0ad:72bc:14d2:c731) (Ping timeout: 256 seconds)
[21:04:00] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[21:09:17] *** Quits: kevingal_ (~quassel@92.51.199.18) (Remote host closed the connection)
[21:09:17] *** Quits: kevingal (~quassel@92.51.199.18) (Remote host closed the connection)
[21:12:30] *** Joins: karlosz (~karlosz@193.137.37.182)
[21:17:52] *** Quits: karlosz (~karlosz@193.137.37.182) (Quit: karlosz)
[21:17:57] *** Quits: razetime (~quassel@117.254.35.226) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:31:11] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Remote host closed the connection)
[21:31:35] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[21:31:36] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 245 seconds)
[21:33:09] *** Quits: eddof13 (~eddof13@2806:102e:12:64:f838:6484:5e24:bd9f) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:35:27] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Remote host closed the connection)
[21:36:43] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[21:37:19] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Client Quit)
[22:06:45] *** Joins: Lumine (Lumine@user/luminousnine)
[22:30:01] *** Joins: inky (~inky@46.36.114.138)
[22:30:36] *** Quits: inky_ (~inky@5.77.176.214) (Ping timeout: 240 seconds)
[22:35:58] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[22:44:50] *** Joins: treflip (~user@user/treflip)
[22:55:30] *** Quits: strajder (~strajder@user/strajder) (Remote host closed the connection)
[22:56:14] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:5e66:8d:7679:aecb) (Quit: Client closed)
[22:56:51] *** Joins: lispy (~lispy@user/lispy)
[22:57:57] *** Quits: amb007 (~a_bakic@59.132.22.93.rev.sfr.net) (Ping timeout: 240 seconds)
[22:58:09] *** Joins: amb007 (~a_bakic@48.13.23.93.rev.sfr.net)
[23:04:37] *** Quits: amb007 (~a_bakic@48.13.23.93.rev.sfr.net) (Ping timeout: 240 seconds)
[23:05:26] *** Joins: amb007 (~a_bakic@49.36.22.93.rev.sfr.net)
[23:07:14] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[23:07:38] *** Joins: gproto23 (~gproto23@user/gproto23)
[23:11:05] *** Joins: VincentVega (~user@212.97.4.212)
[23:13:09] *** Quits: puke (~puke@user/puke) (Quit: puke)
[23:19:05] *** Quits: treflip (~user@user/treflip) (Quit: Quit)
[23:19:56] *** Quits: justOkay (~justache@user/justache) (Read error: Connection reset by peer)
[23:20:53] *** Joins: justOkay (~justache@user/justache)
[23:25:20] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[23:25:31] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Client Quit)
[23:28:39] *** Quits: Lumine (Lumine@user/luminousnine) (Quit: brb)
[23:33:23] *** Joins: Lumine (lumi@user/luminousnine)
[23:37:09] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 252 seconds)
[23:39:02] *** Joins: jao (~jao@45.152.183.53)
[23:41:25] *** Quits: amb007 (~a_bakic@49.36.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[23:42:36] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[23:45:07] *** Joins: hborges (~hborges@189.1.160.174)
[23:47:49] *** Quits: hborges (~hborges@189.1.160.174) (Quit: Client closed)
[23:49:00] *** Joins: hhhh (~hhhh@189.1.160.174)
[23:52:17] *** hhhh is now known as hhhh92
[23:59:55] *** Quits: hhhh92 (~hhhh@189.1.160.174) (Quit: Client closed)
