[00:01:13] *** Quits: rando25892 (~homefame@user/rando25892) (Ping timeout: 256 seconds)
[00:02:22] *** Joins: rando25892 (~homefame@user/rando25892)
[00:02:58] *** Quits: Hanii (~textual@2a00:23c5:c583:a300:ac33:9d52:7dc:f94b) (Quit: Textual IRC Client: www.textualapp.com)
[00:10:58] *** Quits: dvx (~dvx@5.181.92.64) (Quit: dvx)
[00:15:10] *** Joins: duuude (~user@user/duuude)
[00:20:12] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.4)
[00:28:37] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[00:29:05] *** Joins: ano (~ano@user/ano)
[00:48:10] *** Quits: duuude (~user@user/duuude) (Ping timeout: 250 seconds)
[01:11:11] *** Quits: Guest54 (~Guest54@2603-8081-2707-4597-1d1d-0925-d812-0d53.res6.spectrum.com) (Quit: Client closed)
[01:39:09] *** Joins: duuude (~user@user/duuude)
[02:15:10] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-e493-34a2-5f11-9e6f.res6.spectrum.com) (Read error: Connection reset by peer)
[02:34:07] *** Joins: pizdets (~pizdets@183.182.111.45)
[02:34:48] *** Quits: pizdets_ (~pizdets@183.182.110.193) (Ping timeout: 250 seconds)
[02:56:27] *** Quits: netlynx (~jan@94-226-69-15.access.telenet.be) (Quit: Leaving)
[03:01:54] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[03:17:58] <tumn> kakolainen[m]: quote from the lua PIL: "Lua has no integer type, as it does not need it. There is a widespread misconception about floating-point arithmetic errors and some people fear that even a simple increment can go weird with floating-point numbers. The fact is that, when you use a double to represent an integer, there is no rounding error at
[03:17:58] <tumn> all (unless the number is greater than 100,000,000,000,000). Specifically, a Lua number can represent any long integer without rounding problems. Moreover, most modern CPUs do floating-point arithmetic as fast as (or even faster than) integer arithmetic. "
[03:18:23] <tumn> lua 5.1 doesn't have the same problem with NaNs because there is nothing like math.tointeger, everything is just a number
[03:18:32] <tumn> ('number' = double)
[03:19:47] <R2robot> leonardus: vim
[03:23:55] <tumn> tl;dr complaints that lua causes floating point errors by using only doubles are mythical, as any long long integer can be encoded in a double just fine without rounding errors 
[03:24:57] <tumn> rounding errors come out when using doubles as... you can guess it, doubles, with decimal points (i.e. not representing integers)
[03:26:32] <kakolainen[m]> PIL is just totally wrong, if you keep coding at elementary level you might never come across the problematic things but just not a long ago someone here was complaining that (a<b == b>a)  returned false which is a floating point error on some CPUs
[03:27:55] <ubq323> "any long long integer can be encoded in a double just fine without rounding errors" this is false a long long int and a double have the same number of bits, there are values a double can represent that a long long int can't, therefore there are values that a long long int can represent that a double can't
[03:28:16] <furq> it says long not long long
[03:28:17] <kakolainen[m]> the bug about NaN was in documentation and fails in 5.1 too, test it yourself: ({})[0/0]=1
[03:30:17] <tumn> yes long, not long long
[03:30:18] <ubq323> long long int and long int are the same size on my machine
[03:30:54] <tumn> kakolainen[m]: was that (a<b == b>a) thing done with whole numbers (integer equivalent)? I'm guessing not
[03:31:06] <tumn> ({})[0/0]=1 isn't a bug
[03:31:14] <tumn> it throws a very deliberate error about the key index being NaN
[03:31:17] *** Quits: mva_ (znc@gentoo/developer/mva) (Quit: ZNC - https://znc.in)
[03:31:30] *** Joins: mva (znc@gentoo/developer/mva)
[03:32:29] <furq> the free pil was written before amd64 existed
[03:33:03] <furq> maybe the newer ones are more precise about terminology
[03:33:26] <kakolainen[m]> also you can test with 2 lines of code simple double rounding error by distributing a double from one variable to multiple and then sum back to one and the result will be different than the first variable, with my new AMD cpu the result will be different with just after 3 iterations
[03:33:27] <tumn> I'm on an amd64 system and if anyone can send me code that misbehaves with whole numbers due to floating point errors on my system I will eat my words
[03:35:06] <tumn> %lua5.1 local a = 6; local b, c = a/2, a/2; print(b + c == a)
[03:35:12] <tumn> ?
[03:35:22] <furq> %5.1 local a = 6; local b, c = a/2, a/2; print(b + c == a)
[03:35:23] <yalb> furq: true
[03:35:33] <tumn> works fine here and on my system as well
[03:35:39] *** Quits: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469) (Remote host closed the connection)
[03:35:48] <tumn> I'm not convinced
[03:36:26] <kakolainen[m]> you are shifting the goalpost
[03:36:39] <tumn> no, not at all
[03:38:21] <tumn> there is no goalpoast, either lua doubles are unable to effectively represent integers due to floating point errors or they're not
[03:38:40] <tumn> it seems like they are not
[03:38:42] <kakolainen[m]> first you assert "complaints about floating point errors are outright myths" now you are limiting your assertion to only integers inside double
[03:38:57] <furq> well that's the thing we're talking about isn't it
[03:39:04] <furq> whether you need an int type
[03:39:19] <tumn> my original implication was that lua can use only doubles and not have an integer type and that it can still do everything the lua with an integer type could do, without floating point errors getting in the way
[03:39:29] <furq> we all know 0.1 + 0.2 ~= 0.3 but having an int type doesn't fix that
[03:40:35] <tumn> specifically >there's a pretty good case for doubles, they are able to represent any integer value you could ever want, and complaints about floating point errors are outright myths
[03:40:58] <furq> well you might want 2^53 
[03:41:14] <furq> ain't no river long enough doesn't contain a bend
[03:41:21] <tumn> that's fair, if you want 2^53 you might be in trouble
[03:41:43] <kakolainen[m]> tumn you must be trolling, even with simple (2^24+1.0 == 2^24) will fail on 32bit Lua, you can get a similar example with 64bit floats
[03:42:19] <furq> that's not a rounding error though
[03:42:55] <kakolainen[m]> it is
[03:44:02] <furq> that's a precision error
[03:44:12] <furq> that's like saying math.maxinteger + 1 doesn't work
[03:44:50] <furq> i guess you could argue you're less likely to know about double precision when it's not explicit that you're using doubles
[03:44:58] <tumn> only difference is floats and integers do different thing when they reach their maximum
[03:45:41] <kakolainen[m]> all precision errors are rounding errors, maxinteger+1 is an overflow error which sets up a CPU flag
[03:46:56] <tumn> I genuinely can't think of any practical reason why this merits adding an integer type to lua, it will overflow instead of hitting a precision error, so what?
[03:47:06] <furq> well neither are really errors they're both expected behaviour
[03:47:26] <furq> or documented at least
[03:47:50] <technomancy> using floats for currency is pretty, uh... irresponsible
[03:48:03] <furq> using ints for that isn't great either
[03:48:23] <tumn> you could pretend to use ints for it in lua by just representing it in whole numbers
[03:48:53] <technomancy> yeah not having a numeric tower sucks
[03:49:03] <kakolainen[m]> furq you are wrong, the float error is different wheter you store the float back to RAM or keep it in CPU register, and the integer overflow/carry flag is part of bignum artihmetic not really an error
[03:49:04] <technomancy> that's the price of fitting in 200kb I guess
[03:49:26] <tumn> I think not having a numeric tower is really charming and refreshing
[03:50:06] <kakolainen[m]> I mean the float error will always remain as rounding error but integer overflow just overflows to the next integer if you want
[03:50:51] <technomancy> back in the day the most important thing about having an integer type is that it let you make fun of javascript
[03:51:12] <tumn> I don't think relying on the behavior of an integer overflow is any better than having a float precision error
[03:55:06] <kakolainen[m]> for example most of cryptography is nearly impossible with doubles but easy with even 8bit microcontroller using integers
[03:55:39] <kakolainen[m]> waiting for you to eat your words "math.tointeger((2^55+1)) == (math.tointeger(2^55)+1)"
[03:55:52] <tumn> lua 5.1 doesn't have math.tointeger
[03:56:01] <tumn> because it doesn't have integers
[03:56:06] <tumn> try again though
[03:56:53] <tumn> it's fair to say lua isn't a language meant for writing cryptographic functions, those would be implemented in C
[03:56:57] <kakolainen[m]> you said all longs fits into double but goalpost shifting it's seems to be again
[03:57:23] <tumn> you are using a lua version I wasn't even talking about, your looking at the wrong goalposts
[03:57:40] <tumn> this entire conversation is about why integers aren't necessary in lua (like in 5.1)
[03:57:54] <tumn> I can't run your code in lua 5.1 because lua 5.1 doesn't have integers or math.tointeger
[03:58:40] <tumn> seriously it's like you are having a whole different conversation than the rest of us
[03:59:28] <tumn> a double can't even represent 2^55+1 as a whole number anyway
[04:00:24] <tumn> actually it might be able to, I'm not good at math
[04:00:55] <tumn> % 5.1 print(2^55+1 == 2^55+1)
[04:00:56] <yalb> tumn: sandbox:1: unexpected symbol near '5.1'
[04:01:04] <tumn> %5.1 print(2^55+1 == 2^55+1)
[04:01:05] <yalb> tumn: true
[04:01:14] <tumn> %5.1 print(math.floor(2^55)+1 == math.floor(2^55+1))
[04:01:15] <yalb> tumn: true
[04:01:19] <tumn> seems to pass
[04:03:42] <kakolainen[m]> no you are just plain wrong, earlier you said longs and long longs will fit into double float without rounding errors which is untrue
[04:04:03] <tumn> it seemed to above just now
[04:04:07] <tumn> also that's what the PIL said
[04:04:27] <kakolainen[m]> also "tumn: my original implication was that lua can use only doubles and not have an integer type and that it can still do everything the lua with an integer type could do, without floating point errors getting in the way"
[04:04:37] <tumn> yes
[04:04:42] <tumn> name 1 thing it can't do
[04:05:00] <ubq323> represent certain numbers
[04:05:15] <tumn> sure, numbers that are too big to store
[04:05:19] <tumn> same with integers
[04:05:25] <ubq323> do bitwise arithmetic as easily
[04:05:33] <tumn> just use the bit library in luajit
[04:05:39] <tumn> which is canonically 5.1
[04:05:50] <ubq323> requiring luajit is cheating
[04:05:51] <nmz> tumn: going against you're stick to 5.1 rule there
[04:05:55] <tumn> luajit has integers but internally
[04:06:06] <ubq323> cool but that's a particular implementation
[04:06:13] <furq> lua 5.2 has a bit library
[04:06:16] <tumn> I mentioned luajit yesterday, you guys are late to the conversation
[04:06:39] <tumn> you are really struggling to grasp onto any excuse to implement integers into lua
[04:07:49] <tumn> the NaN problems don't crop up when there is only doubles
[04:07:51] <technomancy> it's too late. they already got added.
[04:08:21] <tumn> math.floor(NaN) I believe just returns another NaN
[04:08:45] <kakolainen[m]> adding integers to Lua was made very cleanly and nothing broke, mostly all compatible with old code
[04:09:09] <tumn> this conversation started because someone was having trouble with math.tointeger throwing an error when it's passed NaN, so not true
[04:09:15] <tumn> it's pretty ugly
[04:11:47] <nmz> > math.tointeger(0/0)
[04:11:49] <nmz> nil
[04:12:48] <tumn> math.floor (which in most cases is functionally equivalent to math.tointeger) if passed a number always returns a number, even if that number is also NaN
[04:13:03] <tumn> I guess the problem was nil was throwing an error because the code was expecting a number
[04:13:11] <tumn> which is honestly just as bad
[04:15:41] <tumn> if you are doing something where you MUST work with the specific properties of integers, like bitwise operations or you're expecting an overflow or something, and you have no access to a bit library like the one in 5.2 or luajit, these things should really be done on the C side, but those are such specific edge cases that it doesn't merit
[04:15:41] <tumn> complicating a simple language by adding more number types
[04:16:04] <tumn> just resign to the fact that lua isn't meant for those tasks
[04:17:21] <kakolainen[m]> or maybe just resign to the fact that Lua already has integers and there is no argument to win?
[04:18:01] <kakolainen[m]> the tointeger nan thing was just an opinion, maybe wrong because math.tointeger("dsf") also returns nil
[04:18:04] <tumn> lua added a lot of things that go against lua's original design philosophy, integers included
[04:18:07] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:d154:b93f:c8:b39)
[04:19:37] <technomancy> yeah but lua 1.0 was real bad
[04:19:43] <tumn> agreed
[04:19:49] <kakolainen[m]> my logic comes from when coding more math things you will realize for example having one nan or inf in a large matrix will usually eventually result in all results and matrices being full of nans and infs, then trying to pinpoint where that one inf slipped from is usually quite hard but thats ok because no crash but a nil from tointeger will crash in a wrong place
[04:21:02] <tumn> just curious, why would u use lua for a task like that? it is an embeddable scripting language for C applications, not a math language.. why not write those parts in C or use a language that is able to store extremely large numbers and complicated math constructs?
[04:21:28] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Quit: 404)
[04:21:58] <kakolainen[m]> matlab scripting language is one of the best math languages and it's similar to Lua
[04:22:04] <technomancy> it's valid to hate C
[04:22:28] <tumn> I wasn't under the impression matlab was similar to lua at all
[04:22:33] <tumn> it seems like a completely different language
[04:22:37] <tumn> different syntax, different implementation
[04:22:42] <tumn> different purpose
[04:22:49] <tumn> totally valid to use matlab instead though
[04:22:55] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[04:22:58] <tumn> also hating C is hating lua, honestly
[04:23:04] <tumn> they are tied together
[04:23:26] <technomancy> no
[04:23:33] <tumn> every non-C implementation of lua I've seen has been lacking in some way
[04:23:36] <technomancy> I love lua because it results in less C existing in the world
[04:24:02] <tumn> lua is originally for adding scripting to C applications
[04:24:14] <tumn> that's kind of just what it does
[04:25:07] <technomancy> lua was originally for oil company engineers to visualize their shit
[04:25:32] <tumn> lua 5+ then
[04:25:50] <technomancy> well sorry; I'm going to keep hating C and keep loving Lua.
[04:26:20] <tumn> your lua implementation is almost certainly written in C and most of the lua functions you call are actually C functions that interact with C data structures
[04:26:24] <tumn> but sure that's fine
[04:31:50] <kakolainen[m]> main feature of Lua for me is avoiding coding in C++, like C++20 looks fine and huge improvement at first but it's still the old trash inside
[04:32:34] <tumn> thoughts on rust? that's where mots people with problems with C++ are migrating to
[04:33:42] <technomancy> it's a hell of a lot better than C++ but it's not really meant to solve any problems that I actually have
[04:34:04] <technomancy> I'm glad my browser uses it tho
[04:34:08] <tumn> I've never used it but I have a friend who is obsessed with it
[04:34:55] <tumn> I'm not doing anything that merits a power tool like C++ or rest
[04:35:01] <tumn> rust*
[04:35:31] <tumn> plain old C occasionally though doesn't suffer from a lot of C++'s problems, it has the benefit of being really simple
[04:35:57] <tumn> if H ad to use something like C++ I would definitely look into rust myself as an alternative
[04:36:09] <kakolainen[m]> once I said Rust seems to be drawing all the competent coders in but then looked into one Rust application and it was horror, maybe it's just getting more popular
[04:36:27] <tumn> it's definitely the popularity thing
[04:37:00] <technomancy> it's easier to understand the enthusiasm for rust when you consider how massively overapplied C has been over the past few decades; used for things it's disastrously bad at
[04:37:05] <tumn> rust has a tendency to chew up and spit out people who write horrifying code, or force their code to be okay through trial and error (unless they use the unsafe keyword)
[04:37:32] <tumn> i.e. even if it's ugly it won't break
[04:46:14] <nmz> what's the point of using ansi C on lua?
[04:46:30] <furq> it builds on platforms that might not have a c99 compiler
[04:46:35] <nmz> bugs on c99?
[04:46:48] <nmz> but which platforms don't have a c99 compiler?
[04:46:48] <furq> no it's just portability
[04:47:54] <nmz> like, linux is portable, netbsd is portable, I don't think they have this c89 portability thing
[04:59:16] <nmz> I'm genuinely asking though, not being fascetious.
[04:59:46] <nmz> wrong word
[04:59:52] <nmz> obnoxious*?
[05:01:12] <tumn> ansi c is just compatibility dialed up to 11
[05:01:22] <tumn> there is basically nothing it won't run on
[05:01:25] <tumn> no matter how obscure
[05:02:03] <tumn> also lua is old
[05:05:14] <nmz> I just noticed a patch that reverted a // comment
[05:05:19] <nmz> bit silly
[05:19:27] *** Quits: ratchetfreak_ (~ratchetfr@ptr-82rtos1uhakfz4xnvao.18120a2.ip6.access.telenet.be) (Ping timeout: 256 seconds)
[05:20:27] <leonardus> q66: I tried jedit but it doesn't appear to support rendering on a 120hz display, so it comes out looking like it's lagging which is a bit annoying.
[05:21:08] <leonardus> nmz: R2robot: vim/vis is something I'd like to learn how to use eventually but I just don't see that as a valuable way to allocate my time
[05:21:22] <leonardus> time spent learning a text editor is time not spent working on the project
[05:21:32] <R2robot> yet, here you are. :P
[05:21:33] <nmz> vim is not vis
[05:21:39] <nmz> and vis is not vim
[05:21:40] <leonardus> R2robot: i mean.. yeah ;P
[05:21:57] <leonardus> nmz: I was under the impression vis is a vim fork?
[05:22:06] <nmz> no
[05:22:10] <leonardus> oh
[05:22:18] <nmz> its all built from scratch
[05:22:24] <nmz> and vis is easier to learn than vim
[05:22:26] * R2robot has never heard of vis
[05:22:33] <leonardus> I'll give it a try
[05:22:37] <nmz> https://github.com/martanne/vis
[05:22:38] <R2robot> WAT
[05:22:47] <R2robot> you caved to that so easily
[05:23:01] <nmz> frankly, I detest vim, its so antiquated
[05:23:05] <leonardus> R2robot: I mean yeah, I tried learning vim before
[05:23:16] <nmz> Just look at the vim tutorial, its HUGE
[05:23:19] <leonardus> ^
[05:23:29] <nmz> vis? just a man page
[05:23:30] <leonardus> text editors shouldn't really need tutorials
[05:23:36] <R2robot> of course, but like.. you don't have to learn ALL of vim.  Nobody can or does
[05:23:51] <tumn> I have the view that nano can work as fast as vim if someone is acquainted with it
[05:23:51] <leonardus> you don't need to learn all of any text editor
[05:23:53] <R2robot> even the creator only uses a small(er) subset of it's total functionality
[05:23:55] <leonardus> but the point is being easy to jump in and start
[05:23:58] <nmz> its still a modal editor, so you need to enter a "mode" like visual for selection, or "insert" to type
[05:24:01] <leonardus> and then learn more advanced features as you go
[05:24:26] <nmz> yeah but I like to do x//c// a lot
[05:24:31] <R2robot> yeah..
[05:24:42] <nmz> which is seds s///g
[05:24:48] <nmz> or just selecting with x//
[05:24:49] <R2robot> i've used vim over 20 years.. and I still use mostly basic functionality
[05:25:02] <R2robot> but i'm lost on any app that doesn't have vi(m) keybindings. lol
[05:27:12] <R2robot> also, there are some nifty vim plugins.. 
[05:27:32] <R2robot> https://imgur.com/a/k3e01i3
[05:29:46] <nmz> so a quick rundown on most if not all you'll need. x/regex/ -- x is a command, // is the regex, basically, x/^/ this is a regex that selects the start of the every single line, x/^/i/\t/    this will set a tab; x/[A-z]+[ \t]*=/i/local /  -- this set all variables as local 
[05:29:48] <nmz> etc
[05:30:40] *** Quits: vancz (~vancz@user/vancz) (Quit: vancz)
[05:31:01] <nmz> simple, as long as you know regex, and you've formatted your code correctly. x// is mostly all you need to know
[05:31:08] <nmz> and its configurable in lua
[05:32:39] <nmz> x// (selects), d (deletes), i (insert), a (appends), c (changes). so you select, and you run a command on those selections
[05:34:07] <nmz> R2robot: that's very nice
[05:34:20] *** Joins: vancz (~vancz@user/vancz)
[05:39:03] <R2robot> there's also mirco  "aims to be a somewhat successor to nano"  https://github.com/zyedidia/micro
[06:00:06] <kakolainen[m]> % print(9490626794906267%112 == 94906267.094906267.0%112)
[06:00:07] <yalb> kakolainen[m]: sandbox:1: ')' expected near '<\29>'
[06:01:26] <kakolainen[m]> proof that double can't even do 27bit math without rounding errors, even with 32bit integers that works fine
[06:01:39] <tumn> that was a syntax error
[06:02:06] <tumn> "94906267.094906267.0" isn't a valid lua number
[06:02:13] <tumn> I'm assuming a typo
[06:02:35] <kakolainen[m]> something removed the multiplication stars
[06:03:00] <tumn> my client maybe
[06:03:48] <tumn> it didn't work for the bot either though..
[06:03:54] <tumn> %5.1 print(94906267*94906267%112 == 94906267.0*94906267.0%112)
[06:03:54] <yalb> tumn: true
[06:03:59] <tumn> ?
[06:04:03] <kakolainen[m]> % "print(94906267*94906267%112 == 94906267.0*94906267.0%112)"
[06:04:03] <yalb> kakolainen[m]: sandbox:1: count; stack traceback:; [C]: in function 'error'; sandbox:1: in main chunk
[06:04:17] <tumn> % print(94906267*94906267%112 == 94906267.0*94906267.0%112)
[06:04:18] <yalb> tumn: sandbox:1: count; stack traceback:; [C]: in function 'error'; sandbox:1: in main chunk
[06:04:22] <tumn> %5.1 print(94906267*94906267%112 == 94906267.0*94906267.0%112)
[06:04:23] <yalb> tumn: true
[06:04:37] <tumn> %5.2 print(94906267*94906267%112 == 94906267.0*94906267.0%112)
[06:04:37] <yalb> tumn: true
[06:04:40] <tumn> %5.3 print(94906267*94906267%112 == 94906267.0*94906267.0%112)
[06:04:40] <yalb> tumn: sandbox:1: count; stack traceback:; [C]: in function 'error'; sandbox:1: in main chunk
[06:04:53] <tumn> returns true on my system too
[06:05:25] <kakolainen[m]> try again until you get false
[06:05:47] <tumn> it's not happening
[06:05:52] <tumn> no matter how many times I run it
[06:06:41] <tumn> let's try a few more times here too
[06:06:44] <tumn> %5.1 print(94906267*94906267%112 == 94906267.0*94906267.0%112)
[06:06:45] <yalb> tumn: true
[06:06:47] <tumn> %5.1 print(94906267*94906267%112 == 94906267.0*94906267.0%112)
[06:06:47] <yalb> tumn: true
[06:06:49] <tumn> %5.1 print(94906267*94906267%112 == 94906267.0*94906267.0%112)
[06:06:49] <yalb> tumn: true
[06:06:57] <kakolainen[m]> you need Lua 5.4
[06:07:13] <tumn> why would I want lua 5.4?
[06:07:22] <tumn> that has integers in it, defeating the point of this experiment
[06:07:30] <kakolainen[m]> 5.1 doesn't have integers so you always get the wrong float answer
[06:07:42] <furq> in 5.1 those are the same number
[06:07:44] <tumn> "wrong" appears to work correctly (it's returning true - both numbers are equal)
[06:08:07] <kakolainen[m]> yes the same wrong number
[06:08:30] <tumn> if we're only operating with doubles it's the correct number
[06:08:36] <furq> no it isn't
[06:08:45] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[06:08:53] <kakolainen[m]> the correct result is 57 but when you do the math with double floats the result is 56.0
[06:08:54] <tumn> %5.1 print(94906267*94906267%112 == 94906267.0*94906267.0%112)
[06:08:55] <yalb> tumn: true
[06:09:12] <tumn> %5.1 print(94906267*94906267%112)
[06:09:13] <yalb> tumn: 56
[06:09:32] <tumn> so are the numbers just too large then?
[06:09:51] <kakolainen[m]> test with calculator and you'll realize that 56 is a wrong answer
[06:10:25] <tumn> what happens if you put the same number into an int? it'll return the wrong answer too, it will overflow
[06:10:32] <tumn> it's just a different kind of error
[06:10:42] <furq> it's not out of range
[06:11:04] <tumn> maxint is 2,147,483,647
[06:11:15] <kakolainen[m]> it's a simple proof that you can't even do 32 bit math with double floats since it fails with two 27bit numbers
[06:11:41] <furq> oh wait
[06:11:44] <furq> yeah it is out of range
[06:11:47] <tumn> 94906267*94906267 is in the range of 32 bits?
[06:11:58] <furq> it's 54 bits
[06:12:18] <no-n> why is it 54 bits?
[06:12:57] <furq> because it won't fit in 53 bits but 55 bits would be too many
[06:13:39] <tumn> good answer lol
[06:14:18] <no-n> h
[06:14:19] <no-n> oh
[06:15:09] <no-n> I guess I didn't know what "it" was :>
[06:16:20] <tumn> at the very least you proved PIL is wrong (doubles can't do long integer math on x64)
[06:16:33] *** Quits: ratchetfreak (~ratchetfr@d8d8779d9.access.telenet.be) (Read error: Connection reset by peer)
[06:16:57] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 240 seconds)
[06:17:18] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:d154:b93f:c8:b39) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:24:26] <kakolainen[m]> the tragedy is that the same calculation is very easy with 32bit ints to get the correct result, so more accurate is to say that double floats wont even do 32bit integer math wihtout rounding errors
[06:27:46] <tumn> not really?
[06:28:15] <tumn> the same calculation (94906267*94906267%112) overflows when done with a 32 bit int, I just tried it in gcc and the output was 25
[06:40:49] <tumn> actually weirdly enough I can't even get it to stop overflowing even when I use a int64_t
[06:41:15] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:d154:b93f:c8:b39)
[06:42:20] <tumn> that might just be my problem though
[06:43:38] <tumn> the 64 bit thing at least, the 32 bit calculation is wrong
[06:44:48] <kakolainen[m]> yeah maybe you are right, needs another modulo before the first multiplication which would also fix the calculation for double float, but CPU always gives the full result C is just too high level language that you can't access it
[06:46:41] <tumn> with another modulo the number stays in range - I have absolutely no idea what you're talking about with the "C is too high level" thing though
[06:46:56] <kakolainen[m]> anyway 94906267 is just only 90MB of data so if you have a large hash map with non power of 2 modulo then using double for the hashing might result bad 
[06:47:31] <tumn> 94906267 is 90mb of data? WHAT?
[06:48:10] <tumn> not sure if I'm stupid or if we're thinking of completely different things
[06:48:33] <tumn> in what world is 94906267 90mb of data?
[06:49:27] <kakolainen[m]> if you have array of chars the index at 94906267 would be about 90MB from the start
[06:50:00] <tumn> oh I see, I get it now
[06:50:31] <tumn> if we're talking about lua array-like tables they actually use integers under the hood even in 5.1, it's just hidden from the user
[06:51:52] <tumn> lua tables are a mix of regular arrays and hash maps
[06:53:17] <kakolainen[m]> if Lua uses 32bit integers for indexing then a max array size would be something like 15GB, I have used 5GB Lua arrays without trouble
[07:01:17] *** Quits: R2robot (~R2robot@user/r2robot) (Quit: Pull the lever, Kronk.  Wrong leverrrrrrr!)
[07:05:02] *** Joins: R2robot (~R2robot@user/r2robot)
[07:07:52] *** Quits: vancz (~vancz@user/vancz) (Quit: vancz)
[07:18:38] *** Quits: duuude (~user@user/duuude) (Ping timeout: 252 seconds)
[07:40:28] *** Joins: Elw3 (~Elw3@dynamic-002-247-241-023.2.247.pool.telefonica.de)
[07:43:20] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[07:52:45] *** Quits: Elw3 (~Elw3@dynamic-002-247-241-023.2.247.pool.telefonica.de) (Remote host closed the connection)
[07:53:07] *** Joins: Elw3 (~Elw3@dynamic-002-247-241-023.2.247.pool.telefonica.de)
[07:58:53] *** Joins: vancz (~vancz@user/vancz)
[08:13:02] *** Joins: Erutuon (~Erutuon@user/erutuon)
[08:28:00] *** Joins: Darkcoal (~user@user/Darkcoal)
[08:43:38] *** Joins: Psyraven (~Psyraven@p79032f3f.tokynt01.ap.so-net.ne.jp)
[09:01:02] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[09:26:52] *** Quits: tuvok (tuvok@Photography.tuvok.eu) (Ping timeout: 250 seconds)
[09:35:49] *** Quits: ubq323 (~ubq323@user/ubq323) (Ping timeout: 256 seconds)
[09:43:16] *** Joins: tuvok (tuvok@Photography.tuvok.eu)
[09:50:21] *** Joins: duuude (~user@user/duuude)
[09:52:51] *** Joins: glguy (x@libera/staff/glguy)
[10:22:40] *** Quits: s1b1 (~s1b1@user/s1b1) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[10:37:29] *** Joins: shestifled (~shestifle@5.149.255.13)
[10:39:00] *** Quits: fcr (~fran@r167-60-44-223.dialup.adsl.anteldata.net.uy) (Read error: Connection reset by peer)
[10:46:42] *** Joins: fcr (~fran@r167-60-71-197.dialup.adsl.anteldata.net.uy)
[10:51:25] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[10:53:22] *** Quits: duuude (~user@user/duuude) (Remote host closed the connection)
[10:53:51] *** Joins: duuude (~user@user/duuude)
[11:00:09] *** Joins: s1b1 (~s1b1@user/s1b1)
[11:05:40] *** Joins: ekathva (~ekathva@2001:999:50:cab1:b7e8:130b:c792:9fd)
[11:05:57] *** Quits: shestifled (~shestifle@5.149.255.13) (Ping timeout: 240 seconds)
[11:08:25] *** Quits: ekathva (~ekathva@2001:999:50:cab1:b7e8:130b:c792:9fd) (Max SendQ exceeded)
[11:08:47] *** Joins: ekathva (~ekathva@2001:999:50:cab1:b7e8:130b:c792:9fd)
[11:11:01] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 256 seconds)
[11:31:57] *** Quits: duuude (~user@user/duuude) (Ping timeout: 240 seconds)
[11:33:10] *** Joins: duuude (~user@user/duuude)
[11:52:23] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:d154:b93f:c8:b39) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:57:23] *** Joins: netlynx (~jan@94-226-69-15.access.telenet.be)
[12:05:11] *** Joins: shestifled (~shestifle@5.149.255.13)
[12:05:12] *** Quits: shestifled (~shestifle@5.149.255.13) (Remote host closed the connection)
[12:10:36] *** Quits: ekathva (~ekathva@2001:999:50:cab1:b7e8:130b:c792:9fd) (Quit: Leaving)
[12:14:43] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[12:36:45] *** Joins: Erutuon (~Erutuon@user/erutuon)
[13:01:58] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Quit: WeeChat 3.4)
[13:08:37] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[13:26:25] *** Joins: ratchetfreak (~ratchetfr@d8d8779d9.access.telenet.be)
[13:26:32] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:c49f:99ea:fe:b5c8)
[13:26:32] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:c49f:99ea:fe:b5c8) (Changing host)
[13:26:32] *** Joins: skapata (~Skapata@user/skapata)
[13:34:58] *** Joins: ratchetfreak_ (~ratchetfr@ptr-82rtos1uhakfz4xnvao.18120a2.ip6.access.telenet.be)
[13:39:35] *** Quits: Elw3 (~Elw3@dynamic-002-247-241-023.2.247.pool.telefonica.de) (Quit: Leaving)
[13:45:21] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[14:08:12] *** Joins: kurdt88 (~kurdt88@188.227.14.48)
[14:12:54] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 260 seconds)
[14:29:01] *** Joins: Erutuon (~Erutuon@user/erutuon)
[14:39:32] *** Quits: Erutuon (~Erutuon@user/erutuon) (Quit: WeeChat 2.8)
[14:55:45] *** Joins: Elw3 (~Elw3@dynamic-002-247-241-023.2.247.pool.telefonica.de)
[15:04:51] *** Quits: kurdt88 (~kurdt88@188.227.14.48) (Quit: Connection closed)
[15:26:21] *** Quits: ratchetfreak (~ratchetfr@d8d8779d9.access.telenet.be) (Ping timeout: 256 seconds)
[16:13:19] *** Quits: mva (znc@gentoo/developer/mva) (Quit: ZNC - https://znc.in)
[16:13:31] *** Joins: mva (znc@gentoo/developer/mva)
[16:34:31] *** Quits: mva (znc@gentoo/developer/mva) (Quit: ZNC - https://znc.in)
[16:34:52] *** Joins: mva (znc@gentoo/developer/mva)
[16:42:40] *** Joins: yte3 (~0@151.31.101.47)
[16:55:31] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-5d9e-b0d5-b070-4737.res6.spectrum.com)
[17:20:52] *** Quits: mva (znc@gentoo/developer/mva) (Quit: ZNC - https://znc.in)
[17:21:14] *** Joins: mva (znc@gentoo/developer/mva)
[17:33:17] *** Quits: Habbie (peter@lorentz.7bits.nl) (Ping timeout: 240 seconds)
[17:33:41] *** Joins: Habbie (peter@lorentz.7bits.nl)
[17:34:14] *** Joins: kurdt88 (~kurdt88@188.227.14.48)
[17:34:20] *** Quits: kurdt88 (~kurdt88@188.227.14.48) (Client Quit)
[17:35:35] *** Quits: mva (znc@gentoo/developer/mva) (Quit: ZNC - https://znc.in)
[17:35:47] *** Joins: mva (znc@gentoo/developer/mva)
[17:58:30] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[18:12:08] *** Quits: Elw3 (~Elw3@dynamic-002-247-241-023.2.247.pool.telefonica.de) (Quit: Leaving)
[18:27:46] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:c12f:e1ba:6835:4862)
[18:27:46] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:c12f:e1ba:6835:4862) (Changing host)
[18:27:46] *** Joins: skapata (~Skapata@user/skapata)
[18:39:36] *** Joins: ubq323 (~ubq323@m-a07dtjhflz4j.it.manchester.ac.uk)
[18:39:36] *** Quits: ubq323 (~ubq323@m-a07dtjhflz4j.it.manchester.ac.uk) (Changing host)
[18:39:36] *** Joins: ubq323 (~ubq323@user/ubq323)
[19:10:05] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[19:40:38] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[20:07:51] *** Joins: magla (~gelignite@55d4c694.access.ecotel.net)
[21:05:48] *** Joins: ratchetfreak (~ratchetfr@d8d8779d9.access.telenet.be)
[21:15:46] *** Quits: ubq323 (~ubq323@user/ubq323) (Ping timeout: 245 seconds)
[21:27:28] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[21:41:43] *** Joins: ubq323 (~ubq323@m-a07dtjhflz4j.it.manchester.ac.uk)
[21:41:43] *** Quits: ubq323 (~ubq323@m-a07dtjhflz4j.it.manchester.ac.uk) (Changing host)
[21:41:43] *** Joins: ubq323 (~ubq323@user/ubq323)
[21:43:11] *** Quits: ratchetfreak (~ratchetfr@d8d8779d9.access.telenet.be) (Ping timeout: 256 seconds)
[21:46:15] *** Quits: ubq323 (~ubq323@user/ubq323) (Ping timeout: 256 seconds)
[21:49:59] *** Quits: duuude (~user@user/duuude) (Ping timeout: 256 seconds)
[21:51:55] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[21:56:23] *** Joins: ubq323 (~ubq323@130.88.226.27)
[21:56:23] *** Quits: ubq323 (~ubq323@130.88.226.27) (Changing host)
[21:56:23] *** Joins: ubq323 (~ubq323@user/ubq323)
[22:00:25] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:d154:b93f:c8:b39)
[22:12:15] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[22:12:57] *** Quits: Psyraven (~Psyraven@p79032f3f.tokynt01.ap.so-net.ne.jp) (Ping timeout: 240 seconds)
[22:22:39] *** Quits: magla (~gelignite@55d4c694.access.ecotel.net) (Read error: Connection reset by peer)
[22:22:57] *** Joins: magla (~gelignite@55d4c694.access.ecotel.net)
[22:44:17] *** Quits: fcr (~fran@r167-60-71-197.dialup.adsl.anteldata.net.uy) (Ping timeout: 240 seconds)
[22:45:12] *** Quits: yte3 (~0@151.31.101.47) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:49:44] *** Joins: fcr (~fran@r167-56-25-169.dialup.adsl.anteldata.net.uy)
[23:30:31] *** Quits: Darkcoal (~user@user/Darkcoal) (Quit: Darkcoal)
[23:57:46] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[23:59:26] *** Parts: robertovpt[m] (~robertovp@2001:470:69fc:105::e0e2) ()
