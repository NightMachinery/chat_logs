[00:02:37] <gilberth> They were common in the 70s. At night electricity would be way cheaper, because there was a surplus. The electricity company would say when energy is to be heat those heat store again. They acted as a battery or device to cope with constant power output, yet varying demand over the day.
[00:03:05] <gilberth> * to be used to heat ;never edit your sentence.
[00:03:47] <gilberth> But it's politically incorrect. Figure. This is almost like religion.
[00:05:05] <pjb> Alfr: or, send solar panels in space where they'll be illuminated 24/24, and beam back the energy down as microwave lasers into your grid.
[00:05:14] <pjb> Alfr: but for that you'd need a space industry.
[00:05:16] <Alfr> gilberth, that also depends on where you live. If you have a power station within some reasonable distance it's waste heat would be more efficient.
[00:05:20] <gilberth> BTW we pay like EUR 0.30 per kWh electricity. Essentially paying for the electricity that wind turbines could in theory generate, were they connected to the grid.
[00:05:55] <pjb> Alfr: and for a space industry, you need money that you waste on wind turbines…
[00:06:12] <gilberth> Alfr: Yes, and that is allowed and common place. A lot of households in Hamburg are heated by waste heat from burning waste.
[00:06:32] <Alfr> pjb, it's only about 2(?)kW/m^2 up there, now what was that number again earlier?
[00:06:40] *** Quits: vats (~vats@103.158.91.123) (Ping timeout: 260 seconds)
[00:06:52] <pjb> Alfr: but space is big.
[00:07:18] <pjb> Alfr: instead of covering half Sahara with solar panels, you will have to put only 1/4 Sahara surface in space.
[00:07:32] <pjb> Actually 1/8 if you count that you don't have to load batteries for the night.
[00:08:22] <Alfr> pjb, strapping things onto a bomb and hoping it doesn't blow but transports your payload into orbit is really costly (also wrt the energy required).
[00:08:46] <pjb> Alfr: which is why those solar panels will have to be produced IN SPACE!
[00:09:05] <pjb> Eg. on the Moon, from which we can easily send them to Earth orbit.
[00:09:43] <pjb> Which is why instead of fucking with greenpeace those last 60 years we should have go on colonized the moon, installed industries there, and so on.
[00:09:54] <Alfr> pjb, oh okay, you mean that by space industry.
[00:10:11] <pjb> Instead of asking like idiot why go to space instead of solving problems and Earth,and still having done nothing to solve problems on Earth.  Idiots!
[00:11:29] <pjb> Alfr: indeed, Earth is the biggest solid planet gravity well in the solar system; next is Venus. All the other planets and big satellites are 1/3 g, and way better for space bases, and industries.
[00:12:24] <pjb> We could have mining and transformation industries on Mercury, using a lot of energy available on the terminator (solar or thermal, with pipes on the cold and hot side, that have a big temperature differential).
[00:12:54] <Alfr> pjb, it Mercury tidally locked? Didn't know that.
[00:13:01] <sham1> pjb: asking "why go to space when Earth have problem" is just people being ignorant about what space tech has given us as a whole
[00:13:24] <pjb> Alfr: it's not, but it's slow enough that we can have some mobile industry, notaby learn its poles.
[00:13:24] <Alfr> s/it/is/
[00:13:32] <pjb> sham1: indeed.
[00:13:50] <Alfr> pjb, ah, clever.
[00:14:13] <pjb> With what we mine on Mercury, we could build space ships, space stations, and factories.  Then we can fetch methane from Jupiter, H2O from comets, even O2 from Earth, or just use nuclear energy with any kind of reaction mass.
[00:14:31] <pjb> s/notaby learn/notably near/
[00:15:38] <pjb> Anything you build in space is bound to make you an instant trillionaire, given the cost to put the equivalent mass on orbit from Earth.
[00:15:57] <pjb> Even taking into account the price drops from SpaceX.
[00:18:12] <Alfr> pjb, if you can automate it, ferrying people around isn't feasible.
[00:22:34] <edgar-rft> you could narrow down the costs by using zero-width space
[00:23:40] <pjb> Well, it's said the US already has a tunnel from Earth to Mars, and has sent people to Mars (and elsewhere).
[00:24:37] <pjb> But as for the cost, I'm not sure its cheap, to wit all the money that goes to dark projects. You didn't think they really paid $50k on a toilet, or trillions of the F-35, did you?  The money was used for other secret programs.
[00:25:36] <edgar-rft> there is no lightspeed in the darknet
[00:26:21] <selwyn> who says that?
[00:27:57] <edgar-rft> the inventor of coke light
[00:28:21] * hayley got an email back from Discord too.
[00:29:35] <hayley> They told me to use moderation tools first. Not really going to help, as the malware is spread outside Discord, but sure. Then they wanted me to triage it. I'd guess everyone picks the most pressing option, which sucks because I had to pick it too.
[00:30:21] *** Joins: Inline (~Inline@2a02:908:1252:7a80:5266:49bb:7a4e:e331)
[00:40:34] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 260 seconds)
[00:50:00] <Alfr> pjb, hm ... isn't Mercury a bit too far down the Sun's gravity well? You can steal momentum from Mercury/Venus on your way out but it would require many flybys.
[01:01:59] <gilberth> Could I guess with low rate of error the programming language used on say triplet frequency?
[01:03:42] <gilberth> I could probably tell s-expressions from curly syntax, But what about telling C from JS or CL from Scheme?
[01:05:05] <hayley> "str" in C?
[01:05:23] <hayley> I'd wager triplets give you enough of names to make guesses.
[01:05:49] <gilberth> hayley: Perhaps. I once read triplet frequency works good on human languages.
[01:06:11] <hayley> https://www.youtube.com/watch?v=s8xzdy2cxqo
[01:06:12] -ixelp- This Town Ain't Big Enough for Both of Us - "Weird Al" Yankovic - YouTube
[01:06:43] <moon-child> gilberth: to distinguish c from js, look for ->
[01:06:54] <gilberth> hayley: Makes sense. "fun" will be more frequent in JS than in C. And for overall syntax: You don't find so many "{\n" or "}\n" in Lisp.
[01:07:03] <moon-child> for scheme, also look for -> :P
[01:07:22] <moon-child> (and, maybe also ?)
[01:08:16] <gilberth> "ne " => more often in Scheme, perhaps.
[01:08:49] <gilberth> moon-child: And line noise for Perl.
[01:08:54] <Alfr> gilberth, Xp or X-Y-p for CL.
[01:09:08] <Alfr> gilberth, admittedly that's only convention.
[01:09:25] <moon-child> x-y-p isn't a triplet, though (assuming means triplet of characters)
[01:09:35] <gilberth> Alfr: I want to work with triplets only and not manually craft any rules.
[01:09:44] <moon-child> oh, if you see square brackets it's definitely scheme
[01:10:00] <GreaseMonkey> not true, there's also clojure
[01:10:14] <moon-child> well, clojure can be identified by its curly braces
[01:10:39] <GreaseMonkey> various clojure-likes also tend to use square brackets IIRC
[01:10:47] <GreaseMonkey> and i don't use square brackets when i code in scheme
[01:11:17] <moon-child> presence of square brackets coupled with absence of curly ones is a sufficient, but not necessary condition for scheme; fair?
[01:11:21] * hayley uses square brackets
[01:11:39] <gilberth> I would need some bulk of code and run an experiment. I want no handcrafted rules at all.
[01:11:57] <gilberth> Could I also tell who wrote the code?
[01:12:01] <Alfr> moon-child, oh missed the triplet part.
[01:12:19] <moon-child> hayley: I mean, once you get into read-macros, you have to throw everything out.  I can write a reader macro that lets me write c inline; good luck making a triplet-heuristic that detects that as cl
[01:12:44] <gilberth> I mean, you probably see more "&au" and "res" in my code than in your code.
[01:13:50] <gilberth> moon-child: When you do that, it's not CL anymore. Of course you can completely alter the syntax, if you wish.
[01:16:29] <moon-child> clearly it is cl.  But I would say: a language with read-macros cannot be analysed in a context-free fashion (e.g. by looking at triplets); but most cl code is written without read-macros
[01:16:43] <gilberth> Ok. I have plenty of CL and C code on my disk. I would need plenty of code in different languages from different authors. Inhale github?
[01:17:05] <White_Flame> github already does this, but probably with more "standard" statistical classifiers
[01:17:45] <gilberth> moon-child: I want a guess. It's besides the point that you could dodge it.
[01:17:57] <moon-child> White_Flame: indeed, and 'file' has its own heuristics which are probably much better
[01:17:59] <moon-child> gilberth: indeed
[01:18:04] <hayley> Ah yes, the NewLisp classifier
[01:19:04] <gilberth> Perhaps, I'll run an experiment later tonight.
[01:19:34] <gilberth> Would be fun to tell Lisp Machine Lisp from Common Lisp, too.
[01:20:17] <hayley> Do they use DW, TV or CLIM?
[01:21:05] <gilberth> hayley: On the CADR it's TV. However, they use "/" where we use "\" these days.
[01:21:51] <gilberth> And octal and upper case most of the time.
[01:22:46] <gilberth> You won't spot as many "[0-9]. " in CL as in CADR code.
[01:26:07] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[01:33:02] <sham1> fair? would be very much an identifiable Scheme procedure name
[01:33:09] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[01:33:46] <hayley> gilberth: Where can I get the latest isum code? I have a copy of clex2 but idk if that's the best source for it.
[01:34:12] <Gnuxie> selwyn: have you seen the latest bald and bankrupt lmao 
[01:37:49] *** Quits: Inline (~Inline@2a02:908:1252:7a80:5266:49bb:7a4e:e331) (Ping timeout: 250 seconds)
[01:38:20] <gilberth> hayley: It's the latest. I haven't changed it the last 20 or so years. Also <http://clim.rocks/gilbert/isum.lisp> which should be the same.
[01:38:40] <hayley> lol
[01:38:41] <hayley> Thanks.
[01:39:34] <gilberth> What's so funny about it?
[01:39:55] <hayley> "It's the latest. I haven't changed it the last 20 or so years."
[01:40:02] <selwyn> lets have a look
[01:40:06] <gilberth> I could craft a system called de.bauhh.isum, so that we could actually share.
[01:40:19] <gilberth> hayley: And that is funny how?
[01:40:35] <hayley> I asked if there was a later version.
[01:41:09] <hayley> But are you sure there's enough (THE FIXNUM ...)?
[01:41:10] <gilberth> There is none. It's the latest. 20 years old. Late enough?
[01:41:18] <selwyn> i count at least 3 balds
[01:41:38] <gilberth> hayley: SBCL doesn't complain, last time I checked.
[01:42:41] <hayley> Since I am always waiting for the CL compiler, I'll probably unoptimize it.
[01:43:04] <hayley> SB-SIMD also seems to keep one waiting for compiles, idk why.
[01:43:41] <gilberth> Do that, if you wish. It's important for me for the isum code to be blazing fast as I am not a mere grepper.
[01:44:11] <selwyn> sigma male grepset
[01:44:23] <gilberth> hayley: But you don't compile isum ops, do you?
[01:44:40] <hayley> Currently not, hence why I want to use isum.
[01:45:09] <gilberth> Yes, and there is isum-case for dispatch.
[01:45:13] <hayley> The compiler only knows about sets of the form {a, b, ...} and Σ \ {a, b, ...} for arbitrary elements a, b, and so on.
[01:45:46] <gilberth> isum-case does an inline binary search.
[01:46:11] <gilberth> Which was important for me as I face rather large dispatches in a scanner.
[01:47:06] <hayley> ok. 
[01:47:53] <hayley> https://github.com/telekons/one-more-re-nightmare/blob/master/Code/DFA-construction/sets.lisp ; Recall that I just followed the Owens paper for the first compiler.
[01:47:54] -ixelp- one-more-re-nightmare/sets.lisp at master · telekons/one-more-re-nightmare · GitHub
[01:48:42] <gilberth> Which when in doubt you could also find at <http://clim.rocks/gilbert/isum-case.lisp> I put it there for you ages ago.
[01:49:31] <hayley> isum version 2: parallel has two #\l and then one, not the other way around
[01:50:03] <gilberth> Have I misspeeled that word again?
[01:51:44] <hayley>         ;; Now traverse A and B in paralell and generate the resulting sequence.
[01:51:57] <hayley> ";; Now traverse A and B in paralell [sic] and generate the resulting sequence."
[01:52:24] <gilberth> Yes, my dear, I always misspell that word. Thanks.
[01:54:01] <moon-child> gilberth: I think you may go faster if you first check for inside/outside the entire range of the isum
[01:54:47] <gilberth> For which I need to get at the last element of both. What's the gain?
[01:55:13] <gilberth> And toggle a bit while doing so.
[01:56:13] <moon-child> I mean for isum-case
[01:56:42] <gilberth> Oh, I see.
[01:57:26] <gilberth> Ok, in my application the mapping is always a complete mapping, no fall through. /me thinks.
[01:58:38] <moon-child> ah, so the default bit is not used there
[01:58:39] <gilberth> You would need a guessimate on the frequency of individual code points to test and balance the tree accordingly. This could be a feed-back optimization.
[01:59:19] <moon-child> so kind of like a
[01:59:21] <moon-child> jit?
[01:59:23] * moon-child hides
[01:59:46] * hayley hides
[02:00:01] <gilberth> My application is a batch application. You craft your scanner once. But, hey, that is a terrific idea!
[02:00:14] <sham1> Batch JIT!
[02:01:02] <gilberth> You could use profile guided optimization with gcc or clang. Why not with my scanner generator?
[02:14:48] <pjb> Alfr: good question. Ve = k/√d  (mapcar (lambda (d) (/ (/ (sqrt d)) (/ (sqrt 149.6e9)))) '(57.91e9 108.2e9 149.6e9 227.9e9)) #| --> (1.6072706 1.1758506 1.0 0.8102026) |# this is the ratio of escape velocities of Mercury, Venus, Earth and Mars over Earth.
[02:17:19] <pjb> Alfr:  and the ratio of escape velocity from the planet surfaces between Mercury and Earth is (/ 4.25 11.186) #| --> 0.37993923 |#  which is still good for Mercury: (*  1.6072706  (/ 4.25 11.186)) #| --> 0.61066514 |#  compared to Earth surface.
[02:18:02] <pjb> So you spend a little more to get away from the Sun, but since you spare a lot to go from surface to orbit, it's a win.
[02:48:01] <Alfr> pjb, energy requirements are the squares of those. Actually worse unless we build space cannons, or the rocket equation is going to bite us.
[02:48:12] * hayley probably has isum working.
[02:51:45] <Alfr> pjb, also looking at those ratios it nice, but realtive to the Sun v_e,mercury - v_e,earth is more than twice v_e,earth relative to Earth.
[02:55:31] <hayley> And it seems that compiling the telephone RE decreased from 24.6ms to 17.4ms using isum, too.
[02:57:21] <gilberth> hayley: Congrats!
[02:57:40] * hayley wonders why the (a|aa)* test feels like approaching 2GB/s today.
[02:58:01] <gilberth> Is that fast or slow?
[02:58:06] <hayley> Rather 2Gchar/s, it'd be 8GB/s for 32-bit characters. I keep forgetting.
[02:58:18] <hayley> Usually it runs about 1.7Gchar/s.
[02:58:29] *** Joins: dra (~dra@2a04:4540:6403:9d00:b54c:f686:ecb1:2f13)
[02:58:30] <dra> Hello!
[02:58:41] <gilberth> hayley: Improved too?
[02:58:45] <hayley> gilberth: idk, is 2Gchar/s on one core usually slow?
[02:58:57] <hayley> Somehow, yes. Though the stupid ab|ac test on the README isn't any faster.
[02:59:33] <gilberth> That isn't slow, I'd say. It's 8GB/s after all.
[02:59:53] <gilberth> I just wasn't sure what speed you measure otherwise.
[03:00:37] <hayley> Maybe SBCL likes = rather than CHAR= more somehow? idk
[03:00:46] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[03:02:00] <hayley> It's still being dumb and fixnum boxing just to CMP R12, <constant>.
[03:02:01] <gilberth> Could be it. I always worked on char codes, as (code-char x) may return NIL for any random x. And isums are open, so I can't put characters there.
[03:02:38] <gilberth> Half-open to be precise.
[03:03:38] <gilberth> hayley: For CMP? That's sad.
[03:03:41] <hayley> Yeah, SBCL only boxes fixnums, and seems to think it should keep characters unboxed.
[03:03:56] <hayley> Yes.
[03:03:58] <gilberth> Odd.
[03:04:49] <gilberth> Perhaps SBCL does exactly that because not all positive integers below char-code-limit may be boxed?
[03:05:16] <gilberth> non-negative, rather.
[03:05:26] <hayley> For a char-code-limit of 1114112?
[03:05:50] <gilberth> Doesn't SBCL care about surrogates?
[03:06:12] * hayley thinks (mod 1114112) <: (unsigned-byte 64)
[03:06:30] <gilberth> I get (code-char #xD800) => NIL.
[03:06:45] <hayley> Ah, good point.
[03:07:04] <hayley> But we do CHAR-CODE, not the other way around.
[03:07:24] <gilberth> Ah, ok.
[03:08:36] <hayley> Well, I did set the SBCL compiler to (SPEED 0) and then reduced the number of iterations for constraint propagation, but it still doesn't make a difference relative to (SPEED 3).
[03:09:22] <gilberth> Does COMPILATION-SPEED make a difference?
[03:09:57] * hayley checks
[03:10:21] <gilberth> And besides, isn't 17ms fast enough?
[03:11:13] <hayley> 17ms is with (SPEED 0) (COMPILATION-SPEED 3) and SBCL internals diddled.
[03:13:09] <hayley> Now it returned to 1.7Gchar/s. Oh well.
[03:13:53] <hayley> At that point with long strings I guess we care about memory bandwidth.
[03:22:44] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[03:24:41] <gilberth> For speed you want to scan octets anyway, don't forget that UTF-8 has to be decoded, too. Or where do all your characters come from, if not from I/O?
[03:25:22] *** Joins: Inline (~Inline@2a02:908:1252:7a80:43ab:5253:5a93:ac1b)
[03:26:38] <gilberth> This is why my scanner generator has an :ELEMENT-TYPE option.
[03:29:18] *** Quits: Inline (~Inline@2a02:908:1252:7a80:43ab:5253:5a93:ac1b) (Client Quit)
[03:41:08] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c3a4:950f:3557:e668)
[03:42:25] *** Quits: dra (~dra@2a04:4540:6403:9d00:b54c:f686:ecb1:2f13) (Quit: Leaving)
[03:42:41] <hayley> Yes, I can handle bytes too, if we just change the layout.
[03:43:47] <gilberth> I still don't have a function to turn UTF-8 ranges into an octet based RE.
[03:44:01] <gilberth> Unicode ranges rather.
[03:44:08] <hayley> https://github.com/telekons/one-more-re-nightmare/blob/master/Code/Interface/convert-to-bytes.lisp
[03:44:09] -ixelp- one-more-re-nightmare/convert-to-bytes.lisp at master · telekons/one-more-re-nightmare · GitHub
[03:44:54] <gilberth> I don't see ranges handled.
[03:45:03] <hayley> Yes, right.
[03:45:19] <hayley> This is from before ISUM, so just with element sets again.
[03:45:56] <hayley> UTF-8 only has...4 ranges that you'd split character ranges over.
[03:46:23] <gilberth> Ranges are trivial but tedious, indeed.
[03:47:47] <hayley> https://www.youtube.com/watch?v=YBT_PLESyUs siren starts croud cheers
[03:47:48] -ixelp- OMD-Los Angeles 10.7.11, Dazzle Ships and Stanlow - YouTube
[03:48:19] <hayley> One of the few places where that's not fucked up. Same for the start of International, where a radio broadcaster announces that someone's hands were cut off, and the crowd cheers again.
[03:48:49] <gilberth> But you need to be careful. Say you have an two octet encoding, there may be three things. Octet 1 being sth and then octet-2 in a range, octet 1 being a range and octet-2 an "utf-8 wildcard" and octet-1 being sth singleton again and octet-2 being a range.
[03:49:04] <hayley> Sure.
[03:49:41] <gilberth> I just never bothered to hack that. Too lazy.
[03:49:43] <hayley> The easy way out would just be to map conversion over characters, and then rebuild the ranges/set, but it's probably slow.
[03:50:19] <gilberth> The whole RE engine could do that for you, yes.
[03:50:40] <hayley> You could basically do that if you had MAP-ELEMENTS for ISUM. (In the case of a negative set, just grab the elements that aren't in the set, and negate the union produced.)
[03:50:45] <gilberth> With isums that even would be feasible. :-)
[03:51:43] <gilberth> hayley: You don't have isum yet at that part. You have a surface syntax like (<= #\a #\z) which you turn into an RE and that RE has isums.
[03:52:03] <hayley> Yes, I have [a-z] syntax.
[03:52:12] <gilberth> And better observe the surrogates, too.
[03:52:17] <hayley> That's not all of [...] syntax, but enough to have isums.
[03:52:43] <hayley> .oO(Can't have shit in Unicode)
[03:52:58] <gilberth> I use <= in my s-expression syntax. And of course I can grok the whole POSIX syntax.
[03:53:34] * hayley checks assignment results
[03:53:45] *** sm2n_ is now known as sm2n
[03:53:47] <hayley> Well, they took away my marks for the development logs, but I had 5/5 before.
[03:54:13] <hayley> My final log does say "Fuck that." regarding the lack of specifications, come to think of it.
[04:02:58] <gilberth> hayley: Any idea how I should call a Markdown-like processor written in CL?
[04:03:17] <hayley> ad-hoc-bug-ridden-text-format
[04:03:31] <gilberth> Bug ridden?
[04:03:47] <hayley> Markdown?
[04:05:11] <gilberth> It actually works quite well. But I want it to do more like Lisp function documentation, which I have. But I am tired of all the fragile regular expression based stuff in Perl.
[04:06:04] <gilberth> Which turns into quoting being fun and, yes, ad-hoc-and-ill-specified.
[04:06:41] <gilberth> And I want to embed CL code, which would generate me SVG via CLIM, to be embedded right in the HTML.
[04:07:10] <hayley> Just use CLIM to generate the website?
[04:07:49] <gilberth> Not pleasant to type. And CLIM has no concept of typesetting.
[04:10:20] <gilberth> I like the markdown idea, because it is so easy to type. It's not like I typeset math all the time. Actually I do almost none.
[04:11:33] <hayley> https://blog.sigplan.org/2021/11/18/undefined-behavior-deserves-a-better-reputation/ bruh
[04:12:27] * hayley uploaded an image: (241KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/EWQvpyIxUhVITGjFqXUdvOfM/faa-committee.jpeg >
[04:17:16] <gilberth> The programmer knows best and makes no mistakes. => All C code is completely safe.
[04:17:55] <gilberth> But we have (SAFETY 0), too. And I don't like it.
[04:18:09] <hayley> They were arguing for inducing your own UB by marking some control flow as unreachable, but people are going to abuse that to shit.
[04:19:24] <gilberth> This is very much by the backdoor. Hilarious as this already relies on some compiler smartness. CL hackers are more upfront! ;)
[04:20:19] <hayley> But I assume now you want to be able to bound how UB can mess up your day. At least we have (SAFETY 0) and everything is safe outside of that.
[04:20:46] <gilberth> My first though however was: .oO(What if data.len() is odd and data.len()/2 is a rational?)
[04:21:11] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 250 seconds)
[04:21:19] <hayley> Could the compiler use your (implicit) assertion about length to fold out other branches?
[04:21:23] <hayley> gilberth: Very funny.
[04:22:27] <hayley> But if it can, then you've made more stuff unsafe, which is Very Bad.
[04:22:39] <gilberth> I once did: (declaim (optimize (safety 3) (debug 3))) (unintern 'cl:optimize :cl) (export (intern "OPTIMIZE" :cl) :cl) (declaim (declaration cl:optimize))
[04:22:53] *** Joins: aeth (~aeth@user/aeth)
[04:23:18] <gilberth> I was getting random bus faults with CLX and wondered why.
[04:24:28] <moon-child> 'It might seem like mid already does the absolute minimum amount of work required for the task, but there is some hidden cost in the array access data[_]: the compiler has to insert a bounds-check here to ensure that we do not access data beyond the size of the array that data points to'  i want elision
[04:25:48] <hayley> "What do we want?" "Constraint inference!" "When do we want it?" "At all program points!"
[04:27:18] <gilberth> So now, why is Rust proposed for kernel hacking again?
[04:27:39] <hayley> FAA committee was running short on money?
[04:27:51] <hayley> It is a day ending in -y, time to play https://www.youtube.com/watch?v=tbHix56qfG8
[04:27:51] -ixelp- The Aircrash Bureau - YouTube
[04:29:09] <gilberth> My day ends in "g", and not every day does that.
[04:30:02] <gilberth> Actually it was an "h" two hours ago.
[04:31:10] <gilberth> Anyhow, do I hear any serious offers for a name for yet-another-markup-processor?
[04:31:56] <hayley> If cl-blah claims are illegitamate, call it markdown-rs to annoy people?
[04:32:32] <gilberth> Very funny. What meaning of "serious" didn't you get?
[04:32:49] <hayley> Reminds me that no one was able to read the performance graph on the 42nd-at-Threadmill poster, so they thought I actually had made a concurrent hash table in Rust.
[04:33:01] <gilberth> I should just number my hackings.
[04:33:32] <hayley> But there is an arrow drawn on from "A blazing fast concurrent hash map for Rust" to the line representing the slowest hash map tested.
[04:33:52] <moon-child> gilberth: taking after chopin?
[04:34:01] * hayley uploaded an image: (113KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/siQcTRJxEIAWguccdvnLQBIq/threadmill-poster.png >
[04:34:56] <hayley> IOW I convinced a bunch of Rust programmers into spreading the news of a CL library that greatly outperformed anything in Rust.
[04:35:02] <gilberth> moon-child: Perhaps, I am incredible bad at finding names. Also for single function. And you can't name any function just FOO.
[04:36:01] <hayley> gilberth: So, do the same thing and you'll get free publicity.
[04:36:14] <moon-child> haha
[04:36:20] <gilberth> moon-child: Or Zuse. He just numbers his machines.
[04:36:46] <gilberth> hayley: Do I need publicity?
[04:37:03] <hayley> gilberth: Hard to say.
[04:37:40] <gilberth> I once slashdoted our web server at our uni with a project of mine. Does that count?
[04:38:25] <gilberth> Server also handled all the email, so email was down for some hours campus-wide.
[04:38:44] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Read error: Connection reset by peer)
[04:39:15] <gilberth> Sysadmin and me met via talk(1). My account was moved to a spare and more powerful machine.
[04:40:13] <hayley> What project?
[04:41:05] <gilberth> I hacked X11 to use OpenGL as the graphics driver to have composing and an alpha channel with plain old X11.
[04:43:34] <gilberth> NVIDIA sent me a Quadro board for free. :-)
[04:43:46] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[04:44:46] <gilberth> This was in 2003 or so.
[04:46:42] <gilberth> Anyhow, the server would do the composing for you. And any window would have pixels with a full alpha-channel. I got side-tracked and founded myself a little later, so didn't follow that route.
[04:50:27] *** Quits: Catie (~user@user/catie) (Quit: going home)
[04:53:54] * hayley asks in #sbcl if anything can be done about the pointless boxing.
[04:56:23] <hayley> A: "it would be nice to have a pony"
[04:57:08] <kakuhen> what if lispcafe except it's a physical location somewhere
[04:57:17] * gilberth wants a Porsche rather. Girls like Porsches.
[04:57:43] <kakuhen> i dont like porsches, but im also not a girl, so i guess that works logically
[04:57:50] * hayley would settle for a bike
[04:57:56] <White_Flame> it's nice not having an epony, though
[04:58:18] <gilberth> Well, its transitive. And I like girls.
[04:58:36] <pl> gilberth: ... Xgl?
[04:58:44] <kakuhen> i like girls, and girls like porsches, therefore i like porsches
[04:58:45] <kakuhen> we're plato now
[04:58:47] <gilberth> White_Flame: You still remember that entity?
[04:59:23] <hayley> What's weird is that SBCL doesn't do the boxing stuff for SINGLE-FLOAT or DOUBLE-FLOAT vectors, just integers.
[04:59:37] <White_Flame> yeah, he was extremely present in the leenode -> libera transition, and still is a rabblerouser in the remnants of leenode
[04:59:48] <gilberth> pl: Nope. Xgl is later.
[04:59:58] <hayley> Well, SBCL does keep an (UNSIGNED-BYTE 64) unboxed, but it has no choice.
[05:01:12] <pl> gilberth: that said, it's funny how both what you described and Xgl essentially did a simplified version of what Xsgi did :D
[05:01:17] <kakuhen> oh i finally understand what white_flame meant by "epony"
[05:01:25] <kakuhen> that's the dude on the gnu channels saying stuff
[05:01:30] <kakuhen> during may 
[05:02:00] <gilberth> We had our fair share of epony here in #lispcafe, too.
[05:02:07] <kakuhen> yuck
[05:03:38] * hayley looks through the VOPs for AREF stuff.
[05:04:10] <hayley> (define-data-vector-frobs simple-array-unsigned-byte-8 movzx :byte positive-fixnum unsigned-reg signed-reg) ; Perhaps I just get rid of POSITIVE-FIXNUM? SBCL can box by itself anyway.
[05:04:49] <gilberth> You must be desperate.
[05:06:12] <gilberth> But so are poor greppers, always looking for the last cycle to squeeze.
[05:06:50] <hayley> ;; I can see no reason this would ever be used. \n ;; (or fixnum character|unbound-marker) is implausible. \n (defun %test-fixnum-and-immediate (value target not-p immediate) (error "WAT") ...)
[05:10:09] <hayley> gilberth: You start to run out of things to do at 4\tau/character or whatever it was. But having SHL just to do a comparison is stupid.
[05:11:34] <gilberth> Which makes me wonder, as all those redundant MOVs you experienced.
[05:12:02] <hayley> At least the redundant MOVs and XORs are outside the DFA, so they don't hurt as much.
[05:12:19] <gilberth> Still funny.
[05:12:39] <hayley> I mean, we know that SBCL does copy propagation way too late.
[05:12:42] <gilberth> Peephole? scnr.
[05:14:05] <gilberth> hayley: Why don't you compile to assembler (assembly?) in the first place? Generate a VOP just for the RE you have.
[05:14:41] <hayley> scnr?
[05:15:29] <hayley> I guess I could write up some VOPs. It wouldn't be one VOP per RE, since I'd need to provide my own lifetime analysis.
[05:16:16] <gilberth> BTW I believe it was Thompson himself, who published his method to be used for what we would call JITing. REs would be compiled to machine code for execution.
[05:17:42] * gilberth should keep papers he reads at some organized directory for reference.
[05:17:54] <hayley> So I can play with *efficiency-note-cost-threshold* to see which VOPs were chosen.
[05:18:03] <hayley> I do that sometimes, the directory is called #lispcafe.
[05:18:23] <gilberth> Handy.
[05:19:42] * hayley changes it to 1 and gets an internal error.
[05:20:05] <hayley> Rather 0 is broken, 1 works.
[05:20:33] <gilberth> More bugs!
[05:21:07] <hayley> I suspect that boxing or not have the same cost.
[05:21:46] <gilberth> Can't SBCL been taught to keep it one way or the other all the time?
[05:23:08] <hayley> Well, I'd think so.
[05:23:39] <gilberth> Then think harder, so SBCL will notice.
[05:23:50] * hayley attempts to start the SBCL IR visualizer
[05:23:57] <hayley> There is no applicable method for the generic function #<STANDARD-GENERIC-FUNCTION CLIM:POLYGON-POINTS (4)> when called with arguments (#<CLIM-INTERNALS::NOWHERE-REGION {100370DFA3}>).
[05:24:43] <gilberth> Yep, +nowhere+ is not a polygon.
[05:25:00] <hayley> Time to preemptively update McCLIM.
[05:25:34] <gilberth> Common nasty problem. +nowhere+ also has no bounding box.
[05:26:14] <hayley> Seems to happen when drawing scrollbars.
[05:26:29] <gilberth> Then someone broke my code.
[05:26:38] <hayley> Then I wonder how it got a bounding rectangle to play with.
[05:27:21] <gilberth> Who got a bounding rectangle?
[05:30:26] <hayley> Does x1 = y1 = x2 = y2 give you nowhere?
[05:30:57] <gilberth> With make-rectangle*? Yes.
[05:31:23] <hayley> Okay. I just added a check for when X1 = X2 or Y1 = Y2, and now it works.
[05:31:56] <hayley> Don't worry, jackdaniel broke it, not you.
[05:32:32] <gilberth> I never worried. But have been somebody else as as I left it was fine.
[05:32:48] <gilberth> * must have been
[05:33:22] <hayley> Aha, now the visualizer is telling me what's going on.
[05:33:26] <gilberth> hayley: Did you use coordinate= ?
[05:33:35] <hayley> gilberth: Nope.
[05:33:45] <gilberth> You failed.
[05:33:52] <hayley> DATA-VECTOR-REF-WITH-OFFSET -> MOVE-FROM-WORD/FIXNUM -> FAST-IF-EQ-FIXNUM
[05:34:30] <hayley> However, SBCL picks FAST-IF-EQ-UNSIGNED for an (UNSIGNED-BYTE 64) vector.
[05:35:20] <hayley> (def fast-if-eq-unsigned fast-if-eql/unsigned 5) (def fast-if-eq-fixnum fast-eql/fixnum 3) What the fuck?
[05:36:35] <hayley> I've tried to flatten out the costs, so that the compiler just picks whatever it has handy hopefully.
[05:37:25] <hayley> ...and it still picks boxing. Sure.
[05:38:30] <hayley> "there is actually no cost calculation whatsoever"
[05:49:32] <hayley> gilberth: Can I cheat and use (CHAR<= #.(CODE-CHAR a) X #.(CODE-CHAR (1- b))) to test if X is in [a, b)?
[05:51:05] <hayley> No, we have gaps in CODE-CHAR.
[05:52:45] <gilberth> As 'b' comes from an upper bound, which has been specified by a character with code b-1 initially, that should work. But: better safe guard.
[05:53:53] <hayley> True.
[05:54:02] <hayley> Still doesn't help when I want to match bytes.
[05:54:34] <gilberth> When you match bytes, what is a CHAR-anything doing there at all?
[05:54:56] <hayley> It wouldn't be there, but SBCL still insists on using boxing with byte vectors too.
[05:55:17] <gilberth> Actually for the isum stuff, you need to do the (1- b) business.
[05:57:05] <gilberth> I have: (define-constant +isum-any-character+ (list 0 char-code-limit)). There is no char with code CHAR-CODE-LIMIT to begin with.
[05:58:15] <hayley> Apparently I still have the IPC free to do boxing, but it still infuriates me that SBCL makes such a stupid decision.
[05:59:05] <gilberth> My sets are half-open. So when all your sets come from [inclusive] bounds initially specified by existing characters, (1- b) is completely safe.
[06:00:10] <gilberth> But then I don't have that trouble, because my driver works on code points, not characters.
[06:00:57] <gilberth> In part this is because I have -1 for EOF sometimes.
[06:03:50] * hayley scratches head
[06:04:19] <hayley> Apparently I am slower than CL-PPCRE now, with an IPC of 1.17 rather than CL-PPCRE's 3.76. What the actual fuck?
[06:06:41] *** Quits: random-nick (~random-ni@87.116.180.220) (Ping timeout: 256 seconds)
[06:10:18] <hayley> Without ISUM I have a IPC of 3.35 and it's pretty fast. What happened?
[06:12:41] *** Alfr is now known as Guest9208
[06:12:46] *** Joins: Alfr (~Alfr@user/alfr)
[06:13:08] <gilberth> That sound's bad, for me, tell me what happened, when you figured out.
[06:13:51] <gilberth> How did the apostrophe get in there? Who let it loose?
[06:14:19] <hayley> Looks like it's made the tight loop where we look for a " (at the start of a resolution like "1024x768" in Xorg.0.log) slower.
[06:15:10] *** Quits: Guest9208 (~Alfr@user/alfr) (Ping timeout: 260 seconds)
[06:15:11] <gilberth> Hmm. Bad luck with cache line alignment?
[06:15:40] <hayley> I'd need to check how either one works.
[06:17:02] <gilberth> My guess is: #\" is 32 decimal, pretty early. And you were testing for that first and now there is a binary search looking for more.
[06:17:09] <gilberth> 34 rather
[06:17:56] <hayley> I am not using ISUM-CASE, though I probably should. But it's not as if there are that many branches anyway.
[06:18:44] <gilberth> So what did change with your driver, when you ISUM for DFA construction only?
[06:19:41] <hayley> It tests (<= a (CHAR-CODE x) b) rather than (OR (CHAR= x a) (CHAR= x ...) (CHAR= x b)) more or less.
[06:20:19] <gilberth> Ah.
[06:21:34] <gilberth> Still, when you were lucky and tested for #\" with the non-ISUM code, that was one CMP, now it's two?
[06:21:59] <gilberth> tested first.
[06:22:18] <gilberth> So profile-guided-optimization, anyone?
[06:22:23] <hayley> Let's see...
[06:22:54] <gilberth> Or prioritize the self-looping transitions?
[06:23:29] <hayley> https://plaster.tymoon.eu/view/2722
[06:23:48] *** Quits: kuao (uid504326@id-504326.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[06:25:28] <hayley> Oh, SBCL is using two branches for (<= a X a)?
[06:25:51] <gilberth> Where is the difference, but the SHL?
[06:26:17] * hayley 's head hits desk
[06:26:37] * gilberth was too slow with a pillow.
[06:26:52] <hayley> gilberth: Also note JNL rather than JNE
[06:26:57] <gilberth> Sorry, hayley. Next time I'll be quick.
[06:27:23] <hayley> It's okay.
[06:27:36] <gilberth> hayley: Don't tell me that JNE is faster. But sure, where there is a JNE there must be another test too.
[06:27:53] <gilberth> hayley: Your desk is ok?
[06:27:54] <hayley> Yes, and SBCL decides to schedule that block far away.
[06:27:59] <hayley> Looks fine.
[06:28:21] <gilberth> hayley: Ouch. About the schedule, that is.
[06:29:23] <hayley> Seems I simplified too hard, and emitting (= X a) is better than (<= a X a)
[06:30:31] <gilberth> Yeah, but that is a low hanging fruit.
[06:31:46] <hayley> My original goal was to not have to implement a compiler backend for this RE compiler. Now I have a bucket list of optimisations for SICL ):
[06:32:09] * gilberth shrugs.
[06:32:59] <hayley> Now it's back to an IPC of 3.72!
[06:33:06] <gilberth> BTW #\" is 42 in octal. Coincidence?
[06:33:25] <gilberth> hayley: Hooray!
[06:34:49] <gilberth> Ok, then I perhaps need to check my code for those <=. Does isum-case even handle singleton? I was somehow expecting that (and (<= x 10) (< x 11)) will be optimized to (= x 10). Perhaps I am calling for too much.
[06:35:16] <gilberth> >= rather.
[06:35:49] <hayley> Well, my original code also generated something like that, but I didn't feel like passing around <=, < and =. So I just picked <=
[06:36:12] <hayley> Now I generate either (= a X) or (<= a X b) where a < b
[06:36:36] <gilberth> Sounds good.
[06:37:23] <hayley> That's a pissload of IPC though. Still want to throw SIMD at it.
[06:38:18] <gilberth> Greppers!
[06:39:44] <hayley> What were you going to do with 4\tau for a lexer anyway? How much C do you have?!
[06:40:30] <gilberth> Header files could be huge, especially if they are included multiple times.
[06:40:53] <moon-child> and for that matter, how fast do you expect to do semantic or even syntactic analysis?
[06:40:56] <gilberth> Or: Why do people care about JSON parsing speed, again?
[06:42:30] <gilberth> moon-child: My method is fast by accident. And besides you could use it for all kind of ad-hoc parsing. Like e.g. HTML headers, or the like. In general also escaping or unescaping of any kind, you name it.
[06:43:15] <gilberth> And while I skip an #ifdef / #endif group there is no semantics.
[06:43:17] <hayley> "It would be great if the whole cycle were that fast! But alas, there simply isn't enough memory bandwidth to GC 128GB of memory in 0.1 millisecond :)" ):
[06:44:20] <gilberth> Invent DRAM chips with their own built-in GC in HW.
[06:44:30] <moon-child> hmm, gpus get into the tb/s
[06:44:46] <moon-child> so maybe if clever you can run through it all in 0.1s!
[06:50:38] * hayley checks against Hyperscan again
[06:51:18] <hayley> Hyperscan is _slower_, mostly because it has to enter a DFA for "[0-9]+x[0-9]+" even though it could SIMD out the initial ".
[06:51:26] <hayley> (At least I assume it has to, idk)
[06:53:32] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[06:53:51] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[07:03:50] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 265 seconds)
[07:06:05] <hayley> moon-child: Problem: how do you get it on the GPU without copying?
[07:08:36] <moon-child> just run all your code on the gpu, problem solved
[07:11:53] <hayley> "The more I prod, the worse the story gets." - Robert Smith
[07:12:42] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[07:43:33] <contrapunctus> Where might one learn about the implementation of Common Lisp, especially a compiler-only implementation like SBCL? At best, there was this video featuring beach which comes to mind... 🤔️
[07:45:43] <gilberth> Well, that is a wast area. What are you interested in? How to get CLOS fast? The compiler? The runtime? The GC? Streams? The pretty printer? Bignums and rational?
[07:46:48] <gilberth> I'd say the best is to read some code. Some implementations also have some reference/manual/writeup about internals.
[07:48:17] <gilberth> And a lot of things are actually shared between implementations, or rather have same the roots. But that are things you can do in "user space".
[07:52:04] <contrapunctus> I see 🤔️
[07:53:02] <gilberth> A lot of things now standard, once were libraries. LOOP for instance. Or CLOS. Or the pretty printer.
[07:54:18] <contrapunctus> I guess the compiler and runtime have my particular interest.
[07:55:25] <gilberth> Then I suggest, you read code. And find said internals documentation.
[07:56:49] *** Quits: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[07:57:26] <gilberth> This however implies that you already have a general idea about runtimes. Things like calling convention.
[07:58:18] <contrapunctus> ...I don't 😶️
[07:59:31] <gilberth> Ok then.
[08:00:28] <gilberth> Sorry, I can't think of a book or the like. Never read one about that.
[08:02:24] <contrapunctus> How's MAL (Make A Lisp) as a starting point?
[08:02:44] <hayley> Rubbish if you want to write a compiler.
[08:03:09] <hayley> The only description is "Take your interpreter implementation and have it emit source code in the target language rather than immediately evaluating it. In other words, create a compiler."
[08:04:09] <gilberth> Which is not even half the story.
[08:10:38] * hayley uploaded an image: (4KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/DZLZrQwxjWhLwQaujLxPUdPW/pissed-click.png >
[08:30:27] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[08:30:55] <dave0> maw
[08:31:02] <hayley> maw
[08:31:13] <dave0> hi hayley, how's it going?
[08:33:16] <moon-child> contrapunctus: I guess the video you were thinking of was this? https://www.youtube.com/watch?v=Wa81OJnlsoI
[08:33:17] -ixelp- Creating a Common Lisp implementation (Part 1) - Online Lisp Meeting #4, 06.07.2020 - YouTube
[08:33:22] <moon-child> (it was a series, I think there were three parts made)
[08:33:30] <contrapunctus> moon-child: yes 🙂
[08:34:18] <moon-child> http://canonical.org/~kragen/sw/urscheme/compiler.scm.html  this may be fun to look at.  I haven't read it, though, so I can't vouch for it
[08:34:19] -ixelp- compiler.scm
[08:34:43] <moon-child> I believe the later chapters of sicp have you make a scheme compiler as well.  There was also a nice book somewhere but I cannot recall its name
[08:36:07] <hayley> Lisp in Small Pieces?
[08:36:24] <moon-child> I think so
[08:50:10] <hayley> https://www.youtube.com/watch?v=dVZwu5524f0
[08:50:11] -ixelp- The Misunderstanding (2003 Digital Remaster) - YouTube
[09:40:20] *** Quits: robin (~robin@user/terpri) (Quit: Leaving)
[09:41:50] *** Joins: robin (~robin@user/terpri)
[10:20:03] <mfiano> moon-child: how familiar with zfs are you?
[10:23:24] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c3a4:950f:3557:e668) (Quit: Leaving)
[10:31:38] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[10:33:25] *** Joins: treflip (~user@95.79.32.99)
[10:37:03] <moon-child> mfiano: not super familiar.  Why, what's up?
[10:37:18] <moon-child> (well, currently I'm being made _very_ familiar with how much of a potshoot it is on linux ... but I digress)
[10:37:25] <mfiano> moon-child: Maybe you can help a newbie answer these 3 questions? https://gist.github.com/mfiano/c2ec6704e7ac90315c4b2032a8dd55c0
[10:37:26] -ixelp- zfs.txt · GitHub
[10:40:03] <moon-child> mfiano: apparently zfs reserves 3.2% of a pool to ensure it still has space to do accounting/we in the event you run out of space
[10:40:04] <sham1> Alloc and used isn't necessarily the same
[10:40:10] <sham1> Yeah
[10:40:19] <moon-child> 0.032*91.5 ~~ 64-61.1
[10:40:24] <mfiano> Where did you get that 3.2% figure from?
[10:40:35] <sham1> It's kinda like file caches in "unused" RAM
[10:41:11] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 245 seconds)
[10:41:19] <moon-child> https://openzfs.github.io/openzfs-docs/Performance%20and%20Tuning/Module%20Parameters.html#spa-slop-shift
[10:41:19] -ixelp- Module Parameters — OpenZFS documentation
[10:42:33] <mfiano> I see, thank you.
[10:43:18] *** Joins: aeth (~aeth@user/aeth)
[10:44:28] <moon-child> been waiting probably upwards of 10 minutes for 'sync' to finish...wonder if hardware problem
[10:51:34] <mfiano> oof
[10:52:03] <mfiano> So according to the formula, it is actually 3.125% :)
[10:52:05] <moon-child> but hey, that's what mirrors are for!
[10:52:49] <mfiano> (float (/ (expt 2 5)) 1f0)
[10:52:49] * hayley went to the supermarket and wants to complain.
[10:52:51] <mfiano> 0.03125
[10:53:28] <hayley> They have time for "sensory requirements" where they dim the lights and cut the shit music, which is nice. But they only do it on weekdays between 10:30 and 11:30. Who the fuck goes shopping between 10:30 and 11:30?
[10:53:54] * hayley also waited 20 minutes for the roast chicken to not get up to safe internal temperatures.
[10:56:27] <kakuhen> i loev zfs
[10:56:37] <mfiano> i love everything about FreeBSD
[10:56:42] <kakuhen> i encountered a very strange bug my first time using some zvol on my mac, and idk what went wrong
[10:56:55] <mfiano> ZFS BE's are great
[10:57:09] <kakuhen> yeah zfs on freebsd has given me zero problems so far
[10:57:12] <kakuhen> well, sort of
[10:57:18] <kakuhen> on freebsd 12 it was seamless experience
[10:57:28] <kakuhen> but on 13 id sometimes get kernel panics on shutdown and the stack trace would include some zfs functions
[10:57:36] <kakuhen> no idea what those were about and i was too lazy to report it
[10:57:45] <moon-child> openzfsonosx: At Least It's Not OpenZFSOnWindows™
[10:57:45] <kakuhen> i do know the zfs driver changed between 12 and 13
[10:58:01] <moon-child> seriously I wouldn't trust any of the ZFSes except for freebsd and solaris
[10:58:05] <kakuhen> 12 used the opensolaris one iirc and 13 now uses the same one as ZoL pretty much iirc
[10:58:09] <kakuhen> lole
[10:58:10] <mfiano> I had other problems on 13. I run 13/STABLE instead of 13/RELEASE (I also compile base and all packages myself)
[10:58:17] <kakuhen> yeah i suppose so, moon-child
[10:58:25] <moon-child> and apfs is pretty good, so I hear
[10:58:30] <kakuhen> I always tell my friends to always consult FreeBSD or Solaris documentation for info about ZFS
[10:58:35] <mfiano> Boot I absolutely love BE's
[10:58:35] <kakuhen> because anywhere else is very likely FUD or misinformation
[10:58:41] <mfiano> But*
[10:59:16] <kakuhen> anyway openzfs on osx is not that bad tbh
[10:59:23] <kakuhen> i had one hiccup but that's all
[10:59:42] <kakuhen> obviously not a good sign but besides my first time writing to a zvol it's worked
[11:00:00] <kakuhen> the first time, it allegedly found something like 7000 unrecoverable I/O errors
[11:00:06] <kakuhen> and then kernel_task was stuck on 100% usage on all threads
[11:00:22] <kakuhen> trying to figure out what went wrong made me realize mac os has the shittiest logging system ever
[11:01:34] <kakuhen> basically everything is consolidated into a single file, and every day logs get rotated, but they become these mystery binary blobs that move to deeply nested folders in /var/log
[11:01:41] <kakuhen> and then they may or may not be deleted the day after tomorrow.
[11:01:55] <kakuhen> the OS has a mind of its own when it comes to storing logs older than 2 days
[11:03:15] <mfiano> been rebuilding my whole system for 14h so far on a slow CPU: https://i.lisp.cl/esfOVj.png
[11:23:03] <moon-child> hmm, I can maybe get an rx 6600xt for ~600usd
[11:23:14] <moon-child> realistically I don't _need_ a new gpu and the thing to do is wait 2 years
[11:23:16] <moon-child> ... but I don't wanna
[11:30:37] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[12:00:51] <hayley> https://www.youtube.com/watch?v=rGcnuzRR8F8
[12:00:51] -ixelp- [YTP Collab] Fireman Norman Commits Arson - YouTube
[12:04:16] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[12:04:45] *** Joins: Alfr (~Alfr@user/alfr)
[12:16:44] <selwyn> which certificate authority do people use
[12:19:09] <moon-child> lots of them
[12:19:26] <moon-child> mozilla has a certificate store I think a lot of people use
[12:24:31] * hayley looks for the (unsigned-byte 32) primitive type in SB-VM
[12:24:33] <hayley> unsigned-byte-with-a-bite-out ; yeah sure
[12:36:21] <hayley> Woohoo, I got SBCL to not box by using the technique of "write a VOP which fucking lies about the type, so that it can't consider boxing at all".
[12:37:52] <moon-child> why, we might as well write in c
[12:38:23] <hayley> Sadly SBCL is still faster than any not-TCC C compilers I know of.
[12:58:08] <hayley> And the VOP does reduce the numbers of instructions executed, and reduces IPC somewhat.
[13:08:49] <hayley> ...or not? But I removed instructions that I know are damn useless.
[13:09:26] <moon-child> maybe the cpu knew that too and did not bother to execute them :)
[13:10:13] <hayley> I did not know it could simplify out SHL.
[13:15:49] <hayley> If I use unboxed arithmetic, almost all samples from SB-SPROF land in the load looking for a " at the start of the RE.
[13:18:40] <hayley> The branch predictor probably has a field day though, as almost all characters are not ".
[13:26:46] <sham1> Nice and fast
[13:31:09] <hayley> Huh, this CPU does not seem to be hitting turbo frequencies.
[13:34:06] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 245 seconds)
[13:35:11] * hayley goes to fiddle in the BIOS
[13:36:50] <hayley> Apparently it should be enabled.
[13:40:11] *** Joins: pjb (~pjb@user/pjb)
[13:49:48] <contrapunctus> Hm...I have an Elisp program and I've been thinking of making a CLIM version of it. But its hooks are particularly useful, and it'd lose much value without them, so I was wondering...is there any way to send Emacs Lisp expressions from a Common Lisp program to a running Emacs instance for evaluation, and possibly some way to access the state of the running Emacs in the Common Lisp program?
[13:50:01] <contrapunctus> (Kind of like SLIME in reverse, isn't it?)
[13:51:02] <pl> contrapunctus: SLIME actually supports that
[13:51:19] <contrapunctus> oh o.O
[13:51:29] <pl> it's used for some features
[13:51:29] <pjb> contrapunctus: you mean for user customisation?  You could integrate an emacs lisp compatibility module that is in Hemlock.  (no emacs library, just the language).
[13:51:48] <pjb> contrapunctus: otherwise, users can write now hooks in CL which would be an advantage.
[13:53:12] <pjb> contrapunctus: and finally, you can use the swank-slime RPC.
[13:53:47] <pjb> for example: https://github.com/informatimago/emacs/blob/master/slime-rpc.el
[13:53:47] -ixelp- emacs/slime-rpc.el at master · informatimago/emacs · GitHub
[13:54:10] <pjb> and https://github.com/informatimago/emacs/blob/master/slime-rpc.lisp
[13:54:10] -ixelp- emacs/slime-rpc.lisp at master · informatimago/emacs · GitHub
[13:54:10] <contrapunctus> pjb: it's to trigger actions in a connected Emacs. The program is a time tracker, and you can, say, start tracking time for "Guitar", and the hook can launch PDFs of your scores in Emacs (`pdf-view-mode`) and create the kind of window configuration you want (using `frameset`).
[13:55:54] <contrapunctus> pjb: damn, that's a huge .emacs :o
[13:55:59] <pjb> (eval-in-emacs `(progn (show-partition "guitar.pdf") (start-tracking "Guitar")))
[13:56:44] <pjb> Well, the .emacs properly is in github.com/informatimago/rc/emacs.el (with subfiles in that repo). in informatimago/emacs is more my library.
[13:57:03] <pjb> But indeed, stuff should move from rc to library eventually too.
[14:12:59] * hayley uploaded an image: (138KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/BArTbuCOkmEovrrmBUcHzYAL/blah.png >
[14:13:05] <hayley> TOP 10 STATE MACHINES LAURIKARI DOESN'T WANT YOU TO SEE
[14:19:21] <shka> hayley: oh, god, i have no idea wtf this is but looks like a mind melter
[14:19:47] <hayley> shka: Finite state machine for (a|aa)*. Red states are accepting (i.e. all of them)
[14:20:13] <shka> well, there are final states come to think of it
[14:20:27] <shka> and only one loop, so maybe not that evil
[14:20:52] <shka> what have you used for drawning this diagram?
[14:21:20] * hayley uploaded an image: (114KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/FcctzwXGYxEmWRRmwbMSEDWr/blah.png >
[14:21:30] <hayley> Here is "[0-9]+x[0-9]+" too.
[14:21:41] <hayley> I used my regex engine for DFA generation and Graphviz for visualisation.
[14:22:09] <shka> yeah, it looks like graphviz come to think of it
[14:22:21] <shka> and yes, this is evil
[14:22:28] * hayley uploaded an image: (136KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/mFJnlzIBUNvRqtXpyZWxBjqR/blah.png >
[14:22:31] <hayley> And now with submatches, since that's why we're here.
[14:22:55] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[14:23:20] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[14:23:21] <shka> hayley: i personally use SVG output of graphviz and display everything in the inkscape/firefox
[14:23:43] <shka> it is handier for big graphs
[14:23:55] <hayley> gilberth: Now stylewarning thinks only I hack with Computer Modern Typewriter Text.
[14:26:54] <sham1> The only font
[14:30:17] <shka> what font you are using anyway
[14:30:18] <shka> ?
[14:31:59] <hayley> The diagrams use Inconsolata.
[14:32:28] <shka> and your emacs?
[14:33:16] <hayley> Computer Modern Typewriter Text
[14:33:25] <shka> heh, ofc
[15:15:11] <hayley> Perhaps I should keep the SIMD extensions for one-more-re-nightmare in another library. That way I'd have to design a decent compiler interface.
[15:36:16] *** Quits: robin (~robin@user/terpri) (Ping timeout: 260 seconds)
[15:47:11] *** Joins: notzmv (~zmv@user/notzmv)
[15:55:14] *** Joins: random-nick (~random-ni@87.116.180.220)
[15:56:29] *** Joins: sunarch (uid526836@user/sunarch)
[16:35:54] <shka> https://www.youtube.com/watch?v=Y-xyXDiC92s
[16:35:55] -ixelp- The Entire Soviet Rocket Engine Family Tree - YouTube
[16:36:07] <shka> finally, the legendary soviet rocket engine video
[16:36:18] <shka> rejoice
[16:56:49] <Alfr> Good morning.
[16:56:59] <shka> Alfr: greetings!
[17:24:48] <shka> soviet numeric designations: 1, everyday astronaut: 0
[17:37:10] <sham1> Everyday astronaut is of course such a large set of people
[17:37:36] <sham1> Same again, same could be said about soviet numeric designations
[17:54:00] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[18:20:11] <dave0> nite all
[18:20:18] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:59:05] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:11:31] *** Joins: Inline (~Inline@2a02:908:1252:7a80:6450:3e1f:fbe5:993b)
[19:34:36] <kakuhen> good night
[19:36:29] <gilberth> Good morning #lispcafe!
[19:36:56] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[19:37:05] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[19:39:06] <sham1> Good start of evening
[19:39:48] <gilberth> Sun is set already. Perfect for me.
[19:42:12] <shka> https://www.youtube.com/watch?v=eDMbO2jiy6k
[19:42:12] -ixelp- Neurosis - A Sun That Never Sets - YouTube
[19:42:37] <gilberth> I do use cmtt10 at times, but prefer the ancient version you find on CTAN despite its encoding being interesting. But the metrics are better IMHO.
[19:43:10] <gilberth> shka: May I have a sun that never raises instead?
[19:43:34] <shka> eh
[19:44:53] <shka> gilberth: https://www.youtube.com/watch?v=AgSIRIwJWoA better?
[19:44:53] -ixelp- Anathema - Sunset of The Age - YouTube
[19:45:52] <shka> https://www.youtube.com/watch?v=mQMPFhLNvcE
[19:45:52] -ixelp- Sun Sets - FSOL - YouTube
[19:46:04] <gilberth> To be honest, I don't hear much of a difference.
[19:46:45] <shka> well, this ought to be different https://www.youtube.com/watch?v=hYQR1ZM6zz4
[19:46:46] -ixelp- Sunset (2018 Remaster) - YouTube
[19:47:28] <gilberth> shka: I can't listen to all tunes at once.
[19:48:18] <gilberth> Yep, that one is better. :-)
[19:48:57] *** Joins: ln43 (~ln43@user/ln43)
[20:20:31] <ln43> Hi all, i was seeing that videogames are actually enough realistic so i don't suppose that in the future will be many other improvements
[20:20:52] <White_Flame> they've been saying that for a few generations now
[20:20:56] <ln43> for example GTA V, F1 2021, Forza 2021
[20:21:13] <White_Flame> there will always be something new to sell to drive the market, whether it's necessary or not
[20:22:28] <White_Flame> until we have "retina" resolution, tall+wide fov, 240+ fps VR, with full raytracing, we still have "only" known stuff to advance, not to mention any new things unknown as of yet
[20:24:33] <White_Flame> but another big problem is that asset creation is getting way too expensive
[20:24:44] <White_Flame> we can make engines that can display more than the content we can come up for them
[20:25:03] <shka> jesus
[20:25:10] <shka> webb delayed again
[20:28:20] <ln43> decisely true White_Flame... for sure there are other parts to improve but i think that currently the results are good enough compared to the real world
[20:28:57] <ln43> so basically i will stick on retro-gaming since i can't  alone compete with the gaming industry 
[20:29:31] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[20:29:41] <ln43> and for sure don't trying to replicate the real world because is of course a lot complex
[20:30:36] <ln43> ok. but the webassambly maybe could help a bit
[20:30:49] <ln43> at least or the rendering stage...
[20:31:23] <ln43> to do number crunching at the max possible speed ...
[20:31:49] <ln43> ok with the limit imposed by the HW
[20:32:12] <gilberth> Have you considered that what you are accustomed to watch influence how realistic you perceive it? So this changes as technology progresses.
[20:33:37] <Alfr> The sun goes down and that's when the gilberths come out. :D
[20:34:08] <shka> all that lurks in the dark, unable to withstand the light of day
[20:34:22] <gilberth> You also get used to a certain resolution or realism. I can still enjoy Quake I for instance, just don't play a recent title before.
[20:34:40] <shka> quake is a interesting case
[20:34:55] <White_Flame> ln43: I thought that the PS2 was basically "good enough" graphics to portray what you want on the screen, and everything else since then has just been polis
[20:34:57] <White_Flame> *polish
[20:35:07] <gilberth> Also: When you watch a black and white movie, you won't after while, not notice. At least I do, but I am not a girl proper.
[20:35:11] <sham1> Polish and better framerates
[20:35:15] <shka> because the lovercraftian imaginary is actually augmented with low-quality visuals 
[20:35:50] <gilberth> And btw my first experience to Quake I was grayscale as my display was gray scale. :-)
[20:36:07] <shka> same for dusk
[20:36:08] <White_Flame> I still have an old amber display
[20:36:31] <White_Flame> been thinking it would be fun to plug in the PS4 into it or something :)
[20:36:35] <shka> it is a fairly modern game
[20:36:37] <shka> https://www.youtube.com/watch?v=nYihkKBLsjg
[20:36:37] -ixelp- BENEATH DUSK #3 - YouTube
[20:36:43] <shka> yet it looks like that by choice
[20:38:09] <gilberth> I got an 19" grayscale display for free from the uni, fixed frequency and you needed to adapt SVGA output for the sync. I ran 8-bit gray scale on it. I preferred the higher pixel real estate over the colour. Code doesn't really run faster in colour, that's a myth.
[20:38:13] <ln43> yes nice game... shka
[20:40:26] <gilberth> Email message ids work fine, don't they?
[20:41:33] <gilberth> I want to embed multiple SVGs inline in HTML and for e.g. clipping you need IDs within that SVGs, but all ambedded SVGs in an HTML document share the same name space, so I am in trouble. I could go the message id route. Hmm.
[20:42:44] <ln43> how do you generate svg files gilberth?
[20:42:56] <ln43> i was looking at an example where was used inkscape
[20:43:02] <ln43> for that purpose
[20:43:09] <gilberth> With CLIM.
[20:45:05] <gilberth> I could use my pid and gettimeofday as a prefix, that should at least be unique within one host.
[20:46:40] <ln43> anyway i was asking because of the background... so mountains, clouds and so on that moves with parallaxes effect
[20:47:19] <ln43> yesterday i was watching how was possible generate mountains using perlin or simplex noise ... but the game i'm seeing is mostly 2d
[20:47:47] <ln43> so maybe i don't need 3d objects for now
[20:48:43] <ln43> ok and before i should figure out how more basilar things are working, of course
[20:49:25] <ln43> but ok, the game genre is car racing, i like this  and so it's good for me
[20:51:25] <ln43> ok there is one that is enough interesting... HexGL (made almost 9 years ago) but currently is better i see something more simple
[20:58:53] *** Quits: ln43 (~ln43@user/ln43) (Ping timeout: 268 seconds)
[21:42:37] *** Joins: ln43 (~ln43@user/ln43)
[21:51:46] *** Quits: treflip (~user@95.79.32.99) (Remote host closed the connection)
[22:26:11] *** Quits: sunarch (uid526836@user/sunarch) (Quit: Connection closed for inactivity)
[22:27:52] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[22:28:19] *** Quits: X-Scale (~ARM@31.22.167.95) (Ping timeout: 268 seconds)
[22:29:26] *** X-Scale` is now known as X-Scale
[22:56:40] <gilberth> Dammit. Image based development is nice as long as your sources you try to debug match your image. When they don't, you're screwed.
[22:58:23] <Gnuxie> easy, store sources in the image 
[22:59:09] <gilberth> I still like files.
[23:00:04] <Gnuxie> well, enjoy being screwed! 😅
[23:02:41] <gilberth> It's a weird deja-vu experience fixing the same bug twice.
[23:04:44] <shka> queue in initial D soundtrack 
[23:04:45] <sham1> That's why you only eval-sexp from the file
[23:06:20] <gilberth> I do that. All the time. Doesn't help when you work from an image made from earlier sources.
[23:07:56] <gilberth> And I don't eval. I compile. :-p
[23:17:26] *** Joins: semz (~none@user/semz)
[23:27:54] <ln43> gilberth: images are causing me strong headache... i was following the ENB339 ... quite good
[23:28:16] <ln43> ok, only for the relevant parts
[23:31:23] <gilberth> What is ENB339 and how does it help me to remember to dump more often or keeping my patch files up to date at least?
[23:33:34] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:36:08] *** Quits: ln43 (~ln43@user/ln43) (Ping timeout: 268 seconds)
[23:38:34] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
