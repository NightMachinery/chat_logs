[00:12:48] *** Joins: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de)
[00:16:14] <FromDiscord> <Forest> When I'm using a C++ library in Nim, how do i interact with the classes?
[00:25:53] <FromDiscord> <dom96> In reply to @tandy "if i have a": `toSeq(tbl.values)[0]` should work
[00:26:15] <FromDiscord> <dom96> you can also do `tbl.pairs` if you want the key too
[00:36:52] <FromDiscord> <krisppurg> Is there anyway I could stop choosenim downloading nim in 32 bit, because my computer is in 64 bit.↵And also whenever I do compile in nim it isn't fast (e.g. when nim version is switched and I run my code depending on how long the code is and the modules it is using it takes 1 minute to fully compile), how do I resolve this issue? Could it just be because of the 32 bit issue im having?
[00:37:14] <FromDiscord> <krisppurg> (edit) "Is there anyway I could stop choosenim downloading nim in 32 bit, because my computer is in 64 bit.↵And also whenever I do compile in nim ... it" 03added "(32 bit)"
[00:53:50] <FromDiscord> <demotomohiro> @Forest https://nim-lang.org/docs/manual.html#implementation-specific-pragmas-importcpp-pragma
[01:10:56] <FromDiscord> <Forest> Thanks!
[01:34:55] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Quit: ZNC 1.8.2 - https://znc.in)
[01:37:10] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[01:42:16] <FromDiscord> <dom96> In reply to @krisppurg "Is there anyway I": do you have a 32bit gcc in your PATH?
[01:42:38] <FromDiscord> <dom96> if so choosenim will grab a 32 bit Nim
[02:05:03] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:17:06] *** Joins: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it)
[03:14:53] <FromDiscord> <krisppurg> In reply to @dom96 "do you have a": Well, is it located in C:/bin↵then how do I replace the 32 bit gcc with the 64 bit gcc?
[03:15:17] <FromDiscord> <krisppurg> (edit) "C:/bin↵then how" => "C:/bin↵running `gcc -v`, it says win32.↵How"
[03:16:56] *** Quits: cyraxjoe (~joe@2806:109f:13:c804::1ee3) (Ping timeout: 250 seconds)
[03:17:34] *** Joins: cyraxjoe (~joe@2806:109f:13:8841:2244:b0ac:de0e:a47c)
[03:34:42] *** Quits: rb (~augh@theguntretort.com) (Ping timeout: 250 seconds)
[03:42:12] *** Joins: rwb (~augh@209.141.39.190)
[03:46:48] <FromDiscord> <abdu> How to declare/define/initialize  sequence of array↵i.e. flexible size array of a fixed sizxe array type ?
[03:47:19] <FromDiscord> <Elegantbeef> `let mySeq = newSeq[array[size, T]](seqSize)`
[03:56:17] <FromDiscord> <Bloss> has anyone tried making exceptions work with --gc:orc in DLLs? i can't even catch them
[03:56:55] <FromDiscord> <Elegantbeef> You'd need to catch exceptions inside the dll
[03:57:02] <FromDiscord> <Bloss> yeah that's what I'm trying to do
[03:57:10] <FromDiscord> <Bloss> it just exits
[03:57:47] <FromDiscord> <Elegantbeef> You are trying to catch exceptions the dll is raising right?
[03:58:19] <FromDiscord> <Bloss> no
[03:58:46] <FromDiscord> <abdu> In reply to @Elegantbeef "`let mySeq = newSeq[array[size,": newSeq is in module what ?
[03:58:49] <FromDiscord> <Bloss> I am using try/except inside the DLL, but the except block is never reached, when an exception is raised it just quits entirely
[03:58:52] <FromDiscord> <Elegantbeef> I dont think you can catch exceptions across the DLL boundry
[03:59:07] <FromDiscord> <Elegantbeef> `newSeq` is a procedure
[03:59:17] <FromDiscord> <Bloss> In reply to @abdu "newSeq is in module": system, it is imported by default
[04:02:45] <FromDiscord> <Bloss> ok it actually works, i messed up something really simple
[05:17:22] <FromDiscord> <hector> In reply to @krisppurg "Well, is it located": Step 1: Stop using Windows
[05:35:54] <FromDiscord> <Rika> We don’t know how you installed the compiler
[05:36:20] <FromDiscord> <Rika> Uninstall it with information given from the way you installed it
[05:36:33] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 252 seconds)
[05:52:26] <NimEventer> New question by pooooky: Compiler throws &#39;no return type declared&#39; even though the function returns, see https://stackoverflow.com/questions/71120422/compiler-throws-no-return-type-declared-even-though-the-function-returns
[05:58:46] <FromDiscord> <abdu> sent a code paste, see https://play.nim-lang.org/#ix=3PDO
[05:59:10] <FromDiscord> <abdu> (edit) "https://play.nim-lang.org/#ix=3PDO" => "https://paste.rs/0dk"
[05:59:25] <FromDiscord> <Elegantbeef> What are you trying to do, that's not valid Nim code in any regard
[06:00:27] <FromDiscord> <abdu> (edit) "https://play.nim-lang.org/#ix=3PDQ" => "https://play.nim-lang.org/#ix=3PDP"
[06:01:01] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3PDR
[06:09:26] *** Quits: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de) (Remote host closed the connection)
[06:10:25] <FromDiscord> <Arathanis> what are the rules for infix procs
[06:10:26] <FromDiscord> <Arathanis> (edit) "procs" => "procs?"
[06:10:44] <FromDiscord> <Arathanis> im trying to experiment it out but its very hard to determine what kind of proc name can be used as an infix, symbolic only?
[06:14:01] <FromDiscord> <ynfle> In reply to @Arathanis "im trying to experiment": Symbolic and div and mod.
[06:14:12] <FromDiscord> <ynfle> It talks about it in the manual
[06:20:25] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/manual.html#lexical-analysis-operators
[06:23:28] <FromDiscord> <Arathanis> ok, so anything made entirely of the symbols on the Operator characters plus "div" and "mod" explicitly
[06:23:37] <FromDiscord> <Arathanis> (edit) "on" => "in"
[06:24:52] <FromDiscord> <Elegantbeef> well `mod` `div` `as` `of`
[06:24:53] <FromDiscord> <Arathanis> well theres more I guess but I think I get it. I can override the explicit ascii infixes for my own types, or I can define wholly new ones as long as they are composed entirely of operator characters
[06:25:03] <FromDiscord> <Arathanis> `in` `notin` `shl` `shr` are in there too
[06:25:15] <FromDiscord> <Elegantbeef> `and or not xor shl shr div mod in notin is isnot of as`
[06:25:20] <FromDiscord> <Elegantbeef> full list
[06:26:18] <FromDiscord> <Arathanis> sent a code paste, see https://play.nim-lang.org/#ix=3PDW
[06:26:25] <FromDiscord> <Elegantbeef> you need backticks
[06:26:40] <FromDiscord> <Elegantbeef> All operators require backticks to strop their usage
[06:26:43] <FromDiscord> <Arathanis> right cause they are lexicographically special it wont even compile without the backticks
[06:26:56] <FromDiscord> <Arathanis> it will think im trying to say `proc in (e: ElemType...)`
[06:26:57] <FromDiscord> <Elegantbeef> Yep
[06:27:06] <FromDiscord> <Elegantbeef> dont use `in`
[06:27:09] <FromDiscord> <Elegantbeef> make a `contains` proc
[06:27:11] <FromDiscord> <Arathanis> use contains
[06:27:16] <FromDiscord> <Arathanis> and let the in template do its magic
[06:27:20] <FromDiscord> <Elegantbeef> Yep
[06:27:41] <FromDiscord> <Elegantbeef> Many operators are inferred thanks to template magic
[06:27:56] <FromDiscord> <Arathanis> yeah,
[06:28:08] <FromDiscord> <Arathanis> i always forget which comparison operator you need to define, is it `>=`?
[06:28:19] <FromDiscord> <Elegantbeef> think it's `<`
[06:29:13] <FromDiscord> <Elegantbeef> This just reminds me how lovely a small core language really is 😀
[06:29:50] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:29:53] <FromDiscord> <Elegantbeef> So many things can be done in user space and dont require special support
[06:30:02] <FromDiscord> <Arathanis> you are right https://media.discordapp.net/attachments/371759389889003532/942978530638180392/unknown.png
[06:30:18] <FromDiscord> <Arathanis> it doesnt mention <=
[06:30:26] <FromDiscord> <Arathanis> surely that is an accidently omission
[06:30:51] <FromDiscord> <ynfle> Probably
[06:31:22] <FromDiscord> <Elegantbeef> PR time for arathanis 😛
[06:32:38] <FromDiscord> <Valdar> Is a seq guaranteed to be contiguous?
[06:32:52] <FromDiscord> <Elegantbeef> Yes
[06:33:16] <FromDiscord> <Valdar> how does it handle .add?
[06:33:16] <FromDiscord> <Elegantbeef> @abdu\: thanks to your forum post i can say the answer is `thisStr = str[^3..^1]`
[06:33:18] <FromDiscord> <Arathanis> turns out you have to define `<=` as well
[06:33:32] <FromDiscord> <Arathanis> so its not omitted by accident
[06:33:52] <FromDiscord> <Elegantbeef> if adding a value goes over the capacity it'll allocated and move the sequence to more memory
[06:34:11] <FromDiscord> <Elegantbeef> The seq is basically `(len, cap, ptrToData)`
[06:34:20] <FromDiscord> <Elegantbeef> if len goes over `cap` it has to realloc
[06:34:21] <FromDiscord> <Arathanis> sent a code paste, see https://play.nim-lang.org/#ix=3PE0
[06:35:08] <FromDiscord> <Valdar> Thx Beef. I thought that must be it, but i couldn't find a definitive answer in the docs
[06:35:30] <FromDiscord> <Elegantbeef> Yea someone needs to document strings explicitly
[06:36:28] <FromDiscord> <ynfle> In reply to @Elegantbeef "Yea someone needs to": @Valdar was talking about seq
[06:36:36] <FromDiscord> <Elegantbeef> Strings and seqs
[06:36:37] <FromDiscord> <Elegantbeef> Same shit
[06:36:54] <FromDiscord> <ynfle> Implementation detail
[06:36:54] <FromDiscord> <Elegantbeef> Not documented on their internal data or how they work
[06:37:08] <FromDiscord> <Arathanis> sounds like they are implemented in a similar fashion to python collections
[06:37:22] <FromDiscord> <Arathanis> as far as len vs cap goes
[06:37:24] <FromDiscord> <Elegantbeef> That's how you implement dynamic sized collections
[06:37:41] <FromDiscord> <Arathanis> yeah it works out for the best that way
[06:37:44] <FromDiscord> <Elegantbeef> There arent really many good alternatives for memory/performance
[06:37:51] <FromDiscord> <Valdar> and both strings and seqs are heap, right?
[06:37:53] <FromDiscord> <Elegantbeef> Linked lists are god awful 😀
[06:37:55] <FromDiscord> <Arathanis> you are trying to find the sweet spot between the two
[06:37:56] <FromDiscord> <Elegantbeef> Yes
[06:38:09] <FromDiscord> <Arathanis> linked lists are pretty bad until nothing else will do
[06:38:14] <FromDiscord> <Arathanis> but until then
[06:38:15] <FromDiscord> <Arathanis> they suck lol
[06:38:21] <FromDiscord> <Elegantbeef> Anything dynamic tends to be heap allocated
[06:38:39] <FromDiscord> <Valdar> 👍
[06:38:47] <FromDiscord> <Elegantbeef> Just a nature of how dynamic stuff works
[06:38:48] <FromDiscord> <Elegantbeef> \Also why `newSeq` and `newString` are used 😀
[06:39:13] <FromDiscord> <Elegantbeef> `new` denotes heap allocation, though it seems the convention is only if the base type allocates
[06:39:23] <FromDiscord> <Elegantbeef> Look at tables/hashsets for `init` being used
[06:39:38] <FromDiscord> <Elegantbeef> Whatcha doing valdar? 😀
[06:39:57] <FromDiscord> <Valdar> how about newSeqOfCap? still heap?
[06:41:03] <FromDiscord> <Valdar> Working on a game/engine. Just trying to decide on structuring nodes atm
[06:41:04] <FromDiscord> <Elegantbeef> Yep
[06:41:15] <FromDiscord> <Elegantbeef> The only difference is  that's a given size allocation
[06:41:24] <FromDiscord> <Elegantbeef> If you want static heap stuff use `array[Size, T]`
[06:41:47] <FromDiscord> <Elegantbeef> You can wrap an array rather quickly for a "growable" collection
[06:41:55] <FromDiscord> <Elegantbeef> I thought you were  valdar which is why i asked
[06:42:08] <FromDiscord> <Valdar> haha, what gave it away?
[06:42:22] <FromDiscord> <Elegantbeef> Eh just guessed based off you
[06:42:31] <FromDiscord> <Arathanis> `newSeq` and `newString` are there for when you know, or have an idea, of the size but you are going to need but are going to add the data piecemeal right? So you aren't slamming your performance with reallocation/copy
[06:42:58] <FromDiscord> <Elegantbeef> What a minute valdar isnt vladar 😀
[06:43:01] <FromDiscord> <Valdar> you might have me confused with vladar?
[06:43:05] <FromDiscord> <Valdar> yep
[06:43:07] <FromDiscord> <Elegantbeef> Yea
[06:43:27] <FromDiscord> <Elegantbeef> Thought it was odd you were asking about memory stuff
[06:43:43] <FromDiscord> <Valdar> I'm too quiet for anyone to be that perceptive 🙂
[06:44:23] <FromDiscord> <Elegantbeef> Yes arath that's the purpose
[06:44:37] <FromDiscord> <Elegantbeef> You have a size you think your data will fit in and want to assume that it does
[06:44:57] <FromDiscord> <Elegantbeef> This way you dont over allocate unless you really need to in the small cases
[06:45:07] <FromDiscord> <Arathanis> or under alloc
[06:45:14] <FromDiscord> <Elegantbeef> The issue with heap isnt where it is but when you need to grow it it's slow
[06:45:52] <FromDiscord> <Arathanis> so does newSeq allocate a large amount but set the len to 0?
[06:45:57] <FromDiscord> <Arathanis> so you just fill in the hugely allocated space?
[06:46:07] <FromDiscord> <Elegantbeef> it allocates 64 elements
[06:46:10] <FromDiscord> <Arathanis> i guess it initializes to the types default value too
[06:46:20] <FromDiscord> <Elegantbeef> well 64 elements by default
[06:46:58] <FromDiscord> <Elegantbeef> there is `newSeqUnintialized` if you want to alloc without 0ing
[06:47:06] <FromDiscord> <Valdar> so what would be the benefit of using cap?
[06:48:31] <FromDiscord> <Elegantbeef> If the size matches perfectly you use the least amount of memory
[06:49:14] <FromDiscord> <Elegantbeef> If the size is larger than what you need you never allocate again
[06:49:45] <FromDiscord> <Elegantbeef> Like i said the issue with dynamic memory is always growing it, it's a slow process, you have to as the OS for more memory, copy your memory over and then add an entry
[06:49:47] <FromDiscord> <Elegantbeef> It's slooooooow
[06:50:06] <FromDiscord> <Elegantbeef> Static is almost always better if you can do it
[06:51:06] <FromDiscord> <Valdar> yeah, slow is what i'm trying to avoid.
[06:51:54] <FromDiscord> <Valdar> ok, that makes sense, if it's larger than I would need...
[06:52:20] <FromDiscord> <Valdar> nut I can Never overfill, right. it'll seqfault?
[06:52:28] <FromDiscord> <Valdar> but
[06:52:36] <FromDiscord> <Elegantbeef> Overfill what?
[06:52:40] <FromDiscord> <Valdar> the cap
[06:53:02] <FromDiscord> <Elegantbeef> Well if you give a cap larger than your system has memory it'll give you an out of memory message and crash
[06:53:36] <FromDiscord> <Valdar> no, i mean if I cap at 100 and try to add 101
[06:53:49] <FromDiscord> <Valdar> for example
[06:53:59] <FromDiscord> <Elegantbeef> It'll grow the sequence and add the extra one
[06:54:03] <FromDiscord> <Elegantbeef> capacity doesnt make it static
[06:54:19] <FromDiscord> <Elegantbeef> It just says "allocate precisely this much since i think i need it"
[06:54:24] <FromDiscord> <Elegantbeef> it's still just a seq
[06:54:57] <FromDiscord> <Valdar> oh, I must have read the docs wrong then
[06:55:16] <FromDiscord> <Elegantbeef> Arrays are static sizes and ungrowable
[06:55:30] <FromDiscord> <Elegantbeef> Sequences are always growable, but allocate a fixed size and have a fixed growth rate without your intervention
[06:56:38] <FromDiscord> <Elegantbeef> like `var a = newSeq[int]()` is going to allocated enough memory for 64 integers
[06:56:44] <FromDiscord> <Elegantbeef> allocate\
[06:57:11] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3PE4
[06:57:31] <FromDiscord> <Elegantbeef> No error since it'll grow on the 65th element to be large enough for 128 element if i recall correctly
[06:57:54] <FromDiscord> <Arathanis> sequence can grow until the computer runs out of memory. The point of `newSeq` and `newSeqOfCap` is for when you don't know exactly how much space you need but you have an idea, you can allocate that space and then do what you need with it (copy into it, start processing, etc) without tanking your performance if the seq needs to grow in size which kicks of a realloc -> copy
[06:58:03] <FromDiscord> <Elegantbeef> Yep
[06:58:23] <FromDiscord> <Elegantbeef> `var data = newSeqOfCap[int](65)` means the above wouldnt allocate more than once, in the first example there are two allocations
[07:00:57] <FromDiscord> <Elegantbeef> As is typical "Beef says stuff that confuses more than it helps" 😛
[07:01:02] <FromDiscord> <huantian> is there a way I can get strscans to match any one of multiple strings?
[07:01:25] <FromDiscord> <Elegantbeef> use a custom matcherr
[07:02:12] <FromDiscord> <huantian> k
[07:02:34] <FromDiscord> <Elegantbeef> You could also match the pattern then check the string after
[07:03:32] <FromDiscord> <Valdar> I KNOW I read somewhere that adding past a cap would cause an error, but it's not in the official docs, so it must have been someone's blog or something. I just tried it and you're right. Works with no error. Thx for clearing that up
[07:04:03] <FromDiscord> <Rika> Are you sure you weren’t reading about an array
[07:04:05] <FromDiscord> <Arathanis> In reply to @Valdar "I KNOW I read": they were probably talking about arrays
[07:04:09] <FromDiscord> <Elegantbeef> Perhaps you're thinking of indexing arrays
[07:04:10] <FromDiscord> <Valdar> I'm sure
[07:04:20] <FromDiscord> <Elegantbeef> `default(array[3, int])[4]`
[07:04:29] <FromDiscord> <Valdar> No, it was def seqofcap
[07:04:44] <FromDiscord> <Elegantbeef> Well you were lied to
[07:04:53] <FromDiscord> <Valdar> I Was
[07:05:18] <FromDiscord> <Valdar> I'll see if I can find it
[07:06:32] <FromDiscord> <huantian> does std have something that can split a string into chunks of 3, or perhaps slicerator
[07:06:45] <FromDiscord> <Elegantbeef> chunks of 3 what?
[07:06:58] <FromDiscord> <huantian> sorry chunks of 3 chars
[07:07:13] <FromDiscord> <huantian> eg "abcdef" -> ["abc", "def"]
[07:07:20] <FromDiscord> <Rika> Doesn’t (3rd party) itertools have that
[07:07:43] <FromDiscord> <Elegantbeef> You'd need to write an iterator but sliecerator does have the `group` macro
[07:08:44] <FromDiscord> <Elegantbeef> Itertools is probably the go to then
[07:12:47] <FromDiscord> <huantian> 👍
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:42:10] <FromDiscord> <evoalg> Rika is right, the itertools lib has "chunked"↵(@huantian)
[08:44:39] <FromDiscord> <evoalg> I have no idea if `for x in numbers.chunked(3)` does unnecessary copies ... if it does then "group" from slicerator would be more efficient
[08:45:00] <FromDiscord> <Rika> Optimise only when you need to...
[08:46:11] <FromDiscord> <Arathanis> Yes, listen to Donald Knuth
[08:46:13] <FromDiscord> <Arathanis> (edit) "Knuth" => "Knuth."
[08:46:28] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[08:46:46] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[08:47:46] <FromDiscord> <evoalg> it leaves a bad taste in my mouth if it does unnecessary copies ... even python does it right ... so it's reasonable to assume it's doing it efficiently. When I find it's not, it doesn't feel right
[08:48:05] <FromDiscord> <huantian> I mean it shouldn’t be too hard to check
[08:49:22] <FromDiscord> <huantian> It seems to just be yielding slices in a while loop, that shouldn’t make copies right?
[08:49:33] <FromDiscord> <Rika> Whichever you think is best. I will not care if it copies or not until it severely affects my runtime
[08:49:45] <FromDiscord> <Elegantbeef> That's the way to live
[08:50:06] <FromDiscord> <Rika> If I want speed then sure but usually I don't care
[08:50:34] <FromDiscord> <evoalg> I thought the whole point of slicerator lib being made was because slices does make copies instead of iterating?↵(@huantian)
[08:50:37] <FromDiscord> <Arathanis> What is the best way to initialize all the the elements of a seq?
[08:50:50] <FromDiscord> <Arathanis> Specifically a sequence of arrays
[08:50:56] <FromDiscord> <Elegantbeef> `newSeqWith` from sequtils
[08:51:22] <FromDiscord> <Elegantbeef> I mean it's one part of slicerator is the non allocating slices
[08:52:17] <FromDiscord> <Arathanis> sent a code paste, see https://play.nim-lang.org/#ix=3PEh
[08:52:26] <FromDiscord> <Arathanis> i think newSeqWith is the way im going to do it, but I am wondering if there is a way to do the above
[08:52:30] <FromDiscord> <Rika> mitems
[08:52:53] <FromDiscord> <Arathanis> lmao i knew about mitems woops
[08:56:32] <FromDiscord> <Arathanis> im surprised that newSeq takes len as Natural but newSeqWith uses int
[09:03:09] <termer> Is the discord<->irc bridge broken?
[09:03:16] <termer> can anyone see this message
[09:03:22] <FromDiscord> <Elegantbeef> Yes
[09:03:25] <termer> Sweet
[09:03:31] <termer> does anyone have any experience with asyncnet
[09:03:44] <FromDiscord> <Elegantbeef> So that means Matrix -\> Discord -\> IRC is working 😛
[09:04:02] <FromDiscord> <Elegantbeef> What's the actual question?
[09:04:07] <termer> I'm trying to figure out the difference between a natural disconnect and a close(AsyncSocket) call
[09:04:17] <termer> Because a natural close causes recv calls to return
[09:04:22] <termer> and close() causes them to hang forever
[09:04:42] <termer> this is making my application hang
[09:06:36] <FromDiscord> <Elegantbeef> Wonder if it's the `SafeDisconn`
[09:06:43] <termer> not quite sure
[09:06:54] <termer> how would I tell it not to use that
[09:07:06] <FromDiscord> <Elegantbeef> `flags = {}`
[09:08:13] <termer> One odd effect this is having is also seemingly making accept(AsyncSocket) hang as well
[09:08:16] <termer> it's very very odd
[09:08:27] <termer> Nope, same effect with no flags
[09:08:56] <termer> There's something messed up with close() I think because the documentation doesn't even line up with the proc definition
[09:09:06] <termer> It doesn't return a Future anymore
[09:10:37] <termer> Right now, a call to close(AsyncSocket) will just make everything hang
[09:11:02] <termer> including unrelated calls like accept(AsyncSocket) on the server accept loop
[09:11:41] <termer> Actually, I'm going to do some more testing
[09:12:04] <FromDiscord> <Elegantbeef> Well the best thing to do imo is make a minimal reproduction
[09:12:06] <termer> Yup that's what's happening
[09:12:09] <termer> All right
[09:29:39] <FromDiscord> <Arathanis> sent a code paste, see https://play.nim-lang.org/#ix=3PEk
[09:35:44] <FromDiscord> <Arathanis> sent a code paste, see https://paste.rs/Eus
[09:36:29] <FromDiscord> <Arathanis> (edit) "https://paste.rs/1wF" => "https://play.nim-lang.org/#ix=3PEo"
[09:37:13] <FromDiscord> <Arathanis> (edit) "https://play.nim-lang.org/#ix=3PEo" => "https://play.nim-lang.org/#ix=3PEp"
[09:38:08] <FromDiscord> <Arathanis> or maybe it does, sometimes it... doesn't
[09:38:08] <FromDiscord> <Arathanis> hmm
[09:41:25] <termer> ElegantBeef https://play.nim-lang.org/#ix=3PEs
[09:41:36] <termer> Here is a minimal example of my issue
[09:41:57] <termer> There are two ways I close the socket here, and they both have different side effects
[09:42:26] <termer> The first is an async timers implementation I wrote, which is what I'm using in my real world code
[09:42:57] <termer> The second is an async proc that closes it, and running that with asyncCheck
[09:44:38] <termer> Using the timer, all asyncnet procs that are being `await`ed will hang, including unrelated ones such as accept(AsyncSocket) for the server
[09:44:55] <termer> Using the proc, the entire program will crash due to an OSError with the message "Bad file descriptor"
[09:45:10] <termer> The stack trace only leads to the accept() call, which is confusing
[09:45:26] <termer> Not the accept call, sorry
[09:45:39] <termer> The accept loop proc call
[10:16:51] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[10:32:27] <termer> https://forum.nim-lang.org/t/8918
[10:32:42] <termer> Here's a thread I made on my issue with more information and attempts
[10:32:45] <FromDiscord> <Rika> Moderated
[10:32:53] <FromDiscord> <Rika> Prolly need to wait a bit
[11:02:43] <FromDiscord> <pietroppeter> Since the mermaids are cool in GitHub and HN I thought nim(ib) should have a say: https://pietroppeter.github.io/nblog/drafts/mermaid_diagram.html
[11:13:07] <FromDiscord> <kevin> Is there a Nim alphabetical sort somewhere?
[11:13:30] <FromDiscord> <kevin> sorry, numerical sort 
[11:14:06] <FromDiscord> <kevin> so instead of `4, 400, 5, 512` it should be `4, 5, 400, 512`
[11:14:12] <FromDiscord> <Elegantbeef> `std/algorithm`?
[11:16:57] <FromDiscord> <Elegantbeef> !eval import std/algorthim; echo [4, 400, 5, 512].sorted
[11:16:59] <NimBot> Compile failed: /usercode/in.nim(1, 11) Error: cannot open file: std/algorthim
[11:17:11] <FromDiscord> <Elegantbeef> Maybe if i could spell
[11:17:13] *** Joins: PMunch (~PMunch@user/pmunch)
[11:26:49] <FromDiscord> <kevin> i guess my problem was i needed to `parseInt()` my strings before i tried to `sort()` them 🤷
[11:28:01] <FromDiscord> <Elegantbeef> `sortedByIt(it[0])`
[11:29:49] <FromDiscord> <haxscramper> In reply to @kevin "i guess my problem": you can supply custom comparator function
[11:30:04] <FromDiscord> <haxscramper> `sort(theArray) do(a, b: string)`
[11:30:47] <FromDiscord> <haxscramper> https://nim-lang.org/docs/manual_experimental.html#do-notation
[11:31:36] <FromDiscord> <haxscramper> sadly `do` does not work like `->` from sugar, so you still have to spell the argument types
[11:45:43] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Quit: ZNC 1.8.2 - https://znc.in)
[11:49:08] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[12:32:07] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[12:32:37] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[12:48:30] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Read error: Connection reset by peer)
[12:48:30] *** Quits: oisota (~oisota@user/oisota) (Quit: Ping timeout (120 seconds))
[12:48:45] *** Joins: oisota (~oisota@user/oisota)
[12:48:51] *** Joins: m5zs7k_ (aquares@web10.mydevil.net)
[12:57:19] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[12:57:46] *** m5zs7k_ is now known as m5zs7k
[13:01:18] <FromDiscord> <hugogranstrom> In reply to @pietroppeter "Since the mermaids are": Oh la la! That wasn't very much code you had to add to support it! 🤯 Does this mean I'll have to add Mermaid syntax highlighting to NimiBoost now? 🤣
[13:09:12] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:40:24] <NimEventer> New Nimble package! nim_chacha20_poly1305 - xchacha20_poly1305, chacha20, poly1305, see https://github.com/lantos-lgtm/nim_chacha20_poly1305
[13:51:19] <FromDiscord> <abdu> How to convert string type to bool  data type the simplest ?
[13:54:44] <PMunch> parsebool?
[13:55:47] <PMunch> @abdu, it all depends on what kind of bool you want
[13:55:51] <PMunch> Relevant: https://forum.nim-lang.org/t/8906#58185
[13:59:19] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[14:13:57] <NimEventer> New question by itil memek cantik: right syntax to have Nim string type to bool type, see https://stackoverflow.com/questions/71125023/right-syntax-to-have-nim-string-type-to-bool-type
[14:15:17] <FromDiscord> <Rika> Sigh
[14:15:28] <FromDiscord> <Rika> Didn’t PMunch answer that
[14:20:18] <supakeen> yes.
[15:32:36] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 240 seconds)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:41:49] *** Joins: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de)
[15:48:07] <PMunch> Aah, now I see why you where talking about Mermaid earlier: https://forum.nim-lang.org/t/8906#58185
[15:48:11] <PMunch> https://github.blog/2022-02-14-include-diagrams-markdown-files-mermaid/
[15:48:13] <PMunch> Whoops wrong link
[17:05:11] *** Joins: arkurious (~arkurious@user/arkurious)
[18:31:57] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: Leaving)
[18:40:35] <FromDiscord> <QueenFuckingAdrielle> is it true that arraymancer and laser are no longer being maintained?
[18:45:06] <FromDiscord> <deeuu> In reply to @QueenFuckingAdrielle "is it true that": Might wanna ask in the #science channel
[18:46:48] <FromDiscord> <frankzig> Guys I'm using Nimpy to build a python library,   ↵↵this library uses a lot of global variables which hold sequences and other types of objects. ↵then via nimpy I expose the methods to handle this objects.
[18:46:57] <FromDiscord> <frankzig> Is this risky for the GC?
[18:47:22] <FromDiscord> <frankzig> do I risk that nim GC decides to eat up this objects while I'm using the library in python?
[18:53:25] *** Quits: anddam (~anddam@user/anddam) (Quit: WeeChat 3.4)
[18:57:18] <FromDiscord> <pietroppeter> In reply to @hugogranstrom.nim "Oh la la! That": well, next step is to actually produce the string starting from Nim object (e.g. an object representing a dependency graph or other stuff). this would save you from highlighting the syntax... 😄
[19:00:22] <FromDiscord> <b4mbus> sent a code paste, see https://play.nim-lang.org/#ix=3PGs
[19:04:03] <FromDiscord> <hugogranstrom> In reply to @pietroppeter "well, next step is": Ahh, sounds really nice 👌😁 (wouldn't have been too hard to highlight it now that I think about it. Basically a copy-paste of the markdown highlighting in nbCode blocks)
[19:10:51] *** Joins: anddam (~anddam@user/anddam)
[19:14:53] <arkanoid> I've successfully acquired RTC clock writing ioctl device arg using just bit shifting and ffi, great!
[19:15:11] <arkanoid> I mean, I've used NO ffi
[20:00:36] *** Joins: icebattle (~wayne@S010600fc8ddfd2b3.vc.shawcable.net)
[20:47:31] *** Joins: sagax (~sagax_nb@user/sagax)
[21:04:13] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[21:08:26] <FromDiscord> <Arathanis> sent a code paste, see https://play.nim-lang.org/#ix=3PGY
[21:09:51] <FromDiscord> <ynfle> It's not a range
[21:10:06] <FromDiscord> <ynfle> For the iterator, you can use `countup`
[21:10:22] <FromDiscord> <ynfle> For the set, you can use the `sugar.collect` macro
[21:10:54] <FromDiscord> <Arathanis> kk thnx
[21:11:28] <FromDiscord> <Arathanis> use countup, add collect when doing it with a set
[21:14:30] <FromDiscord> <Arathanis> looks like collect only works with a hashset? this might be something I need to do manually
[21:14:34] <FromDiscord> <Arathanis> thats fine, its not too much work
[21:17:54] *** rwb is now known as rb
[21:21:51] <nrds> <06Prestige99> hmm playground down
[21:28:04] <FromDiscord> <kevin> is there a good way to check for asyncSocket timeout?
[21:28:55] <FromDiscord> <kevin> e.g.: If the socket doesn't connect in like 5 seconds, send a message saying the connection timed out
[21:30:12] <FromDiscord> <kevin> sent a code paste, see https://play.nim-lang.org/#ix=3PHa
[21:31:05] <FromDiscord> <kevin> I think I'm doing this check wrong though because if the socket doesn't connect right away it blocks all other async functions
[21:32:04] <FromDiscord> <kevin> (edit) "https://play.nim-lang.org/#ix=3PHa" => "https://play.nim-lang.org/#ix=3PHd"
[21:33:49] <nrds> <06Prestige99> Is the playground not down for you?
[21:46:05] <FromDiscord> <ynfle> In reply to @nrds "<Prestige> Is the playground": Down for me
[21:48:46] <FromDiscord> <Arathanis> You could use repl.it in the interim. I do most of my online nim noodling there over the playground.
[21:50:13] <FromDiscord> <ynfle> I much prefer local
[21:51:49] <FromDiscord> <Arathanis> Agreed. But I figured since the playground was being talked about we were pretty firmly in the realm of online editors.
[21:52:28] <FromDiscord> <Arathanis> ive got a `noodling` dir in my homedir with a folder for all the languages im playing with just for this kind of thing
[21:53:40] <FromDiscord> <ynfle> In reply to @Arathanis "ive got a `noodling`": I just make standalone files
[21:54:48] <FromDiscord> <Arathanis> im just noodling on something somewhat specific so I either name a file or folder what that specific thing is so its easy for me to reference if I want to integrate it into a project in some capacity
[21:55:12] <FromDiscord> <Arathanis> like when I decided to start actually playing with nim's macro system I had↵`$HOME/noodling/nim/nmacros.nim`
[21:55:32] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[21:55:48] <FromDiscord> <ynfle> In reply to @Arathanis "like when I decided": Right. I just usually do macrotest.nim etc.
[21:55:57] <FromDiscord> <ynfle> (edit) "macrotest.nim" => "`macrotest.nim`"
[21:56:08] <FromDiscord> <Arathanis> that makes a lot of sense to me
[21:56:39] <FromDiscord> <Arathanis> i have a bad habit of flooding a directory with too many files unless I enforce some extra organization on myself haha
[21:56:51] <FromDiscord> <Arathanis> so my folder structure is kind of their for future me's benefit
[21:57:28] <FromDiscord> <Arathanis> and for a good ol' `ll $HOME/noodling/nim | ack macros`
[22:01:19] <FromDiscord> <ynfle> Lol. Make sense
[22:02:09] *** Quits: cyraxjoe (~joe@2806:109f:13:8841:2244:b0ac:de0e:a47c) (Ping timeout: 252 seconds)
[22:02:44] *** Joins: cyraxjoe (~joe@2806:109f:13:a15e:8e1f:c80e:91a8:2dd)
[22:04:10] <FromDiscord> <ckennedy> Anyone have experience with SDL2 on OSX M1? I compiled SDL2, but I'm getting `'/usr/local/lib/libSDL2.dylib' (mach-o file, but is an incompatible architecture (have 'arm64', need 'x86_64')` when I try to run the Nim executable.
[22:10:05] <FromDiscord> <auxym> no experience, but it sounds like you compiled libSDL2 for x86_64 instead of M1
[22:10:22] <FromDiscord> <auxym> oh wait no
[22:10:24] <FromDiscord> <auxym> that's weird
[22:19:54] *** Joins: PMunch (~PMunch@user/pmunch)
[22:21:03] <FromDiscord> <ckennedy> so compiling SDL2 after running `/usr/bin/arch --x86_64 /bin/zsh --login` got it working
[22:22:31] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[22:26:20] <FromDiscord> <ckennedy> which is weird because `nim c` in the arm64 shell seems to be producing an x86_64 binary?
[22:29:40] <PMunch> Why wouldn't it?
[22:29:51] <PMunch> Sorry, I just joined so I can't see what you've typed before
[22:30:19] <Amun-Ra> PMunch: arm64 not amd64 ;>
[22:30:28] <PMunch> Oooh
[22:32:14] *** Joins: rockcavera (~rc@192.12.112.205)
[22:32:14] *** Quits: rockcavera (~rc@192.12.112.205) (Changing host)
[22:32:14] *** Joins: rockcavera (~rc@user/rockcavera)
[22:42:24] <FromDiscord> <auxym> In reply to @ckennedy "which is weird because": you might have to pass --cpu:arm to the compiler? and perhaps the compiler execs for that cpu. Not sure how toolchains work on m1
[23:10:04] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[23:18:34] <FromDiscord> <ckennedy> @auxym weirdly `--cpu:arm64` seemed to have no affect. It failed with the same message prior to using `/usr/bin/arch`, and it still has no effect after as well (though it works with or without).
[23:21:11] <FromDiscord> <haolian9 (高浩亮)> hi, what TArg should be for `proc foo(a: int, b: string) {.thread.}`?
[23:34:34] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
