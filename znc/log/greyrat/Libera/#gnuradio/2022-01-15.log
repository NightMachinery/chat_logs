[00:02:04] *** Joins: Malvolio (~Malvolio@user/malvolio)
[00:09:55] *** Joins: pcero (~pcero@187.135.224.23)
[00:20:07] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[00:20:49] *** Quits: Macuser (~Macuser@2600:1003:b44b:8b77:119a:bf86:f49e:93cf) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:21:24] *** Joins: jemius (~jemius@p200300d9670a1800cedef05fe999fabb.dip0.t-ipconnect.de)
[00:27:23] *** Quits: tph (~tph@user/Eupolis) (Ping timeout: 256 seconds)
[00:38:33] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Quit: quit)
[00:40:47] *** Joins: tph (~tph@user/Eupolis)
[00:43:24] *** tph is now known as Eupolis
[00:56:02] *** Joins: tom_mcdermott_n5 (~tommcderm@2001:470:69fc:105::1:69e1)
[00:58:34] <tom_mcdermott_n5> ppa: gnuradio-release pointing to 3.9.4 ?
[00:59:17] <tom_mcdermott_n5> s/ppa: gnuradio-release pointing to 3.9.4 ?/Is the ppa: gnuradio-releases still pointing to 3.9.4, or do the repositories take some time to update?/
[01:02:20] *** Quits: jemius (~jemius@p200300d9670a1800cedef05fe999fabb.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[01:16:13] *** Joins: jemius (~jemius@p200300d9670a1800cedef05fe999fabb.dip0.t-ipconnect.de)
[01:23:54] <BarryDuggan[m]> Jacob: We may need to clarify the wording in the wiki. My impression was that it would publish `TAKE` samples and then ignore `SKIP` samples. I hadn't thought about what it would do after that...
[01:25:49] <Jacob[m]12> Yeah. I noticed that.... Take/stride might have been a better name for that
[01:25:56] <Jacob[m]12> Or keep m in n
[01:26:47] <BarryDuggan[m]> So a keep first m in n?
[01:27:36] <JoshMorman[m]> <tom_mcdermott_n5> "ppa: gnuradio-release pointing..." <- Working on that at the moment.  It is a very manual process, so it takes some time
[01:29:41] *** Quits: pcero (~pcero@187.135.224.23) (Quit: Konversation terminated!)
[01:32:56] <BarryDuggan[m]> Jacob: would a Keep_M_in_N followed by a Tagged_Stream_to_PDU be roughly equivalent?
[01:38:21] <Jacob[m]12> Provided there were stream tags for the second block to work with, yes
[01:39:33] <Jacob[m]12> The take/skip block was made for simple use cases. Sampling a stream periodically or converting an entire stream to pdu
[01:57:37] <jogn_1[m]> <Jacob[m]12> "The take/skip block was made for..." <- What would you say it can be used for?
[01:58:09] <jogn_1[m]> I can't really tell what it can be used for thats why haha
[02:00:04] <Jacob[m]12> so in that example it is sampling 1024 samples from the input stream and converting it to a PDU (every 40.96k samples) 
[02:01:01] <Jacob[m]12> in this case it is shipping those over the network (and back) to a time domain visualizer
[02:01:38] <Jacob[m]12> that example needs a throttle though
[02:01:58] <jogn_1[m]> <BarryDuggan[m]> "Jacob: would a Keep_M_in_N..." <- Good question I was going to ask that aswell
[02:02:12] <jogn_1[m]> Ah okay, makes sense. Thanks Jacob.
[02:05:17] <Jacob[m]12> ok i just checked and i'm wrong. setting skip to zero means "use all data"
[02:05:59] <Jacob[m]12> so take and skip are literal and your docs are correct Barry Duggan 
[02:06:16] <Jacob[m]12> sorry for the confusion. jogn_1 what are you trying to do with this?
[02:15:41] <jogn_1[m]> <Jacob[m]12> "sorry for the confusion. jogn_1..." <- No worries. So, for instance measuring something in real time continously -> when the data goes over some interval, it will start saving and then transmitting for example. 
[02:15:48] <jogn_1[m]> that's what I was thinking to use it for or finding alternatives ways of doing it
[02:20:09] <jogn_1[m]> If that makes sense.
[02:21:47] <jogn_1[m]> measuring something I was thinking the strength / dB level for starting point.
[02:22:11] <jogn_1[m]> * dB level of the signal for starting
[02:22:20] *** Quits: uros (~Thunderbi@2001:8a0:6074:ad00:5680:e48e:ca52:709e) (Quit: uros)
[02:22:22] <Jacob[m]12> yeah; it works fairly well for periodically sampling an input stream. this can be done with streaming blocks too but sometimes its more convenient to have the data as a PDU
[02:22:52] <jogn_1[m]> How so, if you don't mind explaining?
[02:24:33] <Jacob[m]12> how can you sample a stream? or how can you measure data on streaming blocks?
[02:24:44] <Jacob[m]12> * can you use this block to sample a, * streaming blocks?e
[02:24:59] <Jacob[m]12> * can you use this block to sample a
[02:26:07] <jogn_1[m]> Just curious on both haha. I'm new to gnuradio so there's not everything I am familar with. I have only started just recently playing around with it.
[02:27:14] *** Quits: thunndar (~thunndar@172.56.13.191) (Quit: WeeChat 3.4)
[02:27:22] <jogn_1[m]> s///of/, s/dB/the/, s/level/signal/
[02:28:04] *** Joins: tph (~tph@user/Eupolis)
[02:29:07] <Jacob[m]12> sure. no problem just want to help. the example you posted a picture of is sampling a data stream and packing 1024 samples up into a message that can be passed around with metadata. downstream PDU blocks can be created to measure features of those samples (and append them to the PDU metadata, publish those results directly, etc).
[02:29:49] <Jacob[m]12> if you want to measure something as a streaming input, that block is a decent example of how you can do that. It collects 1024 samples into a buffer then writes it out as a PDU but you could just as easily perform some computation on that buffer
[02:31:29] *** Quits: Eupolis (~tph@user/Eupolis) (Ping timeout: 256 seconds)
[02:32:12] <jogn_1[m]> Hm..
[02:32:13] <jogn_1[m]> I see.
[02:34:37] *** Quits: etolier_ (~somewhere@122-199-44-127.ip4.superloop.com) (Quit: No Ping reply in 180 seconds.)
[02:35:51] *** Joins: etolier (~somewhere@122-199-44-127.ip4.superloop.com)
[02:36:35] *** Quits: tph (~tph@user/Eupolis) (Ping timeout: 256 seconds)
[02:36:51] <jogn_1[m]> So err going back to the question I had earlier. The "thresholding" block can be used, but instead of making it "user-defined" are there possible ways of making it automated if that makes sense. I was just trying to read through a few posts to get some ideas (this one from 5 year old): https://stackoverflow.com/questions/37948475/how-to-measure-the-db-level-of-a-signal 
[02:37:39] <jogn_1[m]> s/./?/
[02:39:01] <jogn_1[m]> or any alternatives?
[02:42:07] <jogn_1[m]> I'm just trying to find ways of limiting of saving and transmitting data continously, that's why I asked and came across that post.
[02:44:44] <jogn_1[m]> jogn_1[m]: If that makes sense :P
[02:46:06] <flash[m]> would it make sense to have an output block (ZMQ sink, UDP sink, some message out) that sends the power level, and then an external process to send in the control?
[02:47:20] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[02:50:26] <jogn_1[m]> <jogn_1[m]> "If that makes sense :P" <- I mean that's what I think I haven't actucally tried it but I think for a different case i remember I  looked at an youtube video in one of the conferences about spectrum monitoring or something, and they mentioned that to process the frequencies when it's absolutely needed or something along those line
[02:50:40] <jogn_1[m]> s/line/lines/
[02:51:48] <jogn_1[m]> but obviously that was for a different use case ^
[02:51:57] <flash[m]> I'm pretty simplistic, but I think of gnuradio as a processor of a stream of I/Q. If you want to make decisions, that should be outside
[02:52:16] <jogn_1[m]> <flash[m]> "would it make sense to have an..." <- Hm..
[02:53:23] <jogn_1[m]> flash[m]: Yeah true. I'll have a look if there any OOTs or anything that does similar stuff
[03:01:18] *** Quits: etolier (~somewhere@122-199-44-127.ip4.superloop.com) (Quit: No Ping reply in 180 seconds.)
[03:01:52] <jogn_1[m]> I guess if that doesn't work out I can try to make it time driven, which gets rid of transmitting bunch of continuous data, but on the other side for example transmitting the data is above an interval would be better to get rid of the "unwanted" data.
[03:02:04] <muaddib[m]> In case it’s of any additional help here, in the xmlrpc tutorials there’s an advanced section all the way at the bottom where I’ve written an application that runs on a forward sensor (maybe A single board computer code located with a rooftop antenna or a satellite groundstation out in the middle of nowhere) that then sends a very low rate decimated/averaged stream over net work to a monitoring station where the spectrum can be viewed
[03:02:04] <muaddib[m]> and the remote side can be remotely controlled. Both remote and monitor used new radio entry blocks. No OOT’s is needed
[03:02:12] <jogn_1[m]> s/is//
[03:02:32] *** Joins: etolier (~somewhere@122-199-44-127.ip4.superloop.com)
[03:03:14] <jogn_1[m]> s/is/when/
[03:03:27] <muaddib[m]> https://wiki.gnuradio.org/index.php/Understanding_XMLRPC_Blocks
[03:03:37] <jogn_1[m]> I'll have a look thank you so much!
[03:07:02] *** Quits: gr33nR10t (~greenriot@user/gr33nr10t) (Read error: Connection reset by peer)
[03:08:53] *** Quits: Acinonyx (~acinonyx@user/acinonyx) (Ping timeout: 256 seconds)
[03:09:10] *** Joins: Acinonyx (~acinonyx@user/acinonyx)
[03:11:01] *** Joins: gr33nR10t (~greenriot@user/gr33nr10t)
[03:11:33] *** Quits: Hoernchen (~hornulus@osmocom/hoernchen) (Ping timeout: 256 seconds)
[03:12:08] *** Joins: Hoernchen (~hornulus@osmocom/hoernchen)
[03:14:45] <jogn_1[m]> <muaddib[m]> "In case it’s of any additional..." <- I just had a look. I can see that working but I find that to be abit complex for my level hehe. I just started with GNU radio this week?. I'm just trying to get more experience along the way, and eventually dive into more complex stuff later when I get more used to it. 
[03:16:50] <jogn_1[m]> XML-RPC protocol is interesting though.
[03:22:07] <muaddib[m]> Yea man for sure. Just thought I’d put that out there for ya. 
[03:22:07] <muaddib[m]> A lot of long-time users don’t even know about using xmlrpc for remote control. 
[03:23:12] <flash[m]> xmlrpc is the simplest way to sent C2 type messages between programs
[03:23:12] <jogn_1[m]> but that's pretty cool though I didn't know about it until you mentioned it so thanks
[03:25:43] <muaddib[m]> I think in the early stages of learning GNURadio, it’s nice to just know what’s out there and what people have done with the built-in functions.
[03:25:54] <jogn_1[m]> I can give it a try, since my goal is to learn much more as possible about GNU Radio. So, you say that could be done without writing any custom blocks and just using the protocol to interact?
[03:27:08] <jogn_1[m]> muaddib[m]: For sure. That's why I want to try to learn more about the blocks and learn like the different block alternatives step by step, and then eventually have some experience and then later try doing something complex with it.
[03:37:11] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[03:39:20] <microp11_> DerekKozel: thank you for your response on my question regarding setting variables. I appreciate it very much and I am going to try it. Was not able to get to the chat until now and just wanted to make sure that your answer gets acknowledged. Thank you.
[03:40:53] <microp11_> DerekKozel: using 3.8
[03:46:00] <jogn_1[m]> <muaddib[m]> "In case it’s of any additional..." <- But, how does that help though? I can't really tell, it just makes you have remote control and makes you change the flowchart on the other computer? But, lets say your using raspberry pi why not just make a remote control session which you can connect to from anywhere which pretty much does the same thing?
[03:51:36] <jogn_1[m]> Hah sorry if I said anything wrong - I'm not good at putting things into perspective :P
[03:51:55] <jogn_1[m]> * into perspective., *  If I haven't worked with it much :P
[03:52:36] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[03:54:39] <microp11_> DerekKozel: I see, it is in 3.9. will be switching to it.
[03:56:58] *** Quits: jemius (~jemius@p200300d9670a1800cedef05fe999fabb.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[04:08:24] <BarryDuggan[m]> jogn_1: Since you are a newbie, I strongly recommend that you work through the https://wiki.gnuradio.org/index.php/Tutorials before you dive into the deep end. A lot of your questions will get answered there.
[04:10:18] *** Joins: Macuser (~Macuser@2600:1003:b46e:3be4:40c7:cbaf:893:5d51)
[04:13:29] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Ping timeout: 256 seconds)
[04:17:27] *** Quits: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[04:22:33] *** Quits: goldrak (~goldrak@bl16-27-108.dsl.telepac.pt) (Ping timeout: 256 seconds)
[04:38:30] *** Joins: thunndar (~thunndar@172.56.13.191)
[05:00:08] *** Joins: Crofton_ (sid401373@id-401373.lymington.irccloud.com)
[05:03:00] *** Joins: ClaytonargiloVE4 (~argilognu@2001:470:69fc:105::e120)
[05:03:56] *** Joins: mepholic (~mepholic@flux.hxx.in)
[05:05:37] *** Joins: crochenkora[m]1 (~crochenko@2001:470:69fc:105::1:5df5)
[05:05:37] *** Joins: geraman21[m]1 (~geraman21@2001:470:69fc:105::e79d)
[05:06:01] *** Joins: DavidGarca[m]1 (~pdgarciam@2001:470:69fc:105::1:6743)
[05:06:15] *** Joins: mbr0wn[m]1 (~mbr0wngnu@2001:470:69fc:105::e175)
[05:06:53] *** Joins: DavidLuttonM7DA4 (~davidlmat@2001:470:69fc:105::e9dc)
[05:08:20] *** Quits: Macuser (~Macuser@2600:1003:b46e:3be4:40c7:cbaf:893:5d51) (Quit: Textual IRC Client: www.textualapp.com)
[05:09:04] *** Quits: Crofton (sid401373@id-401373.lymington.irccloud.com) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: epony (~epony@user/epony) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: ClaytonargiloVE3 (~argilognu@2001:470:69fc:105::e120) (Ping timeout: 240 seconds)
[05:09:05] *** Crofton_ is now known as Crofton
[05:09:06] *** Quits: DavidGarca[m] (~pdgarciam@2001:470:69fc:105::1:6743) (Ping timeout: 240 seconds)
[05:09:06] *** Quits: timelessness[m] (~timelessn@2001:470:69fc:105::1:664d) (Ping timeout: 240 seconds)
[05:09:06] *** Quits: geraman21[m] (~geraman21@2001:470:69fc:105::e79d) (Ping timeout: 240 seconds)
[05:09:06] *** Quits: crochenkora[m] (~crochenko@2001:470:69fc:105::1:5df5) (Ping timeout: 240 seconds)
[05:09:06] *** Quits: cbosso[m] (~quantus25@2001:470:69fc:105::ebc4) (Ping timeout: 240 seconds)
[05:09:06] *** Quits: goldi[m] (~goldihalo@2001:470:69fc:105::b4cd) (Ping timeout: 240 seconds)
[05:09:06] *** Quits: r4d10n[m]1 (~r4d10nmat@2001:470:69fc:105::1:6255) (Ping timeout: 240 seconds)
[05:09:06] *** Quits: mbr0wn[m] (~mbr0wngnu@2001:470:69fc:105::e175) (Ping timeout: 240 seconds)
[05:09:06] *** Quits: nw[m] (~nwgnuradi@2001:470:69fc:105::e189) (Ping timeout: 240 seconds)
[05:09:06] *** Quits: bayatr[m] (~bayatrgnu@2001:470:69fc:105::1:5722) (Ping timeout: 240 seconds)
[05:09:06] *** Quits: DavidLuttonM7DAL (~davidlmat@2001:470:69fc:105::e9dc) (Ping timeout: 240 seconds)
[05:09:06] *** Quits: patchvonbraun[m] (~patchvonb@2001:470:69fc:105::e18d) (Ping timeout: 240 seconds)
[05:09:06] *** Quits: flynn378[m] (~flynn378g@2001:470:69fc:105::e145) (Ping timeout: 240 seconds)
[05:09:06] *** Quits: radiohead21[m] (~radiohead@2001:470:69fc:105::1:4a9a) (Ping timeout: 240 seconds)
[05:09:06] *** Quits: wiml[m] (~wimlmatri@2001:470:69fc:105::ec8b) (Ping timeout: 240 seconds)
[05:09:06] *** Quits: thoth[m] (~thoth1010@2001:470:69fc:105::20c2) (Ping timeout: 240 seconds)
[05:09:06] *** Quits: maven[m] (~mavengnur@2001:470:69fc:105::1:526f) (Ping timeout: 240 seconds)
[05:09:06] *** Quits: karel[m]1 (~karelgnur@2001:470:69fc:105::ead1) (Ping timeout: 240 seconds)
[05:09:06] *** Quits: jp48[m] (~jp48gnura@2001:470:69fc:105::e160) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: meph (~mepholic@flux.hxx.in) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: flash[m] (~flashgnur@2001:470:69fc:105::e302) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: BarryDuggan[m] (~kv4fvgnur@2001:470:69fc:105::3927) (Ping timeout: 240 seconds)
[05:09:07] *** Joins: timelessness[m] (~timelessn@2001:470:69fc:105::1:664d)
[05:09:07] *** Joins: cbosso[m]1 (~quantus25@2001:470:69fc:105::ebc4)
[05:10:01] *** Joins: epony (~epony@user/epony)
[05:10:07] *** Joins: bayatr[m] (~bayatrgnu@2001:470:69fc:105::1:5722)
[05:11:36] *** Joins: goldi[m] (~goldihalo@2001:470:69fc:105::b4cd)
[05:12:16] *** Joins: nw[m] (~nwgnuradi@2001:470:69fc:105::e189)
[05:12:48] *** Joins: patchvonbraun[m] (~patchvonb@2001:470:69fc:105::e18d)
[05:12:57] <muaddib[m]> <jogn_1[m]> "Hah sorry if I said anything..." <- You’re good dude. 
[05:13:22] *** Joins: karel[m]1 (~karelgnur@2001:470:69fc:105::ead1)
[05:13:25] <muaddib[m]> Do the tutorials. Keep learning. Ask questions.
[05:13:35] *** Joins: jp48[m] (~jp48gnura@2001:470:69fc:105::e160)
[05:13:47] *** Joins: maven[m] (~mavengnur@2001:470:69fc:105::1:526f)
[05:13:56] *** Joins: radiohead21[m] (~radiohead@2001:470:69fc:105::1:4a9a)
[05:14:23] *** Joins: flynn378[m] (~flynn378g@2001:470:69fc:105::e145)
[05:18:37] *** Joins: wiml[m] (~wimlmatri@2001:470:69fc:105::ec8b)
[05:18:41] *** Joins: thoth[m] (~thoth1010@2001:470:69fc:105::20c2)
[05:19:42] *** Joins: r4d10n[m]1 (~r4d10nmat@2001:470:69fc:105::1:6255)
[05:21:14] *** Joins: flash[m] (~flashgnur@2001:470:69fc:105::e302)
[05:21:16] *** Joins: BarryDuggan[m] (~kv4fvgnur@2001:470:69fc:105::3927)
[05:44:03] *** Joins: thunn__ (~thunn@2607:fb90:3a49:9444:c5f3:b576:94bc:8a1d)
[05:44:14] *** Quits: thunn__ (~thunn@2607:fb90:3a49:9444:c5f3:b576:94bc:8a1d) (Remote host closed the connection)
[05:44:54] *** Joins: n0odv (~thunn@2607:fb90:3a49:9444:c5f3:b576:94bc:8a1d)
[05:45:11] *** Quits: thunndar (~thunndar@172.56.13.191) (Quit: WeeChat 3.4)
[05:48:01] *** Quits: n0odv (~thunn@2607:fb90:3a49:9444:c5f3:b576:94bc:8a1d) (Client Quit)
[05:48:41] *** Joins: thunndar (~thunn@2607:fb90:3a49:9444:c5f3:b576:94bc:8a1d)
[06:24:49] <microp11_> hi, following the demo for embedded python block I created a block that takes as input a stream of floats and returns only a message that is used to set a variable through a message pair to var block. For now I am just trying to return a value of 25.0 for each input stream chunk. 
[06:25:15] <microp11_> my code looks like this:
[06:25:31] <microp11_>  def work(self, input_items, output_items):
[06:25:55] <microp11_> output_items[0][0] = input_items[0][1] -< not sure if needed as out_sig in constructor is set to None
[06:26:14] <mcdiarmid[m]> Does anyone here happen to understand the .alist file format?  I can't figure out what the 3rd and 4th rows represent, trying to generate a couple of these files
[06:26:18] <mcdiarmid[m]> https://github.com/gnuradio/gnuradio/tree/master/gr-fec/ldpc_alist
[06:26:22] <microp11_> self.message_port_pub(pmt.intern('correction'), 25.0) -< I hope this is the line setting the message correction to 25.0
[06:26:48] <mcdiarmid[m]> * what the 2nd, 3rd and
[06:27:07] <microp11_> return len(output_items[0][0]) -< i am not sure if this is correct but the len of 25.0 is the same in this case because it is a float 32
[06:27:50] *** Quits: Hoernchen (~hornulus@osmocom/hoernchen) (Quit: meh.)
[06:28:40] *** Joins: Hoernchen (~hornulus@osmocom/hoernchen)
[06:30:21] <mcdiarmid[m]> <microp11_> "hi, following the demo for..." <- When you say "return a value of 25", do you mean you would like the output of your block to be 25? 
[06:30:36] <mcdiarmid[m]> * the output stream of your
[06:32:34] <microp11_> mcdiarmid: i would like to have no output, all i would like is that from time to time, my block based on the input stream to send out a pair <variable, value> that i can use to set a variable
[06:33:11] <microp11_> using the message pair to var block
[06:33:41] <microp11_> like a sink with just a msg output
[06:35:58] <microp11_> the example at https://wiki.gnuradio.org/index.php/Embedded_Python_Block sends an "out" and a "clear_input". i would want something with just a "clear_input" if you will
[06:37:18] <microp11_> I honestly think i will figure it out as i am very close, was just looking for the easy way out :(
[06:44:16] <mcdiarmid[m]> Set your `work` function to return `len(input_items[0])`.  Only other things you'll need to do is register the port within the initialization function `self.message_port_register_out(pmt.intern('test'))` and refer to that same port when publishing an output in your `work` function `self.message_port_pub(pmt.intern('test'), pmt.intern(f'{25}'))`
[06:44:42] <mcdiarmid[m]> s/`/`.  (Just tried this myself)/
[06:45:36] <microp11_> I did register the port with : self.message_port_register_out(pmt.intern('correction'))
[06:45:47] <microp11_> thank you, i'll give it a try right away
[06:57:46] <microp11_> no luck, getting IndexError: list index out of range. my work function looks like this, and i am not sure if i need the output_items, in the definition out_sig is set to None
[06:57:58] <microp11_>     def work(self, input_items, output_items):
[06:57:58] <microp11_>         """not sure"""
[06:57:58] <microp11_>         output_items[0][:] = input_items[0]
[06:57:58] <microp11_>         self.message_port_pub(pmt.intern('correction'), pmt.intern(f'{25}'))
[06:57:58] <microp11_>         return len(output_items[0])
[06:58:35] <microp11_> where this is def:
[06:58:36] <microp11_>     def __init__(self):  # only default arguments here
[06:58:36] <microp11_>         """arguments to this function show up as parameters in GRC"""
[06:58:36] <microp11_>         gr.sync_block.__init__(
[06:58:36] <microp11_>             self,
[06:58:36] <microp11_>             name='Frequency auto track',   # will show up in GRC
[06:58:38] <microp11_>             in_sig=[np.float32],
[06:58:40] <microp11_>             out_sig=None
[06:58:42] <microp11_>         )
[06:58:44] <microp11_>         self.message_port_register_out(pmt.intern('correction'))
[07:00:57] <mcdiarmid[m]> He's a gist of the block's code that I've run with no trouble https://gist.github.com/mcdiarmid/0f8e1f248d1ec973858d761558beebca
[07:09:01] *** Quits: BSaboia (~bsaboia@177.37.198.83) (Quit: This computer has gone to sleep)
[07:11:19] <microp11_> I understand what the problem was now, I was setting the output_items as well, and it did not like that.
[07:11:24] <microp11_> thank you
[07:13:21] <microp11_> as the out_sig is set to None.
[07:14:39] *** Quits: Lucanis (~Lucanis@user/lucanis) (Ping timeout: 256 seconds)
[07:55:05] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[08:05:41] *** Joins: Lucanis (~Lucanis@user/lucanis)
[08:07:43] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[08:12:32] *** Joins: maxtim (~maxtim__@c-71-228-128-153.hsd1.ga.comcast.net)
[08:22:15] *** Quits: maxtim (~maxtim__@c-71-228-128-153.hsd1.ga.comcast.net) (Quit: Leaving)
[08:41:35] *** Quits: koma (~koma@user/koma) (Quit: Arc)
[08:44:56] *** Joins: koma (~koma@user/koma)
[09:13:21] <microp11_> hi, i am using a "Message Pair to Var" (Variable is test1) to set the value of a "Variable" of (Id test1). 
[09:13:58] <microp11_> i am using an embedded python bloc and the output is: self.message_port_pub(pmt.intern('outpair'), pmt.intern(f'{input_items[0][0]}'))
[09:14:34] <microp11_> if i add a debugger block this is what i am getting
[09:14:46] <microp11_> gr::log 2022-01-15 01:39:16,428 :ERROR: Error with message conversion: pmt_cdr: wrong_type -0.6242246031761169
[09:14:46] <microp11_> ******* MESSAGE DEBUG PRINT ********
[09:14:46] <microp11_> -0.4666634798049927
[09:14:46] <microp11_> ************************************
[09:14:46] <microp11_> gr::log 2022-01-15 01:39:18,019 :ERROR: Error with message conversion: pmt_cdr: wrong_type -0.4666634798049927
[09:14:51] <microp11_> ******* MESSAGE DEBUG PRINT ********
[09:14:53] <microp11_> -0.6276403069496155
[09:15:16] <microp11_> it looks like i am sending a string instead of a float?
[09:16:37] <microp11_> i have tried conversions and read the PTM's documentation, just cannot figure this out
[09:18:56] <microp11_> if I try sending: self.message_port_pub(pmt.intern('outpair'), pmt.intern(input_items[0][0])) it fails because it tries to convert float to int i think
[09:19:08] <microp11_> input_items[0][0] is a float
[09:23:17] <microp11_> how can i send a float through for a message pair to Var?
[09:31:55] <microp11_> https://gist.githubusercontent.com/microp11/6eaf002abd12376511b14d63c031b152/raw/dafa18d108b77a3f1afcde9c93a8a77774a06991/
[09:39:54] *** Quits: Malvolio (~Malvolio@user/malvolio) (Killed (erbium.libera.chat (Nickname regained by services)))
[09:40:54] *** Joins: Malvolio (~Malvolio@user/malvolio)
[09:43:04] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[09:44:11] *** Joins: microp11 (~microp11@host-24-222-106-3.public.eastlink.ca)
[09:44:15] *** Quits: microp11_ (~microp11@host-24-222-106-3.public.eastlink.ca) (Ping timeout: 256 seconds)
[09:49:42] *** Quits: microp11 (~microp11@host-24-222-106-3.public.eastlink.ca) (Ping timeout: 250 seconds)
[09:54:24] *** Joins: microp11 (~microp11@host-24-222-106-3.public.eastlink.ca)
[09:59:07] <microp11> finally, figured it out, kindly disregard previous questions
[09:59:13] <microp11>             self.message_port_pub(pmt.intern('outpair'),
[09:59:13] <microp11>                                   pmt.cons(pmt.intern('test1'), pmt.from_double(input_items[0][0])))
[10:05:19] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[10:33:42] *** Joins: microp11_ (~microp11@host-24-222-106-3.public.eastlink.ca)
[10:34:51] *** Quits: microp11 (~microp11@host-24-222-106-3.public.eastlink.ca) (Ping timeout: 256 seconds)
[10:45:59] <microp11_> Thank you so much everyone. My demodulator now auto centers itself, all inside the graph.
[10:47:40] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[11:00:55] *** Quits: microp11_ (~microp11@host-24-222-106-3.public.eastlink.ca) (Ping timeout: 256 seconds)
[11:35:57] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[11:36:43] *** Quits: epony (~epony@user/epony) (Quit: QUIT)
[11:38:21] *** Joins: epony (epony@user/epony)
[11:50:12] *** Joins: uros (~Thunderbi@2001:8a0:6074:ad00:39be:1b29:6d99:fd6a)
[12:04:34] *** Joins: jemius (~jemius@p200300d967294400c344a14a892411d1.dip0.t-ipconnect.de)
[12:25:07] *** Quits: ve7it (~LawrenceG@S0106f0f249afdb93.pk.shawcable.net) (Remote host closed the connection)
[12:30:08] *** Quits: mcan06[m] (~mcan06gnu@2001:470:69fc:105::eb3a) (Quit: You have been kicked for being idle)
[12:30:10] *** Quits: orig4m1[m] (~orig4m1ma@2001:470:69fc:105::1f8c) (Quit: You have been kicked for being idle)
[12:30:10] *** Quits: Jan-on6lm[m] (~on6lmgnur@2001:470:69fc:105::eb96) (Quit: You have been kicked for being idle)
[12:30:10] *** Quits: kempke[m] (~kempkegnu@2001:470:69fc:105::eadb) (Quit: You have been kicked for being idle)
[12:30:10] *** Quits: protolog[m] (~protologg@2001:470:69fc:105::ebbc) (Quit: You have been kicked for being idle)
[12:30:11] *** Quits: spz[m] (~spzgnurad@2001:470:69fc:105::ec28) (Quit: You have been kicked for being idle)
[12:30:11] *** Quits: tcdegraw[m] (~tcdegrawg@2001:470:69fc:105::ec36) (Quit: You have been kicked for being idle)
[12:30:11] *** Quits: lola[m] (~lolagnura@2001:470:69fc:105::eb02) (Quit: You have been kicked for being idle)
[12:30:11] *** Quits: janschirok[m] (~janschiro@2001:470:69fc:105::1:d) (Quit: You have been kicked for being idle)
[12:30:11] *** Quits: tony_t[m] (~tonytgnur@2001:470:69fc:105::fd03) (Quit: You have been kicked for being idle)
[12:30:11] *** Quits: aallam3[m] (~aallam3gn@2001:470:69fc:105::fd38) (Quit: You have been kicked for being idle)
[12:30:11] *** Quits: krystian[m] (~krystiang@2001:470:69fc:105::1:838) (Quit: You have been kicked for being idle)
[12:30:11] *** Quits: bhilburn[m] (~bhilburng@2001:470:69fc:105::e127) (Quit: You have been kicked for being idle)
[12:30:11] *** Quits: rgetz[m] (~rgetzgnur@2001:470:69fc:105::fcfa) (Quit: You have been kicked for being idle)
[12:30:12] *** Quits: jane[m] (~janegnura@2001:470:69fc:105::ea8f) (Quit: You have been kicked for being idle)
[12:30:12] *** Quits: ht[m] (~htgnuradi@2001:470:69fc:105::ea7b) (Quit: You have been kicked for being idle)
[12:30:12] *** Quits: ClarkChiu[m] (~clarkcklg@2001:470:69fc:105::e771) (Quit: You have been kicked for being idle)
[12:30:13] *** Quits: ydalmia[m] (~ydalmiagn@2001:470:69fc:105::ec9c) (Quit: You have been kicked for being idle)
[12:30:13] *** Quits: TomWallace[Vespe (~tomwallac@2001:470:69fc:105::fb2f) (Quit: You have been kicked for being idle)
[13:15:19] *** Joins: LY2SS (~zilvis@78-62-148-109.static.zebra.lt)
[13:38:30] *** Quits: jemius (~jemius@p200300d967294400c344a14a892411d1.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[14:10:55] *** Quits: OnAironaut (~OnAir@user/onaironaut) (Remote host closed the connection)
[14:27:43] *** Joins: jemius (~jemius@p200300d967294400c344a14a892411d1.dip0.t-ipconnect.de)
[14:40:57] *** Joins: OnAironaut (~OnAir@user/onaironaut)
[15:04:01] *** Quits: arch3r (~ben@gateway/vpn/pia/arch3r) (Ping timeout: 256 seconds)
[15:05:37] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[15:09:24] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Client Quit)
[15:12:14] *** Joins: arch3r (~ben@gateway/vpn/pia/arch3r)
[15:25:24] *** Joins: arch3r- (~ben@gateway/vpn/pia/arch3r)
[15:27:39] *** Quits: arch3r (~ben@gateway/vpn/pia/arch3r) (Ping timeout: 256 seconds)
[15:27:39] *** arch3r- is now known as arch3r
[15:43:22] *** Joins: AdamHorden[m] (~adamhorde@2001:470:69fc:105::e115)
[15:57:11] *** Quits: jemius (~jemius@p200300d967294400c344a14a892411d1.dip0.t-ipconnect.de) (Quit: Leaving)
[15:59:25] <tom_mcdermott_n5> <JoshMorman[m]> "Working on that at the moment..." <- Thanks for all the hard work on 3.10.  Looks to be awesome!
[16:07:52] *** Joins: goldrak (~goldrak@bl16-27-108.dsl.telepac.pt)
[16:25:26] *** Quits: arch3r (~ben@gateway/vpn/pia/arch3r) (Quit: bye)
[16:44:52] *** Joins: BSaboia (~bsaboia@177.37.198.83)
[16:52:55] *** Joins: k0emt (~k0emt@2601:801:4100:302:4715:4c80:5081:81eb)
[16:56:50] *** Quits: BSaboia (~bsaboia@177.37.198.83) (Quit: This computer has gone to sleep)
[16:59:44] <JoshMorman[m]> Still having trouble getting 3.9.5.0 updated on the ppa, but 3.10.0.0 is there now:
[16:59:44] <JoshMorman[m]> https://launchpad.net/~gnuradio/+archive/ubuntu/gnuradio-releases
[17:34:14] *** Quits: OnAironaut (~OnAir@user/onaironaut) (Ping timeout: 250 seconds)
[17:39:16] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[17:43:30] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[17:47:36] *** Quits: k0emt (~k0emt@2601:801:4100:302:4715:4c80:5081:81eb) (Quit: Leaving)
[18:01:06] *** Quits: uros (~Thunderbi@2001:8a0:6074:ad00:39be:1b29:6d99:fd6a) (Ping timeout: 250 seconds)
[18:22:19] <JoshMorman[m]> (and thanks mait for all the work packaging this!!)
[18:41:52] *** Quits: linext_ (~linext@pool-108-53-128-199.nwrknj.fios.verizon.net) (Read error: Connection reset by peer)
[19:07:54] *** Quits: Keshl (~Purple@idlerpg/player/Keshl) (Read error: Connection reset by peer)
[19:08:17] *** Joins: Keshl (~Purple@idlerpg/player/Keshl)
[19:17:22] *** Joins: BSaboia (~bsaboia@177.37.198.83)
[19:19:01] *** Quits: LY2SS (~zilvis@78-62-148-109.static.zebra.lt) (Ping timeout: 256 seconds)
[19:43:13] *** Joins: arch3r (~ben@gateway/vpn/pia/arch3r)
[19:55:50] *** Joins: jemius (~jemius@p200300d967294400c344a14a892411d1.dip0.t-ipconnect.de)
[20:00:54] *** Quits: Keshl (~Purple@idlerpg/player/Keshl) (Read error: Connection reset by peer)
[20:01:17] *** Joins: Keshl (~Purple@idlerpg/player/Keshl)
[20:06:48] *** Quits: murrayn (~murray@user/murrayn) (Read error: Connection reset by peer)
[20:17:10] *** Quits: arch3r (~ben@gateway/vpn/pia/arch3r) (Ping timeout: 250 seconds)
[20:19:52] *** Joins: arch3r (~ben@gateway/vpn/pia/arch3r)
[20:47:51] *** Joins: Foxyfox (~Foxyahuas@201.191.3.105)
[20:53:57] *** Joins: Foxyfoxy (~Foxyahuas@201.191.3.105)
[20:57:02] *** Quits: Foxyfox (~Foxyahuas@201.191.3.105) (Ping timeout: 250 seconds)
[21:27:50] *** Joins: vassenn (~vassen@178.35.109.151)
[21:28:43] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:47:19] *** Quits: Foxyfoxy (~Foxyahuas@201.191.3.105) (Ping timeout: 256 seconds)
[21:58:47] *** Joins: ve7it (~LawrenceG@S0106f0f249afdb93.pk.shawcable.net)
[22:00:44] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[22:03:59] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Client Quit)
[22:18:33] *** Quits: vassenn (~vassen@178.35.109.151) (Quit: Good bye!)
[22:33:48] *** Joins: uros (~Thunderbi@bl5-152-18.dsl.telepac.pt)
[22:34:02] *** Quits: uros (~Thunderbi@bl5-152-18.dsl.telepac.pt) (Client Quit)
[22:35:05] *** ClaytonargiloVE4 is now known as argilo[m]
[22:50:35] *** Quits: jemius (~jemius@p200300d967294400c344a14a892411d1.dip0.t-ipconnect.de) (Quit: Leaving)
[22:52:49] *** Quits: thunndar (~thunn@2607:fb90:3a49:9444:c5f3:b576:94bc:8a1d) (Read error: Connection reset by peer)
[22:53:33] *** Joins: thunndar (~thunn@2607:fb90:3a49:9444:c5f3:b576:94bc:8a1d)
[23:41:48] <tom_mcdermott_n5> > <@mormj:gnuradio.org> Still having trouble getting 3.9.5.0 updated on the ppa, but 3.10.0.0 is there now:
[23:41:48] <tom_mcdermott_n5> > https://launchpad.net/~gnuradio/+archive/ubuntu/gnuradio-releases
[23:41:48] <tom_mcdermott_n5> Thanks, Josh!   Appreciate all the hard work 3.10 installed easily.  New features look cool.
