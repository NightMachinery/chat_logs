[01:40:37] <headius> He was responding to another issue late last week
[01:40:52] <headius> We may need to consider the possibility of changing the build sooner than later
[01:41:00] <headius> Something we can maintain better
[01:45:21] <enebo[m]> I find maven to be pretty opaque in how to fix problems
[01:45:58] <enebo[m]> I can read the log and realize it decided not to build -sources.jar but why jruby-complete needs it as part of release
[01:46:49] <enebo[m]> Just don't know why...and this may not really purely be maven but just standards established by sonatype but it is it's own domain which requires some level of expertise
[01:47:04] <headius> I don't know the sonatype rules on that... It shades the dependent libraries but does that count as a transitive thing or a new library that aggregates to others and still needs sources?
[01:47:25] <headius> When we shaded libraries in core we didn't include the source of those other libraries so I am a bit confused as well
[01:47:43] <enebo[m]> jruby-base is not listed in the resulting pom.xml even if you remove that exclusion
[01:47:57] <enebo[m]> so I feel like it only lists immediate transitive deps?
[01:48:21] <enebo[m]> although does jruby-complete say it is direct trans dep to asm?
[01:49:21] <headius> And I assume removing the exclude did not help?
[01:49:25] <enebo[m]> I love to just dismiss maven altogether since I have never liked it but I feel like we just lack some knowledge in how this is supposed to work when pushing
[01:49:42] <enebo[m]> headius: that line does not do anything to the xml file
[01:50:07] <headius> Maybe check on sonatype pages for push requirements? I have some errands to run but back in a bit
[01:51:18] <headius> This has to be caused by the new artifact, probably some minor config tweak needed
[01:51:40] <enebo[m]> yeah I am guessing worst case there is an empty source jar which would just solve it too
[01:52:57] <enebo[m]> https://rmannibucau.metawerx.net/mavens-shade-plugin-source-relocation.html
[01:52:58] <enebo[m]> boom
[02:02:49] <enebo[m]> nope guess not
[02:03:06] <headius> Hmm
[02:16:42] <enebo[m]> LOL: [INFO] Building jar: /home/enebo/work/release/shaded/target/jruby-core-9.3.0.0-sources.jar
[02:16:56] <enebo[m]> I just made a source dir and made a single .java file
[02:17:12] <enebo[m]> Not a real solution but good enough to see if the rest of this builds fully
[02:20:45] <enebo[m]> https://gist.github.com/enebo/d665a9c691c31815aa84e60de1f92897
[02:21:18] <headius> Nice
[02:22:37] <enebo[m]> looks like because we are rewriting asm now it is still looking for original asm name?
[02:23:58] <headius> What do you mean?
[02:24:08] <headius> We have been rewriting it a long time
[02:24:22] <enebo[m]> well it is not looking for the shaded package name though
[02:24:54] <enebo[m]> oh it is including base and core
[02:25:48] <headius> So it should just be core I guess?
[02:26:02] <enebo[m]> HAHAH I don't know but I don't know what -- include -- means in package
[02:26:04] <headius> Did stdlib build sources?
[02:27:03] <enebo[m]> nope no sources to compile
[02:29:26] <enebo[m]> need to afk but I wonder if we need some exclusion logic during package not to include both if that is even what is happening
[03:18:07] <headius> I should have access to a MacStadium M1 Mac Mini instance soon for JRuby/JNR usage!
[03:55:46] <basshelal[m]> That's good news! It should also build for x86 macOS as well I'd imagine?
[06:08:13] <headius> Yeah should be possible
[13:26:07] *** Quits: sagax (~sagax_nb@user/sagax) (Read error: Connection reset by peer)
[14:26:42] *** Quits: drbobbeaty (~drbob@c-24-14-127-107.hsd1.il.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[15:05:42] *** Joins: drbobbeaty (~drbob@c-24-14-127-107.hsd1.il.comcast.net)
[19:42:34] <headius> g'da
[19:42:45] <headius> ack... g'day
[19:48:35] <headius> enebo: shyouhei replied that if it were his choice right now he would stick with fileutils 1.4.1 rather than try to pull in a newer version
[19:48:38] <headius> after Thursday there may be a 1.4.2 but we are probably safe deferring the upgrade to 9.3.1
[19:48:41] <enebo[m]> ok
[19:48:46] <headius> (the change is fairly minor anyway)
[19:48:50] <headius> I will punt the issue to 9.3.1
[19:49:12] <enebo[m]> so I am trying to change Mavenfile in jruby-jars so it runs without the asm error
[19:49:38] <headius> I didn't see the error, is it in the email to mkristian?
[19:49:50] <enebo[m]> No I discovered it after that
[19:50:22] <enebo[m]> I posted a gist showing the error yesterday but it is ClassNotFound on asm OpCodes
[19:50:33] <enebo[m]> https://gist.github.com/enebo/d665a9c691c31815aa84e60de1f92897
[19:51:04] <headius> oh yeah the renaming thing
[19:51:14] <enebo[m]> I speculated it may have to do with core and base being included in packaging
[19:51:39] <enebo[m]> So I have been trying to exclude but that itself I have not figured out yet
[19:51:46] <headius> I guess core would be doing the renaming since it does the shading
[19:52:02] <headius> if base is getting pulled in as well and replacing those classes it would go back to original name but asm still wrong
[19:52:58] <enebo[m]> we must not run jruby-jars in any tests
[19:53:10] <headius> that doesn't surprise me
[20:29:12] <headius> I have an M1 runner configured and running thanks to MacStadium's OSS program
[20:29:23] <headius> going to see if I can toss a job to it so we can start shoring up compat there
[20:29:38] <headius> (release notes on hold since we are still working through release issues)
[20:49:57] <headius> wowie wow, it just started working: https://github.com/jruby/jruby/pull/6823/checks?check_run_id=3601144418
[20:50:18] <headius> I don't think this will pass but that was easier than I thought... install Java 11, set up the runner and run it, and throw a job into workflows
[20:51:11] <headius> rake test:jruby is actually running, albeit with (expected) errors
[20:51:45] <headius> yeah native support is not loading, that aligns with reports
[22:03:54] <headius> I started filling out release notes with a few major items: https://github.com/jruby/jruby/releases/tag/untagged-91cd42b1ba6fa7f36259
[22:04:21] <headius> anyone that thinks they need to see this (or who might be able to help), let me know if you can't see it and I will try to open up the permissions
[22:04:41] <headius> i.e. anyone that contributed a non-trivial amount to this release or just wants to help read through issues and add bullets
[22:05:03] <headius> maybe I should move this into an issue ðŸ¤”
[22:15:03] <headius> yes I decided that would be easier
[22:15:05] <headius> https://github.com/jruby/jruby/issues/6825
[22:48:39] <enebo[m]> good news in a sense....
[22:48:46] <enebo[m]> java -jar ./maven/jruby-complete/target/jruby-complete-9.3.0.0.jar -S gem list
[22:48:46] <enebo[m]> Exception in thread "main" java.lang.NoClassDefFoundError: org/objectweb/asm/ClassVisitor
[22:49:18] <enebo[m]> Not sure why I didn't notice this earlier but our jruby-complete bit is just broken
[22:51:04] <enebo[m]> The other thing I noticed in jruby-complete:
[22:51:07] <enebo[m]>   # we have no sources and attach the sources and javadocs from jruby-core
[22:51:07] <enebo[m]>   # later in the build so IDE can use them
[22:51:07] <enebo[m]>   plugin( :source, 'skipSource' =>  'true' )
[22:51:08] <enebo[m]> haha
[22:51:55] <enebo[m]> So in theory this plugin line was made because jruby-core has no source ... which is the first problem we ran into
[22:52:50] <headius> aha ok
[22:52:55] <headius> at least this is making some sense
[22:53:18] <enebo[m]> if only it actually skipped source though :)
[22:53:46] <enebo[m]> I guess it is skipping it's own source but not jruby-core not having source
[22:53:50] <enebo[m]> perhaps I can solve it in jruby-core with that line
[22:53:54] <enebo[m]> I will give that a try
[22:56:34] <enebo[m]> # YUUGE
[22:56:42] <enebo[m]> ## YUUGER
[22:56:54] <enebo[m]> ok any amount of # is bold/h1
[22:58:47] <enebo[m]> hmm.  ok no stickers on channel
[22:59:09] <enebo[m]> funny I wonder what that looks like from irc bridge
[23:05:49] <enebo[m]> yay fixed first problem...now to fix what is with jruby-complete
[23:16:20] <enebo[m]> LOL.  mvn -Pcomplete makes a jruby-complete.jar which contains NO classes from jruby but if performed as part of the release build must
[23:16:39] <enebo[m]> Trying again with a clean build
[23:17:34] <enebo[m]> I think it might be time to migrate to a new build system.  If for no other reason that I understand it
[23:17:51] <enebo[m]> I wish buildr had taken off
[23:21:39] <enebo[m]> ok looks like complete requires core has been built first
[23:21:56] <enebo[m]> it gets its contents from the core target .jar
[23:22:32] <enebo[m]> which makes me wonder if core is actually usable now.  jruby-complete it just stuffing the same contents into it
[23:24:31] <enebo[m]> ok hahaha mvn -Pcore will make an empty jar with only the poms in it.
[23:24:48] <enebo[m]> So I guess mvn -Pbase -Pcore -Pcomplete ?
[23:27:42] <enebo[m]> Hmm -Pbase will do core and stdlib but if I look at target jar made for core it only contains the pom files
[23:31:17] <enebo[m]> lib/jruby.jar contains no shaded stuff that I see but the contents of jruby-base and lib/jruby.jar differ too.  I am rerunning this but I am pretty confused and just spamming the channel with running commentary
[23:35:06] <enebo[m]> related up a couple of layers in the onion: https://app.travis-ci.com/github/jruby/jruby/jobs/537386439
[23:35:57] <enebo[m]> We stopped passing this job a while ago because there is no org/jruby/Main in jruby-complete.jar anymore.  It is running Pjruby_complete_jar_extended vs -Pcomplete but more or less same issue
[23:42:46] <enebo[m]> yow...that job has not build jruby-complete for at least a year.  It has been a rough 18 months
[23:51:03] <byteit101[m]> headius: in the release notes it may be good to mention my first PR related to annotations for JI
[23:52:17] <byteit101[m]> #4165
[23:53:08] <byteit101[m]> (or 6141 if you want the PR vs the issue number)
