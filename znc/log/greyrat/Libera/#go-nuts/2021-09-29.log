[00:01:58] *** Joins: LTCD (~LTCD@2a02:c7f:dd1c:b600:7054:c68f:608:1db1)
[00:02:16] *** Quits: tar_xvf (~tar_xvf@c-76-116-112-52.hsd1.nj.comcast.net) (Quit: Leaving...)
[00:02:27] <LTCD> Hey. This is complaining that I am sending too many arguments: func (l *Logger) Error(errorcode string, args ...interface{}) {
[00:02:28] <LTCD> 	l.log.Error(errorcode, args...)
[00:02:28] <LTCD> }
[00:04:25] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[00:04:29] *** Joins: Compy__ (~compy@user/compy)
[00:05:53] *** Joins: tar_xvf (~tar_xvf@c-76-116-112-52.hsd1.nj.comcast.net)
[00:06:00] *** Quits: lithamme- (~lithammer@arch-vps.cloud.tilaa.com) (Quit: ZNC - http://znc.in)
[00:08:02] *** Joins: lithammer (~lithammer@arch-vps.cloud.tilaa.com)
[00:08:23] *** Quits: Compy_ (~compy@user/compy) (Ping timeout: 246 seconds)
[00:09:01] <lungaro> do you maybe have something masking Error ? Got a better example? =P
[00:11:07] <LTCD> type Logger struct {
[00:11:08] <LTCD> 	log *logrus.Logger
[00:11:08] <LTCD> }
[00:13:31] *** Quits: int3l (~int3l@78-83-113-66.spectrumnet.bg) (Quit: WeeChat 3.3)
[00:14:28] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[00:14:42] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[00:20:09] <lungaro> i'd suggest you put a working example here https://play.golang.org/ -- that is not a complete picture
[00:20:17] *** Quits: tar_xvf (~tar_xvf@c-76-116-112-52.hsd1.nj.comcast.net) (Quit: Leaving...)
[00:22:02] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:22:13] *** Quits: gpeskens_ (~gpeskens@62.251.31.165) (Quit: Leaving)
[00:22:30] *** Joins: tar_xvf (~tar_xvf@c-76-116-112-52.hsd1.nj.comcast.net)
[00:23:03] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[00:23:17] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[00:23:33] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[00:28:24] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[00:28:30] *** Quits: tane (~tane@dslb-002-201-234-068.002.201.pools.vodafone-ip.de) (Quit: Leaving)
[00:28:34] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 252 seconds)
[00:29:44] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[00:30:47] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 246 seconds)
[00:32:09] *** Quits: arinov (~arinov@31.142.40.252) (Quit: WeeChat 3.1)
[00:32:27] *** Joins: arinov (~arinov@31.142.40.252)
[00:32:32] *** Joins: iliaf (~iliaf@user/iluxa)
[00:32:46] *** Quits: ysavd^ (~ysavd@68.101.50.106) (Ping timeout: 250 seconds)
[00:32:47] *** Joins: fikran (~fikran@user/fikran)
[00:33:52] *** Quits: iluxa (~iliaf@user/iluxa) (Ping timeout: 260 seconds)
[00:36:16] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[00:38:59] *** Joins: tedwing (~anon@lfbn-idf3-1-1409-51.w109-221.abo.wanadoo.fr)
[00:39:30] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[00:39:43] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[00:40:24] *** Quits: arinov (~arinov@31.142.40.252) (Ping timeout: 265 seconds)
[00:40:40] *** Quits: tedwing (~anon@lfbn-idf3-1-1409-51.w109-221.abo.wanadoo.fr) (Client Quit)
[00:41:01] <MD87> LTCD: With variadic parameters you can either pass individual elements (f(1,2,3)) or use the ... operator (f(someSlice...)), you can't combine the two
[00:41:38] <LTCD> Ohhh
[00:41:49] <MD87> If you want to pass the errorCode followed by the args you'll probably want to use append() to make a new slice then use ... on that
[00:42:27] *** Joins: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de)
[00:45:24] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[00:46:03] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:accb:27ca:84a8:2eaf)
[00:46:13] <lungaro> in your example, l.log.Error isn't variadic, you want l.log.Errorf
[00:46:33] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 265 seconds)
[00:48:54] *** Quits: pi1 (~pi@177.223.162.27) (Quit: WeeChat 2.8)
[00:48:58] *** Joins: burningserenity (~burningse@143.244.34.154)
[00:49:06] *** Quits: freakazoid12345 (~matt@2603-9000-cf0f-80e3-accb-27ca-84a8-2eaf.inf6.spectrum.com) (Ping timeout: 265 seconds)
[00:49:11] *** Joins: pi1 (~pi@177.223.162.27)
[00:53:55] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 252 seconds)
[00:55:37] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:accb:27ca:84a8:2eaf)
[00:56:27] <fizzie> `l.log.Error` is variadic too.
[00:58:05] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:accb:27ca:84a8:2eaf) (Ping timeout: 246 seconds)
[00:58:36] *** Quits: pi1 (~pi@177.223.162.27) (Quit: WeeChat 2.8)
[01:00:38] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[01:01:23] *** Quits: rbn (~rbn@user/rbn) (Quit: leaving)
[01:01:33] *** Joins: rbn (~rbn@user/rbn)
[01:03:48] *** Quits: phylaz (~phylaz@219.92-221-176.customer.lyse.net) (Quit: The Lounge - https://thelounge.chat)
[01:04:18] *** Joins: phylaz (~phylaz@219.92-221-176.customer.lyse.net)
[01:04:24] <LTCD> Thanks!
[01:05:02] *** Quits: LTCD (~LTCD@2a02:c7f:dd1c:b600:7054:c68f:608:1db1) (Quit: Client closed)
[01:05:34] *** Quits: phylaz (~phylaz@219.92-221-176.customer.lyse.net) (Client Quit)
[01:07:57] *** Joins: Izem (~Izem@bras-base-london1483w-grc-27-70-51-121-7.dsl.bell.ca)
[01:12:36] *** Quits: Izem (~Izem@bras-base-london1483w-grc-27-70-51-121-7.dsl.bell.ca) (Ping timeout: 256 seconds)
[01:14:21] *** Joins: pepee (~pepee@user/pepee)
[01:15:42] *** Quits: tebruno99 (~tebruno99@user/tebruno99) (Quit: I'm out!)
[01:15:58] *** Joins: tebruno99 (~tebruno99@user/tebruno99)
[01:17:22] *** Joins: Izem (~Izem@bras-base-london1483w-grc-27-70-51-121-7.dsl.bell.ca)
[01:18:14] *** Parts: Izem (~Izem@bras-base-london1483w-grc-27-70-51-121-7.dsl.bell.ca) ()
[01:23:52] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[01:29:02] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[01:30:09] *** Quits: blinux (~blinux@pool-108-48-11-122.washdc.fios.verizon.net) (Quit: WeeChat 3.2.1)
[01:31:27] *** Joins: ConstantDesc (~textual@cpc158823-hari22-2-0-cust72.20-2.cable.virginm.net)
[01:34:59] *** Joins: burningserenity_ (~burningse@102.129.153.177)
[01:35:56] *** Quits: burningserenity (~burningse@143.244.34.154) (Ping timeout: 245 seconds)
[01:36:57] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 265 seconds)
[01:39:45] *** Joins: blinux (~blinux@pool-108-48-11-122.washdc.fios.verizon.net)
[01:41:24] *** Quits: novns (~novns@user/novns) (Quit: ZNC 1.8.2 - https://znc.in)
[01:41:44] *** Quits: ConstantDesc (~textual@cpc158823-hari22-2-0-cust72.20-2.cable.virginm.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[01:41:51] *** Joins: novns (~novns@user/novns)
[01:42:30] *** Joins: gpeskens (~gpeskens@62.251.31.165)
[01:50:36] <krux02> Is there a `for ... { if ... { break } } else { ... }` construct in go?
[01:51:08] <krux02> loop over several conditions, and when none of them match go to the else branch
[01:51:43] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[01:54:36] <fizzie> No, there's no `else` branch for a loop in Go. You'd probably have to DIY it with flags and/or gotos. (Though "text/template" pipelines have a {{range ...}}...{{else}}...{{end}} construct. I think you tend to get that sort of thing more with template engines.)
[01:55:55] <krux02> in nim there was a named break that I could use with named blocks.
[01:56:24] <krux02> go seems to have namebd breaks as well, but there is no named block, only named loop
[01:56:55] <seebs> i sort of hate "else" on a for/while/etc, it just doesn't seem to make any sense to me.
[01:57:16] <seebs> either it means the same thing as just putting that code after the for, or it means something weird and confusing.
[01:57:37] <krux02> seebs, it means something weired and confusing
[01:58:11] <krux02> no it is just a very long if {} else if {} else if {} else
[01:58:11] <fizzie> I know there's at least two different weird and confusing things it can mean, because IIRC Jinja templates and Python define the same thing differently.
[01:58:38] <krux02> but with the difference that all the conditions are processed in a loop rather than a static construct.
[01:59:21] <krux02> I don't know Jinja at all, and I only know python superficially.
[01:59:25] <krux02> never liked python.
[02:00:28] <fizzie> Python's `else` clause in a `for` loop executes when the loop terminates "normally" (by running out of things to iterate, or having the condition evaluate to false), but not when you `break` out of it.
[02:00:34] *** Joins: ConstantDesc (~textual@cpc158823-hari22-2-0-cust72.20-2.cable.virginm.net)
[02:00:48] <fizzie> So it's not the same sort of "if the loop didn't actually run" kind of an else.
[02:01:08] <krux02> python's is a weird language.
[02:01:15] *** Joins: gggp (~textual@60.10.23.159)
[02:01:27] <seebs> ... so, it's an "at the end of the loop unless you terminated early"? weird
[02:01:32] *** Quits: ConstantDesc (~textual@cpc158823-hari22-2-0-cust72.20-2.cable.virginm.net) (Client Quit)
[02:01:50] <krux02> but it is exactly what I need right now
[02:02:14] <fizzie> AFAIK, the intended use case is when you do a loop to search for something, you put the "didn't find it" logic in the else block, and use an early `break` if you do find it.
[02:02:31] <krux02> or better said, I am experimenting with writing a scanner for my toy language
[02:02:56] <krux02> and I constantly need to iterate on characters and stop at some point.
[02:03:03] <krux02> I do it with for loops
[02:03:06] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[02:03:07] <krux02> but honestly I hate it.
[02:03:35] <krux02> scanner/lexer/tokenizer
[02:03:40] <krux02> all mixed up in my language
[02:04:11] <krux02> I am really not much experiencd in go I probably use the wrong tool
[02:07:29] <b0nn> So, isn't this a Switch statement with a default "Not found"
[02:08:21] *** Joins: Jim2 (~Jim@2.194.128.11)
[02:08:55] *** Joins: girafe2 (~girafe@176-147-142-235.abo.bbox.fr)
[02:09:39] *** Joins: nehsou^ (~nehsou@68.101.50.106)
[02:10:02] *** Parts: Jim2 (~Jim@2.194.128.11) ()
[02:11:58] <krux02> if I do `mystr := otherstr[3:20]` it doesn't copy, does it?
[02:12:05] *** Quits: girafe (~girafe@176-147-142-235.abo.bbox.fr) (Ping timeout: 264 seconds)
[02:12:21] <krux02> b0nn, yes
[02:12:28] <b0nn> nah, creates a "subslice" I think
[02:12:43] <krux02> and a string is internally a slice?
[02:13:01] <fizzie> It's not exactly a slice, because it hasn't got a capacity, it only has a length.
[02:13:05] <b0nn> I think, because I don't know if you can slixe a string like that - because it's not addressable, and even if it were you'd be looking at a slice of bytes
[02:13:32] <krux02> not addressable?
[02:13:33] <krux02> wtf?
[02:13:50] <b0nn> krux02: []rune() the string first, I think that will give you something closer to what you want
[02:14:31] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[02:14:34] <krux02> b0nn, nope I won't do that because it will destroy byte adresses
[02:15:21] <krux02> I want to do parsing in the files as it is on the hard disk
[02:15:37] <krux02> preferably even with memory mapped files as string
[02:15:45] <fizzie> krux02: Anyway, yes, `mystr` and `otherstr` will share storage after that, here's a demonstration: https://play.golang.org/p/z3v-ZNcfFBF
[02:15:59] <b0nn> hrm https://utcc.utoronto.ca/~cks/space/blog/programming/GoAddressableValues
[02:16:27] <b0nn> you can take slices of unaddressable slices, just not of unaddressable arrays
[02:16:53] <zsnes> https://play.golang.org/
[02:17:02] <zsnes> err https://play.golang.org/p/EPHTgz1Ez3Z
[02:17:07] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[02:17:08] <krux02> I still don't get the unaddressable stuff
[02:17:10] <zsnes> seems to make a copy from what I see testing
[02:17:35] <fizzie> No, you just never modify a string (because they're immutable).
[02:17:36] <zsnes> you can certainly address characters in a string, but you can't assign to them, strings are immutable
[02:18:53] <fizzie> I don't see how you'd deduce from https://play.golang.org/p/EPHTgz1Ez3Z that s[0:3] (or a[0:3] either) makes a copy.
[02:19:00] <zsnes> btw you can "freely" convert from []byte(), []rune() and string
[02:19:27] <krux02> zsnes, I don't think so
[02:19:28] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[02:19:33] <zsnes> fizzie: well after assigning the source variable to something else, the "copy" is still the same as the original string
[02:19:46] <zsnes> you don't think what? yes you can lol
[02:20:01] <fizzie> zsnes: Yes, but that doesn't mean anything, because "assigning the source variable" changes what data it's pointing at.
[02:20:14] <krux02> zsnes, how can the conversion of string to []rune be free?
[02:20:22] <zsnes> so you're saying it made a copy at the time of a and s being reassigned?
[02:20:33] <krux02> you have to reallocate and parse the runes in the string
[02:20:53] <zsnes> krux02: its just a matter of reinterpreting the memory block in a different way
[02:21:01] <fizzie> No, it didn't make a copy at any time. The reassignment just made a/s to refer to a different string.
[02:21:02] <zsnes> similar to a type cast in C
[02:21:15] <zsnes> fizzie: then why is twochars and twochars still "hel" ?
[02:21:25] <zsnes> shouldn't it be whatever s[0:3] equals now, if it was a reference slice
[02:21:25] <krux02> zsnes, that conflicts with all my knowledeg that I have about utf8
[02:21:26] <zsnes> and nto a copy
[02:21:40] <fizzie> zsnes: No, why should it? It's still referring to (a part of) the original string/slice.
[02:21:50] <krux02> string is utf8 and []rune is utf32
[02:21:54] <fizzie> You never modified it, so of course it still has the original contents.
[02:21:56] <krux02> different encoding
[02:22:03] <fizzie> (With the string, it's not like you could modify it anyway.)
[02:22:06] <zsnes> i reassigned the variable pointing to it?
[02:22:08] <b0nn> zsnes: When the original is reassigned to new data, the sub slice still points to the old data, not a copy
[02:22:11] <zsnes> but ok let me try modifyign the string then
[02:22:21] <zsnes> yes that makes sense i guess
[02:22:38] <zsnes> well you can't do that with a string
[02:22:41] <zsnes> you can't modify a string, so..
[02:22:44] *** Quits: theoceaniscool (~theoceani@119.12.232.133) (Ping timeout: 265 seconds)
[02:22:45] <zsnes> i can try it with the runes
[02:23:14] <fizzie> https://play.golang.org/p/ccwGfqHksX_a -- see, `twochars2` got changed.
[02:23:27] <zsnes> yeah so it did change it
[02:23:45] <zsnes> ok so that is what i thought
[02:23:58] <zsnes> the assignment thing is somewhat confusing
[02:26:16] <b0nn> WRT the strings, I think it's clearest if we think in terms of addresses, even though they aren't entirely applicable - orig := 0x0001 - 0x0008; subslice := 0x0003 - 0x0006; when a new string is created for orig the pointer in orig moves, to, say 0x0010 - 0x0020; so the subslice still points at the original data, not a copy
[02:27:13] <zsnes> yeah, so basically giving the appearence of copying that section of the string
[02:27:19] <zsnes> because there is no way to modify that slice now
[02:28:37] <b0nn> Yeah - and getting the address of the slice would be the slice struct, not its contents (although you might be able to via unsafe.Pointer)
[02:30:03] <krux02> zsnes, https://play.golang.org/p/3EY72iXy141
[02:30:25] <krux02> the rune slice is differnt memory than the string
[02:30:31] <krux02> "not free"
[02:32:42] <b0nn> I wonder if the compiler makes an optimisation there, that is, if the slice is never modified, there's no need to make a copy (having said that though, it'd be a real PITA to try and track if that slice is ever modified)
[02:33:16] <krux02> b0nn, a string cannot be reinterpreted as a []rune
[02:33:37] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[02:33:54] <krux02> there is no compiler optimization possible
[02:34:08] <krux02> converting a string to a []rune is always a reallocation.
[02:34:23] <fizzie> Sure it's *possible*, it just needs to rewrite all the operations on the []rune to perform the equivalent things on the fly on the string data.
[02:34:28] <zsnes> thats exactly what happens if you do a for range over the string
[02:34:35] <zsnes> it converts the string to []rune()
[02:34:40] <zsnes> if it was making a copy everytime that'd be pretty silly
[02:35:25] <krux02> zsnes, it emulates as if you would iterato over []rune, but it never converts ever to an actual []rune
[02:35:47] <zsnes> emulates it?
[02:35:52] <zsnes> where does it say that in the spec
[02:36:01] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[02:36:15] <b0nn> that's an implementation detail
[02:36:33] <zsnes> indeed
[02:36:39] <fizzie> Well, there's nothing inherently impossible in doing exactly that even if your source code has the tokens `[]rune(s)` in it. Especially if, say, the only way you use that []rune is in `for i, r := range []rune(s) { ... }`.
[02:36:51] <fizzie> (I don't know if it actually *does* that; my guess is probably not. But it could.)
[02:36:57] <zsnes> how are you emulating a rune array without converting it to runes? what?
[02:37:28] <b0nn> unless you store the string as []runes in the first place, and a read is a conversion
[02:37:33] <krux02> fizzie, if it would do that, my code would be devastated in performance
[02:38:04] <krux02> fizzie, and no it can't do that
[02:38:12] <fizzie> Well, obviously a sufficiently clever compiler to do that would only do it when it's advantageous.
[02:38:23] <fizzie> But you could *certainly* make it compile `for i, r := range []rune(s) { ... }` into a piece of code that doesn't allocate storage for all the runes at once.
[02:38:50] <fizzie> (Like I said, I don't think it does, it was more a comment about possibilities.)
[02:40:16] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[02:40:32] <zsnes> the spec for "range" says this: For a string value, the "range" clause iterates over the Unicode code points in the string starting at byte index 0.
[02:41:01] <fizzie> Yes. So in that specific case, where you don't do anything else with the []rune, it would only need to transform that to the equivalent of `i := 0; for _, r := range s { ...; i++ }`, to make the index handling match.
[02:41:21] *** Quits: burningserenity_ (~burningse@102.129.153.177) (Ping timeout: 245 seconds)
[02:41:27] <krux02> https://play.golang.org/p/pm0HSGbAXze
[02:41:39] <krux02> fizzie, zsnes ^
[02:42:02] <krux02> the indices are all different
[02:42:07] *** Joins: fikran (~fikran@user/fikran)
[02:42:16] <fizzie> I know. That's why I said what I just said as my previous comment.
[02:43:31] <fizzie> Or in terms of your example, there's no fundamental reason why it couldn't generate the same code for both of the things in https://play.golang.org/p/vRfF2xTYucD since they have the same observable behavior.
[02:46:24] <zsnes> so basically its only free in a for range loop but not if you just convert a string to bytes or vice versa..
[02:46:31] <zsnes> that's a wonderful caveat
[02:48:47] <fizzie> I mean, the range loop is just a special case that's *easy*, don't get too hung up on that. But in practical fact it would seem to generate a call to `runtime.stringtoslicerune` even in the simple case, so I'm not arguing you shouldn't just simplify it to "conversion from string to []rune is always a copy". Just that you shouldn't claim it somehow *must* be that as a law of physics.
[02:49:02] <krux02> is there an easy shortcut to get the last element of a slice?
[02:49:20] <krux02> like back() in std::vector?
[02:49:49] <fizzie> No, you have to type `slice[len(slice)-1]`.
[02:50:32] <krux02> myVeryLongObject.veryLongMember.myVeryVeryLongName[len(myVeryLongObject.veryLongMember.myVeryVeryLongName)-1] it is then?
[02:50:58] <bpalmer> go suggests not using long names.
[02:51:09] <fizzie> Or `s := myVeryLongObject.veryLongMember.myVeryVeryLongName; s[len(s)-1]`.
[02:51:50] <bpalmer> (or a very tiny helper function)
[02:52:07] <krux02> does go already have generics? If yes I could implement `back()` on my own
[02:52:12] <krux02> I constantly need it.
[02:53:54] <fizzie> It doesn't. There's been a suggestion that there'll likely eventually be a "slices" package akin to the existing "strings" (except dealing with generic []T rather than string) once generics land; it might be a function in there eventually.
[02:54:03] <zsnes> you _could_ do that with []interface{} and then use type assertions which would be messy and not worth it
[02:55:10] <zsnes> type GenericSlice []interface{} ... func (gs *GenericSlice) Back() interface{} { return gs[len(gs)-1] } <-- and then you need to type assert the result of back() every time
[02:55:17] <bpalmer> or reflect.ValueOf(s).Len()
[02:55:29] <zsnes> or you could do this for the one tpe of slice you are using, if its the same type of slice all the time
[02:55:56] <bpalmer> but , really, s[len(s)-1] seems like a much simpler approach.
[02:56:46] <bpalmer> without the overhead, without the design issues. If s is a long name, most text editors make it easy to deal with
[02:57:13] <zsnes> yeah i pretty much never use reflect, ever..unless its looking up struct tags
[02:57:39] <krux02> I am used to languages that have some form to access the end
[02:57:53] <fizzie> An `[]interface{}` is hardly ever useful for anything (except for an actual heterogenous list of arbitrary things, which itself is probably pretty uncommon), because you can't convert a `[]somethingElse` to it. Without actually making a separate []interface{}, that is.
[02:58:07] <krux02> c++ has s.back()  or *(end(s)-1)
[02:58:35] <krux02> nim has back indices s[^1]
[02:58:46] <krux02> python just allows negative numbers.
[02:59:48] <krux02> zsnes, reflect is pretty much for serialization.
[03:00:11] <fizzie> There was a failed proposal to allow negative *constants* for indexing operations as a very shallow syntactic-sugar level, if you're interested. https://github.com/golang/go/issues/33359
[03:00:27] <fizzie> (Also links to few of the earlier flavors of it.)
[03:01:29] <fizzie> Also discusses a few of the more creative special syntaxes for it, like `len` without an argument, or a special use for _.
[03:03:24] *** Joins: sillyboots (~sillyboot@65.128.48.91)
[03:05:15] <zsnes> krux02: reflect can also be useful for debugging and sometimes meta programming
[03:06:13] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[03:06:40] *** Quits: endigma (~endigma@134.41.124.82) (Quit: The Lounge - https://thelounge.chat)
[03:07:50] *** Joins: endigma (~endigma@134.41.124.82)
[03:08:02] <bpalmer> Without generics, func Back(s interface{}) interface{} { v := reflect.ValueOf(s); return v.Index(v.Len() -1).Interface() }   is the (expensive) way to write generic back handling
[03:08:53] <zsnes> i think template interfaces would be better and easier to add
[03:08:55] <bpalmer> not really meta programming nor reflection
[03:08:57] <zsnes> than full generics
[03:09:11] <bpalmer> well, generics have sailed; they'll be in an upcoming release.
[03:09:23] <zsnes> ie if you could supply a T type in your interfaces
[03:11:26] *** Quits: lauraaah (uid156848@id-156848.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[03:12:10] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[03:15:53] <krux02> bpalmer, I think it is interesting that go finally gets generics after a very very long fight against them.
[03:17:11] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 245 seconds)
[03:18:17] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[03:18:23] <Sam> The Go team has said from the beginning that they might have generics but only if they could find a Go like way to do them. They made dozens of proposals trying to get it right. Others might have fought against it, but the writing was always on the wall.
[03:19:16] *** Quits: mei (~mei@user/mei) (Ping timeout: 245 seconds)
[03:21:56] *** Quits: zwr (~zwr@2804:d45:b966:fb00:577c:5ccb:f11a:b2bc) (Ping timeout: 246 seconds)
[03:23:11] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[03:24:36] *** Quits: nakedeyes (~nakedeyes@user/nandormagyar) (Ping timeout: 265 seconds)
[03:26:03] *** Quits: Pokey (~pokey@spikeyCactus/hoosky) (Ping timeout: 265 seconds)
[03:26:16] *** Quits: m-kad (~quassel@2a02:c207:2043:4525::1) (Ping timeout: 252 seconds)
[03:26:42] *** Joins: nakedeyes (~nakedeyes@user/nandormagyar)
[03:26:46] *** Quits: longsleep (~quassel@2a02:c207:3001:216:1000::1) (Ping timeout: 268 seconds)
[03:27:31] *** Joins: Pokey (~pokey@spikeyCactus/hoosky)
[03:27:32] *** Joins: m-kad (~quassel@2a02:c207:2043:4525::1)
[03:27:36] *** Joins: longsleep (~quassel@2a02:c207:3001:216:1000::1)
[03:28:52] *** Joins: zwr (~zwr@2804:d45:b966:fb00:577c:5ccb:f11a:b2bc)
[03:32:10] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 250 seconds)
[03:36:42] <b0nn> heh, perfection is the enemy of progress :)
[03:39:36] <krux02> Sam, I disagree here. The language was designed in a way to make generics unnecessary.
[03:40:00] <tar_xvf> that is interesting, how so krux02?
[03:40:04] <krux02> make types where generics would be useful builtin types, so that the languages doesn't need to add generics (see maps)
[03:41:21] <krux02> but the pressure from the community was always there. The willingness to do so was not.
[03:42:09] <krux02> And now after a decade, there is the resignation in the form of, ok we get it you really really want generics
[03:44:29] *** Quits: pztrn (~pztrn@user/pztrn) (Read error: Connection reset by peer)
[03:44:35] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.2)
[03:44:51] *** Joins: pztrn (~pztrn@user/pztrn)
[03:44:58] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[03:45:06] *** Quits: longsleep (~quassel@2a02:c207:3001:216:1000::1) (Ping timeout: 245 seconds)
[03:45:23] *** Quits: m-kad (~quassel@2a02:c207:2043:4525::1) (Ping timeout: 246 seconds)
[03:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[03:47:36] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[03:47:47] *** Joins: m-kad (~quassel@vmi434525.contaboserver.net)
[03:47:51] *** Joins: longsleep (~quassel@seth.longsleep.org)
[03:51:18] *** Quits: gggp (~textual@60.10.23.159) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[03:52:16] *** Joins: gggpkm (~gggpkm@li2010-23.members.linode.com)
[04:16:15] <fikran> I'm importing a package, but still getting `undefined`. I'm pretty new to packages.
[04:16:17] <fikran> https://dpaste.org/Y9c6
[04:16:19] <fikran> That's the error
[04:16:51] *** Quits: krux02 (~krux02@p200300e81719330059822492d9593bdc.dip0.t-ipconnect.de) (Remote host closed the connection)
[04:17:13] <fizzie> Sounds like you're also renaming it as part of your import.
[04:17:21] <fizzie> (The "... as fedishared" part.)
[04:17:39] <fikran> oh wait...yes
[04:17:44] <fikran> I saw that last evening too! I"m sorry
[04:17:46] <fikran> hm...where?
[04:17:54] <fizzie> On line 4, most likely.
[04:18:11] <fikran> https://dpaste.org/YiEM
[04:18:14] <fikran> That's tthe file
[04:18:38] <fizzie> Oh, then possibly the *package* uses a name that doesn't match with the import path.
[04:19:47] <fikran> foudn it!
[04:20:36] <fizzie> Yeah, it's usually a good idea for package declarations to match the path they're imported with, just to avoid that sort of thing.
[04:20:41] <fikran> got it!
[04:20:43] <fikran> thank you
[04:24:03] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cab:622d:7a3d:a6f1) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[04:24:33] <fizzie> For the record, an import with a rename would look like https://play.golang.org/p/Q3NZ95nMrtX (and is usually only used if you need to refer to more than one package with the same name, and a few other places like the protobuf convention of renaming the generated code package to `pb` or `foopb` on import).
[04:24:38] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[04:27:13] <b0nn> I often use the rename when I am working with versions - eg foo "path/to/foov2"
[04:30:06] <fizzie> If it's a proper v2 of a module, wouldn't it have a "path/to/foo/v2" import path that gets imported as "foo" by default (due to having `package foo` in it)?
[04:30:41] <kodah> if you're using vscode: what language server and/or tools do you use?
[04:33:27] *** Quits: lazyreader (~lazyreade@user/lazyreader) (Quit: The Lounge - https://thelounge.chat)
[04:34:30] *** Joins: lazyreader (~lazyreade@user/lazyreader)
[04:35:11] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[04:35:51] *** Joins: andlabs (~andlabs@70.107.171.168)
[04:37:47] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:accb:27ca:84a8:2eaf) (Read error: Connection reset by peer)
[04:38:32] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:accb:27ca:84a8:2eaf)
[04:38:54] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 250 seconds)
[04:40:01] *** Quits: mickey (~user@user/mickey) (Remote host closed the connection)
[04:40:17] *** Joins: rcernin (~rcernin@pa49-197-135-119.pa.qld.optusnet.com.au)
[04:40:21] *** Joins: mickey (~user@user/mickey)
[04:42:23] <zsnes> it would be imported as `v2` in that scenario.
[04:42:47] <fizzie> No, it wouldn't.
[04:43:05] <zsnes> well it would be whatever the package name is in the package
[04:43:15] <fizzie> Yes, and the package name would almost certainly be "foo".
[04:43:17] <zsnes> but if your path is ending in /v2 then thats probably also the package name...many packages use that like
[04:43:31] <fizzie> Not if they're the v2 of something that used to be called "foo".
[04:44:33] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:accb:27ca:84a8:2eaf)
[04:44:40] <zsnes> what is your question?
[04:45:47] <fizzie> I don't have a question, I was just commenting on the notion that you'd need to rename packages on import when working "with versions".
[04:45:50] <zsnes> the echo framework for example you import it as v4 and thats the default name it gets...so completely depends on the situation. Usually the path matches the package name, not sure if that's required or not though
[04:46:34] <fizzie> "github.com/labstack/echo/v4"? That has `package echo` in it. https://github.com/labstack/echo/blob/v4.6.1/echo.go
[04:46:38] <zsnes> or nm thats just the name in the documentation, so maybe im tripping
[04:47:33] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:accb:27ca:84a8:2eaf) (Ping timeout: 268 seconds)
[04:48:11] <kodah> module versions don't influence package names
[04:49:18] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[04:51:28] *** Joins: fikran (~fikran@user/fikran)
[04:52:21] <zsnes> yeah i don't know what i'm saying...i misunderstood the entire question/situation, my mistake.
[04:52:45] *** Joins: freakazoid12345 (~matt@2603-9000-cf0f-80e3-accb-27ca-84a8-2eaf.inf6.spectrum.com)
[04:52:50] <kodah> all good
[04:54:00] *** Joins: califax- (~califax@user/califx)
[04:56:55] *** Quits: rcernin (~rcernin@pa49-197-135-119.pa.qld.optusnet.com.au) (Read error: Connection reset by peer)
[04:57:08] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:accb:27ca:84a8:2eaf) (Ping timeout: 246 seconds)
[04:58:30] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[04:58:31] *** califax- is now known as califax
[04:59:01] *** Quits: INeedAHandle (~INeedAHan@39.124.72.106) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[05:03:03] *** Joins: freakazoid343 (~matt@2603-9000-cf0f-80e3-accb-27ca-84a8-2eaf.inf6.spectrum.com)
[05:05:46] *** Quits: freakazoid12345 (~matt@2603-9000-cf0f-80e3-accb-27ca-84a8-2eaf.inf6.spectrum.com) (Ping timeout: 250 seconds)
[05:08:48] *** Quits: Torr (~Torr@user/torr) ()
[05:09:00] *** Joins: Torr (~Torr@user/torr)
[05:10:48] *** Joins: krux02 (~krux02@p4ff99041.dip0.t-ipconnect.de)
[05:10:59] <krux02> is there an unreachable tag in go?
[05:12:07] *** Joins: normen_ (~normen@p200300d7171a560074df2c5df7064c4d.dip0.t-ipconnect.de)
[05:13:35] *** Quits: normen (~normen@pd9eec605.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[05:13:37] *** normen_ is now known as normen
[05:18:07] <kodah> krux02: as in, one that cannot be pulled?
[05:21:58] <kodah> krux02: https://golang.org/ref/mod#version-queries
[05:22:44] <kodah> retract and/or exclude could be useful
[05:24:37] *** Joins: fef (~thedawn@user/thedawn)
[05:25:27] *** Joins: DaleNa9g (~DaleNa9g@071-093-142-189.res.spectrum.com)
[05:26:50] *** Quits: DaleNa9g (~DaleNa9g@071-093-142-189.res.spectrum.com) (Remote host closed the connection)
[05:27:19] *** Joins: DaleNa9g (~DaleNa9g@071-093-142-189.res.spectrum.com)
[05:29:32] <sillyboots> hi all, Does anyone know if it's possible to use reflection to inspect the concrete type of an interface, and if that type is a pointer to a struct, set the interface value to be just the value of that pointer?
[05:29:43] *** Quits: jespada (~jespada@2803:9800:9842:7a62:8558:368:788c:6dc6) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[05:30:01] *** Quits: sztanpet (sztanpet@user/sztanpet) (Quit: asd)
[05:30:10] *** Quits: krux02 (~krux02@p4ff99041.dip0.t-ipconnect.de) (Remote host closed the connection)
[05:30:32] *** Quits: DaleNa9g (~DaleNa9g@071-093-142-189.res.spectrum.com) (Client Quit)
[05:33:03] *** Joins: sztanpet (sztanpet@user/sztanpet)
[05:36:25] <fizzie> sillyboots: Sure, why not? https://play.golang.org/p/zCELOLE55vA
[05:36:43] *** Joins: rcernin (~rcernin@pa49-197-135-119.pa.qld.optusnet.com.au)
[05:38:18] <fizzie> Well, assuming the struct type also implements the interface, of course.
[05:38:40] <sillyboots> fizzie: Thank you so much for this, I was scratching my head. I needed to go one more elem() deeperr
[05:40:27] <fizzie> Right. In that example, the first Elem() is to follow the *interface{} to the interface{} (need to pass a pointer to be able to modify it in the first place); the second to get the pointer value that interface{} contains; and the third to follow that pointer to the struct.
[05:46:18] <sillyboots> Yep, that totally makes sense. I was forgetting to dereference the first pointer and kepy getting confusing results. Appreciate the knowledge drop :)
[05:49:16] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[05:49:51] <fizzie> Full disclosure: I had one .Elem() too little in my first attempt, and had to add a few fmt.Printf("%#v\n", rv.Elem().Elem()) calls in the middle to figure out why it wasn't working.
[05:54:23] *** Joins: frost (~frost@59.71.244.36)
[05:57:24] <fikran> I'm getting this error when I'm trying to commit some code...is there a way to...fix this version issue?
[05:57:26] <fikran> go: gitlab.com/khanzf/fedilogue/shared@v0.0.0-00010101000000-000000000000: invalid version: unknown revision 000000000000
[05:58:17] <fikran> how do we do with versioning automatically?
[06:04:26] *** Joins: sleetdrop (~sleetdrop@61.135.152.134)
[06:07:00] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 265 seconds)
[06:08:11] *** Parts: unixcat647 (hyperreal@envs.net) ()
[06:09:49] <kodah> fikran: cut a tag, branch, or use a keyword like latest https://golang.org/ref/mod#version-queries
[06:13:29] <fikran> hm...I'm in a catch-22
[06:15:05] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 264 seconds)
[06:15:11] *** Quits: LiftLeft (~LiftLeft@172.83.47.108) (Ping timeout: 252 seconds)
[06:20:06] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[06:21:37] *** Joins: Izem (~user@bras-base-london1483w-grc-27-70-51-121-7.dsl.bell.ca)
[06:23:17] *** Quits: freakazoid343 (~matt@2603-9000-cf0f-80e3-accb-27ca-84a8-2eaf.inf6.spectrum.com) (Read error: Connection reset by peer)
[06:24:02] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:accb:27ca:84a8:2eaf)
[06:24:16] *** Quits: pepee (~pepee@user/pepee) (Ping timeout: 245 seconds)
[06:30:37] *** Quits: pztrn (~pztrn@user/pztrn) (Read error: Connection reset by peer)
[06:33:00] *** Quits: frost (~frost@59.71.244.36) (Quit: Connection closed)
[06:39:19] *** Parts: Izem (~user@bras-base-london1483w-grc-27-70-51-121-7.dsl.bell.ca) (ERC (IRC client for Emacs 27.1))
[06:50:51] *** Joins: LiftLeft (~LiftLeft@172.98.92.52)
[06:51:49] *** Quits: tar_xvf (~tar_xvf@c-76-116-112-52.hsd1.nj.comcast.net) (Quit: buh bye)
[06:54:34] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[06:54:54] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[06:57:39] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:accb:27ca:84a8:2eaf)
[06:58:53] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[07:00:08] *** Quits: k0ta (~k0ta@151.210.174.31) (Ping timeout: 268 seconds)
[07:00:17] *** Joins: k0ta (~k0ta@103.108.94.37)
[07:00:41] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:accb:27ca:84a8:2eaf) (Ping timeout: 264 seconds)
[07:00:48] *** Joins: fikran (~fikran@user/fikran)
[07:04:06] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[07:05:43] *** Quits: lord4163 (~lord4163@90-230-194-205-no86.tbcn.telia.com) (Ping timeout: 252 seconds)
[07:06:20] *** Quits: j416 (~j416@user/j416) (Ping timeout: 252 seconds)
[07:06:26] *** Joins: lord4163 (~lord4163@90-230-194-205-no86.tbcn.telia.com)
[07:19:38] *** Joins: j416 (~j416@user/j416)
[07:20:31] *** Joins: hornhack (~hackingho@user/hackinghorn)
[07:23:30] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Ping timeout: 265 seconds)
[07:30:03] *** Quits: mooff (~mooff@awful.cooking) (Quit: Quit)
[07:31:18] *** Joins: mooff (~mooff@awful.cooking)
[07:45:08] *** Quits: LiftLeft (~LiftLeft@172.98.92.52) (Ping timeout: 246 seconds)
[07:45:44] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 265 seconds)
[07:49:45] *** Joins: ofh (~felix@2001:44b8:3084:172:6f0:21ff:fe3c:d4d7)
[07:51:13] *** hornhack is now known as hackinghorn
[07:51:14] *** Quits: yelnah (~felix@2001:44b8:3080:a5:6f0:21ff:fe3c:d4d7) (Ping timeout: 260 seconds)
[08:20:59] *** Joins: jpw (~jpw@user/jpw)
[08:28:40] *** Quits: Torr (~Torr@user/torr) ()
[08:28:51] *** Joins: Torr (~Torr@user/torr)
[08:29:37] *** Joins: INeedAHandle (~INeedAHan@39.124.72.106)
[08:30:24] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[08:33:51] *** Quits: INeedAHandle (~INeedAHan@39.124.72.106) (Ping timeout: 245 seconds)
[08:45:31] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 245 seconds)
[08:49:16] *** Quits: sillyboots (~sillyboot@65.128.48.91) (Ping timeout: 245 seconds)
[08:52:20] *** Quits: normen (~normen@p200300d7171a560074df2c5df7064c4d.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[08:52:58] *** Joins: Andrew_ (~andrew@user/andrewyu)
[08:53:05] *** Quits: franitor (~frank@user/franitor) (Ping timeout: 260 seconds)
[08:53:35] *** Quits: AndrewYu (~andrew@user/andrewyu) (Ping timeout: 252 seconds)
[08:54:32] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[08:54:33] *** Joins: franitor (~frank@user/franitor)
[08:54:59] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[08:57:06] *** Joins: mei (~mei@user/mei)
[08:58:59] *** Quits: rcernin (~rcernin@pa49-197-135-119.pa.qld.optusnet.com.au) (Ping timeout: 246 seconds)
[09:03:54] *** Joins: bkircher (~bkircher@2001:a61:252b:1601:507a:3765:2a05:b98f)
[09:04:28] *** Joins: rcernin (~rcernin@pa49-197-135-119.pa.qld.optusnet.com.au)
[09:08:01] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[09:10:09] *** Joins: fikran (~fikran@user/fikran)
[09:14:55] *** Quits: kyshoc (~kyshoc@user/kyshoc) (Ping timeout: 252 seconds)
[09:27:34] *** Quits: LoRez (~lorez@user/lorez) (Ping timeout: 252 seconds)
[09:27:57] *** Joins: normen (~normen@p200300d7171a560074df2c5df7064c4d.dip0.t-ipconnect.de)
[09:32:45] *** Joins: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net)
[09:32:45] *** Quits: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net) (Changing host)
[09:32:45] *** Joins: kyshoc (~kyshoc@user/kyshoc)
[09:36:21] *** Quits: normen (~normen@p200300d7171a560074df2c5df7064c4d.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[09:39:45] *** Joins: shka (~herr@109.231.6.176)
[09:46:09] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Remote host closed the connection)
[09:46:19] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[09:50:26] *** Joins: normen (~normen@p200300d7171a560074df2c5df7064c4d.dip0.t-ipconnect.de)
[09:53:43] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[09:57:05] *** smol_dragon is now known as A_Dragon
[10:05:57] *** Joins: mrig (~mrig@user/mrig)
[10:12:06] *** Joins: JeSCaLis23-F (~rizon@188.119.22.153)
[10:16:04] *** Quits: JeSCaLis23-F (~rizon@188.119.22.153) (Client Quit)
[10:16:51] *** Joins: DaGo (~dago@85.ip-37-59-103.eu)
[10:19:15] *** Quits: lithammer (~lithammer@arch-vps.cloud.tilaa.com) (Quit: ZNC - http://znc.in)
[10:19:35] *** Joins: lithammer (~lithammer@arch-vps.cloud.tilaa.com)
[10:20:23] *** Quits: lithammer (~lithammer@arch-vps.cloud.tilaa.com) (Client Quit)
[10:20:47] *** Joins: lithammer (~lithammer@2a02:2770::21a:4aff:fe88:c18d)
[10:31:03] *** Quits: spithash (~spithash@user/spithash) (Remote host closed the connection)
[10:31:20] *** Joins: spithash (~spithash@user/spithash)
[10:32:27] *** Joins: hikhvar796073809 (~thelounge@87.191.23.178)
[10:32:44] *** Joins: theoceaniscool (~theoceani@119.12.232.133)
[10:34:54] *** Joins: aniruddha (uid340443@2a03:5180:f:3::5:31db)
[10:36:57] *** Quits: zkanda (~zkanda@box.makean.art) (Quit: Ping timeout (120 seconds))
[10:37:48] *** Joins: penguwin6 (~penguwin@fribbledom.com)
[10:37:54] *** Quits: penguwin (~penguwin@fribbledom.com) (Read error: Connection reset by peer)
[10:37:54] *** penguwin6 is now known as penguwin
[10:37:55] *** Quits: Wessie (~Wessie@static.226.41.47.78.clients.your-server.de) (Remote host closed the connection)
[10:38:01] *** Joins: zkanda (~zkanda@box.makean.art)
[10:38:01] *** Joins: winning-luser (~wl@2601:8c1:181:1340::6836)
[10:38:02] *** Quits: blaisebool (~blaiseboo@static.247.123.46.78.clients.your-server.de) (Quit: ZNC - https://znc.in)
[10:38:06] *** Joins: Wessie (~Wessie@static.226.41.47.78.clients.your-server.de)
[10:38:51] *** Joins: blaisebool (~blaiseboo@static.247.123.46.78.clients.your-server.de)
[10:39:06] *** Quits: bkircher (~bkircher@2001:a61:252b:1601:507a:3765:2a05:b98f) (Quit: WeeChat 3.2)
[10:40:18] *** Quits: hikhvar796073809 (~thelounge@87.191.23.178) (Ping timeout: 250 seconds)
[10:45:18] *** Joins: bkircher (~bkircher@2001:a61:252b:1601:507a:3765:2a05:b98f)
[10:45:48] *** Joins: LoRez (~lorez@user/lorez)
[10:47:34] *** Quits: nehsou^ (~nehsou@68.101.50.106) (Remote host closed the connection)
[10:47:47] <gggpkm> does "go mod vendor" generate go.sum?
[10:48:15] *** Joins: hikhvar796073809 (~thelounge@87.191.23.178)
[10:49:53] *** Quits: normen (~normen@p200300d7171a560074df2c5df7064c4d.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[10:54:33] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[10:55:07] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[10:57:41] *** Quits: rcernin (~rcernin@pa49-197-135-119.pa.qld.optusnet.com.au) (Read error: Connection reset by peer)
[10:59:12] *** Joins: nrl^ (~nrl@68.101.50.106)
[11:12:55] *** Joins: NCS_One (~NCS_One@a85-138-101-114.cpe.netcabo.pt)
[11:17:14] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 246 seconds)
[11:17:14] *** Quits: hikhvar796073809 (~thelounge@87.191.23.178) (Read error: Connection reset by peer)
[11:18:25] *** Joins: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz)
[11:19:29] *** Joins: hikhvar796073809 (~thelounge@87.191.23.178)
[11:19:31] *** Joins: fikran (~fikran@user/fikran)
[11:23:43] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 265 seconds)
[11:33:53] *** Joins: tedwing (~anon@lfbn-idf3-1-1409-51.w109-221.abo.wanadoo.fr)
[11:34:33] *** Quits: hikhvar796073809 (~thelounge@87.191.23.178) (Ping timeout: 268 seconds)
[11:37:24] *** Joins: frebib (~frebibcha@nerdhouse.io)
[11:37:53] *** Joins: mickey8 (~user@user/mickey)
[11:39:52] *** Joins: ConstantDesc (~textual@cpc158823-hari22-2-0-cust72.20-2.cable.virginm.net)
[11:40:25] *** Quits: ConstantDesc (~textual@cpc158823-hari22-2-0-cust72.20-2.cable.virginm.net) (Client Quit)
[11:42:09] *** Quits: mickey (~user@user/mickey) (Ping timeout: 276 seconds)
[11:42:10] *** mickey8 is now known as mickey
[11:50:21] *** Joins: ConstantDesc (~textual@cpc158823-hari22-2-0-cust72.20-2.cable.virginm.net)
[11:52:18] *** Quits: alwaysr[m] (~alwaysrma@2001:470:69fc:105::50a8) (Quit: Bridge terminating on SIGTERM)
[11:52:18] *** Quits: kadoban (~kadoban@user/kadoban) (Quit: Bridge terminating on SIGTERM)
[11:52:18] *** Quits: spudly[m] (~spudly@2001:470:69fc:105::18) (Quit: Bridge terminating on SIGTERM)
[11:52:18] *** Quits: psydroid (~psydroid@user/psydroid) (Quit: Bridge terminating on SIGTERM)
[11:52:18] *** Quits: securethemews (~securethe@2001:470:69fc:105::9b6d) (Quit: Bridge terminating on SIGTERM)
[11:52:18] *** Quits: meain (~meain@2001:470:69fc:105::2db) (Quit: Bridge terminating on SIGTERM)
[11:52:18] *** Quits: bloony (~tjellomat@2001:470:69fc:105::3aac) (Quit: Bridge terminating on SIGTERM)
[11:52:18] *** Quits: freswa[m] (~freswa@2001:470:69fc:105::c1ec) (Quit: Bridge terminating on SIGTERM)
[11:52:18] *** Quits: phoenix[m] (~phoenixma@2001:470:69fc:105::f9b) (Quit: Bridge terminating on SIGTERM)
[11:52:18] *** Quits: bfsuns2k[m] (~bfsuns2km@2001:470:69fc:105::e4ed) (Quit: Bridge terminating on SIGTERM)
[11:52:18] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Quit: Bridge terminating on SIGTERM)
[11:52:18] *** Quits: duban (~duban@2001:470:69fc:105::f5fe) (Quit: Bridge terminating on SIGTERM)
[11:52:19] *** Quits: TcM1911 (~tcm1911@2001:470:69fc:105::3649) (Quit: Bridge terminating on SIGTERM)
[11:52:19] *** Quits: zaibon[m] (~zaibonsyn@2001:470:69fc:105::1019) (Quit: Bridge terminating on SIGTERM)
[11:52:28] *** Quits: dec (~dec@2001:470:69fc:105::3204) (Quit: Bridge terminating on SIGTERM)
[11:52:29] *** Quits: AshLeece[m] (~ashleecei@2001:470:69fc:105::c987) (Quit: Bridge terminating on SIGTERM)
[11:52:29] *** Quits: sordidwhiskey[m] (~sordidwhi@2001:470:69fc:105::c94e) (Quit: Bridge terminating on SIGTERM)
[11:52:30] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (Quit: Bridge terminating on SIGTERM)
[11:52:30] *** Quits: dngray[m] (~dngray@user/dngray) (Quit: Bridge terminating on SIGTERM)
[11:52:30] *** Quits: bat[m] (~batdice-t@2001:470:69fc:105::19b8) (Quit: Bridge terminating on SIGTERM)
[11:52:32] *** Quits: Celeste[m] (~sleprainb@2001:470:69fc:105::3f4a) (Quit: Bridge terminating on SIGTERM)
[11:52:33] *** Quits: tusf[m] (~tusf@2001:470:69fc:105::eff9) (Quit: Bridge terminating on SIGTERM)
[11:52:34] *** Quits: fugkco (~fugkcomat@2001:470:69fc:105::c70d) (Quit: Bridge terminating on SIGTERM)
[11:52:34] *** Quits: mambang[m] (~mambang@user/mambang) (Quit: Bridge terminating on SIGTERM)
[11:52:34] *** Quits: dung[m] (~dungbrocc@2001:470:69fc:105::d25b) (Quit: Bridge terminating on SIGTERM)
[11:55:08] *** Joins: spudly[m] (~spudly@2001:470:69fc:105::18)
[11:55:39] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[11:56:07] *** Quits: holgersson (~quassel@user/holgersson) (Ping timeout: 252 seconds)
[11:57:41] *** Quits: zwr (~zwr@2804:d45:b966:fb00:577c:5ccb:f11a:b2bc) (Remote host closed the connection)
[11:58:03] *** Joins: phoenix[m] (~phoenixma@2001:470:69fc:105::f9b)
[11:58:03] *** Joins: kadoban (~kadoban@user/kadoban)
[11:58:03] *** Joins: freswa[m] (~freswa@2001:470:69fc:105::c1ec)
[11:58:03] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[11:58:03] *** Joins: mambang[m] (~mambang@user/mambang)
[11:58:03] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[11:58:03] *** Joins: sordidwhiskey[m] (~sordidwhi@2001:470:69fc:105::c94e)
[11:58:03] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[11:58:03] *** Joins: psydroid (~psydroid@user/psydroid)
[11:58:03] *** Joins: bloony (~tjellomat@2001:470:69fc:105::3aac)
[11:58:03] *** Joins: securethemews (~securethe@2001:470:69fc:105::9b6d)
[11:58:03] *** Joins: duban (~duban@2001:470:69fc:105::f5fe)
[11:58:04] *** Joins: tusf[m] (~tusf@2001:470:69fc:105::eff9)
[11:58:04] *** Joins: bfsuns2k[m] (~bfsuns2km@2001:470:69fc:105::e4ed)
[11:58:04] *** Joins: alwaysr[m] (~alwaysrma@2001:470:69fc:105::50a8)
[11:58:15] *** Joins: dung[m] (~dungbrocc@2001:470:69fc:105::d25b)
[11:58:15] *** Joins: Celeste[m] (~sleprainb@2001:470:69fc:105::3f4a)
[11:58:15] *** Joins: AshLeece[m] (~ashleecei@2001:470:69fc:105::c987)
[11:58:15] *** Joins: zaibon[m] (~zaibonsyn@2001:470:69fc:105::1019)
[11:58:15] *** Joins: fugkco (~fugkcomat@2001:470:69fc:105::c70d)
[11:58:17] *** Joins: dec (~dec@2001:470:69fc:105::3204)
[11:58:17] *** Joins: TcM1911 (~tcm1911@2001:470:69fc:105::3649)
[11:58:17] *** Joins: dngray[m] (~dngray@user/dngray)
[11:58:17] *** Joins: bat[m] (~batdice-t@2001:470:69fc:105::19b8)
[12:04:18] *** Joins: holgersson (~quassel@user/holgersson)
[12:10:56] *** Quits: k0ta (~k0ta@103.108.94.37) (Ping timeout: 245 seconds)
[12:13:06] *** Joins: k0ta (~k0ta@151.210.174.31)
[12:13:19] *** Quits: girafe2 (~girafe@176-147-142-235.abo.bbox.fr) (Read error: Connection reset by peer)
[12:14:00] *** Quits: mmk2410 (~mmk2410@user/mmk2410) (Quit: ZNC - https://znc.in)
[12:14:18] *** Joins: mmk2410 (~mmk2410@user/mmk2410)
[12:14:22] *** Quits: mmk2410 (~mmk2410@user/mmk2410) (Remote host closed the connection)
[12:14:38] *** Joins: mmk2410 (~mmk2410@user/mmk2410)
[12:16:07] *** Quits: holgersson (~quassel@user/holgersson) (Ping timeout: 240 seconds)
[12:18:48] *** Joins: holgersson (~quassel@user/holgersson)
[12:21:40] *** Joins: krux02 (~krux02@p200300e81719330059822492d9593bdc.dip0.t-ipconnect.de)
[12:22:37] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[12:22:52] <tsujp> Hello friends is a go.sum file a lockfile of go.mod dependencies?
[12:22:56] *** Quits: mmk2410 (~mmk2410@user/mmk2410) (Quit: ZNC - https://znc.in)
[12:23:12] *** Joins: mmk2410 (~mmk2410@user/mmk2410)
[12:23:12] <tsujp> I'm not a go dev but trying to diagnose if this software (written in go) is using a dependency that is too old or not
[12:23:26] *** Quits: tedwing (~anon@lfbn-idf3-1-1409-51.w109-221.abo.wanadoo.fr) (Ping timeout: 245 seconds)
[12:24:21] *** Quits: mmk2410 (~mmk2410@user/mmk2410) (Client Quit)
[12:24:37] *** Joins: mmk2410 (~mmk2410@user/mmk2410)
[12:25:23] *** Joins: darkapex (~darkapex@user/darkapex)
[12:26:20] *** Quits: sleetdrop (~sleetdrop@61.135.152.134) (Quit: Textual IRC Client: www.textualapp.com)
[12:26:54] *** Joins: normen (~normen@p200300d7171a560074df2c5df7064c4d.dip0.t-ipconnect.de)
[12:27:25] *** Joins: tedwing (~anon@lfbn-idf3-1-1409-51.w109-221.abo.wanadoo.fr)
[12:33:40] <b0nn> nom go.sum is a snapshot of the versions of modules that were used to build the project
[12:33:45] <b0nn> no*
[12:34:33] <b0nn> think of it like "When I built this, I used this version of this dep
[12:36:08] *** Joins: tuskkk____ (uid18470@id-18470.tinside.irccloud.com)
[12:37:24] <tsujp> Gotcha, thanks
[12:39:10] *** Quits: pts33 (~pts33@2603-8000-9103-a43f-e459-d706-2fce-74f3.res6.spectrum.com) (Ping timeout: 260 seconds)
[12:40:48] <tsujp> In that case how do I know which one was used if there are multiple like this? https://github.com/influxdata/telegraf/blob/fb088bd69c86c6628dfdc5a44f9e0d878587f6e3/go.sum#L91-L102
[12:45:05] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 264 seconds)
[12:46:03] <b0nn> go mod graph
[12:48:57] <tsujp> So I can download the source, compile it myself, and run go mod graph?
[12:49:05] <tsujp> Is there no way to check against a pre-provided binary?
[12:50:33] <b0nn> https://stackoverflow.com/questions/64371466/with-go-list-how-to-list-only-go-modules-used-in-the-binary
[12:50:45] <b0nn> Honestly, though, we are getting a bit above my paygrade
[12:52:56] <tsujp> it wants sudo else it cannot write to the cache and running it with sudo gives no output... wat
[12:53:12] <b0nn> sudo -h ?
[12:53:17] <b0nn> or is it -H
[12:53:53] <tsujp> both nothing
[12:54:08] * b0nn shrugs
[12:54:09] *** Quits: ConstantDesc (~textual@cpc158823-hari22-2-0-cust72.20-2.cable.virginm.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[12:54:30] <b0nn> stick around, someone with a bit more modules-fu might come in and know what to do
[12:54:30] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[12:54:47] <tsujp> gotcha, thank you for the help too b0nn
[12:55:11] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[12:55:38] <twaapo> usualy https://golang.org/ref/mod#go-mod-tidy cleans the go.mod so theres not multiples
[12:55:54] <twaapo> otherwise if i dont run that it keeps increasing forever
[12:56:42] *** Joins: ar1nov (~arinov@213.194.126.155)
[12:57:50] <twaapo> i also try not to commit go.mods with multiples
[12:57:54] <tsujp> if I download the telegraf repo (which this is for) and I run `go mod graph | grep autorest` I don't see a single line with a version number above 0.13.0 except for those that also have +incompatible appended to them too
[12:58:35] *** Joins: Ergo^ (~ergo@91.238.59.144)
[12:59:56] <twaapo> if it also contains this //indirect, it means telegraf doesnt use the dep directly, but some dep uses it
[13:00:15] <twaapo> but that rabbit hole indeed looks deep
[13:01:38] *** Joins: ConstantDesc (~textual@cpc158823-hari22-2-0-cust72.20-2.cable.virginm.net)
[13:01:39] <tsujp> my end result is I need to know that it's using v0.13.0 or higher in the pre-provided binary from their apt repo, I am happy to compile it myself too but the method of checking in both cases is the same no?
[13:01:46] <tsujp> else I'd just be able to check now...?
[13:02:32] <twaapo> what happens if you try to use latest like go get -u github.com/somedep and go mod tidy?
[13:02:57] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fafc-123.dhcp.inet.fi)
[13:03:31] <tsujp> I just downloaded and ran this https://github.com/JoakimSoderberg/gobindep which outputs http://ix.io/3AiS
[13:03:33] <tsujp> ill try that now twaapo
[13:05:35] <tsujp> It output this twaapo http://ix.io/3AiT
[13:05:58] <twaapo> interesting
[13:06:11] <twaapo> 1.17 is rather new
[13:06:50] <twaapo> probably the now explicitly upgraded module requires 1.17
[13:07:28] <twaapo> so iguess bad timing :D
[13:07:41] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 252 seconds)
[13:08:31] <twaapo> there must be a way to fetch a specific dep version too like go get -u @1.16 but i dont know that one
[13:08:44] *** Joins: phylaz (~phylaz@219.92-221-176.customer.lyse.net)
[13:09:29] <twaapo> also the go-autorest devs are fast and its well maintained at least :)
[13:09:51] <twaapo> or thats my guess
[13:11:19] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[13:13:40] *** Joins: darkapex (~darkapex@user/darkapex)
[13:16:32] <tsujp> Okay I removed the snap go install and downloaded and installed 1.17.1 and ran the update command again, output is: http://ix.io/3AiV
[13:17:05] <tsujp> it says `go: downloading github.com/Azure/go-autorest/autorest v0.11.18` wat?
[13:17:13] <tsujp> so it'd use v0.11.18 right?
[13:18:58] <tsujp> Excuse me, 13 at the front. This is the tiny PR that apparently fixed this a while ago: https://github.com/influxdata/telegraf/pull/6656/files
[13:19:34] *** Joins: jpw_ (~jpw@user/jpw)
[13:20:23] *** Joins: darkapex_ (~darkapex@user/darkapex)
[13:23:06] *** Quits: jpw (~jpw@user/jpw) (Ping timeout: 265 seconds)
[13:23:23] *** Joins: Atque (~Atque@user/atque)
[13:24:00] *** Joins: absc (~absc@81.31.144.178)
[13:24:04] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 252 seconds)
[13:26:46] *** Quits: haliucinas (~haliucina@5.20.153.21) (Ping timeout: 245 seconds)
[13:27:05] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[13:27:58] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 252 seconds)
[13:28:04] *** Joins: haliucinas (~haliucina@5.20.153.21)
[13:28:05] <twaapo> note though go-autorest/autorest v0.11.18 is a dep, but go-autorest might not have a version
[13:28:10] <twaapo> so go get -u github.com/Azure/go-autorest might do something weird
[13:28:52] *** Joins: fikran (~fikran@user/fikran)
[13:30:43] <twaapo> oh yes the versions are just git tags, so indeed the go-autorest master branch has 11.21 as latest https://github.com/Azure/go-autorest/tags
[13:31:22] *** Joins: pi1 (~pi@177.223.162.27)
[13:32:00] <twaapo> also looks like the tags have paths on them.. thats some git-fu im not well versed in
[13:33:23] <tsujp> this has quickly become the rabbit hole of rabbit holes it seems
[13:34:27] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[13:34:37] *** lofiguy_ is now known as lofiguy
[13:35:03] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[13:35:22] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[13:41:27] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[13:47:21] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cab:622d:7a3d:a6f1)
[13:48:18] *** Joins: jaca123 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[13:48:26] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Read error: Connection reset by peer)
[13:48:27] *** jaca123 is now known as jaca122
[14:00:03] <fizzie> "Tags with paths" is a thing you can (indeed, must) do for multi-module repositories where you have a single repository that has multiple separate modules not at the root directory of the repository.
[14:00:33] <fizzie> https://golang.org/ref/mod#vcs-version "If a module is defined in a subdirectory within the repository, that is, the module subdirectory portion of the module path is not empty, then each tag name must be prefixed with the module subdirectory, followed by a slash. For example, the module golang.org/x/tools/gopls is defined in the gopls subdirectory of the repository with root path
[14:00:35] <fizzie> golang.org/x/tools. The version v0.4.0 of that module must have the tag named gopls/v0.4.0 in that repository."
[14:01:28] <fizzie> (Most modules fall into the case of the paragraph above that, where the go.mod file is directly in the repository root directory, and the version tags are then just "vX.Y.Z" with no prefix.)
[14:01:30] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cab:622d:7a3d:a6f1) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[14:02:08] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[14:06:55] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:21ef:5fa3:7f26:ea34)
[14:07:16] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Remote host closed the connection)
[14:07:37] <twaapo> now I look at it, what does it mean like in the autorest case where there doesnt seem to be version on the root dir, only prefix/vX.Y.Z
[14:08:21] <twaapo> only then all the prefix/vX can be whatever, and not necessarily match?
[14:08:44] <fizzie> There's no go.mod in the root directory either, only in the autorest/ subdirectory. So that's consistent with what I pasted.
[14:08:51] *** Quits: k0ta (~k0ta@151.210.174.31) (Ping timeout: 245 seconds)
[14:08:55] <twaapo> hmm true
[14:09:19] <twaapo> so the other option would be to use separate repos for these modules, but they opted to serve it as one
[14:09:54] <twaapo> but then again its nested more
[14:10:29] <twaapo> so autorest/v0.11.21 contains autorest/adal/v0.9.15
[14:10:34] <twaapo> sounds very detached
[14:10:41] <fizzie> Well, no, it doesn't really "contain" it.
[14:10:46] <twaapo> :D
[14:10:53] <fizzie> The tag autorest/v0.11.21 is used for version 0.11.21 of the module defined by autorest/go.mod; the tag autorest/adal/v0.9.14 is used for version 0.9.14 of the module defined by autorest/adal/go.mod.
[14:11:09] <twaapo> how are they related?
[14:11:19] <fizzie> They're not. Other than just living in the same Git repository.
[14:11:26] <twaapo> hmm
[14:11:37] <fizzie> If you have a subdirectory with an independent go.mod in it, it's not part of the module defined by its parent directory.
[14:12:01] <twaapo> lets say we have a repo with 123980567 modules
[14:12:04] *** Joins: alzgh (~alzgh@user/alzgh)
[14:12:14] <twaapo> how likely a project uses all the versions at master head?
[14:12:17] <twaapo> like 0%?
[14:15:09] <fizzie> IIRC, nested modules like that aren't even handled specially by the thing that uses your local copy of the source for the main module. As in, if you check out a copy of the go-autorest repo, go into the autorest/ subdirectory, and do a `go build .`, it will look at the go.mod for the `require github.com/Azure/go-autorest/autorest/adal v0.9.14` line, and fetch v0.9.14 of that module from GitHub
[14:15:11] <fizzie> (well, via the GOPROXY), instead of using your local checkout.
[14:16:34] <twaapo> so if i clone the repo, i get the most recent code at branch, but when i build it fetches the commits needed?
[14:17:52] <fizzie> Except for the module in which you invoke the go command (the "main module"), which will be whatever code you have, possibly with local modifications. At least that's how I remember it working.
[14:17:54] <twaapo> that would be kind of cool, but not very intuitive :p
[14:18:29] <twaapo> yeah makes sense
[14:18:37] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[14:19:07] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 252 seconds)
[14:23:35] *** Joins: sizeof_void34 (~Thunderbi@109.252.124.86)
[14:25:35] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[14:35:51] <sztanpet> its how you would expect it to work
[14:39:16] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 245 seconds)
[14:39:50] *** Joins: samlamamma (~samlamamm@134.238.48.37)
[14:40:13] <twaapo> what does it mean if someone doesnt though, if obviously they should?
[14:49:34] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[14:53:54] *** Quits: pi1 (~pi@177.223.162.27) (Quit: WeeChat 2.8)
[14:54:34] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[14:54:48] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[14:56:32] *** Quits: samlamamma (~samlamamm@134.238.48.37) (Ping timeout: 256 seconds)
[15:05:13] *** Quits: tuskkk____ (uid18470@id-18470.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[15:08:07] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[15:09:01] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[15:13:38] <mikoto-chan> is there some list of naming conventions for Go? I see "dsn" in some source code and the author made the assumption that the reader knows what this means
[15:16:05] <sztanpet> mikoto-chan https://github.com/golang/go/wiki/CodeReviewComments
[15:17:22] <sztanpet> also, dsn is https://en.wikipedia.org/wiki/Data_source_name
[15:17:52] <mikoto-chan> sztanpet: yes, will def read the page, I also got a copy of TGPL, should I read that first?
[15:18:50] <sztanpet> if you are talking about http://www.gopl.io/ than thats a rather long book, and that wiki page is a ten minute read
[15:19:51] <sztanpet> they also cant really be compared of course, one is just a few recommendations, the other one teaches you go :)
[15:20:12] *** Joins: rcernin (~rcernin@056.a.001.mka.iprimus.net.au)
[15:29:31] *** Joins: rcernin_ (~rcernin@pa49-182-50-217.pa.qld.optusnet.com.au)
[15:29:49] *** Joins: yoonkn (~user@175.197.208.79)
[15:30:31] *** Quits: rcernin (~rcernin@056.a.001.mka.iprimus.net.au) (Ping timeout: 245 seconds)
[15:34:16] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 245 seconds)
[15:34:17] *** Quits: rcernin_ (~rcernin@pa49-182-50-217.pa.qld.optusnet.com.au) (Read error: Connection reset by peer)
[15:34:26] *** Quits: cooper (~mitchell@user/cooper) (Ping timeout: 265 seconds)
[15:35:18] *** Joins: cooper (~mitchell@user/cooper)
[15:36:04] *** Joins: rcernin (~rcernin@pa49-182-50-217.pa.qld.optusnet.com.au)
[15:36:22] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[15:37:26] *** Quits: Kaivo (~quassel@user/kaivo) (Quit: No Ping reply in 180 seconds.)
[15:38:03] *** Quits: rcernin (~rcernin@pa49-182-50-217.pa.qld.optusnet.com.au) (Read error: Connection reset by peer)
[15:38:12] *** Joins: fikran (~fikran@user/fikran)
[15:38:51] *** Joins: Kaivo (~quassel@user/kaivo)
[15:42:47] *** Quits: jpw_ (~jpw@user/jpw) (Ping timeout: 252 seconds)
[15:46:24] *** Joins: xiongxin (~quassel@119.123.100.167)
[15:51:18] *** Joins: Guest90 (~textual@119-18-3-156.771203.syd.nbn.aussiebb.net)
[15:51:35] *** Quits: ar1nov (~arinov@213.194.126.155) (Quit: WeeChat 3.1)
[15:53:38] *** Joins: Rayke (rayke@user/rayke)
[15:57:46] *** Quits: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de) (Ping timeout: 265 seconds)
[15:58:05] *** Joins: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de)
[15:58:39] *** Quits: dza (~dza@user/dza) (Read error: Connection reset by peer)
[15:58:50] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[16:00:12] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[16:00:25] *** Joins: dza (~dza@user/dza)
[16:02:19] <krux02> I have a long string A "some long string" and I have a substring B that is actually pointing into A with just "long", from these two strings, how do I get a string that is everything after B from A (in this case it would be " string"?
[16:08:43] <fizzie> I don't think there's a non-ugly way of doing that, if you didn't keep track about where in A the B substring started from.
[16:11:14] <krux02> meh :(
[16:11:39] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 265 seconds)
[16:11:42] <krux02> I am porting some c++ code and my "string" are just two pointers
[16:11:49] <krux02> beginning and end
[16:11:53] <krux02> doing this was just trivial
[16:12:11] <krux02> maybe I use reflect
[16:12:15] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[16:12:25] <krux02> yay need to use reflect just for some slicing operations
[16:12:28] <fizzie> It's of course *possible*, by inspecting the addresses of the string data, but I don't think that's really exposed other than via "unsafe"/"reflect".
[16:12:50] <fizzie> Consider just using offsets rather than string-typed values as your pseudo-pointers.
[16:13:10] <Sam> krux02: if you can't remember the index, look up the "strings" package. It's easy enough to search through a string for a substring, which appears to be all you need? Maybe I'm misunderstanding: https://play.golang.org/p/JgoT5Am3TlK
[16:13:38] <fizzie> I imagine there's no requirement there's just the one match.
[16:13:59] <fizzie> As in, there's supposed to be a difference between A := "foofoo"; B := A[0:3] and A := "foofoo"; B := A[3:6].
[16:14:07] <Sam> Yah, could be
[16:14:23] <Sam> More info needed to know the actual problem :)
[16:15:57] <Sam> If you're asking "can I get the original start index given to the slice" the answer is "no". Especially if you're slicing another slice, because you don't know how big the underlying array is so that index that you used might be a completely different index in the array, so it gets discarded and you can't get it back.
[16:16:15] <krux02> Sam, searching would make my linear algorithm an O(n^2) algorithm.
[16:16:31] <krux02> I found this, https://pkg.go.dev/reflect#StringHeader
[16:16:31] <Sam> Yes, it's a bad idea, but it appears to be what you're asking for if you don't know the index :)
[16:16:35] <krux02> how do I get this from a string?
[16:16:46] <fizzie> Didn't I post an example yesterday doing that?
[16:17:10] <krux02> Sam: it is also not correct in case the substring appears multiple times in A (which it does)
[16:17:13] <Sam> Fair warning: you will almost certainly write buggy broken code if you're going to insist on doing it by reflecting over the slice pointer
[16:17:19] <Sam> Yes, I know
[16:17:49] <krux02> I am doing a search through a string return the match as a string, and now I would like to contiue the search where I left of.
[16:18:06] <Sam> So keep a copy of the index where you left off around
[16:19:20] <fizzie> If you want to translate C++ pointers as directly as possible, and they all refer to the same underlying data, turn them into `int`s that are offsets within some (implied) string. Though quite possibly that's not the best way to go about it in terms of whatever the original problem was.
[16:21:25] <krux02> in C++ I made my own class, string with start and end, I thought in go it would be much more conveniont to use the language feature string which under the hood isn't anything else.
[16:22:23] <Sam> No, in Go you'd want to keep track of the star/end indexes or whatever too. String will not do that for you in the way you want (as I understand it anyways)
[16:22:32] *** Joins: jespada (~jespada@2803:9800:9842:7a62:9cdc:f08c:7ab8:bd6a)
[16:23:21] <fizzie> Yes, but that's *under* the hood, not over the hood. You could hypothetically have a `type substring struct { data string; offset int }` type you pass around in your code, with an `func (ss substring) String() string` method when you need to pass the contents as a string to something.
[16:26:03] <krux02> https://play.golang.org/p/_c7lIzq_y0r
[16:26:03] *** Quits: Teckla (~Teckla@user/teckla) (Quit: leaving)
[16:26:39] <krux02> with "unsafe" and "reflect" it is pretty easy to do what I want.
[16:27:28] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[16:28:01] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 245 seconds)
[16:28:13] *** Joins: Teckla (~Teckla@user/teckla)
[16:29:59] *** Joins: jla (~jordi@64.225.79.195)
[16:30:17] *** Joins: kiril (~kiril@85.91.153.163)
[16:30:30] <fizzie> That should almost certainly also modify h1.Len.
[16:30:45] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[16:31:28] *** Quits: Guest90 (~textual@119-18-3-156.771203.syd.nbn.aussiebb.net) (Ping timeout: 265 seconds)
[16:32:12] <krux02> fizzie, you are right
[16:33:01] <krux02> that is why I was working with two pointers in C++, then you can move the boundaries independently of each other
[16:34:14] <fizzie> You could do the same if you worked with a (start, end) pair of int offsets rather than strings, wink wink.
[16:35:12] <krux02> fizzie, but then I have no buit in language support for that type anymore
[16:35:22] <krux02> I have to implement my own slicing my own iteration etc.
[16:35:27] <krux02> redo everything
[16:36:01] <krux02> I have to redo it anyway
[16:36:04] *** Quits: dza (~dza@user/dza) (Quit: Leaving.)
[16:36:17] <krux02> but I think I will use neither.
[16:36:41] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[16:39:39] *** Joins: phubaz (~oofabz@phoenix.frammish.org)
[16:40:02] *** Quits: meain (~meain@2001:470:69fc:105::2db) (Ping timeout: 252 seconds)
[16:40:09] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cab:622d:7a3d:a6f1)
[16:40:17] *** Quits: foobaz (~oofabz@199.58.97.156) (Ping timeout: 264 seconds)
[16:40:17] *** phubaz is now known as foobaz
[16:41:08] *** Quits: phoenix[m] (~phoenixma@2001:470:69fc:105::f9b) (Ping timeout: 252 seconds)
[16:42:57] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cab:622d:7a3d:a6f1) (Client Quit)
[16:43:26] <krux02> is there a pointerdiff function that takes to uintptr arguments and returns their difference as int?
[16:44:33] <krux02> similar to how - in c++ returns a signed integer (ptrdiff_t) when operating on pointers?
[16:44:41] *** Joins: adlternative (~adl@117.32.216.79)
[16:45:44] *** Quits: gggpkm (~gggpkm@li2010-23.members.linode.com) (Remote host closed the connection)
[16:46:05] *** Joins: gggpkm (~gggpkm@li2010-23.members.linode.com)
[16:48:43] *** Quits: gggpkm (~gggpkm@li2010-23.members.linode.com) (Remote host closed the connection)
[16:49:16] *** Joins: gggpkm (~gggpkm@li2010-23.members.linode.com)
[16:49:19] <Sam> This is Go, not C++. Pointer arithmetic will break when the runtime decides to move things around on you, best to avoid it.
[16:50:43] *** Quits: gggpkm (~gggpkm@li2010-23.members.linode.com) (Remote host closed the connection)
[16:50:45] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[16:51:39] *** Joins: gggpkm (~gggpkm@li2010-23.members.linode.com)
[16:51:46] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 245 seconds)
[16:53:13] *** Quits: gggpkm (~gggpkm@li2010-23.members.linode.com) (Remote host closed the connection)
[16:53:37] *** Joins: gggpkm (~gggpkm@li2010-23.members.linode.com)
[16:53:59] *** Joins: mrig (~mrig@user/mrig)
[16:54:40] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[16:54:57] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[16:57:11] *** Joins: LiftLeft (~LiftLeft@172.98.92.64)
[17:03:18] <fizzie> unsafe.Pointer's docs have a rather short list of patterns that are valid. "Code not using these patterns is likely to be invalid today or to become invalid in the future. Even the valid patterns below come with important caveats."
[17:03:25] *** Joins: gggp (~textual@60.10.23.159)
[17:06:56] *** Quits: gggpkm (~gggpkm@li2010-23.members.linode.com) (Ping timeout: 252 seconds)
[17:08:31] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:21ef:5fa3:7f26:ea34) (Ping timeout: 252 seconds)
[17:22:43] *** Joins: paradise2go (~paradise2@103.165.167.7)
[17:26:43] *** Quits: unmanbearpig (~unmanbear@user/unmanbearpig) (Quit: unmanbearpig)
[17:27:12] *** Joins: unmanbearpig (~unmanbear@45.76.95.141)
[17:29:03] *** Quits: Compy__ (~compy@user/compy) (Read error: No route to host)
[17:30:15] <krux02> ok, I got rid of the unsafe stuff
[17:30:31] *** Quits: gggp (~textual@60.10.23.159) (Ping timeout: 245 seconds)
[17:31:55] *** Joins: gggp (~textual@60.10.194.42)
[17:32:21] <krux02> next question I have is, unicode.IsPunct seems to return different results than ispunct from ctype.h in C, is there a table that explains me the properties and ranges of those character classes?
[17:33:01] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[17:33:50] <krux02> ispunct('=') is true in C where unicode.IsPunct('=') is false
[17:36:25] *** Quits: normen (~normen@p200300d7171a560074df2c5df7064c4d.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[17:36:27] *** Joins: pepee (~pepee@user/pepee)
[17:45:18] <sztanpet> its whatever unicode specifies as punctuation
[17:45:19] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[17:45:55] <sztanpet> https://www.unicode.org/faq/punctuation_symbols.html
[17:47:02] <siXy> using C as the standard of what sensible unicode handling looks like is an... unusual... approach to take.
[17:47:08] <krux02> I just checket it, there is the separation in IsPunct and IsSymbol and the separation seems pretty arbitrary
[17:47:35] *** Joins: fikran (~fikran@user/fikran)
[17:47:47] <krux02> + and - are in different categories
[17:47:50] <krux02> wtf
[17:48:18] <krux02> + is sym and - is punct
[17:48:52] <sztanpet> yup
[17:50:01] <sztanpet> thus the reason theres an faq about it
[17:58:35] <krux02> sztanpet, can you point me to it?
[17:59:01] <siXy> ... He already did? See link ^
[17:59:09] <nathan>  /close
[17:59:14] *** Parts: nathan (~nathan@user/nathan) (WeeChat 3.2)
[17:59:24] <krux02> I just did the first buggy version of my tokenizer
[18:00:10] <krux02> all that is left for a compiler is a proper parser, optimizer, code generator, vm for compile time code execution, ...
[18:01:13] *** Quits: paradise2go (~paradise2@103.165.167.7) (Quit: Ping timeout (120 seconds))
[18:02:04] *** Joins: paradise2go (~paradise2@103.165.167.7)
[18:03:11] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1009)
[18:05:17] *** Joins: ar1nov (~arinov@213.194.126.155)
[18:08:13] *** Parts: jla (~jordi@64.225.79.195) ()
[18:12:43] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Read error: Connection reset by peer)
[18:14:03] *** Joins: normen (~normen@p200300d7171a560074df2c5df7064c4d.dip0.t-ipconnect.de)
[18:14:31] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[18:15:09] *** Joins: independent56 (~independe@51.15.187.53)
[18:20:16] *** Quits: paradise2go (~paradise2@103.165.167.7) (Quit: Client closed)
[18:20:37] <sztanpet> piece of cake huh
[18:21:01] <sztanpet> go go gadget compiler :)
[18:22:11] *** Quits: normen (~normen@p200300d7171a560074df2c5df7064c4d.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[18:28:31] *** Quits: gggp (~textual@60.10.194.42) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[18:31:04] *** Joins: INeedAHandle (~INeedAHan@39.124.72.106)
[18:33:43] *** Quits: darkapex_ (~darkapex@user/darkapex) (Read error: Connection reset by peer)
[18:34:14] *** Joins: darkapex (~darkapex@user/darkapex)
[18:45:56] *** Quits: xiongxin (~quassel@119.123.100.167) (Ping timeout: 252 seconds)
[18:46:34] *** Joins: xiongxin (~quassel@119.123.100.167)
[18:50:23] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[18:54:33] *** Joins: tane (~tane@dslb-002-201-234-068.002.201.pools.vodafone-ip.de)
[18:54:33] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[18:55:05] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[18:55:41] *** Quits: ConstantDesc (~textual@cpc158823-hari22-2-0-cust72.20-2.cable.virginm.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[18:58:03] *** Quits: independent56 (~independe@51.15.187.53) (Quit: Leaving)
[18:59:09] *** Joins: daveed (~ride@user/daveed)
[19:01:08] <daveed> Hello. I am having trouble with marshaling a struct using jszwec/csvutil. One of the fields in the struct is a string, and some times this string is a decimal number. When the field is just a number, marshaling the struct converts it to scientific notation. Does anyone know why this would be?
[19:01:47] *** Joins: eNV25 (~quassel@user/env25)
[19:01:55] <sztanpet> probably the library is trying to be too smart
[19:05:19] *** Quits: xiongxin (~quassel@119.123.100.167) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:07:37] <daveed> sztanpet: Should I just write my own marshal function or can you think of a way to get around this with csvutil?
[19:17:29] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[19:18:08] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[19:21:34] *** Joins: dza (~dza@user/dza)
[19:22:29] <icy> hi, can someone help me figure out why the html doesn't get modified here? https://play.golang.org/p/pjgnAIj651F
[19:22:46] <icy> essentially, i'm trying to change the href attribute inside an a tag, using x/net/html
[19:26:32] *** Quits: NCS_One (~NCS_One@a85-138-101-114.cpe.netcabo.pt) (Quit: Lost terminal)
[19:29:28] *** Quits: sizeof_void34 (~Thunderbi@109.252.124.86) (Quit: sizeof_void34)
[19:40:17] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[19:41:45] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[19:42:25] *** Joins: ConstantDesc (~textual@cpc158823-hari22-2-0-cust72.20-2.cable.virginm.net)
[19:43:22] *** Joins: CHALK_MIRC (~CHALK_MIR@102.91.4.177)
[19:46:10] *** Quits: winning-luser (~wl@2601:8c1:181:1340::6836) (Quit: Leaving)
[19:46:18] *** Quits: ar1nov (~arinov@213.194.126.155) (Quit: kotletki)
[19:46:29] *** Parts: CHALK_MIRC (~CHALK_MIR@102.91.4.177) ()
[19:46:40] <GinjaNinja32> icy, because `a` at line 14 is a copy of the value in `n.Attr`
[19:46:47] *** Joins: normen (~normen@pd9eece60.dip0.t-ipconnect.de)
[19:47:13] <icy> ahhhh
[19:47:14] <GinjaNinja32> if you want to modify the values in a slice while iterating, you need to do it by index rather than doing things to the value you copied into the loop variable
[19:47:29] <icy> right, yes. gotcha. missed that.
[19:48:06] <icy> thanks GinjaNinja32!
[19:52:14] *** Joins: adriano (~adriano@173.254.204.205)
[19:53:01] *** Quits: normen (~normen@pd9eece60.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[19:54:08] *** Joins: slrmn (~slmrn@23.252.48.155)
[19:54:57] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[19:56:56] *** Joins: fikran (~fikran@user/fikran)
[19:57:05] *** Quits: yoonkn (~user@175.197.208.79) (Read error: Connection reset by peer)
[19:57:32] *** Quits: absc (~absc@81.31.144.178) (Remote host closed the connection)
[20:00:45] *** Quits: slrmn (~slmrn@23.252.48.155) (Ping timeout: 265 seconds)
[20:07:43] *** Joins: girafe (~girafe@176-147-142-235.abo.bbox.fr)
[20:10:00] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[20:10:21] *** Joins: mickey (~user@user/mickey)
[20:10:42] *** Quits: impermanence (~impermane@73.94.243.213) (Ping timeout: 268 seconds)
[20:13:51] *** Quits: avemestr (~avemestr@2a01:4f8:212:2719::2) (Quit: WeeChat 1.9.1)
[20:15:40] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[20:19:27] *** Quits: arcanez (~arcanez@warpedreality.org) (Remote host closed the connection)
[20:19:30] *** Quits: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Read error: Connection reset by peer)
[20:19:39] *** Joins: arcanez (~arcanez@warpedreality.org)
[20:19:43] *** Joins: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[20:22:11] *** Joins: normen (~normen@pd9eece60.dip0.t-ipconnect.de)
[20:28:26] *** Joins: pztrn (~pztrn@user/pztrn)
[20:29:45] *** Quits: normen (~normen@pd9eece60.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[20:30:43] *** Quits: daveed (~ride@user/daveed) (Read error: Connection reset by peer)
[20:32:35] *** Joins: arinov (~arinov@77.67.139.108)
[20:33:05] *** Joins: iluxa (~iliaf@user/iluxa)
[20:33:12] *** Quits: iliaf (~iliaf@user/iluxa) (Ping timeout: 260 seconds)
[20:37:55] *** Quits: noonien (~noonien@user/noonien) (Quit: The Lounge - https://thelounge.chat)
[20:44:14] *** Joins: tar_xvf (~tar_xvf@c-76-116-112-52.hsd1.nj.comcast.net)
[20:48:19] *** Joins: jpw (~jpw@user/jpw)
[20:54:31] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[20:55:18] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[21:02:08] *** Quits: ConstantDesc (~textual@cpc158823-hari22-2-0-cust72.20-2.cable.virginm.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:04:06] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Read error: Connection reset by peer)
[21:04:53] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[21:05:22] *** Joins: normen (~normen@p200300d7171a560074df2c5df7064c4d.dip0.t-ipconnect.de)
[21:05:56] *** Quits: nrl^ (~nrl@68.101.50.106) (Ping timeout: 245 seconds)
[21:06:13] *** Joins: slrmn (~slmrn@23.252.48.155)
[21:08:57] *** Joins: nrl^ (~nrl@68.101.50.106)
[21:11:43] *** Quits: slrmn (~slmrn@23.252.48.155) (Ping timeout: 252 seconds)
[21:18:52] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[21:21:52] *** Quits: tar_xvf (~tar_xvf@c-76-116-112-52.hsd1.nj.comcast.net) (Quit: buh bye)
[21:23:33] *** Joins: tar_xvf (~tar_xvf@c-76-116-112-52.hsd1.nj.comcast.net)
[21:24:36] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.2)
[21:26:07] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[21:28:02] <fikran> anyone know if pgxpool has any mock code I could use for testing?
[21:29:29] *** Quits: tar_xvf (~tar_xvf@c-76-116-112-52.hsd1.nj.comcast.net) (Quit: buh bye)
[21:30:35] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Quit: Leaving)
[21:33:06] *** Joins: tar_xvf (~tar_xvf@c-76-116-112-52.hsd1.nj.comcast.net)
[21:33:32] *** Joins: mertyildiran (~mertyildi@31.142.184.89)
[21:33:38] *** Quits: tar_xvf (~tar_xvf@c-76-116-112-52.hsd1.nj.comcast.net) (Client Quit)
[21:33:46] *** Joins: bomb (~bomb@user/bomb)
[21:33:47] <mertyildiran> https://github.com/google/gopacket/blob/master/layers/tcp.go#L193 returns always non-zero (`0x0`) in case of HTTP chunked encoding. Is it possible to do TCP checksum to chunked encoding?
[21:34:41] *** Quits: normen (~normen@p200300d7171a560074df2c5df7064c4d.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[21:35:31] *** Joins: tar_xvf (~tar@c-76-116-112-52.hsd1.nj.comcast.net)
[21:36:28] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[21:37:17] *** Quits: adriano (~adriano@173.254.204.205) (Quit: WeeChat 2.8)
[21:37:47] *** Quits: tar_xvf (~tar@c-76-116-112-52.hsd1.nj.comcast.net) (Client Quit)
[21:38:07] *** Joins: adriano (~adriano@173.254.204.205)
[21:38:22] *** Joins: tar_xvf (~tar@c-76-116-112-52.hsd1.nj.comcast.net)
[21:39:40] *** Joins: schemanic (~schemanic@204.13.45.2)
[21:39:41] *** Quits: schemanic (~schemanic@204.13.45.2) (Client Quit)
[21:40:04] *** Joins: schemanic (~schemanic@204.13.45.2)
[21:42:34] <siXy> mertyildiran: on almost all modern systems, tcp checksums are offloaded to the NIC, so the OS never sees them. Are you certain that's not what's happening here?
[21:44:59] *** Quits: tar_xvf (~tar@c-76-116-112-52.hsd1.nj.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[21:45:36] *** Joins: tar_xvf (~tar@c-76-116-112-52.hsd1.nj.comcast.net)
[21:47:09] <eric_hill> anyone here have experience with pkcs11 and Go?  Specifically looking at handling TLS sessions using pkcs11 without access to the private key.
[21:47:09] <siXy> If you have disabled checksum offload (why on earth would you do this?) then my next guess would be nagle. There's nothing inherent in http chunked encoding that changes how tcp works.
[21:47:21] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[21:48:40] *** Quits: bkircher (~bkircher@2001:a61:252b:1601:507a:3765:2a05:b98f) (Ping timeout: 265 seconds)
[21:49:18] <siXy> eric_hill: Do you mean like implementing crypto.Signer for some sort of HSM that holds the key?
[21:50:16] <eric_hill> Honestly, I'm not sure what I'm looking for yet.  Trying to see if I can use the AWS Nitro Enclaves (pkcs11 provider in EC2 instance) to support a TLS certificate Go webserver.  They support nginx, I'm looking to go native.
[21:50:44] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 252 seconds)
[21:50:49] *** Joins: X-Scale` (~ARM@46.50.4.194)
[21:51:22] <eric_hill> The nitro enclave won't divulge the private key (seems reasonable) but I don't know how pkcs11 can support a TLS auth for a web server.  Does the web server hand the initial inbound socket through to pkcs11 for authentication, then get the handle back later?
[21:52:15] <siXy> I know absolutely zero about aws nitro but it sounds not unlike a software hsm.
[21:52:20] *** X-Scale` is now known as X-Scale
[21:52:41] <siXy> https://github.com/miekg/pkcs11 would be approximately what you'd want to do in that case
[21:54:44] <siXy> you would ideally modify it to implement crypto.Signer though, I think
[21:56:54] <eric_hill> I was just reading some of those test cases to look at capabilities.  At least I'm on the right track.  Tx.
[21:57:04] <siXy> eric_hill: Oooh. Found https://github.com/lstoll/awskms which implements crypto.Signer for AWS KMS
[21:57:18] <siXy> That's probably a lot closer to the right solution
[21:58:27] <siXy> Note: haven't checked that the code itself does sensible things, I'd want to go through it very carefully indeed before actually _using_ any of this stuff
[21:58:40] <eric_hill> That's with KMS, not Nitro, but I get the idea.  How would I plug a custom signer into the http listener?  ListenAndServeTLS needs the actual cert: https://pkg.go.dev/net/http#ListenAndServeTLS
[21:59:57] <mertyildiran> siXy: I have an HTTP sniffer based on https://github.com/google/gopacket/blob/master/examples/reassemblydump/main.go and I rarely get HTTP methods like `tET`, `AAKkmDnmqOjQM8jkKH0MPOST` so I thought those are bit flips (soft errors). I was doing TCP checksum so I thought maybe it's because of that. What do you think?
[22:00:21] <mertyildiran> *I was not doing TCP checksum
[22:00:44] <bomb> mertyildiran: artiz misn la
[22:00:54] *** Joins: bkircher (~bkircher@2001:a61:252b:1601:507a:3765:2a05:b98f)
[22:03:40] *** Quits: tar_xvf (~tar@c-76-116-112-52.hsd1.nj.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[22:04:22] *** Quits: KnKay (~kay@vmanager6813.v.reverse-ip.de) (Ping timeout: 252 seconds)
[22:04:29] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[22:04:32] *** Joins: tar_xvf (~tar@c-76-116-112-52.hsd1.nj.comcast.net)
[22:04:44] <siXy> eric_hill: By not using that method. You'll need the public cert either way, but you can use server.Serve with a TLS listener
[22:06:14] <siXy> And that tls listener can use a crypto.Signer where a private key would normally go
[22:06:17] *** Joins: fikran (~fikran@user/fikran)
[22:08:52] *** Quits: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Read error: Connection reset by peer)
[22:09:20] <lungaro> if i have a bunch of things I need to do at arbitrary intervals, is there a schedule api I can use?
[22:09:21] <siXy> mertyildiran: it's more likely that your sniffer is confused about what it's reading. bitflips are not super uncommon, but getting subtly wrong data from gopacket due to either nic offloading, various complexities of your OS networking stack, or simply code errors are far _more_ common.
[22:09:26] <lungaro> I dont want to write my own if I dont have to
[22:09:55] <siXy> mertyildiran: either way, tcp checksums are going to be the wrong place to look.
[22:10:12] *** Joins: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[22:11:44] <fizzie> You can also call a http.Server's ListenAndServeTLS method with "" as the cert/key, if you prepopulate the server's TLSConfig with whatever you would put in the config for making your own tls.NewListener.
[22:11:56] <siXy> mertyildiran: Honestly, for an HTTP sniffer, gopacket is almost certainly the wrong tool - you'd be better off using more conventional means to get ahold of the http packets, and not try to implement so much of the underlying tcp complexity
[22:12:27] <mertyildiran> siXy: like what alternatively?
[22:13:51] *** Quits: tedwing (~anon@lfbn-idf3-1-1409-51.w109-221.abo.wanadoo.fr) (Quit: leaving)
[22:13:52] <mertyildiran> siXy: same code, same machine produces one corrupted HTTP request in a million of the same HTTP request. That's why I concluded that it's a bit flip.
[22:14:31] <bomb> dem cosmic rays
[22:14:33] <eric_hill> mertyildiran: Chrome developer tools, or wireshark.  If the HTTP method is a bit scrambled, that's either a bug or a pen-test tool.
[22:15:21] <siXy> I'd just parse pcaps out of tcpdump, personally.
[22:15:43] <siXy> Let it do the hard work of handling all this stuff
[22:16:57] <mertyildiran> siXy: the software that I'm working on is basically an open-source Wireshark clone for Kubernetes https://github.com/up9inc/mizu So like those are not some alternatives for me at least.
[22:16:58] <siXy> If the corrupted request still exists in the pcap, then yeah you have a real bitflip. 99 times out of 100 these are caused by faulty DIMMs, so a memtest86+ run or seven would hopefully confirm. Less common are CPU faults or external factors
[22:18:09] <siXy> er why won't tcpdump work? k8s still creates network interfaces that can be sniffed with tcpdump, far as I remember
[22:18:24] <mertyildiran> siXy: yeah, unfortunately the a pcap file was not recorded when those malformed requests happened.
[22:19:14] <mertyildiran> siXy: no, it works. It's just I'm unable to reproduce the malformed HTTP request since it's extremely rare.
[22:19:16] <siXy> I see. Well if it is a faulty DIMM/CPU then good news! You'll get more bitflips, so you can make sure you get a pcap for next time... :)
[22:20:40] <siXy> You could also just schedule a run of memtest86+ to look for the most common cause of bitflips. But I haven't used that tool before, and debugging what it might have done wrong with packet parsing is a big job
[22:21:31] <eric_hill> There's also cache memory on network controllers that could be going bad, or a bad handshake between the switch and the nic, or the router is having a bad day.  Bit flips happen.
[22:22:52] <mertyildiran> eric_hill: yeah, I was going to say that I guess there could be a faulty router or switch since it also happens in certain clusters.
[22:23:42] <mertyildiran> I understand that doing the TCP checksum in software is not a good option. Thanks a lot!
[22:24:12] <eric_hill> if you're capturing traffic at the switch level (monitor port for example), the checksums should be valid.
[22:25:09] <siXy> yeah, those can also happen. IME though the vast majority of bitflips have been faulty DIMMs
[22:25:32] <eric_hill> I also blame ethernet cables made by the lowest bidder.
[22:25:49] <siXy> ah, see, I don't have to deal with that :)
[22:26:14] *** Quits: arinov (~arinov@77.67.139.108) (Ping timeout: 265 seconds)
[22:26:40] <siXy> one of the most annoying to debug problems in the past few years was a bitflip caused by a faulty CPU that was only bad when given a specific set of instructions in a specific order.
[22:26:44] <siXy> that one was HELL
[22:26:59] <eric_hill> Eww.
[22:32:09] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cab:622d:7a3d:a6f1)
[22:33:35] *** Quits: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz) (Quit: Leaving)
[22:35:17] *** Quits: adriano (~adriano@173.254.204.205) (Ping timeout: 252 seconds)
[22:35:35] *** Joins: KnKay (~kay@vmanager6813.v.reverse-ip.de)
[22:35:59] *** Joins: christophergray (~christoph@190.148.52.166)
[22:37:21] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 265 seconds)
[22:40:11] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cab:622d:7a3d:a6f1) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[22:44:56] *** Quits: cfjk (~cfjk@user/cfjk) (Quit: Ping timeout (120 seconds))
[22:45:23] *** Joins: cfjk (~cfjk@user/cfjk)
[22:46:21] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 245 seconds)
[22:47:49] *** Quits: bankin (~user@user/bankin) (Ping timeout: 252 seconds)
[22:48:27] *** Joins: bankin (~user@user/bankin)
[22:48:32] *** Joins: mikoto-chan (~mikoto-ch@83.137.2.251)
[22:51:48] <lungaro> i want to easily read from an arbitrary number of tickers. Is there a way to do this w/o making a goroutine per ticker?
[22:52:05] <lungaro> trying to make a scheduler that sends me simple events so i can dispatch the job to a worker
[22:52:17] <lungaro> if no worker, then we gotta wait.
[22:52:53] *** Joins: mrig (~mrig@user/mrig)
[22:54:32] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[22:54:45] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[23:00:33] *** Joins: arcatech (~arcatech@user/arcatech)
[23:03:01] *** Quits: bkircher (~bkircher@2001:a61:252b:1601:507a:3765:2a05:b98f) (Ping timeout: 245 seconds)
[23:04:42] *** Joins: arinov (~arinov@213.194.126.155)
[23:05:53] <j416> lungaro: what's the reason you cannot use goroutines?
[23:07:00] <lungaro> seems wasteful
[23:07:19] <j416> goroutines are cheap
[23:07:23] <lungaro> although, maybe I should test it. Yeah
[23:08:22] *** Joins: y04nn (~y04nn@193.32.127.238)
[23:08:35] <j416> if the number of tickers is constant, you could use a select
[23:08:41] *** Quits: schemanic (~schemanic@204.13.45.2) (Quit: Client closed)
[23:09:02] <j416> but judging from your question, I suppose you create them arbitrarily at runtime
[23:09:19] <j416> what are the tickers for?
[23:10:55] <lungaro> yeah, I want to be able to add/remove them dynamically at runtime
[23:11:07] <lungaro> a pubsub system streaming data to clients
[23:11:15] <KirkMcDonald> I could imagine making a structure which encapsulates an arbitrary number of ticker durations and collapses them together into a single... "thing."
[23:11:35] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[23:11:40] <j416> you're implementing the pubsub logic yourself, or using an existing pubsub thing?
[23:12:01] <lungaro> myself i think. its not that complicated
[23:12:04] <j416> I see.
[23:12:04] <lungaro> i could in theory make the scheduler myself
[23:12:17] <j416> sounds like a fun thing to implement.
[23:12:32] *** Quits: christophergray (~christoph@190.148.52.166) (Quit: WeeChat 3.3)
[23:12:36] <bpalmer> I hate to always suggest reflect, but there is reflect.Select, which would support up to 65536 channels
[23:12:53] <lungaro> lol, i'll think that's a bad idea
[23:13:30] <j416> bpalmer: til, didn't know that. thanks.
[23:13:31] <lungaro> that's pretty magical though
[23:16:04] *** Joins: bkircher (~bkircher@2001:a61:252b:1601:507a:3765:2a05:b98f)
[23:17:39] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[23:17:59] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Client Quit)
[23:20:03] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[23:23:27] *** Joins: hexfive (~eric@50.35.83.177)
[23:27:18] *** Quits: hexfive (~eric@50.35.83.177) (Client Quit)
[23:27:23] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1009) (Quit: ZNC 1.8.2 - https://znc.in)
[23:27:38] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1005)
[23:28:17] *** Quits: dove (~jordan@li1158-85.members.linode.com) (Quit: bye o/)
[23:29:12] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cab:622d:7a3d:a6f1)
[23:30:46] *** Quits: fmac (~fmac@2a01:4f9:c011:29a2::2) (Ping timeout: 252 seconds)
[23:30:58] *** Joins: fmac (~fmac@2a01:4f9:c011:29a2::2)
[23:31:17] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (Quit: quit)
[23:31:42] *** Quits: holgersson (~quassel@user/holgersson) (Quit: No Ping reply in 180 seconds.)
[23:32:07] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[23:32:58] *** Joins: holgersson (~quassel@user/holgersson)
[23:33:13] <lungaro> am I wrong to want to use a context to cancel a function from running?
[23:33:29] <lungaro> i dont see how yet. context.WithCancel is the only way? I can't just cancel it
[23:34:12] *** Joins: normen (~normen@pd9eece60.dip0.t-ipconnect.de)
[23:36:50] *** Quits: KnKay (~kay@vmanager6813.v.reverse-ip.de) (Ping timeout: 260 seconds)
[23:38:02] *** Joins: tofran (~tofran@37.189.158.134)
[23:39:16] *** Quits: bkircher (~bkircher@2001:a61:252b:1601:507a:3765:2a05:b98f) (Ping timeout: 245 seconds)
[23:39:55] *** Joins: KnKay (~kay@vmanager6813.v.reverse-ip.de)
[23:42:58] *** Joins: rcernin (~rcernin@056.008.dsl.qld.iprimus.net.au)
[23:43:54] <bpalmer> lungaro: a context to cancel a function from running makes perfect sense; WithCancel is the standard way using standard contexts to get a function that you can use
[23:44:06] *** Quits: rcernin (~rcernin@056.008.dsl.qld.iprimus.net.au) (Client Quit)
[23:44:09] <bpalmer> lungaro: but note that the function has to *check* the context to see if it's been cancelled
[23:44:52] <bpalmer> functions have to be written with cancellation in mind. Most IO routines that accept contexts will do so, but, e.g., computation-heavy functions have to specifically make sure to check
[23:44:56] <lungaro> yeah. I just dont get why the context doesn't have a Cancel() method
[23:45:05] <lungaro> maybe its not important enough
[23:45:39] <lungaro> just a lil confused for a sec
[23:46:27] *** Quits: kinduff (~kinduff@user/kinduff) (Quit: Ping timeout (120 seconds))
[23:47:11] *** Rhvs is now known as Rhys
[23:47:14] *** Joins: kinduff (~kinduff@user/kinduff)
[23:47:21] *** Quits: mgubyt (u@mgub.yt) (Quit: ZNC - https://znc.in)
[23:47:32] *** Quits: gueorgui (~gueorgui@user/gueorgui) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[23:47:35] *** Joins: mgubyt (u@mgub.yt)
[23:47:45] *** Joins: gueorgui (~gueorgui@user/gueorgui)
[23:48:56] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Quit: leaving)
[23:49:46] *** Quits: matt1982 (~matt1982@178.62.73.7) (Ping timeout: 260 seconds)
[23:50:43] *** Joins: rcernin (~rcernin@182.82-26-211.dynamic.dsl.brs.iprimus.net.au)
[23:51:08] *** Quits: shka (~herr@109.231.6.176) (Ping timeout: 250 seconds)
[23:51:21] *** Quits: nrl^ (~nrl@68.101.50.106) (Remote host closed the connection)
[23:52:03] *** Quits: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[23:52:15] *** Joins: bkircher (~bkircher@2001:a61:252b:1601:507a:3765:2a05:b98f)
[23:52:50] *** Quits: clee (~clee@tali.t0k.org) (Quit: leaving)
[23:52:56] *** Joins: mjorgensen_ (mjorgensen@sourcehut/users/mjorgensen)
[23:53:24] *** Joins: matt1982 (~matt1982@178.62.73.7)
[23:53:47] *** Quits: mjorgensen (mjorgensen@sourcehut/users/mjorgensen) (Ping timeout: 240 seconds)
[23:54:27] *** Quits: Archwyrm (~archwyrm@archwyrm.net) (Ping timeout: 240 seconds)
[23:57:52] *** Joins: k0ta (~k0ta@151.210.174.31)
[23:59:19] *** Quits: rcernin (~rcernin@182.82-26-211.dynamic.dsl.brs.iprimus.net.au) (Ping timeout: 252 seconds)
