[00:00:05] <nubonix> graingert, nope, found the error :D its because i was using`async def server` and for `server` in ...
[00:00:21] *** Joins: goldfish (~goldfish@user/goldfish)
[00:00:26] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[00:00:27] <nubonix> graingert my face is starting to hurt..
[00:00:57] *** Joins: fofoni (~fofoni@user/fofoni)
[00:01:00] *** Joins: wyclif (~wyclif@user/wyclif)
[00:01:04] <graingert> nubonix: It's best to not do that sort of logic globally in your module
[00:01:17] <graingert> Do it in a create_app function
[00:01:20] <nubonix> graingert, yeah ik, globals r bad
[00:01:34] <nubonix> graingert was my second thought, create a func and call it
[00:01:44] <nubonix> within the routes=some_func()
[00:01:47] *** Joins: cpyang (cpyang@114-32-153-132.HINET-IP.hinet.net)
[00:01:54] <nubonix> graingert thanks :)
[00:02:03] <graingert> Then use uvicorn.run("reverse_proxy: create_app()", ...)
[00:02:06] <mrec> what's the quickest way to parse "Corner(Edge129,Edge131)" to get Edge129 and Edge131 from that string?
[00:02:32] <mrec> split by comma and start at ( ..
[00:02:39] *** Quits: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com) (Read error: Connection reset by peer)
[00:02:53] *** Joins: bilb_ono (~alexmarsh@12.190.239.194)
[00:03:38] <mrec> stupid question, f[7:-1].split(",")
[00:03:48] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[00:04:07] <nubonix> graingert ah, was kinda my next question [reason why i didnt do it in the first place]
[00:04:25] <graingert> If it doesn't support that I think you pass factory=True
[00:04:28] <graingert> Then use uvicorn.run("reverse_proxy: create_app()", ...)
[00:04:30] <graingert> I think
[00:04:56] <nubonix> graingert ive got another q though... so... since im passing params, it doesnt like that im calling the coro
[00:05:12] *** Quits: yaalon (~yaalon@201.171.90.143.dsl.dyn.telnor.net) (Remote host closed the connection)
[00:05:15] <graingert> nubonix: you pass a partial
[00:05:40] <nubonix> graingert ?
[00:05:54] <nubonix> like from functools?
[00:05:56] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564) (Quit: Client closed)
[00:06:01] <graingert> functools.partial(server, server_ip=whatever)
[00:06:07] <nubonix> mk
[00:06:08] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[00:06:12] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564)
[00:06:32] *** Joins: wyclif (~wyclif@user/wyclif)
[00:06:35] <graingert> Tbh I'd do this with one view handler with one route
[00:06:43] <graingert> And a path parameter
[00:07:04] <graingert> Then look up the server ip in a dict
[00:07:18] <graingert> Saves having to try each route in turn
[00:07:53] <nubonix> +how do i do the path part?
[00:07:57] <nubonix> cant i just do requests.parms?
[00:08:18] <nubonix> get the request.params and add that to the new url?
[00:09:07] <nubonix> graingert whats the diff between doing it the way im doing it now vs the lookup way?
[00:09:53] <nubonix> nvm, ima use my way because it makes more sense to me
[00:10:07] *** Joins: Celeo (~Celeo@user/celeo)
[00:10:43] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564) (Ping timeout: 246 seconds)
[00:11:45] <graingert> nubonix: Routes are slower afaik
[00:11:59] <graingert> O(n) for each route at the same location in the tree
[00:11:59] *** Joins: yogoyo (~yogoyo@user/yogoyo)
[00:12:11] <graingert> But a dict is O(1)
[00:12:13] <nubonix> graingert: fair enough
[00:12:39] <nubonix> graingert ok, on to the pathing part, as i was def struggling with that as well
[00:13:05] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[00:14:08] <nubonix> ah, `request.url.path`
[00:14:32] *** Quits: Warped (~Warped@user/warped) (Ping timeout: 258 seconds)
[00:16:54] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[00:17:32] *** Joins: wyclif (~wyclif@user/wyclif)
[00:17:59] <graingert> nubonix: you can also use a Router parameter for the rest of the path
[00:18:10] <nubonix> graingert ?
[00:18:31] <nubonix> graingert, oh you mean by passing a param to the function
[00:18:48] <graingert> Route('/uploaded/{rest_of_path:path}'
[00:19:45] <nubonix> where does this come from? {rest_of_path:path}
[00:19:45] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Quit: Leaving)
[00:20:05] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[00:20:41] <nubonix> graingert heres what i have atm https://bpa.st/I2NQ
[00:21:23] <graingert> nubonix: You type it in
[00:21:48] <graingert> nubonix: https://www.starlette.io/routing/#path-parameters
[00:22:12] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[00:22:34] *** Joins: Samian (~Sami@163.114.130.6)
[00:22:40] *** Joins: sharperguy (~sharpergu@2001:1438:4010:3101:10a::3133)
[00:23:01] <Samian> How do you handle the situation in which one python environment needs one video card driver and another python environment needs another video card driver
[00:23:03] *** Joins: wyclif (~wyclif@user/wyclif)
[00:23:40] <graingert> Are you nubonics on gitter ? nubonix
[00:23:46] <nubonix> graingert not atm
[00:23:49] <Samian> me? No I'm not
[00:24:02] <graingert> nubonix: sorry what
[00:24:10] <sharperguy> is there a right way to parse a timestamp in the format "@1625134978 +0200" into a datetime object? I see datetime.fromtimestamp(), but then i have to also provide the timezone, which is not in the "+0200" format. The timezone can be parsed with datetime.strptime() but then there is no way to parse the timestamp part along with that.
[00:24:19] <nubonix> graingert i was there yesterday, but im not today so far
[00:24:20] <Samian> python environments solv the issue of needing two different versions of the same package for two different repos, but I don't think it solves that problem when the issue comes up for drivers
[00:24:21] <graingert> Samian: like this is opencl Vs metal or what have you?
[00:24:26] <graingert> nubonix: oh you can't leave
[00:24:34] <nubonix> graingert lols
[00:24:36] <grym> Samian: animal sacrifice, usually
[00:24:43] <graingert> It keeps you in the room after you close the tab
[00:24:52] <Samian> grym hahaha
[00:24:53] <nubonix> graingert i went to the chat you sent me yesterday is what i meant
[00:25:09] <graingert> nubonix: Under the name nubonics?
[00:25:20] <grym> Samian: if you really do mean nvidia-drivers, you're probably SOL
[00:25:27] <nubonix> graingert ah okay, so kinda like irccloud, yeah that should be me, was having problems signing up with nubonix
[00:25:28] <grym> if you mean cuda/cudnn, then you can have some options
[00:25:39] <Samian> graingert I'm not asking because I'm having the issue right now. I'm asking because the question always nagged at me and because I'm paranoid that my code won't work when my supervisor runs my code
[00:25:59] <Samian> I'll have an environment.yml, but if he doesn't have the right drivers, then I dunno
[00:26:06] <nubonix> graingert yeah, my name is nubonics on gitter
[00:26:08] <graingert> Samian: use systemd not supervisor
[00:27:29] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[00:27:31] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564)
[00:27:57] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[00:28:33] *** Joins: wyclif (~wyclif@user/wyclif)
[00:28:33] <Samian> The code I wrote uses I python library that's compiled from c++ source.   The c++ code compiles to a shared object file. The shared object file is loaded by the python portion of the code, using torch.load_library("someName.so")
[00:29:04] <Samian> the c++ code's compatibility depends on what pytorch c++ version it was compiled from
[00:29:35] <SnoopJ> Samian, if you want to use two such shared object files, they will both need to be compatible with the video driver you have loaded
[00:29:37] <Samian> and I think pytorch c++ compilations are tied to the hardware they're compiled with.
[00:29:54] <SnoopJ> probably not "the hardware," but to a particular CUDA compute level
[00:30:14] <SnoopJ> If you're trying to troubleshoot an error, please don't keep us in the dark about that
[00:30:27] <Samian> notice on pytorch's download page, it asks for CUDA version  you want to download the software for. https://pytorch.org/get-started/locally/
[00:30:51] <nubonix> graingert why whats up?
[00:31:05] <Samian> snoopj no I'm not trouble shooting an error at all. I'm just paranoid
[00:31:20] *** Quits: magla (~gelignite@55d493a6.access.ecotel.net) (Quit: Stay safe!)
[00:31:50] *** Quits: MemoriaVetusta (~MemoriaVe@191.101.31.42) (Ping timeout: 255 seconds)
[00:32:04] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564) (Ping timeout: 246 seconds)
[00:32:18] <SnoopJ> Samian, CUDA backwards compatibility is pretty good, you can usually use software built for an older compute level with a newer CUDA. If these are torch modules you're loading, that should definitely be the case for any compute level they officially support. It says on that page even that "Often, the latest CUDA version is better [to use]"
[00:33:38] <SnoopJ> i.e. the fact that there's selectors for CUDA 10.2 and CUDA 11.1 there doesn't mean you pick one or the other: the CUDA 11.1 builds (which installs torch with +cu111 added to the package name) should support modules that were built with CUDA 10.2 in general.
[00:34:11] <SnoopJ> There are exceptions to this rule, but Nvidia's release notes are generally good about pointing out breaking changes.
[00:36:02] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f) (Ping timeout: 250 seconds)
[00:36:30] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:79de:2735:de11:f577)
[00:38:30] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[00:38:35] *** __jmcantrell__ is now known as jmcantrell
[00:38:55] *** Quits: Celeo (~Celeo@user/celeo) (Quit: Leaving)
[00:39:09] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[00:39:36] *** Joins: wyclif_ (~wyclif@user/wyclif)
[00:39:48] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[00:39:58] <kenwoodfox> graingert: Hey graingert, you helped me out with my code a bit ago and got me using Starlette and it works ok so far~ but one of my task group members crashes and does so silently, not restarting
[00:40:18] <kenwoodfox> graingert: ill post the code up in just a bit
[00:43:21] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Ping timeout: 255 seconds)
[00:44:37] *** Quits: wyclif_ (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[00:44:51] *** Quits: szymon (~ugh@staticline-31-183-187-232.toya.net.pl) (Remote host closed the connection)
[00:45:07] *** Joins: kosh (~kosh@user/kosh)
[00:45:21] *** Quits: Samian (~Sami@163.114.130.6) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:45:27] *** Quits: trashbird (~trashbird@user/trashbird) (Quit: what)
[00:47:02] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Quit: Leaving)
[00:48:05] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564)
[00:48:27] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564) (Client Quit)
[00:48:43] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564)
[00:50:12] *** Joins: yaalon (~yaalon@189.202.79.66.cable.dyn.cableonline.com.mx)
[00:50:46] *** Joins: wyclif (~wyclif@user/wyclif)
[00:52:02] *** Quits: y1n (~y1n@84-115-64-78.wifi.dynamic.surfer.at) (Ping timeout: 265 seconds)
[00:52:11] *** Joins: y1n (~y1n@84-115-65-238.wifi.dynamic.surfer.at)
[00:53:32] *** Quits: bilb_ono (~alexmarsh@12.190.239.194) (Quit: bilb_ono)
[00:54:13] *** Quits: demophoon (~demophoon@c-24-21-106-28.hsd1.or.comcast.net) (Read error: Connection reset by peer)
[00:54:45] *** Joins: demophoon (~demophoon@c-24-21-106-28.hsd1.or.comcast.net)
[00:56:34] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564) (Ping timeout: 246 seconds)
[00:56:53] *** Quits: yaalon (~yaalon@189.202.79.66.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[00:57:36] *** Joins: Samian (~Sami@2620:10d:c091:480::1:6681)
[00:57:46] <Samian> good points SnoopJ
[00:58:14] *** Joins: bilb_ono (~alexmarsh@12.190.239.194)
[00:59:14] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:59:46] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Ping timeout: 265 seconds)
[00:59:59] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:00:00] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Ping timeout: 255 seconds)
[01:01:28] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 272 seconds)
[01:01:39] *** Joins: trashbird (~trashbird@user/trashbird)
[01:02:42] *** Joins: dangrenier83 (~dangrenie@user/dangrenier83)
[01:03:09] *** Quits: trashbird (~trashbird@user/trashbird) (Read error: Connection reset by peer)
[01:04:01] *** Quits: zeenk (~zeenk@2a02:2f04:a106:9600:82fb:aed9:ca9:38d3) (Quit: Konversation terminated!)
[01:04:30] <glik22> i'm working with redis-py which does not allow bools as dict values. anyone know of a way to convert all bools of an arbitrarily nested dict to ints?
[01:05:07] <Evolver> I wait on the completion of 80K futures. Python blows up in its memory usage for no good reason. Definitely a bug, and heavily documented on StackOverflow.
[01:05:12] <glik22> customer encoders/decoders do not work because they only work for unrecognized data types
[01:05:20] *** Joins: trashbird (~trashbird@user/trashbird)
[01:05:32] *** Joins: yaalon (~yaalon@189.202.79.66.cable.dyn.cableonline.com.mx)
[01:05:42] <Evolver> glik22: maybe use recursion
[01:06:00] *** Joins: decimuscorvinus_ (~jimmy@136.37.105.112)
[01:06:18] <zware> glik22: I'm a bit surprised it accepts ints; doesn't Redis just store strings and thus you'd need to serialize any dict?
[01:06:31] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[01:06:38] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:79de:2735:de11:f577) (Quit: Leaving)
[01:06:54] <marduk> I thought redis only stored binary data (bytes)
[01:07:07] <zware> Yes, I should not have said "strings" :)
[01:07:34] <nedbat> Evolver: is there a bug about it at bugs.python.org?
[01:07:50] *** Quits: mcglk (~mcglk@131.191.49.120) (Read error: Connection reset by peer)
[01:07:51] *** Joins: mcglk_ (~mcglk@131.191.49.120)
[01:08:05] *** Joins: lexandrop (~lex@user/lexandrop)
[01:08:06] <marduk> So maybe just encode it go json on the way to redis and decode it as json on the way out?
[01:08:17] *** Quits: decimuscorvinus (~jimmy@136.37.105.112) (Ping timeout: 255 seconds)
[01:08:24] <SnoopJ> Samian, do they resolve your question(s)?
[01:08:27] *** Quits: sharperguy (~sharpergu@2001:1438:4010:3101:10a::3133) (Ping timeout: 245 seconds)
[01:08:41] <glik22> zware: looks like the client is converting ints to strs
[01:08:53] <glik22> Evolver: yea, i was hoping to avoid that
[01:09:11] *** Joins: GinFuyou (~GinFuyou@reya.cloud.tilaa.com)
[01:09:34] <glik22> marduk: not quite sure what you are suggesting.
[01:09:55] <Evolver> nedbat: at least there exists bug # 27144 but it's marked resolved. For me the broad issue persists.
[01:10:02] <lexandrop> Hi. I'm having troubles with official mysql.connector . They have "new" "mysql.connector", but I need to escape some strings before storing them, and looks like escape function ("escape_string") exists only in "old" implementation - "_mysql_connector". Maybe someone knows, how to convert/escape strings with modern "mysql.connector"?
[01:10:19] <nedbat> Evolver: sounds like you should add to that issue, or write a new one.
[01:10:24] <glik22> i'm trying to encode it as json, but i need to convert bools to ints (or strs). i could use recursiion as Evolver suggested but was wondering if there is an easier way
[01:10:49] <zware> glik22: `json.dumps()` will happily take bools (and `json.loads()` will happily load them)
[01:10:51] <marduk> glik22: i don't have a lot of experience with python/redis but I *think* redis internally only stores bytes, so if you only put bytes in and get bytes out then you should be ok, just do the encoding/decoding yourself.
[01:10:56] *** Joins: ElPresidente (~ElPreside@2600:1700:3d10:4870:19bc:45bb:c530:25ad)
[01:11:08] *** Joins: yaalon_ (~yaalon@201.171.90.143.dsl.dyn.telnor.net)
[01:11:40] <marduk> like what zware said
[01:11:53] *** Quits: Linux77 (~kvirc@66-183-233-186.raimax.com.br) (Ping timeout: 255 seconds)
[01:12:21] <Evolver> glik22: is there a benefit to storing native json in redis? Does it allow indexing into the json?
[01:12:24] <glik22> marduk: oh, duh :). i think i tried that when calling the method (xadd) and it complained that it neeed a dict
[01:12:57] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[01:13:00] <glik22> Evolver: i don't have a real use case. so i guess i could just pass in {data: json.dumps(data)}
[01:13:03] *** Quits: wovixo (~wovixo@128.104.205.49) (Ping timeout: 255 seconds)
[01:13:09] <Evolver> glik22: yes
[01:13:18] *** Quits: yaalon_ (~yaalon@201.171.90.143.dsl.dyn.telnor.net) (Remote host closed the connection)
[01:13:22] <glik22> awesome, thank you!
[01:13:29] <lexandrop> ... related to my question above: https://dev.mysql.com/doc/connector-python/en/connector-python-api-cext-escape-string.html - is the thing I am looking for. And I can't find any other implementation of this thing so far (except for, like, http://mysql-python.sourceforge.net/MySQLdb.html )
[01:13:54] *** Joins: yaalon_ (~yaalon@201.171.90.143.dsl.dyn.telnor.net)
[01:13:57] *** Quits: yaalon (~yaalon@189.202.79.66.cable.dyn.cableonline.com.mx) (Ping timeout: 255 seconds)
[01:14:46] <zware> glik22: Makes me wonder why xadd instead of set :)
[01:14:50] *** Quits: yaalon_ (~yaalon@201.171.90.143.dsl.dyn.telnor.net) (Read error: Connection reset by peer)
[01:15:18] <glik22> zware: streams
[01:15:36] *** Joins: raxor2k (~raxor2k@78.158.254.246)
[01:16:07] <zware> glik22: Ah, right.  You're beyond my experience then :)
[01:17:58] <raxor2k> graingert: are you here
[01:18:02] *** Joins: tnez (~el@user/tnez)
[01:19:23] *** Quits: UselessCourage (~UselessCo@gateway/tor-sasl/uselesscourage) (Remote host closed the connection)
[01:20:06] *** Joins: shibboleth (~shibbolet@gateway/tor-sasl/shibboleth)
[01:20:09] *** Quits: jamiejackson (~jamiejack@207.172.87.34) (Quit: Connection closed)
[01:20:43] *** Quits: shabius (~shabius@2a0e:1c80:2:1021::1000) (Quit: Leaving)
[01:20:50] *** Joins: Linux77 (~kvirc@66-183-233-186.raimax.com.br)
[01:22:15] *** Quits: slav0nic (slav0nic@python.su) (Remote host closed the connection)
[01:23:18] <graingert> Evolver: 80k futures? What type?
[01:23:30] <SnoopJ> why are you like this, Docker :( https://github.com/docker/docker-py/blob/master/docker/models/images.py#L286-L292
[01:24:12] <Evolver> graingert: process
[01:24:37] <graingert> Hmm how many processes?
[01:24:52] <Evolver> graingert: I tried 64 and 128, i.e. one per 1 or 2 cores
[01:25:06] <Evolver> graingert: The num of processes had no bearing.
[01:25:49] <Evolver> graingert: Actually the tasks all complete fine, but just after they complete, Python blows up in its memory usage.
[01:26:11] <graingert> Evolver: try multiprocessing.get_context("spawn").Pool(...).imap_unordered it chunks by default
[01:26:23] *** Joins: shabius (~shabius@2a0e:1c80:2:1022::1009)
[01:26:28] <Evolver> graingert: oh yeah I could use mp
[01:26:34] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[01:26:55] *** Joins: wyclif (~wyclif@user/wyclif)
[01:27:25] <Evolver> graingert: yeah I'm going through various workarounds, one by one, to see what works. Thanks for that one.
[01:27:57] <nubonix> cant i not pass a json object to httpx.get?
[01:28:32] <graingert> nubonix: get requests can't have a body
[01:29:01] <nubonix> graingert lies: `session = requests.Session(); r = session.get(url, auth=HTTPBasicAuth('worker', 'rumNatORThon'), verify=False, timeout=30, data=payload)`
[01:29:30] *** Joins: djapo (~archangel@user/djapo)
[01:29:32] <graingert> nubonix: it seends it in the query parameters right?
[01:30:00] <nubonix> graingert mm, not sure
[01:30:16] <jtanner> set your python logger to debug, and you'll see it
[01:30:17] <raxor2k> as i didnt get answers earlier, im trying again: is this a good identitation of the code? : https://bpa.st/RGNQ
[01:30:41] <raxor2k> https://bpa.st/LBAA
[01:30:51] <raxor2k> first file works perfectly. now i want to add a second IF, on the second file
[01:31:04] <nubonix> graingert erm, so whats the == to json={} in httpx?
[01:31:17] <nubonix> params != json thats for sure [ik params goto the url]
[01:31:34] <graingert> nubonix: ?
[01:31:41] <nubonix> and i thought json / data was part of the body being sent
[01:31:47] <nubonix> but idk how to send a body in httpx with a .get
[01:31:55] <SnoopJ> nubonix, it is, when a body is allowed
[01:32:02] <graingert> nubonix: What are you passing as payload in requests?
[01:32:10] <nubonix> graingert a dictionary
[01:32:10] <SnoopJ> a body for a GET is not forbidden by the spec, but you shouldn't do it because it isn't guaranteed either
[01:32:12] <SnoopJ> it's undefined behavior
[01:32:19] <SnoopJ> (and some servers will reject it outright)
[01:32:22] *** Quits: dogdisaster (~dogdisast@143.59.30.167) (Read error: Connection reset by peer)
[01:32:28] <SnoopJ> https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET
[01:32:29] <nubonix> SnoopJ: i wrote the server
[01:32:46] <SnoopJ> nubonix, did you write the HTTP protocol handler yourself?
[01:32:48] <graingert> nubonix: pretty sure requests sends data={ ... as query params
[01:32:56] <nubonix> SnoopJ: i did not
[01:33:05] <SnoopJ> nubonix, then my point still applies.
[01:33:06] <nubonix> graingert hmm
[01:33:12] *** Parts: nesoi (~Adium@198-27-190-235.fiber.dynamic.sonic.net) ()
[01:33:15] <nubonix> SnoopJ: got that
[01:33:28] <nubonix> every1 pmsing today i swear...
[01:33:36] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[01:33:36] <graingert> nubonix: ?
[01:33:38] <nubonix> must be a full moon tonight
[01:33:45] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Ping timeout: 255 seconds)
[01:34:07] <SnoopJ> what an ugly thing to say
[01:34:09] *** Quits: ali1234 (~al@user/ali1234) (Remote host closed the connection)
[01:34:16] <SnoopJ> let's talk about HTTP instead please
[01:34:24] *** Joins: ali1234 (~al@user/ali1234)
[01:34:31] <nubonix> graingert nothin, also.. got another q... with the example i showed earlier, how do i pass params to async def server?
[01:34:53] <nubonix> graingert ive hardcoded the paths that the other servers have, but i havent figured out how to send those paths params
[01:35:07] <graingert> nubonix: Starlette passes them in the request object
[01:35:30] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[01:35:36] <nubonix> graingert how do i get them? `request.?`
[01:35:57] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 245 seconds)
[01:36:58] <nubonix> request.path_params ah
[01:36:59] *** Joins: dogdisaster (dogdisaste@gateway/vpn/protonvpn/dogdisaster)
[01:37:17] <graingert> nubonix: 20:51:47 <graingert> nubonix: https://www.starlette.io/routing/#path-parameters
[01:37:29] *** Quits: dogdisaster (dogdisaste@gateway/vpn/protonvpn/dogdisaster) (Remote host closed the connection)
[01:37:43] *** Quits: qlixed (~qlixed@181.44.129.13) (Ping timeout: 258 seconds)
[01:38:10] <nubonix> graingert i dont understand this code/syntax `Route('/uploaded/{rest_of_path:path}', uploaded)`
[01:38:47] <nubonix> ik Route is creating a route, `/uploaded/` is the base of the url, but idk what {rest_of_path:path} is or comes from, and ik that uploaded is the function that is associated with that path
[01:39:26] <nubonix> ik i said this earlier
[01:39:31] <graingert> nubonix: it consumes an item of type path from the URL when matching the route
[01:39:46] <nubonix> graingert e.g.?
[01:40:07] *** Quits: dvx (~dvx@185.63.97.64) (Remote host closed the connection)
[01:40:10] <nubonix> are you talking about in the example of the docs user_id
[01:40:22] <graingert> Then you can see the parameter in requests.path_params["rest_of_path"]
[01:40:24] <nubonix> `user_id = request.path_params['user_id']`
[01:40:57] <nubonix> okay, so the path has already been sent, but since im creating the reverse proxy, i need to send this to httpx
[01:42:34] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[01:44:36] * hodapp discovers PEP 0572 and walrus operator
[01:45:12] <SnoopJ> hodapp, it's...something!
[01:45:30] <hodapp> I encountered it in a Stack Overflow answer and went "whaaa?"
[01:45:48] <SnoopJ> it's more than a little magical :/
[01:46:07] <hodapp> magical?
[01:46:07] *** Quits: Deesl (~bsdboy@redhat/psirt/Deesl) (Quit: My Mac Pro has gone to sleep. ZZZzzz…)
[01:46:09] <SnoopJ> annoyingly, it's proving to be something I want to write more and more
[01:46:28] <hodapp> why's that annoying?
[01:46:36] *** Joins: fcjsx (~fcjsx@2800:a4:835:8900:57e1:dfd9:adef:4416)
[01:46:37] <SnoopJ> hodapp, as in the reader's perception, a la "the author of this code just did something that I don't understand, what is this magic"
[01:47:00] *** Quits: fcjsx (~fcjsx@2800:a4:835:8900:57e1:dfd9:adef:4416) (Client Quit)
[01:47:19] <SnoopJ> and it's annoying because I _don't_ want to use it because it's probably harder to read for my code's target audience, but I _might_ because it's kinda nice to skip the initialization line :)
[01:47:34] <SnoopJ> (and/or the update line in a while loop usage)
[01:49:59] *** Joins: pnoud (~pnoud@user/pnoud)
[01:51:54] *** Quits: y1n (~y1n@84-115-65-238.wifi.dynamic.surfer.at) (Ping timeout: 272 seconds)
[01:51:59] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Remote host closed the connection)
[01:52:22] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[01:52:37] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[01:52:37] *** Joins: y1n (~y1n@84-115-65-238.wifi.dynamic.surfer.at)
[01:54:01] <nubonix> graingert wooo ty :D
[01:54:31] <bilb_ono> how do I return an attribute or pass it as an argument? I am trying to create a class which uses SQLAlchemy to represent a database column and then I want to be able to check if an id exists in that table. This is my code https://bpa.st/6B3A
[01:54:51] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[01:54:58] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 258 seconds)
[01:55:09] <bilb_ono> like I want to pass it “customers” and it queries Base.classes.customers
[01:56:42] <SnoopJ> graingert, after poking at it with pudb, I think requests.get() does let you send it as a body proper
[01:56:59] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564)
[01:57:13] *** Joins: Thanatos (~Thanatos@197.210.54.4)
[01:57:23] *** Quits: MrFantastik (~Thunderbi@rrcs-184-74-43-235.nys.biz.rr.com) (Ping timeout: 268 seconds)
[01:58:57] <SnoopJ> or at least the PreparedRequest that gets handed over to the adapter does have a .body. Not sure if anything else happens from there
[01:59:17] <graingert> It can try and send an httpx.request
[02:00:19] *** Joins: Masterphi (~Masterphi@user/masterphi)
[02:00:54] <graingert> You*
[02:01:40] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564) (Ping timeout: 246 seconds)
[02:02:42] <raek> does anyone know how to use cffi_modules in a setup.cfg file? the cffi docs shows how to do it for a setup.py file. (https://cffi.readthedocs.io/en/latest/overview.html#main-mode-of-usage)
[02:02:58] *** Quits: DXR (~lyrical@46.246.236.246.dsl.dyn.forthnet.gr) (Remote host closed the connection)
[02:03:19] <raek> I tried adding it under [options], but that does not seem to do anything...
[02:03:25] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:79de:2735:de11:f577)
[02:04:01] <bilb_ono> oh getattr
[02:04:45] <graingert> raek: can't be done it seems
[02:04:45] <graingert> https://foss.heptapod.net/pypy/cffi/-/issues/396
[02:05:14] <raek> graingert: ok, thanks! I'll use a setup.py file then... :-)
[02:05:57] <graingert> raek: You could probably resurrect that patch into a merge request
[02:07:01] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.1)
[02:09:06] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[02:10:29] *** Quits: b-ap (~b-ap@2804:14c:1aa:80be:7e7a:91ff:fe11:111f) (Quit: WeeChat 2.3)
[02:10:39] *** Joins: rsiemens (~rsiemens@108.60.175.6)
[02:10:56] <SnoopJ> graingert, doesn't seem to complain if I do that, and it does end up on the wire
[02:11:04] *** Quits: tm007 (uid287041@id-287041.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[02:11:17] <SnoopJ> wonder if that's a bug, or an intentional way to let people still do the undefined thing
[02:11:18] <dale> Seems like packaging.python.org recommends a project's packages go into foo_project_root/src/foopackage whereas "poetry new" puts them right under project root, like foo_project_root/foopackage.
[02:11:48] <graingert> SnoopJ: Seems sensible to hide it in there
[02:11:48] <nubonix> okay, so im trying to validate a password by the hash, however, i think since its time based, im running into a bit of a ? https://bpa.st/ZEUA
[02:12:09] <SnoopJ> graingert, yea, I can see the argument for "we don't support the whole spec" if it's not possible to do it at all, and request() is already power-user territory
[02:13:08] *** Joins: sharperguy (~sharpergu@2001:16b8:5cd5:6a00:854b:e13d:44fe:55de)
[02:13:27] *** Joins: Deesl (~bsdboy@redhat/psirt/Deesl)
[02:14:53] *** Quits: t3nj1n (~t3nj1n@pool-96-246-146-100.nycmny.fios.verizon.net) (Ping timeout: 255 seconds)
[02:15:39] *** Joins: TranquilEcho (~grom@user/tranquilecho)
[02:15:58] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 272 seconds)
[02:15:59] <graingert> nubonix: You make the CryptContext once globally
[02:16:16] <nubonix> graingert:  o
[02:16:22] <graingert> nubonix: And you use myctx.verify
[02:16:31] <nubonix> graingert yeah, just saw on docs
[02:16:34] <graingert> The hash is different every time on purpose
[02:16:57] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[02:17:24] <graingert> nubonix: it's salted with a random number
[02:17:32] <graingert> You might want to do the verify in a thread
[02:18:19] *** Joins: wyclif (~wyclif@user/wyclif)
[02:18:28] *** Quits: rsiemens (~rsiemens@108.60.175.6) (Quit: Leaving...)
[02:19:36] <graingert> nubonix: eg await anyio.to_thread.run_sync
[02:19:38] *** Joins: mike18 (~geri@216.200.232.252)
[02:19:39] <mike18> hi
[02:19:43] <mike18> is it possible to map hostname1 to hostname2 in /etc/hosts ?
[02:20:27] <dale> Never mind, I see the "src layout" for packages has been thoroughly discussed and is basically recommended for all but single-module distributions.
[02:20:42] <mike18> i have some old code which stats stats (statsd) to hostname1, but hostname1 is not available any more. i want to find a way that it gets forwarded to hostname2
[02:20:50] *** Quits: Barones (~Barones@2804:48dc:8500:0:b4cf:178f:569e:5f89) (Remote host closed the connection)
[02:21:09] *** Quits: bilb_ono (~alexmarsh@12.190.239.194) (Quit: bilb_ono)
[02:21:15] <dale> mike18: Not directly AFAIK.  You may be able to do a CNAME in proper DNS.
[02:21:27] <mike18> cname where?
[02:21:37] <dale> mike18: Actual DNS record in your DNS server(s).
[02:21:41] <nubonix> graingert `answer = await anyio.to_thread.run_sync(myctx.verify(password, hashed_password, 'argon2'))`
[02:21:52] *** Joins: emika (~emika@5.181.235.116)
[02:21:56] <mike18> dale: so /etc/hosts cant be used for that than?
[02:22:03] <nubonix> graingert not sure why i get a coro tho
[02:22:13] <dale> mike18: Not AFAIK.  Maybe particular platforms here or there have added some new features to that effect, but I've never heard of such a thing.
[02:22:15] <graingert> nubonix: ?
[02:22:27] <mike18> dale: for a jenkins server
[02:22:33] <nubonix> grainger answer == coro
[02:22:35] <graingert> nubonix: you need to pass a function, you're passing a Boolean
[02:22:38] <dale> mike18: You can definitely alias hostname1 to hostname2's IP address in /etc/hosts.
[02:22:48] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[02:22:50] <nubonix> graingert an async func?
[02:23:00] <nubonix> graingert: makes sense... since im awaiting
[02:23:02] <graingert> A sync function
[02:23:08] <SnoopJ> dale, the tutorials do kind of lead with it, but it's an aesthetic thing for sure
[02:23:14] <nubonix> graingert o right, cause the thread
[02:23:44] <graingert> run_sync is an async function that runs a sync function in a thread
[02:23:44] * dale finds poetry new --src
[02:24:08] <graingert> nubonix: but you shouldn't get a Coroutine from await run_sync
[02:24:09] <mike18> dale: printf "%s\t%s\n" "Hostname1" "192.168.1.1" | sudo tee -a /etc/hosts > /dev/null ... 192.68.1.1 is hostname2 ... like that?
[02:24:11] <dale> SnoopJ: The Trilateral Python Packaging Cabal seems to have met ca. 2019 and decided that src is the way to go.
[02:24:16] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[02:24:21] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 265 seconds)
[02:24:34] <graingert> nubonix: can you show your code and how you found out answer was a coro?
[02:24:34] *** Quits: demophoon (~demophoon@c-24-21-106-28.hsd1.or.comcast.net) (Read error: Connection reset by peer)
[02:24:40] *** Joins: qlixed (~qlixed@152.170.36.244)
[02:25:08] <graingert> dale: I'm so-so on the src dir
[02:25:16] <dale> mike18: Typically the IP and host name go in the other order, so "192.168.1.1 hostname1", but otherwise yes.  (I don't remember if Windows is the same offhand but I believe it is.)
[02:25:25] <SnoopJ> dale, the whatnow
[02:25:36] *** Joins: bilb_ono (~alexmarsh@12.190.239.194)
[02:25:42] <SnoopJ> sounds like an interesting discussion if you'd like to share the link
[02:26:11] <dale> SnoopJ: https://github.com/pypa/packaging.python.org/issues/320#issuecomment-495990983
[02:26:18] <SnoopJ> ta
[02:26:22] *** Quits: p-i-_ (~Ohmu@113.53.161.124) (Read error: Connection reset by peer)
[02:26:24] <nubonix> graingert https://bpa.st/RP5Q
[02:26:34] <mike18> dale: so when java code uses hostname1 - it will foward to that ip?
[02:26:34] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[02:26:51] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 255 seconds)
[02:26:55] <mike18> ip -> 192.168.1.1
[02:27:02] *** Joins: p-i- (~Ohmu@node-o6x.pool-118-173.dynamic.totinternet.net)
[02:27:07] *** Joins: c10l (~c10l@89.34.167.207)
[02:27:07] <dale> mike18: When Java code tries to resolve hostname1, it probably should, yes.  You may need to restart said Java code.  You can confirm it's working with "ping hostname1" or whatever.
[02:27:19] <SnoopJ> dale, oof, perhaps a less pleasant one than I'd hoped for
[02:27:20] <nubonix> graingert cant find it, so im not sure why i thought it was a coro
[02:27:38] <Jin^eLD> SnoopJ, habnabit_: I am currently here https://cffi.readthedocs.io/en/latest/using.html#callbacks trying out callbacks from C into Python; unfortuntaely I get a coredump :) backtrace is not clear but has quite some thread related stuff in it
[02:27:41] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[02:27:50] <graingert> nubonix: You pass the function and the args separately like this:
[02:27:50] <nubonix> graingert probably because of the await, i automatically assumed
[02:27:54] <dale> mike18: Note that hostname1.example.com--that is, hostname1 with a domain or something--will not get 192.168.1.1 because your /etc/hosts only says "hostname1".  You can add additional hostname in the /etc/hosts line after "hostname1", ex. "192.168.1.1 hostname1 hostname1.example.com hostname1.local".
[02:28:01] <Jin^eLD> are there known limitations in that regard? my script runs in thread 1 and the callback is triggered by thread 2
[02:28:04] <nubonix> graingert o, like the threading.Thread does
[02:28:15] <Jin^eLD> that should still work, right? I.e. I expect cffi to do the gil stuff?
[02:28:25] <graingert> anyio.to_thread.run_sync(myctx.verify, password, hash, cancellable=True)
[02:28:30] *** Joins: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net)
[02:28:46] <dale> SnoopJ: Less pleasant in terms of the readability of a long GitHub issue, less pleasant in terms of the tone of some of the discourse there, or less pleasant in terms of not the outcome you wanted?  User may choose more than one of these. :)
[02:28:57] <mike18> dale: my hostname is called: foo-stats-x1.myorg.com
[02:28:59] <graingert> (quintessential cancellable sync operation right there btw)
[02:29:22] <dale> mike18: So if that's the name your Java program references, just use that instead of "hostname1" in /etc/hosts.
[02:29:23] <nubonix> graingert o, so i needed the cancellable
[02:29:31] *** Quits: Akuli (~Akuli@dy5gs-ytcd5w---v3qqvy-4.rev.dnainternet.fi) (Quit: Leaving)
[02:29:33] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 255 seconds)
[02:29:40] <nubonix> graingert, why?
[02:29:56] <dale> graingert: I'm not really excited about src, but I like consistency more than I dislike src.
[02:29:56] <mike18> dale: like that right? printf "%s\t%s\n" "192.168.1.1" "foo-stats-x1.myorg.com" | sudo tee -a /etc/hosts > /dev/null
[02:30:17] <dale> mike18: Seems good.
[02:30:21] *** Joins: dschk (~dschk@244.102.83.34.bc.googleusercontent.com)
[02:30:23] <graingert> nubonix: you don't need it
[02:30:36] <dale> mike18: Test afterwards with ping or something.  (Not host nor nslookup nor dig.)
[02:30:40] <mike18> ok
[02:30:40] <graingert> But it's good to set it when you're allowed to, and very bad to set it when you're not
[02:30:59] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[02:31:03] <graingert> nubonix: it's because verify doesn't open or close any resources
[02:31:05] <dale> mike18: In the future I think #linux or someone else might be even more helpful than #python with these sorts of questions. :)
[02:31:10] <mike18> oh
[02:31:16] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Quit: gildasio)
[02:31:19] <graingert> It just runs some C function in a completely isolated rat
[02:31:22] <graingert> way*
[02:31:25] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Read error: Connection reset by peer)
[02:31:32] <nubonix> graingert ok, so cancellable is only i/o operations
[02:31:39] <nubonix> kamsmfdaksdf
[02:31:43] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[02:31:44] <nubonix> not i/o operations*
[02:31:49] <SnoopJ> dale, the tone. I don't mind the format, and the recommendation doesn't really change anything for me because I mostly write single-module stuff :) (I find the reasoning for not-single-module solid)
[02:31:56] <nomic> is there a quick way to get dict2 = sample of 1000 of dict1
[02:31:57] <graingert> nubonix: it depends
[02:32:10] <nubonix> graingert >.>
[02:32:20] <graingert> nubonix: like nslookup is fine but that does IO, but that's because it's special
[02:32:24] *** Joins: Fluxx (~Fluxx@user/fluxx)
[02:32:29] *** Joins: zeenk (~zeenk@2a02:2f04:a106:9600:82fb:aed9:ca9:38d3)
[02:32:42] <nubonix> graingert can i get a typically not i/o operations then?
[02:32:51] <dale> nomic: dict2 = {k: dict1[k] for k in random.sample(dict1, 1000)}
[02:33:02] *** Joins: chowmeined (~chowmeine@user/chowmeined)
[02:33:06] <graingert> nubonix: It depends
[02:33:09] <nubonix> ha
[02:33:14] <nubonix> alright
[02:33:21] <SnoopJ> equivalent spelling: `dict2 = dict(random.sample(dict1.items(), k=1000))`
[02:33:26] <nomic> ok
[02:33:37] <mike18> s it possible to map hostname1 to hostname2 in /etc/hosts ? i have some old code which stats stats (statsd) to hostname1, but hostname1 is not available any more. i want to find a way that it gets forwarded to hostname2 ... would i need to do something like that?
[02:33:48] <mike18> sorry wrong channel :)
[02:35:08] *** Quits: northernsage (northernsa@gateway/vpn/protonvpn/northernsage) (Quit: Leaving)
[02:35:50] *** Joins: dre (~dre@2001:8003:c932:c301:5158:163a:41f3:cc10)
[02:35:54] <SnoopJ> Python Weekly newsletter is feeling ambitious this week I guess: "What’s New In Python 3.11"
[02:36:00] <graingert> nubonix: you can set the flag anywhere you'd be ok with someone randomly inserting an os._exit() in the middle of your code
[02:36:05] *** Quits: raxor2k (~raxor2k@78.158.254.246) ()
[02:36:08] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[02:36:19] <nubonix> graingert ok, i can understand that
[02:36:26] <nubonix> grasp*
[02:36:33] <dre> little worried about the rapid release cycles :\ but I can get why it's happening
[02:36:40] *** Joins: dobox (~dobox@138.197.11.208)
[02:37:35] <SnoopJ> dre, why does an annual release cycle worry you?
[02:37:55] <dre> that I'm getting older and time is moving too fast now
[02:40:33] *** Joins: warreur (~warreur@user/warreur)
[02:41:33] *** Quits: dobox (~dobox@138.197.11.208) (Client Quit)
[02:42:44] *** Quits: Sheilong (uid293653@id-293653.charlton.irccloud.com) ()
[02:45:34] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 252 seconds)
[02:45:43] <dale> Can I ask if Poetry is still reasonably well-liked without starting a fight?  Cf. pipenv for example.
[02:47:02] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::2f4b) (Quit: Konversation terminated!)
[02:47:02] <SnoopJ> dale, it definitely still has a user-base, yea
[02:47:03] <dale> I'm running into yet more Python packaging tools today, entirely accident.  I saw "build" and "flit" today so far.
[02:47:28] *** Quits: baldr333 (~baldr333@modemcable034.69-70-69.static.videotron.ca) (Quit: Client closed)
[02:47:39] <SnoopJ> yea, flit is one of the new kids, and seems well liked by #python regulars who have been on the bleeding edge of PEP 517/518
[02:48:07] <SnoopJ> huh, it's less new than I thought
[02:48:13] *** Joins: dobox (~dobox@138.197.11.208)
[02:50:56] *** Quits: Lando-SpacePimp (~LandoC@user/lando-spacepimp) (Ping timeout: 258 seconds)
[02:51:42] *** Quits: y1n (~y1n@84-115-65-238.wifi.dynamic.surfer.at) (Ping timeout: 258 seconds)
[02:51:44] *** Joins: sn1tch3r (~sn1tch3r@201-27-147-42.dsl.telesp.net.br)
[02:52:22] <dale> I opened and scrolled through PEP 517 and 518.  My brain opted not to read them.
[02:52:50] *** Joins: sgt_chuckles (~sgt_chuck@pool-71-190-209-205.nycmny.fios.verizon.net)
[02:53:16] <dale> Enscons, there's another one that's new to me.
[02:53:27] *** Joins: y1n (~y1n@84-115-65-218.wifi.dynamic.surfer.at)
[02:54:18] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[02:55:08] *** Quits: zeenk (~zeenk@2a02:2f04:a106:9600:82fb:aed9:ca9:38d3) (Quit: Konversation terminated!)
[02:55:32] <SnoopJ> dale, the short version: those PEPs establish a distinction between build frontends (which eat source and spit out wheels) and build backends (which do the actual building of those wheels).
[02:55:52] <dale> SnoopJ: Oh, thanks a lot for the summary, then.  That's comprehensible.
[02:56:03] <dale> I gathered the stuff I was supposed to set in pyproject.toml (which Poetry did for me anyway).
[02:56:07] <SnoopJ> They also define "integration frontends" as things that eat requirements and try to modify the environment
[02:56:36] *** Joins: DaNeenjah (~jake@162.sub-72-105-217.myvzw.com)
[02:56:37] *** Quits: clawh (~clawh@185.244.214.60) (Remote host closed the connection)
[02:57:28] <SnoopJ> and define the format of that file blah blah. They're good reading, but very dense :)
[02:58:12] <SnoopJ> the takeaway is that Python packaging is at another big inflection point, and the ecosystem of interoperable tools will likely get richer because of these formalizations.
[02:58:48] *** Quits: reset (~reset@user/reset) (Ping timeout: 255 seconds)
[02:58:48] <dale> I'm glad to hear that.
[02:59:27] <Jin^eLD> I don't get it hmm. when I invoke a callback into python from C via CFFI: #0  0x00007ffff7b0b36c in new_threadstate (interp=0x0, init=init@entry=1) at Python/pystate.c:613
[02:59:34] <Jin^eLD> interpreter is NULL
[02:59:44] <Jin^eLD> and thats not my code
[03:00:01] <Jin^eLD> am I hitting some CFFI issue or am I using it incorrectly?
[03:00:37] <Jin^eLD> not sure how to find out
[03:01:25] *** Joins: urandom3000 (~urandom30@172.58.99.24)
[03:01:39] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Ping timeout: 244 seconds)
[03:03:23] *** Joins: dogdisaster (dogdisaste@gateway/vpn/protonvpn/dogdisaster)
[03:03:24] <Jin^eLD> you are allowed to have the interpreter running on its own thread which is not the main thread, right?
[03:03:30] <Jin^eLD> talking CFFI embedding here
[03:04:41] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[03:06:12] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[03:06:37] *** Quits: dogdisaster (dogdisaste@gateway/vpn/protonvpn/dogdisaster) (Remote host closed the connection)
[03:07:47] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[03:07:49] *** Joins: dogdisaster (dogdisaste@gateway/vpn/protonvpn/dogdisaster)
[03:08:55] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[03:10:57] *** Quits: Linux77 (~kvirc@66-183-233-186.raimax.com.br) (Ping timeout: 255 seconds)
[03:11:10] *** Joins: Naan (~naan@user/naan)
[03:11:54] * dale stumbles into https://packaging.python.org/key_projects/
[03:12:00] *** Joins: trace987 (~trace@91.66.152.136)
[03:13:39] *** Joins: Lando-SpacePimp (~LandoC@user/lando-spacepimp)
[03:17:41] *** Quits: plastico (~plastico@2001:8a0:de6b:1a00:9d14:766e:70a8:dcea) (Quit: WeeChat 3.2)
[03:22:44] *** Quits: Deesl (~bsdboy@redhat/psirt/Deesl) (Quit: My Mac Pro has gone to sleep. ZZZzzz…)
[03:23:23] *** Joins: jazzy (~jaziz@2600:380:c07e:8a82:9884:b8b5:d3c:5188)
[03:23:44] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 255 seconds)
[03:24:18] <graingert> SnoopJ: There's also secret pep 621 support
[03:27:38] <habnabit_> Jin^eLD, can you show all the context you've got? i.e. embedding def, exported header file, C code calling the functions, backtrace..
[03:29:53] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:30:17] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[03:30:45] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Client Quit)
[03:30:45] *** Quits: ilmostro (~ilmostro@user/ilmostro) (Quit: WeeChat 3.0.1)
[03:31:39] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[03:31:48] *** Joins: rpkilby_ (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[03:32:17] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 255 seconds)
[03:32:45] *** Quits: mike18 (~geri@216.200.232.252) (Remote host closed the connection)
[03:34:01] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[03:34:49] *** Quits: mnemonic (~semeion@user/semeion) (Ping timeout: 268 seconds)
[03:35:26] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 268 seconds)
[03:35:46] <dale> Poetry scripts support seems annoying.
[03:36:01] <SnoopJ> dale, what do you mean by scripts support?
[03:36:44] <dale> SnoopJ: tool.poetry.scripts to basically do something analogous to setuptools console_scripts entry point (IIUC): https://python-poetry.org/docs/pyproject/#scripts
[03:37:13] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[03:37:38] <SnoopJ> Jin^eLD, the full dump would be useful to look at, but the message about the NULL suggests to me that some initialization step is getting missed
[03:38:00] *** Quits: darksun (~darksun@user/darksun) (Remote host closed the connection)
[03:38:33] <Jin^eLD> habnabit_: OK I'll prepare something complete that compiles; so far I have the impression that its thread related, i.e. if python was initialized in thread B and the callback comes in from thread C, both threads started from the main thread
[03:39:21] <Jin^eLD> in this constellation I have no issues calling from python into the app
[03:39:43] <Jin^eLD> but app->python seems to crash
[03:39:45] <Jin^eLD> SnoopJ: ack
[03:41:00] *** Quits: sn1tch3r (~sn1tch3r@201-27-147-42.dsl.telesp.net.br) (Remote host closed the connection)
[03:41:24] *** Joins: sn1tch3r (~sn1tch3r@201-27-147-42.dsl.telesp.net.br)
[03:42:03] *** Joins: clawh (~clawh@185.244.214.60)
[03:47:12] *** Joins: mnemonic (~semeion@user/semeion)
[03:48:31] *** Quits: cedric (~cedric@2a01:cb11:867:c200:1caf:3a0f:290e:7269) (Quit: Konversation terminated!)
[03:48:59] <Jin^eLD> habnabit_, SnoopJ: one question, I got an idea while I was preparing the example... suppose I have a script that registers to a callback... does the registration "keep it alive"? or does the script simply exit?
[03:49:38] <Jin^eLD> basically like the Widget example here: https://cffi.readthedocs.io/en/latest/using.html#callbacks
[03:50:22] <Jin^eLD> I almost suspect that the script runs through and exits, but the C part is not aware of that and tries to call the callback and of course then there is no interpreter...
[03:50:32] *** Joins: Sasazuka__ (~Sasazuka@user/sasazuka)
[03:50:38] *** Joins: akaWolf (~akaWolf@akawolf.org)
[03:50:50] *** Joins: pnoud (~pnoud@user/pnoud)
[03:51:55] *** Quits: y1n (~y1n@84-115-65-218.wifi.dynamic.surfer.at) (Ping timeout: 246 seconds)
[03:51:59] <Jin^eLD> holy crap thats exactly it
[03:52:00] *** Quits: dogdisaster (dogdisaste@gateway/vpn/protonvpn/dogdisaster) (Quit: Leaving)
[03:52:18] <Jin^eLD> if I add a while True sleep(1) loop it works
[03:52:19] *** Quits: Sasazuka (~Sasazuka@user/sasazuka) (Ping timeout: 265 seconds)
[03:52:31] *** Joins: y1n (~y1n@84-115-64-174.wifi.dynamic.surfer.at)
[03:53:10] <Jin^eLD> so what's the "correct" way of ensuring that scripts which subscribe to some async callbacks remain without implementing endless loops in the script itself?
[03:54:46] *** Quits: zathras (~zodd@84-106-62-193.cable.dynamic.v4.ziggo.nl) (Remote host closed the connection)
[03:55:41] *** Joins: p-i-_ (~Ohmu@node-183p.pool-118-173.dynamic.totinternet.net)
[03:56:24] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 268 seconds)
[03:56:24] *** Quits: p-i- (~Ohmu@node-o6x.pool-118-173.dynamic.totinternet.net) (Ping timeout: 255 seconds)
[03:58:09] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564)
[04:02:10] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[04:03:28] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564) (Ping timeout: 246 seconds)
[04:03:29] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[04:04:16] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 272 seconds)
[04:04:33] <Jin^eLD> I read that in the "old style" this was done via the @ffi.callback decorator
[04:04:42] <Jin^eLD> I am using the extern "Python" thing though
[04:04:50] *** Joins: leonardus (sid358597@id-358597.tinside.irccloud.com)
[04:05:54] *** Quits: y1n (~y1n@84-115-64-174.wifi.dynamic.surfer.at) (Remote host closed the connection)
[04:06:04] *** Quits: fedenix_ (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[04:08:16] *** Quits: imp (~imp@186.205.11.214) (Quit: imp)
[04:09:49] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[04:10:56] *** Quits: qlixed (~qlixed@152.170.36.244) (Remote host closed the connection)
[04:17:19] *** Quits: mwichmann (~mats@209-188-119-117.taosnet.com) (Remote host closed the connection)
[04:19:40] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 244 seconds)
[04:21:29] *** Quits: Norore (~weechat@2a01:e0a:23a:5600:b9d3:ae19:12de:25b) (Quit: WeeChat 3.2)
[04:22:13] <Jin^eLD> nite :>
[04:22:20] <habnabit_> Jin^eLD, erm? your conclusion is a bit off..
[04:22:22] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Quit: quit)
[04:22:25] <habnabit_> Jin^eLD, but i suppose you're gone for now
[04:22:28] <Jin^eLD> not yet
[04:22:45] <habnabit_> Jin^eLD, you don't need a 'running' python to make callbacks into it
[04:23:07] <Jin^eLD> then why does an endless while loop at the end of the python script or a signal.pause() fixes the crash?
[04:23:33] <SnoopJ> Jin^eLD, are you still trying to troubleshoot the crash from earlier? It would really help us help you if we could see the complete error report...
[04:23:38] <habnabit_> Jin^eLD, with no context, i couldn't say. that's doing something else which appears to manifest the thing you said
[04:23:56] <SnoopJ> and yes, richer context (a minimal reproduction, say) would help us help you even more
[04:24:21] *** Quits: hendursaga (~weechat@user/hendursaga) (Quit: hendursaga)
[04:24:22] <Jin^eLD> SnoopJ: I was preparing an example proggy for minimal reproduction when it "occured to me" :)
[04:24:29] <Jin^eLD> and then when I tried it out I thought thats the reason and the solution
[04:24:46] <Jin^eLD> but if you guys say that it actually should have worked without forcing the script into a loop, then I guess its still worth to finish that example
[04:25:13] <habnabit_> Jin^eLD, that is correct yes
[04:25:50] <SnoopJ> Jin^eLD, we can't really act on what's been presented so far, so I think that would be the best way to resolve the issue, yep
[04:25:59] *** Quits: bilb_ono (~alexmarsh@12.190.239.194) (Quit: bilb_ono)
[04:26:07] *** Joins: hendursaga (~weechat@user/hendursaga)
[04:26:14] *** Joins: bilb_ono (~alexmarsh@12.190.239.194)
[04:26:31] *** Joins: semeion (~semeion@user/semeion)
[04:26:31] *** mnemonic is now known as Guest3255
[04:26:45] <SnoopJ> Additional incentive: I find that I learn quite a lot when constructing examples of this sort when debugging tricky SWIG. Not exactly the same thing, but the same principle applies: this could be a good "how that works" study sample for you.
[04:27:16] *** Joins: Wulf4 (~Wulf@user/wulf)
[04:27:26] *** Joins: bloodninja (~bloodninj@user/bloodninja)
[04:27:27] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 255 seconds)
[04:28:10] *** Quits: entuland (~entuland@user/entuland) (Quit: Leaving)
[04:29:15] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 255 seconds)
[04:29:42] *** Quits: Guest3255 (~semeion@user/semeion) (Ping timeout: 255 seconds)
[04:29:44] *** Joins: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[04:29:53] *** Quits: urandom3000 (~urandom30@172.58.99.24) (Ping timeout: 255 seconds)
[04:29:54] *** Joins: khile (cacambo@triton.blinkenshell.org)
[04:30:52] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 272 seconds)
[04:30:52] *** Wulf4 is now known as Wulf
[04:31:47] *** Joins: ilmostro (~ilmostro@user/ilmostro)
[04:32:24] *** Quits: flyback (~flyback@2601:540:8201:1e60:6105:a6f1:3967:8896) (Ping timeout: 255 seconds)
[04:34:43] *** Quits: bilb_ono (~alexmarsh@12.190.239.194) (Quit: bilb_ono)
[04:40:03] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[04:40:28] *** Quits: Sasazuka__ (~Sasazuka@user/sasazuka) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:40:52] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[04:41:06] *** Quits: Naan (~naan@user/naan) (Quit: Leaving)
[04:41:47] *** Joins: wyclif (~wyclif@user/wyclif)
[04:43:33] *** Joins: flyback (~flyback@2601:540:8201:1e60:820:54fd:57eb:5b6)
[04:44:23] *** Joins: mwichmann (~mats@209-188-119-117.taosnet.com)
[04:45:08] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[04:45:39] *** Joins: Deesl (~bsdboy@redhat/psirt/Deesl)
[04:46:00] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[04:47:11] *** Quits: jdmark (~jdmark@67.8.137.130) (Read error: Connection reset by peer)
[04:48:31] *** Joins: martums (~martums@user/martums)
[04:49:06] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[04:50:37] *** Quits: DaNeenjah (~jake@162.sub-72-105-217.myvzw.com) (Quit: WeeChat 3.2)
[04:51:03] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3-dev)
[04:52:24] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Ping timeout: 272 seconds)
[04:53:00] *** Joins: jdmark (~jdmark@67.8.137.130)
[04:53:43] *** Quits: Blackpajamas (~Blackpaja@24-246-42-203.cable.teksavvy.com) (Quit: Blackpajamas)
[04:54:06] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[04:55:24] *** Joins: Blackpajamas (~Blackpaja@24-246-42-203.cable.teksavvy.com)
[04:57:17] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[04:58:31] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:59:01] <lexandrop> I'll try to repeat my squestion, just in case. I'm having troubles with official mysql.connector . They have "new" "mysql.connector", but I need to escape some strings before storing them, and looks like escape function ("escape_string") exists only in "old" implementation - "_mysql_connector". Maybe someone knows, how to convert/escape strings with modern "mysql.connector"?
[04:59:11] <lexandrop> ... related to my question above: https://dev.mysql.com/doc/connector-python/en/connector-python-api-cext-escape-string.html - is the thing I am looking for. And I can't find any other implementation of this thing so far (except for, like, http://mysql-python.sourceforge.net/MySQLdb.html )
[04:59:22] *** Joins: ovnicraft (~ovnicraft@179.49.44.28)
[04:59:48] <FunkyBob> lexandrop: why can't you let the DB adapter escape them as it normall would?
[05:00:00] <FunkyBob> normally, even
[05:00:05] <habnabit_> lexandrop, you don't normally need escape_string at all
[05:00:11] <FunkyBob> why must you escape them yourself?
[05:00:23] <habnabit_> lexandrop, it's not something a python program would need
[05:00:44] <FunkyBob> typically y ou would use cursor.execute("INSERT INTO .... VALUES (%s, %s)", ['some value', 2])
[05:00:48] <FunkyBob> and it will take care of the rest
[05:00:54] *** Joins: i0e (~is0ke3@user/is0ke3)
[05:01:00] <habnabit_> mysql.connector might use ?
[05:01:12] <FunkyBob> yes, possibly different placeholders than %s
[05:01:31] <FunkyBob> the adapter should tell you, too... nice interface detail that
[05:02:02] <FunkyBob> https://www.python.org/dev/peps/pep-0249/#paramstyle
[05:03:30] <FunkyBob> habnabit_: I think we may have overwhelmed them :(
[05:03:34] *** Quits: bloodninja (~bloodninj@user/bloodninja) (Read error: Connection reset by peer)
[05:03:40] <habnabit_> oh
[05:03:48] *** Joins: lidless (jessy@user/jabberwock)
[05:03:50] *** Quits: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com) (Read error: Connection reset by peer)
[05:07:37] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 245 seconds)
[05:07:50] <Jin^eLD> habnabit_: https://github.com/jin-eld/cffi-callback-test
[05:07:54] <Jin^eLD> SnoopJ: ^^^
[05:08:17] <habnabit_> Jin^eLD, i'll build it in a moment
[05:08:24] <Jin^eLD> thank you
[05:09:25] *** Quits: rpkilby_ (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Remote host closed the connection)
[05:10:01] <lexandrop> Holy... I wasted all evening because I was trying to write dict (in json format) to MySQL as a string, and got wrong syntax error. So I thought it was escaping issue. Until now I finally tried to use simple string instead of string, found out issue still exists, and found out I forgot to put space in my "INSERT INTO" statement before "VALUES" keyword ...
[05:10:29] <lexandrop> *tried to use simple string instead of **dict**
[05:10:33] <habnabit_> lexandrop, we're good at finding those issues too
[05:11:37] <lexandrop> I'm a bit sad now. On the other hand, today I learned. To check basic things before diving deep into new technologies, I guess :D
[05:11:53] <lexandrop> habnabit_, FunkyBob - thank you guys
[05:12:01] <habnabit_> Jin^eLD, i see a few issues with your code already without building it
[05:12:19] <lidless> lexandrop: I recommend using prepared statements if this is some automated thing
[05:12:28] <Jin^eLD> maybe I stripped down too much, but indeed there is no cleanup and stuff like that
[05:12:38] *** Joins: bilb_ono (~alexmarsh@12.190.239.194)
[05:12:40] <habnabit_> Jin^eLD, i don't mean that kind of issue
[05:12:46] <habnabit_> Jin^eLD, i mean i see the cause of your problem
[05:12:47] <Jin^eLD> I am all ears )
[05:13:05] <Jin^eLD> or rather, eyes in the IRC sense...
[05:13:07] <Jin^eLD> :>
[05:13:26] <lidless> Dont break the 4th wall!
[05:13:29] <habnabit_> Jin^eLD, first, using cffi embedding means you _never_ #include Python.h
[05:14:06] <Jin^eLD> uhm
[05:14:10] <Jin^eLD> so how do I run the script then?
[05:14:21] <habnabit_> Jin^eLD, second, your issue is that you didn't run script.py. you probably meant to set that as the embedding_init_script
[05:14:36] *** Quits: bilb_ono (~alexmarsh@12.190.239.194) (Client Quit)
[05:15:11] <Jin^eLD> I did not get the second part, could you please elaborate
[05:15:12] <habnabit_> Jin^eLD, embedding_init_code https://cffi.readthedocs.io/en/latest/embedding.html
[05:15:24] <Jin^eLD> oh one sec
[05:15:37] <Jin^eLD> reading the link again, I know I was there already
[05:16:02] <habnabit_> Jin^eLD, your embedding_init_code needs to be the part that calls @ffi.def_extern for every extern "Python" slot
[05:16:10] <Jin^eLD> habnabit_: but thats "init code", I do not have an init code, I have scripts that users are supposed to be able to upload?
[05:16:20] <Jin^eLD> althoiugh OK, this is the wrapper code
[05:16:22] <Jin^eLD> you're right
[05:16:28] <Jin^eLD> thats not actually user stuff
[05:16:43] <lexandrop> lidless: thanks, I'll consider it, but in my case I don't expect both high query numbers and/or potential injections (cuz I don't get any input and I don't work with critical data), so I guess I'm fine with regular statements
[05:16:47] <habnabit_> Jin^eLD, so, this exactly is what i suspected: the problem is nothing ever ran the @ffi.def_extern
[05:16:49] <Samian>   <SnoopJ> Samian, do they resolve your question(s)? <-- yes.   grym answered my question.  Environments don't manage drivers conflicts between packages
[05:17:02] <Jin^eLD> habnabit_: OK, understood
[05:17:30] <SnoopJ> Samian, there isn't a driver conflict here at all unless you have two programs that use features from incompatible compute levels
[05:17:42] <Jin^eLD> habnabit_: how does the script get run at all and how does the cb_test module get defined if I am not supposed to use Python.h ?
[05:18:01] <habnabit_> Jin^eLD, you set it as your embedding_init_code
[05:18:19] <SnoopJ> but yes, if you did have some hypothetical conflict, nothing short of a thing messing with your OS would "resolve" the conflict, and probably not satisfactorily; you'd be running one program under its requisite driver for a bit, then the other under the other driver, kind of at best.
[05:18:22] <habnabit_> Jin^eLD, but remember that it's basically just bootstrapping: it can import anything else and do more elaborate code
[05:18:24] <Jin^eLD> huh? but embedding init code is python
[05:18:25] <lidless> lexandrop: no one really expects sql injection :D
[05:18:32] <Jin^eLD> not C
[05:18:34] <SnoopJ> (or just get two GPUs and have separate drivers 😬)
[05:18:48] <habnabit_> Jin^eLD, yep. your embedding init code runs exactly once at init time
[05:19:05] <habnabit_> Jin^eLD, and it can set up callbacks for C code to call into
[05:19:24] <Jin^eLD> habnabit_: wait, but who initializes the python interpreter then?
[05:19:26] <Jin^eLD> cffi?
[05:19:52] <Jin^eLD> i.e. I am supposed to ditch     PyConfig_SetBytesString(&config, &config.run_filename, "./script.py");
[05:20:05] <Jin^eLD> and try to run that from embedding init code?
[05:20:11] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[05:20:56] <SnoopJ> "that?"
[05:21:05] *** Joins: t3nj1n (~t3nj1n@108.5.82.237)
[05:21:13] <SnoopJ> Jin^eLD, do you understand what embedding_init_code does after reading the link they shared?
[05:21:20] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[05:21:53] <Jin^eLD> SnoopJ: I read the link several times already, not only today, and still did implement it correctly
[05:22:01] <Jin^eLD> did not implement it correctly
[05:22:03] <Jin^eLD> :P
[05:22:04] <SnoopJ> Jin^eLD, that is not an answer to my question
[05:22:34] *** Quits: emerent (~quassel@p200300cd5721e6ccba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[05:22:45] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.2)
[05:23:59] *** Joins: emerent (~quassel@p200300cd57058cd4ba27ebfffed28a59.dip0.t-ipconnect.de)
[05:24:14] <habnabit_> Jin^eLD, yes, cffi initializes everything. the C user doesn't see any part of it
[05:24:14] <Jin^eLD> SnoopJ: I am not entirely sure :) it says it freezes the code, but this part "At runtime, the code is executed when the DLL is first initialized, just after Python itself is initialized."
[05:24:23] <Jin^eLD> I thought that I am still the one who is supposed to init it
[05:24:41] <habnabit_> Jin^eLD, it's one reason why cffi is so good: automatic, lazy, atomic, thread-safe initialization
[05:24:48] *** Joins: Pseudocrat (~sudo@user/pseudocrat)
[05:25:06] <habnabit_> Jin^eLD, something that people often get wrong with Python.h
[05:25:07] <SnoopJ> Jin^eLD, my understanding is that CFFI does all the "set me up a Python interpreter" for you here.
[05:25:11] <Jin^eLD> habnabit_: what about PyErr_SetString(PyExc_InterruptedError, "terminate") for killing scripts from the C application?
[05:25:26] <SnoopJ> That...doesn't look right?
[05:25:34] <habnabit_> Jin^eLD, i'm not sure what you mean by that
[05:25:42] <lexandrop> lidless: fair enough :)
[05:25:43] <Jin^eLD> habnabit_: if I need to kill a python script
[05:25:50] <SnoopJ> habnabit_, I think they want to interrupt execution of the embedded thingy
[05:25:50] <Jin^eLD> i.e. the one that runs embedded in my application
[05:25:58] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 272 seconds)
[05:26:03] <Jin^eLD> how would I do that with cffi?
[05:26:12] <Jin^eLD> SnoopJ: yes, exactly
[05:26:13] <habnabit_> Jin^eLD, what, from another thread?
[05:26:24] *** Quits: Pseudocrat (~sudo@user/pseudocrat) (Client Quit)
[05:26:36] <SnoopJ> Jin^eLD, so you are totally clear on embedding_init_code now and we're moving to another topic?
[05:26:47] *** Joins: Pseudocrat (~sudo@user/pseudocrat)
[05:27:14] *** Quits: hposca (~hposca@node-1w7jr9phoke2u632r204jfqzz.ipv6.telus.net) (Ping timeout: 250 seconds)
[05:27:16] <Jin^eLD> SnoopJ: I will try it out, but I think my mistake was in not understanding that the embedding part was doing _everything_ for me
[05:27:28] *** Joins: reset (~reset@user/reset)
[05:27:30] <Jin^eLD> SnoopJ: so I'd say yes, its clear now
[05:27:30] <SnoopJ> Jin^eLD, does that mean "yes?"
[05:27:32] <SnoopJ> okay
[05:28:45] *** kevr is now known as GaKu666
[05:29:03] <Jin^eLD> habnabit_: that's a good question now, since cffi runs this thing... somewhere..?
[05:29:46] <habnabit_> Jin^eLD, no, the python is run in the same thread as the C code was
[05:29:58] <habnabit_> Jin^eLD, but what were you doing before? using a separate thread?
[05:30:04] *** GaKu666 is now known as kevr
[05:30:08] <SnoopJ> clarification: that would be the C code that invokes CFFI, right?
[05:30:10] *** Joins: bilb_ono (~alexmarsh@12.190.239.194)
[05:30:20] <SnoopJ> (in this case I guess calling the generated callback)
[05:30:26] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:30:33] *** Joins: derelict (~derelict@user/derelict)
[05:30:49] <Jin^eLD> habnabit_: in my example where I thought that I need to init python myself I do it in an own thread so that it does not block the actual application
[05:31:05] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-b842-d119-7737-43fd.res6.spectrum.com) (Read error: Connection reset by peer)
[05:31:15] <Samian> SnoopJ yeah you're point is that my question is irrelevant. Either answer (yes/no) doesn't make a difference
[05:31:29] <habnabit_> Jin^eLD, ok, so how did you signal an exception between threads before?
[05:31:44] <Samian> irrelevant in regard to CUDA I mean
[05:31:59] <SnoopJ> Samian, it's a good question, though
[05:32:09] <Jin^eLD> habnabit_: via Py_AddPendingCall() to a function thaht would in turn execute PyErr_SetString(PyExc_InterruptedError, "blah")
[05:32:15] <SnoopJ> it can be really tricky to keep the different domains of knowledge separate, *especially* with Torch
[05:32:15] *** Quits: _0az (~az0@user/az0) (Read error: Connection reset by peer)
[05:32:15] *** Quits: kouhai (~kouhai@user/kouhai) (Read error: Connection reset by peer)
[05:32:42] <Samian> I thought docker can do it though
[05:32:50] <SnoopJ> "it?"
[05:33:00] <Samian> is there a word for what I'm talking about? virtual envirements for drivers
[05:33:07] *** Joins: _0az (~az0@user/az0)
[05:33:12] *** Joins: kouhai (~kouhai@user/kouhai)
[05:33:33] <Samian> by it I mean make drivers akin to conda environments where you can load in what you need. hot swappable drivers so to speak
[05:33:49] <SnoopJ> you could maybe do it with VMs, but with Docker you get a pass-through to the host usually
[05:34:14] <habnabit_> Jin^eLD, i see
[05:34:15] <SnoopJ> and we need to be careful to distinguish between CUDA compute level and driver version here
[05:34:19] *** Joins: vlm (~vlm@user/vlm)
[05:34:39] <SnoopJ> because again: there's a lot of backward compatibility, a driver that supports CUDA 11.1 probably supports most (all? idk) of 10.2
[05:34:43] <Jin^eLD> habnabit_: not saying this was correct, kinda went trial and error there, but it worked
[05:34:44] *** Joins: furrykef (~furrykef@ip68-229-199-137.ok.ok.cox.net)
[05:34:47] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 265 seconds)
[05:35:13] *** Quits: kouhai (~kouhai@user/kouhai) (Read error: Connection reset by peer)
[05:35:13] *** Quits: _0az (~az0@user/az0) (Read error: Connection reset by peer)
[05:35:27] <Jin^eLD> then I'd deinit the interpreter and reload with a new script without interrupting the main application
[05:35:29] *** Joins: _0az (~az0@user/az0)
[05:35:35] *** Joins: kouhai (~kouhai@user/kouhai)
[05:35:48] <Jin^eLD> idea was to be able to exchange scripts at runtime
[05:37:10] *** Joins: sharperguy_ (~sharpergu@2001:16b8:5c68:e100:3314:b2f6:65ff:8c17)
[05:37:44] *** Joins: pete443 (~pete@user/pete443)
[05:38:33] <Jin^eLD> SnoopJ: once again on embedding, to make sure I got that right - when they write "At runtime, the code is executed when the DLL is first initialized" they actually mean C code calling "extern PyMODINIT_FUNC PyInit_cb_test();" ?
[05:38:47] <Jin^eLD> since I link the generated code into the app there is no "dll"
[05:38:49] *** Quits: bilb_ono (~alexmarsh@12.190.239.194) (Quit: bilb_ono)
[05:39:07] <SnoopJ> Jin^eLD, that's talking about libpython I think
[05:39:13] *** Quits: pete443_ (~pete@user/pete443) (Ping timeout: 258 seconds)
[05:39:25] <Jin^eLD> oh hm
[05:39:33] <Jin^eLD> does that mean I can not control when the init code is being run?
[05:39:38] *** Quits: sharperguy (~sharpergu@2001:16b8:5cd5:6a00:854b:e13d:44fe:55de) (Ping timeout: 255 seconds)
[05:40:08] <SnoopJ> I don't know the exact spelling in the C-API, but you have the gist of the idea right: once CFFI has finished the set-up for your embedded interpreter, it runs the Python you handed it and "freezes" the result into the runtime
[05:40:37] <habnabit_> Jin^eLD, raising an exception like that can leave things in a questionable state.. i'm not sure i've needed to abort things quite so urgently
[05:41:02] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[05:41:02] <SnoopJ> probably especially if you're calling back out across the FFI boundary
[05:41:05] <Jin^eLD> habnabit_: questionable state was not an issue, because the interpreter got cleaned up completely and reinitialized anew...
[05:41:14] <furrykef> So I'm trying to make a search index that accepts variant spellings of a word. For example, "cierran" might be any of "cirran", "cyrran", "cierron", "cirron", or "cyrron".
[05:41:21] <habnabit_> Jin^eLD, yeesh
[05:41:29] <furrykef> I know I can use recursive descent to do this, but I'm wondering if maybe there's a specific tool I can use?
[05:41:33] *** Quits: lidless (jessy@user/jabberwock) (Ping timeout: 265 seconds)
[05:41:41] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[05:41:57] <habnabit_> Jin^eLD, yeah that is .. not exactly a use case that cffi has attempted to court
[05:42:22] <Jin^eLD> habnabit_: are you now telling me that my cffi adventure has been... for nothing? :)
[05:42:26] *** Joins: CodePoint (~BitShift@2600:1700:3070:3790::29)
[05:42:43] <habnabit_> Jin^eLD, if your use case requires frequent deinit and reinit, maybe
[05:42:58] <SnoopJ> furrykef, are those various spellings of a name, or alternative (folk?) spellings of a noun?
[05:43:00] <Jin^eLD> habnabit_: my use case requires being able to reload user scripts
[05:43:01] *** Joins: byzandula (~byzandula@beerbq.net)
[05:43:15] <Jin^eLD> habnabit_: and global vars and such set by a former script must not survive
[05:43:25] <Jin^eLD> i.e. new user script - clean slate
[05:44:10] <furrykef> SnoopJ: This is for my Old English dictionary: http://oedict.furrykef.com/
[05:44:15] <grym> furrykef: do you have a canonical list of "all these strings point to the same thing", or do you need a way to say "if whatever you typed is close enough to X, we'll use X"
[05:44:18] <furrykef> Basically, Old English orthography is horrifically inconsistent.
[05:44:25] <grym> furrykef: ok probably the second, given .. yeah
[05:44:29] *** Quits: _0az (~az0@user/az0) (Remote host closed the connection)
[05:44:29] *** Quits: kouhai (~kouhai@user/kouhai) (Remote host closed the connection)
[05:44:39] <grym> i found a recipe that spelled 'chicken' 7 ways in 4 sentences once...
[05:44:40] <Jin^eLD> habnabit_: please don't tell me something like that is not possible with cffi? :>
[05:44:42] <furrykef> Yeah, but I want specific rules for "close enough"
[05:44:55] *** Joins: _0az (~az0@user/az0)
[05:45:01] *** Joins: kouhai (~kouhai@user/kouhai)
[05:45:01] <SnoopJ> furrykef, you could compute an edit distance between candidates
[05:45:10] <SnoopJ> the `fuzzywuzzy` library is great at that
[05:45:24] <furrykef> Ehh, I don't like that solution
[05:45:29] <SnoopJ> can you explain why
[05:45:42] <habnabit_> Jin^eLD, you can reload user scripts in python without reiniting.. reiniting might have gotten less janky, but it used to leak memory on every reinit
[05:45:45] <furrykef> Because it might match things that shouldn't match just because they look vaguely similar
[05:45:54] <grym> edit distance with maybe some extra penalties for beginning/end differences (things that do best local alignment, not always best global), n-gram based approaches...
[05:46:07] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Ping timeout: 258 seconds)
[05:46:11] <SnoopJ> yea you would probably want an edit distance with some heuristics like those ^
[05:46:19] <Jin^eLD> habnabit_: yes, I noticed, actually my buddy even came up with a patch to fix one of the issues, even got accepted
[05:46:55] <grym> putting your thumb on the scales so obviously during edit distance computation is something genetics folks do a lot, but i don't know at all how common it is in NLP
[05:46:56] <Jin^eLD> habnabit_: could you point me to the proper way of "reloading user scripts in python"? what's the mechanism there?
[05:47:01] <SnoopJ> especially for stuff like digraphs (ae <-> æ should probably just be free, for instance)
[05:47:49] <habnabit_> Jin^eLD, is it always just one file?
[05:47:51] <furrykef> I use a normalization function to convert "æ" to "ae"
[05:48:14] <Jin^eLD> habnabit_: actually I am allowing to use a .zip with a __main__.py and whatever else the user wants to put inside to organize their code
[05:48:15] <SnoopJ> does that apply to less exact cases?
[05:48:15] <furrykef> This is for stuff that trivial normalization can't handle
[05:48:16] *** Quits: akk (~akk@97-123-109-214.albq.qwest.net) (Quit: +++)
[05:48:34] <SnoopJ> right, it's similarity
[05:48:48] <SnoopJ> it's hard to do similarity and be "exact" about it because those two concepts are just kinda at odds with each other
[05:49:47] <Jin^eLD> habnabit_: so the naive idea was to run the .zip and when it needs to be replaced, kill the running script, reinit python and run the new one
[05:49:54] <Jin^eLD> but I'm open to suggestions
[05:50:08] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.2)
[05:50:45] *** Quits: hegstal (~hegstal@2a02:c7f:7604:8a00:1608:5ddb:ace2:2fb3) (Ping timeout: 268 seconds)
[05:50:53] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 255 seconds)
[05:50:58] <SnoopJ> furrykef, I guess the bazooka here would be working on phonemes, since Old English doesn't stray all that far there (AFAIK anyway), just orthographic changes.
[05:51:02] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:51:32] *** Joins: bambams (~bambams@user/bambams)
[05:51:33] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[05:51:41] *** Joins: pnoud (~pnoud@user/pnoud)
[05:51:49] *** Joins: djapo (~archangel@user/djapo)
[05:52:39] <furrykef> For instance, "hir" should match "hyr", but it shouldn't match "har", even though both of them are one letter off
[05:52:52] <SnoopJ> this list seems interesting: https://en.wikipedia.org/wiki/Phonetic_algorithm#Algorithms
[05:52:52] <furrykef> OE spelling is chaotic, but it's not completely mad
[05:52:58] <SnoopJ> well, it's English :)
[05:53:04] <habnabit_> Jin^eLD, i can talk to you about this more tomorrow anyway especially if you're trying to go
[05:53:06] <SnoopJ> the rules are made up and so is every other feature
[05:53:07] <grym> ...ish
[05:53:21] <grym> the french hadn't screwed everything up so thoroughly yet :)
[05:53:27] <habnabit_> Jin^eLD, short answer: maybe use exec; maybe use importlib
[05:53:32] <furrykef> Yes, it's Engl-ish ;)
[05:53:34] <grym> ('french')
[05:53:38] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[05:53:48] <SnoopJ> grym, ah yea, hence why they were getting on so well and had a very good and formal system ;)
[05:53:49] <furrykef> Fetchez la vache!
[05:54:05] <SnoopJ> not that formality is good, but you know my rant here (and it's #python-offtopic territory anyway)
[05:54:15] <grym> furrykef: quoi?
[05:54:22] <furrykef> Fetchez la vache !
[05:54:23] <SnoopJ> anyway, I have no concept of how complex a phonetic approach would be, but it does seem to be well-tread ground at lesat.
[05:54:56] *** Quits: Thanatos (~Thanatos@197.210.54.4) (Ping timeout: 258 seconds)
[05:55:17] <grym> furrykef: ahhh, oui oui! ६ൠ͠३
[05:55:49] <Jin^eLD> habnabit_: I'll look into those two, thank you! and yes, would be great if we could continue tomorrow, 3.25 a.m. around here ;)
[05:56:33] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 255 seconds)
[05:57:01] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 265 seconds)
[05:57:10] <Jin^eLD> habnabit_: thank a lot for your help! you too SnoopJ
[05:57:12] <Jin^eLD> nite
[05:57:35] *** Joins: sectec84 (~Guest88@24.18.109.173)
[05:57:36] <SnoopJ> this thesis looks like a nice tour of some techniques for a similar problem (for a later English): https://eprints.lancs.ac.uk/id/eprint/84887/1/2011Baronphd.pdf
[05:58:44] <grym> the name un-i18n thesis i found years ago and have subsequently misplaced was a fun one too
[05:59:44] *** Quits: audiocat (~audio@2603-8081-1800-00ad-4a1d-22ed-5c41-e626.res6.spectrum.com) (Ping timeout: 250 seconds)
[05:59:47] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564)
[06:00:28] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:02:08] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 255 seconds)
[06:02:42] <furrykef> I guess I may just go with the recursive descent method... should be pretty simple to program, now that I think about it
[06:03:38] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 250 seconds)
[06:03:54] *** Quits: tone0 (~tone@071-011-252-111.res.spectrum.com) (Ping timeout: 276 seconds)
[06:04:10] *** Joins: brabrax (~brabrax@user/brabrax)
[06:04:13] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564) (Ping timeout: 246 seconds)
[06:04:14] <SnoopJ> it looks like there are a few implementations of SoundEx on PyPI
[06:04:38] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[06:05:03] *** Quits: xcombelle (~xavie@176-139-252-198.abo.bbox.fr) (Read error: Connection reset by peer)
[06:05:31] *** Quits: Vision (~Vision@024-178-231-009.res.spectrum.com) (Read error: Connection reset by peer)
[06:05:33] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 255 seconds)
[06:06:02] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[06:06:03] *** Quits: fofoni (~fofoni@user/fofoni) (Remote host closed the connection)
[06:06:09] *** Quits: dschk (~dschk@244.102.83.34.bc.googleusercontent.com) (Quit: WeeChat 3.0.1)
[06:06:34] *** Joins: tone0 (~tone@071-011-252-111.res.spectrum.com)
[06:06:59] <furrykef> Mm, not sure that's useful...
[06:07:02] <SnoopJ> furrykef, taking `soundex` for a test drive, it definitely is capable of identifying that the above are phonetically similar (although the return value for its compare() is...weird)
[06:07:29] <SnoopJ> but it has plenty of false positives for something that seems easy to get right here ("chair"), so it wouldn't suffice on its own I think
[06:08:08] *** Joins: Vision (~Vision@024-178-231-009.res.spectrum.com)
[06:08:12] *** Quits: shibboleth (~shibbolet@gateway/tor-sasl/shibboleth) (Quit: shibboleth)
[06:08:33] *** Joins: tm007 (uid287041@id-287041.highgate.irccloud.com)
[06:08:46] *** Joins: audiocat (~audio@2603-8081-1800-00ad-02c9-9ca2-5a4a-00f9.res6.spectrum.com)
[06:09:09] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[06:09:20] *** Quits: omegatron (~some@p5484990d.dip0.t-ipconnect.de) (Quit: What happened? You quit!)
[06:10:14] <furrykef> mmm
[06:12:02] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 255 seconds)
[06:12:58] <SnoopJ> double Metaphone seems to do a bit better
[06:13:12] *** Quits: lexandrop (~lex@user/lexandrop) (Ping timeout: 255 seconds)
[06:13:25] *** Quits: ovnicraft (~ovnicraft@179.49.44.28) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:15:38] <SnoopJ> https://bpa.st/OD6A
[06:15:55] *** Quits: ano (~weechat@user/ano) (Ping timeout: 244 seconds)
[06:16:53] <SnoopJ> still think it might be just one component of a heuristic, but maybe paired with an orthographic criterion...?
[06:17:22] <SnoopJ> I don't know enough about Old English to do more than gesture in those directions, but there does seem to be a lot of work on this problem for Early Modern English. I could imagine someone out there is doing it for Old English.
[06:17:35] <SnoopJ> (but probably has less data to throw at training a classifier)
[06:18:12] *** Quits: Hackerpcs (~user@user/hackerpcs) (Quit: Hackerpcs)
[06:19:43] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[06:19:43] *** Joins: ano (~weechat@user/ano)
[06:19:59] *** Quits: Deesl (~bsdboy@redhat/psirt/Deesl) (Quit: My Mac Pro has gone to sleep. ZZZzzz…)
[06:20:03] *** Joins: orbatos (~orbatos@user/orbatos)
[06:21:01] *** Joins: Hackerpcs (~user@user/hackerpcs)
[06:24:46] *** Joins: Deesl (~bsdboy@redhat/psirt/Deesl)
[06:25:59] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 255 seconds)
[06:27:00] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[06:27:04] *** Quits: CodePoint (~BitShift@2600:1700:3070:3790::29) (Quit: Never gonna give you up, never gonna let you down...)
[06:27:17] *** bambams is now known as bam32
[06:30:19] *** Parts: orbatos (~orbatos@user/orbatos) (~^~~~^~)
[06:30:56] <SnoopJ> furrykef, I'm seeing a lot of hits for literature around this project: https://www.nerthusproject.com/  There's a lemmatizer mentioned in many papers called Norna, although it doesn't appear to be publicly available :/
[06:33:55] <SnoopJ> this paper seems to have the most discussion of how it might work: https://dialnet.unirioja.es/descarga/articulo/5646220.pdf
[06:34:23] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:140d:ed4:314d:e507)
[06:34:47] * SnoopJ might be diving in too far
[06:34:48] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 255 seconds)
[06:36:09] <SnoopJ> oh, https://aclanthology.org/W17-7613.pdf is similar, later work I guess
[06:37:32] *** Quits: kmh_ (~kmh@p2e51169e.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[06:38:13] <furrykef> I'll just use recursive descent, but thanks ^^;
[06:38:49] <SnoopJ> not really sure what you mean by that for this task, but ad-hoc is probably a lot less work :)
[06:41:28] *** Joins: OPK (~OPK@user/opk)
[06:41:58] <furrykef> It's basically doing a tree search to generate every possible spelling of a given word for the index.
[06:42:23] <furrykef> So given the root word "cierran", it'd generate "cirran", "cyrran", etc. and put them all into the index.
[06:42:24] <SnoopJ> ah, that may not be so far from the lemmatization described therein
[06:42:40] <furrykef> It's kind of a reverse lemmatization
[06:42:48] <SnoopJ> I suppose so, if you're generating them
[06:43:09] <furrykef> The idea is by generating them I'll have a lookup table to find the lemma
[06:43:17] <SnoopJ> probably easier to handle false positives: just delete 'em :)
[06:44:04] <furrykef> I already do something like this to un-inflect words (so e.g. "lufodest" correctly looks up "lufian", the verb it's the second-person past tense of).
[06:44:22] * SnoopJ nods
[06:46:59] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:46:59] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (strontium.libera.chat (Nickname regained by services)))
[06:46:59] *** finn_elija is now known as FinnElija
[06:47:18] *** Joins: loadedanvils (uid128751@id-128751.highgate.irccloud.com)
[06:47:24] *** Joins: arischow (~arischow@161.117.1.27)
[06:48:16] *** Joins: emika4 (~emika@5.181.235.116)
[06:48:29] <loadedanvils> Hey all, I’m trying to call a C++ library from Python and I’m in over my head. Currently trying Cython but confused on some of the syntax, also looked at pybind11 (but requires you to wrap C++ code) and ctypes.
[06:48:35] <loadedanvils> Anyone do this before?
[06:48:41] *** Quits: Deesl (~bsdboy@redhat/psirt/Deesl) (Quit: My Mac Pro has gone to sleep. ZZZzzz…)
[06:48:59] *** Quits: emika (~emika@5.181.235.116) (Ping timeout: 258 seconds)
[06:49:00] *** emika4 is now known as emika
[06:50:52] <habnabit_> loadedanvils, usually i'd suggest using cppyy
[06:51:19] <habnabit_> loadedanvils, ctypes can't do C++; forget about it
[06:51:24] <SnoopJ> of those, ctypes is the most "direct" since the other two involve writing new code. CFFI is also an option
[06:51:36] <habnabit_> SnoopJ, for C++? no
[06:51:37] <loadedanvils> yeah I looked at it and I saw that you could wrap C++ in an extern C
[06:51:44] *** Joins: frost (~frost@59.71.241.179)
[06:51:44] <SnoopJ> yea, you'd need the library to expose a C API
[06:51:51] <SnoopJ> not really worth the pain of chasing it down
[06:52:02] <habnabit_> loadedanvils, if it can all be extern "C"'d, use cffi
[06:52:09] *** __jmcantrell__ is now known as jmcantrell
[06:52:15] <loadedanvils> I don’t want to do that, I’d just rather work from the *.so file
[06:52:42] <habnabit_> loadedanvils, huh? i'm talking about the header file
[06:52:44] <SnoopJ> CFFI is great, and cppyy seems to be as well (but note that it needs headers and 100 MB of runtime RAM)
[06:52:57] <habnabit_> loadedanvils, unless you mean you can't modify the code being compiled at all
[06:53:02] <loadedanvils> cffi doesn’t support C++ though
[06:53:03] <SnoopJ> at least in the main mode of usage. I think it's getting fancier with C++20
[06:53:08] <loadedanvils> I can’t modify the compiled C++ code
[06:53:25] <habnabit_> loadedanvils, ok, then use cppyy or cython
[06:53:38] <SnoopJ> pybind11 is also an option, albeit kind of a verbose one
[06:53:38] <habnabit_> loadedanvils, cppyy is nice and automatic
[06:53:53] <SnoopJ> (it's like boost.python, but not fighting you every step of the way)
[06:54:12] <loadedanvils> yeah, going with cython but I’m a bit confused for syntax on free functions, const parameters, and some things involving fstreams
[06:54:23] <loadedanvils> I can try cppyy
[06:54:26] <habnabit_> loadedanvils, cppyy is much easier
[06:54:34] <loadedanvils> ok
[06:54:39] <SnoopJ> Cython isn't very C++-like, so I'd agree
[06:54:42] *** Joins: Deesl (~bsdboy@redhat/psirt/Deesl)
[06:54:49] *** Joins: Croves (~Croves@2804:14c:578b:9102:c443:cab:e23c:d59a)
[06:56:52] <SnoopJ> oh huh, it supports templates? I take it back!
[06:57:14] <SnoopJ> loadedanvils, if you have more specific questions about where you got stuck with Cython, they are relevant in this channel.
[06:57:22] <loadedanvils> if I  had a few examples of cython that use const string&, ifstreams
[06:59:00] *** Joins: lidless (jessy@user/jabberwock)
[06:59:33] *** Joins: jinsun (~quassel@user/jinsun)
[07:00:07] <Croves> Hi friends! I failed a coding interview and as always I try to learn with my failures. I have this question that I don't have idea on how to start - can anyone point me a direction? https://bpa.st/HHUA
[07:00:36] <habnabit_> Croves, did you try writing some code?
[07:01:47] <SnoopJ> the problem seems kinda weird, it's not soluble for all K, N, M (assuming that houses can be distributed arbitrarily given those parameters)
[07:02:20] *** Quits: frost (~frost@59.71.241.179) (Quit: Connection closed)
[07:03:32] <Croves> SnoopJ Sorry but how did you get that conclusion?
[07:04:19] <SnoopJ> Croves, a single example will suffice: let N=2K and let there be two houses at locations 1, 2K along this dimension.
[07:05:11] <SnoopJ> ...2K might have been a bad choice, let it be 2(K+1) I guess.
[07:05:58] <loadedanvils> This seems to be a linear programming problem, for each potential location (x,y) you have a distance of |i - x|+|j-y| for each i,j in the array.
[07:06:25] <loadedanvils> for which the value is 1
[07:06:42] *** Quits: Deesl (~bsdboy@redhat/psirt/Deesl) (Quit: My Mac Pro has gone to sleep. ZZZzzz…)
[07:06:43] <SnoopJ> my first approach would be to ask the interviewer how large M, N might be, and if they're "small" (<=1000, let's say), compute the distance of all the tiles
[07:07:22] <Croves> K is an integer within the range [1..800]; N and M are integers within the range [2..400];
[07:07:39] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[07:07:40] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: shgvbvri)
[07:08:10] <SnoopJ> yea, just do it the naive way then: compute the maximum (across all houses) distance of each tile and return the ones that are <=K
[07:09:16] <loadedanvils> SnoopJ: I have a function like: std::ifstream read(const std::string& name) and I’d like to wrap it with Cython
[07:09:40] <loadedanvils> stuck on converting const and string&, I know Cython has string built in
[07:09:47] <loadedanvils> it’s a free function outside a struct or class
[07:11:09] *** Joins: ZenixOwler (~zenix@118.69.128.37)
[07:11:50] <ZenixOwler> do i have to specifically set a cookie in order to save login with flask ? or i can just deal around with the session that it provides ? with session it does seem like the login is saved tho
[07:12:10] *** Joins: pnoud (~pnoud@user/pnoud)
[07:12:40] <habnabit_> ZenixOwler, a session already uses cookies. it can be used for login too
[07:13:08] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 258 seconds)
[07:13:14] *** Quits: Lando-SpacePimp (~LandoC@user/lando-spacepimp) (Ping timeout: 255 seconds)
[07:13:21] *** Quits: bam32 (~bambams@user/bambams) (Read error: Connection reset by peer)
[07:13:29] <ZenixOwler> habnabit_: if i login from another device, will it do something that damage the current session on my server ? that's what i have been wondering too
[07:13:36] <ZenixOwler> it seems like this session is a dict with a corresponding value tho
[07:13:42] <tm007> I don't think so
[07:13:44] <ZenixOwler> another login from another device could replace the value
[07:13:54] <habnabit_> ZenixOwler, 'damage'? no. sessions use cookies, as i said, and each device has its own cookies
[07:14:04] <ZenixOwler> awh ok
[07:14:17] *** Quits: ST47 (~ST47@wikimedia/st47) (Ping timeout: 245 seconds)
[07:15:59] *** Quits: sn1tch3r (~sn1tch3r@201-27-147-42.dsl.telesp.net.br) (Quit: Leaving)
[07:17:06] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 255 seconds)
[07:18:11] *** Joins: vimart (~vimart@148.252.128.33)
[07:22:38] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:22:38] *** Quits: sectec84 (~Guest88@24.18.109.173) (Quit: Ping timeout (120 seconds))
[07:23:29] *** Quits: d00gy (~tonberry@user/d00gy) (Quit: WeeChat 3.0)
[07:24:09] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[07:25:57] *** Quits: ZenixOwler (~zenix@118.69.128.37) (Quit: Leaving)
[07:27:53] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 265 seconds)
[07:28:56] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[07:29:35] <loadedanvils> SnoopJ: if I’m defining ifstream and ofstream in my Cython header wrapper, is it enough to do cdef cppclass ifstream: pass
[07:31:56] <lidless> .py raise Exception, "test"
[07:31:57] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 255 seconds)
[07:34:37] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:35:23] *** Joins: ST47 (~ST47@wikimedia/st47)
[07:35:32] *** __jmcantrell__ is now known as jmcantrell
[07:39:31] *** Quits: arischow (~arischow@161.117.1.27) (Remote host closed the connection)
[07:39:35] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[07:46:03] <SnoopJ> loadedanvils, I don't think so, you usually need to declare the members as well. I've never wrapped C++ with it
[07:46:21] *** Quits: heco (~redrum@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[07:48:32] *** Quits: vimart (~vimart@148.252.128.33) (Quit: WeeChat 2.8)
[07:49:11] *** Joins: jetchisel (jetchisel@user/jetchisel)
[07:49:34] *** Quits: Croves (~Croves@2804:14c:578b:9102:c443:cab:e23c:d59a) (Ping timeout: 246 seconds)
[07:50:20] *** Joins: Linux77 (~kvirc@66-183-233-186.raimax.com.br)
[07:50:44] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Ping timeout: 268 seconds)
[07:52:17] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:53:53] <loadedanvils> SnoopJ: do you know how I can wrap specific integer types like uint64_t
[07:53:59] *** Quits: ilmostro (~ilmostro@user/ilmostro) (Quit: WeeChat 3.0.1)
[07:54:05] <loadedanvils> or use them, I mean
[07:54:13] *** Joins: ilmostro (~ilmostro@user/ilmostro)
[07:54:49] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[07:56:42] <loadedanvils> I’m a bit overwhelmed by the rules
[07:57:05] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[07:58:23] *** Joins: pnoud (~pnoud@user/pnoud)
[08:00:13] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[08:00:26] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564)
[08:02:13] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[08:03:21] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 258 seconds)
[08:03:36] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:03:41] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 268 seconds)
[08:05:19] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564) (Ping timeout: 246 seconds)
[08:06:33] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 265 seconds)
[08:08:56] *** Joins: Lando-SpacePimp (~LandoC@user/lando-spacepimp)
[08:09:08] *** Joins: creek (~creek@user/creek)
[08:09:39] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[08:10:38] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[08:11:10] <SnoopJ> loadedanvils, `from libc.stdint cimport uint64_t` etc.
[08:11:21] <SnoopJ> not actually sure if that's documented somewhere...
[08:11:48] <SnoopJ> you can `from libc.stdint cimport *` if you just want the whole gamut
[08:12:30] <loadedanvils> thanks, that saves me a lot of time
[08:12:32] *** Quits: t3nj1n (~t3nj1n@108.5.82.237) (Ping timeout: 272 seconds)
[08:12:35] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Client Quit)
[08:12:42] <loadedanvils> I’m frantically looking all over for any docs or examples that could help me
[08:13:23] <SnoopJ> in my experience, the more frantic the search, the less information gets through
[08:13:38] <SnoopJ> but cython can be like drinking from a firehose heh
[08:15:27] *** Joins: clarjon1 (~clarjon1@user/clarjon1)
[08:16:20] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 272 seconds)
[08:16:38] *** Quits: nyah (~nyah@90.221.186.180) (Ping timeout: 268 seconds)
[08:17:26] *** Joins: t3nj1n (~t3nj1n@108.5.82.237)
[08:20:07] *** Joins: sectec84 (~sectec84@24.18.109.173)
[08:22:49] *** Joins: jarthur_ (~jarthur@2603-8080-1540-002d-6c53-2ea3-89b4-023b.res6.spectrum.com)
[08:23:30] <loadedanvils> do you know if there’s any special syntax for “using” (as in, C++ style typedef)
[08:23:33] <loadedanvils> SnoopJ?
[08:24:31] *** Joins: ice9 (~ice9@user/ice9)
[08:24:42] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-3440-ee66-189d-dbb7.res6.spectrum.com) (Ping timeout: 245 seconds)
[08:27:07] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.0.1)
[08:27:59] *** Quits: SpeakerToMeat (~Speaker@user/speakertomeat) (Read error: Connection reset by peer)
[08:28:07] *** Joins: SpeakerToMeat (~Speaker@user/speakertomeat)
[08:29:46] <SnoopJ> loadedanvils, ctypedef
[08:30:17] <loadedanvils> ctypedef works for using directives?
[08:30:39] <loadedanvils> as in using Name = std::array<int> or whatever
[08:30:45] <loadedanvils> that makes sense
[08:31:07] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:33:38] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[08:34:00] <SnoopJ> loadedanvils, you'd spell that `ctypedef array<int> Name` in Cython, but you have to do your own importing of array, it isn't one of the containers wrapped by the libcpp helper
[08:34:30] <loadedanvils> gotcha, I noticed that, I got some helpful results by looking at the list of libcpp pxd files
[08:35:39] <SnoopJ> hmm, maybe not quite that actually
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:37] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:36:42] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[08:36:54] <SnoopJ> it'd be array[int], but that substitution doesn't seem to work either
[08:37:09] <loadedanvils> how are you testing it?
[08:37:22] <loadedanvils> yeah I think template args would be []
[08:38:45] <SnoopJ> just testing by compiling the little doodle I have going to poke at this. I think this is how you'd create that type alias: https://bpa.st/BMLA
[08:41:40] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 272 seconds)
[08:41:45] <SnoopJ> not entirely sure if the empty cppclass is needed to make the specialization available
[08:42:05] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[08:42:08] <SnoopJ> (but it doesn't seem to work without it; seems to crash the compiler, even!)
[08:42:25] <loadedanvils> I’ll try it, presumably it links against libcpp
[08:43:35] <SnoopJ> it drags the header in like any other C++ program would
[08:46:21] *** Quits: clarjon1 (~clarjon1@user/clarjon1) (Quit: clarjon1)
[08:46:40] <SnoopJ> i.e. if you look in the generated file you'll see `#include <array>` from that cimport
[08:50:18] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:50:31] *** Joins: GoldAndAppel (goldandapp@gateway/vpn/protonvpn/goldandappel)
[08:50:45] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[08:51:33] *** Quits: ice9 (~ice9@user/ice9) (Remote host closed the connection)
[08:52:03] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 255 seconds)
[08:52:47] *** Joins: eldenring0 (uid506233@id-506233.tooting.irccloud.com)
[08:54:17] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Client Quit)
[08:56:42] *** Quits: sgt_chuckles (~sgt_chuck@pool-71-190-209-205.nycmny.fios.verizon.net) (Remote host closed the connection)
[08:59:06] *** Quits: cman (~Cody@2603-9000-d104-8465-61fd-e911-4f58-6219.inf6.spectrum.com) (Read error: Connection reset by peer)
[09:02:12] *** Joins: pnoud (~pnoud@user/pnoud)
[09:02:23] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 258 seconds)
[09:05:01] *** Joins: Vonter (~Vonter@user/vonter)
[09:05:04] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[09:05:53] *** Quits: thurs (~thurs@ip68-225-209-147.ph.ph.cox.net) (Quit: The Lounge - https://thelounge.chat)
[09:06:54] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Ping timeout: 255 seconds)
[09:08:25] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 265 seconds)
[09:09:07] <SnoopJ> loadedanvils, I'm logging off for the night, but here's where all my doodling got me. There are probably dragons lurking in this wrapper but hopefully it gives you a sense for the thing: https://github.com/SnoopJeDi/playground/tree/master/cython_/wrap_ifstream
[09:09:51] <loadedanvils> thanks! you’ve been a big help SnoopJ
[09:10:14] <SnoopJ> :)
[09:10:25] *** Joins: sydbarret (~anton@static-186-121-195-193.acelerate.net)
[09:10:40] *** Joins: thurs (~thurs@ip68-225-209-147.ph.ph.cox.net)
[09:11:27] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[09:15:07] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Client Quit)
[09:19:03] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 255 seconds)
[09:20:44] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[09:21:12] *** Quits: sydbarret (~anton@static-186-121-195-193.acelerate.net) (Quit: Going offline, see ya! (www.adiirc.com))
[09:26:09] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[09:26:13] *** Quits: sectec84 (~sectec84@24.18.109.173) (Read error: Connection reset by peer)
[09:26:34] *** Joins: sectec84 (~sectec84@24.18.109.173)
[09:26:38] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 272 seconds)
[09:26:44] *** Quits: Paul (~Paul@user/paul) (Quit: Leaving)
[09:28:04] *** Quits: Blackpajamas (~Blackpaja@24-246-42-203.cable.teksavvy.com) (Quit: Blackpajamas)
[09:30:50] *** Joins: stranac (~stranac@195.29.239.126)
[09:32:52] *** Joins: pnoud (~pnoud@user/pnoud)
[09:34:02] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 265 seconds)
[09:35:12] *** Quits: TranquilEcho (~grom@user/tranquilecho) (Quit: WeeChat 2.8)
[09:35:16] *** Quits: martums (~martums@user/martums) (Ping timeout: 246 seconds)
[09:35:34] *** Joins: no_gravity (~no_gravit@user/no-gravity/x-5639427)
[09:36:58] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 252 seconds)
[09:40:16] *** Quits: mixfix41 (~homefame@user/mixfix41) (Ping timeout: 252 seconds)
[09:41:42] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:79de:2735:de11:f577) (Quit: Leaving)
[09:42:06] *** Joins: mixfix41 (~homefame@user/mixfix41)
[09:42:54] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[09:43:08] <p-i-_> I'm playing with hooking events on a matplotlib plot.If I try running this example from CLI it works fine.
[09:43:12] <p-i-_> https://matplotlib.org/stable/gallery/event_handling/coords_demo.html
[09:43:38] <p-i-_> But if I run it from VSCode's .ipynb interface, I just get the static plot.
[09:43:53] *** Joins: wyclif (~wyclif@user/wyclif)
[09:44:56] <p-i-_> It must be something related to the render backend.
[09:45:19] <p-i-_> Simply keeping the cell alive with `while True: sleep(1)` does nothing.
[09:45:45] <no_gravity> Good Morning! How do I convert an UTF-8 string to ASCII?
[09:48:43] <themill> no_gravity: what do you intend to do about the characters in that can't be represented in ASCII?
[09:49:46] <no_gravity> themill: Either throw them out of the window or replace them with a space. Both would be fine. Even better: Replace them with a similar ASCII char like ” -> "
[09:49:59] <KirkMcDonald> no_gravity: How about with question marks?
[09:50:19] <themill> some_strong.encode(encoding="ASCII", errors='replace') , for example
[09:50:58] *** Quits: chandankumar (~chandanku@51.159.58.174) (Quit: WeeChat 2.9)
[09:51:23] *** Joins: chandankumar (~chandanku@51.159.58.174)
[09:51:24] <themill> (users seldom thank you for doing such things)
[09:51:27] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[09:51:50] <KirkMcDonald> s.encode("ascii", "ignore") will drop the characters instead.
[09:52:58] <Milos> Is it possible to identify a SIGTERM sent from within Python vs one from the OS?
[09:53:19] <Milos> As in, Python program with multiple threads, one wants to terminate the other, but differentiate between that and an external event.
[09:54:39] *** Joins: anandprabhu (~anandprab@94.202.243.198)
[09:56:11] <no_gravity> themill: That gives me a byte object rather than a string.
[09:56:36] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[09:57:00] <themill> no_gravity: that's what encoding means; you asked for the string to be encoded
[09:57:14] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 265 seconds)
[09:57:26] <no_gravity> themill: I have an utf-8 string, I want an ascii string :)
[09:57:48] <themill> I predict that you do not currently have a UTF-8 string
[09:57:50] <no_gravity> themill: I did not use the word "encoded".
[09:58:02] *** Joins: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[09:58:02] <no_gravity> themill: I have.
[09:58:04] <themill> you asked for it to be in an encoding.
[09:58:24] <themill> you get things in an encoding by um encoding them
[09:58:58] <themill> without using the words "UTF-8" or "string", what do you currently have?
[09:59:18] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[09:59:32] <no_gravity> themill: I get the feeling you prefer to play games over a real discussion.
[09:59:34] <BrenBarn> you may be interested in the unidecode module
[09:59:44] *** Joins: pycurious (~Adium@user/pycurious)
[10:00:00] <themill> no_gravity: no games needed, just some misconceptions at your end that need to go away before we can make progress
[10:00:23] <no_gravity> This is what I do now: https://pastebin.com/raw/dYPEsZvq
[10:00:53] <no_gravity> It seems crazy. But maybe it has to be since Python handles strings this way.
[10:01:11] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564)
[10:02:09] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[10:02:40] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Client Quit)
[10:04:03] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 255 seconds)
[10:05:01] *** Joins: pycurious (~Adium@user/pycurious)
[10:05:09] <no_gravity> In my opinion, "tostring" should return a string. And converting a string to ascii should not include parsing it two times. But what can I do :)
[10:05:11] <themill> no_gravity: your first 'r' is not a string, it's a bytes object because you've asked for it to be encoded as UTF-8. (so no, you don't have a UTF-8 string at that stage).
[10:05:35] <no_gravity> themill: Sure
[10:05:39] <themill> if you used encoding="unicode" in that, then you would have a string object
[10:05:43] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564) (Ping timeout: 246 seconds)
[10:05:44] <themill> str
[10:05:48] *** Joins: bigRoo (~user@73.181.dsl.syd.iprimus.net.au)
[10:05:53] <no_gravity> themill: Ha! Let's see ...
[10:06:39] <no_gravity> themill: Yay! That solved 1 of 2 issues!
[10:07:19] <no_gravity> themill: So now we have this: https://pastebin.com/raw/9H0fuEC3
[10:07:47] <no_gravity> Is there a way to solve issue 2, having to process the string twice to convert it to ASCII?
[10:09:16] *** Joins: pnoud (~pnoud@user/pnoud)
[10:09:48] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 265 seconds)
[10:10:01] <p-i-_> I can get https://matplotlib.org/stable/gallery/event_handling/coords_demo.html working from within VSCode's .ipynb editor by adding `%matplotlib widget`
[10:10:08] <p-i-_> But behaviour is odd.
[10:10:32] <p-i-_> In the plot, it's showing 'x=0.616 y=0.105` which changes as I mouseover.
[10:11:00] <p-i-_> But there's no code for printing this!
[10:11:03] *** Joins: easior (~easior@27.115.42.253)
[10:11:25] <p-i-_> And I don't see output for the print statements inside the mouse move/click callbacks
[10:12:24] <BrenBarn> again, if your goal is to get rid of non-ascii chars or convert them to a close ascii equivalent, I suggest the unidecode module
[10:12:47] <BrenBarn> p-i-: the coordinates display is part of the backend I think
[10:14:13] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[10:14:38] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 265 seconds)
[10:15:55] <p-i-_> Maybe interactive-in-.ipynb-viewer is a roundhole/squarepeg issue.
[10:16:17] <BrenBarn> I mean having interactive output in a notebook is very nice
[10:16:31] <BrenBarn> I don't know exactly what VS Code's viewer is compared to the actual notebook though
[10:16:56] <BrenBarn> I seem to recall something where stuff printed from inside callbacks might be swalloed
[10:17:03] <BrenBarn> er, swallowed
[10:18:57] <nvz> idk with vscode all sorts of things can be screwed up by plugins :P  I removed all the python related plugins I had, I only really use better comments and liveshare now
[10:18:58] *** Joins: bindu (bindu@user/bindu)
[10:19:46] *** Quits: bindu (bindu@user/bindu) (Client Quit)
[10:21:08] *** Quits: no_gravity (~no_gravit@user/no-gravity/x-5639427) (Quit: leaving)
[10:21:37] *** Joins: pycurious (~Adium@user/pycurious)
[10:22:57] *** Quits: resmo (~resmo@2a00:d420:9:8a00::ffc) (Quit: Leaving)
[10:24:24] *** Joins: bilb_ono (~alexmarsh@12.190.239.194)
[10:25:17] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[10:27:07] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[10:27:48] *** Quits: kor1 (~kor1@user/kor1) (Quit: Leaving.)
[10:27:58] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[10:30:34] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 246 seconds)
[10:31:53] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[10:32:58] <graingert> no_gravity: you could use .translate
[10:34:03] *** Joins: pnoud (~pnoud@user/pnoud)
[10:35:33] *** Quits: jarthur_ (~jarthur@2603-8080-1540-002d-6c53-2ea3-89b4-023b.res6.spectrum.com) (Ping timeout: 255 seconds)
[10:35:49] <graingert> no_gravity: https://docs.python.org/3/library/stdtypes.html#str.translate
[10:36:00] *** Quits: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net) (Ping timeout: 255 seconds)
[10:37:02] *** Quits: Lando-SpacePimp (~LandoC@user/lando-spacepimp) (Read error: Connection reset by peer)
[10:37:17] <graingert> Make a custom class:
[10:37:17] <graingert> DeleteNonAsciiTranslator:
[10:37:17] <graingert>     def __getitem__(self, v):
[10:37:17] <graingert>         return chr(v) if v <= 255 else None
[10:37:49] <graingert> Then you can use v.translate(DeleteNonAsciiTranslator())
[10:38:23] <graingert> I suspect using the built-in ASCII encode/decode would actually be faster
[10:39:05] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 268 seconds)
[10:39:33] *** Joins: dvx (~dvx@185.63.97.64)
[10:40:11] *** Joins: ggnoredo (~user@78.186.15.89)
[10:41:30] *** Joins: jpodivin (~jpodivin@118.108.broadband14.iol.cz)
[10:42:13] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[10:44:05] *** Quits: zmt00 (~zmt00@user/zmt00) (Quit: Gone.)
[10:46:39] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Ping timeout: 258 seconds)
[10:46:51] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:47:12] *** Quits: emika (~emika@5.181.235.116) (Ping timeout: 245 seconds)
[10:47:29] *** Joins: seednode (~seednode@user/seednode)
[10:49:40] *** Joins: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net)
[10:51:38] *** Joins: emika (~emika@5.181.235.116)
[10:54:47] *** Joins: sphalerite (~sphalerit@sosiego.soundray.org)
[10:54:54] *** Quits: jazzy (~jaziz@2600:380:c07e:8a82:9884:b8b5:d3c:5188) (Ping timeout: 255 seconds)
[10:57:08] *** Joins: chele (~chele@user/chele)
[10:57:15] *** Joins: rendar (~rendar@user/rendar)
[10:58:00] <sphalerite> Hi folks. I'm having some difficulty understanding why this code using multiprocessing doesn't behave as I expect it to: https://gist.github.com/lheckemann/6b7e8dae74e623395d28e8f722a6bdf1 store_result is redefined in each loop, and the print call confirms that they are indeed different functions (at different addresses) each time; but it looks like each call stores the result at results[19]
[10:58:02] <sphalerite> regardless of which "version" of store_result was given to pool.
[10:58:37] <p-i-_> yah I stuck. https://stackoverflow.com/questions/68404385/dynamically-redraw-second-axis-subfigure-upon-click-event-in-first-in-matplotlib
[10:58:51] *** Joins: Lar11s__ (~Lar11s@213.177.200.179)
[10:58:56] <Lar11s__> hi all
[10:58:57] <sphalerite> So rather than getting a dictionary like {n: n*2 for n in range(20)}, I get what looks like it was generated as {19: random.randrange(20)*2}
[10:59:19] *** Quits: zegalch (~zegalch@178.128.75.133) (Remote host closed the connection)
[10:59:42] <sphalerite> Does the pool only allow one callback?
[10:59:45] <Lar11s__> I need to open a file in certain path. The main problem is the case of that path which could be variable. So, for example: sometimes is /tmp/Mounted/notes/C22/file.txt, but also could be /tmp/MoUnTED/Notes/c22/File.txt, etc. etc. How is the best way to tackle this problem? Is there a module/function to verify the correct case of a path? I've seen some questions in StackOverflow regarding this topic but
[10:59:51] <Lar11s__> none of the answers shed much light. Thank you
[10:59:53] *** Joins: zegalch (~zegalch@178.128.75.133)
[11:01:40] <p-i-_> I wonder which bright spark had the idea to create case-insensitive filesystems.
[11:01:44] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:02:02] <sphalerite> Lar11s__: it's tricky, because depending on your filesystem, you may have multiple directories with the "same" name if considered case-insensitively.
[11:02:35] *** Joins: doev (~doev@mobile.bpv-consult.net)
[11:02:43] <sphalerite> p-i-_: I think a case-insensitive filesystem which doesn't _store_ case would be quite nice :p
[11:03:17] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-b887-749f-7796-49c4.res6.spectrum.com)
[11:03:40] <graingert> sphalerite: Use multiprocessing.get_context("spawn").Pool and imap_unordered
[11:04:06] <graingert> sphalerite: also make sure not to put so much code in `__main__` it's very confusing when using multiprocessing
[11:04:19] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[11:04:38] <graingert> Use a:
[11:04:38] <graingert> if __name__ == "__main__":
[11:04:38] <graingert>     sys.exit(main())
[11:04:48] *** Quits: easior (~easior@27.115.42.253) (Ping timeout: 255 seconds)
[11:04:49] *** Joins: todda7 (~torstein@static-qvn-qvu-160026.business.bouyguestelecom.com)
[11:05:22] <graingert> sphalerite: The problem is your r is global
[11:05:37] <graingert> Uhh sorry i
[11:05:50] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[11:05:59] <sphalerite> aaah
[11:06:02] <sphalerite> def store_result(r, i=i):
[11:06:05] <sphalerite> that works!
[11:06:13] <graingert> sphalerite: But you just want one of the imap methods
[11:06:14] <sphalerite> Is there a more elegant way than that?
[11:06:19] <graingert> It does that for you
[11:06:29] <graingert> Do you need the results in order?
[11:06:30] <Lar11s__> sphalerite: I have to mount it in a Linux machine with ext3 thats the problem :/
[11:07:10] <sphalerite> Lar11s__: if it's a case-insensitive file share or FAT filesystem, good news, you can just open the file with the "wrong" casing and it'll open anyway :)
[11:07:26] <sphalerite> graingert: no, but I do need them associated with the inputs that led to them
[11:08:11] <sphalerite> I could return a tuple (input, result) from the action() function, or wrap it to do that, but that feels awkward.
[11:09:16] *** Quits: todda7 (~torstein@static-qvn-qvu-160026.business.bouyguestelecom.com) (Ping timeout: 258 seconds)
[11:09:20] <graingert> sphalerite: If the input is short that's pretty normal
[11:09:34] <sphalerite> and I can't modify results from within the action, because that'll be a different results dict, because it's in a different process, right?
[11:09:44] <graingert> sphalerite: then you can use imap_unordered
[11:10:24] <sphalerite> yeah, imap_unordered but for a dict is what I really want.
[11:10:50] <graingert> sphalerite: yeah that's fine you just map over dict.items()
[11:11:14] *** Joins: kosh (~kosh@user/kosh)
[11:11:21] <graingert> Then have your function return a tuple
[11:12:24] *** Quits: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net) (Ping timeout: 272 seconds)
[11:12:48] <graingert> And you can result = dict(pool.imap_unordered(func, source.iteme())
[11:13:02] <graingert> And you can result = dict(pool.imap_unordered(func, source.items())
[11:14:05] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[11:14:15] <nvz> twice even
[11:14:37] <graingert> Helps if you spell the method right
[11:15:31] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564)
[11:15:54] <sphalerite> oh right, now I remember why that doesn't fully solve my problem: I then want to submit the results to a further pool that performs another action — and not wait for the completion of all the processing in the first pool. But you've given me plenty of food for thought, so unless you already have a magical solution I'll spend some more time thinking about my problem :)
[11:15:57] <sphalerite> Thanks!
[11:17:08] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 244 seconds)
[11:19:35] <sphalerite> Oh right, is there a better way then than the default argument to achieve "locality" of i in store_result?
[11:20:21] *** Joins: palasso (~palasso@user/palasso)
[11:24:46] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[11:26:10] *** Joins: kmh (~kmh@p200300df5f0e070091a51dbb61f38469.dip0.t-ipconnect.de)
[11:27:24] *** Joins: upsala (~zcb@185.213.155.160)
[11:27:43] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[11:32:26] *** Quits: Pseudocrat (~sudo@user/pseudocrat) (Ping timeout: 255 seconds)
[11:33:17] <graingert> sphalerite: You can stream tuples from imap_unordered
[11:33:23] <graingert> What's the operation you're doing?
[11:34:12] <graingert> You can turn map(x, map(y, z) into map(lambda v: x(y(v)), z)
[11:34:29] <graingert> Usually that's faster
[11:34:35] <graingert> In the second form
[11:35:04] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[11:35:43] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[11:37:03] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Read error: Connection reset by peer)
[11:39:54] *** Quits: Lar11s__ (~Lar11s@213.177.200.179) (Ping timeout: 255 seconds)
[11:40:25] *** Joins: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f)
[11:46:07] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[11:46:39] *** Quits: loadedanvils (uid128751@id-128751.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[11:47:37] <sphalerite> graingert: hm, good point. I do want the first form, because x and y happen in different pools (different resource constraints). But chaining imap_unordered might indeed be what I want.
[11:47:57] *** Joins: tims (~tims@193-82-234-90.tpgi.com.au)
[11:48:08] <graingert> sphalerite: you can use a Semaphore to compose resource constraints on the same pools
[11:48:34] <graingert> sphalerite: what's your end goal here?
[11:48:43] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564) (Quit: Client closed)
[11:49:00] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564)
[11:51:01] *** Joins: dld (~davidlowr@73.61.8.49)
[11:51:49] <sphalerite> I'm working with a deployment of multiple NixOS hosts. I want to evaluate their configuration (single thread, uses lots of RAM, can only be done locally), which results in a "derivation" for each host. These derivations then need to be built (more parallelism, can be delegated to other machines). I want to evaluate hosts and as soon as they're evaluated build them, but only evaluate a given number
[11:51:51] <sphalerite> of hosts at a time and only build a given number of hosts at a time.
[11:52:29] <graingert> wait so why multiprocessing?
[11:53:31] <sphalerite> because I want to evaluate e.g. 8 hosts at a time, and also build 8 at a time.
[11:54:01] <sphalerite> am I XYing hard here? :^)
[11:54:13] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564) (Ping timeout: 246 seconds)
[12:00:16] *** Joins: pnoud (~pnoud@user/pnoud)
[12:01:01] *** Quits: smqra (~rooba@208.110.85.44) (Ping timeout: 258 seconds)
[12:02:50] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[12:03:02] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[12:03:13] *** Joins: hendursaga (~weechat@user/hendursaga)
[12:05:17] *** Joins: sandeepk (~sandeepk@223.130.30.149)
[12:06:51] *** Quits: AlanMD_ (~AlanMD@193.105.140.131) (Read error: Connection reset by peer)
[12:07:41] *** Joins: AlanMD (~AlanMD@5-12-8-103.residential.rdsnet.ro)
[12:07:50] *** Joins: utkarsh181 (~user@45.251.50.112)
[12:08:14] <utkarsh181> Hi Python IRC,
[12:08:14] <utkarsh181>  
[12:08:14] <utkarsh181> I am trying to write a Web application which connects to N (>3)
[12:08:14] <utkarsh181> connects then starts a board game in which I will receive inputs from
[12:08:17] <utkarsh181> these N users using simple HTML forms.  But the main problem is how to
[12:08:20] <utkarsh181> make a persistent connection and talk back-and-forth between them.
[12:08:23] <utkarsh181>  
[12:09:20] <mdk> utkarsh181: websockets are good for this
[12:09:50] *** Joins: lexandrop (~lex@user/lexandrop)
[12:10:16] <utkarsh181> So I sould use Django Channels for this?
[12:11:17] <utkarsh181> should I*
[12:11:39] *** Joins: smqra (~rooba@208.110.85.44)
[12:14:38] <jor> utkarsh181: if you also write the web UI with django, then sure use channels
[12:15:09] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:17:16] <sphalerite> graingert: alright, so I've made sense of how imap_unordered does indeed work for my use case. I wanted to wrap the functions I'm using — since I don't want the boilerplate of putting the tuple together (and also handling exceptions appropriately) in each function… now it's complaining that it can't pickle the wrapped function because it's local to the wrapper function. Is there a way around
[12:17:18] <sphalerite> this?
[12:17:31] *** Quits: ggnoredo (~user@78.186.15.89) (Read error: Connection reset by peer)
[12:17:53] <sphalerite> (I'm also happy for the answer "multiprocessing is completely the wrong approach" :) )
[12:19:02] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[12:19:17] *** Quits: dre (~dre@2001:8003:c932:c301:5158:163a:41f3:cc10) (Quit: Leaving)
[12:19:48] *** Joins: AlanMD_ (~AlanMD@193.105.140.131)
[12:21:00] *** Joins: Warped (~Warped@user/warped)
[12:21:28] *** Joins: jazzy (~jaziz@2600:380:c07e:8a82:9884:b8b5:d3c:5188)
[12:21:36] *** Quits: creek (~creek@user/creek) (Ping timeout: 252 seconds)
[12:21:37] *** Quits: KernelPanic (~KernelPan@user/kernelpanic) (Quit: ZNC - https://znc.in)
[12:22:00] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564)
[12:22:07] *** Joins: Norore (~weechat@2a01:e0a:23a:5600:b9d3:ae19:12de:25b)
[12:22:18] *** Joins: comruminoAlt (~comrumino@li87-103.members.linode.com)
[12:22:20] *** Quits: Aramis (~aramis@cm-84.210.154.79.getinternet.no) (Ping timeout: 252 seconds)
[12:22:39] *** Quits: AlanMD (~AlanMD@5-12-8-103.residential.rdsnet.ro) (Ping timeout: 255 seconds)
[12:23:04] *** Quits: p3lim (~p3lim@ti0006q161-0896.bb.online.no) (Ping timeout: 252 seconds)
[12:23:04] *** Quits: comrumino (~comrumino@li87-103.members.linode.com) (Ping timeout: 252 seconds)
[12:23:04] *** Parts: utkarsh181 (~user@45.251.50.112) (ERC (IRC client for Emacs 28.0.50))
[12:23:13] *** Quits: deepy (deepy@user/deepy) (Read error: Connection reset by peer)
[12:23:47] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 244 seconds)
[12:23:48] *** Quits: Yamakaja (~yamakaja@user/yamakaja) (Ping timeout: 252 seconds)
[12:24:10] *** Quits: _SKiTZO (~dark@147.89-10-133.nextgentel.com) (Ping timeout: 252 seconds)
[12:24:16] *** Joins: KernelPanic (~KernelPan@user/kernelpanic)
[12:24:24] *** Joins: deepy (deepy@user/deepy)
[12:26:23] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[12:26:46] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564) (Ping timeout: 246 seconds)
[12:29:21] *** Joins: dshikoh (~dshikoh@user/dshikoh)
[12:29:37] *** Quits: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Read error: Connection reset by peer)
[12:29:53] *** Joins: shad (~shad@user/shad)
[12:30:08] *** Quits: Schnouki (~schnouki@user/schnouki) (Ping timeout: 252 seconds)
[12:30:11] *** Joins: floatingpoint (~floatingp@net-5-95-175-59.cust.vodafonedsl.it)
[12:30:24] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-b887-749f-7796-49c4.res6.spectrum.com) (Quit: jarthur)
[12:30:33] *** Joins: Jimmy2027 (~hendrik@2001:1620:2018:38:dde3:1b0f:dc57:eb0f)
[12:31:40] *** Joins: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[12:31:55] *** Joins: Schnouki (~schnouki@user/schnouki)
[12:32:03] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Ping timeout: 244 seconds)
[12:34:13] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[12:34:16] *** Joins: hegstal (~hegstal@2a02:c7f:7604:8a00:694c:cc5c:55d8:63b)
[12:35:07] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[12:42:19] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Quit: WeeChat 2.8)
[12:42:23] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:42:56] *** Joins: gareppa (~gareppa@user/gareppa)
[12:43:29] *** Quits: gareppa (~gareppa@user/gareppa) (Remote host closed the connection)
[12:43:33] <Luyin> sphalerite: multiprocessing is completely the wrong approach! there you go :P
[12:43:41] <Luyin> (just pulling your leg, I have no idea)
[12:43:51] *** Joins: hendursaga (~weechat@user/hendursaga)
[12:44:39] <sphalerite> hehe
[12:45:04] *** Joins: goldfish (~goldfish@user/goldfish)
[12:45:24] *** Joins: wyclif (~wyclif@user/wyclif)
[12:46:46] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[12:47:24] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 272 seconds)
[12:47:51] *** Quits: emika (~emika@5.181.235.116) (Quit: emika)
[12:49:06] *** dobox is now known as northernsage
[12:49:18] *** Quits: Schnouki (~schnouki@user/schnouki) (Ping timeout: 265 seconds)
[12:50:57] <graingert> sphalerite: use a global function
[12:51:14] *** Joins: Schnouki (~schnouki@user/schnouki)
[12:51:24] *** Quits: northernsage (~dobox@138.197.11.208) (Quit: leaving)
[12:52:00] *** Quits: rddd (~rdd@c-407ce255.012-81-73746f39.cust.ownit.se) (Ping timeout: 258 seconds)
[12:52:09] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[12:52:24] <sphalerite> graingert: can I make a global function from within a function?
[12:52:45] <sphalerite> I've written a decorator function which takes care of the "tupling" and handles exceptions.
[12:53:08] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 252 seconds)
[12:53:09] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[12:53:48] *** Joins: wyclif (~wyclif@user/wyclif)
[12:54:23] *** Joins: dobox (~northerns@138.197.11.208)
[12:55:28] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f) (Ping timeout: 246 seconds)
[12:56:08] *** Quits: audiocat (~audio@2603-8081-1800-00ad-02c9-9ca2-5a4a-00f9.res6.spectrum.com) (Ping timeout: 255 seconds)
[12:56:42] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[12:56:49] *** Quits: dobox (~northerns@138.197.11.208) (Client Quit)
[12:57:43] <Luyin> question regarding pipenv and pyenv: I've got python 3.9.0 installed via pyenv, and pipenv, when I try `pipenv install` in a repo which contains a Pipfile, says this: Warning: Python 3.9.0 was not found on your system... Would you like us to install CPython 3.9.0 with Pyenv? [Y/n]: Now I'm confused - I found a hint online that one could use $PYENV_HOME to tell pipenv where to find pyenv, but it's
[12:57:45] <Luyin> not from the official documentation but a bug ticket: https://github.com/pypa/pipenv/issues/3123 (first post)
[12:58:23] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 255 seconds)
[12:58:23] *** Lord_of_Life_ is now known as Lord_of_Life
[12:58:41] *** Joins: northernsage (~northerns@138.197.11.208)
[12:58:48] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[12:59:17] *** Joins: wyclif (~wyclif@user/wyclif)
[12:59:27] *** Quits: Betal (~Beta@user/betal) (Quit: WeeChat 3.2)
[13:00:48] *** Joins: todda7 (~torstein@static-qvn-qvu-160026.business.bouyguestelecom.com)
[13:00:54] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564)
[13:02:34] *** Joins: ulu (~ulu@user/ulu)
[13:03:44] *** Joins: manti7 (~manti7@176.10.104.94)
[13:04:03] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[13:04:37] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 268 seconds)
[13:04:37] *** Joins: Naan` (~Naan@user/naan)
[13:04:45] *** Joins: wyclif (~wyclif@user/wyclif)
[13:04:48] *** Joins: plastico (~plastico@2001:8a0:de6b:1a00:9d14:766e:70a8:dcea)
[13:05:16] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564) (Ping timeout: 246 seconds)
[13:05:20] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 252 seconds)
[13:05:43] *** Parts: floatingpoint (~floatingp@net-5-95-175-59.cust.vodafonedsl.it) ()
[13:06:13] *** Quits: snalty (~Shhh@user/snalty) (Ping timeout: 265 seconds)
[13:06:16] *** Joins: varaindemian (~varaindem@86.124.78.162)
[13:07:32] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[13:07:50] *** Quits: dshikoh (~dshikoh@user/dshikoh) (Ping timeout: 255 seconds)
[13:09:33] *** Joins: tsaka__ (~torstein@static-qvn-qvu-160026.business.bouyguestelecom.com)
[13:09:49] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[13:09:50] *** Quits: marduk (~marduk@216.243.54.166) (Quit: Ping timeout (120 seconds))
[13:10:17] *** Joins: wyclif (~wyclif@user/wyclif)
[13:10:24] *** Quits: todda7 (~torstein@static-qvn-qvu-160026.business.bouyguestelecom.com) (Ping timeout: 258 seconds)
[13:10:31] *** Joins: marduk (~marduk@216.243.54.166)
[13:11:11] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:13:42] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[13:14:53] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[13:15:08] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[13:15:29] *** Quits: smqra (~rooba@208.110.85.44) (Quit: WeeChat 1.9.1)
[13:15:56] *** Joins: wyclif (~wyclif@user/wyclif)
[13:17:33] *** Joins: weedmic (~weedmic@89-139-109-7.bb.netvision.net.il)
[13:17:39] *** Parts: furrykef (~furrykef@ip68-229-199-137.ok.ok.cox.net) (Leaving)
[13:18:22] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Client Quit)
[13:19:04] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 272 seconds)
[13:19:07] *** Quits: Gerula (~Gerula@user/gerula) (Quit: Leaving)
[13:19:39] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[13:20:45] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[13:20:46] <very_sneaky> Luyin: what's the output of `python --version`?
[13:21:10] <Luyin> in the directory? "Python 3.9.6"
[13:21:27] *** Joins: wyclif (~wyclif@user/wyclif)
[13:21:39] *** Joins: Gerula (~Gerula@user/gerula)
[13:22:07] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[13:23:22] *** Quits: zaquest (~notzaques@5.128.210.178) (Remote host closed the connection)
[13:24:12] *** Quits: tsaka__ (~torstein@static-qvn-qvu-160026.business.bouyguestelecom.com) (Ping timeout: 258 seconds)
[13:24:22] <very_sneaky> I'm not that familiar with how pipenv works - why is it asking for python 3.9.0? was that your active system version when you installed it?
[13:24:44] <Luyin> it's the version that's specified in the Pipfile
[13:24:57] <Luyin> grep 3.9.0 Pipfile
[13:24:59] <Luyin> python_version = "3.9.0"
[13:25:01] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[13:25:07] <very_sneaky> ah. so you have a mismatch between your global pyenv version and pipenv expectations
[13:25:32] <Luyin> hmmm. I mean
[13:25:36] <very_sneaky> is there an issue changing your global python version when you `pipenv install`?
[13:25:36] <Luyin> I thought that's the point of pipenv
[13:25:36] *** Joins: dkmueller (~dkmueller@2a01:c23:b84b:2500:a9c0:853b:91ff:af9f)
[13:25:51] <very_sneaky> or specifying your global python version
[13:26:02] <very_sneaky> i.e., `pipenv install --python 3.9.6`?
[13:26:17] *** Joins: zaquest (~notzaques@5.128.210.178)
[13:26:18] *** Joins: Crassus (~Crassus@user/crassus)
[13:26:31] <Luyin> pipenv install - read from Pipfile, which says to use 3.9.0. If it already checks pyenv anway, why doesn't it just use the 3.9.0 version that is already installed there?
[13:27:01] <very_sneaky> i guess because it's not checking pyenv, it's checking your global python interpreter
[13:27:09] <very_sneaky> which is managed by pyenv
[13:27:15] <Luyin> I don't want to use 3.9.6 for a repo that's specified as 3.9.0, I want 3.9.0. And I don't know what will happen if I confirm to just install 3.9.0 via pyenv, which already exists.
[13:27:19] <very_sneaky> it finds 3.9.6 and expects 3.9.0, so says it's not installed
[13:27:40] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[13:27:53] <very_sneaky> the easy option is just to `pyenv global 3.9.0; pipenv install; pyenv global 3.9.6;`
[13:28:10] <Luyin> very_sneaky: did you read the output I provided earlier? It says it wants to install via pyenv, so I assume it can read pyenv somehow. and pyenv *has* 3.9.0: pyenv versions | grep 3.9.0 > 3.9.0
[13:28:13] <very_sneaky> if you want pipenv to search your entire pyenv shims path that might require some research
[13:28:56] *** Joins: slav0nic (slav0nic@python.su)
[13:29:50] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Ping timeout: 272 seconds)
[13:29:50] <very_sneaky> Luyin: fair point, i misread that as pipenv. you're making some assumptions about what that actually means though (I'm not saying I do know)
[13:30:20] <very_sneaky> it may just mean, "I'll try to install it using pyenv then switch the global interpreter to that" - it may not be doing anything other than checking your global interpreter
[13:31:51] *** Parts: afidegnum (~user@102.176.94.118) (ERC (IRC client for Emacs 27.2))
[13:32:24] <very_sneaky> interestingly i found a SO post with your exact issue: https://stackoverflow.com/questions/65500140/pipenv-not-recognizing-shims-for-pyenv-python-installation
[13:32:25] *** Joins: someguy1233 (~someguy@user/someguy123)
[13:33:00] *** Quits: OPK (~OPK@user/opk) (Ping timeout: 272 seconds)
[13:34:08] *** Quits: Samian (~Sami@2620:10d:c091:480::1:6681) (Read error: Connection reset by peer)
[13:34:29] *** Quits: someguy123 (~someguy@user/someguy123) (Ping timeout: 268 seconds)
[13:36:01] <very_sneaky> seems like that is how it works: https://pipenv.pypa.io/en/latest/diagnose/#pipenv-does-not-respect-pyenvs-global-and-local-python-versions
[13:36:35] *** Joins: OPK (~OPK@user/opk)
[13:36:40] <very_sneaky> you'll need to `pipenv install --python $(which python)`
[13:37:08] *** Quits: sebastianos (~sebastian@user/sebastianos) (Ping timeout: 252 seconds)
[13:37:39] *** Joins: sebastianos (~sebastian@user/sebastianos)
[13:39:39] *** Joins: tsaka__ (~torstein@static-qvn-qvu-160026.business.bouyguestelecom.com)
[13:39:45] *** Joins: Thanatos (~Thanatos@197.210.76.175)
[13:41:14] *** Quits: cluelessperson (~cluelessp@user/cluelessperson) (Ping timeout: 250 seconds)
[13:41:20] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.2)
[13:41:35] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 255 seconds)
[13:41:59] *** Joins: cluelessperson (~cluelessp@user/cluelessperson)
[13:42:20] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::2f4b)
[13:42:45] *** Joins: snalty (~Shhh@user/snalty)
[13:43:15] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[13:46:20] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[13:46:40] *** Quits: Jigsy (~Jigsy@user/jigsy) (Killed (NickServ (GHOST command used by Jigsy`)))
[13:46:47] *** Joins: Jigsy` (~Jigsy@user/jigsy)
[13:47:21] *** Joins: Pickchea (~private@user/pickchea)
[13:48:05] *** Quits: ilmostro (~ilmostro@user/ilmostro) (Quit: WeeChat 3.0.1)
[13:48:25] *** Joins: ilmostro (~ilmostro@user/ilmostro)
[13:48:41] *** Jigsy` is now known as Jigsy
[13:51:32] *** Quits: Thanatos (~Thanatos@197.210.76.175) (Read error: Connection reset by peer)
[13:52:57] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[13:53:01] *** Joins: frost (~frost@59.71.241.179)
[13:53:48] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[13:54:08] *** Joins: Thanatos (~Thanatos@197.210.54.252)
[13:54:54] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::2f4b) (Ping timeout: 255 seconds)
[13:58:15] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.0.1)
[13:59:17] *** Quits: ulu (~ulu@user/ulu) (Quit: Leaving)
[14:01:48] <varaindemian> what can I use to press a button on a webpage?
[14:03:05] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::2f4b)
[14:03:29] <MikachuPi> varaindemian: selenium ?
[14:03:30] *** Joins: tspng (~tspng@2a02:168:a1a1:1:39d7:b564:c448:bbe0)
[14:03:37] *** Joins: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk)
[14:04:48] *** Quits: Schnouki (~schnouki@user/schnouki) (Ping timeout: 255 seconds)
[14:04:48] <varaindemian> MikachuPi that's all?
[14:05:22] *** Joins: lacrymology (~lacrymolo@static-95-102-25-46.ipcom.comunitel.net)
[14:06:17] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[14:06:17] <dav1d> is there a simple lib that can format a number to human readable bit/s, byte/s, kbyte/s etc. for me?
[14:06:34] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Ping timeout: 272 seconds)
[14:07:35] <MikachuPi> varaindemian: Selenium use a webbrowser engine (by default webkit) and can automate actions inside it, so you can write a few line to select the element you want in the page and click on it
[14:07:40] <MikachuPi> an example here: https://stackoverflow.com/a/62319440
[14:08:39] <varaindemian> MikachuPi cool!
[14:08:51] <thm> dav1d: https://humanfriendly.readthedocs.io/en/latest/
[14:09:05] <dav1d> thm, thanks!
[14:14:02] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[14:14:20] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[14:15:55] *** Joins: floatingpoint (~floatingp@net-5-95-175-59.cust.vodafonedsl.it)
[14:16:28] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[14:18:57] *** Joins: pycode1 (~pycode@2001:b07:5d28:551:f02f:cbf7:4060:786c)
[14:22:30] *** Joins: dshikoh (~dshikoh@user/dshikoh)
[14:23:32] *** Joins: someguy123 (~someguy@user/someguy123)
[14:24:20] *** Quits: vbgunz (~vbgunz@35.141.71.47) (Remote host closed the connection)
[14:24:43] *** Quits: floatingpoint (~floatingp@net-5-95-175-59.cust.vodafonedsl.it) (Quit: leaving)
[14:24:58] *** Quits: someguy1233 (~someguy@user/someguy123) (Read error: Connection reset by peer)
[14:24:58] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Quit: Textual IRC Client: www.textualapp.com)
[14:25:54] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[14:25:59] *** Joins: vbgunz (~vbgunz@35.141.71.47)
[14:26:35] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[14:26:46] *** Joins: someguy1233 (~someguy@user/someguy123)
[14:28:00] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[14:28:02] *** Quits: GinFuyou (~GinFuyou@reya.cloud.tilaa.com) (Remote host closed the connection)
[14:28:45] *** Quits: someguy123 (~someguy@user/someguy123) (Ping timeout: 268 seconds)
[14:28:55] *** Joins: c10l (~c10l@89.34.167.207)
[14:30:57] *** Quits: upsala (~zcb@185.213.155.160) (Ping timeout: 268 seconds)
[14:32:37] *** Joins: upsala (~zcb@185.213.155.160)
[14:32:49] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 258 seconds)
[14:34:30] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[14:37:05] <Luyin> very_sneaky: ah great, I'll look into both links. thank you!
[14:37:58] *** Joins: Lar11s__ (~Lar11s@213.177.200.179)
[14:38:21] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[14:40:30] <graingert> dav1d: Babel?
[14:42:00] <dav1d> graingert, this http://babel.pocoo.org/en/latest/numbers.html ?
[14:44:27] *** Joins: thiras (~thiras@user/thiras)
[14:44:50] *** Joins: wyclif (~wyclif@user/wyclif)
[14:48:02] <Luyin> very_sneaky: so the env created by pipenv when I use `pipenv install --python $(pyenv which python)` would end up being 3.9.6 anyway, wouldn't it? Or I'd have to change my _global_ pyenv version to 3.9.0. that's also something I don't want, actually. I want only the python version that's used in this directory (and subdirs, obviously) to be 3.9.0. So I'm thinking, maybe it makes sense to do it the
[14:48:04] <Luyin> other way around - set up pyenv-virtualenv with 3.9.0 and then run pipenv install in it (that worked before, it gives out a "convenience notice" about having found an existing virtualenv and using it automatically then)
[14:49:02] *** Quits: tspng (~tspng@2a02:168:a1a1:1:39d7:b564:c448:bbe0) (Remote host closed the connection)
[14:49:19] *** Joins: RickDeckard (~RickDecka@pool-100-12-189-215.nycmny.fios.verizon.net)
[14:50:04] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[14:50:20] *** Joins: wyclif (~wyclif@user/wyclif)
[14:52:56] *** Joins: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl)
[14:53:58] *** Joins: DrNostril (~DrNostril@217.138.197.76)
[14:55:43] <DrNostril> this gives me info i want: inv_list[2]['data'][1]['nameOfPrincipalOrganization'] and inv_list[2]['data'][5]['nameOfPrincipalOrganization'] and so does that.... inv_list[2]['data'][1:5]['nameOfPrincipalOrganization'] does not
[14:56:00] <DrNostril> how do i get every single 'nameOfPrincipalOrganization' ?
[14:56:19] *** Joins: Tas-sos (~Tas-sos@78-159-56.adsl.cyta.gr)
[14:56:19] <AhmedAmerican_> why `queue` doesn't support bunch insert? something like `q.put(iterable)`
[14:58:48] *** Joins: N4G4R41 (N4G4R41@user/n4g4r41)
[14:59:32] *** Quits: weedmic (~weedmic@89-139-109-7.bb.netvision.net.il) (Quit: Konversation terminated!)
[15:00:33] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[15:00:52] *** Quits: varaindemian (~varaindem@86.124.78.162) (Quit: Client closed)
[15:00:53] <Ninpo> What's the pythonic way to compare two dictionaries (both are expected to have same keys/values) and in case of inequality, print the keys that don't match?
[15:00:58] *** Joins: pnoud (~pnoud@user/pnoud)
[15:01:20] *** Joins: wyclif (~wyclif@user/wyclif)
[15:01:33] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564)
[15:02:18] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Ping timeout: 240 seconds)
[15:05:24] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 258 seconds)
[15:06:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[15:06:22] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564) (Ping timeout: 246 seconds)
[15:07:09] *** Joins: wyclif (~wyclif@user/wyclif)
[15:07:15] *** Joins: acresearch (~acresearc@user/acresearch)
[15:07:26] <acresearch> people, what is meant by a private function in a class?
[15:07:26] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[15:07:44] <supakeen> In Python? Nothing.
[15:07:51] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[15:07:54] <Repiphany> Ninpo: You could do [k for k, v in set(d1.items()) - set(d2.items())] if they're not huge dictionaries
[15:07:59] <acresearch> here: https://stanford.edu/~shervine/blog/keras-how-to-generate-data-on-the-fly ---->  under __data_generation
[15:08:05] <supakeen> In the larger scheme of things? Usually a method that's only meant to be used by code inside the class.
[15:08:30] <nedbat> acresearch: it's a concept from other languages that isn't that important in Python, but some people like to do it anyway
[15:08:54] <nedbat> acresearch: names with two underscores get transformed, so it's hard to use that method from outside the class
[15:09:05] <Ninpo> Repiphany: they're not huge it's 3 keys
[15:09:22] <acresearch> Ninpo: i see
[15:09:37] <acresearch> because i am trying to run it but i get a no attribution error
[15:09:41] <Repiphany> [k for k, v in d1.items() if d2[k] != v] if you don't want to use sets
[15:10:04] <AhmedAmerican_> what's the correct way to switch view a dataframe like this https://bpa.st/K7GQ
[15:10:10] <nedbat> acresearch: how are you running it? it must be different than how the author did it
[15:10:58] <AhmedAmerican_> here's the actual table which i read it by pandas
[15:10:59] <AhmedAmerican_> https://disclosure.bursamalaysia.com/FileAccess/viewHtml?e=393739
[15:11:01] <acresearch> nedbat: i am trying to understand the code so i am running each fucntion on its own, but it doesn't work, it only works if you run the whole thing inside keras, so i can't see what is happening and what eachline is doing
[15:11:19] <nedbat> acresearch: just change the name to data_generation
[15:11:39] <acresearch> nedbat: ok
[15:12:16] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[15:12:40] *** Joins: wyclif (~wyclif@user/wyclif)
[15:14:26] <Ninpo> Repiphany: set approach is perfect thank you
[15:15:16] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:15:40] <otisolsen70> I am trying to use youtube-dl in a Python project. I have added youtube_dl to my virtualenv using pip install youtube_dl. However, when I try to do "from youtube_dl import YoutubeDL", I get an ImportError: cannot import name 'YoutubeDL' from 'youtube_dl' (unknown location). This worked in previous versions of yt-dl. I am using Python 3.9. What am I doing wrong?
[15:17:13] <AhmedAmerican_> am trying to concat 2 dataframes which hold same column names https://bpa.st/HDFQ but i still getting the output with the column names as rows!
[15:17:13] *** Joins: pnoud (~pnoud@user/pnoud)
[15:20:09] *** Joins: tspng (~tspng@2a02:168:a1a1:1:5884:573f:2d00:6ae5)
[15:22:34] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 272 seconds)
[15:22:45] *** Quits: Crassus (~Crassus@user/crassus) (Ping timeout: 268 seconds)
[15:23:12] <AhmedAmerican_> :d Why developers doesn't know `async` yet?  :D this comment is killing https://stackoverflow.com/questions/68407407/how-to-iterate-scraping-all-the-table-in-a-list-of-url/68407618?noredirect=1#comment120897346_68407618
[15:24:01] <AhmedAmerican_> @graingert :) Thanks for sharing the knowledge :P
[15:25:26] *** Joins: iomari891 (~iomari891@105.112.138.38)
[15:26:13] *** Joins: entuland (~entuland@user/entuland)
[15:27:57] <kosh> AhmedAmerican_, I have never used async in anything yet, for lots of tasks it just doesn't apply
[15:28:34] <AhmedAmerican_> kosh: async can apply for anything
[15:29:06] <AhmedAmerican_> but indeed the library which you deal with it, should support async.
[15:29:26] <kosh> I run simulations and run them in parallel with multiprocessing, I have no usage cases I can think of for async
[15:29:46] *** Quits: Lar11s__ (~Lar11s@213.177.200.179) (Ping timeout: 265 seconds)
[15:32:04] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 272 seconds)
[15:32:41] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[15:34:01] *** Quits: pycode1 (~pycode@2001:b07:5d28:551:f02f:cbf7:4060:786c) (Ping timeout: 246 seconds)
[15:34:23] *** Quits: envex (~envex@cpe-173-91-189-33.neo.res.rr.com) ()
[15:35:18] *** Joins: milosz_ (~milosz@user/milosz)
[15:35:18] *** Quits: milosz (~milosz@user/milosz) (Read error: Connection reset by peer)
[15:35:30] <graingert> AhmedAmerican_: ?
[15:35:48] *** Quits: visl_ (sid453966@user/visl) (Quit: Connection closed for inactivity)
[15:35:51] <graingert> kosh: async is specifically designed for lots of tasks
[15:36:17] <AhmedAmerican_> @graingert SO user removed the comment. he thought that my code is `JS` and not a Python.
[15:36:28] <graingert> Lol
[15:36:43] <AhmedAmerican_> :D
[15:36:50] <kosh> graingert, I know it is designed for many things, I just don't see it applying to what I am doing and I don't agree that every developer would know it
[15:37:09] <graingert> kosh: you said it didn't apply to lots of tasks
[15:37:21] <kosh> yeah I think there are a lot of tasks it doesn't apply to
[15:37:23] <graingert> It *only* applies to lots of tasks
[15:37:41] <kosh> you need something where you are waiting but not cpu bound essentially
[15:37:49] <AhmedAmerican_> kosh: BTW `async` keyword is a language basic as it's built in.
[15:37:54] <graingert> Sorry I'm not following
[15:37:55] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[15:38:15] <graingert> You say async isn't good at managing lots of tasks? But that's what it's designed for
[15:38:19] <kosh> graingert, the type of tasks you can use async for are fairly narrow in scope
[15:38:41] <kosh> graingert, you need your program to be doing something where it is waiting on many things but you are not cpu bound on a single process
[15:38:43] *** Quits: tspng (~tspng@2a02:168:a1a1:1:5884:573f:2d00:6ae5) (Remote host closed the connection)
[15:39:34] <kosh> so gui and network programs are fairly good examples where you are waiting but not cpu bound
[15:39:36] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 252 seconds)
[15:40:07] <graingert> Tbh I use it to orchestrate multiprocessing and threading
[15:41:02] <kosh> I normally use multiprocessing pool because I know how large the pool needs to be and I just keep submitting work to it, I can't make one process per task to do because that would quickly kill the system
[15:41:35] <AhmedAmerican_> is my concatenating is invalid here? as i keep get the column names as rows https://bpa.st/HDFQ  ---> output https://bpa.st/JUZA
[15:42:15] <AhmedAmerican_> kosh: that's why the concept of `async` came!
[15:42:35] *** Joins: darxun (sid504814@id-504814.tinside.irccloud.com)
[15:43:52] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[15:44:10] *** Quits: doev (~doev@mobile.bpv-consult.net) (Ping timeout: 246 seconds)
[15:49:08] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[15:49:39] <graingert> kosh: right anyio.to_process still uses a pool
[15:50:00] <graingert> But you use an anyio.Semaphore to compose work limits
[15:50:30] *** Joins: darksun (~darksun@user/darksun)
[15:50:46] <graingert> This way you can use one Semaphore like a pool, or multiple in a tree structure or whatever you want
[15:51:04] <jinsun> AhmedAmerican_: are you sure those are column names and not rows before you concat? probably you need to set_index to actually make them column names
[15:51:33] <kosh> I have a pure batch system, evaluate an entire group of things, process them and create the next group, repeat
[15:51:36] *** Joins: Julian (~tos9@python/site-packages/Julian)
[15:51:41] <AhmedAmerican_> jinsun: you correct. just noticed `df.columns` giving rows
[15:51:42] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[15:52:12] *** Joins: wyclif (~wyclif@user/wyclif)
[15:56:51] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[15:57:23] *** Joins: wyclif (~wyclif@user/wyclif)
[15:57:27] *** Joins: zeenk (~zeenk@2a02:2f04:a106:9600:82fb:aed9:ca9:38d3)
[15:58:22] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[15:59:45] *** Joins: Pickchea (~private@user/pickchea)
[16:01:50] *** Quits: pyfisch (~pyfisch@ip-37-201-119-209.hsi13.unitymediagroup.de) (Quit: Ping timeout (120 seconds))
[16:02:09] *** Joins: pyfisch (~pyfisch@ip-37-201-119-209.hsi13.unitymediagroup.de)
[16:02:51] <dunc> What's the best automatic dependency checker for python?
[16:03:12] <dunc> I'm thinking dependabot / renovate / snyk etc.
[16:04:52] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.0.1)
[16:05:26] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[16:06:28] *** Quits: jacktar (~whiteshad@gateway/tor-sasl/jacktar) (Ping timeout: 244 seconds)
[16:07:19] *** Joins: jacktar (~whiteshad@gateway/tor-sasl/jacktar)
[16:08:26] *** Quits: shad (~shad@user/shad) (Ping timeout: 265 seconds)
[16:08:39] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 258 seconds)
[16:10:46] <petaflot> Hello! I have https://bpa.st/TLOA ; I was expecting to have an async_generator in both cases... does it means my justDoIt() function must yield TEST() ? this seems odd to me https://bpa.st/TLOA
[16:12:30] *** Joins: anandprabhu_ (anandprabh@gateway/vpn/airvpn/anandprabhu)
[16:12:57] *** Joins: tspng (~tspng@2a02:168:a1a1:1:497:99f5:e950:3635)
[16:13:32] *** Joins: Julian (~tos9@python/site-packages/Julian)
[16:13:40] <Yhg1s> petaflot: why does that seem weird to you? When called, justDoIt() needs to return a coroutine object. TEST is not a coroutine object. When called, TEST returns a coroutine object.
[16:14:22] <Yhg1s> petaflot: if it was 'def TEST(): return 1', would you expect 'def justDoIt(): return TEST' to return 1?
[16:14:58] <Yhg1s> petaflot: it is, of course, a lot simpler to just make justDoIt be a regular function. It doesn't need to be an async function just to return a coroutine object.
[16:15:45] *** Quits: anandprabhu (~anandprab@94.202.243.198) (Ping timeout: 255 seconds)
[16:17:40] <petaflot> ok
[16:17:54] *** Quits: kmh (~kmh@p200300df5f0e070091a51dbb61f38469.dip0.t-ipconnect.de) (Quit: Leaving)
[16:18:17] *** Parts: Murgoth (Murgoth@user/murgoth) ()
[16:18:37] *** Joins: nyah (~nyah@90.221.186.180)
[16:18:55] *** Joins: iomari891 (~iomari891@105.112.138.38)
[16:19:59] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[16:20:30] <petaflot> I thought a function could return either an async generator, or something else
[16:20:38] *** Quits: thinkofher (sid503725@user/thinkofher) (Excess Flood)
[16:20:50] <Yhg1s> petaflot: ... yes, that is correct.
[16:20:59] *** Joins: thinkofher (sid503725@user/thinkofher)
[16:21:31] <petaflot> then I don't understand why the output of justDoIt, when it sould be the TEST async generator, is a coroutine
[16:22:07] <petaflot> I don't really want to make justDoIt be a standard function because sometimes I would like to make await calls inside it
[16:22:18] <Yhg1s> petaflot: because it's an async function. You have to await it to get the thing it returns. Which is TEST.
[16:22:23] <Yhg1s> (not the result of calling TEST)
[16:22:33] <petaflot> oh... I see
[16:22:39] <Yhg1s> petaflot: sounds like you should show real code then.
[16:22:42] *** Quits: sectec84 (~sectec84@24.18.109.173) (Read error: Connection reset by peer)
[16:23:01] *** Joins: sectec84 (~sectec84@24.18.109.173)
[16:23:11] <petaflot> got it. it works
[16:23:24] <petaflot> dumb mistake
[16:24:06] *** Joins: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu)
[16:24:28] *** Parts: N4G4R41 (N4G4R41@user/n4g4r41) (Leaving)
[16:24:47] <petaflot> well it doesn't really work actually.. at least it doesn't crash. need to examine this further...
[16:26:13] *** Joins: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net)
[16:26:31] <petaflot> but now the problem has nothing to doo with async stuff, so I should be good
[16:26:35] <petaflot> thanks for your help
[16:28:50] *** Quits: cpyang (cpyang@114-32-153-132.HINET-IP.hinet.net) (Ping timeout: 245 seconds)
[16:29:24] *** Joins: zeden (~zeden@user/zeden)
[16:29:59] *** Quits: zeden (~zeden@user/zeden) (Client Quit)
[16:30:47] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Read error: Connection reset by peer)
[16:31:00] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[16:32:22] *** Joins: cpyang (cpyang@114-32-153-132.HINET-IP.hinet.net)
[16:32:49] *** Joins: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:558c:2c74:b63b:9420)
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:37] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:39:18] *** Quits: elibrokeit (eschwartz@archlinux/bugwrangler/eschwartz) (Quit: A random quit message)
[16:39:57] *** Joins: elibrokeit (eschwartz@archlinux/bugwrangler/eschwartz)
[16:41:00] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[16:41:37] *** Joins: Blankspace (~abcd@user/blankspace)
[16:43:24] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[16:44:08] <graingert> petaflot: remember to use `async with contextlib.aclosing(async_gen_factory(...)) as agen: ...` when using async generators
[16:45:31] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[16:46:20] *** Quits: dangrenier83 (~dangrenie@user/dangrenier83) (Remote host closed the connection)
[16:46:51] <petaflot> graingert: what happens if I don't?
[16:46:58] *** Parts: warreur (~warreur@user/warreur) ()
[16:47:30] <graingert> petaflot: the async generator gets closed in the wrong place
[16:48:05] *** Joins: shad (~shad@user/shad)
[16:48:17] <graingert> Often non-deternisticly, and in trio you'll get a warning
[16:48:21] *** Quits: DrNostril (~DrNostril@217.138.197.76) (Quit: Leaving)
[16:48:43] <petaflot> graingert: what if I don't want to close it?
[16:48:52] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[16:49:06] *** Joins: doev (~doev@82.115.100.62)
[16:49:17] <graingert> petaflot: Open it at a higher scope
[16:50:03] <petaflot> not sure I understand why you mean...
[16:50:23] <petaflot> I open it as early as possible
[16:50:48] *** Joins: zeden (~zeden@user/zeden)
[16:50:54] *** Joins: Deneb (~johnch@58.111.189.80.dyn.plus.net)
[16:52:39] *** Joins: pycode1 (~pycode@2001:b07:5d28:551:35db:5f4c:1a3f:8b1c)
[16:53:01] *** Joins: timkofu (~timkofu@user/timkofu)
[16:53:16] <timkofu> Can SQLALchemy's session.get return multiple rows?
[16:53:43] <timkofu> It's ablity to take a dict as filter params makes interesting things possible
[16:53:50] <timkofu> *Its
[16:53:57] <graingert>  petaflot you need to open it at the same scope you want it closed in
[16:54:02] <graingert> Or earlier
[16:55:03] <graingert> petaflot: What do you mean by you don't want to close it? It will be closed for you non-deternisticly
[16:55:16] <timkofu> Ah, it cannot.
[16:57:53] <petaflot> it's a pipe. as long as I don't explictly decide I've had enough "water" I would like it too stay open
[16:58:37] <Yhg1s> petaflot: what graingert is talking about is the 'when you've decided you had enough water' situation.
[16:58:47] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[16:59:16] *** Quits: dkmueller (~dkmueller@2a01:c23:b84b:2500:a9c0:853b:91ff:af9f) (Quit: WeeChat 3.2)
[16:59:36] <graingert> petaflot: Where do you open it?
[17:00:27] <graingert> And also completely broken on Twisted I just realised
[17:00:28] *** Joins: node1 (~node1@user/node1)
[17:01:14] *** Joins: Elzington (~Elzington@68.235.43.172)
[17:01:50] <petaflot> this seems like a difficult question. on top of that I apparently broke something and I fail to see where. it's not helping me to concentrate on our present discussion
[17:01:51] <graingert> You can be run by the AsyncioSelectorReactor trampoline running the asyncio.Task trampoline running the  tid.inlinrCallbacks trampoline
[17:01:58] *** Joins: whaley (~whaley@066-169-090-170.res.spectrum.com)
[17:02:04] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[17:02:05] <graingert> And then you get GCd
[17:02:14] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564)
[17:02:27] <graingert> And how do you know which trampoline to run the aclose in and how does the async gen know what to trap?
[17:03:03] <graingert> altendky: ^
[17:03:09] <petaflot> graingert: wait.. was that for me? because it's the first time ever I hear of trampolines in python
[17:03:30] <petaflot> ok
[17:03:49] <graingert> It was for whoever's worried about aclose ;)
[17:05:59] *** Joins: tg (~tg@rockylinux/infra/tg)
[17:06:13] <petaflot> what is a tramppoline in this context?
[17:06:18] *** Joins: Diemuzi (~Diemuzi@ip68-106-203-17.pn.at.cox.net)
[17:06:59] <Yhg1s> petaflot: in this case, it's a function calling something else.
[17:07:19] <Yhg1s> petaflot: https://en.wikipedia.org/wiki/Trampoline_(computing) is the general term.
[17:07:27] *** Joins: Snaffu (Snaffu@gateway/vpn/protonvpn/snaffu)
[17:13:05] <graingert> petaflot: When you await something at the very bottom is a `return (yield trap)`  statement
[17:13:45] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 268 seconds)
[17:14:16] <graingert> That trap describes something to do, or wait for and when to reschedule the current Coroutine
[17:15:15] <graingert> Usually it's a callback in there somewhere, but it could be a simple sentinel like None
[17:15:46] *** Joins: reenix (~reenix@2a01:238:420e:ae00:1c37:63c1:24c0:ff75)
[17:16:23] *** Joins: i0e (~is0ke3@user/is0ke3)
[17:18:01] *** Joins: pnoud (~pnoud@user/pnoud)
[17:18:48] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[17:19:29] *** Quits: dshikoh (~dshikoh@user/dshikoh) (Ping timeout: 265 seconds)
[17:20:48] *** Quits: Blankspace (~abcd@user/blankspace) (Quit: why did you ban me)
[17:22:51] <petaflot> so.. if I understand correctly, `return (yield trap)` is basically telling that the generator is finished/empty, OR what to do next with the generator?
[17:23:37] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 268 seconds)
[17:23:40] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[17:25:56] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 252 seconds)
[17:25:57] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564) (Quit: Client closed)
[17:26:02] *** Joins: todda7 (~torstein@static-qvn-qvu-160026.business.bouyguestelecom.com)
[17:26:04] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 272 seconds)
[17:26:13] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564)
[17:27:56] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 255 seconds)
[17:28:19] *** Joins: Wulf (~Wulf@user/wulf)
[17:28:35] * petaflot needs a break
[17:28:52] *** Quits: tsaka__ (~torstein@static-qvn-qvu-160026.business.bouyguestelecom.com) (Ping timeout: 252 seconds)
[17:29:10] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 268 seconds)
[17:31:16] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564) (Ping timeout: 246 seconds)
[17:32:24] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[17:32:26] *** Quits: jazzy (~jaziz@2600:380:c07e:8a82:9884:b8b5:d3c:5188) (Ping timeout: 255 seconds)
[17:33:22] *** Joins: wyclif (~wyclif@user/wyclif)
[17:33:52] *** Quits: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net) (Quit: Client closed)
[17:35:10] *** Joins: thiras (~thiras@user/thiras)
[17:35:54] *** Joins: pnoud (~pnoud@user/pnoud)
[17:36:20] *** Quits: frost (~frost@59.71.241.179) (Quit: Connection closed)
[17:36:36] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[17:37:56] <graingert> petaflot: The actual `trap` object says what to do
[17:38:16] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 250 seconds)
[17:38:19] <graingert> It could be an asyncio.Future or None if you're using asyncio
[17:38:44] *** Quits: timkofu (~timkofu@user/timkofu) (Quit: Lost terminal)
[17:38:50] *** Joins: wyclif (~wyclif@user/wyclif)
[17:39:02] *** Joins: jdmark2 (~jdmark@67.8.137.130)
[17:39:04] *** Joins: ThanatosJ (~Thanatos@197.210.227.212)
[17:39:28] *** Joins: ustedes (~whaley@066-169-090-170.res.spectrum.com)
[17:39:29] *** Joins: LabMonkey (~LabMonkey@108-246-46-39.lightspeed.rcsntx.sbcglobal.net)
[17:39:45] *** Joins: swn_ (~sweeney@user/swn)
[17:40:02] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[17:40:06] <altendky> graingert: ?
[17:40:20] *** Joins: SirScott1 (~SirScott@c-67-176-100-163.hsd1.co.comcast.net)
[17:40:20] *** Joins: pycode (~pycode@93-40-5-81.ip36.fastwebnet.it)
[17:40:27] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-160-103.austin.res.rr.com)
[17:40:34] *** Joins: etch1 (~etch@user/etch)
[17:40:48] *** Joins: raydeeam_ (uid325131@dgplug/raydeeam)
[17:40:57] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564)
[17:40:57] *** Joins: binchickin3 (~binchicki@165.22.169.69)
[17:41:02] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 258 seconds)
[17:41:12] *** Joins: theo7 (~theo@user/theo)
[17:41:14] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Client Quit)
[17:41:15] *** Joins: chowmein__ (~chowmeine@user/chowmeined)
[17:41:21] *** Quits: anandprabhu_ (anandprabh@gateway/vpn/airvpn/anandprabhu) (Quit: Leaving)
[17:41:23] *** Joins: erica7 (~erica@user/erica)
[17:41:24] *** Joins: ebb_ (ebb@user/ebb)
[17:41:26] *** Joins: Retr0id8 (~Retr0id@user/retr0id)
[17:41:32] *** Joins: radu24240 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net)
[17:41:36] *** Joins: obx (~orange@user/orangeboxcutter)
[17:41:40] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[17:41:51] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[17:41:56] *** Joins: cod1 (~codl@user/codl)
[17:41:56] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564) (Client Quit)
[17:42:02] *** Joins: enrico_ (~enrico@debian/enrico)
[17:42:07] *** Joins: vlm_ (~vlm@user/vlm)
[17:42:07] *** Joins: polyrob_ (~rob@user/polyrob)
[17:42:11] *** Joins: cache (~cache@user/cacheyourdreams)
[17:42:12] *** Joins: domhnall_ (~developer@user/domhnall/x-2887755)
[17:42:13] *** Joins: ihaveamac_ (~ihaveamac@ihaveahax.net)
[17:42:13] *** Joins: majors_ (~majors@user/majors)
[17:42:14] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564)
[17:42:20] *** Quits: pycode1 (~pycode@2001:b07:5d28:551:35db:5f4c:1a3f:8b1c) (Ping timeout: 255 seconds)
[17:42:26] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 252 seconds)
[17:42:26] *** Joins: purplex_ (~purplex@user/purplex)
[17:42:26] *** Joins: vbgunz_ (~vbgunz@35.141.71.47)
[17:42:34] *** Joins: strudl- (~strudl@user/strudl)
[17:42:34] *** Quits: strudl- (~strudl@user/strudl) (Excess Flood)
[17:42:44] *** Joins: JoelJoel (~jjshoe@user/joel)
[17:42:45] *** Joins: bookworm_ (~bookworm@neomutt/bookworm)
[17:42:47] *** Quits: ano (~weechat@user/ano) (Remote host closed the connection)
[17:43:05] *** Joins: strudl- (~strudl@user/strudl)
[17:43:05] *** Quits: strudl- (~strudl@user/strudl) (Excess Flood)
[17:43:11] *** Joins: ano (~weechat@user/ano)
[17:43:14] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[17:43:20] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 258 seconds)
[17:43:20] *** Joins: jootoi_ (~jootoi@130.61.158.197)
[17:43:22] *** Joins: AnySomebody (~AnySomebo@p5b15fbbc.dip0.t-ipconnect.de)
[17:43:27] *** Joins: con3 (~con3@41.71.18.105)
[17:43:28] *** Joins: doc|home (~doc@user/doc)
[17:43:32] *** Joins: Trashlord__ (~trash@user/trashlord)
[17:43:35] *** Joins: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net)
[17:43:36] *** Joins: strudl- (~strudl@user/strudl)
[17:43:36] *** Quits: strudl- (~strudl@user/strudl) (Excess Flood)
[17:43:37] *** Joins: RoyK^ (~roy@user/royk)
[17:43:38] <dunc> Any opinions on dependabot vs renovate vs snyk?
[17:43:38] *** Joins: thm_ (~thomas@fedora/thm)
[17:43:39] *** Quits: ebb (ebb@user/ebb) (Killed (NickServ (GHOST command used by ebb_)))
[17:43:43] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[17:43:43] *** ebb_ is now known as ebb
[17:43:45] *** Joins: nickel84481 (~rahulwadh@147.80.76.34.bc.googleusercontent.com)
[17:43:46] *** Joins: Teacup_ (~teacup@user/teacup)
[17:43:50] *** Joins: Derailed_ (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com)
[17:43:51] *** Joins: m42e_de (~m42e@pb42.de)
[17:44:00] *** Joins: njt_ (~njt@zaph.org)
[17:44:05] *** Joins: bdeferme1 (~bdeferme@i.ctrl86.com)
[17:44:05] *** Joins: JayDoubleu_ (sid339529@id-339529.stonehaven.irccloud.com)
[17:44:05] *** Joins: strudl- (~strudl@user/strudl)
[17:44:05] *** Quits: strudl- (~strudl@user/strudl) (Excess Flood)
[17:44:07] *** Joins: nullheroes (~danielvu@168.235.66.22)
[17:44:10] <con3> ey! when communicating through a comport there's this latency timer that's set as a default to 16ms. Is there anyway I can change it using python/pyserial?
[17:44:13] *** Joins: et_ (~et@user/et)
[17:44:14] *** Joins: Snaffu_ (Snaffu@gateway/vpn/protonvpn/snaffu)
[17:44:15] *** Joins: raek1 (~raek@2001:9b1:efe:3200:d250:99ff:fec0:e153)
[17:44:17] *** Joins: jjhoo_ (~jahakala@dsl-trebng21-58c18f-56.dhcp.inet.fi)
[17:44:18] *** Joins: byzandula1 (~byzandula@beerbq.net)
[17:44:18] *** Joins: lesihctej (jetchisel@user/jetchisel)
[17:44:19] *** Joins: wyclif (~wyclif@user/wyclif)
[17:44:23] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Killed (osmium.libera.chat (Nickname regained by services)))
[17:44:27] *** Joins: Dap (~Dap@user/dap)
[17:44:28] *** Joins: ndimitrij (hun@moooo.n-dimensional.de)
[17:44:29] *** Quits: AM (~techman@87-94-111-135.bb.dnainternet.fi) (Killed (NickServ (GHOST command used by AM_)))
[17:44:32] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[17:44:34] *** Joins: matthewcroughan (~quassel@static.211.38.12.49.clients.your-server.de)
[17:44:36] *** Joins: AM (~techman@87-94-111-135.bb.dnainternet.fi)
[17:44:36] *** Joins: strudl- (~strudl@user/strudl)
[17:44:36] *** Quits: strudl- (~strudl@user/strudl) (Excess Flood)
[17:44:37] *** Joins: henbruas_ (~henbruas@ti0003a400-3211.bb.online.no)
[17:44:39] *** Joins: ThomasJ_ (~ThomasJ@user/thomasj)
[17:45:11] *** Joins: xavierdarkness_ (~xavierdar@user/xavierdarkness)
[17:45:52] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:46:16] *** Quits: lesihctej (jetchisel@user/jetchisel) (Client Quit)
[17:46:20] *** Joins: kujo1 (~kujo@188.166.12.52)
[17:46:20] *** Quits: sandeepk (~sandeepk@223.130.30.149) (Read error: Connection reset by peer)
[17:46:23] *** Joins: mxp_ (~mxp@82.98.30.69)
[17:47:03] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 268 seconds)
[17:47:20] *** Joins: t3nj1n_ (~t3nj1n@108.5.82.237)
[17:47:35] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Killed (osmium.libera.chat (Nickname regained by services)))
[17:48:09] <petaflot> graingert, Yhg1s : thanks for your help! now that things are done "right" (well not quite) the speed improvement must be like 4 orders of magnitude at least. I'm still trying to get over it ;-)
[17:48:40] *** Quits: bookworm (~bookworm@neomutt/bookworm) (Killed (NickServ (GHOST command used by bookworm_)))
[17:48:48] *** Quits: Snaffu (Snaffu@gateway/vpn/protonvpn/snaffu) (*.net *.split)
[17:48:48] *** Quits: whaley (~whaley@066-169-090-170.res.spectrum.com) (*.net *.split)
[17:48:48] *** Quits: vbgunz (~vbgunz@35.141.71.47) (*.net *.split)
[17:48:48] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (*.net *.split)
[17:48:48] *** Quits: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk) (*.net *.split)
[17:48:48] *** Quits: Thanatos (~Thanatos@197.210.54.252) (*.net *.split)
[17:48:48] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (*.net *.split)
[17:48:48] *** Quits: Leonarbro (~Leonet@user/leonarbro) (*.net *.split)
[17:48:48] *** Quits: zegalch (~zegalch@178.128.75.133) (*.net *.split)
[17:48:48] *** Quits: t3nj1n (~t3nj1n@108.5.82.237) (*.net *.split)
[17:48:48] *** Quits: jetchisel (jetchisel@user/jetchisel) (*.net *.split)
[17:48:48] *** Quits: byzandula (~byzandula@beerbq.net) (*.net *.split)
[17:48:48] *** Quits: vlm (~vlm@user/vlm) (*.net *.split)
[17:48:48] *** Quits: jdmark (~jdmark@67.8.137.130) (*.net *.split)
[17:48:48] *** Quits: chowmeined (~chowmeine@user/chowmeined) (*.net *.split)
[17:48:48] *** Quits: ttkpy (501@46-97-229-216.sr2.pon.net) (*.net *.split)
[17:48:48] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (*.net *.split)
[17:48:48] *** Quits: henbruas (~henbruas@ti0003a400-3211.bb.online.no) (*.net *.split)
[17:48:48] *** Quits: Brocker (~NoBody@user/brocker) (*.net *.split)
[17:48:48] *** Quits: erica (~erica@user/erica) (*.net *.split)
[17:48:48] *** Quits: Mechanismus (~LabMonkey@108-246-46-39.lightspeed.rcsntx.sbcglobal.net) (*.net *.split)
[17:48:48] *** Quits: rndusr (~rndusr@user/rndusr) (*.net *.split)
[17:48:48] *** Quits: seoul_man (~meh@user/seoul-man/x-5066766) (*.net *.split)
[17:48:48] *** Quits: swn (~sweeney@user/swn) (*.net *.split)
[17:48:49] *** Quits: hqdruxn08__ (~hqdruxn08@cpe-66-68-160-103.austin.res.rr.com) (*.net *.split)
[17:48:49] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (*.net *.split)
[17:48:49] *** Quits: majors (~majors@user/majors) (*.net *.split)
[17:48:49] *** Quits: binchickin (~binchicki@165.22.169.69) (*.net *.split)
[17:48:49] *** Quits: Teacup (~teacup@user/teacup) (*.net *.split)
[17:48:49] *** Quits: raydeeam (uid325131@dgplug/raydeeam) (*.net *.split)
[17:48:49] *** Quits: strudl (~strudl@user/strudl) (*.net *.split)
[17:48:49] *** Quits: ThomasJ (~ThomasJ@user/thomasj) (*.net *.split)
[17:48:49] *** Quits: jootoi (~jootoi@130.61.158.197) (*.net *.split)
[17:48:49] *** Quits: Wooble (~Wooble@107.170.27.240) (*.net *.split)
[17:48:49] *** Quits: Confusioned (~AnySomebo@p5b15fbbc.dip0.t-ipconnect.de) (*.net *.split)
[17:48:49] *** Quits: cacheyourdreams (~cache@user/cacheyourdreams) (*.net *.split)
[17:48:49] *** Quits: etch (~etch@user/etch) (*.net *.split)
[17:48:49] *** Quits: enrico (~enrico@debian/enrico) (*.net *.split)
[17:48:49] *** Quits: Retr0id (~Retr0id@user/retr0id) (*.net *.split)
[17:48:49] *** Quits: mxp (~mxp@82.98.30.69) (*.net *.split)
[17:48:49] *** Quits: et (~et@user/et) (*.net *.split)
[17:48:49] *** Quits: SirScott (~SirScott@c-67-176-100-163.hsd1.co.comcast.net) (*.net *.split)
[17:48:49] *** Quits: Xavierdarkness (~xavierdar@user/xavierdarkness) (*.net *.split)
[17:48:49] *** Quits: radu2424 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net) (*.net *.split)
[17:48:49] *** Quits: Amun-Ra (~amun-ra@retro.rocks) (*.net *.split)
[17:48:49] *** Quits: dvu (~danielvu@168.235.66.22) (*.net *.split)
[17:48:49] *** Quits: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com) (*.net *.split)
[17:48:49] *** Quits: j00n (~mario@user/j00n) (*.net *.split)
[17:48:49] *** Quits: nickel8448 (~rahulwadh@147.80.76.34.bc.googleusercontent.com) (*.net *.split)
[17:48:49] *** Quits: TFKyle (~kyle@64.201.205.70) (*.net *.split)
[17:48:49] *** Quits: polyrob (~rob@user/polyrob) (*.net *.split)
[17:48:49] *** Quits: t2mkn (~t2mkn@user/t2mkn) (*.net *.split)
[17:48:49] *** Quits: njt (~njt@zaph.org) (*.net *.split)
[17:48:49] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (*.net *.split)
[17:48:49] *** Quits: thm (~thomas@fedora/thm) (*.net *.split)
[17:48:49] *** Quits: super (~0@user/clueless) (*.net *.split)
[17:48:49] *** Quits: daddy (~ryan@hashbang/bdfl) (*.net *.split)
[17:48:49] *** Quits: jjhoo (~jahakala@dsl-trebng21-58c18f-56.dhcp.inet.fi) (*.net *.split)
[17:48:49] *** Quits: Madda (~Madda@208.249.9.51.dyn.plus.net) (*.net *.split)
[17:48:49] *** Quits: matthewcroughan_ (~quassel@static.211.38.12.49.clients.your-server.de) (*.net *.split)
[17:48:49] *** Quits: shailangsa (~shailangs@host86-186-196-229.range86-186.btcentralplus.com) (*.net *.split)
[17:48:49] *** Quits: raek (~raek@h-109-228-152-171.A163.priv.bahnhof.se) (*.net *.split)
[17:48:49] *** Quits: ihaveamac (~ihaveamac@ihaveahax.net) (*.net *.split)
[17:48:49] *** Quits: JayDoubleu (sid339529@stonehaven.irccloud.com) (*.net *.split)
[17:48:49] *** Quits: robert_ (~hellspawn@47.203.169.95) (*.net *.split)
[17:48:49] *** Quits: orangeboxcutter (~orange@user/orangeboxcutter) (*.net *.split)
[17:48:49] *** Quits: Joel (~jjshoe@user/joel) (*.net *.split)
[17:48:49] *** Quits: asix (~Anders@user/asix) (*.net *.split)
[17:48:49] *** Quits: Trashlord (~trash@user/trashlord) (*.net *.split)
[17:48:49] *** Quits: purplex (~purplex@user/purplex) (*.net *.split)
[17:48:49] *** Quits: doc (~doc@user/doc) (*.net *.split)
[17:48:49] *** Quits: nickodd (~nickodd@user/nickodd) (*.net *.split)
[17:48:49] *** Quits: Dyresen (bjorn@128.39.36.51) (*.net *.split)
[17:48:49] *** Quits: ndim (~hun@moooo.n-dimensional.de) (*.net *.split)
[17:48:49] *** Quits: codl (~codl@user/codl) (*.net *.split)
[17:48:49] *** Quits: bdeferme (~bdeferme@i.ctrl86.com) (*.net *.split)
[17:48:49] *** Quits: yemel (~yemel@user/yemel) (*.net *.split)
[17:48:49] *** Quits: kujo (~kujo@188.166.12.52) (*.net *.split)
[17:48:49] *** Quits: Bobathan (~admin@cpe-65-29-248-157.wi.res.rr.com) (*.net *.split)
[17:48:49] *** Quits: sybariten (~jake@78-47-86-21.cinfuserver.com) (*.net *.split)
[17:48:49] *** Quits: theo (~theo@user/theo) (*.net *.split)
[17:48:49] *** Quits: _0ne (~one@user/0ne/x-2101768) (*.net *.split)
[17:48:49] *** Quits: Ninpo (~Ninpo@charlton.qap.la) (*.net *.split)
[17:48:49] *** Quits: DaPinkOne (~Dap@user/dap) (*.net *.split)
[17:48:49] *** Quits: RoyK (~roy@user/royk) (*.net *.split)
[17:48:49] *** Quits: Nahra (~user@static.161.95.99.88.clients.your-server.de) (*.net *.split)
[17:48:49] *** ThomasJ_ is now known as ThomasJ
[17:48:49] *** cod1 is now known as codl
[17:48:49] *** et_ is now known as et
[17:48:49] *** SirScott1 is now known as SirScott
[17:48:49] *** polyrob_ is now known as polyrob
[17:48:49] *** theo7 is now known as theo
[17:48:50] *** etch1 is now known as etch
[17:48:50] *** Retr0id8 is now known as Retr0id
[17:48:50] *** radu24240 is now known as radu2424
[17:48:50] *** xavierdarkness_ is now known as xavierdarkness
[17:48:51] *** raydeeam_ is now known as raydeeam
[17:48:52] *** bookworm_ is now known as bookworm
[17:48:52] *** vlm_ is now known as vlm
[17:48:52] *** erica7 is now known as erica
[17:48:53] *** henbruas_ is now known as henbruas
[17:48:53] *** njt_ is now known as njt
[17:48:56] *** purplex_ is now known as purplex
[17:48:57] *** JayDoubleu_ is now known as JayDoubleu
[17:49:07] *** swn_ is now known as swn
[17:49:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[17:49:18] *** Joins: zegalch (~zegalch@178.128.75.133)
[17:49:34] *** Joins: TFKyle (~kyle@64.201.205.70)
[17:49:50] *** Joins: wyclif (~wyclif@user/wyclif)
[17:50:09] *** Parts: ferz (~ferz@146-241-129-188.dyn.eolo.it) ()
[17:51:06] *** Joins: mohite (~mohite@171.61.40.52)
[17:51:36] <very_sneaky> Luyin: you can also just pass the path to your python 3.9.0 shim directly
[17:51:53] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[17:52:55] *** JoelJoel is now known as Joel
[17:53:14] <SnoopJ> Sanity check: if I do `it1, it2 = itertools.tee(gen(), 2)` to get a second iterator from a (pure) generator, then consume one of those iterators, the memory burden is roughly like I'd done `l = list(gen())`, right? The runtime must be holding a copy?
[17:53:22] <very_sneaky> Luyin: `pipenv install --python /home/user/.pyenv/versions/3.9.0/bin/python` would probably work - double check the path
[17:53:26] <Yhg1s> SnoopJ: yes.
[17:53:30] <SnoopJ> Yhg1s, thank you :)
[17:53:39] <Yhg1s> (it's more like a deque than a list, but the memory use is the same)
[17:53:51] <Luyin> very_sneaky: for the moment I'm going with my idea of just creating the venv beforehand. but thanks, I'll keep it in mind! :)
[17:53:52] *** Byteflux is now known as Bitflux
[17:54:06] *** Mandus_ is now known as Mandus
[17:54:09] *** Bitflux is now known as Byteflux
[17:54:40] <SnoopJ> yea I figured it would probably be a little more clever than list(). It's not a problem in my case, this is just log output, but I wanted to confirm that there's a pitfall there.
[17:54:45] <very_sneaky> Luyin: i'm confused, don't you need to do the same thing to set up the virtualenv?
[17:55:02] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[17:55:03] *** Joins: Madda (~Madda@208.249.9.51.dyn.plus.net)
[17:55:11] <very_sneaky> if you don't specify the path to a specific interpreter it will just use your global interpreter, which will be 3.9.6 in this case
[17:55:18] *** Joins: asix (~Anders@user/asix)
[17:55:21] *** Joins: Wooble (~Wooble@107.170.27.240)
[17:55:31] <very_sneaky> this would just remove a step
[17:55:56] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564) (Quit: Client closed)
[17:56:01] *** Joins: Amun-Ra (~amun-ra@retro.rocks)
[17:56:11] *** Joins: _0ne (~one@user/0ne/x-2101768)
[17:56:12] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564)
[17:56:15] *** Joins: daddy (~ryan@hashbang/bdfl)
[17:56:26] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[17:56:26] <SnoopJ> Yhg1s, I guess "copy" isn't really the word I should use, a quick peek at itertoolsmodule.c suggests it's just not-discarding the single necessary value
[17:56:58] *** Joins: computeiro (~Wender@189.37.67.197)
[17:57:48] *** Joins: ioe (~is0ke3@user/is0ke3)
[17:58:06] *** Quits: jdmark2 (~jdmark@67.8.137.130) (Quit: Leaving)
[17:58:18] <Yhg1s> SnoopJ: single? It's not-discarding all values that haven't been consumed yet.
[17:58:36] <Yhg1s> that haven't been consumed by all iterators, I mean.
[17:59:08] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[17:59:17] *** Joins: schangg (~schangg@2a01cb080746b7008639c0fffe0203dd.ipv6.abo.wanadoo.fr)
[17:59:40] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 252 seconds)
[17:59:52] *** Quits: weibullguy (~D._Rowlan@2600:6c4a:7d00:fe22:4ced:6a14:8bb7:6d54) (Quit: WeeChat 3.2)
[18:00:11] <schangg> Hello. There is a script that I would to get a better understanding of. I was thinking of adding print("I am in this function") for every function to get a better understanding of the flow
[18:00:31] <schangg> I guess that I am doing it wrong and that there must ways to track that automatically
[18:00:36] <schangg> is there ?
[18:00:44] <grym> schangg: https://github.com/zestyping/q  @q is nice
[18:00:54] <grym> if you like print-debugging-but-wow
[18:01:25] <grym> schangg: otherwise, drop a breakpoint at the beginning and just step, step, step :)
[18:01:33] *** ndimitrij is now known as ndim
[18:01:43] <schangg> thanks
[18:02:37] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[18:02:48] *** Quits: schangg (~schangg@2a01cb080746b7008639c0fffe0203dd.ipv6.abo.wanadoo.fr) (Client Quit)
[18:02:55] <bjs> schangg: see also https://docs.python.org/3/library/trace.html
[18:03:00] <bjs> and python3 -m trace --trace somefile.py
[18:03:09] <Luyin> very_sneaky: is it? I thought that's what pipenv is there for.
[18:03:14] <Luyin> very_sneaky: I'm confused too know
[18:03:27] <bjs> oh they left
[18:03:38] <grym> :(
[18:03:47] <very_sneaky> Luyin: i might just not understand what you're doing. Are you running `virtualenv venv; source venv/bin/activate; pipenv --install`?
[18:04:08] <very_sneaky> if so, you would still need to run `virtualenv venv -p /path/to/python/3.9.0`
[18:04:20] <bjs> grym: I swear this is the like the 3rd or 4th time in the last week this has happened to me
[18:04:22] <bjs> haha
[18:04:29] <very_sneaky> er, args around the other way
[18:04:31] <grym> bjs: i think i'm only up to two
[18:04:47] <grym> bjs: but i have one petulant questioner here on ignore, so i could be undercounting :)
[18:05:01] *** Quits: mohite (~mohite@171.61.40.52) (Quit: Client closed)
[18:05:32] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Ping timeout: 252 seconds)
[18:05:44] <acresearch> people, i am having trouble understanding a class (spesifically a keras data generator),,, would someone assist me with it? only 2 small functions that i don't get how they work: https://paste.debian.net/1204573/
[18:06:20] <Luyin> very_sneaky: I'm running a custom wrapper script to call pyenv install, then pyenv virtualenv, then creating the .python-version, all in one, but basically it's that, yes.
[18:07:03] *** Joins: han-solo (~hanish@user/han-solo)
[18:07:18] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[18:07:18] *** Quits: ThanatosJ (~Thanatos@197.210.227.212) (Ping timeout: 250 seconds)
[18:07:36] *** Joins: anandprabhu (~anandprab@94.202.243.198)
[18:09:46] *** Joins: mohite (~mohite@171.61.40.52)
[18:09:48] *** Joins: Pseudocrat (~sudo@user/pseudocrat)
[18:10:17] *** Parts: mohite (~mohite@171.61.40.52) ()
[18:10:18] *** Joins: Julian (~tos9@python/site-packages/Julian)
[18:10:36] *** Joins: tonberry (~tonberry@user/d00gy)
[18:10:48] *** Joins: henistein (~henistein@2001:8a0:c1b3:6b01:9121:3364:ed44:3bdb)
[18:10:50] *** Parts: henistein (~henistein@2001:8a0:c1b3:6b01:9121:3364:ed44:3bdb) ()
[18:11:17] *** Quits: LabMonkey (~LabMonkey@108-246-46-39.lightspeed.rcsntx.sbcglobal.net) (Quit: Leaving)
[18:11:32] *** Joins: LabMonkey (~LabMonkey@108-246-46-39.lightspeed.rcsntx.sbcglobal.net)
[18:11:39] *** LabMonkey is now known as Mechanismus
[18:11:47] *** tonberry is now known as d00gy
[18:12:12] <SnoopJ> Yhg1s, what I mean is, there isn't a "copy" of any datum, there's the stuff in `tdo->values`, and independent iterators over that. I didn't take a close look, very possible I read it wrong
[18:12:54] *** Quits: ustedes (~whaley@066-169-090-170.res.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[18:13:58] *** Quits: doev (~doev@82.115.100.62) (Ping timeout: 246 seconds)
[18:13:58] *** Quits: con3 (~con3@41.71.18.105) (Ping timeout: 252 seconds)
[18:14:05] *** Quits: yogoyo (~yogoyo@user/yogoyo) (Quit: bye)
[18:14:18] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[18:15:37] <SnoopJ> i.e. the generator churns and makes values, and the runtime keeps them around until they're no longer needed: you "pay" for the values coming out of the generator just once
[18:16:47] <SnoopJ> (and I guess if anything was copied it'd be PyObject* _anyway_)
[18:17:14] <Yhg1s> yes, of course, it's references all the way down.
[18:17:15] *** Quits: Snaffu_ (Snaffu@gateway/vpn/protonvpn/snaffu) (Quit: leaving)
[18:17:43] <SnoopJ> I am only an egg :)
[18:18:03] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[18:18:06] <nubonix> anyone used httpx when creating an exe before? [pyinstaller], ive installed httpx, but it says the module is not found when i try to run the exe?
[18:18:18] <Yhg1s> if you were to tee into two iterators, consume one of them and not touch the other, it's just like list(gen()).
[18:18:27] *** Joins: cdown (~cdown@89.32.122.5)
[18:18:48] <nubonix> im running pyinstaller within the same venv i am able to run the python file that is == the exe
[18:18:57] *** Joins: ZenixOwler (~zenix@118.69.128.37)
[18:19:00] <SnoopJ> 👍
[18:19:04] <ZenixOwler> question, if i am intending to make a web-based chatting server, which framework should i be using ? currently i am dealing with flask but not sure if it's good enough
[18:19:06] *** Joins: Snyp (~rksht@49.207.206.57)
[18:19:34] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 246 seconds)
[18:19:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[18:19:56] *** Quits: phylaz (~phylaz@219.92-221-176.customer.lyse.net) (Quit: The Lounge - https://thelounge.chat)
[18:20:05] <grym> ZenixOwler: fastAPI is flask-feeling but gives you async for free, which might be really nice for chat
[18:20:18] <nubonix> ZenixOwler typically you want to use websockets with chat apps, you could use flask as im sure they have support for that, but there are other alternatives like starlette
[18:20:24] <nubonix> or django
[18:20:32] <grawity> iirc, quart is "flask but async"
[18:20:35] <SnoopJ> I may end up re-writing it with list(gen) anyway, itertools.tee() is pretty high magic for "I want to pass these logs through our output handler, but also use them later"
[18:20:35] *** Joins: phylaz (~phylaz@219.92-221-176.customer.lyse.net)
[18:20:36] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[18:20:37] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564) (Quit: Client closed)
[18:20:42] <ZenixOwler> oh yea, django is cool but a bit too huge to handle, maybe flask is cool
[18:20:47] <ZenixOwler> or flask with async :P
[18:20:48] <ZenixOwler> thk
[18:20:49] <grym> grawity: starlette, too (which is what fastAPI uses)
[18:20:49] <nubonix> starlette > fastapi
[18:20:53] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041)
[18:20:57] <SnoopJ> nubonix, fastapi *is* starlette
[18:21:08] <nubonix> starlette is built on top of it
[18:21:11] <SnoopJ> other way around
[18:21:19] <nubonix> really?
[18:21:21] *** Joins: ELFrederich (~ELFrederi@134.244.29.70)
[18:21:22] <SnoopJ> FastAPI is starlette + pydantic + [special sauce]
[18:21:27] *** Joins: wovixo (~wovixo@128.104.205.49)
[18:21:30] <nubonix> huh
[18:21:33] <nubonix> interesting
[18:21:34] <nubonix> alright
[18:21:35] *** Quits: cdown_ (~cdown@163.114.131.1) (Ping timeout: 268 seconds)
[18:21:54] <nubonix> well, its dope, regardless :D
[18:21:54] <SnoopJ> nubonix, this is a great interview with the creator that talks about this (and lots of other stuff): https://talkpython.fm/episodes/show/284/modern-and-fast-apis-with-fastapi
[18:22:04] <SnoopJ> I agree, it's lovely :)
[18:22:48] <nubonix> ZenixOwler: def fastapi then as its > flask [imo]
[18:23:15] <ZenixOwler> nubonix: you mean this one ? https://fastapi.tiangolo.com/
[18:23:17] <SnoopJ> ZenixOwler, "flask with async" is pretty close to how I feel about FastAPI
[18:23:39] <SnoopJ> but not writing the ton of validation code that I used to do with Flask is nice, too
[18:24:20] <grym> ZenixOwler: that's the one
[18:24:36] <ZenixOwler> ok got it
[18:24:38] <ZenixOwler> thk
[18:24:54] <nubonix> ye
[18:26:03] *** Joins: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl)
[18:26:34] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041) (Ping timeout: 246 seconds)
[18:26:54] <ZenixOwler> now i wonder if someone makes a web-chat just by using bare flask :P
[18:27:55] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[18:28:11] <SnoopJ> not sure if there's any "serious" applications out there, but certainly lots of tutorials/hobby projects do this.
[18:28:17] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041)
[18:28:24] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[18:28:28] <SnoopJ> s/hobby/demo/
[18:28:30] <ZenixOwler> Uh, fair enough
[18:29:06] <Luyin> s/demo/hacky version that got stuck and ended up in prod/
[18:29:12] <Luyin> happens almost never! promise!
[18:29:22] <SnoopJ> I don't see any reason you couldn't make a "serious" app that way, other than Flask being kind of a pain when it comes to scaling. That's one of the things FastAPI does very nicely
[18:29:35] <SnoopJ> Luyin, idgi, that regex doesn't change anything? ;)
[18:29:53] <nubonix> SnoopJ you can its just more difficult
[18:29:58] <nubonix> o :D
[18:30:05] <nubonix> `being kind of a pain when it comes to scaling.`
[18:30:06] <SnoopJ> nubonix, scale up with Flask, you mean?
[18:30:09] <nubonix> yeah
[18:30:17] <nubonix> that and organizing
[18:30:22] *** Quits: zinc (~zdleaf@163.ip-51-254-203.eu) (Quit:  )
[18:30:29] <SnoopJ> I think we're agreeing on that point
[18:30:33] <nubonix> mm
[18:31:04] *** Quits: tm007 (uid287041@id-287041.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[18:31:05] <nubonix> anyone used httpx when creating an exe before? [pyinstaller], ive installed httpx, but it says the module is not found when i try to run the exe?
[18:31:12] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Reconnecting)
[18:31:47] <nubonix> its failing to import httpx, which idky b/c it is installed so...
[18:31:48] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[18:32:50] <SnoopJ> nubonix, sounds like PyInstaller didn't bundle it, maybe it doesn't understand your package's dependencies
[18:33:03] *** Joins: zinc (~zinc@163.ip-51-254-203.eu)
[18:33:09] <SnoopJ> (is it declared as one?)
[18:33:13] *** Quits: tspng (~tspng@2a02:168:a1a1:1:497:99f5:e950:3635) (Remote host closed the connection)
[18:33:20] <nubonix> ZenixOwler: you can make a bare anything without any libraries, as all libraries are is code that is prewritten for you that makes things easier
[18:33:59] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:34:01] <nubonix> but thats not really python, or any language, because at that point you are writing your own
[18:34:53] <ZenixOwler> nubonix: well yea i knew, even with the standard http handling lib :P but i do know that no one would be hardcore enough to try those so i thought of something slightly more possible which is bare flask
[18:35:28] *** Quits: Masterphi (~Masterphi@user/masterphi) (Ping timeout: 258 seconds)
[18:35:35] <nubonix> ZenixOwler: i dont advize it, make it easier on yourself in the longrun, as you might be wishing you did so afterwards
[18:36:16] <nubonix> why spend time re-inventing the wheel when its handle to you on a platter
[18:36:27] <nubonix> take advantage!
[18:36:34] <nubonix> just my thoughts tho
[18:36:50] <ZenixOwler> still fun to know lower level stuffs :P
[18:37:04] <nubonix> not sure flask is low level
[18:37:13] <ZenixOwler> oh no i mean the http standard lib
[18:37:17] <nubonix> as the api is almost the same as fastapi
[18:37:22] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[18:37:22] <ZenixOwler> and comparing fastAPI to it, i think it is lower
[18:37:37] <ZenixOwler> maybe... slightly lower
[18:37:41] <SnoopJ> `http` is...not great.
[18:37:48] <nubonix> http.lib is not fun
[18:38:01] <nubonix> and urllib3 it literly tells you in the docs to not use it, and to use requests instead
[18:38:03] <SnoopJ> it's useful when you want a very basic server because you wanna see some local files, though
[18:38:32] *** Quits: pycode (~pycode@93-40-5-81.ip36.fastwebnet.it) (Ping timeout: 258 seconds)
[18:38:37] <ZenixOwler> as far as i know, yea, that's the only case where it is in need
[18:38:39] <SnoopJ> `http.server`, anyway. The rest is perfectly fine
[18:38:43] <ZenixOwler> or simply i just do python -m http.server
[18:38:49] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 246 seconds)
[18:38:57] <SnoopJ> yea, that's basically the use-case
[18:39:20] <SnoopJ> http.HTTPStatus *is* great :)
[18:41:17] *** Quits: domhnall_ (~developer@user/domhnall/x-2887755) (Quit: leaving)
[18:43:20] *** Joins: weibullguy (~drowland@2600:6c4a:7d00:fe22:4ced:6a14:8bb7:6d54)
[18:43:49] *** Joins: akk (~akk@97-123-109-214.albq.qwest.net)
[18:46:53] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[18:48:30] *** Quits: todda7 (~torstein@static-qvn-qvu-160026.business.bouyguestelecom.com) (Ping timeout: 258 seconds)
[18:49:14] *** Joins: ThanatosJ (~Thanatos@197.210.227.97)
[18:49:33] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-0dd5-40fe-995e-105e.res6.spectrum.com)
[18:53:57] *** Quits: anandprabhu (~anandprab@94.202.243.198) (Quit: Leaving)
[18:54:01] *** Quits: ZenixOwler (~zenix@118.69.128.37) (Quit: Leaving)
[18:54:06] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041) (Quit: Client closed)
[18:54:23] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564)
[18:56:44] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[18:57:42] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[18:59:28] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564) (Ping timeout: 246 seconds)
[19:02:26] *** Joins: _ELFrederich (~ELFrederi@134.244.29.70)
[19:02:42] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[19:03:01] *** raek1 is now known as raek
[19:03:16] *** Joins: dshikoh (~dshikoh@user/dshikoh)
[19:03:25] *** Joins: Ninpo (~Ninpo@charlton.qap.la)
[19:03:48] *** Joins: wyclif (~wyclif@user/wyclif)
[19:04:09] *** Quits: ELFrederich (~ELFrederi@134.244.29.70) (Remote host closed the connection)
[19:06:00] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564)
[19:06:34] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::f245) (Ping timeout: 240 seconds)
[19:06:34] *** Quits: tanner (~tanner@tilde.town) (Ping timeout: 240 seconds)
[19:06:34] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[19:06:49] *** Quits: han-solo (~hanish@user/han-solo) (Ping timeout: 246 seconds)
[19:07:46] *** Joins: tanner (~tanner@tilde.town)
[19:08:16] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:08:33] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[19:09:16] *** Joins: wyclif (~wyclif@user/wyclif)
[19:09:53] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[19:10:17] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[19:10:17] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Quit: Leaving)
[19:10:22] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[19:10:34] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[19:10:49] *** Quits: Tas-sos (~Tas-sos@78-159-56.adsl.cyta.gr) (Quit: Lost terminal)
[19:13:06] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:13:16] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::f245)
[19:14:11] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[19:14:30] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[19:14:45] *** Joins: wyclif (~wyclif@user/wyclif)
[19:16:44] *** Joins: CodePoint (~BitShift@2607:fb90:c69:cd2:4a54:fcd3:821f:a711)
[19:18:19] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[19:18:46] *** Quits: ambv (~ambv@c138-59.icpnet.pl) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:19:14] *** Quits: t3nj1n_ (~t3nj1n@108.5.82.237) (Ping timeout: 252 seconds)
[19:19:33] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[19:20:48] *** Quits: dshikoh (~dshikoh@user/dshikoh) (Quit: Konversation terminated!)
[19:22:26] *** Joins: t3nj1n_ (~t3nj1n@108.5.82.237)
[19:23:08] *** Joins: han-solo (~hanish@user/han-solo)
[19:23:17] *** Joins: ambv (~ambv@c138-59.icpnet.pl)
[19:24:04] *** Joins: Roey (~Roey@user/Roey)
[19:24:29] *** Quits: p-i-_ (~Ohmu@node-183p.pool-118-173.dynamic.totinternet.net) (Remote host closed the connection)
[19:25:47] *** Joins: wyclif (~wyclif@user/wyclif)
[19:30:02] *** Quits: t3nj1n_ (~t3nj1n@108.5.82.237) (Ping timeout: 268 seconds)
[19:30:39] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[19:30:44] *** Quits: ano (~weechat@user/ano) (Remote host closed the connection)
[19:31:08] *** Joins: ano (~weechat@user/ano)
[19:31:14] *** xavierdarkness is now known as Xavierdarkness
[19:36:45] *** Joins: pnoud (~pnoud@user/pnoud)
[19:36:48] *** Joins: wyclif (~wyclif@user/wyclif)
[19:38:34] *** Joins: zathras (~zodd@84-106-62-193.cable.dynamic.v4.ziggo.nl)
[19:38:59] *** Joins: skapata (~Skapata@user/skapata)
[19:39:16] <zathras> I wrote a script to download attachments. Works fine on a small set of mailmessages. But on a large set I get: imaplib.error: fetch command error: bad ['error in imap command fetch: invalid messageset']
[19:39:40] <zathras> is there an alternative? (msgs can have multiple attachments)
[19:39:46] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:39:48] *** Joins: arunmathaisk (~arunmatha@103.156.236.173)
[19:39:59] *** Quits: clawh (~clawh@185.244.214.60) (Remote host closed the connection)
[19:40:01] <arunmathaisk> hi folks !
[19:41:47] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[19:41:51] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 255 seconds)
[19:42:08] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[19:42:19] *** Joins: wyclif (~wyclif@user/wyclif)
[19:43:03] *** Joins: clawh (~clawh@185.244.214.60)
[19:43:59] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 244 seconds)
[19:44:51] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 258 seconds)
[19:45:24] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[19:46:45] <graingert> have to say `has_toml = re.search(r"^\[tool\.coverage\.", toml_text, flags=re.MULTILINE)` is a lifesaver
[19:46:45] *** Quits: schumaml (~schumaml@dslb-178-007-202-155.178.007.pools.vodafone-ip.de) (Quit: WeeChat 3.0.1)
[19:47:20] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[19:47:49] *** Joins: wyclif (~wyclif@user/wyclif)
[19:48:00] *** Joins: kostkon (~androirc@2a02:1388:95:fc85:d372:22db:f46c:2d15)
[19:48:25] *** Joins: FluffyMask (~masque@user/fluffymask)
[19:51:04] *** Joins: p-i- (~Ohmu@node-183p.pool-118-173.dynamic.totinternet.net)
[19:51:50] *** Joins: zebrag (~chris@user/zebrag)
[19:52:05] *** Joins: qlixed (~qlixed@181.44.129.13)
[19:52:09] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Remote host closed the connection)
[19:52:16] *** Joins: kosh (~kosh@user/kosh)
[19:52:17] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[19:52:39] *** Quits: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz) (Ping timeout: 255 seconds)
[19:52:51] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[19:53:41] *** Joins: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz)
[19:53:55] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:53:55] *** Quits: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu) (Quit: Client closed)
[19:54:09] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564) (Quit: Client closed)
[19:54:27] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564)
[19:55:27] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[19:56:14] <sectec84> If I have two conda environments A and B is there a simple way while env B is active to say "install all of the packages that are installed in A but not in B"
[19:56:47] <sectec84> Like if the package isn't already installed in B, and it is installed in A, I want to install it in env B
[19:57:22] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[19:58:09] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[19:58:51] *** Joins: wyclif (~wyclif@user/wyclif)
[19:59:40] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564) (Ping timeout: 246 seconds)
[19:59:58] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[20:01:07] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:cc87:ce85:2ae:5eaf)
[20:01:37] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564)
[20:01:54] <SnoopJ> sectec84, installing something that's already installed usually doesn't do anything, so you might be able to truncate that to "install everything from A" unless you're juggling different versions of the same packages.
[20:03:38] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[20:04:26] *** Joins: wyclif (~wyclif@user/wyclif)
[20:05:16] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[20:05:53] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[20:07:01] *** Joins: Payam (~Payam@c83-250-236-236.bredband.tele2.se)
[20:07:14] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[20:07:27] <sectec84> SnoopJ, Yeah - it's the "different versions of packages" part that I'm worried about. I'm using an AWS Deep Learning AMI and it has a bunch of pre-installed environments. I have a custom conda environment that I made, and I want to pull all of the packages from one of the pre-installed ones but not overwrite anything where there are specific versions installed (for instance I have a specific version of PyTorch installed, and the env I want to pull from
[20:07:27] <sectec84> has the default version installed and I don't want it to upgrade PyTorch)
[20:07:41] *** Quits: akk (~akk@97-123-109-214.albq.qwest.net) (Ping timeout: 255 seconds)
[20:07:53] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[20:07:55] *** Quits: Payam (~Payam@c83-250-236-236.bredband.tele2.se) (Client Quit)
[20:09:04] <sectec84> if I have a specific version of pytorch already installed in my conda env, and I do "conda install pytorch" would it overwrite it?
[20:09:06] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[20:09:21] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[20:09:37] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[20:09:42] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[20:10:14] *** Joins: wyclif (~wyclif@user/wyclif)
[20:10:17] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[20:10:27] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[20:10:49] *** Joins: zebrag (~chris@user/zebrag)
[20:10:57] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[20:11:12] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[20:11:33] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[20:11:33] *** Joins: librenaut (~librenaut@user/librenaut)
[20:12:27] <acresearch> people, anyone understands the keras data generator? i am trying to code one but i do not understand what it needs, can someone help me?
[20:12:38] *** Quits: kostkon (~androirc@2a02:1388:95:fc85:d372:22db:f46c:2d15) (Ping timeout: 255 seconds)
[20:12:51] <jinsun> sectec84: a not so simple way: dump the output of `conda list -n A --json` and `conda list -n B --json` and json.load them in a python script, and make two sets of the names and take a set difference, and create a conda install command out of that
[20:13:45] <sectec84> jinsun, yeah - I was hoping there was some sort of built in "diff" command with conda that would do this, but I think I might have to resort to what you're talking about
[20:14:34] *** Quits: finsternis (~X@23.226.237.192) (Remote host closed the connection)
[20:14:42] <jinsun> sectec84: if you didn't care about the versions of B then `conda env export -n A` + `conda env update` in B would have worked
[20:15:08] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[20:15:14] <SnoopJ> sectec84, I'd be thinking about what jinsun said, I don't think there's a tool for this (but I don't really use conda, so don't mistake me for an authority)
[20:15:23] *** Joins: sybariten (~jake@78-47-86-21.cinfuserver.com)
[20:15:46] *** Joins: wyclif (~wyclif@user/wyclif)
[20:16:06] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[20:16:16] *** _ELFrederich is now known as ELFrederich
[20:16:30] <sectec84> thanks y'all - I think I'll just do it manually like jinsun said instead of wasting more time trying to figure this out :)
[20:16:49] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[20:18:56] *** Trashlord__ is now known as Trashlord
[20:20:07] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 245 seconds)
[20:20:44] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[20:21:11] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 255 seconds)
[20:21:18] *** Joins: wyclif (~wyclif@user/wyclif)
[20:21:30] *** RoyK^ is now known as RoyK
[20:23:28] *** Joins: jdmark (~jdmark@67.8.137.130)
[20:24:45] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 2.3)
[20:26:09] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[20:26:09] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 268 seconds)
[20:27:04] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:cc87:ce85:2ae:5eaf) (Quit: Leaving)
[20:29:04] *** Quits: arunmathaisk (~arunmatha@103.156.236.173) (Ping timeout: 246 seconds)
[20:30:49] *** Joins: Sasazuka (~Sasazuka@user/sasazuka)
[20:30:53] *** Quits: Deneb (~johnch@58.111.189.80.dyn.plus.net) (Quit: Leaving)
[20:31:42] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[20:32:21] *** Joins: wyclif (~wyclif@user/wyclif)
[20:36:46] *** Quits: nyah (~nyah@90.221.186.180) (Quit: leaving)
[20:37:22] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[20:37:56] *** Joins: lmmx (~louis@host-92-23-205-52.as13285.net)
[20:39:52] *** Joins: nyah (~nyah@90.221.186.180)
[20:41:38] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[20:42:25] *** Joins: Samian (~Sami@2620:10d:c091:480::1:6681)
[20:42:26] <Samian> hi
[20:43:10] <Samian> I have a list of a type that has the member variable "weight".  I want to get a list of the weights. I tried emb_l[:].weight. but that doesn't work for some reason
[20:43:26] *** Joins: CodePoint_ (~BitShift@172.58.171.181)
[20:43:46] *** Quits: CodePoint (~BitShift@2607:fb90:c69:cd2:4a54:fcd3:821f:a711) (Ping timeout: 246 seconds)
[20:43:47] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564) (Quit: Client closed)
[20:44:00] *** Joins: finsternis (~X@23.226.237.192)
[20:44:03] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564)
[20:44:16] <Samian> well, it makes sense why it doesn't work. emb_l[:].weight would be like [a,b,c,d].weight I think
[20:44:18] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 252 seconds)
[20:44:52] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:44:57] <Samian> is there a way to use something akin to list(map(len, indices)) ? but instead of len, it's a member variable ?
[20:45:18] *** Quits: lexandrop (~lex@user/lexandrop) (Ping timeout: 255 seconds)
[20:45:31] <ATAD> Samian: What about something like new_list = [item.weight for item in weights]  ?
[20:45:37] *** Quits: CodePoint_ (~BitShift@172.58.171.181) (Read error: Connection reset by peer)
[20:45:43] *** Joins: lexandrop (~lex@user/lexandrop)
[20:45:54] <bjs> samian: sure
[20:46:05] <SnoopJ> and maybe stick an `if hasattr(item, "weight")` at the end there if you're not confident this attribute will be on every member of the list
[20:46:22] *** Quits: Naan` (~Naan@user/naan) (Quit: Leaving)
[20:46:24] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[20:46:24] <Samian> ATAD  not elegant?
[20:46:36] <SnoopJ> Samian, what do you find inelegant about it
[20:46:39] <Samian> this is the one liner I wanted: Es = [e.shape[0] for e in (self.emb_l_q if self.emb_l_q != None else self.emb_l[:].weight)]
[20:47:04] <SnoopJ> that solves a very different problem than the one you described to us
[20:47:07] *** Quits: ThanatosJ (~Thanatos@197.210.227.97) (Ping timeout: 268 seconds)
[20:47:14] <SnoopJ> but glad you have your answer
[20:47:27] <Samian> well, it would work if self.emb_l[:].weight did what I wanted
[20:47:32] *** Joins: molyvius (~molyvius@user/molyvius)
[20:47:42] <grawity> sounds like you're asking for [emb.weight for emb in self.emb_l]
[20:47:43] <SnoopJ> well, lists don't work like that
[20:48:03] * grawity does miss Ruby's emb_l.map(&:weight)
[20:48:13] <SnoopJ> (assuming self.emb_l is a list; you have to be careful in Torch)
[20:48:58] <Samian> grawity  yeah now I'm using 4 lines instead of 1 :-(   https://bpa.st/F3MA
[20:49:08] <SnoopJ> grawity, I don't know Ruby but you can do `map(lst, operator.attrgetter("weight"))` for a functional approach (blegh)
[20:49:09] <Samian> SnoopJ  k
[20:49:22] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564) (Ping timeout: 246 seconds)
[20:49:29] <SnoopJ> not quite as succinct as Ruby's sugar, of course :)
[20:49:46] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[20:50:53] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 255 seconds)
[20:50:53] <grawity> SnoopJ: yeah, but the verbosity is what makes it distinctly blegh
[20:51:07] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 246 seconds)
[20:51:08] <zware> Samian: `[(e.shape if self.emb_l_q else e.weight.shape)[0] for e in self.emb_l]`?  That's an extra comparison for every member of `self.emb_l`, though; your 4-line version looks reasonable enough to me
[20:52:19] *** Quits: Jigsy (~Jigsy@user/jigsy) (Ping timeout: 258 seconds)
[20:53:14] <grawity> [(e if self.emb_l_q else e.weight).shape[0] fr e in self.emb_l]
[20:53:22] <SnoopJ> grawity, I can see how it's grating if you can get your head around Ruby's incantations (I never could)
[20:53:41] <nubonix> anyone have any ideas why httpx module isnt found when using pyinstaller?
[20:54:17] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[20:54:18] *** Quits: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl) (Ping timeout: 255 seconds)
[20:55:15] *** Joins: Jigsy (~Jigsy@user/jigsy)
[20:55:35] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[20:55:42] *** Joins: shiddy (uid501592@id-501592.brockwell.irccloud.com)
[20:55:48] <shiddy> I'm confused looking through the shutil.py source code, I see that in the function get_terminal_size it has the possibility of calling os.get_terminal_size. But I can't find any definition for get_terminal_size in os.py
[20:55:49] <grawity> SnoopJ: hmm now that I think of it, map(lst, lambda x: x.weight) looks decent
[20:56:34] <grawity> shiddy: it looks like it's imported from the posix module
[20:56:49] <ammar2> shiddy: notice that the top of os.py does from `posix import *`
[20:56:59] <SnoopJ> grawity, yea, much nicer. TIL that attrgetter() can do multiple retrievals, not that this justifies it over the equivalent lambda.
[20:57:24] <ammar2> shiddy: most of these functions tend to be implemented in C, specifically in the posix module like grawity said
[20:57:41] <grawity> SnoopJ: ah, that looks interesting
[20:57:42] <ammar2> shiddy: https://github.com/python/cpython/blob/main/Modules/posixmodule.c#L13145
[20:57:55] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Read error: Connection reset by peer)
[20:57:55] <shiddy> I don't see a posix on mine, only abc, sys and stat
[20:58:03] <grawity> SnoopJ: though still not much of an advantage over lambda now that I think of it...
[20:58:27] <SnoopJ> grawity, yea it's not very much use when you know the attr name ahead of time
[20:58:57] <SnoopJ> `operator` is not a toolbox I find myself reaching for very often at all
[20:59:27] *** Quits: bilb_ono (~alexmarsh@12.190.239.194) (Quit: bilb_ono)
[20:59:30] <zware> shiddy: Look down a bit for `if 'posix' in _names`
[20:59:39] <ammar2> shiddy: where are you looking?
[20:59:46] <zware> shiddy: And if you're on Windows, look instead for `elif 'nt' in _names`
[21:00:11] <SnoopJ> nubonix, presumably pyinstaller doesn't understand that your script is using it. If we could see the script source and maybe the spec file (the output of running `pyi-makespec yourscript.py`) we might be able to tell you more. The docs are pretty helpful in explaining the steps to discovery:
[21:00:13] <SnoopJ> https://pyinstaller.readthedocs.io/en/stable/operating-mode.html#analysis-finding-the-files-your-program-needs
[21:00:19] <SnoopJ> (oops, sorry)
[21:00:26] <shiddy> ah interesting, thanks I'll look at the c bindings
[21:00:35] <shiddy> kinda feel dumb for not seeing that before
[21:00:36] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 255 seconds)
[21:00:36] <shiddy> thanks
[21:00:40] <nubonix> SnoopJ: i mean... ive done it before... but idk why it isnt seeing it now
[21:01:00] <nubonix> SnoopJ: ill post, sec
[21:01:01] <SnoopJ> nubonix, if you aren't interested in the information I just provided about how to get unstuck, I guess we're at an impasse.
[21:01:55] *** Quits: tims (~tims@193-82-234-90.tpgi.com.au) (Ping timeout: 268 seconds)
[21:02:11] <Samian> thanks grawity  and zware
[21:02:49] *** Joins: ham5urg (~ham5urg@92.240.33.192)
[21:03:03] <nubonix> httpx module not found using pyinstaller ~> agent.spec and agent.py @ https://bpa.st/JWZA
[21:03:31] <nubonix> working on the output of pyi-makespec agent.py now
[21:03:45] <ammar2> shiddy: no worries, sometimes it's not obvious at all where functions are implemented in CPython
[21:03:45] *** Joins: wyclif (~wyclif@user/wyclif)
[21:03:56] <ammar2> I'm looking at you _io.open
[21:03:57] <SnoopJ> ammar2, I would say that's the rule, not the exception :P
[21:04:21] *** cache is now known as Kingpin13
[21:04:26] *** Kingpin13 is now known as cacheyourdreams
[21:04:34] <nubonix> output of pyi-makespec agent.py @ https://bpa.st/ITJQ
[21:04:39] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[21:04:45] *** Quits: dvx (~dvx@185.63.97.64) (Read error: Connection reset by peer)
[21:05:26] *** Joins: dvx (~dvx@185.63.97.64)
[21:05:44] *** Joins: bilb_ono (~alexmarsh@12.190.239.194)
[21:06:03] *** Joins: odinsbane (~mbs@pat-pool-138.crick.ac.uk)
[21:06:50] <odinsbane> I'm trying to get tensorflow running on my gpu (new os). Does anybody know how I can tell which version of CUDA the tensorflow on pypi is looking for?
[21:07:23] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564)
[21:07:43] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Quit: leaving)
[21:08:18] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[21:08:40] <nubonix> ouput of pyi-makespec agent.py https://bpa.st/ITJQ
[21:08:47] <nubonix> >.>
[21:08:56] <nubonix> didnt mean to double paste
[21:09:09] *** Joins: hposca (~hposca@node-1w7jr9phoke2sad1ixki5h523.ipv6.telus.net)
[21:13:08] <SnoopJ> nubonix, hmm, what does build/agent/warn-agent.txt look like? Any mention of httpx there?
[21:13:54] <nubonix> SnoopJ: ill get back to you in a minute, atm im moving my venv to see if my tree structure is whacked
[21:14:00] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:14:17] *** Quits: lexandrop (~lex@user/lexandrop) (Ping timeout: 255 seconds)
[21:14:36] <nubonix> SnoopJ: `missing module named httpx - imported by C:\Users\nubonix\PycharmProjects\NBMS\NBMS\apis\agent.py (top-level), NBMS.apis.routes.oldschool.oldschool_routes (top-level), NBMS.apis.routes.osbot.osbot_routes (top-level), NBMS.apis.routes.proxifier.proxifier_routes (top-level), NBMS.apis.routes.sandboxie.sandboxie_routes (top-level)`
[21:14:48] <SnoopJ> nubonix, okay, well, that tell us it has trouble finding httpx itself
[21:14:56] *** Joins: derelict (~derelict@user/derelict)
[21:15:13] <nubonix> SnoopJ: ive got a ton of those, not just httpx
[21:15:23] <SnoopJ> nubonix, would you like to talk about the rest of them, or the one about httpx?
[21:15:27] *** Quits: eldenring0 (uid506233@id-506233.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[21:15:35] <nubonix> SnoopJ: just httpx for now
[21:15:36] <SnoopJ> probably a bunch of them are optional
[21:15:41] <nubonix> mk
[21:15:50] <SnoopJ> nubonix, you're developing this in a venv?
[21:15:58] <nubonix> yes
[21:16:10] <SnoopJ> is PyInstaller running from that venv, or a global install?
[21:16:32] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 255 seconds)
[21:16:34] <nubonix> pyinstaller is running from the venv
[21:16:48] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[21:18:00] <nubonix> SnoopJ: is there something else i should be using besides a venv?
[21:18:04] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:cc87:ce85:2ae:5eaf)
[21:20:38] <SnoopJ> nubonix, PyInstaller might not understand how to look in the site-packages associated with the venv
[21:21:04] <nubonix> mk, so my approach of moving the venv was a good iea
[21:21:10] <SnoopJ> you can pass `--paths some/path/` to instruct it to also search for imports in that directory (or multiple directories separated by ':')
[21:21:15] <SnoopJ> nubonix, moving a venv is always a bad idea
[21:21:16] <nubonix> well, creating a new one b/c its easier
[21:21:42] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Ping timeout: 252 seconds)
[21:22:25] <nubonix> alright
[21:22:36] *** Quits: clawh (~clawh@185.244.214.60) (Remote host closed the connection)
[21:24:20] <nubonix> `pathex=['C:\\Users\\nubonix\\PycharmProjects\\NBMS\\NBMS', 'C:\\Users\\nubonix\\PycharmProjects\\NBMS\\NBMS\\venv\\Lib\\site-packages'],`
[21:24:45] *** Joins: clawh (~clawh@185.244.214.60)
[21:24:49] *** Joins: nickodd (~nickodd@user/nickodd)
[21:25:00] <SnoopJ> pathex is where dirs given to --paths will end up, yep
[21:25:12] *** Joins: Yamakaja (~yamakaja@user/yamakaja)
[21:25:50] *** Quits: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl) (Quit: Leaving)
[21:25:56] <SnoopJ> nubonix, as an aside `import httpx as httpx` is pointless, that has the same effect as `import httpx`
[21:25:57] *** Joins: MrFantastik (~Thunderbi@rrcs-184-74-43-235.nys.biz.rr.com)
[21:26:17] <nubonix> SnoopJ: yeah ik, its a pycharm thing
[21:26:35] *** Quits: han-solo (~hanish@user/han-solo) (Ping timeout: 268 seconds)
[21:27:06] <nubonix> SnoopJ: hmm, alright, the pathex thing fixed the httpx error, now i get a new one :D
[21:27:13] <SnoopJ> progress!
[21:27:34] <nubonix> :D
[21:27:51] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[21:27:54] <nubonix> alright, heres the console output of running agent.exe https://bpa.st/2EOQ
[21:28:00] <nubonix> well, the tb at lest
[21:28:02] <nubonix> least*
[21:29:02] <nubonix> trying `NBMS/venv/Scripts\pywin32_postinstall.py -install` from SO
[21:29:38] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[21:29:39] <nubonix> mm, nope
[21:29:53] <SnoopJ> looks like something's gone wrong with the platform-specific stuff
[21:29:57] *** Joins: akk (~akk@97-123-109-214.albq.qwest.net)
[21:31:19] *** Joins: wyclif (~wyclif@user/wyclif)
[21:31:29] *** Joins: cedric (~cedric@2a01:cb11:867:c200:66a6:2535:5f72:704d)
[21:31:45] <nubonix> wonder if its cause im running windows LSTC
[21:32:24] *** Joins: han-solo (~hanish@user/han-solo)
[21:32:42] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Ping timeout: 252 seconds)
[21:32:48] *** Quits: entuland (~entuland@user/entuland) (Remote host closed the connection)
[21:32:56] <SnoopJ> this issue seems related: https://github.com/pyinstaller/pyinstaller/issues/5560
[21:33:22] *** Joins: entuland (~entuland@user/entuland)
[21:34:29] *** Quits: sectec84 (~sectec84@24.18.109.173) (Read error: Connection reset by peer)
[21:35:33] *** Joins: sectec84 (~sectec84@24.18.109.173)
[21:35:46] <nubonix> SnoopJ: is this because im calling __file__ ? https://bpa.st/E4IA
[21:36:06] *** Joins: Betal (~Beta@user/betal)
[21:36:08] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[21:36:19] <nubonix> SnoopJ: yeah... it is, hmm
[21:36:31] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[21:36:41] <nubonix> guess ill just replace .py with .exe
[21:37:06] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 240 seconds)
[21:37:29] <SnoopJ> nubonix, I think __file__ should be fine (although I don't know what "calling" it means to you, certainly it's not callable), PyInstaller extracts to a temporary directory at runtime as far as I know
[21:37:30] *** Joins: Deesl (~bsdboy@redhat/psirt/Deesl)
[21:37:35] *** Joins: pnoud (~pnoud@user/pnoud)
[21:38:35] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Ping timeout: 255 seconds)
[21:39:05] *** Joins: wyclif (~wyclif@user/wyclif)
[21:39:11] *** Quits: hegstal (~hegstal@2a02:c7f:7604:8a00:694c:cc5c:55d8:63b) (Ping timeout: 268 seconds)
[21:40:50] *** Joins: Blackpajamas (~Blackpaja@67.69.69.78)
[21:41:05] <SnoopJ> nubonix, is this program a manager for a set of RuneScape bots?
[21:41:56] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 265 seconds)
[21:42:02] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[21:42:28] <nubonix> SnoopJ: what i mean by calling __file__ is executing it, ik its not a function
[21:42:46] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564) (Quit: Client closed)
[21:42:54] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 265 seconds)
[21:43:02] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564)
[21:43:08] <nubonix> SnoopJ: yes, its a bot manager, a replication of bottinghub / eternalfarm + few extras
[21:43:14] <SnoopJ> nubonix, "calling" and "executing" aren't very distinct when it comes to Python objects. I think you're talking about this line though? https://bpa.st/JWZA#2L113
[21:43:22] *** Joins: akaWolf (~akaWolf@akawolf.org)
[21:43:27] <nubonix> yaya mr techniqual
[21:43:46] <nubonix> SnoopJ: yes, that is the line, line 113
[21:43:52] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[21:44:05] <nubonix> SnoopJ: pre sure .replace is going to work, so ill try and come back with a new error hopefully lol
[21:44:21] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 265 seconds)
[21:44:25] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[21:44:33] *** Joins: wyclif (~wyclif@user/wyclif)
[21:44:43] <nubonix> SnoopJ: y do u ask about the runescape bit? jw
[21:44:49] <SnoopJ> curious
[21:44:56] *** Quits: chele (~chele@user/chele) (Quit: Leaving)
[21:45:02] <nubonix> :P
[21:45:40] <nubonix> hmmm....
[21:45:45] *** Quits: Blackpajamas (~Blackpaja@67.69.69.78) (Quit: Blackpajamas)
[21:45:45] *** Joins: strudl (~strudl@user/strudl)
[21:45:45] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-f52d-d440-e265-bac9.res6.spectrum.com)
[21:45:45] *** Quits: strudl (~strudl@user/strudl) (Excess Flood)
[21:45:47] <nubonix> httpx cant connect >.> dono y
[21:45:58] <nubonix> oh... nvm i do know rofl
[21:46:03] *** Quits: MrFantastik (~Thunderbi@rrcs-184-74-43-235.nys.biz.rr.com) (Ping timeout: 255 seconds)
[21:46:06] *** Joins: magla (~gelignite@55d4f0de.access.ecotel.net)
[21:46:13] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[21:46:16] *** Joins: strudl (~strudl@user/strudl)
[21:46:16] *** Quits: strudl (~strudl@user/strudl) (Excess Flood)
[21:46:46] *** Joins: strudl (~strudl@user/strudl)
[21:46:46] *** Quits: strudl (~strudl@user/strudl) (Excess Flood)
[21:47:00] *** Quits: Snyp (~rksht@49.207.206.57) (Quit: WeeChat 3.2)
[21:47:10] <nubonix> cant run an api if the server isnt online yet >.>
[21:47:16] *** Joins: strudl (~strudl@user/strudl)
[21:47:16] *** Quits: strudl (~strudl@user/strudl) (Excess Flood)
[21:47:47] <nubonix> call an endpoint from the api*
[21:47:48] *** Joins: strudl (~strudl@user/strudl)
[21:47:48] *** Quits: strudl (~strudl@user/strudl) (Excess Flood)
[21:48:10] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[21:48:10] <nubonix> SnoopJ: basically, agent.py / .exe is supposed to turn another computer into a slave
[21:48:32] *** Joins: dshikoh (~dshikoh@user/dshikoh)
[21:48:41] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[21:48:41] <nubonix> couldnt figure out ssl auth in rpyc, so i used a restful api instead
[21:49:24] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[21:49:53] *** Quits: rendar (~rendar@user/rendar) ()
[21:49:57] *** Joins: Payam (~Payam@c83-250-236-236.bredband.tele2.se)
[21:50:04] *** Joins: wyclif (~wyclif@user/wyclif)
[21:50:38] <nubonix> scheduling tasks is the next bit in this project, should be pre easy tho
[21:51:09] <nubonix> this stupid agent.py certainly took longer than anticipated >.>
[21:52:28] *** Quits: Deesl (~bsdboy@redhat/psirt/Deesl) (Quit: My Mac Pro has gone to sleep. ZZZzzz…)
[21:52:58] <nubonix> SnoopJ: interested in collaborating?
[21:53:08] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[21:53:58] *** Joins: Deesl (~bsdboy@redhat/psirt/Deesl)
[21:54:03] <SnoopJ> nubonix, not much overlap with my interests, just was looking at the application code and trying to guess what it did with some searching of keywords
[21:54:16] <nubonix> ah ok
[21:54:24] <Payam> hi guys, I am trying to divide a list to multiple sub lists. however, I want to have exact number of element in each sub list. https://bpa.st/TTOQ in this you see that the there is a [5] which does not have 2 element and hence should be removed from the list. do you know any smart way doing it ?
[21:54:38] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564) (Quit: Client closed)
[21:54:49] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[21:54:55] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564)
[21:55:24] *** Quits: bdeshi (~bdeshi@bdeshi.space) (Quit: quit)
[21:55:34] *** Joins: wyclif (~wyclif@user/wyclif)
[21:56:20] <han-solo> `list(zip(*[iter(x)]*2))`
[21:56:34] *** Joins: Thanatos (~Thanatos@ec2-54-148-37-124.us-west-2.compute.amazonaws.com)
[21:57:39] <nubonix> han-solo: where is the input list?
[21:57:52] *** Joins: swn_ (~sweeney@user/swn)
[21:58:22] <han-solo> `x`
[21:58:36] <nubonix> ah
[21:58:40] <nubonix> iter()
[21:58:41] <nubonix> makes sense
[21:58:43] *** Quits: Thanatos (~Thanatos@ec2-54-148-37-124.us-west-2.compute.amazonaws.com) (Read error: Connection reset by peer)
[21:58:43] *** Joins: entuland_ (~entuland@user/entuland)
[21:58:48] *** Quits: entuland (~entuland@user/entuland) (Remote host closed the connection)
[21:59:23] <Payam> it will be a list of a tuple
[21:59:57] <Payam> I don't undrestand it well.
[22:00:08] *** Joins: jdmark2 (~jdmark@67.8.137.130)
[22:00:25] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564) (Ping timeout: 246 seconds)
[22:00:26] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 250 seconds)
[22:00:28] *** Joins: c4017_ (~c4017@S010664777dab66f3.vf.shawcable.net)
[22:00:30] <Jin^eLD> hi :>
[22:00:38] <nubonix> Payam: just break it down
[22:00:45] *** Quits: swn (~sweeney@user/swn) (Ping timeout: 258 seconds)
[22:00:47] <nubonix> Payam: or re-write it in a loop
[22:00:53] *** Joins: jdmark3 (~jdmark@67.8.137.130)
[22:00:53] *** Joins: Thanatos (~Thanatos@ec2-54-148-37-124.us-west-2.compute.amazonaws.com)
[22:00:57] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-160-103.austin.res.rr.com)
[22:01:05] *** Joins: wyclif (~wyclif@user/wyclif)
[22:01:05] <Jin^eLD> habnabit_, SnoopJ do you guys have a hint for me? I reworked the cffi callback code as you suggested yesterday (latest commit) https://github.com/jin-eld/cffi-callback-test
[22:01:14] <Jin^eLD> but I think I still have a little hack in there regarding initialization
[22:01:28] <Jin^eLD> in the generated sources I see the following: https://paste.ee/p/BHXI9
[22:01:55] <Jin^eLD> what do they mean by "It can be called manually from the user C code"?
[22:02:05] *** Quits: jdmark (~jdmark@67.8.137.130) (Ping timeout: 258 seconds)
[22:02:35] <Jin^eLD> I failed to understand where I can inject that user C code?
[22:02:59] <Jin^eLD> so as a hack I simply defined a dummy python function marked as extern and call it to trigger initialization
[22:03:00] <SnoopJ> Inject?
[22:03:05] *** Joins: MarderIII (~MarderIII@2001:985:e889:1:a86b:cb06:bf1:296e)
[22:03:10] <Jin^eLD> well I assume they refer to ffibuilder?
[22:03:14] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-160-103.austin.res.rr.com) (Ping timeout: 258 seconds)
[22:03:14] *** Quits: c4017 (~c4017@S010664777dab66f3.vf.shawcable.net) (Ping timeout: 258 seconds)
[22:03:16] *** Joins: ska (~ska@user/ska)
[22:03:22] <Jin^eLD> or what "user C code" are they talking about?
[22:03:37] *** Quits: jdmark2 (~jdmark@67.8.137.130) (Ping timeout: 258 seconds)
[22:03:52] *** Joins: Blackpajamas (~Blackpaja@67.69.69.78)
[22:03:54] <ska> How do I create a mock client with the "responses" library? I was doing : client = mock.Mock() ... but that isnt working as planned.
[22:03:54] <Jin^eLD> the function in the paste (the generated code) is static, so this "user C code" needs to get injected into the cffi generated sources?
[22:04:36] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[22:04:42] <Payam> han-solo, I undrestand the iter part but what does *[iter(x)]*2 means?
[22:04:44] <graingert> ska: I use pytest-recording
[22:05:42] <ska> graingert: I'll take a look... ty
[22:05:55] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[22:05:59] *** entuland_ is now known as entuland
[22:06:12] <Jin^eLD> SnoopJ: unless I am blind, something like  ffibuilder.embedding_init_code() does not exist for C code? its only for Python?
[22:06:36] *** Joins: wyclif (~wyclif@user/wyclif)
[22:06:45] <SnoopJ> Jin^eLD, embedding_init_code() is for registering Python code to be run immediately after the interpreter init, yes.
[22:07:08] <Jin^eLD> right, but where do you put C init code? or this "user C code" that they describe in that comment I pasted?
[22:07:27] *** Joins: Pixi_ (~Pixi@user/pixi)
[22:08:14] <Jin^eLD> SnoopJ: I am referring to this, which is a snipped from the sources generated by ffibuilder: https://paste.ee/p/BHXI9
[22:08:23] <SnoopJ> Jin^eLD, I'm kinda overwhelmed by these rapid-fire questions. Neither of the links you shared are talking about C init code and I'm not sure why you think they are.
[22:08:48] <SnoopJ> that comment is explaining that users can call cffi_start_python() to initialize Python/CFFI
[22:09:15] <Jin^eLD> SnoopJ: and that is exactly my question, _how_ can users call cffi_start_python()? notice, that its static
[22:10:28] *** Quits: Pixi (~Pixi@user/pixi) (Ping timeout: 252 seconds)
[22:11:16] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[22:11:29] *** Joins: kieto (~kieto@user/kieto)
[22:11:30] *** Joins: pycode (~pycode@2001:b07:5d28:551:9921:511e:1596:d8f8)
[22:11:45] <han-solo> Payam: i guess, the `[iter(x)]*2` makes two iterator from the x, and give them to `zip`, so zip will have `zip(iterator_from_x, iterator_from_x)`
[22:12:06] *** Joins: wyclif (~wyclif@user/wyclif)
[22:12:07] *** Quits: pycode (~pycode@2001:b07:5d28:551:9921:511e:1596:d8f8) (Remote host closed the connection)
[22:12:13] <han-solo> `*[iter(x)]*2`*
[22:12:46] <han-solo> and the zip feeds on them, making pairs until it have enough to make a pair, i guess
[22:13:04] <Jin^eLD> SnoopJ: actually I think I might have an idea... from set_source()
[22:13:28] <SnoopJ> Jin^eLD, presumably there's a header the user can import, and then it's like calling any C function
[22:13:34] <Payam> you use iter to create a iterator and then you can apply for or next keyword. so with next it "goes" forward one by on. right?
[22:13:44] <Jin^eLD> nope, no generated header, it only generates a c source
[22:13:50] <Jin^eLD> there is a clue at the very end of this page https://cffi.readthedocs.io/en/latest/embedding.html
[22:13:59] <han-solo> Payam: yeah
[22:14:38] *** Joins: greenx (~greenx@user/greenx)
[22:14:45] <Payam> and *[iter(x)] is unpacking the iterator right?
[22:14:50] <Jin^eLD> but I still do not quite get to how actually do what they describe there
[22:15:07] <han-solo> Payam: yeah, that's just list unpacking
[22:15:28] <Jin^eLD> "n case you need to force, from C code, Python to be initialized before the first @ffi.def_extern() is called, you can do so by calling the C function cffi_start_python() with no argument" I wonder how, since the function is static...
[22:15:36] <SnoopJ> Jin^eLD, in C, if a user has the symbol available, they can call it.
[22:16:08] *** Quits: Blackpajamas (~Blackpaja@67.69.69.78) (Quit: Blackpajamas)
[22:16:17] *** Joins: shibboleth (~shibbolet@gateway/tor-sasl/shibboleth)
[22:16:31] <Jin^eLD> SnoopJ: well the symbol won't be available if its declared as static in the generated code?
[22:16:46] <SnoopJ> Jin^eLD, why?
[22:17:00] <Payam> han-solo, so why would you unpack them? shouldn't list(*[iter(x)]*2) also work?
[22:17:00] <Jin^eLD> because static makes sure the symbols are not exported?
[22:17:09] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[22:17:34] <SnoopJ> hmm
[22:17:36] *** Joins: wyclif (~wyclif@user/wyclif)
[22:17:38] <Jin^eLD> i.e. the whole point of declaring a function static is to hide it from everyone else?
[22:17:42] *** Joins: clarjon1 (~clarjon1@user/clarjon1)
[22:17:54] <Jin^eLD> btw I did just go for it and try an fwd declaration in my main.c extern int cffi_start_python(void);
[22:17:57] <SnoopJ> Jin^eLD, the point is to declare that it should have static storage, the linkage is kind of a secondary concern imo
[22:17:59] <Jin^eLD> but as expected that did not link
[22:18:04] <SnoopJ> but you're right, it uses internal linkage
[22:18:09] <Jin^eLD> yep
[22:18:22] <ammar2> include the _embedding.h header?
[22:18:40] <Jin^eLD> which makes me think that when they say in the docs that one can call it, they mean call it from some ffibuilder injected code that also lands in the same generated source c file
[22:18:40] <ammar2> it looks like it's meant to function as a header-library?
[22:18:42] <SnoopJ> ammar2, I think it's a fragment, but this occurred to me
[22:18:51] <Jin^eLD> ammar2: there is no header being produced
[22:18:59] <SnoopJ> Jin^eLD, _embedding.h is a header within CFFI itself
[22:19:01] <ammar2> SnoopJ: aah, maybe not then
[22:19:11] <SnoopJ> But I think it's there to supplement generated code
[22:19:22] <SnoopJ> If you were generating a header you might be able to import that
[22:19:44] *** Joins: kor1 (~kor1@user/kor1)
[22:19:52] <Jin^eLD> I'd need to google how I would generate a header, but as long as the function is declared static in the c code, no header will help me
[22:20:47] <nubonix> is there a way i can add a git commit to my requirements.txt instead of having to run this seperately? `pip install git+https://github.com/nedsociety/pysandboxie.git@43289d1b0716922d54a10b8edd912f44cd1a90db`
[22:20:52] <SnoopJ> I'm having trouble keeping up with the conclusions, now, too
[22:20:53] <ammar2> I mean static doesn't matter if you are including the header file containing the static function
[22:21:11] <SnoopJ> yea, internal linkage doesn't ruin you if you...use it internally.
[22:21:33] <SnoopJ> but if you're not making a header anyway, I'm not really sure why any C user would be calling this anyway
[22:21:34] <Jin^eLD> yeah but I can't ue it "internally" because the whole source file is being generated, its not "my" code
[22:21:49] <Jin^eLD> I can only link it to my app
[22:22:02] <SnoopJ> Jin^eLD, I think I've thoroughly lost the plot here, probably because we're fielding at least 2 questions at once
[22:22:24] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[22:22:25] <SnoopJ> and any one of them is tricky on its own
[22:22:32] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 250 seconds)
[22:23:03] <Jin^eLD> well, we can take a step back; here's the whole code, compilable and runnable: https://github.com/jin-eld/cffi-callback-test here are the docs saying "one can call cffi_start_python()" - somehow
[22:23:05] *** Joins: fofoni (~fofoni@user/fofoni)
[22:23:07] <Jin^eLD> question is: how?
[22:23:07] *** Joins: wyclif (~wyclif@user/wyclif)
[22:23:50] <ammar2> Jin^eLD: could you paste the full generated code there that includes the cffi_start_python bit?
[22:24:13] <Jin^eLD> ammar2: its 1440 lines, but let me try if paste.ee accepts it :)
[22:24:37] <SnoopJ> Jin^eLD, the answer hasn't changed: get that symbol and call it. Since it's using internal linkage, I'm guessing it's maybe meant for users who want to run interpreter-aware code in C they feed to ffibuilder
[22:24:47] <SnoopJ> The docs could definitely be more clear about this, though
[22:24:51] *** Joins: Akuli (~Akuli@82-203-167-126.bb.dnainternet.fi)
[22:25:01] <SnoopJ> (or yea, if a header were produced, use that, but we get it: you aren't doing that)
[22:25:18] <Jin^eLD> ammar2: https://paste.ee/p/o5oWv
[22:25:23] <SnoopJ> if you aren't doing that though, I'm not really sure why it matters
[22:25:39] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 255 seconds)
[22:25:41] <SnoopJ> Have you decided this is the way around the initialization problem you were seeing yesterday?
[22:25:43] <Jin^eLD> SnoopJ: how would I tell it to produce a header? let me re-read the docs again
[22:25:49] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[22:26:20] <Jin^eLD> SnoopJ: yes, the latest commit on that git repo is the rework after habnabit_ and you pointed out that I can't use Python.h with cffi and that it should init itself automatically
[22:26:44] <Jin^eLD> the only way how I got it to init automatically was to call any @ffi.extern function, which is a bit indirect
[22:26:48] <SnoopJ> Jin^eLD, okay. Why are you convinced that this is the solution to the problem? Doyou fully understand the problem now?
[22:27:11] <Jin^eLD> SnoopJ: I am convinced in the way that it does not crash anymore and it does not require to have any kind of endless loop in the python code anymore
[22:27:24] <Jin^eLD> so yes, I am convinced that what you told me was correct, because it indeed solves the issue I have been having
[22:27:44] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 250 seconds)
[22:27:53] <SnoopJ> It doesn't sound like it's because you have a rich understand of the problem. The reason I ask is because you might be applying the "wrong" solution that happens to resolve the problem.
[22:27:57] <SnoopJ> or trying to, anyway
[22:28:11] <Jin^eLD> I'd by lying if I said that I fully understand cffi :)
[22:28:18] <SnoopJ> then take your time
[22:28:37] *** Joins: wyclif (~wyclif@user/wyclif)
[22:28:38] <Jin^eLD> thats not so simple, I find the docs lacking of details
[22:28:53] <SnoopJ> it's very simple, but it may not be easy for you
[22:28:57] <Jin^eLD> else I would not be annoying you guys :)
[22:29:15] <SnoopJ> a question asked or answered incompletely is of limited use
[22:29:30] <Jin^eLD> if its indeed so simple then please hint me on how to implement the last paragraph on this page: https://cffi.readthedocs.io/en/latest/embedding.html :)
[22:29:39] <SnoopJ> I meant that going slow is simple
[22:29:46] <SnoopJ> CFFI certainly isn't
[22:29:51] <Jin^eLD> ok hehe
[22:29:58] <Jin^eLD> there I agree, CFFI is not simple at all
[22:30:05] <SnoopJ> but this is why I think trying to rush to a solution you don't understand is going to compound your headache
[22:30:06] <Jin^eLD> I thought you meant CFFI is simple
[22:30:08] <Jin^eLD> :)
[22:30:25] <Jin^eLD> well, I asked the pros and you guys told me "what you are doing is not correct, here is how you should do it" - this is what I did
[22:30:34] <nubonix> mm, need some help with running async functions after i start an app with uvicorn, having await problems atm code: https://bpa.st/I5FA
[22:31:32] <SnoopJ> Jin^eLD, someone here told you to use cffi_start_python?
[22:32:00] <Jin^eLD> SnoopJ: no, that's the new part after fixing what you guys addressed yesterday
[22:32:26] <Jin^eLD> you said it would auto-initialize, and the docs suggest that, but refer to a library
[22:32:36] <Jin^eLD> it did not auto initialize just by itself
[22:32:57] <Jin^eLD> it did however if I called a function defined as extern "Python" - this is documented, and it did work like that
[22:33:10] <SnoopJ> I have no idea what you're talking about.
[22:33:14] <Jin^eLD> :)
[22:33:17] <SnoopJ> let me see if the repo makes more sense
[22:33:19] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[22:33:31] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[22:33:51] <Jin^eLD> SnoopJ: look at the my_mod_init() hack, then you will probably understand what I meant
[22:34:08] *** Joins: wyclif (~wyclif@user/wyclif)
[22:36:49] <Jin^eLD> I think ammar2  is right though, I need to somehow force it to produce an _embedding.h as well
[22:38:58] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[22:39:09] *** Quits: lmmx (~louis@host-92-23-205-52.as13285.net) (Ping timeout: 255 seconds)
[22:39:39] *** Joins: wyclif (~wyclif@user/wyclif)
[22:40:16] *** byzandula1 is now known as byzandula
[22:41:43] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[22:44:38] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[22:45:10] *** Joins: wyclif (~wyclif@user/wyclif)
[22:47:09] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Read error: Connection reset by peer)
[22:47:20] *** jdmark3 is now known as jdmark
[22:47:26] *** Joins: c4017w_ (~c4017@209.52.68.8)
[22:47:26] *** Quits: Payam (~Payam@c83-250-236-236.bredband.tele2.se) (Read error: Connection reset by peer)
[22:47:32] *** Quits: jdmark (~jdmark@67.8.137.130) (Quit: Leaving)
[22:47:34] *** Quits: Fluxx (~Fluxx@user/fluxx) (Read error: Connection reset by peer)
[22:47:34] *** Joins: Gerula_ (~Gerula@user/gerula)
[22:47:34] *** Gerula is now known as Guest583
[22:47:34] *** Quits: Guest583 (~Gerula@user/gerula) (Killed (molybdenum.libera.chat (Nickname regained by services)))
[22:47:34] *** Gerula_ is now known as Gerula
[22:47:38] *** Joins: Payam (~Payam@c83-250-236-236.bredband.tele2.se)
[22:47:48] *** Joins: jdmark (~jdmark@67.8.137.130)
[22:47:53] *** Joins: Fluxx (~Fluxx@user/fluxx)
[22:50:05] *** Quits: han-solo (~hanish@user/han-solo) (Ping timeout: 265 seconds)
[22:50:27] *** Quits: gitly (~gitly@85.255.233.176) (Ping timeout: 268 seconds)
[22:51:04] *** Quits: c4017w (~c4017@209.52.68.8) (Ping timeout: 268 seconds)
[22:51:04] *** Quits: ouemt (~quassel@user/ouemt) (Ping timeout: 268 seconds)
[22:51:18] *** Joins: ouemt (~quassel@user/ouemt)
[22:52:02] *** Quits: Deesl (~bsdboy@redhat/psirt/Deesl) (Quit: My Mac Pro has gone to sleep. ZZZzzz…)
[22:52:10] *** Joins: mdemo (~mdemo@c-73-40-53-74.hsd1.wv.comcast.net)
[22:54:32] *** Joins: ThanatosJ (~Thanatos@197.210.55.212)
[22:57:24] *** Joins: Oddity (Oddity@user/oddity)
[22:57:46] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[22:59:01] *** Joins: Auron (~Auron956@user/auron)
[22:59:32] *** Quits: trace987 (~trace@91.66.152.136) (Remote host closed the connection)
[23:00:44] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 258 seconds)
[23:00:56] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[23:01:06] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[23:03:14] <habnabit_> Jin^eLD, looking at it now
[23:03:18] <habnabit_> Jin^eLD, it still crashes?
[23:03:27] *** Joins: wyclif (~wyclif@user/wyclif)
[23:05:21] <Jin^eLD> habnabit_: no! the crash issue is solved, a new question popped up
[23:05:27] <habnabit_> Jin^eLD, oh i see
[23:05:38] <habnabit_> Jin^eLD, anyway i can't get it to autoreconf but i guess it doesn't matter
[23:05:48] <Jin^eLD> what is it complaining about?
[23:05:51] <SnoopJ> I can configure it but I can't build it, might be my pyenv
[23:06:05] <habnabit_> Jin^eLD, is there a reason for me to build this still?
[23:06:21] <Jin^eLD> habnabit_: I don't think so, no
[23:06:25] <habnabit_> Jin^eLD, ok
[23:06:32] <habnabit_> Jin^eLD, so what's the latest question
[23:07:11] <Jin^eLD> habnabit_: last paragraph https://cffi.readthedocs.io/en/latest/embedding.html says: "In case you need to force, from C code, Python to be initialized before the first @ffi.def_extern() is called, you can do so by calling the C function cffi_start_python() with no argument."
[23:07:19] <Jin^eLD> question is?
[23:07:38] <Jin^eLD> cffi_start_python() ends up in the generated c source file and is declared as static there
[23:07:40] *** Quits: dshikoh (~dshikoh@user/dshikoh) (Quit: Konversation terminated!)
[23:07:48] <Jin^eLD> *question is: how to call it?
[23:08:02] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[23:08:14] *** Quits: ThanatosJ (~Thanatos@197.210.55.212) (Read error: Connection reset by peer)
[23:08:48] *** Joins: ThanatosJ (~Thanatos@197.210.55.212)
[23:08:58] *** Joins: wyclif (~wyclif@user/wyclif)
[23:09:39] <habnabit_> Jin^eLD, i see. but why would you need to..? is there some reason you can't satisfy the conditions already listed?
[23:10:03] <habnabit_> Jin^eLD, i'm just not sure if the confusion you had previously was resolved or not, because this might be more of the same confusion
[23:10:24] <Jin^eLD> habnabit_: well, if you look at my code, I had to use a trick to force-call an extern "Python" function to do the initialization
[23:10:50] <Jin^eLD> and I had to do this, because without initializing python the script would not run
[23:11:01] <habnabit_> Jin^eLD, which line is the trick?
[23:11:03] <Jin^eLD> and its actually the script that has "priority" and that subscribes to callbacks to C
[23:11:28] <habnabit_> Jin^eLD, oh, i see, this part of the explanation is very relevant
[23:11:37] *** Joins: gitly (~gitly@85.255.233.176)
[23:11:45] <Jin^eLD> https://github.com/jin-eld/cffi-callback-test/blob/master/main.c#L17
[23:11:47] <Jin^eLD> https://github.com/jin-eld/cffi-callback-test/blob/master/build.py#L28
[23:11:52] *** Joins: jarthur_ (~jarthur@2603-8080-1540-002d-dcfa-1836-6c8e-0e77.res6.spectrum.com)
[23:11:56] <habnabit_> Jin^eLD, you want to move the time of the init call earlier so it doesn't happen in a hot path
[23:12:03] *** Quits: mcglk_ (~mcglk@131.191.49.120) (Read error: Connection reset by peer)
[23:12:31] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-f52d-d440-e265-bac9.res6.spectrum.com) (Ping timeout: 246 seconds)
[23:12:32] <Jin^eLD> well, it never happens if I do not force it, because the script needs to call a function to subscribe for callbacks, here: https://github.com/jin-eld/cffi-callback-test/blob/master/build.py#L35
[23:12:33] *** Joins: MrFantastik (~Thunderbi@rrcs-184-74-43-235.nys.biz.rr.com)
[23:12:33] *** Joins: mcglk (~mcglk@131.191.49.120)
[23:12:51] <Jin^eLD> but it can't do that because it is never run if python is not initialized, because on its own the C app does not need to call into Python
[23:13:05] <Jin^eLD> so I want a controlled point in time to say: OK, I am ready to initialize python and run the script now
[23:13:24] <Jin^eLD> the docs suggest that cffi_start_python() is exactly the function I need
[23:13:32] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[23:13:43] <Jin^eLD> and it also gives you feedback if it was successfull, which is of interest to the C applicatin too
[23:13:48] *** Leonarbro_ is now known as Leonarbro
[23:13:58] <habnabit_> Jin^eLD, ok. cffi_start_python is probably an easier solution because the thing you're describing is quite convoluted yes
[23:14:04] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564)
[23:14:17] <habnabit_> Jin^eLD, i don't think it's all necessary but cffi_start_python is probably easier still
[23:14:29] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[23:14:29] *** Joins: wyclif (~wyclif@user/wyclif)
[23:14:32] <Jin^eLD> but how do I call it? its in the generated .c code https://paste.ee/p/o5oWv#s=0&l=1281
[23:14:34] <Jin^eLD> but its static
[23:15:00] <habnabit_> Jin^eLD, so what's the issue? put the prototype somewhere and call it?
[23:15:23] <Jin^eLD> the issue is that its declared as "static", I tried a forward declaration in my main.c but that will fail to link
[23:15:31] <habnabit_> Jin^eLD, did you actually try it?
[23:15:42] <Jin^eLD> I tried: +extern int cffi_start_python(void);
[23:15:45] <habnabit_> Jin^eLD, i know what static means, but i'd believe cffi's docs
[23:15:54] <Jin^eLD> ffi-callbacks/main.c:19: undefined reference to `cffi_start_python'
[23:15:56] <Jin^eLD> collect2: error: ld returned 1 exit status
[23:15:59] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[23:16:06] <Jin^eLD> as expected
[23:16:10] <habnabit_> Jin^eLD, but it did successfully link the other exported symbols?
[23:16:45] <Jin^eLD> of course it did link the symbols  that have been configured to be exported via build.py
[23:17:03] <Jin^eLD> because they were not generated as "static" in that C file
[23:17:14] <Jin^eLD> I mean - we cffi docs can't overrule "static" :)
[23:17:21] <Jin^eLD> unless I am missing some wrapper or what not
[23:17:30] <Jin^eLD> s/we/the/g
[23:17:34] *** Joins: tspng (~tspng@2a02:168:a1a1:1:44b0:e6c4:5921:3f8f)
[23:18:07] *** Quits: ambv (~ambv@c138-59.icpnet.pl) (Quit: Textual IRC Client: www.textualapp.com)
[23:18:16] <ska> Is there any way to pre-load all the responsed for 'responses' module in the pytest's setup_class(cls) ?
[23:18:17] <habnabit_> Jin^eLD, yes, but my point is that C is baroque enough that i'd trust the docs over how it appears
[23:18:27] <habnabit_> Jin^eLD, there might be linker tricks to export it anyway etc
[23:18:35] *** Joins: drincruz (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[23:18:46] <Jin^eLD> well the easiest trick would be to sed away the static in its declaration
[23:18:47] <habnabit_> Jin^eLD, in this case it might be an actual mistake in cffi
[23:18:49] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564) (Ping timeout: 246 seconds)
[23:18:52] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Ping timeout: 250 seconds)
[23:18:55] <habnabit_> Jin^eLD, i was going to ask #pypy about it
[23:19:04] <Jin^eLD> are they cffi hackers?
[23:19:06] <ska> I'm so far unable to get any responses defined in setup_class() to show up.
[23:19:08] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[23:19:16] <Jin^eLD> let me join there
[23:19:19] <habnabit_> Jin^eLD, they develop cffi yes
[23:19:52] <Jin^eLD> ok then let me ask them, I am sure there is something that I am missing.. or maybe its indeed a bug
[23:20:00] *** Joins: wyclif (~wyclif@user/wyclif)
[23:20:30] <Jin^eLD> ah, you did, thank you
[23:20:41] <habnabit_> you can add to it ofc
[23:21:17] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 268 seconds)
[23:21:34] *** Joins: schumaml (~schumaml@p200300e2ef2e510053c1821a43d17d29.dip0.t-ipconnect.de)
[23:21:42] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[23:21:44] <SnoopJ> yea, I think the bodge here is making an exported symbol that wraps the static one
[23:21:58] *** Quits: tspng (~tspng@2a02:168:a1a1:1:44b0:e6c4:5921:3f8f) (Ping timeout: 246 seconds)
[23:22:09] <habnabit_> yeah you can re-export it from the set_source block
[23:22:13] <SnoopJ> but it's not entirely clear if it's static because it's only supposed to be used in C you write in build.py or what
[23:22:16] <habnabit_> which is .. quite a hack haha
[23:22:21] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 255 seconds)
[23:23:37] <Jin^eLD> well the comment mentions "from user C code" and I was wondering if they mean from some C code that should get injected into the generated sources via build.py
[23:23:53] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 255 seconds)
[23:23:56] <Jin^eLD> but then, unlike embedding_init for python there is no embedding_init for C
[23:24:06] <SnoopJ> I think they mean C code you write in build.py that would otherwise run before the init happens
[23:24:12] <Jin^eLD> but indeed wrapping it in a non static function would be the trick
[23:24:13] <SnoopJ> which would be a very special edge
[23:24:39] <Jin^eLD> I'll try that, but really curious what #pypy responds
[23:24:47] *** Joins: heco (~redrum@user/redrum88)
[23:24:59] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[23:25:05] <habnabit_> Jin^eLD, i think set_source is the embedding_init equivalent
[23:25:18] <habnabit_> Jin^eLD, it can contain a lot
[23:25:29] *** Joins: zebrag (~chris@user/zebrag)
[23:25:31] *** Joins: wyclif (~wyclif@user/wyclif)
[23:26:13] *** Quits: inom (~inom@176.59.109.161) (Quit: leaving)
[23:26:16] <Jin^eLD> habnabit_: I'll try to write a wrapper around cffi_start_python() there and we'll see if that does the trick
[23:26:28] *** Joins: inom (~inom@176.59.109.161)
[23:26:47] <Jin^eLD> but otherwise it does kind of appear as a bug to me, wanted to ask their support but they're on google groups
[23:26:55] <Jin^eLD> don't have a google account and would not want to get one
[23:27:01] <habnabit_> i don't like mailing lists anyway
[23:27:18] <Jin^eLD> old school ml is fine... anything forcing you to have a google account is not :P
[23:27:21] <habnabit_> i wouldn't say it's a bug except in that it's documented poorly
[23:27:34] <habnabit_> maybe it is only meant to be called from the set_source block
[23:27:41] *** Joins: Deesl (~bsdboy@redhat/psirt/Deesl)
[23:27:45] <habnabit_> i've been wanting to do a revamp of the docs for a while..
[23:27:58] <Jin^eLD> well, that depends :) i.e. if its a bug or not... depending on how they thought it should be used, I mean, why would you force people to write a wrapper around the function that the docs say could be called directly?
[23:28:01] <habnabit_> or more tutorial-style docs
[23:28:06] *** Joins: LunarJetman (LunarJetma@user/zogatribe)
[23:28:15] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Quit: WeeChat 3.2)
[23:28:25] <SnoopJ> Jin^eLD, it could be that they didn't imagine your use-case, or wanted to explicitly discourage it
[23:28:26] *** Quits: inom (~inom@176.59.109.161) (Client Quit)
[23:28:32] <Jin^eLD> the set_source block does not call anything automtically anyway, it just declares stuff
[23:28:33] <LunarJetman> Python is slow and contributes to climate change more than any other mainstream programming language.
[23:28:46] *** ChanServ sets mode: +o habnabit_
[23:28:50] <Jin^eLD> SnoopJ: yet they explicitly write that you can call it :)
[23:28:51] *** habnabit_ sets mode: +b *!*unarJetma@user/zogatribe
[23:28:51] *** LunarJetman was kicked by habnabit_ (you again? sheesh)
[23:28:54] <SnoopJ> Jin^eLD, they aren't wrong
[23:28:58] *** habnabit_ sets mode: -o habnabit_
[23:28:58] *** Quits: MarderIII (~MarderIII@2001:985:e889:1:a86b:cb06:bf1:296e) (Quit: Leaving)
[23:29:08] <SnoopJ> but the doc is definitely unclear about this
[23:29:15] *** Joins: yaalon (~yaalon@201.171.90.143.dsl.dyn.telnor.net)
[23:29:23] <Jin^eLD> they don't have a bugtracker? at least I was not able to find one
[23:29:23] <habnabit_> Jin^eLD, yes, but you can declare a function that gets exported
[23:29:32] <habnabit_> Jin^eLD, and then call that function
[23:29:35] <Jin^eLD> habnabit_: yes, that seems to be the workaround that could work, about to try that
[23:29:46] *** ChanServ sets mode: +o infobob
[23:29:46] *** infobob sets mode: +b $a:Zogatribe
[23:29:46] *** infobob sets mode: -b *!*unarJetma@user/zogatribe
[23:30:07] *** Quits: shabius (~shabius@2a0e:1c80:2:1022::1009) (Remote host closed the connection)
[23:30:15] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[23:30:31] *** Joins: shabius (~shabius@2a0e:1c80:2:1022::1009)
[23:30:35] *** Joins: nomic2 (~nomic@2a00:23c6:9902:2401:cc87:ce85:2ae:5eaf)
[23:30:46] <jessicara> everything pales compared to burning fuels
[23:31:01] *** Joins: wyclif (~wyclif@user/wyclif)
[23:31:07] *** Joins: derelict (~derelict@user/derelict)
[23:32:35] <habnabit_> he's a one-trick pony when it comes to trying to rile people up
[23:32:44] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:cc87:ce85:2ae:5eaf) (Ping timeout: 250 seconds)
[23:32:53] *** Quits: Mikaela (~sid12355@user/mikaela) (Remote host closed the connection)
[23:32:56] <habnabit_> joins #rust every month or so and asks the same question
[23:32:58] *** Quits: digilink (~digilink@user/digilink) (Read error: Connection reset by peer)
[23:33:10] <SnoopJ> I guess we could have asked him if his universal language compiler will still support Python in light of that fact
[23:33:20] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 255 seconds)
[23:33:20] *** Quits: nomic2 (~nomic@2a00:23c6:9902:2401:cc87:ce85:2ae:5eaf) (Client Quit)
[23:33:23] *** Joins: Mikaela (~sid12355@user/mikaela)
[23:33:45] <SnoopJ> His point isn't an unreasonable one, but his behavior is
[23:34:46] *** infobob sets mode: -o infobob
[23:34:55] *** Joins: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044)
[23:35:31] *** Joins: digilink (~digilink@user/digilink)
[23:36:00] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[23:36:32] *** Joins: wyclif (~wyclif@user/wyclif)
[23:36:36] *** Quits: RickDeckard (~RickDecka@pool-100-12-189-215.nycmny.fios.verizon.net) (Quit: Leaving...)
[23:36:50] <dale> Is there any particular built-in code these days for *importing* and looking up the value of an attribute given a string such as "module.submodule.foo.bar"?  I would also accept something capable of dealing with "module.submodule.foo:bar" format.
[23:36:57] <Jin^eLD> habnabit_: and it should really be in set_source? that does not end up in the generated file
[23:37:07] <Jin^eLD> cdef does, but cdef forbids function implementations
[23:37:15] <Jin^eLD> tells me cffi.CDefError: <cdef source string>:6: unexpected <FuncDef>: this construct is valid C but not valid in cdef()
[23:37:35] <habnabit_> Jin^eLD, eh? set_source ends up in _some_ generated file
[23:37:45] <habnabit_> Jin^eLD, maybe put an #error in it to see which
[23:37:55] <Jin^eLD> hmm
[23:38:03] <dale> Barring anything in the stdlib, is there a module that I'm likely to already have installed that provides this behavior?  I think some part of setuptools knows how to deal with foo.bar:baz.whee style references, but I'm not sure if it really provides any public API for that.
[23:38:06] *** vbgunz_ is now known as vbgunz
[23:38:08] <Jin^eLD> but set_source uses h/c that you yourself have to implement, no?
[23:38:14] <graingert> dale: pkgutil-resolve-name
[23:38:14] <Jin^eLD> ok let me try something
[23:38:16] <habnabit_> Jin^eLD, 'h/c'?
[23:38:24] *** Joins: pnoud (~pnoud@user/pnoud)
[23:38:45] <SnoopJ> dale, I wrote code recently that takes "foo.bar:baz" and does a split(), an import call (into zipimport specifically, but you could use importlib), and then extracts the given name.
[23:39:07] <dale> graingert: That is amazing, thank you.  Slight bummer that it's only 3.9 and up, but I'll call that "further motivation to upgrade".
[23:39:20] <graingert> dale: You can use my backport
[23:39:31] <dale> SnoopJ: Yeah, I've written this code a dozen times in my life, seems like by now it should be readily available, and it turns out it is.
[23:39:36] *** Joins: skapata (~Skapata@user/skapata)
[23:39:40] <SnoopJ> https://pypi.org/project/pkgutil_resolve_name/
[23:39:47] <habnabit_> it's been in twisted forever too
[23:39:54] *** Quits: ham5urg (~ham5urg@92.240.33.192) (Ping timeout: 240 seconds)
[23:40:02] <dale> graingert: Ha, just found that too, thanks.
[23:40:19] <SnoopJ> dale, re: our discussion yesterday, I think we'll be seeing a lot more of this "oh, gosh, FINALLY" stuff in the releases ahead :)
[23:40:28] <Jin^eLD> ok that works: https://paste.ee/p/8hwZ0
[23:40:31] <dale> SnoopJ: Yeah!
[23:40:42] <graingert> habnabit_: the twisted one is weird though
[23:40:51] <dale> pkgutil looks cool in general.  I knew if I just waited a decade to switch to Python 3 you all would have all the cool stuff ready for me.
[23:40:51] <habnabit_> Jin^eLD, i don't know what you did if not exactly that!
[23:40:55] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[23:41:01] <habnabit_> Jin^eLD, because that's what i was suggesting
[23:41:22] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[23:41:26] *** Quits: molyvius (~molyvius@user/molyvius) (Ping timeout: 255 seconds)
[23:41:55] * SnoopJ just got the joke behind paste.ee
[23:42:02] *** Joins: wyclif (~wyclif@user/wyclif)
[23:42:04] <SnoopJ> maybe I should've had that coffee after all
[23:42:44] <Jin^eLD> habnabit_: well yes, I did what you were suggesting :) its just that I did not realize I did not _have_ to do it in the sources=[], but that I should do it in the inline part
[23:43:05] <grym> SnoopJ: usually the right answer
[23:43:14] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 252 seconds)
[23:43:20] <Jin^eLD> so I'd say problem solved via a workaround
[23:43:27] <Jin^eLD> habnabit_, SnoopJ : thank you once again :)
[23:43:49] <SnoopJ> Jin^eLD, I think habnabit_ was probably more helpful, but I'm glad the bodge is enough to get you unstuck
[23:44:40] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:45:47] <Thanatos> Hello everyone
[23:46:44] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[23:46:50] *** Quits: Nanobot567 (~Nanobot56@2600:6c58:757f:e4b3:b03c:9256:7494:dc07) (Ping timeout: 255 seconds)
[23:46:58] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[23:47:16] <Jin^eLD> SnoopJ: habnabit_ did indeed have the final idea, but you did spend enough time at this as well and tried to help, so credit where credit is due
[23:47:17] *** Quits: dvx (~dvx@185.63.97.64) (Read error: Connection reset by peer)
[23:47:32] *** Joins: wyclif (~wyclif@user/wyclif)
[23:49:03] *** Quits: drincruz (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com) (Ping timeout: 265 seconds)
[23:49:13] <Thanatos> Hello everyone
[23:49:22] <SnoopJ> Thanatos, hi
[23:49:32] *** Quits: dld (~davidlowr@73.61.8.49) (Ping timeout: 265 seconds)
[23:50:25] *** Joins: inom (~inom@176.59.109.161)
[23:51:25] *** Joins: dld (~davidlowr@73.61.9.64)
[23:52:30] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[23:53:03] *** Joins: wyclif (~wyclif@user/wyclif)
[23:53:56] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[23:54:34] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:5116:121c:1aec:4564)
[23:55:15] <Thanatos> I'm trying to escape " and ' in a string I'm trying to pass as a json request. I prepare the request in python and then use that request to write out a curl request.
[23:55:46] <habnabit_> Thanatos, why not make the request from python?
[23:55:57] <Thanatos> System access issues
[23:55:57] *** Quits: fbiagent_ (~fbiagent@user/fbiagent) (Ping timeout: 245 seconds)
[23:56:00] <habnabit_> Thanatos, curl wouldn't need any escaping anyway
[23:56:33] <Thanatos> Sorry, I'm compiling many curl requests in one bash script.
[23:56:44] <habnabit_> Thanatos, sigh. sounds awful
[23:57:07] <Thanatos> Strings with ' and " tripping it up
[23:57:45] <habnabit_> Thanatos, why generate a bash script at all? run a python script
[23:57:47] <Thanatos> Escaping the strings normally using replace() works
[23:58:17] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[23:58:20] <Thanatos> but passing the escaped string into a request and getting it from the other side doesn't
[23:58:33] *** Joins: wyclif (~wyclif@user/wyclif)
[23:58:43] <habnabit_> Thanatos, bash just sucks at this. take bash out of it
[23:58:53] *** Joins: WanderingGlitch (~Wandering@aha/hacker/wanderingglitch)
[23:59:29] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
