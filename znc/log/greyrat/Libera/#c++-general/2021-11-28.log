[00:03:46] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[00:05:59] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[00:06:12] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 268 seconds)
[00:16:39] *** Joins: montpol (~wellmathe@85.251.70.233.dyn.user.ono.com)
[00:18:17] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[00:34:22] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 260 seconds)
[00:39:29] *** Joins: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[00:50:39] *** Joins: evocatus (~evocatus@213.193.2.105)
[00:56:09] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 268 seconds)
[01:06:16] *** Joins: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[01:13:25] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[01:14:08] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[01:21:25] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 268 seconds)
[01:27:38] *** Joins: Simplar (~Simplar@188.163.92.225)
[01:28:11] *** Quits: paul424 (~tom@ip-5-172-236-120.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[01:29:11] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[01:34:21] *** Quits: robod34 (Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:35:54] <yolo> Rob Pike claims the most important design criteria for golang is: readability. i found it's too ironic, i'm not totally new to golang, but golang truly is the ugliest in readability, simply because it is at odds with general English wording order
[01:36:28] <yolo> python is 10X more readable than golang, c/c++/java/javascript is at least 5x more readable.
[01:38:42] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:38:49] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:38:49] *** ChanServ sets mode: +v npaperbot
[01:39:13] <yolo> `func (b base) describe() string{}`  -- `string base::describe(){}` the latter one is so much easier to read
[01:42:12] <yolo> ducktyped interface will lost you in no time, terrible readability
[01:46:56] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:53:59] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[01:57:19] *** Quits: Simplar (~Simplar@188.163.92.225) (Quit: Going offline, see ya! (www.adiirc.com))
[02:01:15] <kalven> it depends on what you're used to
[02:02:33] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:05:10] <RandomReader> yeah, I haven't found ordering to be a big deal in general, just different patterns which aren't hard to pick up
[02:05:42] <RandomReader> that one-line example makes Go look significantly less ambiguous/contextual though, which *does* make a difference
[02:07:20] <kalven> another point re go: it isn't meant to read like english. it *is* meant to be very regular, so that a function always starts with 'func', a type is always introduced with 'type' and so on
[02:09:53] <yolo> i will how long it will take me to be comfortable with it as an average programmer(at best), i was told golang is designed for ordinary coders
[02:10:02] <yolo> s/i will/i will see/
[02:10:22] <RandomReader> would be interested to hear about that, I poked at Go briefly but never spent time with it
[02:10:41] <RandomReader> it struck me as .. hm, hard to describe, maybe "not expressive enough"?
[02:11:23] *** Quits: AmR (~AmREiSa@102.47.62.197) (Ping timeout: 268 seconds)
[02:11:29] <RandomReader> sort of like having to build all your data structures with only an array, it makes the code so repetitive you can't see the structure in it anymore
[02:11:48] *** Quits: tabakhase (~tabakhase@user/tabakhase) (Ping timeout: 256 seconds)
[02:11:57] <RandomReader> that isn't fair, it was just a quick impression, but I never got far enough to really give it a try on something useful
[02:12:00] <yolo> that's actually what Rob have been proud of, 'expressive, easy to read, not so many features, don't want to be the same as other languages"
[02:13:05] <yolo> it has array/slice/struct/map, slice is like the vector in c++, that "if you don't know which one to use, pick that one"
[02:15:30] <cbreak> interestingly, c++ the core language doesn't have vector, map.
[02:15:52] <cbreak> it has raw memory, structs, and lots of overloadable operators that are then used in the stdlib
[02:16:16] <RandomReader> actually, I bet I can find a project written in Go that I'm already familiar with the conceptual details of .. that'd give me a chance to see what real code looks like when I already know what it's supposed to do
[02:16:34] <cbreak> moving complexity into a stdlib is nice, because it makes the language smaller, and the library parts at least theoretically replacable
[02:16:38] <yolo> after two days with it, i do feel that if I need 2 years to be an intermediate c++ programmer, for golang I might just need two months, will see how that turns out end of Feb next year as I only learn golang in after-duty hours
[02:16:58] <cbreak> yolo: 2 years for c++? optimistic :D
[02:17:03] <RandomReader> I do remember hearing that rapid onboarding was a goal of Go
[02:18:31] <yolo> cbreak: 'intermediate', i spent about 8 months(on and off, combined) with c++ so far, still at beginner level for sure
[02:19:45] <yolo> many years in C made me dumber than I used to be
[02:23:59] *** Quits: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu) (Remote host closed the connection)
[02:27:34] *** Joins: tabakhase (~tabakhase@user/tabakhase)
[02:30:57] *** Quits: magla (~gelignite@55d49b41.access.ecotel.net) (Quit: Stay safe!)
[02:35:27] *** Joins: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu)
[02:36:55] *** Quits: evocatus (~evocatus@213.193.2.105) (Quit: Leaving)
[02:47:38] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[02:50:22] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[02:53:19] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:e8e4:f373:6fd4:6d38) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:56:44] *** Joins: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[02:59:23] *** Quits: spaceangel__ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 250 seconds)
[03:00:18] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[03:02:01] *** Quits: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 245 seconds)
[03:02:14] *** Joins: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[03:03:16] *** Quits: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu) (Remote host closed the connection)
[03:05:27] *** Joins: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu)
[03:05:38] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 268 seconds)
[03:08:15] *** Joins: spaceangel__ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[03:08:44] *** Quits: proller (~p@2a02:6b8:b081:1216::1:22) (Ping timeout: 268 seconds)
[03:09:19] *** Joins: proller (~p@80.240.216.69)
[03:10:41] *** Quits: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 256 seconds)
[03:12:33] *** Quits: spaceangel__ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Read error: Connection reset by peer)
[03:13:08] *** Quits: montpol (~wellmathe@85.251.70.233.dyn.user.ono.com) (Remote host closed the connection)
[03:13:14] *** Joins: spaceangel__ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[03:15:55] *** Quits: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu) (Remote host closed the connection)
[03:16:14] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[03:22:58] *** Joins: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu)
[03:24:07] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[03:26:15] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[03:26:39] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[03:28:41] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[03:29:29] *** Joins: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[03:29:42] *** Quits: spaceangel__ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 268 seconds)
[03:31:45] *** Joins: spaceangel__ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[03:32:01] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 245 seconds)
[03:34:31] *** Quits: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 245 seconds)
[03:49:30] <mort> watching herb's talk on the 'is' and 'as' stuff
[03:49:34] <mort> I like it
[03:49:47] <mort> hell, if just for the variant thing
[03:50:01] <mort> `if (x is int)` rather than `if (std::holds_alternative<int>(x))`
[03:51:01] *** Quits: spaceangel__ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Read error: Connection reset by peer)
[03:51:43] *** Joins: spaceangel__ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[03:57:09] *** Quits: spaceangel__ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 256 seconds)
[03:59:41] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[04:05:43] <hnOsmium0001[m]> I'm more excited about the fact that we no longer will need to write the BS that is std::visit, but also agree with that
[04:07:04] <mort> yeah
[04:07:21] <mort> it's especially bad that you have to copy/paste that overloaded type
[04:07:21] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 256 seconds)
[04:13:00] <mort> a bit worried that it seems like a completely different language tho
[04:13:07] <mort> especially with things like adding 'is _' to be the default case
[04:13:18] <mort> 'is _' and 'default' and 'else' are now 3 ways to specify a default case
[04:14:12] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[04:25:28] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[04:33:32] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:c9c2:550b:b5da:5a2a) (Quit: Konversation terminated!)
[04:36:39] *** Joins: ferdna (~ferdna@user/ferdna)
[04:38:40] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[04:39:25] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[04:48:19] <smallville7123> ville: if a umm object is to be owned by multiple objects, does it need to be allocated via new
[04:51:19] <smallville7123> eg    Shader a(type, source); program.attachShader(a); /* Shader `a` is owned by program */   program2.attachShader(a); /* error: Shader `a` has already been moved into `program` so `program2` will own an empty shader
[04:57:04] *** Quits: chozorho (~chozorho@2601:146:300:c30::183) (Quit: WeeChat 3.0)
[05:04:38] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 256 seconds)
[05:05:16] *** Quits: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[05:06:55] <smallville7123> */
[05:17:03] *** Joins: skapate (~Skapata@2804:14c:87b0:a6f9:a978:3601:cbb2:ebf5)
[05:17:03] *** Quits: skapate (~Skapata@2804:14c:87b0:a6f9:a978:3601:cbb2:ebf5) (Changing host)
[05:17:03] *** Joins: skapate (~Skapata@user/skapata)
[05:17:32] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[05:18:23] *** fluter- is now known as fluter
[05:20:12] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[05:38:09] *** Joins: chozorho (~chozorho@2601:146:300:c30:9a57:4402:e6ce:9b99)
[05:38:42] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:38:49] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:38:49] *** ChanServ sets mode: +v npaperbot
[05:43:07] *** Quits: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu) (Ping timeout: 256 seconds)
[05:48:13] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[06:10:48] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[06:13:40] <hnOsmium0001[m]> making a Program own a Shader doesn't make sense since an opengl shader is implicitly shared by program objects it's attached to
[06:14:14] <hnOsmium0001[m]> even if you glDeleteShader after it's attached to a program, nothing will go wrong since your driver would internally realize it's currently used and keep the object
[06:21:58] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[06:25:15] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[06:28:39] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[06:29:22] *** Joins: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu)
[06:32:25] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[06:39:41] <smallville7123> ville: ok i think i got the reference counting to work
[06:40:10] <smallville7123> hnOsmium0001[m]: yea
[06:40:55] <smallville7123> how can i account for this?
[06:41:48] <hnOsmium0001[m]> just don't bother, make the user pass a list of Shader's to Program on creation and forget about them afterwards: the user may choose to keep the Shader's or delete them, doesn't create a difference
[06:41:50] <smallville7123> https://gist.github.com/mgood7123/58960b91901271a5d0ff44e538f6ed46
[06:42:26] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 245 seconds)
[06:43:28] <smallville7123> hnOsmium0001[m]: yea
[06:44:44] <smallville7123> i do something like that here https://gist.github.com/mgood7123/9e103e59f40d72a9ccc7f75f259402ec
[06:45:39] <kalven> are you just blasting EASTL_LIKELY all over the place?
[06:46:17] <hnOsmium0001[m]> this is very suspiciously complicated, and I doubt that you actually need the functionality of dynamically attaching/detaching shaders to a program
[06:46:42] <smallville7123> kalven: i dont think so, why?
[06:47:35] <smallville7123> hnOsmium0001[m]: im basically re-implementing the gl context/state as a C++ object so that i can attempt to have isolated GL states
[06:48:26] <smallville7123> (not literally reimplementing it, just a thin wrapper)
[06:48:31] <hnOsmium0001[m]> AFIAK nothing about shaders and programs has any global state, all functions take an object and it only affects the given object?
[06:49:05] <smallville7123> not quite
[06:49:25] <kalven> smallville7123: just curious, in your attachShader, you're looping over the existing shaders attached to the program and it's "likely" that the shader being attached has already been attached?
[06:49:26] <hnOsmium0001[m]> I've yet to see a use of glDetatchShader in the real world
[06:49:43] <hnOsmium0001[m]> infact if I search for `glDetatchShader` in unreal engine's source code, 0 occurences show up
[06:50:02] <smallville7123> shaders and programs are... mostly tied to the current opengl context
[06:50:25] <smallville7123> hnOsmium0001[m]: welp, :)
[06:50:38] <hnOsmium0001[m]> anyways my point is you don't need to wrap around functionalies that you never need
[06:50:39] <smallville7123> there may be a use for it :)
[06:50:53] <hnOsmium0001[m]> that 'maybe' is doing a lot of work there...
[06:51:07] <smallville7123> also a program implicitly detaches all shaders upon deletion anyway
[06:51:36] <smallville7123> so that kinda justifies a wrapper for glDetachShader
[06:52:48] <smallville7123> kalven: yes?
[06:53:46] <smallville7123> i just find it ineffiecent looping over the entire shaders just to find out the first shader is being attached twice
[06:55:57] <smallville7123> idk, i guess i could do this instead     if(EASTL_LIKELY((*current != shader))) continue;
[06:56:57] <kalven> smallville7123: so it's likely that the programmer (you) is calling attachShader with a bunch of dupes?
[06:57:14] <smallville7123> or     if(EASTL_UNLIKELY((*current == shader))) continue;     ?
[06:58:31] <smallville7123> kalven: it is unlikely the programmer will attach the same shader to the same program more than once without first detaching the shader
[06:59:24] <kalven> smallville7123: okay, but your usage of LIKELY says that it's likely that every node in the list is the same as the arg?
[06:59:56] <smallville7123> ould this be better? https://gist.github.com/3dfb3132a6b4163669a5ef595054ef89
[06:59:59] <smallville7123> would*
[07:00:05] <smallville7123> kalven:
[07:00:08] <kalven> anyway, my point is more: don't sprinkle stuff like likely-macros all over the place. don't sprinkle it in places that are going to be called seldomly. in particular, don't tell the compiler the wrong thing - then you're just actively making things worse
[07:00:33] <kalven> smallville7123: the better thing would be to drop EASTL_LIKELY/UNLIKELY until you know what you're doing
[07:01:13] <smallville7123> https://gist.github.com/89c0ee9d4f9ac0043b1bc80da8742584 *
[07:03:50] <smallville7123> i do know that it is likely for a programmer to register the same callback more than once (eg they might want to make sure that the callback is registered and they dont know if it has already been registered or not)
[07:04:42] <smallville7123> (in which case the callback is not registered twice even if explicitly attempted more than once)
[07:05:17] <smallville7123> eg https://gist.github.com/9ee41f3052f18b1d880ab74d561c3d0f
[07:05:22] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[07:06:26] <kalven> that's also wrong, but cargo cultists gon' cult
[07:15:43] *** Joins: gargus (~user@114.198.29.250)
[07:22:17] *** Joins: jkaye (~jkaye@2601:281:8300:7530:ee04:303f:9e4f:aa70)
[07:26:43] *** Quits: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4) (Read error: Connection reset by peer)
[07:27:03] *** Joins: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4)
[07:30:11] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[07:34:48] *** Joins: thad_the_man_2 (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4)
[07:47:06] *** Quits: thad_the_man_2 (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4) (Quit: Leaving)
[07:50:28] *** Quits: jkaye (~jkaye@2601:281:8300:7530:ee04:303f:9e4f:aa70) (Ping timeout: 260 seconds)
[08:17:30] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[08:18:28] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[08:21:50] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[08:55:15] *** Joins: NiD27 (~nid27@49.205.148.17)
[08:58:15] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[09:02:10] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[09:02:31] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[09:02:41] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[09:03:47] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[09:03:58] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[09:05:30] *** Joins: reumeth (~reumeth@user/reumeth)
[09:06:42] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[09:07:07] *** Joins: pulse (~pulse@user/pulse)
[09:22:18] *** Quits: Terminus (~null@user/terminus) (Quit: ZNC 1.8.2 - https://znc.in)
[09:22:36] *** Joins: Terminus (~null@user/terminus)
[09:32:17] *** Joins: EdFletcher (~PKD@user/edfletcher)
[09:37:12] <smallville7123> ok so it seems like the reference counting works correctly (probably due to the double-delete protection)
[09:37:23] <smallville7123> tho i am only testing with a single program
[09:38:43] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:38:50] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:38:50] *** ChanServ sets mode: +v npaperbot
[09:40:03] * smallville7123 tests with a second program
[09:40:34] <smallville7123> yay it works
[10:00:57] <leonardus> What could be some problems trying to compile some old C++ code (~20y) using a modern C++ compiler? Should it just work?
[10:01:41] <leonardus> I'm trying to get this old SDK working but not sure if it's worth my time.
[10:04:32] <ville> highly doubt it would, even if you are able to force your compiler into 98 mode
[10:17:45] <leonardus> ville: why not?
[10:17:59] <leonardus> just curious
[10:19:17] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[10:21:53] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[10:28:50] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[10:31:28] <ville> in my experience whatever was the "current" c++ at the time some SDK is/was released they lag behind by 3-5 years in what they use. so ~2000s timeframe would put the SDK using pre-standard c++
[10:45:58] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[10:55:48] <smallvil_> well fk, i need to rethink my LOG_INFO function which uses EA::StdC::Printf
[10:57:00] <smallvil_> because while this work on desktop/terminals, it fails on android due to the way android's log function works
[10:57:01] <smallvil_> #define LOG_INFO(...) { EA::StdC::Printf("INFO: " __VA_ARGS__); EA::StdC::Printf("\n"); }
[10:57:58] <smallvil_> eg in android, the log function `__android_log_write` just appends a new line regardless of wether you give it a new line or not
[10:58:49] <smallvil_> in which "The __android_log_write function appends a \n to every call you make to it. This is a problem for us because during a sprintf of a single string we call our Writer multiple times."
[11:01:17] <leonardus> ville: do you think it would be any different for C?
[11:02:05] <smallvil_> and i cannot do #define LOG_INFO(fmt, ...) as i get `error: expected expression` for `LOG_INFO("Detaching all attached shaders”);` in the case of `#define LOG_INFO(fmt, ...) { EA::StdC::Printf("INFO: " fmt "\n", __VA_ARGS__);`
[11:02:48] <smallvil_> as it expands to EA::StdC::Printf("INFO: " "Detaching all attached shaders” "\n", );
[11:03:00] <smallvil_> :(
[11:04:24] <kalven> :|
[11:04:33] *** Quits: skapate (~Skapata@user/skapata) (Remote host closed the connection)
[11:04:36] <Svitkona> :S
[11:07:28] <smallvil_> god dammit EA
[11:09:04] <leonardus> smallvil_: is that eastl?
[11:13:29] <vdamewood> leonardus: Well, C had a standard about a decade earlier, and has had fewer of them.
[11:15:19] <KombuchaKip> Does *this create a new copy of the object pointed to by this?
[11:17:08] <RandomReader> "*this" is just a pointer dereference, so depends on what you do with the result of that expression...?
[11:23:15] <vdamewood> On it's own, '*this' pretty much does nothing but yield the current object.
[11:23:44] <vdamewood> ... and if you don't do anything with it, that ends up being more nothing.
[11:25:29] <smallvil_> leonardus: https://github.com/electronicarts/EASTL/blob/master/doc/Introduction.md
[11:26:58] <smallvil_> *this is often used to return by reference, eg assignment operators return by reference
[11:27:11] <smallvil_> eg         return *this;
[11:27:23] <KombuchaKip> return Something(*this);
[11:27:32] <smallvil_> that too
[11:27:47] <vdamewood> That would pass a copy to Something()
[11:27:55] * KombuchaKip nods
[11:28:34] <vdamewood> But it's the fact that you're passing a value to Something() that makes the copy, not the usage of *thig.
[11:28:46] <vdamewood> s/thig/this/
[11:29:07] <smallvil_> wether that copies by value or reference depends on the argument type
[11:29:36] <smallvil_> Something(Other & other) // pass by reference, no copy is made
[11:29:44] <smallvil_> Something(Other other) // pass by value, a copy is made
[11:30:12] <smallvil_> Other o = other; // a copy is made even if other is a reference
[11:34:31] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 245 seconds)
[11:36:02] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[11:41:34] <smallvil_> ooo https://github.com/electronicarts/EASTL/blob/fad54717f8e4ebb13b20095da7efd07a53af0f10/include/EASTL/atomic.h#L309
[11:53:16] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[11:54:02] *** Quits: luizfrds (~Luiz@152.250.243.147) (Ping timeout: 240 seconds)
[11:55:07] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[12:00:21] *** Joins: montpol (~wellmathe@85.251.70.233.dyn.user.ono.com)
[12:07:20] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[12:15:38] *** Joins: robod34 (Username@79.113.195.239)
[12:16:14] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[12:24:02] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[12:25:24] *** Quits: NiD27 (~nid27@49.205.148.17) (Quit: Leaving)
[12:34:03] *** Quits: montpol (~wellmathe@85.251.70.233.dyn.user.ono.com) (Quit: Leaving)
[12:34:59] *** Joins: montpol (~wellmathe@85.251.70.233.dyn.user.ono.com)
[12:37:00] *** Quits: montpol (~wellmathe@85.251.70.233.dyn.user.ono.com) (Client Quit)
[12:37:28] *** Joins: montpol (~wellmathe@85.251.70.233.dyn.user.ono.com)
[12:40:17] <ville> smallville7123: in: Other o = other; you can't know if a copy is made. as you can't tell what particular constructor gets called or if any implicit conversions occur
[12:40:40] <smallville7123> true
[12:41:00] <ville> smallville7123: for a specific type you can of course know it, but in general you can't from looking at just that syntax
[12:41:11] <smallville7123> as the class may just have a move constructor
[12:41:20] <smallville7123> and no copy constructor
[12:41:39] <ville> not that even. it could have something with a copy ctor signature but which doesn't behave like one.
[12:41:46] <smallville7123> yup
[12:42:02] <ville> aa(aa const& x) : p{&x} {}
[12:42:48] <ville> or you could have a type with an implicit conversion to some type and a matching ctor taking the converted-to type that gets picked
[12:43:32] <ville> struct aa { aa(int) {} operator int() { return 0; } }; or so
[12:44:21] *** Quits: montpol (~wellmathe@85.251.70.233.dyn.user.ono.com) (Quit: Leaving)
[12:44:48] *** Joins: montpol (~wellmathe@85.251.70.233.dyn.user.ono.com)
[12:46:17] <smallville7123> whats the difference between ostream and ostringstream
[12:48:13] <ville> ...wait that's nonsense. conversion functions are not considered there i think
[12:49:47] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[12:51:23] *** Quits: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu) (Remote host closed the connection)
[12:52:58] *** Joins: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu)
[12:55:09] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[12:55:38] <ville> or they are, but you can't write a type that would pick the aa(int) over aa(aa const&) or aa(aa&&)? nevermind
[13:03:18] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[13:08:06] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[13:10:22] *** Quits: montpol (~wellmathe@85.251.70.233.dyn.user.ono.com) (Quit: Leaving)
[13:12:00] *** Quits: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu) (Ping timeout: 265 seconds)
[13:18:34] *** Joins: pulse (~pulse@user/pulse)
[13:24:31] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:b80b:4e57:8e38:df5a)
[13:30:20] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[13:34:01] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 256 seconds)
[13:35:08] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[13:37:11] <smallville7123> how do i get this to be able to do LOGGER_OSTREAM {} << 5;
[13:37:14] <smallville7123> https://gist.github.com/mgood7123/69eccf4b1948a1bac51d587d3449ae96
[13:38:43] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:38:50] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:38:50] *** ChanServ sets mode: +v npaperbot
[13:43:18] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[13:46:12] *** Quits: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Quit: Going offline, see ya! (www.adiirc.com))
[13:49:02] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[13:49:23] *** Joins: meator (~meator@user/meator)
[13:49:33] <ville> !give smallville7123 testcase
[13:49:34] <nolyc> smallville7123: A testcase is the _least_ amount of code that replicates your problem, paste it to https://wandbox.org/ then: 1) click run 2) click share 3) click url and 4) paste the url for us. You _must_ use that website. Do _not_ use a different website. Do _not_ paste code to the channel. See the testcase checklist at http://eel.is/iso-c++/testcase/
[13:51:38] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 265 seconds)
[14:08:01] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[14:10:29] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 265 seconds)
[14:10:50] *** Joins: plastico (~plastico@neomutt/plastico)
[14:13:25] *** Joins: antonym_ (uid432694@id-432694.hampstead.irccloud.com)
[14:15:19] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:b80b:4e57:8e38:df5a) (Ping timeout: 265 seconds)
[14:18:02] *** Joins: AmR (~AmREiSa@102.47.62.197)
[14:19:32] *** Quits: chozorho (~chozorho@2601:146:300:c30:9a57:4402:e6ce:9b99) (Ping timeout: 240 seconds)
[14:19:33] *** Joins: magla (~gelignite@55d4f645.access.ecotel.net)
[14:23:10] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[14:25:57] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 265 seconds)
[14:31:37] *** Joins: CoderCharmander (~CoderChar@20014C4C1256300085DECD4F21A717FC.catv.pool.telekom.hu)
[14:31:46] *** Joins: proller (~p@80.240.216.69)
[14:43:04] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:47:09] *** Joins: rajkosto (~rajkosto@93-86-146-248.dynamic.isp.telekom.rs)
[14:53:27] *** Joins: markong (~kvirc@213.146.188.203)
[14:55:07] *** Joins: rodriguez (~AdminUser@191.32.254.145)
[14:59:13] *** Quits: CoderCharmander (~CoderChar@20014C4C1256300085DECD4F21A717FC.catv.pool.telekom.hu) (Remote host closed the connection)
[15:01:12] *** Joins: CoderCharmander (~CoderChar@20014C4C1256300085DECD4F21A717FC.catv.pool.telekom.hu)
[15:04:17] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Remote host closed the connection)
[15:05:32] *** Quits: CoderCharmander (~CoderChar@20014C4C1256300085DECD4F21A717FC.catv.pool.telekom.hu) (Ping timeout: 240 seconds)
[15:05:50] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[15:13:26] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[15:17:55] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[15:20:36] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[15:21:58] *** Joins: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[15:23:07] <smallville7123> how do i get this to be able to do LOGGER_OSTREAM() << 5 << std::endl;      https://wandbox.org/permlink/mRuyMD3myVKSygtH
[15:24:55] *** Quits: rodriguez (~AdminUser@191.32.254.145) (Ping timeout: 265 seconds)
[15:30:17] <smallville7123> how do i get this to be able to do        LOGGER_OSTREAM() << 5 << std::endl;      like i can for     Stream() << 5 << std::endl;      https://wandbox.org/permlink/gBxFeBtK1rDO6uPu
[15:31:51] *** Joins: bobb_ (~bobb_@dslb-092-074-251-151.092.074.pools.vodafone-ip.de)
[15:38:27] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 265 seconds)
[15:38:51] <ville> smallville7123: reference-to-non-const can't bind to a temporary
[15:39:56] *** Quits: meicceli (meicceli@kapsi.fi) (Ping timeout: 245 seconds)
[15:40:00] <smallville7123> hmmm
[15:40:08] <smallville7123> what is the difference between this
[15:40:10] <smallville7123> LOGGER_OSTREAM &operator<<(const int & value)
[15:40:11] <smallville7123> and this
[15:40:20] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:9a7:b79a:8640:c125)
[15:40:21] <smallville7123> friend LOGGER_OSTREAM &operator<<(LOGGER_OSTREAM &os, const int & value)
[15:40:21] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[15:40:36] *** Joins: meicceli (meicceli@kapsi.fi)
[15:40:43] <ville> one is a member function, the other is a friend non-member function
[15:40:57] <ville> presumably you meant the first one to be with in a class definition
[15:41:07] <smallville7123> as ostream uses the former but other classes (particularly examples on the web) use the latter
[15:41:09] *** Quits: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[15:41:55] <ville> there are some subtletities whether to do operators as members or non-members. personally i write all operators as non-members that can be written as non-member
[15:43:40] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[15:43:41] <ville> the c++ standard library's streams were specified at a time when rvalue-references didn't exist, so that may have driven some of the decissions there
[15:45:36] <Raziel> is that a nice way of saying "don't use streams"?
[15:45:40] <Raziel> because, yeah.
[15:46:40] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 265 seconds)
[15:50:06] <whupdup> 40 years later, stdio is still the GOAT, for better or worse
[15:51:16] <Raziel> you can also use something like fmt (or the C++20 implementation if you have access to it) for some more modern touches
[15:51:20] *** Joins: Roughy (~mdaw45ns@user/roughy)
[15:52:05] <Raziel> just note that the formatting syntax is different from the c formatting stuff, and you'll have to learn that too :p
[15:52:51] <smallvil_> :)
[15:55:24] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[15:56:46] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:02:33] *** Joins: cart_man (~rynot@host-78-144-121-71.as13285.net)
[16:04:18] *** Joins: paul424 (~tom@ip-37-248-159-79.multi.internet.cyfrowypolsat.pl)
[16:13:43] *** Joins: RoKenn (~RoKenn@2001:a61:34f1:ae01:d017:9559:5c8b:c349)
[16:13:43] *** Quits: RoKenn (~RoKenn@2001:a61:34f1:ae01:d017:9559:5c8b:c349) (Changing host)
[16:13:43] *** Joins: RoKenn (~RoKenn@user/rokenn)
[16:18:17] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[16:18:47] *** Quits: paul424 (~tom@ip-37-248-159-79.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[16:21:37] *** Quits: antonym_ (uid432694@id-432694.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[16:21:48] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[16:23:15] *** Quits: Spirit532 (~Spirit532@mm-71-247-122-178.mgts.dynamic.pppoe.byfly.by) (Read error: Connection reset by peer)
[16:23:37] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[16:24:54] *** Joins: Spirit532 (~Spirit532@178.127.124.22)
[16:25:16] <smallville7123> is std::printf just a wrapper for C printf
[16:25:46] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 245 seconds)
[16:25:53] <cbreak> smallville7123: it IS the C printf
[16:26:06] <smallville7123> oh ok
[16:27:18] *** Quits: rajkosto (~rajkosto@93-86-146-248.dynamic.isp.telekom.rs) (Ping timeout: 268 seconds)
[16:33:01] *** Joins: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu)
[16:33:34] *** Joins: rajkosto (~rajkosto@91-150-115-184.dynamic.isp.telekom.rs)
[16:38:01] *** Joins: Burgundy (~yomon@79.115.213.171)
[16:42:43] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 268 seconds)
[16:47:54] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[16:48:03] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:48:57] *** Quits: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu) (Ping timeout: 256 seconds)
[16:49:38] *** Joins: CoderCharmander (~CoderChar@20014C4C1256300085DECD4F21A717FC.catv.pool.telekom.hu)
[16:59:58] <smallville7123> why do i get this? https://wandbox.org/permlink/REdjFuB5PYyFDfA4    0x4044b4       LOGGER_OSTREAM() << "END" << std::endl;
[17:23:04] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:26:34] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 260 seconds)
[17:28:03] *** Quits: meator (~meator@user/meator) (Ping timeout: 256 seconds)
[17:28:17] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:29:21] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:29:31] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Ping timeout: 245 seconds)
[17:30:16] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:31:19] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:32:23] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[17:34:47] *** Quits: gargus (~user@114.198.29.250) (Quit: Leaving)
[17:36:27] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[17:37:21] *** Quits: meicceli (meicceli@kapsi.fi) (Ping timeout: 265 seconds)
[17:38:03] <ville> you are specifically calling the member version of the operator <<, and it would appear that the matching overload there will simply print the address the pointer has. probably it resolves to some void*-overload
[17:38:07] *** Joins: meicceli (meicceli@kapsi.fi)
[17:38:44] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:38:51] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:38:51] *** ChanServ sets mode: +v npaperbot
[17:39:12] <ville> guessing https://en.cppreference.com/w/cpp/io/basic_ostream/operator_ltlt overload 7 is picked
[17:39:30] *** Joins: luizfrds (~Luiz@152.250.243.147)
[17:40:00] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[17:43:16] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[17:48:35] *** Joins: meator (~meator@user/meator)
[17:49:56] *** Quits: mgot (~mgot@vps-35cddd71.vps.ovh.net) (Quit: Goodbye)
[17:52:38] <smallville7123> ville: hm ok
[17:52:47] <smallville7123> i will investigate tomorrow :)
[17:53:05] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[17:53:39] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[17:54:25] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[17:57:20] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 268 seconds)
[17:58:36] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[17:59:02] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[18:03:27] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 265 seconds)
[18:25:55] *** Joins: great_taste (~great_tas@190.32.235.20)
[18:26:18] *** Joins: rajkohaxor (~rajkosto@91-150-115-184.dynamic.isp.telekom.rs)
[18:29:04] *** Quits: rajkosto (~rajkosto@91-150-115-184.dynamic.isp.telekom.rs) (Ping timeout: 265 seconds)
[18:30:10] *** Joins: bitrot (~rajkosto@91-150-115-184.dynamic.isp.telekom.rs)
[18:33:13] *** Quits: rajkohaxor (~rajkosto@91-150-115-184.dynamic.isp.telekom.rs) (Ping timeout: 256 seconds)
[18:35:15] *** Joins: jkaye (~jkaye@2601:281:8300:7530:9397:8874:2ff1:8d72)
[18:45:22] *** Joins: rajkosto (~rajkosto@91-150-115-184.dynamic.isp.telekom.rs)
[18:49:05] *** Quits: bitrot (~rajkosto@91-150-115-184.dynamic.isp.telekom.rs) (Ping timeout: 256 seconds)
[18:53:40] *** Quits: rajkosto (~rajkosto@91-150-115-184.dynamic.isp.telekom.rs) (Ping timeout: 256 seconds)
[18:54:43] *** Joins: rajkosto (~rajkosto@91-150-115-184.dynamic.isp.telekom.rs)
[18:55:14] *** Quits: rajkosto (~rajkosto@91-150-115-184.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[19:00:48] *** Joins: paule32 (~paule32@user/paule32)
[19:01:38] *** Joins: rajkosto (~rajkosto@91-150-115-184.dynamic.isp.telekom.rs)
[19:07:13] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:21b5:6102:9e2a:a3f9)
[19:07:13] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:21b5:6102:9e2a:a3f9) (Changing host)
[19:07:13] *** Joins: skapata (~Skapata@user/skapata)
[19:10:55] *** Joins: uzer1 (~uzer@dsl-trebng11-54f912-114.dhcp.inet.fi)
[19:11:27] *** Quits: cart_man (~rynot@host-78-144-121-71.as13285.net) (Quit: Konversation terminated!)
[19:25:04] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[19:25:23] *** Quits: rajkosto (~rajkosto@91-150-115-184.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[19:32:02] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:f8d8:2a9b:7d3c:de5) (Quit: Leaving)
[19:46:08] *** Quits: magla (~gelignite@55d4f645.access.ecotel.net) (Quit: Stay safe!)
[19:46:38] *** Joins: magla (~gelignite@55d4f645.access.ecotel.net)
[19:55:03] *** Joins: paul424 (~tom@ip-37-248-154-238.multi.internet.cyfrowypolsat.pl)
[20:05:57] *** Joins: peeps[zen] (~peepsalot@openscad/peepsalot)
[20:07:28] *** Quits: peepsalot (~peepsalot@openscad/peepsalot) (Ping timeout: 268 seconds)
[20:12:56] <ville> https://www.sqlite.org/releaselog/3_37_0.html with strict tables is out. no datetime type though
[20:15:49] <rpav> looking for a simple readline-like lib .. awesome-cpp mentions https://github.com/AmokHuginnsson/replxx and https://github.com/antirez/linenoise have weirdly similar readmes but don't seem to mention each other
[20:16:00] <rpav> though replxx is tagged with "linenoise"
[20:16:34] <rpav> oh i see, the Origin section of replxx links to but doesn't mention by name
[20:17:05] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[20:37:25] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[20:38:01] *** Quits: jkaye (~jkaye@2601:281:8300:7530:9397:8874:2ff1:8d72) (Ping timeout: 250 seconds)
[20:39:31] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[20:50:22] *** Joins: reumeth (~reumeth@user/reumeth)
[20:54:17] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:55:41] *** Joins: rajkosto (~rajkosto@91-150-115-184.dynamic.isp.telekom.rs)
[20:56:26] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[20:57:08] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 265 seconds)
[20:58:20] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[21:11:33] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[21:16:09] *** Joins: chozorho (~chozorho@2601:146:300:c30::17a1)
[21:30:36] *** Joins: Guest6 (~Guest6@135.84.23.169)
[21:31:38] *** Joins: Burgundy (~yomon@79.115.213.171)
[21:32:13] <Guest6> Looking at other people's code, I see many that prefer to write the shorter variant in this: https://paste.debian.net/plain/1221143   . Doesn't the lack of temporary variables make this a pain to use in gdb?
[21:33:10] <Hello71> well you can tell gdb to reevaluate the expression
[21:33:13] <Guest6> when you're stepping through the code you couldn't  see the result at each step, without stepping through annoying subfunctions
[21:34:16] <Guest6> not sure what you mean, lemme fire up my IDE
[21:35:13] <ville> yes lot of people seem to value "neat looking" code over easily to debug
[21:38:44] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:38:51] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:38:51] *** ChanServ sets mode: +v npaperbot
[21:39:10] *** Quits: paule32 (~paule32@user/paule32) (Remote host closed the connection)
[21:39:27] <Alipha> Guest6: the second is also more "self-documenting", by giving meaningful names to subexpressions so the readers know what each subexpression is
[21:39:43] *** Joins: paule32 (~paule32@user/paule32)
[21:43:38] <Guest6> Hello71: sorry, had to do an update. I dont see any option in Qt Creator to reevaluate a previously run expression. Is that a pure gdb thing? Are you referring to the more complex "reverse debugging" feature?
[21:44:14] <Hello71> like, just write "print welcomeBanner.section('\n', 1)"
[21:44:24] <Hello71> i don't know how to do this in your gui.
[21:46:04] <Guest6> ah, I see, pure/CLI usage
[21:46:54] <Guest6> I can send raw gdb commands in the IDE, but I've never bothered since it's extra work, compared to separate variables automatically appearing in "Locals & Expressions" window
[21:46:58] <Guest6> let me try it now
[21:48:53] <Guest6> yeah, that works. only works on pure functions though, not anything that keeps state that effects return value
[21:52:57] <Guest6> there is reverse debugging (going back in time), but when I tried it once, it was unwiedly. It's not something you enable for your whole run, you gotta limit it. You start by setting a start and end breakpoint, enabling record, continue, wait to hit 2nd breakpoint, then you can navigate that short history between the two breakpoints. When I tried
[21:52:57] <Guest6> it to use it for long, it crashed, and it wasnt due to RAM or anything. But there's rr-debugger which supposedly does this better and is high-performance on modern CPUs, I've yet to try it
[21:56:36] *** Quits: Roughy (~mdaw45ns@user/roughy) (Ping timeout: 268 seconds)
[22:04:34] *** Joins: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[22:15:34] *** Quits: Guest6 (~Guest6@135.84.23.169) (Quit: Client closed)
[22:23:53] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[22:24:59] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 256 seconds)
[22:25:48] *** Quits: rajkosto (~rajkosto@91-150-115-184.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[22:28:06] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[22:31:12] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[22:32:21] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 256 seconds)
[22:40:43] *** Joins: xkuru (~xkuru@user/xkuru)
[23:04:20] *** Joins: stefanos82 (~stefanos8@93-18-225.netrun.cytanet.com.cy)
[23:06:14] *** Quits: stefanos82 (~stefanos8@93-18-225.netrun.cytanet.com.cy) (Client Quit)
[23:20:20] <paul424> I now look at     Tile& operator=(const Tile& tt); if I use the = default version would it copy over the values of raw pointers members ?
[23:20:55] <RandomReader> yes, the value of a pointer is the location/address
[23:21:30] <RandomReader> the =default version is exactly the same as going:  member1 = tt.member1;  member2 = tt.member2;  etc
[23:21:37] <paul424> so I need a custom operator= ...
[23:22:31] <paul424> hmm how about the pointers in my custom operator=, should I set them to null_ptr ? Otherwise they have undefined values , right ?
[23:22:34] <RandomReader> and possibly some others, "rule of 5" helps guide here: https://en.cppreference.com/w/cpp/language/rule_of_three
[23:23:01] <RandomReader> you're logically just doing this:   a = b;
[23:23:10] <RandomReader> so whatever that should mean for your objects, you should do that
[23:23:23] <RandomReader> the user would probably expect that afterward, a behaves exactly like a copy of b
[23:24:15] <RandomReader> so you should arrange that your internal pointers end up in some form that will meet the user's expectation
[23:25:45] <RandomReader> they would not have undefined values, they would have the values they were given before
[23:25:57] <RandomReader> operator= is assignment, so your object already exists and is doing something, it's been constructed
[23:26:13] <paul424> I doubt anyone would use the Tile::operator= except me in https://pastebin.com/gH0uXHrz
[23:27:26] <RandomReader> I would not recommend trying to think in those narrow terms
[23:27:36] <paul424> RandomReader, but anyway thanks for explanations .....
[23:27:54] <RandomReader> think about the Tile itself, what it means to be a Tile .. either it should support copy-assignment on its own, or it should not
[23:28:12] <RandomReader> because other things will check and use it, even things you might not expect
[23:28:19] <RandomReader> e.g. a vector<Tile> would be possible and might use it
[23:28:41] <RandomReader> someone might make a map<something, Tile> and do map[i] = tile_thing;
[23:29:13] <paul424> yes yes
[23:29:15] <RandomReader> if these uses do not make sense, if a Tile should not be assigned, then do not make an operator= .. make a specific function that does the narrow thing instead
[23:29:51] <paul424> RandomReader, ohh good point , I will consider it
[23:29:55] <RandomReader> e.g. sometimes you will see polymorphic objects make a .clone() instead of supporting copies
[23:32:52] <paul424> yeah, operator= a bad idea ... so how do I name that function ? swap, move , assign  ?
[23:33:24] <RandomReader> there is move-assignment, so if your Tile is supposed to be a move-only type, you can implement the move version of operator=
[23:33:47] <RandomReader> but those are common names, for something different, maybe "transfer"? I'm not sure what it means in your case
[23:34:01] <RandomReader> (as in, I don't know what a Tile is or does, so hard for me to pick a good name)
[23:34:03] <paul424> yeah transfer would be good
[23:34:13] *** Joins: Roughy (~mdaw45ns@user/roughy)
[23:35:35] <RandomReader> if move assignment does fit, the using code would change to  *lhs = std::move(*rhs);
[23:36:11] <paul424> no , it doesn't fit, it 's not move
[23:36:14] <RandomReader> ok
[23:36:47] <Alipha> paul424: is Tile polymorphic? (does it have virtual functions? are you inheriting from it?)
[23:37:39] <paul424> It is polymorphic
[23:38:55] <Alipha> paul424: then you almost certainly should `=delete` the copy and move operator=, along with the copy constructor and move constructor. operator= and the constructors won't copy/move the derived objects appropriately
[23:39:55] <paul424> okik thanks
[23:41:44] <Alipha> paul424: what does getTile look like? and what member variables does GameMap have?
[23:44:06] <paul424> https://github.com/tomluchowski/OpenDungeons/blob/shaders-improvement/source/gamemap/GameMap.h
[23:45:01] <paul424> getTile is simple:
[23:46:16] <paul424> https://github.com/tomluchowski/OpenDungeons/blob/shaders-improvement/source/gamemap/TileContainer.h#L49
[23:46:55] <paul424> so you see GameMap is big ...
[23:49:10] <paul424> Alipha, soo any comments ?
[23:51:15] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[23:51:38] <RandomReader> (probably looking through it, may take a bit)
[23:52:55] *** Quits: paule32 (~paule32@user/paule32) (Quit: Leaving)
[23:53:06] <Alipha> paul424: so, i see Tile has a base class... but does anything derive from Tile?
[23:53:17] <paul424> no
[23:55:00] <Alipha> paul424: okay, so then you don't need to `=delete` the operator= nor the copy/move constructors because there would be no "slicing" when copying one Tile to another
[23:56:02] <paul424> aha :)
[23:56:21] *** Joins: x_kuru (~xkuru@user/xkuru)
[23:57:15] *** Quits: AmR (~AmREiSa@102.47.62.197) (Ping timeout: 265 seconds)
[23:57:24] *** Joins: seninha (~seninha@user/seninha)
[23:57:57] <paul424> Alipha, here's the sketch : https://i.postimg.cc/c19RRQrG/ODSketch-Draggable-Tile-Container-Flow.jpg
[23:58:37] <paul424> if you are so far initiated :) anyway
[23:58:47] <paul424> sketch of What I am thinking now :D
[23:59:06] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 245 seconds)
[23:59:09] <Alipha> paul424: though you'll have to write custom copy operator= and copy constructor because the compiler-supplied one won't copy those std::vectors of pointers correctly, nor the mCoveringBuilding
