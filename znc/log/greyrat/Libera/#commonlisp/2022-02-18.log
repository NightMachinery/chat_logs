[00:04:36] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[00:04:42] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[00:06:51] *** Joins: aeth (~aeth@user/aeth)
[00:07:57] *** Quits: utis (~utis@84.208.160.26) (Ping timeout: 256 seconds)
[00:09:46] *** Joins: utis (~utis@vpn-client500.uio.no)
[00:17:00] *** Joins: notzmv (~zmv@user/notzmv)
[00:18:23] *** Quits: Inline (~Inline@2a02:908:1252:7a80::1aa) (Quit: Leaving)
[00:18:23] *** Quits: phantomics (~phantomic@71-218-115-230.hlrn.qwest.net) (Read error: Connection reset by peer)
[00:18:24] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[00:19:30] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 272 seconds)
[00:33:42] *** Joins: bollu5 (~bollu@159.65.151.13)
[00:34:43] *** Quits: bollu (~bollu@159.65.151.13) (Read error: Connection reset by peer)
[00:34:43] *** bollu5 is now known as bollu
[00:36:15] *** Joins: phantomics (~phantomic@71-33-156-71.hlrn.qwest.net)
[00:41:40] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 272 seconds)
[00:58:01] *** Quits: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (Quit: WeeChat 3.4)
[01:02:42] *** Quits: gendl (sid100083@id-100083.hampstead.irccloud.com) (Read error: Connection reset by peer)
[01:02:51] *** Joins: gendl (sid100083@id-100083.hampstead.irccloud.com)
[01:02:53] *** Quits: alanz (sid110616@id-110616.uxbridge.irccloud.com) (Ping timeout: 252 seconds)
[01:03:19] *** Quits: griffinmb (sid410590@id-410590.helmsley.irccloud.com) (Read error: Connection reset by peer)
[01:03:24] *** Quits: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com) (Ping timeout: 240 seconds)
[01:03:24] *** Quits: hubvu_ (sid495858@id-495858.tinside.irccloud.com) (Ping timeout: 240 seconds)
[01:03:28] *** Joins: griffinmb (sid410590@id-410590.helmsley.irccloud.com)
[01:03:31] *** Joins: alanz (sid110616@id-110616.uxbridge.irccloud.com)
[01:04:12] *** Quits: neominimum (sid537410@user/neominimum) (Ping timeout: 240 seconds)
[01:04:36] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Ping timeout: 240 seconds)
[01:05:37] *** Joins: neominimum (sid537410@user/neominimum)
[01:05:42] *** Joins: hubvu_ (sid495858@id-495858.tinside.irccloud.com)
[01:05:48] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[01:06:05] *** Joins: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com)
[01:09:37] *** Joins: alvaro121_ (~aa@201.230.126.66)
[01:10:48] *** Quits: alvaro121 (~aa@201.230.126.66) (Ping timeout: 272 seconds)
[01:16:19] *** Quits: triffid (~triffid@gateway/tor-sasl/triffid) (Remote host closed the connection)
[01:20:28] *** Joins: triffid (~triffid@gateway/tor-sasl/triffid)
[01:20:42] *** Joins: sndr (~sander@user/sander)
[01:22:42] *** Quits: sander (~sander@user/sander) (Ping timeout: 252 seconds)
[01:22:42] *** sndr is now known as sander
[01:24:37] *** Quits: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it) (Ping timeout: 240 seconds)
[01:25:00] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[01:25:00] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c) (Ping timeout: 240 seconds)
[01:25:00] *** Quits: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[01:29:02] *** Joins: hashfunc1316 (~user@162.254.115.155)
[01:29:49] *** Quits: alvaro121_ (~aa@201.230.126.66) (Ping timeout: 256 seconds)
[01:30:19] *** Quits: hashfunc1316 (~user@162.254.115.155) (Remote host closed the connection)
[01:30:35] *** Joins: hashfunc107 (~user@162.254.115.155)
[01:32:42] *** Joins: alvaro121 (~aa@201.230.126.66)
[01:32:45] *** Joins: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it)
[01:33:16] *** Quits: pve (~pve@188-67-128-72.bb.dnainternet.fi) (Quit: leaving)
[01:34:55] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[01:36:26] <dieggsy> has atdoc not been updated for quite a while? are there more modern alternatives?
[01:37:00] *** Quits: alvaro121 (~aa@201.230.126.66) (Ping timeout: 240 seconds)
[01:37:19] *** Quits: wacki (~wacki@87.122.87.153) (Quit: Leaving.)
[01:37:40] *** Joins: morganw (~user@80.225.24.132)
[01:37:56] <phoe> staple, mgl-pax
[01:38:06] *** Joins: alvaro121 (~aa@201.230.126.66)
[01:39:47] <edgar-rft> you only need to worry when the last update was *before* 1994 :-)
[01:40:11] <dieggsy> lol
[01:43:57] *** Joins: Inline (~Inline@2a02:908:1252:7a80::1aa)
[01:44:36] *** Quits: alvaro121 (~aa@201.230.126.66) (Ping timeout: 240 seconds)
[01:46:38] *** Joins: alvaro121 (~aa@201.230.126.66)
[01:46:44] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[01:48:32] *** Quits: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[01:49:21] *** Joins: dre (~dre@2001:8003:c932:c301:2079:4593:1556:be9c)
[01:51:20] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 272 seconds)
[01:53:58] *** Quits: cosimone (~user@93-47-231-171.ip115.fastwebnet.it) (Quit: stay out of trouble you crazy kids, and don't hop on the NICE BOAT)
[01:56:56] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[01:57:24] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[02:02:07] *** Quits: hashfunc107 (~user@162.254.115.155) (Ping timeout: 256 seconds)
[02:03:19] *** Joins: alvaro121_ (~aa@201.230.126.66)
[02:04:23] *** Quits: alvaro121 (~aa@201.230.126.66) (Ping timeout: 256 seconds)
[02:07:53] <Guest74> anybody have any examples of using sbcl's with-alien with a c-string?
[02:25:51] *** Joins: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net)
[02:27:36] *** Quits: occ (~occ@user/occ) (Ping timeout: 252 seconds)
[02:28:12] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 240 seconds)
[02:36:18] *** Quits: alvaro121_ (~aa@201.230.126.66) (Ping timeout: 272 seconds)
[02:36:22] *** Joins: alvaro121 (~aa@201.230.126.66)
[02:40:18] *** Quits: rgherdt (~rgherdt@83.236.18.121) (Remote host closed the connection)
[02:40:44] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 272 seconds)
[03:02:30] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:24b4:3a5b:fddb:7ca9) (Read error: Connection reset by peer)
[03:03:00] *** Joins: alvaro121_ (~aa@201.230.126.66)
[03:03:24] *** Quits: alvaro121 (~aa@201.230.126.66) (Ping timeout: 240 seconds)
[03:10:39] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[03:13:33] *** Quits: morganw (~user@80.225.24.132) (Remote host closed the connection)
[03:20:11] *** Joins: s-liao (~s-liao@101.86.96.21)
[03:25:32] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[03:30:49] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[03:35:03] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[03:37:46] *** Joins: waleee (~waleee@h-98-128-229-110.na.cust.bahnhof.se)
[03:38:10] *** Joins: taiju` (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925)
[03:45:33] *** Quits: waleee (~waleee@h-98-128-229-110.na.cust.bahnhof.se) (Ping timeout: 256 seconds)
[03:55:26] *** Quits: nature (~nature@45.32.235.173) (Quit: leaving)
[04:07:42] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[04:11:22] *** Joins: occ (~occ@user/occ)
[04:32:01] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 256 seconds)
[04:36:33] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[04:39:47] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:47:32] *** Joins: trannus_aran (~sammi@c-98-244-55-191.hsd1.ca.comcast.net)
[04:48:21] *** Parts: trannus_aran (~sammi@c-98-244-55-191.hsd1.ca.comcast.net) ()
[04:54:33] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[04:54:51] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[05:02:09] <dbotton> "SB-MOP:CLASS-SLOTS called on #<STANDARD-CLASS CLOG:CLOG-OBJ>, which is not yet finalized." What does not yet finalized mean?
[05:03:34] <Bike> it means that its inheritance has not yet been finalized. it's a mechanism in place to let you define classes before defining their superclasses.
[05:03:55] <Bike> you can use sb-mop:finalize-inheritance to ensure a class is finalized. or just make an instance of it.
[05:04:37] <Bike> until the inheritance is finalized, the slots aren't fully defined. so finalization must take place at latest when you try to make an instance. but you also need finalization to introspect the slots like you're doing.
[05:05:25] <dbotton> ah this is basically and abstract class in my system so that explains it
[05:05:32] <dbotton> much appreciated
[05:05:52] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[05:06:53] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:07:06] *** Quits: eugercek (~user@user/eugercek) (Remote host closed the connection)
[05:07:24] *** Joins: eugercek (~user@user/eugercek)
[05:07:35] <Bike> no prob
[05:07:37] *** Quits: eugercek (~user@user/eugercek) (Remote host closed the connection)
[05:08:47] *** Quits: jealousmonk (~user@user/jealousmonk) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 27.1))
[05:22:42] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[05:30:17] *** Quits: dre (~dre@2001:8003:c932:c301:2079:4593:1556:be9c) (Quit: Leaving)
[05:37:00] *** Joins: jealousmonk (~user@user/jealousmonk)
[05:47:23] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[05:49:53] *** Quits: jealousmonk (~user@user/jealousmonk) (Remote host closed the connection)
[05:51:07] *** Quits: occ (~occ@user/occ) (Read error: Connection reset by peer)
[05:55:28] *** Joins: pillton (~user@61-68-210-157.tpgi.com.au)
[06:23:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[06:55:25] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[07:00:06] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[07:06:26] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[07:15:46] *** Joins: s-liao (~s-liao@101.86.96.21)
[07:30:20] <beach> Good morning everyone!
[07:37:00] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[07:39:10] *** Joins: aeth (~aeth@user/aeth)
[08:02:01] *** Joins: dre (~dre@2001:8003:c932:c301:2079:4593:1556:be9c)
[08:02:15] *** Joins: SR-71 (~user@user/SR-71)
[08:03:07] *** Joins: jeosol (~jeosol@user/jeosol)
[08:05:32] *** Joins: jealousmonk (~user@user/jealousmonk)
[08:07:57] *** Joins: semz_ (~semz@user/semz)
[08:10:12] *** Quits: semz (~semz@user/semz) (Ping timeout: 240 seconds)
[08:14:24] <Guest74> til, you can't use &optional in a loop for clause like in destructuring-bind, but it also doesn't care if there's not enough elements.
[08:15:16] <Guest74> and of course the error The value NIL is not of type REAL when binding #:LOOP-LIMIT-15 gave me no clue what was wrong.
[08:23:04] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[08:43:48] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[08:44:34] *** Joins: wacki (~wacki@87.122.87.153)
[08:45:44] *** Joins: aeth (~aeth@user/aeth)
[08:55:50] *** Joins: Oladon (~olad@98.43.81.226)
[09:01:44] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[09:02:07] *** Joins: akoana (~ah@user/akoana)
[09:08:15] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[09:42:33] *** Quits: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net) (Ping timeout: 256 seconds)
[09:49:23] *** Joins: ritchie101 (~ritchie10@115.204.209.122)
[09:50:34] *** Joins: qiduo (~qiduo@115.204.209.122)
[09:54:44] *** Quits: jealousmonk (~user@user/jealousmonk) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 27.1))
[09:55:52] *** Quits: ritchie101 (~ritchie10@115.204.209.122) (Quit: Client closed)
[09:59:37] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[10:21:48] *** Quits: dre (~dre@2001:8003:c932:c301:2079:4593:1556:be9c) (Ping timeout: 240 seconds)
[10:37:31] *** Quits: snits (~quassel@ip98-179-76-75.ph.ph.cox.net) (Ping timeout: 256 seconds)
[10:44:51] <qhong> is there a way to detect if some thread has entered debugger?
[10:45:04] *** Quits: pillton (~user@61-68-210-157.tpgi.com.au) (Quit: ERC (IRC client for Emacs 27.2))
[10:45:05] <qhong> SBCL-specific solution is acceptable
[10:49:13] <jackdaniel> if you have control over the environment perhaps you could use the *debugger-hook* like
[10:50:21] <jackdaniel> (defun my-hook (condition *old-hook*) (add-thread current-thread *dumdum*) (call-the-old-hook) (del-thread curren-thread *dumdum*)))
[10:50:26] <jackdaniel> with all that thread-safety jazz and all
[10:50:32] *** Joins: ritchie101 (~ritchie10@115.204.209.122)
[10:50:37] *** Quits: ritchie101 (~ritchie10@115.204.209.122) (Client Quit)
[11:01:03] *** Joins: rgherdt (~rgherdt@83.236.18.121)
[11:05:26] *** Quits: qiduo (~qiduo@115.204.209.122) (Quit: WeeChat 3.3)
[11:05:42] *** Joins: qiduo (~qiduo@115.204.209.122)
[11:07:30] *** Joins: dre (~dre@2001:8003:c932:c301:f5ca:6748:5b2:4153)
[11:27:16] *** Joins: silasfox (~sbv@p200300cec712b400b45e618d2b7703c5.dip0.t-ipconnect.de)
[11:27:52] *** Joins: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[11:33:53] *** Quits: dre (~dre@2001:8003:c932:c301:f5ca:6748:5b2:4153) (Quit: Leaving)
[11:39:30] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[11:42:27] *** Joins: Major_Biscuit (~MajorBisc@c-001-017-054.client.tudelft.eduvpn.nl)
[11:45:13] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 256 seconds)
[11:48:45] *** Joins: s-liao (~s-liao@101.86.96.21)
[11:50:44] *** Joins: shka (~herr@109.231.3.55)
[12:02:59] *** semz_ is now known as semz
[12:09:19] *** Joins: pve (~pve@37-136-79-78.rev.dnainternet.fi)
[12:16:22] *** Joins: karlosz (~karlosz@47.151.136.69)
[12:25:40] *** Joins: rgherdt_ (~rgherdt@port-92-193-217-5.dynamic.as20676.net)
[12:28:28] *** Quits: rgherdt (~rgherdt@83.236.18.121) (Ping timeout: 272 seconds)
[12:30:06] *** Quits: nworb (~zbrownm]@2001:470:69fc:105::1:33db) (Quit: You have been kicked for being idle)
[12:44:18] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 272 seconds)
[12:46:30] *** Joins: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl)
[12:50:00] *** Quits: rgherdt_ (~rgherdt@port-92-193-217-5.dynamic.as20676.net) (Quit: Leaving)
[12:50:12] *** Joins: rgherdt (~rgherdt@port-92-193-217-5.dynamic.as20676.net)
[12:55:45] *** Joins: Guest49124124 (~Guest4912@85.194.207.65)
[13:00:06] *** Joins: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it)
[13:04:14] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[13:04:31] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:06:16] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[13:16:00] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[13:16:24] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:31:50] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[13:32:03] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[13:37:58] *** Quits: qiduo (~qiduo@115.204.209.122) (Quit: WeeChat 3.3)
[13:38:01] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[13:38:30] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:39:35] *** Joins: nature (~nature@45.32.235.173)
[13:43:25] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (Quit: Bridge terminating on SIGTERM)
[13:43:25] *** Quits: zbrown[m] (~zbrownsys@2001:470:69fc:105::1:4e81) (Quit: Bridge terminating on SIGTERM)
[13:43:25] *** Quits: yitzi (~yitzi@2001:470:69fc:105::fafd) (Quit: Bridge terminating on SIGTERM)
[13:43:25] *** Quits: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: katco (~katco@2001:470:69fc:105::2b8) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: sp (~sp@user/susam) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: Arcsech (~arcsechma@2001:470:69fc:105::1:797) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: akater[m] (~akatermat@2001:470:69fc:105::ccef) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: miique (~miiquemat@2001:470:69fc:105::1:6901) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: char[m] (~charlesma@2001:470:69fc:105::1:7050) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: linjian (~linj@user/linj) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: seragold[m] (~seragoldm@2001:470:69fc:105::1:6b7f) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: prov[m] (~provessor@2001:470:69fc:105::cfb) (Quit: Bridge terminating on SIGTERM)
[13:43:28] *** Quits: bhyde[m] (~bhydematr@2001:470:69fc:105::70e) (Quit: Bridge terminating on SIGTERM)
[13:43:29] *** Quits: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63) (Quit: Bridge terminating on SIGTERM)
[13:43:30] *** Quits: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b) (Quit: Bridge terminating on SIGTERM)
[13:43:30] *** Quits: luis` (~luismboma@2001:470:69fc:105::cc7) (Quit: Bridge terminating on SIGTERM)
[13:44:40] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[13:44:52] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.4)
[13:46:40] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[13:47:17] *** Quits: taiju` (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925) (Ping timeout: 240 seconds)
[13:47:55] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[13:48:13] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[13:51:25] *** Joins: karlosz (~karlosz@47.151.136.69)
[13:52:03] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:55:43] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[13:56:06] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[13:59:02] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Disconnected: Replaced by new connection)
[13:59:29] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[14:00:29] *** Quits: leo_song (~leo_song@user/leo-song/x-7207016) (Read error: Connection reset by peer)
[14:01:19] *** Joins: leo_song (~leo_song@user/leo-song/x-7207016)
[14:03:21] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[14:05:19] <mfiano> I'm going to risk bringing up a subjective style question, so please forgive me. I have seen two camps regarding the use of p/-p predicate suffixes: those that apply the naming convention to predicate functions, and those that apply the naming convention to predicate functions, boolean function arguments, variables, slots, and everything. Why are there these two camps, and who is correct? :)
[14:05:23] *** Joins: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63)
[14:05:23] *** Joins: luis` (~luismboma@2001:470:69fc:105::cc7)
[14:05:24] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[14:05:24] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[14:05:38] *** Joins: akater[m] (~akatermat@2001:470:69fc:105::ccef)
[14:05:39] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[14:05:40] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[14:05:41] *** Joins: yitzi (~yitzi@2001:470:69fc:105::fafd)
[14:05:44] *** Joins: sp (~sp@user/susam)
[14:05:44] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[14:05:44] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[14:05:44] *** Joins: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f)
[14:05:44] *** Joins: Arcsech (~arcsechma@2001:470:69fc:105::1:797)
[14:05:44] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[14:05:44] *** Joins: char[m] (~charlesma@2001:470:69fc:105::1:7050)
[14:05:56] *** Joins: seragold[m] (~seragoldm@2001:470:69fc:105::1:6b7f)
[14:05:57] *** Joins: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b)
[14:06:02] *** Joins: zbrown[m] (~zbrownsys@2001:470:69fc:105::1:4e81)
[14:06:14] *** Joins: prov[m] (~provessor@2001:470:69fc:105::cfb)
[14:06:14] *** Joins: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6)
[14:06:14] *** Joins: linjian (~linj@user/linj)
[14:06:14] *** Joins: miique (~miiquemat@2001:470:69fc:105::1:6901)
[14:06:15] *** Joins: bhyde[m] (~bhydematr@2001:470:69fc:105::70e)
[14:07:02] <phoe> ;; the obvious answer to the last question is "we are correct", independently of the value of "we" that someone has
[14:07:10] <mfiano> :)
[14:07:10] <jackdaniel> are there two camps though?
[14:07:31] <jackdaniel> I remember that there was a rule when to use -p and when to use p
[14:07:42] <mfiano> Yeah that is orthogonal though
[14:07:43] <jackdaniel> and both are correct in different contexts
[14:07:50] <phoe> jackdaniel: the question is whether to use (let ((foo ...)) ...) or (let ((foop ...)) ...)
[14:08:07] <mfiano> The suffix is not the question. What it is appended to is the question.
[14:08:09] <phoe> so, whether to use the suffix *at all* for boolean variables
[14:08:19] <jackdaniel> I see, thanks
[14:08:53] <jackdaniel> both are correct given that they are used consistently in the same module
[14:09:02] <phoe> something like (let ((valid (data-valid-p data))) ...) versus (let ((validp (data-valid-p data))) ...) I guess
[14:09:44] <mfiano> minion: luv
[14:09:45] <minion> luv: Tutorial on Good Lisp Programming Style: http://www.norvig.com/luv-slides.pdf
[14:09:50] * mfiano checks
[14:11:09] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[14:15:57] *** Joins: morganw (~user@80.225.24.132)
[14:18:48] <mfiano> No good advice there. It recommends only "-p" or "?", with consistency paramount. (not even "p", and not which constructs should be named)
[14:19:25] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:19:32] *** Quits: s-liao (~s-liao@101.86.96.21) (Client Quit)
[14:19:57] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:20:34] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 260 seconds)
[14:20:57] <mfiano> They actually recommend a function called #'is-member-node-set
[14:21:15] <phoe> welp
[14:21:16] <mfiano> I think this style guide is pretty dated for modern code
[14:22:03] *** Joins: Josh_2 (~user@197.185.100.162)
[14:24:40] *** Quits: s-liao (~s-liao@101.86.96.21) (Client Quit)
[14:24:52] <mfiano> It says I can use the ?/! Scheme-isms as long as I'm consistent. I wonder how many CL readers of my code this would drive bonkers.
[14:24:53] <Josh_2> Hey
[14:25:06] <Josh_2> cl-str has both ? and -p
[14:25:26] <phoe> yes
[14:25:35] <phoe> it goes "why not both"
[14:25:42] <qhong> jackdaniel: thanks for answering the debugger question!
[14:25:52] <mfiano> Josh_2: That goes against the LUV slides
[14:26:00] <jackdaniel> sure
[14:26:05] <mfiano> They say to use one of the other, not both. Consistency is key.
[14:26:07] <Josh_2> Personally I use ? when I am unsure whether I will get a result, and then -p for predicates
[14:26:41] <qhong> Does Coalton have higher kinded types? I see it's "outside of scope of type classes", but is plain HTK possible?
[14:27:08] <mfiano> It does not from what I remember it being a planned feature a while ago. Not sure if that has changed.
[14:27:16] <qhong> Specifically, are we able to express recursion scheme in Coalton yet?
[14:27:34] <qhong> Seem like I can't even define a type-level least fix point operator
[14:30:11] <mfiano> Coalton does have HKTs it seems.
[14:30:36] *** Quits: SR-71 (~user@user/SR-71) (Ping timeout: 240 seconds)
[14:31:06] *** Quits: ogamita (~t@hubble.informatimago.com) (Ping timeout: 250 seconds)
[14:31:59] <qhong> that's cool, I haven't discovered the interface through M-. yet
[14:32:09] <qhong> How to make this work?: (define-type (<lfp> :f) (in (:f (<lfp> :f))))
[14:32:30] <qhong> It current says: Kind mismatch between type #T7951 of kind * and kind * -> *
[14:32:32] <mfiano> So the main takeaway from this discussion for me is that style conventions are less important in Lisp, because everyone has their own variations with the flexibility the language provides to map code to one's own thought processes.
[14:32:49] <mfiano> Fine. I will ignore this issue.
[14:35:09] <qhong> Adding (declare <lfp> ((* -> *) -> *)) doesn't work either
[14:36:10] *** Joins: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de)
[14:36:38] <mfiano> qhong: The recommended forum for help is the GitHub Discussions page. You're probably not going to find too many users here. It isn't a topic brought up often anyway.
[14:36:49] <mfiano> Source: the README
[14:36:55] <qhong> mfiano: sure
[14:40:09] *** Joins: ogamita (~t@hubble.informatimago.com)
[14:40:11] *** Joins: admich (~user@ip-150-113.sn-213-198.clouditalia.com)
[14:42:14] <admich> Hello
[14:42:19] <phoe> hey
[14:42:25] <rotateq> Hi admich :)
[14:43:45] <admich> In slime with M-. on a generic function I obtain a xref buffer with links to the defined methods. How can I obtain also the link for the setf methods?
[14:45:06] <jackdaniel> you may type in the modeline buffer (setf <the function name>)
[14:45:38] *** Joins: SR-71 (~user@user/SR-71)
[14:47:59] <admich> modeline? do you mean minibuffer?
[14:48:06] <jackdaniel> yes, sorry
[14:50:02] <admich> but when I type M-. the minibuffer doesn't ask nothing, the xref buffer appears instantly
[14:50:25] <jackdaniel> then try it on empty line
[14:52:56] <admich> jackdaniel: it works, thank you
[14:53:08] <jackdaniel> sure
[15:00:28] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[15:03:22] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[15:17:29] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[15:29:13] *** Joins: VincentVega (~user@212.97.1.15)
[15:32:31] *** Joins: VincentV` (~user@212.97.1.15)
[15:33:58] <VincentV`> Say, in sly, if I try to supply a value for a failed assertion, it just keeps prompting me to enter it again and again. Am I doing something wrong or is this a bug?
[15:34:00] <VincentV`> (let ((y 0)) (assert (not (zerop y)) (y) "can't be zero, change
[15:34:00] <VincentV`>               it"))
[15:34:08] <VincentV`> eval -> 0 in sly-db -> input for thread nn? -> input -> (input
[15:34:08] <VincentV`>               for thread nn? -> input)
[15:34:27] *** Quits: VincentVega (~user@212.97.1.15) (Ping timeout: 256 seconds)
[15:34:27] *** VincentV` is now known as VincentVega
[15:40:27] <VincentVega> ah, I had to type y, then the value
[15:42:09] *** Joins: random-nick (~random-ni@87.116.179.129)
[15:52:19] <VincentVega> I see a lot of code declaiming inline usage. Declaring it within a function seems cleaner, does declaim have some advantage (other than the case for multiple functions)?
[15:52:47] <phoe> DECLAIM INLINE is required to make code inlineable locally via DECLARE
[15:53:02] <phoe> otherwise the implementation is allowed to not record the necessary information for making code inlineable
[15:54:10] <phoe> so (defun foo () 42) and then (defun bar () (declare (inline foo)) (foo)) might not work without a (declaim (inline foo)) before DEFUN FOO
[15:54:18] <phoe> see the relevant clhs page
[15:54:19] <phoe> clhs inline
[15:54:20] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/d_inline.htm
[15:54:45] <VincentVega> phoe: I see. Thanks for the explanation.
[16:01:00] *** Joins: tfb (~tfb@88.98.95.237)
[16:18:05] *** Joins: notzmv (~zmv@user/notzmv)
[16:19:56] *** Joins: epony (epony@user/epony)
[16:22:24] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:24:12] *** Quits: iamFIREc1 (~iamFIREcr@user/iamfirecracker) (Ping timeout: 240 seconds)
[16:25:32] *** Joins: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net)
[16:26:01] *** Quits: tfb (~tfb@88.98.95.237) (Quit: died)
[16:32:45] *** Joins: iamFIREc1 (~iamFIREcr@user/iamfirecracker)
[16:40:41] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[16:42:11] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[16:52:34] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Ping timeout: 272 seconds)
[17:03:58] *** Joins: igemnace (~ian@user/igemnace)
[17:06:34] *** Joins: sheb (~sheb@31.223.228.71)
[17:07:18] *** Quits: sheb (~sheb@31.223.228.71) (Remote host closed the connection)
[17:10:34] *** Joins: qiduo (~yuqi@117.147.41.81)
[17:13:24] *** Joins: Bike (~Glossina@71.69.170.70)
[17:43:43] *** Joins: treflip (~user@user/treflip)
[17:45:47] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[18:15:23] *** Quits: admich (~user@ip-150-113.sn-213-198.clouditalia.com) (Quit: ERC (IRC client for Emacs 27.2))
[18:29:20] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[18:33:31] *** Quits: Guest49124124 (~Guest4912@85.194.207.65) (Ping timeout: 256 seconds)
[18:43:54] *** Joins: eugercek (~user@user/eugercek)
[18:49:44] *** Quits: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 272 seconds)
[19:01:00] *** Quits: antoszka (sid528518@id-528518.uxbridge.irccloud.com) (Ping timeout: 240 seconds)
[19:01:24] *** Quits: alanz (sid110616@id-110616.uxbridge.irccloud.com) (Ping timeout: 240 seconds)
[19:02:04] *** Joins: alanz (sid110616@id-110616.uxbridge.irccloud.com)
[19:04:10] *** Joins: antoszka (sid528518@id-528518.uxbridge.irccloud.com)
[19:15:33] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[19:19:17] *** Quits: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net) (Ping timeout: 240 seconds)
[19:24:13] *** Joins: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net)
[19:29:20] <azimut> (quit -yes
[19:45:22] *** Joins: ldb (~user@user/ldb)
[19:45:57] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[19:47:08] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[19:48:12] *** Quits: antoszka (sid528518@id-528518.uxbridge.irccloud.com) (Ping timeout: 240 seconds)
[19:48:33] *** Joins: antoszka (sid528518@id-528518.uxbridge.irccloud.com)
[19:52:21] <VincentVega> Are there ways of defining read-only structs? Or at least a way to remove the slot accessor setf?
[19:52:47] <VincentVega> (progn (defstruct G (w 0)) (fdefinition '(setf G/w))) errors out, so I guess it's something else.
[19:52:52] <_death> you can specify :read-only t for the slot
[19:53:15] <VincentVega> _death: gee, how did I miss that?
[19:53:16] <VincentVega> thanks
[19:55:38] <rotateq> the DEFSTRUCT macro would generate a (setf g-w) function
[19:57:08] <VincentVega> rotateq: good catch, I have been using slash in my project and have gotten blind to it
[19:57:38] <rotateq> :)
[20:01:18] *** Quits: antoszka (sid528518@id-528518.uxbridge.irccloud.com) (Read error: Connection reset by peer)
[20:01:42] *** Joins: antoszka (sid528518@id-528518.uxbridge.irccloud.com)
[20:01:47] <rotateq> but of course with having `:read-only t` one can surely reset the slot (but not with the intended accessor obviously)
[20:03:22] <VincentVega> with with-slots you mean?
[20:04:44] <rotateq> yes also that (as it expands to symbol-macros)
[20:04:54] <rotateq> with (setf slot-value)
[20:05:52] *** Quits: ldb (~user@user/ldb) (Remote host closed the connection)
[20:06:05] *** Joins: ldb (~user@user/ldb)
[20:06:18] <VincentVega> I see, alright.
[20:06:39] <mfiano> rotateq, VincentVega: slot-value is undefined behavior for structures
[20:06:45] <mfiano> and thus, with-slots
[20:06:57] <rotateq> good that you complement it :)
[20:07:12] <VincentVega> actually, with-slots errors out on setf'ing read-only with-slots for me
[20:07:26] <mfiano> That is implementation-specific behavior
[20:07:31] <rotateq> you mean cause structs have not the metaclass STANDARD-CLASS ?
[20:07:32] <VincentVega> gotcha
[20:07:34] <mfiano> with-slots is not specified to even work
[20:07:50] <rotateq> VincentVega: which implementation do you use?
[20:07:56] <VincentVega> sbcl
[20:07:59] <rotateq> okay
[20:08:07] <VincentVega> (progn (defstruct H (u 0 :read-only t)) (with-slots (u) (make-H) (setf u 55)))
[20:08:08] <mfiano> rotateq: Right. Same deal with conditions. slot-value is undefined for them too.
[20:08:21] <rotateq> ahh ^^
[20:08:21] <phoe> with-slots on condition objects works on all eight contemporary implementations that are used
[20:08:34] <mfiano> Doesn't mean you should and that will always be the case.
[20:08:36] <phoe> AFAIK same with structs
[20:08:46] <mfiano> Write for the future, not for the now
[20:09:05] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[20:09:21] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[20:10:16] <mfiano> +
[20:10:23] <mfiano> oops sorry
[20:10:36] <Guest74> with encouragement from phoe: I will no use with-slots liberally with my structs :)
[20:10:42] <Guest74> s/no/now/
[20:11:12] <mfiano> I wonder why we even have a standard sometimes. People never learn.
[20:11:33] *** Joins: torbo (~user@72.15.63.17)
[20:11:43] <phoe> right, who in their right mind would use package-local nicknames
[20:12:01] <phoe> point me to the part of the standard that says a thing about them
[20:12:07] <rotateq> i like using it writing special WITH-FOO macros (for classes)
[20:12:11] <mfiano> That is completely orthogonal.
[20:12:36] <Guest74> all kidding aside.  I usually just us (:conc-name nil).  What does with with-slots get you over that?
[20:12:51] <mfiano> It's an de-facto standard extension. There is no CDR that says slot-value should work on all new implementations, or that existing implementations should not break your code.
[20:12:59] <rotateq> mfiano: yes but i also see it's just `unspecified` so generates a hole
[20:13:10] <phoe> Guest74: the fact that DEFSTRUCT does not define generic functions, so struct accessors can easily override each other that way if you are unlucky
[20:13:30] <phoe> mfiano: OK, I might write such a CDR someday
[20:13:44] <Guest74> phoe: unlucky how?
[20:14:05] <phoe> Guest74: define two structures that each have :CONC-NAME NIL and a slot named BAR
[20:14:31] <phoe> one of the implicitly defined accessors is going to overwrite the other
[20:14:31] <rotateq> i more or less stopped using structs over half a year now
[20:14:43] <Guest74> meh, all my libraries are not to be :use'd and say so in the readme.
[20:14:45] <mfiano> Note that NIL has different semantics from "" though.
[20:15:39] <ldb> "maybe string"
[20:16:01] <phoe> more like, which package are the accessors interned in
[20:16:09] <Guest74> rotateq: structs are great for 'records'.
[20:16:27] <rotateq> Guest74: i thought it's just another word for it
[20:16:52] <Guest74> was sort of my point.
[20:16:57] <rotateq> okay :)
[20:17:43] <_death> mfiano: different how?
[20:17:54] <mfiano> mfiano: in regards to what?
[20:17:59] <Guest74> phoe: I don't see the issue when everything is package prefixed.  If someone wants to circumvent that some how, all the damage is on them.
[20:18:07] <mfiano> err _death :)
[20:19:42] *** Quits: ldb (~user@user/ldb) (Quit: ERC (IRC client for Emacs 27.2))
[20:19:50] <_death> mfiano: nm, phoe gave the clue
[20:19:57] <mfiano> _death: With a struct in package A that :includes another defined in package B, conc-name NIL will clobber the accessors of package B's struct. conc-name "" will not
[20:20:37] <torbo> Is there a good library to interact with Oracle from CL?  I'm using CLSQL and running queries on Oracle 12c.  There are results, but I notice that there are some junk characters in the column names in the output of clsql:query.  I thought it may have been an encoding issue, but both the DB and the connection are both set to UTF-8.  I've dug into the source code of clsql-oracle, and see that the junk in the string is being returned here:
[20:20:37] <torbo> https://github.com/dxtr/clsql/blob/8061aae1ecb878954115c7aacd90685a65bf4107/db-oracle/oracle-sql.lisp#L725  I wonder if Oracle 12c uses a newer version of OCI than that supported by CLSQL.
[20:21:41] <Guest74> mfiano: is that only if package A uses :conc-name nil? or both can use conc-name "".
[20:22:13] <phoe> Guest74: what do you mean, package A or package B?
[20:22:22] <phoe> this is only a question of DEFSTRUCT
[20:22:36] <Guest74> I mean exactly what mfiano said.
[20:23:03] <mfiano> Yes, phoe is correct, but it is even more confusing when extending structs across-package boundaries
[20:23:23] <mfiano> conc-name NIL means to intern the accessors into the package of the included struct
[20:23:46] <_death> :conc-name nil will use the same name as the slot's, whereas :conc-name "" will intern in the current package
[20:24:14] <mfiano> That bit me hard a year ago.
[20:24:20] <phoe> mfiano: not into the package of the included struct, but into the packages of the slots' names
[20:24:29] <Guest74> where does conc-name nil intern then?
[20:24:37] <mfiano> phoe: Fair hair split
[20:24:43] <phoe> if you have a slot named BAR:BAZ then with :CONC-NAME NIL you will get an accessor named BAR:BAZ
[20:24:59] <mfiano> clhs defstruct
[20:25:00] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/m_defstr.htm
[20:25:01] <phoe> if you have a slot named BAR:BAZ then with :CONC-NAME "" you will get an accessor named XXX:BAZ where XXX is the name of *PACKAGE* at macroexpansion time
[20:25:11] <phoe> or rather, XXX::BAZ
[20:25:29] <phoe> "If :conc-name is nil or no argument is supplied, then no prefix is used; then the names of the reader functions are the same as the slot names. If a non-nil prefix is given, the name of the reader function for each slot is constructed by concatenating that prefix and the name of the slot, and interning the resulting symbol in the package that is current at the time the defstruct form is expanded."
[20:26:28] <phoe> in particular, (defstruct (foo (:conc-name nil)) bar:baz) will define a function on a symbol from package BAR
[20:26:42] <Guest74> So that would affect if someone :includes your struct?
[20:26:53] <mfiano> Yes, and now imagine you want to extend a struct with single inheritance via :include from another package, and this new package is small so you blindly :conc-name NIL...boom
[20:28:17] <Guest74> I'll have to think about this.  But usually if I use a struct it's an internal thing and never meant to be inherited.
[20:28:19] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[20:28:32] <mfiano> You will at least get warnings on SBCL saying your function definitions have been redefined.
[20:29:28] <Guest74> but long story short, just using conc-name "" should prevent this shenanigans from any future possibilities?
[20:29:37] <mfiano> This is only an issue if someone includes your struct and _also_ supplies :conc-name NIL instead of :conc-name ""
[20:29:52] <mfiano> In the former case, they will monkey patch your package.
[20:30:04] <mfiano> Which will more than likely break it
[20:30:41] <Guest74> so them using nil will even break me using ""?  That's the only part I'm unsure of now.
[20:31:47] <phoe> one second...
[20:31:53] <_death> mfiano: I'm not sure about your issue there.. with :conc-name nil for both structures, the accessors will simply be extended
[20:31:57] <phoe> "Moreover, astronaut has its own reader functions for components defined by the person structure."
[20:32:23] <mfiano> I guess I have to provide an example
[20:32:26] <phoe> OK, so ASTRONAUT defines its own readers for components from PERSON
[20:32:56] <phoe> this means that if both PERSON and ASTRONAUT use :CONC-NAME NIL, then PERSON's accessors will get overwritten by ASTRONAUT's
[20:34:16] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:34:18] <_death> phoe: the accessors for the included structure should work for both
[20:34:40] *** Quits: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[20:35:58] <phoe> _death: "The difference between the reader functions person-name and astro-name is that person-name can be correctly applied to any person, including an astronaut, while astro-name can be correctly applied only to an astronaut. An implementation might check for incorrect use of reader functions."
[20:36:16] <Guest74> Yes, I saw no conflict when reading that part.
[20:36:30] <phoe> the way I read this passage is, if ASTRONAUT defines its own NAME function that clobbers PERSON's NAME, then this new function cannot really be applied to a PERSON
[20:37:28] <_death> phoe: defstruct should know not to clobber it
[20:38:28] *** Joins: lottaquestions_ (~nick@2607:fa49:5041:a200:60ac:5115:d501:c1e2)
[20:38:34] <phoe> _death: "should" is the part that I am worried about; I can't find a passage in the spec that says so
[20:39:24] *** Quits: antoszka (sid528518@id-528518.uxbridge.irccloud.com) (Ping timeout: 240 seconds)
[20:39:40] *** Joins: antoszka (sid528518@id-528518.uxbridge.irccloud.com)
[20:39:57] <Guest74> Now I'm a bit concerned.  I do use inheritance to make double buffered windows work seamlessly with clx.  I forget if I used conc-name nil though.
[20:41:05] <Guest74> and knowing if "" prevents somebody from inheriting and clobbering my stuff seems useful.
[20:42:20] <mfiano> Sorry for the confusion. I misremembered.
[20:42:22] <mfiano> https://gist.github.com/mfiano/b0a6f99b9ecd35535d3005b11647e5c4
[20:42:31] <_death> phoe: what about the last paragraph in :conc-name section
[20:43:17] <phoe> _death: oh! let me read and understand that
[20:43:41] *** Joins: jealousmonk (~user@user/jealousmonk)
[20:43:50] <phoe> "no definition for R is generated by the definition of S2" - yes, that is the place
[20:44:12] <phoe> this means that DEFSTRUCT ASTRONAUT does not generate a second DEFUN NAME
[20:44:53] <Guest74> ah, well it's interesting non the less.
[20:45:22] <phoe> mfiano: also this is UB, slot values in structs are not portably initialized to NIL
[20:45:29] <mfiano> I know
[20:45:58] <_death> a lot of code would break if an implementation chooses some other init value
[20:46:16] <phoe> _death: a lot of code won't work on genera then
[20:46:33] <phoe> e.g. https://twitter.com/RainerJoswig/status/1484711125459550216
[20:47:07] <mfiano> Trying to figure out how I was getting redefinition monkey patch warnings to no avail. I remember Xach was trying to debug it at the time is all I remember.
[20:47:10] <wmblathers> Who, apart from Rainer and the occasional and dedicated genera-pirate, still uses genera?
[20:47:14] <Guest74> but this exactly what the astronaut examples shows.
[20:47:49] <_death> phoe: interesting.. but yeah, the conclusion is the same
[20:48:42] <Guest74> i think you might have to :include and :use for there to be a clobberin?
[20:48:58] <Guest74> Said in my best Thing voice.
[20:49:03] <mfiano> Heh, I never :USE anything except :CL
[20:51:35] *** Quits: nature (~nature@45.32.235.173) (Quit: Lost terminal)
[20:53:50] <_death> phoe: a while ago, sbcl also changed semantics so that you can have unbound defstruct slots using &aux.. (defstruct (foo (:constructor make-foo (&aux bar))) bar)
[20:54:23] <phoe> _death: welp
[20:54:58] <Guest74> I usually don't :use, but I've taken to doing so for my ioctl-macros and some foreign code stuff.
[20:55:07] <phoe> yes, 3.4.6 mentions that
[20:55:08] *** Joins: nature (~nature@45.32.235.173)
[21:04:59] *** form_feed is now known as \f
[21:05:47] *** Quits: treflip (~user@user/treflip) (Quit: ERC (IRC client for Emacs 27.2))
[21:09:23] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:a0be:91d2:ac63:61de)
[21:11:51] *** Parts: torbo (~user@72.15.63.17) (ERC (IRC client for Emacs 27.1))
[21:18:58] *** Quits: ryanbw (~ryanbw@mab.sdf.org) (Quit: I'll be back.)
[21:19:26] *** Joins: ryanbw (~ryanbw@mab.sdf.org)
[21:21:07] *** Joins: trriplex (~trriplex@user/trriplex)
[21:30:01] *** Quits: ns12 (~ns12@user/ns12) (Quit: bye)
[21:31:01] *** Joins: ns12 (~ns12@user/ns12)
[21:34:27] *** Quits: trriplex (~trriplex@user/trriplex) (Quit: Leaving)
[21:35:30] <jackdaniel> wmblathers: Gary Palter said that he will release OpenGenera in a virtual machine. I've received some patches to ansi-tests from him recently-ish.
[21:36:20] <jackdaniel> or was it Portable Genera? not sure
[21:36:35] <White_Flame> under what license?
[21:37:08] <jackdaniel> I don't know
[21:38:04] <jackdaniel> oops, cl-bench not ansi-test
[21:38:12] <jackdaniel> https://gitlab.common-lisp.net/ansi-test/cl-bench/-/merge_requests/2
[21:39:11] *** Joins: NotThatRPG (~NotThatRP@mail.sift.net)
[21:39:54] <jeosol> Good morning all
[21:42:21] <jeosol> In CLOS design classes, it is generally better to not use what I'll call duplicate slots in meaning, e.g., say time in months and days with the latter derived from the former. I need to compute time in days from the month value as a slot. It is one time computation but it seems is better not to have time-in-days and time-in-months given I already
[21:42:22] <jeosol> have a large number of slots. Thoughts?
[21:42:40] <jeosol> I mean designing CLOS class interface ... not design classes
[21:46:14] <Guest74> how do you calculate time in days from time in months?
[21:48:05] <jeosol> There are two dates, a start-date and end-date, so time in months is start-date - end-date in months, and I do the same for time-days
[21:48:43] *** Quits: Major_Biscuit (~MajorBisc@c-001-017-054.client.tudelft.eduvpn.nl) (Ping timeout: 256 seconds)
[21:48:52] *** Quits: morganw (~user@80.225.24.132) (Remote host closed the connection)
[21:50:41] <jeosol> For clarity, the differences are durations-in-months and durations-in-days
[21:50:57] *** Joins: karlosz (~karlosz@47.151.136.69)
[21:51:34] <jeosol> so the slots will be duration-in-months and duration-in-days with the former being easier to specify, e.g., 1 month, 2 months
[22:00:19] <wmblathers> jackdaniel: That's interesting to know. I've seen hints at this on twitter, but I wonder what — if any — impact this would have on the larger CL ecosystem, apart from it being easier to verify this or that library runs as expected there.
[22:06:32] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[22:08:43] <jackdaniel> beats me, I've never used genera. that said it can't be worse than today software, can it? :)
[22:11:57] <ecraven> who is Gary Palter? The owner of the OpenGenera IP?
[22:20:22] *** Joins: notzmv (~zmv@user/notzmv)
[22:37:42] <Guest74> if I read a signed-byte n as an unsigned-byte n, how much I do need to shift to get the proper signed value? (ash sb (/ n 2))?
[22:37:58] <Guest74> -
[22:40:55] <phoe> huh, I don't think it's a matter of just an ASH call
[22:41:09] <Bike> lognot 1+, i think
[22:41:12] <Bike> i can never keep it straight
[22:41:18] <Guest74> wishful thinking on my part.
[22:41:47] <phoe> lognot 1+, but only if the sign bit is set
[22:43:17] <Guest74> hrm, that's not giving me anything I would expect.
[22:44:01] <Bike> what i mean is, say you read -4 as an ub4, #b1100
[22:44:10] <Bike> (ldb (byte 4 0) (1+ (lognot #b1100))) => 4
[22:44:16] <Bike> (then negate that to get -4)
[22:45:04] <scymtym> phoe: any objections to https://github.com/sharplispers/lparallel/pull/2 ?
[22:45:12] <phoe> scymtym: looking
[22:45:21] <Guest74> yeah, it's giving me a huge number, which is not what I'd expect.
[22:45:45] <Guest74> maybe logandc1 sb 1?
[22:46:13] <Guest74> nope, that doesn't work.
[22:47:47] <Bike> what do you mean, a huge number? if you take only the low bits properly you'll get the magnitude
[22:48:34] <phoe> scymtym: NIL is allowed as a type specifier, so avoiding it in DEFTYPE H-B-C-T is pointless
[22:49:11] <phoe> such a handler will never be executed, that's right, but I can imagine user code that performs some sort of type operations on its own and ends up e.g. intersecting (AND ERROR WARNING) to get the type NIL
[22:49:13] <Guest74> this is the number I've read for 64 bits 12884901894 . It should be some small number.
[22:50:13] <phoe> Guest74: you are not supposed to do the LOGNOT if the sign bit is not set
[22:50:22] <phoe> you only want to flip the negative numbers around
[22:50:42] <Bike> yeah, that has the 32 most significant bits as zero
[22:50:56] <Bike> did you mean to treat it as a 32 bit number? but even then, the top two bits are set, so it would be pretty big
[22:51:10] <Bike> (format t "~64,'0b" number) to see it written out
[22:52:28] <Guest74> hrm, maybe it's expecting  integer to be 32bits
[22:55:37] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[22:56:01] *** Joins: SR-71` (~user@2405:201:3003:8024:348e:466c:a606:1eb8)
[22:58:09] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:ede5:6357:bb4:e959)
[22:59:24] <Guest74> ugh, I have dealing with c stuff.
[22:59:57] *** Quits: SR-71 (~user@user/SR-71) (Ping timeout: 240 seconds)
[23:00:01] <Guest74> s/have/hate/
[23:02:13] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[23:03:57] <scymtym> phoe: right, i don't think NIL as a condition type is treated specially in lparallel, but i wanted to keep the behavior of not allowing NIL since the code previously did that
[23:06:12] <phoe> scymtym: will it change if I file a bug that NIL is not allowed as a condition type? :D
[23:07:00] *** Joins: morganw (~user@80.225.24.132)
[23:08:53] *** Quits: shka (~herr@109.231.3.55) (Quit: Konversation terminated!)
[23:10:12] <scymtym> phoe: not sure what the best course of action is. i tend to think maybe lmj had a reason for disallowing nil, but i'm not sure what the reason could be
[23:10:55] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[23:11:16] *** Joins: karlosz (~karlosz@47.151.136.69)
[23:12:32] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:13:51] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 272 seconds)
[23:13:51] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c)
[23:15:16] *** Lord_of_Life_ is now known as Lord_of_Life
[23:17:00] *** Joins: orestarod (~orestarod@2a02:2149:8b20:700:2b9d:7f86:7169:61c0)
[23:21:59] *** Quits: SR-71` (~user@2405:201:3003:8024:348e:466c:a606:1eb8) (Remote host closed the connection)
[23:37:28] *** Joins: Oladon (~olad@98.43.81.226)
[23:37:32] *** Joins: snits (~quassel@ip98-179-76-75.ph.ph.cox.net)
[23:45:37] *** Joins: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de)
[23:52:46] *** Joins: aeth_ (~aeth@user/aeth)
[23:52:47] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[23:52:50] *** aeth_ is now known as aeth
[23:56:05] *** Joins: hashfunc1e68 (~user@162.254.115.155)
[23:58:25] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
