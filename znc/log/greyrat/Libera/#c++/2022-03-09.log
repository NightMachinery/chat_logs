[00:02:39] *** Quits: ckdCreations (~ckdCreati@147.55.133.136) (Read error: Connection reset by peer)
[00:02:57] *** Joins: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net)
[00:04:33] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[00:05:32] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:1d57:8085:a2ac:6196)
[00:05:48] *** Quits: PlasmaHH_ (~PlasamaHH@user/plasmahh) (Ping timeout: 240 seconds)
[00:06:20] *** Joins: rgrinberg (~textual@2806:101e:7:134:7829:bba6:44e3:4846)
[00:08:42] *** Joins: la_mettrie (~rimrunner@2a01:4f9:c010:3051::1)
[00:09:00] *** Quits: Viewday115 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[00:09:06] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:7859:22cf:713c:fe6e) (Ping timeout: 260 seconds)
[00:11:09] *** Joins: Viewday115 (~Viewday@user/viewday)
[00:12:47] <la_mettrie> what's the proper way to sleep - waiting at the end of the main loop in order to keep the framerate - in MSDOS?
[00:12:57] *** Joins: shailangsa (~shailangs@host86-186-133-59.range86-186.btcentralplus.com)
[00:15:27] *** Joins: jsbach (~jsbach@81-223-39-134.static.upcbusiness.at)
[00:16:51] <ville> there's std::this_thread::sleep()
[00:17:47] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[00:18:02] <ville> but... if you're doing it so your "physics" run as expected you may wish to decouple those calculations from framerate
[00:19:51] *** Joins: Guest54 (~Guest54@2620:10d:c092:400::4:e883)
[00:20:07] *** Quits: jsbach (~jsbach@81-223-39-134.static.upcbusiness.at) (Read error: Connection reset by peer)
[00:20:27] *** Joins: jsbach (~jsbach@81-223-39-134.static.upcbusiness.at)
[00:20:49] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[00:22:22] <quartz> Hello. I'm trying to write a generic sum function. The function prototype is : Accumulator sum(Container c, Operation op, Accumulator acc). However, adding is done by op(acc,element). I'm not sure how this is possible, as I'm suppose to be calling std::add, which is normally passed into std::accumulator.
[00:22:33] <quartz> The details are here: https://bpa.st/O7KQ
[00:24:10] *** Quits: bebyx (~Thunderbi@user/bebyx) (Remote host closed the connection)
[00:25:02] *** Quits: jsbach (~jsbach@81-223-39-134.static.upcbusiness.at) (Read error: Connection reset by peer)
[00:25:18] *** gentooclimax is now known as climax
[00:25:53] *** climax is now known as gentooclimax
[00:25:58] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[00:30:18] *** Joins: yhirose (~yhirose@user/yhirose3)
[00:32:20] <Billiard> quartz, it's not clear what `Accumulator` is. Is it just a type compatible with the elements? (an int or whatever)
[00:33:23] *** Quits: Guest54 (~Guest54@2620:10d:c092:400::4:e883) (Quit: Client closed)
[00:34:23] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:34:43] <ville> quartz: template<typename T> void f(T) is a function template. the "T" there does not relate to any actual concrete type you may have defined
[00:35:28] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[00:35:37] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:1d57:8085:a2ac:6196) (Ping timeout: 250 seconds)
[00:35:56] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Remote host closed the connection)
[00:36:07] *** Joins: c4017w__ (~c4017@209.52.68.8)
[00:36:19] <ville> quartz: the "typename T" just says "T" is a type in this context, so it can be referred to later on, for example in that example it's being used as the type of the first parameter
[00:36:36] *** Quits: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com) (Ping timeout: 272 seconds)
[00:36:43] *** Joins: Betal (~Betal@user/betal)
[00:38:16] <ville> quartz: once you instantiate the template, in this case a function template, does T get "resolved" to an actual type: f(0); instantiates the function template with "int" as the type T. f(0.0f); instanitates the function template with "float" as the type T
[00:38:17] <quartz> Billiard: I'm not sure what 'Accumulator' is either. I just assumed it was std::accumulate
[00:38:37] <Billiard> That would seem strange to me
[00:38:44] <ville> quartz: it is nothing specific. it is there just to give meaning to the programmer reading the code. it could be called anything
[00:38:53] <Billiard> you seem to be more or less implementing your own version of std::accumulate
[00:39:24] <Billiard> Even though it could be "anything" it's not clear to me what the "Concept" of Accumulate is here
[00:39:32] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[00:40:53] <ville> quartz: your example could be rewritten as: template<typename T0, typename T1, typename T2> T2 sum(T0 c, T1 o, T2 a) {}
[00:41:04] *** yhirose3 is now known as Guest514
[00:41:04] *** yhirose is now known as yhirose3
[00:42:12] <ville> quartz: all the names in template</*HERE*/> are upto you. they are only meaningful to you/other programmers and don't refer to existing types
[00:43:27] <quartz> Jeez this is confusing
[00:43:37] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[00:43:43] <ville> quartz: well you can give whatever names for variables, right?
[00:43:50] <quartz> ville: Sure
[00:43:57] <Billiard> quartz, are these literally all the instructions for the assignment?
[00:44:01] <ville> quartz: same deal, it's just "placeholder" names for types
[00:44:09] *** Joins: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com)
[00:44:18] <Billiard> Because I understand templates and I still don't know exactly wtf they are looking for.
[00:44:40] <quartz> Billiard: Yes
[00:44:51] <ville> quartz: template<typename T> void f(T); and then you instantiate it as: f<int>(0); in your mind copypaste the template and replace all occurances of "T" with "int"
[00:45:51] <ville> quartz: and the language has something called template argument deduction and you don't have to write the int there, so it can be f(0). the type replacing all those "T" is deduced from the type of 0 in that case: int
[00:46:51] <ville> template<typename T> void f(T) {}, you instantiate that as: f(0), the compiler creates a function such as: void f(int) {} for you. or so
[00:47:57] <quartz> Uhh
[00:48:19] <ville> it's really that dumb. compiler doing a copypaste job for you
[00:49:04] <ville> (reality is annoyingly more complex, but as a 0th approximation that's alright)
[00:49:49] <ville> anyways, so the T there is nothing more than a placeholder name so the compiler knows where to copypaste the actual type you use the function template with
[00:52:16] <quartz> So... how do I implement the generic type?
[00:52:25] *** Quits: magla (~gelignite@55d45672.access.ecotel.net) (Quit: Stay safe!)
[00:52:29] <quartz> Like what if I get a list or vector, how will it know?
[00:52:30] <ville> what generic type?
[00:53:04] <quartz> And how do I return an object of type "Accumulator"
[00:53:18] <ville> return x; just like anything else
[00:53:24] <quartz> Well, the problem states that it is suppose to be a "generic" sum function
[00:53:33] <quartz> Return x from what?
[00:53:33] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[00:53:35] <quartz> What is x
[00:54:20] *** Parts: la_mettrie (~rimrunner@2a01:4f9:c010:3051::1) (WeeChat 2.7.1)
[00:54:38] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[00:54:43] <ville> quartz: it is whatever type you instantiate the template with that is in the spot of Accumulator. (roughly speaking(
[00:55:10] <quartz> So the most obvious thing would be an int..
[00:55:16] <quartz> So why don't they just write int..
[00:55:29] *** Quits: cosimone (~user@93-47-229-38.ip115.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[00:55:34] <ville> in this case if you had an std::vector<int> then you'd likely use an int as the 3rd argument type as well
[00:55:45] <ville> because what if you had an std::vector<float>?
[00:55:48] <Billiard> because using a template parameter allows one function to handle int, float, double, BigIntClassThatSomeoneElseWritesLater
[00:56:53] <ville> quartz: if you have: template<typename T> void f(T); and you call f(0.0f); then what does the compiler copypaste for you?
[00:57:34] <quartz> float?
[00:57:45] <ville> write the function
[00:58:22] <ville> so let's presume empty body, it generates: void f(float) {} for you
[00:59:09] <quartz> Uhh
[00:59:19] <quartz> Hold on I'm going back and reading what you wrote
[00:59:25] <quartz> I'm a bit slow... sorry
[01:02:25] *** Joins: wakeup (~wakeup@user/wakeup)
[01:05:42] <quartz> ville: But what is meant by "Adding is done by op(acc,element)"
[01:05:53] <zz> operator, accumulator, element
[01:06:15] <ville> quartz: it's given you the exact syntax what should be done to do the operation
[01:06:40] <quartz> But then I need to write my own function? I thought operator would be something like std::plus()
[01:07:05] <ville> you may write your own if you wish
[01:07:32] <ville> but if std::plus() satisfies the requirements, then you may use that instead
[01:07:56] <quartz> Well, yeah, it's a sum funciton afterall
[01:09:15] *** Quits: dsrt^ (~dsrt@50.232.121.75) (Remote host closed the connection)
[01:09:54] <quartz> ville: But I can't just do f(0.0f) the function takes several parameters, like container, operator, accumulator
[01:10:10] <ville> quartz: so provide it enough of them...
[01:11:54] <ville> at the same time realize the names Container, Operator and Accumulator don't refer to any concrete thing. the names are there to give you a clue as to their purpose. same as variable names. it could have been: template<typename T0, typename T1, typename T2>
[01:13:31] <quartz> ville: Right
[01:13:33] <quartz> Hmmm, Ok
[01:15:50] *** Quits: ws2k3 (znc@vps.freegamehosting.eu) (Ping timeout: 260 seconds)
[01:17:26] *** Joins: ws2k3 (znc@vps.freegamehosting.eu)
[01:17:37] *** Quits: rgrinberg (~textual@2806:101e:7:134:7829:bba6:44e3:4846) (Ping timeout: 240 seconds)
[01:17:52] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[01:19:10] <quartz> ville: I'm sorry but I'm not sure what to write in this sum function
[01:19:20] <ville> as a sorts of divide-and-conquer you may also wish to work "backwards" from a non-function template. first write a function that sums the elements of an std::vector<int>
[01:19:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[01:20:12] <ville> then move towards a function template, such as templating over the container type
[01:20:38] <ville> as a second step template the operator, as a third step template the starting value
[01:20:46] *** Quits: GrayArea (~cpd@cpc115156-dals23-2-0-cust689.20-2.cable.virginm.net) (Ping timeout: 245 seconds)
[01:20:47] <ville> and you're done
[01:20:56] <quartz> ville: But that function is simply std::accumulat
[01:21:05] *** Joins: omnihil (~hermes@camel.ethereal.net)
[01:21:42] <ville> quartz: ok, but it doesn't really matter if the thing you're asked to write already exists. you are asked to write something so do it. it's a step-by-step plan to get you to your goal.
[01:22:39] *** Joins: rg (~r-g@51-159-55-86.rev.poneytelecom.eu)
[01:24:47] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[01:26:08] *** Joins: KAHR-Alpha_ (~Alpha@2a01cb0d024a660019779ab8472b4c0f.ipv6.abo.wanadoo.fr)
[01:26:12] *** Quits: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2) (Ping timeout: 240 seconds)
[01:27:56] <quartz> ville: OK if I'm iterating over a vector, how would I access the elements if I'm suppose to be writing a generic function? LIke how would I know if it's a NOT a vector?
[01:28:12] <quartz> I guess I can access everything using [] in the Container class?
[01:28:47] <ville> quartz: there is no Container class. if you use operator [] you have now placed a requirement on the kinds of containers your function template can be instantiated with
[01:29:09] <quartz> ville: Ok, so how am I to reference an element in the container?
[01:29:11] <Billiard> quartz, some containers don't support the subscript operator. Using a "range-based for-loop" would be pretty generic
[01:29:29] <quartz> without knowing of it's a vector, list etc
[01:29:39] <quartz> Billiard: I've never heard of that but I'll look it up
[01:29:45] *** Quits: wakeup (~wakeup@user/wakeup) (Quit: Client closed)
[01:29:50] <ville> quartz: not all containers specified by the standard library specifies that. but all of them have iterators. so iterators could be an option. whether you do that with a plain for or range-for is upto you
[01:30:36] <quartz> Iterator is a class?
[01:30:42] <ville> no
[01:31:16] *** Joins: hashfuncadb (~user@2601:5c0:c280:7090:29ba:fcc0:8f3a:efac)
[01:31:31] *** Joins: Guest8425 (~Guest@host169.190-139-78.telecom.net.ar)
[01:31:35] <Alipha> quartz: how do you loop over the elements in a std::list?
[01:31:58] <ville> iterators is a general programming concept. there are different kinds of iterator types. an example is a forward iterator but again that's a general concept.
[01:32:11] <ville> err iterator
[01:32:44] *** Joins: ferdna (~ferdna@user/ferdna)
[01:33:58] *** Quits: biberu (~biberu@user/biberu) (Read error: Connection reset by peer)
[01:36:24] *** Joins: c4017w_ (~c4017@209.52.68.8)
[01:37:09] *** Joins: wakeup (~wakeup@user/wakeup)
[01:37:27] <ville> a forward iterator is roughly speaking something that you can increment, in c++ specifically using the ++i or i++ syntax
[01:39:10] *** Joins: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2)
[01:39:52] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[01:41:12] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[01:41:27] *** Joins: zer0x (~zer0x@58.186.62.81)
[01:42:37] <Alipha> quartz: java generics and c++ templates are similiar, yes, but quite different. in java, the generic type always implements some interface. e.g, `public <T extends Comparable> void foo(T x) {}` If you just have `public <T> void foo(T x) {}` then T extends Object implicitly. in c++, templates are different. a template parameter can be any type and doesn't need to extend any class. You just try to use the type how
[01:42:39] <Alipha> you want to use the type and if the type doesn't support the operations you try to perform on it, then the code doesn't compile and you can't use that specific type. `template<typename T> T foo(T x) { return x / 5; }` So here, you can call foo with any type you want. but if the type doesn't support division, `x / 5`, then you'll get a compile error.
[01:42:40] <quartz> Alipha: Iterator or someththing similiar
[01:43:11] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[01:43:34] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:43:42] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:43:42] *** ChanServ sets mode: +v npaperbot
[01:43:56] *** Joins: biberu (~biberu@user/biberu)
[01:44:41] *** Joins: bobb_ (~bobb_@dslb-092-074-254-001.092.074.pools.vodafone-ip.de)
[01:46:26] <Alipha> quartz: yeah, so you *could* use [] in your sum function. that would work for std::vector, std::array, raw arrays, and a few other container types. however, std::list doesn't support [], so your sum function wouldn't work for std::list. if you want your sum function to work with std::list too, then you should use iterators because all containers have iterators
[01:47:31] <quartz> Alipha: OK, or just use a range based for loop?
[01:47:37] <Alipha> yes
[01:50:06] <quartz> So this should really be maybe 5 lines of code or something easy
[01:51:43] <Alipha> I mean, look at the sample implementation of std::accumulate on cppreference.com
[01:51:55] <Alipha> (yes, it's really simple)
[01:54:02] *** Joins: pulse (~pulse@user/pulse)
[01:56:12] <quartz> Alipha: You've got to be kidding me, the entire assignment is just to copy std::accumulate
[01:56:23] <quartz> wtf... why not just use std::accumulate
[01:56:46] <Alipha> quartz: std::accumulate takes a pair of iterators, not a container
[01:57:06] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[01:57:13] <Alipha> Though you're also adding concepts to your function
[01:57:23] *** Quits: Zogatribe (Zogatribe@user/zogatribe) (Read error: Connection reset by peer)
[01:58:38] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[01:58:38] *** Joins: kaph (~kaph@151.35.10.65)
[01:58:45] <quartz> Alipha: Concepts?
[01:59:11] <Alipha> quartz: the last line of your assignment description?
[01:59:37] *** Quits: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2) (Ping timeout: 240 seconds)
[02:00:52] <quartz> Alipha: How can I tell the function to add, subtract, etc...
[02:00:59] *** Quits: proller (~p@2a02:6b8:b081:6405::1:2d) (Ping timeout: 250 seconds)
[02:01:03] <quartz> Uh, nevermind
[02:01:12] <quartz> I don't have to hard code + or - into the function
[02:02:24] <quartz> I literally have to call op()
[02:02:34] <Alipha> Yes
[02:05:27] *** Joins: Zogatribe (Zogatribe@user/zogatribe)
[02:05:54] *** Quits: kaph (~kaph@151.35.10.65) (Remote host closed the connection)
[02:06:22] *** Joins: kaph (~kaph@151.35.10.65)
[02:07:31] *** Joins: suicide (~dan_pena@86.228.71.37.rev.sfr.net)
[02:08:28] <quartz> Alipha: Am I heading in the right direction? https://godbolt.org/z/r9bdxPYGd
[02:08:48] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[02:11:36] *** Quits: yhirose3 (~yhirose@user/yhirose3) (Ping timeout: 256 seconds)
[02:13:04] *** Joins: yhirose3 (~yhirose@89.100.43.157)
[02:13:28] *** yhirose3 is now known as Guest9519
[02:13:48] *** Joins: proller (~p@80.240.216.69)
[02:16:02] *** Quits: sh00p (~z@89-253-71-70.customers.ownit.se) (Ping timeout: 272 seconds)
[02:18:32] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[02:20:55] <bobb_> quartz https://godbolt.org/z/jbW5aEef7
[02:21:14] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[02:22:10] *** Joins: kaph_ (~kaph@93-39-148-20.ip76.fastwebnet.it)
[02:22:22] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[02:24:54] *** Quits: kaph (~kaph@151.35.10.65) (Ping timeout: 272 seconds)
[02:25:18] <quartz> bobb_: Thank you.
[02:26:35] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Ping timeout: 240 seconds)
[02:28:36] *** Quits: Guest9519 (~yhirose@89.100.43.157) (Ping timeout: 256 seconds)
[02:33:56] *** Joins: pizdets (~pizdets@183.182.110.6)
[02:34:20] *** Quits: pizdets_ (~pizdets@183.182.110.47) (Ping timeout: 265 seconds)
[02:35:40] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 272 seconds)
[02:36:43] *** Joins: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com)
[02:36:51] *** Joins: c4017w__ (~c4017@209.52.68.8)
[02:36:55] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[02:37:32] *** Joins: dsrt^ (~dsrt@50.232.121.75)
[02:40:18] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 260 seconds)
[02:42:46] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 256 seconds)
[02:43:28] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:496e:4097:1a46:a8be)
[02:43:28] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:496e:4097:1a46:a8be) (Changing host)
[02:43:28] *** Joins: skapata (~Skapata@user/skapata)
[02:44:34] *** Quits: wakeup (~wakeup@user/wakeup) (Quit: Client closed)
[02:49:09] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[02:53:05] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[02:55:59] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[02:58:23] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:58:53] *** Quits: bobb_ (~bobb_@dslb-092-074-254-001.092.074.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[03:01:04] *** Joins: sobkas (~sobkas@95.175.17.217)
[03:02:44] *** Joins: rgrinberg (~textual@187.223.170.172)
[03:05:36] *** Joins: ymwm_ (~yingmanwu@117.26.68.45)
[03:08:31] *** Quits: rgrinberg (~textual@187.223.170.172) (Ping timeout: 256 seconds)
[03:11:21] *** Quits: KnownSyntax (sid233169@user/knownsyntax) (Ping timeout: 252 seconds)
[03:11:21] *** Quits: tcsc (sid145321@id-145321.lymington.irccloud.com) (Ping timeout: 252 seconds)
[03:11:21] *** Quits: leonardus (sid358597@id-358597.tinside.irccloud.com) (Ping timeout: 252 seconds)
[03:11:21] *** Quits: lhtseng (sid15322@id-15322.helmsley.irccloud.com) (Ping timeout: 252 seconds)
[03:11:30] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:9e2:b202:643:aa15) (Read error: Connection reset by peer)
[03:11:38] *** Quits: glenfe (sid231748@user/glenfe) (Read error: Connection reset by peer)
[03:11:44] *** Joins: tcsc (sid145321@id-145321.lymington.irccloud.com)
[03:11:54] *** Quits: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com) (Ping timeout: 252 seconds)
[03:11:54] *** Quits: wangledorf_ (sid505185@id-505185.ilkley.irccloud.com) (Ping timeout: 252 seconds)
[03:11:54] *** Quits: PotatoGim (sid99505@id-99505.lymington.irccloud.com) (Read error: No route to host)
[03:11:55] *** Quits: TingPing (sid2800@id-2800.helmsley.irccloud.com) (Read error: Connection reset by peer)
[03:11:55] *** Quits: wyre (~wyre@user/wyre) (Remote host closed the connection)
[03:11:55] *** Quits: relipse (sid16131@id-16131.tinside.irccloud.com) (Read error: No route to host)
[03:11:55] *** Quits: computerquip (sid423484@user/computerquip) (Read error: Connection reset by peer)
[03:12:01] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Remote host closed the connection)
[03:12:06] *** Joins: lhtseng (sid15322@id-15322.helmsley.irccloud.com)
[03:12:12] *** Joins: computerquip (sid423484@user/computerquip)
[03:12:12] *** Joins: wyre (~wyre@user/wyre)
[03:12:14] *** Joins: TingPing (sid2800@id-2800.helmsley.irccloud.com)
[03:12:16] *** Joins: wangledorf_ (sid505185@id-505185.ilkley.irccloud.com)
[03:12:20] *** Joins: glenfe (sid231748@user/glenfe)
[03:12:24] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:9e2:b202:643:aa15)
[03:12:24] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[03:12:27] *** Joins: KnownSyntax (sid233169@user/knownsyntax)
[03:12:28] *** Joins: PotatoGim (sid99505@id-99505.lymington.irccloud.com)
[03:12:29] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 256 seconds)
[03:12:41] *** Joins: leonardus (sid358597@id-358597.tinside.irccloud.com)
[03:12:53] *** Joins: relipse (sid16131@id-16131.tinside.irccloud.com)
[03:12:55] *** Quits: c4017w__ (~c4017@209.52.68.8) (Read error: Connection reset by peer)
[03:13:06] *** Joins: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com)
[03:13:17] *** Joins: c4017w__ (~c4017@209.52.68.8)
[03:13:22] <SamuelMarks> How do I cast a `std::unique_ptr<BaseClass>` to a `std::unique_ptr<ChildClass>` (or similar second type) in order to call a method only available on `ChildClass`?
[03:13:28] * SamuelMarks has tried all sorts of `dynamic_cast` variants
[03:14:06] *** Quits: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4) (Ping timeout: 252 seconds)
[03:14:18] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 272 seconds)
[03:15:13] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[03:16:00] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[03:16:08] <KAHR-Alpha_> SamuelMarks, I'm probably a heathen, but wouldn't the dynamic_cast on get() do the trick?
[03:17:03] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.4)
[03:17:49] *** Quits: Guest8425 (~Guest@host169.190-139-78.telecom.net.ar) (Remote host closed the connection)
[03:19:54] <SamuelMarks> KAHR-Alpha_: Nope that didn't work, I got `'clang::ASTConsumer *' is not a class type` or if I removed the lref for dynamic_cast; target type must be a reference or pointer type to a defined class
[03:20:31] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:25:07] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[03:25:26] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[03:26:03] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[03:29:49] *** Joins: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4)
[03:32:05] *** Quits: joomla9 (uid543104@id-543104.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[03:32:45] <KAHR-Alpha_> SamuelMarks, and with a raw pointer to your base class as an indirection?
[03:37:51] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:9e2:b202:643:aa15) (Ping timeout: 245 seconds)
[03:38:38] <KAHR-Alpha_> SamuelMarks, get() seems to work though... https://ideone.com/4BFY1J
[03:38:56] <PJBoy> dynamic_cast on get() would be my call too
[03:39:51] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[03:40:26] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:99b3:1e22:56c4:4228)
[03:43:46] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 260 seconds)
[03:45:58] *** Quits: suicide (~dan_pena@86.228.71.37.rev.sfr.net) (Ping timeout: 272 seconds)
[03:47:14] *** Quits: jplejacq (~jplejacq@24.224.90.176) (Ping timeout: 272 seconds)
[03:48:59] *** Quits: pa (~pah@user/pah) (Quit: quit.)
[03:49:04] *** Quits: Guest514 (~yhirose3@user/yhirose3) (Ping timeout: 256 seconds)
[03:49:48] *** Joins: pah (~pah@user/pah)
[03:56:45] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:58:32] *** Quits: foobaz2124846 (~foobaz212@152.37.103.80) (Quit: Client closed)
[03:58:44] *** Joins: foobaz2124846 (~foobaz212@152.37.103.80)
[03:59:24] *** Quits: sobkas (~sobkas@95.175.17.217) (Remote host closed the connection)
[03:59:49] *** Quits: kkd (~kkd@255.205.154.104.bc.googleusercontent.com) (Ping timeout: 240 seconds)
[04:00:01] *** Joins: sobkas (~sobkas@95.175.17.217)
[04:00:55] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[04:01:22] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[04:03:37] *** Joins: quartz (~quartz@user/quartz)
[04:04:39] *** Joins: suicide (~dan_pena@86.228.71.37.rev.sfr.net)
[04:05:29] *** Quits: sobkas (~sobkas@95.175.17.217) (Remote host closed the connection)
[04:06:07] *** Joins: sobkas (~sobkas@95.175.17.217)
[04:06:10] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 260 seconds)
[04:07:55] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:08:39] *** Joins: yhirose (~yhirose@89.100.43.157)
[04:08:45] *** Quits: yhirose (~yhirose@89.100.43.157) (Changing host)
[04:08:45] *** Joins: yhirose (~yhirose@user/yhirose3)
[04:08:45] *** yhirose is now known as yhirose3
[04:12:52] *** Joins: kkd (~kkd@255.205.154.104.bc.googleusercontent.com)
[04:12:56] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:99b3:1e22:56c4:4228) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:13:42] *** Joins: c4017w_ (~c4017@209.52.68.8)
[04:15:44] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 272 seconds)
[04:15:51] *** Joins: Praise- (~Fat@user/praise)
[04:17:00] *** Joins: jplejacq (~jplejacq@68.71.169.160)
[04:17:25] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[04:17:27] *** Parts: jplejacq (~jplejacq@68.71.169.160) ()
[04:18:14] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[04:18:18] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[04:18:37] *** Quits: foul_owl (~kerry@23.82.193.87) (Ping timeout: 240 seconds)
[04:21:04] *** Joins: foul_owl (~kerry@174-21-76-71.tukw.qwest.net)
[04:22:40] *** Joins: CodePoint (~CodePoint@2600:1700:3070:3790::11)
[04:24:32] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 240 seconds)
[04:25:03] *** Quits: sobkas (~sobkas@95.175.17.217) (Quit: sobkas)
[04:27:32] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Read error: Connection reset by peer)
[04:30:41] *** Quits: foul_owl (~kerry@174-21-76-71.tukw.qwest.net) (Ping timeout: 256 seconds)
[04:30:44] *** Quits: quartz (~quartz@user/quartz) (Ping timeout: 250 seconds)
[04:32:19] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[04:33:16] *** Quits: dsrt^ (~dsrt@50.232.121.75) (Ping timeout: 256 seconds)
[04:33:50] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:34:35] *** Joins: thad_the_man_2 (~tlophd_be@99-104-67-23.lightspeed.cicril.sbcglobal.net)
[04:34:49] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[04:35:35] <SamuelMarks> KAHR-Alpha_ , PJBoy - Ohhh `'std::unique_ptr<clang::ASTConsumer>' is not polymorphic`
[04:36:02] *** Quits: Donno (~donno@58.84.206.182) (Ping timeout: 260 seconds)
[04:36:24] <PJBoy> that's somewhat debatable, but yeah
[04:36:36] *** Quits: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4) (Ping timeout: 240 seconds)
[04:36:54] <PJBoy> if you could somehow cast it to another pointer, then it wouldn't be unique anymore
[04:38:26] <PJBoy> so there's no reason to give it casts like shared_ptr has
[04:39:43] <SamuelMarks> `clang::PluginASTAction` has to be a unique_ptr through, see https://github.com/SamuelMarks/type-correct/blob/41b6b8b/type_correct/TypeCorrectMain.h#L43 - I'm trying to expose a custom method on my `clang::Rewriter` derived class
[04:42:42] *** Joins: rgrinberg (~textual@2806:101e:7:134:88d:6cc4:143:3039)
[04:44:48] *** Quits: CodePoint (~CodePoint@2600:1700:3070:3790::11) (Quit: CodePoint)
[04:44:52] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 272 seconds)
[04:44:59] *** Joins: foul_owl (~kerry@23.82.193.89)
[04:45:44] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[04:46:57] *** Quits: rgrinberg (~textual@2806:101e:7:134:88d:6cc4:143:3039) (Ping timeout: 240 seconds)
[04:47:07] *** Quits: yhirose3 (~yhirose@user/yhirose3) (Quit: WeeChat 2.8)
[04:47:19] *** Quits: c4017w_ (~c4017@209.52.68.8) (Quit: Leaving)
[04:50:43] <PJBoy> { unique_ptr<B> p(new D); unique_ptr<D> pp(static_cast<D*>(p.release())); }  struct B { virtual ~B() = default; }; struct D : B {};
[04:50:44] <geordi>  
[04:50:46] <PJBoy> you can do that dance
[04:51:05] <SamuelMarks> Hmm
[04:52:32] <SamuelMarks> Will it point to the same data, or is that released?
[04:53:34] <PJBoy> same data, yeah
[04:54:08] <PJBoy> unique_ptr::release() relinquishes ownership of the pointer (without deleting it)
[04:55:01] *** Joins: Guest4946 (~Guest@host96.190-137-39.telecom.net.ar)
[04:59:35] *** Joins: c4017w (~c4017@209.52.68.8)
[05:00:29] *** Quits: Yruama (~Yruama@2a01:cb15:8128:c100:6c61:6a53:9bf0:64ca) (Quit: Leaving)
[05:00:55] *** Joins: quartz (~quartz@user/quartz)
[05:01:45] *** Quits: Zogatribe (Zogatribe@user/zogatribe) (Read error: Connection reset by peer)
[05:03:06] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 260 seconds)
[05:09:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[05:10:50] *** Quits: AmR (~AmREiSa@156.199.236.198) (Ping timeout: 272 seconds)
[05:13:17] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[05:18:02] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[05:19:50] *** Joins: rgrinberg (~textual@2806:101e:7:134:88d:6cc4:143:3039)
[05:23:00] *** Quits: Schoentoon (~Schoentoo@2a01:4f8:171:20d2::1) (Ping timeout: 240 seconds)
[05:24:39] *** Joins: Schoentoon (~Schoentoo@2a01:4f8:171:20d2::1)
[05:26:13] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[05:32:08] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 252 seconds)
[05:33:08] *** Quits: kaph_ (~kaph@93-39-148-20.ip76.fastwebnet.it) (Ping timeout: 250 seconds)
[05:33:30] <ville> always manage to read (... op expr) backwards as the placement of the ... suggest to me that it begins with expr and then evaluates towards ....
[05:34:41] *** Quits: rgrinberg (~textual@2806:101e:7:134:88d:6cc4:143:3039) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:34:57] *** Joins: frost (~frost@user/frost)
[05:36:32] *** Quits: undephin3d (~undephin3@158.181.81.11) (Ping timeout: 240 seconds)
[05:37:37] *** Quits: hashfuncadb (~user@2601:5c0:c280:7090:29ba:fcc0:8f3a:efac) (Ping timeout: 240 seconds)
[05:37:41] *** Joins: rgrinberg (~textual@2806:101e:7:134:88d:6cc4:143:3039)
[05:41:18] *** Joins: biotty (~coien@li35-173.members.linode.com)
[05:42:01] *** Quits: biotty (~coien@li35-173.members.linode.com) (Quit: leaving)
[05:42:13] *** Quits: Ameisen (~ameisen@digitalcarbide.com) (Quit: Quitting)
[05:43:09] *** Joins: Ameisen (~ameisen@digitalcarbide.com)
[05:43:34] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:43:42] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:43:42] *** ChanServ sets mode: +v npaperbot
[05:45:11] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[05:47:25] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.4)
[05:51:37] *** Quits: suicide (~dan_pena@86.228.71.37.rev.sfr.net) (Ping timeout: 240 seconds)
[05:53:40] *** Joins: suicide (~dan_pena@86.228.71.37.rev.sfr.net)
[05:53:58] *** Quits: thad_the_man_2 (~tlophd_be@99-104-67-23.lightspeed.cicril.sbcglobal.net) (Quit: Leaving)
[05:54:53] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 256 seconds)
[05:59:53] *** Joins: c4017w_ (~c4017@209.52.68.8)
[06:03:28] *** Quits: c4017w (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[06:07:17] *** Joins: thad_the_man (~tlophd_be@99-104-67-23.lightspeed.cicril.sbcglobal.net)
[06:10:15] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[06:15:15] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:16:12] *** Joins: Inline__ (~Inline@p200300cd4709fe0020393da7e35c629b.dip0.t-ipconnect.de)
[06:17:03] *** Quits: edman007 (~edman007@user/edman007) (Read error: Connection reset by peer)
[06:17:24] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[06:18:38] *** Quits: Inline (~Inline@p200300cd470f680001516fcaa15a1e0e.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[06:19:48] *** Quits: andreasbuhr (~quassel@p548ddf42.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[06:19:54] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[06:20:17] *** Joins: andreasbuhr (~quassel@p549db5f7.dip0.t-ipconnect.de)
[06:23:01] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[06:24:09] <SamuelMarks> PJBoy - Thanks, switched it to `dynamic_cast` and it seems to be working
[06:26:41] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[06:28:45] *** Joins: Sadale (~Sadale@user/sadale)
[06:31:08] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[06:31:29] *** Quits: AssKoala (~asskoala@user/asskoala) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[06:31:33] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[06:31:46] *** Joins: AssKoala (~asskoala@23-121-91-253.lightspeed.dybhfl.sbcglobal.net)
[06:31:46] *** Quits: AssKoala (~asskoala@23-121-91-253.lightspeed.dybhfl.sbcglobal.net) (Changing host)
[06:31:46] *** Joins: AssKoala (~asskoala@user/asskoala)
[06:34:35] *** Joins: biotty (~coien@li35-173.members.linode.com)
[06:48:06] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[06:49:48] *** Quits: KAHR-Alpha_ (~Alpha@2a01cb0d024a660019779ab8472b4c0f.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[06:59:45] *** Quits: Guest4946 (~Guest@host96.190-137-39.telecom.net.ar) (Remote host closed the connection)
[07:00:34] *** Joins: c4017w__ (~c4017@209.52.68.8)
[07:00:46] <SamuelMarks> PJBoy - Hmm got stuck on a SIGSEGV
[07:03:48] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[07:05:18] *** Joins: karakedi (~eAC53C340@user/karakedi)
[07:13:32] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Quit: Hello71)
[07:17:04] *** Joins: kstatz12 (~kstatz12@205.178.87.116)
[07:22:23] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[07:22:56] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[07:27:43] *** Quits: artok (~azo@mobile-access-b04863-82.dhcp.inet.fi) (Ping timeout: 250 seconds)
[07:29:16] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 250 seconds)
[07:29:18] *** Joins: ejjfunky (~ejjfunky2@125.164.16.249)
[07:31:29] *** Quits: froggyc (~froggy@2.235.241.212) (Read error: Connection reset by peer)
[07:33:25] *** Joins: froggyc (~froggy@2.235.241.212)
[07:33:45] *** Quits: msk (~Thunderbi@89.205.124.40) (Read error: Connection reset by peer)
[07:34:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[07:35:37] *** Quits: suicide (~dan_pena@86.228.71.37.rev.sfr.net) (Quit: Lost terminal)
[07:40:32] *** Quits: DrMax (~DrMax@node-1w7jra94757fzx6dr52v5tek2.ipv6.telus.net) (Ping timeout: 250 seconds)
[07:40:40] *** Joins: msk (~Thunderbi@89.205.124.19)
[07:41:38] *** Quits: ejjfunky (~ejjfunky2@125.164.16.249) (Quit: Leaving)
[07:41:46] *** Quits: sreve (~quassel@p4ff44d50.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[07:41:53] *** Quits: analognoise (~analognoi@185.229.59.233) (Read error: Connection reset by peer)
[07:41:58] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[07:42:07] *** Joins: sreve (~quassel@p549d7045.dip0.t-ipconnect.de)
[07:45:28] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[07:52:49] *** Joins: DrMax (~DrMax@node-1w7jra94757fytxmmfxmtk8zw.ipv6.telus.net)
[07:57:59] *** Joins: hinata (~hinata@2409:4042:e03:fa26:f1d0:c5b0:867:5fd4)
[08:01:14] *** Joins: c4017w_ (~c4017@209.52.68.8)
[08:02:15] *** Joins: Prof_Dumbledore (~Prof_Dumb@157.33.88.117)
[08:05:00] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[08:07:57] *** Quits: hinata (~hinata@2409:4042:e03:fa26:f1d0:c5b0:867:5fd4) (Ping timeout: 240 seconds)
[08:08:34] *** Joins: hinata (~hinata@2409:4042:e8e:2dda:f1d0:c5b0:867:5fd4)
[08:16:04] *** Quits: constxd (~brad@142.134.78.128) (Quit: WeeChat 2.8)
[08:18:10] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[08:18:53] *** Quits: hinata (~hinata@2409:4042:e8e:2dda:f1d0:c5b0:867:5fd4) (Quit: Leaving)
[08:22:06] *** Joins: hinata (~hinata@2409:4042:e8e:2dda:cc87:9208:4673:89cf)
[08:22:39] *** Joins: artok (~azo@mobile-access-b04863-82.dhcp.inet.fi)
[08:25:36] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[08:28:05] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[08:30:08] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[08:36:03] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[08:37:56] *** Quits: artok (~azo@mobile-access-b04863-82.dhcp.inet.fi) (Ping timeout: 272 seconds)
[08:38:07] *** Joins: Betal (~Betal@user/betal)
[08:42:31] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[08:47:26] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 272 seconds)
[08:53:07] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:58:02] *** Quits: emerent (~quassel@p200300cd5743c367ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[08:58:52] *** Joins: emerent (~quassel@p200300cd5743c360ba27ebfffed28a59.dip0.t-ipconnect.de)
[09:00:33] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[09:01:52] *** Joins: c4017w__ (~c4017@209.52.68.8)
[09:05:00] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[09:05:16] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[09:08:18] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[09:08:44] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:14:48] *** Joins: Electron (ElectronAp@user/electronapps)
[09:17:50] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Ping timeout: 272 seconds)
[09:18:12] *** Quits: rgrinberg (~textual@2806:101e:7:134:88d:6cc4:143:3039) (Ping timeout: 240 seconds)
[09:18:32] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[09:18:36] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Ping timeout: 240 seconds)
[09:18:46] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[09:23:12] *** Joins: unlink2 (~unlink@p200300ebcf17f000a0e82b17ad9d82cf.dip0.t-ipconnect.de)
[09:23:47] *** Joins: xkuru (~xkuru@user/xkuru)
[09:25:11] *** Quits: hinata (~hinata@2409:4042:e8e:2dda:cc87:9208:4673:89cf) (Quit: Leaving)
[09:25:26] *** Quits: Electron (ElectronAp@user/electronapps) (Ping timeout: 272 seconds)
[09:29:25] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Remote host closed the connection)
[09:34:59] *** Quits: Praise- (~Fat@user/praise) (Ping timeout: 256 seconds)
[09:35:00] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 240 seconds)
[09:35:25] *** Joins: Praise (~Fat@user/praise)
[09:37:26] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[09:38:35] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Quit: leaving)
[09:41:45] *** Joins: the_lanetly_052_ (~the_lanet@194.135.152.163)
[09:41:48] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[09:42:57] *** Quits: the_lanetly_052_ (~the_lanet@194.135.152.163) (Max SendQ exceeded)
[09:43:29] *** Joins: the_lanetly_052_ (~the_lanet@194.135.152.163)
[09:43:35] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:43:42] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:43:42] *** ChanServ sets mode: +v npaperbot
[09:44:13] *** Quits: the_lanetly_052_ (~the_lanet@194.135.152.163) (Max SendQ exceeded)
[09:44:41] *** Joins: the_lanetly_052_ (~the_lanet@185.30.88.67)
[09:46:06] *** Quits: the_lanetly_052_ (~the_lanet@185.30.88.67) (Max SendQ exceeded)
[09:46:33] *** Joins: the_lanetly_052_ (~the_lanet@185.30.88.67)
[09:47:51] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[09:48:09] *** Joins: szymon (~ugh@37.120.211.214)
[09:48:11] *** Joins: bindu (~bindu@user/bindu)
[09:51:10] *** Joins: hinata (~hinata@2409:4042:e8e:2dda:cc87:9208:4673:89cf)
[09:53:34] *** Quits: Enitin (~Enitin@82.180.145.230) (Ping timeout: 250 seconds)
[09:57:06] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[10:02:35] *** Joins: c4017w_ (~c4017@209.52.68.8)
[10:06:09] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[10:07:43] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:d59b:7225:122:f855)
[10:09:52] *** Joins: evangeline (~Eleanor@178.79.105.181)
[10:10:26] *** Quits: szymon (~ugh@37.120.211.214) (Ping timeout: 256 seconds)
[10:11:03] *** Quits: mintograde (~mintograd@47.201.5.61) (Read error: Connection reset by peer)
[10:12:50] *** Joins: j0hn_mc_clane (~j0hn_mc_c@84.198.240.138)
[10:15:54] *** Joins: xkuru (~xkuru@user/xkuru)
[10:16:21] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[10:16:42] *** Quits: xkuru (~xkuru@user/xkuru) (Remote host closed the connection)
[10:17:07] *** Joins: xkuru (~xkuru@user/xkuru)
[10:25:00] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[10:25:29] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:25:51] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[10:28:10] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:32:23] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[10:35:28] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[10:37:23] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[10:40:19] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[10:40:23] *** Joins: artok (~azo@mobile-access-b04863-82.dhcp.inet.fi)
[10:43:54] *** Joins: bigRoo (~user@73.181.dsl.syd.iprimus.net.au)
[10:45:15] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[10:51:25] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[10:52:24] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Remote host closed the connection)
[10:55:12] *** Quits: artok (~azo@mobile-access-b04863-82.dhcp.inet.fi) (Ping timeout: 256 seconds)
[11:03:14] *** Joins: c4017w__ (~c4017@209.52.68.8)
[11:06:36] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[11:12:10] *** Joins: senoraraton (~senorarat@c-67-160-210-246.hsd1.ca.comcast.net)
[11:13:35] *** Quits: nafen (~nafen@gateway/tor-sasl/nafen) (Remote host closed the connection)
[11:13:59] *** Quits: ville (~ville@user/ville) (Quit: ville)
[11:17:41] *** Joins: nafen (~nafen@gateway/tor-sasl/nafen)
[11:21:22] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[11:21:43] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[11:25:17] *** Quits: Prof_Dumbledore (~Prof_Dumb@157.33.88.117) (Quit: Leaving)
[11:25:48] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[11:34:32] *** JakeSays_ is now known as JakeSays
[11:35:03] *** Joins: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2)
[11:36:20] *** Joins: PlasmaHH_ (~PlasamaHH@user/plasmahh)
[11:36:48] *** Joins: proller (~p@2a02:6b8:b081:7208::1:2c)
[11:37:17] *** Joins: ville (~ville@user/ville)
[11:37:28] *** pah is now known as pa
[11:39:16] *** Joins: c4017w (~c4017@209.52.68.8)
[11:41:15] *** Joins: ivii (~ivan@user/ivii)
[11:41:17] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[11:41:36] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[11:42:27] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[11:44:46] *** Quits: senoraraton (~senorarat@c-67-160-210-246.hsd1.ca.comcast.net) (Ping timeout: 272 seconds)
[11:44:48] *** Joins: Olfodr (sid535265@user/Olfodr)
[11:44:56] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[11:45:17] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[11:46:17] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 240 seconds)
[11:47:11] *** Quits: highrate (~presonic@user/highrate) ()
[11:47:26] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 245 seconds)
[11:48:35] *** Quits: LiaoTao_ (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 240 seconds)
[11:49:12] *** Quits: CalamityToo (~CalamityB@user/CalamityBlue) (Read error: Connection reset by peer)
[11:49:16] *** Joins: jsbach (~jsbach@62.218.23.188)
[11:49:36] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[11:56:34] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[11:57:00] *** Quits: rb (~augh@209.141.39.190) (Ping timeout: 240 seconds)
[11:59:01] *** Joins: rendar (~rendar@user/rendar)
[11:59:25] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[12:04:06] *** Joins: rwb (~augh@alogs.space)
[12:07:06] *** Quits: Furai (~Furai@furai.pl) (Quit: WeeChat 3.4)
[12:08:33] *** Quits: jsbach (~jsbach@62.218.23.188) (Ping timeout: 256 seconds)
[12:08:42] *** Quits: zer0x (~zer0x@58.186.62.81) (Ping timeout: 260 seconds)
[12:10:36] *** Joins: arch-angel (~arch-ange@user/arch-angel)
[12:11:30] <arch-angel> https://godbolt.org/z/hPTr8nn55
[12:11:36] <arch-angel> Can anyone help me look into it?
[12:11:55] <arch-angel> I've declared the function as a friend, yet it can't access the class' private members
[12:12:56] *** Joins: Furai (~Furai@furai.pl)
[12:20:36] *** Joins: kenantu (~kenanmara@user/kenanmarasli)
[12:22:09] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[12:23:10] *** Joins: undephin3d (~undephin3@158.181.81.11)
[12:23:24] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[12:25:38] *** Joins: Sadale (~Sadale@user/sadale)
[12:25:59] *** Quits: hinata (~hinata@2409:4042:e8e:2dda:cc87:9208:4673:89cf) (Quit: Leaving)
[12:27:10] *** Joins: jsbach (~jsbach@62.218.23.188)
[12:28:43] *** Quits: nafen (~nafen@gateway/tor-sasl/nafen) (Remote host closed the connection)
[12:28:59] *** Joins: nafen (~nafen@gateway/tor-sasl/nafen)
[12:32:11] *** Joins: aLeSD (~aLeSD@91.126.33.194)
[12:34:50] *** Quits: proller (~p@2a02:6b8:b081:7208::1:2c) (Ping timeout: 260 seconds)
[12:36:53] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[12:38:33] *** Quits: jsbach (~jsbach@62.218.23.188) (Remote host closed the connection)
[12:39:34] *** Joins: c4017w_ (~c4017@209.52.68.8)
[12:41:57] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:42:37] *** Quits: c4017w (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[12:42:57] *** Joins: jsbach (~jsbach@62.218.23.188)
[12:43:32] *** Quits: jsbach (~jsbach@62.218.23.188) (Remote host closed the connection)
[12:45:49] *** Joins: RazielZ (~Raziel@user/raziel)
[12:48:36] *** Quits: Raziel (~Raziel@user/raziel) (Ping timeout: 240 seconds)
[12:49:58] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:13f:7874:eb2a:de87)
[12:51:12] *** Joins: jsbach (~jsbach@62.218.23.190)
[12:54:15] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[12:56:16] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[13:00:24] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[13:08:05] *** RazielZ is now known as Raziel
[13:09:17] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[13:16:36] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 272 seconds)
[13:18:15] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[13:23:37] *** gentooclimax is now known as climax
[13:23:48] <ville> arch-angel: perhpas use R rather than T on lines 5 and 6
[13:24:01] <arch-angel> yeah ville it took me a couple hours to figure that out
[13:24:42] *** climax is now known as gentooclimax
[13:24:59] <cbreak> you should not abuse the comma operator either :(
[13:26:40] <arch-angel> cbreak, where did I abuse it?
[13:29:02] *** Quits: moose (~moose@user/moose) (Read error: Connection reset by peer)
[13:29:55] *** Joins: slidercrank (~slidercra@user/slidercrank)
[13:32:49] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[13:33:03] <cbreak> a = x, b = y;
[13:33:07] <cbreak> use a semicolon there
[13:33:35] <ville> damn missed that. if had seen it i wouldn't have answered
[13:33:38] <cbreak> I'd recommend also avoiding to put multiple definitions in one statement
[13:36:38] *** Joins: MajorBiscuit (~MajorBisc@c-001-015-055.client.tudelft.eduvpn.nl)
[13:39:32] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:39:36] *** Joins: hinata (~hinata@2409:4042:e8e:2dda:cc87:9208:4673:89cf)
[13:39:52] *** Joins: c4017w__ (~c4017@209.52.68.8)
[13:40:17] *** Joins: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3)
[13:43:11] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[13:43:35] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:43:42] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:43:42] *** ChanServ sets mode: +v npaperbot
[13:43:53] *** Joins: Prof_Dumbledore (~Prof_Dumb@2409:4042:9d:1702:f32d:e0b2:c5a0:12f2)
[13:51:56] *** Joins: GillesMMM (~gilles@228.100.5.84.rev.sfr.net)
[13:52:16] *** Joins: Bhuvan1 (~Bhuvan_He@2a01:e34:ec9a:49f0:5c00:e335:1223:e0f8)
[14:00:00] *** Quits: nafen (~nafen@gateway/tor-sasl/nafen) (Remote host closed the connection)
[14:00:25] *** Joins: nafen (~nafen@gateway/tor-sasl/nafen)
[14:01:04] *** Quits: Flannel (~flannel@user/flannel) (Ping timeout: 256 seconds)
[14:01:26] *** Joins: Flannel (~flannel@cpe-76-175-193-181.socal.res.rr.com)
[14:04:21] *** Joins: artok (~azo@mobile-access-b04863-82.dhcp.inet.fi)
[14:05:34] *** Joins: zer0x (~zer0x@58.186.62.81)
[14:07:33] *** Quits: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3) (Ping timeout: 268 seconds)
[14:13:08] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 250 seconds)
[14:14:26] *** Quits: msim_ (~msim@2001:8003:d194:d000::d8d) (Ping timeout: 250 seconds)
[14:20:27] *** Quits: martiert (~martiert@ti0185q160-2775.bb.online.no) (Quit: WeeChat 3.3)
[14:22:49] *** Joins: msim_ (~msim@2001:8003:d194:d000::d8d)
[14:24:38] *** Joins: Guest222 (~martiert@ti0185q160-2775.bb.online.no)
[14:24:51] *** Joins: proller (~p@2a02:6bf:fff0:1:754d:927b:314d:1ed5)
[14:26:19] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[14:27:09] *** Guest222 is now known as martiert
[14:27:18] *** Joins: unknow (~i.am@user/marlboro)
[14:27:25] *** Joins: yhirose3 (~yhirose@user/yhirose3)
[14:28:36] *** Joins: aakashi2001 (~aakashi20@user/aakashi2001)
[14:30:48] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[14:31:27] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[14:35:13] *** Quits: aakashi2001 (~aakashi20@user/aakashi2001) (Remote host closed the connection)
[14:36:00] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Quit: Leaving)
[14:40:31] *** Joins: c4017w_ (~c4017@209.52.68.8)
[14:44:23] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[14:45:13] *** gentooclimax is now known as climax
[14:46:25] *** Joins: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse)
[14:47:20] *** climax is now known as gentooclimax
[14:48:43] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:13f:7874:eb2a:de87) (Quit: Konversation terminated!)
[14:49:17] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[14:50:17] *** Quits: Prof_Dumbledore (~Prof_Dumb@2409:4042:9d:1702:f32d:e0b2:c5a0:12f2) (Ping timeout: 240 seconds)
[14:51:19] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[14:51:58] *** Joins: walterwhip (~www@user/walterwhip)
[14:52:42] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[14:52:57] *** Quits: walterwhip (~www@user/walterwhip) (Client Quit)
[14:55:04] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[14:55:27] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[14:55:39] *** Quits: proller (~p@2a02:6bf:fff0:1:754d:927b:314d:1ed5) (Ping timeout: 268 seconds)
[14:57:16] *** Joins: kaph (~kaph@an-19-184-70.service.infuturo.it)
[14:58:38] *** Quits: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 250 seconds)
[15:01:11] *** Quits: Alipha (~AliphaX@user/alipha) (Read error: Connection reset by peer)
[15:05:16] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[15:06:10] *** Quits: j0hn_mc_clane (~j0hn_mc_c@84.198.240.138) (Ping timeout: 272 seconds)
[15:07:53] *** Joins: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3)
[15:13:11] *** Joins: j0hn_mc_clane (~j0hn_mc_c@84.198.240.138)
[15:14:22] *** Quits: j0hn_mc_clane (~j0hn_mc_c@84.198.240.138) (Client Quit)
[15:15:47] *** Joins: Prof_Dumbledore (~Prof_Dumb@2409:4042:9d:1702:9a1f:c77f:a8c7:bd7e)
[15:16:12] *** Joins: apollo13 (apollo13@django/moderator/apollo13)
[15:16:24] *** Parts: apollo13 (apollo13@django/moderator/apollo13) (Leaving)
[15:17:21] *** Joins: Alipha (~AliphaX@user/alipha)
[15:24:13] *** Joins: GrayArea (~cpd@cpc115156-dals23-2-0-cust689.20-2.cable.virginm.net)
[15:30:42] *** Quits: kaph (~kaph@an-19-184-70.service.infuturo.it) (Read error: Connection reset by peer)
[15:32:13] *** Joins: Burgundy (~NA@86.121.143.206)
[15:41:13] *** Joins: c4017w__ (~c4017@209.52.68.8)
[15:41:58] *** Joins: Telvana2 (~capo@user/telvana)
[15:43:04] *** Quits: Telvana (~capo@user/telvana) (Ping timeout: 256 seconds)
[15:43:09] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[15:44:46] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[15:49:38] *** Joins: arkantos (uid447192@id-447192.uxbridge.irccloud.com)
[15:58:34] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Remote host closed the connection)
[16:00:17] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[16:09:04] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[16:10:37] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Ping timeout: 240 seconds)
[16:10:59] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[16:15:18] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Quit: leaving)
[16:16:06] <urdh> why doesn't std::span allow abstract class element types?
[16:20:23] *** Joins: re101-fousek-71 (~re101-fou@196.43.170.89)
[16:21:21] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[16:22:19] *** Joins: obiwahn (~heini@user/obiwahn)
[16:24:07] *** Quits: GrayArea (~cpd@cpc115156-dals23-2-0-cust689.20-2.cable.virginm.net) (Ping timeout: 256 seconds)
[16:29:34] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[16:29:59] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[16:34:38] *** Joins: ymwm__ (~yingmanwu@117.26.69.144)
[16:35:17] *** Quits: ymwm__ (~yingmanwu@117.26.69.144) (Max SendQ exceeded)
[16:35:45] *** Joins: ymwm__ (~yingmanwu@117.26.69.144)
[16:37:03] *** Quits: yhirose3 (~yhirose@user/yhirose3) (Quit: WeeChat 2.8)
[16:37:25] *** Joins: yhirose3 (~yhirose3@user/yhirose3)
[16:37:29] *** Quits: ymwm_ (~yingmanwu@117.26.68.45) (Ping timeout: 256 seconds)
[16:37:55] <PJBoy> probably so that the bytes functions work
[16:38:13] <PJBoy> size_bytes and as_bytes
[16:38:33] <PJBoy> which need to know the sizeof(value_type)
[16:38:33] <yhirose3> What does the t stand for in size_t int32_t int16_t ?
[16:38:37] <PJBoy> type
[16:39:11] <yhirose3> PJBoy: Is that not generic though? That's like naming all classes with "class" at the end?
[16:39:23] <yhirose3> class NetworkManager -> class NetworkManagerClass
[16:39:47] <PJBoy> yeah a little
[16:39:57] <PJBoy> but `size` would be a terrible name for a type
[16:40:03] <PJBoy> so what can you do
[16:40:12] *** Quits: Prof_Dumbledore (~Prof_Dumb@2409:4042:9d:1702:9a1f:c77f:a8c7:bd7e) (Ping timeout: 240 seconds)
[16:40:40] <PJBoy> there's a lot of instances of this pattern where you have some global `x` defined as an instance of an `x_t`
[16:40:48] <PJBoy> nullptr / nullptr_t for example
[16:40:50] <yhirose3> I agree in the case of size but all the ints?
[16:41:01] <yhirose3> I think int32 is an excellent name for a 32 bit integer
[16:41:05] <PJBoy> after a certain point it's a case of consistency
[16:41:16] *** Joins: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse)
[16:41:45] *** Joins: c4017w_ (~c4017@209.52.68.8)
[16:42:04] <yhirose3> C needs namespaces to stop making everyone use annoying suffixes/prefixes :/
[16:42:23] <PJBoy> there's size_t, ptrdiff_t, max_align_t, intptr_t, intmax_t
[16:43:10] *** Quits: segnior (segnior@user/segnior) (Remote host closed the connection)
[16:43:11] <yhirose3> std::size is nicer :)
[16:43:18] <PJBoy> std::size is a function
[16:43:41] <yhirose3> They really didn't think the whole programming in C/C++ thing through did they
[16:43:45] <PJBoy> << std::size(arr); int arr[29]{};
[16:43:46] <geordi> 29
[16:43:57] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[16:43:59] <PJBoy> and it definitely makes more sense for size to be a function than a type IMO
[16:44:04] <yhirose3> geordi: LOL
[16:44:04] <geordi> error: 'LOL' does not name a type
[16:44:20] *** Quits: Sadale (~Sadale@user/sadale) (Ping timeout: 272 seconds)
[16:44:42] <yhirose3> PJBoy: I think std::size as size_t and then std::sizeof or std::get_size as functions makes more sense
[16:45:00] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[16:45:09] <PJBoy> I disagree, `size` just doesn't remotely sound like a type
[16:45:17] <PJBoy> in any context in any language
[16:45:39] *** Joins: Sadale (~Sadale@user/sadale)
[16:46:02] <yhirose3> Know any good resources for getting to know all the good features of STD and Boost libraries?
[16:46:12] *** Joins: cosimone (~user@93-47-229-38.ip115.fastwebnet.it)
[16:46:15] <PJBoy> std::sizeof can't exist because sizeof is a keyword
[16:46:25] <yhirose3> Working on making web apps with Boost Beast atm but it seems to be quite complicated
[16:46:55] <PJBoy> they're all good features in stdlib :)
[16:47:37] *** Quits: re101-fousek-71 (~re101-fou@196.43.170.89) (Quit: Client closed)
[16:47:51] <yhirose3> PJBoy: I agree but I am struggling to find a place to discover them. I seem to be implicitly discovering them while Googling other programming questions
[16:47:57] <PJBoy> http://en.cppreference.com/w/User:Ybab321
[16:48:17] <PJBoy> is a good start
[16:48:43] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[16:49:48] <yhirose3> PJBoy: thanks :)
[16:49:55] <yhirose3> Any advice for the same with Boost libs?
[16:50:14] <PJBoy> nah boost is tricky
[16:50:34] <yhirose3> I know :( Especialyl ASYNC with ASIO/Beast
[16:50:34] <PJBoy> some of its libraries are up-to-date, but some hyper ancient
[16:50:46] <PJBoy> and in both cases, the docs are meh
[16:51:05] <yhirose3> PJBoy: the lack of syntax highlighting and proper indentation is very annoying in their docs
[16:51:16] <yhirose3> I am thinking about making a Boost Docs website
[16:51:19] <PJBoy> seems people don't like boost these days
[16:51:22] <yhirose3> Just to address the problem
[16:51:57] <PJBoy> could always make an account on cppref and work on boost docs in your user space
[16:52:01] <yhirose3> PJBoy: I find boost extreamily useful and it makes developing with C++ very fast, but there is a learning curve and it's only really used by knowledged C++ developers
[16:52:16] <PJBoy> although cppref is also starting to show its age
[16:52:30] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[16:52:54] <PJBoy> also, you can always complain about boost asio on the cpp subreddit
[16:53:03] <PJBoy> 100% guarantee that Vinni Falco will respond
[16:53:05] <InPhase> yhirose3: Boost having actually decent documentation would radically alter the reasonableness of using it.
[16:53:16] <yhirose3> I find the only useful resource for Boost is going on youtube and watching the presentations by the actual developers at CppCon
[16:53:49] <InPhase> I know boost is somewhat popular, but I personally try to minimize usage of it, in large part because the documentation does not meet my minimum threshold for viable.
[16:54:31] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:55:24] *** Quits: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[16:55:59] <yhirose3> InPhase: Hence my wanting to make a Boost tutorial website
[16:56:11] <yhirose3> Boost is actually highly-reliable and very high quality
[16:56:28] <yhirose3> And does in fact have support but it's resources are not centralized
[16:56:38] *** Quits: ymwm__ (~yingmanwu@117.26.69.144) (Ping timeout: 260 seconds)
[16:56:49] <yhirose3> Like I said, the CppCon talks are excellent but I don't think developers like to watch 50 min videos to find their answers
[16:57:56] *** Quits: hinata (~hinata@2409:4042:e8e:2dda:cc87:9208:4673:89cf) (Quit: Leaving)
[16:58:32] *** Quits: dzoe (joe@joe.cz) (Ping timeout: 252 seconds)
[17:00:48] <PJBoy> make sure not to generalise some boost libraries to all of boost
[17:01:09] <PJBoy> you have to judge each boost library on its own merits
[17:01:13] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[17:01:27] <urdh> PJBoy: makes sense I guess, but boo
[17:01:41] <PJBoy> the only thing common about boost libraries is that they all get to use the same C++98 compatibility macros
[17:01:58] <urdh> i want a view to an unspecified number of objects implementing an abstract base, that doesn't involve copying a bunch of pointers
[17:01:59] <PJBoy> which is often seen now as a detriment >_>
[17:02:09] <urdh> std::span just felt like the obvious choice :<
[17:02:14] <PJBoy> yeah I agree with you
[17:02:33] <PJBoy> I'm surprised it has a hard requirement on completeness like that
[17:02:51] <PJBoy> normally you tell people about span and it's like "oh yeah it's just a pointer + size, easy stuff"
[17:04:35] <PJBoy> you have to wonder if gsl::span has the same limitation
[17:04:57] *** Joins: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse)
[17:05:31] <PJBoy> seems like it will looking at the source
[17:05:55] *** Joins: dzoe (~joe@joe.cz)
[17:06:23] <yhirose3> Would you have an alternative for making webapps with C++ ?
[17:06:37] <yhirose3> An alternative to Boost Beast/Asio I mean?
[17:06:49] <PJBoy> nah I stay far away from webdev
[17:07:05] <PJBoy> and C++ webdev people I've seen seem to go for boost asio/beast
[17:07:22] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[17:07:48] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[17:08:02] <PJBoy> there's all of these though https://en.cppreference.com/w/cpp/links/libs#Communication
[17:08:08] <yhirose3> Any json recommendations? I'm using BSONCXX but it's a pain to compile and setup on different machines
[17:08:32] <PJBoy> de facto for json seems to be nillhommann
[17:09:00] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[17:09:01] <PJBoy> this one https://github.com/nlohmann/json
[17:10:36] <fiesh> Boost.JSON might also be an option
[17:11:28] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[17:15:15] *** Quits: kevr (~kevr@user/kevr) (Ping timeout: 240 seconds)
[17:20:01] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[17:22:58] *** Quits: kkd (~kkd@255.205.154.104.bc.googleusercontent.com) (Ping timeout: 272 seconds)
[17:24:32] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 240 seconds)
[17:24:48] *** Joins: kkd (~kkd@255.205.154.104.bc.googleusercontent.com)
[17:24:51] *** Joins: bebyx (~Thunderbi@user/bebyx)
[17:29:18] *** Quits: ik (uid540109@id-540109.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[17:33:01] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:1d0a:10c:e91c:1f8)
[17:33:01] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:1d0a:10c:e91c:1f8) (Changing host)
[17:33:01] *** Joins: skapata (~Skapata@user/skapata)
[17:34:09] *** Quits: CodeAgain (~codeagain@user/CodeAgain) (Read error: Connection reset by peer)
[17:34:42] *** Quits: undephin3d (~undephin3@158.181.81.11) (Ping timeout: 256 seconds)
[17:34:56] *** Joins: undephin3d (~undephin3@158.181.81.11)
[17:38:06] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[17:39:50] *** Joins: kevr (~kevr@user/kevr)
[17:42:31] *** Joins: c4017w__ (~c4017@209.52.68.8)
[17:42:41] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:43:33] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[17:43:36] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:43:44] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:43:44] *** ChanServ sets mode: +v npaperbot
[17:45:48] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[17:45:56] *** Quits: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[17:48:27] *** Quits: lmat (~Lmat@c-73-102-193-68.hsd1.in.comcast.net) (Quit: leaving)
[17:48:38] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[17:49:31] *** Joins: Guest3291 (~Guest@host194.190-137-38.telecom.net.ar)
[17:51:17] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[17:51:33] *** Joins: lmat (~Lmat@c-73-102-193-68.hsd1.in.comcast.net)
[17:53:39] *** Joins: darkbit (~db@136.158.8.67)
[17:54:38] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[17:58:54] *** Quits: arkantos (uid447192@id-447192.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[18:00:15] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Ping timeout: 240 seconds)
[18:00:30] *** Quits: Guest3291 (~Guest@host194.190-137-38.telecom.net.ar) (Remote host closed the connection)
[18:02:03] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[18:02:22] *** Joins: jplejacq (~jplejacq@24.224.90.176)
[18:02:31] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[18:06:02] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 272 seconds)
[18:07:19] *** Joins: RazielZ (~Raziel@user/raziel)
[18:07:54] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:08:47] *** Joins: angelacrust (~angelacru@171.50.170.186)
[18:09:41] *** Joins: epony (epony@user/epony)
[18:10:20] *** Joins: pulse (~pulse@user/pulse)
[18:10:50] *** Quits: Raziel (~Raziel@user/raziel) (Ping timeout: 260 seconds)
[18:11:33] *** Joins: sidy (~sidy@user/sidy)
[18:16:55] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Quit: Quitting)
[18:25:02] *** Quits: zer0x (~zer0x@58.186.62.81) (Ping timeout: 272 seconds)
[18:32:42] *** Quits: jplejacq (~jplejacq@24.224.90.176) (Ping timeout: 250 seconds)
[18:34:23] *** Joins: quartz (~quartz@user/quartz)
[18:34:36] *** Joins: Azaziel_ (~Azaziel@138.199.39.3)
[18:37:12] *** Quits: angelacrust (~angelacru@171.50.170.186) (Quit: Client closed)
[18:40:49] *** Joins: CalamityBlue (~CalamityB@user/CalamityBlue)
[18:40:53] <Alipha> PJBoy: urdh: std::span represents a range over a contiguous sequence of objects, and you can't have a contiguous sequence of objects without knowing their size
[18:41:19] <urdh> yeah, that realization sunk in after a while
[18:41:25] <urdh> still don't like it, though
[18:42:03] *** Joins: rgrinberg (~textual@2806:101e:7:134:894c:b2ae:6240:e2e3)
[18:42:46] *** Joins: c4017w_ (~c4017@209.52.68.8)
[18:43:03] <Alipha> So you want a std::span<Base> that can refer to an array of Derived?
[18:43:26] <urdh> yes
[18:44:19] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[18:44:33] <SamuelMarks> hi
[18:44:43] <Alipha> Wouldn't be too hard to write one. Store an element size and then do some fun pointer arithmetic and reinterpret_casts
[18:46:10] <urdh> sure, but that's an annoying detour from solving the actual problem
[18:46:18] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 260 seconds)
[18:46:39] *** Joins: jplejacq (~jplejacq@152.42.120.241)
[18:46:44] <urdh> or maybe it's a fun distraction from all the shitty legacy code
[18:46:50] <urdh> haven't decided yet
[18:47:42] *** Quits: unknow (~i.am@user/marlboro) (Quit: a pentium 100 "running" windows 11 trying to play Last of Us II at ps4emu... that's my brain trying understand 0->R->R->R/2R->0)
[18:48:43] *** Quits: sonic (~sonic@user/sonic) (Quit: WeeChat 3.3)
[18:49:47] <PJBoy> Alipha, you can totally have that
[18:49:53] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[18:53:45] <PJBoy> { B&& b = D(); pjspan s(&b, 1); s[0].f(); } template<typename T> struct pjspan { T* data; size_t n; pjspan(T* data_in, size_t n_in) : data(data_in), n(n_in) {} T& operator[](size_t i) { return data[i]; } };  struct B { virtual void f() = 0; }; struct D : B { void f() { BARK; } };
[18:53:46] <geordi> D::f()
[18:53:47] <PJBoy> for example
[18:55:40] *** Quits: rgrinberg (~textual@2806:101e:7:134:894c:b2ae:6240:e2e3) (Ping timeout: 250 seconds)
[18:58:10] *** Quits: rg (~r-g@51-159-55-86.rev.poneytelecom.eu) (Quit: rg)
[18:59:14] *** Quits: quartz (~quartz@user/quartz) (Ping timeout: 272 seconds)
[19:00:01] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[19:00:21] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[19:00:30] *** Quits: Azaziel_ (~Azaziel@138.199.39.3) (Quit: Konversation terminated!)
[19:03:06] <Alipha> PJBoy: an array of more than one element? heh. Where the derived class is larger than the base class?
[19:03:11] *** Quits: Kulrak (Kulrak@n122-109-114-101.rdl1.qld.optusnet.com.au) (Remote host closed the connection)
[19:03:14] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[19:03:24] *** Joins: Kulrak (Kulrak@n122-109-114-101.rdl1.qld.optusnet.com.au)
[19:05:08] <PJBoy> that'd be trickier
[19:05:11] <PJBoy> <_<;
[19:14:12] *** Quits: foobaz2124846 (~foobaz212@152.37.103.80) (Quit: Client closed)
[19:14:23] *** Joins: nostar (~nostar@68.51.221.108)
[19:14:25] *** Joins: foobaz2124846 (~foobaz212@152.37.103.80)
[19:22:36] *** Joins: sobkas (~sobkas@95.175.17.217)
[19:23:11] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Ping timeout: 256 seconds)
[19:25:21] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[19:26:22] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[19:30:38] *** Quits: foobaz2124846 (~foobaz212@152.37.103.80) (Quit: Client closed)
[19:30:53] *** Joins: joomla9 (uid543104@id-543104.lymington.irccloud.com)
[19:30:54] *** Joins: foobaz2124846 (~foobaz212@152.37.103.80)
[19:31:36] *** Joins: rgrinberg (~textual@200.68.132.168)
[19:37:55] *** Joins: Dreadnaught (Kulrak@n122-109-114-101.rdl1.qld.optusnet.com.au)
[19:38:02] *** Quits: Kulrak (Kulrak@n122-109-114-101.rdl1.qld.optusnet.com.au) (Remote host closed the connection)
[19:42:51] <urdh> god implementing iterators is tedious
[19:43:28] *** Joins: c4017w__ (~c4017@209.52.68.8)
[19:44:02] *** Quits: Bhuvan1 (~Bhuvan_He@2a01:e34:ec9a:49f0:5c00:e335:1223:e0f8) (Quit: Leaving)
[19:47:22] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[19:50:43] <yhirose3> urdh: int i = 0; i < size(); i++ is a lot easier :)
[19:57:45] *** Quits: mrus (~mrus@gateway/tor-sasl/mrus) (Remote host closed the connection)
[19:57:45] *** Quits: spithash (~spithash@user/spithash) (Read error: Connection reset by peer)
[19:57:45] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[19:57:45] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Remote host closed the connection)
[19:58:03] *** Joins: teepee (~teepee@openscad/teepee)
[19:58:07] *** Joins: mrus (~mrus@gateway/tor-sasl/mrus)
[19:58:10] *** Joins: spithash (~spithash@user/spithash)
[19:58:11] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[19:59:24] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 272 seconds)
[20:02:56] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[20:05:56] *** Joins: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be)
[20:07:37] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[20:07:38] *** Joins: wakeup (~wakeup@user/wakeup)
[20:07:39] *** Quits: rgrinberg (~textual@200.68.132.168) (Read error: Connection reset by peer)
[20:08:15] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[20:09:53] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[20:10:23] *** Quits: GillesMMM (~gilles@228.100.5.84.rev.sfr.net) (Quit: Leaving)
[20:13:16] *** Joins: vicfred (~vicfred@user/vicfred)
[20:13:52] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[20:17:06] *** Quits: wakeup (~wakeup@user/wakeup) (Quit: Client closed)
[20:17:34] *** Quits: arch-angel (~arch-ange@user/arch-angel) (Ping timeout: 250 seconds)
[20:19:00] *** Quits: Telvana2 (~capo@user/telvana) (Ping timeout: 240 seconds)
[20:19:36] *** Quits: Perry (~perry@coffee-break.at) (Quit: ZNC - http://znc.in)
[20:19:50] *** Joins: wakeup (~wakeup@user/wakeup)
[20:20:10] *** Joins: rgrinberg (~textual@2806:101e:7:1518:e4af:523d:a092:a251)
[20:20:21] *** Joins: Perry (~perry@coffee-break.at)
[20:20:36] *** Joins: vqueiroz (uid340368@id-340368.hampstead.irccloud.com)
[20:20:39] *** Joins: Telvana (~capo@user/telvana)
[20:22:12] *** Quits: jplejacq (~jplejacq@152.42.120.241) (Ping timeout: 240 seconds)
[20:22:31] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[20:23:03] *** Joins: jplejacq (~jplejacq@24.224.90.176)
[20:23:23] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:24:11] *** Joins: quartz (~quartz@user/quartz)
[20:28:19] *** Quits: wakeup (~wakeup@user/wakeup) (Quit: Client closed)
[20:28:47] *** Quits: cosimone (~user@93-47-229-38.ip115.fastwebnet.it) (Remote host closed the connection)
[20:33:21] *** Quits: unlink2 (~unlink@p200300ebcf17f000a0e82b17ad9d82cf.dip0.t-ipconnect.de) (Remote host closed the connection)
[20:33:37] *** Quits: rgrinberg (~textual@2806:101e:7:1518:e4af:523d:a092:a251) (Ping timeout: 240 seconds)
[20:37:00] *** Quits: irf21k (~irf21k@2401:4900:4bc3:2135:1:0:7690:c997) (Ping timeout: 240 seconds)
[20:37:43] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[20:42:51] *** Joins: cosimone (~user@93-47-229-38.ip115.fastwebnet.it)
[20:43:42] *** Joins: c4017w_ (~c4017@209.52.68.8)
[20:43:58] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Ping timeout: 256 seconds)
[20:47:54] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[20:48:06] *** Quits: kenantu (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[20:48:10] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[20:48:30] *** Quits: quartz (~quartz@user/quartz) (Ping timeout: 256 seconds)
[20:48:36] *** Quits: yano (~yano@ircpuzzles/staff/yano) (Quit: WeeChat, the better IRC client, https://weechat.org/)
[20:49:57] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[20:51:05] *** Joins: yano (~yano@ircpuzzles/staff/yano)
[20:55:09] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[20:56:05] *** RazielZ is now known as Raziel
[20:57:17] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[20:57:26] *** Joins: ckdCreations (~ckdCreati@147.55.130.33)
[20:57:26] *** rwb is now known as rb
[21:02:47] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[21:02:56] *** Quits: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be) (Quit: Leaving)
[21:03:39] *** Joins: rg (~r-g@51-159-55-86.rev.poneytelecom.eu)
[21:05:08] *** Quits: aLeSD (~aLeSD@91.126.33.194) (Remote host closed the connection)
[21:05:18] *** Joins: jokoon (~eio@2a01:e0a:542:e160:ed19:5274:4d1:dce0)
[21:08:46] <acidtonic__> Are there any C++11+ ways to select on a socket_fd *AND* a condition_variable in the same call? I'm familiar with a few ugly hacks such as using a pipe in place of the condvar and then selecting on the pipes_fd + the sockets. Is this doable with std yet?
[21:10:13] *** Joins: wakeup (~wakeup@user/wakeup)
[21:12:31] *** Joins: sonic (~sonic@user/sonic)
[21:14:07] *** Joins: nuh^ (~nuh@50.232.121.75)
[21:16:33] <undephin3d> acidtonic__: you can only block on one call in any given thread. you'd usually use an eventfd to unblock a select/poll/epoll call.
[21:17:42] <undephin3d> if you need to sync with another thread via mutex/condition variables you'd have to do that in a follow-up step
[21:18:47] *** Quits: darkbit (~db@136.158.8.67) (Ping timeout: 256 seconds)
[21:19:01] <acidtonic__> I've done this in the past in other codebases, but basically a hack is to make a pipe-backed-condition and it's notify just writes an empty byte. Eventfd is cleaner with regards to less pipe-draining issues on the signalled side if busy/crashed, plus it's 64bit with EAGAIN upon overflow unlike pipes blocking forever
[21:19:01] <undephin3d> there are no real std libraries/abstractions yet that provide low-level I/O primitives like that
[21:19:16] *** Quits: foobaz2124846 (~foobaz212@152.37.103.80) (Quit: Client closed)
[21:19:32] *** Joins: foobaz2124846 (~foobaz212@152.37.103.80)
[21:20:19] <acidtonic__> I was hoping for some C++11 use this time around, such as std::condition_variable.native_handle and such
[21:21:27] <acidtonic__> then I can select a single thread, against a list of condition variables, network sockets, or pipe_fds, or file_fds. I like this as it performs better but is just ugly to implement
[21:21:42] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[21:24:42] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[21:25:51] <undephin3d> I doubt that condition variables are implemented as file descriptors anywhere.. anyway, selecting on several condition variables at once in a single thread sounds weird. I am not sure what scenario would require this
[21:26:23] *** Quits: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3) (Ping timeout: 252 seconds)
[21:30:30] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[21:30:37] <acidtonic__> undephin3d, agreed it's "odd" but I have a strange set of requirements (notably latency) and the goal is to wait on the network, but allow *instant* interruption from a user controlled thread to fire a message out. Normally I'd just have a timed_wait on inbound then flush any outbound but this must be instant. I'm also pondering using a self-connected UDP socket for the cond-var then I get what I'm after
[21:35:05] <undephin3d> hm, instant will never happen. if your thread is sleeping (cv.wait, epoll, etc.) it will always have some wakeup latency. but this is probably going to be negligble with regards to performing the actual send/physical transmission on ethernet or somesuch
[21:36:29] <acidtonic__> undephin3d, exactly, just slightly better than whatever you pass to "sleep_for" which becomes your best-case latency
[21:39:13] *** Inline__ is now known as Inline
[21:40:09] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[21:40:39] *** Quits: joomla9 (uid543104@id-543104.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[21:43:36] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:43:44] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:43:44] *** ChanServ sets mode: +v npaperbot
[21:44:05] *** Joins: c4017w__ (~c4017@209.52.68.8)
[21:45:12] *** Joins: plastico (~plastico@neomutt/plastico)
[21:45:45] *** Joins: quartz (~quartz@user/quartz)
[21:47:10] <zz> CVs-as-filedescriptors is just as costly as {CVs-as-memory plus the file descriptor API}, so that's that
[21:47:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[21:50:34] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[21:50:49] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[21:51:10] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[21:52:06] *** Joins: nq (~nq@82.78.21.171)
[21:55:05] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Remote host closed the connection)
[21:55:14] *** Joins: rgrinberg (~textual@2806:101e:7:1518:d4fd:b202:fa93:55e1)
[21:55:28] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[21:55:56] *** Quits: hfsoulz (~hfsoulz@user/hfsoulz) (Quit: leaving)
[21:59:58] *** Quits: jsbach (~jsbach@62.218.23.190) (Ping timeout: 260 seconds)
[22:00:06] *** Quits: wakeup (~wakeup@user/wakeup) (Quit: Client closed)
[22:02:01] *** Joins: proller (~p@80.240.216.69)
[22:03:22] *** Quits: Sadale (~Sadale@user/sadale) (Quit: tawa pona!)
[22:04:02] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[22:04:37] *** Joins: pretty_d1 (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[22:04:38] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[22:04:38] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 260 seconds)
[22:05:23] *** Joins: Sadale (~Sadale@user/sadale)
[22:06:56] *** Quits: MajorBiscuit (~MajorBisc@c-001-015-055.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[22:07:59] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:08:02] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[22:08:05] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[22:10:05] *** Joins: hfsoulz (~hfsoulz@user/hfsoulz)
[22:12:06] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[22:12:22] *** Quits: the_lanetly_052_ (~the_lanet@185.30.88.67) (Ping timeout: 256 seconds)
[22:13:32] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[22:13:39] *** Quits: rgrinberg (~textual@2806:101e:7:1518:d4fd:b202:fa93:55e1) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:15:09] *** Joins: Sadale (~Sadale@user/sadale)
[22:17:52] <ville> acidtonic__: probbaly not what you're looking for: 1 thread network, 1 thread user input and they both stick events into a queue. a 3rd thread handles events from that queue
[22:18:16] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Quit: Client closed)
[22:18:27] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[22:18:57] <ville> acidtonic__: the 3rd thread would block on an empty queue and wake up immediately as something is stuck in there
[22:19:22] *** Quits: undephin3d (~undephin3@158.181.81.11) (Ping timeout: 272 seconds)
[22:19:38] <energizer> i heard that a future version of c++ is introducing "correctly rounded" mathematical functions called sqrt_cr and exp_cr. google isn't turning up anything. does this sound familiar?
[22:21:11] <ville> acidtonic__: it's something i've used when i didn't bother to get fancy with platform-specific things trying to make "everything looke like an fd" or such
[22:26:04] *** Quits: nafen (~nafen@gateway/tor-sasl/nafen) (Remote host closed the connection)
[22:26:22] <ville> energizer: doesn't ring a bell. maybe something c people are doing?
[22:26:29] *** Joins: nafen (~nafen@gateway/tor-sasl/nafen)
[22:30:16] *** Quits: nafen (~nafen@gateway/tor-sasl/nafen) (Remote host closed the connection)
[22:30:39] *** Joins: nafen (~nafen@gateway/tor-sasl/nafen)
[22:34:09] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[22:35:03] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[22:35:37] *** Quits: pretty_d1 (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 240 seconds)
[22:36:41] *** Quits: nafen (~nafen@gateway/tor-sasl/nafen) (Remote host closed the connection)
[22:37:02] *** Joins: nafen (~nafen@gateway/tor-sasl/nafen)
[22:38:13] *** Quits: nafen (~nafen@gateway/tor-sasl/nafen) (Remote host closed the connection)
[22:38:33] *** Joins: nafen (~nafen@gateway/tor-sasl/nafen)
[22:39:44] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.4)
[22:41:27] <Hello71> it is for c, and called cr_exp, cr_log, cr_sin, ...
[22:42:32] *** Joins: quartz (~quartz@user/quartz)
[22:43:09] *** Quits: nafen (~nafen@gateway/tor-sasl/nafen) (Remote host closed the connection)
[22:43:30] *** Joins: nafen (~nafen@gateway/tor-sasl/nafen)
[22:44:36] *** Joins: c4017w_ (~c4017@209.52.68.8)
[22:44:38] *** Quits: nafen (~nafen@gateway/tor-sasl/nafen) (Remote host closed the connection)
[22:44:58] *** Joins: nafen (~nafen@gateway/tor-sasl/nafen)
[22:46:39] *** Joins: proller (~p@2a02:6b8:b081:b65c::1:b)
[22:47:57] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[22:49:52] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:52:12] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:56:19] <quartz> Hello. I'm trying to complete this assignment here: https://bpa.st/24KQ   I've written this code here: https://godbolt.org/z/r71G59h7j  I'm suppose to use concepts and constraints to "constrain the arguement types" with concepts. I'm just confused on how to go about this, or what the purpose is. From my understanding, concepts are used to place "constraints" on the different types that can be passed
[22:56:21] <quartz> into a generic function, which are evaulated at compile time. Is that correct?
[22:57:00] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[22:58:58] *** Joins: Zogatribe (Zogatribe@user/zogatribe)
[22:59:36] *** Quits: PlasmaHH_ (~PlasamaHH@user/plasmahh) (Read error: Connection reset by peer)
[22:59:52] *** Joins: nafen_ (~nafen@gateway/tor-sasl/nafen)
[23:00:18] *** Quits: nafen (~nafen@gateway/tor-sasl/nafen) (Remote host closed the connection)
[23:01:06] *** Quits: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net) (Ping timeout: 256 seconds)
[23:02:10] *** Joins: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net)
[23:03:40] <PJBoy> yeah
[23:04:13] *** Quits: jokoon (~eio@2a01:e0a:542:e160:ed19:5274:4d1:dce0) (Quit: Leaving)
[23:04:23] <PJBoy> so you have some generic function that does addition or whatever that takes any type
[23:04:53] <PJBoy> but really addition only works on some set of types, so you might want to constrain your template so that it only can be called with addable types
[23:04:55] <quartz> PJBoy: But I don't get what the point of this part of the assignment is. If someone passes in func(3) it's suppose to evaluate that to become a list or vector?
[23:05:08] <quartz> PJBoy: Ahh
[23:05:34] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[23:06:05] <PJBoy> in your case you probably want to require that Operation can be called with a Container value type and Accumulator arguments
[23:07:24] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[23:08:35] <quartz> PJBoy: But how am I to do that? I'm looking at https://www.cplusplus.com/reference/numeric/accumulate/  and observing how it looks like who ever wrote this function/template used concepts to constrain the arguements?
[23:09:11] <PJBoy> no concepts or constraints there
[23:09:52] <PJBoy> the ranges algorithms are the most notable stdlib usage of concepts https://en.cppreference.com/w/cpp/algorithm/ranges
[23:10:27] <PJBoy> probably you just want to use a requires expression though
[23:11:28] <quartz> But assignment says to use concepts, is requires the same thing?
[23:11:58] <PJBoy> you often use requires to make concepts
[23:14:35] *** Joins: Asszi (~quassel@2a02:ab88:2a00:6d00::ae7)
[23:14:42] *** Quits: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net) (Ping timeout: 256 seconds)
[23:15:03] *** Quits: nafen_ (~nafen@gateway/tor-sasl/nafen) (Quit: Leaving)
[23:15:50] <quartz> PJBoy: So basically just copy what they did with the "Hashable" template? https://en.cppreference.com/w/cpp/language/constraints
[23:16:02] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[23:16:14] *** Joins: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net)
[23:17:34] <PJBoy> you might do something like `template<typename Container, typename Operation, typename Accumulator> concept container_operable = requires(Container c, Operation op, Accumulator acc) { op(acc, c.front()); };`
[23:18:28] <quartz> So the "c.front()" spans across all functions in the containers class?
[23:19:12] <PJBoy> most of them
[23:19:40] <PJBoy> not std::set et al
[23:19:42] *** Quits: foobaz2124846 (~foobaz212@152.37.103.80) (Quit: Client closed)
[23:19:50] <PJBoy> but all the sequence containers
[23:19:55] *** Joins: foobaz2124846 (~foobaz212@152.37.103.80)
[23:20:23] <quartz> But can't you technically add things to together in std::set? So under this constraint, I couldn't pass in a set into the function?
[23:20:56] <PJBoy> you could totally loop over a set and sum its elements if you wanted to
[23:21:09] <PJBoy> but maybe that's not a sensible thing to allow
[23:21:33] <quartz> why not?
[23:21:49] * PJBoy shrugs
[23:21:59] <PJBoy> would depend on the context
[23:22:07] <PJBoy> for an assignment, probably fine to allow summing a set
[23:23:12] <PJBoy> so maybe you just want to use `*c.begin()` or `Container::value_type` instead
[23:23:23] <zz> The trick with assignments is to do them in such a way that the resulting code is totally unexpected but all requirements are fulfilled
[23:23:34] <PJBoy> but then value_type for a map is a pair, so
[23:23:53] <PJBoy> as is its `*c.begin()`
[23:23:57] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 240 seconds)
[23:25:00] <PJBoy> there's many ways to constrain a template
[23:25:12] <quartz> Hmmm
[23:26:11] *** Joins: lxsameer (lxsameer@user/lxsameer)
[23:27:53] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[23:28:08] <quartz> PJBoy: OK thanks. Can you tell me why godbolt is throwing these errors? I told it to compile with "concepts". https://godbolt.org/z/nrM5rGTh9
[23:28:29] <quartz> I'm getting errors form clang when I try to compile it on my linux machine as well.
[23:28:45] <PJBoy> yeah, the definition of the concept is unrelated to the definition of the sum function
[23:28:45] <quartz> Weird... you'd think the clang compiler would be updated to incorporate C++20 stuff
[23:28:58] <quartz> Huh
[23:29:06] <PJBoy> you need to write the template<...> preamble for each definition
[23:29:42] <PJBoy> there could be a million lines of code between that concept definition and that sum definition
[23:30:51] <PJBoy> so like so https://godbolt.org/z/f1Kn9T97s
[23:31:11] <PJBoy> and then probably you'd want to constrain that template
[23:31:50] <PJBoy> so then you'd get https://godbolt.org/z/5hKMhYY8b
[23:32:47] <PJBoy> and then you'd fix the concept definition
[23:33:24] <PJBoy> problem is that you can't call for example `std::plus<float>()(0.0, std::list<float>::value_type)`
[23:33:33] <PJBoy> because you can't pass types are function arguments
[23:33:44] <PJBoy> *as
[23:34:02] <PJBoy> probably you'd like to write `Container::value_type()`
[23:34:44] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[23:34:50] <PJBoy> which unfortunately still doesn't work because C++ doesn't realise that Container::value_type is a type and not a function, because it doesn't know what Container is yet, so it assumes it's a function or object and errors out when it's not
[23:35:07] <PJBoy> so you gotta write `typename Container::value_type()` to disambiguate correctly
[23:35:07] <quartz> Sorry I'm lost.
[23:35:12] <PJBoy> arriving to https://godbolt.org/z/fM8K479jo
[23:35:41] <PJBoy> yeah I'm not surprised, the necessity of writing `typename` is quirky
[23:37:09] <PJBoy> there's a problem in general when it comes to using a template parameter as the left side of the :: operator
[23:37:16] <PJBoy> { f<vector<int>>(); } template<typename Container> void f() { Container::value_type x; }
[23:37:17] <geordi> error: need 'typename' before 'Container::value_type' because 'Container' is a dependent scope
[23:38:02] <quartz> Sorry I'm so confused this went way over my head.
[23:38:11] <quartz> Reglardless
[23:38:22] <quartz> The concept of concepts and constraints makes sense.
[23:38:31] <PJBoy> if I gave you a `template<typename T> void f() { T::x(); }`, you would have no idea if T::x is a type or if T::x is a member
[23:39:00] <PJBoy> it could be `struct T { using x = int; };` or it could be `struct T { int x; };`
[23:39:48] <PJBoy> and so the compiler by default assumes the latter, and you have to explicitly tell it that it's the former with the typename keyword sometimes
[23:41:37] <PJBoy> it says something about the language that it's easier to grasp concept constraints than the :: operator
[23:41:40] <quartz> PJBoy: On line 44, if I delete "lst" and just replace it with "4", shouldn't it still work, because 4 is something you can technically "add" to 0, which is the initial value or accumulator
[23:42:05] <quartz> Hahaha yeah
[23:42:12] <PJBoy> well 4 isn't a container
[23:42:22] <PJBoy> and so that seems like it would be an issue
[23:42:40] <PJBoy> you could make a sum overload that works on non-containers though
[23:43:09] <PJBoy> constrained to not take container arguments
[23:44:07] <quartz> Wait... so the entire purpose of adding concepts and constraints to the function template was to limit what exactly could be passed in right?
[23:44:13] <PJBoy> that's probably the more useful thing about constraints, being able to make overloads like this
[23:44:51] <PJBoy> yeah so your `sum` is limited to only take argument types for which the `op(acc, i)` expression makes sense
[23:45:00] <quartz> The snarky teaching assistant left me this cryptic advice, which I'm assuming means: "Your function should work if I pass an int into it)" https://i.ibb.co/hgPn0wK/image.png
[23:45:03] *** Joins: c4017w__ (~c4017@209.52.68.8)
[23:45:21] <quartz> Hmmm OK...
[23:45:42] <PJBoy> you might also want an overload that is limited to only take argument types for which `op(acc, c);` works
[23:45:58] <quartz> I thought that's what we just did
[23:46:01] <quartz> By adding a constraint.
[23:46:28] <PJBoy> by `c` I mean the first argument to `sum`
[23:46:33] <PJBoy> as opposed to the loop variable `i`
[23:47:57] <quartz> Ohhhh
[23:47:57] <PJBoy> so for example, https://godbolt.org/z/Mb7a65xjr
[23:48:15] <PJBoy> and then your two overloads can coexist in harmony because they're limited correctly
[23:48:42] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 260 seconds)
[23:48:46] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:49:12] <PJBoy> strictly speaking you can leave one overload unconstrained, and overload resolution will prefer the constrained one where possible
[23:49:58] <quartz> Hmmm.
[23:50:05] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[23:50:47] *** Joins: Guest54 (~Guest54@2620:10d:c092:400::4:2f9c)
[23:50:49] <PJBoy> I think what that image.png is trying to get across is that `typename Container` is already overly generic
[23:50:49] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:51:02] <quartz> lol
[23:51:09] <PJBoy> you could additionally require that the Container type acts like a container in some way or another
[23:51:10] <quartz> the entire assignment is about creating generic functions
[23:51:20] <PJBoy> for example, requiring that it has a begin and end member function
[23:51:22] <Guest54> I'm looking at some code that goes like ("%s", foo), where foo is `optional<string>`. Is this UB?
[23:51:33] <PJBoy> absolutely
[23:51:58] <Guest54> dang
[23:52:20] <PJBoy> passing a class type to a variadic function is already "conditionally supported with implementation defined semantics"
[23:52:24] <PJBoy> so highly dubious
[23:52:38] <PJBoy> but moreover %s just will not work correctly with something that isn't a char pointer
[23:54:10] <quartz> PJBoy: Can you explain a bit more what you mean by 'typename Container' is already overly generic? Like the entire assignment is about generics...
[23:54:28] <Guest54> I can't share the code because it's proprietary...but basically we have a sql query where we do query(%c = %s", colName, colValue) where colValue is a optional<string>
[23:54:38] <PJBoy> the example was that passing 4 doesn't work out because 4 isn't a container
[23:54:43] <Guest54> the weird thing is, we have a test where colValue is nullopt and it passes the test lol
[23:54:54] <imMute> Guest54: ah, so it's vulnerable to SQL injection too
[23:55:10] <PJBoy> so probably it would have made sense to require that the first argument is actually a container somehow
[23:55:32] <PJBoy> then you wouldn't have been able to try passing 4
[23:55:32] <Guest54> imMute query() is the api function so I think it sanitizes it
[23:56:00] <imMute> Guest54: prepared statements / placeholders / whatever they're called would be way better than hoping that your sanitizer is not broken
[23:57:02] <Guest54> we're using a third party api to build the queries - it's this one https://github.com/facebook/squangle/blob/main/squangle/mysql_client/Query.cpp
[23:57:17] <PJBoy> so for example, in https://godbolt.org/z/deEb9j7s9 , `container Container` seems better than `typename Container`
[23:57:31] <Guest54> and we call this function: https://github.com/facebook/squangle/blob/main/squangle/mysql_client/Query.cpp#L223
[23:57:36] <Guest54> s/function/constructor
[23:58:29] <quartz> PJBoy: OK thanks for your help. I'll review and try to learn from your code.
[23:58:33] <PJBoy> then when you try to pass 4 as the first argument, the compiler's like "constraints not satisfied, required for the satisfaction of 'container<Container>' [with Container = int]"
[23:58:51] <imMute> Guest54: ah, okay, that looks like a prepared statement API.  I don't touch FB stuff, so I cant help any more beyond that
[23:59:20] <PJBoy> as opposed to spewing garbage about how the `for (const auto& i : c)` doesn't make sense where `c` is 4
