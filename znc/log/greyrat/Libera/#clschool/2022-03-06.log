[00:29:18] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Remote host closed the connection)
[01:09:19] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[02:40:35] *** Joins: Oladon (~olad@98.43.81.226)
[03:20:46] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 245 seconds)
[03:22:53] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[03:23:00] *** Joins: hashfuncadb (~user@2601:5c0:c280:7090:29ba:fcc0:8f3a:efac)
[03:48:56] *** Joins: lisp123 (~lisp123@120.154.103.52)
[03:49:03] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[03:54:12] *** Quits: hashfuncadb (~user@2601:5c0:c280:7090:29ba:fcc0:8f3a:efac) (Ping timeout: 240 seconds)
[03:57:22] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[04:59:38] *** Quits: random-nick (~random-ni@87.116.176.196) (Ping timeout: 256 seconds)
[05:08:37] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 240 seconds)
[05:53:58] *** Joins: hashfuncadb (~user@2601:5c0:c280:7090:29ba:fcc0:8f3a:efac)
[06:04:04] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 272 seconds)
[06:35:37] *** Quits: hashfuncadb (~user@2601:5c0:c280:7090:29ba:fcc0:8f3a:efac) (Ping timeout: 240 seconds)
[06:41:13] *** Quits: jealousmonk (~user@user/jealousmonk) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 27.1))
[07:30:15] <beach> Good morning everyone! 
[08:17:24] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[08:47:02] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[09:07:18] *** Quits: epony (epony@user/epony) (Read error: Connection reset by peer)
[09:07:55] *** Joins: epony (epony@user/epony)
[09:21:40] *** Quits: epony (epony@user/epony) (Remote host closed the connection)
[09:51:41] *** Joins: epony (epony@user/epony)
[10:14:15] *** Joins: lisp123 (~lisp123@120.154.103.52)
[10:59:42] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[11:32:01] *** Joins: lisp123 (~lisp123@120.154.103.52)
[11:35:57] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[11:36:11] *** Joins: lisp123 (~lisp123@120.154.103.52)
[12:00:22] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[12:02:02] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[12:10:41] *** Joins: epony (epony@user/epony)
[12:52:38] *** Joins: lisp123 (~lisp123@120.154.103.52)
[12:57:24] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 240 seconds)
[12:58:35] *** Joins: lisp123 (~lisp123@120.154.103.52)
[13:03:00] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 256 seconds)
[13:06:52] *** Joins: lisp123 (~lisp123@120.154.103.52)
[13:10:49] *** Joins: Harag (~user@105.243.9.173)
[13:11:57] <Harag> I need help with a macro please, I got something working but its not pretty, I need suggestions to make it better if at all possible. https://pastebin.com/dmAHhmby
[13:18:13] <lisp123> expand-h
[13:18:37] <lisp123> isn't it just `(intern% (format nil "H~A" (get-size)))
[13:18:43] <lisp123> am I missing something
[13:21:14] <lisp123> ok i see what you are doing
[13:21:20] <lisp123> scratch my last comment
[13:22:00] <lisp123> instead of eval, you may want FUNCALL or APPLY
[13:22:37] <lisp123> although I suspect you can get away without it too, `(,(expand-h) ,@body)) -> something like that
[13:22:51] <Harag> the output needs to be feed to cl-who in the end but I left that out to keep it simple in the example
[13:23:38] <lisp123> ah so (expand-h) does not return a function
[13:24:44] <lisp123> (let ((*size* 2))
[13:24:44] <lisp123>   (tag-x "???"))
[13:24:44] <lisp123>  
[13:24:46] <lisp123> output => (:H2 "???")
[13:24:58] *** Joins: shka (~herr@109.231.3.55)
[13:25:01] <lisp123> isn't tag-x just (list ,(expand-h) ,@body)?
[13:26:09] <pjb> Harag: the question is how to use the lexical environment in a macroexpansion. This is specifically forbidden by the CL rules.
[13:26:40] <pjb> well, dynamic environment, since we're using *size*.
[13:26:48] <Harag> yes pjb but a macro that cant reachout to the outside world in this case is useless to me
[13:26:49] <pjb> Harag: using EVAL is a cheat that works in that case.
[13:27:24] <Harag> and it has to reach out at run time not compile time
[13:27:31] <pjb> To make it more cleanly, you'd want to use macrolet to store the size, and &environment / macroexpand, to get it.
[13:28:03] <Harag> pjb: any examples you can point me at please
[13:28:15] <pjb> Harag: it cannot just reach out at run-time, since you want the expansion at compilation-time to feed cl-who.
[13:29:09] <Harag> yes, I need that interim form 
[13:29:12] <pjb> This is basically the reason why com.informatimago.common-lisp.html-generator.html has both macros and functions to generate the html sexps, so that you can do this kind of thing 100% at run-time.
[13:29:45] <Harag> bbm
[13:29:48] <pjb> see https://github.com/informatimago/lisp/blob/master/common-lisp/html-generator/html-generators-in-lisp.txt
[13:30:48] <pjb> Harag: does your solution work with cl-who as it is?
[13:33:56] <Harag> yes
[13:34:59] <Harag> i can create my own tags and then write (:div (:my-tag :size *size* (:some-other-tag :special 1)))
[13:36:32] <Harag> so for most of what I want to do i wont build tags the expand-h one, it should be the exception to the rule.
[13:36:51] <pjb> Note: (let ((*size* 2))  (macroexpand-1 '(tag-x "???"))) #| --> (eval (list* 'list* (list* '(expand-h) (list (list* 'list (list "???")))))) ; t |# 
[13:37:13] <Harag> it just irritated me that I could not figure out a clean way to do it
[13:37:38] <pjb> So you could expand to a function call.
[13:42:50] <Harag> pjb: replace eval with some function that takes expand-h and body?
[13:43:24] <pjb> Harag: for eaxmple: https://termbin.com/3dto
[13:43:39] <pjb> expand-h needs to be a function too in that case.
[13:47:07] <Harag> ok I got a couple of questions if you dont mind
[13:47:37] <pjb> Sure.
[13:47:41] <Harag> 1. why is the eval-when (:compile-toplevel :load-toplevel :execute) needed?
[13:47:50] <pjb> the functions are called in a macro.
[13:48:12] <pjb> Well, were. It's not needed anymore.
[13:48:35] <Harag> ok so that is why some times a macro sees a function and then other times it complains it does not know about it
[13:49:13] <pjb> Yes.  If the macro calls the function during macroexpand, the function needs to be loaded in the compilation environment.  So load before compile, or eval-when.
[13:49:30] <pjb> If the macro expands to a function call, the function only needs to be loaded at run-time.
[13:49:45] <pjb> (unless the macro is used in another macro ;-))
[13:50:19] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[13:50:46] <Harag> ok that explains a lot of funny behaviour, I work with macros to so little
[13:52:14] <Harag> I got to the point where if I changed any code I restarted lisp and reloaded everything
[13:53:12] <Harag> 2. Why the funcall on thunk specifically?
[14:05:20] <Harag> ` `(,(expand-h)  ,thunk) seems to work fine as well
[14:34:51] <Harag> pjb: if one wants to create their own tags what are the steps? Just defelement and defattribute?
[14:35:10] <Harag> in your html-generator
[14:35:50] <Harag> in which package does make-dtd-* live?
[14:38:54] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[14:41:24] *** Joins: lisp123 (~lisp123@120.154.103.52)
[14:46:08] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 256 seconds)
[15:00:59] <Harag> pjb: out of curiosity if I ponder the reasoning behind your html-generator package, would a some type of DOM to back up your syntax not be a better solution, your framework can reuse "bits" (chunks of code) but there are no easy way to reference specific elements in a page etc. Especially in the case of html that is used in an application. Applications are longer lived than the typical web page.
[15:04:16] <pjb> Harag: indeed, defelement and defattribute.
[15:05:20] <pjb> Harag: yes, it's a sexp to html generator, not a DOM to html.  But I guess you could define DOM objects from the defelement/defattribute macros.  
[15:06:24] <pjb> This is indeed, something that could also be considered for html generator, and html parser, to have a DOM, and not just a syntax.  The DOM is only considered for XML parsers in general, not for generators.
[15:08:16] <bremner> I'm stuck on an sb-rt test failing https://paste.debian.net/1233167/. It reports Expected value: #P"/home/user/data/foo"\nActual value: #P"/home/user/data/foo"; which is mystifying to me. I also can't find documentation for sb-rt other than the source.
[15:08:33] *** Joins: random-nick (~random-ni@87.116.176.196)
[15:09:00] <Harag> pjb: when I say defining my own element I mean for instance (:card :header "some text" "some body content") needs to expand to (:div (:h header "some text") (:div "some body content"))
[15:09:26] <pjb> In that case, I would use a normal CL function or macro.
[15:09:37] <pjb> (card :header … ) -> (:div …)
[15:09:58] <Harag> ok 
[15:18:08] <Harag> pjb: I like the idea of a "generic" DOM. Something that I could generate hmtl,pdf,org or any document format off. In the end you could say that any "document" is just a elements with attributes and children etc 
[15:39:11] <bremner> here's a much simpler test case: (equal (uiop:parse-unix-namestring "/foo/bar") #P"/foo/bar")
[15:40:54] <bremner> or equalp, which is closer to what sb-rt uses internally.
[16:08:54] <Harag> bremner: maybe its the Type: NIL Version: :NEWEST vs Type: :UNSPECIFIC Version: NIL
[16:10:29] <pjb> (mapcar (lambda (p) (list (pathname-type p)(pathname-version p))) (list (uiop:parse-unix-namestring "/foo/bar") #P"/foo/bar")) #| --> ((:unspecific nil) (nil :newest)) |# 
[16:11:07] <pjb> This is why I use make-pathname to make my pathnames, in general, instead of using pathname or other namestring parsing.
[16:12:59] <bremner> is there an easy way to show the internal view of a pathname? the fact that different structures print the same is unhelpful here
[16:13:28] <bremner> other than calling all 5 or six pathname-* functions, I guess
[16:14:04] <Harag> (eq (make-pathname :name "bar" :directory "foo" :version :newest) (make-pathname :name "bar" :directory "foo"))
[16:16:14] <Harag> bremer reproduce in repl and then view via sly or slime
[16:17:17] <bremner> view how? I'm in slime
[16:17:51] <Harag> cant remember slime, just click on the produced output
[16:18:40] <bremner> oh! TIL.
[16:18:58] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[16:19:58] <Harag> (equalp  (make-pathname :name "bar" :directory "foo" :version :newest :type nil)
[16:20:00] <Harag> 	 (make-pathname :name "bar" :directory "foo" :version nil :type :UNSPECIFIC))
[16:20:21] <Harag> its seems the type produced is different and that makes equalp fail
[16:21:18] <Harag> that equalp I pasted is the innards replicated of the uiop and pathname
[16:27:30] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 252 seconds)
[16:30:13] *** Joins: lisp123 (~lisp123@120.154.103.52)
[16:33:28] <pjb> bremner: you can use com.informatimago.common-lisp.interactive.interactive:print-pathname https://termbin.com/e5rb
[16:34:13] <bremner> nice.
[16:34:36] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 240 seconds)
[18:09:58] *** Quits: seok- (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au) (Ping timeout: 260 seconds)
[18:46:11] *** Joins: Oladon (~olad@98.43.81.226)
[19:55:58] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[20:25:15] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[20:44:36] *** Quits: pjb (~pjb@user/pjb) (Read error: Connection reset by peer)
[21:14:58] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[21:42:48] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[21:47:09] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Read error: Connection reset by peer)
[21:47:23] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[22:35:24] *** Joins: vats (~vats@103.216.143.6)
[22:45:32] *** Quits: vats (~vats@103.216.143.6) (Ping timeout: 256 seconds)
[22:45:40] *** Joins: Oladon (~olad@98.43.81.226)
[22:48:39] *** Joins: lisp123 (~lisp123@120.154.103.52)
[22:53:28] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 256 seconds)
[22:56:29] *** Joins: pjb (~pjb@user/pjb)
[23:10:07] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Remote host closed the connection)
[23:40:54] *** Joins: sbodin (~sbodin@185.12.224.124)
[23:44:28] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
