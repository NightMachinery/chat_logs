[00:14:59] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[00:16:48] <pjb> lisp123: that depends.
[00:16:58] <pjb> is the x in your function declared special?
[00:17:43] <pjb> (defun my-function (y) (declare (special x)) (+ x y)) (let ((x 21)) (declare (special x)) (my-function x)) #| --> 42 |# 
[00:19:42] <lisp123> pjb: yes, declared special
[00:20:18] <pjb> lisp123: you don't need to declare special the variables that are already special!
[00:20:29] <lisp123> I was able to get nested dynamic extent to work, but need to step through my code in detail as I feel I had to add an unnecessary let
[00:20:36] <pjb> defparameter makes a global special declaration of *x* This is why we use the stars around the x for *x* !
[00:20:56] <lisp123> I am shadowing global special variables, via let
[00:21:07] <lisp123> but the local variables in let I want to have dynamic extent as well
[00:21:10] <pjb> But you don't need a global variable just to use a special variable betwee two functions, as the variable x in my example.
[00:21:29] <pjb> lisp123: dynamic-extend has nothing to do wtih dynamic scope.
[00:21:46] <pjb> I mean, dynamic-extend is not about the variables, but about the values!
[00:22:02] <pjb> A lexical variable can be bound top a value that has dynamic-extend!
[00:22:08] <lisp123> https://plaster.tymoon.eu/view/2627#2627
[00:22:14] <lisp123> It's a work in progress
[00:22:31] <pjb> (let ((lexi (list 1 2 3))) (declare (dynamic-extend lexi))  (mapcar '1+ lexi)) #| --> (2 3 4) |# 
[00:23:11] <pjb> lisp123: always read clhs when you use a new operator!
[00:23:16] <lisp123> But to give you the background - I am trying to write a wrapper function =defun that stores all the parameter values, results, etc. of the defined function in a global *flat-list*
[00:23:18] <pjb> clhs locally
[00:23:38] <pjb> don't use progn, use locally!
[00:23:50] <lisp123> However when those functions call themselves, I want to have some nesting done, so I need to shadow *counter*
[00:24:04] <lisp123> its in very bad shape, hopefully in a few days, I'll clean it up and it will make more sense
[00:24:47] <lisp123> pjb: thanks!
[00:24:56] <lisp123> so always use locally when having multiple forms in a defmacro?
[00:25:09] <lisp123> multiple lists*
[00:25:28] <lotuseater> pjb: what I said about 1h ago
[00:25:39] <lotuseater> lisp123: no.
[00:26:18] <pjb> No, never use it.
[00:26:38] <lotuseater> when you generate multiple toplevel forms then PROGN
[00:26:41] <pjb> Why is not *counter* a global variable?
[00:26:56] <pjb> The other can be declared in their LET.
[00:27:30] <lisp123> No, never use it. --> never use progn in a macro do you mean?
[00:27:59] <lisp123> Its a WIP, I have been manually defining *counter* as a global variable outside of it, but I'll add that in to the macro
[00:28:06] <pjb> No, locally is rarely useful, because you can put the declaration in the LET or some other form that accept declarations.
[00:28:17] <lotuseater> I'll stop talking.
[00:28:21] *** Parts: lotuseater (~user@p200300e7870566004b01295534bb48e2.dip0.t-ipconnect.de) (ERC (IRC client for Emacs 27.2))
[00:28:25] <lisp123> I see, thanks
[00:30:43] <lisp123> I will share an example to illustrate what I'm doing, but never mind the code for now - it will take me a few days to fix up
[00:31:22] <lisp123> https://plaster.tymoon.eu/view/2628#2628
[00:31:42] <lisp123> (sorry my indenting is not working, so will need to C-M-\ on your end to see it properly)
[00:32:23] <lisp123> If you look at *flat-list* at the end, you can see its a list of all the function calls with their values and also reflecting the nesting
[00:32:46] <lisp123> My aim is to then parse this and create something similar to the STEP function where one can step through each of the results, but also backwards
[00:32:49] <lisp123> since we have a full history
[00:33:14] <lisp123> (and then add all the bells & whistles for pretty printing etc.)
[00:34:17] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 245 seconds)
[00:34:26] <pjb> lisp123: https://termbin.com/nbx5
[00:36:03] *** Joins: aeth (~aeth@user/aeth)
[00:36:23] <lisp123> pjb: Wow, great much cleaner. Will read through carefully
[00:37:10] <lisp123> Also I wanted to replace a & b with their values in the forms, it was on my list to figure out. Do you think this is a useful macro?
[00:37:49] <lisp123> Plan was to write to file or somehow transfer to the elisp side, and then build something similar to STEP to step through of these calls
[00:38:11] <lisp123> And it can work backwards & forwards nicely
[00:38:32] <pjb> you can add the arguments; https://termbin.com/2w4o
[00:40:38] <lisp123> Great! Is it possible to add their values into the body forms as well? e.g. (+ 3 10) vs. (+ a b)
[00:42:20] <pjb> of course whatever you want. it's just list processing.
[00:43:18] <lisp123> Great
[00:43:20] <lisp123> Thanks
[01:06:04] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[01:16:31] *** Joins: silasfox (~sbv@xdsl-84-44-182-29.nc.de)
[01:21:08] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[01:22:03] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:27:00] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[01:46:44] *** Quits: silasfox (~sbv@xdsl-84-44-182-29.nc.de) (Quit: WeeChat 3.2)
[02:00:22] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:11:56] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[02:12:07] *** Quits: greaser|q (greaser@antihype.space) (Changing host)
[02:12:07] *** Joins: greaser|q (greaser@user/greasemonkey)
[02:12:12] *** greaser|q is now known as GreaseMonkey
[02:48:38] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:59:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[03:36:57] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[04:22:50] *** Quits: random-nick (~random-ni@87.116.182.103) (Ping timeout: 252 seconds)
[04:24:55] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[04:26:55] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[04:56:49] *** Joins: lisp123 (~lisp123@5.30.23.247)
[05:12:32] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[06:14:29] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[07:12:53] *** Quits: sts-q (~sts-q@91.200.108.177) (Ping timeout: 265 seconds)
[07:22:35] *** Joins: sts-q (~sts-q@91.200.108.243)
[07:25:44] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 250 seconds)
[07:29:09] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[07:57:15] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[08:45:40] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:44:37] *** Joins: st_iron (uid370243@id-370243.highgate.irccloud.com)
[09:49:14] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[10:23:28] *** Joins: shka (~herr@109.231.62.239)
[11:20:17] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 252 seconds)
[11:42:17] *** Joins: kstuart (~kstuart@85.203.34.2)
[12:01:46] *** Quits: kstuart (~kstuart@85.203.34.2) (Remote host closed the connection)
[12:36:53] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:39:21] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[13:04:03] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[13:38:16] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Ping timeout: 252 seconds)
[13:39:00] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[13:46:39] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:51:38] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[13:54:46] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 252 seconds)
[14:08:10] *** Joins: pjb (~pjb@user/pjb)
[14:53:01] *** Joins: random-nick (~random-ni@87.116.178.0)
[15:03:34] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:20:21] *** Joins: silasfox (~sbv@xdsl-84-44-182-29.nc.de)
[16:26:25] *** Quits: silasfox (~sbv@xdsl-84-44-182-29.nc.de) (Quit: WeeChat 3.2)
[17:04:07] *** Quits: st_iron (uid370243@id-370243.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[17:48:24] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:49:22] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:50:55] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:53:25] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[18:42:49] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[18:49:51] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[18:53:23] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[19:02:12] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[19:06:24] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[19:08:36] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:20:24] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:27:59] *** Joins: makomo_ (~makomo@user/makomo)
[19:32:34] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 252 seconds)
[19:35:10] *** Joins: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.sdns.net.rogers.com)
[19:36:25] *** Joins: thrig (~thrig@65.113.153.50)
[19:40:30] *** Joins: kstuart (~kstuart@85.203.34.2)
[19:45:02] *** Joins: makomo_ (~makomo@user/makomo)
[20:40:41] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[20:48:39] *** Quits: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.sdns.net.rogers.com) (Quit: ERC (IRC client for Emacs 27.2))
[20:54:39] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[21:01:29] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[21:17:58] *** Quits: Partmedia (~kevinz@172-221-159-029.res.spectrum.com) (Quit: restart)
[21:18:08] *** Joins: Partmedia (~kevinz@172-221-159-029.res.spectrum.com)
[21:22:32] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 252 seconds)
[21:26:30] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[21:33:32] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[22:10:05] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[22:12:39] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:18:17] *** Quits: vats (~vats@103.70.83.191) (Read error: Connection reset by peer)
[22:19:44] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[22:30:12] *** Quits: shka (~herr@109.231.62.239) (Quit: Konversation terminated!)
[22:32:57] *** Joins: lotuseater (~user@p200300e7870566004b01295534bb48e2.dip0.t-ipconnect.de)
[22:39:35] *** Joins: shka (~herr@109.231.62.239)
[22:51:00] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:57:50] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[23:17:05] *** Joins: snowyfox (~snowyfox@cpeac202e0cfd43-cmac202e0cfd40.cpe.net.cable.rogers.com)
[23:17:06] *** Quits: kstuart (~kstuart@85.203.34.2) (Remote host closed the connection)
[23:17:16] <snowyfox> hi everyone- super quick question..
[23:17:50] <snowyfox> Does a lambda expression come with an implicit block?
[23:18:38] <lotuseater> hi snowyfox :)
[23:18:45] <lotuseater> nope
[23:18:58] <snowyfox> thank you so much..!
[23:19:07] <snowyfox> Because, CLHS and my reference both didn't mention it..
[23:19:09] <lotuseater> but when you use defun
[23:19:19] <snowyfox> defun creates a block with the function name, right
[23:19:31] <lotuseater> yes :)
[23:19:40] <snowyfox> ^^~
[23:19:57] *** Parts: snowyfox (~snowyfox@cpeac202e0cfd43-cmac202e0cfd40.cpe.net.cable.rogers.com) (have a sunny day-)
[23:20:05] <lotuseater> oh that was fast
[23:27:59] <lisp123> lol
[23:28:14] <lisp123> fast learner
[23:30:12] <lotuseater> hm maybe a bit overzealous
[23:30:41] <lotuseater> i wanted to mention that LAMBDA is also no special operator
[23:31:14] <lisp123> yeah
[23:33:21] <edgar-rft> but the lambda macro expands into a form that starts with a special operator, what say you now :-)
[23:33:41] <lotuseater> haha you're right of course
[23:37:09] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:44:02] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[23:48:02] <pjb> and CL:FUNCTION is the only operator that can create closures in CL…
[23:49:00] <lotuseater> what about FLET and LABELS?
[23:49:45] <pjb> The closure is created by CL:FUNCTION. If you don't use it, no closure. 
[23:50:04] <pjb> You could just as well implement FLET and LABELS with tagbody…
[23:50:12] <lotuseater> okay I just wanted it to be explained :)
[23:50:36] <lotuseater> right it depends on the implementation
[23:50:48] <pjb> But instead they expand to a (cl:function (cl:lambda …)) somewhere, that is returned by (cl:function <local-function-name>).
[23:50:59] <lotuseater> oki
[23:53:44] <pjb> But all right, FLET LABELS and MACROLET could create a closure without going thru FUNCTION, since they're special operators.
[23:53:46] <lotuseater> so now we could as someone specific how SICL does it ^^
[23:54:04] <pjb> But you get access of those closures only thru FUNCTION.
[23:54:45] <lotuseater> I also wanted to show you that I'm thinking. :)
[23:55:03] <lotuseater> so not all hope is lost for me
[23:55:08] <pjb> which means we have (assert (let ((y 42)) (flet ((foo (x) (+ y x))) (eq (function foo) (function foo)))))
[23:55:43] <pjb> if we implemented flet with tagbody, and let function create a new closure on the spot, each call to function would produce a different closure…
[23:56:47] <lotuseater> oh noez
[23:58:13] <White_Flame> how would you implement flet with tagbody regarding recursion?
[23:58:20] <White_Flame> hmm
[23:58:33] <White_Flame> yeah it can't recurse.  labels could though
[23:58:37] <lotuseater> and then tagbody with flet!
[23:58:56] <pjb> flet is not recursive. for labels  you can have terminal call optimization or implement an explicit stack for inner recursion.
[23:59:33] <lotuseater> mine was jsut a joke of course
