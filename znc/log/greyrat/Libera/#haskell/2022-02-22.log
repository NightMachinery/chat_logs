[00:00:13] <maerwald> wai-extra seems to have something: https://hackage.haskell.org/package/wai-extra-3.1.8/docs/Network-Wai-EventSource.html
[00:00:29] <geekosaur> oh,this is like those freaks who think API is something javascript web slingers invented
[00:00:29] <maerwald> now the question is if this works with servant
[00:02:55] <maerwald> don't ask me why
[00:03:04] <maerwald> not my idea, thanks
[00:04:05] *** Quits: komikat (~komikat@183.82.154.44) (Remote host closed the connection)
[00:04:14] <freeman42x[m]> geekosaur: 2015 isomorphic javascript frameworks callback :))
[00:08:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[00:09:21] *** Joins: komikat (~komikat@183.82.154.44)
[00:10:14] *** Quits: xff0x (~xff0x@2001:1a81:5339:f000:1ec4:ce6f:8558:a9e8) (Ping timeout: 252 seconds)
[00:13:37] *** Quits: komikat (~komikat@183.82.154.44) (Ping timeout: 240 seconds)
[00:18:25] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[00:20:25] *** Joins: acidjnk (~acidjnk@p200300d0c7363f76650908051e62c7e6.dip0.t-ipconnect.de)
[00:20:56] *** Joins: xff0x (~xff0x@2001:1a81:5339:f000:1ec4:ce6f:8558:a9e8)
[00:22:03] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[00:22:17] *** Quits: benin (~benin@59.88.179.150) (Ping timeout: 240 seconds)
[00:23:29] *** Joins: dextaa_ (~dextaa@user/dextaa)
[00:23:54] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:8a6:a8d3:62c4:7875) (Ping timeout: 260 seconds)
[00:24:57] *** Joins: benin (~benin@59.88.179.150)
[00:28:57] *** Quits: briandaed (~root@109.95.142.93.r.toneticgroup.pl) (Quit: leaving)
[00:30:41] *** Joins: notzmv (~zmv@user/notzmv)
[00:34:28] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[00:38:51] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:25f4:e878:3056:b5be) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:39:55] <dvdrw> I've given my imperdicative polymorphic `map` some more thought
[00:39:57] <dvdrw> :t map
[00:39:59] <lambdabot> (a -> b) -> [a] -> [b]
[00:40:18] <dvdrw> In my case, [a] ~ [forall a. F a]
[00:40:48] <dvdrw> The idea was to preserve the (a -> b) mapping individually for each element, somehow
[00:41:10] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[00:41:11] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:25f4:e878:3056:b5be)
[00:41:33] <dvdrw> However, it becomes painfully obvious the `a` will get instantiated with `forall a. F a`, meaning the function will look like ((forall a. F a) -> G b)
[00:42:02] <dvdrw> As that inner `a` is scoped, there's no hope in bridging the (->) gap.
[00:42:40] <dvdrw> So, for any function of a type like that, wouldn't that be the same as using an existential type, but without the wrapping?
[00:43:51] *** Joins: pavonia (~user@user/siracusa)
[00:44:07] <geekosaur> generally the only way to do anything with such a value is to have a constraint on it so you can at least use the functions in that typeclass(es)
[00:44:39] *** Joins: jespada (~jespada@148.252.132.52)
[00:44:43] <geekosaur> which has its limitations, for example there's no difference between [forall a. Show a => a] and [String]
[00:45:16] *** Joins: deadmarshal (~deadmarsh@95.38.117.184)
[00:45:17] <ski> s/forall a. Show a =>/exists a. Show a *>/
[00:45:53] <dvdrw> I figured as much; it looks like it's a trade off between 'expressive' types and 'smooth interfaces' that hide the particularities
[00:46:15] <dvdrw> i.e. you'd have trouble keeping GADT type refinement and sanding it down to the same constraint(s)
[00:46:15] <ski> dvdrw : are you really sure you want `[forall a. F a]', rather than `[exists a. F a]' ?
[00:46:52] <dvdrw> ski: I'm not sure of the difference in this case
[00:47:16] <ski> it depends on what `F' is, of course
[00:47:46] <ski> but the only value of type `[forall a. Show a => a]' (e.g.), (ignoring bottoms) is `[]', the empty list
[00:48:52] <ski> (hint, there is no value which has type `a', for *all* types `a' which are instances of `Show' .. apart from bottom)
[00:49:05] <geekosaur> right, sorry, thinkoed that
[00:49:21] <geekosaur> otoh that's one reason why haskell makes it hard to make such messes to begin with :)
[00:49:34] <ski> (otoh, there are many values which has type `a', for *some* type `a' which is an instance of `Show'. iow, there are many values of type `exists a. Show a *> a')
[00:49:37] *** Quits: deadmarshal (~deadmarsh@95.38.117.184) (Ping timeout: 240 seconds)
[00:50:04] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[00:50:04] *** Joins: yauhsienhuangtw (~Yau-Hsien@61-231-19-150.dynamic-ip.hinet.net)
[00:50:06] <ski> dvdrw : perhaps you should pick some concrete example `F' that we could talk about ?
[00:51:05] <ski> <dvdrw> Given an f :: forall a. F a -> G a, and xs :: [forall a. F a]; how would I 'lift' map so as to work with a nested forall?
[00:51:50] <ski> just from reading that, i was thinking perhaps you wanted `\(xs :: forall a. F a) -> f xs  ::  (forall a. F a) -> (forall a. G a)' instead of `f :: forall a. F a -> G a'
[00:52:01] <dvdrw> My original idea was to pipe a phantom type variable (i.e. the `a' in `F a'), but have it work on heterogeneous lists.
[00:52:23] <ski> but now it sounds like you might actually want `(exists a. F a) -> (exists a. G a)' instead ? (which you can also get to, from `f :: forall a. F a -> G a')
[00:52:56] <ski> ah .. "heterogeneous lists" suggests that you are looking for existentials :)
[00:53:10] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[00:53:10] *** Quits: yauhsien_ (~Yau-Hsien@61-231-19-150.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[00:53:10] <dvdrw> That is indeed where I started :)
[00:53:16] <ski> (which ?)
[00:53:27] <dvdrw> With existentials
[00:53:49] *** Quits: c209e6dc-4d76-47 (~aditya@2601:249:4300:1296:195:dac6:592c:a55a) (Quit: Konversation terminated!)
[00:54:03] <ski> (btw, there is a difference betwee `[exists a. Show a *> a]' and `[String]' .. but the difference isn't too relevant to the discussion here)
[00:54:31] <dvdrw> Maybe it'd be best if I gave a motivating example and how I got into this mess
[00:54:43] <ski> dvdrw : seeing at least somewhat more context (of what you're trying to do), if not a concrete example of `F', would probably help
[00:56:37] <dvdrw> Imagine `F' were a GADT, with its type parameter being used to provide some assertions about how it would act; for example `F ()' would convey that there'd be a way to 'evaluate' it down to type `()'
[00:56:37] <ski> (oh, and `G', of course)
[00:57:38] <dvdrw> One of the steps could be to map `F a' to a monad `G a' whose unwrapping would evalute to that `a'
[00:58:00] <ski> unwrapping ?
[00:58:15] * ski mostly didn't understand that sentence
[00:58:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[00:58:57] <dvdrw> Well, if it were a monad like ST or State, applying the relevant `runState'
[00:59:21] <dvdrw> It limits the choice of monad to those that do have an arrow like that, though
[00:59:21] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:25f4:e878:3056:b5be) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:00:19] <dvdrw> Ultimately, the goal is to have an expression akin to `run $ foldl1 (>>) (map ftog xs)'
[01:01:11] <dvdrw> The list, `xs', would be heterogenous because the type parameter to `F' varies
[01:01:23] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[01:02:59] <ski> hm, so are you saying `F' and `G' in your case are monads ?
[01:03:09] <dvdrw> `G' is, at least
[01:03:51] <ski> i'm not sure to which extent `exists a. G a' would be preferable over `G ()'
[01:04:00] <awpr> that whole expression looks like it's trying to achieve `traverse10` of `newtype ExList f = ExList [Some f]`
[01:04:01] <awpr> https://hackage.haskell.org/package/ten-0.1.0.2/docs/Data-Ten-Foldable.html#v:traverse10_
[01:04:45] <awpr> or equivalently https://hackage.haskell.org/package/hkd-0.1/docs/Data-HKD.html#v:ftraverse_
[01:05:02] <dvdrw> awpr: that looks to be very promising, actually
[01:05:22] <Zemyla> Maybe you should turn the forall a. F a into F ().
[01:05:41] <awpr> (the main obstacle so far seems to be that you want a list of `F` elements with independent existential parameters, but none of the types being mentioned actually is that)
[01:05:46] <ski> there is no `forall a.' there, aiui
[01:06:09] <dvdrw> Zemyla: I'm interested into preserving the `a's across the mapping, is the issue, although collapsing them into a single more manageable type seems inevitable
[01:06:36] <awpr> hmm, preserving the existentials seems incompatible with trying to fold them with `>>`
[01:06:43] <ski> it's not clear to me what you mean by "preserving the `a's across the mapping", from only the small snippets and talk you've given so far
[01:07:29] *** Quits: burnsidesLlama (~burnsides@dhcp168-023.wadham.ox.ac.uk) (Remote host closed the connection)
[01:07:44] <ski> dvdrw : hm, anyway the `(>>)' suggests you're not interested in the monadic result types, right ?
[01:07:54] <dvdrw> I'm sort of hand waving to convey that, if you could 'pick' and element of the output list, and somehow reconstruct its type, it'd be a `G a' as if it were just that value applied to an `f :: F a -> G a'
[01:07:54] <ski> in which case, why not `G ()' ?
[01:08:05] <dvdrw> ...which is still more hand waving
[01:08:12] <ski> (and if `F' is also a functor, why not `F ()', too ?)
[01:08:36] <awpr> that's what an `fmap10`/`ftraverse10` style thing would do: leave the parameters untouched and map only the `f` part
[01:09:05] <ski> dvdrw : ok. but do you actually care about that `a' ? `(>>)' is going to discard most of the results, anyway
[01:09:36] <dvdrw> ski: Ideally there'd be a constraint set on `a' to where you could do something with it in the end
[01:09:52] <ski> okay
[01:10:10] <ski> but you're still only keeping the last result, right ?
[01:10:16] <dvdrw> ski: correct
[01:11:02] <dvdrw> I mean, it could be a bind that folds them, I don't think it'd be too hard to make either work starting from the other
[01:11:40] <dvdrw> awpr: `Foldable10' is a much nicer way of talking about (what I think) I want :)
[01:12:02] <dvdrw> It sounds like it approaches the same problem, just from the other end
[01:12:28] <Zemyla> Sounds like the skolem escaping is inevitable.
[01:12:52] <awpr> yeah, it seems like a good fit to me -- in particular with the talk of constraints on the `a`s, `ten` has a toolkit for talking about stuff like that too
[01:12:53] *** Joins: Akiva (~Akiva@user/Akiva)
[01:13:14] <awpr> but you can always write the same thing without a library / without dispatching things through a typeclass
[01:13:52] <dvdrw> awpr: In any case, I'll check it out to get a better apparatus for conceiving of these things -- thanks!
[01:17:27] *** Joins: spacenautx (~spacenaut@user/spacenautx)
[01:17:47] *** Joins: machinedgod (~machinedg@24.105.81.50)
[01:18:01] <ski> .. i don't really know why people keep saying `forall a. ..a..', when they mean `exists a. ..a..'
[01:19:16] <ski> (a somewhat related confusion is saying `Cxt => T' when you mean `T', given that `Cxt' holds. i've also noticed this seems to occur often. perhaps this is somehow to blame on tutorials which might mess this up ..)
[01:19:35] <awpr>  /me was just looking up the syntax used for that
[01:19:41] * awpr was just looking up the syntax used for that
[01:20:14] <awpr> (part of the reason is probably that there is no real syntax for existentials or positive-position constraints)
[01:20:14] <ski> (of course, `Cxt *> T' is yet another thing. but this mostly occurs with the `forall' vs. `exists' thing, anyway)
[01:20:30] <awpr> https://github.com/goldfirere/ghc-proposals/blob/existentials/proposals/0000-existentials.rst uses `/\` for it
[01:20:46] <ski> well .. i guess that's one reason why i keep using this pseudo-Haskell syntax to talk about it
[01:21:10] <dvdrw> I think quantification is the least rigorously explained, since it opens up more questions like kinds/sorts/universes, the finer details of the extended typechecking algorithm...
[01:21:52] <ski> hm, how does it open up that (anymore than say parameterized types does) ?
[01:22:06] <dvdrw> It goes past what's immediately useful for producing code, and it's only left to people to seek it out themselves, which leads to a weird mix of inconsistent syntax -- think calculus notation -- so most people don't bother
[01:22:07] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:106a:7188:c314:3535) (Remote host closed the connection)
[01:22:17] <awpr> `data X = forall a. X a` being the syntax for `-XExistentialQuantification` probably doesn't help the confusion
[01:22:34] <ski> yea, it doesn't help that `ExistentialQuantification' is a misnomer
[01:23:07] <ski> (i have no problem with that `data X = forall a. X a' syntax, though. although some people definitely prefer using `GADTs' syntax to express this)
[01:23:58] <dvdrw> ski: I think it's easier to imagine parametrised types to something immediately and intuitively knowable
[01:24:37] <dvdrw> Most people would *feel* how it works better than they could explain it, but it is satisfyingly logically coherent enough not to worry about particularly
[01:25:13] *** Quits: jassob (~jassob@h-155-4-71-72.A785.priv.bahnhof.se) (Quit: WeeChat 2.8)
[01:25:24] <ski> dvdrw : sure. but parameterized types naturally gives rise to polymorphism (universally quantified types). however, that doesn't necessarily imply higher order type( function)s (iow more "advanced" kinds, like `(* -> *) -> *')
[01:26:18] <awpr> https://replit.com/@AndrewPritchard/ListOfExistentials#Main.hs demonstrates a way to do what I think you're looking for without any of the HKD libraries
[01:26:29] <ski> but as soon as you start talking about parameterized types, you might, later down the road, start to want to parameterize over a *parameterized* type. usually it's only *after* that that you start to want to *quantify* over a parameterized type
[01:27:29] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:27:39] <ski> (i also dislike the term "higher-kinded type". we don't say "higher-typed values" ..)
[01:27:44] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[01:28:00] <dvdrw> ski: but we do say "higher-order functions" :)
[01:28:22] <ski> yes, and, at least i, say "higher-order type (function)"
[01:28:43] <ski> `MaybeT' is a higher-order type (function)
[01:28:47] <ski> @kind MaybeT
[01:28:48] <lambdabot> error:
[01:28:48] <lambdabot>     Not in scope: type constructor or class ‘MaybeT’
[01:28:48] <lambdabot>     Perhaps you meant ‘Maybe’ (imported from Data.Maybe)
[01:28:56] *** Joins: hays (rootvegeta@fsf/member/hays)
[01:29:15] <ski> @let import Control.Monad.Trans.Maybe
[01:29:17] <lambdabot>  Defined.
[01:29:18] <ski> @kind MaybeT
[01:29:20] <lambdabot> (* -> *) -> * -> *
[01:29:37] <dvdrw> ski: Maybe it's demographics and a particular approach to learning Haskell that's to blame, but I don't see the bulk of people reaching across the abyss to 'play with types'
[01:30:04] <ski> i just don't see why one should make the terminology any more unclear than necessary
[01:30:43] <ski> there are clear analogies between value level, and type level. why not leverage those, in the terminology, rather than use disparate terms, or even go against the grain ?
[01:30:44] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca)
[01:31:33] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:25f4:e878:3056:b5be)
[01:31:37] <dvdrw> That, I think is to blame at the lack of omniscience of individual authors shaping the literature/applied practice :P
[01:32:09] <ski> anyway, a quick way to explain that `forall' there. let's say you want to express a type of queue operations, on elements of type `a'. the operations you want to express are empty queue, enqueue, dequeue. a queue is represented by a value of some unknown implementation/state type `q', which the operations operate on
[01:32:13] <dvdrw> Jokes aside, calculus, being pretty fundamental to mathemathics, suffers from a very dodgy notation which gets abused by all those who use it
[01:32:27] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 250 seconds)
[01:32:34] <ski> so, that suggests that `Queue a' should be `exists q. (q,a -> q -> q,q -> Maybe (q,a))'
[01:33:08] <ski> er, s/Queue/QueueOps/
[01:33:27] <ski> now, imagine that `QueueOps a' will be a `data' type, with a data constructor, say `MkQueueOps'. we want it to have the signature
[01:33:43] <ski>   MkQueueOps :: (exists q. (q,a -> q -> q,q -> Maybe (q,a))) -> QueueOps a
[01:33:50] <ski> (or, if we're being more explicit
[01:33:59] <ski>   MkQueueOps :: forall a. (exists q. (q,a -> q -> q,q -> Maybe (q,a))) -> QueueOps a
[01:34:02] <ski> )
[01:34:08] *** Quits: Giovanni (~Giovanni@176.67.166.45) (Read error: Connection reset by peer)
[01:34:13] *** Joins: slowtype- (~slowtyper@2a02:214c:840d:cd00:225:64ff:feb7:4668)
[01:35:08] <ski> anyway, there's a general logical law that `(exists x. ..x..) -> ...' is equivalent to `forall x. (..x.. -> ...)' (also `... -> (forall a. ..a..)' is equivalent to `forall a. (... -> ..a..)'. these two are in some sense comparable laws)
[01:35:13] <dvdrw> Right, for any `a', and a given `q' type such that the following 'type expression' exists -- more hand waving
[01:35:13] *** Quits: slowtyper (~slowtyper@user/slowtyper) (Read error: Connection reset by peer)
[01:35:16] <ski> so, refactoring with this, we get
[01:35:17] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:39f9:90f7:922:e73b)
[01:35:28] *** Joins: Giovanni (~Giovanni@176.67.166.45)
[01:35:34] <ski>   MkQueueOps :: forall a q. (q,a -> q -> q,q -> Maybe (q,a)) -> QueueOps a
[01:35:43] <ski> or, eliding the `forall'
[01:35:45] <Zemyla> @let class Nub c where nubWith :: (Eq a, c a) => Proxy c -> [a] -> [a]
[01:35:47] <lambdabot>  Defined.
[01:35:47] <ski>   MkQueueOps :: (q,a -> q -> q,q -> Maybe (q,a)) -> QueueOps a
[01:35:57] <ski> this suggests, using `GADTs'
[01:36:03] <ski>   data QueueOps a
[01:36:05] <ski>     where
[01:36:07] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[01:36:09] <ski>     MkQueueOps :: (q,a -> q -> q,q -> Maybe (q,a)) -> QueueOps a
[01:36:23] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:36:23] <ski> or, if you want to uncurry the data constructor
[01:36:35] <ski>     MkQueueOps :: q -> (a -> q -> q) -> (q -> Maybe (q,a)) -> QueueOps a
[01:36:47] <ski> or, using the `ExistentialQuantification' syntax
[01:36:54] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[01:37:13] <ski>   data QueueOps a = forall q. MkQueueOps q (a -> q -> q) (q -> Maybe (q,a))
[01:38:08] <ski> so, bottom line is, it's `forall q.', because the data constructor (which "hides/forgets" the abstract/opaque/skolem `q') is polymorphic in `q'
[01:38:45] <dvdrw> Yes.
[01:38:46] <awpr> it's also neat to think about the fact that existentials are the negation of foralls: if you have a forall type and look at it "from the outside", the quantified variable is a slot that you can plug any type into; but from "inside" the forall looking out and trying to assign a type to the rest of the program (the context), it's existential: there's some type provided by the context that you can't know anything about
[01:39:12] <awpr> the formal version of this is the linear logic rule that existential quantification cuts against universal quantification
[01:39:21] <ski> (or, expressed otherwise, any universally quantified (over the whole signature) type variables in a data constructor acts like "expressing existentials", because of that `(exists x. ..x..) -> ...' vs. `forall x. (..x.. -> ...)' equivalence)
[01:40:33] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:39f9:90f7:922:e73b) (Remote host closed the connection)
[01:40:38] <ski> (btw, there's a reason why i said `QueueOps' and not `Queue'. this is about ADT (in the Abstract Data Type sense) vs. OO. if i had said `Queue', taking the `q' component not as "empty queue operation", but as "current queue state", then that would be OO)
[01:41:11] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:39f9:90f7:922:e73b)
[01:41:12] <dvdrw> `QueueOps' seems more natural when dealing with the reality of dragging along state yourself
[01:41:44] <ski> (ADT and OO can be seen as two different styles in which you use existentials. you can also reformulate the OO view in terms of recursive (coinductive) types, rather than existentials, and this ties in with "objects as closures")
[01:41:57] *** Quits: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com) (Ping timeout: 240 seconds)
[01:42:24] <ski> dvdrw : "Jokes aside, calculus, being pretty fundamental to mathemathics, suffers from a very dodgy notation which gets abused by all those who use it" -- i'm painfully aware of this, yea ..
[01:42:54] <ski> (i wish someone could have told me that partial vs. total derivatives was about lexical vs. dynamic scope)
[01:43:45] *** Joins: burnsidesLlama (~burnsides@dhcp168-023.wadham.ox.ac.uk)
[01:44:26] <ski> dvdrw : yea, with `QueueOps' (ADT), you open the abstraction (the existential) once, and then you carry around the bare `q's directly. with `Queue' (OO), you always keep the current state wrapped together with the methods/operations, rewrapping any time you apply an operation that generates a new state
[01:44:46] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[01:46:19] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[01:47:04] <ski> awpr : "existentials are the negation of foralls" -- i'd say they are duals of each other. `exists' and `forall' exactly swap the rôles of the caller/user/consumer and the callee/implementor/producer. one rôle gets to pick the type, the other must be prepared to handle any type, and can't assume anything about it, must treat it as abstract
[01:47:33] <dvdrw> I'm having trouble imagining `[exists a. a]' .. it'd be just `forall a. [a]' in this case, right?
[01:48:17] <ski> "but from \"inside\" the forall looking out and trying to assign a type to the rest of the program (the context), it's existential" -- i'd say that from the inside, it's a skolem. from the outside it's a placeholder / meta variable (in logic programming, this is called a logic variable, or (concurrent logic programming) a dataflow variable)
[01:49:52] <ski> when you have `length :: forall a. [a] -> Int', and you use (typically call) `length', that occurance gets specialized to having type `[_a] -> Int', where `_a' is a placeholder. but when you're type-checking the definition of `length' (with an explicit type signature), `forall a. [a] -> Int' gets turned into `[?a] -> Int', where `?a' is a skolem (aka "rigid type variable")
[01:50:07] <awpr> yeah, duals is good too.  in linear logic that shows up as the two being each other's linear negations
[01:50:15] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:106a:7188:c314:3535)
[01:50:18] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[01:50:18] <ski> yes
[01:50:21] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[01:50:52] *** Quits: burnsidesLlama (~burnsides@dhcp168-023.wadham.ox.ac.uk) (Ping timeout: 272 seconds)
[01:51:43] <awpr> skolem seems to be the functional-programming-compiler-author term for a type variable provided by an existential quantifier (or equivalently, brought into scope by a universal quantifier)?
[01:52:07] <ski> so, both universal and existential quantification both have the (opposite) meta-variable/placeholder vs. skolem qualities. (so i don't like to say that either of those are e.g. "existential"). which one you experience depends on which quantifier you use, and on which side of the caller/elimination vs. callee/introduction fence you are standing
[01:52:37] <ski> "for a type variable provided by an existential quantifier" -- no. the point is that it has just as much to do with `forall', as with `exists' !
[01:52:40] *** Quits: dy (~dy@user/dy) (Remote host closed the connection)
[01:53:04] <awpr> yeah, that's a fair point, they both show up as free and skolem in introducing/eliminating them, just in the opposite order
[01:53:17] <byorgey> awpr: yes, although the concept of Skolem variables came from mathematics
[01:53:30] <ski> `exists a. ..a..' is neutral. how you experience it depends on whether you're introducing/producing it, or eliminating/consuming it
[01:54:10] <ski> (well, Skolem was a logician)
[01:54:58] <awpr> in any case I think "the thing you have when introducing a forall or eliminating an existential" is a fair description
[01:55:07] <ski> (btw, the more common term would be "skolem constant" (and "skolem function", when it's parameterized on meta-variables), not "skolem variable")
[01:55:24] <ski> yes
[01:55:44] <awpr> I just phrased it poorly at first with "provided" and "brought into scope"
[01:55:59] *** Joins: IWantToLikeHaske (~IWantToLi@95.76.226.57)
[01:56:33] *** Joins: kilolympus (~kilolympu@vpn-fn-229.net.ed.ac.uk)
[01:58:14] *** Quits: IWantToLikeHaske (~IWantToLi@95.76.226.57) (Client Quit)
[01:58:52] <ski> (e.g. if you have `forall a. exists b. F a b', then, by axiom of choice, you can reformulate this as `exists f. forall a. F a (f a)'. if you're consuming this, you need to consume `forall a. F a (?f a)', where `?f' is a skolem function. iow, you need to consume `F _a (?f _a)', where `_a' is now a placeholder / meta-variable, that you're allowed to pick)
[01:59:10] *** Joins: HaskellSux (~HaskellSu@95.76.226.57)
[01:59:29] *** ChanServ sets mode: +o geekosaur
[01:59:48] * ski glances around nervously
[02:00:10] *** Quits: HaskellSux (~HaskellSu@95.76.226.57) (Client Quit)
[02:00:28] *** geekosaur sets mode: -o geekosaur
[02:01:35] <dvdrw> That makes sense to me :P
[02:02:31] *** Quits: jgeerds (~jgeerds@55d4b9df.access.ecotel.net) (Remote host closed the connection)
[02:02:36] * ski . o O ( <https://en.wikipedia.org/wiki/Skolem_normal_form> )
[02:02:51] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 245 seconds)
[02:03:06] *** Joins: Eyyyy (~Eyyyy@95.76.226.57)
[02:04:05] <ski> (i recall i called "axiom of choice", "skolem", before i learned it had the previous name)
[02:04:50] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:05:04] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:05:12] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:05:15] * ski . o O ( "Intensional vs. Extensional Choice" by roconnor in 2005-06-04 at <https://r6.ca/blog/20050604T143800Z.html> )
[02:05:26] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:05:33] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:05:47] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:05:55] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:05:57] *** ChanServ sets mode: +o litharge
[02:05:58] *** litharge sets mode: +b lavaman!~lavaman@98.38.249.169$##fix-your-connection
[02:06:08] *** litharge sets mode: -o litharge
[02:07:12] *** Quits: dvdrw (~dvdrw@user/dvdrw) (Quit: leaving)
[02:08:17] *** Joins: dvdrw (~dvdrw@user/dvdrw)
[02:09:45] *** Parts: Eyyyy (~Eyyyy@95.76.226.57) ()
[02:10:04] *** Joins: burnsidesLlama (~burnsides@dhcp168-023.wadham.ox.ac.uk)
[02:13:40] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[02:13:55] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:150f:8c19:261d:f4d9) (Remote host closed the connection)
[02:19:52] *** Quits: jespada (~jespada@148.252.132.52) (Read error: Connection reset by peer)
[02:20:58] *** ChanServ sets mode: +o litharge
[02:20:58] *** litharge sets mode: -bo lavaman!~lavaman@98.38.249.169$##fix-your-connection litharge
[02:21:00] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[02:21:09] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:21:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:21:32] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:21:39] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:21:54] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:22:01] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:22:15] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:22:23] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:22:37] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:22:44] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:22:58] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:23:06] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:23:20] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:23:27] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:23:41] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:23:49] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:23:55] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:39f9:90f7:922:e73b) (Remote host closed the connection)
[02:24:02] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:24:10] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:24:24] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:24:32] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:24:45] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:24:53] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:25:07] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:25:15] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:25:28] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:25:36] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:25:50] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:25:58] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:26:12] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:26:20] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:26:30] <FernandoChu[m]> Is there any negative effects of `FlexibleContexts`? If not, why is it not "on" by default? It seems very natural to me
[02:26:34] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:26:43] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:26:43] *** Quits: max22- (~maxime@2a01cb0883359800280d6109c37c5449.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[02:26:56] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:27:04] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:27:10] *** Joins: yauhsien (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[02:28:06] *** ChanServ sets mode: +o litharge
[02:28:06] *** litharge sets mode: +b *!*@98.38.249.169
[02:28:17] *** litharge sets mode: -o litharge
[02:28:42] <geekosaur> the main reason it'soff is ghc tries to stick as close as possible to the standard unless you explicitly tell it not to
[02:29:00] *** Quits: `2jt (~jtomas@210.red-88-24-179.staticip.rima-tde.net) (Remote host closed the connection)
[02:29:15] <geekosaur> (note that this is changing as of ghc 9.2 where the GHC2021 suite of extensions is on by default)
[02:29:25] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[02:30:02] <dvdrw> is GHC2021 the delayed Haskell2020?
[02:30:36] <dvdrw> or was a new report never in the works, but a set of extensions (to Haskell98?) first, and then whatever comes of it
[02:30:50] <geekosaur> sort of. the standards process is stuck anmd has been for years, so ghc is kinda taking over and proposing its own.
[02:31:37] *** Joins: jespada (~jespada@148.252.132.52)
[02:31:48] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[02:32:05] <dvdrw> oic
[02:33:07] <geekosaur> and part of why the standards process is stuck is nobody wants to formally document things like the exact behavior of type families
[02:33:38] <geekosaur> r going on between the type families camp and the functional dependencies camp
[02:33:57] <geekosaur> which means MultiParamTypeClasses can't be standardized because it needs one or the other
[02:34:16] <dvdrw> I can imagine, I think I heard someone from the committee once say Haskell2010 was a nightmare to formalise
[02:34:41] <dvdrw> C++ can probably afford it with the manpower they can acquire
[02:34:55] <dolio> I think I once saw someone say that FlexibleContexts were bad, but I don't recall the reason being very compelling.
[02:35:16] <Zemyla> Even C++ couldn't get concepts in.
[02:36:26] <dvdrw> Zemyla: C++ has been trying to get concepts ever since templates and C++11
[02:37:06] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi)
[02:38:04] *** Quits: jespada (~jespada@148.252.132.52) (Read error: Connection reset by peer)
[02:38:36] *** Quits: Ariakenom_ (~Ariakenom@h-82-196-111-63.NA.cust.bahnhof.se) (Quit: Leaving)
[02:39:45] *** Joins: alx741 (~alx741@157.100.197.240)
[02:39:49] *** Joins: jgeerds (~jgeerds@55d4b9df.access.ecotel.net)
[02:41:29] <geekosaur> hm, whoops, that line earlier got mangled
[02:41:30] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[02:41:41] <geekosaur> "andthen there's the tug of war…"
[02:43:49] <janus> dvdrw: don't they have concepts in C++20? or do they not qualify because features have been cut?
[02:44:53] <dvdrw> janus: They've implemented concepts in C++20, but it's a smaller featureset than the people pushing it wanted. It's basically syntactic sugar (and slightly better errors) for what was possible with C++17 templates
[02:45:14] <dvdrw> I couldn't list the limitations off the top of my head, but they're a bit lackluster
[02:45:38] <dvdrw> Also, last time I checked, GCC didn't check concept constraints on template variables lol
[02:47:01] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[02:48:10] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[02:50:03] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[02:50:42] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 250 seconds)
[02:51:17] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[02:57:49] *** Joins: alx741 (~alx741@157.100.197.240)
[02:58:06] *** ChanServ sets mode: +o litharge
[02:58:07] *** litharge sets mode: -bo *!*@98.38.249.169 litharge
[02:59:05] <zzz> what happened to data Scientific?
[02:59:25] <dsal> What do you mean?
[03:00:18] <zzz> nevermind, I misunderstood something I just read
[03:00:35] <dsal> Science can be confusing.
[03:00:44] *** Quits: jgeerds (~jgeerds@55d4b9df.access.ecotel.net) (Ping timeout: 252 seconds)
[03:03:53] *** Quits: cosimone (~user@93-34-132-33.ip49.fastwebnet.it) (Ping timeout: 250 seconds)
[03:04:43] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[03:04:54] *** Quits: acidjnk (~acidjnk@p200300d0c7363f76650908051e62c7e6.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[03:04:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[03:05:18] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[03:05:18] *** Joins: alx741 (~alx741@157.100.197.240)
[03:08:47] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[03:14:31] *** Quits: spacenautx (~spacenaut@user/spacenautx) (Quit: WeeChat 3.4)
[03:15:16] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:106a:7188:c314:3535) (Remote host closed the connection)
[03:15:17] *** Joins: spacenautx (~spacenaut@user/spacenautx)
[03:20:01] *** Quits: spacenautx (~spacenaut@user/spacenautx) (Client Quit)
[03:20:57] <zzz> "It does not matter how slowly you go so long as you do not stop."
[03:22:57] *** Joins: spacenautx (~spacenaut@user/spacenautx)
[03:23:58] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[03:26:56] *** Joins: alx741 (~alx741@181.199.42.143)
[03:30:54] *** Quits: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca) (Quit: Going offline, see ya! (www.adiirc.com))
[03:30:59] *** Quits: yauhsien (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[03:31:19] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[03:33:03] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[03:33:19] *** Quits: spacenautx (~spacenaut@user/spacenautx) (Quit: WeeChat 3.4)
[03:37:39] *** Joins: yrlnry (~mjd@pool-74-109-20-19.phlapa.fios.verizon.net)
[03:48:20] *** Joins: alx741 (~alx741@181.199.42.143)
[03:49:56] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[03:53:05] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[03:53:07] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[03:53:48] *** Joins: alx741 (~alx741@181.199.42.143)
[03:54:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[04:00:42] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi) (Quit: Leaving.)
[04:01:15] *** Quits: jlamothe (~jlamothe@198.251.61.229) (Ping timeout: 252 seconds)
[04:02:47] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[04:04:20] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:04:20] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:04:20] *** Joins: wroathe (~wroathe@user/wroathe)
[04:06:57] *** Joins: machinedgod (~machinedg@24.105.81.50)
[04:09:42] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:12:23] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:106a:7188:c314:3535)
[04:15:49] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:15:57] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:16:42] *** Joins: Erutuon (~Erutuon@user/erutuon)
[04:20:10] *** Joins: alx741 (~alx741@181.199.42.143)
[04:21:15] *** Joins: mason0 (~bc8147f2@cerf.good1.com)
[04:21:59] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[04:22:15] *** Joins: emf (~emf@c-73-97-137-43.hsd1.wa.comcast.net)
[04:23:28] *** Joins: mvk (~mvk@2607:fea8:5cdc:bf00::99e7)
[04:23:49] *** Joins: yauhsien (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[04:24:57] *** Joins: Erutuon (~Erutuon@user/erutuon)
[04:24:59] *** Quits: emf (~emf@c-73-97-137-43.hsd1.wa.comcast.net) (Client Quit)
[04:25:00] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[04:25:16] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[04:26:36] *** Quits: mason0 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Ping timeout))
[04:29:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[04:31:10] *** Quits: yauhsien (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Remote host closed the connection)
[04:32:31] *** Joins: yauhsien (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[04:34:29] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[04:36:14] *** Quits: andreas303 (andreas303@ip227.orange.bnc4free.com) (Quit: fBNC - https://bnc4free.com)
[04:36:46] *** Joins: andreas303 (andreas303@ip227.orange.bnc4free.com)
[04:37:34] *** Quits: yauhsien (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[04:37:45] <chronon> Wow, from a quick glance through the scrollback I can see this is where the clever people hang out. My brain melted.
[04:40:43] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:43:17] *** Quits: dvdrw (~dvdrw@user/dvdrw) (Ping timeout: 240 seconds)
[04:43:56] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[04:46:12] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[04:46:38] *** Joins: yauhsien (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[04:46:49] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:51:35] *** Joins: alx741 (~alx741@157.100.197.240)
[04:51:57] *** Quits: burnsidesLlama (~burnsides@dhcp168-023.wadham.ox.ac.uk) (Remote host closed the connection)
[04:55:51] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[04:56:18] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[04:59:09] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[05:01:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[05:03:17] *** Joins: mason0 (~bc8147f2@cerf.good1.com)
[05:07:08] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[05:07:58] <pavonia> One of our mottos is: Haskell – the c stands for "clever"
[05:10:16] *** Quits: cjb (~cjb@user/cjb) (Ping timeout: 260 seconds)
[05:11:38] *** Quits: joo-_ (~joo-_@fsf/member/joo--) (Ping timeout: 272 seconds)
[05:13:17] *** Joins: joo-_ (~joo-_@80-62-116-157-mobile.dk.customer.tdc.net)
[05:13:17] *** Quits: joo-_ (~joo-_@80-62-116-157-mobile.dk.customer.tdc.net) (Changing host)
[05:13:17] *** Joins: joo-_ (~joo-_@fsf/member/joo--)
[05:14:07] *** Joins: alx741 (~alx741@157.100.197.240)
[05:15:19] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[05:16:40] *** Joins: BrokenClutch (~pioneer@2804:d41:c291:0:6129:66a9:49aa:83e7)
[05:16:58] <BrokenClutch> Yeaay, three months doing haskell \o/
[05:18:40] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[05:24:51] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[05:29:37] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Quit: WeeChat 3.4)
[05:32:36] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[05:34:14] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[05:34:25] *** Joins: vysn (~vysn@user/vysn)
[05:36:20] <FernandoChu[m]> silly question, is there a name for constructors that have been applied to a type variable? like `[a]`, `Maybe b`, etc. Would be nice if that name also included those that have been applied to concrete types as well like `State [a] Int`, `Foo (Maybe b) [String]` etc
[05:36:39] *** Joins: alx741 (~alx741@157.100.197.240)
[05:37:09] <BrokenClutch> :FernandoChu Type constructors?
[05:37:09] <ski> what about `Either Int' ?
[05:37:41] <ski> (or `Either e', if you prefer)
[05:37:48] <FernandoChu[m]> ski: isn't that a concrete type?
[05:38:12] <FernandoChu[m]> yeah Either e would be one of those things I'm looking to name
[05:38:16] <FernandoChu[m]> oh wait no
[05:38:17] *** Quits: ridcully_ (~ridcully@p508acc81.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[05:38:31] <FernandoChu[m]> it's a partiall applied "thing idk it's name"
[05:38:39] <FernandoChu[m]> s/partiall/partially/
[05:38:46] <ski> i tend to call type expressions, having kind `*' (or `Type', if you prefer), "concrete types"
[05:39:16] <FernandoChu[m]> me too, my earlier comment was a mistake
[05:39:16] *** Quits: lavaman (~lavaman@98.38.249.169) (Read error: Connection reset by peer)
[05:39:36] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:39:58] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[05:41:35] <FernandoChu[m]> my question arises because this is what FlexibleContent/Instances seems to apply and I was writing my notes
[05:42:00] <FernandoChu[m]> the wiki calls them "arbitrary types" https://gitlab.haskell.org/haskell/prime/-/wikis/FlexibleContexts
[05:42:25] <FernandoChu[m]> which I'm not sure I like
[05:42:40] <ski> i think "arbitrary" there just means "no restriction"
[05:43:14] <ski> (or, maybe just with some few specific restrictions)
[05:43:25] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[05:44:41] <FernandoChu[m]> so many technical terms I forgot about the natural language interpretation haha
[05:44:46] <FernandoChu[m]> yeah that seems to be the case
[05:45:02] *** Quits: yauhsien (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Remote host closed the connection)
[05:46:06] *** Joins: yauhsien (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[05:47:28] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:48:47] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:25f4:e878:3056:b5be) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:51:14] *** Quits: yauhsien (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[05:52:37] *** Quits: mvk (~mvk@2607:fea8:5cdc:bf00::99e7) (Ping timeout: 240 seconds)
[05:54:21] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[05:58:02] *** Joins: alx741 (~alx741@157.100.197.240)
[05:59:27] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[06:01:10] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[06:01:41] *** Joins: Erutuon (~Erutuon@user/erutuon)
[06:05:37] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[06:06:12] *** Quits: justAstache (~justache@user/justache) (Remote host closed the connection)
[06:06:48] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[06:07:08] *** Joins: justAstache (~justache@user/justache)
[06:07:57] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[06:07:57] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[06:07:57] *** Joins: wroathe (~wroathe@user/wroathe)
[06:17:38] *** Quits: xff0x (~xff0x@2001:1a81:5339:f000:1ec4:ce6f:8558:a9e8) (Ping timeout: 260 seconds)
[06:19:09] *** Joins: xff0x (~xff0x@2001:1a81:5372:9200:5fc7:2f1:341d:525f)
[06:21:53] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:24:40] *** Joins: alx741 (~alx741@157.100.197.240)
[06:26:56] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[06:28:37] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[06:32:21] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[06:34:35] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[06:37:56] *** Joins: Erutuon (~Erutuon@user/erutuon)
[06:38:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[06:40:37] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 240 seconds)
[06:42:03] *** Joins: ridcully_ (~ridcully@p508ace91.dip0.t-ipconnect.de)
[06:45:05] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[06:50:09] *** Joins: alx741 (~alx741@181.199.42.143)
[06:51:44] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 252 seconds)
[06:52:43] *** Quits: td_ (~td@muedsl-82-207-238-047.citykom.de) (Ping timeout: 256 seconds)
[06:54:41] *** Joins: td_ (~td@muedsl-82-207-238-240.citykom.de)
[06:54:41] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[06:56:29] *** Joins: yauhsien (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[06:58:59] *** Joins: Nahra (~user@static.161.95.99.88.clients.your-server.de)
[07:01:50] *** Quits: yauhsien (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[07:05:23] *** Parts: BrokenClutch (~pioneer@2804:d41:c291:0:6129:66a9:49aa:83e7) ()
[07:06:08] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[07:07:03] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[07:09:30] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:11:32] *** Joins: alx741 (~alx741@157.100.197.240)
[07:11:42] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[07:12:32] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[07:13:14] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:14:15] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[07:14:27] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:15:11] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[07:15:48] *** Joins: yauhsien (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[07:18:42] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[07:30:24] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Remote host closed the connection)
[07:30:24] *** Quits: yauhsien (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[07:31:12] *** Joins: yauhsien (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[07:31:18] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[07:31:34] *** Joins: alx741 (~alx741@157.100.197.240)
[07:35:50] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 250 seconds)
[07:35:50] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[07:39:32] *** Joins: joegard (~joegard@179.33.119.167)
[07:40:37] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[07:41:20] *** Quits: joegard (~joegard@179.33.119.167) (Quit: Client closed)
[07:43:15] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[07:46:09] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:48:34] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[07:50:12] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[07:54:04] *** Joins: alx741 (~alx741@181.199.42.143)
[07:54:54] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[07:55:01] *** Joins: mbuf (~Shakthi@223.178.77.186)
[07:55:22] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[07:55:23] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[07:56:12] *** Quits: nehsou^ (~nehsou@50.233.120.162) (Ping timeout: 240 seconds)
[07:56:49] *** Joins: MochizukisLastTh (~Mochizuki@121-83-4-20f1.osk2.eonet.ne.jp)
[07:59:25] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[08:01:17] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[08:01:18] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[08:01:18] *** Joins: wroathe (~wroathe@user/wroathe)
[08:06:26] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[08:06:36] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[08:06:38] *** Joins: deadmarshal (~deadmarsh@95.38.117.172)
[08:15:42] *** Quits: yauhsien (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[08:16:22] *** Joins: alx741 (~alx741@181.199.42.143)
[08:21:08] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[08:21:51] *** Joins: alx741 (~alx741@157.100.197.240)
[08:24:12] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[08:26:09] *** Quits: benin (~benin@59.88.179.150) (Quit: Ping timeout (120 seconds))
[08:26:32] *** Joins: benin (~benin@59.88.179.150)
[08:27:06] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[08:33:54] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:475:42ee:cbdc:5ced)
[08:35:47] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[08:40:36] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[08:45:17] *** Joins: alx741 (~alx741@157.100.197.240)
[08:45:40] *** Joins: komikat (~komikat@183.82.154.44)
[08:47:37] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[08:47:38] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[08:47:38] *** Joins: wroathe (~wroathe@user/wroathe)
[08:49:48] *** Quits: komikat (~komikat@183.82.154.44) (Ping timeout: 240 seconds)
[08:50:25] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[08:51:51] *** Joins: komikat_ (~komikat@183.82.154.44)
[08:52:40] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[09:01:49] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[09:02:36] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[09:07:22] *** Joins: alx741 (~alx741@157.100.197.240)
[09:21:21] *** Quits: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net) (Quit: Leaving)
[09:24:38] *** Quits: komikat_ (~komikat@183.82.154.44) (Remote host closed the connection)
[09:24:50] *** Joins: komikat (~komikat@183.82.154.44)
[09:29:13] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[09:29:51] *** Joins: alx741 (~alx741@157.100.197.240)
[09:30:37] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[09:30:40] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Ping timeout: 272 seconds)
[09:31:45] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[09:32:33] *** Quits: komikat (~komikat@183.82.154.44) (Remote host closed the connection)
[09:33:07] *** Joins: komikat_ (~komikat@183.82.154.44)
[09:37:47] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Quit: Leaving)
[09:38:16] *** Quits: komikat_ (~komikat@183.82.154.44) (Ping timeout: 272 seconds)
[09:39:00] *** Quits: benin (~benin@59.88.179.150) (Ping timeout: 240 seconds)
[09:39:18] *** Joins: komikat (~komikat@183.82.154.44)
[09:39:36] *** Joins: whound (~dust@2409:4071:4e8b:a664:ed93:7b31:fb42:6202)
[09:40:12] *** whound is now known as dust__
[09:40:36] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[09:40:41] *** Joins: benin (~benin@59.88.179.150)
[09:42:42] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[09:43:17] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[09:43:48] *** Quits: komikat (~komikat@183.82.154.44) (Ping timeout: 240 seconds)
[09:45:31] *** Joins: komikat_ (~komikat@183.82.154.44)
[09:45:50] *** Quits: komikat_ (~komikat@183.82.154.44) (Remote host closed the connection)
[09:46:02] *** Joins: komikat (~komikat@183.82.154.44)
[09:46:07] *** Joins: Erutuon (~Erutuon@user/erutuon)
[09:50:22] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:50:41] *** Joins: lavaman (~lavaman@98.38.249.169)
[09:53:04] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[09:53:30] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[09:54:03] *** Quits: benin (~benin@59.88.179.150) (Ping timeout: 256 seconds)
[09:55:22] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 272 seconds)
[09:56:58] *** Joins: alx741 (~alx741@157.100.197.240)
[09:59:00] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[09:59:07] *** Joins: coot (~coot@213.134.190.95)
[10:03:16] *** Quits: xff0x (~xff0x@2001:1a81:5372:9200:5fc7:2f1:341d:525f) (Ping timeout: 245 seconds)
[10:04:20] *** Joins: xff0x (~xff0x@2001:1a81:5372:9200:8a1a:331:2fa:81ab)
[10:18:02] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[10:20:01] *** Quits: mjrosenb (~mjrosenb@pool-108-54-97-96.nycmny.fios.verizon.net) (Ping timeout: 268 seconds)
[10:20:39] *** Quits: xff0x (~xff0x@2001:1a81:5372:9200:8a1a:331:2fa:81ab) (Quit: xff0x)
[10:21:08] *** Quits: dust__ (~dust@2409:4071:4e8b:a664:ed93:7b31:fb42:6202) (Quit: Konversation terminated!)
[10:21:09] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[10:21:56] *** Joins: dust_ (~dust@2409:4071:4e8b:a664:ed93:7b31:fb42:6202)
[10:22:45] *** dust_ is now known as dust__
[10:27:09] *** Quits: yauhsienhuangtw (~Yau-Hsien@61-231-19-150.dynamic-ip.hinet.net) (Quit: Leaving)
[10:28:15] *** Joins: xff0x (~xff0x@2001:1a81:5372:9200:8a1a:331:2fa:81ab)
[10:29:02] *** Quits: sander (~sander@user/sander) (Ping timeout: 240 seconds)
[10:29:18] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[10:34:02] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[10:34:58] *** Joins: alx741 (~alx741@157.100.197.240)
[10:35:19] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[10:36:11] *** Joins: mjrosenb (~mjrosenb@pool-108-54-97-96.nycmny.fios.verizon.net)
[10:39:17] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[10:39:42] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 272 seconds)
[10:40:16] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[10:41:13] *** Joins: coot (~coot@213.134.190.95)
[10:42:41] *** Joins: yauhsien (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[10:45:01] *** Joins: vysn (~vysn@user/vysn)
[10:46:58] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[10:47:09] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[10:48:10] *** Quits: yauhsien (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[10:51:40] *** Quits: komikat (~komikat@183.82.154.44) (Remote host closed the connection)
[10:53:53] *** Joins: acidjnk (~acidjnk@p200300d0c71a321635f6942ae4ff7a88.dip0.t-ipconnect.de)
[10:56:10] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[10:57:30] *** Joins: alx741 (~alx741@157.100.197.240)
[11:02:01] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[11:03:08] *** Joins: benin (~benin@59.88.179.150)
[11:03:51] *** Quits: dust__ (~dust@2409:4071:4e8b:a664:ed93:7b31:fb42:6202) (Quit: Konversation terminated!)
[11:04:08] *** Quits: benin (~benin@59.88.179.150) (Client Quit)
[11:05:19] *** Joins: benin (~benin@59.88.179.150)
[11:05:34] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 260 seconds)
[11:07:07] *** Quits: dextaa_ (~dextaa@user/dextaa) (Read error: Connection reset by peer)
[11:07:35] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[11:08:59] *** Quits: mason0 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[11:10:25] *** Joins: dextaa_ (~dextaa@user/dextaa)
[11:10:53] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 256 seconds)
[11:12:55] *** Joins: cosimone (~user@93-34-132-33.ip49.fastwebnet.it)
[11:15:10] *** Quits: benin (~benin@59.88.179.150) (Ping timeout: 272 seconds)
[11:16:28] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:1947:6ff5:3916:a376)
[11:17:43] *** Joins: Ariakenom (~Ariakenom@2001:9b1:efe:9d00:a0f2:d28e:55b:1ed5)
[11:17:51] *** Joins: fendor (~fendor@178.115.60.54.wireless.dyn.drei.com)
[11:18:40] *** Joins: alx741 (~alx741@181.199.42.143)
[11:18:48] *** Joins: yauhsien (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[11:21:51] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:475:42ee:cbdc:5ced) (Remote host closed the connection)
[11:23:21] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[11:23:35] *** Quits: yauhsien (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[11:23:42] *** Joins: Ariakenom_ (~Ariakenom@h-82-196-111-63.NA.cust.bahnhof.se)
[11:23:48] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 240 seconds)
[11:23:52] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 256 seconds)
[11:25:02] *** Quits: Midjak (~Midjak@82.66.147.146) (Quit: Leaving)
[11:26:09] *** Joins: MajorBiscuit (~MajorBisc@c-001-029-040.client.tudelft.eduvpn.nl)
[11:27:02] *** Quits: Ariakenom (~Ariakenom@2001:9b1:efe:9d00:a0f2:d28e:55b:1ed5) (Ping timeout: 240 seconds)
[11:28:02] *** Joins: komikat (~komikat@183.82.154.239)
[11:30:03] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:32:06] *** Quits: kristjansson (sid126207@id-126207.tinside.irccloud.com) (Excess Flood)
[11:32:23] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[11:32:27] *** Joins: kristjansson (sid126207@id-126207.tinside.irccloud.com)
[11:33:59] *** Joins: neurocyte0917090 (~neurocyte@IP-213157011045.dynamic.medianet-world.de)
[11:33:59] *** Quits: neurocyte0917090 (~neurocyte@IP-213157011045.dynamic.medianet-world.de) (Changing host)
[11:33:59] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[11:36:52] *** Joins: benin (~benin@59.92.239.104)
[11:39:06] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[11:40:03] *** Joins: alx741 (~alx741@181.199.42.143)
[11:43:03] *** Joins: kuribas (~user@ptr-25vy0iagvdrvz4nz7gs.18120a2.ip6.access.telenet.be)
[11:47:27] *** Joins: chele (~chele@user/chele)
[11:48:31] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Remote host closed the connection)
[11:48:46] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[11:48:46] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[11:52:23] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:53:31] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Remote host closed the connection)
[11:54:36] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[11:55:37] *** Joins: img (~img@user/img)
[11:57:30] *** Quits: img (~img@user/img) (Client Quit)
[11:57:55] *** Joins: ccntrq (~Thunderbi@imx92-1-78-204-187-6.fbx.proxad.net)
[11:58:32] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Remote host closed the connection)
[11:58:54] *** Joins: img (~img@user/img)
[11:59:35] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[12:05:19] *** Joins: alx741 (~alx741@157.100.197.240)
[12:07:45] *** Joins: lavaman (~lavaman@98.38.249.169)
[12:09:42] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[12:10:22] *** Joins: cynomys (~cynomys@user/cynomys)
[12:10:24] *** Joins: mastarija (~mastarija@2a05:4f46:e04:6000:d8c:f8d:c71e:751e)
[12:10:42] *** Quits: fendor (~fendor@178.115.60.54.wireless.dyn.drei.com) (Remote host closed the connection)
[12:11:01] *** Joins: fendor (~fendor@178.115.60.54.wireless.dyn.drei.com)
[12:12:18] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 250 seconds)
[12:12:34] *** Joins: max22- (~maxime@2a01cb08833598000dbf298a01dd3327.ipv6.abo.wanadoo.fr)
[12:13:24] *** Quits: dextaa_ (~dextaa@user/dextaa) (Remote host closed the connection)
[12:14:36] *** Joins: vorpuni (~pvorp@2001:861:3881:c690:d322:f659:136d:eef6)
[12:14:59] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[12:19:02] *** Joins: wonko (~wjc@user/wonko)
[12:19:24] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[12:19:34] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:21:12] *** Quits: komikat (~komikat@183.82.154.239) (Remote host closed the connection)
[12:21:53] *** Joins: komikat (~komikat@183.82.154.239)
[12:22:26] *** Joins: yauhsien (~Yau-Hsien@61-231-19-150.dynamic-ip.hinet.net)
[12:25:47] *** Joins: cfricke (~cfricke@user/cfricke)
[12:26:15] *** Joins: alx741 (~alx741@157.100.197.240)
[12:29:41] *** Joins: jespada (~jespada@85.255.234.190)
[12:30:09] *** Quits: alex[m]12345 (~alexchete@2001:470:69fc:105::1:1001) (Quit: You have been kicked for being idle)
[12:40:10] *** Joins: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[12:41:07] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[12:41:26] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[12:42:41] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[12:42:58] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[12:44:18] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[12:45:06] *** Quits: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[12:47:48] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 240 seconds)
[12:49:22] <merijn> :O
[12:49:27] <merijn> https://twitter.com/GabriellaG439/status/1495957520459915266
[12:49:32] <merijn> That's genius
[12:49:45] *** Joins: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[12:50:14] *** Joins: arievw (~arievw@85.148.234.95)
[12:51:05] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[12:51:32] *** Quits: komikat (~komikat@183.82.154.239) (Remote host closed the connection)
[12:56:35] <[exa]> that's wunderbar
[12:57:07] *** Quits: arievw (~arievw@85.148.234.95) (Quit: Nettalk6 - www.ntalk.de)
[12:57:12] *** Joins: alx741 (~alx741@157.100.197.240)
[12:58:53] *** Joins: AlexNoo_ (~AlexNoo@178.34.160.240)
[12:59:25] *** Quits: shriekingnoise (~shrieking@201.231.16.156) (Quit: Quit)
[12:59:29] *** Joins: Alex_test_ (~al_test@178.34.160.240)
[12:59:32] *** Joins: AlexZenon_2 (~alzenon@178.34.160.240)
[13:01:08] *** Joins: AlexNoo__ (~AlexNoo@178.34.160.240)
[13:01:54] *** Quits: AlexZenon (~alzenon@178.34.160.240) (Ping timeout: 256 seconds)
[13:02:03] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[13:02:08] *** Joins: AlexZenon (~alzenon@178.34.160.240)
[13:02:35] *** Joins: jespada_ (~jespada@85.255.234.190)
[13:02:37] *** Quits: AlexNoo (~AlexNoo@178.34.160.240) (Ping timeout: 240 seconds)
[13:02:45] *** Quits: jespada (~jespada@85.255.234.190) (Ping timeout: 256 seconds)
[13:03:24] *** Quits: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Remote host closed the connection)
[13:03:28] *** Quits: Alex_test (~al_test@178.34.160.240) (Ping timeout: 272 seconds)
[13:03:41] *** Joins: AlexNoo (~AlexNoo@178.34.160.240)
[13:04:06] *** Quits: AlexZenon_2 (~alzenon@178.34.160.240) (Ping timeout: 260 seconds)
[13:04:10] *** Quits: Alex_test_ (~al_test@178.34.160.240) (Ping timeout: 256 seconds)
[13:04:11] *** Joins: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[13:04:26] *** Joins: Alex_test (~al_test@178.34.160.240)
[13:04:37] *** Quits: AlexNoo_ (~AlexNoo@178.34.160.240) (Ping timeout: 240 seconds)
[13:05:36] *** Quits: vorpuni (~pvorp@2001:861:3881:c690:d322:f659:136d:eef6) (Ping timeout: 250 seconds)
[13:05:45] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[13:06:09] *** Quits: AlexNoo__ (~AlexNoo@178.34.160.240) (Ping timeout: 256 seconds)
[13:06:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 252 seconds)
[13:06:36] *** Quits: acidjnk (~acidjnk@p200300d0c71a321635f6942ae4ff7a88.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[13:06:45] *** Joins: alp (~alp@user/alp)
[13:07:18] *** Joins: komikat (~komikat@183.82.154.239)
[13:09:16] *** Quits: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[13:09:45] *** Quits: AlexZenon (~alzenon@178.34.160.240) (Quit: ;-)
[13:10:21] *** Quits: Alex_test (~al_test@178.34.160.240) (Quit: ;-)
[13:11:04] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[13:11:21] *** Quits: AlexNoo (~AlexNoo@178.34.160.240) (Quit: Leaving)
[13:15:11] *** Joins: jstolarek (~jstolarek@staticline-31-183-182-85.toya.net.pl)
[13:18:28] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Quit: Leaving)
[13:18:48] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[13:19:04] *** Joins: dvdrw (~dvdrw@user/dvdrw)
[13:19:43] *** Joins: alx741 (~alx741@157.100.197.240)
[13:21:47] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:106a:7188:c314:3535) (Remote host closed the connection)
[13:22:41] *** Joins: __monty__ (~toonn@user/toonn)
[13:23:45] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[13:23:50] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[13:25:58] *** Quits: polyphem (~rod@2a02:810d:840:8754:2123:9506:671d:c7f0) (Ping timeout: 250 seconds)
[13:26:31] *** Joins: AlexZenon (~alzenon@178.34.160.240)
[13:27:03] *** Joins: polyphem (~rod@2a02:810d:840:8754:224e:f6ff:fe5e:bc17)
[13:27:26] *** Joins: Alex_test (~al_test@178.34.160.240)
[13:27:35] *** Joins: vorpuni (~pvorp@2001:861:3881:c690:d322:f659:136d:eef6)
[13:29:02] *** Quits: polyphem (~rod@2a02:810d:840:8754:224e:f6ff:fe5e:bc17) (Client Quit)
[13:31:17] *** Quits: mastarija (~mastarija@2a05:4f46:e04:6000:d8c:f8d:c71e:751e) (Ping timeout: 240 seconds)
[13:31:47] *** Joins: polyphem (~rod@2a02:810d:840:8754:224e:f6ff:fe5e:bc17)
[13:34:00] <tomsmeding> neat
[13:34:15] <dminuoso> Hah that's really something
[13:35:09] <tomsmeding> I wonder how well that scales beyond nice examples though
[13:36:22] <tomsmeding> It's nice to be able to write `sum / length` instead of `lift2 (/) sum length`, but I'd guess that you'd have <20 occurrences of this in an actual codebase
[13:36:37] <tomsmeding> (not saying it's bad: certainly nice to have)
[13:37:03] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Ping timeout: 272 seconds)
[13:37:23] *** Joins: jgeerds (~jgeerds@55d4b9df.access.ecotel.net)
[13:37:26] *** Quits: alp (~alp@user/alp) (Remote host closed the connection)
[13:37:45] *** Joins: alp (~alp@user/alp)
[13:38:09] <[exa]> I guess it could work for vectors right? "broadcasting" ops over vectors is super useful
[13:38:15] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[13:42:15] *** Joins: alx741 (~alx741@157.100.197.240)
[13:42:37] *** Quits: jgeerds (~jgeerds@55d4b9df.access.ecotel.net) (Ping timeout: 250 seconds)
[13:42:46] <merijn> tomsmeding: That's not what it's doing, though
[13:42:59] <merijn> tomsmeding: It's much more efficient than liftA2 too
[13:43:25] <merijn> the liftA2 blows up memory on big, lazy things
[13:44:48] <merijn> sum (or length, whichever is forced first) will materialise the entire thing, then it will stay alive until the other finishes evaluating and *then* can things be GCed
[13:44:53] <merijn> the fold example is incremental
[13:48:03] <tomsmeding> merijn: note that I wrote lift2, not liftA2
[13:48:04] *** Joins: ubert1 (~Thunderbi@2a02:8109:9880:303c:b499:2e2d:5a8b:934e)
[13:48:13] <tomsmeding> I know that you'd need a special combinator for folds
[13:50:53] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[13:53:12] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[13:57:37] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[13:57:46] *** Joins: AlexNoo (~AlexNoo@178.34.160.240)
[14:02:10] <tomsmeding> merijn: https://hackage.haskell.org/package/foldl-1.4.12/docs/src/Control.Foldl.html#line-291
[14:02:13] <tomsmeding> it's literally liftA2
[14:02:34] <tomsmeding> (with a well-chosen Applicative instance)
[14:04:05] <kuribas> liftA2 is constant for folds.
[14:04:13] <kuribas> it just operates on the end result.
[14:04:13] <tomsmeding> indeed
[14:04:30] <tomsmeding> I realised that after looking at the Num instance and going "wait, what? Oh, of course"
[14:05:23] <tomsmeding> [exa]: vectors are usually instances of Num precisely for that reason I think
[14:05:55] <tomsmeding> except if intended as linear algebra vectors I guess, then (*) is a bit dodgy perhaps
[14:06:25] <dvdrw> `signum' and `abs' are a bit dubious to pick an implementation for, too
[14:06:59] <tomsmeding> they are for all non-scalar stuff
[14:07:07] *** Quits: vorpuni (~pvorp@2001:861:3881:c690:d322:f659:136d:eef6) (Ping timeout: 256 seconds)
[14:07:18] *** Joins: alx741 (~alx741@181.199.42.143)
[14:07:26] <tomsmeding> matrices, polynomials
[14:08:16] <tomsmeding> hindsight says that perhaps it should have been Ring { (+), (*), (-), negate }, Ring => Num { abs, signum }
[14:08:43] <tomsmeding> though that has the downside of more verbose instance declarations
[14:08:54] <geekosaur> yet another attempt to redesign Num…
[14:08:59] <tomsmeding> :D
[14:09:06] <geekosaur> hackage has several failed attempts already
[14:09:29] <tomsmeding> you know what would be nice? the ability to give instances for a whole tree of type classes compactly in a single clause
[14:09:41] <dvdrw> https://xkcd.com/927/ :)
[14:10:00] <tomsmeding> like, instance Monad Thing where fmap = ... ; pure = ... ; (<*>) = ... ; return = ... ; (>>=) = ...
[14:10:09] <tomsmeding> bad example because this has lots of redundancy as well
[14:10:15] <geekosaur> at some point one has to accept that Num exists for programmer convenience
[14:10:33] <tomsmeding> then you could split up Num in lots of fine-grained classes, without the downside of making instance declarations much more verbose
[14:10:38] <dvdrw> tomsmeding: maybe allow for lower typeclasses to use higher typeclass functions for default implementations?
[14:10:45] <tomsmeding> and less people would have complained about FAM I guess
[14:10:47] <geekosaur> already can
[14:11:01] <dminuoso> dvdrw: that's already perfectly possible.
[14:11:05] <geekosaur> many people backform Applicative instances with <*> = `ap`
[14:11:09] <[exa]> tomsmeding: does it do the fusion though, to avoid making the intermediate vectors? for me the explicit fold there kinda materializes the efficiency expectation there
[14:11:15] <dminuoso> dvdrw: Look how default Generic implementations usually work.
[14:11:28] <dminuoso> (They dont even have to be subclasses, they can be arbitrary classes)
[14:11:35] <tomsmeding> dvdrw: key thing is DefaultSignatures
[14:11:46] <tomsmeding> though of course Functor/Applicative don't do it because legacy
[14:11:52] <dvdrw> huh, didn't know that
[14:11:57] <tomsmeding> [exa]: what's "it" you're referring to?
[14:12:10] <dminuoso> tomsmeding: Honestly I'd find it detesting if `rg "instance Functor Foo"` wouldn't be fruitful.
[14:12:12] <[exa]> tomsmeding: Num instance for vectors
[14:12:20] <tomsmeding> dminuoso: very good point
[14:12:32] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[14:12:34] <tomsmeding> [exa]: ah, but fusion is a whole separate problem from operators like these
[14:12:48] <merijn> dvdrw: You can use DefaultSignatures extension for that
[14:12:56] <[exa]> yeah, it looked to me that the fold there could give a nice hint
[14:12:57] <tomsmeding> if a user writes `map (*2) (map (+3) v)`, you probably want fusion as well
[14:13:26] <tomsmeding> so not having easy broadcasting Num operators for your vectors doesn't allow you to ignore fusion :p
[14:13:44] <merijn> dvdrw: basically lets you have a signature and default implementation that is "less general" that the normal type, see: https://github.com/merijn/validated-literals/blob/master/ValidLiterals.hs#L87-L89
[14:14:16] <dminuoso> tomsmeding: perhaps what you really want is some editor guidance. Say you let the editor know you want to write `instance Foo Monad`, and it will create a special buffer with `instance Functor where fmap = liftM; instance Applicative where pure = return; (<*>) = liftAP; instance Monad where return = ...; (>>=) = ...;`, and put your cursor directly to the definition of return
[14:14:28] <dminuoso> Or just insert it right into your haskell editor buffer
[14:14:35] <dminuoso> With HLS that should be doable
[14:14:56] <tomsmeding> dminuoso: maybe that does most of the job indeed
[14:15:59] <tomsmeding> dminuoso: I was thinking of a fragmentation of Num along the lines of this (linearity being irrelevant to the point) https://hackage.haskell.org/package/linear-base-0.1.0/docs/Data-Num-Linear.html
[14:16:31] <tomsmeding> making a new type an instance of the right stuff will be awfully verbose
[14:16:58] <dvdrw> merijn: that's a pretty cool feature
[14:17:21] <tomsmeding> editor support would be nice, but then you slowly degenerate to java-like "let's generate all the code, then it's not bad that everything is hugely boilerplaty"
[14:17:28] <dminuoso> Btw, I wish we had some way to attach metadata to constructors outside the type system.
[14:17:35] <tomsmeding> I'm not saying my multi-instance declaration is the nicest solution either though
[14:18:56] <dminuoso> It would be so neat if I could do something like `data Meta = Meta Int String; data State = Loaded {~ Meta 10 "loaded" ~} | Fixed {~ Meta 20 "fixed" ~}`
[14:19:13] <dminuoso> With that meta data being accessible in say generics or TH...
[14:19:29] <lortabac> clojure has something similar IIRC
[14:20:27] <turlando> Is there a way to import a data constructor without the record accessor functions?
[14:20:41] <dminuoso> turlando: import Foo (Foo(Foo))
[14:20:54] <dminuoso> Okay, perhaps a bit confusing with the overloaded usage of Foo here..
[14:21:05] <dminuoso> import Mod (TypeCon(DataCon))
[14:21:06] <geekosaur> actually I think no
[14:21:14] <turlando> Yeah, it's confusing and I've tried it but with no luck, let me try harder
[14:21:37] <dminuoso> geekosaur: Mmm, would that give me record accessors regardless?
[14:21:37] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[14:21:42] <geekosaur> yes
[14:21:47] <dminuoso> Uh that's surprising
[14:21:59] <geekosaur> this is why 9.2 has an extension to not generate them
[14:22:01] <turlando> nope: Not in scope: data constructor ‘Frame’
[14:22:12] <turlando> with: import Simulator.Frame (Frame(Frame))
[14:22:12] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:106a:7188:c314:3535)
[14:22:31] <geekosaur> hm, that should importboth type and data constructor
[14:22:46] *** Quits: komikat (~komikat@183.82.154.239) (Remote host closed the connection)
[14:22:49] <geekosaur> (but no control over fields)
[14:23:21] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:23:35] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[14:23:45] <geekosaur> actually, I wonder if you could export a bidirectional pattern synonym and not export the datacon itself
[14:24:01] *** Joins: komikat (~komikat@183.82.154.239)
[14:24:16] <geekosaur> you'd need to turn on the extension that lets you say `pattern Foo` in the export list
[14:24:35] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:24:45] <geekosaur> ExplicitNamespaces
[14:24:48] <turlando> True that, but seems to me a bit of overkill since I need this in a module only so far
[14:26:17] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:106a:7188:c314:3535) (Ping timeout: 240 seconds)
[14:28:36] *** Quits: foul_owl (~kerry@23.82.193.88) (Ping timeout: 256 seconds)
[14:30:03] *** Quits: komikat (~komikat@183.82.154.239) (Remote host closed the connection)
[14:30:06] <turlando> stack clean && stack build did the trick :\
[14:32:08] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[14:32:36] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[14:36:21] *** Joins: notzmv (~zmv@user/notzmv)
[14:36:21] *** Joins: komikat (~komikat@183.82.154.239)
[14:38:21] * tomsmeding is happy to not have had build caching issues yet, neither stack nor cabal
[14:38:41] *** Joins: alx741 (~alx741@157.100.197.240)
[14:41:20] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[14:43:50] *** Joins: foul_owl (~kerry@23.82.193.89)
[14:45:48] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[14:47:32] *** Joins: fendor_ (~fendor@178.165.167.221.wireless.dyn.drei.com)
[14:50:02] *** Quits: fendor (~fendor@178.115.60.54.wireless.dyn.drei.com) (Ping timeout: 250 seconds)
[14:51:03] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[14:51:18] *** Joins: ccntrq1 (~Thunderbi@2a01:e34:eccb:b060:8793:de70:3992:9c12)
[14:53:02] *** Quits: ccntrq (~Thunderbi@imx92-1-78-204-187-6.fbx.proxad.net) (Ping timeout: 272 seconds)
[14:53:03] *** ccntrq1 is now known as ccntrq
[14:53:47] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[14:54:16] *** Joins: DNH (~DNH@2a02:8109:b740:2c4:e0aa:430d:d615:45f4)
[14:59:10] *** Joins: alx741 (~alx741@157.100.197.240)
[15:01:48] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[15:01:49] *** Joins: alphabeta (~kilolympu@31.205.200.235)
[15:02:36] *** Quits: kilolympus (~kilolympu@vpn-fn-229.net.ed.ac.uk) (Ping timeout: 256 seconds)
[15:03:03] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[15:03:39] *** Joins: alx741 (~alx741@157.100.197.240)
[15:07:14] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[15:08:50] *** Quits: raym (~raym@user/raym) (Ping timeout: 256 seconds)
[15:09:40] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[15:11:03] *** Joins: pokhu (~rishi@103.206.114.112)
[15:15:22] *** Joins: raym (~raym@user/raym)
[15:18:36] <dvdrw> ski: awpr: Church-encoded constrained existential did it :) (Pretty similar to your ForSome)
[15:22:51] <ski> dvdrw : hm ?
[15:23:44] *** Joins: alx741 (~alx741@157.100.197.240)
[15:23:53] *** Joins: jm_jj (~jmjj@mobile-user-c3a5cc-243.dhcp.inet.fi)
[15:24:44] <dvdrw> ski: `(foldl1 (>>) $ map ftog) :: [exists a. Show a => F a] -> (exists a. Show a => G a)'
[15:25:04] <dvdrw> ...that should be a `(.)'
[15:25:48] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[15:26:41] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[15:26:54] <ski> s/=>/*>/
[15:27:03] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[15:27:38] <dvdrw> that's because of the existential quantifier?
[15:27:47] <ski> (yes and) no
[15:28:38] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[15:28:51] <ski> to consume a value of type `Cxt => T', you have to provide evidence for the constraint `Cxt', and then you can consume the resulting value of type `T'
[15:28:57] *** Quits: MochizukisLastTh (~Mochizuki@121-83-4-20f1.osk2.eonet.ne.jp) (Ping timeout: 256 seconds)
[15:29:28] <ski> to produce a value of type `Cxt => T', you get to assume (you will be handed) evidence for the constraint `Cxt', and then you have to produce a value of type `T'
[15:30:01] <ski> to produce a value of type `Cxt *> T', you have to provide evidence for the constraint `Cxt', and then you also have to produce a value of type `T'
[15:31:15] <ski> to consume a value of type `Cxt *> T', you will be provided/handed (you can assume) evidence for the constraint `Cxt', and then you will also be given a value of type `T' to consume
[15:31:52] <dvdrw> ah, I see
[15:31:53] <ski> `Cxt *> T' is to `Cxt => T' what `(U,V) ' is to `U -> V'
[15:32:23] <ski> `*>' is most commonly used directly inside `exists', just like `=>' is most commonly used directly inside `forall'
[15:32:36] *** Quits: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net) (K-Lined)
[15:32:36] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[15:32:47] *** Joins: burnsidesLlama (~burnsides@dhcp168-023.wadham.ox.ac.uk)
[15:32:47] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[15:33:10] <dvdrw> Do these arrows have a name?
[15:33:58] <ski> here's one way you can simulate `Cxt *> T' : `data CxtWithT = Cxt => WrapCxtWithT T'. or, using `GADTs' syntax, `data CxtWithT where WrapCxtWithT :: Cxt => T -> CxtWithT'
[15:35:06] <ski> (another way to simulate `Cxt *> T' is `forall o. (Cxt => T -> o) -> o'. this is the CPS / Church/Scott encoding)
[15:35:57] <dvdrw> Indeed that's how I've written it for my `ForSome ctx f' type
[15:36:41] <dvdrw> `forall r. (forall a. c a => tag a -> r) -> r'
[15:37:35] <dvdrw> er, ...ctx a...
[15:37:49] <ski> "Do these arrows have a name?" -- not really. the notation `*>' is something i've used for years, in here, to explain this distinction, and to be able to talk about this stuff
[15:38:36] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[15:38:49] <ski> although, it seems that the word "provide" may be useful to talk about it
[15:38:57] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[15:39:30] <ski> @hoogle Dict
[15:39:30] <lambdabot> Data.Constraint data Dict
[15:39:30] <lambdabot> Data.Constraint Dict :: a => Dict a
[15:39:30] <lambdabot> Data.Vinyl.Core data Dict c a
[15:40:26] <ski> that is `data Dict c = c => Dict', expressing `c *> ()'. which is itself one example of using `*>', not directly nested inside `exists'
[15:41:36] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 250 seconds)
[15:42:23] *** Joins: acidjnk (~acidjnk@p200300d0c71a3216f19af2eb8990af00.dip0.t-ipconnect.de)
[15:43:31] * ski . o O ( <https://hackage.haskell.org/package/constraints-0.13.3/docs/Data-Constraint.html> )
[15:46:16] *** Joins: alx741 (~alx741@157.100.197.240)
[15:47:11] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[15:52:53] *** Joins: spacenautx (~spacenaut@user/spacenautx)
[15:53:42] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[15:59:43] *** Joins: mastarija (~mastarija@2a05:4f46:e04:6000:d8cc:eac0:596a:75bb)
[16:00:30] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[16:01:36] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[16:02:05] *** Joins: coot (~coot@213.134.190.95)
[16:03:27] <ehammarstrom> Since this compiles https://paste.tomsmeding.com/3IYPsd1g would this be considered a "proof" that ((g . f) .) = (g .) . (f .)? I guess given that I trust GHC (?)
[16:04:22] *** Quits: deadmarshal (~deadmarsh@95.38.117.172) (Ping timeout: 256 seconds)
[16:04:37] <ehammarstrom> Shoot, forgot to include `f :: Int -> Bool` and `g :: Bool -> Char` in the paste
[16:04:56] *** notabled1 is now known as notableduck
[16:05:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[16:05:41] <ski> was just going to ask about those
[16:07:07] <ski> what does `(g . hb) . (f . ha)' have to do with `(g .) . (f .)' ?
[16:08:20] <ski> and you haven't really provided any argument or check that two things are equal, you've just showed that some (separate) stuff type-checks
[16:08:21] <ehammarstrom> ski: I thought of them as "hole a" and "hole b", filling in the missing args
[16:08:23] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[16:08:42] <ski>      (g .) . (f .)
[16:08:51] <ski>   =  \h -> ((g .) . (f .)) h
[16:08:59] <ski>   =  \h -> (g .) ((f .) h)
[16:09:06] <ski>   =  \h -> g . (f . h)
[16:09:40] <ski> this doesn't seem too related to your `\ha hb -> (g . hb) . (f . ha)'
[16:09:55] *** Joins: lavaman (~lavaman@98.38.249.169)
[16:11:31] <ski> (anyway, what `forall g f. ((g . f) .) = (g .) . (f .)' is really about is associativity. perhaps one could prove his as a consequence of a free theorem, hmm)
[16:11:38] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 252 seconds)
[16:11:59] *** Joins: alx741 (~alx741@157.100.197.240)
[16:12:41] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[16:14:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[16:14:20] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:15:24] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[16:15:51] *** Joins: lavaman (~lavaman@98.38.249.169)
[16:17:18] <ski> oh, just noticed your comment in the paste said `((g . f) . _) = (g . _) . (f . _)'. it's not too clear what you mean by that (although, you seem to have interpreted `(g . _) . (f . _)' as `(g . hb) . (f . ha)', but then what does those `hb' and `ha' have to do with the `h' that you get when you similarly interpret `((g . f) . _)' as `(g . f) . h' ?) in any case, it would seem to be different from your `((g 
[16:17:24] <ski> . f) .) = (g .) . (f .)' above
[16:19:02] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[16:22:07] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[16:22:12] *** Joins: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[16:22:31] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[16:23:25] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[16:24:24] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:106a:7188:c314:3535)
[16:24:35] *** Joins: deadmarshal (~deadmarsh@95.38.117.172)
[16:24:50] *** Joins: andreabedini (~andreabed@8s8kj68c1m9cwyq773h2.ip6.superloop.com)
[16:26:33] *** Quits: alphabeta (~kilolympu@31.205.200.235) (Quit: Quitting IRC :()
[16:26:45] *** Quits: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[16:26:52] *** Joins: kilolympus (~kilolympu@31.205.200.235)
[16:28:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:106a:7188:c314:3535) (Ping timeout: 240 seconds)
[16:32:14] *** Joins: alx741 (~alx741@157.100.197.240)
[16:33:41] *** Quits: xff0x (~xff0x@2001:1a81:5372:9200:8a1a:331:2fa:81ab) (Ping timeout: 245 seconds)
[16:33:50] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[16:34:31] *** Joins: xff0x (~xff0x@2001:1a81:5372:9200:6a39:7582:9b2d:4f3d)
[16:36:06] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 256 seconds)
[16:36:06] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[16:37:39] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[16:41:34] *** Quits: jespada_ (~jespada@85.255.234.190) (Ping timeout: 260 seconds)
[16:44:34] *** Quits: AlexNoo (~AlexNoo@178.34.160.240) (Quit: Leaving)
[16:44:45] *** Quits: Alex_test (~al_test@178.34.160.240) (Quit: ;-)
[16:44:56] *** Quits: DNH (~DNH@2a02:8109:b740:2c4:e0aa:430d:d615:45f4) (Ping timeout: 245 seconds)
[16:45:04] *** Quits: AlexZenon (~alzenon@178.34.160.240) (Quit: ;-)
[16:48:04] *** Joins: o-90 (~o-90@gateway/tor-sasl/o-90)
[16:50:32] *** Joins: AlexZenon (~alzenon@178.34.160.240)
[16:50:41] *** Joins: AlexNoo (~AlexNoo@178.34.160.240)
[16:52:16] *** Joins: alx741 (~alx741@157.100.197.240)
[16:52:21] *** Joins: Alex_test (~al_test@178.34.160.240)
[16:54:18] *** Quits: burnsidesLlama (~burnsides@dhcp168-023.wadham.ox.ac.uk) (Remote host closed the connection)
[16:55:01] *** Joins: nil (~user@134.209.106.31)
[16:55:37] *** Quits: xff0x (~xff0x@2001:1a81:5372:9200:6a39:7582:9b2d:4f3d) (Ping timeout: 240 seconds)
[16:55:49] <nil> It is possible to use linear-base's mutable hash map to do something like: for (i in [1..100]) { hm.insert(i, i); print(i); } ?
[16:56:43] *** Joins: xff0x (~xff0x@2001:1a81:5372:9200:4da8:4717:4e75:17ef)
[16:57:03] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[16:58:04] <nil> HashMap's constructors (empty and fromList) require the return types to be `Ur a`, so no `IO`. :-/
[16:59:11] *** Quits: o-90 (~o-90@gateway/tor-sasl/o-90) (Remote host closed the connection)
[17:00:52] *** Quits: nil (~user@134.209.106.31) (Remote host closed the connection)
[17:02:18] <merijn> possibly? seems needlesly complicated for something trivially achieved by a fold seems overkill...
[17:02:41] *** Quits: andreabedini (~andreabed@8s8kj68c1m9cwyq773h2.ip6.superloop.com) (Quit: WeeChat 3.3)
[17:03:02] *** Quits: max22- (~maxime@2a01cb08833598000dbf298a01dd3327.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[17:09:12] *** Joins: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[17:11:49] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[17:12:05] *** Quits: deadmarshal (~deadmarsh@95.38.117.172) (Ping timeout: 256 seconds)
[17:13:21] *** Quits: benin (~benin@59.92.239.104) (Quit: The Lounge - https://thelounge.chat)
[17:13:43] *** Joins: benin (~benin@59.92.239.104)
[17:14:47] *** Joins: alx741 (~alx741@157.100.197.240)
[17:18:18] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[17:19:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 250 seconds)
[17:19:20] *** Quits: komikat (~komikat@183.82.154.239) (Read error: Connection reset by peer)
[17:19:22] *** Quits: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Remote host closed the connection)
[17:19:35] *** Joins: komikat (~komikat@183.82.154.239)
[17:19:37] *** Joins: fryguybob (~fryguybob@cpe-74-67-169-145.rochester.res.rr.com)
[17:20:51] *** Quits: mastarija (~mastarija@2a05:4f46:e04:6000:d8cc:eac0:596a:75bb) (Quit: Leaving)
[17:23:34] *** Quits: acidjnk (~acidjnk@p200300d0c71a3216f19af2eb8990af00.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[17:26:09] *** Joins: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[17:26:10] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[17:26:40] *** Joins: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net)
[17:26:52] *** Quits: hololeap (~hololeap@user/hololeap) (Excess Flood)
[17:27:20] *** Joins: burnsidesLlama (~burnsides@dhcp168-023.wadham.ox.ac.uk)
[17:27:48] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[17:29:07] *** Joins: hololeap (~hololeap@user/hololeap)
[17:31:22] *** Quits: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[17:32:36] *** Quits: burnsidesLlama (~burnsides@dhcp168-023.wadham.ox.ac.uk) (Ping timeout: 240 seconds)
[17:35:39] *** Joins: bahamas (~lucian@84.232.140.52)
[17:36:24] *** Joins: alx741 (~alx741@157.100.197.240)
[17:40:15] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[17:40:41] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[17:45:30] *** Joins: deadmarshal (~deadmarsh@95.38.117.172)
[17:48:23] *** Joins: max22- (~maxime@2a01cb088335980021dd241f5bb447ef.ipv6.abo.wanadoo.fr)
[17:49:04] *** Joins: AlexNoo_ (~AlexNoo@178.34.160.252)
[17:49:32] *** Quits: deadmarshal (~deadmarsh@95.38.117.172) (Ping timeout: 240 seconds)
[17:51:28] *** Quits: Alex_test (~al_test@178.34.160.240) (Ping timeout: 256 seconds)
[17:52:02] *** Quits: AlexZenon (~alzenon@178.34.160.240) (Ping timeout: 256 seconds)
[17:52:19] *** Quits: AlexNoo (~AlexNoo@178.34.160.240) (Ping timeout: 256 seconds)
[17:53:56] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[17:53:56] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[17:53:56] *** Joins: wroathe (~wroathe@user/wroathe)
[17:54:10] *** Quits: benin (~benin@59.92.239.104) (Ping timeout: 272 seconds)
[17:54:52] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[17:55:11] *** Joins: Alex_test (~al_test@178.34.160.252)
[17:55:49] *** Joins: Alex_test_ (~al_test@178.34.160.252)
[17:55:56] *** Joins: benin (~benin@59.92.239.104)
[17:55:57] *** Joins: AlexZenon (~alzenon@178.34.160.252)
[17:56:14] *** Joins: AlexZenon_2 (~alzenon@178.34.160.252)
[17:56:21] *** Joins: shriekingnoise (~shrieking@201.231.16.156)
[17:58:44] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[17:58:55] *** Joins: alx741 (~alx741@181.199.42.143)
[17:59:37] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[18:01:46] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[18:02:24] *** Joins: alx741 (~alx741@181.199.42.143)
[18:03:41] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 272 seconds)
[18:04:08] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[18:04:25] *** Quits: AlexZenon_2 (~alzenon@178.34.160.252) (Quit: ;-)
[18:04:58] *** Quits: Alex_test_ (~al_test@178.34.160.252) (Quit: ;-)
[18:05:53] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[18:06:18] *** AlexNoo_ is now known as AlexNoo
[18:06:47] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Client Quit)
[18:06:59] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[18:10:38] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 272 seconds)
[18:11:19] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[18:12:08] *** Quits: gawen (~gawen@user/gawen) (Quit: cya)
[18:12:32] *** Joins: rtsn (~nstr@user/rtsn)
[18:15:04] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[18:17:36] *** Joins: gawen (~gawen@user/gawen)
[18:22:50] *** Joins: alx741 (~alx741@157.100.197.240)
[18:23:23] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:24:56] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[18:24:59] *** Quits: rembo10 (~rembo10@remulis.com) (Quit: ZNC 1.8.2 - https://znc.in)
[18:25:55] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[18:25:58] *** Joins: rembo10 (~rembo10@remulis.com)
[18:26:13] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:106a:7188:c314:3535)
[18:27:49] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[18:28:26] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[18:30:26] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:1947:6ff5:3916:a376) (Quit: WeeChat 2.8)
[18:30:36] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:106a:7188:c314:3535) (Ping timeout: 250 seconds)
[18:31:28] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[18:32:29] *** Joins: arjun (~arjun@user/arjun)
[18:34:05] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[18:34:22] *** Quits: arjun (~arjun@user/arjun) (Remote host closed the connection)
[18:34:31] *** Quits: wonko (~wjc@user/wonko) (Ping timeout: 245 seconds)
[18:36:12] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[18:37:43] *** Quits: komikat (~komikat@183.82.154.239) (Remote host closed the connection)
[18:37:53] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:1947:6ff5:3916:a376)
[18:39:56] *** Joins: bahamas (~lucian@84.232.140.52)
[18:43:05] *** Joins: alx741 (~alx741@157.100.197.240)
[18:44:44] *** Joins: hololeap_ (~hololeap@user/hololeap)
[18:45:24] *** Quits: mbuf (~Shakthi@223.178.77.186) (Quit: Leaving)
[18:46:22] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[18:46:22] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[18:46:26] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 256 seconds)
[18:47:55] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 240 seconds)
[18:48:38] *** Quits: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com) (Ping timeout: 272 seconds)
[18:49:34] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[18:53:46] *** Joins: komikat (~komikat@183.82.154.239)
[18:53:57] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[18:56:21] *** Quits: dibblego (~dibblego@haskell/developer/dibblego) (Ping timeout: 256 seconds)
[18:59:19] *** Joins: dibblego (~dibblego@122-199-1-30.ip4.superloop.com)
[18:59:19] *** Quits: dibblego (~dibblego@122-199-1-30.ip4.superloop.com) (Changing host)
[18:59:19] *** Joins: dibblego (~dibblego@haskell/developer/dibblego)
[18:59:22] <fendor[m]> did someone else notice that cabal's test-show-detail is ignored/missing in github actions? I thought `--test-show-details=direct` should always show the output of the test-stream...
[18:59:28] *** Joins: Sgeo (~Sgeo@user/sgeo)
[19:02:49] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[19:04:04] *** Quits: komikat (~komikat@183.82.154.239) (Remote host closed the connection)
[19:04:28] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 272 seconds)
[19:04:42] *** Joins: alx741 (~alx741@157.100.197.240)
[19:04:43] *** Joins: komikat (~komikat@183.82.154.239)
[19:04:46] *** Quits: komikat (~komikat@183.82.154.239) (Remote host closed the connection)
[19:04:59] *** Joins: komikat (~komikat@183.82.154.239)
[19:07:56] *** Quits: spacenautx (~spacenaut@user/spacenautx) (Quit: WeeChat 3.4)
[19:09:33] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[19:20:34] *** Quits: max22- (~maxime@2a01cb088335980021dd241f5bb447ef.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[19:21:14] *** Joins: max22- (~maxime@2a01cb088335980027fe609829d061d7.ipv6.abo.wanadoo.fr)
[19:27:13] *** Joins: alx741 (~alx741@157.100.197.240)
[19:27:27] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[19:28:56] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[19:29:21] *** Joins: xkuru (~xkuru@user/xkuru)
[19:29:21] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[19:29:29] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[19:30:12] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[19:30:24] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[19:31:10] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:1947:6ff5:3916:a376) (Quit: WeeChat 2.8)
[19:32:06] *** Joins: joegard (~joegard@179.33.119.167)
[19:33:00] *** Joins: zebrag (~chris@user/zebrag)
[19:34:52] *** Joins: burnsidesLlama (~burnsides@dhcp168-023.wadham.ox.ac.uk)
[19:37:09] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 256 seconds)
[19:39:00] *** Quits: dibblego (~dibblego@haskell/developer/dibblego) (Ping timeout: 240 seconds)
[19:39:18] *** Joins: jespada (~jespada@85.255.234.190)
[19:40:38] *** Quits: burnsidesLlama (~burnsides@dhcp168-023.wadham.ox.ac.uk) (Ping timeout: 252 seconds)
[19:42:31] *** Joins: dibblego (~dibblego@122-199-1-30.ip4.superloop.com)
[19:42:31] *** Quits: dibblego (~dibblego@122-199-1-30.ip4.superloop.com) (Changing host)
[19:42:31] *** Joins: dibblego (~dibblego@haskell/developer/dibblego)
[19:43:28] *** Quits: joegard (~joegard@179.33.119.167) (Quit: Client closed)
[19:47:29] *** Joins: alx741 (~alx741@157.100.197.240)
[19:51:21] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[19:51:54] *** Joins: burnsidesLlama (~burnsides@dhcp168-023.wadham.ox.ac.uk)
[19:52:36] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 240 seconds)
[20:02:03] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[20:02:17] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[20:07:30] *** Joins: alx741 (~alx741@157.100.197.240)
[20:08:57] *** Joins: dust_ (~dust@2409:4071:4e8b:a664:ed93:7b31:fb42:6202)
[20:10:42] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[20:12:59] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[20:14:01] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[20:15:12] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:106a:7188:c314:3535)
[20:17:06] *** Quits: komikat (~komikat@183.82.154.239) (Read error: Connection reset by peer)
[20:17:24] *** Joins: komikat (~komikat@183.82.154.239)
[20:17:57] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[20:18:37] *** Quits: Benzi-Junior (~BenziJuni@dsl-149-66-61.hive.is) (Ping timeout: 240 seconds)
[20:20:26] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 260 seconds)
[20:20:36] *** Quits: ph88 (~ph88@ip5f5af71f.dynamic.kabel-deutschland.de) (Quit: Leaving)
[20:24:12] *** Joins: Vajb (~Vajb@2001:999:274:c862:3b86:e1e1:5bff:355e)
[20:24:23] <kronicma1> hey folks, does anyone know what the proper term is for a freer/operational monad where all Return/Pure and Bind/Impure are defined in the same gadt as the instructions?
[20:24:23] <fendor[m]> I forgot, does dropping support for a ghc version require a major version bump?
[20:24:54] <kronicma1> rather than defining the instructions in a functor and having FFree/Operationl be polymorphic over functors and having Return:: a -> FFree f a and such
[20:27:01] <ski> (s/polymorphic/parametric/)
[20:27:21] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[20:27:43] <kronicma1> oops thanks ski
[20:28:52] <kronicma1> i've seen the technique a lot in various haskell and ocaml libraries but not sure if it has it's own name besides freer/operational monads (which are slightly different cause of the separation)
[20:29:07] *** Joins: alx741 (~alx741@181.199.42.143)
[20:29:17] *** Quits: cfricke (~cfricke@user/cfricke) (Ping timeout: 256 seconds)
[20:29:21] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[20:31:19] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[20:31:32] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[20:32:26] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[20:33:18] <ski> kronicma1 : "deep embedding" of eDSL might be slightly relevant
[20:33:35] *** Quits: Vajb (~Vajb@2001:999:274:c862:3b86:e1e1:5bff:355e) (Ping timeout: 256 seconds)
[20:34:07] <ski> (note that if you want it to be a monad, then it really should be an abstract data type (so that you can simulate the appropriate quotient of the representation data structure))
[20:35:08] <ski> (an alternative is to fuse `Bind' with the primitive operations. or possibly to go CPS, which is close)
[20:36:28] <turlando> I've a question about style/architecture. I'm implementing a discrete event simulator. Right now I ask the user to implement a function that takes the current state, an incoming event to produce the resulting state. I have a function that folds over the events with the state transition function to produce the final result. So far so good. Now I want the user to be able to schedule or unschedule events from within the state transition function and I'm 
[20:36:28] <turlando> not sure what's the cleanest approach. I'm thinking of changing the state transition function so that it gets an "environment" (state + future events) and produces an "environment", coupling it with functions to manipulate it to schedule events and updating the state. What do you think?
[20:37:14] <lyxia> kronicma1: isn't that Fix (for example in data-fix)
[20:37:38] <ski> i think kronicma1 also wanted the recursion baked in
[20:39:17] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:106a:7188:c314:3535) (Remote host closed the connection)
[20:41:25] *** Joins: CATS (~apic@brezn2.muc.ccc.de)
[20:41:46] <kronicma1> lyxia, I don't think that's it
[20:41:56] <kronicma1> Here's an example of what I'm talking about: https://github.com/s-zeng/haskell-monads-showcase/blob/master/app/DiskFS.hs#L223
[20:42:09] <c_wraith> turlando: from the point of view of your interface, isn't that all just a state?
[20:42:34] <c_wraith> turlando: like, why does it need to change at all to accommodate that use pattern?
[20:42:36] <kronicma1> You can see how it has the bind and pure baked in rather than the normal operational/ffree way of separating those two off into a different gadt
[20:43:17] <lyxia> I see, yeah Fix still keeps the "Bind" separate.
[20:43:40] <ski>   BindTryCreateFile :: String -> String -> Simulator a -> Simulator a  -- &c.
[20:44:16] <turlando> c_wraith because the "client" right now has no notion of the event list (which is an opaque type being a priority lists of client-defined events)
[20:45:22] <lyxia> I don't think it has a dedicated name, IMO it's still the free/operational monad approach even if you don't get a standalone type to give it the same name.
[20:45:25] <ski>   BindTryCreateFile f s c >>= k = BindTryCreateFile f s (c >>= k)
[20:45:48] <ski>   tryCreateFile f s = BindTryCreateFile f s (Return ())
[20:46:21] <ski> (s/Return/Pure/, i suppose)
[20:46:36] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[20:47:42] <ski> but you could also go `newtype Simulator a = MkSimulator ((a -> Action) -> Action)', where `data Action = TryCreateFile String String Action | ...', which is the CPS
[20:47:59] <c_wraith> turlando: ah. I think I'd need to see a much more detailed breakdown to really understand. But I can think of a few different directions you could go, like using a sort of Has-pattern for the state, or registering clients with an update function that lets them operate only on portions of the total state. There are a lot of other options available as well, depending on details
[20:48:25] <ski> (you could include a `Result r' alternative in `Action r', and do `forall r. (a -> Action r) -> Action r', if you wanted to be able to export a final result)
[20:48:46] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[20:49:22] *** Joins: alx741 (~alx741@157.100.197.240)
[20:50:05] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[20:51:48] <turlando> c_wraith thank you, but there might be a misunderstanding: I call "clients" what is using the interface, namely just a typeclass as of now. So I'm not sure about the registering thing
[20:52:16] * turlando is ski is talking to me
[20:52:26] <turlando> s/is/is not sure/
[20:53:06] *** Quits: ajb_ (~ajb@cupid.whatbox.ca) (Remote host closed the connection)
[20:53:35] <ski> turlando : i was in the kronicma1 conversation
[20:53:49] * ski calls the `/me' police
[20:54:22] <turlando> Sorry, the 'Simulator a' caught my attention
[20:54:42] <ski> nw. it was in the example kronicma1 linked to
[20:55:01] <ski> (also, i'm not sure what you mean by "unschedule events")
[20:55:01] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[20:55:45] *** Quits: ubert1 (~Thunderbi@2a02:8109:9880:303c:b499:2e2d:5a8b:934e) (Remote host closed the connection)
[20:56:36] <turlando> Just removing an event from the future event list, actually I'm not even sure it has an use case, I'm more interested in the scheduling part
[20:56:50] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[20:57:22] <c_wraith> I think you're making things too complicated by thinking of it as something outside of the state
[20:57:34] <c_wraith> It is quite literally part of the state
[20:58:02] <ski> at least it could be
[20:58:30] <turlando> So you suggest to make it part of non-user-defined state, right?
[20:58:45] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[20:58:58] <c_wraith> Well, make part of the state user-defined
[21:00:04] <c_wraith> But really, this whole thing needs code - at least type signatures.  That would make the conversation a lot more useful.
[21:00:28] <c_wraith> Maybe you want a data type like Mealy which closes over local state.
[21:00:49] <c_wraith> Maybe you want the global state augmented
[21:01:20] <c_wraith> There are just too many degrees of freedom in text.
[21:01:57] *** Joins: econo (uid147250@user/econo)
[21:03:50] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[21:03:55] <turlando> I can show you part of the thing. For instance the simulation interface https://github.com/turlando/discrete-event-simulator/blob/master/src/Simulator.hs#L12-L17
[21:05:31] *** Joins: bahamas (~lucian@84.232.140.52)
[21:05:39] <ski> oh, you also had something called `Simulator' there :)
[21:05:47] <ski> (er, `Simulation')
[21:05:50] <turlando> :)
[21:06:00] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:06:06] <turlando> Here is an example "client" https://github.com/turlando/discrete-event-simulator/blob/master/src/Simulator/Example/Server.hs
[21:06:30] <turlando> (just simulating a single threaded server, again, confusing naming)
[21:07:56] <ski> oh, `CalendarEvent event' is a type synonym
[21:08:10] <ski> (or family, i guess ?)
[21:08:38] <ski> incorrect `Show' instances detected
[21:08:45] <turlando> Yes, consisting of the discrete time instant and the user-defined event. And they're collected into a Calendar type, which is basically a priority list
[21:08:51] *** Joins: Vajb (~Vajb@2001:999:274:c862:3b86:e1e1:5bff:355e)
[21:09:09] <turlando> (the calendar is the future event list I mentioned above)
[21:09:58] <turlando> So yeah, I'm not sure what's the most idiomatic way to implement adding new events from within the transition function or if it's a good idea at all
[21:10:42] <c_wraith> ok, so after reviewing most of the code there - why is Simulation a class at all?
[21:11:38] <ski> turlando : do you have multiple instances of `Simulator' ? do you have any operations which are polymorphic over `Simulator' instances ?
[21:11:40] *** Joins: alx741 (~alx741@157.100.197.240)
[21:12:01] <c_wraith> yeah, the same question ski has. :)
[21:12:10] <ski> turlando : anyway, please don't abuse `Show' for custom pretty-printing
[21:12:17] <turlando> The run function in the Simulator module is polymorphic over Simulation
[21:13:03] <c_wraith> But why is it a class?
[21:13:14] <turlando> ski sorry, as you can see it's a quick and dirty thing as of now, I want to fix it when I get the Simulator design right, it just use that show to print the result in a eye-scanning-friendly manner
[21:13:15] *** Quits: Vajb (~Vajb@2001:999:274:c862:3b86:e1e1:5bff:355e) (Ping timeout: 256 seconds)
[21:13:25] <ski> could `Simulation' be a record ?
[21:14:15] <turlando> Why do you suggest to change it to a record?
[21:14:18] <ski> turlando : well, from that response, hopefully you're at least aware that you're not supposed to use `Show' like that (although perhaps not aware of why)
[21:14:54] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[21:15:06] <c_wraith> because classes tie behavior to types. You can't change behavior without changing types. With a record of functions, you can change behavior without changing types.
[21:15:39] <ski> (or, if you don't really need multiple instances at all, you could directly use the implementation (or maybe use something like Backpack, which would give another way to swap out different implementations, although at compile-time))
[21:16:03] <c_wraith> If you keep going in that direction, you eventually end up with a type kind of like Mealy.  Or maybe Fold.
[21:16:06] <ski> what c_wraith just said can be a pro, as well as a con, depending on what you're after
[21:16:23] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:18:18] <turlando> First of all, thank you a lot for the effort you're putting into this. Secondly, I'm not sure I'm understanding everything. Could you elaborate a bit more the "change behavior without changing types" thing please?
[21:18:45] *** Quits: dust_ (~dust@2409:4071:4e8b:a664:ed93:7b31:fb42:6202) (Quit: Konversation terminated!)
[21:20:05] <turlando> The Server's State and Event are supposed to have a single behavior over the simulation, so I thought a class would be a good fit so that I also handling the "running" bits externally, but I think I'm missing the point
[21:20:19] <turlando> s/I also/I also can/
[21:20:28] <turlando> s/handling/handle/
[21:20:35] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[21:20:57] *** Quits: MajorBiscuit (~MajorBisc@c-001-029-040.client.tudelft.eduvpn.nl) (Ping timeout: 240 seconds)
[21:21:11] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[21:21:24] <romesrf> hello, I'm running quickcheck with tasty but I don't get the falsifiable counter example
[21:21:35] <romesrf>  *** Failed! Falsified (after 1 test):
[21:21:37] <romesrf>         Use --quickcheck-replay=805757 to reproduce.
[21:22:04] <romesrf> I'm using cabal, how would I run the tests and output the counter example?
[21:22:44] <romesrf> I've also seen --quickcheck-verbose mentioned online -- but I don't know where to pass the flags 
[21:22:46] <sclv> you can run the test executable directly. 
[21:22:59] <sclv> its under dist-newstyle and the "list-bin" command will find it
[21:23:58] *** Quits: polyphem (~rod@2a02:810d:840:8754:224e:f6ff:fe5e:bc17) (Quit: WeeChat 3.4)
[21:24:06] <romesrf> Just did, but unfortunately I still get no counter example 
[21:24:49] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 256 seconds)
[21:24:51] <romesrf> the test is Gen Bool, and I'm using Test.Tasty.Quickcheck.testProperty
[21:25:38] <sclv> running it directly lets you pass the flags more easily, is why i suggested
[21:25:57] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[21:26:08] <romesrf> oh!
[21:26:20] <c_wraith> turlando: can you imagine ever wanting to transform an existing Simulation?  like say...  filterEvents :: (event -> Bool) -> Simulation state event result -> Simulation state event result
[21:26:22] <romesrf> thank you :)
[21:26:28] <sclv> you can even run it with --help to get a pretty good listing of what the options are
[21:26:35] *** Joins: jao (~jao@68.235.43.174)
[21:26:40] <romesrf> sclv: that did it, ty
[21:26:51] <ProfSimm> Why have both do notation and >>
[21:27:15] <ski> turlando : if you have `run :: Simulation state event result -> state -> Calendar event -> (result,[Frame state event])', using `data Simulation state event result = MkSimulation {transition :: state -> CalendarEvent event -> state,result :: [Frame state event] -> result}', then you can pass different records of type `Simulation State Event Result' to `run', without having to change to different state, 
[21:27:21] <ski> event, or result types
[21:27:31] <c_wraith> ProfSimm: sometimes it's easier to not have a lot have a lot of nested infix applications
[21:27:55] *** Joins: jlamothe (~jlamothe@198.251.61.229)
[21:28:04] <ski> (whether that would be desirable or not is a different question)
[21:28:04] <ProfSimm> c_wraith: if we wrap do {} around >> application and replace >> with ; it's the same source
[21:28:14] <c_wraith> ProfSimm: also, do notation adds sugar for more than (>>)
[21:28:30] <ProfSimm> Does it
[21:28:33] *** Quits: arcadiancomp (~anon626@96-91-245-193-static.hfc.comcastbusiness.net) (Quit: Leaving)
[21:29:05] <c_wraith> :t \f mx my -> do { x <- mx ; y <- my ; f x y } -- ProfSimm 
[21:29:06] <lambdabot> Monad m => (t1 -> t2 -> m b) -> m t1 -> m t2 -> m b
[21:29:11] *** Joins: dalek_caan (~Thunderbi@109.252.124.86)
[21:29:27] <dolio> @undo do { x ; y ; z }
[21:29:27] <lambdabot> x >> y >> z
[21:29:44] <ski> @undo do { x <- mx ; y <- my ; f x y }
[21:29:44] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[21:29:44] <lambdabot> mx >>= \ x -> my >>= \ y -> f x y
[21:29:54] <ProfSimm> Thanks
[21:30:06] <c_wraith> ProfSimm: also, that assertion isn't true the instant any of your statements involve infix operators with lower precedence than (>>)
[21:30:38] <ski> @undo do {x <- mx; let {y = ey}; Just z <- mz; f x y z}
[21:30:39] <lambdabot> mx >>= \ x -> let { y = ey} in mz >>= \ a -> case a of { Just z -> f x y z; _ -> fail ""}
[21:31:05] <turlando> c_wraith: no, but I might need to run the simulation with different conditions (e.g. terminate at a given Instant)
[21:31:38] <ski> @undo [f x y z | x <- xs,let y = e,Just z <- mzs,p x y z]
[21:31:38] <lambdabot> concatMap (\ x -> let { y = e} in concatMap (\ a -> case a of { Just z -> if p x y z then [f x y z] else []; _ -> []}) mzs) xs
[21:31:47] <turlando> ski: I'm tryinf to figure out the implications of that
[21:31:54] *** Joins: alx741 (~alx741@157.100.197.240)
[21:32:14] <ski> turlando : well, you lose the "unique-implementation-per-type", and also the ability to have FDs
[21:33:35] <turlando> I'm not sure it's a great loss, but from what I imagine, it makes sense to only have a single implementation per (State, Event, Result) triplet. I'm trying to imagine when it might not be the case
[21:33:47] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[21:34:26] *** Joins: emf (~emf@c-73-97-137-43.hsd1.wa.comcast.net)
[21:35:00] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[21:35:52] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[21:37:03] <ski> i guess we're still also wondering if you have multiple instances of `Simulation' in mind at all
[21:38:32] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[21:39:26] <turlando> ski: yes in the sense that in the same codebase I might implement different simulations and no in the sense that usually you're using a single simulation at any given moment
[21:39:32] <turlando> Not sure if it answers the question though
[21:40:35] <ski> and you'd want to share code (more than `run') that's polymorphic over that ?
[21:41:35] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 256 seconds)
[21:44:04] *** Parts: dalek_caan (~Thunderbi@109.252.124.86) ()
[21:44:33] <turlando> Right now as an example I can definitely think of another function: runUntil that takes an upper bound Instant
[21:44:39] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[21:45:25] <turlando> (I'm not trying to justify my design choises, I'm trying to understand what is wrong and why)
[21:47:59] *** Joins: Akiva (~Akiva@user/Akiva)
[21:48:51] <ski> well .. i'm not sure there needs to be something wrong with your design. however, newbies to type classes (expecially if they have prior exposure to OO) tend to often misuse (and overuse) them
[21:49:24] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[21:49:48] <ski> @where existential-antipattern
[21:49:49] <lambdabot> "Haskell Antipattern: Existential Typeclass" by Luke Palmer at <http://lukepalmer.wordpress.com/2010/01/24/haskell-antipattern-existential-typeclass/>
[21:50:07] <ski> is somewhat related (though a more advanced example of misuse/overuse)
[21:50:18] <ski> (not that there's anything wrong with existentials, per se)
[21:51:28] *** Joins: analognoise (~analognoi@185.202.221.26)
[21:53:21] <turlando> Thank you a lot ski, I will read it now. Do you think that choosing typelcasses over records can have implications on how I can implement the missing feature I was talking about before, namely scheduling new events from within the simulation?
[21:54:27] *** Joins: alx741 (~alx741@157.100.197.240)
[21:54:45] <dolio> Personally, I think that article is over-cited. But I haven't been paying close attention to what's being done in this case.
[21:55:43] *** Joins: cfricke (~cfricke@user/cfricke)
[21:56:56] <ehammarstrom> ski: Regarding the ((g . f) . _) = (g . _) . (f . _) earlier, a haskell program that reduces both of them to the same type (without executing it) isn't that a proof of some equality? Or would I have to explicitly have an "equality"-check in the type level? Here's the paste for reference: https://paste.tomsmeding.com/Fa1LgtV7
[21:57:21] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[21:57:57] *** Joins: alx741 (~alx741@157.100.197.240)
[22:00:41] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[22:01:02] *** Joins: deadmarshal (~deadmarsh@95.38.119.78)
[22:02:04] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[22:02:22] *** Joins: Guest85 (~Guest85@134.101.5.46)
[22:02:24] *** Quits: Guest85 (~Guest85@134.101.5.46) (Write error: Broken pipe)
[22:03:23] *** Joins: Midjak (~Midjak@82.66.147.146)
[22:04:04] <ski> turlando : the existential thing was mostly an aside. you're not doing anything existential, that i can see
[22:04:45] <ski> turlando : it's still unclear to me what you want from this new event scheduling, how you want to structure it
[22:05:15] *** Joins: Guest68 (~Guest68@134.101.5.46)
[22:05:37] *** Quits: deadmarshal (~deadmarsh@95.38.119.78) (Ping timeout: 256 seconds)
[22:06:14] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 272 seconds)
[22:07:00] *** Joins: alp (~alp@user/alp)
[22:07:11] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[22:07:25] <ski> ehammarstrom : `False' and `True' have the same type, but are not equal. perhaps you could argue something from free theorems / parametricity, though. however, your `hb' is irrelevant (a misunderstanding)
[22:09:10] <turlando> ski: honestly, I have no idea other than what I proposed before (changing the state transition function so that it gets an "environment" (state + future events) and produces an "environment", coupling it with functions to manipulate it to schedule events and updating the state) or changing the state transition function adding another parameter (the calendar) and making it return (newstate, newcalendar)
[22:11:48] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[22:12:40] *** Joins: vysn (~vysn@user/vysn)
[22:13:18] <ski> where do these "future events" come from ?
[22:13:22] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[22:14:22] <turlando> ski: either from a user defined list or from a randomly generated one, in both cases they end up in the Calendar type
[22:15:30] <ski> but they could also come from transitions on earlier events scheduling more events ?
[22:16:11] *** Quits: nek0 (~nek0@nek0.eu) (Quit: The Lounge - https://thelounge.chat)
[22:16:11] *** Joins: deadmarshal (~deadmarsh@95.38.119.78)
[22:16:11] <ski> do you want the transition for an event to be able to see other (presumably only future ?) events ? change (e.g. remove) them ?
[22:16:57] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:283e:efa7:e0c6:e848)
[22:17:33] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[22:18:06] *** Quits: jao (~jao@68.235.43.174) (Remote host closed the connection)
[22:18:44] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[22:18:59] *** Joins: jao (~jao@68.235.43.174)
[22:19:02] *** Joins: alx741 (~alx741@157.100.197.240)
[22:19:17] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 240 seconds)
[22:21:35] <turlando> ski: Sorry for not mentioning it in my previous message, I was just referring to the current state of the code. Yes, an event might be depending on another event, and specifically the happening of a certain event might cause the scheduling of another event in the future. E.g. a system detects a failing component and schedules the replacement of it in the future. Regarding your last question: I'm not sure if I want the transition to be able to see future
[22:21:35] <turlando>  events; it might be handy but I don't have an use case for it right now. Regarding removing events: initially I didn't want to permit it, but since I allow to add new events, it might make sense to allow the removal too
[22:21:51] *** Joins: norg[m] (~norgmatri@2001:470:69fc:105::1:c809)
[22:22:16] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[22:24:51] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[22:27:31] <maerwald> anyone ever used Database.PostgreSQL.Simple.Notification successfully?
[22:27:47] <ski> it seems to me it's probably be easier to reason about the event scheduling, if they can't see (or even change/retract) other scheduled events
[22:28:02] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:436f:e6b2:c8c4:a5a1) (Ping timeout: 240 seconds)
[22:28:23] <ski> (just because you can add doesn't mean it would have to make sense to remove, imho)
[22:28:36] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[22:28:48] * ski was reminded of simulators for VHDL
[22:29:25] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Ping timeout: 256 seconds)
[22:29:26] <turlando> ski: I just noticed another problem: if the scheduling of a dependent event is randomic, as in I might need to sample from a random distribution, the transition function might depend on the Random monad (?), and my signature no longer works
[22:30:04] *** Quits: jespada (~jespada@85.255.234.190) (Read error: Connection reset by peer)
[22:30:34] *** Joins: dextaa_ (~dextaa@user/dextaa)
[22:31:31] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:fb55:f4b:9349:d06d)
[22:31:34] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 272 seconds)
[22:36:47] *** Quits: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com) (Ping timeout: 256 seconds)
[22:36:50] <ski> (i guess i was thinking, "an event might be depending on another event", depending in the sense of another event scheduling it, or in the sense of the transition of the first event depending on whether it can see the other event being scheduled)
[22:37:27] <ski> .. so, i'm still not sure what you intend by "dependent event"
[22:37:41] *** Joins: polyphem (~rod@2a02:810d:840:8754:224e:f6ff:fe5e:bc17)
[22:38:28] *** Joins: Erutuon (~Erutuon@user/erutuon)
[22:39:03] *** Joins: alx741 (~alx741@157.100.197.240)
[22:39:29] *** Joins: nek0 (~nek0@nek0.eu)
[22:41:10] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[22:45:05] *** Quits: Ranhir (~Ranhir@157.97.53.139) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[22:46:04] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[22:46:08] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[22:47:30] *** Joins: vicfred (~vicfred@user/vicfred)
[22:48:34] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[22:50:39] *** Parts: pokhu (~rishi@103.206.114.112) ()
[22:51:48] *** Quits: deadmarshal (~deadmarsh@95.38.119.78) (Ping timeout: 240 seconds)
[22:54:37] *** Joins: bahamas (~lucian@84.232.140.52)
[22:57:44] <turlando> As you said ski: "depending in the sense of another event scheduling it"
[22:58:00] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[22:59:02] *** Joins: coot (~coot@213.134.190.95)
[22:59:26] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 272 seconds)
[22:59:48] <Zemyla> turlando: Can you use the IO monad and a RandomGen IOVar?
[23:01:22] <turlando> Zemyla why an IOVar?
[23:04:27] *** Quits: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net) (Remote host closed the connection)
[23:04:32] *** Joins: alx741 (~alx741@181.199.42.143)
[23:04:42] *** Joins: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net)
[23:05:26] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:05:26] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:05:26] *** Joins: wroathe (~wroathe@user/wroathe)
[23:10:18] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[23:11:10] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[23:12:51] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 245 seconds)
[23:15:14] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:16:27] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[23:16:31] *** Lord_of_Life_ is now known as Lord_of_Life
[23:17:42] *** Quits: fendor_ (~fendor@178.165.167.221.wireless.dyn.drei.com) (Remote host closed the connection)
[23:20:14] *** Quits: jm_jj (~jmjj@mobile-user-c3a5cc-243.dhcp.inet.fi) (Quit: Leaving)
[23:23:56] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[23:26:05] *** Quits: cfricke (~cfricke@user/cfricke) (Ping timeout: 256 seconds)
[23:26:37] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[23:27:59] *** Joins: alx741 (~alx741@157.100.197.240)
[23:31:00] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[23:33:23] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[23:34:06] <ProfSimm> Isn't it a flaw to allow a Map to be converted toList, when it's not a list
[23:34:24] <ProfSimm> Makes all types kinda blurry in terms of semantics
[23:34:27] <dolio> Why?
[23:34:29] *** Joins: bahamas (~lucian@84.232.140.52)
[23:34:42] <ProfSimm> dolio: well what's the order of items in a map
[23:35:06] <dolio> For Data.Map, it's the ordering on the keys.
[23:35:26] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[23:35:32] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 272 seconds)
[23:35:51] <ProfSimm> dolio: what is that ordering
[23:35:55] <monochrom> Is it also a flaw to convert Maybe to list?
[23:36:15] <ProfSimm> monochrom: well it is a list
[23:36:18] <dolio> It's what's defined in the Ord type class that most Data.Map functions depend on.
[23:37:13] *** Joins: juhp (~juhp@128.106.188.82)
[23:37:35] <byorgey> ProfSimm: Data.Map is an ordered map, just like e.g. TreeMap in Java, if you're familiar with that
[23:37:42] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[23:38:05] <ProfSimm> So what is an unordered map
[23:38:28] <ProfSimm> I mean OMap is ordered, I thought.
[23:38:31] <ProfSimm> Data.Map.Ordered
[23:38:34] <byorgey> I would have some sympathy for the argument that you should not be able to convert e.g. a HashMap to a list, though in practice I think it is fine as long as the documentation says "you cannot rely on the order of the elements in the resulting list"
[23:39:03] <ProfSimm> byorgey: "you should not rely on [feature that exists]" famous last words :P
[23:39:11] <byorgey> ProfSimm: I know =)
[23:39:20] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 272 seconds)
[23:39:23] <byorgey> I hadn't heard of Data.Map.Ordered before, but it looks like it's keeping track of the order *in which things were inserted*
[23:39:35] <ProfSimm> byorgey: yes, well it's some order I guess
[23:39:40] <monochrom> I haven't seen anyone relying on HashMap's toList order.
[23:39:50] <ProfSimm> monochrom: it's not always intentional
[23:40:24] <ProfSimm> monochrom: imagine you map the keys to something that creates duplicates and you overwrite on name collision. So now you accidentally depend on the order of toList
[23:40:25] <monochrom> No, I haven't seen anyone doing that accidentally either.
[23:40:37] <ProfSimm> Well I just provided an example
[23:41:07] <ProfSimm> monochrom: in JS, object iteration had no specific order. 
[23:41:21] <ProfSimm> monochrom: no one therefore relied on it and all was fine. 
[23:41:40] <ProfSimm> monochrom: Just kidding, it caused bunch of hard to debug issues in bunch of software, so the spec was updated to maintain specific order
[23:42:09] <monochrom> I'm talking about the Haskell community, not the JS community.
[23:42:39] *** Joins: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[23:42:56] <dolio> What does the example even mean?
[23:42:58] <ProfSimm> Sure, but let's not pretend Haskellers are some kind of infallible beings who at every step of their program think "wait, this came from a map like 10 000 lines ago, so I must ensure this code is order invariant"
[23:43:10] <maerwald> people rely on bugs. All the time
[23:43:21] <ProfSimm> Also.
[23:43:37] <maerwald> Software doesn't easily allow to distinguish bugs and features
[23:43:40] <ProfSimm> monochrom: if there was no specific order in toList, it'd mean it's not deterministic
[23:43:51] <ProfSimm> maerwald: absolutely
[23:44:03] <polyphem> is Maps toList a natural transformation as a mapping between Functors Map k v -> [(k,v)] ? It also not only transforms the Functor (Map v) to [] but also the contents v to (k,v) ?
[23:44:19] <maerwald> and in Haskell we have this odd notion of API that relates mainly to *types* and not *behavior* (or even *laws*)
[23:44:52] <maerwald> so your bugfix is PVP compliant, but you still cause a backend on the other end of the world to crash
[23:46:30] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[23:47:07] <geekosaur> https://xkcd.com/1172/
[23:48:14] *** Joins: alx741 (~alx741@157.100.197.240)
[23:49:06] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 250 seconds)
[23:49:08] <byorgey> polyphem: Data.Map.toList is a natural transformation from  Map k  ->  ([] . (k,)),  yes   (I know '.' is not actually legal syntax for composition of type constructors)
[23:49:20] <byorgey> polyphem: I don't know what your second question means though
[23:49:32] *** Joins: kenran (~kenran@200116b82b49e8006646f20137f4ed5b.dip.versatel-1u1.de)
[23:50:51] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[23:51:41] <monochrom> I think the second question is answered by "Map k  ->  ([] . (k,))" too.
[23:51:42] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[23:52:36] <polyphem> byorgey: ok , nvm , i was wondering if its still a natural composition if it also modifies the type inside the functor , but you restated it as : Compose [] (k,)
[23:53:10] <polyphem> s/natural composition/natural transformation/
[23:55:52] <monochrom> BTW I had been procrastinating learning horizontal composition of two natural transformations until a few days ago. I had not felt like I needed to know.
[23:56:42] <monochrom> Then a few days ago I was learning monad morphisms. Naturally, a natural transformation that furthermore "preserves return" and "preserves join".
[23:57:14] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[23:57:35] <monochrom> I finally realized that just to state "preserves join" I need the horizontal composition of join and join. :)
[23:57:45] <byorgey> =D
[23:59:19] <polyphem> monochrom: the tongue keeps playing where the tooth hurts :)
[23:59:42] <ski> @type \fk fv -> M.mapKeysMonotonic fk . M.map fv
[23:59:44] <lambdabot> (k1 -> k2) -> (a1 -> a2) -> M.Map k1 a1 -> M.Map k2 a2
[23:59:48] *** Quits: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[23:59:48] <ski> @type \fk fv -> M.mapKeysWith (<>) fk . M.map fv
[23:59:50] <lambdabot> (Ord k2, Semigroup a1) => (k1 -> k2) -> (a2 -> a1) -> M.Map k1 a2 -> M.Map k2 a1
[23:59:53] <ski> @type \ks fk fv m -> M.fromList [(k,fv v) | k <- ks,Just v <- [m M.!? (fk k)]]
[23:59:54] <lambdabot> (Ord k1, Ord k2) => [k1] -> (k1 -> k2) -> (t -> a) -> M.Map k2 t -> M.Map k1 a
