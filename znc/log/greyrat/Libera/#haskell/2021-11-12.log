[00:00:00] <monochrom> Also, clearly, the type argument is useless except in type annotations. See also System F.
[00:01:21] <tomjaguarpaw> c
[00:01:38] *** Joins: jgeerds (~jgeerds@55d41b94.access.ecotel.net)
[00:02:48] <maerwald> what do you think about a GHC plugin that applies a function with flipped argument when you write it backwards, such as `pamf`
[00:03:12] <tomjaguarpaw> I think it would be taerg
[00:03:21] <geekosaur> sounds like a type fest waiting to happen
[00:03:26] <geekosaur> *typo fest
[00:03:47] <maerwald> of course you rais ambiguity errors when the same thing is in scope
[00:03:57] <maerwald> although silently shadowing could be fun
[00:04:04] <monochrom> Let's take it one step further.
[00:04:21] *** Joins: deadmarshal (~deadmarsh@95.38.228.177)
[00:04:23] <tomsmeding> what about (>>)
[00:04:31] <monochrom> Suppose I have "abcd :: A -> B -> C -> D -> Z".
[00:04:32] <geekosaur> it already is
[00:04:54] <monochrom> Then acbd :: A -> C -> B -> D -> Z.
[00:05:45] <maerwald> That migh work if camelcase is an index for the type position
[00:05:50] <tomsmeding> unclear what to do with famp though
[00:06:24] *** Quits: shidima__ (~shidima@84-104-108-90.cable.dynamic.v4.ziggo.nl) (Remote host closed the connection)
[00:06:39] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Remote host closed the connection)
[00:06:51] <maerwald> soGreatIsThat :: A -> B -> C -> D
[00:06:52] <tomsmeding> alternative: `fmap` is the normal thing, ´fmap´ is the flipped version
[00:06:58] <maerwald> thatIsSoGreat :: D -> C -> A -> B
[00:07:18] <tomsmeding> (U+00B4 ACUTE ACCENT)
[00:09:28] <koz> If I have a type Foo a which is a wrapper around [a] ensuring a limit on the length of [a], can I derive its Function instance via the underlying [a], or will this cause trouble>
[00:09:31] <koz> ?*
[00:09:31] <lambdabot> Maybe you meant: v @ ? .
[00:09:32] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[00:09:42] <koz> By which I mean this Function here: https://hackage.haskell.org/package/QuickCheck-2.14.2/docs/Test-QuickCheck-Function.html
[00:10:00] <monochrom> Function? Functor?
[00:10:14] <koz> monochrom: See my link - it's a QuickCheck thing.
[00:10:28] <koz> I've read the paper about Function and how it works and don't have a good answer to this question.
[00:11:09] *** Quits: DNH (~DNH@8.44.0.72) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:13:46] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Read error: Connection reset by peer)
[00:13:47] <tomsmeding> not sure, but this is public API: https://hackage.haskell.org/package/QuickCheck-2.14/docs/Test-QuickCheck-Function.html#v:functionMap
[00:14:02] *** Joins: shidima (~shidima@84-104-108-90.cable.dynamic.v4.ziggo.nl)
[00:14:02] *** Quits: aliosablack (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374) (Read error: Connection reset by peer)
[00:14:15] <tomsmeding> though that doesn't answer the question because what to put in the [a] -> Foo a thing
[00:14:21] <koz> That's exactly my issue.
[00:14:33] <koz> I _can_ crib a translation; I have no idea if it makes any sense or not.
[00:18:05] *** Joins: Pickchea (~private@user/pickchea)
[00:19:15] <koz> I think they all project into Either, and then use that to label the different kinds of case, but I'm not sure how this works in my case.
[00:19:31] <koz> Bool and Ordering both do this, and what I have can be thought of as a (very large) sum.
[00:20:12] <tomsmeding> hm, that should be valid: it _is_ a very large sum, after all
[00:20:26] <koz> Yeah, the big question is _how_ to do this projection.
[00:20:49] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[00:21:59] <tomsmeding> if you know how to deal with large sums up to n long, then you can deal with large sums up to n+1 long with a single Either
[00:22:05] <tomsmeding> that's also what the [] instance seems to do
[00:22:28] *** Joins: DNH (~DNH@8.43.122.53)
[00:22:36] <koz> Well, the smallest is where the limit is 0, since the only valid value is [].
[00:22:47] <koz> I'm not sure how to phrase the recursion properly here.
[00:22:58] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Remote host closed the connection)
[00:23:21] <tomsmeding> you can deal with sums up to 0 long by mapping into the type (), right?
[00:23:27] <koz> Yes.
[00:23:38] <koz> I get the idea - I'm not sure how to spell it.
[00:23:40] <tomsmeding> ah, but the length is not a type index
[00:23:44] <koz> Correct.
[00:23:45] <tomsmeding> if it was, this could work
[00:23:52] <koz> I mean, I actually _can_ have a type index.
[00:23:58] <koz> So it'd be Foo n a.
[00:24:14] <koz> So then I write 'Function (Foo 0 a)', and then the recursive step?
[00:24:26] <koz> OK, thanks, that did it!
[00:24:34] <tomsmeding> if you have a type index, then 'instance Function (Foo 0 a) where function = functionMap (\(Foo []) -> ()) (\() -> Foo [])'
[00:24:49] <tomsmeding> and yeah, what you just figured out probably :p
[00:25:02] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:9825:20f3:f69:55d5)
[00:25:23] <koz> Then you have (Function (Foo n a)) => Function (Foo (n + 1) a)
[00:25:33] <koz> (or 1 + n I guess.
[00:25:35] <koz> )
[00:25:38] <tomsmeding> I wonder whether the fact that this works with the (phantom) type index, implies that it would also work without the type index
[00:25:54] <koz> Probably.
[00:25:58] <tomsmeding> i.e. the stupid thing where you error on getting a Right in the second function for []
[00:25:58] <koz> It's just much more partial I think.
[00:26:22] <tomsmeding> but this is better!
[00:27:12] <tomsmeding> or hm, perhaps not, because the point of Function is that everything is made inspectable; so who knows whether some logic sees "hey I can Either here, so let's put a Right in it!"
[00:28:29] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5c59:2f73:735:a325) (Ping timeout: 268 seconds)
[00:35:45] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:38:58] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[00:39:03] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[00:41:50] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[00:43:54] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 268 seconds)
[00:56:49] *** Quits: shidima (~shidima@84-104-108-90.cable.dynamic.v4.ziggo.nl) (Ping timeout: 256 seconds)
[00:56:51] *** Joins: fresheyeball (~fresheyeb@c-76-25-93-164.hsd1.co.comcast.net)
[01:00:38] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[01:04:09] *** Joins: aegon (~mike@174.127.249.180)
[01:06:18] *** Joins: zebrag (~chris@user/zebrag)
[01:06:43] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Ping timeout: 268 seconds)
[01:07:18] *** Joins: michalz (~michalz@185.246.204.37)
[01:07:42] *** Quits: michalz (~michalz@185.246.204.37) (Remote host closed the connection)
[01:08:02] *** Joins: michalz (~michalz@185.246.204.62)
[01:10:46] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f6e3:7400:d4e2:b355:67fe:933c)
[01:11:27] *** Joins: mestre (~mestre@191.177.175.57)
[01:13:17] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[01:13:30] *** Quits: zer0bitz (~zer0bitz@2001:2003:f6e3:7400:9c57:4715:1ac5:a700) (Ping timeout: 268 seconds)
[01:15:04] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[01:15:19] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[01:15:40] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[01:18:30] *** Joins: jkaye (~jkaye@2601:281:8300:7530:abba:ebaf:fffa:714f)
[01:22:29] *** Quits: michalz (~michalz@185.246.204.62) (Remote host closed the connection)
[01:23:31] *** Quits: kenran (~kenran@200116b82b539f00f3f309ebb0e24d35.dip.versatel-1u1.de) (Quit: WeeChat info:version)
[01:25:34] *** Joins: jmorris (uid433911@hampstead.irccloud.com)
[01:30:48] <maerwald> do forM and forM_ have some significant laziness differences? I'm experiencing odd behavior 
[01:31:19] *** Quits: quintasan (~quassel@quintasan.pl) (Quit: quintasan)
[01:31:23] *** Quits: mouseghost (~draco@user/mouseghost) (Quit: mew wew)
[01:32:09] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[01:32:15] *** Joins: quintasan (~quassel@quintasan.pl)
[01:33:00] *** Quits: mestre (~mestre@191.177.175.57) (Quit: Lost terminal)
[01:33:49] <maerwald> `void $ forM [1,2] $ \i -> putStrLn (show i) >> throwSomeError Foo` runs both loops and then errors, while `forM_` will only run the first iteration
[01:34:47] *** Quits: deadmarshal (~deadmarsh@95.38.228.177) (Ping timeout: 256 seconds)
[01:35:18] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Remote host closed the connection)
[01:35:27] *** Joins: deadmarshal (~deadmarsh@95.38.228.222)
[01:35:46] *** Quits: desantra (~skykanin@user/skykanin) (Quit: WeeChat 3.3)
[01:36:40] *** Joins: mrckndt3 (~mrckndt@user/mrckndt)
[01:38:58] *** Quits: mrckndt (~mrckndt@user/mrckndt) (Ping timeout: 260 seconds)
[01:38:58] *** mrckndt3 is now known as mrckndt
[01:39:51] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f6e3:7400:d4e2:b355:67fe:933c) (Read error: Connection reset by peer)
[01:42:10] <monochrom> I can't reproduce that. Unless I misunderstand "throwSomeError". WTH is it anyway?
[01:42:28] *** Joins: falafel (~falafel@2603-8000-d800-688c-2092-0e6f-020e-f136.res6.spectrum.com)
[01:44:05] <maerwald> yeah, it's not ExceptT
[01:44:14] <maerwald> but similar, I'm trying to create a minimal reproducer
[01:44:30] <monochrom> I used ioError (userError "hi") very simply.
[01:46:30] <maerwald> ok, reproduced
[01:46:32] <maerwald> wow
[01:46:38] <maerwald> this is scary
[01:47:44] <maerwald> https://github.com/hasufell/except-bug/blob/master/app/Main.hs
[01:48:03] <maerwald> this print 1, 2, 1 to stdout
[01:49:03] <maerwald> the forM version runs both
[01:51:13] *** Quits: deadmarshal (~deadmarsh@95.38.228.222) (Ping timeout: 256 seconds)
[01:53:29] *** Quits: [Kalisto] (~nico@user/kalisto/x-8968079) (Ping timeout: 256 seconds)
[01:53:48] *** Joins: falafel_ (~falafel@2603-8000-d800-688c-2092-0e6f-020e-f136.res6.spectrum.com)
[01:54:14] *** Joins: pavonia (~user@user/siracusa)
[01:55:37] *** Quits: cosimone (~user@93-44-184-239.ip98.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[01:57:04] <dolio> I'm going to bet on the library you're using that uses unsafeCoerce to implement Either being at fault. :þ
[01:57:23] *** Quits: falafel (~falafel@2603-8000-d800-688c-2092-0e6f-020e-f136.res6.spectrum.com) (Ping timeout: 264 seconds)
[01:58:00] <ddb> int-e: O RLY? lay it on me
[01:58:02] <maerwald> I don't see unsafeCoerce there
[01:58:58] <dolio> It's in the code for variants.
[01:59:29] <maerwald> dolio: https://hackage.haskell.org/package/haskus-utils-variant-3.2/docs/src/Haskus.Utils.Variant.html#toVariantHead
[01:59:32] <maerwald> at there
[01:59:44] <maerwald> but what's going on here
[01:59:48] <dolio> The unsafeCoerce isn't the likely problem. It's probably the accompanying manual arithmetic for figuring out which number is left vs. right.
[02:00:35] <dolio> And somehow the first iteration of the loop, it thinks your error isn't actually an error or something.
[02:01:21] <dolio> I guess it could be a lot of different things, really. (>>) vs. (>>=).
[02:02:32] *** Quits: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee) (Ping timeout: 260 seconds)
[02:03:44] <int-e> ddb: check the context... the upshot is that v2-install (which you used) creates an environment for ghc and that will hide any libraries installed by v1-install by default
[02:03:45] *** Joins: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee)
[02:07:13] <sclv> what's the most convenient way to get "the underlying bytes of an Int as a ByteString" and to go back? i can see a bunch of options here...
[02:07:35] <sclv> honestly makes more sense on an Integer, so lets say that instead
[02:08:12] <sclv> like we can think of an Integer as encoding a sequence of bytes in a natural way, and it would be good to have access to that, conceptually, even if representationwise its not exactly the same thing
[02:08:40] <maerwald> dolio: if you figure it out, please comment here https://github.com/haskus/packages/issues/39
[02:09:19] <monochrom> I have narrowed it down to >> (which forM_ uses) vs <*>/liftA2 (which forM uses).
[02:09:40] <maerwald> so the applicative instance?
[02:09:51] <monochrom> Perhaps.
[02:10:03] <dolio> I'm probably not going to look long enough to find it. The arithmetic seems like the most likely candidate unless one of the instances is just wrong.
[02:10:44] <maerwald> https://hackage.haskell.org/package/haskus-utils-variant-3.2/docs/src/Haskus.Utils.Variant.Excepts.html#line-143 
[02:10:57] <dolio> The instances are pretty boring, though.
[02:11:00] *** Joins: [Kalisto] (~nico@user/kalisto/x-8968079)
[02:12:20] <dolio> maerwald: It might be interesting to come up with a test that does something after the error.
[02:12:34] <dolio> Maybe you can get it to unsafe coerce you a value.
[02:13:19] <ddb>  int-e: Heyo! Thank you. Now I guess I need to download/patch djinn and it'll be fixed eh? Is there a reason that djinn hasn't been updated since 2014?
[02:13:35] <jkaye> sclv, https://hackage.haskell.org/package/bytestring-0.11.1.0/docs/Data-ByteString-Builder.html ?
[02:13:58] <jkaye> Lots of functions there to go from various numeric types into a ByteString Biulder
[02:14:00] <dolio> Oh wait.
[02:14:02] <jkaye> Builder**
[02:14:16] <dolio> maerwald: Are you sure this isn't like 'Validation' or whatever?
[02:14:38] <sclv> jkaye: oh that's not bad for the encoding side, not sure what to do for the decoding side
[02:14:41] <dolio> I think it might be that.
[02:14:55] <sclv> i.e. Bytestring -> Integer
[02:15:06] <sclv> its not too hard to hand roll, just I'd think it might be lying around
[02:15:22] <dolio> (<*>) runs both things and aggregates the errors. (>>=) can't do that, and (*>) and (>>) are implemented in terms of (>>=).
[02:15:26] <maerwald> dolio: Excepts is an open sum type in the error
[02:15:54] <dolio> Well, look at that (<*>) definition.
[02:16:07] <maerwald> yeah
[02:16:17] <dolio> It doesn't care if the first thing fails.
[02:16:28] <monochrom> Ah.
[02:16:52] <dolio> I guess it's the worst of both Validation and Either. :)
[02:17:07] <dolio> Only one error, but no short circuiting. :)
[02:17:35] <jkaye> sclv, is it possible to choose an encoding scheme to do this for you, or is it a requirement that you do it directly?
[02:17:50] <monochrom> Well, one of <*>, >>= is broken because they differ.
[02:17:59] <jkaye> For example (silly example, but still) aeson would do this for you using json as the encoding
[02:18:04] <sclv> jkaye: i'm just trying to look at the most straightforward way to do this, pulling in as few libs as possible :-)
[02:18:15] <jkaye> Ah okay, so looking for minimal deps
[02:18:18] <jkaye> Makes sense
[02:18:25] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[02:18:52] <sclv> guess i'll just write my own for now. thanks for the pointer!
[02:21:10] <jkaye> Yeah I think the issue with that being available in base (generically) is that a ByteString can't really be guaranteed to be an Int (or anything else)
[02:21:19] <jkaye> Someone else might know more about this stuff
[02:26:09] <maerwald> dolio: yep... I fixed the instances and now it works
[02:26:12] <maerwald> monochrom: good catch
[02:26:36] <maerwald> just looked at the ExceptT applicative instance, which just does explicit pattern matching
[02:27:07] <maerwald> maybe because it looked less elegant, they tried to make it shorter
[02:28:22] <monochrom> IMO "(<*>) = Control.Monad.ap" is the most elegant and the safest and the least work, too.
[02:30:44] *** Joins: cheater (~Username@user/cheater)
[02:32:48] <maerwald> but it's surprising that forM_ is not `void . forM`
[02:34:07] <monochrom> Using IO for example, "forM [0..] print" takes infinite memory, and void does not save it, void comes in too late.
[02:34:17] *** Joins: severen (~severen@202.36.179.72)
[02:34:46] <monochrom> forM_ is carefully crafted to solve that.
[02:35:41] <monochrom> Since this is IO's >>=, yes tail recursion matters in this case.
[02:37:21] <monochrom> "forM_ (x:xs) f = f x >>= \_ -> forM_ xs f" is a tail recursion, "forM (x:xs) f = f x >>= \y -> forM xs f >>= oh now I have to return something" is a non-tail recursion.
[02:37:54] <monochrom> OK, except that modern forM uses <*> instead of >>=
[02:38:48] <maerwald> sequenceA
[02:42:11] *** Quits: mimmy (~mimmy@72.142.88.18) (Quit: WeeChat 3.3)
[02:42:35] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[02:43:06] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[02:43:54] <maerwald> meh... sequence default impl is sequenceA
[02:44:02] <monochrom> :)
[02:44:05] <maerwald> trying to dive around this bug isn't that easy
[02:44:11] *** Quits: falafel_ (~falafel@2603-8000-d800-688c-2092-0e6f-020e-f136.res6.spectrum.com) (Ping timeout: 264 seconds)
[02:44:23] <monochrom> Roll your own forM :)
[02:45:28] *** Quits: _xor (~xor@72.49.199.147) (Quit: WeeChat 3.3)
[02:46:37] *** Quits: sudden (~cat@user/sudden) (Ping timeout: 268 seconds)
[02:47:22] *** Joins: hippoid (~idris@c-98-220-13-8.hsd1.il.comcast.net)
[02:47:33] <int-e>  /lastlog ddb 3
[02:47:46] <int-e> (darn space bar)
[02:53:25] *** Joins: sudden (~cat@h-98-128-128-173.A351.priv.bahnhof.se)
[02:53:50] *** sudden is now known as Guest6295
[02:58:04] *** Joins: AlexNoo_ (~AlexNoo@178.34.163.122)
[02:58:13] *** Joins: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com)
[02:59:13] *** Quits: Guest6295 (~cat@h-98-128-128-173.A351.priv.bahnhof.se) (Ping timeout: 256 seconds)
[03:00:01] *** Joins: teddyc (theodorc@cassarossa.samfundet.no)
[03:00:18] *** Joins: deadmarshal (~deadmarsh@95.38.228.222)
[03:00:42] *** Quits: Alex_test (~al_test@178.34.163.82) (Ping timeout: 260 seconds)
[03:00:42] *** Quits: AlexZenon (~alzenon@178.34.163.82) (Ping timeout: 260 seconds)
[03:01:39] *** Quits: AlexNoo (~AlexNoo@178.34.163.82) (Ping timeout: 250 seconds)
[03:04:25] *** Joins: AlexZenon (~alzenon@178.34.163.122)
[03:04:25] *** Joins: Alex_test (~al_test@178.34.163.122)
[03:04:53] *** Quits: deadmarshal (~deadmarsh@95.38.228.222) (Ping timeout: 256 seconds)
[03:04:53] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 256 seconds)
[03:05:02] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:05:11] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[03:06:11] *** Joins: sudden (~cat@h-98-128-128-173.A351.priv.bahnhof.se)
[03:06:36] *** sudden is now known as Guest4609
[03:07:11] *** Quits: Guest4609 (~cat@h-98-128-128-173.A351.priv.bahnhof.se) (Changing host)
[03:07:11] *** Joins: Guest4609 (~cat@user/sudden)
[03:11:34] *** Joins: kupi (uid212005@hampstead.irccloud.com)
[03:13:11] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[03:13:35] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[03:19:52] *** Joins: lbseale (~lbseale@user/ep1ctetus)
[03:20:28] *** Quits: lbseale (~lbseale@user/ep1ctetus) (Client Quit)
[03:20:51] *** Joins: MasseR5 (~MasseR@51.15.143.128)
[03:21:27] *** Quits: orcus (~orcus@user/brprice) (Quit: ZNC 1.8.1 - https://znc.in)
[03:21:32] *** Quits: defanor (~defanor@tart.uberspace.net) (Quit: .)
[03:21:46] *** Joins: orcus (~orcus@user/brprice)
[03:21:47] *** Joins: defanor (~defanor@tart.uberspace.net)
[03:22:48] *** Quits: MasseR (~MasseR@51.15.143.128) (Ping timeout: 260 seconds)
[03:22:48] *** MasseR5 is now known as MasseR
[03:25:37] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:25:38] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:25:38] *** Joins: wroathe (~wroathe@user/wroathe)
[03:31:24] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Remote host closed the connection)
[03:33:20] *** Joins: brainfreeze (~brainfree@2a03:1b20:4:f011::20d)
[03:34:35] *** Quits: acidjnk_new3 (~acidjnk@p200300d0c721b739c4928bd7ecc09c55.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[03:36:12] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[03:41:02] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:45:25] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[03:47:43] *** Joins: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com)
[03:49:10] *** Quits: Topsi2 (~Tobias@dyndsl-091-249-082-100.ewe-ip-backbone.de) (Read error: Connection reset by peer)
[03:56:44] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 246 seconds)
[03:57:59] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[04:03:32] *** Quits: jgeerds (~jgeerds@55d41b94.access.ecotel.net) (Ping timeout: 240 seconds)
[04:08:56] *** Joins: acidjnk_new3 (~acidjnk@p200300d0c721b725a4c2c29d62041356.dip0.t-ipconnect.de)
[04:09:27] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[04:09:43] *** Quits: jmorris (uid433911@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[04:25:12] *** Joins: vysn (~vysn@user/vysn)
[04:30:25] *** Joins: _xor (~xor@72.49.199.147)
[04:33:15] *** Quits: DNH (~DNH@8.43.122.53) (Quit: Textual IRC Client: www.textualapp.com)
[04:33:57] *** Quits: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com) (Ping timeout: 250 seconds)
[04:34:45] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[04:35:19] *** Joins: benin6 (~benin@106.198.92.35)
[04:37:15] *** Quits: benin (~benin@183.82.178.244) (Ping timeout: 256 seconds)
[04:37:16] *** benin6 is now known as benin
[04:39:20] *** Joins: fluffyballoon (~user@131.93.208.196)
[04:41:09] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:45:59] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[04:47:15] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:47:47] *** Quits: mark__ (~a@p200300ef973db1b24086f0a6a24fc4dd.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[04:48:15] <ddb> int-e: I was able to get all of what you said, and it works as far as I can tell! Even got djinn working with your patch instructions.
[04:48:41] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 250 seconds)
[04:51:06] *** Quits: acidjnk_new3 (~acidjnk@p200300d0c721b725a4c2c29d62041356.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[04:55:20] *** Joins: acco[m] (~accotedom@2001:470:69fc:105::1:3236)
[04:57:12] *** Quits: severen (~severen@202.36.179.72) (Quit: WeeChat 3.3)
[04:59:12] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[05:00:00] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[05:02:59] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 250 seconds)
[05:04:13] *** Quits: mmhat (~mmh@55d4bd26.access.ecotel.net) (Quit: WeeChat 3.3)
[05:07:07] *** Quits: max22- (~maxime@2a01cb08833598008a48d8a24ae7f102.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[05:10:58] *** Joins: Vajb (~Vajb@2001:999:51:5bc5:881:a4da:a7db:528d)
[05:11:02] *** Quits: fluffyballoon (~user@131.93.208.196) (Ping timeout: 240 seconds)
[05:12:59] *** Joins: wei2912 (~wei2912@138.75.71.147)
[05:20:49] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Remote host closed the connection)
[05:22:46] *** Quits: wei2912 (~wei2912@138.75.71.147) (Quit: leaving)
[05:24:14] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 246 seconds)
[05:28:03] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[05:28:04] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Quit: Leaving)
[05:28:56] *** Quits: acidsys (~LSD@2.lsd.systems) (Excess Flood)
[05:29:30] *** Joins: acidsys (~LSD@2.lsd.systems)
[05:31:54] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:36:11] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[05:44:43] *** Quits: roconnor (~roconnor@host-45-58-217-8.dyn.295.ca) (Read error: Connection reset by peer)
[05:52:35] *** Quits: jkaye (~jkaye@2601:281:8300:7530:abba:ebaf:fffa:714f) (Ping timeout: 264 seconds)
[05:53:18] *** Joins: dajoer (~david@user/gvx)
[05:55:43] *** Joins: cheater (~Username@user/cheater)
[05:58:44] *** Joins: renzhi (~xp@2607:fa49:6500:b100::6e7f)
[05:58:45] *** Quits: Vajb (~Vajb@2001:999:51:5bc5:881:a4da:a7db:528d) (Read error: Connection reset by peer)
[06:01:35] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[06:10:32] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[06:17:41] *** zzz is now known as onion
[06:19:15] *** Quits: benin (~benin@106.198.92.35) (Ping timeout: 256 seconds)
[06:22:58] <hololeap> I want to reference a whole pattern match in a type family. is there any way to do this or some other way to make this snippet work? http://sprunge.us/9fimdF
[06:23:42] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:25:17] *** Quits: xff0x (~xff0x@2001:1a81:53e8:a400:4be3:10c9:a6eb:9cd9) (Ping timeout: 264 seconds)
[06:25:19] <awpr> can do some workaround like `type ActualTypeFamily a0 a1 where ...` and `type Wrapper a = ActualTypeFamily a a`
[06:25:42] <awpr> things are just less convenient in type family land, pretty frequently
[06:26:39] *** Joins: xff0x (~xff0x@2001:1a81:522c:6200:1a00:c61c:e1e7:955f)
[06:30:37] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[06:31:06] *** Quits: kupi (uid212005@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[06:31:30] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[06:34:48] *** Joins: falafel (~falafel@2603-8000-d800-688c-2092-0e6f-020e-f136.res6.spectrum.com)
[06:38:23] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Quit: Leaving)
[06:45:02] *** Quits: alx741 (~alx741@186.178.109.114) (Quit: alx741)
[06:56:29] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 264 seconds)
[06:58:39] *** Joins: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[06:59:53] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[07:00:14] *** Joins: alzgh (~alzgh@user/alzgh)
[07:03:58] *** onion is now known as yin
[07:04:02] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:04:02] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[07:04:03] *** finn_elija is now known as FinnElija
[07:05:57] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[07:10:13] *** Quits: santiagopim[m] (~santiagop@2001:470:69fc:105::e57d) (Quit: Client limit exceeded: 20000)
[07:11:34] *** Quits: hippoid (~idris@c-98-220-13-8.hsd1.il.comcast.net) (Remote host closed the connection)
[07:11:45] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[07:14:31] *** Joins: mbuf (~Shakthi@122.178.204.176)
[07:17:11] *** Quits: falafel (~falafel@2603-8000-d800-688c-2092-0e6f-020e-f136.res6.spectrum.com) (Ping timeout: 245 seconds)
[07:19:41] <hololeap> awpr: I cannot seem to get it to let me specify at the top of a recursive datakind that the root and all ancestors satisfy some constraints: http://dpaste.com/D63462PXP
[07:20:03] *** Joins: santiagopim[m] (~santiagop@2001:470:69fc:105::e57d)
[07:26:12] <awpr> so for one, I think this will be hard to work with, since even knowing what the constraint is requires knowing which constructor of Tree/Root the parameter is
[07:26:48] <awpr> in particular `KnownTreeR t` doesn't imply `KnownTree t` until _after_ you prove which case it is
[07:27:59] <awpr> the way it's written is a bit like `case t of Node x y -> knownTree t; Leaf -> knownTree t`, in that it has to "force" the present node before making any progress
[07:28:59] <awpr> probably more useful to compare against `case t of Node x y -> (knownTree t, otherStuff x y); Leaf -> (knownTree t, ())` actually
[07:29:16] *** Quits: emf (~emf@2620:10d:c090:400::5:538d) (Ping timeout: 245 seconds)
[07:29:16] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:30:26] *** Joins: deadmarshal (~deadmarsh@95.38.228.222)
[07:30:30] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[07:30:58] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[07:31:08] <awpr> refactoring that to `(knownTree t, case t of Node x y -> otherStuff x y; Leaf -> ())` means you can immediately find `knownTree t`, and only the recursive stuff depends on which constructor it is
[07:31:31] *** Quits: td_ (~td@94.134.91.245) (Ping timeout: 268 seconds)
[07:32:46] *** Joins: td_ (~td@94.134.91.243)
[07:33:44] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 246 seconds)
[07:34:12] *** Joins: jkaye (~jkaye@2601:281:8300:7530:866a:9967:5f85:58dd)
[07:35:29] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 246 seconds)
[07:37:20] <awpr> the other side of this is: with the `singTree` method, `KnownTree` already provides knowledge about the shape of the entire tree, it's just not convenient to get the subtrees back into the form of `KnownTree` instances.  so instead of recursing on `KnownTree` instances, you can recurse on `SingTree` values, and use `KnownTree` only as a convenient way of supplying `SingTree` arguments automatically
[07:37:26] *** Quits: fresheyeball (~fresheyeb@c-76-25-93-164.hsd1.co.comcast.net) (Quit: WeeChat 2.9)
[07:38:18] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[07:38:47] *** Quits: jkaye (~jkaye@2601:281:8300:7530:866a:9967:5f85:58dd) (Ping timeout: 264 seconds)
[07:40:14] <awpr> a third, somewhat weirder angle: `data SingTree t where SingNode :: (KnownTree tl, KnownTree tr) => SingTree (Node tl tr); ...`, so that matching `SingNode` inherently brings the instances into scope, and you regain the ability to recurse on instances.  I've never tried this style of recursive singletons, though, so I'm not sure whether it will go smoothly
[07:42:37] *** Quits: renzhi (~xp@2607:fa49:6500:b100::6e7f) (Ping timeout: 268 seconds)
[07:54:53] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[07:54:53] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[07:54:53] *** Joins: wroathe (~wroathe@user/wroathe)
[07:58:21] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[07:59:21] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[07:59:47] *** Joins: hololeap (~hololeap@user/hololeap)
[08:02:53] *** Quits: aidy (~aidy@2001:470:69fc:105::c7b4) (Quit: Client limit exceeded: 20000)
[08:04:55] *** Joins: rkrishnan (~user@122.167.19.65)
[08:06:21] *** Joins: Philonous_ (~Philonous@user/philonous)
[08:08:43] *** Joins: fryguybo1 (~fryguybob@cpe-74-67-169-145.rochester.res.rr.com)
[08:09:27] *** Joins: kosmikus_ (~kosmikus@nullzig.kosmikus.org)
[08:09:44] *** Joins: lavaman (~lavaman@98.38.249.169)
[08:09:47] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[08:09:59] *** Joins: v01d4lph4 (~v01d4lph4@223.190.93.72)
[08:09:59] *** Quits: v01d4lph4 (~v01d4lph4@223.190.93.72) (Changing host)
[08:09:59] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[08:10:19] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Ping timeout: 256 seconds)
[08:10:46] *** Joins: benin (~benin@106.198.85.27)
[08:11:06] *** Joins: hololeap (~hololeap@user/hololeap)
[08:13:51] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (*.net *.split)
[08:13:51] *** Quits: fryguybob (~fryguybob@cpe-74-67-169-145.rochester.res.rr.com) (*.net *.split)
[08:13:51] *** Quits: infinity0 (~infinity0@occupy.ecodis.net) (*.net *.split)
[08:13:51] *** Quits: edwtjo (~edwtjo@user/edwtjo) (*.net *.split)
[08:13:51] *** Quits: niko (~niko@libera/staff/niko) (*.net *.split)
[08:13:51] *** Quits: Philonous (~Philonous@user/philonous) (*.net *.split)
[08:13:51] *** Quits: kosmikus (~kosmikus@nullzig.kosmikus.org) (*.net *.split)
[08:13:51] *** Quits: duckonomy (~duckonomy@177.ip-144-217-84.net) (*.net *.split)
[08:13:51] *** Quits: marienz (~marienz@libera/staff/marienz) (*.net *.split)
[08:13:51] *** Quits: chronon (~chronon@user/chronon) (*.net *.split)
[08:13:51] *** Quits: Inoperable (~PLAYER_1@fancydata.science) (*.net *.split)
[08:13:51] *** Quits: dkeohane2 (~dkeohane@ec2-18-189-29-140.us-east-2.compute.amazonaws.com) (*.net *.split)
[08:13:51] *** Quits: glguy (x@libera/staff/glguy) (*.net *.split)
[08:14:42] *** Joins: jmorris (uid433911@hampstead.irccloud.com)
[08:15:03] *** Joins: niko (~niko@libera/staff/niko)
[08:18:24] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[08:18:24] *** Joins: infinity0 (~infinity0@occupy.ecodis.net)
[08:18:24] *** Joins: Inoperable (~PLAYER_1@fancydata.science)
[08:18:24] *** Joins: duckonomy (~duckonomy@177.ip-144-217-84.net)
[08:18:24] *** Joins: chronon (~chronon@user/chronon)
[08:18:24] *** Joins: marienz (~marienz@libera/staff/marienz)
[08:18:24] *** Joins: dkeohane2 (~dkeohane@ec2-18-189-29-140.us-east-2.compute.amazonaws.com)
[08:18:24] *** Joins: glguy (x@libera/staff/glguy)
[08:19:22] <dsal> Is there a less repetitive way to do `liftA3 c (f a) (f b) (f c)` ?
[08:19:27] *** Joins: edwtjo (~edwtjo@h-109-228-137-133.A213.priv.bahnhof.se)
[08:19:28] *** Quits: edwtjo (~edwtjo@h-109-228-137-133.A213.priv.bahnhof.se) (Changing host)
[08:19:28] *** Joins: edwtjo (~edwtjo@user/edwtjo)
[08:19:41] <dsal> Er, those aren't the same c...
[08:19:48] *** Joins: aidy (~aidy@2001:470:69fc:105::c7b4)
[08:20:59] *** Joins: Vajb (~Vajb@2001:999:51:5bc5:881:a4da:a7db:528d)
[08:28:39] *** Quits: mud (~mud@user/kadoban) (Quit: quit)
[08:28:39] *** Quits: Vajb (~Vajb@2001:999:51:5bc5:881:a4da:a7db:528d) (Read error: Connection reset by peer)
[08:28:59] <koz> dsal: c <$> f a <*> f b <*> f c?
[08:29:55] <dsal> Heh I was hoping mainly to avoid writing `f` three times in this case.
[08:30:04] <dsal> That's more obvious on my screen.
[08:31:36] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[08:34:07] *** Quits: deadmarshal (~deadmarsh@95.38.228.222) (Ping timeout: 256 seconds)
[08:34:39] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[08:36:48] *** Joins: shidima (~shidima@84-104-108-90.cable.dynamic.v4.ziggo.nl)
[08:45:02] <kronicmage> @pl g f = liftA3 c (f a) (f b) (f c)
[08:45:02] <lambdabot> g = ap (ap (liftA3 c . ($ a)) ($ b)) ($ c)
[08:45:10] *** Joins: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com)
[08:45:43] <kronicmage> Sometimes repetition is more readable lol
[08:49:02] <Axman6> @pl g f = c <$> f a <*> f b <*> f c -- this is not going to be better...
[08:49:02] <lambdabot> g = (c <$>) . ap ((<*>) . liftM2 (<*>) ($ a) ($ b)) ($ c)
[08:49:03] <awpr> @let on3 f g x y z = f (g x) (g y) (g z)
[08:49:04] <lambdabot>  Defined.
[08:49:32] <Axman6> :t on3
[08:49:33] <lambdabot> (t1 -> t1 -> t1 -> t2) -> (t3 -> t1) -> t3 -> t3 -> t3 -> t2
[08:49:38] <awpr> (liftA3 f `on` c) x y z
[08:49:58] <awpr> :t on -- for comparison
[08:49:59] <lambdabot> (b -> b -> c) -> (a -> b) -> a -> a -> c
[08:58:19] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[09:09:02] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Remote host closed the connection)
[09:09:55] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[09:14:21] *** Quits: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com) (Ping timeout: 256 seconds)
[09:14:45] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[09:23:02] *** Joins: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com)
[09:24:35] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[09:24:55] *** Joins: alzgh (~alzgh@user/alzgh)
[09:25:52] *** Quits: dagit (~dagit@2001:558:6025:38:6476:a063:d05a:44da) (Read error: Connection reset by peer)
[09:26:01] *** Joins: dagit (~dagit@2001:558:6025:38:6476:a063:d05a:44da)
[09:27:46] *** Quits: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com) (Ping timeout: 250 seconds)
[09:36:36] *** Joins: falafel (~falafel@2603-8000-d800-688c-34f9-26f3-71b0-5b78.res6.spectrum.com)
[09:38:15] *** Quits: Axman6 (~Axman6@user/axman6) ()
[09:39:19] *** Joins: kmein_ (~weechat@user/kmein)
[09:40:56] *** Quits: kmein (~weechat@user/kmein) (Ping timeout: 245 seconds)
[09:46:46] *** Joins: vysn (~vysn@user/vysn)
[09:46:57] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[09:47:02] *** Joins: Axman6 (~Axman6@user/axman6)
[09:49:09] <DemiMarieObenour> Anyone else wished that GHC had a concurrent compacting garbage collector?
[09:50:10] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[09:53:35] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[09:53:58] <sm> sure!
[09:54:29] <sm> and sub second program compile times
[09:57:42] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[09:59:17] <Axman6> doesn't it have both those things? not at the same time? I haven't looked at the state of the art in GHC garbage collection
[09:59:30] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[09:59:35] <dolio> I don't think it has a compacting collector.
[10:00:21] <Axman6> copying totally does compacting :P
[10:00:31] <dolio> Well, that's true.
[10:02:34] *** Joins: img (~img@user/img)
[10:05:50] *** Joins: benin6 (~benin@183.82.176.36)
[10:06:02] *** Joins: lavaman (~lavaman@98.38.249.169)
[10:07:23] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (Ping timeout: 246 seconds)
[10:07:37] *** Quits: benin (~benin@106.198.85.27) (Ping timeout: 256 seconds)
[10:07:38] *** benin6 is now known as benin
[10:07:52] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[10:10:36] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[10:13:54] *** Quits: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 256 seconds)
[10:14:34] <DemiMarieObenour> yes, but it is stop-the-world
[10:14:44] *** Quits: shidima (~shidima@84-104-108-90.cable.dynamic.v4.ziggo.nl) (Ping timeout: 246 seconds)
[10:14:50] <DemiMarieObenour> looks at Java ZGC
[10:16:00] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[10:16:29] <opqdonut> DemiMarieObenour: how about https://well-typed.com/blog/2019/10/nonmoving-gc-merge/ ?
[10:16:30] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (Client Quit)
[10:17:21] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[10:17:45] <DemiMarieObenour> opqdonut: yes, but a non-moving GC still may run into heap fragmentation problems.  A concurrent compacting collector is the holy grail of GC technology, but is a massive amount of work.
[10:18:59] *** Quits: falafel (~falafel@2603-8000-d800-688c-34f9-26f3-71b0-5b78.res6.spectrum.com) (Ping timeout: 264 seconds)
[10:22:00] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[10:23:48] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[10:26:51] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[10:28:02] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (Ping timeout: 240 seconds)
[10:32:35] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[10:33:06] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (Client Quit)
[10:34:16] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Remote host closed the connection)
[10:35:31] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[10:39:24] *** Quits: alzgh (~alzgh@user/alzgh) (Ping timeout: 256 seconds)
[10:39:54] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[10:41:07] *** Joins: lavaman (~lavaman@98.38.249.169)
[10:41:12] *** Joins: retroid_ (~retro@2e41e9c8.skybroadband.com)
[10:42:23] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[10:44:32] *** Quits: retro_ (~retro@2e41e9c8.skybroadband.com) (Ping timeout: 268 seconds)
[10:45:03] *** Quits: brainfreeze (~brainfree@2a03:1b20:4:f011::20d) (Remote host closed the connection)
[10:45:31] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 245 seconds)
[10:46:04] *** Joins: alzgh (alzgh@user/alzgh)
[10:50:14] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[11:00:34] <int-e> ddb: nice :)
[11:02:49] *** Joins: deadmarshal (~deadmarsh@95.38.228.222)
[11:02:51] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[11:03:48] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[11:07:26] *** Quits: deadmarshal (~deadmarsh@95.38.228.222) (Ping timeout: 260 seconds)
[11:13:36] *** Joins: kupi (uid212005@hampstead.irccloud.com)
[11:14:48] *** Joins: deadmarshal (~deadmarsh@95.38.228.222)
[11:15:46] *** Joins: lavaman (~lavaman@98.38.249.169)
[11:20:18] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 268 seconds)
[11:20:36] *** Joins: shidima (~shidima@46.44.183.25)
[11:25:06] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:906e:b8e3:dc89:8d11)
[11:28:01] *** Joins: cfricke (~cfricke@user/cfricke)
[11:28:09] *** Joins: michalz (~michalz@185.246.204.37)
[11:32:10] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[11:37:29] *** Quits: fendor (~fendor@77.119.192.182.wireless.dyn.drei.com) (Read error: Connection reset by peer)
[11:42:18] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:42:19] *** Joins: chomwitt (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374)
[11:48:23] *** Quits: deadmarshal (~deadmarsh@95.38.228.222) (Ping timeout: 264 seconds)
[11:50:16] *** Joins: hololeap_ (~hololeap@user/hololeap)
[11:50:42] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[11:51:30] *** Joins: acidjnk (~acidjnk@p200300d0c721b72570e3bb829407e876.dip0.t-ipconnect.de)
[11:53:22] *** Parts: jakalx (~jakalx@base.jakalx.net) (Disconnected: Replaced by new connection)
[11:53:28] *** Joins: jakalx (~jakalx@base.jakalx.net)
[12:00:19] *** Joins: vpan (~0@212.117.1.172)
[12:00:32] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[12:04:59] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 246 seconds)
[12:07:28] *** Joins: deadmarshal (~deadmarsh@95.38.228.222)
[12:07:52] *** Joins: CiaoSen (~Jura@p200300c95730dd002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[12:09:07] *** Quits: hololeap_ (~hololeap@user/hololeap) (Remote host closed the connection)
[12:10:31] *** Joins: hololeap_ (~hololeap@user/hololeap)
[12:10:52] *** Joins: aliosablack (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374)
[12:11:36] *** Quits: chomwitt (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374) (Read error: Connection reset by peer)
[12:14:01] *** Joins: oxide (~lambda@user/oxide)
[12:18:14] *** Joins: dhruvasagar (~dhruvasag@49.207.218.36)
[12:20:39] *** AlexNoo_ is now known as AlexNoo
[12:22:12] *** Joins: chele (~chele@user/chele)
[12:23:19] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[12:26:13] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[12:26:46] *** Quits: aliosablack (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374) (Ping timeout: 245 seconds)
[12:29:17] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 256 seconds)
[12:31:04] *** Joins: mcgroin (~mcgroin@2a04:cec0:117a:2bdc:138b:9371:fd4b:83f7)
[12:31:31] *** Joins: cosimone (~user@93-47-231-139.ip115.fastwebnet.it)
[12:32:27] *** Quits: bitmapper (uid464869@lymington.irccloud.com) (Quit: Connection closed for inactivity)
[12:32:41] *** Quits: deadmarshal (~deadmarsh@95.38.228.222) (Ping timeout: 256 seconds)
[12:35:31] *** Quits: jlamothe (~jlamothe@198.251.61.229) (Ping timeout: 256 seconds)
[12:36:02] *** Joins: chomwitt (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374)
[12:36:27] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[12:38:22] *** Joins: jgeerds (~jgeerds@55d41b94.access.ecotel.net)
[12:40:26] *** Joins: max22- (~maxime@2a01cb08833598005dabd5498813ae20.ipv6.abo.wanadoo.fr)
[12:46:02] *** Quits: mcgroin (~mcgroin@2a04:cec0:117a:2bdc:138b:9371:fd4b:83f7) (Ping timeout: 240 seconds)
[12:46:35] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 264 seconds)
[12:47:33] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:33] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:36] *** allbery_b is now known as geekosaur
[12:48:01] *** Joins: vysn (~vysn@user/vysn)
[12:48:23] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[12:50:35] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[12:52:01] *** Joins: Guest13 (~Guest13@44.51-174-234.customer.lyse.net)
[12:52:58] *** Quits: Guest13 (~Guest13@44.51-174-234.customer.lyse.net) (Client Quit)
[12:56:58] *** Joins: kadir (~kadir@78.178.105.36)
[12:57:20] *** Quits: phma (phma@2001:5b0:210d:9d18:7608:a226:de13:2590) (Read error: Connection reset by peer)
[12:57:59] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (Ping timeout: 264 seconds)
[12:58:35] *** Joins: phma (phma@2001:5b0:211f:3178:45a8:8496:3ea1:a73a)
[12:59:37] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[13:02:25] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:c075:f6f7:f2c7:7314) (Remote host closed the connection)
[13:04:30] *** Joins: deadmarshal (~deadmarsh@95.38.228.222)
[13:06:11] *** Joins: tengu1 (~tengu1@cpe-70-121-244-14.neb.res.rr.com)
[13:08:55] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[13:15:03] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[13:15:52] *** Joins: jakalx (~jakalx@base.jakalx.net)
[13:18:32] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Remote host closed the connection)
[13:21:06] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[13:21:19] *** Quits: jgeerds (~jgeerds@55d41b94.access.ecotel.net) (Ping timeout: 250 seconds)
[13:24:47] *** Quits: chomwitt (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374) (Ping timeout: 246 seconds)
[13:25:03] *** Quits: aegon (~mike@174.127.249.180) (Remote host closed the connection)
[13:25:13] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Remote host closed the connection)
[13:25:13] *** Joins: chomwitt (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374)
[13:26:02] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[13:27:35] *** Quits: deadmarshal (~deadmarsh@95.38.228.222) (Ping timeout: 246 seconds)
[13:27:42] *** Joins: lavaman (~lavaman@98.38.249.169)
[13:30:09] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[13:31:38] *** Joins: deadmarshal (~deadmarsh@95.38.228.222)
[13:32:11] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[13:34:24] *** Quits: tengu1 (~tengu1@cpe-70-121-244-14.neb.res.rr.com) (Quit: Client closed)
[13:36:12] *** Quits: alzgh (alzgh@user/alzgh) (Ping timeout: 256 seconds)
[13:39:25] *** Joins: benin2 (~benin@106.198.85.27)
[13:40:56] *** Quits: benin (~benin@183.82.176.36) (Ping timeout: 245 seconds)
[13:42:59] *** Joins: benin (~benin@183.82.176.36)
[13:45:05] *** Quits: benin2 (~benin@106.198.85.27) (Ping timeout: 246 seconds)
[13:48:09] *** Joins: benin3 (~benin@106.198.85.27)
[13:48:56] *** Quits: benin (~benin@183.82.176.36) (Ping timeout: 246 seconds)
[13:48:56] *** benin3 is now known as benin
[13:50:39] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Remote host closed the connection)
[13:51:23] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[14:00:03] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[14:00:30] *** Quits: cheater (~Username@user/cheater) (Remote host closed the connection)
[14:01:14] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[14:02:38] *** Joins: benin7 (~benin@183.82.176.36)
[14:02:47] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:c075:f6f7:f2c7:7314)
[14:02:56] *** Quits: xff0x (~xff0x@2001:1a81:522c:6200:1a00:c61c:e1e7:955f) (Ping timeout: 246 seconds)
[14:03:52] *** Joins: xff0x (~xff0x@2001:1a81:522c:6200:54c8:e05a:349a:7362)
[14:04:20] *** Quits: benin (~benin@106.198.85.27) (Ping timeout: 246 seconds)
[14:04:20] *** benin7 is now known as benin
[14:04:20] *** Quits: CiaoSen (~Jura@p200300c95730dd002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[14:04:57] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[14:07:35] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:c075:f6f7:f2c7:7314) (Ping timeout: 264 seconds)
[14:07:52] *** Joins: cheater (~Username@user/cheater)
[14:18:57] *** Quits: deadmarshal (~deadmarsh@95.38.228.222) (Ping timeout: 250 seconds)
[14:19:03] *** Parts: kadir (~kadir@78.178.105.36) (WeeChat 3.3)
[14:22:30] *** Joins: kadir (~kadir@78.178.105.36)
[14:23:02] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 240 seconds)
[14:23:10] *** Quits: mei3 (~mei@user/mei) (Read error: Connection reset by peer)
[14:23:23] *** Quits: kupi (uid212005@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:23:26] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[14:24:18] *** Joins: deadmarshal (~deadmarsh@95.38.228.222)
[14:24:37] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[14:24:37] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[14:24:37] *** finn_elija is now known as FinnElija
[14:25:50] *** Joins: mmhat (~mmh@55d4bb38.access.ecotel.net)
[14:27:30] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: Leaving)
[14:28:10] *** Quits: vysn (~vysn@user/vysn) (Quit: WeeChat 3.2)
[14:28:45] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[14:29:02] *** Quits: loonycyborg_ (~loonycybo@chat.chantal.wesnoth.org) (Quit: ZNC - http://znc.sourceforge.net)
[14:30:11] *** Joins: loonycyborg (~loonycybo@wesnoth/developer/loonycyborg)
[14:30:51] *** Joins: alx741 (~alx741@186.178.109.114)
[14:31:55] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[14:33:05] *** Joins: DNH (~DNH@8.43.122.53)
[14:33:42] *** Quits: whatsupdoc (uid509081@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:33:55] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[14:34:09] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[14:36:42] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[14:38:32] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[14:39:45] *** Quits: acidjnk (~acidjnk@p200300d0c721b72570e3bb829407e876.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[14:42:43] *** Joins: zava (~zava@ip5f5bdf0f.dynamic.kabel-deutschland.de)
[14:43:04] *** Joins: cfricke (~cfricke@user/cfricke)
[14:44:07] *** Joins: benin6 (~benin@106.198.85.27)
[14:44:35] *** Quits: benin (~benin@183.82.176.36) (Ping timeout: 246 seconds)
[14:45:40] *** Joins: Pickchea (~private@user/pickchea)
[14:46:28] *** Joins: benin (~benin@183.82.176.36)
[14:48:26] *** Quits: benin6 (~benin@106.198.85.27) (Ping timeout: 246 seconds)
[14:49:14] *** Joins: __monty__ (~toonn@user/toonn)
[14:55:05] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[14:56:16] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[14:57:05] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 264 seconds)
[15:00:29] *** Joins: mark___ (~a@p200300ef973db1b24086f0a6a24fc4dd.dip0.t-ipconnect.de)
[15:00:40] *** Quits: rookie101 (~rookie@207.154.204.166) (Quit: WeeChat 1.9.1)
[15:01:17] *** Joins: f-a (f2a@f2a.jujube.ircnow.org)
[15:02:54] <f-a> hello, one some linux machines my compiled program fails with «error while loading shared libraries: libffi.so.7: cannot open shared object file: No such file or directory»
[15:03:14] <f-a> reasonably enough, since I use ForeignFunctionInterface in a module
[15:03:57] <f-a> question is: if I somehow remove that module, will I still need libffi? In general, is there a way to check which module/import necessitases libxyz?
[15:04:27] <f-a> and second question: is there a way I can pack libffi.so.7 in the same executable (or at least in the same zip)?
[15:05:32] *** Quits: cosimone (~user@93-47-231-139.ip115.fastwebnet.it) (Remote host closed the connection)
[15:05:53] <[exa]> f-a: "pack in the same executable" is basically "link it statically", so yes
[15:06:30] <[exa]> otoh it is kinda preferable that the library is supplied by the target system
[15:07:11] <f-a> it is such a basic library, but when I have a friend try it it complains about the wrong number (API?) at the end?
[15:07:25] <f-a> makes me wonder if it could somehow choose a different one and pray
[15:07:35] *** Quits: chomwitt (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374) (Ping timeout: 264 seconds)
[15:07:55] <[exa]> usually if you're distributing a binary package you need to properly list dependencies, and the target site needs to install these right
[15:08:19] <[exa]> depending on what you're trying to do I'd just advice for static linking :D
[15:08:21] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[15:08:50] *** Joins: chomwitt (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374)
[15:09:23] <f-a> thanks, I will try
[15:09:57] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[15:10:19] <[exa]> f-a: in any case, what are you precisely trying to achieve? move the software without recompilation?
[15:11:05] <f-a> distribute a binary without people having to fetch a library
[15:11:32] <f-a> since it is a frigging console app and not anything complex
[15:21:33] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 256 seconds)
[15:21:52] *** Joins: jakalx (~jakalx@base.jakalx.net)
[15:22:27] <[exa]> f-a: in that case the static build is the way to go :]
[15:22:40] *** Quits: deadmarshal (~deadmarsh@95.38.228.222) (Ping timeout: 250 seconds)
[15:23:05] <f-a> I am tryig executable-static, wonder why I did not think about it before…
[15:23:29] *** Joins: jrm2 (~jrm@156.34.187.65)
[15:23:32] *** Quits: jrm (~jrm@156.34.187.65) (Read error: Connection reset by peer)
[15:24:12] *** jrm2 is now known as jrm
[15:26:24] *** Joins: burnsidesLlama (~burnsides@dhcp168-014.wadham.ox.ac.uk)
[15:29:37] *** Joins: lavaman (~lavaman@98.38.249.169)
[15:35:11] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 264 seconds)
[15:36:21] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 245 seconds)
[15:37:23] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:40:03] *** Quits: hiredman (~hiredman@frontier1.downey.family) (Ping timeout: 265 seconds)
[15:40:17] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[15:40:34] *** Quits: siraben (~siraben@user/siraben) (Quit: Bridge terminating on SIGTERM)
[15:40:34] *** Quits: sm (~sm@plaintextaccounting/sm) (Quit: Bridge terminating on SIGTERM)
[15:40:34] *** Quits: peddie (~peddie@2001:470:69fc:105::25d) (Quit: Bridge terminating on SIGTERM)
[15:40:35] *** Quits: ongy[m] (~ongymatri@2001:470:69fc:105::5018) (Quit: Bridge terminating on SIGTERM)
[15:40:35] *** Quits: jophish (~jophish@2001:470:69fc:105::670) (Quit: Bridge terminating on SIGTERM)
[15:40:35] *** Quits: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8) (Quit: Bridge terminating on SIGTERM)
[15:40:35] *** Quits: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe) (Quit: Bridge terminating on SIGTERM)
[15:40:35] *** Quits: jmcantrell (~jmcantrel@user/jmcantrell) (Quit: Bridge terminating on SIGTERM)
[15:40:35] *** Quits: Ollie[m] (~ollieocha@2001:470:69fc:105::41a5) (Quit: Bridge terminating on SIGTERM)
[15:40:35] *** Quits: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b) (Quit: Bridge terminating on SIGTERM)
[15:40:35] *** Quits: jinsun_ (~jinsun@user/jinsun) (Quit: Bridge terminating on SIGTERM)
[15:40:35] *** Quits: smichel17[m] (~smichel17@2001:470:69fc:105::2d32) (Quit: Bridge terminating on SIGTERM)
[15:40:35] *** Quits: maralorn (~maralorn@2001:470:69fc:105::251) (Quit: Bridge terminating on SIGTERM)
[15:40:35] *** Quits: Magnus[m] (~magthetch@2001:470:69fc:105::d1a7) (Quit: Bridge terminating on SIGTERM)
[15:40:35] *** Quits: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036) (Quit: Bridge terminating on SIGTERM)
[15:40:35] *** Quits: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee) (Quit: Bridge terminating on SIGTERM)
[15:40:35] *** Quits: hughjfchen[m] (~hughjfche@2001:470:69fc:105::c29d) (Quit: Bridge terminating on SIGTERM)
[15:40:35] *** Quits: asdofindia-m (~akshaymat@2001:470:69fc:105::831) (Quit: Bridge terminating on SIGTERM)
[15:40:36] *** Quits: reza[m] (~rezaphone@2001:470:69fc:105::3eda) (Quit: Bridge terminating on SIGTERM)
[15:40:36] *** Quits: xosdy[m] (~xosdyalet@2001:470:69fc:105::31f7) (Quit: Bridge terminating on SIGTERM)
[15:40:37] *** Quits: oak- (~oakuniver@2001:470:69fc:105::fcd) (Quit: Bridge terminating on SIGTERM)
[15:40:37] *** Quits: iammrinal0[m] (~iammrinal@2001:470:69fc:105::1:2248) (Quit: Bridge terminating on SIGTERM)
[15:40:37] *** Quits: ru0mad[m] (~ru0madmat@2001:470:69fc:105::9b2) (Quit: Bridge terminating on SIGTERM)
[15:40:37] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Quit: Bridge terminating on SIGTERM)
[15:40:37] *** Quits: srid[m] (~sridmatri@2001:470:69fc:105::1c2) (Quit: Bridge terminating on SIGTERM)
[15:40:37] *** Quits: Deewiant (~deewiant@2001:470:69fc:105::2fd3) (Quit: Bridge terminating on SIGTERM)
[15:40:37] *** Quits: unrooted (~unrooted@2001:470:69fc:105::a4a) (Quit: Bridge terminating on SIGTERM)
[15:40:37] *** Quits: sky_lounge[m] (~skylounge@2001:470:69fc:105::efa6) (Quit: Bridge terminating on SIGTERM)
[15:40:37] *** Quits: soft (~soft@2001:470:69fc:105::c75) (Quit: Bridge terminating on SIGTERM)
[15:40:37] *** Quits: anotherbruce[m] (~anotherbr@2001:470:69fc:105::1:2548) (Quit: Bridge terminating on SIGTERM)
[15:40:37] *** Quits: dexmad[m] (~dexmadmat@2001:470:69fc:105::e056) (Quit: Bridge terminating on SIGTERM)
[15:40:38] *** Quits: carmysilna (~brightly-@2001:470:69fc:105::2190) (Quit: Bridge terminating on SIGTERM)
[15:40:38] *** Quits: Morrow[m] (~morrowmma@2001:470:69fc:105::1d0) (Quit: Bridge terminating on SIGTERM)
[15:40:38] *** Quits: schuelermine[m] (~schuelerm@user/schuelermine) (Quit: Bridge terminating on SIGTERM)
[15:40:38] *** Quits: surgeon[m] (~surge9nma@2001:470:69fc:105::f585) (Quit: Bridge terminating on SIGTERM)
[15:40:38] *** Quits: kevin[m]1 (~pnotequal@2001:470:69fc:105::a54) (Quit: Bridge terminating on SIGTERM)
[15:40:39] *** Quits: TomWesterhout[m] (~twesterho@2001:470:69fc:105::1:2918) (Quit: Bridge terminating on SIGTERM)
[15:40:39] *** Quits: Arathorn (~arathorn@2001:470:69fc:105::1f) (Quit: Bridge terminating on SIGTERM)
[15:40:39] *** Quits: moats (~oats@user/oats) (Quit: Bridge terminating on SIGTERM)
[15:40:39] *** Quits: Domino[m] (~dominothe@2001:470:69fc:105::1:271b) (Quit: Bridge terminating on SIGTERM)
[15:40:39] *** Quits: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9) (Quit: Bridge terminating on SIGTERM)
[15:40:39] *** Quits: afotgkmnzj7asv3r (~afotgkmnz@2001:470:69fc:105::c24b) (Quit: Bridge terminating on SIGTERM)
[15:40:39] *** Quits: ilkecan[m] (~ilkecanma@2001:470:69fc:105::1:79b) (Quit: Bridge terminating on SIGTERM)
[15:40:39] *** Quits: ericson2314 (~ericson23@2001:470:69fc:105::70c) (Quit: Bridge terminating on SIGTERM)
[15:40:39] *** Quits: unclechu (~unclechu@2001:470:69fc:105::354) (Quit: Bridge terminating on SIGTERM)
[15:40:39] *** Quits: justosophy[m] (~justosoph@2001:470:69fc:105::572f) (Quit: Bridge terminating on SIGTERM)
[15:40:40] *** Quits: wysteriary[m] (~wysteriar@2001:470:69fc:105::a42e) (Quit: Bridge terminating on SIGTERM)
[15:40:40] *** Quits: jesser[m] (~jessermat@2001:470:69fc:105::d5ae) (Quit: Bridge terminating on SIGTERM)
[15:40:40] *** Quits: bb010g (~bb010g@2001:470:69fc:105::9a5) (Quit: Bridge terminating on SIGTERM)
[15:40:40] *** Quits: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22) (Quit: Bridge terminating on SIGTERM)
[15:40:40] *** Quits: codygman[m] (~codygman@2001:470:69fc:105::b4ba) (Quit: Bridge terminating on SIGTERM)
[15:40:40] *** Quits: Drew[m] (~drewefenw@2001:470:69fc:105::c8c4) (Quit: Bridge terminating on SIGTERM)
[15:40:40] *** Quits: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1) (Quit: Bridge terminating on SIGTERM)
[15:40:40] *** Quits: rednaZ[m] (~r3dnazmat@2001:470:69fc:105::ba70) (Quit: Bridge terminating on SIGTERM)
[15:40:40] *** Quits: RosarioPulella[m (~rosariopu@2001:470:69fc:105::a57) (Quit: Bridge terminating on SIGTERM)
[15:40:41] *** Quits: psydroid (~psydroid@user/psydroid) (Quit: Bridge terminating on SIGTERM)
[15:40:41] *** Quits: cdsmith (~cdsmithma@2001:470:69fc:105::284) (Quit: Bridge terminating on SIGTERM)
[15:40:41] *** Quits: PotatoHatsue (~berberman@2001:470:69fc:105::b488) (Quit: Bridge terminating on SIGTERM)
[15:40:41] *** Quits: fakehacker[m] (~fakehacke@2001:470:69fc:105::b5f0) (Quit: Bridge terminating on SIGTERM)
[15:40:41] *** Quits: Topik[m] (~topikmatr@2001:470:69fc:105::a082) (Quit: Bridge terminating on SIGTERM)
[15:40:41] *** Quits: jchia[m] (~jchiamatr@2001:470:69fc:105::c50b) (Quit: Bridge terminating on SIGTERM)
[15:40:41] *** Quits: zwro[m] (~zwromatri@2001:470:69fc:105::1d4) (Quit: Bridge terminating on SIGTERM)
[15:40:41] *** Quits: fcortesi (~fcortesi@2001:470:69fc:105::f3a9) (Quit: Bridge terminating on SIGTERM)
[15:40:41] *** Quits: zfnmxt (~zfnmxtzfn@user/zfnmxt) (Quit: Bridge terminating on SIGTERM)
[15:40:41] *** Quits: mekeor[m] (~mekeormat@2001:470:69fc:105::17e4) (Quit: Bridge terminating on SIGTERM)
[15:40:41] *** Quits: Tisoxin (~ikosit@user/ikosit) (Quit: Bridge terminating on SIGTERM)
[15:40:42] *** Quits: Artem[m] (~artemtype@2001:470:69fc:105::75b) (Quit: Bridge terminating on SIGTERM)
[15:40:42] *** Quits: ppseafield[m] (~elementpp@2001:470:69fc:105::1:250a) (Quit: Bridge terminating on SIGTERM)
[15:40:42] *** Quits: puffnfresh[m] (~puffnfres@2001:470:69fc:105::1:22da) (Quit: Bridge terminating on SIGTERM)
[15:40:42] *** Quits: Tavi[m] (~factoidde@2001:470:69fc:105::1:819) (Quit: Bridge terminating on SIGTERM)
[15:40:43] *** Quits: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba) (Quit: Bridge terminating on SIGTERM)
[15:40:43] *** Quits: kadoban (~kadoban@user/kadoban) (Quit: Bridge terminating on SIGTERM)
[15:40:43] *** Quits: gdhffd[m] (~gdhffdmat@2001:470:69fc:105::1:799) (Quit: Bridge terminating on SIGTERM)
[15:40:43] *** Quits: fgaz (~fgaz@2001:470:69fc:105::842) (Quit: Bridge terminating on SIGTERM)
[15:40:43] *** Quits: jneira[m] (~jneiramat@2001:470:69fc:105::d729) (Quit: Bridge terminating on SIGTERM)
[15:40:43] *** Quits: conphiz[m] (~conphizma@2001:470:69fc:105::c052) (Quit: Bridge terminating on SIGTERM)
[15:40:43] *** Quits: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be) (Quit: Bridge terminating on SIGTERM)
[15:40:43] *** Quits: Deide (~deide@user/deide) (Quit: Bridge terminating on SIGTERM)
[15:40:43] *** Quits: stoicswe[m] (~deadlette@2001:470:69fc:105::d277) (Quit: Bridge terminating on SIGTERM)
[15:40:43] *** Quits: Orbstheorem (~orbstheor@2001:470:69fc:105::a56) (Quit: Bridge terminating on SIGTERM)
[15:40:44] *** Quits: InternetManaging (~imjmatrix@2001:470:69fc:105::1:2ea5) (Quit: Bridge terminating on SIGTERM)
[15:40:44] *** Quits: OndejSkup[m] (~mimivxmat@2001:470:69fc:105::c300) (Quit: Bridge terminating on SIGTERM)
[15:40:44] *** Quits: JoelMcCracken[m] (~joelmccra@2001:470:69fc:105::8405) (Quit: Bridge terminating on SIGTERM)
[15:40:44] *** Quits: tomku[m] (~tomkumozi@2001:470:69fc:105::1:2fcb) (Quit: Bridge terminating on SIGTERM)
[15:40:45] *** Quits: utk (~utk@2001:470:69fc:105::1:2fe0) (Quit: Bridge terminating on SIGTERM)
[15:40:45] *** Quits: thedward[m] (~thedwardm@2001:470:69fc:105::f79) (Quit: Bridge terminating on SIGTERM)
[15:40:45] *** Quits: lambdandy[m] (~lambdandy@2001:470:69fc:105::1:3045) (Quit: Bridge terminating on SIGTERM)
[15:40:45] *** Quits: quantum (~quantum@user/quantum/x-8556232) (Quit: Bridge terminating on SIGTERM)
[15:40:45] *** Quits: alex[m]1231 (~alexchete@2001:470:69fc:105::1:1001) (Quit: Bridge terminating on SIGTERM)
[15:40:45] *** Quits: denbrahe[m] (~denbrahem@2001:470:69fc:105::19c0) (Quit: Bridge terminating on SIGTERM)
[15:40:45] *** Quits: bitonic (~bitonic@2001:470:69fc:105::1812) (Quit: Bridge terminating on SIGTERM)
[15:40:45] *** Quits: fendor[m] (~fendormat@2001:470:69fc:105::fcbd) (Quit: Bridge terminating on SIGTERM)
[15:40:45] *** Quits: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886) (Quit: Bridge terminating on SIGTERM)
[15:40:45] *** Quits: marinelli[m] (~marinelli@2001:470:69fc:105::2d8) (Quit: Bridge terminating on SIGTERM)
[15:40:45] *** Quits: TomasJakl[m] (~jaklttchn@2001:470:69fc:105::a42) (Quit: Bridge terminating on SIGTERM)
[15:40:46] *** Quits: craige[m] (~craigemcw@2001:470:69fc:105::35f1) (Quit: Bridge terminating on SIGTERM)
[15:40:46] *** Quits: kosmikus[m] (~andresloe@2001:470:69fc:105::95d) (Quit: Bridge terminating on SIGTERM)
[15:40:46] *** Quits: the-coot[m] (~the-cootm@2001:470:69fc:105::95f) (Quit: Bridge terminating on SIGTERM)
[15:40:46] *** Quits: ServerStatsDisco (~serversta@2001:470:69fc:105::1a) (Quit: Bridge terminating on SIGTERM)
[15:40:46] *** Quits: xddq[m] (~xddqmatri@2001:470:69fc:105::bfd8) (Quit: Bridge terminating on SIGTERM)
[15:40:46] *** Quits: jkachmar (~jkachmar@2001:470:69fc:105::c72d) (Quit: Bridge terminating on SIGTERM)
[15:40:46] *** Quits: acco[m] (~accotedom@2001:470:69fc:105::1:3236) (Quit: Bridge terminating on SIGTERM)
[15:40:46] *** Quits: santiagopim[m] (~santiagop@2001:470:69fc:105::e57d) (Quit: Bridge terminating on SIGTERM)
[15:40:46] *** Quits: aidy (~aidy@2001:470:69fc:105::c7b4) (Quit: Bridge terminating on SIGTERM)
[15:40:56] *** Quits: unmanbearpig (~unmanbear@user/unmanbearpig) (Ping timeout: 245 seconds)
[15:41:33] *** Joins: hiredman (~hiredman@frontier1.downey.family)
[15:41:43] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[15:42:57] *** Joins: unmanbearpig (~unmanbear@user/unmanbearpig)
[15:43:08] <dminuoso> Mmm, I really miss: fromListEff :: Applicative f => (k -> a -> f ()) -> [(k, a)] -> f (Map k a)
[15:43:11] <dminuoso> This would be so useful :(
[15:43:26] <yin> do we have linear types yet?
[15:43:48] <dminuoso> I mean I can build something similar with alterF, but definitely not with the same asymptotics
[15:52:13] *** Joins: deadmarshal (~deadmarsh@95.38.228.222)
[15:57:07] <tomsmeding> yin: {-# LANGUAGE LinearTypes #-} works on ghc 9.0 :)
[15:57:12] *** Quits: deadmarshal (~deadmarsh@95.38.228.222) (Ping timeout: 268 seconds)
[15:58:34] <hpc> my dream of an automatic type-safe rust ffi are inching ever closer to reality :D
[15:58:35] *** Joins: jchia[m] (~jchiamatr@2001:470:69fc:105::c50b)
[15:58:52] <tomsmeding> dminuoso: I assume that's not just fromListEff f l = Map.fromList l <$ traverse (uncurry f) l
[15:58:55] *** Joins: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22)
[15:58:55] *** Joins: fgaz (~fgaz@2001:470:69fc:105::842)
[15:58:55] *** Joins: peddie (~peddie@2001:470:69fc:105::25d)
[15:58:55] *** Joins: cdsmith (~cdsmithma@2001:470:69fc:105::284)
[15:58:56] *** Joins: Morrow[m] (~morrowmma@2001:470:69fc:105::1d0)
[15:59:08] *** Joins: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9)
[15:59:23] *** Joins: ru0mad[m] (~ru0madmat@2001:470:69fc:105::9b2)
[15:59:34] *** Joins: gdhffd[m] (~gdhffdmat@2001:470:69fc:105::1:799)
[15:59:48] *** Joins: bb010g (~bb010g@2001:470:69fc:105::9a5)
[15:59:49] *** Joins: ServerStatsDisco (~serversta@2001:470:69fc:105::1a)
[15:59:49] *** Joins: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b)
[15:59:49] *** Joins: the-coot[m] (~the-cootm@2001:470:69fc:105::95f)
[15:59:49] *** Joins: moats (~oats@user/oats)
[16:00:01] *** Joins: soft (~soft@2001:470:69fc:105::c75)
[16:00:02] *** Joins: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32)
[16:00:15] *** Joins: oak- (~oakuniver@2001:470:69fc:105::fcd)
[16:00:15] *** Joins: kadoban (~kadoban@user/kadoban)
[16:00:15] *** Joins: bitonic (~bitonic@2001:470:69fc:105::1812)
[16:00:15] *** Joins: jophish (~jophish@2001:470:69fc:105::670)
[16:00:15] *** Joins: ericson2314 (~ericson23@2001:470:69fc:105::70c)
[16:00:16] *** Joins: Arathorn (~arathorn@2001:470:69fc:105::1f)
[16:00:16] *** Joins: Ollie[m] (~ollieocha@2001:470:69fc:105::41a5)
[16:00:16] *** Joins: PotatoHatsue (~berberman@2001:470:69fc:105::b488)
[16:00:16] *** Joins: unclechu (~unclechu@2001:470:69fc:105::354)
[16:00:30] *** Joins: Deewiant (~deewiant@2001:470:69fc:105::2fd3)
[16:00:30] *** Joins: unrooted (~unrooted@2001:470:69fc:105::a4a)
[16:00:30] *** Joins: rednaZ[m] (~r3dnazmat@2001:470:69fc:105::ba70)
[16:00:42] *** Joins: xddq[m] (~xddqmatri@2001:470:69fc:105::bfd8)
[16:00:42] *** Joins: maralorn (~maralorn@2001:470:69fc:105::251)
[16:00:42] *** Joins: denbrahe[m] (~denbrahem@2001:470:69fc:105::19c0)
[16:00:54] *** Joins: jesser[m] (~jessermat@2001:470:69fc:105::d5ae)
[16:01:06] *** Joins: reza[m] (~rezaphone@2001:470:69fc:105::3eda)
[16:01:06] *** Joins: quantum (~quantum@user/quantum/x-8556232)
[16:01:06] *** Joins: marinelli[m] (~marinelli@2001:470:69fc:105::2d8)
[16:01:07] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[16:01:22] *** Joins: Orbstheorem (~orbstheor@2001:470:69fc:105::a56)
[16:01:22] *** Joins: craige[m] (~craigemcw@2001:470:69fc:105::35f1)
[16:01:39] *** Joins: afotgkmnzj7asv3r (~afotgkmnz@2001:470:69fc:105::c24b)
[16:01:39] *** Joins: schuelermine[m] (~schuelerm@user/schuelermine)
[16:01:40] *** Joins: sm (~sm@plaintextaccounting/sm)
[16:01:54] *** Joins: justosophy[m] (~justosoph@2001:470:69fc:105::572f)
[16:01:58] *** Joins: kevin[m]1 (~pnotequal@2001:470:69fc:105::a54)
[16:02:16] *** Joins: ppseafield[m] (~elementpp@2001:470:69fc:105::1:250a)
[16:02:21] *** Joins: Deide (~deide@user/deide)
[16:02:34] *** Joins: fakehacker[m] (~fakehacke@2001:470:69fc:105::b5f0)
[16:02:34] *** Joins: hughjfchen[m] (~hughjfche@2001:470:69fc:105::c29d)
[16:02:35] *** Joins: Artem[m] (~artemtype@2001:470:69fc:105::75b)
[16:02:35] *** Joins: psydroid (~psydroid@user/psydroid)
[16:02:35] *** Joins: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8)
[16:02:58] *** Joins: wysteriary[m] (~wysteriar@2001:470:69fc:105::a42e)
[16:03:02] *** Joins: zwro[m] (~zwromatri@2001:470:69fc:105::1d4)
[16:03:14] *** Joins: stoicswe[m] (~deadlette@2001:470:69fc:105::d277)
[16:03:14] *** Joins: Topik[m] (~topikmatr@2001:470:69fc:105::a082)
[16:03:14] *** Joins: ongy[m] (~ongymatri@2001:470:69fc:105::5018)
[16:03:15] *** Joins: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba)
[16:03:29] *** Joins: asdofindia-m (~akshaymat@2001:470:69fc:105::831)
[16:03:29] *** Joins: Drew[m] (~drewefenw@2001:470:69fc:105::c8c4)
[16:03:29] *** Joins: jneira[m] (~jneiramat@2001:470:69fc:105::d729)
[16:03:29] *** Joins: Magnus[m] (~magthetch@2001:470:69fc:105::d1a7)
[16:03:29] *** Joins: siraben (~siraben@user/siraben)
[16:03:42] *** Joins: dexmad[m] (~dexmadmat@2001:470:69fc:105::e056)
[16:03:42] *** Joins: Movedtosridoneem (~sridmatri@2001:470:69fc:105::1c2)
[16:03:42] *** Joins: smichel17[m] (~smichel17@2001:470:69fc:105::2d32)
[16:03:42] *** Joins: alex[m] (~alexchete@2001:470:69fc:105::1:1001)
[16:03:42] *** Joins: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036)
[16:03:54] *** Joins: anotherbruce[m] (~anotherbr@2001:470:69fc:105::1:2548)
[16:03:54] *** Joins: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be)
[16:03:54] *** Joins: Tisoxin (~ikosit@user/ikosit)
[16:03:55] *** Joins: carmysilna (~brightly-@2001:470:69fc:105::2190)
[16:03:55] *** Joins: fendor[m] (~fendormat@2001:470:69fc:105::fcbd)
[16:03:55] *** Joins: aidy (~aidy@2001:470:69fc:105::c7b4)
[16:03:55] *** Joins: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886)
[16:04:07] *** Joins: iammrinal0[m] (~iammrinal@2001:470:69fc:105::1:2248)
[16:04:20] *** Joins: TomasJakl[m] (~jaklttchn@2001:470:69fc:105::a42)
[16:04:20] *** Joins: OndejSkup[m] (~mimivxmat@2001:470:69fc:105::c300)
[16:04:20] *** Joins: InternetManaging (~imjmatrix@2001:470:69fc:105::1:2ea5)
[16:04:32] *** Joins: kosmikus[m] (~andresloe@2001:470:69fc:105::95d)
[16:04:32] *** Joins: ilkecan[m] (~ilkecanma@2001:470:69fc:105::1:79b)
[16:04:46] *** Joins: codygman[m] (~codygman@2001:470:69fc:105::b4ba)
[16:04:51] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:c075:f6f7:f2c7:7314)
[16:04:58] *** Joins: xosdy[m] (~xosdyalet@2001:470:69fc:105::31f7)
[16:04:58] *** Joins: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe)
[16:04:58] *** Joins: santiagopim[m] (~santiagop@2001:470:69fc:105::e57d)
[16:05:11] *** Joins: Tavi[m] (~factoidde@2001:470:69fc:105::1:819)
[16:05:11] *** Joins: jmcantrell (~jmcantrel@user/jmcantrell)
[16:05:11] *** Joins: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee)
[16:05:25] *** Joins: jkachmar (~jkachmar@2001:470:69fc:105::c72d)
[16:05:39] *** Quits: Kaipi (~Kaiepi@156.34.44.192) (Remote host closed the connection)
[16:05:39] *** Joins: JoelMcCracken[m] (~joelmccra@2001:470:69fc:105::8405)
[16:05:50] *** Joins: RosarioPulella[m (~rosariopu@2001:470:69fc:105::a57)
[16:05:50] *** Joins: puffnfresh[m] (~puffnfres@2001:470:69fc:105::1:22da)
[16:05:52] <dminuoso> tomsmeding: Yeah.
[16:05:59] <dminuoso> I want that to be called on conflict.
[16:06:02] *** Joins: Kaipi (~Kaiepi@156.34.44.192)
[16:06:02] *** Joins: TomWesterhout[m] (~twesterho@2001:470:69fc:105::1:2918)
[16:06:05] <dminuoso> Oh
[16:06:07] <dminuoso> It should rather be:
[16:06:14] *** Joins: sky_lounge[m] (~skylounge@2001:470:69fc:105::efa6)
[16:06:14] *** Joins: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1)
[16:06:15] *** Joins: jinsun_ (~jinsun@user/jinsun)
[16:06:16] <dminuoso> fromListEff :: Applicative f => (k -> k -> a -> f ()) -> [(k, a)] -> f (Map k a)
[16:06:18] <dminuoso> Obviously
[16:06:26] *** Joins: conphiz[m] (~conphizma@2001:470:69fc:105::c052)
[16:06:29] <dminuoso> That would have avoided the ambiguity here I think
[16:06:39] *** Joins: acco[m] (~accotedom@2001:470:69fc:105::1:3236)
[16:06:39] *** Joins: surgeon[m] (~surge9nma@2001:470:69fc:105::f585)
[16:06:51] *** Joins: Domino[m] (~dominothe@2001:470:69fc:105::1:271b)
[16:06:52] *** Joins: tomku[m] (~tomkumozi@2001:470:69fc:105::1:2fcb)
[16:06:52] *** Joins: fcortesi (~fcortesi@2001:470:69fc:105::f3a9)
[16:06:56] *** Joins: utk (~utk@2001:470:69fc:105::1:2fe0)
[16:06:59] *** Quits: rkrishnan (~user@122.167.19.65) (Ping timeout: 264 seconds)
[16:07:08] *** Joins: thedward[m] (~thedwardm@2001:470:69fc:105::f79)
[16:07:20] *** Joins: lambdandy[m] (~lambdandy@2001:470:69fc:105::1:3045)
[16:08:27] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f6e3:7400:d8e7:a6fa:245:fafa)
[16:09:32] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:c075:f6f7:f2c7:7314) (Ping timeout: 265 seconds)
[16:11:14] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi) (Ping timeout: 260 seconds)
[16:11:53] *** Joins: cosimone (~user@93-47-231-139.ip115.fastwebnet.it)
[16:12:42] *** Joins: machinedgod (~machinedg@24.105.81.50)
[16:13:36] <tomsmeding> ah right
[16:14:25] <tomsmeding> if you want the right asymptotics without much hassle, but perhaps non-optimal constant factor: sort on key first, then groupBy ((==) `on` fst), do the deduplication yourself, and then Map.fromListAsc
[16:14:30] <tomsmeding> but yeah
[16:15:06] *** Joins: wennefer0 (~wennefer0@c-73-69-143-60.hsd1.ma.comcast.net)
[16:15:42] *** Quits: wennefer0 (~wennefer0@c-73-69-143-60.hsd1.ma.comcast.net) (Remote host closed the connection)
[16:16:10] *** Quits: DNH (~DNH@8.43.122.53) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:17:50] <dminuoso> tomsmeding: Id probably just write something custom as opposed to groupBy
[16:20:00] *** Quits: ericson2314 (~ericson23@2001:470:69fc:105::70c) (Quit: Client limit exceeded: 20000)
[16:20:00] *** Quits: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8) (Quit: Client limit exceeded: 20000)
[16:20:00] *** Quits: siraben (~siraben@user/siraben) (Quit: Client limit exceeded: 20000)
[16:20:01] *** Quits: max22- (~maxime@2a01cb08833598005dabd5498813ae20.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[16:20:02] *** Quits: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22) (Quit: Client limit exceeded: 20000)
[16:20:11] *** Quits: ServerStatsDisco (~serversta@2001:470:69fc:105::1a) (Quit: Client limit exceeded: 20000)
[16:20:31] *** Quits: puffnfresh[m] (~puffnfres@2001:470:69fc:105::1:22da) (Quit: Client limit exceeded: 20000)
[16:20:43] *** Quits: peddie (~peddie@2001:470:69fc:105::25d) (Quit: Client limit exceeded: 20000)
[16:20:43] *** Quits: kadoban (~kadoban@user/kadoban) (Quit: Client limit exceeded: 20000)
[16:20:46] *** Quits: fgaz (~fgaz@2001:470:69fc:105::842) (Quit: Client limit exceeded: 20000)
[16:20:47] *** Quits: unrooted (~unrooted@2001:470:69fc:105::a4a) (Quit: Client limit exceeded: 20000)
[16:20:49] *** Quits: sm (~sm@plaintextaccounting/sm) (Quit: Client limit exceeded: 20000)
[16:20:51] *** Quits: Arathorn (~arathorn@2001:470:69fc:105::1f) (Quit: Client limit exceeded: 20000)
[16:20:54] *** Quits: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1) (Quit: Client limit exceeded: 20000)
[16:20:54] *** Quits: psydroid (~psydroid@user/psydroid) (Quit: Client limit exceeded: 20000)
[16:20:58] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Quit: Client limit exceeded: 20000)
[16:21:01] *** Quits: cdsmith (~cdsmithma@2001:470:69fc:105::284) (Quit: Client limit exceeded: 20000)
[16:21:09] *** Quits: quantum (~quantum@user/quantum/x-8556232) (Quit: Client limit exceeded: 20000)
[16:21:10] *** Quits: Tisoxin (~ikosit@user/ikosit) (Quit: Client limit exceeded: 20000)
[16:21:16] *** Quits: Deide (~deide@user/deide) (Quit: Client limit exceeded: 20000)
[16:21:16] *** Quits: denbrahe[m] (~denbrahem@2001:470:69fc:105::19c0) (Quit: Client limit exceeded: 20000)
[16:21:16] *** Quits: rednaZ[m] (~r3dnazmat@2001:470:69fc:105::ba70) (Quit: Client limit exceeded: 20000)
[16:21:16] *** Quits: InternetManaging (~imjmatrix@2001:470:69fc:105::1:2ea5) (Quit: Client limit exceeded: 20000)
[16:21:16] *** Quits: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b) (Quit: Client limit exceeded: 20000)
[16:21:23] *** Quits: the-coot[m] (~the-cootm@2001:470:69fc:105::95f) (Quit: Client limit exceeded: 20000)
[16:21:23] *** Quits: jophish (~jophish@2001:470:69fc:105::670) (Quit: Client limit exceeded: 20000)
[16:21:24] *** Quits: PotatoHatsue (~berberman@2001:470:69fc:105::b488) (Quit: Client limit exceeded: 20000)
[16:21:25] *** Quits: unclechu (~unclechu@2001:470:69fc:105::354) (Quit: Client limit exceeded: 20000)
[16:21:50] *** Quits: maralorn (~maralorn@2001:470:69fc:105::251) (Quit: Client limit exceeded: 20000)
[16:21:51] *** Quits: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe) (Quit: Client limit exceeded: 20000)
[16:22:04] *** Quits: Topik[m] (~topikmatr@2001:470:69fc:105::a082) (Quit: Client limit exceeded: 20000)
[16:22:06] *** Quits: carmysilna (~brightly-@2001:470:69fc:105::2190) (Quit: Client limit exceeded: 20000)
[16:22:08] *** Quits: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32) (Quit: Client limit exceeded: 20000)
[16:22:26] *** Joins: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22)
[16:22:26] *** Joins: fgaz (~fgaz@2001:470:69fc:105::842)
[16:22:26] *** Joins: ServerStatsDisco (~serversta@2001:470:69fc:105::1a)
[16:22:26] *** Joins: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b)
[16:22:26] *** Joins: the-coot[m] (~the-cootm@2001:470:69fc:105::95f)
[16:22:26] *** Joins: kadoban (~kadoban@user/kadoban)
[16:22:26] *** Joins: ericson2314 (~ericson23@2001:470:69fc:105::70c)
[16:22:26] *** Joins: PotatoHatsue (~berberman@2001:470:69fc:105::b488)
[16:22:27] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[16:22:27] *** Joins: sm (~sm@plaintextaccounting/sm)
[16:22:27] *** Joins: Deide (~deide@user/deide)
[16:22:27] *** Joins: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8)
[16:22:27] *** Joins: psydroid (~psydroid@user/psydroid)
[16:22:27] *** Joins: siraben (~siraben@user/siraben)
[16:22:28] *** Joins: Tisoxin (~ikosit@user/ikosit)
[16:22:28] *** Joins: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1)
[16:22:30] *** Joins: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32)
[16:22:39] *** Joins: Topik[m] (~topikmatr@2001:470:69fc:105::a082)
[16:22:39] *** Joins: rednaZ[m] (~r3dnazmat@2001:470:69fc:105::ba70)
[16:22:40] *** Joins: InternetManaging (~imjmatrix@2001:470:69fc:105::1:2ea5)
[16:22:40] *** Joins: unrooted (~unrooted@2001:470:69fc:105::a4a)
[16:22:40] *** Joins: denbrahe[m] (~denbrahem@2001:470:69fc:105::19c0)
[16:22:40] *** Joins: jophish (~jophish@2001:470:69fc:105::670)
[16:22:40] *** Joins: unclechu (~unclechu@2001:470:69fc:105::354)
[16:22:40] *** Joins: puffnfresh[m] (~puffnfres@2001:470:69fc:105::1:22da)
[16:22:40] *** Joins: peddie (~peddie@2001:470:69fc:105::25d)
[16:22:40] *** Joins: cdsmith (~cdsmithma@2001:470:69fc:105::284)
[16:22:40] *** Joins: Arathorn (~arathorn@2001:470:69fc:105::1f)
[16:22:41] *** Joins: carmysilna (~brightly-@2001:470:69fc:105::2190)
[16:22:41] *** Joins: quantum (~quantum@user/quantum/x-8556232)
[16:22:43] *** Joins: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe)
[16:22:43] *** Joins: maralorn (~maralorn@2001:470:69fc:105::251)
[16:23:47] *** Quits: shidima (~shidima@46.44.183.25) (Ping timeout: 264 seconds)
[16:24:42] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[16:26:23] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[16:26:42] *** Joins: sunarch (uid526836@user/sunarch)
[16:30:41] *** Quits: unmanbearpig (~unmanbear@user/unmanbearpig) (Ping timeout: 256 seconds)
[16:30:41] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 250 seconds)
[16:32:25] *** Joins: unmanbearpig (~unmanbear@user/unmanbearpig)
[16:33:21] *** Joins: DNH (~DNH@8.43.122.53)
[16:34:50] *** Quits: [Kalisto] (~nico@user/kalisto/x-8968079) (Ping timeout: 246 seconds)
[16:37:20] *** Joins: desantra (~skykanin@user/skykanin)
[16:42:19] *** Joins: [Kalisto] (~nico@user/kalisto/x-8968079)
[16:44:42] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:47:42] *** Joins: whatif (~user@114.250.136.140)
[16:48:22] <whatif> list comprehension is really fun, map f alist = [ f(i) | i <- alist ]
[16:48:45] <Hecate> yes
[16:49:35] *** Quits: dsrt^ (~dsrt@h50.174.139.63.static.ip.windstream.net) (Remote host closed the connection)
[16:50:47] <yushyin> i don't use it that often in haskell, but fun nevertheless, yes.
[16:51:35] *** Joins: deadmarshal (~deadmarsh@95.38.228.222)
[16:52:45] *** Joins: wei2912 (~wei2912@138.75.71.147)
[16:53:09] <whatif> how to express a list that current one element to end, like in [1..10] but I want [3..10]
[16:53:50] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[16:54:41] <whatif> in python, [ alist[i::] for i in range(len(alist)) if i == 3 ]
[16:55:44] <whatif> emm, for example, there's an element 3 in alist, I'd like to get the rest, start from 3
[16:56:31] <whatif> normal way is splitOn or splitAt stuff... I'd like to know the list comprehension way
[16:56:58] <whatif> [ alist[i::] for i in range(len(alist)) if alist[i] == 3 ]
[16:58:22] *** Quits: zava (~zava@ip5f5bdf0f.dynamic.kabel-deutschland.de) (Ping timeout: 260 seconds)
[16:59:56] <hpc> [f x | x <- list, some boolean expression that contains x]
[17:00:01] <whatif> haskell no list slice, but has `drop`
[17:00:15] <tromp> there is no list  comprehension equivalent of dropWhile (/= 3)
[17:00:23] <hpc> (which outside a list comprehension is guard)
[17:00:27] <hpc> :t guard
[17:00:28] <lambdabot> Alternative f => Bool -> f ()
[17:00:31] <hpc> there's also filter
[17:00:32] <hpc> :t filter
[17:00:33] <lambdabot> (a -> Bool) -> [a] -> [a]
[17:00:43] <xddq[m]>  * I think you look for "break"?
[17:00:44] <xddq[m]> `snd $ break (==3) [1..10]`
[17:00:44] <xddq[m]> nvm. I should read the full post :D
[17:00:44] <xddq[m]> whatif: I think you look for "break"?
[17:00:44] <xddq[m]> ```snd $ break (==3) xs```
[17:00:44] <xddq[m]> > <@whatif:libera.chat> how to express a list that current one element to end, like in [1..10] but I want [3..10]
[17:00:44] <xddq[m]>  * I think you look for "break"?
[17:00:45] <xddq[m]> `snd $ break (==3) [1..10]`
[17:00:45] <lambdabot>  <hint>:1:1: error: parse error on input ‘<@’
[17:00:50] *** Quits: sagax (~sagax_nb@user/sagax) (Quit: Konversation terminated!)
[17:01:23] <whatif> xddq[m]: I wonder the list comprehension way
[17:01:56] <whatif> I found that list comprehension and list slice are very useful in python
[17:02:02] <whatif> and fun
[17:02:30] *** Quits: jmorris (uid433911@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[17:02:39] <yushyin> your python example returns a list in list
[17:03:10] <yushyin> it's not really a slice, i would argue
[17:04:32] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[17:04:33] <whatif> for example, get the a digit string from a string's end, "abc12" -> "12", "ab12c3" -> "3", with python, [ alist[i::] for i in range(len(alist)) if alist[i::].isdigit() ]
[17:04:34] <yushyin> i can translate your example `[ alist[i::] for i in range(len(alist)) if alist[i] == 3 ]' directly to haskell and it would look like this `let alist = [1..10] in [[i .. (length alist)] | i <- alist, i == 3]'
[17:06:13] <whatif> yushyin: what if the list is [1,3,2,7,9]
[17:06:28] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[17:06:52] <whatif> python code still return [3,2,7,9], the right one
[17:07:37] <yushyin> we would use dropWhile/takeWhile or so
[17:08:43] <whatif> yushyin: get the a digit string from a string's end, "abc12" -> "12", "ab12c3" -> "3", what's the haskell list comprehension way?
[17:08:45] <yushyin> or at least I wouldn't use list comprehension for such things
[17:09:58] <whatif> python lack Data.List, toolz module lack lots of function than Data.List
[17:17:07] *** Joins: jlamothe (~jlamothe@198.251.61.229)
[17:18:12] <whatif> [ if (isDigit (drop n alist)) then (drop n alist) else [] | n <- [0.. (length alist)] ]
[17:18:24] *** Quits: Kaipi (~Kaiepi@156.34.44.192) (Remote host closed the connection)
[17:18:47] *** Joins: Kaipi (~Kaiepi@156.34.44.192)
[17:19:56] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[17:22:16] *** Quits: Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com) (Quit: The Lounge - https://thelounge.chat)
[17:23:57] *** Joins: Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com)
[17:24:58] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[17:26:52] *** Quits: Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com) (Client Quit)
[17:28:31] *** Joins: Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com)
[17:28:35] *** Quits: xff0x (~xff0x@2001:1a81:522c:6200:54c8:e05a:349a:7362) (Ping timeout: 264 seconds)
[17:29:00] *** Parts: kadir (~kadir@78.178.105.36) (WeeChat 3.3)
[17:29:18] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[17:29:29] *** Joins: ubert1 (~Thunderbi@2a02:8109:9880:303c:ca5b:76ff:fe29:f233)
[17:31:07] *** Quits: Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com) (Client Quit)
[17:33:46] *** Quits: desantra (~skykanin@user/skykanin) (Quit: WeeChat 3.3)
[17:34:57] *** hololeap_ is now known as hololeap
[17:35:24] *** Joins: desantra (~skykanin@user/skykanin)
[17:36:49] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[17:37:50] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:38:31] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[17:38:51] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 245 seconds)
[17:39:07] *** Joins: Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com)
[17:40:23] <whatif> > let alist = "ab12c36" in [ drop n alist | n <- [0..((length alist) -1)], all isDigit (drop n alist) ]
[17:40:24] <lambdabot>  ["36","6"]
[17:41:07] <_________> > let alist = "abc12c3" in [ alist !! idx | idx <- map fst $ reverse.takeWhile (Data.Char.isDigit.snd).reverse $ zip [0..] alist ]
[17:41:08] <lambdabot>  "3"
[17:41:38] <_________> list comprehension is ugly :p
[17:42:23] *** Quits: vpan (~0@212.117.1.172) (Ping timeout: 246 seconds)
[17:42:57] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Ping timeout: 276 seconds)
[17:43:23] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[17:43:27] <whatif> _________: you should use it like that... 
[17:43:31] *** Joins: Pickchea (~private@user/pickchea)
[17:44:08] *** Quits: ubert1 (~Thunderbi@2a02:8109:9880:303c:ca5b:76ff:fe29:f233) (Remote host closed the connection)
[17:44:10] <whatif> what's the point? if you use split to split list and zip to address the index
[17:46:47] <_________> you wanted to translate python code using list comprehensions into haskell code using list comprehensions, right ? that's how it would look in haskell - without indexing it wouldn't be python equivalent ;)
[17:46:56] *** Quits: Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com) (Quit: The Lounge - https://thelounge.chat)
[17:48:07] <_________> without list comprehension it would be something like this in haskell: reverse.takeWhile Data.Char.isDigit $ reverse "abc12c3"
[17:48:35] *** Joins: Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com)
[17:48:47] *** Parts: f-a (f2a@f2a.jujube.ircnow.org) ()
[17:50:03] *** Joins: CiaoSen (~Jura@p5dcc1a24.dip0.t-ipconnect.de)
[17:50:43] *** Joins: xff0x (~xff0x@2001:1a81:522c:6200:54c8:e05a:349a:7362)
[17:52:01] *** Quits: desantra (~skykanin@user/skykanin) (Quit: WeeChat 3.3)
[17:52:58] *** Joins: max22- (~maxime@2a01cb08833598004449f124191f767f.ipv6.abo.wanadoo.fr)
[17:53:19] <dminuoso> What does alist[i::] do in python?
[17:53:36] <whatif> dminuoso: drop i alist
[17:53:36] <yushyin> a slice from the index i to the end
[17:53:45] <dminuoso> Including i?
[17:53:53] <whatif> including
[17:53:55] <yushyin> i think so, yes.
[17:54:02] *** Joins: desantra (~skykanin@user/skykanin)
[17:54:41] <whatif> dminuoso: it's fancy to express something with that list slice
[17:56:00] <whatif> for example, remove the duplicate element, [ alist[i] for i in range(len(alist)) if alist[i] not in alist[i+1::] ]
[17:56:30] <whatif> so [1,1,2,3,2] would be [1,3,2]
[17:56:50] <dminuoso> let s = "ab12c3" in reverse . takeWhile isDigit . reverse $ s
[17:56:55] <dminuoso> % let s = "ab12" in reverse . takeWhile isDigit . reverse $ s
[17:56:55] <yahb> dminuoso: "12"
[17:56:58] <dminuoso> % let s = "ab12" in reverse . takeWhile isDigit . reverse $ s
[17:56:58] <yahb> dminuoso: "12"
[17:57:40] <yushyin> but they want it to be list comprehension
[17:57:45] <dminuoso> The answer is: dont?
[17:58:29] <dminuoso> I dont understand why you'd insist on using a list comprehension in the first place, both Haskell or Python
[18:00:35] <dminuoso> 14:34:33           whatif | for example, get the a digit string from a string's end, "abc12" -> "12", "ab12c3" -> "3", with python, [ alist[i::] for i in range(len(alist)) if alist[i::].isdigit() ]
[18:00:39] <yushyin> me neither, i find it ugly in haskell as well in python. there are a few situations in which it is halfway nice
[18:00:44] <geekosaur> it might be the easiest way to do it in python, but that doesn't necessarily carry over to haskell
[18:00:46] <dminuoso> This is *very* unidiomatic python code to begin with
[18:00:59] <dminuoso> And terribly inefficient ontop
[18:01:09] *** Quits: desantra (~skykanin@user/skykanin) (Quit: WeeChat 3.3)
[18:03:10] <dminuoso> The pythonista way would probably be: re.match('.*?([0-9]+)$', str).group(1)
[18:04:00] <whatif> > let alist = [1,1,2,3,2] in [ alist !! n | n <- [0..(lenght(alist) - 1)], (alist !! n) `notElem` (drop (n+1) alist) ]
[18:04:02] <lambdabot>  error:
[18:04:02] <lambdabot>      • Variable not in scope: lenght :: [a0] -> Int
[18:04:02] <lambdabot>      • Perhaps you meant one of these:
[18:04:18] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[18:04:25] <dminuoso> Anyway. Not sure what the point of translating poor python code into poor Haskell is.
[18:04:27] <whatif> > let alist = [1,1,2,3,2] in [ alist !! n | n <- [0..(lengh(alist) - 1)], (alist !! n) `notElem` (drop (n+1) alist) ]
[18:04:29] <lambdabot>  error:
[18:04:29] <lambdabot>      • Variable not in scope: lengh :: [a0] -> Int
[18:04:29] <lambdabot>      • Perhaps you meant one of these:
[18:04:39] <dminuoso> It's certainly not insightful or helpful
[18:04:41] *** Quits: Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com) (Ping timeout: 245 seconds)
[18:05:11] <dminuoso> Let me give you a direct translation:
[18:05:48] <whatif> let alist = [1,1,2,3,2] in [ alist !! n | n <- [0..(length(alist) - 1)], (alist !! n) `notElem` (drop (n+1) alist) ]
[18:06:02] <whatif> > let alist = [1,1,2,3,2] in [ alist !! n | n <- [0..(length(alist) - 1)], (alist !! n) `notElem` (drop (n+1) alist) ]
[18:06:04] <lambdabot>  [1,3,2]
[18:06:47] <whatif> the list comprehension, express the question with list comprehension, and the anwser it is
[18:07:12] <yushyin> indexing haskell linked lists is usually not a good idea
[18:07:17] <[exa]> whatif: I always kinda guessed that the !! operator is named like that so that people know it should not be used very often :]
[18:07:41] <dminuoso> whatif: Even the python code is very poor already.
[18:07:46] <[exa]> whatif: what should the code do btw? (in human words)
[18:07:47] <yushyin> [exa]: lol, maybe your are right
[18:08:01] <[exa]> yushyin: you can literally read it as BANG BANG MAAN
[18:08:26] <dminuoso> % let xs = "foo123" in [ drop i xs | i <- [0..length xs], all isDigit (drop i xs) ] -- whatif  
[18:08:26] <yahb> dminuoso: ["123","23","3",""]
[18:08:34] <dminuoso> whatif: ^- that is a direct translation of what your python code does.
[18:08:45] <whatif> [exa]: remove the duplicate element in alist, so if element is not show up in the rest, then it is single
[18:08:47] <dminuoso> Without random access
[18:08:58] <dminuoso> Let me rewrite with a let binding
[18:09:17] <dminuoso> % let xs = "foo123" in [ xs' | i <- [0..length xs], let xs' = drop i xs, all isDigit xs' ]
[18:09:18] <yahb> dminuoso: ["123","23","3",""]
[18:09:35] *** Quits: max22- (~maxime@2a01cb08833598004449f124191f767f.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[18:09:41] <yushyin> looks like tails with filter all isDigit
[18:09:51] <dminuoso> Yeah
[18:10:23] <[exa]> whatif: what about: alist input = [x | (x:xs) <- tails input, x `notElem` xs]
[18:10:58] <dminuoso> Why are we discussing *poor* translations of *poor* python code anyway?
[18:11:31] <dminuoso> The real answer is: In python nobody sane would have written that, and in Python you'd just have used `reverse . takeWhile isDigit . reverse`
[18:11:41] <dminuoso> Both would have ended up with better readable code with better asymptotics
[18:11:49] <dminuoso> And better cache behavior ontop
[18:12:02] <whatif> python doesn't have Data.List
[18:12:09] <dminuoso> Yes, in Python you would have used a regex.
[18:12:18] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f6e3:7400:d8e7:a6fa:245:fafa) (Read error: Connection reset by peer)
[18:12:20] <dminuoso> re.match('.*?([0-9]+)$', str).group(1)
[18:12:23] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[18:13:27] <[exa]> whatif: well if that was the only thing Python would be missing... :]
[18:13:29] *** Joins: xkuru (~xkuru@user/xkuru)
[18:13:35] *** Joins: zer0bitz (~zer0bitz@2001:2003:f6e3:7400:d8e7:a6fa:245:fafa)
[18:13:50] <dminuoso> Side note of interest, String being a list is not always a good thing either.
[18:16:52] *** Joins: shidima (~shidima@84-104-108-90.cable.dynamic.v4.ziggo.nl)
[18:19:16] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:19:16] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[18:19:17] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:19:17] *** Joins: wroathe (~wroathe@user/wroathe)
[18:19:34] <whatif> re.match('.*?([0-9]+)$', str).group(1) I think regex is not good readable
[18:19:52] <dminuoso> If you have any regex experience, it's very readable.
[18:20:07] <dminuoso> And since regex are very common and idiomatic in Python, Im going to suggest that any pythonista can make quick sense of it
[18:20:09] <whatif> I know BRE
[18:20:13] <dminuoso> Much quicker than with a list comprehension
[18:21:20] <whatif> since then, why list comprehension is created at the first?
[18:21:46] <whatif> 70s'? first apperance in which language?
[18:22:20] <dminuoso> Python burrowed them from Haskell
[18:22:41] <whatif> python burrowed a lot of things from others
[18:22:45] <dminuoso> And whether Haskelled burrowed them from another language Im not sure, but the syntax/semantics was inspired by set builder notation in mathematics
[18:23:18] <dminuoso> That is, <- is an ascii approximation of a ∈ A
[18:25:23] *** Joins: gentauro (~gentauro@user/gentauro)
[18:28:15] *** Joins: zebrag (~chris@user/zebrag)
[18:30:04] *** Joins: bitmapper (uid464869@lymington.irccloud.com)
[18:30:09] *** Joins: lavaman (~lavaman@98.38.249.169)
[18:30:21] <janus> what, i thought it was supposed to be an arrow
[18:30:55] <janus> never even considered that it would be a ∈
[18:31:12] <janus> and even the fancy haskell typesetting contracts them to an arrow, i thought
[18:31:46] <dminuoso> \ is an ASCII approximatino of λ
[18:31:52] <dminuoso> :)
[18:32:20] <yushyin> whatif: with re.search the regex kann be even simpler. re.search('[0-9]+$', str).group(0) # i think this is readable enough
[18:32:48] <dminuoso> janus: Consider in Math you might write [ x * 2 | x ∈ ℕ ]
[18:33:12] *** Quits: mark___ (~a@p200300ef973db1b24086f0a6a24fc4dd.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[18:33:26] <whatif> > let alist=["ab","ef","ij"], blist = ["cd","gh","kl"] in [ (alist !! n) <> (blist !! n) | n <- [0..(length alist)-1] ]
[18:33:28] <lambdabot>  <hint>:1:27: error: parse error on input ‘,’
[18:33:34] *** Joins: mark___ (~a@p200300ef973db1754086f0a6a24fc4dd.dip0.t-ipconnect.de)
[18:34:47] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[18:35:44] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[18:36:06] <[exa]> whatif: you mean `zip` right?
[18:36:34] <whatif> or get the sequence of x * y < 10, x and y <- [0..10], use list comprehension is readable
[18:36:44] *** Joins: jkaye (~jkaye@2601:281:8300:7530:eb77:89f5:e0e9:4928)
[18:36:49] <janus> dminuoso: but just because it has one origin in the list comprehension syntax, it could have another origin in monadic syntax
[18:37:43] <janus> i mean, if '<-' is used to set an MVar, it doesn't seem similar to "is a member of"
[18:38:16] *** Quits: CiaoSen (~Jura@p5dcc1a24.dip0.t-ipconnect.de) (Quit: CiaoSen)
[18:38:55] <whatif> [exa]: yes, zip
[18:39:36] <whatif> I forget how to use two variable in let
[18:39:54] <whatif> not let a=..., b=... in ?
[18:41:04] <_________> let a = 1; b = 2 in [a, b]
[18:41:06] <_________> > let a = 1; b = 2 in [a, b]
[18:41:07] <lambdabot>  [1,2]
[18:41:09] <whatif> I hate people add 's in English if it's not one, in my mother language, no such thing
[18:41:32] <whatif> one apple, two apple, three apple
[18:41:38] *** Joins: max22- (~maxime@2a01cb0883359800c4fcd1c1f62060a2.ipv6.abo.wanadoo.fr)
[18:41:44] *** Quits: max22- (~maxime@2a01cb0883359800c4fcd1c1f62060a2.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[18:42:22] <whatif> _________: yes
[18:45:29] *** Quits: cosimone (~user@93-47-231-139.ip115.fastwebnet.it) (Remote host closed the connection)
[18:45:42] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 260 seconds)
[18:48:05] *** Joins: WhateverRabbit (~rabbit@206.81.18.26)
[18:48:33] <WhateverRabbit> hi all
[18:50:22] <whatif> what's function name that fmap take two lists?
[18:50:45] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[18:50:46] <whatif> fmap (+) alist blist, I forget the name
[18:50:49] *** Joins: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[18:50:55] <_________> zipWith ?
[18:51:03] <WhateverRabbit> +
[18:54:13] <whatif> _________: right
[18:54:27] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[18:54:32] <_________> you can also use hoogle to find them by type signature
[18:54:33] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[18:54:36] *** allbery_b is now known as geekosaur
[18:55:02] <whatif> _________: then hoogle will tell me liftM2
[18:55:17] <_________> https://hoogle.haskell.org/?hoogle=(a%20-%3E%20b%20-%3E%20c)%20-%3E%20%5Ba%5D%20-%3E%20%5Bb%5D%20-%3E%20%5Bc%5D - it tells me it's zipWith
[18:56:41] *** Joins: cosimone (~user@93-47-231-139.ip115.fastwebnet.it)
[18:57:27] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:58:31] *** Joins: jurjen (~jurjen@188-206-102-198.mobile.kpn.net)
[19:07:27] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:c075:f6f7:f2c7:7314)
[19:12:00] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Quit: Laa shay'a waqi'un moutlaq bale kouloun moumkine)
[19:12:23] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:c075:f6f7:f2c7:7314) (Ping timeout: 264 seconds)
[19:14:34] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:14:35] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[19:14:35] *** Joins: wroathe (~wroathe@user/wroathe)
[19:14:47] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 246 seconds)
[19:18:59] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[19:20:12] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[19:20:27] *** Joins: mimmy (~mimmy@72.142.88.18)
[19:20:32] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[19:21:36] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[19:22:35] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 264 seconds)
[19:26:26] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[19:26:46] *** Quits: mimmy (~mimmy@72.142.88.18) (Ping timeout: 245 seconds)
[19:28:07] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[19:29:13] <hololeap> awpr: I figured out a (the?) trick, which is to add constraints to the singleton GADT constructors, that way the compiler is assured that they will be satisfied at each layer of the tree
[19:29:50] <hololeap> I threw out the type family constraint thing as it was not working
[19:31:07] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[19:32:35] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[19:34:55] *** Joins: smhbvd^ (~smhbvd@h50.174.139.63.static.ip.windstream.net)
[19:36:05] *** Joins: mimmy (~mimmy@72.142.88.18)
[19:39:46] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[19:40:59] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:c075:f6f7:f2c7:7314)
[19:41:02] *** Quits: unmanbearpig (~unmanbear@user/unmanbearpig) (Ping timeout: 268 seconds)
[19:42:28] *** Joins: unmanbearpig (~unmanbear@user/unmanbearpig)
[19:42:56] *** Quits: wei2912 (~wei2912@138.75.71.147) (Quit: Lost terminal)
[19:45:47] *** Quits: smhbvd^ (~smhbvd@h50.174.139.63.static.ip.windstream.net) (Remote host closed the connection)
[19:48:03] *** Quits: dajoer (~david@user/gvx) (Quit: leaving)
[19:50:04] *** Joins: Flonk (~Flonk@ec2-34-221-56-110.us-west-2.compute.amazonaws.com)
[19:50:20] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Remote host closed the connection)
[19:50:57] *** Quits: whatif (~user@114.250.136.140) (Quit: ERC (IRC client for Emacs 26.3))
[19:51:13] *** Joins: servytor (uid525486@hampstead.irccloud.com)
[19:51:19] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:906e:b8e3:dc89:8d11) (Quit: WeeChat 2.8)
[19:54:06] *** Quits: DNH (~DNH@8.43.122.53) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:56:21] *** Joins: xstill- (xstill@fimu/xstill)
[19:59:47] *** Quits: mimmy (~mimmy@72.142.88.18) (Ping timeout: 264 seconds)
[20:00:13] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:c075:f6f7:f2c7:7314) (Remote host closed the connection)
[20:01:12] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.2)
[20:03:27] *** Joins: a6a45081-2b83 (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507)
[20:03:27] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[20:03:31] *** Quits: a6a45081-2b83 (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507) (Remote host closed the connection)
[20:05:50] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[20:07:18] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:c075:f6f7:f2c7:7314)
[20:07:37] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[20:08:34] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:13:57] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[20:14:29] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Remote host closed the connection)
[20:14:36] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[20:14:57] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[20:15:34] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Remote host closed the connection)
[20:16:06] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[20:16:17] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[20:17:28] *** Quits: Flonk (~Flonk@ec2-34-221-56-110.us-west-2.compute.amazonaws.com) (Quit: The Lounge - https://thelounge.chat)
[20:17:56] *** Joins: johnjay (~pi@192.142.100.50)
[20:18:22] <johnjay> i tried installing something with cabal and it says error couldn't find opt from llvm. but i have llvm. is llvm required for haskell packages?
[20:18:48] <monochrom> No.
[20:19:13] <geekosaur> er, that depends. if you are on an m1 mac and you are using 8.10.7 to build natively, you need llvm
[20:19:38] <monochrom> Sorry.
[20:19:49] <geekosaur> 9.2.1 has direct-to-asm compilation, but recently it was found to be broken
[20:19:59] <johnjay> i don't know what i want to do. i just typed 'cabal install -j <name>' because it said to
[20:20:08] <johnjay> do i have to build natively?
[20:20:32] <johnjay> and yes this is an m1 mac. XD
[20:20:50] <johnjay> seems to have a few bugs. scikit-learn doesn't install for instance
[20:21:00] <johnjay> although somehow i got numpy
[20:21:12] <geekosaur> if you install an x86 cabal you can use: arch x86 cabal install -j whatever
[20:21:50] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[20:21:53] <johnjay> ah so that's how you run one of the parts in a universal binary
[20:21:55] <geekosaur> but you'll have to install x86 versions of any C library dependencies, and if you're using e.g. brew to install such dependencies it will *relaly* want to install native versions instead of x86
[20:22:10] <johnjay> yes i'm using brew. it's like you know my life story
[20:22:27] <geekosaur> pretty much everyone on a kmac does these days
[20:22:43] *** Joins: mimmy (~mimmy@72.142.88.18)
[20:22:50] <geekosaur> and ghc would only look for llc/opt when using -fllvm, which is only default on m1 macs
[20:23:05] <geekosaur> so it's not that hard to work out :)
[20:23:57] <johnjay> i see
[20:24:26] <johnjay> i tried briefly to install things from the app store. but quickly gave that up
[20:24:38] <johnjay> brew and macports are the only alternatives i know of. not even sure if there's a native llvm you can get
[20:24:49] <johnjay> although clang is installed by default but pretends to be gcc for some reason
[20:25:50] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Remote host closed the connection)
[20:26:22] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[20:27:23] <geekosaur> yeh, apple does that. it's really confusing
[20:27:44] <geekosaur> and you have to install a full llvm via brew or macports because apple only provides part of it
[20:28:46] *** Joins: Flonk (~Flonk@ec2-34-221-56-110.us-west-2.compute.amazonaws.com)
[20:28:56] <sm> what's the package failing to install ?
[20:29:31] <johnjay> some haskell project i wanted to look at with cabal
[20:29:38] <johnjay> never installed with cabal before
[20:29:58] <johnjay> and the readme doesn't say how to build it. should i read the stack manual to build it myself? or how do i do that
[20:31:04] *** Quits: Flonk (~Flonk@ec2-34-221-56-110.us-west-2.compute.amazonaws.com) (Client Quit)
[20:31:10] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[20:32:34] *** Joins: Flonk (~Flonk@ec2-34-221-56-110.us-west-2.compute.amazonaws.com)
[20:37:06] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[20:37:33] <sm> if you tell us more, I'd be willing to look at it a little more 
[20:37:38] *** Quits: leah2 (~leah@vuxu.org) (Remote host closed the connection)
[20:37:44] <sm> otherwise it's hard to say
[20:38:53] *** Quits: deadmarshal (~deadmarsh@95.38.228.222) (Ping timeout: 256 seconds)
[20:39:29] *** Quits: turlando (~turlando@user/turlando) (Ping timeout: 246 seconds)
[20:39:34] *** Joins: leah2 (~leah@vuxu.org)
[20:40:30] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[20:43:02] *** Joins: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it)
[20:43:02] *** Quits: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it) (Changing host)
[20:43:02] *** Joins: turlando (~turlando@user/turlando)
[20:43:21] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Remote host closed the connection)
[20:43:53] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[20:45:40] *** Quits: urdh (~urdh@user/urdh) (Remote host closed the connection)
[20:46:09] <maerwald> johnjay: llvm isn't added to path by default
[20:46:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[20:47:20] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Remote host closed the connection)
[20:47:23] *** Quits: mimmy (~mimmy@72.142.88.18) (Ping timeout: 256 seconds)
[20:47:26] <maerwald> on M1 it should be in /opt/llvm/bin or so
[20:48:15] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[20:48:26] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[20:49:51] <sm> I have a homebrew `llvm` package installed, which provides `clang*` and `llvm*` binaries, don't know if that's normal
[20:50:13] *** Joins: deadmarshal (~deadmarsh@95.38.228.222)
[20:50:23] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[20:54:15] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[20:56:21] *** Joins: notzmv (~zmv@user/notzmv)
[20:56:55] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[20:57:05] *** Joins: zava (~zava@ip5f5bdf0f.dynamic.kabel-deutschland.de)
[20:57:10] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Remote host closed the connection)
[20:57:12] <johnjay> yes i recompiled with llvm in the path and it seemed to work
[20:57:27] <johnjay> what i meant is i thought ghc was the compiler so why is it using llvm
[20:57:42] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[20:57:52] <johnjay> also i can link you the project when i'm back on my m1
[20:58:03] <johnjay> it had some .yaml and a .cabal or something file
[20:58:23] <johnjay> (meaning in the cloned git repo)
[20:59:56] *** Quits: Flonk (~Flonk@ec2-34-221-56-110.us-west-2.compute.amazonaws.com) (Quit: The Lounge - https://thelounge.chat)
[21:00:44] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Remote host closed the connection)
[21:01:16] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[21:01:22] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Remote host closed the connection)
[21:02:16] *** Joins: econo (uid147250@user/econo)
[21:03:05] <maerwald> johnjay: native codegen for aarch64 M1 isn't in 8.10.7 yet, so it uses the llvm backend
[21:04:28] <johnjay> oh ok. i assume this is somehow plugging into the llvm framework then
[21:04:54] *** Quits: deadmarshal (~deadmarsh@95.38.228.222) (Ping timeout: 268 seconds)
[21:04:54] <johnjay> should i be using stack or cabal for something cloned directly from github?
[21:05:22] <WhateverRabbit> you can use it
[21:05:28] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[21:05:47] *** Parts: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) ()
[21:05:57] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[21:06:02] <maerwald> johnjay: depends on the project
[21:06:04] <sclv> ghc has a llvm backend to the compiler, and that's the only way you will be able to compile for M1 in the short term
[21:06:05] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[21:06:17] <johnjay> it had a stack.yaml if i recall and also a somethingsomething.cabal
[21:06:21] *** Joins: mimmy (~mimmy@72.142.88.18)
[21:06:25] <sclv> both stack and cabal can drive ghc in llvm mode, so it doesn't really matter
[21:06:37] <maerwald> there's no native stack M1 binary yet, though
[21:06:40] <johnjay> ok
[21:06:50] <maerwald> so it may pick x86 arch and so weird stuff
[21:06:52] <sclv> for native compilation you'll want to stick to cabal/ghcup since that supports M1 properly -- but again, that native compilation is busted until the next ghc patch release
[21:07:29] *** Quits: mikoto-c1 (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Quit: mikoto-c1)
[21:07:36] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[21:07:37] <johnjay> i think i have ghc8 something
[21:07:38] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[21:07:44] <johnjay> you said it needs a patch update for M1 aarch64?
[21:07:46] <johnjay> ghc that is
[21:07:54] <maerwald> only if you want to use native codegen
[21:08:20] <geekosaur> I said that earlier, 8.10.7 uses llvm and works, 9.2.1 has native codegen but is broken
[21:08:27] <geekosaur> bugs they only found after release
[21:08:42] <johnjay> ah ok. so if I did have 9.2.1 would it try to native codegen and fail?
[21:08:49] <johnjay> yeah 8.10
[21:08:49] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Read error: Connection reset by peer)
[21:08:51] <johnjay> whatever brew has
[21:09:01] <geekosaur> it would produce a binary that would probably crash
[21:09:08] <johnjay> oof
[21:09:44] <maerwald> https://discourse.haskell.org/t/psa-9-2-1-aarch64-miscompilation/3638/2
[21:11:01] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[21:12:52] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Remote host closed the connection)
[21:15:03] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[21:17:27] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:17:40] *** Joins: desantra (~skykanin@user/skykanin)
[21:19:12] *** Quits: desantra (~skykanin@user/skykanin) (Client Quit)
[21:19:22] *** Joins: desantra (~skykanin@user/skykanin)
[21:20:32] *** Quits: oxide (~lambda@user/oxide) (Quit: oxide)
[21:22:15] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[21:23:17] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Remote host closed the connection)
[21:25:18] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 260 seconds)
[21:26:47] *** Quits: jurjen (~jurjen@188-206-102-198.mobile.kpn.net) (Ping timeout: 264 seconds)
[21:28:14] *** Quits: mbuf (~Shakthi@122.178.204.176) (Quit: Leaving)
[21:28:48] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.2)
[21:29:30] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 260 seconds)
[21:30:51] *** Joins: whatsupdoc (uid509081@hampstead.irccloud.com)
[21:31:22] *** Joins: f-a (f2a@f2a.jujube.ircnow.org)
[21:31:51] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[21:32:20] <f-a> hello, I am asking a friend to test something on his win machine with the new io manager (-with-rtsopts=--io-manager=native). I am getting a series of errors like this: {handle: <stdout>}: handleToHANDLE: inappropriate type (not a file HANDLE)
[21:32:34] <f-a> any idea where I should start to debug this?
[21:32:55] *** Quits: bitmapper (uid464869@lymington.irccloud.com) (Quit: Connection closed for inactivity)
[21:34:11] <geekosaur> not sure you'll find any windows experts in here, reddit or the discourse may be better
[21:34:51] <f-a> sensible idea, also I should of course read carefully the release notes
[21:34:58] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[21:35:16] <geekosaur> but it being stdout makes me wonder… is this a gui program by any chance? it won't have proper stdin/stdout/stderr in that case
[21:35:20] *** Joins: anduril1 (~anduril1@167-248-67-166.oa01.lnk02.ne.dynamic.allophone.net)
[21:35:29] <f-a> this is a terminal application geekosaur 
[21:35:49] *** Quits: desantra (~skykanin@user/skykanin) (Quit: WeeChat 3.3)
[21:35:53] <f-a> https://hackage.haskell.org/package/ansi-terminal-game using this
[21:37:25] <maerwald> ghc version?
[21:37:33] *** Joins: sydddddd (~syd@cpc91646-hart11-2-0-cust432.11-3.cable.virginm.net)
[21:37:36] <f-a> x86_64-mingw32  ghc-Version {versionBranch = [9,2], versionTags = []}
[21:37:50] <f-a> (the one my friend is using to test this)
[21:38:35] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[21:38:46] <f-a> 9.2.1 precisely
[21:46:16] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Remote host closed the connection)
[21:51:18] *** Joins: jollygood2 (~bc8165b6@217.29.117.252)
[21:51:21] <dsal> "Woah, you can't put a comment here!  There's already a word on this line!"  -- ormolu
[21:51:23] *** Quits: mark___ (~a@p200300ef973db1754086f0a6a24fc4dd.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[21:55:29] *** Quits: zaquest (~notzaques@5.128.210.178) (Quit: Leaving)
[21:56:22] *** acertain_ is now known as acertain
[21:56:50] *** Quits: chomwitt (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374) (Ping timeout: 246 seconds)
[21:57:15] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[21:57:42] *** Quits: anduril1 (~anduril1@167-248-67-166.oa01.lnk02.ne.dynamic.allophone.net) (Ping timeout: 256 seconds)
[21:58:14] *** Joins: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com)
[21:58:43] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 250 seconds)
[21:58:53] *** Joins: chomwitt (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374)
[22:00:01] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:c075:f6f7:f2c7:7314) (Remote host closed the connection)
[22:00:03] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[22:00:17] *** Quits: acertain (sid470584@hampstead.irccloud.com) ()
[22:00:27] *** Joins: acertain (sid470584@hampstead.irccloud.com)
[22:00:43] *** Joins: deadmarshal (~deadmarsh@95.38.228.222)
[22:00:56] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[22:01:23] *** Joins: fvr (uid503686@uxbridge.irccloud.com)
[22:04:41] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 245 seconds)
[22:08:21] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:10:11] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[22:11:04] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[22:13:21] *** Joins: DNH (~DNH@8.43.122.53)
[22:15:30] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[22:15:38] *** Joins: Sgeo (~Sgeo@user/sgeo)
[22:16:27] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[22:16:33] *** Joins: urdh (~urdh@user/urdh)
[22:17:20] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[22:18:27] *** Joins: gdown (~gavin@h69-11-248-109.kndrid.broadband.dynamic.tds.net)
[22:22:01] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 256 seconds)
[22:22:15] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[22:23:54] *** Quits: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com) (Remote host closed the connection)
[22:24:19] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Remote host closed the connection)
[22:28:15] *** Quits: cosimone (~user@93-47-231-139.ip115.fastwebnet.it) (Ping timeout: 256 seconds)
[22:29:04] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:c075:f6f7:f2c7:7314)
[22:29:07] *** Joins: mark___ (~a@p200300ef973db1754086f0a6a24fc4dd.dip0.t-ipconnect.de)
[22:30:55] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[22:31:42] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Remote host closed the connection)
[22:32:02] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[22:32:06] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[22:33:04] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[22:33:14] *** Joins: lavaman (~lavaman@98.38.249.169)
[22:41:09] *** Joins: emf (~emf@2620:10d:c090:400::5:6b1)
[22:46:53] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 246 seconds)
[22:46:57] <f-a> geekosaur: in case you care, http://www.ariis.it/link/t/paste1132317-0 this very minimal example fails with the same error, I will file a bug against ansi-terminal
[22:47:10] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[22:47:57] <f-a> although it is a bit puzzling that all it takes to fail is a simple `clearScreen`
[22:49:41] *** Joins: jurjen (~jurjen@31-161-184-96.mobile.kpn.net)
[22:49:51] *** Quits: papa (~papa@user/papa) (Quit: connection reset again by peer.)
[22:51:36] *** Quits: glider (~glider@user/glider) (Quit: ZNC 1.9.x-git-111-f2cdc3db - https://znc.in)
[22:52:32] *** Joins: neurocyte0132889 (~neurocyte@94.46.73.137)
[22:52:32] *** Quits: neurocyte0132889 (~neurocyte@94.46.73.137) (Changing host)
[22:52:33] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[22:53:11] *** Quits: anderson (~ande@user/anderson) (Quit: bye)
[22:53:11] *** Quits: eldritch (~eldritch@user/eldritch/x-9272577) (Quit: bye)
[22:54:02] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[22:57:24] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[22:58:51] *** Quits: mimmy (~mimmy@72.142.88.18) (Ping timeout: 256 seconds)
[23:00:03] *** Joins: mimmy (~mimmy@72.142.88.18)
[23:02:03] *** Joins: glider (~glider@user/glider)
[23:02:33] *** Quits: AlexZenon (~alzenon@178.34.163.122) (Read error: Connection reset by peer)
[23:04:09] *** Joins: AlexZenon (~alzenon@178.34.163.122)
[23:06:20] *** Joins: anderson (~ande@user/anderson)
[23:08:12] *** Joins: brandonh (brandonh@gateway/vpn/protonvpn/brandonh)
[23:08:27] *** Quits: deadmarshal (~deadmarsh@95.38.228.222) (Quit: ZNC 1.8.2 - https://znc.in)
[23:08:47] *** Quits: AlexZenon (~alzenon@178.34.163.122) (Ping timeout: 264 seconds)
[23:08:51] *** Joins: deadmarshal (~deadmarsh@95.38.228.222)
[23:09:33] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 265 seconds)
[23:11:19] *** Quits: xff0x (~xff0x@2001:1a81:522c:6200:54c8:e05a:349a:7362) (Ping timeout: 268 seconds)
[23:12:56] *** Joins: xff0x (~xff0x@2001:1a81:5251:b200:1b67:fb84:b521:2e46)
[23:16:12] *** Joins: AlexZenon (~alzenon@178.34.163.122)
[23:17:03] *** Quits: hololeap (~hololeap@user/hololeap) (Excess Flood)
[23:17:26] *** Joins: viole (~viole@user/viole)
[23:18:33] *** Joins: hololeap (~hololeap@user/hololeap)
[23:18:59] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:19:52] <int-e> f-a: Hmm the error comes from here, https://gitlab.haskell.org/ghc/ghc/-/blob/master/libraries/base/GHC/IO/Handle/Windows.hs#L216-226 ...so part of the story is that GHC distinguishes between console handles and native handles, both of which embed a HANDLE (See https://gitlab.haskell.org/ghc/ghc/-/blob/master/libraries/base/GHC/IO/Windows/Handle.hsc#L106 ) but that code only supports the...
[23:19:58] <int-e> ...NativeHandle case.
[23:20:41] *** Quits: brandonh (brandonh@gateway/vpn/protonvpn/brandonh) (Quit: brandonh)
[23:20:45] <int-e> I don't know whether that's an oversight or a conscious decision; however, given the lack of comments about it I assume the former.
[23:20:58] <geekosaur> that sounds kinda pointless when part of the intent is to be able to use 16-bit functions for console I/O
[23:21:15] <geekosaur> instead of the chcp hack
[23:21:15] <int-e> disclaimer: I'm just reading code, not running anything
[23:21:39] <viole> I have a function  validate :: ByteString -> Either String Address,  Address constructor not exported, and I want to declare a couple of costant addresses in top level. I could do  case validate bs of Right x -> x, but I'd like to avoid such thing. I agree this is bad practice but only for external data; for stuff defined literally that are known to be ok, I should be able to do it partially and
[23:21:42] <viole> in case something's not right, it shouldn't compile. What's the recommended way to do this?
[23:23:02] <int-e> the whole logic was introduced in this commit two years ago, so it's relatively new: https://gitlab.haskell.org/ghc/ghc/-/commit/356dc3feae967b1c361130f1f356ef9ad6a693e4
[23:24:23] *** Quits: jess (~jess@libera/staff/jess) (Quit: I try to be an optimist / but my glass is always bone dry)
[23:25:00] <maerwald> viole: should be possible with TH
[23:30:23] *** Quits: DNH (~DNH@8.43.122.53) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:33:23] *** Quits: jkaye (~jkaye@2601:281:8300:7530:eb77:89f5:e0e9:4928) (Ping timeout: 264 seconds)
[23:34:08] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 268 seconds)
[23:35:41] *** Quits: juhp (~juhp@128.106.188.220) (Ping timeout: 256 seconds)
[23:38:15] *** Joins: juhp (~juhp@128.106.188.220)
[23:40:44] *** Quits: zmt01 (~zmt00@user/zmt00) (Quit: Gone.)
[23:41:51] *** Joins: DNH (~DNH@8.44.0.72)
[23:44:14] *** Joins: zmt00 (~zmt00@user/zmt00)
[23:45:51] *** Quits: deadmarshal (~deadmarsh@95.38.228.222) (Ping timeout: 268 seconds)
[23:49:35] *** Quits: alx741 (~alx741@186.178.109.114) (Ping timeout: 264 seconds)
[23:52:35] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 264 seconds)
[23:52:38] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[23:54:57] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
