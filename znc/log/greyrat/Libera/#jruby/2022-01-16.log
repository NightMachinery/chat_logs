[01:18:19] *** Joins: AndyMaleh[m] (~andymaleh@2001:470:69fc:105::1:1a78)
[01:18:46] <AndyMaleh[m]> Hi, thank you for continuing to support JRuby. 
[01:19:41] <AndyMaleh[m]> What are JRuby's AOT compilation options in 2022? (I saw several talks in the past years mentioning AOT, but I never learned what the final outcome of those talks was as far as a recommended AOT compilation approach in modern JRubys)
[01:21:08] <AndyMaleh[m]> My requirement scenario is compiling a desktop JVM GUI app into an AOT native executable. What are my options with JRuby with that regards?
[01:21:25] <AndyMaleh[m]> s/with/in/
[01:21:35] <AndyMaleh[m]> * mentioning AOT compilation, but
[01:22:56] <headius> We can AOT Ruby code into JVM bytecode but there are currently not many options for native compilation that work with JRuby
[01:23:09] <headius> As far as I know the only option that compiles Ruby code into a native binary is mruby
[01:23:30] <headius> Is your goal to hide the source or also to get a smaller faster binary?
[01:23:53] <AndyMaleh[m]> A smaller faster binary
[01:24:47] <AndyMaleh[m]> Thankfully, with `jpackage`, I can [package JRuby Desktop GUI apps as native executables](https://github.com/AndyObtiva/glimmer-dsl-swt/blob/master/docs/reference/GLIMMER_PACKAGING_AND_DISTRIBUTION.md), but they are slow to start.
[01:25:39] <headius> Ah yes I have seen the updates for this on Twitter occasionally
[01:25:42] <AndyMaleh[m]> I recently tried the `--dev` option, and it sped up startup time, but then the app experienced slowdowns during usage, so I stopped using that option.
[01:26:47] <headius> That flag does two major things: It turns off the JRuby jit and it tweaks the JVM jit to a simpler mode
[01:27:03] <AndyMaleh[m]> The value proposition of using JRuby to build JVM GUI Desktop apps is still a good one given that productivity is much higher than writing apps with direct Java, but I was still curious about AOT compilation given that it was mentioned by the JRuby team a number of times in the past.
[01:27:11] <headius> You could just tweak the JVM jit and get a pretty good improvement and we would still optimize the Ruby code
[01:27:45] <headius> Yeah there are various partial options that can be combined to get pretty good, we can try to play with a few of those
[23:27:33] <puritylake[m]> Guess who's back, recovered and ready for more coding
[23:29:47] <puritylake[m]> Not sure about the status of sprintf, whether it is finished or not I've been away for much longer than expected
