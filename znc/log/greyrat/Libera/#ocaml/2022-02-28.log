[00:07:56] *** Joins: rgrinberg (~textual@2806:101e:7:8d89:9996:a352:abd6:f191)
[00:16:32] *** Quits: bartholin (~bartholin@109.53.2.168) (Ping timeout: 240 seconds)
[00:31:38] <d_bot_> <Continuation Calculus> heyyy, is there any good syntax for Bytes in OCaml? given you can't use String syntax anymore
[00:32:04] <d_bot_> <Continuation Calculus> I know I can create a custom access operator `let (.-()) = Bytes.get`, but can I do the same for `Bytes.set`?
[00:33:04] <d_bot_> <NULL> `let (.-()<-) = Bytes.set`
[00:33:49] <d_bot_> <Continuation Calculus> so that's the syntax, **y e s**, thx
[00:34:27] <d_bot_> <NULL> https://ocaml.org/manual/indexops.html
[00:36:59] <d_bot_> <Alistair> Does anyone have a good LaTeX `listing` style for OCaml, can't find any good ones online
[00:37:02] <d_bot_> <Continuation Calculus> yup, i was on this page, but kept missing it
[00:40:21] *** Joins: mro (~mro@port-92-195-171-36.dynamic.as20676.net)
[00:45:08] *** Quits: mro (~mro@port-92-195-171-36.dynamic.as20676.net) (Read error: Connection reset by peer)
[00:45:14] *** Joins: mro_ (~mro@port-92-195-171-36.dynamic.as20676.net)
[01:01:36] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: No Ping reply in 180 seconds.)
[01:03:01] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[01:03:55] *** Quits: mro_ (~mro@port-92-195-171-36.dynamic.as20676.net) (Ping timeout: 256 seconds)
[01:14:37] *** Quits: Anarchos (~Anarchos@88.168.112.216) (Ping timeout: 240 seconds)
[01:37:26] *** Joins: rond_ (~rond_@90.251.84.153)
[01:37:54] *** Joins: Anarchos (~Anarchos@88.168.112.216)
[02:16:20] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[02:20:06] *** Quits: rgrinberg (~textual@2806:101e:7:8d89:9996:a352:abd6:f191) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:20:52] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[02:38:23] *** Quits: Anarchos (~Anarchos@88.168.112.216) (Quit: Vision[]: i've been blurred!)
[02:50:58] *** Quits: olle (~olle@i5E866D8A.versanet.de) (Ping timeout: 272 seconds)
[02:57:21] *** Joins: rgrinberg (~textual@187.223.63.190)
[03:10:51] *** Quits: rond_ (~rond_@90.251.84.153) (Quit: Client closed)
[03:24:53] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 252 seconds)
[03:26:35] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[03:34:16] *** Quits: GD-IRC (~quassel@autistic.space) (Ping timeout: 250 seconds)
[03:46:37] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[03:58:23] *** Joins: xd1le (~xd1le@user/xd1le)
[04:02:50] *** Joins: Soni (~quassel@autistic.space)
[04:20:00] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[04:25:00] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[04:27:12] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[04:31:54] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi) (Quit: Leaving.)
[05:37:39] *** Joins: epony (epony@user/epony)
[06:08:11] *** Joins: bobo (~bobo@37.172.143.183)
[06:08:48] *** Quits: spip (~bobo@37.168.124.30) (Ping timeout: 252 seconds)
[07:55:47] *** Joins: mbuf (~Shakthi@122.174.215.136)
[08:36:24] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[08:38:37] *** Quits: sagax (~sagax_nb@user/sagax) (Quit: Konversation terminated!)
[08:49:42] *** Joins: vicfred (~vicfred@user/vicfred)
[09:04:52] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[09:07:35] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[09:08:48] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[09:16:37] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[10:20:29] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[10:29:37] *** Quits: rgrinberg (~textual@187.223.63.190) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:48:56] *** Joins: mro (~mro@port-92-195-136-63.dynamic.as20676.net)
[10:49:22] *** Quits: mro (~mro@port-92-195-136-63.dynamic.as20676.net) (Remote host closed the connection)
[10:59:32] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:8087:fa58:173a:8b14)
[11:00:37] *** Joins: gravicappa (~gravicapp@145.255.0.191)
[11:03:37] *** Joins: mro (~mro@port-92-195-136-63.dynamic.as20676.net)
[11:05:59] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[11:08:22] *** Quits: hsw (~hsw@106.104.103.195) (Quit: Leaving)
[11:18:16] *** Quits: mro (~mro@port-92-195-136-63.dynamic.as20676.net) (Remote host closed the connection)
[11:20:57] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:8087:fa58:173a:8b14) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:21:23] *** Quits: dextaa_ (~dextaa@user/dextaa) (Remote host closed the connection)
[11:25:32] *** Joins: mro (~mro@2002:5cc3:883f:0:80ac:b759:3f17:f117)
[11:25:44] *** Quits: mro (~mro@2002:5cc3:883f:0:80ac:b759:3f17:f117) (Read error: Connection reset by peer)
[11:30:41] *** Joins: mro (~mro@port-92-195-136-63.dynamic.as20676.net)
[11:30:58] *** Quits: mro (~mro@port-92-195-136-63.dynamic.as20676.net) (Remote host closed the connection)
[11:34:47] *** Joins: mro (~mro@port-92-195-136-63.dynamic.as20676.net)
[11:35:20] *** Quits: mro (~mro@port-92-195-136-63.dynamic.as20676.net) (Remote host closed the connection)
[11:39:44] *** Joins: mro (~mro@port-92-195-136-63.dynamic.as20676.net)
[11:41:08] *** Joins: paul (~paul@2400:4052:10a1:f200:7759:4efa:aa1:b997)
[11:46:08] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 272 seconds)
[12:06:19] *** Quits: paul (~paul@2400:4052:10a1:f200:7759:4efa:aa1:b997) (Quit: WeeChat 3.3)
[12:07:33] *** Joins: paul (~paul@2400:4052:10a1:f200:7759:4efa:aa1:b997)
[12:08:14] *** Quits: paul (~paul@2400:4052:10a1:f200:7759:4efa:aa1:b997) (Client Quit)
[12:09:52] *** Joins: benthumb2000 (~paul@2400:4052:10a1:f200:7759:4efa:aa1:b997)
[12:17:07] *** Quits: mro (~mro@port-92-195-136-63.dynamic.as20676.net) (Remote host closed the connection)
[12:20:10] *** Joins: mro (~mro@port-92-195-136-63.dynamic.as20676.net)
[12:22:48] *** Quits: mro (~mro@port-92-195-136-63.dynamic.as20676.net) (Remote host closed the connection)
[12:42:37] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[12:42:58] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[12:44:00] <d_bot_> <octachron> The indexing operators syntax was written by physicists, it would have been strange if we didn't include in-place mutation.
[12:54:37] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Quit: Leaving...)
[12:56:17] *** Joins: bartholin (~bartholin@158.110.70.204)
[13:06:53] *** Joins: mro (~mro@port-92-195-136-63.dynamic.as20676.net)
[13:21:33] *** Quits: mro (~mro@port-92-195-136-63.dynamic.as20676.net) (Remote host closed the connection)
[13:22:19] *** Joins: mro (~mro@port-92-195-136-63.dynamic.as20676.net)
[13:22:31] *** Joins: kakadu (~kakadu@195.19.236.234)
[13:32:37] *** Quits: mro (~mro@port-92-195-136-63.dynamic.as20676.net) (Remote host closed the connection)
[13:35:32] *** Quits: xd1le (~xd1le@user/xd1le) (Quit: xd1le)
[13:39:16] *** Joins: mro (~mro@port-92-195-136-63.dynamic.as20676.net)
[13:41:59] *** Joins: olle (~olle@i5E866D89.versanet.de)
[13:43:26] *** Quits: wingsorc__ (~wingsorc@user/wingsorc) (Quit: Leaving)
[13:45:59] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[13:46:20] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[13:54:13] *** Joins: Anarchos (~Anarchos@88.168.112.216)
[14:00:34] *** Quits: mro (~mro@port-92-195-136-63.dynamic.as20676.net) (Remote host closed the connection)
[14:07:22] <d_bot_> <Bluddy> I actually decided to use @companion_cube 's awesome `Gen` library instead of `Seq`
[14:07:55] <d_bot_> <Bluddy> It's pretty close to Byte Streams
[14:08:14] <d_bot_> <Bluddy> and you get the advantage of functional handling, too
[14:10:17] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[14:11:50] *** Quits: benthumb2000 (~paul@2400:4052:10a1:f200:7759:4efa:aa1:b997) (Quit: WeeChat 3.3)
[14:32:09] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[14:32:29] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[14:34:13] *** Quits: bartholin (~bartholin@158.110.70.204) (Ping timeout: 240 seconds)
[14:47:32] *** Joins: bartholin (~bartholin@158.110.70.204)
[14:58:12] *** Joins: mro (~mro@port-92-195-136-63.dynamic.as20676.net)
[15:02:16] *** Quits: mro (~mro@port-92-195-136-63.dynamic.as20676.net) (Remote host closed the connection)
[15:03:29] *** Joins: cedric (~cedric@2a01:cb11:821:7c00:8531:37af:1c62:d62)
[15:11:56] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[15:12:13] *** Quits: bartholin (~bartholin@158.110.70.204) (Ping timeout: 240 seconds)
[15:24:23] *** Joins: bartholin (~bartholin@158.110.70.204)
[15:48:28] *** Joins: mro (~mro@port-92-195-136-63.dynamic.as20676.net)
[16:07:26] <d_bot_> <sarna> hey, is there any easy way to turn a string with hex into hex itself? ie turn `"0a"` into `0x0a`
[16:08:56] <Anarchos> int_of_string |> Printf.printf "0x%x" could do the trick ?
[16:09:40] <d_bot_> <sarna> ah - I thought I'd have to prepend the string with 0x or something and it felt hacky. thank you!
[16:11:06] <d_bot_> <Alistair> Wouldn't it be `int_of_string ("0x" ^ x)`. Presumably you want something from `string -> int`?
[16:11:47] <d_bot_> <sarna> yeah that's exactly how I wanted to do it initially '^ ^ it still doesn't feel right haha
[16:19:30] *** Joins: Haudegen (~quassel@91.114.49.10)
[16:20:56] *** Quits: bartholin (~bartholin@158.110.70.204) (Ping timeout: 252 seconds)
[16:23:55] *** Joins: nimu (~nimu@18.29.0.55)
[16:24:21] <d_bot_> <sarna> oy actually I misread. I wanted int, not string :) so Alistair you were correct haha
[16:24:27] <nimu> i'm learning about phantom types and am trying this code snippet: https://pastebin.com/YtZZvg8P, any idea why this doesn't throw a type error? (from what i understand f should be a readonly 't while File.write takes in a readwrite 't)
[16:26:06] <qwr> Scanf.sscanf "1a" "%x" (Fun.id);; (* i'm not sure, that its better than int_of_string ("0x" ^ "1a") *)
[16:33:07] *** Joins: bartholin (~bartholin@158.110.70.204)
[16:33:32] <d_bot_> <bnguyenv> nimu: I think because of the apostrophe `'` before `readwrite` in the signature for write. It should be without
[16:40:27] *** Quits: mro (~mro@port-92-195-136-63.dynamic.as20676.net) (Remote host closed the connection)
[16:41:09] *** Joins: mro (~mro@port-92-195-136-63.dynamic.as20676.net)
[16:45:52] *** Joins: spip (~bobo@37.172.143.183)
[16:45:58] *** Quits: bobo (~bobo@37.172.143.183) (Ping timeout: 250 seconds)
[16:50:57] <octachron> indeed File.readwrite has type : 'a t -> ... (with 'a = 'readwrite) and thus doesn't enforce anything on its argument.
[16:51:05] *** Quits: nimu (~nimu@18.29.0.55) (Ping timeout: 256 seconds)
[17:18:38] *** Joins: oriba (~oriba@dynamic-089-012-112-014.89.12.pool.telefonica.de)
[17:23:55] <d_bot_> <Alistair> Does anyone have some good examples of semi-explicit first-class polymorphism, trying to think of examples but they all seem fairly contrived
[17:46:36] *** Quits: Anarchos (~Anarchos@88.168.112.216) (Ping timeout: 240 seconds)
[17:55:22] *** Quits: gravicappa (~gravicapp@145.255.0.191) (Ping timeout: 272 seconds)
[17:56:45] *** Joins: Anarchos (~Anarchos@88.168.112.216)
[18:03:54] *** Joins: waleee (~waleee@h-178-174-193-77.NA.cust.bahnhof.se)
[18:05:04] *** Quits: mro (~mro@port-92-195-136-63.dynamic.as20676.net) (Remote host closed the connection)
[18:08:17] *** Joins: bobo (~bobo@37.171.101.94)
[18:08:29] *** Quits: spip (~bobo@37.172.143.183) (Ping timeout: 256 seconds)
[18:09:01] *** Quits: cedric (~cedric@2a01:cb11:821:7c00:8531:37af:1c62:d62) (Quit: Konversation terminated!)
[18:19:50] *** Quits: Anarchos (~Anarchos@88.168.112.216) (Quit: Vision[]: i've been blurred!)
[18:20:53] *** Joins: mro (~mro@port-92-195-136-63.dynamic.as20676.net)
[18:22:36] *** Quits: mro (~mro@port-92-195-136-63.dynamic.as20676.net) (Remote host closed the connection)
[18:22:47] *** Joins: mro (~mro@2002:5cc3:883f:0:80ac:b759:3f17:f117)
[18:28:55] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[18:30:51] <d_bot_> <EduardoRFS> What do you mean by semi-explicit?
[18:44:04] *** Quits: mro (~mro@2002:5cc3:883f:0:80ac:b759:3f17:f117) (Remote host closed the connection)
[18:46:35] *** Joins: dextaa_ (~dextaa@user/dextaa)
[18:48:24] <d_bot_> <Alistair> e.g. ```ocaml
[18:48:26] <d_bot_> <Alistair> type 'a cont = { k : 'b. ('a -> 'b) -> 'b }
[18:48:27] <d_bot_> <Alistair> ```
[18:53:44] *** Joins: gravicappa (~gravicapp@145.255.0.191)
[19:01:04] *** Joins: mro (~mro@port-92-195-136-63.dynamic.as20676.net)
[19:02:01] <d_bot_> <mbacarella> oh, I thought that was your claim that I was repeating. nevermind then 🙂
[19:04:46] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:49a7:adba:9634:8f82)
[19:06:15] *** Quits: mro (~mro@port-92-195-136-63.dynamic.as20676.net) (Ping timeout: 256 seconds)
[19:06:18] <d_bot_> <darrenldl> ohhh
[19:06:32] *** Joins: mro (~mro@port-92-195-136-63.dynamic.as20676.net)
[19:07:34] *** Quits: bartholin (~bartholin@158.110.70.204) (Ping timeout: 272 seconds)
[19:09:08] *** Joins: bartholin (~bartholin@158.110.70.204)
[19:10:26] <d_bot_> <darrenldl> yeah no, capability model (i think this was the topic of discussion?) definitely has limitation as you suggested even if not considering clickjacking (or bypass via human operator essentially)
[19:20:55] *** Quits: mro (~mro@port-92-195-136-63.dynamic.as20676.net) (Remote host closed the connection)
[19:25:07] *** Joins: mro (~mro@port-92-195-136-63.dynamic.as20676.net)
[19:28:09] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:49a7:adba:9634:8f82) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:30:09] *** Joins: quartz (~quartz@user/quartz)
[19:34:07] <quartz> Hello. Can someone explain to me how the code at line 14 is an example of "pattern matching?" https://godbolt.org/z/fhrzPKjPe
[19:36:12] *** Quits: mro (~mro@port-92-195-136-63.dynamic.as20676.net) (Remote host closed the connection)
[19:36:48] <d_bot_> <colin> You're doing case analysis on the list, the `[]` and `h :: t` are patterns.
[19:38:47] <quartz> But how is 'h :: t' a pattern? 'h :: t' is suppose to mean "append h to t" or "append the head element to the tail'
[19:39:08] <d_bot_> <colin> It's the syntax for the cons constructor.
[19:39:09] *** Joins: mro (~mro@port-92-195-136-63.dynamic.as20676.net)
[19:39:18] <d_bot_> <colin> The `h` and `t` are pattern variables.
[19:39:49] <d_bot_> <colin> If it helps your understanding, you could define what it means to be a list yourself: `type 'a list = Nil | Cons of 'a * 'a list`, in which case the patterns would become `Nil` and `Cons (h, t)` respectively.
[19:40:13] <d_bot_> <colin> The `[]` and `_::_` syntax is just convenient since lists are ubiquitous in functional programming.
[19:41:00] <sleepydog> it might also help your understanding to think of these expressions not as "what it does" but "what it is"
[19:42:01] <sleepydog> rather than `h :: t` meaning "prepend the element h to the list t", think of it as "the list with first element `h` and the remaining elements `t`"
[19:46:32] <sleepydog> i like to imagine that every possible expression already exists, and i'm just temporarily giving one of them a name as a shorthand
[19:55:54] *** Joins: Techcable (~Techcable@168.235.93.147)
[20:08:20] *** Quits: mro (~mro@port-92-195-136-63.dynamic.as20676.net) (Quit: Leaving...)
[20:14:26] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:d135:2251:22b:8978)
[20:20:21] *** Quits: Haudegen (~quassel@91.114.49.10) (Quit: Bin weg.)
[21:16:11] *** Joins: Anarchos (~Anarchos@88.168.112.216)
[21:17:33] *** Joins: hornhack (~hackingho@user/hackinghorn)
[21:19:17] *** Quits: oriba (~oriba@dynamic-089-012-112-014.89.12.pool.telefonica.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:20:15] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Ping timeout: 256 seconds)
[21:20:47] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:d135:2251:22b:8978) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:22:52] *** Quits: dextaa_ (~dextaa@user/dextaa) (Remote host closed the connection)
[21:28:39] *** Quits: mbuf (~Shakthi@122.174.215.136) (Quit: Leaving)
[21:30:51] *** hornhack is now known as hackinghorn
[21:38:43] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[21:46:14] *** Quits: Anarchos (~Anarchos@88.168.112.216) (Quit: Vision[]: i've been blurred!)
[21:55:20] *** Quits: bartholin (~bartholin@158.110.70.204) (Quit: Leaving)
[21:56:20] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi)
[21:56:40] *** Quits: olle (~olle@i5E866D89.versanet.de) (Ping timeout: 272 seconds)
[21:58:07] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[22:52:51] *** Joins: zebrag (~chris@user/zebrag)
[22:55:24] *** Joins: dextaa_ (~dextaa@user/dextaa)
[23:03:04] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.4)
[23:13:46] *** Joins: Anarchos (~Anarchos@88.168.112.216)
[23:23:44] *** Joins: rgrinberg (~textual@2806:101e:7:8d89:ad31:8328:5a08:79cc)
[23:32:52] <d_bot_> <VPhantom> Out of curiosity, is the "best" way to make a list of tuples into a map in one operation to use Seq as an intermediary? i.e. `my_tuples |> List.to_seq |> StringMap.of_seq` — I was expecting a non-existent `Map.S.of_list` similar to `Set.S`'.
[23:33:23] *** Joins: olle (~olle@i5E866D89.versanet.de)
[23:52:23] <d_bot_> <octachron> Yes, `Seq` is used here as a good adaptator type: it doesn't build an intermediary container and it avoids the need to define n² conversion functions  .
[23:56:49] <d_bot_> <VPhantom> Understood.
[23:58:55] *** Quits: gravicappa (~gravicapp@145.255.0.191) (Ping timeout: 256 seconds)
