[00:02:57] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[00:04:13] *** Joins: Betal (~Betal@user/betal)
[00:04:26] *** Quits: phrix (~phrix@185.76.176.45) (Quit: Leaving)
[00:05:13] *** Joins: Dean (~Dean@165-73-119-36.ip.afrihost.capetown)
[00:05:54] *** Quits: JanC (~janc@user/janc) (Remote host closed the connection)
[00:06:08] *** Joins: JanC (~janc@user/janc)
[00:07:39] *** evanextreme[away is now known as evanextreme
[00:07:51] *** evanextreme is now known as evanextreme[away
[00:08:43] *** Quits: HisShadow (~HisShadow@user/hisshadow) (Ping timeout: 256 seconds)
[00:11:12] *** evanextreme[away is now known as evanextreme
[00:11:32] <ChoHag> He didn't. He (and Ken) wrote C so that they could write/port unix. Later on they wrote a book.
[00:12:57] <ChoHag> C exists so that unix can exist and the book is part of that story.
[00:18:47] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:95ea:d1ff:55f2:9ea6) (Ping timeout: 250 seconds)
[00:19:29] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[00:20:16] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:a506:183a:7675:98e5)
[00:21:42] *** Quits: elves-upstate (~elves-ups@129-2-180-41.wireless.umd.edu) (Quit: Client closed)
[00:21:54] *** Joins: elves-upstate (~elves-ups@129-2-180-41.wireless.umd.edu)
[00:22:23] *** Quits: angelacrust (~angelacru@182.68.208.211) (Quit: Client closed)
[00:25:31] *** evanextreme is now known as evanextreme[away
[00:27:29] <libc> ChoHag: thanks for the help and explanations
[00:27:45] *** Quits: libc (~archer@user/tessio) (Quit: Going to sleep)
[00:29:06] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Remote host closed the connection)
[00:30:28] *** Joins: angelacrust (~angelacru@182.68.208.211)
[00:30:34] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[00:30:43] <cherrry9> does anyone have an idea why entire program block when it's trying to aquire lock inside `fifo_is_empty` function? https://github.com/cherrry9/libc.h/blob/master/main.c
[00:32:47] *** Joins: oxfuxxx (~oxfuxxx@37.19.212.98)
[00:33:12] <ChoHag> No. The only reference to the word 'lock' is inside the word 'blocks'.
[00:33:35] <ChoHag> How is anyone supposed to diagnose locking issues when there is no locking code?
[00:34:11] <cherrry9> what
[00:34:30] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 252 seconds)
[00:34:49] <ChoHag> Try reading the words. Interpret them as English.
[00:35:36] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:b524:42ea:a6:2b1c) (Ping timeout: 252 seconds)
[00:35:45] <cherrry9> i send the entire code
[00:36:14] <omegatron> you forgot "fifo.h"
[00:36:23] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:b524:42ea:a6:2b1c)
[00:36:29] <cherrry9> https://github.com/cherrry9/libc.h/blob/master/fifo.h
[00:36:35] <cherrry9> https://github.com/cherrry9/libc.h/blob/master/libc.h
[00:36:59] <ChoHag> Try golfing the code a bit. That's awfully large.
[00:37:16] <NRK> why does libc.h exist?
[00:37:41] <cherrry9> we dont talk about this
[00:37:49] <ChoHag> That would represent the sum of the understand thus far.
[00:37:57] <ChoHag> understanding
[00:38:20] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[00:38:28] <cherrry9> the import thing there is only the TRY macro that i use inside fifo.h
[00:38:30] <ChoHag> cherrry9: Less of the weird boilerplate headers would help.
[00:38:49] <cherrry9> it just check if the function succeds and if not it print errno message and exit
[00:38:57] <ChoHag> There is no just. The important thing is you have way too much code.
[00:39:20] <cherrry9> tand i tried to make this struct fifo thread safe by adding spin lock
[00:39:38] <ChoHag> Remove code until the only part left to remove is the broken part.
[00:39:43] *** Quits: merrinx (~merrinx@ti0028a400-1685.bb.online.no) (Quit: WeeChat 3.3)
[00:40:09] *** Joins: smoke (~smoke@user/smoke)
[00:40:20] <cherrry9> i can do that
[00:40:25] <cherrry9> just wait a bit
[00:40:40] <ChoHag> Wow. That never usually works...
[00:41:10] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[00:45:00] <Dean> Hello ChoHag
[00:45:09] <ChoHag> Helo Dean.
[00:45:47] <NRK> cherrry9: hmm.. can i ask why you're using shell script instead of a Makefile?
[00:48:18] *** Quits: ka80 (~ka80@111.60.138.34.bc.googleusercontent.com) (Quit: Leaving)
[00:51:47] <pragma-> Okay, for one of candide's VMs, I'm leaning towards using one of the BSDs, emulated as SPARC. But which BSD?
[00:52:19] *** Joins: alphabeta (~kilolympu@31.205.200.235)
[00:52:40] *** Quits: kilolympus (~kilolympu@31.205.200.235) (Ping timeout: 272 seconds)
[00:53:02] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[00:53:05] *** Joins: Whatshisface (~jon@user/Whatshisface)
[00:53:21] <cherrry9> https://0x0.st/o8aL.c
[00:53:27] <cherrry9> is it good enough?
[00:53:30] <pragma-> NetBSD gcc at 9.3, hmm.
[00:54:14] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[00:54:27] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[00:54:34] <ChoHag> cherrry9: Have you found the problem yet?
[00:55:52] <cherrry9> no
[00:55:53] <HelloShitty> Hello. I need help to understand what are these 2 last parameters in the function I pasted here: https://pastebin.com/cgUjdtAU
[00:55:57] <ChoHag> Then no.
[00:56:21] <HelloShitty> I know about type casting and pointers to functions, but I have no idea what is going there
[00:56:44] * pragma- tries FreeBSD 11.3 sparc64
[00:57:06] <ChoHag> However you appear to be locking in the first thread and then telling all the other threads to block until that lock is unlocked without unlocking it.
[00:57:09] <HelloShitty> backtrace_print and backtrace_exit are functions
[00:57:20] <SaltHillStroller> This post (https://stackoverflow.com/questions/30224308/incrementing-pointer-to-static-allocated-array) seems to imply you can increment a pointer to an array type as it decays to a regular pointer. If so, why doesn't this work? https://onlinegdb.com/V2s8Nb3Xk-
[00:57:22] <cherrry9> i stated the problem above, do you need to know anything more?
[00:57:38] <cherrry9> https://0x0.st/o8aL.c
[00:57:53] <ChoHag> Yes that.
[00:58:03] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[00:58:24] *** Quits: soul-d (~uknown@user/soul-d) (Read error: Connection reset by peer)
[00:58:28] <pragma-> smh
[00:58:43] <ChoHag> fifo_alloc immediately locks the lock.
[00:58:45] <pragma-> freebsd.org downloading at 600KB/s
[00:58:50] <ChoHag> Everything then waits for it to unlock.
[00:59:03] <ChoHag> pragma-: Give openbsd a try, you'll probably have it installed before it's finished downloading.
[01:00:09] <ChoHag> (Hint: When the installer asks a question, say yes)
[01:01:13] <cherrry9> ChoHag: do you mean that pthread_spin_init locks the spinlock?
[01:01:23] <cherrry9> i tried to  unlock if after init but result is the same
[01:01:59] <ChoHag> Then you're using it wrong. Not my domain of expertise. Remove more code.
[01:02:18] *** Joins: vms14 (~user@29.red-79-153-202.dynamicip.rima-tde.net)
[01:02:55] <cherrry9> it's literaly the minimum needed
[01:03:12] <ChoHag> If the problem's not staring you in the face then that's literally not true.
[01:04:16] <ChoHag> You're not locking right, so why is there code in there that's not to do with locking?
[01:04:58] <vms14> should I always preallocate space for a buffer I want to use, instead of reallocating for every char I put? I'll use it for storing text that can range from 0 to infinity and it's a temporary buffer
[01:06:30] <vms14> preallocating a fixed size seems like I'll never preallocate a reasonable amount as I cannot predict the size of the text
[01:06:35] <ChoHag> Always? No. Generally reallocating a buffer one byte at a time is a bad idea.
[01:06:50] <vms14> but allocating for every char seems much worse
[01:06:55] <ChoHag> There's no rule you should blindly apply in all scenarios.
[01:07:29] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: Disconnecting)
[01:07:45] *** Quits: Telvana (~capo@user/telvana) (Ping timeout: 250 seconds)
[01:07:47] *** Joins: Viewday116 (~Viewday@user/viewday)
[01:08:46] <ChoHag> If you're doing some kind of string parsing you would generally want to (re-)allocate the output buffer in chunks keeping a note of how much free space remains in it.
[01:08:55] <vms14> ChoHag: if allocate one byte at a time is a bad idea, what do you think should be the minimum?
[01:08:55] *** Quits: acerbic (~acerbic@cs-xdata-50-86-50-230.cspire.com) (Read error: Connection reset by peer)
[01:09:15] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[01:09:15] *** Viewday116 is now known as Viewday11
[01:09:24] *** Quits: inlight (~thomas@user/inlight) (Ping timeout: 240 seconds)
[01:09:37] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:b524:42ea:a6:2b1c) (Quit: Quit)
[01:09:56] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:b524:42ea:a6:2b1c)
[01:10:44] *** Joins: HisShadow (~HisShadow@user/hisshadow)
[01:11:09] <vms14> also, would be more efficient if I have a fixed char array as buffer and use an additional buffer with malloc if the fixed one has reached the limit?
[01:11:14] <Xgc> vms14: It's like any performance issue, it depends.
[01:12:28] <ChoHag> Indeed you can't start improving performance until you can measure where performance lacks./
[01:12:33] <Xgc> vms14: The fixed array is probably a mistake.  It probably unnecessarily adds complication.
[01:13:16] <ChoHag> Well you can, but only in broad strokes.
[01:13:17] <vms14> Xgc: it's likely if I make a char buffer[300] the auxiliar one would be used in very few cases
[01:13:24] <Xgc> vms14: If it doesn't remove the need for dynamic behavior, you still need to resolve the dynamic logic/behavior, and now you need to deal with the two approaches together.
[01:13:32] <vms14> right
[01:13:40] <vms14> it adds complexity
[01:13:56] <vms14> and I'm learning simplicity is the key
[01:14:08] <ChoHag> vms14: You would be best served by allocating a ridiculously huge buffer then.
[01:14:17] <ChoHag> Say 1MB or something.
[01:14:23] <Xgc> You would only do that in the most extreme cases where you gain great benefit for the added complexity.
[01:14:24] <vms14> ChoHag: that's what I'd like to avoid
[01:14:29] <ChoHag> Then shrink it when you're done.
[01:14:40] <ChoHag> Don't. The OS will take care of the gnarly details.
[01:14:42] <vms14> but, could be used as a general temporary buffer xd
[01:16:00] <vms14> It sounds bad to have huge buffer knowing the most part will be unused most of the time
[01:16:06] <ChoHag> Why?
[01:16:08] <ChoHag> Memory is cheap.
[01:16:08] *** Joins: soul-d (~uknown@user/soul-d)
[01:16:09] *** Joins: angelacrust11 (~angelacru@2409:4053:2e15:da3c:6908:f954:b118:4c39)
[01:16:14] *** Quits: angelacrust11 (~angelacru@2409:4053:2e15:da3c:6908:f954:b118:4c39) (Write error: Connection reset by peer)
[01:16:19] <ChoHag> Hell, usually it doesn't even exist.
[01:16:27] <vms14> does not seem "correct"
[01:16:34] <vms14> looks more like a dirty fix
[01:16:40] * ChoHag shrugs
[01:16:51] <ChoHag> Does it work?
[01:17:03] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[01:17:06] <vms14> oh bro
[01:17:12] <vms14> java does work too
[01:17:27] <ChoHag> In the real world, you will only be allocated memory in 4KB (usually) pages when you write to them.
[01:17:44] <vms14> yes, you're right it's something I should never care about
[01:17:49] <ChoHag> Until you write to them your excessive allocation will occupy some administration structures.
[01:17:51] *** Quits: angelacrust (~angelacru@182.68.208.211) (Ping timeout: 256 seconds)
[01:17:57] *** Joins: wingsorc (~wingsorc@user/wingsorc)
[01:18:00] *** Quits: mh3f (~mdhowle@cpe-98-25-217-234.sc.res.rr.com) (Ping timeout: 272 seconds)
[01:18:12] <ChoHag> A couple of KB at most.
[01:18:14] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[01:18:23] <vms14> but seems like the start of not caring about correctness
[01:18:35] <ChoHag> Use the API you're given.
[01:18:36] <vms14> and nothing is correct even less my shitty code
[01:18:52] <vms14> ChoHag: I
[01:18:56] *** Quits: magla (~gelignite@d536370e.access.ecotel.net) (Quit: Stay safe!)
[01:18:59] <ChoHag> ISTR some GNU utility tried to be correct wrt cleaning up its data structures.
[01:19:06] <vms14> I'd like to make a bad written and bad implemented forth in C
[01:19:08] <ChoHag> Turns out it's better to just let the kernel throw them all away.
[01:19:30] <vms14> add bindings for xlib and sockets and have it as a toy lang
[01:19:53] *** Joins: angelacrust (~angelacru@2409:4053:2e15:da3c:6908:f954:b118:4c39)
[01:20:06] <ChoHag> Well who doesn't?
[01:20:10] <vms14> now that you say "use the api you're given" I remember about the apr (apache portable runtime) api
[01:20:14] <ChoHag> I'm basing mine on lisp though.
[01:20:24] <vms14> ChoHag: hah, I love lisp
[01:20:41] <vms14> take a look at s7 scheme, it's likely you'll like it
[01:21:01] <vms14> https://ccrma.stanford.edu/software/snd/snd/s7.html
[01:21:04] <ChoHag> I've already gone way beyond scheme.
[01:21:12] *** Joins: mh3f (~mdhowle@cpe-98-25-217-234.sc.res.rr.com)
[01:21:22] <vms14> I've played with it, it's just a s7.c and a s7.h you add to your code
[01:21:46] <ChoHag> I ended up writing my own VM.
[01:21:48] <vms14> adding bindings is easy and you can do whatever you want with it
[01:22:17] <vms14> but knowing I love lisp because the metaprogramming I'm wondering if I'll also love forth
[01:22:22] <ChoHag> Mostly done. Got to get the parser to spit out something sane when it's given nonsense then it's plain sailing.
[01:22:38] <vms14> and forth is the easiest usable language to implement that I've seen
[01:23:01] <ChoHag> Forth is quite far removed from the machine it's running on.
[01:23:11] <vms14> just the stack and the dictionary and you don't have to really follow that implementation
[01:23:43] <vms14> ChoHag: how did you implement function definitions?
[01:24:21] <ChoHag> A closure containing a pointer to the environment the function was defined in and the function's bytecode.
[01:24:28] <vms14> and what do you mean by 'Forth is quite far removed from the machine it's running on'
[01:24:32] <ChoHag> Oh and the function's argument signature.
[01:24:58] <ChoHag> Well most machines have dozens of registers and memory. Forth basically just has a stack.
[01:25:28] <vms14> ah, yes, but being it so easy to implement the forth you'll have will be written by you
[01:25:38] <vms14> so anything it misses it's not a problem
[01:26:00] <vms14> also, you don't have to implement it in asm, you can use any language and steal their libraries
[01:26:25] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[01:26:25] <vms14> my only concern is if I'll like forth as a language
[01:26:51] <vms14> If I love forth, I have a language which I love and which I can put it everywhere I want
[01:27:23] <ChoHag> It won't love you back.
[01:27:40] <vms14> also, the code could be mostly written in forth so porting it to another lang/machine would be easy
[01:27:46] * vms14 cries
[01:27:49] *** Quits: qorg11 (~lain@2605:6400:c022:fa04::666) (Ping timeout: 256 seconds)
[01:28:17] <vms14> well it will hate me because I'll implement it in the dirtiest way I can
[01:28:17] <ChoHag> Yes I ... think ... yes I think I hear the 1960s calling.
[01:31:27] *** Quits: Dean (~Dean@165-73-119-36.ip.afrihost.capetown) (Quit: Lost terminal)
[01:34:01] *** Quits: off^ (~off@50.235.176.163) (Remote host closed the connection)
[01:34:15] *** Joins: ka80 (~ka80@111.60.138.34.bc.googleusercontent.com)
[01:34:47] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:a506:183a:7675:98e5) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:35:22] *** Quits: pulse (~pulse@user/pulse) (Quit: Look behind you, a three headed monkey!)
[01:35:28] *** Quits: vms14 (~user@29.red-79-153-202.dynamicip.rima-tde.net) (Remote host closed the connection)
[01:37:28] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:a506:183a:7675:98e5)
[01:39:24] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 252 seconds)
[01:41:55] *** Joins: floatcomplex (~floatcomp@wireguard/tunneler/floatcomplex)
[01:42:33] *** Joins: dsrt^ (~dsrt@50.235.176.163)
[01:42:52] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[01:44:54] *** Quits: mahmutov (~mahmutov@37.155.20.217) (Ping timeout: 252 seconds)
[01:45:13] *** Quits: elves-upstate (~elves-ups@129-2-180-41.wireless.umd.edu) (Quit: Client closed)
[01:46:14] *** Joins: Telvana (~capo@user/telvana)
[01:46:31] *** Joins: qorg11 (~lain@2605:6400:c022:fa04::666)
[01:46:36] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:a506:183a:7675:98e5) (Ping timeout: 240 seconds)
[01:47:05] *** Joins: Viewday113 (~Viewday@user/viewday)
[01:47:28] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[01:47:28] *** Viewday113 is now known as Viewday11
[01:51:26] *** Joins: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com)
[01:51:48] *** Quits: smoke (~smoke@user/smoke) (Ping timeout: 240 seconds)
[01:52:00] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Quit: Lost terminal)
[01:54:20] *** Quits: angelacrust (~angelacru@2409:4053:2e15:da3c:6908:f954:b118:4c39) (Quit: Client closed)
[01:59:13] *** Quits: alch (~alch@151.34.162.135) (Read error: Connection reset by peer)
[02:03:20] *** Joins: alch (~alch@151.34.167.11)
[02:05:11] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: Sorry, I need to scratch my left butt cheek.)
[02:05:50] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca)
[02:09:37] *** Joins: smoke (~smoke@user/smoke)
[02:10:14] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[02:11:18] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 252 seconds)
[02:15:46] *** Quits: floatcomplex (~floatcomp@wireguard/tunneler/floatcomplex) (Quit: leaving)
[02:16:54] *** Quits: evanextreme[away (~evan@2604:4080:1000:8150:7950:a9e:9213:5d03) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:18:16] *** Joins: floatcomplex (~floatcomp@wireguard/tunneler/floatcomplex)
[02:19:00] *** Quits: cherrry9 (~jan@aein251.neoplus.adsl.tpnet.pl) (Ping timeout: 252 seconds)
[02:20:41] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::ef3c) (Quit: Konversation terminated!)
[02:21:00] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 240 seconds)
[02:21:38] *** Joins: orestarod (~orestarod@2a02:2149:8b20:700:2b9d:7f86:7169:61c0)
[02:24:38] *** Joins: karakedi (~eAC53C340@user/karakedi)
[02:25:10] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:28:34] *** Joins: cherrry9 (~jan@aein251.neoplus.adsl.tpnet.pl)
[02:30:06] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-3d94-4d23-dc7c-c228.res6.spectrum.com)
[02:30:48] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: Lost terminal)
[02:31:10] *** Quits: smoke (~smoke@user/smoke) (Remote host closed the connection)
[02:31:26] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[02:31:30] *** Quits: duds- (~duds-@user/duds) (Read error: Connection reset by peer)
[02:32:09] *** Joins: abf (~abf@user/abf)
[02:33:22] *** Quits: pizdets_ (~pizdets@183.182.111.58) (Ping timeout: 272 seconds)
[02:33:53] *** Joins: pizdets (~pizdets@183.182.111.3)
[02:34:02] *** Quits: malloy (~jimery@116.30.220.175) (Ping timeout: 250 seconds)
[02:35:09] *** Joins: duds- (~duds-@user/duds)
[02:35:57] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[02:36:11] *** Joins: malloy (~jimery@116.30.220.175)
[02:39:32] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:81fd:dc83:46f:8469)
[02:40:18] *** Quits: joev (~joev@user/joev) (Remote host closed the connection)
[02:40:42] *** Joins: joev (~joev@user/joev)
[02:40:51] *** Joins: ddoering (~Devinn@searspoint.nvidia.com)
[02:41:00] *** Quits: Devinn (~Devinn@searspoint.nvidia.com) (Ping timeout: 240 seconds)
[02:43:03] *** Quits: brad_mssw|mac (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: Leaving)
[02:48:03] *** Quits: orestarod (~orestarod@2a02:2149:8b20:700:2b9d:7f86:7169:61c0) (Quit: Leaving)
[02:49:11] *** Joins: chenqisu12 (~chenqisu1@183.217.200.249)
[02:51:28] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:81fd:dc83:46f:8469) (*.net *.split)
[02:51:28] *** Quits: floatcomplex (~floatcomp@wireguard/tunneler/floatcomplex) (*.net *.split)
[02:51:28] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (*.net *.split)
[02:51:28] *** Quits: wingsorc (~wingsorc@user/wingsorc) (*.net *.split)
[02:51:28] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (*.net *.split)
[02:51:28] *** Quits: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net) (*.net *.split)
[02:51:28] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (*.net *.split)
[02:51:28] *** Quits: bebyx (~Thunderbi@user/bebyx) (*.net *.split)
[02:51:28] *** Quits: mongrel (uid508343@id-508343.ilkley.irccloud.com) (*.net *.split)
[02:51:28] *** Quits: megeve (sid523379@id-523379.hampstead.irccloud.com) (*.net *.split)
[02:51:28] *** Quits: zwr (~zwr@2804:d45:b966:fb00:5d07:4fd9:1d9:2b23) (*.net *.split)
[02:51:28] *** Quits: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof) (*.net *.split)
[02:51:28] *** Quits: foul_owl (~kerry@207.244.125.36) (*.net *.split)
[02:51:28] *** Quits: plastico (~plastico@neomutt/plastico) (*.net *.split)
[02:51:28] *** Quits: sandman13 (sandman13@sandman13.jujube.ircnow.org) (*.net *.split)
[02:51:28] *** Quits: paulo (paulo@user/paulo/x-9032687) (*.net *.split)
[02:51:28] *** Quits: ghenry (~ghenry@ghenry.plus.com) (*.net *.split)
[02:51:28] *** Quits: dreamcat4 (uid157427@id-157427.hampstead.irccloud.com) (*.net *.split)
[02:51:28] *** Quits: anshupatia (uid29854@id-29854.helmsley.irccloud.com) (*.net *.split)
[02:51:28] *** Quits: kanin (~kanin@112.41.64.39) (*.net *.split)
[02:51:28] *** Quits: bjs (sid190364@user/bjs) (*.net *.split)
[02:51:28] *** Quits: greenbagels (~gb@user/greenbagels) (*.net *.split)
[02:51:28] *** Quits: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca) (*.net *.split)
[02:51:28] *** Quits: defjam (~eb0t@90.196.141.185) (*.net *.split)
[02:51:28] *** Quits: jancoow (~jancoow@user/jancoow) (*.net *.split)
[02:51:28] *** Quits: highrate (~presonic@user/highrate) (*.net *.split)
[02:51:28] *** Quits: emias (~holger@home.zedat.fu-berlin.de) (*.net *.split)
[02:51:28] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (*.net *.split)
[02:51:28] *** Quits: mrlemke (~quassel@2604:a880:4:1d0::394:0) (*.net *.split)
[02:51:28] *** Quits: mixfix41 (~sdenyninn@user/mixfix41) (*.net *.split)
[02:51:28] *** Quits: sebbu (~sebbu@user/sebbu) (*.net *.split)
[02:51:28] *** Quits: Biolunar (biolunar@2a02:908:4b24:5000:ba27:ebff:fee0:75a) (*.net *.split)
[02:51:28] *** Quits: bkhl (~bkhl@user/bkhl) (*.net *.split)
[02:51:28] *** Quits: rkta (~rkta@2001:4ba0:cafe:eaf::1) (*.net *.split)
[02:51:28] *** Quits: nikomo (~quassel@nikomo.fi) (*.net *.split)
[02:51:28] *** Quits: NiKaN (sid385034@id-385034.helmsley.irccloud.com) (*.net *.split)
[02:51:28] *** Quits: Pent (sid313808@lymington.irccloud.com) (*.net *.split)
[02:51:28] *** Quits: finsternis (~X@23.226.237.192) (*.net *.split)
[02:51:28] *** Quits: p0g0 (~p0g0@23.252.182.13) (*.net *.split)
[02:51:28] *** Quits: jaeckel (~jaeckel@sleipnir.jaeckel.eu) (*.net *.split)
[02:51:28] *** Quits: root__ (~root@157.245.144.252) (*.net *.split)
[02:51:28] *** Quits: citrons (~citrons@alt.mondecitronne.com) (*.net *.split)
[02:51:28] *** Quits: ericonr (~ericonr@voidlinux/docs/ericonr) (*.net *.split)
[02:51:28] *** Quits: nurupo (~nurupo.ga@user/nurupo) (*.net *.split)
[02:51:28] *** Quits: lm- (~lm-@vps-a26d080c.vps.ovh.net) (*.net *.split)
[02:51:28] *** Quits: gera (~gera@user/gera) (*.net *.split)
[02:51:28] *** Quits: jda (~jadra@chai.0xbad.coffee) (*.net *.split)
[02:51:28] *** Quits: dme2 (~dme2@67.205.140.199) (*.net *.split)
[02:51:28] *** Quits: xMopx (~xMopx-lib@192.95.23.134) (*.net *.split)
[02:51:28] *** Quits: uso (~matthias@ows-148-253-67-208.eu-west-2.compute.outscale.com) (*.net *.split)
[02:51:28] *** Quits: mgocobachi (~m@ancrae.com) (*.net *.split)
[02:51:28] *** Quits: supernovah (~supernova@mail.ijk.nz) (*.net *.split)
[02:51:28] *** Quits: richardwh1uk (richardwhi@scarlet.richardwhiuk.com) (*.net *.split)
[02:51:28] *** Quits: knittl (~knittl@user/knittl) (*.net *.split)
[02:51:28] *** Quits: savy_ (~z@io.tl) (*.net *.split)
[02:51:28] *** Quits: A_Dragon (A_D@libera/staff/dragon) (*.net *.split)
[02:51:28] *** Quits: dynos01 (~dynos01@li820-149.members.linode.com) (*.net *.split)
[02:51:28] *** Quits: tarzeau (~alex@mail.aiei.ch) (*.net *.split)
[02:51:28] *** Quits: foxtrot (~foxtrot@user/foxtrot) (*.net *.split)
[02:51:43] *** Joins: orestarod (~orestarod@2a02:2149:8b20:700:2b9d:7f86:7169:61c0)
[02:51:53] *** Joins: nurupo (~nurupo.ga@user/nurupo)
[02:53:47] *** Joins: floatcomplex (~floatcomp@wireguard/tunneler/floatcomplex)
[02:53:47] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[02:53:47] *** Joins: wingsorc (~wingsorc@user/wingsorc)
[02:53:47] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[02:53:47] *** Joins: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net)
[02:53:47] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[02:53:47] *** Joins: bebyx (~Thunderbi@user/bebyx)
[02:53:47] *** Joins: mongrel (uid508343@id-508343.ilkley.irccloud.com)
[02:53:47] *** Joins: megeve (sid523379@id-523379.hampstead.irccloud.com)
[02:53:47] *** Joins: zwr (~zwr@2804:d45:b966:fb00:5d07:4fd9:1d9:2b23)
[02:53:47] *** Joins: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof)
[02:53:47] *** Joins: foul_owl (~kerry@207.244.125.36)
[02:53:47] *** Joins: plastico (~plastico@neomutt/plastico)
[02:53:47] *** Joins: sandman13 (sandman13@sandman13.jujube.ircnow.org)
[02:53:47] *** Joins: paulo (paulo@user/paulo/x-9032687)
[02:53:47] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[02:53:47] *** Joins: dreamcat4 (uid157427@id-157427.hampstead.irccloud.com)
[02:53:47] *** Joins: anshupatia (uid29854@id-29854.helmsley.irccloud.com)
[02:53:47] *** Joins: kanin (~kanin@112.41.64.39)
[02:53:47] *** Joins: bjs (sid190364@user/bjs)
[02:53:47] *** Joins: greenbagels (~gb@user/greenbagels)
[02:53:47] *** Joins: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca)
[02:53:47] *** Joins: defjam (~eb0t@90.196.141.185)
[02:53:47] *** Joins: jancoow (~jancoow@user/jancoow)
[02:53:47] *** Joins: highrate (~presonic@user/highrate)
[02:53:47] *** Joins: emias (~holger@home.zedat.fu-berlin.de)
[02:53:47] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[02:53:47] *** Joins: mrlemke (~quassel@2604:a880:4:1d0::394:0)
[02:53:47] *** Joins: mixfix41 (~sdenyninn@user/mixfix41)
[02:53:47] *** Joins: sebbu (~sebbu@user/sebbu)
[02:53:47] *** Joins: Biolunar (biolunar@2a02:908:4b24:5000:ba27:ebff:fee0:75a)
[02:53:47] *** Joins: bkhl (~bkhl@user/bkhl)
[02:53:47] *** Joins: rkta (~rkta@2001:4ba0:cafe:eaf::1)
[02:53:47] *** Joins: nikomo (~quassel@nikomo.fi)
[02:53:47] *** Joins: NiKaN (sid385034@id-385034.helmsley.irccloud.com)
[02:53:47] *** Joins: Pent (sid313808@lymington.irccloud.com)
[02:53:47] *** Joins: finsternis (~X@23.226.237.192)
[02:53:47] *** Joins: p0g0 (~p0g0@23.252.182.13)
[02:53:47] *** Joins: jaeckel (~jaeckel@sleipnir.jaeckel.eu)
[02:53:47] *** Joins: root__ (~root@157.245.144.252)
[02:53:47] *** Joins: citrons (~citrons@alt.mondecitronne.com)
[02:53:47] *** Joins: ericonr (~ericonr@voidlinux/docs/ericonr)
[02:53:47] *** Joins: lm- (~lm-@vps-a26d080c.vps.ovh.net)
[02:53:47] *** Joins: gera (~gera@user/gera)
[02:53:47] *** Joins: knittl (~knittl@user/knittl)
[02:53:47] *** Joins: jda (~jadra@chai.0xbad.coffee)
[02:53:47] *** Joins: dme2 (~dme2@67.205.140.199)
[02:53:47] *** Joins: xMopx (~xMopx-lib@192.95.23.134)
[02:53:47] *** Joins: uso (~matthias@ows-148-253-67-208.eu-west-2.compute.outscale.com)
[02:53:47] *** Joins: tarzeau (~alex@mail.aiei.ch)
[02:53:47] *** Joins: mgocobachi (~m@ancrae.com)
[02:53:47] *** Joins: A_Dragon (A_D@libera/staff/dragon)
[02:53:47] *** Joins: supernovah (~supernova@mail.ijk.nz)
[02:53:47] *** Joins: richardwh1uk (richardwhi@scarlet.richardwhiuk.com)
[02:53:47] *** Joins: savy_ (~z@io.tl)
[02:53:47] *** Joins: dynos01 (~dynos01@li820-149.members.linode.com)
[02:53:47] *** Joins: foxtrot (~foxtrot@user/foxtrot)
[02:53:47] *** Quits: sebbu (~sebbu@user/sebbu) (Max SendQ exceeded)
[02:53:47] *** Quits: mixfix41 (~sdenyninn@user/mixfix41) (Max SendQ exceeded)
[02:53:47] *** Quits: finsternis (~X@23.226.237.192) (Max SendQ exceeded)
[02:54:12] *** Quits: cherrry9 (~jan@aein251.neoplus.adsl.tpnet.pl) (Ping timeout: 252 seconds)
[02:54:20] *** Joins: finsternis (~X@23.226.237.192)
[02:54:29] *** Joins: sebbu (~sebbu@user/sebbu)
[02:55:13] *** Joins: soapsudsxx (~soapsudsx@141.193.188.140)
[02:55:18] *** Quits: joev (~joev@user/joev) (Ping timeout: 252 seconds)
[02:55:55] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[02:56:01] *** Joins: joev (~joev@user/joev)
[02:56:57] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Ping timeout: 250 seconds)
[02:57:23] *** Quits: NiKaN (sid385034@id-385034.helmsley.irccloud.com) (Ping timeout: 250 seconds)
[02:57:56] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[02:59:39] *** Joins: NiKaN (sid385034@id-385034.helmsley.irccloud.com)
[03:00:41] *** Joins: evanextreme[away (~evan@2604:4080:1000:8150:7950:a9e:9213:5d03)
[03:01:42] *** Quits: evanextreme[away (~evan@2604:4080:1000:8150:7950:a9e:9213:5d03) (Client Quit)
[03:05:56] *** Quits: immibis_ (~hexchat@dynamic-089-204-138-014.89.204.138.pool.telefonica.de) (Remote host closed the connection)
[03:06:21] *** Joins: immibis_ (~hexchat@dynamic-089-204-138-014.89.204.138.pool.telefonica.de)
[03:07:23] *** Joins: Viewday110 (~Viewday@user/viewday)
[03:07:47] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 250 seconds)
[03:08:54] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[03:08:54] *** Quits: chenqisu12 (~chenqisu1@183.217.200.249) (Read error: Connection reset by peer)
[03:08:55] *** Viewday110 is now known as Viewday11
[03:10:26] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[03:15:39] *** Quits: adip (~adip@crd88.neoplus.adsl.tpnet.pl) (Ping timeout: 252 seconds)
[03:15:48] *** Quits: adip_ (~adip@crd88.neoplus.adsl.tpnet.pl) (Ping timeout: 272 seconds)
[03:15:55] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:16:02] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[03:16:25] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[03:20:36] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[03:22:55] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[03:23:41] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:28:01] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[03:29:44] *** Quits: oxfuxxx (~oxfuxxx@37.19.212.98) (Ping timeout: 272 seconds)
[03:29:51] *** Quits: immibis_ (~hexchat@dynamic-089-204-138-014.89.204.138.pool.telefonica.de) (Remote host closed the connection)
[03:30:18] *** Joins: immibis (~hexchat@dynamic-089-204-138-014.89.204.138.pool.telefonica.de)
[03:31:05] *** Joins: evanextreme[away (~evan@2604:4080:1000:8150:7950:a9e:9213:5d03)
[03:31:16] *** Joins: pnbeast (~pnbeast@2601:140:4280:6ce0::1)
[03:31:16] *** Quits: evanextreme[away (~evan@2604:4080:1000:8150:7950:a9e:9213:5d03) (Client Quit)
[03:33:33] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[03:33:48] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 240 seconds)
[03:34:03] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[03:34:12] *** Joins: evanextreme (~evan@64.187.160.183)
[03:35:13] *** Joins: bch (~bch@S01069050ca2cbf63.ok.shawcable.net)
[03:35:26] *** Quits: ddoering (~Devinn@searspoint.nvidia.com) (Ping timeout: 272 seconds)
[03:36:57] *** Quits: aesin_ (~aesin@81.211.127.107) (Ping timeout: 256 seconds)
[03:37:10] *** Joins: aesin (~aesin@81.211.127.107)
[03:42:29] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[03:42:38] *** Quits: evanextreme (~evan@64.187.160.183) (Read error: Connection reset by peer)
[03:43:02] *** Joins: de-facto (~de-facto@user/de-facto)
[03:43:56] *** Joins: evanextreme (~evan@64.187.160.183)
[03:46:32] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[03:46:52] *** Joins: Viewday115 (~Viewday@user/viewday)
[03:47:18] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[03:47:18] *** Viewday115 is now known as Viewday11
[03:51:02] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[03:52:09] *** Joins: ferdna (~ferdna@user/ferdna)
[03:52:47] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::ef3c)
[03:53:48] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 272 seconds)
[03:55:05] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[03:55:14] *** Joins: Wulf (~Wulf@user/wulf)
[03:55:22] *** Joins: de-facto (~de-facto@user/de-facto)
[03:56:21] *** Quits: orestarod (~orestarod@2a02:2149:8b20:700:2b9d:7f86:7169:61c0) (Ping timeout: 252 seconds)
[03:58:07] *** Quits: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca) (Remote host closed the connection)
[04:01:18] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::ef3c) (Quit: Konversation terminated!)
[04:06:00] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[04:08:03] *** evanextreme is now known as evanextreme[away
[04:08:03] *** Quits: evanextreme[away (~evan@64.187.160.183) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:11:28] *** Quits: freep (~freepppp@193.92.35.32.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[04:13:00] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 240 seconds)
[04:14:10] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[04:16:20] *** Joins: constxd_ (~brad@142.134.79.191)
[04:16:24] <constxd_> kings
[04:17:01] <constxd_> what's that file that has all the terminal control strings and how do u read it again
[04:17:48] *** Quits: SaltHillStroller (~SaltHillS@206.223.160.26) (Ping timeout: 240 seconds)
[04:18:23] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[04:20:20] *** Joins: Neutron7 (~monopolys@96.73.191.185)
[04:22:17] *** Quits: masterbuilder (~user@user/masterbuilder) (Remote host closed the connection)
[04:25:50] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:25:50] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:25:50] *** Joins: wroathe (~wroathe@user/wroathe)
[04:29:13] *** Joins: cthi (~cthi@097-082-138-151.res.spectrum.com)
[04:30:05] *** Quits: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[04:35:13] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[04:37:27] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[04:41:20] *** Parts: floatcomplex (~floatcomp@wireguard/tunneler/floatcomplex) ()
[04:41:21] <twkm> there isn't one, per se.  on unix-y systems there's termcap(5) but it isn't everything -- these days you'd use curses or terminfo directly.
[04:41:39] *** Quits: abf (~abf@user/abf) (Quit: Leaving)
[04:45:50] *** Joins: crashrep (~crashrep@user/crashrep)
[04:46:42] <gry> ChoHag: sorted out the PERL5LIB issue with ikiwiki by modifying Wrapper.pm, details at https://ikiwiki.info/forum/problems_with_git_push_on_openbsd/ last comment. [not C related, but a follow up of conversation with you and with Grell that we had a few days ago in this channel]
[04:46:58] <gry> ChoHag: thank you for your tips earlier
[04:47:18] *** Joins: vin (~vin@user/crash)
[04:49:17] <vin> What is the minimum size to store an offset? Basically offset pointing to a start of a particular byte. The offset should be able to represent 1e+12 values.
[04:51:48] <omegatron> is this meant to be a trick question?
[04:55:18] *** Joins: oxfuxxx (~oxfuxxx@37.19.212.98)
[04:57:45] *** Parts: niko3 (~mmk@198-200-74-246.cpe.distributel.net) (Leaving)
[05:05:02] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[05:06:03] *** Joins: Devinn (~Devinn@searspoint.nvidia.com)
[05:06:12] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[05:07:24] <vin> omegatron: what I mean is if there is 1e+12 pointor and I need to track half of these then the offset should be able to represent 5e+11. So ofset should be atleast 11 bits.
[05:07:24] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[05:08:14] <omegatron> eh ..
[05:08:19] *** Joins: Viewday117 (~Viewday@user/viewday)
[05:08:34] <fizzie> You need rather more than 11 bits to represent 5e+11 distinct values.
[05:09:05] <vin> Correct,even if the offset requires 12 bits, how would I represent it in C?
[05:09:24] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 240 seconds)
[05:09:24] *** Viewday117 is now known as Viewday11
[05:09:30] <fizzie> You need rather more than 12 bits to represent 5e+11 distinct values, too.
[05:09:40] <vin> struct bitset12 { unsigned val:12; }; ?
[05:09:41] <omegatron> vin:  can you write down   5e+11    and  2^11   as plain numbers ?
[05:09:47] <fizzie> ,cc printf("You need about %f bits or so for that.", log2(5e11));
[05:09:49] <candide> fizzie: You need about 38.863137 bits or so for that.
[05:10:22] <vin> ,cc printf("You need about %f bits or so for that.", log2(1e12));
[05:10:24] <candide> vin: You need about 39.863137 bits or so for that.
[05:10:38] <vin> So 40 bits eh!
[05:10:56] <vin> Bascially 5 B
[05:12:08] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:12:27] <omegatron> save your time and just use a 64-bit unsigned integer or do you have space constraints?
[05:12:46] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[05:13:22] <vin> I do have space constraints omegatron
[05:13:54] *** Joins: Betal (~Betal@user/betal)
[05:14:30] <omegatron> .... and .. can you write down 1e12  and  2^64  as plain numbers for example?
[05:14:32] *** Joins: SaltHillStroller (~SaltHillS@206.223.160.26)
[05:15:38] *** Quits: EtherNet (~ethernet@user/ethernet) (Ping timeout: 250 seconds)
[05:16:36] *** Quits: boB_K7IQ (~boB_K7IQ@152.44.147.180) (Ping timeout: 240 seconds)
[05:17:08] *** Joins: skapate (~Skapata@2804:14c:87b0:9d2e:58f5:a83c:3a8a:25e6)
[05:17:08] *** Quits: skapate (~Skapata@2804:14c:87b0:9d2e:58f5:a83c:3a8a:25e6) (Changing host)
[05:17:08] *** Joins: skapate (~Skapata@user/skapata)
[05:17:32] *** Joins: EtherNet (~ethernet@user/ethernet)
[05:17:32] *** Joins: boB_K7IQ (~boB_K7IQ@174-26-254-41.phnx.qwest.net)
[05:17:48] *** Quits: Charadon (~Charadon@155.138.164.183) (Ping timeout: 240 seconds)
[05:18:51] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 252 seconds)
[05:19:58] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[05:20:08] *** Joins: Viewday11 (~Viewday@user/viewday)
[05:20:14] *** Joins: cousteau_ (~cousteau@user/cousteau)
[05:21:59] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:81fd:dc83:46f:8469)
[05:25:01] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[05:29:24] *** Quits: constxd_ (~brad@142.134.79.191) (Ping timeout: 240 seconds)
[05:29:30] *** Joins: moose (~moose@user/moose)
[05:30:16] *** Joins: vysn (~vysn@user/vysn)
[05:30:37] <omegatron> I guess there will never be an answer ...  -_-
[05:34:13] *** Joins: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net)
[05:36:24] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Ping timeout: 272 seconds)
[05:38:43] <vin> omegatron: there isn't one.
[05:38:56] <vin> those are the numbers
[05:39:04] *** Quits: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net) (Client Quit)
[05:39:18] *** Quits: kish` (~aqua@user/aqua) (Quit: Leaving)
[05:40:56] *** Quits: oxfuxxx (~oxfuxxx@37.19.212.98) (Quit: Yankies Motherfh@ckers C0[k Astroboys)
[05:41:12] *** Joins: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net)
[05:41:22] <omegatron> the correct answer would have been   1000000000000   and  18446744073709551616
[05:41:48] *** Quits: random-nick (~random-ni@87.116.181.150) (Ping timeout: 240 seconds)
[05:41:52] *** Joins: oxfuxxx (~oxfuxxx@217.138.213.29)
[05:44:01] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[05:45:16] *** Quits: cousteau_ (~cousteau@user/cousteau) (Quit: ♫ I can't forget the day I shot that network down ♫)
[05:45:52] *** Joins: Viewday110 (~Viewday@user/viewday)
[05:45:53] *** Quits: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net) (Ping timeout: 256 seconds)
[05:47:18] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[05:47:18] *** Viewday110 is now known as Viewday11
[05:50:01] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[05:51:51] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 252 seconds)
[05:52:19] *** lukedashjr is now known as luke-jr
[05:53:00] *** Quits: Alhazred (~Alhazred@86.106.74.37) (Ping timeout: 240 seconds)
[05:53:31] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca)
[05:53:37] *** Parts: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca) ()
[05:54:09] *** Joins: Thedarkb (~Thedarkb@2001:bb6:b403:e042:b812:bb3f:25c8:9173)
[05:54:46] *** Quits: Devinn (~Devinn@searspoint.nvidia.com) (Ping timeout: 272 seconds)
[05:55:11] *** Joins: Alhazred (~Alhazred@ool-18b829c5.dyn.optonline.net)
[05:57:20] *** Quits: mongrel (uid508343@id-508343.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[05:59:59] *** Quits: darkoccultist (~darkone@user/darkoccultist) (Read error: Connection reset by peer)
[06:00:54] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[06:01:02] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[06:01:45] *** Quits: alch (~alch@151.34.167.11) (Ping timeout: 252 seconds)
[06:03:19] *** Joins: eddybilley (~freddieti@77-165-15-254.fixed.kpn.net)
[06:03:39] *** Joins: alch (~alch@151.34.191.103)
[06:05:15] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 240 seconds)
[06:05:23] *** Joins: bindu_ (~bindu@user/bindu)
[06:06:36] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 240 seconds)
[06:07:22] *** bindu_ is now known as bindu
[06:07:48] *** Quits: eddybilley (~freddieti@77-165-15-254.fixed.kpn.net) (Ping timeout: 240 seconds)
[06:11:15] *** Quits: crankslider (~slidercra@user/slidercrank) (Remote host closed the connection)
[06:12:29] *** Quits: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net) (Remote host closed the connection)
[06:12:45] *** Joins: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net)
[06:19:00] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Ping timeout: 240 seconds)
[06:19:57] *** Joins: fe23 (~fe23@2409:8a34:46c:f80:a191:599:473c:e23a)
[06:25:48] *** Quits: boB_K7IQ (~boB_K7IQ@174-26-254-41.phnx.qwest.net) (Ping timeout: 272 seconds)
[06:26:51] *** Joins: boB_K7IQ (~boB_K7IQ@ip72-201-138-188.ph.ph.cox.net)
[06:29:08] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Read error: No route to host)
[06:32:36] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 240 seconds)
[06:36:17] *** Quits: superboot (~agentgasm@user/superboot) (Quit: leaving)
[06:37:12] *** Quits: constxd (~brad@142.134.79.191) (Ping timeout: 272 seconds)
[06:37:55] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[06:38:03] *** Quits: SaltHillStroller (~SaltHillS@206.223.160.26) (Ping timeout: 252 seconds)
[06:40:40] *** Joins: constxd_ (~brad@142.134.79.191)
[06:44:21] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[06:45:12] *** Quits: figrita (~figrita@2603-7080-9801-332f-5813-eeaf-976d-830a.res6.spectrum.com) (Quit: Leaving)
[06:47:02] *** Quits: alex11 (~alex11@user/alex11) (Read error: Connection reset by peer)
[06:52:08] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[06:52:51] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:57:28] *** Quits: oxfuxxx (~oxfuxxx@217.138.213.29) (Ping timeout: 272 seconds)
[07:01:31] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[07:03:22] *** Joins: oxfuxxx (~oxfuxxx@217.138.213.30)
[07:03:49] *** Joins: alex11 (~alex11@user/alex11)
[07:04:19] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[07:07:34] *** Joins: Azem (~haise01@user/haise01)
[07:07:56] *** Joins: Viewday115 (~Viewday@user/viewday)
[07:09:22] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[07:09:22] *** Viewday115 is now known as Viewday11
[07:10:30] *** Quits: Emet-Selch (~haise01@user/haise01) (Ping timeout: 252 seconds)
[07:10:36] *** Quits: constxd_ (~brad@142.134.79.191) (Ping timeout: 240 seconds)
[07:19:24] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:81fd:dc83:46f:8469) (Ping timeout: 240 seconds)
[07:20:47] *** Joins: Charadon (~Charadon@155.138.164.183)
[07:30:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[07:33:42] *** Quits: drbeco (~beco@2804:351c:dd01:6600:e4a2:7a5d:e23f:1fd8) (Quit: Leaving)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:37:25] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[07:37:28] <SamuelMarks> hi
[07:38:30] <SamuelMarks> When I use vcpkg and `find_package` to get my library it gives a "AddressSanitizer:DEADLYSIGNAL" "ERROR: AddressSanitizer: SEGV on unknown address 0x00000000002f" "The signal is caused by a READ memory access." "The signal is caused by a READ memory access.". When I just `add_subdirectory` the library no issues occur (making debug hard?). How do I debug this?
[07:38:36] *** Quits: oxfuxxx (~oxfuxxx@217.138.213.30) (Ping timeout: 240 seconds)
[07:38:42] * SamuelMarks is using CMake
[07:39:55] *** Joins: phyto (~kyle@host-198-114.txbrags.bryan.tx.us.clients.pavlovmedia.net)
[07:40:42] *** Quits: phyto (~kyle@host-198-114.txbrags.bryan.tx.us.clients.pavlovmedia.net) (Client Quit)
[07:43:55] *** Joins: eddybilley (~freddieti@2a02-a454-7f89-1-d569-b31b-39c6-bea7.fixed6.kpn.net)
[07:46:17] *** Joins: Viewday115 (~Viewday@user/viewday)
[07:46:47] *** Joins: wroathe (~wroathe@user/wroathe)
[07:47:43] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[07:47:44] *** Viewday115 is now known as Viewday11
[07:48:27] *** Quits: eddybilley (~freddieti@2a02-a454-7f89-1-d569-b31b-39c6-bea7.fixed6.kpn.net) (Ping timeout: 252 seconds)
[07:49:30] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[07:50:06] *** Quits: bch (~bch@S01069050ca2cbf63.ok.shawcable.net) (Remote host closed the connection)
[07:51:00] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 240 seconds)
[07:55:33] *** Joins: hinata (~hinata@2409:4042:2ea3:e72b:1568:71d5:62f2:d350)
[07:58:06] *** Joins: smoke (~smoke@user/smoke)
[07:59:09] *** Joins: Darkcoal (~user@user/Darkcoal)
[08:00:12] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[08:00:36] *** Joins: ElPresidente (~ElPreside@2600:1700:3d10:4870:aaa1:59ff:fe3c:ddb4)
[08:06:13] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[08:06:13] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[08:06:13] *** Joins: wroathe (~wroathe@user/wroathe)
[08:10:36] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[08:14:32] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Quit: Leaving)
[08:19:16] *** Joins: van (~van@mx.nocebo.space)
[08:19:31] *** van is now known as zerous
[08:24:04] *** Joins: floatcomplex (~floatcomp@wireguard/tunneler/floatcomplex)
[08:26:07] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:26:50] *** Joins: slidercrank (~slidercra@user/slidercrank)
[08:27:24] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 240 seconds)
[08:29:20] *** Joins: immibis_ (~hexchat@62.156.144.218)
[08:29:31] *** Joins: Darkcoal (~user@user/Darkcoal)
[08:30:16] *** Joins: Atque (~Atque@user/atque)
[08:31:00] *** Quits: Alhazred (~Alhazred@ool-18b829c5.dyn.optonline.net) (Ping timeout: 240 seconds)
[08:31:10] *** Joins: Alhazred (~Alhazred@86.106.74.42)
[08:31:48] *** Quits: immibis (~hexchat@dynamic-089-204-138-014.89.204.138.pool.telefonica.de) (Ping timeout: 240 seconds)
[08:34:07] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[08:39:48] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[08:41:58] *** Quits: Alhazred (~Alhazred@86.106.74.42) (Ping timeout: 272 seconds)
[08:42:27] *** Quits: Nutcrawler (~sergio@217-180-232-30.sycmilaa.metronetinc.net) (Read error: Connection reset by peer)
[08:45:40] *** Joins: bch (~bch@S01069050ca2cbf63.ok.shawcable.net)
[08:48:18] *** Quits: smoke (~smoke@user/smoke) (Ping timeout: 272 seconds)
[09:04:46] *** Quits: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com) (Ping timeout: 272 seconds)
[09:05:58] *** Joins: adip (~adip@crd88.neoplus.adsl.tpnet.pl)
[09:06:00] *** Joins: adip_ (~adip@crd88.neoplus.adsl.tpnet.pl)
[09:07:38] *** Joins: Viewday119 (~Viewday@user/viewday)
[09:08:18] *** Quits: skapate (~Skapata@user/skapata) (Remote host closed the connection)
[09:09:04] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[09:09:04] *** Viewday119 is now known as Viewday11
[09:09:51] *** Quits: Charadon (~Charadon@155.138.164.183) (Ping timeout: 252 seconds)
[09:11:23] *** Joins: smoke (~smoke@user/smoke)
[09:13:09] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[09:18:21] *** Quits: smoke (~smoke@user/smoke) (Remote host closed the connection)
[09:21:52] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 272 seconds)
[09:23:21] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[09:29:00] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[09:31:03] *** Joins: masoudd (~masoudd@user/masoudd)
[09:32:33] *** Quits: soapsudsxx (~soapsudsx@141.193.188.140) (Remote host closed the connection)
[09:33:55] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[09:34:05] *** Joins: psyxopompos (~psyxopomp@user/psyxopompos)
[09:35:56] *** Joins: Dean (~Dean@user/De4n-Whit3/x-9385125)
[09:35:59] <Dean> hello
[09:36:34] *** Quits: bliminse (~bliminse@host86-158-241-239.range86-158.btcentralplus.com) (Quit: leaving)
[09:36:43] *** Quits: moose (~moose@user/moose) (Read error: Connection reset by peer)
[09:36:51] *** Quits: KevinX (~KevinX@user/KevinX) (Read error: Connection reset by peer)
[09:37:01] *** Joins: moose (~moose@user/moose)
[09:37:06] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) ()
[09:37:42] *** Quits: Neutron7 (~monopolys@96.73.191.185) (Remote host closed the connection)
[09:37:42] *** Joins: KevinX (~KevinX@user/KevinX)
[09:38:03] *** Joins: Neutron7 (~monopolys@96.73.191.185)
[09:38:36] *** Quits: boB_K7IQ (~boB_K7IQ@ip72-201-138-188.ph.ph.cox.net) (Ping timeout: 240 seconds)
[09:38:36] *** Quits: csrf (~csrf@user/csrf) (Ping timeout: 240 seconds)
[09:38:41] *** Joins: NEYi_ (~NEYi@109.251.216.38)
[09:38:58] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[09:39:19] *** Quits: immibis_ (~hexchat@62.156.144.218) (Remote host closed the connection)
[09:39:26] *** Joins: immibis_ (~hexchat@62.156.144.218)
[09:39:42] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Read error: Connection reset by peer)
[09:39:50] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[09:40:12] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 240 seconds)
[09:40:29] *** Joins: boB_K7IQ (~boB_K7IQ@ip72-201-138-188.ph.ph.cox.net)
[09:40:36] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 240 seconds)
[09:40:36] *** Quits: baltazar (~baltazar@178-164-240-26.pool.digikabel.hu) (Ping timeout: 240 seconds)
[09:40:43] *** Joins: Wulf (~Wulf@user/wulf)
[09:40:59] *** Joins: csrf (~csrf@user/csrf)
[09:41:24] *** Quits: NEYi (~NEYi@109.251.216.38) (Ping timeout: 240 seconds)
[09:41:44] *** Joins: baltazar (~baltazar@178-164-240-26.pool.digikabel.hu)
[09:41:48] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[09:41:59] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Remote host closed the connection)
[09:42:13] *** Joins: d_low (~dlow@107-210-161-84.lightspeed.tukrga.sbcglobal.net)
[09:42:18] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[09:42:24] <masoudd> hi
[09:42:30] *** Joins: the_lanetly_052 (~the_lanet@194.135.154.108)
[09:42:37] *** Quits: lhtseng (sid15322@id-15322.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[09:43:09] *** Joins: lhtseng (sid15322@id-15322.helmsley.irccloud.com)
[09:43:11] *** Joins: Nutcrawler (~sergio@217-180-232-30.sycmilaa.metronetinc.net)
[09:44:02] *** Quits: leonardus (sid358597@id-358597.tinside.irccloud.com) (Ping timeout: 260 seconds)
[09:44:19] *** Joins: karakedi (~eAC53C340@user/karakedi)
[09:44:43] *** Quits: foul_owl (~kerry@207.244.125.36) (Ping timeout: 250 seconds)
[09:46:05] *** Joins: leonardus (sid358597@id-358597.tinside.irccloud.com)
[09:46:08] *** Joins: Viewday112 (~Viewday@user/viewday)
[09:47:36] *** Quits: Viewday11 (~Viewday@user/viewday) (Write error: Connection reset by peer)
[09:47:37] *** Viewday112 is now known as Viewday11
[09:53:54] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[09:54:40] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[09:57:01] <caze> Dean: I looked at your solution for exercise 1-17.
[09:58:28] <caze> Dean: Looks like the paste has expired though.
[09:58:43] *** Quits: d_low (~dlow@107-210-161-84.lightspeed.tukrga.sbcglobal.net) (Quit: Leaving)
[09:59:03] *** Joins: d_low (~dlow@107-210-161-84.lightspeed.tukrga.sbcglobal.net)
[09:59:14] <caze> Dean: As I recall, you hardcoded a maximum line limit. You should be able to handle arbitrarily long lines.
[09:59:41] *** Quits: alch (~alch@151.34.191.103) (Read error: Connection reset by peer)
[10:00:17] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[10:01:55] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (Ping timeout: 240 seconds)
[10:03:28] *** Joins: ekathva (~ekathva@n3k02urgmuqvuf9nu-1.v6.elisa-mobile.fi)
[10:03:32] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[10:03:59] *** Joins: alch (~alch@151.34.182.5)
[10:05:53] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Remote host closed the connection)
[10:06:46] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[10:12:09] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:14:48] *** Joins: foul_owl (~kerry@23.105.36.232)
[10:15:15] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:b524:42ea:a6:2b1c) (Quit: Quit)
[10:15:36] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:b524:42ea:a6:2b1c)
[10:15:48] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[10:22:24] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[10:30:02] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Read error: Connection reset by peer)
[10:31:38] *** Joins: Viewday112 (~Viewday@user/viewday)
[10:31:48] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 252 seconds)
[10:32:13] *** Quits: pnbeast (~pnbeast@2601:140:4280:6ce0::1) (Quit: WeeChat 2.7.1)
[10:32:35] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[10:33:27] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[10:33:27] *** Viewday112 is now known as Viewday11
[10:34:27] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[10:34:52] *** Joins: teepee (~teepee@openscad/teepee)
[10:38:54] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[10:39:10] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[10:41:31] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[10:41:31] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[10:41:31] *** Joins: wroathe (~wroathe@user/wroathe)
[10:46:13] *** Quits: zsoltiv__ (~zsoltiv@fibhost-67-12-35.fibernet.hu) (Ping timeout: 256 seconds)
[10:46:44] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[10:48:52] *** Quits: Natch (~natch@c-4db8e255.014-297-73746f25.bbcust.telenor.se) (Ping timeout: 250 seconds)
[10:50:07] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[10:50:46] *** Joins: jusski (~user@78-63-85-123.static.zebra.lt)
[10:50:56] *** Joins: iomari891 (~iomari891@105.112.138.38)
[10:51:00] *** Quits: fe23 (~fe23@2409:8a34:46c:f80:a191:599:473c:e23a) (Ping timeout: 240 seconds)
[10:51:06] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:51:43] <Dean> hello caze!
[10:53:26] *** Joins: Natch (~natch@c-4db8e255.014-297-73746f25.bbcust.telenor.se)
[10:54:09] <Dean> case this was it https://paste.debian.net/1231079/
[10:54:14] <Dean> caze *
[10:54:31] <Dean> thank you for getting back to me on it, i appreciate it
[10:57:16] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[11:04:21] *** Joins: kish` (~aqua@user/aqua)
[11:04:35] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[11:04:57] *** Joins: kish` (~aqua@user/aqua)
[11:11:33] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[11:11:38] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[11:11:58] *** Quits: ckdCreations (~ckdCreati@147.55.130.32) (Read error: Connection reset by peer)
[11:12:15] *** Joins: ckdCreations (~ckdCreati@147.55.130.34)
[11:13:20] *** Quits: Natch (~natch@c-4db8e255.014-297-73746f25.bbcust.telenor.se) (Ping timeout: 272 seconds)
[11:16:25] *** Joins: Natch (~natch@c-4db8e255.014-297-73746f25.bbcust.telenor.se)
[11:18:02] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[11:20:18] *** Joins: eddybilley (~freddieti@217.119.232.174)
[11:20:47] *** Joins: gproto23 (~gproto23@user/gproto23)
[11:22:11] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[11:22:30] *** Joins: gproto23 (~gproto23@user/gproto23)
[11:24:31] *** Joins: panda88kazag (~RadimPavl@176-74-132-138.netdatacomm.cz)
[11:25:46] *** Joins: mrig (~mrig@user/mrig)
[11:26:33] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 250 seconds)
[11:30:12] *** Quits: qorg11 (~lain@2605:6400:c022:fa04::666) (Ping timeout: 240 seconds)
[11:35:13] *** Quits: sandman13 (sandman13@sandman13.jujube.ircnow.org) (Ping timeout: 250 seconds)
[11:35:13] *** Quits: paulo (paulo@user/paulo/x-9032687) (Ping timeout: 250 seconds)
[11:35:14] *** Quits: fcresende_ (fcresende@2605:6400:20:434:64d1:2b97:ef75:bc59) (Ping timeout: 250 seconds)
[11:36:25] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[11:36:36] <ChoHag> Dean: You can use a buffer that's exactly 80 bytes long and at the same time not have a limit on the length of lines at all.
[11:36:54] *** Joins: karakedi (~eAC53C340@user/karakedi)
[11:37:00] *** Quits: gnoo (gnoo@user/gnoo) (Ping timeout: 240 seconds)
[11:37:52] *** Joins: aradesh (~aradesh@user/aradesh)
[11:38:23] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[11:40:03] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[11:40:05] *** Joins: qorg11 (~lain@2605:6400:c022:fa04::666)
[11:40:09] *** Joins: freep (~freepppp@193.92.35.32.dsl.dyn.forthnet.gr)
[11:40:30] <ChoHag> For each character, if your index is less than 80, stuff it; if it's at 80, print the lot; it it's over 80, print the character and if the character is \n, reset the index to 0.
[11:40:36] *** Quits: adip_ (~adip@crd88.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[11:41:00] *** Quits: adip (~adip@crd88.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[11:41:27] <ChoHag> The only thing that can possibly overflow is if you keep incrementing the index after you hit 80 and you read a line that's longer than INT_MAX.
[11:42:13] *** Joins: fcresende_ (fcresende@fcresende.jujube.ircnow.org)
[11:43:02] *** Quits: reductum (~reductum@2603-8000-b400-8764-dea6-32ff-fe16-a622.res6.spectrum.com) (Ping timeout: 250 seconds)
[11:44:07] *** Joins: paulo (paulo@user/paulo/x-9032687)
[11:44:48] *** Quits: voidsync (~void@user/voidsync) ()
[11:45:18] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[11:45:30] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 252 seconds)
[11:46:55] *** Quits: fcresende_ (fcresende@fcresende.jujube.ircnow.org) (Ping timeout: 250 seconds)
[11:47:49] *** Joins: inlight (~thomas@223.230.162.244)
[11:47:49] *** Quits: inlight (~thomas@223.230.162.244) (Changing host)
[11:47:49] *** Joins: inlight (~thomas@user/inlight)
[11:48:27] *** Quits: inlight (~thomas@user/inlight) (Max SendQ exceeded)
[11:49:01] *** Joins: inlight (~thomas@223.230.162.244)
[11:49:01] *** Quits: inlight (~thomas@223.230.162.244) (Changing host)
[11:49:01] *** Joins: inlight (~thomas@user/inlight)
[11:49:08] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[11:49:33] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[11:50:00] *** Joins: Rounin (~david@84.212.130.215)
[11:50:16] <Dean> hello ChoHag ! *_*
[11:50:18] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[11:50:40] *** Joins: gproto23 (~gproto23@user/gproto23)
[11:50:46] *** Joins: gnoo (gnoo@user/gnoo)
[11:50:58] *** Joins: sandman13 (sandman13@sandman13.jujube.ircnow.org)
[11:51:20] *** Joins: reductum (~reductum@cpe-72-134-86-174.natsow.res.rr.com)
[11:57:17] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[11:57:18] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[11:57:18] *** Joins: wroathe (~wroathe@user/wroathe)
[12:01:00] *** Quits: inlight (~thomas@user/inlight) (Ping timeout: 240 seconds)
[12:01:22] *** Joins: kurahaupo_ (~kurahaupo@pa49-182-2-50.pa.qld.optusnet.com.au)
[12:02:44] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[12:02:47] *** Joins: fcresende_ (fcresende@2605:6400:20:434:e11e:4d17:e9ec:e5b4)
[12:03:18] *** Joins: inlight (~thomas@223.230.162.244)
[12:03:18] *** Quits: inlight (~thomas@223.230.162.244) (Changing host)
[12:03:18] *** Joins: inlight (~thomas@user/inlight)
[12:03:57] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[12:04:00] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 272 seconds)
[12:06:46] *** Quits: reset (~reset@user/reset) (Quit: reset)
[12:08:26] *** Quits: kurahaupo_ (~kurahaupo@pa49-182-2-50.pa.qld.optusnet.com.au) (Ping timeout: 272 seconds)
[12:09:23] *** Joins: inlight_ (~thomas@157.35.15.59)
[12:12:03] *** Quits: inlight (~thomas@user/inlight) (Ping timeout: 256 seconds)
[12:13:35] *** Joins: masoudd_ (~masoudd@user/masoudd)
[12:14:31] *** Joins: Juliu_ (~Juliu@2a02:810b:c640:3ec0:a131:11ab:1111:d3c5)
[12:16:18] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:b524:42ea:a6:2b1c) (Ping timeout: 252 seconds)
[12:16:18] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 252 seconds)
[12:26:17] *** Quits: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8) (Ping timeout: 256 seconds)
[12:28:03] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[12:28:03] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[12:28:03] *** Joins: wroathe (~wroathe@user/wroathe)
[12:28:24] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:c9dd:301:29f7:88f5)
[12:30:45] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 256 seconds)
[12:33:01] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[12:35:42] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[12:36:18] <gtlsgamr> Hello. I am going through K&R and I come across this question. DISCLAIMER: I AM NOT ASKING FOR HELP FOR HOMEWORK. I just need help understanding the question. The language seems confusing to me. It would be great if someone could explain it to me. Below is the question.
[12:36:22] <gtlsgamr> Write a program to determine the ranges of char, short, int, and long variables, both signed and unsigned, by printing appropriate values from standard headers and by direct computation. Harder if you compute them: determine the ranges of the various
[12:39:00] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:41:03] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[12:41:18] <System_Error> Basically, C is quite vague on how standard defines char, int, short and long. Therefore different implemenatations could have different ranges.
[12:42:12] <System_Error> Nothing wrong if char e.g. 16 bit. Its strange but formally okay. Ofc its min/max would be different from 8-bit char more typical on most systems
[12:42:55] <System_Error> So point of excersize is to figure out usable values, by definitions or by number of bits, etc I guess
[12:43:23] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[12:46:31] *** Joins: iomari891 (~iomari891@105.112.138.38)
[12:48:09] *** Joins: ik (uid540109@id-540109.uxbridge.irccloud.com)
[12:48:42] <dave0> gtlsgamr: check out   limits.h
[12:50:22] <dave0> i can't think of a valid way to compute the signed types
[12:50:47] *** Joins: inlight (~thomas@157.35.15.59)
[12:50:47] *** Quits: inlight (~thomas@157.35.15.59) (Changing host)
[12:50:47] *** Joins: inlight (~thomas@user/inlight)
[12:51:23] <dave0> unsigned is okay, you can try the powers of 2, or use bit mask tricks
[12:51:47] *** Joins: immibis (~hexchat@dynamic-089-204-138-014.89.204.138.pool.telefonica.de)
[12:52:10] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:53:00] *** Quits: immibis_ (~hexchat@62.156.144.218) (Ping timeout: 240 seconds)
[12:53:59] *** Quits: inlight_ (~thomas@157.35.15.59) (Ping timeout: 256 seconds)
[12:54:44] <ChoHag> You could stuff them with various combations of bits and then see what they mean.
[12:56:17] <ChoHag> Find the width and determine the negation mechanism.
[12:58:50] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[12:58:50] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[12:58:50] *** Joins: wroathe (~wroathe@user/wroathe)
[12:59:01] *** Quits: NEYi_ (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[12:59:26] *** Joins: NEYi_ (~NEYi@109.251.216.38)
[13:02:13] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[13:03:24] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[13:05:36] *** Joins: pulse (~pulse@user/pulse)
[13:06:12] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 240 seconds)
[13:07:35] *** Quits: the_lanetly_052 (~the_lanet@194.135.154.108) (Ping timeout: 256 seconds)
[13:07:59] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[13:08:14] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[13:08:50] <dave0> hmm yeah you could put -1 in an int and see what bit pattern it is
[13:09:53] *** Joins: kts (~kts@103.73.237.130)
[13:10:38] *** Joins: Burgundy (~NA@86.121.143.206)
[13:12:14] *** Quits: kts (~kts@103.73.237.130) (Client Quit)
[13:13:33] *** Quits: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net) (Remote host closed the connection)
[13:13:49] *** Joins: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net)
[13:14:29] *** Joins: cherrry9 (~jan@aein251.neoplus.adsl.tpnet.pl)
[13:15:31] *** Quits: hinata (~hinata@2409:4042:2ea3:e72b:1568:71d5:62f2:d350) (Quit: Leaving)
[13:19:33] *** Quits: mountaingoat (~mountaing@user/mountaingoat) (Ping timeout: 252 seconds)
[13:19:58] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[13:20:01] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:22:55] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[13:25:03] *** Quits: cherrry9 (~jan@aein251.neoplus.adsl.tpnet.pl) (Ping timeout: 252 seconds)
[13:26:05] *** Joins: lleo (~lleo@31-161-230-230.mobile.kpn.net)
[13:26:17] *** Joins: inlight_ (~thomas@157.35.15.59)
[13:28:13] *** Joins: vysn (~vysn@user/vysn)
[13:29:11] *** Quits: inlight (~thomas@user/inlight) (Ping timeout: 250 seconds)
[13:29:39] *** Joins: bebyx (~Thunderbi@user/bebyx)
[13:31:57] *** Joins: mountaingoat (~mountaing@user/mountaingoat)
[13:33:24] *** Joins: wyfnt (~wyfnt1232@103.214.137.74)
[13:36:06] *** Joins: cherrry9 (~jan@aein251.neoplus.adsl.tpnet.pl)
[13:41:03] *** Joins: inlight (~thomas@157.35.15.59)
[13:41:04] *** Quits: inlight (~thomas@157.35.15.59) (Changing host)
[13:41:04] *** Joins: inlight (~thomas@user/inlight)
[13:41:24] *** Quits: inlight_ (~thomas@157.35.15.59) (Ping timeout: 240 seconds)
[13:42:10] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 272 seconds)
[13:44:04] *** Quits: ncrowl (~ncrowl@31-208-206-123.cust.bredband2.com) (Ping timeout: 272 seconds)
[13:45:15] *** Joins: ncrowl (~ncrowl@31-208-58-135.cust.bredband2.com)
[13:47:52] *** Quits: cherrry9 (~jan@aein251.neoplus.adsl.tpnet.pl) (Ping timeout: 272 seconds)
[13:50:24] *** Quits: inlight (~thomas@user/inlight) (Ping timeout: 272 seconds)
[13:51:54] *** Joins: inlight (~thomas@157.35.71.180)
[13:51:54] *** Quits: inlight (~thomas@157.35.71.180) (Changing host)
[13:51:54] *** Joins: inlight (~thomas@user/inlight)
[13:52:04] *** Joins: angelacrust (~angelacru@182.68.130.113)
[13:54:31] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:55:22] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[13:57:00] *** Quits: foul_owl (~kerry@23.105.36.232) (Ping timeout: 240 seconds)
[14:02:27] *** Quits: alch (~alch@151.34.182.5) (Ping timeout: 252 seconds)
[14:03:21] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:03:33] *** Quits: inlight (~thomas@user/inlight) (Ping timeout: 252 seconds)
[14:04:20] *** Joins: alch (~alch@pa-18-162-41.service.infuturo.it)
[14:05:12] *** Joins: inlight (~thomas@user/inlight)
[14:07:19] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Remote host closed the connection)
[14:07:41] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[14:08:46] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 272 seconds)
[14:10:11] *** Joins: Darkcoal (~user@user/Darkcoal)
[14:13:53] *** Joins: foul_owl (~kerry@23.82.193.104)
[14:14:21] *** Joins: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com)
[14:15:13] *** Joins: Earnestly (~earnest@user/earnestly)
[14:17:00] *** Quits: mountaingoat (~mountaing@user/mountaingoat) (Ping timeout: 240 seconds)
[14:18:09] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 250 seconds)
[14:18:10] *** Joins: cruncher (~cruncher@90.68.118.49)
[14:19:21] *** Joins: seninha (~seninha@user/seninha)
[14:19:35] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[14:20:52] *** Joins: merrinx (~merrinx@ti0028a400-1685.bb.online.no)
[14:28:18] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 252 seconds)
[14:29:17] *** Quits: Juliu_ (~Juliu@2a02:810b:c640:3ec0:a131:11ab:1111:d3c5) (Quit: Quit)
[14:30:34] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[14:30:45] *** Joins: mountaingoat (~mountaing@user/mountaingoat)
[14:31:06] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[14:32:02] *** Joins: hinata (~hinata@2409:4042:2ea3:e72b:1568:71d5:62f2:d350)
[14:32:22] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::ef3c)
[14:33:08] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[14:34:35] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[14:34:44] *** Quits: joedoe47_ (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 272 seconds)
[14:35:22] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 272 seconds)
[14:36:41] *** Joins: \o\ (~i.am@187.112.46.243)
[14:37:55] *** Joins: Guest2933 (~Guest29@cpe-45-51-40-58.socal.res.rr.com)
[14:37:59] *** \o\ is now known as heineken
[14:38:00] *** Quits: heineken (~i.am@187.112.46.243) (Changing host)
[14:38:00] *** Joins: heineken (~i.am@user/heineken)
[14:39:40] *** Quits: Guest2933 (~Guest29@cpe-45-51-40-58.socal.res.rr.com) (Quit: Client closed)
[14:40:11] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[14:46:08] *** Quits: lleo (~lleo@31-161-230-230.mobile.kpn.net) (Ping timeout: 272 seconds)
[14:46:43] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[14:47:27] *** Joins: shivesh (~shivesh@user/shivesh)
[14:49:24] *** masoudd_ is now known as masoudd
[14:51:24] *** Quits: abraxis (~abraxis@user/abraxis) (Ping timeout: 240 seconds)
[14:52:28] *** Quits: Jong (~Jong@163.114.132.5) (Ping timeout: 272 seconds)
[14:56:02] *** Quits: immibis (~hexchat@dynamic-089-204-138-014.89.204.138.pool.telefonica.de) (Remote host closed the connection)
[14:56:20] *** Joins: immibis (~hexchat@dynamic-089-204-138-014.89.204.138.pool.telefonica.de)
[14:58:52] *** Joins: abraxis (~abraxis@66-175-215-36.ip.linodeusercontent.com)
[15:00:12] *** Quits: inlight (~thomas@user/inlight) (Ping timeout: 240 seconds)
[15:01:48] <masoudd> ,cc char c = -1;
[15:01:50] <candide> masoudd: no output: c = -1 '\377'
[15:05:28] *** Joins: timmoctig (~timmoctig@31.187.110.131)
[15:06:38] *** Joins: zipace (~john@p200300ecef1357019c1732f26023c5e6.dip0.t-ipconnect.de)
[15:06:45] *** Joins: constxd_ (~brad@142.134.79.191)
[15:09:40] *** Quits: timmoctig (~timmoctig@31.187.110.131) (Client Quit)
[15:10:51] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[15:11:17] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[15:14:38] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 272 seconds)
[15:15:49] *** Joins: timmoctig (~timmoctig@31.187.110.131)
[15:16:46] *** Joins: libc (~archer@user/tessio)
[15:16:48] <libc> hi
[15:17:01] <libc> i have been told yesterday that the terminal is buffering until i press \n
[15:17:04] <libc> ie Enter
[15:17:21] <libc> so how does the program know about that Enter ?
[15:17:28] <supakeen> depending on the mode your terminal emulator is in that might happen yes
[15:17:41] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[15:18:11] <libc> we said that '\b' is captured by the console driver and is never get to the program
[15:18:13] <dave0> libc: that is it's default state
[15:18:19] <supakeen> and the terminal can of course still send the enter as well it just 'sends' the entire line including the enter
[15:18:44] <dave0> libc: you can set it to character-at-a-time mode which sends characters as soon as you press the key
[15:18:50] <libc> dave0: what about '\n' ? if the terminal is acting upon it how does my program know about it ?
[15:18:52] <dave0> libc: check   /bin/stty   and   termios
[15:19:20] *** Quits: timmoctig (~timmoctig@31.187.110.131) (Client Quit)
[15:19:44] <supakeen> the terms (hah) you are looking for is 'cooked mode' and 'raw mode' and/or 'line disciple' those are what determine how your terminal is interpreting things
[15:19:45] <dave0> libc: pressing enter is special to the terminal... when you press enter it sends along the line with a trailing '\n'
[15:20:38] <dave0> i'm not familiar with how terminals work in the kernel, i just use the user interface.. termios
[15:20:46] <libc> so it's one for the program and another one for the terminal to actually go down ?
[15:20:57] <zipace> i'm trying to untangle a dot initializer list (old compiler doesn't understand it), and i'm stumped. i think it self-references, but i don't really know: https://bpa.st/YX3Q
[15:21:13] <Beastie> libc the program knows about the enter (which is not \n, but \r) because the tty converts it into a \n and sends it to the terminal.
[15:21:45] <zipace> i feel i'm pretty close to figuring it out, but somehow it just doesn't quite work. maybe i'm missing something?
[15:22:25] <Beastie> the terminal, on output, converts every \n into a sequence of \r\n, and on input, it converts any \r into a \n
[15:22:39] <ChoHag> That very much depends.
[15:23:06] <dave0> zipace: yeah line 30 should be   root = r;
[15:23:10] <dave0> zipace: what is tmp2 ?
[15:23:16] <Beastie> libc: please elaborate what you mean with "go down"?
[15:23:23] <dave0> zipace: show the declaration of tmp2
[15:23:38] <libc> Beastie: go down one line
[15:23:57] <zipace> dave0: tmp[n] are just stack-allocated RegexNode instance, i.e., "RegexNode tmp2;"
[15:24:22] <dave0> zipace: okay that looks alright
[15:24:39] <dave0> zipace: it's used a compound literal in another compound literal
[15:24:44] <Beastie> go down one line is normally an escape sequence (but it is also implemented as such by a simple \n) but as I told you above, \n on output is converted into \r\n (which will put the cursor in the beginning of the next line)
[15:24:50] <zipace> dave0: i can't believe i missed that. it works now!
[15:25:34] <libc> so there is one enter that is sent along with the rest of the buffer and one just after it for the terminal screen ?
[15:25:36] <masoudd> zipace, if r is a pointer, shouldn't your last line be root = r; instead of root = &r which is root = &&tmp2;
[15:25:42] <dave0> zipace: RegexNode tmp3 = { 0 }; tmp3.type = REGEX_NODE_TYPE_ANY_CHARACTER; r->quatified = &tmp3;
[15:26:11] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[15:26:17] <zipace> masoudd, yup, indeed that was the problem
[15:26:27] <Beastie> nope.... the terminal normally is configured (but can be configured in many terminals otherwise) to send a single \r on pressing the return key.
[15:26:45] <masoudd> I think I just graduated to a 2 start programmer
[15:26:47] *** Quits: angelacrust (~angelacru@182.68.130.113) (Quit: Client closed)
[15:26:50] <masoudd> 2 star*
[15:26:57] <libc> dave0: ok i check stty
[15:26:58] <dave0> zipace: also do   RegexNode tmp2 = { 0 };   if you initialize any part of the struct, the rest of the struct is zero'ed
[15:27:00] <ChoHag> That's 4 stars.
[15:27:06] *** Joins: strajder (~strajder@user/strajder)
[15:27:07] <ChoHag> Back to one you go.
[15:27:16] <masoudd> nooo :(
[15:27:23] <zipace> dave0, good point
[15:27:24] <Beastie> on terminals that send the sequence \r\n normally the tty driver ignores the \n and converts the \r into a \n
[15:27:29] <dave0> zipace: oops you already do it
[15:27:36] <zipace> yeah
[15:27:46] <dave0> zipace: never mind, i missed that you had already made more structs
[15:27:48] <Beastie> that is normally the default configuration.... but you can change it.
[15:28:10] <libc> but i think it's useless ... as im talking about an X11 terminal emulator
[15:28:13] <dave0> zipace: the original compound literal is pretty nasty ;-)
[15:28:16] <libc> stty is for the console
[15:28:21] <libc> ie no X11
[15:28:31] <zipace> dave0, it's cool. previously i attempted to re-use the same var, which is obviously a Very Bad Idea[tm]
[15:28:35] <dave0> libc: xterm emulates a terminal.. xterm responds to stty
[15:29:21] <dave0> libc: you can even bring it from a serial device, or the network (eg. telnet)
[15:30:11] *** Quits: wovixo (~wovixo@144.92.194.67) (Read error: Connection reset by peer)
[15:30:11] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[15:30:13] <libc> ok
[15:30:14] <dave0> libc: stty is very low-level ...  but sometimes you need it
[15:30:17] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[15:30:23] <libc> it's for the console
[15:30:36] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[15:31:04] *** Joins: csrf (~csrf@user/csrf)
[15:33:45] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 252 seconds)
[15:33:59] *** Joins: seninha (~seninha@user/seninha)
[15:34:49] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[15:34:55] *** Quits: jusski (~user@78-63-85-123.static.zebra.lt) (Ping timeout: 256 seconds)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:37:47] <libc> dave0: what about setvbuf ?
[15:38:32] <libc> it's starting to sound more or more like C defaults rather than terinal
[15:38:33] <dave0> libc: nope never use that
[15:38:41] <libc> https://stackoverflow.com/questions/1716296/why-does-printf-not-flush-after-the-call-unless-a-newline-is-in-the-format-strin
[15:38:51] <dave0> i've never seen a legitimate use of setvbuf
[15:39:51] <dave0> oh you can set it to unbuffered with setvbuf .. sounds like it's one use
[15:40:08] <dave0> but the better way is use stderr .. stderr is usually unbuffered
[15:40:28] *** Joins: cart_ (~cart@host-78-144-125-214.as13285.net)
[15:40:56] <libc> ok ill explore it
[15:41:00] *** Quits: constxd_ (~brad@142.134.79.191) (Ping timeout: 240 seconds)
[15:41:03] <dave0> but all i've seen it is misused to set the terminal to character-at-a-time mode and then people come here and ask why it doesn't work
[15:41:20] <libc> i found all that buffer topic really hard to grasp ... especially with the combination of terminals
[15:42:32] <dave0> it's in the realm of posix
[15:43:08] <dave0> c doesn't know about terminals or sockets
[15:44:01] <dave0> it seems to come from the observation that reading something 1 character at a time is slower than reading 1000 characters and dealing them out 1 char at a time by something simple like running a pointer over it
[15:44:40] <fizzie> Well, it knows of them this much: C11 7.21.3p7: "As initially opened, the standard error stream is not fully buffered; the standard input and standard output streams are fully buffered if and only if the stream can be determined not to refer to an interactive device." ;)
[15:44:41] <dave0> files work like that.. you can read a chunk of a file and everyone's happy
[15:45:23] <System_Error> dave0> i can't think of a valid way to compute the signed types <- 1 bit for sign, rest for number? (not guaranteed to work I guess but most implementations seems to stick to this idea)
[15:45:29] <dave0> but terminals don't play that nicely, especially when a human is typing and thinking and making mistakes that you have to backup to fix
[15:46:14] <ChoHag> Note fully buffered != line buffered.
[15:46:31] <dave0> System_Error: yeah you could figure out whether signed numbers are 2's complement, 1's complement, or signed magnitude, by examining the bits of minus 1
[15:47:07] <dave0> System_Error: but finding there size is another matter, because if the number is too big to fit in an int, it doesn't tell you, you just end up with undefined behavoiur
[15:47:15] *** Joins: X-Scale` (~ARM@66.26.54.77.rev.vodafone.pt)
[15:47:41] <dave0> and you can't just set it to all-bits-1 with memset and count the bits, because there might be trap representations
[15:48:46] <fizzie> I don't think you can even distinguish between the three representations just by examining -1, since there can be arbitrarily many padding bits, and they can be set using any arbitrary scheme.
[15:49:00] *** Quits: X-Scale (~ARM@92.250.97.81) (Ping timeout: 240 seconds)
[15:49:01] *** X-Scale` is now known as X-Scale
[15:49:22] <System_Error> 1) IIRC there're things like CHAR_BITS, etc? 2) UB or not, one can try to catch "anomaly" on certain points matching # of bits and get idea. It wouldn't monotonously change because it no longer can, right?
[15:49:39] *** Quits: hinata (~hinata@2409:4042:2ea3:e72b:1568:71d5:62f2:d350) (Quit: Leaving)
[15:49:58] <fizzie> You could have a system where -1 is represented by a thing that has exactly the bits you'd expect from two's-complement, ones'-complement and sign-and-magnitude representation, except two of those three are actually padding bits.
[15:49:59] <libc> fizzie: i have a feeling you know something you are not saying :)
[15:50:06] *** Quits: arinov_ (~arinov@213.194.126.155) (Ping timeout: 272 seconds)
[15:50:13] <dave0> System_Error: the original question was a 2-parter ... use limits.h to find the sizes of things (yes, using CHAR_BITS if you want)
[15:50:46] <dave0> System_Error: the 2nd part of the question was trying to determine those things empirically
[15:51:08] <libc> maybe im too demanding ?
[15:51:13] <dave0> it's easy enough with unsigned.. just double and add 1 until the value doesn't change
[15:51:16] <System_Error> Um, yea. And guess 2nd can be more or less solved by some bit magic.
[15:51:33] <libc> or maybe i asking questions which i still not qualified to hear the answers for ?
[15:52:49] <System_Error> libc: guess point of buffering is to increase performance. New line is logical unit to spit something to screen, finally.
[15:53:48] <System_Error> sometimes this buffering can be annoying and one have to call e.g. fflush manually, I think I had to do it to draw some progress that otherwise swallowed by buffering and updates in really jumpy manner
[15:54:03] <libc> i think there are buffers in the terminal and in the program .. so even though i use fprintf(stderr, ...) it doesn't matter because the terminal is buffering and he's taking precedence
[15:54:37] <libc> it's an interesting topic ...
[15:55:36] <libc> dave0: what is the "default bufferign policy" as far as you know regarding input from a file ?
[15:55:58] *** Joins: bliminse (~bliminse@host86-158-241-239.range86-158.btcentralplus.com)
[15:56:08] <libc> i guess it's the same but rather '\n' it's EOF ?
[15:56:18] <libc> s/rather/instead of
[15:56:28] <ChoHag> libc: Qualifications are overrated.
[15:56:37] <dave0> libc: files have a size, you can use that
[15:57:18] <dave0> libc: fizzie quoted the standard about the different buffering used for files and non-files
[15:57:27] <System_Error> libc: there can be buffers in e.g. libc (standard lib) to reduce amount of syscalls, optimize performance and so on. Frequent small operations aren't efficient.
[15:57:36] <dave0> libc: it comes from unix treating everything as a file
[15:57:49] <dave0> or rather a stream of bytes
[15:58:07] <ChoHag> dave0: Not files/non-files. Interactive or not.
[15:58:26] <dave0> ChoHag: ah okay thanks
[15:59:03] <dave0> plan 9 took it further and turned even graphics into a file ;-)
[15:59:20] <ChoHag> If you do cat|thing you will see how thing responds when its input isn't an interactive device.
[15:59:59] *** Quits: Darkcoal (~user@user/Darkcoal) (Read error: Connection reset by peer)
[16:00:52] <System_Error> dave0> libc: files have a size, you can use that <- not to be taken for granted, even "normal" file can be grown or truncated while we're reading it.
[16:01:30] <ChoHag> Files in /proc may have size 0 on linux.
[16:02:25] <ChoHag> Actually it seems they all do except kcore and one (but not all...) of the symlinks.
[16:03:27] *** Joins: jusski (~user@78-63-85-123.static.zebra.lt)
[16:03:34] <ChoHag> Two. There's an 8 hiding in a sea of 0s. What a mess.
[16:04:02] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 272 seconds)
[16:04:26] *** Joins: cherrry9 (~jan@aein251.neoplus.adsl.tpnet.pl)
[16:05:06] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 252 seconds)
[16:05:32] *** Joins: Darkcoal (~user@user/Darkcoal)
[16:07:15] <libc> thanks for the help everyone
[16:11:48] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 240 seconds)
[16:11:54] *** Joins: unlink2 (~unlink@p200300ebcf12830011a7c6fae7585651.dip0.t-ipconnect.de)
[16:12:01] *** Quits: unlink2 (~unlink@p200300ebcf12830011a7c6fae7585651.dip0.t-ipconnect.de) (Remote host closed the connection)
[16:12:19] *** Joins: unlink2 (~unlink@p200300ebcf12830011a7c6fae7585651.dip0.t-ipconnect.de)
[16:13:32] *** Quits: Dean (~Dean@user/De4n-Whit3/x-9385125) (Ping timeout: 272 seconds)
[16:13:53] *** Joins: Darkcoal (~user@user/Darkcoal)
[16:14:11] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[16:15:17] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[16:19:14] *** Quits: libc (~archer@user/tessio) (Ping timeout: 272 seconds)
[16:19:44] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:70e2:3b3a:164f:69ec)
[16:19:48] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[16:20:45] *** Joins: adip (~adip@apn-37-248-215-230.dynamic.gprs.plus.pl)
[16:22:14] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[16:22:17] <System_Error> Linux got some graphic related devices too. E.g. /dev/fb0 is framebuffer. There're more funny things, like e.g. /sys/class/leds/input4::numlock - yes, kbd led if a file, too. Can be blinked like this.
[16:22:43] *** Quits: cruncher (~cruncher@90.68.118.49) (Quit: Leaving)
[16:23:28] *** Joins: figrita (~figrita@2603-7080-9801-332f-5813-eeaf-976d-830a.res6.spectrum.com)
[16:25:52] *** Joins: adip_ (~adip@apn-37-248-215-230.dynamic.gprs.plus.pl)
[16:30:58] *** Joins: serbest (~ike@user/serbest)
[16:31:26] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[16:34:07] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[16:37:49] *** Joins: timmoctig (~timmoctig@31.187.110.131)
[16:37:49] *** Quits: adip (~adip@apn-37-248-215-230.dynamic.gprs.plus.pl) (Read error: Connection reset by peer)
[16:37:49] *** Quits: adip_ (~adip@apn-37-248-215-230.dynamic.gprs.plus.pl) (Read error: Connection reset by peer)
[16:38:12] *** Quits: timmoctig (~timmoctig@31.187.110.131) (Client Quit)
[16:38:57] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[16:43:15] *** Joins: adip (~adip@apn-37-248-215-230.dynamic.gprs.plus.pl)
[16:43:19] *** Joins: Dean (~Dean@165-73-119-36.ip.afrihost.capetown)
[16:43:23] *** Joins: adip_ (~adip@apn-37-248-215-230.dynamic.gprs.plus.pl)
[16:46:01] *** Joins: diamondbond (~diamondbo@175.157.50.34)
[16:49:29] *** Quits: diamondbond (~diamondbo@175.157.50.34) (Client Quit)
[16:49:39] *** Joins: acerbic (~acerbic@cs-xdata-50-86-49-71.cspire.com)
[16:51:59] *** Joins: seninha_ (~seninha@user/seninha)
[16:52:08] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[16:52:11] *** Quits: seninha_ (~seninha@user/seninha) (Remote host closed the connection)
[16:54:49] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 256 seconds)
[16:57:14] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a131:11ab:1111:d3c5)
[16:57:14] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 272 seconds)
[16:57:54] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 252 seconds)
[16:59:29] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a131:11ab:1111:d3c5) (Client Quit)
[16:59:35] *** Joins: to_gl (~to_gl@193.164.24.245)
[16:59:38] *** Parts: to_gl (~to_gl@193.164.24.245) ()
[17:01:13] *** Joins: pulse (~pulse@user/pulse)
[17:02:28] *** Joins: libc (~archer@user/tessio)
[17:06:29] *** Quits: acerbic (~acerbic@cs-xdata-50-86-49-71.cspire.com) (Read error: Connection reset by peer)
[17:07:33] *** Quits: adip_ (~adip@apn-37-248-215-230.dynamic.gprs.plus.pl) (Read error: Connection reset by peer)
[17:07:33] *** Quits: adip (~adip@apn-37-248-215-230.dynamic.gprs.plus.pl) (Read error: Connection reset by peer)
[17:08:00] *** Quits: libc (~archer@user/tessio) (Ping timeout: 272 seconds)
[17:08:39] *** Joins: libc (~archer@user/tessio)
[17:11:41] <libc> what key is ^\ >
[17:11:42] <libc> ?
[17:12:37] *** Quits: nuxil (~nuxil@141.195.51.213) (Read error: Connection reset by peer)
[17:12:53] *** Joins: nuxil (~nuxil@141.195.51.213)
[17:12:53] *** Joins: adip (~adip@apn-37-248-215-230.dynamic.gprs.plus.pl)
[17:13:07] *** Joins: adip_ (~adip@apn-37-248-215-230.dynamic.gprs.plus.pl)
[17:13:34] *** Joins: inlight (~thomas@82.221.128.46)
[17:13:34] *** Quits: inlight (~thomas@82.221.128.46) (Changing host)
[17:13:34] *** Joins: inlight (~thomas@user/inlight)
[17:14:36] *** Quits: libc (~archer@user/tessio) (Remote host closed the connection)
[17:15:04] *** Joins: libc (~archer@user/tessio)
[17:16:06] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[17:21:11] *** Quits: adip_ (~adip@apn-37-248-215-230.dynamic.gprs.plus.pl) (Read error: Connection reset by peer)
[17:21:11] *** Quits: adip (~adip@apn-37-248-215-230.dynamic.gprs.plus.pl) (Read error: Connection reset by peer)
[17:22:21] <libc> just updating ..
[17:22:28] <libc> i found stdbuf
[17:22:43] <libc> stdbuf -i 0 -o 0 <my_terminal>
[17:23:35] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[17:23:42] <libc> dave0: it doesn't look promising
[17:24:00] <clarity> What are you actually trying to do
[17:24:03] <libc> but i tested with '\b'
[17:24:31] <libc> i try to test what buffering really means
[17:24:34] *** Joins: constxd (~brad@142.134.79.191)
[17:24:40] <libc> so i disabled it
[17:24:46] <libc> according to stdbuf .. at least
[17:26:03] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:9907:fd57:1e89:a529)
[17:26:03] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:9907:fd57:1e89:a529) (Changing host)
[17:26:03] *** Joins: skapata (~Skapata@user/skapata)
[17:26:30] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 252 seconds)
[17:27:31] *** Joins: Common-Lisp (~common_li@12.2.190.242)
[17:27:52] <libc> according to what i learned here ... i expected to see the characters even after a backspace
[17:27:58] <libc> http://ix.io/3PKZ
[17:28:33] *** Joins: sebag (~guest@91.245.82.2)
[17:28:36] *** Quits: sebag (~guest@91.245.82.2) (Client Quit)
[17:28:42] <clarity> stdio buffering has nothing to do with that
[17:28:56] <libc> there is no buffering ...
[17:29:11] <libc> i run the terminal i used to run the command with stdbuf -i 0 -o 0
[17:29:17] <libc> to run the program
[17:29:29] <libc> at least that is the idea
[17:29:40] <libc> i have hard time to let go of this ..
[17:29:55] *** Joins: sebag (~guest@91.245.82.2)
[17:30:03] <clarity> .. of what?
[17:30:08] *** Joins: kenanmarasli_ (~kenanmara@user/kenanmarasli)
[17:30:10] <libc> of what is going on
[17:31:53] <libc> can we now rule out terminal buffering at least ?
[17:32:42] <clarity> What have you done about terminal buffering?
[17:33:20] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[17:33:24] *** Joins: soapsudsxx (~soapsudsx@141.193.188.140)
[17:33:39] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Ping timeout: 252 seconds)
[17:33:44] *** kenanmarasli_ is now known as kenanmarasli
[17:34:06] *** Joins: Atque (~Atque@user/atque)
[17:34:58] *** Joins: aehu6ce8 (~aehu6ce8@31.187.110.131)
[17:35:58] *** Azem is now known as Emet-Selch
[17:37:36] *** Joins: arinov_ (~arinov@213.194.126.155)
[17:38:26] *** Joins: fe23 (~fe23@2409:8a34:46c:f80:7dad:7d0f:a231:4198)
[17:41:44] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: see you later)
[17:42:16] *** Joins: wroathe (~wroathe@user/wroathe)
[17:44:45] *** Quits: cyphics (~cyphix@user/cyphics) (Ping timeout: 256 seconds)
[17:45:03] <fizzie> `stdbuf` is just a terrible LD_PRELOAD hack to adjust an uncooperative program's C stdio buffers for the std{in,out,err} streams. Applying it to a terminal (emulator) almost certainly has no useful effect. And applying it to a program you've written yourself is usually pointless since you could just put matching setvbuf calls directly in the program.
[17:45:32] <clarity> Yea, stdio buffering has nothing to do with terminal or tty buffering
[17:45:45] *** Joins: Everything (~Everythin@37.115.210.35)
[17:45:46] *** Joins: voidsync (~void@user/voidsync)
[17:45:58] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[17:46:28] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:46:51] *** Quits: geeknix (~pi@2001:e68:5432:a291:c354:1aa:688f:1ab0) (Ping timeout: 252 seconds)
[17:47:01] <clarity> The only real use case I've found for stdbuf is when I want to pipe live logs to another program that manipulates the lines (e.g. by adding timestamps) and I want lines printed out immediately
[17:47:01] <dave0> libc: try     stty -icanon ; cat
[17:47:24] *** Quits: soapsudsxx (~soapsudsx@141.193.188.140) (Remote host closed the connection)
[17:47:29] *** Parts: shugo_ (~shugo@user/shugo) ()
[17:47:51] <dave0> libc: with icanon it will wait until you have typed a full line and pressed enter before cat prints anything ...
[17:48:17] <dave0> libc: but with   -icanon   you will get characters printed as you type (they come out double)
[17:48:28] <dave0> ctrl-c still works so you can break out of cat
[17:49:35] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[17:49:37] *** Quits: wingsorc (~wingsorc@user/wingsorc) (Ping timeout: 250 seconds)
[17:49:45] <dave0> it has nothing to do with stdio buffering ... you could write your own program that runs getchar and putchar in a loop to do the same as cat
[17:49:56] <libc> dave0: i read stty man page ... it's just ignorign special characters, where it is stated something about buffering ?
[17:50:02] <libc> but yeah you right ... it's doubles
[17:50:22] <clarity> Don't read stty man page
[17:50:23] <clarity> read termios
[17:50:58] <ChoHag> You're inflicting ... well I guess he's inflicting it on himself.
[17:52:02] <dave0> libc: https://termbin.com/5zyyc
[17:52:33] <clarity> cfmakeraw()
[17:52:40] *** Parts: Common-Lisp (~common_li@12.2.190.242) ()
[17:52:47] <dave0> libc: a very simple example of using termios to recieve keys as you press them, rather than wait for enter
[17:53:20] *** Joins: acerbic (~acerbic@cs-xdata-50-86-49-156.cspire.com)
[17:53:30] *** Joins: the_lanetly_052 (~the_lanet@194.135.154.108)
[17:55:11] *** Parts: Everything (~Everythin@37.115.210.35) ()
[17:55:24] *** Quits: cherrry9 (~jan@aein251.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[17:56:35] *** Joins: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net)
[17:56:38] <libc> dave0: ok now we are writing software that returns them immediately ( no buffering ) where all the talk about the blame of the terminal is in the picture
[17:57:49] <libc> in other words ... how does a program within a terminal can have unbuffered effect where ( as you guys said ) the terminal itself which the program runs within DO have
[17:57:50] <libc> ?
[17:59:05] *** Quits: ncrowl (~ncrowl@31-208-58-135.cust.bredband2.com) (Quit: leaving)
[17:59:13] *** Joins: geeknix (~pi@2001:e68:5432:a291:c354:1aa:688f:1ab0)
[17:59:22] *** Joins: ncrowl (~ncrowl@31-208-58-135.cust.bredband2.com)
[17:59:31] <jrm> I see code that may or may not cast the argument to malloc.  For example, malloc( (size_t)num*sizeof(**a)); and malloc(num*sizeof(**a));.  /Should/ the cast be done?
[17:59:56] *** Quits: inlight (~thomas@user/inlight) (Ping timeout: 272 seconds)
[18:00:12] <cuppajoe> I am writing a program where I need to write data to a file and then read it in a another function right after. When I invoke fwrite(), the program continues to the next statements, but when I check the file, it is not written yet. Does fwrite not have to complete in order to continue with the program?
[18:00:18] <ChoHag> It tells the terminal to stop buffering like dave0's example does.
[18:01:40] <jrm> I guess the casting is done b/c the sizeof operator does not always return a type of size_t and then multiplying it by something may also change the type?
[18:01:41] *** Quits: alch (~alch@pa-18-162-41.service.infuturo.it) (Ping timeout: 256 seconds)
[18:02:14] <dave0> cuppajoe: add   fflush(file);   after fwrite
[18:02:58] <dave0> jrm: you don't need a cast because it's converting a void* to another pointer type ... it's not technically wrong, but people here will make the robot quote ,mallocidiom
[18:03:38] *** Joins: alch (~alch@151.82.144.51)
[18:03:49] <libc> dave0: ok ill dive deeper into termios, as st ( the terminal i use ) also have this in it's source code.
[18:03:51] <libc> thank you
[18:03:51] <cuppajoe> oh, i think its because i forgot to fclose()
[18:04:04] <dave0> ,dontcastmalloc
[18:04:04] <candide> There is no need to cast the result of library functions that return void *; it makes your code hard to read, adds no value, and can hide a bug if you don't have a valid prototype in scope. See http://c-faq.com/malloc/mallocnocast.html
[18:04:10] <dave0> that one
[18:04:31] <jrm> Thanks dave0
[18:04:41] <dave0> no worries
[18:05:14] *** Joins: brad_mssw|mac (~bhouse@2601:344:4100:b490:70e2:3b3a:164f:69ec)
[18:05:30] *** Joins: Fl0pFl1p (~FlipFlop@user/fl1pfl0p)
[18:05:30] *** Joins: wovixo (~wovixo@128.104.205.49)
[18:05:50] *** Joins: zmt01 (~zmt00@user/zmt00)
[18:05:58] <clarity> jrm: sizeof always gives size_t
[18:06:04] <jrm> dave0: Although, that's addressing casting the return value.  I'm wondering about casting the argument.
[18:06:09] <jrm> clarity: Ah, thanks.
[18:06:49] *** Quits: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net) (Quit: WeeChat 3.4)
[18:06:56] <dave0> oh sorry i missed that
[18:07:00] *** Quits: paulo (paulo@user/paulo/x-9032687) (Ping timeout: 240 seconds)
[18:07:14] <clarity> jrm: I don't see any reason for a cast like the one in your example
[18:07:37] *** Quits: wovixo (~wovixo@128.104.205.49) (Read error: Connection reset by peer)
[18:07:48] *** Quits: aradesh (~aradesh@user/aradesh) (Ping timeout: 240 seconds)
[18:07:48] *** Quits: asdflkj_sh (asdflkj@2605:6400:10:fe:bebd:57ba:41a5:636d) (Ping timeout: 240 seconds)
[18:08:05] *** Joins: ironman_ (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[18:08:09] *** Quits: ironman_ (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Remote host closed the connection)
[18:08:12] *** Quits: fe23 (~fe23@2409:8a34:46c:f80:7dad:7d0f:a231:4198) (Ping timeout: 240 seconds)
[18:08:12] *** Quits: brad_mssw (~bhouse@2601:344:4100:b490:70e2:3b3a:164f:69ec) (Ping timeout: 240 seconds)
[18:08:12] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 240 seconds)
[18:08:12] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Ping timeout: 240 seconds)
[18:08:12] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-3d94-4d23-dc7c-c228.res6.spectrum.com) (Ping timeout: 240 seconds)
[18:08:12] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 240 seconds)
[18:08:12] *** Quits: Fl1pFl0p (~FlipFlop@user/fl1pfl0p) (Ping timeout: 240 seconds)
[18:08:12] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[18:08:12] *** Quits: magic_ninja (~sparkie1@2600:1700:3ab0:e9f0:2a65:85ea:282b:a802) (Ping timeout: 240 seconds)
[18:08:36] *** Quits: geeknix (~pi@2001:e68:5432:a291:c354:1aa:688f:1ab0) (Ping timeout: 240 seconds)
[18:08:36] *** Quits: figrita (~figrita@2603-7080-9801-332f-5813-eeaf-976d-830a.res6.spectrum.com) (Ping timeout: 240 seconds)
[18:08:36] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[18:08:44] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[18:09:20] <jrm> clarity: So multiplying the result of sizeof() by, say an int, still results in a size_t?
[18:09:25] *** Joins: fe23 (~fe23@2409:8a34:46c:f80:7dad:7d0f:a231:4198)
[18:10:24] *** Joins: asdflkj_sh (asdflkj@bsdforall.org)
[18:10:26] *** Joins: aradesh (~aradesh@user/aradesh)
[18:10:32] *** Joins: wovixo (~wovixo@128.104.205.49)
[18:10:36] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[18:11:15] *** Joins: figrita (~figrita@2603-7080-9801-332f-5813-eeaf-976d-830a.res6.spectrum.com)
[18:12:46] <clarity> jrm: I think you could construct an absurd scenario where that isn't true but it's irrelevant imo
[18:12:59] <clarity> E.g. if size_t were unsigned short
[18:13:02] <clarity> int has higher rank
[18:13:06] <clarity> So the result would be int
[18:13:14] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 272 seconds)
[18:13:15] <clarity> Even then, there's no point casting
[18:13:28] <clarity> Unless you also omit the declaration of malloc
[18:13:35] <jrm> Ok, thank you.
[18:13:46] <clarity> When the declaration is in scope, the arguemnt gets converted to match the declared type
[18:14:21] <SamuelMarks> When I use vcpkg and `find_package` to get my library it gives a "AddressSanitizer:DEADLYSIGNAL" "ERROR: AddressSanitizer: SEGV on unknown address 0x00000000002f" "The signal is caused by a READ memory access." "The signal is caused by a READ memory access.". When I just `add_subdirectory` the library no issues occur (making debug hard?). How do I debug this?
[18:14:26] * SamuelMarks is using CMake
[18:14:37] *** Joins: paulo (paulo@user/paulo/x-9032687)
[18:18:03] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Remote host closed the connection)
[18:18:09] *** Quits: nuxil (~nuxil@141.195.51.213) (Read error: Connection reset by peer)
[18:19:48] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[18:20:06] *** Joins: nuxil (~nuxil@141.195.51.213)
[18:20:27] <markand> the lvgl default font (lvgl) is configured at compile time using a macro #define LV_FONT_DEFAULT &lv_font_montserrat_14, I was wondering there is a way to concat another define to that I can use something like #define LV_FONT_DEFAULT &lv_font_montserrat_(XYZ)
[18:20:48] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-4424-fc06-167e-bc32.res6.spectrum.com)
[18:21:06] <markand> the final idea is that I can do make -DFONTSIZE=18 for example
[18:21:38] <markand> maybe I can do something like this with token pasting or stringify macro
[18:21:40] *** Joins: slidercrank (~slidercra@user/slidercrank)
[18:21:55] *** Joins: geeknix (~pi@2001:e68:5432:a291:c354:1aa:688f:1ab0)
[18:23:03] *** Joins: magic_ninja (~sparkie1@2600:1700:3ab0:e9f0:d591:28fb:7093:57e8)
[18:23:48] *** Joins: mrig_ (~mrig@user/mrig)
[18:24:16] <twkm> SamuelMarks: time to find out how a pointer value came to be such an unlikely value, which is perhaps a shash character -- probably a buffer overflow.
[18:24:32] <twkm> err, slash character.
[18:25:08] *** Joins: X-Scale` (~ARM@31.22.160.28)
[18:25:40] *** Joins: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu)
[18:26:01] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 250 seconds)
[18:26:12] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[18:27:00] *** Quits: X-Scale (~ARM@66.26.54.77.rev.vodafone.pt) (Ping timeout: 252 seconds)
[18:27:02] *** X-Scale` is now known as X-Scale
[18:27:19] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.102)
[18:28:07] <fizzie> markand: Yes, you can do that with ##, though it needs the usual one extra level of indirection in order to expand the other macro before the concatenation.
[18:28:27] *** Joins: random-nick (~random-ni@87.116.181.150)
[18:29:54] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[18:31:30] <markand> fizzie, yeah I'm trying right now but I must admit that I'm now a preprocessor black wizard ;p
[18:31:46] <fizzie> ,expand #define FONTSIZE 18 \n #define LV_FONT_DEFAULT &CAT(lv_font_montserrat_,FONTSIZE) \n #define CAT(a,b) CAT_(a,b) \n #define CAT_(a,b) a##b \n LV_FONT_DEFAULT
[18:31:47] <candide> fizzie:  &lv_font_montserrat_18
[18:32:28] <markand> danke
[18:32:58] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:37:33] *** Joins: pulse (~pulse@user/pulse)
[18:38:40] *** Joins: AmR (~AmREiSa@156.199.14.65)
[18:40:27] <jrm> My head is spinning a bit trying to decipher this function paramter: char (**inames)[11].  In the body of the function there is *inames=(char (*)[11]) malloc((size_t) ntaxa*sizeof(**inames));.  I now know that the casting the argument to size_t is unnecessary.  My questions....
[18:42:14] <fizzie> ,english void f(char (**inames)[11]);
[18:42:15] <candide> fizzie: Declare `f` as a function taking `inames` as pointer to pointer to an array of 11 elements of char and returning void.
[18:42:54] <jrm> 1. I think this is a pointer to an unspecified array pointers to char*.  Each of those pointers points to an array of 11 characters.  is this correct?  2. Is the cast of the return value from malloc necessary in this case?
[18:43:24] *** Quits: Dean (~Dean@165-73-119-36.ip.afrihost.capetown) (Ping timeout: 240 seconds)
[18:43:44] <Beastie> jrm probably it is a pointer to an array of eleven chars passed by reference (so the double pointer)
[18:44:00] <jrm> Beastie: I think so.
[18:44:06] <clarity> jrm: Casting return value of malloc is never necessary
[18:44:19] <jrm> clarity: Got it.
[18:44:23] <jrm> Thanks fizzie
[18:44:26] <Beastie> yes... don't cast malloc() return value.
[18:44:38] <fizzie> The type itself is just a pointer to one pointer to an array of 11 chars. Whether that's the first element of a whole array of such pointers depends on the context.
[18:46:33] <fizzie> I guess given the `*inames = ...;` use though, it's probably just an out-parameter for a single pointer as suggested.
[18:47:10] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[18:47:11] *** Joins: reset (~reset@user/reset)
[18:48:04] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 272 seconds)
[18:49:01] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[18:51:37] <fizzie> Incidentally, interesting to see a use of the `p = malloc(... * sizeof *p)` idiom *together* with a cast of the return value. I feel like usually it's either-or, not both.
[18:53:09] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[18:53:41] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[18:56:38] <SamuelMarks> twkm - But how could that occur without any change to the code
[18:56:46] <SamuelMarks> They are both building the same library
[18:57:53] <SamuelMarks> Here's the commit where I switched back to depending on the external library https://github.com/offscale/cauthflow/tree/2c269f257ecbd55fd16867b65fec3259277acbb9 (external library being: https://github.com/SamuelMarks/curl-simple-https )
[18:57:54] <candide> Title of SamuelMarks's link: GitHub - SamuelMarks/curl-simple-https: Very simple HTTPS interface built atop libcurl
[18:58:06] *** Joins: Torr (~Torr@user/torr)
[18:58:57] <clarity> SamuelMarks: Could be different versions, different compiler options, etc
[18:59:20] <SamuelMarks> same version, same compiler options
[18:59:36] <SamuelMarks> I can manually add it back and show you if you want
[19:00:08] *** Joins: inlight (~thomas@157.35.44.201)
[19:00:08] *** Quits: inlight (~thomas@157.35.44.201) (Changing host)
[19:00:08] *** Joins: inlight (~thomas@user/inlight)
[19:02:45] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[19:02:45] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[19:02:45] *** Joins: wroathe (~wroathe@user/wroathe)
[19:06:10] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[19:06:12] *** Quits: AdmiralBumbleBee (~AdmiralBu@47.203.174.105) (Ping timeout: 240 seconds)
[19:06:31] *** Joins: constxd_ (~brad@142.134.79.191)
[19:07:24] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[19:08:07] <SamuelMarks> clarity - Yep, confirmed the SEGV disappeared again with straight copying the subdirectory from my other repo: https://github.com/offscale/cauthflow/tree/ca8a307e17e43b1d20ca50ce09ee2b1a83021f1b
[19:08:39] <twkm> so now comes the debugging.
[19:08:59] <SamuelMarks> Happy to debug. How do I debug this scenario?
[19:09:29] *** Joins: AdmiralBumbleBee (~AdmiralBu@47.203.174.105)
[19:09:37] *** Joins: nuxil_ (~nuxil@141.195.51.213)
[19:10:11] *** Joins: brad_mssw|mbp (~bhouse@2601:344:4100:b490:949b:71a0:3030:449f)
[19:10:20] <Xeroine> Hello, this isn't C specific I guess but I want to fully understands how math is done under the hood in binary. I have an example where I tried to do 97-13 in binary but I can't get the correct results for that. https://i.imgur.com/x4vsWKB.png can someone tell me in which part I've made a mistake?
[19:11:00] *** Quits: nuxil (~nuxil@141.195.51.213) (Ping timeout: 252 seconds)
[19:11:14] <twkm> SamuelMarks: as you do anything else, try to localize, step through code checking for unexpected behavior.
[19:11:17] <clarity> SamuelMarks: The same as anything else until you have reason to switch to another strategy.  debugger, printf, process of elimination (or constructing a minimal test case) etcetra
[19:11:23] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Read error: Connection reset by peer)
[19:11:44] *** Joins: cherrry9 (~jan@aein251.neoplus.adsl.tpnet.pl)
[19:11:53] <clarity> SamuelMarks: Usually you start by trying to figure out which line of code is crashing.
[19:11:54] <Xgc> SamuelMarks: Be aware.  Just because some problem seems to go away in one case and show up in the other, does not mean both versions don't have the same problem.  Undefined Behavior can show up just like that.  Small changes can hide a problem in strange ways.
[19:12:02] <clarity> ^
[19:12:10] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[19:12:12] *** Quits: panda88kazag (~RadimPavl@176-74-132-138.netdatacomm.cz) (Ping timeout: 240 seconds)
[19:12:57] *** Quits: aehu6ce8 (~aehu6ce8@31.187.110.131) (Quit: aehu6ce8)
[19:13:15] *** Quits: brad_mssw|mac (~bhouse@2601:344:4100:b490:70e2:3b3a:164f:69ec) (Ping timeout: 250 seconds)
[19:14:26] <clarity> Xeroine: Start by making your numbers the same width
[19:15:58] <Xeroine> alright, thought I should trim it down to the minimum
[19:16:35] *** nuxil_ is now known as nuxil
[19:17:28] <rcf> Doing that is what breaks it
[19:18:26] *** Joins: adip (~adip@apn-37-248-215-230.dynamic.gprs.plus.pl)
[19:18:41] <Xeroine> now I got 68
[19:19:06] <Xeroine> if I make the -13 8 bits wide
[19:19:40] <Xeroine> sorry not 68
[19:19:47] <Xeroine> 76
[19:19:49] <clarity> You 'signed' field looks nonsencial
[19:20:01] <Xeroine> what's wrong with it?
[19:20:11] *** Joins: rcoote (~rcoote@2a02:908:690:a140:ed47:c47a:2ee1:57a1)
[19:20:11] <clarity> Why did you prepend a bit to the number?
[19:20:23] <Xeroine> I prepended the sign bit
[19:20:35] <clarity> There is no sign bit
[19:20:42] <Xeroine> what do you mean?
[19:21:01] <clarity> You're doing two's complement
[19:21:08] <clarity> That's all it takes to flip the sign
[19:22:03] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Quit: leaving)
[19:22:27] <AStorm> here's a potential flamewar question, keep your asbestos pants on: I need a unit testing framework for C code, one that does not do things like fork() and has good support for parameterized tests
[19:22:47] <AStorm> criterion fits b but forks, cmocka fits a but has no support for parameterized tests really
[19:22:54] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[19:22:58] <Xeroine> clarity: should I not add the sign bit then?
[19:22:59] <SamuelMarks> Thanks twkm clarity Xgc - yeah I'm worried that there's some UB hidden underneath the hood of my 211 line library https://github.com/SamuelMarks/curl-simple-https/blob/master/libcurl-simple-https/curl_simple_https.c
[19:23:05] *** Joins: Devinn (~Devinn@searspoint.nvidia.com)
[19:23:13] <AStorm> oh, and the framework must output xUnit
[19:23:16] *** Quits: cengiz_io (sid223191@id-223191.ilkley.irccloud.com) (Ping timeout: 245 seconds)
[19:23:23] <clarity> Xeroine: No, you don't add a sign bit
[19:23:34] *** Joins: adip_ (~adip@apn-37-248-215-230.dynamic.gprs.plus.pl)
[19:23:38] *** Joins: cengiz_io (sid223191@id-223191.ilkley.irccloud.com)
[19:23:52] <Xeroine> ooh
[19:23:58] <AStorm> (no forking because arm-none-eabi has none of that)
[19:24:37] *** mrig_ is now known as mrig
[19:25:24] *** Quits: nuxil (~nuxil@141.195.51.213) (Ping timeout: 240 seconds)
[19:26:22] <AStorm> (setjmp/longjmp is allowed and supported though)
[19:26:32] <twkm> SamuelMarks: so what debugging have you done?
[19:26:38] *** Joins: oliverwood (~waldo@node-1w7jra27sm79kkq86do9ek6jm.ipv6.telus.net)
[19:27:33] *** Quits: Torr (~Torr@user/torr) (Quit: leaving)
[19:27:59] <sham1> AStorm: you could always write your own
[19:28:05] <Xeroine> thanks clarity
[19:28:12] <clarity> Did you get the right answer?
[19:28:14] <Xeroine> yes
[19:28:15] <clarity> Yay :)
[19:28:57] <sham1> AStorm: although cmocka *can* be used with parameterized tests. It just takes a bit of elbow grease to get going
[19:29:18] <AStorm> I think so, I found Samba project struggle with the same
[19:29:48] <AStorm> not that I can take any code from Samba, wrong license
[19:29:51] *** Joins: SaltHillStroller (~SaltHillS@206.223.160.26)
[19:30:15] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.102) (Remote host closed the connection)
[19:30:41] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.102)
[19:31:03] <AStorm> it seems they wrote a code generator for that, yuck
[19:31:06] <SamuelMarks> twkm - Actually I was just working on provisioning a server for an unrelated project
[19:31:36] <SamuelMarks> But I suppose I can print before every line in `static size_t read_callback` and `struct ServerResponse https_wrapper`
[19:31:38] <SaltHillStroller> Hey, I was looking at implementing a signal handler and came across this post. Aren't both of OP's options bad? https://stackoverflow.com/questions/43667012/correct-cleaning-at-signal-handler-function . In 2), isn't changing a global variable without synchronization mechanisms undefined behaviour? But what would be the alternative ... Locking a mutex in a signal handler? Doesn't seem good either
[19:33:31] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[19:33:33] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 252 seconds)
[19:34:36] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[19:35:36] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[19:39:00] <clarity> SaltHillStroller: Use sig_atomic_t
[19:39:19] *** Joins: kurahaupo (~kurahaupo@pa49-182-2-50.pa.qld.optusnet.com.au)
[19:39:22] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 272 seconds)
[19:39:33] <AStorm> changing a global variable without synchronization is not UB, it's a data race
[19:39:46] <clarity> SaltHillStroller: *volatile* sig_atomic_t
[19:40:13] <AStorm> it really depends on how threaded your app is and where the signal handler fires
[19:40:19] <AStorm> and what sort of a global it is
[19:40:42] *** Quits: eddybilley (~freddieti@217.119.232.174) (Ping timeout: 252 seconds)
[19:41:17] <SaltHillStroller> clarity: Ahah, that seems perfect
[19:41:31] <SaltHillStroller> AStorm: So I guess if I did use a global variable, what's the worst case? One extra iteration of a loop
[19:41:34] <AStorm> again, why? are you reading the flag from muliple threads?
[19:42:37] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[19:43:44] *** Joins: crashrep (~crashrep@user/crashrep)
[19:44:08] <SaltHillStroller> Nope. Just a loop in the main thread. But the main thread and interrupt could both be executing right?
[19:45:02] <AStorm> uh, no, the thread that receives the signal is stopped until signal is handled
[19:45:31] <AStorm> at various points, which has implications for many IO functions
[19:46:00] <AStorm> and SIGSTOP is even more special (at least on Linux)
[19:46:06] <SaltHillStroller> Okay, just for curiosity then: If I had multiple threads, which one is blocked on the signal?
[19:46:20] <AStorm> the one that received it
[19:46:31] <AStorm> if you sent it to the process, that would be the main thread
[19:46:38] <AStorm> if you sent it to a thread, then that thread
[19:47:05] <AStorm> it depends on pthread dispositions and signal mask
[19:47:13] <AStorm> generally complicated :)
[19:48:10] <SaltHillStroller> Okay, perhaps this is more implementation specific then. But my understanding is the signal is sent to the process. But on Linux, my understanding is that there isn't an actual process as such. The process is just an abstraction of threads pointing to the same resources. Is the thread that receives the signal just random? Or it's always the initial thread? Assuming I'm sending a SIGINT via ctrl-c
[19:48:34] *** Quits: zipace (~john@p200300ecef1357019c1732f26023c5e6.dip0.t-ipconnect.de) (Quit: Leaving)
[19:48:34] *** Quits: adip (~adip@apn-37-248-215-230.dynamic.gprs.plus.pl) (Read error: Connection reset by peer)
[19:48:34] *** Quits: adip_ (~adip@apn-37-248-215-230.dynamic.gprs.plus.pl) (Read error: Connection reset by peer)
[19:48:44] <AStorm> no, always the main thread (initial thread)
[19:48:47] *** Quits: constxd_ (~brad@142.134.79.191) (Ping timeout: 256 seconds)
[19:49:03] <AStorm> if the main thread is a zombie, you have an undead problem :P
[19:49:08] <SaltHillStroller> :D
[19:49:36] <SaltHillStroller> Okay. What if the main thread was blocked? Would it unblock to run the handler?
[19:50:05] <AStorm> most every blocking function (IO that is) would be interrupted and return some error code, typically -EINTR
[19:50:48] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[19:50:52] *** Joins: terminalpusher (~terminalp@2a01:586:9b7e:1:7b2f:6557:bb5b:d32)
[19:50:53] <AStorm> as for how to send signal to a thread, that's pthread_kill
[19:51:37] <AStorm> then there's all the mess about children (which is important to you since you use fork() )
[19:53:54] *** Joins: mahmutov (~mahmutov@37.155.20.217)
[19:54:09] *** Joins: adip (~adip@apn-37-248-215-230.dynamic.gprs.plus.pl)
[19:54:19] *** Joins: adip_ (~adip@apn-37-248-215-230.dynamic.gprs.plus.pl)
[19:54:41] <AStorm> see man 2 sigaction about the mess with signals
[19:54:55] *** Joins: angelacrust (~angelacru@182.68.130.113)
[19:55:08] *** Joins: FluffyMask (~masque@user/fluffymask)
[19:56:04] <Xgc> SamuelMarks: Look at the WriteMemoryCallback function and explain what you do with the return of realloc.
[19:56:27] *** Joins: meator (~meator@user/meator)
[19:56:40] <SaltHillStroller> AStorm: Thanks! I'll have a read
[19:56:46] <Xgc> SamuelMarks: Sorry. Ignore that.  Your indentation was a little odd.
[19:56:57] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[19:57:11] <Xgc> SamuelMarks: My eyesight is more likely the issue.
[19:59:05] <AStorm> oh, I lied, all threads receive the signal for a process
[19:59:22] <AStorm> in an undetermined order too
[19:59:25] *** Joins: Betal (~Betal@user/betal)
[19:59:31] <AStorm> which is why pthread_sigmask is recommended
[19:59:49] *** Quits: AmR (~AmREiSa@156.199.14.65) (Quit: Konversation terminated!)
[19:59:58] <cryptonector> all threads that haven't blocked it _can_ receive the signal, but they won't all call the handler (if one is set), even if more than one thread has that signal unblocked
[20:00:14] <cryptonector> (we're talking, presumably, about async signals)
[20:00:21] <AStorm> one random thread will call the handler
[20:00:25] <Xgc> SamuelMarks: I don't like the way you handle size.  It's probably best to store the actual size, not actual size-1, so that you can appear to overrun the buffer with mem[size] = 0;
[20:00:30] <AStorm> by random I mean undefined
[20:00:52] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Read error: Connection reset by peer)
[20:01:16] <AStorm> unless of course the signal is masked for that thread
[20:01:57] <AStorm> still, it is only one thread ever
[20:02:15] *** Quits: meator (~meator@user/meator) (Remote host closed the connection)
[20:02:33] *** Joins: meator (~meator@user/meator)
[20:02:48] *** Quits: jusski (~user@78-63-85-123.static.zebra.lt) (Ping timeout: 272 seconds)
[20:02:58] <AStorm> so, if suppose you want to access some memory in that thread after it receives signal, and some other thread modified that memory, enjoy your potential for data races
[20:05:25] *** Quits: terminalpusher (~terminalp@2a01:586:9b7e:1:7b2f:6557:bb5b:d32) (Remote host closed the connection)
[20:06:24] <AStorm> sig_atomic_t is not data race free
[20:06:54] <AStorm> it's only atomic, which means the writes to it will not get torn values (most likely because it's the machine word)
[20:07:04] <SamuelMarks> Xgc - I use clang-format with LLVM style
[20:07:11] <AStorm> *writes to it will not cause torn values
[20:08:09] <Xgc> SamuelMarks: No problem. That was my problem.  The size handling, however, seems a little odd, misleading.  Maybe even unnecessary/
[20:08:15] *** Quits: tusko (~yeurt@copyfree/advocate/tusko) (Ping timeout: 240 seconds)
[20:08:28] <SamuelMarks> Xgc - I took it from https://github.com/curl/curl/blob/master/docs/examples/postinmemory.c#L52
[20:08:35] <AStorm> if you need an actual atomic type, you need C11 and _Atomic
[20:08:58] *** Joins: inlight_ (~thomas@82.221.128.46)
[20:09:01] *** Quits: inlight_ (~thomas@82.221.128.46) (Client Quit)
[20:09:06] <Xgc> SamuelMarks: That's not a good reason. :)
[20:09:12] <cryptonector> or atomic operations anyways, like if you're stuck with C99 or C89
[20:09:18] *** Joins: inlight_ (~thomas@82.221.128.46)
[20:09:19] <AStorm> yeah
[20:09:26] *** Joins: tusko (~yeurt@copyfree/advocate/tusko)
[20:09:44] <SamuelMarks> Xgc - My lib is a very light wrapper atop curl
[20:09:45] *** Quits: meator (~meator@user/meator) (Ping timeout: 256 seconds)
[20:10:02] <SamuelMarks> Their docs seemed like a good place to start
[20:11:56] <Xgc> SamuelMarks: That's fine. I'm just referring to the allocation of 1 byte and tagging the size as 0, then keeping the buffer 1 byte larger than that requested.  Is there a reason other than "someone else did it too"?
[20:12:01] *** Quits: inlight (~thomas@user/inlight) (Ping timeout: 256 seconds)
[20:12:43] <SamuelMarks> "someone else [lib maintainer] did it too"
[20:12:50] *** Joins: eddybilley (~freddieti@2a02-a454-7f89-1-7986-3f2b-ff3-50ce.fixed6.kpn.net)
[20:12:57] *** Joins: Dean (~Dean@165-73-119-36.ip.afrihost.capetown)
[20:12:58] <Xgc> SamuelMarks: It seems like a good place to start when looking for possible undefined behavior.  Anything that's not obvious and could be misunderstood could lead to problems.
[20:13:28] <SamuelMarks> SEGV is caused ny this?
[20:14:12] *** Quits: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net) (Remote host closed the connection)
[20:14:22] *** Joins: seninha (~seninha@user/seninha)
[20:14:26] <Xgc> SamuelMarks: Well, over-allocation isn't likely to be a problem.  But it could cause someone to assume things about other buffers that are untrue.
[20:14:33] *** Joins: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net)
[20:14:50] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[20:14:54] <Xgc> SamuelMarks: It's not just over-allocation of the 1 byte, but that someone bothers to assign that over-allocated byte to 0.
[20:17:00] *** Quits: eddybilley (~freddieti@2a02-a454-7f89-1-7986-3f2b-ff3-50ce.fixed6.kpn.net) (Ping timeout: 240 seconds)
[20:21:05] *** Quits: floatcomplex (~floatcomp@wireguard/tunneler/floatcomplex) (Quit: leaving)
[20:21:33] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[20:22:13] <sokan> http://dpaste.com/3LHZUWJ8S what's wrong with this code here? rna_seq should be dna_seq reverse (the first of rna_seq to be the last of dna_seq) but for some reason it's not printing anything
[20:22:47] *** Quits: acerbic (~acerbic@cs-xdata-50-86-49-156.cspire.com) (Read error: Connection reset by peer)
[20:22:56] *** Joins: Akuli (~Akuli@82-203-163-134.bb.dnainternet.fi)
[20:24:25] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:50f5:7256:bb18:3ed3)
[20:24:52] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.102) (Quit: Yankies Motherfh@ckers C0[k Astroboys)
[20:25:27] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[20:25:27] *** Joins: effexzi (uid474242@id-474242.ilkley.irccloud.com)
[20:25:54] <Xgc> sokan: What input data do you use?
[20:27:07] <Xgc> sokan: What output did you expect and what actually printed?
[20:28:22] <Xgc> sokan: A missing '\n' might lead you to think one of the lines did not print.
[20:30:19] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[20:30:30] *** Joins: the_lanetly_052_ (~the_lanet@194.135.169.19)
[20:32:00] *** Joins: z4kpi (~z4kpi@user/zacts)
[20:32:34] *** Quits: adip_ (~adip@apn-37-248-215-230.dynamic.gprs.plus.pl) (Ping timeout: 272 seconds)
[20:32:34] *** Quits: adip (~adip@apn-37-248-215-230.dynamic.gprs.plus.pl) (Ping timeout: 272 seconds)
[20:32:45] *** Joins: floatcomplex (~floatcomp@wireguard/tunneler/floatcomplex)
[20:32:59] *** Quits: the_lanetly_052 (~the_lanet@194.135.154.108) (Ping timeout: 256 seconds)
[20:35:45] <pinheadmz> how come "\x0b" is being displayed as "\v" in debugger?
[20:36:04] <pinheadmz> similarly "\x08" is displayed as "\b"
[20:36:12] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[20:36:30] <pinheadmz> and weirdest "\x06
[20:36:45] <pinheadmz> sorry "\x06" displayed as "\U00000006"
[20:37:27] *** Joins: seninha (~chatzilla@user/seninha)
[20:38:37] <sokan> Xgc: http://dpaste.com/2B7V33WU7 this is the input file. I take the whole CCTA[...]CATA  as one array, named dna_seq. And I want rna_seq to print it in reverse, e.g. ATAC[...]ATCC
[20:39:05] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[20:40:07] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[20:40:14] <the_lanetly_052_> Hi, which flag should I pass gcc to initialize automatically local variables?
[20:40:51] *** Joins: acerbic (~acerbic@cs-xdata-50-86-49-156.cspire.com)
[20:40:59] <pragma-> the_lanetly_052_: that's not how C works.
[20:41:31] <z4kpi> hi what is the general C programming irc channel?
[20:42:01] <sham1> This one
[20:42:05] *** Joins: cosimone (~user@93-47-229-224.ip115.fastwebnet.it)
[20:42:18] <the_lanetly_052_> pragma-: IIRC gcc should have -finit-local-zero yes?
[20:43:05] *** Quits: Thedarkb (~Thedarkb@2001:bb6:b403:e042:b812:bb3f:25c8:9173) (Remote host closed the connection)
[20:43:09] *** Joins: Thedarkb1 (~Thedarkb@86-42-4-182-dynamic.agg3.kny.prp-wtd.eircom.net)
[20:43:24] <z4kpi> on freenode there used to be a separate irc channel. this is for general C programming too?
[20:44:12] <fizzie> the_lanetly_052_: Should it? According to the documentation I can see, that's a code generation option for the *Fortran* frontend only.
[20:46:18] *** Joins: phrix (~phrix@185.76.176.45)
[20:47:45] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Read error: Connection reset by peer)
[20:48:03] <fizzie> sokan: Your reverse loop is clearly also copying the terminating '\0' at the end of dna_seq to the *beginning* of rna_seq, so it's no surprise nothing would be printed.
[20:49:07] <sokan> Hmmm. True true. I can avoid that with an if?
[20:49:19] <fizzie> Don't avoid it with an if, avoid it by setting the indices correctly.
[20:49:42] *** Joins: Akiva (~Akiva@user/Akiva)
[20:49:46] <fizzie> The output is the same size as the input, so reverse characters 0..i-2, and set i-1 of the output to '\0'.
[20:50:07] <fizzie> (Instead of reversing characters 0..i-1.)
[20:50:24] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[20:50:57] <sokan> :o
[20:50:59] <sokan> it worked!
[20:51:30] <ChoHag> There are 2 hard problems in computer science.
[20:51:32] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[20:51:41] <ChoHag> Naming things, cache invalidation and off-by-one errors.
[20:51:58] <sokan> lol
[20:52:29] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[20:52:30] <sokan> in rna_seq there's no need to add \0?
[20:52:40] <fizzie> There is if you're planning to print it with printf %s.
[20:52:44] <fizzie> Or in general treat it as a string.
[20:52:44] <SamuelMarks> ChoHag: count harder
[20:53:29] <sokan> fizzie: I printf("%s", rna_seq); and I get no error or weird symbol in the end of the string
[20:54:03] <fizzie> 0 is probably the most common byte there is, so it's not uncommon you just get accidentally lucky.
[20:54:39] <fizzie> IOW: just because something works doesn't mean it's correct.
[20:54:44] <sokan> lucky is not something I like :/
[20:55:05] <sokan> fizzie: I'm used to linux sysdmin login: If it works don't fiddle with it
[20:55:12] <sokan> which is bad in programming
[20:55:14] <ChoHag> That's just sysadmin logic.
[20:55:32] <SamuelMarks> write a proof
[20:55:37] <ChoHag> If something works you have to leave it along to go find the next thing the developers broke.
[20:55:45] <ChoHag> alone
[20:55:45] <sokan> XD
[20:56:58] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:57:40] <fizzie> sokan: Here's what running it under Valgrind gives (without adding a '\0'): https://0x0.st/o8eb.txt
[20:57:45] <fizzie> (Relying on uninitialized data is one of those categories that Valgrind's Memcheck tool catches that -fsanitize=address,undefined doesn't.)
[20:58:36] <sokan> I see
[20:58:38] <ChoHag> Use calloc and all your memory is initialised.
[20:58:48] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[20:58:59] <sokan> Now I want rna_seq to have U instead of T...
[20:59:21] *** Quits: the_lanetly_052_ (~the_lanet@194.135.169.19) (Ping timeout: 252 seconds)
[20:59:30] *** Joins: yolo100 (~yolo@rrcs-67-79-221-188.sw.biz.rr.com)
[20:59:47] *** Quits: cosimone (~user@93-47-229-224.ip115.fastwebnet.it) (Quit: i really have to scratch my right butt cheek this time, sorry)
[20:59:57] <ChoHag> Better get some proteins built then.
[21:00:28] <sokan> ChoHag: :D
[21:00:29] <ChoHag> Or does that happen as part of the rna extraction?
[21:00:41] <ChoHag> I never got the whole U/T thing.
[21:00:43] *** Quits: seninha (~chatzilla@user/seninha) (Quit: ChatZilla 0.9.93 [SeaMonkey 2.53.10.2/20220211225827])
[21:00:48] <sokan> that happens after rna creation :p
[21:00:58] <sokan> proteins I mean
[21:01:26] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[21:01:28] *** Joins: seninha (~chatzilla@user/seninha)
[21:01:44] <sokan> if (dna_seq[k] == 'T'){ rna_seq[j] == 'U';} k-- } doesn't seem to work
[21:02:51] <ChoHag> if (dna_seq[k] == 'T') rna_seq[j] = 'U'; else rna_seq[j] = dna_seq[k]; k--;
[21:03:08] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:03:26] *** Quits: seninha (~chatzilla@user/seninha) (Client Quit)
[21:03:51] <ChoHag> I'd put the k++ above: (j = 0, k = i - 1; j < k; j++, k--)
[21:04:26] <ChoHag> Or move them both to the end of the loop but keep them together.
[21:04:38] *** Joins: seninha (~chatzilla@user/seninha)
[21:04:47] <ChoHag> But that's just a matter of style.
[21:04:55] <sokan> this is wrong
[21:04:57] <sokan> not your
[21:04:59] <sokan> not you
[21:05:02] <sokan> what I did
[21:05:08] <sokan> output is just A
[21:05:11] <sokan> or AAA
[21:05:31] <jrm> Inside f(char (**inames)[11]); I'm trying to allocate an array of some length only known at runtime, with each index pointing to a char[11].  First I'm doing *inames = malloc(*ntaxa*sizeof((*inames)[11]));  Now do I have to call malloc() for each index?
[21:06:00] <ChoHag> I suppose the first bit is to skip over an irrelevant/header line?
[21:06:51] <ChoHag> Following which is a single line of purely DNA bases (ACGT)?
[21:07:06] <ChoHag> (No spaces or comments or suchlike)
[21:07:14] <Xgc> sokan: Did you fix the %c format?  I didn't notice you mention that yet.
[21:07:18] <ChoHag> Apart from non-coding regions of course. God's comments.
[21:07:49] <sokan> Xgc: yes I did
[21:08:09] <sokan> Xgc, ChoHag http://dpaste.com/BEDAENBEX
[21:08:11] *** Quits: seninha (~chatzilla@user/seninha) (Client Quit)
[21:09:04] *** Joins: van3ll0pe (~van3ll0pe@2a01:cb18:80fc:bc00:38f:2f02:5fa4:6d8f)
[21:09:09] <ChoHag> Ah hmm. I think you want dna_seq[i] = '\0' and k = i - 1;
[21:09:18] <ChoHag> OTOH you could do it with less code and fewer variables.
[21:09:46] <sokan> ChoHag: since the do ends with one i more than it "should"
[21:09:56] <ChoHag> Yes that'd be where the '\0' goes.
[21:09:59] <sokan> I think i - 1 should end with \0
[21:10:06] <ChoHag> If you have one base i will be 1 and dna_seq[0] will be that base.
[21:10:31] <ChoHag> Oh no hang on you loop until eof...
[21:12:05] *** Joins: superboot (~agentgasm@user/superboot)
[21:13:20] *** Joins: savolla (~quassel@95.10.207.85)
[21:13:42] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:13:42] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:13:42] *** Joins: wroathe (~wroathe@user/wroathe)
[21:13:44] <sokan> got it
[21:13:53] <sokan> rna_seq[j] = 'U'.
[21:13:57] <sokan> not == 'U'
[21:14:54] *** Joins: immibis_ (~hexchat@dynamic-089-204-138-200.89.204.138.pool.telefonica.de)
[21:16:46] <yolo100> c11/c17 recommends safe api e.g. snprintf_s, where are they? is https://github.com/rurban/safeclib the best we can have
[21:16:47] <candide> Title of yolo100's link: GitHub - rurban/safeclib: safec l﻿ibc extension with all C11 Annex K functions
[21:17:00] *** Quits: immibis (~hexchat@dynamic-089-204-138-014.89.204.138.pool.telefonica.de) (Ping timeout: 240 seconds)
[21:17:17] <yolo100> is it part of any stdlib yet?(e.g. glibc, musl)
[21:17:30] <ChoHag> sokan: Try this: https://dpaste.com/8W2GX6L7X
[21:17:42] <ChoHag> It's untested and may not be right.
[21:18:02] *** Joins: immibis (~hexchat@dynamic-089-204-138-200.89.204.138.pool.telefonica.de)
[21:18:20] *** Quits: immibis_ (~hexchat@dynamic-089-204-138-200.89.204.138.pool.telefonica.de) (Read error: Connection reset by peer)
[21:18:26] *** Joins: cosimone (~user@93-47-229-224.ip115.fastwebnet.it)
[21:18:44] <sokan> ChoHag: not going to try out pointers when I'm going for exams tomorrow XD
[21:18:48] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[21:19:01] <ChoHag> Get someone to hold your beer. You'll be fine.
[21:19:03] *** Quits: cosimone (~user@93-47-229-224.ip115.fastwebnet.it) (Remote host closed the connection)
[21:19:22] *** Joins: cosimone (~user@93-47-229-224.ip115.fastwebnet.it)
[21:19:26] <sokan> I'll be asking here as well I guess XD
[21:19:35] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[21:19:36] <sokan> The good things of doing online exams :P
[21:20:02] <ChoHag> Actually it won't work because it doesn't reverse the order :P
[21:20:31] <ChoHag> But essentially the idea was to walk up the dna array filling it in then walk back down it while filling in the other.
[21:20:35] <sokan> ChoHag: http://dpaste.com/6TN6AW8NF
[21:20:41] <sokan> this one works \o/
[21:21:31] *** Joins: ddoering (~Devinn@searspoint.nvidia.com)
[21:23:40] <ChoHag> Here's a possibly correct pointer variant if you get bored during the exam: https://dpaste.com/7W7TBGRDD
[21:23:48] *** Quits: Devinn (~Devinn@searspoint.nvidia.com) (Ping timeout: 240 seconds)
[21:24:16] *** Quits: cosimone (~user@93-47-229-224.ip115.fastwebnet.it) (Remote host closed the connection)
[21:24:31] <ChoHag> The lines between the loops should be the other way around really.
[21:26:45] <ChoHag> To be fair a compiler would turn either into more or less the same thing.
[21:26:59] <ChoHag> (Eventually, after optimisation)
[21:32:02] *** Joins: vicfred (~vicfred@user/vicfred)
[21:33:19] *** Quits: van3ll0pe (~van3ll0pe@2a01:cb18:80fc:bc00:38f:2f02:5fa4:6d8f) (Quit: Leaving)
[21:33:44] *** Quits: Nutcrawler (~sergio@217-180-232-30.sycmilaa.metronetinc.net) (Read error: Connection reset by peer)
[21:33:48] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 240 seconds)
[21:34:45] *** Joins: vicfred_ (~vicfred@user/vicfred)
[21:36:12] *** Quits: rcoote (~rcoote@2a02:908:690:a140:ed47:c47a:2ee1:57a1) (Ping timeout: 252 seconds)
[21:36:29] *** Quits: z4kpi (~z4kpi@user/zacts) (Quit: Client closed)
[21:37:35] *** Quits: vicfred (~vicfred@user/vicfred) (Ping timeout: 256 seconds)
[21:39:05] *** Quits: vicfred_ (~vicfred@user/vicfred) (Client Quit)
[21:39:17] *** Quits: fe23 (~fe23@2409:8a34:46c:f80:7dad:7d0f:a231:4198) (Quit: fe23)
[21:39:39] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[21:40:20] *** Quits: mort (~mort@188.166.114.29) (Quit: The Lounge - https://thelounge.chat)
[21:41:03] *** Joins: mort (~mort@188.166.114.29)
[21:41:31] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[21:45:24] *** Quits: savolla (~quassel@95.10.207.85) (Ping timeout: 240 seconds)
[21:45:26] *** Quits: yolo100 (~yolo@rrcs-67-79-221-188.sw.biz.rr.com) (Quit: Client closed)
[21:51:24] *** Joins: crashrep (~crashrep@user/crashrep)
[21:55:55] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[21:57:08] *** Quits: merrinx (~merrinx@ti0028a400-1685.bb.online.no) (Quit: WeeChat 3.3)
[21:57:57] *** Joins: merrinx (~merrinx@ti0028a400-1685.bb.online.no)
[21:59:48] *** Quits: alch (~alch@151.82.144.51) (Read error: Connection reset by peer)
[22:01:24] *** Quits: inlight_ (~thomas@82.221.128.46) (Ping timeout: 240 seconds)
[22:01:25] *** Quits: boB_K7IQ (~boB_K7IQ@ip72-201-138-188.ph.ph.cox.net) ()
[22:02:27] *** Joins: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8)
[22:02:27] *** Joins: inlight_ (~thomas@82.221.128.46)
[22:03:30] *** Quits: Inline (~Inline@2a02:908:1252:7a80::d7) (Remote host closed the connection)
[22:03:56] *** Joins: alch (~alch@bo-18-154-246.service.infuturo.it)
[22:04:05] *** Joins: Inline (~Inline@2a02:908:1252:7a80::1aa)
[22:05:08] *** Joins: crashrep (~crashrep@user/crashrep)
[22:05:21] *** Quits: Inline (~Inline@2a02:908:1252:7a80::1aa) (Client Quit)
[22:06:05] *** Joins: Inline (~Inline@2a02:908:1252:7a80::1aa)
[22:07:01] *** Joins: cosimone (~user@93-47-229-224.ip115.fastwebnet.it)
[22:08:02] *** Joins: Jong (~Jong@2620:10d:c090:400::5:b24b)
[22:08:46] *** Joins: vysn (~vysn@user/vysn)
[22:10:25] *** Quits: angelacrust (~angelacru@182.68.130.113) (Quit: Client closed)
[22:12:44] *** Joins: seninha (~seninha@user/seninha)
[22:12:52] *** Joins: z4kpi (~z4kpi@user/zacts)
[22:14:16] *** Joins: Betal (~Betal@user/betal)
[22:15:08] <Xeroine> I already asked this yesterday but what are constant/literal suffixes useful for?
[22:15:37] <Xeroine> I thought I understood it yesterday but idk when I should even use them
[22:15:49] <sokan> To write what I wanted in a seperate file I first need to FILE *out_file; out_file = fopen("results.txt", "w"); fprinf(out_file, "%s\n%s\n); fclose(out_file);
[22:15:52] <sokan> ?
[22:15:54] <caze> ,cc unsigned long long x = UCHAR_MAX + 1;
[22:15:56] <candide> caze: no output: x = 256
[22:16:07] <caze> Oops.
[22:16:15] <caze> ,cc unsigned long long x = UINT_MAX + 1;
[22:16:17] <candide> caze: no output: x = 0
[22:16:21] <caze> ,cc unsigned long long x = UINT_MAX + 1ULL;
[22:16:23] <candide> caze: no output: x = 4294967296
[22:16:29] <caze> Xeroine: ^
[22:16:51] <Xeroine> hmm
[22:17:19] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Remote host closed the connection)
[22:19:48] <SaltHillStroller> Any trickery possible to create a macro that assigns a unique ID on every usage? I.e. first invocation is ID=0, ID=1, ... so on and so fourth?
[22:20:14] *** Quits: mahmutov (~mahmutov@37.155.20.217) (Ping timeout: 272 seconds)
[22:20:26] <Xeroine> UINT_MAX is 65,535 afaik and ULLONG_MAX is 18,446,744,073,709,551,615 so how did adding 1ull to UINT_MAX result in 4294967296?
[22:21:01] <caze> ,cc UINT_MAX;
[22:21:03] <candide> caze: no output: UINT_MAX = 4294967295
[22:21:25] <SaltHillStroller> Ooh, just came across this: https://gcc.gnu.org/onlinedocs/cpp/Common-Predefined-Macros.html, looks like GCC has a __COUNTER__ macro. That will do
[22:21:38] *** Joins: mahmutov (~mahmutov@37.155.85.16)
[22:21:44] <Xeroine> oh
[22:23:03] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:50f5:7256:bb18:3ed3) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:23:42] <caze> Xeroine: ULLONG_MAX is irrelevant to this example.
[22:24:12] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 240 seconds)
[22:25:21] <caze> Xeroine: What's happening is that the + operator sees its two operands: UINT_MAX and 1. It figures out any promotions that are needed based on these two alone. THerefore it promotes 1 to unsigned int, and adds them together. This wraps around to zero, and is what ends up getting assigned to x.
[22:25:34] *** Joins: Charadon (~Charadon@155.138.164.183)
[22:26:19] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 256 seconds)
[22:27:11] <caze> Xeroine: In the second example, the + operator sees its two operand have type unsigned int and unsigned long long. It promotes the value of UINT_MAX to unsigned long long, and adds them together. This does not wraparound, and the correct value gets assigned to x.
[22:28:40] *** Joins: plastico (~plastico@neomutt/plastico)
[22:28:54] <caze> Xeroine: My first example was flawed because I tried to use UCHAR_MAX. In this case, due to integer promotions, it got promoted to int, so the value doesn't wrap around.
[22:29:59] *** Quits: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com) (Remote host closed the connection)
[22:33:54] *** Quits: cosimone (~user@93-47-229-224.ip115.fastwebnet.it) (Remote host closed the connection)
[22:34:52] *** Joins: AmR (~AmREiSa@156.199.14.65)
[22:34:53] *** Quits: pulse (~pulse@user/pulse) (Quit: Look behind you, a three headed monkey!)
[22:37:24] *** Quits: z4kpi (~z4kpi@user/zacts) (Quit: Client closed)
[22:39:38] *** Joins: pucara (~i@host14.181-1-101.telecom.net.ar)
[22:41:02] *** Joins: whatsupboy (~whatsupbo@user/scobydoo)
[22:42:10] <Xeroine> thanks a lot
[22:44:39] *** Joins: magla (~gelignite@55d40b59.access.ecotel.net)
[22:44:43] *** Quits: gpanders_ (~gpanders@user/gpanders) (Remote host closed the connection)
[22:44:57] *** Quits: finsternis (~X@23.226.237.192) (Ping timeout: 252 seconds)
[22:45:03] *** Quits: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:45:29] *** Joins: pulse (~pulse@user/pulse)
[22:47:59] *** Joins: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com)
[22:49:37] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[22:49:43] <Xeroine> caze: btw you said "it promotes 1 to unsigned int" but what is it promoting 1 from?
[22:50:17] <caze> Xeroine: int
[22:50:31] <NRK> ,cc ptype(1)
[22:50:33] <candide> NRK:  1 = int
[22:50:34] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[22:52:52] *** Quits: floatcomplex (~floatcomp@wireguard/tunneler/floatcomplex) (Quit: leaving)
[22:52:53] <Xeroine> oh right
[22:53:50] *** Joins: floatcomplex (~floatcomp@wireguard/tunneler/floatcomplex)
[22:53:51] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:50f5:7256:bb18:3ed3)
[22:55:01] *** Joins: gproto23 (~gproto23@user/gproto23)
[22:55:05] *** Joins: Cyp_ (~cyp@213.237.87.172)
[22:55:19] *** Quits: Cyp (~cyp@213.237.87.172) (Read error: Connection reset by peer)
[22:57:30] *** Joins: cosimone (~user@93-47-229-224.ip115.fastwebnet.it)
[22:59:48] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[23:03:04] *** Quits: merrinx (~merrinx@ti0028a400-1685.bb.online.no) (Quit: WeeChat 3.3)
[23:05:43] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:50f5:7256:bb18:3ed3) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:07:13] *** Joins: brad_mssw|mac (~bhouse@2601:344:4100:b490:ad4d:c216:3a82:ca64)
[23:07:41] *** Quits: brad_mssw|mbp (~bhouse@2601:344:4100:b490:949b:71a0:3030:449f) (Ping timeout: 250 seconds)
[23:10:16] *** Joins: libh (~libh@c-24-30-27-91.hsd1.ga.comcast.net)
[23:11:07] *** Quits: phrix (~phrix@185.76.176.45) (Quit: Leaving)
[23:11:35] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[23:11:39] <libh> Why does hexdump or xxd print dots so frequently?
[23:11:44] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:12:03] *** Quits: ckdCreations (~ckdCreati@147.55.130.34) (Read error: Connection reset by peer)
[23:12:24] *** Joins: ckdCreations (~ckdCreati@147.55.130.32)
[23:12:41] <ChoHag> To help your eyes?
[23:14:28] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:14:28] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:14:28] *** Joins: wroathe (~wroathe@user/wroathe)
[23:14:32] *** Lord_of_Life_ is now known as Lord_of_Life
[23:16:08] *** Joins: Guest49 (~Guest49@188.147.102.42.nat.umts.dynamic.t-mobile.pl)
[23:16:11] <nomagno> I recommend POSIX 'od -x' if you want the real experience!
[23:16:15] *** Parts: Guest49 (~Guest49@188.147.102.42.nat.umts.dynamic.t-mobile.pl) ()
[23:17:22] *** Joins: pgib (~textual@173.38.117.90)
[23:17:41] <caze> Dean: Yes, that.
[23:18:40] <libh> Is there a good C library for seeing the metadata of a PDF file?
[23:19:36] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[23:20:54] <ChoHag> Probably not.
[23:22:11] *** Joins: mixfix41 (~homefame@user/mixfix41)
[23:24:35] *** Quits: libh (~libh@c-24-30-27-91.hsd1.ga.comcast.net) (Quit: Leaving)
[23:31:11] *** Joins: meator (~meator@user/meator)
[23:31:20] *** Quits: dacav (~dacav@h94-245-9-196.cust.a3fiber.se) (Quit: leaving)
[23:31:25] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[23:31:30] *** Joins: dacav (~dacav@h94-245-9-196.cust.a3fiber.se)
[23:31:30] *** Quits: meator (~meator@user/meator) (Client Quit)
[23:32:48] *** Quits: dacav (~dacav@h94-245-9-196.cust.a3fiber.se) (Client Quit)
[23:32:57] *** Joins: dacav (~dacav@h94-245-9-196.cust.a3fiber.se)
[23:33:09] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[23:34:33] *** Quits: dacav (~dacav@h94-245-9-196.cust.a3fiber.se) (Client Quit)
[23:34:42] *** Joins: dacav (~dacav@h94-245-9-196.cust.a3fiber.se)
[23:36:55] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[23:37:18] *** Quits: inlight_ (~thomas@82.221.128.46) (Quit: WeeChat 3.3)
[23:37:23] *** Joins: eddybilley (~freddieti@2a02-a454-7f89-1-7986-3f2b-ff3-50ce.fixed6.kpn.net)
[23:37:39] *** Joins: inlight (~thomas@82.221.128.46)
[23:37:39] *** Quits: inlight (~thomas@82.221.128.46) (Changing host)
[23:37:39] *** Joins: inlight (~thomas@user/inlight)
[23:41:55] *** Quits: eddybilley (~freddieti@2a02-a454-7f89-1-7986-3f2b-ff3-50ce.fixed6.kpn.net) (Ping timeout: 250 seconds)
[23:44:46] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[23:47:38] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 272 seconds)
[23:47:51] *** lukedashjr is now known as luke-jr
[23:49:04] *** Quits: d_low (~dlow@107-210-161-84.lightspeed.tukrga.sbcglobal.net) (Remote host closed the connection)
[23:49:43] *** Joins: d_low (~dlow@107-210-161-84.lightspeed.tukrga.sbcglobal.net)
[23:49:57] *** Quits: novns (~novns@user/novns) (Quit: ZNC - https://znc.in)
[23:50:53] *** Joins: novns (~novns@user/novns)
[23:53:43] *** Quits: d_low (~dlow@107-210-161-84.lightspeed.tukrga.sbcglobal.net) (Client Quit)
[23:53:43] *** Joins: elves-upstate (~elves-ups@129-2-180-38.wireless.umd.edu)
[23:54:56] *** Quits: effexzi (uid474242@id-474242.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[23:55:19] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[23:56:15] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 240 seconds)
[23:57:49] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[23:59:42] *** Joins: strajder (~strajder@user/strajder)
