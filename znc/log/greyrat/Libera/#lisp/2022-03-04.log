[00:04:26] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[00:07:00] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 250 seconds)
[00:17:54] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[00:18:32] *** Joins: eugercek (~user@user/eugercek)
[00:20:56] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[00:33:48] *** Quits: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[00:35:22] *** Joins: mtreis (~mtreis@ip68-9-89-162.ri.ri.cox.net)
[00:35:42] *** Joins: rogersm (~rogersm@90.166.180.250)
[00:37:17] *** Joins: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net)
[00:43:32] *** Joins: anakimluke (~anakimluk@186.221.41.118)
[00:44:44] *** Quits: rogersm (~rogersm@90.166.180.250) (Quit: Leaving...)
[00:48:42] *** Joins: anakimluke_ (~anakimluk@186.221.41.118)
[00:48:51] *** Quits: anakimluke_ (~anakimluk@186.221.41.118) (Client Quit)
[00:50:17] *** Quits: dld (~davidlowr@73.61.8.74) (Ping timeout: 240 seconds)
[00:52:39] *** Joins: dld (~davidlowr@2601:197:600:1210:fddb:e1db:6b56:f9d3)
[00:52:40] *** Quits: amb007 (~a_bakic@93.151.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[00:56:59] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[00:57:51] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[01:05:30] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[01:09:08] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Remote host closed the connection)
[01:09:32] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[01:10:15] *** Quits: anakimluke (~anakimluk@186.221.41.118) (Quit: anakimluke)
[01:12:15] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[01:15:53] *** Joins: hashfunc107e (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[01:18:47] <prokhor__> kagevf: Doesnt Lisp in a box provide some old version of alisp?
[01:19:16] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:22:55] <drakonis> it also comes with clozure cl instead of sbcl it seems?
[01:23:02] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 240 seconds)
[01:24:21] <drakonis> or is this lispbox that does that
[01:31:42] *** Quits: qhong (~qhong@rescomp-21-400677.stanford.edu) (Read error: Connection reset by peer)
[01:31:50] *** Joins: qhong (~qhong@rescomp-21-400677.stanford.edu)
[01:39:52] *** Quits: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:44:37] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[01:48:54] *** Quits: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[01:50:33] *** Joins: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net)
[01:53:24] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 240 seconds)
[01:54:12] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[01:55:18] *** Quits: joev (~joev@user/joev) (Ping timeout: 260 seconds)
[02:03:18] *** Quits: greyrat_ (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[02:03:38] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[02:05:32] *** Quits: Inoperable (~PLAYER_1@fancydata.science) (Ping timeout: 272 seconds)
[02:06:36] *** Server sets mode: +nt 
[02:07:25] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[02:08:22] *** Quits: mogan90 (~mogan90@132.140.7.93.rev.sfr.net) (Ping timeout: 260 seconds)
[02:09:39] *** Joins: In0perable (~PLAYER_1@fancydata.science)
[02:09:44] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[02:16:08] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 250 seconds)
[02:16:52] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[02:17:50] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Remote host closed the connection)
[02:18:05] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Read error: Connection reset by peer)
[02:18:57] *** Quits: tripfandango (~tripfanda@77.137.77.22) (Ping timeout: 240 seconds)
[02:21:25] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[02:27:45] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[02:29:30] *** Quits: specbot (~specbot@common-lisp.net) (Remote host closed the connection)
[02:29:30] *** Quits: minion (~minion@common-lisp.net) (Read error: Connection reset by peer)
[02:29:51] *** Joins: specbot (~specbot@common-lisp.net)
[02:30:33] *** Joins: minion (~minion@common-lisp.net)
[02:31:22] *** Quits: mattf (~mattf@li908-138.members.linode.com) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[02:33:17] *** Joins: mattf (~mattf@li908-138.members.linode.com)
[02:35:08] *** Quits: xiews (~xiews@101.88.37.70) (Read error: Connection reset by peer)
[02:35:26] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[02:38:07] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[02:45:56] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[02:46:10] *** Joins: livoreno (~livoreno@user/notzmv)
[02:59:15] *** Quits: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:04:22] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[03:05:46] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 260 seconds)
[03:05:59] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[03:09:17] *** Quits: hashfunc107e (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 240 seconds)
[03:19:31] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[03:19:43] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:8151:9b0d:b8cd:32c4)
[03:19:43] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:8151:9b0d:b8cd:32c4) (Changing host)
[03:19:43] *** Joins: skapata (~Skapata@user/skapata)
[03:19:55] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[03:20:42] *** Quits: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net) (Ping timeout: 250 seconds)
[03:22:43] *** Joins: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net)
[03:29:17] *** Quits: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[03:34:15] *** Quits: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[03:34:42] *** Joins: mange (~user@user/mange)
[03:37:55] *** Quits: coolbeans (~rak@cpe-174-100-58-126.neo.res.rr.com) (Ping timeout: 256 seconds)
[03:40:49] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 268 seconds)
[03:48:47] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:b4bf:6568:e1a6:6cf5)
[03:49:37] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 240 seconds)
[03:52:58] *** Quits: eugercek (~user@user/eugercek) (Read error: Connection reset by peer)
[03:53:14] *** Joins: eugercek (~user@user/eugercek)
[03:53:46] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:b4bf:6568:e1a6:6cf5) (Ping timeout: 268 seconds)
[03:55:14] *** Quits: eugercek (~user@user/eugercek) (Read error: Connection reset by peer)
[04:04:30] *** Joins: livoreno (~livoreno@user/notzmv)
[04:10:42] <kagevf> prokhor__: yes, it's old
[04:10:51] <kagevf> drakonis: yes, it comes with CCL
[04:11:09] <drakonis> a very old version.
[04:11:34] *** Joins: TonyStone31 (~TonyStone@2603-7080-8607-c36a-d912-8cca-9865-b723.res6.spectrum.com)
[04:12:25] <kagevf> yeah ... I do most of my lisping on linux, so for Windows I came across lisp box (I had known about it from before) and it worked so I occasionly use it
[04:13:06] <kagevf> I've never used portacle, and have heard conflicting things about it
[04:13:30] <kagevf> if you're on linux, I would try just setting things up yourself ... 
[04:13:51] <drakonis> conflicting things such as?
[04:13:53] <kagevf> maybe use something like guix or nix if you run into trouble with versioning issues
[04:14:12] <drakonis> portacle is fine though
[04:14:26] <drakonis> could use some maintaining though
[04:14:29] <kagevf> drakonis: that it works great, highly recommended vs the opposite of that
[04:14:42] <kagevf> yeah, and I think it's not being maintained anymore either ...
[04:15:02] <drakonis> it does work reasonably well anyways
[04:15:57] <drakonis> its sufficiently up to date for most things
[04:16:23] <kagevf> that's good
[04:16:56] <kagevf> when I had issues with sbcl + nyxt + emacs getting them setup with guix resolved the versioning issues
[04:17:16] <drakonis> well, yeah.
[04:17:31] <drakonis> its quite good at that
[04:17:36] <drakonis> the very best.
[04:18:41] <kagevf> nix seems to have more mindshare? but guix came later and they could avoid some mistakes ... but I've never used nix, guix worked fine for me
[04:19:01] <drakonis> nix has it, for the time being
[04:19:11] <drakonis> since you can't predict the future
[04:19:19] <kagevf> nope
[04:19:52] <kagevf> like that guix uses scheme ... so familiar configuration language is good 
[04:19:58] <kagevf> *I like
[04:20:08] <drakonis> it is true, yes.
[04:20:18] <drakonis> the user APIs are also quite clean
[04:20:26] <drakonis> never pop the hood open though :v
[04:20:38] <kagevf> hehe I haven't either :)
[04:21:07] <drakonis> i've been going through it to make my own in CL
[04:28:50] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 260 seconds)
[04:28:59] *** Quits: TonyStone31 (~TonyStone@2603-7080-8607-c36a-d912-8cca-9865-b723.res6.spectrum.com) (Quit: Leaving)
[04:35:43] *** Quits: mtreis (~mtreis@ip68-9-89-162.ri.ri.cox.net) (Ping timeout: 256 seconds)
[04:36:34] <kagevf> drakonis: your own guix configuration?
[04:36:47] <drakonis> no, my own implementation of the idea but in CL
[04:37:16] *** Joins: mtreis (~mtreis@ip68-9-89-162.ri.ri.cox.net)
[04:38:49] <drakonis> there are places i find that both guix and nix falls short
[04:39:12] <drakonis> and places either fall short, as well as the ones where guix improves on nix
[04:39:39] <holycow> what would those be in your opinion?
[04:39:43] <drakonis> but instead finds new ways where it does worse
[04:40:26] <drakonis> basically, nix has its own bespoke language and it is entirely written in c++, so it has a very low bus factor
[04:40:33] <drakonis> both of these are dealt with by guix, in a way.
[04:40:42] <drakonis> guix by itself is very strongly structured
[04:40:50] <drakonis> its a bit rigid
[04:40:54] <holycow> aha
[04:41:02] <holycow> thx, interesting
[04:41:21] <drakonis> at this point it might not make any huge changes
[04:42:10] <drakonis> i want to bring in CL's amorphous flexibility to something like it
[04:43:44] <drakonis> guix is very good though
[04:44:38] <drakonis> but engaging in large, sweeping, changes to it might as well require rewriting from scratch
[04:44:42] <drakonis> so why not do it in CL
[04:44:53] <drakonis> might be nice for learning the lang too
[04:46:11] <drakonis> scheme is very nice but all implementations are mutually incompatible in subtle ways unless you restrict yourself to subsets of the language
[04:55:14] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[04:55:53] <holycow> that was actually my thought as well
[04:56:17] *** Quits: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net) (Client Quit)
[04:56:42] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:b4bf:6568:e1a6:6cf5)
[04:57:37] <holycow> at some point i may go through the linux from scratch project again and see if i can write my own primitive boot loader, display manager and package manager in cl just for kicks
[04:58:20] <holycow> oh and an init system
[05:01:24] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:b4bf:6568:e1a6:6cf5) (Ping timeout: 240 seconds)
[05:12:18] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[05:12:52] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[05:13:21] *** Joins: artemon (~artemon@2001:470:69fc:105::87c)
[05:14:21] *** Quits: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net) (Client Quit)
[05:15:24] *** Quits: joev (~joev@user/joev) (Ping timeout: 240 seconds)
[05:15:57] *** Joins: joev (~joev@user/joev)
[05:20:38] <holycow> at least just to see what the most primitive version of each subsystem might look like
[05:23:03] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[05:24:05] *** Quits: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net) (Client Quit)
[05:27:59] *** Joins: ahungry (~user@c-68-51-134-46.hsd1.mi.comcast.net)
[05:39:57] *** Joins: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net)
[05:45:00] *** Quits: joev (~joev@user/joev) (Ping timeout: 250 seconds)
[05:46:18] *** Joins: joev (~joev@user/joev)
[05:49:28] *** Quits: cedb (~ced@user/ouestbillie) (Quit: WeeChat 3.4)
[05:50:54] *** Joins: cedb (~ced@user/ouestbillie)
[05:55:57] *** Quits: ahungry (~user@c-68-51-134-46.hsd1.mi.comcast.net) (Remote host closed the connection)
[05:57:10] *** Joins: ahungry (~user@c-68-51-134-46.hsd1.mi.comcast.net)
[05:57:37] *** Quits: joev (~joev@user/joev) (Ping timeout: 256 seconds)
[05:58:37] *** Joins: joev (~joev@user/joev)
[05:59:48] *** Quits: theruran (uid11305@id-11305.hampstead.irccloud.com) (Ping timeout: 240 seconds)
[06:00:21] *** Joins: theruran (uid11305@id-11305.hampstead.irccloud.com)
[06:00:35] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[06:00:52] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[06:04:32] *** Quits: msk (~Thunderbi@89.205.124.39) (Ping timeout: 240 seconds)
[06:05:37] *** Joins: livoreno (~livoreno@user/notzmv)
[06:06:32] *** Joins: msk (~Thunderbi@89.205.124.40)
[06:12:35] *** Joins: Akiva (~Akiva@user/Akiva)
[06:18:52] *** Joins: Inline__ (~Inline@p200300cd471026001e3cab216ce28c3c.dip0.t-ipconnect.de)
[06:21:20] *** Quits: radu242407821 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Read error: Connection reset by peer)
[06:21:24] *** Quits: Inline (~Inline@p200300cd470c380061a83d28f03bd1ae.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[06:34:14] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:b4bf:6568:e1a6:6cf5)
[06:38:44] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:b4bf:6568:e1a6:6cf5) (Ping timeout: 250 seconds)
[06:58:36] *** Quits: silasfox (~sbv@p4fe8dfb9.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[07:00:20] *** Joins: nwoob (~apple@2405:201:5c18:58a6:fdf4:2dc5:2c49:8a65)
[07:00:38] *** Joins: silasfox (~sbv@p200300cec714ca00956ec169de307dfd.dip0.t-ipconnect.de)
[07:03:37] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[07:04:56] *** Quits: nwoob (~apple@2405:201:5c18:58a6:fdf4:2dc5:2c49:8a65) (Ping timeout: 245 seconds)
[07:11:11] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[07:18:41] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 245 seconds)
[07:21:53] <epony> I heard you'd like users too.. no standards?
[07:22:50] <epony> (the performance battle you can't win)
[07:23:15] <epony> holyshit ;-)
[07:36:36] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[07:40:58] *** Joins: mtm- (~mtm@c-73-27-62-116.hsd1.fl.comcast.net)
[07:41:00] *** Quits: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net) (Ping timeout: 240 seconds)
[07:41:20] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[07:42:09] *** Quits: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[07:45:39] <sthalik> you could rewrite portage in CL
[07:45:54] <sthalik> it's in dire need of a faster dependency algorithm
[07:49:00] *** Joins: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net)
[08:00:02] <sthalik> a NIH package declaration specification has been done to death, it's a waste of time IMO
[08:01:03] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[08:01:14] <sthalik> with regard to distros, resurrecting some llvm/musl distro would at least have some limited, non-educational value
[08:02:31] <sthalik> and a greenspunned lisp reader would be better for bootstrapping the distro
[08:02:45] <sthalik> not to mention installing from a limited, or cross environment
[08:02:53] <sthalik> than a real lisp environment
[08:22:39] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:b4bf:6568:e1a6:6cf5)
[08:26:57] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:b4bf:6568:e1a6:6cf5) (Ping timeout: 240 seconds)
[08:28:18] *** Quits: ahungry (~user@c-68-51-134-46.hsd1.mi.comcast.net) (Remote host closed the connection)
[08:30:42] <gjvc> what package managers use sqlite as their data storage mechanism?
[08:31:10] <gjvc> actually, forget it i'll ask on #linux
[08:36:27] *** Joins: nwoob (~apple@49.36.239.255)
[08:37:22] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[09:06:58] *** Joins: xiews (~xiews@124.77.94.254)
[09:15:53] *** Quits: geoffhill (~geoffhill@174-21-77-129.tukw.qwest.net) (Quit: geoffhill)
[09:18:06] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 272 seconds)
[09:19:06] <energizer> is there a term for expressions that evaluate to themselves under quotation
[09:19:38] <energizer> like numbers and stuff
[09:21:17] <moon-child> 'self-evaluating'?
[09:22:54] <energizer> idk, is that it?
[09:26:09] <energizer> those always seemed weird to me, why do they exist?
[09:26:39] <energizer> why isnt (quote 2) just (quote 2)
[09:28:03] <White_Flame> if they're under quotation, then they're not evaluated
[09:29:33] <energizer> idgi
[09:29:53] <energizer> > (quote 2)
[09:29:53] <energizer> 2
[09:29:53] <energizer> > (quote list)
[09:29:53] <energizer> 'list
[09:30:01] <energizer> those are very different
[09:33:07] <moon-child> I do not follow
[09:33:13] <moon-child> (quote 2) evaluates to the number 2
[09:33:27] <moon-child> and (quote list) evaluates to the symbol named "LIST"
[09:33:57] <energizer> why doesn't (quote 2) evaluate to the symbol named "2"
[09:34:28] <moon-child> because 2 _reads_ as the number two
[09:34:36] <moon-child> err, "2" reads as the number two
[09:34:44] <moon-child> and "list" reads as the symbol named "LIST"
[09:35:23] <energizer> yeah why that
[09:36:13] <moon-child> because that is considered more convenient than the alternatives
[09:37:08] <moon-child> would you rather write (+ (*) (*)) in place of 2?
[09:37:21] <moon-child> or write |LIST| rather than list (and have no meaning assigned to the latter)?
[09:40:53] <energizer> i'm saying i like the list behavior more than the 2 behavior
[09:42:10] <energizer> "2" -[read]-> symbol named "2" -[eval]-> number 2
[09:42:14] <energizer> is what i want
[09:43:06] <energizer> (in this storyline)
[09:44:24] <moon-child> you want the symbol 2 to evaluate to the number 2?
[09:44:27] <moon-child> I find that highly irregular
[09:44:40] <moon-child> what if I write (let ((2 "a")) 2)?
[09:44:58] <moon-child> if this is legal, it should evaluate to "a"
[09:45:03] <energizer> yes
[09:45:41] <energizer> highly regular, behaves just like any other name
[09:45:46] <White_Flame> then how do you represent the value 2?
[09:46:16] <energizer> that's what the symbol 2 evaluates to
[09:46:38] <White_Flame> you do know that you'll have an unbounded number of symbols
[09:46:40] <energizer> do you mean something specific by represent
[09:46:41] <moon-child> but I thought we just established that the symbol 2 can also evaluate to a bound value which is not the number 2
[09:46:48] <moon-child> as in (let ((2 "a")) 2)
[09:46:49] <White_Flame> right
[09:46:56] *** Joins: hashfunc528 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[09:46:57] <moon-child> so which is it?
[09:47:01] <White_Flame> this is like redefining numbers in fortran or whatever language that was
[09:47:31] <moon-child> or do you want (defconstant 0 (+)) (defconstant 1 (1+ 0)) (defconstant 2 (1+ 1)) (defconstant 3 (1+ 2)) ;...
[09:47:33] <moon-child> ?
[09:47:42] <moon-child> White_Flame: smalltalk?
[09:47:45] <moon-child> or java?
[09:47:47] <moon-child> or python?
[09:48:06] <energizer> in python 2 you could redefine True
[09:48:11] <White_Flame> where you can do 1 = 3, and how everytime you have 1 in your source code its' actaully the numeric value 3
[09:50:06] <White_Flame> that as far as I can tell is the only use of naming the numbers with a number-appearing label that is not actually its value
[09:52:43] <energizer> these comments about how many interned symbols you have and whether it's confusing to allow redefinition of numbers seem like pragmatic HCI comments
[09:53:37] <White_Flame> the main question is what would be the use/benefit of that feature?
[09:53:43] <moon-child> as a human, I would find it very confusing to interact with a computer in the way you suggest, and far less confusing to do so in the way I currently do
[09:53:53] <moon-child> I don't think that's pragmatic so much as sensible
[09:54:27] <White_Flame> (setf 2 #c(0 -1))
[09:54:36] <energizer> there is something nice about `read` returning a tree of Expression values, not intermixed with other types of things
[09:54:54] <White_Flame> so "abc" should also be a symbol whose value is created to be the string "abc"?
[09:54:58] <moon-child> ^
[09:55:11] <White_Flame> but still, 2 is an "Expression value" isn't it?
[09:55:14] <moon-child> ^
[09:55:18] <White_Flame> as a number, not some stand-in
[09:55:27] * moon-child hands White_Flame a syntax object
[09:55:29] <moon-child> ;)
[09:55:30] <energizer> i'm not sold on the whole string thing anyway so i'll just skip that one for now
[09:55:40] <White_Flame> what about the parens themselves?
[09:56:01] <energizer> now we're getting somewhere :)
[09:56:09] <White_Flame> it almost sounds like you're talking about a lexer more than the full expression semantics
[09:56:51] <moon-child> also consider how this interacts with macros
[09:57:02] <energizer> <<2 is an "Expression value" >> how's that?
[09:57:22] <moon-child> even if a string such as "2" reads to a symbol, it is very convenient to be able to build a number at compile time and make it to be evaluated
[09:57:32] <moon-child> hence it is sensible to say that numbers are self-evaluating
[09:57:35] <White_Flame> and at least Cl does have the limited notion of "token" at a lexing layer
[09:57:48] <moon-child> else you would have to add additional quotes
[09:57:49] <White_Flame> within the READing step
[10:00:53] <energizer> there are a lot of steps in "compile time"
[10:05:26] <energizer> i think my basic view is that lisps aren't lispy enough
[10:06:34] <moon-child> in order to make such a statement, you need to define what it is you mean by 'lispy' and explain why it's valuable
[10:07:41] <energizer> if `read` were written haskell it would return SExpr
[10:07:45] <White_Flame> and again. there are languages that do exactly this with numbers, and nobody has ever used this feature for any useful purpose
[10:08:17] <White_Flame> READ doesn't just read code
[10:08:35] <White_Flame> and the symbol A to be evaluated is also a Form, though not an s-expression
[10:09:22] <energizer> are you talking common lisp here?
[10:09:41] <White_Flame> that's been true since original LISP
[10:10:22] <White_Flame> an s-expression is (<op> . <params>), but Atoms are also evaluable forms
[10:11:08] <moon-child> well, in the original lisp there were only conses and symbols
[10:11:14] <White_Flame> yep
[10:11:23] <moon-child> strings were represented by lists of 'characters'
[10:11:30] <White_Flame> but this particular notion still existed
[10:11:33] <White_Flame> symbols were evaluable
[10:11:44] <White_Flame> as well as s-expressions
[10:12:05] <aap> actually which lisp was the first to have strings? i know multics maclisp did
[10:12:08] <White_Flame> so no, it doesn't make sense that READ woudl return an s-expression for code, and even less so for data not intended to be executed as code
[10:13:14] <energizer> ah right 
[10:14:01] <White_Flame> and for more modern lisps, READ will return anything that has a literal representation for, as well as reader macro results and #. read-time evaluation in CL
[10:15:34] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[10:15:52] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[10:16:59] <energizer> suppose i have a collection of Expr = Symbol | Cons and i want to put the symbol 2 into it so i go to add '2 and it's like "sorry dude that's a number"
[10:17:54] <moon-child> that is an indication that your choice of definition for Expr was wrong
[10:18:03] <moon-child> does this help?  eval :: Expr -> Expr
[10:18:43] <moon-child> (or, perhaps, eval :: Env -> Expr -> Expr; whatever)
[10:18:52] <energizer> yeah i guess it does
[10:19:05] <energizer> help
[10:21:18] <energizer> i assume you know this post http://calculist.org/blog/2012/04/17/homoiconicity-isnt-the-point/
[10:22:56] <energizer> eh i need to think more
[10:23:53] <energizer> no
[10:23:57] <energizer> here's the argument
[10:24:02] <White_Flame> READ is not the point at all.  Textual source code is barely meaningful, the list data structures are
[10:24:49] <White_Flame> this author really has no clue about what lisp does or is
[10:25:01] <White_Flame> because he's too used to languages being syntax heavy, it seems
[10:26:13] <energizer> having a step that's barely meaningful is what i want. where there's only symbol and cons
[10:26:25] <energizer> i know you said nobody's ever made use of it
[10:26:26] <White_Flame> his 2nd to last sentence, after the "but" describes the advantage of homoiconicity, then denies it in the last one
[10:26:58] <White_Flame> the last one is basically a complete non sequitur
[10:28:56] <energizer> do you have a good reference on what "homoiconicity" means
[10:29:13] <White_Flame> does it need a reference?  the code has a data representation
[10:29:20] <White_Flame> not just syntactically, but as a datastructure
[10:29:33] <White_Flame> (a b c) is a 3-element list, which is also immediately usable as code
[10:29:45] <energizer> all syntaxes can be represented in a data structure
[10:29:49] <White_Flame> (assuming a context that defines A as some operation, and B and C as values)
[10:30:00] <White_Flame> this isn't about syntax
[10:30:04] <White_Flame> it's about it being literally a list
[10:30:17] <White_Flame> there's no special datastructure allocated for ASTs, code, etc
[10:30:20] <White_Flame> it's all just data
[10:30:26] <White_Flame> at a semantic, visible, manipulable level
[10:30:35] <energizer> is python homoiconic?
[10:30:40] <White_Flame> of course not
[10:30:51] <White_Flame> what data structure is `foo = 3`?
[10:30:52] <moon-child> as energizer says.  My take is that homoiconicity derives from an _immediate_, _obvious_ datastructure corresponding to code.  There is nothing wrong with  if (foo) { bar }  evaluating to an IfExpression with some slots, and some languages (scala, I think?) have quoting, but IfExpressions are not immediate or obvious
[10:31:10] <moon-child> err,  "if (foo) { bar }"  reading as an IfExpression, which evaluates to whatever it evaluates to
[10:31:27] <moon-child> (and in particular, it is no different from (2 3) evaluating to a cons, or #C(7 4) evaluating to a complex)
[10:31:30] <energizer> what data structure is `(define foo 3)`
[10:31:33] <White_Flame> a list
[10:31:38] <White_Flame> of 2 symbols and a number
[10:32:01] <moon-child> gahh, s/evaluating/reading/ again
[10:32:04] <White_Flame> noe
[10:32:10] <White_Flame> oh, in yours, sure ;)
[10:32:37] <moon-child> yeah, I'm polite enough not to say 'gahh' when correcting other people's mistakes :)
[10:32:48] <energizer> `foo = 3` is an ast.Expr 
[10:33:04] <White_Flame> how does one get an ast.Expr?
[10:33:13] <energizer> ast.parse(...)
[10:33:33] <White_Flame> but `foo = 3` has no indication that it is an ast.Expr
[10:33:54] <White_Flame> it's a string in source code, but it is not the representation of any data structure, and is not enterable on python's repl as such
[10:34:23] <White_Flame> you use the string "foo = 3" as data to a particular call
[10:34:40] <White_Flame> as opposed to (defvar foo 3) being a list itself
[10:35:02] <energizer> (er it's a ast.Assign)
[10:35:36] <White_Flame> (defvar foo 3) exists as data itself before being interpreted as code
[10:36:10] <energizer> when?
[10:36:20] <Posterdati> hi
[10:36:20] <White_Flame> before EVAL
[10:36:32] <energizer> and after what
[10:36:39] <Posterdati> gsll, antik and cffi still broken for freebsd and openbsd :(
[10:36:41] <White_Flame> lists are manifested in many ways, either READ, or generated in macros, or generated at runtime for saving or compiling
[10:36:50] <White_Flame> they're just normail everyday lists
[10:37:32] <White_Flame> any way that you generate _data_ is equivalent to generating code
[10:37:52] <White_Flame> and all the tools for manipulating data are appliacble to code
[10:38:20] <Alfr> (not all data corresponds to valid code)
[10:38:25] <White_Flame> correct
[10:38:38] <White_Flame> but the _ways_ to generate data are the same ways you generate code
[10:39:03] <White_Flame> READ doesn't do anything special when reading code vs reading data.  It's just plain lists, numbers, symbols, etc
[10:39:44] <White_Flame> all just normal values
[10:39:56] <energizer> moon-child: "immediate"?
[10:41:04] <White_Flame> the manifestation of the input is immediately those datastructures, without making construction calls
[10:41:24] <White_Flame> without the input being instructions to call construction calls, etc
[10:41:31] *** Quits: mange (~user@user/mange) (Ping timeout: 256 seconds)
[10:42:23] <White_Flame> for instance, hashtables in CL are not immediately (or I guess "literally") expressable datastructures, but code isn't constructed of hashtables either, so that doesn't affect homiconicity
[10:42:53] <Alfr> energizer, if you have CL, try: (first (read-from-string "(defvar foo 3 (a list within))")))     ; second, third as well
[10:43:22] <energizer> Alfr: i have racket and elisp at hand
[10:44:06] <Alfr> energizer, it's only to illustrate that read does indeed give you a list.
[10:44:38] <Alfr> (or an atom)
[10:50:48] <energizer> somebody has to call the list constructor in order for read-from-string to return a list
[10:52:23] <White_Flame> yes, you the user don't, inasmuch as you don't call a list/array constructor when entering [1,2,3] into some other language to instantiate a list/array
[10:52:46] <White_Flame> as opposed to makeArray(3).add(1).add(2).add(3) or whatever
[10:52:50] <Alfr> energizer, read does, upon encountering a left-paren in the input stream it calls the reader macro associated with #\( .
[10:53:28] <energizer> Alfr: are you agreeing with that blog post?
[10:54:53] <Alfr> energizer, I'm not certain what the author is actually trying to say.
[10:56:29] <energizer> the argument, aiui, is that the power of lisp comes from its ability to implement `read` effectively which comes from the pairedness of parens
[10:56:38] <energizer> providing natural delimiters
[10:56:50] <energizer> and that "homoiconicity" doesn't mean anything
[10:57:03] <White_Flame> (and that's beyond a silly conclusion, and wrong to boot.  lisp rarely cares abotu the string format of the source code)
[10:57:09] <holycow> that seems wrong
[10:57:21] <holycow> all languages depend on delimiters
[10:57:26] <holycow> i don't know a single one taht doesn't have it
[10:57:49] <holycow> isn't it truly dependent on prefix notiation that enable homoiconicity and all the other features by default?
[10:57:51] <White_Flame> well, polish notation is all about removing specific grouping delimiters
[10:58:29] <jackdaniel> 1 2 + 4 +
[10:58:31] <Alfr> energizer, I don't think that's what makes lisps interesting (for me); and I don't agree.
[10:58:38] <White_Flame> or + 4 + 2 1 for forward polish notation
[10:59:08] <energizer> "Parentheses make it unambiguous for the expander to understand what the arguments to a macro are, because it’s always clear where the arguments begin and end"
[10:59:13] <White_Flame> Alfr: the author clearly says in the beginning of the article that he has no clue what he's talking about anyway
[10:59:22] <jackdaniel> White_Flame: yes, but then you need to "process from the end" (that's why the reverse notation while quite coutnerintuitive in fact makes much more sense if you think in terms of the stack)
[10:59:27] <holycow> sure but you can get teh same thing with white space
[10:59:36] <holycow> or any arbitrary set of delimiters
[10:59:43] <holycow> the complexity isn't the delimiter its the syntax rules
[10:59:45] <jackdaniel> and parens enable non-ambiguous processing with forward notation
[10:59:53] <White_Flame> energizer: why do you believe that article has any merit?
[11:00:19] <Alfr> energizer, essentially, being able to use basic tools of the language (list operations for lisp) to manipulate programs is what I think makes it interesting.
[11:00:41] <jackdaniel> I've always liked funny quotes on the internet - that's what make it interesting :)
[11:00:44] <White_Flame> jackdaniel: I did a forward polish notation scripting language in actionscript or something years back.  It was the simplest recursive descent parser ever
[11:00:45] <jackdaniel> i.e lambda fortune cookies
[11:00:50] <energizer> Alfr: python has this too, with the ast module, yes?
[11:01:05] <White_Flame> erm, not even parser, but recursive descent evaluator
[11:01:36] <energizer> as do all languages that can parse and evaluate their own ast
[11:01:42] <White_Flame> energizer: python source doesn't generate ast instances
[11:01:49] <White_Flame> the python AST library can be used to create them
[11:01:53] <Alfr> energizer, and everyone knowing python can use it without learning more about it?
[11:02:07] <energizer> i'm not sure what that means White_Flame 
[11:02:11] <jackdaniel> White_Flame: probably depends on the actual semantics, but "1 2 3 * 4 5 6 +" is not ambiguous while "+ 6 5 4 * 3 2 1" could be if you don't process it from the end
[11:02:19] <White_Flame> or at least, what the python source reads at (which aren't the core, syntactially supported, immediate literal datastructures) is never exposed to the user afaik
[11:02:19] <holycow> i mean all the syntax heavy languages, if you count up all the special notiation they use in a typical piece of code, if you squint they all all end up having the same number of delimiters as a piece of lisp code
[11:02:55] <White_Flame> holycow: more, if you count the commas and end-of-statement delimiters
[11:02:55] <holycow> in lisp it only looks funny because the delimiters are just parens and they tend to group up at the end.
[11:03:03] <holycow> *nod*
[11:03:16] <energizer> holycow: lots of languages have operator precedence
[11:03:16] <White_Flame> foo(1,2);  vs (foo 1 2)
[11:03:19] <jackdaniel> well, having the reader syntax to be a list makes it certainly easier to write macros
[11:03:56] <jackdaniel> i.e (list* 'foo 1 2) instead of (make-op 'foo :args '(1 2))
[11:03:58] <White_Flame> right, you don' thave some separate AST api to manipulate AST objects, you just have lists, symbols, etc "normal" data
[11:04:36] <holycow> i kind of think as lisp as insight into how to describe the universe in a regular syntax not so much a programming language.  what makes it a programming language is the incidence of the compilers being able to do nifty things because the syntax is regular
[11:05:09] <White_Flame> energizer: you should learn prolog, too, for another slightly more complex example of homoiconicity
[11:05:12] <holycow> kind of like apl is an insight into doing the same only using arrays
[11:05:32] <White_Flame> the simplicity of lisp makes some of these concepts harder to see
[11:05:41] <jackdaniel> but to be honest even primitive evaluators that depend on parens look to me more lispy than dylan (despite the latter is arguably a better common lisp with a different syntax)
[11:06:00] <ecraven> prefix-dylan!
[11:06:22] <jackdaniel> when I see dylan I have immediate thought - c++ (and not - lisp)
[11:06:32] <ecraven> sometimes I ponder an alternate future where that has stayed around.... (though probably that future would not be much different than this one ;)
[11:06:47] <energizer> "<White_Flame> right, you don' thave some separate AST api to manipulate AST objects, you just have lists, symbols, etc "normal" data" is this your definition of homoiconicity?
[11:07:03] <White_Flame> yes, and moon-child's
[11:07:15] <White_Flame> or at least, that's a big portion of it
[11:07:44] <White_Flame> remember, it' snot just about reading source code text, but also repl interaction, and runtime programmatic code generation
[11:07:56] <White_Flame> and especailly code transformation
[11:08:31] <White_Flame> source code in lisp is not viewed as text, but as forms/lists/etc
[11:08:52] <White_Flame> so the "syntax" of lisp is about what's in those lists, not what characters are laid out in a .lisp file
[11:08:56] <energizer> that's a different argument^^^
[11:09:02] *** Joins: KvL (~KvL@user/KvL)
[11:09:07] <White_Flame> right, which is why I said that's a portion of it
[11:09:11] <White_Flame> this it he other portion
[11:09:18] <White_Flame> this is the other portion
[11:09:23] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:b4bf:6568:e1a6:6cf5)
[11:09:34] <White_Flame> and frankly, the more important portion
[11:09:50] <White_Flame> but it's all holistic
[11:10:45] <White_Flame> you simply cannot programmatically generate from data, or manipulate, python ast objects as easily as you can do so with lisp source code
[11:11:19] <White_Flame> and macros take huge advantage of that
[11:11:25] <energizer> in python there is eval(repr(v)) == v for a lot of v. however, repr(eval(s)) != s for most code s
[11:11:49] <White_Flame> that's just eval, not generating/manipulating the S and V themselves
[11:12:02] <White_Flame> before you eval it
[11:12:47] <energizer> well i can put a parse(s) call in there but that doesnt seem particularly important
[11:15:09] <energizer> oh i should've said parse instead of eval actually
[11:15:25] <energizer> in lisp repr(parse(s)) == s for all s
[11:15:37] <energizer> not so in python
[11:18:02] <Alfr> energizer, try: (pprint (read-from-string "#.(asin 2)"))
[11:18:49] <energizer> Alfr: which language?
[11:18:59] <Alfr> energizer, still CL.
[11:19:03] <energizer> dont have
[11:20:52] <energizer> what does it return
[11:21:37] <Alfr> energizer, a complex number.
[11:22:01] <energizer> what's the nixpkgs derivation called?
[11:22:50] <Alfr> energizer, well, it doesn't return anything, as it's pprint; but does print it.
[11:23:45] <energizer> what does it print?
[11:24:48] <energizer> ok i found an interpreter called ecl
[11:24:58] <energizer> > (pprint (read-from-string "#.(asin 2)"))
[11:24:59] <energizer> #C(1.5707964 1.316958)
[11:25:15] <energizer> well that's invalidated my hypothesis then
[11:25:28] <jackdaniel> ecl is not an interpreter
[11:25:41] <energizer> well repl then
[11:25:42] <jackdaniel> it is a compiler
[11:26:00] <jackdaniel> ah, well, all cl implementations I'm aware of provide the repl
[11:26:29] <energizer> yeah i just didnt know how to install cl and that's what i ended up with
[11:26:36] <jackdaniel> (and that is not certain whether an implementation without repl could be called common lisp)
[11:26:43] <jackdaniel> I see
[11:29:11] <energizer> ok well i'm back to being confused about what homoiconicity is
[11:30:16] <energizer> moon-child's explanation is straightforward but hardly seems fundamental
[11:31:09] <energizer> is IfExpression(...) *less* homoiconic than Expr('if, ...)
[11:32:10] <energizer> oh
[11:32:19] <energizer> it's that there's no tag for expression
[11:32:22] *** Joins: piotrts (~piotrts@188.147.99.42.nat.umts.dynamic.t-mobile.pl)
[11:33:02] <energizer> (list 'expr 'if ...) vs (list 'if ...)
[11:34:32] *** Quits: hashfunc528 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Remote host closed the connection)
[11:36:23] <energizer> anyway, thanks for the interesting chat
[11:37:36] <moon-child> energizer: you are right.  It is not fundamental.  It is not scientific, or mathematical.  It is soft, and fuzzy
[11:38:21] <energizer> ok
[11:39:24] *** Quits: hiredman (~hiredman@frontier1.downey.family) (Ping timeout: 240 seconds)
[11:40:16] *** Joins: hiredman (~hiredman@frontier1.downey.family)
[11:40:28] <White_Flame> energizer: even above, you're still just talking about parse, repr, and eval, not actually _doing_ any manipulation on the AST objects themselves
[11:40:42] <White_Flame> that's where homoiconicity comes into play the strongest
[11:40:42] *** Joins: eugercek (~user@user/eugercek)
[11:41:34] <moon-child> yes, but we can imagine a language with 'quote if (foo) { bar }'
[11:41:37] <White_Flame> and generating the AST objects is not from parse("string"), but rather constructing elements from scratch.  In python, I presume that would be a bunch of AST constructor calls, where as in lisp you just use normal list construction things
[11:42:19] <White_Flame> especially in CL where backquote lets you effectively templatize lists
[11:42:25] *** Joins: hashfuncb70 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[11:42:32] <moon-child> that languages with  if (foo) { bar }  did not bother with quote is significant, but also somewhat incidental
[11:42:45] *** Quits: inky (~inky@46.36.119.211) (Ping timeout: 256 seconds)
[11:43:22] <energizer> julia has those
[11:43:38] *** Joins: inky (~inky@46.162.228.180)
[11:43:48] <Alfr> energizer, something like (progn (defmacro shift-args ((f &rest args)) (cons f (append (rest args) (list (first args))))) (macroexpand '(shift-args (+ 1 2 3)))) is why I consider simple code manipulation, what most here homoiconicity, important.
[11:44:19] <Alfr> s/most here/most here call/
[11:45:00] <White_Flame> or even generating `(let ,(mapcar (lambda (var) `(,var 1) '(a b c)) ,@body) to construct structural forms for you
[11:45:19] <White_Flame> (oh, messed up a paren nesting there, oh well)
[11:46:07] <White_Flame> that generates (let ((a 1) (b 1) (c 1)) ..body), if it's unfamiliar, and can generate any number of LET bindings given a list of variables 
[11:47:37] <Alfr> (Oh dear, I'm not handling the no arguments case correctly.)
[11:48:55] <White_Flame> I don't have to say that those are let bindings (compared to creating an object of type ast.lexicalVarDeclaration or whatever), the compiler figures that out from its placement.  This is source code in non-textual, list form
[11:49:23] <White_Flame> and thus are not encumbered with manually specifying the semantics
[11:54:59] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[11:58:31] *** Joins: random-nick (~random-ni@87.116.176.196)
[12:02:41] *** Joins: inky_ (~inky@46.162.228.180)
[12:02:43] *** Quits: inky (~inky@46.162.228.180) (Remote host closed the connection)
[12:12:03] *** Joins: mogan90 (~mogan90@132.140.7.93.rev.sfr.net)
[12:23:08] <pjb> moon-child: that's because languages using syntaxes such as if(foo){bar;} describe code, not data.  Remember that S-expressions are for data!
[12:24:08] <pjb> quote become useful when you take data and interpret it as code (eval form).  Then you want a quote to indicate what subform is literal data, vs. code.
[12:24:48] <pjb> note also that in M-expression there are no quote: literal data is written as S-expression subexpressions in M-expressions.
[12:25:35] <pjb> if[equal[a;(A B C)];print(EQUAL);print(a)]   vs.  (if (equal a (quote (a b c))) (print (quote equal)) (print a))
[12:30:35] *** Quits: piotrts (~piotrts@188.147.99.42.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 256 seconds)
[12:30:42] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[12:30:59] *** Joins: lisp123 (~lisp123@120.154.103.52)
[12:33:13] <energizer> pjb: what does it mean that languages describe code not data? many langauges have data literals
[12:33:43] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[12:33:50] <White_Flame> they don't have data literals for "a = 1"
[12:34:12] <energizer> julia> :(a = 1)
[12:34:13] <energizer> :(a = 1)
[12:34:13] *** Joins: amb007 (~a_bakic@76.151.22.93.rev.sfr.net)
[12:34:31] <White_Flame> right, julia has some measure of homoiconicity, depending on how such is manipulated
[12:35:20] <White_Flame> especially as it takes a lot of inspiration from lisp afaik
[12:35:59] <energizer> yes. the frontend is actually written in a schemelike
[12:36:12] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[12:36:19] <White_Flame> but what is :(a = 1)?
[12:36:40] <energizer> Expr(:=, [:a, 1])
[12:36:49] <White_Flame> eg, what's its datatype and the operations you perform on them?  are they specific to AST and contextual with code usage, or are they just naked data?
[12:36:53] <pjb> energizer: yes, but the question is whether the data literal syntax is powerful enough to encode code in it.
[12:37:22] <White_Flame> so is Expr(.., ..) basically like a prolog compound, as a data with an arbitrary nametag?
[12:37:23] <pjb> energizer: try to write int main(int argc,char** argv){printf("Hello %s!\n",argv[1]);return 0;} in C literals.
[12:37:44] <energizer> idk prolog
[12:37:45] <pjb> energizer: already, since data literals in C must be typed, you will have problem writing random code in them…
[12:38:22] <White_Flame> and idk julia :)
[12:38:48] *** Quits: lisp123 (~lisp123@120.154.103.52) (Quit: Leaving...)
[12:38:48] <pjb> energizer: you may compare with Ruby, which has a data literal syntax powerful enough. The only quirck in Ruby, is that identifiers must be represented by symbols which are written with a prefix colon:  print("Hello") --> [:print,["Hello]]
[12:39:01] <energizer> White_Flame: https://bpa.st/UE4A
[12:39:24] *** Quits: KvL (~KvL@user/KvL) (Ping timeout: 240 seconds)
[12:39:31] <White_Flame> oh, those look like typed objects
[12:39:57] <pjb> energizer: so, if you want to encode print([:print,["Hello"]]) you will have to distinguish :print = print from [:quote,:print] = :print ;-)
[12:40:25] <energizer> White_Flame: those are all the types
[12:40:32] <White_Flame> yea, and stuff like linenumbernode, etc
[12:40:42] <White_Flame> this isn't at the level of source code that lisp is
[12:40:51] <White_Flame> where it's just and only the source code
[12:40:54] *** Joins: KvL (~KvL@user/KvL)
[12:41:10] <White_Flame> not parsed into semantic containers, just the structure of the source code itself
[12:41:33] *** Joins: lisp123 (~lisp123@120.154.103.52)
[12:41:49] <White_Flame> (if p foo else bar end) seems like it should at some level just be a list/array of 6 symbols
[12:42:36] <White_Flame> for instance, the "else" isn't anywhere in the tree representation it seems, so that's already processed away from its source code form
[12:42:46] *** Joins: admich (~user@ip-129-52.sn-213-198.clouditalia.com)
[12:43:35] <moon-child> pjb: if (foo) { bar }  is not inherently less data-ish than  (if foo bar)
[12:43:36] <White_Flame> the source code is what the human uses to communicate; this has left that form
[12:43:37] <pjb> Well, it depends:  (if p foo bar baz else quux quack end) --> (if p (progn foo bar baz) (progn (quux quack)))  so only 3 children (4-element list).
[12:43:38] *** Quits: amb007 (~a_bakic@76.151.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[12:44:01] <White_Flame> pjb: I mean in terms of julia source code
[12:44:01] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[12:44:07] <pjb> moon-child: it's the C grammar that says that  if (foo) { bar }  is not data-ish.
[12:44:26] <pjb> I don't know julia. Does it have a rich syntax for literal data?
[12:44:28] <moon-child> I'm not talking about c specifically
[12:44:48] <White_Flame> pjb: just looking a tthe link from energizer
[12:45:02] <moon-child> I can imagine a language in which  if (foo) { bar }  corresponds to a datum in the same way that  (if foo bar)  corresponds to a datum
[12:45:06] <moon-child> in lisp
[12:45:19] <pjb> Oh, so it seems in julia, : behaves like quote?
[12:45:24] <energizer> yeah
[12:45:33] <energizer> well quasiquote really
[12:45:44] <White_Flame> well, it parses AST stuff from what follows it.  Not sure if it's synonymous with quote?
[12:45:48] <pjb> with some parsing performed.
[12:45:55] <moon-child> pjb: see also 'sweet expressions' (iirc? might've been called something else) in some version of scheme that let you write infix (cf '5 + 6') and get the same result as if you had written (+ 5 6)
[12:46:01] <moon-child> pjb: lisp also performs parsing.  it is no different
[12:46:04] <pjb> White_Flame: yes, it's a little like macroexpand :-)
[12:46:22] <White_Flame> but quote doesn't parse at all
[12:46:34] <pjb> A lot of languages are like that, with non-elementary non-orthogonal operators…
[12:46:44] <White_Flame> energizer: so what would ::(if p foo else bar end) do?
[12:46:44] <moon-child> White_Flame: I mean, reading
[12:46:46] <pjb> Yes, lisp separates the operations.
[12:46:54] <moon-child> is effectively parsing
[12:46:55] <White_Flame> quoting the quote operation
[12:47:19] <moon-child> quoting is a _runtime_ operation.  _At runtime_, (quote (+ 5 6)) evaluates to (+ 5 6)
[12:47:21] <White_Flame> or :(:( ...))
[12:47:27] <energizer> https://bpa.st/QJMQ
[12:47:46] <White_Flame> ah, ok
[12:48:11] <White_Flame> hmm, that still interprets the IF
[12:48:19] <White_Flame> so you can't rearrange what's inside that easily
[12:48:27] <White_Flame> eg, making the "else" meaningful etc
[12:49:15] <White_Flame> or, let's say, you have :(foo else bar), and throw :(if p ... end) around it
[12:49:47] <White_Flame> programmatically
[12:49:53] <energizer> :(foo else bar) won't parse
[12:50:06] <White_Flame> right
[12:50:12] <White_Flame> but you also can't have it as _data_
[12:50:22] <White_Flame> because it's not just data.  It's only ever for parsed code
[12:50:28] <moon-child> no more than  '(foo bar  will parse in lisp
[12:50:35] <moon-child> it is exactly the same situation
[12:50:44] <moon-child> lisp just happens to be _more convenient_ to manipulate
[12:50:47] <White_Flame> well, not really.
[12:51:03] <White_Flame> this is more like (quote 1 2)
[12:51:10] <White_Flame> or just (1 2 3)
[12:51:24] <White_Flame> it's coherent legal data, but not usable as code
[12:51:53] <White_Flame> you seemingly can't have snippets of julia source as data
[12:51:54] <moon-child> not all types of data are readable
[12:52:05] <White_Flame> I'm not talkinga botu readable.  We're way past the read phase
[12:52:05] <moon-child> this is true in lisp as well as julia (I assume)
[12:52:08] <White_Flame> this is about the sexpr source code
[12:52:24] <White_Flame> the datastructures holding that which will be taken as code
[12:52:56] <moon-child> right.  julia's data structures are more restrictive and less general than lisp's.  But it is a difference of degree, not kind
[12:53:00] <White_Flame> if it can't just be data (without being parsed into code semantics), then that's definitely a hole
[12:53:11] <White_Flame> somewhat
[12:53:13] <moon-child> you _could_ represent lists using  'if car then cdr'
[12:53:34] *** Joins: piotrts (~piotrts@188.147.99.42.nat.umts.dynamic.t-mobile.pl)
[12:53:34] <White_Flame> meaning what?  a run of 4 symbols sequentially in the code?
[12:54:44] <moon-child> I don't know julia.  I assume that source code such as  "if X else Y"  reads to an object with slots for X and Y; hence, such an object could be used to represent a cons, using the X-slot for the car and the Y-slot for the cdr
[12:55:14] <moon-child> then you would write  if 1 then if 2 then if 3 then nil  to represent the same list that you would write as (1 2 3) in lisp
[12:55:40] <White_Flame> that woudl be ... odd, but yes ;)
[12:56:07] <White_Flame> use code to represent data, instead of using data to represent code
[12:58:07] *** Quits: piotrts (~piotrts@188.147.99.42.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 256 seconds)
[12:59:46] *** Joins: shka (~herr@109.231.3.55)
[13:00:06] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[13:00:29] *** Joins: Alfr (~Alfr@user/alfr)
[13:00:38] *** Quits: hashfuncb70 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Remote host closed the connection)
[13:10:36] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:b4bf:6568:e1a6:6cf5) (Ping timeout: 240 seconds)
[13:22:38] *** Quits: nwoob (~apple@49.36.239.255) (Read error: No route to host)
[13:23:19] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[13:24:51] *** Joins: lisp123 (~lisp123@120.154.103.52)
[13:29:17] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 240 seconds)
[13:31:45] *** Quits: Rue (~rue@2001-b011-1000-17ff-0191-633b-7286-36db.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[13:33:23] *** Joins: tripfandango (~tripfanda@2a02:6680:2107:3cb7:24a8:e5d7:8f58:c0d8)
[13:40:19] *** Joins: lisp123 (~lisp123@120.154.103.52)
[13:41:21] *** Joins: nwoob (~apple@49.36.239.255)
[13:47:13] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[13:47:46] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[13:47:57] *** Quits: xiews (~xiews@124.77.94.254) (Ping timeout: 256 seconds)
[13:53:58] *** Joins: johnjaye (~pi@173.209.64.74)
[13:57:41] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[14:01:12] *** Quits: joev (~joev@user/joev) (Ping timeout: 272 seconds)
[14:01:56] *** Joins: joev (~joev@user/joev)
[14:12:52] *** Quits: inky_ (~inky@46.162.228.180) (Ping timeout: 250 seconds)
[14:13:52] *** Joins: mdhughes_ (~mdhughes@user/mdhughes)
[14:14:09] *** Joins: inky_ (~inky@31.7.162.99)
[14:14:46] *** Quits: inky_ (~inky@31.7.162.99) (Remote host closed the connection)
[14:14:54] *** Joins: Guest2 (~Guest2@2001:ce8:131:5f61:e103:cf94:5e10:2214)
[14:15:09] *** Quits: joev (~joev@user/joev) (Ping timeout: 256 seconds)
[14:15:36] *** Joins: inky_ (~inky@5.77.254.89)
[14:15:47] *** Quits: Guest2 (~Guest2@2001:ce8:131:5f61:e103:cf94:5e10:2214) (Client Quit)
[14:16:15] *** Joins: joev (~joev@user/joev)
[14:17:37] *** Quits: mdhughes (~mdhughes@user/mdhughes) (Ping timeout: 240 seconds)
[14:22:31] *** Quits: inky_ (~inky@5.77.254.89) (Ping timeout: 256 seconds)
[14:23:02] *** Joins: inky_ (~inky@46.162.228.180)
[14:36:18] *** Joins: lisp123 (~lisp123@120.154.103.52)
[14:41:02] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 250 seconds)
[14:54:27] *** Joins: Tallund16 (~Tallund@cbl-24-104-171-134.yyz.frontiernetworks.ca)
[14:54:31] *** Quits: nwoob (~apple@49.36.239.255) (Read error: No route to host)
[14:55:24] *** Quits: mogan90 (~mogan90@132.140.7.93.rev.sfr.net) (Ping timeout: 240 seconds)
[14:56:04] *** Quits: Tallund16 (~Tallund@cbl-24-104-171-134.yyz.frontiernetworks.ca) (Client Quit)
[14:57:21] *** Quits: v88m (~Xiro@109-252-170-8.dynamic.spd-mgts.ru) (Ping timeout: 256 seconds)
[15:05:57] *** Joins: nwoob (~apple@49.36.239.255)
[15:08:12] *** Quits: hiredman (~hiredman@frontier1.downey.family) (Ping timeout: 240 seconds)
[15:10:21] *** Joins: hiredman (~hiredman@frontier1.downey.family)
[15:25:53] *** mdhughes_ is now known as mdhughes
[15:29:41] *** Joins: v88m (~Xiro@213.87.89.22)
[15:34:29] *** Quits: mtm- (~mtm@c-73-27-62-116.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[15:34:35] *** Quits: nwoob (~apple@49.36.239.255) (Read error: Connection reset by peer)
[15:35:46] *** Quits: KvL (~KvL@user/KvL) (Ping timeout: 245 seconds)
[15:36:46] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[15:40:15] *** Joins: xiews (~xiews@101.88.37.70)
[15:44:25] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[15:48:36] *** Quits: v88m (~Xiro@213.87.89.22) (Ping timeout: 240 seconds)
[15:48:56] *** Joins: v88m (~Xiro@213.87.133.114)
[15:51:39] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[15:59:06] *** Quits: v88m (~Xiro@213.87.133.114) (Ping timeout: 245 seconds)
[16:00:46] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[16:04:42] *** Quits: admich (~user@ip-129-52.sn-213-198.clouditalia.com) (Ping timeout: 272 seconds)
[16:12:29] *** Joins: mogan90 (~mogan90@132.140.7.93.rev.sfr.net)
[16:25:19] *** Joins: Sheilong (uid293653@2a03:5180:f:3::4:7b15)
[16:34:11] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:8da:5468:d39:d983)
[16:34:11] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:8da:5468:d39:d983) (Changing host)
[16:34:11] *** Joins: skapata (~Skapata@user/skapata)
[16:50:01] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[16:52:31] *** Quits: danieli (~danieli@user/danieli) (Quit: Alpine Linux, the security-oriented, lightweight Linux distribution)
[16:53:24] *** Joins: danieli (~danieli@user/danieli)
[16:55:21] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[17:21:55] *** Quits: Inline__ (~Inline@p200300cd471026001e3cab216ce28c3c.dip0.t-ipconnect.de) (Quit: Leaving)
[17:26:24] *** Joins: Inline (~Inline@p200300cd471026001e3cab216ce28c3c.dip0.t-ipconnect.de)
[17:29:02] *** Joins: X-Scale` (~ARM@135.232.28.37.rev.vodafone.pt)
[17:30:55] *** Quits: X-Scale (~ARM@83.223.250.236) (Ping timeout: 256 seconds)
[17:30:55] *** X-Scale` is now known as X-Scale
[17:31:52] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[17:36:49] *** Joins: strajder (~strajder@user/strajder)
[17:40:11] *** Joins: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net)
[17:40:17] *** Joins: agumonke` (~user@2a01:e0a:8f9:d3e0:b117:81a8:33f6:93e7)
[17:48:08] *** Joins: admich (~user@ip-129-52.sn-213-198.clouditalia.com)
[17:52:11] *** Joins: gproto23 (~gproto23@user/gproto23)
[17:52:21] *** Joins: vcarvalho (~vcarvalho@bl20-114-170.dsl.telepac.pt)
[17:52:31] *** Joins: gproto23_ (~gproto23@user/gproto23)
[17:53:44] *** Quits: vcarvalho (~vcarvalho@bl20-114-170.dsl.telepac.pt) (Client Quit)
[17:55:37] *** Quits: tripfandango (~tripfanda@2a02:6680:2107:3cb7:24a8:e5d7:8f58:c0d8) (Ping timeout: 256 seconds)
[17:57:12] *** Quits: admich (~user@ip-129-52.sn-213-198.clouditalia.com) (Read error: Connection reset by peer)
[18:08:36] *** Quits: agumonke` (~user@2a01:e0a:8f9:d3e0:b117:81a8:33f6:93e7) (Ping timeout: 240 seconds)
[18:09:02] *** Joins: agumonke` (~user@88.163.231.79)
[18:12:33] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[18:22:40] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[18:23:01] *** Joins: greyrat_ (~greyrat@ip202.ip-51-178-215.eu)
[18:23:26] *** Joins: zachel_ (~zachel@user/zachel)
[18:24:04] *** Joins: luna-is-here_ (~quassel@2a02:908:f761:2a3c::a)
[18:25:11] *** Joins: cross_ (~cross@spitfire.i.gajendra.net)
[18:25:17] *** Joins: aeth_ (~aeth@user/aeth)
[18:25:24] *** Joins: cods_ (~fred@82-65-232-44.subs.proxad.net)
[18:25:37] *** Joins: joev1 (~joev@user/joev)
[18:25:38] *** Joins: ult_ (~lamer@107.170.37.27)
[18:25:40] *** Joins: ryanbw1 (~ryanbw@mab.sdf.org)
[18:25:47] *** Joins: rdrg109_ (~rdrg109@user/rdrg109)
[18:25:50] *** Joins: ft_ (~ft@shell.chaostreff-dortmund.de)
[18:25:58] *** Server sets mode: +nt 
[18:26:35] *** Joins: cdegroot (~quassel@209.5.238.85)
[18:29:52] *** Quits: agumonke` (~user@88.163.231.79) (*.net *.split)
[18:29:52] *** Quits: X-Scale (~ARM@135.232.28.37.rev.vodafone.pt) (*.net *.split)
[18:29:52] *** Quits: joev (~joev@user/joev) (*.net *.split)
[18:29:52] *** Quits: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net) (*.net *.split)
[18:29:52] *** Quits: mtreis (~mtreis@ip68-9-89-162.ri.ri.cox.net) (*.net *.split)
[18:29:52] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (*.net *.split)
[18:29:52] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (*.net *.split)
[18:29:52] *** Quits: dextaa (~DV@user/dextaa) (*.net *.split)
[18:29:52] *** Quits: prokhor__ (~prokhor@46-22-24-242-dynamic-cpe.cust.swissbackbone.net) (*.net *.split)
[18:29:52] *** Quits: ryanbw (~ryanbw@mab.sdf.org) (*.net *.split)
[18:29:52] *** Quits: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt) (*.net *.split)
[18:29:52] *** Quits: cross (~cross@spitfire.i.gajendra.net) (*.net *.split)
[18:29:52] *** Quits: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net) (*.net *.split)
[18:29:52] *** Quits: abraham (~abraham@143.244.185.86) (*.net *.split)
[18:29:53] *** Quits: flynn (~mcbloch@user/flynn) (*.net *.split)
[18:29:53] *** Quits: prokhor (~Prokhor@46-22-24-242-dynamic-cpe.cust.swissbackbone.net) (*.net *.split)
[18:29:53] *** Quits: seabre (~seabre@user/seabre) (*.net *.split)
[18:29:53] *** Quits: luna-is-here (~quassel@ip-095-223-058-048.um35.pools.vodafone-ip.de) (*.net *.split)
[18:29:53] *** Quits: zachel (~zachel@user/zachel) (*.net *.split)
[18:29:53] *** Quits: phantomics (~phantomic@97-118-157-121.hlrn.qwest.net) (*.net *.split)
[18:29:53] *** Quits: cods (~fred@82-65-232-44.subs.proxad.net) (*.net *.split)
[18:29:53] *** Quits: jrjsmrtn (~jrjsmrtn@ip-83-134-41-224.dsl.scarlet.be) (*.net *.split)
[18:29:53] *** Quits: acolarh (~niels@3e6be663.rev.stofanet.dk) (*.net *.split)
[18:29:53] *** Quits: aeth (~aeth@user/aeth) (*.net *.split)
[18:29:53] *** Quits: beagles (~beagles@47.55.222.129) (*.net *.split)
[18:29:53] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (*.net *.split)
[18:29:53] *** Quits: ft (~ft@shell.chaostreff-dortmund.de) (*.net *.split)
[18:29:53] *** Quits: bmansurov (~bmansurov@mansurov.org) (*.net *.split)
[18:29:53] *** Quits: ult (~lamer@107.170.37.27) (*.net *.split)
[18:29:53] *** Quits: koolazer (~koo@user/koolazer) (*.net *.split)
[18:29:53] *** X-Scale` is now known as X-Scale
[18:29:53] *** Lord_of_Life_ is now known as Lord_of_Life
[18:29:53] *** hineios3 is now known as hineios
[18:29:54] *** dextaa4 is now known as dextaa
[18:29:57] *** flynn4 is now known as flynn
[18:29:57] *** abraham2 is now known as abraham
[18:29:57] *** ft_ is now known as ft
[18:30:34] *** Joins: prokhor (~prokhor@2a02:1368:6400:f200:79d4:3ae4:f337:e349)
[18:36:38] *** Joins: acolarh (~niels@3e6be663.rev.stofanet.dk)
[18:37:03] *** Joins: koolazer (~koo@user/koolazer)
[18:37:24] *** Joins: phantomics (~phantomic@97-118-157-121.hlrn.qwest.net)
[18:38:17] *** Joins: beagles (~beagles@47.55.222.129)
[18:38:41] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 256 seconds)
[18:40:28] *** mister_m` is now known as mister_m
[18:42:05] *** Joins: agumonke` (~user@88.163.231.79)
[18:42:05] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:b18d:7d35:8009:5de7)
[18:46:12] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:b18d:7d35:8009:5de7) (Ping timeout: 240 seconds)
[18:48:22] *** Quits: cdegroot (~quassel@209.5.238.85) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:50:17] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[18:50:17] *** Quits: gproto23_ (~gproto23@user/gproto23) (Remote host closed the connection)
[18:51:40] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[19:05:48] *** Quits: silasfox (~sbv@p200300cec714ca00956ec169de307dfd.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[19:06:05] *** Joins: silasfox (~sbv@p548d1235.dip0.t-ipconnect.de)
[19:07:20] *** Joins: lisp123 (~lisp123@120.154.103.52)
[19:09:10] *** Joins: kaisyu (uid37155@id-37155.ilkley.irccloud.com)
[19:11:36] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 252 seconds)
[19:21:39] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[19:24:45] *** Joins: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net)
[19:27:14] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:b18d:7d35:8009:5de7)
[19:28:43] *** Quits: admich (~user@ip-129-52.sn-213-198.clouditalia.com) (Remote host closed the connection)
[19:33:55] *** Quits: holycow (~rtaylor@69-172-184-139.cable.teksavvy.com) (Quit: Lost terminal)
[19:40:57] *** Joins: mtm- (~mtm@c-73-27-62-116.hsd1.fl.comcast.net)
[19:41:35] *** Quits: CATS (~apic@brezn2.muc.ccc.de) (Quit: Reconnecting)
[19:41:54] *** Joins: CATS (apic@brezn3.muc.ccc.de)
[19:42:23] *** Quits: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[19:58:22] *** Joins: jeosol (~jeosol@user/jeosol)
[20:06:46] *** ghost4096 is now known as pranshukhandal
[20:08:37] *** Joins: mtreis (~mtreis@ip68-9-89-162.ri.ri.cox.net)
[20:10:33] *** Joins: nwoob (~apple@2405:201:5c18:58a6:4c7e:6b3f:b47c:42eb)
[20:19:20] *** cross_ is now known as cross
[20:30:17] *** Quits: mogan90 (~mogan90@132.140.7.93.rev.sfr.net) (Ping timeout: 240 seconds)
[20:33:15] *** ryanbw1 is now known as ryanbw
[20:39:58] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[20:41:48] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[20:41:53] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[20:45:11] *** Joins: ajnulo (~ajnulo@2a02:3102:4cc5:fffd:bd3:1db6:a16d:5acd)
[20:53:07] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:b18d:7d35:8009:5de7) (Ping timeout: 268 seconds)
[20:54:38] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:78e4:4a4a:7713:ccc3)
[20:57:54] *** Joins: [deleted] (~livoreno@user/notzmv)
[20:59:20] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 250 seconds)
[21:02:17] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Ping timeout: 256 seconds)
[21:02:59] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[21:05:59] *** Quits: nwoob (~apple@2405:201:5c18:58a6:4c7e:6b3f:b47c:42eb) (Ping timeout: 252 seconds)
[21:16:38] *** Quits: ajnulo (~ajnulo@2a02:3102:4cc5:fffd:bd3:1db6:a16d:5acd) (Remote host closed the connection)
[21:17:53] *** Quits: joev1 (~joev@user/joev) (Ping timeout: 256 seconds)
[21:18:55] *** Quits: kaisyu (uid37155@id-37155.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[21:18:57] *** Joins: joev1 (~joev@user/joev)
[21:29:28] *** Quits: Techcable (~Techcable@168.235.93.147) (Remote host closed the connection)
[21:31:17] *** Joins: Techcable (~Techcable@168.235.93.147)
[21:31:46] *** Quits: Inline (~Inline@p200300cd471026001e3cab216ce28c3c.dip0.t-ipconnect.de) (Quit: Leaving)
[21:34:11] *** Joins: Inline (~Inline@p200300cd471026001e3cab216ce28c3c.dip0.t-ipconnect.de)
[21:39:17] *** Quits: [deleted] (~livoreno@user/notzmv) (Quit: Quit)
[21:39:34] *** Joins: livoreno (~livoreno@user/notzmv)
[21:41:09] *** Quits: jello_pudding (~jello_pud@2601:600:9f81:24e0::eede) (Ping timeout: 256 seconds)
[21:41:41] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[21:41:46] *** Joins: notzmv (~zmv@user/notzmv)
[21:52:54] *** Joins: jello_pudding (~jello_pud@2601:600:9f81:24e0::bd51)
[21:56:21] *** Joins: Brucio-61 (~Brucio-19@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[21:56:41] *** Quits: inky_ (~inky@46.162.228.180) (Ping timeout: 256 seconds)
[21:57:00] *** Joins: v88m (~Xiro@109-252-170-8.dynamic.spd-mgts.ru)
[21:57:03] *** Joins: inky_ (~inky@46.36.114.138)
[21:57:15] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:78e4:4a4a:7713:ccc3) (Ping timeout: 268 seconds)
[21:59:01] *** Joins: tripfandango (~tripfanda@77.137.71.199)
[22:07:08] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[22:07:17] *** Joins: galex-713 (~quassel@galex-713.eu)
[22:27:57] *** Quits: joev1 (~joev@user/joev) (Ping timeout: 240 seconds)
[22:29:16] *** Joins: joev1 (~joev@user/joev)
[22:42:11] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[22:43:39] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[22:46:57] *** Joins: mksybr (mksybr@tilde.team)
[23:08:34] *** Joins: santiagopim (~user@90.167.66.93)
[23:14:37] *** Quits: aeth_ (~aeth@user/aeth) (Ping timeout: 240 seconds)
[23:16:29] *** Joins: aeth (~aeth@user/aeth)
[23:19:55] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Ping timeout: 240 seconds)
[23:21:08] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[23:21:44] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[23:22:52] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:23:41] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[23:25:38] *** Lord_of_Life_ is now known as Lord_of_Life
[23:33:48] *** Quits: gjvc (~gjvc@user/gjvc) (Quit: leaving)
[23:34:07] *** Joins: gjvc (~gjvc@user/gjvc)
[23:38:44] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Remote host closed the connection)
[23:39:05] *** Joins: lispy (~lispy@user/lispy)
[23:39:09] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[23:40:23] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[23:52:03] *** Joins: casmajavi (~casmajavi@user/casmajavi)
[23:56:40] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[23:57:21] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
