[00:00:49] <vms14> nunum egresso scribe.
[00:01:13] <vms14> unum*
[00:02:28] * hayley reads traces from global value numbering and it looks okay. So the GVN application code is wrong.
[00:32:01] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 252 seconds)
[00:35:12] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[00:38:33] <hayley> I just decided to not handle something, which shouldn't even happen based on some loose reasoning about the GVN transfer and confluence functions, and now the output looks okay. Sure.
[00:47:58] *** Joins: rogersm (~rogersm@90.166.177.48)
[00:53:35] <hayley> gilberth: More pretty printing from #sicl: <https://i.imgur.com/l6jXOSU.png>
[00:54:22] *** Joins: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de)
[00:54:22] *** ChanServ sets mode: +o MichaelRaskin
[01:03:56] * moon-child hisses at vt100
[01:04:15] <hayley> Well, he already tested in CLIM too.
[01:06:10] * hayley bored, runs (SICL-BOOT:BOOT) with untested global value numbering pass
[01:06:41] <hayley> It hasn't exploded yet, and it's already compiled a bunch of crap, so how broken can it be?
[01:07:13] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 252 seconds)
[01:07:19] *** Quits: rogersm (~rogersm@90.166.177.48) (Quit: Leaving...)
[01:07:44] <moon-child> does it run faster now?
[01:08:18] <hayley> I don't think so.
[01:08:56] <hayley> Bootstrapping makes compiling counter-productive, since most code isn't really used during bootstrapping, and when it is, it's not used that much.
[01:14:14] <hayley> Currently I've disabled everything past HIR, since I know that I generate the wrong storage classes and thus anything with raw integers and floats will be wrong.
[01:15:41] <hayley> moon-child: 142.5 seconds with simple alias removal, 156.6 seconds with GVN
[01:16:49] <hayley> https://www.youtube.com/watch?v=mEBRzrYKifU
[01:16:50] -ixelp- Thank God It's Not Christmas - YouTube
[01:42:56] <hayley> Does anyone know if email servers retry sending mail if the other server went down?
[01:43:47] <hayley> https://serverfault.com/questions/117906/what-happens-when-a-mail-server-goes-down suggests it depends on config.
[01:47:34] <moon-child> you mean like if you have multiple mx records
[01:47:42] <moon-child> ?
[01:47:45] <moon-child> I think so
[01:48:33] <hayley> I only have one.
[01:49:30] <moon-child> ah so trying again after timeout?  I think they usually do that too
[01:49:45] <hayley> Right.
[01:49:45] <moon-child> delay up to maybe low-mid 10s of hours?  Forget
[02:02:39] *** Joins: lagash (lagash@lagash.shelltalk.net)
[02:06:10] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[02:43:22] *** Joins: notzmv (~zmv@user/notzmv)
[02:44:49] <mfiano> I'm in deep over my head with tty syscalls. Simple question
[02:45:19] *** Quits: random-nick_ (~random-ni@87.116.160.199) (Ping timeout: 250 seconds)
[02:45:56] <mfiano> I'm basically getting the name of the tty my program is running in with something like: char *name = ttyname(fileno(stdin)); from Lisp.
[02:46:14] <mfiano> I then call open() on that to get a file descriptor.
[02:47:20] <mfiano> I tried running this from two different terminal windows. The first is /dev/pts/6 with fd 4, and the second is /dev/pts/3 with fd 4. Does it make sense that two different tty's have the same stream?
[02:48:06] <moon-child> sure
[02:48:14] <moon-child> say I open two terminals
[02:48:18] <moon-child> in the first, stdout has fd 1
[02:48:22] <moon-child> in the second, stdout also has fd 1
[02:49:41] <mfiano> I guess I'm a bit confused, because the fileno(stdin) gives me 0 as expected.
[02:49:41] <moon-child> (but obviously stdout is not the same stream in both)
[02:49:59] <moon-child> it's not the same stream
[02:50:20] <moon-child> the resources accessed through fds are global (ofc), but the values of those fds are process-local
[02:50:51] <mfiano> I'll take your word for it.
[02:51:54] <moon-child> you can think of it as, the kernel has a mapping from  pid * fd -> resources
[02:52:14] <moon-child> so  pid X * fd 4 -> /dev/pts/6,  but  pid Y * fd 4 -> /dev/pts/3
[02:53:10] <mfiano> I'm just confused why no matter which terminal I open, the result is fd 4
[02:54:47] <moon-child> probably 012 are taken for in/out/err, 3 gets used for something, so 4 is the next available fd
[02:55:14] <mfiano> How can I see what is using 3
[02:55:15] <mfiano> ?
[02:55:41] <moon-child> something in /proc maybe?
[02:56:08] <mfiano> I think that's Linux only
[02:56:39] <moon-child> there's a freebsd version of it
[02:56:51] <Catie> It doesn't list the file descriptors
[02:57:08] <moon-child> (freebsd also implements the linux version of proc, if you want it; mount -t linprocfs /some/where)
[02:58:11] <Catie> I think the usual path is /compat/linux/proc/
[02:59:55] <moon-child> if you're using the linux-c7-etc stuff then yeah put it there; but if not then no reason to
[03:00:19] <Catie> Right, it's not a requirement
[03:03:03] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[03:15:49] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[03:16:15] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[03:23:51] <hayley> https://twitter.com/againstutopia/status/1469272620411629578 "Cats in Middle Ages" vs "Cats Now"
[03:27:57] <hayley> "In order to verify the reported violation, we'll need you to provide the message links where the malicious link is posted. There are instructions on how to gather those links here." But the malware I'm reporting wasn't posted on Discord! How the fuck do I report it then.
[03:32:48] <hayley> If this is how they handle authentication stealing malware, no wonder everyone believes any rumor that goes around about malware.
[03:35:15] <moon-child> if it wasn't being distributed via discord, why should they care about it?  What might they do about it?  It's not like obfuscating credentials is a particularly tenable solution
[03:36:41] <hayley> idk, it's their userbase being stolen from. Probably would help to reset logins for everyone affected.
[03:36:51] <moon-child> good point
[03:37:16] <hayley> In a perfect world, they'd set up a filter that detects the sort of message being sent on their webhook by PirateStealer, and flags them for inspection.
[03:37:42] <hayley> Not perfect, but it prevents the most skiddiest of skids.
[03:39:25] <White_Flame> so, not much of a privacy advocate, are you? :-P
[03:40:13] <hayley> idk, I don't think being able to steal authentication tokens is very good for privacy either.
[03:40:45] <hayley> And they already scan images; Discord AI thought one of my memes was porn or something.
[03:41:03] * hayley uploaded an image: (206KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/SJToUQMFDkFrjQBbAVMHooQw/average-egoist-telekommunist.jpeg >
[03:44:21] <moon-child> bah!  Email filtering only seems like it works because of how heavily email is centralised
[03:44:34] <moon-child> I still don't know under what circumstances microsoft considers my emails to be spam
[03:44:50] <hayley> Do you run your own email server?
[03:44:54] <moon-child> yes
[03:45:10] <hayley> There's a whole lot of bullshit around authentication with that, but I didn't do it and still I've gotten important emails out. 
[03:45:13] <moon-child> discord can take care of the bottom 2-5% reliably and easily, sure.  And probably that's worthwhile.  But it's not very much, and past that risk:reward becomes annoying
[03:45:50] <hayley> Richard Jones from kent.ac.uk, itch.io support (which actually is competent), and Cliff Click on gmail.com. 
[03:46:23] <moon-child> google mail seems to accept me fairly reliably.  But I had an email to a prospective landlord land in spam
[03:47:17] <hayley> The other thing is that it's just stupid to put your stolen tokens back on Discord, idk why someone thought that was a good idea.
[03:47:30] <hayley> If it doesn't touch Discord again, they couldn't filter it.
[03:49:24] <hayley> Though, if they did send it somewhere else, I would be sending a hell of a lot more than yiff. And I'd do it faster as Discord rate limits webhooks.
[03:53:26] *** Quits: vms14 (~user@45.red-83-47-205.dynamicip.rima-tde.net) (Remote host closed the connection)
[04:04:26] *** Quits: djuber (~user@65.79.128.64) (Ping timeout: 256 seconds)
[05:12:32] *** Quits: Catie (~user@user/catie) (Quit: Going home)
[06:03:11] <gilberth> hayley: I still don't see variable width fonts there.
[06:16:22] *** Joins: Catie (~user@user/catie)
[06:19:41] <hayley> gilberth: That is a VT100, no variable width fonts. There was a demo in CLIM, and another with cl-pdf, which were variable width.
[06:21:10] <hayley> Okay, Discord finally started an investigation, 18 days later. 
[06:22:23] <gilberth> Doesn't McCLIM have a PDF backend?
[06:22:47] <hayley> Never tried it.
[06:23:38] <hayley> Well, mail server is out due to "planned maintenance" with an unplanned length, global value numbering nearly works, and Discord staff finally started an investigation. 
[06:23:56] <gilberth> Well.
[06:24:57] <hayley> I guess 18 days late is better than never?
[06:25:32] <hayley> Quite likely that they've ditched and moved to another set of accounts, another webhook, channels, etc, etc, if they're at least not as dumb with operational security.
[06:28:11] <hayley> "Well, you're welcome, I guess."
[06:35:11] * hayley has a working global value numbering pass, but gets errors because she messed with the compiler to remove irrelevant stuff in the IR.
[06:39:12] <hayley> Well, it happily bootstrapped before, now it won't.
[06:40:32] *** Quits: Catie (~user@user/catie) (Quit: something's)
[06:40:36] <gilberth> hayley: I have my s-expression data type: <http://clim.rocks/gilbert/rust-take-1.rs.txt>
[06:42:02] <hayley> Oh dear.
[06:42:41] <gilberth> It entails quite some noise. Foremost I wonder, if I really have to say Arc::clone(&x) each time I use a value. My red herring was that I said enum Node { Cons: Cons(Q,Q), ... } initially and struggled to implement rplaca with that. I believe it's not possible without a struct in between.
[06:42:56] * hayley still wonders how confluence and all ends up in a situation, wherein an output pool has 33 locations, but the following input pool has 4.
[06:44:40] <gilberth> And I wonder if I could use "async" to implement CATCH/THROW. Otherwise I would need to return a completion data type with each function invoked.
[06:45:15] <hayley> I don't think you can do that with async, no.
[06:45:55] <gilberth> Good. A completion data type it then is. Fun!
[06:46:33] <hayley> I also better check out why there's 19 empty equivalence sets stored. Think I should GC them.
[06:48:05] <gilberth> May I cheat and implement everything in one big loop? With my own call stack? Somehow I feel that would be the sanest.
[06:48:39] <hayley> Don't see why not.
[06:49:21] <gilberth> The question is: may I, not whether I could.
[06:51:23] <gilberth> But then, I could specify a virtual machine and byte code right away. I could have pointers as integers and do my own GC. But that won't be Rust anymore.
[06:52:15] <gilberth> It would show the true power of Rust though.
[06:53:27] <hayley> ERROR while evaluating compile-time side effect: The assertion (CLEAVIR-GLOBAL-VALUE-NUMBERING::SIMILAR #1=(CLEAVIR-GLOBAL-VALUE-NUMBERING::INPUT-POOL CLEAVIR-GLOBAL-VALUE-NUMBERING::INSTRUCTION) CLEAVIR-GLOBAL-VALUE-NUMBERING::CONFLUENCE) failed with #1# = #<{}>, CLEAVIR-GLOBAL-VALUE-NUMBERING::CONFLUENCE = #<{}>.
[06:53:30] <gilberth> Or: When Knuth gets away with just having a big array of memory words, so can I.
[06:53:32] <hayley> Dammit, those are similar.
[06:55:06] * hayley re-reads
[06:55:11] <hayley> This function never returns T.
[06:55:35] <hayley> Rather, the last form is MAPC which works if the list isn't empty, but only by coincedence. lol
[07:05:06] <hayley> Oh, I wrote UNLESS instead of WHEN. Classic.
[07:12:31] * hayley waits for SICL to bootstrap, and wonders what a DSL which lets you specify object representations and/or pointer tagging would look like. 
[07:13:34] <hayley> e.g. a fixnum might be xxxxx....0, a cons cell xxxx....10, an object xxxx....11. It'd be nice to jot those down and generate instruction sequences to box and unbox, rather than crap them everywhere like in the SICL source code so far.
[07:16:04] <hayley> Well, time to test with HIR-to-MIR and MIR-to-LIR now. I know my register allocation code simply cannot work with uses before definitions, so I'll get to find out if my hunch about lifetimes is not not wrong.
[07:18:08] <hayley> It's wrong then.
[07:19:17] <gilberth> At this point I really wonder, if Rust is meant serious. Sorry, I personally cannot take it serious. It begins with the books being written my children with "Let's do this!" and "Woot!" and "BAM!" all over the place.
[07:19:34] <hayley> And ironically the lossage occurs in a file I wrote with generic functions for hash tables.
[07:28:37] <hayley> https://arxiv.org/abs/2110.01098 
[07:29:16] <hayley> "Does the Bronze Garbage Collector Make Rust Easier to Use? A Controlled Experiment" A: yes?
[07:30:40] <gilberth> The 300% productivity increase is impressive, but no surprise.
[07:31:35] <gilberth> But it's good for the climate, right? Sorry, milady, I cannot take this prank called Rust any serious anymore.
[07:32:23] <gilberth> This language is designed to reduce productivity right from the beginning. It must have been the foremost design goal.
[07:32:41] <hayley> Seems like it.
[07:33:09] <gilberth> I just wonder: Why?
[07:33:59] <gilberth> What's the agenda? Is there an agenda?
[07:34:16] <hayley> According to the paper, the number of participants who couldn't do the aliasing problem halved when they could use GC.
[07:34:59] <gilberth> Ah. What was the problem? Nah, I could read that paper by myself. I am bored anyway.
[07:35:39] <hayley> “Learning rust ownership is like navigating a maze where the walls are made of asbestos and frustration, and the maze has no exit, and every time you hit a dead end you get an aneurysm and die.” 
[07:36:46] <gilberth> Sounds even worse than nethack.
[07:37:37] <gilberth> So Rust is a game? A challenge? One that you can't win?
[07:38:38] <gilberth> But yes, see how we struggled yesterday. Three experienced hackers. Ok, I am a Rust noob, granted.
[07:38:45] <kakuhen> my favorite part of rust is the absurd type tetris you have to play just to make your own errors and signal them
[07:39:07] <kakuhen> meanwhile in common lisp it's relatively painless
[07:39:12] <hayley> https://www.youtube.com/watch?v=fpzQmF_2qwo
[07:39:12] -ixelp- Game Boy Tetris Music B - YouTube
[07:39:30] <gilberth> kakuhen: You can't signal errors in Rust to begin with.
[07:40:10] <kakuhen> err i know im not using the proper terminology
[07:40:16] <kakuhen> but basically, handling errors is very annoying
[07:40:30] <kakuhen> e.g. it's hard to specify which variants of an error a function can return
[07:40:47] <kakuhen> unless you want to think about error types all day long and try a million things that don't work
[07:41:00] <kakuhen> you also don't get tracebacks, among other things
[07:41:25] <kakuhen> and the reason is mostly a philosophical one
[07:41:29] <gilberth> But, yes. I needed some time to figure it out how to have your own kind of errors with Result<> to begin with.
[07:41:42] <kakuhen> apparently not being able to capture a stack trace is a feature
[07:41:47] <kakuhen> and it's justification is mostly philosophical
[07:42:21] <gilberth> And now I would need a completion data type for CL:THROW. And pass it along all the way up.
[07:42:39] <hayley> "Do NOT store indices into the Campus's vector because those may change in the future (some day we may support removing turtles from Campus)." "It sounds like the task instructions specifically told students not to use the easiest means of working around the borrow checker." Yes, what's the point of circumventing it?
[07:44:55] <gilberth> Anyhow, I still believe the CL condition system is the best we could have. Painless to use and we don't cover up all evidence on purpose.
[07:45:30] <kakuhen> i used to think the condition system is an overly complex monster, and i still kind of do, but when you're patient and try to learn the basics of using it, you quickly intuit it's convenience
[07:49:04] <gilberth> kakuhen: It's a bit like CLOS in this regard. CLOS also is pretty complex, while it's basic use is painless. You value the complexity once you need it, but nobody forces e.g. meta classes on you. You can ignore those when you don't need them. And you almost never need them.
[07:49:53] <gilberth> Same with e.g. restarts in the condition system. Nice to have them at your arsenal, but that concept doesn't get into your way.
[07:55:04] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 256 seconds)
[08:01:31] <White_Flame> hayley: nice selection, I always did prefer music B back on gb tetris
[08:02:08] <gilberth> This is interesting "87% cited high performance as a reason [to use Rust]" Right. I can't see how an Arc<Mutex<T>> all around should be particular fast. /me reads on.
[08:02:34] <White_Flame> because just like C++, everything must resolve at compile-time
[08:03:57] <gilberth> Yes, and when it cannot, you get a slow implementation. Perhaps both in runtime and development time.
[08:04:27] <White_Flame> do you?  or does it just fail to compile?
[08:04:57] <gilberth> When it fails to compile you would need to do things manually, that is my point.
[08:05:06] <White_Flame> ah, right
[08:06:37] *** Quits: semz (~none@user/semz) (Ping timeout: 250 seconds)
[08:06:41] <gilberth> Like reference counting. Would I want a toy Lisp in Rust it's Arc<Mutex<T>> all around and Arc::clone(&x), which increments the refcount, each time I use a value. I have to spell that out even. Likeweise for CATCH/THROW. No non-local exists? Pass a continuation object around, all the time.
[08:07:47] <gilberth> The compiler would need to be really, really smart to guess what I am up to.
[08:08:52] *** Joins: makomo (~makomo@user/makomo)
[08:09:13] <White_Flame> haskell has a lot of similar complaints about it, too, that you have to basically create runtime interpreters that are opaque to the system's notions of FP to get many classes of "real work" done
[08:09:37] <White_Flame> I have the same complaint around C, where it's dog slow when you have to do anything dynamic, because it can never take advantage of the compiler once runtime starts
[08:10:12] <gilberth> Would I want to have a real GC, which copes with cyclic data structures, that will be more fun even. But so it is in C, although it isn't that bad with C once you just bite the bullet and maintain a linked list of frames in whatever fashion.
[08:10:20] <White_Flame> all the clever speed & safety hacks that language base themselves around are never general purpose enough
[08:10:38] * gilberth nods.
[08:11:42] <gilberth> So what do we learn by that?
[08:14:57] <White_Flame> use multi-paradigm languages
[08:15:04] <White_Flame> and glean cheats/styles from others when appropriate
[08:16:56] <gilberth> Sure, White_Flame. I was thinking more along the line "What do we learn about people by that?"
[08:18:10] <gilberth> I mean, I decided to finally learn some Rust, to have first-hand experience and not just bits and an pieces I heard somewhere. And I must say: I am shocked.
[08:19:31] *** Joins: semz (~none@user/semz)
[08:19:46] <White_Flame> yeah, I've not yet taken the plunge.  But certainly the concept of the borrow checker or whatever it's called could be pulled into certain situations in other languages when appropriate.  Just not _all_ the time
[08:22:18] <gilberth> Yes, and you fight it all the time. The paper hayley posted, names it "DAG and cyclic data structures". Once you need that, you're dead in the water.
[08:26:29] <gilberth> When all your data types are [immutable] strings of bits essentially, Rust is fine. When you need some sharing, the trouble begins.
[08:29:03] <gilberth> If you would fare fine with MBASIC, you could perhaps with Rust. Don't forget to carry your global state all around, though.
[08:29:21] * gilberth shuts up.
[08:30:19] <White_Flame> yeah, the whole point of multithreaded programming in many instances is to share work on a single block of data
[08:32:32] <gilberth> I really wonder how people could take Rust serious.
[08:33:00] <gilberth> gilberth: Didn't you want to shut up?
[08:35:00] * hayley spots her code generates thousands of value numbers for (loop repeat 1 collect 1), and somehow finds a use for most of them.
[08:44:13] <hayley> Hey, mail server is back. But I got no mail. ):
[08:44:35] <gilberth> No news is good news.
[08:45:22] <hayley> Not when I'm waiting on a reply from Richard Jones :(
[08:48:36] <gilberth> Could still be bad news. :)
[08:51:14] <hayley> What would the bad news be? "You are mad, so I am going to put a page in the next edition of GC Handbook telling people to stay away from you"?
[08:52:10] <gilberth> Hmm, that would ensure some fame, won't it?
[08:52:37] <hayley> Not the good kind.
[08:53:04] * gilberth shrugs.
[08:55:31] * hayley spots a suboptimal part of her GVN analysis.
[08:55:45] <hayley> Two constant inputs can represent the same constant (e.g. 0) but they won't appear equal to global value numbering.
[08:57:14] <moon-child> hayley: loop generates a lot of code--mostly for that exact reason
[08:57:42] <moon-child> 'Two constant inputs can represent the same constant'  ♫hash-cons ♫time
[08:58:58] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[08:59:22] <hayley> You're going to (SETF GETHASH)
[09:19:12] <hayley> Doesn't really seem to help. Hm.
[09:23:36] <moon-child> hayley: 'DSL which lets you specify object representations and/or pointer tagging would look like'  I believe moarvm (the raku runtime) has something like that.  I think that it does not do anything particularly interesting with tagging, but that it permits polymorphism over representation
[09:24:14] <moon-child> gilberth: since numbers and symbols are immutable, can you not skip the Arc<Mutex<>> for them, and only use one for conses?
[09:38:45] <gilberth> moon-child: Symbols are mutable unless you want to go through a hash of sorts to get at the symbol value and plist.
[09:38:57] *** Joins: shka (~herr@109.231.0.226)
[09:40:20] <moon-child> good point
[09:40:42] <gilberth> I believe I would hit a modularity issue when I want to spare the refcount for numbers.
[09:41:45] <moon-child> why?
[09:42:08] <gilberth> I mean, I need to Rc::clone() each value I use. The enum could be an enum of a bare f64 or an Rc<> to a symbol or cons. When I want to use a value, I would need to dispatch on it being a number or a pointer.
[09:43:02] <moon-child> Since the enum has to be closed, I don't see why you couldn't encapsulate that dispatch
[09:43:25] <gilberth> So I would need my own clone, which would Rc::clone and then wrap it up into an enum again. How would Rust then decrement the refcount?
[09:43:47] <moon-child> not sure
[09:44:05] <moon-child> I think it might be automatic?  When the enum goes out of scope, it is destroyed, and the contained value is as well?
[09:44:31] <gilberth> Hmm. You make my brain hurt.
[09:59:18] *** Joins: clothespin (~awolven@c-73-209-95-92.hsd1.il.comcast.net)
[10:01:18] <mfiano> How awful is it of an idea to install mappings of C function name to bitfield integers for keyword symbols to be used like enum variants with different values in different contexts...
[10:01:49] <mfiano> I mean in the keyword symbols' property lists.
[10:02:41] <mfiano> like :READ-ONLY could have a mapping of OPEN -> 0, for the open() call.
[10:03:01] <mfiano> I feel dirty for thinking of uses for symbol property lists, especially ones in the keyword package.
[10:04:51] * gilberth is again at fighting with Rust.
[10:05:38] <mfiano> I learned my lesson years ago with that. I feel your pain.
[10:06:22] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[10:06:37] <gilberth> No matter what random combination of clone() borrow() &* and *& I  place, I cannot get at the 'car' slot.
[10:07:40] <moon-child> mfiano: it seems simpler to say (defconstant +o-readonly+ ...) (defcfun ...open...) (defun wrapper:open (&key (read-only nil)) (open ... (logior ... (if read-only +o-readonly+ 0))))
[10:07:53] <gilberth> mfiano: What is wrong with having a DECODE-FOO function? It could even be a generic function, if you wish. (defmethod decode-foo ((key (eql :read-only))) 42)
[10:08:57] <mfiano> I'm particularly thinking about a higher level of abstraction for a large macro-generated bindings library.
[10:09:52] <shka> syntax abstractions are overrated
[10:10:05] <gilberth> Well, what higher could you get than just listing all the keywords and their value?
[10:14:26] *** Quits: Alfr (~Alfr@user/alfr) (Read error: Connection reset by peer)
[10:14:49] *** Joins: Alfr (~Alfr@user/alfr)
[10:17:34] <gilberth> What also drives me crazy with Rust is that there is no referential transparency at all. You believe you figured sth out, but have { let a = ...; let b = ...; ... foo (...a...b...); } You cannot skip those let's in general.
[10:19:37] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[10:20:01] <dave0> maw
[10:21:00] <gilberth> And saying x.clone() each time I use 'x' feels like I am missing something. This can't be right.
[10:26:49] <gilberth> moon-child: Anyhow. Thanks for your suggestion. I am at <http://clim.rocks/gilbert/rust-take-2.rs.txt> and it appears to work.
[10:32:53] <moon-child> https://erich-friedman.github.io/packing/squinsqu/s29.gif  optimal square packing
[10:34:03] <gilberth> Heh, did you shake it until it settled?
[10:36:14] <gilberth> dave0: Hello there! How did you manage to sneak in without being noticed?
[10:39:19] <gilberth> Hmm, perhaps I could skip the .clone() when I teach how to copy a Node. Can it be copied at all? I mean, you can't copy a Rc<T>, can you. I would need to read more closely. A spec would help not some kindergarden book.
[10:39:52] <gilberth> [Actually it's "kindergarten" I should know better.]
[10:43:37] <dave0> maw gilberth 
[10:44:04] <dave0> gilberth: you were busy clone()'ing things!
[10:44:29] <gilberth> I was busy fighting a clone war with Rust.
[10:44:44] * hayley finds the rubbish assignment, but it should have been killed by REMOVE-REDUNDANT-ASSIGNMENTS, as the assignment goes nowhere.
[10:45:34] <gilberth> B32 machine code has more expressive power and is easier to work with.
[10:46:45] <dave0> gilberth: i wrote a little B32 code yesterday!
[10:47:18] <gilberth> You did? Hey, what does the code do?
[10:47:52] <dave0> gilberth: its forth primitives in assembly that you cant write directly in forth
[10:48:01] <dave0> maybe i can bootstrap forth on it one day!
[10:48:30] <dave0> i should stop saying "forth" so much :-p
[10:48:44] <gilberth> That would be awesome. Are you using any of my tools?
[10:48:53] <dave0> nope
[10:49:09] <dave0> i have a copy of your assembler somewhere but i really don't understand lisp
[10:49:11] <gilberth> Pen and pencil? Your own assembler?
[10:49:23] <dave0> nothing yet
[10:49:58] <dave0> i'll put in some ()'s and try and run it through your assembler
[10:50:51] <gilberth> Tell me, when you do. I'll fix any road blocks you might come across.
[10:51:01] <dave0> cool
[10:51:04] <dave0> no worries :-)
[10:51:19] * gilberth scratches head. .oO(Is that version still on my site? Any docs?) /me shrugs.
[10:52:21] <gilberth> Although real power comes from having Lisp at your disposal for macros.
[10:52:59] <dave0> yes there's a lot of boilerplate to implement push and pop
[10:53:07] <hayley> B32-in-B32 when?
[10:55:46] <gilberth> dave0: <http://clim.rocks/gilbert/b32/asm/> there is some sparse documentation in index.html
[10:55:47] -ixelp- /gilbert/b32/asm/
[10:56:34] <gilberth> hayley: Look at dave0, he is the B32 expert hacker.
[10:56:46] * hayley looks at dave0
[10:57:15] <dave0> not me
[10:57:43] <dave0> i turn off the computer by holding down the power button
[10:58:24] * gilberth never turns his machine off and wonders what a "power button" is.
[10:59:03] <dave0> i did that to the desktop until sparks went boom and smoke came out
[10:59:34] <dave0> flipped the circuit-breakers
[10:59:43] <gilberth> Smoke? The magic stuff that makes electronics work?
[10:59:56] <dave0> haha
[11:00:38] <gilberth> When you let it escape, the transistors stop working.
[11:02:14] <gilberth> Anyhow, what did you do? I never had sparks or smoke with my computers.
[11:03:23] <gilberth> Or did did you try to make the hard disk grow by watering it?
[11:04:21] <dave0> just old
[11:04:42] <dave0> my friend had it in his garage for years before i got it
[11:05:30] <dave0> i kept the hard drives
[11:05:33] <dave0> somewhere
[11:05:38] <gilberth> From last century?
[11:05:38] <dave0> i should organise my junk
[11:05:53] <dave0> haha yeah sometime in the 90's ;-)
[11:06:13] <dave0> surprisingly the hard drives have held up
[11:06:25] <dave0> everything else is toast
[11:06:29] <shka> https://www.youtube.com/watch?v=TdX_jYjDsdE
[11:06:29] -ixelp- The Unfortunate Return of the Ridiculously Self-Indulgent, Ill-Advised Vanity Tour - YouTube
[11:06:45] <gilberth> I always was lucky with hard drives.
[11:08:57] <gilberth> Up until perhaps 2016 or so. bauhh.dyndns.org aka clim.rocks was running on a PeniumPro from last century. 27/4 without a glitch. The hard disk has some whooping 130MB.
[11:14:22] <waleee> lmao, the Norwegian translators of Harry Potter translated 'golden snitch' to "gullsnopp" (= golden dick)
[11:22:43] *** Quits: shka (~herr@109.231.0.226) (Quit: Konversation terminated!)
[12:02:23] *** Joins: treflip (~user@95.79.32.99)
[12:16:26] *** Joins: notzmv (~zmv@user/notzmv)
[13:22:22] *** Quits: clothespin (~awolven@c-73-209-95-92.hsd1.il.comcast.net) (Ping timeout: 260 seconds)
[13:47:44] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 268 seconds)
[13:50:41] *** Joins: clothespin_ (~awolven@c-73-209-95-92.hsd1.il.comcast.net)
[14:18:29] *** Joins: random-nick_ (~random-ni@87.116.160.199)
[14:47:50] <gilberth> Ah, ok. A Rust macro can define another macro.
[14:51:08] <hayley> gilberth: beach said you were always a rascal in #sicl. Any comments?
[14:52:33] <gilberth> A rascal? How so? *surprisedlook*
[14:55:14] <hayley> Apparently you took moon-child's single quote while they were trying to MACROEXPAND.
[14:55:38] <hayley> Otherwise, I don't know, hence why I asked.
[14:57:39] <gilberth> I took moon-child's single quote?
[14:59:04] <moon-child> gilberth: well you seem to have a surplus
[14:59:15] <moon-child> and, very guiltily, you have returned several of them to me
[14:59:55] <gilberth> Yes. And you believe that are you'r single quotes?
[15:00:23] <hayley> Furthermore, you are not in #sicl, clearly because beach would spot the stolen single quotes in your pockets.
[15:00:51] <gilberth> Do I look like I would hide them in my pockets?
[15:01:28] <gilberth> I have a better, more hidden stash for them.
[15:02:20] <hayley> Gotcha!
[15:03:19] <gilberth> What? I have not stolen anything. /me shows bare hands.
[15:03:49] <hayley> You said you had a more hidden stash for your stolen single quotes?
[15:04:47] <gilberth> Aehm, yes, I a have a stash for all kinds of characters, but that does not imply that I have stolen any, does it?
[15:05:04] <hayley> 🤔
[15:05:07] <moon-child>  
[15:05:24] <hayley> gilberth: Just saying, I think it would be moderately amusing if you went in #sicl.
[15:06:02] <gilberth> So that beach could call me a rascal again?
[15:07:38] <hayley> So that you can convince him to use NaN boxing or something.
[15:08:06] <gilberth> Now, that is a show down you are eager to watch?
[15:08:40] <hayley> Yes.
[15:09:41] <gilberth> I am afraid beach's rhetoric skills surpass mine.
[15:10:22] <gilberth> Begins with that my English is not particular good.
[15:11:54] <hayley> Nor are mine, but I get my point across eventually.
[15:12:21] <Gnuxie> bruh
[15:12:25] <Gnuxie> your english is fine 
[15:12:26] <gilberth> You are a native speaker, aren't you?
[15:12:40] <Gnuxie> gilberth: your english that is 
[15:13:16] <gilberth> Gnuxie: Not to my own standard. But many thanks for the compliment. *blush*
[15:13:59] <hayley> Apparently. But I have a tendency to produce ambiguous phrases.
[15:14:15] * hayley was broken by six years of essay writing in English classes.
[15:16:21] <gilberth> Milady, you have a tendency to assume that your reader is already aware of what is obvious to you. This comes from thinking too fast on one hand and having digged a topic hard on the other.
[15:19:37] <gilberth> And besides, I failed to advocate NaN boxing some 20 years ago already. I am not good at selling stuff.
[15:21:28] <gilberth> Also I could see how fixnum arithmetic gets *aehm* interesting.
[15:21:45] <hayley> I heard the one-more-re-nightmare compiler article was fairly readable. Though people could just pick the part they are most familiar with, as it is very breadth-first.
[15:22:00] <semz> Is NaN boxing even worth it when you aren't Javascript and have proper integers?
[15:22:10] <moon-child> gilberth: I would buy tickets to your nan-boxing debate
[15:22:27] <ck_> is that like chess boxing?
[15:22:46] <semz> you duke it out and then do error analyses
[15:22:47] <gilberth> moon-child: Are you sure you could afford tickets?
[15:22:48] <hayley> "Do you do SEO?" "S-Expression Optimisation? Yes I write a compiler"
[15:22:54] <moon-child> hayley: I don't recall much of the omrn article, but I definitely agree with gilberth's assesment wrt lisp-by-the-pound
[15:23:03] <hayley> Sure.
[15:23:15] <hayley> That was more of a rant that mfiano liked a lot.
[15:23:20] <gilberth> semz: Depends. When you are surrounded by double floats, it may be.
[15:23:48] <moon-child> I had a friend once who could generally come to the same conclusions as I did with little prompting (or vice versa).  Very nice.  It is quite annoying having to explain things
[15:25:23] <gilberth> moon-child: Yes, it is. This is why I have a hard time with not so intelligent people. It can be quite exhausting to talk to them.
[15:25:56] <ck_> yeah, because your conclusion is the only correct one, right
[15:26:19] *** Quits: robin (~robin@user/terpri) (Ping timeout: 252 seconds)
[15:26:27] <gilberth> My wife always called me mentioning that as me being arrogant. Sorry, it's not arrogance, it's just that silly people exhaust me.
[15:26:44] <moon-child> ck_: we did not always agree.  But we could _see_ each others' points; not having to spend time explaining them
[15:28:16] <hayley> "Here is a list of guitar VSTs [synthesizers that sound like guitars] I use" and they sound like shit? If not, doing a good guitar simulation needs more information than your average MIDI file.
[15:28:37] <ck_> I see, yes, that is nice. I guess my point was that sometimes, your perspective is so far off someone else's that you can't get there without explanation and more discussion
[15:29:13] <hayley> IIRC MIDI pitch bends are global, so you can't e.g. bend one string and keep the others in tune, which is kinda common in blues and rock, can't indicate string information at all actually...
[15:29:31] <ck_> more laborious than just agreeing, sure, but also potentially beneficial.
[15:29:33] <gilberth> ck_: I have a friend which I see once every couple of years, but have studied together with. We would never agree on anything. Yet, I always felt at the greatest comfort around him, as he was thinking at a fast pace, too. I could get off my brake. Stepping on that brake all the time is exhausting.
[15:29:35] <moon-child> ck_: yes.  I do not say it is bad to explain things, only annoying
[15:30:31] <moon-child> sometimes somebody simply does not have requisite background in an area; it does not mean they are stupid, nor uninformed, nor that they think slowly, but they nevertheless require a lengthy explanation
[15:30:56] <gilberth> moon-child: Constantly having the feeling to either speak in Chinese or needed to state the very obvious, is what I meant by exhausting. Tutoring or teaching is a completely different cup of tea. And I actually enjoy the latter.
[15:31:39] <moon-child> yes.  That is another thing
[15:32:47] <gilberth> moon-child: I agree. It's not about knowledge or expertise.
[15:38:36] <gilberth> It has more to do with being able to just talk without constantly asking yourself, whether you need to include each and every "baby" step on your line of reasoning. That most people are afraid of asking, if they don't get something, does not make it any easier.
[15:39:30] <hayley> Even if they don't get what you're saying, just use exclamation marks! Then you will sound convincing!
[15:40:28] <gilberth> hayley! How could I forget! I believe SHOUTING WILL HELP, TOO!!!!
[15:42:29] * gilberth tries to define a macro defining macro so he does need to spell out all the .clone()s.
[15:42:51] <gilberth> not, rather. I think too positive.
[15:43:38] <gilberth> But macros! come! with! an! exclamation! mark! Hmm.
[15:45:41] <edgar-rft> exclamation marks make our macros look moar imperative
[15:48:36] <edgar-rft> imperative programming: (defmacro DO-THE-FUCK-WHAT-I-TOLD-YOU!!! ...)
[15:49:54] <hayley> There is an internal function in one-more-re-nightmare called compute-the-damn-value.
[15:50:21] <hayley> It's bound as part of the memoization macros.
[15:51:33] <edgar-rft> we should use damn-values more often :-)
[15:52:26] <gilberth> hayley: At least you didn't use the s-word.
[15:53:11] <hayley> I reserve that for talking about x86-64 in #sicl.
[15:53:37] <hayley> Sliding timeline of how long I am working on register allocation:
[15:53:50] <gilberth> What does _si_cl stand for, again?
[15:54:13] <hayley> "How silly." <--- not a lot --- "This is stupid." ---- a lot ---> "Who designed this shit?"
[15:54:57] <hayley> Canonically, nothing. If you are having fun, "SICL Implements Common Lisp". If you are having too much fun, "Situationist Internationale Common Lisp".
[16:25:24] <gilberth> Is that name related to CirCL?
[16:27:42] <pjb> gilberth: yes, both concern Common Lisp.
[16:28:46] <gilberth> Nah, both are Common Lisp implementations in Common Lisp and are meta-circular to a certain extent.
[16:39:39] <ck_> https://thehackernews.com/2021/12/blackcat-new-rust-based-ransomware.html
[16:39:40] -ixelp- BlackCat: A New Rust-based Ransomware Malware Spotted in the Wild
[16:40:40] <ck_> "Ransomware as a Service", first time I've read that term. I think reality is mocking itself
[17:10:05] <semz> "wherein the core developers recruit affiliates to breach corporate environments and encrypt files" ...so "ransomware as a service" is simply selling ransomware?
[17:10:44] <semz> The words must buzz.
[17:12:30] <gilberth> Whenever I read about ransomware, I wonder whether people don't have backups.
[17:13:57] <semz> Backups don't get rid of possible leaks. Then again, neither does paying...
[17:15:59] <semz> Clearly what they need is some kind of WoT. "Sent keys immediately after payment, didn't leak my data afterwards. A+++ would get ransomwared again"
[17:16:29] <gilberth> Yep. I was talking about the classic "pay us, and we restore (decrypt) your data." Is it really cheaper to pay than to restore a backup? Provided you could make a good guess, which backup is sound. But paying doesn't solve the latter either.
[17:18:00] <gilberth> And I could threaten you to leak your data without encrypting your disk. Too much hassle.
[17:19:09] <gilberth> Besides, when I encrypt your disk, how could you verify that a piece of data I provide as evidence, that I really have your data, is actually real?
[17:39:13] <gilberth> I find the state of Rust documentation pretty poor.
[18:09:26] <dave0> nite all
[18:09:32] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:29:45] * gilberth actually enjoys Rust's macros as they can define macros.
[18:33:26] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:38:58] *** Quits: treflip (~user@95.79.32.99) (Read error: Connection reset by peer)
[18:40:26] *** Joins: treflip (~user@95.79.32.99)
[18:40:40] *** Quits: OlCe (~user@amontpellier-657-1-25-61.w109-210.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[19:04:18] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[19:12:41] *** Joins: OlCe (~user@lfbn-nic-1-510-34.w90-116.abo.wanadoo.fr)
[19:55:44] * gilberth 's keyboard arrived and it last left option/command switched with right option/command.
[19:56:11] <gilberth> I wonder how that could happen.
[19:57:01] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[20:04:35] <gilberth> Why do bugs haunt me? This is not funny anymore. I unbox the keyboard and within a second I find a firmware bug.
[20:13:07] <sham1> Bugs happen due to the wave function collapsing badly
[20:13:45] <gilberth> And why does this wave function always collapse on me?
[20:14:58] <gilberth> Badly that is. Or am I the wave function? And how is this related to glitches in the matrix?
[20:16:19] <gilberth> Anyhow, I find this most funny. They took great care to design this keyboard and swap left and right? Serious? Why?
[20:16:46] <sham1> Maybe it's just a genuine mistake
[20:17:06] <gilberth> And I am the first one to notice?
[20:17:31] <gilberth> I'll see if I could write them an email.
[20:17:54] <gilberth> Otherwise I am quite happy with this keyboard so far.
[20:21:11] <ck_> what kind did you get?
[20:21:57] <gilberth> ck_: I got a Keychron K2.
[20:36:46] <gilberth> Meanwhile I struggle to find READ-CHAR for Rust and I start to doubt there is such a thing.
[20:52:05] <ck_> that keyboard is "for windows and mac", and it probably is in windows mode right now, which is why command and option appear switched to you, no?
[20:52:48] <gilberth> ck_: (1) this keyboard is in Mac mode. (2) and left and right are switched. Not option and command.
[20:53:24] <gilberth> That is left option generates the keycode for right option and vice versa.
[20:53:38] <ck_> oh, you meant right and left of space, sorry
[20:54:09] <gilberth> Yes.
[20:54:36] <gilberth> And this is a new failure mode for me.
[20:54:42] <ck_> how did you notice?
[20:54:54] <ck_> you must have an interesting keymap
[20:55:46] <gilberth> Because I have my left option as my meta and my right option as what would be AltGr.
[20:56:42] <gilberth> Emacs can do that right out of the box. This way I could have both a meta key and an "AlrGr" key for accents.
[20:56:54] <ck_> I see
[20:58:26] <gilberth> And command is left to shortcuts the OS likes to steal. The "apple key".
[20:59:38] <gilberth> And this way I noticed within seconds because I wanted to type M-<whatever> and funny characters appeared instead.
[21:01:36] <gilberth> But otherwise I like this keyboard.
[21:34:18] <ck_> I coincidentally just tried it a few hours ago. very clacky but not bad
[21:34:36] <ck_> you bought it with browns I assume?
[21:51:47] <treflip> If you have clicky switches and they aren't "Kailhua Box White" your social credit is reduced by most-positive-fixnum points.
[21:53:52] <pl> fortunately nobody counts that outside of credit bureau of Exiles of r/mechanicalkeyboards 
[21:55:19] <pl> according to whom my pride and joy would be not mechanical enough to be considered good keyboard
[21:55:41] <pl> which can be fortunately followed by braining the clicky zombie with the keyboard, wiping it down and continuing to type ;P
[21:56:32] * White_Flame swings his unicomp at treflip
[21:58:45] <treflip> x_x
[22:03:39] <ck_> yeah there's not really a coming back from that. a lot of mass in that swing
[22:04:32] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[22:04:53] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[22:08:39] <pl> my topre realforce could decapitate a zombie ^^;
[22:16:31] <treflip> is this the reason why it's called "realforce"?
[22:21:26] <pl> haha, no, no idea
[22:22:17] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:22:38] <pl> Topre switches are capacitive and the only mechanical parts exist there to provide the feedback to your fingers
[22:22:53] <pl> (ok, the mechanical spring is part of the capacitance check, but that's it)
[22:25:21] <ck_> "realforce" refers to a weighting of keys according to the finger that is supposed to press it, as far as I know
[22:26:24] <treflip> interesting
[22:26:47] <pl> well, not all realforce keyboards have multiple weights, but it's common feature, yes
[22:27:10] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[22:27:23] <pl> I have HiPro model and those come only in uniform weight
[22:27:34] <pl> (also means I can forget about custom keycaps :D)
[22:28:06] <pl> https://www.realforce.co.jp/en/products/104UG-HiPro_YK2100/
[22:35:24] <ck_> the caps look very nice
[22:41:26] *** Quits: treflip (~user@95.79.32.99) (Quit: good night ✨)
[22:43:45] <pl> but pretty unique - it's a special hi-profile variant with much higher keys, and even Topre made only two series of those or so
[22:48:24] <phoe> hello
[22:48:29] <phoe> has heisig been around?
[22:59:52] *** Quits: APic (apic@apic.name) (Quit: [TLS] Client upgrade)
[23:00:17] *** Joins: APic (~apic@apic.name)
[23:04:04] <ck_> depends on what time frame you mean by that
[23:21:35] <selwyn> i have never seen heisig on #lispcafe
[23:27:53] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[23:28:36] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
