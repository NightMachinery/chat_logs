[00:01:56] <anyone> PJBoy: just what did you do with your font
[00:07:30] <PJBoy> it's beautiful
[00:13:55] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Ping timeout: 268 seconds)
[00:15:49] *** Quits: AmR (~AmREiSa@156.199.202.96) (Quit: Konversation terminated!)
[00:16:23] *** Joins: ProperN[out] (~holyShizn@user/propernoun)
[00:16:39] *** Quits: ProperNoun (~holyShizn@user/propernoun) (Ping timeout: 250 seconds)
[00:20:32] *** Quits: jbalint (~jbalint@097-090-242-068.res.spectrum.com) (Read error: Connection reset by peer)
[00:20:42] *** Joins: jbalint (~jbalint@2600:6c44:117f:e98a:816a:9488:fb1:7b7)
[00:20:52] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[00:23:08] *** Quits: sixpiece (~brainz3sl@4.182.132.164.lunanode-rdns.com) (Quit: Leaving)
[00:25:38] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 268 seconds)
[00:25:59] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[00:27:54] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[00:30:32] *** Joins: Enitin (~Enitin@82.102.22.84)
[00:34:06] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 245 seconds)
[00:43:27] *** Joins: stonkey (~stonkey@user/stonkey)
[00:47:12] *** Joins: AmR (~AmREiSa@156.199.202.96)
[00:49:35] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[00:51:04] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[00:52:24] *** Joins: u0_a391 (~u0_a391@2600:380:a469:742a:b47:fe14:5678:b9f2)
[00:52:46] *** Quits: beastie (~lcu@user/thebeastie) (Ping timeout: 268 seconds)
[00:56:28] *** Quits: Kit (~u0_a391@cpe-76-190-178-139.neo.res.rr.com) (Ping timeout: 268 seconds)
[00:57:10] *** Quits: magla (~gelignite@55d48631.access.ecotel.net) (Quit: Stay safe!)
[00:58:06] *** Joins: u0_a3911 (~u0_a391@2603-6010-a141-6fa3-995e-1663-5011-4cc5.res6.spectrum.com)
[00:59:45] *** Quits: equinox[m] (~momoshiki@2001:470:69fc:105::fe92) (Quit: Client limit exceeded: 20000)
[01:00:47] *** Quits: zer0bitz (~zer0bitz@194.34.133.91) (Ping timeout: 268 seconds)
[01:01:02] *** Quits: u0_a391 (~u0_a391@2600:380:a469:742a:b47:fe14:5678:b9f2) (Ping timeout: 240 seconds)
[01:04:07] *** Quits: sideshowbarker[m (~sideshowb@2001:470:69fc:105::9a16) (Quit: Client limit exceeded: 20000)
[01:04:25] *** Joins: LunarJetman (~LunarJetm@user/zogatribe)
[01:04:38] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[01:08:33] *** Quits: MarcoAlvarez[m] (~surakgnom@2001:470:69fc:105::2dc) (Quit: Client limit exceeded: 20000)
[01:08:54] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[01:10:04] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[01:13:55] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[01:16:53] *** Quits: T`alZHeimeR (~TaZ@user/taz/x-9470768) (Ping timeout: 250 seconds)
[01:18:48] *** Joins: T`alZHeimeR (~TaZ@user/taz/x-9470768)
[01:18:56] *** Joins: pulse (~pulse@user/pulse)
[01:22:29] <cbreak> that's not very ergonomic
[01:22:43] *** Joins: MarcoAlvarez[m] (~surakgnom@2001:470:69fc:105::2dc)
[01:22:43] *** Joins: equinox[m] (~momoshiki@2001:470:69fc:105::fe92)
[01:22:55] *** Joins: sideshowbarker[m (~sideshowb@2001:470:69fc:105::9a16)
[01:24:11] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[01:24:28] <ville> that font is a bannable offence
[01:24:46] *** Joins: nvrhome (~Bop@user/nvrhome)
[01:34:42] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Ping timeout: 268 seconds)
[01:37:57] *** Quits: apchar (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu) (Quit: Leaving)
[01:40:04] <PJBoy> ahahaha
[01:40:16] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:40:24] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:40:24] *** ChanServ sets mode: +v npaperbot
[01:40:28] <PJBoy> but it looks so nice
[01:40:37] <PJBoy> come'on
[01:43:49] *** Joins: beastie (~lcu@user/thebeastie)
[01:45:33] *** Quits: paulf (~paulf@lfbn-lyo-1-397-34.w2-7.abo.wanadoo.fr) (Quit: Connection closed)
[01:45:53] *** Quits: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469) (Remote host closed the connection)
[01:47:01] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[01:52:29] *** Quits: spidermonkey54 (uid527699@id-527699.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[01:52:42] <Alipha> PJBoy: I don't know why you'd use that considering you're in coding channels. Monospaced font ftw.
[01:53:56] <PJBoy> well it's not like I need to read multiple lines that match up
[01:54:06] <PJBoy> monospace for single lines is whatever
[01:57:57] <RandomReader> I'm also variable-width for people, monospace is a waste of horizontal real estate
[01:58:23] <RandomReader> I keep monospace in the server panel, mostly for MOTD ASCII art, but sometimes I align other data too
[01:59:15] <RandomReader> chunks of code get pasted elsewhere if I want formatting
[02:02:14] *** Quits: ckdCreations (~ckdCreati@2607:fb90:8346:bdfd:400d:4e86:1eca:ba46) (Ping timeout: 252 seconds)
[02:03:43] *** Joins: seninha (~seninha@user/seninha)
[02:09:56] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000C96363670EDAE354.catv.pool.telekom.hu) (Ping timeout: 252 seconds)
[02:11:28] <anyone> variable-width works for coding, but only when people consistently use '\t' and ' ' properly for indent and align. Which they don't because they're morons.
[02:17:41] *** Joins: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469)
[02:24:52] *** Joins: u0_a3912 (~u0_a391@2600:380:a469:742a:4e3d:9a6e:9782:818f)
[02:25:01] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[02:26:48] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[02:27:57] *** Quits: u0_a3911 (~u0_a391@2603-6010-a141-6fa3-995e-1663-5011-4cc5.res6.spectrum.com) (Ping timeout: 240 seconds)
[02:31:17] *** Quits: unicky (~unickyllt@46.211.75.112) (Ping timeout: 240 seconds)
[02:32:34] *** Quits: pizdets_ (~pizdets@183.182.111.125) (Ping timeout: 250 seconds)
[02:33:40] *** Joins: pizdets (~pizdets@183.182.110.8)
[02:33:42] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[02:35:35] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[02:40:15] *** Joins: ferdna (~ferdna@user/ferdna)
[02:41:10] <rpav> anyone: no it doesn't, even then
[02:41:18] <rpav> i mean, unless you have really bad multi-line alignment
[02:41:36] <rpav> but e.g.
[02:41:38] <rpav> int a  = 1;
[02:41:41] <rpav> int ab = 1;
[02:42:07] <rpav> similarly with foo(firstarg,\n<.. indent ..>nextarg,\n ...
[02:42:19] <rpav> this is all trivial with clang-format and/or any modern editor
[02:42:40] <rpav> tabs will not help
[02:47:24] <anyone> rpav: when the width of ' ' is not equal to the width of 'b', then it falls apart
[02:47:48] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:49:45] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[02:53:40] <anyone> https://paste.opensuse.org/54847555 showcase of where it goes wrong
[03:04:30] *** Joins: ethrl (~ethereal@user/doforlove33)
[03:04:41] *** Quits: nostar (~nostar@68.51.221.108) (Quit: Leaving)
[03:06:36] *** Quits: oldtopman (~oldtopman@c-71-205-4-123.hsd1.co.comcast.net) (Ping timeout: 245 seconds)
[03:06:52] *** Joins: rgrinberg (~textual@2806:101e:7:cff:f4d0:b9c8:9c34:9747)
[03:11:41] *** Joins: chenqisu12 (~bhca7d@183.217.200.22)
[03:12:11] *** Quits: ethrl (~ethereal@user/doforlove33) (Remote host closed the connection)
[03:13:17] *** Quits: jsbach (~jsbach@2a01:c23:64ce:1100:46f5:c826:22db:de85) (Ping timeout: 240 seconds)
[03:14:00] *** Quits: jsbach_ (~jsbach@2a01:c23:64ce:1100:46f5:c826:22db:de85) (Ping timeout: 268 seconds)
[03:14:45] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 250 seconds)
[03:14:49] *** Quits: rgrinberg (~textual@2806:101e:7:cff:f4d0:b9c8:9c34:9747) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:15:51] *** Joins: rgrinberg (~textual@2806:101e:7:cff:f4d0:b9c8:9c34:9747)
[03:16:17] *** Quits: chenqisu12 (~bhca7d@183.217.200.22) (Ping timeout: 240 seconds)
[03:17:17] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[03:17:40] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[03:33:59] <PJBoy> I hate this
[03:34:29] <PJBoy> you'll never get tab to work either though
[03:34:34] *** Quits: Pook (~Pook@2001:8a0:f996:1400:45ad:bf72:5834:8a59) (Quit: Leaving)
[03:34:43] <PJBoy> not unless you only use whitespace to align the start of lines
[03:34:57] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 268 seconds)
[03:37:31] *** Joins: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu)
[03:38:08] *** Quits: rgrinberg (~textual@2806:101e:7:cff:f4d0:b9c8:9c34:9747) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:39:39] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[03:40:14] *** Joins: Enitin (~Enitin@82.102.22.86)
[03:42:14] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[03:49:37] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 240 seconds)
[03:53:01] *** Quits: LunarJetman (~LunarJetm@user/zogatribe) (Ping timeout: 240 seconds)
[03:55:37] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[03:56:21] *** Joins: rgrinberg (~textual@2806:101e:7:cff:f4d0:b9c8:9c34:9747)
[04:03:34] *** Joins: Enitin (~Enitin@82.102.22.84)
[04:04:21] *** Quits: bobb_ (~bobb_@dslb-088-066-156-033.088.066.pools.vodafone-ip.de) (Quit: Client closed)
[04:05:31] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: Ping timeout (120 seconds))
[04:05:50] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[04:09:29] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:12:34] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:b165:3b1b:f1f6:f4de) (Ping timeout: 268 seconds)
[04:17:30] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Ping timeout: 268 seconds)
[04:17:35] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[04:20:03] *** Joins: seninha (~seninha@user/seninha)
[04:21:25] *** Quits: Yruama (~Yruama@alyon-654-1-389-172.w109-213.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[04:26:11] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5)
[04:27:58] *** Joins: u0_a3913 (~u0_a391@2603-6010-a141-6fa3-995e-1663-5011-4cc5.res6.spectrum.com)
[04:30:03] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[04:30:32] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5) (Ping timeout: 240 seconds)
[04:31:42] *** Quits: u0_a3912 (~u0_a391@2600:380:a469:742a:4e3d:9a6e:9782:818f) (Ping timeout: 268 seconds)
[04:32:37] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[04:40:06] *** Quits: Forsaken87 (~quassel@2a02:908:1866:e360:88b0:2032:220f:3f73) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[04:42:03] *** Joins: Forsaken87 (~quassel@2a02:908:1866:e360:88b0:2032:220f:3f73)
[04:42:27] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[04:42:31] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5)
[04:43:21] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[04:47:02] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Ping timeout: 240 seconds)
[05:01:45] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:85b6:2c43:f2cd:529c) (Quit: Textual IRC Client: www.textualapp.com)
[05:02:11] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[05:02:21] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[05:06:57] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Ping timeout: 240 seconds)
[05:17:22] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 260 seconds)
[05:18:17] *** Quits: rgrinberg (~textual@2806:101e:7:cff:f4d0:b9c8:9c34:9747) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:18:56] *** Joins: slavfox (~slavfox@93.158.232.111)
[05:20:07] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[05:33:19] *** Quits: pulse (~pulse@user/pulse) (Quit: My hovercraft is full of eels)
[05:37:39] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[05:39:42] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[05:40:16] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:40:27] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:40:27] *** ChanServ sets mode: +v npaperbot
[05:40:47] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[05:41:38] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 260 seconds)
[05:43:01] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 240 seconds)
[05:43:41] *** Quits: malloy (~jimery@116.30.221.255) (Ping timeout: 250 seconds)
[05:44:14] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[05:45:50] *** Joins: malloy (~jimery@116.30.221.255)
[05:50:38] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 240 seconds)
[05:52:40] *** Joins: thomasross (~thomasros@dyn-pppoe-142-51-227-74.vianet.ca)
[05:56:13] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 240 seconds)
[05:59:59] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[06:04:58] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5) (Ping timeout: 260 seconds)
[06:11:14] *** Joins: YesMan (~YesMan@2a01cb088db9bd0001e70f0fc886fde9.ipv6.abo.wanadoo.fr)
[06:13:31] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[06:16:27] *** Joins: TomyLobo (~TomyLobo@p200300e80f006700f1e6dbe8275e9226.dip0.t-ipconnect.de)
[06:16:28] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5)
[06:16:41] *** u0_a3913 is now known as Kit
[06:16:57] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[06:16:58] *** Quits: masterbuilder (~user@user/masterbuilder) (Remote host closed the connection)
[06:17:41] *** Joins: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[06:21:17] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5) (Ping timeout: 252 seconds)
[06:23:00] <YesMan> Hi I'm trying to build old source code and stumbled upon this https://paste.ofcode.org/EgyvU5taDnby8uCwFdgc7z
[06:23:01] <YesMan> the return statement references "n" declared inside the for loop. This does not compile with MSVC, but the code has been compiled in the past. Can this be valid in some older C++ standard?
[06:24:49] <Oxyd> It was never valid in standard C++, no. It was, however, valid before in the pre-standard MSVC dialect.
[06:27:49] <YesMan> The code dates back 98, it's from the original homeworld. I'm using MSVC 5. do you know if there's some kind of command parameter that can enable this "dialect"?
[06:29:56] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[06:30:22] <Oxyd> C++ was first standardised in 1998, so it makes sense your code would be pre-standard. And no I don't, you should probably ask in a MSVC-related channel.
[06:33:24] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5)
[06:38:43] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5) (Ping timeout: 268 seconds)
[06:38:53] *** Joins: fredi (~fredi@189.6.232.131)
[06:39:01] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[06:44:02] <YesMan> #visualstudio is quite dead but I'll look into this thank you
[06:51:27] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5)
[06:54:11] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Ping timeout: 256 seconds)
[06:55:37] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5) (Ping timeout: 240 seconds)
[06:57:08] *** Quits: jehelset (~jeh@130.51-175-95.customer.lyse.net) (Remote host closed the connection)
[06:58:36] <fredi> I'm wondering about this keyword for a while now
[07:01:03] <fredi> Sebesta presents it as an example of Smalltalk but any OOP language will see an object messaging itself sooner or later
[07:03:04] <fredi> as for C++: "returns a reference to the object itself" sounds...
[07:04:37] <fredi> It's almost like the subject being avoided since unnecessary this never seemed to harm until the issue involving OpenMP
[07:05:49] <fredi> the way I see it, the cases which demand its use are but two:
[07:06:11] <fredi> either the object is to be returned, or passed as argument
[07:06:31] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[07:07:35] <fredi> one can simply avoid reusing identifiers within class scope, thereby removing need of this-ing
[07:09:01] <fredi> and most people I talked to up to now either failed to answer e.g. what exactly is a reference (so they could actually know how this works), or learned about it through experience or "deep reflection"
[07:10:12] <kalven> maybe you should get a textbook instead
[07:12:03] <RandomReader> if you're trying to analyze C++ decisions in the framework of abstract language theory, that probably won't get you very far, since many of the choices are practical ones
[07:12:24] <fredi> kalven  there is a textbook covering this subject? That would be very nice
[07:12:32] <fredi> RandomReader  not only that
[07:12:42] <RandomReader> if you're wondering about those choices, there's a book for that: The Design and Evolution of C++
[07:12:43] <fredi> specifically the OOPist paranoia about readability
[07:12:57] <RandomReader> I doubt that really applies, since C++ is not an OOP language
[07:13:19] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[07:13:49] <fredi> I came here bother you this late compelled by the mere fear of that to apply
[07:14:58] <fredi> the sooner I read the name of a textbook covering said topic in enough detail, I'd more than happily retire myself to sleep and put the blame in whoever failed to read it
[07:15:03] <fredi> but...
[07:16:42] <fredi> although I wouldn't dare to question JTC logic for deciding whatever
[07:16:58] *** Quits: lockywolf (~lockywolf@46.23.90.177) (Quit: ZNC 1.8.2 - https://znc.in)
[07:17:17] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[07:18:30] *** Joins: Enitin (~Enitin@82.102.22.84)
[07:18:32] <fredi> I can't brush off this feeling of C++ books tending to a simpler explanation "as a reference to..." as if actually possible to dissociate them of pointers, conceptually, and that people coming from Java and Python follow their scope rules
[07:18:47] <fredi> which, of course, does not hold
[07:19:35] <fredi> both examples, as far as I know, ain't able to refer to a class variable from inside of a method without this-ing/self-ing
[07:19:41] <Oxyd> Do you have a question about something? Because I'm not sure what the point of that wall of text is.
[07:19:52] *** Joins: lockywolf (~lockywolf@2a03:6000:6f63:638::177)
[07:20:53] <fredi> Oxyd  my only question is about a book covering the issue up to some degree. I'd accept anyone, ISO spec included
[07:21:22] <RandomReader> I'm not clear on what "the issue" is, since it seems to be one you've invented out of misconceptions
[07:21:36] <RandomReader> but, again, if you want to know about C++'s choices, Design and Evolution is that book
[07:21:48] <Oxyd> You can read the current draft standard here, regarding the “this” keyword: http://eel.is/c++draft/expr.prim.this
[07:22:58] <fredi> RandomReader  just saying that returns a reference to itself to be enough, that would be my issue
[07:23:02] <fredi> Oxyd  thanks
[07:24:03] <fredi> and that could end up being more a problem of how is often taught rather than a proper C++ issue, granted.
[07:24:27] <fredi> RandomReader  but still my best choice seemed to be here
[07:25:48] <fredi> and I believe the issue to be solved by merely reading "(...) names a pointer to the object for which (...)"
[07:25:57] <RandomReader> I don't know what you mean by the phrase "returns a reference to itself" though, since I'm not aware of any C++ material that presents the keyword "this" in that form
[07:26:02] <RandomReader> oh, ok
[07:26:17] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[07:28:00] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[07:35:12] *** Joins: supernova (~quassel@2405:9800:ba11:6207:404c:9ea0:8dbd:c271)
[07:35:19] *** Quits: supernova (~quassel@2405:9800:ba11:6207:404c:9ea0:8dbd:c271) (Client Quit)
[07:35:29] *** Joins: supernova (~quassel@2405:9800:ba11:6207:404c:9ea0:8dbd:c271)
[07:35:33] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 256 seconds)
[07:38:58] *** Quits: lockywolf (~lockywolf@2a03:6000:6f63:638::177) (Remote host closed the connection)
[07:40:20] *** Joins: lockywolf (~lockywolf@46.23.90.177)
[07:41:06] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 260 seconds)
[07:41:36] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[07:41:59] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[07:42:03] *** Joins: SaEeDIRHA (~saeed@bras-base-mtrlpq02hsy-grc-04-174-93-252-228.dsl.bell.ca)
[07:42:12] *** Joins: Enitin (~Enitin@82.102.22.86)
[07:42:43] <SaEeDIRHA> hello , i have a question , is there a difference between string_view and const string & ?
[07:43:17] *** Quits: supernova (~quassel@2405:9800:ba11:6207:404c:9ea0:8dbd:c271) (Ping timeout: 240 seconds)
[07:43:34] *** Joins: zmt00 (~zmt00@user/zmt00)
[07:43:56] <SaEeDIRHA> if the class constructor is defined as test(string_view input) or as test(string input), will that compile ?
[07:43:57] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[07:47:28] <SaEeDIRHA> if i initialize it like test x("my input");
[07:48:02] <bpalmer> SaEeDIRHA: sure, it will compile (but don't take my word for it; it's easy to try it an dsee).
[07:48:28] <bpalmer> SaEeDIRHA: but yes, there's a difference: one constructs a string (presumably std::string) and one constructs a string_view (presumably std::string_view)
[07:48:44] *** Joins: supernova (~quassel@2405:9800:ba11:6207:a151:a304:d0d1:18c6)
[07:49:07] <SaEeDIRHA> bpalmer, thank you fore your reply , this is the compilation error i get "error: call of overloaded ‘test(const char*&)’ is ambiguous"
[07:49:08] <bpalmer> a string_view doesn't "own" its memory, whereas a string does.
[07:50:02] <bpalmer> SaEeDIRHA: so it sounds like you have two different constructors defined in the overload set. Both a string_view and a string can be constructed from a const char* , so it's telling you that you need to clarify which you meant.
[07:50:09] *** Joins: rgrinberg (~textual@177.246.221.96)
[07:52:17] <SaEeDIRHA> i see, so when i declare a variable as auto input{"my string"}; the compiler would pass it as const char * ?
[07:53:01] *** Joins: Leonard (~Administr@114.55.127.80)
[07:53:10] *** Joins: bauripalash (~bauripala@2401:4900:3822:16e:1:1:17b2:2ec7)
[07:53:25] <bpalmer> yes.
[07:53:51] *** Quits: bauripalash (~bauripala@2401:4900:3822:16e:1:1:17b2:2ec7) (Client Quit)
[07:54:57] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[07:55:02] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[07:55:35] *** Joins: Leonard (~Administr@114.55.127.80)
[07:56:25] <SaEeDIRHA> thanks you
[07:59:08] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[08:01:51] *** Quits: SaEeDIRHA (~saeed@bras-base-mtrlpq02hsy-grc-04-174-93-252-228.dsl.bell.ca) (Quit: Leaving)
[08:02:08] *** Quits: chozorho (~chozorho@2601:146:300:c30::8360) (Quit: WeeChat 3.0)
[08:03:06] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[08:14:43] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[08:17:06] *** Quits: fredi (~fredi@189.6.232.131) (Quit: done)
[08:21:16] *** Quits: supernova (~quassel@2405:9800:ba11:6207:a151:a304:d0d1:18c6) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[08:23:12] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[08:23:37] *** Joins: andreasbuhr (~quassel@p549dbf2d.dip0.t-ipconnect.de)
[08:25:06] *** Quits: reset (~reset@user/reset) (Quit: reset)
[08:33:08] *** Quits: Nitrousoxide_ (~msdos@user/nitrousoxide) (Remote host closed the connection)
[08:34:05] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[08:34:24] *** Joins: Nitrousoxide (~msdos@user/nitrousoxide)
[08:42:51] *** Quits: YesMan (~YesMan@2a01cb088db9bd0001e70f0fc886fde9.ipv6.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[08:45:14] *** Quits: malloy (~jimery@116.30.221.255) (Ping timeout: 250 seconds)
[08:47:10] *** Joins: malloy (~jimery@116.30.221.255)
[08:52:02] *** Joins: supernova (~quassel@2405:9800:ba11:6207:a151:a304:d0d1:18c6)
[08:52:25] *** Quits: supernova (~quassel@2405:9800:ba11:6207:a151:a304:d0d1:18c6) (Client Quit)
[08:54:44] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[08:54:53] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:00:42] *** Quits: henbruas (~henbruas@ti0003a400-4203.bb.online.no) (Quit: ZNC 1.8.2 - https://znc.in)
[09:01:02] *** Joins: henbruas (~henbruas@ti0003a400-4203.bb.online.no)
[09:03:18] *** Joins: chozorho (~chozorho@2601:146:300:c30::5741)
[09:05:48] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5)
[09:10:17] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5) (Ping timeout: 240 seconds)
[09:15:54] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[09:22:44] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5)
[09:26:06] *** Joins: callq (~callq@157.41.89.228)
[09:27:02] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5) (Ping timeout: 240 seconds)
[09:30:12] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5)
[09:35:26] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5) (Ping timeout: 252 seconds)
[09:40:16] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:40:25] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:40:25] *** ChanServ sets mode: +v npaperbot
[09:46:46] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:47:08] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5)
[09:51:17] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5) (Ping timeout: 240 seconds)
[09:51:43] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[09:54:48] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5)
[09:55:36] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[10:09:02] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5) (Ping timeout: 260 seconds)
[10:14:19] *** Joins: unicky (~unickyllt@46.211.232.23)
[10:15:47] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5)
[10:19:29] *** Quits: unicky (~unickyllt@46.211.232.23) (Ping timeout: 268 seconds)
[10:21:29] *** Joins: Lazenca (~lazenca@user/lazenca)
[10:31:24] *** Quits: malloy (~jimery@116.30.221.255) (Ping timeout: 250 seconds)
[10:33:32] *** Joins: malloy (~jimery@116.30.221.255)
[10:35:03] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[10:35:17] *** Quits: thomasross (~thomasros@dyn-pppoe-142-51-227-74.vianet.ca) (Ping timeout: 240 seconds)
[10:36:34] *** Quits: chozorho (~chozorho@2601:146:300:c30::5741) (Quit: WeeChat 3.0)
[10:37:17] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[10:46:41] *** Quits: rgrinberg (~textual@177.246.221.96) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:48:23] *** Joins: rgrinberg (~textual@177.246.223.46)
[10:49:47] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Quit: ville)
[10:51:28] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[11:01:00] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[11:01:23] *** Joins: Leonard (~Administr@114.55.127.80)
[11:08:17] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[11:10:54] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[11:11:22] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[11:21:28] *** Quits: rgrinberg (~textual@177.246.223.46) (Read error: Connection reset by peer)
[11:22:35] *** Joins: rgrinberg (~textual@177.246.221.96)
[11:28:51] *** Joins: rendar (~rendar@user/rendar)
[11:32:57] *** Quits: Linux77 (~LinuMage@186.233.183.58) (Ping timeout: 240 seconds)
[11:35:08] *** Quits: rgrinberg (~textual@177.246.221.96) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:35:43] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Read error: Connection reset by peer)
[11:44:39] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[11:45:44] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[11:49:57] *** Quits: nvrhome (~Bop@user/nvrhome) (Ping timeout: 240 seconds)
[11:55:54] *** Quits: malloy (~jimery@116.30.221.255) (Ping timeout: 250 seconds)
[11:57:52] *** Joins: malloy (~jimery@116.30.221.255)
[12:01:18] *** Joins: magla (~gelignite@55d465a4.access.ecotel.net)
[12:06:50] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[12:16:09] *** Quits: Lazenca (~lazenca@user/lazenca) (Remote host closed the connection)
[12:24:27] *** Quits: troller (~p@2a02:6b8:b081:9::1:1b) (Remote host closed the connection)
[12:25:01] *** Joins: supernova (~quassel@2405:9800:ba11:6207:dc70:abb8:ab41:aa33)
[12:25:38] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[12:25:38] *** Joins: proller (~p@80.240.216.69)
[12:25:59] <montpol> what is the difference between     const std::vector<double> get_coordinates()  {return _coordinates;}} and
[12:26:05] <montpol> std::vector<double> get_coordinates()  const {return _coordinates;}}
[12:26:30] <TinoDidriksen> The first returns a const vector. In the second, "this" is const during the function execution.
[12:27:10] <TinoDidriksen> Both of them copy the whole vector, which is probably wasteful.
[12:27:33] <montpol> TinoDidriksen thanks but why is there a this when there are no pointers?
[12:27:59] <TinoDidriksen> It's a member function. Those always have a "this"
[12:28:16] <montpol> TinoDidriksen in this case creating an "origin" {0,0,0} would be why they would use std::vector<double> get_coordinates()  const {return _coordinates;}}. Or do you think that would also be wasteful?
[12:28:22] <montpol> Ahh ok
[12:29:38] <anyone> ("this" is just a pointer for historic reasons; it could as well have been a reference)
[12:30:03] <TinoDidriksen> I would change the return type to const std::vector<double>& and have the function be const. That way the caller can make a copy if needed, but otherwise there's no copy.
[12:30:10] *** Joins: sweetsymph (uid509475@id-509475.lymington.irccloud.com)
[12:31:45] <montpol> TinoDidriksen so have const get_coor() as well?
[12:32:29] <TinoDidriksen> Yes, const std::vector<double>& get_coordinates() const { return _coordinates; }
[12:32:48] <Eelis> if the number of dimensions is known at compile-time, which will be true in the vast majority of cases, you can get considerably better performance by using a coordinate type that stores all elements in-object rather than on the free store the way std::vector does
[12:33:21] <Eelis> for example,    struct Coordinates { double x, y, z; };  if the number of dimensions is 3
[12:33:37] *** Quits: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu) (Ping timeout: 256 seconds)
[12:33:49] <TinoDidriksen> I was wondering about that. {0,0,0} sounds like it's just 3D, which would indeed be better as a struct.
[12:38:56] *** Joins: the_lanetly_052 (~the_lanet@194.135.168.239)
[12:40:17] <ville> montpol: as a side note: if you're returning something by-value it rarely* makes sense to make it const. if you see that happening it should rise an eye brow. *) can't remember a single case where it made sense but perhaps someone has one
[12:40:17] *** Quits: the_lanetly_052_ (~the_lanet@185.30.88.216) (Ping timeout: 240 seconds)
[12:40:31] *** Joins: CoderCharmander (~CoderChar@20014C4C12563000C96363670EDAE354.catv.pool.telekom.hu)
[12:41:32] <montpol> TinoDidriksen to your point about return type const and the function be const, wouldnt that not be okay for when they want to have a class instance that is in fact not constant? If they say another instance is {1,2,3} and they want to change it later to something else.
[12:42:25] <ville> montpol: you can call const-qualified member funtions on non-const instances
[12:42:36] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5) (Ping timeout: 240 seconds)
[12:44:23] <ville> montpol: T f(); returns whatever T by-value. by-value means by-copy. the caller gets their own copy, semantically at least if not literally due to compilers deciding to do something
[12:45:45] <Eelis> i guess returning by-const-value made some sense pre-C++11 because calling a non-const function on a temporary was likely a mistake back then (since it suggests an intent to change the value, but for temporaries the value will be imminently lost)
[12:46:05] <montpol> I think this would help showing the entire class: https://bpa.st/PEKA
[12:46:06] <Eelis> but post-C++11, calling non-const functions on temporaries is commonplace, because it's how move semantics work
[12:46:32] <montpol> i added const to the function as well from Tino to test it out
[12:46:42] *** Parts: kernelspace (~heisenbug@user/ad/x-9056428) (WeeChat 3.3)
[12:46:56] <montpol> https://bpa.st/CDGA
[12:46:59] <montpol> that is better ^
[12:47:11] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000C96363670EDAE354.catv.pool.telekom.hu) (Ping timeout: 250 seconds)
[12:47:50] *** Joins: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu)
[12:48:03] <montpol> so 1. the class instance is constant (makes sense -- we don't want to change the origin). So to do that we need to make the return values const from get_coordinate(), right?
[12:48:06] <Eelis> montpol: will you really have client code that needs a runtime-provided number of dimensions? if not, using vector<double> for points is suboptimal
[12:48:37] <montpol> no this is just from a lecture, i think some things here are just for educational purposes
[12:48:52] <ville> montpol: if you're doing this just for fun then nevermind, but if you're doing some linear algebra and its all/mostly 3d then std::vector is probably not a good idea. it's a dynamic allocation to make one, and it's cache miss to access an element
[12:49:05] <ville> ...so nevermind
[12:51:54] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[12:55:59] <Eelis> montpol: if performance is completely unimportant, then you'd just return by value, becuase by not returning by reference you completely remove the risk of the caller holding on to a reference beyond the end of the referee object's lifetime, thus improving safety
[12:56:10] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5)
[12:56:54] <Eelis> but in practice, sane people only use C++ if there is a need for performance, and so the case where one is using C++ but performance is completely unimportant doesn't really come up unless one is ill-advisely using C++ outside its niche
[12:57:03] *** Quits: FergusL (~freenode4@user/fergusl) (Read error: Connection reset by peer)
[12:57:08] *** Joins: FergusL0 (~freenode4@23.247.118.78.rev.sfr.net)
[12:57:20] <montpol> Eelis interesting
[12:58:25] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[12:58:43] <montpol> Eelis when a function is supposed to be constant, why is then the const put before the argument and not before the actual function like this: f() const {} instead of const f() {}?
[12:59:32] *** Quits: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu) (Ping timeout: 240 seconds)
[13:00:37] <Eelis> montpol: for a member function declaration in some class, "const T f()" says "f may modify the object that f is called on, but will return an object by-value that the caller must treat as const", whereas "T f() const" says "f won't modify the object it is called on, but the object returned may be mutated by the caller"
[13:00:46] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5) (Ping timeout: 260 seconds)
[13:02:34] <Eelis> it's the difference between a "const member function returning a non-const value" and a "non-const member function returning a const value"
[13:02:41] <Eelis> where "
[13:02:50] <Eelis> const member function" means the function won't modify *this
[13:03:23] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[13:05:15] <montpol> Eelis thank you that is a nice explanation
[13:07:25] *** Joins: jsbach (~jsbach@2a01:c23:5cca:6000:4f07:ad77:c11c:4695)
[13:09:43] *** Joins: seninha (~seninha@user/seninha)
[13:11:44] *** Quits: callq (~callq@157.41.89.228) (Quit: callq)
[13:13:10] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5)
[13:13:36] <montpol> So essentially if performance is not really an issue, using c++ is not necessary? Eelis
[13:14:50] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[13:17:25] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5) (Ping timeout: 240 seconds)
[13:19:09] <Eelis> montpol: that's right. C++ is a very tedious language that's easy to screw up in, and when you screw up it can be extremely painful to debug. there is no point suffering all that pain if you don't actually need the specific benefits that C++ provides
[13:19:31] <Eelis> in such cases there are easier&safer languages
[13:19:33] <montpol> Eelis good to know :) thanks
[13:20:35] <anyone> I find the "safer" languages to be worse to debug. Often, it's their tooling that's terrible.
[13:20:42] <Eelis> in security-sensitive contexts it's especially important to carefully weigh pros and cons, because due to C++'s unprotected nature it's especially easy to accidentally make unsafe C++ software
[13:20:56] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[13:21:46] <Eelis> undefined behavior is around every corner
[13:22:03] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[13:22:08] <anyone> and safe languages have implicit conversions around every corner - and then their debugger isn't great, if they even have one (php?)
[13:22:46] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[13:24:08] <Eelis> no, safe languages need fewer implicit conversions to begin with because they can offer higher levels of abstraction. the number of ways you can pass an int to a function in Haskell is like 10x fewer than the number of ways you can pass an int to a function in C++
[13:24:22] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[13:24:33] <Eelis> this kind of simplification makes it profoundly easier to build higher levels of abstraction
[13:25:14] <Eelis> that's why functional programming in C++ is and has always been and will always be a silly gimmick
[13:25:41] <Eelis> while functional programming in e.g. Haskell is incredibly powerful and vastly improves productivity
[13:26:51] <Eelis> but of course in Haskell you pay a performance price for all that bliss. and so when performance matters one uses C++ after all :)
[13:27:20] *** Quits: malloy (~jimery@116.30.221.255) (Quit: WeeChat 3.0)
[13:29:07] *** Joins: ron77 (sid531856@id-531856.ilkley.irccloud.com)
[13:29:14] <ville> anyone: c and c++ are particularly good examples of implicit conversions gone bad
[13:29:56] <Eelis> the root tension is that mathematics and logic naturally favours immutable semantics because it makes things easier, while physics naturally favours mutable semantics because it's easier to implement in real world physics
[13:31:14] <ville> and for being so bad language-wise it's somewhat unfortunate that neither standard library comes with anything to help with them
[13:31:49] <ville> if i recall right c was now adding some support functions to theirs to check if an operation result would fit a type
[13:32:27] <Eelis> the main tool we have for reducing issues resulting from conversions is compiler flags like -Wno-implicit-conversions :P
[13:32:52] <Eelis> (or maybe it's -Wimplicit-conversions, i never know which way around the flags are)
[13:33:07] <ville> the -Wno- flavour turns off the specific warning
[13:33:14] <Eelis> thanks
[13:35:41] <ville> and sure that's an option, but that's committee just punting on the problem really
[13:36:53] <Eelis> ah it's -Wconversion, and that one doesn't warn about all implicit conversions. for example if you have   void f(std::string);  and do  f("lol");  it doesn't warn, which seems reasonable
[13:37:08] <ville> !-Wall
[13:37:09] <nolyc> -Wall is is only -Wsome; it leaves out many warnings. To really get a lot of warnings, you should use '-Wall -Wextra -Wpedantic -Wconversion -std=c++17 -O2'
[13:37:58] <Eelis> i guess it only warns about the "dubious" ones for some compiler-author-determined value of "dubious"
[13:38:37] <ville> yes, but gcc/clang have a pretty reasonable set, no idea about other compilers. not that gcc/clang agree completely
[13:38:51] <ville> and even from version to version with same compiler it may differ
[13:40:17] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:40:26] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:40:26] *** ChanServ sets mode: +v npaperbot
[13:41:58] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:50:34] <anyone> Is there an immediate effect when making a class constructor as noexcept?
[14:02:48] <ville> don't understand?
[14:03:46] <ville> you can query functions' and types' properties with type traits, so yes there may be code which uses those to details
[14:04:02] *** Joins: zer0bitz (~zer0bitz@196.244.192.54)
[14:04:32] <anyone> interesting aspect.
[14:05:29] <ville> likely your standard library's std::vector implementation would do it to see if move operations are noexcept. can't remember if it's ctor or assignment in particular
[14:06:13] <ville> but i've still no clue what you were asking for
[14:08:41] *** Joins: YesMan (~YesMan@2a01cb088db9bd00dc1e38da2dc417e6.ipv6.abo.wanadoo.fr)
[14:13:14] *** Joins: callq (~callq@2409:4062:2d92:448:e48d:d3de:c520:9560)
[14:14:08] <anyone> Got a set of Ks in the pattern of    using T = some fundamental type; struct K { K(T a, T b) : a_(a), b_(b) {}  T a_=0,b_=0; }; and thinking about slapping a "noexcept" on there.
[14:14:51] <anyone> but it's kind-of noexcept already by being composed of only natural types. Are compilers smart enough to see that they're inherently noexcept?
[14:27:59] *** Joins: furrymcgee (~devuan@cgn-213-196-210-78.nc.de)
[14:31:22] *** Joins: ko (~i.am@user/marlboro)
[14:32:57] *** Quits: AmR (~AmREiSa@156.199.202.96) (Ping timeout: 240 seconds)
[14:34:13] *** Joins: Linux77 (~LinuMage@186.233.183.58)
[14:45:14] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:47:13] *** Quits: the_lanetly_052 (~the_lanet@194.135.168.239) (Ping timeout: 250 seconds)
[14:48:25] *** Joins: reset (~reset@user/reset)
[14:49:45] <ville> http://www.eelis.net/c++draft/except.spec#7
[14:51:51] <ville> in other words the rules are so complext that a progammer can't reason about your code in reasonable amount of time. if you intend it to be noexept then make it so explicitly
[14:58:14] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[14:58:55] *** Joins: scsi-io (~scsi-ioio@2601:602:a080:e770::940b)
[15:03:37] *** Joins: LuksNuke_ (~LuksNuke@gateway/tor-sasl/luksnuke)
[15:06:24] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Ping timeout: 276 seconds)
[15:11:47] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 268 seconds)
[15:11:48] *** Quits: furrymcgee (~devuan@cgn-213-196-210-78.nc.de) (Remote host closed the connection)
[15:12:10] *** Joins: proller (~p@2a02:6b8:b081:8803::1:14)
[15:16:15] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 250 seconds)
[15:16:37] *** Quits: supernova (~quassel@2405:9800:ba11:6207:dc70:abb8:ab41:aa33) (Ping timeout: 240 seconds)
[15:21:58] *** Joins: furrymcgee (~devuan@cgn-213-196-210-78.nc.de)
[15:25:11] <jadew> is there a way to choose between virtual and pure virtual based on a concept?
[15:25:36] <jadew> without introducing a proxy class
[15:27:38] *** Joins: supernova (~quassel@2405:9800:ba11:6207:d839:c844:ddcf:c0f2)
[15:30:07] *** Quits: scsi-io (~scsi-ioio@2601:602:a080:e770::940b) (Quit: Leaving)
[15:33:23] <jadew> I guess it cannot be done with a proxy class either
[15:33:28] <jadew> interesting..
[15:36:36] *** Quits: magla (~gelignite@55d465a4.access.ecotel.net) (Quit: Stay safe!)
[15:38:21] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 256 seconds)
[15:40:53] *** Joins: plastico (~plastico@neomutt/plastico)
[15:44:01] *** Quits: letto (~letto@188.26.158.104) (Ping timeout: 256 seconds)
[15:45:12] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[15:47:00] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[15:49:47] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[15:50:41] *** Quits: YesMan (~YesMan@2a01cb088db9bd00dc1e38da2dc417e6.ipv6.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[15:56:19] *** Quits: andreasbuhr (~quassel@p549dbf2d.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[15:58:00] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[15:59:29] *** Joins: bebyx (~Thunderbi@user/bebyx)
[16:07:42] *** Joins: xiongxin (~Thunderbi@119.123.103.1)
[16:08:03] *** Joins: PJBoy (~PJBoy@user/pjboy)
[16:11:27] *** Joins: xkuru (~xkuru@user/xkuru)
[16:12:04] *** Joins: Leone (~Leo@157.52.18.77)
[16:12:13] *** Joins: CoderCharmander (~CoderChar@20014C4C12563000C96363670EDAE354.catv.pool.telekom.hu)
[16:13:57] *** Quits: callq (~callq@2409:4062:2d92:448:e48d:d3de:c520:9560) (Ping timeout: 240 seconds)
[16:14:08] *** Quits: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) (Quit: Leaving.)
[16:14:34] *** Joins: Burgundy (~yomon@79.115.213.171)
[16:15:55] *** Joins: pulse (~pulse@user/pulse)
[16:19:25] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[16:23:54] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[16:28:29] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Ping timeout: 252 seconds)
[16:33:19] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[16:33:37] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[16:34:59] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[16:35:21] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[16:39:01] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:497b:a765:e336:cc9b)
[16:39:46] *** Joins: tolog (~tolog@89.36.78.172)
[16:53:32] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:d8e5:b45f:7ffd:50ed)
[16:53:32] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:d8e5:b45f:7ffd:50ed) (Changing host)
[16:53:32] *** Joins: skapata (~Skapata@user/skapata)
[16:55:43] *** Quits: xiongxin (~Thunderbi@119.123.103.1) (Remote host closed the connection)
[17:05:00] *** Joins: stonkey (~stonkey@user/stonkey)
[17:07:05] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[17:09:55] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[17:10:13] *** Quits: T`alZHeimeR (~TaZ@user/taz/x-9470768) (Ping timeout: 240 seconds)
[17:11:55] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Client Quit)
[17:12:17] *** Joins: T`alZHeimeR (~TaZ@user/taz/x-9470768)
[17:12:27] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[17:14:40] *** Joins: the_lanetly_052 (~the_lanet@194.135.168.239)
[17:16:33] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[17:18:18] *** Quits: DrinkyBird (~drinkybir@idlerpg/player/DrinkyBird) (Remote host closed the connection)
[17:18:28] *** Joins: DrinkyBird (~drinkybir@idlerpg/player/DrinkyBird)
[17:22:23] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 252 seconds)
[17:28:33] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[17:29:02] *** Quits: tolog (~tolog@89.36.78.172) (Ping timeout: 240 seconds)
[17:32:21] *** Joins: cart_man (~rynot@host-78-144-125-216.as13285.net)
[17:34:03] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[17:38:04] *** Joins: Yruama (~Yruama@alyon-654-1-389-172.w109-213.abo.wanadoo.fr)
[17:38:23] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 250 seconds)
[17:40:17] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:40:25] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:40:25] *** ChanServ sets mode: +v npaperbot
[17:41:45] <CarloWood> Does <sstream> also include <string>?
[17:42:14] <CarloWood> In particular - does <sstream> define std::getline?
[17:42:52] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Quit: Konversation terminated!)
[17:45:13] *** Joins: Oleg (~Oleg@ool-45745511.dyn.optonline.net)
[17:45:39] <ville> CarloWood: no. in general the internal relations of headers is not specified. it may on your implementation
[17:45:47] <Oleg> geordi: --clang int main(){}
[17:45:47] <geordi> exception: execv
[17:46:03] <Oleg> okay, so, the clang bot will never be revived
[17:46:31] <PJBoy> clearly
[17:46:37] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Ping timeout: 250 seconds)
[17:46:47] <ville> Oleg: have such fix been refused?
[17:46:48] *** Quits: daswf852 (~daswf852@user/daswf852) (Read error: Connection reset by peer)
[17:46:55] *** Joins: daswf8524 (~daswf852@user/daswf852)
[17:46:55] *** Joins: yeirr (~yeirr@user/yeirr)
[17:47:16] *** Quits: yeirr (~yeirr@user/yeirr) (Client Quit)
[17:47:39] <Oleg> ville: what fix?
[17:47:53] <ville> 16:16:03          Oleg | okay, so, the clang bot will never be revived
[17:48:03] <PJBoy> for clang to not require file creation permissions
[17:50:06] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[17:54:35] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 268 seconds)
[17:54:51] *** Joins: unicky (~unickyllt@46.211.241.13)
[17:57:57] *** Joins: john99 (~john99@158.246.103.34.bc.googleusercontent.com)
[17:59:13] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[17:59:25] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[18:01:45] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[18:03:05] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[18:08:52] <john99> hi , which tis the idiomatic way of recover a polimorfi<c class from shared_ptr? https://godbolt.org/z/EKcqW5xeW
[18:10:33] <ville> https://en.cppreference.com/w/cpp/memory/shared_ptr/pointer_cast
[18:11:12] <john99> ummm, not sure if i want do the cast
[18:11:35] <PJBoy> pointer_cast is only needed if you want a shared_ptr
[18:11:43] <ville> what do you think a cast is and what your line 22 does?
[18:11:48] <PJBoy> otherwise regular cast on *b
[18:12:01] *** Joins: letto (~letto@188.26.158.104)
[18:12:07] <ville> or rather "would" do
[18:12:20] <john99> ville, i asume the code is incorrect, XD exist some way to copy the shared_ptr<Base> to Derived2?
[18:13:14] <john99> or Derived2& for force a exception if the cast cannot be done (becouse shared_ptr store a Derived1)
[18:13:20] <ville> john99: you can go about it in two ways... use the casts mentioned above, or first get the pointer out and then cast that
[18:13:36] <ville> plain pointer that is
[18:14:08] <ville> dynamic_cast<d&>(*p) ought to throw on failure
[18:16:46] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[18:18:23] *** Joins: JarbonFeh (~JarbonFeh@197.15.249.236)
[18:21:25] <john99> https://godbolt.org/z/svz7Khs7M okay, and i can put that in a copy operator?
[18:22:43] <john99> https://godbolt.org/z/Yejs1nsMn
[18:22:44] <john99> this
[18:23:22] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[18:23:56] <john99> https://godbolt.org/z/bPTr7Wffj
[18:24:02] <john99> working, this is very horrible?
[18:25:12] <PJBoy> extremely
[18:25:27] <john99> XD  i supposed, why?
[18:25:37] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[18:26:04] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[18:26:07] <CarloWood> You should add -O3  to the options (not that it improves a lot)
[18:26:32] <PJBoy> it looks like keyword stew
[18:26:58] <PJBoy> I guess a lot of C++ does
[18:27:20] <PJBoy> that operator= doesn't perform any assignment
[18:27:30] <PJBoy> you have `override final`, which should never go together
[18:27:38] <PJBoy> seemingly pointless virtual bases
[18:27:50] <PJBoy> seemingly pointless shared_ptr
[18:28:15] <PJBoy> that operator V& is unsafe
[18:28:18] <john99> yes, its a minimun example
[18:28:22] <ville> john99: i would expect some funny interactions to occur with such implicit operators. with out thinking about it too much, but usually they are fun corner cases most won't anticipate anyways
[18:28:37] <PJBoy> it should be explicit at minimum
[18:28:56] <john99> recommend keep the dynamic_Cast outside?
[18:29:21] <john99> like that? Derived1& c = dynamic_cast<Derived1&>(*b);  or with explicit?
[18:29:39] <john99> explicit keyword
[18:29:50] <Shell> john99: honestly speaking, it is idiomatic not to try and recover your subclasses. (as in every OO language.) trying to do so will look and behave weird.
[18:29:55] <PJBoy> if you need to do a checked polymorphic cast, then it does make sense to write out dynamic_cast explicitly
[18:30:22] <john99> ok
[18:30:34] <john99> well, other oportunity of use tempaltes failed XD
[18:30:35] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 252 seconds)
[18:30:37] <PJBoy> there's a reason casts were split up into various named_casts, so I think it's sensible to uphold that
[18:30:52] <ville> why would you _want_ to use them?
[18:31:05] <john99> its a project i am doing for learn
[18:31:39] <john99> probably i choosed the bad project or estructure, bcouse i ended with a lot of polimorfic
[18:31:41] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 252 seconds)
[18:31:55] <john99> but 0 templates
[18:32:18] <ville> ok, well my advice is just use templates as glorified copy paste mechanism. aka if you want to write std::vector-like. forget tmp and all the other crap
[18:32:32] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Quit: Client closed)
[18:32:48] <john99> yup, i suppose
[18:32:57] <ville> john99: if you want to practice tempates implement std::tuple. both ways. recursive inheritance and pack inheritance
[18:33:20] <john99> i am still in phase of learning
[18:33:39] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[18:33:48] <john99> but ok, i will check waht is pack inheritance
[18:34:06] <ville> john99: smith has couple talks about it over the year, so you could use those as a jumping point
[18:34:13] *** Joins: callq (~callq@2409:4062:2d92:448:d73:1a02:e27c:1e4a)
[18:34:19] <john99> who is smith?
[18:35:28] <ville> richard smith
[18:35:33] *** Joins: ania123 (~ania123@91.151.136.112)
[18:35:36] <ville> pretty sure it was him that had the talks...
[18:36:23] *** Joins: RoKenn (~RoKenn@2001:a61:3432:ab01:d0c4:7879:19ea:8ccb)
[18:36:23] *** Quits: RoKenn (~RoKenn@2001:a61:3432:ab01:d0c4:7879:19ea:8ccb) (Changing host)
[18:36:23] *** Joins: RoKenn (~RoKenn@user/rokenn)
[18:37:16] <ville> oh not it was alisdair meredith
[18:38:22] *** Quits: frost (~frost@user/frost) (Ping timeout: 268 seconds)
[18:38:24] <john99> ok, checking
[18:41:54] *** Joins: evangeline (~Eleanor@178.79.105.181)
[18:44:03] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[18:47:51] <ville> and when i said implement tuple i mean don't use anything from the standard library while doing so unless you absolutely have to
[18:48:39] <PJBoy> there's compositional implementation of tuple too, if you want three tuples
[18:48:52] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 268 seconds)
[18:50:38] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[18:55:25] <furrymcgee> "curiously recurring template pattern" is probably the idiomatic way of polymorphism
[18:57:50] <PJBoy> idiomatic how?
[18:58:40] <PJBoy> those base being a template usually means non-polymorphism
[18:58:51] <PJBoy> it's more of a idiomatic proto-metaclass
[19:02:06] <Alipha> anyone: it's generally not worth the hassle to go around marking everything noexcept which can be noexcept, unless you're making a library for public consumption. HOWEVER, always mark your move constructor and move operator= noexcept if appropriate because std::vector will have more optimal behavior if they're noexcept
[19:02:46] <furrymcgee> abstract base classes are idiomatic too
[19:04:17] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[19:05:12] *** Joins: Enitin (~Enitin@82.102.22.84)
[19:11:48] <furrymcgee> it is polymorphism because objects of different types have the same member functions
[19:11:55] <Alipha> john99: if you need to use dynamic_cast (or std::dynamic_pointer_cast) then that generally means you've designed your code badly. A base class should have enough virtual functions that you can do what is needed via the base class and not have to care what derived class the object really is. Or the inheritance is inappropriate to begin with. And use of std::shared_ptr also generally indicates bad code because
[19:11:56] <Alipha> it's unusual to need to use std::shared_ptr
[19:12:27] <CarloWood> Annoying that you can't increase the size of a std::string without initializing it. What if I want to reserve space up front and then write data to it?
[19:13:54] <john99> i am using shred_ptr for this https://github.com/JohnnyVM/liborm/blob/cmake/types/include/type/numeric.hpp
[19:14:00] <Alipha> CarloWood: default construct and then reserve and assume the compiler is smart enough to optimize out the default constructor
[19:14:48] <john99> Alipha, i cannot imagine how keep a list of returning values from the database and use that after without dynamic cast and inheritance
[19:15:03] <Alipha> john99: why not std::unique_ptr?
[19:15:30] <john99> at some moment i need cursor->getValue()
[19:16:12] <john99> at somemoment the container of the data will need share the data with the program
[19:16:40] <Alipha> john99: the container can give the program raw pointers
[19:17:06] <john99> that is better approach tahn shared_ptr?
[19:18:10] <Alipha> john99: yes. It sounds like you have one owner: the container of the data. One owner means std::unique_ptr. Anyone who needs to observe those objects can receive raw pointers
[19:18:24] <john99> okay
[19:18:40] <john99> i assumed that i ahd to avoid pointer at all cost
[19:18:44] <john99> had*
[19:19:05] <john99> ty
[19:19:17] <ville> john99: the "normal" way to discover the type dynamic type of something through a base* is to use a virtual function. no need for dynamic_cast
[19:19:52] <john99> yes, but i am imitating a SQL types
[19:20:04] <kalven> CarloWood: https://en.cppreference.com/w/cpp/string/basic_string/resize_and_overwrite coming in 23
[19:20:04] <john99> Integer is pretty diferent taht VARCAHR
[19:20:55] <Alipha> john99: raw pointers are a useful part of the language. You should only avoid having to use `delete` or `delete[]` yourself.
[19:21:26] <john99> Alipha, okay, for me marvelousXD  comming from C i amm pretty used to them
[19:22:42] <ville> john99: a downside of such approach is now having to stick the implementation of some logic into things that really feel/look like bags of data
[19:22:46] <Alipha> john99: I think I would make heavy use of templates instead of polymorphism for an orm. A database row would just be a std::tuple
[19:23:48] *** Quits: stonkey (~stonkey@user/stonkey) (Remote host closed the connection)
[19:23:48] <ville> john99: so then you can go about trying to discover the dynamic type by other means. visitor, std::visit()-like, dynamic_cast chain, look up on type filed... in no particular order
[19:23:55] <ville> err field
[19:24:16] <ville> john99: point being dynamic_cast is hardly to the only way to get at the dynamic type of something
[19:24:22] <john99> Alipha, the problem with that is that i dont know the type before the execute
[19:25:06] <john99> execute(stmt) -> tuple<????> how i can build that?
[19:25:32] *** Quits: proller (~p@2a02:6b8:b081:8803::1:14) (Ping timeout: 240 seconds)
[19:26:19] <john99> ville i havemy double dispatch try in other parts
[19:26:51] <john99> https://github.com/JohnnyVM/liborm/blob/cmake/types/include/type/factory.hpp
[19:27:36] <john99> *moving to unique
[19:29:08] *** Quits: ania123 (~ania123@91.151.136.112) (Quit: Client closed)
[19:30:17] *** Joins: stonkey (~stonkey@user/stonkey)
[19:32:21] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[19:34:36] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::414b)
[19:34:52] *** Joins: yeirr (~yeirr@user/yeirr)
[19:35:11] *** Quits: yeirr (~yeirr@user/yeirr) (Client Quit)
[19:37:13] *** Joins: paulf (~paulf@lfbn-lyo-1-397-34.w2-7.abo.wanadoo.fr)
[19:37:51] <furrymcgee> at some point you might have to assert(dynamic_cast<T*>(p));
[19:38:30] *** Joins: proller (~p@80.240.216.69)
[19:42:33] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[19:43:28] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[19:43:54] *** Joins: unickyll (~unickyllt@46.211.1.45)
[19:45:10] *** Joins: netpipe (~netpipe@user/netpipe)
[19:46:11] *** Quits: unicky (~unickyllt@46.211.241.13) (Ping timeout: 245 seconds)
[19:46:37] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[19:47:12] *** Joins: Enitin (~Enitin@82.102.22.85)
[19:47:27] <john99> furrymcgee, yup, i have that in mind
[19:49:21] *** Quits: JarbonFeh (~JarbonFeh@197.15.249.236) (Remote host closed the connection)
[19:50:54] <furrymcgee> usually you dont need c++ to read databases because databases are written in c++
[19:53:02] *** Joins: h4k1m0u (~h4k1m0u@2001:861:3146:5890:b1a9:7ba0:a1ae:7f4d)
[19:55:19] *** Joins: Leo_V (~Leo@157.52.18.77)
[19:57:19] *** Quits: Leone (~Leo@157.52.18.77) (Ping timeout: 256 seconds)
[19:58:23] <h4k1m0u> Hi, apologies in advance if it's not the right place to ask this kind of questions. Let's suppose I want to draw with the pencil tool (i.e. mouse cursor) in the main loop (opengl/imgui), what kind of data is usually saved so that the drawing is persistent? is it the coordinates of each point?
[20:00:14] <Alipha> !give h4k1m0u general
[20:00:15] <nolyc> h4k1m0u: #C++-general for algorithms, libraries, practices, projects, tools etc.
[20:00:38] <h4k1m0u> thanks Alipha, I'll ask it there
[20:06:14] *** Joins: magla (~gelignite@55d465a4.access.ecotel.net)
[20:07:54] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[20:09:02] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000C96363670EDAE354.catv.pool.telekom.hu) (Ping timeout: 252 seconds)
[20:09:17] *** Quits: Leo_V (~Leo@157.52.18.77) (Ping timeout: 240 seconds)
[20:11:13] *** Joins: LunarJetman (~LunarJetm@user/zogatribe)
[20:12:50] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[20:13:13] *** Joins: Leone (~Leo@157.52.18.77)
[20:13:54] *** Quits: Leone (~Leo@157.52.18.77) (Read error: Connection reset by peer)
[20:15:30] *** Joins: Leone (~Leo@157.52.18.77)
[20:25:24] <john99> hi
[20:25:24] <john99>  template<typename T, std::enable_if_t<std::is_integral<T>::value, bool> = true>
[20:25:25] <john99>  explicit operator T() { return (T)std::decimal::decimal_to_long_long(_value); }
[20:25:25] <john99> what is worng with that code?
[20:25:35] <john99> wrong?
[20:25:50] <ville> !give john99 testcase
[20:25:51] <nolyc> john99: A testcase is the _least_ amount of code that replicates your problem, paste it to https://wandbox.org/ then: 1) click run 2) click share 3) click url and 4) paste the url for us. You _must_ use that website. Do _not_ use a different website. Do _not_ paste code to the channel. See the testcase checklist at http://eel.is/iso-c++/testcase/
[20:26:07] *** Joins: chozorho (~chozorho@2601:146:300:c30::b5c2)
[20:26:08] <john99> am, its not bad constructed?
[20:26:25] <ville> that does not parse
[20:26:31] <Alipha> well, operator T() should probably be const. `explicit operator T() const { return ...`
[20:26:38] <Alipha> but at a glance, i don't see anything wrong
[20:27:24] <john99> okay, then its a { or ) missing at some part
[20:27:33] <john99> Alipha why const?
[20:28:30] <Alipha> john99: because your operator T() doesn't modify the object
[20:29:01] <john99> am, const T() is the const for the returned value
[20:29:10] <john99> T() const if for the object
[20:29:11] <john99> okay
[20:29:39] *** Joins: unicky (~unickyllt@46.211.13.143)
[20:32:08] *** Quits: unickyll (~unickyllt@46.211.1.45) (Ping timeout: 252 seconds)
[20:33:22] <Alipha> john99: https://godbolt.org/z/fvTT1cbje  .... perhaps read more about "const member functions". you should mark any member function as const if it doesn't modify the object it's operating on
[20:34:46] <john99> okay, inline is too important? or its better leave the compiler guess¨?
[20:35:47] <ville> john99: umm... inline doesn't mean inline optimize this function. inline means: "don't complain about multiple definitions"
[20:36:17] <john99> ummmmmmmm. ok taht diferent from C really
[20:36:19] <ville> john99: as a side effect of the function definition being visible at callsite the optimizer _may_ inline optimize the call
[20:36:26] <ville> john99: it's the same for C
[20:36:27] <Alipha> !inline
[20:36:28] <nolyc> The inline specifier was historically intended to be a code inlining hint. However, it has a semantic effect; functions marked inline can be defined in every TU in which they are used (as long as the definitions are identical), making headers the appropriate place to define them if they are used in multiple TUs
[20:36:48] <LunarJetman> inline function doesn't have to be visible at the callsite
[20:37:05] <Alipha> the `inline` keyword lets you put a function's implementation in the header :-)
[20:37:29] <john99> ammmmmmmmmm
[20:37:32] <john99> okay ty
[20:38:37] <Alipha> ... which you're putting the function in the header probably because you want the compiler to perform inlining of it
[20:39:24] <john99> umm, i assumed that in C++ you can simply define functions in the header
[20:39:30] <john99> i didnt know you need inline it
[20:39:35] <Alipha> c++ has this weird thing of naming things based upon intention, not actually what it does :-) second example: std::move
[20:39:41] <ville> no, still the same "one definition" rules apply
[20:40:02] <john99> okay, well, general review of headers then XD
[20:40:17] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 240 seconds)
[20:40:33] <ville> marking something inline let's you have multiple definitions. and sticking a function definition in header that is included in multiple translation units results in multiple definitions of that function
[20:40:46] *** Quits: Xark (~Xark@47.156.11.28) (Ping timeout: 245 seconds)
[20:40:54] <LunarJetman> and yet I cannot think of a better alternative to "std::move" based on what it does
[20:41:11] <ville> xvalue_cast
[20:41:14] <LunarJetman> ew
[20:41:33] <Alipha> john99: https://wandbox.org/permlink/4tXMyECXSXeuJj20 both the main file and bar.cpp include "foo.h". which means the foo() function gets defined in both the main file and bar.cpp. you link the two cpp files together and you get multiple definitions of foo
[20:41:38] <LunarJetman> yeah make C++ even harder to undestand that it already is
[20:41:50] <Alipha> LunarJetman: no, it is actually a good name
[20:41:55] <Alipha> (std::move)
[20:42:24] <ville> std::move() is just shit. for one it shouldn't be feature locked behind an include
[20:42:26] <LunarJetman> I contend that 90% of C++ programmers don't know what an xvalue is
[20:42:51] *** Quits: unicky (~unickyllt@46.211.13.143) (Ping timeout: 245 seconds)
[20:42:55] <john99> wua, i have to add a lot if const final and inlineXD  the 50% of the code are keywords
[20:43:00] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[20:43:04] <ville> moving is basic every day programming, not some arcane feature. requiring a header for basic language functionality is just batshit
[20:43:25] <ville> john99: yeah... or just don't bother.
[20:43:32] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[20:44:06] <ville> john99: const is ok to add at function boundaries. final slightly less so. you'd add it if you can get devirtuazation with it possibly
[20:44:17] <LunarJetman> ville: std::move is a convenience: you could explicitly write what std::move does but why bother? it would be more characters and look too verbose
[20:44:41] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[20:44:58] <ville> which i do of course. i don't use std::move
[20:45:13] <LunarJetman> then it is you that is batshit rather than the language
[20:45:25] <john99> my feeling is that C++ is building around the idea of not le someone simply take your code and compile (final, concepts, enable_if, override, etc)
[20:45:28] <ville> no it's still the language
[20:45:51] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[20:46:19] <LunarJetman> not using std::move because it is defined in a header file is irrational
[20:46:32] *** Joins: unicky (~unickyllt@46.211.13.143)
[20:49:55] <anyone> most everything std:: is in some header
[20:50:01] *** Joins: spidermonkey54 (uid527699@id-527699.uxbridge.irccloud.com)
[20:51:01] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[20:51:09] *** Quits: joo-_ (~joo-_@fsf/member/joo--) (Ping timeout: 256 seconds)
[20:52:08] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[20:52:09] *** Quits: h4k1m0u (~h4k1m0u@2001:861:3146:5890:b1a9:7ba0:a1ae:7f4d) (Ping timeout: 256 seconds)
[20:54:03] *** Joins: slidercrank (~slidercra@user/slidercrank)
[20:56:52] <john99> i can override a virtual const member?
[20:57:04] <anyone> I want to see you try.
[20:57:25] <john99> XD
[20:57:45] <john99> i cannot, but i dont know if its normal or becouse i am doing something weird
[20:58:00] <anyone> You're doing something weird.
[21:03:03] *** Quits: Forsaken87 (~quassel@2a02:908:1866:e360:88b0:2032:220f:3f73) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:03:37] *** Quits: supernova (~quassel@2405:9800:ba11:6207:d839:c844:ddcf:c0f2) (Ping timeout: 240 seconds)
[21:03:59] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[21:06:01] <john99> yup, fixed
[21:06:02] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[21:06:15] *** Joins: Forsaken87 (~quassel@2a02:908:1866:e360:88b0:2032:220f:3f73)
[21:09:12] *** Joins: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu)
[21:09:29] *** Parts: spidermonkey54 (uid527699@id-527699.uxbridge.irccloud.com) ()
[21:10:03] <PJBoy> std::move increases compile times compared to static_cast
[21:10:10] <PJBoy> or at least that's the claim I've seen
[21:10:51] <PJBoy> dodging readability for compile time is a bad move IMO, but hey
[21:12:04] *** Joins: ferdna (~ferdna@user/ferdna)
[21:12:28] <anyone> easily combatable by making your own move() template in a header of your own that you'll pretty much include anyway, just in the very obscure case you're never including <utility> for some reason
[21:17:01] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 250 seconds)
[21:18:05] *** Quits: baltazar (~baltazar@85-238-65-123.pool.digikabel.hu) (Ping timeout: 268 seconds)
[21:18:21] *** Quits: mitch0 (~mitch@85-238-65-123.pool.digikabel.hu) (Ping timeout: 256 seconds)
[21:19:12] <LunarJetman> PJBoy: I doubt that claim very much
[21:19:19] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 268 seconds)
[21:19:20] *** Joins: baltazar (~baltazar@84-236-61-122.pool.digikabel.hu)
[21:19:48] <LunarJetman> oh
[21:19:50] <LunarJetman> compile time
[21:19:54] <LunarJetman> not runtime
[21:19:58] *** Joins: mitch0 (~mitch@84-236-61-122.pool.digikabel.hu)
[21:20:03] <LunarJetman> I don't really give a fuck about compile time
[21:20:14] <LunarJetman> runtime performance is what matters to me
[21:20:23] <LunarJetman> *and* readability
[21:20:29] <Pajus> sounds like a cowboy
[21:20:31] <LunarJetman> compile time is bottom of the list
[21:21:31] *** Joins: Burgundy (~yomon@79.115.213.171)
[21:22:42] *** Quits: myon98 (~myon98@user/myon98) (Ping timeout: 250 seconds)
[21:22:44] *** Joins: thomasross (~thomasros@dyn-pppoe-142-51-227-74.vianet.ca)
[21:24:07] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[21:25:35] <LunarJetman> if compile time is a problem then just throw CPU cores and a ramdisk at it
[21:26:50] *** Joins: Xark (~Xark@47.156.11.28)
[21:26:50] <LunarJetman> Pajus: ?
[21:27:30] <Pajus> sorry wrong windows keep doing great job, God bless US
[21:27:40] <Pajus> and happy new year
[21:29:54] *** Joins: rgrinberg (~textual@2806:101e:7:33a5:94b6:4a60:d424:26d4)
[21:30:39] *** Quits: cart_man (~rynot@host-78-144-125-216.as13285.net) (Quit: Konversation terminated!)
[21:36:55] *** Quits: netpipe (~netpipe@user/netpipe) (Ping timeout: 256 seconds)
[21:40:18] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:40:27] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:40:27] *** ChanServ sets mode: +v npaperbot
[21:46:16] *** Joins: Betal (~Betal@user/betal)
[21:50:05] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[21:50:36] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[21:51:26] *** Quits: john99 (~john99@158.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[21:53:02] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 240 seconds)
[21:54:03] *** Joins: NEYi (~NEYi@109.251.216.38)
[21:54:57] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 240 seconds)
[21:55:45] *** Quits: Linux77 (~LinuMage@186.233.183.58) (Ping timeout: 256 seconds)
[21:55:51] *** Joins: AmR (~AmREiSa@156.199.20.227)
[21:56:02] *** Joins: Burgundy (~yomon@79.115.213.171)
[21:56:15] *** Joins: Linux77 (~LinuMage@186.233.183.58)
[22:03:15] *** Joins: yomon (~yomon@79.115.213.171)
[22:03:57] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 240 seconds)
[22:09:48] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[22:13:11] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:14:33] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:14:42] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[22:16:07] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:28:46] *** Quits: furrymcgee (~devuan@cgn-213-196-210-78.nc.de) (Quit: leaving)
[22:32:35] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 252 seconds)
[22:32:46] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[22:33:38] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[22:33:43] *** Quits: Jonno_FTW (~come@user/jonno-ftw/x-0835346) (Ping timeout: 256 seconds)
[22:33:52] <Pajus> 3~ you will be contacted shortly, follow the white rabbit
[22:35:15] *** Quits: sweetsymph (uid509475@id-509475.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[22:35:23] *** Joins: Jonno_FTW (~come@api.carswap.me)
[22:36:51] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[22:39:27] *** Joins: str41 (~finn@172.58.47.4)
[22:40:02] <str41> what is c++ mostly used for?
[22:44:28] *** Parts: str41 (~finn@172.58.47.4) (goodbye all uwu)
[22:44:29] <anyone> all the things
[22:45:00] *** Quits: rgrinberg (~textual@2806:101e:7:33a5:94b6:4a60:d424:26d4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:46:03] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[22:46:22] *** Joins: cursey (~cursey@user/cursey)
[22:47:21] *** Quits: paulf (~paulf@lfbn-lyo-1-397-34.w2-7.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[22:49:20] *** Joins: pulse (~pulse@user/pulse)
[22:51:38] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[22:53:40] *** Quits: LunarJetman (~LunarJetm@user/zogatribe) (Ping timeout: 268 seconds)
[22:55:41] *** Joins: ethrl (~ethereal@user/doforlove33)
[22:57:42] *** Joins: rgrinberg (~textual@2806:101e:7:b2bc:b9e9:b5b0:1484:bd77)
[22:58:50] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[22:59:13] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[22:59:26] *** Quits: rgrinberg (~textual@2806:101e:7:b2bc:b9e9:b5b0:1484:bd77) (Client Quit)
[23:00:03] *** Joins: LunarJetman (~LunarJetm@user/zogatribe)
[23:00:32] *** Joins: rgrinberg (~textual@2806:101e:7:b2bc:b9e9:b5b0:1484:bd77)
[23:02:07] *** Quits: rgrinberg (~textual@2806:101e:7:b2bc:b9e9:b5b0:1484:bd77) (Client Quit)
[23:02:37] *** Quits: Linux77 (~LinuMage@186.233.183.58) (Ping timeout: 256 seconds)
[23:03:42] *** Quits: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu) (Read error: Connection reset by peer)
[23:04:25] *** Joins: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu)
[23:06:49] *** Quits: callq (~callq@2409:4062:2d92:448:d73:1a02:e27c:1e4a) (Quit: callq)
[23:06:57] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:497b:a765:e336:cc9b) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:11:59] *** Joins: Linux77 (~LinuMage@186.233.183.58)
[23:13:38] *** Quits: pulse (~pulse@user/pulse) (Quit: My hovercraft is full of eels)
[23:18:02] *** Quits: ethrl (~ethereal@user/doforlove33) (Remote host closed the connection)
[23:24:03] *** Joins: winhttp (~winhttp@s46ee6a5c.fastvps-server.com)
[23:31:26] *** Quits: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) (Quit: Leaving.)
[23:31:35] *** Joins: sweetsymph (uid509475@id-509475.lymington.irccloud.com)
[23:34:04] *** Quits: magla (~gelignite@55d465a4.access.ecotel.net) (Quit: Stay safe!)
[23:54:45] *** Quits: Linux77 (~LinuMage@186.233.183.58) (Ping timeout: 256 seconds)
[23:55:18] <cbreak> post-increment
[23:55:20] *** Joins: the_lanetly_052_ (~the_lanet@194.135.166.92)
[23:55:22] *** Joins: Linux77 (~LinuMage@186.233.183.58)
[23:57:17] *** Quits: the_lanetly_052 (~the_lanet@194.135.168.239) (Ping timeout: 252 seconds)
[23:57:23] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[23:59:03] *** Quits: winning-luser (~wl@2601:8c1:80:70d0::414b) (Quit: Leaving)
