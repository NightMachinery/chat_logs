[00:00:47] *** Joins: makomo_ (~makomo@user/makomo)
[00:08:08] *** Quits: makomo_ (~makomo@user/makomo) (Quit: WeeChat 3.2)
[00:08:50] *** Joins: raeda (~raeda@72.49.219.33)
[00:12:27] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:13:29] *** Parts: contrapunctus (a75f5b1571@jabberfr.org) ()
[00:17:24] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:22:00] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[00:27:11] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 245 seconds)
[00:28:38] <mfiano> hayley: https://www.reddit.com/r/lisp/comments/q2esnh/share_your_bookshelfves/hfndoal/
[00:28:40] -ixelp- Share your bookshel{f,ves} : lisp
[00:43:54] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 265 seconds)
[00:55:21] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:56:01] *** Quits: mala (~mala@user/malaclyps) (Quit: ZNC 1.6.1 - http://znc.in)
[00:56:15] *** Joins: mala (~mala@user/malaclyps)
[00:58:38] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:59:09] <Gnuxie> selwyn: https://www.mirror.co.uk/news/politics/tories-put-lgbt-society-section-25149839
[01:00:59] <selwyn> gay tories will not care/compartmentalise it somehow
[01:01:49] <selwyn> an mp also said that 81k is not high enough to live on lol
[01:03:48] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[01:09:35] <Gnuxie> lel
[01:10:09] <selwyn> do you think the section 28 thing was deliberate?
[01:10:45] <Gnuxie> yeah how else would the mirror pick up on it 
[01:13:42] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[01:16:18] <selwyn> i know lots of gay tories
[01:19:34] <selwyn> afaict, even though there is still a lot of homophobia in the party, and a lot of gay people
[01:19:52] <selwyn> in practice they put their differences aside, fall in line, and be tories together
[01:20:17] <selwyn> the same way they approach every other internal division e.g. brexit (at the end)
[01:20:58] <Gnuxie> yeah there's plenty of cases of queer people oppressing themselves and others like that 
[01:20:59] <selwyn> as i understand it, a tory who simply refused to work with gays would not be able to last long for practical reasons anyway
[01:21:06] <selwyn> but this is not how the bigotry is usually expressed anyway
[01:22:26] <Gnuxie> there's so much pressure to hide being queer in every day life never mind if you were a member of the tory party 
[01:22:44] <selwyn> well
[01:22:54] <selwyn> the ones i know are based in and around westminster
[01:23:10] <selwyn> whitehall/houses of parliament
[01:23:19] <selwyn> different vibe perhaps
[01:32:23] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[01:33:35] <selwyn> tbh i get more mad at labour right bigots
[01:34:44] <selwyn> perhaps it is immature of me, but when i look at tories i think ´they are just doing what they are supposed to´
[01:35:07] <selwyn> labour right is why we can´t have nice things (in labour)
[01:43:27] <copec> https://www.pcworld.com/article/541596/windows-11-might-tank-ryzen-cpu-performance-amd-warns.html
[01:43:29] -ixelp- Windows 11 might tank Ryzen CPU performance, AMD warns | PCWorld
[01:46:41] <copec> It's good that they checked that it would run well on modern CPUs before they released it
[01:49:41] *** Quits: mala (~mala@user/malaclyps) (Ping timeout: 245 seconds)
[01:49:59] *** Joins: mala (~mala@user/malaclyps)
[01:54:41] *** Quits: random-nick (~random-ni@87.116.183.117) (Ping timeout: 245 seconds)
[02:19:01] *** Quits: mala (~mala@user/malaclyps) (Read error: Connection reset by peer)
[02:20:02] *** Joins: mala (~mala@user/malaclyps)
[02:46:07] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[02:46:31] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[03:02:03] <hayley> https://www.youtube.com/watch?v=Dxnr2FAADAs
[03:02:03] -ixelp- Take a look inside Steam Deck™! - YouTube
[03:35:23] <mfiano> I've been reading PAIP and I'm enjoying it so far.
[03:35:41] <mfiano> I forget when it was published, but I'm guessing pre-ANSI.
[03:36:06] <mfiano> I'm not sure if the numerous errors I've spotted are due to pre-standardization, or just a pedagogical tool.
[03:36:41] <mfiano> Like, he describes operators such as SETF and DEFPARAMETER as "Special Forms".
[03:39:53] <gilberth> SETF and DEFPARAMETER never were special forms. So I guess the author wanted to avoid an excursion on special forms^Woperators and macros.
[03:40:18] <mfiano> He also explains ASSOC strangely.
[03:40:42] <gilberth> How so?
[03:40:52] <mfiano> "It takes two arguments, a "key" and a list of lists, and returns the first element of the list of lists that starts with the key."
[03:41:29] <mfiano> I guess he didn't want to explain cons cells, even though they are simpler?
[03:41:42] <moon-child> simpler in what sense?
[03:42:00] <moon-child> I have never programmed before; I know what a list is, but not what a cons is
[03:42:11] <gilberth> Is the book advocating the FIRST and REST non-sense?
[03:42:14] <moon-child> so surely I find the former simpler
[03:42:17] <mfiano> He explained cons cells way before ASSOC though
[03:42:19] <mfiano> ASSOC doesn't operate on a list of lists.
[03:42:28] <moon-child> mfiano: ahh
[03:42:32] <mfiano> It can, but a cons is not a list
[03:42:41] <gilberth> Yep.
[03:43:01] <mfiano> gilberth: Yes it is. Let me find the quote
[03:43:11] <gilberth> Also: How would RASSOC have been described?
[03:44:25] * gilberth owns a copy of PAIP, read it once ages ago, and didn't find it very interesting.
[03:44:40] <hayley> https://www.youtube.com/watch?v=Rf5pzdtkjhg
[03:44:41] -ixelp- International (Architecture & Morality - Dazzle Ships - Live At The Royal Albert Hall) - YouTube
[03:46:00] <mfiano> https://gist.github.com/mfiano/ebfc72a0636be6e50b754778a570a721
[03:46:00] -ixelp- 1.txt · GitHub
[03:46:57] <hayley> Makes sense to me.
[03:47:06] <selwyn> apparently politicians claiming to have read ulysses is a thing
[03:48:22] <gilberth> I too old-school to use FIRST and REST. But in this case ASSOC should be been described as a function on a key and a list of pairs, the CAR being a key and the CDR being a value.
[03:49:08] <mfiano> Right. The CDR could very well be a cons rather than an atom. Doesn't make it any less of a containing cons though
[03:50:48] <gilberth> Yes, and actually as CAR and CDR practically stand for nothing, its use is universal. Here CAR happens to be a key, next time CAR may be a LHS, or what ever. Using any other name would not have that property.
[03:51:56] <mfiano> '((1 . 2) (3 4 5))
[03:52:10] <mfiano> is actually an alist and a plist, with vastly different semantics :)
[03:53:27] <gilberth> Or sth else altogether.
[03:54:42] <gilberth> FIRST and REST also break IMHO because they are defined on NIL, the empty list. An empty list has no first element.
[03:55:46] <gilberth> So it's a misnommer.
[03:55:47] <mfiano> Though GETF is defined to only use EQ for some strange reason, so that may be arguable.
[03:56:11] <White_Flame> however, for a list entry in an alist which is always (key . value), that always does decompose into a first & rest
[03:56:37] <gilberth> Yes, those property list come form the property lists symbols have.
[03:57:22] <gilberth> White_Flame: Yes, but NIL is not the first element of the list (). It has no first element.
[03:59:30] <mfiano> It does make a lot of algorithms simpler to deal with though. I think I prefer this way after a couple decades of use, over the erroring Scheme case.
[03:59:32] <gilberth> I mean, compare to (ELT NIL 0).
[04:00:01] <gilberth> mfiano: I do, too, and this also is why I use CAR and not FIRST.
[04:00:33] <mfiano> I use both, dependent on the intent I want to convey.
[04:00:49] <White_Flame> (I always use car/cdr as well, just that the alist does actually work with first/rest)
[04:01:01] <White_Flame> *conceptually
[04:03:03] <mfiano> Anyway, I am enjoying the book so far. Only about 100/1000 through it
[04:03:21] <gilberth> mfiano: But note, that the initial definition of CAR[x] made it only being defined for cons cells. This got fixed rather quick.
[04:03:51] <mfiano> Yes
[04:05:23] <gilberth> mfinao: Otherwise, have you enjoyed that book so far. And I find it funny that I spot it on every bookshelf I saw tonight. Must be a beseller.
[04:05:43] <gilberth> * bestseller
[04:06:40] <mfiano> It's been on my to-read list for a while. Mostly because I wasn't very interested in old AI techniques until recently, and I feared the book would not be very applicable to modern code.
[04:07:07] <mfiano> But on the list regardless because it uses CL by an author that knows the field well
[04:07:41] <mfiano> I am now gaining a curiosity in traditional AI work, so it moved up in the queue
[04:08:27] <gilberth> Yes, that sort of AI we don't call AI anymore, because we figured it out.
[04:08:43] <mfiano> I have roughly 40-50 lisp books, and I make an effort to read them all.
[04:09:29] <mfiano> Oops, I lied. Looks like 37 at the moment.
[04:09:30] <gilberth> Wow, that many! I am surprised that there are so many.
[04:09:40] <gilberth> Heh.
[04:10:19] <gilberth> I have none of the newer CL books.
[04:12:33] <mfiano> Heh, make that 39 actually. Forgot to count the 2 not on my shelves :)
[04:22:05] <mfiano> gilberth: 38 is the final number. 1 didn't belong. https://gist.github.com/mfiano/332ef8eacce51cb3bf1d8ddfb590fa24
[04:22:05] -ixelp- 1.txt · GitHub
[04:22:56] <mfiano> There are a couple scheme books mixed in there though. I don't have the heart to separate them from lisp's history, as much of a CL purist I am. I did however place my one CLojure book on a shelf far away from them :)
[04:28:01] <selwyn> only a couple? the rest are on cl? wow
[04:29:05] <mfiano> 6/38 are based in Scheme
[04:29:08] <selwyn> i have like 6 books and i thought i had basically everything
[04:29:49] <mfiano> I am missing a few I'd like to get
[04:29:57] <gilberth> mfiano: You own "Building your own Lisp"? Seriously? You must be kidding.
[04:29:59] <mfiano> Like Lisp 1.5 Programmer's Manual
[04:31:13] <mfiano> gilberth: "Build"? Yes, but have not read it.
[04:31:14] <manicennui> Do you have Realm of Racket and Land of Lisp?
[04:31:33] <mfiano> Land of Lisp is listed there. I have no interest in Racket, so no.
[04:31:52] <manicennui> Oh, sorry, missed the list.
[04:31:55] <gilberth> mfiano: My bookself only shares (3 20 27 30) with yours.
[04:32:30] <mfiano> All very good books
[04:32:31] <GreaseMonkey> my bookshelf shares ()
[04:32:57] <gilberth> mfiano: Toss that book!
[04:33:03] <GreaseMonkey> i actually have no physical lisp or even lisp-esque books, although i did have the smalltalk-80 blue book but i don't know what happened to it
[04:33:08] <mfiano> gilberth: ?
[04:33:22] <gilberth> hayley!
[04:34:44] <mfiano> A quick skim I did a while ago suggests it's written by a little kid that  just learned C and programming in general, and wanted to (gasp) make a lisp, like everyone does as a beginner
[04:34:55] <mfiano> But I haven't read it, and I will tkae your word for it
[04:35:26] <mfiano> It's nice to know my suspicion was at least somewhat correct though. I still like to collect Lisp literature though.
[04:35:53] <gilberth> Here it is: https://gist.github.com/no-defun-allowed/7e3e238c959e27d4919bb4272487d7ad
[04:35:53] -ixelp- Don't Build Your Own Lisp · GitHub
[04:37:45] <gilberth> tl;dr The author neither knows C nor Lisp.
[04:39:05] <selwyn> doesn´t know c?
[04:39:58] <GreaseMonkey> "C programs crashing is a fact of life." the best rebuttal to that is "oh, we're only talking about *your* C programs?"
[04:40:03] <gilberth> Nope. At least he can't hack using it C.
[04:40:38] <gilberth> Using strcmp where EQ would do. Parsing in O(n**2) and all those nice things.
[04:40:53] <gilberth> mfiano: No AMOP on your shelf?
[04:41:04] <GreaseMonkey> also a basic scheme implementation in C tends to look more and more like scheme as it evolves
[04:41:10] <GreaseMonkey> unless you dun goofed
[04:41:30] <gilberth> Despite the language he implements being utter shit.
[04:41:50] <mfiano> gilberth: Of course there is. That was the CAR of your list
[04:41:55] <selwyn> greasemonkey: lol
[04:42:08] <gilberth> GreaseMonkey: When C programs would at least crash.
[04:42:26] <gilberth> mfiano: My bad. Sorry.
[04:42:30] <GreaseMonkey> i'm talking stuff like: EVAL(CONS(SYM("display"), CONS(STR("you dun goofed"), NIL()));
[04:43:28] <selwyn> thats kind of what clasp looks like
[04:43:32] <GreaseMonkey> "We start to see an object representation emerge in this chapter." ...in chapter 8.
[04:44:29] <selwyn> goodnight everyone
[04:44:36] <gilberth> Take care!
[04:44:39] <GreaseMonkey> have a good one
[04:44:52] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[04:45:44] <gilberth> I keep repeating myself: That book is dangerous.
[04:48:42] <gilberth> I find it funny how keywords must be quoted on the CADR and methods are sent by FUNCALL, so you say (FUNCALL STREAM ':FORCE-OUTPUT) instead of (FORCE-OUTPUT STREAM)
[04:49:41] <gilberth> And I am getting used to octal.
[04:52:47] <mfiano> always enjoy reading hayley's blunt no bullshit reviews :)
[04:53:03] <mfiano> well guess that book is worse than I thought and off the queue
[04:56:48] <GreaseMonkey> the feeling i get is that your money would be better spent by reading the Make A Lisp tutorial for free dollars
[04:57:48] <White_Flame> gilberth: very let-over-lambda'ish with the funcall
[05:02:34] <mfiano> Ok, Norvig's first bit of code that severely bothers me was just presented
[05:07:29] <gilberth> White_Flame: How this works is funny in that Lisp. Remember that there are lexical closures. But you can build dynamic closures, by CLOSURE or LET-CLOSED. (CLOSURE '(X Y Z) (FUNCTION (LAMBDA ...)) gives you a closure, which when invoked dynamically binds X, Y, and Z. You could also access those bindings directly by (SET-IN-CLOSURE closure 'X 42.) Poor man's object system.
[05:07:48] <gilberth> * there are NO lexical closures
[05:08:20] <White_Flame> ok, so exactly like let-over-lambda
[05:08:40] <gilberth> Does it work with dynamically binding, too?
[05:08:44] <White_Flame> except the system-provided ability to access the values is nice
[05:08:50] <White_Flame> no, they're lexically bound
[05:09:06] <White_Flame> but it would seem the end result is the same
[05:10:22] <gilberth> White_Flame: You still can do (CLOSURE '(X Y) (FUNCTION (LAMBDA (SELECTOR) (SELECTQ SELECTOR (:LEN (SQRT (+ (* X X) (* Y Y)))) ...))))
[05:11:25] <gilberth> Or say (LET-CLOSED ((X 42.) (Y 69.)) VECTOR-CLASS), with VECTOR-CLASS being the function.
[05:12:56] <gilberth> And that is a nice application of closures, either lexical, or dynamic to build a simple object system. And lexical closures make the "slot"s being completely under control of the "class".
[05:13:40] <moon-child> I did something similar in s7 scheme, which has first-class lexical environments
[05:14:23] <mfiano> My books thread is turning into a "why I hate Rust" thread
[05:14:24] <gilberth> First class? Could I modify a binding of a closure from outside?
[05:14:37] <mfiano> I knew I should have taken that book off my shelf
[05:14:53] <gilberth> What is that with Rust?
[05:15:10] <mfiano> https://www.reddit.com/r/lisp/comments/q2esnh/share_your_bookshelfves/hfndoal/
[05:15:12] -ixelp- Share your bookshel{f,ves} : lisp
[05:15:47] <gilberth> Yes, but why are people bothered so much by Rust? Of what relevance it is even?
[05:16:08] <mfiano> I don't understand the question.
[05:16:44] <gilberth> I mean, why are Lispers even concerned with Rust?
[05:16:48] <moon-child> gilberth: yes, you can
[05:16:57] <moon-child> (define f (let ((x 5)) (lambda () x)))
[05:17:04] <moon-child> (set! ((funclet f) 'x) 7)
[05:17:08] <moon-child> (f) #| --> 7 |#
[05:17:12] <mfiano> I am bothered by Rust because it is stealing Lispers and my time persuading them.
[05:17:18] <gilberth> moon-child: Odd.
[05:17:48] <gilberth> mfiano: Why does Rust steal your time?
[05:18:24] <mfiano> Because I spend more time convincing people to try Lisp over Rust, or to stay with Lisp over the "language everyone is using"
[05:18:53] <mfiano> and also the fact that it is based on some misconceptions
[05:19:06] <gilberth> You bother to convince people using Lisp?
[05:19:11] <mfiano> Such as manual memory management being faster. It is neither faster to write nor to execute
[05:19:19] <GreaseMonkey> honestly i'd take Zig over Rust any day but part of that is because some of the Rust community are adamant that they have to destroy stuff
[05:20:36] <mfiano> gilberth: Yes, I do. I do not find dedicating some of my time to help people learn Lisp, especially if it is a net gain and they end up making some contributions to the community.
[05:20:43] <mfiano> s/find/mind/
[05:21:31] <gilberth> mfiano: Sure. I am too old for that war and too tired. Languages will eventually converge into what we have. It only will take another half-century and I'll be probably dead by then.
[05:23:05] *** Parts: contrapunctus (a75f5b1571@jabberfr.org) ()
[05:23:25] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[05:23:54] <gilberth> So wake me up when this war is over. Sorry.
[05:25:05] <mfiano> Anyway, here is the Norvig code (slightly altered) that bothers me
[05:25:09] <mfiano> https://gist.github.com/mfiano/624550b8f54dc6bcea49bf2a344f8819
[05:25:10] -ixelp- chapter2.lisp · GitHub
[05:25:28] <mfiano> REWRITES is a relatively expensive function
[05:26:21] *** Quits: Oddity (Oddity@user/oddity) (Ping timeout: 268 seconds)
[05:30:49] <moon-child> sounds like a good use for 'anaphoric if'
[05:31:08] <moon-child> (aif (rewrites phrase) (generate (u:random-elt it)) (list phrase))
[05:31:10] <mfiano> Sigh
[05:31:28] <moon-child> (yea, I know people don't like anaphora ¯\_(ツ)_/¯)
[05:31:37] <mfiano> Yes. Anaphoric macros are largely frowned upon in CL.
[05:32:16] <GreaseMonkey> i'd be more in favour of something like, say, a value-if: (vif (rewrites phrase) it (generate (u:random-elt it)) (list phrase))
[05:32:32] <GreaseMonkey> then again scheme has something but that involves having to do cond
[05:32:48] <moon-child> GreaseMonkey: I don't see the value of that over just writing out the let
[05:33:40] <mfiano> Oh good. He later explains there are other ways to write it without COND.
[05:33:42] *** Joins: Oddity (Oddity@user/oddity)
[05:34:00] <mfiano> Such as IF over LET over IF
[05:34:43] <moon-child> mfiano: at some point I stop keeping track of what people find idiomatic.  beach thinks a lot of things should be avoided which I think are fine; your standards, apparently, are lower but still higher than mine.  ¯\_(ツ)_/¯
[05:34:55] <mfiano> and he points out the problem I noticed of calling REWRITES twice
[05:35:52] <mfiano> Me and beach are on the same page with a lot of things. I think we both influenced each others opinions over the years.
[05:36:07] <mfiano> What, if I might ask, makes you think mine are lower than his?
[05:36:08] <hayley> mfiano: Yes, I figure I didn't say bullshit, but I said a few other colourful words in that review.
[05:38:52] <moon-child> mfiano: he advocates for the use of FIRST/REST; you assented to gilberth's description of them as 'nonsense'
[05:39:47] <mfiano> Hmm, perhaps I am remembering incorrectly, but I didn't intend for that.
[05:40:15] <mfiano> I distinctly recall beach advocating for what I use; either FIRST/REST or CAR/CDR, depending on intent
[05:40:43] <moon-child> hm.  I guess I misinterpreted you.  (It was a bit ambiguous)
[05:42:02] <mfiano> Probably my fault. I am not always the best at coveying my thoughts.
[05:43:09] <mfiano> I am a big fan of clean arcitecture and consistent style. Small issues that others don't think twice about really bother me.
[05:44:17] <mfiano> Such as mutually dependent packages. I really dislike packages that make calls to each other. I think that is a very hard way to reason about large complex programs.
[05:44:34] <mfiano> I see this done a lot though, so I think I am close to alone here :)
[05:49:24] <White_Flame> it's easily to eliminate the problem of anaphoric macros: just supply a varname to use
[05:50:01] <White_Flame> (cond it ((rewrites phrase) (generate (foo it)))
[05:50:34] <gilberth> Somehow the Chaosnet AIM does not agree with what the CADR does.
[05:55:58] <White_Flame> hmm, so paul graham's ACOND expands into an IF tree.  I would have expanded it to
[05:56:34] <White_Flame> (let (,varname) (cond ((setf ,varname ,cond1) ,@body1) ((setf ,varname ,cond2) ,@body1)...)
[05:56:51] <White_Flame> *body2 etc
[05:57:54] <moon-child> non-ssa optimizer may have poorer type inference in the face of mutation
[05:58:25] <moon-child> e.g. it may decide that in all branches varname has type (or (type-of cond1) (type-of cond2))
[05:58:53] <White_Flame> hmm, true
[05:59:22] <White_Flame> it's a matter of punishing low-end lisps, vs punishing high-end lisps :-P
[05:59:23] *** Joins: ln43 (~ln43@user/ln43)
[05:59:29] <moon-child> :D
[05:59:33] <ln43> Hi all... :)
[05:59:52] <ln43> moonwalk: are youtrying to solve the power-performance trade off?
[06:00:38] *** Quits: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net) (Remote host closed the connection)
[06:01:09] <moon-child> White_Flame: though note that if it _is_ optimized properly, it will be effortfully transformed into the same structure as that naively given by the if tree
[06:01:21] <moon-child> ln43: are you talking to me?  There does not seem to be anybody named 'moonwalk' here
[06:08:47] <White_Flame> I think he typed in the wrong buffer.  Had the michael jackson digital seance open in another window
[06:09:14] <ln43> no, i now i should for the usual break-fast in the earlymorning
[06:10:11] <gilberth> White_Flame: Hmm, so that is the "power performance". Makes sense.
[06:10:24] <ln43> xd
[06:10:39] *** Quits: ln43 (~ln43@user/ln43) (Quit: Connection closed)
[06:11:19] <White_Flame> hee-hee
[06:15:14] <gilberth> What is described as a "window size" in essentially ACK packets rather seems to behave as a "window end". Which wouldn't make any sense, as this "window size" is not present on picky-pack ACKs, but only with so called "STS" packets. Or I am missing something.
[06:16:20] <gilberth> When I keep that at the size, the CADR doesn't bother to increase send speed after the other end was busy for a while and not accepting packets. Hmm.
[06:16:36] <gilberth> I am too lazy to dig the source.
[06:19:11] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Quit: Leaving)
[06:19:44] <gilberth> When I stop listening again, the CADR keeps blasting packets at me. That cannot be right.
[06:25:57] <gilberth> And what is "less than (modulo n)"? Doesn't make sense to me.
[06:28:29] <gilberth> The CADR is still saturating the virtual ether. A real ether would be kind of inoperational by now.
[06:44:17] <hayley> GreaseMonkey: Yes, it is only til chapter 8 when they do anything other than desk-calculator level computation.
[06:45:16] * hayley was on a bike ride. Arm is fine now.
[06:49:57] <gilberth> hayley: See. I told you it would pass. And you're still there, you haven't died.
[06:51:10] <gilberth> Last packet I acked by me was #10, I expect #11 next, yet the CADR retransmitts only packets #12 onward. Terrific.
[06:52:03] <gilberth> And the CADR does not seem to give up, just in case I would resurrect packet #11 from the bit bucket.
[06:53:32] <hayley> gilberth: I wasn't expecting to die; that'd be one of the people I know from high school who became an anti-vaxxer.
[06:54:09] <gilberth> hayley: Heh, sure the vaccination is more dangerous then the virus.
[06:55:13] <gilberth> Must be some homeopathic effect or so, RNA fragments being more deadly than the whole damn virus. Makes perfect sense.
[06:55:26] <hayley> That said, I only have one book review published. Guess I should do some more.
[06:55:57] <gilberth> Then you need to find more incredibly bad books.
[06:56:47] <gilberth> Poor CADR is still not giving up, so much for "AI".
[06:57:07] <hayley> Does The Poverty of Post Open Source count as a book review? The original article was 5k words, and I reckon the other stuff mentioned is another 5k.  
[06:58:05] <gilberth> When you put 50 words on a page, that would be a booklet.
[06:58:17] * hayley thinks
[06:58:38] <hayley> Software and Anarchy was about 15k words on 70 6x9" pages. About the same length as The Telekommunist Manifesto IIRC.
[07:00:20] <gilberth> That are only 200 and a bit words per page.
[07:02:38] <gilberth> English words are short. So how many lines do you need for 200 words?
[07:02:54] * hayley remembers when someone tried to have a stab at the book, and did exactly what it was critiquing.
[07:03:38] <hayley> "When people feel challenged in public spaces, they often try to get the other person to piss off by saying the public space belongs to them somehow." "What a load, please leave my free territory at once!"
[07:04:52] <hayley> 36 lines per page?
[07:11:11] *** Quits: semz (~none@user/semz) (Ping timeout: 265 seconds)
[07:15:48] <mfiano> hayley: Read it again now that I can actually concentrate. The biggest wtf for me was the breaking of lexical scoping by deleting parent block bindings...
[07:15:57] <gilberth> When retransmitting the CADR sends the packets not yet acked in reverse order. So perhaps, I am expected to reassemble those? /me shrugs.
[07:16:29] <mfiano> That makes absolutely no sense to me
[07:16:43] <mfiano> I want to strangle the author on that alone.
[07:17:13] <gilberth> mfiano: You opened "that book"(tm)?
[07:17:26] <mfiano> No, I read hayley's writeup
[07:17:56] <gilberth> Does she yet mention me?
[07:18:42] <mfiano> Not that I recall, but didn;t you gave me the link?
[07:19:16] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 245 seconds)
[07:19:44] <gilberth> I did. And hayley got some input from me. This book is a nice read when you have a taste for that kind of satire.
[07:21:02] <gilberth> Hmm, actually it makes sense to retransmit packets in reverse order.
[07:22:03] <mfiano> This book would just strengthen my dislike for C if I ever try reading it. Especially since the author doesn't know how to use C.
[07:22:54] <White_Flame> the book has 4 stars on amazon.com, and the only complaints are that it gets complex, and that it uses an external parser instead of making one
[07:22:58] <mfiano> I hate C with a passion. Incredibly so. But on the bright side, there is always C++ that sits even lower.
[07:23:06] <gilberth> When I have a window with currently n slots free, and expect the next packet being i, I have room for packet (+ i _n_ -1).
[07:23:16] <GreaseMonkey> C makes me sad in ways but i don't hate it... but at the same time, i do want to see it replaced
[07:23:32] *** Joins: semz (~none@user/semz)
[07:24:15] <gilberth> It takes a lot of discipline to use C properly.
[07:24:21] <GreaseMonkey> and it boils down to two things: one, types in C are mostly shit. two, buffers are typically passed as two arguments which is a great source of pastos.
[07:24:34] <GreaseMonkey> well, by types i mean more type safety
[07:24:52] <gilberth> And (3) no condition system.
[07:25:10] <GreaseMonkey> or more that it kinda does have one... but it's called longjmp()
[07:25:15] <gilberth> It is tedious to check each and every libc call for error.
[07:25:33] <GreaseMonkey> i'd make my own 3 out of that: errors are too easy to miss
[07:26:02] <GreaseMonkey> Zig has an interesting take on errors where you can return them but the compiler requires you to do something about them when they show up
[07:26:24] <GreaseMonkey> which is i guess somewhat comparable to how Java handles exceptions?
[07:26:30] <gilberth> To begin with: Try using write(2) properly. Care about partial writes, care for EAGAIN.
[07:27:00] <GreaseMonkey> i usually end up doing the first but not the second
[07:28:04] <GreaseMonkey> also i think that's more of a reflection on the C stdlib specifically, which means if someone wants to do a "C but with a provided different stdlib which is notably less bad than the usual one" then at least the compiler may be reusable 
[07:30:56] <mfiano> I don't want a language that isn't interactive. If I can't pause execution to debug a program and then selectively recompile parts of it with its incremental compiler, I am just not interested. Likewise being forced to think about types up front, instead of something that can be "gradually" added if need be, just incurs way too much friction for developing the complicated pieces of software I
[07:30:58] <mfiano> regularly work on.
[07:31:34] <mfiano> (I already mentioned my take on manual memory management earlier)
[07:31:46] <moon-child> mfiano: you can do that, if you are careful.  But it is error-prone and difficult, and the language is not designed for it
[07:33:52] <mfiano> I will be using CL exclusively even if I am the last person using it. I have tried working with a few dozen other languages, modern and not so modern, and they all bring me tears, and I believe they only add problems, not solve any.
[07:36:09] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[07:38:15] <mfiano> Anyway, that gist is horrible (in a good way, the book being horrible)
[07:38:24] <dave0> maw
[07:38:50] <mfiano> I can see the author of the book doesn't know Lisp very well, or compiler theory. Do they _even_ know what a block-level symbol table is? It appears not
[07:44:39] <hayley> They don't know what a symbol table is full stop.
[07:48:47] * dave0 plays the cymbal
[08:06:14] <hayley> "They had to choose availability or consistency under partition and they chose neither" 
[08:07:50] <moon-child> irc chose availability
[08:08:00] <moon-child> (of course, considering irc predates CAP theorem, I don't know how much of a choice it was...)
[08:09:52] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[08:19:00] <GreaseMonkey> IRC also continues to form a tree to this day
[08:33:05] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[08:36:15] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 265 seconds)
[08:40:20] *** Quits: mala (~mala@user/malaclyps) (Quit: ZNC 1.6.1 - http://znc.in)
[08:40:58] *** Joins: mala (~mala@user/malaclyps)
[08:47:20] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[08:47:47] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[08:48:27] <gilberth> Ok. When I reassemble packets, everything works like a charm!
[08:48:55] <gilberth> Next stop: Gateway to telnetd.
[08:59:32] <mfiano> i take it you figured o ut the days old chaosnet problem?
[09:00:33] <gilberth> Which problem?
[09:01:19] <gilberth> My trouble? Perhaps. The problem rather is that the AIM leaves open questions.
[09:02:33] <gilberth> Let's say, I am on the right track. It's the implementation of an NCP that came with FILE.c, which isn't implementing flow control.
[09:04:30] * mfiano scrolls up a long ways
[09:04:33] <mfiano> "I don't know what took me so long. But the CADR accepted my first Chaosnet packet!"
[09:04:36] <mfiano> I missed this
[09:04:43] <mfiano> Just saw a couple days of you cursing :)
[09:05:06] <gilberth> I plan to keep going. It would be nice, when I could host a FILE server in the internet to be reachable by someone playing with the CADR. NAT for Chaosnet! :-)
[09:06:30] <gilberth> As I want this zero config, all the CADRs should have their Chaosnet host address set to the same value by default.
[09:06:48] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[09:07:02] <gilberth> mfiano: Did I sound so bad?
[09:08:05] <mfiano> hehe
[09:08:22] <kakuhen> so I just learned that common lisp doesn't like (random 0)
[09:08:32] <mfiano> Nope
[09:08:35] <kakuhen> and emacs lisp only liked it because it'd silently fail w
[09:08:49] <kakuhen> (random 0) would give you a stupidly large 64-bit integer and (elt n nil) would simply return nil
[09:08:56] <kakuhen> err (nth n nil)
[09:08:58] <mfiano> Wow that is horrible
[09:09:10] <kakuhen> yeah but this horrible behavior made my quick-sort implementation just work :(
[09:09:17] <kakuhen> clozure cl hates my implementation right now
[09:09:19] * gilberth mumbles (aref #() 0)
[09:09:27] <mfiano> kakuhen: Are you the one that often posts very long reddit posts?
[09:09:32] <mfiano> Your name sounds familiar
[09:09:39] <kakuhen> I don't even have reddit account...
[09:09:45] <mfiano> Ok maybe not you then
[09:09:49] <kakuhen> I recently started messing around with a self-hosted matrix server however
[09:09:50] <mfiano> I am old and have a bad memory
[09:09:52] <kakuhen> too lazy to bridge to IRC still.
[09:09:54] <kakuhen> no worries
[09:10:03] <kakuhen> I tend to go on long rants so I can see why you'd think so :x
[09:11:32] <kakuhen> oh god; i look down to the console in my IRC log and #emacs is having yet another gender debate it seems
[09:11:43] <kakuhen> i feel like #emacs discusses everything but emacs
[09:11:58] <mfiano> I ignore #emacs. It is on topic 1% of the time
[09:12:14] <mfiano> I am only there for the rare chance I have a question and it saves me a /join
[09:12:25] <gilberth> Hmm, they should rename it to #emacscafe then.
[09:12:37] <kakuhen> according to a friend, #emacs is infamous for being extremely off-topic
[09:12:43] <kakuhen> and all of the power users are in #org-mode or whatever
[09:13:10] <mfiano> I also despise Emacs, but it is the best we got.
[09:13:48] <gilberth> I loved Epoch^WLucid Emacs^W^WXEmacs.
[09:13:52] <mfiano> For CL, that is
[09:14:13] <mfiano> For other languages, I much prefer vim.
[09:14:30] <gilberth> *beep* *beep* *beep*
[09:14:36] <kakuhen> this
[09:14:50] <kakuhen> i was so close to yanking out the hardware buzzer when my ideapad ran freebsd and i had to use vi
[09:15:08] <kakuhen> then i learned you can disable it with a very specific setting in /boot/loader.conf
[09:15:28] <mfiano> vim takes about 5 seconds to compile when I upgrade. Emacs takes about 5 minutes. The same relative performance can be seen when comparing memory usage. Both are important to me, as I have many computers, some which are very old.
[09:15:48] <kakuhen> sometimes i wonder why i dont just try out vs code
[09:15:48] <mfiano> I also learned to program on vi, so :)
[09:15:54] <gilberth> I actually physically disconnected the speaker at my XENIX machine needing to use vi to port uemacs.
[09:16:07] <kakuhen> i just want an editor that doesn't scare people away, and one that is good enough for common lisp
[09:16:47] <kakuhen> when I tell some of my CS friends  that emacs + sly/slime is the ideal environment for common lisp, they always say something along the lines of "no wonder common lisp isn't popular"
[09:16:48] <mfiano> That is what I mean by Emacs being the only one. I can't even survive with SLIME which is ported to Vim. (I must use SLY).
[09:17:23] <gilberth> My switch from Wordstar'sh to Emacs was pretty smooth. I am an Emacs since I found uemacs.
[09:17:46] <gilberth> * Emacs user
[09:17:53] <mfiano> Those types of attacks are usually from very ignorant people.
[09:18:52] <kakuhen> well the most ignorant comment ive heard recently regarding lisp is uhh
[09:18:53] <gilberth> kakuhen: I want an editor I could use, so that's Emacs for me. This will perhaps never change.
[09:19:27] <kakuhen> so i met some cool person and when i told him about my attempts with flac-decoder in common lisp, he said something like "of course mathematicians would have to use such a strange language like lisp, or functional programming in general" 
[09:19:37] <kakuhen> i fkin wish that were true
[09:19:45] <gilberth> Actually it's fun to use ZWEI as all the keybindings are just there where you would expect those.
[09:19:57] <kakuhen> so far all of my friends in math either dislike programming or they will use python and nothing else
[09:20:37] <gilberth> Math? 10/3 = 3. Sure, makes sense.
[09:20:39] <mfiano> Lisp is a much better language for numerical calculations, even though it was designed for symbolic computation.
[09:21:50] <mfiano> One notable example: operator precedence rules in Algol-derived languages can be very complex and hard for implementations (ha!) to get right. They are also a huge bug source for users.
[09:22:44] <moon-child> I made a most of a c compiler (all of the parser) and I still can't remember c operator precedences!
[09:23:16] <gilberth> Yes, and this is why gcc keeps reminding me that && has a higher precedence than ||. Really? Surprises me each time. Not. That is annoying.
[09:23:22] <kakuhen> gilberth: the funny part about 10/3=3 is that some numerical methods in differential equations will do this
[09:23:31] <kakuhen> or assert something like "3 is close enough to 5"
[09:24:09] <gilberth> Sure, and "For all epsilon less than zero, ..."
[09:24:11] <kakuhen> especially in stochastic calculus (when applied to finance), you would see very gross approximations
[09:24:16] <kakuhen> no wonder financial crisis happened...
[09:24:40] <mfiano> I also don't buy the performance reasoning either, given origin's success story.
[09:24:41] <gilberth> Begins with that interest is always calculated wrong.
[09:24:49] <kakuhen> "assume this SDE is (magically) discretized for one time step, and then this ugly stochastic integral is within a large band of this simpler integral we can solve using calculus 1"
[09:24:56] <kakuhen> that's essentially how they derive the Milstein method
[09:25:07] <moon-child> kakuhen: or floor, is super popular.  floor(10/3)=3
[09:25:17] <kakuhen> https://en.wikipedia.org/wiki/Milstein_method#Intuitive_derivation
[09:25:18] <gilberth> You loan for 5% p.a. for 60 days, how much interest? 5% * 60/365. Makes perfect sense.
[09:25:20] <kakuhen> if you're interested in the details
[09:25:31] <kakuhen> >we will only look at geometric Brownian motion (GBM) 
[09:25:34] <kakuhen> oh god that reminds me x.x
[09:25:45] <kakuhen> "yeah risk-neutral pricing bro, it's so easy to compute derivative pricing with it :^)"
[09:25:47] <mfiano> origin is a high-performance, pure-CL game math library I and a friend wrote over several years. It doesn't use SIMD, yet SBCL compiles to machine code that executes faster than math-fu, google's high-performance C++ SIMD-optimized math library.
[09:25:56] <kakuhen> "uhhh, we will stick with GBM in all our examples because otherwise its too hard to do risk neutral pricing"
[09:25:58] <kakuhen> fkin bravo wall street
[09:26:16] <kakuhen> that's probably why that insurance guy used gaussian copulas in freaking everything and then the whole CDO mess got kickstarted from that.
[09:28:05] <kakuhen> meanwhile in the math I do: "haha algebra is too nice when we assume nice things, so let's stop doing that and see what still holds true :)"
[09:38:49] *** Joins: makomo (~makomo@user/makomo)
[09:47:38] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[10:07:17] <gilberth> Here is a good example, why having an integers is nice. I want to maintain a some sized window of packets as a ring buffer. I just keep pointers as integers and do a modulus operation only when indexing this window. Those pointer (packet numbers) are also communicated over the wire (mod 2^16), since my pointers are just integers and thus cannot overflow, all is nice. [The window size does not need to be a power of two, so keeping those p
[10:08:15] <gilberth> Would this have been C, this would involve some headache. Perhaps extra bookkeeping.
[10:10:21] <gilberth> It's so incredible silly that is not the norm, but the exception.
[10:15:53] <kakuhen> this reminds me how the metadata in quicktime container  is a literal tree (of "atoms", which are just glorified structs)
[10:15:59] <kakuhen> i feel like it can be very naturally encoded with lists in lisp
[10:16:08] <kakuhen> i almost want to try writing something like Atomic Parsely but in common lisp
[10:16:22] <kakuhen> it must be hell in C to maintain a tree of atoms
[10:17:01] <kakuhen> and if you really care about the def'n of an atom: it contains a 4 character code (so a 32-bit int), the size of the entire structure encoded as a 32-bit int, and then the actual data follows
[10:19:33] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 265 seconds)
[10:21:58] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[10:22:27] *** Joins: hendursaga (~weechat@user/hendursaga)
[10:23:42] <gilberth> kakuhen: How is the tree formed?
[10:25:44] <mfiano> Oh jeez. Sometimes I hate FORMAT. I don't know if I can add a post-processing directive to the iteration directive.
[10:26:00] <gilberth> At times I believe the world would be a nicer place, if s-expressions would be universially used. XML once made that promise, but is very unfit for that and a bad joke. Or a means to keep programmers busy.
[10:26:30] <moon-child> insert erik naggum quote on xml here
[10:26:38] <gilberth> mfiano: What kind of post-processing?
[10:26:43] <mfiano> I think this might either be a late night cry for help, or a revisit when I wake up.
[10:27:03] <mfiano> Assume I have the function:
[10:27:05] <mfiano> (defun program () (format t "~{~(~a~)~^ ~}." (sentence)))
[10:27:20] <mfiano> where SENTENCE returns a random list of strings, such as: 
[10:27:22] <mfiano> ("a" "man" "hit" "the" "table")
[10:27:44] <mfiano> So the result would then be:
[10:28:00] <mfiano> "a man hit the table." (to stdout)
[10:28:15] <mfiano> I want to capitalize the first letter of the sentence, "a", here.
[10:28:48] <gilberth> ok
[10:29:10] <mfiano> I am trying to do this within the confines of the format DSL
[10:29:21] <mfiano> I am not so sure I can post-process like this, without another operation.
[10:32:37] <gilberth> "~{~:(~A~)~^ ~@{~(~A~)~^ ~}~}"
[10:33:41] *** Joins: selwyn (~selwyn@user/selwyn)
[10:33:45] <gilberth> Looks like line noise.
[10:34:15] <mfiano> I see, and yes, very much so. It has been a long time plan of mine to write an s-expression-based compiler.
[10:35:48] <gilberth> You get extra credit to make this fold in case of narrow margins or long sentences.
[10:36:27] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[10:37:14] <gilberth> Isn't there a FORMAT cheat sheet?
[10:37:29] <mfiano> I am toying around with Norvig's simple little NLP stuff in PAIP if you didn't guess.
[10:37:52] <gilberth> Actually, I didn't, no.
[10:38:01] <mfiano> Except I am modifying the programs to be more amenable to code reuse.
[10:38:40] <mfiano> He uses lists of symbols for sentences, which is an absolute pain to read when some symbols are from preceding programs/packages.
[10:38:47] *** Joins: kakuhen_ (~kakuhen@user/kakuhen)
[10:38:49] *** Joins: hendursaga (~weechat@user/hendursaga)
[10:39:06] <mfiano> The alternative solution is to name the functions he redefines something different, and stick everything in one package, but eww
[10:39:59] <mfiano> So I'm using separate packages for each program, but calling out to previous program's packages, and using strings instead of symbols so I don't scream at all the fully-qualified symbols in the output.
[10:41:03] <mfiano> His sentence generator is pretty basic, and can create something tiny that makes sense, or something like:
[10:41:05] <mfiano> A green adiabatic blue blue blue woman by the green adiabatic ball to the green table on the green table by the big blue little man to the woman with a ball with a ball in a ball with the big ball on a green adiabatic blue adiabatic big ball on a green green table on a little table liked the man.
[10:41:19] <gilberth> You could play dirty tricks with the pretty printer dispatch.
[10:41:50] <mfiano> I could, but there are no distinct objects/user-defined types involved, so I would be tainting my image for subsequent programs.
[10:42:24] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 265 seconds)
[10:45:10] *** Joins: notzmv (~zmv@user/notzmv)
[10:46:39] <gilberth> mfiano: "~<~@{~:(~A~)~^ ~:_~@{~(~A~)~^ ~:_~}~}~:>"
[10:47:00] <mfiano> insert puke emoji
[10:47:03] <gilberth> and (SETQ *PRINT-PRETTY* T)
[10:47:05] <kakuhen_> lovely FORMAT usage in this chat right now
[10:47:12] *** kakuhen_ is now known as kakuhen
[10:47:26] <gilberth> and try your monster sentence.
[10:48:23] *** Joins: cranium (~cranium@user/cranium)
[10:48:46] <mfiano> That did not work so well
[10:49:02] <gilberth> No? Works here.
[10:49:24] <mfiano> https://gist.github.com/mfiano/a160facbf306854cc7b6d36aba17690b
[10:49:24] -ixelp- *sly-mrepl for sbcl*.txt · GitHub
[10:50:24] <gilberth> I see blank lines only but one.
[10:50:44] <mfiano> Scroll right :)
[10:50:53] <mfiano> This is what your format string did for me
[10:51:09] <mfiano> with *PRINT-PRETTY* bound to T (it actually is by default on SBCL)
[10:51:58] <mfiano> or check the raw output here: https://gist.githubusercontent.com/mfiano/a160facbf306854cc7b6d36aba17690b/raw/0a3c1bf58090b37c69e318ca20604713be72efa4/*sly-mrepl%2520for%2520sbcl*.txt
[10:54:26] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Remote host closed the connection)
[10:54:33] <gilberth> http://clim.rocks/gilbert/a-green-adiabatic.png ;works.
[10:55:10] <mfiano> Not in SLIME/Sly
[10:55:22] <gilberth> In Slime it does, too
[10:55:30] <mfiano> Not on SBCL
[10:56:54] <gilberth> clim.rocks/gilbert/a-green-adiabatic.png
[10:57:11] <mfiano> You'res wraps nicely outside of Emacs on the terminal, but not in SLY
[10:57:16] <mfiano> yours*
[11:00:06] <gilberth> The other is SLIME. Maybe you should down^Wupgrade, my version is 2013-04-05. :-p
[11:01:10] <mfiano> Actually you pasted the same link twice
[11:03:38] <gilberth> Silly Firefox. http://clim.rocks/gilbert/a-green-adiabatic-slime.png
[11:04:08] <gilberth> Try (pprint-logical-block (*standard-output* nil) (dolist (k (apropos-list "SETF")) (princ k) (princ " ") (pprint-newline :fill))) in SLY. When that does not work, file a bug report.
[11:05:11] <mfiano> https://gist.githubusercontent.com/mfiano/62019976646c2966c4b103390270d92d/raw/14cf38be01768268e9839011cf8e7ff2daa9f416/*sly-mrepl%2520for%2520sbcl*.txt
[11:05:29] <mfiano> Not sure what "does not work" means but there it is.
[11:07:08] <gilberth> It doesn't work, trust me. Are that overly long lines, you face?
[11:07:23] <mfiano> yes
[11:07:38] <gilberth> This looks like some olde SLIME bug. Try (progn (terpri) (pprint-logical-block ...))
[11:08:07] <mfiano> That works better
[11:08:53] <gilberth> SLIME is at times very confused about the fresh-line-ness or column number.
[11:09:29] <gilberth> I am surprised that this bug is still present. I fixed my 2013 version long, long ago.
[11:11:36] <gilberth> Thus unfortunately ~& won't always help, but give it a try.
[11:12:06] <mfiano> It does not
[11:13:46] <gilberth> Yes, but that is a SLIME bug.
[11:14:32] <mfiano> Ok
[11:16:06] <gilberth> You verify with doing it on the shell or with (with-output-to-string (*standard-output*) ...), the pretty printer is fine.
[11:22:35] <gilberth> For the pretty printer dispatch. In Closure object of type (array (unsigned-byte 16) (*)) print as #"...." when make with MAKE-ROD, others print as usual.
[11:25:17] <gilberth> I had only 7-bit characters and wanted to have Unicode strings, which I called rods. So I used vectors of (unsigned-byte 16). The trick was to enter those made with MAKE-ROD into a weak hash-table and then use that to tell rods from other vectors apart.
[11:28:26] <selwyn> anyone aware of a convenient way to word count latex documents?
[11:33:48] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[11:35:35] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:38:51] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:43:00] <mfiano> Good night world.
[11:44:32] <sm2n> texlive should have texcount
[11:44:37] <sm2n> oh, he's gone
[12:19:46] <gilberth> *sigh* Would my OS be a Lisp OS, I could now seamlessly and hassle-free make any program aware of Chaosnet, would I implement a FILE client, I could also mount the CADR disk. So how about a stack, like Linux beneath for the device drivers, a Lisp OS above that and then Linux again above that for "legacy" applications?
[12:20:32] <Duuqnd> I would be all for a Lisp OS/Linux hybrid
[12:22:20] <contrapunctus> Duuqnd: I've been planning to make something like that. https://tilde.team/~contrapunctus/blog/magrathea.html
[12:22:27] <gilberth> Well, in early 90s there was a LOS mailing list which was quite active for a year. At that time you actually still would have a chance with device drivers, but I always advocated to begin having Linux beneath for the device drivers, as this is tedious, boring work, which will never be finished.
[12:22:36] <contrapunctus> (...first time sharing it in a Lisp community.)
[12:25:39] <dave0> do what windows did and run it in a VM
[12:25:39] *** Quits: hendursa1 (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:26:01] <gilberth> Omnipresent kill ring! This is sth I miss. And your favorite editor in every text input field.
[12:26:17] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:28:26] <gilberth> But it's hard. You can pretty much forget to write a Web browser in CL. I tried and failed, at the time of when CSS1 was even new.
[12:28:35] *** Joins: makomo_ (~makomo@user/makomo)
[12:29:03] <gilberth> Likewise: Forget writing device drivers. Even emulating UNIX is way more complex than in early 90s.
[12:29:52] <Duuqnd> Writing device drivers would be challenging but not that bad. Writing enough device drivers for the system to be useful would be nearly impossible.
[12:29:59] <gilberth> Because otherwise, nobody would stop you from implementing sth UNIXish in Lisp to run all the apps you need.
[12:30:55] <gilberth> Duuqnd: Good luck with 3d-acceration. This was my second proposal in early 90s: Focus on a headless system, use X11 and be set.
[12:31:09] <gilberth> Everything else is doomed, if you ask me.
[12:31:51] <Duuqnd> Graphics drivers are probably the hardest to write in general
[12:34:05] <gilberth> Yes, and kind of pointless. Use X11 and be set. Or as that is dominated by kids for more than a decade: Spec a new protocol that just uses Cairo, GL, GDI, and/or Cocoa. You get proper font rendering for free, and accelleration. Why bother with that? We don't have a brigade of thousands of idle CL hackers to spare.
[12:36:04] <hayley> I still can't figure out why my laptop refuses to go faster than the minimum speed when on charger. And this happens both on Ubuntu and Windows 10. 
[12:36:09] <gilberth> Quuqnd: Begins with, good luck at getting documentation about those graphics chips.
[12:36:50] <gilberth> hayley: It runs on full speed only when on battery?
[12:37:23] <hayley> Yes.
[12:37:56] <gilberth> If you ask me a proper display server protocol would be key for desktop use. Blittering will be slow and would leave you at software rendering.
[12:38:11] <Duuqnd> If I just HAD to write a graphics driver in Lisp I would probably use the free software drivers already out there for Linux and the BSDs as a reference.
[12:38:19] <gilberth> hayley: That's odd, very odd. When it were reverse it might have made sense.
[12:38:54] <hayley> Sure.
[12:38:56] <gilberth> Duuqnd: And what exactly would you gain then?
[12:39:54] <Duuqnd> A graphics driver
[12:40:16] <gilberth> Graphic drivers exist already.
[12:40:18] <Duuqnd> I wouldn't want to write one in the first place if I can avoid it, but if I had to it wouldn't be impossible at all
[12:40:44] <gilberth> I'd just compile the C.
[12:41:08] <Duuqnd> I'm not arguing that we should be writing graphics drivers in Lisp, but if we had to do it for some reason it wouldn't be a complete nightmare, just a lot of work.
[12:42:38] <gilberth> Well, the fundamental problem as with a web browser: There is not much use, when you can't keep the pace of things changing.
[12:43:20] <gilberth> This is a race a small community cannot win.
[12:43:59] <Duuqnd> Yes, I agree. Using what already exists is a good idea in this case.
[12:44:14] <gilberth> Anyhow, this is why I argue for decade: When you want a Lisp OS, go headless first.
[12:44:33] *** Quits: derwolf (~DerWolf@2a01:4f8:c0c:554a::1) (Remote host closed the connection)
[12:44:44] <gilberth> Replace /bin/init with your Lisp and start from there.
[12:44:53] *** Joins: derwolf (~DerWolf@static.143.125.47.78.clients.your-server.de)
[12:47:01] <gilberth> I do a lot of work on Linux box actually, which sits there headless. That is way less HW to support in general. What do you need? Disks and networking. That's it.
[12:47:13] <dave0> what if you went retro... instead of trying to compete with the latest hardware, you aimed for old smaller machines ... i remember that homebrew cpu running minix
[12:47:20] <contrapunctus> Hm, I'd expected a scathing reception, but not being ignored outright 🤔
[12:47:35] <dave0> something that ram on a 286
[12:47:58] <dave0> or a little cpu with only a couple megs of ram
[12:48:03] <gilberth> dave0: I just don't want to work on a machine which is 10,000x slower than what I have.
[12:50:31] <dave0> you'll never dislodge an OS for a modern machine
[12:50:48] <gilberth> I will eventually run Lisp on TTL. Will happen, but this is entirely out of "because you can". Won't be useful.
[12:51:17] <dave0> gilberth: but isn't it fun too :-)
[12:51:52] <gilberth> Sure, it will be a hell of a lot of fun. But it won't further things in general.
[12:51:59] <hayley> dave0: Can't start Symbolics 3^WAzul 2^WApplied Hardware on a machine which is even slower.
[12:53:06] <gilberth> But then, this is a lost cause anyway.
[12:54:03] <dave0> you're never gonna unseat windows unless you somehow made something that was compatible with it
[12:54:07] <hayley> Well, consider that lock-free data structures are easier to write with GC.
[12:54:25] <hayley> So if Linux needs to lock and you don't...
[12:54:50] <Duuqnd> Despite what it looks like right now, I don't think Unix is eternal. One day (I'm talking decades or maybe centuries) it will (hopefully) be so inadequate that it has to be replaced, and I don't think the system that will replace it has been created yet.
[12:54:52] <gilberth> dave0: I don't even want to unseat Windows. What for? Joe Six Pack doesn't care less.
[12:55:59] <dave0> to use the fastest machines available
[12:56:07] <sm2n> contrapunctus, have you seen arcan?
[12:56:22] <gilberth> Duuqnd: Well people with time will learn, that's a bad idea to use C for system programming to begin with. But when this happens, I'll be dead.
[12:56:45] <White_Flame> I just want an OS that's multi-machine by default
[12:57:00] <White_Flame> at the very least, spread & share storage in a LAN
[12:57:02] <gilberth> That would be terrific!
[12:57:09] <White_Flame> as a unified resource
[12:57:26] * hayley thinks
[12:57:26] <gilberth> Also over the WAN.
[12:57:41] <gilberth> I hate shuffling my files around manually.
[12:57:43] <White_Flame> encrypted tunnels to friends' machines
[12:58:21] <gilberth> Yes, as if we would all use one giantantic time-sharing machine.
[12:58:33] <hayley> Would be fun with distributed shared memory. Though you could have proxy objects and a cache coherence protocol to make it work.
[12:59:11] <gilberth> hayley: Dream on. I am not yet tossing the concept of files.
[12:59:13] <White_Flame> yep, although that would be the biggest slowdown
[12:59:35] <hayley> gilberth: So I shall.
[12:59:50] <sm2n> who needs files
[12:59:57] <gilberth> And we don't have enough address bits for a glaxy-wide virtual address space.
[13:00:02] <hayley> If you're gonna fuck up, might as well go for gold.
[13:00:04] <White_Flame> sm2n: I do, have you seen my toenails?
[13:00:14] <sm2n> no, and I'd like to keep it that way
[13:00:28] <White_Flame> ;)
[13:00:43] <hayley> gilberth: No problem, read up on Smalltalk and OOZE and you see that they swizzle as appropriate. And with object proxying you just need an address per currently reachable object. 
[13:01:23] <gilberth> hayley: Sure, but before that happens, we need a network.
[13:01:36] <White_Flame> the network is an implementation detail
[13:02:01] * hayley has only really tested Netfarm on in-memory networks. Should work on a real network as it's all modular.
[13:04:57] <Gnuxie> Did ST OOZE write back to the tape? 
[13:05:05] <hayley> Yes.
[13:05:13] <Gnuxie> That's pretty cool 
[13:05:26] <hayley> It stored 32-bit object IDs on disk, and compressed them to 16-bit in memory.
[13:05:45] <Duuqnd> What's OOZE? Something Smalltalk related I assume?
[13:06:06] <hayley> http://www.bitsavers.org/pdf/xerox/parc/techReports/SCG-82-2_A_Large_Object-Oriented_Virtual_Memory.pdf
[13:06:27] <hayley> Yes, OOZE and LOOM (linked) are two virtual memory/paging systems for Smalltalk.
[13:06:41] <Gnuxie> mrow, their tape was a lot slower than a modern spinny HDD? 
[13:06:48] <contrapunctus> sm2n: thanks, taking a look.
[13:06:54] <hayley> Right.
[13:10:36] <hayley> If we had a Pauseless-esque read barrier, one could imagine a scheme like this for distributed memory: have some pages spare for referencing remote objects, and keep them unaccessible. When you load a reference to a remote object, return a reference into those pages. When the load value barrier traps, make a request to read the object, and overwrite the reference with a reference to a real page with the object.
[13:11:03] <hayley> The hard part, as always, is cache invalidation.
[13:11:22] <White_Flame> yeah, I was just about to say.  If this is truly "shared" memory, then that's a lot of movement
[13:11:38] <White_Flame> there's a reason people like message passing
[13:11:51] <White_Flame> and launching agent processes with local work
[13:12:42] <hayley> Yeah, another possibility is to always use phony references, and have primitive functions like CAR, STANDARD-INSTANCE-ACCESS, etc, handle such references. The branch predictor will learn if tests for proxies are usually unnecessary.
[13:13:18] <White_Flame> or instead of realtime cache coherency, have staged consistency or merge rules
[13:13:37] <White_Flame> if we're talking about an actual object model, not just a memory page model
[13:17:59] <hayley> idk, I can't decide on which would be better. My main fear is how updating instances would go, but that's already poorly defined with current CL and thread-based concurrency.
[13:18:40] <White_Flame> or, if you're "really" OO, then you're not doing memory accesses on an object, but making method/getter/setter calls, and whoever calls the most often most recently hosts it on their hardware
[13:19:25] <hayley> That would get messy unless all nodes are strongly connected.
[13:19:51] <White_Flame> no more messy than any other shared model
[13:28:23] <dave0> hayley: "should work" is famous last words :-p
[13:39:48] <hayley> I've proved some of the parts correct, and the other parts simply don't care.
[13:47:59] <hayley> Metamodular stuff, you know the drill.
[13:50:47] <contrapunctus> sm2n: I'm not sure that's something which a non-programmer can pick up and make new programs with 🤔
[13:51:15] <contrapunctus> (Ah, but I'm actually referring to Pipeworld, not Arcan...)
[14:00:29] <White_Flame> I don't think it claims it's ready for that, either
[14:08:38] <hayley> https://www.youtube.com/watch?v=ZzOj9TSlOb8
[14:08:39] -ixelp- When Do I Get to Sing "My Way" (2019 - Remaster) - YouTube
[14:19:02] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.2.1)
[14:19:23] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:02:11] * hayley uploaded a video: (102KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/MtFAHZtaMQnCQDszyanvczyQ/robert-strandh-gaming.mp4 >
[15:02:39] <Gnuxie> lmao 😂😂🤣
[15:03:12] <hayley> https://www.youtube.com/watch?v=o_V67j-6PmE
[15:03:13] -ixelp- engineer gaming - YouTube
[15:24:22] *** Quits: cranium (~cranium@user/cranium) (Read error: Connection reset by peer)
[15:25:02] *** Joins: cranium (~cranium@user/cranium)
[15:33:01] *** Quits: pjb (~pjb@user/pjb) (Quit: ERC (IRC client for Emacs 27.2))
[15:33:55] *** Joins: pjb (~pjb@user/pjb)
[15:48:01] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 245 seconds)
[16:05:41] *** Joins: random-nick (~random-ni@87.116.183.117)
[16:10:25] *** Joins: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net)
[16:11:06] *** Joins: makomo_ (~makomo@user/makomo)
[16:30:18] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[16:47:48] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 265 seconds)
[17:02:01] <contrapunctus> White_Flame: it's one of the aims of my project; that was the context in which sm2n mentioned Arcan.
[17:07:42] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[17:09:36] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[17:14:01] *** Joins: makomo_ (~makomo@user/makomo)
[17:31:15] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:43:55] *** Quits: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net) (Remote host closed the connection)
[17:51:35] *** Joins: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net)
[17:53:52] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 252 seconds)
[17:54:11] *** Joins: makomo_ (~makomo@user/makomo)
[18:31:41] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[18:33:39] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[18:35:56] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 245 seconds)
[18:50:06] *** Joins: makomo (~makomo@user/makomo)
[18:52:22] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 265 seconds)
[18:55:56] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:9472:a2eb:3822:1241) (Ping timeout: 245 seconds)
[18:57:01] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:9d95:c71:11e4:3e0f)
[19:18:57] <shka> https://www.youtube.com/watch?v=oVlspd9hxFA
[19:18:57] -ixelp- Why is Gen Z Humor So Weird? - YouTube
[19:19:02] <shka> finally 
[19:19:16] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[19:21:06] <sm2n> contrapunctus, yes, but it has/is trying to provide the right primitives
[19:29:41] *** Joins: makomo_ (~makomo@user/makomo)
[19:49:36] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Ping timeout: 276 seconds)
[19:50:14] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[19:51:38] *** Quits: elflng (~elflng@5.28.137.182) (Ping timeout: 246 seconds)
[19:51:58] *** Quits: hayley (~theemacss@user/hayley) (Ping timeout: 260 seconds)
[20:02:50] *** Joins: elflng (~elflng@5.28.137.182)
[20:11:32] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[20:22:06] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[20:46:25] *** Quits: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354) (Quit: WeeChat 2.9)
[20:46:42] *** Joins: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354)
[20:53:08] *** Joins: selwyn (~selwyn@user/selwyn)
[21:04:54] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 245 seconds)
[21:15:46] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:21:39] *** Quits: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354) (Quit: WeeChat 3.1)
[21:22:03] *** Joins: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354)
[21:23:09] *** Quits: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354) (Client Quit)
[21:23:26] *** Joins: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354)
[21:36:25] <shka> selwyn: https://twitter.com/chrisapplegate/status/787751065315840000
[21:40:45] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[21:41:03] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[21:45:03] <selwyn> lol
[21:46:09] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:46:10] <shka> it is true, all of it
[21:46:40] <selwyn> i never watched a long one all the way through 
[21:47:25] *** Quits: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354) (Quit: WeeChat 3.1)
[21:47:33] <shka> the century of self is worth watching, everything else tends to repeat it
[21:47:44] *** Joins: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354)
[22:04:45] <selwyn> til the conservative party monday club sent a delegation to observe the war in croatia
[22:07:08] <shka> what war?
[22:07:23] <shka> oh, sorry
[22:07:25] <selwyn> 1991
[22:07:33] <shka> don't scare me like that!
[22:07:34] <shka> :D
[22:07:47] <selwyn> https://en.wikipedia.org/wiki/Andrew_Hunter_(British_politician) what a profile picture to have
[22:07:57] <selwyn> shka: lol
[22:08:02] <selwyn> thats where your helicopters are going
[22:08:34] <shka> listen, i am really on edge here, ok?
[22:08:36] <shka> :P
[22:08:38] <selwyn> i remember helicopters flying all the time when i was a kid on holiday, i think they were going to/from northern ireland
[22:08:41] <selwyn> it sucks
[22:08:58] <shka> in Poland, we tend to not like armed soldiers in public places 
[22:09:02] <shka> you know, history
[22:10:05] <selwyn> opposite here
[22:10:13] <selwyn> the air force is delivering petrol
[22:10:21] <shka> selwyn: try Ireland
[22:10:26] <shka> you get the idea
[22:11:11] <selwyn> imagine being a paid up member of the fighter mafia and you have to deliver fuel to some forecourt somewhere
[22:12:39] <selwyn> shka: yeah they are usually not keen to deploy the army in northern ireland, but iirc they tried to force the issue during the early covid times
[22:13:00] <selwyn> trying to get the army to support hospitals or sth
[22:13:01] <selwyn> and it did not go well
[22:13:05] <selwyn> *not go down well
[22:14:24] <gilberth> Good morning #lispcafe!
[22:14:30] <selwyn> hi gilberth
[22:14:35] <Alfr> Hello gilberth.
[22:19:00] <shka> well, here you go, soldiers are not always welcome if the memory of oppression is still warm
[22:22:03] <selwyn> indeed
[22:22:09] <selwyn> but in poland, it is your own soldiers
[22:22:14] <selwyn> which is different
[22:23:09] <shka> https://www.alamy.com/stock-image-13121981-zbszy-wprowadzenie-stanu-wojennego-przejazd-kolumny-wojsk-166932026.html?pv=1&stamp=2&imageid=907C3D3F-986E-48FA-B30F-710BD6EF5C28&p=563389&n=0&orientation=0&pn=1&searchtype=0&IsFromSearch=1&srch=foo%3dbar%26st%3d0%26pn%3d1%26ps%3d100%26sortby%3d2%26resultview%3dsortbyPopular%26npgs%3d0%26qt%3dmartial%2520law%2520poland%26qt_raw%3dmartial%2520law%2520poland%26lic%3d3%26mr%3d0%26pr%3d0%26ot%3d0%26creative%3d%
[22:23:10] -ixelp- 13.12.1981, Zb¹szyñ. Wprowadzenie stanu wojennego - przejazd kolumny wojsk z garnizonu w Sulechowie ulic¹ Œwierczewskieg [...]
[22:23:11] <shka> 26ag%3d0%26hc%3d0%26pc%3d%26blackwhite%3d%26cutout%3d%26tbar%3d1%26et%3d0x000000000000000000000%26vp%3d0%26loc%3d0%26imgt%3d0%26dtfr%3d%26dtto%3d%26size%3d0xFF%26archive%3d1%26groupid%3d%26pseudoid%3d%26a%3d%26cdid%3d%26cdsrt%3d%26name%3d%26qn%3d%26apalib%3d%26apalic%3d%26lightbox%3d%26gname%3d%26gtype%3d%26xstx%3d0%26simid%3d%26saveQry%3d%26editorial%3d1%26nu%3d%26t%3d%26edoptin%3d%26customgeoip%3d%26cap%3d1%26cbstore%3d1%26vd%3d0%26lb%3d%26fi%3d2%
[22:23:12] <shka> 26edrf%3d%26ispremium%3d1%26flip%3d0%26pl%3d
[22:23:14] <shka> fuck 
[22:23:15] <shka> sorry
[22:23:16] <selwyn> fucked it
[22:23:23] <shka> yeah, my bad
[22:23:34] <selwyn> martial law right
[22:23:37] <shka> https://academy.tomasztomaszewski.com/wp-content/uploads/59833d0f8da55632463223.jpg
[22:23:53] <shka> this shit is something that people here still remember 
[22:24:12] <shka> and the BMP in the picture is still in service xD
[22:24:18] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:24:37] <selwyn> lol
[22:25:04] <selwyn> people in this country are dumb to view the armed forces as some kind of sticking plaster for the state´s failures
[22:25:08] <selwyn> they will find out the hard way
[22:25:22] <shka> i mean, they can help
[22:25:42] <gilberth> What makes me wonder is that although people remember Poland seems to screw up politically.
[22:25:57] <shka> but in the end, army's function is to apply violence in the states name
[22:26:08] <shka> and remember that
[22:26:26] <selwyn> for me the big irony is that military in the streets = coup or martial law is usually associated with great shortages of coal, fuel, whatever
[22:26:37] <shka> gilberth: this is a really complicated matter
[22:26:58] <gilberth> shka: I figure that.
[22:27:31] <shka> the primary issue is that not all benefited from the Polish transformation
[22:27:36] <shka> which is a one issue
[22:27:54] <shka> secondly, nationalistic tendencies are still very much alive in Poland
[22:28:27] <gilberth> Well, I also don't understand people in east Germany.
[22:29:46] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:30:31] <gilberth> I mean, you would expect with the history people would value civil rights and a liberal society, right? They don't. For some reason.
[22:30:41] <selwyn> gilberth: i wouldn´t expect that
[22:30:46] <selwyn> not everyone is a liberal
[22:31:16] <gilberth> Though Poland had it far worse.
[22:31:36] <White_Flame> what's the east german attitude?
[22:31:39] <shka> not some sure about that xD
[22:32:24] <gilberth> White_Flame: Xenophobic and right wing. Saxony that is.
[22:33:45] <manicennui> What do we mean by liberal here?
[22:34:12] <White_Flame> and what does "right wing" mean here, too?
[22:34:30] <White_Flame> "the left" is far more defined (particular rooted in labor) than "the right"
[22:34:37] <gilberth> What I mean by liberal here is an attitude to not tell me how I should live.
[22:35:14] <manicennui> In the US at least, people are very liberal, but about different aspects of life.
[22:35:21] <White_Flame> if east germany is not doing well economically, then of course they'd be more defensive
[22:36:06] <gilberth> White_Flame: Afraid of anything not according to their norm, be it foreigners or say gay people. And kind of nationalistic with at the far end a tendency to being nazi.
[22:36:20] <White_Flame> and yeah, I wouldn't call that "liberal", I'd associate it more with "freedom", in giving other people space to be different
[22:36:37] <manicennui> White_Flame: That is literally what liberal means.
[22:36:50] <White_Flame> "liberal" means more than necessary
[22:37:05] <gilberth> Yep. But I agree that this is a term needing to be defined. Too many meanings of it.
[22:37:06] <White_Flame> eg, "liberal education" is a good use of the term
[22:38:02] <White_Flame> gilberth: also, don't you think that it's easier for people to have cultural momentum with what came before?
[22:38:10] <White_Flame> with respect to nationalism etc
[22:38:25] <White_Flame> that regime left its imprint on people, even if they're not nazi
[22:38:35] <gilberth> I don't get what you mean by "cutural momentum".
[22:38:37] <White_Flame> the more neutral ways of thought have been affected
[22:38:59] <White_Flame> the nazi reich was extremely nationalistic.  people in the region remain with a higher than normal level of nationalism
[22:39:39] <White_Flame> even if disassociated with literal naziism
[22:39:48] <White_Flame> as a lingering momentum on culture
[22:39:51] <gilberth> Well, east germany even before the wall fell, was xenophobic in general. It only was that nobody talked there about the nazi history, unlike in the west.
[22:40:08] <White_Flame> right, and you expect that to disappear so quickly?
[22:40:34] <gilberth> I don't know. I just don't get it.
[22:40:37] <White_Flame> not much generational turnover
[22:40:40] <White_Flame> since then
[22:41:11] <White_Flame> people who are middle aged parents now were kids when the wall fell
[22:42:48] <gilberth> Begins with: Why should I want to abolish welfare, when I am myself are depending on it? In the end of day this is how there is voted. And then the argument that the foreigners would steal jobs. Begins with that there aren't even many foreigners in the east. And see what happened in England: Where are all those thousands of Brits eager to steer trucks?
[22:43:30] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[22:43:40] <gilberth> Sorry. I just don't get that and perhaps never will.
[22:44:01] *** Joins: hendursaga (~weechat@user/hendursaga)
[22:44:05] <White_Flame> it's easy to get.  People stuck in problems (perceived or real) take shorter term views
[22:44:28] <gilberth> After escaping an oppressive state I would value democratic rights, not the reverse.
[22:44:41] <White_Flame> did they escape?
[22:44:53] <White_Flame> certainly for those who actually were able to physically get out, I would agree
[22:44:57] <manicennui> https://en.wikipedia.org/wiki/Authoritarian_personality#Authoritarian_personality_type
[22:45:16] <gilberth> Thousand did literally. No, I mean protesting and making the wall fall.
[22:46:57] <gilberth> But then at times I believe there were false impressions about the west, like it being a place where everybody would prosper. No, it's not.
[22:50:13] <gilberth> However, because of that political attitude, parts of east germany is a region where I definitely don't want to live.
[22:51:03] <gilberth> Also: The less foreigners there are the more xenophobic people seem to be.
[22:51:23] <White_Flame> yeah, that's basic lack of exposure
[22:51:33] <White_Flame> happens with every aspect, not just interpersonal
[22:51:57] <gilberth> Yes, that must be it.
[23:04:34] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[23:06:01] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[23:09:32] *** Joins: christophergray (~christoph@190.148.52.166)
[23:10:27] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:14:24] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:26:49] <selwyn> gilberth: i have probably said this before, but the argument is that native poorer/younger brits are the ones who get to drive the trucks
[23:27:22] <selwyn> few appear to personally want this as a career path (with good reason)
[23:37:25] <selwyn> was nuclear power cost effective in the soviet union?
[23:40:14] *** Quits: christophergray (~christoph@190.148.52.166) (Quit: WeeChat 3.3)
[23:43:23] <shka> selwyn: heh, this is a loaded question xD
[23:43:48] <shka> Chernobyl disaster really elevated cost of the nuclear power worldwide 
[23:45:18] <White_Flame> selwyn: from what I've seen, there's been a lot of reporting of how low-pay, low-protection, low-everything the truck driver position has gotten in the UK, specifically because it's all just immigrants
[23:45:45] *** Quits: Oddity (Oddity@user/oddity) (Ping timeout: 265 seconds)
[23:45:45] <White_Flame> so it's become a very undesirable job
[23:46:09] <shka> selwyn: http://www.phyast.pitt.edu/~blc/book/eedb.gif
[23:49:42] <pjb>  selwyn: well, their reactors were designed to produce Pu for their bombs… 
[23:50:52] <Alfr> shka, what does BE and ME mean?
[23:52:26] <pjb> be me, me be!
[23:53:36] <shka> Alfr: best experience, median experience
[23:53:38] *** Joins: Oddity (Oddity@user/oddity)
[23:54:16] <shka> http://www.phyast.pitt.edu/~blc/book/chapter9.html
[23:54:40] <Alfr> shka, thank you. :)
[23:54:50] <shka> no problem
[23:55:02] <shka> anyway, that's the problem with the nuclear
[23:55:15] <shka> it is expensive because of the safety regulations
[23:55:36] <shka> so if you could have better way to meat those regulations, you are back in the game
[23:56:36] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:56:58] <shka> hence small modular reactors and the molten salt are the hot shit right now
[23:57:08] <shka> molten salt less so i guess
[23:57:12] <shka> but i should be!
[23:57:20] <shka> *it should be
[23:57:21] <White_Flame> yeah, who is actually deploying them?
[23:57:52] <shka> as in: companies?
[23:58:06] <shka> Hitachi, NuPower
[23:58:11] <shka> *NuScale
[23:58:28] <shka> also, there are other designs
[23:58:50] <shka> but those two are two which are somewhat ready
[23:59:14] <shka> as for the molten salt, still R&D, China invest into it
