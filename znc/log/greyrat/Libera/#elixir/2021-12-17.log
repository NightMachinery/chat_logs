[00:00:44] *** Joins: _axx (~axx@static.246.43.203.116.clients.your-server.de)
[00:00:44] *** Quits: _axx (~axx@static.246.43.203.116.clients.your-server.de) (Remote host closed the connection)
[00:01:34] *** Quits: Rubyn (~Rubyn@user/rubyn) (Quit: WeeChat 3.3)
[00:01:53] *** Joins: _axx (~axx@static.246.43.203.116.clients.your-server.de)
[00:03:21] *** Quits: phaleth (~phaleth@user/phaleth) (Quit: phaleth)
[00:04:40] *** Joins: Rubyn (~Rubyn@user/rubyn)
[00:08:55] *** Quits: mahmutov (~mahmutov@37.155.62.65) (Ping timeout: 268 seconds)
[00:14:35] *** Joins: notapenguin (~ryu@179.222.242.20)
[00:41:05] <benwilson512> trafficjam: \o I'm back
[00:41:16] <benwilson512> let me try to get it working, one sec
[00:41:26] <trafficjam> hey dude \o
[00:42:12] <benwilson512> can you gist some example data that is causing a crash?
[00:47:09] <trafficjam> yeah sure, one moment
[00:51:15] <trafficjam> benwilson512: here ya go -> https://www.pastery.net/fgtfhb/
[00:51:34] <trafficjam> bit of preloading in there, maybe that's causing the crash?
[00:51:44] *** Quits: voltone (~voltone@2a02:14c:8a60:2a:1c60:7a3d:d99c:bdd7) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:51:57] <benwilson512> trafficjam: well, that struct doesn't actually have a `children` key
[00:52:16] <benwilson512> so my code will immediately break there, your earlier comment had one so I assumed it was there for me to update
[00:52:47] <benwilson512> let me do a slightly simplified thing for a second
[00:53:24] <trafficjam> hmm  my earlier comment shouldn't have included a "children" key for the input data, only the output
[00:54:28] <benwilson512> ah ok then one moment
[00:54:42] <benwilson512> can you show the code of mine you were running after you fixed my typos? :D
[01:04:29] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[01:04:36] *** Joins: ur5us (~ur5us@2406:e002:6c7b:2301:f812:b76c:617f:99d7)
[01:07:30] <trafficjam> yeah sure, just a sec
[01:09:57] <trafficjam> benwilson512: https://www.pastery.net/wvvdqn/
[01:11:09] <trafficjam> I get the Protocol.Undefined error when using nil, and Protocol.UndefinedError when i try to use a specific id for the root (rather than nil)
[01:11:54] <trafficjam> and i'm passing the list of Category's to `to_tree`
[01:28:21] <benwilson512> trafficjam: I'm confused, why would you pick a value that isn't `nil`?
[01:28:49] <benwilson512> are you looking at a partial sub tree? that is to say, a category that _does_ have a parent id?
[01:29:03] <benwilson512> and you want all the items under it?
[01:29:21] <benwilson512> or are you always starting with a set of categories that are at the top and have no parent?
[01:31:06] <trafficjam> benwilson512: a general method would be ideal, that way i can focus down on particular categories
[01:31:42] <benwilson512> ok
[01:31:45] <benwilson512> I mean basically
[01:31:55] <benwilson512> what that error is saying is that there are no categories that have the parent of 17
[01:33:12] <benwilson512> try this
[01:33:13] <benwilson512> https://www.irccloud.com/pastebin/lOJNDKgn/
[01:35:38] <trafficjam> benwilson512: causes another process crash :)
[01:36:25] <trafficjam> (using this input data btw -> https://www.pastery.net/fgtfhb/)
[01:36:36] <benwilson512> error please
[01:36:49] <trafficjam> there is none, it just crashes
[01:36:52] <benwilson512> ?
[01:37:16] <benwilson512> tangentially apply_children needs to be this given how your structs are
[01:37:18] <benwilson512> https://www.irccloud.com/pastebin/WzX0Vk8L/
[01:37:30] <benwilson512> how are you running this such that you don't see an error?
[01:37:51] <trafficjam> as in i run the query, and then the process crashes, but there's no error output
[01:37:54] <trafficjam> running it in iex
[01:38:10] <benwilson512> like, the whole of erlang crashes?
[01:38:52] <trafficjam> not entirely sure, but at the very least the phoenix server stops and i'm returned to my shell
[01:39:04] <benwilson512> that is very very strange
[01:39:15] <benwilson512> what are you running precisely?
[01:39:23] <benwilson512> well
[01:39:27] <benwilson512> first I'd restart your server
[01:39:36] <trafficjam> benwilson512: i'm using arbor btw, maybe that's related? https://github.com/coryodaniel/arbor
[01:40:07] <benwilson512> not likely the reason for your weird iex behavior
[01:40:14] <trafficjam> hmm ok
[01:40:41] <trafficjam> i mean i'm running an absinthe backend phoenix app, pretty standard
[01:41:00] <benwilson512> I don't think it's about a library
[01:41:07] <benwilson512> does this happen regularly?
[01:41:17] <trafficjam> nope, first time i've ever experienced this
[01:41:36] <benwilson512> OK let's do a quick sanity check and stop the server, `rm -rf _build` and then recompile / restart the server
[01:41:41] <benwilson512> then let's run your query and see what happens
[01:41:48] <trafficjam> ok, just a sec
[01:42:19] <trafficjam> i'll start a new tmux session too, just to be safe
[01:46:15] <trafficjam> benwilson512: hmm process is still crashing
[01:47:12] <trafficjam> this is the query debug, might be helpful -> https://www.pastery.net/fbgxku/
[01:50:15] <benwilson512> can you paste more? Start with what you type, and go all the way through what happens after it crashes
[01:50:26] <benwilson512> is the query run from iex directly?
[01:50:32] <benwilson512> or from a phoenix request?
[01:52:15] <trafficjam> Yeah so im running a context function (Categories.user_categories(user_id) => https://www.pastery.net/xqdqmk/) from inside of iex
[01:52:44] <benwilson512> oh
[01:53:00] <trafficjam> notice anything?
[01:53:22] <benwilson512> does it kick you out of iex altogether?
[01:53:35] <benwilson512> and kill the server?
[01:53:54] <trafficjam> it does yeah
[01:54:00] <benwilson512> ahhhh
[01:54:03] <benwilson512> I bet we are ooming
[01:54:14] <benwilson512> I bet I have a bug and it's recursing infinitely
[01:54:24] <benwilson512> generating an infinitely large data structure and being killed by your OS
[01:54:31] <benwilson512> can you echo $? after it exits?
[01:54:42] <trafficjam> `echo $`?
[01:54:51] <benwilson512> yeah that should print the exit code
[01:55:09] <trafficjam> yeah sure, running it now
[01:56:10] <trafficjam> benwilson512: `echo $?` gives 137
[01:56:25] <benwilson512> yup
[01:56:25] <benwilson512> OOM
[01:56:31] <benwilson512> so we have an infinite recursion bug, cool! :D
[01:56:32] <benwilson512> let's fix it
[01:57:00] <trafficjam> never heard this term before :)
[01:57:22] <trafficjam> is this caused by the code, or by a bug in elixir?
[02:03:38] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[02:04:46] *** Joins: notzmv (~zmv@user/notzmv)
[02:17:18] *** Quits: notapenguin (~ryu@179.222.242.20) (Quit: WeeChat 3.3)
[02:19:40] <benwilson512> this is a bug in our code
[02:19:51] <benwilson512> trafficjam: evening routine keeps taking me away, apologies
[02:20:08] <benwilson512> basically, you'll notice how our code keeps calling itself
[02:22:07] *** Quits: OZ8AAZ_ (~OZ8AAZ@5.103.131.97.static.fibianet.dk) (Remote host closed the connection)
[02:22:07] <trafficjam> i was trying to fully understand what it was doing earlier but wasn't able to
[02:22:22] <trafficjam> this recursive stuff can be quite tricky to reason about
[02:22:52] <trafficjam> (to follow the whole logic flow from start to finish i mean)
[02:22:57] <benwilson512> trafficjam: yeah let me get a version that actually works
[02:23:07] <benwilson512> and then I'll elaborate, I've simplified your data to this
[02:23:08] <benwilson512> https://www.irccloud.com/pastebin/bnQksuVU/
[02:23:10] <benwilson512> just to make my life easier
[02:23:38] <trafficjam> ah that's much cleanre
[02:23:41] <trafficjam> *cleaner
[02:24:08] <benwilson512> trafficjam: here's a question I have
[02:24:17] <benwilson512> are you always sure which is the root node?
[02:24:27] <benwilson512> or are you given a list of categories and you have no idea which are roots and which aren't?
[02:26:13] <trafficjam> so for the particular page i'm working on at the moment, you will always have a "root" node. It might help if i explain the general overview of how i'm trying to set the categories up
[02:26:17] *** Quits: ur5us (~ur5us@2406:e002:6c7b:2301:f812:b76c:617f:99d7) (Ping timeout: 240 seconds)
[02:26:20] <benwilson512> OK cool so this code works for me
[02:26:21] <benwilson512> https://www.irccloud.com/pastebin/Z7FGuNLa/
[02:26:40] <benwilson512> https://www.irccloud.com/pastebin/jdUA0Lpl/
[02:26:50] <benwilson512> notice the small change here `Map.put(node, :children, apply_children(nodes_by_parent[node.id] || [], nodes_by_parent))`
[02:26:58] <benwilson512> I'm doing `node.id` not `node.parent_id`
[02:27:06] <benwilson512> cause we want to get the children _of the current node_
[02:27:18] <benwilson512> if we get the children of the parent, well, that's just this node again! and so we recurse infinitely
[02:27:37] <trafficjam> ah so that was the cause of the loop, nice find!
[02:27:58] <benwilson512> as far as reasoning about recursive stuff goes
[02:28:14] <benwilson512> tree walks are generally a nicely recursive thing to begin with. At any tier you need to go "what should I do to my children?"
[02:28:30] <benwilson512> and usually that involves the child thinking about its children, and so on and so forth
[02:28:41] <benwilson512> so a recursive call tends to just fall out of the problem
[02:30:54] <trafficjam> my personal experience is that it's almost a different way of thinking that you have to get into again for a day or two and then it comes back, but not really utilizing that way of thinking for a long time and then coming back can be difficult at first
[02:31:03] <benwilson512> for sure
[02:31:52] <trafficjam> i might just quickly explain what i'm aiming for with my category system and if you think it's a bad implementation please let me know
[02:32:49] <trafficjam> basically i want to allow users to create their own category trees, but also have a "system" (aka "main") category tree
[02:33:51] <trafficjam> so i was planning on keeping the very root category as the "main" root, and then when a user wanted to start creating their own categories, i would create a new "user root" category which all of their subsequent categories would be put under
[02:34:23] <trafficjam> basically if a category has a user_id, it belongs to a user, and if user_id is nil, it belongs to the system/main category tree
[02:35:30] <trafficjam> so for the current page im working on (the user page), i pass the user's id to my context, and then find the category with the lowest id integer and that should be the user's root category
[02:36:50] <benwilson512> I think that makes sense, I'd also see if Arbor has any helpers for rebuilding trees
[02:36:52] <benwilson512> I feel like it would
[02:38:31] <trafficjam> you would think so, but at least from looking at their hex page i couldn't see anything that suggested that it did
[02:39:06] <trafficjam> (btw your code works perfectly, thanks :)
[02:40:20] <benwilson512> trafficjam: I'll poke about their docs later and see if anything stands out to me. In the mean time, dinner, have a great day!
[02:40:49] <trafficjam> you too ben, enjoy the meal and thanks again!
[03:31:09] *** Joins: ur5us (~ur5us@2406:e002:6c7b:2301:f812:b76c:617f:99d7)
[03:37:47] *** Quits: jmcgnh (~jmcgnh@wikipedia/jmcgnh) (Ping timeout: 256 seconds)
[03:39:18] *** Quits: KettleMan (~kttl_crn@208.75.113.3) (Quit: Lost terminal)
[03:42:27] *** Joins: jmcgnh (~jmcgnh@wikipedia/jmcgnh)
[03:44:24] *** Quits: timkaechele1 (~Adium@185.175.193.9) (Quit: Leaving.)
[03:55:47] *** Quits: drewlander (~drewlande@74.196.20.3) (Quit: ZNC 1.8.2+deb2 - https://znc.in)
[03:59:45] *** Joins: drewlander (~drewlande@74.196.20.3)
[04:06:14] *** Quits: damjan (~damjan@user/damjan) (Quit: bye)
[04:07:37] *** Joins: damjan (~damjan@user/damjan)
[04:26:59] *** Quits: trafficjam (~trafficja@2a03:1b20:a:f011::a01e) (Ping timeout: 256 seconds)
[04:29:17] *** Quits: hoppity (~user@user/hoppity) (Remote host closed the connection)
[04:52:37] *** Quits: Rubyn (~Rubyn@user/rubyn) (Ping timeout: 240 seconds)
[04:54:59] *** Joins: Rubyn (~Rubyn@user/rubyn)
[05:29:46] *** Quits: pflanze (~pflanze@5-168-208-80-pool.fiber.fcom.ch) (Remote host closed the connection)
[05:30:08] *** Joins: pflanze (~pflanze@5-168-208-80-pool.fiber.fcom.ch)
[05:33:47] *** Quits: damjan (~damjan@user/damjan) (Quit: bye)
[05:34:53] *** Joins: damjan (~damjan@user/damjan)
[06:19:49] *** Quits: brycek (sid153199@id-153199.ilkley.irccloud.com) (Ping timeout: 240 seconds)
[06:19:56] *** Quits: mcrumm (sid467326@id-467326.ilkley.irccloud.com) (Ping timeout: 245 seconds)
[06:19:56] *** Quits: ericentin__ (sid134418@id-134418.hampstead.irccloud.com) (Ping timeout: 245 seconds)
[06:20:13] *** Quits: joedevivo (sid16225@id-16225.tinside.irccloud.com) (Ping timeout: 240 seconds)
[06:20:15] *** Quits: benwilson512 (sid71699@id-71699.ilkley.irccloud.com) (Ping timeout: 250 seconds)
[06:20:20] *** Joins: brycek (sid153199@id-153199.ilkley.irccloud.com)
[06:20:46] *** Quits: mjones (sid6844@id-6844.helmsley.irccloud.com) (Ping timeout: 245 seconds)
[06:22:07] *** Joins: mjones (sid6844@id-6844.helmsley.irccloud.com)
[06:23:07] *** Joins: mcrumm (sid467326@id-467326.ilkley.irccloud.com)
[06:23:10] *** Joins: ericentin__ (sid134418@id-134418.hampstead.irccloud.com)
[06:23:23] *** Joins: joedevivo (sid16225@id-16225.tinside.irccloud.com)
[06:23:26] *** Joins: benwilson512 (sid71699@id-71699.ilkley.irccloud.com)
[06:27:13] *** Quits: stiang (sid245441@helmsley.irccloud.com) (Ping timeout: 256 seconds)
[06:30:24] *** Joins: stiang (sid245441@id-245441.helmsley.irccloud.com)
[07:38:37] *** Quits: ur5us (~ur5us@2406:e002:6c7b:2301:f812:b76c:617f:99d7) (Ping timeout: 240 seconds)
[07:45:43] *** Joins: mahmutov (~mahmutov@5.176.0.124)
[08:07:14] *** Quits: mahmutov (~mahmutov@5.176.0.124) (Ping timeout: 260 seconds)
[08:20:48] *** Joins: livoreno (~livoreno@user/notzmv)
[09:01:28] *** Joins: mexen (uid495612@user/mexen)
[09:22:26] *** Joins: trafficjam (~trafficja@2a03:1b20:a:f011::a03e)
[10:15:01] <serafeim> hello friends
[10:16:03] <serafeim> is anybody familiar with creating a tcp server ? 
[10:37:01] *** Quits: trafficjam (~trafficja@2a03:1b20:a:f011::a03e) (Ping timeout: 256 seconds)
[10:47:39] *** Joins: trafficjam (~trafficja@2a03:1b20:a:f011::a03e)
[10:47:59] *** Joins: manicennui (uid349235@id-349235.tinside.irccloud.com)
[10:50:07] *** Joins: chgr (~ek@nat-91-137-16-17.net.encoline.de)
[11:02:03] <havenwood> serafeim: yup, making one
[11:02:17] <havenwood> I meant, to have a question mark there. :)
[11:02:20] <havenwood> making one?
[11:02:26] <serafeim> yes that's what i want
[11:02:30] <serafeim> but i'm coplete lost
[11:02:53] <havenwood> whatcha trying to do, in broader strokes?
[11:03:56] <serafeim> i want to have a tcp server in elixir. i want mutliple clients (non-elixir) to be able to connect to it. the server will get messages from the clients at arbitrary times and return a response. it will also broadcast a message to all clients every 1 second
[11:04:30] <serafeim> i have more or less implemented that using phoenix and live views. but i now want to do it using only tcp
[11:04:42] <havenwood> serafeim: Tried with just Plug yet?
[11:04:54] <serafeim> isn't plug for http ? 
[11:04:56] <Nicd> Plug is HTTP
[11:05:25] <Nicd> I only know there is gen_tcp
[11:06:13] <serafeim> i don't want to have the http overhead
[11:06:22] <serafeim> nor i want to send text messages
[11:07:01] <Nicd> well you're in luck, HTTP/2 is binary :D
[11:07:25] <serafeim> no
[11:08:00] <Nicd> anyway take a look at gen_tcp
[11:08:11] <Nicd> dunno if there are wrappers / utilities for it on Hex
[11:09:27] <Nicd> searching "tcp" on Hex gives many results
[11:09:35] <havenwood> or maybe https://www.erlang.org/doc/man/socket.html
[11:10:03] <Nicd> hmm is socket the new hotness?
[11:10:12] <havenwood> new new
[11:11:04] <serafeim> uh oh it's in erlang
[11:12:08] <Nicd> seems socket doesn't support windows
[11:12:20] <havenwood> Nicd: oops
[11:21:29] *** Joins: sm2n (ae95cb1267@user/sm2n)
[11:37:56] <serafeim> so it's a no-no for me
[11:46:32] <trafficjam> can you pattern match on a schema in a `case` statement?
[11:47:14] <trafficjam> e.g. x = Product |> where(...) |> Repo.one; case x do\n %Product{} -> ...
[11:47:57] <serafeim> i can't see why no
[11:48:04] <serafeim> have you tried it ?
[11:48:31] <serafeim> howeve notice that if the repo.one doesn't return 1 element it will throw (iirc)
[11:49:09] <trafficjam> serafeim: i haven't because i'm not sure what the syntax should look like, %Product{} -> obviously won't work
[11:49:21] <Nicd> serafeim: that's one!
[11:49:32] <trafficjam> and Repo.one will return nil if not match is found, which the case statement can handle
[11:49:40] <trafficjam> *no match
[11:49:44] <Nicd> trafficjam: `%Product{} = p -> do_something(p)`
[11:49:50] <trafficjam> thanks
[11:50:07] <Nicd> or you could directly `%Product{} -> do_something(x)`
[11:51:42] <trafficjam> oh also good to know
[11:52:15] <Nicd> but if you're only checking if it's nil or not, I'd prefer a plain `if`
[12:19:13] <serafeim> the good thing with case is that you can use it to pattern match
[12:20:01] <serafeim> i.e even if you have only two cases it's worth it to use the case because it includes the matching
[12:22:08] *** Joins: voltone (~voltone@2a02:14c:8a60:2a:304c:b4f5:30b7:e1db)
[12:24:13] <Nicd> you can match with `if match?(...)` also if you only have two cases. in this case it's not necessary if the result can only be nil or the struct
[12:26:05] *** Quits: Sgeo_ (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[12:33:07] *** Quits: voltone (~voltone@2a02:14c:8a60:2a:304c:b4f5:30b7:e1db) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:35:18] *** Joins: voltone (~voltone@2a02:14c:8a60:2a:304c:b4f5:30b7:e1db)
[12:55:14] *** Quits: voltone (~voltone@2a02:14c:8a60:2a:304c:b4f5:30b7:e1db) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:56:48] *** Joins: voltone (~voltone@2a02:14c:8a60:2a:304c:b4f5:30b7:e1db)
[13:02:16] *** Quits: voltone (~voltone@2a02:14c:8a60:2a:304c:b4f5:30b7:e1db) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:04:48] *** Joins: voltone (~voltone@2a02:14c:8a60:2a:304c:b4f5:30b7:e1db)
[13:26:06] *** Quits: voltone (~voltone@2a02:14c:8a60:2a:304c:b4f5:30b7:e1db) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:29:46] <hmanscloud> hmans: test (sorry)
[13:42:47] <hmans> Sogar, wenn die PWAs zu sind. Perfekt!
[13:42:53] <hmans> Partaaayyyytyymmeeee
[13:45:16] <hmans> Mmmh, F# ist nice
[14:16:31] *** Joins: voltone (~voltone@2a02:14c:8a60:2a:1961:285b:f9aa:3957)
[14:19:45] *** Joins: OZ8AAZ (~OZ8AAZ@5.103.131.97.static.fibianet.dk)
[14:20:37] *** Quits: voltone (~voltone@2a02:14c:8a60:2a:1961:285b:f9aa:3957) (Ping timeout: 240 seconds)
[14:32:15] <Nicd> hmans: English only, please
[14:32:41] <hmans> Oh crap, I used the wrong channel. Apologies
[14:32:52] <Nicd> :)
[14:33:06] <hmans> I haven't had my third coffee yet
[15:15:02] *** Joins: notapenguin (~ryu@179.222.242.20)
[15:39:14] <serafeim> ok i'm asking again in case there are people now that can help. let's suppose i want to implement a tcp server: it will listen for clients connecting and then send/receive messages to them through a socket. where should i start ?
[16:03:17] *** Quits: trafficjam (~trafficja@2a03:1b20:a:f011::a03e) (Quit: Client closed)
[16:03:47] *** Joins: Ilyu (~quassel@78.202.228.230)
[16:18:15] <Nicd> serafeim: did you look at gen_tcp?
[16:18:25] <Nicd> or the Hex results for "tcp"
[16:18:32] <serafeim> yes a little but i could understand where to start
[16:18:49] <norrland> https://elixir-lang.org/getting-started/mix-otp/task-and-gen-tcp.html ?
[16:21:12] <serafeim> yes i've seen that
[16:22:57] *** Joins: Guest99 (~Guest99@45.249.86.249)
[16:25:38] <serafeim> should i start from that ? 
[16:27:01] *** Quits: Guest99 (~Guest99@45.249.86.249) (Client Quit)
[16:28:53] <norrland> a good base as any I guess.
[16:36:01] <norrland> Perhaps it's enough for you to base of off and adapt to your needs.
[16:46:12] <serafeim> i'll try it
[16:46:18] <serafeim> seems like too much work though :(
[17:22:17] *** Quits: chgr (~ek@nat-91-137-16-17.net.encoline.de) (Quit: WeeChat 3.3)
[18:23:43] *** Joins: phaleth (~phaleth@user/phaleth)
[19:05:46] *** Joins: Sgeo (~Sgeo@user/sgeo)
[19:06:42] *** Quits: Ilyu (~quassel@78.202.228.230) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:03:20] <hmans> Is it considered bad style to not give a GenServer an explicit public API?
[20:13:40] *** Quits: Tongir68 (~Donger@signiq.cust.bdr01.per02.wa.VOCUS.net.au) (Remote host closed the connection)
[20:13:51] *** Joins: mahmutov (~mahmutov@5.176.0.124)
[20:13:58] *** Joins: Tongir68 (~Donger@signiq.cust.bdr01.per02.wa.VOCUS.net.au)
[20:14:57] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[20:15:07] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 268 seconds)
[20:37:27] *** Quits: v_ (~NULLx76@80-60-83-220.fixed.kpn.net) (Quit: Ping timeout (120 seconds))
[20:37:41] *** Joins: v_ (~NULLx76@80-60-83-220.fixed.kpn.net)
[20:46:39] *** Quits: Perry (~perry@coffee-break.at) (Quit: ZNC - http://znc.in)
[20:47:24] *** Joins: Perry (~perry@coffee-break.at)
[20:59:13] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[21:11:55] <Ankhers> josevalim: Sorry for pinging you directly on this but I wasn't able to find an answer. https://paste.sr.ht/~ankhers/4aa54b2a5bc036d708ffcc89fa8b68b65f3ed26f -- We had this code in our project and it worked in 1.12 and probably 1.11 (I don't remember when we upgraded versions) but this broke in 1.13. I realize it is not the best way to do it, but I was wondering if it was a bug that it worked or if it is a bug that it broke?
[21:12:48] <Ankhers> hmans: I think so. The user of the GenServer doesn't necessarily need to know it is actually a GenServer underneath. Someone should not care about implementation details.
[21:17:46] <hmans> Ankhers: good point. Thanks.
[21:40:44] *** Joins: optikfluffel (~optikfluf@2001:9e8:221:8b00:309f:e5eb:582:24f5)
[21:58:56] *** Joins: notzmv (~zmv@user/notzmv)
[22:15:07] *** Joins: livoreno (~livoreno@user/notzmv)
[22:17:18] <Ankhers> serafeim: I would start with ranch.
[23:02:56] *** Quits: drewlander (~drewlande@74.196.20.3) (Quit: ZNC 1.8.2+deb2 - https://znc.in)
[23:06:02] *** Joins: drewlander (~drewlande@74.196.20.3)
[23:11:50] *** Joins: optikfluffel_ (~optikfluf@2001:9e8:221:8b00:8097:2b07:1883:f510)
[23:13:25] *** Quits: optikfluffel (~optikfluf@2001:9e8:221:8b00:309f:e5eb:582:24f5) (Ping timeout: 240 seconds)
[23:57:08] *** Quits: phaleth (~phaleth@user/phaleth) (Quit: phaleth)
