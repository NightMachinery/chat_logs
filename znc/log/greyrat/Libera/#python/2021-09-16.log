[00:00:10] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 240 seconds)
[00:00:50] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[00:01:10] *** Joins: wyclif (~wyclif@user/wyclif)
[00:01:10] *** Joins: Julian (~tos9@python/site-packages/Julian)
[00:03:16] *** Joins: fengshaun (~fengshaun@S010680615f0c2c0a.cg.shawcable.net)
[00:03:33] *** Joins: LuksNuke (~LuksNuke@ip-146-0-191-111.dyn.luxfibre.pt.lu)
[00:03:55] *** Quits: ent681 (~ent681@pool-96-244-184-85.bltmmd.fios.verizon.net) (Ping timeout: 268 seconds)
[00:04:36] *** Joins: or4n (~or4n@gerbera.qkka.org)
[00:05:52] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[00:05:56] *** Joins: Akuli (~Akuli@82-203-161-75.bb.dnainternet.fi)
[00:05:56] <xrogaan> is there an elegant way to check if an element of type 'x' is present in a list?
[00:06:39] *** Joins: wyclif (~wyclif@user/wyclif)
[00:06:50] <grym> xrogaan: any(isinstance(foo, x) for foo in mylist)
[00:07:38] <xrogaan> right
[00:07:56] *** Parts: control (~v1@user/control) ()
[00:08:14] <grym> i can't think of a nicer way
[00:08:14] *** Quits: greedom (~greedom@2001:16b8:2e0f:a200:1ea4:5b9f:ffc0:3d20) (Remote host closed the connection)
[00:11:22] *** Quits: georgios (~georgios@user/georgios) (Ping timeout: 252 seconds)
[00:11:38] <xrogaan> no, you're right. I'm just battling with my own code.
[00:11:49] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[00:12:12] *** Joins: wyclif (~wyclif@user/wyclif)
[00:14:12] *** Joins: r3m (~launch@user/r3m)
[00:14:41] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[00:15:17] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[00:16:53] *** Quits: sgn (~sgn@user/sgn) (Ping timeout: 252 seconds)
[00:17:38] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[00:17:57] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[00:18:07] *** Joins: wyclif (~wyclif@user/wyclif)
[00:18:19] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 268 seconds)
[00:18:53] *** Joins: sgn (~sgn@user/sgn)
[00:18:59] *** Quits: howdoi (uid224@id-224.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[00:19:16] *** Joins: ent681 (~ent681@pool-96-244-184-85.bltmmd.fios.verizon.net)
[00:22:41] <anddam> can you suggest me a small package providing a console_script? I am trying to make a minimal test to reproduce my issue
[00:22:50] <anddam> and that should not be pip
[00:24:15] <lxer> ?
[00:24:16] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[00:24:42] <grym> anddam: you want something that, when installed, has an entry point?
[00:25:19] <lxer> anddam, what is "console_script"?
[00:25:25] <anddam> yes, to make a mre of my setup issue
[00:25:29] <anddam> grym: ^
[00:25:43] <anddam> lxer: an element specified in console_scripts https://setuptools.readthedocs.io/en/latest/userguide/entry_point.html
[00:25:48] <grym> anddam: should be quite easy to write your own nearly-empty project
[00:26:07] <anddam> grym: yes, I wanted something out there to make it more easily reproducible for other people
[00:27:10] <anddam> grym: and that can be specified with an URL based dependency, with file:// ?
[00:27:36] <lxer> you mean a commandline application?
[00:27:56] <anddam> grym: from what I can see when I run bdist_wheel the packages specified in install_requires are there, but that specific entry_point of my dependency is not in <venv>/bin according to the interpreter running bdist_wheel
[00:28:01] <anddam> even if I see the file in the path
[00:28:16] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[00:28:35] <anddam> grym: I want to redact that, "when pip runs bdist_wheel"
[00:28:39] *** Joins: wyclif (~wyclif@user/wyclif)
[00:29:52] *** Joins: fr_sleepy (~fr_sleepy@209.94.138.128)
[00:30:01] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: vvdaiwrw)
[00:31:35] *** Joins: cdown (~cdown@194.207.141.245)
[00:32:41] *** Joins: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:b867:12ff:ff2a:b25f)
[00:33:06] <grym> anddam: https://bpa.st/R5NQ
[00:33:19] <grym> anddam: those three files constitute an installable package with an entry poiunut
[00:33:22] <grym> point*
[00:33:35] <grym> plonk them anywhere you like, point pip at them
[00:33:44] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[00:34:32] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[00:34:37] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[00:35:13] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[00:35:46] *** Quits: jpodivin (~jpodivin@118.108.broadband14.iol.cz) (Ping timeout: 260 seconds)
[00:36:10] *** Joins: pycurious (~Adium@user/pycurious)
[00:36:48] <pycurious> when an https server gets a GET request from another server, is it easy to verify that it came from "*.xdomain.com"? Is that something that can be securely relied upon ?
[00:37:28] <Julian> pycurious: verifying the *client* is who it says it is isn't usually part of TLS, but there are ways to do so via client certificates
[00:38:05] <BtbN> You cannot rely on the client claiming to be coming from a certain domain, if you mean that
[00:38:06] <pycurious> Julian: I'm using flask. When the data comes in, perhaps I can just poke flask to give me the domain with which it verified communication?
[00:38:21] <BtbN> Flask does not verify communication like that
[00:38:25] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[00:38:28] <Julian> (this isn't truly a Python-specific question, but e.g. cryptography will know how to deal with client certs, as will your favorite python web server, and httpx or requests as clients will support sending client certs)
[00:38:44] <pycurious> BtbN: Is there a way to make flask require verification?
[00:38:45] <Julian> pycurious: as I (and BtbN said) in normal communication, that information isn't shared let alone verified
[00:39:01] *** Joins: bloodninja123 (~bloodninj@user/bloodninja)
[00:39:11] <Julian> pycurious: flask supports requiring authentication for paths
[00:39:19] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[00:39:20] <Julian> have you considered using that to make sure you're talking to someone you trust?
[00:39:44] *** Joins: wyclif (~wyclif@user/wyclif)
[00:40:54] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[00:41:05] *** Joins: bninja (~bloodninj@user/bloodninja)
[00:41:22] *** Quits: lesshaste (~lesshaste@82-69-126-43.dsl.in-addr.zen.co.uk) (Remote host closed the connection)
[00:41:22] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Ping timeout: 260 seconds)
[00:41:22] <pycurious> Julian: I've to give a client a piece of code to post to my server. I just want to make sure that I can trust the client with that data. I can put a fixed password in it, but that sounds like.a security disaster.
[00:42:01] *** Quits: freeworld (~vit@chello085216193138.chello.sk) (Read error: Connection reset by peer)
[00:42:17] *** Quits: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net) (Ping timeout: 265 seconds)
[00:43:15] *** Quits: bloodninja (~bloodninj@user/bloodninja) (Ping timeout: 265 seconds)
[00:43:41] *** Joins: ExpiredKebab (~sgreadly@32.58.252.27.dyn.cust.vf.net.nz)
[00:43:43] *** Quits: ent681 (~ent681@pool-96-244-184-85.bltmmd.fios.verizon.net) (Ping timeout: 252 seconds)
[00:43:48] *** Joins: freeworld (~vit@chello085216193138.chello.sk)
[00:44:12] <BtbN> a shared secret is not that uncommon
[00:44:27] <BtbN> a client cert is not that different
[00:44:37] <BtbN> just don't transfer it in plain, obviously
[00:44:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[00:44:46] *** Quits: bloodninja123 (~bloodninj@user/bloodninja) (Ping timeout: 252 seconds)
[00:45:05] *** Quits: Haxxa (~Haxxa@116-255-6-75.ip4.superloop.com) (Quit: Haxxa flies away.)
[00:45:15] *** Joins: wyclif (~wyclif@user/wyclif)
[00:45:47] <meejah> certificates typically use asymmetric crypto, not shared secrets
[00:46:26] *** Joins: georgios (~georgios@user/georgios)
[00:47:24] <meejah> pycurious: what are you actually trying to do?
[00:47:27] *** Joins: Haxxa (~Haxxa@116-255-6-75.ip4.superloop.com)
[00:48:06] <BtbN> If you just want to identify one precise trusted client, they are pretty much interchangeable.
[00:48:18] <BtbN> Just use a strong truely random secret
[00:48:30] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[00:49:18] <meejah> ..and transfer 100% securely. leaking the public-key isn't nearly as bad
[00:49:44] *** Quits: nomic (~nomic@185.217.117.156) (Quit: Leaving)
[00:50:16] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[00:50:45] <BtbN> If you're using TLS anyway, it's uncritical
[00:50:47] *** Joins: wyclif (~wyclif@user/wyclif)
[00:50:55] *** LxGHTNxNG is now known as xLightningx
[00:51:01] <meejah> with symmetric crypto, anyone breaking the server can now impersonate _all_ clients. with asymmetric: none.
[00:51:40] <BtbN> It's just a single client though
[00:52:29] <sveinse> When am I going to stop chaing for ghost bugs, where I spend a long time to later realize that pprint() actually split a long string over multiple line (no comma at the end) and its NOT a long list with one entry per line :D
[00:52:37] <sveinse> Subtle that one
[00:52:39] <meejah> okay, so _all_ == 1, still worse
[00:53:10] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 252 seconds)
[00:54:41] <BtbN> Not sure what you mean. It's the identical result
[00:54:59] <BtbN> If you compromise the server, you lost in both cases. Same with the client.
[00:55:19] *** Joins: Julian (~tos9@python/site-packages/Julian)
[00:55:30] <sveinse> meejah: there are three permutations of assymetric, aren't there: A Pub/Priv <--> B, A <--> B Pub/Priv and A Pub/Priv <-- > B Pub/Priv. In accordance with SSL/TLS
[00:55:41] <meejah> in symmetric case, someone stealing the secret can forever impersonate the client .. same with asymmetric, except only 1 party holds the secret in that case, not both
[00:55:56] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[00:56:17] *** Joins: wyclif (~wyclif@user/wyclif)
[00:56:25] *** Joins: skali (~skali@46.191.137.79)
[00:56:54] <sveinse> meejah: forget it, I'm mixing CA verification here. Both parties still use asymmetric keys during keyexchange
[00:57:23] <meejah> sveinse: BtbN is claiming a shared secret is "the same" as a server cert + client cert (for mutual authentication)
[00:57:35] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[00:57:38] *** Quits: magla (~gelignite@55d43f3e.access.ecotel.net) (Quit: Stay safe!)
[00:58:11] <BtbN> For exactly one client, they are equivalent in function, yes. Not in complexity of implementation.
[01:00:09] *** Quits: mohabaks (~mohabaks@gateway/tor-sasl/mohabaks) (Ping timeout: 276 seconds)
[01:00:40] *** Quits: skali (~skali@46.191.137.79) (Ping timeout: 240 seconds)
[01:00:42] <meejah> an attacker of the server (or client) can't impersonate the other one with asymmetric; with symmetric breaking either gets you both
[01:00:59] *** Joins: junktext (~junktext@77.247.181.215)
[01:01:26] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[01:01:50] *** Joins: wyclif (~wyclif@user/wyclif)
[01:02:56] <sveinse> Since we're talking about purely asymmetrical keys, we're not talking TLS?
[01:03:45] *** Quits: Strom (strom@fedora/strom) ()
[01:05:22] *** Joins: Strom (strom@fedora/strom)
[01:05:35] *** Joins: skali (~skali@46.191.137.79)
[01:06:56] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[01:07:16] *** Joins: wyclif (~wyclif@user/wyclif)
[01:07:21] *** Quits: LuksNuke (~LuksNuke@ip-146-0-191-111.dyn.luxfibre.pt.lu) (Read error: Connection reset by peer)
[01:10:07] *** Quits: skali (~skali@46.191.137.79) (Ping timeout: 268 seconds)
[01:10:29] *** Quits: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:b867:12ff:ff2a:b25f) (Read error: Connection reset by peer)
[01:11:15] *** Joins: Macuser (~Macuser@216.30.159.201)
[01:12:22] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[01:12:46] *** Joins: wyclif (~wyclif@user/wyclif)
[01:12:46] *** Joins: LuxuryMode (uid91005@id-91005.ilkley.irccloud.com)
[01:13:03] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[01:13:49] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[01:14:13] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Ping timeout: 268 seconds)
[01:14:57] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[01:15:26] *** Quits: Sky_Net (~Sky_Net@176.14.213.149) (Ping timeout: 260 seconds)
[01:16:08] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[01:16:56] *** Joins: Sky_Net (~Sky_Net@176.14.213.149)
[01:17:02] *** Joins: pycurious (~Adium@user/pycurious)
[01:17:13] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[01:17:49] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[01:18:18] *** Joins: wyclif (~wyclif@user/wyclif)
[01:18:22] *** Quits: tracey (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[01:18:56] *** Joins: fikran (~fikran@user/fikran)
[01:19:02] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[01:19:22] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Quit: Client closed)
[01:19:30] *** Quits: p-i-_ (~Ohmu@223.206.145.156) (Ping timeout: 265 seconds)
[01:23:02] *** Quits: Widdershins (widders@ps.mad.cash) (Remote host closed the connection)
[01:23:15] *** Joins: skali (~skali@46.191.137.79)
[01:23:28] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[01:23:41] *** Joins: Widdershins (widders@ps.mad.cash)
[01:23:48] *** Joins: wyclif (~wyclif@user/wyclif)
[01:24:51] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[01:25:12] *** Joins: phonemic (~phonemic@2600:1700:3379:140::43)
[01:25:59] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[01:26:15] <meejah> original question was https, yes
[01:26:16] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 265 seconds)
[01:26:37] <meejah> (I guess I jumped to something more generic, "because TLS weird and complex")
[01:26:51] <sveinse> ah
[01:26:58] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::4433) (Quit: Konversation terminated!)
[01:27:39] *** Quits: oddish (~oddish@2a01:4f8:1c1c:a9da::1) (Quit: nyaa~)
[01:28:12] *** Quits: skali (~skali@46.191.137.79) (Ping timeout: 265 seconds)
[01:28:26] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[01:28:58] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[01:29:22] *** Joins: wyclif (~wyclif@user/wyclif)
[01:29:51] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 268 seconds)
[01:30:41] *** Quits: pyfisch (~pyfisch@user/pyfisch) (Quit: Ping timeout (120 seconds))
[01:30:41] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.1)
[01:31:05] *** Joins: pyfisch (~pyfisch@user/pyfisch)
[01:32:10] *** Joins: Rain42 (~Rain@li958-238.members.linode.com)
[01:33:00] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[01:33:19] *** Joins: pycurious (~Adium@user/pycurious)
[01:33:52] <bionade24> Hello, when trying "from collectd_plugin import write_ros" I get module collectd not found. Why does python ignore the underscore?
[01:34:12] *** Joins: dba (uid502594@id-502594.hampstead.irccloud.com)
[01:34:16] *** Quits: Rain4 (~Rain@li958-238.members.linode.com) (Ping timeout: 252 seconds)
[01:34:16] *** Rain42 is now known as Rain4
[01:34:27] *** Quits: murd0c (~Murdoc@user/murd0c) (Quit: WeeChat 2.8)
[01:34:29] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[01:34:50] *** Joins: wyclif (~wyclif@user/wyclif)
[01:35:13] *** Joins: oddish (~oddish@2a01:4f8:1c1c:a9da::1)
[01:36:18] *** Quits: pycurious (~Adium@user/pycurious) (Read error: Connection reset by peer)
[01:36:27] <raek> bionade24: it shouldn't. are you sure the error comes from that line?
[01:36:38] *** Quits: phonemic (~phonemic@2600:1700:3379:140::43) (Ping timeout: 268 seconds)
[01:37:19] *** Quits: r3m (~launch@user/r3m) (Quit: WeeChat 3.3-dev)
[01:37:37] *** Quits: Cheaterman (~Cheaterma@user/cheaterman) (Read error: Connection reset by peer)
[01:37:47] <bionade24> raek: I am https://bpa.st/EEZA
[01:37:56] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[01:38:02] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[01:38:30] *** Joins: phonemic (~phonemic@45.131.192.173)
[01:38:33] *** Joins: mukul (~mukul@c-24-6-109-135.hsd1.ca.comcast.net)
[01:38:39] <Yhg1s> bionade24: write_ros is importing collectd.
[01:38:48] <bionade24> raek: Ah nevermind I got it the module internally impiorts collectd
[01:38:48] <foo> I'm looking into building a magic link logic for a system that rarely requires login. I'm thinking I could store uid + expiration time in an encrypted hash with this: https://bpa.st/KB3A ... I can store a uid and expiration time in there. Unless there are best practices?
[01:39:14] <foo> I could have a magic_links table and store a hash + expiration time in there, too.
[01:40:19] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Quit: jmiehe)
[01:43:06] <johnny> foo, your best bet is to look at prior art on something like that. lots of various frameworks in different languages have a feature like that
[01:43:38] <johnny> if you don't get something like this exactly correct then it could lead to big problems
[01:44:28] <foo> johnny: I suppose I could look into flask packages that might do this.
[01:44:36] <foo> johnny: "big problems" being someone being able to log in as someone else?
[01:44:39] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[01:44:40] *** Quits: Akuli (~Akuli@82-203-161-75.bb.dnainternet.fi) (Quit: Leaving)
[01:44:55] <johnny> yes, or accidentally allowing anyone to login
[01:45:03] *** Quits: phonemic (~phonemic@45.131.192.173) (Ping timeout: 268 seconds)
[01:45:46] *** Quits: brelod (~me@90.244.150.142) (Quit: leaving)
[01:45:52] *** Joins: wyclif (~wyclif@user/wyclif)
[01:45:56] <johnny> it doesn't have to be flask though, depends on if you're just looking to reuse code or write it yourself. definitely look at the bug reports or CVEs if they exist for such a package
[01:46:08] <johnny> and of course, django plugins even if you don't use django
[01:46:14] *** Quits: codificat (~pep@187.red-83-46-128.dynamicip.rima-tde.net) (Quit: leaving)
[01:46:27] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[01:46:37] <johnny> and you don't have to restrict yourself to prior art in python packages if you can't find it. you can look at php or rails code if necessary
[01:46:49] *** Joins: phonemic (~phonemic@45.131.192.173)
[01:47:30] <foo> johnny: Thanks, I guess I could start there. I doubt I'd look at other languages, though - I don't think this is that complicated. Unique hash, expiration date, store in database or encrypt/decrypt on URL, done... but maybe I'm missing something.
[01:48:09] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[01:48:15] <johnny> this is one of those things you have to absolutely get correct
[01:48:15] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 276 seconds)
[01:48:50] *** Joins: ghost43_ (~ghost43@gateway/tor-sasl/ghost43)
[01:49:17] *** Joins: odoood (~odoood@2601:c8:c003:a550::1)
[01:50:37] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[01:50:38] *** Joins: nomic (~nomic@185.217.117.156)
[01:50:46] *** Quits: cashew (~cashugh@user/cashew) (Ping timeout: 252 seconds)
[01:50:55] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[01:51:13] <foo> johnny: Not dealing with bank-level details. The reason to get it correct is to ensure proper logins go to proper people. A bug so "anyone can login" while possible is an elementary bug, I ain't that nub.
[01:51:20] *** Joins: wyclif (~wyclif@user/wyclif)
[01:51:23] <foo> johnny: anyway, thank you for bringing my sensitivity to this. Will look around.
[01:51:30] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Ping timeout: 276 seconds)
[01:51:54] <johnny> it's hardly an elementary bug considering how many people get it wrong, even in widely used code!
[01:52:01] *** Quits: nomic (~nomic@185.217.117.156) (Client Quit)
[01:52:14] <johnny> it's not about being a noob at all
[01:53:31] <johnny> the most serious bugs in all of history are buffer overflows and use after free in C/C++ code , and it's been a problem for 50 years, and people still can't get it right
[01:53:36] <foo> johnny: In that scenario, then I'm curious how that could possibly happen. There aren't an unlimited amount of possibilities here. I simply can't wrap my head around what you've seen, it sounds like. Not doubting you, I'm simply not following. This seems relatively binary and there are a handful of ways to do it... but the essence is hash + expiration. If you can provide any more specifics perhaps it'll help
[01:53:39] <johnny> and usually they aren't even hard bugs to fix
[01:53:42] <foo> me understand
[01:54:54] <johnny> that's the thing though, i've seen so many login bugs over the past 20 years by people with the exact same mindset .
[01:55:14] <johnny> and that's the thing, i recognize i'm still not freakin smart enough to solve it by myself
[01:55:42] <johnny> because it'll be all in the things I DON'T think about
[01:55:57] <foo> johnny: I respect your experience and I definitely don't doubt you. I like to think I'm rather meticulous and not sure how I could mess this up. *shrug*
[01:56:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[01:56:10] <johnny> well you're gonna do what you're gonna do
[01:56:25] <johnny> i'm just saying don't reinvent the wheel here if you can avoid it
[01:56:44] <sveinse> I'm so glad "identity management" and "key management" is a thing now - which essentially means: give it over to someone who knows what they're doing
[01:56:52] *** Joins: wyclif (~wyclif@user/wyclif)
[01:57:12] *** Quits: phonemic (~phonemic@45.131.192.173) (Ping timeout: 265 seconds)
[01:57:21] <johnny> and it also means that if there's a bug, then it'll likely get fixed and be automatically usable
[01:57:31] *** Quits: ferz (~ferz@93-39-143-224.ip76.fastwebnet.it) (Ping timeout: 252 seconds)
[01:57:39] <energizer> foo: i think you're asking for https://www.w3.org/TR/capability-urls/
[01:57:42] <johnny> but of course it also means those bugs affect waaay more people
[01:57:53] <johnny> computers are hard
[01:58:33] <foo> energizer: thanks. :)
[01:58:50] <foo> johnny: definitely a lot of nuance! Haha. Appreciate you raising my consciousness around this. :)
[01:59:47] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[02:00:02] <johnny> are you familiar with the owasp recommendations?
[02:00:05] *** Joins: skali (~skali@46.191.137.79)
[02:00:17] <johnny> or rather owasp security stuff in general?
[02:01:08] <foo> johnny: I have no doubt there's a lot of technical nuance I don't understand. I'm afraid that by answering your question I'll get a pie thrown at my face.
[02:01:17] <johnny> so that's a no
[02:01:24] <johnny> but , we all gotta start somewhere
[02:01:26] *** Quits: clarkk (~clarkk@host86-164-233-103.range86-164.btcentralplus.com) (Quit: Leaving)
[02:01:28] <foo> johnny: that's correct. /me googles
[02:01:40] <johnny> https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication
[02:01:52] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[02:01:55] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[02:02:23] *** Joins: wyclif (~wyclif@user/wyclif)
[02:03:02] <foo> johnny: oh, this is good. thank you.
[02:03:52] <johnny> i think stuff like hashing passwords is pretty well known, but the part about forgetting to rotate your magic links could be a serious problem
[02:04:18] <johnny> this is the whole top ten https://owasp.org/www-project-top-ten/
[02:05:00] *** Quits: skali (~skali@46.191.137.79) (Ping timeout: 268 seconds)
[02:05:04] *** Joins: cliluw (~cliluw@47.147.80.149)
[02:05:37] <foo> johnny: forgetting to rotate should be forced if there's an expiration time, though. eg. if I send a magic link that expires in 1 hour, log out sessions after 1 week, seems like that should suffice
[02:06:03] <johnny> and if they login the regular way, you should also expire the magic link immediately
[02:06:20] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Quit: Client closed)
[02:06:32] <foo> johnny: ah, I like that. We wouldn't have a "regular way" - only magic links
[02:06:53] <johnny> well that simplifies things a bit
[02:07:16] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[02:07:31] *** Quits: ExpiredKebab (~sgreadly@32.58.252.27.dyn.cust.vf.net.nz) (Quit: Textual IRC Client: www.textualapp.com)
[02:07:34] <foo> johnny: yeah, was trying to get away from having to do that. Building a little middle man script that connects two APIs together with a tiny web log.
[02:07:52] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 268 seconds)
[02:07:54] *** Joins: wyclif (~wyclif@user/wyclif)
[02:08:02] <spaceone> "Fatal Python error: Cannot recover from stack overflow." â†’ is this worth examinating? could it be a bug in python itself?
[02:08:16] <grym> spaceone: how'd you make that one happen
[02:08:58] <spaceone> grym: `except RecursionError: return`
[02:09:13] *** Joins: cer-0 (~cer-0@189.228.158.61)
[02:09:43] <energizer> ha i've never seen someone try that
[02:09:45] <KirkMcDonald> spaceone: I imagine you get a similar result from increasing the max recursion depth too high.
[02:10:26] <grym> ok yeah that'll probably do it
[02:11:17] <energizer> `>>> sys.setrecursionlimit(99999) >>> x = lambda: x() >>> x()` just segfaults for me on linux
[02:11:19] <spaceone> energizer: this is the second time i do this :-)
[02:11:35] <KirkMcDonald> energizer: Makes sense.
[02:12:03] <energizer> spaceone: anyway you can't do that
[02:12:25] <KirkMcDonald> I'm almost surprised that RecursionError derives from Exception.
[02:12:42] *** Joins: gbristol (gbristol@hermes.gbristol.net)
[02:12:54] <energizer> though i'm not exactly sure why you can't do it
[02:13:27] <energizer> like couldn't you catch RecursionError and say ok that's deep enough, let's move on
[02:13:36] <spaceone> 'RecursionError: cannot set the recursion limit to 5 at the recursion depth 5: the limit is too low'
[02:14:37] *** Joins: ham5urg (~ham5urg@p200300d167414700ae675dfffe1eec6d.dip0.t-ipconnect.de)
[02:14:54] <energizer> i guess you could check the stack depth explicitly and return if it's getting too high
[02:14:59] *** Quits: c10l (~c10l@user/c10l) (Quit: The Lounge - https://thelounge.chat)
[02:16:12] *** Joins: nomic (~nomic@185.217.117.156)
[02:16:18] <energizer> (but don't do that)
[02:16:52] *** Quits: ponyofdeath (~vladi@2606:6000:cfc0:2b:9cf9:caf8:f20d:1053) (Quit: WeeChat 3.1)
[02:17:12] <ham5urg> I have a closure like my_closure(data) and a inner function like my_inner(a, b, c) ... , how to I alter the variable data inside my_inner persistently after my_closure ends?
[02:17:27] <ham5urg> I tried with nonlocal but no...
[02:17:44] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[02:17:44] <spaceone> hm jeah. it's just code for a test case but it's complex.. i don't know how to circumvent the recursion
[02:17:46] *** Joins: Auron956 (Auron956@user/auron)
[02:17:49] <Yhg1s> ham5urg: nonlocal would let you reassign data. Can you show the code?
[02:18:19] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[02:18:54] *** Joins: wyclif (~wyclif@user/wyclif)
[02:19:11] <KirkMcDonald> Looking at the source, it seems that this error is the result of *exceeding* the max recursion depth by too much: https://github.com/python/cpython/blob/main/Python/ceval.c#L809
[02:19:35] *** Joins: fortuno51 (~fortuno51@172.83.40.74)
[02:19:45] <KirkMcDonald> At which point it just shoots the process dead.
[02:19:50] <ham5urg> Yhgls, http://paste.debian.net/1211917/
[02:20:09] *** fortuno51 is now known as ClubPenguin38383
[02:20:10] <ham5urg> Yhg1s
[02:20:10] *** Quits: molt (~molt@178-222-245-206.static.isp.telekom.rs) (Ping timeout: 240 seconds)
[02:20:29] <Yhg1s> ham5urg: well, the print on line 10 happens before you *call* 'action', so that won't show you anything new.
[02:20:40] <Yhg1s> ham5urg: and you're not doing anything with 'data' inside 'action', other than assign to it.
[02:20:49] *** Quits: Auron (Auron956@user/auron) (Ping timeout: 268 seconds)
[02:21:48] <spaceone> KirkMcDonald: ok, looks okay, not a real crash
[02:21:49] <ham5urg> yes, I want only to reassign it but a print(data) even after the closure was executed shows an empty data
[02:21:49] *** Parts: ClubPenguin38383 (~fortuno51@172.83.40.74) ()
[02:22:20] <ham5urg> Yhg1s, how to reassing data persitently?
[02:22:33] <Yhg1s> ham5urg: what you are doing would do that. You'll have to show more code to show it not working.
[02:22:43] <ham5urg> Ok
[02:23:08] <Yhg1s> (although 'persistent' isn't really the term to use. It's still specific to the closure.)
[02:23:15] <nedbat> ham5urg: when you say persistent, do you mean a value that persists across calls to "handle"?
[02:23:47] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[02:23:47] <nedbat> ham5urg: the next call to handle will assign a new value to data.
[02:24:05] <Yhg1s> more accurately, the next call to handle will get its own 'data'.
[02:24:24] *** Joins: wyclif (~wyclif@user/wyclif)
[02:26:00] <nedbat> more expansively, each call to handle creates a new local "data" variable, with a new value assigned from the actual argument to the function call. The closure refers to the variable that was in scope when the closure was created.
[02:26:05] *** Parts: justsomeguy (~justsomeg@user/justsomeguy) (WeeChat 3.2)
[02:27:46] *** Joins: Cheaterman (~Cheaterma@user/cheaterman)
[02:27:54] <cliluw> What retry libraries do you folks recommend?
[02:28:20] <energizer> cliluw: tenacity
[02:29:01] <bilb_ono> is there a way to require a specific instance method in python? Like if a class inherits from another class it has to implement these methods?
[02:29:16] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[02:29:41] *** Joins: pycurious (~Adium@user/pycurious)
[02:29:56] *** Joins: wyclif (~wyclif@user/wyclif)
[02:30:05] <cliluw> bilb_ono: abc.abstractmethod in the standard library?
[02:31:23] <ham5urg> Yhg1s, nedbat, the closure http://paste.debian.net/1211917/ and the outer code http://paste.debian.net/1211919/ . I don't understand why data is still empty, line 6
[02:31:28] <bilb_ono> cliluw: thanks that looks like it might be what I need
[02:31:31] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[02:32:04] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Client Quit)
[02:32:17] <nedbat> ham5urg: your outer data is a string.  Assigning to it inside handle can't affect the outer variable.
[02:32:46] <nedbat> ham5urg: actually, it's irrelevant that it's a string: assignment to a local is never going to reassign the variable in teh caller
[02:32:46] *** Joins: molt (~molt@178-222-245-206.static.isp.telekom.rs)
[02:33:04] <cliluw> energizer: Thanks! tenacity looks complicated but also feature-rich.
[02:33:23] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[02:33:46] <ham5urg> nedbat, but how do closures alter passed variables through their inner functions?
[02:34:10] <nedbat> ham5urg: they don't: they are modifying "nonlocal" variables.
[02:34:13] <Yhg1s> ham5urg: the inner functions can assign to variables in the enclosing scope.
[02:34:26] <nedbat> ham5urg: your "action" function isn't passed data.
[02:34:33] <Yhg1s> ham5urg: but that's different from assigning to variables in the *caller*.
[02:35:05] *** byzafk is now known as byzandula
[02:35:42] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 260 seconds)
[02:35:58] <ham5urg> nedbat, Yhg1s, I understand but I don't know how to fix my dilema: the variable passed to a closure, altered by its inner func.
[02:36:41] <Yhg1s> ham5urg: it's hard to tell what you actually want to do. Do you perhaps want to use a class to encapsulate the data, and pass a method on an instance of that class instead of the closure?
[02:37:05] <Yhg1s> ham5urg: or perhaps you want add a function to return the enclosed data from the closure?
[02:37:20] *** Quits: mukul (~mukul@c-24-6-109-135.hsd1.ca.comcast.net) (Quit: Leaving.)
[02:38:02] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[02:38:08] <orbisvicis> if I have "await myevent.wait()" in the async thread and "fut = asyncio.run_coroutine_threadsafe(myevent.wait(), myloop)" in the sync thread, can/should I combine the coroutines?
[02:38:13] *** Quits: somlis (~somlis@user/somlis) (Ping timeout: 252 seconds)
[02:38:37] *** Quits: freeworld (~vit@chello085216193138.chello.sk) (Ping timeout: 252 seconds)
[02:38:39] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:39:32] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[02:39:35] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[02:40:07] *** Quits: samuelbernardo (~samuelber@nata01.lip.pt) (Ping timeout: 240 seconds)
[02:40:45] <ham5urg> Yhg1s. My problem is that pyparsing is enforcing the signature of the inner function. I'cant change that but I have to add a variable. That's why I had tried the closure. This example from ten years ago, is passing const variables into the inner: https://stackoverflow.com/a/5937041 . I need non-const if possible.
[02:40:52] *** Joins: somlis (~somlis@user/somlis)
[02:41:07] *** Joins: samuelbernardo (~samuelber@nata02.lip.pt)
[02:41:47] *** Joins: mukul (~mukul@c-24-6-109-135.hsd1.ca.comcast.net)
[02:42:04] <Yhg1s> ham5urg: it's really hard to suggest anything specific without seeing the actual problem. I can repeat what I already suggested, though: use a class to encapsulate the data and the operations you need, or add more functions to the closure.
[02:43:36] *** Joins: brentaarnold (~brentaarn@24.112.61.90)
[02:44:31] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Quit: Leaving)
[02:44:55] *** Joins: wyclif (~wyclif@user/wyclif)
[02:46:15] <ham5urg> Yhg1s, I understand. E.g. https://stackoverflow.com/a/5937041 I would like to change the value of "minval" outside the closure, with the help of the inner.
[02:46:46] <ham5urg> It makes no sense in this example but that is the problem I have in my example.
[02:47:11] <Yhg1s> ham5urg: okay, 'nonlocal minval' will let you assign to minval anywhere in rangeCheckParseAction.
[02:47:24] <Yhg1s> ham5urg: and that will affect *that instance* of the rangeCheckParseAction.
[02:48:14] <Yhg1s> ham5urg: you cannot affect that value from outside the closure however. To do that you would need a global variable, or a class, or a separate function in the closure.
[02:49:23] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[02:49:25] *** Joins: pycurious (~Adium@user/pycurious)
[02:49:51] *** Joins: ano (~ano@user/ano)
[02:49:53] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[02:50:18] <spaceone> is there a easy way to generate unique integers?
[02:50:23] *** Joins: codeswhite (~codeswhit@user/codeswhite)
[02:50:26] *** Joins: wyclif (~wyclif@user/wyclif)
[02:50:37] <Yhg1s> spaceone: itertools.count()
[02:50:43] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 252 seconds)
[02:50:51] <ham5urg> Yhg1s, a separate function in the closure seems good to me, but can you link me to an example? Did you mean three functions, one in another instead of two?
[02:51:49] *** Quits: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 265 seconds)
[02:51:50] *** Joins: Fluxx (~Fluxx@user/fluxx)
[02:52:16] *** Quits: brentaarnold (~brentaarn@24.112.61.90) (Ping timeout: 268 seconds)
[02:52:23] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[02:52:34] *** Joins: Polyinsecure (~Polyinsec@180.244.135.66)
[02:52:36] <Yhg1s> ham5urg: a class would be a lot easier, but okay. 'def get_minval(): return minval' inside rangeCheck, and then 'return rangeCheckParseAction, get_minval', and when you create the closure, store get_minval separately.
[02:52:47] <spaceone> Yhg1s: that's a basis but it just counts up. when i want the values to be random, is there sometihng similar.
[02:52:49] <spaceone> ?
[02:52:54] *** Quits: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net) (Read error: Connection reset by peer)
[02:53:11] <Yhg1s> spaceone: the problem with random numbers is that they're not guaranteed to be unique. You would need to keep track of all the numbers you've already seen.
[02:53:46] <spaceone> yes
[02:53:57] <spaceone> (it's for a test case)
[02:54:01] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[02:54:12] <Yhg1s> spaceone: okay, then the random module and a set.
[02:54:26] <spaceone> ok, so a simple 3 liner
[02:54:32] *** Joins: dhill_ (~dhill@modemcable103.217-80-70.mc.videotron.ca)
[02:54:50] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[02:55:22] <sveinse> spaceone: random for testcase: deterministic or random each time?
[02:55:34] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[02:55:58] *** Joins: wyclif (~wyclif@user/wyclif)
[02:56:12] <spaceone> sveinse: each time, doesn't matter if deterministic
[02:57:22] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[02:57:35] <sveinse> Jep. I'm just getting sceptical when test cases aren't deterministic, but don't mind me
[02:58:29] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[02:59:05] *** Joins: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net)
[03:00:10] <spaceone> hm. i experienced test flakyness and non reprodusibility when test cases were non deterministic in the past. but the advantage was that this revealed real bugs
[03:00:54] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[03:01:29] *** Joins: wyclif (~wyclif@user/wyclif)
[03:02:24] <energizer> spaceone: range(100)
[03:03:31] *** Joins: skali (~skali@46.191.137.79)
[03:03:37] <orbisvicis> in the sync thread, once I do "asyncio.run_coroutine_threadsafe(mylock.acquire(), loop).result()", I can release the lock without the async loop, as: "try: ... finally: mylock.release()" ?
[03:03:39] <spaceone> s = range(100); def unique_random(): random.choice(s)
[03:04:10] <Yhg1s> spaceone: that's just an awkward way to write 'random.randrange(100)'
[03:04:17] <anddam> grym: I eventually landed on https://setuptools.readthedocs.io/en/latest/userguide/dependency_management.html thinking that actually reading docs might help
[03:04:23] *** Quits: junktext (~junktext@77.247.181.215) (Ping timeout: 265 seconds)
[03:04:38] <energizer> spaceone: if you just need distinct numbers, you can get them by counting
[03:04:54] <energizer> for example, 2 != 1
[03:05:09] *** Joins: brentaarnold (~brentaarn@32.132.115.46)
[03:05:12] <anddam> grym: I think my issue is that I want a dependency to be installed when I run bdist_wheel setuptools command, that actually is pip's 'wheel' command
[03:05:31] <orbisvicis> that is, I don't need loop.call_soon_threadsafe?
[03:06:30] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[03:08:19] *** Quits: skali (~skali@46.191.137.79) (Ping timeout: 252 seconds)
[03:08:34] <spaceone> Yhg1s: energizer: forgot to: s.remove(the_choice)
[03:08:41] <Yhg1s> orbisvicis: if these are asyncio.Locks, then yes, 'release' is not a coroutine.
[03:08:57] <Yhg1s> spaceone: range objects are immutable.
[03:09:37] *** Joins: semeion (~semeion@user/semeion)
[03:09:42] *** Joins: theprophet (~theprophe@85.114.228.184)
[03:09:53] <grym> spaceone: just shuffle the range
[03:09:54] <Yhg1s> spaceone: even if they aren't, it's going to be more efficient to keep track of numbers you've used, in a set, than keep track of a pool of potential numbers like that.
[03:10:02] <grym> then iterate
[03:10:19] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Quit: WeeChat 3.2)
[03:10:24] <spaceone> yep
[03:11:03] <spaceone> it's late. i wasn't thinking anymore...
[03:12:27] *** Joins: wyclif (~wyclif@user/wyclif)
[03:12:34] <anddam> grym: whereas I would need that dependency specified at the same level where wheel and setuptools are carried in, therefore at pyprojects.toml
[03:13:08] <anddam> what I find odd is that I see this role used to be of setup()'s setup_requires argument, that is deprecated but still should work
[03:13:12] <theprophet> can somebody help me with this please? https://pastebin.com/HGstyhc4 i am trying to put all the functions inside tkinter drop down menu, so when i click it it will show whats inside, because i wanna have other rappers to include. this is the screenshot how the program looks so far. https://ibb.co/PhdvzG3
[03:13:18] <theprophet> Please
[03:13:21] <anddam> and it doesn't change the environment seen at bdist time at all
[03:13:37] <orbisvicis> Yhg1s: yes, asyncio.Locks. The sync thread calls into the async thread/loop to set an event, wait for an event, or acquire a lock. I want to double check that (1) I don't need to call into the thread to release the lock from the sync thread and (2) I can continue using asyncio.Locks and asyncio.Events as normal from the async thread
[03:13:52] *** Quits: rexbinary (~rexbinary@user/rexbinary) (Ping timeout: 252 seconds)
[03:14:13] <orbisvicis> by "calls into" I mean either run_coroutine_threadsafe or call_soon_threadsafe
[03:14:26] *** Quits: brentaarnold (~brentaarn@32.132.115.46) (Read error: Connection reset by peer)
[03:14:51] *** Joins: brentaarnold (~brentaarn@24.112.61.90)
[03:14:56] <anddam> theprophet: what?
[03:15:18] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Ping timeout: 268 seconds)
[03:15:23] <theprophet> anddam is there anything you want to know?
[03:16:00] <Yhg1s> orbisvicis: if by 'async thread' you mean 'coroutine', then yes, you can use them from coroutines. If you mean 'from a different thread', then no, they aren't thread-safe. Only the asyncio thread should interact with them.
[03:16:12] <anddam> theprophet: yeah, how do you come up with var names?
[03:16:37] <Yhg1s> orbisvicis: technically that means even calling lock.acquire() to get the coroutine to pass to call_soon_threadsafe.
[03:16:43] <theprophet> anddam thats my own language, written in latin.
[03:17:09] <anddam> I am not a proper scholar, but that ain't Latin
[03:17:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[03:17:43] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 252 seconds)
[03:17:57] *** Joins: rexbinary (~rexbinary@user/rexbinary)
[03:18:00] *** Joins: wyclif (~wyclif@user/wyclif)
[03:18:38] <orbisvicis> Yhg1s, yes I was following https://docs.python.org/3/library/asyncio-dev.html#asyncio-multithreading
[03:18:40] *** Quits: odoood (~odoood@2601:c8:c003:a550::1) (Ping timeout: 240 seconds)
[03:20:00] <anddam> theprophet: anyway, your request is not very clear, rephrase it using "I did this. I expected this output. I got this other outcome instead". Maybe add a requirements.txt as well
[03:20:16] <anddam> theprophet: I would have run it, but I do not recall what provides PIL
[03:20:20] <theprophet> i am building a program, with tkinter, which has a window with a drop down list, that program has a functions to play and a stop music, with the little picture of the artist . so when you click the button PLAY it starts a 5-6 second sample of how that specific artist is rapping. at this point i am trying to hide all of things i am mentioned under
[03:20:21] <theprophet> the drop down list which was made in tkintker, but i dont know how. can somebody help me, ? this is the screenshot of the program interface can somebody help me with this please? https://pastebin.com/HGstyhc4 i am trying to put all the functions inside tkinter drop down menu, so when i click it it will show whats inside, because i wanna have other
[03:20:21] <theprophet> rappers to include. this is the screenshot how the program looks so far. https://ibb.co/PhdvzG3
[03:20:28] <theprophet> and the code  https://pastebin.com/HGstyhc4
[03:20:30] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[03:20:42] <theprophet> sorry copied twice
[03:20:53] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:21:18] <orbisvicis> Yhg1s, hmm I believe that for (1), I should call "myloop.call_soon_threadsafe(mylock.release)"
[03:22:26] <orbisvicis> Yhg1s, why would lock.acquire() be unsafe?
[03:22:27] <Yhg1s> orbisvicis: that is what I tried to tell you, yes.
[03:22:51] <Yhg1s> orbisvicis: because you're calling a method on 'lock', which is not thread-safe, from a different thread.
[03:22:53] <theprophet> i am building a program, with tkinter, which has a window with a drop down list, that program has a functions to play and a stop music, with the little picture of the artist . so when you click the button PLAY it starts a 5-6 second sample of how that specific artist is rapping. at this point i am trying to hide all of things i am mentioned under
[03:22:53] <theprophet> the drop down list which was made in tkintker, but i dont know how. can somebody help me, ? this is the screen shot of the program interface, https://ibb.co/PhdvzG3  amd the code for the program , https://pastebin.com/HGstyhc4
[03:23:06] <Yhg1s> theprophet: please stop repeating the question.
[03:23:14] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[03:23:20] <anddam> Yhg1s: maybe it gets better with time, like wine
[03:23:21] <orbisvicis> Yhg1s, what should I do instead?
[03:23:30] *** Joins: wyclif (~wyclif@user/wyclif)
[03:23:47] <theprophet> Yhg1s i am not repeating. the previous one was coppied twice, so it could misslead a person who might want to help me.
[03:23:50] <anddam> theprophet: I cannot even start, I installed pygame, pillow, then I am left without a 22.ico bitmap
[03:23:59] <orbisvicis> I mean, I'm open to some totally different way to lock/send-events between a sync thread and an async thread
[03:24:10] *** Joins: pycurious (~Adium@user/pycurious)
[03:24:29] <Yhg1s> orbisvicis: technically, define a callback that calls lock.acquire(). It's safe in the current implementation, and will probably remain safe, though.
[03:24:45] <theprophet> anddam do you know tkinter?
[03:24:47] <anddam> theprophet: if anything is going to mislead people is not going to be the douple paste. That is repeating anyway
[03:24:53] <Yhg1s> orbisvicis: well, I would strongly recommend doing as little as possible in other threads.
[03:24:57] <anddam> theprophet: a bit, as many around
[03:25:45] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Ping timeout: 276 seconds)
[03:25:56] <orbisvicis> !topic
[03:26:48] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[03:27:02] <theprophet> anddam just remove that 22 ico , and put "" this
[03:27:06] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aÐ»Ð»Ð¸Ð»Ñ¹Ñ–Ð°!)
[03:27:20] <theprophet> @andd
[03:27:28] <theprophet> anddam thats just a program icon
[03:28:03] <Macuser> weird how my script was working with the line "for line in infile" without any .readlines()
[03:28:19] *** Joins: fikran (~fikran@user/fikran)
[03:28:25] *** Quits: TranquilEcho (~grom@user/tranquilecho) (Quit: WeeChat 2.8)
[03:28:33] <Yhg1s> Macuser: no, that's not weird. that's how files work.
[03:28:39] <theprophet> anddam also remove  , mp3, gif  , replace it with ""
[03:28:43] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[03:28:46] <Macuser> what's the point of .readlines() then
[03:29:04] *** Joins: wyclif (~wyclif@user/wyclif)
[03:29:05] <Macuser> usually I see it done as "for line in infile.readlines()"
[03:29:46] <Yhg1s> Macuser: you must be looking at very, very old Python code. You only need to call file.readlines() if you want a list of files. If you just want to process lines, it is much better to iterate over the file directly.
[03:30:14] <Macuser> interesting
[03:30:19] <Macuser> thanks.
[03:30:36] *** Quits: mukul (~mukul@c-24-6-109-135.hsd1.ca.comcast.net) (Quit: Leaving.)
[03:30:51] <anddam> theprophet: ok, I see the option menu, it's working
[03:30:59] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.2)
[03:31:16] <theprophet> anddam replace 22.ico with ""
[03:31:24] <theprophet> ok
[03:31:29] *** Joins: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[03:31:49] *** Joins: EgonX (~EgonX@2601:2c6:47f:9c18:41ed:bcba:6992:7fb3)
[03:31:58] <Yhg1s> Eh, a list of lines.
[03:32:44] <anddam> theprophet: I am leaving in two minutes and I have not understood your issue, still
[03:32:46] <theprophet> anddam so what i am trying to do is, to hide object vini  under the drop down list made with tkinter, and i want to show vini object when the in the list vinnie paz is clicked
[03:32:53] <Macuser> right.
[03:32:56] <Macuser> thought you meant that.
[03:33:46] *** Quits: qlixed (~qlixed@181.44.129.13) (Quit: That's all folks!!)
[03:33:50] <theprophet> anddam , i just want to see the object vini when its clicked, not always? get me?
[03:34:17] <ham5urg> Yhg1s, I made it with a class, at the end it was the better way. Regards for your help
[03:34:21] <theprophet> @anddam i want to hide it before its clicked then dissapear when another object is clicked in the list.
[03:34:32] *** Joins: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net)
[03:35:19] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[03:35:28] <anddam> theprophet: use self.meniu then check the value of the selected value with self.meniu.get() and update all the widget you want accordingly
[03:36:00] <theprophet> anddam ill try that.
[03:36:32] <anddam> theprophet: you use the StringVar.trace() for be notified of changes (that is your self.meniu)
[03:36:35] <anddam> good luck with that
[03:36:38] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[03:37:04] <theprophet> anddam ty
[03:38:14] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[03:38:21] <orbisvicis> Yhg1s, is the idea to run the callback in call_soon_threadsafe?
[03:38:35] *** Joins: ZedHedTed (~ZedHedTed@user/zedhedted)
[03:39:03] *** Joins: elkclone (~elkclone@user/elkclone)
[03:39:10] *** Lando-SpacePimp is now known as CRUNK-b0t
[03:39:11] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[03:40:01] *** Joins: wyclif (~wyclif@user/wyclif)
[03:40:32] <orbisvicis> b/c I'm not sure how to get the coroutine back
[03:41:52] <Yhg1s> orbisvicis: I'm not sure what you mean, sorry.
[03:44:04] *** Quits: ham5urg (~ham5urg@p200300d167414700ae675dfffe1eec6d.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[03:45:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[03:45:10] *** Quits: Polyinsecure (~Polyinsec@180.244.135.66) (Quit: Leaving)
[03:45:32] *** Joins: wyclif (~wyclif@user/wyclif)
[03:46:58] *** Joins: Wuniu (~Thunderbi@user/wuniu)
[03:47:10] *** Joins: ham5urg (~ham5urg@p200300d167414700ae675dfffe1eec6d.dip0.t-ipconnect.de)
[03:47:30] *** Quits: fr_sleepy (~fr_sleepy@209.94.138.128) (Remote host closed the connection)
[03:47:45] *** Quits: int3l (~int3l@78-83-124-208.spectrumnet.bg) (Quit: Goodbye world)
[03:48:33] <orbisvicis> Yhg1s, when you said to run a callback to get the coroutine, that implies in the async loop but I don't know how to get the value back in the sync thread. But instead, would this work as an argument to run_coroutine_threadsafe? "async def f(): await mylock.acquire()"
[03:48:33] *** Quits: eightysix (~eightysix@71-147-46-132.lightspeed.livnmi.sbcglobal.net) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[03:48:34] *** Joins: skali (~skali@46.191.137.79)
[03:49:01] *** Quits: Gurkenglas (~Gurkengla@dslb-002-207-014-195.002.207.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[03:49:53] <Yhg1s> orbisvicis: I didn't say "to get the coroutine". I said "to call lock.acquire()". I also said 'technically'. Thread-safety is a difficult subject. Right now, calling lock.acquire() and passing the coroutine to call_soon_threadsafe is fine. It's just not guaranteed, as far as I know, to be safe.
[03:50:22] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[03:51:05] *** Joins: wyclif (~wyclif@user/wyclif)
[03:51:13] *** Quits: lxer (~lx@ip5f5bf666.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[03:51:18] *** Quits: dob1_ (~dob1@user/dob1) (Ping timeout: 260 seconds)
[03:52:39] <eblip> hey been reading about how to make a python file run from any directory .... the problem is, you dont get to activate the environment
[03:52:43] <eblip> how to get around this
[03:53:28] *** Quits: skali (~skali@46.191.137.79) (Ping timeout: 252 seconds)
[03:53:45] <cluelessperson> eblip,   ./venv/bin/python file.py
[03:54:18] <orbisvicis> Yhg1s, I see, thanks
[03:54:35] <eblip> ah ok cluelessperson... i am glad to see that would work, but its a bit longwinded, so maybe not worth the effort
[03:54:46] *** Quits: bninja (~bloodninj@user/bloodninja) (Read error: Connection reset by peer)
[03:54:50] *** Joins: fr_sleepy (~fr_sleepy@209.94.138.128)
[03:54:50] <Yhg1s> eblip: activating the virtualenv is usually not worth the effort.
[03:55:37] <eblip> Yhg1s:are you saying that i wont need to activate the environment? and the program will work...how can that be?
[03:55:46] <cluelessperson> eblip, you can create an alias
[03:55:53] <cluelessperson> eblip, or use pyenv to manage envs and shims
[03:55:57] <cluelessperson> so it's just python
[03:56:10] <eblip> thanks for the details cluelessperson
[03:56:39] <eblip> hmm.. i have just run the program outside of the activated environment and it worked
[03:57:05] <eblip> doesnt make sense, as i had to pip install lots of stuff when i wrote the software
[03:57:36] *** Quits: spithash (~spithash@user/spithash) (Ping timeout: 276 seconds)
[03:57:41] <Yhg1s> eblip: if you run the virtualenv's python, or somethign that uses the virtualenv's python, it will use the virtualenv's python.
[03:57:51] <eblip> and the pip in stall was done in the environment
[03:58:12] <eblip> ah ok Yhg1s
[03:58:41] *** Joins: spithash (~spithash@user/spithash)
[03:59:00] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 265 seconds)
[03:59:08] *** Joins: Praise- (~Fat@user/praise)
[04:01:42] <eblip> ah so Yhg1s at the top of the python script, maybe i can just put something like #!/home/eb0t/envs/crann/bin/python3
[04:02:10] <eblip> then i dont need to activate the environment
[04:02:20] <theprophet> cluelessperson do you know tkinter?
[04:02:27] <Yhg1s> eblip: yes, that's how a program uses python.
[04:02:40] <eblip> thanks for the info Yhg1s
[04:03:50] *** Quits: Cheaterman (~Cheaterma@user/cheaterman) (Ping timeout: 265 seconds)
[04:04:30] <cluelessperson> theprophet, not really, right now I'm playing with QT
[04:04:44] <theprophet> cluelessperson okay
[04:05:02] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Ping timeout: 268 seconds)
[04:08:06] *** Quits: Wuniu (~Thunderbi@user/wuniu) (Ping timeout: 260 seconds)
[04:08:15] *** Quits: srhm (~srhm@user/srhm) (Quit: Konversation terminated!)
[04:08:39] *** Joins: srhm (~srhm@user/srhm)
[04:09:40] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[04:09:50] *** Joins: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[04:11:05] *** Quits: DocMors (~DocMors@web.crypticity.net) (Quit: ZNC 1.6.6+deb1ubuntu0.2 - http://znc.in)
[04:11:54] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Ping timeout: 276 seconds)
[04:12:32] *** Quits: LuxuryMode (uid91005@id-91005.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[04:12:36] *** Joins: shangxiao (~davids@124.187.193.187)
[04:13:34] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[04:13:41] *** Joins: Wuniu (~Thunderbi@user/wuniu)
[04:15:34] *** Joins: Cheaterman (~Cheaterma@user/cheaterman)
[04:15:53] *** Joins: matsaman (~matsaman@user/matsaman)
[04:16:16] <Macuser> so I'm having trouble finding why this chunk of my code seems to randomly add duplicates to my output file. The input does not have the duplicates. https://bpa.st/VNOA
[04:16:35] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[04:17:18] *** Joins: ponyofdeath (~vladi@2606:6000:cfc0:2b:9cf9:caf8:f20d:1053)
[04:17:57] *** Joins: mukul (~mukul@c-24-6-109-135.hsd1.ca.comcast.net)
[04:18:30] *** Quits: mukul (~mukul@c-24-6-109-135.hsd1.ca.comcast.net) (Client Quit)
[04:18:59] *** Joins: mukul (~mukul@c-24-6-109-135.hsd1.ca.comcast.net)
[04:18:59] *** Quits: mukul (~mukul@c-24-6-109-135.hsd1.ca.comcast.net) (Client Quit)
[04:19:05] *** Quits: cdown (~cdown@194.207.141.245) (Ping timeout: 260 seconds)
[04:19:38] <matsaman> Macuser: what makes you think it wouldn't add a duplicate?
[04:19:53] <cluelessperson> Macuser, there are two writes,  but also I'd clean that up into cleaner code blocks. :P
[04:20:03] * cluelessperson will bbs
[04:20:18] <Macuser> the second write covers the last chunk of textfile
[04:20:43] <Macuser> had to add it because n+1 gives index error
[04:20:43] *** Joins: mukul (~mukul@c-24-6-109-135.hsd1.ca.comcast.net)
[04:21:16] <Macuser> matsaman it shouldn't add a duplicate because I have a list that keeps adding every line between two titles. Once a 2nd title line is reached the list is emptied into outfile and then reset to []
[04:21:46] <Macuser> the dup is really strange. it only occurs once or twice and gets doubled a few times randomly in the file. can't find any pattern to it
[04:21:50] *** Quits: Cheaterman (~Cheaterma@user/cheaterman) (Read error: Connection reset by peer)
[04:22:02] *** Joins: Cheaterman (~Cheaterma@user/cheaterman)
[04:22:19] <matsaman> well, you probably don't want two writes anyway
[04:22:33] <Repiphany> You shouldn't really be using the index to iterate over a list
[04:23:58] <Repiphany> iridium_sats isn't defined in that block of code
[04:24:01] *** Joins: ham5urg_ (~ham5urg@p5ddfc87e.dip0.t-ipconnect.de)
[04:24:05] *** Quits: ham5urg (~ham5urg@p200300d167414700ae675dfffe1eec6d.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[04:24:27] <theprophet> Repiphany do you know tkinter?
[04:24:52] <Macuser> Repiphany i assure you it's not a problem. it's just a list of 75 different sats
[04:24:53] <Repiphany> I've used tkinter before
[04:25:11] *** Joins: dob1 (~dob1@user/dob1)
[04:25:13] <Macuser> strings.
[04:25:35] <Macuser> well hold on the code I pasted actually is messed up anyway
[04:25:38] <Macuser> let me revert back to what i had
[04:25:46] <Macuser> my bad.
[04:26:33] <Repiphany> You should ideally split your code up into functions that describe what's actually being done and why
[04:27:07] <Macuser> yeah I'm terrible about that. I haven't been making functions
[04:27:36] <Macuser> usually I do add comments, but haven't yet
[04:28:08] <Repiphany> Also if you're dealing with times and timezones, probably better to use an actual library like datetime rather than trying to convert things manually
[04:28:41] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[04:28:47] <Macuser> for this I think it's fine
[04:29:04] <theprophet> Repiphany this is my code i am working with. https://pastebin.com/wQ6L0eus .. and this is the interface of the program so far. https://ibb.co/Ttm3qTW... , what i want to do is to hide whats on the main frame to hide under the "list of rappers" , do you know how to do that?
[04:30:39] <theprophet> Repiphany at this moment, there are only 3 things on the main frame, picture the play and the stop. and i want to put all of the under the list. can you help me with that?
[04:30:46] *** Quits: orbisvicis (~orbisvici@user/orbisvicis) (Quit: Leaving)
[04:30:56] <theprophet> all of that *
[04:31:01] *** Quits: Mikaela (~sid12355@Feneas/Mikaela) (Remote host closed the connection)
[04:31:20] *** Joins: Mikaela (~sid12355@Feneas/Mikaela)
[04:31:35] <energizer> Macuser: fwiw time is one of those things that has so many edge cases i never do it myself https://gist.github.com/timvisee/fcda9bbdff88d45cc9061606b4b923ca
[04:31:38] *** Quits: cer-0 (~cer-0@189.228.158.61) (Quit: leaving)
[04:32:13] <Macuser> lol
[04:32:19] <Macuser> that's funny
[04:32:28] <Macuser> but for my purpose it's fine
[04:32:31] *** Quits: brentaarnold (~brentaarn@24.112.61.90) (Ping timeout: 252 seconds)
[04:32:34] <energizer> ok
[04:33:40] <Repiphany> I don't know what you mean by "hide under the list of rappers"
[04:33:54] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Quit: shibboleth)
[04:34:01] *** Joins: skali (~skali@46.191.137.79)
[04:34:15] <theprophet> Repiphany well i want it not to be displayed on the main frame, i want it to show up when the particular name is selected on the list.
[04:34:39] *** Quits: Asmodee[T] (~Asmodee@gateway/tor-sasl/asmodee) (Ping timeout: 276 seconds)
[04:34:48] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[04:35:00] <Macuser> anyways it's not the 2nd print statement because I commented it out and it still worked. let me repaste
[04:35:09] <Macuser> second .write line I meant
[04:35:10] *** Joins: Asmodee[T] (~Asmodee@gateway/tor-sasl/asmodee)
[04:35:33] <theprophet> that picture you see on the screenshot, belongs the particul artist alongside the play button and the stop button. which is automaticly displayed on the main frame, but i want it to show up when the particular artist  has been picked in the list.
[04:36:02] <theprophet> Repiphany
[04:36:11] <Macuser> https://bpa.st/YMUA
[04:36:19] *** Quits: Elodin (~weechat@user/elodin) (Ping timeout: 252 seconds)
[04:36:26] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Quit: Ping timeout (120 seconds))
[04:37:22] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[04:37:24] *** Joins: Polyinsecure (~Polyinsec@180.244.135.66)
[04:37:36] *** Joins: heco_ (~redrum@user/redrum88)
[04:37:47] <theprophet> Repiphany so bassicaly what i want to do is, store all of the information about particular artist behind his name in the list, and then show up if somebody click the name of the specific artist.
[04:37:54] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 276 seconds)
[04:37:56] *** Quits: goatish (~geclark@19.60.188.35.bc.googleusercontent.com) (Ping timeout: 268 seconds)
[04:38:10] *** Joins: goatish (~geclark@19.60.188.35.bc.googleusercontent.com)
[04:38:26] *** Quits: skali (~skali@46.191.137.79) (Ping timeout: 260 seconds)
[04:39:07] <Macuser> it's so random
[04:39:11] <Macuser> makes no sense.
[04:39:46] <theprophet> Repiphany will you help me on that?
[04:39:59] <Repiphany> theprophet: Your option menu should have a callback that displays the relevant information for whatever is selected
[04:40:54] <theprophet> Repiphany i dont know how to do that.
[04:41:03] *** Quits: heco (~redrum@user/redrum88) (Ping timeout: 265 seconds)
[04:41:38] <Repiphany> Macuser: Maybe write the outline of your code using "wishful thinking" programming, i.e. write out the logic of your code as if you had magic functions that already do all the things you need them to do
[04:42:13] *** Quits: bilb_ono (~alexmarsh@ip68-6-90-72.sb.sd.cox.net) (Quit: bilb_ono)
[04:42:20] <Macuser> i think i see.
[04:42:24] <Macuser> as a debug yeah.
[04:42:25] <Repiphany> It's kinda impossible to follow what your code is doing and why otherwise (reading code is more effort than writing it)
[04:42:49] <Macuser> agreed.
[04:42:59] *** Quits: heco_ (~redrum@user/redrum88) (Ping timeout: 265 seconds)
[04:43:38] *** Joins: heco_ (~redrum@user/redrum88)
[04:43:38] *** heco_ is now known as heco
[04:44:07] *** Quits: Wuniu (~Thunderbi@user/wuniu) (Quit: I'm tired, have a good time!)
[04:46:46] *** Joins: jazzy (~jaziz@2600:380:4616:7e6e:b12f:f383:1dc8:d3fe)
[04:50:51] <Macuser> I think I can simplify this... let's see
[04:52:05] *** Joins: tharkun (tharkun@kvm6.telegraphics.com.au)
[04:52:53] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[04:53:26] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[04:54:30] <Macuser> yeah i def overcomplicated that.
[04:54:47] *** Joins: zumba_addict (~zumba_add@2601:240:4500:8320:e943:4623:5be7:585d)
[04:55:14] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 260 seconds)
[04:56:29] *** Joins: brabrax (~brabrax@user/brabrax)
[04:57:29] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 265 seconds)
[04:57:42] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[04:58:26] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[04:59:05] *** Joins: srhm (~srhm@user/srhm)
[04:59:31] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[04:59:33] *** Joins: hyskaru (~hyskaru@user/hyskaru)
[04:59:34] *** Quits: hyskaru (~hyskaru@user/hyskaru) (Client Quit)
[05:00:06] *** Joins: brentaarnold (~brentaarn@24.112.61.90)
[05:00:41] *** Joins: wyclif (~wyclif@user/wyclif)
[05:02:04] *** Quits: Socra (~Socra@206.217.216.27) (Read error: Connection reset by peer)
[05:02:37] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[05:03:52] *** Quits: mweckbecker (~matthias@weckbecker.name) (Ping timeout: 245 seconds)
[05:04:00] *** Quits: jpaa (~jpaa@87.118.126.66) (Ping timeout: 260 seconds)
[05:04:21] *** Quits: cliluw (~cliluw@47.147.80.149) (Quit: Leaving)
[05:04:40] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Ping timeout: 240 seconds)
[05:05:41] *** Joins: jpaa (~jpaa@87.118.126.66)
[05:05:52] *** Joins: mweckbecker (~matthias@weckbecker.name)
[05:07:39] *** Quits: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net) (Read error: Connection reset by peer)
[05:09:24] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.2.1)
[05:11:24] *** Joins: c10l (~c10l@user/c10l)
[05:11:55] <theprophet> https://stackoverflow.com/questions/69201128/how-to-place-functions-inside-tkinter-drop-down-list
[05:12:12] *** Joins: skali (~skali@46.191.137.79)
[05:12:26] *** Quits: mukul (~mukul@c-24-6-109-135.hsd1.ca.comcast.net) (Quit: Leaving.)
[05:13:24] *** Joins: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net)
[05:15:10] *** Joins: dez (uid92154@user/dez)
[05:15:15] *** Joins: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net)
[05:15:46] <Macuser> ok I simplified it. same problem, but at least less code lol
[05:17:01] *** Quits: skali (~skali@46.191.137.79) (Ping timeout: 252 seconds)
[05:19:22] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 252 seconds)
[05:19:40] *** Joins: Elodin (~weechat@user/elodin)
[05:20:03] *** Quits: k_sze (~k_sze@mail2.kalunite.net) (Quit: ZNC 1.8.2 - https://znc.in)
[05:20:33] *** Quits: Auron956 (Auron956@user/auron) (Remote host closed the connection)
[05:22:40] *** Joins: lethu (~lethu@user/lethu)
[05:23:14] *** Joins: k_sze (~k_sze@mail2.kalunite.net)
[05:24:16] *** Quits: jinsun (~quassel@user/jinsun) (Read error: Connection reset by peer)
[05:26:12] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[05:27:03] *** Joins: jinsun (~quassel@user/jinsun)
[05:30:17] <Macuser> think i found the problem.
[05:30:25] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:30:36] *** Quits: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[05:30:45] *** Quits: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: ncwbqcfe)
[05:35:15] *** Joins: vlm (~vlm@user/vlm)
[05:35:37] *** Quits: zumba_addict (~zumba_add@2601:240:4500:8320:e943:4623:5be7:585d) (Ping timeout: 256 seconds)
[05:35:40] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[05:37:59] *** Joins: fikran (~fikran@user/fikran)
[05:38:34] *** Quits: Jefren (~Jefren@206.253.157.207) (Ping timeout: 265 seconds)
[05:40:33] *** Joins: Jefren (~Jefren@70.35.66.239)
[05:44:27] *** Joins: eightysix (~eightysix@2600:1700:bf32:3410:15e4:c86d:55e8:52b0)
[05:45:09] *** Quits: Jefren (~Jefren@70.35.66.239) (Ping timeout: 268 seconds)
[05:45:43] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[05:46:54] *** Joins: Jefren (~Jefren@70.35.66.251)
[05:47:19] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[05:47:49] *** Joins: wyclif (~wyclif@user/wyclif)
[05:47:55] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[05:48:27] <Macuser> Repiphany this is literally all it is https://bpa.st/EONA
[05:49:00] <Macuser> and i randomly get a few doubles in the same spot.
[05:49:09] <Macuser> the double erases the line that was supposed to be after it too.
[05:49:16] <Macuser> s/erases/replaces
[05:51:42] *** Quits: Jefren (~Jefren@70.35.66.251) (Ping timeout: 260 seconds)
[05:52:57] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[05:53:19] *** Joins: wyclif (~wyclif@user/wyclif)
[05:53:52] *** Quits: Polyinsecure (~Polyinsec@180.244.135.66) (Quit: Leaving)
[05:54:30] *** Joins: mukul (~mukul@c-24-6-109-135.hsd1.ca.comcast.net)
[05:54:53] *** Quits: mukul (~mukul@c-24-6-109-135.hsd1.ca.comcast.net) (Client Quit)
[05:55:07] *** Quits: madduck (~madduck@user/madduck) (Ping timeout: 252 seconds)
[05:55:58] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 265 seconds)
[05:56:49] *** Joins: Jefren (~Jefren@70.35.67.153)
[05:57:00] *** Joins: Wuniu (~Thunderbi@user/wuniu)
[05:57:02] <johnny> TIL.. i accidentally typed pip install <package> for program that comes with an executable that i wanted always available and
[05:57:10] <johnny> "Defaulting to user installation because normal site-packages is not writeable"  rather than erroring out
[05:57:27] <johnny> i guess newer folks don't need to type --user anymore
[05:58:06] *** Quits: ham5urg_ (~ham5urg@p5ddfc87e.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[05:59:54] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.2)
[06:00:14] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[06:01:20] *** Joins: ham5urg (~ham5urg@p200300d167414700ae675dfffe1eec6d.dip0.t-ipconnect.de)
[06:01:33] *** Quits: heco (~redrum@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[06:01:42] *** Joins: madduck (~madduck@user/madduck)
[06:02:15] *** Quits: mattypants (~quassel@66-90-146-141.dyn.grandenetworks.net) (Ping timeout: 265 seconds)
[06:02:19] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[06:03:26] *** Quits: Jefren (~Jefren@70.35.67.153) (Ping timeout: 268 seconds)
[06:06:04] *** Parts: iflema (~ian@user/iflema) ()
[06:06:31] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[06:06:43] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-3c73-8987-2114-b53a.res6.spectrum.com) (Read error: Connection reset by peer)
[06:07:31] *** Joins: Wubull (~Thunderbi@user/wuniu)
[06:07:38] *** Joins: brabrax_ (~brabrax@user/brabrax)
[06:07:48] *** Joins: Jefren (~Jefren@70.35.66.145)
[06:08:30] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[06:08:58] *** Quits: Wuniu (~Thunderbi@user/wuniu) (Ping timeout: 260 seconds)
[06:08:58] *** Wubull is now known as Wuniu
[06:09:01] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 265 seconds)
[06:09:01] *** brabrax_ is now known as brabrax
[06:09:05] *** Joins: wyclif (~wyclif@user/wyclif)
[06:10:54] *** Joins: dre (~dre@2001:8003:c932:c301:3743:ee79:8c00:65b1)
[06:11:23] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[06:14:36] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[06:16:58] *** Quits: sejow (~sejow@193.29.106.206) (Ping timeout: 252 seconds)
[06:17:07] *** Quits: eightysix (~eightysix@2600:1700:bf32:3410:15e4:c86d:55e8:52b0) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[06:18:04] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[06:18:20] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[06:18:29] *** Joins: r3m (~launch@user/r3m)
[06:19:39] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[06:20:02] *** Joins: wyclif (~wyclif@user/wyclif)
[06:20:07] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Client Quit)
[06:20:19] *** Quits: Jefren (~Jefren@70.35.66.145) (Ping timeout: 252 seconds)
[06:22:08] *** Joins: Jefren (~Jefren@70.35.67.67)
[06:23:47] *** Quits: Cheaterman (~Cheaterma@user/cheaterman) (Ping timeout: 268 seconds)
[06:24:37] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 268 seconds)
[06:25:06] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[06:25:18] *** Quits: Wuniu (~Thunderbi@user/wuniu) (Ping timeout: 260 seconds)
[06:27:06] *** Quits: falk689 (~falk689-q@gateway/tor-sasl/falk689) (Ping timeout: 276 seconds)
[06:28:06] *** Quits: Jefren (~Jefren@70.35.67.67) (Ping timeout: 268 seconds)
[06:29:30] *** Quits: LiftLeft (~LiftLeft@172.98.92.110) (Ping timeout: 260 seconds)
[06:30:04] *** Joins: Jefren (~Jefren@70.35.67.29)
[06:30:17] *** Quits: brentaarnold (~brentaarn@24.112.61.90) (Ping timeout: 265 seconds)
[06:33:28] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 252 seconds)
[06:34:17] *** Joins: junktext (~junktext@109.201.152.175)
[06:34:19] *** Quits: theprophet (~theprophe@85.114.228.184) (Quit: Client closed)
[06:37:32] *** Quits: Jefren (~Jefren@70.35.67.29) (Ping timeout: 265 seconds)
[06:38:54] *** Joins: harovali (~haroldo@r167-62-215-180.dialup.adsl.anteldata.net.uy)
[06:39:23] *** Joins: Jefren (~Jefren@70.35.66.72)
[06:39:57] *** Quits: Zer0xFF (m-3laxwu@matrix.michaelsasser.org) (Remote host closed the connection)
[06:40:03] <harovali> in IDLE / python 3.9 , how do you show variables without cuts or chops for being lengthy?
[06:41:24] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[06:41:53] *** Quits: codeswhite (~codeswhit@user/codeswhite) (Ping timeout: 268 seconds)
[06:42:10] *** Joins: Zer0xFF (m-3laxwu@matrix.michaelsasser.org)
[06:42:48] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[06:45:11] *** Joins: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[06:46:46] *** Quits: junktext (~junktext@109.201.152.175) (Ping timeout: 260 seconds)
[06:47:12] *** Joins: goepsilongo (~chacho@2603-7000-ab00-62ed-0000-0000-0000-0bd0.res6.spectrum.com)
[06:47:16] *** Joins: bilb_ono (~alexmarsh@ip68-6-90-72.sb.sd.cox.net)
[06:49:10] *** Joins: iflema (~ian@user/iflema)
[06:49:14] <johnny> i wonder if anybody here even uses idle harovali . you might need to search elsewhere
[06:51:13] <harovali> johnny is IDLE dead ?
[06:51:20] <johnny> i wouldn't know
[06:51:54] <johnny> it's just that nobody i know uses it for serious programming, and the people who hang out on irc of all places are likely to be those sorts of people
[06:55:36] <jinsun> harovali: where are you seeing cuts and chops? does IDLE have a varible viewer or you are just printing?
[06:55:59] <znf> I didn't even know IDLE was a thing until I googled it now
[06:56:00] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Read error: Connection reset by peer)
[06:56:39] *** Joins: Macuser (~Macuser@216.30.159.201)
[06:56:52] *** Quits: Jefren (~Jefren@70.35.66.72) (Ping timeout: 265 seconds)
[06:56:52] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[06:57:27] *** Joins: mukul (~mukul@c-24-6-109-135.hsd1.ca.comcast.net)
[06:57:31] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[06:57:32] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[06:57:32] *** Quits: mukul (~mukul@c-24-6-109-135.hsd1.ca.comcast.net) (Client Quit)
[06:58:36] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[07:01:23] *** Joins: Jefren (~Jefren@70.35.67.114)
[07:07:10] *** Quits: Jefren (~Jefren@70.35.67.114) (Ping timeout: 268 seconds)
[07:08:09] *** Joins: et_ (~et@user/et)
[07:08:42] *** Joins: Jefren (~Jefren@70.35.66.142)
[07:08:59] *** Quits: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: ncwbqcfe)
[07:09:01] *** Quits: et (~et@user/et) (Ping timeout: 268 seconds)
[07:09:01] *** et_ is now known as et
[07:11:44] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[07:12:58] <cluelessperson> I'm having difficulty finding documentation on PySide6 's QTableWidget and how to connect an event to it
[07:13:24] <cluelessperson> eh, ignore me
[07:14:19] *** Quits: Jefren (~Jefren@70.35.66.142) (Ping timeout: 252 seconds)
[07:15:15] *** Joins: Cheaterman (~Cheaterma@user/cheaterman)
[07:16:17] *** Joins: Barones (~Barones@2804:7f3:8987:efb1:aa32:527a:dfb8:202c)
[07:16:41] *** Joins: Jefren (~Jefren@70.35.66.163)
[07:16:45] <cluelessperson> yeah, I'm stuck
[07:16:46] <cluelessperson> https://doc.qt.io/qtforpython/PySide6/QtWidgets/QTableWidget.html#PySide6.QtWidgets.PySide6.QtWidgets.QTableWidget.cellChanged
[07:17:06] <cluelessperson> Here in the documentation, QTableWidget should have a "cellChanged" attribute, but it doesn.t
[07:21:15] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[07:21:19] *** Quits: Jefren (~Jefren@70.35.66.163) (Ping timeout: 252 seconds)
[07:21:38] * cluelessperson goes to examine events more
[07:21:51] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[07:23:38] <eblip> can you not look at qtablewidget.cellchanged or .help to see what is there
[07:24:19] <eblip> print(QTableWidget.help)
[07:24:59] *** Joins: Nact (~l@2a02:a03f:c0b0:f600:3253:5994:1b4f:e854)
[07:28:18] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 260 seconds)
[07:28:44] *** Joins: skali (~skali@46.191.137.79)
[07:29:59] *** Quits: GenTooMan (~cyberman@c-73-214-106-63.hsd1.pa.comcast.net) (Ping timeout: 268 seconds)
[07:30:07] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[07:30:58] *** Joins: sejow (~sejow@193.29.106.102)
[07:33:03] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[07:33:41] *** Quits: skali (~skali@46.191.137.79) (Ping timeout: 268 seconds)
[07:34:32] *** Joins: Jefren (~Jefren@70.35.67.178)
[07:34:36] *** Quits: georgios (~georgios@user/georgios) (Quit: Konversation terminated!)
[07:34:40] *** Quits: goepsilongo (~chacho@2603-7000-ab00-62ed-0000-0000-0000-0bd0.res6.spectrum.com) (Quit: Konversation terminated!)
[07:35:40] *** Joins: PaddyF_ (~PaddyF@user/paddyf)
[07:35:58] *** Quits: bilb_ono (~alexmarsh@ip68-6-90-72.sb.sd.cox.net) (Quit: bilb_ono)
[07:37:58] *** Quits: PaddyF (~PaddyF@user/paddyf) (Ping timeout: 252 seconds)
[07:38:48] *** Joins: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net)
[07:39:49] <xrogaan> Is this normal?
[07:39:51] <xrogaan> >>> 0.1+0.1+0.1
[07:39:51] <xrogaan> 0.30000000000000004
[07:40:28] *** Quits: Jefren (~Jefren@70.35.67.178) (Ping timeout: 268 seconds)
[07:41:24] <znf> xrogaan, yes
[07:41:36] <xrogaan> why?!
[07:42:06] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[07:42:18] <znf> that's how computers work
[07:42:18] *** Joins: Jefren (~Jefren@70.35.67.176)
[07:42:24] <znf> it's not an issue with python specifically
[07:43:02] <Repiphany> xrogaan: https://0.30000000000000004.com/
[07:43:19] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[07:43:35] <xrogaan> That's how I get to 8.599999999999994 by only adding 1/10 several times.
[07:43:57] <xrogaan> I guess I shouldn't use floats then.
[07:43:59] <znf> ha, nice, someone actually made a domain for that :D
[07:44:17] <KirkMcDonald> Other reading on the subject: https://qntm.org/notpointthree
[07:44:41] <KirkMcDonald> Also I enjoyed this one: https://twitter.com/qntm/status/1437086950331142151
[07:44:49] <jinsun> there is a good Tom Scott video on Computerphile about this https://www.youtube.com/watch?v=PZRI1IfStY0
[07:45:22] *** Joins: Somni (insomnia@77-88-237-24.gci.net)
[07:45:46] *** Quits: zaquest (~notzaques@5.128.210.178) (Remote host closed the connection)
[07:46:01] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[07:46:19] <KirkMcDonald> xrogaan: But the short version is that 5 is a prime number that is not 2.
[07:46:27] <znf> welcome to the world of floating point math
[07:47:12] *** Joins: zaquest (~notzaques@5.128.210.178)
[07:47:21] <xrogaan> I'm just counting stuff of various weight. Floats aren't important here. So the best way to circumvent would be to use whole integer instead of float.
[07:47:50] *** Joins: fikran (~fikran@user/fikran)
[07:47:50] <KirkMcDonald> xrogaan: The decimal module may also be relevant, but it really depends on your specific needs.
[07:47:52] *** Quits: Jefren (~Jefren@70.35.67.176) (Ping timeout: 268 seconds)
[07:48:08] <xrogaan> But for the sake of the question: would using either the decimal or fractions modules add an overhead?
[07:48:21] <KirkMcDonald> xrogaan: Oh my yes, they're significantly slower.
[07:48:42] <KirkMcDonald> xrogaan: But whether this is a problem depends on what you're doing.
[07:49:25] <Macuser> found the mistaaake
[07:49:38] *** Joins: Jefren (~Jefren@70.35.67.45)
[07:49:59] <xrogaan> Doing a heat map.
[07:50:34] *** Quits: Zeturic (~Orimendix@50-25-46-156.krmtcmta02.res.dyn.suddenlink.net) (Quit: Leaving)
[07:50:54] <KirkMcDonald> As in, you're making some sort of graphic? Then I probably wouldn't worry about floating-point error. It probably wouldn't be perceptible.
[07:51:37] <KirkMcDonald> (As in, literally, the floating-point imprecision would be less than the precision of the color representation in the image.)
[07:52:16] <Macuser> is there not a function to replace a specific substring instead of all occurrences or the "first" one?
[07:52:24] <Macuser> .replace() is doing me dirty
[07:52:25] <xrogaan> No, not a graph. It's used in order to distribute things evenly.
[07:52:32] <xrogaan> Macuser: re.sub()
[07:52:44] <Macuser> ok thanks I couldn't find that on google anywhere
[07:52:53] *** Quits: shangxiao (~davids@124.187.193.187) (Read error: Connection reset by peer)
[07:53:12] <xrogaan> https://docs.python.org/3/library/re.html#re.sub
[07:53:44] *** Joins: Wulf (~Wulf@user/wulf)
[07:53:59] *** Joins: mukul (~mukul@c-24-6-109-135.hsd1.ca.comcast.net)
[07:55:11] *** Joins: shangxiao (~davids@124.187.193.187)
[07:55:40] *** Joins: skali (~skali@46.191.137.79)
[07:55:59] *** Joins: cellofellow (~user@166.70.50.58)
[07:57:39] <xrogaan> KirkMcDonald: but yeah, you're right. It's just a... display quirk. "{:.1}".format(floaty) will do the trick.
[07:58:17] <KirkMcDonald> xrogaan: As https://qntm.org/notpointthree points out in some detail, what you're seeing there is really two sorts of imprecision cancelling each other out.
[07:58:44] *** Quits: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net) (Ping timeout: 265 seconds)
[07:59:06] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 260 seconds)
[07:59:13] <KirkMcDonald> xrogaan: And I think it's important for anyone doing math with floats to understand what's going on with that sort of thing.
[07:59:42] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 265 seconds)
[08:00:30] *** Quits: skali (~skali@46.191.137.79) (Ping timeout: 260 seconds)
[08:01:44] <harovali> jinsun it chops by default, and the length max to chop is harcoded in idleide/debugger.py
[08:02:38] *** Quits: UselessCourage (~UselessCo@gateway/tor-sasl/uselesscourage) (Remote host closed the connection)
[08:02:47] *** Joins: UselessCourage (~UselessCo@gateway/tor-sasl/uselesscourage)
[08:04:55] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 252 seconds)
[08:05:13] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[08:05:30] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 265 seconds)
[08:06:23] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[08:06:28] *** Quits: CRUNK-b0t (~Lando@user/lando-spacepimp) (Ping timeout: 265 seconds)
[08:07:41] *** Joins: Fiji (~Fiji@user/fiji)
[08:07:56] <Macuser> xrogaan does re.sub let me replace at a specific char spot in the given string?
[08:08:02] <Macuser> i just need something that smiple
[08:08:04] <Macuser> simple*
[08:08:37] <xrogaan> char spot?
[08:08:54] <xrogaan> well, you have a regex engine right there, you can define whatever spot you want.
[08:09:11] <Macuser> I just said put it here as long as you see some string follow it
[08:09:23] <Macuser> but i'd rather make it replace at a specific index of the string
[08:10:11] <xrogaan> I don't understand.
[08:11:04] <Macuser> replace "this" with "that" at [4:6] in string
[08:12:13] <xrogaan> If you know which context your "this" is in, you can craft a regex expression to match it.
[08:12:52] <Fieldy> hello :) i'm using 3.7.11 and i'm trying to impliment a watch dog. here's the source, though i'm only concerned about the parts clearly marked between watchdog begin and end for now. https://bpa.st/6MBQ . the output I get is this. i expect to be told that the files i've created in the directory have appeared, however, i never see that. my skill level is fairly noob so i bet it's something nooby. output: https://bpa.st/AP5A
[08:13:14] *** Quits: Jefren (~Jefren@70.35.67.45) (Ping timeout: 265 seconds)
[08:14:36] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[08:14:54] <xrogaan> Macuser: example: https://regex101.com/r/G9CHgc/1
[08:14:58] *** Joins: Jefren (~Jefren@70.35.67.119)
[08:15:11] <xrogaan> Fieldy: what's a watchdog?
[08:15:11] <Fieldy> sh*t power loss. ups party. brb
[08:15:17] <Macuser> yeah that's what I did. but I wanted the EXACT index
[08:15:26] <Macuser> why use context when you know the exact index
[08:15:39] *** Quits: Barones (~Barones@2804:7f3:8987:efb1:aa32:527a:dfb8:202c) (Remote host closed the connection)
[08:16:00] <Fieldy> test. seems like i'm ok. UPS units go brr
[08:16:14] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 268 seconds)
[08:16:28] *** vinleod is now known as vdamewood
[08:16:34] <Macuser> ello Fieldy
[08:16:38] <Fieldy> xrogaan: well, my goal is to at first learn how to notice when files are created, and then do an action. later, i'd like it simply to be modified files. i'm working with the example mentioned in the comments
[08:16:47] <Fieldy> hai Macuser
[08:17:16] <xrogaan> Fieldy: watchdog taps into the OS subsystem. You do not need `while True'
[08:17:53] <Fieldy> xrogaan: ok. i'm just going by https://zackonengineering.com/python-watchdog-file-watcher/ . is the way they're doing it wrong? or merely suboptimal?
[08:18:21] <xrogaan> that website is down
[08:18:28] <Fieldy> eek
[08:18:50] <Fieldy> odd. up here :/
[08:19:21] <Fieldy> refreshing it sure is real slow now though
[08:20:09] *** Quits: Fiji (~Fiji@user/fiji) (Quit: Leaving)
[08:20:49] <xrogaan> it's a signal system. It'll emit events whenever something happens.
[08:21:10] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[08:21:12] <xrogaan> all you have to do is write an interface that listen to the dog.
[08:22:22] *** Quits: Jefren (~Jefren@70.35.67.119) (Ping timeout: 252 seconds)
[08:22:25] <Fieldy> ok. this is at the limits of my understanding but i'm trying :) so, this while True, can i just get rid of it and keep what's within it?
[08:23:34] <xrogaan> I don't know what that class (FileCreationWatcher) does, it's not used anywhere
[08:23:58] <Fieldy> i'm not entirely sure either. just going by that example and struggling myself
[08:24:01] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[08:24:13] <Fieldy> i'll read back over it, see if i screwed up and missed soemthing
[08:24:19] *** Joins: Jefren (~Jefren@70.35.66.59)
[08:24:45] <xrogaan> What you're subclassing, later, is that object: https://github.com/gorakhargosh/watchdog/blob/master/src/watchdog/events.py#L335
[08:26:45] *** Joins: control (~v1@user/control)
[08:27:30] <control> hello, im running permutations(words, 16), theres anyway i could change the color of the rotating part in console?
[08:27:56] <xrogaan> Fieldy: the file patterns are applied to this function: https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.match
[08:28:01] *** Quits: dhill (dhill@modemcable103.217-80-70.mc.videotron.ca) (Ping timeout: 252 seconds)
[08:28:15] <Fieldy> xrogaan: okay, thanks for the insight, i'll read up on those
[08:28:25] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 252 seconds)
[08:29:42] <Fieldy> at the very least i DID screw up some indentation... going over everything again first
[08:30:46] *** Quits: cellofellow (~user@166.70.50.58) (Remote host closed the connection)
[08:31:05] <control> i mean change the color of the word which was already rotated
[08:31:33] <xrogaan> Fieldy: the example included in the repo should be a better help.
[08:31:54] <Fieldy> xrogaan: ok, i will absolutely check that out. the one i'm using has me very confused. thanks for your time!
[08:32:49] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Quit: Hay te huacho!)
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2.1)
[08:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:39:20] *** Quits: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net) (Ping timeout: 265 seconds)
[08:40:06] *** Joins: singularity00 (~singulari@85.187.64.126.client.entry.bg)
[08:40:06] *** Quits: singularity00 (~singulari@85.187.64.126.client.entry.bg) (Client Quit)
[08:44:56] *** Joins: tmart (~tmart@74-194-163-71.bcstcmtk01.res.dyn.suddenlink.net)
[08:48:11] *** Quits: tmart (~tmart@74-194-163-71.bcstcmtk01.res.dyn.suddenlink.net) (Read error: Connection reset by peer)
[08:49:37] *** Joins: tmart (~tmart@74-194-163-71.bcstcmtk01.res.dyn.suddenlink.net)
[08:49:56] *** Quits: fengshaun (~fengshaun@S010680615f0c2c0a.cg.shawcable.net) (Ping timeout: 268 seconds)
[08:51:01] *** Joins: iflema_ (~ian@user/iflema)
[08:51:42] *** hays is now known as h_
[08:52:37] *** Quits: iflema (~ian@user/iflema) (Ping timeout: 268 seconds)
[08:53:19] *** Joins: ferz (~ferz@93-39-142-235.ip76.fastwebnet.it)
[08:54:40] *** Quits: nergar (~Nergar@177.225.152.145) (Read error: Connection reset by peer)
[08:56:28] *** Joins: fengshaun (~fengshaun@S010680615f0c2c0a.cg.shawcable.net)
[08:58:26] *** Quits: mukul (~mukul@c-24-6-109-135.hsd1.ca.comcast.net) (Quit: Leaving.)
[09:00:03] *** Joins: shlomif (~shlomif@87.68.240.100.adsl.012.net.il)
[09:00:34] *** Quits: Sky_Net (~Sky_Net@176.14.213.149) (Read error: Connection reset by peer)
[09:04:02] *** Joins: orbisvicis (~orbisvici@user/orbisvicis)
[09:04:42] *** Joins: saribro (~swinnenb@user/swinnenb)
[09:05:37] *** Quits: Nact (~l@2a02:a03f:c0b0:f600:3253:5994:1b4f:e854) (Remote host closed the connection)
[09:05:57] *** Joins: Nact (~l@2a02:a03f:c0b0:f600:3253:5994:1b4f:e854)
[09:06:18] *** Quits: swinnenb (~swinnenb@user/swinnenb) (Ping timeout: 260 seconds)
[09:06:32] *** Quits: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net) (Read error: Connection reset by peer)
[09:07:18] <orbisvicis> does ThreadPoolExecutor start a new thread for each future?
[09:10:19] <orbisvicis> oh I see, each thread pulls items off a work queue
[09:11:34] *** Quits: orbisvicis (~orbisvici@user/orbisvicis) (Quit: Leaving)
[09:12:43] *** Joins: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net)
[09:13:43] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[09:13:59] *** Joins: djapo (~archangel@user/djapo)
[09:14:47] *** Joins: y1n (~y1n@84-115-65-218.wifi.dynamic.surfer.at)
[09:16:04] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[09:16:36] *** Joins: upsala (~zcb@185.213.155.160)
[09:16:40] *** Quits: jdmark (~jdmark@67.8.137.130) (Ping timeout: 240 seconds)
[09:17:21] <Fieldy> thanks for the help, had a power loss and also my main server went down, so that was real fun.... think i've had enough :D
[09:17:25] *** Joins: skali (~skali@46.191.137.79)
[09:18:02] *** Joins: noyb (~noyb@user/noyb)
[09:19:23] *** Joins: sydbarret (~anton@static-186-121-195-13.acelerate.net)
[09:20:59] *** Quits: ska (~ska@user/ska) (Ping timeout: 268 seconds)
[09:21:52] *** Quits: skali (~skali@46.191.137.79) (Ping timeout: 265 seconds)
[09:22:50] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[09:24:05] *** Joins: wyclif (~wyclif@user/wyclif)
[09:26:07] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[09:27:09] *** Joins: audio (~audio@2603-8081-1800-6a6f-2cf1-dd87-90f0-3744.res6.spectrum.com)
[09:30:34] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[09:30:34] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[09:30:53] *** Joins: pycurious (~Adium@user/pycurious)
[09:30:53] *** Quits: pycurious (~Adium@user/pycurious) (Client Quit)
[09:31:02] *** Joins: pycurious (~Adium@user/pycurious)
[09:31:05] *** Joins: stranac (~stranac@195.29.239.126)
[09:31:05] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[09:31:20] *** Joins: semeion (~semeion@user/semeion)
[09:34:08] *** Joins: ska (~ska@user/ska)
[09:34:38] *** Joins: ihristov (~ihristov@85.187.46.226)
[09:35:34] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[09:35:37] *** Joins: emerent_ (~quassel@p200300cd5701a105ba27ebfffed28a59.dip0.t-ipconnect.de)
[09:35:37] *** Quits: emerent (~quassel@p200300cd5701a1ceba27ebfffed28a59.dip0.t-ipconnect.de) (Killed (molybdenum.libera.chat (Nickname regained by services)))
[09:35:37] *** emerent_ is now known as emerent
[09:36:41] *** Joins: rsrx (~rsrx@103.225.150.81)
[09:37:05] *** Quits: stealth_ (~stealth_@216-197-160-97.regn.static.sasknet.sk.ca) (Quit: Leaving)
[09:37:20] *** Joins: zmt00 (~zmt00@user/zmt00)
[09:38:22] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[09:40:43] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 268 seconds)
[09:41:00] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[09:42:10] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 265 seconds)
[09:42:14] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 260 seconds)
[09:45:07] *** Joins: ssbr (~ssbr@python/site-packages/ssbr)
[09:46:13] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[09:47:11] *** Joins: pycurious (~Adium@user/pycurious)
[09:48:45] *** Joins: Wuniu (~Thunderbi@user/wuniu)
[09:50:04] *** Joins: bilb_ono (~alexmarsh@ip68-6-90-72.sb.sd.cox.net)
[09:51:36] *** Joins: sagax (~sagax_nb@user/sagax)
[09:51:49] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[09:52:27] *** Quits: sydbarret (~anton@static-186-121-195-13.acelerate.net) (Quit: Going offline, see ya! (www.adiirc.com))
[09:52:49] *** Joins: wyclif (~wyclif@user/wyclif)
[09:54:12] *** Joins: skali (~skali@46.191.137.79)
[09:55:13] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[09:57:12] *** Joins: fikran (~fikran@user/fikran)
[09:57:59] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[09:58:54] *** Quits: nomic (~nomic@185.217.117.156) (Quit: Leaving)
[09:59:13] *** Quits: skali (~skali@46.191.137.79) (Ping timeout: 268 seconds)
[09:59:55] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[10:02:05] *** Quits: y1n (~y1n@84-115-65-218.wifi.dynamic.surfer.at) (Ping timeout: 268 seconds)
[10:03:05] <bilb_ono> is this a valid generator? https://bpa.st/D4CA when I try and use it I get TypeError NoneType is not iterable. Im worried the way Im using yield inside that inner function is not allowed
[10:03:11] *** Joins: skali (~skali@46.191.137.79)
[10:04:46] <jinsun> repasted https://bpa.st/JY6A, use https://bpa.st/+python instead of just https://bpa.st
[10:05:51] <bilb_ono> oh is this where I use yield from?
[10:05:56] <Repiphany> bilb_ono: You probably need to do `yield from unload(batch)`, it doesn't automatically ^
[10:06:05] <jinsun> bilb_ono: the fetch function is not a generator, the inner unload function is
[10:06:28] <bilb_ono> thanks
[10:06:40] *** Joins: Wubull (~Thunderbi@user/wuniu)
[10:07:10] <rsrx> are there any downsides of having empty __init__.py file on a python package level (where setup.py is)
[10:07:25] *** Quits: skali (~skali@46.191.137.79) (Ping timeout: 252 seconds)
[10:07:48] <rsrx> mypy fails with duplicate package error if i dont add this file
[10:07:57] <bilb_ono> yeah that works
[10:08:16] *** Quits: Wuniu (~Thunderbi@user/wuniu) (Ping timeout: 265 seconds)
[10:08:16] *** Wubull is now known as Wuniu
[10:11:15] <bilb_ono> also. is there anything wrong with doing if (): gen = a else: gen = b; for item in gen:â€¦. like as opposed to providing the variable outside the if else statement and then updating it inside of those?
[10:12:38] <jinsun> rsrx: mypy doesn't fail with that error normally, and having __init__.py outisde the package is weird, how are you running mypy and how does your folder structure look like?
[10:13:34] <rsrx> i'm running `dmypy run .`
[10:14:17] <rsrx> my package structure is package/setup.py, package/lib/package/, package/tests
[10:14:31] *** Quits: AlanMD (~AlanMD@193.105.140.131) (Read error: Connection reset by peer)
[10:14:33] <rsrx> package/lib/package/* are where python files are located
[10:14:50] <rsrx> i wonder if i need to pass some configuration flags to dmypy
[10:16:06] *** Joins: mohabaks (~mohabaks@gateway/tor-sasl/mohabaks)
[10:16:29] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 268 seconds)
[10:17:13] *** Joins: pycurious (~Adium@user/pycurious)
[10:18:22] *** PaddyF_ is now known as PaddyF
[10:18:43] *** Quits: lethu (~lethu@user/lethu) (Remote host closed the connection)
[10:19:04] <jinsun> rsrx: can you show the output of that command?
[10:19:36] *** Joins: AlanMD (~AlanMD@193.105.140.131)
[10:19:39] *** Joins: skali (~skali@46.191.137.79)
[10:19:45] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[10:19:52] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 265 seconds)
[10:20:23] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[10:20:32] <rsrx> jinsun,
[10:20:40] <rsrx> vagrant@ubuntu-bionic:/mnt/code$ dmypy run .
[10:20:43] <rsrx> codes/add_checks/setup.py: error: Duplicate module named "setup" (also at "./codes/process_files/setup.py")
[10:20:46] <rsrx> codes/add_checks/setup.py: note: Are you missing an __init__.py? Alternatively, consider using --exclude to avoid checking one of them.
[10:20:50] <rsrx> those three lines ^
[10:21:48] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 265 seconds)
[10:22:29] *** Quits: Wuniu (~Thunderbi@user/wuniu) (Quit: I'm tired, have a good time!)
[10:22:38] <rsrx> i basically have a monorepo with hundreds of python packages
[10:22:43] <rsrx> i want to run dmypy on a monorepo level
[10:24:57] <jinsun> okay, probably would be better to loop over different folder and run dmypy on each of them, or just exclude setup.py
[10:25:16] <Repiphany> Why don't you want to put an __init__.py
[10:25:30] <rsrx> jinsun, but that means i would have 300 dmypy daemon processes running then
[10:25:36] <rsrx> Repiphany, i cant due to different reasons
[10:25:41] <rsrx> would require major refactor of the code
[10:25:41] <jinsun> mypy sees setup.py as single module that is repeated
[10:26:26] *** Quits: mweckbecker (~matthias@weckbecker.name) (Quit: leaving)
[10:26:35] <rsrx> hmm
[10:27:02] *** Joins: mweckbecker (~matthias@2001:1b60:3:239:2723::1)
[10:27:07] <jinsun> if you put __init__.py where setup.py is located then mypy will see it as package.setup instead of setup and won't complain as long as folder names are different
[10:27:48] *** Joins: chele (~chele@user/chele)
[10:28:04] <jinsun> best would be to just exclude setup.py in mypy config
[10:29:07] <jinsun> ideally you shouldn't have too much code there, and you don't care about type checking the few lines that are there
[10:29:29] *** Joins: wyclif (~wyclif@user/wyclif)
[10:29:32] *** Joins: Polyinsecure (~Polyinsec@180.244.135.66)
[10:29:35] <rsrx> ah yeah i can probably exclude that
[10:29:39] <rsrx> ok i'll try that thanks
[10:32:47] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[10:32:50] *** Quits: bilb_ono (~alexmarsh@ip68-6-90-72.sb.sd.cox.net) (Quit: bilb_ono)
[10:32:53] <energizer> rsrx: you're not supposed to put __init__.py in the same folder as setup.py
[10:33:52] <energizer> /setup.py /mypkg/__init__.py /mypkg/whatever.py
[10:34:00] *** Joins: dvx (~dvx@185.63.97.64)
[10:36:50] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[10:38:37] *** Quits: BinarySavior (~BinarySav@user/binarysavior) (Quit: BinarySavior has dropped the mic)
[10:40:34] *** Quits: Polyinsecure (~Polyinsec@180.244.135.66) (Ping timeout: 260 seconds)
[10:41:00] *** Joins: pycurious (~Adium@user/pycurious)
[10:42:20] *** Quits: Nact (~l@2a02:a03f:c0b0:f600:3253:5994:1b4f:e854) (Quit: Konversation terminated!)
[10:42:26] *** Quits: fr_sleepy (~fr_sleepy@209.94.138.128) (Ping timeout: 260 seconds)
[10:42:52] <rsrx> eh if i exclude setup.py, it just fails on next duplicate filename
[10:42:53] <rsrx> jinsun
[10:43:04] <rsrx> error: Duplicate module named "test_reports" (also at "...
[10:43:36] *** Joins: ubert (~Thunderbi@178.165.161.81.wireless.dyn.drei.com)
[10:44:40] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[10:44:52] *** Quits: catdog (~quassel@2001:470:50f7:cdcd::cd1) (Quit: No Ping reply in 120 seconds.)
[10:46:26] <jinsun> this is why I said looping and running for one package at a time will be better
[10:46:33] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:46:42] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 268 seconds)
[10:47:01] *** Joins: catdog (~quassel@2001:470:50f7:cdcd::cd1)
[10:47:08] *** Joins: seednode (~seednode@user/seednode)
[10:47:26] <rsrx> from what i understand, dmypy daemon has to be running in the background all the time
[10:47:39] <rsrx> running 300 daemons seems like a bad idea
[10:48:17] <jinsun> I don't think it rwill run a new daemon for each run, it should reuse the existing one when you run the second time
[10:48:23] *** Quits: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com) (Read error: Connection reset by peer)
[10:48:40] *** Joins: carl- (~carl-@185.103.188.131)
[10:48:50] <rsrx> "Each mypy daemon process supports one user and one set of source files, and it can only process one type checking request at a time. You can run multiple mypy daemon processes to type check multiple repositories."
[10:48:51] <rsrx> hmm
[10:49:06] *** Joins: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com)
[10:49:13] <jinsun> https://mypy.readthedocs.io/en/stable/mypy_daemon.html#basic-usage
[10:49:30] *** Joins: fr_sleepy (~fr_sleepy@209.94.138.128)
[10:49:55] <jinsun> "This will launch the daemon if it is not running."
[10:50:26] <jinsun> you are reading about checking all folders in parallel maybe, I am talking about doing it sequencially
[10:50:43] *** Joins: carl-- (~carl-@185.103.188.130)
[10:51:02] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[10:51:11] <rsrx> hmm ok
[10:52:02] *** Joins: mukul (~mukul@c-24-6-109-135.hsd1.ca.comcast.net)
[10:53:28] *** Joins: BinarySavior (~BinarySav@user/binarysavior)
[10:53:29] *** Quits: carl- (~carl-@185.103.188.131) (Ping timeout: 268 seconds)
[10:53:44] <rsrx> ok i see what you mean
[10:53:49] <rsrx> it looks like it works now, thanks
[10:54:29] *** Joins: lethu (~lethu@user/lethu)
[10:57:10] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[10:57:32] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-7d2a-9186-6c17-caeb.res6.spectrum.com)
[10:59:34] *** Quits: sandb0y (pirate@user/sandb0y) (Quit: WeeChat 3.2)
[11:01:02] *** Joins: kosh (~kosh@user/kosh)
[11:01:50] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Quit: WeeChat 3.2)
[11:01:55] *** Joins: ExeciN (~ExeciN@user/nicexe)
[11:03:10] *** Quits: Betal (~Betal@user/betal) (Ping timeout: 240 seconds)
[11:04:43] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[11:05:40] *** Quits: ubert (~Thunderbi@178.165.161.81.wireless.dyn.drei.com) (Ping timeout: 240 seconds)
[11:06:05] *** Joins: Betal (~Betal@user/betal)
[11:06:47] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[11:08:12] *** Joins: p-i- (~Ohmu@mx-ll-223.206.145-156.dynamic.3bb.co.th)
[11:08:25] *** Joins: rendar (~rendar@user/rendar)
[11:09:04] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Ping timeout: 252 seconds)
[11:10:07] *** erica is now known as birb
[11:11:21] *** Quits: rsrx (~rsrx@103.225.150.81) (Quit: Leaving)
[11:11:54] *** Joins: brelod (~me@90.244.150.142)
[11:12:25] *** Joins: togusa (~togusa@user/togusa)
[11:13:12] *** Quits: mukul (~mukul@c-24-6-109-135.hsd1.ca.comcast.net) (Quit: Leaving.)
[11:14:11] *** Joins: mukul (~mukul@c-24-6-109-135.hsd1.ca.comcast.net)
[11:14:18] *** Quits: mukul (~mukul@c-24-6-109-135.hsd1.ca.comcast.net) (Client Quit)
[11:14:38] *** Joins: manti7 (~manti7@176.10.104.94)
[11:15:13] *** Joins: pycurious (~Adium@user/pycurious)
[11:16:59] *** Joins: mukul (~mukul@c-24-6-109-135.hsd1.ca.comcast.net)
[11:18:07] *** Quits: dba (uid502594@id-502594.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[11:18:09] *** Quits: skali (~skali@46.191.137.79) (Ping timeout: 268 seconds)
[11:18:12] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[11:19:18] *** Joins: fanis30 (~fanis30@adsl-121.37.6.3.tellas.gr)
[11:19:40] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 240 seconds)
[11:21:09] *** Joins: mrwick (~mrwick@user/mrwick)
[11:22:21] *** Joins: jetchisel (jetchisel@user/jetchisel)
[11:22:36] *** Joins: thiras (~thiras@user/thiras)
[11:23:58] *** Joins: pycode (~pycode@2001:b07:5d28:551:e8a:72fd:b358:f0b6)
[11:25:20] *** Quits: mukul (~mukul@c-24-6-109-135.hsd1.ca.comcast.net) (Quit: Leaving.)
[11:26:53] *** Joins: vorap (~kimkarl@90.139.101.98)
[11:27:11] *** Quits: Jefren (~Jefren@70.35.66.59) (Ping timeout: 268 seconds)
[11:27:22] *** Joins: skali (~skali@46.191.137.79)
[11:28:42] *** Quits: lethu (~lethu@user/lethu) (Remote host closed the connection)
[11:30:05] *** Joins: Jefren (~Jefren@70.35.67.156)
[11:32:49] *** Quits: fanis30 (~fanis30@adsl-121.37.6.3.tellas.gr) (Ping timeout: 252 seconds)
[11:33:31] *** Joins: pycurious (~Adium@user/pycurious)
[11:34:58] *** Joins: fanis30 (~fanis30@adsl-121.37.6.3.tellas.gr)
[11:37:02] *** Joins: raxor2k (~raxor2k@78.158.248.203)
[11:38:03] *** Joins: palasso (~palasso@user/palasso)
[11:38:23] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[11:38:43] *** Joins: gusto (~Augustus@109.255.100.54)
[11:38:52] *** Joins: System123 (~System123@net-37-179-171-3.cust.vodafonedsl.it)
[11:39:11] <Samian> what word do you use to mean how many many columns there are in a 2d table? The "column column" ? Column length? column size?
[11:40:09] <supakeen> Column count, row count.
[11:40:57] <Samian> cool. that's the terminology I used too
[11:42:21] <Samian> which do you prefer? if type(foo) == list:  print("bar")
[11:42:40] <Samian> if isinstance(foo, list): print("bar")
[11:44:20] <jinsun> both don't do the same thing, you want isinstance most of the time
[11:44:45] <jinsun> so that passing a subclass also works
[11:46:02] <Samian> just read that online
[11:46:10] <Samian> isinstance will work when subclassing
[11:46:28] <Samian> the results are different for derived classes
[11:50:55] <Samian> Let's say I have a loop. An array is generated somewhere in the loop. I want to check if the array generated is identical to the array generated during the previous loop iteration.   In c++ this would be very easy.   static int counter = 0; static std::vector temp; if (counter++ > 0)  { if (temp != generated_vector) {std::cout<<"vector changed!"} temp = generated_vector;
[11:51:14] <Samian> But in python, I can't have static variables :-(
[11:51:55] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[11:52:01] *** birb is now known as erica
[11:52:26] *** Quits: fanis30 (~fanis30@adsl-121.37.6.3.tellas.gr) (Quit: WeeChat 3.2)
[11:52:27] *** Quits: togusa (~togusa@user/togusa) (Quit: Leaving)
[11:52:52] <Samian> I could make a global variables as a workaround, but that's messy. It's not elegant at all. It's haywire mess
[11:53:32] <shangxiao> since static means a few different things, refresh my memory what does static do here? remember the value?
[11:54:40] <shangxiao> can't you use nesting to achieve the same thing?
[11:55:19] <shangxiao> because of closures?
[11:55:31] <Samian> static means the variable isn't reinitialized
[11:56:11] <Samian> it's initialized once and persists.
[11:57:32] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[11:57:37] <Samian> void some_function() { static int how_many_times_have_I_been_called = 0;   how_many_times_have_I_been_called += 1;  std::cout<<how_many_times_have_I_been_called; }
[11:58:15] *** Joins: ole_ (~ole_@84.46.68.3)
[11:58:15] <Samian> shangxiao ever time you call some_function, how_many_times_have_I_been_called increments. It's not reset to 0
[11:58:26] *** Quits: ole_ (~ole_@84.46.68.3) (Client Quit)
[11:58:32] <Repiphany> You can cheat with a mutable default variable
[11:58:38] <Repiphany> Or encapsulate everything in a class
[11:58:58] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[11:59:03] <Repiphany> Or a decorator
[11:59:22] <DPA> How about this:
[11:59:22] <DPA> def incid(): incid.i = incid.i + 1; return incid.i
[11:59:22] <DPA> inclid.i=0
[11:59:22] <DPA> There are some limitations to this, though. You may want to pay attention to when / where the function is defined for example.
[12:00:34] <Samian> DPA let me try that
[12:00:35] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:00:44] <Samian> DPA that looks pretty darn close
[12:00:49] <jinsun> setting attributes on functions is weird thouogh, decorator or class with a __call__ method is the pythonic way to this
[12:01:34] *** Quits: mdemo (~mdemo@c-73-40-53-74.hsd1.wv.comcast.net) (Quit: The Lounge - https://thelounge.github.io)
[12:02:17] <shangxiao> Samian: https://bpa.st/6CYA
[12:02:36] <jinsun> also, type checkers won't allow it
[12:02:45] <shangxiao> closures, function attributes, mutable defaults, class attributes... take your pick
[12:04:49] *** Joins: _0az (~az0@user/az0)
[12:05:01] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[12:05:26] *** Joins: kouhai (~kouhai@user/kouhai)
[12:06:07] <shangxiao> whoops indentation was slightly off, fixed: https://bpa.st/HLFA
[12:06:29] *** Joins: acresearch (~acresearc@user/acresearch)
[12:06:34] *** Joins: fikran (~fikran@user/fikran)
[12:09:26] *** Joins: fdan (~fdan@192.146.154.3)
[12:11:05] <audio> i'm using zipfile and it zipped my entire directory structure instead of the desired files. can anyone help? pasting the code in a sec
[12:11:22] <wyre> hi guys, I'd like to store the output of 'ss -tunlp' in a list
[12:11:22] <fdan> how can i setup the linux server as a NAT
[12:11:38] <wyre> but apparently os.system("ss -tunlp") returns the status code
[12:11:53] <wyre> how could I catch the command output?
[12:12:09] <audio> code: https://bpa.st/YBOQ
[12:12:11] *** Quits: darwillim86d (uid517090@id-517090.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[12:12:18] <vorap> I'd have a look at subprocess, or a native python way to get that information
[12:12:44] <audio> can anyone help? super simple question, working with zipfile
[12:13:17] <vorap> wyre: See above :)
[12:13:56] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Ping timeout: 265 seconds)
[12:14:05] <Samian> DPA, for some reason, the code always skips over if incid() > 1, as if it's always evaluating to false
[12:15:09] <audio> hello?
[12:15:23] *** Joins: wyclif (~wyclif@user/wyclif)
[12:15:27] *** Joins: brentaarnold (~brentaarn@24.112.61.90)
[12:15:33] <vorap> audio: Where does ZipFile come from?
[12:15:47] <audio> vorap, it's a built in python module
[12:16:00] <vorap> zipfile.ZipFilw
[12:16:03] <audio> it's used to create .zip files
[12:16:04] <vorap> ?
[12:16:17] <audio> yes
[12:16:32] <DPA> Samian: I can't reproduce that: https://bpa.st/IWVA
[12:17:20] <fdan> how can i setup the linux server as a NAT
[12:17:20] *** Quits: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net) (Read error: Connection reset by peer)
[12:17:29] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[12:17:32] <vorap> What is settings.BASE_DIR set to?
[12:17:49] *** Quits: kr0nk (~kr0nk@user/kr0nk) (Ping timeout: 252 seconds)
[12:17:50] *** Quits: Fluxx (~Fluxx@user/fluxx) (Remote host closed the connection)
[12:17:51] <wyre> ty vorap ðŸ˜€
[12:18:10] <vorap> All good :)
[12:18:22] <audio> vorap, /home/webadmin/dev.redacted.com/src
[12:18:26] <jinsun> fdan: seems like a question for #linux
[12:18:36] *** Joins: kr0nk (~kr0nk@user/kr0nk)
[12:18:44] <fdan> sorry.,i posted in wrong channel
[12:19:58] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[12:20:58] *** Joins: Mija (~Mija@user/mija)
[12:21:09] <Samian> DPA I see why. I have the function inside the loop
[12:21:10] <audio> vorap, sorry i may have mispoke. the zip contains the path to the dir containing all the html files
[12:21:16] <audio> mispoken*
[12:21:28] <Samian> DPA so ever iteration it's creating the innerfunction as if its being seen for the first time
[12:22:22] *** Quits: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[12:22:24] <vorap> audio: Ahh now I get you. Let me have a look
[12:22:40] <DPA> Yea, as I said at the very beginning, be careful when / where the function is defined.
[12:22:45] <Samian> DPA  https://bpa.st/L7WA
[12:22:47] <Samian> that wouldn't work
[12:23:02] *** Joins: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net)
[12:23:23] *** Joins: pycurious (~Adium@user/pycurious)
[12:23:23] <vorap> audio: Seems like you want to provide arcname for your ZipFile.write call
[12:23:35] <vorap> See the docs: https://docs.python.org/3/library/zipfile.html#zipfile.ZipFile.write
[12:23:36] <Samian> the issue with placing the function outside the loop is that code relevant to a particular chunk of code is far away from the code it's relevant to.  I like proximity to follow relevance
[12:24:55] <audio> vorap, i don't know what to set this as
[12:25:13] <audio> i guess it can be anything?
[12:25:14] <Samian> If I have 5 lines of code. I don't want a line critical to those 5 lines being far away somewhere else.   That also screws with what you know you need to be aware about.  If the code style is that everything relevant is close, you know what's relevant is in front of your eyes. You don't have to wonder whether something out of sight is impacting what is in sight.
[12:25:19] <vorap> The path that you want the file to have *inside* the zip file
[12:25:42] <audio> vorap, the zipfile is being written to multiple times though
[12:25:52] <audio> it's in a for loop
[12:25:52] <vorap> Yes
[12:26:07] <audio> ideally i don't want any path, just the .html files inside the zip
[12:26:07] <DPA> Samian: I don't think anything can be done about that. It's just how it is.
[12:26:15] <audio> do i just make the arcname the filename? vorap
[12:26:19] <vorap> Everytime you write a file, you provide the name/path inside the zipfile
[12:26:31] <audio> ah i see
[12:26:31] <vorap> that you want inside the zipfile*
[12:26:39] <audio> do i just make the arcname the filename? vorap
[12:26:41] <audio> for no path
[12:26:42] <vorap> Yes you can set it to the filename directly
[12:26:49] <vorap> for no path :)
[12:28:15] <jinsun> Samian: that is why you use IDEs like vscode that can peek definitions of functions that you are using, cramming everything in one location doesn't work except for trivial examples
[12:28:27] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 268 seconds)
[12:29:11] *** Quits: djapo (~archangel@user/djapo) (Remote host closed the connection)
[12:29:16] <vorap> You're welcome audio, next time you ask, please wait patiently for a response, people will help you when they get the time. :)
[12:29:45] *** Joins: System12_ (~System123@ec2-52-61-197-79.us-gov-west-1.compute.amazonaws.com)
[12:31:26] <Samian> jinsun  I know I know, but I prefer close proximity when possible
[12:31:35] *** Joins: djapo (~archangel@user/djapo)
[12:32:18] <Samian> jinsun  there are times when it's not a mere function call but actually something you can't keyboard-shotcut your way into seeing.
[12:33:10] *** Quits: System123 (~System123@net-37-179-171-3.cust.vodafonedsl.it) (Ping timeout: 252 seconds)
[12:33:14] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:33:45] *** Quits: Jefren (~Jefren@70.35.67.156) (Ping timeout: 265 seconds)
[12:35:26] *** Joins: Jefren (~Jefren@70.35.67.147)
[12:35:45] *** Joins: lxer (~lx@ip5f5bf666.dynamic.kabel-deutschland.de)
[12:36:00] *** Joins: hendursa2 (~weechat@user/hendursaga)
[12:36:18] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:36:43] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[12:36:56] *** Joins: darksun (~darksun@user/darksun)
[12:37:26] *** Joins: bigRoo (~user@73.181.dsl.syd.iprimus.net.au)
[12:39:09] *** Joins: Gurkenglas (~Gurkengla@dslb-002-207-014-195.002.207.pools.vodafone-ip.de)
[12:39:33] *** Quits: hendursa1 (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:40:16] *** Joins: azidhaka (~azidhaka@user/azidhaka)
[12:41:26] *** Quits: dambuster (~dambuster@185.193.170.225) (Quit: Leaving)
[12:42:12] *** Quits: thiras (~thiras@user/thiras) (Read error: Connection reset by peer)
[12:42:31] *** Joins: thiras (~thiras@user/thiras)
[12:44:29] *** Quits: audio (~audio@2603-8081-1800-6a6f-2cf1-dd87-90f0-3744.res6.spectrum.com) (Ping timeout: 268 seconds)
[12:45:28] *** Quits: Leonarbro_ (~Leonet@user/leonarbro) (Read error: Connection reset by peer)
[12:45:44] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[12:45:54] *** Joins: Meteorhead (~Meteorhea@165.225.205.32)
[12:46:41] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.2)
[12:46:57] *** Quits: reset (~reset@user/reset) (Quit: reset)
[12:49:13] *** Quits: DerpGusta (~quassel@user/derpgusta) (Ping timeout: 265 seconds)
[12:50:55] *** Quits: Jefren (~Jefren@70.35.67.147) (Ping timeout: 252 seconds)
[12:51:56] *** Joins: DerpGusta (~quassel@user/derpgusta)
[12:52:47] *** Joins: Jefren (~Jefren@208.104.190.50)
[12:53:07] *** Quits: ferz (~ferz@93-39-142-235.ip76.fastwebnet.it) (Ping timeout: 268 seconds)
[12:55:37] *** Quits: Dantali0n (~Dantali0n@2a10:3781:15ed::2000) (Quit: Bye)
[12:56:43] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[13:00:22] *** Joins: drogas (~drogas@jump2.jet.uk)
[13:01:14] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[13:02:26] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[13:02:30] *** Joins: Wuniu (~Thunderbi@user/wuniu)
[13:02:46] *** Quits: brentaarnold (~brentaarn@24.112.61.90) (Ping timeout: 268 seconds)
[13:03:15] *** Joins: brentaarnold (~brentaarn@24.112.61.90)
[13:03:22] *** Quits: System12_ (~System123@ec2-52-61-197-79.us-gov-west-1.compute.amazonaws.com) (Ping timeout: 260 seconds)
[13:03:31] *** Joins: freeworld (~vit@chello085216193138.chello.sk)
[13:03:39] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[13:03:55] *** Quits: Wuniu (~Thunderbi@user/wuniu) (Client Quit)
[13:04:13] *** Joins: plastico (~plastico@neomutt/plastico)
[13:04:21] <wyre> why I'm getting a None? https://bpa.st/Z5ZQ
[13:04:41] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 265 seconds)
[13:04:53] *** Joins: twofingersneat__ (~twofinger@174-080-036-228.res.spectrum.com)
[13:05:00] *** Joins: chele_ (~chele@user/chele)
[13:05:10] *** Quits: chele (~chele@user/chele) (Ping timeout: 265 seconds)
[13:05:22] *** Joins: gtristan (~tristan@223.62.21.41)
[13:05:25] <supakeen> .sort() is in-place so it doesn't return anything.
[13:05:35] <supakeen> (if you `print(a)` you'll see the list itself is sorted)
[13:05:37] <gtristan> How does one annotate a path-like object, e.g.: https://docs.python.org/3/glossary.html#term-path-like-object ?
[13:05:41] *** Quits: tmart (~tmart@74-194-163-71.bcstcmtk01.res.dyn.suddenlink.net) (Read error: Connection reset by peer)
[13:05:47] *** Quits: kenoba (~kenoba@user/kenoba) (Read error: Connection reset by peer)
[13:05:48] *** Joins: kenoba (~kenoba@user/kenoba)
[13:06:05] *** Joins: tmart (~tmart@74-194-163-71.bcstcmtk01.res.dyn.suddenlink.net)
[13:06:06] <gtristan> Should it be Union[str, bytes, os.PathLike] ?
[13:06:26] *** Joins: ferz (~ferz@93-39-142-235.ip76.fastwebnet.it)
[13:06:51] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[13:06:54] *** Quits: chele_ (~chele@user/chele) (Remote host closed the connection)
[13:07:04] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[13:07:11] *** Joins: legola (~legola@46.235.100.27)
[13:08:02] *** Quits: twofingersneat_ (~twofinger@174-080-036-228.res.spectrum.com) (Ping timeout: 260 seconds)
[13:09:15] *** Joins: p-i-_ (~Ohmu@223.206.145.156)
[13:09:58] *** Joins: togusa (~togusa@user/togusa)
[13:11:07] *** Joins: YaknotiS (~YaknotiS@user/yaknotis)
[13:12:08] <The-Compiler> gtristan: typeshed mostly seems to use AnyStr | PathLike[AnyStr]
[13:12:17] <The-Compiler> which more or less boils down to the same
[13:12:22] *** Quits: p-i- (~Ohmu@mx-ll-223.206.145-156.dynamic.3bb.co.th) (Ping timeout: 252 seconds)
[13:12:25] <gtristan> It's not clear to me reading https://docs.python.org/3/library/os.html#os.PathLike, if maybe I only need to annotate something as `os.PathLike`, e.g. a str/bytes are "path like" in as much as one can interrogate a filesystem and check it
[13:12:42] *** Joins: pycurious (~Adium@user/pycurious)
[13:12:42] <gtristan> hmmm typeshed
[13:13:07] <The-Compiler> I suppose it depends whether you want to accept raw string/byte objects
[13:13:09] <gtristan> https://github.com/python/typing/issues/402 <-- did PathLike land in typing then ?
[13:13:33] <The-Compiler> no, but os.PathLike is generic
[13:13:48] <gtristan> I want to annotate a wrapper that has limited access to subprocess.Popen() which says it wants a "path-like" object
[13:14:42] *** Quits: mweckbecker (~matthias@2001:1b60:3:239:2723::1) (Quit: leaving)
[13:15:06] *** Joins: mweckbecker (~matthias@weckbecker.name)
[13:15:23] <The-Compiler> see https://github.com/python/typeshed/blob/master/stdlib/subprocess.pyi#L26-L31 and https://github.com/python/typeshed/blob/master/stdlib/_typeshed/__init__.pyi#L78 then
[13:16:34] *** Joins: Nact (~l@2a02:a03f:c0b0:f600:3253:5994:1b4f:e854)
[13:17:15] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 265 seconds)
[13:19:32] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::4433)
[13:20:51] <gtristan> I see, so typeshed is like an internal python implementation detail
[13:20:52] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[13:21:01] *** Joins: Atque (~Atque@user/atque)
[13:22:59] <gtristan> Ok that's quite helpful thanks The-Compiler :)
[13:23:07] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[13:23:09] <gtristan> a bit of leg work but I'll get it right
[13:24:12] *** Joins: System123 (~System123@net-37-179-171-3.cust.vodafonedsl.it)
[13:26:34] *** Joins: jetchisel (jetchisel@user/jetchisel)
[13:27:06] *** Quits: jetchisel (jetchisel@user/jetchisel) (Read error: Connection reset by peer)
[13:27:18] *** Joins: encukou_ (quassel@nat-pool-brq-t.redhat.com)
[13:28:12] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[13:28:22] *** Joins: vbgunz_ (~vbgunz@35.141.71.47)
[13:28:43] *** Quits: encukou (~quassel@nat-pool-brq-t.redhat.com) (Ping timeout: 252 seconds)
[13:28:53] *** Quits: vbgunz (~vbgunz@35.141.71.47) (Ping timeout: 268 seconds)
[13:29:02] *** Quits: kenoba (~kenoba@user/kenoba) (Ping timeout: 260 seconds)
[13:29:20] *** Quits: System123 (~System123@net-37-179-171-3.cust.vodafonedsl.it) (Ping timeout: 265 seconds)
[13:29:32] *** Joins: kenoba (~kenoba@user/kenoba)
[13:30:25] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[13:31:55] <braxas> hi, I want to annotate some fields in a class with someting like @sensitive, and then have a something like censor(obj) and then have it censor all sensitive fields, is there anything like this that already exists or would I have to write it?
[13:33:12] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 268 seconds)
[13:33:24] *** Joins: cdown (~cdown@194.207.141.245)
[13:33:26] *** Joins: gggp (~textual@111.63.14.118)
[13:34:19] *** Joins: vbgunz (~vbgunz@35.141.71.47)
[13:34:20] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0f7-64.dhcp.inet.fi)
[13:34:52] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[13:35:03] *** Quits: vbgunz_ (~vbgunz@35.141.71.47) (Ping timeout: 268 seconds)
[13:35:08] *** Quits: waxfire (~waxfire@65.119.2.240) (Ping timeout: 265 seconds)
[13:38:27] *** Quits: skali (~skali@46.191.137.79) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[13:39:03] *** Joins: clarkk (~clarkk@host86-164-233-103.range86-164.btcentralplus.com)
[13:39:04] *** Quits: clarkk (~clarkk@host86-164-233-103.range86-164.btcentralplus.com) (Remote host closed the connection)
[13:40:17] *** Joins: mexen (uid495612@user/mexen)
[13:40:18] *** Joins: wyclif (~wyclif@user/wyclif)
[13:41:13] *** Quits: mwt (~macravin@161.38.68.34.bc.googleusercontent.com) (Ping timeout: 268 seconds)
[13:41:55] *** Quits: Jefren (~Jefren@208.104.190.50) (Ping timeout: 252 seconds)
[13:42:01] *** Joins: MattWThomas (~macravin@161.38.68.34.bc.googleusercontent.com)
[13:43:20] <p-i-_> Suppose I have [1,4,5].  How to pass in 2 values and get the other one?  So I pass in 1 and 4, and want to get 5...
[13:43:20] *** Quits: brentaarnold (~brentaarn@24.112.61.90) (Read error: Connection reset by peer)
[13:43:42] <p-i-_> Can it be done without explicitly looping?
[13:43:46] *** Joins: brentaarnold (~brentaarn@32.132.115.46)
[13:43:55] *** Quits: brentaarnold (~brentaarn@32.132.115.46) (Read error: Connection reset by peer)
[13:44:04] *** Joins: rodstewart (~dmartins@188.ip-149-56-97.net)
[13:44:06] <Repiphany> set([1,4,5]) - set([1,4])
[13:44:06] *** Joins: Jefren (~Jefren@70.35.67.183)
[13:44:49] <p-i-_> How to convert the result back to an int?
[13:44:49] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[13:44:52] *** Joins: brentaarnold (~brentaarn@32.132.115.46)
[13:45:21] <Repiphany> a, = set([1,4,5]) - set([1,4])
[13:45:56] <p-i-_> :)
[13:45:56] *** Quits: pycode (~pycode@2001:b07:5d28:551:e8a:72fd:b358:f0b6) (Ping timeout: 268 seconds)
[13:46:04] <nedbat> braxas: that might exist in a third-party library, but nothing built-in
[13:46:33] *** Quits: harovali (~haroldo@r167-62-215-180.dialup.adsl.anteldata.net.uy) (Ping timeout: 268 seconds)
[13:47:02] *** Joins: waxfire (~waxfire@65.119.2.240)
[13:47:11] *** Joins: pycurious (~Adium@user/pycurious)
[13:47:56] *** Joins: Yion (~Yion@pd95caa88.dip0.t-ipconnect.de)
[13:48:31] *** Joins: skali (~skali@46.191.137.79)
[13:48:44] *** Joins: frost (~frost@59.71.242.61)
[13:50:46] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[13:50:53] <braxas> yes I was more asking if someone knows of any specific library that does it
[13:51:05] *** Quits: cdown (~cdown@194.207.141.245) (Ping timeout: 268 seconds)
[13:51:16] *** Quits: encukou_ (quassel@nat-pool-brq-t.redhat.com) (Ping timeout: 252 seconds)
[13:51:40] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 240 seconds)
[13:52:03] <shangxiao> braxas: just fyi annotations in Java work differently to the @ things in python - decorators. they decorator methods, class & functions but not attributes or variables
[13:52:38] <braxas> yes I know, by annotation I meant it in the colloquial sense
[13:53:08] <rendar> braxas, point is, you cannot apply a decorator to a class field (attribute), but only to a class method, right?
[13:54:54] <shangxiao> yeah so if you want to apply some directive to an attribute, it has to be done by other means. Django does this using an inner class called "Meta" where you can say which fields are unique, etc
[13:55:14] <shangxiao> and via meta classes
[13:55:49] *** Quits: togusa (~togusa@user/togusa) (Ping timeout: 252 seconds)
[13:55:52] <shangxiao> but meta classes probably wouldn't be useful in this case
[13:58:06] *** Joins: waxfire2 (~waxfire@65.119.2.240)
[13:58:11] *** Joins: System123 (~System123@net-37-179-171-3.cust.vodafonedsl.it)
[13:58:33] *** Quits: gggp (~textual@111.63.14.118) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[13:58:59] *** Quits: waxfire (~waxfire@65.119.2.240) (Read error: Connection reset by peer)
[13:58:59] *** waxfire2 is now known as waxfire
[13:59:23] *** Joins: togusa (~togusa@user/togusa)
[14:01:04] *** Joins: harovali (~haroldo@r167-62-93-52.dialup.adsl.anteldata.net.uy)
[14:01:29] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:03:15] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[14:03:26] *** Joins: togusaa (~togusa@user/togusa)
[14:04:23] *** Joins: pycurious (~Adium@user/pycurious)
[14:06:04] *** Quits: togusa (~togusa@user/togusa) (Ping timeout: 265 seconds)
[14:06:15] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[14:07:05] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.2)
[14:07:44] <nedbat> braxas: about the decorator limitation: dataclasses and attrs offer a different way to define the attributes, with possibilities for metadata
[14:09:01] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[14:09:25] *** Quits: togusaa (~togusa@user/togusa) (Ping timeout: 260 seconds)
[14:10:44] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[14:11:45] *** Quits: Allegretto (~allegrett@fibhost-66-164-228.fibernet.hu) (Ping timeout: 260 seconds)
[14:11:48] *** Joins: cdown (~cdown@194.207.141.245)
[14:12:06] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[14:12:26] *** Joins: ExeciN (~ExeciN@user/nicexe)
[14:14:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[14:15:56] *** Joins: fikran (~fikran@user/fikran)
[14:16:26] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[14:18:50] *** Quits: ham5urg (~ham5urg@p200300d167414700ae675dfffe1eec6d.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[14:21:21] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[14:21:50] *** Joins: ham5urg (~ham5urg@p200300d167414700ae675dfffe1eec6d.dip0.t-ipconnect.de)
[14:23:38] *** Joins: Allegretto (~allegrett@94-21-223-41.pool.digikabel.hu)
[14:24:16] *** Joins: waxfire5 (~waxfire@65.119.2.240)
[14:24:34] *** Quits: cdown (~cdown@194.207.141.245) (Ping timeout: 260 seconds)
[14:26:26] *** Quits: waxfire (~waxfire@65.119.2.240) (Ping timeout: 260 seconds)
[14:26:27] *** waxfire5 is now known as waxfire
[14:27:02] *** Joins: encukou (quassel@nat-pool-brq-t.redhat.com)
[14:29:19] *** Quits: fdan (~fdan@192.146.154.3) (Quit: Client closed)
[14:29:34] *** Joins: jetchisel (jetchisel@user/jetchisel)
[14:30:40] *** Quits: System123 (~System123@net-37-179-171-3.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[14:33:17] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:37:25] *** Joins: togusa (~togusa@user/togusa)
[14:37:48] *** Quits: p-i-_ (~Ohmu@223.206.145.156) (Remote host closed the connection)
[14:38:24] *** Joins: p-i- (~Ohmu@223.206.145.156)
[14:38:24] *** Quits: Yion (~Yion@pd95caa88.dip0.t-ipconnect.de) (Quit: Client closed)
[14:38:51] *** Joins: Auron (Auron956@user/auron)
[14:40:37] *** Joins: pycurious (~Adium@user/pycurious)
[14:40:50] *** Joins: lethu (~lethu@user/lethu)
[14:41:22] *** Quits: gtristan (~tristan@223.62.21.41) (Ping timeout: 260 seconds)
[14:42:34] *** Joins: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu)
[14:44:50] *** Quits: raxor2k (~raxor2k@78.158.248.203) ()
[14:45:13] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 265 seconds)
[14:45:22] *** Joins: pycode (~pycode@2001:b07:5d28:551:d68c:2f9f:c304:c0d3)
[14:49:22] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[14:50:17] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0f7-64.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:51:06] *** Joins: PJBoy (~PJBoy@user/pjboy)
[14:51:29] *** Joins: wyclif (~wyclif@user/wyclif)
[14:54:09] *** Joins: minip (~minip@user/minip)
[14:54:28] *** Joins: chele (~chele@user/chele)
[14:54:34] *** Joins: computeiro (~Wender@189.37.67.248)
[14:59:22] *** Joins: fdan (~fdan@192.146.154.3)
[14:59:33] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[15:00:20] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0f7-64.dhcp.inet.fi)
[15:00:47] *** Quits: togusa (~togusa@user/togusa) (Quit: Leaving)
[15:03:39] *** Joins: stevieh (~skrodzki@p2e584735.dip0.t-ipconnect.de)
[15:04:46] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[15:06:07] *** Quits: pycode (~pycode@2001:b07:5d28:551:d68c:2f9f:c304:c0d3) (Ping timeout: 252 seconds)
[15:06:18] <zln> if I want a function to only take kwargs, do I define it like: def func(*, kw1=something kw2=...)?
[15:06:45] *** Quits: legola (~legola@46.235.100.27) (Remote host closed the connection)
[15:07:43] <nedbat> zln: yes
[15:08:03] *** Joins: raxor2k (~raxor2k@78.158.248.203)
[15:08:09] <zln> nice thanks.
[15:09:35] <zln> nedbat: what's the pythonic way to overloading functions? I see that the feature is not present, but can I emulate it with kwarg1=None as default for my kwargs and work from there by deciding which kwargs is not None?
[15:09:36] <raxor2k> bjs: i never thought i would say this: but im actually starting to like dicts now
[15:09:37] *** Joins: ravan (~ravan@user/ravan)
[15:09:49] <nedbat> zln: that is the way to do it
[15:09:57] <zln> nedbat: nice, thanks!
[15:10:05] <nedbat> zln: also, consider that you might not want one function to do too many different things
[15:11:01] <zln> nedbat: yeah, I want to fetch some rows from a db, either select kwargs if present or fetchall if kwargs is None
[15:11:10] <zln> that's the querille :)
[15:11:13] *** Joins: pycurious (~Adium@user/pycurious)
[15:12:53] <rendar> zln, `def f(**kwargs): if len(kwargs) == 0: no args else option = kwargs["option"]`
[15:14:08] <zln> rendar: that's nice. So I can leave the name of keywords to the caller?
[15:14:12] <Yhg1s> rendar: how is that better than 'def f(*, option=None)'?
[15:14:22] <Yhg1s> zln: you can, but you usually shouldn't.
[15:14:47] <rendar> Yhg1s, i assumed that zln has a lot of options, so instead of checking all the options are None, he can just check the size of that set in one shot
[15:15:03] <zln> Yhg1s: yeah, it seems less error prone
[15:15:15] <zln> rendar:, it's about 4 keywords
[15:15:35] <rendar> ok
[15:15:46] *** Joins: varaindemian (uid73404@id-73404.ilkley.irccloud.com)
[15:15:50] <zln> thnx for your tip :)
[15:15:56] *** Quits: thiras (~thiras@user/thiras) (Read error: Connection reset by peer)
[15:16:11] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 268 seconds)
[15:16:31] *** Joins: thiras (~thiras@user/thiras)
[15:22:16] *** Joins: dez (uid92154@user/dez)
[15:22:43] *** Quits: Jefren (~Jefren@70.35.67.183) (Ping timeout: 252 seconds)
[15:24:27] *** Joins: Jefren (~Jefren@70.35.66.56)
[15:28:22] <p-i-> Is there any way to get print_exc to not print anything past the first "During handling of the above exception, another exception occurred:"?
[15:28:40] <p-i-> Or can I get the traceback as a string and split it on that text?
[15:29:37] <jinsun> `traceback.format_exc` will give you a sting
[15:30:00] <jinsun> s/sting/string
[15:31:10] * iflema_ pew
[15:31:38] *** Quits: Meteorhead (~Meteorhea@165.225.205.32) (Quit: Client closed)
[15:31:55] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[15:32:34] *** Joins: djhankb (~djhankb@208.113.164.68)
[15:33:24] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[15:33:31] *** Quits: minip (~minip@user/minip) (Remote host closed the connection)
[15:34:34] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 260 seconds)
[15:35:44] *** Parts: Everything (~Everythin@37.115.210.35) ()
[15:38:34] *** Quits: nips_ (~nips@abv84.internetdsl.tpnet.pl) (Remote host closed the connection)
[15:41:10] *** Joins: lesshaste (~lesshaste@82-69-126-43.dsl.in-addr.zen.co.uk)
[15:41:25] <lesshaste> what do the ~s mean in the list [[11, 47, 1361, 653060850966553, 197603333282342692360321]~, [1, 1, 1, 1, 1]~] ?
[15:42:25] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[15:42:47] <nedbat> lesshaste: that's not python syntax. where did it come from?
[15:42:58] <lesshaste> nedbat,  in jupyter notebook.
[15:43:18] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[15:43:33] <lesshaste> num = 3456781
[15:43:33] <lesshaste> list(cypari.pari('factorint({})'.format(num)))[0]
[15:43:38] <lesshaste> [3456781]~
[15:44:44] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0f7-64.dhcp.inet.fi) (Read error: Connection reset by peer)
[15:44:53] *** Quits: Mija (~Mija@user/mija) (Quit: Mija)
[15:47:00] <nedbat> lesshaste: sorry, i don't know
[15:47:08] *** Joins: marduk8 (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net)
[15:47:36] *** Quits: fdan (~fdan@192.146.154.3) (Quit: Client closed)
[15:48:02] *** Quits: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 268 seconds)
[15:48:02] *** marduk8 is now known as marduk
[15:50:00] <supakeen> I haven't seen that before either, likely something specific to Jupyter.
[15:50:44] *** Joins: System123 (~System123@net-37-179-171-3.cust.vodafonedsl.it)
[15:52:15] <wib_jonas> but what language is it in? is it Sagemath? I think Jupyter can handle multiple language interpreters
[15:52:17] *** skali is now known as skali_
[15:52:28] *** skali_ is now known as skali
[15:52:49] <wib_jonas> pari/gp would be my guess
[15:53:38] *** Joins: marduk9 (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net)
[15:53:48] *** Quits: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 268 seconds)
[15:53:48] *** marduk9 is now known as marduk
[15:54:10] *** Quits: Nact (~l@2a02:a03f:c0b0:f600:3253:5994:1b4f:e854) (Ping timeout: 260 seconds)
[15:54:45] *** Joins: Nact (~l@109.130.159.80)
[15:56:54] <wib_jonas> lesshaste: if that is in Pari/GP language, then the postfix tilde symbols mean matrix transpose I believe, but you'd better ask on a channel about that language
[15:57:21] *** Quits: ham5urg (~ham5urg@p200300d167414700ae675dfffe1eec6d.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:57:54] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0f7-64.dhcp.inet.fi)
[15:58:28] *** Joins: pycurious (~Adium@user/pycurious)
[15:59:07] *** Joins: spuz (~spuz@213.129.88.97)
[16:00:01] *** Quits: Nact (~l@109.130.159.80) (Ping timeout: 252 seconds)
[16:00:54] *** Joins: Nact (~l@2a02:a03f:c0b0:f600:3253:5994:1b4f:e854)
[16:02:47] *** Quits: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net) (Quit: The Lounge - https://thelounge.chat)
[16:03:27] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 268 seconds)
[16:03:52] *** Quits: skali (~skali@46.191.137.79) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[16:06:31] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[16:07:15] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fafc-123.dhcp.inet.fi)
[16:07:39] *** Joins: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net)
[16:10:26] *** Joins: pycode (~pycode@2001:b07:5d28:551:2b33:80d6:202e:d4db)
[16:13:08] *** Joins: y1n (~y1n@84-115-64-157.wifi.dynamic.surfer.at)
[16:14:13] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[16:15:32] *** Joins: legola (~legola@46.235.100.27)
[16:21:05] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Lost terminal)
[16:22:56] *** Joins: Pickchea (~private@user/pickchea)
[16:23:07] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[16:24:43] *** Quits: raxor2k (~raxor2k@78.158.248.203) (Ping timeout: 252 seconds)
[16:25:18] *** Joins: fikran (~fikran@user/fikran)
[16:26:29] *** Quits: System123 (~System123@net-37-179-171-3.cust.vodafonedsl.it) (Ping timeout: 268 seconds)
[16:27:28] *** Joins: phonemic (~phonemic@45.131.192.173)
[16:29:08] *** Joins: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net)
[16:30:28] *** Joins: sn1tch3r (~sn1tch3r@user/sn1tch3r)
[16:30:34] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Remote host closed the connection)
[16:31:46] *** Joins: pycurious (~Adium@user/pycurious)
[16:32:00] *** Joins: zzzz__1234 (~zzz_12345@1.129.104.215)
[16:32:24] *** Quits: spuz (~spuz@213.129.88.97) (Ping timeout: 256 seconds)
[16:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2.1)
[16:36:21] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 268 seconds)
[16:36:21] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Ping timeout: 268 seconds)
[16:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:39:52] *** Joins: cuz (~user@2601:182:cc02:8b0:c414:97d1:1f4d:202f)
[16:41:35] *** Joins: togusa (~togusa@user/togusa)
[16:45:09] *** Joins: pycurious (~Adium@user/pycurious)
[16:45:30] *** Joins: dhill (~dhill@modemcable103.217-80-70.mc.videotron.ca)
[16:46:39] *** Joins: zer0bitz_ (~zer0bitz@dsl-hkibng31-54fafc-123.dhcp.inet.fi)
[16:48:57] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fafc-123.dhcp.inet.fi) (Ping timeout: 265 seconds)
[16:50:12] *** Joins: zamba (~marius@5.226.162.54)
[16:50:38] *** Joins: rsx (~dummy@ppp-188-174-147-215.dynamic.mnet-online.de)
[16:51:08] <zamba> i've written a small client with anyio and trio.. but the problem is that it's slow.. i'm implementing a protocol that should send a packet to "open" for a stream of data to flow.. then for each received packet i need to parse the header and the decapsulate the data..
[16:51:21] <zamba> i'm only able to do this at around 50 Mbps line speed
[16:51:38] <zamba> and i believe it's stuff like this that slows it down: header = await buffered.receive_exactly(2)
[16:52:11] <zamba> tmdata_header = await buffered.receive_exactly(22) ; frame_size = int.from_bytes(tmdata_header[10:12], "big") ; data = await buffered.receive_exactly(frame_size)
[16:52:28] <zamba> it makes for neat code and it's easy to have control over what's read, but it's just too slow
[16:52:49] *** Quits: zzzz__1234 (~zzz_12345@1.129.104.215) (Quit: Leaving)
[16:53:34] <zamba> "neat" by my standards, that is.. it's easy to see how the protocol behaves
[16:55:50] <zamba> i know the bottleneck is not the network.. as i'm able to scp from the same host at around 2.5 Gbps
[16:56:02] *** Joins: eightysix (~eightysix@2600:1700:bf32:3410:e948:f255:7659:c296)
[16:56:12] <zamba> disk at receiving end is not the issue either, as i'm writing to /dev/null when benchmarking this
[16:56:34] <zamba> i'm going to attempt with pypy now.. but i feel that's kind of like cheating
[16:57:32] <pycode> hello, can i use a decorator that way? https://bpa.st/TYAA i basically would like to add some detailds about the "chart" type to plot that line i thought about a decorator because those "extra" attributes are fixed
[16:57:41] <pycode> does it make any sense to you?
[16:59:35] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 265 seconds)
[16:59:36] <u4t> it is syntactically possible to do that, yes
[16:59:59] <u4t> can probably be neatened up a bit though
[17:00:37] <u4t> if your decorator function is called line(), then it doesn't need to know that the chart type=="line"
[17:00:51] <u4t> as a parameter
[17:01:44] *** Joins: zeden (~zeden@user/zeden)
[17:03:07] <pycode> u4t, you are right maybe i can call that decorator in a different way
[17:03:11] <pycode> but ok lets suppose i hae
[17:03:13] <pycode> @line
[17:03:16] <pycode> @histogram
[17:03:16] <pycode> etc
[17:03:16] <zamba> pypy actually has worse performance
[17:03:27] <pycode> then i need to hold name,descriptions too
[17:04:10] <pycode> so can an decorator encapsulate the logic of another instead of repeating the code?
[17:04:28] <pycode> i admit the "encapsulate" term is may not correct here in that context :D
[17:05:13] <grawity> a decorator can certainly call another decorator and just return its result... not sure offhand how to do it with decorators which take parameters, though, but it should be very possible
[17:05:59] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[17:06:11] *** Joins: califax (~califax@user/califx)
[17:06:26] *** Joins: Socra (~Socra@206.217.216.27)
[17:06:40] <u4t> yah, you can have a chart() function that does shared stuff, which your decorators call
[17:07:00] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[17:07:05] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[17:07:20] <u4t> or draw_axes() or whatever
[17:07:40] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 240 seconds)
[17:07:53] *** Quits: phonemic (~phonemic@45.131.192.173) (Quit: WeeChat 3.2)
[17:08:16] *** Joins: brabrax (~brabrax@user/brabrax)
[17:08:22] *** Quits: togusa (~togusa@user/togusa) (Ping timeout: 245 seconds)
[17:09:27] <pycode> ok
[17:09:30] <pycode> thanks
[17:10:34] *** Joins: netrunner (~netrunner@user/netrunner)
[17:10:45] *** Joins: wender (~Wender@189.37.67.248)
[17:11:16] <u4t> main purpose of decorators is to pre-process or post-process the data of the function that gets passed in
[17:11:35] <pycode> u4t, wait.... "post-process" what do you exactly mean?
[17:11:40] *** Quits: y1n (~y1n@84-115-64-157.wifi.dynamic.surfer.at) (Ping timeout: 265 seconds)
[17:11:49] <pycode> i thought that decorators were used to PRE-Process a func/method/class
[17:12:01] <pycode> python call them before init and other stuff
[17:12:09] <pycode> what do you mean with POST-process?
[17:12:28] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[17:13:10] *** Quits: computeiro (~Wender@189.37.67.248) (Ping timeout: 240 seconds)
[17:15:41] *** Quits: elkclone (~elkclone@user/elkclone) (Quit: Leaving)
[17:15:57] <jinsun> python just replaces the function/method/class with the decorated version
[17:16:02] <shangxiao> I know that it's only a few lines of code... but is there something already in stdlib that does this: a decorator that assigns the decorator's kwargs to the wrapping function's __dict__?
[17:16:03] *** Joins: computeiro (~Wender@189.37.67.248)
[17:16:46] <shangxiao> wrapped function's __dict__ * i mean
[17:16:56] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[17:17:02] <u4t> https://bpa.st/Q2UQ silly example
[17:17:40] <shangxiao> u4t: don't you mean return convert on line 4?
[17:18:04] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[17:18:07] <u4t> yes
[17:18:10] <shangxiao> and don't forget the functools.wraps ;)
[17:18:17] *** Quits: wender (~Wender@189.37.67.248) (Ping timeout: 268 seconds)
[17:18:56] <u4t> yah, but i figured pycode might be learning decorators and wanted to provide a familiar example
[17:19:16] <u4t> functools.wraps is nice stuffs
[17:19:18] <pycode> yes yes ok it makes sense
[17:19:19] <pycode> thanks
[17:20:45] *** Joins: wender (~Wender@189.37.67.248)
[17:21:06] *** Joins: Meteorhead (~Meteorhea@165.225.205.32)
[17:21:08] <shangxiao> Chapter 1 of my "Stupid Django Tricks": https://github.com/shangxiao/stupid-django-tricks/tree/master/lookup_expr  ... more to come! xD
[17:21:25] <shangxiao> feedback most welcome
[17:21:26] <u4t> stupid django tricks are the best kind of django tricks
[17:22:11] <shangxiao> heh
[17:22:47] *** Joins: harpia (~harpia@58.148.205.168.dynamic.vibefibra.com.br)
[17:23:34] *** Quits: computeiro (~Wender@189.37.67.248) (Ping timeout: 252 seconds)
[17:24:15] *** Quits: vorap (~kimkarl@90.139.101.98) (Quit: WeeChat 3.2)
[17:24:42] *** Joins: y1n (~y1n@84-115-64-242.wifi.dynamic.surfer.at)
[17:24:57] *** Joins: Macuser (~Macuser@216.30.159.201)
[17:25:25] *** Joins: Harlin (~DonQixote@2603:300b:663:e800:ed29:6f25:3c3f:341e)
[17:26:02] *** Joins: computeiro (~Wender@189.37.67.248)
[17:26:46] *** Joins: raxor2k (~raxor2k@78.158.248.203)
[17:28:01] *** Quits: wender (~Wender@189.37.67.248) (Ping timeout: 252 seconds)
[17:29:03] <raxor2k> someone can tell what the heck im doing wrong here? im trying to see if exists in dict, and take that info and update existing: https://bpa.st/OKHA
[17:29:44] *** Joins: Wuniu (~Thunderbi@user/wuniu)
[17:29:45] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[17:29:53] <bjs> raxor2k: "i.update[exercises_dict[the_exercise_id]]" this doesn't look right,  those square brackets aren't method call syntax
[17:29:56] <bjs> are you getting a TypeError?
[17:31:08] <raxor2k> bjs: "TypeError: 'builtin_function_or_method' object is not subscriptable"
[17:31:30] <bjs> raxor2k: yeah, maybe you meant to use "(" and ")" parens to call the method
[17:31:32] <bjs> not the square [ ] ones
[17:31:39] <zamba> i need to perform .read() operations over buffers/variables.. basically i have read in 64k of data into a variable called data.. i now want to move over this buffer in memory by using operations like .read().. so that i have a pointer in the buffer..
[17:31:51] <zamba> instead of using slices like [0:2] to read the first two bytes
[17:31:56] <zamba> how can i do that in python?
[17:31:56] <grawity> zamba: io.BytesIO(buf)
[17:32:06] <zamba> grawity: is that efficient?
[17:32:07] <grawity> unless it's a str, then StringIO
[17:32:14] <raxor2k> bjs: oh god.. of course
[17:32:16] <raxor2k> thanks
[17:32:51] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[17:32:54] <grawity> zamba: I haven't measured â€“ but I suppose if you want efficiency, then I'll make a wild guess that memoryview stuff (and slices thereof) is probably going to be *more* efficient than .read()
[17:33:06] <bjs> zamba: why do you want to avoid using slices?  is it about efficiency?
[17:34:01] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[17:34:21] *** Quits: legola (~legola@46.235.100.27) (Remote host closed the connection)
[17:34:23] <raxor2k> bjs: i hate to admit this, but i see now how useful dicts are
[17:34:49] <raxor2k> but this a good attribute i have, i can admit when im wrong
[17:35:05] <u4t> about time (:
[17:35:19] *** Joins: fdan (~fdan@192.146.154.3)
[17:35:42] <u4t> dicts are good stuffs
[17:35:45] *** Joins: wender (~Wender@189.37.67.248)
[17:35:50] *** Quits: acidsys (~LSD@2.lsd.systems) (Excess Flood)
[17:35:51] <shangxiao> what didn't you like about dicts?
[17:35:59] <zamba> bjs: well.. i have an outer loop that reads in 64k from the network.. and then i want to perform slicing "inside" this data
[17:36:35] <zamba> doing the "slicing" directly off the network with stuff like .read_exacly (from anyio) was terribly slow
[17:36:35] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0f7-64.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:37:34] <bjs> zamba: why not load a 64k bytes chunk and then just slice those bytes
[17:38:36] <zamba> bjs: because inside the 64k bytes chunk there will be several "packets"..
[17:38:38] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[17:38:44] *** Quits: computeiro (~Wender@189.37.67.248) (Ping timeout: 265 seconds)
[17:38:59] <u4t> and?
[17:39:30] <bjs> zamba: okay?  that doesn't really answer the question
[17:40:01] <zamba> bjs: because [0:2] quickly becomes [23424:23426]
[17:40:10] <bjs> zamba: okay?
[17:40:22] <bjs> zamba: I'm still not seeing the point you're making
[17:40:44] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0f7-64.dhcp.inet.fi)
[17:40:56] <u4t> zamba: a bytes() or str() is just an array, and a slice of it is just a couple of references
[17:41:11] *** Quits: shangxiao (~davids@124.187.193.187) (Quit: WeeChat 3.2.1)
[17:41:13] *** Joins: sbanwart (~sbanwart@cpe-174-100-90-239.neo.res.rr.com)
[17:41:17] <zamba> u4t: i need to maintain where in the "buffere" i am
[17:41:17] *** Joins: Yion (~Yion@pd95caa88.dip0.t-ipconnect.de)
[17:41:18] <u4t> though i can see the logic of using BytesIO if you don't want to create a bunch of slice objects
[17:41:42] *** Joins: jetchisel (jetchisel@user/jetchisel)
[17:41:48] *** Joins: togusa (~togusa@user/togusa)
[17:41:49] <bjs> zamba: okay? so have an index. `i = 23424;  print(the_bytes[i:i+2])`
[17:41:53] <zamba> and i need to constantly perform calculations.. so if i want to read 6 bytes from position 23424, then i need to add 6 to 23424
[17:42:05] <zamba> and then constantly update i
[17:42:18] <bjs> zamba: yeah
[17:42:41] *** Quits: hendursa2 (~weechat@user/hendursaga) (Quit: hendursa2)
[17:42:57] <u4t> was := syntax introduced in 3.9 or 3.10?
[17:43:01] <zamba> exactly
[17:43:09] <bjs> zamba: ... exactly what?
[17:43:11] <zamba> that's why i want to just read off the number of bytes i need
[17:43:21] <zamba> .read(6).. then i read 6 bytes from where i left off last
[17:43:25] <bjs> zamba: are you just worried about doing the update wrong?
[17:43:28] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:43:37] <bjs> zamba: okay well BytesIO can do that, it just does what you describe underneath
[17:43:41] <bjs> it has an index and gives you slices
[17:44:01] <u4t> bjs: i think he's concerned about how many integer operations get done
[17:44:04] *** Quits: zer0bitz_ (~zer0bitz@dsl-hkibng31-54fafc-123.dhcp.inet.fi) (Ping timeout: 252 seconds)
[17:44:09] <bjs> u4t: I have no idea, that's why I'm asking them :)
[17:45:07] *** Joins: otisolsen70 (~otisolsen@212.97.248.141)
[17:45:57] *** Joins: computeiro (~Wender@189.37.67.248)
[17:47:46] *** Quits: wender (~Wender@189.37.67.248) (Ping timeout: 252 seconds)
[17:51:20] *** Joins: Cata (~Cata@user/cata)
[17:51:25] <jinsun> u4t: walrus was 3.8
[17:52:14] *** Joins: daoudr_ (~daoudr@178.197.217.245)
[17:52:20] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[17:52:52] *** Quits: Cata (~Cata@user/cata) (Remote host closed the connection)
[17:54:42] *** Joins: goepsilongo (~goepsilon@2603-7000-ab00-62ed-217f-c4e6-d1e6-03f0.res6.spectrum.com)
[17:54:48] *** Joins: paravida (~myChateau@user/paravida)
[17:54:50] *** Quits: Wuniu (~Thunderbi@user/wuniu) (Remote host closed the connection)
[17:55:09] *** Joins: Wuniu (~Thunderbi@user/wuniu)
[17:55:34] *** Quits: daoudr_ (~daoudr@178.197.217.245) (Client Quit)
[17:55:55] *** Joins: daoudr_ (~daoudr@178.197.217.245)
[17:57:21] *** Quits: Tuju (~tuju@214-204-50-195.sta.estpak.ee) (Remote host closed the connection)
[17:59:44] *** shlomif is now known as rindolf
[18:01:19] *** Joins: System123 (~System123@ec2-52-61-197-79.us-gov-west-1.compute.amazonaws.com)
[18:01:27] *** Joins: odoood (~odoood@2601:c8:c003:a550::1)
[18:01:41] *** Joins: Diemuzi (~Diemuzi@ip68-106-203-17.pn.at.cox.net)
[18:02:36] *** Quits: thiras (~thiras@user/thiras) (Read error: Connection reset by peer)
[18:04:13] *** Joins: Wubull (~Thunderbi@user/wuniu)
[18:04:21] *** Quits: Wuniu (~Thunderbi@user/wuniu) (Ping timeout: 265 seconds)
[18:04:21] *** Wubull is now known as Wuniu
[18:04:37] <zamba> using the socket.recv() is not considered "safe"?
[18:04:47] *** Joins: Dantali0n (~Dantali0n@2a10:3781:15ed::1f8e)
[18:05:46] *** Quits: ssbr (~ssbr@python/site-packages/ssbr) (Ping timeout: 260 seconds)
[18:06:35] *** Quits: avu (~jan@user/avu) (Remote host closed the connection)
[18:06:52] *** Joins: avu (~jan@user/avu)
[18:07:59] <supakeen> Safe?
[18:08:33] *** Joins: kib (~kib@user/kib)
[18:08:39] <supakeen> You'd be better off using higher level abstractions over sockets in general (and higher level protocols) but safe, sure.
[18:09:01] *** Joins: d00gy (~d00gy@user/d00gy)
[18:09:24] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0f7-64.dhcp.inet.fi) (Quit: Leaving)
[18:09:37] *** Joins: akinode (~akinode@mpie-gw2.mpie-duesseldorf.mpg.de)
[18:10:07] <akinode> hello, has anyone here ever worked with gitlab-runner and knows how to obtain a "runner token" which seems to be different from a "registration token"?
[18:11:28] *** Quits: y1n (~y1n@84-115-64-242.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[18:11:32] <zamba> better off why?
[18:12:39] <deniska> zamba: there're a lot of details you have to handle when using sockets directly
[18:13:22] <deniska> zamba: most notably framing and otherwise keeping the protocol you're dealing with
[18:13:56] <deniska> and if you also want to talk to multiple things at the same time, it gets really hairy really quickly
[18:14:01] *** Quits: Wuniu (~Thunderbi@user/wuniu) (Ping timeout: 265 seconds)
[18:14:08] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[18:14:57] <zamba> deniska: well, if i just want to read off x number of bytes at a time, then just using socket.recv() should be fine?
[18:15:04] *** Joins: Wuniu (~Thunderbi@user/wuniu)
[18:16:02] *** Quits: Dantali0n (~Dantali0n@2a10:3781:15ed::1f8e) (Ping timeout: 260 seconds)
[18:16:04] *** Joins: slav0nic (slav0nic@python.su)
[18:17:00] *** Joins: ahmed_328is (~AHMED@37.165.29.123)
[18:17:56] *** Quits: togusa (~togusa@user/togusa) (Quit: Leaving)
[18:19:47] *** Quits: infobob (~infobob@python/bot/infobob) (Ping timeout: 252 seconds)
[18:21:02] <ahmed_328is> hello i need help to replace values in a sudset of pd.DataFrame
[18:21:30] *** Joins: stealth_ (~stealth_@216-197-160-97.regn.static.sasknet.sk.ca)
[18:21:55] *** Quits: Wuniu (~Thunderbi@user/wuniu) (Ping timeout: 252 seconds)
[18:22:46] *** Joins: Wuniu (~Thunderbi@user/wuniu)
[18:22:50] <deniska> zamba: it's not x bytes, it's up to x bytes
[18:23:23] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[18:23:28] *** Quits: fdan (~fdan@192.146.154.3) (Ping timeout: 256 seconds)
[18:23:46] *** Quits: freeworld (~vit@chello085216193138.chello.sk) (Quit: Konversation terminated!)
[18:23:54] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[18:24:19] <zamba> deniska: yeah, that's actually true
[18:25:07] *** Joins: y1n (~y1n@84-115-64-219.wifi.dynamic.surfer.at)
[18:25:47] <deniska> zamba: just checking that you're aware that one .send() doesn't correspond to one .recv(), common mistake among people starting doing things with sockets
[18:25:52] *** Joins: freeworld (~vit@chello085216193138.chello.sk)
[18:26:28] <deniska> especially because it typically works that way by accident when on loopback or lan :)
[18:28:17] *** Joins: magla (~gelignite@55d458e1.access.ecotel.net)
[18:29:32] <bookworm> ahmed_328is: you need to be more specific than that
[18:29:43] *** Quits: azidhaka (~azidhaka@user/azidhaka) (Quit: azidhaka)
[18:31:31] *** Joins: ssbr (~ssbr@python/site-packages/ssbr)
[18:31:55] *** Quits: manti7 (~manti7@176.10.104.94) (Ping timeout: 252 seconds)
[18:32:39] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[18:32:54] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[18:33:52] *** Joins: manti7 (~manti7@176.10.104.94)
[18:34:08] *** Quits: System123 (~System123@ec2-52-61-197-79.us-gov-west-1.compute.amazonaws.com) (Ping timeout: 268 seconds)
[18:34:21] <zamba> deniska: what do you mean by that?
[18:34:33] *** Joins: fikran (~fikran@user/fikran)
[18:36:39] *** Quits: dvx (~dvx@185.63.97.64) (Remote host closed the connection)
[18:37:19] <zamba> deniska: in my code i actually just have one .send in the beginning to tell the server that i want data, then i just have .recv() in my loops
[18:38:14] <deniska> zamba: Sure, I mean if you do send('aaa'), send('bbb'), send('ccc') on one end, by calling recv() on the other end you may get something like 'aa', 'abb', 'bccc'
[18:39:01] <zamba> yeah
[18:39:05] <deniska> zamba: if you are only implementing the client side for a known protocol, sure, it's simpler to reason about
[18:39:39] <deniska> but even then we've seen some not so great irc bots all stemming from a popular easy to google template
[18:41:05] *** Quits: sgn (~sgn@user/sgn) (Ping timeout: 265 seconds)
[18:41:17] *** Joins: Penagwin (~Penagwin@207.148.13.191)
[18:41:46] *** Quits: Wuniu (~Thunderbi@user/wuniu) (Quit: I'm tired, have a good time!)
[18:41:57] *** Joins: sgn (~sgn@user/sgn)
[18:42:14] <Penagwin> Hello, I'm looking to keep a persistent pool of TCP connections open to a server, and I don't know how to go about this, I'm using django and gunicorn
[18:43:39] <stealth_> Penagwin, normally its done through "keep-alive"
[18:44:06] <Penagwin> stealth_ I'm not sure what you mean, as far as I can tell the state is being nuked between worker requests
[18:44:09] <foo> Is it safe to assume not every python project needs to be designed as if it was packagable. Or would you say, as a general rule of thumb, it's best to always design a package with the structure as if it was a standalone packagable app?
[18:44:24] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[18:44:48] <grym> foo: every time i write python that either has a non-stdlib dependency or consists of more than one file, i write it to be a pip installable package
[18:44:55] <grym> foo: that's 99% of the time
[18:45:08] <stealth_> Penagwin, state?
[18:45:24] <Yhg1s> foo: it's always best to design it as a sensible package.
[18:45:26] <Penagwin> stealth_ they're gunicorn workers
[18:45:30] <foo> grym: Thanks. I generally haven't done this. Everything still works, but that may not be the best practice. Since most of my stuff isn't standalone installable.
[18:45:33] <foo> Yhg1s: thank you, makes sense.
[18:45:33] <grym> foo: special cases like "i'm writing a blender plug-in" or other niche-ish cases may have different norms, but otherwise... package everything every time
[18:45:36] *** Joins: jetchisel (jetchisel@user/jetchisel)
[18:45:51] *** Quits: INeedAHandle (~INeedAHan@192.111.134.213) (Ping timeout: 268 seconds)
[18:45:56] <foo> grym: thank you, I'm sold. I see the value.
[18:45:57] <deniska> foo: I guess "do as I say, not as I do"
[18:46:05] <Penagwin> stealth_ as far as I can tell my variable no longer exists with no requests which I beleive is intentional
[18:46:08] <foo> grym: ... actually, what is the value? I have a hunch.
[18:46:13] <Penagwin> new requests*
[18:46:38] <grym> foo: imports don't make you insane, and your readme.md's install instructions are `python -m venv somevenv; somevenv/bin/pip install mypackage`
[18:46:40] *** Quits: ahmed_328is (~AHMED@37.165.29.123) (Ping timeout: 240 seconds)
[18:46:50] <stealth_> Penagwin, maybe you are having session issues?
[18:47:00] <grym> instead of lots of fussing around
[18:47:12] <foo> grym: so are you always working in pip install -e . ?
[18:47:12] <deniska> foo: also tools like linters, type checkers, compilers may expect something more resembling a package than not
[18:47:13] <Penagwin> stealth_ this has nothing to do with sessions
[18:47:17] <grym> foo: for dev, yes.
[18:47:19] <foo> deniska: great point!
[18:47:21] <Penagwin> you cannot store a tcp session in a user session
[18:47:31] <Penagwin> unless you meant tcp session
[18:47:41] <grym> foo: i have one venv per project, my package is installed with -e, all my deps aren't
[18:47:41] <stealth_> Penagwin, you said variable!
[18:47:49] <foo> deniska / grym / Yhg1s - as always, grateful for your feedback. I was late to the install package format... very late. But I see the value and do want to be better at this.
[18:47:49] <grym> if it goes kapow, i delete the venv and remake it
[18:47:54] <Penagwin> I have to store the tcp session somewhere
[18:48:04] <Penagwin> so a variable?
[18:48:28] <stealth_> Penagwin, you mean like socket client fd?
[18:48:33] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[18:48:36] <deniska> foo: I'm often actually lazy to do things properly, but I guess that's just me not really being used to writing setup.py
[18:48:40] <Penagwin> Yeah it's a raw socket
[18:48:42] <deniska> or whatever they call it nowadays
[18:48:45] <foo> grym: one issue I have, is figuring out main imports after I already have a large project in dev. I can grep my code for imports and sort by uniques and stuff to pull out the main packages... but is there any other better way?
[18:49:14] <grym> foo: pipdeptree may help
[18:49:14] *** Quits: ravan (~ravan@user/ravan) (Read error: Connection reset by peer)
[18:49:17] <stealth_> Penagwin, ok, just read up on keepalive
[18:49:19] <foo> deniska: Ha. Yeah, I've never done that... never needed to. But perhaps this is a bad habit from PHP land.
[18:49:25] <foo> grym: oh! Thank you. Will give it a shot
[18:49:33] *** Joins: ravan (~ravan@user/ravan)
[18:49:38] <grym> foo: pip list gives you a ... list.  pipdeptree gives you a tree!
[18:49:38] <gordonjcp> yeah pipdeptree is good
[18:49:40] <grym> pick the roots
[18:49:50] <Penagwin> stealth_ Okay thanks!
[18:49:57] <gordonjcp> pipdeptree answers lots of "why TF is it pulling in ...?" questions
[18:50:00] <grym> ^
[18:50:21] <foo> grym: huh, I've never used pip list, only pip freeze.
[18:50:31] <gordonjcp> "YOU'RE A GRAPHICS LIBRARY YOU DON'T NEED FORTRAN BINDINGS YOU STUPID <fine old Gaelic words>"
[18:50:31] <foo> gordonjcp: YES. I've been wanting this for a while.
[18:50:45] <foo> gordonjcp: Tell me how you really feel, keep going. This is healthy for you.
[18:50:53] <kib> lol
[18:51:04] <kib> welcome to python therapy online
[18:51:20] <deniska> fortran is the best way to do linear algebra which is graphics libraries are often full of :)
[18:51:30] *** Quits: cuz (~user@2601:182:cc02:8b0:c414:97d1:1f4d:202f) (Ping timeout: 260 seconds)
[18:51:37] <gordonjcp> kib: at least we're not ruby
[18:51:39] <gordonjcp> deniska: true
[18:51:41] <grym> gordonjcp: oh yes i DO! >:)
[18:51:43] <gordonjcp> deniska: also signal processing
[18:51:57] <grym> those ffts won't convolve themselves
[18:52:07] <grym> blas is your ever-present friend and lineage to the ages
[18:52:15] <gordonjcp> not so very long ago there was good money to be made in FORTRANning and COBOLling
[18:52:20] * foo has viseral response to his Perl days in the 90s
[18:52:20] <gordonjcp> very good money
[18:52:21] <grym> gordonjcp: still is
[18:52:23] <gordonjcp> ye
[18:52:26] *** Quits: odoood (~odoood@2601:c8:c003:a550::1) (Ping timeout: 260 seconds)
[18:52:27] <kib> "When the C in the club ma, Drop it like it's hot Drop it like it's hot"
[18:52:31] <kib> ;D
[18:52:36] <gordonjcp> grym: I still occasionally get asked to write Z80 assembler
[18:52:57] <grym> gordonjcp: NASA had a cash prize "please speed up these fortran inner loops" competition a few years ago; they had to cancel it because they had 3 judges and 1600 submissions in the first week
[18:53:08] <grym> "we thought we'd get like, 20"
[18:53:13] *** Joins: thiras (~thiras@user/thiras)
[18:53:18] <gordonjcp> grym: it's a nerdy challenge
[18:53:20] *** Joins: frostschutz (~frostschu@2a01:c22:cc3d:ca00:7571:4ba7:9374:a03e)
[18:53:23] <gordonjcp> who wouldn't want to have a shot?
[18:53:24] <grym> with a deep talent pool
[18:53:30] <grym> (which is not what they expected)
[18:53:39] *** Quits: sgn (~sgn@user/sgn) (Ping timeout: 268 seconds)
[18:54:41] *** Quits: Nact (~l@2a02:a03f:c0b0:f600:3253:5994:1b4f:e854) (Quit: Konversation terminated!)
[18:55:14] *** Joins: sgn (~sgn@user/sgn)
[18:55:25] *** Quits: carl-- (~carl-@185.103.188.130) (Ping timeout: 252 seconds)
[18:55:51] *** Joins: qlixed (~qlixed@152.170.36.244)
[18:57:26] *** Quits: Yion (~Yion@pd95caa88.dip0.t-ipconnect.de) (Quit: Client closed)
[18:57:50] *** Quits: bn_work (uid268505@id-268505.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[18:57:53] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[18:59:31] *** Quits: raxor2k (~raxor2k@78.158.248.203) ()
[19:00:25] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 252 seconds)
[19:00:45] *** Joins: wender (~Wender@189.37.67.248)
[19:02:42] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 260 seconds)
[19:02:50] *** Joins: ssbr_ (~ssbr@python/site-packages/ssbr)
[19:03:31] *** Quits: computeiro (~Wender@189.37.67.248) (Ping timeout: 268 seconds)
[19:04:11] *** Joins: cuz (~user@38.140.58.234)
[19:05:19] *** Quits: ssbr (~ssbr@python/site-packages/ssbr) (Ping timeout: 252 seconds)
[19:06:21] *** Joins: computeiro (~Wender@189.37.67.248)
[19:06:21] *** Joins: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com)
[19:06:54] *** Joins: mukul (~mukul@c-24-6-109-135.hsd1.ca.comcast.net)
[19:07:32] *** Joins: aidanhasaknife (~aidanhasa@76.77.117.20)
[19:07:37] *** Joins: cul8r (~cul8r@76.113.95.199)
[19:07:40] *** Quits: wender (~Wender@189.37.67.248) (Ping timeout: 240 seconds)
[19:07:54] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[19:08:02] *** Quits: akinode (~akinode@mpie-gw2.mpie-duesseldorf.mpg.de) (Quit: Client closed)
[19:08:03] *** Quits: goepsilongo (~goepsilon@2603-7000-ab00-62ed-217f-c4e6-d1e6-03f0.res6.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[19:08:30] *** Quits: jess (~jess@libera/staff/jess) ()
[19:08:47] *** Quits: mukul (~mukul@c-24-6-109-135.hsd1.ca.comcast.net) (Client Quit)
[19:08:57] *** Joins: jetchisel (jetchisel@user/jetchisel)
[19:10:21] *** Joins: mike18 (~geri@216.200.232.252)
[19:10:38] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[19:10:52] <mike18> hi how can change the code for an array of all_data ? https://ideone.com/HLo7n7
[19:11:31] *** Quits: y1n (~y1n@84-115-64-219.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[19:11:54] *** Joins: wyclif (~wyclif@user/wyclif)
[19:12:27] <mike18> i know i can add a second loop
[19:12:36] <mike18> but that code looks a bit strange than
[19:15:57] <space-ghost> anyone can help pls? https://bpa.st/ZA7Q
[19:16:28] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[19:16:43] <space-ghost> how to scrape a web page and then get the value of the width of a div
[19:18:45] <space-ghost> my code returns a blank but thats because its the value which is indeed blank
[19:19:00] <space-ghost> https://bpa.st/3PNQ
[19:19:58] <rjwiii> space-ghost: Have you tried Beautiful Soup?
[19:20:15] <space-ghost> well i could try all the libraries but i decided to start with this one
[19:20:20] <space-ghost> :-S
[19:20:25] <space-ghost> do you know how to do that in BS?
[19:21:54] <rjwiii> space-ghost: not off the top of my head, gut BS has a lot more functionality then the built-in html lib ... it may have a function that does what you need ...
[19:22:08] <rjwiii> s/gut/but/
[19:22:14] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[19:22:40] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 260 seconds)
[19:22:51] *** Joins: wyclif (~wyclif@user/wyclif)
[19:23:29] *** Quits: otisolsen70 (~otisolsen@212.97.248.141) (Read error: Connection reset by peer)
[19:23:42] *** Joins: p-i-_ (~Ohmu@mx-ll-223.206.145-156.dynamic.3bb.co.th)
[19:24:14] *** Joins: y1n (~y1n@84-115-64-219.wifi.dynamic.surfer.at)
[19:24:42] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[19:25:19] <foo> HMm, I wonder if this is not a best practice and I'm overusing list generators. [p for p in projects if p.api_id==int(ids[1])]
[19:25:40] <foo> I could do this match in sqlalchemy too, I wonder what has better performance
[19:25:53] *** Joins: jetchisel (jetchisel@user/jetchisel)
[19:26:08] *** Joins: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[19:26:31] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[19:27:00] *** Quits: p-i- (~Ohmu@223.206.145.156) (Ping timeout: 265 seconds)
[19:27:06] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.2)
[19:27:18] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:def0:6996:2bb9:77) (Quit: Leaving)
[19:27:28] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[19:27:30] *** Joins: rounda (~rounda@c-73-242-143-254.hsd1.nm.comcast.net)
[19:27:31] <cul8r> space-ghost you want to calculate width of div when its blank?
[19:27:40] *** Quits: ihristov (~ihristov@85.187.46.226) (Ping timeout: 240 seconds)
[19:27:52] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[19:28:23] *** Joins: wyclif (~wyclif@user/wyclif)
[19:28:48] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[19:29:30] *** Joins: legola (~legola@46.235.100.27)
[19:30:34] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[19:30:45] *** Joins: jetchisel (jetchisel@user/jetchisel)
[19:30:52] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 265 seconds)
[19:30:57] *** Joins: cheater (~Username@user/cheater)
[19:31:02] *** Joins: djhankb (~djhankb@208.113.164.68)
[19:31:05] <aidanhasaknife> Hi! Python newbie + first time using an IRC... looking for some help with truth value testing / truthiness and falsiness. See this code if you're willing to help, thanks! :) https://bpa.st/KWDA
[19:32:32] <foo>  /j #sqlalchemy
[19:32:32] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:def0:6996:2bb9:77)
[19:33:03] <supakeen> auri: `== True` is a direct comparison with True, not evaluating the list as a boolean.
[19:33:11] <rounda> merge sort: https://bpa.st/F2IQ  I dont understand why it is represented as recursing down a tree, operating on individual "leafs,"  then rebuilding the array back up. All I see is dividinng the array in half, then using pointers to compare half of the half-array being operated on. The visual representations in the book made it extremely difficult
[19:33:11] <rounda> to code up without using the psuedocode
[19:33:14] <supakeen> that'd be `if L:` or `if bool(L):`.
[19:33:19] *** Joins: ssbr (~ssbr@python/site-packages/ssbr)
[19:33:19] <supakeen> Err, aidanhasaknife ^
[19:33:20] *** Quits: ssbr_ (~ssbr@python/site-packages/ssbr) (Remote host closed the connection)
[19:33:22] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[19:33:54] *** Joins: wyclif (~wyclif@user/wyclif)
[19:34:25] <foo> aidanhasaknife: The only truthy/falsey dynamics with a list are when a list is [] - that's falsey. Otherwise it's 0 or 1 with truthy false I think. Someone else might be able to chime in with more specifics though
[19:35:17] <supakeen> It's 'length' pretty much.
[19:35:25] *** Joins: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net)
[19:35:31] <bjs> rounda: a tree is something that starts in one place and then branches, and then each of those branches can branch... and so on.  Each time you "divide" the array it's like branching the branch
[19:35:56] <bjs> rounda: you start with one call, and then it "branches" into two calls. Each of those calls "branch" into two more calls, and so on..
[19:36:14] <aidanhasaknife> supakeen Ah jeez, thanks for catching that! I'm having success now. foo Yeah, seems useful! I just had a syntax error :p
[19:36:21] *** Quits: aidanhasaknife (~aidanhasa@76.77.117.20) (Quit: Client closed)
[19:37:39] <bjs> rounda: in some other languages they literally call if-statements "branching" :)
[19:37:39] <foo> Update: Hmm, I wonder if this is not a best practice and I'm overusing list generators. [p for p in projects if p.api_id==int(ids[1])] -> I can actually read all projects into a dict with key as project id, then a simple myprojects.get(project_id) - that will be faster than iterating through the list every time and I imagine faster than asking sqlalchemy to do this
[19:37:56] <rounda> @bjs i understand that concept, and that's how I started writing it, but the code provided doesnt actually do that... it just operates on two halves of an array. it doesn't break it down any further. for example, if I had an array of 100 items, it would still only be operating on "two" arrays of 50, instead of individual elements of "1" as the
[19:37:57] <rounda> visual representations show
[19:38:06] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[19:38:30] <bjs> rounda: if I want to merge_sort a list of 100 items, how many times does merge_sort get called?
[19:39:28] <rounda> @bjs thats another question.... the determining factor in the code is "if min < max"... min is ALWAYS less than max. So why isn't it an endless loop?
[19:39:38] <dob1> about argparse, why this code doesn't work https://dpaste.org/RAjG  ?
[19:39:41] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:def0:6996:2bb9:77) (Quit: Leaving)
[19:39:42] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[19:39:42] <bjs> rounda: eventually min == max
[19:39:54] <rounda> @bjs how? min never changes
[19:40:04] <rounda> @bjs and neither does max. only mid changes
[19:40:33] <bjs> rounda: think about `merge_sort(array, mid + 1, max)`  <- here calls merge_sort again, but this new call has a *different* min and max
[19:40:42] <bjs> where min=(old mid+1) and max=old max
[19:41:08] <rounda> @bjs oh wait... so it's operating on the right side
[19:41:21] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:def0:6996:2bb9:77)
[19:41:24] *** Joins: tg (~tg@rockylinux/infra/tg)
[19:41:53] <bjs> dob1: why vars() ?
[19:42:19] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[19:43:16] <rounda> @bjs thanks, makes sense now.
[19:43:25] *** Joins: markb181 (~markb1@2600:1700:eb40:7ecf:def0:6996:2bb9:77)
[19:43:27] *** Joins: bloodninja (~bloodninj@user/bloodninja)
[19:43:31] *** Quits: stevieh (~skrodzki@p2e584735.dip0.t-ipconnect.de) (Quit: Leaving.)
[19:43:36] *** Quits: kib (~kib@user/kib) (Quit: WeeChat 3.2)
[19:43:37] *** Quits: bloodninja (~bloodninj@user/bloodninja) (Client Quit)
[19:43:41] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[19:43:50] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:43:52] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[19:43:53] *** Joins: bloodninja (~bloodninj@user/bloodninja)
[19:44:18] *** Quits: markb181 (~markb1@2600:1700:eb40:7ecf:def0:6996:2bb9:77) (Client Quit)
[19:44:29] *** Quits: bloodninja (~bloodninj@user/bloodninja) (Remote host closed the connection)
[19:44:36] *** Joins: Naan (~Naan@user/naan)
[19:44:38] *** Joins: markb164 (~markb1@2600:1700:eb40:7ecf:def0:6996:2bb9:77)
[19:45:04] *** Joins: bloodninja (~bloodninj@user/bloodninja)
[19:45:04] *** Joins: wyclif (~wyclif@user/wyclif)
[19:45:39] <anddam> grym: mind a query?
[19:45:48] <dob1> bjs, to be honest I suppose I started to configure it for my needes starting from a tutorial that used vars
[19:45:53] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[19:46:00] <bjs> dob1: ah,  in that case, just delete the vars call :)
[19:46:11] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:def0:6996:2bb9:77) (Ping timeout: 256 seconds)
[19:47:32] <dob1> bjs, I suppose I got why vars was used, and I found the problem
[19:47:48] <bjs> dob1: ah okay,  what was the problem?
[19:48:04] <dob1> bjs, I am testing If I got it, I will tell you in a moment
[19:48:20] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 260 seconds)
[19:49:07] *** Quits: legola (~legola@46.235.100.27) (Remote host closed the connection)
[19:50:22] <dob1> bjs, because to get args value I use args['key']  no args.key   so  I have ot use  if args['random_sleep']: ...
[19:50:25] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 252 seconds)
[19:50:48] <dob1> vars was used to have this behaviour I suppose
[19:50:55] <bjs> dob1: ah, but that just leads to the question of why not just use args.key
[19:51:00] *** Quits: chele (~chele@user/chele) (Read error: Connection reset by peer)
[19:51:11] *** Joins: chele (~chele@user/chele)
[19:51:39] <dob1> bjs, yes, It was the tutorial I used, I don't know why
[19:52:07] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[19:53:01] <bjs> dob1: ah okay,  well,  continue then :)
[19:53:12] <bjs> if you use vars() you need to say ["key"] rather than .key
[19:53:16] <bjs> you'll just have to remember.
[19:53:22] *** markb164 is now known as markb1
[19:55:22] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[19:55:54] <dob1> bjs, yes, thanks to you. I was not aware of the use of vars with it.
[19:56:06] *** Joins: mukul (~mukul@c-24-6-109-135.hsd1.ca.comcast.net)
[19:57:03] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.2)
[19:57:19] *** Quits: Meteorhead (~Meteorhea@165.225.205.32) (Quit: Client closed)
[19:57:34] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[19:57:58] *** Joins: odoood (~odoood@2601:c8:c003:a550::1)
[19:59:47] *** Quits: frostschutz (~frostschu@2a01:c22:cc3d:ca00:7571:4ba7:9374:a03e) (Remote host closed the connection)
[20:00:16] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[20:00:17] *** Quits: xcombelle (~xavie@176-139-252-198.abo.bbox.fr) (Read error: Connection reset by peer)
[20:01:19] *** Joins: waynew (~wayne@user/waynew)
[20:02:55] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[20:03:54] *** Joins: tmbg (~bob@2001:4801:7827:101:be76:4eff:fe10:8db6)
[20:04:10] *** Quits: achilleas (~ach@user/achilleas) (Quit: :wq)
[20:04:46] <tmbg> anyone have an idea for how to sort uniq in ideavim? the recommendations i've tried online done seem to do it.
[20:04:49] *** Joins: ssbr_ (~ssbr@python/site-packages/ssbr)
[20:05:00] *** Joins: Dantali0n (~Dantali0n@251-228-138-45.connected.by.freedominter.net)
[20:05:38] *** Joins: achilleas (ach@user/achilleas)
[20:05:49] *** Quits: frost (~frost@59.71.242.61) (Quit: Connection closed)
[20:05:59] *** Quits: harpia (~harpia@58.148.205.168.dynamic.vibefibra.com.br) (Quit: harpia)
[20:07:36] *** Quits: ssbr (~ssbr@python/site-packages/ssbr) (Ping timeout: 265 seconds)
[20:08:34] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 252 seconds)
[20:10:47] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[20:11:19] *** Quits: y1n (~y1n@84-115-64-219.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[20:11:22] *** Joins: matsaman (~matsaman@user/matsaman)
[20:11:44] *** Joins: jetchisel (jetchisel@user/jetchisel)
[20:12:11] <grym> anddam: easier to just ask generally, but, sure
[20:13:17] *** Quits: lyr (~lyr@user/lyr) (Quit: Ping timeout (120 seconds))
[20:13:53] *** Joins: lyr (~lyr@user/lyr)
[20:14:02] *** Joins: zebrag (~chris@user/zebrag)
[20:14:44] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[20:15:20] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[20:15:21] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[20:15:46] *** Quits: devcpu (~rusty@d50-92-229-34.bchsia.telus.net) (Quit: leaving)
[20:17:32] *** Joins: devcpu (~rusty@d50-92-229-34.bchsia.telus.net)
[20:18:01] <rendar> what is the best way to get a singleton in python? e.g. an always increasing integer for each class instance
[20:18:48] <yitz> class attrib?
[20:20:40] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Ping timeout: 252 seconds)
[20:21:15] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Quit: jmiehe)
[20:21:17] *** Quits: p-i-_ (~Ohmu@mx-ll-223.206.145-156.dynamic.3bb.co.th) (Remote host closed the connection)
[20:21:49] <anddam> grym: false alarm, I thought I had got the issue in that setup thingy
[20:22:02] <anddam> x/setup/ a/tools/
[20:22:04] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[20:23:52] *** Joins: y1n (~y1n@84-115-64-219.wifi.dynamic.surfer.at)
[20:26:13] *** Joins: p-i- (~Ohmu@223.206.145.156)
[20:26:22] *** Quits: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Quit: SO LONG SUCKERS!)
[20:27:11] <tmbg> n/m, gave up, using gvim for it
[20:27:36] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[20:28:20] *** Joins: int3l (~int3l@78-83-124-208.spectrumnet.bg)
[20:29:12] *** Quits: mrwick (~mrwick@user/mrwick) (Quit: leaving)
[20:30:34] *** Quits: qlixed (~qlixed@152.170.36.244) (Ping timeout: 252 seconds)
[20:31:40] *** Quits: odoood (~odoood@2601:c8:c003:a550::1) (Ping timeout: 240 seconds)
[20:31:49] *** Quits: mike18 (~geri@216.200.232.252) (Remote host closed the connection)
[20:32:15] *** Quits: asd (~noname@user/asd) (Ping timeout: 265 seconds)
[20:32:59] *** Joins: LuksNuke (~LuksNuke@ip-146-0-191-111.dyn.luxfibre.pt.lu)
[20:33:56] *** Joins: asd (~noname@user/asd)
[20:34:35] *** Joins: raxor2k (~raxor2k@78.158.248.203)
[20:34:46] <raxor2k> is there an easy way to convert: {datetime.date(2021, 9, 16)   to 2021-09-16 ?
[20:34:51] *** Joins: ssbr` (~ssbr@python/site-packages/ssbr)
[20:35:06] <grym> raxor2k: https://strftime.org/
[20:35:29] <raxor2k> grym: excellent!
[20:35:31] <grym> ooOOo https://www.strfti.me/
[20:37:04] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[20:37:52] *** Quits: ssbr_ (~ssbr@python/site-packages/ssbr) (Ping timeout: 252 seconds)
[20:38:35] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:def0:6996:2bb9:77) (Quit: Client closed)
[20:39:10] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:def0:6996:2bb9:77)
[20:39:22] *** Quits: manti7 (~manti7@176.10.104.94) (Ping timeout: 252 seconds)
[20:39:26] <raxor2k> grym " TypeError: descriptor 'date' for 'datetime.datetime' objects doesn't apply to a 'int' object"
[20:39:49] *** Joins: WantToHelp (~dale@96.77.40.70)
[20:40:03] <raxor2k> aha, i needed to change from "from datetime import datetime"  -->   "import datetime"
[20:40:05] <raxor2k> works now
[20:40:15] * gitesh why this code isn't giving me second score ------> https://bpa.st/K5FA
[20:40:50] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[20:41:14] *** Joins: manti7 (~manti7@176.10.104.94)
[20:42:11] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[20:42:47] <jinsun> gitesh: that for loop never runs, map can be consumed only once, which you did when you did `first = max(arr)`
[20:43:04] <axisys> I need to generate SINCE '2021-06-01' UNTIL '2021-09-01' with python. So first day of this month and first day of 3 months ago .. so next month will be 2021-07-01 and 2021-10-01 .. any suggestion?
[20:43:15] <gitesh> jinsun: oh
[20:43:43] *** Joins: nomic (~nomic@185.217.117.156)
[20:43:56] *** Joins: fikran (~fikran@user/fikran)
[20:44:39] <jinsun> gitesh: you probably want to convert it to a list by putting a list() around it in line 3
[20:44:56] *** Quits: ponyofdeath (~vladi@2606:6000:cfc0:2b:9cf9:caf8:f20d:1053) (Quit: WeeChat 3.1)
[20:45:50] <gitesh> jinsun: how is my approach to code like that for finding out second score?
[20:45:54] <gitesh> is it bad?
[20:46:28] *** Quits: nomic (~nomic@185.217.117.156) (Client Quit)
[20:47:26] *** Quits: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu) (Quit: Client closed)
[20:47:28] *** Joins: stevieh (~skrodzki@p2e584735.dip0.t-ipconnect.de)
[20:47:41] <InPhase> gitesh: If the scores are 2, 3, 4, 5, 5, then what's the second score?
[20:47:51] <gitesh> InPhase: 4
[20:47:58] *** Joins: orbisvicis (~orbisvici@user/orbisvicis)
[20:48:06] *** Joins: ihristov (~ihristov@85.187.46.226)
[20:48:12] <jinsun> you can probably do it without calling max, in a single loop, then you won't have to convert the map to a list also
[20:48:35] *** Joins: kyooo (~kyooo@2a02:a31d:a13c:5600:559d:f748:905d:cda9)
[20:48:51] *** Joins: kosh (~kosh@user/kosh)
[20:49:05] <InPhase> gitesh: Another approach then is arr = list(set(map(int, input().split()))); print(arr[-2])
[20:49:18] <InPhase> gitesh: Oops.  That requires a sort that I forgot to insert.
[20:49:33] *** Quits: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net) (Read error: Connection reset by peer)
[20:49:40] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.2)
[20:49:48] <InPhase> Oh, no, set sorts.
[20:50:02] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 260 seconds)
[20:50:24] <jinsun> is set guaranteed to sort though? or it is just some implementation detail
[20:50:31] <InPhase> Is set guaranteed to be sorted or not?  There were changes...  and I lost track.
[20:50:44] <grym> sets aren't guaranteed to preserve anything
[20:50:48] <grym> dicts preserve insertion order
[20:51:03] <axisys> I can get date.today() .. but how do I get date of 3 months ago?
[20:51:06] <InPhase> gitesh: Okay, then a sort or sorted in that processing.
[20:51:49] <grym> axisys: one of the problems here is that "three months ago" is less well defined than you'd really like it to be
[20:51:56] <InPhase> gitesh: In a language like C/C++/Java, your approach is faster.  In a language like Python, using the built-ins tends to be faster than manual looping, and it's cleaner to sort, so you might as well go with that.  You also automatically handle negative scores and other oddities.
[20:52:24] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[20:52:49] *** Joins: FluffyMask (~masque@user/fluffymask)
[20:53:17] *** Quits: jazzy (~jaziz@2600:380:4616:7e6e:b12f:f383:1dc8:d3fe) (Ping timeout: 268 seconds)
[20:53:22] *** Quits: rounda (~rounda@c-73-242-143-254.hsd1.nm.comcast.net) (Quit: Client closed)
[20:53:37] <axisys> grym: right.. I was thinking only play with year and month .. so 10-3 for example for 3 months.. and day will be always same .. so 2021-09-16 and 2021-0(9-3)-16
[20:53:55] <jinsun> axisys: what will 3 months ago be if today is 31st May 2021?
[20:54:07] *** Quits: ferz (~ferz@93-39-142-235.ip76.fastwebnet.it) (Ping timeout: 268 seconds)
[20:54:22] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[20:54:31] *** Quits: pycode (~pycode@2001:b07:5d28:551:2b33:80d6:202e:d4db) (Ping timeout: 268 seconds)
[20:54:45] <gitesh> InPhase: ok
[20:54:54] <axisys> jinsun: excellent point.. may be always use last day of the month instead of today's date... which will work fine for my case
[20:55:05] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[20:55:18] <jinsun> aah why last day, 1st day is easier
[20:55:21] *** Joins: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net)
[20:55:40] *** Joins: INeedAHandle (~INeedAHan@39.124.72.106)
[20:56:00] <jinsun> last day can be 28, 30, 31, then you have to keep a mapping of month to last date, 1st day will always be 1
[20:56:16] <grym> or 29, once in a while
[20:56:19] <axisys> jinsun: to count all NewRelic metrics generated so far for last 3 months.. if I choose first day it is simpler I understand.. but then not counting last two weeks data until today
[20:56:39] <grym> (or, in 1740, some other weird set -- god help you if you're a historian)
[20:56:46] <axisys> ah.. so pyhton has no knowledge of last day of a month?
[20:57:03] <axisys> or python module like datetime for example
[20:57:25] <axisys> grym: lol.. no I am not
[20:57:26] <grym> axisys: if you said "90 days" instead of "3 months", i bet you'd hate yourself less
[20:57:47] <grym> i more or less know how long 90 days is
[20:58:07] <jinsun> there is relativedelta in dateutil that can do what you want and be right most of the time, stdlib datetime has to be told manually
[20:58:07] <axisys> grym: may be that is simpler.. ok.. I will convince my boss..
[20:58:25] <axisys> grym: ok so today and 90 days ago .. lets go with that
[20:58:51] <matsaman> days is easy, you can subtract datetime.timedelta(days=90)
[20:59:30] <grym> (we can still dicker about what clock time a day starts in, what time zone(s) we're in, and leap seconds, but those are easier to sweep under the table if all you really want is a window of time to sweep metrics up into)
[21:00:05] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[21:01:22] <lxer> Is there way to limit what is imported when importing a module? I know __all__ can do something similar, but only works when using 'from module import * '
[21:01:44] <gitesh> InPhase: I did this----> https://bpa.st/N26A  and it passed all the test.
[21:01:47] <jinsun> axisys: `datetime.date(2021, 5, 31) - dateutil.relativedelta.relativedelta(months=3)` ==> `datetime.date(2021, 2, 28)`
[21:02:15] <gitesh> I think i need not convert it to list to pass it to sorted funciton
[21:02:18] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[21:03:14] <grym> gitesh: you don't, sorted(someset) is fine
[21:03:31] *** Joins: tim__ (~tmart@74-194-163-71.bcstcmtk01.res.dyn.suddenlink.net)
[21:03:32] *** Quits: raxor2k (~raxor2k@78.158.248.203) ()
[21:04:19] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[21:05:36] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 265 seconds)
[21:05:37] *** Quits: ssbr` (~ssbr@python/site-packages/ssbr) (Remote host closed the connection)
[21:05:38] *** Joins: ssbr (~ssbr@python/site-packages/ssbr)
[21:06:19] *** Quits: Auron (Auron956@user/auron) (Ping timeout: 252 seconds)
[21:06:57] <orbisvicis> how can I profile from a given point?
[21:07:33] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[21:07:36] *** Joins: ferz (~ferz@93-39-142-235.ip76.fastwebnet.it)
[21:07:48] <orbisvicis> i.e. if a library function call is exceedingly slow in a given case, how can I get a profile of that function?
[21:07:54] *** Quits: stevieh (~skrodzki@p2e584735.dip0.t-ipconnect.de) (Quit: Leaving.)
[21:08:05] *** Quits: tmart (~tmart@74-194-163-71.bcstcmtk01.res.dyn.suddenlink.net) (Ping timeout: 268 seconds)
[21:10:22] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[21:10:26] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[21:10:27] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[21:11:23] *** Quits: y1n (~y1n@84-115-64-219.wifi.dynamic.surfer.at) (Ping timeout: 268 seconds)
[21:12:07] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[21:20:19] <anddam> how can I specify a local file reference in a install_requires dependency? using file://./foo  or file://foo  where foo is in my cwd I get """ValueError: non-local file URIs are not supported on this platform:"""
[21:20:31] <axisys> jinsun: that worked perfect! thanks!
[21:20:32] *** Quits: Teacup (~teacup@user/teacup) (Quit: Teacup)
[21:21:05] *** Quits: Naan (~Naan@user/naan) (Read error: Connection reset by peer)
[21:21:13] *** Joins: CombatVet_ (~c4@user/combatvet)
[21:21:30] *** Quits: CombatVet (~c4@user/combatvet) (Quit: suck it)
[21:21:42] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[21:21:57] *** CombatVet_ is now known as CombatVet
[21:22:30] <grym> anddam: importlib
[21:22:34] <grym> anddam: er, sorry, misread
[21:22:59] *** Quits: EgonX (~EgonX@2601:2c6:47f:9c18:41ed:bcba:6992:7fb3) (Quit: Textual IRC Client: www.textualapp.com)
[21:23:03] *** Joins: wyclif (~wyclif@user/wyclif)
[21:23:47] <grym> anddam: https://stackoverflow.com/a/65902365
[21:23:54] <grym> (i've never done this, but it ought to work)
[21:25:02] *** Joins: y1n (~y1n@84-115-65-86.wifi.dynamic.surfer.at)
[21:26:30] *** Quits: dthpulse (~quassel@podciarou.sk) (Remote host closed the connection)
[21:27:18] *** Parts: wodim (~zzz@2605:6400:30:f3cc:fa83:71b3:af31:d023) (leaving)
[21:27:40] *** Joins: dthpulse (~quassel@podciarou.sk)
[21:28:55] *** Quits: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 252 seconds)
[21:30:00] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[21:30:09] <anddam> grym: yeah but that's an absolute path
[21:30:40] <anddam> ok I'll just get cwd from the interpreter
[21:30:56] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.2.1)
[21:31:11] *** Quits: wolfgang (~wolfgang@101.174.6.197) (Remote host closed the connection)
[21:32:02] *** Joins: Sky_Net (~Sky_Net@176.14.213.149)
[21:32:58] *** Quits: rindolf (~shlomif@87.68.240.100.adsl.012.net.il) (Ping timeout: 268 seconds)
[21:32:58] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[21:33:02] *** Joins: Celeo (~Celeo@user/celeo)
[21:33:49] <grym> anddam: eeew
[21:34:00] *** Joins: wyclif (~wyclif@user/wyclif)
[21:35:28] *** Quits: rsx (~dummy@ppp-188-174-147-215.dynamic.mnet-online.de) (Quit: rsx)
[21:35:45] *** Quits: arti (~arti@2001:bb8:4008:2020::f) (Quit: arti)
[21:37:12] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[21:38:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[21:38:46] *** Joins: qlixed (~qlixed@181.44.129.13)
[21:38:49] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 252 seconds)
[21:39:24] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[21:39:30] *** Joins: wyclif (~wyclif@user/wyclif)
[21:39:39] <anddam> grym: is that the dirtiest you ever saw?
[21:40:11] *** Joins: arti (~arti@193.40.103.195)
[21:41:14] *** Joins: UselessCourage_ (~UselessCo@gateway/tor-sasl/uselesscourage)
[21:41:17] <gitesh> look at this code ---> https://bpa.st/MHVA
[21:41:17] <grym> anddam: no
[21:41:19] <grym> but, still
[21:41:22] <gitesh> is this approach good?
[21:41:53] <gitesh> to find second lowest score having names
[21:42:09] *** Joins: zebrag (~chris@user/zebrag)
[21:42:52] <anddam> grym: now I am adding the Real Dirty Part to that setup.py
[21:43:05] *** Joins: Teacup (~teacup@user/teacup)
[21:43:14] <grym> anddam: machine-specific paths give me the heebie-jeebies
[21:44:10] *** Quits: cuz (~user@38.140.58.234) (Ping timeout: 240 seconds)
[21:44:12] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[21:44:15] *** Quits: UselessCourage (~UselessCo@gateway/tor-sasl/uselesscourage) (Ping timeout: 276 seconds)
[21:45:02] *** Joins: wyclif (~wyclif@user/wyclif)
[21:45:14] *** Joins: Auron (Auron956@user/auron)
[21:45:22] *** Joins: bilb_ono (~alexmarsh@ip68-6-90-72.sb.sd.cox.net)
[21:49:00] *** Quits: paravida (~myChateau@user/paravida) (Ping timeout: 268 seconds)
[21:50:14] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[21:50:32] *** Joins: wyclif (~wyclif@user/wyclif)
[21:51:41] *** Joins: cellofellow (~user@166.70.50.58)
[21:53:41] *** Joins: EgonX (~EgonX@2601:2c6:47f:9c18:c9ad:1872:b127:9bac)
[21:55:01] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[21:55:29] *** Joins: iomari891 (~iomari891@105.112.138.38)
[21:55:37] <cluelessperson> https://doc.qt.io/qtforpython/PySide6/QtWidgets/QTableWidget.html#PySide6.QtWidgets.PySide6.QtWidgets.QTableWidget.cellChanged
[21:55:42] <cluelessperson> Here in the documentation, QTableWidget should have a "cellChanged" attribute, but it doesn't.
[21:55:47] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[21:56:04] *** Joins: wyclif (~wyclif@user/wyclif)
[21:57:22] *** Joins: jeho2 (~jehoshaph@user/jehoshaphat)
[21:57:49] *** Joins: ssbr_ (~ssbr@python/site-packages/ssbr)
[21:58:43] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Ping timeout: 252 seconds)
[22:00:43] *** Joins: Naan (~Naan@user/naan)
[22:00:45] *** Quits: ssbr (~ssbr@python/site-packages/ssbr) (Ping timeout: 260 seconds)
[22:01:07] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[22:01:34] *** Joins: wyclif (~wyclif@user/wyclif)
[22:01:39] *** Joins: greedom (~greedom@2001:16b8:2ea5:e400:9a8e:138d:3f81:5368)
[22:02:35] *** Quits: Celeo (~Celeo@user/celeo) (Quit: Leaving)
[22:02:50] *** Quits: tg (~tg@rockylinux/infra/tg) (Ping timeout: 260 seconds)
[22:03:18] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[22:03:37] *** Quits: greedom (~greedom@2001:16b8:2ea5:e400:9a8e:138d:3f81:5368) (Remote host closed the connection)
[22:05:23] *** Joins: semeion (~semeion@user/semeion)
[22:05:41] *** Joins: tg (~tg@rockylinux/infra/tg)
[22:06:40] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[22:07:04] *** Joins: wyclif (~wyclif@user/wyclif)
[22:07:12] <axisys> how do I get the first three letter of current month name in string and capitalized?
[22:07:29] <axisys> so 'Sep' for this month
[22:07:35] *** Joins: Ergo^ (~ergo@91.238.59.144)
[22:07:50] *** Joins: raxor2k (~raxor2k@78.158.248.203)
[22:09:12] *** Joins: greedom (~greedom@2001:16b8:2ea5:e400:9a8e:138d:3f81:5368)
[22:09:30] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[22:10:05] <axisys> this worked datetime.datetime.now().strftime('%b') .. but not sure if there is cleaner method
[22:10:07] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[22:11:07] *** Quits: bss (bss@rie.incorporeal.org) (Quit: brb)
[22:11:20] *** Quits: y1n (~y1n@84-115-65-86.wifi.dynamic.surfer.at) (Ping timeout: 265 seconds)
[22:11:36] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[22:12:13] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[22:12:15] <jinsun_> date.today instead of datetime.now will be slightly shorter
[22:12:19] *** Joins: bss (bss@rie.incorporeal.org)
[22:12:24] <jinsun_> nothing cleaner in stdlib though
[22:12:34] *** Joins: wyclif (~wyclif@user/wyclif)
[22:12:36] *** Joins: jetchisel (jetchisel@user/jetchisel)
[22:13:06] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 260 seconds)
[22:13:25] <jinsun_> the only cleaner thing would be to have a mapping between month and names, but you'll have to make that yourself
[22:14:31] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[22:14:49] *** Quits: mukul (~mukul@c-24-6-109-135.hsd1.ca.comcast.net) (Quit: Leaving.)
[22:15:27] *** Joins: Adoi (~Adoi@user/adoi)
[22:15:46] <cluelessperson> axisys, I wouldn't worry about.
[22:16:43] *** Joins: MikZyth (~MikZyth@188.65.242.225)
[22:17:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[22:18:03] *** Joins: cuz (~user@38.140.58.234)
[22:18:11] *** Joins: wyclif (~wyclif@user/wyclif)
[22:18:36] *** Quits: YaknotiS (~YaknotiS@user/yaknotis) (Ping timeout: 268 seconds)
[22:18:54] <grym> we're still in Fructidor!
[22:18:54] <gitesh> How to find second max number from a list of integers?
[22:19:15] *** Joins: flokuehn (~flokuehn@i577BC6DF.versanet.de)
[22:19:25] <grym> gitesh: sorted(set(mylist),reverse=True)[1]
[22:19:59] <KirkMcDonald> (Assuming the list has at least two distinct values in it.)
[22:20:00] <gitesh> grym: there can be repeated integers
[22:20:06] <anddam> grym: wow, took way too much effort on my side https://file.io/5esyMOLlDPUy
[22:20:07] <grym> gitesh: not after the set() there can't
[22:20:31] <grym> gitesh: and KirkMcDonald is correct, if you want the second max of [1,1], my code IndexErrors
[22:20:38] <anddam> not sure file.io is the appropriate way to share the mwe, but I did not know how to share the hierarchy using github's gist
[22:21:06] <KirkMcDonald> It is also possible to do this in linear time, but you'd need to implement the loop for that yourself; the standard library doesn't have a thing for it.
[22:21:10] <frozensoil> anyone knows about etags?
[22:21:20] *** jeho2 is now known as jeho
[22:22:37] <foo> I want f"this{{that}}" ... I want the end result to be this{okok} if that="okok" - any best practice here? Maybe I'll use .format()
[22:22:56] *** Quits: cuz (~user@38.140.58.234) (Ping timeout: 265 seconds)
[22:22:59] <gitesh> grym: don't have to use set to make them distinct
[22:23:08] <KirkMcDonald> foo: f"this{{{that}}}"
[22:23:23] *** Joins: y1n (~y1n@84-115-64-209.wifi.dynamic.surfer.at)
[22:23:23] <grym> gitesh: if you don't, you won't know where the next maximal index is
[22:23:25] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[22:23:40] <energizer> spaceone: KirkMcDonald: i was wrong about `except RecursionError`, you actually can do it. i wasn't able to reproduce that FatalError("Cannot recover from stack overflow.") https://bpa.st/FGWA
[22:23:41] <KirkMcDonald> foo: You escape a curly brace in an f-string (and in the format syntax generally) by doubling it.
[22:23:43] *** Joins: wyclif (~wyclif@user/wyclif)
[22:24:01] <gitesh> grym: oh I got it
[22:24:02] <foo> KirkMcDonald: ah! Ok
[22:24:13] *** Joins: sudomann (~sudomann@2601:543:100:2e3:49e8:80d9:94e1:de89)
[22:24:16] <gitesh> grym: so nice, :-) thank you so much
[22:24:44] <gitesh> grym: once I get second max the problem is almost over
[22:25:14] <gitesh> My course didn't teach me set so I wrote a long stuff
[22:25:34] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 252 seconds)
[22:27:06] *** Joins: cuz (~user@38.140.58.234)
[22:27:54] *** Joins: ssbr` (~ssbr@python/site-packages/ssbr)
[22:28:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[22:28:21] *** Quits: daoudr_ (~daoudr@178.197.217.245) (Quit: Leaving)
[22:29:08] *** Quits: EgonX (~EgonX@2601:2c6:47f:9c18:c9ad:1872:b127:9bac) (Quit: Textual IRC Client: www.textualapp.com)
[22:29:14] *** Joins: wyclif (~wyclif@user/wyclif)
[22:29:27] *** Joins: EgonX (~EgonX@2601:2c6:47f:9c18:c9ad:1872:b127:9bac)
[22:29:30] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[22:29:47] *** Joins: ponyofdeath (~vladi@2606:6000:cfc0:2b:9cf9:caf8:f20d:1053)
[22:30:22] <KirkMcDonald> gitesh, grym: You can also do it in linear time: https://bpa.st/L7WQ
[22:30:43] *** Quits: ssbr_ (~ssbr@python/site-packages/ssbr) (Ping timeout: 268 seconds)
[22:31:00] *** Quits: Hunterkll (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3) (Read error: Connection reset by peer)
[22:31:19] *** Joins: Hunterkll (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3)
[22:31:28] *** Joins: cloudbender (~cloudbend@user/cloudbender)
[22:31:30] <gitesh> What do set() do bro?
[22:31:44] <KirkMcDonald> gitesh: It creates a set, which is a collection of unique items.
[22:31:55] <grym> KirkMcDonald: that's the clean way, yeah
[22:32:06] <grym> KirkMcDonald: or, performant on big lists way
[22:32:30] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[22:33:03] *** Joins: srhm (~srhm@user/srhm)
[22:33:11] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Ping timeout: 268 seconds)
[22:34:13] <grym> gitesh: sets are unordered, their elements must be hashable, and their elements are unique within the set.  They have a lot in common with the most common mathematical description of sets (as in set theory)
[22:34:25] *** Joins: Akuli (~Akuli@87-94-111-156.bb.dnainternet.fi)
[22:34:48] <gitesh> KirkMcDonald: what does second line do I mean -intf what that do
[22:35:00] <grym> smallest possible float
[22:35:09] <KirkMcDonald> gitesh: float('-inf') gives you a float value that represents negative infinity.
[22:35:31] <KirkMcDonald> gitesh: Which will be smaller than any other number.
[22:35:34] <gitesh> Oh like javascript
[22:35:50] <jinsun> why does the current implementation of sets sort the numbers btw?
[22:35:53] <grym> most languages notion of floating point numbers are the same
[22:35:55] <KirkMcDonald> gitesh: Yes. Python floats and JS numbers are both IEEE 754 double-precision binary floats.
[22:36:12] <KirkMcDonald> jinsun: It's an artifact of Python's hash function.
[22:36:27] <aphysically> awww, sphinx-autodoc-typehints doesn't process the | union syntax
[22:36:38] <KirkMcDonald> jinsun: Integers hash to themselves. So they end up in the same order in the hash table, usually.
[22:36:50] <jinsun> KirkMcDonald: oh yes, makes sense
[22:36:57] *** Quits: llanhmod (~developer@user/domhnall/x-2887755) (Ping timeout: 265 seconds)
[22:39:05] *** Joins: llanhmod (~developer@user/domhnall/x-2887755)
[22:39:22] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[22:39:54] *** Quits: raxor2k (~raxor2k@78.158.248.203) ()
[22:40:12] *** Joins: wyclif (~wyclif@user/wyclif)
[22:40:19] <aphysically> hmmmm, I don't really want to change my | back into unions I'll just wait for autodoc typehints to update
[22:42:51] *** Quits: Mechanismus (~LabMonkey@2602:306:cf62:e270:a5f0:25e:4ae:1ba9) (Quit: Leaving)
[22:43:04] *** Quits: bitblit (~bitblit@gateway/tor-sasl/bitblit) (Remote host closed the connection)
[22:43:06] <pycurious> poetry is giving me this error: https://pastebin.com/rxQcWh6y (File not found : python) any ideas on how to fix this?
[22:43:09] *** Joins: califax (~califax@user/califx)
[22:43:29] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[22:44:36] <gitesh> KirkMcDonald: I think in that linear way I can even do first second third forth and so on if I want
[22:44:40] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[22:45:18] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[22:45:34] <gitesh> No perhaps
[22:45:37] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[22:45:39] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[22:45:45] *** Joins: wyclif (~wyclif@user/wyclif)
[22:45:45] <KirkMcDonald> gitesh: The approach can generalize to getting the top N values; it will perform in O(n*m), where n is the size of the list and m is the number of values you're obtaining.
[22:45:54] *** Joins: Pickchea (~private@user/pickchea)
[22:46:26] <KirkMcDonald> If m is constant, then that's O(n).
[22:46:29] *** Quits: chowmeined (~chowmeine@user/chowmeined) (Quit: Leaving)
[22:46:36] <gitesh> Hmm
[22:46:39] *** Joins: brabrax (~brabrax@user/brabrax)
[22:48:14] *** Joins: jdmark (~jdmark@67.8.137.130)
[22:48:36] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[22:48:36] *** Parts: ska (~ska@user/ska) (Leaving)
[22:48:52] *** Joins: califax (~califax@user/califx)
[22:49:02] *** Quits: llanhmod (~developer@user/domhnall/x-2887755) (Ping timeout: 265 seconds)
[22:49:26] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[22:49:27] *** Quits: brabrax (~brabrax@user/brabrax) (Client Quit)
[22:49:30] <KirkMcDonald> I believe that a different approach could do it in O(n log m).
[22:49:42] *** Joins: Adoi (~Adoi@user/adoi)
[22:50:28] *** Joins: brabrax (~brabrax@user/brabrax)
[22:50:36] <Adoi> hello,does a program always crash due to "unhandled exception" ?
[22:50:41] <rama> Do wheel releases that indicate a python tag (e.g. cp38) indicate compatibility with any patch version as well? Are significant language changes kept at the major/minor level to avoid incompatibility?
[22:51:14] <rama> Adoi: all my software crashes for other reasons :)
[22:51:25] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[22:51:25] *** Joins: califax (~califax@user/califx)
[22:51:32] <KirkMcDonald> There are legends of programs that complete without having crashed.
[22:51:58] <Adoi> if a program crashes, what is the first thing to do, independent of python?
[22:52:00] *** Joins: adder (~adder@user/adder)
[22:52:03] <Adoi> for any language, I mean
[22:52:06] <jinsun> fix it
[22:52:14] <Adoi> yes, but where to look, I mean
[22:52:33] <KirkMcDonald> Adoi: If you have a traceback, then that points at a place to start looking.
[22:53:18] *** Joins: fikran (~fikran@user/fikran)
[22:53:22] <Adoi> sure, but do all programs handle errors the same way? or even with python, can we always say, "the crash was due to exception that was not handled" ?
[22:53:24] <gitesh> KirkMcDonald: is it learned or invented? Are this type of stuff invented by programmers or learn?
[22:53:45] <KirkMcDonald> gitesh: I mean it was all invented by someone at some point.
[22:53:58] <gitesh> KirkMcDonald: yeah but what about others
[22:54:23] <Adoi> for ex., java's traceback seems to be just pointing at the file that contains the error
[22:54:27] <KirkMcDonald> gitesh: I mean I'm just reasoning out that you can do it in O(n log m) off the top of my head here.
[22:54:31] *** Joins: dba (uid502594@id-502594.hampstead.irccloud.com)
[22:54:50] <KirkMcDonald> gitesh: But I suspect this is something that's been done before.
[22:55:36] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[22:55:46] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 252 seconds)
[22:56:04] *** Joins: thiras (~thiras@user/thiras)
[22:56:15] <KirkMcDonald> Adoi: It's possible for a Python process to crash for some reason other than an unhandled exception, e.g. a segfault. But most often it's an exception.
[22:56:30] <dba> I believe this is a unix time epoch 1631816249000, how do I calculate the time epoch for 1631816249000 -24 hours
[22:56:44] *** Joins: wyclif (~wyclif@user/wyclif)
[22:56:57] <lxer> dba how many seconds are in 24hours?
[22:56:57] *** Quits: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net) (Read error: Connection reset by peer)
[22:56:58] <KirkMcDonald> dba: That's a Unix timestamp in milliseconds.
[22:58:17] <dba> lxer: there are 86400 second so the time in epoch would 1631816249000 - 86400?
[22:58:19] <energizer> dba: convert it to a datetime and subtract a timedelta
[22:58:31] <KirkMcDonald> dba: So if you want the timestamp for 24 hours prior, that's x - 3600*24*1000
[22:58:37] <KirkMcDonald> dba: Milliseconds!
[22:58:39] *** Quits: cuz (~user@38.140.58.234) (Remote host closed the connection)
[22:58:46] <lxer> ^
[22:58:48] *** Joins: cuz (~user@38.140.58.234)
[22:59:13] *** Joins: wolfgang (~wolfgang@101.174.6.197)
[23:00:20] <Adoi> KirkMcDonald, then, excluding hardware-related crashes, can we say for crashes related to an error in the program code always happen because they are not handled as exceptions?
[23:01:01] <Adoi> I mean, crashes for which you get a traceback
[23:01:01] <KirkMcDonald> Adoi: A segfault remains an example of a crash which is not an exception.
[23:01:10] <dba> KirkMcDonald: Thanks, I am wondering why we have to multipy by 1000
[23:01:44] <KirkMcDonald> Adoi: A traceback is by definition the result of the Python interpreter's top-level exception handler.
[23:01:49] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[23:02:03] *** Joins: Cata (~Cata@user/cata)
[23:02:16] *** Joins: wyclif (~wyclif@user/wyclif)
[23:02:23] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 268 seconds)
[23:02:39] <KirkMcDonald> (Well, that's slightly untrue, since it's also possible to catch an exception and produce a traceback for it then and there.)
[23:02:40] *** Joins: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net)
[23:02:55] *** Quits: slav0nic (slav0nic@python.su) (Remote host closed the connection)
[23:02:55] <Adoi> oh ok, so it is directly about exception handling...which is to say that if it is shown, there is a handled exception, and if it is not handled, there is a program crash instead, right?
[23:03:17] *** Quits: adder (~adder@user/adder) (Quit: Leaving)
[23:03:22] <energizer> Adoi: there are other ways to crash, like errors in extensions, Py_FatalError, etc
[23:03:23] <KirkMcDonald> Adoi: I'm saying that if you don't handle an exception, the interpreter will handle it as the last thing it does, once the call stack has unwound all the way.
[23:03:47] *** Quits: greedom (~greedom@2001:16b8:2ea5:e400:9a8e:138d:3f81:5368) (Remote host closed the connection)
[23:03:53] <bjs> Adoi: well, if you raise (or if Python raises) an exception, and it is not handled then Python will print out a traceback for you to help you
[23:04:12] <KirkMcDonald> And that top-level exception handler is the thing which prints the traceback.
[23:04:22] *** Joins: node1 (~node1@user/node1)
[23:04:32] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fafc-123.dhcp.inet.fi)
[23:04:59] *** Quits: waynew (~wayne@user/waynew) (Quit: keep salty my friends)
[23:05:07] <Adoi> energizer, do these other ones get shown in traceback, too?
[23:05:21] <bjs> Adoi: the way these things work is that when you raise, it sort of "floats" up the set of function calls until it reaches a `try` with an `except` that matches it. Once it gets there, it stops and continues from that except.  If it floats all the way up and nowhere catches it then you get a traceback
[23:05:35] *** Joins: Ivii (~Ivyy@2001:a61:1329:3e01:71c:8eee:e7a3:a533)
[23:05:46] *** Joins: wender (~Wender@189.37.67.248)
[23:05:49] *** Quits: cloudbender (~cloudbend@user/cloudbender) (Ping timeout: 252 seconds)
[23:06:03] <bjs> Adoi: so all the tracebacks are caused by Python exceptions for which there was no try/except to catch it.
[23:06:13] *** Joins: bitblit (~bitblit@gateway/tor-sasl/bitblit)
[23:06:51] <bjs> Adoi: there are other things that can be considered "errors" which aren't Python exceptions,  and there are ways for the Python program to exit/"crash" without generating a Python exception
[23:07:09] <KirkMcDonald> (Like segfaults. As mentioned.)
[23:07:11] <Adoi> seriously, I cant follow
[23:07:26] <bjs> Adoi: tracebacks are caused by Python exceptions.
[23:08:13] <energizer> Adoi: you'll usually get some kind of message, but it won't necessarily be a traceback. you can get a segfault for example like this python -c 'import sys; sys.setrecursionlimit(9999999); f = lambda: f(); f()'
[23:08:17] <bjs> Adoi: exceptions cause tracebacks and exceptions are one way to make a Python program quit,  but it's not the only way.
[23:08:33] *** Quits: computeiro (~Wender@189.37.67.248) (Ping timeout: 268 seconds)
[23:08:43] *** Joins: KombuchaKip (~kip@192.252.230.5)
[23:09:11] <Adoi> then, if a program crashes, and all I have is the traceback, where do I go for to detect the cause?
[23:09:20] <bjs> Adoi: so the first thing to do when you get a "crash" is to figure out what the cause was and where it came from (was it an exception?  did the program quit on its own prematurely?  was it another piece of software that crashed?  did the OS kill it?)
[23:09:44] <bjs> Adoi: well that's what the traceback is for,  it tells you exactly what happened.  What function called which other function and what line caused the failure
[23:09:49] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[23:09:52] <bjs> so ... you'd start there at that line, and work backwards
[23:10:40] <energizer> Adoi: but like >99% of the time you'll get an exception and a traceback
[23:10:42] <Adoi> so if I have a crash and a traceback, I can be assured that it is about exceptions
[23:10:49] <energizer> yes
[23:10:59] <bjs> Adoi: tracebacks come from Python exceptions
[23:11:16] *** Quits: y1n (~y1n@84-115-64-209.wifi.dynamic.surfer.at) (Ping timeout: 265 seconds)
[23:11:21] *** Joins: computeiro (~Wender@189.37.67.248)
[23:11:43] <Adoi> and as long as the exception is handled via try/except, crashes are not supposed to happen
[23:11:58] <bjs> Adoi: yes, if you use try/except the exception won't crash the program.
[23:12:02] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[23:12:19] <Adoi> and, conversely, if it happens, I can fix it via adding try/except?
[23:12:34] <bjs> Adoi: well, "fix it" is a very big topic
[23:12:43] <energizer> Adoi: sometimes it is better to let it crash
[23:13:02] <bjs> Adoi: it depends why there was an exception.
[23:13:02] <Adoi> I mean, if I want to detect the cause/error in the code, and correct it
[23:13:12] *** Quits: wender (~Wender@189.37.67.248) (Ping timeout: 265 seconds)
[23:13:14] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[23:13:16] *** Joins: wyclif (~wyclif@user/wyclif)
[23:13:17] <bjs> Adoi: often it's just a bug in some other part of the code, and adding a try/except won't "fix" anything, and you should fix the underlying problem
[23:13:55] <Adoi> how do I extend the examination in that case? from the cues I get from traceback?
[23:13:55] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 252 seconds)
[23:14:11] <bjs> Adoi: the traceback tells you where to start: it tells you the file and line that caused the exception.
[23:14:16] <Adoi> yes
[23:14:25] <bjs> From there, I mean, it depends what exception you got and why
[23:14:40] <bjs> Adoi: if `print("the value is", x/y)` gives you a ZeroDivsionError then you know you should look at what `y` is
[23:14:54] <cluelessperson> I'm completely stuck with qt, these attributes described in the documentation do not exist as far as I can tell.
[23:15:16] <bjs> Adoi: if it gives you a "TypeError: cannot divide str by int" or whatever then you know to look at what `x` is :)
[23:16:09] <Adoi> ah, right, so try/except might already be there, but it may be related to variables, functions..contained, for ex
[23:16:17] <Adoi> the error, I mean
[23:17:04] <bjs> Adoi: well I just mean more fundamentally exceptions are caused for specific reasons,  and the whole Python output is the traceback (that tells you the file and the line) and the error (the last line, it tells you *why* it was an exception). You take both of these pieces of information to try figure out why the line threw an exception at all
[23:17:13] *** Joins: metaace (~metaace@user/metaace)
[23:17:16] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[23:17:27] <Adoi> right
[23:17:45] <bjs> Adoi: and then once you know, you work backwards... I mean even just my `x/y` example above there are many different exceptions this could generate and each would lead to a different process to work out what happened
[23:18:19] <bjs> ZeroDivisionError means clearly something was 0 when it shouldn't be and I should see how. TypeError means something is the wrong type and I need to convert somewhere.  NameError means one of the variables doesn't exist and I should check for typos or logic problems
[23:18:19] <bjs> etc
[23:18:25] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[23:18:47] *** Joins: wyclif (~wyclif@user/wyclif)
[23:20:31] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[23:20:32] <Adoi> so, returning to earlier, try/except will avoid a crash, but it is not a  fix to the problem that caused the exception to occur
[23:20:40] *** Joins: timdiels (~user@78-22-205-207.access.telenet.be)
[23:21:29] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[23:21:46] <Adoi> it is like, one is about containing the outcomes of the error, the other is about removing the error altogether
[23:21:54] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 268 seconds)
[23:23:58] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[23:24:17] *** Joins: wyclif (~wyclif@user/wyclif)
[23:24:22] *** Joins: y1n (~y1n@84-115-64-209.wifi.dynamic.surfer.at)
[23:25:11] *** Joins: Betal (~Betal@user/betal)
[23:25:16] <bjs> Adoi: yes.
[23:25:19] *** Joins: skali (~skali@46.191.137.79)
[23:25:23] *** skali is now known as skali_
[23:25:59] *** skali_ is now known as skali
[23:26:40] <bjs> Adoi: sometimes it is the right thing to do, e.g. some libraries that make connections to webservers have functions to do the requests and they can fail with an exception if there's no connection
[23:26:54] <bjs> there's no bug in the code really,  and maybe you just want to catch the exception and try again later.
[23:27:11] *** Joins: TechSmurf (~tech@user/techsmurf)
[23:27:24] *** Joins: semeion (~semeion@user/semeion)
[23:28:18] <Adoi> bjs, so it is like you get the error message, and you know it is nothing related to the code, but just, as you say, a momentary external failure
[23:28:41] <bjs> Adoi: it all depends on the exception and why it happened :)
[23:28:52] <Adoi> it enables you to get an error message and not a crash instead :)
[23:29:05] *** Quits: skali (~skali@46.191.137.79) (Client Quit)
[23:29:05] <bjs> Adoi: or even just to not get any messages at all
[23:29:14] <Adoi> yes
[23:29:18] *** Joins: tachoknight (~tachoknig@2600:1700:3060:3ee0:3475:50b1:8fcd:e401)
[23:29:31] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[23:29:48] *** Joins: wyclif (~wyclif@user/wyclif)
[23:29:52] <bjs> Adoi: infact if you look closely at a Python program you'll see far more exceptions are flying around than you first imagined :)
[23:30:03] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[23:30:08] *** Quits: LuksNuke (~LuksNuke@ip-146-0-191-111.dyn.luxfibre.pt.lu) (Ping timeout: 268 seconds)
[23:31:05] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 265 seconds)
[23:31:11] *** Joins: cheater (~Username@user/cheater)
[23:31:14] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[23:32:20] <timdiels> Hi, is appending to a list preferred over a generator function when in the end I just convert them to a tuple? Due to converting to tuple it's loaded into memory anyway. So, purely talking about which code is preferred (simpler). E.g. https://bpa.st/BV7Q
[23:33:09] <KirkMcDonald> Adoi, bjs: Not to mention, exceptions are part of the iteration protocol. StopIteration is an exception thrown whenever an iterator is complete.
[23:33:30] *** Quits: ssbr` (~ssbr@python/site-packages/ssbr) (Ping timeout: 265 seconds)
[23:34:11] <timdiels> I noticed SO prefers list append but I use generators by default
[23:34:32] *** Joins: LuksNuke (~LuksNuke@ip-146-0-191-111.dyn.luxfibre.pt.lu)
[23:34:40] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[23:34:45] *** Quits: mohabaks (~mohabaks@gateway/tor-sasl/mohabaks) (Ping timeout: 276 seconds)
[23:34:49] <Adoi> thank you all for your great help,it is clearer to me now
[23:35:06] <bjs> timdiels: lists tend to be more useful in general, but if you're just turning it into a generator everytime immediately then I'd use the generator as the yield is slightly nicer to read
[23:35:15] <bjs> if you were going to turn it into a list, then I'd ask what the point of the generator was :)
[23:35:35] *** Joins: wyclif (~wyclif@user/wyclif)
[23:36:10] <grym> timdiels: those reduce(hah!) to tuple(manipulate(x) for x in xs) vs tuple(list(manipulate(x) for x in xs)); i'd use the former
[23:36:40] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Remote host closed the connection)
[23:36:56] <grym> or i guess tuple(manipulate(x) for x in xs if logic(x)) vs tuple(list(manipulate(x) for x in xs if logic(x))); i'd use the former anyway
[23:36:59] <axisys> jinsun, cluelessperson: thanks!
[23:37:57] *** Joins: sniperwolf (~sniperwol@91.230.98.1)
[23:40:25] *** Joins: mike18 (~geri@217-149-162-127.nat.highway.telekom.at)
[23:40:28] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[23:40:30] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Remote host closed the connection)
[23:40:41] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[23:40:50] *** Joins: wyclif (~wyclif@user/wyclif)
[23:40:55] <mike18> hi - python shows some warnings - but doesnt tell me which line in my code... how to display the line?
[23:41:23] *** Joins: nomic (~nomic@185.217.117.156)
[23:41:36] <kosh> that is weird, it should display a full traceback and the lines involved
[23:41:40] <mike18> https://ideone.com/dQg741
[23:41:45] <mike18> thats the warning
[23:41:51] <mike18> its not an error
[23:42:27] <mike18> i dont know how critical that issue is
[23:42:31] <grym> mike18: should be easy enough to grep for ` self._setitem_single_column(ilocs[0], value, pi)`  though
[23:44:02] <mike18> _setitem_single_column is the example
[23:44:13] *** Quits: nepeat (~nepeat@79.110.170.62) (Read error: Connection reset by peer)
[23:44:19] *** Quits: Jefren (~Jefren@70.35.66.56) (Ping timeout: 268 seconds)
[23:44:30] <timdiels> Thanks for confirming, I too find generators nicer to see :)
[23:45:35] <bjs> mike18: you can run -Werror to turn the warnings into errors that have tracebacks.  Usually warnings are something you can silence or ignore anyway
[23:45:38] <molt> Quick Question: is "csv" a built-in Python Library? I believe it is... just double-checking with some real people in here while I make a few web searches :P
[23:45:48] <grym> molt: yes
[23:45:58] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[23:46:06] <grym> molt: https://docs.python.org/3/library/csv.html  if it's on docs.python.org for your version of python, it's stdlib
[23:46:09] *** Joins: Jefren (~Jefren@70.35.67.231)
[23:46:12] <molt> grym: sweet! thanks for the super-ultra-fast response!
[23:46:21] *** Joins: wyclif (~wyclif@user/wyclif)
[23:46:30] <molt> Ohhhh yeah! That is true. I forgot about that
[23:46:35] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:47:02] <grym> (this has tangentially made me once again wonder how to get a python version vcs-blame function into the docs)
[23:47:28] <grym> "what's the earliest python that did stdlib_module.function ?" is a question i have sometimes and it's not easily answered
[23:47:55] *** Joins: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net)
[23:49:05] *** Quits: bilb_ono (~alexmarsh@ip68-6-90-72.sb.sd.cox.net) (Quit: bilb_ono)
[23:49:13] <BrenBarn> the docs usually have a note about it
[23:50:09] <mike18> bjs:  i shouldnt do the following? warnings.simplefilter("always", DeprecationWarning)
[23:50:16] <grym> BrenBarn: unless it's ancient
[23:50:26] *** Joins: bilb_ono (~alexmarsh@ip68-6-90-72.sb.sd.cox.net)
[23:51:16] *** Quits: rapier (~marcos@170.233.159.1) (Read error: Connection reset by peer)
[23:51:19] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[23:51:53] *** Joins: wyclif (~wyclif@user/wyclif)
[23:51:57] <bjs> mike18: well no that's probably not right,  what's causing the warning? Is it your code?
[23:52:19] <mike18> no idk
[23:52:22] <mike18> i have the in my code
[23:52:27] <BrenBarn> grym: true, some really old stuff isn't noted
[23:52:55] <BrenBarn> I seem to recall some site somewhere that broke down a lot of history on when stuff was added but not sure where it was
[23:52:58] <mike18> bjs: does that mean the DeprecationWarning is ignored?
[23:53:02] <mike18> or printed?
[23:53:24] <bjs> mike18: https://docs.python.org/3/library/warnings.html
[23:53:31] *** Quits: Jefren (~Jefren@70.35.67.231) (Ping timeout: 252 seconds)
[23:53:33] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[23:53:44] <bjs> mike18: you have the what in your code?  I mean the warning is put there because the library thinks you (or someone at least) is doing something incorrectly
[23:54:04] <bjs> if it was you,  you should figure out what it's trying to tell you and to fix it rather than trying to silence it :)
[23:54:47] *** Joins: Mechanismus (~LabMonkey@2602:306:cf62:e270:4450:4ddd:1389:48d6)
[23:55:11] <mike18> bjs: thats in the code---
[23:55:20] <bjs> that sentence doesn't help
[23:55:38] *** Joins: Jefren (~Jefren@70.35.66.69)
[23:56:24] *** Joins: cdown (~cdown@194.207.141.245)
[23:56:49] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[23:57:23] *** Joins: wyclif (~wyclif@user/wyclif)
[23:57:37] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[23:58:11] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
