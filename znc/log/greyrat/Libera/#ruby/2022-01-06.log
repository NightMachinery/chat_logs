[00:02:37] *** Quits: dangerousdave (~dangerous@host-92-16-216-211.as13285.net) (Ping timeout: 256 seconds)
[00:04:17] *** Quits: roadie (~user@2a02:8108:ec0:1427:818d:b4d3:fe79:3823) (Ping timeout: 240 seconds)
[00:09:30] *** Joins: duds- (~duds-@gateway/tor-sasl/duds)
[00:13:45] *** Joins: roadie (~user@2a02:8108:ec0:1427:818d:b4d3:fe79:3823)
[00:26:50] *** Quits: konsolebox (~konsolebo@37.120.210.110) (Quit: Leaving)
[00:33:45] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:33:55] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:45:37] *** Quits: bobdobbs (~user@2406:5a00:4434:4c00:5ca1:588a:b032:11d5) (Remote host closed the connection)
[00:45:44] *** Quits: roadie (~user@2a02:8108:ec0:1427:818d:b4d3:fe79:3823) (Ping timeout: 252 seconds)
[00:46:46] *** Joins: roadie (~user@2a02:8108:ec0:1427:818d:b4d3:fe79:3823)
[00:52:32] *** Quits: roadie (~user@2a02:8108:ec0:1427:818d:b4d3:fe79:3823) (Ping timeout: 240 seconds)
[00:55:47] *** Quits: taupiqueur_ (~taupiqueu@61.144.204.77.rev.sfr.net) (Quit: taupiqueur_)
[00:56:40] *** Joins: taupiqueur (~taupiqueu@61.144.204.77.rev.sfr.net)
[00:57:38] *** Joins: samgranieri (~samgranie@user/samgranieri)
[01:00:41] *** Joins: samgranieri_ (~samgranie@user/samgranieri)
[01:03:57] *** Quits: samgranieri (~samgranie@user/samgranieri) (Ping timeout: 240 seconds)
[01:05:12] *** Quits: samgranieri_ (~samgranie@user/samgranieri) (Client Quit)
[01:19:02] *** Joins: roadie (~user@2a02:8108:ec0:1427:818d:b4d3:fe79:3823)
[01:20:08] *** Joins: samgranieri (~samgranie@user/samgranieri)
[01:21:45] *** Quits: samgranieri (~samgranie@user/samgranieri) (Client Quit)
[01:22:58] *** Joins: samgranieri (~samgranie@user/samgranieri)
[01:27:22] *** Quits: samgranieri (~samgranie@user/samgranieri) (Client Quit)
[01:28:37] *** Quits: roadie (~user@2a02:8108:ec0:1427:818d:b4d3:fe79:3823) (Ping timeout: 240 seconds)
[01:29:14] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Remote host closed the connection)
[01:32:12] *** Joins: bobdobbs (~user@116.251.149.196)
[01:35:16] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[01:39:56] *** Joins: samgranieri (~samgranie@user/samgranieri)
[01:55:03] *** Joins: roadie (~user@2a02:8108:ec0:1427:818d:b4d3:fe79:3823)
[01:59:21] <bobdobbs> What's up with the gap between 'Sample.' and 'new' on line 10? https://www.toptal.com/developers/hastebin/ufepejiced.rb
[01:59:42] <bobdobbs> I ran this snippet both with and without the space and it worked. 
[02:00:04] <bobdobbs> It's interesting to me because I haven't seen anything like this gap in other languages I've played with.
[02:04:46] *** Quits: justIrresolute5 (~justache@user/justache) (Quit: Ping timeout (120 seconds))
[02:04:46] *** Quits: whysthatso12 (~whysthats@74-206-50-195.sta.estpak.ee) (Quit: Ping timeout (120 seconds))
[02:04:58] *** Joins: whysthatso125 (~whysthats@74-206-50-195.sta.estpak.ee)
[02:05:13] *** Joins: vit (~vit@chello085216193138.chello.sk)
[02:06:12] *** Quits: roadie (~user@2a02:8108:ec0:1427:818d:b4d3:fe79:3823) (Ping timeout: 240 seconds)
[02:06:12] *** vit is now known as Guest3367
[02:09:35] <weaksauce> bobdobbs yeah a lot of the time spaces are fine like you can do a newline too when method chaining 
[02:11:38] <bobdobbs> weaksauce: interesting
[02:11:53] <bobdobbs> newline when chaining is cool
[02:13:20] <weaksauce> i am surprised that object . new works though 
[02:13:26] <weaksauce> never tried that before 
[02:28:13] *** Joins: John_Ivan (~John_Ivan@31-187-33-75.dynamic.upc.ie)
[02:31:46] *** Joins: roadie (~user@2a02:8108:ec0:1427:818d:b4d3:fe79:3823)
[02:34:37] *** Quits: taupiqueur (~taupiqueu@61.144.204.77.rev.sfr.net) (Quit: taupiqueur)
[02:40:32] *** Joins: Pixi__ (~Pixi@user/pixi)
[02:43:02] *** Quits: roadie (~user@2a02:8108:ec0:1427:818d:b4d3:fe79:3823) (Ping timeout: 240 seconds)
[02:43:25] *** Quits: Pixi_ (~Pixi@user/pixi) (Ping timeout: 240 seconds)
[02:46:54] *** Joins: justIrresolute (~justache@user/justache)
[03:23:57] *** Quits: ur5us (~ur5us@2406:e002:6c7b:2301:1b18:b746:eaa9:fad6) (Ping timeout: 240 seconds)
[03:27:53] *** Quits: Guest3367 (~vit@chello085216193138.chello.sk) (Ping timeout: 256 seconds)
[03:34:44] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[03:58:45] *** Joins: roadie (~user@2a02:8108:ec0:1427:818d:b4d3:fe79:3823)
[03:59:03] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[04:14:15] *** Joins: ur5us (~ur5us@2406:e002:6c7b:2301:f812:b76c:617f:99d7)
[04:17:30] *** Quits: roadie (~user@2a02:8108:ec0:1427:818d:b4d3:fe79:3823) (Ping timeout: 240 seconds)
[04:43:04] *** Joins: roadie (~user@2a02:8108:ec0:1427:818d:b4d3:fe79:3823)
[04:57:44] *** Quits: roadie (~user@2a02:8108:ec0:1427:818d:b4d3:fe79:3823) (Ping timeout: 240 seconds)
[05:03:57] <bobdobbs> I'm assuming my script will be run in a linux environment. I want to test for the availability of a linux command. Is Shell the best tool to use?
[05:04:01] <bobdobbs> https://ruby-doc.org/stdlib-2.6/libdoc/shell/rdoc/Shell.html
[05:37:39] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 256 seconds)
[05:50:58] <leftylink> so I am surprised at how much faster Range#sum is than manually doing it
[05:51:01] <leftylink> take a look
[05:51:07] <leftylink> pandabot: rb def timeit; t = Time.now; yield; Time.now - t end; n = 2*10**7; [timeit { (1..n).sum }, timeit { k = 0; (1..n).each { k += _1 } }]
[05:51:09] <pandabot> [3.812e-06, 1.143860173] - https://carc.in/#/r/ck4i
[05:51:46] <leftylink> now, Range#sum could potentially use a constant-time implementation if it were acting on integers, but not all ranges are on integers
[05:54:24] <leftylink> well let's see what happens if the range isn't over integers then
[05:56:30] <leftylink> pandabot: rb def timeit; t = Time.now; yield; Time.now - t end; rng = (?a..?아); [timeit { rng.sum("").size }, timeit { k = ""; rng.each { k += _1 }; k.size }]
[05:56:31] <pandabot> stderr: -e:2: invalid multibyte char (US-ASCII) - exit 1 - https://carc.in/#/r/ck4l
[05:56:45] <leftylink> oh come the **** on
[06:00:16] <leftylink> pandabot rb def timeit; t = Time.now; yield; Time.now - t end; rng = (?a.."\u{ffff}"); [timeit { rng.sum("").size }, timeit { k = ""; rng.each { k += _1 }; k.size }]
[06:00:17] <pandabot> [0.108215762, 0.092518891] - https://carc.in/#/r/ck4w
[06:00:30] <leftylink> okay so not significant advantage of #sum there versus #each
[06:00:59] <leftylink> so #sum seems to have a case that does the direct calculation for integer ranges
[06:01:23] <leftylink> which of course it cannot do for non-integer ranges
[06:01:34] <leftylink> where can I see the code that governs this optimisation?
[06:01:47] <leftylink> pandabot: ri Enumerable#sum
[06:01:47] <pandabot> https://ruby-doc.org/core-3.0.1/Enumerable.html#method-i-sum
[06:02:05] <leftylink> oh lol it's right there in the doc
[06:02:10] <leftylink> "If the method is applied to an Integer range without a block, the sum is not done by iteration, but instead using Gauss’s summation formula."
[06:03:06] <leftylink> as for the code, let's see... it's probably that int_range_sum call
[06:03:39] <leftylink> anyway my question is answered. if the docs reflect when it was added, it'd be around 2.7. et's see
[06:08:03] <leftylink> nope. apparently this optimisation has always been there, undocumented, since the introduction of Enumerable#sum in 2.4.0 (https://stackoverflow.com/questions/41636558/why-is-rangesum-defined-in-enumerable-module), and it was only just documented in 2.7
[06:08:32] *** Quits: fcser (~fcser@booty.farted.net) (Read error: Connection reset by peer)
[06:10:31] *** Quits: John_Ivan (~John_Ivan@31-187-33-75.dynamic.upc.ie) (Ping timeout: 256 seconds)
[06:10:57] *** Joins: fcser (~fcser@booty.farted.net)
[06:11:56] <leftylink> you gotta tell us these things!
[06:12:19] <leftylink> can't hold out on us like that
[06:15:27] *** Quits: fcser (~fcser@booty.farted.net) (Client Quit)
[06:15:44] *** Joins: fcser (~fcser@booty.farted.net)
[06:18:02] *** Joins: roadie (~user@2a02:8108:ec0:1427:818d:b4d3:fe79:3823)
[06:18:05] <leftylink> so I can reasonably expect that even if I gvae some absurd numbers that #sum will still calculate it as fast as it can create the bignums for it
[06:18:28] <leftylink> pandabot: rb def timeit; t = Time.now; yield; Time.now - t end; n1 = 10**10**3; n2=10**10**4; timeit { (n1..n2).sum }
[06:18:30] <pandabot> 0.000143933 - https://carc.in/#/r/ck4x
[06:21:48] <leftylink> I just am stunned that they thought to put ths in
[06:31:57] *** Quits: roadie (~user@2a02:8108:ec0:1427:818d:b4d3:fe79:3823) (Ping timeout: 240 seconds)
[06:42:47] <bobdobbs> when I do 'IO.popen("ls")' in irb, I get back this: #<IO:fd 8>
[06:42:52] <bobdobbs> what does that mean?
[06:47:24] *** Joins: John_Ivan (~John_Ivan@31-187-33-75.dynamic.upc.ie)
[06:47:42] <leftylink> is the answer "file descriptor 8" of the desired level of detail or was more needed
[06:50:48] <havenwood> bobdobbs: You can then create a new I/O object using that file descriptor ("fd"), like: IO.new(8) #=> #<IO:fd 8>
[06:51:32] <havenwood> bobdobbs: Every file and socket a process has open has a fd, alongside the 0, 1, & 2 fd for stdin, stderr, and stdout.
[06:51:40] <havenwood> (by default)
[06:56:51] *** Quits: John_Ivan (~John_Ivan@31-187-33-75.dynamic.upc.ie) (Read error: No route to host)
[06:57:13] *** Joins: John_Ivan (~John_Ivan@31-187-33-75.dynamic.upc.ie)
[06:58:58] <bobdobbs> I understand some of that
[06:59:28] <bobdobbs> ulimately what I'm trying to do is test to see if a system command is present, but without echoing it's output
[07:00:12] <bobdobbs> I came across 'system', but this echos the output. Some googling led me to IO.popen. But that echos the output as well
[07:01:12] <weaksauce> could use which
[07:01:19] <bobdobbs> oh wait, not it doesn't echo the output. But it does echo that glyph... which describes the file descriptor?
[07:02:28] <bobdobbs> weaksauce: what is that? I can't find it with Google. 
[07:02:33] <weaksauce> `which alkjsdlfjs`.empty?
[07:03:00] <weaksauce> just a linux command to show you which program would execute 
[07:03:07] <weaksauce> if you were to use it
[07:03:29] <weaksauce> `which ls`.empty? # => false
[07:03:39] <weaksauce> `which alkjsdlfjs`.empty? # => true
[07:04:04] <bobdobbs> weaksauce: Oh. Do the backticks result in passing the string to the system as a command?
[07:04:24] <weaksauce> yes backticks is run that command and give me a string output 
[07:05:29] <weaksauce> i think only stdout though 
[07:05:49] <weaksauce> it might not be really portable though depending on the shell
[07:12:32] <havenwood> bobdobbs: Do you need it to be portable across all systems or just Linux or BSDs?
[07:14:24] <havenwood> bobdobbs: You can have #system send stdout and stderr to dev null.
[07:14:28] <havenwood> bobdobbs: system('sh -c "command -v foo"', %i[out err] => File::NULL)
[07:15:07] *** Quits: oxfuxxx (~oxfuxxx@89.40.183.139) (Ping timeout: 256 seconds)
[07:15:13] <havenwood> bobdobbs: That ^ for example, is a POSIX way to check if the command exists, sending any output to a black hole.
[07:16:40] <havenwood> bobdobbs: system('sh', '-c', "command -v #{cmd_name}", %i[out err] => File::NULL)
[07:16:50] <havenwood> (where cmd_name is the command name)
[07:17:11] <havenwood> that works well on BSDs, macOS, Linux, or basically anything with sh.
[07:17:43] <havenwood> if you need Windows, etc, too, don't shell out and check elsewise.
[07:18:56] <havenwood> bobdobbs: A nice thing about #system is you can then use the return value of `true` or `false` to see if the command was found.
[07:42:24] *** Joins: roadie (~user@2a02:8108:ec0:1427:818d:b4d3:fe79:3823)
[07:46:09] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Ping timeout: 256 seconds)
[07:47:25] *** Quits: roadie (~user@2a02:8108:ec0:1427:818d:b4d3:fe79:3823) (Ping timeout: 240 seconds)
[07:49:51] <bobdobbs> havenwood: hai. I've just come back to terminal, so I'm reading your messages to me now.
[07:50:32] <bobdobbs> havenwood: I'd like my script to be portable across linux OS's
[07:50:54] <bobdobbs> havenwood: and I want to avoid assuming which shell is active for the user
[07:56:22] *** Joins: roadie (~user@2a02:8108:ec0:1427:818d:b4d3:fe79:3823)
[07:57:14] <havenwood> bobdobbs: sh and command are defined by POSIX and should be reasonable to rely on
[07:57:38] <havenwood> bobdobbs: sounds like a fit
[07:58:19] <havenwood> system('sh', '-c', "command -v bobdobbs", %i[out err] => File::NULL) #=> false
[07:59:14] <havenwood> bobdobbs: You could alternatively look at PATH yourself, if you're anticipating the command will be in the PATH and is executable.
[07:59:41] <havenwood> command will likely be more portable than PATH
[07:59:48] <havenwood> i mean, it is
[08:06:16] <adam12> Gemdocs.org is now slightly less hacky. I've moved everything to a compressed filesystem and dropped storing everything as gzip. Gonna try to find time this week to generate docs for all new gem releases of versions I have already stored, and maybe setup the webhook to add new ones.... maybe. Or at least for the gems I already have for now.
[08:07:57] *** Joins: oxfuxxx (~oxfuxxx@2a01:e0a:268:92c0:147a:fd7:2427:73ef)
[08:11:37] *** Quits: roadie (~user@2a02:8108:ec0:1427:818d:b4d3:fe79:3823) (Ping timeout: 240 seconds)
[08:11:49] <bobdobbs> Thans havenwood 
[08:12:48] <bobdobbs> *thanks
[08:13:11] *** Joins: roadie (~user@2a02:8108:ec0:1427:818d:b4d3:fe79:3823)
[08:18:36] <bobdobbs> havenwood: sorry, I'm looking at this documentation for 'system'. I can't see how to supress messages: https://apidock.com/ruby/Kernel/system
[08:18:37] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[08:19:15] <bobdobbs> havenwood: I mean, I can see the example you've given me. But I can't see how it maps to the docs
[08:19:54] <bobdobbs> Or at least to the documentation that I can find. There might be official documentation for this call, but I can't find it.
[08:22:09] <adam12> bobdobbs: Look for the Kernel#spawn docs.
[08:22:23] <adam12> And imho, use rubyapi.org as it's likely more up to date. https://rubyapi.org/3.1/o/kernel#method-i-spawn
[08:22:30] <bobdobbs> thanks
[08:22:31] <adam12> (or the official docs)
[08:22:58] <adam12> Kernel#system wraps Kernel#spawn so many of the arguments translate over.
[08:23:04] <adam12> Good luck. I'm crashing :)
[08:26:08] <bobdobbs> Sorry, I can't see anything in the docs for 'system' that might apply to supressing output
[08:29:32] *** Quits: oxfuxxx (~oxfuxxx@2a01:e0a:268:92c0:147a:fd7:2427:73ef) (Ping timeout: 240 seconds)
[08:42:57] *** Joins: gproto23 (~gproto23@user/gproto23)
[08:56:28] *** mahlon_ is now known as mahlon
[08:57:10] <havenwood> bobdobbs: https://rubyapi.org/3.1/o/kernel#method-i-spawn
[08:58:06] <havenwood> pid = spawn(command, :err=>:out)
[08:58:17] <havenwood> Look under :redirection
[08:58:52] <havenwood> bobdobbs: redirecting :out and :err to dev null suppresses output
[08:59:14] <havenwood> the example above directs stderr to stdout
[09:01:19] <havenwood> bobdobbs: there's not a dev/null example, but if you can redirect stdout and stderr to nothing to suppress
[09:01:45] <havenwood> *then you can direct to nothing to suppress
[09:02:25] <havenwood> redirecting stdout and stderr to /dev/null is a common pattern, at least
[09:03:19] <havenwood> bobdobbs: The system docs say "See Kernel#spawn for details."
[09:03:33] <havenwood> The spawn docs have the details, like adam mentione.d
[09:05:32] *** Quits: roadie (~user@2a02:8108:ec0:1427:818d:b4d3:fe79:3823) (Ping timeout: 240 seconds)
[09:05:52] *** Joins: Pipip (~Pip@user/Pipip)
[09:06:01] *** Joins: bluedust (~bluedust@117.241.185.116)
[09:14:54] <bobdobbs> havenwood: thanks again
[09:30:25] *** Joins: roadie (~user@2a02:8108:ec0:1427:818d:b4d3:fe79:3823)
[09:35:49] *** Quits: roadie (~user@2a02:8108:ec0:1427:818d:b4d3:fe79:3823) (Ping timeout: 240 seconds)
[09:45:38] *** Joins: bluedust_ (~bluedust@81.92.206.10)
[09:49:17] *** Quits: bluedust (~bluedust@117.241.185.116) (Ping timeout: 240 seconds)
[09:53:25] <bobdobbs> havenwood: I'm not sure that spawn works in this case either. If the command doesn't exist, then a traceback gets generated.
[09:59:42] *** Joins: bluedust (~bluedust@117.241.185.116)
[10:00:13] *** Joins: TomyWork (~TomyLobo@p200300e80f0067005896fca49d464985.dip0.t-ipconnect.de)
[10:01:11] *** Joins: roadie (~user@2a02:8108:ec0:1427:818d:b4d3:fe79:3823)
[10:01:50] *** Joins: dviola (~diego@user/dviola)
[10:02:57] *** Quits: bluedust_ (~bluedust@81.92.206.10) (Ping timeout: 240 seconds)
[10:11:37] *** Quits: ur5us (~ur5us@2406:e002:6c7b:2301:f812:b76c:617f:99d7) (Ping timeout: 240 seconds)
[10:12:17] *** Quits: roadie (~user@2a02:8108:ec0:1427:818d:b4d3:fe79:3823) (Ping timeout: 240 seconds)
[10:21:31] *** Quits: mixfix41 (~homefame@user/mixfix41) (Quit: quittin')
[10:30:00] *** Joins: roadie (~user@2a02:8108:ec0:1427:818d:b4d3:fe79:3823)
[10:42:29] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[10:50:17] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 240 seconds)
[10:55:51] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[11:25:16] *** Joins: hd1 (~hd1@cpe-172-91-170-129.socal.res.rr.com)
[11:25:35] <hd1> https://github.com/ksss/kqueue/issues/1 anyone encounter this?
[11:45:44] *** Joins: Rounin (~david@84.212.130.215)
[11:55:14] *** Joins: ur5us (~ur5us@2406:e002:6c7b:2301:1b18:b746:eaa9:fad6)
[11:58:53] <havenwood> bobdobbs: I mean use system but the docs from spawn.
[11:59:10] <havenwood> The system docs just reference the same options from spawn, but use system.
[11:59:21] <havenwood> Command should work as I showed it.
[12:09:27] *** Quits: roadie (~user@2a02:8108:ec0:1427:818d:b4d3:fe79:3823) (Quit: ERC (IRC client for Emacs 25.3.50.1))
[12:17:49] *** Quits: hd1 (~hd1@cpe-172-91-170-129.socal.res.rr.com) (Quit: Connection closed)
[12:18:57] *** Quits: ur5us (~ur5us@2406:e002:6c7b:2301:1b18:b746:eaa9:fad6) (Ping timeout: 240 seconds)
[12:20:52] *** Quits: Pipip (~Pip@user/Pipip) (Quit: Ex-Chat)
[12:54:23] *** Joins: Guest3367 (~vit@chello085216193138.chello.sk)
[13:14:26] *** Joins: oxfuxxx (~oxfuxxx@139.28.218.189)
[13:17:23] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[13:44:51] *** Quits: oxfuxxx (~oxfuxxx@139.28.218.189) (Ping timeout: 256 seconds)
[13:45:04] *** Joins: taupiqueur (~taupiqueu@63.144.204.77.rev.sfr.net)
[13:50:36] *** Joins: oxfuxxx (~oxfuxxx@2a01:e0a:268:92c0:e159:4fec:fb54:1915)
[14:00:22] *** Quits: oxfuxxx (~oxfuxxx@2a01:e0a:268:92c0:e159:4fec:fb54:1915) (Ping timeout: 268 seconds)
[14:15:21] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[14:17:55] *** Joins: roadie (~user@2a02:8108:ec0:1427:818d:b4d3:fe79:3823)
[14:26:10] *** Quits: bluedust (~bluedust@117.241.185.116) (Remote host closed the connection)
[14:31:19] *** Quits: John_Ivan (~John_Ivan@31-187-33-75.dynamic.upc.ie) (Ping timeout: 256 seconds)
[14:33:48] <rapha> hi all
[14:34:24] <rapha> why might Sequel insist that "SQLite3::CorruptException: database disk image is malformed" although with `sqlite3` it opens just fine and `pragma integrity_check;` say all is fine?
[14:34:26] <rapha> says*
[14:36:09] *** Joins: bluedust (~bluedust@117.241.185.116)
[14:36:50] <jhass[m]> maybe the command line tool and the ruby binding link against different versions of libsqlite3?
[14:37:12] <jhass[m]> Or you're simply not opening the same file actually :P
[14:37:53] <rapha> I made sure about the latter before asking :P
[14:38:13] <rapha> Hmm, the former sounds something to look into, tho
[14:38:24] <rapha> Also happy new year!
[14:38:32] <jhass[m]> thanks, same to you :)
[14:39:42] <jhass[m]> a blind bundle pristine sqlite3 / gem pristine sqlite3 might also be worth a shot
[14:50:17] *** Quits: roadie (~user@2a02:8108:ec0:1427:818d:b4d3:fe79:3823) (Ping timeout: 240 seconds)
[14:58:13] *** Joins: roadie (~user@2a02:8108:ec0:1427:818d:b4d3:fe79:3823)
[15:04:11] *** Quits: bluedust (~bluedust@117.241.185.116) (Remote host closed the connection)
[15:17:01] *** Quits: roadie (~user@2a02:8108:ec0:1427:818d:b4d3:fe79:3823) (Ping timeout: 240 seconds)
[15:34:47] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 256 seconds)
[15:36:53] *** Joins: roadie (~user@2a02:8108:ec0:1427:818d:b4d3:fe79:3823)
[15:46:29] *** Joins: John_Ivan (~John_Ivan@31-187-33-75.dynamic.upc.ie)
[16:07:25] *** Quits: kaleido (~adam@user/kaleido) (Ping timeout: 250 seconds)
[16:27:58] *** Joins: bluedust (~bluedust@117.241.185.116)
[16:29:11] *** Quits: taupiqueur (~taupiqueu@63.144.204.77.rev.sfr.net) (Ping timeout: 256 seconds)
[16:34:17] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[16:59:27] <John_Ivan> any reason why the "write" method isn't listed here? https://ruby-doc.org/core-2.5.0/File.html
[17:02:10] <John_Ivan> nvm. it's in the IO parent.
[17:12:21] *** Quits: nmollerup (~nmollerup@customer-2a00-7660-1612-0168-cfa8-be86-5a22-ee27.ip6.gigabit.dk) (Remote host closed the connection)
[17:20:05] *** Joins: bluedust_ (~bluedust@117.241.191.1)
[17:22:27] *** Quits: bluedust (~bluedust@117.241.185.116) (Ping timeout: 256 seconds)
[17:25:41] *** Quits: keinbock (uid6451@id-6451.helmsley.irccloud.com) ()
[17:26:06] *** Joins: nmollerup (~nmollerup@customer-2a00-7660-1612-0168-fdd8-467a-d6e1-5c28.ip6.gigabit.dk)
[17:34:08] *** Quits: bluedust_ (~bluedust@117.241.191.1) (Remote host closed the connection)
[17:50:55] *** Quits: TomyWork (~TomyLobo@p200300e80f0067005896fca49d464985.dip0.t-ipconnect.de) (Remote host closed the connection)
[17:52:00] *** Joins: bluedust (~bluedust@117.241.191.1)
[18:15:42] <libsys> sup guys... question... I want to create a file which only contains routes in a hash and I can load programatically later
[18:16:52] <libsys> but I only can think on reading the file and then running eval, that's right, but seems hackish
[18:16:58] <libsys> is there a more elegant way?
[18:17:11] <libsys> I need to import the same routes on 2 different files
[18:17:27] <libsys> /contexts
[18:21:37] <libsys> *actually it's an array of hashes
[18:24:56] <adam12> Is the file supposed to be user-editable? or plaintext?
[18:27:07] <Hess> does `Kernel#load` solve your problem?
[18:28:08] <Hess> https://www.rubydoc.info/stdlib/core/Kernel%3Aload
[18:33:53] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Remote host closed the connection)
[18:34:40] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[18:35:22] *** Joins: RawFiend (~textual@176.55.118.178)
[18:44:44] <libsys> adam12: it should be ruby code ... idk what you mean by user-editable
[18:47:06] <libsys> Hess: hmm... probably, but IDK how... if I assign a local variable routes = [{...}}] and then Kernel#load I can't read routes
[18:47:36] <libsys> this is what I'm doing now: LeanWeb::App.new(eval(File.read('routes.rb'))).build_static
[18:47:52] <libsys> and inside routes.rb is only an array of hashes
[18:52:43] <adam12> libsys: I just meant if you expected people to edit them or not. Since if not, you could of stuck them in PStore or something.
[18:53:31] <adam12> I don't see why eval would be an issue here.
[18:55:07] *** Quits: RawFiend (~textual@176.55.118.178) (Remote host closed the connection)
[18:56:03] <adam12> Maybe wrap it in a method so you don't see the eval as the client.
[18:56:07] *** Joins: kaleido (~adam@havokworks.io)
[18:56:08] *** Quits: kaleido (~adam@havokworks.io) (Changing host)
[18:56:08] *** Joins: kaleido (~adam@user/kaleido)
[18:56:16] <adam12> LeanWeb::App.load_routes("routes.rb")
[18:59:02] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[18:59:55] <libsys> adam12: right, I think that's the way to go
[19:02:57] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[19:04:45] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[19:06:49] *** Joins: taupiqueur_ (~taupiqueu@43.245.204.77.rev.sfr.net)
[19:08:59] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[19:30:10] *** Quits: MeowcatWoofWoofF (~rosefoxma@2001:470:69fc:105::c74e) (Quit: You have been kicked for being idle)
[19:32:17] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 240 seconds)
[19:42:16] *** Joins: Guest51 (~Guest51@047-047-011-166.biz.spectrum.com)
[19:42:37] *** Quits: Guest51 (~Guest51@047-047-011-166.biz.spectrum.com) (Client Quit)
[19:47:19] <havenwood> libsys: or check out apeiros' literal_parser gem: https://github.com/apeiros/literal_parser
[19:47:24] *** Quits: rhe (~rhe@labyrinth.rhe.jp) (Quit: ~ *)
[19:47:25] <havenwood> No YAML? :P
[19:47:56] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:49:22] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[19:49:44] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[19:51:15] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[19:52:42] *** Joins: rhe (~rhe@labyrinth.rhe.jp)
[19:54:58] *** Quits: mmalter (~mmalter@88.126.10.237) (Read error: Connection reset by peer)
[19:56:29] *** Joins: Common-Lisp (~user@2600:1700:94cc:cf:41f4:406c:e43f:aea0)
[19:58:46] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[19:59:58] *** Joins: gproto23 (~gproto23@user/gproto23)
[20:32:14] <adam12> Connected Rubygems webhook to gemdocs.org. New releases of all gems should start being added automatically.
[20:32:28] <adam12> It will be interesting to see what this does for disk usage. Some gems are absolutely enormous.
[20:32:41] <adam12> I've moved to zstd for compression and I'm seeing about a 5:1 compression ratio currently.
[20:37:31] *** Quits: kaleido (~adam@user/kaleido) (Ping timeout: 256 seconds)
[20:38:57] *** Quits: Common-Lisp (~user@2600:1700:94cc:cf:41f4:406c:e43f:aea0) (Ping timeout: 240 seconds)
[20:44:07] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[20:48:47] <rapha> so my boss, of all poeple, just asked if there is something like Python's Spyder IDE for Ruby
[20:48:58] <rapha> i.e. where you can see all variables, play with them
[20:49:07] <rapha> basically irb/pry but more visual, with a nice GUI
[20:49:23] <rapha> RubyMine is deffo too expensive and i can't find something like that in VSCode ... any others?
[20:49:56] <adam12> VSCode + Debug.gem might be OK, but you're inside a debugger so .. maybe not?
[20:50:14] <rapha> i think that'd take it a little too far, yeah
[20:50:26] <adam12> There's this one too: https://github.com/nguyenquangminh0711/ruby_jard still debuggerish
[20:51:05] <rapha> and needs to be put into the code manually
[20:51:17] <rapha> i think most ruby people are just happy with pry as it is
[20:52:21] <adam12> irb has picked up most of the pry pieces. I still use pry out of habit, and if I need to do a custom console, but outside of that, pry sees less usage for me lately.
[20:52:28] <adam12> And I'd rather run debug.gem than binding.irb almost always.
[20:52:41] <rapha> hmmm no reason so far to stop using it
[20:53:00] <adam12> Maybe you could do debug.gem, rdbg your command, then configure watch or outline or whatever the options are to display all variables at program pause.
[20:53:05] <rapha> will try Debug.gem ... so far i've lived okay with printf debugging
[20:53:53] <rapha> i do see the appeal of having an IDE where you can have a file open together with a terminal, run the file, then see your stack and play with it
[20:54:11] <rapha> (or maybe even interact with your stack visible, as Matlab allows one to do)
[20:54:21] <rapha> visually*
[20:54:36] <adam12> You can get that with the debug extension for vscode I believe.
[20:54:40] <rapha> hmm
[20:54:42] <rapha> will try then
[21:00:30] <rapha> adam12: so that's nice in terms of seeing the stack, but then you click on "debug console" and type "puts 'blah'" and to see the output you have to click back on "terminal". sad that they didn't find a way to make those two tabs one single tab.
[21:03:32] <rapha> okay, told him about it. we'll see how that goes.
[21:03:51] <rapha> thanks!
[21:04:30] <rapha> jhass[m]: fwiw that didn't help (gem pristine) and i ended up rebuilding the database on that same computer with that same sequel gem which needs to be able to access it.
[22:05:47] *** Joins: dangerousdave (~dangerous@host-92-16-216-211.as13285.net)
[22:06:45] <dangerousdave> Anyone else here have a policy whereby additional code review approvals must be sought for complex, or extensive code changes?
[22:08:43] *** Quits: bluedust (~bluedust@117.241.191.1) (Remote host closed the connection)
[22:10:58] <adam12> dangerousdave: How do you mean?
[22:11:10] <adam12> dangerousdave: After initial review, or if the code is complex, more than 1 review is necessary?
[22:16:59] *** Quits: dangerousdave (~dangerous@host-92-16-216-211.as13285.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:33:31] *** Joins: goldfish (~goldfish@user/goldfish)
[22:40:53] *** Quits: smp (~smp@user/smp) (Quit: ZNC 1.8.2 - https://znc.in)
[22:41:04] *** Quits: taupiqueur_ (~taupiqueu@43.245.204.77.rev.sfr.net) (Remote host closed the connection)
[22:41:47] *** Joins: taupiqueur (~taupiqueu@43.245.204.77.rev.sfr.net)
[22:43:52] *** Joins: smp (~smp@user/smp)
[23:07:36] *** Joins: RawFiend (~textual@176.55.118.178)
[23:29:41] *** Quits: RawFiend (~textual@176.55.118.178) (Quit: Gone away...)
[23:51:48] *** Joins: RawFiend (~textual@92.45.117.58)
[23:56:17] *** Quits: RawFiend (~textual@92.45.117.58) (Ping timeout: 256 seconds)
[23:58:58] *** Joins: ur5us (~ur5us@2406:e002:6c7b:2301:1b18:b746:eaa9:fad6)
