[00:00:15] <shka> actually, it is possible
[00:00:49] <shka> you don't have to destroy fundamentals of blockchain, you simply have to shake it
[00:01:12] <selwyn> hm
[00:01:41] <sm2n> just break the hash functions they use and drop it as a 0day
[00:01:49] <shka> cryptos are operating on the confidence, if you put a shade on confidence, and more of factors co-occur they may simply take decade to recover  
[00:02:29] <shka> if bitcoins will become hot potato, all other cryptos will crush as well
[00:03:02] <selwyn> you have to discover as yet unknown symmetries in sha-2 and hope that they are exploitable to produce an efficient quantum algorithm
[00:03:51] <shka> and cryptobros may find something else 
[00:04:29] <shka> anyway, remember that cryptos can't function without influx of cash
[00:04:52] <shka> cut that out, one way or another and rats starts to leave the sinking ship
[00:05:42] <selwyn> drone fired missiles may in the end be easier
[00:06:58] *** Joins: Masinterlisp (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[00:08:33] <shka> "i have your nft right here, punk"
[00:11:43] <hayley> Apparently that NFT video claims that Scuttlebutt uses a blockchain, because it maintains a causality graph of messages.
[00:11:45] <hayley> I'll admit it's petty, but I don't think I care to watch it now.
[00:13:03] <sm2n> lol
[00:13:08] <sm2n> that's a pretty dumb take
[00:14:01] <hayley> Netfarm uses a blockchain now. So does Matrix!
[00:14:12] <hayley> Anyone want to place bets on XMPP? I haven't read the spec.
[00:14:46] <pl> shka: I still think AGM-114R9X is quicker way to drop the confidence than using quantum computer to "break" sha256
[00:15:11] <shka> not as effective 
[00:15:11] <pl> especially since AGM-114R9X doesn't leave space for pushing "post-quantum BS"
[00:15:40] <shka> "AGM-114R9X does not judge, it just hates"
[00:15:58] <pl> when I pull the trigger, I definitely judge
[00:16:21] <pl> but then, if I had enough of those to put a dent in cryptobullshit, I could just change the govt
[00:16:28] <hayley> (Well, it _does_ make the claim, pull up the transcript and search "Blockchain-based social network Scuttlebutt")
[00:16:51] * hayley uploaded an image: (114KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/abrXMNJQzLUbKvhQvLtBvWHN/lamport-is-dead-inside.jpeg >
[00:18:13] <hayley> And I suspect that people complaining about reliable deletion in distributed systems are either oblivious to the existence of being able to copy things yourself, or want to plug the analog hole.
[00:19:11] <sm2n> hayley: You are exhibiting dangerous amounts of right-clicker mentality. This incident has been reported to the relevant authorities.
[00:20:05] <hayley> sm2n: But it's ironic though. They joke about right-clicking NFTs, but can't imagine copy-pasting text out of IRC/Twitter/Discord/whatever not-distributed platform is cool these days.
[00:20:06] <moon-child> right-clicker mentality?
[00:20:13] <moon-child> oh that
[00:20:24] <moon-child> 'what colour are your bits'
[00:20:52] * gilberth 's bits are fast red bits.
[00:20:54] <sm2n> moon-child: they are signed by microsoft, can I please leave now?
[00:21:06] <moon-child> sm2n: stolen paint!
[00:21:17] <hayley> https://www.youtube.com/watch?v=DySNnz5N9WA
[00:21:18] -ixelp- Green Is The Colour - YouTube
[00:21:37] <sm2n> moon-child: I only use 100% genuine free range organic microsoft coloured bits
[00:22:08] *** Quits: shka (~herr@109.231.0.226) (Quit: Konversation terminated!)
[00:22:14] <gilberth> Organic? You mean as in green washed?
[00:22:21] * hayley expects to run into problems with some for talking about cryptocurrency too much. But she did work on a replicated object system for 3 years, and they didn't, so too bad.
[00:22:49] <sm2n> hayley: How did the joke go? "The internet is five websites each consisting of screenshots of text from the other four"
[00:23:02] <hayley> Right.
[00:23:46] <sm2n> gilberth: I mean as in straight from Redmond
[00:23:46] <hayley> But, just as one cannot prevent copying of information, one cannot ensure destruction of information.
[00:23:48] <moon-child> there's a 'humancentipad'-ish renditino of that somewhere
[00:25:37] <sm2n> hayley: just throw it in a black hole
[00:25:49] <sm2n> easy
[00:26:55] *** Joins: shka (~herr@109.231.0.226)
[00:27:01] <hayley> Sure.
[00:27:07] <hayley> (Actually, the two problems are related, as you cannot know about the copies to destroy in any meaningful way.)
[00:28:04] <sm2n> hence DRM
[00:28:54] <SAL9000> Draconian Restrictions Management
[00:28:54] <hayley> ...until someone shows up with a camera pointed at their screen.
[00:29:17] <SAL9000> hayley: EURion constellation
[00:29:24] <sm2n> hayley: prepare to be SWATed
[00:29:30] <moon-child> https://web.archive.org/web/20140516012459/https://plus.google.com/+IanHickson/posts/iPmatxBYuj2  I liked this take on drm
[00:31:16] <sm2n> moon-child: Yes, DRM is ultimately a legal hack
[00:31:53] <sm2n> see <https://locusmag.com/2020/09/cory-doctorow-ip/>
[00:31:54] -ixelp- Cory Doctorow: IP – Locus Online
[00:32:04] <sm2n> DRM is just a way to leverage IP law for profit
[00:32:09] <sm2n> and you can stick it on anything
[00:33:17] <sm2n> hence why you have IoT everything these days
[00:35:18] <sm2n> “IP is any law that I can invoke that allows me to control the conduct of my competitors, critics, and customers.”
[00:42:09] <White_Flame> gilberth: problem with things like putting cairo on the display server is that it's also used to fetch round-trip metrics for layout and line breaking, which makes sense for the client.  So many of these sorts of decisions have changed over the years that it's unknown what to put on the server, and thus everything erring on the side of full client rendering so they're not limited
[00:42:36] <White_Flame> but the display server basically just being VNC kind of sucks, too
[00:42:58] <moon-child> oh god
[00:43:09] <moon-child> _please_ don't let the csd/ssd argument happen in this channel
[00:43:12] <White_Flame> at least with X11, firefox over X is slower than firefox over a vnc session, because of all the detail being sent
[00:43:16] <sm2n> lol
[00:43:47] <White_Flame> heh, well it was "I wish that..." back in the scrollback, but yeah, there's no clear "better way" in those decision
[00:43:48] <White_Flame> s
[00:44:13] <sm2n> (to be clear, ssd are obviously superior for anything involving privileged commands)
[00:45:01] <moon-child> sm2n: stahp
[00:45:04] <moon-child> it's not even worth talking about
[00:45:51] <sm2n> moon-child: but gnome added fat bars and and !!!!
[00:47:21] <White_Flame> I don't know if some sort of lazy system where data could be on either side but ends up where it "needs to be" is possible
[00:48:32] * pl likes fully server side setup of NeWS
[00:48:38] <moon-child> White_Flame: nfs?
[00:48:55] <White_Flame> moon-child: but for application GUI state
[00:49:29] <moon-child> :)
[00:49:47] <pl> White_Flame: feels a bit like plan9, or rather, PlanB
[00:49:50] <moon-child> anyway I'll just say: no one is seriously using webgl to render web gui, and leave it at that
[00:50:35] <pl> moon-child: well... GApps recently switched to rendering onto Canvas, they might use WebGL in the future :P
[00:50:50] <pl> as in, all of Google Docs/Sheets is rendered as large canvas, at least for the content
[00:51:06] <White_Flame> webgl also isn't a remote display, afaik.  it's a local api between js and the local browser
[00:51:17] <cyberbanjo> Gmaps too right?
[00:51:33] <pl> GMaps went that way loooong ago
[00:51:43] <pl> but that made sense for rendering just the maps
[00:51:45] <moon-child> White_Flame: in the web, the page is the client and the browser the server.  That there is another server is not super material
[00:51:49] <moon-child> at this point
[00:51:54] <pl> GApps are going for rendering all of the application in canvas
[00:52:16] <pl> and yes, handling events etc. internally
[00:52:26] <pl> no DOM etc.
[00:52:32] <shka> https://www.youtube.com/watch?v=Tjgliv8nwqA
[00:52:32] -ixelp- 9.01.2022 Antonov An-225 Mrija landing in the fog at Rzeszow Airport - YouTube
[00:52:42] <shka> now that is spectacular 
[00:52:54] <pl> second most spectacular way to clear fog from airport
[00:53:07] <pl> cause they turned an IFR landing into VFR :P
[00:53:15] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[00:53:48] <pl> the most impressive I've seen was brits effectively putting the runway on fire till updraft caused london fog to fuck off
[00:54:45] <shka> but this machine, man, you just feel that something big is happening when it is in the air
[00:55:09] <pl> now if only we could have the system it was built to support :V
[00:55:22] <shka> well, that didn't work out
[00:55:30] <pl> shka: only because of politics
[00:55:37] <shka> i don't think so
[00:55:47] <pl> (one of the leaders was part of the failed moscow putsch)
[00:56:07] <shka> space planes of that size, make little sense
[00:56:10] <pl> after the putsch, yeltsin kinda made sure the putsch organizers got rid of
[00:56:19] <pl> shka: Buran wasn't just the space plane
[00:56:25] <pl> that's the difference with STS
[00:56:32] <shka> yeah, energia was awesome
[00:56:41] <gilberth> White_Flame: Which round-trips?
[00:56:44] <pl> shka: Buran was the whole "complex"
[00:56:55] <pl> shka: including things like nuclear-powered space tugs
[00:57:03] <White_Flame> gilberth: asking how many pixels wide/tall some word is to lay it out and linewrap
[00:57:13] <pl> so you could launch things to LEO and have the tug take them to higher orbit
[00:57:15] <White_Flame> unless you mean cairo on both sides
[00:57:26] <shka> pl: sure, but you would not transport that with antonov
[00:57:29] <shka> ... i think
[00:57:41] <pl> shka: Mriya was actually built to transport all parts of the system
[00:57:52] <pl> that's why it has this huge internal chamber
[00:57:55] <moon-child> White_Flame: declarative ui
[00:57:58] <moon-child> no roundtrips needed
[00:57:59] <pl> instead of just being repurposed airliner
[00:58:02] <gilberth> White_Flame: Suppose you want to send me an PDF, would you first need to ask me about my font metrics?
[00:58:13] <shka> ok
[00:58:32] <pl> shka: it replaced two converted Myashichev bombers that weren't very effective in the role
[00:58:51] <pl> the top mounts were just there for oversize cargo that was bigger than soviet loading gauge
[00:59:12] <shka> oh
[00:59:17] <shka> i didn't knew that
[00:59:22] <pl> (all other rockets soviets used were built to fit at least in parts on railway)
[00:59:35] <pl> Energia was too big for that
[00:59:41] <shka> yeah, clearly 
[00:59:48] <White_Flame> gilberth: certainly not for a pdf.  For doing layout stuff or interactivity that isn't in the vocabulary of batch, then this is the sort of stuff that always falls to such issues
[00:59:54] <shka> that's also why proton looks the way it is
[01:00:00] <pl> so first they put some outdated bombers to carry the big components, then made An-225
[01:00:14] <pl> shka: proton is a double whammy in that aspect
[01:00:23] <pl> because it's part of "Universal Rocket" family, too
[01:00:24] <shka> yeah, i know 
[01:00:31] <gilberth> White_Flame: Yes, but what information do you need from the display server?
[01:00:42] <shka> but part of the idea was to have it fit on the rail
[01:01:00] <shka> anyway, what a plane
[01:01:01] <White_Flame> gilberth: depends on what it doesn't do _completely_ :)
[01:01:24] <shka> i wonder if there will be ever something even bigger then that
[01:01:45] <gilberth> White_Flame: Sure, at the end of the day you want to push some app to the server. That's HTML/JS/CSS.
[01:02:05] <shka> maybe airship will eventually make a comback for a heavy lift 
[01:02:09] <pl> shka: technically there's one bigger, used also for space industry, i believe
[01:02:18] <shka> oh?
[01:02:21] <gilberth> All I said is that just having the Cairo API there would be a step forward.
[01:02:30] <shka> pl: the rock?
[01:02:31] <pl> but unlike Mriya it can't just move normal cargo around
[01:02:33] <shka> *rok
[01:03:09] <shka> that airplane designed for aerial satellite launch?
[01:03:13] <pl> https://en.wikipedia.org/wiki/Scaled_Composites_Stratolaunch
[01:03:22] <shka> yeah
[01:03:24] <shka> Roc
[01:03:25] <pl> and yes, it's got "Roc" nickname
[01:03:42] <shka> forgot about this one, somehow it is not nearly as impressive 
[01:04:06] <gilberth> White_Flame: As in essentially sending bitmaps and triangle lists is a bit silly. Especially the idea to render fonts at the client and sending bitmaps of the glyphs down the wire.
[01:04:33] <shka> anyway, good night all
[01:04:34] <moon-child> ^
[01:05:08] <pl> shka: Mriya takes few tons more of cargo
[01:05:12] <White_Flame> yep, as long as the client can push fonts as well and doesn' thave to rely on them already being on the server
[01:05:31] <pl> NeWS also handled interactivity on the server side if application wanted
[01:05:39] <shka> pl: sure, also that chunky look of mriya 
[01:05:58] <pl> it's also capable of smiling ;)
[01:06:13] <shka> it simply looks like an absolute unit of a plane 
[01:06:25] <shka> while Roc... yeah it is cool
[01:06:33] <shka> but not that level of cool
[01:06:38] <gilberth> White_Flame: How many fonts do exist? The server and the client could share the fonts. Each side could ask for a copy it doesn't have and would cache it.
[01:08:23] <gilberth> Once both parties know the standard fonts all will be fine. And btw the default serif and sans-serif fonts with SVG obey to the well known olde PS metrics. I generate SVGs fine without a back-channel of some sort.
[01:09:12] *** Quits: kevingal (~quassel@176.61.88.240) (Remote host closed the connection)
[01:10:10] <gilberth> X11 could have been designed that way. Also: How about to put font metrics into shared memory?
[01:11:16] <gilberth> Or put otherwise: Does PostScript talk about pixels at all?
[01:12:24] <pl> gilberth: it doesn't
[01:12:47] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[01:12:59] <gilberth> As I said. You don't need that for a display server protocol.
[01:19:09] * pl points again at NeWS handling all of GUI in server
[01:19:23] <pl> hell, PlanB did a lot of GUI in server too
[01:27:34] <hayley> .oO(What no notation as a tool of thought does to a mf)
[01:29:36] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[01:30:19] <selwyn> hm
[01:31:36] <selwyn> there are quite a lot of ways of designing graphical notation to represent quantum mechanical processes, that seem very elegant and succint
[01:32:06] <selwyn> a criticism often levelled is that they are not actually useful for anything despite being pretty
[01:32:32] * hayley is continuing taking pot shots at uninteresting articles
[01:32:34] <selwyn> though it seems that one of them is in fact very useful, so
[01:32:46] <selwyn> https://en.wikipedia.org/wiki/ZX-calculus
[01:33:12] <hayley> https://www.reddit.com/r/socialistprogrammers/comments/satwga/bicycles_for_the_mind_have_to_be_seethrough/htxn3zr/
[01:33:13] -ixelp- Bicycles for the mind have to be see-through : socialistprogrammers
[01:33:14] <White_Flame> gilberth: does postscript typically do linewrapping of text?
[01:33:23] <White_Flame> that's just the one aspect I keep coming back to that needs information
[01:33:40] <White_Flame> the PDF generator itself does all that sort of stuff with the font metrics, so that the display server doesn't, for that very particular instance
[01:34:03] <White_Flame> eg, it the flow & layout has to be computed somewhere
[01:37:22] <hayley> gilberth: https://www.youtube.com/watch?v=1m_2tMXNdhI "Just Sauerkraut Sausage"
[01:37:23] -ixelp- JUST Sauerkraut Sausage - YouTube
[01:37:36] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[01:42:51] <Masinterlisp> postscript never does like wrapping
[01:44:02] <Masinterlisp> in practice
[01:47:12] <White_Flame> yeah, I thought so.  I mean, it's a turing complete language, but that level of work is assumed to already have been done the 'client' before PDF/PS is output
[01:47:23] <White_Flame> *by the 'client'
[01:47:55] <White_Flame> so if a window is resized, for instance, that's not part of what PS encapsulates.  The client has to reflow
[01:54:03] *** Quits: Masinterlisp (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (Quit: ~ Trillian - www.trillian.im ~)
[02:02:44] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[02:04:02] <gilberth> When I need to reflow, the only feed back I need is the new width.
[02:05:32] *** Parts: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) ()
[02:06:31] <White_Flame> and you need the fonts, and all the layout information, etc etc
[02:06:39] <White_Flame> can't just dump that on the server, at least not with typical PS/PDF
[02:06:57] <gilberth> White_Flame: The font does not involve a round trip of any kind. What for?
[02:07:14] <hayley> So my "explosive decompression" issue with compressing object pointers is alleviated by never mutating, if you make sure pointer distances never grow.
[02:07:32] <White_Flame> gilberth: well, if you have it both locally and at the server, ti's not an issue
[02:07:38] <hayley> This can be achieved by either using a non-moving GC, or a sliding GC which will only decrease pointer distances, because it preserves object ordering.
[02:08:27] <White_Flame> but this also is the semantic issue of what is the content vs presentation?  can you have 2 views of the same information but at 2 different window resizes?  certainly that doesn't (usually) change the underlying document info, only the display info
[02:08:37] <gilberth> White_Flame: Yes, as I said. Using well known common fonts is the common case. There isn't much variation. And when in doubt offer sharing the font.
[02:09:19] <White_Flame> there's weird edge cases like a multimonitor system with different DPI per
[02:09:20] <gilberth> White_Flame: I talk about a display server protocol, you talk about a formatting protocol.
[02:09:37] <White_Flame> the main issue is what exactly is offloaded to the display server?
[02:09:44] <gilberth> And how would DPIs change a thing? Does PS talk about DPI?
[02:10:33] <White_Flame> it's a situation where you mgiht be talking to 2 different servers simultaneously, and if the client needs something per
[02:10:48] <White_Flame> but yeah, I don't see this sort of thing as "sufficient"
[02:11:00] <White_Flame> it's just "offload everything else to client's local rendering before sending it out"
[02:11:07] <White_Flame> and yields the same problema s you pointed out before
[02:11:25] <White_Flame> in that the server features get less used, and the client ends up doing more
[02:12:28] <gilberth> Yes, and a 1Gbp/s local network isn't suffice to run a web browser anymore. It is pushing just pixels all the time.
[02:13:20] <White_Flame> is it?  or is it pushing tons of pre-rendered bitmaps and compositing them on X?  because it's just _that_ slow :-P
[02:13:50] <gilberth> idk, it's unusable over ethernet.
[02:13:52] <White_Flame> I would think it'd be faster if it were just a full bitmap update all the time :-P
[02:14:17] <White_Flame> as yeah, I've experienced the same
[02:14:56] <gilberth> While I could use my Core X protocol CAD applictation remotely over a high latency DSL line just fine.
[02:15:31] <White_Flame> yep, X11 is a collection of cascading failures of usability over the years
[02:15:46] <White_Flame> in terms of complex-visual remote use
[02:16:02] <gilberth> And they push everything on the client. Even keyboard mapping.
[02:17:33] <gilberth> I mean, with XKB the keyboard mapping is in a file.
[02:18:08] <gilberth> The keyboard mapping should be a property of the terminal I use, not the application I use.
[02:20:30] <White_Flame> it's yet another complex issue
[02:20:44] <White_Flame> what's the compatibility table of well-known keys that all terminals & all applications can map to?
[02:21:26] <gilberth> It's an issue that doesn't get any easier when you push all that complexity on the client.
[02:21:37] <White_Flame> yep, good ol' kick the can down the road
[02:23:22] <gilberth> And protocol-wise it isn't that complex either. At the end of the day an application wants a stream of characters and function keys typed, perhaps with a few modifier bits attached.
[02:26:24] <gilberth> A vanilla application should be bothered by multiple keymaps the user could switch, whatever "shift levels" there are and composition.
[02:26:28] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[02:26:47] <White_Flame> alt or alt-gr or meta?  backspace, delete or rubout?  is positional supported?
[02:27:21] <White_Flame> this keyboard has copy/paste/undo/help etc keys, but the application expects ^c ^v ^z F1
[02:27:47] <White_Flame> hard to force only the common denominator
[02:27:55] <gilberth> White_Flame: Should the application be bothered about how your mode_switch is supposed to work? It wants a character.
[02:28:53] <gilberth> White_Flame: About ^c ^v ^x you talk about one higher abstraction level than I do.
[02:29:32] <White_Flame> well, that abstraction is important to the user
[02:29:56] <White_Flame> and it is the loss of abstraction that makes UX difficult
[02:30:32] <gilberth> How far do you want to go? Editor commands? Which one?
[02:30:41] <White_Flame> and yeah, I'm always asking for machines to "understand" more abstraction :)
[02:30:54] <White_Flame> yep,t hat's the question I posed
[02:31:15] <White_Flame> there's lots of different keyboards out there, although certainly there's a modern settling in
[02:31:22] <gilberth> Actually I would love when there would be kind of universal editor server of some sort that all apps use which want some editable text.
[02:31:49] <White_Flame> and copy/paste/undo/help etc are used in way more than just text editors
[02:32:16] <gilberth> White_Flame: Still, when you write an application, are you concerned how I type my "ß" today?
[02:32:32] <epony> vi and emacs are conventions, from paging and navigation to line editing and libraries and in-application edit/text areas
[02:32:48] <epony> compose key
[02:32:53] <epony> ß
[02:33:10] <gilberth> White_Flame: Then do as CLIM does and introduce gestures. Have abstract common gestures for CUT, PASTE, COPY, HELP, etc.
[02:33:56] <gilberth> Let the user along with a keyboard mapping also configure if his PASTE is c-v, s-v or c-y.
[02:34:04] <epony> some editors like oberon/acme have a list of actions to click-execute
[02:34:13] <White_Flame> nope, but that's because I'm receiving an already-constructed stream of utf-8 text, not a keyboard interface
[02:34:17] <White_Flame> (lagged a few lines)
[02:36:02] <gilberth> Well 99% of all applications don't want more than a stream of characters and function keys depressed perhaps with bucky bits. Only because 1% may want a low-level keycode pressed / released interface does not warrant to push all of it to all the clients.
[02:36:12] <epony> wowsers are webshit (browsers are disastrous captive interfaces with all the wrong choices you can do when designing applications at the same time)
[02:37:10] <gilberth> Again, I am not talking about toolkits but about a display server protocol. And that protocol should be as device-independent as feasible and network transparent.
[02:37:11] <epony> the worst problem is inefficiency, overhead, inconsistency and lack of any standards and convention and modularity, it's just a horror story
[02:37:44] <gilberth> The former X11 never had, the latter it originally got almost right. Current modern X11 has neither.
[02:37:55] <epony> that comes from desktoy vendors like FDO (free desktop .org)
[02:38:06] <gilberth> It degenerated to an overly complex VNC.
[02:38:57] <epony> yep, X11 is modular and has some standards or de-facto standards "intent" and stacking features (mandatory for interfaces and protocols that are independent and non-captive by vendor / application)
[02:39:16] <gilberth> Take graphics. What does a RENDER (Cairo) application use? It sends bitmaps and triangles. That's it.
[02:39:27] <epony> the desktop is the opposite of that, destroys all modularity and composable nature becomes a "pluggable" app like a web browser
[02:39:40] <epony> cairo is just SHIT.
[02:39:59] <epony> bad example, but modular approach to applications is the correct choice
[02:40:30] <epony> that part for editing libraries is fine too
[02:40:45] <epony> readline, curses etc
[02:40:57] <gilberth> What X11 got right though, is to be toolkit agnostic.
[02:41:03] <epony> correct
[02:41:34] <epony> that thing is wiped with the wayland / weston / wayshit
[02:43:55] <epony> if desktops followed same modular and standisation / composable-modular and replaceable (compliant) approach ot their designs, we'd have now a couple of universal replaceable libraries and modules and interface tooling separate, extending the X server instead of replacing parts of it with a compositor and calling that a "revolution" while it is just "the wrong design of applications and protocols" expanding its wrongness
[02:46:08] <epony> the computer works better without a DE (desktop environment) and compositors (as part of the DE, just standalone optional toggle on/off on demand), it's overhead it's weight it's worse reliability and quality
[02:47:04] <epony> applications run just fine reusing libraries and widgets without several disastrous protocols to break your system reliability and expose it to remote code execution and trivial remote takeover
[02:47:53] <epony> OLE/CORBA/RPC/RDP/DBUS/HAL are just disasters
[02:49:22] <epony> they come from commercial environments like MSFT Office & Windows and similar, and make no sense on a system where files and standards are the workflow organisation, not pipes between broken application midlayer that exposes you to 100% failure
[02:50:11] <epony> so.. X standalone >> Commercial and Free Desktops
[02:51:12] <epony> it's like the modular editing vs integrated environments ;-) there are "affiliates" in each model and "convention"
[02:56:09] <epony> it's still a loss that multi-seat / multi-user X capability is not provided by general distributions and popular "installments"
[02:57:15] <epony> the modern software choices are: now do I want to run a desktop or a browser, or an office program or an IDE, or a virtual machine, cause they all eat up two computers and I have only one ;-)
[02:59:53] <epony> kernel & graphics fit in 128MB RAM even today and run fine on a single core with a couple of useful lightweight applications, dualcore computers are the baseline minum and browsers assume a quadcore at minimum that is no-older than 4-8 years
[03:04:54] <epony> and, the other problem is, free software systems are like 2x lower efficiency than proprietary ones and appear with similar capability 5-10 years delayed
[03:05:30] *** Joins: notzmv (~zmv@user/notzmv)
[03:06:29] <epony> (and have problems with standardisation and vendor lockins / incompatibilities like between browsers, between IDEs, between dekstops.. it's like the commercial BS only worse and more exacerbated in fallout)
[03:06:59] <moon-child> https://docs.rs/you-can/latest/you_can/attr.turn_off_the_borrow_checker.html   where is your crab god now??
[03:07:00] -ixelp- turn_off_the_borrow_checker in you_can - Rust
[03:07:50] <epony> speaking of rustfail has anyone checked running redox on a legacy machine? ;-)
[03:08:18] <epony> like 64bit 2C with 2-4GB RAM
[03:08:45] <epony> or let's say 32bit 1C with 1-2GB RAM
[03:09:30] <epony> (those are real machines from 2004-2008 epoch and still work in production, and are also the typical VMs)
[03:10:26] <hayley> https://www.zdnet.com/article/nasty-linux-kernel-bug-found-and-fixed/
[03:10:27] -ixelp- Nasty Linux kernel bug found and fixed | ZDNet
[03:10:28] <hayley> "The legacy_parse_param() "PAGE_SIZE - 2 - size" calculation was mistakenly made an unsigned type. This means a large value of "size" results in a high positive value instead of a negative value as expected. Whoops. [...] One big reason why Rust is being incorporated into Linux is that Rust makes this kind of memory mistake much harder to do."
[03:10:46] <hayley> Narrator: It wouldn't.
[03:11:58] * selwyn just made another discord bot with abcl
[03:12:00] <epony> the nasty Linux bug is called crabcer
[03:12:16] <moon-child> reminds me of this https://www.zdnet.com/article/cleaning-up-the-linux-kernels-dependency-hell-this-developer-is-proposing-2200-commit-changes/
[03:12:17] -ixelp- Cleaning up the Linux kernel's 'Dependency Hell': This developer is proposing 2,200 commit changes | ZDNet
[03:12:30] <moon-child> 'compile times are bad ... this is one reason why they are adding rust to the linux kernel'
[03:12:41] <epony> hahaha
[03:13:03] <epony> crustymccrustface
[03:13:14] <selwyn> lol
[03:14:18] <epony> 8GB needed to compile rustic applications is not that uncommon now
[03:15:09] <epony> wtf my 32bit machine has only 2GB RAM and works fine, that's why Firefox dropped support for 32bit machines
[03:15:34] <epony> it uses 250-300 MB when running (the browser)
[03:15:42] <epony> (per tab)
[03:16:02] <epony> well, pools some of that but fits in 1GB RAM fine most of the time on light use
[03:16:44] <epony> 2GHz CPU with 2T and 2GB RAM, what's bad about it, Rust?
[03:16:53] <hayley> ...well, unless you do further bounds checking, which will result in a hard crash rather than corruption. Not great, but not as bad. 
[03:18:02] <epony> the "safety" languages are (false) safety that crashes anyway and (bloat) dynamic garbage not suitable for systems programming
[03:18:36] <epony> the dynamic part is already part of the kernel, no need for a dynamic second layer of interpreters in there
[03:18:49] <sm2n> "kernel"? who needs that?
[03:18:54] <epony> embeddable languages are compilers in essence
[03:19:21] <sm2n> rust compile times are amazingly awful to the point that it's funny
[03:19:21] <epony> so, lua fits there, ecl fits, and ebpf fits, and dtrace fits
[03:19:32] <epony> rust does not fit
[03:20:02] * hayley changes one regexp
[03:20:03] <hayley> (Reminds me, that <key, channels, version, value> tuples in cl-decentralise2 are reluctantly called "blocks", at loss of a better name.)
[03:20:03] * hayley waits 20 seconds for rebuild
[03:20:16] <epony> it's like a mutant head baby trying to go back in its mother.. mother headshots baby rust
[03:20:17] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[03:20:32] * hayley still gets interpreted NFAs
[03:20:48] <epony> you're special/fancy/application layer
[03:21:50] *** Joins: dra (~dra@2a04:4540:6402:9000:3d71:f20b:5e55:173f)
[03:21:52] <dra> Hello!
[03:22:11] <epony> the real test for Rust will be to make it recompile itself in system boot-up
[03:22:23] <epony> (not happening)
[03:22:31] <mfiano> (block nil kechaveva)
[03:22:34] <hayley> Hello dra!
[03:22:36] <hayley> A funny tune compared to OMRN, wherein you change one regex, wait approximately nothing, and get native code with linting.
[03:23:25] <hayley> "Rust is a slow, interpreted language, with no compile time analysis, and Lisp is fast, compiled, and has a helpful compiler."
[03:23:41] <hayley> mfiano: Yes, also a collision with blocks in Common Lisp. I guess I could say "key-channels-value" tuple but that gets boring quickly.
[03:23:49] <mfiano> Happily solving everyone's naming problems except my own.
[03:24:05] <hayley> KCV tuple? I don't think I have invented any acronyms in the documentation though.
[03:24:35] <hayley> Okay, now shorten UPDATE-SYSTEM-FOR-NEW-INTERESTING-OBJECT-PREDICATE :)
[03:27:01] <hayley> I could say INVALIDATE-INTERESTING-CACHES, I guess, but that seems to conflate why we need to do this with what we tend to do.
[03:29:38] <hayley> We just need to be aware of when the predicates change, to invalidate caches. But I don't want to say "invalidate caches", because otherwise, no one knows we cache the answers. It's just not a thing that exists. HANDLE-INTERESTING-SET-CHANGES?
[03:29:38] <White_Flame> I see two of the hardest problems in computing are being tackled in the last 4 lines ;)
[03:29:38] * hayley checks the CLIM spec for ideas.
[03:31:19] <hayley> CLIM has HANDLE-REPAINT, and NOTE-OUTPUT-RECORD-CHILD-CHANGED in 21.3 "Incremental redisplay protocol". The latter sounds nice.
[03:33:12] <mfiano> #'%gl:draw-elements-instanced-base-vertex-base-instance
[03:33:25] <mfiano> OpenGL has some long function names
[03:33:30] <gilberth> Are you looking for COMMAND-LINE-READ-REMAINING-ARGUMENTS-FOR-PARTIAL-COMMAND?
[03:33:33] <mfiano> I remember an even longer one, but I can't find it
[03:34:32] <hayley> And the lambda list looks somewhat relevant. gilberth: Though the lambda list is not in the right spot in the spec; it's currently a paragraph after the "Generic Function" line, not in the line.
[03:34:32] <hayley> record child mode old-position old-bounding-rectangle stream &optional erases moves draws erase-overlapping move-overlapping &key check-overlapping
[03:34:34] <gilberth> In CLIM? No I did a (sort (apropos-list "" :CLIM) '< :key (lambda (x) (length (string x))))
[03:35:31] <gilberth> hayley: Yes, this glitches happen at times, the LaTeX is not perfect.
[03:36:10] <hayley> gilberth: How much trouble could I get in for writing something like "Rust is a slow, interpreted language, with no compile time analysis, and Lisp is fast, compiled, and has a helpful compiler." w.r.t regular expression engines?
[03:36:14] <gilberth> I still like (defmethod port ((port port)) port)
[03:36:53] <mfiano> hayley: None. The internet is a cruel place where anyone can say anything they want.
[03:37:07] <gilberth> hayley: Well, it's not Rust that is interpreted here.
[03:37:53] <epony> did Rust exist pre-LLVM?
[03:37:59] <mfiano> C is a slow interpreted language in that respect, too.
[03:38:22] <hayley> mfiano: Doesn't work like that, my ex left me after I wrote "hello cringe department" to someone one too many times.
[03:38:23] <gilberth> A language isn't interpreted or compiled.
[03:38:33] * hayley uploaded an image: (57KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/YEoCsqzqoClGdFlCNtWvZwVY/go-on.jpg >
[03:39:25] <White_Flame> "Anime was a mistake.  Also computers." - Hayao Miyazaki
[03:39:32] <epony> if a browser company is creating a programming language, that is a sure bet it is just as good as their primary product
[03:39:51] <hayley> Right. It's an inversion of convential "wisdom".
[03:39:54] <White_Flame> gilberth: English is both interpreted, and compiled into books ;)
[03:40:38] <gilberth> White_Flame: Are there JIT compilers too?
[03:40:49] <random-nick> well CL is compiled since the standard specifies COMPILE
[03:40:55] <White_Flame> probably, the brain does hotspot/hebbian optimization
[03:41:18] <gilberth> random-nick: CL specifies minimal compilation and that is macro expansion.
[03:41:29] <White_Flame> random-nick: but COMPILE isn't specified to do anything "compile"-like ;)
[03:42:03] <White_Flame> (I always thought that linkers should be called compilers, because they compile together a compilation of artifacts)
[03:42:26] <White_Flame> (while "compilers" are (optimizing) translators)
[03:42:57] <gilberth> At times linkers are called editors.
[03:43:13] <mfiano> Each new generation overloads the same computing terms over and over again.
[03:43:27] <gilberth> As they craft an edition.
[03:43:40] <mfiano> Just look at "arrow macros" from Clojure
[03:43:41] <White_Flame> Zelda II: The Adventure of Linking
[03:44:06] <White_Flame> and of course, computers were people
[03:44:21] <hayley> https://www.youtube.com/watch?v=VC9GI5RvRDs
[03:44:22] <White_Flame> (and maybe computers will become people again, with whatever AI laws)
[03:44:22] -ixelp- Equator - YouTube
[03:44:41] <gilberth> mfiano: What's an arrow macro? In last century's language?
[03:44:45] <sm2n> mfiano: What did "arrow macros" mean before clojure?
[03:44:48] <White_Flame> one of those chatbot talking head robots was granted citizenship in some middle eastern country
[03:45:06] * hayley now gf-free for 6 months, apparently.
[03:45:32] *** Quits: dra (~dra@2a04:4540:6402:9000:3d71:f20b:5e55:173f) (Ping timeout: 240 seconds)
[03:45:33] <gilberth> hayley: You'll survive.
[03:45:34] <hayley> Sh took the fucking partial evaluator.
[03:45:42] <White_Flame> I know fat-arrow functions from javascript :-P
[03:45:52] <mfiano> gilberth, sm2n: "writing it in arrow macro style is writing it point-free or in tacit programming style
[03:45:57] <random-nick> White_Flame: well it is specified to expand macros and resolve load time values
[03:46:03] <random-nick> that's kinda "compile"-like
[03:46:06] <sm2n> oh, yes
[03:46:13] <White_Flame> right,b ut not the translation or optimization part normally considered a "compiler"
[03:46:30] <White_Flame> macroexpansion & load time values are kinda on the input side of things
[03:46:51] <gilberth> Yep, and what you get is still Lisp.
[03:47:22] <White_Flame> all the spec means is that fully interpreted lisp implementations still have COMPILE ;)
[03:47:22] <gilberth> Or do you call cpp a compiler? Or m4? ;-)
[03:47:52] <White_Flame> should rename EVAL to INTERPRET while we're at it
[03:48:10] <gilberth> EVAL may compile.
[03:48:19] <White_Flame> sure
[03:48:29] <White_Flame> but just to be more kinda-wrongly-specific ;)
[03:48:43] <gilberth> Ok, missed that.
[03:49:04] <White_Flame> so COMPILE doesn't compile, INTERPRET doesn't interpret
[03:49:10] <White_Flame> but they still do
[03:49:20] <random-nick> is COMPILE-FILE "compile"-like enough then?
[03:49:47] <hayley> If you you COMPILE in an interpreting Lisp system, it downloads a compiler for you.
[03:50:00] <White_Flame> (ql:compile ...)
[03:50:13] <gilberth> random-nick: Is m4?
[03:50:16] <random-nick> hmm, the standard specifies that COMPILE-FILE produces "implementation-dependent binary data"
[03:50:29] <random-nick> kinda weird to include the word binary there
[03:50:30] <hayley> (ql:quickload :sbcl)
[03:50:35] <sm2n> could just spit the source file out again
[03:50:42] <White_Flame> uh oh, so if the fasl is text-based does that violate the spec? (yeah, text is stored in bytes)
[03:50:55] <gilberth> random-nick: What is binary? Isn't ASCII usually represented in binary, too?
[03:51:12] <gilberth> CLISP has text based FASLs.
[03:51:14] <sm2n> I think binary means no particular structure is mandated
[03:52:06] <random-nick> what if you have a ternary storage device?
[03:52:11] <White_Flame> or externally serialized
[03:52:40] <random-nick> gilberth: hmm, not sure about whenever or not M4 is a compiler
[03:53:22] <gilberth> random-nick: I'd say you could perhaps write a compiler in m4, if you're bored.
[03:53:27] <random-nick> I mean, something like gnu autoconfig uses m4 to compile .ac files into shell scripts
[03:54:02] <random-nick> but is m4 the compiler or are autoconfig's macro files the compiler?
[03:54:22] <gilberth> m4 itself is no compiler.
[03:54:51] <hayley> SICL FASLs are just textual representations of the AST.
[03:55:03] <moon-child> m4 is not a compiler because it has no semantics
[03:55:30] <sm2n> It must have an operational semantics, or it does nothing
[03:55:45] <moon-child> but the identity _is_ a compiler because no matter _what_ semantics you care to represent, there is no way for it to avoid preserving them
[03:55:55] <sm2n> doing nothing is an operational semantics too, yeah
[03:55:56] <moon-child> sm2n: it has operational semantics, but they are interpreted
[03:56:02] <moon-child> (m4, that is)
[03:56:10] <sm2n> hmm
[03:56:11] <moon-child> I mean, you could build a compiler for the m4 macro language of course
[03:56:34] <moon-child> but the operation of present m4 implementations is to interpret m4 macro directives.  The objects those directives operate on do not have semantics of their own
[03:57:22] * gilberth nods.
[04:02:37] *** Quits: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[04:04:24] <hayley> Would compilation pay off? SICL bootstrapping seems to be around the point where an IR interpreter is optimal, last I checked.
[04:05:56] <moon-child> pay off for what?  Bootstrapping?
[04:07:41] * moon-child still wants a dynamic closure specializer, which would make the host give closure-based compilers the same performance as regular ones
[04:07:46] <moon-child> .oO(futamura projections?)
[04:08:55] <hayley> Yeah, compilation time during bootstrapping can dominate execution time (of which there is some, yes). Not sure how tricky M4 macros, nor how much compilation would help.
[04:08:56] <White_Flame> hmm, when would it specialize?
[04:09:34] <moon-child> White_Flame: probably same as a normal jit, once you pass a certain number of executions
[04:09:39] <White_Flame> or do you mean it would specialize on the type of the given closed-over values?
[04:09:46] <White_Flame> because that is probably possible
[04:09:57] <moon-child> no I mean specializing on the values of the closed-over values
[04:10:36] <White_Flame> I also ponder the effect of i-cache thrashing via voluminous code generation per clause
[04:10:37] <moon-child> (though I can imagine doing something with type as well)
[04:10:49] <White_Flame> but I'm not sure if icache speed is much of an issue nowadays?
[04:10:55] <White_Flame> erm, size I guess
[04:11:21] * moon-child nods
[04:11:49] <moon-child> I can see also tracking frequencies at the closure creation point.  If you notice the same value is closed over many times, specialise for that
[04:11:57] <White_Flame> my revivory emulator basically concatenates source code to compile an emulated function, and those things get massive
[04:12:07] <White_Flame> instead of linking closures
[04:12:31] <White_Flame> well, if those values are immutable config for that clause, you can specialize right away
[04:13:01] <moon-child> yeah I was assuming only specializing for immutable parts of the environment
[04:13:08] <White_Flame> just make them a LET inside the generated body instead of a closure outside,a nd the compiler will figure things out for you
[04:13:10] <moon-child> (or if mutable, then at least not aliased)
[04:13:54] *** Joins: dra (~dra@2a04:4540:640a:de00:3d71:f20b:5e55:173f)
[04:14:17] <moon-child> oh no I meant something like (lambda (x) (lambda (y) (+ x y)) where you turn that into something like (lambda (x) (compile nil `(lambda (y) (+ y ,x))))
[04:14:36] <moon-child> (except the compilation happens asynch and you do an unspecialised version until it finishes)
[04:15:15] <moon-child> (also relevant: phoe's recent compile-time-branching thingy)
[04:15:16] <White_Flame> right
[04:15:34] <White_Flame> I'm eventually going to do asynch compile for revivory, it blocks currently :-P
[04:15:42] <White_Flame> but I have no default per-instruction emulation yet anywy
[04:15:51] <White_Flame> I only have a function compiler
[04:16:05] * moon-child nods
[04:16:08] <moon-child> what's revivory?
[04:16:12] <White_Flame> ivory emulator
[04:16:27] <White_Flame> symbolics, et 
[04:16:30] <White_Flame> c
[04:16:43] <moon-child> ah cool
[04:17:03] <White_Flame> code runs, but the hardware model has some bug and it crashes 240k instructions into boot :-P
[04:17:21] <White_Flame> so I'm turning my attention more to decompiling functions to figure out what's supposed to be going on
[04:17:37] <White_Flame> eg, from ivory machine code back into sexpr
[04:17:43] *** Quits: dra (~dra@2a04:4540:640a:de00:3d71:f20b:5e55:173f) (Remote host closed the connection)
[04:18:11] <White_Flame> do a lot of heap snooping to find if a function is a symbol-function fo something out there, etc
[04:18:21] <White_Flame> to find function names
[04:20:17] <hayley> I'm wary of unrolling loops, since I only want to unroll the hottest ones, yet compilation is slow enough that I can't cheaply re-compile better code.
[04:21:05] <hayley> I guess I can minimise lossage by using counters again; and only branch into unrolled code for hot loops, to keep the most useful code into i-cache. Though I won't be running out of i-cache any time soon, idk.
[04:24:16] <mfiano> https://gist.github.com/mfiano/b94fbe1c05431dd16453c467983c1960
[04:24:17] -ixelp- rgba.lisp · GitHub
[04:25:03] <White_Flame> still debugging that? ;)
[04:25:33] <mfiano> I simplified it greatly as you can see
[04:25:56] <mfiano> fiddlerwoaroof helped a ton. Trying to think of a good name as mentioned for the second variant
[04:26:21] <White_Flame> uh
[04:26:36] <White_Flame> (truncate (* r a 257) 255)
[04:26:51] <White_Flame> given an 8-bit input, is that supposed to have a 16-bit output?
[04:27:14] <White_Flame> oh wait, yeah, A is left multiplied up as well, nevermind
[04:27:17] <moon-child> mfiano: your -> macro is cute
[04:28:43] <mfiano> Thanks
[04:28:54] <mfiano> Not so for the <-> name though :/
[04:35:28] <mfiano> White_Flame: But yes, the previous macro turned out to be about 200 lines, and kept changing its requirements and growing. This new one is 2 lines, arguably 1, and does way more than the previous one, especially with the second variant, allows things like (<-> (_ (y a))...) (values y y y a). Nothing stops multiple variables of the same name for ->, but of course each transformation will be
[04:35:31] <mfiano> re-evaluated for same-named variables. This is one of the reasons <-> exists too.
[04:36:12] *** Joins: molson (~molson@2001-48F8-704A-123D-0-0-75F-1029-static.midco.net)
[04:36:39] <White_Flame> heh, cool
[04:36:43] <mfiano> (y is typically "luminance"; this is transforming a 2-channel greyscale-alpha color and returning 4 rgba components
[04:36:45] <mfiano> )
[04:37:32] <mfiano> or is "y" luma and y' luminance? i always mix those two up.
[04:38:46] <White_Flame> (car lumina) => chevrolet
[04:39:08] <mfiano> I take it by the lack of suggestions the name is either really dumb, or too difficult to name, like everything of mine :)
[04:39:22] <White_Flame> (eh, non-globally compatible branding joke)
[04:39:53] <mfiano> :)
[04:42:31] <White_Flame> be like scheme and call it "->!"
[04:42:46] <mfiano> Hey, that isn't actually a bad idea.
[04:43:12] <mfiano> You should be a #'car salesman
[04:43:15] <moon-child> ->f
[04:43:16] <mfiano> sold!
[04:44:20] <mfiano> moon-child: I actually despise the standard's n-prefix, f-suffix convention
[04:44:44] <mfiano> If I could only tell you the problems they caused me.
[04:44:51] <moon-child> I don't love it.  But I like it better than ? and !
[04:46:53] <mfiano> For example in mathematics, there is lerp of course, but trying to make a non-consing api in the same package and then you have nlerp, which conflicts with the common abbreviation for normalized lerp, which is adjacent to spherical (slerp). This convention just gets in the way too much, and it becomes quite ambiguous at times.
[04:47:11] <White_Flame> I don't love !, but ? is pretty good
[04:48:14] <moon-child> mfiano: if you were a true common lisper, you would call the latter normalized-lerp
[04:48:20] <moon-child> (aside: what is normalized lerp?)
[04:48:49] <mfiano> No, I would call it by what developers in the problem domain expect to recognize it as, which is exactly nlerp
[04:49:11] <mfiano> I develop APIs on a problem domain basis, not what some convention mandates.
[04:49:25] <moon-child> yes, that was tongue-in-cheek
[04:49:35] <mfiano> I know. I am just annoyed at the convention.
[04:50:04] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[04:50:10] <mfiano> With the above, you can't distinguish between consing normalized lerp and non-consing lerp. And this is far from the only ambiguity those conventions caused me.
[04:51:30] <mfiano> moon-child: THis might be the article I first heard about it from...not sure: https://keithmaggio.wordpress.com/2011/02/15/math-magician-lerp-slerp-and-nlerp/
[04:51:31] -ixelp- Math Magician – Lerp, Slerp, and Nlerp – Keith M. Programming
[04:51:44] <White_Flame> and clearly you're talking about testing for LER and SLER
[04:51:46] <mfiano> It's been too many years since I needed it/implemented it
[04:51:53] <mfiano> White_Flame: :D
[04:52:21] <mfiano> White_Flame: I always append -p and ignore the single word rule. Another thing I dislike.
[04:52:40] <moon-child> I see
[04:56:11] <mfiano> Looks like even Unity has "nlerp" though. It's common in games.
[04:58:42] * moon-child became all too familiar with regular ol' lerp while working out fast text rendering
[05:01:42] <mfiano> Sure. You can implement Bezier paths with some vectors and lerp
[05:01:57] <mfiano> excuse me French people for the lack of a Compose key on this computer
[05:03:43] <moon-child> well, they're basically specified that way
[05:04:06] <moon-child> my latest idea is analytic rendering of strokes (as opposed to actually implementing what I already came up with for regular outlines...), which is harder
[05:04:30] <moon-child> but I realised it kinda corresponds directly to an sdf of a bezier curve
[05:04:56] <moon-child> which is also nice because it gives you a passable antialiasing metric for free
[05:04:58] <mfiano> I used the matrix method rather than DeCastejau's (sp?) method because it was cheaper and I didn't need the added precision when I implemented them
[05:06:43] <hayley> «C'est quoi ce bordel?»
[05:06:49] <moon-child> oh--I only care about text (and maybe later also svg/pdf), so I only need quadratics and maybe cubics
[05:07:02] <mfiano> I only needed cubics
[05:07:05] <mfiano> https://en.wikipedia.org/wiki/De_Casteljau%27s_algorithm
[05:07:47] <moon-child> more interested in a fully approach that gives mathematically correct results but still runs in realtime.  Not because it's practically useful, but for aesthetic reasons
[05:07:49] <mfiano> My implementation is pretty simple. There are some crazy Bezier libraries out there: https://github.com/mfiano/common-lisp/tree/master/math/cubic-bezier
[05:07:50] -ixelp- common-lisp/math/cubic-bezier at master · mfiano/common-lisp · GitHub
[05:07:55] <moon-child> cuz it bothers me that everyone else cheats
[05:08:10] <moon-child> (e.g. trapezoidal antialiasing.  Slug only does 1d antialiasing)
[05:08:57] <mfiano> I cheat at text rendering myself
[05:09:34] <moon-child> :/
[05:09:35] <mfiano> I use multi-channel SDF atlases :) Can't get any more cheatery than that I don't think.
[05:10:03] <mfiano> But with proper kerning etc from |3b|'s awesome work.
[05:10:48] <moon-child> maaaaaaaan I really don't wanna touch unicode with a ten-foot pole
[05:11:21] <hayley> Don't we all.
[05:12:11] <moon-child> (list of Things That Have To Be Dealt With: kerning hinting rtl shaping justification hyphenation)
[05:13:14] <mfiano> markup language pre-processor, batching geometry/draw calls, etc
[05:13:21] <mfiano> text is no fun
[05:13:30] <mfiano> it is one of the things that burnt me out severely
[05:13:30] <moon-child> oh yeah batching is something I'll have to deal with at some point too
[05:13:43] <moon-child> markup I did a beautiful and amazing and perfect implementatin of though
[05:13:49] <moon-child> mfiano: huh, why do you use % prefixes for flet functions?
[05:14:52] <mfiano> I did 1/2 places there for some reason, likely because it was originally a global definition and I never changed it :P
[05:14:58] <moon-child> ahh I see
[05:15:13] <mfiano> Oh 2/3 actually
[05:15:26] <moon-child> mfiano: curve parameter should be a half-open range, I think otherwise you can get artifacts in some contexts.  Because you get a point that shows up twice
[05:16:12] <mfiano> This renders beautifully.
[05:16:52] <mfiano> Nah my algorithm accounts for those things
[05:19:42] <moon-child> (e.g. I think this happened to one gpu text renderer: cast a ray upwards that landed right in between two curves, so it counted winding contributions from both and so had unfilled pixels that shoulda been filled)
[05:20:03] <moon-child> (might be misremembering)
[05:51:48] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[05:54:49] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[05:59:57] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[06:00:44] <hayley> https://www.youtube.com/watch?v=ZbDnILX1i84
[06:00:45] -ixelp- Spacing (Remastered) - YouTube
[06:28:06] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 268 seconds)
[06:49:00] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[06:50:40] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[07:00:40] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[07:17:44] *** Quits: wheelsucker (~user@2600:8801:8c24:d000::8e14) (Remote host closed the connection)
[07:17:57] *** Joins: wheelsucker (~user@2600:8801:8c24:d000::8e14)
[07:24:06] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[07:27:02] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[07:58:48] *** Joins: [w] (~w]@2601:8c1:80:70d0::4b06)
[08:03:09] * hayley is now officially staying away from home. Phew.
[08:05:24] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:c17:d8ca:f795:73f0) (Ping timeout: 250 seconds)
[08:10:52] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Remote host closed the connection)
[08:14:14] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[08:17:55] *** Joins: semz_ (~semz@user/semz)
[08:20:34] *** Quits: semz (~semz@user/semz) (Ping timeout: 250 seconds)
[08:33:13] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:38:23] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[08:40:29] <hayley> Hm, I've tried compressing pointers from 64 to 16 bits, and the number of memory accesses is reduced to about a quarter, but it's still slower. 
[08:41:39] <hayley> My "length of linked list" test could suck, of course.
[08:42:05] <moon-child> cliff click: 'You're better off with the largest young-gen you can get and sucking on the cache misses'
[08:43:17] <moon-child> length of linked list does seem like an unrepresentative benchmark
[08:44:59] <hayley> Well, I can't do much about it, because no GC ever created understands my pointer compression scheme.
[08:46:05] <moon-child> to work, then!
[08:46:56] <moon-child> (alternately, use an oracle and do simulations; if it worked for blackburn and berger...)
[08:47:06] <hayley> :<
[08:47:45] <hayley> LOL, my grandparents' router thinks mas.to might have malware. It might also have my shitposts.
[08:48:25] <moon-child> well, it's not so bad; you could do simulated gcs and figure out what's in the nursery when
[08:48:51] <moon-child> hayley: my school's router thought a cdn was a spam|porn|something vehicle at one point
[08:49:50] <hayley> "To check your settings, log in to My Account. Then select your broadband plan, Your Add-ons, and finally Telstra Broadband Protect." Seriously?
[08:50:08] <moon-child> proxy through applied-langua.ge server?
[08:51:02] <hayley> Must I use Tor just to shitpost of all things?
[08:51:04] <hayley> Or I could use phone tethering. idk
[08:51:22] <hayley> I don't have the SSH keys on my laptop.
[08:51:31] <hayley> I have my desktop's data drive on me, because I don't expect The Incredible Hulk to not smash up my shit while I'm away. But no USB-SATA box.
[08:53:47] <hayley> moon-child: FWIW Blackburn et al didn't even use an oracle, they just deleted GC time and compared to that. Still, you have to wonder how you wouldn't get embarrasing results with that technique.
[08:54:28] <moon-child> wait so they just said 'GC takes time'?
[08:54:30] <moon-child> lol
[08:55:19] <hayley> Kinda, yeah.
[08:57:18] <hayley> So idk how those papers quantify anything. It's not like any situations produced are similar to explicit memory management at all.
[09:03:11] <hayley> "Really, the conclusion should be "the ideal memory manager with perfect knowledge of program execution would match the same performance of a memory manager with very little knowledge about the program with a sixth of the memory". And then the response would be "sure, but why the hell is that an interesting statistic?" Of course, it's not interesting at all." — https://applied-langua.ge/posts/quantifying-nothing-at-all.html
[09:03:11] -ixelp- Quantifying Nothing At All
[09:03:36] <hayley> Or, in pictoral form: https://i.redd.it/a8k7az85m5871.jpg
[09:05:46] <moon-child> well, when you put it that way it makes it pretty obvious it's quantifying _something_
[09:05:54] <moon-child> just, maybe not what somebody might have assumed
[09:07:01] <hayley> Sure. But "Quantifying Something That Probably Isn't The Difference in Performance Between Tracing Collection and Explicit Memory Management" doesn't sound so nice.
[09:10:39] <hayley> But, by following some approach to gather results, they can't have quantified _nothing._ The something just so happens to not be the difference between GC and malloc, and is not representative of any "real" programs.
[10:34:32] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Ping timeout: 240 seconds)
[10:56:48] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[11:27:32] *** Joins: shka (~herr@109.231.0.226)
[11:28:24] <moon-child> (now seems like as good a time as any to note that apl has compressed pointers for free)
[11:37:04] <hayley> If you have stuff in arrays though, you don't even need any damned pointers.
[11:38:29] <moon-child> an index is a pointer
[11:41:19] <hayley> Sure.
[11:45:05] <moon-child> then, a few things.  compression is simple; the runtime overhead of that compression is hoisted; the context is implicit (as opposed to simply relying on spatial locality), so it's determined by the programmer, so you never waste delta space skipping over irrelevant objects
[12:00:10] *** Joins: pjb (~pjb@user/pjb)
[12:15:25] *** Quits: wheelsucker (~user@2600:8801:8c24:d000::8e14) (Remote host closed the connection)
[12:15:39] *** Joins: wheelsucker (~user@2600:8801:8c24:d000::8e14)
[12:24:43] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[12:28:11] <hayley> Is f(x)=1/x a continuous function? There is a jump around x=0, though it is undefined for x=0.
[12:30:54] <hayley> Some definitions claim that you cannot have holes in the domain of a continuous function, so the domain of f(x) immediately rejects the possibility that f(x) is continuous.
[12:34:45] <moon-child> I mean, depends on your definition, seems straightforward enough
[12:35:05] <moon-child> (and, more to the point, what properties you care about)
[12:35:39] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:36:04] <gilberth> hayley: What's the \delta, \epsilon definition of continuous? I learned that a f(x) is continuous, if for each \eps > 0 exists a \delta > 0 such that for all x_0 in the domain of f holds |x-x_0|<\eps => |f(x)-f(x_0)| < \delta.
[12:37:18] <gilberth> Nah. "x in the domain". And that's the point x=0 is not in the domain, so this holds.
[12:37:34] <moon-child> (and, more to the point, there is no largest x<0)
[12:37:44] <gilberth> Good morning #lispcafe!
[12:38:27] <gilberth> moon-child: Shortest math joke: "For all \epsilon < 0"
[12:40:13] <hayley> Not sure. But there is a huge jump between x=-ε and x=ε, which does not seem continuous to me.
[12:40:28] <hayley> Good morning beach!
[12:40:29] <hayley> "But Lisps writ after the Internet got big (basically Clojure) don't suffer from the Lisp curse" Sure, because it's not real. Read the damn Redemption Arc.
[12:40:41] * hayley sighs
[12:40:56] <gilberth> hayley: Go by the definition. Or is Australian calculus different from German?
[12:41:45] <Alfr> Good morning, gilberth!
[12:41:56] <hayley> gilberth: I don't know the definition. Wikipedia claims 1/x is not continuous.
[12:42:25] <hayley> But it does mention the epsilon and delta definition too. https://en.wikipedia.org/wiki/Limit_of_a_function#Functions_of_a_single_variable 
[12:42:32] <gilberth> hayley: Hmm.
[12:43:10] <hayley> "The function f(x) = 1 / x is continuous on its domain, but is discontinuous at x = 0" Or not.
[12:43:38] <kakuhen> wow the first time i check lispcafe ppl r discussing math cool
[12:43:39] <kakuhen> anyway yeah, 1/x will diverge in any nhbd of zero
[12:43:40] <kakuhen> if your domain is a space with a nhbd of zero then 1/x is not continuous on that space, period
[12:43:54] <hayley> (macroexpand 'nhbd)
[12:43:56] <Alfr> hayley, it's f.a. \epsilon > 0, f.a. x*, there exists \delta > 0, s.t. |x-x*| < \delta implies |f(x)-f(x*)| < \epsilon.
[12:44:00] <shka> hayley: makes sense, it is jump discontuability 
[12:44:03] <moon-child> neighborhood
[12:44:09] <kakuhen> neighborhood, hayley
[12:44:10] <shka> *jump discontinuity
[12:44:26] <shka> https://mathworld.wolfram.com/JumpDiscontinuity.html
[12:44:32] <gilberth> hayley: Yeah. But I learned that you speak about continuous on the domain.
[12:44:38] <hayley> Thanks
[12:44:39] <kakuhen> a "neighborhood" of some point x in a topological space X is an open set of X containing x and a distinct point
[12:44:53] <hayley> https://www.youtube.com/watch?v=P7xFjR54al4
[12:44:53] <kakuhen> so for a very very simple example, just take an open interval like (x - e, x + e) for some e>0 in real numbers
[12:44:54] -ixelp- Hi there, would you like to sign my petition? - YouTube
[12:44:57] * shka is not good mathematician, he just happens to know this thing
[12:45:29] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[12:45:36] * gilberth never liked calculus.
[12:45:38] <Alfr> hayley, if you put the "f.a. x*" after "there is \delta > 0" you get uniform continuity.
[12:45:48] <pjb> geometry is more fun.
[12:46:17] <kakuhen> also the e-d limit is really gross and annoying to think with
[12:46:18] <gilberth> pjb: Algebra is more fun still. :-)
[12:46:20] <kakuhen> i like to define continuity as the preimage of your function sending open sets to ope sets
[12:46:24] * moon-child likes calculus.  Doesn't know shit about math though
[12:46:48] <Alfr> hayley, (and you exchanged the last \epsilon and \delta above.)
[12:47:02] <kakuhen> open*
[12:47:14] <shka> i literally know enough of only enough math to be somewhat competent at ML
[12:47:16] <kakuhen> i hate geometry
[12:47:31] <kakuhen> because i have a spatial iq of 0
[12:47:45] <kakuhen>  the difference between uniform continuity and continuity, using e-d def at least, is just placement of quantifiers
[12:47:55] <pjb> kakuhen: you know, actually geometry is purely abstract, and doesn't rely on drawings.
[12:47:56] <Alfr> kakuhen, that makes showing composition of continuous functions to be continuous trivial.
[12:48:25] <shka> but that's it
[12:48:39] <shka> i am not mathematically minded person
[12:49:04] <kakuhen> pjb: yes it becomes alphabet soup unless you try to use more modern theory
[12:49:06] <kakuhen> a quick look at christoffel symbols is all i need to know about doing geometry in the long term :)
[12:49:07] <kakuhen> or, as I like to call them, "christ awful symbols"
[12:49:42] <shka> nah, geometry is actually fun
[12:50:02] <shka> every problem is just a small logic puzzle 
[12:50:02] <kakuhen> with that said I do enjoy some topics in algebraic geometry, but some would argue that geometry looks quite different from "actual geometry" :P
[12:51:29] <gilberth> Anyhow it makes no sense to talk about a 1/x being continuous at x = 0, it is just undefined. But: There are different definitions of "continuous". As kakuhen said.
[12:52:02] <kakuhen> i wish gauss-bonnet and its generalizations looked like small logical puzzles to me :(
[12:52:57] <Alfr> kakuhen, define geometry ... as for Klein it's mostly group theory.
[12:53:00] * Alfr laughs.
[12:53:35] <hayley> shka: All I know is that discontinuous functions can be unfun for regressions and deep learning.
[12:54:05] <kakuhen> meanwhile my analyst friends define the most cursed discontinuous functions ever
[12:54:18] <Alfr> gilberth, even for those different definitions, they agree in this case.
[12:54:22] <semz_> I have never heard of anything called "continuous" for which f(x) = 1/x on ℝ\0 wouldn't be continuous. If Wikipedia claims 1/x isn't continuous, WP is fucking wrong. Wouldn't be the first time either, "WP is good for math" is a terrible meme.
[12:54:26] <shka> hayley: that is the common wisdom, bu relu is a thing 
[12:54:40] <shka> so there is theory, and practice 
[12:55:33] <Alfr> gilberth, (unless you are willing to abandon the usual topology for R).
[12:55:46] <hayley> I am aware.
[12:56:48] <hayley> semz_: Yes, I misread at first.
[12:56:50] <kakuhen> i forget the actual construction... but there's a way to define a real function on the cantor set that oscillates and is discontinuous at uncountably many points
[12:57:34] <Alfr> semz_, how about, you can't continuously extend it to all of R, in particular 0.
[12:57:39] <Alfr> s/./?/
[12:57:47] <hayley> https://math.mit.edu/classes/18.01/Spring2013/Supplementary%20notes/01c.pdf claims 1/x is not continuous "since its domain is not an interval".
[12:58:02] <semz_> You can't, but I've never seen that notion called continuity.
[12:58:18] <kakuhen> that's because they use their own def'n of continuous
[12:58:20] <kakuhen> >We say a function is continuous if its domain is an interval, and it is continuous at every point of that interval
[12:58:44] <gilberth> Alfr: 1/x is continuous. It is not not uniform continuous. At least I remember it that way.
[12:59:20] <kakuhen> anyway hayley: be very careful with people's definitions
[12:59:37] <Alfr> gilberth, yes on R\{0}. Wasn't the initial question about what happens at 0, essentially?
[13:00:02] <kakuhen> also a college calculus class is the last place id go for real analysis
[13:00:03] <kakuhen> they are using a non-standard definition in the class, presumably to simplify the concepts
[13:00:04] <Alfr> semz_, fair.
[13:00:20] * hayley decides that it would be interesting to shuffle the conses, so that hardware prefetching shall eat itself
[13:00:21] <hayley> Okay, thanks.
[13:00:34] <gilberth> Alfr: The term "continuous" is defined for x being in the domain only. It's like asking "what was before the big bang?"
[13:00:50] <kakuhen> but given their defn of continuity, what they say is indeed true
[13:00:58] <semz_> It's a pretty bizarre definition honestly.
[13:01:17] <kakuhen> im not sure if you've dealt with models and metalogic-y stuff before
[13:01:19] <hayley> I haven't.
[13:01:30] <kakuhen> but that sorta stuff is whats going on here
[13:01:42] <semz_> Just restrict your notion to f whose domain is an interval and you'd get something compatible; instead they give a definition that applies to all functions but disagrees with standard notation
[13:02:00] <Alfr> kakuhen, 1_{cantor-set}, where 1 denotes the indicator functions would do that.
[13:02:30] <kakuhen> hayley: basically, you can take a formal language, create what we call "formal theories," and then there are certain semantics that make these theories true -- this is what a model is about
[13:02:59] <kakuhen> if you have tons of free time, I recommend reading up about Robinson's Q and related topics
[13:03:15] <kakuhen> and compare it to the "usual" standard construction of arithmetic
[13:03:16] <kakuhen> (i.e. peano arithmetic)
[13:03:18] <semz_> It's like, instead of defining addition for integers, they'd define addition on all rationals but define the result to be 0 if the two summands aren't integral. Just... why?
[13:04:01] <kakuhen> anyway, if you use Robinson's Q as a model of arithmetic, you get to see some pretty wacky things that you wouldn't with Peano
[13:04:01] <kakuhen> and so on
[13:04:41] <kakuhen> that sorta stuff is what's going on to some extent in that paper you linked
[13:04:42] <kakuhen> given the way they defined continuity, they are able to make true statements that'd otherwise raise a brow amongst many math students
[13:07:37] <Alfr> gilberth, x \mapsto x^2/x isn't defined in x=0, but it's reasonable to extend it to a continuous function on R.
[13:10:19] <gilberth> Alfr: Well, that is a fun one. This always puzzled me: Does calculus talk about functions as objects doing something and we struggle to provide a formular to describe it, or does calculus talk about terms? IMHO this is blurred at times.
[13:12:04] <Alfr> gilberth, R\{0} -> R, x \mapsto x^2/x and R -> R, x mapsto x simply are two different functions, only that they agree on where both are defined.
[13:12:05] <moon-child> what is the difference?  You are a lisper; can not code be data?
[13:12:06] <gilberth> Or: Put otherwise: Why isn't x^2/x defined for x=0? Just because we choose x^2/x to represent it?
[13:13:01] <gilberth> moon-child, Alfr: That was my point. What is calculus taking about? The behaviuour of functions or the "source code" of functions?
[13:13:11] <gilberth> * talking
[13:13:18] <moon-child> what is the difference, again?
[13:13:38] <moon-child> x^2/x is a set of mappings.  We may sometimes find that one mapping is equivalent to another.  The mapping x -> x^2/x is not define at x=0, any more than is the mapping 1 / x
[13:13:43] <Alfr> gilberth, it might be just me, but for me maps have a domain (and range) associated, and I do threat resulting maps as distinct.
[13:13:49] <moon-child> the mapping x -> x is defined at x = 0
[13:13:56] <gilberth> moon-child: The equality term. Are (lambda (x) (+ x 1)) and (lambda (x) (+ 1 x)) the same function or not?
[13:14:00] <kakuhen> yeah alfr is right
[13:14:00] <kakuhen> calculus is talking about a set of methods to calculate statistics that hint on the behavior of functions
[13:14:02] <semz_> Alfr: This is not just you.
[13:14:06] <kakuhen> that is the most pedantic posh defn of calculus i can think of
[13:14:24] <moon-child> gilberth: there are formal definitions of equivalence in programming, to do with halting
[13:14:32] <kakuhen> behavior of real functions* im sorry
[13:14:44] <moon-child> in essence: are there any inputs I can give to (lambda (x) (+ x 1)) where it will halt but (lambda (x) (+ 1 x)) will not (or vice versa)
[13:15:00] <semz_> and for good reason, look at all the confusion the lack of clear domain/range creates here :(
[13:15:01] <moon-child> (or is there anything else I can do with one function but not the other to get a halt)
[13:15:18] <Alfr> gilberth, that might be due to some unfortunate diff geo exercise once, where I ended up getting lost, as in not knowing where some expression actually lives in. ;)
[13:15:27] <kakuhen> gilberth: i would say no from a category theoretic perspective
[13:15:28] <kakuhen> :^^^^^^^)
[13:15:47] <kakuhen> wait no i just owned myself shit
[13:15:50] * hayley wonders if GCC is generating crap code for compressed pointers.
[13:15:52] <hayley> There is an unnecessary branch IMO.
[13:15:53] <kakuhen> i was gonna rant about abelian categories
[13:15:54] <moon-child> gilberth: but math is not cs, and definitions of equality there are different
[13:15:55] <kakuhen> then i realized
[13:15:58] <kakuhen> fucking Hom(A,B) is abelian
[13:16:04] <kakuhen> so technically 1+x = x+1 in an ab category
[13:16:09] <kakuhen> well not =
[13:16:11] <kakuhen> but canonically isomorphic
[13:16:17] <kakuhen> which is pretty damn close to equality
[13:16:36] <kakuhen> wait no this is false thye are just equal LOL
[13:16:41] <kakuhen> jesus christ how am i messing this up so badly
[13:16:51] <gilberth> moon-child: The fun thing of "equality" is that there are many definitions to chose from.
[13:17:24] <moon-child> sure
[13:17:35] <kakuhen> gilberth: you'll have lots of fun in a course on model theory
[13:17:57] <moon-child> in math it's pretty easy though.  X ≡ Y if, for any p, p∊X <=> p∊Y
[13:18:14] <moon-child> and everything is a set
[13:18:15] <gilberth> kakuhen: I would, yes. Been there, last century.
[13:18:17] <kakuhen> basically, the reason we're all having this discussion is because semantics are fucked up all around but we also can't just make do with pure syntax
[13:18:25] <moon-child> a function is just a set of mappings
[13:18:37] <hayley> Hm, clang looks worse. Though I guess the compiler has to reckon with the case where I provide an offset O from node N s.t. N + O == NULL. Even though it'll never happen.
[13:19:02] <gilberth> A function is an injective map and hence a set.
[13:19:03] * hayley sees __builtin_unreachable and 👀
[13:20:07] <gilberth> And a map is a product of two sets. Product as in R x R.
[13:21:27] <gilberth> [My first math lecture] It was downhill since then. :-)
[13:23:02] <hayley> Well, now there is only one branch in the hot loop. But now GCC decides it needs to add another MOV and LEA with another register, instead of just doing an ADD.
[13:23:48] <shka> https://news.stv.tv/east-central/worlds-largest-potato-to-get-dna-testing-in-edinburgh-lab
[13:23:49] -ixelp- ‘World’s largest potato’ to get DNA testing in Edinburgh lab - STV News
[13:24:59] <hayley> Whereas the uncompressed code instead just updates EDX in place. No fair.
[13:25:32] <dave0> that's a big potato
[13:25:47] <dave0> should make it into fries
[13:26:57] <dave0> there it is.. 8 bags of oven fries
[13:28:05] <Alfr> shka, why? Does someone dispute that it indeed is a potato?
[13:28:41] <shka> i presume they want to figure out why this bad boy so big
[13:28:56] <shka> because it is obviously mutation
[13:29:12] <shka> hopefully a very tasty mutant :P
[13:29:40] <Alfr> shka, you may get disappointed.
[13:30:14] <shka> i suspect so, but i want to believe 
[13:30:38] <Alfr> shka, to grow to that size certainly took time, so it's old.
[13:30:46] <semz_> "If real, the root vegetable is enough to make eight bags of oven chips, 173 bags of crisps, or 26 baked potatoes." Wouldn't it be 1 baked potato?
[13:31:00] <shka> well...
[13:31:11] *** semz_ is now known as semz
[13:31:26] <hayley> moon-child: Any comments on how to say "Well...yeah, duh" to Cliff Click?
[13:32:09] <Alfr> semz, maybe that one's special and behaves like a pile of oranges, as in 1+1=1. Now just read that from right to left. :)
[13:32:19] * hayley struggles to find a speedup, but is still annoyed that GCC does different codegen for code that is unrelated to decompression.
[13:32:26] <moon-child> haha
[13:32:33] <moon-child> it helps to be irrationally overconfident
[13:33:44] <hayley> And I am a bit worried of taking my data drive with me, because I only have a backpack and some bubble wrap for mechanical isolation.
[13:34:31] <moon-child> have backup?
[13:34:51] <hayley> I took it with me precisely because I don't have a backup, and I don't want anyone at home to trash it.
[13:36:14] <hayley> Apparently some foam and a cardboard box suffices to mail a drive, so I should be okay.
[13:43:34] <selwyn> potatoes are surprisingly nutritious
[13:44:09] <hayley> https://www.youtube.com/watch?v=N4XAUdxfF3Q
[13:44:10] -ixelp- Portal 2: Best GLaDOS quote - "Because i'm a Potato" - YouTube
[13:47:18] <selwyn> the jwst will arrive at l2 today
[13:47:36] <shka> good
[13:48:04] <shka> but still, mirror will have to be adjusted
[13:48:09] <shka> very, very, very slowly 
[13:48:17] <shka> glacial peace 
[13:50:16] <gilberth> Does the JWST need to cool down, too?
[13:50:46] <shka> gilberth: it has active cooling
[13:50:54] <shka> so that should not take that much time
[13:51:24] <hayley> Best I can tell, compression should just add one ADD instruction. And, compared to the reduced cache misses, this should be better in practise.
[13:51:26] <shka> but mirror is adjusted with the speed of grass growing
[13:51:28] <shka> literally
[13:51:58] <selwyn> there are other actuators that are even slower than that iirc
[13:52:34] <Alfr> Oh ... JWST was actually launched and didn't blow up on the pad?
[13:52:48] <shka> yes, the last year actually
[13:53:08] <selwyn> the mission systems engineer said there is enough fuel for 20 years
[13:53:10] <selwyn> damn
[13:53:24] <Alfr> selwyn, how much coolant do they have?
[13:53:33] <shka> Arian 5 was juuuust right
[13:53:45] <selwyn> i don't know much about the cooling system
[13:53:52] <selwyn> but iiuc fuel is the limiting factor
[13:53:56] <shka> Alfr: it is closed system, so they don't bleed out
[13:54:07] <Alfr> shka, ah, okay.
[13:54:12] <selwyn> and it was designed for 10 years
[13:54:32] <shka> Arian 5 launch was literally perfect
[13:54:41] <shka> so that saved some fuel 
[13:54:42] <hayley> gilberth: ARM chips are all 32-bit, though you might not actually use 32 bits of address, right?
[13:55:13] <moon-child> _all_ 32-bit?
[13:55:15] <Alfr> hayley, word addressing?
[13:55:15] <hayley> There you might manage to have 16-bit OOPs everywhere. 
[13:55:48] <selwyn> will javascript survive until 2042?
[13:55:52] <hayley> Er, 32-bit or 64-bit. But not 16-bit.
[13:55:57] <selwyn> probably, but if not, would be funny
[13:56:37] <selwyn> nasa struggling to find js experts to work the telescope 
[13:57:45] <hayley> One could nearly address the 264kB RAM of a RP2040 with 16-bit pointers, if they are word addressed and thus you SHL R1, R1, 2 or whatever before loading from R1.
[13:57:56] <hayley> Still no room for ROM pointers, sadly.
[13:58:43] <shka> selwyn: should use lisp instead :P
[13:58:48] <shka> truly 
[13:58:50] <selwyn> bit late for that
[13:59:03] <Alfr> moon-child, ... all but one small village of indomitable Gauls, maybe?
[14:04:34] <moon-child> gba was 16-bit arm, right?
[14:07:28] <hayley> The internal registers, not so much data path.
[14:10:44] <shka> moon-child: GBA? I think so
[14:11:12] <shka> oh, no
[14:11:16] <shka> it was 32 bits
[14:11:47] <shka> along the zilog z80 for gameboy color games
[14:12:33] <shka> i wonder if z80 was at this point produced only for nintendo
[14:14:08] <moon-child> wiki says 'ARM7TDMI', and of arm7tdmi: 'ARM7 + 16 bit Thumb + JTAG Debug + fast Multiplier + enhanced'
[14:14:25] <moon-child> oh wait 16 bit thumb means 16 bit insns right
[14:14:33] <shka> yup
[14:14:35] <shka> 32 bits
[14:24:16] <shka> it would be actually kinda weird for it to be 16 bits
[14:31:02] *** Joins: random-nick (~random-ni@87.116.181.150)
[14:33:18] *** Quits: [w] (~w]@2601:8c1:80:70d0::4b06) (Quit: nyaa~)
[14:34:06] <gilberth> Thumb is kind of nice, when you need to save space. But: You are left with only eight registers you could address with your instructions. In general Thumb code tends to be slower than ARM code.
[14:36:30] <hayley> I failed to consider how my read and write barriers for compressed pointers work with fixnums. But V8 uses this scheme and manages somehow.
[14:37:32] <gilberth> hayley: Registers are always 32 bits wide. And at its roots the ARM is word addressed, all kind of fun things could happen when you load a word from an unaligned address. Some CPUs are clever and make it so that (*p) & 0xFF is a proper byte read by shuffling the read word. Early ARMs didn't even have a load byte instruction.
[14:38:02] <gilberth> Is the RP2040 an ARM7TDMI?
[14:38:30] <hayley> idk
[14:38:31] *** Joins: vats (~vats@103.158.91.71)
[14:38:51] <hayley> It's a new chip, but idk what IP is on it
[14:40:17] <hayley> A Cortex-M0+.
[14:40:52] <gilberth> And this 264kB of which some must be DMA buffers or sth, or why the odd size? Marketing likes to count every bit. Anyhow with 16-bit object pointers you address 64k cons cells. Two 16-bit pointers per cons cell: 256kB total. Perfect. Like mulisp on the 8086. :-)
[14:41:32] <hayley> As I said, 4 byte alignment makes everything nice. Though, where do you put your type tag(s)?
[14:41:35] <gilberth> hayley: Yeah, a Cortex is newer than a ARM7TDMI. I can't recall what features exactly it has.
[14:42:02] <hayley> 15 bits address + 1 tag. So 32k objects.
[14:42:13] <gilberth> hayley: Tags? Which tags? Have regions in the heap: cons cells left, atoms right. Like mulisp :-)
[14:43:11] <gilberth> Or do like LISP-I does: ATOM[x] := CAR[x] = -1
[14:43:26] <hayley> Well, no good to use space on fixnums either.
[14:43:36] <dave0> hayley: is that 15 bits for address of bytes?
[14:44:25] <gilberth> hayley: Could be worse. Also: Set aside small fixnums. Have their addresses where your binary code it. That's unusable space anyway.
[14:44:50] <gilberth> I believe 32k cons cells would be too tight.
[14:44:54] <dave0> hayley: what if you used 15 bits to address byte pairs and possibly waste some space on ascii characters? that'd give you 64k
[14:44:56] <hayley> 15 bits for addresses divided by 4.
[14:45:13] <gilberth> When you're clever: Keep a tagged stack.
[14:45:22] <hayley> gilberth: Well, the Pi Pico flash is some 2MB. Good luck getting that into a 15 bit pointer.
[14:45:41] <dave0> segmentation ;-)
[14:45:48] <gilberth> That is: Box fixnums only when you stash them at some object.
[14:46:40] <gilberth> hayley: Is that flash even in the address room proper? Or is it just some serial flash. If that is the same RP<whatever> MCU you showed me: The latter.
[14:47:54] <gilberth> Like a disk :-)
[14:48:11] <hayley> It's in the space proper, though the RP2040 will pull data through SPI.
[14:48:31] <gilberth> Will an LD instruction do that?
[14:49:21] <gilberth> When it does, I wonder why it boots by copying code to the SRAM.
[14:50:03] <gilberth> The LPC2xxx chips are not like that. The flash is internal and you could execute code directly from that flash.
[14:52:59] <hayley> Some SRAM is used as flash cache.
[14:53:11] <hayley> And LD will either hit cache or load from SPI, yes.
[14:53:31] <hayley> https://v8.dev/blog/pointer-compression is enlightening on the topic, with benchmark numbers too.
[14:53:32] -ixelp- Pointer Compression in V8 · V8
[14:53:36] *** Joins: santiagopim (~user@90.167.95.41)
[14:54:19] <hayley> Apparently testing for pointers/immediate values only slows down stuff by 2.5%, compared to corrupting fixnums in a way I can't do.
[14:55:29] <hayley> The problem remains that I want to compress per-object, so that I can do really aggressive compression where possible (e.g. best case would be turning a graph into 8-bit deltas on a 64-bit machine).
[14:57:45] <gilberth> When you compress to one bit, you get CDR-coding :-)
[14:58:27] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[14:59:57] <hayley> Sure.
[15:00:20] <gilberth> So what is your plan? Let the GC compress?
[15:00:48] <selwyn> rumour has it the queen is dying
[15:01:26] <hayley> My plan is to allocate compressed if possible, a write barrier might decompress, and maybe the GC could compress, idk.
[15:02:13] *** Joins: rogersm (~rogersm@90.166.180.250)
[15:02:17] <hayley> The problem is that I would implement each compression level with a separate layout, with separate dispatch and all. So specialized code might find GC has changed layout on it.
[15:04:20] <gilberth> selwyn: Yeah, the world is falling apart it seems.
[15:06:29] <hayley> But I guess I have to handle invalidating anyway. After any unknown function call, I have to check that no one changed the layout on me.
[15:07:53] <hayley> https://www.youtube.com/watch?v=6Iz53uzlNls
[15:07:54] -ixelp- Sparks - "National Crime Awareness Week" (official video) - YouTube
[15:08:36] <hayley> Nonetheless, smaller objects -> lower allocation rate -> fewer GCs. And you get better locality. Win-win (unless you are an ALU).
[15:10:46] <gilberth> The question is what your goals are. For an MCU I wouldn't be too concerned about speed, but about my program fitting at that device at all.
[15:12:11] <hayley> That's the compression, hopefully.
[15:12:55] <hayley> On tiny machines, we need to fit in memory to start with. On larger machines, we want to fit in cache.
[15:13:43] <gilberth> I was thinking. I mean you want a REPL, and a compiler, right? Does that need to run on the MCU proper? No.
[15:13:59] <hayley> Steve Blackburn et al claim that the young generation relies on spatial locality, whereas the old relies on temporal locality more.
[15:15:11] <hayley> A REPL on a MCU could be useful (MicroPython does that). But we could also have an environment where the desktop computer does more sophisticated inspection and presentations. And, yes, the compiler could well be on a tethered desktop too.
[15:15:59] <hayley> At least I despise the while True: print read_sensor() test programs. Give me a graph or something.
[15:17:00] <gilberth> In the extreme case JTAG would be all you need. Have the REPL run on the desktop and work by just peeking and poking around.
[15:17:02] <hayley> The implementation doesn't have to be hard, either. Annotate a function with "call this every 100ms" and then you can watch the value change, with no code written.
[15:17:50] <gilberth> Just like the two machine CADR solution, where one could debug the other by just accessing the targets bus.
[15:19:05] <hayley> I want Self the Movie, with some objects on a microcontroller. Actually not infeasible, if we want to proxy stuff.
[15:19:29] <hayley> But a general "eval on MCU" would be useful as well as proxying objects. Hm.
[15:20:43] <gilberth> Look, GDB already is a half a remote REPL.
[15:21:27] * hayley embeds gilberth into a rectangle morph
[15:21:40] <gilberth> It actually is kind of useful while developing C applications on an MCU, as you could poke around and invoke functions.
[15:23:55] <hayley> Proxying would let your host think your sensor is an object on the host, which gives the illusion of shared memory to an extent.
[15:24:31] <hayley> The memory bus is just as slow as your UART though :)
[15:26:39] * hayley would need to work out talking X and serial from a new language and implementation. Hm.
[15:26:57] *** Quits: vats (~vats@103.158.91.71) (Ping timeout: 240 seconds)
[15:27:04] <hayley> Worse, I could just use the CL-hosted interpreter and expose CLIM and serial from CL.
[15:35:07] *** Quits: wheelsucker (~user@2600:8801:8c24:d000::8e14) (Remote host closed the connection)
[15:35:21] *** Joins: wheelsucker (~user@2600:8801:8c24:d000::8e14)
[15:43:12] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:48:31] <selwyn> is the brainlink stuff a meme
[15:52:13] <Duuqnd> Brainlink?
[15:52:45] <selwyn> sorry, neuralink
[15:53:07] <shka> yes and no
[15:53:40] <shka> brain implants is not a new thing, and there are medical reasons behind those
[15:53:44] <Duuqnd> Oh, Neuralink
[15:53:58] <shka> actually, they were hot during 70s IIRC
[15:54:25] <shka> but dunno what Elon says he want to do with that tech
[15:54:56] <Duuqnd> Since it's Elon I wouldn't exactly want to put any money on it
[15:55:47] <selwyn> damn my mouse sucks
[15:56:06] <shka> mouse is allowed to suck, no problem :P
[15:56:15] <selwyn> but i am sometimes a gamer
[15:56:23] <shka> oh, ok
[15:58:03] <selwyn> reminded that bike wrote about sth similar https://bike.github.io/posts/organ-complexity.html
[15:58:04] -ixelp- Kidneys are hard
[15:58:30] <ck_> selwyn: that 500k£ anti-ee-encription campaign isn't going that great? https://www.theguardian.com/technology/2022/jan/21/end-to-end-encryption-protects-children-says-uk-information-watchdog
[15:58:30] -ixelp- End-to-end encryption protects children, says UK information watchdog | Chat and messaging apps | The Guardian
[15:59:23] <selwyn> frankly speaking i find it hard to see any connection between e2ee and child protection either way
[15:59:37] <selwyn> surely the problem is the platform, not the encryption
[15:59:43] <shka> ThInK oF tHe ChIlDrEn
[15:59:55] <shka> and 
[15:59:58] <shka> terrorism
[16:00:12] <shka> two horseman of fight against the privacy
[16:00:19] <Duuqnd> On my Windows computer pressing Super-Shift-C-M open a window for logging in to use Microsoft Office Web. Now that's terror.
[16:00:25] <shka> all kind of shit can be justified 
[16:00:58] <selwyn> and the russians
[16:01:23] <selwyn> uk foreign office has discovered a plot to overthrow the government in ukraine, which is light on facts
[16:02:08] <selwyn> anyway, i think the uk government will survive for now, and their distractions probably helped them to achieve this
[16:04:19] <Gnuxie> dunno
[16:04:19] <Gnuxie> where's susan's report 
[16:04:19] <Gnuxie> or whatever they're called 
[16:04:38] <Gnuxie> we've got it all to come 
[16:05:22] <Gnuxie> there's probably something in it that's going to cause a right debacle and that's why some tories are so restless to act early do they don't look like supporters after the fact 
[16:07:49] <selwyn> i feel that the government has lots of ways of mitigating the damage from the report
[16:08:23] <selwyn> they can try to delay it, or ensure that some details aren't made public
[16:08:26] <selwyn> but we will see
[16:20:50] *** Quits: wheelsucker (~user@2600:8801:8c24:d000::8e14) (Read error: Connection reset by peer)
[16:21:03] *** Joins: wheelsucker (~user@2600:8801:8c24:d000::8e14)
[16:21:56] <selwyn> https://twitter.com/northwaleslive/status/1485571190278156288
[16:22:00] <selwyn> return
[16:22:58] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Remote host closed the connection)
[16:27:30] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[16:47:22] <gilberth> shka: Terrorism is out of fashion. These days children are abused to demolish our civil rights. No news, actually.
[16:49:35] <gilberth> Though I wonder how outlawing encryption or having more CCTVs would help to reduce child abuse. Or do they want to place to cameras at every spot at the catholic church?
[16:50:30] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:aa5f:93ea:3b88:5ff5)
[16:56:28] <ck_> "llandudno goat the white"
[16:57:01] <ck_> I thought london buildings are made out of cctv cameras primarily, with decorative bricks thrown in
[16:57:28] <gilberth> Right.
[16:58:51] <selwyn> ck: yeah they are
[16:58:55] <selwyn> yet crime exists, curious
[16:59:09] <gilberth> Surprise!
[17:00:15] <shka> in Poland we should dress up nuns as altar boys
[17:00:29] <shka> should solve child abuse and low population growth
[17:00:56] <gilberth> You believe so?
[17:01:13] <shka> wouldn't hurt anyway
[17:01:26] <ck_> risky statement
[17:01:28] <gilberth> Think of the nuns!
[17:01:42] <shka> gilberth: i can only get so horny
[17:01:56] <shka> anyway
[17:02:13] <shka> pedophilia in polish Catholic church is massive
[17:02:14] <gilberth> Ah yes, so nuns it is? ok.
[17:02:40] <shka> something like 50% all child sexual abuses is related to church
[17:02:43] <gilberth> shka: How come that this doesn't surprise me either?
[17:03:19] <shka> that's what you get from repressing sexuality i guess
[17:03:54] <gilberth> Is it really related to sexuality per se? Or isn't it rather about power?
[17:04:09] <shka> i think that it is about sexuality
[17:04:19] <shka> no proofs
[17:04:32] <shka> but sex is kinda important to society and even the whole species
[17:04:35] <shka> as you may notice
[17:05:00] <gilberth> Well, I am not so certain that sexuality is the primary motive.
[17:05:48] <gilberth> As in, in general the equation pedophile <=> child-abuse is too simplistic.
[17:05:56] <ck_> unsubscribe from intercourse discussion
[17:07:03] <gilberth> I don't know what catholic priests practice, but I doubt it's an _inter_course.
[17:20:43] <selwyn> careers service thinks i have a great cv and cover letter
[17:21:35] <selwyn> https://www.youtube.com/watch?v=Ed5FZpwRlxA
[17:21:35] -ixelp- Highlander Nuns - YouTube
[17:21:55] <ck_> con gratulations
[17:22:18] <ck_> send a postcard when you made it to the top thanks
[17:22:32] <selwyn> when i was a kid, a priest invited me to catholic creche even though we weren't catholic
[17:22:38] <selwyn> my mum said no
[17:22:44] <shka> smart mum
[17:22:49] <selwyn> yes lol
[17:28:43] <selwyn> is there a catholic intellectual life in poland
[17:28:59] <selwyn> i.e. do there exist catholic universities and newspapers
[17:29:15] <shka> i don't know, i am personally far removed from that
[17:29:41] <shka> i am personally a little bit of a marxist, you see
[17:31:37] <shka> so whatever they come up with, i am quick to disregard
[17:31:56] <selwyn> thing is that germany does have catholic universities
[17:32:04] <selwyn> it's very difficult to understand from an anglo perspective
[17:32:16] <selwyn> i don't think the uk or ireland has an equivalent
[17:32:16] <shka> well, there is also in Poland
[17:32:52] <shka> but that one is currently only considered by the lowest 
[17:33:08] <shka> and not the most bright minded people around
[17:33:18] <selwyn> oxbridge colleges used to have a sectarian/political affiliation in previous centuries but i assume they got assimilated into a 'national tradition'
[17:33:40] <selwyn> what's that university called?
[17:34:06] <shka> KUL: katolicki uniwersytet lubelski
[17:34:22] <shka> has interesting history 
[17:34:39] <shka> and was actually well respected during the communist era
[17:34:49] <shka> but it went really downhill
[17:35:59] <selwyn> yeah interesting
[17:36:09] <selwyn> ck: so i finally applied for the damn job
[17:36:11] <selwyn> now it's time to wait
[17:37:56] <ck_> selwyn: well done, I'm excited for you
[17:38:31] <ck_> I'll keep my fingers crossed as soon as my k8s odyssey is over
[17:40:15] <pl> selwyn: what is present day UK had Catholic universities, as bishops were often sponsors 
[17:40:49] <pl> Just, out of present day UK, England was the academic backwater for a long time ;-)
[17:40:58] <selwyn> indeed
[17:41:22] <selwyn> st andrews/edinburgh?
[17:41:26] <pl> (proud Aberdeen alumni represent ;-)) 
[17:41:33] <pl> University of Aberdeen 
[17:41:48] <selwyn> i mean, i wonder if st andrews and edinburgh are in that category
[17:42:11] <pl> UoA was created by a Bishop, so were those two as well 
[17:42:19] <pl> I think Oxford has similar beginnings 
[17:42:53] <pl> Cambridge beginnings is "its where we stopped running from angry mob" so eh 
[17:44:03] <selwyn> many cambridge colleges have more of a royal backing to them iirc
[17:44:26] <selwyn> some were rebellious in terms of their sectarian affiliation
[17:44:56] <selwyn> corpus christi must have some relation to catholicism
[17:45:51] <pl> Former, maybe. Reminder that it's relatively recent that catholics could reach an office in England 
[17:47:18] <selwyn> yes
[18:28:38] *** Joins: djuber (~user@65.79.128.64)
[18:34:10] <gilberth> What is worse yet, the RENDER extension for instance can't draw something as simple as a line. So when your display server and/or hardware has optimized routines to draw lines, you can't use them.
[18:35:53] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:36:29] <selwyn> procrastinating by researching search and rescue patterns
[18:37:03] <gilberth> And coordinates are still integers.
[18:37:30] <gilberth> And btw what's up with the stock market?
[18:37:47] <gilberth> Or down, rather.
[18:38:57] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:47:32] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[18:51:33] <selwyn> which stocks?
[18:53:01] <ck_> the smart ones
[18:53:48] <gilberth> Smart?
[18:54:53] <shka> which stock market?
[18:55:11] <ck_> I'm too busy to look up the article, but there was a piece of news about "smart investors", some group of DAX brokers
[18:55:21] <gilberth> The stock market.
[18:55:31] <gilberth> Investors could be smart?
[18:56:19] <ck_> aren't you an investor
[18:56:38] <gilberth> Yes, but am I smart?
[18:56:59] <ck_> are you
[18:57:18] <gilberth> Probably not as an investor.
[18:57:35] <shka> american stock market is very different from the the european
[18:57:49] <shka> with those superheated stocks like tesla
[18:57:50] <ck_> what I was quoting was simply their title or name, not their clinical intelligence assessment, and I might be misremembering
[18:58:06] <gilberth> I believe DAI.DE is the only European stack I hold.
[18:58:35] <ck_> but the story went something like "historically high-yield groups of investors seen selling large amounts of stock, so people followed"
[18:59:02] <gilberth> People always follow. That's their mistake.
[18:59:34] <gilberth> I still have some cash, I might buy more.
[18:59:35] <shka> uh, so is stock market crashing or what?
[18:59:46] <gilberth> shka: Kind of.
[18:59:54] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:00:01] <shka> good thing that i delayed investing into stocks
[19:00:14] <shka> market was looking pretty damn expensive
[19:00:27] <gilberth> It sure was.
[19:00:58] <ck_> https://www.theguardian.com/business/live/2022/jan/21/retail-sales-uk-consumer-confidence-cost-of-living-stock-markets-inflation-ftse-davos-economics-business-live
[19:00:59] -ixelp- FTSE 100 posts biggest fall in eight weeks; UK retail sales hit by Omicron – as it happened | Business | The Guardian
[19:01:13] <gilberth> That is why I still have some cash, didn't buy anything in the last 12 month. Too expensive. I can wait.
[19:01:33] <Gnuxie> further discounts to come probably 
[19:01:34] <ck_> that's what I'm doing as well.. mostly. some things can't wait
[19:01:43] <ck_> DFS? :)
[19:03:24] <Gnuxie> LwL
[19:24:26] *** Quits: rogersm (~rogersm@90.166.180.250) (Ping timeout: 250 seconds)
[19:24:57] *** Quits: santiagopim (~user@90.167.95.41) (Ping timeout: 256 seconds)
[19:49:16] <gilberth> Oh. I love it when it says "[ABORT] Kill this thread" Which thread? I have more than one thanks to UNIX. Someone should fix the SLIME debugger to tell me which thread I am talking to.
[19:50:17] <cyberbanjo> [ABORT] abort thread (#<THREAD "sly-channel-1-mrepl-remote-1" RUNNING {10037249C3}>)
[19:50:31] <cyberbanjo> not slime tho
[19:51:19] <gilberth> Yeah, I guess CCL places the "Kill this thread" restart.
[19:53:47] <edgar-rft> it's hard to negotiate with killers
[19:55:18] <gilberth> Nah, you just have to be the one who kills first. Then the other party is open to all suggestions. No questions asked.
[19:55:30] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:55:54] <cyberbanjo> so its ccl being promblematic? sly doesnt list threads for it either
[19:57:17] <gilberth> Well, SLIME could in general show which thread it is talking to. But I won't touch SLIME.
[19:57:50] <gilberth> Is there any half-way canonical place for CLX?
[19:58:40] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:00:09] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:04:44] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[20:28:59] *** Joins: Catie (~user@user/catie)
[20:29:22] <ck_> sharplispers?
[20:29:32] *** Quits: wheelsucker (~user@2600:8801:8c24:d000::8e14) (Read error: Connection reset by peer)
[20:29:42] <ck_> gilberth: https://github.com/sharplispers/clx
[20:29:43] -ixelp- GitHub - sharplispers/clx: a fork of crhodes' fork of danb's fork of the CLX library, an X11 client for Common Lisp
[20:29:45] *** Joins: wheelsucker (~user@2600:8801:8c24:d000::8e14)
[20:36:56] <gilberth> ck_: Ok. Great! Heh, I am old-timer, I never forked :-)
[20:48:40] <drakonis> oh, you never forked you say?
[20:48:53] <drakonis> :v
[20:49:46] *** Joins: iamFIREc1 (~iamFIREcr@user/iamfirecracker)
[20:50:24] <ck_> maybe more of a chopsticks person
[20:50:28] <ck_> ('cause gentoo is for ricers)
[20:50:37] *** Quits: iamFIREcracker (~iamFIREcr@user/iamfirecracker) (Ping timeout: 240 seconds)
[20:51:12] <Alfr> What's with all those forks, can't we at least also have some proper spoons? Or how are we to enjoy a nice stew every now an then?
[20:51:19] <gilberth> drakonis: Not in the git sense, no.
[20:51:45] <gilberth> I am more of a committer. :-)
[20:51:50] <drakonis> ha
[20:52:44] <drakonis> i meant forking the process
[20:52:57] <gilberth> fork(2)?
[20:53:02] <drakonis> yes
[20:53:14] <drakonis> forking oneself
[20:53:34] <gilberth> Unfortunately, I can't do that.
[20:53:46] <Alfr> drakonis, you mean with life sized pitchforks? That's an interesting one.
[20:57:41] <drakonis> eh
[21:00:10] <ck_> we all have our own names for it
[21:08:04] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:11:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Client Quit)
[21:13:42] *** Quits: djuber (~user@65.79.128.64) (Remote host closed the connection)
[21:28:56] * pl suffers from hours of video based training on snowflake
[21:29:12] <pl> ... including a video that is an interview with founder and we had to answer questions on it
[21:29:46] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[21:30:36] <shka> oh yes, the corporate brainwashing
[21:30:53] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[21:32:13] <pl> not much brainwashing
[21:32:16] <pl> but lots of history
[21:32:28] <pl> brainwashing was at hr meeting
[21:32:35] <shka> oh, right
[21:32:48] <shka> i wish i could actually stomach this
[21:32:48] <selwyn> pl: condolences
[21:32:49] <pl> the engineering bootcamp so far is without brainwashing
[21:33:12] * shka has a problem with systems of authority
[21:33:32] <pl> shka: did a system of authority ever forget where exactly in the authority tree were you?
[21:33:41] <pl> (it did for me)
[21:34:09] <shka> i don't know actually
[21:34:22] <shka> but that's why i suffer bullshit at small companies 
[21:35:16] <shka> i am not big on following rules, unfortunately 
[21:35:25] <shka> this really bites me in the ass
[21:35:57] <selwyn> just don't say shit
[21:36:03] <selwyn> people won't assume the worst about you
[21:36:44] <ck_> that's not true, fight club taught me otherwise
[21:37:05] <shka> anyway, i am a loner, my social skills are not great
[21:37:13] <shka> actually, they are rather poor
[21:37:39] <shka> and in big organization you kinda have to be a social butterfly as well
[21:38:15] <shka> while in startup i simply need to talk like 5 people at most
[21:39:36] * selwyn learns about h1b visas and us healthcare
[21:39:49] <ck_> uh oh
[21:39:54] <shka> oh god
[21:40:09] * shka knows to much about us healthcare
[21:40:31] <shka> i worked on a data science stuff related to that
[21:40:54] <selwyn> the usa seems like the uk in that it is simply best to not be ill in the first place
[21:41:10] <shka> well, that's universal
[21:41:14] <selwyn> i have heard lots of nhs data stories/nightmares
[21:41:21] <ck_> that's why it is called universal health care
[21:41:21] <Duuqnd> I've heard people describe the UK as the US of Europe
[21:41:32] <shka> and usa healthcare is actually pretty high quality
[21:41:41] <shka> just absurdly expensive
[21:42:21] <ck_> Duuqnd: https://www.quotes.net/mquote/110906
[21:42:22] -ixelp- Jimmy Rabbitte: The Irish are the blacks of Europe. And Dubliners are the blacks of Ireland. And the Northside Dubliners [...]
[21:42:39] <selwyn> lol
[21:49:17] <selwyn> seems like i do need a visa
[21:53:31] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[21:53:52] <ck_> good luck
[21:57:35] <ck_> I can't even get an appointment to renew my ID right now
[22:02:35] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:07:35] <gilberth> I wonder, if there ever was graphics hardware with direct support for overlapping windows. Like having a large buffer and a list of windows pointing to regions in that buffer, which would be traverse during rescan.
[22:08:05] <selwyn> i wonder how integrated graphics/gpu double monitors works
[22:08:48] <gilberth> What's a double monitor?
[22:09:01] <selwyn> dual monitors
[22:09:03] <selwyn> whatever
[22:09:34] <gilberth> Well, that is just two monitors attached. I don't see a problem with that.
[22:10:13] <selwyn> one of them is connected directly to the integrated graphics on the motherboard and the other to the gpu
[22:10:41] <shka> gilberth: amiga
[22:10:51] <gilberth> Ah, that kind of setup. I was thinking one board, two display connectors (on that board).
[22:11:22] <shka> gilberth: https://www.youtube.com/watch?v=2IxYplCyzuU
[22:11:23] -ixelp- Amiga Tech - CPU Assisted Blitting (A1200) - YouTube
[22:11:33] <shka> but you are probably well familiar with this
[22:11:41] <gilberth> selwyn: My guess would be someone is doing a really fast DMA transfer.
[22:12:04] <White_Flame> a double monitor system is when you use gdb to debug ldb
[22:12:16] <selwyn> who debugs the debugger
[22:12:59] <shka> if any of you remember that bouncing amiga ball, it was actually possible with the help of the hardware
[22:13:25] <shka> and IIRC it was used for overlapping windows
[22:13:41] <gilberth> shka: Yeah, but that is just blittering, isn't it? What do I miss?
[22:13:49] <shka> nothing
[22:13:51] <shka> that's it
[22:14:08] <shka> but it had dedicated chip, and it was used for overlaping windows :-)
[22:14:15] <White_Flame> SGI or BeBox might have had something, but I think for generally placed rectanges, it's been blits
[22:14:32] <gilberth> Sure, as any vanilla blitter hardware.
[22:14:43] <White_Flame> a hardware model for this would have had limitations for how many windows you could have onscreen at once
[22:14:51] <shka> otherwise, i guess any composite window manager in linux, or even windows aero should count as hardware accelerated window overlaping 
[22:15:07] <shka> technically 
[22:15:15] <gilberth> Kind of, yes.
[22:15:42] <White_Flame> some SGI stuff _might_ have had a simple framebuffer whose bytes indicated which buffer to display, and separate descriptions of where overlays were positioned on the screen
[22:15:57] <White_Flame> so the 'framebuffer' basically was a clipping buffer?
[22:16:12] <shka> but obviously it is not dedicated hardware just for windows
[22:16:13] <White_Flame> but I might be misremembering it.  That might also have been just for 3d accelerated windows and not 2d stuff
[22:16:36] <White_Flame> overlays for video were obviously popular back in the day
[22:16:48] <gilberth> Hmm, there also is that stencile buffer with OpenGL.
[22:17:15] <White_Flame> but still, those overlays were chromakeyed in the framebuffer like that, instead of the hardware explicitly managing overlapping rectangles
[22:17:53] <gilberth> It would usually be 8-bit deep and all graphics operations could be clipped with a comparison on the value in that stencil buffer.
[22:18:28] <gilberth> Maybe it's something very similar and related? idk
[22:21:46] <shka> overlays are still a thing in TV, but just not as glamorous as it used to be  
[22:23:25] <selwyn> https://www.jwst.nasa.gov/content/webbLaunch/whereIsWebb.html?units=english
[22:23:26] -ixelp- Where Is Webb? NASA/Webb
[22:23:30] <selwyn> only ~100 miles to go
[22:23:42] <shka> so seconds
[22:23:51] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:24:47] <shka> well, not quite seconds
[22:24:52] <shka> but pretty damn close 
[22:25:28] <ck_> 1035 seconds, yes
[22:25:55] <selwyn> https://www.youtube.com/watch?v=g7VhofoV3qs
[22:25:55] -ixelp- So Solid Crew - 21 Seconds (Official HD Video) - YouTube
[22:27:05] <shka> sadly, they insist on using retarded units
[22:27:21] <selwyn> you can switch between them
[22:27:30] <ck_> so they don't insist at all
[22:27:36] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:27:44] <selwyn> but there isn't an option for imperial distance units and celsius at the same time
[22:27:52] <selwyn> more anti english racism
[22:28:05] <ck_> there is an option if you're brave enough
[22:28:15] <ck_> "developer tools" is literally right there I mean what do you want
[22:28:21] <shka> selwyn: thanks, sometimes i forget why i don't like rap
[22:28:35] <selwyn> this is a classic
[22:30:13] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:30:53] <shka> not my thing
[22:31:19] <shka> https://www.youtube.com/watch?v=1ZZZjD5F5_0
[22:31:20] -ixelp- The Fall - The Classical - YouTube
[22:31:44] <shka> this is more of my thing
[22:32:08] <shka> it is, also, as the name implies, classic
[22:32:17] <selwyn> i started out as a teenager listening to a lot of progressive and psychedelic rock
[22:32:23] <selwyn> basically what hayley posts
[22:32:43] <shka> me too
[22:33:04] <shka> and i still listen to that
[22:33:31] <shka> but i may become over-saturated 
[22:33:35] <selwyn> later on i got into electronic music and hip hop (and combinations thereof)
[22:34:27] <shka> yeah, i switched personally into electronic, but also punk rock and metal
[22:34:40] <shka> never liked hip hop
[22:34:45] <selwyn> i often listen to synphaera fm that you posted
[22:34:57] <shka> synphaera is cool
[22:35:16] <shka> personally i came into electronics from the ambient angle 
[22:36:40] <shka> and i am into unusual sounds
[22:36:47] <shka> and noise
[22:36:56] <shka> sonic youth, gang of four
[22:36:59] <shka> that kind of stuff
[22:37:09] <shka> and yes, pink floyd
[22:38:00] <shka> this has the exact type of the punk energy i crave https://www.youtube.com/watch?v=I_QJwR6D9d4
[22:38:00] -ixelp- Gang Of Four - To Hell With Poverty (Official Live | 1980) - YouTube
[22:38:33] <shka> which is the opposite of prog rock i guess
[22:39:17] <White_Flame> do they sing about design patterns, too?
[22:39:34] <shka> uh, let me think
[22:40:52] <shka> White_Flame: the best i can do https://www.youtube.com/watch?v=EtKrpu-z7ns
[22:40:52] -ixelp- Gang of Four -- Contract - YouTube
[22:41:36] <selwyn> https://www.youtube.com/watch?v=3qpcyJ-nse0
[22:41:37] -ixelp- Uncommon Valor - Jedi Mind Tricks (Lyrics) - YouTube
[22:41:40] <selwyn> hip hop about the vietnam war
[22:42:40] <shka> what year is that?
[22:43:27] <selwyn> it is based on real experience but performed by the soldier's son
[22:43:43] <shka> right
[22:44:17] <selwyn> for me its one of the best hip hop tracks lyrically and in subject matter
[22:44:22] <selwyn> few know about it though
[22:44:23] <shka> as they say, everybody gangsta till huey comes in
[22:48:05] <selwyn> what gunships will do to a mf
[22:49:35] <selwyn> jwst touchdown
[22:50:02] <shka> anyway, tick for tack https://www.youtube.com/watch?v=FWa21X6Wu_s
[22:50:02] -ixelp- Hey Joni - YouTube
[22:50:25] <shka> if somehow never heard of "Daydream Nation" it is one of the best albums ever
[22:52:18] <shka> one of the quintessential rock albums of the 80s 
[23:08:17] *** Joins: vats (~vats@180.149.226.25)
[23:15:16] <gilberth> selwyn: Touchdown? Oh dear! What has it touched? Wasn't there supposed to be just empty space?
[23:17:11] <ck_> it has touched me, in my heart. <3 space telescope
[23:17:51] <gilberth> How romantic. A little light at our dark times.
[23:17:58] <selwyn> i wonder how they will deal with an extra 10 years to do experiments
[23:18:26] <selwyn> perhaps any idiot will be able to get a proposal through
[23:20:16] <gilberth> Frankly, I have no idea what the JWST can do. I mean, in particular. Is it any good for spectrum analysis?
[23:20:30] <selwyn> spectrum?
[23:20:45] <gilberth> Spectral. Perhaps.
[23:20:55] <shka> gilberth: infrared
[23:21:13] <gilberth> Sure, but even infrared comes in different wave length.
[23:21:26] <shka> the point of jwst is to see very distant and very old objects
[23:21:52] <shka> and those tend to be redshifted into deep IR 
[23:21:58] <shka> and very weak
[23:22:09] <gilberth> A pity. I was about to write a proposal to look for Dyson swarms.
[23:22:10] <shka> so the solution is to build big IR space telescope 
[23:22:30] <shka> no, JWST is supposed to unfold the early universe 
[23:22:35] <shka> that's the mission
[23:23:36] <gilberth> I am aware. I was just thinking of some crazy misuse of that device.
[23:24:12] <shka> well, just point it into a random blank spot in space 
[23:24:21] <shka> and make a new deep field
[23:24:22] <selwyn> i can't think of anything else interesting that is in the ir band
[23:24:34] <shka> or better yet, point it into original hubble deep field
[23:28:14] <shka> i think that astronomers will eventually find a interesting use case
[23:28:27] <shka> or they already did so 
[23:37:56] *** Quits: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
