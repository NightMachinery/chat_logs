[04:39:42] *** Joins: subbu (~subbu@user/subbu)
[05:23:51] *** Quits: subbu (~subbu@user/subbu) (Quit: Leaving)
[17:41:17] <edipofederle[m]> Morning all,
[17:57:57] <edipofederle[m]> enebo: when you have some time, could you please take a look at this one: https://github.com/jruby/jruby/pull/6930 ? thanks!
[18:01:01] <enebo[m]> edipo.federle: It defintiely is making an ArithmediSequence now but have you checked to see if it is still iterating properly?
[18:01:35] <enebo[m]> I need to get some more CI jobs hooked up since travis dropped our OSS accuont
[18:02:33] <edipofederle[m]> enebo[m]: Actually no, Do you think we need add some test/spec for it ? could you please guide-me here?
[18:02:59] <enebo[m]> Possibly.  If there are no tests for it
[18:03:27] <enebo[m]> I can see test:mri does look for ArithmeticSequence as a type but let me see if there are any tests beyond that for beginless
[18:03:46] <edipofederle[m]> right, 
[18:04:04] <enebo[m]>     assert_kind_of(Enumerator::ArithmeticSequence, (..10).step(2))
[18:04:34] <enebo[m]> I don't see any tests on this sequence working in MRI test suite
[18:05:55] <enebo[m]> I am not sure I see any beginless range specs
[18:06:08] <enebo[m]> well not in step_spec.rb at least
[18:06:55] <enebo[m]> edipo.federle: for the sake of landing this we are already broken on having the right type so I will land your PR but if you could look at adding specs for how to use this it would be helpful for not only us but the other Ruby impls
[18:07:26] <edipofederle[m]> sure, I am looking into it on ruby/spec
[18:08:09] <enebo[m]> cool.  I merged
[18:08:25] <enebo[m]> I will see what changes in test_range.rb on MRI.  2F should go away just on the type check
[18:08:39] <enebo[m]> I did not see any actual iteration but perhaps I missed something
[18:08:49] <edipofederle[m]> I actually started already with: https://github.com/ruby/spec/pull/895... but not sure yet, I will continue there
[18:09:48] <enebo[m]> yeah great
[18:10:00] <enebo[m]> I am wondering how people use beginless with step
[18:10:17] <enebo[m]> I would not think there is much to be done other than downto
[18:10:26] <edipofederle[m]> true
[18:10:27] <enebo[m]> which is not step :)
[18:10:57] <edipofederle[m]> true  story. well, thanks for now so.
[18:11:39] <enebo[m]> HAH. Thanks for the PR too :)
[19:36:43] *** Joins: nirvdrum (~nirvdrum@pool-100-0-43-133.bstnma.fios.verizon.net)
[20:59:52] *** Joins: nirvdrum[m] (~nirvdrumm@2001:470:69fc:105::1:2b86)
[20:59:53] <nirvdrum[m]> lopex: I was playing around with optimizing compilation around encodings some more. I'm sure you've evaluated this, but it might be worth trying to find another way to set an encoding as being dummy. Since that happens after the encoding is created, both the `isDummy` and `isAsciiCompatible` fields can't be final. Dummy encodings are virtually unused in Ruby, so it's a bit annoying we have to take a performance hit to support them.
[20:59:53] <nirvdrum[m]> I'm finally giving this Matrix thing a shot. I'm hoping it'll be easier to keep track of stuff while at RubyConf.
