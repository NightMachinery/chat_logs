[00:03:37] *** Quits: dynamite (~dynamite@pool-108-48-172-27.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[00:10:23] *** Joins: dynamite (~dynamite@pool-108-48-172-27.washdc.fios.verizon.net)
[00:11:04] *** Quits: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4) (Ping timeout: 250 seconds)
[01:11:05] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[01:11:05] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[01:12:10] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[01:12:31] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[01:23:58] <lucs> Raku constructor question: https://gist.github.com/lucs/387b10ac9576bf9a04fcdfdb12ce91d0
[01:26:12] *** Joins: espadrine (~espadrine@78.196.20.222)
[01:35:57] <Voldenet> lucs: http://ix.io/3MIu
[01:36:28] <thowe> I need an alternative to fail2ban written in raku.
[01:36:36] <El_Che> Foo.new(foo => $x/2); #maybe?
[01:37:33] <lucs> Voldenet: Yes, that works, but I'm trying to find a way where only the Foo class knows what to do with the $x argument.
[01:38:25] <Voldenet> in fact, it returns Foo instead of Bar
[01:38:48] <El_Che> BUILD?
[01:39:11] <lucs> (I'm testing it...)
[01:39:19] *** Quits: espadrine (~espadrine@78.196.20.222) (Quit: Connection closed)
[01:40:59] <MasterDuke> m: class A { has $.foo }; class B is A { method new($x) { self.bless(:foo($x)) } }; say B.new(42).foo
[01:40:59] <camelia> rakudo-moar 16c3dc9a7: OUTPUT: «42␤»
[01:41:49] <MasterDuke> lucs: is ^^^ what you mean?
[01:42:14] <lucs> But if the $x needs to be modified (divided by 2 for example), it appears that it has to happen in the B constructor.
[01:42:46] *** Joins: hasrthur (~hasrthur@45.89.88.214)
[01:42:48] <lucs> Only the A class knows how to modify the 42.
[01:43:36] *** Quits: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[01:44:06] *** Joins: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de)
[01:44:33] <MasterDuke> m: class A { has $.foo; submethod TWEAK() { $!foo /= 2 } }; class B is A { method new($x) { self.bless(:foo($x)) } }; say B.new(42).foo
[01:44:33] <camelia> rakudo-moar 16c3dc9a7: OUTPUT: «21␤»
[01:45:27] <lucs> Yes, closer to what I'm looking for.
[01:45:38] <lucs> I'll beef up my abstraction.
[01:46:32] <gfldex> m: class A { has $.foo }; class B is A { method new($x) { my $self := self.CREATE; use nqp; nqp::bindattr($self, A, '$!foo', $x / 2); $self } }; say B.new(42).foo;
[01:46:32] <camelia> rakudo-moar 16c3dc9a7: OUTPUT: «21␤»
[01:46:36] <gfldex> <-- cheater
[01:46:48] <lucs> Yow! ;)
[01:47:17] *** Quits: hasrthur (~hasrthur@45.89.88.214) (Ping timeout: 256 seconds)
[01:48:27] *** Quits: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[01:48:40] *** Joins: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de)
[01:52:08] <MasterDuke> m: class A { has $.foo }; class B is A { method new($x) { use nqp; nqp::p6bindattrinvres(nqp::create(self), A, '$!foo', $x / 2); } }; say B.new(42).foo;   # another take on gfldex's cheat
[01:52:09] <camelia> rakudo-moar 16c3dc9a7: OUTPUT: «21␤»
[01:52:29] <lucs> I really need to go with nqp to solve this?
[01:52:40] *** Quits: morte_ (~user@190.104.116.153) (Remote host closed the connection)
[01:52:59] <discord-raku-bot> <grenzo#3668> # Maybe try this:
[01:52:59] <discord-raku-bot> <grenzo#3668> class Foo {
[01:52:59] <discord-raku-bot> <grenzo#3668>    has $.foo;
[01:52:59] <discord-raku-bot> <grenzo#3668>    submethod BUILD (:$foo) {
[01:52:59] <discord-raku-bot> <grenzo#3668>       $!foo = $foo;
[01:53:00] <discord-raku-bot> <grenzo#3668>    }
[01:53:00] <discord-raku-bot> <grenzo#3668> }
[01:53:01] <discord-raku-bot> <grenzo#3668> class Bar is Foo {}
[01:53:01] <discord-raku-bot> <grenzo#3668> print Bar.new(foo => 42).foo
[01:53:55] <lucs> Bar should know nothing of Foo's implementation.
[01:54:15] <MasterDuke> dunno. doesn't my version with TWEAK meet that requirement?
[01:54:16] <lucs> I'll have a better abstract example of what I'm after in a few minutes...
[01:55:52] *** Quits: jrjsmrtn (~jrjsmrtn@ip-212-239-244-124.dsl.scarlet.be) (Read error: Connection reset by peer)
[01:58:14] *** Joins: jrjsmrtn (~jrjsmrtn@ip-212-239-244-124.dsl.scarlet.be)
[02:03:02] *** Quits: jrjsmrtn (~jrjsmrtn@ip-212-239-244-124.dsl.scarlet.be) (Ping timeout: 240 seconds)
[02:05:45] <Voldenet> lucs: so after previous bad example, this is probably better one http://ix.io/3MIv
[02:06:14] <lucs> Yes, thanks, but my example was not clear.
[02:06:20] <lucs> Revised here:
[02:06:27] *** Joins: jrjsmrtn (~jrjsmrtn@ip-212-239-244-124.dsl.scarlet.be)
[02:06:34] <lucs> https://gist.github.com/lucs/387b10ac9576bf9a04fcdfdb12ce91d0
[02:08:03] <Voldenet> BUILD is better than new
[02:09:06] <lucs> I don't code in Raku enough, I keep forgetting how things work :/
[02:09:13] <lucs> I'll read up on BUILD again.
[02:09:29] <MasterDuke> well, and TWEAK is preferred over BUILD if possible
[02:09:33] <vrurg> TWEAK is better than BUILD
[02:09:36] <El_Che> maybe you just want to be too smart :)
[02:09:56] <vrurg> MasterDuke++ :)
[02:10:30] <Voldenet> huh, but why TWEAK is better? Doesn't the value get assigned twice then?
[02:11:51] <lucs> I've used TWEAK in the past, but I'm not sure how that helps with my problem, that is: how to set up the A part of the B instance so that some-A-method will know about that initial 42 argument.
[02:12:22] <lucs> That is, given that class B has no idea how A is implemented.
[02:13:35] <MasterDuke> m: class A { has $.foo; submethod TWEAK() { $!foo /= 2 }; method something() { return $!foo }; }; class B is A { has $.bar = 66; method new($x) { self.bless(:foo($x)) } }; my $b = B.new(42); say $b.foo; say $b.something; say $b.bar
[02:13:35] <camelia> rakudo-moar 16c3dc9a7: OUTPUT: «21␤21␤66␤»
[02:14:12] <lucs> That solution has B knowing about A's foo :/
[02:14:56] <MasterDuke> it's a subclass, why wouldn't it know about the public members of A?
[02:15:29] <lucs> Again, sorry, my example doesn't quite represent my problem I guess.
[02:15:39] <lucs> It's not necessarily a public member.
[02:15:45] <vrurg> Voldenet: the default construction protocol depends on BUILD. If it is not specificied it then creates one for you when necessary. If you have a BUILD then much of construction work has to be done manually.
[02:16:10] <vrurg> lucs: if it's not a public then subclass must not mangle with it.
[02:16:30] <lucs> Class A has some-A-method(), and the latter will return something that has to do with the 42 argument passed to the B constructor.
[02:16:56] <lucs> But B doesn't know how that happens.
[02:17:15] <MasterDuke> m: class A { has $.foo; has $!baz; submethod TWEAK() { $!baz = $!foo / 2 }; method something() { return $!baz }; }; class B is A { has $.bar = 66; method new($x) { self.bless(:foo($x)) } }; my $b = B.new(42); say $b.foo; say $b.something; say $b.bar
[02:17:16] <camelia> rakudo-moar 16c3dc9a7: OUTPUT: «42␤21␤66␤»
[02:17:54] <lucs> I'll rework my example...
[02:19:11] <MasterDuke> don't actually need the TWEAK in my example, could just be `has $!baz = $!foo / 2;`
[02:22:51] <Voldenet> vrurg: I see, that makes sense
[02:29:38] <lucs> "vrurg> lucs: if it's not a public then subclass must not mangle with it."
[02:30:36] <lucs> Right. I want the parent class to do the mangling, and the subclass to be able to get to the mangled value with for example some-A-method.
[02:30:37] <Voldenet> lucs: public constructor is part of the contract for subclasses
[02:32:21] <[Coke]> then you need an accessor or method in A that B calls explicitly
[02:33:22] <lucs> Uh, A doesn't know about B, can it?
[02:33:25] <vrurg> lucs: re-phrasing [Coke], then you need a public interface for a private entity
[02:33:38] *** Quits: lichtkind (~lichtkind@p200300d0a71d96df80fd957a856eb289.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[02:33:46] <vrurg> lucs: BTW, A can know about B.
[02:33:57] <lucs> Yes, I think that's what I want: class A has a some-
[02:34:02] <lucs> oops
[02:34:07] <vrurg> And on rare occasions A can trust B to provide access to its private members.
[02:34:18] <lucs> Yes, I think that's what I want: class A has a some-A-method() returning the mangled value.
[02:34:18] <vrurg> But this is unrecommended most of the time.
[02:35:27] <lucs> So invoking B.new(42) somehow passes that 42 to the A constructor (or whatever) and later, some-A-method() returns the mangled value.
[02:35:33] <MasterDuke> i'm not sure how my example doesn't match your description
[02:36:16] <[Coke]> You're trying to make B too aware of A.
[02:36:37] <lucs> Your example has class B knowing about $.foo, which it shouldn't (except it should, because my example was not precise enough to match what I'm after).
[02:37:16] <lucs> I'll write up a concrete example.
[02:37:59] <vrurg> lucs: I have a very strong feeling that you have mis-designed or over-engineered your code. :)
[02:38:26] <vrurg> But better see the example in first place.
[02:43:11] <MasterDuke> m: class A { has $!baz; method new($x) { self.bless(:foo($x)) }; submethod BUILD(:$foo) { $!baz = $foo / 2 }; method some-A-method() { return $!baz }; }; class B is A { has $.bar = 66; }; my $b = B.new(42); say $b.some-A-method; say $b.bar    # sounds like this maybe?
[02:43:11] <camelia> rakudo-moar 16c3dc9a7: OUTPUT: «21␤66␤»
[02:43:59] <lucs> Looking...
[02:45:52] <gfldex> m: class A { has $.foo; submethod TWEAK { $!foo = $*x; } }; class B is A { method new($*x) { self.bless } }; say B.new(42).foo;
[02:45:52] <camelia> rakudo-moar 16c3dc9a7: OUTPUT: «42␤»
[02:46:33] <vrurg> MasterDuke: you still can use TWEAK in the last example. :foo will arrive into it.
[02:46:59] <MasterDuke> ah, nice
[02:49:13] <lucs> MasterDuke: Your last example is what I was after (I'll look at the TWEAK in a minute).
[02:49:40] <MasterDuke> cool
[02:49:54] <lucs> You guys (and gals, eh) are great!
[02:50:22] <lucs> So I really have to read up on the construction process more carefully.
[02:51:18] <gfldex> If any subclass overloads method new, you are out of luck.
[02:51:30] <lucs> gfldex: I don't understand the  $*x
[02:51:36] <gfldex> :D
[02:51:54] <lucs> Not funny! ;-)
[02:52:12] <gfldex> You want to forward a positional argument into a method call in another class.
[02:52:45] <gfldex> So I put the value into a dynvar and as such onto the call stack.
[02:53:50] * vrurg would ignore gfldex ;)
[02:53:59] <vrurg> He loves tricks even more than I do... :)
[02:54:24] <lucs> I've read (not necessarily understood) some of his stuff before, I know what you mean.
[02:54:46] <lucs> But seriously, I love what you figure out gfldex.
[02:55:44] <gfldex> I do agree that Raku is -Ofun. I had loads of that the past couple of years.
[02:58:40] <lucs> D'oh! $*x. I get it now. I'd completely forgotten about those.
[02:59:37] <lucs> (I would never have guessed to use them for my problem though, eh.)
[03:00:22] <lucs> All this to help me build a Wordle solver helper :-)
[03:33:39] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:33:39] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:36:16] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[03:37:31] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:57:06] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:14be:59d4:43c7:c828) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[04:06:36] *** Quits: Kaiepi (~Kaiepi@156.34.47.253) (Remote host closed the connection)
[04:09:22] *** Joins: Kaiepi (~Kaiepi@156.34.47.253)
[04:24:24] *** Quits: Kaiepi (~Kaiepi@156.34.47.253) (Remote host closed the connection)
[04:33:15] *** Joins: Kaiepi (~Kaiepi@156.34.47.253)
[04:39:42] *** Joins: zj (~zj@203.175.13.203)
[04:40:10] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[04:46:26] *** Quits: Kaiepi (~Kaiepi@156.34.47.253) (Remote host closed the connection)
[05:13:40] *** Joins: Kaiepi (~Kaiepi@156.34.47.253)
[05:16:54] *** Quits: Kaiepi (~Kaiepi@156.34.47.253) (Remote host closed the connection)
[05:19:34] *** Quits: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[05:19:58] *** Joins: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de)
[05:21:22] *** Joins: Kaiepi (~Kaiepi@156.34.47.253)
[05:23:04] *** Quits: gfldex (~dex@ip5f5ab74b.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[05:27:47] *** Joins: gfldex (~dex@ip5f5ab74b.dynamic.kabel-deutschland.de)
[05:28:06] *** Quits: Kaiepi (~Kaiepi@156.34.47.253) (Remote host closed the connection)
[05:30:09] *** Joins: Kaiepi (~Kaiepi@156.34.47.253)
[05:35:49] *** Quits: dynamite (~dynamite@pool-108-48-172-27.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[06:31:48] *** Quits: m_athias (~m-fteeyd@comm.detonation.org) (Remote host closed the connection)
[06:31:48] *** Quits: nine (~nine@comm.detonation.org) (Remote host closed the connection)
[06:31:54] *** Joins: nine (~nine@comm.detonation.org)
[06:32:25] *** Joins: m_athias (~m-fteeyd@comm.detonation.org)
[06:35:57] *** Joins: frost (~frost@user/frost)
[07:33:44] *** Joins: razetime (~quassel@49.207.203.87)
[07:51:35] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[08:00:28] *** Joins: dynamite (~dynamite@pool-108-48-172-27.washdc.fios.verizon.net)
[08:07:18] *** Joins: guifa (~guifa@host-23-251-65-252.VALOLT4.epbfi.com)
[08:07:23] <guifa> o/
[08:07:47] <moon-child> \o
[08:14:44] *** Joins: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4)
[08:16:35] *** Quits: kjp (~kevin@n175-36-89-183.mrk2.qld.optusnet.com.au) (Ping timeout: 256 seconds)
[08:20:47] *** Joins: kjp (~kevin@n175-36-89-183.mrk2.qld.optusnet.com.au)
[08:38:56] *** Quits: zj (~zj@203.175.13.203) (Quit: Ping timeout (120 seconds))
[08:51:57] *** Joins: mexen (uid495612@user/mexen)
[08:53:25] *** Joins: frost (~frost@user/frost)
[09:25:18] *** Quits: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4) (Ping timeout: 250 seconds)
[09:32:14] *** Quits: kjp (~kevin@n175-36-89-183.mrk2.qld.optusnet.com.au) (Ping timeout: 250 seconds)
[09:37:55] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:40:12] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[09:44:42] *** Joins: kjp (~kevin@n175-36-89-183.mrk2.qld.optusnet.com.au)
[10:07:53] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[10:10:17] *** Joins: frost (~frost@user/frost)
[10:34:09] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[10:46:17] *** Quits: frost (~frost@user/frost) (Ping timeout: 268 seconds)
[10:58:33] *** Joins: frost (~frost@user/frost)
[11:04:29] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[11:09:18] *** Joins: ufobat (~martin@dynamic-077-009-048-067.77.9.pool.telefonica.de)
[11:11:28] *** Quits: seednode99 (~seednode@user/seednode) (Quit: Nihil supernum.)
[11:12:28] *** Joins: seednode99 (~seednode@user/seednode)
[11:21:38] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:14be:59d4:43c7:c828)
[11:25:30] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:37:23] *** Joins: abraxxa (~ahartmai@smtp.hartmaier.priv.at)
[11:37:31] *** Joins: dakkar (~dakkar@home.thenautilus.net)
[11:52:05] *** Quits: abraxxa (~ahartmai@smtp.hartmaier.priv.at) (Ping timeout: 256 seconds)
[11:52:50] *** Joins: abraxxa (~ahartmai@tsa-tc-flod.t-systems.at)
[12:07:46] *** Joins: lichtkind (~lichtkind@p200300d0a71d96df80fd957a856eb289.dip0.t-ipconnect.de)
[12:15:42] *** Quits: dynamite (~dynamite@pool-108-48-172-27.washdc.fios.verizon.net) (Ping timeout: 268 seconds)
[12:31:36] *** Quits: ufobat (~martin@dynamic-077-009-048-067.77.9.pool.telefonica.de) (Quit: Leaving)
[12:37:27] *** Quits: jmcgnh (~jmcgnh@wikipedia/jmcgnh) (Ping timeout: 250 seconds)
[12:40:17] *** Joins: hasrthur (~hasrthur@45.89.88.214)
[12:43:43] *** Joins: jmcgnh (~jmcgnh@wikipedia/jmcgnh)
[12:51:40] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:14be:59d4:43c7:c828) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:05:10] <younder> Do you use the comma editor?
[13:06:28] <younder> It seems better than the Emacs mode and  the Visual studio code mode.  They need the intellisense completion of comma.
[13:06:36] <younder> Of course there is vim..
[13:10:34] <younder> Been working on the emacs mode. Prettify allows unicode charactes to be substituded for op+erators which also incedentally alers you if our combo  needs a space so it is not interprented as a operator.
[13:11:34] <younder> s/alers/alerts/
[13:16:15] <younder> Not sure how to do the intellisense though. Perhaps I'll take some of the experience from SLIME. (Superrior Lisp Interaction Mode). Anyhow I will need a running interprenter to import modules and see their export functions.
[13:17:04] * lizmat forgot to clickbait https://rakudoweekly.blog/2022/01/17/2022-03-rakucon-how/ yesterday
[13:26:49] <younder> I had a problem reading /usr/share/ispell/amarican.. dictionary. It seems it is written in latin1! '@DICTIONARY = $DictionaryFile.IO.lines silenly returns an empty list. You need to add (enc => "latin1") to the end. Seriosly annoying! It to me hours to figure out. Perhaps something for rakudo to look at.
[13:27:29] <lizmat> that feels....  weird
[13:28:24] <lizmat> could you run: dd $DictionaryFile.IO.lines without the enc and tell me what that says ?
[13:30:15] <younder> dd @DICIONARY; returns @DICTIONARY = []
[13:30:24] <younder> no error
[13:32:24] <lizmat> I want to see what $DictionaryFile.IO.lines  returns, *not* what is in @DICTIONARY
[13:36:25] <younder> but @DICTIONARY = $DictionaryFile.IO.lines
[13:36:54] <younder> shouldn't they be the same?
[13:38:46] <younder> It sais Malformed utf8 near bytes 62 e9 2f
[13:47:01] <lizmat> ok, so I guess the problem is that .lines returns a Failure, and it should probably throw
[13:47:44] <younder> I found french accents in the american dictionary. The reason for the problem. An yes an exception would help.
[13:49:42] <lizmat> could you please make an issue for that?  I don't have time to look at it now, and am afraid it will fall through the cracks otherwise
[13:49:53] <lizmat> also: please include (a part) of the file that causes the issue
[13:51:10] <younder> Will do.. This sort of thing turns peaple away from raku. And the language deserves better!
[13:51:17] *** Quits: qorg11 (~lain@2605:6400:c022:fa04::666) (Ping timeout: 268 seconds)
[13:52:23] <younder> lizmat: How do make an issue?
[13:53:57] <younder> s/do make/do I make/
[13:55:10] <lizmat> https://github.com/rakudo/rakudo/issues/new
[13:55:22] <younder> thanks
[13:55:31] <lizmat> thank you!  :-)
[13:58:41] *** Quits: razetime (~quassel@49.207.203.87) (Ping timeout: 268 seconds)
[13:58:54] *** Joins: razetime (~quassel@49.207.203.87)
[14:05:41] *** Joins: xinming (~xinming@115.219.39.165)
[14:11:50] *** Joins: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4)
[14:16:52] <gfldex> m: sub wantfail(&block) { CATCH { default { fail($_) } } block }; put wantfail { 42 }; put wantfail { die "oopsy!"; };
[14:16:53] <camelia> rakudo-moar 16c3dc9a7: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3&block) { CATCH { default { fail($_) } }7⏏5 block }; put wantfail { 42 }; put wantf␤»
[14:17:08] <gfldex> m: sub wantfail(&block) { CATCH { default { fail($_) } }; block }; put wantfail { 42 }; put wantfail { die "oopsy!"; };
[14:17:08] <camelia> rakudo-moar 16c3dc9a7: OUTPUT: «42␤oopsy!␤  in block <unit> at <tmp> line 1␤␤»
[14:17:29] <gfldex> I think I will put that in my AST-macro-plan file.
[14:18:32] *** Quits: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4) (Ping timeout: 240 seconds)
[14:22:41] *** Quits: younder (~younder@33.51-174-155.customer.lyse.net) (Quit: Connection closed)
[14:50:21] *** Joins: dynamite (~dynamite@pool-108-48-172-27.washdc.fios.verizon.net)
[14:54:18] <elcaro_> FWIW, I can't get a latin-1 file read to somehow result in an empty array like younder reported
[14:55:04] <elcaro_> obv. I can assign `.lines` to a scalar - which is lazy - but the Failure always bubbles up eventually.
[14:55:36] *** elcaro_ is now known as elcaro
[14:55:47] <lizmat> with "foo".IO.lines -> @array {
[14:55:54] <lizmat> would silently eat the Failure
[14:57:10] <elcaro> ahh, it's a bad choice to use `with` there. I'm generally more careful with my use of `with`. I feel like some people use it in place of `given` without realising the difference
[14:58:36] <elcaro> it's a bit of a newbie trap, so maybe throwing on malformed utf8 is not a bad idea
[14:59:55] <elcaro> lizmat: hmm, even using `with`, the failure still bubbles up as soon as I do anything with the `@array`
[15:00:29] <lizmat> hmmm...  ok
[15:02:34] <elcaro> will wait to see if the issue gets raised
[15:04:15] <discord-raku-bot> <Nemokosch#9980> yes, I don't know why people use with over given, when they don't reason about the value to topicalize being Nil
[15:37:59] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:38:41] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[15:47:50] *** Joins: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4)
[16:12:41] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[16:13:02] *** Joins: greyrat_ (~greyrat@ip202.ip-51-178-215.eu)
[16:13:36] *** Joins: rir__ (~rir@2601:192:8601:280:8902:c253:af7d:f779)
[16:14:46] *** Joins: dustinm`_ (~dustinm@static.38.6.217.95.clients.your-server.de)
[16:14:52] *** Joins: lucs_ (~lucs@user/lucs)
[16:14:56] *** Joins: jercos_ (jercos@xyl.be)
[16:15:04] *** Joins: greaser|q (greaser@antihype.space)
[16:15:08] *** Joins: ecocode_ (~ecocode@ks39550.kimsufi.com)
[16:15:11] *** Joins: bartolin_ (~christian@mail.aglaz.de)
[16:15:26] *** Joins: Od1n1 (~Od1n@aurora-borealis.phear.org)
[16:15:39] *** Joins: tonyo1 (~tonyo@ec2-54-190-144-97.us-west-2.compute.amazonaws.com)
[16:16:04] *** Joins: dgl (~dgl@dg.wtf)
[16:16:06] *** Quits: lgtaube (~lgt@213-67-21-71-no84.tbcn.telia.com) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: ecocode (~ecocode@2001:41d0:1:6a74::1) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: vodkra (~vodkra@user/vodkra) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: destroycomputers (~destroyco@5.188.41.98) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: jercos (jercos@xyl.be) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: lucs (~lucs@user/lucs) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: dg (~dgl@dg.wtf) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: bartolin (~christian@mail.aglaz.de) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: tonyo (~tonyo@ec2-54-190-144-97.us-west-2.compute.amazonaws.com) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: ugexe (ugexe@p6.nu) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: rir_ (~rir@2601:192:8601:280:9064:d584:a83d:8620) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: Oshawott (~archenoth@2604:3d09:681:f00:3863:cfe8:507d:8d05) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: mtj (quasselcor@2400:8902::f03c:91ff:fe93:b7f1) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: gordonfish (~gordonfis@user/gordonfish) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: dustinm` (~dustinm@static.38.6.217.95.clients.your-server.de) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: Od1n (~Od1n@aurora-borealis.phear.org) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: Skarsnik (~Skarsnik@91-170-31-218.subs.proxad.net) (Ping timeout: 240 seconds)
[16:16:08] *** Quits: leedo (leedo@2600:3c03::f03c:91ff:fe91:982f) (Ping timeout: 240 seconds)
[16:16:13] *** perlbot_ is now known as perlbot
[16:16:13] *** gordonfish- is now known as gordonfish
[16:16:14] *** Joins: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de)
[16:16:41] *** Joins: ugexe (ugexe@p6.nu)
[16:16:54] *** Joins: destroycomputers (~destroyco@5.188.41.98)
[16:17:04] *** Server sets mode: +nt 
[16:17:06] *** Joins: mtj (quasselcor@2400:8902::f03c:91ff:fe93:b7f1)
[16:17:22] *** Joins: leedo (leedo@2600:3c03::f03c:91ff:fe91:982f)
[16:19:57] *** Quits: ecocode_ (~ecocode@ks39550.kimsufi.com) (Ping timeout: 256 seconds)
[16:20:04] *** Joins: vodkra (~vodkra@user/vodkra)
[16:24:09] *** Joins: kjp (~kevin@n175-36-89-183.mrk2.qld.optusnet.com.au)
[16:25:16] *** Joins: ecocode (~ecocode@ks39550.kimsufi.com)
[16:26:55] *** Joins: lgtaube (~lgt@213-67-21-71-no84.tbcn.telia.com)
[16:40:30] *** Quits: Kaiepi (~Kaiepi@156.34.47.253) (Quit: Leaving)
[16:40:45] *** Joins: Kaiepi (~Kaiepi@156.34.47.253)
[17:27:40] *** Joins: ufobat (~martin@dynamic-077-009-048-067.77.9.pool.telefonica.de)
[18:00:06] *** Quits: Geth__ (~LizBot@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[18:00:13] *** Joins: Geth (~LizBot@ipv4-wenzperl.connected.by.freedominter.net)
[18:00:25] *** Quits: seednode99 (~seednode@user/seednode) (Ping timeout: 268 seconds)
[18:18:19] *** Joins: morte_ (~user@190.104.116.153)
[18:20:57] *** Quits: Geth (~LizBot@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[18:21:05] *** Joins: Geth (~LizBot@ipv4-wenzperl.connected.by.freedominter.net)
[18:27:02] *** Quits: lichtkind (~lichtkind@p200300d0a71d96df80fd957a856eb289.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[18:32:51] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:59:28] *** Quits: abraxxa (~ahartmai@tsa-tc-flod.t-systems.at) (Read error: Connection reset by peer)
[19:01:36] *** Joins: abraxxa (~ahartmai@tsa-tc-flod.t-systems.at)
[20:01:36] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[20:01:36] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[20:07:26] *** Quits: morte_ (~user@190.104.116.153) (Remote host closed the connection)
[20:09:04] *** Quits: dakkar (~dakkar@home.thenautilus.net) (Ping timeout: 256 seconds)
[20:20:51] *** Joins: Sgeo_ (~Sgeo@user/sgeo)
[20:20:57] *** Quits: Sgeo (~Sgeo@user/sgeo) (Ping timeout: 240 seconds)
[20:25:32] *** Quits: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4) (Ping timeout: 240 seconds)
[20:31:32] *** Quits: hasrthur (~hasrthur@45.89.88.214) (Ping timeout: 240 seconds)
[20:36:16] *** Joins: hasrthur (~hasrthur@45.89.88.214)
[20:59:19] *** Quits: razetime (~quassel@49.207.203.87) (Ping timeout: 256 seconds)
[21:08:23] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Ping timeout: 256 seconds)
[21:09:44] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[21:12:42] *** Joins: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4)
[21:27:50] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:14be:59d4:43c7:c828)
[21:35:59] *** Quits: abraxxa (~ahartmai@tsa-tc-flod.t-systems.at) (Remote host closed the connection)
[21:37:48] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[21:40:04] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[22:01:58] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[22:08:37] *** Joins: dogbert17 (~dogbert@c83-253-59-194.bredband.tele2.se)
[22:10:32] *** Quits: dogbert11 (~dogbert@c83-253-59-194.bredband.tele2.se) (Ping timeout: 240 seconds)
[22:25:38] *** Quits: Kaiepi (~Kaiepi@156.34.47.253) (Remote host closed the connection)
[22:26:15] *** Joins: Kaiepi (~Kaiepi@156.34.47.253)
[22:29:37] *** Quits: ufobat (~martin@dynamic-077-009-048-067.77.9.pool.telefonica.de) (Ping timeout: 240 seconds)
[22:41:57] <Geth> ¦ doc/codesections-handles-hyperwhatever: b383726435 | (Daniel Sockwell)++ (committed using GitHub Web editor) | doc/Language/objects.pod6
[22:41:57] <Geth> ¦ doc/codesections-handles-hyperwhatever: Document `handles(**)`
[22:41:57] <Geth> ¦ doc/codesections-handles-hyperwhatever: 
[22:41:57] <Geth> ¦ doc/codesections-handles-hyperwhatever: Explains that you can pass a HyperWhatever to the `handles` method
[22:41:57] <Geth> ¦ doc/codesections-handles-hyperwhatever: and describes how that's different from passing a Whatever.
[22:41:57] <Geth> ¦ doc/codesections-handles-hyperwhatever: review: https://github.com/Raku/doc/commit/b383726435
[22:42:48] <Geth> ¦ doc/codesections-handles-hyperwhatever-1: 87e9e0a65a | (Daniel Sockwell)++ (committed using GitHub Web editor) | doc/Language/objects.pod6
[22:42:48] <Geth> ¦ doc/codesections-handles-hyperwhatever-1: Document `handles(**)`
[22:42:48] <Geth> ¦ doc/codesections-handles-hyperwhatever-1: 
[22:42:48] <Geth> ¦ doc/codesections-handles-hyperwhatever-1: Explains that you can pass a HyperWhatever to the `handles` method
[22:42:48] <Geth> ¦ doc/codesections-handles-hyperwhatever-1: and describes how that's different from passing a Whatever.
[22:42:48] <Geth> ¦ doc/codesections-handles-hyperwhatever-1: review: https://github.com/Raku/doc/commit/87e9e0a65a
[22:45:04] *** Quits: Geth (~LizBot@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[22:45:11] *** Joins: Geth (~LizBot@ipv4-wenzperl.connected.by.freedominter.net)
[22:45:11] <Geth> ¦ doc: codesections++ created pull request #4019: Document `handles(**)`
[22:45:11] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/4019
[23:05:16] *** Joins: hasrthur_ (~hasrthur@45.89.88.214)
[23:05:16] *** Quits: hasrthur (~hasrthur@45.89.88.214) (Read error: Connection reset by peer)
[23:10:22] *** Quits: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4) (Ping timeout: 250 seconds)
[23:11:48] *** Joins: morte_ (~user@190.104.116.153)
[23:22:59] *** Quits: greaser|q (greaser@antihype.space) (Changing host)
[23:22:59] *** Joins: greaser|q (greaser@user/greasemonkey)
[23:23:02] *** greaser|q is now known as GreaseMonkey
[23:30:14] *** Quits: kjp (~kevin@n175-36-89-183.mrk2.qld.optusnet.com.au) (Ping timeout: 256 seconds)
[23:31:40] *** Joins: kjp (~kevin@n175-36-89-183.mrk2.qld.optusnet.com.au)
[23:33:05] *** Joins: ufobat (~martin@dynamic-077-009-048-067.77.9.pool.telefonica.de)
[23:41:12] *** Joins: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4)
