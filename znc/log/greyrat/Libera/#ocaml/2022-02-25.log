[00:05:21] *** Joins: mro (~mro@port-92-195-141-253.dynamic.as20676.net)
[00:05:42] *** Quits: gravicappa (~gravicapp@145.255.0.191) (Ping timeout: 272 seconds)
[00:09:48] *** Quits: mro (~mro@port-92-195-141-253.dynamic.as20676.net) (Ping timeout: 256 seconds)
[00:25:59] *** Joins: mro (~mro@port-92-195-141-253.dynamic.as20676.net)
[00:35:51] *** Quits: gwizon (~gwizon@ool-45798b07.dyn.optonline.net) (Quit: Lost terminal)
[00:51:41] *** Joins: rgrinberg (~textual@187.223.124.14)
[01:04:29] *** Quits: mro (~mro@port-92-195-141-253.dynamic.as20676.net) (Ping timeout: 256 seconds)
[01:12:26] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:31:11] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi) (Quit: Leaving.)
[02:12:55] *** Quits: rgrinberg (~textual@187.223.124.14) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:15:16] *** Joins: rgrinberg (~textual@2806:101e:7:79ba:11ea:9b9c:df34:d74e)
[02:18:44] *** Quits: kaph (~kaph@net-109-116-117-37.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[02:22:17] *** Joins: kaph (~kaph@net-109-116-117-37.cust.vodafonedsl.it)
[02:31:14] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 260 seconds)
[02:33:29] *** Quits: bgs (~bgs@cpe-212-85-160-171.cable.telemach.net) (Ping timeout: 252 seconds)
[02:34:34] *** Joins: bgs (~bgs@cpe-212-85-160-171.cable.telemach.net)
[02:48:33] <d_bot_> <Alistair> Did Caml really getting written like this back in the day?
[02:48:34] <d_bot_> <Alistair> https://cdn.discordapp.com/attachments/436568060288172044/946546667912564817/unknown.png
[02:51:56] <d_bot_> <Butanium (@me on answer)> Looks like Latex xD
[02:52:11] <d_bot_> <Butanium (@me on answer)> It wouldn't surprise me if that was the case
[03:03:53] *** Quits: rgrinberg (~textual@2806:101e:7:79ba:11ea:9b9c:df34:d74e) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:23:26] *** Joins: quartz (~quartz@user/quartz)
[03:29:23] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:358d:3a29:7d14:a6d)
[03:33:20] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[03:35:51] <remexre> is there a way with ocamllex to emit multiple tokens?
[03:36:39] <remexre> I have rational literals, but ideally "001/000" would lex as [int; slash; int] rather than [rational]
[03:37:54] <remexre> oh wait never mind, I could just make the associated data be a pair of ints and handle it in the parser
[03:38:04] <quartz> Hello. I'm trying to write a simple functio in OCaml that returns the max value of a list of ints. Can someone tell me why the compiler is complaining at line 11? https://godbolt.org/z/e1r7hs7Y1
[03:40:26] <d_bot_> <Alistair> function application is left-associative, so `maxVal max List.tl l` is being parsed as `((maxVal max) List.tl) l`
[03:40:40] <quartz> Ahhh
[03:44:14] <quartz> Alistair: Can you tell me why the function does not work? I'm not sure what I did wrong: https://godbolt.org/z/YohdMWWTE
[03:44:28] <quartz> It is suppose to return the highest value in the list.
[03:47:22] *** Quits: olle (~olle@i5E866D87.versanet.de) (Ping timeout: 250 seconds)
[03:50:09] *** Quits: bgs (~bgs@cpe-212-85-160-171.cable.telemach.net) (Read error: Connection reset by peer)
[03:50:28] *** Joins: bgs (~bgs@cpe-212-85-160-171.cable.telemach.net)
[03:51:25] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[03:51:40] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[03:59:15] *** Quits: cedric (~cedric@2a01:cb11:821:7c00:bf5b:c400:3cbc:7333) (Quit: Konversation terminated!)
[04:02:50] <quartz> Anyone?
[04:14:12] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[04:14:54] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[04:20:36] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:358d:3a29:7d14:a6d) (Ping timeout: 240 seconds)
[04:22:13] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[04:34:36] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[04:38:04] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 250 seconds)
[04:38:19] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.4)
[04:51:07] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[05:11:11] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 250 seconds)
[05:19:24] <d_bot_> <hcarty> quartz check your comparison of max against the first list element
[05:21:55] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[05:29:12] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 250 seconds)
[05:55:24] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:fdaa:179b:adf9:7fb4)
[06:01:38] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[06:09:10] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 260 seconds)
[06:30:47] <gopiandcode> hi!
[06:31:51] <gopiandcode> Does anyone familiar with the mirage crypto libs know whether the following python code is equivalent to my OCaml implementation?
[06:33:06] <gopiandcode> signer = PKCS1_v1_5.new(privkey)\n   digest = SHA256.new()\n   digest.update(str.encode("utf-8")\n   result = base64.b64encode(signer.sign(digest))
[06:33:22] <gopiandcode> let sign str = X509.PKCS12.create ~mac:`SHA256 str [] private_key |> X509.PKCS12.encode_der |> Cstruct.to_string
[06:33:23] <gopiandcode> let () = print_endline @@ (Base64.encode (sign signed_string) |> Result.get_exn)
[06:33:56] *** Quits: chrisz (ee5lbrrgta@55d42b10.access.ecotel.net) (Ping timeout: 272 seconds)
[06:33:57] <gopiandcode> using mirage-crypto-ec and x509
[06:35:24] *** Joins: chrisz (kzl6qdiutz@55d41ae4.access.ecotel.net)
[06:39:26] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[07:08:54] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[07:23:30] *** Joins: mbuf (~Shakthi@223.178.103.82)
[07:23:43] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Quit: leaving)
[07:38:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[08:30:32] *** Joins: zebrag (~chris@user/zebrag)
[08:48:21] *** Quits: troydm (~troydm@host-176-37-124-197.b025.la.net.ua) (Ping timeout: 256 seconds)
[09:01:19] *** Joins: troydm (~troydm@host-176-37-124-197.b025.la.net.ua)
[09:13:21] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[09:15:02] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[09:16:04] *** Quits: troydm (~troydm@host-176-37-124-197.b025.la.net.ua) (Ping timeout: 272 seconds)
[09:34:21] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:fdaa:179b:adf9:7fb4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:36:25] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:fdaa:179b:adf9:7fb4)
[09:42:42] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Ping timeout: 256 seconds)
[09:43:51] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:fdaa:179b:adf9:7fb4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:47:14] *** Joins: epony (epony@user/epony)
[09:58:39] *** Joins: troydm (~troydm@host-176-37-124-197.b025.la.net.ua)
[10:15:16] *** Joins: gravicappa (~gravicapp@145.255.0.191)
[10:27:22] *** Joins: mro (~mro@port-92-195-238-48.dynamic.as20676.net)
[10:36:55] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:50:21] *** Quits: mro (~mro@port-92-195-238-48.dynamic.as20676.net) (Remote host closed the connection)
[10:51:57] *** Joins: mro (~mro@port-92-195-238-48.dynamic.as20676.net)
[10:54:08] *** Quits: mro (~mro@port-92-195-238-48.dynamic.as20676.net) (Remote host closed the connection)
[11:00:10] *** Joins: mro (~mro@port-92-195-238-48.dynamic.as20676.net)
[11:13:26] *** Quits: kaph (~kaph@net-109-116-117-37.cust.vodafonedsl.it) (Ping timeout: 260 seconds)
[11:18:13] <d_bot_> <NULL> quartz: To work on lists, you should use pattern matching rather than List.{hd,tl}. You should forget about those functions, they have little to no use in (good) OCaml code
[11:55:19] *** Quits: dextaa_ (~dextaa@user/dextaa) (Read error: Connection reset by peer)
[11:57:24] *** Joins: dextaa_ (~dextaa@user/dextaa)
[12:18:57] *** Joins: bartholin (~bartholin@158.110.70.204)
[12:48:58] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[12:49:32] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[13:11:28] *** Quits: bartholin (~bartholin@158.110.70.204) (Quit: Leaving)
[13:18:15] *** Quits: gravicappa (~gravicapp@145.255.0.191) (Ping timeout: 250 seconds)
[13:45:23] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[13:53:44] *** Joins: spip (~bobo@37.164.200.168)
[13:59:34] *** Joins: olle (~olle@i5E866D9A.versanet.de)
[14:01:21] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[14:22:17] *** Joins: wonko (~wjc@user/wonko)
[14:23:13] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Quit: ZNC - https://znc.in)
[14:23:32] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[14:54:52] *** Joins: gravicappa (~gravicapp@145.255.0.191)
[14:55:51] *** Quits: mro (~mro@port-92-195-238-48.dynamic.as20676.net) (Remote host closed the connection)
[14:56:01] *** Joins: mro (~mro@port-92-195-238-48.dynamic.as20676.net)
[15:04:21] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[15:09:29] *** Quits: mro (~mro@port-92-195-238-48.dynamic.as20676.net) (Remote host closed the connection)
[15:11:54] *** Quits: wonko (~wjc@user/wonko) (Ping timeout: 260 seconds)
[15:18:26] <reynir> gopiandcode: no, that doesn't look right
[15:29:27] <reynir> gopiandcode: PKCS#12 is an archive format
[15:39:40] <hannes> gopiandcode: Base64.encode_string (Cstruct.to_string (Mirage_crypto_pk.Rsa.PKCS1.sign ~hash:`SHA256 ~key:privkey (`Digest digest)))
[15:40:14] <hannes> where "`Digest digest" could also be "`Data (Cstruct.of_string "hello"))" (and then PKCS1.sign takes care about the hashing
[15:53:10] *** Quits: mbuf (~Shakthi@223.178.103.82) (Ping timeout: 272 seconds)
[15:53:48] *** Joins: mbuf (~Shakthi@110.225.228.90)
[15:59:48] *** Quits: mbuf (~Shakthi@110.225.228.90) (Ping timeout: 240 seconds)
[16:00:12] *** Joins: mbuf (~Shakthi@110.225.192.80)
[16:04:00] <gopiandcode> hannes: I see, thanks! I think I was probably doing something completely wrong there
[16:04:45] <gopiandcode> I've been using the X509 library to generate and store my keys, so would the above be equivalent to:   Base64.encode (X509.Private_key.sign `SHA256  privkey (`Message (Cstruct.of_string str)) |> Result.get_ok |> Cstruct.to_string)
[16:09:06] *** Joins: mro (~mro@p5dc7d3f6.dip0.t-ipconnect.de)
[16:14:01] <hannes> gopiandcode: nearly, add a ~scheme:`RSA_PKCS1 to the Private_key.sign call
[16:29:15] *** Quits: mro (~mro@p5dc7d3f6.dip0.t-ipconnect.de) (Quit: Leaving...)
[16:30:31] <gopiandcode> hannes: perfect, thanks!
[16:39:16] *** Joins: bartholin (~bartholin@158.110.70.204)
[17:01:02] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[17:35:15] <d_bot_> <Bluddy> update: for now, since I don't need good performance, I'll use what's there and just utilize `char Seq.t` to read buffers
[17:39:17] *** Quits: gravicappa (~gravicapp@145.255.0.191) (Ping timeout: 240 seconds)
[18:00:28] <d_bot_> <sarna> hey, is there any way of producing deflate output with the adler-32 checksum at the end using ocaml libraries? I swear I tried every one and even tried to patch the code by hand but I haven't succeed
[18:00:39] *** Joins: gravicappa (~gravicapp@145.255.0.191)
[18:03:33] <hannes> sarna: did you look at https://github.com/mirage/decompress -- this has at least adler32 in it (but I don't know much about its API)
[18:07:42] <d_bot_> <sarna> hannes: if I use the Higher module it doesn't seem include adler at the end unfortunately - I'm missing exactly one byte at the end
[18:07:58] *** Joins: Haudegen (~quassel@91.114.49.10)
[18:08:06] <d_bot_> <sarna> and all the others are too low level for me to understand :/ it's the third day I'm trying
[18:09:10] <d_bot_> <dinosaure> did you use `De` or `Zl`?
[18:09:25] <d_bot_> <sarna> I tried both
[18:09:53] <d_bot_> <dinosaure> hmmhmm, `Zl` should emits at the end the checksum
[18:10:29] <d_bot_> <dinosaure> if you have an example of what you do, I can help 🙂
[18:11:10] <d_bot_> <sarna> just a sec, let me just delete like three hundred lines I tried to change by hand '^^
[18:13:09] <d_bot_> <dinosaure> so, just to be clear: `Zl` corresponds to `zlib` (so you have an header at the beginning and the checksum at the end)
[18:14:01] <d_bot_> <dinosaure> if you don't want the `zlib` header and you want the checksum (`adler32`, what ever), the best is to do a mix between `De` and `Checkseum.Adler32` - and put by yourself the checksum at the end
[18:14:19] <d_bot_> <sarna> okay, so now I remember: with `Zl` I had to change the level from 4 to 6 (not an issue) but then at the end I miss exactly one byte
[18:14:53] <d_bot_> <sarna> I'm comparing it with a ruby impl, I run them like `echo foo | deflate | hexdump -C`
[18:15:37] <d_bot_> <sarna> ruby code is just `puts Zlib::Deflate.deflate(STDIN.read)`
[18:16:26] <d_bot_> <sarna> for ocaml I can make a minimal example, but I just use `Zl.Higher` with the `deflate_string` function from `zl.mli`, nothing fancy
[18:17:22] <d_bot_> <dinosaure> I have this:
[18:17:22] <d_bot_> <dinosaure> ```shell
[18:17:23] <d_bot_> <dinosaure> ➜  decompress git:(master) ✗ dune exec bin/pipe.exe -- -d -f deflate < foo | hexdump
[18:17:25] <d_bot_> <dinosaure> 0000000 cb4b e7cf 0002
[18:17:26] <d_bot_> <dinosaure> 0000006
[18:17:27] <d_bot_> <dinosaure> ```
[18:18:32] <d_bot_> <dinosaure> (and I produced `foo` via `echo foo > foo`)
[18:19:23] <d_bot_> <sarna> I have what you have + `0002 d103 4f01` (newline?) for both and `000a` at the very end just for ruby and not ocaml
[18:20:11] <d_bot_> <sarna> is this some null byte trickery?..
[18:20:23] <d_bot_> <dinosaure> after, for `zlib`, I have:
[18:20:24] <d_bot_> <dinosaure> ```shell
[18:20:25] <d_bot_> <dinosaure> ➜  decompress git:(master) ✗ dune exec bin/pipe.exe -- -d -f zlib < foo | hexdump
[18:20:27] <d_bot_> <dinosaure> 0000000 0178 cb4b e7cf 0002 d103 4f01
[18:20:28] <d_bot_> <dinosaure> 000000c
[18:20:29] <d_bot_> <dinosaure> ```
[18:20:31] <d_bot_> <dinosaure> And it seems correct (checksum of `foo\n` is `03D1014F`)
[18:22:07] <d_bot_> <dinosaure> Depending on which block Ruby on to generate unfortunately. Let me check what is `0002` but I think it's a new block
[18:22:11] <d_bot_> <sarna> 000a.. is the LF character
[18:22:15] <d_bot_> <sarna> god damn it
[18:22:23] <d_bot_> <dinosaure> yes, `000a` is LF 🙂
[18:22:31] <d_bot_> <sarna> I'm so sorry for taking so much of your time
[18:22:39] <d_bot_> <dinosaure> no it's normal 🙂
[18:22:50] <d_bot_> <sarna> at least I learned something. thanks a ton!
[18:23:21] <d_bot_> <dinosaure> but yeah, if you want DEFLATE + Adler32, you can mix `De.Higher` and just put the result of `Checkseum.Adler32` at the end (in big-endian)
[18:23:42] <d_bot_> <sarna> no this is perfectly fine, thank you :))
[18:23:49] <d_bot_> <dinosaure> ok cool P)
[18:23:50] <d_bot_> <sarna> I got badly confused
[18:24:35] <d_bot_> <dinosaure> (me too, I made `hxd` to help to implement `decompress` then, my brain was died to check bit per bit `zlib` output: https://github.com/dinosaure/hxd)
[18:25:29] *** Quits: bartholin (~bartholin@158.110.70.204) (Ping timeout: 250 seconds)
[18:26:57] *** Joins: bartholin (~bartholin@158.110.70.204)
[18:41:38] *** Joins: gwizon (~gwizon@ool-45798b07.dyn.optonline.net)
[18:45:58] *** Quits: dextaa_ (~dextaa@user/dextaa) (Quit: The Lounge - https://thelounge.chat)
[18:58:46] *** Quits: mbuf (~Shakthi@110.225.192.80) (Quit: Leaving)
[19:00:02] *** Joins: quartz (~quartz@user/quartz)
[19:00:55] *** Joins: dextaa_ (~dextaa@user/dextaa)
[19:24:36] *** Quits: gravicappa (~gravicapp@145.255.0.191) (Ping timeout: 240 seconds)
[19:26:46] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[20:00:11] *** Quits: bartholin (~bartholin@158.110.70.204) (Quit: Leaving)
[20:08:24] *** Joins: bobo (~bobo@37.165.132.78)
[20:09:02] *** Quits: spip (~bobo@37.164.200.168) (Ping timeout: 272 seconds)
[20:18:12] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[20:18:28] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[20:20:22] *** Quits: Haudegen (~quassel@91.114.49.10) (Quit: Bin weg.)
[20:37:15] *** Joins: gravicappa (~gravicapp@145.255.0.191)
[20:38:03] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[20:38:36] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[20:43:28] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.4)
[20:44:47] *** Joins: zebrag (~chris@user/zebrag)
[21:01:51] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:4d9c:b9bc:cc6f:7844)
[21:15:22] *** Joins: vicfred (~vicfred@user/vicfred)
[21:39:42] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:4d9c:b9bc:cc6f:7844) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:44:12] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[21:45:14] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[21:45:48] <d_bot_> <mbacarella> There seems to be an effort to position OCaml as a security technology. Is that right? What are the selling points?
[21:45:48] <d_bot_> <mbacarella> * memory safety, though lots of languages have that
[21:45:49] <d_bot_> <mbacarella> * still fast, unlike most of the above languages
[21:45:51] <d_bot_> <mbacarella> * easier to reason about and audit because strongly typed and FP
[21:45:52] <d_bot_> <mbacarella> * exciting paths to unikernel/mirage that can lead to eliminating legacy C/C++ attack surface from the app stack
[21:45:53] <d_bot_> <mbacarella> ?
[21:46:08] <d_bot_> <mbacarella> missing anything?
[21:49:37] <d_bot_> <darrenldl> algebraic data types ig?
[21:50:06] <hannes> mbacarella: with https://github.com/formal-land/coq-of-ocaml and Coq's ability to extract OCaml code, the road to seemlessly integrate proven code (or prove existing OCaml code) is paved
[21:51:26] <d_bot_> <darrenldl> you still need experts to prove code via coq tho
[21:53:19] <d_bot_> <darrenldl> though there are a fair number of automated verification toolchains too
[21:55:59] <hannes> mbacarella: (of course depending on style) purity of (protocol) implementation allows testing (fuzz / unit / quickcheck) without expensive (mutable) IO setup.
[21:56:46] <hannes> mbacarella: using asynchronous tasks (e.g. lwt) avoids race conditions (makes asynchronous programming easier than e.g. C + pthreads approach)
[21:58:01] <d_bot_> <darrenldl> other fp would also share the easiness of testing part, tho good point
[21:59:26] <d_bot_> <darrenldl> is asynchronous task inherently immune to race conditions? or is it due to lwt coorperative concurrency model?
[22:01:16] <hannes> darrenldl: thanks exactly cooperative multitasking is what I meant.
[22:03:32] *** Quits: vicfred (~vicfred@user/vicfred) (Ping timeout: 240 seconds)
[22:05:09] <d_bot_> <darrenldl> sorry wrong press
[22:07:18] <d_bot_> <darrenldl> aha that is a very good point, since very few cases would one want absolutely no critical sections, and cooperative multitasking removes a lot need for locking, even when lwt becomes multicore
[22:08:04] <d_bot_> <darrenldl> actually not sure about the last line about after lwt becoming multicore hm..
[22:14:41] <d_bot_> <darrenldl> i guess it still yields easier analysis and tuning compared to preemptive scheduling
[22:42:00] *** Joins: rgrinberg (~textual@200.68.171.127)
[23:14:48] *** Quits: rgrinberg (~textual@200.68.171.127) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:31:41] <d_bot_> <Et7f3> I guess lwt is better than pthread since it has a scheduler used by many project and with pthread you schedule manually. But this argument is can be adapted in C if a lib become a de facto and manage that for us. Also ocaml has memory barrier, does this help preventing race condition for heap variable ?
[23:51:57] *** Quits: perro_ (~perro@072-191-245-069.res.spectrum.com) (Quit: WeeChat 3.0.1)
[23:58:31] <companion_cube> Lwt + domainslib for background cpu tasks!
[23:58:59] <companion_cube> (pthread doesn't make you schedule manually, the OS does it for you)
