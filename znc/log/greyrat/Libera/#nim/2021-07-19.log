[00:01:20] <FromDiscord> <ache of head> sent a code paste, see https://play.nim-lang.org/#ix=3tn7
[00:01:50] <FromDiscord> <ache of head> and in general use expressions like this?
[00:02:54] <FromDiscord> <ache of head> the reason i'm asking this and not doing if something: echo a else: echo b is because i want to conditionally include something in a longer stdout.write
[00:03:23] <FromDiscord> <konsumlamm> In reply to @c1m5j "is there a way": if you would have tried that, you would have seen that it indeed works
[00:04:07] <FromDiscord> <ache of head> i tried it and it doesn't work 🤔
[00:04:28] <FromDiscord> <ache of head> i wouldn't have asked if hadn't checked 😛
[00:05:23] <FromDiscord> <ache of head> i get a "expression is of type string and has to be used or discarded" error
[00:09:48] <FromDiscord> <konsumlamm> huh
[00:09:59] <FromDiscord> <konsumlamm> do `a` and `b` have the same typem
[00:10:03] <FromDiscord> <konsumlamm> (edit) "typem" => "type?"
[00:10:54] <FromDiscord> <ache of head> sent a code paste, see https://play.nim-lang.org/#ix=3tna
[00:11:24] <FromDiscord> <ache of head> hmm
[00:11:28] <FromDiscord> <ache of head> i added an else clause and it worked
[00:11:30] <FromDiscord> <ache of head> interesting
[00:13:16] <FromDiscord> <ynfle (ynfle)> If not ,there is no type
[00:13:25] <FromDiscord> <konsumlamm> In reply to @c1m5j "well, even something like": why would it? there is no value for the else case
[00:14:09] <FromDiscord> <ache of head> so an else clause is required?
[00:14:35] <FromDiscord> <ynfle (ynfle)> Yes
[00:14:37] <FromDiscord> <@bracketmaster-5a708063d73408ce4> Is there any way to make this work?↵↵var str = "hello"↵var xyz \: array[str.len, int]
[00:14:40] <FromDiscord> <ynfle (ynfle)> For an expression at least
[00:14:53] <FromDiscord> <ynfle (ynfle)> @BracketMaster What's the issue
[00:15:11] <FromDiscord> <@bracketmaster-5a708063d73408ce4> I need to statically create an array with the length of a certain string
[00:15:22] <FromDiscord> <ynfle (ynfle)> It needs to be const
[00:15:33] <FromDiscord> <Bung> @haxscramper interesting! how you pass around ref types and returns between them.
[00:15:41] <FromDiscord> <ynfle (ynfle)> Else, the compiler doesn't know the length
[00:47:24] <FromDiscord> <haxscramper> In reply to @Bung "<@!608382355454951435> interesting! how you": Will test this tomorrow
[00:48:20] <FromDiscord> <ynfle (ynfle)> Do default parameters get reevaluated at every call?
[00:48:50] *** Joins: krux02 (~krux02@p200300ca8f279d005affe840f32e1f48.dip0.t-ipconnect.de)
[00:52:27] <FromDiscord> <haxscramper> Yes, use expandMacros to see how they are substituted
[00:53:48] <FromDiscord> <ynfle (ynfle)> Expand macros? I didn't know it was a macro
[00:54:08] <FromDiscord> <haxscramper> It is not a macro
[00:54:27] <FromDiscord> <haxscramper> expand macros shows ast after all expansions and substitutions
[00:54:32] <FromDiscord> <haxscramper> Not only macros
[00:54:57] <FromDiscord> <ynfle (ynfle)> Oh
[00:54:59] <FromDiscord> <ynfle (ynfle)> Interesting
[00:55:11] <FromDiscord> <ynfle (ynfle)> `proc t(x = now()) = echo x`
[00:55:30] <FromDiscord> <ynfle (ynfle)> sent a code paste, see https://play.nim-lang.org/#ix=3tnj
[00:55:32] <FromDiscord> <ynfle (ynfle)> `t(now())`
[01:00:34] <krux02> actually expandMacros is a macro
[01:00:37] <krux02> I wrote it
[01:06:03] <FromDiscord> <hamidb80> hey krux
[01:15:09] <FromDiscord> <Schelz> hi, guys in not so experienced with nim but im with python, can someone please give me some websites where i can learn nim ?
[01:16:56] <FromDiscord> <carmysilna> In reply to @Schelz "hi, guys in not": https://github.com/nim-lang/Nim/wiki/Nim-for-Python-Programmers
[01:17:10] <FromDiscord> <Schelz> thx
[01:18:17] <FromDiscord> <Lefl> Hey, I'm using a library that implements a function  `id(n: Node)` now the problem is I have an object that has a property `id: int`. How do I access the property? nim thinks I want to call the proc and raises an error
[01:20:49] <nixfreak_nim[m]> what am I doing wrong that .toCss isn't recognized ? https://play.nim-lang.org/#ix=3tnl
[01:21:26] <nixfreak_nim[m]> Error: undeclared field: 'toCss' for type system.string
[01:29:08] <nixfreak_nim[m]> Ok, nm I just reinstalled karax again and it seemed to work
[01:33:17] <FromDiscord> <ElegantBeef> @Lefl what library?
[01:33:35] <FromDiscord> <Lefl> Eh I meant module
[01:33:45] <FromDiscord> <Lefl> the `dom` one in the standard library
[01:34:43] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[01:35:35] <FromDiscord> <Lefl> Oh maybe I'm stupid
[01:37:18] <FromDiscord> <ElegantBeef> There is no id field that i see for node
[01:41:51] <FromDiscord> <Lefl> Well I forgot to import the Object from my own module
[02:03:46] <FromDiscord> <@bracketmaster-5a708063d73408ce4> https://play.nim-lang.org/#ix=3tnB↵↵For some reason, mysice is of type seq[NimNode] instead of string?
[02:03:49] <FromDiscord> <@bracketmaster-5a708063d73408ce4> Macros are werid
[02:07:52] <FromDiscord> <ElegantBeef> It's not a `static` so it's taken as a Nimnode cause it can be an symbol or a literal
[02:08:58] <FromDiscord> <ElegantBeef> https://play.nim-lang.org/#ix=3tnC using static
[02:54:20] *** Quits: beshr (~beshr@user/beshr) (Remote host closed the connection)
[03:04:47] <FromDiscord> <@bracketmaster-5a708063d73408ce4> thanks
[03:19:49] <FromDiscord> <demotomohiro> This news is related to Nim because Nim calls gcc in default and gcc calls `as` and `ld` in binutils.↵https://news.ycombinator.com/item?id=27875405
[03:21:56] <FromDiscord> <@bracketmaster-5a708063d73408ce4> Anything in particular about binutils I'm supposed to notice on that thread?
[03:22:21] <FromDiscord> <@bracketmaster-5a708063d73408ce4> It's a nice release note I guess
[03:27:21] <fn> <11ForumUpdaterBot99> New thread by Fire: New Nim Discussion Site, see https://forum.nim-lang.org/t/8242
[03:56:12] *** Quits: max22- (~maxime@2a01cb08833598004cbbbc79f5e438fa.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[04:01:29] <FromDiscord> <ajusa> What's the recommended way to interface with a C style array? `cstring`, `UncheckedArray`, `openarray`?
[04:36:37] <FromDiscord> <ElegantBeef> Unchecked
[05:19:33] <fn> <11ForumUpdaterBot99> New thread by Tsojtsoj: Question about "thread-local heap" garbage collectors and threads., see https://forum.nim-lang.org/t/8243
[05:31:16] <fn> <11ForumUpdaterBot99> New question by bobeff: Why Git gives the error &quot;Resource temporarily unavailable (code: 11)&quot; when simultaneously executing multiple instances?, see https://stackoverflow.com/questions/68433981/why-git-gives-the-error-resource-temporarily-unavailable-code-11-when-simul
[05:45:29] <fn> <06Prestige99> Playground is still down?
[05:45:44] <FromDiscord> <ElegantBeef> Seems not
[05:47:22] <fn> <06Prestige99> Trying to make a callback match MouseButtonFun* = proc (window: Window, button: cint, action: cint, modifiers: cint) {.cdecl.}  but it complains that my proc isn't of type MouseButtonFun
[05:47:35] <fn> <06Prestige99> figure I need some set of pragmas but not sure which
[05:47:44] <FromDiscord> <ElegantBeef> `{.cdecl.}`
[05:47:48] <fn> <06Prestige99> providing {.cdecl.} works but I don't suppose that's correct
[05:47:55] <fn> <06Prestige99> huh okay
[05:48:04] <FromDiscord> <ElegantBeef> It's a calling convention
[05:48:07] <FromDiscord> <ElegantBeef> It's required
[05:48:15] <fn> <06Prestige99> interesting, alright
[05:48:22] <FromDiscord> <ElegantBeef> If you are on devel the error message would've said as such
[05:49:11] <fn> <06Prestige99> I wish there was more info on cdecl, doesn't really make sense to me, putting it on the callback
[05:49:53] <FromDiscord> <ElegantBeef> > The cdecl convention means that a procedure shall use the same convention as the C compiler. Under Windows the generated C procedure is declared with the cdecl keyword.
[05:49:59] <FromDiscord> <ElegantBeef> Not enough?
[05:50:26] <fn> <06Prestige99> nah
[05:52:24] <fn> <06Prestige99> I'm not familiar with c so I don't know what that really means, "the same convention". Same function signature?
[05:53:31] <FromDiscord> <ElegantBeef> There are different annotations possible with procedures in C and those change the signature
[05:53:44] <FromDiscord> <theangryepicbanana> cdecl is a calling convention
[05:53:59] <FromDiscord> <theangryepicbanana> aka a way that functions are called in assembly
[05:55:04] <FromDiscord> <ElegantBeef> As such they're not compatible if not annotated the same, though an object variant could be pretty nice 😄
[05:55:52] <fn> <06Prestige99> ah I see, thanks
[05:56:32] *** Quits: blackbeard420_ (~blackbear@2600:3c03:e000:297::) (Quit: ZNC 1.8.2 - https://znc.in)
[05:56:49] *** Joins: blackbeard420 (~blackbear@2600:3c03:e000:297::)
[06:11:28] <FromDiscord> <@bracketmaster-5a708063d73408ce4> is there a concept of popping characters from a string?
[06:11:45] <FromDiscord> <ElegantBeef> you mean removing the last one?
[06:11:52] <FromDiscord> <@bracketmaster-5a708063d73408ce4> yeah
[06:11:57] <FromDiscord> <ElegantBeef> `pop` should do that
[06:12:03] <FromDiscord> <ElegantBeef> i know it exists for seqs
[06:18:54] *** Quits: krux02 (~krux02@p200300ca8f279d005affe840f32e1f48.dip0.t-ipconnect.de) (Remote host closed the connection)
[06:25:49] <FromDiscord> <ElegantBeef> Ah it does not exist for strings
[06:26:06] <FromDiscord> <@bracketmaster-5a708063d73408ce4> yeah - just seqs - which is fine
[06:26:59] <FromDiscord> <ElegantBeef> It's only two lines if you do need it for strings
[06:27:01] <FromDiscord> <ElegantBeef> https://play.nim-lang.org/#ix=3tog
[06:27:03] <FromDiscord> <ElegantBeef> Quite simple
[06:37:22] <FromDiscord> <@bracketmaster-5a708063d73408ce4> thx
[06:37:35] <FromDiscord> <@bracketmaster-5a708063d73408ce4> eval! 'a'.string
[06:37:42] <FromDiscord> <@bracketmaster-5a708063d73408ce4> !eval 'a'.string
[06:37:44] <NimBot> Compile failed: /usercode/in.nim(1, 4) Error: type mismatch: got <char> but expected 'string'
[06:37:58] <FromDiscord> <@bracketmaster-5a708063d73408ce4> yeah - char to string not happy
[06:40:39] <FromDiscord> <@bracketmaster-5a708063d73408ce4> can you convert a single char to a string?
[06:40:51] <fn> <06Prestige99>  maybe with $?
[06:41:01] <fn> <06Prestige99> !eval echo $'a'
[06:41:06] <fn> <12R2D299> a
[06:41:07] <NimBot> a
[06:41:12] <fn> <06Prestige99> nice
[06:42:55] <FromDiscord> <@bracketmaster-5a708063d73408ce4> !eval echo ($'a'.type)
[06:42:58] <NimBot> char
[06:43:07] <FromDiscord> <@bracketmaster-5a708063d73408ce4> see?
[06:43:20] <fn> <06Prestige99> !eval echo ($'a').type
[06:43:23] <fn> <12R2D299> string
[06:43:23] <NimBot> string
[06:45:14] <FromDiscord> <@bracketmaster-5a708063d73408ce4> !eval echo $("hello"[0]).type; echo $("hello"[0..1]).type
[06:45:19] <NimBot> char↵string
[06:45:55] <FromDiscord> <@bracketmaster-5a708063d73408ce4> For what I'm doing, I need to be able to get "hello"[0] to be string
[06:46:00] <FromDiscord> <ElegantBeef> it will be
[06:46:19] <FromDiscord> <ElegantBeef> well with `($"hello"[0])`
[06:46:58] <FromDiscord> <ElegantBeef> `$` very low on the table for precedence so `.type` was running before it
[06:47:16] <FromDiscord> <@bracketmaster-5a708063d73408ce4> o
[06:47:33] <FromDiscord> <ElegantBeef> !eval echo ($"hello"[0]).type
[06:47:35] <NimBot> string
[06:50:33] <FromDiscord> <ElegantBeef> Actually not precedence just binding
[06:51:13] <FromDiscord> <ElegantBeef> unary `$` binds to the entire statement following whereas unary `@` only binds to the next statement
[06:51:23] <FromDiscord> <ElegantBeef> (edit) "statement" => "symbol"
[06:51:24] <FromDiscord> <ElegantBeef> https://nim-lang.org/docs/manual.html#syntax-precedence can read it here
[07:10:00] <FromDiscord> <deech> Is anyone actually using the Obj-C interop? I don't see many tests for it.
[07:19:55] <fn> <06Prestige99> probably not
[07:20:06] <FromDiscord> <ElegantBeef> Yea i dont think many are
[07:20:46] <FromDiscord> <theangryepicbanana> In reply to @deech "Is anyone actually using": might want to see if there's any ios/mac nim libs on github
[07:20:53] <FromDiscord> <ElegantBeef> A vast majority just dont need objc interop 😄
[07:21:23] <FromDiscord> <theangryepicbanana> although tbh I can't see objc interop being very difficult to begin with
[07:22:02] <FromDiscord> <theangryepicbanana> like as long as you acknowledge objc's ref counting and message passing, it should theoretically work with pretty easily
[07:22:19] <FromDiscord> <theangryepicbanana> (edit) "like as long as you acknowledge objc's ref counting and message passing, it should theoretically ... work" 03added " e pretty easy to" | 04removed "pretty easily"
[07:22:25] <FromDiscord> <theangryepicbanana> (edit) " e" => "be"
[07:22:26] *** Quits: TakinOver (~TakinOver@47.150.206.35) (Read error: Connection reset by peer)
[07:30:50] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[07:32:34] *** Joins: vicfred (~vicfred@user/vicfred)
[07:49:48] <FromDiscord> <codic> is it possible to do something like typescript's Partial, which sets all fields not already nullable to nullable? https://www.typescriptlang.org/docs/handbook/utility-types.html↵↵(i would want it to set it to Option[T] in Nim)
[07:51:38] <FromDiscord> <ElegantBeef> sent a code paste, see https://play.nim-lang.org/#ix=3toy
[07:52:08] <FromDiscord> <ElegantBeef> Or do you want to convert a type to an optional version after the declaration?
[07:52:33] <FromDiscord> <ElegantBeef> Eitherway the answer is yes you can with macros
[07:55:49] <FromDiscord> <theangryepicbanana> aren't fields already nullable by default
[08:01:03] <FromDiscord> <ElegantBeef> no `a: int` isnt nilable
[08:04:41] <FromDiscord> <Rika> Fields are zero by default, which is distinct from nullable
[08:16:49] <FromDiscord> <ElegantBeef> @codic well the lazy man's tuple exists here https://play.nim-lang.org/#ix=3toD
[08:25:03] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[08:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:36] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:42:27] <nixfreak_nim[m]> Using Karax and trying to figure out how to build css on the fly using vstyles, I have two modules one for header and one for body , just for testing I want  to import those two modules then use another proc to call those two modules and render the css 
[08:42:34] <nixfreak_nim[m]> is that possible 
[09:23:00] <FromDiscord> <codic> oh wait you can name tuple members?
[09:23:10] <FromDiscord> <Rika> Yes
[09:23:10] <FromDiscord> <codic> this might work
[09:23:16] <FromDiscord> <ElegantBeef> It's somewhat silly but it works
[09:24:37] <FromDiscord> <codic> hmm interesting
[09:26:22] <FromDiscord> <codic> sent a code paste, see https://play.nim-lang.org/#ix=3toM
[09:26:50] <FromDiscord> <ElegantBeef> You couldnt do that
[09:27:13] <FromDiscord> <ElegantBeef> It'd have to be `type PartialT = optional(T)`
[09:27:27] <FromDiscord> <theangryepicbanana> that would require row typing I think, which nim doesn't have
[09:27:42] <FromDiscord> <ElegantBeef> Well the typedef isnt typed
[09:27:49] <FromDiscord> <Rika> Beef have you checked what the pragma captures because I don’t know lol
[09:27:50] <FromDiscord> <ElegantBeef> Which is the issue since T isnt a symbol in that case
[09:27:58] <FromDiscord> <ElegantBeef> It gives a typedef
[09:28:06] <FromDiscord> <ElegantBeef> You can modify it but you need to return a typedef
[09:28:18] <FromDiscord> <ElegantBeef> It's not semantically typed though which means no symbols
[09:28:25] <FromDiscord> <codic> hmm how do I implement an optional method though
[09:28:28] <FromDiscord> <codic> this might be a futile exercise
[09:28:40] <FromDiscord> <Rika> Same way beef did I don’t get it
[09:28:48] <FromDiscord> <Rika> In reply to @theangryepicbanana "that would require row": What is row typing
[09:28:52] <FromDiscord> <codic> i'm trying to make a simple discord library and there are lots of partial structures, so I don't want to make everything optional
[09:29:28] <FromDiscord> <codic> In reply to @Rika "Same way beef did": but it returns a tuple not an object
[09:29:43] <FromDiscord> <Rika> Yes just make it return an object instead then
[09:29:49] <FromDiscord> <ElegantBeef> The object version is somewhat simpler
[09:33:21] <FromDiscord> <codic> if I change tuple -> object i get `object a, b: toOptional(int)c: toOptional(string)d: toOptional(Option[int])`
[09:33:28] <FromDiscord> <codic> so i need to figure out how to add newlines
[09:33:33] <FromDiscord> <ElegantBeef> Nah
[09:33:42] <FromDiscord> <ElegantBeef> You're trying to rely on old work too much
[09:35:05] <nixfreak_nim[m]> how do create a type with import procs?
[09:35:06] <nixfreak_nim[m]>  * how do you create a type with import procs?
[09:35:32] <FromDiscord> <ElegantBeef> what do you mean "with import procs"?
[09:35:52] <FromDiscord> <codic> > You're trying to rely on old work too much↵🤔
[09:36:12] <FromDiscord> <Rika> What is an import proc
[09:37:37] <FromDiscord> <codic> how else can i do it, without adding newlines after each field?
[09:37:38] <FromDiscord> <ElegantBeef> You were trying to rely on the tuple logic which you dont need here https://play.nim-lang.org/#ix=3toP
[09:40:21] <FromDiscord> <codic> ok... i only understand 50% of that
[09:40:26] <FromDiscord> <codic> nim macros are too cool for me
[09:40:39] <FromDiscord> <ElegantBeef> Well we can get the typedef from the typdesc
[09:40:48] <FromDiscord> <ElegantBeef> So we do that, then modify it to suite our needs
[09:40:57] <nixfreak_nim[m]> https://play.nim-lang.org/#ix=3toQ
[09:41:03] <FromDiscord> <codic> what is a nnkBracketExpr?
[09:41:09] <FromDiscord> <ElegantBeef> `Option[T]`
[09:41:14] <FromDiscord> <codic> ahh [ and ]
[09:41:18] <FromDiscord> <codic> ok now i see
[09:41:19] <FromDiscord> <codic> yeah it makes sense
[09:41:42] <FromDiscord> <codic> i was about to ask about the backwards indexing but I just figured that out
[09:42:18] <FromDiscord> <codic> could it be done in a way that it could be a rvalue instead of having to specify the name like `T.asOptional TOpt` instead `type TOpt = T.asOptional`?
[09:43:48] <nixfreak_nim[m]> Does that make sense ? I want to render both of those at the same time 
[09:44:01] <FromDiscord> <ElegantBeef> So make another function that uses buildhtml and calls them?
[09:44:35] <FromDiscord> <ElegantBeef> Doesnt look like you can codic
[09:45:40] <nixfreak_nim[m]> but it can't be a VNode right because the two modules are already VNodes 
[09:45:59] <FromDiscord> <ElegantBeef> I dont know what you mean
[09:46:12] <FromDiscord> <ElegantBeef> Arent VNodes just what karax uses to represent dom objects?
[09:46:30] <nixfreak_nim[m]> yeah 
[09:46:54] <FromDiscord> <ElegantBeef> I dont get what you mean "two modules are already VNodes"
[09:48:53] <nixfreak_nim[m]> ok I have two files one to render a header and one to render a body using css
[09:49:22] <FromDiscord> <ElegantBeef> I dont see how it matters, i havent used karax much
[09:50:38] <nixfreak_nim[m]> I want to be able to create a module per class and then render it altogether. I'm importing the two modules , I need to create a proc that includes both of those modules and then setRenderer (the imported modules) 
[09:51:13] <nixfreak_nim[m]> I'm just seeing if this can work or not 
[09:51:20] <FromDiscord> <ElegantBeef> So then import these modules and call them, i just dont know the issue here
[09:51:51] <nixfreak_nim[m]> having issues calling them 
[09:52:29] <FromDiscord> <Rika> What issues
[09:54:32] <nixfreak_nim[m]> do I call setRenderer for both modules ?
[09:54:50] <FromDiscord> <Rika> I’ll take a look again, I’m on mobile so 💩
[09:55:50] <FromDiscord> <ElegantBeef> You'd setrenderer for the main file then import these and call them from main
[09:56:15] <FromDiscord> <ElegantBeef> iirc  `setRenderer` is the injection site for your drawing logic
[09:57:32] <nixfreak_nim[m]> I tried setRenderer header,body
[09:57:51] <FromDiscord> <ElegantBeef> Well you need a main procedure to call the others
[09:58:46] <FromDiscord> <ElegantBeef> https://play.nim-lang.org/#ix=3toU
[09:58:48] <FromDiscord> <ElegantBeef> something like that
[10:04:20] <nixfreak_nim[m]> yeah I was trying way to hard I see it now , thank you 
[10:05:27] <FromDiscord> <ElegantBeef> No problem
[10:12:44] <nixfreak_nim[m]> still not working but it gives me something to look at thanks 
[10:24:13] <nixfreak_nim[m]> sweet I got it now , thanks 
[10:40:08] <fn> <11ForumUpdaterBot99> New thread by Stu002: Template or macro for heterogeneous tuple expressions?, see https://forum.nim-lang.org/t/8244
[10:48:09] *** Joins: max22- (~maxime@2a01cb0883359800291a2ab37fffbb9f.ipv6.abo.wanadoo.fr)
[10:48:26] *** Quits: max22- (~maxime@2a01cb0883359800291a2ab37fffbb9f.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[10:48:49] *** Joins: max22- (~maxime@2a01cb0883359800291a2ab37fffbb9f.ipv6.abo.wanadoo.fr)
[10:53:43] <FromDiscord> <haxscramper> In reply to @haxscramper "Will test this tomorrow": @Bung `ref` representation in VM is not different from regular object layout, not changes are necessary
[10:53:55] <FromDiscord> <haxscramper> (edit) "are necessary" => "needed"
[11:10:40] <FromDiscord> <Bung> @haxscramper you mean they are in same gc process?
[11:11:36] <FromDiscord> <haxscramper> I mean `representation in VM is not different from regular object`
[11:11:49] <FromDiscord> <haxscramper> ref https://media.discordapp.net/attachments/371759389889003532/866570509788643338/unknown.png
[11:12:00] <FromDiscord> <haxscramper> non-ref is the same
[11:13:50] <FromDiscord> <Bung> looks like new a type then assign variables to its fields
[11:14:19] <FromDiscord> <haxscramper> yes
[11:14:58] <FromDiscord> <haxscramper> It assigns values to all fields, regardless of their availability in the object
[11:15:10] <FromDiscord> <haxscramper> So `field1` and `field2` are mutually exclusive, but both are present
[11:16:02] <FromDiscord> <Bung> when the variable pass to vm , the vm get all fields representation including fields also are ref type ?
[11:16:22] *** Quits: flynn (~mcbloch@user/flynn) (Quit: Ping timeout (120 seconds))
[11:17:28] *** Joins: flynn (~mcbloch@user/flynn)
[11:20:16] <FromDiscord> <haxscramper> sent a code paste, see https://paste.rs/A54
[11:20:22] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3tp8
[11:23:33] <FromDiscord> <Bung> hmm, maybe no question ,just describe what I understand, the converting is only for proc accept variant type of args, they are in same gc process , this differs from dll way
[11:24:47] <FromDiscord> <haxscramper> I have absolutely no idea how this is related to gc/dll and whatever
[11:25:03] <FromDiscord> <haxscramper> But there is no difference from regular `ref` type
[11:25:17] <FromDiscord> <haxscramper> In the VM it is a `PNode`, outside of vm it is still a `PNode`
[11:25:35] <FromDiscord> <haxscramper> If you want to put nimscript in different dll and use it
[11:25:59] <FromDiscord> <haxscramper> Is that what you want?
[11:26:15] <FromDiscord> <Bung> dll has its own gc process , so pass around ref types may face nil access
[11:26:36] <FromDiscord> <Bung> no, I just want to understanding how this works
[11:27:31] <FromDiscord> <Bung> nimscriper fit my needs , I just compare the dll way for understanding.
[12:11:46] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[12:24:20] *** Joins: beshr (~beshr@user/beshr)
[13:02:30] <fn> <11ForumUpdaterBot99> New thread by Jasonfi: Compiling with OpenSSL on Windows 10?, see https://forum.nim-lang.org/t/8245
[13:08:31] *** Quits: max22- (~maxime@2a01cb0883359800291a2ab37fffbb9f.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[13:08:49] *** Joins: max22- (~maxime@2a01cb088335980076555acacb01bc03.ipv6.abo.wanadoo.fr)
[14:18:28] *** Joins: krux02 (~krux02@p200300ca8f279d005affe840f32e1f48.dip0.t-ipconnect.de)
[14:43:11] <FromDiscord> <offbeat-stuff (offbeat-stuff)> Hi, How to convert `SomeNumber` to `float64`
[14:46:23] <FromDiscord> <offbeat-stuff (offbeat-stuff)> Okay just the code to use [T\: SomeNumber] and now it works
[14:59:44] <arkanoid> is this a bug? https://play.nim-lang.org/#ix=3tpO
[15:00:01] <arkanoid> if I push the two pragmas separately it works
[15:01:09] <FromDiscord> <Rika> feel like ive seen this documented
[15:01:13] <FromDiscord> <Rika> as bug i mean
[15:05:11] <arkanoid> Rika, yes https://github.com/nim-lang/Nim/issues/12867
[15:06:33] <arkanoid> is there a workaround to avoid copypasting a lot?
[15:12:52] <FromDiscord> <haxscramper> write a macro that generates push
[15:13:53] <FromDiscord> <haxscramper> I suppose you can put all the experimental and pushes in a single macro
[15:19:13] <arkanoid> haxscramper, thanks, seems to work with templates too: https://play.nim-lang.org/#ix=3tpO
[15:19:31] <arkanoid> is it possible to use experimental: "strictFuncs" in same way?
[15:19:57] <FromDiscord> <haxscramper> nim templates/macros can generated any nim code
[15:20:19] <FromDiscord> <haxscramper> Also you sent the same link
[15:20:46] <arkanoid> oh, I'm sorry. Here's the correct one https://play.nim-lang.org/#ix=3tpS
[15:23:29] <FromDiscord> <haxscramper> I was talking about https://play.nim-lang.org/#ix=3tpT
[15:23:49] <FromDiscord> <haxscramper> ● without need to do additional indentation for everything
[15:24:44] <arkanoid> yeah, that might be better, but not sure. What about strictFuncs? can that be popped too? 
[15:25:20] <FromDiscord> <haxscramper> no, I think once experimental is enabled in stays in effect for the whole module
[15:25:56] <arkanoid> k
[15:26:17] <arkanoid> btw thanks, problem solved for now
[16:00:06] *** Quits: asd (~noname@user/asd) (Ping timeout: 268 seconds)
[16:01:44] *** Joins: asd (~noname@user/asd)
[16:21:26] *** Quits: happycorsair[m] (~happycors@2001:470:69fc:105::205) (Quit: Bridge terminating on SIGTERM)
[16:21:26] *** Quits: nixfreak_nim[m] (~reversem3@2001:470:69fc:105::33d1) (Quit: Bridge terminating on SIGTERM)
[16:21:27] *** Quits: Helios (~dwaglemat@2001:470:69fc:105::5f8) (Quit: Bridge terminating on SIGTERM)
[16:24:51] *** Joins: nixfreak_nim[m] (~reversem3@2001:470:69fc:105::33d1)
[16:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:40] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:37:36] *** Joins: Helios (~dwaglemat@2001:470:69fc:105::5f8)
[16:37:36] *** Joins: happycorsair[m] (~happycors@2001:470:69fc:105::205)
[16:53:36] <arkanoid> the nimfp and its dependencies are outdated and really needs some more love
[17:05:56] *** Quits: max22- (~maxime@2a01cb088335980076555acacb01bc03.ipv6.abo.wanadoo.fr) (Ping timeout: 245 seconds)
[17:28:06] *** Joins: Vladar (~Vladar@46.162.2.53)
[17:32:09] *** Joins: kayabaNerve_ (~kayabaNer@user/kayabanerve)
[17:34:55] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Ping timeout: 255 seconds)
[18:11:13] <fn> <11ForumUpdaterBot99> New thread by Geohuz: How to implement the 'Type parameters(aka generics)' as the following code, see https://forum.nim-lang.org/t/8246
[18:11:39] <arkanoid> would you explain the differences to me please? https://play.nim-lang.org/#ix=3tqr
[18:19:43] <FromDiscord> <haxscramper> I think it is defined as 'it is the same thing', but I had a lot of unexplainable type mismatches with all of the syntaxes
[18:19:54] <FromDiscord> <haxscramper> And I recommend to write `typedesc[Type]`
[18:20:27] <FromDiscord> <haxscramper> And `proc generic[T](arg: typedesc[T])` instead of `proc generic(arg: type)`
[18:21:19] <FromDiscord> <haxscramper> Simply `typedesc` argument means "any type", `typedesc[ConcreteType]` means that you can only pass `procedurename(ConcreteType)`
[18:21:55] <FromDiscord> <haxscramper> `And I recommend to write "typedesc[Type]"` especially ! in context of generic procedures
[18:26:35] *** Joins: arkurious (~arkurious@user/arkurious)
[18:41:22] <arkanoid> what comes first, typedesc, generics, or "type" keyword not used in type declaration ?
[18:41:46] <arkanoid> and what's the differences between typedesc and generics? seems very similar to me
[18:45:33] <arkanoid> oh, and there's also the generic [T: int] thing
[18:46:03] <FromDiscord> <haxscramper> `> what comes first, typedesc, generics, or "type" keyword not used in type declaration ?` - I'm not sure I understand the question
[18:46:14] <FromDiscord> <Rika> typedesc asks for the type itself↵generic T is a value of the type T
[18:46:23] <FromDiscord> <haxscramper> generic is a concept, it is not even tied to a language really
[18:46:37] <FromDiscord> <haxscramper> Like genric procedure or generic type
[18:46:41] <FromDiscord> <Rika> so `a(typedesc)` is called via `int.a()` or `float.a()` or `value.type.a()`
[18:46:44] <arkanoid> wait I think I've found the relevant RFC 3. https://github.com/nim-lang/RFCs/issues/40
[18:46:54] <FromDiscord> <Rika> `a[T](T)` is called via `value.a()`
[18:48:08] <arkanoid> I'm just puzzled if I should prefer generics or typedesc things
[18:48:08] <FromDiscord> <haxscramper> Abuot "guidelines for when to use typedesc vs generics" - I think you should use typedesc only if you need some fancy syntax like `boxed as ConcreteTYpe`
[18:48:22] <FromDiscord> <haxscramper> you should use generics
[18:48:49] <FromDiscord> <haxscramper> Unless you have an valid reason to use typedesc, and I think it is not really often
[18:49:41] <FromDiscord> <haxscramper> well, the question itself is not really meaningful
[18:49:50] <FromDiscord> <Rika> ~~like init(typedesc)~~
[18:49:55] <FromDiscord> <generic linux user> so thats what generics is
[18:49:57] <FromDiscord> <generic linux user> :|
[18:49:58] <FromDiscord> <haxscramper> those are two different concepts
[18:50:21] <FromDiscord> <Rika> typedesc and generics arent really one to one features
[18:50:31] <FromDiscord> <Rika> theyre almost completely differnet
[18:50:34] <FromDiscord> <haxscramper> typedesc is like "type-as-an-argument" while generic is not even something you can have "as is"
[18:50:38] <FromDiscord> <haxscramper> ^
[18:50:56] <FromDiscord> <Rika> yeah what he said
[18:56:24] <arkanoid> so, to sum up, the "type" syntax for argument types is just sugar for typedesc? Here's my experiments https://play.nim-lang.org/#ix=3tqx
[19:00:40] <arkanoid> I don't really feel like they are completely different. They are both way to pass generic types to proc and ask the compiler to produce overloaded version of it. Both can be inferred in many cases
[19:01:26] <arkanoid> but here what puzzles me is "T: typedesc" VS "T: type" thing
[19:01:58] <FromDiscord> <haxscramper> IIRC `type` is deprecated, and they certainly have some difference
[19:02:29] <FromDiscord> <haxscramper> At least judging from my experience
[19:02:52] <FromDiscord> <haxscramper> You don't do `T: typedesc`, you do `proc procedure[T](arg: typedesc[T])`↵(<@709044657232936960_arkanoid=5b=49=52=43=5d>)
[19:03:30] <FromDiscord> <haxscramper> Typedesc in this context is just a magical type that you use to resolve overloads
[19:03:47] <arkanoid> I might not be doing that, but it compiles and runs correctly
[19:04:00] <FromDiscord> <haxscramper> You can think of it as if each type had special variable of type `typedesc`, that you can pass to procedures
[19:04:05] <FromDiscord> <haxscramper> Something like that
[19:04:19] <FromDiscord> <haxscramper> yes, sure, it works most of the time
[19:04:54] <FromDiscord> <haxscramper> but when you get into "seemingly random generic type mismatches that you spend five hours on" territory things were different for me
[19:05:11] <FromDiscord> <haxscramper> So you are of course free to use whatever you want, I just want to warn you based on my experience
[19:05:12] <arkanoid> sure :D
[19:05:54] <arkanoid> I'm just trying to extrapolate good idiomatic nim code when dealing with types
[19:07:45] <arkanoid> so, when I want to do generics, I'm a good nim person when I do "proc foo[T](arg: typedesc[T])" or "proc foo[T](arg: T)"
[19:07:54] <FromDiscord> <haxscramper> idk if there is such thing as "idiomatic" nim code, but I assume it would be something quite different from what you are working on now
[19:08:10] <FromDiscord> <generic linux user> do we need the T tho?
[19:08:48] <FromDiscord> <generic linux user> this will do right?
[19:08:55] <FromDiscord> <generic linux user> sent a code paste, see https://play.nim-lang.org/#ix=3tqA
[19:09:57] <arkanoid> only if you replace a+b with x+y :D
[19:10:13] <FromDiscord> <haxscramper> Idiomatic nim code for working with types probably uses `initT` or `newT`
[19:10:15] <FromDiscord> <generic linux user> oops
[19:10:28] <FromDiscord> <Rika> idiomatic ~~for now~~
[19:10:37] <FromDiscord> <generic linux user> (edit) "https://play.nim-lang.org/#ix=3tqA" => "https://play.nim-lang.org/#ix=3tqC"
[19:10:38] <FromDiscord> <haxscramper> But there is no consistency really, since we don't have usable deafult init
[19:10:57] <FromDiscord> <haxscramper> So I would rather use `init(T)`, `new(T)` or `default(T)`
[19:10:59] <FromDiscord> <Rika> some of us use `init(a: typedesc[mytype]): mytype` but not a lot of us
[19:11:04] <arkanoid> I've read that "init[MyType](self: type MyType)" is also used
[19:11:11] <FromDiscord> <Rika> please use typedesc
[19:11:24] <arkanoid> yes, I was just triggering the masses :D
[19:11:36] <arkanoid> I've just learned to prefer typedesc and avoid "type" thing
[19:11:50] <FromDiscord> <generic linux user> so thats not ok?
[19:12:41] <FromDiscord> <carmysilna> If I want to have an `Evaluator` Haskell typeclass or Java interface with the required method `evaluate(self: var Evaluator, term: Term) {.raises: [].}`, what's the normal way to do that in Nim?
[19:13:02] <FromDiscord> <Rika> runtime or compiletime
[19:13:06] <FromDiscord> <Rika> (i mean for enforcement)
[19:13:33] *** Quits: mst (~matthewt@vps-6c71e929.vps.ovh.net) (Ping timeout: 265 seconds)
[19:14:04] <arkanoid> generic linux user: https://play.nim-lang.org/#ix=3tqG
[19:14:28] <FromDiscord> <carmysilna> ideally compiletime but runtime would work as well, I anticipate there just being a few different instances I'd like to easily switch between
[19:15:06] <FromDiscord> <Rika> compiletime maybe look at concepts
[19:15:15] <FromDiscord> <Rika> runtime nim doesnt really have anything built in for such
[19:15:46] <arkanoid> yeah, I'd also go for https://nim-lang.org/docs/manual_experimental.html#concepts
[19:16:04] <arkanoid> but there's also this https://github.com/nigredo-tori/classy
[19:16:07] <fn> <12R2D299> 4GitHub: 7"Typeclasses for Nim"
[19:35:57] *** Quits: krux02 (~krux02@p200300ca8f279d005affe840f32e1f48.dip0.t-ipconnect.de) (Remote host closed the connection)
[19:36:37] *** Joins: krux02 (~krux02@p200300ca8f279d005affe840f32e1f48.dip0.t-ipconnect.de)
[19:38:41] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Ping timeout: 246 seconds)
[19:39:06] *** Joins: mst (~matthewt@vps-6c71e929.vps.ovh.net)
[19:45:08] <arkanoid> is it possible to store an interator into a variable?
[19:45:16] <FromDiscord> <Rika> if it is a closure yes
[19:45:53] <arkanoid> and if not? https://play.nim-lang.org/#ix=3tr8
[19:47:55] <FromDiscord> <Rika> make it a closure
[19:48:20] <FromDiscord> <Rika> you can make any iterator (that you dont have access to the impl. of) into a closure this way:
[19:48:31] <FromDiscord> <Rika> wait
[19:48:38] <FromDiscord> <Rika> what's the issue here
[19:48:40] <FromDiscord> <Rika> i'm confused
[19:53:26] <arkanoid> well I have 2 iterator, second one is a closure so I can put it into a var, first one is not
[19:55:39] <arkanoid> I've also tried adding {.closure.} to it, but yet not possible
[19:55:58] <arkanoid> well I'll just wrap them all
[20:00:55] <arkanoid> whoa I've just found a nim compiler bug
[20:03:09] <FromDiscord> <Rika> those arent hard to find
[20:03:46] <arkanoid> or possible of the VM
[20:18:15] <arkanoid> posted new issue. Probably is just a missing check, but it may lead to unwanted behavior at compile time https://github.com/nim-lang/Nim/issues/18528
[20:25:28] <FromDiscord> <Ayy Lmao> What's a good way to check periodically for some state change without messing with the thread? I'm still trying to wrap my head around proper async programming and I suck at it.
[20:27:00] *** Quits: Vladar (~Vladar@46.162.2.53) (Remote host closed the connection)
[20:27:05] <fn> <06Prestige99> What are you trying to do exactly?
[20:27:27] <FromDiscord> <Ayy Lmao> sent a code paste, see https://play.nim-lang.org/#ix=3trk
[20:27:41] <FromDiscord> <Ayy Lmao> `GetProjectStateChangeCount` can tell me when the project changes, and I want to redraw a window whenever it does
[20:29:22] *** Joins: Vladar (~Vladar@46.162.2.53)
[20:29:36] *** Joins: max22- (~maxime@2a01cb0883359800a3ad835e32d00cdf.ipv6.abo.wanadoo.fr)
[20:33:11] <arkanoid> shouldn't noSideEffect pragma raise error if "var" arguments are passed? I mean, I do understand that having escape hatch is good, but noSideEffect should mean noSideEffect
[20:34:25] <FromDiscord> <carmysilna> According to my understanding, noSideEffect means no side effects, and changes to `var` parameters is not a side effect but an effect, because it is explicit in the signature
[20:35:33] <FromDiscord> <Rika> "just dont use var arguments"
[20:36:10] <arkanoid> yeah but this makes possible to use that escape hatch down the stack
[20:36:18] <FromDiscord> <haxscramper> if you said yourself it is `var` then whatever you do with it is not "side" effect
[20:36:31] <FromDiscord> <Rika> its not an escape hatch
[20:36:34] <arkanoid> I might be doing good, but the called code may be just faking noSideEffect, just like debugEcho
[20:36:50] <FromDiscord> <haxscramper> wait until you see `cast(noSideEffect)`
[20:37:13] <FromDiscord> <Rika> then there is nothing you can do
[20:37:13] <arkanoid> exactly
[20:37:14] <FromDiscord> <Rika> yeah
[20:37:21] <FromDiscord> <haxscramper> all over the place
[20:37:37] <FromDiscord> <haxscramper> well, if you really want
[20:37:51] <arkanoid> debugEcho and cast(noSideEffect) should not exist
[20:37:58] <FromDiscord> <haxscramper> Like REALLY want to ban even cast you can use TRM
[20:37:59] <FromDiscord> <haxscramper> that just raises compile-time error
[20:38:01] <arkanoid> or they must be an internal compiler thing
[20:38:13] <arkanoid> TRM?
[20:38:15] <FromDiscord> <Rika> well sorry that your opinions do not align with ours
[20:38:17] <FromDiscord> <haxscramper> most peoples's response would be like "idk, I just wwant to write code"↵(<@709044657232936960_arkanoid=5b=49=52=43=5d>)
[20:38:19] <FromDiscord> <Rika> term rewriting macro
[20:38:39] <FromDiscord> <Rika> aka something that's pretty damn buggy
[20:38:49] <FromDiscord> <Rika> one of the buggiest things in the nim compiler imo
[20:39:03] <FromDiscord> <haxscramper> https://forum.nim-lang.org/t/7837
[20:39:07] <FromDiscord> <haxscramper> see for my example in the end
[20:39:22] <FromDiscord> <Rika> In reply to @arkanoid "debugEcho and cast(noSideEffect) should": and rust `unsafe` shouldnt exist too?
[20:39:34] <FromDiscord> <haxscramper> It still does not work if you have a warning, but if it is an error it doesn't matter
[20:39:38] <FromDiscord> <haxscramper> `static: quit 1`
[20:40:13] <krux02> arkanoid, debugEcho and cast(noSideEffect) are made to leave the ideal world for a moment and deal with reality
[20:40:14] <FromDiscord> <haxscramper> Also noSideEffect can be used to explain things to compiler sometimes
[20:40:35] <FromDiscord> <haxscramper> Like in case of interop, where only you have the knowledge about the API
[20:40:46] <arkanoid> I don't know rust, but is it possible to guard yourself from calling unsafe code from higher level library?
[20:40:51] <FromDiscord> <Rika> no
[20:41:09] <FromDiscord> <haxscramper> parts of the stdlib is built on top of `unsafe` IIRC
[20:41:11] <FromDiscord> <Rika> there are things in rust that can only be implemented via unsafe afaik? at least someone told me about it (ehem)
[20:41:35] <FromDiscord> <haxscramper> calls to system APIs at least
[20:41:58] <FromDiscord> <carmysilna> In reply to @arkanoid "I don't know rust,": there is, via things like `cargo geiger` and `#![forbid(unsafe)]`
[20:42:19] <krux02> arkanoid, if you go deep enough everything is eventually made using unsafe assembly instructions
[20:42:22] <FromDiscord> <carmysilna> the concept of rust is safe abstractions over unsafe code though
[20:42:26] <arkanoid> krux02: and what prevents nim package libs to gets polluted over time by fake pure functions?
[20:42:35] <krux02> arkanoid, nothing
[20:43:00] <FromDiscord> <Rika> In reply to @carmysilna "there is, via things": so does forbid just ignore std code?
[20:43:18] <krux02> arkanoid, what exactly do yea mean by "fake pure"?
[20:43:20] <FromDiscord> <Rika> or is std code actually devoid of unsafe?
[20:43:27] <FromDiscord> <Rika> In reply to @krux02 "arkanoid, what exactly do": casted nosideeffects
[20:43:30] <arkanoid> krux02: like debugEcho
[20:43:49] <krux02> I mean it can be both: lie to the compiler, and deal with something that the compiler really can't figuer out on its own
[20:43:55] <FromDiscord> <Rika> it's a massive pain to debug functional code btw
[20:43:57] <FromDiscord> <carmysilna> In reply to @Rika "so does forbid just": forbid is for forbidding unsafe in your crate only, cargo geiger checks dependencies and ignores std
[20:44:06] <krux02> especially when wrapping C libraries
[20:44:08] <FromDiscord> <Rika> In reply to @carmysilna "forbid is for forbidding": okay gotcha
[20:44:18] <FromDiscord> <Rika> was just a question i wasnt building any argument
[20:44:47] <krux02> Rika: regaridng debug functional code, most of the time functional code (if the language allows it) just works and doesn't need to be debugged ;)
[20:44:49] <FromDiscord> <dom96> In reply to @haxscramper "parts of the stdlib": of course, you need to call into C libraries at some point, cannot do that without being `unsafe`
[20:45:04] <FromDiscord> <Rika> In reply to @krux02 "<@259277943275126785>: regaridng debug functional": haha i fucking wish 😄
[20:46:14] <FromDiscord> <Ayy Lmao> Is there a good example of doing an event loop with async code?
[20:46:22] <FromDiscord> <haxscramper> `rg -g ".nim" -F "{.cast(noSideEffect).}" | wc -l --> 103`
[20:46:33] <FromDiscord> <haxscramper> code processed\: \~8.8Gb
[20:46:40] <FromDiscord> <carmysilna> Seems like if you want "safety all the way down", arkanoid, you might want to look at cakeml or compucert
[20:46:41] <FromDiscord> <haxscramper> it seems we are safe
[20:46:58] <FromDiscord> <haxscramper> `rg -g ".nim" -F "{.noSideEffect.}:" | wc -l --> 157`
[20:47:11] <FromDiscord> <dom96> the nice thing about Rust's `unsafe` is that it makes analysing how much unsafe feature a  library uses trivial
[20:47:17] <arkanoid> so, I can write purely functional nim programs until I start calling external nim code from my "funcs"
[20:47:39] <FromDiscord> <dom96> There was a time I suggested the same for Nim but can't win all the arguments 🙂
[20:47:57] <FromDiscord> <Rika> doesnt the cast() syntax work that way?
[20:48:10] <krux02> arkanoid, yes
[20:48:26] <FromDiscord> <haxscramper> it is pretty easy to find all """""unsafe"""""" parts of the code
[20:48:27] <krux02> C doesn't have a concept of "pure"
[20:48:35] <FromDiscord> <haxscramper> `cast/addr/unsafeAddr`
[20:48:42] <krux02> so you have to tell Nim somehow if something is pure or not.
[20:48:46] <arkanoid> krux02: I said external nim code, not C
[20:48:54] <krux02> And that can of course be a source of problems/bugs.
[20:49:01] <FromDiscord> <haxscramper> Though really unsafe part of the language is called `macro`, but it only blows you mind sometime,
[20:49:02] <FromDiscord> <dom96> haxscramper: not really, your `ptr` can be passed all around the place
[20:49:05] <krux02> arkanoid, ok
[20:49:07] <krux02> sorry
[20:49:23] <krux02> for me external code is everything that isn't Nim ;)
[20:49:30] <FromDiscord> <dom96> so the analysis becomes much more complex than just "find unsafe blocks"
[20:49:30] <FromDiscord> <haxscramper> well, ok, if we treat any `ptr` as unsafe then yes↵(@dom96)
[20:49:40] <FromDiscord> <dom96> well... it is unsafe
[20:50:01] <arkanoid> yeah, I mean external pure-nim module. Something I install from nimble and it 100% nim
[20:50:02] <FromDiscord> <haxscramper> but still, we can treat it as some kind of taint mdoe
[20:50:04] <FromDiscord> <carmysilna> I mean, Rust doesn't even have a concept of purity or effect tracking, so its probably worse than Nim in this regard
[20:50:05] <FromDiscord> <haxscramper> tain mode
[20:50:25] <FromDiscord> <Rika> In reply to @carmysilna "I mean, Rust doesn't": thats honestly surprising
[20:50:37] <FromDiscord> <dom96> an "Unsafe" effect would be nice in Nim
[20:50:39] <FromDiscord> <Rika> of all languages i thought theyd have the most robust effect tracking
[20:50:54] <FromDiscord> <haxscramper> I think we can audit nim modules based on the IC cache left after their test run
[20:50:56] <FromDiscord> <haxscramper> for example
[20:50:58] <FromDiscord> <Rika> cuz i mean isnt functional pushed so hard in rust?
[20:51:06] <FromDiscord> <dom96> but ultimately you'd need a `unsafe` block to allow the "unsafe" code... so we're back to Rust 🙂
[20:51:44] <FromDiscord> <carmysilna> functional features, but not functional purity. Rust feels like systems-level Ocaml, and Nim feels like systems-level Koka, maybe.
[20:51:59] <FromDiscord> <Rika> maybe there should be a mode where `cast()` is ignored
[20:52:03] <FromDiscord> <Rika> thought
[20:52:05] <FromDiscord> <Rika> though
[20:52:12] <FromDiscord> <Rika> that would be an issue for the standard library
[20:52:18] <FromDiscord> <Rika> i'm thinking a bit too fast today
[20:52:21] <FromDiscord> <haxscramper> it is a linter problem really
[20:52:41] <FromDiscord> <dom96> haxscramper: yes, with Nim's AST you can do anything. But doesn't change the fact that it's a complex analysis
[20:52:55] <FromDiscord> <dom96> Pretty sure you'd need to track where `ptr` gets passed around
[20:52:56] <FromDiscord> <haxscramper> yes, things like that are not trivial
[20:52:58] <arkanoid> Nim effect tracking is one of the most promising feature to me. Calling nim code by other author's that can cheat noSideEffect while still being in pure nim is a big lie to the programmer
[20:53:01] <FromDiscord> <Rika> what constitutes "good fake effects" and "bad fake effects" anyway?
[20:53:26] <FromDiscord> <dom96> You can probably get a pretty good estimate of how unsafe a module is by just counting `ptr`/`addr`/`cast` etc though
[20:53:29] <FromDiscord> <Rika> because sometimes it really is needed to cast(), just like sometimes it really is needed to go unsafe in rust
[20:53:35] <FromDiscord> <carmysilna> I'm not concerned about the var in func issue, as a Haskell/Rust person, because its essentially using an `IORef`. It doesn't affect anything outside of what you give it, and mutation is explicit
[20:54:01] <FromDiscord> <Rika> In reply to @carmysilna "I'm not concerned about": yeah thats the argument i imagine the other core devs of nim would say
[20:54:27] <FromDiscord> <Rika> the cast() issue is interesting to think about though
[20:54:35] <FromDiscord> <haxscramper> also you can overload based on side effects in the ast, if you want
[20:54:35] <arkanoid> yeah the "var" thing is not too bad. The cast is
[20:54:47] <FromDiscord> <haxscramper> I think that part is not as buggy as TRM
[20:55:00] <FromDiscord> <carmysilna> I like noSideEffects as a way to enforce "no IO" even if it isn't Haskell level of purity. Every language has escape hatches, except for maybe Coq or Agda but that's not Nim's niche
[20:55:08] <FromDiscord> <dom96> `cast` is  "unsafe"
[20:55:21] <FromDiscord> <Rika> Coq is basically mathematical proving anyway though isnt it
[20:55:31] <FromDiscord> <dom96> not sure why you'd consider `cast` bad
[20:55:31] <FromDiscord> <Rika> you're basically always rigorous when you use Coq
[20:55:33] <FromDiscord> <dom96> it's a necessity
[20:55:34] <FromDiscord> <carmysilna> yeah, its an automated theorem prover in a language
[20:55:54] <FromDiscord> <carmysilna> Agda is a bit more of a programming language that is usable than coq, I like it better
[20:55:55] <FromDiscord> <Rika> as ive said above, there are legitimate uses for cast
[20:56:28] <FromDiscord> <haxscramper> like binary serialization
[20:57:17] <arkanoid> I'm talking about casting a function that has side effects into a "noSideEffect" one, not casting types to types
[20:57:21] <FromDiscord> <Rika> the main issue is basically deliberating "good" from "bad", legitimate from abuse, which is pretty much impossible to automate
[20:57:29] <FromDiscord> <Rika> yes
[20:57:30] <FromDiscord> <Rika> we know
[20:58:55] <FromDiscord> <dom96> there are other escape hatches too, you can always just call a side effect proc via `{.emit: """myProc();""".}`
[20:59:34] <FromDiscord> <dom96> I'd say Nim's philosophy here is to be pragmatic here, so you'll find lots of things like this
[20:59:40] <FromDiscord> <dom96> (edit) "pragmatic here," => "pragmatic,"
[21:00:08] <arkanoid> Oh dear. Is there a list of escape hatches? They really should be on the Wanted list then function up the stack goes "func"
[21:01:45] <FromDiscord> <haxscramper> IIRC only `cast`
[21:01:47] <arkanoid> being able to separate pure logic from IO at the edge is top rule for "being pragmatic" when dealing with larger programs
[21:02:22] <FromDiscord> <haxscramper> Old syntax was `{.nosideEffect.}` and it is still supported
[21:02:33] <FromDiscord> <haxscramper> you can also count `{.emit:.}` in if you want
[21:02:41] <FromDiscord> <Rika> wdym hax? dom just said some code could have some emit that calls a C func that has side effects
[21:02:46] <FromDiscord> <Rika> yeah
[21:03:05] <FromDiscord> <Rika> we should probably have a list of "unsafe" stuff no?
[21:03:22] <FromDiscord> <Rika> though that might include basically a fourth of the lang i assume
[21:03:32] <FromDiscord> <haxscramper> I personally not a big fan of this really
[21:03:50] <arkanoid> haxscramper, why not?
[21:03:59] <FromDiscord> <haxscramper> if I do `cast` I know what I'm doing
[21:04:14] <FromDiscord> <dom96> In reply to @Rika "we should probably have": yep, we should
[21:04:14] <FromDiscord> <Rika> basically people dont want other people telling then what to do
[21:04:16] <FromDiscord> <Rika> (edit) "then" => "them"
[21:04:34] <FromDiscord> <Rika> its pretty much the unspoken rule nim has been following
[21:05:08] <FromDiscord> <haxscramper> And about IO/logic separation - `debugEcho` is for debugging
[21:05:08] <FromDiscord> <haxscramper> And a lot of things are the same way
[21:05:23] <FromDiscord> <haxscramper> Not logic/IO but rather just convenience
[21:05:57] <FromDiscord> <haxscramper> and it called `debug` anyway, so it is pretty clear even from reading the code
[21:06:21] <arkanoid> haxscramper, you can do cast, but if you do that in a func that then you export and other programmer use in a func, they should get a error/warning static that that is not really a func due to imported code
[21:06:21] <federico3> debugging, benchmarking, generating application metrics
[21:06:23] <FromDiscord> <haxscramper> That one too↵(@Rika)
[21:06:30] <FromDiscord> <Rika> in the end nim does not lean hard towards a kind of side, the core devs prefer the best compromise for real world scenarios
[21:07:03] <FromDiscord> <Rika> In reply to @arkanoid "<@608382355454951435>, you can do": error no, maybe a warning
[21:07:07] <FromDiscord> <haxscramper> ﻿arkanoid\: as I said earlier, it is a linter problem
[21:07:56] <FromDiscord> <haxscramper> I can write an example linter that does find this if you want
[21:08:01] <arkanoid> Rika, whatever, but something that can make the programmer aware of a side effect happening inside of his noSideEffect code
[21:08:13] <FromDiscord> <carmysilna> sent a code paste, see https://play.nim-lang.org/#ix=3try
[21:08:34] <FromDiscord> <carmysilna> (And it succeeds where it should fail with that input)
[21:09:25] <arkanoid> haxscramper, it is not a linter issue, as compiler is capable of tagging noSideEffect and raises automatically by itself
[21:09:50] <FromDiscord> <haxscramper> `noSideEffect` says to compiler "there is no side effects"
[21:10:06] <FromDiscord> <haxscramper> how it is supposed to know the inner meaning of your code if someone just said otherwise
[21:10:27] <FromDiscord> <haxscramper> Like we literally just told it to not look here, so it doesnt
[21:10:48] <FromDiscord> <Rika> as ive said, maybe there should be a flag where cast(nse) or any cast() pragma would be ignored
[21:10:57] <FromDiscord> <Rika> that way the user could choose if they wanted it or not
[21:11:53] <arkanoid> I bet the compiler knows if escape hatches are used down the stack when tracking noSideEffects issues
[21:12:59] <arkanoid> I expect debugEcho to output a warning at compile time too, if called from a func (so basically the proper use of it)
[21:13:12] <FromDiscord> <Rika> it could know if it ignored such escape hatches
[21:13:28] <FromDiscord> <Rika> i mean this idea sounds good enough for me now
[21:13:33] <FromDiscord> <Rika> a warning sounds fine to me
[21:14:37] <FromDiscord> <haxscramper> https://github.com/nim-lang/Nim/blob/73ce40aaf71196faa08072216bd826a94b5d40b1/compiler/sempass2.nim#L893
[21:14:52] <FromDiscord> <haxscramper> `if bc.enforceNoSideEffects: tracked.inEnforcedNoSideEffects = true`
[21:15:07] <FromDiscord> <haxscramper> https://github.com/nim-lang/Nim/blob/73ce40aaf71196faa08072216bd826a94b5d40b1/compiler/sempass2.nim#L1129-L1147
[21:16:08] <FromDiscord> <haxscramper> that's where `cast(noSideEffect)` is implemented probably
[21:19:45] <arkanoid> nice spot
[21:24:25] <FromDiscord> <dom96> The amount of times I forget to `close` my fds in Nim is crazy
[21:24:42] <FromDiscord> <zidsal> sent a code paste, see https://play.nim-lang.org/#ix=3trA
[21:24:51] <arkanoid> fds?
[21:25:01] <FromDiscord> <dom96> file descriptors
[21:25:12] <arkanoid> oh! is defer still a thing?
[21:25:29] <arkanoid> I heard araq doest like them anymore
[21:25:39] <arkanoid> for good reason, I'd say
[21:25:42] <FromDiscord> <carmysilna> linear types would be helpful in this scenario, I don't know if those are in the works for nim at all
[21:27:00] <FromDiscord> <dom96> I think we've got destructors now
[21:27:12] <FromDiscord> <carmysilna> sent a code paste, see https://play.nim-lang.org/#ix=3trB
[21:27:13] <FromDiscord> <dom96> problem is... how can we add destructors when most code calls `close`? 🙂
[21:27:30] <FromDiscord> <dom96> also I wonder if destructors work at all for async code
[21:28:57] <FromDiscord> <zidsal> @carmysilna thats a good question... the testament documentation doesn't mention about `cat .` I can't remember where I got that from, just saw it in my .nimble file
[21:29:06] *** Quits: aeverr (~deodex@ai126146253007.53.access-internet.ne.jp) (Ping timeout: 255 seconds)
[21:31:02] *** Joins: aeverr (~deodex@ai126162184205.56.access-internet.ne.jp)
[21:33:57] <FromDiscord> <zidsal> @carmysilna from what I remember testament only looks for files in `By default Testament looks for test files on "./tests/.nim"` so if you put youre tests in a sub folder it won't find them
[21:34:23] <FromDiscord> <carmysilna> it isn't in a subfolder, just `./tests/taddition.nim`
[21:34:54] <FromDiscord> <zidsal> hmmm I'll defer to someone who can explain why testament cat . works 😛
[21:35:06] <FromDiscord> <zidsal> (edit) "hmmm I'll defer to someone who can explain why testament cat . works 😛 ... " 03added "I clearly stole this from someone else's nimble file"
[21:42:58] *** Joins: rockcavera (~rc@192.12.112.199)
[21:42:58] *** Quits: rockcavera (~rc@192.12.112.199) (Changing host)
[21:42:58] *** Joins: rockcavera (~rc@user/rockcavera)
[21:57:56] <FromDiscord> <konsumlamm> is Nim's effect system used for anything besides exceptions and side effects?
[22:00:16] <arkanoid> konsumlamm, what do you mean?
[22:00:38] <FromDiscord> <haxscramper> you can in theory add some metadata to procs with it
[22:00:54] <arkanoid> you mean with tags?
[22:00:55] <FromDiscord> <haxscramper> but that is `std::enable_if` level of madness
[22:01:03] <FromDiscord> <haxscramper> yes
[22:01:31] <arkanoid> I like the fact that I can list the effects at any point in code
[22:01:37] <FromDiscord> <haxscramper> kind of curious if you can use `static` in effect annotation
[22:01:48] <FromDiscord> <konsumlamm> you can if you annotate them
[22:02:15] <FromDiscord> <konsumlamm> but how will you know what code doesn RNG by default? that's also an effect arguably
[22:02:22] <arkanoid> wait, what is effect annotation? Are you talking about custom effect?
[22:02:46] <FromDiscord> <konsumlamm> Nim supposedly has an effect system
[22:03:16] <FromDiscord> <konsumlamm> at least that's what you were talking about for the last few hours
[22:03:19] <FromDiscord> <konsumlamm> that's what i'm talking about
[22:03:37] <arkanoid> yes, I know, but your question was not clear to me
[22:03:46] <FromDiscord> <haxscramper> https://wandbox.org/permlink/k0vnmzoNYqhPNpSn
[22:03:47] <FromDiscord> <haxscramper> no, I can't
[22:03:56] <arkanoid> afaik, nim effect system means: noSideEffect, raises and tags
[22:04:12] <FromDiscord> <haxscramper> Or rather I can't easilyu access generic parameters for an effect
[22:04:56] <FromDiscord> <haxscramper> Otherwise I could put static set of flags to it and Do something like `WriteIOEffect[{WriteFile}]`
[22:05:18] <arkanoid> ok, you were talking about custom effects
[22:06:30] <FromDiscord> <haxscramper> It seems like interpreted the question incorrectly
[22:06:50] <FromDiscord> <konsumlamm> i was asking about custom effects and potential other builtin effects
[22:06:57] <FromDiscord> <konsumlamm> if they're used anywhere
[22:07:18] <FromDiscord> <konsumlamm> because as is, it doesn't look like a Koka-like effect system
[22:07:27] <FromDiscord> <konsumlamm> but tbf i haven't really looked at either in detail
[22:07:54] <FromDiscord> <konsumlamm> a `static` effect sounds very interesting tbh
[22:07:59] <FromDiscord> <haxscramper> No, no package defines derivative from root effect
[22:08:49] <FromDiscord> <haxscramper> Or to be more precise - I have to additional effects for my os wrapper
[22:08:50] <FromDiscord> <haxscramper> `ShellExecEffect`
[22:09:24] <FromDiscord> <konsumlamm> btw, what's the problem with `std::enable_if`? D uses something similar throughout its stdlib and it seems to work fine for them
[22:09:40] <FromDiscord> <haxscramper> there is no problem with `std::enable_if` itself
[22:09:54] <FromDiscord> <haxscramper> I have problems with how it is implemented
[22:11:40] <fn> <11ForumUpdaterBot99> New thread by GamzWithJamz: Youtube "Software Drag Racing" to count primes in Nim, see https://forum.nim-lang.org/t/8247
[22:11:51] <arkanoid> I'm not sure I'm following you
[22:12:16] <FromDiscord> <haxscramper> To be honest, I have problems with how most of the C++ stdlib is implemented
[22:12:36] <FromDiscord> <haxscramper> Just insane pile of garbage on top of garbage that doesn't even provide any useful API
[22:14:02] <arkanoid> C++ is nowadays like DNA, 90% are just vestigial traits unused but yet there
[22:19:23] <arkanoid> is it required to extend RootEffect? The nim manual just defines an object and use that in tags
[22:21:50] <FromDiscord> <haxscramper> It is not required, but I assume it is generally advised to
[22:22:03] <FromDiscord> <haxscramper> Just like `CatchableError`
[22:23:24] <FromDiscord> <haxscramper> By the way, on topic of `debugEcho` specifically - I think it is very good thing there are simple escape hatches for things like that, because otherwise you would have to convert `func` to `proc` just print some values
[22:23:40] <FromDiscord> <haxscramper> And in my case, I would just leave things to be `proc`
[22:24:19] <FromDiscord> <haxscramper> Since it is too annoying to deal with this. But if I just need an escape hatch for quick debugging, that I don't intend to leave
[22:25:31] <arkanoid> I'm ok with the escape hatch, but that should not be included in shared code, and if it's there should at least raise a big yellow warning to the next programmer 
[22:25:40] <FromDiscord> <haxscramper> And I have the ability to quickly do what I need and then clean up without too much pain it makes is simpler for me to work cleanly
[22:26:58] <arkanoid> problem is not debugEcho while developing your code. Problem is "import thatGithubModule" and then "func myFoo() = thatGithubFunc()"
[22:27:35] <FromDiscord> <haxscramper> I will see what I can do with that in haxdoc
[22:27:38] <arkanoid> if you state that's a func, it should be noSideEffect all way down the stack, and raise a warning otherwise
[22:29:00] <FromDiscord> <konsumlamm> it even says in the name that it's only supposed to be used for debugging...
[22:29:14] <FromDiscord> <konsumlamm> Haksell also has `trace` to print in pure functions and noone complains
[22:29:22] <FromDiscord> <konsumlamm> (edit) "Haksell" => "Haskell"
[22:29:29] <FromDiscord> <haxscramper> I bet there are people who complain
[22:29:47] <FromDiscord> <konsumlamm> not a meaningful amount at least
[22:29:51] <FromDiscord> <haxscramper> And we don't have a lot of complaints about that either
[22:29:58] <FromDiscord> <haxscramper> What people do complain about is horrible 'has side effect' message
[22:33:27] <arkanoid> you're watching the finger and not the moon. Problem is not debugEcho per-se, but the tool made to make it work. It is quite obvious that a std tool uses that escape hatch right, but you don't get a warning when running code from the community that uses it possible badly
[22:35:40] <arkanoid> you might say: just read code you imports, but then you can extend that to all effects. Just track all exceptions and tags manually
[22:36:04] <FromDiscord> <haxscramper> yes, it is a problem, but I would assume people who don't care about side effects just use `proc`
[22:36:38] <FromDiscord> <haxscramper> So yes, if someone deliberately creates incorrect package that uses `func` and casts it is a problem
[22:37:09] <FromDiscord> <haxscramper> But as long as I can nuke your pc with a macro I don't think we can consider it a problem
[22:37:40] <FromDiscord> <haxscramper> note that is not "there are worse things" argument
[22:38:16] <arkanoid> well, would you be able to nuke my pc with a macro if I would call it from a func?
[22:38:32] <FromDiscord> <haxscramper> I can nuke your PC at compile-time
[22:38:48] <FromDiscord> <haxscramper> Well, even at the moment you install package
[22:39:04] <FromDiscord> <carmysilna> I think I agree with Rika here, this is a tool for a linter. Your `cargo geiger` (which is written outside of Rust core, its a plugin) equivalent can scan all your dependencies and display where they cast or use debugEcho
[22:39:09] <FromDiscord> <haxscramper> A lot of package managers can do that
[22:39:49] <FromDiscord> <haxscramper> At some point community creates a linter with additional diagnostics not covered by compiler
[22:40:02] <FromDiscord> <haxscramper> For almost any language
[22:40:15] <FromDiscord> <Justaus3r (Justaus3r)> Hello↵I am an intermediate python programmer,just got on nim yesterday and i am really interested in learning it.i have started learning it.i a have a question can we convert int into string in nim .i tried it with string(thenumber) but it didn't work
[22:40:34] <arkanoid> well, sure, at compile time you can mess around build env. But that's not nim fault or responsibility just like you can nuke with a Makefile
[22:40:35] <FromDiscord> <haxscramper> And that linter includes much broader notion of what is bad od what is convert
[22:40:42] <FromDiscord> <haxscramper> `$12`
[22:41:04] <FromDiscord> <haxscramper> In general for "anything to string" you do `$<your expression>`
[22:41:22] <FromDiscord> <haxscramper> `$` is a universal to-string conversion operator for all types
[22:42:40] <FromDiscord> <Justaus3r (Justaus3r)> Thanks its very helpful since nim is relattively new programming languages and there arent many sources for learning it but i really like it for its efficeincy and speed and wanna learn it do you have any sources?
[22:42:56] <arkanoid> apart from exceptional cases, it is not generally the case of a dev tool that nukes dev build system. It is more a problem of correctness of build output and trust
[22:44:05] <arkanoid> not so new, I'd say. Nim is quite adult. Well, I'd say it is more an Axolotl
[22:44:13] *** Joins: pro (~pro@user/pro)
[22:44:59] <FromDiscord> <konsumlamm> adult maybe, but not so much mature, imo at least
[22:45:06] <FromDiscord> <haxscramper> https://github.com/nim-lang/Nim/wiki/Nim-for-Python-Programmers
[22:45:06] <FromDiscord> <haxscramper> https://nim-lang.org/documentation.html
[22:45:59] <FromDiscord> <Justaus3r (Justaus3r)> thnx
[22:47:09] <FromDiscord> <haxscramper> god, this "nim for programmers" is three times longer than I remember it
[22:47:10] <FromDiscord> <haxscramper> `> 489 revisions`
[22:48:03] <arkanoid> Pattern Matching builtin ?
[22:48:14] <FromDiscord> <konsumlamm> no?
[22:48:37] <arkanoid> by macro implementation, maybe?
[22:48:45] <FromDiscord> <konsumlamm> yes
[22:49:03] <FromDiscord> <konsumlamm> https://nim-lang.org/blog/2021/03/10/fusion-and-pattern-matching.html
[22:50:47] <arkanoid> ah, ok, that implementation. I'm still puzzled if general nim descriptions should cover just std, std+fusion or all available modules
[22:52:11] <arkanoid> just found out there's a linter project https://github.com/nim-dev/nimlint
[22:52:14] <fn> <12R2D299> 4GitHub: 7"nimlint makes developing softer."
[22:52:52] <FromDiscord> <Justaus3r (Justaus3r)> > `$` is a universal to-string conversion operator for all types↵sorry for the bother! but are there any other universal type converter's or only for strings.
[22:53:46] <FromDiscord> <haxscramper> Universal - no, but `std/json` defines `%` to convert some thing to json
[22:54:47] <FromDiscord> <Justaus3r (Justaus3r)> ah great!,again thnx
[23:03:00] *** Quits: pro (~pro@user/pro) (Quit: WeeChat 3.2)
[23:05:53] <FromDiscord> <bernardo> can someone point me to some documentation to help me understand `do`?
[23:06:18] *** Joins: pro (~pro@user/pro)
[23:07:38] <FromDiscord> <bernardo> ah nvm, found it https://nim-lang.org/docs/manual_experimental.html#do-notation
[23:14:39] <FromDiscord> <gerwy>  https://media.discordapp.net/attachments/371759389889003532/866752418545270794/Screenshot_from_2021-07-19_20-40-47.png
[23:14:48] <FromDiscord> <gerwy> im trying to install nim's lsp into sublime
[23:15:10] <FromDiscord> <gerwy> and it shows up every time i open sublime
[23:15:42] <FromDiscord> <gerwy> i think i did everything right, pls halp :C
[23:23:54] <fn> <11ForumUpdaterBot99> New thread by Haxscramper: How to default non-trivial argument with `staitc[]` type, see https://forum.nim-lang.org/t/8248
[23:24:10] <FromDiscord> <gerwy> okay i fixed it nevermind, but still, only `go to definition` works :< so idk if its alright or not
[23:38:46] *** Joins: krux02_ (~krux02@p4ff8b737.dip0.t-ipconnect.de)
[23:41:02] *** Quits: krux02 (~krux02@p200300ca8f279d005affe840f32e1f48.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[23:43:30] <fn> <06Prestige99> the lsp server can be finnicky
[23:58:52] <nixfreak_nim[m]> Is there a way to visualized this on the stack https://play.nim-lang.org/#ix=3ts6 
[23:59:35] <nixfreak_nim[m]> I'm curious why i + 1 has to be used instead of just (i) 
[23:59:44] <nixfreak_nim[m]> cause they are both 15 chars 
