[08:50:03] *** Quits: mlaug (~mlaug@v220210724969158479.bestsrv.de) (Quit: The Lounge - https://thelounge.chat)
[08:51:21] *** Joins: mlaug (~mlaug@v220210724969158479.bestsrv.de)
[09:39:13] *** Quits: satyanash (~satyanash@143.110.247.92) (Quit: kthnxbai)
[09:39:40] *** Joins: satyanash (~satyanash@143.110.247.92)
[16:55:21] *** Quits: drbobbeaty (~drbob@c-24-14-127-107.hsd1.il.comcast.net) (Ping timeout: 256 seconds)
[18:26:49] *** Joins: drbobbeaty (~drbob@c-24-14-127-107.hsd1.il.comcast.net)
[19:51:25] <enebo[m]> kares: I don't remember because it was over 3 years ago but did we ever discuss removing _strptime for strptime to avoid the logic and ruby code for just rewrapping data back into a RubyHash and then out into a handful of simpler values for new!
[19:52:16] <enebo[m]> I do remember we got a lot of perf out of caching the parsing of the format string but I am not sure why we didn't boil the ocean
[19:55:30] <enebo[m]> I found a commit with some info: https://github.com/jruby/jruby/commit/f2e7b82a3f49dedec71073919d7315f35a68b737
[19:56:21] <enebo[m]> I don't even mention what I just suggested so I am not sure why I eliminated that.  I suppose it may be because we still need a _strptime which returns a hash as a public API
[19:56:54] <enebo[m]> (Also I am not looking at working on this but I was just thinking about it because we are working on a new sprintf impl for 9.4)
[20:16:26] <kares[m]> Recall working on some of it for a few days in IDEA which had a bug of loosing FS changes on a restart ... while I was just about to start committing.
[20:19:36] <kares[m]> actually no, I was porting some other bits due perf. from C code which JRuby still does in Ruby. believe having those aligned would have helped avoiding the Hash rewraps
[20:25:16] <enebo[m]> kares: ok well something we can think about in the future.  We perform considerably better than MRI so it is just a blue sky thing
[20:25:29] <enebo[m]> I plan on sprintf cache and also a size prediction metric so I expect to see some gains there when it is finished
[20:44:10] <kares[m]> we do? guess the cache did not exist when I did the RubyDate stuff since we weren't back than
[21:03:00] <enebo[m]> I added the cache in the commit above
[21:03:07] <enebo[m]> it was a big jump in perf
[21:11:22] <nirvdrum[m]> TruffleRuby added a fast path for the default time format string in the default logger and that had a fairly large impact. https://github.com/oracle/truffleruby/pull/2361/files#diff-2165f1135ce1cc7280599d50b87438aee142f40977cc937dbfd175a8c79795fd is most of the changes. That has a small bug that was fixed in a subsequent commit.
[21:11:36] <nirvdrum[m]> It might be worth looking at something similar. 
[21:53:07] <enebo[m]> nirvdrum: I did not look too long but I mostly just see precalculated paddings
[21:54:50] <enebo[m]> and I think LazyIntRope so you basically have a pre-calced set of ropes you just potentially merge when you use the value?
[23:21:41] *** Joins: mlaug4 (~mlaug@v220210724969158479.bestsrv.de)
[23:23:13] *** Joins: siasmj_ (sid6106@id-6106.lymington.irccloud.com)
[23:30:46] *** Quits: mlaug (~mlaug@v220210724969158479.bestsrv.de) (*.net *.split)
[23:30:46] *** Quits: siasmj (sid6106@lymington.irccloud.com) (*.net *.split)
[23:30:47] *** siasmj_ is now known as siasmj
[23:30:47] *** mlaug4 is now known as mlaug
[23:39:47] <nirvdrum[m]> It simplifies the full parser to just the features used by the default time format string.  strftime needs to account for a ton of features that aren't really used all that often. The usage of the restricted set is optimistic. If the format string actually uses any feature outside of that restricted set, it returns `null`,  which is a bit like a deopt. From there,  there's a cache from the format string to the set of nodes needed to
[23:39:47] <nirvdrum[m]> actually parse it.
[23:41:13] <nirvdrum[m]> You could probably simplify it to something like `if (format == DEFAULT_LOG_TIME_FORMAT) { use_fast_parser() } else { use_full_parser() }`
[23:41:39] <nirvdrum[m]> LazyIntRope is just another layer to all of that. 
[23:42:54] <nirvdrum[m]> Anyway,  since it sounds like you're looking at caching the parse result.  I'm mostly just pointing out that we had good luck with default time format for Ruby's built-in logger.
