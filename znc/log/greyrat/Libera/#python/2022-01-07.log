[00:00:23] *** Quits: Lush-_ (~lushlush@user/lush-/x-1276235) (Quit: leaving)
[00:00:42] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[00:01:28] <Speed2u> nevermind i'm stupid.. this means that [5:] is not at all working the way i said it did. it still catches all commands
[00:02:31] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[00:02:45] *** Joins: jcalla (~jcalla@cpe-75-189-211-206.nc.res.rr.com)
[00:04:01] *** Joins: whaley (~whaley@2603-6080-a301-33d1-8c46-e0cf-9906-f8cf.res6.spectrum.com)
[00:04:46] *** Quits: ice9 (~ice9@user/ice9) (Remote host closed the connection)
[00:05:49] *** Quits: python476 (~user@88.160.31.174) (Ping timeout: 240 seconds)
[00:06:33] <BtbN> https://gist.github.com/BtbN/6ff5d49b8df2c73a12f78760f86b9960 can anyone spot what changed to break this? The only meaningful version difference I could make out in there is the setuptools update. And I already tried pinning it to an older version, to no avail.
[00:06:48] <BtbN> (It's two files, broken log at the top, a week old working one of the same commands below)
[00:08:04] *** Quits: gusto (~Augustus@2a01:b740:13d2::39) (Quit: Textual IRC Client: www.textualapp.com)
[00:08:52] *** Quits: luigibu (~luigibu@11.red-79-159-71.dynamicip.rima-tde.net) (Quit: WeeChat 3.3)
[00:08:59] *** Joins: ice9 (~ice9@user/ice9)
[00:09:19] *** Joins: bluedust (~bluedust@117.241.191.1)
[00:09:27] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[00:10:20] *** Joins: hams (~hams@user/hams)
[00:13:08] <YakoYoku> Both old and new versions of NumPy and Python match, though it prints an ABI/API incompatibility
[00:13:13] <YakoYoku> Best chance could be a rebuild?
[00:13:37] *** Joins: Reign (~Username@ip98-161-226-10.ph.ph.cox.net)
[00:14:25] *** Quits: bluedust (~bluedust@117.241.191.1) (Ping timeout: 256 seconds)
[00:15:46] *** Joins: Xano (~Xano@2a00:23c4:4204:700:f056:3623:7d20:b653)
[00:15:48] <Xano> In an instance method's decorator, is it possible to determine it's a method at all? type() just gives `function`. I guess I could inspect the first parameter, but that's flakey...
[00:16:34] *** Quits: ice9 (~ice9@user/ice9) (Read error: Connection reset by peer)
[00:17:16] *** Joins: raxor2k (~raxor2k@78.158.254.45)
[00:17:23] *** Joins: ice9 (~ice9@user/ice9)
[00:17:33] *** Quits: ice9 (~ice9@user/ice9) (Remote host closed the connection)
[00:17:46] *** Joins: ice9 (~ice9@user/ice9)
[00:17:47] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[00:17:52] *** Quits: ice9 (~ice9@user/ice9) (Remote host closed the connection)
[00:18:17] *** Quits: jay-m126_ (~jay-m@41.205.30.141) (Ping timeout: 240 seconds)
[00:18:31] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 256 seconds)
[00:18:35] *** Joins: miique_ (~miique@181.46.139.166)
[00:18:38] *** Quits: falk689 (~falk689-q@gateway/tor-sasl/falk689) (Remote host closed the connection)
[00:18:57] *** Quits: jay-m1261 (~jay-m@41.205.30.141) (Ping timeout: 256 seconds)
[00:19:03] *** Joins: falk689 (~falk689-q@gateway/tor-sasl/falk689)
[00:19:12] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[00:19:31] *** Quits: miique (~miique@181.46.139.166) (Ping timeout: 256 seconds)
[00:19:34] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[00:20:08] *** Joins: jay-m126_ (~jay-m@41.205.30.141)
[00:20:22] *** Joins: Warped (~Warped@user/warped)
[00:20:54] *** Quits: aselman4 (~aselman4@chipr012-p2.nls.ford.com) (Quit: Client closed)
[00:22:06] *** Joins: morrigan (~m0rr1gan@user/m0rr1gan)
[00:23:01] *** Quits: WarpedAI (~Warped@user/warped) (Ping timeout: 240 seconds)
[00:23:57] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[00:24:03] *** Quits: jay-m1262 (~jay-m@gateway/vpn/pia/jay-m126) (Ping timeout: 256 seconds)
[00:24:15] *** Quits: cosimone (~user@93-47-228-11.ip115.fastwebnet.it) (Remote host closed the connection)
[00:25:04] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[00:25:11] *** Quits: morrigan_ (~m0rr1gan@user/m0rr1gan) (Ping timeout: 256 seconds)
[00:25:27] *** Joins: jay-m1261 (~jay-m@41.205.30.141)
[00:25:29] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[00:25:33] *** Joins: Naan (~naan@user/naan)
[00:25:52] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Read error: Connection reset by peer)
[00:26:10] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[00:26:53] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 256 seconds)
[00:27:32] <BtbN> YakoYoku, rebuild of what? Both of those ARE a complete rebuild from scratch.
[00:27:35] *** Quits: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl) (Ping timeout: 256 seconds)
[00:27:58] *** Joins: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl)
[00:28:06] *** Quits: BrokenCog (~BrokenCog@59.sub-174-194-202.myvzw.com) (Read error: Connection reset by peer)
[00:28:11] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d550-b607-3a0a-ff7b.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[00:28:23] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[00:29:04] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:29:44] *** Joins: Guest23 (~Guest23@p5deec34b.dip0.t-ipconnect.de)
[00:30:17] *** Quits: Auron (~Auron956@user/auron) (Ping timeout: 256 seconds)
[00:31:01] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 240 seconds)
[00:31:10] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[00:31:20] *** Joins: Auron (~Auron956@user/auron)
[00:32:27] <SnoopJ> Xano, the best thing I can think of is to test if it's a classmethod or staticmethod and if not (and assuming this decoration only ever happens in a class definition), it's an instance method
[00:33:01] *** Quits: grundrausch3n (~grundraus@p200300e9ef0ab500e0d1dca8e4ea28c6.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[00:33:21] *** Joins: Viewday11 (~Viewday@user/viewday)
[00:34:13] <SnoopJ> inspect.classify_class_attrs() can apparently distinguish between the three, it does that here: https://github.com/python/cpython/blob/main/Lib/inspect.py#L701-L714
[00:34:15] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[00:34:46] <YakoYoku> According to the NumPy docs `numpy.ufunc` is a list of functions for array operations (https://numpy.org/doc/stable/reference/ufuncs.html), what does intrigue me is that how in a containerized environment the number of functions has been altered
[00:34:48] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[00:35:22] *** Joins: menace (~someone@ppp-93-104-175-20.dynamic.mnet-online.de)
[00:35:23] *** Joins: Betal (~Betal@user/betal)
[00:35:35] *** Quits: menace (~someone@ppp-93-104-175-20.dynamic.mnet-online.de) (Changing host)
[00:35:35] *** Joins: menace (~someone@user/menace)
[00:35:39] *** menace is now known as Deknos
[00:35:42] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[00:35:57] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[00:35:58] <SnoopJ> Xano, what's this for?
[00:39:29] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[00:39:55] *** Joins: Guest12112 (~Guest1211@p5deec34b.dip0.t-ipconnect.de)
[00:41:57] *** Quits: Guest23 (~Guest23@p5deec34b.dip0.t-ipconnect.de) (Quit: Client closed)
[00:42:23] *** Joins: yaf_lit1222 (~yaf_lit12@p5deec34b.dip0.t-ipconnect.de)
[00:42:53] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[00:43:43] <yaf_lit1222> Hello! I am new to Python and working with it for one month. Right now I am trying to make a Sqlite-Database searcher. At the moment I have two main files: logic.py and gui2.py; In the logic I create the search sql command and in the gui2 I show the Database, in which can be added some more data. If I run the gui2 directly  with "app =
[00:43:44] <yaf_lit1222> QApplication(sys.argv)" its possible with "app.focusChanged.connect(self.focus_changed)" to track if the focus has been changed. But if I open the window with the logic.py with "self.w = MyWindow()" and "self.w.show()" its not possible to track it, because "NameError: name 'app' is not defined". I tried some things, but couldnt manage it. Can
[00:43:44] <yaf_lit1222> someone help me?
[00:44:20] <BtbN> YakoYoku, my suspicion is that some other package decided to mess with it during setup.py.
[00:44:34] <BtbN> There's a lot of packages that do random stuff with numpy during setup.py time
[00:44:58] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[00:45:01] *** Quits: hams (~hams@user/hams) (Ping timeout: 256 seconds)
[00:47:17] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[00:47:42] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Quit: Leaving)
[00:48:29] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[00:49:01] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[00:49:39] <YakoYoku> The only ways I could tell that the number of functions in `ufunc` changed is that either the build became poisoned or that there's another module is doing that (a backend or something)
[00:49:55] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[00:50:02] *** Quits: m4td3v (~matdev@2a01:6e60:10:793:666:feed:dead:beef) (Ping timeout: 252 seconds)
[00:51:21] <TML> yaf_lit1222: I've never used the Qt bindings (I assume that's where `QApplication` is coming from?), but maybe this SO question would help you? https://stackoverflow.com/questions/26021808/how-can-i-intercept-when-a-widget-loses-its-focus
[00:52:04] *** Quits: raxor2k (~raxor2k@78.158.254.45) (Remote host closed the connection)
[00:52:07] <yaf_lit1222> TML: yes, its Qt. I will look into the link, thanks!
[00:52:30] <BtbN> YakoYoku, my current suspicion is that Bottleneck is somehow causing this. It's the most likely candidate to mess with the ufunc array.
[00:52:44] <BtbN> But its version didn't change, soo... what?
[00:53:54] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d550-b607-3a0a-ff7b.res6.spectrum.com)
[00:54:38] <YakoYoku> Also Bottleneck acts more like a replacement rather than a backend
[00:54:48] <BtbN> https://github.com/pydata/bottleneck/blob/v1.3.2/pyproject.toml like, look at this. This makes me very suspicious
[00:55:10] <toma> Hi, I'm trying some of those Project Euler problems. Problem 11, the greatest product of four adjacent numbers in a 20x20 grid (https://projecteuler.net/problem=11), I'm new to python and guessing I have to learn NumPy? Before I dive in two questions (1) am I looking in the right area? (2) should I be looking at something else?
[00:56:01] *** Joins: gry (gry@botters/gry)
[00:56:01] *** Joins: ExpiredKebab (~sgreadly@32.58.252.27.dyn.cust.vf.net.nz)
[00:56:04] <BtbN> I'm gonna try to single out Bottleneck installation into a separate pip call, maybe it's somehow leaking into other build envs
[00:56:29] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[00:57:35] *** Joins: emf (~emf@2620:10d:c090:400::5:9fd9)
[00:58:05] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[00:59:06] <YakoYoku> Newer versions of `py-project.toml` use `oldest-supported-numpy` instead of that verbose monster
[00:59:19] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[00:59:49] <YakoYoku> Although the verbose monster of `Bottleneck@1.3.2` doesn't look that malformed
[01:00:10] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[01:00:53] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Ping timeout: 256 seconds)
[01:01:00] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[01:01:52] *** Quits: whaley (~whaley@2603-6080-a301-33d1-8c46-e0cf-9906-f8cf.res6.spectrum.com) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[01:02:07] *** Joins: odoood (~odoood@2601:c8:c000:c4e0::3)
[01:02:09] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[01:02:10] *** Joins: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec)
[01:02:18] <Xano> SnoopJ, The same decorator should be able to handle regular functions as well as instance methods, but the way it must do so is different
[01:02:20] *** Joins: cheater (~Username@user/cheater)
[01:02:43] <SnoopJ> Xano, at the time of decoration in a class definition, an instance method will just be a regular function, as far as I know
[01:02:58] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::3) (Remote host closed the connection)
[01:03:18] *** Quits: magla (~gelignite@55d42ff9.access.ecotel.net) (Quit: Stay safe!)
[01:03:23] *** Joins: odoood (~odoood@2601:c8:c000:c4e0::3)
[01:03:44] <Yhg1s> (They're nowadays slightly different, but not enough to matter to a decorator)
[01:04:11] <Yhg1s> Xano: you can't have a decorator do different things depending on whether it's decorating a function or a method, because it can't tell the difference. Either make it do the same thing in either case, or use different decorators.
[01:04:44] *** Joins: TuckerBrandy1997 (~TuckerBra@d154-20-48-230.bchsia.telus.net)
[01:04:49] <Xano> Yhg1s, That's a clear answer. Thank you, and thank you too, SnoopJ :)
[01:04:50] <SnoopJ> Xano, if I knew what this was for I might have other ideas
[01:05:10] *** Joins: dudek (~dudek@185.150.236.156)
[01:06:00] <Xano> SnoopJ, The decorator stores callables. For instance methods, I'm looking at storing those on the instance itself rather than on the function (for pickling reasons)
[01:06:07] *** Quits: vlm (~vlm@user/vlm) (Read error: Connection reset by peer)
[01:06:26] <Yhg1s> Xano: has anyone told you to avoid pickle at all costs and burn anything that ever touches a pickle yet?
[01:07:08] <SnoopJ> Xano, why do you need to pickle instance methods separately from the class?
[01:07:15] *** Quits: ketiv (~ketiv@92.40.195.121.threembb.co.uk) (Ping timeout: 256 seconds)
[01:07:31] *** Joins: trace987 (~trace@dynamic-002-247-248-171.2.247.pool.telefonica.de)
[01:07:38] <Xano> Yhg1s, I have been lucky enough to receive such invaluable counsel from several knowledgable folks including yourself, but I don't see a way to transfer this data to a process pool without it :)
[01:07:51] <dudek> Is there a way to intelligently infer types from strings? I have a list of values like this https://bpa.st/C4WQ and I would like for example to have the '1', '3', '4' to be ints, '0/1', '1/1' to be strings, '0.0', '50.0' to be floats. Any easy way to do this?
[01:07:53] <Xano> SnoopJ, I don't need to pickle the methods, but I need to pickle this extra data on them
[01:07:53] <ChrisWarrick> Xano: is your data really methods?
[01:07:57] *** Joins: vlm (~vlm@user/vlm)
[01:08:01] <Yhg1s> Xano: literally any serialisation format that isn't a complete dumpster fire.
[01:08:09] <ChrisWarrick> Xano: do you really need data on methods?
[01:08:23] <SnoopJ> Xano, is the data present on not-instance methods, and if so does it need to be ignored in those cases?
[01:08:47] <Xano> Yhg1s, ChrisWarrick SnoopJ It's for https://pypi.org/project/reactives/. Some of the data is reactive, but must be copied to several processes.
[01:08:49] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[01:08:56] <SnoopJ> data on methods I have no real objection too, personally
[01:09:00] <SnoopJ> to*
[01:09:13] <Yhg1s> dudek: what about '1e5' or '-.0' or '1_5'?
[01:09:23] *** Joins: tscopp (~tms@c-76-115-26-235.hsd1.or.comcast.net)
[01:09:37] <dudek> these things won't be in my dataset
[01:09:47] *** Quits: TuckerBrandy1997 (~TuckerBra@d154-20-48-230.bchsia.telus.net) ()
[01:09:47] *** Joins: srhm (~srhm@user/srhm)
[01:09:47] *** Quits: blcyber (~blcyber@216.74.235.178) (Remote host closed the connection)
[01:09:57] <Xano> SnoopJ, Non-instance methods are not part of the pickling requirement. The only reason instance methods are relevant is because instances must be pickleable
[01:09:58] <Yhg1s> dudek: okay, then try int(), if that doesn't work try float(), if that doesn't work keep it as a string. There's nothing to do this for you.
[01:10:10] *** Joins: blcyber (~blcyber@216.74.235.178)
[01:10:26] <BtbN> YakoYoku, yeah, but _somewhere_ an older version of numpy is being pulled in, breaking that ABI
[01:10:26] <Xano> SnoopJ, Because they represent entities part of a larger data structure that is needed for the process pool to do its work
[01:10:28] <Yhg1s> Xano: instance methods aren't actually stored on the instance. They're stored on the class, which isn't actually pickled.
[01:10:30] <SnoopJ> Xano, as far as I can tell, that doesn't answer my question
[01:10:30] *** Quits: yolo (~xxiao@li1120-73.members.linode.com) (Remote host closed the connection)
[01:11:00] <Yhg1s> Xano: it does sound like you just need two different decorators.
[01:11:05] *** Quits: dharrigan (~dharrigan@user/dharrigan) (Quit: ZNC - https://znc.in)
[01:11:17] *** Joins: adeliktas (~adeliktas@i59F5F686.versanet.de)
[01:11:30] <dudek> ah ok Yhg1s I tried int(1/2) and it worked, now I see that I didn't wrap it up with apostrophes and it worked. Getting an error now so it helps!
[01:12:26] <TML> toma: I don't think you _HAVE_ to use numpy to solve the problem, but it seems likely numpy will have something that makes it EASIER to solve it.
[01:12:33] <YakoYoku> At least the issue was caught BtbN :D
[01:12:56] *** Quits: mnabid_ (uid448607@id-448607.lymington.irccloud.com) ()
[01:13:02] <BtbN> What confuses me the most is... numpy is supposed to be ABI backwards compat
[01:13:14] *** Joins: test__ (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[01:13:21] <BtbN> So something built against an older version is supposed to work just fine on any later version
[01:13:27] *** Joins: dharrigan (~dharrigan@user/dharrigan)
[01:13:29] *** Quits: Guest3367 (~vit@chello085216193138.chello.sk) (Ping timeout: 256 seconds)
[01:13:35] *** Joins: mnabid (uid448607@user/mnabid)
[01:13:55] <YakoYoku> Is it possible to patch the least number of modules in the `py-project.toml` to have matching versions?
[01:14:13] <BtbN> probably, but I'd rather not.
[01:14:17] <BtbN> _something_ is very broken
[01:14:27] <BtbN> That pyproj.toml probably isn't
[01:15:30] <YakoYoku> You could identify the packages that are revdeps of NumPy and see if an issue can be filled from this
[01:15:39] *** Joins: ice9 (~ice9@user/ice9)
[01:16:01] <Xano> Yhg1s, Except that the class implements __get__() and returns instance-specific decorated versions of these methods. I can handle the pickling bit in the class and prevent the methods from being included, but then the method decorator maystill set up unnecessary data...
[01:16:10] *** Joins: flooded (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[01:16:15] *** Joins: matsaman (~matsaman@user/matsaman)
[01:16:18] <Xano> Maybe if I can make the decorator lazy it'll work. Back to the workshop!
[01:16:19] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Ping timeout: 256 seconds)
[01:16:48] *** Quits: willow (~willow@user/willow) (Quit: willow)
[01:17:10] *** Quits: kts (~kts@103.73.237.74) (Quit: Konversation terminated!)
[01:18:05] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 268 seconds)
[01:18:27] *** Quits: test__ (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Ping timeout: 256 seconds)
[01:18:31] *** Quits: yaf_lit1222 (~yaf_lit12@p5deec34b.dip0.t-ipconnect.de) (Quit: Client closed)
[01:19:01] *** Quits: Guest12112 (~Guest1211@p5deec34b.dip0.t-ipconnect.de) (Quit: Client closed)
[01:20:29] *** Quits: pmb (~pmb@89-64-79-51.dynamic.chello.pl) (Quit: pmb)
[01:21:29] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[01:21:35] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Client Quit)
[01:21:49] <toma> numpy
[01:21:51] <toma> oops
[01:21:53] <Yhg1s> Xano: the *class*'s __get__ isn't called when you access methods on it. Do you mean __getattribute__? Or do you mean the methods aren't methods, but callables that define their own __get__? (The methods' __get__ getting called is how they become methods, that's what the function object's __get__ is for.)
[01:22:36] <toma> TML: thanks
[01:22:50] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d550-b607-3a0a-ff7b.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[01:25:03] *** Joins: yolo (~xxiao@li1120-73.members.linode.com)
[01:28:33] <Xano> Yhg1s, My bad. The method decorator makes it a descriptor which takes the original function, and returns it decorated
[01:28:40] <Xano> There's a few layers
[01:29:20] *** Quits: moose (~moose@user/moose) (Quit: Leaving)
[01:29:57] *** Quits: srhm (~srhm@user/srhm) (Ping timeout: 240 seconds)
[01:30:52] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[01:31:29] *** Ellenor is now known as Reinhilde
[01:35:46] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[01:37:44] *** Joins: arjun (~textual@c-24-130-140-187.hsd1.ca.comcast.net)
[01:37:51] *** Quits: jay-m1261 (~jay-m@41.205.30.141) (Ping timeout: 256 seconds)
[01:38:02] *** Quits: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c) (Quit: Leaving)
[01:38:10] *** Joins: jay-m1261 (~jay-m@41.205.30.141)
[01:38:27] <Swayze> https://browsix.org/
[01:38:34] <Swayze> seen this cool?
[01:39:22] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[01:39:37] *** Quits: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl) (Ping timeout: 240 seconds)
[01:39:59] *** Joins: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl)
[01:40:37] *** Quits: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net) (Ping timeout: 240 seconds)
[01:40:43] *** Quits: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com) (Remote host closed the connection)
[01:41:00] *** Joins: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com)
[01:41:01] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[01:41:01] *** Quits: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) (Quit: Leaving.)
[01:42:55] *** Quits: wedof (~wedof@2a02:810c:80:1eb0:1f1:ebe8:8402:8f63) (Remote host closed the connection)
[01:43:22] *** Joins: fikran (~fikran@user/fikran)
[01:44:49] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[01:44:50] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[01:45:14] <mat001_> In the .../bin dir of my virtualenv, created by pipenv, I have these python binaries: python, python3, python3.9. pipenv --py gives me "/virtualenvs/python-sdk-kPm-EHD0/bin/python". Which python is this? Could it be py 2?
[01:45:36] <grym> mat001_: in a venv, python _always_ means "the version of the interpreter used to create this venv"
[01:45:43] <grym> in your exapython
[01:45:55] <grym> in your example, python and python3 and python3.9 are the same file
[01:45:57] <Yhg1s> mat001_: all of those are the same python.
[01:46:01] <grym> or, point to the same place
[01:46:12] <grym> (exapython?!)
[01:46:56] <grym> mat001_: `ls -al /virtualenvs/python-sdk-kPm-EHD0/bin/` will probably show you that most of those are symlinks
[01:47:31] <mat001_> grym: yeah, I created venv with pipenv install --python 3.9. BUT I'm asking because flake8 gives me E999 error: E999 SyntaxError: invalid syntax when I run it against requirements file. SO shows that's when you run the code with Py2 and lint with Py3. So I thought I might have been running my code with Py2. But looks like I am actually runing it with Py3.
[01:47:37] <mat001_> So where is E999 SyntaxError: invalid syntax coming from/
[01:47:48] <grym> mat001_: those usually come with line numbers
[01:47:54] <grym> sometimes it's the line _after_ the problem
[01:47:57] <mat001_> ?? Line numbers?
[01:48:10] <grym> syntax errors have line numbers on 'em often
[01:48:12] <ChrisWarrick> mat001_: show your code and full traceback
[01:48:15] <Yhg1s> mat001_: can you show how you're running flake8 and the output you get?
[01:48:40] <grym> mat001_: and which flake8 this is
[01:48:45] *** Quits: Jimmy2027 (~hendrik@2001:1620:2018:38:dde3:1b0f:dc57:eb0f) (Quit: WeeChat 3.3)
[01:49:26] <mat001_> Here this is what I do: https://bpa.st/FEOA
[01:49:56] <lantech19446> i'm looking at some documentation for beautifulsoup4 and at the part where I pass the page off to the parser I only see that I can open a file not a url, is this true?
[01:49:59] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d550-b607-3a0a-ff7b.res6.spectrum.com)
[01:50:06] <mat001_> I use flake8 >= 3.6.0. INstalled flake8 is the latest
[01:50:37] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 240 seconds)
[01:50:49] <The-Compiler> lantech19446: yes, you would use something specialized on downloading things for that part, like requests
[01:51:28] <mat001_> grym: ChrisWarrick Yhg1s I'm running flake8 on this file: https://github.com/optimizely/python-sdk/blob/master/requirements/core.txt
[01:51:54] <ChrisWarrick> uh, flake8 works on python files only
[01:51:55] <grym> well, i agree that's not valid python ...
[01:51:59] <lantech19446> ok
[01:52:09] <grym> flake isn't wrong
[01:52:21] <mat001_> ahh, so I should be runing flake8 only on .py files?
[01:52:38] <Yhg1s> mat001_: well, yes. That's what it's for.
[01:52:56] <mat001_> make sense...requirement files are txt files
[01:53:48] <mat001_> thx for clarifying. momentarily forgot and ran flake on a txt file
[01:54:17] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[01:54:46] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[01:55:51] *** Quits: trace987 (~trace@dynamic-002-247-248-171.2.247.pool.telefonica.de) (Ping timeout: 256 seconds)
[01:56:04] *** Joins: jfcaron (~jfcaron@192.252.229.171)
[01:56:04] *** Joins: gerrit (~gerrit@c-68-62-193-246.hsd1.fl.comcast.net)
[01:56:30] <gerrit> .
[01:56:31] <jfcaron> Is there a clean & clever way to check if a number survives round-tripping through my string conversion function?
[01:56:48] *** gerrit is now known as novapy
[01:56:56] <c4017w> not strictly a python question: in graphvis is is possible to have a fixed width, but let the height expand to fit the label?
[01:57:04] <Yhg1s> jfcaron: well, the usual way would be to roundtrip it through that function...
[01:57:37] *** Quits: Helle (~helle@45.83.235.185) (Ping timeout: 240 seconds)
[01:57:51] <dba> it it possible to run a pytest tests with debugging mode?
[01:57:58] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[01:58:09] <grym> dba: yes
[01:58:32] <jfcaron> @Yhg1s I guess I'm overthinking it
[01:58:56] <grym> dba: pycharm makes this _very_ easy to do; i'm sure you can do it with other tools
[01:58:57] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[01:58:59] *** Joins: Guest138 (~Guest138@88.103.7.38)
[01:59:33] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[02:00:49] <dba> grym: I am using pycharm and getting. a bunch of errors, I might be doing it wrong. when I run pytest in terminal all test run successful in pycharm when I click in debug I get a lot of errors
[02:01:26] <grym> dba: do you have a bunch of envvars
[02:01:30] <grym> that your thing needs
[02:02:02] *** Joins: moose (~moose@user/moose)
[02:02:12] *** Quits: arjun (~textual@c-24-130-140-187.hsd1.ca.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[02:02:17] <dba> grym: the amount of error is brain melting right now. I  am still trying to figure it out. How do you usually do the debugging?
[02:02:20] *** Joins: hyiltiz (~quassel@31.220.5.250)
[02:02:28] <grym> dba: you could start by answering my question
[02:03:01] <dba> grym: only 3 not sure if that would be a bunch
[02:03:11] <grym> dba: your pycharm run configuration doesn't set them
[02:03:17] <grym> until you explicitly add them there
[02:03:20] <grym> so i would do that, and try again
[02:03:43] <grym> (your shell, though, sees them just fine!  you can tell because your tests pass)
[02:03:56] *** Quits: novapy (~gerrit@c-68-62-193-246.hsd1.fl.comcast.net) (Quit: leaving)
[02:03:57] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[02:04:18] <dba> grym: Thanks, I will fix that and get back to you
[02:04:37] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 240 seconds)
[02:04:44] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[02:05:08] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.3)
[02:07:33] *** Joins: novapy (~gerrit@c-68-62-193-246.hsd1.fl.comcast.net)
[02:08:40] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:dc71:98a8:e8a4:d876) (Remote host closed the connection)
[02:08:53] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[02:08:57] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[02:09:01] *** Quits: Guest1998 (uid531611@id-531611.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[02:09:03] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:acd5:fce0:a19c:de74)
[02:09:12] <dba> grym: Worked like a charm, thank you very much :)
[02:09:44] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[02:09:51] *** Quits: natewrench123456 (~joshu@cpe-72-228-153-194.buffalo.res.rr.com) (Quit: Leaving)
[02:10:06] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[02:10:09] *** Joins: plastico (~plastico@neomutt/plastico)
[02:10:25] <grym> cheers!
[02:10:41] <grym> the direnv plugin works again now, by the way
[02:10:42] <grym> phew
[02:11:05] <grym> https://plugins.jetbrains.com/plugin/15285-direnv-integration
[02:11:09] *** Quits: hyiltiz (~quassel@31.220.5.250) (Ping timeout: 256 seconds)
[02:11:22] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[02:12:25] *** Quits: strugee (~strugee@ool-4575d6b1.dyn.optonline.net) (Ping timeout: 256 seconds)
[02:12:51] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 256 seconds)
[02:14:04] *** Quits: toma (~RubbishPu@node-1w7jr9yhpl48arnvdwbzy5v8f.ipv6.telus.net) (Quit: Leaving)
[02:14:21] *** Joins: strugee_ (~strugee@ool-4575d6b1.dyn.optonline.net)
[02:15:02] *** Quits: dthpulse (~quassel@podciarou.sk) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:15:07] *** Quits: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl) (Ping timeout: 256 seconds)
[02:15:08] *** Joins: hyiltiz (~quassel@31.220.5.250)
[02:15:45] *** Joins: dthpulse (~quassel@podciarou.sk)
[02:18:31] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[02:19:19] *** Quits: Narrat (~omnius@p200300df5f0aabe806ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[02:19:54] *** Joins: Barones (~Barones@2804:7f3:8989:5535:3bc4:4610:62ad:ecf2)
[02:19:57] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:9c74:da2:a180:c153)
[02:19:57] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:9c74:da2:a180:c153) (Changing host)
[02:19:57] *** Joins: skapata (~Skapata@user/skapata)
[02:20:54] *** Quits: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani) (Ping timeout: 276 seconds)
[02:22:03] *** Quits: remote (~self@user/hackers) (Ping timeout: 256 seconds)
[02:25:16] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[02:25:27] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 256 seconds)
[02:26:17] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 240 seconds)
[02:26:33] *** Quits: palasso (~palasso@user/palasso) (Read error: Connection reset by peer)
[02:28:36] <dba> grym, I am wondering if debugging async and sync code should be treated the same
[02:28:44] *** Quits: pyevery__ (~pyeveryth@64-18-153-56.starry-inc.net) (Remote host closed the connection)
[02:29:51] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[02:29:52] <dba> grym, the reason I am asking is because is the  debugger stops on the sync function but it doesnt on the async ones
[02:30:16] *** Quits: blcyber (~blcyber@216.74.235.178) (Read error: Connection reset by peer)
[02:32:58] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[02:33:08] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:33:25] *** Quits: Guest138 (~Guest138@88.103.7.38) (Quit: Client closed)
[02:33:37] *** Quits: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com) (Quit: ThePhilgrim)
[02:33:43] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Client Quit)
[02:33:57] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[02:34:21] *** Joins: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com)
[02:37:21] *** Quits: LucaTM (~LucaTM@user/lucatm) (Ping timeout: 256 seconds)
[02:39:29] *** Quits: ali1234 (~al@user/ali1234) (Ping timeout: 268 seconds)
[02:40:35] *** Joins: ali1234 (~al@user/ali1234)
[02:41:43] *** Joins: zeden (~zeden@user/zeden)
[02:46:37] *** Quits: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 240 seconds)
[02:46:47] *** Joins: alm903 (~alm@213.147.110.20)
[02:47:18] *** Joins: scruz (~scruz@41.58.54.15)
[02:47:41] *** Quits: alm903 (~alm@213.147.110.20) (Quit: Leaving)
[02:48:03] *** Parts: denisse (~denisse@gateway/tor-sasl/denisse) (WeeChat 3.4)
[02:48:27] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[02:48:37] *** Quits: jpic (~jpic@82.142.31.114) (Ping timeout: 240 seconds)
[02:48:53] <jfcaron> With flake8, can I disable a specific error code for an entire file with a comment?  The manual says I can disable a specific code on a single line, with # noqa: E333,  or disable all codes in an entire file with # flake8: noqa, but I want to do like # flake8: noqa: E333.
[02:49:49] *** Quits: analoq (~yashi@user/dies) (Ping timeout: 240 seconds)
[02:50:01] *** Quits: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com) (Quit: ThePhilgrim)
[02:50:15] *** Quits: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net) (Ping timeout: 256 seconds)
[02:50:20] *** Joins: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com)
[02:50:35] *** Joins: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net)
[02:50:43] <grym> dba: maybe.  i don't do a lot of async
[02:50:51] *** Joins: jpic (~jpic@82.142.9.130)
[02:50:56] <scruz> creating a flask + gunicorn + sqlalchemy (postgres) app. would i still need to manually run gevent's monkey patch, and would i need to use psycogreen?
[02:51:36] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[02:51:46] <scruz> trying to determine where to run the patching code
[02:51:51] *** Joins: analoq (~yashi@user/dies)
[02:52:15] *** Quits: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com) (Client Quit)
[02:52:17] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 240 seconds)
[02:52:35] *** Joins: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com)
[02:53:03] *** Joins: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net)
[02:53:34] *** Joins: Gerula (~Gerula@user/gerula)
[02:53:41] *** Joins: hightower2 (~hightower@213.147.110.20)
[02:54:11] <hightower2> Hey is there an even shorter way to compare two arrays and return indexes of elements which are not the same in both arrays?ghtower5 ( The shortest I found is:
[02:54:36] <hightower2> [ i for i in range(0,len(a)) if a[i] != b[i] ]
[02:55:38] *** Quits: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com) (Client Quit)
[02:55:43] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-4582-2b8f-5a63-0567.res6.spectrum.com) (Read error: Connection reset by peer)
[02:55:59] *** Joins: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com)
[02:56:20] <SnoopJ> hightower2, `[idx for idx, (a,b) in enumerate(zip(a, b)) if a != b]` is a spelling that works on a,b that can't have len() called on them
[02:56:35] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[02:56:35] *** Quits: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com) (Client Quit)
[02:56:52] *** Joins: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com)
[02:56:52] <grym> sniiiiped haha i even used a and b as the names
[02:57:06] <grym> (but i, not idx)
[02:57:21] *** Joins: notjohannes (~johannes@2001:7e8:f651:4d01:3721:be4f:554c:18ab)
[02:57:50] <hightower2> nice side tip, thanks.
[02:57:51] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Read error: Connection reset by peer)
[02:59:12] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:59:37] *** Joins: rolo (~rolo@2a02:8108:8d80:7aa4:ad5b:6302:a0f4:f322)
[02:59:49] <TML> hightower2: [ idx for idx,val in enumerate(a) if val != b[idx] ] # I prefer enumerate() to range()
[03:00:18] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[03:00:28] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[03:00:32] *** Joins: atrigent_ (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net)
[03:00:35] <hightower2> ah yes, well the reason why I used that form is because I wanted to make it very visible that the comparison was between a[i] and b[i]
[03:00:45] <hightower2> which is somewhat hidden if you do val != b[i]
[03:00:50] *** Joins: walterwhip (~www@user/walterwhip)
[03:01:09] <TML> well, you could still do a[idx] != b[idx]
[03:01:14] <hightower2> maybe `val` can be named `ai` so we have ... if ai != b[i]  :-)
[03:01:29] <TML> still looks better to use enumerate(), IMO
[03:01:30] <hightower2> yeah, good tip, I too like enumerate more
[03:01:35] *** Quits: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net) (Ping timeout: 256 seconds)
[03:01:42] *** Quits: rolo (~rolo@2a02:8108:8d80:7aa4:ad5b:6302:a0f4:f322) (Client Quit)
[03:01:45] <matsaman> I think just using enumerate instead of range with what hightower2 already had
[03:01:53] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[03:01:59] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[03:02:09] <hightower2> ok, great, thanks for the discussion folks.
[03:02:10] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[03:02:14] *** Quits: beli6147 (~Thunderbi@174.128.60.162) (Quit: beli6147)
[03:02:32] <matsaman> [v for i,v in enumerate(a) if v != b[i]]
[03:02:50] <han-`> you're ok assuming they have the same length?
[03:02:56] <hightower2> yes, they always have
[03:02:56] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Quit: beastDivision)
[03:03:16] <matsaman> like, four chars shorter, but easier to read, if you know enumerate
[03:03:19] <SnoopJ> yea that's the one gotcha with enumerating just one of them. zip() just stops when one of them runs out
[03:03:22] *** Quits: notjohannes (~johannes@2001:7e8:f651:4d01:3721:be4f:554c:18ab) (Quit: See you later!)
[03:03:22] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[03:03:33] <matsaman> mmm
[03:03:44] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[03:04:52] *** Quits: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com) (Quit: ThePhilgrim)
[03:04:54] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[03:05:05] <TML> SnoopJ: Interesting - I never thought about that side-effect of zip()
[03:05:11] *** Joins: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com)
[03:06:02] <grym> TML: there's a PEP for that now
[03:06:07] <SnoopJ> TML, well it's not really a side effect, but it's a gotcha of its own form. It's why 3.10 introduces `strict`
[03:06:13] <grym> (and otherwise, itertools.zip_longest(*args, default=)
[03:06:14] *** Joins: Guest138 (~Guest138@88.103.7.38)
[03:06:39] <grym> er, fillvalue=
[03:06:40] <SnoopJ> `zip(a, b, strict=True)` will raise a ValueError if they don't terminate at the same place, which is handy
[03:06:53] <grym> ^ yeah i'm a fan and i've never even used it!
[03:06:57] <grym> it's just a good idea
[03:06:59] <SnoopJ> assuming you're using 3.10+ anyway :)
[03:07:59] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:08:04] *** Quits: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com) (Client Quit)
[03:08:57] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[03:09:28] *** Joins: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com)
[03:09:39] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[03:10:20] *** Quits: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com) (Client Quit)
[03:10:40] *** Joins: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com)
[03:11:02] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[03:12:14] *** Quits: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com) (Client Quit)
[03:12:54] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[03:13:53] <BtbN> YakoYoku, I think I found it. cftime (and probably a bunch of other packages) download numpy as build-time dependency. And they just default to the latest version. So they grab 1.22, but the final env has 1.21, because something depends on <1.22.
[03:14:24] *** kmhkmh is now known as kmh
[03:14:43] <BtbN> So the actual trigger for breaking this was the release of numpy 1.22
[03:15:37] <BtbN> So basically... I need a way to prevent anything from pulling a too recent numpy as build dep
[03:16:15] <BtbN> And https://github.com/Unidata/cftime/blob/master/pyproject.toml should probably have the oldest-supported-numpy thingy
[03:16:32] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[03:17:03] *** Joins: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com)
[03:17:25] *** Quits: Sargento (uid523534@wikipedia/Sargento-de-Hierro) (Quit: Connection closed for inactivity)
[03:17:35] *** Quits: nicode (~nic@69-165-153-180.dsl.teksavvy.com) (Ping timeout: 256 seconds)
[03:17:57] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Quit: bbiab)
[03:18:54] *** Joins: Sargento (uid523534@wikipedia/Sargento-de-Hierro)
[03:18:58] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Remote host closed the connection)
[03:18:58] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[03:19:11] *** Joins: earendel (uid498179@user/earendel)
[03:19:18] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[03:19:22] *** Joins: pyevery__ (~pyeveryth@64-18-153-56.starry-inc.net)
[03:19:23] *** Joins: ano (~ano@user/ano)
[03:19:34] *** Quits: Reign (~Username@ip98-161-226-10.ph.ph.cox.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:20:06] *** Quits: dsrt^ (~dsrt@207.5.21.20) (Read error: Connection reset by peer)
[03:22:05] *** Joins: vicfred (~vicfred@user/vicfred)
[03:23:37] *** Quits: rakoon_ (~rakoon@2001:985:f4c6:1:923c:872:b519:2de6) (Ping timeout: 240 seconds)
[03:24:58] *** Quits: nyah (~nyah@2a02:c7f:6ea4:ec00:55b7:77f:4ccb:c03c) (Remote host closed the connection)
[03:25:06] <YakoYoku> I don't know if `py-project.toml` can pipe down NumPy 1.21.0, although I hope that the next versions of the modules fix the issue
[03:25:33] *** Quits: DaNeenjah (~jake@adsl-74-230-4-35.hsv.bellsouth.net) (Quit: WeeChat 3.4)
[03:25:37] *** Quits: pyevery__ (~pyeveryth@64-18-153-56.starry-inc.net) (Ping timeout: 240 seconds)
[03:25:49] *** Joins: nyah (~nyah@94.6.71.219)
[03:26:21] <SnoopJ> YakoYoku, "pipe down" as in "don't install that one?"
[03:27:30] <YakoYoku> More of a "pin this version to the dependencies"
[03:27:46] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[03:28:11] <SnoopJ> not sure I know what that means, but you can express a good deal of specificity with requirements
[03:29:40] *** Quits: miique_ (~miique@181.46.139.166) (Read error: Connection reset by peer)
[03:29:47] <SnoopJ> `numpy!=1.21.0` would be what I was thinking of
[03:29:55] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:31:31] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: see you on the flip-side)
[03:31:47] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aÐ»Ð»Ð¸Ð»Ñ¹Ñ–Ð°!)
[03:32:26] *** Joins: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani)
[03:33:27] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[03:33:27] *** Quits: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec) (Ping timeout: 256 seconds)
[03:35:03] <BtbN> YakoYoku, I think the only sane thing to fix this is to make sure everything uses the absolute minimum version of numpy as its build-time dep
[03:35:16] *** Joins: Harlin_ (~DonQixote@75-163-135-150.clsp.qwest.net)
[03:35:17] <BtbN> everything else has potential ways to install it in a broken way
[03:35:27] <BtbN> I submitted a PR to cftime to do so
[03:35:42] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[03:35:59] *** Quits: Harlin (~DonQixote@75-163-135-150.clsp.qwest.net) (Remote host closed the connection)
[03:39:26] *** Quits: onichomp (~onichomp@2806:264:4404:809c:6189:925c:3bc:983e) (Read error: Connection reset by peer)
[03:40:04] *** Joins: onichomp (~onichomp@2806:264:4404:809c:6189:925c:3bc:983e)
[03:40:16] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[03:41:45] *** Joins: jonthesnow (~xizhendu@36.112.179.225)
[03:42:14] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[03:42:57] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[03:43:37] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::3) (Ping timeout: 240 seconds)
[03:44:47] *** Quits: hightower2 (~hightower@213.147.110.20) (Ping timeout: 256 seconds)
[03:45:20] *** Joins: miique (~miique@181.46.139.166)
[03:48:54] <mat001_> Is there a way to find dependecy versions for a particulat PyPy version?
[03:49:47] <mat001_> Dealing with a dependecy nightmare. PyPy3 fails on jsonschema while other Py versions pass. U guys know of a place to check versions od deopendent libs?
[03:49:53] *** Quits: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com) (Quit: ThePhilgrim)
[03:50:15] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-165.dsl.bell.ca)
[03:50:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[03:51:07] <mat001_> for example PyPy3.7 requires jspnschema lib >= xyz and >= mkn
[03:51:43] <nedbat> mat001_: how does it fail?
[03:52:00] <nedbat> mat001_: i don't know of a way to get the info you're asking about.
[03:52:44] *** Joins: fikran (~fikran@user/fikran)
[03:52:49] <mat001_> nedbat: ModuleNotFoundError: No module named 'jsonschema'. .... I specify the latest jsonschema lib and unit tests on Travis CI pass for Py 3.7-3-9. But fail on PyPy3 with this error
[03:53:07] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[03:53:26] *** Quits: onichomp (~onichomp@2806:264:4404:809c:6189:925c:3bc:983e) (Read error: Connection reset by peer)
[03:53:39] <mat001_> I suspect it's because PyP3 version 3.7 doesn't work with the latest jsonschema version. Which begs the question....is there a place to find which version works with what
[03:54:04] *** Joins: onichomp (~onichomp@2806:264:4404:809c:6189:925c:3bc:983e)
[03:54:16] *** Joins: cthulchu (~Cthulchu@184-090-172-137.res.spectrum.com)
[03:54:39] <nedbat> mat001_: if the error is module not found, then it's because the module isn't installed.  do you have the installation output? Does it show that jsonschema was installed?
[03:54:50] <mat001_> let me check
[03:55:14] <nedbat> mat001_: if it wasn't installed because of a version incompatibility, the installation should have failed.
[03:57:20] <mat001_> nedbat: hmmm, strange. Looks like it downloaded and installed jsonschema: https://app.travis-ci.com/github/optimizely/python-sdk/jobs/554613619#L202
[03:58:32] *** Quits: stockholm (~Andreas@p200300d2c70d1300d06856d6433dfbdd.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[03:59:00] <mat001_> oh, I see a actual error in travis build output: ERROR: Could not build wheels for cryptography which use PEP 517 and cannot be installed directly
[03:59:36] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[03:59:56] *** Joins: mixfix41 (~homefame@user/mixfix41)
[03:59:56] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[04:00:10] <mat001_> so the problem seems to be with crypto lib
[04:03:21] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 256 seconds)
[04:03:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:03:57] *** Quits: brookesy66 (~will@220-244-51-67.tpgi.com.au) (Quit: WeeChat 3.4)
[04:04:03] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[04:04:58] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Client Quit)
[04:05:00] *** Joins: Wulf (~Wulf@user/wulf)
[04:05:02] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[04:05:05] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d550-b607-3a0a-ff7b.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[04:08:20] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d550-b607-3a0a-ff7b.res6.spectrum.com)
[04:11:47] <bancroft> hmm, i've installed pytest with pyenv inside of docker (don't ask). using pip (which pip reveals /root/.pyenv/shims/pip) I see it in /root/.pyenv/versions/3.9.9/lib/python3.9/site-packages/pytest but pytest alone doesn't do anything which pytest says command not found so ... where is pytest if its installed?
[04:13:32] *** Joins: pyevery__ (~pyeveryth@64-18-153-56.starry-inc.net)
[04:13:40] <grym> bancroft: `whence pytest`
[04:13:41] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[04:13:48] <SnoopJ> bancroft, try `pyenv which pip` if you want to see where the shim is going with your current configuration.
[04:13:59] *** Joins: rexbinary_ (~rexbinary@user/rexbinary)
[04:14:27] *** Joins: doko_ (~doko@2a02:8106:1a:7600:eaa4:7375:e22f:34bf)
[04:14:29] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.4)
[04:14:43] <SnoopJ> this is a big part of why I like `python3 -m pip` so much, I just dislike having to think about `python3` and `pip` and worry about them getting disconnected.
[04:14:49] *** Quits: rexbinary (~rexbinary@user/rexbinary) (Ping timeout: 256 seconds)
[04:14:50] *** rexbinary_ is now known as rexbinary
[04:14:53] <bancroft> SnoopJ: https://bpa.st/I6AQ
[04:15:32] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 240 seconds)
[04:15:49] *** Quits: doko (~doko@2a02:8106:1a:7600:c6b2:f081:cad7:3f8a) (Ping timeout: 240 seconds)
[04:16:01] *** Quits: pyevery__ (~pyeveryth@64-18-153-56.starry-inc.net) (Remote host closed the connection)
[04:16:50] *** Sargento is now known as aaaa
[04:16:54] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:b886:576b:fff3:ea07) (Quit: Client closed)
[04:17:00] *** aaaa is now known as Sargento
[04:17:12] *** Sargento is now known as aaaa
[04:17:18] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Remote host closed the connection)
[04:17:21] *** aaaa is now known as Sargento
[04:18:27] <SnoopJ> bancroft, does `python3 -m pytest` invoke it?
[04:18:46] <bancroft> SnoopJ: it does! What, where is it damn
[04:19:42] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Read error: Connection reset by peer)
[04:20:27] <SnoopJ> bancroft, well, it's not in your PATH, but that's okay, `pytest` itself is just an entrypoint.
[04:21:02] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[04:21:18] <SnoopJ> I don't know under what circumstances it would not install the entrypoint, I'd be looking at a verbose output of the pip-install command if it didn't resolve after an uninstall/reinstall
[04:24:37] *** Quits: Xano (~Xano@2a00:23c4:4204:700:f056:3623:7d20:b653) (Ping timeout: 240 seconds)
[04:25:35] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[04:26:22] *** Joins: hightower2 (~hightower@213.147.110.20)
[04:26:56] *** Quits: onichomp (~onichomp@2806:264:4404:809c:6189:925c:3bc:983e) (Read error: Connection reset by peer)
[04:27:36] *** Joins: onichomp (~onichomp@2806:264:4404:809c:6189:925c:3bc:983e)
[04:28:26] *** Joins: foozle (~foozle@2001-b011-c040-16bf-72ab-bd94-41b9-3fd3.dynamic-ip6.hinet.net)
[04:29:04] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[04:29:13] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Remote host closed the connection)
[04:29:17] <SnoopJ> bancroft, if you can paste the result of `python3 -m pip install -vvv --force-reinstall pytest &> bancroft.log` that should at least mention if it's doing *anything* in a bin/ directory when installing pytest
[04:29:47] *** Parts: akk (~akk@174-28-122-47.albq.qwest.net) (+++)
[04:31:01] *** Joins: Macuser (~Macuser@2600:1003:b46d:81be:7813:297a:3b7d:daf2)
[04:31:02] <SnoopJ> I see this in my verbose log: `changing mode of /home/snoopjedi/.local/bin/pytest to 775`
[04:31:26] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:b886:576b:fff3:ea07)
[04:32:08] *** Joins: paulrf (~paulrf@92.119.19.59)
[04:32:57] *** Quits: marcello42 (~mp@2001:1a81:12d6:fe00:339f:db3c:2449:7044) (Ping timeout: 268 seconds)
[04:33:30] *** Quits: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani) (Ping timeout: 276 seconds)
[04:34:14] *** Joins: jamiejackson21 (~jamiejack@207.172.87.34)
[04:34:19] *** Joins: marcello42 (~mp@2001:1a81:12ec:f000:b283:2eaa:9318:3447)
[04:35:25] *** Quits: Ashubrry (~Ashubrry@184.69.89.188) (Ping timeout: 268 seconds)
[04:36:57] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 240 seconds)
[04:39:48] *** Quits: foozle (~foozle@2001-b011-c040-16bf-72ab-bd94-41b9-3fd3.dynamic-ip6.hinet.net) (Quit: Leaving)
[04:39:48] *** Quits: dudek (~dudek@185.150.236.156) (Quit: Leaving)
[04:42:01] *** Joins: nicode (~nic@2607:f2c0:9387:9c00:854b:558b:d90b:a242)
[04:43:18] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d550-b607-3a0a-ff7b.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[04:43:44] *** Joins: junebug (~junebug@2600:1700:3db0:2540:3e6e:e7bb:ded7:de0a)
[04:43:59] *** Quits: paulrf (~paulrf@92.119.19.59) (Quit: Leaving)
[04:45:37] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 240 seconds)
[04:46:26] *** Quits: Guest138 (~Guest138@88.103.7.38) (Ping timeout: 256 seconds)
[04:46:57] *** Joins: Elliria (~littlegir@cpe-66-24-84-219.stny.res.rr.com)
[04:48:08] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Remote host closed the connection)
[04:48:26] *** Quits: Donitz (~Donitz@88-115-149-215.elisa-laajakaista.fi) (Read error: Connection reset by peer)
[04:48:26] *** Quits: eastbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Remote host closed the connection)
[04:52:22] *** Joins: dfkfs (~dfkfs@178.49.152.42)
[04:53:00] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Ping timeout: 276 seconds)
[04:53:17] <dfkfs> how can I intersect two sets in 3 parts?
[04:53:54] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[04:53:58] *** Joins: Donitz (~Donitz@88-115-149-215.elisa-laajakaista.fi)
[04:54:01] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[04:54:05] <KirkMcDonald> dfkfs: Meaning, the elements unique to set A, the intersection, and the elements unique to set B?
[04:54:22] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[04:54:37] <dfkfs> yes
[04:54:45] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[04:54:48] <KirkMcDonald> dfkfs: A - B, A & B, B - A
[04:55:28] *** Joins: scoobydoo_ (~scooby@user/scoobydoo)
[04:56:22] <c4017w> TIL you don't have to use .difference() and .intersect()
[04:56:37] *** Quits: wuji (~user@99-5-243-46.lightspeed.rcsntx.sbcglobal.net) (Ping timeout: 240 seconds)
[04:56:46] <dfkfs> i see
[04:57:11] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 256 seconds)
[04:57:21] *** scoobydoo_ is now known as scoobydoo
[04:58:14] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[04:58:32] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[04:58:38] <dfkfs> in python3, exit() in sys module now o_O
[04:58:51] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[04:58:56] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[04:59:06] <KirkMcDonald> Always was.
[04:59:11] <SnoopJ> yep, even in 2.x
[04:59:46] <dfkfs> that's weird, never had to import it
[05:00:10] <KirkMcDonald> There is also the `exit` in the builtin namespace, which exists for the benefit of the interactive interpreter.
[05:00:27] <KirkMcDonald> Which is added by the `site` module and should not be used in general code.
[05:00:43] *** Quits: walterwhip (~www@user/walterwhip) (Quit: Textual IRC Client: www.textualapp.com)
[05:00:54] <KirkMcDonald> https://docs.python.org/3/library/constants.html#constants-added-by-the-site-module
[05:00:56] <SnoopJ> surprise, the environment you get when you're in the REPL is quite special :)
[05:00:58] *** Joins: smirker (~smirker@121.32.99.114)
[05:02:25] *** Quits: nilson (~nilson@98.242.70.179) (Ping timeout: 256 seconds)
[05:02:50] <KirkMcDonald> The `site` does a lot of the configuration of the import path, and it can be suppressed if your Python is running in something other than a typical environment.
[05:02:56] <KirkMcDonald> The `site` module*
[05:03:12] <KirkMcDonald> In which case the constants that it adds will not be available.
[05:03:33] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[05:04:09] *** Quits: JordiGH (~jordi@user/jordigh) (Remote host closed the connection)
[05:05:19] *** Joins: wuji (~user@99-5-243-46.lightspeed.rcsntx.sbcglobal.net)
[05:05:42] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[05:06:30] *** Joins: nilson (~nilson@98.242.69.194)
[05:07:07] *** Joins: odoood (~odoood@2601:c8:c000:c4e0:ba27:5388:26bd:1fb0)
[05:07:15] *** Quits: zeden (~zeden@user/zeden) (Remote host closed the connection)
[05:07:16] *** Joins: kafka (~kafka@user/kafka)
[05:08:11] *** Quits: kafka (~kafka@user/kafka) (Client Quit)
[05:08:21] *** Joins: kafka (~kafka@user/kafka)
[05:08:25] *** Quits: kafka (~kafka@user/kafka) (Client Quit)
[05:09:10] *** Quits: smirker (~smirker@121.32.99.114) (Remote host closed the connection)
[05:12:09] *** Joins: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani)
[05:13:45] *** Quits: MercilessDeth (~brad@136.49.59.177) (Quit: Konversation terminated!)
[05:13:45] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 256 seconds)
[05:13:57] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[05:14:37] *** Quits: Elliria (~littlegir@cpe-66-24-84-219.stny.res.rr.com) (Quit: *POOF*)
[05:15:19] *** Quits: junebug (~junebug@2600:1700:3db0:2540:3e6e:e7bb:ded7:de0a) (Quit: Leaving)
[05:17:58] *** Joins: parv (~quass@user/parv)
[05:19:25] *** Quits: wuji (~user@99-5-243-46.lightspeed.rcsntx.sbcglobal.net) (Ping timeout: 256 seconds)
[05:19:26] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[05:22:03] *** Joins: summersault (~summersau@179.221.251.36)
[05:22:05] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[05:26:16] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[05:26:36] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[05:27:58] *** Joins: jazzy (~jaziz@user/jaziz)
[05:28:29] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Ping timeout: 256 seconds)
[05:29:20] *** Joins: yuesbeez (uid458354@id-458354.tinside.irccloud.com)
[05:29:44] *** Joins: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec)
[05:30:19] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:30:27] *** Joins: MercilessDeth (~brad@136.49.59.177)
[05:30:32] *** Quits: bob_x2 (~bob_x@gateway/tor-sasl/bobx1/x-26457072) (Remote host closed the connection)
[05:30:52] *** Joins: bob_x2 (~bob_x@gateway/tor-sasl/bobx1/x-26457072)
[05:30:57] *** Quits: dfkfs (~dfkfs@178.49.152.42) (Quit: Client closed)
[05:31:03] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[05:31:18] <SamuelMarks> Are there any builtin types that implement `__matmul__`?
[05:32:48] <nedbat> no
[05:33:01] <SnoopJ> SamuelMarks, no, it was proposed for use by 3rd-parties: "No implementations of these methods are added to the builtin or standard library types." https://www.python.org/dev/peps/pep-0465/#specification
[05:33:03] *** Quits: txhc4life (~txhc4life@cpe-70-117-20-42.satx.res.rr.com) (Quit: ZNC 1.8.2 - https://znc.in)
[05:33:19] *** Quits: Naan (~naan@user/naan) (Read error: Connection reset by peer)
[05:33:21] *** Joins: txhc4life (~txhc4life@cpe-70-117-20-42.satx.res.rr.com)
[05:33:28] <SnoopJ> (and I assume no need for it has arisen since 3.5)
[05:34:06] <graingert[m]> Might be nice in an emaillib.Email("ham") @ "example.com"
[05:35:07] <graingert[m]> Ah I know an object that implements it
[05:35:17] *** Quits: odoood (~odoood@2601:c8:c000:c4e0:ba27:5388:26bd:1fb0) (Ping timeout: 240 seconds)
[05:35:22] <SnoopJ> in stdlib/builtins, or 3rd party?
[05:36:31] <SnoopJ> I've seen it used for a few different things by libraries. python-lenses makes use of for some sort of optics thing I've since forgotten
[05:36:54] <graingert[m]> stdlib
[05:36:59] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[05:37:11] <graingert[m]> But the implementation wasn't added
[05:37:15] <graingert[m]> It was already there
[05:37:33] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 256 seconds)
[05:38:25] <SnoopJ> ?
[05:40:19] <graingert[m]> SnoopJ: You'll kick yourself when you find out
[05:41:58] * sco1 waits anxiously
[05:42:09] <graingert[m]> You'll all kick yourselves
[05:42:18] <graingert[m]> Spend some time to ponder it
[05:42:24] *** Joins: ubert1 (~Thunderbi@p200300ecdf09947d3ce845fd45b74154.dip0.t-ipconnect.de)
[05:43:25] *** Quits: ubert (~Thunderbi@p200300ecdf0994dbb267d7c5a67baed4.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[05:43:25] *** ubert1 is now known as ubert
[05:44:30] *** Quits: summersault (~summersau@179.221.251.36) (Remote host closed the connection)
[05:44:47] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Ping timeout: 256 seconds)
[05:45:05] <graingert[m]> Think of an object in the stdlib that you could `o @ v`
[05:45:43] <graingert[m]> Or a class that could make an instance that can `o @ v`
[05:46:04] *** Quits: ba (~ba@cpc1-hari17-2-0-cust27.20-2.cable.virginm.net) (Ping timeout: 256 seconds)
[05:46:27] <sco1> There's only 4 instances of `def __matmul` and they're all tests
[05:46:34] <graingert[m]> Or what if you had some function that took a matrix and you wanted to assert that behavior
[05:46:35] <sco1> I dropped some __
[05:46:42] <graingert[m]> What object would you feed it?
[05:47:16] <graingert[m]> sco1: You're getting warmer
[05:47:53] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[05:47:58] *** Joins: califax- (~califax@user/califx)
[05:48:34] *** Joins: runciter (~runciter@user/runciter)
[05:49:22] *** Quits: runciter (~runciter@user/runciter) (Client Quit)
[05:49:22] *** Joins: brabrax_ (~brabrax@user/brabrax)
[05:49:33] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:49:34] *** califax- is now known as califax
[05:49:34] <SnoopJ> The only thing that comes to mind is the symbol's use for decorator syntax, sorry.
[05:50:10] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[05:50:17] *** Quits: parv (~quass@user/parv) (Ping timeout: 240 seconds)
[05:50:17] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 240 seconds)
[05:50:17] *** brabrax_ is now known as brabrax
[05:52:29] *** Joins: tWqaq (~tWqaq@240e:389:5d1c:ff00:bff1:a9f5:7f0b:7db6)
[05:54:37] <graingert[m]> If they made a new operator this class' instances would also support it
[05:54:46] <graingert[m]> * new operator in a new peo this class'
[05:55:26] <graingert[m]> * new operator in a new PEP this class'
[05:56:25] *** Joins: graingert (sid128301@id-128301.tinside.irccloud.com)
[05:57:37] *** Quits: nyah (~nyah@94.6.71.219) (Ping timeout: 240 seconds)
[05:57:39] <SnoopJ> I may not end up kicking myself at this rate
[05:58:07] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[05:58:46] *** Joins: rama_ (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[05:58:46] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Read error: Connection reset by peer)
[05:58:50] *** Joins: XxEdgarxX (~ben@user/XxEdgarxX)
[05:58:57] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[05:59:42] <graingert[m]> You'll feel cheated
[06:00:08] *** Quits: mgedmin (~mg@user/mgedmin) (Quit: ZNC - http://znc.sourceforge.net)
[06:00:13] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[06:02:05] *** Joins: fikran (~fikran@user/fikran)
[06:02:57] *** Quits: rama_ (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[06:03:45] *** Joins: mgedmin (~mg@user/mgedmin)
[06:04:35] *** Quits: hyiltiz (~quassel@31.220.5.250) (Quit: hyiltiz)
[06:06:27] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 276 seconds)
[06:10:37] *** Joins: odoood (~odoood@2601:c8:c000:c4e0::3)
[06:10:47] *** Joins: mugen (~mugen@gateway/tor-sasl/mugen)
[06:11:05] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:b886:576b:fff3:ea07) (Quit: Client closed)
[06:12:05] *** Quits: Barones (~Barones@2804:7f3:8989:5535:3bc4:4610:62ad:ecf2) (Quit: Leaving)
[06:12:37] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 240 seconds)
[06:12:57] *** Quits: mug3n_ (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 276 seconds)
[06:14:57] *** Quits: cdown (~cdown@163.114.131.1) (Ping timeout: 240 seconds)
[06:16:41] *** Joins: pyevery__ (~pyeveryth@64-18-153-56.starry-inc.net)
[06:18:21] *** Quits: XxEdgarxX (~ben@user/XxEdgarxX) (Ping timeout: 256 seconds)
[06:19:08] <SamuelMarks> SnoopJ - Thanks
[06:19:17] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 240 seconds)
[06:19:58] <SamuelMarks> graingert[m] - Wait so there is one? :P
[06:20:57] *** Quits: pyevery__ (~pyeveryth@64-18-153-56.starry-inc.net) (Ping timeout: 240 seconds)
[06:21:39] <SamuelMarks> With PEP572 can you have type annotations on them also?
[06:23:03] *** Quits: nomic (~nomic@185.198.243.165) (Quit: Leaving)
[06:25:10] <nedbat> SamuelMarks: there isn't one
[06:25:48] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d550-b607-3a0a-ff7b.res6.spectrum.com)
[06:26:07] <Repiphany>  
[06:26:27] *** Joins: theo1 (~theo@2600:1700:7c30:32b0::47)
[06:27:16] *** Parts: theo1 (~theo@2600:1700:7c30:32b0::47) ()
[06:27:28] *** Joins: hyiltiz (~quassel@31.220.5.250)
[06:28:00] *** Joins: XxEdgarxX (~ben@user/XxEdgarxX)
[06:29:17] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[06:30:35] *** Quits: nicko (~iClass@221.236.54.23) (Read error: Connection reset by peer)
[06:31:57] *** Quits: hyiltiz (~quassel@31.220.5.250) (Ping timeout: 256 seconds)
[06:32:05] *** Joins: nicko (~iClass@221.236.54.23)
[06:33:07] *** Joins: Vonter (~Vonter@user/vonter)
[06:34:23] *** Joins: hyiltiz (~quassel@31.220.5.250)
[06:35:22] *** Quits: Macuser (~Macuser@2600:1003:b46d:81be:7813:297a:3b7d:daf2) (Quit: Textual IRC Client: www.textualapp.com)
[06:37:47] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[06:38:26] *** Quits: onichomp (~onichomp@2806:264:4404:809c:6189:925c:3bc:983e) (Read error: Connection reset by peer)
[06:38:40] *** Quits: lethu (~lethu@user/lethu) (Quit: Leaving)
[06:39:04] *** Joins: onichomp (~onichomp@2806:264:4404:809c:6189:925c:3bc:983e)
[06:41:45] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:41:45] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[06:41:45] *** finn_elija is now known as FinnElija
[06:43:25] <bancroft> SnoopJ: awesome, so that really helped me figure out what needs to be added to the path. Thanks! It's actually obvious now, (/root/.pyenv/versions/${PYTHON_MAJOR}.${PYTHON_MINOR}.${PYTHON_PATCH}/bin) which makes sense. But when I install something like sqlite3 (apt install libsqlite3-dev) or even `python -m pip install pysqlite3` I get nothing ( No module named '_sqlite3' )
[06:43:28] *** Joins: frost (~frost@user/frost)
[06:44:59] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[06:45:27] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[06:45:49] <SnoopJ> bancroft, oh, so it's installing it in the version's bin/, but not actually exposing them to you? What version of pyenv is this?
[06:46:09] <SamuelMarks> nedbat - Good, that simplifies my parser
[06:46:18] <SnoopJ> presumably a newish version if it's in Docker
[06:46:20] <bancroft> pyenv 2.2.3
[06:46:41] *** Quits: hightower2 (~hightower@213.147.110.20) (Ping timeout: 256 seconds)
[06:47:00] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[06:47:20] <SnoopJ> bancroft, and the version that contains the entrypoint you want is active in your `pyenv versions` configuration?
[06:47:57] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d550-b607-3a0a-ff7b.res6.spectrum.com) (Ping timeout: 240 seconds)
[06:48:10] <bancroft> SnoopJ: not sure I understand the question, but what I did is I just added the path as an arg in the docker file and now I can just run pytest fixing the path environment variable
[06:48:12] <SnoopJ> oh, hrm, now wait a moment. the thing that's in *my* pyenv is talking about /usr/bin/python3. Maybe it's *mine* that is broken.
[06:48:39] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[06:50:29] *** Quits: mugen (~mugen@gateway/tor-sasl/mugen) (Remote host closed the connection)
[06:51:04] *** Joins: mugen (~mugen@gateway/tor-sasl/mugen)
[06:51:10] <SnoopJ> sorry, not in my pyenv. I was looking in another place
[06:53:24] <SamuelMarks> Is there a good test suite I can apply to my CST to make sure it doesn't hiccup?
[06:53:26] <SamuelMarks> (Python source)
[06:53:46] <SamuelMarks> I mean, I suppose I could trawl through CPythonâ€¦
[06:54:26] <bancroft> SamuelMarks: CST is...?
[06:54:51] <SamuelMarks> Concrete Syntax Tree
[06:55:38] <SamuelMarks> I'm writing a 1-dimension array variant for source code manipulation tied to the AST module, which is very (very) whitespace aware
[06:57:46] <bancroft> SamuelMarks: I'm not really familiar CSTs but maybe you're looking for something like hypothesis or maybe you want to try fuzzing the input https://github.com/jwilk/python-afl
[06:57:57] *** Quits: ExpiredKebab (~sgreadly@32.58.252.27.dyn.cust.vf.net.nz) (Quit: Textual IRC Client: www.textualapp.com)
[06:58:58] <bancroft> Is it because it will be in a production environment or?
[06:59:09] * SnoopJ would probably just write some tests 'a novo'
[07:00:14] <SamuelMarks> My latin sucks, but I assume au naturel SnoopJ :P
[07:00:23] <SnoopJ> de novo? new, specific to your parser
[07:00:45] <SamuelMarks> Ah yep, de novo Google told me the meaning of
[07:01:25] <SnoopJ> SamuelMarks, CPython doesn't really care about concrete syntax when it comes to whitespace, the language is pretty explicitly flexible about this. So you'll probably not find what you're looking for in CPython.
[07:01:37] <SamuelMarks> SnoopJ - Yeah that's what I've been going with thus far. - It's reasonably good at disambiguating, and it's two phases (scanner and parser) so it's much cleaner than first pass
[07:01:43] <SnoopJ> and even if you did, you are working on a much much more specific problem domain
[07:01:55] <SnoopJ> so you are probably a better judge of what is relevant to test to ensure operation of what you're building
[07:02:31] <SnoopJ> hypothesis could possibly be useful to "inflate" valid programs by adding whitespace in the places it's allowed, though
[07:02:59] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Ping timeout: 256 seconds)
[07:03:21] <SamuelMarks> SnoopJ - Basically I have a series of manipulations of the AST using the builtin `ast` module. Next I want to apply those modifications to the original source codeâ€¦ but without removing all the existing whitespace and comments
[07:03:24] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[07:03:55] <SnoopJ> SamuelMarks, I remember talking about this previously, and I am telling you that what you want is not something CPython really cares about
[07:04:21] <SnoopJ> because these syntax elements don't actually change program semantics, which is what it *does* care about
[07:04:32] <SamuelMarks> Which should be especially straightforward considering the only elements my manipulations touch are `Assign`, `AnnAssign`, the `.return` on `AsyncFunctionDef` and `FunctionDef` and the `Constant` or `Str` of a function/class (its docstring)
[07:05:15] *** Quits: derek_v (~derek_v@cpe-70-95-160-136.san.res.rr.com) (Ping timeout: 256 seconds)
[07:06:17] <SamuelMarks> SnoopJ - I walk the AST giving information about where each node is in the hierarchy to a `_location` attribute, then with my CST I just need to match that `_location` to its equivalent, and then replace that node with the unparsed AST node
[07:07:27] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[07:07:43] <SnoopJ> "unparsed AST node" sounds like a direct contradiction in terms, but I think I understand what you mean: you are interested in doing source-to-source transformations that preserve features that would be lost from the concrete to abstract trees.
[07:08:11] <SnoopJ> If there were a great test suite for testing your tool, your tool would probably be attached to the far side of them, and you wouldn't have had to write it.
[07:10:40] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[07:10:53] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[07:15:05] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[07:15:22] <SamuelMarks> mmmmmm good point
[07:15:50] *** Quits: mankoff (~quassel@c-67-183-220-189.hsd1.wa.comcast.net) (Quit: quit)
[07:15:57] <SamuelMarks> Also when I said "unparsed AST node" I meant literally the result of https://docs.python.org/3/library/ast.html#ast.unparse
[07:16:24] *** Joins: Guest138 (~Guest138@88.103.7.38)
[07:17:00] <SnoopJ> oh, that
[07:17:21] <SnoopJ> I thought you were talking about an AST node that hadn't been parsed, which sounds very silly
[07:17:38] <SnoopJ> (well, I guess you could just make nodes out of thin air if you were doing program synthesis from not-source)
[07:18:40] *** Joins: derek_v (~derek_v@cpe-70-95-160-136.san.res.rr.com)
[07:19:32] * SamuelMarks is just implementing `scope` list so that the CST nodes each know if they are under a function, class, or whatever. Once this works then the full workflow will be demonstrableâ€¦ will share :)
[07:21:41] *** Quits: XxEdgarxX (~ben@user/XxEdgarxX) (Ping timeout: 256 seconds)
[07:22:43] *** Joins: parv (~quass@user/parv)
[07:24:05] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[07:24:20] <SamuelMarks> Done!
[07:24:44] <SamuelMarks> Surprisingly simple impl :D
[07:25:39] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[07:25:57] *** Joins: adeliktas9 (~adeliktas@i59F5FD0A.versanet.de)
[07:26:15] *** Joins: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net)
[07:26:50] *** Joins: pyeveryt_ (~pyeveryth@64-18-153-56.starry-inc.net)
[07:26:52] *** Quits: pyeveryt_ (~pyeveryth@64-18-153-56.starry-inc.net) (Read error: Connection reset by peer)
[07:28:03] *** Quits: adeliktas (~adeliktas@i59F5F686.versanet.de) (Ping timeout: 256 seconds)
[07:28:04] *** adeliktas9 is now known as adeliktas
[07:29:41] <graingert[m]> <SamuelMarks> "graingert - Wait so there is one..." <- Yep
[07:30:01] *** Quits: haasn (~nand@haasn.dev) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[07:30:15] <SnoopJ> a closely guarded secret, evidently
[07:31:13] *** Joins: stblaha (~stblaha@user/stblaha)
[07:31:22] *** Joins: haasn (~nand@haasn.dev)
[07:33:37] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[07:34:20] *** Joins: XxEdgarxX (~ben@user/XxEdgarxX)
[07:35:09] *** Joins: SlaveGeek334269 (~SlaveGeek@gateway/vpn/pia/slavegeek334269)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:36:38] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[07:36:53] <SamuelMarks> graingert[m] - Share the mysteries of the universe
[07:37:16] <SamuelMarks> I'm guessing it'll be like mappingproxy object or memoryobject or whatever
[07:38:11] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[07:38:52] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Changing host)
[07:38:52] *** Joins: hqdruxn08 (~hqdruxn08@user/hqdruxn08)
[07:39:08] *** Quits: NoelFlantier3 (~Hubert@static.238.157.9.5.clients.your-server.de) (Read error: Connection reset by peer)
[07:39:30] *** Joins: NoelFlantier3 (~Hubert@static.238.157.9.5.clients.your-server.de)
[07:40:14] <graingert[m]> SamuelMarks: Close
[07:41:14] *** Joins: orbisvicis (~orbisvici@user/orbisvicis)
[07:41:39] *** Quits: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net) (Ping timeout: 256 seconds)
[07:43:10] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[07:43:28] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[07:44:21] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[07:44:37] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 240 seconds)
[07:44:58] <SamuelMarks> graingert[m] - What? - I only found https://docs.python.org/3/library/winreg.html?highlight=close#winreg.PyHKEY.Close - what's this `Close` you're referencing>
[07:45:44] *** Joins: bytehackr (~Sandipan@43.252.250.86)
[07:48:09] *** Joins: ice9 (~ice9@user/ice9)
[07:48:51] *** Quits: yuesbeez (uid458354@id-458354.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[07:49:29] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[07:50:05] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Killed (molybdenum.libera.chat (Nickname regained by services)))
[07:50:05] *** [_] is now known as [itchyjunk]
[07:50:37] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::3) (Ping timeout: 240 seconds)
[07:51:23] *** Quits: SlaveGeek334269 (~SlaveGeek@gateway/vpn/pia/slavegeek334269) (Remote host closed the connection)
[07:51:50] *** Joins: timburke (~timburke@157.131.128.146)
[07:52:49] <graingert[m]> Close as in close but no cigar
[07:53:40] *** Joins: teut (~teut@2401:4900:1c68:ebe9:f019:e976:f8bd:9ca2)
[07:54:07] <SamuelMarks> pfft
[07:54:57] *** Quits: onichomp (~onichomp@2806:264:4404:809c:6189:925c:3bc:983e) (Read error: Connection reset by peer)
[07:55:06] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[07:55:26] *** Joins: SlaveGeek334269 (~SlaveGeek@gateway/vpn/pia/slavegeek334269)
[07:55:29] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[07:57:17] *** Quits: vakera_pingveno (~dan@2600:1700:21f9:b150::30) (Ping timeout: 240 seconds)
[07:59:58] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[08:01:01] *** Quits: orbisvicis (~orbisvici@user/orbisvicis) (Quit: Leaving)
[08:02:40] *** Joins: wuji (~user@99-5-243-46.lightspeed.rcsntx.sbcglobal.net)
[08:03:37] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[08:04:22] *** Quits: XxEdgarxX (~ben@user/XxEdgarxX) (Remote host closed the connection)
[08:07:35] *** Quits: sreve (~quassel@p4ff44f93.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[08:07:41] *** Joins: sreve_ (~quassel@p549d72b4.dip0.t-ipconnect.de)
[08:07:57] *** Quits: mixfix41 (~homefame@user/mixfix41) (Ping timeout: 240 seconds)
[08:08:03] *** Joins: pmb (~pmb@89-64-79-51.dynamic.chello.pl)
[08:09:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[08:09:23] *** Joins: mixfix41 (~homefame@user/mixfix41)
[08:09:27] *** Joins: fstd (~fstd@xdsl-87-78-21-185.nc.de)
[08:09:57] *** Quits: wuji (~user@99-5-243-46.lightspeed.rcsntx.sbcglobal.net) (Ping timeout: 240 seconds)
[08:11:27] *** Joins: fikran (~fikran@user/fikran)
[08:12:41] *** Quits: fstd_ (~fstd@xdsl-78-35-82-60.nc.de) (Ping timeout: 256 seconds)
[08:13:21] <SnoopJ> MagicMock?
[08:14:39] *** Joins: twomoon (~twomoon@ip72-199-116-21.sd.sd.cox.net)
[08:14:54] <SnoopJ> (n.b. this does not "implement" matmul but it does at least allow the syntax)
[08:17:26] *** Quits: abraxas (~abraxas@ip68-14-53-156.ri.ri.cox.net) (Quit: abraxas)
[08:18:32] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 240 seconds)
[08:19:02] *** Joins: Sabry (~Sabry@197.37.73.173)
[08:19:45] *** Joins: NotSatoshi (~NotSatosh@2601:18d:8d80:4c04:94d2:f0fa:60a6:46f2)
[08:19:45] *** Quits: NotSatoshi (~NotSatosh@2601:18d:8d80:4c04:94d2:f0fa:60a6:46f2) (Changing host)
[08:19:45] *** Joins: NotSatoshi (~NotSatosh@user/NotSatoshi)
[08:22:55] *** Quits: teut (~teut@2401:4900:1c68:ebe9:f019:e976:f8bd:9ca2) (Quit: Client closed)
[08:23:18] *** Quits: Sabry (~Sabry@197.37.73.173) (Client Quit)
[08:23:31] *** Joins: SabryTarek (~SabryTare@197.37.73.173)
[08:24:31] *** Quits: lilibyte (lilibyte@gateway/vpn/protonvpn/lilibyte) (Ping timeout: 245 seconds)
[08:26:43] *** Joins: aliali (~aliali@197.37.73.173)
[08:27:57] *** Quits: humberto1 (~humbertow@187.202.214.175) (Ping timeout: 240 seconds)
[08:29:22] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[08:30:04] *** Quits: emerent (~quassel@p200300cd5724fde6ba27ebfffed28a59.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[08:30:38] *** Joins: humberto1 (~humbertow@187.202.214.175)
[08:32:05] *** Joins: emerent (~quassel@p200300cd5724fde6ba27ebfffed28a59.dip0.t-ipconnect.de)
[08:32:56] *** Joins: RiFo (~RiFo@user/rifo)
[08:33:21] *** Quits: aliali (~aliali@197.37.73.173) (Quit: Client closed)
[08:33:44] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[08:33:48] *** Joins: Sabry (~Sabry@197.37.73.173)
[08:33:52] <Sabry> Hi
[08:34:40] <Sabry> how I can copy file a to b by blocks
[08:34:54] <Sabry> each block= 8K
[08:37:11] *** Quits: humberto1 (~humbertow@187.202.214.175) (Ping timeout: 256 seconds)
[08:37:25] *** Quits: Sargento (uid523534@wikipedia/Sargento-de-Hierro) (Quit: Connection closed for inactivity)
[08:37:42] *** Joins: humberto1 (~humbertow@187.202.214.175)
[08:37:52] <Sabry> https://bpa.st/7QMQ
[08:38:35] <Sabry> I need some help here
[08:40:30] <SnoopJ> Sabry, read()/write() 8K bytes at a time instead of 4. You also do not need the bytes() on Line 7, `block` will already be bytes because you are reading bytes from the file.
[08:41:01] <parv> dd if=a of=b bs=8k?
[08:41:24] <SnoopJ> parv, presumably they want to do this in Python
[08:41:57] *** Quits: humberto1 (~humbertow@187.202.214.175) (Ping timeout: 240 seconds)
[08:41:59] *** Joins: norbinaa (~be3uykpy@2a00:a040:19a:b060:9111:4671:eba8:9f7c)
[08:42:11] <parv> Well, there is subprocess # am "being helpful"
[08:42:35] <parv> Yeah, nevermind me
[08:42:51] <SnoopJ> parv, `dd` won't be available on all systems
[08:43:11] <SnoopJ> But the runtime will understand how to read/write bytes by talking to the OS on the user's behalf.
[08:43:29] *** Quits: AlanMD (~AlanMD@86.121.179.183) (Quit: ZZZzzzâ€¦)
[08:43:31] <SnoopJ> (that said, I have never written this program, I use dd ðŸ˜…)
[08:43:53] <parv> :-J
[08:44:36] <Sabry> SnoopJ type(block) => <class 'int'>
[08:45:17] *** Quits: be3uykpy_ (~be3uykpy@2a00:a040:19a:b060:19c5:fafd:9977:3f71) (Ping timeout: 240 seconds)
[08:45:22] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[08:46:16] <Sabry> when I try to iterate by block using for it return int instead ofÂ  bytes
[08:46:58] <Sabry> Do you know why SnoopJ
[08:48:04] <SnoopJ> Sabry, because you are iterating what you read(), and iterating a byte object gives you integers
[08:48:05] *** Joins: lilibyte (~lilibyte@69.174.145.111)
[08:48:55] *** Joins: Themis3000 (~Thunderbi@user/themis3000)
[08:49:58] <Sabry> thnks
[08:50:27] <SnoopJ> Sabry, you can also maybe make use of `os.copy_file_range()` to copy 8K bytes at a time, although that's Linux-specific.
[08:52:44] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[08:52:52] <SnoopJ> I would probably write: `infile = open(..., "rb"); outfile = open(..., "wb"); while (buf := infile.read(8_000)): outfile.write(buf)`
[08:52:57] <SamuelMarks> SnoopJ - Ah yep magicmock, forgot about that
[08:53:32] <SamuelMarks> Update on my CST: it's now properly matching with AST and is replacing docstrings correctly :D - now I can sleep
[08:53:34] <SnoopJ> SamuelMarks, well, it doesn't actually implement it, so it doesn't answer the original question in the affirmative
[08:53:48] <SnoopJ> but it doesn't throw an error when you use the operator
[08:54:03] <SamuelMarks> SnoopJ - Oh I'm just using it for my parser so it doesn't annoy my linters
[08:54:11] <SnoopJ> I mean MagicMock
[08:54:16] *** Joins: humberto1 (~humbertow@187.202.214.175)
[08:54:53] <SamuelMarks> yeah MagicMock will let me use that syntax without an overzealous linter failing on my codebase because of that test case
[08:54:56] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[08:55:11] *** Quits: Themis3000 (~Thunderbi@user/themis3000) (Quit: Themis3000)
[08:55:43] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[08:56:17] *** Quits: lilibyte (~lilibyte@69.174.145.111) (Ping timeout: 240 seconds)
[08:56:33] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[08:56:42] <SnoopJ> ah
[08:56:57] *** Quits: scruz (~scruz@41.58.54.15) (Ping timeout: 240 seconds)
[08:57:16] *** Joins: Leonarbro__ (~Leonet@user/leonarbro)
[08:57:56] *** Joins: scruz (~scruz@41.58.54.241)
[08:58:23] *** Quits: hqdruxn08 (~hqdruxn08@user/hqdruxn08) (Read error: Connection reset by peer)
[08:58:24] *** Joins: lilibyte (lilibyte@gateway/vpn/protonvpn/lilibyte)
[08:58:32] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 240 seconds)
[08:58:35] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[08:58:42] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[08:58:55] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:59:17] *** Quits: Leonarbro_ (~Leonet@user/leonarbro) (Ping timeout: 240 seconds)
[08:59:56] <SamuelMarks> SnoopJ - So I probably overcomplicated it a bunch considering it should be LL(1) doable but I've got a bunch of contains (`in`) checks https://github.com/SamuelMarks/cdd-python/blob/2eedd77/cdd/cst_utils.py
[09:00:43] *** Joins: AlanMD (~AlanMD@193.105.140.131)
[09:02:41] *** Quits: Leonarbro__ (~Leonet@user/leonarbro) (Ping timeout: 256 seconds)
[09:03:21] *** Quits: stblaha (~stblaha@user/stblaha) (Quit: leaving)
[09:04:53] *** Joins: dvx (~dvx@5.181.92.64)
[09:05:14] *** Quits: AlanMD (~AlanMD@193.105.140.131) (Read error: Connection reset by peer)
[09:05:14] *** Joins: AlanMD_ (~AlanMD@86.121.179.183)
[09:06:05] *** Joins: foozle (~foozle@2001-b011-c040-16bf-37f3-5063-e900-f5a9.dynamic-ip6.hinet.net)
[09:06:47] *** Joins: Atque (~Atque@user/atque)
[09:07:19] *** Quits: jarthur (~jarthur@cpe-70-114-198-37.austin.res.rr.com) (Quit: jarthur)
[09:08:37] *** Quits: Phlyniii (~alex@84-115-52-62.cable.dynamic.surfer.at) (Ping timeout: 240 seconds)
[09:08:57] * SamuelMarks sleeps
[09:12:19] *** Quits: overrider (~overrider@user/overrider) (Ping timeout: 256 seconds)
[09:12:57] *** Joins: hqdruxn08 (~hqdruxn08@user/hqdruxn08)
[09:13:17] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[09:14:36] *** Joins: humbertowoody (~humbertow@187.202.214.175)
[09:17:57] *** Quits: yac (~user@user/yac) (Remote host closed the connection)
[09:17:59] *** Quits: humberto1 (~humbertow@187.202.214.175) (Ping timeout: 256 seconds)
[09:23:02] *** Joins: Phlyniii (~alex@84-115-52-62.cable.dynamic.surfer.at)
[09:23:23] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[09:23:42] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[09:24:28] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[09:25:55] *** Quits: humbertowoody (~humbertow@187.202.214.175) (Ping timeout: 256 seconds)
[09:26:01] *** Joins: humberto1 (~humbertow@187.202.214.175)
[09:26:58] *** Quits: scruz (~scruz@41.58.54.241) (Quit: Leaving)
[09:27:02] *** Quits: awmv (~awmv@2a02:21b0:644f:c181:55a1:cb19:64c:d550) (Ping timeout: 252 seconds)
[09:27:37] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[09:28:25] *** Joins: mexen (uid495612@user/mexen)
[09:30:27] *** Joins: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net)
[09:31:13] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[09:31:59] *** Quits: jamiejackson21 (~jamiejack@207.172.87.34) (Quit: Connection closed)
[09:31:59] *** Quits: jamiejackson (~jamiejack@207.172.87.34) (Quit: Connection closed)
[09:32:35] *** Joins: bluedust (~bluedust@117.241.191.1)
[09:32:51] *** Joins: stockholm (~Andreas@p200300d2c70a2500094c06f54aac633e.dip0.t-ipconnect.de)
[09:32:59] *** Joins: stranac (~stranac@195.29.239.126)
[09:35:25] *** Quits: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net) (Ping timeout: 256 seconds)
[09:36:55] *** Quits: greatgatsby (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-7.dsl.bell.ca) (Quit: Leaving)
[09:37:48] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[09:39:36] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[09:39:53] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[09:42:02] *** Quits: miique (~miique@181.46.139.166) (Read error: Connection reset by peer)
[09:43:12] *** Parts: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-165.dsl.bell.ca) (WeeChat 3.2)
[09:43:57] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[09:44:37] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[09:44:42] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[09:45:37] *** Joins: miique (~miique@181.46.139.166)
[09:46:28] *** Quits: atrigent_ (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[09:48:35] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 256 seconds)
[09:48:57] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[09:50:03] *** Joins: yac (~user@user/yac)
[09:50:15] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[09:53:05] *** Joins: pyevery__ (~pyeveryth@64-18-153-56.starry-inc.net)
[09:54:01] *** Joins: rakoon_ (~rakoon@2001:985:f4c6:1:bc72:995c:c12:2fff)
[09:54:17] *** Quits: timburke (~timburke@157.131.128.146) (Ping timeout: 240 seconds)
[09:56:25] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[09:58:46] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[09:59:06] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[09:59:47] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 256 seconds)
[09:59:55] *** Quits: cthulchu (~Cthulchu@184-090-172-137.res.spectrum.com) (Ping timeout: 256 seconds)
[10:01:03] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[10:02:45] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[10:03:53] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[10:03:55] *** Joins: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net)
[10:05:09] *** Joins: the_lanetly_052_ (~the_lanet@194.135.167.186)
[10:07:20] *** Joins: audiobirb (~audio@user/audio)
[10:07:24] *** Joins: jazzy2 (~jaziz@user/jaziz)
[10:09:17] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 240 seconds)
[10:13:22] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[10:14:06] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[10:14:34] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[10:14:45] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[10:16:29] *** Quits: jfcaron (~jfcaron@192.252.229.171) (Quit: jfcaron)
[10:17:19] *** Joins: pvergain (~Thunderbi@2a01:e0a:223:690:28ca:edff:75c8:b471)
[10:18:03] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[10:18:26] *** Quits: pvergain (~Thunderbi@2a01:e0a:223:690:28ca:edff:75c8:b471) (Client Quit)
[10:18:27] *** Joins: cyphase (~cyphase@user/cyphase)
[10:18:37] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[10:18:47] *** Joins: hams (~hams@c-73-255-22-88.hsd1.tx.comcast.net)
[10:18:48] *** Quits: hams (~hams@c-73-255-22-88.hsd1.tx.comcast.net) (Changing host)
[10:18:48] *** Joins: hams (~hams@user/hams)
[10:19:29] *** Joins: cyphase_ (~cyphase@2600:1700:7800:4680:ad7b:92e1:e5e1:b310)
[10:20:01] *** Quits: jpodivin (~jpodivin@cgnat44-pool3-69-53.poda.cz) (Quit: Leaving)
[10:20:16] *** Joins: pvergain (~Thunderbi@2a01:e0a:223:690:4cd0:dc34:e5d:287a)
[10:20:42] *** Quits: stockholm (~Andreas@p200300d2c70a2500094c06f54aac633e.dip0.t-ipconnect.de) (Remote host closed the connection)
[10:20:47] *** Joins: fikran (~fikran@user/fikran)
[10:20:55] *** Joins: stockholm (~Andreas@p200300d2c70a2500094c06f54aac633e.dip0.t-ipconnect.de)
[10:20:56] *** Joins: han-solo (~hanish@user/han-solo)
[10:21:54] *** Quits: Sabry (~Sabry@197.37.73.173) (Ping timeout: 256 seconds)
[10:22:25] *** Quits: yac (~user@user/yac) (Remote host closed the connection)
[10:22:28] *** Quits: SabryTarek (~SabryTare@197.37.73.173) (Ping timeout: 256 seconds)
[10:24:08] *** Quits: RiFo (~RiFo@user/rifo) (Quit: ... and thanks for all the fish.)
[10:25:24] *** Joins: yac (~user@user/yac)
[10:25:57] *** Joins: Guest3367 (~vit@chello085216193138.chello.sk)
[10:27:52] *** Joins: jpodivin (~jpodivin@cgnat44-pool3-69-53.poda.cz)
[10:27:57] *** Joins: RiFo (~RiFo@user/rifo)
[10:29:25] *** Joins: abraxas (~abraxas@ip68-14-53-156.ri.ri.cox.net)
[10:29:27] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[10:31:33] *** Joins: skraito (~skraito@user/skraito)
[10:31:45] *** Quits: skraito (~skraito@user/skraito) (K-Lined)
[10:33:37] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[10:37:19] *** Quits: humberto1 (~humbertow@187.202.214.175) (Ping timeout: 256 seconds)
[10:38:28] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[10:39:22] *** Quits: jpodivin (~jpodivin@cgnat44-pool3-69-53.poda.cz) (Quit: Leaving)
[10:39:30] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[10:39:37] *** Joins: humberto1 (~humbertow@187.202.214.175)
[10:39:46] *** Joins: jpodivin (~jpodivin@cgnat44-pool3-69-53.poda.cz)
[10:39:56] *** Joins: lbalhar (~lbalhar@93.185.13.26)
[10:39:57] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Ping timeout: 240 seconds)
[10:42:36] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[10:43:57] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[10:44:07] *** Quits: humberto1 (~humbertow@187.202.214.175) (Ping timeout: 256 seconds)
[10:45:17] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[10:48:29] *** Quits: abraxas (~abraxas@ip68-14-53-156.ri.ri.cox.net) (Quit: abraxas)
[10:49:05] *** Quits: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec) (Ping timeout: 256 seconds)
[10:49:37] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[10:49:37] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[10:50:04] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[10:50:45] *** Joins: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec)
[10:53:36] *** Joins: control (~v1@user/control)
[10:53:55] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.4)
[10:54:27] <control> hi, theres any way i could set() duplitace values like '1', '1' etc?
[10:55:00] *** Quits: jay-m1261 (~jay-m@41.205.30.141) (Remote host closed the connection)
[10:55:00] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Remote host closed the connection)
[10:55:01] *** Quits: jay-m126_ (~jay-m@41.205.30.141) (Read error: Connection reset by peer)
[10:55:09] <parv> Have 2 sets?
[10:55:12] *** Quits: twomoon (~twomoon@ip72-199-116-21.sd.sd.cox.net) (Quit: Leaving)
[10:55:33] *** Joins: mrwick (~mrwick@user/mrwick)
[10:55:47] <parv> Why would a set have duplicate values anyway?
[10:55:56] *** Quits: bytehackr (~Sandipan@43.252.250.86) (Remote host closed the connection)
[10:56:39] <control> im trying to sum numbers in a big file, so im thinking to set those numbers and then sum
[10:56:40] <parv> You could look into collections.ChainMap
[10:56:47] <control> for a faster method
[10:57:01] *** Joins: bytehackr (~Sandipan@43.252.250.86)
[10:57:04] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[10:57:13] <Repiphany> collections.Counter
[10:57:19] <cluelessperson> control, you're summing, just keep a count variable.
[10:57:22] <cluelessperson> ?
[10:58:04] <control> no, summing totals 3+6+1+3+1.. etc
[10:58:05] <cluelessperson> control, oh, you're thinking    dict({value: count})
[10:58:57] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[10:59:04] <cluelessperson> control, I'm confused, counting values is not summing though. :P
[10:59:25] *** Quits: ttree (~ttree0@c-73-169-193-237.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[10:59:40] <control> i want to do math :D
[11:00:08] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[11:00:23] <control>  sum = sum + int(n)
[11:00:48] <control> it works, but its very slow when reading file. its much faster when its set()
[11:01:02] <control> i just want to set all numbers from file into memory
[11:01:04] <control> and then sum
[11:01:21] <control> is that possible?
[11:01:30] <parv> Use a list?
[11:01:55] *** Quits: bytehackr (~Sandipan@43.252.250.86) (Remote host closed the connection)
[11:02:14] <Repiphany> How big is "big"
[11:02:15] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[11:02:30] *** Joins: bytehackr (~Sandipan@43.252.250.86)
[11:02:43] <control> 3mln lines~
[11:03:26] *** Joins: rendar (~rendar@user/rendar)
[11:04:14] <control> plainFile.readlines() works but its very slow\
[11:04:32] *** Quits: seednode99 (~seednode@user/seednode) (Quit: Nihil supernum.)
[11:05:16] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[11:05:28] *** Joins: seednode99 (~seednode@user/seednode)
[11:05:59] *** Joins: gusto (~Augustus@109.255.100.54)
[11:06:01] *** Joins: ggnoredo (~user@212.98.236.50)
[11:06:01] *** Quits: gusto (~Augustus@109.255.100.54) (Remote host closed the connection)
[11:06:28] <Repiphany> 3 million lines of single numbers?
[11:06:40] *** Joins: gusto (~Augustus@109.255.100.54)
[11:07:06] <Repiphany> That should be fast doing even very naive ways
[11:07:33] <ilmostro> using requests on a RESTful API, json data is returned; yet, it's structured in a weird way, leaving a dictionary with values of dictionary type.  Any ideas on how to approach this? Sorry, I'm not entirely able to share the data
[11:07:41] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[11:08:14] <supakeen> ilmostro: That doesn't sound problematic?
[11:08:17] <Repiphany> Nested dictionaries aren't particularly weird in and of themselves
[11:08:20] <supakeen> (in fact, quite common)
[11:08:37] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 240 seconds)
[11:08:55] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[11:08:58] <control> heres my code: https://bpa.st/C4GA
[11:09:01] <parv> To indirectly answer my own question of "Why would a set have duplicate values anyway", a multiset allows that -- reference I found in documentation of Repiphany's suggestion of collections.Counter
[11:09:09] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[11:09:39] <ilmostro> if I want to query specific part of the data, it's problematic then if I try operate on it as if it's json data.  Maybe I need to look at it for what it is
[11:10:12] <supakeen> 'JSON data' does not say it can't be a nested dictionary, one can put nested dictionaries in JSON fine :)
[11:10:19] <ilmostro> supakeen: Repiphany thank you for confirming that, btw
[11:10:37] *** Quits: tscopp (~tms@c-76-115-26-235.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[11:10:44] <Repiphany> control: Your code snippet doesn't define lines anywhere, and also it's only going to write one sum to newFile regardless of how many lines there are
[11:11:21] <Repiphany> Also it would be better to not use the name `sum` as it overlaps with a builtin
[11:11:50] <control> https://bpa.st/JYFQ
[11:12:09] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Client Quit)
[11:12:16] <Repiphany> That also doesn't define lines anywhere
[11:12:24] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[11:12:46] <control> thats what i want, i want to get a sum of numbers in file
[11:12:55] <control> 1+3+2 = 5
[11:13:17] <supakeen> erm
[11:13:22] <control> code works but its slow with 3mln lines
[11:13:27] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[11:15:25] <Repiphany> The code you presented doesn't define `lines` anywhere so it's impossible to judge if it's even doing anything relevant
[11:16:29] *** Joins: Terexen (~terexen@user/terexen)
[11:16:37] <ilmostro> I know it's probably irrelevant to the issue, but it should not go unaddressed: 1+3+2 = 6, not 5 :p
[11:16:37] *** Quits: pyevery__ (~pyeveryth@64-18-153-56.starry-inc.net) (Read error: Connection reset by peer)
[11:16:54] <supakeen> Hehe, that's what my 'erm' was about as well.
[11:17:11] <supakeen> But the code control shows does not do what they say they're trying to do so I'm getting a bit confused as well.
[11:17:12] <ilmostro> yeah, I figured haha; carry on
[11:17:32] <control> https://bpa.st/4OJA
[11:17:38] <control> heres my full code which works
[11:18:05] <supakeen> Ah ok now things become a lot more clear.
[11:18:14] <Repiphany> Why do you need to write to disk every time
[11:18:22] *** doko_ is now known as doko
[11:18:36] *** Joins: tristan_ (~tristan@223.62.219.10)
[11:18:56] <Repiphany> There is no reason to write a list of numbers to disk and then read that file right back into memory
[11:18:57] <supakeen> You're not just reading the input from a file, you're writing and reading to 4 separate files once per letter of the ASCII character set.
[11:19:10] <supakeen> So it's not a 'one pass count' it's more like a 50x4 kind of thing.
[11:19:17] <supakeen> Or about 200*3 million.
[11:19:20] <Repiphany> Oh lol I didn't even see that part
[11:19:22] *** Joins: Vonter (~Vonter@user/vonter)
[11:19:36] *** sreve_ is now known as sreve
[11:19:51] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[11:19:59] <control> how can i make things easier?
[11:20:26] <supakeen> Give me one second and I'll write some pseudocode of how I'd approach this.
[11:20:33] <control> thanks man
[11:22:37] <supakeen> control: I haven't ran it, but this should do the same thing, a `totals.txt` with the counts of all characters in `_input.txt`: https://bpa.st/G2CA
[11:22:38] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[11:23:19] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Client Quit)
[11:23:46] *** Quits: stockholm (~Andreas@p200300d2c70a2500094c06f54aac633e.dip0.t-ipconnect.de) (Remote host closed the connection)
[11:23:47] <supakeen> The main issue here was that you were performing all those actions for every letter (going through the entire files, etc), instead of doing that only once.
[11:23:49] <control> supakeen: thats what i was looking for, thanks
[11:23:56] <control> now i understand
[11:23:57] *** Joins: stockholm (~Andreas@p200300d2c70a2500094c06f54aac633e.dip0.t-ipconnect.de)
[11:25:26] *** Joins: julia__ (~quassel@user/julia)
[11:26:18] *** Joins: doko_ (~doko@2a02:8106:1a:7600:3fc2:e870:ba05:a960)
[11:26:45] *** Joins: greedom (~greedom@p200300de67096c00ed71a697a50f1a90.dip0.t-ipconnect.de)
[11:27:01] *** Quits: doko (~doko@2a02:8106:1a:7600:eaa4:7375:e22f:34bf) (Ping timeout: 240 seconds)
[11:27:03] *** Quits: julia (~quassel@user/julia) (Ping timeout: 256 seconds)
[11:27:14] *** Quits: control (~v1@user/control) (Quit: leaving)
[11:33:07] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[11:34:02] *** Joins: tobybl (~tobybl@237.202.200.146.dyn.plus.net)
[11:34:03] *** Joins: palasso (~palasso@user/palasso)
[11:34:09] *** Joins: rsx (~dummy@ppp-188-174-151-54.dynamic.mnet-online.de)
[11:34:33] *** Quits: tristan_ (~tristan@223.62.219.10) (Ping timeout: 256 seconds)
[11:35:23] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[11:35:57] *** Quits: jonthesnow (~xizhendu@36.112.179.225) (Ping timeout: 240 seconds)
[11:39:17] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 240 seconds)
[11:40:18] *** Quits: greedom (~greedom@p200300de67096c00ed71a697a50f1a90.dip0.t-ipconnect.de) (Remote host closed the connection)
[11:40:43] *** Joins: VaniaPy (~VaniaPy@46.12.95.180.dsl.dyn.forthnet.gr)
[11:41:17] *** Joins: tristan_ (~tristan@223.62.219.10)
[11:43:31] *** doko_ is now known as doko
[11:44:44] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[11:44:56] *** Joins: Sargento (uid523534@wikipedia/Sargento-de-Hierro)
[11:47:17] *** Quits: AlanMD_ (~AlanMD@86.121.179.183) (Remote host closed the connection)
[11:48:07] *** Joins: AlanMD (~AlanMD@86.121.179.183)
[11:49:23] *** Parts: sambauer64 (~sambauer6@86.121.131.207) ()
[11:50:33] *** Joins: skraito (~skraito@user/skraito)
[11:50:45] *** Quits: skraito (~skraito@user/skraito) (K-Lined)
[11:54:15] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[11:54:44] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[11:55:31] *** Quits: foozle (~foozle@2001-b011-c040-16bf-37f3-5063-e900-f5a9.dynamic-ip6.hinet.net) (Quit: Leaving)
[11:58:29] *** Quits: bloody (~bloody@user/bloody) (Quit: Always focus on how far you've come, rather than how far you have left to go)
[11:59:43] *** Quits: noyb (~noyb@user/noyb) (Ping timeout: 250 seconds)
[12:03:38] *** Quits: diogenese (~diogenese@diogenese.velotech.net) (Quit: Has anybody seen the bridge?)
[12:04:01] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[12:04:43] *** Joins: diogenese (~diogenese@diogenese.velotech.net)
[12:04:51] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[12:05:19] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[12:07:08] *** Quits: DerpGusta_ (~quassel@user/derpgusta) (Quit: No Ping reply in 180 seconds.)
[12:07:34] *** Joins: DerpGusta (~quassel@user/derpgusta)
[12:07:50] *** Joins: zaquest (~notzaques@5.130.79.72)
[12:12:31] *** Quits: tristan_ (~tristan@223.62.219.10) (Ping timeout: 256 seconds)
[12:12:34] *** Joins: andreasbuhr (~quassel@p549dbf2a.dip0.t-ipconnect.de)
[12:12:39] *** Quits: andreasbuhr (~quassel@p549dbf2a.dip0.t-ipconnect.de) (Client Quit)
[12:13:50] *** Quits: ggnoredo (~user@212.98.236.50) (Remote host closed the connection)
[12:13:59] *** Joins: Brumaire (~quassel@37.166.249.26)
[12:14:57] *** Quits: Pixi__ (~Pixi@user/pixi) (Ping timeout: 240 seconds)
[12:15:46] *** Joins: p-i- (~Ohmu@2403:6200:8978:b697:449d:f7d9:f9f6:57cc)
[12:15:47] *** Quits: lbalhar (~lbalhar@93.185.13.26) (Ping timeout: 256 seconds)
[12:17:17] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:b697:cd3e:cdb2:bf35:7e26) (Ping timeout: 240 seconds)
[12:18:46] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[12:19:27] *** Joins: ketiv (~ketiv@92.40.194.80.threembb.co.uk)
[12:19:51] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[12:21:03] *** Joins: erkan (~erkan@p200300d3471196349d7e1c2524c832f7.dip0.t-ipconnect.de)
[12:22:25] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[12:23:20] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[12:24:26] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[12:24:53] *** Joins: Pixi (~Pixi@user/pixi)
[12:25:04] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[12:25:32] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[12:26:12] *** Joins: chele (~chele@user/chele)
[12:26:43] *** dcaro_away is now known as dcaro
[12:27:49] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[12:28:15] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[12:28:27] *** Joins: lbalhar (~lbalhar@78-80-121-45.customers.tmcz.cz)
[12:30:08] *** Joins: fikran (~fikran@user/fikran)
[12:30:15] *** Quits: stockholm (~Andreas@p200300d2c70a2500094c06f54aac633e.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[12:30:18] *** Joins: agonhajdari (~textual@user/agonhajdari)
[12:31:02] *** Quits: agonhajdari (~textual@user/agonhajdari) (Client Quit)
[12:32:23] *** Joins: pycode (~pycode3@2001:b07:5d28:551:e5a4:68ba:bc0:9e82)
[12:34:37] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[12:34:50] *** Quits: erkan (~erkan@p200300d3471196349d7e1c2524c832f7.dip0.t-ipconnect.de) (Quit: Leaving...)
[12:35:03] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[12:35:40] *** Joins: erkan (~erkan@p200300d3471196349d7e1c2524c832f7.dip0.t-ipconnect.de)
[12:35:53] *** Quits: bluss (~bluss@user/bluss) (Remote host closed the connection)
[12:36:07] <erkan> hi there
[12:37:28] *** Joins: jim87 (~quassel@93.55.249.30)
[12:37:36] *** Quits: erkan (~erkan@p200300d3471196349d7e1c2524c832f7.dip0.t-ipconnect.de) (Client Quit)
[12:39:02] *** Joins: erkan (~erkan@p200300d3471196349d7e1c2524c832f7.dip0.t-ipconnect.de)
[12:39:29] <supakeen> Hello.
[12:39:33] <erkan> hi
[12:39:57] <supakeen> Hi erkan.
[12:40:09] <erkan> hi supakeen
[12:40:18] <supakeen> Do you have a Python question? :)
[12:40:20] *** Quits: horner (~horner@host86-131-44-95.range86-131.btcentralplus.com) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[12:40:41] <erkan> I am kind of new to python
[12:40:59] <erkan> would like to know the best way to learn python
[12:41:13] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[12:41:31] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[12:41:43] <erkan> currently I am copying and pasting python code
[12:41:57] <erkan> can read understand and adjust code
[12:42:24] <supakeen> Well, we have some books listed in the topic of this channel. Starting a fun little project for yourself might help.
[12:42:32] <supakeen> But how someone learns is super personal.
[12:43:47] <erkan> I see
[12:44:07] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[12:44:37] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Read error: Connection reset by peer)
[12:46:22] *** Joins: Galladite (~Galladite@host-92-24-75-159.as13285.net)
[12:47:25] <deniska> erkan: also hint: retype code instead of copying
[12:47:46] <supakeen> Yea, much like we used to do in school rewrite a thing in your own 'words'.
[12:48:47] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[12:48:49] <erkan> got you
[12:50:14] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[12:50:57] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[12:54:52] *** Quits: ubert (~Thunderbi@p200300ecdf09947d3ce845fd45b74154.dip0.t-ipconnect.de) (Remote host closed the connection)
[12:56:30] *** Joins: stonkey (~stonkey@user/stonkey)
[12:56:45] *** Joins: thiras (~thiras@user/thiras)
[12:56:57] *** Joins: agonhajdari (~textual@user/agonhajdari)
[12:57:25] <Pddy> erkan: also helpful when you begin to play with variants of code, do changes and observe what happens
[12:57:40] *** Joins: off^ (~off@207.5.21.20)
[12:58:06] <erkan> is there a super useful site I should know about
[12:58:46] <erkan> like a super good tutorial site
[12:58:51] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[12:58:55] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[12:59:24] <Pddy> https://wiki.python.org/moin/BeginnersGuide
[12:59:26] *** Joins: kosh (~kosh@user/kosh)
[12:59:28] *** Quits: xa0s (~xa0s@mab.sdf.org) (Quit: leaving)
[13:00:16] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[13:00:18] *** Joins: Ergo^ (~ergo@91.238.59.144)
[13:00:36] *** Joins: luigibu (~luigi@11.red-79-159-71.dynamicip.rima-tde.net)
[13:01:17] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 240 seconds)
[13:01:59] *** Quits: l4yer (~l4yer@178.239.168.223) (Read error: Connection reset by peer)
[13:02:21] *** Joins: faceface (~faceface@user/faceface)
[13:03:36] *** Joins: worldhacker-org (~FBI@125.165.110.40)
[13:03:47] *** Joins: AnimalFarmPig (~quassel@user/animalfarmpig)
[13:03:54] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[13:04:09] <erkan> thnx
[13:04:20] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[13:04:34] *** Parts: worldhacker-org (~FBI@125.165.110.40) ()
[13:04:37] *** Joins: trace987 (~trace@dynamic-002-247-248-171.2.247.pool.telefonica.de)
[13:05:15] *** Quits: Brumaire (~quassel@37.166.249.26) (Quit: ran away)
[13:05:36] *** Joins: Brumaire (~quassel@37.166.249.26)
[13:05:42] *** Quits: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani) (Ping timeout: 276 seconds)
[13:05:56] *** Quits: mxp (~mxp@185.16.205.131) (Ping timeout: 252 seconds)
[13:06:21] *** Quits: hams (~hams@user/hams) (Ping timeout: 256 seconds)
[13:06:38] *** Quits: pvergain (~Thunderbi@2a01:e0a:223:690:4cd0:dc34:e5d:287a) (Quit: pvergain)
[13:06:43] *** Joins: thiras_ (~thiras@user/thiras)
[13:07:13] *** Joins: manti7 (~manti7@176.10.104.94)
[13:07:35] *** Joins: mxp (~mxp@185.16.205.131)
[13:08:03] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[13:08:37] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[13:08:56] *** Quits: erkan (~erkan@p200300d3471196349d7e1c2524c832f7.dip0.t-ipconnect.de) (Remote host closed the connection)
[13:09:17] *** Joins: pvergain (~Thunderbi@2a01:e0a:223:690:97cc:62b9:cb9a:f1d5)
[13:09:22] *** Joins: bluedust_ (~bluedust@37.120.198.153)
[13:09:32] *** Joins: erkan (~erkan@p200300d3471196349d7e1c2524c832f7.dip0.t-ipconnect.de)
[13:09:32] *** Quits: ketiv (~ketiv@92.40.194.80.threembb.co.uk) (Quit: WeeChat 3.3)
[13:09:34] *** Joins: DUPS (~DUP@173.255.205.68)
[13:10:11] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 256 seconds)
[13:11:01] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[13:11:34] *** Joins: plastico (~plastico@neomutt/plastico)
[13:11:38] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[13:12:37] *** Quits: bluedust (~bluedust@117.241.191.1) (Ping timeout: 240 seconds)
[13:12:51] *** Quits: ano (~ano@user/ano) (Ping timeout: 276 seconds)
[13:13:25] *** Joins: awmv (~awmv@2a02:21b0:644f:c181:2888:a17e:eb4:4128)
[13:13:32] *** Joins: bluedust (~bluedust@194.37.96.120)
[13:13:53] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[13:13:59] *** Joins: fling (~fling@user/fling)
[13:14:36] *** Joins: ano (~ano@user/ano)
[13:15:30] *** Joins: Jonopoly (~Jonopoly@user/jonopoly)
[13:15:30] *** Joins: bluedus__ (~bluedust@117.241.191.1)
[13:16:20] *** Joins: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani)
[13:16:37] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[13:16:41] *** Joins: noyb (~noyb@user/noyb)
[13:17:07] *** Quits: bluedust_ (~bluedust@37.120.198.153) (Ping timeout: 256 seconds)
[13:17:41] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[13:18:51] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[13:18:52] *** Quits: Deknos (~someone@user/menace) (Read error: Connection reset by peer)
[13:18:56] *** Joins: mattfoxxx (~mattfoxxx@2001:16b8:2240:8000:6b63:7daa:3edc:b992)
[13:19:15] *** Quits: bluedust (~bluedust@194.37.96.120) (Ping timeout: 256 seconds)
[13:19:34] *** Joins: l4yer (~l4yer@84.69.191.245)
[13:20:15] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[13:20:51] *** Joins: vanessa (~annada@103.160.128.7)
[13:20:53] *** Parts: erkan (~erkan@p200300d3471196349d7e1c2524c832f7.dip0.t-ipconnect.de) (Leaving...)
[13:21:08] *** Joins: dntreou (~yakiza@102-65-62-237.ftth.web.africa)
[13:21:29] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:22:17] *** Quits: rjwiii (~mr-rich@idlerpg/player/mr-rich) (Ping timeout: 240 seconds)
[13:24:22] *** Joins: ubert (~Thunderbi@2a02:8109:9880:303c:de3b:67d7:83e8:947e)
[13:24:22] <vanessa> so, it is okay if there is an extra comma , in the function parameters list at the end but not at the beginning.
[13:25:40] <nedbat> vanessa: yes
[13:25:57] <nedbat> vanessa: but people only use one at the end if the list is split across lines
[13:27:50] <vanessa> one stlye I see people use is to begin every line with a comma when args are split across lines
[13:28:11] *** Joins: palindrome (~jvargas@93.107.71.201)
[13:29:41] <vanessa> I have seen people completely forgetting to put semicolons at the end of lines. it works because python thinks \n and ; are same thing.
[13:31:17] *** Quits: jazzy2 (~jaziz@user/jaziz) (Ping timeout: 240 seconds)
[13:31:46] *** Joins: ba (~ba@cpc1-hari17-2-0-cust27.20-2.cable.virginm.net)
[13:32:09] *** Joins: Everything (~Everythin@37.115.210.35)
[13:32:36] <nedbat> vanessa: i hope no one is putting semicolons in their python code, there's no reason to.
[13:33:06] <han-solo> i like writing multiple statements in the same line ;) # jk
[13:33:12] <nedbat> vanessa: and the comma-at-the-beginning style is from languages that don't' allow trailing commas. it's a completely awkward style that is also unneeded in python
[13:33:45] *** Quits: odinsbane (~mbs@pat-pool-138.crick.ac.uk) (Quit: -boot time-)
[13:34:06] <vanessa> I put semicolons at the end of my lines if I do not want to see the return value, otherwise it displays the value when you are in Pythons REPL loop.
[13:34:28] <han-solo> huh
[13:34:56] <nedbat> vanessa: ok, that happens in the repl is a different matter, you are free to do anything there (i use 1-space indents there!).  But don't use semicolons in .py files.
[13:35:41] *** Quits: dntreou (~yakiza@102-65-62-237.ftth.web.africa) (Ping timeout: 256 seconds)
[13:35:50] *** Joins: wedof (~wedof@2a02:810c:80:1eb0:1f1:ebe8:8402:8f63)
[13:35:53] *** Joins: rjwiii (~mr-rich@072-187-031-098.res.spectrum.com)
[13:36:04] *** Quits: Falcon| (andreas@user/falcon/x-0540249) (Quit: Falcon|)
[13:37:01] <vanessa> why? why is semicolons in a .py files so a good thing? I have this habit from other languages
[13:37:36] *** Joins: dntreou (~yakiza@inet-2a02-6900-8808-e010--476.oracle-ocna.com)
[13:37:50] *** Joins: Falcon| (andreas@user/falcon/x-0540249)
[13:37:52] <nedbat> vanessa: they are just unnecessary. why use them? you should write Python as Python, not using styles from other languages.
[13:38:01] <nedbat> vanessa: each language needs its own habits
[13:38:12] *** Quits: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani) (Ping timeout: 276 seconds)
[13:38:54] <nedbat> vanessa: should i put #{ at the end of my if statements because I'm used to braces from other languages?
[13:39:14] *** Quits: han-solo (~hanish@user/han-solo) (Ping timeout: 256 seconds)
[13:39:39] <The-Compiler> It's like using spaces before ! and ? in sentences - French people will find you weird if you don't have them, almost everyone else will find you weird if you have them :D
[13:39:51] *** Joins: han-solo (~hanish@user/han-solo)
[13:39:55] <vanessa> is that what the python community mean when they say to write in ''pythonic'' way?
[13:40:11] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:40:24] <nedbat> vanessa: usually they mean something deeper: using the language to its best advantage.
[13:40:35] <nedbat> vanessa: this is more of a style issue, like following the pep8 conventions.
[13:40:39] *** Joins: carl- (~carl-@185.103.188.130)
[13:41:18] *** Quits: Vonter (~Vonter@user/vonter) (Read error: Connection reset by peer)
[13:41:19] *** Joins: odinsbane (~mbs@pat-pool-138.crick.ac.uk)
[13:41:52] *** Quits: luigibu (~luigi@11.red-79-159-71.dynamicip.rima-tde.net) (Quit: WeeChat 3.4)
[13:42:06] <vanessa> okay, need to learn python conventions. since tabs and spaces are important in Python, what is the preferred tab length? I use 8. And also, tab or space?
[13:42:20] <The-Compiler> four spaces, always :D
[13:42:22] <nedbat> vanessa: spaces, 4-space indents. No tab characters in the file.
[13:42:32] *** Quits: ravan (~ravan@user/ravan) (Read error: Connection reset by peer)
[13:43:18] *** Joins: Vonter (~Vonter@user/vonter)
[13:43:19] <The-Compiler> https://www.python.org/dev/peps/pep-0008/ is the commonly accepted style guide, and https://github.com/psf/black is a somewhat popular auto-formatter based on it (though increasing the line length from 79 to 88)
[13:43:26] *** Joins: ravan (~ravan@user/ravan)
[13:44:15] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:acd5:fce0:a19c:de74) (Ping timeout: 268 seconds)
[13:44:25] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[13:44:35] <vanessa> 88? where did they get it from? It feels really weird to go beyond 80 chars.
[13:44:43] *** Joins: zen_coder (~zen_coder@ip5f5bd770.dynamic.kabel-deutschland.de)
[13:44:59] <nedbat> vanessa: you can choose your own lline length
[13:45:25] <The-Compiler> vanessa: https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html#line-length
[13:45:45] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[13:45:47] *** Joins: jay-m126_ (~jay-m@41.205.30.141)
[13:45:48] *** Joins: jay-m1261 (~jay-m@41.205.30.141)
[13:45:57] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 240 seconds)
[13:47:17] *** Quits: carl- (~carl-@185.103.188.130) (Ping timeout: 240 seconds)
[13:48:54] *** Joins: ice9 (~ice9@user/ice9)
[13:48:56] <palindrome> can someone explain me the idea behind the mount with prefixes? https://www.programcreek.com/python/example/98858/requests.adapters.HTTPAdapter
[13:48:57] *** Quits: vanessa (~annada@103.160.128.7) (Ping timeout: 240 seconds)
[13:49:25] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[13:50:37] <han-solo> you can make it do things for other prefixes than http and create your own prefix if you like, and add an adapter
[13:50:43] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[13:50:46] <han-solo> and when the request url finds that prefix, it will call your adapter
[13:51:07] *** Joins: vanessa (~annada@103.160.128.7)
[13:51:50] <han-solo> palindrome: https://bpa.st/QRNQ # something like that, i think
[13:52:41] *** Joins: kuter (~kuter@public-gprs526836.centertel.pl)
[13:52:45] *** Quits: thiras_ (~thiras@user/thiras) (Remote host closed the connection)
[13:53:28] *** Joins: NeilRG (~NeilRG@96-127-194-85.qc.cable.ebox.net)
[13:53:40] <nedbat> is it a bad idea to publish wheels for alpha versions of Python?  https://github.com/nedbat/coveragepy/issues/1294
[13:54:08] <supakeen> no, i would thank you a hundred times for actually doing that
[13:54:15] *** Joins: thiras_ (~thiras@user/thiras)
[13:54:16] <supakeen> it's a chore to run alpha versions or rcs when there are no wheels
[13:54:35] <nedbat> supakeen: that issue claims that an a2 wheel won't run properly on an a3 python
[13:54:42] <supakeen> i don't know about that
[13:55:21] <supakeen> then again, they're alphas right, failures are to be expected
[13:55:57] *** Joins: idontneedanick (~idontneed@h-85-24-184-105.A189.priv.bahnhof.se)
[13:57:48] *** Joins: Naan (~Naan@user/naan)
[13:58:17] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[13:58:37] *** Quits: esther (~esther@24-155-112-236.dyn.grandenetworks.net) (Ping timeout: 240 seconds)
[13:58:44] *** Joins: bluedust (~bluedust@86.106.136.216)
[13:59:03] <nedbat> supakeen: i'm not conversant enough with abi etc, to understand whether an a2 wheel is expected to be ok on a3
[13:59:34] *** Joins: pro_z (~pro_z@37.214.50.58)
[14:01:37] *** Quits: bluedus__ (~bluedust@117.241.191.1) (Ping timeout: 240 seconds)
[14:03:12] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[14:03:57] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[14:05:10] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:07:49] <nedbat> running the coverage.py test suite on the tip of cpython: 59 failures :(
[14:07:59] *** Quits: lbalhar (~lbalhar@78-80-121-45.customers.tmcz.cz) (Ping timeout: 256 seconds)
[14:08:04] *** Joins: panella32 (~panella32@static-198-54-128-109.cust.tzulo.com)
[14:10:11] *** Quits: jim87 (~quassel@93.55.249.30) (Read error: Connection reset by peer)
[14:10:18] *** Joins: jim87 (~quassel@93.55.249.30)
[14:11:05] <ChrisWarrick> since  you canâ€™t reupload wheels, and the filename has the python version as "cp311" without mentioning any alphas, Iâ€™d be wary of uploading wheels to pypi
[14:11:49] <nedbat> ChrisWarrick: that's what i'm thinking too, but i wish i understand what the guarantees were to be certain
[14:12:03] <ChrisWarrick> for an alpha version? there arenâ€™t any
[14:13:04] *** Joins: percyc (~percyc@183.236.188.154)
[14:14:01] *** Joins: cdown (~cdown@163.114.131.1)
[14:15:51] *** Joins: paul424 (~tom@ip-5-172-233-168.multi.internet.cyfrowypolsat.pl)
[14:15:53] <jim87> If I'd like to use importlib.resources to get the list of the resources of a package, starting from importlib.resources.path(my_package, ''), how could I instantiate the Package object starting from its name?
[14:16:49] *** Quits: thiras_ (~thiras@user/thiras) (Quit: Leaving)
[14:16:57] *** Joins: worldhacker-org (~FBI@125.165.105.56)
[14:17:27] <jim87> or with pkg_resources, as I have the distribution name actually
[14:17:28] *** Quits: worldhacker-org (~FBI@125.165.105.56) (K-Lined)
[14:18:09] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[14:18:33] *** Joins: bluedust_ (~bluedust@86.106.136.216)
[14:19:19] *** Quits: bluedust (~bluedust@86.106.136.216) (Ping timeout: 256 seconds)
[14:19:28] *** Joins: bluedus__ (~bluedust@117.241.191.1)
[14:20:30] *** Joins: lbalhar (~lbalhar@93.185.13.26)
[14:20:37] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 240 seconds)
[14:21:09] *** Quits: paul424 (~tom@ip-5-172-233-168.multi.internet.cyfrowypolsat.pl) (Ping timeout: 256 seconds)
[14:22:57] *** Quits: bluedust_ (~bluedust@86.106.136.216) (Ping timeout: 240 seconds)
[14:24:25] *** Quits: Brumaire (~quassel@37.166.249.26) (Ping timeout: 256 seconds)
[14:24:47] *** Joins: Brumaire (~quassel@37.172.143.113)
[14:29:01] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[14:29:05] *** Quits: l4yer (~l4yer@84.69.191.245) (Ping timeout: 256 seconds)
[14:31:24] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[14:31:41] *** Joins: mickey8 (~user@user/mickey)
[14:34:38] *** Quits: parv (~quass@user/parv) (Quit: parv)
[14:34:53] *** Joins: paul424 (~tom@ip-5-172-239-113.multi.internet.cyfrowypolsat.pl)
[14:35:37] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 240 seconds)
[14:35:37] *** Quits: jay-m1261 (~jay-m@41.205.30.141) (Ping timeout: 240 seconds)
[14:35:37] *** Quits: jay-m126_ (~jay-m@41.205.30.141) (Ping timeout: 240 seconds)
[14:36:19] <zamba> i have set up a tcp listener using anyio's create_tcp_listener and a handle function.. but how can i pass arguments to the handle function?
[14:36:29] *** Joins: sokan (~sokan@athedsl-4548055.home.otenet.gr)
[14:36:35] <zamba> it's already passed the client instance of the connecting client, but i need to pass something extra
[14:36:56] <zamba> do i need functools for that?
[14:37:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[14:39:29] *** Joins: fikran (~fikran@user/fikran)
[14:39:52] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[14:40:02] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:40:38] <jim87> zamba: you could adopt the factory design pattern to pass the handler extra parameters (I don't know anyio)
[14:41:18] <jim87> (or the builder design pattern)
[14:41:45] *** Joins: LordKalma_ (~LordKalma@server.ruilvo.com)
[14:41:47] <ChrisWarrick> zamba: functools.partial would be the easiest solution
[14:42:11] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Read error: Connection reset by peer)
[14:42:40] *** LordKalma_ is now known as LordKalma
[14:42:50] *** Joins: l4yer (~l4yer@178.239.168.223)
[14:44:13] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[14:44:46] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[14:46:42] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[14:49:21] *** Quits: vanessa (~annada@103.160.128.7) (Ping timeout: 256 seconds)
[14:51:10] *** Quits: l4yer (~l4yer@178.239.168.223) (Remote host closed the connection)
[14:51:20] *** Joins: vanessa (~annada@103.160.128.7)
[14:52:17] *** Quits: marcello42 (~mp@2001:1a81:12ec:f000:b283:2eaa:9318:3447) (Ping timeout: 240 seconds)
[14:53:53] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[14:54:07] <vanessa> say that a call function returns a object whose member function is f(), then is is not possible to do something like `class(args)(args).f(args)` ?
[14:54:34] <ChrisWarrick> vanessa: why would it not be possible? what happens if you try?
[14:55:07] <vanessa> TypeError: forward() takes 1 positional argument but 2 were given
[14:55:14] <vanessa> is what I am getting
[14:55:16] <nedbat> vanessa: do you mean a class with a __call__ method that returns a function?
[14:55:33] <nedbat> vanessa: perhaps you forgot self as a parameter to the method? Can you link us to the code?
[14:55:33] <vanessa> __call__ returns a object.
[14:56:36] <vanessa> yeah, I forgot self as a parameter, nedbat
[14:56:38] *** Joins: Helle (~helle@45.83.235.185)
[14:56:55] *** Joins: delvian (~delvian@41.13.228.112)
[14:57:03] <nedbat> vanessa: it's unusual to define __call__, so I'm interested to see what you're doing with it.
[14:57:48] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[14:57:58] <vanessa> that worked. that self thing a little weird. it is almost as if a class' methods do not live in it's namespace.
[14:58:06] *** Joins: jay-m126_ (~jay-m@41.205.30.141)
[14:58:32] <nedbat> vanessa: class instances (objects) don't define a namespace. you have to use self.
[14:58:33] <vanessa> nedbat: I did not override __call__, the PyTorch people did that.
[14:58:41] <nedbat> vanessa: i see
[15:01:07] <vanessa> class members not living in the namespace is very unusual design decision in part of python devs. I wonder why they did that.
[15:02:17] *** Quits: jay-m126_ (~jay-m@41.205.30.141) (Ping timeout: 240 seconds)
[15:02:38] *** Joins: Major_Biscuit (~MajorBisc@c-001-029-007.client.tudelft.eduvpn.nl)
[15:03:17] <vanessa> but anyways, this channel has been very instrumental for python beginner. I hope to become level up. thank you nedbat.
[15:04:10] *** Joins: puzzled (~puzzled@83-85-202-120.cable.dynamic.v4.ziggo.nl)
[15:04:14] <nedbat> vanessa: here is what the designer of the language had to say about explicit self:  http://neopythonic.blogspot.com/2008/10/why-explicit-self-has-to-stay.html
[15:05:37] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 240 seconds)
[15:06:13] *** Quits: dntreou (~yakiza@inet-2a02-6900-8808-e010--476.oracle-ocna.com) (Ping timeout: 240 seconds)
[15:06:29] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 256 seconds)
[15:07:37] *** Quits: Brumaire (~quassel@37.172.143.113) (Ping timeout: 240 seconds)
[15:08:26] *** Joins: Brumaire (~quassel@81-64-14-121.rev.numericable.fr)
[15:08:29] *** Joins: dntreou (~yakiza@102-65-62-237.ftth.web.africa)
[15:11:47] *** Quits: trace987 (~trace@dynamic-002-247-248-171.2.247.pool.telefonica.de) (Quit: Leaving)
[15:12:09] <The-Compiler> As for *accessing* attributes of self, in other languages (like many C++ projects) you just end up with conventions like using "m_" for member variables. They are two inherently different namespaces, and I see no good rationale to merge them.
[15:12:23] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[15:12:41] <The-Compiler> (then again I'd love to have to do, say, globals.blah to access global variables too)
[15:13:21] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[15:15:37] *** Quits: doit4madden (~death916@user/death916) (Ping timeout: 240 seconds)
[15:16:50] <Swayze> cant rem who it was we were discussing ORM well .. : https://confuzeus.com/hub/django-web-framework/dangerous-defaults/
[15:17:12] <Swayze> first example, 52 sql queries generated where it can be optimised to 4
[15:17:35] *** Joins: jay-m126_ (~jay-m@41.205.30.141)
[15:17:41] <vanessa> The-Compiler: what are two different namespaces? The class is a namespace and accessed via class::member and others are in global namespaces
[15:18:52] <nedbat> vanessa: there is also the local namespace in the method.
[15:19:07] *** Joins: jay-m1261 (~jay-m@41.205.30.141)
[15:19:50] *** Joins: death916 (~death916@c-71-193-50-233.hsd1.ca.comcast.net)
[15:19:50] *** Quits: death916 (~death916@c-71-193-50-233.hsd1.ca.comcast.net) (Changing host)
[15:19:50] *** Joins: death916 (~death916@user/death916)
[15:21:48] <vanessa> then use `this` keyword. but now that I think about it, `this` is `self`, but in C++/Java land, as long as no local member conflict with a class member, `this` is not required.
[15:22:01] <The-Compiler> vanessa: conceptually, an instance variable and a local variable in a function are two very different things. Yet most languages have them in the same namespace. With "self" representing the instance, Python has them nicely separated, which I find much more reasonable
[15:22:48] *** Quits: mavhq (~quassel@mapp-14-b2-v4wan-161519-cust401.vm15.cable.virginm.net) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[15:23:02] <The-Compiler> vanessa: yes, which is not a good thing (IMHO) - and many C++ styleguides I've seen require a m_ prefix for member variables, which is kind of the same outcome
[15:24:23] *** Joins: mavhq (~quassel@mapp-14-b2-v4wan-161519-cust401.vm15.cable.virginm.net)
[15:24:55] <PJBoy> at least it's opt-in
[15:25:19] *** Quits: ubert (~Thunderbi@2a02:8109:9880:303c:de3b:67d7:83e8:947e) (Remote host closed the connection)
[15:25:31] *** Joins: ubert (~Thunderbi@2a02:8109:9880:303c:6bbe:db4a:c5b0:8e19)
[15:25:42] *** Joins: slav0nic (slav0nic@python.su)
[15:26:20] <vanessa> I have very little exprience with C++ code, but The-Compiler you should look at good ol' C code where ther is no concept of namespaces, like OpenGL. Everything starts with gl_
[15:26:35] *** Joins: oda (~oda@gateway/vpn/pia/oda)
[15:26:54] <gjvc> note that the word "self" is not a keyword, so you could use anything, even " _", but it's strongly discouraged
[15:27:00] *** Joins: digitalice (~digitalic@user/digitalice)
[15:27:02] <The-Compiler> vanessa: I wrote C for a living for some years - just because it exists doesn't make it a good idea ;)
[15:27:17] <gjvc> think this conversation might be confusing the terms "scope" and "namespace" a bit
[15:27:20] *** Quits: jay-m126_ (~jay-m@41.205.30.141) (Remote host closed the connection)
[15:27:32] <PJBoy> would _ actually work? it has some additional semantics than self
[15:27:35] *** Joins: jay-m126_ (~jay-m@41.205.30.141)
[15:27:53] <gjvc> think i tried it once and it was uneventful
[15:28:15] <The-Compiler> PJBoy: there is nothing inherently special about _ as a variable name
[15:28:20] <PJBoy> docs suggest it's only special in the REPL
[15:28:30] <PJBoy> and in case patterns
[15:28:44] <vanessa> gjvc: that is a great idea, let me replace all my self with _ or `this`.
[15:28:53] <The-Compiler> oof
[15:28:53] <han-solo> why ? ':)
[15:28:54] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.4)
[15:28:55] *** Joins: goldfish (~goldfish@user/goldfish)
[15:29:45] <gjvc> vanessa: expect a frosty reception then, if you show it to python people who are most accustomed to "self"
[15:30:15] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[15:30:26] *** Quits: goldfish (~goldfish@user/goldfish) (Remote host closed the connection)
[15:30:50] <vanessa> gjvc: _ is 3 characters less than self. my editor for some reason colors self as if it is a keyword.
[15:30:54] *** Quits: ubert (~Thunderbi@2a02:8109:9880:303c:6bbe:db4a:c5b0:8e19) (Remote host closed the connection)
[15:30:57] <PJBoy> self is going to become increasingly popular in C++ after C++23 too
[15:31:06] *** Joins: ubert (~Thunderbi@2a02:8109:9880:303c:2e0:44f:2ede:1485)
[15:32:55] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aÐ»Ð»Ð¸Ð»Ñ¹Ñ–Ð°!)
[15:32:57] *** Quits: jay-m1261 (~jay-m@41.205.30.141) (Ping timeout: 240 seconds)
[15:33:06] <nedbat> PJBoy: i guess i should stop saying i know C++ and instead say I know C++84 :)
[15:33:17] <PJBoy> :D
[15:33:37] *** Quits: jay-m126_ (~jay-m@41.205.30.141) (Ping timeout: 240 seconds)
[15:33:47] <PJBoy> trying to get ahead of the curve
[15:34:07] *** Joins: jay-m126_ (~jay-m@41.205.30.141)
[15:34:50] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[15:34:50] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 256 seconds)
[15:34:54] <PJBoy> another 20 tri-year releases and allowing for one year of delay, very smart prediction
[15:35:02] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[15:35:42] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:10] *** Joins: goldfish (~goldfish@user/goldfish)
[15:36:17] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 240 seconds)
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:38:08] <KirkMcDonald> The identifier `_` is also sometimes used with gettext.
[15:38:23] *** Joins: zeden (~zeden@user/zeden)
[15:39:22] *** Joins: jay-m1261 (~jay-m@41.205.30.141)
[15:40:31] <KirkMcDonald> Injecting the gettext function into the builtin namespace as `_` is almost not unusual; the documentation even mentions the possibility.
[15:40:41] *** Joins: legola (~legola@46.235.100.54)
[15:41:10] <vanessa> KirkMcDonald: what is gettext?
[15:41:47] <KirkMcDonald> GNU gettext is an i18n library. Python has bindings to it in the standard library's gettext module.
[15:42:17] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 240 seconds)
[15:42:20] *** Quits: kuter (~kuter@public-gprs526836.centertel.pl) (Quit: Lost terminal)
[15:43:06] <KirkMcDonald> Having a very short name for this function is desirable because code that uses it tends to use it all the time. The idea is you pass any string literal that needs to be translated to it, e.g. _("This string will get displayed.")
[15:43:45] <KirkMcDonald> Then it returns the string for the current locale.
[15:43:53] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[15:44:06] <vanessa> since ?: doesn't exits, I tried doing `x=func(optional_arg=45 if boolean)` and I am getting this error saying invalid syntax. any idea why?
[15:44:33] <KirkMcDonald> vanessa: The conditional expression needs an `else` clause.
[15:44:35] <Wulf> vanessa: else 46
[15:44:54] <KirkMcDonald> You can't conditionally pass an argument or not in this way.
[15:45:08] *** Joins: Barones (~Barones@2804:7f3:8989:5535:3bc4:4610:62ad:ecf2)
[15:45:14] <vanessa> if I want to conditionally pass argument?
[15:45:23] <Wulf> vanessa: if you don't want to pass the argument: func(**({"optional_arg": 45} else {}))
[15:45:36] <KirkMcDonald> The simplest thing is to know what the default for that argument is, and pass that.
[15:45:54] <KirkMcDonald> e.g. f(x=45 if condition else None)
[15:46:18] *** Quits: legola (~legola@46.235.100.54) (Remote host closed the connection)
[15:46:29] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[15:46:35] <KirkMcDonald> Wulf: You're missing the actual condition, there.
[15:46:48] <Wulf> oops.
[15:46:54] <nedbat> vanessa: or (especially if there will be more):  args = {}; if boolean: args["optional_arg"] = 45;;  func(**args)
[15:47:01] *** Quits: Jonopoly (~Jonopoly@user/jonopoly) (Quit: WeeChat 3.0)
[15:48:44] <vanessa> ok, that got meat.
[15:48:52] <vanessa> *meta
[15:49:04] *** Quits: Terexen (~terexen@user/terexen) (Remote host closed the connection)
[15:49:51] <vanessa> a string can be actually interpreted as a variable !?
[15:50:42] *** Quits: palindrome (~jvargas@93.107.71.201) (Read error: No route to host)
[15:50:54] *** Joins: palindrome (~jvargas@93.107.71.201)
[15:50:56] <nedbat> vanessa: a string can be a key in a dict, and a dict can be used as keyword arguments to a function.
[15:51:31] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[15:52:14] <vanessa> doesn't the source code and the binary live in different universe? one is leaking into another.
[15:52:40] <nedbat> vanessa: python doesn't run your code from a binary, it runs it from compiled bytecode, which still has access to the names of things.
[15:52:53] *** Quits: oda (~oda@gateway/vpn/pia/oda) (Quit: Leaving...)
[15:52:55] <nedbat> vanessa: python is highly introspectable and reflectable like that.
[15:53:10] *** Joins: Xano (~Xano@2a00:23c4:4204:700:e313:c3ba:db00:c593)
[15:53:44] <vanessa> but anyways, why **args? last time I asked here, people said the *args will unpack it.
[15:54:03] <Wulf> vanessa: **args, not *args
[15:54:09] <nedbat> vanessa: *args unpacks positional arguments, **kwargs (the more conventional name) unpacks keyword arguments.
[15:54:44] <nedbat> vanessa: my example should have been: kwargs = {}; if boolean: kwargs["optional_arg"] = 45;; func(**kwargs)
[15:55:15] *** Joins: goldfish (~goldfish@user/goldfish)
[15:55:47] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[15:56:11] *** Joins: califax- (~califax@user/califx)
[15:56:36] <vanessa> as I understand, *args will unpack a list ans **kwargs will unpack a dictionary, yes?
[15:56:42] <nedbat> vanessa: yes
[15:57:08] *** Joins: llanhmod (~developer@user/domhnall/x-2887755)
[15:57:34] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[15:58:46] *** Joins: brabrax_ (~brabrax@user/brabrax)
[15:58:57] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 240 seconds)
[15:59:10] *** brabrax_ is now known as brabrax
[15:59:38] <vanessa> thank you very much, nedbat. I really hope I am not asking stupid/obvious questions.
[15:59:57] <nedbat> vanessa: i don't believe those exist :)
[16:00:33] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[16:00:33] *** califax- is now known as califax
[16:01:11] <PJBoy> is this a stupid question?
[16:03:16] *** Quits: ano (~ano@user/ano) (Quit: ano)
[16:03:31] *** Joins: ano (~ano@user/ano)
[16:04:03] <Wulf> PJBoy: Not at all.
[16:04:30] <PJBoy> :>
[16:04:49] *** Quits: Barones (~Barones@2804:7f3:8989:5535:3bc4:4610:62ad:ecf2) (Quit: Leaving)
[16:07:06] *** Quits: ano (~ano@user/ano) (Client Quit)
[16:07:19] *** Joins: ano (~ano@user/ano)
[16:08:13] *** Quits: ano (~ano@user/ano) (Client Quit)
[16:10:18] *** Quits: tejr (~tejr@user/tejr) (Ping timeout: 276 seconds)
[16:10:33] <nedbat> PJBoy: that's very meat of you
[16:10:34] <nedbat> *meta
[16:10:35] <nedbat> :)
[16:10:43] *** Joins: ano (~ano@user/ano)
[16:10:51] *** Quits: ano (~ano@user/ano) (Client Quit)
[16:12:00] *** Joins: tejr (~tejr@user/tejr)
[16:12:11] *** Joins: ano (~ano@user/ano)
[16:12:39] *** Quits: dntreou (~yakiza@102-65-62-237.ftth.web.africa) (Ping timeout: 256 seconds)
[16:13:33] *** Joins: dntreou (~yakiza@102-65-62-237.ftth.web.africa)
[16:14:23] <PJBoy> doing my best :)
[16:15:00] <Wulf> nedbat: How about this one?  Why is 0 > 0 False?
[16:15:44] <nedbat> Wulf: we could probably have a good discussion touching on subtle points in the history of the philosophy of math
[16:16:47] *** Quits: Xano (~Xano@2a00:23c4:4204:700:e313:c3ba:db00:c593) (Ping timeout: 252 seconds)
[16:16:52] *** Joins: Rum (~bourbon@user/rum)
[16:16:57] *** Quits: jim87 (~quassel@93.55.249.30) (Ping timeout: 240 seconds)
[16:17:11] <PJBoy> because O>O kinda looks like an owl, and owls kinda sound like they're saying "not truuuuue, not truuuue"
[16:17:40] <PJBoy> python takes direct inspiration from animals, so it makes sense
[16:18:30] <Yhg1s> Wulf: it's not a stupid question because asking it unmasks how much the person asking it is misunderstanding about maths.
[16:19:33] *** Joins: onichomp (~onichomp@2806:264:4408:317:c039:d499:606c:420a)
[16:19:35] *** Joins: l4yer (~l4yer@178.239.168.223)
[16:20:17] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[16:23:25] *** Quits: stwange (~j@82.21.202.140) (Ping timeout: 256 seconds)
[16:27:13] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[16:27:28] *** Quits: goldfish (~goldfish@user/goldfish) (Remote host closed the connection)
[16:27:47] *** Joins: goldfish (~goldfish@user/goldfish)
[16:27:48] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[16:28:51] *** Quits: Rum (~bourbon@user/rum) (Quit: WeeChat 3.4)
[16:29:05] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[16:31:27] *** Quits: Tempesta (Tempesta@user/tempesta) (Quit: See ya!)
[16:31:56] *** Joins: VaniaPy52 (~VaniaPy@46.12.95.180.dsl.dyn.forthnet.gr)
[16:32:11] *** Quits: pycode (~pycode3@2001:b07:5d28:551:e5a4:68ba:bc0:9e82) (Ping timeout: 252 seconds)
[16:34:31] *** Joins: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl)
[16:34:38] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[16:36:21] *** Joins: Tempesta (~Tempesta@user/tempesta)
[16:38:59] *** Quits: onichomp (~onichomp@2806:264:4408:317:c039:d499:606c:420a) (Read error: Connection reset by peer)
[16:39:37] *** Quits: paul424 (~tom@ip-5-172-239-113.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[16:39:38] *** Joins: onichomp (~onichomp@2806:264:4408:317:c039:d499:606c:420a)
[16:40:46] *** Joins: stockholm (~Andreas@p200300d2c70a25009d01787bf32ef4cc.dip0.t-ipconnect.de)
[16:41:17] *** Joins: nyah (~nyah@94.6.71.219)
[16:41:56] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[16:42:49] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[16:43:22] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-165.dsl.bell.ca)
[16:43:58] <bancroft> is there a way to make sure that apt-install something will install a packaged with my specific global pyenv python?
[16:44:12] <Yhg1s> bancroft: there is not a way to do that at all, let alone make sure of it.
[16:44:37] <Yhg1s> bancroft: apt will only install packages for use with other apt packages. apt-isntalled things will only use apt-installed things.
[16:44:40] <bancroft> Yhg1s: how about the other direction then, make my pyenv python find the package installed with apt
[16:45:06] <Yhg1s> bancroft: not in a way that will actually work, no. They are separate installations. They will be built differently, with different built-time flags, possibly different compilers, and with different patches applied.
[16:45:15] *** Parts: SlaveGeek334269 (~SlaveGeek@gateway/vpn/pia/slavegeek334269) ()
[16:45:30] *** Quits: ubert (~Thunderbi@2a02:8109:9880:303c:2e0:44f:2ede:1485) (Remote host closed the connection)
[16:45:49] *** Joins: ubert (~Thunderbi@2a02:8109:9880:303c:816c:2f7:b4df:2063)
[16:45:52] *** Joins: esther (~esther@2607:fb90:5fe5:53c4:1eb1:f322:eee7:7efa)
[16:46:35] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Quit: Leaving)
[16:46:37] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[16:46:39] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[16:48:24] <bancroft> Yhg1s: Then i'm fresh out of ideas how to install sqlite. I've pip installed with my pyenv pip (python -m pip install pysqlite3) and I get a module not found _sqlite3
[16:48:50] *** Joins: fikran (~fikran@user/fikran)
[16:49:24] <ChrisWarrick> bancroft: sqlite3 is built into python
[16:49:38] <Yhg1s> bancroft: sqlite3 is a standard library module. it's not pysqlite3. the 'pysqlite3' pip package gives you 'pysqlite3'.
[16:49:39] <ChrisWarrick> bancroft: however, if you build your python without sqlite3 available in your system, it wonâ€™t exist
[16:49:57] *** Quits: esther (~esther@2607:fb90:5fe5:53c4:1eb1:f322:eee7:7efa) (Ping timeout: 240 seconds)
[16:50:11] *** Joins: esther (~esther@24-155-112-236.dyn.grandenetworks.net)
[16:50:14] <bancroft> So you're suggesting that this version of python from pyenv is broken, that makes sense
[16:50:26] <Yhg1s> bancroft: what you need to do is install the requirements for building Python's sqlite3 module with apt, and then rebuilding your Python interpreter so the build picks it up. It's probably libsqlite3-dev
[16:50:35] <Yhg1s> bancroft: it's not broken. It's just not built with sqlite3.
[16:50:48] *** Joins: jim87 (~quassel@93.55.249.30)
[16:50:49] <ChrisWarrick> bancroft: https://github.com/pyenv/pyenv/wiki
[16:50:51] *** Quits: ano (~ano@user/ano) (Quit: ano)
[16:51:05] <KirkMcDonald> If you compile Python without the headers for certain dependencies installed, Python will elide the things which depend on them.
[16:51:07] *** Joins: ano (~ano@user/ano)
[16:51:19] <ChrisWarrick> bancroft: also, your question was an example of an XY-problem, please avoid that in the future: https://xyproblem.info/
[16:53:10] <bancroft> ChrisWarrick: I learned more along the way though, I didn't know you couldn't link to apt packages, or force apt to install against a specific python
[16:54:18] <ChrisWarrick> bancroft: but at the same time you strayed from your original problem and could potentially spend a lot of time tackling something that wasnâ€™t related to yoour problem at all
[16:54:38] *** Joins: magla (~gelignite@55d457f6.access.ecotel.net)
[16:54:50] *** Quits: llh (~llh@user/llh) (Quit: :::: ( UPP ) ::::)
[16:55:04] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[16:55:07] *** Joins: Jonopoly (~Jonopoly@user/jonopoly)
[16:56:49] *** Joins: llh (~llh@user/llh)
[16:58:11] *** Quits: miique (~miique@181.46.139.166) (Read error: Connection reset by peer)
[17:00:08] *** Joins: icsdi (~icsdi@net-37-179-41-124.cust.vodafonedsl.it)
[17:00:27] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[17:00:59] *** Joins: miique (~miique@181.46.139.166)
[17:01:20] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[17:01:21] *** Joins: kts (~kts@103.73.237.237)
[17:01:38] *** Quits: jim87 (~quassel@93.55.249.30) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[17:03:05] *** Quits: nilson (~nilson@98.242.69.194) (Ping timeout: 256 seconds)
[17:04:29] <newdimension> In SQLAlchemy session.query(FooModel.create_date).order_by(FooModel.create_date.desc()).first() is this the best way to get the latest create_date from FooModel model? Coming from Django ORM having to specify FooModel twice seems redundant to me
[17:04:53] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[17:06:36] *** Joins: pycode (~pycode3@2001:b07:5d28:551:d4c7:4a8b:7e8d:b164)
[17:06:59] *** Joins: nilson (~nilson@98.242.70.57)
[17:07:12] *** Quits: lbalhar (~lbalhar@93.185.13.26) (Ping timeout: 256 seconds)
[17:07:23] *** Joins: iamnotarobot (~iamnotaro@BSN-61-23-80.dynamic.siol.net)
[17:07:57] *** Joins: marcello42 (~mp@2001:1a81:12ec:f000:b283:2eaa:9318:3447)
[17:07:58] *** Quits: iamnotarobot (~iamnotaro@BSN-61-23-80.dynamic.siol.net) (Remote host closed the connection)
[17:08:35] *** Joins: horner (~horner@host86-131-44-95.range86-131.btcentralplus.com)
[17:08:48] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[17:11:08] *** Joins: iomari891 (~iomari891@197.210.55.212)
[17:11:58] *** Joins: Nact (~l@host-85-27-126-227.dynamic.voo.be)
[17:12:03] <jess> what's a good message queue these days. 0mq still reasonable?
[17:13:50] *** Joins: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani)
[17:13:51] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[17:16:13] *** Quits: Hackerpcs (~user@user/hackerpcs) (Read error: Connection reset by peer)
[17:17:00] *** Quits: stockholm (~Andreas@p200300d2c70a25009d01787bf32ef4cc.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[17:17:17] *** Joins: trace987 (~trace@dynamic-002-247-251-145.2.247.pool.telefonica.de)
[17:18:32] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 256 seconds)
[17:19:16] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[17:21:17] <ChrisWarrick> jess: perhaps rabbitmq?
[17:21:20] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[17:21:37] *** Quits: panella32 (~panella32@static-198-54-128-109.cust.tzulo.com) (Ping timeout: 240 seconds)
[17:21:59] *** mjacob_ is now known as mjacob
[17:22:19] *** Joins: bluedust (~bluedust@117.222.186.134)
[17:22:19] * jess looks
[17:22:28] *** Joins: jfcaron (~jfcaron@192.252.229.171)
[17:22:37] *** Quits: bluedus__ (~bluedust@117.241.191.1) (Ping timeout: 240 seconds)
[17:22:57] *** Joins: lockywolf_ (~lockywolf@46.23.90.177)
[17:23:02] *** Quits: lockywolf (~lockywolf@2a03:6000:6f63:638::177) (Ping timeout: 240 seconds)
[17:23:17] *** Quits: jay-m126_ (~jay-m@41.205.30.141) (Ping timeout: 240 seconds)
[17:23:46] *** Joins: kyooo (~kyooo@2a02:a31d:a13c:5600:559d:f748:905d:cda9)
[17:24:03] *** Quits: jay-m1261 (~jay-m@41.205.30.141) (Ping timeout: 256 seconds)
[17:24:04] *** Quits: Naan (~Naan@user/naan) (Quit: Leaving)
[17:24:25] *** Joins: raxor2k (~raxor2k@78.158.254.45)
[17:24:40] <raxor2k> bjs: I have found the most insane hidden bug ever, and i have no idea where it came from
[17:24:48] <raxor2k> or what it is
[17:25:49] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 240 seconds)
[17:26:57] *** flooded is now known as _flood
[17:27:01] <VaniaPy52> Hi,i'm trying to compare the values in the list on line 10 with the value that i post from the request. However after list append on line 12 it grabs only the first value of the list https://bpa.st/Z24A
[17:28:28] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[17:29:54] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[17:30:11] <bjs> VaniaPy52: you have a `return` inside the loop,  once a function returns it stops executing
[17:30:19] <bjs> raxor2k: okay?  what do you want me to do
[17:30:24] *** Joins: jay-m126_ (~jay-m@41.205.30.141)
[17:30:26] *** Quits: han-solo (~hanish@user/han-solo) (Quit: switching host)
[17:31:30] *** Joins: vladoski (~vladoski@2001:b07:add:d406:e2c0:b32d:1f20:3933)
[17:32:24] <bjs> raxor2k: probably you just made a mistake and have a bug
[17:32:28] *** Quits: wovixo (~wovixo@128.104.205.49) (Read error: Connection reset by peer)
[17:33:55] <VaniaPy52> bjs i know,but why is not comparing all the values with the given values?
[17:33:58] <VaniaPy52> value*
[17:33:59] *** Joins: jay-m1261 (~jay-m@41.205.30.141)
[17:34:15] <bjs> VaniaPy52: what do you mean? it's comparing against i
[17:35:02] *** Joins: zyzzyxdonta (~zyzzyxdon@ip5f5aa13a.dynamic.kabel-deutschland.de)
[17:35:14] <VaniaPy52> bjs yeah, i need to check if any of the values in list is over the request value
[17:35:29] <bjs> VaniaPy52: okay but your loop has a return in it, so once it finds a value it returns
[17:35:31] <bjs> and so the loop stops
[17:35:56] *** Joins: moog_ (~moog@107.126.53.99)
[17:36:15] *** Joins: panella32 (~panella32@164.215.227.223)
[17:36:35] *** Quits: vladoski (~vladoski@2001:b07:add:d406:e2c0:b32d:1f20:3933) (Remote host closed the connection)
[17:37:08] *** Joins: ianliu (~ianliu@200-150-188-220.static-user.ajato.com.br)
[17:37:43] *** Joins: han-solo (~han-solo@user/han-solo)
[17:37:49] *** Joins: cdown_ (~cdown@188.214.11.14)
[17:38:17] *** Quits: cdown (~cdown@163.114.131.1) (Ping timeout: 240 seconds)
[17:38:22] *** Quits: moog (~moog@107.77.244.52) (Ping timeout: 256 seconds)
[17:38:24] *** cdown_ is now known as cdown
[17:38:47] *** Joins: cdown_ (~cdown@163.114.131.1)
[17:39:16] *** Quits: jfcaron (~jfcaron@192.252.229.171) (Quit: jfcaron)
[17:39:27] *** Quits: onichomp (~onichomp@2806:264:4408:317:c039:d499:606c:420a) (Read error: Connection reset by peer)
[17:40:03] *** Joins: wovixo (~wovixo@128.104.205.49)
[17:40:06] *** Joins: onichomp (~onichomp@2806:264:4408:317:c039:d499:606c:420a)
[17:40:38] *** Quits: jay-m126_ (~jay-m@41.205.30.141) (Ping timeout: 256 seconds)
[17:42:20] *** Quits: jay-m1261 (~jay-m@41.205.30.141) (Ping timeout: 256 seconds)
[17:42:20] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 256 seconds)
[17:42:37] *** Quits: cdown (~cdown@188.214.11.14) (Ping timeout: 240 seconds)
[17:42:45] *** cdown_ is now known as cdown
[17:42:49] *** Joins: xkuru (~xkuru@user/xkuru)
[17:44:58] <VaniaPy52> bjs i just don't see if it loops over all the values
[17:45:38] <bjs> VaniaPy52: well it's not going to loop over all the values,  because once it finds the first i that matches one of the `if`s it's going to stop looping
[17:46:24] <bjs> is that what you wanted?
[17:48:37] <raxor2k> bjs: and now that thing suddenly works again
[17:48:50] <bjs> raxor2k: like i say, you probably just have a bug
[17:48:52] <raxor2k> What can it be when something "suddenly doesnt" work out of nothing, and then work again later?
[17:48:54] <bjs> it's not uncommon to have bugs
[17:49:02] *** Quits: MacGyver (~macgyver@user/macgyver) (Quit: WeeChat 3.3)
[17:49:37] *** Quits: Helle (~helle@45.83.235.185) (Changing host)
[17:49:37] *** Joins: Helle (~helle@user/Helle)
[17:50:09] <raxor2k> bjs: yes, but are there other tecniques than "except Exception as e" to find those bugs ?
[17:50:27] <bjs> raxor2k: stop putting try/excepts everywhere, that's the *opposite* of what you do to find bugs
[17:50:34] *** Quits: cation (cation@user/cation) (Ping timeout: 260 seconds)
[17:50:50] <bjs> if an exception happens because of a bug, the solution is to debug and fix the bug not to put try/except's around to make it go away :P
[17:51:19] *** Quits: panella32 (~panella32@164.215.227.223) (Read error: Connection reset by peer)
[17:52:06] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[17:52:21] *** Joins: cation (cation@user/cation)
[17:52:34] *** Joins: panella32 (~panella32@86.57.86.11)
[17:52:40] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[17:52:52] <raxor2k> bjs: i never use try and except
[17:53:03] <raxor2k> but when nothing happens in the terminal i have to insert it to find out whats going on
[17:53:18] *** Joins: jay-m126_ (~jay-m@41.205.30.141)
[17:53:39] *** Quits: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani) (Ping timeout: 276 seconds)
[17:53:47] <bjs> raxor2k: I'm not sure what you mean, in Python when an exception isn't caught it bubbles up to "the top" and then gets printed to the user
[17:54:29] <bjs> (there are cases where this doesn't happen, e.g. if you're messing with threads or the top-level exception hook)
[17:54:41] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[17:55:13] <raxor2k> bjs: something is probably happening on the threads then
[17:55:16] <bjs> or if libraries contain the try/except (e.g. asyncio) but usually if you don't see the exception it means you're using the library wrong (e.g. for asyncio creating a task but never awaiting it)
[17:55:22] <bjs> raxor2k: that sounds like you just took a total guess
[17:55:23] <hogarius> raxor2k: don't use except at all.  Show all the error text.
[17:57:04] *** Quits: ianliu (~ianliu@200-150-188-220.static-user.ajato.com.br) (Quit: WeeChat 3.4)
[17:57:29] *** Joins: jay-m1261 (~jay-m@41.205.30.141)
[17:58:12] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[17:58:18] <raxor2k> hogarius: i never use it
[17:58:19] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzzâ€¦)
[17:58:30] <raxor2k> bjs: im just totally confused now, now it works perfectly again
[17:58:56] <bjs> raxor2k: this isn't uncommon with bugs, if you have a bug on one line in a big program then sometimes you hit that line (or that condition or whatever) and sometimes you don't
[17:58:59] <han-solo> it is called a "bug"
[17:59:18] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[17:59:30] *** Joins: jim87_ (~quassel@93.55.249.30)
[17:59:30] *** Quits: jim87_ (~quassel@93.55.249.30) (Client Quit)
[17:59:37] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[18:00:33] <raxor2k> bjs: and if an exception occur than it will come on the top of the terminal?
[18:00:58] <bjs> raxor2k: unless there's an try/except in your code or a library or some other reason it's not appearing
[18:01:43] <bjs> e.g. because the exception happened in an asyncio task that you didn't await, or in another thread, or was in a future you didn't get the result from or <a million other libraries and reasons>
[18:02:02] <bjs> and of course not all bugs lead to exceptions
[18:02:49] *** Joins: Bakunin (~maplefing@user/lindis)
[18:03:55] <raxor2k> I see.
[18:04:06] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[18:04:26] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[18:05:00] *** Quits: horner (~horner@host86-131-44-95.range86-131.btcentralplus.com) (Ping timeout: 256 seconds)
[18:05:05] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[18:05:37] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 240 seconds)
[18:05:41] *** lukedashjr is now known as luke-jr
[18:05:44] *** Joins: horner (~horner@host86-153-232-48.range86-153.btcentralplus.com)
[18:06:19] <bjs> raxor2k: and finally yes, it's possible there's a bug in a library, or in Python, or in the operating system, or in your CPU that's causing it but it's unlikely. I know you won't like hearing it but bugs are almost always your own fault.
[18:06:20] *** Joins: agonhajdari (~textual@user/agonhajdari)
[18:06:44] <raxor2k> bjs: probably its my fault yes
[18:06:55] *** Quits: vanessa (~annada@103.160.128.7) (Quit: WeeChat 3.4)
[18:07:14] <raxor2k> what makes me p*ssed of is that i try it million times and it works perfectly, and a soon as another guy tests it it aint working
[18:07:41] <bjs> raxor2k: testing is hard
[18:08:20] <bjs> that's why there's so much out there about it,  so many books, so much opinion on different types of testing, so many tools and libraries to help you (testing frameworks, coverage tools, mutation testers etc)
[18:09:15] <bjs> even linters and style formatters can be important parts of the whole system confidence
[18:09:59] *** Quits: onichomp (~onichomp@2806:264:4408:317:c039:d499:606c:420a) (Read error: Connection reset by peer)
[18:10:31] *** Quits: horner (~horner@host86-153-232-48.range86-153.btcentralplus.com) (Ping timeout: 256 seconds)
[18:10:37] *** Joins: onichomp (~onichomp@2806:264:4408:317:c039:d499:606c:420a)
[18:13:37] *** Joins: o-90 (~o-90@gateway/tor-sasl/o-90)
[18:14:17] *** Quits: idontneedanick (~idontneed@h-85-24-184-105.A189.priv.bahnhof.se) (Read error: Connection reset by peer)
[18:14:28] *** Quits: zyzzyxdonta (~zyzzyxdon@ip5f5aa13a.dynamic.kabel-deutschland.de) (Quit: Leaving)
[18:14:51] *** Joins: idontneedanick (~idontneed@h-85-24-184-105.a189.priv.bahnhof.se)
[18:17:44] <bjs> raxor2k: and you certainly won't like this but you say you've ran it millions of times (and you are exaggerating) and not seen the bug,  but I can tell you I've got tests we can run billions of times (not exaggerating) and see the bug only once or twice (timing/concurrency bugs for example).
[18:18:41] *** Joins: abraxas (~abraxas@ip68-14-53-156.ri.ri.cox.net)
[18:19:38] *** Quits: sokan (~sokan@athedsl-4548055.home.otenet.gr) (Quit: Reality.is.a.lie)
[18:19:57] *** Joins: sokan (~sokan@athedsl-4548055.home.otenet.gr)
[18:20:30] *** Joins: MacGyver (~macgyver@user/macgyver)
[18:20:35] *** Joins: idontnee_ (~idontneed@h-85-24-184-105.a189.priv.bahnhof.se)
[18:20:41] *** Quits: idontneedanick (~idontneed@h-85-24-184-105.a189.priv.bahnhof.se) (Read error: Connection reset by peer)
[18:21:22] <raxor2k> bjs: ok i understand. I wish we had more money to hire testers
[18:22:03] *** Joins: gasbag (~gasbag@024-216-149-125.res.spectrum.com)
[18:23:32] *** Quits: magla (~gelignite@55d457f6.access.ecotel.net) (Quit: Stay safe!)
[18:24:08] *** Quits: gasbag (~gasbag@024-216-149-125.res.spectrum.com) (Quit: Leaving)
[18:24:35] <SnoopJ> "Program testing can be used to show the presence of bugs, but never to show their absence!"
[18:24:53] *** Quits: KirkMcDonald (~Kirk@python/site-packages/KirkMcDonald) (Quit: Back later.)
[18:25:04] <bjs> SnoopJ: I quite like thinking about testing, validation, linting, formatting etc all under the same bucket of "confidence building"
[18:25:19] <bjs> it's not about finding bugs (per se) but about gradually becoming more and more confident in the system
[18:25:33] <SnoopJ> bjs, I wouldn't quite put "formatting" itself in that category but I agree on the others
[18:25:52] <SnoopJ> (now, choosing a format that is consistent across developers...)
[18:25:59] <bjs> So many C security vulnerabilities because of `if (x = y)` have elevated styleguides to that role
[18:26:00] <bjs> (sadly)
[18:26:18] <SnoopJ> mm, and one-line clauses that become not-one-line
[18:26:23] <bjs> yes
[18:26:29] <SnoopJ> and someone thought it "looked better" without braces
[18:26:42] <bjs> a style that says you don't have those forms at all improves confidence
[18:27:37] <SnoopJ> including confidence in "we can go in here and work on this thing when it inevitably breaks without a lot of pre-work to get oriented"
[18:28:05] <bjs> (Although I agree a lot of style guides and unit tests and so on is _also_ about ease of the developers life)
[18:28:45] <bjs> in an ideal world, perhaps those ideas would be related (things that make developers lives easier would make software better) but who knows :P
[18:29:34] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[18:29:37] *** Joins: gasbag (~gasbag@024-216-149-125.res.spectrum.com)
[18:29:50] <SnoopJ> the Pareto principle, but for software confidence :)
[18:30:04] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-30b6-77c4-07d1-3971.res6.spectrum.com)
[18:30:28] *** Joins: KirkMcDonald (~Kirk@python/site-packages/KirkMcDonald)
[18:30:30] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[18:30:59] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[18:31:02] <SnoopJ> getting to 80% confidence is relatively easy, but that last 20% can be thorny
[18:31:35] <bjs> SnoopJ: this is also how I answer questions like "Should I write a test for this?"   sometimes people aren't sure what metric to use,  so I just ask "would you feel more confident the software is correct with these tests?  do they give anything over the tests you already have?"
[18:31:57] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 240 seconds)
[18:31:57] *** Joins: Xano (~Xano@2a00:23c4:4204:700:6164:2f0b:cac:1406)
[18:33:13] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:193a:8038:cdb2:3b71)
[18:33:13] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:193a:8038:cdb2:3b71) (Changing host)
[18:33:13] *** Joins: skapata (~Skapata@user/skapata)
[18:33:23] *** Quits: lockywolf_ (~lockywolf@46.23.90.177) (Quit: ZNC 1.8.2 - https://znc.in)
[18:33:34] *** Joins: humberto1 (~humbertow@187.202.214.175)
[18:35:13] *** Quits: gasbag (~gasbag@024-216-149-125.res.spectrum.com) (Quit: Leaving)
[18:35:37] *** Quits: kevr (~kevr@user/kevr) (Remote host closed the connection)
[18:36:02] *** Joins: gasbag (~gasbag@024-216-149-125.res.spectrum.com)
[18:36:14] *** Quits: gasbag (~gasbag@024-216-149-125.res.spectrum.com) (Remote host closed the connection)
[18:36:21] *** Joins: kevr (~kevr@user/kevr)
[18:36:54] *** Joins: lockywolf (~lockywolf@46.23.90.177)
[18:36:58] *** Joins: gasbag (~gasbag@024-216-149-125.res.spectrum.com)
[18:37:41] *** Quits: NeilRG (~NeilRG@96-127-194-85.qc.cable.ebox.net) (Remote host closed the connection)
[18:37:55] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[18:38:33] *** Joins: nomic (~nomic@185.198.243.165)
[18:38:57] *** Quits: onichomp (~onichomp@2806:264:4408:317:c039:d499:606c:420a) (Read error: Connection reset by peer)
[18:39:14] *** Quits: Bakunin (~maplefing@user/lindis) (Remote host closed the connection)
[18:39:15] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[18:39:31] *** Joins: Viewday116 (~Viewday@user/viewday)
[18:39:35] *** Joins: onichomp (~onichomp@2806:264:4408:317:c039:d499:606c:420a)
[18:39:56] *** Quits: onichomp (~onichomp@2806:264:4408:317:c039:d499:606c:420a) (Read error: Connection reset by peer)
[18:40:17] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[18:40:35] *** Joins: onichomp (~onichomp@2806:264:4408:317:c039:d499:606c:420a)
[18:40:42] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[18:40:42] *** Viewday116 is now known as Viewday11
[18:41:01] *** Quits: marcello42 (~mp@2001:1a81:12ec:f000:b283:2eaa:9318:3447) (Ping timeout: 240 seconds)
[18:41:37] *** Quits: ano (~ano@user/ano) (Quit: ano)
[18:41:59] *** Joins: ano (~ano@user/ano)
[18:42:25] *** Joins: Jong (~Jong@174.27.0.61)
[18:43:21] <raxor2k> bjs: how much do you(or others) take paid to code through a code and optimize it ?
[18:43:22] *** Joins: marcello42 (~mp@2001:1a81:12ec:f000:b283:2eaa:9318:3447)
[18:43:32] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[18:43:33] *** Joins: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu)
[18:45:22] <bjs> raxor2k: that wasn't a sentence so I'm not sure what you're asking really,  but generally most of the job of engineering isn't just taking other peoples code and optimizing it
[18:45:56] *** Quits: mchlumsky (~mchlumsky@modemcable106.190-179-173.mc.videotron.ca) (Read error: Connection reset by peer)
[18:46:04] *** Quits: _0az3 (~az0@user/az0) (Remote host closed the connection)
[18:46:17] *** Joins: mchlumsky (~mchlumsky@modemcable106.190-179-173.mc.videotron.ca)
[18:46:25] *** Joins: _0az3 (~az0@user/az0)
[18:46:59] *** Joins: stockholm (~Andreas@p200300d2c70a25009d01787bf32ef4cc.dip0.t-ipconnect.de)
[18:47:32] *** Joins: bluedust_ (~bluedust@185.248.85.40)
[18:50:37] *** Quits: bluedust (~bluedust@117.222.186.134) (Ping timeout: 240 seconds)
[18:51:46] *** Quits: lockywolf (~lockywolf@46.23.90.177) (Quit: ZNC 1.8.2 - https://znc.in)
[18:52:02] *** Quits: panella32 (~panella32@86.57.86.11) (Ping timeout: 256 seconds)
[18:54:42] *** Joins: lockywolf (~lockywolf@2a03:6000:6f63:638::177)
[18:56:10] *** Quits: off^ (~off@207.5.21.20) (Remote host closed the connection)
[18:56:34] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[18:56:37] *** Quits: marcello42 (~mp@2001:1a81:12ec:f000:b283:2eaa:9318:3447) (Ping timeout: 240 seconds)
[18:57:42] *** Quits: jay-m1261 (~jay-m@41.205.30.141) (Ping timeout: 256 seconds)
[18:58:02] *** Joins: blackpawn (~blackpawn@c-73-73-53-23.hsd1.il.comcast.net)
[18:58:11] *** Joins: fikran (~fikran@user/fikran)
[18:58:37] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 240 seconds)
[18:58:58] *** Quits: iomari891 (~iomari891@197.210.55.212) (Quit: WeeChat 3.3)
[18:59:01] *** Quits: jay-m126_ (~jay-m@41.205.30.141) (Ping timeout: 240 seconds)
[18:59:23] *** Joins: bluedust (~bluedust@117.222.186.134)
[18:59:27] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[19:00:37] *** Quits: miique (~miique@181.46.139.166) (Ping timeout: 240 seconds)
[19:01:06] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 256 seconds)
[19:02:18] *** Quits: tm007 (uid287041@id-287041.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[19:02:33] *** Quits: lockywolf (~lockywolf@2a03:6000:6f63:638::177) (Remote host closed the connection)
[19:02:33] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[19:02:37] *** Quits: bluedust_ (~bluedust@185.248.85.40) (Ping timeout: 240 seconds)
[19:02:56] *** Quits: Galladite (~Galladite@host-92-24-75-159.as13285.net) (Quit: Leaving)
[19:02:59] *** Quits: wedof (~wedof@2a02:810c:80:1eb0:1f1:ebe8:8402:8f63) (Remote host closed the connection)
[19:03:57] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[19:04:38] *** Joins: L0NDONER (~LLLkLLLL@host-78-149-10-182.as13285.net)
[19:04:56] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[19:05:39] *** Joins: lockywolf (~lockywolf@2a03:6000:6f63:638::177)
[19:06:22] *** Quits: idontnee_ (~idontneed@h-85-24-184-105.a189.priv.bahnhof.se) (Read error: Connection reset by peer)
[19:06:28] *** Joins: idontneedanick (~idontneed@h-85-24-184-105.A189.priv.bahnhof.se)
[19:06:44] *** Joins: akk (~akk@174-28-122-47.albq.qwest.net)
[19:07:17] *** Quits: zen_coder (~zen_coder@ip5f5bd770.dynamic.kabel-deutschland.de) (Ping timeout: 240 seconds)
[19:08:51] *** Joins: Bakunin (~maplefing@user/lindis)
[19:09:17] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[19:09:39] *** Quits: lockywolf (~lockywolf@2a03:6000:6f63:638::177) (Remote host closed the connection)
[19:09:45] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[19:10:32] *** Joins: jay-m126_ (~jay-m@41.205.30.141)
[19:10:59] *** Joins: jay-m1261 (~jay-m@41.205.30.141)
[19:11:06] *** Joins: lockywolf (~lockywolf@46.23.90.177)
[19:11:14] *** Joins: Galladite (~Galladite@host-92-24-75-159.as13285.net)
[19:11:35] *** Joins: Deneb (~johnch@30.125.7.51.dyn.plus.net)
[19:11:57] *** Quits: lockywolf (~lockywolf@46.23.90.177) (Remote host closed the connection)
[19:12:31] <Deneb> is maptplotlib still the most common way to do plots in Python?
[19:12:48] *** Quits: VaniaPy52 (~VaniaPy@46.12.95.180.dsl.dyn.forthnet.gr) (Quit: Connection closed)
[19:12:48] *** Quits: VaniaPy (~VaniaPy@46.12.95.180.dsl.dyn.forthnet.gr) (Quit: Connection closed)
[19:12:49] <mdk> for me yes
[19:12:52] <snalty> yes
[19:12:55] *** Quits: junktext (~junktext@gateway/vpn/pia/junktext) (Remote host closed the connection)
[19:13:30] <The-Compiler> Deneb: probably the most common way indeed, but it depends on what you want to do. There's also http://bokeh.org/ and https://www.pyqtgraph.org/ for more interactive plotting for example
[19:13:48] <snalty> i have some friends who prefer plotnine for it's ggplot like syntax
[19:13:53] <snalty> for web graphs i like graph.js
[19:13:55] <grym> snalty: (which is just matplotlib)
[19:14:04] *** Joins: junktext (~junktext@gateway/vpn/pia/junktext)
[19:14:09] <snalty> well yeah
[19:14:43] <L0NDONER> I've writen this https://bpa.st/ZPCQ and can login with email and password. But I cant break out of frame to click manifest in navbar here >> https://courierportal.hermescloud.co.uk/index.html#/
[19:14:56] <Deneb> just checking before I commit as it seems from my Googling there are other libraries like Plotly, Seaborn and Pandas and The-Compiler has just mentioned a few others. I am wanting to display an oscillscope trace from a dat array so a fairly simple line graph. There is a requirement to be able to diaply two traces though.
[19:14:58] *** Joins: lmmx (~louis@host-92-5-43-207.as13285.net)
[19:15:42] *** Joins: lockywolf (~lockywolf@46.23.90.177)
[19:17:59] <Deneb> I was hoping that Python had a built-in (at least supplied with basic distribution) library for simple graphs but it doesn't look like that is the case, so the next option would seem to be to use whatever is in most common use.
[19:18:03] *** Joins: beli6147 (~Thunderbi@cpe-76-175-52-6.socal.res.rr.com)
[19:18:30] *** Quits: beli6147 (~Thunderbi@cpe-76-175-52-6.socal.res.rr.com) (Client Quit)
[19:18:38] <lmmx> Happy new year Pythonist@s :) does anyone know off the top of their head if metaclasses allow a class inheriting from the metaclass to perform `super().__init__(self, *args, **kwargs)` in the init method?
[19:18:54] <grym> Deneb: matplotlib is foundational for static plots
[19:19:05] <SnoopJ> but it's not built-in
[19:19:05] <lmmx> I tried it and got hit with "classes derived from object can't do that"
[19:19:09] <grym> it is not stdlib
[19:19:41] <grym> Deneb: "i want a line plot of this data, styled like such and such" more or less guarantees you'll be installing numpy and matplotlib
[19:19:56] <SnoopJ> (you'll always be installing numpy if you install matplotlib)
[19:20:28] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[19:20:30] <grym> yep, they're the bedrock for the science stack
[19:20:42] <SnoopJ> I just mean that matplotlib without numpy is not a thing, it's built on top of it
[19:21:23] <grym> right; and one depends on the other, but it's worth mentioning both i think because they're both really important, and I recall Deneb being new-ish or hesitant about dependencies so might as well get 'em out in the open
[19:21:24] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[19:21:53] <Deneb> I did notice numpy come up in my search. Don't really know what it is, but examples do seem mention it and I already have it installed because other python scripts depended on it.
[19:22:07] *** Joins: timburke (~timburke@157.131.128.146)
[19:22:25] *** Joins: paul424 (~tom@ip-5-172-239-219.multi.internet.cyfrowypolsat.pl)
[19:22:33] <Deneb> btw, yes, I am still relatively new to the Python language
[19:22:42] *** Joins: ice9 (~ice9@user/ice9)
[19:22:56] <grym> numpy is the core numerics library for python
[19:23:00] <SnoopJ> numpy is an implementation of an N-dimensional array (NDarray) type and all the stuff that goes around it to do [array things]
[19:23:12] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Remote host closed the connection)
[19:23:37] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[19:24:00] <grym> Deneb: which languages are you coming from?
[19:24:09] <SnoopJ> https://numpy.org/doc/stable/user/whatisnumpy.html
[19:24:11] <Deneb> I don't really need an N-dimensional array. 2 dimensions is quite enough - at least for this project.
[19:24:21] <SnoopJ> you don't need to think about numpy is all you want is matplotlib
[19:24:42] *** Joins: carl- (~carl-@185.103.188.130)
[19:24:45] <SnoopJ> if* all
[19:24:52] <akk> Deneb: numpy also offers fast 2d array handling and other things useful for plotting and data analysis
[19:25:09] <SnoopJ> akk, what does it offer for plotting? I'm not aware of any such functionality
[19:25:22] *** Quits: schumaml (~schumaml@dslb-188-104-168-024.188.104.pools.vodafone-ip.de) (Quit: WeeChat 3.3)
[19:26:20] <akk> SnoopJ: I don't know, but presumably it must offer something, or matplotlib wouldn't depend on it. To start with, maybe faster functions like max/min?
[19:26:31] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:acd5:fce0:a19c:de74)
[19:26:51] <SnoopJ> akk, I don't think it does anything to do with plotting. It offers things that matplotlib makes use of *when* plotting, though.
[19:27:24] <Deneb> I imagine that if it is N-dimansional then N can = 2? I can see how n-dimensional arrays might be useful in 3D rendering, but I only need simple x,y plotting here. Sill might be worth learning about numpy either way.
[19:27:34] <akk> SnoopJ: That's what I said, "offers things useful for plotting", not "has plotting functions built in"
[19:27:41] *** Quits: Nact (~l@host-85-27-126-227.dynamic.voo.be) (Quit: Konversation terminated!)
[19:27:51] *** Joins: stdout (~stdout@2605:ab80:b000:7202:3e12:af82:936c:2ff6)
[19:28:30] <Deneb> it seems to be quoted as a dependency quite frequently
[19:28:44] *** Joins: ano (~ano@user/ano)
[19:28:47] *** Joins: Bakunin_ (~maplefing@user/lindis)
[19:28:59] <Deneb> ok, so matplotlib + maybe numpy it is then.
[19:29:17] *** Quits: strugee_ (~strugee@ool-4575d6b1.dyn.optonline.net) (Ping timeout: 256 seconds)
[19:29:30] *** Joins: sedeki (~textual@user/sedeki)
[19:29:47] *** Joins: netpipe (~netpipe@user/netpipe)
[19:29:52] <Deneb> thanks for the helpful responses
[19:30:47] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:31:27] <grym> Deneb: some of the mentioned alternatives are actually just more additions.  seaborn and plotnine are both matplotlib + stuff.
[19:31:48] *** Quits: Bakunin (~maplefing@user/lindis) (Ping timeout: 276 seconds)
[19:32:23] *** Quits: lockywolf (~lockywolf@46.23.90.177) (Quit: ZNC 1.8.2 - https://znc.in)
[19:32:43] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[19:33:32] *** Quits: netpipe (~netpipe@user/netpipe) (Client Quit)
[19:33:58] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[19:34:00] *** Joins: strugee (~strugee@ool-4575d6b1.dyn.optonline.net)
[19:34:18] <Deneb> grym: that doesn't exactly surprise me. Btw, what is wx or wxlib?
[19:34:24] *** Quits: ubert (~Thunderbi@2a02:8109:9880:303c:816c:2f7:b4df:2063) (Remote host closed the connection)
[19:34:31] *** Joins: Guest40 (~Guest40@dyx0pyychxmp3hkfq09qt-3.rev.dnainternet.fi)
[19:34:45] *** Joins: hypoon (~hypoon@pool-108-31-49-4.washdc.fios.verizon.net)
[19:35:31] <Guest40> how do I transpose a list of list (2d matrix) without creating a new list? if I use matrix =[list(i) for i in zip(*matrix)]Â  the matrix is created in a new place not in original parameter
[19:35:31] *** Joins: lockywolf (~lockywolf@46.23.90.177)
[19:35:49] <grym> Deneb: i think it's a cross-platform gui toolkit, but i've never used it
[19:35:52] <akk> Deneb: WxWidgets is one of the many GUI toolkits, I assume that's the wx being referred to
[19:36:00] <grym> Guest40: np.array(thatthing).T
[19:36:12] *** Quits: jpodivin (~jpodivin@cgnat44-pool3-69-53.poda.cz) (Remote host closed the connection)
[19:36:28] <SnoopJ> akk, I thought you meant "for [user] plotting"
[19:36:29] <Guest40> im not allowed to use numpy
[19:36:32] <akk> Deneb: It's not really as mature as most of the other toolkits, but apparently it looks very native on windows so people sometimes choose it for that reason.
[19:36:43] <SnoopJ> debnet, N=2 is perfectly valid, yes
[19:36:48] <grym> Guest40: ok.  well, mutating in place is kind of a pain
[19:36:49] <SnoopJ> err Deneb
[19:36:54] *** Parts: exarkun (~exarkun@user/exarkun) (WeeChat 3.3)
[19:36:54] <grym> Guest40: why do you want to or care?
[19:36:55] <Deneb> ah, ok. I have played a little with tkinter. I only ask because it was present in an old python 2 program
[19:37:11] <Deneb> ... and I couldn't find the library for python3
[19:37:17] <Guest40> grym its for school exercise, i did double for loop too just now but it just created new ...
[19:37:21] <Guest40> ive been stuck here for 3h
[19:37:21] <Wooble> Guest40: you can use matrix[:] = [whatever] to replace in place
[19:37:33] <grym> Guest40: why do you care if you make a new list or not
[19:37:34] <Guest40> so I create a temp matrix and then replace it ?
[19:37:47] *** Joins: vakera_pingveno (~dan@2600:1700:21f9:b150::30)
[19:37:51] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[19:37:53] <Wooble> Guest40: you can do it all in one line, no need for a temp
[19:37:59] *** Quits: mattfoxxx (~mattfoxxx@2001:16b8:2240:8000:6b63:7daa:3edc:b992) (Quit: WeeChat 3.4)
[19:38:15] <akk> Deneb: Debian has a python3-wxgtk4.0 package, so at least there it's available for python3.
[19:38:24] <Deneb> SnoopJ: thanks.
[19:38:33] <akk> (but I don't really recommend investing time into learning wx)
[19:38:43] <Guest40> Wooble ok i replaced matrix =[list(i) for i in zip(*matrix)] with matrix[:] =[list(i) for i in zip(*matrix)]
[19:38:45] <Guest40> and it worked
[19:38:47] <Guest40> lol thanks
[19:38:53] <grym> https://pypi.org/project/wxPython/  supports py3, and has dropped py2
[19:38:55] *** Quits: jay-m126_ (~jay-m@41.205.30.141) (Ping timeout: 256 seconds)
[19:39:53] *** Joins: jay-m126_ (~jay-m@41.205.30.141)
[19:40:11] <Guest40> Do I save memory when doing that or whats the purpose?
[19:40:12] <Deneb> akk: did wonder about that and its partly why I am writing my own version of the program...
[19:40:18] *** Quits: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu) (Quit: Client closed)
[19:41:16] <Wooble> Guest40: if you want to do confusing things where a function mutates a list that was passed in, you need to do it that way. It's unlikely to save any memory, since the original list would have gotten deleted when the reference to it disappeared anyway.
[19:41:27] <L0NDONER> Hi guys can you help i'm using Srlenium. My code runs fine but I can't seem to click a navbar link after logging in >>> https://bpa.st/XAJA
[19:41:37] <Guest40> Wooble ok thanks
[19:41:39] <L0NDONER> Selenium*
[19:41:57] *** Quits: onichomp (~onichomp@2806:264:4408:317:c039:d499:606c:420a) (Read error: Connection reset by peer)
[19:42:06] *** Quits: Jonopoly (~Jonopoly@user/jonopoly) (Quit: WeeChat 3.0)
[19:42:35] *** Joins: onichomp (~onichomp@2806:264:4408:317:c039:d499:606c:420a)
[19:42:42] <Deneb> grym: just had a look at your link. It isn't available in the Ubuntu repository, but I see it can be installed using pip. Haven't really used pip myself. I seem to remember having a lot of trouble with it on Windows, but usually because there was a compile process that often failed - which never seemed to be a problem on Linux. Do devs use pip to install modules?
[19:43:17] <Wooble> Deneb: it's rarely even a problem on Windows these days; most packages provide wheels.
[19:43:21] <Deneb> Ubuntu/Mint O/S devs usually encourage sticking to apt so I have avoided it
[19:43:21] <grym> Deneb: i exclusively use pip, and don't use system/distro packages at all
[19:43:29] <Deneb> *pip that is
[19:43:32] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[19:43:41] <grym> you can pick one or the other, but i don't recommend crossing the streams for python dependency management
[19:44:00] <Wooble> Deneb: use virtualenvs, pretend the system doesn't even come with python.
[19:44:11] <grym> for not-python dependency management, i run into issues where debian/ubuntu is ancient sometimes, but otherwise no complaints
[19:44:14] <ba> On Ubuntu/Debian I only use pip inside virtualenvs
[19:44:14] *** Quits: puzzled (~puzzled@83-85-202-120.cable.dynamic.v4.ziggo.nl) (Quit: Leaving)
[19:44:15] <Deneb> grym: what do you mean by "crossing the streams"? You mean insalling bits from both?
[19:44:19] <InPhase> Deneb: Sometimes you will find a package with a compilation step that just wasn't made portable.  That isn't really pip's fault, but just the fact that there are devs who haven't tested or supported builds on Windows.
[19:44:23] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[19:44:29] <grym> Deneb: yeah, i do not recommend `apt install numpy && pip install pandas`
[19:44:31] <grym> you will hate your life
[19:44:37] <ba> Deneb: basically: never run `sudo pip` because it will stomp over files that are managed by `apt`
[19:44:45] <grym> Deneb: _specifically_, never ever sudo pip
[19:44:58] <Wooble> InPhase: it's also a lot more common for a windows python developer to not have a C compiler or want to deal with installing one...
[19:45:05] *** Joins: aselman4 (~aselman4@chipr013-p2.nls.ford.com)
[19:45:06] <InPhase> Wooble: Right.
[19:45:31] <InPhase> Wooble: And even if you set one up, having it work in the same terminal you're running pip from is not guaranteed, because Windows.
[19:45:49] *** Parts: aselman4 (~aselman4@chipr013-p2.nls.ford.com) ()
[19:46:04] <Wooble> praise gohlke.
[19:46:07] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[19:46:28] <InPhase> Wooble: Christoph Gohlke?
[19:46:42] <grym> the man's a saint
[19:46:51] *** Joins: DaNeenjah (~jake@adsl-74-230-4-35.hsv.bellsouth.net)
[19:46:51] <InPhase> I worked with him for years.
[19:46:58] <grym> thankfully his labor is less vital than it was in 2015, for his sanity if no other reason
[19:47:04] <Wooble> fortunately, a largely unnecessary saint these days. but when you need him, you really need him.
[19:47:04] <akk> It never occurred to me to wonder before ... if you're in a WSL shell and you do pip install, does it install a package built for linux, or one for windows?
[19:47:05] *** Joins: mickey8 (~user@user/mickey)
[19:47:06] <InPhase> His official job has nothing to do with his Python work, but he gets some spare time to work on it.  :)
[19:47:15] *** Joins: zebrag (~chris@user/zebrag)
[19:47:40] <Deneb> Wobble/InPhase, I think that hits the nail on the head. I remember from a long time ago at work having to deal with this and MS Like to do things their own way. often it was possible to back out and complete the process if you understood what had gone wrong and what dependency was missing but one sometimes ran into dependecies of dependecies of dependencies kind of problems. To be fair, same thing can be true of apt.....
[19:47:43] <Wooble> InPhase: sadly that applies to way too much vital infrastructure
[19:48:07] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[19:48:11] <Deneb> ok, so never run sudo pip. Got that. So I just run 'pip' so the install goes into userspace?
[19:48:13] <InPhase> He's paid by the lab I got my PhD in.
[19:48:26] <grym> Deneb: ideally, might as well learn about venvs now too
[19:48:36] <grym> pip --user is ... okay but not great
[19:48:44] <ChrisWarrick> akk: wsl is just linux, especially wsl2
[19:48:50] <akk> Deneb: Unfortunately it's not that easy. Just pip will fail. pip --user might work but might eventually cause weirdness. Best is to use a virtualenv.
[19:49:13] <grym> akk: modern pip defaults to --user
[19:49:17] <akk> ChrisWarrick: So pip would get the linux package, and wouldn't help you when running from pure windows?
[19:49:42] <ChrisWarrick> akk: yes, WSL2 is just a Linux VM with a handful of fancy quality-of-life features
[19:50:02] <akk> grym: Ah, okay. Probably a good decision. I should try using --user sometime and see if it works reliably now (it didn't when I last tried, but that was a few years ago).
[19:50:07] *** Quits: Pddy (~SmplyPddy@user/SmplyPddy) (Quit: bye)
[19:50:12] <ChrisWarrick> akk: and the Python you have in WSL2 is the regular build of Python for your linux distro of choice
[19:50:40] *** Quits: L0NDONER (~LLLkLLLL@host-78-149-10-182.as13285.net) (Quit: Leaving)
[19:50:59] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[19:51:26] *** Joins: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net)
[19:51:35] * Deneb just reading up on virtualenv as per grym
[19:51:55] <ChrisWarrick> Deneb: http://chriswarrick.com/blog/2018/09/04/python-virtual-environments/
[19:51:57] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 276 seconds)
[19:52:32] <Deneb> ChrisWarrick: thanks
[19:52:36] *** Joins: Pddy (~Pddy@user/SmplyPddy)
[19:53:02] *** Joins: natewrench123456 (~joshu@cpe-72-228-153-194.buffalo.res.rr.com)
[19:53:09] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[19:53:42] <Deneb> was just going to ask virtualenv or venv, but you article answers that question...
[19:54:37] *** Joins: the_lanetly_052 (~the_lanet@185.30.89.77)
[19:54:57] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 240 seconds)
[19:55:18] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[19:55:57] *** Quits: the_lanetly_052_ (~the_lanet@194.135.167.186) (Ping timeout: 240 seconds)
[19:56:15] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[19:56:17] *** Joins: Harlin__ (~DonQixote@75-163-135-150.clsp.qwest.net)
[19:56:36] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[19:57:37] *** Quits: carl- (~carl-@185.103.188.130) (Ping timeout: 256 seconds)
[19:58:13] *** Joins: iomari891 (~iomari891@197.210.54.48)
[19:58:37] *** Quits: Harlin_ (~DonQixote@75-163-135-150.clsp.qwest.net) (Ping timeout: 240 seconds)
[19:59:37] *** Quits: jay-m1261 (~jay-m@41.205.30.141) (Ping timeout: 240 seconds)
[19:59:44] <grym> venv.
[19:59:49] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 240 seconds)
[20:00:02] *** Quits: jay-m126_ (~jay-m@41.205.30.141) (Ping timeout: 256 seconds)
[20:00:37] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[20:01:42] *** Joins: Guest14 (~Guest14@108.222.9.51.dyn.plus.net)
[20:01:46] <Deneb> grym: yes, gathered that from the article. virtualenv is described as 'original and previously standard, the current being venv. Makes sense to start with the current standard.
[20:01:47] *** Joins: jmd (~user@de.cellform.com)
[20:01:58] *** Quits: mrwick (~mrwick@user/mrwick) (Quit: leaving)
[20:02:00] <grym> Deneb: yep, i agree (and do the same myself)
[20:03:05] *** Quits: Guest14 (~Guest14@108.222.9.51.dyn.plus.net) (Client Quit)
[20:04:26] *** Joins: NeoCore (~neocore@195.200.221.170)
[20:05:32] *** Quits: rsx (~dummy@ppp-188-174-151-54.dynamic.mnet-online.de) (Quit: rsx)
[20:06:00] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[20:06:29] *** Joins: odoood (~odoood@2601:c8:c000:c4e0::3)
[20:06:29] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::3) (Remote host closed the connection)
[20:06:59] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:07:46] *** Quits: bluedust (~bluedust@117.222.186.134) (Remote host closed the connection)
[20:09:31] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[20:10:02] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[20:11:27] *** Parts: ska (~ska@user/ska) (Leaving)
[20:12:23] *** Joins: panella32 (~panella32@45.130.83.194)
[20:13:24] *** Quits: o-90 (~o-90@gateway/tor-sasl/o-90) (Ping timeout: 276 seconds)
[20:14:36] *** Joins: bluedust (~bluedust@117.222.186.134)
[20:14:41] *** Quits: strugee (~strugee@ool-4575d6b1.dyn.optonline.net) (Quit: ZNC - http://znc.in)
[20:14:44] *** Quits: Abrax (~Abrax@user/abrax) (Quit: Leaving)
[20:15:17] *** Joins: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c)
[20:15:20] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[20:17:03] *** Quits: raxor2k (~raxor2k@78.158.254.45) (Remote host closed the connection)
[20:18:09] *** Quits: kts (~kts@103.73.237.237) (Quit: Konversation terminated!)
[20:18:44] *** Joins: strugee (~strugee@ool-4575d6b1.dyn.optonline.net)
[20:19:31] *** Joins: tobybl_ (~tobybl@237.202.200.146.dyn.plus.net)
[20:19:45] *** Joins: jim87 (~gfurlan@2001:b07:5d37:f91e:c08b:dbe4:b466:4b28)
[20:20:09] *** Quits: pycode (~pycode3@2001:b07:5d28:551:d4c7:4a8b:7e8d:b164) (Ping timeout: 268 seconds)
[20:20:51] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[20:21:36] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[20:21:47] *** Joins: jay-m126_ (~jay-m@41.205.30.141)
[20:21:55] *** Joins: pyeveryt_ (~pyeveryth@64-18-153-56.starry-inc.net)
[20:22:03] *** Joins: jay-m1261 (~jay-m@41.205.30.141)
[20:22:13] *** Quits: tobybl (~tobybl@237.202.200.146.dyn.plus.net) (Ping timeout: 240 seconds)
[20:22:27] <jim87> I'm quite confused... in a class I've got the following method: https://bpa.st/NXNA - in particular ProjectLoader is a QThread. It will let the app crash upon starting the thread, though if I debug-stop after the start call and wait for a second, it won't. I suspect is something to do with the destruction of the thread before its completion, though I thought that using the class instance to save it as an attribute, the garbage
[20:22:28] <jim87> collector wouldn't delete it immediately... any hints?
[20:23:04] <jim87> The method is within a MainWindwo class, which thread continues running indefinetly
[20:23:20] <wyre> hi guys, how can I set the logger to prevent the file creation when set level is INFO? https://bpa.st/UEIQ
[20:23:41] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[20:23:50] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[20:23:57] *** Joins: notjohannes (~johannes@2001:7e8:f651:4d01:5865:d416:af89:aa5f)
[20:24:02] <grym> only add the file handler when the log level is the right one
[20:24:04] <sedeki> jim87 what does ProjectLoader look like?
[20:24:06] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzzâ€¦)
[20:24:24] *** Quits: llanhmod (~developer@user/domhnall/x-2887755) (Ping timeout: 256 seconds)
[20:24:31] *** Joins: agonhajdari (~textual@user/agonhajdari)
[20:24:47] *** Quits: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net) (Ping timeout: 250 seconds)
[20:25:41] <jim87> sedeki: it's the following: https://bpa.st/N2BQ
[20:26:24] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[20:26:25] <jim87> grym: you could attach to the logger different handlers, managing level <= logging.INFO as console output and > logging.INFO as console + stream
[20:26:37] <wyre> grym, I don't get your point ...
[20:26:46] <jim87> wyre: *
[20:27:29] *** Joins: Abrax (~Abrax@user/abrax)
[20:27:38] *** Joins: tomeaton17 (~tomeaton1@BC24801E.dsl.pool.telekom.hu)
[20:28:04] <Guest40> is venv better than using conda env ?
[20:28:13] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 256 seconds)
[20:28:22] *** Quits: jay-m126_ (~jay-m@41.205.30.141) (Ping timeout: 256 seconds)
[20:28:32] *** Quits: bluedust (~bluedust@117.222.186.134) (Remote host closed the connection)
[20:28:33] <wyre> jim87, I don't get your point either ðŸ˜†
[20:28:42] <jim87> Guest40: you see, I use pipenv :D
[20:28:56] *** Quits: jay-m1261 (~jay-m@41.205.30.141) (Ping timeout: 256 seconds)
[20:29:00] *** Joins: nunggu (~q@gateway/tor-sasl/nunggu)
[20:29:14] <jim87> wyre: you can set your logger's handlers (more than one): https://docs.python.org/3/library/logging.handlers.html
[20:29:16] <SnoopJ> Guest40, they don't do the same thing
[20:29:28] <tomeaton17> hi, is it possible to change the colour scheme of seaborn heatmap so that 0 is white? because currently I have a big 2d array where majority are 0 so its hard to see small changes
[20:29:50] <Guest40> @snoop
[20:29:59] <grym> tomeaton17: sure, you should be able to define an arbitrary colormap
[20:30:03] <Guest40> SnoopJ hows the env from venv and conda activate myenvÂ  different?
[20:30:04] <grym> i forget what the option is
[20:30:04] *** Joins: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net)
[20:30:08] <wyre> jim87, shouldn't I set the filename in the basicConfig?
[20:30:10] *** Joins: beli6147 (~Thunderbi@cpe-76-175-52-6.socal.res.rr.com)
[20:30:37] *** Quits: tobybl_ (~tobybl@237.202.200.146.dyn.plus.net) (Remote host closed the connection)
[20:30:43] *** dcaro is now known as dcaro_away
[20:30:55] <tomeaton17> grym the option is called cmap, but I didn't see an example for the custom colormap
[20:31:00] <jim87> wyre: if you extend the FileHandler you can just drop the messages you don't want to log
[20:31:16] <jim87> sedeki: any idea?
[20:31:20] <sedeki> one sec
[20:32:12] <wyre> jim87, but for logging or for the object logger?
[20:32:17] <SnoopJ> Guest40, Python virtual environments are specifically about Python. conda environments are not specific to Python
[20:32:40] <wyre> jim87, I just want to don't create the file when the level is just INFO
[20:32:45] <SnoopJ> conda environments are also somewhat relocatable IIRC. venvs are *not* (you should never copy/move a venv, make a new one instead)
[20:32:49] *** Quits: pvergain (~Thunderbi@2a01:e0a:223:690:97cc:62b9:cb9a:f1d5) (Quit: pvergain)
[20:33:06] <Guest40> so what are the pro's of venvs?
[20:33:17] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Remote host closed the connection)
[20:33:19] <SnoopJ> Guest40, are you asking about the pros vs conda envs?
[20:33:24] <Guest40> ya
[20:33:33] <SnoopJ> as I said, they don't do the same thing.
[20:33:35] <akk> Guest40: conda is way more heavyweight than just making a venv, and commits you to using the conda ecosystem for nearly everything.
[20:33:43] <Guest40> okay
[20:33:52] <SnoopJ> if all you care about is having an isolated Python environment, venv solves that problem quite well.
[20:34:31] *** Joins: stwange (~j@90.253.61.76)
[20:34:34] <akk> Guest40: I'm not super clear why people use conda, but I think it's because windows users find it less confusing somehow because there's just one massive thing to install rather than several small things.
[20:34:48] *** Joins: kts (~kts@103.73.237.237)
[20:35:28] <Guest40> i started using it with machine learning when some libraries were functioning better with conda install rather than pip
[20:35:51] <akk> I watched a beginner classe that used conda so that people on all platforms would see the same thing, but then the first 2 classes ended up being devoted entirely to solving people's conda problems.
[20:36:14] <akk> Seemed like in a lot less time, they could have gotten the windows people going with regular python and pip.
[20:36:25] <Guest40> for machine learning there was some bigger speed differences, but im no expert on this obviously
[20:37:27] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Ping timeout: 276 seconds)
[20:37:28] <wyre> grym, I cannot set the FileHandler after the setLevel because logger is an object and FileHandler can be used with logging but not with logger and setLevel is for logger
[20:37:56] <Guest40> akk like this one was one of them, but this is probably fixed: https://towardsdatascience.com/stop-installing-tensorflow-using-pip-for-performance-sake-5854f9d9eb0c
[20:38:02] <ChrisWarrick> Guest40: the packages available in condaâ€™s repositories might be more optimized than the packages available in pypi due to compatibility or licensing reasons
[20:38:09] <Guest40> okay
[20:38:19] <jim87> wyre: by default basicConfig will setup a FileHandler for you with the same logging level as you define. If you want to set your handlers, you need to specify them with handlers=[handlers]
[20:38:22] *** Quits: yotsuba (~yotsuba@89-138-112-52.bb.netvision.net.il) (Remote host closed the connection)
[20:38:34] *** Quits: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl) (Ping timeout: 256 seconds)
[20:38:51] <wyre> jim87, so I shouldn't use basicConfig?
[20:38:58] *** Quits: omegatron (~some@p5484973e.dip0.t-ipconnect.de) (Quit: What happened? You quit!)
[20:39:03] *** Joins: yotsuba (~yotsuba@89-138-112-52.bb.netvision.net.il)
[20:39:26] <jim87> wyre: basicConfig(handlers=[...])
[20:39:32] <sedeki> jim87 do you get this error message? QThread: Destroyed while thread is still running
[20:39:34] *** Joins: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl)
[20:39:41] <sedeki> never mind
[20:39:52] *** Quits: tWqaq (~tWqaq@240e:389:5d1c:ff00:bff1:a9f5:7f0b:7db6) (Quit: Leaving)
[20:39:56] *** Quits: yotsuba (~yotsuba@89-138-112-52.bb.netvision.net.il) (Remote host closed the connection)
[20:40:20] <jim87> wyre: in this way you could specify a logging.FileHandler with a custom log level, though that I'm aware you can set a level threshold (>= LEVEL), not to not write a specific level (all but LEVEL)
[20:40:31] *** Joins: skapate (~Skapata@2804:14c:87b0:a6f9:406a:ebc:a997:9963)
[20:40:31] *** Quits: skapate (~Skapata@2804:14c:87b0:a6f9:406a:ebc:a997:9963) (Changing host)
[20:40:31] *** Joins: skapate (~Skapata@user/skapata)
[20:41:27] <akk> That's a shame if the pip version of tensorflow is really that much slower. Would be nice to find a way around that that didn't require switching everything to conda.
[20:42:06] <sedeki> jim87 why aren't you using the signal finished instead?
[20:42:22] *** Joins: yotsuba (~yotsuba@89-138-112-52.bb.netvision.net.il)
[20:42:26] <jim87> sedeki: can finished emit an object?
[20:42:41] <wyre> jim87, but what are the elements inside the handlers list? logging.FileHandler and logging.StreamHandler?
[20:42:49] <ChrisWarrick> akk: of course it can be done, with some manual tinkering
[20:42:57] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[20:43:02] <sedeki> jim87 yes you can obtain the object returned from run
[20:43:08] <sedeki> hang on
[20:43:26] *** Quits: yotsuba (~yotsuba@89-138-112-52.bb.netvision.net.il) (Remote host closed the connection)
[20:43:44] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[20:44:05] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 256 seconds)
[20:44:06] <jim87> wyre: if you want file log only, FileHandler, otherwise a StreamHandler can be used to output to console
[20:44:57] *** Joins: yotsuba (~yotsuba@89-138-112-52.bb.netvision.net.il)
[20:44:59] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[20:45:00] <jim87> I've never tried, though you could set the basicConfig as you have right now and set the handlers=[FileHandler(...)] only, as your basicConfig will show only one handler
[20:45:04] *** lukedashjr is now known as luke-jr
[20:45:09] *** Joins: jay-m126_ (~jay-m@41.205.30.141)
[20:45:24] <jim87> wyre: https://bpa.st/FE7Q
[20:45:34] *** Joins: jay-m1261 (~jay-m@41.205.30.141)
[20:46:12] <akk> https://twitter.com/anacondainc/status/1075163048577515520 suggests that maybe pip installing intel's "mkl-dinn lib" would get you the speed the conda version has
[20:46:45] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[20:47:24] <akk> but searching on pypi for mkl-dinn finds a mkl and a dinn plus 15 pages of other stuff that I'm not going to click through ... I so wish they'd fix the commandline pip search!
[20:47:35] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[20:47:38] <grym> akk: https://pypi.org/project/pip-search/
[20:49:34] *** Quits: AlanMD (~AlanMD@86.121.179.183) (Remote host closed the connection)
[20:50:02] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[20:50:08] *** Quits: Guest40 (~Guest40@dyx0pyychxmp3hkfq09qt-3.rev.dnainternet.fi) (Quit: Client closed)
[20:50:13] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 240 seconds)
[20:50:21] <akk> grym: Thanks, good to know! Unfortunately the output is formatted in a not very useful way; maybe I'll find the source and customize it.
[20:50:29] <wyre> jim87, https://bpa.st/BNLA this still creates the file despite there is only logger.debug() and loglevel is set to INFO in the basicConfig()
[20:50:29] *** Joins: AlanMD (~AlanMD@86.121.179.183)
[20:50:37] *** Quits: jay-m1261 (~jay-m@41.205.30.141) (Ping timeout: 240 seconds)
[20:51:02] *** Quits: jay-m126_ (~jay-m@41.205.30.141) (Ping timeout: 256 seconds)
[20:51:20] <sedeki> jim87 i was thinking about another class. no, QThread does not provide resultReady out of the box.
[20:51:34] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[20:52:08] *** Joins: trace (~trace@91.66.151.109)
[20:52:43] *** Quits: panella32 (~panella32@45.130.83.194) (Quit: Textual IRC Client: www.textualapp.com)
[20:53:09] <sedeki> jim87 i'd assume that the slot `on_done` is the problem. it's defined on the main thread, but called from the QThread
[20:53:31] *** Joins: someuser (~user@197.54.72.145)
[20:54:13] *** Quits: trace987 (~trace@dynamic-002-247-251-145.2.247.pool.telefonica.de) (Ping timeout: 240 seconds)
[20:54:21] <sedeki> if i'm not mistaken
[20:54:58] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Quit: SO LONG SUCKERS!)
[20:54:58] <sedeki> can you debug it?
[20:55:33] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzzâ€¦)
[20:55:53] *** Quits: sedeki (~textual@user/sedeki) (Quit: Textual IRC Client: www.textualapp.com)
[20:58:18] *** Joins: agonhajdari (~textual@user/agonhajdari)
[20:58:49] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[20:59:01] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[20:59:47] <Deneb> how do I set the exact plot limits in matlib? I am setting plt.ylim([-5,5]), but the grid is showing approximately -4.5 to +4.5
[21:00:19] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[21:00:34] <Deneb> *matplotlib
[21:00:51] *** Quits: stonkey (~stonkey@user/stonkey) (Remote host closed the connection)
[21:02:46] <SnoopJ> Deneb, ylim() should set the limits, but it may not draw ticks on the axis where you're expecting them by default
[21:04:05] *** Joins: semeion (~semeion@user/semeion)
[21:04:16] *** Joins: marcello42 (~mp@2001:1a81:12ec:f000:b283:2eaa:9318:3447)
[21:05:14] <wyre> grym, I guess you say something like this, right? https://bpa.st/HWRA
[21:05:17] <Deneb> SnoopJ: ok, so how do I force it to draw the ticks. I need to be able to draw a fixed grid
[21:05:32] *** Quits: stockholm (~Andreas@p200300d2c70a25009d01787bf32ef4cc.dip0.t-ipconnect.de) (Remote host closed the connection)
[21:05:44] *** Joins: stockholm (~Andreas@p200300d2c70a25009d01787bf32ef4cc.dip0.t-ipconnect.de)
[21:05:46] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[21:05:53] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[21:05:58] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[21:06:17] <grym> wyre: you're on the right track with conditionally adding the handler, but why not detect the desired loglevel first and then set one (or more) handlers based on that
[21:06:44] <SnoopJ> Deneb, it should draw ticks by default. If you want to change where they're located, yticks() can do that. I recommend consulting the matplotlib gallery, there are a number of examples that should give you some ideas
[21:06:45] <akk> Is it considered bad style to import inside a function? For instance, if the package is only needed in that one function?
[21:06:54] *** Joins: cthulchu (~Cthulchu@216.239.164.82)
[21:06:58] <grym> akk: it's not verboten but you do need a good reason
[21:07:08] <grym> without a really good reason otherwise, imports at the top
[21:07:09] <SnoopJ> akk, it often is, because the import won't run (and indicate the failure) until the function does
[21:07:09] <wyre> grym, like with getLevel? ðŸ¤”
[21:07:15] *** Quits: tomeaton17 (~tomeaton1@BC24801E.dsl.pool.telekom.hu) (Quit: Client closed)
[21:07:21] <SnoopJ> but occasionally the import itself is part of the function's work.
[21:07:32] *** Joins: fikran (~fikran@user/fikran)
[21:07:37] <akk> SnoopJ: Good point, hmm.
[21:07:41] <SnoopJ> s/indicate the failure/indicate a potential failure/
[21:07:53] <grym> wyre: there are lots of ways to get a user's desired logging level
[21:07:56] <wyre> grym, I mean ... is there something like that?
[21:08:05] <SnoopJ> akk, it's also just annoying to read. I expect to see what a module needs at the top of it and I am unpleasantly surprised when it's not-there
[21:08:14] <grym> wyre: you could ask them to pass one in on application startup, you could sniff an envvar, ...
[21:08:18] <wyre> grym, but are you talking about command line arguments?
[21:08:18] <SnoopJ> unless there's a compelling reason that it can't/shouldn't be
[21:08:32] <akk> SnoopJ: Is there a better way of handling a dependency that's only needed in certain cases?
[21:08:35] <grym> wyre: that's one option
[21:08:45] <grym> akk: an extra
[21:08:53] <wyre> grym, but this is a script that will be auto executed to pass polybar a text output
[21:09:01] <grym> wyre: then an envvar
[21:09:05] <grym> (could work)
[21:09:19] <SnoopJ> akk, `if certain_case_predicate(): from lib import thing; else: thing = None` or something along those lines
[21:09:26] <wyre> but ... anyway this is not apparently working as I expected
[21:10:08] <akk> SnoopJ: Where? In __main__  after parsing the args?
[21:10:08] <SnoopJ> akk, if the imported thing is necessary for the function, it might make sense to not even define the function when the condition is not met. Or there's the possibility of extras as grym pointed out. There aren't one-size-fits-all answers to this kind of thing, it depends very strongly on details
[21:10:15] <Deneb> SnoopJ: its the library documentation that I am trying to follow - with some difficulty. There seems to be no function that allows me to specify that I want a grid with range -4/+4 on the Y axis and -5/+5 on the X -axis.  If I specify 0-10 it will draw with a starting position of 0 and ending at 10. If I specify -5,+5 then it draws from -4.5 to +4.5. Does not make sense?
[21:10:45] *** Quits: Major_Biscuit (~MajorBisc@c-001-029-007.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.3)
[21:10:53] <Deneb> I also tried -5.5, +5.5 but that made no difference
[21:10:56] <akk> The specific case here: pip_search uses rich for printing its table. But I'm adding an option to run it and get results back, without printing the table, so rich isn't needed except in the table-printing cases.
[21:11:18] <SnoopJ> Deneb, limits and ticks are completely separated from each other. The grid you are asking about will require you to control both. If you want gridlines too, there's grid().
[21:11:34] *** Quits: natewrench123456 (~joshu@cpe-72-228-153-194.buffalo.res.rr.com) (Quit: Leaving)
[21:13:42] <SnoopJ> limits are about the extent of the data shown, ticks are about where the actual ticks (and their associated labels) are drawn
[21:14:08] <SnoopJ> demo on controlling ticks: https://matplotlib.org/stable/gallery/ticks/major_minor_demo.html
[21:14:17] *** Quits: rendar (~rendar@user/rendar) (Quit: rebooting)
[21:14:23] *** Joins: FluffyMask (~masque@user/fluffymask)
[21:14:39] *** Joins: MarderIII (~MarderIII@2001:985:e889:1:cd63:581e:b8dd:6c01)
[21:14:41] *** Joins: Warkruid (~MarderIII@2001:985:e889:1:cd63:581e:b8dd:6c01)
[21:14:50] <SnoopJ> the default behavior has a bit of a preference for not drawing ticks at the extremes of the y-axis (i.e. the very top and very bottom)
[21:15:29] *** Quits: pyeveryt_ (~pyeveryth@64-18-153-56.starry-inc.net) (Remote host closed the connection)
[21:15:51] *** Joins: rendar (~rendar@user/rendar)
[21:15:58] *** Quits: inomoz (~inomoz@176.59.115.63) (Quit: WeeChat 3.4)
[21:17:14] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[21:17:34] *** Joins: bluedust (~bluedust@117.222.186.134)
[21:17:34] *** Joins: jay-m126_ (~jay-m@41.205.30.141)
[21:17:48] *** Joins: kyberlaw (~kyberlaw@ool-18bc3951.dyn.optonline.net)
[21:18:00] *** Quits: kyberlaw (~kyberlaw@ool-18bc3951.dyn.optonline.net) (Client Quit)
[21:18:22] *** Quits: Warkruid (~MarderIII@2001:985:e889:1:cd63:581e:b8dd:6c01) (Client Quit)
[21:18:35] *** Joins: sharksauce (sharksauce@user/sharksauce)
[21:19:22] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 256 seconds)
[21:19:38] <Pici> I shoveled.  (un)forunately there wasn't enought to snowblow
[21:19:55] <Deneb> SnoopJ: yes I can see that. It always seems to add (or remove) a little extra above and below the last tick. I am trying to figure out how to overcome that behaviour. Will continue to experiment.
[21:20:10] *** Quits: marcello42 (~mp@2001:1a81:12ec:f000:b283:2eaa:9318:3447) (Quit: WeeChat 3.4)
[21:20:13] *** Joins: kevr` (~kevr@user/kevr)
[21:20:21] *** Quits: kevr (~kevr@user/kevr) (Ping timeout: 276 seconds)
[21:20:38] *** Quits: vishwin (~brioux@2001:470:1f07:302::1) (Quit: < debdrup> What is this /quit thing?)
[21:20:44] <Deneb> it also seems to draw the X axis in steps of 2 and I need them to be in steps of 1.....
[21:21:26] *** Joins: vishwin (~brioux@pool-108-36-200-79.phlapa.fios.verizon.net)
[21:22:37] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 240 seconds)
[21:22:46] *** Quits: jay-m126_ (~jay-m@41.205.30.141) (Ping timeout: 256 seconds)
[21:23:51] <mat001_> nedbat: Remember yesterday I asked how do we know which Py lang versions a particular library supports. Maybe that's obvious to some, but I didn't know. It's in PyPI: go to package manager for your lib > release history > open your relase > in the side navigation you see which language versions that lib supports
[21:23:53] *** Joins: Guest40 (~Guest40@dyx0pyychxmp3hkfq09qt-3.rev.dnainternet.fi)
[21:24:28] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 256 seconds)
[21:24:31] *** Quits: nomic (~nomic@185.198.243.165) (Quit: Leaving)
[21:24:55] <Guest40> err how do I reverse a dictionary keeping it in same parameter? big_dic = {value: key for key, value in big_dic.items()}Â  goes to a new id(). and dictionar[:] is not hashable obviously
[21:25:27] *** Joins: pyeveryt_ (~pyeveryth@64-18-153-56.starry-inc.net)
[21:25:40] <Pici> well this wasn't the channel I meant to post my frozen precipitation update in, sorry about that.
[21:25:40] *** Quits: Vonter (~Vonter@user/vonter) (Quit: WeeChat 3.4)
[21:25:41] <han-solo> why do you want to do that ?
[21:25:59] <Guest40> han-solo if you are answering me, its just course exercise
[21:26:21] <han-solo> i see
[21:26:22] <wyre> grym, what do you think now? https://bpa.st/EJ2Q
[21:26:23] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[21:26:25] <ba> Guest40: the course exercise asks you to invert the dict in-place?
[21:26:29] <Guest40> yes
[21:26:37] <grym> Guest40: what... course is this
[21:26:49] <Guest40> just uni course in python i need to pass
[21:27:01] <grym> wyre: how do i pass in DEBUG
[21:27:13] *** Quits: pyeveryt_ (~pyeveryth@64-18-153-56.starry-inc.net) (Remote host closed the connection)
[21:28:18] *** Joins: pyeveryt_ (~pyeveryth@64-18-153-56.starry-inc.net)
[21:28:19] <ba> Guest40: Best I can do: `temp = big_dic.copy(); big_dic.clear(); big_dic.update({value: key for key, value in temp.items()})`
[21:28:26] *** Joins: junebug (~junebug@2600:1700:3db0:2540:cb8d:512c:a4b1:ec43)
[21:28:44] <grym> Guest40: but note, nobody actually _does_ this ^
[21:28:57] <ba> Guest40: but I do think you've misunderstood the question that's been set. Either that or your lecturer is a psychopath
[21:29:01] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[21:29:03] <han-solo> `dict(reversed(d.items()))` # but...
[21:29:11] <ba> Also maybe rename the variable to something other than `big_dic` before you turn this in
[21:29:12] <han-solo> which is weird thing to do
[21:29:28] <junebug> lol
[21:29:39] <wyre> grym, you don't pass, you have to modify the file, I just want this because sometimes I want to extend it and I need some feedback that I prefer to be into a separete log file
[21:30:08] <The-Compiler> han-solo: that would build a new dict though
[21:30:10] *** Quits: Galladite (~Galladite@host-92-24-75-159.as13285.net) (Remote host closed the connection)
[21:30:11] *** Quits: nurupo (~nurupo.ga@user/nurupo) (Quit: nurupo.ga)
[21:30:18] <han-solo> oh, inplace
[21:30:25] *** Joins: nurupo (~nurupo.ga@user/nurupo)
[21:30:28] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[21:30:37] *** Joins: megaTherion (~therion@unix.io)
[21:30:39] <wyre> I don't see useful to include a callable debug feature because I'm running it manually
[21:30:57] <Guest40> ba grym thanks:D Â  seems to work, so update() keeps it in-place
[21:31:01] <wyre> but of course maybe a click argument is a good new feature
[21:31:05] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[21:31:19] *** Joins: hams (~hams@user/hams)
[21:31:50] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 256 seconds)
[21:32:00] <ba> Guest40: indeed!
[21:32:42] *** Quits: CombatVet (~c4@user/combatvet) (Ping timeout: 276 seconds)
[21:32:44] <The-Compiler> Guest40: FWIW I teach Python at an university, and this is... a very weird thing to ask for
[21:32:45] *** Joins: CombatVet_ (~c4@user/combatvet)
[21:32:49] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 256 seconds)
[21:32:52] *** Joins: aesophod (~aesophod@c-73-171-105-136.hsd1.va.comcast.net)
[21:33:03] *** lukedashjr is now known as luke-jr
[21:33:30] *** CombatVet_ is now known as CombatVet
[21:34:09] *** Quits: fearnothing (~fearnothi@user/fearnothing) (Ping timeout: 268 seconds)
[21:35:14] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[21:37:31] <han-solo> oh, i think i totally missed the question
[21:37:36] <rama> same
[21:37:57] *** Quits: junebug (~junebug@2600:1700:3db0:2540:cb8d:512c:a4b1:ec43) (Ping timeout: 240 seconds)
[21:37:57] <Swayze> i thought big_dic was funny
[21:38:02] <Swayze> but we dont have to talk about that
[21:38:03] <han-solo> they didn't want the order the dict to be reversed, but the key value pair...
[21:38:32] <rburton> well, dictionaries are unordered, so that makes sense
[21:38:36] <renlo> whats the mathematical term for that
[21:38:37] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:acd5:fce0:a19c:de74) (Ping timeout: 240 seconds)
[21:38:41] <renlo> surjoint or something?
[21:38:50] *** Joins: cheater (~Username@user/cheater)
[21:38:54] <han-solo> which is not uncommon, to have a reverse lookup table, right ?
[21:39:28] <Wooble> rburton: they're not unordered any more.
[21:39:58] <phy1729> renlo: injective mappings hit each y at most once
[21:40:45] <renlo> phy1729: thanks, was thinking 'surjective' (its not surjective)
[21:41:01] <phy1729> that's hits each y at least once
[21:41:12] <rburton> Wooble: oh yeah, they preserve insertion order don't they
[21:41:18] <han-solo> 3.6+
[21:41:24] <grym> 3.7+
[21:41:29] <Wooble> rburton: which makes it pretty tricky to change that order in place :)
[21:41:32] <han-solo> 3.6 was side effect ?
[21:41:55] <han-solo> i vaguely remember seeing that in 3.6, maybe i'm misremembering
[21:41:58] <Wooble> han-solo: technically it was an implementation detail of every single implementation.
[21:42:12] <han-solo> Wooble: oh, Okay
[21:42:17] <renlo> undefined behavior bad
[21:42:36] *** Quits: iomari891 (~iomari891@197.210.54.48) (Ping timeout: 256 seconds)
[21:42:48] *** Joins: omegatron (~some@p5484973e.dip0.t-ipconnect.de)
[21:42:50] <Wooble> plus it was *pretty much* required since kwargs was guaranteed to be ordered and what psycho is going to implement kwargs as a non-dict?
[21:43:09] <grym> Wooble: Deneb:
[21:43:12] <grym> Wooble: err, deniska
[21:43:17] <grym> probably for giggles
[21:43:30] <grym> (it would be kind of funny!)
[21:44:05] *** Quits: bluedust (~bluedust@117.222.186.134) (Remote host closed the connection)
[21:44:20] *** Joins: semeion (~semeion@user/semeion)
[21:44:38] *** Quits: novapy (~gerrit@c-68-62-193-246.hsd1.fl.comcast.net) (Quit: Lost terminal)
[21:45:59] *** Quits: dvx (~dvx@5.181.92.64) (Quit: dvx)
[21:47:01] <Deneb> SnoopJ: got the point you were making about separation of ticks and limits and I think I have it now - almost.
[21:47:36] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[21:47:41] <deniska> grym: I doubt python gives that kind of control to the python code :)
[21:47:54] *** Quits: portalrat (~portalrat@user/portalrat) (Quit: Leaving)
[21:48:23] <derelict> hi guys, im working with multithreading in python to solve a specific problem and needed some guidance. Given a specific daemon process, lets call it GLB, that receives arbitrary jobs, call them Exp, which decompose into even more subtasks, would it be possible to have one thread pool that shares both Exp tasks and their subtasks? note here that the Exp task must wait for its subtasks before
[21:48:25] <derelict> resolving. Thanks for the help!
[21:48:26] <deniska> Speaking of fun things I recently discovered, python doesn't complain if __new__ is an `async def`
[21:48:32] *** Joins: novapy (~gerrit@c-68-62-193-246.hsd1.fl.comcast.net)
[21:48:35] *** Joins: ikus060 (~ikus060@96.127.228.230)
[21:48:49] *** Joins: bloody (~bloody@user/bloody)
[21:49:00] <Deneb> SnoopJ: ...its just not drawing the final tick value, but at least I am getting the correct grid now
[21:49:54] <Wooble> deniska: I think in this hypthetical you'd be making your own implementation
[21:51:36] *** Joins: inomoz (~inomoz@176.59.115.63)
[21:51:49] *** Quits: aesophod (~aesophod@c-73-171-105-136.hsd1.va.comcast.net) (Quit: Bye)
[21:53:11] *** Joins: Guest31 (~Guest31@pool-96-253-74-73.rcmdva.fios.verizon.net)
[21:53:17] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[21:53:35] *** Quits: Guest31 (~Guest31@pool-96-253-74-73.rcmdva.fios.verizon.net) (Client Quit)
[21:53:43] *** Joins: Guest31 (~Guest31@pool-96-253-74-73.rcmdva.fios.verizon.net)
[21:53:44] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[21:53:48] *** Joins: whaley (~whaley@cpe-76-182-165-20.sc.res.rr.com)
[21:56:33] *** Joins: natewrench123456 (~joshu@cpe-72-228-153-194.buffalo.res.rr.com)
[21:56:46] *** Quits: gasbag (~gasbag@024-216-149-125.res.spectrum.com) (Ping timeout: 256 seconds)
[21:56:55] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[21:56:57] *** Quits: esther (~esther@24-155-112-236.dyn.grandenetworks.net) (Ping timeout: 240 seconds)
[21:56:58] <han-solo> a coroutine object ? https://bpa.st/FPPQ
[21:57:05] <han-solo> oh it doesn't get to __init__ i guess ?
[21:57:22] *** Joins: aslicedbanjo (~aslicedba@host86-160-16-37.range86-160.btcentralplus.com)
[21:58:01] <han-solo> i already have a mild headache
[21:59:02] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[21:59:19] <ktosiek> han-solo: async def __new__? That's... interesting
[21:59:27] *** Quits: TML (~tml@user/tml) (Ping timeout: 250 seconds)
[21:59:52] <han-solo> ktosiek: yeah
[21:59:53] <han-solo> 23:48 < deniska> Speaking of fun things I recently discovered, python doesn't complain if __new__ is an `async def`
[22:00:01] <ktosiek> oh wait, but would it work if you await it? twice?
[22:00:59] *** Joins: schumaml (~schumaml@p200300e2ef1de00053c1821a43d17d29.dip0.t-ipconnect.de)
[22:01:17] <deniska> I mean, in hindsight it's kinda obvious how it works, you are free to return whatever from __new__, and that can be an awaitable
[22:02:26] * han-solo nods
[22:03:27] *** Joins: esther (~esther@24-155-112-236.dyn.grandenetworks.net)
[22:03:40] *** Joins: zer0bitz (~zer0bitz@196.244.192.57)
[22:03:47] *** Joins: raxor2k (~raxor2k@78.158.254.45)
[22:03:53] <ktosiek> yeah, I'm still not used to this. Even after using factoryboy (where BlahFactory() typically returns a Blah)
[22:04:33] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Ping timeout: 276 seconds)
[22:06:50] *** Joins: TML (~tml@user/tml)
[22:07:59] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[22:09:28] <Timvde> I have a function that creates an object that can be used as a context manager, but it _can_ also return None if the object cannot be created. Is there a way to wrap it so I can safely use it in a context manager anyway?
[22:10:28] <Timvde> (more specifically: https://docs.paramiko.org/en/stable/api/sftp.html#paramiko.sftp_client.SFTPClient.from_transport)
[22:10:28] *** Joins: jello (~joe@cpe-67-247-57-25.nyc.res.rr.com)
[22:10:32] *** Quits: lmmx (~louis@host-92-5-43-207.as13285.net) (Remote host closed the connection)
[22:10:52] *** Joins: lmmx (~louis@host-92-5-43-207.as13285.net)
[22:11:13] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[22:11:49] *** Quits: notjohannes (~johannes@2001:7e8:f651:4d01:5865:d416:af89:aa5f) (Quit: See you later!)
[22:11:55] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 256 seconds)
[22:12:07] *** Joins: Macuser (~Macuser@2600:1003:b445:790e:64d3:be9f:a6c5:ce5a)
[22:12:13] <jello> hello, i have a list of dicts where each dict has a key of record_id. How do I transform it into a dict, keyed by the record_id, with the value as a list of dicts that have that record_id key?
[22:12:55] <jello> something like new = { rec['record_id']: [rec] for rec in old }
[22:12:56] <han-solo> maybe `collections.defaultdict(list)`
[22:13:21] <jello> except I need that list to append instead of replace...
[22:13:21] <han-solo> assuming, there maybe more than one dict in the list that have same record_id with different values
[22:13:28] <han-solo> yes...
[22:14:29] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[22:15:03] <jello> so, new = collections.defaultdict(list); then for rec in old: new[old['record_id']].append(rec)
[22:15:56] <han-solo> jello: https://bpa.st/SD5A
[22:15:57] *** Quits: Harlin__ (~DonQixote@75-163-135-150.clsp.qwest.net) (Quit: Leaving)
[22:16:27] *** Quits: hams (~hams@user/hams) (Ping timeout: 256 seconds)
[22:16:58] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[22:17:32] <jello> han-solo: not quite. I want d[1] = [ {record_id:1,value:1}, {record_id:1,value:42} ]
[22:18:25] <han-solo> sure, `for rec in that_list: d[rec['record_id']].append(rec)` then ?
[22:18:53] <jello> yup! `for item in l: d[item['record_id']].append(item)`
[22:18:57] *** Quits: inomoz (~inomoz@176.59.115.63) (Ping timeout: 240 seconds)
[22:18:58] <jello> thanks han-solo !
[22:19:58] <lantech19446> I have the line in my code filename = report.html why is it telling me that report.html isn't defined?
[22:20:05] <jello> quotes
[22:20:11] <jello> filename = 'report.html'
[22:20:22] <lantech19446> shit you're right, thank you
[22:20:30] *** Parts: jello (~joe@cpe-67-247-57-25.nyc.res.rr.com) ()
[22:20:35] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[22:21:08] <ktosiek> Timvde: that returns None instead of rising an exception? Documentation suggests it only returns an SFTPClient
[22:21:11] *** Quits: yotsuba (~yotsuba@89-138-112-52.bb.netvision.net.il) (Quit: Leaving)
[22:21:18] *** Joins: yotsuba-chan (~yotsuba@89-138-112-52.bb.netvision.net.il)
[22:21:35] *** Quits: han-solo (~han-solo@user/han-solo) (Quit: leaving)
[22:21:48] <Timvde> ktosiek: https://github.com/paramiko/paramiko/blob/13f28d65894e7737b01999a7475dccc71078c734/paramiko/sftp_client.py#L141-L168
[22:21:51] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[22:22:39] <SnoopJ> Deneb, it can be a little idiosyncratic when you're first getting used to it. In the worst case scenario, you should be able to tell matplotlib explicitly where to put major/minor ticks by passing it a sequence
[22:22:56] <lantech19446> I could cry, I got my first get request to work :)
[22:23:24] *** Quits: Pddy (~Pddy@user/SmplyPddy) (Quit: bye)
[22:23:42] <ktosiek> Timvde: that calls t.open_session, which calls Transport.open_channel, which raises on error
[22:23:49] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 240 seconds)
[22:23:51] *** Quits: Guest40 (~Guest40@dyx0pyychxmp3hkfq09qt-3.rev.dnainternet.fi) (Quit: Client closed)
[22:24:23] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 256 seconds)
[22:24:46] <ktosiek> but, back to your original question: sure, you can do a def my_from_transport(...): client = SFTP.from_transport(...); if client: return client; else: raise ...
[22:25:12] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[22:25:34] *** Joins: mmercer (daemoen@2605:d100:0:2d:5054:ff:fef0:3953)
[22:25:35] *** Quits: ikus060 (~ikus060@96.127.228.230) (Quit: Leaving)
[22:25:41] *** Quits: bytehackr (~Sandipan@43.252.250.86) (Remote host closed the connection)
[22:25:50] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[22:26:05] *** Joins: mickey8 (~user@user/mickey)
[22:26:10] <Timvde> Hmm, I was already trying to do the same, but by creating a context manager myself, but maybe that's overkill...
[22:27:23] <ktosiek> if you create a context manager with @contextmanager, then you can do delegation with a with: with other_ctx_manager as ctx: yield ctx
[22:28:11] <ktosiek> but yeah, if you rise on None then it's an overkill. And if you want to return None on None, I'd just make a separate none_ctx_manager :-)
[22:29:39] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[22:30:37] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[22:31:10] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[22:31:45] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[22:32:08] *** Quits: raxor2k (~raxor2k@78.158.254.45) (Remote host closed the connection)
[22:32:17] *** Joins: eastbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[22:32:23] *** Quits: eastbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Client Quit)
[22:32:52] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[22:33:36] *** Quits: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net) (Ping timeout: 256 seconds)
[22:33:53] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[22:33:57] *** Joins: Xano_ (~Xano@159.48.55.205)
[22:34:40] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[22:36:17] *** Quits: jmd (~user@de.cellform.com) (Ping timeout: 240 seconds)
[22:36:19] <lantech19446> I really don't understand just what BeautifulSoups raison d'etre is I've been told that I can use it for scraping but the documentation doesn't seem to enter that realm much
[22:36:41] *** Joins: sgt_chuckles (~sgt_chuck@pool-71-190-209-205.nycmny.fios.verizon.net)
[22:37:03] *** Quits: Xano (~Xano@2a00:23c4:4204:700:6164:2f0b:cac:1406) (Ping timeout: 268 seconds)
[22:37:10] *** Joins: hams (~hams@user/hams)
[22:37:52] *** Joins: thurs80601421053 (~thurs@ip68-225-209-147.ph.ph.cox.net)
[22:37:57] *** Quits: pro_z (~pro_z@37.214.50.58) (Ping timeout: 240 seconds)
[22:38:42] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[22:38:55] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[22:39:28] <Pilate> lantech19446 its an html parser not really a scraper, you do the scraping and send the data to bs
[22:39:48] *** Joins: tscopp (~tms@c-76-115-26-235.hsd1.or.comcast.net)
[22:39:50] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[22:40:05] <lantech19446> so its really not what I want then I want something to do the scraping
[22:40:38] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:d8d0:8961:1968:a5eb)
[22:40:46] *** Quits: baltazar (~baltazar@84-236-61-122.pool.digikabel.hu) (Ping timeout: 268 seconds)
[22:41:12] *** Quits: hams (~hams@user/hams) (Client Quit)
[22:41:32] *** Joins: hams (~hams@c-73-255-22-88.hsd1.tx.comcast.net)
[22:41:32] *** Quits: hams (~hams@c-73-255-22-88.hsd1.tx.comcast.net) (Changing host)
[22:41:32] *** Joins: hams (~hams@user/hams)
[22:41:50] *** Quits: natewrench123456 (~joshu@cpe-72-228-153-194.buffalo.res.rr.com) (Quit: Leaving)
[22:42:14] *** Joins: baltazar (~baltazar@193-226-249-203.pool.digikabel.hu)
[22:43:45] *** Joins: Harlin (~DonQixote@75-163-135-150.clsp.qwest.net)
[22:44:00] *** Quits: lmmx (~louis@host-92-5-43-207.as13285.net) (Remote host closed the connection)
[22:44:20] *** Joins: lmmx (~louis@host-92-5-43-207.as13285.net)
[22:46:23] <TML> lantech19446: scrapy
[22:46:36] <TML> https://scrapy.org/
[22:46:53] <TML> BeautifulSoup is how you parse what the scraper gave you
[22:47:03] <TML> Oh, Pilate already said that :)
[22:47:26] <lantech19446> so conceivably I could make it spit out into a spreadsheet using bs4?
[22:47:33] *** Joins: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com)
[22:48:57] *** Joins: pycode (~pycode3@2001:b07:5d28:551:2341:8ea4:148e:86d8)
[22:49:03] *** Quits: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com) (Client Quit)
[22:49:49] *** Joins: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com)
[22:50:15] *** Joins: dfkfs (~dfkfs@178.49.152.151)
[22:50:41] <akk> lantech19446: Yes, like you can search for the columns in an html table, turn those into list or dictionary items, then write that into whatever spreadsheet format you want.
[22:50:46] <SnoopJ> the "spreadsheet" part will require other tools like the csv module or openpyxl
[22:50:56] <lantech19446> ok
[22:51:06] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[22:51:07] <SnoopJ> BS4 focuses on turning HTML source into a representation of the document
[22:51:20] <SnoopJ> (which you can search over, etc.)
[22:51:20] *** Joins: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net)
[22:51:25] *** Quits: sgt_chuckles (~sgt_chuck@pool-71-190-209-205.nycmny.fios.verizon.net) (Quit: Client closed)
[22:51:49] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 240 seconds)
[22:52:08] *** Joins: Galladite (~Galladite@host-92-24-75-159.as13285.net)
[22:52:26] <lantech19446> so I need to get the page using get then beautifulsoup to make it searchable and then scrapy searches the beautifulsoup output?
[22:52:52] *** Quits: hams (~hams@user/hams) (Ping timeout: 256 seconds)
[22:53:58] *** Joins: tomaw (tom@libera/staff/tomaw)
[22:54:35] *** Joins: hams (~hams@c-73-255-22-88.hsd1.tx.comcast.net)
[22:54:35] *** Quits: hams (~hams@c-73-255-22-88.hsd1.tx.comcast.net) (Changing host)
[22:54:35] *** Joins: hams (~hams@user/hams)
[22:54:55] <akk> lantech19446: You don't need scrapy.
[22:56:10] <lantech19446> akk if I want to scrape a site automatically I don't want to have to comb the output and compile it myself, how would I do it without scrapy? The way it's being explained to me beautifulsoup won't meet that function
[22:57:44] <SnoopJ> lantech19446, if you're using scrapy at all, I would avoid beautifulsoup entirely. Scrapy has better tools and less jank.
[22:57:47] *** Joins: Auron (~Auron956@user/auron)
[22:57:48] <akk> lantech19446: Just look at the structure of the page (using View Source) and figure out where the data are that you want and how to recognize that data.
[22:57:49] *** Quits: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net) (Ping timeout: 256 seconds)
[22:58:00] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Quit: jmiehe)
[22:58:09] <SnoopJ> scrapy does both the "go get that document" and "parse that document" parts
[22:58:22] <SnoopJ> and it supports XPath ðŸ’™
[22:58:42] <akk> lantech19446: For instance, if there's a <table id="addresses"> and every row has first column being a name, second column is street address, third column is city, etc. then that's really easy to read in BS.
[22:58:59] <SnoopJ> you can get by just grabbing a document with the `requests` library and parsing it with BS4 or lxml, though, if you find scrapy to be a lot of library.
[22:59:01] <lantech19446> SnoopJ: yesterday I was told that it wouldn't pull from a url that I needed requests for that, that's why I wrote it that way lol
[22:59:06] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[22:59:38] <akk> lantech19446: Depends on whether your "it" is BS or scrapy, seems like you're mixing libraries
[22:59:43] <SnoopJ> lantech19446, whoever told you that gave you bad information. I don't know if scrapy uses requests on your behalf, but it most certainly will retrieve documents from URLs, that's one of its main functionalities.
[23:00:29] *** Joins: georgios (~georgios@user/georgios)
[23:01:43] *** Joins: nomic (~nomic@185.198.243.165)
[23:05:40] <ali1234> is there a gui library that has a very easy to use spreadsheet widget?
[23:05:49] <lantech19446> OI OK
[23:05:56] <lantech19446> sorry didn't mean caps
[23:06:46] <ali1234> well, by spreadsheet i mean table and "easy" i mean it just has an array inside it
[23:07:09] <ali1234> so definitely not Qt or Gtk
[23:07:11] *** Joins: pycode1 (~pycode3@93-40-5-81.ip36.fastwebnet.it)
[23:08:17] *** Quits: novapy (~gerrit@c-68-62-193-246.hsd1.fl.comcast.net) (Quit: Lost terminal)
[23:08:44] *** Quits: pycode (~pycode3@2001:b07:5d28:551:2341:8ea4:148e:86d8) (Ping timeout: 252 seconds)
[23:08:51] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[23:11:25] *** Quits: cthulchu (~Cthulchu@216.239.164.82) (Ping timeout: 256 seconds)
[23:12:18] *** Joins: cthulchu (~Cthulchu@216.239.164.82)
[23:13:11] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[23:13:26] *** Joins: portalrat (~portalrat@user/portalrat)
[23:14:49] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[23:16:53] *** Joins: fikran (~fikran@user/fikran)
[23:17:01] *** Quits: pycode1 (~pycode3@93-40-5-81.ip36.fastwebnet.it) (Ping timeout: 240 seconds)
[23:18:52] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[23:21:05] *** Quits: portalrat (~portalrat@user/portalrat) (Quit: Leaving)
[23:21:12] *** Quits: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com) (Quit: ThePhilgrim)
[23:21:39] *** Joins: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com)
[23:21:46] *** Quits: dntreou (~yakiza@102-65-62-237.ftth.web.africa) (Ping timeout: 256 seconds)
[23:22:00] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[23:22:24] <BinarySavior> how does q.task_done() break a while True loop?
[23:23:08] *** Joins: inomoz (~inomoz@176.59.103.141)
[23:23:45] *** Joins: dntreou (~yakiza@102-65-62-43.ftth.web.africa)
[23:23:50] *** Quits: paul424 (~tom@ip-5-172-239-219.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[23:24:57] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 240 seconds)
[23:26:42] <TML> What is `q`?
[23:26:48] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[23:27:00] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[23:27:55] *** Quits: cheater (~Username@user/cheater) (Quit: (BitchX) Bob Barker uses BitchX. Have your BitchX spayed or neutered.)
[23:27:56] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[23:29:29] <TML> it might be doing it by raising an exception that you can catch outside the loop
[23:30:09] <TML> e.g., StopIteration
[23:30:32] *** Quits: skapate (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[23:31:12] *** Joins: xmyst (~xmyst@ip5f5ac363.dynamic.kabel-deutschland.de)
[23:31:24] *** Quits: delvian (~delvian@41.13.228.112) (Ping timeout: 256 seconds)
[23:32:03] *** Joins: ggnoredo (~user@81.215.12.230)
[23:34:40] *** Joins: cheater (~Username@user/cheater)
[23:34:54] *** Joins: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net)
[23:35:22] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[23:36:21] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[23:37:00] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:8d19:f7a3:b91b:6462)
[23:37:00] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:8d19:f7a3:b91b:6462) (Changing host)
[23:37:00] *** Joins: skapata (~Skapata@user/skapata)
[23:37:38] *** Quits: pmb (~pmb@89-64-79-51.dynamic.chello.pl) (Ping timeout: 256 seconds)
[23:38:48] *** Joins: jay-m126_ (~jay-m@41.205.30.141)
[23:38:52] *** Joins: jay-m1261 (~jay-m@41.205.30.141)
[23:38:53] *** Quits: cthulchu (~Cthulchu@216.239.164.82) (Remote host closed the connection)
[23:39:13] *** Joins: cthulchu (~Cthulchu@216.239.164.82)
[23:39:38] <ChrisWarrick> ali1234: as far as GUIs go, the Qt table widget isnâ€™t that hard
[23:40:02] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[23:40:30] *** Joins: delvian (~delvian@41.13.228.112)
[23:41:53] *** Joins: beernw (~beernw@host-87-2-95-88.retail.telecomitalia.it)
[23:42:10] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[23:43:46] *** Joins: pmb (~pmb@89-64-79-51.dynamic.chello.pl)
[23:44:47] *** Joins: paulrf (~paulrf@45.134.140.10)
[23:44:51] *** Quits: zeden (~zeden@user/zeden) (Ping timeout: 256 seconds)
[23:45:25] *** Joins: ttree (~ttree0@c-73-169-193-237.hsd1.wa.comcast.net)
[23:46:03] *** Joins: Goreng (~Goreng@202.138.250.1)
[23:46:34] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:d8d0:8961:1968:a5eb) (Ping timeout: 256 seconds)
[23:47:07] *** Quits: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl) (Ping timeout: 256 seconds)
[23:47:34] *** Joins: sgt_chuckles (~sgt_chuck@pool-71-190-209-205.nycmny.fios.verizon.net)
[23:48:41] *** Quits: Goreng (~Goreng@202.138.250.1) (Quit: Leaving)
[23:52:51] <ThePhilgrim> Anybody knows a good python module for playing a short audio notification (just like a 1 second audio file). Tried "playsound", but it's impossible to import it
[23:53:23] <ChrisWarrick> ThePhilgrim: impossible to import it? have you installed it before importing it?
[23:53:35] <ThePhilgrim> Yes sir
[23:53:40] <ThePhilgrim> python3 -m pip install playsound
[23:53:44] <ThePhilgrim> in venv
[23:53:46] <ChrisWarrick> how is it impossible to import it then?
[23:53:52] <ThePhilgrim> If I knew :)
[23:53:59] <ChrisWarrick> what error do you get?
[23:54:16] <ThePhilgrim> "from playsound import playsound" - First "playsound" gets yellow squiggly lines
[23:54:22] *** Joins: julia (~quassel@user/julia)
[23:54:29] <ThePhilgrim> "Import "playsound" could not be resolved"
[23:54:42] <ChrisWarrick> thatâ€™s not a python error, what error do you get when you run the code?
[23:54:44] *** Joins: Lush-_ (~lushlush@modemcable225.71-19-135.mc.videotron.ca)
[23:54:45] *** Quits: Lush-_ (~lushlush@modemcable225.71-19-135.mc.videotron.ca) (Changing host)
[23:54:45] *** Joins: Lush-_ (~lushlush@user/lush-/x-1276235)
[23:54:46] <rama> ThePhilgrim: does your IDE know about the venv?
[23:55:07] <Deneb> does numpy not accept variales? I had np.arange(-4,4,1). I changed this to variables np.arange(ys,ye,ym) and now get: TypeError: unsupported operand type(s) for -: 'str' and 'str' . I am not supplying a string anywhere?
[23:55:20] <ChrisWarrick> Deneb: are you sure those are not strins?
[23:55:34] <ThePhilgrim> ChrisWarrick: Hm, it seems like it doesn't give me an error by just running the code with the import.
[23:55:34] *** Joins: Goreng (~Goreng@202.138.250.36)
[23:55:42] <Deneb> ys = 4, ye = 4, ym = 1
[23:55:52] *** Quits: Goreng (~Goreng@202.138.250.36) (Remote host closed the connection)
[23:55:52] <ThePhilgrim> But I've never gotten the linter thingy with an import so I don't know how to treat it
[23:56:03] *** Joins: Goreng (~Goreng@202.138.250.58)
[23:56:14] <ThePhilgrim> rama, I believe so, because all dependencies are installed in the venv, and it doesn't complain about anything else
[23:56:20] *** Quits: julia__ (~quassel@user/julia) (Ping timeout: 256 seconds)
[23:56:29] <ThePhilgrim> Yeah, says "env" "venv" at the bottom
[23:56:43] <ChrisWarrick> Deneb: print(type(ys))
[23:56:44] <SnoopJ> Deneb, it would help to see the complete error report and/or the program.
[23:56:51] *** Quits: Goreng (~Goreng@202.138.250.58) (Client Quit)
[23:57:04] *** Joins: Goreng (~Goreng@202.138.250.1)
[23:57:16] *** Parts: beernw (~beernw@host-87-2-95-88.retail.telecomitalia.it) ()
[23:57:32] *** Quits: kts (~kts@103.73.237.237) (Quit: Konversation terminated!)
[23:58:34] <Deneb> ChrisWarrick: did it for all three and it came back <class 'str'>... Uh?
[23:58:51] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[23:59:09] <Deneb> why? I am assigning numeric values?
[23:59:17] *** Quits: Goreng (~Goreng@202.138.250.1) (Client Quit)
[23:59:22] *** Joins: Gorengan (~Goreng@202.138.250.58)
[23:59:22] <rvalue> i didnt know jupyter was so config heavy to start it in docker
[23:59:35] *** Quits: inomoz (~inomoz@176.59.103.141) (Ping timeout: 256 seconds)
[23:59:38] <rvalue> what a pain in the ass
[23:59:57] <bjs> Deneb: can you paste the actual code+error, probably you just made a mistake or a typo somewhere and there's actually a string
