[00:00:05] <tatsumaru> thanks guys
[00:00:09] <tatsumaru> much appreciated
[00:00:58] <jeaye> tatsumaru: Will you please link to the course you were using?
[00:01:53] <tatsumaru> https://purelyfunctional.tv/courses/introduction-to-clojure-v2/
[00:02:31] <jeaye> Which lesson?
[00:03:09] <tatsumaru> 3 & 4
[00:03:18] <tatsumaru> and 5
[00:04:15] <jeaye> Yikes, at a $600 price label, too.
[00:05:28] <jeaye> Normand's a really smart guy. I wonder why he's starting his intro course with refs/dosync. Even if he's targeting existing procedural programmers, an atom would be more analogous to standard mutation.
[00:07:50] *** Joins: ToxicFrog (~ToxicFrog@198-200-100-178.cpe.distributel.net)
[00:09:29] *** Quits: tomku (~tomku@user/tomku) (Ping timeout: 250 seconds)
[00:09:34] <tatsumaru> jeaye: I want to embrace the functional way, I found the beginning of the brave book very intuitive and human-friendly. I didn't like OOP at all.
[00:09:45] <jeaye> That's good!
[00:10:06] <jeaye> You'll be fighting with clj if you felt otherwise.
[00:16:23] *** Joins: tomku (~tomku@user/tomku)
[00:17:56] *** Joins: matty_matt (~matt@135.129.244.71)
[00:38:14] <Solid> Wow this channel is really friendly; _almost_ makes me not agonise over asking my stupid beginner questions here :)
[00:40:38] *** Joins: Guest46 (~Guest46@2601:483:4101:2350::d66d)
[00:41:10] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[00:41:10] <selfsymmetric-mu> Solid: It sure is. Ask away! We have plenty of resources, and even simple-sounding questions can lead to interesting discussions.
[00:41:32] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[00:41:49] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Client Quit)
[00:43:43] *** Quits: shiranaihito_ (~textual@123-192-192-149.dynamic.kbronet.com.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[00:48:40] <Solid> Mh, it's less of a specific question and more of an "I don't think I have the right mindset"-issue.  I took this year's advent of code as an incentive to look into Clojure but so far I just feel like that I'm essentially writing lispy Haskell code
[00:49:03] <Solid> Which is a bit frustrating at times (understandably, Haskell is a lot better at being Haskell than Clojure is :)
[00:51:24] <ridcully> they are both functional languages with immutable data.  so this should not be a total surprise?
[00:52:15] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[00:54:09] <Solid> it is not a complete surprise yes (which is, I suppose, the reason I'm looking into Clojure in the first place) but I always get a feeling of "that can't be all of it"
[00:54:27] <Solid> maybe I'm just craving Haskell's (syntax) sugar
[00:54:39] *** Joins: son0p (~ff@2800:484:1d81:b700::4)
[00:58:02] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[00:59:00] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[00:59:19] <Guest46> Anyone have any tricks that want to share about breaking projects into bite sizes? Started learning Clojure not long ago after starting with Racket, and just wanted to know how others avoid being overwhelmed when starting a project.
[01:01:38] *** Joins: Trieste_ (~T@user/pilgrim)
[01:01:49] *** Quits: tatsumaru (~tatsumaru@78.83.244.47) (Quit: Leaving.)
[01:01:49] *** Quits: Trieste (T@user/pilgrim) (Ping timeout: 240 seconds)
[01:05:38] *** Quits: Trieste_ (~T@user/pilgrim) (Remote host closed the connection)
[01:07:51] *** Joins: Trieste (T@user/pilgrim)
[01:12:34] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[01:12:44] *** Joins: Trieste_ (T@user/pilgrim)
[01:13:43] *** Quits: Trieste (T@user/pilgrim) (Ping timeout: 252 seconds)
[01:19:41] *** Trieste_ is now known as Trieste
[01:20:26] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[01:25:19] *** Quits: Guest46 (~Guest46@2601:483:4101:2350::d66d) (Quit: Client closed)
[01:53:54] *** Quits: lnostdal (~lnostdal@host-90-235-13-20.mobileonline.telia.com) (Read error: Connection reset by peer)
[02:12:18] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[02:16:34] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 260 seconds)
[02:36:30] *** Quits: geenvoud (~geenvoud@user/geenvoud) (Ping timeout: 256 seconds)
[03:02:56] *** Joins: geenvoud (~geenvoud@user/geenvoud)
[03:07:25] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[03:07:42] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[03:08:29] *** Quits: geenvoud (~geenvoud@user/geenvoud) (Ping timeout: 252 seconds)
[03:22:23] *** Joins: geenvoud (~geenvoud@user/geenvoud)
[03:25:47] *** Quits: seschwar (~seschwar@user/seschwar) (Quit: :wq)
[03:27:17] *** Quits: geenvoud (~geenvoud@user/geenvoud) (Ping timeout: 268 seconds)
[03:28:30] *** Quits: to-hu (~Thunderbi@p200300e9af32e700803ae4b335dcad90.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:28:39] *** Quits: uncleyear (~ian@pppoe.178-66-158-210.dynamic.avangarddsl.ru) (Ping timeout: 252 seconds)
[03:28:40] *** Quits: Ilyu (~quassel@166.215.82.79.rev.sfr.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[03:33:33] *** Joins: Techcable (~Techcable@168.235.93.147)
[03:37:41] *** Joins: dfreeman (~dfreeman@user/dfreeman)
[03:58:35] <selfsymmetric-mu> Solid: I've programmed professionally in Haskell and now I'm doing Advent of Code in Clojure. 
[03:59:07] <selfsymmetric-mu> You can take a look if you like. I've put my strategy in the README, and I'm happy to talk about how to properly translate Haskell concepts into Clojure. https://github.com/matthew-piziak/advent-of-code
[04:05:30] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[04:05:32] *** Quits: schmudde (~schmudde@216.169.6.249) (Ping timeout: 240 seconds)
[04:05:37] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Client Quit)
[04:17:51] *** Quits: jespada (~jespada@87.74.33.157) (Ping timeout: 268 seconds)
[04:17:52] <mwnaylor> I'm having some trouble w/ cider. I have instrumented a defun w/ cider-debug-defun-at-point, but when I call a function from repl that used the instrumented function, it runs to completion without dropping into the debugger.
[04:19:46] *** Quits: matty_matt (~matt@135.129.244.71) (Ping timeout: 260 seconds)
[04:19:59] *** Joins: jespada (~jespada@87.74.33.157)
[04:22:15] *** Quits: son0p (~ff@2800:484:1d81:b700::4) (Remote host closed the connection)
[04:30:41] *** Joins: matty_matt (~matt@135.129.244.71)
[04:35:11] *** Quits: matty_matt (~matt@135.129.244.71) (Client Quit)
[04:42:24] <mwnaylor> I think I found the problem. I was not making a direct call to the function I wanted to debug. It was used in a (partial map my-fn) form. I had to also instrument the (partial ...) form. Order matters. The consuming form has to be instrumented after the target function.
[04:54:54] <selfsymmetric-mu> That's good to know.
[05:08:16] <mwnaylor> Makes sense if you think about it a litte, and just a little. (comp fn-a fn-b …) and (juxt fn-a fn-b …) create new functions, sometimes dynamically. The cider parser may not be able to automatically track the call chain to set the debugger hooks correctly.
[05:12:42] <mwnaylor> Is this a bug or a feature request? I've never submitted a bug report before. If this is my first, I want to do it right. At least to get it seriosly considered, even if no action gets taken. I know I don't have enough elisp skills to submit a patch.
[05:23:11] *** Joins: geenvoud (~geenvoud@user/geenvoud)
[05:27:19] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:27:49] *** Quits: geenvoud (~geenvoud@user/geenvoud) (Ping timeout: 252 seconds)
[05:34:33] *** Quits: AndrewYu (~andrew@user/andrewyu) (Remote host closed the connection)
[05:53:56] *** Joins: geenvoud (~geenvoud@user/geenvoud)
[05:58:37] *** Quits: geenvoud (~geenvoud@user/geenvoud) (Ping timeout: 252 seconds)
[06:09:38] *** Quits: darkstarx (~darkstard@50.39.115.145) (Remote host closed the connection)
[06:36:45] *** Quits: mwnaylor (~user@2601:5ce:4300:5560::68b3) (Ping timeout: 252 seconds)
[06:48:02] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[06:49:01] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[06:49:28] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[06:50:06] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[06:50:29] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[06:54:07] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Read error: Connection reset by peer)
[06:57:59] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[06:58:52] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[06:59:18] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[07:01:04] *** Quits: xulfer (uid452788@id-452788.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[07:13:50] *** Quits: dfreeman (~dfreeman@user/dfreeman) (Ping timeout: 260 seconds)
[07:39:06] *** Quits: RedNifre (~michael@dslb-002-206-109-165.002.206.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[07:40:55] *** Joins: RedNifre (~michael@dslb-002-203-026-126.002.203.pools.vodafone-ip.de)
[07:53:52] *** Joins: mbuf (~Shakthi@122.174.253.173)
[07:54:45] *** Joins: geenvoud (~geenvoud@user/geenvoud)
[07:59:00] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[07:59:15] *** Quits: geenvoud (~geenvoud@user/geenvoud) (Ping timeout: 252 seconds)
[08:02:32] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[08:11:19] *** Joins: xulfer (uid452788@id-452788.ilkley.irccloud.com)
[08:27:27] *** Joins: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw)
[08:45:05] *** Joins: libertyprime (~libertypr@203.211.78.24)
[09:11:00] *** Joins: schmudde (~schmudde@216.169.6.249)
[09:20:52] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[09:24:19] *** Quits: libertyprime (~libertypr@203.211.78.24) (Quit: leaving)
[09:29:37] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[09:30:34] *** Quits: schmudde (~schmudde@216.169.6.249) (Ping timeout: 260 seconds)
[09:30:53] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[09:31:19] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[09:34:31] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Read error: Connection reset by peer)
[09:36:17] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[09:37:26] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[09:37:53] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[09:41:53] *** Quits: AlaskanEmily (~AlaskanEm@user/alaskanemily) (Remote host closed the connection)
[09:49:33] *** Joins: libertyprime (~libertypr@203.211.78.24)
[09:55:34] *** Joins: geenvoud (~geenvoud@user/geenvoud)
[10:00:43] *** Quits: geenvoud (~geenvoud@user/geenvoud) (Ping timeout: 268 seconds)
[10:04:07] *** Joins: shiranaihito_ (~textual@2001-b011-4000-193c-9c2c-28d1-056d-6220.dynamic-ip6.hinet.net)
[10:07:17] *** Quits: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw) (Ping timeout: 250 seconds)
[10:15:15] *** Quits: libertyprime (~libertypr@203.211.78.24) (Quit: leaving)
[11:34:32] *** Quits: Techcable (~Techcable@168.235.93.147) (Quit: ZNC - https://znc.in)
[11:35:20] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[11:35:52] *** Joins: Techcable (~Techcable@168.235.93.147)
[11:40:32] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Ping timeout: 240 seconds)
[11:56:21] *** Joins: geenvoud (~geenvoud@user/geenvoud)
[12:00:53] *** Quits: geenvoud (~geenvoud@user/geenvoud) (Ping timeout: 252 seconds)
[13:24:03] <Solid> selfsymmetric-mu: oh this is really great; thank you!
[13:28:57] *** Quits: amoe (~amoe@visarend.solasistim.net) (Quit: leaving)
[13:30:07] *** Quits: justSleigh (~justache@user/justache) (Remote host closed the connection)
[13:31:32] <Solid> I don't know if this is too much to ask (feel free to ignore if it is :)), but it would be great to get some feedback on some of my solutions---I've also been struggling with performance a little bit
[13:31:42] *** Joins: justSleigh (~justache@user/justache)
[13:32:43] <Solid> e.g. in my solution for today ( https://github.com/slotThe/AOC-2021/blob/master/clojure-solutions/src/clojure_solutions/day12.clj ) part two takes almost ten seconds, while a naïve translation of that code into Haskell is much faster
[13:36:52] *** Quits: mbuf (~Shakthi@122.174.253.173) (Quit: Leaving)
[13:47:36] *** Joins: amoe (~amoe@visarend.solasistim.net)
[13:57:08] *** Joins: geenvoud (~geenvoud@user/geenvoud)
[14:02:27] *** Quits: geenvoud (~geenvoud@user/geenvoud) (Ping timeout: 268 seconds)
[14:56:53] *** Joins: seschwar (~seschwar@user/seschwar)
[15:31:04] *** Quits: xulfer (uid452788@id-452788.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[15:35:13] *** Joins: geenvoud (~geenvoud@user/geenvoud)
[15:48:54] *** Joins: uncleyear (~ian@pppoe.178-66-158-210.dynamic.avangarddsl.ru)
[16:04:54] *** Quits: uncleyear (~ian@pppoe.178-66-158-210.dynamic.avangarddsl.ru) (Ping timeout: 260 seconds)
[16:14:04] *** Joins: mwnaylor (~user@2601:5ce:4300:5560::68b3)
[16:30:17] *** Joins: dfreeman (~dfreeman@user/dfreeman)
[16:54:22] *** Quits: tomku (~tomku@user/tomku) (Ping timeout: 260 seconds)
[17:03:33] *** Joins: uncleyear (~ian@pppoe.178-66-158-210.dynamic.avangarddsl.ru)
[17:05:46] *** Quits: uncleyear (~ian@pppoe.178-66-158-210.dynamic.avangarddsl.ru) (Remote host closed the connection)
[17:10:34] *** Joins: uncleyear (~ian@pppoe.178-66-158-210.dynamic.avangarddsl.ru)
[17:12:48] *** Joins: schmudde (~schmudde@216.169.6.249)
[17:14:14] *** Joins: tomku (~tomku@user/tomku)
[17:16:19] *** Joins: dadinn (~dadinn@cpc87065-finc18-2-0-cust67.4-2.cable.virginm.net)
[17:16:26] <dadinn> hi all
[17:19:12] <dadinn> just noticed something about applying maps and vectors as functions. Applying a map accepts a default value, while vector doesn't. Is there any rationale behind this?
[17:19:53] <dadinn> E.g. ({:a 1 :b 2 :c 3} :x 13) => 13
[17:20:47] <dadinn> ([1 2 3] 15 0) => (ArityException) Wrong number of args (2) to clojure.lang.PersistentVector
[17:25:11] <dadinn> The obvious "solution" is to always use `get` when we need to provide default value for generic associative structures... but anyways, I got surprised about this inconsintency today.
[17:27:22] <dadinn> or maybe there is a reason behind this I am overlooking?
[17:32:48] <dadinn> ([1 2 3] :a) => (IllegalArgumentException) key must be integer
[17:32:59] <dadinn> ^ That might be one reason :/
[17:34:39] <dadinn> (get [1 2 3] :a 15) => 15
[17:34:49] <dadinn> (get 15 :a 13) => 13
[17:37:22] <dadinn> Seems like the reasonable thing to say, is that if I want to look up keys in associative structures dynamically, with default value provided, then make sure to use `get`.
[17:41:46] <ridcully> PersistentVector overrides only the invoke with one argument (that also gives you the illegal argument exception for non-numbers)
[17:43:49] <ridcully> i dont know why it does not behave like GIGO like the other get-ish data structures.  but i have to confess i think i have never used a vector as function
[17:58:38] *** Quits: schmudde (~schmudde@216.169.6.249) (Ping timeout: 268 seconds)
[18:00:29] *** Quits: uncleyear (~ian@pppoe.178-66-158-210.dynamic.avangarddsl.ru) (Ping timeout: 268 seconds)
[18:01:29] *** Joins: uncleyear (~ian@pppoe.178-66-158-210.dynamic.avangarddsl.ru)
[18:08:18] *** Quits: uncleyear (~ian@pppoe.178-66-158-210.dynamic.avangarddsl.ru) (Read error: Connection reset by peer)
[18:08:54] *** Joins: uncleyear (~ian@pppoe.178-66-158-210.dynamic.avangarddsl.ru)
[18:37:37] *** Quits: geenvoud (~geenvoud@user/geenvoud) (Ping timeout: 252 seconds)
[18:42:27] *** Joins: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw)
[18:44:01] *** Quits: shiranaihito_ (~textual@2001-b011-4000-193c-9c2c-28d1-056d-6220.dynamic-ip6.hinet.net) (Ping timeout: 250 seconds)
[18:46:48] *** Joins: yewscion (~yewscion@72-21-196-64.amazon.com)
[19:03:42] *** Joins: geenvoud (~geenvoud@user/geenvoud)
[19:08:44] *** Quits: geenvoud (~geenvoud@user/geenvoud) (Ping timeout: 256 seconds)
[19:28:18] <selfsymmetric-mu> Solid: Oh cool! I'll take a look once I solve it myself, if I even get better performance at all. :)
[19:29:57] *** Joins: schmudde (~schmudde@216.169.6.249)
[19:37:36] *** Joins: geenvoud (~geenvoud@user/geenvoud)
[19:41:54] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 260 seconds)
[19:42:10] *** Quits: geenvoud (~geenvoud@user/geenvoud) (Ping timeout: 256 seconds)
[19:42:58] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[20:04:33] *** Joins: tatsumaru (~tatsumaru@78.83.244.47)
[20:04:53] <tatsumaru> hey guys, are vectors 100% equal to what arrays in other languages are
[20:05:50] <croeso[m]> no, since they obviously can hold values of different types
[20:10:04] *** Joins: awb99 (~quassel@85-127-91-114.dsl.dynamic.surfer.at)
[20:10:04] *** Quits: awb99 (~quassel@85-127-91-114.dsl.dynamic.surfer.at) (Client Quit)
[20:17:51] <ToxicFrog> clojure vectors are immutable and heterogenous, and arrays in most languages violate at least one and usually both of those, so no
[20:25:13] <perro> they are the closest equivalent though
[20:25:34] <perro> short of calling java
[20:34:41] <selfsymmetric-mu> Arrays are available with make-array: https://clojuredocs.org/clojure.core/make-array
[20:38:42] <ToxicFrog> And into-array and whatnot, yeah
[20:38:52] <ToxicFrog> Based on the phrasing, though, I don't think tatsumaru was asking about java interop
[21:02:08] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[21:11:06] *** Joins: to-hu (~Thunderbi@p200300e9af32e700060739fb7f0ff99d.dip0.t-ipconnect.de)
[21:15:18] *** Joins: geenvoud (~geenvoud@user/geenvoud)
[21:18:54] *** Quits: yewscion (~yewscion@72-21-196-64.amazon.com) (Quit: Connection closed)
[21:20:22] *** Quits: geenvoud (~geenvoud@user/geenvoud) (Ping timeout: 260 seconds)
[21:21:44] <selfsymmetric-mu> ToxicFrog: Ah, I see.
[21:27:36] <tatsumaru> ToxicFrog thanks
[21:31:24] <Solid> I'm a bit confused; the first four words in the documentation for `map` are literally "Returns a lazy sequence", but `(take 1 (map #(do (println "executed") (inc %)) [1 2 3 4 5 6]))` seems to get executed for every element in the vector
[21:32:07] <Solid> I know that vectors are strict but the docs for map seem to be pretty explicit about always returning a lazy sequence :/
[21:40:12] <ridcully> Solid: this is "chunking" at work
[21:54:13] <Solid> huh interesting
[21:56:52] <Solid> suppose I'll have to define actual-lazy-seq-I-promise then :)
[21:58:40] <opqdonut> Solid: map inherits the chunking of the argument sequence
[21:59:58] <opqdonut> Solid: if you try (list 1 2 3 4 5 6) instead of a vector, it only prints once
[22:00:22] *** Quits: dfreeman (~dfreeman@user/dfreeman) (Ping timeout: 268 seconds)
[22:01:53] <Solid> opqdonut: is there a pre-defined function that converts a given collection into such a "1-chuncked" sequence?  Confusingly, lazy-seq does not seem to work
[22:01:56] <opqdonut> I think there's an unchunk util in some of the utility libs
[22:02:32] <ridcully> and (range x) chunks, but (range) not
[22:02:58] *** Quits: schmudde (~schmudde@216.169.6.249) (Quit: WeeChat 3.2)
[22:03:49] <ridcully> so, yeah, you are better of making sure you don't chunk with an unchunker
[22:05:06] <opqdonut> flatland.useful.seq/unchunk is one place to find the function
[22:05:11] <opqdonut> https://github.com/clj-commons/useful/blob/master/src/flatland/useful/seq.clj#L179
[22:05:37] <opqdonut> here's another almost identical one: https://github.com/plumatic/plumbing/blob/master/src/plumbing/core.cljc#L160
[22:06:11] <opqdonut> looks like the flatland one is slightly more correct (doesn't force the first element by accident)
[22:11:16] <Solid> might be as good a time as any to find out how I add dependencies
[22:11:32] <Solid> then again this seems understandable enough to replicate myself
[22:11:39] <Solid> thanks, either way!
[22:17:33] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[22:18:49] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[22:23:22] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Ping timeout: 260 seconds)
[22:25:25] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[22:30:22] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Ping timeout: 260 seconds)
[22:30:32] *** Quits: to-hu (~Thunderbi@p200300e9af32e700060739fb7f0ff99d.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[22:36:41] *** Joins: dfreeman (~dfreeman@user/dfreeman)
[22:39:32] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 256 seconds)
[22:39:37] *** Quits: mwnaylor (~user@2601:5ce:4300:5560::68b3) (Ping timeout: 252 seconds)
[22:40:05] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[23:12:08] *** Quits: tatsumaru (~tatsumaru@78.83.244.47) (Quit: Leaving.)
[23:15:19] *** Joins: AlaskanEmily (~AlaskanEm@user/alaskanemily)
[23:22:05] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[23:35:01] *** Quits: dadinn (~dadinn@cpc87065-finc18-2-0-cust67.4-2.cable.virginm.net) (Ping timeout: 250 seconds)
[23:58:27] *** Quits: jespada (~jespada@87.74.33.157) (Ping timeout: 252 seconds)
[23:59:36] *** Joins: jespada (~jespada@87.74.33.157)
