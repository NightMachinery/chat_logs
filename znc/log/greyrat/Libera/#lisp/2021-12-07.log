[00:09:53] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[00:10:42] *** Quits: neirac_ (~neirac@pc-122-191-45-190.cm.vtr.net) (Quit: ZNC 1.8.2 - https://znc.in)
[00:18:18] *** Joins: poselyqualityles (poselyqual@user/poselyqualityles)
[00:19:26] *** Joins: tyson2 (~user@bras-base-toroon0240w-grc-51-65-92-155-88.dsl.bell.ca)
[00:19:33] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[00:20:24] *** Joins: gproto23 (~gproto23@user/gproto23)
[00:24:19] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[00:27:17] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 252 seconds)
[00:27:19] *** Joins: cjb (~cjb@user/cjb)
[00:27:54] *** Joins: Lycurgus (~juan@98.4.112.204)
[00:34:59] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Ping timeout: 252 seconds)
[00:38:02] *** Joins: lunarkitty (uid501895@user/pyra)
[00:39:54] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:41:01] *** Quits: v0|d (~user@ns1.core.gen.tr) (Ping timeout: 240 seconds)
[00:44:09] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[00:44:30] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[00:47:00] *** Joins: Lycurgus (~juan@98.4.112.204)
[00:47:49] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[00:48:05] *** Quits: Lycurgus (~juan@98.4.112.204) (Client Quit)
[00:50:03] *** Joins: aeth (~aeth@user/aeth)
[00:51:52] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[00:53:51] *** Joins: livoreno (~livoreno@user/notzmv)
[01:02:51] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 252 seconds)
[01:10:47] *** Joins: x88x88x- (~cheeg@156.146.57.109)
[01:12:31] *** Quits: x88x88x- (~cheeg@156.146.57.109) (Remote host closed the connection)
[01:13:13] *** Joins: x88x88x- (~cheeg@156.146.57.109)
[01:13:28] *** Quits: x88x88x- (~cheeg@156.146.57.109) (Remote host closed the connection)
[01:14:37] *** Quits: dre (~dre@60.229.45.121) (Ping timeout: 240 seconds)
[01:16:00] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:5bc:bec3:27a0:99fc) (Remote host closed the connection)
[01:16:17] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:5bc:bec3:27a0:99fc)
[01:17:13] *** Joins: x88x88x- (~cheeg@gateway/vpn/pia/x88x88x)
[01:17:23] *** Quits: x88x88x- (~cheeg@gateway/vpn/pia/x88x88x) (Remote host closed the connection)
[01:17:26] *** Quits: tyson2 (~user@bras-base-toroon0240w-grc-51-65-92-155-88.dsl.bell.ca) (Remote host closed the connection)
[01:20:45] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 265 seconds)
[01:28:48] *** Joins: Algernon91 (~Algernon6@2a04:cec0:11cc:d11e:4896:f185:52e9:c42b)
[01:31:28] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[01:31:59] *** Joins: pillton (~user@118-211-29-59.tpgi.com.au)
[01:32:21] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:5bc:bec3:27a0:99fc) (Ping timeout: 265 seconds)
[01:35:51] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Ping timeout: 252 seconds)
[01:36:42] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 265 seconds)
[01:43:56] *** Quits: el_kevino (~mote@2604:a880:400:d1::901:5001) (Quit: WeeChat 3.3)
[01:44:24] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[01:45:00] *** Joins: herme5 (~mote@2604:a880:400:d1::901:5001)
[01:45:08] *** herme5 is now known as el_kevino
[01:46:52] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[01:49:56] *** Quits: pl (sid98063@helmsley.irccloud.com) (Ping timeout: 245 seconds)
[01:49:56] *** Quits: gendl (sid100083@hampstead.irccloud.com) (Ping timeout: 245 seconds)
[01:50:11] *** Joins: pl (sid98063@id-98063.helmsley.irccloud.com)
[01:51:16] *** Joins: gendl (sid100083@id-100083.hampstead.irccloud.com)
[01:52:30] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[01:52:54] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[01:54:55] *** Joins: dre (~dre@2001:8004:44e0:e2f7:4cb5:615f:6ecc:f9d3)
[01:58:23] *** Joins: livoreno (~livoreno@user/notzmv)
[02:00:12] *** Joins: sirquack (~sirquack@2601:643:8680:526:80a:af3b:b209:8cd9)
[02:00:52] *** Quits: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6) (Ping timeout: 265 seconds)
[02:01:20] *** Joins: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6)
[02:10:38] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[02:10:52] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[02:19:49] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[02:32:25] *** Quits: monkey_ (~user@181.114.17.106) (Remote host closed the connection)
[02:33:55] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Remote host closed the connection)
[02:41:18] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:41:49] *** Quits: dre (~dre@2001:8004:44e0:e2f7:4cb5:615f:6ecc:f9d3) (Ping timeout: 240 seconds)
[02:42:02] *** Joins: VincentVega (~user@212.241.25.167)
[02:42:57] *** Quits: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[02:44:35] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[02:45:49] *** Quits: Algernon91 (~Algernon6@2a04:cec0:11cc:d11e:4896:f185:52e9:c42b) (Ping timeout: 265 seconds)
[02:45:53] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[02:46:57] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[02:47:12] *** Quits: lunarkitty (uid501895@user/pyra) (Quit: Connection closed for inactivity)
[02:51:58] *** Quits: madage (~madage@user/madage) (Remote host closed the connection)
[02:52:11] *** Joins: madage (~madage@user/madage)
[02:55:17] *** Joins: asdasdqweqweqweq (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de)
[02:55:29] *** Quits: galex-713 (~quassel@galex-713.eu) (Ping timeout: 265 seconds)
[02:57:01] *** Quits: yewscion (~yewscion@72-21-196-64.amazon.com) (Ping timeout: 240 seconds)
[02:57:06] *** Quits: asdasdqweqweqweq (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[02:58:24] *** Joins: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de)
[02:59:57] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 268 seconds)
[03:02:52] *** Joins: galex-713 (~quassel@galex-713.eu)
[03:03:43] <rdrg109> [Q] Is it possible to remove the ".tmp" that is added in filenames when using uiop:with-temporary-file?
[03:03:49] <rdrg109> => (uiop:with-temporary-file (:directory "/tmp" :suffix ".html" :pathname p) p)
[03:04:00] *** Quits: Alfr (~Alfr@user/alfr) (Killed (zinc.libera.chat (Nickname regained by services)))
[03:04:02] <rdrg109> #P"/tmp/tmpDJ12Q5UE.html.tmp"
[03:04:05] *** Joins: Alfr (~Alfr@user/alfr)
[03:05:26] <pjb> (uiop:with-temporary-file (:directory "/tmp" :pathname p) (let ((p (make-pathname :type "html" :defaults p))) p)) #| --> #P"/tmp/tmp1E0ID0Z6.html" |# 
[03:06:21] <pjb> rdrg109: actually: (uiop:with-temporary-file (:directory "/tmp" :type "html" :pathname p)  p) #| --> #P"/tmp/tmp3SDNIT3A-tmp.html" |# 
[03:07:53] *** Quits: sirquack (~sirquack@2601:643:8680:526:80a:af3b:b209:8cd9) (Ping timeout: 252 seconds)
[03:10:28] *** Joins: dra (~dra@2a04:4540:6400:e300:a031:7dec:ad3:e1ac)
[03:13:46] *** Joins: madagest (~madage@user/madage)
[03:14:08] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[03:14:37] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Ping timeout: 240 seconds)
[03:14:50] *** Quits: gerund (~user@dsl-lprbng12-54f9b9-129.dhcp.inet.fi) (Remote host closed the connection)
[03:14:53] *** Quits: madage (~madage@user/madage) (Remote host closed the connection)
[03:20:17] *** Joins: dre (~dre@2001:8003:c932:c301:97c2:3a80:30a5:4f30)
[03:22:52] <rdrg109> pjb: Thanks!
[03:26:42] <pjb> rdrg109: suffix can be used to remplace -tmp: (uiop:with-temporary-file (:directory "/tmp" :suffix "-results" :type "html" :pathname p)  p) #| --> #P"/tmp/tmpNZC3N0N4-results.html" |# 
[03:30:21] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:b0e7:974:38ed:f8cd)
[03:33:38] *** Quits: VincentVega (~user@212.241.25.167) (Remote host closed the connection)
[03:36:57] *** Quits: dre (~dre@2001:8003:c932:c301:97c2:3a80:30a5:4f30) (Ping timeout: 268 seconds)
[03:52:37] *** Quits: tripfandango (~tripfanda@5.29.28.78) (Ping timeout: 240 seconds)
[03:53:00] *** Quits: random-nick (~random-ni@87.116.181.93) (Ping timeout: 265 seconds)
[03:55:24] *** Joins: dre (~dre@60.229.45.121)
[04:01:38] *** Joins: dra_ (~dra@2a04:4540:640e:a200:a031:7dec:ad3:e1ac)
[04:03:06] *** Quits: dra_ (~dra@2a04:4540:640e:a200:a031:7dec:ad3:e1ac) (Client Quit)
[04:04:36] *** Quits: dra (~dra@2a04:4540:6400:e300:a031:7dec:ad3:e1ac) (Ping timeout: 265 seconds)
[04:05:38] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Ping timeout: 252 seconds)
[04:06:25] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[04:10:37] *** Quits: krid (~krid@102-10-133-N4.customer.vsm.sh) (Ping timeout: 240 seconds)
[04:12:20] *** Joins: karlosz (~karlosz@47.151.136.69)
[04:12:42] *** Joins: tfeb (~tfb@88.98.95.237)
[04:15:28] *** Quits: tfeb (~tfb@88.98.95.237) (Client Quit)
[04:17:25] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 240 seconds)
[04:26:13] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (Remote host closed the connection)
[04:26:28] *** Joins: karlosz (~karlosz@47.151.136.69)
[04:30:36] *** Joins: karlosz_ (~karlosz@47.151.136.69)
[04:34:17] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 256 seconds)
[04:34:17] *** karlosz_ is now known as karlosz
[04:39:45] *** Joins: karlosz_ (~karlosz@47.151.136.69)
[04:42:15] *** Joins: xiews (~wxie@2409:8945:3060:1b8:95d2:15a4:a130:479b)
[04:43:03] *** Joins: lisp123 (~lisp123@5.30.23.247)
[04:43:21] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 256 seconds)
[04:46:39] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 265 seconds)
[04:46:41] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:b0e7:974:38ed:f8cd) (Ping timeout: 256 seconds)
[04:46:53] *** Quits: karlosz_ (~karlosz@47.151.136.69) (Ping timeout: 252 seconds)
[04:47:07] *** Joins: renzhi (~xp@2607:fa49:6500:b100::5cef)
[04:47:25] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[04:49:26] *** Joins: skapata (~Skapata@user/skapata)
[04:52:48] *** Joins: karlosz (~karlosz@47.151.136.69)
[04:53:22] *** Quits: karlosz (~karlosz@47.151.136.69) (Client Quit)
[04:58:05] *** Quits: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[05:07:47] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Ping timeout: 252 seconds)
[05:17:35] *** Joins: karlosz (~karlosz@47.151.136.69)
[05:19:07] *** Quits: karlosz (~karlosz@47.151.136.69) (Client Quit)
[05:22:24] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:7013:e815:a722:b241)
[05:25:01] *** Quits: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[05:26:37] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:7013:e815:a722:b241) (Ping timeout: 240 seconds)
[05:28:52] *** Joins: Lycurgus (~juan@98.4.112.204)
[05:29:34] *** Joins: raeda_ (~raeda@72.49.249.241)
[05:29:58] *** Quits: raeda__ (~raeda@72.49.249.241) (Remote host closed the connection)
[05:31:26] *** Joins: karlosz (~karlosz@47.151.136.69)
[05:33:49] *** Quits: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6) (Ping timeout: 252 seconds)
[05:38:10] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[05:38:13] *** Quits: poselyqualityles (poselyqual@user/poselyqualityles) (Ping timeout: 252 seconds)
[05:38:20] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[05:45:16] *** Joins: kennyd (~bc8165b6@cerf.good1.com)
[05:54:06] *** Joins: karlosz (~karlosz@47.151.136.69)
[06:00:20] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[06:04:06] *** Joins: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net)
[06:04:28] *** Quits: jao (~jao@194.99.104.13) (Ping timeout: 265 seconds)
[06:12:37] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[06:13:20] *** Joins: aeth (~aeth@user/aeth)
[06:22:32] *** Joins: sirquack (~sirquack@2601:643:8680:526:80a:af3b:b209:8cd9)
[06:23:37] *** Quits: sirquack (~sirquack@2601:643:8680:526:80a:af3b:b209:8cd9) (Client Quit)
[06:32:54] *** Joins: pdietz (~pdietz@cpe-74-69-163-146.stny.res.rr.com)
[06:34:43] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[06:34:49] *** Joins: sirquack (~sirquack@2601:643:8680:526:80a:af3b:b209:8cd9)
[06:37:46] *** Quits: pdietz (~pdietz@cpe-74-69-163-146.stny.res.rr.com) (Ping timeout: 256 seconds)
[06:38:15] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[06:41:30] *** Joins: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6)
[06:42:01] *** Joins: dickba___ (~dickbaren@86-90-132-28.fixed.kpn.net)
[06:43:25] *** Quits: dickbar__ (~dickbaren@86-90-132-28.fixed.kpn.net) (Ping timeout: 240 seconds)
[06:44:29] *** Joins: lisp123 (~lisp123@5.30.23.247)
[06:48:59] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[06:59:20] *** Joins: letto2 (~letto@79.115.130.66)
[06:59:51] *** Quits: letto (~letto@188.25.118.240) (Ping timeout: 256 seconds)
[07:01:02] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[07:01:24] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[07:06:57] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:14:13] *** Quits: renzhi (~xp@2607:fa49:6500:b100::5cef) (Ping timeout: 240 seconds)
[07:24:18] *** Joins: blihp (~phil@c-68-43-233-92.hsd1.mi.comcast.net)
[07:35:48] *** Quits: z3t0 (~z3t0@146.71.14.98) (Read error: Connection reset by peer)
[07:36:12] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[07:37:07] *** Joins: z3t0 (~z3t0@146.71.14.98)
[07:45:27] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[07:53:27] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 29.0.50)
[08:03:26] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[08:05:05] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[08:08:24] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[08:09:47] *** Joins: letto (~letto@188.26.158.104)
[08:09:49] *** Quits: letto2 (~letto@79.115.130.66) (Ping timeout: 240 seconds)
[08:20:19] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Remote host closed the connection)
[08:21:09] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:21:10] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[08:21:22] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:24:00] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[08:35:10] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[08:42:23] <fe[nl]ix> luis: ok, Travis can do Linux, OSX and FreeBSD on x86_64. Github actions can do Windows too, but I can't help with that
[08:51:27] *** Quits: xiews (~wxie@2409:8945:3060:1b8:95d2:15a4:a130:479b) (Ping timeout: 252 seconds)
[08:55:35] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[08:58:46] *** Joins: xiews (~wxie@2409:8945:3060:1b8:1f48:bdb2:92b5:dffb)
[08:59:53] *** Quits: sirquack (~sirquack@2601:643:8680:526:80a:af3b:b209:8cd9) (Ping timeout: 252 seconds)
[09:05:15] *** Joins: karlosz (~karlosz@47.151.136.69)
[09:10:05] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[09:16:01] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 252 seconds)
[09:20:44] *** Joins: greaser|q (greaser@antihype.space)
[09:21:47] *** Quits: greaser|q (greaser@antihype.space) (Changing host)
[09:21:47] *** Joins: greaser|q (greaser@user/greasemonkey)
[09:21:51] *** greaser|q is now known as GreaseMonkey
[09:22:18] *** Joins: karlosz_ (~karlosz@47.151.136.69)
[09:24:28] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:25:49] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 240 seconds)
[09:28:20] *** Joins: skapata (~Skapata@user/skapata)
[09:29:01] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[09:29:35] *** Quits: karlosz_ (~karlosz@47.151.136.69) (Ping timeout: 252 seconds)
[09:47:15] *** Joins: sirquack (~sirquack@2601:643:8680:526:80a:af3b:b209:8cd9)
[09:57:05] *** Quits: xiews (~wxie@2409:8945:3060:1b8:1f48:bdb2:92b5:dffb) (Ping timeout: 252 seconds)
[09:58:04] *** Joins: gproto23 (~gproto23@user/gproto23)
[09:58:11] *** Quits: sirquack (~sirquack@2601:643:8680:526:80a:af3b:b209:8cd9) (Ping timeout: 252 seconds)
[10:00:08] *** Joins: karlosz (~karlosz@47.151.136.69)
[10:00:49] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 265 seconds)
[10:12:38] *** Joins: fourier_ (~fourier@94.234.33.74)
[10:12:54] *** Quits: fourier (~fourier@customer-89-255-226-149.stosn.net) (Read error: Connection reset by peer)
[10:18:51] *** Quits: blihp (~phil@c-68-43-233-92.hsd1.mi.comcast.net) (Quit: Leaving)
[10:21:30] *** Joins: lunarkitty (uid501895@user/pyra)
[10:39:31] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[10:42:42] *** Joins: Algernon69 (~Algernon6@2a04:cec0:11cc:d11e:294b:a29d:8c1f:dfa4)
[10:44:15] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:e033:9fa2:623d:8769)
[10:54:51] *** Quits: kennyd (~bc8165b6@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[11:10:47] *** Quits: jurov (~jurov@rev-81-92-255-36.radiolan.sk) (Ping timeout: 265 seconds)
[11:14:26] *** Joins: hjudt (~hjudt@62-178-177-178.cable.dynamic.surfer.at)
[11:17:03] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[11:19:24] *** Joins: pillton` (~user@220.240.250.204)
[11:21:42] *** Quits: pillton (~user@118-211-29-59.tpgi.com.au) (Ping timeout: 260 seconds)
[11:22:51] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[11:23:13] *** Joins: amb007 (~a_bakic@4.39.22.93.rev.sfr.net)
[11:25:01] *** Joins: simendsjo (~user@84.211.91.241)
[11:26:33] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:27:25] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 240 seconds)
[11:31:12] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[11:32:03] *** Quits: dickba___ (~dickbaren@86-90-132-28.fixed.kpn.net) ()
[11:44:22] *** Joins: cranium (~cranium@user/cranium)
[11:55:55] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[12:07:27] *** Joins: Avichi (~Avichi@lithe.xs4all.nl)
[12:08:59] *** Joins: notzmv (~zmv@user/notzmv)
[12:10:34] *** Joins: trip_fandango (~tripfanda@2a00:a040:19e:72a1:c17e:3fe7:829e:e3ae)
[12:12:13] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:e033:9fa2:623d:8769) (Ping timeout: 240 seconds)
[12:15:57] *** Quits: amb007 (~a_bakic@4.39.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[12:16:07] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[12:18:05] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[12:18:28] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[12:25:49] *** Quits: galex-713 (~quassel@galex-713.eu) (Ping timeout: 265 seconds)
[12:33:54] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[12:35:05] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[12:36:30] *** Joins: jpl01 (~user@2001:16b8:4931:c600:c1ba:14a6:b08d:c22)
[12:36:59] *** Joins: jao (~jao@194.99.104.13)
[12:43:48] *** Quits: jao (~jao@194.99.104.13) (Remote host closed the connection)
[12:44:24] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:47:45] *** Quits: mikemar10 (~mikemar10@216-177-191-54.block0.gvtc.com) (Read error: Connection reset by peer)
[12:48:32] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 265 seconds)
[12:49:03] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[12:55:18] *** Quits: trip_fandango (~tripfanda@2a00:a040:19e:72a1:c17e:3fe7:829e:e3ae) (Ping timeout: 265 seconds)
[12:57:23] *** Joins: trip_fandango (~tripfanda@5.29.28.78)
[13:05:03] *** Joins: gproto23 (~gproto23@user/gproto23)
[13:14:37] *** Quits: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[13:21:33] *** Joins: krid (~krid@102-10-133-N4.customer.vsm.sh)
[13:24:39] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[13:32:07] *** Joins: desantra (~skykanin@user/skykanin)
[13:39:46] *** Quits: trip_fandango (~tripfanda@5.29.28.78) (Ping timeout: 265 seconds)
[13:39:46] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 265 seconds)
[13:42:31] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[13:45:31] *** Joins: VincentVega (~user@212.241.25.167)
[13:46:57] *** Quits: desantra (~skykanin@user/skykanin) (Quit: WeeChat 3.3)
[13:48:10] *** Joins: desantra (~skykanin@user/skykanin)
[13:53:13] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[13:55:40] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[13:59:35] *** Quits: simendsjo (~user@84.211.91.241) (Ping timeout: 265 seconds)
[14:09:36] *** Quits: pillton` (~user@220.240.250.204) (Remote host closed the connection)
[14:28:04] *** Joins: trip_fandango (~tripfanda@bzq-219-32-122.isdn.bezeqint.net)
[14:30:16] *** Joins: jurov (~jurov@rev-81-92-255-39.radiolan.sk)
[14:37:57] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[14:39:11] *** Joins: amb007 (~a_bakic@38.39.22.93.rev.sfr.net)
[14:46:05] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:50:12] *** Joins: xiews (~wxie@2409:8945:3000:1443:db06:ae7a:357d:f257)
[14:50:49] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[14:53:14] *** Quits: amb007 (~a_bakic@38.39.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[14:53:24] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[14:54:29] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[14:55:11] *** Joins: random-nick (~random-ni@87.116.165.83)
[14:55:23] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:01:33] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:07:25] *** Quits: random-nick (~random-ni@87.116.165.83) (Ping timeout: 240 seconds)
[15:12:30] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[15:12:32] *** Joins: thevishy (~Nishant@2405:201:f005:c007:a5d7:38b:39cd:e2ae)
[15:16:38] *** Joins: pdietz (~pdietz@216-59-66-162.static.firstlight.net)
[15:21:25] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[15:21:45] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[15:25:26] *** Quits: Algernon69 (~Algernon6@2a04:cec0:11cc:d11e:294b:a29d:8c1f:dfa4) (Ping timeout: 252 seconds)
[15:29:59] *** Quits: phantomics (~phantomic@97-118-231-120.hlrn.qwest.net) (Read error: Connection reset by peer)
[15:30:34] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[15:33:21] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[15:34:15] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:35:53] *** Joins: frodef (~frode@46.212.93.4)
[15:38:27] <frodef> Hi all, I have a problem with my sbcl/asdf/quicklisp setup, and I can't seem to figure it out...
[15:38:57] <frodef> I tried to add an asdf source directory by adding ~/.config/common-lisp/source-registry.conf
[15:39:54] <frodef> Ever since, I cannot make quicklisp load, getting some weird compiler error. Even after removing ~/.config/common-lisp/ completely.
[15:41:30] <frodef> That is, (load "~/quicklisp/setup") results in a 'COMPILE-FILE-ERROR while
[15:41:30] <frodef> compiling #<CL-SOURCE-FILE "asdf" "build" "asdf">' that I'm unable to make sense of.
[15:42:04] <frodef> Any ideas?
[15:48:10] *** Joins: Algernon69 (~Algernon6@2a04:cec0:11cc:d11e:294b:a29d:8c1f:dfa4)
[15:49:11] <edgar-rft> frodef: sorry, I have no really good idea, but I think in #commonlisp you'll get a faster answer than here :-)
[15:49:54] <frodef> edgar-rft: ok, thanks
[15:51:40] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:25:56] *** Joins: galex-713 (~quassel@galex-713.eu)
[16:29:47] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Ping timeout: 252 seconds)
[16:34:13] *** Quits: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[16:47:50] *** Joins: lisp123 (~lisp123@5.30.23.247)
[16:52:13] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[16:58:53] *** Quits: OlCe (~user@lfbn-nic-1-262-221.w90-116.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[16:59:16] *** Quits: desantra (~skykanin@user/skykanin) (Quit: WeeChat 3.3)
[17:19:19] *** Joins: Ilyu (~quassel@166.215.82.79.rev.sfr.net)
[17:27:06] *** Joins: OlCe` (~user@lfbn-nic-1-117-213.w2-15.abo.wanadoo.fr)
[17:40:33] *** Quits: mtreis (~mtreis@ip68-9-89-162.ri.ri.cox.net) (Ping timeout: 252 seconds)
[17:55:33] *** Joins: kennyd (~bc8165b6@cerf.good1.com)
[17:57:52] <amazigh> why are movies using 24 images per seconds, but games look for 100Hz thingy?
[17:58:13] <amazigh> s/Hz/FPS/
[17:59:27] <edgar-rft> because celluloid for cinema movies is just simply terribly expensive 
[18:03:03] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:03:05] <kennyd> back in the day, cheap sitcoms with little budget were recorded on 50/60 fps camcorders. so older folks associate high fps with cheap production. this is subconscious, and most can't even explain why they prefer it. so they left it at 24 fps, with some rare exceptions
[18:04:49] <perro> ofc you're also interacting with games
[18:04:58] <kennyd> (technically, 25/30 interlaced fps, which gives 50/60 half images per second)
[18:11:01] *** Joins: mtreis (~mtreis@024-181-180-008.res.spectrum.com)
[18:11:18] <amazigh> I am asking because I was looking for different gui api, in some of them you set of the target fps N, and submit a callback that be called at most N times per second, some use double buffering...
[18:12:04] <amazigh> ... double buffering means there is always a "ready" surface, and the app works on the "next" surface, so that anytime the "display manager" needs the surface one is ready?
[18:13:00] <amazigh> which means in the double buffering api, you may spend as much time as necessary to do the rendering.
[18:14:43] *** Joins: monkey_ (~user@181.114.17.106)
[18:15:31] <amazigh> I read there is two *small* examples and low level example to use the Linux graphics: kms-cubes and kmsquads @ gitlab.freedesktop.org
[18:15:45] *** Quits: mtreis (~mtreis@024-181-180-008.res.spectrum.com) (Ping timeout: 265 seconds)
[18:16:18] <amazigh> now that I think about it, double buffering does not preclude setting a target fps.
[18:17:11] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[18:18:36] *** Quits: kennyd (~bc8165b6@cerf.good1.com) (Quit: CGI:IRC (Ping timeout))
[18:19:50] *** Joins: kennyd (~bc8165b6@cerf.good1.com)
[18:21:38] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:22:00] <amazigh> (I am investigating how to build gui stack without relying on xorg or wayland (while Chez Scheme is compiling))
[18:24:28] *** Joins: Algernon91 (~Algernon6@2a04:cec0:11c9:46f0:294b:a29d:8c1f:dfa4)
[18:26:09] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[18:27:50] *** Quits: Algernon69 (~Algernon6@2a04:cec0:11cc:d11e:294b:a29d:8c1f:dfa4) (Ping timeout: 265 seconds)
[18:27:54] *** Joins: sirquack (~sirquack@2601:643:8680:526:80a:af3b:b209:8cd9)
[18:33:38] *** Quits: fourier_ (~fourier@94.234.33.74) (Ping timeout: 265 seconds)
[18:34:37] *** Joins: fourier (~fourier@c-5eea222b-74736162.cust.telenor.se)
[18:37:49] *** Quits: Inline (~Inline@2a02:908:1252:7a80::117) (Ping timeout: 240 seconds)
[18:49:29] *** Quits: trip_fandango (~tripfanda@bzq-219-32-122.isdn.bezeqint.net) (Ping timeout: 252 seconds)
[18:51:06] *** Joins: dlowe (~dlowe@user/dlowe)
[18:52:11] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[18:53:32] *** Quits: xiews (~wxie@2409:8945:3000:1443:db06:ae7a:357d:f257) (Remote host closed the connection)
[18:54:50] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[19:00:20] *** Joins: mtreis (~mtreis@024-181-180-008.res.spectrum.com)
[19:01:13] *** Quits: pdietz (~pdietz@216-59-66-162.static.firstlight.net) (Ping timeout: 256 seconds)
[19:06:59] *** Quits: sirquack (~sirquack@2601:643:8680:526:80a:af3b:b209:8cd9) (Ping timeout: 265 seconds)
[19:07:49] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[19:07:49] *** Joins: VincentV` (~user@212.241.25.167)
[19:09:01] *** Quits: VincentVega (~user@212.241.25.167) (Ping timeout: 240 seconds)
[19:09:11] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[19:11:00] *** Quits: jpl01 (~user@2001:16b8:4931:c600:c1ba:14a6:b08d:c22) (Remote host closed the connection)
[19:11:49] *** Quits: mtreis (~mtreis@024-181-180-008.res.spectrum.com) (Ping timeout: 265 seconds)
[19:17:00] *** Joins: sirquack (~sirquack@2601:643:8680:526:80a:af3b:b209:8cd9)
[19:19:25] *** Joins: trip_fandango (~tripfanda@2a00:a040:19e:72a1:4501:4dfb:ee8d:2344)
[19:21:27] *** Joins: pdietz (~pdietz@216-59-66-162.static.firstlight.net)
[19:23:54] *** Quits: trip_fandango (~tripfanda@2a00:a040:19e:72a1:4501:4dfb:ee8d:2344) (Ping timeout: 265 seconds)
[19:25:02] <White_Flame> amazigh: at 24fps, it hides a lot of unrealistic micro-motion of items, like wobbling swords, the weighty movement of "heavy" things, etc
[19:25:54] <White_Flame> also in the way fabrics move
[19:26:26] <White_Flame> it's much harder to get things to look good when every little detail of movement is captured
[19:26:31] *** Quits: sirquack (~sirquack@2601:643:8680:526:80a:af3b:b209:8cd9) (Ping timeout: 252 seconds)
[19:27:10] <White_Flame> even though we can do so today
[19:28:28] <White_Flame> regarding games, smoothness & getting responsiveness/latency down as far as possible is desirable
[19:33:01] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:f1f0:a87b:efe3:ebd7)
[19:33:01] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:f1f0:a87b:efe3:ebd7) (Changing host)
[19:33:01] *** Joins: skapata (~Skapata@user/skapata)
[19:33:35] *** Quits: VincentV` (~user@212.241.25.167) (Ping timeout: 256 seconds)
[19:43:54] *** Joins: trip_fandango (~tripfanda@2a00:a040:19e:72a1:4501:4dfb:ee8d:2344)
[19:44:05] <AndrewYu> Ok... got a question at https://termbin.com/52eo. Hope that you guys could help me out- thanks!
[19:46:21] <White_Flame> yes, I've had related complaints about the non-declarative nature of lisp source code, that it's an ordered list of mutations applied to a running image
[19:47:22] <White_Flame> but certainly people make an implicit division between construction of an environment and execution of an environment, the latter of which should keep more pure
[19:48:16] <dlowe> AndrewYu: I think you are conflating the name of the function with the function object itself.
[19:48:38] <White_Flame> in CL, I believe it's undefined behavior to try to redefine CL:*, so there it's by fiat stateless
[19:48:49] <AndrewYu> dlowe: Well fine, that's not the point
[19:49:00] <jackdaniel> using closures is not functional because if the variable is used, then the result is not a function of the funcallable arguments
[19:49:02] *** Quits: monkey_ (~user@181.114.17.106) (Ping timeout: 265 seconds)
[19:49:07] <AndrewYu> I could write (a (bunch (of (lambdas))))
[19:49:07] *** Joins: monkey_` (~user@181.114.17.106)
[19:49:19] *** Joins: random-nick (~random-ni@87.116.165.83)
[19:49:26] <AndrewYu> jackdaniel: aha, thanks
[19:49:29] <White_Flame> jackdaniel: even if the closed-over values are constant?
[19:49:47] <White_Flame> this means currying is non-functional?
[19:50:25] *** Quits: monkey_` (~user@181.114.17.106) (Remote host closed the connection)
[19:50:46] <jackdaniel> White_Flame: if the closed over value is a constant then one could argue that it is not really a closure (perhaps some formal distinction should be made) - but yeah, I get your point and I agree
[19:50:59] <jackdaniel> (that is I believe that currying /is/ functional
[19:51:00] <jackdaniel> )
[19:51:07] <AndrewYu> currying is ofc functional
[19:51:33] <White_Flame> can't really distinguish currying from read-only closures
[19:52:05] <AndrewYu> White_Flame: Yeah. FP is a bit messey to me- Recursion is used a lot, which means you got to give things a name. And giving things names are kind-of-but-not-really-ish side effects? Then you have different ways to handle IO, awww
[19:52:34] <jackdaniel> yes, if variables in the closure are never modified then from the outside perspective they could be very much not a closure
[19:52:44] <White_Flame> FP isn't just about side effects, it's about referential transparency, too
[19:52:53] <jackdaniel> I think that referential transparency would be a better term
[19:52:57] <jackdaniel> hah!
[19:53:24] <AndrewYu> yeh
[19:53:35] <AndrewYu> I thought that currying is a different thing, basically meaning that (λxy.xy) = (λx.(λy.xy))
[19:53:36] *** Joins: makomo (~makomo@user/makomo)
[19:53:46] <AndrewYu> That's an oversimplification, but still
[19:54:22] <White_Flame> well, it means that you can pass around a partially-applied function as a first class object
[19:54:58] <jackdaniel> regarding the question with squares - functions are resolved in their lexical scope
[19:55:02] <White_Flame> and usually indistinguishable from non-curried functions
[19:55:08] <jackdaniel> so binding * to + above the function call has no effect
[19:55:35] <jackdaniel> for a very lax lack of definition of "resolved" :)
[19:56:48] <AndrewYu> has no effect? (let ((* +))
[19:56:56] <AndrewYu>   (square 5))
[19:56:57] <AndrewYu>  is 10 according to my repl
[19:57:06] <White_Flame> (has no side effect, at least :-P)
[19:57:06] <pjb> AndrewYu: In CL, there are indeed precise and specific rules about what binding of a function is called.  It depends on whether the name is in the CL package (those bindings cannot change), or not, and if not, whether the function name is declared as INLINE, NOTINLINE, and whether the called function is compiled in the same compilation unit as the caller function.
[19:57:24] <White_Flame> oh, that did affect it non-lexically, nevermind
[19:58:20] * AndrewYu proceeds to learn more about CL
[19:58:55] <jackdaniel> AndrewYu: I don't know what scheme you use, but on chicken it gives 25
[19:58:56] <pjb> AndrewYu: therefore if you don't want the function to change at run-time (even if it is redefined elsewhere), you must not declare it notinline, you may declare it inline, and you may compile it in the same compilation unit (or it can be a function name in the CL package).
[19:59:00] <dlowe> AndrewYu: What Scheme implementation are you using? I'm pretty sure that's wrong
[19:59:29] <AndrewYu> dlowe: Chicken csi
[19:59:30] <jackdaniel> I'm not scheme expert but dynamic function bindings would be a terrible thing to do so I doubt that anyone would do that
[19:59:31] <pjb> AndrewYu: on the other hand, if you want the function to change at run-time (when it is redefined elsewhere), you must not declare it inline, you must declare it notinline, and it may not be in the CL package.
[19:59:45] <AndrewYu> err
[20:00:09] <jackdaniel> voila, chicken csi: https://imgur.com/B7vfeN1.png
[20:00:23] <pjb> AndrewYu: of course, in the later case, the semantics of your program will be based on the mutation of the function binding, so the functional expression of that will be harder to write (you will have to involve monads and sophisticated mathematical tools).
[20:00:58] <jackdaniel> sorry for bad cropping :)
[20:01:24] * AndrewYu gets very confused
[20:01:30] <pjb> AndrewYu: I don't think scheme has as specific rules about it. It will depend on how/when the called functions are compiled.
[20:02:05] <AndrewYu> pjb: I kind of get that now
[20:02:22] <pjb> AndrewYu: of course,  you could pass the used functions as parameter.  (define (square n *)  (* n n))   (square 5 *) (square (log 5) +)  and have no surprise.
[20:02:25] * AndrewYu notes that a bunch of INLINE stuff makes users configurating their programs a bit harder and makes things really not flexible
[20:02:47] <White_Flame> not knowing scheme, is there a difference between (define foo (lambda (x) ...)) and (define (foo x) ...) ?
[20:02:57] <pjb> AndrewYu: and you can obviously do the same in CL (but you may want to use a macro to ease the syntax given lisp-2 nature of CL).
[20:03:04] <pjb> White_Flame: no difference.
[20:03:06] <AndrewYu> jackdaniel: Hmm, I didn't know how org-mode evaluated that to 10. I remember setting org-mode to use chicken, heh
[20:03:23] <jackdaniel> why did you say csi then?
[20:03:32] <AndrewYu> Because it was supposed to use csi
[20:03:37] <AndrewYu> My bad
[20:06:07] *** Quits: parjanya (~esb@2804:14c:1ad:8b70::1000) (Remote host closed the connection)
[20:07:04] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[20:07:33] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:12:09] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:e9b2:ade6:e9e3:d923) (Remote host closed the connection)
[20:14:55] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[20:15:25] *** Quits: fourier (~fourier@c-5eea222b-74736162.cust.telenor.se) (Ping timeout: 240 seconds)
[20:16:46] *** Joins: fourier (~fourier@c-5eea21ee-74736162.cust.telenor.se)
[20:18:57] *** Joins: Inline (~Inline@2a02:908:1252:7a80::117)
[20:23:16] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:27:25] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[20:29:32] *** Joins: Inline__ (~Inline@2a02:908:1252:7a80::117)
[20:30:37] *** Quits: Inline (~Inline@2a02:908:1252:7a80::117) (Ping timeout: 240 seconds)
[20:32:31] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Ping timeout: 252 seconds)
[20:34:22] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[20:38:03] *** Joins: jao (~jao@194.99.104.13)
[20:38:19] *** Joins: artchad (~user@public-gprs229282.centertel.pl)
[20:39:39] *** Joins: Inline (~Inline@aftr-37-201-240-202.unity-media.net)
[20:40:07] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[20:41:14] *** Quits: Inline__ (~Inline@2a02:908:1252:7a80::117) (Ping timeout: 265 seconds)
[20:44:19] *** Quits: artchad (~user@public-gprs229282.centertel.pl) (Ping timeout: 268 seconds)
[20:48:20] *** Joins: strajder (~strajder@user/strajder)
[20:49:45] *** Joins: karlosz (~karlosz@47.151.136.69)
[20:49:53] *** Joins: yewscion (~yewscion@52.95.4.12)
[20:53:03] *** Quits: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6) (Ping timeout: 252 seconds)
[20:53:16] *** Quits: karlosz (~karlosz@47.151.136.69) (Client Quit)
[20:58:40] *** Joins: artchad (~user@public-gprs229282.centertel.pl)
[20:59:49] <artchad> Hello. Does this thing work?
[20:59:56] <jackdaniel> yes.
[21:00:04] <artchad> cool
[21:00:06] <artchad> xD
[21:00:13] <jackdaniel> glad to be of service
[21:00:34] <artchad> does #lispgames exist? How can I list all available rooms with erc?
[21:01:03] <jackdaniel> it does; as of listing in erc I don't know
[21:01:24] <artchad> thanks for answering half of the question
[21:01:35] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Ping timeout: 268 seconds)
[21:02:05] <artchad> I apparently currently not able to join #lispgames. Maybe I need to register. BRB
[21:02:08] *** Parts: artchad (~user@public-gprs229282.centertel.pl) ()
[21:02:11] <jackdaniel> I've answered three questions already, and one answer was not definitive!
[21:02:39] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[21:09:39] *** Joins: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:91bc:7f19:7ad4:1afd)
[21:09:41] *** Quits: Algernon91 (~Algernon6@2a04:cec0:11c9:46f0:294b:a29d:8c1f:dfa4) (Read error: No route to host)
[21:12:10] *** Quits: thevishy (~Nishant@2405:201:f005:c007:a5d7:38b:39cd:e2ae) (Quit: Leaving)
[21:13:16] *** Joins: artchad (~user@public-gprs229282.centertel.pl)
[21:13:22] <artchad> looks like I needed to register
[21:14:58] <artchad> also if you type "/help" in the first erc buffer that's created, you'll get a list of all erc commands shown in another buffer that pops up in a new window
[21:15:06] <jackdaniel> at the beginning of a migration from freenode many spambot farms invaded servers
[21:15:22] <jackdaniel> so most channels at the beginning set +r flag that was very efficient against that nuisance
[21:15:35] <jackdaniel> while bots are gone many channels did not lift the flag afterwards
[21:15:41] * jackdaniel uses irssi
[21:15:46] <artchad> it's reasonable to assume that people would know a channel exists, even if it's not listed.
[21:16:09] <artchad> if I understood you correctly
[21:16:20] *** Quits: sander (~sander@user/sander) (Ping timeout: 252 seconds)
[21:16:26] <artchad> probably not
[21:16:37] <artchad> +r means probably "read only" or something like that
[21:17:11] <jackdaniel> +r means "registered nicks only"
[21:17:55] *** Joins: sander (~sander@user/sander)
[21:20:41] <artchad> evaluating (erc-cmd-LIST) lists all channels btw. Just figured that out. M-S-; to pull up the eval prompt in the minibuffer and then you can write the command you've found by typing "/help" before
[21:21:43] <artchad> I like to share new things I learn, because sometimes someone else didn't know the thing I've just learned.
[21:22:48] *** Quits: yewscion (~yewscion@52.95.4.12) (Ping timeout: 265 seconds)
[21:23:28] *** Joins: yewscion (~yewscion@52.94.133.131)
[21:26:13] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 240 seconds)
[21:31:55] *** Joins: monkey_ (~user@181.114.17.106)
[21:33:46] *** Joins: karlosz (~karlosz@47.151.136.69)
[21:38:22] *** Joins: Algernon91 (~Algernon6@2a04:cec0:11c9:46f0:756a:e8b7:3772:2555)
[21:39:15] *** Quits: yewscion (~yewscion@52.94.133.131) (Ping timeout: 252 seconds)
[21:39:36] *** Joins: strajder_ (~strajder@user/strajder)
[21:39:40] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[21:39:47] *** Quits: strajder_ (~strajder@user/strajder) (Client Quit)
[21:40:03] *** Joins: strajder (~strajder@user/strajder)
[21:40:03] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[21:41:54] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[21:42:11] *** Quits: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:91bc:7f19:7ad4:1afd) (Ping timeout: 252 seconds)
[21:44:13] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[21:44:22] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[21:45:05] *** Joins: amb007 (~a_bakic@53.151.22.93.rev.sfr.net)
[21:47:27] *** Quits: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (Ping timeout: 265 seconds)
[21:48:52] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:f1ba:fd5a:67b3:b8c0)
[21:51:14] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[21:51:32] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[22:06:53] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[22:07:21] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:12:06] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[22:12:44] *** Joins: yewscion (~yewscion@52.94.133.131)
[22:17:25] *** Quits: galex-713 (~quassel@galex-713.eu) (Ping timeout: 265 seconds)
[22:25:54] *** Joins: gproto23 (~gproto23@user/gproto23)
[22:26:50] *** Joins: jkordani (~jkordani@c-69-255-2-251.hsd1.md.comcast.net)
[22:28:57] <jkordani> looking to make a little library to wrap an API and I'm wondering about password management.  I don't expect this library to be used by anyone, but I'm still considering best practices.  The REST api supports fetching an auth token.  How should I get that to the user of my library?  Or rather, how should I get the password from my user?  I
[22:28:57] <jkordani> don't see any other way than to store it in a variable that gets used by my library but then of course the password is available to anything in the image.
[22:29:07] *** Quits: Inline (~Inline@aftr-37-201-240-202.unity-media.net) (Ping timeout: 252 seconds)
[22:29:40] <jkordani> on the command line when the password is read in, I can unintern it after I'm done with it and keep the auth token.  maybe that's effectively the same thing as the password...
[22:29:42] *** Joins: Inline (~Inline@aftr-37-201-240-202.unity-media.net)
[22:30:08] <jkordani> do I read from a password flie and then unintern the password when I'm done?  Or do the same with the auth token?
[22:30:44] <jkordani> I guess I could start with "what am I trying to defend against" But I suppose I'm looking to spark a more general conversation
[22:30:56] <jkordani> and waste time not actually writing the code :-D
[22:34:54] <jackdaniel> if yo udon't have anything to hide you should leave it without passwords of course
[22:35:04] <jackdaniel> at least that's why smart people in goverments say about encryption
[22:35:32] *** Quits: Algernon91 (~Algernon6@2a04:cec0:11c9:46f0:756a:e8b7:3772:2555) (Ping timeout: 252 seconds)
[22:36:00] <artchad> Yes, I trust (((professionals))).
[22:38:44] <jackdaniel> wait, it was different. let it be open but only for us
[22:39:50] *** Quits: amb007 (~a_bakic@53.151.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[22:40:29] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[22:40:36] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[22:41:09] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[22:41:33] *** Joins: robin (~robin@user/terpri)
[22:43:37] <jkordani> I guess it can't be helped.  If this is going to run headless then I guess a password file needs to be created
[22:43:45] <artchad> but what exactly is the issue though
[22:43:49] *** Quits: Inline (~Inline@aftr-37-201-240-202.unity-media.net) (Ping timeout: 240 seconds)
[22:43:50] <jkordani> perhaps integration with a keychain is better
[22:43:56] <artchad> AES works fine
[22:44:11] <artchad> and then just hash and maybe add a salt to it
[22:44:28] <jkordani> I'm not really sure, I'm thinking about a solution for which I can't think of the problem I guess, other than "passwords lying around are bad, and passwords lying around in an image might also be bad"
[22:44:49] *** Joins: Inline (~Inline@aftr-37-201-240-202.unity-media.net)
[22:45:19] <jkordani> you mean store a decryption key in the library, and provide a method to encrypt the password with that key?
[22:45:26] <jackdaniel> have password hashes in the database and compare them without retaining a reference after the authentication
[22:45:28] <artchad> that would be indeed bad. But think about how an attacker would attack your software. What are you trying to defend against. Without a concrete threat model, thinking about security is a waste of time.
[22:45:48] <jkordani> artchad: you're right honestly
[22:46:39] <jkordani> hmm ok, I guess honestly I'll just get started coding
[22:46:46] <artchad> that's the spirit!
[22:46:52] <artchad> hehehe
[22:50:48] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[22:56:10] *** Joins: nature (~nature@45.32.235.173)
[22:58:01] *** Quits: monkey_ (~user@181.114.17.106) (Ping timeout: 265 seconds)
[23:13:12] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:14:55] *** Joins: VincentVega (~user@212.241.25.167)
[23:17:49] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[23:19:53] *** Joins: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.sdns.net.rogers.com)
[23:22:47] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[23:23:48] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[23:30:12] *** Quits: kurfen_ (~kurfen@160.238.38.230) (Quit: ZNC 1.8.2 - https://znc.in)
[23:31:44] *** Joins: kurfen (~kurfen@160.238.38.230)
[23:35:42] <jkordani> trying to figure out the name of a concept.  I have a function that takes optional args, and I want to pass these as themselves optional arguments to the lower level function, &rest args brings them in as a list, but how to I explode the list into the args themselves?  Does this question make sense?
[23:36:01] *** Joins: monkey_ (~user@181.114.17.106)
[23:36:02] *** Joins: kurfen_ (~kurfen@176.119.195.10)
[23:36:15] <jackdaniel> (apply #'foo args) ;?
[23:36:44] <artchad> #'destructuring-bind ?
[23:36:47] <jackdaniel> (destructuring-bind (&optional a b c) args …)
[23:36:51] <artchad> first
[23:37:10] *** Quits: kurfen (~kurfen@160.238.38.230) (Ping timeout: 265 seconds)
[23:37:13] <jackdaniel> (apply #'(lambda (&optional a b c) …) args)
[23:37:33] *** Quits: kurfen_ (~kurfen@176.119.195.10) (Client Quit)
[23:38:07] *** Joins: kurfen (~kurfen@176.119.195.10)
[23:38:57] <jkordani> I should say in this case that they can all be keyword args.  basically I am wrapping drakma:http-request, and sometimes I need to pass keyword arguments from the wrapper down to this call, possibly through multiple calls.
[23:39:07] <jkordani> does that change anything?
[23:40:11] <jackdaniel> no, just use apply
[23:40:15] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 252 seconds)
[23:41:01] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[23:41:33] <artchad> one could also use a dynamic variable if you pass down variables a lot.
[23:41:48] <artchad> It can be local to the function
[23:42:42] <artchad> oh, nvm. I think those "def..." forms need to be top level forms. Either way, the variable can be locally bound.
[23:44:29] <pjb> jkordani: (defun foo (&rest args &optional a b) args) #| ERROR: While compiling foo : Bad lambda list : (&rest args &optional a b) |# 
[23:44:43] <pjb> jkordani: (defun foo (&optional a b &rest args ) args) #| --> foo |# (foo 1 2 3 4) #| --> (3 4) |# 
[23:44:52] <pjb> jkordani: do you want to rephrase your question?
[23:45:54] <pjb> jkordani: note: &optional also take a list (var default-value indicator-var)  which let you know if the optional argument has been passed.  You can then build an argument list not containing them.
[23:47:22] <pjb> (defun foo (&optional (a nil ap) (b nil bp) &rest args)   (apply (function list) (when ap (cons a (when bp (cons b args)))))) #| --> foo |# (values (foo) (foo 1) (foo 1 2) (foo 1 2 3) (foo nil nil 3 4)) #| --> nil ; (1) ; (1 2) ; (1 2 3) ; (nil nil 3 4) |# 
[23:47:26] <pjb> jkordani: ^
[23:48:13] <jkordani> perhaps.  I have a function that wraps http-request.  In one case, I have a login function that needs to pass parameters to the :basic-authentication param to http-request via the wrapper (and maybe in the future other http-request params).  so I'm trying to write the wrapper such that any extra params I want to pass into the wrapper make it
[23:48:14] <jkordani> into the http-request call.  I can see specifying &rest &allow-other-keys but that hardcodes the lower level api call to include those other keys.  I can do &rest alone and get those extra arguments as a list, in this case they would likely just be keyword arguments.  so in the wrapper i would have a &rest params as the function definition,
[23:48:14] <jkordani> where params are keywords and arguments that need to get into the http-request call
[23:48:37] <jkordani> I see, so apply and concatenate the list of default args I need with the rest list
[23:49:26] <pjb> jkordani: so now you change the question?
[23:50:00] <pjb> jkordani: &key arguments are included in &rest, so you just pass rest.
[23:50:29] <pjb> (defun koo (&rest args &key &allow-other-keys) (apply (function list) args))  #| --> koo |#  (koo :a 1 :b 2) #| --> (:a 1 :b 2) |# 
[23:52:33] <pjb> jkordani: notably indeed, you can prepend entries: (defun goo (&key a b c) (list a b c))  #| --> goo |# (apply (function goo) (list* :a 11 :c 22 '(:a 1 :b 2 :c 2))) #| --> (11 2 22) |# 
[23:52:33] <jkordani> sorry, I was trying to be as clear as I could
[23:52:47] <pjb> jkordani: yes, you confused optional arguments with key arguments.
[23:53:11] <pjb> Or I did.  It's true that &key arguments are also optional, but they're not &optional arguments.
[23:55:10] <pjb> If you have a default list, are you sure you cannot just set those defaults in the lambda-list? (defun goo (&key (a 1) (b 2) (c 3)) (list a b c)) #| --> goo |# (goo :a 11 :c 33) #| --> (11 2 33) |# 
[23:58:09] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Remote host closed the connection)
[23:58:24] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[23:58:37] *** Quits: Inline (~Inline@aftr-37-201-240-202.unity-media.net) (Ping timeout: 240 seconds)
