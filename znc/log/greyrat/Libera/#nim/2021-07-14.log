[00:00:25] *** Quits: Helios (~dwaglemat@2001:470:69fc:105::5f8) (Read error: Connection reset by peer)
[00:00:26] *** Quits: nixfreak_nim[m] (~reversem3@2001:470:69fc:105::33d1) (Read error: Connection reset by peer)
[00:15:10] <arkanoid> ynfle, here the code: https://play.nim-lang.org/#ix=3sUb , point is understanding how nim behaves when checking type of generic procs. As you can see you can map the type without the generic, but not with the generic params unless the call convention matches
[00:30:18] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f) (Ping timeout: 276 seconds)
[00:40:23] <FromDiscord> <theangryepicbanana> has the syntax highlighting for nim in vscode always been this bad?
[00:40:33] <FromDiscord> <theangryepicbanana> I feel like it used to be a lot better
[00:42:55] <FromDiscord> <theangryepicbanana> like I was able to do this in about 5 minutes tf https://media.discordapp.net/attachments/371759389889003532/864600298794385418/unknown.png
[00:49:14] <FromDiscord> <reilly> In reply to @theangryepicbanana "like I was able": Is this the OG one or the saem one?
[00:49:53] <FromDiscord> <theangryepicbanana> In reply to @reilly "Is this the OG": it's the main one (with 44k downloads), but I edited the syntax highlighting file very briefly because it was terrible
[00:50:28] <FromDiscord> <theangryepicbanana> is there really no good highlighting for any of the nim extensions?
[00:50:34] <FromDiscord> <theangryepicbanana> 🤔
[00:52:15] <FromDiscord> <reilly> Is saem's version not any better in that regard? That's the version I use, but I haven't bothered to compare the two, so I'm legitimately curious if it's any better.
[00:52:25] <FromDiscord> <theangryepicbanana> it's just as bad
[00:53:20] *** Quits: def- (~def-@static.238.114.9.176.clients.your-server.de) (Quit: -)
[00:53:26] <FromDiscord> <reilly> Nim's tooling could really use some improvements, it seems. Not just syntax highlighting, either.
[00:53:34] <FromDiscord> <theangryepicbanana> yeah
[00:53:41] <FromDiscord> <theangryepicbanana> seems like a have another project ig
[00:53:44] *** Joins: def- (~def-@static.238.114.9.176.clients.your-server.de)
[00:54:08] <FromDiscord> <theangryepicbanana> (re: highlighting)
[00:55:32] <FromDiscord> <theangryepicbanana> one thing I'd look at is Haxe, which is a language with macro functionality similar to nim (minus templates). one thing that it does is integrate the LSP (autocompletion stuff) directly into the compiler/language so that it's easy to keep track of
[00:55:50] <FromDiscord> <theangryepicbanana> (edit) "one thing I'd look at ... is" 03added "for the tooling stuff"
[00:56:13] <FromDiscord> <theangryepicbanana> outside of LSP, it generally integrates that stuff into the compiler
[00:56:19] <FromDiscord> <theangryepicbanana> (edit) "outside of LSP, it generally integrates that ... stuff" 03added "kinda"
[00:56:51] <FromDiscord> <theangryepicbanana> (edit) "that kinda stuff" => "other tooling"
[00:57:16] <FromDiscord> <theangryepicbanana> anyways very pog
[00:59:45] <FromDiscord> <theangryepicbanana> oh yeah for reference on the thing earlier, I make syntax highlighting stuff as a hobby lol
[01:12:16] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[01:23:00] *** Joins: nixfreak_nim[m] (~reversem3@2001:470:69fc:105::33d1)
[01:24:09] <FromDiscord> <jfmonty2> Any idea why storing threads and their args in an array works fine, but storing them in a seq causes my program to crash?
[01:24:09] *** Joins: Helios (~dwaglemat@2001:470:69fc:105::5f8)
[01:24:10] *** Joins: happycorsair[m] (~happycors@2001:470:69fc:105::205)
[01:25:20] <FromDiscord> <jfmonty2> I know arrays are stack-allocated and seqs are heap-allocated, so maybe the thread has a pointer or something and then the seq gets moved?
[01:25:51] <FromDiscord> <ElegantBeef> If you're growing the seq a lot that could be it
[01:26:02] <FromDiscord> <ElegantBeef> Hard to say without seeing the code
[01:26:48] <FromDiscord> <jfmonty2> So what's the standard method for supporting a non-fixed number of threads? I can't just not store the thread anywhere because that causes it to crash too
[01:27:14] <FromDiscord> <konsumlamm> it should probably be reported as a bug, either way
[01:27:38] <FromDiscord> <ElegantBeef> I mean i use a seq for threads
[01:27:54] <FromDiscord> <ElegantBeef> I've done it multiple times
[01:28:02] <FromDiscord> <jfmonty2> I'm only putting 16 items into it, is that too many?
[01:28:07] <FromDiscord> <jfmonty2> one per logical cpu
[01:28:11] <FromDiscord> <ElegantBeef> It depends what you're doing
[01:28:23] <FromDiscord> <ElegantBeef> The thread sequence doesnt really matter since nothing should point at it
[01:28:50] <FromDiscord> <jfmonty2> that's what I was assuming
[01:30:15] <FromDiscord> <ElegantBeef> Do me a favour and try `--gc:orc` 😄
[01:30:45] <FromDiscord> <ElegantBeef> I forgot i recently had refc crash my program with my threading but orc didnt
[01:30:55] <FromDiscord> <ElegantBeef> So super odd behaviour that probably needs an issue made 😄
[01:31:11] <FromDiscord> <jfmonty2> hmm, well it gives me an IndexDefect now, where before it wasn't saying anything at all
[01:31:14] <FromDiscord> <jfmonty2> so... progress!
[01:31:25] <FromDiscord> <ElegantBeef> was it just a segmentation dump?
[01:31:44] <FromDiscord> <ElegantBeef> well segementation fault 😄
[01:33:22] <FromDiscord> <jfmonty2> not sure, I can' quite figure out where this index defect is coming from because I'm not doing any indexing that I can see
[01:33:27] <FromDiscord> <jfmonty2> (edit) "can'" => "can't"
[01:35:19] <FromDiscord> <konsumlamm> we can't help you if we don't know your code
[01:36:05] <FromDiscord> <reilly> Put it on play.nim-lang.org, maybe? :)
[01:36:17] <FromDiscord> <jfmonty2> I can post a snippet but it won't run without the whole program, is that a problem?
[01:36:25] <FromDiscord> <jfmonty2> I guess I could mock the stuff that's actually doing the work
[01:37:37] <FromDiscord> <jfmonty2> does play.nim-lang do threading?
[01:38:19] <FromDiscord> <reilly> I can't speak for everyone, but I probably wouldn't run it on the site itself. I'd copy it to a file and run it on my own machine.
[01:38:33] <FromDiscord> <reilly> (After checking the code is safe-looking, of course ;) )
[01:38:54] <FromDiscord> <reilly> (edit) "(After checking ... thelooks" 03added "that" | "is safe-looking," => "looks safe,"
[01:39:26] <FromDiscord> <reilly> Especially for something complicated like threading, since I don't know what's going on behind the scenes on that site.
[01:40:04] <FromDiscord> <ElegantBeef> Well the site doesnt have the thread flag enabled so you couldnt run it there
[01:40:41] <FromDiscord> <jfmonty2> I do have it in a public repo, would that work? https://git.jfmonty2.com/jfmonty2/camelcup
[01:41:06] <FromDiscord> <reilly> In regards to what code to give us, ideally it'll be the minimum amount of code required to reproduce the problem. Trying to figure out what code you don't need to include may also help you track down the bug yourself.
[01:41:16] <FromDiscord> <ElegantBeef> Yea public repos are fantastic for helping
[01:41:18] <FromDiscord> <jfmonty2> er, needs the branch: https://git.jfmonty2.com/jfmonty2/camelcup/src/branch/threads
[01:41:32] <FromDiscord> <reilly> The whole repo gets the job done too, of course.
[01:41:43] <FromDiscord> <jfmonty2> I'll see if I can make a toy version work as well
[01:42:28] <FromDiscord> <jfmonty2> specifically it's `test.nim` that I've been trying to compile and run
[01:42:43] <FromDiscord> <jfmonty2> which imports most of the other stuff
[01:46:53] <FromDiscord> <jfmonty2> the threading all happens in `randomGames` in `simulation.nim` though, should have mentioned that as well
[01:48:01] *** Joins: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f)
[01:50:34] *** Joins: rockcavera (~rc@192.12.112.199)
[01:50:34] *** Quits: rockcavera (~rc@192.12.112.199) (Changing host)
[01:50:34] *** Joins: rockcavera (~rc@user/rockcavera)
[01:52:04] <FromDiscord> <jfmonty2> ok, toy example appears to be exhibiting the same behavior: https://play.nim-lang.org/#ix=3sUy
[01:56:32] *** Quits: max22- (~maxime@2a01cb0883359800bfc4d44b448805be.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[02:01:47] <FromDiscord> <jfmonty2> Apparently storing the threads/args in arrays vs. seqs had nothing to do with it? I am now getting the same crash regardless of how I store them
[02:03:01] <FromDiscord> <ElegantBeef> Well one issue is the way you're doing this
[02:03:16] <FromDiscord> <ElegantBeef> Why are you adding threads?
[02:04:10] <FromDiscord> <ElegantBeef> https://play.nim-lang.org/#ix=3sUE is a better way of doing it
[02:04:13] <FromDiscord> <jfmonty2> to speed up execution, since the problem is embarrassingly parallel
[02:04:31] <FromDiscord> <ElegantBeef> No i mean why are you adding threads to a seq instead of just making the seq the size you want 😄
[02:04:40] <FromDiscord> <jfmonty2> oh 😛
[02:04:44] <FromDiscord> <jfmonty2> becuase I'm used to Python I guess
[02:05:22] <FromDiscord> <ElegantBeef> Thread is a value type so it doesnt work the way you want and on devel actually has a compile time error due to the `=copy` being set to error
[02:06:21] <FromDiscord> <jfmonty2> ah ok, interesting
[02:07:11] <FromDiscord> <ElegantBeef> Though this doesnt work properly as it returns 48 😄
[02:07:24] <FromDiscord> <ElegantBeef> Ah nvm
[02:07:39] <FromDiscord> <jfmonty2> that sounds right, 16  3?
[02:07:40] <FromDiscord> <ElegantBeef> Thought each thread ran independently didnt read
[02:07:51] <FromDiscord> <jfmonty2> nope sums em all up 😛
[02:07:56] <FromDiscord> <ElegantBeef> Then yea
[02:07:58] <FromDiscord> <jfmonty2> I just did that because it more closely mimics what I'm really trying to do
[02:11:07] <FromDiscord> <jfmonty2> Interestingly if I get rid of the seq entirely (just create a new `Thread` every iteration) it crashes again
[02:11:22] <FromDiscord> <jfmonty2> Is that because the thread goes out of scope and is therefore dropped at the end of the iteration?
[02:13:48] <FromDiscord> <ElegantBeef> Seems so, since with orc it works sometimes but othertimes it crashes
[02:15:01] <FromDiscord> <ElegantBeef> I've not overly used threads much so am just suggesting have a single collection of threads be it an array or seq create threads into it
[02:15:41] <FromDiscord> <jfmonty2> Yeah, that seems to work best.
[02:15:53] <FromDiscord> <jfmonty2> I feel like the old saying about regular expressions applies even more so to concurrency
[02:16:10] <FromDiscord> <raid sponsored by kadybat + dei> sent a long message, see http://ix.io/3sUG
[02:16:14] <FromDiscord> <aryn> very cool
[02:16:15] <FromDiscord> <raid sponsored by kadybat + dei> sent a long message, see https://paste.rs/v59
[02:16:18] <FromDiscord> <barton222> sad
[02:16:19] <FromDiscord> <raid sponsored by kadybat + dei> sent a long message, see http://ix.io/3sUG
[02:16:19] <FromDiscord> <bloatoo> CHAD
[02:16:21] <FromDiscord> <raid sponsored by kadybat + dei> sent a long message, see https://paste.rs/d6q
[02:16:24] <FromDiscord> <raid sponsored by kadybat + dei> @Chilla Chris@Chris3606@chrisw@Churros@citycide@cji@ClawS@Clops@Cloudperry@codescapade@codestorm@Condescending Giraffe@congusbongus@CookiShoos@cp@creatable@crispin@dabmlfz@dan@Daniel@Daniele@DanielVF@daredevelops@darkazer@Dat Boi@Dav1s@Davin@deech@DeltaPHC@deme@demotomohiro@Deorder (aka Komerdoor)@Dinho@djanatyn@djazz@dmoody256@Dobermann@Doctor Darkmantle@dom96@dorei@Dragon@drewp@DRS@Yardanico@ElegantBeef@aust9n@dr
[02:16:25] <FromDiscord> <raid sponsored by kadybat + dei> @Chilla Chris@Chris3606@chrisw@Churros@citycide@cji@ClawS@Clops@Cloudperry@codescapade@codestorm@Condescending Giraffe@congusbongus@CookiShoos@cp@creatable@crispin@dabmlfz@dan@Daniel@Daniele@DanielVF@daredevelops@darkazer@Dat Boi@Dav1s@Davin@deech@DeltaPHC@deme@demotomohiro@Deorder (aka Komerdoor)@Dinho@djanatyn@djazz@dmoody256@Dobermann@Doctor Darkmantle@dom96@dorei@Dragon@drewp@DRS@Yardanico@ElegantBeef@aust9n@dr
[02:16:25] <FromDiscord> <raid sponsored by kadybat + dei> sent a long message, see http://ix.io/3sUH
[02:16:27] <FromDiscord> <raid sponsored by kadybat + dei> @Chilla Chris@Chris3606@chrisw@Churros@citycide@cji@ClawS@Clops@Cloudperry@codescapade@codestorm@Condescending Giraffe@congusbongus@CookiShoos@cp@creatable@crispin@dabmlfz@dan@Daniel@Daniele@DanielVF@daredevelops@darkazer@Dat Boi@Dav1s@Davin@deech@DeltaPHC@deme@demotomohiro@Deorder (aka Komerdoor)@Dinho@djanatyn@djazz@dmoody256@Dobermann@Doctor Darkmantle@dom96@dorei@Dragon@drewp@DRS@Yardanico@ElegantBeef@aust9n@dr
[02:16:27] <FromDiscord> <raid sponsored by kadybat + dei> sent a long message, see https://paste.rs/AUP
[02:16:28] <FromDiscord> <raid sponsored by kadybat + dei> @Chilla Chris@Chris3606@chrisw@Churros@citycide@cji@ClawS@Clops@Cloudperry@codescapade@codestorm@Condescending Giraffe@congusbongus@CookiShoos@cp@creatable@crispin@dabmlfz@dan@Daniel@Daniele@DanielVF@daredevelops@darkazer@Dat Boi@Dav1s@Davin@deech@DeltaPHC@deme@demotomohiro@Deorder (aka Komerdoor)@Dinho@djanatyn@djazz@dmoody256@Dobermann@Doctor Darkmantle@dom96@dorei@Dragon@drewp@DRS@Yardanico@ElegantBeef@aust9n@dr
[02:16:29] <FromDiscord> <brainproxy> on noes, a spamtard
[02:16:29] <FromDiscord> <raid sponsored by kadybat + dei> @Chilla Chris@Chris3606<@!263737557685239808>@Churros@citycide@cji@ClawS@Clops@Cloudperry@codescapade@codestorm@Condescending Giraffe@congusbongus@CookiShoos@cp@creatable@crispin@dabmlfz@dan@Daniel@Daniele@DanielVF@daredevelops@darkazer@Dat Boi@Dav1s@Davin@deech@DeltaPHC@deme@demotomohiro@Deorder (aka Komerdoor)@Dinho@djanatyn@djazz@dmoody256@Dobermann@Doctor Darkmantle@dom96@dorei@Dragon@drewp@DRS@Yardanico@Elegan
[02:16:33] <FromDiscord> <Ahri Fox> NIM is based, dont spam here
[02:16:38] <FromDiscord> <creatable> kinda a bad raid ngl
[02:16:39] <FromDiscord> <raid sponsored by kadybat + dei> no nim sucks lol
[02:16:42] <FromDiscord> <bloatoo> lmao
[02:16:43] <FromDiscord> <barton222> lmao
[02:16:48] <FromDiscord> <! ! Reiter> lol
[02:16:49] <FromDiscord> <bloatoo> what a hustler
[02:16:51] <FromDiscord> <alehander42> /ban me
[02:16:57] <FromDiscord> <alehander42> hm howdo people
[02:17:01] <FromDiscord> <Canelhas> is this friendly or another crypto scam of some sorts?
[02:17:02] <FromDiscord> <alehander42> find the username so fast
[02:17:07] <FromDiscord> <aryn> tfw nim server has better raid prot than a 50k youtuber server lmfao
[02:17:21] <FromDiscord> <bloatoo> Didn't nim already get cancelled by vlang?
[02:17:21] <FromDiscord> <ElegantBeef> Well hey that raid might increase activity
[02:17:29] <FromDiscord> <ElegantBeef> In what way
[02:18:34] <FromDiscord> <theangryepicbanana> raid?
[02:18:35] <FromDiscord> <theangryepicbanana> pog
[02:18:53] <FromDiscord> <ache of head> Damn 6 pings
[02:18:57] <FromDiscord> <ache of head> Someone finally loved me
[02:19:21] <FromDiscord> <aryn> nope
[02:19:22] <FromDiscord> <aryn> raid
[02:19:24] <FromDiscord> <aryn> :KEKW:
[02:19:28] <FromDiscord> <ache of head> 😔
[02:19:46] <FromDiscord> <tandy> lmao↵(<@864610352858660926>)
[02:21:13] <FromDiscord> <Ahri Fox> i mean, id at least want a more detailed critique of it rather than JUST some app notifications on discord... doesn't convince me yknow
[02:21:50] <FromDiscord> <ElegantBeef> Was that a raid for vlang? 😛
[02:22:18] <FromDiscord> <theangryepicbanana> lmao
[02:22:40] <FromDiscord> <ElegantBeef> If so much like the language it was a piss poor attempt at it's goal
[02:25:03] <FromDiscord> <konsumlamm> rekt xd
[02:43:39] *** systemds1cks is now known as systemdsucks
[03:04:10] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f) (Ping timeout: 246 seconds)
[03:05:20] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[03:06:40] <FromDiscord> <TurtleP> sent a code paste, see https://play.nim-lang.org/#ix=3sUV
[03:53:34] <FromDiscord> <ElegantBeef> Looks like an echo of a ref object
[03:53:58] <FromDiscord> <ElegantBeef> Well echo of a object that contains two ref objects
[03:58:31] <FromDiscord> <TurtleP> but none of my echo calls even do that
[03:58:43] <FromDiscord> <ElegantBeef> Are you using a library that emits a vTable?
[03:58:56] <FromDiscord> <TurtleP> maybe iface?
[03:59:02] <FromDiscord> <TurtleP> but I'm not echoing an object anywhere
[04:00:26] <FromDiscord> <ElegantBeef> then iface might be the reason it's happening
[04:14:01] *** Joins: Guest32 (~Guest32@2603-8080-700a-3700-ea14-258c-8f8b-97f3.res6.spectrum.com)
[04:14:43] <Guest32> How do you echo an OOP object? Like the kind that's a ref object of RootObj? 
[04:15:07] <Guest32> When I try, I get an error saying that there's no `$`
[04:15:13] <Guest32> proc
[04:18:37] <FromDiscord> <ElegantBeef> you can do `echo refObject[]` which will echo the internal structure
[04:18:51] <FromDiscord> <ElegantBeef> But it's more suggested to define your own `$` operator
[04:19:59] <Guest32> @ElegantBeef That worked, thank you! Yeah, I figured it would be better when the code is more solid, but for now I'm messing around trying to understand OOP objects in nim.
[04:20:37] <Guest32> Thanks again
[04:20:41] *** Quits: Guest32 (~Guest32@2603-8080-700a-3700-ea14-258c-8f8b-97f3.res6.spectrum.com) (Quit: Client closed)
[04:20:53] <FromDiscord> <ElegantBeef> Yea all that does is dereference the ref object so you get the object, if you made the string operator using that in an object that is cyclical bad things would happen 😛
[04:40:37] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[05:01:13] <FromDiscord> <HPaulson> Hey all — am very new to nim dev, building a learning project. Does anyone know of a solid crypto lib I could use for things like generating entropy’s?
[05:03:27] <FromDiscord> <ElegantBeef> https://github.com/cheatfate/nimcrypto is probably the best crypto library to use
[05:03:30] <fn> <12R2D299> 4GitHub: 7"Nim cryptographic library"
[05:03:37] <FromDiscord> <HPaulson> Doesn’t have what I need
[05:03:59] <FromDiscord> <HPaulson> Checked it out -/ seems it only really does hashes and such
[05:15:07] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Remote host closed the connection)
[05:20:39] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[05:23:57] <FromDiscord> <bernardo> In reply to @HPaulson "Hey all — am": https://github.com/oprypin/nim-random
[05:23:59] <fn> <12R2D299> 4GitHub: 7"Random number generation library for Nim"
[05:25:49] <FromDiscord> <HPaulson> ????
[05:25:52] <FromDiscord> <HPaulson> I mean ok lmfao
[05:27:23] <FromDiscord> <bernardo> In reply to @HPaulson "I mean ok lmfao": sorry, I guess?
[05:27:50] <FromDiscord> <HPaulson> Hahaha, just very confused why you sent a numbers lib when I was tryna find a crypto lib 🤣
[05:28:27] <FromDiscord> <bernardo> > I could use for things like generating entropy
[05:28:47] <FromDiscord> <HPaulson> Correct, looking to generate entropy’s from mnemonics my guy
[05:29:18] <FromDiscord> <bernardo> 👍 good luck, sorry for adding noise to your quest
[05:29:23] <FromDiscord> <HPaulson> Haha all go do
[05:29:27] <FromDiscord> <HPaulson> (edit) "go do" => "good"
[05:30:04] <FromDiscord> <HPaulson> My startup was planning to use Nim in prod, slowly realizing thata prolly not the best choice… assumed support would be larger
[05:31:38] <FromDiscord> <ElegantBeef> Well i dont touch crypto so waiting for someone that does probably will give better suggestions 😄
[05:31:55] <FromDiscord> <HPaulson> Yeah I feel
[05:31:59] <FromDiscord> <HPaulson> Appreciate the help
[05:32:29] <FromDiscord> <HPaulson> Am just playing around atm, our CTO recommended the Lang over rust & I’m just rolling with his choice
[05:32:43] <FromDiscord> <HPaulson> But lack of pkgs worries me, even with solid bindings to c
[05:45:30] <FromDiscord> <Bung> @ElegantBeef oh, I see the process , it currently support primtive and plain objects now
[05:53:00] <FromDiscord> <ElegantBeef> Lol really watching it arent you 😄
[05:53:09] <FromDiscord> <ElegantBeef> Case objects and unexported fields are going to be tricky
[05:56:25] <FromDiscord> <Bung> yeah, I read the source code last night , know the idea how it works, well , string -> PNode maybe complex, like  a json parser that produce PNode
[05:58:11] <FromDiscord> <Bung> with the macro cache store proc signature, so addToBuffer no more needs
[06:06:01] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:19:35] <FromDiscord> <ElegantBeef> Yep the big issue though is i dont know how to do cross module accessing of fields
[06:27:12] <FromDiscord> <Bung> what's the old way , how it iterate fields of imported types ?
[06:27:31] <FromDiscord> <ElegantBeef> Yea
[06:28:26] <FromDiscord> <Bung> if that's problem so you even cant properly constructe that type's instance right ?
[06:28:45] <FromDiscord> <ElegantBeef> Dont follow
[06:29:34] <FromDiscord> <ElegantBeef> I should be able to instantiate any type since i have the symbol of that type
[06:29:54] <FromDiscord> <ElegantBeef> That means regardless where it's declared it should be instantiable
[06:30:08] <FromDiscord> <Bung> including private fields ?
[06:30:17] <FromDiscord> <ElegantBeef> No, that's what i just said is an issue
[06:30:35] <FromDiscord> <ElegantBeef> I dont know if one can get symbols for field names so it's an issue
[06:31:47] <FromDiscord> <ElegantBeef> For normal objects i can just use the field iterator i assume
[06:31:58] <FromDiscord> <Bung> assign private fields by memory aligment possible ?
[06:32:11] <FromDiscord> <ElegantBeef> Rather complicated for object variants
[06:34:04] <FromDiscord> <ElegantBeef> I probably should just fix hminast for devel so this works
[06:34:23] <FromDiscord> <Bung> well, I dont know the other way, since the big issue is private fields are not visible, you get data but have yet found way assign that data to private fields
[06:34:49] <FromDiscord> <timotheecour> `privateAccess` in devel
[06:36:33] <FromDiscord> <ElegantBeef> Nice
[06:37:54] <FromDiscord> <Bung> oh importutils.nim module, hope module symbols get merged soon, currently I track module path by myself.
[06:41:49] <FromDiscord> <ElegantBeef> Works beautifully thanks 😄
[08:13:19] <FromDiscord> <HPaulson> Does `$` actually change a vars value to a string, or does it just return such stringed?
[08:13:28] <FromDiscord> <HPaulson> (edit) "stringed?" => "stringified?"
[08:13:39] <FromDiscord> <HPaulson> (Also didn’t see any questions channel so hope this is okay here)
[08:15:09] <FromDiscord> <ElegantBeef> Yea it's fine here, it calls the `$` proc for the value
[08:15:27] <FromDiscord> <HPaulson> So just grabs the Val rather that reassigning, correct?
[08:15:47] <FromDiscord> <ElegantBeef> It does whatever the `$` proc says to do
[08:15:49] <FromDiscord> <ElegantBeef> https://nim-lang.org/docs/dollars.html
[08:15:56] <FromDiscord> <ElegantBeef> For primitives they're implemented there
[08:16:09] <FromDiscord> <HPaulson> 👍
[08:16:20] <FromDiscord> <ElegantBeef> like `$100 == "100"`
[08:26:51] <FromDiscord> <HPaulson> What would be the equivalent to JS Buffer?
[08:27:13] <FromDiscord> <HPaulson> (edit) "JS Buffer?" => "node’s Buffer api?"
[08:34:41] <FromDiscord> <Bung> std has simlar but not very close I remenber ? I have one https://github.com/bung87/buffer
[08:34:44] <fn> <12R2D299> 4GitHub: 7"buffer module write in Nim provide api similar to Nodejs buffer module.  "
[08:34:55] <FromDiscord> <ElegantBeef> string stream?
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:02] <FromDiscord> <HPaulson> In reply to @Bung "std has simlar but": Awesome thx
[08:36:38] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:47:51] *** Joins: tiorock (~rc@user/rockcavera)
[08:47:51] *** Quits: rockcavera (~rc@user/rockcavera) (Killed (calcium.libera.chat (Nickname regained by services)))
[08:47:51] *** tiorock is now known as rockcavera
[08:50:31] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[09:07:53] <FromDiscord> <gogolxdong (liuxiaodong)> Any blake3 library in Nim?
[09:08:30] <FromDiscord> <gogolxdong (liuxiaodong)> and chacha8
[09:21:42] <FromDiscord> <Jasmine and Don't Forget!~> I'm having an issue with cmake, if anyone wants to help
[09:22:46] <FromDiscord> <Jasmine and Don't Forget!~> I'm trying to build nlvm
[09:23:02] <FromDiscord> <Jasmine and Don't Forget!~> here's the error message
[09:23:02] <FromDiscord> <Jasmine and Don't Forget!~> sent a code paste, see https://play.nim-lang.org/#ix=3sWf
[09:23:54] <FromDiscord> <ElegantBeef> Seems you just need to set your compiler
[09:24:06] <FromDiscord> <Jasmine and Don't Forget!~> I tried looking for cxx using apt search, but there were a lot of options
[09:24:11] <FromDiscord> <Jasmine and Don't Forget!~> So do I just install clang?
[09:24:19] <FromDiscord> <Rika> cxx == c++ compiler i believe
[09:24:21] <FromDiscord> <ElegantBeef> It's a C++ compiler afaik
[09:24:35] <FromDiscord> <Rika> set it to gcc as well
[09:24:51] <FromDiscord> <Jasmine and Don't Forget!~> I believe I have gcc installed, how to I set it so cmake can see it?
[09:25:05] <FromDiscord> <Rika> in cli `CXX=gcc cmake ...`
[09:25:09] <FromDiscord> <Rika> i believe?
[09:25:17] <FromDiscord> <Rika> oh yeah its on the error
[09:25:23] <FromDiscord> <Jasmine and Don't Forget!~> I always love a copy paste, lmao
[09:25:24] <FromDiscord> <Jasmine and Don't Forget!~> thank you
[09:25:25] <FromDiscord> <Rika> `Tell CMake where to find the compiler by setting either the environment variable "CXX" `
[09:25:31] <FromDiscord> <Jasmine and Don't Forget!~> Ye
[09:25:36] <FromDiscord> <ElegantBeef> Should be right
[09:26:15] <FromDiscord> <Jasmine and Don't Forget!~> So I just paste that into the terminal?
[09:26:27] <FromDiscord> <Jasmine and Don't Forget!~> because it complained when I did that
[09:26:31] <FromDiscord> <ElegantBeef> well the `...` is whatever you were sending
[09:26:42] <FromDiscord> <Jasmine and Don't Forget!~> Oh, lol
[09:26:47] <FromDiscord> <ElegantBeef> should be `CXX=gcc` followed by `cmake args`
[09:27:08] <FromDiscord> <ElegantBeef> all on a single line since you didnt `export` the environment
[09:28:33] <FromDiscord> <Jasmine and Don't Forget!~> Okay, I didn't have any args for cmake, so I just put in `CCX=gcc cmake`
[09:28:39] <FromDiscord> <Jasmine and Don't Forget!~> And then that game me this
[09:28:55] <FromDiscord> <Jasmine and Don't Forget!~> sent a code paste, see https://play.nim-lang.org/#ix=3sWg
[09:29:00] <FromDiscord> <Jasmine and Don't Forget!~> So I was like, okay, just do
[09:29:06] <FromDiscord> <ElegantBeef> How did you run cmake before?
[09:29:46] <FromDiscord> <Jasmine and Don't Forget!~> I just did `cmake`, but that had issues with CCX, so then I did `cmake CCX=gcc`, but then it gave me this
[09:30:01] <FromDiscord> <Jasmine and Don't Forget!~> sent a code paste, see https://play.nim-lang.org/#ix=3sWh
[09:30:09] <FromDiscord> <Jasmine and Don't Forget!~> sorry, that's the same one, the first one was a typo
[09:30:10] <FromDiscord> <ElegantBeef> Why are you even using cmake?
[09:30:21] <FromDiscord> <Jasmine and Don't Forget!~> because I want to make nlvm
[09:30:26] <FromDiscord> <ElegantBeef> but it uses make
[09:30:34] <FromDiscord> <ElegantBeef> clone it then run `make`
[09:30:49] <FromDiscord> <Jasmine and Don't Forget!~> I am... silly, sorry, lmao
[09:31:57] <FromDiscord> <ElegantBeef> Yea you best apologize that's my territory, cannot have interlopers
[09:32:36] <FromDiscord> <Jasmine and Don't Forget!~> lol, I'm having more errors because I'm bad at following instructions
[09:33:25] <FromDiscord> <ElegantBeef> Did you install all deps, and clone submodules?
[09:33:32] <FromDiscord> <Jasmine and Don't Forget!~> this is the error, if you want to help agian https://media.discordapp.net/attachments/371759389889003532/864733835392843776/bash.txt
[09:33:49] <FromDiscord> <ElegantBeef> Same issue
[09:34:14] <FromDiscord> <Jasmine and Don't Forget!~> I tried giving it the variable
[09:34:16] <FromDiscord> <ElegantBeef> `CXX=gcc make`
[09:34:59] *** Joins: SebastianM (~seba@user/sebastianm)
[09:35:41] <FromDiscord> <Rika> In reply to @Jasmine and Don't Forget!~ "I just did `cmake`,": backwards
[09:35:47] <FromDiscord> <Rika> `CXX=gcc cmake`
[09:35:52] <FromDiscord> <Jasmine and Don't Forget!~> Yeah, I did that
[09:35:55] <FromDiscord> <Jasmine and Don't Forget!~> thank you
[09:36:36] <FromDiscord> <Jasmine and Don't Forget!~> It's still not compiling, it said that it was an issue with the compiler, so I'm going to try clang now
[09:36:45] <FromDiscord> <Jasmine and Don't Forget!~> I can give the error log if you want it
[09:37:31] <FromDiscord> <ElegantBeef> Maybe it's supposed to be `g++` 😄
[09:37:42] <FromDiscord> <Jasmine and Don't Forget!~> lol
[09:38:52] <FromDiscord> <Jasmine and Don't Forget!~> sent a code paste, see https://play.nim-lang.org/#ix=3sWn
[09:43:44] <FromDiscord> <Tuatarian> hey everyone
[09:43:48] <FromDiscord> <ElegantBeef> Hello
[09:43:51] <FromDiscord> <Tuatarian> hody
[09:43:53] <FromDiscord> <Tuatarian> howdy
[09:43:58] <FromDiscord> <ElegantBeef> I have 0 clue how to resolve that issue jasmine
[09:44:22] <FromDiscord> <Tuatarian> does anybody remember that one website (can't remember the name, best website ever or something like that) which basically said that the best website design was simple pure html
[09:44:44] <FromDiscord> <Tuatarian> completely forgot what the site is
[09:44:52] <FromDiscord> <Tuatarian> been trying to find it for a bit
[09:45:31] <FromDiscord> <Jasmine and Don't Forget!~> You're good, I'm using windows subsystem for linux
[09:45:36] <FromDiscord> <Jasmine and Don't Forget!~> Gosh, I really don't like windows
[09:45:48] <FromDiscord> <Jasmine and Don't Forget!~> Honestly thinking about just going back to linux
[09:45:50] <FromDiscord> <ElegantBeef> I dont tautarian 😄
[09:45:53] <FromDiscord> <ElegantBeef> You should
[09:46:02] <FromDiscord> <Tuatarian> linux is great
[09:46:07] <FromDiscord> <Tuatarian> but I do things other than code on my computer
[09:46:08] <FromDiscord> <Jasmine and Don't Forget!~> Yes I should, but I also like video games
[09:46:13] <FromDiscord> <Tuatarian> and windows is infinitely better for general use
[09:46:19] <FromDiscord> <Tuatarian> not really a competition imo
[09:46:33] <FromDiscord> <ElegantBeef> ~~Is a gamer but still doesnt touch windows~~
[09:46:34] <FromDiscord> <Tuatarian> I tried installing linux on this computer
[09:46:35] <FromDiscord> <Jasmine and Don't Forget!~> And I'd have to backup all of my minecraft worlds, and projects, and it just seems like a hassle rn
[09:46:44] <FromDiscord> <Jasmine and Don't Forget!~> Oh no, I was like you
[09:46:44] <FromDiscord> <Tuatarian> had some crazy audio issues, gave up and just went back to windows
[09:46:51] <FromDiscord> <Jasmine and Don't Forget!~> I used to game exclusively on linux
[09:46:52] <FromDiscord> <Tuatarian> my laptop has linux
[09:47:00] <FromDiscord> <Tuatarian> It's not terrible, but it's pretty bad
[09:47:12] <FromDiscord> <Jasmine and Don't Forget!~> but then this game from my favorite game studio came out, apex
[09:47:18] <FromDiscord> <Jasmine and Don't Forget!~> and it uses easy anti cheat
[09:47:23] <FromDiscord> <Jasmine and Don't Forget!~> so I had to use windows to play
[09:47:35] <FromDiscord> <ElegantBeef> Yea i still have a windows partition for anti cheat games but hardly touch it
[10:06:20] <fn> <11ForumUpdaterBot99> New Nimble package! globby - Glob pattern matching for Nim., see https://github.com/treeform/globby
[10:06:21] <fn> <12R2D299> 4GitHub: 7"Glob pattern matching for Nim."
[10:16:05] <FromDiscord> <ElegantBeef> At what point does treeform make `stdliby` so people can use all of his libraries easily 😄
[11:03:50] <arkanoid> this thing that proc in module root can't have closure calling conversion is making proc type comparison harder than it should
[11:08:04] <FromDiscord> <ElegantBeef> I dont use closures so uncertain how
[11:14:32] <fn> <11ForumUpdaterBot99> New thread by Sixte: Contexts, scopes and intrinsic types, see https://forum.nim-lang.org/t/8231
[11:26:23] <FromDiscord> <treeform> In reply to @ElegantBeef "At what point does": I don't think my packages provide a very uniform coverage you need for stdlib
[11:27:09] *** Quits: SebastianM (~seba@user/sebastianm) (Quit: Bye)
[11:50:35] <arkanoid> is it possible to test for pragma? for example test if proc has {.noSideEffect.}
[11:51:00] <FromDiscord> <arnetheduck> In reply to @treeform "I don't think my": they certainly provide the quality 😉 coverage is earier to fix
[11:51:00] *** Joins: max22- (~maxime@2a01cb08833598000bbd90377c5d39ae.ipv6.abo.wanadoo.fr)
[11:51:06] <FromDiscord> <arnetheduck> (edit) "earier" => "easier"
[11:51:17] *** Quits: max22- (~maxime@2a01cb08833598000bbd90377c5d39ae.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[11:51:41] *** Joins: max22- (~maxime@2a01cb08833598000bbd90377c5d39ae.ipv6.abo.wanadoo.fr)
[11:52:46] <FromDiscord> <ElegantBeef> Test in what way, a macro can
[11:55:53] <arkanoid> ElegantBeef I'm actually writing a concept that should match proc types that: get 1 input A gives 1 output B so f(A) is B, is total function (has noSideEffect)
[11:56:09] <FromDiscord> <arnetheduck> sent a code paste, see https://play.nim-lang.org/#ix=3sWD
[11:56:12] <FromDiscord> <ElegantBeef> ah so yes a macro can be used here
[11:56:12] <arkanoid> so the general question is: how to test if a proc has {.noSideEffect.}
[11:56:29] <FromDiscord> <ElegantBeef> https://github.com/beef331/oopsie/blob/master/src/oopsie.nim#L21
[11:56:38] <FromDiscord> <ElegantBeef> To show how you can use a macro in a concept
[11:57:27] <FromDiscord> <ElegantBeef> i'd normally write it for you, but presently dealing with my own macro madness 😄
[11:57:55] <arkanoid> no, problem, I'm training, so it's actually good thing :D
[11:59:48] <FromDiscord> <ElegantBeef> @Bung well i do support variant objects with a caveat they dont have descrims at the same level, but eh progress 😄
[12:00:53] <FromDiscord> <ElegantBeef> but this works now https://media.discordapp.net/attachments/371759389889003532/864770913642610688/unknown.png
[12:02:22] <FromDiscord> <Bung> I see two "but" words, does not show any bad news ?
[12:02:35] <FromDiscord> <ElegantBeef> well there is that caveat
[12:03:05] <FromDiscord> <ElegantBeef> sent a code paste, see https://play.nim-lang.org/#ix=3sWH
[12:04:07] <FromDiscord> <Bung> the problem is two case or one else branch does not have field ?
[12:04:29] <FromDiscord> <ElegantBeef> Two cases on the same level
[12:04:42] <FromDiscord> <ElegantBeef> Relatively rare thing of course
[12:05:08] <FromDiscord> <Bung> oh, sound good to me , jsonnode only use one case.
[12:05:27] <FromDiscord> <ElegantBeef> Oh you and your selfish view! 😄
[12:06:50] <FromDiscord> <Bung> yeah, I only wait this feature, so I can have plugin system in my static site generator, and I will migrate my hexo blog to this.
[12:07:53] <FromDiscord> <ElegantBeef> Well i guess next thing will be ref objects and seqs
[12:08:00] <FromDiscord> <ElegantBeef> though i think i know how ref objects work
[12:08:02] *** Quits: max22- (~maxime@2a01cb08833598000bbd90377c5d39ae.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[12:08:49] *** Joins: max22- (~maxime@2a01cb0883359800fd148d0836b1ca7e.ipv6.abo.wanadoo.fr)
[12:10:00] <FromDiscord> <treeform> In reply to @arnetheduck "btw, <@!107140179025735680> how did": Just with the -d: release, all computers should show same general differences, but different absolute numbers.
[12:13:15] *** Joins: Vladar (~Vladar@46.162.2.53)
[12:26:03] <FromDiscord> <PressF> Quick question. Can nim be used as a functional language like Haskell?↵With this I mean no side effects, recursion over loops, higher order function....
[12:26:42] <FromDiscord> <PressF> BTW currently finishing my first nim project and loving it so far
[12:26:55] <FromDiscord> <PressF> (edit) "BTW" => "BTW" | "far" => "far"
[12:30:29] <FromDiscord> <ElegantBeef> Well with strict funcs the pure functions are more pure, but i dont know about the remainder, not a FP user
[12:49:45] <arkanoid> PressF, I'm not a FP but I'm learning a bit of it. You have side effects free func, higher order function, closures, function composition. What you don't get for free are persistent data structures, but you can add them
[12:51:56] <FromDiscord> <arnetheduck> In reply to @treeform "Just with the -d:": sure - what I mean is jsony vs nim-json-ser is roughly 1.2x when I run it, whereas on the site, it's more like 1.7x - for the std lib comparison, I see 8x, while on github it's .. closer to 4x if I'm reading it right
[12:52:51] <FromDiscord> <arnetheduck> I was thinking it might orc vs normal gc or something like that
[13:00:30] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[13:10:08] <FromDiscord> <haxscramper> Editing forum thread title after posting is not possible, correct?
[13:10:53] <fn> <11ForumUpdaterBot99> New thread by Haxscramper: Declare `[]` iterator, see https://forum.nim-lang.org/t/8232
[13:18:10] <FromDiscord> <ElegantBeef> Ah i hit a simpler problem relatively recently opted to `slice(a..b)` 😄
[13:22:41] *** Quits: max22- (~maxime@2a01cb0883359800fd148d0836b1ca7e.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[13:22:52] <FromDiscord> <haxscramper> In the end I can just overload `items`, but if possible I would prefer to use `object[start .. end]` syntax without paying for intermedite allocations
[13:22:59] *** Joins: max22- (~maxime@2a01cb08833598005e6103d065c0397a.ipv6.abo.wanadoo.fr)
[13:37:54] *** Joins: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f)
[13:41:41] *** Quits: max22- (~maxime@2a01cb08833598005e6103d065c0397a.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[13:44:13] *** Joins: max22- (~maxime@2a01cb0883359800955885994a6fc5b3.ipv6.abo.wanadoo.fr)
[13:52:16] <FromDiscord> <Rika> prolly would be possible once views are stable
[14:04:08] <FromDiscord> <haxscramper> It is not about view types, overload resolution just seems to be broken
[14:05:27] <FromDiscord> <Bung> @ElegantBeef is it ready for use now ?
[14:05:40] <FromDiscord> <ElegantBeef> Nope
[14:05:45] <FromDiscord> <ElegantBeef> Still doesnt handle refs
[14:05:58] <FromDiscord> <ElegantBeef> Or seqs
[14:06:11] <FromDiscord> <Bung> okay
[14:15:16] <FromDiscord> <PressF> In reply to @arkanoid "<@391274926541373441>, I'm not a": Thx. I'll need to look into that
[14:22:07] <arkanoid> PressF, I'm also playing around with FP and nim, actually testing the limits of nim type system when dealing with proc types. For example: https://play.nim-lang.org/#ix=3sUb
[14:22:11] <FromDiscord> <konsumlamm> In reply to @PressF "Quick question. Can nim": you can, but it's definitely not intended and you will likely run into problems
[14:23:18] <FromDiscord> <konsumlamm> also see the `zero_functional` package for  efficient iterator combinators
[14:23:47] *** Quits: max22- (~maxime@2a01cb0883359800955885994a6fc5b3.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[14:26:20] <arkanoid> After successfull implementation of function composition using "real types", I'm now trying to reimplement same thing with nim concepts, but I'm facing some compiler errors. Do you see any concept trivial issue in my code? https://play.nim-lang.org/#ix=3sXb
[14:29:11] <FromDiscord> <konsumlamm> i'm not sure how making concepts for that makes any sense
[14:29:23] <FromDiscord> <konsumlamm> also, those are old-style concepts
[14:29:58] <arkanoid> I've just started with concepts, I'm following the manual. What does make them "old"?
[14:31:13] <FromDiscord> <konsumlamm> there being new-style concepts
[14:31:43] <arkanoid> I'm on nim devel and following https://nim-lang.org/docs/manual_experimental.html#concepts
[14:31:53] <FromDiscord> <konsumlamm> see https://github.com/nim-lang/RFCs/issues/168
[14:34:30] <arkanoid> interesting
[14:36:17] <arkanoid> are they already implemented?
[14:36:49] <FromDiscord> <konsumlamm> partially
[14:37:30] <FromDiscord> <konsumlamm> you can see my issues marked with [Conceotd[ for problems with them
[14:37:39] <FromDiscord> <konsumlamm> (edit) "[Conceotd[" => "[Concepts]"
[14:43:19] <fn> <11ForumUpdaterBot99> New thread by Ingo: Yield tuple: Error: invalid type, see https://forum.nim-lang.org/t/8233
[14:49:50] <arkanoid> do you know if it is possible to augment real type with a concept? I mean, add compile time checks to a real type in the concept way
[15:12:42] <FromDiscord> <Rika> Enforce a type to always match a concept?
[15:13:02] <FromDiscord> <Rika> Not that I know of
[15:13:27] <FromDiscord> <Rika> Rather not if the type isn’t controlled by you
[15:13:53] <FromDiscord> <Rika> You can limit functions to always match types that match concepts, I don’t really understand what you want
[15:14:42] <arkanoid> Rika, I'm fixing a testcase, I'll share asap
[15:28:45] <FromDiscord> <konsumlamm> In reply to @Rika "Enforce a type to": you can do that, with `static: assert Type is Concept`
[15:36:20] <FromDiscord> <Rika> In reply to @Rika "Rather not if the": .
[15:38:07] <FromDiscord> <konsumlamm> the above still works tho
[15:40:04] <FromDiscord> <Rika> Maybe see definition of "rather"
[15:40:16] <arkanoid> here's my playground. I've both the real type version and the concept one with a compile time switch. The concept version fails to compile and I'm trying to understand why https://play.nim-lang.org/#ix=3sXv
[15:46:00] <FromDiscord> <konsumlamm> @Rika i fail to see what you're trying to say
[15:50:45] <FromDiscord> <konsumlamm> arkanoid: you realize that a concept doesn't make much sense here, because there is only one `func` type? your concept will only be implemented by very specific functions, which can be better expressed by using a type alias
[15:59:00] <arkanoid> konsumlamm, the non-concept branch is using type aliases: "type Function[A, B] = proc(x: A): B {.noSideEffect.}"
[15:59:52] <arkanoid> exercise here is making real/alias branch equivalent to concept one. For equivalent I mean compile and pass test
[16:02:14] <arkanoid> real deal is the error: "/usercode/in.nim(42, 43) Error: cannot instantiate: 'compose[int, float, string]'; got 3 typeof(s) but expected 6". I have no idea where the 3 more typeof are coming from, considering the fact that the real/alias version works
[16:04:31] <arkanoid> there are also warnings that puzzles me when compiling the concept branch: fconcept.nim(7, 5) Hint: 'B' is declared but not used
[16:04:46] <arkanoid> but concept check is f(A) is B
[16:24:07] <FromDiscord> <konsumlamm> In reply to @arkanoid "real deal is the": ye, idk what that's supposed to mean, sorry
[16:24:44] <arkanoid> np
[16:28:05] <arkanoid> btw this is what I'm revolving around: https://wiki.haskell.org/Functor, and nim manual makes explicit examples of concept functors https://nim-lang.org/docs/manual_experimental.html#concepts
[16:33:11] <FromDiscord> <Rika> you dont declare the function type as a concept usually
[16:33:20] <FromDiscord> <Rika> its usually the actual type that's a concept
[16:33:21] <FromDiscord> <AKDev> hi
[16:33:27] <FromDiscord> <AKDev> i just downloaded nim for opengl
[16:33:34] <FromDiscord> <Rika> see how there's not "proc" or "func" in the functor concept
[16:34:52] <arkanoid> Rika, yeah not common to work with proc types, but makes perfect sense when type + concepts wants to be used for domain driven design or stuff like that
[16:35:41] <FromDiscord> <Rika> so what do you really want
[16:35:49] <FromDiscord> <Rika> the type version works does it not?
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:38] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:40:23] <arkanoid> the type version works, the concept version raises strange errors. Considering the fact that functions are first class in nim, they should be 1:1
[16:40:50] <arkanoid> I have the feeling that I'm dealing with some details related to Generic
[16:42:07] <FromDiscord> <Rika> its a concept thing, the way concepts work arent the same as what you're thinking is the issue i feel
[16:42:52] <FromDiscord> <Rika> like `c is func;      c(Function[A, B], Function[B, C]) is Function[A, C]` doesnt mean what i think youre thinking
[16:44:48] <arkanoid> no? So what is "c"? Manual says that it should represent an instance of the currently matched type
[16:45:18] <FromDiscord> <Rika> yes, but `c()` is a function called c, unrelated to the `c` in c is func
[16:45:40] <arkanoid> O_o
[16:46:02] <FromDiscord> <Rika> look at one of the concept examples
[16:46:17] <arkanoid> I've read dozen, I've in front of me the first one of the manual
[16:46:20] <FromDiscord> <Rika> the functor one
[16:46:24] <FromDiscord> <Rika> `    map(f, A -> T) is MatchedGenericType[T]`
[16:46:38] <FromDiscord> <Rika> `map(...)` function called map
[16:46:51] <FromDiscord> <Rika> apply the same thought process to the concept you made
[16:46:52] <FromDiscord> <Rika> therefore
[16:46:58] <FromDiscord> <Rika> `c(...)` function called c
[16:47:44] <arkanoid> but in "f.val as A" f is an instance of the Functor
[16:48:01] <arkanoid> s/as/is
[16:48:07] <FromDiscord> <Rika> yes
[16:48:11] <FromDiscord> <Rika> but its not called
[16:48:28] <FromDiscord> <Rika> `c.call is A` would work, but then you need a proc/field called `call`
[16:49:00] <arkanoid> so concept doesn't work with proc types, basically
[16:49:04] <arkanoid> what's the point
[16:49:26] <FromDiscord> <Rika> or you can do `c is Function[Function[A, B], Function[Function[B, C], Function[A, C]]]` which is basically the same as the type version
[16:49:35] <FromDiscord> <Rika> for non proc types
[16:49:50] <FromDiscord> <Rika> if you want static duck typing basically
[16:50:38] <FromDiscord> <Rika> i dont even know why you need compose as a proc type
[16:50:51] <FromDiscord> <Rika> a regular proc would work pretty much perfectly,
[16:50:54] <FromDiscord> <Rika> ah
[16:51:02] <FromDiscord> <Rika> i guess if you're gonna use that proc as a value
[16:51:13] <FromDiscord> <Rika> but still, a concept isnt needed here
[16:52:38] <FromDiscord> <konsumlamm> arkanoid: honestly, if you're trying to do type shenanigans, Nim isn't the right language for that, i'd rather use Haskell (given that you're following the Haskell wiki)
[16:52:58] <FromDiscord> <Rika> i agree
[16:53:07] <FromDiscord> <Rika> nim's type system isnt as sophisticated as other languages
[16:53:19] <arkanoid> A Function and a Composition are two basic blocks of category theory. I've proved that a "real type/alias" version is possible, was just playing around with concepts to achieve the same given the fact that procs should be first class
[16:54:31] <FromDiscord> <konsumlamm> sure, i'm just saying that if you want to do category theory, Haskell is way better suited
[16:55:33] <arkanoid> sure, but I don't see much sheningans here. I'ts barebone functor and compositor, the shenanigans would be trying to push a Monoidal Category into nim, which I have no intention to do
[16:56:37] <FromDiscord> <Rika> you usually make the value type the concept, not the function type
[16:57:10] <FromDiscord> <konsumlamm> even a barebone Functor can make problems in Nim, it doesn't have first-class HKT support
[16:57:44] <arkanoid> konsumlamm all the type inference is forward in my case, that's why the "real type" version works without problems
[16:57:48] <FromDiscord> <Rika> In reply to @konsumlamm "even a barebone Functor": maybe one day ill have the time and knowhow to help with adding such a thing
[16:58:50] <arkanoid> here is just concept syntax and possible limitations (and obvious noob error I might be typing like considerin "c" the instantiated thing)
[17:00:12] <arkanoid> my general feeling is that is just me not good yet in writing concepts
[17:03:39] <arkanoid> and also I'm quite surprised that is not possible to execute a function on the instantiated object
[17:10:43] <FromDiscord> <Rika> wdym?
[17:19:38] *** Quits: mahlon (~mahlon@martini.nu) (Ping timeout: 256 seconds)
[17:22:02] *** Joins: arkurious (~arkurious@user/arkurious)
[17:23:53] <arkanoid> that in the concept body of the aforementioned example "c" should be the non-generic proc, so doing "c(A) is B" should call that "c", not an external one
[17:24:24] <FromDiscord> <Rika> but that's not consistent with the syntax
[17:24:57] <FromDiscord> <Rika> are you saying nim should special case when `concept c` is referring to a function type?
[17:26:24] <arkanoid> function call is not a "special case". c() means call c, and if c is defined as non-generic proc in concept body, why should it be considered something else
[17:27:08] <FromDiscord> <Rika> so a special case indeed, because if c is not a function there is no possibility that `c()` would mean call concept instance c
[17:28:20] <FromDiscord> <Rika> and that is confusing, what if concept instance c isnt constrained like `c is Function` or whatever, and it matches a function type by chance or w/e? that would mean anything `c()` would mean something else
[17:29:55] <arkanoid> it is always possible to design a "catch all" concept, so that is not an argument
[17:30:59] <arkanoid> question is: if the type I want to match is a function type, how to match if it wants one argument of type A and outputs a B?
[17:31:16] <FromDiscord> <Rika> it is possible, is it practical
[17:31:27] <FromDiscord> <Rika> do we have the resources to do so
[17:32:15] <FromDiscord> <Rika> well we already are throwing the current impl now
[17:32:30] <FromDiscord> <Rika> but the new impl wont help you here
[17:33:30] <FromDiscord> <Rika> feel free to comment on the new-style concepts rfc about it then i guses
[17:33:32] <FromDiscord> <Rika> (edit) "guses" => "guess"
[17:33:39] <arkanoid> btw this is my first experiment with concepts, I've neved used them before. Still I don't feel like asking rocket science
[17:34:13] <FromDiscord> <Rika> what do you want us to say other than "you're using it wrong and its not supposed to be used like that"?
[17:35:33] <arkanoid> nothing, I'm ok with that. I do see it now. I was just confused by the fact that c(..) was ignored and not raising any error
[17:36:44] <arkanoid> there's no "c" function in namespace, so the concept should not match anything, but it does somehow (the "function" test set succeeds even with concepts)
[17:38:12] <FromDiscord> <Rika> so that means either im wrong or the old concepts are buggy (theyve been observed countless times to be buggy so im pretty sure its the latter)
[17:41:56] <arkanoid> basically I'm playing around with concepts for the first time on a buggy implementation and ideas considered sci-fi for now
[17:42:50] <arkanoid> still, I'm happy to have finally grasped at least something about them. I'm planning to use them in next project but yet unsure where
[17:50:24] <arkanoid> with some black magic it might be possible though https://github.com/nim-lang/Nim/issues/5650#issuecomment-860227825
[17:54:49] <arkanoid> yet I don't understand what "mapto" and "default" are here https://play.nim-lang.org/#ix=3pPI
[17:56:36] <FromDiscord> <Rika> i dont see a default
[17:56:48] <arkanoid> "proc mapto[T](x:t):MatchedGenericType[T] = map(f,default(A->T))"
[17:57:08] <FromDiscord> <Rika> ah okay
[17:57:37] <arkanoid> you can also find the comments here: https://stackoverflow.com/questions/67958826/trouble-defining-a-nim-concept-with-an-auto-type-inside
[17:57:53] <arkanoid> but I miss the point of declaring a proc into a concept
[18:00:08] <FromDiscord> <Rika> In reply to @arkanoid "yet I don't understand": thats still an old-style concept
[18:00:51] <arkanoid> ok, let's restart from scratch. How to learn writing new concepts?
[18:01:06] <FromDiscord> <Rika> read the rfc
[18:01:06] <FromDiscord> <Rika> https://github.com/nim-lang/RFCs/issues/168
[18:01:30] <FromDiscord> <Rika> its not a complete implementation yet
[18:01:32] <FromDiscord> <Rika> but it exists
[18:03:51] <arkanoid> this new kind of concepts really reminds me "Interfaces"
[18:05:11] <FromDiscord> <Rika> they are not, they are still strictly compiletime
[18:09:13] <FromDiscord> <theangryepicbanana> interfaces have been proposed though
[18:10:38] <arkanoid> the example given by araq in rfc doesn't cover type checking like on current(old) concept version, but in the second post by Andrea Ferretti it seems to check them anyway (see "self is AdditiveMonoid")
[18:17:46] <arkanoid> would you explan what "map(f,default(A->T))" means? I've tried repr on kinda "default(A->T)" and I'm getting "[Field0 = nil, Field1= nil]". What does it mean to map a function to the "default of a proc type"?
[18:18:17] *** Joins: rockcavera (~rc@192.12.112.199)
[18:18:17] *** Quits: rockcavera (~rc@192.12.112.199) (Changing host)
[18:18:17] *** Joins: rockcavera (~rc@user/rockcavera)
[18:20:43] <FromDiscord> <haxscramper> !eval import std/sugar; echo default(int -\> int).isNil()
[18:20:51] <NimBot> Compile failed: /usercode/in.nim(1, 36) Error: undeclared identifier: '-\>'
[18:21:08] <FromDiscord> <haxscramper> big brain time v9000
[18:21:25] <FromDiscord> <haxscramper> Anyway, default of a procedure seems to be `nil`
[18:21:25] <FromDiscord> <haxscramper> Anyway, `default` of a procedure seems to be `nil`
[18:23:34] <arkanoid> !eval import sugar; type A = object; type B = object; type F = A -> B; echo default(F).repr
[18:23:40] <NimBot> [Field0 = nil,↵Field1 = nil]↵
[18:25:17] <FromDiscord> <Rika> !eval import sugar; type A = object; type B = object; type F = A -> B; echo default(F)
[18:25:20] <NimBot> Compile failed: /usercode/in.nim(1, 71) Error: type mismatch: got <F>
[18:25:39] <FromDiscord> <Rika> ok
[18:25:53] <FromDiscord> <Rika> field0 should be either the proc pointer or the environment pointer
[18:26:02] <FromDiscord> <Rika> same with 1 (the other_
[18:26:04] <FromDiscord> <Rika> (edit) "other_" => "other)"
[18:29:35] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3sZm
[18:57:54] <arkanoid> ok so that means that's a closure
[18:58:21] <arkanoid> so what is "map(f,default(A->T))" ?
[19:17:18] <FromDiscord> <hamidb80> hey
[19:25:15] *** Joins: mahlon (~mahlon@martini.nu)
[19:43:30] <FromDiscord> <Jasmine and Don't Forget!~> hi
[19:49:28] <FromDiscord> <hamidb80> how can i copy a `ref` object ?
[19:50:45] <FromDiscord> <Rika> deepcopy
[19:52:25] <FromDiscord> <enthus1ast> sent a code paste, see https://play.nim-lang.org/#ix=3t0q
[19:53:38] <FromDiscord> <enthus1ast> but f2 is no ref anymore then
[19:54:11] <FromDiscord> <Rika> var f2 = new f1.type↵f2[] = f1[]
[19:54:15] <FromDiscord> <Rika> perhaps.
[19:54:20] <FromDiscord> <Rika> but this is a shallow copy
[19:54:28] <FromDiscord> <Rika> deep copies would copy refs in refs as well
[20:21:43] <FromDiscord> <Hi02Hi> Is there a way to "restart" a closure iterator?
[20:26:44] <FromDiscord> <Jasmine and Don't Forget!~> I'm having an issue with the nim bindings in godot, I've practically written the exact same program in nim and gdscript and for some reason the nim version isn't working
[20:26:55] <FromDiscord> <Jasmine and Don't Forget!~> I can paste the code if you want to see
[20:27:19] <FromDiscord> <Rika> In reply to @Hi02Hi "Is there a way": no
[20:53:07] *** Joins: max22- (~maxime@2a01cb088335980059f2e7a3d7885c31.ipv6.abo.wanadoo.fr)
[21:11:11] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[21:22:58] <FromDiscord> <RattleyCooper> In reply to @Jasmine and Don't Forget!~ "I'm having an issue": Are you using `gdNim` or `godot-nim`?
[21:23:11] <FromDiscord> <Jasmine and Don't Forget!~> I'm using godot-nim, I believe
[21:24:09] <FromDiscord> <RattleyCooper> Can you send the script?
[21:24:14] <FromDiscord> <Jasmine and Don't Forget!~> ofc, one sec
[21:24:43] <arkanoid> shoudn't {.raises: [].} be implicit with func/{.noSideEffect.} ?
[21:25:09] <FromDiscord> <Jasmine and Don't Forget!~> sent a code paste, see https://play.nim-lang.org/#ix=3t0V
[21:25:14] <FromDiscord> <Jasmine and Don't Forget!~> this is the script in nim
[21:26:09] <FromDiscord> <Jasmine and Don't Forget!~> and here's the gdscript that I did a little bit ago https://media.discordapp.net/attachments/371759389889003532/864913171369164880/message.txt
[21:26:30] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=3t0X
[21:26:43] <FromDiscord> <RattleyCooper> In reply to @geekrelief "What's the issue?": They're using `godot-nim`
[21:27:13] <FromDiscord> <Jasmine and Don't Forget!~> When I use the transform.basis in gdscript, it sets the direciton of the player. But in nim it goes off in random directions
[21:27:14] <FromDiscord> <geekrelief> but what issue are you running into? She just says it isn't working.
[21:27:21] <FromDiscord> <RattleyCooper> (edit) "In reply to @geekrelief "What's the issue?": They're using `godot-nim` ... " 03added "and I don't remember if godot-nim needs gdExport"
[21:28:18] <FromDiscord> <RattleyCooper> In reply to @geekrelief "but what issue are": Does `godot-nim` need `{.gdExport}` for procs?
[21:28:38] <FromDiscord> <Hi02Hi> In reply to @Rika "no": i mean create a var that is a restarted version of the closure iterator, but i dont think thats possible either
[21:28:39] <FromDiscord> <RattleyCooper> (edit) "In reply to @geekrelief "but what issue are": Does `godot-nim` need `{.gdExport}` for procs? ... " 03added " If so, that seems like the problem"
[21:28:42] <FromDiscord> <haxscramper> No, raises is related to exception tracking↵(<@709044657232936960_arkanoid=5b=49=52=43=5d>)
[21:28:54] <FromDiscord> <haxscramper> Exception and effect tracking
[21:29:04] <FromDiscord> <haxscramper> Not all effects are side effects IIRC
[21:29:25] <FromDiscord> <geekrelief> In reply to @Jasmine and Don't Forget!~ "When I use the": Maybe your basis access is transposed?
[21:29:25] <FromDiscord> <Rika> @Hi02Hi no you need to run the function that makes the iterator again
[21:29:41] <FromDiscord> <Jasmine and Don't Forget!~> How would I fix that?
[21:30:18] <FromDiscord> <geekrelief> check to see if you can do `basis.z` instead of `basis[2]`
[21:30:46] <FromDiscord> <Jasmine and Don't Forget!~> I tried that, but it didn't like it
[21:30:48] <FromDiscord> <geekrelief> https://github.com/pragmagic/godot-nim/commit/f3da1c6ee5331592ee4755ac97e09e94a94a6c0f
[21:31:32] <FromDiscord> <Jasmine and Don't Forget!~> I'm using a release, should I build the newer version?
[21:32:02] <FromDiscord> <geekrelief> you mean from nimble?
[21:32:27] <FromDiscord> <Jasmine and Don't Forget!~> I think so, I mean gic cloning it and following the instructions on the site for how to build it
[21:32:35] <FromDiscord> <Jasmine and Don't Forget!~> (edit) "gic" => "git"
[21:33:00] <FromDiscord> <geekrelief> that should be fine.  just try changing your basis access from using numbers to `x,y,z` first to see if that solves your issue
[21:33:46] <FromDiscord> <Jasmine and Don't Forget!~> I already did that, and it was throwing errors. I'll do it on a fresh build, thank you
[21:34:09] <FromDiscord> <geekrelief> ok if it was throwing errors then you don't have the commit that implements it
[21:34:40] <FromDiscord> <geekrelief> so you can try accessing the `elements` of `basis` create a new vector from that  just like it's shown in the commit
[21:34:59] <FromDiscord> <geekrelief> if that fixes it, then you just need to update godot-nim to get the accessors
[21:37:17] *** Joins: pro (~pro@user/pro)
[21:43:08] <FromDiscord> <ajusa> Is there a zero copy way to go from cstring to string if I know the length as well?
[21:45:35] <FromDiscord> <@bracketmaster-5a708063d73408ce4> is there an wasy way to access just the last element of an array in nim?element
[21:47:28] <FromDiscord> <geekrelief> In reply to @@bracketmaster-5a708063d73408ce4 "is there an wasy": Use `^`, the BackwardsIndex
[21:47:44] <FromDiscord> <konsumlamm> specifically `arr[^1]`
[21:48:09] <FromDiscord> <@bracketmaster-5a708063d73408ce4> !nim var a = [1,2,3,4,5]; a[^1];
[21:48:14] <FromDiscord> <Rika> eval lol
[21:48:22] <FromDiscord> <@bracketmaster-5a708063d73408ce4> !eval var a = [1,2,3,4,5]; a[^1];
[21:48:24] <NimBot> Compile failed: <no output>
[21:48:29] <FromDiscord> <Rika> !eval var a = [1,2,3,4,5]; echo a[^1];
[21:48:31] <NimBot> Compile failed: <no output>
[21:48:59] <FromDiscord> <Rika> no output? lol
[21:49:27] <fn> <06Prestige99> weird
[21:49:45] <FromDiscord> <pointystick> !eval [1,2,3,4,5][^1]
[21:49:47] <NimBot> Compile failed: <no output>
[21:49:52] <FromDiscord> <Rika> needs to echo
[21:49:58] <FromDiscord> <pointystick> oops
[21:50:01] <FromDiscord> <Hi02Hi> In reply to @Rika "<@!787421416227995699> no you need": yeah that makes sense but the problem is that the iterator is passed as a parameter, so i dont know that function
[21:50:08] <FromDiscord> <@bracketmaster-5a708063d73408ce4> !eval echo "hello"
[21:50:08] <FromDiscord> <pointystick> !eval echo [1,2,3,4,5][^1]
[21:50:10] <NimBot> Compile failed: <no output>
[21:50:10] <NimBot> Compile failed: <no output>
[21:50:16] <fn> <06Prestige99> uhh
[21:50:23] <FromDiscord> <Rika> In reply to @Hi02Hi "yeah that makes sense": just so you know python also does not have this feature
[21:50:24] <fn> <11ForumUpdaterBot99> New question by shuji: How to write accesors for kind Variants in Nim, see https://stackoverflow.com/questions/68382552/how-to-write-accesors-for-kind-variants-in-nim
[21:50:29] <fn> <06Prestige99> bot is broken?
[21:50:29] <FromDiscord> <Rika> the playground is probably down
[21:50:34] <fn> <06Prestige99> !eval echo "hello"
[21:50:35] <fn> <12R2D299> <no output>
[21:50:35] <NimBot> Compile failed: <no output>
[21:50:40] <fn> <06Prestige99> yeah..
[21:50:41] <FromDiscord> <@bracketmaster-5a708063d73408ce4> what feature?
[21:50:59] <fn> <06Prestige99> Yep the playground site is down
[21:51:02] <FromDiscord> <Rika> i reply to hi02hi
[21:51:07] <FromDiscord> <Rika> iterator restarting
[21:51:11] <FromDiscord> <@bracketmaster-5a708063d73408ce4> o
[21:51:13] <FromDiscord> <@bracketmaster-5a708063d73408ce4> oh
[21:51:29] <FromDiscord> <Rika> checked playground
[21:51:32] <FromDiscord> <Rika> its indeed down
[21:51:39] <FromDiscord> <@bracketmaster-5a708063d73408ce4> was about to say, a[-1] definitely works in Python
[21:52:49] <FromDiscord> <Rika> the also should have hinted that i wasnt talking about that tho xd
[22:04:07] <FromDiscord> <Hi02Hi> In reply to @Rika "just so you know": i wasnt expecting it, i was asking if i missed anything
[22:04:13] <FromDiscord> <Rika> o ok
[22:15:19] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[22:25:37] <fn> <11ForumUpdaterBot99> New post on r/nim by shujidev: How to write accesors for kind Variants in Nim, see https://reddit.com/r/nim/comments/ok9qoe/how_to_write_accesors_for_kind_variants_in_nim/
[22:40:30] <FromDiscord> <haxscramper> Where does this `type Value=object` style comes from? Almost all tutorials documentation indent after `type` and put all objects (even non-recursive ones) in a single section
[22:41:06] <FromDiscord> <theangryepicbanana> probably people who aren't familiar with nim (or pascal)
[22:42:35] <FromDiscord> <theangryepicbanana> their code isn't very good either, so they're probably new to nim
[22:47:11] <FromDiscord> <dom96> it's not just people who aren't familiar, there are some who prefer that style
[22:47:29] <FromDiscord> <dom96> and probably look at it in the same way as `proc blah ...`
[22:51:30] *** Quits: max22- (~maxime@2a01cb088335980059f2e7a3d7885c31.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[23:26:22] *** Joins: max22- (~maxime@2a01cb0883359800dee60ff75e000856.ipv6.abo.wanadoo.fr)
[23:35:15] *** Quits: pro (~pro@user/pro) (Ping timeout: 258 seconds)
[23:37:10] <fn> <11ForumUpdaterBot99> New thread by Sdmcallister: Nimpy pandas slicing/indexing, see https://forum.nim-lang.org/t/8234
[23:38:22] *** Quits: max22- (~maxime@2a01cb0883359800dee60ff75e000856.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[23:48:25] *** Joins: max22- (~maxime@2a01cb0883359800dee60ff75e000856.ipv6.abo.wanadoo.fr)
