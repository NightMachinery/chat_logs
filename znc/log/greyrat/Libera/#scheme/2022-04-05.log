[00:08:02] *** Joins: Avichi (~Avichi@2001:16b8:3f2a:900:72b7:568a:29d1:43a1)
[00:08:25] *** Quits: Psybur (~Psybur@2600:1003:b1a3:2343:f1fc:41cc:1190:cfb8) (Ping timeout: 268 seconds)
[00:08:51] *** Joins: Psybur (~Psybur@2603:3021:2541:80c1:19c2:a1cd:6600:38ba)
[00:14:32] *** Quits: Avichi (~Avichi@2001:16b8:3f2a:900:72b7:568a:29d1:43a1) (Ping timeout: 250 seconds)
[00:22:29] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:651d:53eb:593e:72b6)
[00:22:29] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:651d:53eb:593e:72b6) (Changing host)
[00:22:29] *** Joins: skapata (~Skapata@user/skapata)
[00:25:04] *** Quits: simendsjo (~user@84.211.91.241) (Ping timeout: 268 seconds)
[00:39:15] *** Joins: badkins (~badkins@136.56.92.199)
[00:46:56] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 260 seconds)
[00:48:47] *** Quits: archenoth (~archenoth@2604:3d09:681:f00:35f1:5197:30da:36a6) (Ping timeout: 260 seconds)
[00:50:03] *** Joins: wonko-th1-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane)
[00:50:55] *** Quits: wonko-the-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane) (Ping timeout: 240 seconds)
[00:57:50] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:67c4:4ad5:7007:410f) (Quit: WeeChat 2.8)
[01:09:59] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[01:16:33] *** Joins: archenoth (~archenoth@2604:3d09:681:f00:18ec:2337:4493:f506)
[01:16:40] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[01:18:15] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:24:54] *** Quits: atka (~atka@static-198-54-131-84.cust.tzulo.com) (Quit: WeeChat 3.4)
[01:27:28] *** Joins: atka (~atka@static-198-54-131-84.cust.tzulo.com)
[01:44:12] *** Quits: Psybur (~Psybur@2603:3021:2541:80c1:19c2:a1cd:6600:38ba) (Read error: Connection reset by peer)
[01:44:28] *** Joins: Psybur (~Psybur@2603:3021:2541:80c1:19c2:a1cd:6600:38ba)
[01:49:01] *** Quits: Psybur (~Psybur@2603:3021:2541:80c1:19c2:a1cd:6600:38ba) (Ping timeout: 256 seconds)
[01:50:37] *** Joins: Psybur (~Psybur@2600:1003:b1a3:2343:446a:e995:495d:c777)
[01:51:05] *** Joins: cjb (~cjbayliss@user/cjb)
[01:51:06] *** Quits: orangebot (~nic@user/orangebot) (Quit: Konversation terminated!)
[01:55:08] *** Quits: Psybur (~Psybur@2600:1003:b1a3:2343:446a:e995:495d:c777) (Ping timeout: 260 seconds)
[01:55:40] *** Joins: Psybur (~Psybur@2601:5c9:4201:3220:19c2:a1cd:6600:38ba)
[02:12:55] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[02:19:57] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:26:44] *** Quits: cjb (~cjbayliss@user/cjb) ()
[02:27:18] *** Joins: cjb (~cjb@user/cjb)
[02:39:29] *** Quits: eddof13 (~textual@2806:102e:12:64:251a:7d9c:896a:90df) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:41:37] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 248 seconds)
[02:59:17] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[03:09:02] *** Joins: badkins (~badkins@136.56.92.199)
[03:17:07] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 268 seconds)
[03:22:57] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[03:34:53] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 260 seconds)
[03:35:41] *** Joins: eddof13 (~textual@2806:102e:12:64:ed65:153f:4619:a0e9)
[03:36:44] *** Joins: aeth (~aeth@user/aeth)
[03:44:59] *** Joins: badkins (~badkins@136.56.92.199)
[03:46:33] *** Joins: seninha (~seninha@user/seninha)
[03:46:35] *** Quits: madage (~madage@user/madage) (Ping timeout: 240 seconds)
[03:49:00] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[03:53:14] *** Joins: madage (~madage@user/madage)
[04:01:07] *** Quits: psf (~pi@206.55.172.18) (Ping timeout: 260 seconds)
[04:02:33] *** Joins: psf (~pi@206.55.172.18)
[04:06:11] *** Quits: ft (~ft@shell.chaostreff-dortmund.de) (Ping timeout: 260 seconds)
[04:07:47] *** Joins: ft (~ft@shell.chaostreff-dortmund.de)
[04:15:16] *** Quits: rx80 (~quassel@user/rx80) ()
[04:16:37] *** Joins: badkins (~badkins@136.56.92.199)
[04:17:33] *** Joins: rx80 (~quassel@user/rx80)
[04:27:23] *** Quits: choas (~lars@ppp-188-174-56-11.dynamic.mnet-online.de) (Ping timeout: 260 seconds)
[04:38:07] *** Quits: even_ (~steve@ayerhart.party) (Ping timeout: 256 seconds)
[04:38:12] *** Quits: wingo (~wingo@li270-233.members.linode.com) (Remote host closed the connection)
[04:38:23] *** Joins: wingo (~wingo@li270-233.members.linode.com)
[04:38:44] *** Quits: dTal (~quassel@dragonbox/wizzard/dtal) (Remote host closed the connection)
[04:39:53] *** Joins: dTal (quassel@dragonbox/wizzard/dtal)
[04:40:34] *** Joins: even (~steve@ayerhart.party)
[04:42:39] *** Quits: rudybot (~luser@ec2-52-8-12-207.us-west-1.compute.amazonaws.com) (Ping timeout: 256 seconds)
[04:43:13] *** Quits: DKordic (~DKordic@93-86-84-123.dynamic.isp.telekom.rs) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: emacsomancer (~emacsoman@136.60.128.68) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: lloda (~user@11-206-127-185.static.world-connect.ch) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: tokie (~tokie@thales.strtok.net) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: manumanumanu (~mio@213-67-252-160-no79.tbcn.telia.com) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: Ekho (~Ekho@user/ekho) (Ping timeout: 256 seconds)
[04:44:09] *** Joins: Perryman_ (~perryman@216.97.249.113)
[04:44:14] *** Joins: manumanumanu (~mio@213-67-252-160-no79.tbcn.telia.com)
[04:44:21] *** Quits: Perryman (~perryman@user/perryman) (Ping timeout: 256 seconds)
[04:44:21] *** Quits: samph (~quassel@li1210-9.members.linode.com) (Ping timeout: 256 seconds)
[04:44:24] *** Joins: rudybot (~luser@ec2-52-8-12-207.us-west-1.compute.amazonaws.com)
[04:44:25] *** Joins: samph_ (~quassel@li1210-9.members.linode.com)
[04:46:36] *** Joins: Ekho (~Ekho@user/ekho)
[04:47:20] *** Joins: wonko-the-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane)
[04:47:32] *** Joins: emacsomancer (~emacsoman@136.60.128.68)
[04:47:55] *** Quits: wonko-th1-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane) (Ping timeout: 240 seconds)
[04:49:06] *** Joins: choas (~lars@ppp-188-174-56-211.dynamic.mnet-online.de)
[04:50:22] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[04:53:22] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 29.0.50)
[04:59:03] *** Joins: tokie (~tokie@thales.strtok.net)
[05:01:25] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[05:01:55] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[05:03:54] *** Joins: badkins (~badkins@136.56.92.199)
[05:11:22] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:13:02] *** Joins: zacque (~zacque@1.32.90.32)
[05:34:09] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[05:34:14] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 246 seconds)
[05:41:16] *** Quits: eddof13 (~textual@2806:102e:12:64:ed65:153f:4619:a0e9) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:58:55] *** Quits: choas (~lars@ppp-188-174-56-211.dynamic.mnet-online.de) (Ping timeout: 256 seconds)
[06:00:05] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[06:09:21] *** Joins: badkins (~badkins@136.56.92.199)
[06:15:19] *** Joins: choas (~lars@ppp-188-174-52-183.dynamic.mnet-online.de)
[06:15:20] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 268 seconds)
[06:33:50] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[06:35:39] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[06:39:42] *** Joins: Goodbye_Vincent1 (cyvahl@freakshells.net)
[06:41:05] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[06:41:05] *** Quits: Goodbye_Vincent (cyvahl@freakshells.net) (Ping timeout: 256 seconds)
[06:41:05] *** Goodbye_Vincent1 is now known as Goodbye_Vincent
[06:41:39] *** Quits: snits (~quassel@ip98-179-76-75.ph.ph.cox.net) (Ping timeout: 256 seconds)
[06:41:52] *** Joins: snits (~quassel@ip98-179-76-75.ph.ph.cox.net)
[06:42:58] *** Joins: aeth (~aeth@user/aeth)
[06:55:21] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Quit: jrincayc)
[07:12:54] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:15:05] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:31:37] *** Joins: eddof13 (~textual@2806:102e:12:64:ed65:153f:4619:a0e9)
[07:32:50] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[07:33:30] *** Quits: poselyqualityles (~whirl@user/poselyqualityles) (Ping timeout: 272 seconds)
[07:39:49] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 268 seconds)
[07:49:07] *** Quits: eddof13 (~textual@2806:102e:12:64:ed65:153f:4619:a0e9) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:54:00] *** Joins: m455 (~m455@user/m455)
[08:29:04] *** Quits: littlebobeep (~alMalsamo@gateway/tor-sasl/almalsamo) (Quit: leaving)
[08:29:29] *** Joins: littlebobeep (~alMalsamo@gateway/tor-sasl/almalsamo)
[08:29:32] *** Joins: s-liao (~s-liao@101.86.164.158)
[08:36:06] *** Quits: littlebobeep (~alMalsamo@gateway/tor-sasl/almalsamo) (Quit: leaving)
[08:36:11] *** Quits: klovett (~klovett@107.116.92.147) (Quit: ZZZzzz…)
[08:36:18] *** Joins: littlebobeep (~alMalsamo@gateway/tor-sasl/almalsamo)
[08:54:32] *** Quits: s-liao (~s-liao@101.86.164.158) (Ping timeout: 250 seconds)
[09:01:21] *** Joins: s-liao (~s-liao@101.86.164.158)
[09:13:13] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[09:35:07] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:48:05] *** Joins: badkins (~badkins@136.56.92.199)
[09:51:39] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Client closed)
[09:52:27] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 260 seconds)
[10:37:23] *** Quits: sudden (~cat@user/sudden) (Ping timeout: 256 seconds)
[10:39:12] *** Joins: sudden (~cat@user/sudden)
[10:58:05] *** Quits: renormalist (~ss5@renormalist.net) (Quit: leaving)
[10:58:14] *** Joins: renormalist (~ss5@renormalist.net)
[11:01:49] *** Joins: wonko-th1-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane)
[11:02:15] *** Quits: wonko-the-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane) (Ping timeout: 240 seconds)
[11:03:32] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[11:03:54] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:5d73:ba4b:5267:e012)
[11:48:58] *** Quits: Psybur (~Psybur@2601:5c9:4201:3220:19c2:a1cd:6600:38ba) (Ping timeout: 260 seconds)
[12:12:05] *** Joins: civodul (~user@guix/contributor/civodul)
[12:20:24] *** Joins: epony (epony@user/epony)
[12:37:37] <amazigh> to parse binary data with guile, guile-bytestructure can be useful.
[12:50:06] *** Joins: Psybur (~Psybur@c-76-123-45-25.hsd1.va.comcast.net)
[13:00:09] *** Quits: ecraven (ecraven@user/nex) (Quit: quit)
[13:00:57] *** Joins: ecraven (ecraven@user/nex)
[13:32:15] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[13:37:15] *** Quits: littlebobeep (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[13:49:27] *** Joins: badkins (~badkins@136.56.92.199)
[13:54:02] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 246 seconds)
[14:01:31] *** Joins: littlebobeep (~alMalsamo@gateway/tor-sasl/almalsamo)
[14:02:11] *** Joins: littlebo1eep (~alMalsamo@gateway/tor-sasl/almalsamo)
[14:02:28] *** Quits: littlebo1eep (~alMalsamo@gateway/tor-sasl/almalsamo) (Client Quit)
[14:32:16] *** Quits: atka (~atka@static-198-54-131-84.cust.tzulo.com) (Quit: WeeChat 3.4)
[14:38:58] *** Joins: seninha (~seninha@user/seninha)
[14:55:29] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 248 seconds)
[14:57:27] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:14:25] *** Quits: mala (~mala@user/malaclyps) (Read error: Connection reset by peer)
[15:16:17] *** Joins: mala (~mala@user/malaclyps)
[15:44:02] *** Joins: s-liao (~s-liao@101.86.164.158)
[16:00:02] *** Joins: jobol (~jobol@2a01:e34:ee5c:ee50:d6be:d9ff:fea3:db03)
[16:10:54] *** Quits: s-liao (~s-liao@101.86.164.158) (Ping timeout: 250 seconds)
[16:11:08] *** Joins: badkins (~badkins@136.56.92.199)
[16:13:09] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Remote host closed the connection)
[16:15:24] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[16:18:55] *** Joins: s-liao (~s-liao@101.86.164.158)
[16:20:58] <amazigh> >  there’s material to get you started, and material for experts to share with other experts, but nothing for people to go from knowing the language to being a competent practitioner
[16:21:00] <amazigh> The esotech lit gap https://buttondown.email/hillelwayne/archive/the-esotech-lit-gap/
[16:23:33] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[16:28:55] <s-liao> amazigh, which scheme implementation are for your SRFI-167 and SRFI-168?
[16:29:25] <amazigh> s-liao: that was tested with chibi
[16:29:42] <amazigh> s-liao: what do you want to do?
[16:30:53] <s-liao> Okay. I was trying to play with it in chibi. But I saw  that wasamasa has it in the eggs.
[16:31:29] <s-liao> I just experienced the k/v concept.
[16:32:23] <s-liao> Let me check.
[16:32:28] *** Quits: Psybur (~Psybur@c-76-123-45-25.hsd1.va.comcast.net) (Ping timeout: 260 seconds)
[16:34:23] *** Quits: agrosant (~agrosant@79.103.182.92.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[16:34:57] *** Joins: Psybur (~Psybur@2600:1003:b138:112:6968:67e7:2717:bba0)
[16:35:03] *** Joins: agrosant (~agrosant@79.103.182.92.dsl.dyn.forthnet.gr)
[16:35:09] <s-liao> https://depp.brause.cc/brause.cc/wald/
[16:35:13] <wasamasa> there has been an implementation using guile which has vanished ever since
[16:35:24] <wasamasa> I implemented it and concluded the result unpublishable
[16:35:33] <wasamasa> so no srfi-167/168 eggs
[16:35:41] <wasamasa> they have been withdrawn ever since
[16:35:54] <wasamasa> therefore, I suggest you to do your own experimentation instead
[16:36:29] <amazigh> s-liao: there is another implementation with guile at https://github.com/amirouche/guile-nomunofu/ and at https://github.com/amirouche/guile-babelia I agree with wasamasa read the code of those, but trying  to get them working will be challenging.
[16:36:57] <wasamasa> if you want to experiment with a stupid k/v store, use something like dbm instead
[16:37:07] <wasamasa> no need to go fully ordered
[16:37:09] <amazigh> guile-babelia repo has more extensions
[16:38:00] <s-liao> Okay.
[16:40:10] <wasamasa> or if you love PHP-quality software, redis is an option
[16:42:02] <amazigh> lolilol
[16:43:01] <amazigh> first time I read what I think about REDIS out loud (and my guess is that your opinion is more educated tha mine)
[16:43:24] <wasamasa> I've only briefly used it for a college assignment
[16:43:36] <wasamasa> and it felt pretty janky, just like mongodb
[16:43:44] <wasamasa> then I later read actual explanations why it's janky
[16:44:15] <wasamasa> I'm saying PHP-quality because much like with PHP, there's a grab bag of operations that you need to carefully combine for sane semantics
[16:44:29] <wasamasa> which is in conflict with the idea of it being easy to use
[16:46:03] <amazigh> imo the situation with REDIS is more dire than with mongodb, because REDIS is used in most if not all softwares I have met in the industry.
[16:48:14] <sjamaan> The only time I encountered redis was when I needed it for a Django extension (which turned out to be a huge mistake in itself), and it blew up because by default there's no limit on how much memory it's allowed to use
[16:48:26] <wasamasa> the most fun part of the assignment was having to present a software built on the database technology I've looked into, so I made a guestbook and spinned it up during the presentation
[16:48:41] <wasamasa> then looked at it after the talk was over and found some jokesters put an ascii hitler in there :D
[16:48:48] <sjamaan> heh
[16:48:53] <wasamasa> thankfully none of this nonsense was persisted to disk
[16:48:57] <sjamaan> Oh yeah it's not secured by default
[16:49:00] <wasamasa> right
[16:49:06] <amazigh> true story: senior engineer) we need a fast database, let's use redis; me) yeah but guarantees, persistence etc...; senior) REDIS can haz regular snapshot written to the disk; me) you do not mind loosing one hour of work regularly; senior) that only impact 5 users [that are paid by the company]
[16:49:09] <sjamaan> And does it listen on all interfaces?
[16:49:13] <wasamasa> I've read about people getting ransomware notes on mongo or redis
[16:49:32] <wasamasa> think it was mongo though
[16:49:56] <s-liao> Okay. I came across https://github.com/nicferrier/emacs-kv. In that project , it has the kvmap-bind defmacro. I can not understand what the operation it. Then try to look at the similar concept in k/v store project.
[16:50:23] <amazigh> One hour times 5 users, that is 5 hours of work, and it happened several times a week.
[16:50:38] <wasamasa> kv has been obsoleted by map.el (which is built-in)
[16:51:07] <wasamasa> which is just a testament to nearly all lisps having a bad associative data story
[16:51:17] <wasamasa> so far, clojure has been the sole exception
[16:51:43] <ChoHag> But it's not a list!
[16:51:47] <ChoHag> Bad data!
[16:51:49] <wasamasa> no and that's fine
[16:52:19] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 250 seconds)
[16:52:22] <wasamasa> ironically though, clojure allows turning lists, vectors and strings into lazy sequences to iterate over, so make of that what you will
[16:53:21] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 248 seconds)
[16:53:44] <ChoHag> Sounds like what they made of it is that not everything's a list (or needs to be).
[16:54:10] *** Joins: aeth (~aeth@user/aeth)
[16:54:41] <wasamasa> not sure whether this applies to their maps as well, but then, I rarely have the need to iterate over them
[17:00:22] <sjamaan> It does
[17:00:33] <wasamasa> how's clojure treating you?
[17:00:38] <sjamaan> Maps iterate as sequences of 2-element vectors (which are key/value pairs)
[17:00:57] <sjamaan> meh, I'm not a big fan of the "everything is a map" ideology
[17:01:06] <sjamaan> And also, nil punning FTL
[17:01:20] <wasamasa> you mean people not using records enough?
[17:01:22] <sjamaan> These two things make understanding and debugging code harder than it has to be
[17:01:40] <sjamaan> You're not supposed to be using records (much) AFAICT
[17:02:16] <wasamasa> hm, what then?
[17:02:20] <sjamaan> maps!
[17:02:26] <wasamasa> I mean, spec isn't the answer
[17:02:42] <sjamaan> There's a whole cottage industry of modelers/validators for maps
[17:02:54] <sjamaan> We've settled on Malli, which is a complex monstrosity
[17:03:29] <wasamasa> ouch
[17:04:45] <wasamasa> its README points to a rant
[17:05:01] *** Joins: badkins (~badkins@136.56.92.199)
[17:05:22] <wasamasa> https://gist.github.com/richhickey/1563cddea1002958f96e7ba9519972d9
[17:08:36] <wasamasa> my experience on the topic is limited, but when it comes to my own hobbyist projects, using records was an easier solution than writing my own schema validation logic
[17:09:11] <sjamaan> Very much so
[17:09:43] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 260 seconds)
[17:10:03] <wasamasa> because records allow the code to error out early, rather than chasing at what point the internal assumptions ceased to hold
[17:10:06] <sjamaan> Using malli results in a huge blowup of our Clojurescript codebase (don't get me started on the horrors of cljs) and slowdown at startup time because it's not optimized for startup speed (with the JVM bootup times, who cares about a few extra seconds?)
[17:10:20] <sjamaan> So we had to write an in-house workalike alternative implementation for malli
[17:10:31] <sjamaan> s/for/of/
[17:10:34] <wasamasa> I've considered to give clojurescript another spin for a hobbyist game
[17:10:46] <wasamasa> but using shadow rather than the official toolchain
[17:10:55] <sjamaan> We're using shadow-cljs
[17:10:59] <wasamasa> oh really
[17:11:02] <wasamasa> tell me more about it :D
[17:11:03] <sjamaan> I dunno, to me it's nothing but pain
[17:11:08] <wasamasa> damnit
[17:11:18] <wasamasa> alright, then vanilla JS it is
[17:11:41] <sjamaan> It's basically the Clojure ecosystem but bringing in the debugability nightmare that JS is combined with compiled code
[17:12:30] <sjamaan> My main gripe really is the NodeJS underlying it, not necessarily Clojurescript itself I guess
[17:12:40] <sjamaan> But it's just another layer which makes things more difficult than they have to be
[17:12:41] <wasamasa> I have this hypothesis that efforts trying to paper over <terrible thing> result in you having to be an expert in the parts making up <terrible thing> as well as the effort itself
[17:12:48] <wasamasa> so you have three problems instead of one
[17:12:53] <sjamaan> Bingo
[17:13:15] <wasamasa> whereas small and incremental improvements to the terrible thing are the way to go I guess
[17:13:28] <wasamasa> but again, this is just hobbyist me, not money making me speaking :D
[17:13:28] <sjamaan> Something like Typescript is probably a better bet
[17:13:41] <wasamasa> yes, but I'd keep the dependencies to a minimum
[17:13:47] <wasamasa> so maybe just use typescript as a linter
[17:14:27] <sham1> Lisps have a bad associative container story because alists usually are good enough but then when one wants to switch to a hash map or an RB-tree based solution or whatever, it is quite cumbersome 
[17:14:40] <wasamasa> yeah
[17:14:55] <wasamasa> this reminds me, maru resembles smalltalk more than scheme and is pretty tiny
[17:15:15] <wasamasa> maybe first-class support for multifunctions or whatever you call them would help
[17:15:39] <wasamasa> there is a srfi for a generic ref operation in that spirit
[17:16:13] <wasamasa> fast-generic has been mentioned, too
[17:18:43] <sjamaan> multimethods do make it a bit harder to figure out code flow
[17:19:17] <wasamasa> true
[17:19:20] <wasamasa> but when it's something as basic as fetch value for key in associative data structure, it's fine
[17:26:53] <s-liao> The only comment I have the alist mostly flat the list data in the way are more readable. My experience in this area is limit. In C program. Mostly like I like pair.
[17:28:33] * jobol dream of gperf magic
[17:35:09] *** Quits: akarle (~akarle@user/akarle) (Remote host closed the connection)
[17:36:16] *** Joins: akarle (~akarle@user/akarle)
[17:55:20] <mdhughes> wasamasa: "Now you have two problems"
[17:56:35] <mdhughes> Typescript is just as terrible as any bag-over-JS's-head. At some point you need to debug, and you can't because you're debugging generated code.
[17:57:35] <mdhughes> For a container, it might make sense to make a let-over-lambda that just does alist until you modify it or store N values, then switches to hashmap or whatever you like.
[17:58:07] <sjamaan> mdhughes: As I understood it typescript doesn't really compile to different code (maybe I'm wrong though); it's just JS with the types removed
[17:58:08] <mdhughes> And then you can respond to generic messages (cont 'get KEY) etc.
[17:58:37] *** Joins: klovett (~klovett@107.116.92.147)
[17:58:42] <mdhughes> sjamaan: No, there's no strong types in JS. Everything in TS is generated as a bunch of wrappers and pre/post conditions.
[17:59:10] <sjamaan> It does runtime type checking?
[17:59:28] <mdhughes> It does "compile time" (except not really) typing.
[17:59:50] <mdhughes> But to get there it produces a bunch of crap on top of the JS you'd normally write.
[17:59:55] <sjamaan> argh
[18:00:42] <sjamaan> JS really is cursed
[18:00:51] <mdhughes> For very simple code it won't be too bad, but once you get a nice big UML structure, it's unreadable.
[18:01:36] <mdhughes> Raw JS isn't that bad. It's incredibly ugly, but it's a good Self implementation. It models web pages well, has nice regex support. Lot of things Just Work in it.
[18:02:11] <ChoHag> JS isn't cursed. We are cursed with it.
[18:02:11] <mdhughes> The bad time is when people try to make it into something it isn't, especially: Java.
[18:04:48] *** Joins: TCZ (~tcz@ip-91.246.66.101.skyware.pl)
[18:05:37] <sjamaan> mdhughes: AFAICT even the JS committee is trying to turn it into Java, didn't they add classes in one of the somewhat more recent versions?
[18:06:14] <mdhughes> There's a "class" syntax now, which looks very Java-like and is very misleading. It's still prototype-based.
[18:20:10] <dpk> JavaScript since ES6 is fine, just avoid the unfortunate sharp edges
[18:20:57] <dpk> fortunately, many of those also disappear if you are in strict mode (which will increasingly be the default as we move to real ES6 modules, about 7 years too late)
[18:21:20] <dpk> though sadly not all of them (== can still bite you)
[18:21:44] <dpk> (i think var is also still allowed in strict mode? even though you pretty much always want let)
[18:22:53] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Client closed)
[18:23:42] <mdhughes> eslint whines about it.
[18:26:42] *** Quits: Psybur (~Psybur@2600:1003:b138:112:6968:67e7:2717:bba0) (Ping timeout: 268 seconds)
[18:27:39] *** Joins: Psybur (~Psybur@2601:5c9:4201:3220:19c2:a1cd:6600:38ba)
[18:28:10] *** Quits: zacque (~zacque@1.32.90.32) (Quit: Goodbye :D)
[18:54:20] *** Joins: eddof13 (~textual@2806:102e:12:64:ed65:153f:4619:a0e9)
[18:58:09] *** Quits: emacsomancer (~emacsoman@136.60.128.68) (Ping timeout: 268 seconds)
[19:07:35] *** Joins: badkins (~badkins@136.56.92.199)
[19:12:12] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[19:12:43] *** Quits: eddof13 (~textual@2806:102e:12:64:ed65:153f:4619:a0e9) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:12:44] *** Quits: TCZ (~tcz@ip-91.246.66.101.skyware.pl) (Quit: Leaving)
[19:20:28] *** Joins: eddof13 (~textual@2806:102e:12:64:ed65:153f:4619:a0e9)
[19:30:26] *** Joins: badkins (~badkins@136.56.92.199)
[19:47:58] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:5d73:ba4b:5267:e012) (Quit: WeeChat 2.8)
[19:50:13] *** Quits: Psybur (~Psybur@2601:5c9:4201:3220:19c2:a1cd:6600:38ba) (Ping timeout: 260 seconds)
[19:50:54] *** Joins: Psybur (~Psybur@2600:1003:b138:112:20c5:efb4:887:de9a)
[19:54:04] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:04:05] *** Quits: eddof13 (~textual@2806:102e:12:64:ed65:153f:4619:a0e9) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:08:19] *** Joins: eddof13 (~textual@2806:102e:12:64:ed65:153f:4619:a0e9)
[20:10:58] *** Joins: tfb (~tfb@88.98.95.237)
[20:12:19] <Zipheir> Even with Crockford's clear explanation, I still found JS's inheritance model to be hard to understand.
[20:22:06] <sham1> It's rather similar to what one would do with lua
[20:27:42] <mdhughes> It is weird unless you learned Self as one of your first OOP languages, and then it's like "at last! Someone gets me!"
[20:29:10] <mdhughes> And you can do clever things like inserting handlers into the prototype chain to patch existing objects.
[20:41:59] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:308b:ddf6:8a2a:9b9f)
[20:41:59] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:308b:ddf6:8a2a:9b9f) (Changing host)
[20:41:59] *** Joins: skapata (~Skapata@user/skapata)
[20:43:38] *** Joins: poselyqualityles (~whirl@user/poselyqualityles)
[20:47:19] *** Quits: Psybur (~Psybur@2600:1003:b138:112:20c5:efb4:887:de9a) (Read error: Connection reset by peer)
[20:47:38] *** Joins: Psybur (~Psybur@2600:1003:b138:112:20c5:efb4:887:de9a)
[20:57:06] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[21:04:18] *** Joins: badkins (~badkins@136.56.92.199)
[21:06:37] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 260 seconds)
[21:10:12] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[21:18:08] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[21:25:26] *** Joins: gproto23 (~gproto23@user/gproto23)
[21:36:33] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[21:55:36] *** Joins: emacsomancer (~emacsoman@136.60.128.68)
[22:03:36] <dpk> to be honest i don't really understand JS’s inheritance model internally either
[22:03:59] *** Joins: blinux (~blinux@70.21.20.62)
[22:04:31] <dpk> my first prototype-based language was MOO (!) and there you have the whole persistent and network aspects thrown in
[22:05:21] <dpk> meaning object creation is computationally expensive and you have to pay (well, on the MOO server i was on, you had to pay in in-world currency, other servers probably do/did it differently) for the space you use
[22:05:46] <dpk> also: no lambdas, despite the server being called LambdaMOO and written by Pavel Curtis
[22:06:08] <dpk> (who allegedly named it after lambda the operator, but didn't actually implement it)
[22:06:39] <blinux> I just heard that there is a release of Structure and Interpretation of Computer Programs (SICP) which written in javascript instead of Scheme. I'm not sure what I think about that. I would think maybe Erlang or Golang may have made more sense. It isn't a third edition, but rather an alternative version.
[22:07:36] <dpk> yeah, it's really bizarre. i think you *could* do it in JS well — the only limitation is that JS isn't homoiconic, but apparently they provided a JS parser
[22:07:54] <dpk> but they copied some of the exercises over from SICP where they don't actually make sense in a JavaScript context
[22:08:12] <blinux> This is the link to the JS version of SICP https://sourceacademy.org/sicpjs/index
[22:08:27] <dpk> the very first exercise i when flipping through was to implement a version of the metacircular interpreter which guarantees left-to-right evaluation of procedure call arguments
[22:08:49] <gwatt> Yeah, having looked at code samples, it's not what I think actual JS programmers would recommend. Whereas the scheme version is reasonably idiomatic
[22:08:50] <Zipheir> dpk: Was that the lambdaMOO of LTAND fame?
[22:09:22] <dpk> the exercise makes sense in Scheme because Scheme doesn't guarantee that already, so Chibi will evaluate right-to-left, Chez probably tries to work out what the most optimal order would be, and i think Chicken or MIT does do left to right always
[22:09:45] <dpk> but in JS the spec guarantees left to right argument evaluation, so you're implementing something which is already there
[22:09:52] <Zipheir> I'd expect something like the Java of Felleisen & Friedman's A Little Java...  i.e. idiomatic Scheme/ML in slightly tortured Java guise.
[22:10:28] <Zipheir> (Just append -Script. ;-)
[22:10:50] <dpk> Zipheir: LambdaMOO is two things: a MOO server, and the software that runs the server. i was on the server itself a little bit, though it was (and is) well past its heyday at the time. mostly i was on other MOO servers which appeared during an apparent Indian summer of MOOs in like 2004–2005
[22:10:57] <dpk> or maybe a bit later
[22:11:22] <dpk> the original MOO server is the one that tried running things entirely democratically for a while, yes
[22:11:38] <Zipheir> Right.
[22:11:59] <Zipheir> I ask because https://www.cc.gatech.edu/classes/cs8113h_98_spring/LTAND.html shows up a lot in discussions of online group organization.
[22:13:09] <dpk> LambdaMOO the server and language was made by Lispers, and in hindsight, you could tell, despite it being nothing like Lisp on the surface
[22:13:26] <dpk> (Kent Pitman worked on it for a while too, i believe)
[22:14:01] <blinux> Does the SICP book work with Racket? I understand that Racket is like a new version of Scheme.
[22:14:13] <Zipheir> blinux: Racket is its own thing.
[22:14:28] <dpk> MOO was also the first time i used a REPL, for example. (iirc if you typed a line starting with a semicolon it would interpret it as MOO code and echo the result back to you)
[22:14:34] <Zipheir> blinux: It's sort of a language laboratory.  Among the languages it supports is the sicp subset.
[22:14:54] <Zipheir> blinux: But SICP is mostly very portable.  See SRFIs 216 and 203 for the less portable parts.
[22:15:26] <Zipheir> SICP *does* use pair mutation a lot, which #lang racket got rid of.
[22:16:02] <dpk> afaik Racket's SICP mode is the best way to do SICP since it supports the picture language fully in DrRacket
[22:16:17] <dpk> as well as other more basic SICPisms like calling #t ‘true’ and #f ‘false’
[22:16:33] <Zipheir> But if you don't care about drawing pictures, any Scheme will do.
[22:17:13] <blinux> Logo is an adaptation of LISP used for education. I found out that is what I was using for a Turtle drawing program in the 80's on an Apple II in school.
[22:17:30] <Zipheir> It's all about the compositional image model.  You can use your imagination, and the book's image examples.
[22:20:59] <mdhughes> I played some on MOO, but I mostly played and ran DikuMUD & CircleMUD; combat- and exploration-heavy, but only mods could make stuff.
[22:22:51] <Zipheir> The heyday of MUDs was before my time, unfortunately.
[22:25:39] *** Joins: seninha (~seninha@user/seninha)
[22:29:38] *** Joins: badkins (~badkins@136.56.92.199)
[22:38:15] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 260 seconds)
[22:38:44] *** Joins: Xplorator (~Xplorator@176.166.206.65)
[22:39:44] <ChoHag> Fortunately I could never afford the bandwidth.
[22:40:44] *** Quits: Psybur (~Psybur@2600:1003:b138:112:20c5:efb4:887:de9a) (Ping timeout: 252 seconds)
[22:40:59] *** Joins: Psybur (~Psybur@75.145.205.201)
[22:42:19] <edgar-rft> flame emacs "28.1"
[22:42:40] <edgar-rft> oh, wrong channel :-)
[22:43:59] <ChoHag> Emacs is a tool I use to write my text editor in.
[22:45:38] <edgar-rft> the fsbot in #emacs is broken and complains when 28.1 is a number, I just wanted to test whether it works when 28.1 is a string, but stupidly posted to the wrong channel
[22:46:14] <ChoHag> Is it a version yet?
[22:49:54] <edgar-rft> emacs 28.1 came out yesterday or something
[22:50:54] <ChoHag> Oh.
[22:50:57] * ChoHag bes old.
[22:51:13] <ChoHag> be's?
[22:52:20] *** Joins: atka (~atka@static-198-54-131-84.cust.tzulo.com)
[22:52:29] *** Quits: nmeum (~nmeum@barium.8pit.net) (Remote host closed the connection)
[22:53:15] *** Joins: nmeum (~nmeum@barium.8pit.net)
[22:55:26] <dpk> oh, they have a release? nice
[22:55:42] <dpk> (native-comp is AMAZING)
[22:56:03] <dpk> (i didn't think it would make much difference, but even simple stuff like buffer scrolling is way smoother)
[22:56:31] <ChoHag> What does it do to the characters that 27 doesn't?
[22:57:18] <dpk> 28 supports emoji properly now, iirc
[22:57:34] <edgar-rft> great :-)
[22:57:52] <edgar-rft> most important feature :-)
[22:57:57] <gwatt> Can finally use emacs for my emoji code projects
[22:58:11] <ChoHag> Yes that will be useful.
[22:58:12] <ChoHag> :)
[22:58:59] <dpk> Emacs 29 is getting an emoji input method, even
[22:59:26] <ChoHag> (define -: (lambda ()))
[22:59:40] <dpk> so you'll be able to type C-x \ :poop: and get 💩
[22:59:57] <gwatt> Just what I always wanted
[23:00:02] <ChoHag> Well who doesn't need access to bullshit on demand?
[23:02:38] <Zipheir> Another name for dummy variables.
[23:03:14] <mdhughes> I would flame emacs, but it won't have loaded in time to parse my flames.
[23:03:15] <Zipheir> And we can finally use that alternate name for 'curried'.
[23:03:24] *** Quits: webshinra (~shinra@2a01cb080779fc00b3436da62fafc69e.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[23:03:52] <ChoHag> "Russian"?
[23:04:07] *** Joins: tfeb (~tfb@88.98.95.237)
[23:04:14] <gwatt> ChoHag: presumably the :curry: emoji
[23:05:05] *** Joins: webshinra (~shinra@2a01cb080779fc00b3436da62fafc69e.ipv6.abo.wanadoo.fr)
[23:05:13] * edgar-rft wants a :curry-sausage: emoji
[23:05:33] *** Joins: badkins (~badkins@136.56.92.199)
[23:06:31] <ChoHag> I feel like emoji are going to be looked back on like handing out class As was in the early internet days.
[23:08:07] <ChoHag> You wake up in the cold light of the 23rd century and ask yourself: Why?
[23:09:15] <Zipheir> I'm on a new OS installation and I can't quite bring myself to go build a package for noto-emoji...  I just can't justify that effort.
[23:09:59] <ChoHag> But then the computer could smile on your behalf.
[23:10:03] <gwatt> ChoHag: If I personally woke up in the 23rd century I'd probably have more pressing questions than "why emojis?"
[23:10:57] <ChoHag> gwatt: It was an elaborate joke aimed at weeding out any British spies.
[23:11:25] <gwatt> ah, too elaborate for me, apparently
[23:11:37] <ChoHag> Well you're not a British spy then.
[23:13:08] <tfeb> We are all British spies: some of us merely do not know we are.  yet.
[23:13:22] <ChoHag> ("Class A" is the formal UK classification for the hardest of illegal drugs, and also the largest network available individually in the early IPv4 dats pre-CIDR addressing)
[23:14:02] <ChoHag> (Given out with wild abandon)
[23:14:44] <ChoHag> (days)
[23:19:00] *** madage is now known as ichichjunk
[23:19:01] <gwatt> I think MIT recently started selling off some if its address space
