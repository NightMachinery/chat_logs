[00:11:26] <jneira[m]> merged
[00:15:43] <anton-latukha[m]> If the HLS is fully pinned - how CI can get build success on todays morning: https://github.com/haskell/haskell-language-server/pull/2426 passed everything successful.
[00:16:39] *** Parts: nf (~n@monade.li) (Fairfarren.)
[00:16:43] <anton-latukha[m]> Then in the middle of the day I got dependency bounds error in the oldest GHC: https://github.com/haskell/haskell-language-server/pull/2427
[00:17:19] <anton-latukha[m]> & not CI is failling both on the oldest & the newest GHCs in the same PR (& I not even rebased).
[00:17:51] <anton-latukha[m]> So Hackage pin seems not be indempotent.
[00:18:23] <anton-latukha[m]> CI in `master` setup does `cabal v2-update`, so PR does the same.
[00:18:57] <anton-latukha[m]> & do during `cabal v2-update` package revisions sneak-in or not.
[00:20:06] <anton-latukha[m]> What is changing in the cabal configuration or installed cabal tooling or in my code so dependency solutions falls.
[00:20:16] <anton-latukha[m]> (would try to understand that)
[00:28:45] <anton-latukha[m]> That probably correlates with how I was doing & retrieving the source code caching. If package version sources were not in the storage - cabal can not solve package versioning.
[00:34:32] <jneira[m]> (reviewing the draft pr) hmm, afaik other cabal.project config values can invalidate the cache, like ghc-options
[00:35:54] <jneira[m]> ah ok, i've reached the commit you uses cabal.project again in the key :-D 
[01:28:35] *** Joins: libertyprime (~libertypr@118-92-79-43.dsl.dyn.ihug.co.nz)
[01:34:31] <anton-latukha[m]> Well, fixed now.
[01:35:38] <anton-latukha[m]> Interesting that dependency sources take-up `~191 MB`.
[01:36:38] <anton-latukha[m]> * Interesting that in zstd result the dependency sources
[01:37:03] <anton-latukha[m]> & compiled deps `~109 MB`.
[02:16:15] *** Joins: yoshitsugu (~yoshitsug@p503133-ipngn2901morioka.iwate.ocn.ne.jp)
[02:32:53] *** Joins: yoshitsugu_ (uid529929@id-529929.hampstead.irccloud.com)
[02:37:18] *** Quits: yoshitsugu (~yoshitsug@p503133-ipngn2901morioka.iwate.ocn.ne.jp) (Quit: Client closed)
[02:37:18] *** yoshitsugu_ is now known as yoshitsugu
[02:37:51] *** Quits: yoshitsugu (uid529929@id-529929.hampstead.irccloud.com) ()
[02:38:02] *** Joins: yoshitsugu (uid529929@id-529929.hampstead.irccloud.com)
[02:50:14] *** Quits: libertyprime (~libertypr@118-92-79-43.dsl.dyn.ihug.co.nz) (Ping timeout: 252 seconds)
[03:03:47] <anton-latukha[m]> +====
[03:03:47] <anton-latukha[m]> Would we cache `dist-newstyle`? With Nix-style v2-builds from my exp Cabal seems to give great reuse of build artifacts. I only encountered a problem when switching to & from `noop` build.
[03:04:48] *** Joins: libertyprime (~libertypr@203.97.185.98)
[03:05:03] <anton-latukha[m]> But if others had definite trouble with `dist-newstyle` artifacts in recent years - that would refute reasoning about caching the `dist-newstyle`.
[03:07:41] <anton-latukha[m]> * `noop` build. Cabal tires to put `noop` build artifacts differently - but during the switch back I remember having an artifact problem & requiring to fully nuke `dist-newstyle` then for simplicity.
[03:10:57] *** Quits: libertyprime (~libertypr@203.97.185.98) (Ping timeout: 252 seconds)
[03:11:53] <anton-latukha[m]> We basically can introduce the `dist-newstyle` caching, which would boost PR rebuilds. And delete it after the first trouble with it.
[03:12:41] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Remote host closed the connection)
[03:12:55] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[03:35:49] *** Joins: libertyprime (~libertypr@203.211.78.24)
[04:10:21] *** Quits: libertyprime (~libertypr@203.211.78.24) (Ping timeout: 252 seconds)
[07:18:47] *** Joins: libertyprime (~libertypr@222-154-245-111.adsl.xtra.co.nz)
[07:19:35] *** Quits: libertyprime (~libertypr@222-154-245-111.adsl.xtra.co.nz) (Client Quit)
[08:00:13] *** Joins: libertyprime (~libertypr@203.211.78.24)
[08:52:19] *** Quits: libertyprime (~libertypr@203.211.78.24) (Ping timeout: 252 seconds)
[08:52:34] *** Joins: libertyprime (~libertypr@203.211.78.24)
[08:58:13] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[10:03:33] <jneira[m]> sounds good to me, we could give it some tries updating the cache key version and remove if the problem is reproduced
[10:04:23] <jneira[m]> but maybe only in the test workflow, for PRS and no in master?
[10:39:35] *** Joins: arrowd (~arr@2.94.236.140)
[12:37:49] *** Quits: arrowd (~arr@2.94.236.140) (Ping timeout: 252 seconds)
[14:58:18] <anton-latukha[m]> <jneira[m]> "but maybe only in the test..." <- Yes, this is how to do it in the best way. As caches are shared on atomic directory basis & `master` builds with `--only-dependencies` - it has only 17Mb of `dist-newstyle` artifacts, while the `test` of course compiles almost everything, including all of the plugins.
[15:00:41] <anton-latukha[m]> By the way - noticed that I use Cabal `3.6` locally & `ghcup` advertises it as recommended for a month or so now & CI does not test with cabal `3.6` at all, uses `3.4` & uses `3.2` in the `bench.yml`. These probably may be updated also.
[15:01:28] <anton-latukha[m]> s/By the way - noticed that I use Cabal `3.6` locally & `ghcup` advertises it as recommended for a month or so now & CI does not test with cabal `3.6` at all, uses `3.4` & uses `3.2` in the `bench.yml`. These probably may be updated also./By the way - noticed that I use Cabal `3.6` locally, with HLS & for HLS dev & `ghcup` advertises it as recommended for a month or so now & CI at the moment does not test with cabal
[15:01:28] <anton-latukha[m]> `3.6` at all, uses `3.4` & uses `3.2` in the `bench.yml`. These probably may be updated also./
[15:02:19] <jneira[m]> ya i have a pr about but feel free to include that in your draft
[15:02:27] <jneira[m]> a pr no, a branch
[15:02:48] <jneira[m]> and a pr in my repo :-P 
[15:02:50] <jneira[m]> https://github.com/jneira/haskell-language-server/pull/46
[15:03:58] <jneira[m]> runs was succesful in that pr
[15:03:59] <anton-latukha[m]> I currently should try to limit the scope to settle the PR. I'd preferred to do it in the next stage.
[15:04:13] <jneira[m]> fine
[15:04:38] <jneira[m]> yeah, maybe we could extract the 8.10.5 deprecation
[15:05:06] <jneira[m]> to make it more evident as a seprate pr and maybe complete it with other references in the repo about 8.10.5
[15:05:28] <jneira[m]> f.e. the stack-8.10.5.yaml should be delted, not sure if it is done
[15:08:03] <anton-latukha[m]> <jneira[m]> "https://github.com/jneira/..." <- I was thinking of building a strategy matrix to test for 3.6 - 3.2 across the whole range of builds, that is added complexity to the picture.
[15:08:04] <anton-latukha[m]> Oh, if it is just updating versions to `3.6` - well lets include that also.
[15:08:45] <jneira[m]> üëçÔ∏è
[15:09:23] <anton-latukha[m]> jneira[m]: Oh. I can cherry-pick it, or it is probably easier for you just to bundle it up if you want to have it in 1 PR, so go free - I would do a rebase.
[15:09:38] <jneira[m]> ok
[15:10:11] <jneira[m]> i want to wait some days, to ensure 1.5.1 is good and we will not need another minor release
[15:10:25] <jneira[m]> to not have to revert it in that case
[15:10:38] <jneira[m]> not a big deal but..
[15:13:51] <anton-latukha[m]> Yes, we talk about bike shedding here 8)
[15:34:57] <anton-latukha[m]> A light laugh:
[15:35:02] * anton-latukha[m] uploaded an image: (14KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/lnToGkOZmQAezXNzfiABkwBE/Screenshot-2021-12-02-14%3A03%3A55.png >
[17:19:50] *** Joins: arrowd (~arr@2.94.236.140)
[18:53:49] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[19:31:11] *** Quits: libertyprime (~libertypr@203.211.78.24) (Ping timeout: 256 seconds)
[21:19:20] <anton-latukha[m]> Yep. Which time I refound the `cabal all` now cache would indeed cache everything needed.
[21:21:20] <anton-latukha[m]> `dist-newstyle` of everything is ~700Mb, which means having 17 builds in matrix - it basically can not be used inside 10Gb limit, so with that it is reasonable to have `dist-newstyle` cache only if PR is from a fork.
[21:21:56] <anton-latukha[m]> s/Yep. Which time I refound the `cabal all` now cache would indeed cache everything needed./Yep. Which time I refound the `cabal all`. So now cache would indeed cache everything needed./
[21:22:24] <anton-latukha[m]> s/`dist-newstyle` of everything is ~700Mb, which means having 17 builds in matrix - it basically can not be used inside 10Gb limit, so with that it is reasonable to have `dist-newstyle` cache only if PR is from a fork./`dist-newstyle` of everything is ~700Mb, which means having 17 build variants in matrix - it basically can not be used inside 10Gb limit, so with that it is reasonable to have `dist-newstyle` cache only
[21:22:24] <anton-latukha[m]> if PR is from a fork./
[21:25:55] *** Quits: arrowd (~arr@2.94.236.140) ()
[22:56:33] <jneira[m]> nice, just in case i think `cabal all` does not build benches and tests by default
[22:56:43] <jneira[m]> only all packages
[23:35:26] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 252 seconds)
[23:38:00] *** Joins: juhp (~juhp@128.106.188.82)
