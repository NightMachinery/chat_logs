[00:01:35] <zgu> perlbot: utf8 ಠ
[00:01:36] <perlbot> zgu: U+0CA0 (e0 b2 a0): KANNADA LETTER TTHA [ಠ] 
[00:05:02] *** Quits: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net) (Quit: Konversation terminated!)
[00:05:48] *** Quits: ArtVandelayer (~ArtVandel@ip174-68-147-20.lv.lv.cox.net) (Ping timeout: 258 seconds)
[00:08:40] *** Joins: _73```` (~user@pool-96-233-64-53.bstnma.fios.verizon.net)
[00:10:24] *** Quits: _73``` (~user@pool-96-233-64-53.bstnma.fios.verizon.net) (Ping timeout: 258 seconds)
[00:14:40] <gordonfish-> Oh Kannada
[00:14:45] *** gordonfish- is now known as gordonfish
[00:16:34] <choroba> Blame Kannada!
[00:17:07] <gordonfish> It's not even a real country anyway
[00:17:26] *** Parts: _73```` (~user@pool-96-233-64-53.bstnma.fios.verizon.net) (ERC (IRC client for Emacs 27.2))
[00:19:21] *** Joins: _73 (~user@pool-96-233-64-53.bstnma.fios.verizon.net)
[00:19:43] *** Joins: jaytee80 (~jaytee80@fw.bmd.cpii.com)
[00:20:06] <jaytee80> Is there a rpm for rocky/centos 8 for the cpantorpm utility? 
[00:20:48] *** Quits: YaoNai (~YaoNai@user/yaonai) (Quit: leaving)
[00:21:55] *** Joins: ArtVandelayer (~ArtVandel@ip174-68-147-20.lv.lv.cox.net)
[00:22:14] *** Joins: whynot (~whynot@88.155.115.188)
[00:22:19] <mst> I dunno, that's a centos question surely, we have no influence on their repositories
[00:22:28] <mst> you could also look to see if cpanflute's packaged
[00:22:44] <Grinnz> if there isn't, you could cpantorpm one right :D
[00:22:55] <jaytee80> chicken or egg first?
[00:23:49] *** Quits: Darkcoal (~user@139.64.63.46) (Ping timeout: 258 seconds)
[00:24:17] <jaytee80> Yeah, i'm converting my system-perl stack over from centos 7 to rocky 8. For C7 there's like 500 perl deps I've made into rpms with an old clunky script. 
[00:24:29] <mst> installing local tooling without polluting /usr with an rpm is something any sysadmin should know how to do anyway
[00:24:45] <jaytee80> My strategy will be start top level deps looking for existing rpms via dnf, then if not found make them with cpantorpm. 
[00:24:51] <mst> using packages for final deployment is a separate question
[00:24:54] <gordonfish> jaytee80: There appears to be a 'cpan2rpm', though not a 'cpantorpm'
[00:25:03] <gordonfish> http://rpmfind.net/linux/rpm2html/search.php?query=cpan2rpm&submit=Search+...&system=&arch=
[00:25:04] <Paperbot> Link title(s): [ RPM resource cpan2rpm ]
[00:25:07] <jaytee80> Does cpantorpm build just the one package, or deps of that package too?
[00:25:27] <jaytee80> https://metacpan.org/dist/App-CPANtoRPM/view/bin/cpantorpm.pod is what I'm looking at using
[00:25:29] <Paperbot> Link title(s): [ cpantorpm - An RPM packager for perl modules - metacpan.org ]
[00:25:47] <ether> perl -CS -le'print v3232.95.3232'
[00:25:49] *** Joins: Darkcoal (~user@51.158.144.31)
[00:26:17] <gordonfish> jaytee80: https://pkgs.org/search/?q=cpan2rpm
[00:26:21] <Paperbot> Link title(s): [ Search Results for cpan2rpm ]
[00:26:40] <mst> jaytee80: that's sufficiently actively maintained I'd expect a centos package to be missing bugfixes anyway
[00:26:50] <jaytee80> mst: yeah, I know. I have doezens of scripts/apps/daemons that need shared libs... some config is in libs via Build.PL parameters. I'm not sure a brew type config will work here.
[00:26:53] <mst> jaytee80: why not just install that into a local::lib
[00:26:58] <mst> jaytee80: what
[00:27:07] <gordonfish> jaytee80: There is also perl-App-CPANtoRPM-1.10-alt1.noarch.rpm (https://pkgs.org/search/?q=cpantorpm)
[00:27:11] <Paperbot> Link title(s): [ Search Results for cpantorpm ]
[00:27:24] <mst> jaytee80: ok, let me try this again: use local::lib to *get* App::CPANtoRPM and then *use* that to build RPMs is what I'm suggesting
[00:27:39] <mst> though apparently the latest version -is- packaged given gordonfish just found it
[00:28:07] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi) (Read error: Connection reset by peer)
[00:29:07] <jaytee80> gordonfish: not the same distro. I may end up producing the same for rocky in this process.
[00:29:32] <mst> ohh right
[00:29:37] * mst hadn't checked that, sorry
[00:29:48] <mst> anyway, install it into a local::lib and then run it on itself :D
[00:29:56] <jaytee80> So I guess I can use cpan shell to find what deps cpantorpm needs, fulfill those with rpms (somehow) and then do a local install of cpantorpm itself.
[00:30:04] <gordonfish> Not familiar with Rocky (outside the movies and moose duo)
[00:30:06] <mst> jaytee80: no
[00:30:20] <mst> jaytee80: why are you completely ignoring the sensible approach :(
[00:30:43] <jaytee80> my powers of ignoration are great
[00:30:50] <jaytee80> vast
[00:31:24] <mst> jaytee80: setup local::lib, use App::cpanminus to install App::CPANtoRPM, then either just build the rpms you need, or use App::CPANtoRPM to build an App::CPANtoRPM rpm
[00:31:33] <mst> there is no need to piss around with manual dependency handling here at all
[00:32:01] <gordonfish> Oh, now I recall, rocky is one of the distros that rose up from the ashes of centos
[00:32:30] *** Joins: pucara (~i@host77.181-14-159.telecom.net.ar)
[00:32:31] <mst> jaytee80: all of that should be doable as a normal user in a scratch directory without ever touching the rest of the system at all
[00:32:39] <jaytee80> policy is all software on production host must be via rpms... so local cpan install stuff not allowed. I *could* but then I'd need yet another vm to build in and I'm trying to avoid that because it'll req corp it BS
[00:32:40] <mst> jaytee80: then you can move forwards however you see fit
[00:32:55] <gordonfish> jaytee80: https://altlinux.pkgs.org/sisyphus/autoimports-noarch/perl-App-CPANtoRPM-1.10-alt1.noarch.rpm.html tells you what it requires btw
[00:32:55] <Paperbot> Link title(s): [ perl-App-CPANtoRPM-1.10-alt1.noarch.rpm ALT Linux Sisyphus Download ]
[00:33:04] <mst> jaytee80: ... but if that's true, then you can't install App::CPANtoRPM at all in the first place
[00:33:21] <mst> jaytee80: you already have that problem, I'm just giving you a faster way to get to the point of not having that problem!
[00:33:27] <jaytee80> gordonfish: when IBM ruined centos the people that actually did things quit and started rocky to be what centos used to be. Same folks.
[00:33:27] <gordonfish> (Side note, Sisyphus is a name that is very easy to misread at first glance..)
[00:34:10] <mst> jaytee80: fundamentally, the policy will prevent you doing it the hard way as well as doing it the easy way, so you might as well do it the easy way once you've gotten around the policy problem
[00:36:10] <jaytee80> I guess I could try the local::lib thing and revert to snapshot after I have the cpantorpm rpm file. Then the host is pristine, and I'll have the thing installed via rpm
[00:36:58] <mst> well, I was assuming you'd just do 'rm -rf ~/perl5' but if you want to do a full snapshot thing to get the same result I don't see a problem with it
[00:37:17] <Grinnz> yes generally you do buildy things on build machines and the production host doesn't need it
[00:37:26] *** Quits: EGD (~egd@user/egd) ()
[00:37:39] <mst> apparently jaytee80 doesn't have a build server because his sysadmin sucks and IT would take forever to provide one
[00:37:47] <mst> so we're trying to work around this problem
[00:38:04] <mst> 'ordering a build VM so this never happens again' can wait for another day
[00:38:16] <jaytee80> I've got nazi IT and I'd need a new IP address that has internet access (gasp!).
[00:38:48] <Grinnz> so, what you can do about internet access is a carton bundle
[00:39:14] <Grinnz> assuming you can set up a machine *with* internet access with close enough to the same perl version and shared libraries
[00:39:36] <mst> jaytee80: maybe if I asked one of my jewish friends to publicly state that refusing to create build machines makes them happy it'd speed things up?
[00:40:41] <jaytee80> it literally couldn't get slower
[00:41:28] <mst> right, so, use my approach for now, put the request in, maybe you'll only have to use my approach the next twelve times before the build server arrives? :D
[00:42:12] <gordonfish> jaytee80: I don't see why you can't just use https://altlinux.pkgs.org/sisyphus/autoimports-noarch/perl-App-CPANtoRPM-1.10-alt1.noarch.rpm.html, it's an rpm, noarch (so no binary parts) and as far as I can tell, no requirements for any arch-specific packages. Seems to fullfill your requirements.
[00:42:13] <Paperbot> Link title(s): [ perl-App-CPANtoRPM-1.10-alt1.noarch.rpm ALT Linux Sisyphus Download ]
[00:42:45] <jaytee80> just cause it's noarch doesn't mean the perl stack is the same on every distro
[00:43:12] <gordonfish> Yeah but noarch implies it is pure perl (will double check that)
[00:43:42] <gordonfish> Yep, it is
[00:43:48] <mst> jaytee80: and?
[00:44:02] <gordonfish> So it should just run with any even semi modern perl
[00:44:13] <mst> jaytee80: pure perl code is not version dependent in that regard if you're on a non-ancient OS
[00:44:40] <gordonfish> (it has a runtime requires of "perl":"5.006")
[00:44:56] <mst> jaytee80: anyway, grinnz and I got red hat to unfuck their perl stack years back now, they're no longer incompatible with the rest of the world through sheer stupidity
[00:45:03] <mst> try and avoid imagining extra problems that don't exist - programming is hard enough when you only have to deal with the real ones.
[00:45:38] <Grinnz> you dont even need to be compatible with the rest of the world if you're just using rpms, as long as they declare their deps correctly
[00:45:40] <gordonfish> mst++ Grinnz++ # Thanks for all that work Re: RH
[00:45:54] <jaytee80> it installs a .pm file somewhere... distros disagree about PERL5LIB paths has been me experience, you could have pure perl, works with your version, and it gets installed in left field outside of the libpath your perl is actually going to search. 
[00:46:14] <Grinnz> so have you tried it yet?
[00:46:18] <mst> jaytee80: and you could still run it with 'perl -I' just fine until you rebuild a new rpm using it
[00:46:31] <gordonfish> jaytee80: That link I gave tells you where it puts things
[00:46:51] <mst> jaytee80: look, you're talking to people who actually work on the tools that handle all of this stuff. I don't know why you're insisting on arguing with the free expert help, but it's becoming quite frustrating now.
[00:48:05] <gordonfish> (the .pm installs to /usr/share/perl5/App/CPANtoRPM.pm which iirc is common to most RH and many debian based distros)
[00:48:11] <Grinnz> if you want to be sure, run perl '-V:installvendorlib' and we can tell you if it installs to the right place
[00:49:26] <jaytee80> well you asked why as a general policy I don't install rpms from foreign distros... that's why. Sure it may (almost certainly will in fact) work, but it's not going to be hard to avoid that if I use the local::lib thing you already suggested. Or are you saying cross distro rpm is now better than the local::lib method?
[00:49:29] * mst sighs
[00:49:50] <Grinnz> i don't think we asked that
[00:49:55] <mst> no, we asked why you were resisting this *specific* rpm that *we* had told you *would* work
[00:50:03] <mst> we understand why you wouldn't install cross distro stuff in general
[00:50:52] <Grinnz> it would certainly be much easier than using local::lib if it works
[00:51:02] *** Quits: choroba (~E_Choroba@89-101-243-80.cust.centrio.cz) (Quit: Leaving)
[00:51:06] <Grinnz> which i have now told you how to find out
[00:51:38] <jaytee80> ok... well it was 'cos I was gonna do that other thing you'd suggest before that, but I see it'd be easier than setting up local::lib.
[00:51:40] <_73> how do different operating systems control where they put perl stuff? I was thinking that they set a default PERL5LIB but at least my linux OS doesn't have that set to anything by default.
[00:51:49] <jaytee80> everyone happy now?
[00:52:13] <mst> _73: generally they patch the perl sources because vendors like being difficult
[00:52:33] <mst> well, no, there are 'sh Configure' time options that can handle all of that
[00:52:40] <mst> but some vendors patch things anyway because, well, difficult
[00:52:57] <_73> patching seems like the worst solution
[00:52:59] *** Quits: magla (~gelignite@55d4ee8d.access.ecotel.net) (Quit: Stay safe!)
[00:53:08] <Grinnz> _73: all sorts of variables set during Configure, see INSTALL in the source tarball
[00:53:11] <mst> _73: see: 'difficult'
[00:53:31] <_73> ok ill look at INSTALL
[00:53:48] <Grinnz> _73: there are three primary locations where perl looks for modules without even touching PERL5LIB
[00:53:52] <mst> jaytee80: I really don't mind which you do, it was the "arguing from ignorance with the people trying to help you" part that was irritating.
[00:53:56] <Grinnz> so they alter those to certain places
[00:54:25] <mst> jaytee80: not knowing how to tell if a particular foreign rpm is safe is fine. but if you don't know, it helps to listen to the people who do.
[00:55:45] <jaytee80> so if mst and grinnz have RH straightened out on where they installed stuff... then my to plan use the rocky/centos8 appstream packages if available first, if not build with cpantorpm should be ok? I'm just curious if stuff on appstream is good to go.
[00:56:10] <Grinnz> no idea
[00:56:15] <Grinnz> we're talking about a specific rpm
[00:56:21] <Grinnz> which says where it installs things
[00:56:25] <gordonfish> This particular rpm looks safe to me, all it is a snapshot of the installed module, which amounts to the .pm and some docs/exmaples and the /usr/bin/cpantorpm{,-depreq} scripts.
[00:56:35] <Grinnz> if you verify where things are supposed to be installed with the command i mentioned, then we can know
[00:57:14] <gordonfish> jaytee80: (Again it's all clearly listed in https://altlinux.pkgs.org/sisyphus/autoimports-noarch/perl-App-CPANtoRPM-1.10-alt1.noarch.rpm.html)
[00:57:14] <Paperbot> Link title(s): [ perl-App-CPANtoRPM-1.10-alt1.noarch.rpm ALT Linux Sisyphus Download ]
[00:57:36] <Grinnz> or if you're talkinga bout the centos packages... yeah of course they'd build those correctly
[00:57:46] <jaytee80> gordonfish: understood. Everybody likes that one.
[00:57:51] <Grinnz> the "straightening out" wasn't to do with their perl working with itself
[00:57:55] <Grinnz> it did that fine
[01:01:25] *** Quits: DarthGandalf (user@znc/developer/DarthGandalf) (*.net *.split)
[01:01:25] *** Quits: kraih (sid17075@mojo/destroy-all-humans/kraih) (*.net *.split)
[01:01:25] *** Quits: pwillard (sid136981@hampstead.irccloud.com) (*.net *.split)
[01:01:26] *** Quits: nrr_ (sid20938@lymington.irccloud.com) (*.net *.split)
[01:01:26] *** Quits: mjones (sid6844@helmsley.irccloud.com) (*.net *.split)
[01:01:26] *** Quits: skaji (sid178483@tinside.irccloud.com) (*.net *.split)
[01:01:26] *** Quits: ingy (~ingy@143.244.187.20) (*.net *.split)
[01:01:26] *** Quits: timlegge (~quassel@142.167.255.204) (*.net *.split)
[01:01:26] *** Quits: deecat (~deecat@73.99.215.70) (*.net *.split)
[01:01:26] *** Quits: nperez_ (~nperez@86-93-223-59.fixed.kpn.net) (*.net *.split)
[01:01:26] *** Quits: leosilva (~leosilva@canonical/leosilva) (*.net *.split)
[01:01:26] *** Quits: webstrand (~webstrand@user/webstrand) (*.net *.split)
[01:01:26] *** Quits: pervaya (~pervaya@ip250.ip-51-83-183.eu) (*.net *.split)
[01:01:26] *** Quits: dngor (abuse@104-136-128-018.biz.spectrum.com) (*.net *.split)
[01:01:26] *** Quits: _quaddamage (~quaddamag@222.87.206.35.bc.googleusercontent.com) (*.net *.split)
[01:01:26] *** Quits: nicomen (~nicolas@178.124.223.35.bc.googleusercontent.com) (*.net *.split)
[01:01:26] *** Quits: GnuYawk (~GnuYawk@user/gnuyawk) (*.net *.split)
[01:01:26] *** Quits: Skarn (~skarn@user/skarn) (*.net *.split)
[01:01:26] *** Quits: karjala (sid176588@lymington.irccloud.com) (*.net *.split)
[01:01:26] *** Quits: odc (sid197788@helmsley.irccloud.com) (*.net *.split)
[01:01:26] *** Quits: boubou (~boubou@hide.my.ip.upsidehosting.com) (*.net *.split)
[01:01:26] *** Quits: phenom (~primus@user/phenom) (*.net *.split)
[01:01:26] *** Quits: rfi (~rfi@216.70.102.172) (*.net *.split)
[01:01:26] *** Quits: leont (sid489095@uxbridge.irccloud.com) (*.net *.split)
[01:01:26] *** Quits: clscott (~clscott@bras-base-otwaon0150w-grc-07-184-147-147-88.dsl.bell.ca) (*.net *.split)
[01:01:26] *** Quits: Kassandry (~Kassandry@kassandry.net) (*.net *.split)
[01:01:26] *** Quits: alh (~alh@hiddenrealms.org) (*.net *.split)
[01:01:26] *** Quits: dotandimet (~dotandime@evomr2.evogene.com) (*.net *.split)
[01:01:26] *** Quits: jercos (jercos@xyl.be) (*.net *.split)
[01:01:26] *** Quits: salparadise (~salparadi@129.146.17.140) (*.net *.split)
[01:01:26] *** Quits: Kobaz (~libera@its.kobaz.net) (*.net *.split)
[01:01:33] *** Joins: jercos (~sage@xyl.be)
[01:01:34] *** Joins: karjala (sid176588@id-176588.lymington.irccloud.com)
[01:01:34] *** Joins: Kassandry (~Kassandry@kassandry.net)
[01:01:36] *** Joins: rfi (~rfi@216.70.102.172)
[01:01:38] *** Joins: nicomen (~nicolas@178.124.223.35.bc.googleusercontent.com)
[01:01:48] *** Joins: clscott (~clscott@bras-base-otwaon0150w-grc-07-184-147-147-88.dsl.bell.ca)
[01:01:48] *** Joins: deecat (~deecat@73.99.215.70)
[01:01:52] *** Joins: skaji (sid178483@id-178483.tinside.irccloud.com)
[01:01:52] *** Joins: salparadise (~salparadi@129.146.17.140)
[01:01:54] *** Joins: dngor (abuse@104-136-128-018.biz.spectrum.com)
[01:02:26] *** Joins: mjones (sid6844@id-6844.helmsley.irccloud.com)
[01:02:27] *** Joins: Kobaz (~libera@its.kobaz.net)
[01:02:28] *** Joins: odc (sid197788@id-197788.helmsley.irccloud.com)
[01:02:31] *** Joins: leont (sid489095@id-489095.uxbridge.irccloud.com)
[01:02:39] *** Joins: kraih (sid17075@id-17075.tinside.irccloud.com)
[01:02:39] *** Joins: pwillard (sid136981@id-136981.hampstead.irccloud.com)
[01:02:41] *** Joins: dotandimet (~dotandime@evomr2.evogene.com)
[01:02:48] *** Joins: nrr_ (sid20938@id-20938.lymington.irccloud.com)
[01:02:49] *** Quits: kraih (sid17075@id-17075.tinside.irccloud.com) (Changing host)
[01:02:49] *** Joins: kraih (sid17075@mojo/destroy-all-humans/kraih)
[01:03:20] *** Joins: phenom (~primus@user/phenom)
[01:03:27] *** Joins: alh (~alh@hiddenrealms.org)
[01:03:32] *** Joins: DarthGandalf (user@znc/developer/DarthGandalf)
[01:03:32] *** Joins: pervaya (~pervaya@2001:41d0:602:3007::641b:b74c)
[01:03:34] *** Joins: leosilva (~leosilva@canonical/leosilva)
[01:03:34] *** Joins: nperez (~nperez@86-93-223-59.fixed.kpn.net)
[01:03:36] *** Joins: timlegge (~quassel@142.167.255.204)
[01:03:45] *** Joins: webstrand (~webstrand@user/webstrand)
[01:04:01] *** Joins: ingy (~ingy@143.244.187.20)
[01:04:20] <cjac> ingy!
[01:06:42] *** Joins: _quaddamage (~quaddamag@222.87.206.35.bc.googleusercontent.com)
[01:08:25] *** Joins: Skarn (~skarn@user/skarn)
[01:20:35] *** Quits: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de) (Quit: Leaving.)
[01:31:42] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 260 seconds)
[01:32:40] *** Joins: ns21 (~ns1@user/ns21)
[01:36:53] * GumbyPAN CPAN Upload: Test-JSON-Schema-Acceptance-1.013 by ETHER https://metacpan.org/release/ETHER/Test-JSON-Schema-Acceptance-1.013
[01:37:42] *** Quits: jaytee80 (~jaytee80@fw.bmd.cpii.com) (Quit: Client closed)
[01:39:10] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Ping timeout: 260 seconds)
[01:40:42] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[01:41:54] * GumbyPAN CPAN Upload: JSON-Schema-Tiny-0.011 by ETHER https://metacpan.org/release/ETHER/JSON-Schema-Tiny-0.011
[01:45:23] *** Joins: jaytee80 (~jaytee80@fw.bmd.cpii.com)
[01:48:58] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Ping timeout: 260 seconds)
[01:50:22] <gordonfish> Gotta love it when someone uses U+241E as a record separator..
[01:53:50] <xenu> perlbot: utf8 U+241E
[01:53:50] <perlbot> xenu: U+241E (e2 90 9e): SYMBOL FOR RECORD SEPARATOR [␞] 
[01:56:00] <Grinnz> using codepoints for their intended purpose, the horror
[01:56:04] <gordonfish> Yeah it's what is used by some text fields to visualize U+001E (e.g., it does so for me in IRC chat windows, like in the perlbot output above.)
[01:56:22] <Grinnz> oh, they're using the *symbol*?
[01:56:34] <gordonfish> Yes, U+241E instead of U+001E
[01:57:15] <Grinnz> gonna write a protocol that uses SYMBOL FOR NEWLINE to delimit lines
[01:57:27] <gordonfish> Genius!
[01:58:45] <gordonfish> Actually that would be interesting. Wouldn't have to worry if it's CRLF or LF or ..., just U+2424
[02:00:25] <Grinnz> for that you use U+0085 NEXT LINE
[02:00:58] <Grinnz> (which i have to assume was intended to replace CRLF, but)
[02:01:56] * GumbyPAN CPAN Upload: JSON-Schema-Modern-0.522 by ETHER https://metacpan.org/release/ETHER/JSON-Schema-Modern-0.522
[02:01:58] <Grinnz> https://xkcd.com/927/
[02:01:58] <Paperbot> Link title(s): [ xkcd: Standards ]
[02:09:05] <gordonfish> Grinnz: Or just CR, as that's what "next line" feels to me
[02:09:16] <gordonfish> err wait
[02:09:29] <Grinnz> CR literally means to return the carriage of the typewriter to the left side
[02:09:44] <gordonfish> Yes yes I was thinking of LF but CR came out
[02:09:51] <Grinnz> LF means to feed a line but not move the carriage
[02:10:20] <Grinnz> which hasn't meant anything since we stopped using typewriters, but
[02:10:27] <gordonfish> Yes that's what 'next line' kind of sounds like, go to the next line (from where you are)
[02:11:08] <Grinnz> next line means to start the next line, without consideration for how typewriters physically work
[02:11:11] <gordonfish> typewriters also gave us QWERTY and similar arrangements
[02:11:30] <gordonfish> Grinnz: Yeah that makes sense too
[02:12:09] <gordonfish> What never made sense to me is pre-OSX macos using CR as a NL
[02:12:30] <Grinnz> gotta be special somehow
[02:12:43] <gordonfish> (So back in the 90s, possible common EOLs were \n, \r\n, and \r, fun fun fun
[02:12:55] <Grinnz> and that's why \R exists
[02:13:11] <gordonfish> Yep
[02:13:12] <Grinnz> so you can match \r, but \r\n won't match the \r or \n individually
[02:14:02] <Grinnz> i phrased that badly, but whatever
[02:14:04] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[02:14:34] <gordonfish> sweval: $_ = "foo\nbar\r\nbaz\rqux\n"; [ /\R/g ]; # Yes thank the perl gods for \R
[02:14:36] <perlbot> gordonfish: ["\n","\r\n","\r","\n"]
[02:16:35] <gordonfish> I've used \R on a file that for some reason had such a mismash of EOLs (it was a long semi-human-readable data file going back to 1995 that a client had that was passed around through various set ups over the eons.) \R worked perfectly to parse the data and put it in a proper database with uniform EOLs.
[02:17:19] <mst> \R, the "fuck this, time for the BIG hammer" of EOL parsing
[02:18:05] <Grinnz> unfortunately, not very useful in a data stream where you may or may not get the \r and \n in separate packets
[02:19:26] <gordonfish> As long as you know there should be \r\n, you cna keep reading 'til you get it (or timeout/etc after a reasonable time.)
[02:19:41] <mst> while ($buf =~ s/(.*?\R)(?:[^\r\n])//) {
[02:21:29] <gordonfish> mst: Yep that's the style I like most, especially since I've gotten into using async
[02:21:46] <mst> gah, that should've been (?=
[02:22:10] <mst> the point was the lookahead to ensure you'd gone one character -past- the EOL so \r and \n in separate packets wouldn't screw you
[02:22:16] <mst> cos Grinnz is otherwise right about that one
[02:22:18] * Grinnz still needs to fix the docs to stop implying \n is magical
[02:22:52] <mst> but it is, when you print it out the terminal does a carriage return -for- you these days
[02:23:07] <mst> otherwise the typewriter head would fuck off past the right hand side of the screen and never be seen again
[02:23:51] <Grinnz> not the implication i'm worried about :P
[02:24:50] <mst> sure, but you gotta keep your sense of wonder going
[02:25:05] <mst> makes room to be sufficiently cynical about everything else about software without accidentally going sane
[02:25:21] *** Joins: Shells (~michelle@203.206.128.220)
[02:25:54] <gordonfish> mst: Yeah nice code. Though if I knew for certain the EOL was only supposed to be \r\n, I might just match that directly, but I like your solution as a catch-all-incase-someone-does-something-different.
[02:26:11] *** Quits: Michelle (~michelle@2407:8800:bc20:200a:3dac:b23a:1c49:cd58) (Ping timeout: 264 seconds)
[02:26:39] <mst> gordonfish: well, yes, it was a reaction to grinnz marrying two pathological cases together and nerd sniping me
[02:32:50] *** Quits: pizdets (~pizdets@183.182.115.246) (Ping timeout: 260 seconds)
[02:33:46] *** Joins: pizdets (~pizdets@183.182.114.206)
[02:40:06] * gordonfish tries to remember why sockets traditionally use \r\n...
[02:43:25] <Grinnz> because DOS
[02:43:41] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[02:47:11] *** Shells is now known as Michelle
[02:53:42] <xenu> Grinnz: that convention predates DOS
[02:53:43] <xenu> https://www.rfc-editor.org/old/EOLstory.txt
[02:54:32] <Grinnz> nice
[02:56:25] <leont> Yeah, what xenu said
[02:56:48] <aquanight> 16:49:40/B37F1 < mst> while ($buf =~ s/(.*?\R)(?:[^\r\n])//) { <- the problem there is that in "live" protocols (like IRC), you're always a line behind the action
[02:57:33] <aquanight> simpler solution is to skip leading \R
[02:59:17] <aquanight> while ($buf =~ s/^\R+(.*?)\R+//) # bonus points the newlines are pre-chomped
[02:59:34] <aquanight> while ($buf =~ s/^\R*(.*?)\R+//) # bonus points the newlines are pre-chomped
[03:00:10] <Grinnz> the point was to not match cut-off \r
[03:00:36] <Grinnz> while including the line endings in the line
[03:02:14] *** Quits: Pali (~pali@user/pali) (Ping timeout: 260 seconds)
[03:03:18] <gordonfish> aquanight: (Side question, what is B37F1 next to your timestamp?)
[03:04:15] <aquanight> gordonfish: approximately, sprintf "%05X", (time since midnight / 86400) * 0xFFFFF
[03:04:46] <gordonfish> Curious..
[03:04:50] <MikeGeorge[m]> Can't you just assume that if you hit \r or \n it's a newline, and if you get a \n right after a \r don't count it?
[03:05:03] <MikeGeorge[m]> No look-ahead needed.
[03:05:38] <Grinnz> no
[03:05:53] <Grinnz> if you could make assumptions like that, this wouldn't be a common problem
[03:06:46] <mst> MikeGeorge[m]: the example was async code testing for arrived lines after a new packet has been appended to a buffer
[03:07:12] <aquanight> sweval: use Time::HiRes; my ($t, $f) = Time::HiRes::gettimeofday(); my @t = localtime($t); my $s = $l[0] + $l[1] * 60  + $l[2] * 3600 + $f/1_000_000; sprintf "%05X", ($s*0x100000)/86400;
[03:07:14] <perlbot> aquanight: ERROR: Global symbol "@l" requires explicit package name (did you forget to declare "my @l"?) at (IRC) line 1. Global symbol "@l" requires explicit package name (did you forget to declare "my @l"?) at (IRC) line 1. Global symbol "@l" requires explicit package name (did you forget to declare "my @l"?) at (IRC) line 1. 
[03:07:18] <mst> MikeGeorge[m]: you're now talking about having a completely separate extra piece of state that needs to be kept in sync with the buffer processing and requires a test of that flag and then a test for a leading \n every time
[03:07:21] <aquanight> sweval: use Time::HiRes; my ($t, $f) = Time::HiRes::gettimeofday(); my @l = localtime($t); my $s = $l[0] + $l[1] * 60  + $l[2] * 3600 + $f/1_000_000; sprintf "%05X", ($s*0x100000)/86400;
[03:07:22] <perlbot> aquanight: 5BF9B
[03:07:40] <mst> MikeGeorge[m]: that's way more complicated and easy to fuck up than my lookahead solution
[03:08:02] <MikeGeorge[m]> So, it technically works but is worse than the original problem?
[03:08:19] <Grinnz> most of these solutions technically work in some subset of the problem space
[03:08:33] <Grinnz> different instances have slightly different problems, though
[03:08:33] <mst> MikeGeorge[m]: you -could- do it, yes, but it very definitely isn't "just" :P
[03:08:49] <MikeGeorge[m]> Fair enough.
[03:09:07] <mst> the point here was to not have to write a whole finite state machine to make things work
[03:09:11] <Grinnz> like, most of the time you will only care about \r\n specifically in async protocols
[03:09:23] <gordonfish> sweval: sprintf "%05X", ((16*3600)+(49*60)+40)/86400 * 0xFFFFF; # "16:49:40/B37F1" aquanight, off by one for some reason, rounding I assume.
[03:09:25] <perlbot> gordonfish: B37F0
[03:09:31] <Grinnz> or rather, in protocols you would be using on a socket
[03:09:34] <mst> right, this is not a situation I expect to be in in practice
[03:09:45] <mst> but it was an interesting exercise solving it a *simple* way
[03:10:05] <Grinnz> the \R crap is more useful for screwed up files
[03:10:08] <mst> indeed
[03:10:11] <gordonfish> aquanight: Ah I see above
[03:10:29] <MikeGeorge[m]> Is this why IO::Socket::SSL doesn't give me a nice way to do non-blocking reads?
[03:10:46] <Grinnz> unlikely
[03:10:59] <mst> IO::Async and Mojo both handle non blocking SSL just fine
[03:11:10] <Grinnz> i wouldn't say just fine
[03:11:14] <Grinnz> but... eventually fine
[03:11:20] <mst> well, in the sense that I can mostly not think about it
[03:11:45] <Grinnz> but anyway, just use https://metacpan.org/pod/IO::Async::SSL
[03:11:45] <Paperbot> Link title(s): [ IO::Async::SSL - use SSL/TLS with IO::Async - metacpan.org ]
[03:11:56] <Grinnz> (if you're not already using something higher level)
[03:12:07] <mst> my point here is once you're doing non-blocking, you're inherently trying to be async, so IO::Socket::SSL providing a 'nice' way is basically impossible anyway because you're already deliberately choosing to abandon 'nice' by trying to do non-blocking without proper tools
[03:12:24] *** Joins: _73` (~user@pool-96-233-64-53.bstnma.fios.verizon.net)
[03:12:53] *** Parts: _73` (~user@pool-96-233-64-53.bstnma.fios.verizon.net) ()
[03:12:54] <Grinnz> yeah, i just remember SSL being specifically weird about things
[03:13:24] <Grinnz> but luckily i have also never had to do it myself
[03:13:51] *** Quits: _73 (~user@pool-96-233-64-53.bstnma.fios.verizon.net) (Ping timeout: 245 seconds)
[03:15:45] <MikeGeorge[m]> Hmm, objects.  I've heard of those.
[03:18:13] <gordonfish> Take this object, but beware, it carries a terrible curse
[03:18:36] <gordonfish> (But it comes with a free frogurt!)
[03:21:47] <MikeGeorge[m]> This looks like one of those things that's very powerful and undoubtedly well thought-out, but requires a lot more knowledge and technique than I currently have at my disposal.
[03:25:10] <MikeGeorge[m]> I just want my program to be able to occasionally check and say "Hey, is there any text up to and including a newline waiting on this socket?  No?  Okay, I'll check again later."
[03:27:05] * GumbyPAN CPAN Upload: Locale-SubCountry-2.07 by KIMRYAN https://metacpan.org/release/KIMRYAN/Locale-SubCountry-2.07
[03:27:19] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[03:27:24] <Grinnz> like i said, that often requires \r\n and anything else would be invalid, so you just do https://metacpan.org/pod/IO::Async::Stream#A-line-based-on_read-method
[03:27:24] <Paperbot> Link title(s): [ IO::Async::Stream - event callbacks and write bufering for a stream filehandle - metacpan.org ]
[03:28:02] <Grinnz> if it doesn't, then you get some fun
[03:29:46] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 260 seconds)
[03:31:31] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[03:33:00] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Remote host closed the connection)
[03:42:55] <aquanight> gordonfish: the full deal is this guy: https://github.com/aquanight/codejunk/blob/master/perl/irssi/hextimestamp.pl # admittedly the formatting loop was one I wrote a long time ago when I didn't trust floating point math as much as I do now
[03:42:56] <Paperbot> Link title(s): [ codejunk/hextimestamp.pl at master · aquanight/codejunk · GitHub ]
[03:43:53] <aquanight> these days now that I actually understand how IEEE 754 works, I'd have had no problem just doing * 0x100000 / 86400
[03:44:49] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[03:45:23] <aquanight> you can tell how old it is from the first line
[03:45:27] <aquanight> use 5.16.0;
[03:57:08] * GumbyPAN CPAN Upload: Form-Tiny-2.03 by BRTASTIC https://metacpan.org/release/BRTASTIC/Form-Tiny-2.03
[04:09:52] *** Joins: proller (~p@80.240.216.69)
[04:09:56] *** Joins: willthechill (~willthech@2600:1700:8c61:3ed0:d8ea:14a9:7ac1:bc4e)
[04:30:40] <gordonfish> aquanight: I see
[04:32:27] <aquanight> heck if I could tell you why I wanted it when I did
[04:32:50] <aquanight> but it's accidentally had the side effect of being a useful key to use for /scrollback quote
[04:38:15] *** Joins: Moonlight (~Moonlight@64.253.17.182)
[04:44:07] *** Quits: jabberwok (~wlindley@75.105.20.104) (Quit: Leaving.)
[04:45:32] *** Joins: jabberwok (~wlindley@75.105.20.104)
[04:49:34] *** Quits: Su-Shee (~Susanne@p4ff49ab8.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[04:51:08] *** Joins: Su-Shee (~Susanne@p4ff493ae.dip0.t-ipconnect.de)
[04:58:36] *** Quits: Su-Shee (~Susanne@p4ff493ae.dip0.t-ipconnect.de) (Ping timeout: 244 seconds)
[05:00:18] *** Joins: Su-Shee (~Susanne@p4ff49256.dip0.t-ipconnect.de)
[05:02:34] <genio> crap. rebuilt my machine and seem to have misplaced lots of effort on the strawberry build 
[05:02:44] * genio is an idiot
[05:07:06] *** Quits: gce108 (~gce@user/gce108) (Ping timeout: 258 seconds)
[05:21:10] *** Quits: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi) (Quit: C-x C-c)
[05:23:10] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 260 seconds)
[05:26:40] *** Quits: whynot (~whynot@88.155.115.188) (Quit: leaving)
[05:31:44] *** Joins: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi)
[05:32:09] *** Quits: llh (~llh@user/llh) (Quit: :::: ( UPP ) ::::)
[05:36:20] * GumbyPAN CPAN Upload: App-ansifold-1.12 by UTASHIRO https://metacpan.org/release/UTASHIRO/App-ansifold-1.12
[05:41:17] *** Quits: casaca (~casaca@user/casaca) (Ping timeout: 246 seconds)
[05:41:31] *** Joins: casaca (~casaca@user/casaca)
[05:44:59] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[05:49:30] *** Quits: skaji (sid178483@id-178483.tinside.irccloud.com) (Ping timeout: 260 seconds)
[05:49:36] *** Quits: kraih (sid17075@mojo/destroy-all-humans/kraih) (Read error: Connection reset by peer)
[05:49:41] *** Quits: mjones (sid6844@id-6844.helmsley.irccloud.com) (Ping timeout: 245 seconds)
[05:49:41] *** Quits: karjala (sid176588@id-176588.lymington.irccloud.com) (Ping timeout: 245 seconds)
[05:49:41] *** Quits: odc (sid197788@id-197788.helmsley.irccloud.com) (Read error: Connection reset by peer)
[05:49:50] *** Joins: karjala (sid176588@id-176588.lymington.irccloud.com)
[05:49:51] *** Joins: skaji (sid178483@tinside.irccloud.com)
[05:50:02] *** Joins: mjones (sid6844@helmsley.irccloud.com)
[05:50:06] *** Quits: pwillard (sid136981@id-136981.hampstead.irccloud.com) (Ping timeout: 245 seconds)
[05:50:06] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[05:50:13] *** Quits: mjgardner (sid182628@ilkley.irccloud.com) (Read error: Connection reset by peer)
[05:50:31] *** Quits: stephen87 (sid33834@user/stephen87) (Read error: Connection reset by peer)
[05:50:31] *** Quits: neilb___ (sid492745@ilkley.irccloud.com) (Read error: Connection reset by peer)
[05:50:31] *** Quits: genio (sid223130@ilkley.irccloud.com) (Read error: Connection reset by peer)
[05:50:50] *** Quits: patterner_ (sid212303@ilkley.irccloud.com) (Read error: Connection reset by peer)
[05:51:02] *** Quits: timeless (sid4015@ilkley.irccloud.com) (Read error: Connection reset by peer)
[05:51:04] *** Quits: itok_ (sid418430@ilkley.irccloud.com) (Read error: Connection reset by peer)
[05:51:08] *** Joins: kraih (sid17075@mojo/destroy-all-humans/kraih)
[05:51:17] *** Joins: odc (sid197788@helmsley.irccloud.com)
[05:52:26] *** Joins: mjgardner (sid182628@id-182628.ilkley.irccloud.com)
[05:52:40] *** Joins: neilb___ (sid492745@id-492745.ilkley.irccloud.com)
[05:52:47] *** Joins: genio (sid223130@id-223130.ilkley.irccloud.com)
[05:52:49] *** Joins: stephen87 (sid33834@user/stephen87)
[05:52:56] *** Joins: timeless (sid4015@ilkley.irccloud.com)
[05:53:06] *** Joins: patterner_ (sid212303@id-212303.ilkley.irccloud.com)
[05:53:07] *** Joins: pwillard (sid136981@id-136981.hampstead.irccloud.com)
[05:53:20] *** Joins: itok_ (sid418430@id-418430.ilkley.irccloud.com)
[05:53:31] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Quit: wsl update)
[05:54:28] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[06:00:36] *** Quits: Moonlight (~Moonlight@64.253.17.182) (Ping timeout: 244 seconds)
[06:00:59] *** Quits: genio (sid223130@id-223130.ilkley.irccloud.com) (Ping timeout: 264 seconds)
[06:01:10] *** Quits: stephen87 (sid33834@user/stephen87) (Ping timeout: 252 seconds)
[06:01:32] *** Quits: leont (sid489095@id-489095.uxbridge.irccloud.com) (Ping timeout: 258 seconds)
[06:01:55] *** Quits: pwillard (sid136981@id-136981.hampstead.irccloud.com) (Ping timeout: 258 seconds)
[06:02:11] *** Quits: karjala (sid176588@id-176588.lymington.irccloud.com) (Ping timeout: 264 seconds)
[06:02:18] *** Quits: mjgardner (sid182628@id-182628.ilkley.irccloud.com) (Ping timeout: 258 seconds)
[06:02:20] *** Quits: nrr_ (sid20938@id-20938.lymington.irccloud.com) (Ping timeout: 260 seconds)
[06:02:36] *** Joins: leont (sid489095@uxbridge.irccloud.com)
[06:02:37] *** Joins: pwillard (sid136981@hampstead.irccloud.com)
[06:02:41] *** Quits: itok_ (sid418430@id-418430.ilkley.irccloud.com) (Ping timeout: 258 seconds)
[06:02:41] *** Quits: patterner_ (sid212303@id-212303.ilkley.irccloud.com) (Ping timeout: 258 seconds)
[06:02:47] *** Quits: neilb___ (sid492745@id-492745.ilkley.irccloud.com) (Ping timeout: 264 seconds)
[06:02:56] *** Joins: patterner_ (sid212303@ilkley.irccloud.com)
[06:03:53] *** Joins: nrr_ (sid20938@lymington.irccloud.com)
[06:03:55] *** Joins: karjala (sid176588@lymington.irccloud.com)
[06:05:16] *** Joins: stephen87 (sid33834@user/stephen87)
[06:05:23] *** Joins: genio (sid223130@ilkley.irccloud.com)
[06:06:55] *** Joins: mjgardner (sid182628@ilkley.irccloud.com)
[06:08:30] *** Joins: neilb___ (sid492745@ilkley.irccloud.com)
[06:10:16] *** Quits: ns21 (~ns1@user/ns21) (Quit: Leaving.)
[06:11:32] *** Joins: tg (~tg@rockylinux/infra/tg)
[06:13:25] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 260 seconds)
[06:14:34] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 258 seconds)
[06:14:51] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:17:49] *** Joins: itok_ (sid418430@ilkley.irccloud.com)
[06:31:26] * GumbyPAN CPAN Upload: CBOR-XS-1.85 by MLEHMANN https://metacpan.org/release/MLEHMANN/CBOR-XS-1.85
[06:37:20] *** Quits: kevin-oculus (~tomys@c188-149-14-10.bredband.tele2.se) (Ping timeout: 260 seconds)
[06:49:30] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 260 seconds)
[06:52:41] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! 👋)
[07:01:08] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[07:04:32] *** Joins: Martchus (~martchus@2a01:c23:c056:2900:d250:99ff:fe49:3cce)
[07:05:55] *** Quits: Martchus_ (~martchus@2a01:c22:77b2:d800:d250:99ff:fe49:3cce) (Ping timeout: 260 seconds)
[07:06:30] * GumbyPAN CPAN Upload: WebSocket-v0.1.4 by JDEGUEST https://metacpan.org/release/JDEGUEST/WebSocket-v0.1.4
[07:12:22] *** Joins: jetchisel (jetchisel@user/jetchisel)
[07:21:10] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[07:27:10] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[07:28:15] *** Joins: llh (~llh@user/llh)
[07:45:16] *** Quits: jabberwok (~wlindley@75.105.20.104) (Quit: Leaving.)
[07:49:15] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 258 seconds)
[08:13:18] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:40:23] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[08:48:23] *** Quits: willthechill (~willthech@2600:1700:8c61:3ed0:d8ea:14a9:7ac1:bc4e) (Ping timeout: 264 seconds)
[08:59:48] *** Quits: alex11 (~alex11@user/alex11) (Quit: Leaving)
[09:05:20] *** Quits: bn_work (uid268505@uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[10:04:44] *** Joins: EGD (~egd@user/egd)
[10:08:19] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Remote host closed the connection)
[10:19:37] *** Quits: Paladin (~paladin@S0106c0eae42a785d.vc.shawcable.net) (Remote host closed the connection)
[10:21:54] *** Joins: Paladin (~paladin@S0106c0eae42a785d.vc.shawcable.net)
[10:22:57] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[10:37:07] *** Joins: tobybl (~tobybl@213.31.135.91)
[10:38:42] *** Joins: kevin-oculus (~tomys@c188-149-14-10.bredband.tele2.se)
[11:06:57] * GumbyPAN CPAN Upload: X11-XCB-0.19 by MSTPLBG https://metacpan.org/release/MSTPLBG/X11-XCB-0.19
[11:21:59] * GumbyPAN CPAN Upload: HTTP-Request-FromCurl-0.33 by CORION https://metacpan.org/release/CORION/HTTP-Request-FromCurl-0.33
[11:27:03] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[11:31:28] *** Joins: Manderson_ (manderson@gateway/vpn/protonvpn/manderson)
[11:34:05] *** Joins: Lemniscate (~sauvin@about/linux/staff/sauvin)
[11:34:15] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Ping timeout: 260 seconds)
[11:37:26] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Ping timeout: 260 seconds)
[11:53:26] *** Quits: gamo (~Thunderbi@cm-93-156-61-102.telecable.es) (Ping timeout: 258 seconds)
[12:02:30] *** Quits: asdflkj_sh (asdflkj@user/asdflkj-sh/x-6013523) (Ping timeout: 265 seconds)
[12:13:00] *** Joins: tobybl_ (~tobybl@213.31.135.91)
[12:14:09] *** Quits: tobybl_ (~tobybl@213.31.135.91) (Remote host closed the connection)
[12:15:12] *** Quits: tobybl (~tobybl@213.31.135.91) (Ping timeout: 244 seconds)
[12:20:03] *** Quits: andinus (andinus@tilde.institute) (Remote host closed the connection)
[12:21:56] *** Joins: Pali (~pali@user/pali)
[12:22:12] *** Joins: tobybl (~tobybl@213.31.135.91)
[12:26:42] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[12:27:17] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[12:31:01] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[12:31:40] *** Quits: EGD (~egd@user/egd) ()
[12:33:11] *** Joins: furrymcgee (~devuan@cgn-89-1-210-103.nc.de)
[13:08:21] *** Quits: pucara (~i@host77.181-14-159.telecom.net.ar) (Quit: Lost terminal)
[13:12:46] *** Quits: tobybl (~tobybl@213.31.135.91) (Remote host closed the connection)
[13:18:06] *** Joins: jabberwok (~wlindley@75.105.20.104)
[13:20:31] *** Quits: Martchus (~martchus@2a01:c23:c056:2900:d250:99ff:fe49:3cce) (Ping timeout: 245 seconds)
[13:22:09] *** Joins: Martchus (~martchus@dynamic-095-117-119-085.95.117.pool.telefonica.de)
[13:30:16] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[13:31:01] *** Joins: csrf (~csrf@user/csrf)
[13:50:59] *** Joins: art1 (~romeyke@p200300ccdf279800ceb96cd4fd4a3a88.dip0.t-ipconnect.de)
[13:52:16] * GumbyPAN CPAN Upload: Archive-BagIt-0.082-TRIAL by ART https://metacpan.org/release/ART/Archive-BagIt-0.082-TRIAL
[14:12:24] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[14:26:20] * GumbyPAN CPAN Upload: WebSocket-v0.1.5 by JDEGUEST https://metacpan.org/release/JDEGUEST/WebSocket-v0.1.5
[14:36:14] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[14:39:30] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Quit: WeeChat 3.3)
[14:40:22] *** Quits: X-Scale (~ARM@83.223.233.104) (Ping timeout: 260 seconds)
[14:49:00] *** Joins: tobybl (~tobybl@213.31.135.91)
[14:57:34] *** Joins: proller (~p@80.240.216.69)
[15:00:16] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[15:37:25] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[15:38:03] *** Joins: tejr (~tejr@user/tejr)
[15:39:35] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[15:41:29] * GumbyPAN CPAN Upload: URPM-v5.125 by TVIGNAUD https://metacpan.org/release/TVIGNAUD/URPM-v5.125
[15:43:00] *** Joins: tejr (~tejr@user/tejr)
[15:48:46] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[15:55:40] *** Quits: Darkcoal (~user@51.158.144.31) (Quit: Darkcoal)
[16:06:31] * GumbyPAN CPAN Upload: urpmi-v8.126.1 by TVIGNAUD https://metacpan.org/release/TVIGNAUD/urpmi-v8.126.1
[16:08:11] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 264 seconds)
[16:13:26] *** Quits: tobybl (~tobybl@213.31.135.91) (Remote host closed the connection)
[16:21:33] *** Quits: Adura (~Adura@user/adura) (Quit: Quit)
[16:28:36] *** Joins: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt)
[16:33:16] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Quit:  HydraIRC -> http://www.hydrairc.com <- Nine out of ten l33t h4x0rz prefer it)
[16:39:16] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Ping timeout: 245 seconds)
[16:41:04] *** Joins: _73 (~user@pool-96-233-64-53.bstnma.fios.verizon.net)
[16:51:42] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[16:58:55] <_73> I am having trouble fatpacking my program with App::FatPacker. I am able to reproduce the problem by installing a random pure perl module witch cpanminus (Array::Utils), I then fatpack a program that uses the module, and am able to run the fatpacked script successfully. I then uninstall the module and try to run the fatpacked script again and it fails with `Can't locate Array/Utils.pm in @INC`. Here is what I did:
[16:58:56] <_73> http://dpaste.com/ASDJ5ZMUA
[16:58:56] <Paperbot> Link title(s): [ dpaste: fatpack session ]
[16:59:22] <_73> s/witch/with
[17:02:47] *** Joins: gamo (~Thunderbi@cm-93-156-61-102.telecable.es)
[17:03:55] <rindolf> _73: hi, can you pastesite scratch.pack.pl, please?
[17:04:40] <_73> http://dpaste.com/7FK6JXA4N
[17:04:41] <Paperbot> Link title(s): [ dpaste: scratch.pack.pl ]
[17:07:21] <El_Che> hij was aan het horen bij het linux team¢
[17:07:21] *** Quits: diskin (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[17:07:24] <El_Che> oops
[17:07:58] <rindolf> _73: perhaps it is https://metacpan.org/pod/App::FatPacker#CAVEATS
[17:07:59] <Paperbot> Link title(s): [ App::FatPacker - pack your dependencies onto your script file - metacpan.org ]
[17:09:05] *** Joins: diskin (~diskin@5.139.111.48)
[17:10:25] <_73> rindolf: In my output of uninstalling Array::Utils there is a line `Unlink: /usr/lib/perl5/site_perl/auto/Array/Utils/.packlist`. Wouldn't this mean that the module can be fatpacked because it has a .packlist file?
[17:10:43] <Grinnz> yes, and it's pure perl
[17:11:14] <Grinnz> it's not getting packed though, try the step by step method listed in the docs, and if needed pass --use=Array::Utils to the trace step
[17:19:09] <_73> I tried doing the step by step method both with and without the --use=Array::Utils flag. I get identical results to the original problem.
[17:19:28] *** Joins: alex11 (~alex11@user/alex11)
[17:19:45] <_73> the .trace file has two lines being `Exporter.pm` and `Array/Utils.pm` respectively
[17:20:40] *** Joins: andinus (andinus@tilde.institute)
[17:21:41] * GumbyPAN CPAN Upload: Web-Solid-Auth-0.91 by HOCHSTEN https://metacpan.org/release/HOCHSTEN/Web-Solid-Auth-0.91
[17:23:15] *** Joins: EGD (~egd@user/egd)
[17:28:42] <Grinnz> check each successive step: does the packlists file contain the Array-Utils packlist? does the Array-Utils packlist point to files that exist?
[17:29:13] <Grinnz> if it succeeds you should see an Array/Utils.pm entry in the packed file
[17:30:58] <simcop2387> this is what a correct file will look like, https://perl.bot/p/dknyaz
[17:30:59] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[17:32:29] <_73> It seems that all the intermediate steps are succeeding. The fatlib dir is empty though ... http://dpaste.com/98XMQT77Q
[17:32:29] <Paperbot> Link title(s): [ dpaste: fatpack successive steps ]
[17:32:44] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[17:32:51] <Grinnz> what does /usr/lib/perl5/site_perl/auto/Array/Utils/.packlist contain?
[17:34:36] <_73> two lines: `/usr/share/man/man3/Array::Utils.3p` ; `/usr/share/perl5/site_perl/Array/Utils.pm`
[17:34:47] <Grinnz> and /usr/share/perl5/site_perl/Array/Utils.pm definitely exists?
[17:35:00] <_73> yes
[17:37:43] <Grinnz> oh weird, your packlist is in sitelib not sitearch
[17:37:50] <Grinnz> is this system perl?
[17:37:58] <_73> yes it is system perl
[17:38:03] <Grinnz> what distro?
[17:38:06] <_73> void linux
[17:38:17] <Grinnz> they seem to have fucked up their perl config
[17:38:48] <Grinnz> what's `perl '-V:installsitearch'` ?
[17:39:31] <_73> http://dpaste.com/C6Q39D8FM
[17:39:32] <Paperbot> Link title(s): [ dpaste: perl -V:installsitearch ]
[17:39:44] <Grinnz> colon was significant, but that works too
[17:40:09] <Grinnz> yeah they are smashing sitearch into sitelib, not great
[17:40:29] <Grinnz> workaround is to install the modules you want to pack into a local::lib, which will organize them correctly
[17:40:52] <_73> Ok I have seen talk of having my own local::lib
[17:41:00] <_73> would you reccomend installing my own perl?
[17:41:01] <Grinnz> you don't need to even set it up in your env
[17:41:06] <Grinnz> but yes
[17:41:29] <_73> alright thanks for all the help
[17:41:36] <Grinnz> for development it's best to install your own perl, whether via perlbrew/plenv (for multiple perls in your homedir) or just perl-build one wherever you want and add its bin/ dir to PATH
[17:42:04] <Grinnz> anyway for a quick fix of the fatpack issue: cpanm -l local Array::Utils; PERL5LIB=/path/to/local/lib/perl5 fatpack pack ...
[17:43:48] <Grinnz> arguably fatpacker's tree detection is a bit stupid, but this system perl's config is definitely busted
[17:44:10] <mst> fatpack deliberately uses .packlist files to find things
[17:44:25] <Grinnz> mst: the problem is the sitearch doesn't have an arch dir
[17:44:34] <mst> oh, huh, they installed a packlist file but to completely the wrong fucking place
[17:44:34] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Ping timeout: 258 seconds)
[17:44:36] <mst> lolsob
[17:44:46] <Grinnz> actually the right place, they just configured it to be wrong
[17:44:58] <mst> yes, I was talking about the outcome
[17:45:01] <mst> the installer did what it was told
[17:45:04] <mst> the perl is busted
[17:45:40] <mst> _73: the answer here is definitely to install into a local::lib and pack from there
[17:45:46] <_73> I will try to understand the issue better so I can open an issue with voidlinux people
[17:46:04] <Grinnz> about the best fatpacker could do in this situation is figure out if it's in sitearch, and if so look in sitelib, but that's a horrible workaround that only helps with that specific situation
[17:46:08] <mst> _73: that's generally the right approach for everything except FreeBSD, whose ports actually get it right because their maintainer actually talks to the relevant people on the perl side
[17:46:18] <simcop2387> you might also consider learning carton at the same time for helping manage the local lib for things if it's a bigger project
[17:46:26] <mst> _73: void's evidently made some shit up without ever consulting somebody who knew what they were doing
[17:46:30] * mst sulks
[17:47:02] <Grinnz> _73: basically their archlib, sitearch, and vendorarch configuration settings are wrong, and should be architecture specific subdirs of privlib, sitelib, and vendorlib respectively
[17:47:14] <simcop2387> mst: someone should combine void's brokeness with redhat's old brokeness too
[17:47:39] <mst> simcop2387: bunny.jpg
[17:47:47] <Grinnz> _73: and then they need to make sure their packaged modules go into the correct archlib and vendorarch as well
[17:48:57] *** Joins: tybalt89 (~rick@2600:8800:8d00:8100:2e0:4cff:fe68:617)
[17:49:08] *** Parts: tybalt89 (~rick@2600:8800:8d00:8100:2e0:4cff:fe68:617) ()
[17:49:55] <Grinnz> _73: ideally, all of their configured directories will be in version specific subdirs as well, so if you update the system perl in place it doesn't try to use everything you installed into sitelib for the old perl - but this would be something separate for them to fix
[17:50:12] <Grinnz> and i'm not confident they'd do it correctly without one of us helping them
[17:50:47] <mst> based on current evidence, I think I agree there
[17:50:56] <_73> alright ill work on this thanks
[17:51:11] <mst> since the current config has serious http://trout.me.uk/youtriedstar.jpg energy
[17:51:22] <mst> (I genuinely believe they tried, mind ... just it didn't work ;)
[17:51:44] * GumbyPAN CPAN Upload: Lingua-FR-Numbers-Ordinate-0.04 by NHORNE https://metacpan.org/release/NHORNE/Lingua-FR-Numbers-Ordinate-0.04
[17:51:45] <mst> (that's the sort of wrong you only really achieve via truly well meaning effort)
[17:52:31] <mst> _73: seriously, this absolutely smells like "good faith, unfortunate execution", I might be critical of the outcome but the humans clearly made an effort ... just not quite in the right direction :D
[17:53:50] <_73> the void people always seem to care about doing things right
[17:53:54] <Grinnz> right, it seems like something sensible if you were misinformed about what arch dirs are for
[17:54:14] *** Joins: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net)
[17:55:46] <mst> _73: sometimes with the best will in the world you still roll a 1 ;)
[17:57:32] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[18:02:50] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[18:13:22] *** Joins: thrig (~thrig@70.97.65.251)
[18:21:48] * GumbyPAN CPAN Upload: Dist-Zilla-PluginBundle-Author-GETTY-0.112 by GETTY https://metacpan.org/release/GETTY/Dist-Zilla-PluginBundle-Author-GETTY-0.112
[18:42:54] *** Quits: fstd (~fstd@xdsl-81-173-175-11.nc.de) (Read error: Connection reset by peer)
[18:52:35] *** Joins: gast0n (~g4570n@user/gast0n)
[19:02:06] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[19:05:19] *** Joins: fstd (~fstd@xdsl-89-0-79-89.nc.de)
[19:15:42] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 260 seconds)
[19:17:59] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[19:18:19] *** Quits: fstd (~fstd@xdsl-89-0-79-89.nc.de) (Read error: Connection reset by peer)
[19:18:19] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[19:18:26] *** Joins: tejr (~tejr@user/tejr)
[19:19:25] *** Joins: fstd (~fstd@xdsl-89-0-79-89.nc.de)
[19:20:50] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[19:21:52] *** Joins: kensanata (~user@user/kensanata)
[19:28:32] *** Quits: thrig (~thrig@70.97.65.251) (Remote host closed the connection)
[19:29:05] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[19:29:23] *** Joins: tejr (~tejr@user/tejr)
[19:35:25] *** Joins: thrig (~thrig@65.113.153.50)
[19:36:57] * GumbyPAN CPAN Upload: Travel-Status-DE-IRIS-1.61 by DERF https://metacpan.org/release/DERF/Travel-Status-DE-IRIS-1.61
[19:40:09] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[19:44:51] *** Joins: monkey_ (~user@190.104.116.134)
[19:46:16] *** Joins: thrig (~thrig@65.113.153.50)
[19:53:21] *** Joins: Adura (~Adura@user/adura)
[19:58:14] *** Parts: art1 (~romeyke@p200300ccdf279800ceb96cd4fd4a3a88.dip0.t-ipconnect.de) ()
[20:02:56] *** Quits: jabberwok (~wlindley@75.105.20.104) (Quit: Leaving.)
[20:29:27] *** Joins: emanuele6 (~emanuele6@net-2-36-101-242.cust.vodafonedsl.it)
[20:29:46] *** Quits: emanuele6 (~emanuele6@net-2-36-101-242.cust.vodafonedsl.it) (Changing host)
[20:29:46] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[20:33:48] *** Joins: krismatrix (~krismatri@38.80.149.51)
[20:38:47] *** Quits: splatt990 (4b25e29db1@198.108.77.17) (Ping timeout: 264 seconds)
[20:38:55] *** Quits: ircuser-1 (~Johnny@71.63.241.168) (Quit: because)
[20:40:00] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[20:40:54] *** Quits: ArtVandelayer (~ArtVandel@ip174-68-147-20.lv.lv.cox.net) (Ping timeout: 258 seconds)
[21:02:42] *** Quits: krismatrix (~krismatri@38.80.149.51) (Ping timeout: 244 seconds)
[21:06:55] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Quit: Shlomi Fish ("Rindolf") has left the server. “Chuck Norris was challenged to fight the world, and accepted. He bet on himself, won, and collected the bet money.”)
[21:08:26] *** Quits: surrounder (~surrounde@tanaka.surrounder.nl) (Quit: WeeChat 3.1)
[21:17:42] *** Quits: monkey_ (~user@190.104.116.134) (Ping timeout: 244 seconds)
[21:18:23] *** Quits: furrymcgee (~devuan@cgn-89-1-210-103.nc.de) (Ping timeout: 264 seconds)
[21:25:29] *** Joins: surrounder (~surrounde@tanaka.surrounder.nl)
[21:27:17] *** Joins: splatt990 (4b25e29db1@198.108.77.17)
[21:29:40] *** Joins: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de)
[21:31:34] *** Joins: furrymcgee (~devuan@cgn-89-1-210-103.nc.de)
[21:38:35] *** Quits: kensanata (~user@user/kensanata) (Ping timeout: 260 seconds)
[21:43:40] *** Joins: pucara (~i@host77.181-14-159.telecom.net.ar)
[21:49:09] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[21:57:14] * GumbyPAN CPAN Upload: Net-AMQP-RabbitMQ-2.40009 by MSTEMLE https://metacpan.org/release/MSTEMLE/Net-AMQP-RabbitMQ-2.40009
[21:58:22] *** Joins: jabberwok (~wlindley@75.105.20.104)
[22:14:40] *** Quits: Aniar (~Aniar@23-116-8-40.lightspeed.cicril.sbcglobal.net) (Ping timeout: 252 seconds)
[22:15:07] *** Joins: krismatrix (~krismatri@38.80.149.51)
[22:22:07] *** Joins: Aniar (~Aniar@23-116-8-40.lightspeed.cicril.sbcglobal.net)
[22:24:36] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[22:26:41] *** Quits: JayC (~JayC@gateway/tor-sasl/jayc) (Remote host closed the connection)
[22:29:09] *** Joins: JayC (~JayC@gateway/tor-sasl/jayc)
[22:34:59] *** Quits: pucara (~i@host77.181-14-159.telecom.net.ar) (Quit: Lost terminal)
[22:36:11] *** Joins: Darkcoal (~user@2001:16a2:7737:4e00:ccca:93ff:fe44:3285)
[22:45:59] *** Quits: Darkcoal (~user@2001:16a2:7737:4e00:ccca:93ff:fe44:3285) (Ping timeout: 264 seconds)
[22:47:29] *** Joins: Darkcoal (~user@139.64.63.46)
[22:52:40] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[22:56:34] *** Joins: bmomjian (~bruce@momjian.us)
[22:57:08] *** Joins: ArtVandelayer (~ArtVandel@ip174-68-147-20.lv.lv.cox.net)
[22:58:42] <bmomjian> I am trying to get Text::Wrap to properly wrap Unicode characters --- multi-byte characters are being cut in half.  It is the 'modern' version as reported by $Text::Wrap::SUBVERSION, and it is Perl version v5.28.1.  Is there something special I have to do for utf8 to work in this case?
[22:59:28] <mst> bmomjian: did you remember to decode() from bytes to characters first?
[22:59:57] <bmomjian> Oops!
[23:00:11] <ehuelsmann[m]> before I resort to my NIH pattern, I have a quick question: I'm writing an API and even the most basic validation currently costs me a lot of code. I'm thinking about writing a JSONschema doc and generate the validation code from that. I see there are JSONschema validators on CPAN too. I'm wondering what your experience is with validation of request input.
[23:00:12] <ehuelsmann[m]> Do you write the code manually? Do you use a schema validator? In case of a validator, do you compile the validator into code? Or do you load the schema on startup? Or...?
[23:00:15] <bmomjian> Hey, mst, thanks, you helped me in the past too.  :-)
[23:00:32] <mst> bmomjian: any time I have a unicode problem, it's either one too few or one too many encode() or decode() calls ;)
[23:01:15] *** Quits: krismatrix (~krismatri@38.80.149.51) (Quit: Leaving)
[23:01:32] <mst> ehuelsmann[m]: for a JSON API I'd probably look at ether's JSON::Schema::Modern
[23:01:43] <bmomjian> OK, so the code doesn't use encode/decode at all, so I guess it is not enough.
[23:01:57] <BinGOs> Jason Validator, British Super Spy.
[23:02:00] <mst> bmomjian: right, so you're reading bytes, wrapping bytes, then writing bytes
[23:02:20] <mst> bmomjian: you want to read bytes, decode to characters, wrap the characters, re-encode back to bytes, then write the bytes
[23:02:50] <mst> bmomjian: if *that* doesn't work then we'll have to dig deeper, but it's certainly the first thing I'd be trying if I had this problem in my own code
[23:03:26] <mst> ehuelsmann[m]: note: haven't used that one yet, but only because it was still alpha last time I had this problem, it's definitely going to be my first thing to try -next- time ;)
[23:03:31] <bmomjian> I am reading about decode/encode now.
[23:03:43] <simcop2387> alright, perlbot et all will go down for a few hours while i go through some annoying and painstaking fan replacements and cleanings of the server.  hopefully it won't be too long but honestly i don't know how long it'll take.  going full noctua quiet high performance fans plus a fancy fan controller.
[23:03:59] <mst> shiny
[23:04:01] <mst> ... eventually
[23:04:15] <simcop2387> nope, less shiny.  getting rid of the old rgb fans that came with the AIO cooler
[23:06:02] <mst> feh
[23:06:17] <mst> "shiny" as in firefly, you uncultured mook :P
[23:06:31] <simcop2387> i never watched firefly.  it never felt entertaining
[23:06:34] <Grinnz> bmomjian: also consider https://metacpan.org/pod/Unicode::LineBreak which understands graphemes and different width characters - still needs you to decode and encode the same way
[23:06:35] <Paperbot> Link title(s): [ Unicode::LineBreak - metacpan.org ]
[23:06:37] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[23:07:03] <Grinnz> because even decoding to codepoints doesn't tell you how many columns of text it will take up
[23:07:44] <LeoNerd> Tickit::Utils has a "string counting" function that walks the string counting all four of {bytes, codepoints, graphemes, columns} so you can find out such answers
[23:08:09] <Grinnz> that is https://metacpan.org/pod/Unicode::GCString which it uses
[23:08:10] <Paperbot> Link title(s): [ Unicode::GCString - metacpan.org ]
[23:08:38] <Grinnz> but of course a lot of it is a hack because there isn't one right answer
[23:09:59] *** Quits: perldoc (~perldoc@24.88.49.194) (Ping timeout: 265 seconds)
[23:09:59] *** Quits: metabot (~metabot@perlbot/bot/metabot) (Ping timeout: 265 seconds)
[23:11:05] <ehuelsmann[m]> mst: yes, I'm definitely verifying JSON request bodies. The JSON validator seems to load the JSON schema from disk on startup; I'm going to have a look at what it does performance wise with my API. I need over 400 lines of code to do current validation and that's just the basic level. I was thinking to compile the schema into validating Perl code. But maybe I'm performance paranoid and I need to run some benchmarks first.
[23:11:22] *** Quits: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot) (Ping timeout: 260 seconds)
[23:11:22] *** Quits: simcop2387 (~simcop238@perlbot/patrician/simcop2387) (Ping timeout: 260 seconds)
[23:11:22] *** Quits: meatbot (~meatbot@perlbot/bot/meatbot) (Ping timeout: 260 seconds)
[23:11:26] *** Quits: kaitlyn0 (~kaitlyn@user/kaitlyn) (Ping timeout: 265 seconds)
[23:12:36] <mst> ehuelsmann[m]: this code is designed to be used per-request for JSON over HTTP validation
[23:12:58] <mst> if it isn't yet fast enough, that's a hint to pitch in, not to NIH something wrose :D
[23:14:00] <ehuelsmann[m]> :-) ok. if it's meant to be run per-request, I'll concede and just use it.
[23:14:24] <ehuelsmann[m]> (until I'm running into measurable problems; however, those reside with DateTime anyway for now)
[23:19:05] *** Joins: simcop2387-web (~simcop238@2603-6081-6401-8c00-0000-0000-0000-05ae.res6.spectrum.com)
[23:19:13] <simcop2387-web> there we are webchat open
[23:19:52] <bmomjian> So I tried utf8::encode and utf8::decode and those are making it worse.  At least before it was only split multibyte characters, while now all the UTF8 characters display as wrong characters.
[23:20:31] <Grinnz> that means you did it wrong, first of all
[23:20:46] <Adura> Forget unicode, it's a pain.
[23:20:50] <mst> bmomjian: use Encode qw(encode decode);
[23:20:51] <Grinnz> secondly, use Encode 'encode' and 'decode', or Encode::Simpler 'encode_utf8' and 'decode_utf8'
[23:20:55] <Grinnz> Encode::Simple*
[23:21:05] <bmomjian> ok
[23:21:12] <mst> bmomjian: utf8.pm is generally only useful for declaring to perl that your -perl file- is in utf8
[23:21:25] <bmomjian> That's what I thought too.
[23:21:39] <Grinnz> if you want more specifics than "you did it wrong" use the paste site in the topic to show us what you did
[23:22:05] <Grinnz> perlmaros: encoding mantra
[23:22:07] <Grinnz> ...
[23:22:12] <Grinnz> rip perlbot
[23:25:35] <bmomjian> Here is what I am doing:  https://momjian.us/tmp/utf8.txt
[23:26:25] <Grinnz> use encode, not encode_utf8, if you're using base Encode
[23:26:37] <mst> bmomjian: you went backwards, encode() is 'take bytes, produce charactes'
[23:26:39] *** Quits: furrymcgee (~devuan@cgn-89-1-210-103.nc.de) (Remote host closed the connection)
[23:26:41] <Grinnz> and yeah that
[23:26:45] <mst> bmomjian: also it would help if we knew wtf $entry was
[23:26:54] <Grinnz> $chars = decode 'UTF-8', $bytes;
[23:26:55] <bmomjian> Maybe I need to set my output mode.
[23:26:59] <mst> bmomjian: and what you're doing with the value afterwards
[23:27:02] <Grinnz> no, you need to do the right thing first.
[23:27:06] <bmomjian> Sorry
[23:27:24] <Grinnz> trying random things with encoding only results in further confusion
[23:27:34] <mst> bmomjian: what you need is to give us a bit more context, ideally, this is kinda like being shown the line that segfaulted but having no idea where the pointer came from :D
[23:27:45] <bmomjian> OK, URL updated.  The text is really just some UTF8 bytes describing a trip.
[23:27:46] <huf> you also need to ensure the correct output encodings, but that wont help if you're trying to emit garbage
[23:28:04] <mst> bmomjian: where did $entry come from? :(
[23:28:09] <Adura> Unicoded so hard you segfaulted.
[23:28:31] <Grinnz> bmomjian: ok, now try doing the right thing?
[23:29:04] <huf> if you have utf8 bytes, you need to decode
[23:29:07] <huf> because utf8 is bytes
[23:29:31] <huf> that's the entire point of encodings. telling you how to make bytes out of characters
[23:31:32] <bmomjian> The script is 857 lines.OK, I got it working. URL udpated.
[23:32:10] <bmomjian> seems I needed decode_utf8() and binmode on the output stream.
[23:32:11] <mst> or you could do 'print {$out} encode_utf8($whatever);'
[23:32:13] *** Quits: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de) (Ping timeout: 265 seconds)
[23:32:19] <Grinnz> ok, now fix decode_utf8 to decode 'UTF8', 
[23:32:27] <mst> the binmode is really just doing the encode_utf8 automatically
[23:32:27] <bmomjian> OK
[23:32:37] <Grinnz> and binmode($out, ":utf8"); to binmode($out, ":encoding(UTF-8)");
[23:32:56] <Grinnz> sorry perl has stupid cruft in the more obvious names
[23:33:48] <Grinnz> i missed the hyphen, sorry: decode 'UTF-8',
[23:33:53] <Grinnz> hyphen is significant
[23:34:25] <mst> Grinnz: bmomjian hacks on pg and quite appreciates that we know what backcompat is :)
[23:34:37] *** Joins: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de)
[23:34:38] <mst> ... though, yes, the more obvious names *are* still stupid in some ways ;)
[23:34:39] <bmomjian> OK, URL updated with those two changes.
[23:35:00] <huf> -
[23:35:15] <bmomjian> I don't think I can use the UTF8 just for output since I am doing wrapping before the output.
[23:35:20] <Grinnz> bmomjian: and the hyphen
[23:36:01] <Grinnz> bmomjian: the binmode is equivalent to passing encode('UTF-8', whatever) instead of whatever to print whenever you print, so you can do it either way
[23:36:12] <bmomjian> Oh, I see the hypen mention now, hold
[23:36:32] <mst> so if you can use one, you can use the other
[23:36:38] <mst> it's mostly a question of which makes your code clearer
[23:36:38] <bmomjian> URL updated.
[23:36:52] <mst> also you still never told me where $entry came from :D
[23:36:53] <Grinnz> bmomjian: the downside of the binmode way is that it glboally affects the handle to now expect characters instead of bytes. not a problem as long as you control the handle
[23:37:30] <mst> CSV file? database connection? /dev/urandom? place bets now :D
[23:37:39] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[23:39:11] <huf> why does it matter? it came from bytes. the real question is, can we put the decode in a more sensible spot?
[23:39:26] *** Joins: magla (~gelignite@55d43ee1.access.ecotel.net)
[23:39:42] <bmomjian> Uh, Entry is from a calendar program where each calendar entry is output from an ICS library.
[23:39:55] <mst> huf: because e.g. Text::CSV can decode for you if you want
[23:40:07] <mst> huf: so sometimes the more sensible spot is 'by setting an option'
[23:40:15] <huf> mst: yes. "put the decode in a more sensible spot", exactly
[23:40:19] <mst> similar to the encode() versus :encoding question
[23:40:45] <bmomjian> We exit very soon after we call this code, so having it be permanent is fine.
[23:40:48] <bmomjian> Good point though.
[23:40:49] <huf> best place is "not my code" for all values of code
[23:40:58] <bmomjian> I can put it in the print as well and not use binmode.
[23:41:17] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[23:41:30] <Grinnz> NIMBC
[23:41:34] <mst> huf: though sometimes having a visible 'decode' and a visible 'encode' near to each other so you can be sure you've paired them is better too
[23:41:45] <mst> trade-offs! \o/
[23:42:48] <Grinnz> bmomjian: for posterity, the problem with :utf8 and encode_utf8 and encoding with 'UTF8' are all the same thing: it encodes to perl's internal storage encoding, which is approximately but not quite utf-8
[23:43:02] <bmomjian> OK, URL updated to remove binmode.
[23:44:10] <Grinnz> utf8::encode also has the same problem
[23:44:44] <mst> bmomjian: encode('UTF-8', # fearful symmetry
[23:46:07] <bmomjian> OK, this passes all my multi-byte tests now, thanks.  Odd I didn't see this problem before
[23:46:57] <bmomjian> OK, hold
[23:47:00] <Grinnz> the trouble with utf8 is it's backwards compatible enough to fool you into thinking you're doing it right, until it doesn't work
[23:49:24] <bmomjian> OK, URL updated.  :-)
[23:49:46] <bmomjian> I switched to using encode() everywhere.
[23:49:59] *** Quits: EGD (~egd@user/egd) ()
[23:50:31] <mst> bmomjian: that looks like how I would've ended up writing it (probably after making at least one dumbass mistake because unicode hates the living, but still ;)
[23:51:08] <bmomjian> URL now updated with a perltidy run.  ;-)
[23:51:37] <bmomjian> Thanks much.
[23:56:39] *** Quits: _73 (~user@pool-96-233-64-53.bstnma.fios.verizon.net) (Remote host closed the connection)
