[00:00:02] *** Joins: pro (~pro@user/pro)
[00:02:45] <FromDiscord> <Phil> You can make any proc compile time with the compile time pragma, similarly for any variable with that pragma.‚ÜµAny variable assignment with a `const` also automatically happens at compile time
[00:03:28] <FromDiscord> <Phil> (edit) "pragma," => "pragma `{.compileTime.}`,"
[00:03:56] <FromDiscord> <Phil> Or did you mean something else?
[00:05:38] <FromDiscord> <Phil> On an unrelated note, if anyone wants to take a look at this monster of a compile time proc, I'm very open to refactor suggestions.‚ÜµI just found that the proc in there works, I can't get any other version to work somehow: https://codereview.stackexchange.com/questions/273747/compile-time-check-for-validity-of-given-field-name
[00:06:32] <FromDiscord> <Phil> (edit) "somehow:" => "somehow. It's the proc from above, I just now posted it also to codereview SO because that is a large enough topic that I want to document whatever I learn from it"
[00:34:54] *** Joins: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de)
[00:57:55] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[01:08:26] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[01:08:56] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[01:29:09] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[01:50:01] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06)
[01:50:41] *** Quits: pro (~pro@user/pro) (Ping timeout: 256 seconds)
[02:19:08] <FromDiscord> <evoalg> [Elegantbeef](https://matrix.to/#/@elegantbeef:matrix.org)\: I am reading in a file from https://github.com/fchollet/ARC/blob/master/data/training/a61f2674.json and doing https://play.nim-lang.org/#ix=3OGt like you taught me and it seems to work ... since it's a more complex json I dunno if using types is better or cleaner? ... but I'm happy it works as is üòÄ
[02:22:35] <FromDiscord> <Elegantbeef> Types would probably be cleaner
[02:22:35] <FromDiscord> <evoalg> ok thank you!
[02:25:13] <PMunch> Hmm... /home/peter/.choosenim/toolchains/nim-1.6.2/lib/pure/times.nim(289, 29) Error: type mismatch: got 'int32' for '0 .. 999999999' but expected 'int'
[02:25:42] <PMunch> This is an annoying thing compiling for AVR..
[02:27:52] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[02:31:05] <FromDiscord> <Elegantbeef> [evoalg](https://matrix.to/#/@evoalg:matrix.org)\: here's the type version
[02:31:05] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3OGy
[02:32:24] <FromDiscord> <evoalg> You're the best beefy! ‚ù§Ô∏è
[03:03:32] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[03:05:57] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 240 seconds)
[03:07:36] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[03:41:11] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[03:54:59] <NimEventer> New post on r/nim by timrichardson: new user question about sort, see https://reddit.com/r/nim/comments/skt1f5/new_user_question_about_sort/
[03:55:07] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[03:56:23] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[04:08:40] <Nuc1eoN> ‚ù§Ô∏è
[04:36:37] *** Quits: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de) (Remote host closed the connection)
[05:04:17] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 240 seconds)
[05:08:28] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[05:36:10] <NimEventer> New Nimble package! polymorph - An entity-component-system with a focus on compile time optimisation, see https://github.com/rlipsc/polymorph
[05:36:10] <NimEventer> New Nimble package! polymers - A library of components and systems for use with the Polymorph ECS, see https://github.com/rlipsc/polymers
[05:36:10] <NimEventer> New Nimble package! glbits - A light interface and selection of utilities for working with OpenGL and SDL2, see https://github.com/rlipsc/glbits
[05:37:07] <FromDiscord> <Elegantbeef> Oh shit @rlipsc now in nimble! üòÄ
[05:37:42] <FromDiscord> <rlipsc> Woo! üòÅ
[05:38:09] <FromDiscord> <Elegantbeef> I still have to learn how to use ECS properly
[05:38:22] <FromDiscord> <rlipsc> Now all I need to do is make forum announcements üòÜ
[05:38:40] <FromDiscord> <Elegantbeef> Maybe TMWN post aswell üòõ
[05:38:55] <FromDiscord> <rlipsc> Well, you can always check out some examples in Polymers!
[05:39:15] <FromDiscord> <rlipsc> TMWN?
[05:39:30] <FromDiscord> <Elegantbeef> This month with Nim
[05:39:30] <FromDiscord> <rlipsc> Oh, this month in Nim. Yes!
[05:39:42] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[05:40:04] <FromDiscord> <Elegantbeef> Eh i've toyed with polymorph before, just dont follow  the ECS style overly well presently
[05:40:44] <FromDiscord> <rlipsc> It is a different way of working, for sure. It can be pretty productive though!
[05:41:11] <FromDiscord> <Elegantbeef> Yea i'm just a dullard
[05:41:29] <FromDiscord> <Elegantbeef> Havent used it a lot so find it tedious so dont use it
[05:41:37] <FromDiscord> <rlipsc> Nah, it's just like, almost the opposite to many ways of programming. It's like working with sets, in a way
[05:41:51] <FromDiscord> <rlipsc> fair enough!
[05:42:57] <FromDiscord> <rlipsc> In my talk tomorrow I've got a bit about making a web server with ECS, which was quite interesting to hack out
[05:44:09] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[05:45:13] <FromDiscord> <rlipsc> I've not seen many examples of that kind of thing, though I know flecs has a web server aspect, but not sure how it works in comparison. I tried to stick to 'pure' ECS and build components on top of each other. Very different way of doing things. I don't know that I'd recommend it for people vs the traditional approach, at least, for now!
[05:46:30] <FromDiscord> <rlipsc> I think though, ECS can be less tedious for a lot of stuff. Especially simulation type things.
[05:46:38] <FromDiscord> <Elegantbeef> Yea i just make pretend code, also known as working on a project then abandoning it shortly after starting. So I'm not the best to say anything
[05:48:10] <FromDiscord> <rlipsc> Ha, well, you should see the number of attempts at games I've made and remade! But you know, each time we get better, right? üòÅ
[05:49:01] <FromDiscord> <Elegantbeef> Hey i've got a lot of dead games so i know
[05:49:27] <FromDiscord> <Elegantbeef> Recently returned to my last game project and actually almost have a usable level editor üòÄ
[05:50:00] <FromDiscord> <rlipsc> I think I'm at the stage where my example game demo in Polymers is probably more fully featured than my sprawling codebase for "real" games!
[05:50:01] *** Joins: TakinOver (~quassel@193.27.13.170)
[05:50:37] <FromDiscord> <rlipsc> Nice, yeah I saw that over on gamedev, looks really good!
[05:58:39] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[06:12:40] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[06:36:37] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[06:50:32] *** Quits: ldlework (~hexeme@user/hexeme) (Remote host closed the connection)
[06:53:22] *** Joins: hexeme (~hexeme@user/hexeme)
[07:03:01] <nrds> <06Prestige99> Hmm https://play.nim-lang.org/#ix=3OHi this way of doing do while is actually pretty neat
[07:03:11] <nrds> <06Prestige99> Can use continue at least
[07:03:51] <nrds> <06Prestige99> Wonder if I'm missing some obvious logic flaw
[07:04:54] <FromDiscord> <Elegantbeef> Nothing i can see
[07:06:52] <nrds> <06Prestige99> neat, the beef stamp of approval
[07:07:03] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[07:13:22] <FromDiscord> <Elegantbeef> Not that it means much
[07:37:40] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[09:10:41] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[09:13:32] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[10:26:20] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[10:28:39] <FromDiscord> <Phil> If I start writing compileTime procs solely to do compile time checks I guess I should start writing concepts instead üòï
[10:29:07] <FromDiscord> <Rika> I‚Äôm not sure what you mean
[10:29:38] <FromDiscord> <Elegantbeef> Perhaps if you're doing `isThing(T: typedsec): bool`
[10:29:56] <FromDiscord> <Rika> Nice typo
[10:30:13] <FromDiscord> <Elegantbeef> Thanks rika]
[10:30:24] <FromDiscord> <Rika> Combo x2
[10:30:33] <FromDiscord> <Elegantbeef> Can always count on you
[10:30:54] <FromDiscord> <Rika> No problem üëå
[10:30:55] <FromDiscord> <Phil> I've run into a scenario where I want a proc that I can just give a type, then the name of one of its fields as a string and another string which is a pragma value. The proc then just checks: a) does that type have a field with that name, b) does that field have the pragma and c) is the value of that pragma equal to what you'd expect
[10:31:22] <FromDiscord> <Elegantbeef> You're describing a concept üòÄ
[10:31:24] <FromDiscord> <Rika> Then yes perhaps a concept works better
[10:31:24] <FromDiscord> <Phil> So far I throw a FieldDefect hidden behind a "when" statement whenever any of those 3 conditions is wrong
[10:31:55] <FromDiscord> <Phil> Somehow a compileTime-annotated proc apprears to absolutely have to have a return
[10:32:19] <FromDiscord> <Phil> Which makes the code all kinds of ugly
[10:32:25] <FromDiscord> <Elegantbeef> Nope
[10:32:28] <FromDiscord> <Rika> ??
[10:32:34] <FromDiscord> <Rika> That would be a strange limitation
[10:32:40] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3OHG
[10:32:47] <FromDiscord> <Rika> What error do you get without a return type
[10:32:55] <FromDiscord> <Phil> sent a long message, see http://ix.io/3OHH
[10:32:58] <FromDiscord> <Phil> (edit) "sent" => "I get‚Üµ>     Error: expression 'checkFkField(M, "character_article_id", table(O))' has no type (or is ambiguous)‚ÜµWhen I try to not have" | "long message, see http://ix.io/3OHH" => "return on that pragma"
[10:33:02] <FromDiscord> <Phil> (edit) "pragma" => "proc"
[10:33:05] <FromDiscord> <Elegantbeef> "that pragma"
[10:33:06] <FromDiscord> <Phil> proc, not pragma
[10:33:10] <FromDiscord> <Phil> Early morning
[10:33:13] <FromDiscord> <Rika> Is it used like a pragma?
[10:33:20] <FromDiscord> <Rika> And how do you use the proc
[10:33:21] <FromDiscord> <Phil> Nope
[10:33:25] <FromDiscord> <Phil> https://codereview.stackexchange.com/questions/273747/compile-time-check-for-validity-of-given-field-name
[10:33:34] <FromDiscord> <Phil> > const _ = checkFkField(SecondModel, "fkToSomeModel", "SomeModel") #Will not throw a defect at compile time
[10:33:49] <FromDiscord> <Rika> Well you‚Äôre assigning it
[10:33:56] <FromDiscord> <Rika> Of course it needs a return type
[10:34:02] <FromDiscord> <Phil> Yeah but even if I don't I get this error
[10:34:12] <FromDiscord> <Rika> ‚ÄúDon‚Äôt‚Äù?
[10:34:42] <FromDiscord> <Phil> even if I only write "checkFkField" without an assignment and refactor the proc to not return a bool
[10:35:11] <FromDiscord> <Rika> sent a code paste, see https://play.nim-lang.org/#ix=3OHI
[10:35:23] <FromDiscord> <Elegantbeef> God that's an awful solution üòÄ
[10:35:24] <FromDiscord> <Rika> Where did you run off to beef smh
[10:35:32] <FromDiscord> <Elegantbeef> Water
[10:35:47] <FromDiscord> <Rika> Water you talking about aren‚Äôt you always free
[10:36:05] <FromDiscord> <Elegantbeef> Wildly not
[10:36:05] <FromDiscord> <Phil> In reply to @Elegantbeef "God that's an awful": I entirely agree
[10:36:45] <FromDiscord> <Rika> You mean ‚Äúwholly agree‚Äù jeez come on don‚Äôt you get the message
[10:37:16] <FromDiscord> <Phil> Even with you writing that I don't
[10:37:29] <FromDiscord> <Rika> Word that starts with ‚Äúw‚Äù
[10:37:54] <FromDiscord> <Phil> I blame early morning
[10:38:07] <FromDiscord> <Rika> What do you mean
[10:38:21] <FromDiscord> <Rika> Which continent or time zone do you live in
[10:38:56] <FromDiscord> <Phil> WCET
[10:39:34] <FromDiscord> <Rika> Well I didn‚Äôt intend to continue the word streak honestly
[10:39:54] <FromDiscord> <Phil> Wild claim
[10:40:15] <FromDiscord> <Rika> Wait, you can‚Äôt use that as beef already did smh
[10:41:22] <FromDiscord> <Phil> Was never intending of playing by the rules. Anyway, I wanted to avoid concepts in case they force me on arefactor on the next nim upgrade but
[10:41:39] <FromDiscord> <Phil> (edit) "but" => "but... I am in that scenario already with the parseEnum fix"
[10:41:49] <FromDiscord> <Phil> (edit) "arefactor" => "a refactor"
[10:42:53] <FromDiscord> <GreenFork> can I create `seq[T]` from `ptr UncheckedArray[T]` without `newSeq` to avoid additional memory allocations? I see that seq is just a pointer and a length, I'd like to manually create one <https://github.com/nim-lang/Nim/blob/devel/lib/system/seqs_v2.nim#L17-L28>
[10:42:57] <FromDiscord> <Rika> Concepts The Sequel I believe are partially implemented already
[10:43:06] <FromDiscord> <Rika> In reply to @GreenFork "can I create `seq[T]`": No
[10:43:19] <FromDiscord> <Rika> The pointer in the sequence is afaik GC managed
[10:43:28] <FromDiscord> <Elegantbeef> It is indeed
[10:43:42] <FromDiscord> <GreenFork> so I can't play nice with a GC?
[10:43:44] <FromDiscord> <Rika> And it‚Äôs not the same as the pointer of an unchecked array
[10:43:45] <FromDiscord> <Phil> I'll first need to find the concept docs again
[10:43:45] <FromDiscord> <Rika> No
[10:44:19] <FromDiscord> <Rika> There is extra data in that pointer I believe like capacity (unless ARC in which the capacity is with the length and the pointer is just data)
[10:44:37] <FromDiscord> <GreenFork> okay, thanks!
[10:44:59] <FromDiscord> <Elegantbeef> You can create an openarray though
[10:45:01] <FromDiscord> <Elegantbeef> But not hold onto it
[10:45:26] <FromDiscord> <Elegantbeef> So you can write procedures that take in `openArray[T]` and work with your unchecked array, seq, array
[10:46:12] <FromDiscord> <Rika> Don‚Äôt store it though üòõ
[10:46:18] <FromDiscord> <Phil> ... I know I've been linked to documentation about concepts before
[10:46:28] <FromDiscord> <GreenFork> yeah, openarray should be good enough
[10:46:29] <FromDiscord> <Elegantbeef> Rika making jokes
[10:46:31] <FromDiscord> <Rika> In reply to @Isofruit "... I *know* I've": manual_experimental.html
[10:46:47] <FromDiscord> <Elegantbeef> then `toOpenArray` is your friend Spoon
[10:46:52] <FromDiscord> <Rika> Yes I memorise the fucking URL I‚Äôm fucking strange
[10:47:06] <FromDiscord> <GreenFork> `proc toOpenArray[T](x: ptr UncheckedArray[T]; first, last: int): openArray[T]` will do the trick
[10:47:13] <FromDiscord> <GreenFork> thanks
[10:47:26] <FromDiscord> <Elegantbeef> You cannot hold onto the return though
[10:47:26] <FromDiscord> <Elegantbeef> So take that into consideration
[10:47:41] <FromDiscord> <Phil> In reply to @Rika "manual_experimental.html": Ahhh that did it, thank!
[10:49:37] <FromDiscord> <GreenFork> > You cannot hold onto the return though‚Üµyou mean I can't return this type?
[10:50:14] <FromDiscord> <Rika> You can
[10:50:22] <FromDiscord> <Rika> You can‚Äôt use a variable to hold it I believe
[10:50:37] <FromDiscord> <Rika> How would to open array work if you couldn‚Äôt return the type‚Ä¶
[10:50:50] <FromDiscord> <Elegantbeef> You cannot return it
[10:50:58] <FromDiscord> <Rika> Really? Why?
[10:51:28] <FromDiscord> <Phil> While in a concept, is there a proc or something that I can say to a type "give me your field with the name of the string that is in `myFieldName`"
[10:51:45] <FromDiscord> <Phil> (edit) "`myFieldName`"" => "the variable`myFieldName`""
[10:51:46] <FromDiscord> <Elegantbeef> > Error\: invalid type\: 'openArray[int]' in this context\: 'proc (thing\: seq[int])\: openArray[int]' for proc
[10:51:51] <FromDiscord> <GreenFork> > You can‚Äôt use a variable to hold it I believe‚Üµif I can't use a variable to hold the openarray value which I have returned from a function - that's not very useful then
[10:52:13] <FromDiscord> <Rika> In reply to @GreenFork "> You can‚Äôt use": Well apparently you can‚Äôt return it either now so I have no fucking clue
[10:52:15] <FromDiscord> <GreenFork> it looks more like a typecast
[10:52:50] <FromDiscord> <GreenFork> the toOpenArray looks like a typecast
[10:53:06] <FromDiscord> <Elegantbeef> It is
[10:53:11] <FromDiscord> <Elegantbeef> It's a `pointer, len` so is only allowed as an input parameter
[10:53:17] <FromDiscord> <Elegantbeef> As anything else could be unsafe
[10:53:20] <FromDiscord> <Elegantbeef> You can use a template though
[10:53:40] <FromDiscord> <GreenFork> it's all fine, I will stay with unchecked arrays for now. maybe provide helper functions which do a typecast or create custom container as recommended elsewhere
[10:54:36] <FromDiscord> <Elegantbeef> Templates are your friend here
[10:56:47] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3OHK here you go iso
[10:56:47] <FromDiscord> <Elegantbeef> Have fun with that
[10:57:07] <FromDiscord> <Elegantbeef> What're you presently trying to do green?
[10:57:29] <FromDiscord> <Elegantbeef> Like a code example
[11:00:17] <FromDiscord> <Rika> Beef what‚Äôs your opinion on exceptions versus result types
[11:01:00] *** Joins: pro (~pro@user/pro)
[11:01:04] <FromDiscord> <Elegantbeef> I'm pretty indifferent
[11:01:24] <FromDiscord> <creikey> beef how do I find love in life
[11:01:37] <FromDiscord> <Elegantbeef> You stick your finger in a light socket
[11:02:05] <FromDiscord> <Rika> Why not ‚Äúyou fork a socket‚Äù
[11:02:14] <FromDiscord> <Elegantbeef> If an light socket doesnt make you love life nothing will
[11:02:33] <FromDiscord> <GreenFork> sent a code paste, see https://play.nim-lang.org/#ix=3OHM
[11:03:07] <FromDiscord> <Rika> Avoid a copy -> make an abstraction over ptr UncheckedArray
[11:03:14] <FromDiscord> <Elegantbeef> Yea i knew it was for C interop did assume raylib üòÄ
[11:03:37] <FromDiscord> <GreenFork> > Avoid a copy -> make an abstraction over ptr UncheckedArray‚Üµsure, I call it "a custom container"
[11:03:43] <FromDiscord> <Rika> Yeah pretty much
[11:03:43] <FromDiscord> <GreenFork> yep, raylib for life
[11:04:10] <FromDiscord> <Rika> I don‚Äôt see any other way other than that or open array
[11:04:16] <FromDiscord> <Elegantbeef> I really should use raylib given it sounds like my ideal setup, but i'm a daft and keep working with my collection
[11:04:24] <FromDiscord> <Elegantbeef> View types cant come soon enough
[11:04:29] <nrds> <06Prestige99> beef did you say "an light socket"
[11:04:31] <FromDiscord> <Rika> True
[11:04:38] <FromDiscord> <Rika> In reply to @nrds "<Prestige> beef did you": The L is silent
[11:04:46] <FromDiscord> <Rika> An ‚Äòight socket
[11:04:50] <FromDiscord> <Elegantbeef> I typed too fast
[11:04:52] <nrds> <06Prestige99> Lol
[11:05:08] <FromDiscord> <Elegantbeef> I love how that's the thing you question out of that entire conversation
[11:05:34] <FromDiscord> <Elegantbeef> "Did you accidently use the wrong conjunction(is it a conjunction?)"
[11:06:31] <FromDiscord> <Rika> Article
[11:07:26] <FromDiscord> <Rika> It‚Äôs an article is what I mean
[11:07:27] <FromDiscord> <Elegantbeef> Nah i dont read those they piss me off
[11:07:41] <FromDiscord> <Elegantbeef> Yes i knew what you meant
[11:07:41] <FromDiscord> <Elegantbeef> I'm only a partial drongo
[11:09:03] <FromDiscord> <Rika> What the fuck is a Drongo
[11:09:17] <FromDiscord> <huantian> A bongo with drm
[11:09:27] <FromDiscord> <Elegantbeef> It's a bird but aussie slang
[11:09:48] <FromDiscord> <Elegantbeef> Just means idiot
[11:10:55] <FromDiscord> <Rika> Why do y‚Äôall European American Australian dongs keep using the strangest of fuckin slang
[11:11:31] <FromDiscord> <Elegantbeef> I have a collection of words to mean idiot in a variety of idiioms, since I like calling shit dumb
[11:12:14] <FromDiscord> <Elegantbeef> The abillity to say precisely how dumb something/someone is an artform
[11:13:47] <FromDiscord> <Rika> An art form that makes it difficult for us dumbasses to understand half the time lmfao
[11:14:03] <FromDiscord> <Elegantbeef> Hey i called myself a drongo
[11:19:46] *** Joins: al1ranger (~al1ranger@182.57.218.54)
[11:32:09] <FromDiscord> <Phil> In reply to @Elegantbeef "https://play.nim-lang.org/#ix=3OHK here you go": Sweet! Now to figure out on why that concept breaks when I adjust it, hmmm
[11:37:33] <FromDiscord> <Elegantbeef> What're you adjusting?
[11:43:12] <FromDiscord> <Phil> I'm adding an additional input parameter (another static string) and adjusting the last line to be a comparison with that new input parameter. Norm has a `table` func that gives you back either the name of the type as a string or the value of the types  `tableName` pragma (also from norm, for when the name of your table differs from the name of the type. E.g. "wikientries_character" the table with the type "Character").‚Üµ‚Üµhttps://play.nim
[11:43:39] <FromDiscord> <Phil> (edit) "I'm adding an additional input parameter (another static string) and adjusting the last line to be a comparison with that new input parameter. Norm has a `table` func that gives you back either the name of the type as a string or the value of the types  `tableName` pragma (also from norm, for when the name of your ... table" 03added "SQL"
[11:45:10] <FromDiscord> <Phil> Argh, that had a mistake in it
[11:45:11] <FromDiscord> <Phil> https://play.nim-lang.org/#ix=3OHZ
[11:55:24] <FromDiscord> <Elegantbeef> What's with the table?
[11:58:58] <FromDiscord> <Phil> sent a code paste, see https://play.nim-lang.org/#ix=3OI0
[11:59:21] <FromDiscord> <Phil> (edit) "https://play.nim-lang.org/#ix=3OI0" => "https://paste.rs/8AV"
[12:00:29] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[12:00:54] <FromDiscord> <Phil> sent a code paste, see https://paste.rs/nPk
[12:10:37] *** Quits: al1ranger (~al1ranger@182.57.218.54) (Quit: Leaving)
[12:25:55] <FromDiscord> <Elegantbeef> Going to be issues here since that `getCustomPragma` returns a tuple
[12:26:08] <FromDiscord> <Elegantbeef> You'll need to return the type explicitly afaict
[12:26:54] <FromDiscord> <Phil> It does?
[12:27:01] <FromDiscord> <Phil> Huh.... is that macro specific behaviour?
[12:27:15] <FromDiscord> <Elegantbeef> No it's just that macro
[12:27:24] <FromDiscord> <Elegantbeef> It creates a tuple of types afaict
[12:27:36] <FromDiscord> <Elegantbeef> which means a `template doThing(T: typdesc){.pragma.}` doesnt work
[12:29:35] <FromDiscord> <Phil> Wait, different idea
[12:33:29] <FromDiscord> <Phil> Hmm the fk pragma is defined as this‚Üµ`template fk(val: typed) {.pragma.}`
[12:34:35] <FromDiscord> <Phil> I'm currently wrecking my brain why I can do that in a compile time proc but not the concept
[12:35:09] <FromDiscord> <Phil> "That" being `(toTableName == sourceFieldValue.getCustomPragmaVal(fk).table())`
[12:35:35] <FromDiscord> <Elegantbeef> That works in a compile time proc?
[12:36:12] <FromDiscord> <Phil> One sec, let me double check if the error message I receive is correct, but the proc explodes as I want it to
[12:43:54] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3OI8 well this concept works
[12:43:58] <FromDiscord> <Elegantbeef> Need to abuse macros for `==`
[12:44:24] <FromDiscord> <Elegantbeef> Down side of concepts is that it Nim seems to disregard type information
[12:45:14] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3OI9 fixed the type info going away
[12:45:25] *** Joins: PMunch (~PMunch@user/pmunch)
[12:46:00] <FromDiscord> <locriacyber> Hello everyone
[12:46:04] <FromDiscord> <Elegantbeef> Hello
[12:46:11] <FromDiscord> <Elegantbeef> Is that better than your procedure, that's yet to be seen üòÄ
[12:46:13] <FromDiscord> <Phil> sent a code paste, see https://play.nim-lang.org/#ix=3OIa
[12:46:22] <FromDiscord> <Phil> everything is better than that god damn procedure
[12:46:32] <FromDiscord> <Phil> I have it because it works, not because I like it
[12:46:35] <FromDiscord> <locriacyber> So, who knows about how Nim compiler works
[12:46:56] <FromDiscord> <Elegantbeef> I've done some contributions to the compiler, so i do somewhat
[12:47:12] <FromDiscord> <locriacyber> Can you help me with issue 19484
[12:47:24] <FromDiscord> <locriacyber> I found the issue
[12:47:34] <FromDiscord> <Elegantbeef> I'm guessing it's not going to be 'X doesnt work but should'
[12:47:42] <FromDiscord> <locriacyber> No
[12:47:53] <FromDiscord> <locriacyber> It's a compiler bug
[12:48:15] <FromDiscord> <Elegantbeef> Sure the other is also a compiler bug üòõ
[12:48:47] <FromDiscord> <locriacyber> Ok
[12:50:15] <FromDiscord> <Elegantbeef> Well i'll look at it anyway
[12:53:52] <FromDiscord> <Elegantbeef> Wait what's the issue?
[12:54:34] <FromDiscord> <Phil> You can't attach custom "this concept doesn't apply because of {custom explanation}" messages for when a concept failed?‚ÜµIso sad
[12:55:37] <FromDiscord> <vv_sophorose> Getting a really strange situation where the compiler hangs on this code: https://play.nim-lang.org/#ix=3OIb
[12:56:10] <FromDiscord> <vv_sophorose> Even running nimsuggest seems to hang on it, so maybe there's something going on with the AST.
[12:56:12] <FromDiscord> <Elegantbeef> Worth noting [locriacyber](https://matrix.to/#/@locriacyber:matrix.org) it only happens on `refc` with `arc/orc` it works fine
[12:56:33] <FromDiscord> <Elegantbeef> That's some complex code üòÄ
[12:57:11] <FromDiscord> <vv_sophorose> oh nevermind i think it was a faulty find-and-replace that I didn't catch
[12:57:35] <FromDiscord> <locriacyber> Is refc support deprecated?
[12:57:37] <FromDiscord> <vv_sophorose> at the same time, a circular type definition should probably be raised as a compiler error >_>
[12:57:45] <FromDiscord> <Elegantbeef> No refc isnt deprecated, i was just telling you something
[12:58:04] <FromDiscord> <Elegantbeef> It generally is but the compiler isnt overly intelligent
[12:58:47] <FromDiscord> <Elegantbeef> So whatever causes the issue is related to refc's runtime
[12:59:01] <FromDiscord> <locriacyber> I want to generate TNimNode for the C type. How do I modify and test the compiler? Is there a way to access Nim private proc by force?
[12:59:16] <FromDiscord> <Elegantbeef> you can do `import myModule {.all.}`
[12:59:40] <FromDiscord> <Elegantbeef> You clone the compiler then build it using the build script and then use `koch`
[12:59:57] <FromDiscord> <Elegantbeef> https://github.com/nim-lang/Nim#contributing
[13:02:32] <NimEventer> New thread by Chibo: Benchmarking, see https://forum.nim-lang.org/t/8868
[13:09:14] *** Joins: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de)
[13:11:04] <FromDiscord> <Phil> ... That table func is so incredibly strange
[13:11:10] <FromDiscord> <Phil> (edit) "is" => "in normis"
[13:11:13] <FromDiscord> <Phil> (edit) "normis" => "norm is"
[13:11:27] <FromDiscord> <Phil> Suddenly you have superfluous `"` around your table name string, wtf
[13:13:12] <FromDiscord> <noow> does an object having a reference to itself count as a cycle from the perspective of arc
[13:13:37] <FromDiscord> <Rika> Pretty sure it does yes
[13:13:56] <FromDiscord> <noow> but if I just set it to nil manually, should be fine, right
[13:15:00] <FromDiscord> <Rika> Actually I think it doesn‚Äôt matter if it‚Äôs a self referential cycle like that, maybe it will be fine
[13:15:12] <FromDiscord> <noow> example code
[13:15:15] <FromDiscord> <noow> sent a code paste, see https://play.nim-lang.org/#ix=3OIe
[13:15:27] <FromDiscord> <noow> oh?
[13:15:40] <FromDiscord> <noow> okay thanks
[13:15:56] <FromDiscord> <Rika> Check with valgrind if you want to ensure, I guess
[13:15:58] <FromDiscord> <noow> worst case scenario it will leak and most likely I will find it when I figure out how to use valgrind
[13:16:03] <FromDiscord> <Rika> Is this a long running program ?
[13:16:08] <FromDiscord> <noow> a language interpreter
[13:16:08] <FromDiscord> <Elegantbeef> If you want arc to watch it you'd mark it `acyclic`
[13:16:19] <FromDiscord> <Elegantbeef> But yea self referencing is an issue with arc
[13:16:39] <FromDiscord> <Rika> In reply to @Elegantbeef "But yea self referencing": I don‚Äôt see why
[13:16:55] <FromDiscord> <noow> to make it clear, there are no cycles, only self references
[13:17:05] <FromDiscord> <Rika> If it‚Äôs only holding itself (and not a larger loop like 1 -> 2 -> 1) it should be fine no?
[13:17:31] <FromDiscord> <Rika> Ah
[13:17:35] <FromDiscord> <Rika> Wait duh
[13:17:47] <FromDiscord> <Rika> It‚Äôs a problem because 1 holding 1 is count = 1
[13:18:03] <FromDiscord> <noow> i will set the field to nil for safety
[13:18:04] <FromDiscord> <Rika> It won‚Äôt collect
[13:18:15] <FromDiscord> <Rika> Or just use ORC I don‚Äôt know why you use ARC
[13:18:16] <FromDiscord> <noow> or I might as well switch to ptr, since the ownership model is clear
[13:18:28] <FromDiscord> <Elegantbeef> Just use orc is indeed the solution
[13:18:48] <FromDiscord> <noow> I don't like the idea of getting random stop the worlds
[13:18:58] <FromDiscord> <noow> although in practice most likely I wouldn't notice anything
[13:19:11] <FromDiscord> <noow> i'll just free it manually then
[13:19:24] <FromDiscord> <Elegantbeef> Orc isnt stop the world
[13:19:31] <FromDiscord> <Rika> ??
[13:19:38] <FromDiscord> <Elegantbeef> Is it stop the world?
[13:19:39] <FromDiscord> <noow> is it not a mark and sweep cycle?
[13:19:42] <FromDiscord> <Rika> No it‚Äôs not
[13:19:57] <FromDiscord> <Rika> It‚Äôs ARC with a cycle collector, not sure if generational
[13:20:12] <FromDiscord> <Rika> It should be just as fast as ARC
[13:20:15] <FromDiscord> <Elegantbeef> Orc has low latency than even refc
[13:20:16] <FromDiscord> <Rika> Or slightly slower
[13:20:25] <FromDiscord> <Rika> Latency but not throughput
[13:20:43] <FromDiscord> <Elegantbeef> Well be slower when you need to collect, but will be same where cycles arent
[13:20:50] <FromDiscord> <noow> also, orc is not deterministic
[13:21:01] <FromDiscord> <noow> although alloc isn't really deterministic either
[13:21:01] <FromDiscord> <Elegantbeef> The cycle collector isnt
[13:21:03] <FromDiscord> <Rika> Do you need determinism
[13:21:11] <FromDiscord> <Elegantbeef> The arc half is
[13:21:15] <FromDiscord> <Rika> Do you know what it means for a GC to be deterministic
[13:21:27] <FromDiscord> <noow> that every time I run the same code it collects at the same time
[13:21:47] <FromDiscord> <noow> or am I wrong?
[13:21:50] <FromDiscord> <Rika> Now is that important to you
[13:21:59] <FromDiscord> <noow> most likely not, but it sounds very cool
[13:22:05] <FromDiscord> <Rika> So what if it‚Äôs cool
[13:22:12] <FromDiscord> <Elegantbeef> > Both ARC and ORC offer deterministic performance for hard realtime systems
[13:22:16] <FromDiscord> <Rika> Water boarding at Guantanamo bay sounds cool
[13:22:19] <FromDiscord> <Elegantbeef> I dont know if that means it's deterministic
[13:22:50] <FromDiscord> <noow> but as I said, the ownership model is very clear
[13:22:55] <FromDiscord> <noow> in this one single object type
[13:23:03] <FromDiscord> <noow> so switching to orc is as much energy as making it ptr
[13:23:10] <FromDiscord> <Rika> ??
[13:23:37] <FromDiscord> <Rika> Replacing types and analysing manually if it is sound is just as hard as changing a single compiler flag?
[13:23:46] <FromDiscord> <noow> it's an object whose instances only exist in a single seq, and there is a single place in the codebase where they are popped and forgotten about
[13:23:55] <FromDiscord> <Rika> Do whichever then
[13:24:01] <FromDiscord> <Rika> Your code
[13:24:04] <FromDiscord> <Rika> You know what‚Äôs best
[13:24:28] <FromDiscord> <Elegantbeef> The fun part is you could always just use orc and if you dislike the performance you can then go and modify the code
[13:24:30] <FromDiscord> <noow> I don't, I have no idea what i'm doing, but i'm not giving up until it works so it will work eventually
[13:24:44] <FromDiscord> <noow> i guess you're right
[13:25:14] <FromDiscord> <noow> or i could just call `=destroy` manually too ?
[13:25:21] <FromDiscord> <noow> no need for ptr then if that's possible
[13:26:09] <FromDiscord> <Phil> sent a code paste, see https://play.nim-lang.org/#ix=3OIg
[13:26:41] <FromDiscord> <Elegantbeef> I dont follow?
[13:26:45] <FromDiscord> <Phil> (edit) "https://play.nim-lang.org/#ix=3OIg" => "https://play.nim-lang.org/#ix=3OIh"
[13:26:46] <FromDiscord> <Rika> Me neither
[13:27:11] <FromDiscord> <Elegantbeef> I'm fairly certain concepts cannot do `==` comparisons
[13:27:17] <FromDiscord> <Elegantbeef> So we use a macro to do it
[13:27:31] <FromDiscord> <Phil> ` model.toIdent(Field).field.getCustomPragmaVal(fk).table().sameTableName(ModelType.table())`‚ÜµIf you use that instead of the variant that uses the `getTableName` template it doesn't work
[13:27:39] <FromDiscord> <Rika> == means something subtly different in a concept doesn‚Äôt it
[13:28:12] <FromDiscord> <Elegantbeef> Hey i just work around concept issues
[13:28:14] <FromDiscord> <Rika> There‚Äôs something wrong there
[13:28:18] <FromDiscord> <Elegantbeef> I dont work here
[13:28:22] <FromDiscord> <Rika> You have an extra ‚Äú.field‚Äù at the start
[13:28:24] <FromDiscord> <Rika> Remove that
[13:29:02] <FromDiscord> <Elegantbeef> That still might not work i know I had a bunch of issues
[13:29:02] <FromDiscord> <Elegantbeef> Some self inflicted
[13:29:16] <FromDiscord> <Rika> Well I‚Äôm not saying it will work after that change
[13:29:17] <FromDiscord> <Phil> Yep, concept still returns false
[13:29:20] <FromDiscord> <Rika> I‚Äôm just saying that that‚Äôs one issue
[13:29:26] <FromDiscord> <Phil> `  model.toIdent(Field).getCustomPragmaVal(fk).table().sameTableName(ModelType.table())`
[13:29:48] <FromDiscord> <Elegantbeef> Concept evaluation is a bit off so yea
[13:29:58] <FromDiscord> <Rika> Haha experimental
[13:30:43] <FromDiscord> <Elegantbeef> I dont have the intelligence or effort to improve concepts üòÄ
[13:30:53] <FromDiscord> <Phil> I've also moved my order of what you should use:‚Üµproc > template > compileTime proc > macro
[13:31:09] <FromDiscord> <Elegantbeef> who the fuck manually annotates procs compile time üòÄ
[13:31:21] <FromDiscord> <Phil> I do so that I can believe I'm in normal nim syntax land !
[13:32:48] <FromDiscord> <Phil> It gives me this warm fuzzy feeling of safety that the proc only works at compile time as I intended!
[13:32:54] <FromDiscord> <Elegantbeef> For concepts like this i just use macros/templates untill it works
[13:33:37] <FromDiscord> <Elegantbeef> Yea compile time is lovely
[13:33:38] <FromDiscord> <Elegantbeef> Though you could've used `static: assert` in your procs
[13:33:54] <FromDiscord> <Elegantbeef> Though the concept is more readable even though slightly obfuscated
[13:34:03] <FromDiscord> <Phil> You mean the monstrosity or the "sameTableName" that I moved from template to proc?
[13:34:35] <FromDiscord> <Elegantbeef> The thing made by Dr. Frankenstein
[13:35:51] <FromDiscord> <Phil> how does that one work ?‚Üµ`static assert sourceFieldValue.hasCustomPragma(fk)`?
[13:36:07] <FromDiscord> <Elegantbeef> Yes
[13:36:14] <FromDiscord> <Elegantbeef> Not in the concept
[13:36:25] <FromDiscord> <Elegantbeef> static runs code at compile time
[13:36:44] <FromDiscord> <Elegantbeef> so static assert is a compile time assurance
[13:38:53] <FromDiscord> <Phil> Okay, yeah that compiles
[13:39:00] <FromDiscord> <Phil> Let's see if that also explodes as it should
[13:39:58] <FromDiscord> <Elegantbeef> And also if you dont want the fugly syntax you could make a template `modelWith(field, table)` that emits the type
[13:40:12] <FromDiscord> <Elegantbeef> so in this case it'd be `modelWith(myField, RandomTableName)`
[13:41:52] <FromDiscord> <Phil> Okay it explodes as I want and I just saw I can pass it a message that I want, really nice.
[13:42:03] <FromDiscord> <Phil> I think first I need to write myself a macro ala "getField"
[13:42:13] <FromDiscord> <Phil> So that I don't iterate over all fields in a type to find the one whose name matches
[13:42:17] <FromDiscord> <Elegantbeef> I personally dont really like string literals in typedefs though there are purposes
[13:42:29] <FromDiscord> <Elegantbeef> Wait does this mean you're going back to the monster?
[13:43:06] <FromDiscord> <Phil> I'm keeping both at the moment to get them both to the best I can manage and then I'll decide
[13:43:14] <FromDiscord> <Phil> (edit) "I'm keeping both at the moment to get them both to the best ... I" 03added "level"
[13:44:11] <FromDiscord> <Phil> I might even manage some stuff in the compile time proc that I can also use in the concept via some template or sth
[13:44:31] <FromDiscord> <Phil> Chances are either way that long term I'll definitely move to concepts
[13:44:34] <FromDiscord> <Phil> They are the intended path
[13:45:19] <FromDiscord> <Phil> Question is just if I move to concepts now or later
[13:45:37] <FromDiscord> <Phil> So either way that concept code is going into my repo so that I can evolve on it
[13:46:21] <FromDiscord> <Elegantbeef> That concept code was licensed under give me all your money, so you best get on that üòõ
[13:47:48] <FromDiscord> <Phil> You'll have to fight araq and flywind for it, they're currently getting it xP
[13:48:05] <FromDiscord> <Elegantbeef> They dont give me any money
[13:48:09] <FromDiscord> <Phil> Shame!
[13:50:08] <FromDiscord> <Phil> Okay holy crap the static asserts are a lot nicer than the fugly when eligs
[13:50:10] <FromDiscord> <Phil> (edit) "eligs" => "elifs"
[13:50:17] <FromDiscord> <Rika> Lol
[13:50:39] <FromDiscord> <Elegantbeef> Why would someone want to statically assure stuff
[13:50:44] <FromDiscord> <Elegantbeef> Down with the typesystem
[13:50:51] <FromDiscord> <Elegantbeef> Give me structural types and duck typing!
[13:51:57] <FromDiscord> <Rika> Quack
[13:52:36] <FromDiscord> <Phil> Use Rika for programming‚ÜµNoted down!
[13:53:39] <FromDiscord> <Elegantbeef> We'll only use tuples and do `proc doThing(a: tuple) = echo a.myField`
[13:54:30] <FromDiscord> <Rika> Oh nice idea
[13:54:46] <FromDiscord> <Rika> Time to use it
[13:55:04] <FromDiscord> <Phil> For my understanding:‚Üµ`macro toIdent(a: typed, s: static string): untyped = newDotExpr(a, ident(s))`‚ÜµThis is essentially a "getField" it gives me the... NimNode? That is the actual field, which is something I can call `getCustomPragmaVal(fk)` on
[13:55:16] <FromDiscord> <Phil> (edit) "field," => "field on the given type,"
[13:55:38] <NimEventer> New post on r/nim by jasfi: Back-end powered Flutter UI, see https://reddit.com/r/nim/comments/sl3vfh/backend_powered_flutter_ui/
[13:56:16] <FromDiscord> <Rika> Cool
[13:56:51] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06)
[13:57:02] <FromDiscord> <Elegantbeef> that generates a `a.s`
[13:57:43] <FromDiscord> <Phil> Check, perfect!
[14:08:13] <FromDiscord> <dom96> Our Nim devroom at FOSDEM starting in less than an hour! https://fosdem.org/2022/schedule/track/nim_programming_language/
[14:31:22] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[14:42:06] <FromDiscord> <Phil> I do not comprehend how to join that fosdem room in element
[14:42:47] <FromDiscord> <Phil> Wait, this time the join link worked
[14:43:09] <FromDiscord> <SecureThisShit> sent a long message, see http://ix.io/3OIv
[14:44:03] <FromDiscord> <SecureThisShit> I thought about Hooking GetCommandLineA and other functions but there may be a simpler way to do so.
[14:44:56] <FromDiscord> <isofruitus> Sadness is, when I don't trust my machine to run element, discord, thunderbird, firefox and 2 vscode instances at the same time
[14:45:38] <FromDiscord> <konsumlamm> In reply to @SecureThisShit "I'm facing some strange": "unicode" is no encoding, UTF8 is a unicode encoding
[14:47:17] <FromDiscord> <SecureThisShit> But is is possible to change the type for input arguments in general?
[15:00:09] <FromDiscord> <dom96> @everyone FOSDEM 2022 starting soon. Join here: https://matrix.to/#/#nim-devroom:fosdem.org
[15:00:43] <FromDiscord> <forlorn> üòê
[15:00:58] <FromDiscord> <cryptocode> megaping
[15:03:01] <FromDiscord> <Dot32> wait
[15:03:09] <FromDiscord> <Dot32> everyone has @everyone perms?
[15:03:31] <FromDiscord> <Oreo> Koala
[15:03:45] <FromDiscord> <Waldecir Santos> what matrix client should I use on ios ?
[15:05:39] <FromDiscord> <Phil> I'm reasonably sure element is a PWA or sth
[15:05:49] <FromDiscord> <Phil> It should do the trick
[15:06:55] <FromDiscord> <Waldecir Santos> got it thank you
[15:08:17] <FromDiscord> <Tetralux> In reply to @SecureThisShit "I thought about Hooking": This might be the console, and not your program.‚ÜµIf you run `chcp 65001` in your console and it fixes it, then that's indeed what it is.
[15:08:34] <FromDiscord> <Tetralux> (Assuming Windows)
[15:08:57] <FromDiscord> <Tetralux> If you do the system call `SetConsoleOutputCP(65001)`, that will avoid the need to run `chcp 65001` in the shell every time.
[15:09:50] <FromDiscord> <Tetralux> (The default encoding for Windows shell is not UTF-8.)
[15:09:56] <FromDiscord> <Tetralux> (edit) "not" => "_not_"
[15:10:01] <FromDiscord> <Tetralux> (edit) "_not_" => "_not_"
[15:13:20] *** Quits: pro (~pro@user/pro) (Quit: pro)
[15:13:41] <FromDiscord> <demotomohiro> When you run console Nim program on windows, it automatically change code page to 65001.
[15:14:34] <FromDiscord> <Tetralux> In reply to @demotomohiro "When you run console": Do you know where the code is that does that?
[15:15:56] <FromDiscord> <bestman 8> In reply to @Dot32 "everyone has @everyone perms?": no it seems like that is an admin
[15:16:29] <FromDiscord> <Phil> sent a code paste, see https://play.nim-lang.org/#ix=3OIG
[15:16:55] <Amun-Ra> Tetralux: system/io
[15:18:15] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[15:18:30] <Amun-Ra> when defined(windows) and appType == "console" and not defined(nimDontSetUtf8CodePage) and not defined(nimscript): const Utf8codepage = 65001; discard setConsoleOutputCP(Utf8codepage); discard setConsoleCP(Utf8codepage)
[15:20:51] *** Joins: xlebex (~Librex@p200300e44f0daeda322432fffeac047c.dip0.t-ipconnect.de)
[15:21:13] <xlebex> hi
[15:21:21] *** Parts: xlebex (~Librex@p200300e44f0daeda322432fffeac047c.dip0.t-ipconnect.de) (WeeChat 2.3)
[15:26:41] <FromDiscord> <SecureThisShit> sent a long message, see http://ix.io/3OIJ
[15:33:17] *** Joins: xlebex (~Librex@p200300e44f0daeda322432fffeac047c.dip0.t-ipconnect.de)
[15:33:34] *** Parts: xlebex (~Librex@p200300e44f0daeda322432fffeac047c.dip0.t-ipconnect.de) ()
[15:34:14] <Amun-Ra> SecureThisShit: is your app type "console"?
[15:34:31] <Amun-Ra> for if you copy that verbatim it won't work
[15:35:10] <FromDiscord> <SecureThisShit> In reply to @Amun-Ra "<@605765004796362820>: is your app": Of course
[15:37:15] <FromDiscord> <Rika> Default app type is console afaik
[15:38:54] <FromDiscord> <SecureThisShit> In reply to @Tetralux "This might be the": The strange thing is, passing the parameters to the console app itself works fine, but passing them on runtime to the program results in trash values with the wrong encoding.
[15:49:22] <Amun-Ra> what value these functions return in that case?
[15:57:59] <FromDiscord> <SecureThisShit> I think that I would need UTF-16LE, because the string "asdasd" resulted in the chinese latters Áç°ÊÖ§Êë≥‡®ç https://media.discordapp.net/attachments/371759389889003532/939497581116026890/unknown.png
[16:03:31] <FromDiscord> <Tetralux> In reply to @SecureThisShit "The strange thing is,": I don't think there's a difference between those two. Did you mean something else? üòõ
[16:11:02] <FromDiscord> <SecureThisShit> CyberChef converted the chinese letters back to asdasd via UTF-16LE üßê
[16:45:28] <FromDiscord> <Zajt> Is there a list of builtin compile-time symbols somewhere?
[16:48:26] <FromDiscord> <Rika> What do you mean? List of templates and macros?
[16:48:38] <FromDiscord> <ee7> https://nim-lang.org/docs/system.html#10 ?
[16:48:45] <FromDiscord> <Rika> Just go to the documentation for system and go to the macros and templates sections
[16:49:04] <FromDiscord> <Rika> Don‚Äôt forget that some modules are re exported too
[16:49:15] <FromDiscord> <Rika> So look at those too, io and iterators and other modules
[16:49:31] <FromDiscord> <Phil> TIL when we talk of "bind" that is another word for "assignment"
[16:49:38] <FromDiscord> <Rika> Yes
[16:49:43] <FromDiscord> <Phil> I was so effing confused
[16:49:46] <FromDiscord> <Rika> ? Where
[16:49:56] <FromDiscord> <Phil> I just was not aware of that wording
[16:50:24] <FromDiscord> <Rika> Okay
[16:50:52] <FromDiscord> <Phil> Beef gave me some decent advice yesterday because I had problems with generic procs that somehow required the modules I used the generics in to also import modules with procs I used in the generics (like typetraits for "name")
[16:51:14] <FromDiscord> <Phil> His advice was "just bind it" and I had no idea what that meant until I started reading more through the general docs
[16:51:26] <FromDiscord> <Phil> And noticed how that word was used
[16:51:28] <FromDiscord> <Rika> Bind is usually just a ‚Äúmore generic‚Äù way of saying assign yeah
[16:51:48] <FromDiscord> <Rika> When you say assign most people think ‚Äúoh with = or so?‚Äù
[16:52:15] <FromDiscord> <Rika> And no
[16:52:17] <FromDiscord> <Rika> There‚Äôs a bind keyword
[16:52:45] <FromDiscord> <Phil> I saw that and still have no idea how it's used
[16:52:53] <FromDiscord> <Rika> https://nim-lang.org/docs/manual.html#generics-bind-statement
[16:52:53] <FromDiscord> <Phil> I alleviated my issues with stuff like:‚Üµ`const name = typetraits.name`
[16:52:58] <FromDiscord> <Rika> Didn‚Äôt beef explain it to you
[16:53:09] <FromDiscord> <Phil> I didn't ask, thinking my google fu would save me
[16:53:15] <FromDiscord> <Phil> Which it didn't
[16:53:19] <FromDiscord> <Phil> My google fu was weak
[16:53:24] <FromDiscord> <Rika> Bind means ‚Äúget this symbol from the same area as I was called‚Äù
[16:53:52] <FromDiscord> <Rika> Mixin means ‚Äúwe don‚Äôt have this symbol yet, get it at the place where someone else calls this template‚Äù
[16:53:58] <FromDiscord> <Rika> Place -> scope
[16:54:04] <FromDiscord> <Rika> Area too, should be scope
[16:54:30] <FromDiscord> <Rika> Bind is ‚Äúsymbol from template definition‚Äù‚ÜµMixin is ‚Äúsymbol from template usage‚Äù
[16:54:58] <FromDiscord> <Phil> Hmmm
[16:55:12] <FromDiscord> <Rika> They‚Äôre inverses
[16:55:17] <FromDiscord> <Rika> One does the inverse of the other
[16:55:19] <FromDiscord> <Phil> Oh, I understood that
[16:55:38] <FromDiscord> <Rika> One delays symbol resolution the other expedites it
[16:55:39] <FromDiscord> <Rika> Okay
[16:55:43] <FromDiscord> <Phil> I'm trying to replace my `const name = typetraits.name` with `bind typetraits.name` or `bind name`
[16:55:52] <FromDiscord> <Phil> And trying to understand why my code breaks
[16:55:57] <FromDiscord> <Rika> I don‚Äôt know how to help you there, I don‚Äôt remember the context
[16:56:51] <FromDiscord> <Scarecrow> who pinged
[16:56:57] <FromDiscord> <Rika> Everyone ping above
[16:56:58] <FromDiscord> <Phil> I'll eventually make either a simplified example or decide to stick with const
[16:57:07] <FromDiscord> <Rika> Okay
[16:57:24] <FromDiscord> <Phil> and const looks hacky so the example will likely exist within an hour
[17:01:19] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[17:01:29] <FromDiscord> <Zajt> In reply to @Rika "What do you mean?": I mean like these for example‚Üµ`-d:strip -d:release`
[17:01:53] <FromDiscord> <Rika> In reply to @Zajt "I mean like these": Those are called defines, and afaik they‚Äôre in the manual?
[17:02:51] <FromDiscord> <Zajt> Do you have any link? I've been looking for the list of those builtin defines
[17:07:39] <FromDiscord> <Rika> Ah here
[17:07:40] <FromDiscord> <Rika> https://nim-lang.org/docs/nimc.html#compiler-usage-compileminustime-symbols
[17:08:24] <FromDiscord> <Rika> Hmm in the end it didn't list many
[17:08:47] <FromDiscord> <konsumlamm> i suspect there might not be an exhaustive list
[17:08:55] <FromDiscord> <Rika> There isn't
[17:09:01] <FromDiscord> <Rika> Because that's how defines are designed
[17:09:30] <FromDiscord> <Rika> But I was hoping for at least some more common ones
[17:09:37] <FromDiscord> <Rika> (edit) "But I was hoping for at least some more ... common" 03added "of the"
[17:10:19] <FromDiscord> <konsumlamm> at least the 1.6 changelog has a list of defines introduced there
[17:13:03] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[17:13:12] <FromDiscord> <Phil> Okay so I can't really demonstrate this in play nim lang since it needs to be in 2 separate files
[17:15:39] <FromDiscord> <Phil> sent a code paste, see https://play.nim-lang.org/#ix=3OJ6
[17:15:46] <FromDiscord> <Phil> (edit) 
[17:15:59] <FromDiscord> <Phil> (edit) "https://paste.rs/nN2" => "https://play.nim-lang.org/#ix=3OJ7"
[17:16:14] <FromDiscord> <Zajt> In reply to @Rika "https://nim-lang.org/docs/nimc.html#compiler-usage-": alright thanks, a bit annoying there is no complete list
[17:16:41] <FromDiscord> <Phil> bind explodes in my face, a const assignment doesn't, not sure why
[17:18:54] <NimEventer> New Nimble package! ratel - Zero-cost abstractions for microcontrollers, see https://github.com/PMunch/ratel
[17:21:52] <FromDiscord> <Rika> Cool
[17:22:08] <FromDiscord> <enthus1ast> are the talks recorded btw?
[17:22:23] <FromDiscord> <enthus1ast> missed much of the ecs talk unfortunately \:/
[17:22:52] <PMunch> They are recorded, and should be made available via the FOSDEM YouTube channel and the FOSDEM archive
[17:23:31] <PMunch> https://fosdem.org/2022/archives/
[17:23:42] <PMunch> Won't be up until after the conference though
[17:23:54] <PMunch> And the YouTube videos can take months
[17:26:05] <FromDiscord> <enthus1ast> mh ok
[17:51:11] <FromDiscord> <xx_ns> the post-talk Q&A sessions aren't recorded though
[17:51:23] <FromDiscord> <xx_ns> at least that's what Pietro said for the Ratel one
[17:51:42] <FromDiscord> <xx_ns> or er actually maybe it was Peter who said that
[17:51:53] <PMunch> I think the official Q&A might be recorded, but not the "hallway" Q&A in the separate room
[17:52:15] <FromDiscord> <xx_ns> ah yes, meant to say that
[17:59:03] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[18:06:51] <FromDiscord> <ee7> @Zajt Well, you can run something like this to get a dirty list of defines https://play.nim-lang.org/#ix=3OJs
[18:13:56] <FromDiscord> <ee7> Or slightly better, but still too naive (and now producing output that's too long for the playground)\: https://play.nim-lang.org/#ix=3OJw
[18:15:49] *** Joins: arkurious (~arkurious@user/arkurious)
[18:19:39] *** Quits: TakinOver (~quassel@193.27.13.170) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:52:36] <FromDiscord> <enthus1ast> puh i did not fully understand this pararules yet
[18:52:48] <FromDiscord> <enthus1ast> but seems interesting
[19:08:39] <FromDiscord> <retkid> I‚Äôve been mentioned
[19:09:12] <termer> Does nim have any list types made for concurrency? In Java there is CopyOnWriteArrayList and the ability to make lists backed by read/write locks
[19:09:26] <termer> I'm wondering if there is anything similar in the nim standard library
[19:10:38] <termer> In my case, I'm going to be implementing a pool of worker threads which take in new tasks from some sort of list
[19:20:28] <FromDiscord> <01> is nim purely functional language?
[19:20:49] <FromDiscord> <Phil> Nim is not even remotely a functional language, it's mostly procedural
[19:20:58] <FromDiscord> <01> i c
[19:21:32] <FromDiscord> <Phil> It supports some functional things such as "map" etc., but even for those there are other solutions out there
[19:21:46] <FromDiscord> <BhamidipatiNikhil> In reply to @Isofruit "Nim is not even": Due to LISP like expressive features one can even do AI in nim right??
[19:22:04] <FromDiscord> <01> why would LISP be something related to AI lol
[19:22:22] <FromDiscord> <Phil> In reply to @BhamidipatiNikhil "Due to LISP like": That's beyond my paygrade, I have done neither stuff with LISP, nor with machine learning
[19:22:36] <FromDiscord> <01> python and R are the mainstream languages used in ML, and neither are lisp dialects
[19:22:43] <FromDiscord> <BhamidipatiNikhil> i read in AI  related books that LISP and prolog are preferred for expressing AI concepts with ease...
[19:22:55] <FromDiscord> <01> nah
[19:22:57] <FromDiscord> <01> rarely
[19:23:12] <FromDiscord> <BhamidipatiNikhil> And all the examples in the book were given in LISP and Prolog....
[19:23:22] <FromDiscord> <01> lisp isn't even a programming language
[19:23:24] <FromDiscord> <01> it's dialect
[19:23:34] <FromDiscord> <BhamidipatiNikhil> Common LISP i mean
[19:23:58] <FromDiscord> <01> obviously you can do it in a lisp language, but Python and R are the main players
[19:24:03] <FromDiscord> <01> the rest is rounding error
[19:24:40] <FromDiscord> <BhamidipatiNikhil> In reply to @01 "obviously you can do": I think AI is beyond neural networks and machine learning... i accept python and r as dominant in both of those areas..
[19:24:40] <FromDiscord> <Phil> Haven't seen anything from R regarding ML yet, but yeah, Python has tons of ML libs
[19:24:43] <FromDiscord> <01> actually I think scala might have somewhat big part too?
[19:24:59] <FromDiscord> <01> In reply to @BhamidipatiNikhil "I think AI is": is it a subset of ML
[19:25:03] <FromDiscord> <BhamidipatiNikhil> but can you do automated theorem proving in python?? Prolog is the leader here!
[19:25:05] <FromDiscord> <01> (edit) "In reply to @BhamidipatiNikhil "I think AI is": ... is" 03added "AI" | 04removed "it"
[19:26:09] <FromDiscord> <Phil> AI is an incredibly overloaded word. Given that, specifying what precisely you mean there helps avoid confusion.‚ÜµRegardless, I'm out on that topic, AI is not my field
[19:26:28] <FromDiscord> <Phil> (edit) "AI is an incredibly overloaded word. Given that, specifying what precisely you mean there helps avoid confusion.‚ÜµRegardless, I'm out on that topic, AI ... is" 03added "in any of its variations"
[19:26:51] <FromDiscord> <01> nevermind, ML is subset of AI
[19:27:02] <FromDiscord> <unexploredtest> Someone pinged?
[19:27:16] <FromDiscord> <Phil> In reply to @unexploredtest "Someone pinged?": There's FOSS nim talks going
[19:27:17] <FromDiscord> <01> but yea, AI is so overloaded...
[19:27:26] <FromDiscord> <unexploredtest> In reply to @Isofruit "There's FOSS nim talks": Oh I see
[19:27:26] <FromDiscord> <Phil> That was a general ping
[19:27:36] <FromDiscord> <unexploredtest> gotcha
[19:27:56] <FromDiscord> <Phil> I'm not sure how to link you to the channel via discord, there's a link further up
[19:28:07] <FromDiscord> <Phil> That would work on a matrix client like element
[19:28:27] <FromDiscord> <unexploredtest> Yeah np, I don't really have an interest xD
[19:28:36] <FromDiscord> <unexploredtest> In reply to @Isofruit "That would work on": The meeting is held on Matrix?
[19:28:59] <FromDiscord> <BhamidipatiNikhil> In reply to @unexploredtest "The meeting is held": FOSDEM!!
[19:29:03] <FromDiscord> <01> how do i join on matrix
[19:29:16] <FromDiscord> <Phil> I barely can use matrix, let alone comprehend how it's set up. I know you can connect via matrix, so... I think it's on matrix servers and not some random other thing?
[19:29:26] <FromDiscord> <01> In reply to @Isofruit "I barely can use": Element client is simple
[19:29:38] <FromDiscord> <01> https://element.io/
[19:29:53] <FromDiscord> <01> https://github.com/vector-im/element-web open source
[19:29:54] <FromDiscord> <unexploredtest> In reply to @Isofruit "I barely can use": Ah gotcha, haven't seen many meetings held on Matrix xD
[19:29:58] <FromDiscord> <Phil> In reply to @01 "Element client is simple": Sorta kinda, but that doesn't change that it's not terribly easy to grasp when something is a discord server and if you're connecting through a bridge or whatever
[19:30:41] <FromDiscord> <unexploredtest> yeah it has its learning curve
[19:32:34] <FromDiscord> <Phil> One day I might bother putting in the brain cells to understand matrix/element, but I've got things that I care about more to write, like implementing some missing signals from my webapp
[19:34:42] <FromDiscord> <01> honestly I wish people would adopt better platforms
[19:34:53] <FromDiscord> <01> cause discord doesn't have open source servers or clients
[19:35:12] <FromDiscord> <01> and they even discourage modifying client for some reason >_>
[19:36:38] <FromDiscord> <unexploredtest> In reply to @01 "honestly I wish people": Same
[19:36:45] <FromDiscord> <Rika> They don't care
[19:36:47] <FromDiscord> <unexploredtest> But they just don't shift
[19:36:52] <FromDiscord> <unexploredtest> yeah
[19:37:03] <FromDiscord> <Rika> If it's easy to use and has their friends then that's what they use
[19:37:09] <FromDiscord> <01> tbh idk if matrix makes it any better
[19:37:19] <FromDiscord> <Rika> Lol
[19:37:22] <FromDiscord> <01> i don't assume groups are end to end encrypted
[19:37:26] <FromDiscord> <Rika> Nope
[19:37:32] <FromDiscord> <Rika> Not by default
[19:37:33] <FromDiscord> <01> then it kinda blows
[19:37:36] <FromDiscord> <01> ü§∑‚Äç‚ôÇÔ∏è
[19:37:47] <FromDiscord> <01> signal forces everything to be e2e
[19:37:47] <FromDiscord> <unexploredtest> In reply to @01 "tbh idk if matrix": The ease of use?
[19:37:58] <FromDiscord> <01> i guess
[19:37:59] <FromDiscord> <unexploredtest> In reply to @01 "i don't assume groups": It asks u
[19:38:05] <FromDiscord> <unexploredtest> In Element.io
[19:38:09] <FromDiscord> <unexploredtest> (edit) "Element.io" => "Element"
[19:38:12] <FromDiscord> <Rika> Signal is not perfect forward secret
[19:38:34] <FromDiscord> <unexploredtest> In reply to @unexploredtest "In Element": If u want to create a room, the E2EE is toggled by default
[19:39:53] <FromDiscord> <01> okay so private rooms are e2ee, but public isn't
[19:40:03] <FromDiscord> <01> then again it has little sense to e2ee public room
[19:40:09] <FromDiscord> <Rika> Doesn't really make sense does it
[19:40:09] <FromDiscord> <01> as anyone can just join anyway
[19:40:14] <FromDiscord> <unexploredtest> In reply to @01 "okay so private rooms": I mean, there's no point ig?
[19:40:20] <FromDiscord> <unexploredtest> In reply to @01 "as anyone can just": yeah
[19:40:24] <FromDiscord> <01> yep
[19:49:28] <FromDiscord> <T-taku> I want channel for Japanese
[19:49:35] <FromDiscord> <T-taku> (edit) "I want channel for Japanese ... " 03added "in server"
[19:49:42] <FromDiscord> <T-taku> (edit) "I want channel for Japanese in ... server" 03added "this"
[19:53:17] <FromDiscord> <√çcar> In reply to @dom96 "@everyone FOSDEM 2022 starting":  https://media.discordapp.net/attachments/371759389889003532/939556797151338576/ping.mp4
[19:55:12] <FromDiscord> <jos> nim needs braces!!!! :explodeblob:
[19:57:29] <PMunch> @jos, not really..
[19:57:53] <FromDiscord> <Professor Actual Factual> Nim has crooked teeth, it needs braces lol
[19:58:42] <FromDiscord> <Phil> I'll agree with pmunch here, indentation works fine
[19:59:16] <FromDiscord> <jos> i agree indentation works fine
[19:59:18] <FromDiscord> <jos> but i want nim to grow
[19:59:57] <FromDiscord> <jos> and you also may be willing to give up your beautiful, braceless, language to make it more popular
[20:00:11] <FromDiscord> <jos> the fact of the matter is, people love braces
[20:00:20] <FromDiscord> <Phil> I write java for a living
[20:00:21] <FromDiscord> <Phil> I disagree
[20:00:33] <FromDiscord> <konsumlamm> then Nim is not for people apparently
[20:01:02] <FromDiscord> <Professor Actual Factual> I think the answer depends. Python got very far without braces for a reason üôÇ
[20:01:22] <FromDiscord> <Professor Actual Factual> I actually coded in python first because it had no braces
[20:01:25] <FromDiscord> <Phil> Not a single person I have worked with so far says they give a hoot about braces, they're annoying to write out with most of the time.
[20:01:32] <FromDiscord> <Rika> Lots of people love braces, lots of them hate braces
[20:01:59] <FromDiscord> <Professor Actual Factual> Why doesn't someone just write a VScode extension that generates braces for them
[20:02:03] <FromDiscord> <Professor Actual Factual> problem solved?
[20:03:07] <FromDiscord> <konsumlamm> why don't people just stop crying about braces?
[20:03:41] <FromDiscord> <konsumlamm> if you don't like indentation based syntax, Nim is not for you, simple as that
[20:05:52] <termer> Nim's os.sleep proc applies to the current thread only, right?
[20:05:57] <termer> just making sure before I use it
[20:07:26] <FromDiscord> <BhamidipatiNikhil> Here's nim... I am cheering for it! https://media.discordapp.net/attachments/371759389889003532/939560357993779210/unknown.png
[20:25:57] <FromDiscord> <retkid> In reply to @BhamidipatiNikhil "Here's nim... I am": The little weird kid in the room
[20:26:47] <FromDiscord> <retkid> One day it won‚Äôt be Nim programming language and just be Nim
[20:27:46] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[20:46:54] <FromDiscord> <Rika> huh rust doesnt have one üëÄ
[20:54:12] <FromDiscord> <Yepoleb> Because rust bad, nim good
[21:19:24] <FromDiscord> <huantian> I did not know theres enough of LibreOffice for 2 days of talks
[21:19:47] <FromDiscord> <Rika> h uh true
[21:21:17] <FromDiscord> <huantian> And apparently only one day of python
[21:21:37] <FromDiscord> <Rika> what is "Distributions"
[21:21:41] <FromDiscord> <huantian> Man I can‚Äôt imagine using python without type hints https://media.discordapp.net/attachments/371759389889003532/939579044519895070/IMG_2309.png
[21:21:46] <FromDiscord> <Rika> "friends of openjdk"???
[21:21:54] <FromDiscord> <Rika> In reply to @huantian "Man I can‚Äôt imagine": oh BOY
[21:21:58] <FromDiscord> <huantian> In reply to @Rika "what is "Distributions"": Seems to be linux or bsd distros
[21:22:07] <FromDiscord> <huantian> Might be some interesting stuff there
[21:22:09] <FromDiscord> <Rika> i started python when 3.6 basically just came out
[21:22:22] <FromDiscord> <Rika> so literally nothing was annotated unless they used comments to do so, which isnt common
[21:22:37] <FromDiscord> <huantian> üòî
[21:22:56] <FromDiscord> <Rika> it was amazing üôÇ
[21:24:13] <FromDiscord> <huantian> Ooh there‚Äôs a talk on GNU Guix, ill probably watch that later
[21:24:26] <FromDiscord> <huantian> Wonder if there‚Äôs any NixOS talks
[21:24:56] <FromDiscord> <huantian> Talk vids haven‚Äôt been uploaded yet right
[21:25:04] <FromDiscord> <Rika> dont think so
[21:30:33] <FromDiscord> <enthus1ast> sent a long message, see http://ix.io/3OKs
[21:31:00] <FromDiscord> <enthus1ast> sent a code paste, see https://play.nim-lang.org/#ix=3OKt
[21:32:17] <FromDiscord> <enthus1ast> another thing you might want to add to your readme is how to actually compile the dll/so, i was assuming i must compile them by hand but maybe it would streamline the useage if you could mention this in the readme
[21:34:23] *** hexeme is now known as ldlework
[21:34:26] <FromDiscord> <enthus1ast> sent a code paste, see https://play.nim-lang.org/#ix=3OKv
[21:39:59] <FromDiscord> <treeform> nim should create you a dll file, this is how we do it: https://github.com/treeform/pixie/blob/master/pixie.nimble#L18
[21:40:45] <FromDiscord> <treeform> windows and linux is easy, but with mac you need the x86+arm combined dll.
[21:41:51] <FromDiscord> <enthus1ast> yes this i just did manually by calling the nim compiler
[21:42:02] <FromDiscord> <enthus1ast> what i meant is that its not written in the readme \:)
[21:42:59] <FromDiscord> <treeform> yeah we should document that
[21:43:10] <FromDiscord> <treeform> and you right the `import bumpy, chroma, unicode, vmath` is a problem as well.
[21:58:25] *** Joins: jsef5 (~jsef5@2603:9001:101:e300:254c:4414:8513:8c56)
[21:58:38] <jsef5> ooo
[21:59:23] <jsef5> @jsef5#7993: Its me!  i never knew nim had a irc channel lol
[22:25:02] <termer> it does
[22:36:06] <FromDiscord> <Zajt> sent a code paste, see https://play.nim-lang.org/#ix=3OKK
[22:36:31] <FromDiscord> <Zajt> (edit) "https://paste.rs/fvr" => "https://play.nim-lang.org/#ix=3OKL"
[22:36:32] <FromDiscord> <Zajt> (edit) "https://play.nim-lang.org/#ix=3OKL" => "https://play.nim-lang.org/#ix=3OKM"
[22:41:14] *** Joins: vicfred (~vicfred@user/vicfred)
[22:52:21] *** Quits: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de) (Remote host closed the connection)
[22:52:30] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06)
[22:52:58] *** Joins: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de)
[22:58:37] *** Joins: pro (~pro@user/pro)
[23:00:00] <FromDiscord> <nexeq> hello guys, I need ur help. I've installed nim binary from tar archive via install.sh‚Üµnim command is OK but there is no nimble
[23:00:05] <FromDiscord> <nexeq> how to solve?
[23:02:04] <FromDiscord> <@chronomatopoeia:matrix.org> I am interested too
[23:05:33] <FromDiscord> <Phil> Which Linux distribution?
[23:06:20] <FromDiscord> <nexeq> trisq... uh... ubuntu‚Üµ(@Phil)
[23:06:31] <FromDiscord> <Phil> Why not use apt?
[23:06:38] <FromDiscord> <Phil> > apt-get install nim
[23:06:43] <FromDiscord> <nexeq> old version \:)‚Üµ(@Phil)
[23:06:50] <FromDiscord> <nexeq> I need actual
[23:08:16] <FromDiscord> <Arathanis> sent a code paste, see https://play.nim-lang.org/#ix=3OKT
[23:08:19] <FromDiscord> <Arathanis> choosenim located here: https://github.com/dom96/choosenim
[23:08:24] <FromDiscord> <Arathanis> if you want to read about it
[23:08:31] <FromDiscord> <Arathanis> its a lot like `pyenv` but for nim
[23:19:36] <FromDiscord> <nexeq> noice‚Üµ(@Arathanis)
[23:19:39] <FromDiscord> <nexeq> choosenim helped
[23:21:50] <FromDiscord> <Arathanis> sweet deal, glad it worked for you :]
[23:26:18] <FromDiscord> <Zajt> I'm trying to compile a Nim file into an exe on my Linux VM. When using `--opt:size` argument in the Nim compiler, the binary runs but no beacon. If I compile without that flag, it works and gives me beacon.‚ÜµIf I use add this flag `-d:release` then I get `SIGSEGV: Illegal storage access. (Attempt to read from nil?)`‚ÜµAnyone understand why? Would be nice to use those flags to make
[23:27:17] <FromDiscord> <Zajt> I'm trying to compile a Nim file into an exe on my Linux VM. When using `--opt:size` argument in the Nim compiler, the binary runs but doesn't do what it should do. If I compile without that flag, my code does what it should do.‚ÜµIf I use add this flag `-d:release` then I get `SIGSEGV: Illegal storage access. (Attempt to read from nil?)`‚ÜµAnyone understand why? Would be nice to use those flags
[23:31:01] <FromDiscord> <enthus1ast> @Zajt\: it could be that you load a release dll into a debug application
[23:31:22] <FromDiscord> <enthus1ast> if you load it from nim
[23:31:56] <FromDiscord> <enthus1ast> afaik that made such issues in the past
[23:32:08] <FromDiscord> <Zajt> how can I check if it's a debug application I am making?
[23:32:25] <FromDiscord> <enthus1ast> do you load the dll into a nim host?
[23:33:27] <FromDiscord> <enthus1ast> compile both with  -d\:release
[23:35:00] <FromDiscord> <Zajt> I compile it on my Linux vm, then transfer to my windows vm and run the exe there
[23:35:23] <FromDiscord> <enthus1ast> so you cross compile?
[23:35:52] <FromDiscord> <enthus1ast> i mean nim hostapplication
[23:36:14] <FromDiscord> <Zajt> yeah I cross compile
[23:36:30] <FromDiscord> <enthus1ast> yeah should not make a difference
[23:37:05] <FromDiscord> <enthus1ast> both must share the same bitness (32/64) and afaik also release or debug
[23:37:58] <FromDiscord> <Zajt> yeah but I can't use release since I get that storage access if I use that flag
[23:38:18] <FromDiscord> <Zajt> and I'm compiling for 64 bit so I have this flag `--cpu=amd64` included
[23:38:54] <FromDiscord> <enthus1ast> i think you also must choose the correct mingw (if you use this)
[23:39:35] <FromDiscord> <Zajt> this is what flags I use when it works `nim c --cpu=amd64 -d:strip --hints:off -d:verbose -d:exportExe --os:windows --gcc.exe:x86_64-w64-mingw32-gcc --gcc.linkerexe:x86_64-w64-mingw32-gcc`
[23:48:41] <FromDiscord> <enthus1ast> looks good i think
[23:48:49] <FromDiscord> <enthus1ast> and the host application?
[23:48:55] <FromDiscord> <enthus1ast> ist this also 64 bit?
[23:49:31] <FromDiscord> <enthus1ast> maybe also add --gc\:arc and -d\:release
[23:55:26] <FromDiscord> <enthus1ast> sent a code paste, see https://play.nim-lang.org/#ix=3OL2
[23:55:54] <FromDiscord> <enthus1ast> sent a code paste, see https://play.nim-lang.org/#ix=3OL3
[23:56:22] <FromDiscord> <enthus1ast> am i supposed to do use seq like this?
