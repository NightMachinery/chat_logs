[00:00:11] <energizer> trace987: it is hard to help without any information
[00:00:24] <energizer> #pypy won't be able to help with that either
[00:00:33] <trace987> I want general information, if such exist
[00:00:44] <trace987> if there are tools for that
[00:00:45] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[00:00:50] <trace987> or libraries
[00:01:04] <energizer> https://doc.pypy.org/en/latest/cpython_differences.html
[00:01:33] *** Joins: Pixi (~Pixi@user/pixi)
[00:01:37] <nedbat> trace987: can you tell us anything about your program? Does it use numpy? Does it have C extensions? Is the difference in output related to floats?
[00:01:55] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 252 seconds)
[00:02:01] <trace987> 1. no 2. no 3. yes
[00:02:19] <trace987> frozenset was one if its problems
[00:02:27] *** Quits: magla (~gelignite@55d42346.access.ecotel.net) (Quit: Stay safe!)
[00:03:27] *** Quits: adiKt (uid472628@id-472628.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[00:03:39] *** Joins: metah4ck3r (meta@user/metah4ck3r)
[00:04:13] <nedbat> trace987: how so?
[00:04:22] <nedbat> trace987: is this about the order of elements in a set?
[00:04:25] <trace987> because of the link of energizer
[00:04:29] <trace987> yes
[00:04:39] <trace987> I have had solved that
[00:06:02] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[00:07:57] *** Joins: mactron (~mactron@APN-123-245-108-gprs.simobil.net)
[00:08:42] *** Joins: georgios (~georgios@user/georgios)
[00:10:04] *** Quits: metah4ck3r (meta@user/metah4ck3r) (Remote host closed the connection)
[00:12:59] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[00:15:06] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Ping timeout: 265 seconds)
[00:16:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[00:16:50] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[00:17:26] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[00:20:50] *** Joins: stealth_ (~stealth_@216-197-160-97.regn.static.sasknet.sk.ca)
[00:24:19] *** Joins: nomic (~nomic@85.203.36.16)
[00:27:27] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[00:32:50] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[00:34:29] *** Joins: zln (~zln@c80-217-230-193.bredband.tele2.se)
[00:34:29] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Quit: Bridge terminating on SIGTERM)
[00:34:39] *** Joins: white_magic (~white_mag@185.202.221.44)
[00:35:01] *** Quits: ali1234 (~al@user/ali1234) (Remote host closed the connection)
[00:35:14] <white_magic> anyone here use Pydantic? I'm trying to figure out how to use a column name is a reserved keyword in Python (in my case, it's "from")
[00:36:08] *** Quits: Leonarbro_ (~Leonet@user/leonarbro) (Ping timeout: 252 seconds)
[00:36:19] *** Joins: ali1234 (~al@user/ali1234)
[00:37:16] <white_magic> hmm.. surprisingly "from_" makes it work
[00:38:42] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[00:38:44] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.1)
[00:39:59] *** Joins: wyclif (~wyclif@user/wyclif)
[00:40:00] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:41:02] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[00:41:17] *** Lord_of_Life_ is now known as Lord_of_Life
[00:42:57] *** Joins: eniac (~eniac@gateway/tor-sasl/eniac)
[00:44:45] *** Joins: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net)
[00:44:52] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[00:45:02] *** Joins: jdmark2 (~jdmark@172.58.172.165)
[00:45:11] *** Quits: jdmark2 (~jdmark@172.58.172.165) (Read error: Connection reset by peer)
[00:45:26] *** Quits: Daemonick (~Daemonick@188.4.78.83.dsl.dyn.forthnet.gr) (Quit: Leaving)
[00:45:28] *** Joins: wyclif (~wyclif@user/wyclif)
[00:45:40] *** Quits: jdmark (~jdmark@67.8.137.130) (Ping timeout: 268 seconds)
[00:45:55] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[00:46:15] *** Joins: jdmark (~jdmark@172.58.172.165)
[00:46:31] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 252 seconds)
[00:46:53] *** Quits: jdmark (~jdmark@172.58.172.165) (Read error: Connection reset by peer)
[00:47:58] *** Joins: midnightconsole (~someone@102.165.224.166)
[00:48:01] *** Joins: jdmark (~jdmark@172.58.172.165)
[00:48:32] *** Quits: white_magic (~white_mag@185.202.221.44) (Quit: Client closed)
[00:48:59] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) ()
[00:49:13] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[00:49:23] *** Quits: jdmark (~jdmark@172.58.172.165) (Read error: Connection reset by peer)
[00:50:11] *** Joins: jdmark (~jdmark@172.58.172.165)
[00:50:26] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[00:50:56] *** Joins: wyclif (~wyclif@user/wyclif)
[00:51:21] *** Quits: jdmark (~jdmark@172.58.172.165) (Read error: Connection reset by peer)
[00:51:58] *** Quits: han-solo (~hanish@user/han-solo) (Quit: leaving)
[00:54:25] *** Joins: Samian (~Sami@user/samian)
[00:55:05] *** Joins: jdmark (~jdmark@172.58.172.165)
[00:55:23] *** Quits: midnightconsole (~someone@102.165.224.166) (Ping timeout: 252 seconds)
[00:55:56] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[00:56:26] *** Joins: wyclif (~wyclif@user/wyclif)
[00:56:34] *** Quits: Samian (~Sami@user/samian) (Client Quit)
[00:56:49] *** Joins: mactron_ (~mactron@APN-123-240-66-gprs.simobil.net)
[00:56:57] *** Quits: jdmark (~jdmark@172.58.172.165) (Client Quit)
[00:57:28] <zln> how can I change/translate characters in a ascii file to random characters in a range (only printable characters) ignoring ansi color codes ^[[0;32;40m and spaces to keep the line structures
[00:57:46] *** Quits: Gaffel (~gaffel@h-178-174-170-170.A1405.priv.bahnhof.se) (Quit: What's that?)
[00:59:29] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[00:59:47] *** Quits: mactron (~mactron@APN-123-245-108-gprs.simobil.net) (Ping timeout: 252 seconds)
[01:01:07] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[01:01:19] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[01:01:55] *** Joins: Samian (~Sami@user/samian)
[01:01:59] *** Joins: wyclif (~wyclif@user/wyclif)
[01:02:02] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:1121:b56d:30:5244) (Quit: Client closed)
[01:03:26] *** Quits: nergar (~Nergar@177.225.157.49) (Ping timeout: 265 seconds)
[01:04:24] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[01:06:15] <stealth_> zln, use https://docs.python.org/3/library/string.html#string.ascii_letters + digits and https://docs.python.org/3/library/random.html#random.randrange
[01:06:41] <zln> stealth_: thanks!
[01:06:49] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[01:06:54] *** Joins: midnightconsole (~someone@45.130.83.116)
[01:07:02] *** Joins: Julian (~tos9@python/site-packages/Julian)
[01:07:08] *** Joins: nergar (~Nergar@177.225.157.49)
[01:07:16] *** Quits: eniac (~eniac@gateway/tor-sasl/eniac) (Remote host closed the connection)
[01:07:28] *** Joins: wyclif (~wyclif@user/wyclif)
[01:08:02] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Ping timeout: 252 seconds)
[01:09:17] <nedbat> zln: you want the ansi escape sequences to be unchanged?
[01:09:31] <zln> yes, to keep the colors
[01:10:02] *** Joins: Macuser (~Macuser@216.30.159.201)
[01:10:09] <zln> and keep spaces too
[01:10:50] *** Parts: midnightconsole (~someone@45.130.83.116) ()
[01:11:45] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 276 seconds)
[01:12:26] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[01:12:37] *** Joins: eniac (~eniac@gateway/tor-sasl/eniac)
[01:12:58] *** Joins: wyclif (~wyclif@user/wyclif)
[01:14:16] <ChrisWarrick> You could go over the string character-by-character. Encountering '\033' and 'm' toggles between escape mode (copy as-is) and random mode. ' ' is always preserved.
[01:15:07] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[01:16:17] *** Joins: mdemo (~mdemo@c-73-40-53-74.hsd1.va.comcast.net)
[01:16:42] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[01:16:48] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[01:17:27] <daex> zln, ChrisWarrick: Note 'm' is not the only character that can terminate a sequence. I'm not sure if there's a proper spec since a lot of them are defacto, but the Wikipedia page for "List of ANSI escape sequences" might be useful.
[01:17:28] *** Quits: mattf (~mattf@li908-138.members.linode.com) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[01:17:45] *** Joins: mattf (mattf@2600:3c03::f03c:92ff:fea6:56a4)
[01:17:56] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[01:18:29] *** Joins: wyclif (~wyclif@user/wyclif)
[01:19:02] <daex> Oh, well the page is 'ANSI escape code', but it has a bunch of tables.
[01:19:05] *** Joins: iflema (~ian@user/iflema)
[01:21:24] *** Joins: Gaffel (~gaffel@h-178-174-170-170.a1405.priv.bahnhof.se)
[01:22:46] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[01:23:26] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[01:23:44] <zln> seems like the file uses m to end the escape codes
[01:23:59] *** Joins: wyclif (~wyclif@user/wyclif)
[01:24:25] *** Joins: Bolko (~Guest44@2a02:a465:a81:1:8cba:4560:66c9:bd9b)
[01:24:45] *** Joins: fikran (~fikran@user/fikran)
[01:24:45] <daex> IIRC 'm' is for colours and styles and stuff, the other letters are for weirder things like clearing a line. If you just need to deal with visual styling yeah just 'm' is probably fine.
[01:24:48] <zln> Then best method is using regular expressions and substitue
[01:25:04] <zln> ?
[01:26:16] *** Quits: yaalon (~yaalon@2603-8081-7002-fce2-0543-cf65-18bf-cccc.res6.spectrum.com) (Remote host closed the connection)
[01:26:20] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[01:26:42] *** Joins: midnightconsole (~midnightc@45.130.83.116)
[01:26:51] *** Joins: yaalon (~yaalon@2603-8081-7002-fce2-0543-cf65-18bf-cccc.res6.spectrum.com)
[01:27:30] *** Joins: Celeo (~Celeo@user/celeo)
[01:28:13] *** Joins: zebrag (~chris@user/zebrag)
[01:28:56] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[01:29:29] *** Joins: wyclif (~wyclif@user/wyclif)
[01:29:38] <midnightconsole> timestamp_format = %H:%M
[01:29:57] *** Parts: midnightconsole (~midnightc@45.130.83.116) ()
[01:30:32] *** Quits: int3l (~int3l@78-83-116-167.spectrumnet.bg) (Quit: WeeChat 3.3)
[01:30:37] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[01:31:50] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[01:33:29] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Client Quit)
[01:33:29] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[01:34:15] *** Quits: brelod (~me@90.244.150.142) (Quit: leaving)
[01:34:19] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[01:34:37] <Bolko> Any good experienced python coders that want to help a new guy?
[01:34:40] *** Joins: midnightconsole (~midnightc@45.130.83.116)
[01:34:44] *** Quits: yaalon (~yaalon@2603-8081-7002-fce2-0543-cf65-18bf-cccc.res6.spectrum.com) (Remote host closed the connection)
[01:34:57] <mefistofeles> Bolko: sure, just ask
[01:35:01] *** Joins: wyclif (~wyclif@user/wyclif)
[01:35:20] *** Joins: yaalon (~yaalon@2603-8081-7002-fce2-0543-cf65-18bf-cccc.res6.spectrum.com)
[01:35:39] <Bolko> sent you a pm :)
[01:36:57] <ChrisWarrick> (it’s best to just ask questions in the channel instead of using PMs.)
[01:37:04] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 252 seconds)
[01:37:08] *** Quits: kyooo (~kyooo@2a02:a31d:a13c:5600:559d:f748:905d:cda9) (Quit: Leaving)
[01:37:39] <Bolko> I prefer to pm due to the nature of my questions
[01:37:48] <grym> Bolko: you're unlikely to get help, then
[01:38:00] <ChrisWarrick> what is the nature of those questions?
[01:38:01] <grym> what privaleges one internet rando over another, anyway :)
[01:38:17] *** Quits: mactron_ (~mactron@APN-123-240-66-gprs.simobil.net) (Quit: Leaving)
[01:38:27] <Bolko> I recently started learning python coming from autohotkey where i made color recognition bots
[01:38:46] <Bolko> Now i have a specific function that has a autohotkey example and code, but also a python example and code
[01:38:49] <ChrisWarrick> beginner questions are completely fine in this channel if that’s what you’re trying to say
[01:39:08] <ChrisWarrick> and not many people might understand autohotkey code
[01:39:08] <Bolko> The AHK worked perfectly fine and got it to work np, but now the python version is acting up abit for me
[01:39:09] <grym> normal, even
[01:39:28] <Bolko> This function im talking about is in both languages available by author
[01:40:00] <Bolko> Chris could i pm you real quick ?
[01:40:02] *** Quits: yaalon (~yaalon@2603-8081-7002-fce2-0543-cf65-18bf-cccc.res6.spectrum.com) (Ping timeout: 250 seconds)
[01:40:06] <ChrisWarrick> no
[01:40:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[01:40:11] <ChrisWarrick> please ask questions in the channel
[01:40:19] <Bolko> I cant share the function public my friend
[01:40:31] *** Joins: wyclif (~wyclif@user/wyclif)
[01:40:40] <Bolko> Thats the whole point im trying to make from the beginning :P
[01:40:46] <mefistofeles> Bolko: then you make a minimal working example that shows the issue
[01:40:52] <Bolko> m
[01:41:02] <Bolko> Mate its like expert level physics and shit hahaha
[01:41:12] <mefistofeles> try us :)
[01:41:22] <grym> Bolko: sharing it with anyone here in PM counts as public, too :P
[01:41:36] <Bolko> Fuck it then man god may lead me nobody in here is solid man
[01:41:41] <Bolko> only dodging to bad man
[01:41:44] *** Joins: audiobirb (~audio@2603-8081-1800-b44d-869e-11b0-904e-fa1b.res6.spectrum.com)
[01:41:46] <Bolko> Respect and take care
[01:44:16] *** Joins: yaalon (~yaalon@2603-8081-7002-fce2-0543-cf65-18bf-cccc.res6.spectrum.com)
[01:44:49] *** Quits: Samian (~Sami@user/samian) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:45:13] *** Joins: ph88 (~ph88@2a02:8109:9e00:7e5c:7cb7:e630:89c:9583)
[01:45:26] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[01:46:03] *** Joins: wyclif (~wyclif@user/wyclif)
[01:46:58] <akk> Making a minimal working example is usually a good thing anyway. Often just making the example shows you what's causing the bug.
[01:47:45] <akk> "Oh, hmm, the problem doesn't happen in my example. Now what's different between the example and the real code...?"
[01:48:42] *** Quits: yaalon (~yaalon@2603-8081-7002-fce2-0543-cf65-18bf-cccc.res6.spectrum.com) (Ping timeout: 260 seconds)
[01:49:34] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[01:50:48] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[01:51:19] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Quit: Leaving)
[01:51:45] *** Joins: wyclif (~wyclif@user/wyclif)
[01:53:20] *** Joins: eniac_ (~eniac@gateway/tor-sasl/eniac)
[01:53:43] *** Joins: clarjon1 (~clarjon1@user/clarjon1)
[01:53:51] *** Quits: eniac (~eniac@gateway/tor-sasl/eniac) (Remote host closed the connection)
[01:55:02] *** Joins: Samian (~Sami@user/samian)
[01:55:40] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[01:56:36] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[01:56:38] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 260 seconds)
[01:57:14] *** Joins: wyclif (~wyclif@user/wyclif)
[01:57:57] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[01:57:58] *** Joins: eniac__ (~eniac@gateway/tor-sasl/eniac)
[01:58:33] *** Quits: eniac_ (~eniac@gateway/tor-sasl/eniac) (Ping timeout: 276 seconds)
[01:58:54] *** Quits: Bolko (~Guest44@2a02:a465:a81:1:8cba:4560:66c9:bd9b) (Quit: Client closed)
[01:59:20] <canurabus> in python do context managers generally propagate exceptions or suppress them? Im using the common "with open(some_file) as f" pattern. If opening the file raises an error, I expect to see an exception, but I have the luxury of knowing any resources (like the file handle) were taken care of
[01:59:40] <canurabus> Is that understanding correct? I dont see why you would use a context manager over try/finally
[02:00:33] *** Joins: yaalon (~yaalon@2603-8081-7002-fce2-0543-cf65-18bf-cccc.res6.spectrum.com)
[02:00:48] <ChrisWarrick> canurabus: if you use try/finally, you still need to remember to close the file in your finally block
[02:00:57] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 265 seconds)
[02:01:08] <jinsun> try finally is just more code, ugly and easy to get wrong
[02:01:08] <nedbat> canurabus: you will see exceptions from the open in that case.  in fact, the context manager can't suppress an exception from "open" in that case.
[02:01:15] <mawk> canurabus: the context manager releases the resource for you
[02:01:29] <mawk> it's not something to catch all exceptions
[02:01:45] *** Quits: goldfish (~goldfish@user/goldfish) (Read error: Connection reset by peer)
[02:01:49] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[02:02:20] <mawk> canurabus: but otherwise they're more or less the same yes, that's the principle of syntactic sugar
[02:02:28] *** Joins: alex11 (~alex11@user/alex11)
[02:02:36] <mawk> you could also ask "why use for when you can use while"
[02:02:45] *** Joins: wyclif (~wyclif@user/wyclif)
[02:02:47] <canurabus> In some cases though context managers would suppress the exception right (not with file open I guess). And try/finally isn't more code if I want to handle the exception from a file open attempt, then I'd have to wrap the with statement no? (try: with open(...) as f: except...)
[02:02:47] *** Quits: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com) (Read error: Connection reset by peer)
[02:03:02] <mawk> using the sugar you make less errors, write prettier code, etc
[02:03:21] <mawk> why do you say it suppresses the exception?
[02:03:26] <canurabus> my code looks kinda wonky right now because I have my context manager "with" statements wrapped in try/except. Seemed wrong
[02:03:28] *** Joins: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com)
[02:03:54] *** Quits: midnightconsole (~midnightc@45.130.83.116) (Quit: leaving)
[02:04:00] <mawk> the context manager doesn't suppress the exception; unless that's its specific purpose
[02:04:05] <ChrisWarrick> canurabus: what exceptions are you catching?
[02:04:16] *** Joins: driib5 (~driib@185.195.233.163)
[02:04:20] <canurabus> mawk: I dont know if it does, but it looks like __exit__ lets you if you are writing your own (unless I misunderstand it). So if I am using some other library that has a context manager, it could do something like not re-raise any errors
[02:04:37] <mawk> yes, you can suppress the exception if you are writing your own context manager
[02:04:47] <canurabus> for file, IOError, and I'm using grpc so there's a grpc.Error for that
[02:04:47] <mawk> but that doesn't mean you should
[02:05:18] <ChrisWarrick> canurabus: if you have meaningful handling for those exceptions, then it makes sense to have a with inside a try/except
[02:05:22] <canurabus> Ok put another way, is it a code smell if my code wraps all with statements in try/except blocks?
[02:05:23] <mawk> you could check with your external library documentation, but I'm pretty sure in general the exceptions are not caught
[02:05:28] <bjs> canurabus: you can write contextmanagers to do either
[02:05:33] *** Joins: goldfish (~goldfish@user/goldfish)
[02:05:37] *** Quits: Samian (~Sami@user/samian) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:05:45] <nedbat> canurabus: it depends why you wrapped them.
[02:05:53] <ChrisWarrick> canurabus: if you have meaningful handling for the errors, it is okay. print("error") does not count as meaningful error handling.
[02:05:55] <mawk> I don't think it's a code smell canurabus , the with block can raise exceptions, so if you need to catch them you have to do a try block of course
[02:06:09] <bjs> canurabus: `with open(...): <block>` for example doesn't suppress any exceptions from inside the block.  But you can write contextmanagers that do (e.g. `with contextlib.suppress(...): ...`)
[02:06:16] *** Quits: driib (~driib@185.195.233.164) (Ping timeout: 252 seconds)
[02:06:16] *** driib5 is now known as driib
[02:06:32] <nedbat> canurabus: exceptions from the "with" expression are very different than exception in the "with" block.
[02:06:50] <nedbat> canurabus: the context manager gets a look at the latter. it doesn't get a look at the former.
[02:07:14] <canurabus> its for meaningful action, like issuing a reconnect or creating a file if its not found, etc.
[02:07:20] <bjs> canurabus: and note that `with open(...) as f: <block>` the "open(...)" part is *not* inside the context manager
[02:07:22] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[02:07:36] <bjs> canurabus: if open fails with FileNotFound, then it never even reaches the `with` or contextmanager parts at all.
[02:08:16] *** Joins: wyclif (~wyclif@user/wyclif)
[02:08:20] <canurabus> hmm now im confused
[02:08:54] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:eca0:82c6:1c95:331c) (Remote host closed the connection)
[02:09:14] <bjs> canurabus: `with <expr>: <block>` the <block> part is what is "managed" or "inside" the context manager.  the expr itself is not (and can't be really)
[02:09:16] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:09:48] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:5d10:8850:6285:4e0e)
[02:10:02] *** Joins: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net)
[02:11:35] <mawk> but you can to an extent bjs right? I agree if you have something like « with f(g()) » then you can't catch it, but if it's « with f(x) » then you can
[02:12:00] <bjs> mawk: if it's `with f(x)` then the f(x) part is executed before the with is executed
[02:12:02] <mawk> then both in the __init__ and the __enter__ of f you can catch exceptions if they happen
[02:12:14] <bjs> so if it fails, the with never happens and the __enter__ and __exit__ aren't called
[02:12:15] <mawk> right
[02:12:23] <mawk> yeah
[02:12:41] <bjs> mawk: so i don't see how to do what you say
[02:12:46] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:12:47] <mawk> for a class used as context manager, then f(x) is the constructor, so you could catch errors there
[02:12:48] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[02:12:56] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[02:13:02] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[02:13:13] <bjs> mawk: I mean if f is a function or a class, then you can just write a try/except inside the `def` or the `__init__`
[02:13:20] <mawk> yeah
[02:13:23] <bjs> but that's not anything to do with the `with`
[02:13:26] <mawk> that's what I meant
[02:13:27] <mawk> indeed
[02:13:38] <bjs> okay :)
[02:13:45] *** Joins: wyclif (~wyclif@user/wyclif)
[02:13:52] <bjs> I was confused because you talked about the __enter__ of f
[02:14:29] <jinsun> canurabus: you cannot even do f.close() in finally if you try: f = open(...) and you get FileNotFoundError because f is not defined
[02:14:36] <mawk> ah right, I was referring to the method __enter__ of the class f; when f is a class
[02:14:43] <bjs> mawk: what about it?
[02:14:48] <jinsun> canurabus: you will have to do another try finally inside your try after you open the file, and at that point just use with statement
[02:15:09] <mawk> ah no I don't have extra things to say bjs , I was just clarifying what I meant by __enter__ of f
[02:15:40] <bjs> mawk: I'm still confused,  if you say `with f(x): ` and f is a class. if f(x) fails then __enter__ won't be called
[02:15:50] *** loki_val is now known as crabbedhaloablut
[02:15:58] <bjs> if it fails e.g. because of errors from the constructor
[02:16:04] *** Quits: fedenix_ (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[02:16:05] <mawk> yeah
[02:16:18] <mawk> but then you can catch these errors in the __init__
[02:16:40] <mawk> but yes I agree it's not exactly related to with
[02:17:06] *** Joins: y1n (~y1n@77.119.163.151.wireless.dyn.drei.com)
[02:17:24] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[02:17:57] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::2612) (Quit: Konversation terminated!)
[02:18:26] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[02:18:56] <mawk> the person that wrote the __enter__ is probably the same that wrote the __init__, so if an exception needs to be caught as early as when f(x) is called, then it can be in the __init__
[02:19:18] *** Joins: wyclif (~wyclif@user/wyclif)
[02:19:42] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[02:19:45] <stealth_> canurabus, `open('/bad-file')` will raise error same as `with open('/bad-file')` has nothing to do with context manager.
[02:19:58] *** Quits: digilink (~digilink@user/digilink) (Ping timeout: 260 seconds)
[02:21:54] *** Joins: digilink (~digilink@user/digilink)
[02:23:52] *** Quits: yaalon (~yaalon@2603-8081-7002-fce2-0543-cf65-18bf-cccc.res6.spectrum.com) (Remote host closed the connection)
[02:23:58] *** Quits: goldfish (~goldfish@user/goldfish) (Remote host closed the connection)
[02:24:03] <stealth_> canardo, if you want to make sure file exist, you `if os.path.exists(file_path): with open(file_path)...`
[02:24:11] <stealth_> canurabus, ^
[02:24:38] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:5d10:8850:6285:4e0e) (Ping timeout: 260 seconds)
[02:26:41] *** Quits: upsala (~zcb@185.213.155.160) (Ping timeout: 252 seconds)
[02:27:26] <mawk> pathlib is good too
[02:27:33] <canurabus> ok
[02:27:40] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[02:27:47] <mawk> if Path(...).exists:
[02:27:48] <canurabus> it looks a bit cleaner i fi check with os.path.exists
[02:27:52] <nedbat> stealth_: it's not good to check then open.  better to catch the exception
[02:28:10] <mawk> yeah actually forget about what I said, I agree with nedbat
[02:28:16] <jinsun> when opening files it is better to try except than the if file exists check though, because the file may get deleted between the check and open
[02:28:24] <mawk> it introduces at least a bug, if not a security vulnerability
[02:28:26] *** Joins: wyclif (~wyclif@user/wyclif)
[02:28:34] <mawk> to check before opening
[02:28:59] <mawk> it's part of this class of bugs/vulnerabilities: https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use
[02:30:34] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[02:30:56] <stealth_> i this case you are checking and opening right away, not later down the road
[02:31:17] <nedbat> stealth_: it's *probably* fine, but keep in mind, there is a small time between the check and the open.
[02:31:20] <mawk> even then it's a problem stealth_
[02:31:22] <jinsun> some other thread / program can delete it
[02:31:35] <jinsun> or it might be on USB and you just eject it
[02:31:43] *** Quits: Celeo (~Celeo@user/celeo) (Quit: Leaving)
[02:31:54] <mawk> there are a lot of creative ways the attacker can slow down your process for the bug to trigger
[02:32:19] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[02:32:42] <stealth_> if a attacker can do all that, you probably have bigger thing to worry about
[02:33:17] <mawk> well yes attackers exist, but that's precisely the reason why you don't want to leave bugs in your software
[02:33:20] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[02:33:42] *** Quits: Powerhouse6666 (~Powerhous@security.orcacomputers.com) (Remote host closed the connection)
[02:33:59] *** Joins: wyclif (~wyclif@user/wyclif)
[02:34:06] <jinsun> the other threads / programs can be yours too, and you probably don't want this program to crash because of what those do (otherwise you just open without even the if)
[02:35:18] <stealth_> checking if a file exist before opening? i don't see it as a bug, you are checking for into in stat anyways, attacker will have to create a new file and flush metadata before the so called hijacking, i don't see that happening before you open a new file
[02:36:53] <jinsun> it is less about security and more about reliability I think, try except is more reliable and it gurantees to catch FileNotFound, if does not
[02:38:11] *** Joins: dre (~dre@2001:8003:c932:c301:e5c5:40af:66d5:e309)
[02:38:25] <nedbat> stealth_: can we just acknowledge that there is a tiny window where the file could be deleted somehow?
[02:38:33] <stealth_> both ways use the stat info
[02:38:36] <nedbat> stealth_: and that window doesn't exist if you catch the exception?
[02:38:38] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[02:39:06] <stealth_> nedbat, even if the file was deleted then it would raise error
[02:39:21] <nedbat> stealth_: but will you catch that error?
[02:39:27] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[02:39:31] *** Joins: wyclif (~wyclif@user/wyclif)
[02:39:48] <nedbat> stealth_: whatever you wanted to do when the file wasn't there, you won't do it if you already checked that the file exists.
[02:39:48] <jinsun> butt you have that if condition because you don't want the error, if you are fine with throwing the error then no need to even check
[02:40:09] <jinsun> *but :D
[02:40:43] *** Joins: MrBungle (~MrBungle@2604:3d08:1788:dc00:8d7a:8984:59ac:7d9d)
[02:40:53] *** Parts: jaggz (~jaggz@user/jaggz) (Leaving)
[02:41:07] <mawk> <stealth_> checking if a file exist before opening? i don't see it as a bug, you are checking for into in stat anyways, attacker will have to create a new file and flush metadata before the so called hijacking, i don't see that happening before you open a new file
[02:41:15] <mawk> maybe you don't see it happening, but it totally happens
[02:41:23] <stealth_> it seems too much like paranoia! python stdlib is fully of `if os.path.exists`...
[02:41:29] <mawk> it's a real bug that is really exploited in nature, and that is also really easy to mitigate
[02:41:49] <mawk> and also, there is no reason to check if a path exists or not, you just catch the exception
[02:42:03] <mawk> it's "the" programming style you use in python
[02:42:09] <stealth_> i just did a search in stdlib and it found over 692+ results for os.path.exists being used
[02:43:04] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 252 seconds)
[02:43:05] <jinsun> it is fine to check if path exists if you don't use it do decide whether to open it later
[02:43:10] <mawk> maybe it's 692 bugs, who knows
[02:44:05] <stealth_> na, metadata doesn't update that fast, even if the file got deleted you would be linked to deleted file and you would be reading/writing to deleted file.
[02:44:14] <jinsun> but if you wanted to check just to avoid FileNotFoundError then it was not very effective, just try it and see if it fails
[02:44:17] <mawk> os.path.exists may seem innocuous, i.e. at worst you have a bug and not a security vulnerability; but if it's things like access(2) (i.e. to check if you have access to a file) then you can do nasty things
[02:44:17] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[02:44:33] <mawk> what do you mean by metadata doesn't update that fast stealth_
[02:44:45] <mawk> it's not relevant, that kind of bug exists and is exploited
[02:45:02] *** Joins: wyclif (~wyclif@user/wyclif)
[02:45:04] <mawk> you can force metadata update; you can slow down the program, and these are only two things on the top of my head
[02:45:06] <nedbat> stealth_: this is a real thing. You don't have to consider it if you don't want to.  but don't argue that it can't happen.
[02:45:37] <mawk> also metadata doesn't have to be updated on disk for it to be accessible by another program
[02:45:42] <mawk> so I don't get what you mean by that
[02:45:46] <nedbat> stealth_: and it might be an attacker. You might have a multi-process cached file on-demand thing, with your own code creating and removing files.
[02:45:49] <stealth_> nedbat, i mean would be more worried about how the attacker got into your system to do such a thing in the first place?
[02:46:05] <nedbat> stealth_: defense in depth is about fixing problems all over.
[02:46:15] <nedbat> stealth_: and it might not be an attacker.
[02:46:16] <mawk> so, let's never do any vulnerability mitigation in software and leave all the work to the network security guys?
[02:46:46] *** Joins: djapo (~archangel@user/djapo)
[02:46:58] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[02:47:42] <stealth_> so now we are down to bad coders
[02:47:48] <nedbat> stealth_: please stop
[02:48:12] <nedbat> stealth_: there are two code structures here. One has a window where something could happen. the other doesn't.
[02:48:22] <nedbat> stealth_: why prefer the one with the window?
[02:49:22] <stealth_> both exists and open uses stat to check if file exists first anyways
[02:49:31] <stealth_> how else would open know that file doesn't exist?
[02:49:39] <mawk> by just trying
[02:49:39] <nedbat> stealth_: it;s not about stat. it's about whether your code will handle the error or not.
[02:49:40] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 252 seconds)
[02:49:42] <jinsun> so why use exists and not just open?
[02:49:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[02:49:52] <mawk> stealth_: and when the open(2) syscall fails, then the program knows the file doesn't exist
[02:49:56] <mawk> you don't have to check before opening
[02:50:02] <nedbat> stealth_: if you check first, open can still raise an error, which you will not handle.
[02:50:34] *** Joins: wyclif (~wyclif@user/wyclif)
[02:50:37] <mawk> and not checking eliminates the bug; and yeah as nedbat said you would still have to catch open(2) errors (for instance if the file has been deleted, but also if you don't have access to it)
[02:50:52] <mawk> so why bother checking beforehand if you also have to check the return of open() after?
[02:50:54] <nedbat> or  if the disk failed, or the network connection to the NAS went flaky
[02:51:32] *** Joins: Wulf (~Wulf@user/wulf)
[02:51:35] <stealth_> jinsun, ya, you could open and catch error, that would be better yes.
[02:51:59] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 252 seconds)
[02:52:21] <mawk> a way to eliminate many instances of this bug is to open the file, and do all operations on the file descriptor
[02:52:36] <stealth_> i just don't think exist + open is slower then attacker getting in there in time to change. most likely someonew riting bad code would tricker their own attacker.
[02:52:38] <mawk> and it's not just a trick to prevent bugs, it's the good way to code with files
[02:53:06] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[02:53:08] <stealth_> writing*
[02:53:11] <mawk> exist + open has a bug which is exploitable; just open doesn't have the bug
[02:53:28] <jinsun> yes, finally you got it :D, now hopefully canurabus also saw this discussion and didn't go with the if exists suggestion
[02:53:39] <stealth_> mawk, as i said they both use stats to check if fix exist
[02:53:54] <nedbat> stealth_: you are missing the point. it's not about time, or using stats
[02:54:52] <stealth_> are any of you going to file that 600+ bug reports with python stdlib now?
[02:55:34] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[02:55:56] <jinsun> it is not a bug to use os.path.exists, it is a bug to do os.path.exists + open instead of try: open
[02:56:04] *** Joins: wyclif (~wyclif@user/wyclif)
[02:57:11] <nedbat> stealth_: it could be interesting to look at how it's used in the stdlib.
[02:57:22] <stealth_> also how does this attacker create a file that belongs to you as a user? cause then it would raise permission error
[02:57:56] <nedbat> stealth_: you are still missing the point
[02:59:01] <stealth_> nedbat, i just finished writting a wrapper for statx, i know how these things work as the low level.
[02:59:27] <nedbat> stealth_: it's not about detecting that the file is missing. It's about structuring your own code so that you can handle the missing-file case.
[02:59:40] <stealth_> nedbat, to properly exists and create you would ned to use attomic lock, i doubte anyone is using those
[02:59:49] <stealth_> well for the most part
[02:59:55] <nedbat> stealth_: ok, just stop, if you don't want to think about the point.
[03:00:53] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[03:00:57] <stealth_> nedbat, i get the point, i just don't think its as solid as it seems.
[03:01:28] <nedbat> stealth_: but you acknowledge that check and open has a window where an unhandled error could happen.  and try-open does not.  Right?
[03:01:32] *** Joins: wyclif (~wyclif@user/wyclif)
[03:02:11] <stealth_> nedbat, in theory
[03:02:20] <nedbat> stealth_: good, then we are done.
[03:02:47] <nedbat> stealth_: it's not about attackers. lots of things could happen in that window.
[03:03:30] *** Joins: djapo (~archangel@user/djapo)
[03:04:32] <energizer> i often wonder how the 'best practice' gets chosen when there's a spectrum of safety available. like we don't usually use `atomicwrites` but we do use try-open
[03:05:07] <stealth_> nedbat, yes, everyone point becomes invalid unless you are going to beyond your way to atomically lock create rename a file
[03:05:19] *** Quits: georgios (~georgios@user/georgios) (Quit: Konversation terminated!)
[03:05:42] <mawk> open doesn't check if it exists first stealth_
[03:05:46] <mawk> where did you see this?
[03:05:48] <stealth_> energizer, most of the best practice is whatever bunch of people agree on atm
[03:05:50] <nedbat> stealth_: i don't know what "everyone point becomes invalid" means?
[03:06:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[03:06:34] <stealth_> mawk, how else would open know if a file exists or not? it has to check with filesystem
[03:06:38] <mawk> you don't need to lock to atomically rename a file, but yes that is the best practice, I do it, and you should too
[03:06:45] *** Quits: fr_sleepy (~fr_sleepy@209.94.138.128) (Remote host closed the connection)
[03:06:47] <mawk> no stealth_ , it just tries to open it
[03:07:03] *** Joins: wyclif (~wyclif@user/wyclif)
[03:07:04] <mawk> I looked in the cpython source code to be sure, it just calls open() on it and that's it
[03:07:08] <jinsun> energizer: you can choose to not try open, then just open without try or if exists, here we are just saying if exits is useless, if you want to handle errors in open better to try open
[03:07:18] <mawk> here exactly: https://github.com/python/cpython/blob/main/Modules/_io/fileio.c#L363
[03:07:24] <stealth_> mawk, i am talking about what open does internally
[03:07:33] <mawk> open(2) is a syscall stealth_ , it happens in the kernel
[03:07:39] <mawk> in the kernel it is done atomically
[03:07:42] *** Joins: emerent_ (~quassel@p200300cd57485592ba27ebfffed28a59.dip0.t-ipconnect.de)
[03:07:42] *** emerent is now known as Guest3055
[03:07:42] *** emerent_ is now known as emerent
[03:07:44] <nedbat> it doesn't matter what open does internally.
[03:07:52] *** Quits: Guest3055 (~quassel@p200300cd5748553cba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[03:07:58] <energizer> jinsun: sure
[03:08:08] <stealth_> mawk, kernel still has to get filesystem (maybe i am using the wrong word here) to tell it
[03:08:17] <nedbat> everyone has agreed on the safest structure of the code, even stealth_
[03:08:34] <mawk> stealth_: yes, but since it's in the kernel it is atomic, and it is very fast
[03:08:47] <stealth_> mawk, lol
[03:08:54] <mawk> the bug you have in python does not exist when the kernel does it
[03:09:03] <mawk> because it does it atomically, which is the point
[03:09:10] <mawk> there is nothing to lol about
[03:09:48] <nedbat> mawk: we don't have to talk about this anymore
[03:10:14] <mawk> yeah
[03:10:29] <stealth_> ya, i think we all made our points, just take security as far as you can throw it.
[03:11:03] <nedbat> (it's not about attackers or security)
[03:11:32] <mawk> when your company has its first CVE number because of you stealth_ , you will remember this day
[03:11:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[03:11:50] <mawk> cybersecurity is not a joke field, and attacks can be sophisticated beyond your imagination
[03:12:00] <stealth_> mawk, i don't even use open :|
[03:12:17] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[03:12:17] <mawk> don't worry, you can write bugs everywhere, no just with open
[03:12:34] *** Joins: wyclif (~wyclif@user/wyclif)
[03:12:38] <mawk> including TOCTOU bugs; the concept applies widely
[03:13:03] <stealth_> mawk, can you say 100% that you write codes with no bugs?
[03:13:10] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 260 seconds)
[03:13:20] <mawk> no, but at least I can say that I 100% do not add intentional bugs in my code
[03:13:33] <mawk> which is like, the bare minimum
[03:13:40] <nedbat> stealth_: this is disingenuous. no one said they write code with no bugs.
[03:13:54] <nedbat> stealth_: we were trying to point out a potential bug, and how to avoid it.
[03:14:05] <mawk> but your approach of "attackers are a legend, so I will leave this code like this" is 100% adding intentional bugs to the code
[03:14:06] <nedbat> mawk: be nice
[03:14:42] <stealth_> nedbat, well there is also a bug in the method you/other were recommending as well!
[03:14:59] <mawk> which one?
[03:15:05] <nedbat> stealth_: we are always interested in improving our techniques.
[03:15:21] <nedbat> stealth_: but i really hope you aren't going to say, "open has to use stat also" because that is missing the point.
[03:15:29] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Client Quit)
[03:16:45] <mawk> "open first, check later" solves the race condition; the fact the *kernel* has to check for the file existence is irrelevant: because the kernel does not use os.exist to check, and because open() is atomic, the kernel takes internal locks to prevent the file from being replaced/deleted during opening
[03:17:04] <nedbat> mawk: that's also missing the point.
[03:17:17] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[03:17:21] <nedbat> mawk: whatever the kernel does, it's all inside the python open() call, which is inside the try, so it will be handled.
[03:17:35] *** Joins: Samian (~Sami@user/samian)
[03:18:04] *** Joins: wyclif (~wyclif@user/wyclif)
[03:18:36] <mawk> yes in that specific case
[03:19:01] <mawk> but the class of bug is wider than just exists -> open, it could also be access -> open
[03:19:16] <nedbat> mawk: right, any kind of pre-check
[03:19:30] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[03:19:39] <stealth_> how does kernel know all that mawk?
[03:19:48] <nedbat> stealth_: it doesn't matter
[03:19:56] <stealth_> lol
[03:20:15] <stealth_> yes it does, if everythings gets water from the same well, you can't said it doesn't matter
[03:20:35] <mawk> how does the kernel know what? anyway the kernel is the master of your pc, how do you expect it to not know something?
[03:20:41] <nedbat> stealth_: *the point* is to put the entire open() into a try, so that anything that goes wrong during the open, will be handled.
[03:20:54] <nedbat> mawk, stealth_: i'm declaring this conversation over.
[03:20:59] <nedbat> we've gone in circles
[03:21:05] <nedbat> we're all saying the same things. everyone stop
[03:21:40] <nedbat> or take it to -offtopic if you really want to continue
[03:21:50] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:22:04] *** Joins: CodePoint (~BitShift@2600:1700:3070:3790::29)
[03:22:47] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[03:23:16] *** Quits: ph88 (~ph88@2a02:8109:9e00:7e5c:7cb7:e630:89c:9583) (Ping timeout: 252 seconds)
[03:23:38] *** Joins: wyclif (~wyclif@user/wyclif)
[03:28:26] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[03:29:07] *** Joins: wyclif (~wyclif@user/wyclif)
[03:29:24] *** Quits: Samian (~Sami@user/samian) (Ping timeout: 265 seconds)
[03:30:03] *** Quits: waxfire (~waxfire@65.119.2.240) (Quit: The Lounge - https://thelounge.chat)
[03:30:16] *** Joins: waxfire (~waxfire@65.119.2.240)
[03:30:55] *** Joins: djhankb (~djhankb@208.113.164.68)
[03:32:01] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[03:33:51] *** Joins: foozle (~foozle@2001-b011-c001-3522-1787-3002-9fcb-f50e.dynamic-ip6.hinet.net)
[03:33:58] *** Joins: Macuser (~Macuser@216.30.159.201)
[03:34:05] *** Joins: fikran (~fikran@user/fikran)
[03:34:13] *** Joins: Fiji (~Fiji@user/fiji)
[03:34:14] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[03:34:39] *** Joins: wyclif (~wyclif@user/wyclif)
[03:35:26] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[03:36:04] *** Joins: brettgilio (~brettgili@x-node.gq)
[03:36:26] *** Joins: newpy (~newpy@206.168.231.90)
[03:36:31] *** Quits: nergar (~Nergar@177.225.157.49) (Read error: Connection reset by peer)
[03:36:53] <newpy> what's the simplest way to change y-axis label precision in pyplot?
[03:37:02] *** Quits: foozle (~foozle@2001-b011-c001-3522-1787-3002-9fcb-f50e.dynamic-ip6.hinet.net) (Client Quit)
[03:37:43] *** Joins: sa23m (~sa23m@pool-100-15-124-177.washdc.fios.verizon.net)
[03:38:26] *** Joins: aac (~AAC@2001:8a0:6cc5:7e01:24ee:16a3:6119:2246)
[03:38:54] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.2.1)
[03:39:01] <sa23m> I have a function that accepts a callback argument, and I am passing to it like so: func(callback=lambda: diff_func(pararm))
[03:39:21] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[03:39:27] <sa23m> I want param to be garbage collected if this is the last reference to it. I think weakref can be used for this, but it's still not garbage collecting
[03:39:33] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[03:39:36] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.2)
[03:40:04] <stealth_> eww lambda, use `functools.partial`
[03:40:06] <mawk> yticks maybe newpy
[03:40:09] *** Joins: wyclif (~wyclif@user/wyclif)
[03:40:22] <sa23m> stealth - I tried that too, but still did not garbage collect
[03:40:45] <nedbat> sa23m: how are you seeing that it isn't collected?
[03:40:52] <nedbat> stealth_: can you explain why partial is better?
[03:40:54] <newpy> mawk, closest I found was ax.yaxis.set_major_formatter
[03:41:03] <sa23m> it will garbage collect the entire partial function if I make that the weak ref, but I want only the argument to be weakref
[03:41:26] <stealth_> nedbat, its more "pythonic" and clear to read
[03:41:37] *** Joins: Barones (~Barones@177.132.237.5)
[03:41:45] <nedbat> sa23m: usually garbage collection is unseen.  what are you looking at?
[03:41:46] <sa23m> nedbat: I can print the param with-in the callback function, when it should have gotten garbage collected and thus I should get a ReferenceError
[03:42:29] <nedbat> sa23m: your lambda is holding a real reference to it, not a weakref, right? Maybe i'm confused.
[03:43:04] <sa23m> Let me see if I can put together an example. I put weakref.proxy(param) into the lambda, but that did not work
[03:46:14] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[03:46:37] *** Joins: diamondbond (~diamondbo@175.157.220.188)
[03:47:44] <sa23m> nedbat: https://www.online-python.com/qW73mjCzu4
[03:48:21] *** Quits: eem (~eem@user/eem) (Quit: WeeChat 3.3)
[03:48:51] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[03:48:59] <sa23m> Sorry, bad example
[03:49:55] <sa23m> Better example: https://www.online-python.com/zCD3hkS7tW -- this I think should give a ReferenceError, but does not
[03:54:49] *** Quits: diamondbond (~diamondbo@175.157.220.188) (Quit: Leaving)
[03:55:08] <sa23m> Though if I define e.g. param2 = weakref.proxy(param) and pass that, instead of directly in the lambda, that works
[03:56:44] <nedbat> sa23m: i don't know if I can shed any light on this
[03:58:35] <sa23m> From my time asking questions in this channel, if you can't then nobody short of Guido van Rossum can
[03:59:03] <nedbat> sa23m: that's a misunderstanding :)
[03:59:14] <nedbat> there are many things I don't know
[03:59:51] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 265 seconds)
[04:00:11] *** Quits: Warped (~Warped@user/warped) (Ping timeout: 252 seconds)
[04:00:22] <sa23m> None that I ever recall seeing :)
[04:00:51] <nedbat> usually i stay quiet if i don't know
[04:01:49] *** Joins: Fiji_ (~Fiji@user/fiji)
[04:02:42] *** Quits: CodePoint (~BitShift@2600:1700:3070:3790::29) (Quit: Never gonna give you up, never gonna let you down...)
[04:05:08] *** Joins: Praise- (~Fat@user/praise)
[04:05:08] *** Quits: y1n (~y1n@77.119.163.151.wireless.dyn.drei.com) (Ping timeout: 252 seconds)
[04:05:10] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 265 seconds)
[04:05:34] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 252 seconds)
[04:05:57] *** Joins: Samian (~Sami@user/samian)
[04:08:12] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[04:13:06] *** Joins: semeion (~semeion@user/semeion)
[04:14:54] *** Quits: eniac__ (~eniac@gateway/tor-sasl/eniac) (Remote host closed the connection)
[04:17:42] *** Gustavo6046 is now known as gusisabad
[04:17:51] *** gusisabad is now known as Gustavo6046
[04:21:44] *** Quits: naterlater (~Nathan22@199.249.111.186) (Ping timeout: 246 seconds)
[04:22:50] <znf> in Flask, is there a way to abstract POST & GET requests to a single method?
[04:23:07] <znf> PHP has $_GET / $_POST but it also has $_REQUEST
[04:23:37] <salparadise> sa23m: Don't you need to delete the reference? i.e. https://www.online-python.com/cWDJbTXe4Y
[04:24:11] <sa23m> salparadise - see this example: https://www.online-python.com/zCD3hkS7tW
[04:24:12] <znf> I'm trying to re-write an api endpoint that has historically allowed both GET and POST, which is written in PHP at the moment, but doing double the work for both types of requests is not something I'm looking forward to
[04:24:14] <sa23m> The first one was bad
[04:24:27] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[04:24:44] <sa23m> Yes, if you use the param2 strategy it works
[04:25:39] <sa23m> However, it also breaks if you previously called signal.signal with the same handler function even if the parameter is different: https://www.online-python.com/yv0n2YrtqC
[04:29:14] <sa23m> Or actually with any handler other than default
[04:29:20] *** Quits: flokuehn (~flokuehn@i577BC6CE.versanet.de) (Ping timeout: 265 seconds)
[04:30:14] *** Joins: Bollko (~Guest40@2a02:a465:a81:1:fdce:a53f:1682:e465)
[04:30:41] <Bollko> Hi guys any experienced python coders wanna help a new guy out real quick ?
[04:30:45] *** Joins: flokuehn (~flokuehn@muedsl-82-207-236-122.citykom.de)
[04:31:06] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[04:31:42] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[04:31:45] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[04:31:46] <stealth_> Bollko, just ask, whoever can help you will help you
[04:32:08] <Bollko> Im new, and trying to get the following:
[04:32:44] <Bollko> x = [ [1,2], [3,4], [5,6] ]
[04:33:02] <Bollko> im trying to print 1,2
[04:33:10] <Bollko> or 1 seperate and 2 seperate
[04:33:43] <Bollko> But i dont fully understand the for i in x because i dont understand what the i is for there
[04:33:54] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 260 seconds)
[04:34:32] <Bollko> all tutorials arent covering this 2 thiing in a list pull and its all not in my native language so its a bit hard to fully understand would love some explanation from someone
[04:34:35] *** Joins: khrbt (~znc@user/khrbt)
[04:35:37] <sa23m> There is a simple way to see what "i" will be: https://www.online-python.com/6n81bpTvYz
[04:36:10] *** Joins: vlm (~vlm@user/vlm)
[04:36:26] <sa23m> To understand that -- if you have [1,2,3,4,5], you can probably understand that i will be each number in your list
[04:36:31] <Bollko> i got to the same result that its showing the full list of X
[04:36:50] <Bollko> ill show u what i got now
[04:37:05] <sa23m> Since x in this case is a list of lists, i is first [1,2], then [3,4], then [5,6]
[04:37:09] <grym> Bollko: use https://bpa.st/+python to share code
[04:37:43] <Bollko> https://bpa.st/RU5A
[04:38:00] <Bollko> this is what i have right now
[04:38:12] <sa23m> That will print the last element in your list
[04:38:20] <sa23m> Which is [ -44.4354, 39.2127 ]
[04:38:29] <Bollko> for me its printing
[04:38:34] <Bollko> [[-36.3583, 52.3906], [5.6007, 48.0947], [-57.7897, 43.5238], [-44.4354, 39.2127]]
[04:38:43] <sa23m> Not if your indent in that paste bin is right
[04:39:06] <Bollko> i exactly pasted it from vscode to paste bin
[04:39:09] <Bollko> its the exact same
[04:39:10] <sa23m> Oh wait, sorry
[04:39:12] <grym> Bollko: try https://bpa.st/Z23A
[04:39:22] <sa23m> I missed you're not setting it to i
[04:39:33] <grym> .. with a trailing ), heh
[04:39:44] <sa23m> What your code does is set xy to AssaultRifle for 4 times
[04:40:01] <sa23m> Then you print xy at the end
[04:40:20] <jinsun_> whoa, why is it called AssaultRifle, lol
[04:40:39] <Bollko> but i dont get the i thing
[04:40:53] <jinsun_> a bit weird name for a list of lists
[04:40:59] <sa23m> He is developing those robots they have stationed in the zone between North Korea and South Korea
[04:41:03] <pkx> lmao
[04:41:12] <Bollko> like i made ahk color recognition bots and i cant print a single simple thing i want to see on python now :P
[04:41:34] <grym> Bollko: i is just a name, and not even a special one.
[04:41:47] <Bollko> but what does it represent ?
[04:41:48] <grym> Bollko: `for ELEMENT in LIST` means
[04:42:21] <grym> "go through the things in LIST one by one.  Give the value of each one in turn the name ELEMENT as long as we're indented"
[04:42:22] <Bollko> so how can i do like for element1 in list, for element2 in list etc
[04:42:39] <grym> Bollko: put one for loop inside the other one
[04:42:58] <grym> but you can also do this thing called "unpacking" which is often more readable
[04:42:59] <pkx> print(AssaultRifle[0]) # on line 2
[04:43:23] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:43:30] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[04:43:52] <grym> Bollko: https://bpa.st/53BA
[04:44:30] <Bollko> result is: -36.3583 52.3906
[04:44:30] <Bollko> 5.6007 48.0947
[04:44:31] <Bollko> -57.7897 43.5238
[04:44:31] <Bollko> -44.4354 39.2127
[04:44:34] <Bollko> still giving me the full list
[04:44:40] <Bollko> and not just 1 of the pair
[04:45:02] <grym> sure, you're printing both
[04:45:12] <grym> you don't have to, though
[04:45:15] <Bollko> i cped your bpast
[04:45:38] <grym> print(first_number) will just print the first number in each pair
[04:45:49] <Bollko> i dont want each pair
[04:45:51] <Bollko> i want 1
[04:45:54] *** Quits: brettgilio (~brettgili@x-node.gq) (Quit: Leaving...)
[04:45:55] <Bollko> so from
[04:46:00] <Bollko> AssaultRifle = [ [-36.3583, 52.3906 ], [ 5.6007, 48.0947 ], [ -57.7897, 43.5238 ], [ -44.4354, 39.2127 ] ]
[04:46:02] <Bollko> i want
[04:46:07] <Bollko> [-36.3583, 52.3906 ]
[04:46:10] <Bollko> and then preferably
[04:46:17] <grym> print(AssaultRifle[0]), then
[04:46:19] <grym> no loop required
[04:46:52] <Bollko> mate
[04:46:55] <grym> or print(AssaultRifle[0][0], AssaultRifle[0][1])
[04:46:55] *** Quits: Samian (~Sami@user/samian) (Ping timeout: 250 seconds)
[04:47:00] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[04:47:07] <Bollko> that was it
[04:47:10] <Bollko> but i 100% tried it
[04:47:12] <Bollko> u know what i did ?
[04:47:19] *** Quits: henbruas (~henbruas@ti0003a400-3211.bb.online.no) (Quit: ZNC 1.8.2 - https://znc.in)
[04:47:24] <Bollko> I didnt save the file so when i run the file in vscode it gave me the old program/result xD
[04:47:39] *** Joins: henbruas (~henbruas@ti0003a400-3211.bb.online.no)
[04:48:04] <Bollko> Bro appreciate your help in starting my python journey alot<3
[04:48:12] *** Joins: brettgilio (~brettgili@x-node.gq)
[04:48:29] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[04:49:04] <Bollko> okay so now i get [-36.3583, 52.3906]
[04:49:05] <jinsun> Bollko: look at the cross to close the file before you run, it turns to a circle if it is unsaved
[04:49:20] <Bollko> Ah thats it thx:)
[04:49:25] *** Quits: brettgilio (~brettgili@x-node.gq) (Client Quit)
[04:49:42] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[04:49:50] <Bollko> but now how do i like use those [-36.3583, 52.3906] and make x = -36.3583 and y = 52.3906
[04:50:03] <jinsun> x, y =  [-36.3583, 52.3906]
[04:50:27] <Bollko> but like from the list function
[04:50:34] <jinsun> or for your case, x, y = AssaultRifle[0]
[04:50:40] <Bollko> https://bpa.st/V3IQ
[04:50:50] <Bollko> ah so thats it lemme try
[04:52:43] *** Joins: jaggz (~jaggz@user/jaggz)
[04:52:44] <Bollko> Ah sweet you just learned me how to pull data from a list and choose parts of it, so much thanks ! :D
[04:53:01] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 265 seconds)
[04:53:12] *** Joins: brettgilio (~brettgili@x-node.gq)
[04:53:27] <jaggz> how do I do this with complex numbers (then take the Real part?) Eext = R(e * ( sqrt(2) * e*(r/r**3) ) * exp(1j*pi/4))
[04:53:29] <Bollko> and the other guys <3
[04:55:44] *** Quits: Fiji_ (~Fiji@user/fiji) (Ping timeout: 252 seconds)
[04:57:48] <jinsun> jaggz: do what exactly? taking the real part is simple, z.real
[04:57:48] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[05:00:08] *** Quits: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net) (Ping timeout: 252 seconds)
[05:00:13] <jaggz> sorry, I should point out: r = .0000001
[05:00:13] <jaggz> e = 1.60217662E-19
[05:00:13] <jaggz> Eext = (e * ( sqrt(2) * e*(r/r**3) ) * exp(1j*pi/4)).real
[05:00:42] *** Joins: califax- (~califax@user/califx)
[05:01:26] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[05:03:07] *** Joins: ElPresidente (~ElPreside@2600:1700:3d10:4870:b90a:237:2bd8:2e2)
[05:03:27] *** Joins: brabrax_ (~brabrax@user/brabrax)
[05:04:08] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 250 seconds)
[05:04:09] *** brabrax_ is now known as brabrax
[05:04:27] <jinsun> hmm okay exp doesn't take complex, and that is the problem I guess?
[05:04:27] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:04:28] *** califax- is now known as califax
[05:05:17] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:06:17] *** Joins: Warped (~Warped@user/warped)
[05:07:06] <jinsun> numpy.exp works it seems, if you can use numpy
[05:07:32] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Remote host closed the connection)
[05:08:30] <vdamewood> Is macOS's ABI stable enough that a C-API module built with Homebrew's build is compatible with the PSF build and vice versa (or any other build for that matter)?
[05:08:49] <vdamewood> *for cpython, that is.
[05:11:39] *** Joins: zebrag (~chris@user/zebrag)
[05:11:47] *** Joins: Samian (~Sami@user/samian)
[05:12:56] *** Joins: llh (~llh@user/llh)
[05:13:24] *** Joins: LiftLeft (~LiftLeft@172.98.80.37)
[05:17:26] *** Quits: newpy (~newpy@206.168.231.90) (Quit: Leaving)
[05:17:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[05:21:31] <SnoopJ> vdamewood, the API is pretty stable, but if you are worried about compatibility between builds, you probably want to read up on the stable ABI, here and PEP 384: https://docs.python.org/3/c-api/stable.html
[05:21:35] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Ping timeout: 252 seconds)
[05:22:27] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[05:24:23] *** Joins: fmlatghor (~lcoogan@2601:5cd:8100:2890::3)
[05:24:37] *** Parts: fmlatghor (~lcoogan@2601:5cd:8100:2890::3) (WeeChat 3.2)
[05:25:20] *** Quits: Samian (~Sami@user/samian) (Read error: Connection reset by peer)
[05:26:57] <vdamewood> SnoopJ: I'm more concerned with compatibility between builds of the same version of cpython.
[05:28:30] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.2)
[05:29:01] *** Quits: Naan (~naan@user/naan) (Read error: Connection reset by peer)
[05:29:05] *** Quits: akk (~akk@75.161.146.115) (Quit: +++)
[05:30:02] *** Quits: Metalsutton (~Metalsutt@101.100.152.253) (Ping timeout: 260 seconds)
[05:30:25] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[05:30:43] *** Quits: driib (~driib@185.195.233.163) (Read error: Connection reset by peer)
[05:30:57] *** Joins: driib (~driib@185.195.233.163)
[05:31:23] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[05:31:30] *** Joins: trace987 (~trace@95.90.106.112)
[05:31:59] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Read error: Connection reset by peer)
[05:31:59] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Quit: leaving)
[05:33:32] <vdamewood> Well, I guess since there's no need for an anymac specification like there is with Linux, I can take that as a sign.
[05:33:41] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 252 seconds)
[05:34:14] *** Joins: eniac (~eniac@gateway/tor-sasl/eniac)
[05:34:51] <SnoopJ> vdamewood, I think the answer to that question is that the stable ABI is...well, stable. And I believe on MacOS linkage is the same as it is on Linux, but I'm not positive.
[05:35:17] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[05:35:20] *** Quits: Leonarbro_ (~Leonet@user/leonarbro) (Ping timeout: 252 seconds)
[05:37:14] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[05:37:33] <vdamewood> SnoopJ: Well, that's the source of confusion for me. Linux has ABI problems, mostly due to glibc itself not having a very stable ABI. If I build something on Linux for cpython, and try to use it on another Linux distribution, simply ensuring that i'm using the same version of cpython isn't enough to ensure compatibility. Dependencies on other libraries may be different between the distros and ABI (not API) compatibility isn't ensured unless I
[05:37:33] <vdamewood>  target the anylinux spec.
[05:37:43] *** Joins: Plyht (uid433484@id-433484.hampstead.irccloud.com)
[05:39:23] <vdamewood> Windows also has ABI problems between toolchains.
[05:39:24] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[05:39:48] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Remote host closed the connection)
[05:40:17] *** Quits: trace987 (~trace@95.90.106.112) (Ping timeout: 252 seconds)
[05:40:19] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[05:40:29] <SnoopJ> vdamewood, this is why manylinux1 restricts glibc (for example) to a particular version. I believe the more modern tags move that forward some, but the principle is the same AFAIK.
[05:40:40] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[05:40:47] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Quit: Textual IRC Client: www.textualapp.com)
[05:41:07] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[05:41:16] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[05:42:25] *** Quits: rjwiii (~mr-rich@072-187-028-004.res.spectrum.com) (Changing host)
[05:42:25] *** Joins: rjwiii (~mr-rich@idlerpg/player/mr-rich)
[05:42:29] <vdamewood> Oh, oops, yea manylinux, not any.
[05:42:40] <SnoopJ> restricts symbols used*, that is
[05:43:06] <SnoopJ> i.e. manylinux1 specifies 'thou shalt not use symbols introduced after GLIBC 2.5'
[05:43:17] <SnoopJ> after/in*
[05:43:25] *** Joins: fikran (~fikran@user/fikran)
[05:43:29] <SnoopJ> wait no, I had it right the first time. GLIBC <= 2.5 is the constraint.
[05:43:54] *** Quits: schumaml (~schumaml@p200300e2ef2c8a0053c1821a43d17d29.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[05:45:26] *** Joins: schumaml (~schumaml@p579aa0ae.dip0.t-ipconnect.de)
[05:46:02] <Gustavo6046> /root/ $
[05:47:51] *** Joins: philipp64|work (~philipp64@174.27.28.163)
[05:49:46] *** Quits: philipp64|work (~philipp64@174.27.28.163) (Client Quit)
[05:51:48] <sveinse> Are there any neat tricks to shebangs of a python script when making a script that can run on various systems? Some use python, some python3 and some even python2. How can I consistently start a python script on these systems? Make a shell wrapper?
[05:51:50] *** Quits: Hunterkll (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3) (Quit: Leaving)
[05:54:03] <energizer> sveinse: the standard advice is `#!/usr/bin/env python3`
[05:54:37] <sveinse> energizer: jep I know, but I encounter systems that doesn't have python3
[05:55:17] <energizer> sveinse: there's always pyinstaller which bundles the python with the program
[05:55:21] *** Joins: chenxuezhao (~chenxuezh@106.39.157.10)
[05:56:01] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) ()
[05:56:17] <SnoopJ> there's also kivy, but I'm not sure it does this
[05:57:26] <sveinse> energizer: yes, there is and I've used it a lot. In this case I'm not even sure the ABI/LIBC compatibility can be guaranteed. I didn't tell, but its for upgrade of an embedded device.
[05:57:51] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[05:58:23] *** Joins: KSaunderson (~user@142.93.152.208)
[05:58:33] <purplex> I have numbers in strings in list: l = ['1', '4', '6', '7'], i want to take their average mean sum(l)/len(l) but i think theres a problem since numbers are in string form, any quick way to fix it?
[05:58:43] <sveinse> I used to have this as a bash script, but came a bit short on the programming methodoligy in bash, so I thought it would be a good idea to do it in compatible py. But alas, the python hashbang thing
[05:59:28] *** Joins: philipp64|work (~philipp64@174.27.28.163)
[05:59:31] <sveinse> I'll find a way
[06:00:03] <SnoopJ> sveinse, well, the answer is unsatisfying: you do it in whatever way all your target platforms allow which is compatible
[06:01:42] *** Quits: nomic (~nomic@85.203.36.16) (Quit: Leaving)
[06:05:04] *** Joins: nomic (~nomic@85.203.36.16)
[06:05:12] <sveinse> Yes, I suppose it is. I think I'll need a shell wrapper to discover why py the system has and use it to call my py script by argument and not by shebang
[06:05:38] *** Quits: philipp64|work (~philipp64@174.27.28.163) (Quit: philipp64|work)
[06:05:50] <sveinse> In that context I kinda like windows' py.exe wrapper
[06:06:18] <sveinse> But it hasn't been here forever either
[06:07:26] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[06:08:57] <SnoopJ> shebangs are apparently unspecified in POSIX, I can't remember if I knew that
[06:11:38] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 252 seconds)
[06:12:32] <sveinse> SnoopJ: oh? interesting, its has been a defacto function for decades
[06:13:13] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:14:43] *** Quits: Plyht (uid433484@id-433484.hampstead.irccloud.com) ()
[06:15:11] *** Quits: nyah (~nyah@bcdcb6e3.skybroadband.com) (Ping timeout: 265 seconds)
[06:15:53] *** Joins: c4017__ (~c4017@2604:3d08:747f:7c90:6970:bd0b:559e:756f)
[06:19:49] *** Quits: c4017_ (~c4017@2604:3d08:747f:7c90:59fb:6d2e:e320:e738) (Ping timeout: 252 seconds)
[06:24:42] <SnoopJ> sveinse, emphasis on "de facto" though
[06:25:16] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[06:26:21] *** Joins: wyclif (~wyclif@user/wyclif)
[06:26:40] *** Joins: sdfgsdfg (sdfgsdfg@user/sdfgsdfg)
[06:27:18] *** Joins: shawwwn (uid6132@id-6132.helmsley.irccloud.com)
[06:28:04] *** Quits: alguien (~alguien@user/alguien) (Ping timeout: 252 seconds)
[06:28:38] <jinsun_> <purplex> "I have numbers in strings in..." <- sum(int(x) for x in l) / len(l)
[06:28:47] *** Quits: adiKt (uid472628@id-472628.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[06:29:23] *** Quits: hendursaga (~weechat@user/hendursaga) (Quit: hendursaga)
[06:29:48] *** Joins: hendursaga (~weechat@user/hendursaga)
[06:30:54] <purplex> looks better in one line, i used separate line to loop over and create a new list
[06:33:04] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 265 seconds)
[06:37:51] <Bollko> hi guys the new guy here
[06:38:07] <Bollko> im trying to get a random add or subtract can anyone tell me why this isnt working ?:
[06:38:08] <Bollko> https://bpa.st/PORA
[06:39:35] <Bollko> its 5 am here learning sesh getting late haha
[06:42:03] <dale> Bollko: Where did AKx and AKy come from?
[06:42:24] <Bollko> from a list
[06:42:32] <Bollko> but i think i maybe got it one sec xox
[06:43:28] *** Quits: masta`` (~oyster@user/masta/x-2645138) (Remote host closed the connection)
[06:46:07] *** Quits: EGH (~EGH@185.25.195.104) (Ping timeout: 265 seconds)
[06:49:25] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[06:49:51] <jinsun> Bollko: operator.add and operator.sub are functions, you can't apply it by putting it between two values, you have to call it like `randomresult(rand_x, AKx)`
[06:50:38] <Bollko> i think i just did :P
[06:51:53] <Bollko> sent you a pm with my solution <3
[06:52:33] <sveinse> I'm not sure sending PMs is so popular around here
[06:52:50] <Bollko> why not ?
[06:53:27] <jinsun> better to discuss in the channel directly
[06:53:43] <sveinse> We want to ecourage public discussions - so others can learn too
[06:53:47] <jinsun> so others can contribute / learn
[06:54:23] *** Joins: Samian (~Sami@user/samian)
[06:54:26] <vdamewood> Besides. What do you so if one person has been helping you for a few minutes, and has to leave before you're done?
[06:54:34] <vdamewood> err What do you do...
[06:54:45] <Bollko> hehe true im just new here getting use to it :P
[06:54:49] *** Quits: lethu (~lethu@user/lethu) (Ping timeout: 265 seconds)
[06:55:02] <vdamewood> Well, for the most part, IRC is a 'default to open' culture.
[06:55:06] <sveinse> Bollko: no worries, this is a friendly place
[06:55:44] <Bollko> happy to hear sveinse, most forums now a days are really harsh places to learn
[06:55:54] <Bollko> well for my niche which is gaming :P
[06:57:06] *** Joins: lethu (~lethu@user/lethu)
[06:58:33] <jamwil> I'm fairly new here myself, but I'm so happy to have found it. As a solo developer in a 'non-tech' co., just watching the friendly conversation scroll by is really nice for not feeling isolated.
[06:59:15] <sveinse> This IRC channel has been one of the most active channels for a long time
[06:59:27] <Bollko> well i was thinking i had it jinsun i didnt, my code made the -31 change into +31 so to say on random hehe
[06:59:33] <Bollko> https://bpa.st/Y65A
[06:59:39] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[06:59:42] <Bollko> dont laugh at me please hehe
[06:59:47] <sveinse> The freenode hickup did leave a bump in the road, but it's picking up again
[07:00:06] <Bollko> im trying to get a random between to situations
[07:00:17] <Bollko> rand_x - akx
[07:00:18] <Bollko> and
[07:00:27] <Bollko> rand_x + akx
[07:00:44] <Bollko> to=two* excuse my english
[07:00:58] *** Joins: wyclif (~wyclif@user/wyclif)
[07:02:56] *** Joins: Hunterkll (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3)
[07:03:27] *** Quits: Hunterkll (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3) (Remote host closed the connection)
[07:03:33] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Quit: leaving)
[07:03:41] <Bollko> hopefully someone can help
[07:03:51] *** Joins: Hunterkll (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3)
[07:04:27] <sveinse> yeah, sorry, I got to find my bed. Good luck
[07:04:35] <Bollko> thanks good night! :)
[07:04:43] <jinsun> you started right, but then strayed into some other directions, I think you just want ` random.choice([operator.add, operator.sub])(rand_x, AKx)`, same for y
[07:06:07] *** Joins: Vipulk (~vipulk@user/vipulk)
[07:06:38] <Bollko> so i can then assign it to a variable and use the randomly generated x and y for things right?
[07:07:53] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[07:08:45] <jinsun> yes do new_x  = ... (what I wrote above) and new_y = ... (that with y instead of x), then use new_x and new_y
[07:09:36] <Bollko> but shouldnt i put the operator add/sub part between rand x and AKx cuz thats where im trying to random sub or add
[07:10:55] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 252 seconds)
[07:12:29] <Bollko> maybe i explained incorrectly, but that was my question, rand_x + AKx that + i want random + or -
[07:12:36] <jinsun> no, as I said, they are functions, not literally the + and - operators, so can't put them between the numbers, you have to do `add(a, b)` to get `a+b` and `sub(a, b)` to get `a - b`
[07:13:12] *** Quits: redrum88 (~redrum88@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[07:13:52] <Bollko> so how would i go about this situation then? i have to look for something else then using operator.sub then i guess?
[07:14:15] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:15:06] *** Quits: subopt (~subopt@2603-8081-2302-459a-c44d-4137-d2af-3bba.res6.spectrum.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:15:22] <jinsun> `new_x = random.choice([operator.add, operator.sub])(rand_x, AKx)` <- this doesn't work?
[07:15:31] <Moult> if i have class Foo(abc.ABC): @classmethod @abstractmethod def foobar(cls): pass, why is it valid for me to do class Bar(Foo): pass? is there something i can do (without instantiating, since it is a classmethod) to trigger a typeerror?
[07:15:45] <Bollko> lemme check rn
[07:16:30] <sveinse> Can't you just do: r1=operator.add; r2=operator.sub; randomresult=random.choice((r1,r2)); new_x=r1(rand_x,AKx)
[07:16:36] <energizer> Moult:  abstractclassmethod
[07:17:03] <sveinse> Sorry: r1=operator.add; r2=operator.sub; randomresult=random.choice((r1,r2)); new_x=randomresult(rand_x,AKx)
[07:17:07] <sveinse> Getting tired
[07:17:16] *** Joins: dba (uid502594@id-502594.hampstead.irccloud.com)
[07:17:48] <Moult> energizer: no, @abstractclassmethod is deprecated in favour of @classmethod, @abstractmethod from the docs i think. also, it doesn't help trigger any errors. i only trigger an error if i do x = Bar()
[07:18:04] <energizer> Moult: that's how abc works
[07:18:28] <energizer> it can't know that you're done inheriting
[07:18:34] <jinsun> Moult: Bar is also abstrct class so you don't get an error till you instantiate
[07:18:34] <Moult> energizer: ah ok, shame. i guess i was hoping there was some magic way it'd know if classmethods implementations were not satisfied
[07:18:59] *** Joins: bfortified (~bfortifie@172.83.243.94)
[07:19:36] <SnoopJ> Moult, do you specifically want a TypeError at runtime, or is this for formally verifying the correctness of your programs as a help-the-developer thing?
[07:19:48] *** Quits: sa23m (~sa23m@pool-100-15-124-177.washdc.fios.verizon.net) (Quit: Client closed)
[07:19:55] <Moult> jinsun: i was hoping that perhaps when i did Bar.foobar(), it'd somehow know that foobar was never implemented
[07:20:01] <Moult> SnoopJ: either, just exploring right now
[07:20:59] <jinsun> you can use a type checker and protocols then type checker will complain if you didn't implement the functions with signature defined in the protocol
[07:22:03] <Moult> jinsun: ah, not a runtime thing, a linter or something?
[07:22:04] *** Quits: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net) (Read error: Connection reset by peer)
[07:22:07] <SnoopJ> yea, a static analysis tool is what you want for the formal verification task.
[07:22:41] <SnoopJ> Moult, Protocols can apply to both, they're *mostly* for consumption by tooling, really
[07:22:44] <jinsun_> Moult: yup mypy pyright or pytype
[07:22:53] <SnoopJ> but the runtime features of typing.Protocol are good too
[07:23:03] <Bollko> sveinse i got your method down but it didnt work, it will make -35 also +35 on random
[07:23:13] <jinsun_> ah yes you can make it runtime checkable also
[07:24:10] *** Joins: kib (~kib@user/kib)
[07:24:13] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[07:24:18] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 265 seconds)
[07:24:26] <Bollko> jinsun random.choice([operator.add, operator.sub])(rand_x, AKx) also makes the -35 a +35 on random
[07:25:15] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[07:25:15] <Moult> jinsun_: SnoopJ  ah nice, thanks i will investigate those :D
[07:25:18] <jinsun_> Bollko: hmm I thought that was what you wanted
[07:25:25] <Bollko> no haha
[07:25:35] <Bollko> i need random x and y choords
[07:25:46] <Bollko> but i cannot only base those cords of additions
[07:25:54] <Bollko> or itll be caught by anticheat
[07:26:20] <jinsun_> so rephrase your question probably, everyone was answering something else
[07:26:41] <Bollko> so i wanna generate a rand_x and then randomly add or subtract that from akx
[07:27:43] *** Joins: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net)
[07:27:47] <Bollko> so if rand_x is generated as 3, and AKx is -35, it could be -38 to -32
[07:28:00] <Bollko> hope its more clear now brotha
[07:28:55] <jinsun_> no much, but now it is a bit clearer why your list was called AssaultRifle, lol
[07:29:17] <Bollko> haha yaay we all learning today :P
[07:29:50] <SnoopJ> Moult, it sounds to me more like you want a static analysis tool. I'm not sure if mypy could do it here, but pylint issues a warning message
[07:30:55] <Bollko> like i could do these randomizations so easy in autohotkey but in python its a different ball game for me right now hehe
[07:32:40] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[07:33:13] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-e53c-19d8-8d1c-336f.res6.spectrum.com) (Read error: Connection reset by peer)
[07:33:38] <jinsun_> <Bollko> "so if rand_x is generated as 3..." <- so you want a random number between -38 and -32 in this example? or do you want only one of -38 or -32 with 50% chance?
[07:34:03] <SnoopJ> Bollko, does `random.randint(x-d, x+d)` do what you want?
[07:34:16] <Bollko> the random generating part is fine i print check it
[07:34:19] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[07:34:40] * SnoopJ isn't sure if that means "yes" or "no"
[07:35:37] <Bollko> and what i want is that -38 be result of the random choosing to substract, from the base -35, and then the -32 would be the result of the random choosing to add from the base - 35, i want these two possible outcomes
[07:35:54] *** Quits: LiftLeft (~LiftLeft@172.98.80.37) (Ping timeout: 265 seconds)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:37:48] <Bollko> its now 6 am for me i dont know if i can explain it clearer
[07:38:05] *** Joins: Plyht (uid433484@id-433484.hampstead.irccloud.com)
[07:39:03] <SnoopJ> Moult, this is what that output looks like, by the way: https://bpa.st/NVGA
[07:40:53] <Bollko> it cant be that i found a impossible thing to do in python less then 3 days in :P
[07:41:05] <TML> Bollko: What makes you think it's impossible?
[07:41:20] <jinsun_> if you are actually going to be moving the mouse randomly in the game with some key binding, and you're on windows, autohotkey is actually the right tool, much easier to get that working there
[07:41:29] <Bollko> because this isnt working:
[07:41:30] <Bollko>   new_x = (rand_x,random.choice([operator.add, operator.sub]), AKx)
[07:41:45] <Bollko> i cant use autohotkey for this as this game has the wickedest anticheat EAC
[07:41:55] <TML> Bollko: False, the code is working just fine, it's just that what it does is not the same thing as what you wanted to do.
[07:42:12] <SnoopJ> Bollko, it is unlikely you have found such a problem, but if the people who want to help you don't have clarifying information, it's hard to help.
[07:42:21] <TML> Bollko: you probably want something like (rand_x * random.choice(1, -1)) + AKx
[07:42:23] <Bollko> Yes i understand that thusfar haha
[07:42:36] <Bollko> I litterly explained it in the most easiest form like 30 min ago my friend
[07:43:05] <TML> Bollko: "I explained it in the easiest form" does _not_ mean anyone understood your explanation
[07:43:21] <SnoopJ> Bollko, if you cannot answer my question, I don't think I can do much for you.
[07:43:40] <Bollko> im trying to
[07:43:48] <Bollko> but this chat wont let me copy and paste haha im sorry guys im so new to this
[07:43:57] <TML> I am quite confident that Professor Knuth's "The Art of Computer Programming" explains some things in their "easiest form", that doesn't mean I have the maths background to even grasp what he's saying most of the time
[07:44:24] <SnoopJ> the supposition that a global maximum of "easy" exists is, perhaps, foolish.
[07:44:34] <Bollko> im trying to get a random between two situations
[07:44:44] <Bollko> rand_x - akx
[07:44:46] <Bollko> and
[07:44:49] <TML> Bollko: You also need to consider the possibility that some people here may not be interested in helping someone evade anti-cheat detection
[07:44:49] <Bollko> rand_x + akx
[07:45:09] <SnoopJ> Bollko, does `random.randint(x-d, x+d)` do what you want?
[07:45:28] <SnoopJ> random.randint(rand_x-akx, rand_x+akx)` in your notation
[07:45:36] <TML> Bollko: (rand_x - akx) can also be written as ((rand_x*-1) + (akx))
[07:45:39] <Bollko> its the part of operator.add being a function
[07:45:49] <Bollko> so its returning print like this:
[07:45:56] <Bollko> (2, <built-in function add>, -36.3583) (3, <built-in function sub>, 52.3906)
[07:46:00] * SnoopJ shrugs
[07:46:40] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 252 seconds)
[07:47:04] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[07:47:08] <Bollko> okay let me 6:16 am brain try to understand the new sight of *-1 + thing
[07:47:31] <Bollko> and lemme try snoopjs solution real quick
[07:47:41] <TML> subtracting a number is the same thing as adding the number * -1
[07:47:53] <TML> It's pretty basic math
[07:47:59] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[07:48:27] *** Quits: nomic (~nomic@85.203.36.16) (Quit: Leaving)
[07:48:38] <Bollko> Yep sucks to remember, had the highest form of school but could only go until my 15th so missed those like real math lessons
[07:49:52] <jamwil> x - y = x + (-y)
[07:49:56] <TML> I'm not sure what you're referring to there, but this is something that was taught in school when I was around 10 years old. YMMV.
[07:50:31] *** Quits: gitly (~gitly@85.255.236.215) (Ping timeout: 252 seconds)
[07:50:36] <SnoopJ> TML, may vary indeed.
[07:50:38] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[07:50:44] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[07:52:27] <KSaunderson> i strongly advise you guys dont look up "Laplacian Operator" then...
[07:52:41] *** Joins: gitly (~gitly@148.252.132.144)
[07:52:46] *** Joins: fikran (~fikran@user/fikran)
[07:53:09] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: vvdaiwrw)
[07:53:51] <TML> LOL - checked the Wikipedia entry, stopped reading at "differential"
[07:53:53] <TML> :)
[07:54:27] <TML> I took some very basic algebra, but that's as far as I made it in maths at school
[07:54:44] <KSaunderson> :) i have a math degree but igraduated back in 2007
[07:54:49] <KSaunderson> so dont remember <S>>
[07:55:00] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[07:55:34] <TML> I can still "solve for x", but only because that's a pretty relevant skill to debugging code
[07:56:08] *** Quits: aac (~AAC@2001:8a0:6cc5:7e01:24ee:16a3:6119:2246) (Remote host closed the connection)
[07:57:02] *** Joins: yaalon (~yaalon@2603-8081-7002-fce2-0543-cf65-18bf-cccc.res6.spectrum.com)
[07:57:32] *** Quits: yaalon (~yaalon@2603-8081-7002-fce2-0543-cf65-18bf-cccc.res6.spectrum.com) (Client Quit)
[07:58:37] *** Quits: Leonarbro_ (~Leonet@user/leonarbro) (Ping timeout: 265 seconds)
[07:59:32] <SnoopJ> Certainly you can have a 'mathy' structure that defines the notion of A-B (representing it as A+(-B)) without defining a second binary operator. That's a commutative group.
[08:00:07] <SnoopJ> (or abelian group, if you insist)
[08:00:51] <SnoopJ> But that just goes to show: math is at its least obvious when it is the "basic" stuff :)
[08:03:30] *** Quits: aphysically (~aphysical@user/aphysically) (Quit: aphysically)
[08:04:04] <SnoopJ> ...and probably this has a lot of young thinkers kinda confused about why things break so badly when their curriculum moves uncermoniously from """natural""" numbers to the integers.
[08:04:44] *** Quits: Linux77 (~Linux7_7@186.233.182.243) (Ping timeout: 268 seconds)
[08:05:20] *** Quits: pkx (~pkx@user/pkx) (Read error: Connection reset by peer)
[08:06:10] *** Joins: aphysically (~aphysical@user/aphysically)
[08:06:38] *** Quits: mdemo (~mdemo@c-73-40-53-74.hsd1.va.comcast.net) (Quit: The Lounge - https://thelounge.github.io)
[08:06:50] *** Joins: DaNeenjah (~jake@adsl-74-230-6-204.hsv.bellsouth.net)
[08:09:56] *** Joins: pkx (~pkx@user/pkx)
[08:10:30] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[08:10:43] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:13:00] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Read error: Connection reset by peer)
[08:13:26] <jinsun_> ugh this is why I don't like math, so abelian group is named after someone called Abel, half the time I wonder if it is some general English vocabulary that I don't know or some guys name, everything sounds more complicated than it is  because of the crappy naming by math people
[08:15:06] <SnoopJ> In a rare (for me) defense of mathematical obstuseness, that one goes pretty poorly elsewhere, too.
[08:21:19] *** Quits: pkx (~pkx@user/pkx) (Ping timeout: 252 seconds)
[08:22:55] *** Joins: pkx (~pkx@user/pkx)
[08:28:49] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[08:36:28] *** Joins: upsala (~zcb@185.213.155.160)
[08:36:44] <InPhase> jinsun_: I recently got into a many hours long debate about how "special variables" should behave, and whether they should behave dynamically like lisp special variables, or the behavior should just be special.  So it doesn't always help clarity to use ordinary words...
[08:36:52] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[08:36:52] *** Quits: p-i-_ (~Ohmu@mx-ll-223.206.70-53.dynamic.3bb.co.th) (Read error: Connection reset by peer)
[08:39:33] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Remote host closed the connection)
[08:45:30] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 265 seconds)
[08:49:26] *** Quits: DaNeenjah (~jake@adsl-74-230-6-204.hsv.bellsouth.net) (Quit: WeeChat 3.2.1)
[08:58:07] *** Quits: Bollko (~Guest40@2a02:a465:a81:1:fdce:a53f:1682:e465) (Quit: Client closed)
[09:01:31] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 252 seconds)
[09:05:58] *** Quits: Samian (~Sami@user/samian) (Ping timeout: 260 seconds)
[09:09:00] *** Quits: ihristov (~ihristov@85.187.46.226) (Quit: Connection closed)
[09:11:29] *** Quits: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net) (Ping timeout: 252 seconds)
[09:16:11] *** Joins: Metalsutton (~Metalsutt@101.100.152.253)
[09:16:27] *** Quits: Metalsutton (~Metalsutt@101.100.152.253) (Read error: Connection reset by peer)
[09:18:41] *** Joins: dumbsharka (~amirvince@user/amirvincent64)
[09:18:56] <stealth_> jinsun_, software/library names are the worst!
[09:19:28] <stealth_> InPhase, whats a special variable?
[09:20:10] *** Joins: Samian (~Sami@user/samian)
[09:20:23] *** Quits: \\ (~\0x5c@miaow/nonantedeux) (Quit: bye)
[09:20:37] *** Joins: \\ (~\0x5c@miaow/nonantedeux)
[09:22:09] <jinsun> hmm well yeah, I guess in general naming gets bad when things get complicated
[09:22:15] *** Quits: Samian (~Sami@user/samian) (Read error: Connection reset by peer)
[09:24:12] *** Joins: ShinyCyril (~ShinyCyri@209.104.70.126)
[09:24:28] *** Quits: MrBungle (~MrBungle@2604:3d08:1788:dc00:8d7a:8984:59ac:7d9d) (Read error: Connection reset by peer)
[09:24:29] *** Quits: briian (uid321220@id-321220.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[09:24:39] <stealth_> mabye ppl have lost the knowledge on how to properly name things
[09:26:53] *** Quits: ShinyCyril (~ShinyCyri@209.104.70.126) (Client Quit)
[09:28:12] *** Quits: reset (~reset@user/reset) (Quit: reset)
[09:30:14] *** Quits: eniac (~eniac@gateway/tor-sasl/eniac) (Remote host closed the connection)
[09:30:36] *** Joins: eniac (~eniac@gateway/tor-sasl/eniac)
[09:30:38] *** Quits: jazzy (~jaziz@2600:380:854a:af07:5c15:5702:68a5:4b72) (Ping timeout: 250 seconds)
[09:31:04] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[09:31:11] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[09:31:11] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[09:31:17] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 252 seconds)
[09:31:33] *** Joins: djhankb (~djhankb@208.113.164.68)
[09:32:00] *** Joins: califax (~califax@user/califx)
[09:32:25] *** Joins: brabrax (~brabrax@user/brabrax)
[09:44:29] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:44:47] <stealth_> wondering why python doesn't have vector
[09:45:01] *** Quits: Plyht (uid433484@id-433484.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[09:46:30] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[09:47:11] *** Joins: seednode (~seednode@user/seednode)
[09:47:12] *** Quits: eniac (~eniac@gateway/tor-sasl/eniac) (Ping timeout: 276 seconds)
[09:47:51] *** Quits: A_Dragon (A_D@libera/staff/dragon) (Quit: ZNC - https://znc.in)
[09:47:58] *** Joins: A_Dragon (A_D@libera/staff/dragon)
[09:48:35] *** Quits: CygniX (~CygniX@2605:6400:30:fdc6:68:f4:4e:78) (Remote host closed the connection)
[09:54:47] *** Joins: xon (~xon@host-8-net-64-160-119.mobilinkinfinity.net.pk)
[09:56:18] *** Quits: spithash (~spithash@user/spithash) (Ping timeout: 276 seconds)
[09:56:29] *** Joins: spithash (~spithash@user/spithash)
[09:56:44] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2.1)
[09:59:38] *** Quits: xon (~xon@host-8-net-64-160-119.mobilinkinfinity.net.pk) (Ping timeout: 260 seconds)
[10:00:25] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[10:02:05] *** Joins: fikran (~fikran@user/fikran)
[10:05:39] *** Quits: Trashlord (~trash@user/trashlord) (Quit: ZNC 1.8.2 - https://znc.in)
[10:05:58] *** Joins: Trashlord (~trash@user/trashlord)
[10:07:17] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[10:11:53] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[10:13:11] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[10:13:28] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 265 seconds)
[10:13:32] *** Joins: manti7 (~manti7@176.10.104.94)
[10:17:38] *** Joins: white5moke (~me@ip72-219-109-30.oc.oc.cox.net)
[10:19:16] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[10:20:04] *** Joins: Plyht (uid433484@id-433484.hampstead.irccloud.com)
[10:23:25] *** Quits: pkx (~pkx@user/pkx) (Quit: leaving)
[10:25:22] *** Quits: olasd (~olasd@softwareheritage/olasd) (Quit: WeeChat 3.0)
[10:25:31] *** Joins: olasd (~olasd@softwareheritage/olasd)
[10:31:42] *** Quits: white5moke (~me@ip72-219-109-30.oc.oc.cox.net) ()
[10:35:01] *** Joins: djapo (~archangel@user/djapo)
[10:36:47] *** Quits: canurabus (~canurabus@ip-24-156-182-35.user.start.ca) (Quit: Leaving)
[10:37:43] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 252 seconds)
[10:39:53] *** Quits: brentaarnold (~brentaarn@24.112.61.90) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[10:41:08] *** Joins: brentaarnold (~brentaarn@32.132.115.46)
[10:41:27] *** Quits: jjhoo (~jahakala@dsl-trebng21-58c18f-56.dhcp.inet.fi) (Changing host)
[10:41:27] *** Joins: jjhoo (~jahakala@user/jjhoo)
[10:41:59] *** Quits: kib (~kib@user/kib) (Ping timeout: 265 seconds)
[10:48:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[10:48:34] *** Joins: kib (~kib@user/kib)
[10:49:19] *** Joins: wyclif (~wyclif@user/wyclif)
[10:50:03] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:51:25] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[10:53:49] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[10:54:04] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[10:55:06] *** Joins: wyclif (~wyclif@user/wyclif)
[10:55:26] *** Joins: kosh (~kosh@user/kosh)
[10:56:55] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[10:59:50] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[10:59:52] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 265 seconds)
[11:00:35] *** Joins: wyclif (~wyclif@user/wyclif)
[11:01:52] *** Joins: eem (~eem@user/eem)
[11:05:13] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[11:05:38] *** Quits: Plyht (uid433484@id-433484.hampstead.irccloud.com) ()
[11:05:55] *** Joins: Plyht (uid433484@id-433484.hampstead.irccloud.com)
[11:06:06] *** Joins: wyclif (~wyclif@user/wyclif)
[11:06:32] *** Quits: brentaarnold (~brentaarn@32.132.115.46) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[11:06:50] *** Quits: Plyht (uid433484@id-433484.hampstead.irccloud.com) (Client Quit)
[11:06:57] *** Joins: brentaarnold (~brentaarn@32.132.115.46)
[11:07:32] *** Joins: Plyht (uid433484@id-433484.hampstead.irccloud.com)
[11:07:37] *** Joins: rendar (~rendar@user/rendar)
[11:08:20] *** Joins: dd_ (dd_@gateway/vpn/protonvpn/dd/x-95652672)
[11:10:50] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[11:10:50] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 252 seconds)
[11:11:20] *** Quits: Plyht (uid433484@id-433484.hampstead.irccloud.com) (Client Quit)
[11:11:50] *** Joins: wyclif (~wyclif@user/wyclif)
[11:13:18] *** Joins: Plyht (uid433484@id-433484.hampstead.irccloud.com)
[11:14:47] *** Joins: sid-maddy (~sid-maddy@103.76.56.118)
[11:16:52] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[11:16:53] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[11:17:20] *** Joins: wyclif (~wyclif@user/wyclif)
[11:18:00] *** Joins: magla (~gelignite@55d479ac.access.ecotel.net)
[11:19:31] *** Quits: brentaarnold (~brentaarn@32.132.115.46) (Ping timeout: 252 seconds)
[11:19:56] *** Quits: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[11:22:06] *** Joins: brentaarnold (~brentaarn@32.132.115.46)
[11:22:16] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[11:22:53] *** Joins: wyclif (~wyclif@user/wyclif)
[11:25:34] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Ping timeout: 252 seconds)
[11:27:54] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[11:28:08] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[11:28:22] *** Joins: wyclif (~wyclif@user/wyclif)
[11:29:44] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[11:30:20] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[11:31:03] *** Joins: pycode (~pycode@2001:b07:5d28:551:768f:a158:6df4:dad4)
[11:31:25] <Feuermagier> I have a list of 25000 datapoints an would like to average every 10000 points to get a new list, which I can then plot. How do I do this the "python" way?
[11:33:23] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[11:33:52] *** Joins: wyclif (~wyclif@user/wyclif)
[11:36:56] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[11:38:53] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[11:39:14] *** Quits: Plyht (uid433484@id-433484.hampstead.irccloud.com) ()
[11:39:23] *** Joins: wyclif (~wyclif@user/wyclif)
[11:40:13] <Repiphany> You want 2.5 points?
[11:41:05] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[11:41:19] <Feuermagier> Repiphany, oups, I mean 1000 per buckets for 25 points
[11:41:22] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[11:41:26] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Ping timeout: 265 seconds)
[11:41:35] <stealth_> Feuermagier, `my_list[:1000]` then `my_list[1000:]`
[11:42:14] *** Joins: sid_maddy (~sid-maddy@103.76.56.118)
[11:42:14] *** Quits: sid-maddy (~sid-maddy@103.76.56.118) (Write error: Connection reset by peer)
[11:42:16] *** Quits: obiwahn (~heini@obiwahn.org) (Changing host)
[11:42:16] *** Joins: obiwahn (~heini@user/obiwahn)
[11:42:24] *** Joins: ganchan (~thomas_w@user/ganchan)
[11:42:51] <Repiphany> Using numpy, data.reshape((25, -1)).mean(axis = 1)
[11:42:51] <Feuermagier> stealth_, ooh, looks fancy. how does it work?
[11:43:09] *** Quits: ganchan (~thomas_w@user/ganchan) (Read error: Connection reset by peer)
[11:44:01] <stealth_> Feuermagier, all you are doing is slicing the list, `my_new = old_list[:1000]` since python is reference based, all you are making copy to new list is reference
[11:44:14] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:44:23] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[11:44:53] *** Joins: wyclif (~wyclif@user/wyclif)
[11:45:27] <Feuermagier> stealth_, so, list[:1000] takes the first 1000 items of the list?
[11:45:43] <stealth_> Feuermagier, ya
[11:46:16] <stealth_> Feuermagier, https://docs.python.org/3/library/functions.html#slice
[11:46:45] *** Quits: sid_maddy (~sid-maddy@103.76.56.118) (Ping timeout: 265 seconds)
[11:47:53] <Feuermagier> Repiphany, that worked. Thx!
[11:48:21] *** Quits: obiwahn (~heini@user/obiwahn) (Quit: obiwahn)
[11:48:37] *** Joins: obiwahn (~heini@user/obiwahn)
[11:49:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[11:50:24] *** Joins: wyclif (~wyclif@user/wyclif)
[11:50:57] *** Quits: obiwahn (~heini@user/obiwahn) (Client Quit)
[11:51:12] *** Joins: obiwahn (~heini@user/obiwahn)
[11:54:00] *** Quits: gitly (~gitly@148.252.132.144) (Ping timeout: 265 seconds)
[11:55:23] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[11:55:41] *** Joins: gitly (~gitly@85.255.232.38)
[11:55:56] *** Joins: wyclif (~wyclif@user/wyclif)
[11:56:11] *** Joins: paul424 (~tom@ip-31-0-120-30.multi.internet.cyfrowypolsat.pl)
[11:56:46] *** Quits: dumbsharka (~amirvince@user/amirvincent64) (Ping timeout: 260 seconds)
[11:57:18] *** Quits: Barones (~Barones@177.132.237.5) (Remote host closed the connection)
[11:58:22] <paul424> python : hello what's wrong with type-checker here  : https://bpa.st/5PYQ
[11:58:30] <paul424> for factor(5) it prints bad type
[12:00:53] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[12:01:26] *** Joins: wyclif (~wyclif@user/wyclif)
[12:02:41] *** Joins: mokulus (~mokulus@user/mokulus)
[12:03:02] *** Joins: LuksNuke (~LuksNuke@ip-146-0-191-111.dyn.luxfibre.pt.lu)
[12:03:58] *** Joins: OldManSaturn (~OldManSat@c-98-212-37-246.hsd1.il.comcast.net)
[12:04:25] *** Joins: nomic (~nomic@85.203.36.16)
[12:04:28] <The-Compiler> paul424: no, times2('Not A Number') does
[12:04:44] <The-Compiler> paul424: you might want to raise an exception instead so you can see a traceback
[12:05:00] <The-Compiler> paul424: (but also, type checking like that is kind of odd, you'd typically use something like mypy instead)
[12:05:02] <paul424> suppose I use clousers as in this example : https://bpa.st/B76Q what are other valid ways of calling demo1 besides demo1(2)(3) ... ?
[12:05:16] <paul424> The-Compiler, yes I play with some neat examples
[12:06:06] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[12:06:25] *** Quits: khrbt (~znc@user/khrbt) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[12:06:45] <paul424> The-Compiler,  yeah thanks you are absoloutly right
[12:06:56] *** Joins: wyclif (~wyclif@user/wyclif)
[12:08:25] *** Joins: LuksNuke_ (~LuksNuke@ip-146-0-191-111.dyn.luxfibre.pt.lu)
[12:08:57] *** Quits: LuksNuke_ (~LuksNuke@ip-146-0-191-111.dyn.luxfibre.pt.lu) (Client Quit)
[12:09:22] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[12:11:26] *** Joins: fikran (~fikran@user/fikran)
[12:11:36] <paul424> going with the punch : is there a way of curring , uncurring function in python ?
[12:11:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[12:11:47] *** Quits: gimzmoe (~gimzmoe@user/gimzmoe) (Ping timeout: 246 seconds)
[12:11:50] *** Parts: jaggz (~jaggz@user/jaggz) (Leaving)
[12:11:53] <The-Compiler> there's functools.partial
[12:12:27] *** Joins: wyclif (~wyclif@user/wyclif)
[12:15:06] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:15:17] *** Joins: LuksNuke_ (~LuksNuke@ip-146-0-191-111.dyn.luxfibre.pt.lu)
[12:16:24] *** Quits: LuksNuke_ (~LuksNuke@ip-146-0-191-111.dyn.luxfibre.pt.lu) (Client Quit)
[12:16:50] *** Quits: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net) (Remote host closed the connection)
[12:16:55] *** Joins: spiri__ (~LuksNuke@gateway/tor-sasl/luksnuke)
[12:16:55] *** Quits: spiri__ (~LuksNuke@gateway/tor-sasl/luksnuke) (Client Quit)
[12:17:19] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[12:17:57] *** Joins: wyclif (~wyclif@user/wyclif)
[12:18:05] *** Quits: LuksNuke (~LuksNuke@ip-146-0-191-111.dyn.luxfibre.pt.lu) (Quit: Leaving)
[12:18:36] <paul424> The-Compiler, but it doesn't contain the curry, uncurry functions to answer my orginal question
[12:19:02] *** Joins: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net)
[12:20:05] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[12:20:36] *** Joins: gimzmoe (~gimzmoe@user/gimzmoe)
[12:21:11] <paul424> functors*
[12:22:33] *** Joins: xon (~xon@host-8-net-64-160-119.mobilinkinfinity.net.pk)
[12:22:53] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[12:23:28] *** Joins: wyclif (~wyclif@user/wyclif)
[12:23:30] *** Joins: theprophet (~theprophe@85.114.228.184)
[12:24:18] <theprophet> does any1 have a experience with kivymd to help me?  i am getting this error-->  from kivymd.theming import ThemeManager
[12:24:19] <theprophet>  ModuleNotFoundError: No module named 'kivymd.theming'
[12:25:47] <rendar> what is the proper way to check if an object is a container, e.g. it implements __contains__ ?
[12:27:13] *** Quits: xon (~xon@host-8-net-64-160-119.mobilinkinfinity.net.pk) (Ping timeout: 252 seconds)
[12:27:28] *** Quits: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net) (Remote host closed the connection)
[12:27:35] <stealth_> `__contains__` is to check `if 'something' in my_class`
[12:28:07] <stealth_> rendar, not sure what you mean by object is an container! what is container?
[12:28:30] <The-Compiler> rendar: what's your goal? Note that you can use 'in' with objects not implementing __contains__ (via __iter__ or __getitem__)
[12:28:37] *** Joins: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net)
[12:29:27] *** Joins: khrbt (~znc@user/khrbt)
[12:30:45] <stealth_> theprophet, it should have worked, how did you install it?
[12:30:49] *** Quits: chenxuezhao (~chenxuezh@106.39.157.10) ()
[12:31:08] <theprophet> stealth_ via pycharm
[12:31:34] <stealth_> theprophet, maybe you need to restart pycharm, or something silly like that
[12:32:15] <theprophet> stealth_ tried does not work.
[12:33:01] <The-Compiler> theprophet: what package did you install exactly? Does "import kivymd" work?
[12:33:41] <theprophet> The-Compiler kivymd nothing else.
[12:34:12] <theprophet> The-Compiler kivymd import works yes.
[12:34:17] *** Joins: StyXman (~mdione@2a01:e0a:5e5:4790:20d:b9ff:fe52:1a0)
[12:34:27] <stealth_> theprophet, did you install it using pip?
[12:34:37] <StyXman> if I conditionally import a module in a function, is that import local to that function?
[12:34:42] <theprophet> stealth_ no with pycharm.
[12:34:53] <StyXman> 'that import' in the sense of the resulting name
[12:35:07] <The-Compiler> StyXman: yes - an import is really just an assignment
[12:35:12] <stealth_> theprophet, does pycharm use pip? i don't use pycharm
[12:35:18] <theprophet> stealth_ directly from pycharm, but i tried it with pip too, same thing happens.
[12:35:29] <rendar> The-Compiler, my goal is to see if i have an instance of an object where i can apply 'in' and do if i in my_instance: ...
[12:35:31] <StyXman> The-Compiler: so to make it global to the module I just use global?
[12:35:33] <theprophet> stealth_ yes you can change interpreters.
[12:35:40] <The-Compiler> rendar: do it and handle TypeError?
[12:35:49] *** Quits: mokulus (~mokulus@user/mokulus) (Quit: WeeChat 3.2.1)
[12:35:55] <The-Compiler> StyXman: I suppose that could work. Why does it need to be in a function?
[12:36:05] *** Joins: NeoCore (~neocore@185.244.213.132)
[12:37:10] <The-Compiler> theprophet: works fine for me. Is your file named kivymd.py, or do you have such a file in the same directory?
[12:37:40] *** Quits: pycode (~pycode@2001:b07:5d28:551:768f:a158:6df4:dad4) (Ping timeout: 252 seconds)
[12:37:41] <stealth_> theprophet, try installing agin but with `--update` this time, like `pip install --upgrade kivymd --user` <- change this to your setup
[12:38:05] <rendar> The-Compiler, TypeError? nope...
[12:38:20] <theprophet> The-Compiler , no none of the files are called kivymd.py
[12:38:20] <The-Compiler> rendar: huh?
[12:38:30] <rendar> The-Compiler, i just want isinstance(something)
[12:38:39] <rendar> i don't want to handle exceptions
[12:38:46] <The-Compiler> theprophet: what does   import kivymd; print(kivymd.__file__)  say?
[12:39:12] <theprophet> The-Compiler let me try.  stealth_ i tried that but does work.
[12:39:18] *** Joins: shangxiao (~davids@124.187.230.212)
[12:39:45] <stealth_> theprophet, does work? or does not?
[12:39:59] <The-Compiler> rendar: you might be looking for https://docs.python.org/3/library/collections.abc.html - but that'll exclude things which 'in' works just fine on
[12:40:25] <theprophet> stealth_ sorry , does not.
[12:40:34] <theprophet> The-Compiler it says None.
[12:40:50] *** Joins: CoolerX (~CoolerX@user/coolerx)
[12:40:57] <The-Compiler> rendar: unless you do something like  isinstance(x, (collections.abc.Container, collections.abc.Iterable, collections.abc.Sequence))  or somesuch, but why overcomplicate things
[12:41:00] <The-Compiler> theprophet: huh
[12:41:36] <stealth_> theprophet, could be that you are installing to a different python then the one pycharm is using to run/test it?
[12:41:36] <rendar> i think i just need Container
[12:41:42] <theprophet> The-Compiler you told me to import and print right?
[12:41:43] <rendar> the others inherit from that one
[12:41:43] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[12:42:03] <theprophet> stealth_ i only have one python interpreter.
[12:42:11] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[12:42:14] <theprophet> stealth_ and thats where i installed kivymd
[12:42:51] *** Quits: dre (~dre@2001:8003:c932:c301:e5c5:40af:66d5:e309) (Quit: Leaving)
[12:43:07] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[12:43:29] <The-Compiler> rendar: no, those are different things, but they all support 'in'
[12:43:46] <theprophet> stealth_ this is where i am sended when i click error https://ibb.co/ygpDr9Z
[12:43:57] <theprophet> to the kivymd file.
[12:43:58] <The-Compiler> rendar: https://paste.the-compiler.org/view/0eb23805 (and many other examples)
[12:44:06] <rendar> The-Compiler, but isinstance will work
[12:44:11] <rendar> btw, why do i get this nonsense? https://bpa.st/5IJA
[12:44:12] *** Quits: magla (~gelignite@55d479ac.access.ecotel.net) (Quit: Stay safe!)
[12:44:23] <The-Compiler> rendar: it will work for a subset of things which support 'in', sure
[12:44:24] <bjs> rendar: you forgot to import collections.abc
[12:44:35] <rendar> bjs, but i imported collections!
[12:44:43] <bjs> rendar: so yes, you did forget to import collections.abc :)
[12:44:57] <rendar> lol
[12:44:58] <rendar> ok..
[12:45:07] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:45:14] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Ping timeout: 265 seconds)
[12:45:24] <rendar> The-Compiler, https://bpa.st/UKJQ
[12:45:36] <stealth_> theprophet, somethig must be caching the older install
[12:45:36] <bjs> rendar: `item in container` will use container.__contains__ if it exists
[12:45:59] <theprophet> stealth_ ill try to reinstall kivymd
[12:46:01] <rendar> bjs, but also other functions as The-Compiler pointed out
[12:46:08] <bjs> rendar: yes, that's why I said "if it exists"
[12:46:22] <rendar> ok
[12:46:31] <stealth_> theprophet, the first install must have failed, after creating the `kivymd` folder. 1. make sure to reinstall with that `--update` and 2. restart pycharm.
[12:46:38] <bjs> rendar: if you want to make your own class that has `x in y` then you probably want to write a __contains__
[12:46:49] <rendar> i don't want that
[12:47:05] <The-Compiler> rendar: Yeah. All containers support 'in', but not everything supporting 'in' is a container
[12:47:07] <rendar> i want to check if the user specified a single instance of an object, OR a container that contains it
[12:47:36] <bjs> rendar: as with most things in Python, the only way to really know is to try and then catch the exception if it doesn't work
[12:47:38] <theprophet> stealth_  yes.
[12:47:49] <theprophet> stealth_ exactly what i am doing right now
[12:47:53] <rendar> bjs, but this is cumbersome
[12:48:03] <The-Compiler> rendar: sounds like those should be two different functions
[12:48:21] *** Quits: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net) (Remote host closed the connection)
[12:48:25] <bjs> rendar: is it really? you write a tiny `is_container` function
[12:48:59] <theprophet> @steal
[12:49:05] <rendar> bjs, it is, because maybe some dumb library can develop some class which implements __contains__ but will throw a different exception that the one i was looking for..
[12:49:09] <theprophet> stealth_ wow now its giving me some other error wtf?
[12:49:13] *** Joins: EGH (~EGH@185.25.195.104)
[12:49:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[12:49:19] *** Joins: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net)
[12:49:22] <stealth_> theprophet, hmm..
[12:49:29] <The-Compiler> rendar: if those could be any kind of object, what if they pass "hello"? Is that a single object or a container of objects?
[12:49:44] <stealth_> theprophet, whats this new error?
[12:49:49] <bjs> rendar: okay but if I write a __contains__ that always throws some random exception,  there is no system in the universe that could detect that would happen and correctly categorize it
[12:49:50] <bjs> so why do you care? :P
[12:50:02] <rendar> The-Compiler, those can be any kind of objects, but a very well defined object which doesn't implement __contains__
[12:50:06] <theprophet> stealth_ wait ill show your screenshot.
[12:50:20] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[12:50:24] *** Quits: r3m (~launch@user/r3m) (Quit: WeeChat 3.4-dev)
[12:50:27] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 240 seconds)
[12:50:36] <bjs> rendar: so many things in Python are much simpler to just try and catch the error, e.g. to tell if something is iterable
[12:51:02] <rendar> ok
[12:51:07] <The-Compiler> "In the face of ambiguity, refuse the temptation to guess." ;)
[12:51:16] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[12:51:33] <rendar> another thing, if i import collections, why i should import collections.abc too? can't i use it just as collections.abc.blabla.. since i have imported the father module?
[12:51:41] <theprophet> stealth_ https://ibb.co/0Z04Yd0
[12:51:50] <bjs> rendar: well if you import the wrong module you can't access the things in it
[12:52:00] *** Quits: sgn (~sgn@user/sgn) (Ping timeout: 265 seconds)
[12:52:00] *** Joins: sgn_ (~sgn@user/sgn)
[12:52:04] <bjs> rendar: importing the parent doesn't automatically import everything below (thankfully!)
[12:52:28] *** Quits: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net) (Remote host closed the connection)
[12:52:35] <rendar> uhm, i see
[12:52:41] <bjs> rendar: uhm?
[12:52:58] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 265 seconds)
[12:53:09] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[12:53:11] *** Joins: r3m (~launch@user/r3m)
[12:53:43] <obiwahn> Hi I am doing another hackerrank thingy again and i wonder what is wrong with my solution:
[12:54:02] <obiwahn>  re.sub(r"([[:alnum:]])([!@#$%& ])+([[:alnum:]])",r"\1 \3","This$#is% Matrix#  %!")
[12:54:23] <The-Compiler> rendar: I don't know what you're building exactly, but in situations like this I'd consider either having both a frobnicate_thing and frobnicate_things functions, or have the user do frobnicate_things([single_thing]) or use *args and frobnicate_things(thing) / frobnicate_things(*things)
[12:54:54] <rendar> ok
[12:55:08] <stealth_> theprophet, ok, so the install worked ok! now its throwing code error?
[12:55:13] <obiwahn> https://www.hackerrank.com/challenges/matrix-script/ - this is the task - i would like to replace a certain set of symbols (which can be repeated) with a space.
[12:55:39] <bjs> obiwahn: what is that [[:alnum:]] thing?  the Python docs for `re` don't mention it https://docs.python.org/3/library/re.html
[12:55:45] <theprophet> stealth_ i cant even screenshot everything, this new errors are unlimited wow. ok forget about it brother. thank you so much.
[12:55:58] <The-Compiler> obiwahn: you might want \w rather than [[:alnum:]]
[12:56:27] <stealth_> theprophet, kivy uses cython, to make it run faster, thats why the error looks a bit weird..
[12:56:32] <bjs> obiwahn: why match the before/after at all? Why not just replace just those symbols with a space
[12:57:17] <obiwahn> they must stay in case there is not following letter or number
[12:57:27] <obiwahn> but i could do a look ahead
[12:57:31] <bjs> obiwahn: what do you mean?
[12:57:40] <bjs> obiwahn: why do you need lookahead?  it's not obvious to me
[12:57:55] <obiwahn> `This is Matrix#  %!` <- expected result
[12:58:21] <stealth_> theprophet, o, do you see where it says `md_bg_color: 226/225` ? change that to `md_bg_color: 225/225`
[12:58:46] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 265 seconds)
[12:58:48] <stealth_> wait, what am i thinking! lol
[12:59:40] <stealth_> nm thats right, rbg only goes up to 225 right?
[12:59:46] <The-Compiler> stealth_: 255
[12:59:56] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[13:00:02] <stealth_> The-Compiler, right, way too late at night
[13:00:03] <The-Compiler> well, not rgb per se, but 8-bit colors (2**8 - 1)
[13:00:15] <theprophet> stealth_ yea changed that, now i am getting raise ScreenManagerException(
[13:00:15] <theprophet>  kivy.uix.screenmanager.ScreenManagerException: ScreenManager accepts only Screen widget.
[13:00:16] <theprophet>  lol.
[13:01:13] *** Quits: jewels (~jewels@2620:10d:c092:400::5:f950) (Quit: Client closed)
[13:01:36] <stealth_> theprophet, well that kivymd is still in beta! probably lots of bugs, which sucks..
[13:01:40] <obiwahn> The-Compiler / bjs: 100% - Thank You!
[13:01:51] *** Quits: schumaml (~schumaml@p579aa0ae.dip0.t-ipconnect.de) (Quit: WeeChat 3.3)
[13:01:57] <theprophet> stealth_ this thing is so broken, you cant even imagine :)
[13:02:16] <bjs> obiwahn: note your approach above doesn't work as it'll overlap if there are symbols on both sides
[13:02:19] <bjs> obiwahn: ah okay, congrats
[13:02:21] <The-Compiler> theprophet: this seems weird, given that https://github.com/kivymd/KivyMD/issues knows nothing about those issues
[13:02:22] <stealth_> theprophet, you running this on linux?
[13:02:28] <The-Compiler> theprophet: are you sure your kivy is up to date?
[13:02:40] <theprophet> stealth_ win10
[13:02:57] <theprophet> The-Compiler 100% sure. 100 times checked that its up todate
[13:04:03] <obiwahn> bjs what do you mean? Symbols on both sides?
[13:04:08] <theprophet> just forget about it, guys. thank you so much, its just very bugged.
[13:04:34] <stealth_> theprophet, ya, night, try again another time :)
[13:05:17] <bjs> obiwahn: i mean re.sub replaces non-overlapping matches. so re.sub(r"(a)#(a)", r"\g<1> \g<2>", "a#a#a") doesn't remove all the #s
[13:05:35] <bjs> because the second a#a overlaps with the first a#a so only one will be matched
[13:05:40] <bjs> (and sub'd)
[13:08:21] *** Joins: plastico (~plastico@neomutt/plastico)
[13:08:44] *** Quits: stealth_ (~stealth_@216-197-160-97.regn.static.sasknet.sk.ca) (Quit: Leaving)
[13:09:34] <obiwahn> I am using re's so much (except in vim) but I thought it is greedy and matches the first possible. and then it is applied multiple times because of an implicit g or something.
[13:09:51] <rendar> if my coroutine does: `task = asyncio.create_task(f()); try: await task; except asyncio.CancelledError: task.cancel()` i can propagate successfully the cancellation, but what about `try: await f() ... ` what can i cancel here?
[13:10:10] <obiwahn> re.sub(r"(\w)(\W)+(\w)",r"\1 \3","This$#is% Matrix#  %!") -- this passed all the test cases.
[13:11:19] <bjs> obiwahn: it goes left->right all non-overlapping matches, and substitutes all of them.
[13:11:26] *** Joins: NineBAR (~NineBAR@c-107-5-176-200.hsd1.mi.comcast.net)
[13:11:39] <bjs> obiwahn: e.g. try my above regex re.sub("a#a", "a a", "a#a#a#a#a#a#a#a#a#a")
[13:12:20] <obiwahn> thank you man!
[13:12:22] <bjs> rendar: if f is a coroutine function then it's not creating a new task
[13:13:08] *** Joins: defiant (~defiant@user/defiant)
[13:13:29] <obiwahn> re.sub("a#(?=a)", "a ", "a#a#a#a#a#a#a#a#a#a")
[13:13:40] <rendar> bjs, i know! this is why i don't know how to cancel it
[13:13:43] <obiwahn> mh not consuming would be better
[13:13:51] <bjs> rendar: you cancel tasks,  so if there's no task there's nothing to cancel
[13:13:51] <rendar> i mean, to propagate the cancel...
[13:13:54] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:14:07] <bjs> rendar: again there's no "propagating" here, there just isn't a parent/child task relationship. There's just one task.
[13:14:11] <rendar> bjs, but in such a case that coroutine will still running if the caller gets cancelled!
[13:14:17] <bjs> rendar: which one?
[13:14:32] <rendar> async def g(): try: await f() ...
[13:14:37] <rendar> then g gets cancelled
[13:14:42] <rendar> f() will still be running
[13:14:56] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[13:15:01] <bjs> rendar: no how can that be? There's only 1 task
[13:15:05] <bjs> if the task is cancelled, the task stops running.
[13:15:42] <rendar> but does f() receives an asyncio.CancelledError so it can cleanup?
[13:15:58] <bjs> rendar: of course, when you cancel a task the next await in the task will raise CancelledError
[13:16:31] <rendar> oh, so the first CancelledError will be seen at the deepest level of the coroutine calling stack
[13:16:53] <bjs> rendar: if you remember my little fake asyncio,  `await f()` is like `yield from f()`
[13:17:05] <rendar> right
[13:17:34] *** Joins: Thanatos (~Thanatos@ec2-54-148-37-124.us-west-2.compute.amazonaws.com)
[13:19:18] <bjs> rendar: as for your first bit of code, it also seemed redundant
[13:20:03] <obiwahn> rendar: may i see your code? must have missed the url
[13:20:33] <obiwahn> ah got it:)
[13:21:58] *** Quits: gimzmoe (~gimzmoe@user/gimzmoe) (Ping timeout: 265 seconds)
[13:22:56] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 265 seconds)
[13:22:59] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[13:23:19] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[13:24:53] <bjs> rendar: if the task is cancelled, and the task is awaiting a future, that future will be cancelled.
[13:25:10] <bjs> (remembering that a task is a future, so if you're awaiting a task that task will be cancelled)
[13:26:29] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[13:26:35] <bjs> and if you're awaiting a future that got cancelled, you get cancelled.
[13:27:17] *** Joins: Bardon_ (~Bardon@user/Bardon)
[13:27:41] <obiwahn> when i say `async def foo(): pass` and then `await foo()`
[13:28:01] <obiwahn> then foo() returns an coroutine object and the await gets future from it?
[13:28:13] <obiwahn> so i am awaiting a future?
[13:28:35] <bjs> obiwahn: no
[13:28:50] <bjs> obiwahn: `await foo()` will just start running foo
[13:29:02] <bjs> like a normal function call, except that foo can `await` too
[13:29:25] *** Quits: Bardon (~Bardon@user/Bardon) (Ping timeout: 260 seconds)
[13:29:36] <obiwahn> but foo() alone without an await is some sort of coro object?
[13:29:42] <bjs> obiwahn: yes
[13:29:52] <bjs> obiwahn: are you familiar with generators?
[13:30:39] *** Joins: int3l (~int3l@78-83-116-167.spectrumnet.bg)
[13:31:01] <obiwahn> in python not really. i know yield and i know that i can re-enter a function multiple times (what is about co-corountines are doing)
[13:31:23] <bjs> obiwahn: well generators are the same, if you say `def f(): yield` then `f()` alone doesn't run any code it's just a generator object
[13:31:38] *** Joins: xon (~xon@host-8-net-64-160-119.mobilinkinfinity.net.pk)
[13:31:39] <bjs> but you can `yield from f()` and it'll just run f and all its yields there and then
[13:32:15] *** Joins: ASTO (~yigit@85.96.163.227)
[13:32:23] *** Quits: paul424 (~tom@ip-31-0-120-30.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[13:32:37] <bjs> you can think of it as "flattening" out the generators, so instead of two nested you have one big one.  same with `await foo()`
[13:33:10] <ASTO> https://paste.ofcode.org/iEmtGmTJ474zVBkXQ9z66Y
[13:33:14] <ASTO>  5.2 Write a program that repeatedly prompts a user for integer numbers until the user enters 'done'.  Once 'done' is entered, print out the largest and smallest of the numbers.  If the user enters anything other than a valid number catch it with a try/except and put out an appropriate message and ignore the number. Enter 7, 2, bob, 10,  and 4 and match the output below.
[13:33:18] *** Joins: CoolerX (~CoolerX@user/coolerx)
[13:34:05] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:34:26] <obiwahn> you should try to convert to int
[13:34:59] <ASTO> which line exactly to int ?
[13:34:59] <Repiphany> ASTO: What are you expecting to catch with that try/except
[13:35:27] <obiwahn> indent for the if
[13:35:33] <ASTO> strings like bob,saly etc
[13:35:44] <obiwahn> maybe you use some online compiler site like wandbox
[13:35:51] <obiwahn> and eliminate all the errors
[13:35:59] *** Quits: xon (~xon@host-8-net-64-160-119.mobilinkinfinity.net.pk) (Ping timeout: 265 seconds)
[13:36:20] <Repiphany> Those are valid input strings as far as python is concerned though
[13:36:50] <obiwahn> https://wandbox.org/permlink/w3jWUBD9mzNt2eZ7
[13:37:35] <ASTO> it says tab error
[13:37:37] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[13:37:47] <bjs> ASTO: your indentation is all messed up,  what are you using to write Python?
[13:37:58] <bjs> most people use an editor like VSCode or PyCharm or something to help
[13:38:14] *** Quits: CoolerX (~CoolerX@user/coolerx) (Quit: Leaving)
[13:38:51] <ASTO> I used a online comliper to write this code
[13:39:09] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[13:39:12] <obiwahn> what is that?
[13:39:28] <bjs> ASTO: the problem is that some lines seem to have spaces and others have tabs -- you can see that even the website you pasted it to is struggling to draw it
[13:39:43] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[13:39:50] <obiwahn> in my world a compiler translates source code to something that can be run on a CUP
[13:40:09] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[13:40:13] <bjs> ASTO: here I fixed the tabs for you ( but did not fix the code ) : https://bpa.st/SVAQ
[13:40:14] <obiwahn> now you tell me a compiler generated code for you :-)
[13:40:31] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[13:40:33] *** Quits: dba (uid502594@id-502594.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[13:40:39] <bjs> ASTO: I recommend using something like VSCode with the Python extension to write your code, it'll make sure everything is spaces and is consistent for you
[13:40:56] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[13:41:17] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[13:41:58] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[13:42:05] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[13:42:30] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[13:42:52] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[13:43:28] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[13:43:40] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[13:44:06] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[13:44:27] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[13:44:57] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[13:45:14] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[13:45:23] *** Quits: ASTO (~yigit@85.96.163.227) (Ping timeout: 252 seconds)
[13:45:38] *** Joins: ExeciN (~ExeciN@user/nicexe)
[13:45:41] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[13:46:02] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[13:46:27] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[13:46:49] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[13:46:58] *** Quits: summonner (~summonner@188.24.90.174) (Remote host closed the connection)
[13:47:23] *** Joins: summonner (~summonner@188.24.90.174)
[13:47:28] <ChrisWarrick> also, those online compilers aren’t really sustainable for anything more serious than simple one-file things, so you probably want to install python on your machine
[13:47:44] *** Quits: waxfire (~waxfire@65.119.2.240) (Quit: Ping timeout (120 seconds))
[13:48:02] *** Joins: waxfire (~waxfire@65.119.2.240)
[13:48:02] *** Quits: theprophet (~theprophe@85.114.228.184) (Quit: Client closed)
[13:49:10] *** Quits: elkclone (~elkclone@user/elkclone) (Ping timeout: 252 seconds)
[13:49:30] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[13:50:55] *** Quits: dfch (~dfch@user/dfch) (Quit: bye)
[13:53:34] *** Joins: dfch (~dfch@user/dfch)
[13:54:43] *** Quits: OldManSaturn (~OldManSat@c-98-212-37-246.hsd1.il.comcast.net) (Remote host closed the connection)
[13:57:36] *** Quits: realies (~realies@user/realies) (Remote host closed the connection)
[13:57:56] *** Joins: realies (~realies@user/realies)
[13:58:33] *** Joins: theprophet (~theprophe@85.114.228.184)
[14:03:46] *** Joins: ph88 (~ph88@2a02:8109:9e00:7e5c:7cb7:e630:89c:9583)
[14:09:28] *** Quits: txtsd (~txtsd@user/txtsd) (Ping timeout: 252 seconds)
[14:10:25] *** Joins: int33l (~int3l@78-83-116-167.spectrumnet.bg)
[14:11:02] *** Joins: rsx (~dummy@ppp-188-174-153-64.dynamic.mnet-online.de)
[14:11:05] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[14:11:49] *** Joins: ingy (~ingy@104.236.228.44)
[14:12:10] *** Joins: ASTO (~yigit@85.96.163.227)
[14:13:12] *** Quits: int3l (~int3l@78-83-116-167.spectrumnet.bg) (Ping timeout: 265 seconds)
[14:15:00] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Ping timeout: 276 seconds)
[14:15:31] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[14:17:16] <ASTO> sorry for late response I found have solved my error ! it was common indentation error in python.Some of you in this IRC suggested VScode and pycharm .I am mostly using atom and sometimes I  write code VIM which (I suck at it) I think this error was caused by vim when I posted my code on atom then internet text editor . My quesiton is should I switch to microsoft branded text editor or continue with using atom ?
[14:17:47] <ChrisWarrick> atom is fairly abandoned
[14:18:14] <ChrisWarrick> if you’re moving between editors, don’t copy-paste code, but open the files themselves
[14:18:25] <ChrisWarrick> and make sure to configure your editor (vim, vscode, or whatever) to use 4 spaces for indentation
[14:19:00] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[14:19:05] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::2612)
[14:19:19] <ASTO> should I move my programing enviormant to vim or emacs  ?
[14:20:06] <ChrisWarrick> that’s up to you
[14:20:09] <deniska> whatever you are more comfortable with, vscode is fairly popular
[14:20:17] <ChrisWarrick> myself, I like pycharm with the ideavim plugin
[14:20:46] *** Joins: fikran (~fikran@user/fikran)
[14:22:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[14:22:42] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:22:53] * cluelessperson dislikes anything microsoft.
[14:23:11] *** Joins: wyclif (~wyclif@user/wyclif)
[14:23:17] <kosh> what about their keyboards, mice or game controllers?
[14:23:49] <ASTO> I don't like the microsoft be honest
[14:23:51] <cluelessperson> same feelings.
[14:24:25] <kosh> why would you like any tech company? or really any technology for that matter?
[14:25:46] <kosh> I don't see a good reason to like microsoft, google, apple, gnome developers, kde developers, etc.
[14:25:55] *** Parts: ingy (~ingy@104.236.228.44) (WeeChat 0.4.2)
[14:26:04] <kosh> they are tools to get work done, choose the most appropriate for the job at hand
[14:26:25] <kosh> vscode is hard to beat because it has an open plugin system and thousands of plugins have been made for it to solve all kinds of problems
[14:27:31] <kosh> I don't like it more than pycharm, vim, visual studio, etc.
[14:27:37] *** Parts: ASTO (~yigit@85.96.163.227) ()
[14:27:40] <kosh> I do like it more than eclipse though ;)
[14:28:11] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[14:28:39] *** Joins: wyclif (~wyclif@user/wyclif)
[14:28:44] <ChrisWarrick> eh, it’s fine to have preferences, favorites, likes and dislikes
[14:28:47] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[14:30:34] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[14:30:36] <ChrisWarrick> and sometimes it’s the little things, such as the behavior regarding autocomplete (for example, vs/devenv inserts completions on space, which doesn’t work with my flow, so I dislike it)
[14:31:04] *** Joins: djhankb (~djhankb@208.113.164.68)
[14:33:13] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 250 seconds)
[14:33:43] <kosh> I think I will always be annoyed with autocomplete
[14:33:56] <kosh> when it is correct I like it, when it is wrong it screws up my workflow and I have to fix it
[14:34:04] <kosh> no matter what autocomplete system I have run into
[14:34:07] *** Joins: wyclif (~wyclif@user/wyclif)
[14:34:38] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:35:02] <ChrisWarrick> autocomplete that requires intentional input to kick in helps
[14:35:04] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[14:35:26] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[14:35:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:36:02] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[14:36:13] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[14:36:39] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[14:36:49] *** Joins: Atque (~Atque@user/atque)
[14:37:01] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[14:37:13] *** Quits: shalora (~quassel@2a02:810a:b40:9f4::178f) (Quit: https://quassel-irc.org - Komfortabler Chat. Überall.)
[14:37:27] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[14:37:48] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[14:38:27] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[14:38:36] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[14:38:44] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[14:39:02] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[14:39:18] <TJ-> autosuggest part is useful but autocomplete is a pain when it makes the decision on what I might mean
[14:39:19] *** Joins: lightbulbjim (~lightbulb@user/lightbulbjim)
[14:39:23] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[14:39:37] *** Joins: wyclif (~wyclif@user/wyclif)
[14:39:55] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[14:40:10] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[14:40:37] *** Joins: xon (~xon@host-8-net-64-160-119.mobilinkinfinity.net.pk)
[14:40:39] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[14:40:58] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[14:41:23] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[14:41:45] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[14:41:47] *** Parts: StyXman (~mdione@2a01:e0a:5e5:4790:20d:b9ff:fe52:1a0) (cheers!)
[14:42:12] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[14:42:33] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[14:42:58] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[14:43:18] *** Quits: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net) (Remote host closed the connection)
[14:43:20] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[14:43:36] *** Joins: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net)
[14:43:46] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[14:44:08] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[14:44:44] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[14:44:55] *** Quits: xon (~xon@host-8-net-64-160-119.mobilinkinfinity.net.pk) (Ping timeout: 250 seconds)
[14:44:55] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[14:45:09] <shangxiao> poor eclipse xD
[14:45:21] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[14:45:42] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[14:46:05] *** Quits: nomic (~nomic@85.203.36.16) (Quit: Leaving)
[14:46:08] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[14:46:30] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[14:47:07] *** Parts: lightbulbjim (~lightbulb@user/lightbulbjim) (Leaving...)
[14:48:15] <kosh> I have never run into an IDE as bad as eclipse
[14:48:47] *** Joins: brelod (~me@90.244.150.142)
[14:49:00] <kosh> it somehow manages to be slower than an editor written using a browser framework (vscode) and somehow use a LOT more memory than a AAA game or any other IDE
[14:51:16] <hexnewbie> I've succeeding in making KDeveloper's editor slower than VSCode when editing Python. (And, I've also succeeded in Vim, but writing swap files on overloaded storage should not count)
[14:51:52] <kosh> yeah I am not talking about when you run out of ram and are swapping
[14:52:22] <kosh> MATLAB has the same kinds of problems, so dang slow to start (they try to hide that by prestarting matlab during windows startup)
[14:55:08] *** Joins: greedom (~greedom@2001:16b8:2e40:6500:5ccf:2fe2:4370:3a0d)
[14:55:14] *** Joins: darksun (~darksun@user/darksun)
[14:58:18] *** Joins: dre (~dre@2001:8003:c932:c301:e5c5:40af:66d5:e309)
[14:59:31] *** Quits: dre (~dre@2001:8003:c932:c301:e5c5:40af:66d5:e309) (Client Quit)
[14:59:44] *** Quits: greedom (~greedom@2001:16b8:2e40:6500:5ccf:2fe2:4370:3a0d) (Remote host closed the connection)
[15:00:35] *** Joins: vimart (~vimart@85.255.232.136)
[15:00:38] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[15:01:15] *** Joins: greedom (~greedom@2001:16b8:2e40:6500:5ccf:2fe2:4370:3a0d)
[15:04:16] *** Joins: y1n (~y1n@91.141.77.179.wireless.dyn.drei.com)
[15:04:26] *** Quits: Thanatos (~Thanatos@ec2-54-148-37-124.us-west-2.compute.amazonaws.com) (Ping timeout: 265 seconds)
[15:05:05] *** Joins: magla (~gelignite@55d479ac.access.ecotel.net)
[15:05:12] <sveinse> (As a "linux"-guy) I were an avid emacs user for literally decades. But now I'm using vscode for, well basically everything. It has its annoyances, but everything else does too. So find your tool and stick with it.
[15:05:40] *** Quits: zln (~zln@c80-217-230-193.bredband.tele2.se) (Quit: WeeChat 3.2)
[15:08:07] *** Praise- is now known as Praise
[15:08:21] *** Joins: mh_le (~Mads@user/mh-le/x-4465771)
[15:08:48] <mh_le> is there some way I can insert a Jupyter notebook into a latex document?
[15:09:03] <dreamer> that .. doesn't make a lot of sense mh_le
[15:09:10] <ChrisWarrick> dreamer: why not?
[15:09:19] <dreamer> because technology
[15:09:27] <ChrisWarrick> dreamer: ?
[15:09:47] <dreamer> latex format doesn't say anything about the output
[15:09:49] <ChrisWarrick> mh_le: jupyter nbconvert foobar.pdf --to latex
[15:10:04] <dreamer> so that's a static output of the noteboox
[15:10:07] <ChrisWarrick> dreamer: doesn’t say anything about the output?
[15:10:17] <dreamer> sorry, I was thinking like an interective notebook
[15:10:20] <dreamer> not a static render
[15:10:26] <ChrisWarrick> mh_le: jupyter nbconvert foobar.ipynb --to latex
[15:10:51] <dreamer> thnx for correcting
[15:11:04] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 252 seconds)
[15:11:16] <ChrisWarrick> dreamer: inserting a notebook into a latex document -> notebook ends up in a .pdf or on a dead tree -> of course it’s not interactive
[15:11:21] <dreamer> :)
[15:11:48] <dreamer> so, would this render the cells or just show the notebook as it is before executing it?
[15:11:50] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 260 seconds)
[15:12:15] <ChrisWarrick> it would show whatever the web app shows
[15:12:33] <ChrisWarrick> .ipynb files store the cells and outputs, nbconvert just formats them nicely as tex or html or whatever
[15:19:42] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[15:20:45] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Client Quit)
[15:23:59] <sveinse> when in py3 was super() introduced? Always been there?
[15:24:55] <ChrisWarrick> sveinse: yes, https://docs.python.org/3/whatsnew/3.0.html#builtins
[15:26:05] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[15:26:09] <sveinse> Thanks. Always a challenge to refrain yourself when writing code that must run on older py3 systems ;D
[15:27:02] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[15:31:24] *** Quits: yano (~yano@ircpuzzles/staff/yano) (Quit: WeeChat, the better IRC client, https://weechat.org/)
[15:32:20] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Quit: Laa shay'a waqi'un moutlaq bale kouloun moumkine)
[15:32:36] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[15:33:56] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[15:34:28] <hexnewbie> “Exact halfway cases are now rounded to the nearest even result instead of away from zero.” Ouch. I did not know that. Will have to inspect all my code using round()
[15:34:29] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Client Quit)
[15:34:35] *** Quits: greedom (~greedom@2001:16b8:2e40:6500:5ccf:2fe2:4370:3a0d) (Remote host closed the connection)
[15:35:13] *** Joins: lxwulf (~lxwulf@user/lxwulf)
[15:35:29] *** Joins: yano (~yano@ircpuzzles/staff/yano)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:03] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: WeeChat 3.2.1)
[15:36:09] <gry> hi, how do i implement this in python with scipy or something, please? https://i.ibb.co/FhV7SQm/f.png i have n(nu) and k(nu) in a variable for some range of nu from nu1 to nu2. i dont have any idea of frequency range for variable 'a'. i presume nu_a is created by fft, not by me
[15:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:47] *** Joins: greedom (~greedom@2001:16b8:2e40:6500:5ccf:2fe2:4370:3a0d)
[15:36:49] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[15:37:09] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[15:38:25] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[15:38:25] <hexnewbie> round(2.5) == 2 and round(3.5) == 4 - I guess I should be able to understand this.
[15:39:07] *** Quits: lxwulf (~lxwulf@user/lxwulf) (Client Quit)
[15:39:26] *** Joins: xon (~xon@host-8-net-64-160-119.mobilinkinfinity.net.pk)
[15:41:17] *** Joins: xiongxin (~quassel@113.116.32.187)
[15:41:59] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[15:42:06] <mh_le> ChrisWarrick: thanks! :D
[15:42:58] *** Joins: wyclif (~wyclif@user/wyclif)
[15:44:04] *** Quits: xon (~xon@host-8-net-64-160-119.mobilinkinfinity.net.pk) (Ping timeout: 252 seconds)
[15:46:39] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Ping timeout: 276 seconds)
[15:47:26] *** Joins: etiennem- (~etienne@user/etienneme)
[15:47:55] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[15:48:25] *** Quits: etienneme (~etienne@user/etienneme) (Ping timeout: 265 seconds)
[15:48:26] *** Joins: wyclif (~wyclif@user/wyclif)
[15:49:09] <wodim> hexnewbie, round is always a bad idea. you should use either floor or ceil
[15:49:21] *** Joins: PJBoy (~PJBoy@user/pjboy)
[15:50:47] *** Quits: lsrtl (~lsrtl@user/lsrtl) (Ping timeout: 240 seconds)
[15:52:26] *** Quits: theprophet (~theprophe@85.114.228.184) (Quit: Client closed)
[15:53:28] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[15:53:56] *** Joins: wyclif (~wyclif@user/wyclif)
[15:54:59] *** Joins: txtsd (~txtsd@user/txtsd)
[15:55:44] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 252 seconds)
[15:56:40] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[15:57:16] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[15:58:58] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[15:59:29] *** Joins: wyclif (~wyclif@user/wyclif)
[16:04:32] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[16:05:03] *** Joins: wyclif (~wyclif@user/wyclif)
[16:05:40] *** Joins: alguien (~alguien@user/alguien)
[16:05:49] *** Quits: Dotz0cat (~Dotz0cat@h234.12.31.71.dynamic.ip.windstream.net) (Ping timeout: 265 seconds)
[16:06:11] *** Quits: vimart (~vimart@85.255.232.136) (Ping timeout: 252 seconds)
[16:06:40] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 252 seconds)
[16:06:43] *** Joins: ShinyCyril (~ShinyCyri@209.104.70.126)
[16:07:54] *** Joins: Dotz0cat (~Dotz0cat@h171.119.90.75.dynamic.ip.windstream.net)
[16:08:23] *** Joins: semeion (~semeion@user/semeion)
[16:08:57] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[16:09:35] *** Quits: ShinyCyril (~ShinyCyri@209.104.70.126) (Client Quit)
[16:10:03] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[16:10:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[16:10:11] *** Joins: nyah (~nyah@bcdcb6e3.skybroadband.com)
[16:10:31] *** Joins: wyclif (~wyclif@user/wyclif)
[16:11:21] <braxas> I'm a bit like a broken record by now I'm sure, still on IO typing and heirarchies. https://docs.python.org/3.9/library/typing.html#typing.IO This says typing.{IO,TextIO,BinaryIO} is deprecated, but it does not say what alternatives are, or what should be used instead. I can guess that io.IOBase should be used instead, but it would be nice to have this stated explicitly.
[16:11:48] <braxas> Should I report this against cpython, as the document it occurs in is there: https://github.com/python/cpython/blob/main/Doc/library/typing.rst ?
[16:12:13] *** Joins: subopt (~subopt@2603-8081-2302-459a-c44d-4137-d2af-3bba.res6.spectrum.com)
[16:12:16] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[16:12:18] *** subopt is now known as _subopt
[16:12:55] *** Joins: Tykling (~tykling@irc.tyknet.dk)
[16:13:14] <Tykling> hello, can I make tempfile.TemporaryDirectory return a Path object?
[16:14:38] *** Joins: Auron (~Auron956@user/auron)
[16:15:32] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[16:15:34] <braxas> Tykling: I don't think so, but you can just do; with tempfile.TemporaryDirectory() as tmpdir_name: tmpdir_path = Path(tmpdir_name)
[16:15:38] <braxas> or something like that
[16:16:02] <Tykling> yes true, thanks
[16:16:15] <braxas> but what it returns is a string IIRC
[16:16:17] *** Joins: wyclif (~wyclif@user/wyclif)
[16:17:11] <braxas> docs could be clearer on it, but if you are using mypy then it is clear :)
[16:19:20] <Tykling> :)
[16:19:25] <braxas> Also, another noob question, when filing out an issue with https://bugs.python.org/ - what "type" should I pick for docs?
[16:20:18] <braxas> Typeshed can also help: typeshed also always helps: https://github.com/python/typeshed/blob/master/stdlib/tempfile.pyi#L322-L334
[16:21:53] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[16:23:07] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[16:23:29] *** Joins: eniac (~eniac@gateway/tor-sasl/eniac)
[16:23:55] *** Joins: eniac_ (~eniac@gateway/tor-sasl/eniac)
[16:24:11] *** Joins: wyclif (~wyclif@user/wyclif)
[16:28:15] *** Quits: eniac (~eniac@gateway/tor-sasl/eniac) (Ping timeout: 276 seconds)
[16:28:32] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[16:29:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[16:29:18] *** Joins: Adoi (~Adoi@user/adoi)
[16:29:42] *** Joins: wyclif (~wyclif@user/wyclif)
[16:29:45] *** Joins: nbao (~nbao@187.20.181.193)
[16:30:06] *** Joins: fikran (~fikran@user/fikran)
[16:30:45] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[16:32:17] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[16:32:32] *** Quits: somlis (~somlis@user/somlis) (Read error: Connection reset by peer)
[16:32:35] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[16:32:40] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[16:32:44] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[16:33:47] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[16:34:13] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:34:26] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[16:34:52] *** Joins: Hax0r (~Hax0r@87.101.192.39)
[16:35:13] *** Joins: wyclif (~wyclif@user/wyclif)
[16:35:33] *** Joins: bandit_za (~bandit_za@185.195.232.173)
[16:36:15] *** Joins: kosh (~kosh@user/kosh)
[16:38:05] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[16:38:33] *** Quits: Hax0r (~Hax0r@87.101.192.39) (Client Quit)
[16:38:46] *** Joins: LucaTM (~LucaTM@user/lucatm)
[16:39:34] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[16:39:50] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:40:08] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[16:40:42] *** Joins: wyclif (~wyclif@user/wyclif)
[16:42:12] *** Joins: somlis (~somlis@user/somlis)
[16:45:14] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[16:45:27] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[16:45:45] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:46:13] *** Joins: wyclif (~wyclif@user/wyclif)
[16:47:54] *** Quits: bandit_za (~bandit_za@185.195.232.173) (Ping timeout: 256 seconds)
[16:53:20] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[16:55:08] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[16:58:22] *** Joins: jmft2 (~jmft2@213.31.248.255)
[17:00:35] <bjs> braxas: are you referring to "Deprecated since version 3.8, will be removed in version 3.12: These types are also in the typing.io namespace, which was never supported by type checkers and will be removed."  ?
[17:00:44] <braxas> yes
[17:00:59] <bjs> braxas: that line is not deprecating typing.{IO, StringIO, BytesIO}
[17:01:20] <braxas> wow, that is pretty unclear
[17:01:35] *** Quits: Jigsy (~Jigsy@user/jigsy) (Ping timeout: 246 seconds)
[17:01:48] <braxas> would not have guessed that
[17:01:50] <bjs> braxas: it's very common phrasing in the docs, for "Deprecated since <version>: <thing that is deprecated>"
[17:01:54] *** Joins: wyclif (~wyclif@user/wyclif)
[17:01:57] <braxas> I see
[17:02:28] *** Joins: Macuser (~Macuser@216.30.159.201)
[17:02:45] <braxas> if I look at: https://docs.python.org/3.9/library/typing.html#typing.DefaultDict - I feel there it is not the same, there deprecation notice indicates this thing is being depercated
[17:02:55] <braxas> but anyway, it is clearer now, thanks
[17:04:37] *** Joins: node1 (~node1@user/node1)
[17:04:59] <d1rewolf> is there a way to do a calculation within slice syntax? for example, something like this (which fails): arr = [1,2,3,4]; i = 0; s = [i:i+=3]
[17:05:10] <bjs> braxas: yeah that one is saying that typing.DefaultDict is deprecated in favour of collections.defaultdict
[17:05:39] <braxas> yes, I feel this is a bit inconsistent, but anyway, it is what it is, I see this is quite common usage, thanks for clarifying
[17:05:39] <BtbN> d1rewolf, what's that supposed to do?
[17:05:43] <braxas> won't raise an issue
[17:06:12] <jinsun> braxas: there was a "fix" to change the wording in 3.10 docs https://github.com/python/cpython/pull/28004
[17:06:25] <d1rewolf> BtbN: well, ideally, it'd add 3 to i before doing the slice. so s = [0:3]
[17:06:25] *** Joins: ASTO (~yigit@85.96.163.227)
[17:06:31] <ASTO> TypeError: '>' not supported between instances of 'int' and 'NoneType' on line 9
[17:06:43] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[17:06:44] <braxas> jinsun: awesome
[17:06:49] *** Joins: Jigsy (~Jigsy@user/jigsy)
[17:06:59] <d1rewolf> and have the side effect of making i = 3 the next time I use it. I parsing a complex stream of chars and sugar like that would be nice
[17:07:09] <ASTO> https://paste.ofcode.org/37fGFAAnMbbgK4UhvsrfErn
[17:07:24] *** Joins: wyclif (~wyclif@user/wyclif)
[17:07:25] <bjs> ASTO: well presumably largest  was None
[17:07:35] <gitesh> When should I look for if a method is available for what I'm supposed to programming?
[17:07:53] <bjs> gitesh: I'm not sure what you're asking,  can you rephrase the question?
[17:08:17] <ASTO> I don't understan ASTO: TypeError: '>' not supported between instances of 'int' and 'NoneType' on line 9
[17:08:44] <bjs> ASTO: you cannot go  3 > None
[17:08:47] <bjs> for example.
[17:08:59] <gitesh> bjs: so there are many methods for string I don't know all, so how am I supposed to find one that implementing one myself unknowingly?
[17:09:06] <bjs> ASTO: that error means the right-hand side of > was None, and you cannot ask if an integer is larger than None
[17:09:10] <ASTO> bjs but None is 0 and 3 can be bigger than 0 ?
[17:09:12] <bjs> gitesh: you read the docs
[17:09:15] <bjs> ASTO: None is 0?
[17:09:16] <gitesh> *than
[17:09:25] <gitesh> bjs: okay
[17:09:59] <ASTO> The None keyword is used to define a null  value, or no value at all. None is not the same as 0, False, or an empty string. None is a data type of  its own (NoneType) and only None can be None.
[17:10:02] <bjs> gitesh: the docs (e.g. at docs.python.org) will document everything about the language. All the syntax. Every function.  Every type and every method those types have.  Every module etc
[17:10:11] <bjs> ASTO: yes, so None is not 0
[17:10:34] <bjs> ASTO: you can't ask if something is bigger than None, because None isn't a number
[17:10:36] *** Joins: xon (~xon@host-8-net-64-160-119.mobilinkinfinity.net.pk)
[17:10:45] <ASTO> you were right but how can I correct my code ?
[17:11:14] <bjs> ASTO: well what do you want to do if largest is None?
[17:11:28] <bjs> ASTO: or maybe you really just wanted to use 0 rather than None?
[17:12:04] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[17:12:27] *** Joins: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044)
[17:12:56] *** Joins: wyclif (~wyclif@user/wyclif)
[17:12:59] <ASTO> what I want to to is I wan to give some number like 2 ,3 ,4 ,5 ,10 and if I type a string it will say Invaild input then it will prompt the largest and smallest in the list
[17:13:25] <bjs> gitesh: for example, all the string methods can be found at docs.python.org -> Library Reference -> Built-In Types -> Text Sequence Type — str -> String Methods
[17:14:03] <gitesh> bjs: okay
[17:14:03] *** Joins: schumaml (~schumaml@p200300e2ef46440053c1821a43d17d29.dip0.t-ipconnect.de)
[17:14:06] *** Quits: schumaml (~schumaml@p200300e2ef46440053c1821a43d17d29.dip0.t-ipconnect.de) (Client Quit)
[17:14:49] *** Quits: xon (~xon@host-8-net-64-160-119.mobilinkinfinity.net.pk) (Ping timeout: 252 seconds)
[17:15:20] <bjs> gitesh: you will never be able to remember them all,  so anytime you want to do something and you're not sure you need to look (or write it yourself)
[17:15:38] <bjs> sometimes you'll remember that something exists or doesn't exist,  but most of the time,  you won't remember :)
[17:16:01] <ASTO> bjs thank you very much I have changed None with 0 my code works now thanks I  can't belive I spent 2 hours on this !
[17:17:37] <gitesh> bjs: hmm thanks
[17:17:50] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[17:18:24] *** Joins: wyclif (~wyclif@user/wyclif)
[17:18:44] <bjs> gitesh: new programmers often worry that they need the docs "too much".  But when I program I have one screen that permanently has the docs open for the language I'm using.  Usually a web browser with too many tabs to keep track of ;)
[17:19:24] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[17:20:21] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[17:20:40] <jinsun> gitesh: just googling your problem might work too and might be faster than finding in the docs (though nowadays google is not that good, you also have to also learn to filter out the bad results)
[17:21:04] <bjs> Google with Python is especially awkward because it seems to (still) like Python 2 too much
[17:21:08] <bjs> and 20 year old stack overflow posts
[17:22:34] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[17:23:07] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[17:23:11] <gitesh> Okay bjs jinsun
[17:23:35] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[17:23:35] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[17:23:55] *** Joins: wyclif (~wyclif@user/wyclif)
[17:24:26] *** Joins: brabrax (~brabrax@user/brabrax)
[17:24:34] *** Joins: califax (~califax@user/califx)
[17:25:03] *** Joins: help (~Thunderbi@p8239-ipngn9501marunouchi.tokyo.ocn.ne.jp)
[17:28:41] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[17:29:26] *** Joins: wyclif (~wyclif@user/wyclif)
[17:29:48] *** Quits: Mikaela- (~mikaela-@Feneas/Mikaela-) (Killed (NickServ (GHOST command used by Aminda-)))
[17:30:03] *** Joins: Mikaela- (~mikaela-@Feneas/Mikaela-)
[17:32:01] *** Joins: node1 (~node1@user/node1)
[17:33:26] *** Joins: zln (~zln@c80-217-230-193.bredband.tele2.se)
[17:33:49] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[17:34:11] *** Joins: Powerhouse6666 (~Powerhous@security.orcacomputers.com)
[17:34:11] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[17:34:17] *** Joins: dumbsharka (~amirvince@user/amirvincent64)
[17:34:53] *** Joins: ikus060 (~ikus060@96.127.228.230)
[17:34:56] *** Joins: wyclif (~wyclif@user/wyclif)
[17:36:06] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-a88e-d0eb-45b8-d7cc.res6.spectrum.com)
[17:38:11] *** Joins: masta`` (~oyster@user/masta/x-2645138)
[17:39:34] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[17:39:47] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.2.1)
[17:40:22] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[17:40:28] *** Joins: wyclif (~wyclif@user/wyclif)
[17:41:03] *** Quits: greedom (~greedom@2001:16b8:2e40:6500:5ccf:2fe2:4370:3a0d) (Remote host closed the connection)
[17:41:12] *** Joins: stevea (~stevea@user/stevea)
[17:45:06] *** Joins: elkclone (~elkclone@user/elkclone)
[17:45:23] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[17:45:46] *** Quits: help (~Thunderbi@p8239-ipngn9501marunouchi.tokyo.ocn.ne.jp) (Quit: help)
[17:45:57] *** Joins: wyclif (~wyclif@user/wyclif)
[17:46:07] *** Joins: akk (~akk@75.161.146.115)
[17:49:14] *** Joins: schumaml (~schumaml@p200300e2ef46440053c1821a43d17d29.dip0.t-ipconnect.de)
[17:49:22] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[17:50:08] *** Quits: kaos02 (~kaos02@12.186.233.220.static.exetel.com.au) (Ping timeout: 252 seconds)
[17:50:41] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[17:51:27] *** Joins: wyclif (~wyclif@user/wyclif)
[17:54:01] *** Quits: Powerhouse6666 (~Powerhous@security.orcacomputers.com) (Remote host closed the connection)
[17:55:05] *** Joins: techzerker (~igloo@host-67-204-227-19.public.eastlink.ca)
[17:55:05] *** Quits: techzerker (~igloo@host-67-204-227-19.public.eastlink.ca) (Excess Flood)
[17:56:11] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[17:56:37] *** Quits: ikus060 (~ikus060@96.127.228.230) (Ping timeout: 252 seconds)
[17:56:51] *** Joins: techzerker (~igloo@host-67-204-227-19.public.eastlink.ca)
[17:56:56] *** Joins: kaos02 (~kaos02@12.186.233.220.static.exetel.com.au)
[17:56:58] *** Joins: wyclif (~wyclif@user/wyclif)
[17:57:09] *** Quits: techzerker (~igloo@host-67-204-227-19.public.eastlink.ca) (Client Quit)
[17:57:10] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[17:59:48] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[18:00:29] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[18:01:11] *** Parts: ASTO (~yigit@85.96.163.227) ()
[18:01:32] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 250 seconds)
[18:02:32] *** Joins: wyclif (~wyclif@user/wyclif)
[18:03:06] *** Quits: xiongxin (~quassel@113.116.32.187) (Ping timeout: 260 seconds)
[18:03:58] *** Joins: xiongxin (~quassel@113.116.34.58)
[18:04:18] *** Joins: techzerker (~igloo@host-67-204-227-19.public.eastlink.ca)
[18:05:32] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 252 seconds)
[18:07:37] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[18:08:01] *** Joins: wyclif (~wyclif@user/wyclif)
[18:10:55] *** Joins: gimzmoe (~gimzmoe@user/gimzmoe)
[18:11:36] *** Quits: techzerker (~igloo@host-67-204-227-19.public.eastlink.ca) (Excess Flood)
[18:11:54] *** Joins: techzerker (~igloo@host-67-204-227-19.public.eastlink.ca)
[18:12:34] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[18:13:31] *** Joins: wyclif (~wyclif@user/wyclif)
[18:13:32] <braxas> Made this: https://github.com/python/typeshed/issues/6077: typing.IO and io.BaseIO type hierarchies are incompatible - hopefully I'm not misunderstanding things, but I think it is a bug
[18:13:40] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 250 seconds)
[18:13:42] *** Quits: techzerker (~igloo@host-67-204-227-19.public.eastlink.ca) (Client Quit)
[18:16:53] *** Joins: techzerker (~igloo@host-67-204-227-19.public.eastlink.ca)
[18:17:17] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:18:11] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[18:18:11] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[18:19:01] *** Joins: wyclif (~wyclif@user/wyclif)
[18:19:02] *** Quits: techzerker (~igloo@host-67-204-227-19.public.eastlink.ca) (Client Quit)
[18:19:20] *** Joins: techzerker (~techzerke@host-67-204-227-19.public.eastlink.ca)
[18:20:56] *** Quits: akk (~akk@75.161.146.115) (Ping timeout: 252 seconds)
[18:21:46] *** Quits: techzerker (~techzerke@host-67-204-227-19.public.eastlink.ca) (Read error: Connection reset by peer)
[18:22:00] *** Joins: kosh (~kosh@user/kosh)
[18:22:28] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[18:22:28] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Ping timeout: 252 seconds)
[18:23:41] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[18:24:32] *** Joins: wyclif (~wyclif@user/wyclif)
[18:24:39] *** Quits: Strom (strom@fedora/strom) ()
[18:26:52] *** Joins: Strom (strom@fedora/strom)
[18:28:33] *** Joins: techzerker (~techzerke@host-67-204-227-19.public.eastlink.ca)
[18:28:40] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[18:29:11] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[18:30:02] *** Joins: wyclif (~wyclif@user/wyclif)
[18:31:22] *** Joins: bewees (~bewees@user/bewees)
[18:31:25] <bewees> Hi
[18:31:37] <grym> bjs: if i have one complaint with zeal docs, it is that i can't link out to anchors/headings and paste the URLs here
[18:31:56] <bewees> How do you install third party python libraries?
[18:32:14] <grym> bewees: python -m venv somevenv; somevenv/bin/pip install <that libarary's pypi name>
[18:32:38] <altendky> yes, i might get to encouraging use of sqlalchemy but...  while named placeholders seem nice, `"INSERT INTO commits(id, table_id, state) VALUES(:id, :table_id, :state)"`, they still seem to depend on order alignment between the column list and the value list.  is there a way to get rid of the order dependence?
[18:33:03] <braxas> bewees: or more simply, with pip install
[18:33:23] <grym> braxas: that's what i said...
[18:33:41] <braxas> don't need to run it from a venv
[18:33:59] <grym> (but it's a real good idea)
[18:34:05] <altendky> if you want to not hazard breaking your os (in the case of most linuxes) you do
[18:34:24] <bewees> Is there any more secure way. I worry pypa allows arbitary code execution during installation. Do people have another approach such as cloning from the github repository manually?
[18:34:44] <altendky> that won't change arbitrary code execution during install
[18:34:50] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[18:34:57] <Yhg1s> bewees: you can't avoid arbitrary code execution during install. You have to trust the code you're installing.
[18:35:09] <meejah> bewees: some pypi packages have signatures (if that's more what you're asking)
[18:35:10] *** Quits: etiennem- (~etienne@user/etienneme) (Ping timeout: 252 seconds)
[18:35:10] <grym> bewees: `pip install git+https:/....` works, but also executes code.
[18:35:13] <grym> that's the whole point, really
[18:35:33] *** Joins: wyclif (~wyclif@user/wyclif)
[18:35:35] <altendky> the arbitrary code execution can be shifted to build time i guess by building a wheel then installing it.  i suppose that could be relevant in some cases.
[18:35:44] <meejah> if you wanted to e.g. verify a Git tag _before_ running install, you'd have to clone the repository and then do a local install
[18:35:46] *** Quits: y1n (~y1n@91.141.77.179.wireless.dyn.drei.com) (Ping timeout: 260 seconds)
[18:35:57] <bewees> I think `git clone` does not execute any code. If your project requires only libraries and no binaries you can omit the installation part?
[18:36:11] <Yhg1s> bewees: only if you don't use them.
[18:36:20] <Yhg1s> bewees: otherwise you would *still* be executing code when you import them.
[18:36:32] <meejah> bewees: you'd still need to run "pip install ... --editable .."
[18:36:32] <altendky> bewees: if you want a harder life, sure.  but is the installation really the most hazardous part where you are most likely to get hacked?
[18:36:37] <braxas> bewees: run it in a container if you want isolation
[18:36:43] <bewees> Right, I would have to manually read over the code I cloned, then let my project import it
[18:36:43] <grym> (especially in a venv :) )
[18:36:50] *** Quits: techzerker (~techzerke@host-67-204-227-19.public.eastlink.ca) (Quit: Igloo IRC: https://iglooirc.com)
[18:36:52] *** Joins: LiftLeft (~LiftLeft@172.98.92.24)
[18:36:57] *** Joins: ShinyCyril (~ShinyCyri@208.94.110.98)
[18:36:57] <meejah> if you're _really_ interested and have money, throw it towards improving PyPI
[18:36:58] <Yhg1s> bewees: so manually read over the code you cloned, and install it.
[18:36:59] <altendky> bewees: perhaps share the context of why you are concerned about this and someone can provide a recommendation
[18:37:08] <braxas> bewees: but if you want to use a third party library, I presume you will run it, and if you do, I mean, that is by definition arbitrary code execution
[18:37:32] *** Joins: badsektor (~badsektor@user/badsektor)
[18:37:35] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[18:37:44] <braxas> bewees: so it is a bit missing the forrest for the trees
[18:38:53] *** Joins: xon (~xon@host-8-net-64-160-119.mobilinkinfinity.net.pk)
[18:39:03] <bewees> Yhg1s, I try that thanks. My old django project has about 65 third party modules, so that will take a while. I will try to reduce the libraries first, then clone them, and add the path to poetry
[18:39:25] *** Joins: fikran (~fikran@user/fikran)
[18:39:32] <grym> sounds vaguely masochistic
[18:39:42] <Yhg1s> bewees: or, vet a specific version of the library, then pin that version with a hash.
[18:39:55] <Yhg1s> saves you from all the error-prone hassle of checking out the right version.
[18:40:04] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[18:40:42] *** Quits: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044) (Quit: Konversation terminated!)
[18:40:44] *** Quits: pseudonymous (~pseud0@78.143.68.142.static.fibianet.dk) (Quit: Leaving)
[18:40:56] <bewees> Yeah, also poetry can do something like `#django-haystack = { git = "https://github.com/django-haystack/django-haystack.git", rev = "802b0f6f4b3b99314453261876a32bac2bbec94f`
[18:41:03] *** Joins: wyclif (~wyclif@user/wyclif)
[18:41:28] *** Quits: ShinyCyril (~ShinyCyri@208.94.110.98) (Client Quit)
[18:42:11] *** Joins: ShinyCyril (~ShinyCyri@207.164.135.99)
[18:42:14] *** Joins: Barones (~Barones@177.132.237.5)
[18:43:01] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[18:43:23] *** Joins: ano (~ano@user/ano)
[18:43:52] *** Quits: xon (~xon@host-8-net-64-160-119.mobilinkinfinity.net.pk) (Ping timeout: 265 seconds)
[18:45:41] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[18:45:53] *** Joins: Pandadub (~Barones@earth.ps5.com.br)
[18:46:35] *** Joins: wyclif (~wyclif@user/wyclif)
[18:48:26] *** Quits: Barones (~Barones@177.132.237.5) (Ping timeout: 252 seconds)
[18:48:50] *** Joins: etienneme (~etienne@user/etienneme)
[18:49:47] *** Joins: han-solo (~hanish@user/han-solo)
[18:49:55] *** Quits: jmft2 (~jmft2@213.31.248.255) (Quit: This computer has gone to sleep)
[18:50:23] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[18:50:32] *** Joins: pycode (~pycode@2001:b07:5d28:551:476b:b288:dbd5:8fb1)
[18:51:36] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[18:51:41] *** Joins: Burrr (~Burrr@urmomma-fux0rs-with.burrr.nl)
[18:51:54] *** Joins: Adoi (~Adoi@user/adoi)
[18:52:06] *** Joins: wyclif (~wyclif@user/wyclif)
[18:52:58] *** Joins: blackout69 (~blackout6@net-37-179-183-91.cust.vodafonedsl.it)
[18:52:58] *** Joins: techzerker (~techzerke@host-67-204-227-19.public.eastlink.ca)
[18:53:19] *** Joins: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net)
[18:54:01] *** Quits: magla (~gelignite@55d479ac.access.ecotel.net) (Quit: Stay safe!)
[18:54:58] *** Quits: ShinyCyril (~ShinyCyri@207.164.135.99) (Quit: ShinyCyril)
[18:56:01] *** Quits: etienneme (~etienne@user/etienneme) (Ping timeout: 252 seconds)
[18:56:55] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[18:56:58] *** Joins: ShinyCyril (~ShinyCyri@208.94.110.98)
[18:57:14] *** Parts: blackout69 (~blackout6@net-37-179-183-91.cust.vodafonedsl.it) ()
[18:57:14] *** Quits: Pandadub (~Barones@earth.ps5.com.br) (Ping timeout: 252 seconds)
[18:57:15] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Quit: Leaving)
[18:57:35] *** Joins: wyclif (~wyclif@user/wyclif)
[18:58:07] *** Joins: jgrout (~textual@pool-71-174-224-95.bstnma.fios.verizon.net)
[18:59:25] *** Joins: etienneme (~etienne@user/etienneme)
[18:59:30] *** Joins: blackout69 (~blackout6@net-37-179-183-91.cust.vodafonedsl.it)
[19:01:45] *** Joins: hyskaru (~hyskaru@user/hyskaru)
[19:01:58] *** Quits: ShinyCyril (~ShinyCyri@208.94.110.98) (Quit: ShinyCyril)
[19:02:07] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[19:02:23] *** Quits: techzerker (~techzerke@host-67-204-227-19.public.eastlink.ca) (Quit: Igloo IRC: https://iglooirc.com)
[19:03:08] *** Joins: wyclif (~wyclif@user/wyclif)
[19:03:15] *** Quits: hyskaru (~hyskaru@user/hyskaru) (Client Quit)
[19:04:19] *** Joins: ShinyCyril (~ShinyCyri@207.164.135.99)
[19:08:02] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[19:08:36] *** Joins: wyclif (~wyclif@user/wyclif)
[19:08:47] *** Quits: schumaml (~schumaml@p200300e2ef46440053c1821a43d17d29.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[19:10:36] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[19:10:49] *** Joins: schumaml (~schumaml@p579aa7c4.dip0.t-ipconnect.de)
[19:12:42] *** Quits: catdog (~quassel@2001:470:50f7:cdcd::cd1) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[19:12:51] *** Joins: catdog (~quassel@2001:470:50f7:cdcd::cd1)
[19:13:37] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[19:14:03] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[19:14:06] *** Joins: wyclif (~wyclif@user/wyclif)
[19:15:07] *** Quits: brettgilio (~brettgili@x-node.gq) (Quit: Leaving...)
[19:15:17] *** Quits: coc0nut (~coc0nut@user/coc0nut) (Ping timeout: 265 seconds)
[19:16:25] *** Joins: Barones (~Barones@177.132.237.5)
[19:17:14] *** Joins: brettgilio (~brettgili@x-node.gq)
[19:17:28] *** Quits: schumaml (~schumaml@p579aa7c4.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[19:18:11] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[19:18:41] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[19:19:09] *** Joins: schumaml (~schumaml@p4ff9124e.dip0.t-ipconnect.de)
[19:19:10] *** Joins: jazzy (~jaziz@2600:380:854a:af07:358e:f55f:33dd:e809)
[19:19:37] *** Joins: wyclif (~wyclif@user/wyclif)
[19:21:18] *** Quits: catdog (~quassel@2001:470:50f7:cdcd::cd1) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[19:21:46] *** Joins: catdog (~quassel@birdperson.tuxzone.org)
[19:24:37] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[19:24:37] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[19:24:42] *** Quits: Elodin (~weechat@user/elodin) (Quit: WeeChat 3.2)
[19:24:50] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[19:25:07] *** Joins: wyclif (~wyclif@user/wyclif)
[19:25:10] *** Quits: ShinyCyril (~ShinyCyri@207.164.135.99) (Quit: ShinyCyril)
[19:25:42] *** Quits: eniac_ (~eniac@gateway/tor-sasl/eniac) (Ping timeout: 276 seconds)
[19:26:11] *** Quits: xiongxin (~quassel@113.116.34.58) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:26:58] *** Quits: pycode (~pycode@2001:b07:5d28:551:476b:b288:dbd5:8fb1) (Ping timeout: 252 seconds)
[19:27:50] *** Joins: thurs806 (~thurs@ip68-225-209-147.ph.ph.cox.net)
[19:28:51] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[19:28:51] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[19:29:04] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 252 seconds)
[19:29:23] *** Joins: nomic (~nomic@85.203.36.16)
[19:29:38] *** Joins: brabrax (~brabrax@user/brabrax)
[19:29:41] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[19:29:46] *** Joins: califax (~califax@user/califx)
[19:29:58] <mh_le> so when I plot a circuit diagram with qiskit in a jupyter notebook, I get two two plots of the same thing instead of just one
[19:30:39] *** Joins: wyclif (~wyclif@user/wyclif)
[19:33:15] *** Joins: Adoi (~Adoi@user/adoi)
[19:33:34] *** Joins: n00b101 (uid448161@id-448161.lymington.irccloud.com)
[19:34:25] *** Exa is now known as Exagone313
[19:34:29] *** Exagone313 is now known as Exa
[19:35:15] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 250 seconds)
[19:35:42] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:35:46] *** Joins: upsala (~zcb@185.213.155.160)
[19:36:11] *** Joins: wyclif (~wyclif@user/wyclif)
[19:37:23] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 252 seconds)
[19:38:29] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[19:39:14] *** Joins: iomari891 (~iomari891@129.205.113.9)
[19:39:35] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[19:40:39] *** Quits: thurs806 (~thurs@ip68-225-209-147.ph.ph.cox.net) (Quit: The Lounge - https://thelounge.chat)
[19:40:54] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[19:41:38] *** Joins: wyclif (~wyclif@user/wyclif)
[19:41:42] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[19:42:18] *** Joins: ShinyCyril (~ShinyCyri@207.164.135.99)
[19:46:24] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 250 seconds)
[19:47:10] *** Joins: wyclif (~wyclif@user/wyclif)
[19:47:47] *** Joins: white5moke (~white5mok@ip72-219-109-30.oc.oc.cox.net)
[19:48:53] <braxas> bewees: poetry actually stores the hash of git projects even if you don't tell it to
[19:49:04] <braxas> and it wont use a different hash unless you tell it to use a different one
[19:49:05] *** Quits: white5moke (~white5mok@ip72-219-109-30.oc.oc.cox.net) (Client Quit)
[19:49:12] <braxas> same for non git dependencies
[19:49:23] *** Joins: white5moke (~white5mok@ip72-219-109-30.oc.oc.cox.net)
[19:49:49] <braxas> but still this worry about arbitrary code excution on install, while not caring about arbitrary code execution when you actually execute arbitrary code is a bit odd to me
[19:51:41] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[19:52:40] *** Joins: wyclif (~wyclif@user/wyclif)
[19:53:17] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[19:53:39] <braxas> https://python-poetry.org/docs/basic-usage/#installing-with-poetrylock
[19:56:31] *** Quits: schumaml (~schumaml@p4ff9124e.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[19:57:37] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[19:57:55] *** Quits: kib (~kib@user/kib) (Quit: WeeChat 3.2.1)
[19:58:10] *** Joins: wyclif (~wyclif@user/wyclif)
[19:58:22] *** Joins: schumaml (~schumaml@p200300e2ef47df00733f8fe56b1215da.dip0.t-ipconnect.de)
[20:00:22] <trace987> how do I make type anotations with: a,b = 1,2
[20:00:33] <trace987> because a: int, b: int = 1, 2 does not work
[20:03:07] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[20:03:41] *** Joins: wyclif (~wyclif@user/wyclif)
[20:04:06] *** Quits: ShinyCyril (~ShinyCyri@207.164.135.99) (Quit: ShinyCyril)
[20:04:34] *** Joins: ham5urg (~ham5urg@p200300d16742960070074222e383ef04.dip0.t-ipconnect.de)
[20:05:01] <yitz> If you're actually assigning 1, 2  then mypy can figure out the types on its own
[20:05:29] *** Joins: greedom (~greedom@2001:16b8:2e40:6500:5ccf:2fe2:4370:3a0d)
[20:05:39] <han-solo> a, b = 1, 2 # type: int, int
[20:05:50] <han-solo> https://www.python.org/dev/peps/pep-0484/#type-comments # ?
[20:06:56] <ham5urg> If I define a constructor like MyClass(): __init__(self, my_var) and initiate it with MyClass("foo"), is it possible to create a member like myinstance_of_myclass.foo = something?
[20:07:41] *** Joins: MikZyth (~MikZyth@188.65.242.83)
[20:07:50] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[20:08:15] <han-solo> how would it know what value to use ?
[20:08:30] <han-solo> as in what would be the `something` in that case
[20:08:30] *** Quits: nbao (~nbao@187.20.181.193) (Quit: leaving)
[20:08:32] <sveinse> ham5urg: Yes, unless the class is frozen or otherwise prevents setting attributes
[20:08:37] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[20:08:45] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[20:09:12] *** Joins: wyclif (~wyclif@user/wyclif)
[20:10:30] <ham5urg> sveinse, can you tell how to instantiate self.foo ?
[20:11:22] <sveinse> class A:  def __init__(self, foo):  self.foo = foo
[20:11:22] *** Quits: alguien (~alguien@user/alguien) (Ping timeout: 252 seconds)
[20:11:50] <ham5urg> No, def __init__(self, myvar) with myvar="foo"
[20:11:53] <han-solo> i think, they meant `setattr(self, my_var, 'something')` #
[20:11:55] <ham5urg> What I neant
[20:12:04] <han-solo> oh
[20:12:30] <ham5urg> Result like self.foo = "whatsoever"
[20:12:47] <sveinse> You lost me there
[20:12:52] <han-solo> ah, then setattr would do the job, i guess. But i am told dynamically setting attributes is a bad idea ?
[20:13:34] <ham5urg> Dynamic setting of attributes shall not be used? I understand
[20:13:42] *** Joins: Shimoda (~Shimoda@151.21.153.86)
[20:14:03] *** Joins: ShinyCyril (~ShinyCyri@208.94.110.98)
[20:14:14] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[20:14:15] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:14:26] *** Joins: MrBungle (~MrBungle@2604:3d08:1788:dc00:b423:2116:b870:efc8)
[20:14:42] *** Joins: wyclif (~wyclif@user/wyclif)
[20:15:48] <sveinse> Is it another variant of dict as obj["something"] is cumbersome-thing, where obj.something is neater? Which (myself included) was an opinion inherited after programming in JS for a while?
[20:16:42] *** Joins: Akuli (~Akuli@82-203-167-98.bb.dnainternet.fi)
[20:18:21] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 276 seconds)
[20:18:54] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[20:19:12] *** Quits: rsx (~dummy@ppp-188-174-153-64.dynamic.mnet-online.de) (Quit: rsx)
[20:19:44] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[20:20:09] *** Quits: white5moke (~white5mok@ip72-219-109-30.oc.oc.cox.net) (Quit: Igloo IRC: https://iglooirc.com)
[20:20:14] *** Joins: wyclif (~wyclif@user/wyclif)
[20:22:02] *** Joins: FluffyMask (~masque@user/fluffymask)
[20:22:07] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[20:22:50] *** Joins: node1 (~node1@user/node1)
[20:22:53] *** Quits: niemal (~niemal@user/niemal) (Quit: Leaving)
[20:22:58] *** Quits: ShinyCyril (~ShinyCyri@208.94.110.98) (Quit: ShinyCyril)
[20:23:17] *** Joins: Raska (~raska@phare.normalesup.org)
[20:23:29] *** Parts: blackout69 (~blackout6@net-37-179-183-91.cust.vodafonedsl.it) ()
[20:23:39] *** Joins: ikus060 (~ikus060@96.127.228.230)
[20:24:24] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[20:24:31] *** Quits: Shimoda (~Shimoda@151.21.153.86) (Quit: Leaving)
[20:25:22] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[20:25:43] *** Joins: wyclif (~wyclif@user/wyclif)
[20:30:44] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[20:30:45] *** Quits: iomari891 (~iomari891@129.205.113.9) (Quit: WeeChat 3.0.1)
[20:31:16] *** Joins: wyclif (~wyclif@user/wyclif)
[20:31:18] *** Joins: Powerhouse6666 (~Powerhous@24.109.185.150)
[20:31:38] *** Joins: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com)
[20:32:49] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:33:48] *** Joins: white5moke (~white5mok@ip72-219-109-30.oc.oc.cox.net)
[20:33:55] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Remote host closed the connection)
[20:35:52] *** Quits: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net) (Quit: Leaving)
[20:36:00] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[20:36:07] *** Quits: greedom (~greedom@2001:16b8:2e40:6500:5ccf:2fe2:4370:3a0d) (Remote host closed the connection)
[20:36:45] *** Joins: wyclif (~wyclif@user/wyclif)
[20:37:07] *** Joins: greedom (~greedom@2001:16b8:2e40:6500:5ccf:2fe2:4370:3a0d)
[20:38:32] *** Joins: blackout69 (~blackout6@net-37-179-183-91.cust.vodafonedsl.it)
[20:39:25] *** Quits: white5moke (~white5mok@ip72-219-109-30.oc.oc.cox.net) (Ping timeout: 252 seconds)
[20:40:00] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[20:42:03] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[20:44:07] *** Joins: lsrtl (~lsrtl@user/lsrtl)
[20:44:55] *** Quits: ikus060 (~ikus060@96.127.228.230) (Ping timeout: 252 seconds)
[20:45:40] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[20:45:50] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[20:46:16] *** Joins: wyclif (~wyclif@user/wyclif)
[20:46:41] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[20:47:32] *** Quits: greedom (~greedom@2001:16b8:2e40:6500:5ccf:2fe2:4370:3a0d) ()
[20:48:45] *** Joins: fikran (~fikran@user/fikran)
[20:51:05] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[20:51:40] *** Joins: Narrat (~omnius@p200300df5f13ccd506ea56fffe2e7cdc.dip0.t-ipconnect.de)
[20:51:49] *** Joins: wyclif (~wyclif@user/wyclif)
[20:56:35] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[20:57:05] *** Joins: Shimoda (~Shimoda@151.21.153.86)
[20:57:08] *** Quits: Powerhouse6666 (~Powerhous@24.109.185.150) (Ping timeout: 252 seconds)
[20:57:20] *** Joins: wyclif (~wyclif@user/wyclif)
[20:58:48] *** Joins: Brocker (~NoBody@user/brocker)
[20:59:54] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[21:01:10] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[21:01:52] *** Joins: teut (~teut@182.69.68.230)
[21:02:05] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[21:02:50] *** Joins: wyclif (~wyclif@user/wyclif)
[21:04:03] <braxas> can I find pydoc3 docs online? specifically io.RawIOBase and io.IOBase
[21:06:07] *** Quits: shokohsc8 (~shokohsc@161.88.195.77.rev.sfr.net) (Quit: The Lounge - https://thelounge.chat)
[21:06:58] *** Quits: ham5urg (~ham5urg@p200300d16742960070074222e383ef04.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[21:07:13] <tumbleweed> braxas: https://docs.python.org/3/library/io.html
[21:07:19] <darksun> braxas: https://docs.python.org/3/library/io.html#io.RawIOBase <--- this one?
[21:07:35] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[21:07:51] <braxas> I'm expecting to see this: https://termbin.com/bmwz
[21:08:10] <darksun> lol
[21:08:21] *** Joins: wyclif (~wyclif@user/wyclif)
[21:08:29] <braxas> that is output of pydoc3 io.RawIOBase
[21:08:46] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:09:14] <braxas> or at least the same info, in same succinct presentation
[21:10:04] <teut> https://bpa.st/SGKQ#1L19   line 15 and 19 are io bound and slow
[21:10:13] *** Joins: fofoni (~fofoni@user/fofoni)
[21:10:13] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[21:10:16] <teut> what can be done to optimize it
[21:10:41] <teut> its a simple code to take screen shot , press f4 and get the ocr text
[21:12:44] <teut> is gradclipboard too io bound?
[21:12:58] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[21:13:53] *** Joins: wyclif (~wyclif@user/wyclif)
[21:14:33] <teut> the type of Image.open is  <class 'PIL.PngImagePlugin.PngImageFile'>
[21:14:53] <teut> I want to store it to buffer to make it fast
[21:18:04] *** Quits: zaquest (~notzaques@5.128.210.178) (Quit: Leaving)
[21:18:10] <teut> https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.open    it needs a file name of a file pointer
[21:18:14] <teut> or*
[21:18:35] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[21:18:51] *** Joins: thiras (~thiras@user/thiras)
[21:18:52] <teut>     stream = io.BytesIO(image)   how to write this to a file pointer?
[21:19:17] *** Joins: trampel (~trampel@2601:602:9c00:921:981e:cbc0:b345:da20)
[21:19:18] <teut> or more correctly     stream = io.BytesIO(bytes(image))
[21:19:23] *** Joins: wyclif (~wyclif@user/wyclif)
[21:19:30] *** Joins: logithack (~logithack@p200300cfbf033e00dfde26fe3164a6ab.dip0.t-ipconnect.de)
[21:19:33] <han-solo> from a quick search, it seems you would be able to `image = ImageGrab.grabclipboard(); image = image.convert('RGB'); pytesseract.image_to_string(image,lang='eng+tr')` # or something, not sure if it works
[21:19:39] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:5d10:8850:6285:4e0e)
[21:19:40] *** Joins: zaquest (~notzaques@5.128.210.178)
[21:19:42] *** AmyMalik is now known as Ellenor
[21:20:17] *** Quits: Togra (~Togra@user/togra) (Quit: I am in the upside down)
[21:20:27] *** Joins: Togra (~Togra@user/togra)
[21:22:14] <teut> cool,  I should have seen pytesseract's docs than PIL
[21:22:19] *** Quits: logithack (~logithack@p200300cfbf033e00dfde26fe3164a6ab.dip0.t-ipconnect.de) (Client Quit)
[21:22:20] <teut> thanks han-solo
[21:22:46] *** Joins: logithack (~logithack@p200300cfbf033e00dfde26fe3164a6ab.dip0.t-ipconnect.de)
[21:22:53] <Lando-SpacePimp> han-solo, my man!
[21:23:01] *** Quits: logithack (~logithack@p200300cfbf033e00dfde26fe3164a6ab.dip0.t-ipconnect.de) (Client Quit)
[21:23:08] *** Joins: y1n (~y1n@178.115.64.221.wireless.dyn.drei.com)
[21:23:09] <aphysically> grym: jinsun: remember that list comprehension with next that black butchered?
[21:23:10] <aphysically> https://bpa.st/DIMQ
[21:23:43] <aphysically> oh protected by the is_file still
[21:23:45] <aphysically> but still
[21:24:05] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[21:24:45] <aphysically> okay with the condition black still manages to butcher it at the indention I was using https://bpa.st/DRMA
[21:24:54] *** Joins: wyclif (~wyclif@user/wyclif)
[21:25:51] <aphysically> probably looks better with a second if but my linters will complain I didn't simplify the nested ifs into a single expression
[21:26:35] <jinsun> did you keep 80 character limit instead of 88?
[21:27:08] <aphysically> no, the actual code already has two levels of indentions when this code occurs
[21:27:18] *** Joins: yaalon (~yaalon@2600:1700:50c0:bf0:88f1:bf13:960f:4f84)
[21:27:34] <aphysically> https://github.com/GBeauregard/pyffstream/blob/927c45fab5ea0a2ab37e56000bb6f001a9f12955/src/pyffstream/cli.py#L537
[21:28:01] <aphysically> itertools is certainly more readable
[21:28:28] *** Joins: shokohsc8 (~shokohsc@161.88.195.77.rev.sfr.net)
[21:28:32] <aphysically> I realized dropwhile was perfect for this while I trying to find something in stdlib that neatly solved something else
[21:29:05] *** Joins: skapata (~Skapata@user/skapata)
[21:29:08] <jinsun> yes that is a hidden benefit of black, it makes your super long list comprehension ugly so you find the right tool in itertools :D
[21:29:39] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[21:30:23] *** Joins: wyclif (~wyclif@user/wyclif)
[21:30:34] <sveinse> haha
[21:30:54] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[21:31:52] <teut> black but doesnt has the default line wrap limit to that of pylint
[21:33:24] <jinsun> yes so change pylint config (or black config but I like the 88 limit, so I change pylint config instead)
[21:33:38] <aphysically> oh forgot the list argument to dropwhile
[21:34:58] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[21:34:59] <teut> but it should be compatible with pylint
[21:35:04] <aphysically> whatever I'll find a way to make this less ugly https://bpa.st/54SQ
[21:35:12] <teut> I need to find the setting again every time
[21:35:56] *** Joins: wyclif (~wyclif@user/wyclif)
[21:35:57] *** Joins: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net)
[21:36:15] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[21:37:40] *** Joins: Elodin (~weechat@user/elodin)
[21:38:19] *** Quits: zepolen (~zepolen@2a02:587:8608:c7cb:3940:b096:fbd6:30bf) (Remote host closed the connection)
[21:38:44] *** Joins: zepolen (~zepolen@2a02:587:8608:c7cb:9895:b4de:9998:1cda)
[21:39:35] *** Joins: akk (~akk@75.161.146.115)
[21:39:47] *** Joins: alguien (~alguien@user/alguien)
[21:40:17] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 265 seconds)
[21:40:32] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[21:40:40] <aphysically> maybe just moving out the lambda is the best way to do it https://bpa.st/MQLQ
[21:40:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[21:41:25] *** Joins: wyclif (~wyclif@user/wyclif)
[21:41:27] *** Joins: naterlater (~Nathan22@199.249.111.186)
[21:42:05] <jinsun> yup, better to name the intermediate steps  instead of doing too much in one expression
[21:46:05] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[21:46:56] *** Joins: wyclif (~wyclif@user/wyclif)
[21:48:19] *** Quits: moto (~moto@user/moto) (Read error: Connection reset by peer)
[21:48:33] *** Quits: Elodin (~weechat@user/elodin) (Quit: WeeChat 3.2)
[21:50:28] *** Joins: Madda (~Madda@227.249.9.51.dyn.plus.net)
[21:50:54] *** Joins: magla (~gelignite@55d434bd.access.ecotel.net)
[21:51:35] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[21:52:07] <aphysically> ./src/pyffstream/cli.py:539:13: E731 do not assign a lambda expression, use a def
[21:52:26] *** Joins: wyclif (~wyclif@user/wyclif)
[21:52:27] <aphysically> probably just going to add this to my ignore list for linters
[21:52:46] *** Joins: rn2208 (~rn2208@188.234.196.224)
[21:52:51] <aphysically> it's not like I'm going to be defining reusable functions like this
[21:53:10] *** Quits: ph88 (~ph88@2a02:8109:9e00:7e5c:7cb7:e630:89c:9583) (Ping timeout: 252 seconds)
[21:53:56] *** Parts: blackout69 (~blackout6@net-37-179-183-91.cust.vodafonedsl.it) ()
[21:54:04] *** Joins: ph88 (~ph88@2a02:8109:9e00:7e5c:7cb7:e630:89c:9583)
[21:54:14] *** Quits: hyper_dave (~hyper_dav@2a01:4f9:4a:246c::2) (Quit: WeeChat 3.2)
[21:54:24] *** Joins: hyper_dave (~hyper_dav@2a01:4f9:4a:246c::2)
[21:55:03] <aphysically> ehh I"ll just add noqa
[21:57:05] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[21:57:09] *** Parts: micah (~micah@debian/micah) ()
[21:57:56] *** Joins: wyclif (~wyclif@user/wyclif)
[21:58:22] *** Quits: naterlater (~Nathan22@199.249.111.186) (Read error: Connection reset by peer)
[21:59:08] *** Quits: dumbsharka (~amirvince@user/amirvincent64) (Ping timeout: 265 seconds)
[22:00:14] <jinsun> you could use operator.attrgetter and get rid of the lambda that way, but not sure how well that works with type checkers (lambda doesn't work well either though)
[22:01:09] *** Quits: fofoni (~fofoni@user/fofoni) (Quit: Leaving)
[22:02:37] *** Quits: han-solo (~hanish@user/han-solo) (Quit: leaving)
[22:02:58] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[22:03:28] *** Joins: wyclif (~wyclif@user/wyclif)
[22:04:14] *** Joins: klu_ (~klu@user/klu)
[22:06:26] *** Quits: yaalon (~yaalon@2600:1700:50c0:bf0:88f1:bf13:960f:4f84) (Remote host closed the connection)
[22:06:58] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[22:07:12] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:08:19] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[22:08:57] *** Quits: schumaml (~schumaml@p200300e2ef47df00733f8fe56b1215da.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[22:08:57] *** Joins: wyclif (~wyclif@user/wyclif)
[22:09:34] <aphysically> yeah or methodcaller, but then I think you still need a lambda to insert the 'not' so it's a bit silly
[22:09:44] *** Quits: dulanic (~dulanic@47.187.144.163) (Quit: The Lounge - https://thelounge.chat)
[22:10:23] *** Joins: dulanic (~dulanic@47.187.144.163)
[22:10:35] *** Joins: schumaml (~schumaml@p57b7e310.dip0.t-ipconnect.de)
[22:10:42] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:5d10:8850:6285:4e0e) (Ping timeout: 250 seconds)
[22:11:03] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[22:13:42] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[22:14:04] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[22:14:28] *** Joins: wyclif (~wyclif@user/wyclif)
[22:14:48] *** Quits: dulanic (~dulanic@47.187.144.163) (Client Quit)
[22:15:23] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[22:16:08] *** Joins: dulanic (~dulanic@47.187.144.163)
[22:17:55] *** Quits: NeoCore (~neocore@185.244.213.132) (Quit: Leaving)
[22:17:56] *** Joins: TranquilEcho (~grom@user/tranquilecho)
[22:19:05] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[22:19:59] *** Joins: wyclif (~wyclif@user/wyclif)
[22:20:16] *** Quits: schumaml (~schumaml@p57b7e310.dip0.t-ipconnect.de) (Quit: WeeChat 3.3)
[22:20:49] *** Quits: ph88 (~ph88@2a02:8109:9e00:7e5c:7cb7:e630:89c:9583) (Quit: Leaving)
[22:23:05] *** Joins: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d)
[22:23:24] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:24:14] <aphysically> anyway, I discovered dropwhile while trying to think up a simple way to do this https://bpa.st/PMEA
[22:24:19] *** Quits: HelloShitty (~psysc0rpi@bl20-171-222.dsl.telepac.pt) (Read error: Connection reset by peer)
[22:24:35] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[22:25:05] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[22:25:28] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[22:25:29] *** Joins: wyclif (~wyclif@user/wyclif)
[22:25:44] *** Joins: Thanatos (~Thanatos@ec2-54-148-37-124.us-west-2.compute.amazonaws.com)
[22:26:40] *** Joins: HelloShitty (~psysc0rpi@bl20-171-222.dsl.telepac.pt)
[22:28:26] *** Quits: rn2208 (~rn2208@188.234.196.224) (Ping timeout: 252 seconds)
[22:29:01] *** Joins: yaalon (~yaalon@2603-8081-7002-fce2-1824-7f47-75fa-d684.res6.spectrum.com)
[22:29:36] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[22:29:46] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[22:30:19] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 250 seconds)
[22:31:02] *** Joins: wyclif (~wyclif@user/wyclif)
[22:31:14] *** Joins: rapier (~marcos@170.233.159.1)
[22:32:14] <rapier> guys, why doesn't this code work properly? I want to transpose a matrix by nested loop > https://bpa.st/KJMA
[22:32:30] <rapier> it's copied duplicate numbers
[22:32:37] <rapier> i don't know why
[22:33:02] *** Joins: mokulus (~mokulus@user/mokulus)
[22:34:14] <teut> (venv) PS D:\Python> pip install "discord.py" Fatal error in launcher: Unable to create process using '"D:\desktop\Python\venv\Scripts\python.exe"  "D:\Python\venv\Scripts\pip.exe" install discord.py': The system cannot find the file specified.
[22:34:32] <teut> any tips on how to install this package?
[22:35:27] <teut> py -3 -m pip install -U discord.py  damn this command from the docs  installed it globally
[22:35:28] <InPhase> rapier: a = [[0]*4]*5; a[0][0] = 7; print(a);   # Count the 7's in the output.
[22:35:52] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[22:36:12] <rapier> why does it happen?
[22:36:13] <jinsun_> rapier: when you multiply list by integer, the repeated values are not copies, it is the same object referenced by all items in the list
[22:36:31] *** Joins: wyclif (~wyclif@user/wyclif)
[22:36:38] <InPhase> rapier: This video is very worth watching:  https://nedbatchelder.com/text/names1.html
[22:36:39] <rapier> how can i fix that, jinsun_?
[22:36:50] <rapier> dammit
[22:37:01] <rapier> python is pretty annoying at this part
[22:37:24] <jinsun_> use a list comprehension instead when the list has mutable items
[22:38:07] <InPhase> rapier: You're just using the wrong mental model for how names and values work.  You can fix just this code, or you can fix the mental model and the rest of your future code will go smooth.
[22:38:17] <jinsun_> rapier  `matrixEmpty = [[0]*r for _ in range(c)]`
[22:38:21] <ChrisWarrick> teut: your venv seems broken
[22:38:37] <ChrisWarrick> teut: also, you have some strange paths
[22:39:29] <teut> ya, you are correct, I just noticed something strange too
[22:39:44] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[22:39:56] <rapier> InPhase, i didn't get what you mean. I need to initialize a matrix with zero values
[22:40:32] <InPhase> rapier: Well you initialized a list with two references to a list of three zeroes.
[22:40:33] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[22:40:48] <rapier> so i think it's easiest way to do that it is [[0]*columns]*rowns
[22:40:55] <rapier> rows*
[22:41:01] *** Joins: Macuser (~Macuser@216.30.159.201)
[22:41:01] <jinsun_> no
[22:41:02] <grym> rapier: np.zeros(shape_tuple), then, but in stdlib, [[0 for _ in range(nrows)] for _ in range(ncols)]
[22:41:05] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[22:41:13] <grym> rapier: right, using * is wrong here
[22:41:16] <grym> it's not doing what you think
[22:41:34] <rapier> i'm using the wrong tool
[22:41:34] <InPhase> rapier: Multiplication on a list by N assigns what is inside that list to each position N times.  Assignment produces another reference to the same thing.
[22:41:34] <rapier> ok
[22:41:40] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-a88e-d0eb-45b8-d7cc.res6.spectrum.com) (Read error: Connection reset by peer)
[22:41:52] <rapier> InPhase, now you're talking... thank you. i got it
[22:41:56] <rapier> the reference is the same
[22:42:02] <grym> ^ yep
[22:42:03] *** Joins: wyclif (~wyclif@user/wyclif)
[22:42:14] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[22:42:32] <InPhase> rapier: It's the same behavior for the inner and outer list, but the implication is different when you subsequently assign an innermost element.
[22:42:44] *** Quits: gitly (~gitly@85.255.232.38) (Ping timeout: 252 seconds)
[22:42:47] <rapier> i thought that it copied the element many times
[22:42:58] <InPhase> For that, use a list comprehension to generate N copies.
[22:43:07] *** Quits: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net) (Ping timeout: 265 seconds)
[22:43:12] <rapier> ok, as jnsun_ said
[22:43:34] <teut> actually changing to git bash from powershell fixed it
[22:43:51] *** Quits: stevea (~stevea@user/stevea) (Quit: Either I or my computer has gone to sleep. ZZZzzz…)
[22:43:52] <InPhase> rapier: But still, the video is a good watch.  There are multiple issues of this type, and it's helpful to get them into the mind as things to watch for.
[22:44:12] <InPhase> And to solidify the "why".
[22:44:15] <teut> few things work in git bash others work in powershell
[22:44:21] <rapier> but why do python makers put the * as multiplication on a list by N assigns what is inside that list to each position N times?
[22:44:27] <teut> really troublesome stuff
[22:44:29] *** Joins: gitly (~gitly@148.252.132.144)
[22:44:45] <rapier> ok, InPhase, i'll see the video
[22:45:07] <InPhase> rapier: Because there is no works-for-everything logic for deep copying.
[22:45:42] <aphysically> well time to workaround an extraordinarily odd bug(limitation?) in ffmpeg that I found last night
[22:46:10] *** Quits: Shimoda (~Shimoda@151.21.153.86) (Quit: Leaving)
[22:46:30] <rapier> ok
[22:46:40] <InPhase> rapier: C++ deals with this with copy constructors.  But if you've written a Python class, you probably never wrote a copy constructor.
[22:47:16] <teut> in python we dont care about garbage collection too
[22:47:18] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[22:47:45] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[22:47:46] <rapier> i'm a beginner in python... how can I get this complex subject?
[22:47:54] <InPhase> teut: Well, a few times I've had to worry about it...  But usually it just works.
[22:48:03] *** Joins: Adoi (~Adoi@user/adoi)
[22:48:16] <teut> in c++ it always gives a copy
[22:48:37] *** Quits: Adoi (~Adoi@user/adoi) (Client Quit)
[22:48:49] <teut> in python   a = b    is reference to b  whereas in c  its a copy
[22:48:52] <teut> c++ *
[22:49:08] <teut> unless you use std::move
[22:49:23] <InPhase> rapier: To learn the Pythonic way, that video.  If you want to understand the stuff from other languages for comparison, you'd need to study those.  But it's reasonable and recommendable in programming to start by just learning Python.  You're on a reasonable path if this is what you're doing.
[22:50:09] <teut> c++ is easier than python , when I did that but errors there are much harder to understand
[22:50:22] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[22:50:25] <teut> totally not understandable in c++ rather
[22:50:27] <aphysically> I sorta want to learn rust more than I want to learn to be not bad at C++, but right now I'm just focusing on python
[22:50:32] <rapier> ok
[22:50:37] <rapier> thank you, InPhase
[22:50:39] <grym> rapier: bit.ly/pynames1 and bit.ly/pyiter are both good things to see
[22:50:44] <InPhase> teut: As someone who loves C++, I have to say it is definitely not easier than Python.  :)  It is substantially harder to learn well.
[22:50:54] <teut> in what way?
[22:51:50] <teut> in python the reference instead of copy problem has caused me hours of debugging
[22:51:54] <InPhase> teut: In that it is one of the most complex languages in prominent use?  There are many paradigms, many concerns that must be tracked and managed, and you have to rigorously follow certain idioms and guidelines or your program crashes, exhibits undefined behavior, or otherwise becomes unreliable.
[22:52:26] *** Joins: Auron (~Auron956@user/auron)
[22:52:33] <teut> ya , the errors are nasty  in c++, thats for sure
[22:52:44] <teut> I mostly fixed them by asking on discord
[22:53:09] <grym> shotgun debugging by proxy
[22:53:10] <grym> goody gody
[22:53:14] <teut> undefined behavior    is the worst one which happened to me
[22:53:45] *** Quits: y1n (~y1n@178.115.64.221.wireless.dyn.drei.com) (Ping timeout: 265 seconds)
[22:54:19] *** Joins: stevea (~stevea@user/stevea)
[22:54:49] *** Joins: node1 (~node1@user/node1)
[22:55:27] *** Quits: gitly (~gitly@148.252.132.144) (Ping timeout: 240 seconds)
[22:55:35] *** Quits: adiKt (uid472628@id-472628.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[22:55:39] <rapier> jinsun_, one question: why on this code: [[0]*r for _ in range(c)]  does it has the same issue?
[22:55:42] <InPhase> teut: To fully grasp the layers of C++ one needs to understand OOP, RAII structured design, exception stack unwinding and the design of exception safe objects (not automatic), the rules of 0, 3, and 5, references, pointer management and manual memory management, ownership semantics, type-dependent dispatch, templates, SFINAE, variadic templates, and also macros.  Then you can start handling the code
[22:55:48] <InPhase> that's out there.  In Python, you can mostly just type out some code that will do some stuff, and start scaling up some structure, and look up how some libraries work.  The Python way is much much easier, even if the lack of constraints impedes larger program organization.
[22:55:55] <teut> I undrestand RAII
[22:55:56] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[22:55:59] <teut> understand*
[22:56:13] *** Quits: d1rewolf (~d1rewolf@72.11.56.90) ()
[22:56:39] <grym> rapier: it's a little unobvious why that doesn't have a bug; it's because of what ints are
[22:56:40] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[22:56:46] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[22:56:51] <jinsun> rapier: well try it out and fnd out, I think it doesn't have the same issue
[22:57:02] *** Joins: wyclif (~wyclif@user/wyclif)
[22:57:04] <grym> rapier: i prefer [[0 for _ in range(nrows)] for _ in range(ncols)]  to be glaringly clear what i'm up to
[22:57:15] <rapier> yeah, but i'd like to understand why don't the same issue if i use *
[22:57:21] <grym> ints are immutable
[22:57:30] <grym> lists aren't
[22:57:30] <rapier> i see
[22:57:45] <rapier> i got it
[22:57:46] <grym> [[0 for row in range(nrows)] for col in range(ncols)] is even more explicit, heh
[22:57:51] *** Joins: gitly (~gitly@85.255.235.18)
[22:58:05] *** Joins: fikran (~fikran@user/fikran)
[22:58:07] <rapier> yeah, i got it
[22:58:09] <InPhase> grym: It's not the immutability.  nedbat explicitly listed that as a common myth.  :)
[22:58:17] <grym> InPhase: yeah, yeah :)
[22:58:22] <rapier> when i do [0]* is in a bunch of ints
[22:58:25] <InPhase> Tempting though it may be.
[22:58:31] *** Joins: ubert (~Thunderbi@77.119.164.7.wireless.dyn.drei.com)
[22:58:55] <rapier> i understand everything
[22:58:58] <rapier> yeah, make sense
[22:59:10] <teut> ok , agree with you totally now InPhase
[22:59:37] *** Quits: trampel (~trampel@2601:602:9c00:921:981e:cbc0:b345:da20) (Quit: Leaving)
[22:59:53] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:59:54] <rapier> now, my code works, thank you guys for all explanations and video references
[22:59:58] *** Joins: cedric (~cedric@2a01:cb11:821:7c00:4be:6ac2:4e73:585e)
[23:01:11] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[23:01:50] <teut> yesterday I was telling some friend about the dicts , so the dict key , the docs say about immutability but not hashability requirement
[23:01:58] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[23:01:59] <grym> one implies the other
[23:02:06] <teut> how?
[23:02:18] <grym> if you can mutate it, you can't hash it
[23:02:25] <InPhase> teut: This is the Internet.  I think we're supposed to argue 6 more rounds and then spiral into insulting each other's honor first.  But, sounds good.  ;)
[23:02:26] <teut> ok thats correct
[23:02:31] *** Joins: wyclif (~wyclif@user/wyclif)
[23:02:46] <teut> I said to him you can use a tuple as key
[23:02:46] <grym> InPhase: your mother was a hamster!
[23:02:55] <grym> teut: depends what's in the tuple
[23:02:59] <teut> then I tried set as a key
[23:03:20] <grym> sets aren't hashable! frozensets are
[23:03:30] *** Quits: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d) (Quit: WeeChat 3.2.1)
[23:03:35] <grym> teut: but consider {([1]):"foo"} , which is a type error
[23:03:51] <grym>  ([1],), even.
[23:04:21] <teut> in such a case since you cant reference the list  then you cant mutate it
[23:04:31] <jinsun> teut: you can use tuple as key only if all items in the tuple are hashable
[23:04:31] <teut> why is that a problem here?
[23:04:36] <grym> ... can't .. reference?
[23:04:37] <grym> it's right ther!
[23:04:42] <grym> e*
[23:04:44] <teut> oh wait you can sorry
[23:04:59] <grym> tuples of hashable things may be dict keys
[23:05:08] <grym> but it is turtles the whole way down
[23:06:15] <teut> sets arent hashable, I thought the opposite till now
[23:06:25] <grym> teut: it's got an .add()
[23:06:33] <teut> oh oh , right
[23:06:41] *** Joins: y1n (~y1n@178.115.43.165.wireless.dyn.drei.com)
[23:07:01] <teut> if something can be mutated , its hash value will change
[23:07:28] <jinsun> fun thing to try `x = ([1],); x[0] += [2]`
[23:07:29] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[23:07:29] <teut> I should ve developed the understanding long agp
[23:07:32] <teut> ago
[23:07:51] <grym> what better place than here / what better time than now
[23:07:54] *** Quits: shangxiao (~davids@124.187.230.212) (Quit: WeeChat 3.3)
[23:08:02] *** Joins: wyclif (~wyclif@user/wyclif)
[23:08:11] <jinsun> you get an error which might seem like it failed to mutate, but it actually does mutate
[23:08:19] <grym> jinsun: "joke's on you!"
[23:09:23] <teut> how does the tuple get to know that the list wants to increase size?
[23:09:34] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[23:09:36] *** Joins: Fiji (~Fiji@user/fiji)
[23:09:37] <teut> TypeError: 'tuple' object does not support item assignment
[23:09:53] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[23:10:23] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[23:10:29] <teut> no no , I mean to ask list is being assigned, how is tuple raising the error?
[23:10:54] <jinsun> x[0] += [2] means get 0th item of the tuple add [2] to it and then assign it back
[23:11:13] <jinsun> add [2] to it part succeeds, but assign it back doens't
[23:11:34] *** Joins: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net)
[23:11:46] <teut> x[0][0] += 5  ok this works, in my head this was going on
[23:12:38] <sveinse> `x = ([1],); y = x[0]; y += [2]; print(x);` does work however
[23:12:39] <teut> jinsun thats the extend operation
[23:12:59] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[23:13:15] <teut> y is a reference to the  [1]
[23:13:17] *** Quits: ircuser-1 (~Johnny@71.63.241.168) (Quit: because)
[23:13:29] *** Quits: yaalon (~yaalon@2603-8081-7002-fce2-1824-7f47-75fa-d684.res6.spectrum.com) ()
[23:13:32] *** Joins: wyclif (~wyclif@user/wyclif)
[23:13:36] <sveinse> teut: exactly
[23:13:51] <teut> so the mere indexing step prevents the list assignment
[23:14:09] *** Quits: magla (~gelignite@55d434bd.access.ecotel.net) (Quit: Stay safe!)
[23:14:13] <sveinse> So the object in the tuple might be mutable, but the tuple itself does not
[23:14:23] <teut> and this error cant be detecting in the compilation step?
[23:14:28] <teut> detected*
[23:14:37] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[23:16:22] <teut> oh so the tuple policies are implied on the object first, looks like a list of rules are checked and at which rule it fails, the error is raised
[23:16:34] <teut> is checked*
[23:16:43] <jinsun> maybe it could be checked, but it is valid syntax, and the python compiler doesn't like to do anything more than syntax checking
[23:17:38] <jinsun> and checking these things is left to the linters and type checkers
[23:18:29] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[23:18:34] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[23:19:03] *** Joins: wyclif (~wyclif@user/wyclif)
[23:19:15] <teut> ya linters can probably help
[23:19:17] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[23:20:09] <sveinse> `x[0] += [2]` does three things. 1) Gets the x[0] object, 2) Runs += [2] on it, 3) Writes back the result into x[0], which fails
[23:20:55] *** Joins: jdmark (~jdmark@097-102-095-007.res.spectrum.com)
[23:21:18] *** Joins: vimart (~vimart@85.255.234.169)
[23:21:50] <teut> so the 2 nd step shall fai;
[23:21:55] <teut> fail*
[23:23:28] *** Joins: firetramp (~ashleigh@82.8.162.2)
[23:23:52] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[23:24:35] *** Joins: wyclif (~wyclif@user/wyclif)
[23:26:12] <braxas> should io.TextIOWrapper work with io.RawIOBase like objects? (https://groups.google.com/g/comp.lang.python/c/7qMv4cD1SKc)
[23:27:10] *** Quits: mokulus (~mokulus@user/mokulus) (Ping timeout: 252 seconds)
[23:27:34] *** Quits: stevea (~stevea@user/stevea) (Quit: Either I or my computer has gone to sleep. ZZZzzz…)
[23:27:59] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[23:28:25] *** Joins: hendursaga (~weechat@user/hendursaga)
[23:29:31] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[23:30:04] *** Joins: wyclif (~wyclif@user/wyclif)
[23:31:14] *** Quits: defiant (~defiant@user/defiant) (Quit: defiant)
[23:31:23] *** Joins: yaalon (~yaalon@2603-8081-7002-fce2-695c-5d2f-4e6a-6267.res6.spectrum.com)
[23:33:59] *** Joins: codeswhite (~codeswhit@user/codeswhite)
[23:34:16] *** Quits: Rain4 (~Rain@li958-238.members.linode.com) (Quit: Ping timeout (120 seconds))
[23:34:40] *** Joins: Rain4 (~Rain@li958-238.members.linode.com)
[23:34:52] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[23:35:34] *** Joins: wyclif (~wyclif@user/wyclif)
[23:38:04] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Quit: SO LONG SUCKERS!)
[23:38:21] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 250 seconds)
[23:40:29] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[23:40:41] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[23:41:06] *** Joins: wyclif (~wyclif@user/wyclif)
[23:43:14] *** Quits: n00b101 (uid448161@id-448161.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[23:43:48] *** Joins: Grace (uid33812@id-33812.lymington.irccloud.com)
[23:44:16] *** Quits: Hunterkll (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3) (Ping timeout: 252 seconds)
[23:45:04] *** Quits: Haxxa (~Haxxa@116-255-6-75.ip4.superloop.com) (Quit: Haxxa flies away.)
[23:45:59] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[23:46:06] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[23:46:41] *** Joins: wyclif (~wyclif@user/wyclif)
[23:47:06] *** Quits: Payam (~Payam@c83-250-236-236.bredband.tele2.se) (Quit: Leaving)
[23:47:47] *** Joins: Haxxa (~Haxxa@116-255-6-75.ip4.superloop.com)
[23:49:13] <teut> https://discordpy.readthedocs.io/en/stable/quickstart.html
[23:49:39] <teut> the 4th point here is a bit confusing
[23:49:47] *** _subopt is now known as subopt
[23:49:50] *** Joins: Hax0r (~Hax0r@87.101.192.39)
[23:50:15] <teut> is the client the discord bot?
[23:51:45] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[23:52:05] <teut> its not surely rejecting my  messages the one I send from my discord id
[23:52:10] *** Joins: wyclif (~wyclif@user/wyclif)
[23:56:05] <KirkMcDonald> teut: It's saying that when you send a message, it will be echoed back to you, and you will just receive that message again in on_message.
[23:56:32] <KirkMcDonald> teut: So you need to check for messages sent from yourself to avoid an infinite loop of the bot responding to itself.
[23:56:38] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[23:56:59] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[23:57:01] <teut> when I write a message on discord, it sends to the microsoft servers, there it sends a signal to the python script
[23:57:15] <teut> is this interpretation correct?
[23:57:33] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 265 seconds)
[23:57:42] *** Joins: wyclif (~wyclif@user/wyclif)
[23:57:46] <teut> thats quite a hell lot of stuff microsoft is offering for free
[23:58:19] <teut> KirkMcDonald , this looks like a leaky abstraction
[23:58:32] <braxas> wait what
[23:58:39] <teut> it doesnt?
[23:58:42] <braxas> microsoft servers?
[23:58:46] <jinsun> is discord from Microsoft?
[23:58:51] <teut> yes
[23:58:54] *** Quits: eem (~eem@user/eem) (Quit: WeeChat 3.3)
[23:58:55] <braxas> TIL
[23:59:11] *** Joins: eem (~eem@user/eem)
[23:59:15] <braxas> teut: it does not seem like a leaky abstraction
[23:59:23] <braxas> and I dunno, just say discord server
[23:59:28] <braxas> because the service is discord
[23:59:30] <teut> ok
[23:59:31] <nedbat> teut: discord is not from microsoft
[23:59:40] <braxas> and whoever hosts is is irrelevant
[23:59:58] <nedbat> teut: from wikipedia: "d The Wall Street Journal reported that several companies were looking to purchase Discord, with Microsoft named as the likely lead buyer at a value estimated at $10 billion.[27][28] However, they ended talks with Microsoft, opting to stay independent.[29] Instead, Discord launched another round of investment in April 2021."
