[00:08:14] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[00:14:41] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[00:19:12] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[00:30:49] *** Joins: c4017w__ (~c4017@209.52.68.8)
[00:33:57] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[00:36:58] <Alipha> Xardas: foo2 == &foo2[0] and foo2[0] == &foo2[0][0], but &foo2[0] is not the same as &foo2[0][0]. They represent the same address, but are different types, int(*)[4] and int* respectively
[00:39:53] *** Quits: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca) (Ping timeout: 250 seconds)
[00:44:48] *** Joins: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca)
[00:48:11] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[00:55:26] *** Joins: tforever (~Terabyte@85.103.104.1)
[01:01:07] *** Joins: tforever_ (~Terabyte@85.103.104.1)
[01:02:03] *** Quits: drw (~drw@188.170.80.249) (Killed (copper.libera.chat (Nickname regained by services)))
[01:02:23] *** Joins: poweedlou (~drw@188.170.80.249)
[01:03:06] *** Quits: tforever_ (~Terabyte@85.103.104.1) (Client Quit)
[01:04:06] *** Quits: tforever (~Terabyte@85.103.104.1) (Ping timeout: 272 seconds)
[01:04:09] *** poweedlou is now known as drw
[01:06:36] <Xardas> omg
[01:06:45] <Xardas> thanks for pointing that out
[01:06:50] <Xardas> i was getting insane
[01:07:20] <Xardas> Now it all makes sense to me
[01:07:25] <Xardas> :*
[01:12:00] *** Quits: savolla (~quassel@95.10.239.64) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[01:12:47] *** Joins: AmR (~AmREiSa@41.46.119.250)
[01:14:27] *** Quits: AmR (~AmREiSa@41.46.119.250) (Client Quit)
[01:16:11] *** Joins: savolla (~quassel@95.10.239.64)
[01:18:45] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:19:43] *** Joins: AmR (~AmREiSa@102.44.191.232)
[01:20:02] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[01:20:30] *** Joins: rajkosto (~rajkosto@93-86-127-103.dynamic.isp.telekom.rs)
[01:20:32] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Remote host closed the connection)
[01:20:54] <rajkosto> C++ static initialization order fiasco ruined another day
[01:21:07] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[01:25:47] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[01:26:12] *** Quits: savolla (~quassel@95.10.239.64) (Remote host closed the connection)
[01:29:45] *** Joins: ssbr (~ssbr@python/site-packages/ssbr)
[01:30:21] *** Joins: analognoise (~analognoi@185.229.59.36)
[01:31:18] *** Joins: c4017w_ (~c4017@209.52.68.8)
[01:31:23] *** Quits: analognoise (~analognoi@185.229.59.36) (Max SendQ exceeded)
[01:31:52] *** Joins: analognoise (~analognoi@185.229.59.36)
[01:35:08] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[01:42:24] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:42:33] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:42:33] *** ChanServ sets mode: +v npaperbot
[01:44:40] <CarloWood> Is it possible to have a compile-time detection of whether or not a class is a base class of a derived class?  That is, look at the virtual table that was generated and see if the virtual table contains a pointer to its own destructor, or to another constructor?
[01:45:01] <CarloWood> Aka.. something like:
[01:46:15] *** Quits: unyu (~pyon@user/pyon) (Quit: WeeChat 3.4)
[01:47:17] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:3851:118b:4a93:672e)
[01:47:58] <anyone> std::is_base_of
[01:48:13] <anyone> forget the second sentence
[01:49:18] <CarloWood> { B b; b.f(); } struct A { virtual ~A() = default; void f(); }; struct B : public A { ~B() override {} }; void A::f() { if (0) cout << "Not derived from"; else cout << "derived from"; }
[01:49:18] <geordi> derived from
[01:49:36] <CarloWood> what goes on the `if (0)` ?
[01:49:50] <CarloWood> is_base_of can't work
[01:50:18] <CarloWood> Actually - no I think about it, nothing compile time can work :P.  It has to be run time :/.
[01:50:20] *** Joins: unyu (~pyon@user/pyon)
[01:50:24] <CarloWood> now*
[01:51:19] <CarloWood> I guess that dynamic_cast does exactly what I need then; although, I am not interested in knowing if it is a B, but in knowing if it is an A.
[01:51:23] *** Joins: NEYi (~NEYi@109.251.216.38)
[01:53:50] <rajkosto> but if its an A you already have a pointer to A*
[01:53:58] <rajkosto> A* or A&
[01:54:20] *** Joins: sargon (~sargon@188.250.185.117)
[01:54:34] <cbreak> CarloWood: no need for virtual table
[01:54:40] <cbreak> inheritance is known at compile time
[01:55:15] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:3851:118b:4a93:672e) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[01:55:55] <CarloWood> cbreak: I want to detect, in a member function of the base class, whether or not the current instance is derived from that base class or not.
[01:56:32] <rajkosto> that makes no sense, if you are in a member function of a class, it has to be
[01:56:49] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:3851:118b:4a93:672e)
[01:56:54] <CarloWood> If I run this is clearly knows that 'm()' belongs to a derived class:
[01:57:04] <CarloWood> { B b; b.f(); } struct A { virtual ~A() = default; void f(); virtual void m() { cout << "A::m"; } }; struct B : public A { ~B() override {} void m() override { cout << "B::m"; } }; void A::f() { m(); }
[01:57:04] <geordi> B::m
[01:57:12] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[01:57:22] <CarloWood> Note the call to m();  at the very end in A::f.
[01:57:58] <cbreak> CarloWood: the member function of the base class knowns that it's derived from the base class
[01:58:01] <CarloWood> So, how can I detect that right there - without actually calling m() - just by looking at -say- &m and &A::m
[01:59:29] <CarloWood> I could add a virtual bool i_am_derived(); but that requires that every derived class implements that.  I rather use an existing method that I know will be override, but which I can't call.
[01:59:32] <CarloWood> Is that possible?
[02:00:08] <cbreak> there's no need for virtual
[02:00:20] <CarloWood> So, whats the code?
[02:00:45] <CarloWood> if (std::is_override(m))  ? :)
[02:00:52] <CarloWood> overridden*
[02:01:33] <CarloWood> The only thing I could think of is by looking at the virtual table. That IS the only way imho. But it doesn't allow me to do that.
[02:01:38] <cbreak> if (true)
[02:02:06] <CarloWood> { B b; b.f(); } struct A { virtual ~A() = default; void f(); virtual void m() { cout << "A::m"; } }; struct B : public A { ~B() override {} void m() override { cout << "B::m"; } }; void A::f() { if (&m == &A::m) cout << "not overridden"; }
[02:02:07] <geordi> error: ISO C++ forbids taking the address of an unqualified or parenthesized non-static member function to form a pointer to member function.  Say '&A::m'
[02:02:21] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Ping timeout: 256 seconds)
[02:02:31] <CarloWood> That clearly isn't working.
[02:02:43] <CarloWood> your if (true) that is
[02:03:08] <rajkosto> thats breaking inheritance principles, the code in the base class should not care if its being called on the base class instance or on a derived class instance
[02:03:13] <CarloWood> This should print BOTH cases:
[02:03:58] <CarloWood> { A a; a.f(); B b; b.f(); } struct A { virtual ~A() = default; void f(); virtual void m() { cout << "A::m"; } }; struct B : public A { ~B() override {} void m() override { cout << "B::m"; } }; void A::f() { if (true) cout << "| not overridden"; else cout << "| overridden"; }
[02:03:59] <geordi> | not overridden| not overridden
[02:04:02] <CarloWood> oops
[02:04:05] <rajkosto> there should never be an is_derived() override, thats bad design. instead, stub out the functionality you would like to have derived classes override in your base class as pure virtual (or empty member functions if you want to make overriding them optional), and then have the shared member functions in base call those
[02:04:43] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[02:04:54] <CarloWood> rajkosto: in this case it cares.
[02:04:58] <Alipha> rajkosto: need moor Scott Meyer's Singletons
[02:05:12] <rajkosto> CarloWood, why, show an example you think this is a good idea
[02:06:25] <CarloWood> I am always on the edge and over the edge of what is deemed "correct" :p.  You suffer from the yz problem: you think that I want x and ask for y, therefore you reject y and propose z. But in fact, I ask y because I want to know if y is possible. If not then I'll figure out a z myself.
[02:06:30] <cbreak> CarloWood: why not? The member function is of course part of the type
[02:06:38] <cbreak> so if you make it protected, it must be overridden
[02:07:18] <CarloWood> cbreak: at this point I'm just saying (and showing) that if (true) isn't working. I was hoping that then you'd understand what I meant.
[02:07:42] <CarloWood> That should have printed "not overriden | overridden"
[02:07:50] <rajkosto> why
[02:07:55] *** Quits: wsmcb[m] (~wsmcbfabr@2001:470:69fc:105::1:bcf0) (Bad user info)
[02:08:17] <rajkosto> theres only one definition of f
[02:08:24] <CarloWood> heh
[02:08:40] <CarloWood> Look how the code start: { A a; a.f(); B b; b.f(); }
[02:08:41] <rajkosto> do you not understand the "break the functionality into smaller pieces you can override piecewise" design ?
[02:08:53] <rajkosto> why should the definition of f in the base class care if some other method is overridden
[02:09:08] <rajkosto> if you want f to behave differently... override it
[02:09:52] <rajkosto> doing the "overriden" test in f is basically like having a if (typeof(...) === Derived1) else if (typeof(...) === Derived2) in other languages
[02:10:03] <rajkosto> which is brittle and bad
[02:10:33] <CarloWood> You're not answering the queston "is it possible" (no matter how dirty code that is). I suspect you just don't know.
[02:10:46] <rajkosto> its possible. its compiler specific and you shouldnt do it though
[02:11:10] <Alipha> << (typeid(A) == typeid(foo)); struct A { virtual ~A() {} }; struct B : A {}; B foo;
[02:11:11] <geordi> false
[02:11:37] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[02:11:47] <CarloWood> Alipha: but I need to do that in a method of the base class, which doesn't have 'foo' (or B).
[02:12:09] <Alipha> CarloWood: it has *this
[02:12:21] <CarloWood> which is an A.
[02:12:24] <CarloWood> not a B
[02:12:46] <Alipha> typeid will return the runtime type of *this
[02:13:03] <CarloWood> { A a; a.f(); B b; b.f(); } struct A { virtual ~A() = default; void f(); virtual void m() { cout << "A::m"; } }; struct B : public A { ~B() override {} void m() override { cout << "B::m"; } }; void A::f() { if (typeid(A) == typeid(*this)) cout << "| not overridden"; else cout << "| overridden"; }
[02:13:03] <geordi> | not overridden| overridden
[02:13:07] <CarloWood> holy shit
[02:13:13] <CarloWood> You are God again :)
[02:13:17] <CarloWood> AGAIN!
[02:13:17] <Alipha> Lol
[02:13:49] <CarloWood> That's what I love about you - you don't question WHY I want something and then ramble on for an hour. You just figure it out in the back ground and then give the solution :)
[02:13:56] <rajkosto> this is at runtime though
[02:14:03] <Alipha> Of course I also question the need for this
[02:14:08] <rajkosto> you could do it at compile time using CRTP
[02:14:22] <CarloWood> <CarloWood> Actually - now I think about it, nothing compile time can work :P.  It has to be run time :/.
[02:15:21] <rajkosto> again, depends on the design
[02:15:32] <rajkosto> which is probably awful if you have to do runtime typeid inside the base class code
[02:15:40] <CarloWood> I can hardly imagine that typeid(*this) does a lot of work - I think this is literally like comparing two hard coded values (at runtime)
[02:16:02] <rajkosto> it requires RTTI on just like dynamic_cast
[02:16:17] <rajkosto> and it will lookup the vtable, call some function on it to get the typeid, then compare the typeid objects
[02:16:28] <rajkosto> compiler implementation dependent what any of those steps do
[02:16:30] <CarloWood> Only today someone on discord had a problem with that I filled a std::array starting at the back (size-1) and then going towards zero.
[02:16:52] <CarloWood> Not just "it feels weird to ME" - no, it had to be wrong because it felt weird to him.
[02:16:55] <CarloWood> wtf guys.
[02:17:06] <rajkosto> why would you do that though?
[02:17:08] <CarloWood> There is nothing wrong with using typeid
[02:17:24] <rajkosto> the cpu cache will figure out youre writing backwards and start prefetching backwards, yes
[02:17:27] <rajkosto> but why cant you do it forwards
[02:17:37] <CarloWood> Why is the Earth round and not flat?
[02:18:06] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:18:06] <CarloWood> I can do it forwards at the cost of it to be harder to understand.
[02:18:17] <CarloWood> lemme quote what I told him...
[02:18:30] <rajkosto> there is nothing wrong with using typeid for things like printing out some class name or something in a debug routine, not to actually implement the inheritance structure
[02:18:40] <CarloWood> It doesn't really matter how you traverse an array when in the end you fill all members with data ï¿¼
[02:18:40] <CarloWood> [6:52 PM]
[02:18:40] <CarloWood> I start at the end because this is an imgui histogram with most recent FPS values. The last value in the array corresponds with the bar on the far-right, which is thus the most recent value.  So, filling it from most-recent to whatever is the latest value that was stored goes from right to left, or the end of the array towards the beginning.
[02:19:38] <CarloWood> At *some* point I have to stop too - because there is no more data.
[02:19:57] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 240 seconds)
[02:20:10] <rajkosto> why would you go right to left ? is your native language RTL ?
[02:20:28] <CarloWood> Why would I figure out where it will stop, and then then start at the beginning filling it with zeroes and switching to something else (what) half way because that's where the data is available?
[02:20:43] <CarloWood> Unbelievable.
[02:20:55] <CarloWood> But
[02:21:06] <CarloWood> I still believe in humanity, thanks to Alipha.
[02:22:03] <rajkosto> but youre basically implementing this anti-pattern: https://stackoverflow.com/questions/5579309/is-it-possible-to-use-the-instanceof-operator-in-a-switch-statement
[02:22:09] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[02:22:47] <rajkosto> youre checking if youre an Elephant in order to do different things in the Animal base class, instead of just letting Elephant override the behaviour itself
[02:23:10] <CarloWood> Note how the answers just tell him how to do it. And not ask Whyyyyyy?
[02:23:53] <rajkosto> you could have just checked "how to check what type an instance is in c++ at runtime" too
[02:24:41] <rajkosto> the stackoverflow answers for that are also pointing out its a bad design
[02:24:45] <cbreak> runtime is easy
[02:24:57] <cbreak> just use polymorphism, or maybe typeid
[02:24:58] <CarloWood> not really - I'd assume that if you have an instance you know the type. There is no need to check it.
[02:25:03] <cbreak> but CarloWood asked about compile time
[02:25:17] <cbreak> and at compile time, the easiest way is to do what I said
[02:25:19] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[02:25:25] <CarloWood> I almost immediately said that that was impossible and then asked about runtime for an hour.
[02:25:29] <cbreak> just make the function protected, and then if it's called, it's obviously derived
[02:25:44] <rajkosto> but he doesnt care if that function is derived
[02:26:03] <rajkosto> he cares if anything in the type is derived
[02:26:08] <cbreak> it will be
[02:26:15] <cbreak> otherwise, how would a protected function be called?
[02:26:35] <rajkosto> it doesnt help him, base class code could call it
[02:26:36] <Alipha> From a public function in the same class :-)
[02:26:47] <cbreak> rajkosto: that'd be programmer error
[02:26:59] <cbreak> base class should call a different function.
[02:27:18] <cbreak> if you want to solve this problem at compile time, you have to make some sacrifices :)
[02:27:44] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[02:28:59] <CarloWood> Thanks to Alipha's trick I can delete 89 lines of code and make things a little faster on top of that.
[02:29:42] <cbreak> trick?
[02:29:52] <rajkosto> you can make a DerivedBase : public Base { bool is_derived() const override { return true; } } and then derive all the classes from that
[02:29:58] <cbreak> that's the normal runtime type checking way, if you for some reason don't want to use polymorphism
[02:30:06] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[02:30:35] <cbreak> (but chances are it will only work in types that support runtime polymorphism, so have at least one virtual function)
[02:30:57] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[02:31:50] *** Joins: c4017w__ (~c4017@209.52.68.8)
[02:32:50] *** Quits: pizdets_ (~pizdets@183.182.111.242) (Ping timeout: 250 seconds)
[02:33:42] <Alipha> template<typename Derived, typename Base> Derived* exact_dynamic_cast(Base* p) { if(p && typeid(*p) == typeid(Derived)) return static_cast<Derived*>(p); else return nullptr; } // much faster than dynamic_cast if *p won't be further derived from Derived.
[02:33:48] *** Joins: pizdets (~pizdets@183.182.114.255)
[02:35:28] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[02:39:43] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:3851:118b:4a93:672e) (Ping timeout: 250 seconds)
[02:40:53] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[02:41:32] *** Joins: rgrinberg (~textual@187.194.14.9)
[02:43:52] <CarloWood> Yay  https://bpa.st/3B6A
[02:44:41] <rajkosto> wat
[02:44:54] <CarloWood> In the case that I just want nothing to be done at all (just a call back being called at a synchronized point) I no longer have to derive from SynchronousTask.
[02:45:29] <CarloWood> Before it would set the state always to state_end, which doesn't exist when it isn't derived from, resulting in a crash.
[02:45:39] <rajkosto> why doesnt it exist ?
[02:45:54] <rajkosto> you have members in the base class that arent properly initialized unless derived ? oof
[02:46:27] <rajkosto> it would have been cleaner if you had a virtual GetFirstState() const { return SynchronousTask_start; }
[02:46:32] <CarloWood> 'state_end' is per definition either not defined or defined by a derived class.
[02:46:44] <rajkosto> then override that if you actually have a state_end
[02:47:01] <rajkosto> then initialize_impl() would just do set_state(GetFirstState())
[02:47:05] <CarloWood> where 'not defined' is not a linker problem, its an enum value :P.  The state is just not handled in a switch.
[02:47:30] <rajkosto> why not
[02:47:37] <CarloWood> whhhyyyyyyyyyyyyyy?
[02:47:52] <rajkosto> because you probably have a bad design
[02:48:21] <CarloWood> That must be it.
[02:49:20] *** Joins: ivan_wagner (~ivan_wagn@193.138.218.217)
[02:49:25] <CarloWood> In the meantime I can now synchronize the Graphics Settings from Application to all SynchronousWindow objects.
[02:56:22] *** Joins: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43)
[02:56:44] *** Quits: rgrinberg (~textual@187.194.14.9) (Read error: Connection reset by peer)
[02:57:01] *** Quits: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43) (Client Quit)
[02:57:13] *** Joins: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43)
[02:57:19] *** Quits: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de) (Remote host closed the connection)
[02:57:43] *** Joins: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de)
[02:58:10] *** Joins: rgrinberg (~textual@187.194.14.9)
[02:58:52] <ivan_wagner> hello, might anyone give me hand how to properly do shifting by 10 here: https://wandbox.org/permlink/3qEzhwGYGqIEiRah I'm rewriting string to uint format. For a few digits it works fine then it goes as shown on output
[02:59:37] *** Quits: cosimone (~user@93-44-184-23.ip98.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[02:59:41] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Remote host closed the connection)
[03:00:33] <TinoDidriksen> << numeric_limits<uint32_t>::max()
[03:00:34] <geordi> 4294967295
[03:00:44] <TinoDidriksen> 999999999999999999 is way larger than 4294967295
[03:01:34] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[03:02:38] *** Quits: rgrinberg (~textual@187.194.14.9) (Read error: Connection reset by peer)
[03:02:48] <Alipha> << numeric_limits<uint64_t>::max()
[03:02:48] <geordi> 18446744073709551615
[03:03:34] *** Joins: JakeSays_ (~jake@c-67-182-197-230.hsd1.ut.comcast.net)
[03:03:36] *** Quits: analognoise (~analognoi@185.229.59.36) (Quit: Leaving)
[03:03:46] <ivan_wagner> yes that should be taken care of as well, I tried to compare rewrite the result saving value to uint64_t and then compar it to max of uint32_t that didn't seem to be working. But at this moment I am asking for help with multiplication of shift for ints in the scope of uint
[03:03:50] *** Joins: rgrinberg (~textual@187.194.14.9)
[03:04:34] <ivan_wagner> lines 20 - 25 for word.length() > 2
[03:04:35] <cbreak> shifting by 10 bits?
[03:04:56] *** Quits: JakeSays (~jake@c-67-182-197-230.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[03:05:21] <ivan_wagner> I'm doing multiplication of word[i] by "recursive" multiplication of 10 depending where the [i] is located
[03:06:05] <RandomReader> usually it's easier to go backwards, starting with value 0 and then (multiple by 10, add new digit) repeatedly
[03:06:42] <RandomReader> for the approach you're going for, I think the count is still "backwards" for your recursive multiplication
[03:06:43] <Alipha> ivan_wagner: maybe it would help to display shift inside your for loop (or use a debugger to look at shift's value as you loop)
[03:08:07] <RandomReader> or maybe I should say "distance" or "position" instead of "count", if that makes more sense
[03:08:34] <ivan_wagner> RandomReader, at first I started that way, then I came up with idea it might be easier to save ones first and then add the rest from. Will try to rewrite that one again maybe it will freshen my train of thoughts
[03:09:00] <RandomReader> I would start with Alipha's suggestion first, just to better understand what you have now
[03:09:35] <ivan_wagner> well I mean there is an output, you can run the program so it shows where I am at
[03:10:45] <RandomReader> the suggestion is for you to observe each step of the calculation, on the way to the output
[03:13:40] <ivan_wagner> will do and what would you suggest for detection of uint32 overflow?
[03:15:43] *** Joins: dale (~dale@user/dale)
[03:16:30] <cbreak> what a surprise, boost has a solution: https://www.boost.org/doc/libs/1_78_0/libs/safe_numerics/doc/html/index.html
[03:16:30] *** Quits: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[03:17:22] <RandomReader> that will depend on what approach you ultimately end up with .. in general, you need to determine if the next operation will exceed the limit
[03:18:02] <RandomReader> so that may involve counting digits, checking (max - current) <= next_value, or that sort of thing
[03:18:34] <Alipha> ivan_wagner: Your previous thought of doing the calculation using uint64_t variables and then checking to see if the uint64_t value is larger than can be stored in a uint32_t is a good and simple approach. There was probably just an issue with your implementation. Most likely, you didn't make all the variables which needed to be uint64_t, but instead left some of them as, say, int.
[03:18:56] <Alipha> (wonders if his hinting is obvious enough) ;-)
[03:19:26] <RandomReader> as Alipha notes, using uint64_t to hold your calculation and checking against uint32_t max at each step would work in this specific case, just be aware that technique doesn't scale (since e.g. there is no uint128_t for future use)
[03:19:58] <Alipha> ivan_wagner: though you are also correct in wanting to get your algorithm correct first, and then after that, tackle the problem of detecting overflow
[03:20:31] <ivan_wagner> I rewrote whole function to use uint64_t and changed result to uint64_t at the very end on function I compared it in single if statement
[03:20:47] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[03:21:15] <RandomReader> in general that would be too late, since it might exceed uint64_t limits by then
[03:21:54] <ivan_wagner> well I have also thought of rewriting whole string byte, by byte and storing it to that 64bit like I would do in assembly. So I came here at first for some suggestions
[03:22:02] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[03:22:09] <ivan_wagner> RandomReader, well, you are actually right about that one
[03:22:55] <cbreak> there were some people at microsoft that thought it to be a good idea to parse a version number as integer. It was not.
[03:23:38] <cbreak> Since microsoft version numbers can get very long, it lead to an integer overflow on parsing, which then lead to e-mail servers crashing (I think... or anti-virus scanning on the server? not sure)
[03:23:51] <cbreak> so... parsing numbers is hard. Dealing with overflows is hard.
[03:24:03] <cbreak> but should be done :)
[03:24:04] <RandomReader> compared to many assembly platforms, C++ doesn't provide for overflow flags on operations, instead it just broadly defines the types as either "overflow undefined" (for signed types) or "overflow wraps as if modulo" (the unsigned types you're working with)
[03:25:02] <RandomReader> that also does allow for another potential technique here: if you are mathematically certain about the range of the next operation, checking whether the new result is less than the old result can indicate it wrapped (overflowed)
[03:25:07] *** Joins: myon98 (~myon98@user/myon98)
[03:25:14] <RandomReader> but limited to the kind of operation and being a uint_* type
[03:25:56] <RandomReader> but that's*
[03:25:58] <Alipha> ivan_wagner: RandomReader's point was that you should check that the uint64_t value is larger than uint32_t's max as you perform the calculation and not to wait until the very end to check
[03:26:19] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[03:26:31] <Alipha> ie, put the check inside your for loop
[03:28:41] <dale> Hi!  Given int16_t n = -2, n & 0x7fff seems to be 32766.  I expected this result, but reading a copy of the C++17 draft spec, the section on the bitwise and operator (section 8.11 in my copy) doesn't seem to address the sign bit or negative numbers at all.  Contrast with, say, the bitwise shift operators, which specifically address negative numbers.  Is there a part of the spec that says "the sign bit
[03:28:43] <dale> is treated like any other bit when doing bitwise and/or", or is that just implicit?
[03:31:28] <Alipha> dale: prior to c++20, it was implementation defined as to how negative numbers are represented. With c++20, signed integers now must be represented using Two's Complement
[03:31:37] *** Joins: ivan_wagner_ml (~ivan_wagn@193.138.218.202)
[03:32:18] <Alipha> That is, prior to c++20, your code may not have resulted in 32766
[03:32:19] *** Joins: c4017w_ (~c4017@209.52.68.8)
[03:32:27] <dale> Ha, I was just thinking about the section on the representation of numbers.  That's actually comforting that they've defined that.  (Or will be in a decade when everyone has upgraded?)
[03:33:03] <cbreak> bitwise shift works on the value, not the representation I think
[03:33:50] *** Quits: ivan_wagner (~ivan_wagn@193.138.218.217) (Ping timeout: 256 seconds)
[03:35:29] <dale> I think I'm just getting hung up on the fact that the spec for the shift operators explicitly addresses the sign bit (well, negative numbers), but bitwise and/or do not.  Upon further reflection I'm having trouble imagining any sane way for and/or to behave other than how I observe them to work in practice.
[03:35:58] <dale> Saying something like "the sign bit from the left operand is (uh) preserved in the result" is not sane, I think.
[03:36:06] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[03:36:06] <RandomReader> you're assuming a "sign bit"
[03:36:19] <ivan_wagner_ml> Implemented, it passed a few testes but not that one with maximum (4294967295). For MAX_UINT i used a macro with vlaue of (std::uint32_t)-1
[03:36:24] <RandomReader> particularly historically, different platforms have different numeric representations, and different kinds of shift operations
[03:36:36] <ivan_wagner_ml> that's basically the same thing as 0xffffffff..
[03:36:45] <RandomReader> that's mostly coalesced around two's complement today, but wasn't always that way
[03:36:45] <cbreak> ivan_wagner_ml: no need to reinvent wheels
[03:36:48] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[03:37:00] <cbreak> ivan_wagner_ml: https://en.cppreference.com/w/cpp/types/numeric_limits
[03:37:15] <cbreak> also, avoid macros.
[03:37:18] <Alipha> I'm assuming this is a school assignment or book exercise that ivan_wagner_ml is doing
[03:38:33] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Remote host closed the connection)
[03:38:41] <dale> You know, if C++20 has nailed down two's complement, maybe I should read that spec to see if it's any more clear.
[03:38:53] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[03:39:56] *** Quits: rgrinberg (~textual@187.194.14.9) (Read error: Connection reset by peer)
[03:40:01] <ivan_wagner_ml> cbreak, I'm against the use of extract libraries. I was curious to rewrite assembly code in cpp
[03:40:03] <RandomReader> dale - e.g. an actual "sign bit" doesn't invert values, ones' complement allows for -0
[03:40:36] <RandomReader> (vs two's complement being inverted and eliminating a signed zero)
[03:40:40] <dale> RandomReader: Right, good points all.
[03:40:47] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:f5fc:59c9:ba9b:990)
[03:41:17] <Alipha> We still refer to the msb the "sign bit" in two's complement though :-)
[03:41:32] <cbreak> ivan_wagner_ml: extract?
[03:41:35] <RandomReader> that meant native shift operations would do different things whether they were arithmetic or bitwise, and may fill or trap or do other interesting things
[03:43:12] <RandomReader> so C++ defined shift relative to the specified non-negative representation it displays everywhere else, but left it implementation-defined for negative values
[03:43:49] <RandomReader> and then just left bit-and/or/etc as working on the representation, whatever that may be
[03:44:28] <Alipha> iirc, the standard (prior to c++20) well-defined shifting positive integers and left-shifting negative integers (unless they underflowed), but kept it implementation-defined for right shift? Or was left shift of negative numbers implementation defined too?
[03:45:15] <RandomReader> C++11: https://timsong-cpp.github.io/cppwp/n3337/expr.shift#2
[03:45:39] <dale> Indeed in C++20 it looks like left/right shift on negative numbers is no longer undefined/implementation-defined.
[03:45:50] <RandomReader> vs today: http://eel.is/c++draft/expr.shift
[03:46:28] <RandomReader> looks like bit-and is just better specified, https://timsong-cpp.github.io/cppwp/n3337/expr.bit.and  vs  http://eel.is/c++draft/expr.bit.and
[03:47:49] <RandomReader> actually I got it wrong for shift, left-shift of negative used to be *undefined*, rather than implementation-defined
[03:48:31] <RandomReader> I think there were platforms where that trapped, so maybe that wasn't considered a reasonable outcome for IB
[03:48:35] <dale> I think my take-away is that everyone accepts that *all* bits in the operands are and have always been affected uniformly when doing bitwise and/or on signed numbers.
[03:48:37] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:f5fc:59c9:ba9b:990) (Ping timeout: 240 seconds)
[03:49:41] <RandomReader> as far as I'm aware, yes
[03:49:56] <RandomReader> unfortunately that doesn't really tell you anything about the result, unless you know the representation
[03:50:29] <RandomReader> (or are living in C++20, where the representation is set)
[03:51:16] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:51:21] <dale> Right.  In this case (someone else's code) the answer seems to be "most of our systems work like this so you need to get a system like ours, otherwise patches welcome".
[03:52:46] <RandomReader> ah yes, the common state :D
[03:53:21] *** Joins: rgrinberg (~textual@187.194.14.9)
[03:53:28] *** Joins: jellie (~luv_panda@user/jellie)
[03:54:37] <dale> :)  Thank you all for the discussion.
[03:55:52] *** Joins: quartz (~user_name@user/quartz)
[03:56:50] <RandomReader> welcome!
[03:57:54] *** Parts: quartz (~user_name@user/quartz) ()
[03:58:23] *** Quits: Yruama (~Yruama@alyon-654-1-428-86.w109-212.abo.wanadoo.fr) (Quit: Leaving)
[04:01:05] *** Quits: rgrinberg (~textual@187.194.14.9) (Read error: Connection reset by peer)
[04:01:31] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:18bd:1c0d:516:57be)
[04:03:29] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Remote host closed the connection)
[04:04:53] *** Quits: jfsimon1981 (~jfsimon19@218.96.128.77.rev.sfr.net) (Remote host closed the connection)
[04:06:24] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:18bd:1c0d:516:57be) (Ping timeout: 250 seconds)
[04:07:08] *** Joins: jfsimon1981 (~jfsimon19@218.96.128.77.rev.sfr.net)
[04:08:07] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:89b6:75bb:9400:4d95)
[04:09:43] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[04:10:49] *** Quits: jfsimon1981 (~jfsimon19@218.96.128.77.rev.sfr.net) (Remote host closed the connection)
[04:15:24] *** Quits: caramel (~caramel@user/caramel) (Read error: Connection reset by peer)
[04:18:03] *** Quits: ivan_wagner_ml (~ivan_wagn@193.138.218.202) (Read error: Connection reset by peer)
[04:18:23] *** Joins: ivan_wagner (~ivan_wagn@193.138.218.202)
[04:18:28] *** Quits: ivan_wagner (~ivan_wagn@193.138.218.202) (Remote host closed the connection)
[04:20:00] *** Joins: ivan_wagner (~ivan_wagn@193.138.218.202)
[04:26:29] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[04:28:30] *** Quits: GNUmoon2 (~GNUmoon@gateway/tor-sasl/gnumoon) (Remote host closed the connection)
[04:32:15] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[04:32:50] *** Joins: c4017w__ (~c4017@209.52.68.8)
[04:35:10] *** Quits: ivan_wagner (~ivan_wagn@193.138.218.202) (Quit: Leaving)
[04:35:19] *** Joins: ivan_wagner (~ivan_wagn@193.138.218.202)
[04:36:29] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[04:39:27] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[04:40:05] *** JakeSays_ is now known as JakeSays
[04:43:14] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Remote host closed the connection)
[04:47:01] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 240 seconds)
[04:48:08] *** Joins: jfsimon1981 (~jfsimon19@218.96.128.77.rev.sfr.net)
[04:50:25] *** Quits: jfsimon1981 (~jfsimon19@218.96.128.77.rev.sfr.net) (Client Quit)
[04:50:45] *** Joins: jfsimon1981 (~jfsimon19@218.96.128.77.rev.sfr.net)
[04:51:50] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[04:55:55] *** Quits: jfsimon1981 (~jfsimon19@218.96.128.77.rev.sfr.net) (Quit: Leaving)
[04:56:11] *** Joins: jfsimon1981 (~jfsimon19@218.96.128.77.rev.sfr.net)
[04:56:40] *** Quits: Tokamak (~Tokamak@172.58.191.51) (Ping timeout: 250 seconds)
[04:58:08] *** Quits: ivan_wagner (~ivan_wagn@193.138.218.202) (Quit: Leaving)
[05:01:21] *** Joins: Tokamak (~Tokamak@172.58.191.81)
[05:01:26] *** Quits: minto (~mintograd@47.201.5.61) (Quit: Leaving)
[05:01:38] *** Joins: arch-angel (~arch-ange@user/arch-angel)
[05:09:10] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:a5b2:fec:e0f1:7e82) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[05:14:48] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Quit: Leaving)
[05:15:29] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[05:19:12] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:89b6:75bb:9400:4d95) (Ping timeout: 250 seconds)
[05:21:13] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:9818:747d:186f:47b5)
[05:21:14] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 272 seconds)
[05:22:35] *** Quits: Zogatribe (Zogatribe@user/zogatribe) (Read error: Connection reset by peer)
[05:28:17] *** Quits: N4buc0- (~N4buc0@177.16.170.138) (Ping timeout: 240 seconds)
[05:33:19] *** Joins: c4017w_ (~c4017@209.52.68.8)
[05:35:11] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:9818:747d:186f:47b5) (Ping timeout: 256 seconds)
[05:35:35] *** Quits: jfsimon1981 (~jfsimon19@218.96.128.77.rev.sfr.net) (Remote host closed the connection)
[05:37:07] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[05:37:23] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:f0a2:d1c3:4490:2515)
[05:41:11] *** Joins: jfsimon1981 (~jfsimon19@218.96.128.77.rev.sfr.net)
[05:41:35] *** Quits: jfsimon1981 (~jfsimon19@218.96.128.77.rev.sfr.net) (Remote host closed the connection)
[05:41:58] *** Joins: jfsimon1981 (~jfsimon19@218.96.128.77.rev.sfr.net)
[05:42:25] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:42:33] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:42:33] *** ChanServ sets mode: +v npaperbot
[05:42:37] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:f0a2:d1c3:4490:2515) (Ping timeout: 240 seconds)
[05:44:14] *** Quits: manx (xuew@p200300e18f1c3400022215fffe03cf97.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[05:44:18] *** Joins: manx- (xuew@p200300e18f3aa800022215fffe03cf97.dip0.t-ipconnect.de)
[05:49:31] *** Quits: jfsimon1981 (~jfsimon19@218.96.128.77.rev.sfr.net) (Remote host closed the connection)
[05:55:30] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:69db:e827:4059:f439)
[05:55:54] *** Quits: rajkosto (~rajkosto@93-86-127-103.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[05:57:11] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[05:57:53] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[06:01:48] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Quit: Leaving)
[06:06:57] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[06:08:54] *** Joins: frost (~frost@user/frost)
[06:11:13] *** Quits: drbeco (~beco@2804:351c:dd01:6600:e4a2:7a5d:e23f:1fd8) (Quit: Leaving)
[06:11:43] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Remote host closed the connection)
[06:14:32] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[06:20:45] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:69db:e827:4059:f439) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[06:29:31] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[06:33:50] *** Joins: c4017w__ (~c4017@209.52.68.8)
[06:34:02] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 256 seconds)
[06:37:26] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[06:39:21] *** Joins: ed (~ed@2404:160:a41b:9f6a:34e8:8d0:5933:9c42)
[06:40:02] *** Quits: ed (~ed@2404:160:a41b:9f6a:34e8:8d0:5933:9c42) (Quit: Konversation terminated!)
[06:41:39] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[06:42:16] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[06:42:48] *** Joins: joolma (uid527699@id-527699.uxbridge.irccloud.com)
[07:00:56] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[07:02:32] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:69db:e827:4059:f439)
[07:03:58] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[07:05:22] *** Quits: linext (~linext@pool-100-1-124-107.nwrknj.fios.verizon.net) (Read error: Connection reset by peer)
[07:07:23] *** Joins: Azem (~haise01@user/haise01)
[07:08:09] *** Quits: raekye (~raekye@creatifcubed.com) (Remote host closed the connection)
[07:10:13] *** Quits: Emet-Selch (~haise01@user/haise01) (Ping timeout: 240 seconds)
[07:11:23] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[07:12:17] *** Joins: seninha (~seninha@user/seninha)
[07:17:06] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 256 seconds)
[07:27:28] *** Joins: BinarySavior_ (~BinarySav@josh.vet)
[07:28:13] *** Quits: BinarySavior (~BinarySav@idlerpg/player/BinarySavior) (Ping timeout: 240 seconds)
[07:30:37] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:69db:e827:4059:f439) (Ping timeout: 240 seconds)
[07:34:03] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[07:34:19] *** Joins: c4017w_ (~c4017@209.52.68.8)
[07:36:22] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[07:37:49] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[07:38:30] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[07:43:15] *** Quits: joolma (uid527699@id-527699.uxbridge.irccloud.com) ()
[07:45:26] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 256 seconds)
[07:51:59] *** Quits: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi) (Ping timeout: 256 seconds)
[07:56:52] *** Joins: rgrinberg (~textual@187.194.14.9)
[07:57:24] *** Quits: reset (~reset@user/reset) (Quit: reset)
[07:59:21] *** Quits: Leone (~Leo@108.175.224.215) (Read error: Connection reset by peer)
[08:03:56] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[08:16:22] *** Joins: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com)
[08:18:52] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[08:19:48] *** Quits: rgrinberg (~textual@187.194.14.9) (Read error: Connection reset by peer)
[08:20:08] *** Joins: ed (~ed@175.141.150.118)
[08:20:47] *** Joins: rgrinberg (~textual@187.194.14.9)
[08:21:07] *** Quits: rgrinberg (~textual@187.194.14.9) (Read error: Connection reset by peer)
[08:22:10] *** Joins: pizdets_ (~pizdets@183.182.115.101)
[08:22:14] *** Joins: rgrinberg (~textual@187.194.14.9)
[08:22:50] *** Quits: pizdets (~pizdets@183.182.114.255) (Ping timeout: 256 seconds)
[08:23:47] *** Quits: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com) (Ping timeout: 250 seconds)
[08:24:09] *** Quits: rgrinberg (~textual@187.194.14.9) (Read error: Connection reset by peer)
[08:34:02] *** Joins: rgrinberg (~textual@187.194.14.9)
[08:34:10] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 256 seconds)
[08:34:50] *** Joins: c4017w__ (~c4017@209.52.68.8)
[08:36:17] *** Joins: gevreeen (~gevreeen@2001:470:67:326:d98b:8f08:c28c:e5d0)
[08:36:41] *** Quits: rgrinberg (~textual@187.194.14.9) (Read error: Connection reset by peer)
[08:36:42] *** Parts: gevreeen (~gevreeen@2001:470:67:326:d98b:8f08:c28c:e5d0) (Closing Window)
[08:36:46] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[08:37:05] *** Joins: teepee (~teepee@openscad/teepee)
[08:37:39] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[08:37:45] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:a54b:13e2:82b5:a352)
[08:37:46] *** Joins: karakedi (~eAC53C340@user/karakedi)
[08:37:50] *** Joins: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com)
[08:37:57] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[08:39:07] *** Joins: Atque (~Atque@user/atque)
[08:42:17] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:a54b:13e2:82b5:a352) (Ping timeout: 240 seconds)
[08:48:17] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[08:50:47] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:8d02:94d4:341b:3a0c)
[08:56:30] *** Quits: msim_ (~msim@2001:8003:d194:d000::d8d) (Ping timeout: 260 seconds)
[08:59:02] *** Joins: myusername (~myusernam@user/myusername)
[09:03:30] *** Quits: emerent (~quassel@p200300cd570443d9ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[09:04:22] *** Joins: emerent (~quassel@p200300cd57044359ba27ebfffed28a59.dip0.t-ipconnect.de)
[09:05:03] *** Joins: msim_ (~msim@2001:8003:d194:d000::d8d)
[09:07:02] *** Quits: twofingersneat (~twofinger@174-080-036-228.res.spectrum.com) (Read error: Connection reset by peer)
[09:11:15] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:35d8:ea36:8830:aa2e)
[09:11:41] *** Quits: ed (~ed@175.141.150.118) (Quit: Konversation terminated!)
[09:13:20] *** Joins: the_lanetly_052 (~the_lanet@185.30.88.191)
[09:15:37] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:35d8:ea36:8830:aa2e) (Ping timeout: 240 seconds)
[09:16:17] *** Quits: rvalue (~rvalue@user/rvalue) (Quit: ZNC - https://znc.in)
[09:17:56] *** Joins: rvalue (~rvalue@user/rvalue)
[09:35:19] *** Joins: c4017w_ (~c4017@209.52.68.8)
[09:38:37] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[09:42:25] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:42:35] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:42:35] *** ChanServ sets mode: +v npaperbot
[09:44:08] *** Joins: ed (~ed@175.141.150.118)
[09:50:11] *** Quits: geeknix (~pi@2001:e68:5432:ee11:f781:3a04:b549:b877) (Quit: WeeChat 2.3)
[09:50:11] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:8d02:94d4:341b:3a0c) (Ping timeout: 256 seconds)
[09:51:17] *** Quits: rpnx-phone (~rpnx-phon@c-73-237-50-187.hsd1.ga.comcast.net) (Read error: Connection reset by peer)
[09:52:06] *** Joins: rpnx-phone (~rpnx-phon@2601:c9:c000:2a8:7474:4226:5ff5:8c47)
[09:57:24] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[10:00:56] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[10:02:18] *** Joins: geeknix (~pi@2001:e68:5432:ee11:f781:3a04:b549:b877)
[10:03:39] *** Joins: teepee (~teepee@openscad/teepee)
[10:04:20] *** Quits: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com) (Quit: Client closed)
[10:20:05] *** manx- is now known as manx
[10:20:28] *** Quits: manx (xuew@p200300e18f3aa800022215fffe03cf97.dip0.t-ipconnect.de) (Quit: manx)
[10:20:40] *** Joins: manx (xuew@p200300e18f3aa800022215fffe03cf97.dip0.t-ipconnect.de)
[10:27:54] *** Joins: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi)
[10:33:29] *** Quits: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi) (Ping timeout: 256 seconds)
[10:35:50] *** Joins: c4017w__ (~c4017@209.52.68.8)
[10:39:11] *** Quits: maxzor (~maxzor@2a01cb04054faa00de36cc5a8e915128.ipv6.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[10:39:43] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[10:48:57] *** Quits: rpnx-phone (~rpnx-phon@2601:c9:c000:2a8:7474:4226:5ff5:8c47) (Ping timeout: 240 seconds)
[10:49:15] *** Joins: rpnx-phone (~rpnx-phon@c-73-237-50-187.hsd1.ga.comcast.net)
[10:51:49] *** Joins: teut (~teut@122.161.83.81)
[10:56:40] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[11:16:33] *** Quits: teut (~teut@122.161.83.81) (Ping timeout: 256 seconds)
[11:21:54] *** Quits: ville (~ville@user/ville) (Read error: Connection reset by peer)
[11:22:00] *** Joins: ville_ (~ville@user/ville)
[11:22:14] *** ville_ is now known as ville
[11:24:30] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[11:24:30] *** Quits: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43) (Ping timeout: 250 seconds)
[11:31:15] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[11:31:44] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[11:32:40] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:34fc:285c:b8fa:d91a)
[11:34:13] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Remote host closed the connection)
[11:34:54] *** Quits: the_lanetly_052 (~the_lanet@185.30.88.191) (Ping timeout: 272 seconds)
[11:36:19] *** Joins: c4017w_ (~c4017@209.52.68.8)
[11:40:02] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[11:43:46] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 272 seconds)
[11:43:58] *** Joins: Markow (~Markow@176.122.215.103)
[11:46:41] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[11:47:40] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[11:49:28] *** Joins: cosimone (~user@93-34-133-235.ip49.fastwebnet.it)
[11:51:48] *** Quits: aeplus (~steve@2603-8000-cf42-7ec1-162f-1996-0ae2-d7da.res6.spectrum.com) (Quit: leaving)
[11:51:49] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[11:56:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[11:57:50] *** Quits: Nutcrawler (~sergio@217-180-232-30.sycmilaa.metronetinc.net) (Quit: Leaving)
[11:59:14] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[12:02:38] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Quit: ZNC - https://znc.in)
[12:03:01] *** Joins: Nutcrawler (~sergio@217-180-232-30.sycmilaa.metronetinc.net)
[12:04:21] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[12:04:40] *** Quits: moberg (~moberg@luke.millenniumfalcon.org) (Quit: quit)
[12:05:13] *** Joins: moberg (~moberg@luke.millenniumfalcon.org)
[12:06:51] *** Joins: evangeline (~Eleanor@178.79.105.181)
[12:11:16] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[12:13:08] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[12:13:53] *** Joins: the_lanetly_052 (~the_lanet@185.30.88.191)
[12:15:26] *** Joins: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com)
[12:23:21] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[12:24:37] *** Quits: the_lanetly_052 (~the_lanet@185.30.88.191) (Ping timeout: 240 seconds)
[12:26:55] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Remote host closed the connection)
[12:35:11] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:36:51] *** Joins: c4017w__ (~c4017@209.52.68.8)
[12:40:40] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[12:42:17] *** Joins: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi)
[12:43:19] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[12:47:41] *** Quits: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi) (Ping timeout: 250 seconds)
[12:48:22] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 272 seconds)
[12:55:25] *** Joins: blackout69 (~blackout6@net-31-156-121-253.cust.vodafonedsl.it)
[12:55:53] *** Joins: rendar (~rendar@user/rendar)
[12:59:08] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 272 seconds)
[13:01:57] *** Quits: ssbr (~ssbr@python/site-packages/ssbr) (Ping timeout: 256 seconds)
[13:02:52] *** Quits: mattf (mattf@2600:3c03::f03c:92ff:fea6:56a4) (Ping timeout: 250 seconds)
[13:04:32] *** Joins: mattf (~mattf@li908-138.members.linode.com)
[13:11:22] *** Joins: andreasbuhr (~quassel@p5dcf94ab.dip0.t-ipconnect.de)
[13:11:22] *** Quits: andreasbuhr (~quassel@p5dcf94ab.dip0.t-ipconnect.de) (Client Quit)
[13:12:01] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:78e9:2c9a:5431:d092) (Read error: Connection reset by peer)
[13:14:14] *** Quits: ed (~ed@175.141.150.118) (Quit: Konversation terminated!)
[13:15:45] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[13:16:02] *** Joins: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi)
[13:17:16] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[13:22:07] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 256 seconds)
[13:23:24] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[13:26:12] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:f8af:7e9a:b154:2753)
[13:26:40] *** Joins: teut (~teut@122.161.83.81)
[13:28:01] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 256 seconds)
[13:28:29] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[13:37:19] *** Joins: c4017w_ (~c4017@209.52.68.8)
[13:40:29] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[13:41:34] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[13:41:55] *** Quits: renopt (~renopt@lisp.us.to) (Changing host)
[13:41:55] *** Joins: renopt (~renopt@user/renopt)
[13:42:26] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:42:35] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:42:35] *** ChanServ sets mode: +v npaperbot
[13:44:08] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[13:44:14] *** Quits: blackout69 (~blackout6@net-31-156-121-253.cust.vodafonedsl.it) (Quit: Leaving.)
[13:44:40] *** Joins: cheater (~Username@user/cheater)
[13:44:57] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[13:50:41] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[13:55:17] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[14:01:09] *** Azem is now known as Emet-Selch
[14:01:50] *** Joins: plastico (~plastico@neomutt/plastico)
[14:05:09] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[14:06:43] *** Joins: jfsimon1981 (~jfsimon19@218.96.128.77.rev.sfr.net)
[14:08:13] *** Joins: jokoon (~eio@2a01:e0a:542:e160:110a:c5de:8b6f:346f)
[14:10:37] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[14:10:49] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Read error: Connection reset by peer)
[14:11:26] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[14:21:58] *** Quits: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi) (Quit: faa)
[14:22:15] *** Joins: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi)
[14:22:57] *** Quits: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de) (Quit: Leaving)
[14:23:02] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Remote host closed the connection)
[14:23:34] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Quit: Leaving)
[14:24:56] *** Joins: Yruama (~Yruama@alyon-654-1-428-86.w109-212.abo.wanadoo.fr)
[14:31:02] *** Quits: jfsimon1981 (~jfsimon19@218.96.128.77.rev.sfr.net) (Quit: Leaving)
[14:31:24] *** Joins: jfsimon1981 (~jfsimon19@218.96.128.77.rev.sfr.net)
[14:32:57] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[14:33:59] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Remote host closed the connection)
[14:34:18] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[14:35:12] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:37:16] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[14:37:50] *** Joins: c4017w__ (~c4017@209.52.68.8)
[14:39:55] *** Joins: reset (~reset@user/reset)
[14:41:06] *** Quits: karakedi (~eAC53C340@user/karakedi) (Read error: Connection reset by peer)
[14:41:41] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[14:41:51] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[14:42:06] *** Quits: jokoon (~eio@2a01:e0a:542:e160:110a:c5de:8b6f:346f) (Quit: Leaving)
[14:42:15] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:42:22] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 272 seconds)
[14:44:05] *** Joins: lxsameer (lxsameer@user/lxsameer)
[14:44:37] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[14:45:01] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:46:29] *** Joins: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de)
[14:48:27] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[14:51:52] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 272 seconds)
[14:57:06] *** Joins: john99 (~johnny@138.62.221.87.dynamic.jazztel.es)
[14:58:45] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[14:59:18] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[15:12:15] *** Joins: blackout69 (~blackout6@net-31-156-121-253.cust.vodafonedsl.it)
[15:13:41] *** Joins: gproto23 (~gproto23@user/gproto23)
[15:14:14] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[15:17:25] *** Joins: CycoCid (Kulrak@n122-109-114-101.rdl1.qld.optusnet.com.au)
[15:17:40] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[15:17:49] *** Joins: N4buc0- (~N4buc0@2804:7f4:348b:2121:a987:95db:818a:7bf0)
[15:19:00] *** Quits: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com) (Quit: Client closed)
[15:19:48] *** Quits: Dreadnaught (Kulrak@n122-109-158-59.rdl2.qld.optusnet.com.au) (Ping timeout: 250 seconds)
[15:30:04] *** Joins: Guest455 (~Guest455@122.176.168.177)
[15:31:30] *** Guest455 is now known as queenofspades
[15:36:12] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:c128:812:5c48:c0e3)
[15:36:12] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:c128:812:5c48:c0e3) (Changing host)
[15:36:12] *** Joins: skapata (~Skapata@user/skapata)
[15:38:20] *** Joins: c4017w_ (~c4017@209.52.68.8)
[15:41:35] *** Joins: Leone (~Leo@108.175.224.215)
[15:42:19] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[15:42:32] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[15:44:09] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[15:45:27] *** Joins: magla (~gelignite@d536720f.access.ecotel.net)
[15:46:11] *** Quits: john99 (~johnny@138.62.221.87.dynamic.jazztel.es) (Remote host closed the connection)
[15:46:17] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[15:50:04] *** Joins: Xardas (~Xardas@149.233.51.127)
[15:51:08] <Xardas> Guys, is an array arr really the same as &arr[0] ?
[15:51:36] <Xardas> I think they're different types
[15:52:18] *** Joins: NEYi (~NEYi@109.251.216.38)
[15:54:14] <ville> umm... they are not the same. arrays are their own types. but don't be confused by textual representation of code where you see something like: void f(int*); int xs[2]; f(xs); f(&xs[0]); both compile
[15:55:04] *** Quits: Markow (~Markow@176.122.215.103) (Quit: Linux 5.17.0-rc3-git-f4bc5bb-Pogorze-Karpackie-CUSTOM-KERNEL)
[15:55:07] <ville> arrays convert to a pointer-to-element-type implicitly. that's why that works
[15:55:08] *** Cyp_ is now known as Cyp
[15:55:52] *** Joins: PJBoy (~PJBoy@user/pjboy)
[15:56:25] <ville> so if you have int xs[2[]; then xs will convert to pointer-to-int because xs's element type is int
[15:56:32] <ville> err int xs[2];
[16:00:07] *** Joins: slidercrank (~slidercra@user/slidercrank)
[16:01:35] <PJBoy> oh wow, they added a std::hash specialisation for std::filesystem::path back into C++17
[16:02:04] <ville> the next question is: "is it contexpr"?
[16:02:12] <ville> err constexpr
[16:02:42] <PJBoy> I expect not
[16:02:53] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[16:03:54] <ville> i see a new paper in the future
[16:05:00] <PJBoy> I don't know if any of the hash specialisations are constexpr
[16:05:15] *** Joins: KAHR-Alpha (~Alpha@2a01cb0d024a6600c8a73562b3ef86d5.ipv6.abo.wanadoo.fr)
[16:05:37] <PJBoy> { constexpr auto h = hash<int>()({}); }
[16:05:37] <geordi> error: call to non-'constexpr' function 'size_t hash<int>::operator()(int) const'
[16:05:41] <PJBoy> seemingly not
[16:06:21] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[16:08:59] <ville> still makes me chuckle every time i see a "constexpr abc"-paper on the list
[16:09:53] <ville> at what point have they put more effort into those papers than it would have taken to define a compile time vm for execution
[16:12:04] *** Joins: savolla (~quassel@95.10.207.85)
[16:15:02] *** Quits: Yruama (~Yruama@alyon-654-1-428-86.w109-212.abo.wanadoo.fr) (Quit: Leaving)
[16:16:09] *** Parts: blackout69 (~blackout6@net-31-156-121-253.cust.vodafonedsl.it) ()
[16:18:14] <PJBoy> I'm surprised there hasn't been a big monolithic paper that adds constexpr to everything applicable
[16:19:43] *** Quits: cosimone (~user@93-34-133-235.ip49.fastwebnet.it) (Remote host closed the connection)
[16:21:39] *** Quits: queenofspades (~Guest455@122.176.168.177) (Quit: Client closed)
[16:22:14] *** Joins: cosimone (~user@93-34-133-235.ip49.fastwebnet.it)
[16:23:42] *** Joins: Guest455 (~Guest455@122.176.168.177)
[16:25:57] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[16:27:43] *** Joins: pulse (~pulse@user/pulse)
[16:29:08] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[16:31:56] <anyone> maybe they realized midway that constexpr is like inline and that a compiler could make the determination itself
[16:33:19] *** Quits: lxsameer (lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[16:34:00] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Client Quit)
[16:34:07] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[16:35:01] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[16:35:09] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Quit: Leaving)
[16:37:13] <PJBoy> compiler's always been able to compute stuff at compile time if it wants to
[16:38:51] *** Joins: c4017w__ (~c4017@209.52.68.8)
[16:42:42] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[16:43:38] *** Quits: Guest455 (~Guest455@122.176.168.177) (Quit: Client closed)
[16:43:51] *** Joins: Guest455 (~Guest455@122.176.168.177)
[16:49:31] <Xardas> So i came to the conclusion
[16:49:46] <Xardas> That not always an array is converted to a pointer
[16:49:56] <Xardas> in a range for loop it isn't
[16:50:07] <Xardas> it's just an array
[16:50:36] <Xardas> But when we use an array in an assignment statement, then it does
[16:53:29] <Xardas> Is it possible to read through the whole c++ docs ?
[16:54:52] <leduyquang753> Sure, the C++2020 standard is only 1853 pages.
[16:55:56] *** Joins: limubs (~limubs@cgn-89-1-58-186.nc.de)
[16:57:40] *** Quits: drw (~drw@188.170.80.249) (Quit: Quit)
[17:14:55] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[17:15:31] <ville> http://www.eelis.net/c++draft/
[17:17:27] *** Joins: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[17:19:34] *** Joins: xkuru (~xkuru@user/xkuru)
[17:19:45] *** Joins: dg_dg (~dg_dg@gateway/vpn/pia/dgdg/x-00698222)
[17:20:36] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 256 seconds)
[17:21:16] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[17:22:37] *** Quits: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 256 seconds)
[17:23:05] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[17:23:08] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[17:23:25] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[17:26:01] *** Joins: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[17:28:51] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 256 seconds)
[17:28:57] *** Joins: spaceangel__ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[17:32:21] <PJBoy> to be fair, it's mostly stdlib spec
[17:33:22] *** Quits: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 272 seconds)
[17:33:29] <PJBoy> only 466 pages for the language section
[17:34:18] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[17:34:38] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[17:34:57] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[17:35:32] <PJBoy> which is why I keep a language-only copy of http://eel.is/c++draft/full for ctrl+f purposes
[17:35:39] *** Quits: spaceangel__ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 256 seconds)
[17:36:15] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[17:37:13] <PJBoy> (note for anyone else who does that, be mindful to not click any hyperlinks)
[17:37:21] *** Quits: teut (~teut@122.161.83.81) (Ping timeout: 256 seconds)
[17:39:20] *** Joins: c4017w_ (~c4017@209.52.68.8)
[17:39:50] *** Quits: justaguy (~quassel@2a05:d014:742:eb00:7693:c44f:1fc3:29) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[17:40:36] *** Joins: justaguy (~quassel@2a05:d014:742:eb00:7693:c44f:1fc3:29)
[17:42:17] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[17:42:26] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:42:34] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:42:34] *** ChanServ sets mode: +v npaperbot
[17:42:42] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[17:46:26] *** Joins: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[17:46:42] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[17:49:12] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 272 seconds)
[17:59:01] *** Joins: evangeline (~Eleanor@178.79.105.181)
[18:00:27] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[18:01:10] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:05:02] *** Joins: teut (~teut@122.161.83.81)
[18:10:34] *** Joins: frost (~frost@user/frost)
[18:14:15] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[18:15:35] *** Joins: NEYi (~NEYi@109.251.216.38)
[18:27:24] *** Joins: Angs (~Angs@2.64.189.27.mobile.tre.se)
[18:27:37] *** Quits: Guest455 (~Guest455@122.176.168.177) (Quit: Client closed)
[18:39:51] *** Joins: c4017w__ (~c4017@209.52.68.8)
[18:41:52] *** Joins: karakedi (~eAC53C340@user/karakedi)
[18:43:03] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[18:43:40] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[18:46:14] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[18:46:51] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[18:56:22] *** Joins: jokoon (~eio@2a01:e0a:542:e160:110a:c5de:8b6f:346f)
[18:58:04] *** Quits: limubs (~limubs@cgn-89-1-58-186.nc.de) (Ping timeout: 256 seconds)
[18:59:30] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 272 seconds)
[19:01:50] *** Joins: blackout69 (~blackout6@net-31-156-121-253.cust.vodafonedsl.it)
[19:06:18] *** Joins: Yruama (~Yruama@alyon-654-1-428-86.w109-212.abo.wanadoo.fr)
[19:06:34] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[19:10:01] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[19:22:18] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 272 seconds)
[19:24:14] *** Joins: quartz (~user_name@user/quartz)
[19:24:54] *** Parts: quartz (~user_name@user/quartz) ()
[19:25:31] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[19:29:53] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[19:31:10] *** Joins: neure (~TimoSuora@87-92-150-254.rev.dnainternet.fi)
[19:39:31] *** Joins: andreasbuhr (~quassel@p5dcf94ab.dip0.t-ipconnect.de)
[19:39:34] *** Quits: andreasbuhr (~quassel@p5dcf94ab.dip0.t-ipconnect.de) (Client Quit)
[19:39:52] *** Joins: the_lanetly_052 (~the_lanet@185.30.88.191)
[19:40:19] *** Joins: c4017w_ (~c4017@209.52.68.8)
[19:41:21] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[19:43:43] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[19:48:16] *** Quits: jokoon (~eio@2a01:e0a:542:e160:110a:c5de:8b6f:346f) (Quit: Leaving)
[19:55:25] *** Quits: msk (~Thunderbi@89.205.124.59) (Ping timeout: 240 seconds)
[19:56:57] *** Quits: plastico (~plastico@neomutt/plastico) (Ping timeout: 240 seconds)
[19:58:17] *** Joins: plastico (~plastico@neomutt/plastico)
[20:02:50] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:9950:c5c9:85ae:4671)
[20:02:50] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:9950:c5c9:85ae:4671) (Changing host)
[20:02:50] *** Joins: RoKenn (~RoKenn@user/rokenn)
[20:02:57] *** Quits: [R] (~rs@genoce.org) (Ping timeout: 240 seconds)
[20:03:39] *** Joins: ferdna (~ferdna@user/ferdna)
[20:04:24] *** Joins: [R] (~rs@genoce.org)
[20:12:27] *** Joins: Fairy97 (~Fairy@2001:464a:4992:0:6111:c808:a47f:41)
[20:16:11] *** Quits: Fairy (~Fairy@2001:464a:4992:0:8fa:f917:3ddb:7b76) (Ping timeout: 245 seconds)
[20:22:32] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[20:22:32] *** Quits: DrMax (~DrMax@node-1w7jra94757g0ehga8s43jipa.ipv6.telus.net) (Remote host closed the connection)
[20:23:44] *** Joins: DrMax (~DrMax@node-1w7jra94757g1w4i6sbnr3nph.ipv6.telus.net)
[20:30:23] *** Joins: the_lanetly_052_ (~the_lanet@194.135.153.220)
[20:31:37] *** Quits: neure (~TimoSuora@87-92-150-254.rev.dnainternet.fi) (Quit: Leaving)
[20:31:40] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:70e8:bae3:c5b2:7d1d)
[20:33:16] *** Quits: the_lanetly_052 (~the_lanet@185.30.88.191) (Ping timeout: 256 seconds)
[20:34:48] *** Quits: pulse (~pulse@user/pulse) (Quit: Look behind you, a three headed monkey!)
[20:35:37] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:f8af:7e9a:b154:2753) (Ping timeout: 256 seconds)
[20:36:15] *** Joins: msk (~Thunderbi@89.205.124.40)
[20:38:58] *** Quits: savolla (~quassel@95.10.207.85) (Read error: Connection reset by peer)
[20:39:31] *** Joins: savolla (~quassel@95.10.207.85)
[20:40:51] *** Joins: c4017w__ (~c4017@209.52.68.8)
[20:43:30] *** Quits: T`aZ (~TaZ@user/taz/x-9470768) (Ping timeout: 250 seconds)
[20:43:33] *** Joins: Zogatribe (Zogatribe@user/zogatribe)
[20:44:38] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[20:45:25] *** Joins: T`aZ (~TaZ@user/taz/x-9470768)
[20:46:34] *** Joins: pulse (~pulse@user/pulse)
[20:48:46] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[20:49:08] *** Quits: Tokamak (~Tokamak@172.58.191.81) (Ping timeout: 256 seconds)
[20:51:28] *** Joins: jsbach (~jsbach@2a01:c22:35d8:1b00:e0ca:1ff3:45d4:9de4)
[20:52:22] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:f931:4dd:828a:cfc2)
[20:53:11] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[20:53:41] *** Joins: Tokamak (~Tokamak@172.58.191.81)
[20:53:43] *** Quits: cosimone (~user@93-34-133-235.ip49.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[20:54:57] *** Joins: MarcoFe (~marcofe@93-36-164-204.ip61.fastwebnet.it)
[20:55:31] <MarcoFe> hi everyone
[20:55:52] <ville> the preprocessor has a funny idea of a number http://www.eelis.net/c++draft/lex.ppnumber#nt:pp-number
[20:56:23] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[20:59:46] *** Joins: jellie (~luv_panda@user/jellie)
[21:02:06] *** Joins: cosimone (~user@93-34-133-235.ip49.fastwebnet.it)
[21:02:22] <Alipha> -- everyone: No such nick/channel
[21:12:27] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:f931:4dd:828a:cfc2) (Ping timeout: 256 seconds)
[21:13:15] *** Quits: the_lanetly_052_ (~the_lanet@194.135.153.220) (Ping timeout: 256 seconds)
[21:14:21] *** Joins: rgrinberg (~textual@187.194.14.9)
[21:19:25] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[21:20:30] *** Joins: andreasbuhr (~quassel@p5dcf94ab.dip0.t-ipconnect.de)
[21:20:30] *** Quits: andreasbuhr (~quassel@p5dcf94ab.dip0.t-ipconnect.de) (Client Quit)
[21:20:31] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[21:20:44] *** Quits: jfsimon1981 (~jfsimon19@218.96.128.77.rev.sfr.net) (Ping timeout: 272 seconds)
[21:22:54] *** Joins: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43)
[21:24:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[21:28:15] *** Joins: jfsimon1981 (~jfsimon19@218.96.128.77.rev.sfr.net)
[21:33:24] *** Quits: T`aZ (~TaZ@user/taz/x-9470768) (Ping timeout: 272 seconds)
[21:33:25] *** Joins: martiert1work (~martiert@64.103.40.27)
[21:35:05] *** Joins: T`aZ (~TaZ@user/taz/x-9470768)
[21:35:08] <PJBoy> doesn't seem that funny to me
[21:35:43] *** Parts: Zogatribe (Zogatribe@user/zogatribe) ()
[21:36:14] *** Quits: martiert_work (~martiert@173.38.220.52) (Ping timeout: 260 seconds)
[21:37:24] *** Joins: Zogatribe (Zogatribe@user/zogatribe)
[21:38:11] *** Quits: martiert1work (~martiert@64.103.40.27) (Ping timeout: 256 seconds)
[21:38:23] *** Joins: martiert_work (~martiert@173.38.220.58)
[21:39:49] *** Joins: N4buc0 (~N4buc0@177.16.170.138)
[21:41:20] *** Joins: c4017w_ (~c4017@209.52.68.8)
[21:41:32] *** Quits: rpnx-phone (~rpnx-phon@c-73-237-50-187.hsd1.ga.comcast.net) (Read error: Connection reset by peer)
[21:41:35] *** Quits: N4buc0- (~N4buc0@2804:7f4:348b:2121:a987:95db:818a:7bf0) (Remote host closed the connection)
[21:42:26] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:42:36] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:42:36] *** ChanServ sets mode: +v npaperbot
[21:44:45] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[21:44:46] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[21:45:13] *** Joins: Memory (~user_name@user/memory)
[21:47:07] *** Quits: rgrinberg (~textual@187.194.14.9) (Read error: Connection reset by peer)
[21:48:06] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Quit: Leaving)
[21:48:24] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:9dd2:64b9:16ba:553d)
[22:01:26] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:70e8:bae3:c5b2:7d1d) (Read error: Connection reset by peer)
[22:04:01] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:9dd2:64b9:16ba:553d) (Ping timeout: 256 seconds)
[22:04:55] *** Joins: badfilms (~badfilms@user/badfilms)
[22:12:28] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[22:25:15] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-c0be-54b3-db2c-85e9.res6.spectrum.com)
[22:29:13] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Quit: leaving)
[22:32:33] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[22:34:51] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 256 seconds)
[22:36:45] *** Joins: jellie (~luv_panda@user/jellie)
[22:39:28] *** Joins: TomyLobo (~TomyLobo@p200300e80f006700cc6e9ab645bdad3a.dip0.t-ipconnect.de)
[22:40:37] *** Quits: bzyx (~quassel@89-69-20-238.dynamic.chello.pl) (Ping timeout: 240 seconds)
[22:40:48] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Ping timeout: 276 seconds)
[22:41:23] *** Quits: useful_idiot (~useful_id@gateway/vpn/pia/usefulidiot/x-43226899) (Ping timeout: 268 seconds)
[22:41:25] *** Joins: bzyx (~quassel@89-69-20-238.dynamic.chello.pl)
[22:41:51] *** Joins: c4017w__ (~c4017@209.52.68.8)
[22:45:18] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[22:48:55] *** Joins: useful_idiot (~useful_id@gateway/vpn/pia/usefulidiot/x-43226899)
[22:52:51] *** Joins: Atque_ (~Atque@user/atque)
[22:53:09] *** Quits: Atque (~Atque@user/atque) (Ping timeout: 276 seconds)
[22:53:52] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[22:54:55] *** Quits: Atque_ (~Atque@user/atque) (Remote host closed the connection)
[22:56:32] *** Joins: Atque (~Atque@user/atque)
[22:58:54] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 272 seconds)
[23:00:24] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[23:00:29] *** Quits: Yruama (~Yruama@alyon-654-1-428-86.w109-212.abo.wanadoo.fr) (Quit: Leaving)
[23:01:32] *** Joins: Atque (~Atque@user/atque)
[23:03:47] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:f425:fffb:4465:6325)
[23:03:48] *** Joins: vicfred (~vicfred@user/vicfred)
[23:04:14] *** Quits: vicfred (~vicfred@user/vicfred) (Remote host closed the connection)
[23:04:37] *** Joins: vicfred (~vicfred@user/vicfred)
[23:07:14] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[23:11:22] *** Quits: MarcoFe (~marcofe@93-36-164-204.ip61.fastwebnet.it) (Ping timeout: 256 seconds)
[23:13:12] *** Joins: MarcoFe (~marcofe@93-36-164-204.ip61.fastwebnet.it)
[23:16:26] *** Quits: savolla (~quassel@95.10.207.85) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:18:01] *** Quits: sargon (~sargon@188.250.185.117) (Quit: Ex-Chat)
[23:20:29] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[23:20:47] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[23:23:50] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[23:24:21] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Ping timeout: 276 seconds)
[23:29:23] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[23:29:33] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[23:30:12] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Ping timeout: 276 seconds)
[23:30:20] *** Quits: myusername (~myusernam@user/myusername) (Ping timeout: 250 seconds)
[23:30:27] *** Joins: Atque (~Atque@user/atque)
[23:35:55] *** Quits: teut (~teut@122.161.83.81) (Quit: Client closed)
[23:42:20] *** Joins: c4017w_ (~c4017@209.52.68.8)
[23:44:47] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:f425:fffb:4465:6325) (Read error: Connection reset by peer)
[23:45:16] *** Joins: jellie (~luv_panda@user/jellie)
[23:45:45] *** Quits: MarcoFe (~marcofe@93-36-164-204.ip61.fastwebnet.it) (Quit: Konversation terminated!)
[23:45:56] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[23:46:11] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[23:46:58] *** Joins: quartz (~user_name@user/quartz)
[23:47:40] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[23:47:50] *** Parts: quartz (~user_name@user/quartz) ()
[23:47:57] *** Quits: shailangsa (~shailangs@host109-159-108-227.range109-159.btcentralplus.com) (Ping timeout: 256 seconds)
[23:48:56] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 272 seconds)
[23:50:32] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[23:51:40] *** Joins: shailangsa_ (~shailangs@host86-186-127-164.range86-186.btcentralplus.com)
[23:56:20] *** Quits: useful_idiot (~useful_id@gateway/vpn/pia/usefulidiot/x-43226899) (Ping timeout: 250 seconds)
[23:56:20] *** Joins: Betal (~Betal@user/betal)
[23:57:02] *** Parts: blackout69 (~blackout6@net-31-156-121-253.cust.vodafonedsl.it) ()
