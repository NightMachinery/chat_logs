[00:03:58] *** Joins: mro (~mro@2002:5cc3:f6cf:0:ec7d:2fe:c697:1411)
[00:12:16] *** Quits: mro (~mro@2002:5cc3:f6cf:0:ec7d:2fe:c697:1411) (Remote host closed the connection)
[00:21:18] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: No Ping reply in 180 seconds.)
[00:22:42] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[00:24:42] *** Joins: mro (~mro@port-92-195-246-207.dynamic.as20676.net)
[00:30:57] *** Quits: gravicappa (~gravicapp@178.214.248.83) (Ping timeout: 240 seconds)
[00:49:35] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[00:53:28] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[02:02:45] *** Joins: spip (~bobo@37.173.46.172)
[02:02:55] *** Quits: bobo_ (~bobo@37.166.129.32) (Ping timeout: 256 seconds)
[02:07:13] *** Joins: Everything (~Everythin@37.115.210.35)
[02:58:54] *** Quits: bartholin (~bartholin@2a01:cb11:1ef:d800:4fc6:aec1:8fb8:a2e1) (Quit: Leaving)
[03:06:11] *** Joins: rgrinberg (~textual@2806:101e:7:cff:f4d0:b9c8:9c34:9747)
[03:10:22] *** Joins: jlrnick (~josephler@lmontsouris-656-1-239-82.w80-15.abo.wanadoo.fr)
[03:13:11] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 252 seconds)
[03:13:24] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[03:14:49] *** Quits: rgrinberg (~textual@2806:101e:7:cff:f4d0:b9c8:9c34:9747) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:16:32] *** Joins: rgrinberg (~textual@2806:101e:7:cff:f4d0:b9c8:9c34:9747)
[03:21:57] *** Quits: jlrnick (~josephler@lmontsouris-656-1-239-82.w80-15.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[03:38:08] *** Quits: rgrinberg (~textual@2806:101e:7:cff:f4d0:b9c8:9c34:9747) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:47:29] *** Quits: mro (~mro@port-92-195-246-207.dynamic.as20676.net) (Quit: Leaving...)
[03:55:50] *** Joins: rgrinberg (~textual@2806:101e:7:cff:f4d0:b9c8:9c34:9747)
[04:46:41] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 256 seconds)
[05:02:33] *** Quits: Everything (~Everythin@37.115.210.35) (Ping timeout: 256 seconds)
[05:04:03] *** Joins: Everything (~Everythin@178-133-112-180.mobile.vf-ua.net)
[05:09:33] <Corbin> Ugh, deja vu, but I don't think I've asked this yet: with sexplib, is it possible to load an S-expression from a file, but somehow filter the file first? Or do I have to open the file, run the filter on the contents, and then parse the remainder?
[05:09:49] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-90.elisa-laajakaista.fi) (Quit: Leaving.)
[05:10:09] <Corbin> Because I'm not great at making choices, the filter's currently written in Python 3. I'm thinking that I've gotta rewrite at least one component.
[05:12:45] *** Quits: Everything (~Everythin@178-133-112-180.mobile.vf-ua.net) (Quit: leaving)
[05:18:17] *** Quits: rgrinberg (~textual@2806:101e:7:cff:f4d0:b9c8:9c34:9747) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:16:57] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[06:18:58] *** Joins: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[06:43:39] <d_bot> <darrenldl> define filter the file?
[07:18:12] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:20:14] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:36:47] *** Joins: xd1le (~xd1le@user/xd1le)
[07:39:02] *** Joins: mbuf (~Shakthi@122.178.216.85)
[07:50:09] *** Joins: rgrinberg (~textual@177.246.221.96)
[08:49:56] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[09:10:56] *** Joins: gopcode (~gopcode@137.132.218.139)
[09:23:03] <d_bot> <ohad> anyone have any tips for debugging the ocaml compiler/runtime? im porting ocaml to a new OS and encountered some weird errors:
[09:23:03] <d_bot> <ohad> 1. when running `ocamlopt.opt` and `ocamlc.opt`, the code in `Random.State.full_init` crashes with a bounds error (which after some printf debugging comes from `let j = i mod 55` giving values >55)
[09:23:04] <d_bot> <ohad> 2. `ocamlopt.byte` immediately crashes with `input_value: native integer value too large` (and seemingly crashes too early to print a stack trace)
[09:23:45] <d_bot> <ohad> strangely enough everything else looks like it's working fine, but these two errors both look pretty scary
[09:25:37] <d_bot> <ohad> with #1 especially i'd be inclined to think the codegen is wrong, but this is running on i386 on 4.12.0 which id imagine is pretty heavily tested
[09:32:20] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[09:50:30] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 268 seconds)
[09:58:40] *** Quits: hexology (~hexology@user/hexology) (Quit: hex on you ...)
[10:15:55] *** Joins: Everything (~Everythin@178-133-112-180.mobile.vf-ua.net)
[10:46:41] *** Quits: rgrinberg (~textual@177.246.221.96) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:48:14] *** Joins: rgrinberg (~textual@177.246.223.46)
[11:00:20] <d_bot> <ohad> so i think i've cracked the case here for #1. basically, im using an amd64 machine to cross-compile ocaml to x86. somewhere along the way it seems like the compiler is making assumptions based on math that works on amd64 and then generating code for it on x86
[11:01:06] <d_bot> <ohad> not sure if this is officially a "bug" since ocaml doesn't really support cross compilation, but on the github docs it seems to imply that this should be possible: https://github.com/ocaml/ocaml/blob/trunk/INSTALL.adoc#configuration (compiling from amd64 -> i686)
[11:01:48] <d_bot> <ohad> any chance im just missing a flag here that makes this work correctly?
[11:21:28] *** Quits: rgrinberg (~textual@177.246.223.46) (Read error: Connection reset by peer)
[11:22:07] *** Joins: rgrinberg (~textual@177.246.221.96)
[11:35:08] *** Quits: rgrinberg (~textual@177.246.221.96) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:37:02] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[11:48:07] *** Joins: hornhack (~hackingho@user/hackinghorn)
[11:51:07] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Ping timeout: 256 seconds)
[12:01:53] *** Joins: bartholin (~bartholin@2a01:cb11:1ef:d800:4fc6:aec1:8fb8:a2e1)
[12:45:55] <d_bot> <EduardoRFS> @ohad this will not work, you need same word size compilers to cross compile
[13:18:28] <d_bot> <Continuation Calculus> is there a ready-made memoization library that can work with any pure function and data-type, without having to provide an equal or a compare function? like, a thing that uses the pointer / underlying int to do the memoization?
[13:19:52] <d_bot> <Continuation Calculus> if there is none, is this a bad idea?
[13:21:03] <d_bot> <Continuation Calculus> (from what I understand: somethingsomething GC can shuffle pointers around, but somethingsomething ephemerons and similar data-structures can keep track of this)
[13:22:41] <d_bot> <octachron> Using the memory address  is  the same thing  as using the physical equality as the `equal` function.
[13:23:02] <d_bot> <Continuation Calculus> oh, i forgot this was exposed, nice.
[13:24:24] <d_bot> <Continuation Calculus> ah. now i see, it means that to have this library, you'd need to iterate over all the memoized parameters, because you only have access to `equal`
[13:24:42] <d_bot> <Continuation Calculus> so you still need at least some pre-`hash`
[13:25:23] <d_bot> <octachron> Yes, you need some more structure/information to have a fast lookup.
[13:25:24] <d_bot> <Continuation Calculus> and now, we're back to something very close to ephemerons
[13:25:49] <d_bot> <Continuation Calculus> well, off to writing this library then
[13:31:19] <d_bot> <octachron> (You may want to have a look at the `Memoize` module of the Fix library)
[13:35:33] <d_bot> <Continuation Calculus> I will likely do so, but I really do want ephemerons and the like as I plan to have those things live in long-lived processes (LSP)
[13:51:18] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-90.elisa-laajakaista.fi)
[14:02:54] *** Joins: bobo_ (~bobo@37.172.187.111)
[14:03:18] *** Quits: spip (~bobo@37.173.46.172) (Ping timeout: 260 seconds)
[15:45:22] *** Joins: dalek-caan (~Thunderbi@109.252.124.86)
[16:07:42] *** Joins: xiongxin (~Thunderbi@119.123.103.1)
[16:55:43] *** Quits: xiongxin (~Thunderbi@119.123.103.1) (Remote host closed the connection)
[17:16:53] *** Quits: gopcode (~gopcode@137.132.218.139) (Quit: Client closed)
[17:22:35] *** Joins: gravicappa (~gravicapp@178.214.248.83)
[17:41:01] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[17:43:11] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[19:07:53] <travv0> Is there a cross-platform library that’ll let me copy a file while preserving its modification time?
[19:15:12] <travv0> Never mind, just found the utimes function in Unix
[19:15:48] *** Joins: mro (~mro@port-92-195-191-89.dynamic.as20676.net)
[19:28:56] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[19:37:45] *** Quits: xd1le (~xd1le@user/xd1le) (Quit: xd1le)
[19:43:01] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[19:44:31] <d_bot> <let Butanium = raise Not_found;;> I know some magic compiler parameters in C can speed up your code. I only know they exist - because their are used in code challenges - idk how they work and what they do. Does this exist with OCaml too ?
[19:46:22] <d_bot> <Abbix> you mean optimizations?
[19:53:36] *** Quits: hornhack (~hackingho@user/hackinghorn) (Ping timeout: 268 seconds)
[19:53:47] <d_bot> <ohad> ah interesting, makes sense though i do wish that INSTALL.adoc made that a little more clear
[19:54:48] <d_bot> <ohad> it seems like it might actually be an easy patch by overriding the `Sys.word_size` when host size != build size, but haven't confirmed that that's the only place where it breaks
[19:57:57] <d_bot> <EduardoRFS> That's not the problem, the problem is codegen
[19:58:10] <d_bot> <EduardoRFS> Your division will be broken as an example
[19:59:18] <d_bot> <ohad> right, the code that's used to optimize division uses `Sys.word_size` and changing it to return `4` should fix it
[20:03:38] *** Quits: mro (~mro@port-92-195-191-89.dynamic.as20676.net) (Quit: Leaving...)
[20:17:29] *** Quits: mbuf (~Shakthi@122.178.216.85) (Quit: Leaving)
[20:53:51] <d_bot> <let Butanium = raise Not_found;;> tes
[21:30:34] *** Joins: rgrinberg (~textual@2806:101e:7:33a5:94b6:4a60:d424:26d4)
[22:36:24] <d_bot> <EduardoRFS> Now you need to find all places that use the wrong word_size, there is not only Sys.word_size
[22:37:12] <d_bot> <EduardoRFS> But probably shouldn't be that hard if you get the test suite right
[22:45:00] *** Quits: rgrinberg (~textual@2806:101e:7:33a5:94b6:4a60:d424:26d4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:57:55] *** Joins: rgrinberg (~textual@2806:101e:7:b2bc:b9e9:b5b0:1484:bd77)
[22:59:26] *** Quits: rgrinberg (~textual@2806:101e:7:b2bc:b9e9:b5b0:1484:bd77) (Client Quit)
[23:00:45] *** Joins: rgrinberg (~textual@2806:101e:7:b2bc:b9e9:b5b0:1484:bd77)
[23:02:07] *** Quits: rgrinberg (~textual@2806:101e:7:b2bc:b9e9:b5b0:1484:bd77) (Client Quit)
[23:40:55] *** Joins: hornhack (~hackingho@user/hackinghorn)
[23:41:10] *** Quits: gravicappa (~gravicapp@178.214.248.83) (Ping timeout: 268 seconds)
