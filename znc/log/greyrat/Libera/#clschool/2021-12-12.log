[00:01:15] *** Quits: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8) (Ping timeout: 250 seconds)
[00:02:33] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[00:15:26] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[00:32:15] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Quit: Leaving)
[00:44:23] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[00:48:31] *** Joins: dra (~dra@2a04:4540:641e:c500:f8a1:ec29:eb09:fcef)
[01:09:42] *** Quits: dra (~dra@2a04:4540:641e:c500:f8a1:ec29:eb09:fcef) (Remote host closed the connection)
[01:16:46] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[01:24:52] *** Quits: Jing (~hedgehog@2604:a840:3::1001) (Remote host closed the connection)
[01:29:06] *** Joins: Jing (~hedgehog@2604:a840:3::1001)
[01:35:49] *** Joins: dra (~dra@2a04:4540:641e:c500:5db0:ca6a:674:5d8b)
[01:59:35] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:04:35] *** Quits: dra (~dra@2a04:4540:641e:c500:5db0:ca6a:674:5d8b) (Quit: Leaving)
[02:04:40] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[02:04:55] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[02:06:02] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Read error: Connection reset by peer)
[02:08:45] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[02:40:53] *** random-nick_ is now known as random-nick
[02:51:40] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[03:17:02] *** Quits: Jing (~hedgehog@2604:a840:3::1001) (Remote host closed the connection)
[03:17:39] *** Joins: Jing (~hedgehog@2604:a840:3::1001)
[03:43:13] *** Joins: ahc (~ahc@121.98.229.241)
[04:01:16] *** Joins: lisp123 (~lisp123@5.30.23.247)
[04:06:08] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[04:30:31] *** Quits: Jing (~hedgehog@2604:a840:3::1001) (Remote host closed the connection)
[04:34:35] *** Joins: Jing (~hedgehog@2604:a840:3::1001)
[04:59:13] *** Quits: random-nick (~random-ni@87.116.160.199) (Ping timeout: 252 seconds)
[05:36:08] *** Joins: Oladon (~olad@98.43.81.226)
[05:51:39] *** Quits: Jing (~hedgehog@2604:a840:3::1001) (Remote host closed the connection)
[05:55:26] *** Joins: Jing (~hedgehog@2604:a840:3::1001)
[06:23:32] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Read error: Connection reset by peer)
[06:26:16] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[06:43:29] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[07:02:16] *** Quits: sts-q (~sts-q@91.200.108.241) (Ping timeout: 256 seconds)
[07:07:48] *** Joins: sts-q (~sts-q@91.200.108.157)
[07:18:30] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 260 seconds)
[07:21:18] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:59:40] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:28:46] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[09:29:15] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:34:02] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[09:58:55] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[10:47:17] *** Joins: treflip (~user@95.79.32.99)
[11:21:08] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:22:39] *** Joins: rain3 (~rain3___@79.115.252.154)
[11:25:49] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[12:21:37] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:25:24] *** Quits: ahc (~ahc@121.98.229.241) (Quit: Client closed)
[12:38:42] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[12:45:28] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[12:50:03] *** Joins: makomo (~makomo@user/makomo)
[13:33:03] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:43:15] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:46:22] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:46:48] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:47:01] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:54:55] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 252 seconds)
[13:57:05] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[14:14:38] *** Quits: Jing (~hedgehog@2604:a840:3::1001) (Remote host closed the connection)
[14:15:15] *** Joins: Jing (~hedgehog@103.121.208.36)
[14:16:07] *** Quits: Jing (~hedgehog@103.121.208.36) (Remote host closed the connection)
[14:16:38] *** Joins: Jing (~hedgehog@2604:a840:3::1001)
[14:47:26] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[14:53:02] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 260 seconds)
[14:57:34] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:02:23] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[15:15:04] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[16:07:37] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:17:57] *** Joins: random-nick (~random-ni@87.116.160.199)
[16:23:43] *** Quits: Jing (~hedgehog@2604:a840:3::1001) (Remote host closed the connection)
[16:24:25] *** Joins: Jing (~hedgehog@125.106.89.1)
[16:59:35] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:04:04] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[17:04:38] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 260 seconds)
[17:06:46] *** Joins: shka (~herr@109.231.0.226)
[17:56:46] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[17:57:50] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[18:17:15] *** Quits: treflip (~user@95.79.32.99) (Remote host closed the connection)
[18:17:31] *** Joins: treflip (~user@95.79.32.99)
[18:21:27] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 268 seconds)
[18:23:30] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[19:01:07] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:05:52] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[19:08:48] *** Quits: Jing (~hedgehog@125.106.89.1) (Read error: Connection reset by peer)
[19:14:43] *** Joins: Jing (~hedgehog@2604:a840:3::1001)
[20:04:53] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:09:39] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[20:19:54] *** Joins: dra (~dra@2a04:4540:641a:a100:cda8:b2a7:6660:1d6b)
[21:22:25] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:28:29] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[21:42:07] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 250 seconds)
[21:42:32] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[21:45:16] *** Joins: Oladon (~olad@98.43.81.226)
[21:58:16] *** Joins: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com)
[21:59:09] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 268 seconds)
[22:02:30] *** Quits: treflip (~user@95.79.32.99) (Quit: good night âœ¨)
[22:21:31] *** Joins: brschkv (~jbrusch@dynamic-095-112-244-206.95.112.pool.telefonica.de)
[22:33:32] *** Joins: tyson2 (~user@cpe9050cac49283-cm9050cac49280.cpe.net.fido.ca)
[23:06:21] *** Quits: tyson2 (~user@cpe9050cac49283-cm9050cac49280.cpe.net.fido.ca) (Ping timeout: 268 seconds)
[23:17:15] <empwilli> hi folks, I'm currently struggling with recursion and passing down a list as an accumulator. I would have thought that a single instance of the list is created and I can pass it down with each function call to append things to it. but apparently it doesn't work
[23:17:16] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[23:17:16] *** Joins: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f)
[23:17:19] <empwilli> see https://pastebin.com/kLqdepZX
[23:17:49] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:18:02] <empwilli> (I would expect that the collected numbers will be returned and it appears to work down the recursive calls but not up the chain)
[23:23:00] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[23:26:51] <rotateq> hm the setf form in line 2 doesn't look quite as it is supposed to really be there ^^
[23:27:29] <empwilli> why so?
[23:27:40] <rotateq> you cons up and give your accumulator as an optional argument (tail-recursion)
[23:28:05] <rotateq> empwilli: cause it's mutating state and i thought you want to do recursion
[23:32:34] <empwilli> recursion doesn't mean no modification of state, does it? i mean I dont' have to program lisp in a purely functional way, do i :) 
[23:32:53] <rotateq> i know that those aren't really orthogonal
[23:32:59] <rotateq> so yes
[23:33:11] <rotateq> and no of course not
[23:33:22] *** Quits: brschkv (~jbrusch@dynamic-095-112-244-206.95.112.pool.telefonica.de) (Ping timeout: 260 seconds)
[23:33:23] <rotateq> when you use loop for accumulation for example
[23:33:37] <rotateq> (loop for counter below 10 collect counter)
[23:34:13] <rotateq> my point is just that you'll learn more when not mixing to much together from the beginning on
[23:34:37] <empwilli> Hm, still, why doesn't it work?
[23:35:30] <rotateq> maybe first take the recursion-test-1 and change its lambda-list to (count &optional (list '()))
[23:37:11] <rotateq> recursion-test isn't defined
[23:37:28] <empwilli> oh, that must have slipped through, thanks
[23:38:07] <rotateq> and it doesn't specify a return value other than NIL :)
[23:39:42] <empwilli> changing it, however, still has the issue. In my mind the recursion-test-1/2 won't need a return value because I return the accumulator in recursion-1/2 or is this not correct
[23:40:17] <empwilli> (coming from other programming languages this would be perfectly fine and from what i understand from lisps internal handling of objects/gc this should work similarly)?
[23:40:29] <rotateq> hmm
[23:41:17] <rotateq> at one step you could call (cons counter (recursion-test-1 (1+ counter) list))
[23:41:51] *** Quits: bremner (~bremner@notmuch/developer/bremner) (Remote host closed the connection)
[23:41:51] <empwilli> this would be then the more functional style
[23:42:01] <rotateq> but okay in the end it would have produced a cons and not a list, but you could hang a NIL at the end
[23:42:24] <empwilli> I mean I'm halfway convinced that I could build it that way now and that there are probably advantages 
[23:42:25] <rotateq> and? your goal should be getting it correct :)
[23:42:44] <empwilli> but now I'm curious why it doesn't work that way
[23:42:45] <rotateq> yes via LOOP for example
[23:43:08] <empwilli> nah, I'm doing some convoluted DFS that's way easier recursive :)
[23:43:44] <rotateq> so, functional and recursion come hand in hand
[23:45:41] <rotateq> even more so with lambda calculus
[23:46:05] <empwilli> again, I understand that this lends to this model; though, this issue brought up that lisp behaves greatly different from what i'm used to and while I probably choose to go the other way round I still wonder what's going on exactly 
[23:46:47] <rotateq> and what are you used to?
[23:47:40] <rotateq> and yes many things and concepts are different with CL
[23:47:59] <empwilli> I'm used to the fact that a globally allocated object that I pass around per reference keeps its state if modified. In my example, curiously, it does so, when traversing down the recursion, but it won't stay modified.
[23:48:26] <rotateq> and what did you use till now?
[23:49:24] <rotateq> when you create it with a function call it isn't globally allocated, till you bind the data to a symbol that references it
[23:50:04] <empwilli> And having a let binding won't hold the scope of all called functions down the line?
[23:50:13] <rotateq> maybe you can profit from how to write some "classical" recursive functions in different ways
[23:50:38] <rotateq> a let expression opens a lexical scope
[23:51:17] <empwilli> and a function call as well?
[23:51:44] <rotateq> you could also use let, let*, flet and friends at the toplevel to scope differently that you don't repeat yourself unnecassarily
[23:52:04] <rotateq> a function call might do something and return a value
[23:53:02] <empwilli> No I mean: Does a function call also open a lexical scope for the parameter names?
[23:53:19] *** Quits: rain3 (~rain3___@79.115.252.154) (Ping timeout: 252 seconds)
[23:53:31] <rotateq> but if it's not binded, it's "gone" (okay, the last three return values are always still bound to *, ** and *** temporarily)
[23:54:17] <rotateq> no, it takes references or direct values like integers or chars
[23:54:34] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[23:54:40] <rotateq> a function always first evaluates all given arguments
[23:54:55] <empwilli> then, still, I don't get why the last setf/push disappears from the list in the first place
[23:58:04] <rotateq> just a question: is PUSH a function?
