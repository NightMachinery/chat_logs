[00:03:09] <hayley> "Also really impressive that you managed to get submatches working, their abscense is one of our biggest gripes with Hyperscan."
[00:03:11] <hayley> "in this times that everything is web development, machine learning and blockchain development, it's very refreshing to see people working on practical examples of compiler problems."
[00:04:16] <shka> hayley: congrats 
[00:04:28] <gilberth> Congrats for the fame. It's mine also as I figured out submatch addressing.
[00:05:18] <gilberth> And that is the key, as we build DFAs and no NFAs as everybody else.
[00:05:36] <gilberth> We never look back. :-)
[00:08:15] <Catie> Congratulations!
[00:10:46] <hayley> Should I try my luck with r/programming?
[00:12:03] <Catie> My instinct is no, but you've already taken it further than I would by posting it to Reddit at all
[00:25:01] <hayley> https://www.reddit.com/r/programming/comments/r5x5im/the_onemorerenightmare_regular_expression_compiler/
[00:25:02] -ixelp- The one-more-re-nightmare regular expression compiler : programming
[00:25:04] * hayley crosses fingers
[00:25:23] <Catie> Welp, good luck
[00:39:08] <selwyn> tasting the first batch of kefir
[00:40:13] <selwyn> first word that comes to mind is 'medicinal'
[00:40:22] <selwyn> https://www.youtube.com/watch?v=Mg5HOnq7zD0
[00:40:22] -ixelp- Dyatlov 3.6 Roentgen Not Great Not Terrible - YouTube
[00:43:38] <gilberth> Do people realize that PCRE's have different semantics from POSIX RE's? It's not about syntactical sugar alone.
[00:45:03] <gilberth> POSIX takes the longest match, PCRE takes the shortest. Roughly speaking, it's more complicate than that.
[00:45:39] <gilberth> This is so as with a backtracking implementation the latter is easier to implement.
[00:46:28] <shka> streaming histograms come up nicely 
[00:46:45] <shka> i think that the most complicated code i still have to write is the merge 
[00:51:18] <selwyn> fizzy consistency is quite nice
[00:54:25] <selwyn> streaming histograms seem useful but can't think of any use i would have for them
[00:57:47] <shka> well, you can distributions without storing all values in the memory 
[01:03:22] <selwyn> my server undergoes periodic spikes in cpu activity that make everything stall
[01:03:42] <selwyn> that seem to be something to deal with the ~10 lisp images i have running on there
[01:03:52] <selwyn> but the lisp images aren't doing anything except waiting for swank connections
[01:26:43] *** Quits: Catie (~user@user/catie) (Remote host closed the connection)
[01:30:39] *** Quits: Inline (~Inline@aftr-37-201-240-100.unity-media.net) (Quit: Leaving)
[01:33:53] *** Joins: Catie (~user@user/catie)
[01:41:11] <gilberth> Oh dear, my mail stopped working with macOS 10.10 perhaps because of SSL certificates. Not funny.
[01:59:33] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 256 seconds)
[02:04:02] <sham1> Getting gnus to work is a pain in the rear, but I've finally managed it
[02:26:45] *** Quits: random-nick (~random-ni@87.116.165.83) (Read error: Connection reset by peer)
[02:27:00] *** Quits: sham1 (~sham1@212-146-44-107.aboa.net) (Ping timeout: 260 seconds)
[02:27:41] <hayley> gilberth: stylewarning also won't shut up <https://twitter.com/stylewarning/status/1465808316550946821>
[02:30:12] <gilberth> hayley: Oh my!
[02:30:32] <Gnuxie> lwl
[02:30:40] <hayley> I don't think it was good timing, since "why didn't they make a PCRE 2" is clearly a joke.
[02:30:56] <hayley> ...because there is a PCRE2.
[02:31:12] <gilberth> There is?
[02:31:17] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (Ping timeout: 256 seconds)
[02:31:31] <hayley> http://www.pcre.org/ Since 2015.
[02:31:32] -ixelp- PCRE - Perl Compatible Regular Expressions
[02:33:51] <gilberth> Ok. But then I never cared about PCRE. Though we could perhaps figure out its semantics, which is not that easy because of the way their alternation works.
[02:36:27] <hayley> Yes, I was just saying that I didn't think fanboying over one-more-re-nightmare was appropriate there.
[02:37:34] *** Joins: sham1 (~sham1@212-146-44-107.aboa.net)
[02:45:30] *** Quits: sham1 (~sham1@212-146-44-107.aboa.net) (Quit: ZNC 1.8.2 - https://znc.in)
[02:49:58] *** Joins: sham1 (~sham1@212-146-44-107.aboa.net)
[02:53:22] <gilberth> I just realized that types are first class in CL. In what other language they are, too?
[02:54:31] <Gnuxie> JavaScript /s 
[02:55:09] <gilberth> Not really. Can I construct new types like with OR, AND, NOT?
[03:00:54] <moon-child> gilberth: raku
[03:01:26] <gilberth> What have they not borrowed from CL?
[03:01:48] <gilberth> Is there also sth like (integer <low> <high>)?
[03:02:02] <moon-child> types as contracts
[03:02:18] <moon-child> subtype of Int where low < * < high
[03:02:41] <moon-child> or, I should say, types as dispatch predicates
[03:02:49] <gilberth> MEMBER?
[03:03:47] <moon-child> subset of Mu where * ∊ ...
[03:04:17] <moon-child> basically everything becomes SATISFIES
[03:04:28] <gilberth> Hmm.
[03:04:49] <hayley> (satisfies eval)
[03:05:42] <gilberth> This includes the halting problem. Nice. May I have an implementation?
[03:06:22] <moon-child> :D
[03:07:13] <moon-child> gilberth: btw, when is PCRE shortest-match?  I thought pcre specifically has x*? which takes shortest match vs x* which is greedy?
[03:16:29] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[03:16:30] <gilberth> moon-child: It boils down to the alternation. PCRE picks the left most match of an alternation, even if it is shorter, POSIX picks the longest.
[03:16:44] * gilberth needed some time to look it up.
[03:17:13] <hayley> gilberth: Arguably, types aren't first class as there are no type objects, just type specifiers.
[03:17:25] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[03:17:32] <moon-child> gilberth: ahh, I see
[03:17:36] <hayley> https://i.redd.it/5c1ufxv3s0q51.jpg
[03:17:44] <gilberth> moon-child: So when you have (a|aa)(a|aa) on "aaa" Posix has \1="aa" \2="a", while PCRE has \1="aa" and \2="a".
[03:18:12] <gilberth> Dammit. PCRE has "a" and "aa" as matches.
[03:18:13] <moon-child> you mean pcre has \1=a \2=aa?
[03:18:15] <moon-child> :)
[03:18:30] * hayley continues to test any submatches that gilberth mentions
[03:19:34] <gilberth> In PCRE (a|aa)(aa|a) and (aa|a)(aa|a) match differently. Not so with POSIX.
[03:19:53] *** Cathrinus is now known as lulu
[03:20:02] *** lulu is now known as Lulu
[03:20:03] <gilberth> So more correct would be to say that PCRE matches the left-most match. POSIX takes the longest.
[03:20:04] <moon-child> and of course raku supports both behaviours
[03:20:10] <moon-child> one with | and one with ||
[03:21:42] <gilberth> PCRE becomes strange with iterations. But then its semantics is just the semantics of that particular implementation.
[03:25:32] <gilberth> As PCRE specifies that r* is ()|r|rr|rrr|rrrr|... which is not how it works with derivatives.
[03:26:41] <gilberth> hayley: Sure, but close enough. In practice it is nice to have TYPEP and especially SUBTYPEP at runtime.
[03:30:03] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (*.net *.split)
[03:30:03] *** Quits: Catie (~user@user/catie) (*.net *.split)
[03:30:03] *** Quits: Alfr (~Alfr@user/alfr) (*.net *.split)
[03:30:03] *** Quits: okflo (~okflo@lisa.diesenbacher.net) (*.net *.split)
[03:30:03] *** Quits: LoopMacro (~LoopMacro@c-24-22-157-127.hsd1.wa.comcast.net) (*.net *.split)
[03:30:03] *** Quits: OlCe (~user@lfbn-nic-1-262-221.w90-116.abo.wanadoo.fr) (*.net *.split)
[03:30:03] *** Quits: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com) (*.net *.split)
[03:30:03] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (*.net *.split)
[03:30:03] *** Quits: sm2n (ae95cb1267@user/sm2n) (*.net *.split)
[03:30:03] *** Quits: aeth (~aeth@user/aeth) (*.net *.split)
[03:30:04] *** Quits: remexre (~remexre@user/remexre) (*.net *.split)
[03:30:13] <gilberth> Actually (a|aa)(a|aa) is an example, where glibc is wrong and the macos libc is correct.
[03:30:23] *** Joins: sm2n (ae95cb1267@user/sm2n)
[03:30:33] *** Joins: okflo (~okflo@lisa.diesenbacher.net)
[03:30:53] <gilberth> I have yet to see a POSIX conforming RE lib besides hayley's or mine.
[03:33:17] *** Joins: remexre (~remexre@user/remexre)
[03:35:22] *** Joins: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com)
[03:39:23] *** Joins: Alfr (~Alfr@user/alfr)
[03:40:52] <selwyn> just realised the purple emacs icon is an e
[03:41:15] <gilberth> What took you so long?
[03:41:25] <selwyn> i am not the most observant
[03:43:39] <gilberth> Could me worse. I needed perhaps two years living in south-west Germany (Baden) to get where "Adele" for "Good bye" comes from.
[03:43:53] <hayley> (ε)
[03:44:00] <pjb> It also draws a stylistic gnu.
[03:44:34] <gilberth> pjb: Indeed. Now this is something I never saw.
[03:46:50] <gilberth> You can say "Ade!" for "Good bye". And -le is a local suffix for a diminutive. I was not accustomed to either, especially not the latter. I just learned "Adele" as just the-funny-way-they-say-good-bye.
[03:47:08] *** Joins: random-nick (~random-ni@87.116.180.220)
[03:47:42] <selwyn> i can't see the gnu
[03:48:12] <gilberth> Have your vision checked. :)
[03:48:43] <semz> it's looking to the left if that helps
[03:48:57] <selwyn> just the head?
[03:49:13] <gilberth> Yep.
[03:49:16] <selwyn> oh right
[03:50:35] <selwyn> watching the conclusion of a 5 hour snooker match
[03:51:47] * gilberth read "smoker" and was wondering.
[03:52:21] <selwyn> well i have been smoking as well today
[03:52:28] <semz> who can finish the pack first?
[03:53:05] <gilberth> I'll be the clear winner! Hands down.
[03:53:16] <selwyn> https://www.youtube.com/watch?v=6X_UopOGZKE
[03:53:17] -ixelp- King of the Hill – Keeping Up With Our Joneses clip2 - YouTube
[03:53:50] <gilberth> selwyn: Didn't you want to quit? Or do I misremember?
[03:53:57] <selwyn> uh
[03:54:15] <selwyn> yeah :)
[03:54:28] <gilberth> Yeah what?
[03:55:14] <selwyn> i guess i do want to eventually not smoke
[03:56:19] <gilberth> Longest time I didn't smoke was in hospital last year. Three days on intensive care and another three just too weak. I won't recommend that.
[03:57:46] <selwyn> i haven't had a drink in 2 months
[03:58:32] <gilberth> I haven't had one in eleven month.
[03:59:39] <selwyn> how does it feel?
[04:01:01] <gilberth> Not particular different. But them I am not living alone here, which is my life saver.
[04:01:12] *** Joins: OlCe (~user@lfbn-nic-1-262-221.w90-116.abo.wanadoo.fr)
[04:02:01] <gilberth> It'll be strange though would I hit pubs and bars again.
[04:06:01] <selwyn> right
[04:06:08] <selwyn> well, goodnight
[04:06:44] <gilberth> Take care!
[04:13:34] *** Joins: lisp123 (~lisp123@5.30.23.247)
[04:17:22] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[04:17:47] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[04:42:19] *** Joins: LoopMacro (~LoopMacro@c-24-22-157-127.hsd1.wa.comcast.net)
[04:43:26] <gilberth> The one million dollar question: What is the value of the 'foo' MIME type parameter in data:text/example;foo=%22bar%22,*baz* Hint: (code-char #x22) is #\".
[04:45:06] <gilberth> The ten million dollar question: What the hell did they smoke?
[04:46:04] * gilberth wants one single syntax everywhere for a nicer world.
[04:48:09] <gilberth> This is like in medieval times at which every village used its own units.
[05:03:59] *** Quits: random-nick (~random-ni@87.116.180.220) (Ping timeout: 252 seconds)
[05:11:20] * hayley uploaded an image: (40KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/xLFmThHcyJuuqNCSTWTFPxUS/Screenshot%20from%202021-12-01%2012-41-09.png >
[05:11:38] <hayley> Top 10 pictures taken moments after disaster
[05:13:13] <moon-child> https://twitter.com/HenryKSloan/status/1464652050260758533  what is RETURN-FROM
[05:24:09] <gilberth> BLOCK/RETURN-FROM as lexical scope. And why isn't just a goto used? Ah, it would have lexical scope. Wait a second, the author wanted lexical scope, right? Failed. Next.
[05:36:48] <hayley> gilberth: Planning to publish yet?
[05:38:12] * hayley uploaded an image: (10KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/RNLOWGkaEDPKGtAATTugGEcv/Screenshot_2021-12-01_13-16-06.png >
[05:38:19] <hayley> I got the funny number twice
[05:41:40] * hayley upvotes self on Hacker News
[05:41:40] <hayley> https://news.ycombinator.com/item?id=29397799
[05:41:41] -ixelp- The one-more-re-nightmare compiler | Hacker News
[06:24:01] <kakuhen> so i finally learned what was meant in #commonlisp moooonths ago when someone said os x now stores all libraries into a single file
[06:24:05] <kakuhen> it sounded too gross to be true but alas it is
[06:24:16] <kakuhen> one more reason to not upgrade and look forward to a linux desktop when my macbook dies i guess
[06:25:01] <kakuhen> i learned about it the hard way when i learned that a lot of the method and isa swizzling stuff you can do in objective-c does not work on big sur and later versions due to the dyld shared cache 
[06:28:46] *** Joins: lisp123 (~lisp123@5.30.23.247)
[06:29:19] <gilberth> kakuhen: Yes, it gets worse all the time.
[06:29:35] <kakuhen> i suppose it's a nice way to speed up performance when your software uses a million dylibs
[06:29:44] <kakuhen> but it also breaks other things in mysterious ways
[06:29:55] <kakuhen> e.g. suddenly your libraries in /usr/lib are all tiny stubs 
[06:30:20] <kakuhen> and running them through a tool like class-dump will simply make class-dump think the libraries are corrupted or something else is wrong
[06:30:22] <gilberth> Would it really speed things up?
[06:30:26] <kakuhen> well that's the claim
[06:30:40] <kakuhen> they say so in the man page for update_dyld_shared_cache
[06:30:48] <kakuhen> >When loading [an executable file], dyld will first check if is in the share cache, and if it is will use that pre-bound version instead of opening, mapping, and binding the original file. This results in significant performance improvements to launch time.
[06:31:25] <gilberth> Yes, and a cache warrants to hide the actually libraries?
[06:31:50] <kakuhen> probably not
[06:33:10] <gilberth> Nah, there are people at work who don't care at all about hackers.
[06:33:27] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[06:34:38] <gilberth> Good bye, Apple. It was a nice time with you while it lasted, but we drifted apart.
[06:35:20] <gilberth> I'll miss Cocoa though.
[06:35:36] <kakuhen> i will as well, even though i haven't used a ton of it
[06:35:54] <kakuhen> every time i try to use GTK or Qt i end up realizing why i dont bother with either of the two hehe
[06:36:32] <kakuhen> well, QML is actually very nice, but then you have to link against a dozen different Qt libraries and on OS X your discrete gpu will be activated no matter what, unless you pmset it to be always off
[06:36:51] <hayley> https://www.youtube.com/watch?v=ns-fw7a16Gw
[06:36:52] -ixelp- jean-jacques burnel - Freddie Laker - YouTube
[06:37:07] <gilberth> Gnustep to the rescue? Never looked at it.
[06:37:26] <kakuhen> I've looked at GNUstep for a while, and it's actually mostly compatible with you'd use in Foundation already
[06:37:43] <kakuhen> Just pretend NSTouchbar and other classes do not exist and GNUstep and Apple's Foundation libraries are mostly the same
[06:38:01] <moon-child> also cocotron
[06:38:33] <kakuhen> The only issue is that nobody wants to use Objective-C (outside of Apple devs I guess) and GNUstep is not exactly maintained. It also does not attempt to look native to your desktop environment, so unless you live in WindowMaker all day, it will not look so pretty
[06:38:56] <gilberth> Hmm, I don't use much of the widgets^Wview classes with Free-CLIM, so I could see if a GNUStep port would be easy.
[06:38:57] <kakuhen> I know that GNUstep has an experimental "Renaissance" thing, where you can have a software that runs on both OS X and Linux, and the UI adapts to the operating system
[06:39:34] <moon-child> if you already have an x version, how useful is that?
[06:39:36] <gilberth> Well, define "native" with X11.
[06:39:37] <kakuhen> It was used for the GNUMail software to demonstrate it's possible to have a full-fledged program with a single codebase for OS X and Linux
[06:40:29] <pl> the reneissance thing papered over some differences that crept up in Cocoa over time, iirc
[06:41:03] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[06:41:06] <pl> carefully husbanded GNUstep could be used to compile Cococa GUIs on X11 even without it, but it removed some of the manual work involved
[06:41:24] <gilberth> Oh, yes. Mail.app I will miss too. But then it stopped working for me anyway. Must be SSL certificates expired or sth.
[06:41:36] <moon-child> alpine :3
[06:41:47] <kakuhen> gilberth: well, by "native" I mean the widgets on OS X will change to the actual Aqua ones
[06:41:52] <kakuhen> as for X11, yeah, anything goes I guess
[06:42:43] <kakuhen> the lines get very blurry since e.g. Qt would be considered the "native" UI on a desktop running KDE
[06:43:01] <kakuhen> i.e. there's nothing for Qt to "imitate" on such a platform, unlike say Windows or Mac
[06:43:19] <gilberth> Well, for X11 I consider using GTK. I personally will perhaps use the generic gadgets I have written in Lisp. I consider a native [what the user are used to] look important.
[06:43:27] <pl> kakuhen: that's because it linked native Cocoa widgets
[06:43:32] <pl> not GNUstep implementation of them
[06:44:17] <kakuhen> yeah i figured something like that was going on
[06:44:38] <kakuhen> WxWidgets tries doing a similar thing I think?
[06:44:54] <pl> WxWidget tries to implement itself using local widgets
[06:45:06] <pl> when you compile GNUstep application on Mac, you don't use GNUstep at all
[06:45:13] <kakuhen> oh ok I see the difference now
[06:45:35] <pl> because GNUstep and Cocoa APIs have common roots
[06:45:51] <kakuhen> yeah I know WxWidgets tried to use the platform's own widgets to construct the UI, then Renaissance was supposed to be able to compile with either GNUstep or Cocoa
[06:45:58] <kakuhen> or something like that
[06:46:13] <pl> Reneissance afaik simply papered over differences that crept in between last old AppKit and Cocoa one
[06:48:41] *** Joins: Catie (~user@user/catie)
[06:49:45] *** Quits: Catie (~user@user/catie) (Client Quit)
[06:50:11] *** Joins: Catie (~user@user/catie)
[06:50:59] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[06:51:06] <kakuhen> hayley: i decided to look at what ppl on HN are raving over
[06:51:42] <kakuhen> one of the top articles is "yet another git front-end that is inferior to magit, but hey at least you don't have to envy or use Emacs now ;)"
[06:52:49] <dave0> maw
[06:53:38] <pl> lol
[06:53:40] <pl> lazygit?
[06:54:41] <kakuhen> yeah
[06:54:50] <kakuhen> i decided to look at the demo on the github page and im not really impressed
[06:55:39] <kakuhen> my first impression was "somehow clunkier than both magit and xcode's own git interface, yet stuck in the middle of both as far as potency goes"
[06:56:11] <gilberth> May I have a script called "cvs", which feels like cvs, but uses git. I still have trouble getting around git.
[06:56:11] <kakuhen> but hey now i dont have to envy emacs users for magit; i can happily cope with [vim fork here]
[06:56:50] <kakuhen> i have really strong opinions tonight
[06:58:50] <hayley> gilberth: I think I have a Moore machine, as effects could be the same for each transition with my affine tags. But I can do a liveness test per transition for a Mealy machine.
[06:59:33] <hayley> Moore has output, but per state apparently.
[07:01:14] <gilberth> Really? Oops, perhaps so.
[07:01:28] <hayley> https://skanthak.homepage.t-online.de/gcc.html
[07:01:28] -ixelp- Deficiencies in GCC’s Code Generator and Optimiser
[07:01:59] <hayley> I don't do "tags in Q not in Q'", I just do all tags in Q that are accessible by walking the RE without traversing a literal.
[07:02:08] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:02:17] <hayley> Still, Mealy lets you do a local liveness test and eliminate some registers.
[07:07:56] <gilberth> Wait a second. Is 'p' considered a part of the state?
[07:09:56] <hayley> I use the old p for assignments, so I guess so.
[07:18:15] <hayley> But neither is just a "normal" DFA, so it doesn't really matter.
[07:27:05] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Remote host closed the connection)
[07:28:19] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[07:30:56] * hayley decides the bedroom with computer on is unconducive to work because it's 32° today.
[07:31:46] <gilberth> Fahrenheit? That's pretty cold. Compile more Rust to heat the room!
[07:34:40] <hayley> Celsius actually.
[07:39:45] <kakuhen> mine bitcoins in the room
[07:40:02] <kakuhen> it's more worthwhile than compiling crab code
[07:41:09] <gilberth> Has hayley not stated it's Celsius?
[07:45:28] <kakuhen> hayley: do you know anything about autovectorization in sbcl, or cl compilers in general
[07:45:35] <kakuhen> i'm wondering whether it exists and how "good" it is
[07:45:38] <hayley> Non-existent.
[07:45:40] <kakuhen> aw
[07:45:53] <kakuhen> since we have let and let* i assumed there may have been something like it happening 
[07:46:05] <hayley> SB-SIMD has a vectorisation macro, but it's kinda meh.
[07:47:23] <kakuhen> as long as it is clever enough to vectorize a series of independent additions, it may be good enough for me
[07:48:01] <hayley> It might, I haven't tested it much.
[07:48:26] <hayley> All the SIMD stuff that I do is rarely auto-vectorisable, and usually requires diagrams.
[07:48:31] <kakuhen> by "independent addition," I mean that I have a lexical environment where I am defining a_1, a_2, ... where the a_i are not defined in terms of each other
[07:48:44] <hayley> "SIMD isn't hard!" "Have you written anything more than a parallel sum?"
[07:48:48] <kakuhen> w
[07:49:25] <hayley> Not an attack on you, just that someone told me SIMD was easy.
[07:49:33] <kakuhen> I understood, dw
[07:49:49] <kakuhen> im asking about autovectorization precisely because i want the compiler to be able to use SIMD for me, even in the simplest cases
[07:49:53] <kakuhen> I don't know a lick of assembler
[07:50:38] <hayley> I thought about implementing autovectorisation for SICL if I could pick a fun end-of-degree project, but heisig basically did that, so instead I might do a concurrent compacting GC. Who knows.
[07:51:05] <hayley> https://www.youtube.com/watch?v=bu7QB-F-HMc
[07:51:06] -ixelp- King Crimson - I Talk To The Wind (Duo Version) [Bonus Track] - YouTube
[07:58:04] <dave0> is branch-free code better? everyone seems to want everything branch-free
[07:58:38] <hayley> Depends.
[07:59:29] <dave0> hayley: i'm reading your gcc deficiencies web link
[08:01:37] * hayley wishes she had as much writing success with The Poverty of Post-Open Source, but remembers that one is describing a new compiler, and one is telling everyone to participate in anti-organisational anti-work egoist telekommunism. One is less morally reprehensible than the other.
[08:02:11] *** Quits: semz (~none@user/semz) (Ping timeout: 252 seconds)
[08:04:02] <hayley> https://www.youtube.com/watch?v=rfyhJU2WLxg
[08:04:02] -ixelp- Exploiting Rendering Mechanics in Desmos - YouTube
[08:04:16] *** Joins: semz (~none@user/semz)
[08:06:09] <gilberth> ok. Any recommendations for a mail reader? It should do IMAP properly and be completely hassle-free for reading HTML mail.
[08:06:23] * hayley uses Thunderbird
[08:06:51] <gilberth> .oO(Hmm, when she uses it, it can't be too bad).
[08:07:36] <kakuhen> i use mu4e
[08:08:01] <kakuhen> it doesn't work for html in general if it needs 10 mb of javascript to appear properly
[08:08:06] <kakuhen> but otherwise it's good enough for me
[08:08:17] <kakuhen> thunderbird is your next best bet
[08:08:28] <gilberth> Well, I tried several mail clients some 10 years ago and none was better than Emacs until I had Mail.app. Most had issues with IMAP. That is, moving mail was not moving, but downloading, uploading and deleting.
[08:09:38] <gilberth> kakuken: Light HTML w/o JS is fine. I just happen to have business-like contacts that at times like to send HTML mail. And I deal with a lot of PDF attached.
[08:11:14] <gilberth> But while I am at it, it's time to setup my own IMAP server again, I don't like keeping the mail on my hoster's server.
[08:13:18] <hayley> What, I can't use bad software?
[08:13:49] <gilberth> You can?
[08:14:47] <hayley> "Hmm, when she uses it, it can't be too bad"
[08:15:31] <gilberth> Yep, and I asked you whether my assumption is false.
[08:35:35] <hayley> As per Melbourne weather, it is now raining a lot. And I am stuck at the supermarket.
[08:35:56] * hayley considers setting up office
[08:36:44] <gilberth> You're stuck? At least there should be a/c.
[08:36:54] <hayley> Yes.
[08:37:36] <hayley> "Wait, it'll blow over."
[08:38:05] <gilberth> https://www.youtube.com/watch?v=Fe-S8cgCmQI
[08:38:05] -ixelp- Married with Children S05E21 You Better Shop Around - YouTube
[08:38:26] * hayley now knows what it's like to be SBCL, being stuck without (code) motion
[08:38:40] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[08:38:42] * hayley continually complains now that she knows the words "global code motion"
[08:39:00] <gilberth> What is there to complain?
[08:39:59] <dave0> i like common sub-expression elimination
[08:41:41] <hayley> For example, some SB-SIMD stuff, notably unsigned comparisons needs to produce temporary vectors which are all the same. But SBCL cannot hoist that out of a loop.
[08:42:05] <gilberth> dave0: Then you could perhaps extend SBCL to support it.
[08:42:06] <hayley> It's very possible, as those vectors don't depend on anything.
[08:42:25] <gilberth> Can GCC do that?
[08:42:31] <dave0> gilberth: not likely!
[08:42:56] <dave0> i could never code a compiler :-(
[08:43:13] <hayley> lol no sea of nodes
[08:43:45] <hayley> AST to sea of nodes when
[08:43:52] <gilberth> dave0: I don't believe that. It's easy.
[08:47:21] * hayley will get bailed out in five minutes apparently.
[08:47:40] <hayley> Or I can make a run for it, which is a terrible idea, but I'm bored.
[08:47:55] <gilberth> Have fun.
[08:48:39] <gilberth> Or are you made from sugar?
[08:51:03] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[08:51:31] <hayley> Not really.
[08:51:34] <hayley> That is my brother.
[08:55:15] <moon-child> gilberth: well, making _a_ compiler is easy.  Making a good one, not so much
[08:56:23] <gilberth> I'd say it's just tedious for the most part. And finding a working heuristic.
[08:57:22] <moon-child> fair enough
[08:58:03] <gilberth> I compare it to automatic theorem proving at times.
[08:58:40] <gilberth> I always had the idea that you could apply machine learning to it, but I am an ML noob.
[08:59:19] <moon-child> ml for pruning.  Probably
[08:59:58] <gilberth> Yep, to have a better guess which transformations will actually get you somewhere.
[09:00:11] <hayley> Das Unterseeboot IR
[09:00:42] <gilberth> ?
[09:01:32] <moon-child> topically, there was some recent work to use ml for auto-vectorization
[09:03:33] *** Quits: Catie (~user@user/catie) (Quit: rcirc on GNU Emacs 29.0.50)
[09:12:22] <hayley> Well, it can't just be another sea of nodes. Come on.
[09:15:36] <hayley> And beach doesn't like \phi nodes so it isn't really a SoN anyway.
[09:23:23] <hayley> I'm supposed to have region nodes apparently for phony basic blocks according to <https://courses.cs.washington.edu/courses/cse501/04wi/papers/click-pldi95.pdf>, but I don't have any. 
[09:28:43] <hayley> https://oxide.computer/blog/hubris-and-humility "And yes, even in memory safe languages like Rust, memory protection is essential!" LMAO
[09:28:45] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[09:30:13] <moon-child> the 'like Rust' is doing a _lot_ of heavy lifting there
[09:30:51] <hayley> David Moon moment
[09:31:40] <hayley> https://www.reddit.com/r/LispMemes/comments/najrjz/imagine_having_a_memory_safe_language_but_still/
[09:31:41] -ixelp- imagine having a "memory safe" language but still using process isolation instead of language-based isolation in an OS : [...]
[09:32:21] <kakuhen> is there something in common lisp that's like a hybrid of dolist and dotimes
[09:32:31] <kakuhen> kind of like "for (i, value) in enumerate(sequence)" in python
[09:32:38] <hayley> You could do (loop for x in xs for n from 0 ...) 
[09:32:41] <kakuhen> I can do this in a very ugly way myself, but I'm wondering if there's some random macro i dont know about
[09:32:54] <kakuhen> hmm I guess that could work
[09:33:47] <hayley> Or have dolist but increment a counter at the end of the loop.
[09:35:01] <kakuhen> yeah that was my "ugly" way of doing it
[09:35:10] <hayley> The sequel!
[09:35:11] * hayley uploaded an image: (151KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/wjzERcuaEGIuYRZfdMqXDTne/corl9hctgny61.jpeg >
[09:35:24] <moon-child> custom LOOP clauses when
[09:35:43] <hayley> But FOR X IN XS FOR N FROM 0 works fine.
[09:40:29] <hayley> https://www.reddit.com/r/LispMemes/comments/r6819s/more_shitposts_about_memory_protection_and_food/
[09:40:30] -ixelp- more shitposts about memory protection and food : LispMemes
[09:40:53] <hayley> This meme was made by object capability gang
[09:40:58] <hayley> This meme was made by Lisp machine gang
[09:41:14] <gilberth> moon-child: Interlisp allows you to extend LOOP with custom clauses.
[09:41:36] <hayley> This meme was made by B32 gang (there is no memory management unit)
[09:42:02] <gilberth> I don't need one.
[09:42:36] <hayley> This meme was made by Smalltalk gang
[09:43:07] <gilberth> Though some virtual memory would be nice.
[09:43:32] <hayley> .oO(Does Gilad Bracha stalk my Twitter account? He said nice things about Netfarm so this would probably burn bridges.)
[09:44:11] <gilberth> Do I need to know that guy?
[09:44:58] <hayley> He has some things to say about security and handling dependencies I guess.
[09:45:24] <gilberth> What kind of dependencies?
[09:45:34] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:45:59] <moon-child> gilberth: code written by other people--bad stuff
[09:46:00] <hayley> Any ole modules, just dependency management in general.
[09:46:42] <gilberth> moon-child: ?
[09:47:45] <hayley> An over approximation would be that every module gets its own global environment, but there isn't actually a global environment; there's just module state and an immutable "platform" from which you pull other modules from.
[09:50:14] <gilberth> ok
[09:51:27] <hayley> Also, he wrote about an idea of "orthogonal synchronisation" which happened independently of my work on Netfarm. 
[09:54:54] <hayley> Unix brain rot has set in already, clearly.
[09:56:54] <gilberth> Well, it doesn't work anymore. These days isolation just between users is not enough.
[09:57:21] <hayley> Apparently they need isolation between tasks, kernel and drivers. In safe Rust.
[09:57:43] <hayley> Can't we at least have Singularity, where MS at least did cool type system stuff, if we're gonna be type system weenies too?
[09:58:10] <gilberth> Address space separation? Why? Isn't the language supposed to be safe?
[09:58:20] <hayley> Seems not.
[09:58:36] <gilberth> Well, CL isn't safe either.
[09:59:58] <hayley> I'd just make it safe.
[10:00:22] <moon-child> (proclaim (optimize (safety 3)))
[10:03:23] <hayley> sb-c:something-to-do-with-compiler-policy
[10:04:18] <hayley> (sb-ext:restrict-compiler-policy 'safety 1 3)
[10:07:20] <hayley> gilberth: Still, what does a suffix "scnr" mean?
[10:07:55] <White_Flame> "sorry, could not resist"?
[10:08:24] <hayley> Thanks
[10:09:12] <hayley> gilberth: Still, having exit maps which sometimes have assignments makes me think Moore machine.
[10:09:31] <hayley> Or maybe the exit map is just the transition to a failure state which I never actually make.
[10:19:31] <hayley> "enhancement: on x86-64 and ppc64 platforms, the system uses inline instructions rather than page protection to implement a store barrier for the garbage collector."
[10:20:07] * hayley waits for read barrier
[10:23:24] <hayley> "My tests show noticeable bottom-line speedup of 2 or 3%. GC time is generally down (by as much as 15%), and all the extra work in user mode has ample margin given the reduced system time."
[10:26:40] * hayley plays spot the write barrier
[10:27:15] <hayley> https://plaster.tymoon.eu/view/2739#2739
[10:29:25] <hayley> So...LEA through AND compute the card number, and then MOV BYTE PTR [R12, RAX], 0 performs the card mark? 
[10:31:35] <hayley> ";;; The encoding anomaly for r12 makes it a perfect choice for the card table base. It will never be used with a constant displacement."
[10:32:29] <moon-child> r12 is the rbp analogue?
[10:32:56] * hayley has to check tables.
[10:33:31] <hayley> Looks like RSP.
[10:34:37] <hayley> https://wiki.osdev.org/X86-64_Instruction_Encoding#32.2F64-bit_addressing
[10:36:30] <moon-child> wait, WHAT
[10:36:35] <moon-child> on plaster.tymoon.eu
[10:36:47] <moon-child> if you make multiple selections (with control-click), and then press an arrow key
[10:36:51] <moon-child> you get multiple cursors
[10:37:46] <hayley> Weird.
[11:21:10] <amazigh> see you soon lispers!
[11:21:12] *** Parts: amazigh (~amirouche@user/amirouche) (WeeChat 2.8)
[11:25:59] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[11:36:06] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[12:01:00] <hayley> "Both Baker and White assumed special pointer forwarding hardware support for their algorithms" bruh they did _not_ - there's a read barrier, but no one ever said it had to be done in hardware.
[12:04:52] <hayley> I wonder if anyone's done a really really regional GC where you pick a region at random, and just mark/sweep/compact/whatever that region. You'd have the G1 problem of O(n^2) card tables though.
[12:08:39] <hayley> https://news.ycombinator.com/item?id=29401359 Hacker News again???
[12:08:40] -ixelp- The one-more-re-nightmare compiler – A fast regex compiler in Common Lisp | Hacker News
[12:09:36] <hayley> "This is a good example of why I roll my eyes at most programming language discussions. There is always someone that starts the "language X is SLOW" bandwagon, and people hop on. Languages are rarely "slow" or "fast" by themselves. Programs written in those languages can be slow or fast."
[12:28:18] <shka> python is slow
[12:28:28] <shka> but it is because python interpreter is slow
[12:28:37] <shka> but python interpreter is written in C
[12:28:41] <shka> so C is slow
[12:28:45] <shka> LOGIC
[12:28:55] <moon-child> all programs are written in assembly
[12:34:15] <hayley> shka: lol
[12:34:38] <shka> moon-child: assembly is slow as well!
[12:42:13] <selwyn> damn it made number 11 on the front page
[12:44:10] <hayley> I don't remember what wasm2ps got, but loke was behind that one too.
[12:46:17] <selwyn> its a nice article
[12:48:32] <hayley> Thanks!
[12:48:38] <hayley> Unrelated: "You can write Unix in any language"
[12:48:49] * hayley wants this statement framed.
[12:51:43] <hayley> I tried to shed some light on a few different topics (implementing derivatives, Mealy machines, SIMD, matching strategies) without being too vague and without being too imbalanced; did it come off that way?
[12:52:30] <selwyn> i don't think it was unbalanced
[12:53:05] <pl> I think there was at least one or two unices not written in C with libc not being "OS' standard library interface" 
[12:53:28] <selwyn> i don't know enough about the details so i skimmed those sections
[12:53:38] <selwyn> but i could still understand what you were doing and why you were doing it
[12:53:46] <selwyn> which is the mark of a good technical article imo
[12:53:54] <hayley> Right.
[12:54:38] <moon-child> pl: right; the core of unix is the shell
[12:54:47] <moon-child> c as an implementation language is _somewhat_ incidental
[12:54:53] <moon-child> as long as it supports the core fd and process abstractions
[12:55:03] * hayley stares in Multics
[12:55:30] <kakuhen> "You can write Unix in any language," but you shouldn't :^)
[12:55:51] <kakuhen> during my journey through various corners of the internet, i've seen people label all sorts of things botnets
[12:55:51] <pl> moon-child: there's also the aspect that C stdlib is essentially derivative of Unix libs, not the other way around... Originally 
[12:55:53] <hayley> But people have brain rot and do.
[12:55:56] <kakuhen> but the REAL botnet all this time was UNIX
[12:56:45] <hayley> Given that C encourages you to program in a rubbish style, which leads to all the botnets...
[12:56:48] <hayley> ...it checks out.
[12:57:36] <kakuhen> "hey ken, can we have macros?"
[12:57:40] <kakuhen> "we already have macros"
[12:57:46] <kakuhen> >macros are just text substitutions
[12:58:07] <moon-child> or the more fanciful: meme=virus and unix is a successful one (see 'worse is better' aka 'how to win big')
[12:58:09] <pl> Well, at the time, it was huge improvement over FORTRAN IV
[12:58:21] <moon-child> kakuhen: that's mcilroy, not thompson, I believe
[12:58:25] <kakuhen> oops
[12:58:29] <kakuhen> ok replace ken with doug
[12:59:11] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 252 seconds)
[13:00:12] <hayley> https://www.youtube.com/watch?v=QTiAWZ1YfzI
[13:00:12] -ixelp- THEY HAVE PLAYED US PROGRAMMERS FOR ABSOLUTE FOOLS - YouTube
[13:01:48] <moon-child> finally switched my terminal font to cm, the curly quotes are so pretty.  I feel like I’m being shamed for being lazy and using the straight ones
[13:04:56] *** Joins: treflip (~user@95.79.32.99)
[13:13:58] <shka> unix could be written in pascal just fine
[13:14:05] <ck_> do you look at them through a display, or are you using a 10k DPI line printer like the true connoisseur?
[13:14:07] <shka> and i am pretty sure that it was :P
[13:16:12] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[13:16:39] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[13:32:33] <hayley> https://news.ycombinator.com/item?id=29402172
[13:32:34] -ixelp- As this is a regex->DFA implementation I wonder how it compares to Google RE2 [1... | Hacker News
[13:32:42] * hayley in trouble for not checking with every RE engine under the sun
[13:33:13] <hayley> https://github.com/telekons/one-more-re-nightmare/issues/9 Won't work, we don't do PCRE semantics.
[13:33:14] -ixelp- CL-PPCRE compatible functions · Issue #9 · telekons/one-more-re-nightmare · GitHub
[13:35:59] * hayley puts https://www.youtube.com/watch?v=Ypgq0qdgVZA on jukebox
[13:36:40] <selwyn> sigh
[13:37:31] <ck_> please show on the rubber duck where the world hurt you
[13:37:39] <hayley> And since I can't do backreferences, and lookahead/behind is still a research problem, I couldn't be plug compatible, even if I wanted to!
[13:42:03] <hayley> So much for the "rule" that being more than 10x faster meant clients didn't care about compatibility.
[13:53:57] *** Quits: treflip (~user@95.79.32.99) (Remote host closed the connection)
[13:55:46] <hayley> https://news.ycombinator.com/item?id=29402411
[13:55:47] -ixelp- What about derivative-based regex? I got worried at some point that some of the ... | Hacker News
[13:55:49] <hayley> "I got worried at some point that some of the purported advantages of derivative-based regexes might be drawbacks. One such advantage/drawback is that it adds the complement operation into the language of Regex. But that gives you a way of deciding whether two regexes are equivalent, which is supposed to be PSPACE-COMPLETE, which ought to severely hamper finding an efficient implementation."
[13:56:28] <hayley> gilberth: The best way is still to build the damn DFA, right? I don't think any logical operators help with testing equivalence.
[13:56:43] *** Joins: rogersm (~rogersm@90.166.177.48)
[13:57:51] <hayley> Well, one builds the DFA for (A XOR B) and asserts that it never accepts, but that is nothing new.
[13:58:30] *** Joins: treflip (~user@95.79.32.99)
[14:09:54] <pjb> shka: unix has been written in pascal. it was the OS named "sol". 
[14:09:54] <pjb> "Pascal Sol was designed around 1983 by a French team to implement a Unix-like system named Sol. It was standard Pascal level-1 (with parameterized array bounds) but the definition allowed alternative keywords and predefined identifiers in French and the language included a few extensions to ease system programming (e.g. an equivalent to lseek). The Sol team later on moved to the ChorusOS project to design a distributed operating
[14:09:54] <pjb> system."
[14:09:55] <pjb> Michel Gien, "The SOL Operating System", in Usenix Summer '83 Conference, Toronto, ON, (July 1983), pp. 75-78
[14:10:24] <shka> pjb: here you go
[14:10:57] <shka> also, the original mac os was mostly pascal 
[14:11:11] <pjb> The toolbox. the OS properly was written in assembler.
[14:11:46] <pjb> And for example, quickdraw was developped and debugged in pascal, and then hand-rewritten in assembler.
[14:12:14] <hayley> Is my answer to that question okay?
[14:12:38] <hayley> I think being able to construct an equivalence function over regexen with negation is completely irrelevant. 
[14:12:45] <shka> hayley: i am personally unfit to answer, sorry
[14:13:36] <pjb> hayley: it can be useful.
[14:14:00] <hayley> It can be useful, yes, but it has nothing to do with the performance of the regex engine.
[14:14:24] <pjb> Indeed.
[14:14:35] * semz thought he found a bug in SBCL-2.1.11, but it just seems to be breakage caused by nibbles messing around with SBCL internals to remove bounds checks
[14:15:04] <semz> starting to think about getting rid of the dependency, stuff like https://github.com/sharplispers/nibbles/commit/8111b881179fe6d4c8fb9b314c2055cc15d78260 doesn't really inspire confidence :/
[14:15:04] -ixelp- SBCL VOP fixes to work with recent SBCL changes · sharplispers/nibbles@8111b88 · GitHub
[14:15:32] <hayley> "- And it's going to break again very soon, maybe even by next week." lol
[14:17:53] * hayley is #5 on r/programming
[14:20:15] <selwyn> what will you do with your newfound reddit fame?
[14:20:39] <hayley> Drugs?
[14:20:54] <hayley> I might pad out a resume with it.
[14:21:36] <hayley> "Wrote regex engine that outhyperscans Hyperscan, invented affine tagged REs, got on Hacker News a few times" 
[14:21:54] * moon-child wonders which of hn and reddit is worse
[14:22:13] <hayley> Reddit has r/programmingcirclejerk at least.
[14:22:19] <hayley> It also has r/lispmemes (same thing).
[14:25:25] <hayley> moon-child: Look, point-free Lisp I guess: (mapcar #'reduce '#1=(+ . #1#) '((1 2 3) (4 5 6)))
[14:26:13] <moon-child> ._.
[14:26:31] <hayley> IIRC lambda.txt mentions this, even.
[14:27:55] <hayley> A constant or periodic series of arguments can be given to a mapped function in LISP by supplying a circular list to MAPCAR. For example: ((LAMBDA (C3) (RPLACD C3 C3) (MAPCAR 'CONS C3 THE-LIST)) (LIST 3)) conses a 3 onto every element of THE-LIST. Another way to use this hack is to use MAP, which allows the mapped function to splice new things into the circular list on the fly.
[14:27:58] <gilberth> Regular expressions are ways to express regular languages. Operations like complement and intersection were there right in the beginning. [A language is a set.] The fact that they didn't figure it out how to implement it, doesn't make negation any more unnatural.
[14:28:00] <pjb> hayley: that said, it's not conforming to use circular lists there.
[14:28:31] <hayley> Damn!
[14:28:35] <gilberth> And, without submatch addressing, I could figure out if two REs are the same language. No need for negation here.
[14:29:11] <hayley> I guess you can keep rewriting, but what's the complexity of rewriting?
[14:29:13] <gilberth> Just compute the minimal DFA of both REs and compare them. Done.
[14:29:28] <hayley> Oh, fair.
[14:30:15] <gilberth> This is first year CS.
[14:30:38] <hayley> Sorry, I only went through first year CS twice.
[14:33:51] <gilberth> And: Negation adds to the expressive power. Say you want to match a C comment. You can say (my S-expression syntax): (and "/*" (- (* t) (and (* t) "*/" (* t)) "*/*"). That is "/*" followed by (* t), which is anything, but not sth containing "*/". Try to do that without difference.
[14:34:31] <gilberth>  "*/" instead of "*/*" of course.
[14:34:43] * hayley hassles a lot over a stupid question.
[14:34:55] <hayley> Same for someone asking for CL-PPCRE functions. Won't work.
[14:34:57] <gilberth> I still have no traditional syntax for difference.
[14:35:27] <hayley> a&`b
[14:35:35] <gilberth> Yes, milady, they are not aware that POSIX has different semantics from PCRE.
[14:35:49] <hayley> Syntax too, I guess?
[14:35:53] <hayley> Not that I do POSIX syntax yet.
[14:36:14] <gilberth> hayley: I was about to use {-}. Like a{-}b
[14:37:13] <gilberth> hayley: The PCRE syntax is a superset of the POSIX syntax. But don't nail me on so called enhanced REs.
[14:38:37] <hayley> *scans at 11GB/s* "Surely negation would hamper finding an efficient implementation."
[14:38:52] <gilberth> Hence it's not about syntax. It's about semantics. And for a scanner PCRE wouldn't work well, so I have not bothered.
[14:39:26] <gilberth> lol. Negation comes at no cost. That's the beauty.
[14:40:54] <gilberth> They should read Brzozowski. Published in 1964.
[14:42:29] <gilberth> hayley: Have fun with your comments!
[14:42:35] <hayley> Sure.
[14:43:35] <hayley> Having a superset of POSIX syntax is also bad too, since unknown syntax will either fail to parse or produce something bogus.
[14:44:50] <gilberth> PCRE was clever and made their extensions so that it would be invalid POSIX syntax. Like the famous (?:...), which I also have.
[14:45:09] <hayley> Oh, okay.
[14:45:16] <hayley> Still, not plug compatible obviously.
[14:45:36] <gilberth> Can't be anyway because of semantics, that's my point.
[14:46:02] <gilberth> hayley: Hey! Good reply to that negation comment.
[14:46:07] <selwyn> i believe becoming a reddit gold philantropist is the traditional route
[14:46:34] <hayley> gilberth: Sure, only took me like 5 drafts.
[14:48:45] * hayley uploaded an image: (287KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/FhouoRMVnNYxWhZAVEONPaiq/cat-gf.png >
[14:50:31] <dave0> mm food
[14:50:36] <gilberth> I can't see sausages anymore.
[14:50:48] <Gnuxie> any excuse 
[14:52:17] <hayley> gilberth: Also see https://i.redd.it/yxmyv4achv281.jpg
[14:53:12] <gilberth> You keep repeating yourself. And how is that related to GFs?
[14:53:50] <hayley> Get a GF who designs object capability systems with you imo
[14:54:58] <hayley> Or get another GB (Gilad Bracha), though idk how you do that.
[14:55:44] <gilberth> hayley: BTW, the algorithm terminates even without Owen's rules.
[14:56:03] <hayley> Owens highlighted the three that are actually necessary, yes.
[14:56:19] <hayley> The others just get you close to minimal.
[14:56:47] <gilberth> Yep, does he cite Brzozowski? His proof is just one paragraph.
[14:57:28] <hayley> Yes.
[14:58:23] <gilberth> I showed that with tags, it terminates, too. Was a bit tricky.
[14:58:27] <hayley> "Brzozowski proved that a notion of RE similarity including only the above rules marked with (∗) is enough to ensure that every RE has only a finite number of dissimilar derivatives. Hence, DFA construction is guaranteed to terminate if we use similarity as an approximation for equivalence."
[14:58:38] <selwyn> this cat gf will drive my hot dog stand out of business
[14:59:09] <gilberth> hayley: Ah, ok.
[14:59:36] <gilberth> selwyn: So you pick B? Good, as I want A.
[14:59:59] <selwyn> i suppose i could try to buy b out
[15:00:46] * selwyn 's citations look so pretty
[15:05:18] <gilberth> hayley: About another GB; All my five of us: My sister, my mother, my step-mother, my father and me have GB as initials.
[15:05:54] * hayley had a mental image of showing a DFA for "Gil|Gilbert|Gilad" but never did it.
[15:06:39] <sham1> Gil(\epsilon | bert | ad)
[15:08:53] <gilberth> Try G(i(lbert|sela)|(udru|wendoly)n|erhard)
[15:10:28] <hayley> https://www.reddit.com/r/LispMemes/comments/r6cus4/zero_cost_submatching/
[15:10:30] -ixelp- zero cost submatching : LispMemes
[15:10:52] <shka> selwyn: can i slap quantum in front of lisp machine and it still makes sense?
[15:11:36] <sham1> hayley: orange crab bad
[15:12:05] <hayley> sham1: Scroll to the footer of the page.
[15:12:20] <shka> and is
[15:12:32] <shka> D-Wave... a lisp machine?
[15:12:55] <hayley> quantum GC when
[15:13:18] <sham1> Non-deterministic GC. Oh no
[15:13:44] <shka> we use little black holes as our memory cores
[15:13:53] <hayley> Read barrier where you observe the qubit and it collapses
[15:14:32] <gilberth> sham1: That's handy. Forgot to do homework? "The Quantum GC ate it."
[15:15:03] *** Joins: random-nick (~random-ni@87.116.165.83)
[15:18:24] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[15:19:58] * hayley has more upvotes on r/programming than the Oxide Computer garbage OS, decides to retire 
[15:20:13] <Gnuxie> have you setup github sponsors yet/ 
[15:20:24] <Gnuxie> probably should have done that before the publicity 
[15:20:25] <hayley> https://www.youtube.com/watch?v=uakqdR2B2w8
[15:20:26] -ixelp- [Get A] Grip [on Yourself] [1996 Remaster] - YouTube
[15:20:31] <Gnuxie> bruhh
[15:20:44] <hayley> "The money's no good!"
[15:20:56] <Gnuxie> how do you know?
[15:21:03] * hayley not prepared to take payments anyway
[15:21:06] <Gnuxie> these American lisp people are loaded
[15:21:46] <hayley> Not that they can't pay me, I don't need money. So I'd send it all to you...which suggests saying it's no good is pretty mean. Oops.
[15:22:23] <Gnuxie> i thought your dad was making you find a job last week and you were calculating how to survive on $2 a week...
[15:22:24] <Gnuxie> how can you say that 
[15:22:58] <hayley> Well, my dad would not be happier if I got sponsored, he is just a dick, and surviving on $2 was a joke.
[15:23:10] <Gnuxie> it's consultancy fees 
[15:23:25] <hayley> Still, it's not a rEaL jOb. Ditto for when I worked for beach.
[15:23:41] <Gnuxie> bruh
[15:23:51] <Gnuxie> well
[15:23:58] <Gnuxie> you need an escape plan from dad anyways 
[15:24:19] * hayley goes to Germoney, has money in the name
[15:26:40] <selwyn> shka: unfortunately, i don't think so, and i have tried
[15:26:59] <selwyn> issue is that quantum computers are so different from von neumann architectures
[15:27:14] <selwyn> d-wave uses lisp but also cannot be said to be a lisp machine, unfortunately
[15:27:20] <shka> :(
[15:27:23] <selwyn> unless you relax the definition very considerably
[15:27:41] <hayley> Selling Lisp Machines By The Pound
[15:27:55] <shka> yes i understood that reference
[15:28:11] <selwyn> you could maybe, just maybe, design a (classical) lisp compiler that would run on a quantum machine
[15:28:33] <hayley> BREAKING NEWS: FENNEL STOCKS DROP TO $0
[15:28:38] <selwyn> some kind of superoptimiser maybe that tries out all the candidates in superposition
[15:28:47] <selwyn> but i think it has a low chance of success
[15:31:26] <selwyn> they have designed some quantum programming languages and someone has done a quantum lisp
[15:32:16] <selwyn> hm
[15:32:39] <selwyn> yeah, maybe something could come of that
[15:33:01] <hayley> https://www.reddit.com/r/KingCrimsonCircleJerk/comments/r6aht9/compile_stuff_with_the_rythm_of_br00fs_trash/ YES
[15:33:02] -ixelp- Compile stuff with the rythm of Br00f's trash cymbal : KingCrimsonCircleJerk
[15:33:12] <hayley> "Wrong band, dumbass!"
[15:38:55] <hayley> From the logs: "https://i.redd.it/z7lzvqfm0ta31.jpg me @ ripgrep weenies when I achieve the CLOSOS, make SICL use vector instructions and make a regular expression engine"
[15:43:40] <selwyn> after a point it becomes difficult to deal with everything in quantum registers, so you probably want a higher level language
[15:54:13] <selwyn> best application of lisp (to which it is well suited) is compiling quantum algorithms down to quantum circuits
[15:55:07] <selwyn> recently, i have been interested in the performance requirements of some classes of experimental hardware but i don't think lisp is that well suited in that domain
[15:55:31] <selwyn> large numbers of asics working in parallel with hard real time requirements
[15:56:02] <shka> selwyn: star lisp ;-)
[15:56:17] * selwyn reads
[15:56:48] <selwyn> it would certainly be entertaining to convince a company to switch to lisp but i think i would end up like the jpl guy
[15:57:22] <ck_> Ron Erann Garrett Gatt? In what way
[15:57:34] <selwyn> well he ended up not succeeding iirc
[15:58:38] <selwyn> and was saddened by the situation
[15:59:57] <ck_> I understand..
[16:00:33] <ck_> but if the goal is to not be saddened by a situation, there are not many options available in general
[16:00:38] <selwyn> well
[16:01:05] <selwyn> its possible i could mostly avoid coding in general in quantum roles
[16:01:13] <selwyn> that limits my options though
[16:04:41] <shka> we shall program in lisp on the beaches, we shall program in lisp on the landing grounds, fields, and in the streets... we shall never surrender
[16:05:06] <ck_> mostly avoiding coding sounds more like we shall not program anywhere
[16:05:10] <ck_> a fine goal tbh
[16:05:11] * selwyn sheds a tear
[16:05:28] * hayley uploaded an image: (400KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/wBBueniyjItbMpzlSrRWJbWP/gun-baker.png >
[16:07:25] <shka> selwyn: lisp is a battlefield
[16:07:49] <shka> https://www.youtube.com/watch?v=IGVZOLV9SPo
[16:07:49] -ixelp- Pat Benatar - Love Is A Battlefield (Official Video) - YouTube
[16:08:46] <hayley> Lisp is a building on fire.
[16:08:57] <ck_> so it's fine
[16:09:31] <hayley> https://www.youtube.com/watch?v=olf0o3jfhns
[16:09:31] -ixelp- Love → Building on Fire (2005 Remaster) - YouTube
[16:10:10] <shka> you know what?
[16:10:24] <shka> https://www.youtube.com/watch?v=Go64Oauc8-8
[16:10:25] -ixelp- Death - Lack of Comprehension (Remastered - HQ) - YouTube
[16:10:36] <shka> sometimes you need some death metal in your life 
[16:12:33] <dave0> grunt grunt guitar solo
[16:16:28] <selwyn> man google is terrible
[16:18:15] <pjb> No manual entry for google
[16:18:25] <pjb> How is that terrible. It could be worse!
[16:18:27] <ck_> that's what he just said
[16:19:09] <pjb> ck_: s/./?/ is what I wanted to type.
[16:20:35] <shka> dave0: but that's very good grunt grunt guitar solo :P
[16:20:54] <ck_> how do you know it wasn't meant as a suggestion to read the manpage of "google is terrible", those spaces could've been unicode characters other than 0x20
[16:22:09] <dave0> shka :-)
[17:17:41] *** Quits: semz (~none@user/semz) (Ping timeout: 252 seconds)
[17:32:43] <dave0> nite all
[17:33:18] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:35:38] *** Joins: semz (~none@user/semz)
[18:19:48] <selwyn> shka: do you have another metal recommendation
[18:45:28] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[18:50:18] <shka> selwyn: sure, what you are looking for?
[18:51:32] <selwyn> anything really
[18:51:39] <selwyn> i don't know much about metal
[18:56:13] <selwyn> my productivity book arrived today
[18:56:18] <selwyn> going to have a whole system with org-mode
[19:00:28] <shka> heh
[19:08:38] <shka> selwyn: my personal top metal albums are: Grin by The coroner, Persistance of Time by Anthrax,  Times of Grace by Neurosis
[19:09:03] <shka> Symbolic by Death, obviously
[19:09:20] <shka> https://www.youtube.com/watch?v=zbp60IX_jFQ
[19:09:20] -ixelp- Death - Symbolic - YouTube
[19:12:35] *** Quits: LoopMacro (~LoopMacro@c-24-22-157-127.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[19:15:09] <Alfr> Good morning.
[19:36:12] <shka> selwyn: and i used to really like Opeth https://www.youtube.com/watch?v=4hR7S3lLP28
[19:36:13] -ixelp- Opeth - Master's Apprentices (Audio) - YouTube
[19:36:32] <shka> which is progressive death metal
[19:36:55] <shka> well, used to be
[19:36:58] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:ec6c:a291:8165:150d)
[19:37:01] <shka> now it sounds like Yes
[19:37:15] <shka> and is something that hayley would enjoy more :P
[19:39:42] <shka> but this track is really melodic
[19:40:21] <shka> i still like this album much more https://www.youtube.com/watch?v=5bq8t-DEdJU&list=OLAK5uy_lzS6aMbbwuN1hIhrwf9npFIzLrprkiV_4
[19:40:21] -ixelp- The Moor (Remastered) - YouTube
[19:40:53] <shka> so here you go, few hours worth of blasting metal on your speakers
[19:40:59] <shka> you are welcome :-)
[19:42:27] <shka> oh, and also this one https://www.youtube.com/watch?v=N_CNDAMYkxg
[19:42:27] -ixelp- O̲peth ‎– My Ar̲m̲s, Your Hea̲r̲se (1998) [Full Album] HQ - YouTube
[19:42:39] <shka> this is just A class imho
[19:43:35] *** Alfr is now known as Guest3612
[19:43:40] *** Joins: Alfr (~Alfr@user/alfr)
[19:46:11] *** Quits: Guest3612 (~Alfr@user/alfr) (Ping timeout: 252 seconds)
[19:47:14] <selwyn> ty
[19:52:19] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[19:53:11] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[19:53:31] <selwyn> learning about cfront lol
[20:11:58] *** Joins: Alfr (~Alfr@user/alfr)
[20:27:39] *** Joins: Catie (~user@user/catie)
[20:36:08] *** Joins: makomo (~makomo@user/makomo)
[20:44:58] <shka> selwyn: yeah, cfront is kinda funny
[20:46:36] <clothespin> morning
[21:28:06] *** Joins: Inline (~Inline@aftr-37-201-240-100.unity-media.net)
[21:29:09] <shka> https://www.cbinsights.com/research/most-absurd-tech-job-titles/
[21:29:11] -ixelp- The 25 Most Absurd Job Titles In Tech - CB Insights Research
[21:30:22] <shka> Happiness Engineer
[21:32:59] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:ec6c:a291:8165:150d) (Remote host closed the connection)
[21:36:05] <sham1> People probably shouldn't call themselves engineers without being, you know, engineers
[21:36:08] <sham1> With a qualification
[21:40:03] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:40:19] <ck_> what if they went to happiness engineering school
[21:46:06] <shka> i kinda like "time ninja"
[21:46:16] <shka> sounds like a cool game protagonist
[21:46:54] <shka> using time manipulation techniques and stealth for espionage 
[21:51:40] *** Quits: treflip (~user@95.79.32.99) (Quit: good night)
[22:32:14] <selwyn> there are inevitably quantum engineers
[22:34:10] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[22:34:36] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:36:06] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[22:49:41] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[22:58:53] <hayley> "I express my appreciation for the author's reference to King Crimson - the track "One More Red Nightmare" off of the record Red."
[23:01:59] <hayley> https://old.reddit.com/r/rust/comments/r6e5s3/the_onemorerenightmare_compiler/ 🤔
[23:02:00] -ixelp- The one-more-re-nightmare compiler : rust
[23:13:56] <hayley> https://www.youtube.com/watch?v=ZVKirxPRxkY
[23:13:57] -ixelp- One More Red Nightmare - YouTube
[23:14:19] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[23:18:25] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (Client Quit)
[23:20:18] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[23:22:02] <selwyn> metal seems to be helping my flashcard practice
[23:23:15] <hayley> https://twitter.com/nytimes/status/1465782718512443402/photo/1 bruh
[23:23:41] <hayley> "How do you pronounce "Omicron" anyway? There is no single, agreed-on English pronunciation, experts say." You fucking kidding me, just use the Greek pronunciation smh
[23:24:25] <hayley> Oh-me-cron is the only good phonetic "translation" of course.
[23:24:43] <selwyn> arent the politicos pronouncing it omnicron
[23:25:09] <hayley> I will beat them then
[23:25:31] <selwyn> hayley: you might not be familiar with how greek is pronounced in english schools
[23:25:35] <selwyn> but it would trigger you
[23:26:21] <selwyn> omicron is not even difficult to pronounce though
[23:26:58] <hayley> I will get this guy to beat them https://youtu.be/Jnn9-xuwdqc?t=137
[23:26:59] -ixelp- [Greek YTP] Ο Άδωνις και ο Ζερβουδάκης κάνουν πολύ επιθετικό τηλεμάρκετινγκ - YouTube
[23:27:28] <hayley> (Translation: "I fear I'll break the table...." "I'll break everyone in Greece!")
[23:28:28] <selwyn> https://www.youtube.com/watch?v=KAfKFKBlZbM this except with greek
[23:28:29] -ixelp- Life Of Brian Latin Lessons - YouTube
[23:30:29] <selwyn> beta always pronounced like the english b, οι pronounced 'oy' and so on
[23:31:28] * hayley uploaded an image: (377KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/qkbeiIHAYkrAkTYgnOeUvrzg/Screenshot%20from%202021-12-02%2007-01-11.png >
[23:32:39] <selwyn> vaguely considering learning greek next but i am concerned that i have no reason good enough that will see me through the pain
[23:33:05] <hayley> You can watch that YTP I guess
[23:33:46] <hayley> Also https://www.youtube.com/watch?v=Y06jdwhv3rc
[23:33:46] -ixelp- [Greek YTP] Ηλίας Μαμαλάκης and the quest for Μπριάνι - YouTube
[23:35:20] <selwyn> have you ever visited
[23:35:32] <hayley> Nope.
[23:43:44] <shka> I made this https://github.com/sirherrbatka/cl-data-structures/blob/master/src/streaming-algorithms/approximated-histogram.lisp
[23:43:44] -ixelp- cl-data-structures/approximated-histogram.lisp at master · sirherrbatka/cl-data-structures · GitHub
[23:45:40] <selwyn> why do you favour #'make-approximated-histogram over specialising make-instance
[23:46:11] <Alfr> selwyn, bucket list item? Learn Greek to truly appreciate Homer's works?
[23:46:31] <selwyn> well, that is one good reason actually
[23:46:38] <shka> selwyn: both work
[23:47:04] <selwyn> i learned some at school but it wasn't possible to carry on when i went to secondary school
[23:47:31] <shka> but make-instance will hint all slot initialization arguments, and I just want maximal-bins-count
[23:48:14] <shka> so i would rather treat make-instance as a lower level function, one that is not supposed to be called directly 
[23:48:18] <selwyn> i see
[23:48:28] <selwyn> makes a lot of sense
[23:48:48] <shka> reveals a little bit more details then it really needs to 
[23:49:08] <shka> for instance, should anyone care that i am not using adjustable-vector with a fill pointer?
[23:49:22] <selwyn> i suppose
[23:49:30] <selwyn> encapsulation is overrated anyway imo
[23:49:36] <shka> i could, and arguably it is a good idea, but eh
[23:50:01] <shka> encapsulation is overrated, but not useless
[23:51:08] <moon-child> ‘Since macros perform text substitution, we can come up with safer language features that would allow doing similar things, but prevent severe bugs’   O RLY?
[23:51:35] <hayley> "macros perform text substitution" O RLY
[23:51:57] <hayley> inb4 macros for Greenspun's 10th rule
[23:52:04] <moon-child> what I want /r/programminglanguages to be: an active version of LTU
[23:52:11] <moon-child> what /r/programminglanguages actually is:
[23:52:27] <hayley> "What is it like to write a large project in a dynamically-typed language?"
[23:52:43] <Duuqnd> Why even have macros if they're just text substitution?
[23:52:46] <hayley> but read in the same voice as "What is it like to go in the womens' bathroom" or smth
[23:55:07] <selwyn> something to think about
[23:55:21] <sham1> At least C has token substitution
[23:55:49] <hayley> Also see https://i.redd.it/umcmi6zgkja71.png
[23:56:10] <shka> heh, recently it came to my attention that C# has honest to good C style preprocessor #define
[23:56:30] <hayley> So does Erlang IIRC
[23:56:50] <shka> erlang is a old as fuck 
[23:56:50] <hayley> Haskell too with {#- Language CPP -#} or whatever that is.
[23:56:58] <shka> so i can accept this 
[23:57:13] <hayley> https://guide.aelve.com/haskell/cpp-vww0qd72 {-# LANGUAGE CPP #-}
[23:57:15] <sham1> I don't think people have understood that really the problem tends to be weak typing, not dynamic typing. Sadly there are many a language where you have dynamic and weak types like JS
[23:57:16] <selwyn> shinmera wrote his chat server in some erlang dialect
[23:58:06] <shka> yes, the ultimate evil of typing is the implicit cast
[23:58:13] <moon-child> (CAR NIL)
[23:58:25] <shka> and the operator overloading
[23:58:27] <hayley> Hysterical raisins
[23:58:41] <shka> there is a reason why lisp math functions work only on numbers
[23:58:50] <shka> and there is string<
[23:58:50] <moon-child> shka: what?
[23:59:04] <moon-child> what is the difference between overloaded operators and generic functions?
[23:59:29] <shka> moon-child: in principal, none
[23:59:43] <shka> the point is, cl:+ will always, and only, work on numbers
[23:59:56] <selwyn> its sometimes annoying
