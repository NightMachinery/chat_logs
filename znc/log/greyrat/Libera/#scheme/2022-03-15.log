[00:15:34] *** Quits: robin (~robin@user/terpri) (Read error: Connection reset by peer)
[00:17:17] *** Joins: badkins (~badkins@136.56.92.199)
[00:18:20] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[00:59:25] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[01:02:58] *** Quits: mnieper` (~user@ipbcc1ad82.dynamic.kabel-deutschland.de) (Ping timeout: 250 seconds)
[01:12:35] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[01:14:53] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca)
[01:19:48] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:20:33] <jcowan> The main point of StructuresCowan is interchanging with C, not saving space, hence the C-ish term "structures".
[01:31:25] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[01:41:59] *** Joins: anika-voin (~nestor@46.166.88.83)
[01:43:49] *** Quits: klovett_ (~klovett@107.116.92.99) (Quit: ZZZzzz…)
[01:49:56] *** Quits: m455 (~m455@user/m455) (Quit: WeeChat 3.0)
[01:50:13] *** Joins: m455 (~m455@user/m455)
[01:51:00] *** Quits: cjb (~cjb@user/cjb) (Ping timeout: 260 seconds)
[01:51:17] *** Quits: m455 (~m455@user/m455) (Client Quit)
[01:51:35] *** Joins: m455 (~m455@user/m455)
[01:55:49] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca) (Quit: Client closed)
[01:57:38] *** Joins: badkins (~badkins@136.56.92.199)
[02:01:08] *** Joins: seninha (~chatzilla@user/seninha)
[02:05:31] *** Quits: jao (~jao@45.134.142.199) (Remote host closed the connection)
[02:06:25] *** Quits: anika-voin (~nestor@46.166.88.83) (Ping timeout: 250 seconds)
[02:09:51] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca)
[02:23:40] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[02:31:58] *** Quits: daemonises (uid545329@id-545329.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[02:34:07] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[02:34:32] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 240 seconds)
[02:35:58] *** Joins: tfeb (~tfb@cpc102388-sgyl38-2-0-cust817.18-2.cable.virginm.net)
[02:51:28] *** Joins: badkins (~badkins@136.56.92.199)
[03:05:39] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 256 seconds)
[03:06:02] *** Quits: Kooda (~kooda@natsu.upyum.com) (Ping timeout: 250 seconds)
[03:08:10] *** Quits: tfeb (~tfb@cpc102388-sgyl38-2-0-cust817.18-2.cable.virginm.net) (Quit: died)
[03:08:42] *** Joins: Kooda (~kooda@natsu.upyum.com)
[03:09:10] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 272 seconds)
[03:09:47] *** Joins: robin (~robin@user/terpri)
[03:12:08] *** Joins: s-liao (~s-liao@101.86.164.158)
[03:14:49] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[03:16:32] *** Quits: s-liao (~s-liao@101.86.164.158) (Client Quit)
[03:28:41] *** Joins: jao (~jao@45.134.142.199)
[03:30:52] *** Joins: eddof13 (~eddof13@192.154.196.154)
[03:31:52] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:8f5:448b:f0f1:4571)
[03:31:52] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:8f5:448b:f0f1:4571) (Changing host)
[03:31:52] *** Joins: skapata (~Skapata@user/skapata)
[03:32:25] *** Quits: theruran (uid11305@id-11305.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[03:38:34] *** Joins: zacque (~zacque@124.82.52.252)
[03:42:02] *** Quits: zwr (~zwr@2804:d45:b966:fb00:53dd:b5a5:6b8e:e94d) (Ping timeout: 240 seconds)
[03:43:11] *** Joins: zwr (~zwr@2804:d45:b966:fb00:628f:1ad6:16aa:dc6f)
[03:54:23] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca) (Ping timeout: 256 seconds)
[03:58:14] *** Joins: karlosz (~karlosz@47.151.136.69)
[04:03:13] *** Quits: eddof13 (~eddof13@192.154.196.154) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:03:57] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 240 seconds)
[04:11:03] *** Joins: ahungry (~user@c-68-51-134-46.hsd1.mi.comcast.net)
[04:14:04] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 250 seconds)
[04:21:30] *** Joins: karlosz (~karlosz@47.151.136.69)
[04:27:15] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 256 seconds)
[04:29:50] *** Joins: klovett (~klovett@107.116.92.99)
[04:30:46] *** Joins: Everything (~Everythin@37.115.210.35)
[04:46:59] *** Quits: ahungry (~user@c-68-51-134-46.hsd1.mi.comcast.net) (Remote host closed the connection)
[04:48:54] *** Joins: ahungry (~user@c-68-51-134-46.hsd1.mi.comcast.net)
[05:06:23] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[05:12:50] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Quit: jrincayc)
[05:18:06] *** Quits: seninha (~chatzilla@user/seninha) (Quit: ChatZilla 0.9.93 [SeaMonkey 2.53.10.2/20220226204633])
[05:18:38] *** Quits: jao (~jao@45.134.142.199) (Ping timeout: 250 seconds)
[05:20:52] *** Joins: jao (~jao@45.134.142.225)
[05:41:33] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca)
[05:44:55] *** Joins: frost (~frost@user/frost)
[05:48:18] *** Quits: frost (~frost@user/frost) (Client Quit)
[06:01:22] *** Quits: badkins (~badkins@136.56.92.199) (Quit: Leaving...)
[06:08:24] *** Quits: jao (~jao@45.134.142.225) (Ping timeout: 252 seconds)
[06:13:15] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[06:27:47] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Quit: jrincayc)
[06:28:02] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[06:28:04] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[06:29:16] *** Joins: badkins (~badkins@136.56.92.199)
[06:32:29] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 256 seconds)
[06:41:46] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[06:42:14] *** Joins: badkins (~badkins@136.56.92.199)
[06:46:12] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[06:47:33] *** Quits: zacque (~zacque@124.82.52.252) (Quit: Goodbye :D)
[06:58:22] *** Joins: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[07:07:21] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:14:02] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:16:13] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:17:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[07:18:43] *** Quits: apg (~apg@71-34-103-243.ptld.qwest.net) (Ping timeout: 256 seconds)
[07:20:05] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:20:39] *** Quits: vats (~vats@103.16.30.211) (Ping timeout: 256 seconds)
[07:22:27] *** Joins: irontom (~user@37.19.221.165)
[07:22:28] *** Quits: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo) (Remote host closed the connection)
[07:23:14] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[07:23:56] *** Quits: mzan (~quassel@mail.asterisell.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[07:25:01] *** Joins: mzan (~quassel@mail.asterisell.com)
[07:26:47] *** Joins: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo)
[07:27:14] *** Joins: frost (~frost@user/frost)
[07:27:32] *** Quits: klovett (~klovett@107.116.92.99) (Quit: ZZZzzz…)
[07:27:42] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Client Quit)
[07:31:27] *** Quits: irontom (~user@37.19.221.165) (Ping timeout: 252 seconds)
[07:37:01] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[07:38:43] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Client Quit)
[07:45:34] *** Joins: s-liao (~s-liao@101.86.164.158)
[07:55:47] *** Quits: s-liao (~s-liao@101.86.164.158) (Ping timeout: 256 seconds)
[07:56:20] *** Joins: s-liao (~s-liao@101.86.164.158)
[07:58:42] *** Quits: yosik (~user@user/yosik) (Read error: Connection reset by peer)
[08:02:36] *** Quits: akarle (~akarle@user/akarle) (Ping timeout: 240 seconds)
[08:16:00] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[08:28:21] *** Quits: ahungry (~user@c-68-51-134-46.hsd1.mi.comcast.net) (Remote host closed the connection)
[08:42:38] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Client closed)
[08:52:57] *** Quits: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 240 seconds)
[09:03:56] *** Joins: karlosz (~karlosz@47.151.136.69)
[09:19:20] *** Joins: badkins (~badkins@136.56.92.199)
[09:23:54] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 250 seconds)
[09:29:11] *** Joins: vats (~vats@103.16.30.101)
[09:42:19] *** Quits: fadein (~Erik@c-24-10-167-68.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[09:49:17] *** Joins: fadein (~Erik@c-24-10-167-68.hsd1.ut.comcast.net)
[10:03:50] *** Joins: seninha (~chatzilla@user/seninha)
[10:26:39] *** Joins: notzmv (~zmv@user/notzmv)
[10:29:14] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca) (Quit: Client closed)
[10:52:39] *** Quits: madage (~madage@user/madage) (Remote host closed the connection)
[10:53:05] *** Joins: madage (~madage@user/madage)
[11:15:35] *** Joins: anika-voin (~nestor@46.166.88.83)
[11:20:15] *** Joins: badkins (~badkins@136.56.92.199)
[11:24:17] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[11:32:31] *** Joins: s-liao (~s-liao@101.86.164.158)
[12:10:19] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Client closed)
[12:11:26] *** Joins: s-liao (~s-liao@101.86.164.158)
[12:19:14] *** Joins: akarle (~akarle@user/akarle)
[12:23:32] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Client closed)
[12:24:34] *** Joins: Darkcoal (~user@user/Darkcoal)
[12:25:09] *** Quits: vats (~vats@103.16.30.101) (Ping timeout: 252 seconds)
[12:25:50] *** Joins: s-liao (~s-liao@101.86.164.158)
[12:30:15] *** Quits: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[12:41:32] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[12:42:53] *** alMalsamo is now known as lumberjack13
[12:49:14] *** Joins: nishant (~Nishant@49.37.242.151)
[12:49:27] *** Quits: nishant (~Nishant@49.37.242.151) (Remote host closed the connection)
[12:49:58] *** Joins: nishant (~Nishant@49.37.242.151)
[13:13:42] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[13:15:23] *** Quits: s-liao (~s-liao@101.86.164.158) (Ping timeout: 256 seconds)
[13:17:02] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 250 seconds)
[13:17:55] *** Quits: lumberjack13 (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[13:18:50] *** Joins: Darkcoal (~user@user/Darkcoal)
[13:19:54] *** Joins: s-liao (~s-liao@101.86.164.158)
[13:21:09] *** Joins: badkins (~badkins@136.56.92.199)
[13:25:16] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 250 seconds)
[13:25:17] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[13:27:09] *** Joins: Darkcoal (~user@user/Darkcoal)
[13:30:12] *** Joins: lumberjack13 (~alMalsamo@gateway/tor-sasl/almalsamo)
[13:59:23] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Client closed)
[14:00:04] *** Joins: s-liao (~s-liao@101.86.164.158)
[14:05:01] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:06:11] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Client closed)
[14:14:11] *** Quits: seninha (~chatzilla@user/seninha) (Remote host closed the connection)
[14:18:15] *** Quits: lumberjack13 (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[14:21:47] *** Joins: seninha (~chatzilla@user/seninha)
[14:25:57] *** Quits: lloda (~user@11-206-127-185.static.world-connect.ch) (Ping timeout: 240 seconds)
[14:36:35] *** Joins: vats (~vats@103.16.30.101)
[14:45:12] *** Joins: badkins (~badkins@136.56.92.199)
[14:45:53] *** Joins: lloda (~user@11-206-127-185.static.world-connect.ch)
[14:47:03] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 252 seconds)
[14:49:24] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[14:58:59] *** Joins: X-Scale` (~ARM@83.223.232.29)
[15:00:13] *** Quits: X-Scale (~ARM@219.206.137.78.rev.vodafone.pt) (Ping timeout: 256 seconds)
[15:00:13] *** X-Scale` is now known as X-Scale
[15:03:33] *** Quits: vats (~vats@103.16.30.101) (Ping timeout: 252 seconds)
[15:05:12] *** Quits: seninha (~chatzilla@user/seninha) (Ping timeout: 252 seconds)
[15:11:50] *** Joins: seninha (~chatzilla@user/seninha)
[15:12:32] *** Joins: badkins (~badkins@136.56.92.199)
[15:16:36] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[15:29:07] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[16:00:37] *** Quits: clacke (88d96f2df3@knopi.disroot.org) (Remote host closed the connection)
[16:04:51] *** Joins: mnieper (~user@191.96.180.47)
[16:04:52] <mnieper> e
[16:05:54] *** Joins: s-liao (~s-liao@101.86.164.158)
[16:08:08] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[16:08:12] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 250 seconds)
[16:09:05] <sham1> m
[16:13:23] <edgar-rft> c
[16:13:38] <edgar-rft> ^
[16:13:40] <edgar-rft> 2
[16:22:45] * dpk sighs
[16:22:52] <dpk> Alex has merged identifier macros into Chibi!
[16:23:07] <dpk> however, the actual identifier-syntax form is broken
[16:24:01] <dpk> (and i'm moderately frustrated because i tried to tell him it was broken, and then he 'fixed' it in a way i already knew to be differently broken and had already said wouldn't work)
[16:27:07] <dpk> (bzw. i had already implemented identifier-syntax correctly twice, but i was unhappy with the first implementation and then he declared himself unhappy with the second one (and implicitly with the first one too) and insisted on doing it a different way, which is why it's now broken)
[16:31:44] <mnieper> He will hopefully fix it himself after you have explained that it is broken.
[16:32:00] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:4998:5f5e:9ad1:1206)
[16:32:00] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:4998:5f5e:9ad1:1206) (Changing host)
[16:32:00] *** Joins: skapata (~Skapata@user/skapata)
[16:32:09] <dpk> i thought it was clear that it was broken but he merged it anyway. but i've re-reported the issue just in case https://github.com/ashinn/chibi-scheme/issues/816
[16:33:56] <mnieper> In any case, kudos for your work!
[16:37:02] *** Joins: mnieper` (~user@137.250.162.24)
[16:38:32] *** Quits: mnieper (~user@191.96.180.47) (Ping timeout: 250 seconds)
[16:40:33] *** Quits: mnieper` (~user@137.250.162.24) (Client Quit)
[16:42:23] *** Joins: mnieper (~user@137.250.162.24)
[16:42:43] *** Joins: badkins (~badkins@136.56.92.199)
[16:43:17] <mnieper> I hope the idea of using a bit for "make-variable-transformer" will be reused for sc transformers so that bare lambdas for syntax-case will work in the core and without a hack for Chibi.
[16:43:29] <mnieper> (Sorry for any repost; I had a connection problem.)
[16:44:25] *** Joins: civodul (~user@guix/contributor/civodul)
[16:46:57] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[16:56:48] *** Parts: mnieper (~user@137.250.162.24) (ERC (IRC client for Emacs 27.1))
[16:58:35] *** Joins: rgherdt__ (~rgherdt@2a01:598:d034:517a:dba0:5d21:af51:c56c)
[16:58:36] *** Joins: klovett (~klovett@107.116.92.97)
[17:01:01] *** Quits: rgherdt_ (~rgherdt@port-92-195-30-153.dynamic.as20676.net) (Ping timeout: 240 seconds)
[17:03:29] *** Joins: badkins (~badkins@136.56.92.199)
[17:05:38] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[17:07:50] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[17:11:00] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[17:12:49] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[17:19:14] *** Joins: vats (~vats@103.16.30.101)
[17:37:51] *** Joins: mnieper` (~user@ipbcc1ad82.dynamic.kabel-deutschland.de)
[17:38:05] *** Joins: wonko-the-sane (~user@gateway/tor-sasl/wonko-the-sane)
[17:38:51] *** Parts: mnieper` (~user@ipbcc1ad82.dynamic.kabel-deutschland.de) ()
[17:39:17] *** Joins: mnieper (~user@ipbcc1ad82.dynamic.kabel-deutschland.de)
[17:59:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[18:00:54] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Client closed)
[18:09:57] *** Joins: ManDay (~manday@user/manday)
[18:11:17] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:11:31] *** Quits: ManDay (~manday@user/manday) (Client Quit)
[18:15:00] *** Joins: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[18:17:47] *** Joins: badkins (~badkins@136.56.92.199)
[18:20:59] *** Joins: rgherdt_ (~rgherdt@port-92-195-30-153.dynamic.as20676.net)
[18:23:45] *** Quits: rgherdt__ (~rgherdt@2a01:598:d034:517a:dba0:5d21:af51:c56c) (Ping timeout: 252 seconds)
[18:30:46] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[18:32:25] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca)
[18:32:39] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:03:42] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[19:05:14] *** Joins: eddof13 (~eddof13@192.154.196.149)
[19:06:50] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[19:07:08] *** Joins: jao (~jao@45.134.142.199)
[19:11:16] *** Quits: nishant (~Nishant@49.37.242.151) (Quit: Leaving)
[19:14:10] *** Quits: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 260 seconds)
[19:15:01] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca) (Quit: Ping timeout (120 seconds))
[19:15:17] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca)
[19:22:46] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 250 seconds)
[19:24:40] *** Joins: aeth (~aeth@user/aeth)
[19:31:15] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[19:33:46] *** Parts: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca) ()
[19:36:00] *** Quits: m455 (~m455@user/m455) (Quit: WeeChat 3.0)
[19:43:01] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 240 seconds)
[19:49:50] *** Joins: klovett_ (~klovett@107.116.92.97)
[19:52:00] *** Joins: bae (~user@130.105.211.48)
[19:52:57] *** Quits: klovett (~klovett@107.116.92.97) (Ping timeout: 240 seconds)
[19:53:27] <bae> I'm using Windows right now because I'm borrowing a computer. What implementation of Scheme can I run inside an Emacs shell on Windows?
[19:55:20] *** Joins: livoreno (~livoreno@user/notzmv)
[19:55:20] <bae> On Linux I usually use stKlos
[19:58:30] <gnomon> bae, are you running Emacs atop WSL/WSL2?
[20:00:39] <bae> I just have it installed on Windows. This isn't my computer, so I don't want to install a subsystem.
[20:01:12] <bae> Windows 10
[20:02:05] <bae> gnomon: Plus I don't know what WSL/WSL2 is :-)
[20:03:07] <mnieper> Racket works comfortably.
[20:05:18] <bae> mnieper: OK, thanks. gnomon I had heard of cygwin, but not WSL. Good to know.
[20:09:17] <bae> mnieper: I'm going to try the minimal install, because I'm just working through a textbook at this point.
[20:09:43] <mnieper> I'm not sure whether DrRacket (which you probably want to use) is part of the minimal install.
[20:09:59] <mnieper> It's a great IDE if you don't have Emacs.
[20:10:34] <mnieper> Racket understands R5RS, R6RS, and its own dialect.
[20:27:37] <bae> mnieper: I'm running Emacs. I'm specifically looking for a Scheme to run inside Emacs on Windows, because I do almost everything inside Emacs.
[20:29:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[20:30:37] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[20:31:54] *** Quits: pinoaffe (~pinoaffep@2a01:4f9:c010:3f2a:1:1:3:10) (Quit: Bridge terminating on SIGTERM)
[20:32:24] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:33:30] *** Joins: pinoaffe (~pinoaffep@2a01:4f9:c010:3f2a:1:1:3:10)
[20:34:18] <mnieper> bae: https://docs.racket-lang.org/guide/Emacs.html
[20:35:55] <mnieper> bae: I just tested the Chez installer for Windows: https://github.com/cisco/ChezScheme/release/tag/v9.5.6
[20:36:15] <mnieper> This also seems to work hassle-free with Windows.
[20:36:27] <mnieper> (And without WSL2.)
[20:44:12] *** Quits: anika-voin (~nestor@46.166.88.83) (Ping timeout: 240 seconds)
[20:45:32] *** Joins: badkins (~badkins@136.56.92.199)
[20:52:50] <amazigh> I never tested Chez on Windows, but they are regular maintenance fixes. So, it probably works.
[20:54:23] <gwatt> It's worked for me the last time I used it
[21:09:29] *** Quits: johnjaye (~pi@173.209.64.74) (Quit: WeeChat 3.3)
[21:17:16] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[21:19:02] *** Quits: eddof13 (~eddof13@192.154.196.149) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:27:38] *** Quits: aeka (~aeka@user/hiruji) (Ping timeout: 260 seconds)
[21:28:24] <mdhughes> Reminder with DrRacket: It destroys your REPL if you edit/run the text editor. So you can't build up your system in the REPL and just save it, it's almost useless. The command-line racket works normally.
[21:29:29] <mdhughes> Chez is fantastic on Windows, because the built-in editor works. You just need to find the chezhistory file to copy out whatever you've written.
[21:30:44] *** Joins: badkins (~badkins@136.56.92.199)
[21:31:16] <leah2> the chez repl is really nice
[21:34:40] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:40:41] *** Quits: bae (~user@130.105.211.48) (Quit: ERC (IRC client for Emacs 27.2))
[21:41:00] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 250 seconds)
[21:41:03] <mnieper> mdhughes: Useless is a bit strong; if you want to preserve the code, type it in the definition window.
[21:41:58] <mdhughes> And all your test data. And your test commands. Now you've got a pile of junk at the bottom of the script.
[21:42:43] <mdhughes> And you've completely abandoned REPL-driven dev at that point, back to edit/save/run/test/fix loop like any compiled language.
[21:43:04] *** Joins: aeth (~aeth@user/aeth)
[21:57:51] *** Joins: aeka (~aeka@user/hiruji)
[22:02:40] *** Quits: aeka (~aeka@user/hiruji) (Ping timeout: 250 seconds)
[22:03:07] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[22:03:25] *** Joins: aeka (~aeka@user/hiruji)
[22:05:30] *** Joins: klovett (~klovett@107.116.92.97)
[22:08:18] *** Quits: klovett_ (~klovett@107.116.92.97) (Ping timeout: 250 seconds)
[22:14:17] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Ping timeout: 240 seconds)
[22:14:54] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[22:16:56] *** Quits: vats (~vats@103.16.30.101) (Ping timeout: 252 seconds)
[22:19:54] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[22:20:03] *** jackhill_ is now known as jackhill
[22:21:51] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[22:28:30] *** Joins: casmajavi (~casmajavi@user/casmajavi)
[22:28:48] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[22:37:47] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:38:45] *** Joins: badkins (~badkins@136.56.92.199)
[22:40:14] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Client Quit)
[23:06:49] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[23:07:04] <ski> rudybot: later tell bae fyi, i guess MIT Scheme <https://www.gnu.org/software/mit-scheme/> (seems <http://web.mit.edu/scheme_v9.2/doc/mit-scheme-user/Windows-Installation.html>,<https://ftp.gnu.org/gnu/mit-scheme/stable.pkg/9.2/> has an (older) Windows installer) has Edwin <https://www.emacswiki.org/emacs/EdWin>, which is an Emacs written in (MIT) Scheme. supposedly it (including recent version) should also 
[23:07:05] <rudybot> ski: I asked `MemoServ' to forward the message to bae.
[23:07:10] <ski> be buildable under Cygwin
[23:08:14] <amazigh> so Go 1.8 generics, are not generics like chicken fast generic http://wiki.call-cc.org/eggref/5/fast-generic
[23:08:38] <sham1> I thought that Go 1.8 parametric polymorphism is akin to Java and such
[23:08:49] <amazigh> https://go.dev/blog/go1.18
[23:09:00] <nmeum> how would I go about defining my own r7rs error type which could be recognize through a custom error type predicate (analog to file-error? and read-error? predicates)? I was considering achieving this through an error-object-irritant which contains a custom type for which I could then check in my error type predicate but, unfourtunatly, error object irritants are printed by most default 
[23:09:00] <nmeum> exception handlers. is there any better way to implement a custom error type predicate?
[23:09:20] *** Joins: badkins (~badkins@136.56.92.199)
[23:09:51] <sham1> One way I've seen is using define-record-type
[23:10:22] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[23:10:26] <sham1> Because that defines a new type that is disjoint from any other
[23:10:43] <gwatt> custom defined errors might not register as error? though
[23:10:48] <nmeum> yea, that's how I define the type for my error object irritant
[23:11:30] <amazigh> you want to change the way your custom errors defined with define-record-type are printed?
[23:11:40] <gwatt> r6rs at least gave you define-condition-type
[23:12:06] <sham1> One more thing to add to R7-large? :P
[23:12:27] <amazigh> I am not sure I understand the question.
[23:12:39] *** Quits: Darkcoal (~user@user/Darkcoal) (Quit: Darkcoal)
[23:13:03] <nmeum> amazigh: no, I just want to be able to detect a specific kind of error object in an exception handler, but if I achieve that through custom irritants then it has the unintended side effect that you end up with output such as "some error message: #<my-module#My-Error-Irritant>" with most default exception handlers
[23:13:38] <amazigh> I does not matter whether OBJ in (raise obj) satisfy the predicate `error?`
[23:14:09] <nmeum> ah!
[23:14:16] <gwatt> nmeum: I think in R7RS, there is no portable way to change the stringification of records
[23:14:38] <sham1> srfi when
[23:14:51] <mnieper> nmeum: define-record-type is the way to define disjoint types.
[23:14:56] <nmeum> amazigh: so you are suggesting just doing (raise (make-my-custom-error-record-type …))?
[23:15:10] <amazigh> using only R7RS yes
[23:15:31] <nmeum> I will try that, thanks
[23:15:51] <amazigh> the printed error by the root exception handler will look like a record. Chez says something like "non condition type error: ..."
[23:15:51] <mnieper> nmeum: If you want a specific way of reporting the error, you have to wrap everything in a handler that does so.
[23:16:05] <amazigh> +1 mnieper 
[23:16:48] <mnieper> nmeum: Your favorite Scheme may have a way to parameterize the default error handler.
[23:17:50] <mnieper> nmeum: If error handling is important to you and you want it simple, I'd try to use an R6RS system.
[23:18:39] <nmeum> I don't really want to change the default error handler. I would just like to able to do something like (with-exception-handler (lambda (eobj) (if (my-custom-error? eobj) (<handle error in one way>) (<handle error in other way))) …)
[23:19:00] <sham1> You can do that, again with define-record-type because that lets you define a type-predicate?
[23:19:18] <nmeum> right, I haven't tried that yet but will do in a sec :)
[23:19:22] <nmeum> just wanted to clarify my question
[23:20:41] <sham1> BTW, those who know, why didn't R7-small adopt R6's condition system? Was it deemed too controversial or big? And if so, how much one could potentially take from it without breaking R7-small exceptions' semantics
[23:21:43] <sham1> At least looking at (rnrs exceptions (6)) and (rnrs conditions (6)), they don't seem that unreasonable
[23:22:03] <mnieper> Not everything what WG1 did was reasonable IMO. :)
[23:22:06] <gwatt> I think r6rs' condition system is mostly compliant with r7rs' error system. r7rs allows implementations do what they want most of the time
[23:22:16] <amazigh> another question: what is specific to R7-small exceptions' semantic
[23:22:48] <mnieper> sham1: The exception system of R6RS and R7RS are roughly the same; it is the conditions that are specified in R6RS but not in R7RS.
[23:23:02] <amazigh> conditions are not define-record-types in R6RS?
[23:23:04] <sham1> That it seems
[23:23:11] <sham1> Apparently they aren't
[23:23:24] <mnieper> amazigh: They are record types.
[23:24:09] <amazigh> I need to read R6RS ^^'
[23:24:56] <mnieper> I should have been more precise: "Simple conditions are record types."
[23:25:32] <mnieper> The result of (condition ...) may or may not be a record of a specific type.
[23:25:44] <sham1> (define-condition-type) seems to have a thing for "supertypes"
[23:25:52] <sham1> Like a condition could "inherit" from &condition
[23:26:00] <mnieper> sham1: Yes; it defines a simple condition.
[23:26:04] <mnieper> sham1: Thus a record.
[23:26:09] <mnieper> type.
[23:26:30] <gwatt> I think anything defined with define-condition-type will inherit from &condition.
[23:26:41] <mnieper> As R6RS has opaque record types, the statement "x is a record type" is semantically actually meaningless. :)
[23:26:44] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[23:26:48] <sham1> Did R6 records have supertypes or was is just a condition-type speciality? I haven't used R6 like at all
[23:26:55] <gwatt> r6rs has supertypes
[23:26:57] <mnieper> sham1: Yes
[23:27:01] <sham1> Ah okay
[23:27:46] <sham1> I think I figured out why R7-small didn't take R6's condition system /s
[23:27:48] <mnieper> sham1: R7RS-Large could already be finished if they had started to build it on R6RS.
[23:29:24] <amazigh> I read that was a choice of the steering committee
[23:29:31] <mnieper> sham1: Well, they might have added single inheritance if they had needed it for conditions. Who nows.
[23:30:05] *** Joins: apg (~apg@71-34-103-243.ptld.qwest.net)
[23:30:12] <mnieper> amazigh: It was a political choice, I guess. But in retrospection, an unwise one, I think. 
[23:32:08] *** Joins: mnieper` (~user@212.30.36.103)
[23:32:26] *** Parts: mnieper (~user@ipbcc1ad82.dynamic.kabel-deutschland.de) (ERC (IRC client for Emacs 27.1))
[23:32:47] *** Quits: mnieper` (~user@212.30.36.103) (Client Quit)
[23:33:19] *** Joins: mnieper` (~user@212.30.36.103)
[23:33:48] <sham1> One might have to consider packaging the R6 conditions up into some SRFI or whatever, specially since more than likely R7-large is going to get syntax-case and that for example does require conditions for error stuff
[23:34:48] <sham1> Or would that be SRFI 35
[23:35:20] <sham1> I suppose
[23:35:36] <amazigh> there is https://srfi.schemers.org/srfi-222/
[23:35:49] *** Joins: mnieper`` (~user@212.30.36.27)
[23:37:48] *** Quits: mnieper` (~user@212.30.36.103) (Ping timeout: 252 seconds)
[23:38:10] <amazigh> tbh I *like* inheritance to build an error hierarchy, I find neat and apparantly useful, but it is unclear if I ever used that to my advantage.
[23:38:37] *** Quits: mnieper`` (~user@212.30.36.27) (Client Quit)
[23:39:09] <gwatt> I don't know if you need propert record inheritence to copy the r6rs condition system
[23:39:21] *** Joins: mnieper` (~user@212.30.36.27)
[23:39:52] <amazigh> and regarding inheritance in general, such as in OOP, I have seen doing it a lot of harm to code I have seen; that is a one-side of the story, since I do not have a lot of experience with alternatives.
[23:40:31] *** Joins: badkins (~badkins@136.56.92.199)
[23:40:32] <gwatt> I don't think you should consider r6rs record inheritence to be the same as classical inheritence, like java is.
[23:41:11] <amazigh> I skimmed SRFI-222, they look different
[23:41:37] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[23:49:56] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:54:08] <amazigh> The rationale of SRFI-222 is clear: https://srfi.schemers.org/srfi-222/srfi-222.html#rationale
[23:55:22] <sham1> The example from the page of `(define (teaching-assistant? obj) (eq? obj 'teaching-assistant))` is kinda funky
[23:56:22] <sham1> It doesn't say how things like eq? or equal? or such would work for this. Like does it take the first object of the compound, or is every object looked through until one matches?
[23:57:47] <amazigh> what would be the result of (eq? (make-compound 'something 'another') 42)
[23:57:49] <amazigh> ?
[23:58:01] <sham1> I'd assume #f
[23:58:06] <amazigh> yes
[23:58:07] <sham1> But yeah, it's ambiguous
[23:58:28] <amazigh> there is not SRFI that change the behavor of eq? or equal?
[23:58:41] <amazigh> or eqv?
[23:58:42] <sham1> Or like, is (eq? (make-compound 'something 'another') 'another') #t or #f? Who knows!
[23:59:48] <amazigh> I keep repeating this but eq? equal? and eqv? imo only exist for historical reasons
