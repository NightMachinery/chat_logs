[00:03:05] *** Quits: vats (~vats@103.70.83.249) (Remote host closed the connection)
[00:03:35] *** Joins: vats (~vats@103.70.83.249)
[00:18:22] *** Quits: vats (~vats@103.70.83.249) (Remote host closed the connection)
[00:18:52] *** Joins: vats (~vats@103.70.83.249)
[00:27:01] *** Quits: vats (~vats@103.70.83.249) (Remote host closed the connection)
[00:27:42] *** Joins: vats (~vats@103.70.83.249)
[00:36:30] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[00:38:47] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:03:34] *** Quits: shka (~herr@109.231.62.239) (Read error: Connection reset by peer)
[01:03:54] *** Joins: shka (~herr@109.231.62.239)
[01:04:49] *** Quits: retropikzel (~retropikz@2001:999:202:19ef:ae12:3ff:fe96:9d08) (Quit: Leaving)
[01:06:35] *** Quits: selwyn (~selwyn@user/selwyn) (Quit: Leaving)
[01:16:19] *** Quits: zos (~zosthegoa@ool-457a8044.dyn.optonline.net) (Quit: WeeChat 2.8)
[01:18:52] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[01:19:28] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 272 seconds)
[01:30:04] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:56:50] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f) (Ping timeout: 272 seconds)
[02:02:16] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[02:19:42] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[02:20:16] *** Quits: santiagopim (~user@90.166.59.133) (Ping timeout: 272 seconds)
[02:46:42] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[02:58:01] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[03:31:08] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[03:48:38] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[03:55:57] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[04:03:17] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 258 seconds)
[04:33:46] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 240 seconds)
[05:08:23] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 250 seconds)
[05:42:38] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[06:47:21] *** Quits: sts-q (~sts-q@212.53.219.168) (Ping timeout: 258 seconds)
[07:02:53] *** Joins: sts-q (~sts-q@212.53.219.167)
[07:07:08] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 256 seconds)
[07:26:33] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[07:31:37] <beach> Good morning everyone! 
[09:11:43] *** Joins: selwyn (~selwyn@user/selwyn)
[09:34:16] *** Joins: derelict (~derelict@user/derelict)
[09:54:10] *** Joins: silasfox (~sbv@2001-4dd6-62dc-0-6027-7522-36-c7ab.ipv6dyn.netcologne.de)
[10:32:45] *** Quits: vats (~vats@103.70.83.249) (Ping timeout: 252 seconds)
[10:44:35] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798)
[10:49:02] *** Joins: shka (~herr@109.231.62.239)
[10:53:23] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[11:06:07] *** Joins: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f)
[11:36:04] *** Quits: fengshaun (~fengshaun@68.69.214.210) (Quit: bibi!)
[11:36:21] *** Joins: fengshaun (~fengshaun@68.69.214.210)
[11:36:22] *** Quits: silasfox (~sbv@2001-4dd6-62dc-0-6027-7522-36-c7ab.ipv6dyn.netcologne.de) (Ping timeout: 245 seconds)
[11:36:38] *** Joins: silasfox (~sbv@xdsl-87-79-98-159.nc.de)
[11:38:07] *** Joins: santiagopim (~user@90.166.59.133)
[11:42:58] *** Quits: santiagopim (~user@90.166.59.133) (Read error: Connection reset by peer)
[11:43:12] *** Joins: santiagopim (~user@90.166.59.133)
[11:49:13] *** Quits: santiagopim (~user@90.166.59.133) (Ping timeout: 250 seconds)
[11:52:55] *** Joins: santiagopim (~user@90.166.59.133)
[11:54:17] *** Quits: santiagopim (~user@90.166.59.133) (Remote host closed the connection)
[12:21:56] *** Quits: silasfox (~sbv@xdsl-87-79-98-159.nc.de) (Ping timeout: 272 seconds)
[12:23:07] *** Joins: silasfox (~sbv@2001-4dd6-8e13-0-6f0d-fa0c-ffdd-c563.ipv6dyn.netcologne.de)
[12:23:12] <il> beach, 68 seconds late
[12:23:50] <beach> I fully intend to continue to disappoint you. 
[12:23:57] <il> ahahhah
[12:24:04] <il> I fully intend to keep track of it
[12:24:27] <beach> Feel free.  Sound pretty boring though.
[12:28:58] *** Joins: vats (~vats@103.70.83.249)
[12:36:23] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:38:17] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[13:19:07] *** Joins: makomo (~makomo@user/makomo)
[13:45:12] *** Joins: tzagorsky (~textual@37.57.0.211)
[13:45:47] *** Quits: tzagorsky (~textual@37.57.0.211) (Client Quit)
[13:53:20] *** Joins: selwyn (~selwyn@user/selwyn)
[14:02:35] *** Joins: santiagopim (~user@90.166.59.133)
[14:42:26] *** Joins: st_iron (uid370243@id-370243.highgate.irccloud.com)
[15:07:32] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:09:08] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[15:24:13] *** Joins: random-nick (~random-ni@87.116.181.197)
[15:53:22] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:53:35] <lisp123> I have a question
[15:53:59] <pjb> What a coincidence! We may have answers.
[15:54:22] <lisp123> pjb: :D
[15:54:58] <lisp123> What is the purpose of the gensym in #'(lambda (,(gensym)) ,expression))
[15:55:05] <lisp123> (this is within a macro)
[15:57:01] <st_iron> good afternoon
[15:57:02] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[15:58:13] <pjb> this is to accept a parameter, but to avoid shadowing a free variable  of the expression.
[15:59:04] <lisp123> pjb: Thanks, that is starting to make sense. But can the expression ever access that parameter if it is a gensym?
[16:00:09] <pjb> lisp123: eg. see https://termbin.com/647x
[16:00:59] <pjb> lisp123: if it's a fresh gensym that is just returned from (gensym), it's impossible, because gensym just created a new symbol, so there's no (conforming) way  for the expression to have a reference to it.
[16:01:06] <lisp123> pjb: thanks! I will read through it carefully, so it may take me some time now
[16:01:30] <pjb> lisp123: non-conformingly, notably using debugging implementation specific features, it could be possible to get a reference to the fresh symbol, and use it in the expression.
[16:01:49] <pjb> for example, you could add a break trace on make-symbol, and store the result in the expression.
[16:02:07] <pjb> But you'd get what you deserve in that case.
[16:02:34] <pjb> print the `(…) forms.
[16:03:06] <pjb> https://termbin.com/2wh6b
[16:03:44] <pjb> Note, to avoid compilation error whe you generate a gensym argument like that, it could be nice to declare it ignore:
[16:04:02] <pjb> (let ((param (gensym))) `(lambda (,param) (declare (ignore param)) ,expression))
[16:04:14] <pjb> I mean: (let ((param (gensym))) `(lambda (,param) (declare (ignore ,param)) ,expression))
[16:04:49] <lisp123> pjb: thanks, I can understand the two examples and it makes sense
[16:05:05] <lisp123> But why not just (lambda () ,expression)?
[16:06:11] <pjb> lisp123: sometimes you have to provide a function with a specific signature.
[16:06:33] <lisp123> Interesting that it gives an error saying it requires an argument
[16:06:39] <pjb> for example, a :key function needs an object.
[16:06:58] <pjb> (find nil '(1 2 3) :key (function oddp)) #| --> 2 |# 
[16:07:20] <pjb> (find nil '(1 2 3) :key (lambda (object) (declare (ignore object)) (zerop (random 2)))) #| --> 1 |# 
[16:07:32] <pjb> You couldn't write:
[16:07:39] <pjb> (find nil '(1 2 3) :key (lambda () (zerop (random 2)))) #| ERROR: Too many arguments in call to #<Anonymous Function #x30200495A79F>:
[16:07:40] <pjb> 1 argument provided, at most 0 accepted.  |# 
[16:08:02] <pjb> In case where the function always return the same value, you can use constantly
[16:08:11] <pjb> (find nil '(1 2 3) :key (constantly nil)) #| --> 1 |# 
[16:08:26] <pjb> the functions returned by constantly take any number of arguments and ignores them.
[16:08:37] <lisp123> yes, that makes sense (and i see examples throughout CLHS on that)
[16:08:50] <lisp123> I am trying to read through your 2 examples and see why they need an argument
[16:09:08] <lisp123> https://termbin.com/647x
[16:09:22] <lisp123> is it because expression is +
[16:09:36] <pjb> (defmacro repeatitively (expression) (let ((params (gensym))) `(lambda (&rest ,params) (declare (ignore ,params)) ,expression))) (map-into (make-array 3) (repeatitively (1+ (random 6)))) #| --> #(2 6 6) |# 
[16:09:59] <pjb> No, it's unrelated to the expression.
[16:10:14] <pjb> It's because the lambda is used in a (funcall … 33) <- with 1 argument.
[16:10:23] <lisp123> ahhhhh
[16:10:29] <lisp123> Got it
[16:10:40] <lisp123> Thanks!
[16:10:50] <pjb> Here, the function returned by repeatitively is used by map-into with 0 arguments.
[16:11:13] <pjb> But here, it can be called with 2 arguments: (map-into (make-array 3) (repeatitively (1+ (random 6))) (vector 1 2 3) "abc") #| --> #(3 5 3) |# 
[16:11:17] <pjb> they're still ignored ;-)
[16:12:09] <lisp123> yup that makes sense
[16:13:21] <lisp123> Do you find it interesting that CL forces these functions to have a certain number of arguments?
[16:14:01] <lisp123> and doesn't just treat them as &optionals?
[16:15:00] <pjb> usually those arguments are used.
[16:15:12] <pjb> (map-into (make-array 3) (function list) (vector 1 2 3) "abc") #| --> #((1 #\a) (2 #\b) (3 #\c)) |# 
[16:16:02] <pjb> the question is rather whether you find it interesting to be able to pass functions that are independent of their arguments (ie, not functions, but constants) where a function is expected?
[16:16:11] <pjb> Well, at least it's possible, so this is positive.
[16:16:19] <lisp123> Yes
[16:16:38] <pjb> But probably if it is expected a function taking arguments, you should provide a function that processes those arguments.
[16:16:45] <lisp123> The example I had in mind was merge
[16:16:49] <pjb> Notably because in lisp we have closures.
[16:16:53] <lisp123> http://clhs.lisp.se/Body/f_merge.htm
[16:17:11] <pjb> In C, since they don't have closure, it's usual to pass an additionnal void* argument, and it is possible that you ignore it.
[16:17:12] <lisp123> I remember having to write a lambda accepting an argument just to return T
[16:17:36] <pjb> but that kind of additionnal void* userdata argument in lisp would be useless, since you can use closures.
[16:17:42] <lisp123> That makes sense (closures)
[16:17:48] <pjb> lisp123: (constantly t)
[16:17:54] <pjb> so you don't have to write it ;-)
[16:17:59] <pjb> the macro constantly can do it for you.
[16:18:33] <lisp123> pjb: Wow! Now isn't that something
[16:18:40] <pjb> These situations occur when you design an API with extensibility in mind.
[16:19:01] <pjb> So the additionnal arguments can be convenient in some case, even if they're not always used.
[16:19:21] <pjb> And even if no argument at all is used, it's just a special case, the arguments are there for when you need them.
[16:19:39] <lisp123> Yes for sure, it really does make CL a very useful language in being able to write your :test functions
[16:20:09] <pjb> Sometimes, it may be for historical reason. The API doesn't change for compatibility, but a new version don't need the old argument, or find the data in other ways.
[16:20:50] <lisp123> pjb: that makes total sense, one wouldn't want to change the API
[16:21:19] <lisp123> I like &key arguments for that reason too
[16:21:40] <lisp123> order no longer matters, and it also makes the calls a bit easier to read, albeit at the cost of word count
[16:22:51] <lisp123> pjb: thanks for the help
[16:27:33] <pjb> My pleasure.
[17:13:33] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[17:43:40] *** Quits: vats (~vats@103.70.83.249) (Ping timeout: 272 seconds)
[17:53:11] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[17:54:51] *** Joins: selwyn (~selwyn@user/selwyn)
[18:01:07] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[18:01:31] *** Joins: selwyn (~selwyn@user/selwyn)
[18:05:34] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:07:07] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:08:08] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[18:15:45] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[18:32:43] *** Joins: selwyn (~selwyn@user/selwyn)
[18:34:59] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[18:35:23] *** Joins: selwyn (~selwyn@user/selwyn)
[19:04:45] *** Joins: dnaeon (~dnaeon@46.10.222.189)
[19:06:48] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 256 seconds)
[19:40:35] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[19:40:42] *** Joins: thrig (~thrig@65.113.153.50)
[19:40:59] *** Joins: hendursaga (~weechat@user/hendursaga)
[19:41:30] *** Joins: vats (~vats@103.70.83.249)
[19:58:57] *** Quits: silasfox (~sbv@2001-4dd6-8e13-0-6f0d-fa0c-ffdd-c563.ipv6dyn.netcologne.de) (Ping timeout: 258 seconds)
[20:27:03] *** Quits: dnaeon (~dnaeon@46.10.222.189) (Quit: EOF)
[20:52:14] *** Quits: st_iron (uid370243@id-370243.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[21:09:23] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[21:24:27] *** Joins: makomo_ (~makomo@user/makomo)
[21:27:30] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 240 seconds)
[21:28:33] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[21:40:24] *** Joins: dnaeon (~dnaeon@46.10.222.189)
[21:43:47] *** Quits: dnaeon (~dnaeon@46.10.222.189) (Changing host)
[21:43:47] *** Joins: dnaeon (~dnaeon@user/dnaeon)
[21:44:05] *** Quits: dnaeon (~dnaeon@user/dnaeon) (Client Quit)
[21:44:27] *** Joins: dnaeon (~dnaeon@46.10.222.189)
[21:44:28] *** Quits: dnaeon (~dnaeon@46.10.222.189) (Changing host)
[21:44:28] *** Joins: dnaeon (~dnaeon@user/dnaeon)
[21:45:30] *** Quits: dnaeon (~dnaeon@user/dnaeon) (Client Quit)
[22:45:30] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[23:01:54] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[23:29:22] *** Quits: mala (~mala@user/malaclyps) (Ping timeout: 240 seconds)
[23:31:00] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 252 seconds)
[23:38:47] *** Joins: JoshYoshi (~user@154.57.3.82)
[23:38:53] *** Quits: JoshYoshi (~user@154.57.3.82) (Remote host closed the connection)
[23:39:36] *** Quits: Josh_2 (~user@37.25.47.130) (Ping timeout: 272 seconds)
[23:41:34] *** lonjil2 is now known as lonjil
[23:43:37] *** Joins: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca)
[23:54:01] *** Joins: selwyn (~selwyn@user/selwyn)
