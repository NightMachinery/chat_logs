[00:06:27] *** Quits: alx741 (~alx741@186.178.108.219) (Ping timeout: 264 seconds)
[00:13:42] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[00:13:57] *** Joins: hololeap (~hololeap@user/hololeap)
[00:17:14] *** Joins: vicfred (~vicfred@user/vicfred)
[00:20:23] *** Joins: alx741 (~alx741@186.178.108.244)
[00:24:06] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[00:24:31] *** Joins: hololeap (~hololeap@user/hololeap)
[00:29:31] *** Joins: hololeap_ (~hololeap@user/hololeap)
[00:31:15] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[00:33:46] *** Joins: hololeap (~hololeap@user/hololeap)
[00:35:48] *** Quits: hololeap_ (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[00:36:04] *** Joins: Kaiepi (~Kaiepi@156.34.44.192)
[00:42:48] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:d09a:3c35:dab9:95ad)
[00:53:30] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[01:04:51] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[01:11:43] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:d09a:3c35:dab9:95ad) (Quit: gone to sleep. ZZZzzz…)
[01:21:28] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:d09a:3c35:dab9:95ad)
[01:34:33] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:39:25] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[01:57:24] *** Quits: nf (~n@monade.li) (Quit: Fairfarren.)
[01:58:12] *** Joins: nf (~n@monade.li)
[02:12:07] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[02:13:54] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[02:51:41] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[03:02:27] *** Joins: libertyprime (~libertypr@118-92-79-43.dsl.dyn.ihug.co.nz)
[03:03:03] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:d09a:3c35:dab9:95ad) (Quit: gone to sleep. ZZZzzz…)
[03:06:36] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:2d7f:4f3b:6a60:c865)
[03:34:03] *** Quits: edwardk (sid47016@haskell/developer/edwardk) (Ping timeout: 264 seconds)
[03:35:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:37:14] *** Joins: edwardk (sid47016@haskell/developer/edwardk)
[04:10:03] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[04:30:11] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[04:56:12] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Quit: ChaiTRex)
[04:57:56] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[05:16:09] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[05:46:28] *** Quits: learner-monad (~ehanneken@user/learner-monad) (Quit: WeeChat 3.3)
[06:05:54] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[06:06:02] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:32:42] *** Joins: hololeap (~hololeap@user/hololeap)
[06:39:56] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[06:45:29] *** Parts: ServerStatsDisco (~serversta@2001:470:69fc:105::1a) ()
[07:06:11] *** Joins: zaquest (~notzaques@5.130.79.72)
[07:13:15] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:14:32] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[08:17:15] *** Quits: benin (~benin@183.82.179.164) (Ping timeout: 264 seconds)
[08:21:21] *** Joins: benin (~benin@183.82.179.164)
[08:36:30] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:04:58] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:2d7f:4f3b:6a60:c865) (Ping timeout: 265 seconds)
[09:10:39] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[09:34:56] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:1430:118d:f25f:43fa)
[09:51:53] *** Quits: a1paca (~a1paca@user/a1paca) (Quit: ZNC 1.8.2 - https://znc.in)
[09:52:12] *** Joins: a1paca (~a1paca@user/a1paca)
[10:30:49] *** Quits: libertyprime (~libertypr@118-92-79-43.dsl.dyn.ihug.co.nz) (Quit: leaving)
[11:07:12] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:29:58] *** Joins: libertyprime (~libertypr@203.211.73.21)
[11:41:34] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[11:42:35] *** Quits: edwardk (sid47016@haskell/developer/edwardk) (Ping timeout: 250 seconds)
[11:43:39] *** Quits: dmj` (sid72307@hampstead.irccloud.com) (Ping timeout: 264 seconds)
[11:45:15] *** Joins: dmj` (sid72307@id-72307.hampstead.irccloud.com)
[11:45:46] *** Joins: edwardk (sid47016@haskell/developer/edwardk)
[11:46:03] *** Quits: sclv (sid39734@haskell/developer/sclv) (Ping timeout: 264 seconds)
[11:47:58] *** Joins: sclv (sid39734@haskell/developer/sclv)
[12:00:52] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:47:28] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:28] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:31] *** allbery_b is now known as geekosaur
[12:48:45] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:1430:118d:f25f:43fa) (Quit: gone to sleep. ZZZzzz…)
[12:56:12] *** Quits: hendi (sid489601@lymington.irccloud.com) (Ping timeout: 268 seconds)
[12:57:09] *** Joins: hendi (sid489601@id-489601.lymington.irccloud.com)
[13:17:15] *** Quits: SanchayanMaity (sid478177@hampstead.irccloud.com) (Ping timeout: 264 seconds)
[13:19:37] *** Joins: SanchayanMaity (sid478177@id-478177.hampstead.irccloud.com)
[14:31:54] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[14:32:39] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:34:03] *** Quits: mvk (~mvk@2607:fea8:5cc1:fa00::4702) (Ping timeout: 264 seconds)
[14:43:03] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[14:43:52] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:49:06] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[14:49:35] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:52:16] *** Joins: pfurla (~pfurla@201.17.118.230)
[15:00:07] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:00:46] *** Quits: libertyprime (~libertypr@203.211.73.21) (Ping timeout: 245 seconds)
[15:00:58] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:09:01] *** Joins: libertyprime (~libertypr@118-92-79-43.dsl.dyn.ihug.co.nz)
[15:33:09] *** Quits: benin (~benin@183.82.179.164) (Quit: Ping timeout (120 seconds))
[15:33:28] *** Joins: benin (~benin@183.82.179.164)
[17:06:11] *** Joins: wei2912 (~wei2912@116.88.103.128)
[17:11:15] *** Quits: libertyprime (~libertypr@118-92-79-43.dsl.dyn.ihug.co.nz) (Ping timeout: 264 seconds)
[17:26:46] *** Quits: alx741 (~alx741@186.178.108.244) (Quit: alx741)
[17:27:03] *** Joins: alx741 (~alx741@186.178.108.244)
[17:38:06] *** Quits: pfurla (~pfurla@201.17.118.230) (Read error: Connection reset by peer)
[17:38:33] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:7d52:bf34:226e:199c)
[18:05:56] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:7d52:bf34:226e:199c) (Quit: gone to sleep. ZZZzzz…)
[18:09:06] *** Joins: pfurla (~pfurla@201.17.118.230)
[18:40:04] *** Quits: pfurla (~pfurla@201.17.118.230) (Quit: gone to sleep. ZZZzzz…)
[19:28:27] *** Quits: wei2912 (~wei2912@116.88.103.128) (Quit: Lost terminal)
[19:30:07] *** Quits: pyriphlegeton[m] (~pyriphleg@2001:470:69fc:105::1:1f49) (Quit: You have been kicked for being idle)
[19:34:06] *** Quits: hendi (sid489601@id-489601.lymington.irccloud.com) (Ping timeout: 245 seconds)
[19:34:51] *** Quits: ProofTechnique (sid79547@id-79547.ilkley.irccloud.com) (Read error: Connection reset by peer)
[19:35:02] <perryprog> Is there a better way to do maximumBy (\(_, a) (_, b) -> compare a b) of some [(a, Int)]?
[19:35:39] <perryprog> To be more specific, I'm doing fst $ maximumBy (\(_, a) (_, b) -> compare a b) $ (some stuff)
[19:36:17] *** Joins: ProofTechnique (sid79547@5.254.36.60)
[19:36:18] *** Quits: enemeth79 (sid309041@lymington.irccloud.com) (Read error: Connection reset by peer)
[19:36:18] <geekosaur> maximumBy (comparing snd) ?
[19:36:27] <perryprog> o
[19:36:55] *** Joins: enemeth79 (sid309041@id-309041.lymington.irccloud.com)
[19:37:01] *** Quits: edwardk (sid47016@haskell/developer/edwardk) (Ping timeout: 245 seconds)
[19:37:09] <geekosaur> and more generally there's on
[19:37:12] <geekosaur> :t on
[19:37:12] *** Joins: hendi (sid489601@id-489601.lymington.irccloud.com)
[19:37:13] <lambdabot> (b -> b -> c) -> (a -> b) -> a -> a -> c
[19:37:37] <geekosaur> used as for example (compare `on` snd)
[19:37:51] <perryprog> :O
[19:37:57] *** Quits: SanchayanMaity (sid478177@id-478177.hampstead.irccloud.com) (Ping timeout: 250 seconds)
[19:38:02] <perryprog> comparing is a cool function. Didn't know about that one.
[19:38:04] <geekosaur> comparing is just shorthand for that
[19:38:07] * perryprog nods
[19:38:36] <merijn> comparing and on are both cool :p
[19:38:46] *** Joins: edwardk (sid47016@haskell/developer/edwardk)
[19:39:03] <perryprog> oh yeah, well ur face is cool
[19:39:05] <perryprog> ha gotteem
[19:39:13] *** Joins: SanchayanMaity (sid478177@id-478177.hampstead.irccloud.com)
[19:46:39] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[19:57:02] <perryprog> Oh, there doesn't happen to be any similarly nice simplification for something like map (\n -> (n, collatzLength n)) is there?
[19:58:16] <geekosaur> :t (id &&&)
[19:58:17] <lambdabot> (b -> c') -> b -> (b, c')
[19:58:47] <geekosaur> &&& is in Control.Arrow
[19:58:52] <perryprog> wow
[19:58:56] <sshine> (id &&& succ) 5
[19:59:02] <sshine> > (id &&& succ) 5
[19:59:04] <lambdabot>  (5,6)
[20:11:11] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:7d52:bf34:226e:199c)
[20:22:30] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:27:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[20:28:08] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:7d52:bf34:226e:199c) (Quit: gone to sleep. ZZZzzz…)
[20:31:16] <perryprog> (Trying to avoid sharing the source, as it's a project euler solution) So in other languages I'm usually used to having to add any memorization of a pure function by hand and maintaining a map of inputs to outputs and looking up an input in that map whenever I call said function. Is there... some sort of haskell magic that is doing this for me?
[20:33:07] <perryprog> In this specific case, I have a function that's being defined in a where clause and is going to be called in a way that would be hugely benefited by memorization. My implementation is performing significantly faster than I expected, and I'm not sure if this is just because the problem wasn't as hard as I thought or if there's some magic Haskell stuff happening.
[20:38:31] <geekosaur> stuff in where clauses isn't typically memoized; only top level functions are, and that only if recursive and monomorphically typed (and a few other restrictions)
[20:38:54] <geekosaur> you could look at the Core output to see what the compiler is doing, but it takes some experience to read it
[20:39:40] <perryprog> Hm, alright. So is there any way to get that sort of memorization within a function defined in a where clause?
[20:42:07] <geekosaur> I think, not without wrapping it in a monad that does the memoization
[20:45:12] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:7d52:bf34:226e:199c)
[20:45:40] <perryprog> Monads don't scare me!
[20:46:21] <geekosaur> maybe not, but you may have to restructure your solution around the monad so it can memoize
[20:47:18] <perryprog> That's no biggy—it solves the problem in ≈ 20 seconds already, but it's always fun to get that lower
[20:47:43] <perryprog> Any tips on where to look to get started for this type of... jawn?
[20:53:26] <geekosaur> https://hackage.haskell.org/package/monad-memo is what I was thinking of
[21:04:59] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:7d52:bf34:226e:199c) (Quit: gone to sleep. ZZZzzz…)
[21:23:18] <perryprog> Hmm. It'd be kinda nice to not resort to any external packages for this, though, but that does look pretty intriguing.
[21:23:48] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Ping timeout: 276 seconds)
[21:24:27] <geekosaur> you could probably build your own but you'd probably still end up depending on mtl and transformers
[21:26:04] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[21:36:20] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[21:36:47] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[21:47:28] *** Joins: hololeap_ (~hololeap@user/hololeap)
[21:47:51] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[21:57:54] *** Joins: hololeap (~hololeap@user/hololeap)
[21:58:15] *** Quits: hololeap_ (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[22:08:47] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:42:27] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[22:45:33] *** Joins: mvk (~mvk@2607:fea8:5cc1:fa00::4702)
[23:17:17] <dminuoso> perryprog: first'/second' from Strong are exactly that thing.
[23:17:24] <dminuoso> % import Data.Profunctor
[23:17:25] <yahb> dminuoso:
[23:17:28] <dminuoso> % :t second' ord
[23:17:28] <yahb> dminuoso: (c, Char) -> (c, Int)
[23:17:42] <dminuoso> Or.. mm. Did I misread the above?
[23:18:16] <dminuoso> My head is pouding quite badly at the moment, cant keep a thought
