[00:04:56] *** Joins: audio (~audio@user/audio)
[00:14:15] *** Quits: GSOC725 (~GSOC725@2600:8804:189:8800:49a4:762e:398b:b489) (Quit: Client closed)
[00:15:11] *** Quits: idontneedanick (~idontneed@h-85-24-184-105.A189.priv.bahnhof.se) (Ping timeout: 260 seconds)
[00:29:13] *** Joins: GSOC725 (~GSOC725@2600:8804:189:8800:49a4:762e:398b:b489)
[00:30:23] *** Quits: ekathva (~ekathva@2001:999:250:8f1f:9d72:5a3d:d0:fe01) (Quit: Leaving)
[00:33:58] *** Joins: mattil (~mattil@87-92-46-217.bb.dnainternet.fi)
[00:38:25] *** Quits: mattil (~mattil@87-92-46-217.bb.dnainternet.fi) (Ping timeout: 248 seconds)
[00:50:04] *** Quits: MerrinX (~merrinx@ti0028a400-2319.bb.online.no) (Quit: WeeChat 3.4.1)
[00:53:12] *** Joins: idontneedanick (~idontneed@h-85-24-184-105.A189.priv.bahnhof.se)
[00:55:53] *** Joins: aclark (~aclark@pool-108-51-184-139.washdc.fios.verizon.net)
[01:00:50] *** Quits: nathanhi (~nathanhi@user/nathanhi) (Quit: bye)
[01:02:32] *** Joins: nathanhi (~nathanhi@user/nathanhi)
[01:04:22] *** Quits: aclark (~aclark@pool-108-51-184-139.washdc.fios.verizon.net) (Ping timeout: 250 seconds)
[01:10:11] *** Quits: GSOC725 (~GSOC725@2600:8804:189:8800:49a4:762e:398b:b489) (Quit: Client closed)
[01:15:01] *** Quits: idontneedanick (~idontneed@h-85-24-184-105.A189.priv.bahnhof.se) (Ping timeout: 268 seconds)
[01:17:33] *** Quits: thiras (~thiras@user/thiras) (Remote host closed the connection)
[01:17:53] *** Joins: thiras (~thiras@user/thiras)
[01:19:06] *** Joins: LuxuryMode (uid91005@id-91005.ilkley.irccloud.com)
[01:19:29] *** Joins: lucas_ (~lucascast@192-140-51-210.static.oncabo.net.br)
[01:21:52] *** Quits: lucascastro (~lucascast@192-140-51-210.static.oncabo.net.br) (Ping timeout: 260 seconds)
[02:07:24] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:16:41] *** Quits: audio (~audio@user/audio) (Ping timeout: 268 seconds)
[02:19:13] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 248 seconds)
[02:41:57] *** Joins: idontneedanick (~idontneed@h-85-24-184-105.A189.priv.bahnhof.se)
[02:48:41] *** Joins: PaulWay[w] (~PaulWay@2001:44b8:1110:f800:9d3c:62ed:cd4a:aed4)
[02:54:18] *** Joins: aclark (~aclark@pool-108-51-184-139.washdc.fios.verizon.net)
[03:02:44] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[03:07:39] *** Joins: audio (~audio@user/audio)
[03:23:55] *** Quits: henbruas (~henbruas@ti0003a400-6569.bb.online.no) (Quit: ZNC 1.8.2 - https://znc.in)
[03:24:33] *** Joins: henbruas (~henbruas@ti0003a400-6569.bb.online.no)
[03:34:01] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:38:15] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 240 seconds)
[03:45:10] *** Quits: PaulWay[w] (~PaulWay@2001:44b8:1110:f800:9d3c:62ed:cd4a:aed4) (Ping timeout: 250 seconds)
[03:57:17] *** Joins: GSOC725 (~GSOC725@2600:8804:189:8800:49a4:762e:398b:b489)
[03:57:59] *** Joins: PaulWay[w] (~PaulWay@pa49-186-239-233.pa.vic.optusnet.com.au)
[04:12:40] *** Quits: PaulWay[w] (~PaulWay@pa49-186-239-233.pa.vic.optusnet.com.au) (Ping timeout: 260 seconds)
[04:19:22] *** Quits: aclark (~aclark@pool-108-51-184-139.washdc.fios.verizon.net) (Ping timeout: 250 seconds)
[04:25:40] *** Joins: PaulWay[w] (~PaulWay@2001:44b8:1110:f800:9d3c:62ed:cd4a:aed4)
[04:27:16] *** Quits: GSOC725 (~GSOC725@2600:8804:189:8800:49a4:762e:398b:b489) (Quit: Client closed)
[04:27:25] *** Quits: audio (~audio@user/audio) (Ping timeout: 250 seconds)
[04:31:20] *** Joins: aclark (~aclark@pool-108-51-184-139.washdc.fios.verizon.net)
[04:35:26] *** Quits: PaulWay[w] (~PaulWay@2001:44b8:1110:f800:9d3c:62ed:cd4a:aed4) (Ping timeout: 250 seconds)
[04:36:15] *** Joins: PaulWay[w] (~PaulWay@2001:44b8:1110:f800:9d3c:62ed:cd4a:aed4)
[04:37:17] *** Joins: zingos3 (~zingos@143.198.48.220)
[04:37:33] *** Joins: cryocaustik4 (~cryocaust@user/cryocaustik)
[04:38:06] *** Quits: zingos (~zingos@143.198.48.220) (Read error: Connection reset by peer)
[04:38:06] *** zingos3 is now known as zingos
[04:38:14] *** Quits: cryocaustik (~cryocaust@user/cryocaustik) (Read error: Connection reset by peer)
[04:38:14] *** cryocaustik4 is now known as cryocaustik
[04:38:27] *** Quits: shodan45 (~quassel@107.161.22.155) (Remote host closed the connection)
[04:38:52] *** Quits: aclark (~aclark@pool-108-51-184-139.washdc.fios.verizon.net) (Ping timeout: 250 seconds)
[04:39:15] *** Quits: wez (~wez@about/web/wez) (Ping timeout: 256 seconds)
[04:39:35] *** Joins: shodan45 (~quassel@107.161.22.155)
[04:41:02] *** Joins: wez (~wez@about/web/wez)
[04:42:57] *** Joins: Spr0cket- (sprocket@user/Spr0cket)
[04:43:13] *** Quits: Spr0cket (sprocket@user/Spr0cket) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: pucko (~pucko@static.244.198.216.95.clients.your-server.de) (Ping timeout: 256 seconds)
[04:43:49] *** Spr0cket- is now known as Spr0cket
[04:44:14] *** Joins: pucko (~pucko@static.244.198.216.95.clients.your-server.de)
[04:44:21] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Ping timeout: 256 seconds)
[04:44:29] *** Joins: fjmorazan_ (~quassel@user/fjmorazan)
[04:54:06] *** Quits: kostkon_ (~androirc@athedsl-394286.home.otenet.gr) (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
[05:23:40] *** Joins: yanchai (~yanchai@124.6.141.226)
[05:23:57] *** Quits: relight (~relight@user/relight) (Ping timeout: 250 seconds)
[05:24:12] *** Joins: relight (~relight@user/relight)
[05:40:49] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[06:31:52] *** Joins: schinckel (uid38120@user/schinckel)
[06:38:02] *** Joins: idontnee_ (~idontneed@h-85-24-184-105.A189.priv.bahnhof.se)
[06:39:02] *** Joins: Alan3 (~alan@user/alan)
[06:39:23] *** Quits: ops (~ops@user/echelon) (Ping timeout: 256 seconds)
[06:39:58] *** Joins: brsc2910 (~Thunderbi@109.255.244.60)
[06:40:08] *** Joins: Lartza_ (~lartza@user/lartza)
[06:40:09] *** Joins: c17r_ (~c17r@c17r.com)
[06:40:31] *** Quits: idontneedanick (~idontneed@h-85-24-184-105.A189.priv.bahnhof.se) (Ping timeout: 256 seconds)
[06:40:31] *** Quits: noyb (~noyb@user/noyb) (Ping timeout: 256 seconds)
[06:40:31] *** Quits: c17r (~c17r@c17r.com) (Ping timeout: 256 seconds)
[06:40:31] *** Quits: Lartza (lartza@user/lartza) (Ping timeout: 256 seconds)
[06:40:31] *** Quits: queue- (~nerd@user/queue/x-7267619) (Ping timeout: 256 seconds)
[06:41:05] *** Quits: Alan (~alan@user/alan) (Ping timeout: 256 seconds)
[06:41:05] *** Quits: ST47 (~ST47@wikimedia/st47) (Ping timeout: 256 seconds)
[06:41:05] *** Quits: ses1984 (~stephanst@128.27.196.35.bc.googleusercontent.com) (Ping timeout: 256 seconds)
[06:41:05] *** Alan3 is now known as Alan
[06:41:39] *** Quits: brsc2909 (~Thunderbi@109.255.244.60) (Ping timeout: 256 seconds)
[06:41:39] *** brsc2910 is now known as brsc2909
[06:42:13] *** Joins: noyb (~noyb@user/noyb)
[06:42:49] *** Joins: ses1984 (~stephanst@128.27.196.35.bc.googleusercontent.com)
[06:43:26] *** Joins: tomate (~hubrecht@125.ip-51-178-27.eu)
[06:44:17] *** Joins: GSOC725 (~GSOC725@2600:8804:189:8800:49a4:762e:398b:b489)
[06:46:24] *** Joins: ops (~ops@user/echelon)
[06:47:08] *** Quits: LuxuryMode (uid91005@id-91005.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[06:47:44] *** Quits: ubernostrum (~jbennett@75-37-202-116.lightspeed.snmtca.sbcglobal.net) (Ping timeout: 246 seconds)
[06:54:22] *** Joins: ST47 (~ST47@wikimedia/st47)
[07:13:14] *** Quits: GSOC725 (~GSOC725@2600:8804:189:8800:49a4:762e:398b:b489) (Quit: Client closed)
[07:23:24] *** Joins: jeffre (~user@c-75-68-113-41.hsd1.nh.comcast.net)
[07:29:23] *** Joins: ubernostrum (~jbennett@75-37-202-116.lightspeed.snmtca.sbcglobal.net)
[07:34:17] *** Quits: ubernostrum (~jbennett@75-37-202-116.lightspeed.snmtca.sbcglobal.net) (Ping timeout: 246 seconds)
[07:45:37] *** Joins: ubernostrum (~jbennett@75-37-202-116.lightspeed.snmtca.sbcglobal.net)
[07:50:02] *** Quits: ubernostrum (~jbennett@75-37-202-116.lightspeed.snmtca.sbcglobal.net) (Ping timeout: 246 seconds)
[07:54:35] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[07:54:59] *** Quits: GinFuyou (~GinFuyou@2a04:52c0:101:a4e::) (Ping timeout: 250 seconds)
[07:55:45] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[07:57:58] *** Quits: sreve_ (~quassel@p549d73f7.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[07:58:09] *** Joins: sreve (~quassel@p4ff44df3.dip0.t-ipconnect.de)
[08:00:01] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 248 seconds)
[08:06:57] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 268 seconds)
[08:16:42] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[08:16:52] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[08:16:58] *** Joins: ubernostrum (~jbennett@75-37-202-116.lightspeed.snmtca.sbcglobal.net)
[08:21:53] *** Quits: ubernostrum (~jbennett@75-37-202-116.lightspeed.snmtca.sbcglobal.net) (Ping timeout: 248 seconds)
[08:33:23] *** Joins: ubernostrum (~jbennett@75-37-202-116.lightspeed.snmtca.sbcglobal.net)
[08:38:24] *** Quits: ubernostrum (~jbennett@75-37-202-116.lightspeed.snmtca.sbcglobal.net) (Ping timeout: 268 seconds)
[08:39:31] *** Quits: TrentP (~quassel@c-24-20-193-248.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[08:40:01] *** Joins: TrentP (~quassel@c-24-20-193-248.hsd1.or.comcast.net)
[08:43:08] *** Joins: ekathva (~ekathva@2001:999:250:8f1f:76db:3839:8c62:de89)
[08:43:21] *** Quits: Xof (~Xof@157-131-136-66.dedicated.static.sonic.net) (Quit: Bye.)
[08:48:26] *** Joins: ubernostrum (~jbennett@75-37-202-116.lightspeed.snmtca.sbcglobal.net)
[09:26:19] *** Joins: GSOC725 (~GSOC725@2600:8804:189:8800:2060:7a07:6142:fb5)
[09:39:27] *** Quits: yanchai (~yanchai@124.6.141.226) (Ping timeout: 268 seconds)
[09:39:57] *** Joins: dor (~erg@188.147.0.154.nat.umts.dynamic.t-mobile.pl)
[09:43:55] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[09:47:24] *** Joins: humanBird (~humanBird@cpe-23-241-168-220.socal.res.rr.com)
[09:48:07] <humanBird> I am not sure what the purpose of "ALLOWED_HOSTS" is.  Don't you potentially want all of the internet to access your website?
[09:50:37] *** Joins: mattil (~mattil@d54vzm2ccn6pv72-8rz-4.rev.dnainternet.fi)
[09:53:25] *** Quits: mattil (~mattil@d54vzm2ccn6pv72-8rz-4.rev.dnainternet.fi) (Read error: Connection reset by peer)
[10:00:51] *** Quits: jgee6368 (~jgee@186.80.49.20) (Ping timeout: 260 seconds)
[10:02:58] <ubernostrum> humanBird: it's not about who's allowed to connect to your website.
[10:03:26] <humanBird> what does this setting do?
[10:03:35] <ubernostrum> humanBird: many web sites run on shared servers that host lots of different sites. They use the Host header of the incoming HTTP request to determine which site will receive the request.
[10:03:41] <ubernostrum> Which is fine, normally.
[10:03:45] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[10:04:08] <ubernostrum> But if your site is set up to accept requests regardless of which site was requested in the Host header, it can cause some security issues.
[10:04:14] <ubernostrum> So Django has a setting to let you restrict that.
[10:06:16] <humanBird> that sounds more like a web server/load balancer level construct to me.
[10:06:23] <ubernostrum> Sometimes it is.
[10:06:29] <ubernostrum> But not everyone runs a load balancer.
[10:07:02] <ubernostrum> One of the main issues is that lots of things which need to construct absolute URLs (ones that include the domain) use the Host header to figure out what domain to use when building the link.
[10:07:21] <ubernostrum> If you can trick a site into acccepting a request with a bad Host header, and it does that, you are effectively tricking it into building a link to whatever domain you choose.
[10:07:27] <ubernostrum> This is where the security issues come in.
[10:08:10] *** Joins: mattil (~mattil@d54vzm2ccn6pv72-8rz-4.rev.dnainternet.fi)
[10:09:38] <humanBird> hrm. i'm still a little fuzzy.  couldn't i just request the other domain's resources directly?
[10:10:25] <humanBird> what is the benefit of going through someone else's app to request this resource?  aren't tokens/session ids passed along with requests anyways?
[10:10:46] <humanBird> if i'm requesting a resource that i shouldn't have access to, the server should say "no security token, go away"
[10:12:27] <humanBird> if that other domain's services are insecure,  that doesn't seem to be my problem as a django server admin.
[10:15:14] *** Joins: Luhmanji (~irc@user/Luhmanji)
[10:17:04] <Luhmanji> hello, i would like to create a website that draws the pages depending on a string the users enter, like a command parser just simplified
[10:17:15] <Luhmanji> can i do that with django?
[10:17:57] <humanBird> sounds like a text based game.
[10:18:02] <Luhmanji> yes
[10:18:52] <humanBird> you can always use if/else to make decisions on what was entered and do the appropriate views request from there.
[10:18:56] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[10:19:05] <PaulWay[w]> What are you trying to do Luhmanji?
[10:19:23] *** Joins: jgee636 (~jgee@186.80.49.20)
[10:19:51] <Luhmanji> i cant imagine right now how the user input could be done
[10:20:43] <PaulWay[w]> Javascript on the page.
[10:21:02] <PaulWay[w]> The question is: where is your state stored?
[10:21:19] <PaulWay[w]> What's the overall project?
[10:22:03] *** Quits: mattil (~mattil@d54vzm2ccn6pv72-8rz-4.rev.dnainternet.fi) (Remote host closed the connection)
[10:23:40] *** Joins: pepper (~pepper@user/pepper)
[10:24:43] <Luhmanji> lets see if i can figure that out
[10:25:43] <Luhmanji> thanks so far
[10:26:27] <PaulWay[w]> You're not really giving us much to go on here.
[10:29:09] <serafeim> hey friends
[10:29:23] <serafeim> i see python supporting {1,2} for sets? which version added that ?
[10:31:18] <humanBird> i'm reading this thing and it says that the allowed hosts vulnerability only happens when you explictly use the field in the http header to do something.  that doesn't seem like it should be a server level configuration that errors the user out by default.  seems like a bad design decision to me
[10:33:31] *** Joins: mattil (~mattil@helsinki.portalify.com)
[10:34:32] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[10:35:13] *** Joins: rob4227 (~Thunderbi@154.6.25.214)
[10:35:19] *** Joins: mattil (~mattil@helsinki.portalify.com)
[10:35:26] *** Quits: mattil (~mattil@helsinki.portalify.com) (Read error: Connection reset by peer)
[10:35:39] *** Quits: GSOC725 (~GSOC725@2600:8804:189:8800:2060:7a07:6142:fb5) (Quit: Client closed)
[10:36:49] *** Quits: rob4226 (~Thunderbi@154.6.25.214) (Ping timeout: 256 seconds)
[10:36:49] *** rob4227 is now known as rob4226
[10:37:46] *** Joins: xythercoder (~xythecode@157.41.132.8)
[10:39:57] <Luhmanji> the problem is that i try to use the experience of you guys, while i dont know yet where i wanna go
[10:41:49] <PaulWay[w]> What's your idea so far?
[10:41:57] <Luhmanji> choosing the wrong interface could be the death of the whole project
[10:42:15] <Luhmanji> okay, lets see
[10:42:49] *** Joins: tenzai (~yanchai@222.127.97.162)
[10:43:11] <Luhmanji> i have a character of a story who is put into a mysterious environment which he starts to explore
[10:44:14] <Luhmanji> i want to make this interactive, so you can look at objects, move around
[10:44:29] <PaulWay[w]> You're wanting something like a text-based adventure?  Graphical?  Roguelike?
[10:44:30] <Luhmanji> like a classic multi user dungeon without fighting
[10:46:13] <serafeim> i've got a bunch of non-managed django tables. however django *does* create migrations for them! any idea why ?
[10:46:35] <PaulWay[w]> serafeim: it has to pretend that the migration happened.
[10:46:42] <PaulWay[w]> Luhmanji: Fundamentally all adventures work on state - a set of information that the game remembers about what the player has done.
[10:46:51] <serafeim> hm ok feels strange though
[10:47:01] <PaulWay[w]> So the question is: how is your server going to remember individual state for the player.
[10:47:57] <Luhmanji> PaulWay[w]: which in next step leads to the question how users authenticate and how it is done in a secure way
[10:49:44] <Luhmanji> so the website might create sensible data which is a tricky thing
[10:51:31] <PaulWay[w]> Auth is a mostly solved problem with Django - it then falls to the client browser to supply some token to identify that particular session.
[10:53:05] *** Joins: mrwick (~mrwick@user/mrwick)
[10:53:34] <PaulWay[w]> serafeim: I think of it as being so that when you change the table, the migrations check knows that the non-managed table is still correct according to its schema.
[10:57:46] <serafeim> hmmm yes probably
[10:57:56] <serafeim> well if it doesn't mess with my db i'm ok with it :)
[11:03:15] *** Joins: luigibu (~luigi@93.176.151.71)
[11:03:32] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[11:09:25] *** Quits: jgee636 (~jgee@186.80.49.20) (Quit: Ping timeout (120 seconds))
[11:09:43] *** Joins: jgee636 (~jgee@186.80.49.20)
[11:11:35] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 240 seconds)
[11:13:26] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[11:14:02] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[11:19:58] *** Quits: xythercoder (~xythecode@157.41.132.8) (Ping timeout: 268 seconds)
[11:20:11] *** Joins: xythercoder (~xythecode@157.41.44.34)
[11:24:35] *** Quits: xythercoder (~xythecode@157.41.44.34) (Ping timeout: 246 seconds)
[11:25:04] *** Joins: jmd (~user@de.cellform.com)
[11:25:19] *** Quits: jmd (~user@de.cellform.com) (Remote host closed the connection)
[11:25:55] *** Joins: xythercoder (~xythecode@157.41.77.33)
[11:30:11] *** Quits: xythercoder (~xythecode@157.41.77.33) (Ping timeout: 246 seconds)
[11:30:30] *** Joins: xythercoder (~xythecode@157.41.131.48)
[11:31:00] *** Quits: PaulWay[w] (~PaulWay@2001:44b8:1110:f800:9d3c:62ed:cd4a:aed4) (Ping timeout: 250 seconds)
[11:31:22] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 240 seconds)
[11:40:35] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[11:40:35] *** ChanServ sets mode: +v EvilDMP
[11:42:55] <serafeim> crazy
[11:43:07] <serafeim> type({}) == 'dict'. type({1}) == 'set' (!)
[11:43:11] <serafeim> how can i create an empty set ?
[11:43:32] <serafeim> i know set(). but i'd like using the {}
[11:46:57] *** Joins: iomari891 (~iomari891@102.91.5.67)
[11:53:18] *** Parts: jeffre (~user@c-75-68-113-41.hsd1.nh.comcast.net) (ERC 5.4.1 (IRC client for GNU Emacs 27.2))
[12:00:55] *** Joins: lucas__ (~lucascast@192-140-51-210.static.oncabo.net.br)
[12:01:21] *** Quits: schinckel (uid38120@user/schinckel) (Quit: Connection closed for inactivity)
[12:03:47] *** Quits: lucas_ (~lucascast@192-140-51-210.static.oncabo.net.br) (Ping timeout: 246 seconds)
[12:20:45] *** Joins: epony (epony@user/epony)
[12:35:15] *** Quits: Timvde (~tim@towely.vdeynde.com) (Ping timeout: 256 seconds)
[12:36:35] *** Quits: xythercoder (~xythecode@157.41.131.48) (Quit: Konversation terminated!)
[12:41:37] *** Quits: dor (~erg@188.147.0.154.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 248 seconds)
[12:43:48] <humanBird> i'm stuck. poobernetes on digital ocean creates a loadbalancer ip for you (dyanmically).  i can't fill in the "ALLOWED_HOSTS" field because i don't know the load balancer ip before it's assinged to the kubernetes cluster.  it's random.  but to deploy, I have to build an image (which contains the allowed_host code) and deploy. catch 22.
[12:46:06] <humanBird> I think i'm just going to put * for allowed_hosts
[12:47:49] *** Joins: Timvde (~tim@towely.vdeynde.com)
[12:52:20] *** Quits: Luhmanji (~irc@user/Luhmanji) (Quit: WeeChat 3.0)
[12:54:31] <humanBird> oh. they assign as tatic ip for your cluster. ti's just hidden away somewhere in the ui
[12:58:11] *** Quits: iomari891 (~iomari891@102.91.5.67) (Ping timeout: 260 seconds)
[13:09:15] *** Quits: en7ropy (~en7ropy@185.187.243.161) (Quit: Leaving)
[13:17:38] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 260 seconds)
[13:19:42] <carlio> humanBird: you can use CIDR blocks instead with https://pypi.org/project/django-allow-cidr/
[13:20:54] *** Quits: cryocaustik (~cryocaust@user/cryocaustik) (Quit: The Lounge - https://thelounge.chat)
[13:21:51] *** Joins: cryocaustik (~cryocaust@user/cryocaustik)
[13:28:22] *** Quits: dkr13 (~dkr13@dkr13.de) (Quit: The Lounge - https://thelounge.chat)
[13:28:59] *** Joins: dkr13 (~dkr13@dkr13.de)
[13:38:51] *** Joins: xythercoder (~xythecode@157.41.159.241)
[13:42:38] *** Joins: iomari891 (~iomari891@105.112.138.38)
[14:03:36] *** Parts: tenzai (~yanchai@222.127.97.162) ()
[14:11:40] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:17:50] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[14:17:50] *** ChanServ sets mode: +v EvilDMP
[14:21:12] *** Joins: csm3105 (~csm3105@143.red-83-48-84.staticip.rima-tde.net)
[14:39:28] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:46:47] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[14:48:08] *** Joins: haircode (~lemon@134.122.105.156)
[14:51:52] *** Joins: sepi (~sepi@fw.mnhn.lu)
[14:52:46] <sepi> Hello! How would I substitute a parameter in a string literal in a django template tag argument like {% include 'foo' with bar='hello {{baz}}' %} ?
[14:53:32] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[14:53:32] *** ChanServ sets mode: +v EvilDMP
[14:56:16] <FunkyBob> sepi: you can't really..
[14:56:48] <FunkyBob> you can pass baz itself... or maybe there's a way with {% with %} ?  ... no, perhaps not
[14:57:41] <FunkyBob> basically, without outside help you can't nest template directives
[14:58:02] <serafeim> FunkyBob: it is possible using filters
[14:58:20] <serafeim> bar="hello"|add:baz
[14:58:45] <wez> nice
[14:58:47] <FunkyBob> yes {remember the space}
[14:58:48] <wez> 10 points
[14:59:01] <FunkyBob> it's kludgy, but that should work
[14:59:24] <serafeim> it will work if baz is a string; won't work if it's an integer
[14:59:42] <serafeim> it will fail silently if it can't concat
[14:59:45] <FunkyBob> isn't there a stringifying filter? :)
[15:00:01] <serafeim> i couldn't find it
[15:00:02] <FunkyBob> all of this is suggesting... this is not the right path
[15:00:46] <FunkyBob> https://docs.djangoproject.com/en/4.0/ref/templates/builtins/#stringformat :P
[15:00:58] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[15:01:06] <serafeim> ah ok. so it could work with a with inside a with
[15:03:20] <FunkyBob> yes, but again... all this resistance from django
[15:03:22] <FunkyBob> is a hint
[15:04:40] <sepi> thanks for the hints :)
[15:05:12] <sepi> it works to some extent but not the way I was hoping for. I guess I should just do it differently
[15:05:51] <sepi> I wanted to used an object that is stringified using __str__ but that won't work here
[15:06:31] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[15:11:50] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 268 seconds)
[15:18:10] *** Joins: yanchai (~yanchai@49.145.168.191)
[15:18:14] *** Parts: yanchai (~yanchai@49.145.168.191) ()
[15:18:51] *** Joins: tenzai (~yanchai@49.145.168.191)
[15:19:53] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:20:59] *** Quits: humanBird (~humanBird@cpe-23-241-168-220.socal.res.rr.com) (Quit: Client closed)
[15:35:37] *** Joins: GinFuyou (~GinFuyou@2a04:52c0:101:a4e::)
[15:37:50] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:50:55] <sepi> I want to model generic locations that can be either of the following: StreetAddress, GeographicCoordinate, Room or Building. Do you think it makes sense to pull in GeoDjango for the GeographicCoordinate part? I basically only use it to display or pick it from a map.
[16:05:50] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[16:05:50] *** ChanServ sets mode: +v EvilDMP
[16:08:25] <GinFuyou> sepi, float \ decimal field should be enough
[16:09:10] *** Quits: newdimension (~newdimens@user/newdimension) (Quit: Ping timeout (120 seconds))
[16:09:30] *** Joins: newdimension (~newdimens@user/newdimension)
[16:09:37] <sepi> GinFuyou: thanks for your advice. It should still be easy to add it later I guess.
[16:26:50] *** Joins: slav0nic (slav0nic@python.su)
[16:27:09] *** Quits: slav0nic (slav0nic@python.su) (Remote host closed the connection)
[16:27:39] *** Joins: slav0nic (slav0nic@python.su)
[16:31:29] *** Quits: xythercoder (~xythecode@157.41.159.241) (Ping timeout: 248 seconds)
[16:43:37] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:45:37] *** Quits: django-ticketbot (~django-ti@django/ops/ticketbot) (Remote host closed the connection)
[16:45:55] *** Joins: django-ticketbot (~django-ti@django/ops/ticketbot)
[16:57:38] *** Joins: az (az@user/azz)
[16:58:52] <az> hi, I've built an API, I can see data from anywhere and I can fill it too. What is the way to get all the dictionary keys so I can do a for loop on it and create a field for each one in my app?
[16:59:11] *** Quits: lucas__ (~lucascast@192-140-51-210.static.oncabo.net.br) (Ping timeout: 246 seconds)
[17:00:19] <az> I can maybe get an existing one and empty it put it into a function and generate input fields from it, but it doesn't sound smart.
[17:01:34] *** Joins: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec)
[17:03:25] <az> I think it's called options
[17:04:28] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[17:04:28] *** ChanServ sets mode: +v EvilDMP
[17:05:36] <sepi> az: do you want to do this once or at runtime?
[17:06:36] <GinFuyou> I still don't get idea what exactly az wants to do
[17:07:54] <az> sepi, once the user request it.
[17:09:18] <az> hey Gin, Django rest framework has HTML from at the buttom of the webview where you can fill the data manually. I want that form as a dictionary so I can fill it with my own
[17:10:25] <sepi> GinFuyou: actually me neither.
[17:10:42] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:11:01] <sepi> I thought maybe bootstrapping django models from an API data types
[17:12:45] <GinFuyou> az, em what? form as dictionary? HTML in the webview?
[17:14:47] *** Joins: thiras (~thiras@user/thiras)
[17:17:26] <az> the api has json output like "title":"whatever", "name":"John", "date":"10-10-2010" I want to just get the title, name and date value in for loop and assign values to each one programtically
[17:18:27] <az> what is the proper way to do that? get the dict, empty it then replace the value and submit again?
[17:22:17] *** Joins: lucascastro (~lucascast@177-185-131-162.corp.isotelco.net.br)
[17:22:30] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 272 seconds)
[17:22:56] <sepi> az: this is a python question, not really django
[17:23:45] <GinFuyou> az, you don't have a serializer?
[17:23:52] <az> I have.
[17:24:03] <sepi> az: https://stackoverflow.com/questions/12229064/mapping-over-values-in-a-python-dictionary might be what you want
[17:24:08] <GinFuyou> Then why you need to get anything?
[17:24:26] <az> to use it in a mobile app
[17:25:00] <az> thanks sepi
[17:25:38] <GinFuyou> az, do it with serializer
[17:26:14] <GinFuyou> "mobile app" doesn't explain anything why you are trying to mess manually with API dict
[17:26:31] <az> serialize in the app, didn't think about it. I thought you use it to create an API on the backend
[17:27:12] <GinFuyou> Ok, so we are talking now about code that runs on the client?
[17:27:13] <sepi> az: but as I said, this is really not a django specific question. Next time you have python specific question, you should ask in an appropriate channel. You should also try to include all the information in your question that an outsider needs to actually understand it
[17:28:23] <az> thanks, I'll ask there later. I thought that the rest framework will just provide that dictionary I want without the extra data but it needs some python filtering.
[17:28:26] <GinFuyou> there is no reason why client using the API couldn't use a serializer itself.
[17:29:05] <az> GinFuyou, just to be clear. what I wanted from the APP is to create an input field for each entry the API has
[17:29:56] <GinFuyou> So, you are creating a some kind of form on the client from API data
[17:30:06] <GinFuyou> now it's something
[17:30:12] <az> yeah
[17:30:25] <GinFuyou> why API doesn't provide that data directly?
[17:30:38] <GinFuyou> list of fields and their types?
[17:30:48] <az> I think it does but had to filter it a bit.
[17:30:56] <az> as sepi suggested I guess
[17:31:13] <GinFuyou> no, why it doesn't it provide filtered already?
[17:31:16] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[17:31:16] *** Joins: mattil (~mattil@helsinki.portalify.com)
[17:31:21] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[17:31:29] <GinFuyou> also how you will know field types? Guess them?
[17:32:06] <az> https://dpaste.org/6egGp
[17:32:14] <az> that what it gives
[17:32:24] *** Joins: mattil (~mattil@helsinki.portalify.com)
[17:32:27] <az> apparently I don't need all those
[17:33:07] <GinFuyou> Yeah, that exactly what I meant
[17:34:01] <az> I don't think I can use the field type easily as the APP I'm building with may not recognize those. I've to check.
[17:34:05] <GinFuyou> Well if you need only subset of this on client, just make a list of keys you need and copy them to a new dicy
[17:34:08] <GinFuyou> *dict
[17:34:19] <az> all right
[17:34:42] *** Joins: pydev (~pydev3@2001:b07:5d28:551:22e8:cddf:3a88:5d30)
[17:34:44] <az> have to read more. thanks for helping
[17:34:58] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[17:34:58] *** ChanServ sets mode: +v EvilDMP
[17:36:47] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 260 seconds)
[17:36:58] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[17:37:19] <GinFuyou> client_fields = {key: value for key, value in api_data if key in ['url', 'path', 'title']} < az
[17:37:22] *** Quits: mattil (~mattil@helsinki.portalify.com) (Ping timeout: 268 seconds)
[17:37:33] <GinFuyou> *api_data.items()
[17:37:59] <GinFuyou> assuming client is python, ofc
[17:40:25] <az> it's.
[17:47:05] <sepi> I'm working with a model class inheritance hierarchy. I want to iterate over the base class's model objects and figure out the most specific model class. I have the ContentType app enabled. How can I get that most specific type? ContentType.objects.get_for_model(the_object) only returns "places | place" which is generic.
[17:48:43] *** Joins: magga (magga@ti0036a400-3577.bb.online.no)
[17:50:27] <GinFuyou> sepi, MyModel.__mro__ ?
[17:51:23] *** Joins: cs (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec)
[17:51:30] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[17:51:30] *** ChanServ sets mode: +v EvilDMP
[17:51:33] *** Quits: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec) (Read error: Connection reset by peer)
[17:51:52] *** Joins: mattil (~mattil@d54vzntjl0nz0pwq99y-4.rev.dnainternet.fi)
[17:56:44] <sepi> GinFuyou: That doesn't seem to be what I'm looking for unfortunately
[18:00:07] <GinFuyou> sepi, so one having the more ancestors is not "most specific"?
[18:00:34] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[18:01:17] <sepi> My question is basically: from a collection of generic (base class) model object, how can I know the specific class of each of the model objects. I'm using multi table inheritance
[18:02:43] <sepi> maybe base django can't do this. django-polymorphic seems to be a solution
[18:02:59] <GinFuyou> Ah, you have a set of base classes, which can go into related specific classes?
[18:03:38] <sepi> one base class Place with 3 sub-classes: Building, PointOfInterest and BuildingPart
[18:04:07] <sepi> I can query for all the places but then I don't know which is a Building, BuildingPart or POI
[18:04:25] <GinFuyou> That should be doable, but not sure if there is a direct way, I don't work with MTI a lot
[18:04:41] *** Quits: mattil (~mattil@d54vzntjl0nz0pwq99y-4.rev.dnainternet.fi) (Remote host closed the connection)
[18:08:12] *** Quits: cs (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec) (Read error: Connection reset by peer)
[18:08:46] *** Joins: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec)
[18:10:00] *** Quits: tenzai (~yanchai@49.145.168.191) (Ping timeout: 272 seconds)
[18:12:06] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:15:37] *** Joins: kostkon_ (~androirc@2.142.66.94.static.otenet.gr)
[18:18:18] *** Joins: rob4227 (~Thunderbi@45.131.195.6)
[18:19:13] *** Quits: rob4226 (~Thunderbi@154.6.25.214) (Ping timeout: 260 seconds)
[18:19:13] *** rob4227 is now known as rob4226
[18:24:55] *** Quits: pepper (~pepper@user/pepper) (Quit: Leaving)
[18:27:26] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[18:27:26] *** ChanServ sets mode: +v EvilDMP
[18:33:18] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[18:34:31] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:38:25] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 248 seconds)
[18:40:21] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[18:40:21] *** ChanServ sets mode: +v EvilDMP
[18:40:45] *** Joins: cs (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec)
[18:41:28] *** Joins: ovnicraft_ (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[18:41:28] *** Quits: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec) (Read error: Connection reset by peer)
[18:41:50] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[18:45:23] *** Quits: cs (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec) (Ping timeout: 260 seconds)
[18:46:08] <GinFuyou> Is https://github.com/johnsensible/django-sendfile a good solution? It's not updated for long but I suppose it can just work since there not much to change often
[19:03:40] *** Joins: ironbeard (~geoffrey@130-45-89-178.dyn.grandenetworks.net)
[19:05:12] <ironbeard> If I have a Formset in a view, populated via the `initial` kwarg, is there a convenient way to go about getting the URL param string that results in submitting the form?
[19:09:14] <GinFuyou> ironbeard, sorry, I don't see how parts in your question are related... why form submitting will result in URL params? You have a formset submited as GET?
[19:16:17] *** Joins: aclark (~aclark@pool-108-51-184-139.washdc.fios.verizon.net)
[19:16:51] <ironbeard> @GinFuyou: Oh, yeah forgot to mention that. Yes, the formset gets submitted as a GET
[19:22:08] *** Quits: aclark (~aclark@pool-108-51-184-139.washdc.fios.verizon.net) (Quit: Client closed)
[19:22:32] *** Joins: Csm319_ (~csm3105@31.4.136.151)
[19:22:36] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[19:22:37] *** ChanServ sets mode: +v EvilDMP
[19:22:43] *** Joins: aclark (~aclark@pool-108-51-184-139.washdc.fios.verizon.net)
[19:25:11] *** Quits: Csm319_ (~csm3105@31.4.136.151) (Read error: Connection reset by peer)
[19:25:17] *** Quits: csm3105 (~csm3105@143.red-83-48-84.staticip.rima-tde.net) (Ping timeout: 268 seconds)
[19:25:35] <GinFuyou> ironbeard, so what is the problem then? just feed GET data to the formset
[19:26:53] *** Joins: Csm319_ (~csm3105@143.red-83-48-84.staticip.rima-tde.net)
[19:29:03] <ironbeard> GinFuyou, well, what I'm aiming for is a button that does a redirect to a view that expects a FormSet. So, in my initial view I can instantiate the FormSet and populate the desired initial data, but then to redirect to the view that actually processes the formset (and prompts a file download), I'm having to "manually" create the URL string (form-0-<fieldname>=<value>, etc etc) to pass to a
[19:29:05] <ironbeard> redirect.
[19:29:48] <ironbeard> Didn't know if there was somehow a conveience method or something that would URLencode the values of the formset for me
[19:32:57] <GinFuyou> What is the point of filling initial data? Serializing it for url?
[19:33:53] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 248 seconds)
[19:33:54] <ironbeard> Yeah, I guess it feels easier to fill out the initial data as opposed to manually serializng it for URL
[19:34:09] <ironbeard> but really just manually serializing it works alright
[19:34:49] <GinFuyou> can you go over "for form in formset, for field in form.fields -> field.value" (pseudocode)
[19:35:08] *** Joins: iomari891 (~iomari891@105.112.138.38)
[19:36:08] <GinFuyou> anyway something like this should work, though there might be easier ways without using formset at this point
[19:36:13] <ironbeard> Hmm, that looks nice
[19:36:28] <GinFuyou> might be just using built-in serializer?
[19:36:33] <ironbeard> and do len(formset) to get the `form-TOTAL_FORMS` values
[19:37:34] <ironbeard> Well, the formset is nice because there is a view where I do want the user to use the formset... but I'm just piggybacking the (complicated) functionality of that view where I want a button to basically submit one of three possible configurations for the formset..kind of a simple alternative to the possibly more complex formset view
[19:38:33] <GinFuyou> just hide the formset in the page? ^_^"
[19:39:56] <ironbeard> hah.. actually.. kind of not a bad idea
[19:40:11] <ironbeard> Thanks for thinking this through with me, I think I have a few options now :)
[19:46:16] *** Quits: ironbeard (~geoffrey@130-45-89-178.dyn.grandenetworks.net) (Ping timeout: 272 seconds)
[20:03:03] *** Quits: Csm319_ (~csm3105@143.red-83-48-84.staticip.rima-tde.net) (Quit: Leaving)
[20:05:22] *** Quits: idontnee_ (~idontneed@h-85-24-184-105.A189.priv.bahnhof.se) (Quit: Leaving...)
[20:06:27] *** Quits: lucascastro (~lucascast@177-185-131-162.corp.isotelco.net.br) (Ping timeout: 250 seconds)
[20:06:34] <gutts> I am exec()ing code inside a view with RestrictedPython but for exceptions thrown, django catches them and outputs them to the browser.. how can I catch them and return the specific message as JSON?
[20:06:48] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[20:11:05] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[20:11:20] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[20:11:48] *** Quits: mrwick (~mrwick@user/mrwick) (Ping timeout: 260 seconds)
[20:12:34] <gutts> I had a try except around the exec but that doesn't really seem to catch it before django does
[20:12:48] <gutts> unless I should be using my own exception
[20:20:19] *** Joins: MerrinX (~merrinx@ti0028a400-2319.bb.online.no)
[20:20:53] *** Quits: luigibu (~luigi@93.176.151.71) (Quit: WeeChat 3.5)
[20:24:44] *** Joins: dont-panic (~andy@98.13.47.63)
[20:25:42] <dont-panic> I might be missing something, but I changed TIME_ZONE to 'America/New_York' but my timestamps in the db seem to be two hours behind.  Django 4.0
[20:26:14] *** Joins: audio (~audio@user/audio)
[20:26:36] <dont-panic> Both USE_I18N and USE_TZ are set to true
[20:27:52] *** Quits: sepi (~sepi@fw.mnhn.lu) (Ping timeout: 250 seconds)
[20:34:39] <dont-panic> Switching TIME_ZONE to 'EST' didn't work either.  That set it to 4 hours in the future.
[20:36:49] *** Quits: MerrinX (~merrinx@ti0028a400-2319.bb.online.no) (Quit: WeeChat 3.4.1)
[20:37:09] <Wooble> what exactly do you mean by timestamp, and how are you determining it's in the future?
[20:37:47] *** Joins: MerrinX (~merrinx@ti0028a400-2319.bb.online.no)
[20:39:24] <Wooble> (and which database you're using might be relevant, since only postgresql stores time zones)
[20:40:33] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:41:59] <dont-panic> Wooble: I'm using the default db (sqlite3).  Someone used my contact form around 11am and their time stamp says 9am.  I tried testing it and for me it says 4pm.  I have no clue how to tell what timezone the db is using other than setting the TIMEZONE setting and testing it... but that's clearly not giving me any real idea of what its doing.
[20:43:47] <dont-panic> there's only one model on this site, I made the site from scratch last week and there's only one datetime field with autonow set to true
[20:45:51] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[20:45:51] *** ChanServ sets mode: +v EvilDMP
[20:45:53] <dont-panic> I'm using generic 'TemplateView' and 'CreateView'
[20:46:09] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[20:46:36] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[20:46:36] *** ChanServ sets mode: +v EvilDMP
[20:46:59] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[20:50:06] <carlio> dont-panic: how do you set the field on the DB? does it come from a form or is it an auto_now_add value?
[20:50:22] <carlio> oh sorry you said that already
[20:50:36] <dont-panic> carlio: date = models.DateTimeField(auto_now=True)
[20:51:23] <dont-panic> carlio: and my __str__ method has this in a join, str(self.date.strftime("%A, %B %d, %F - %I:%M%p"))
[20:51:53] <carlio> Did you change the TIMEZONE after the models were created?
[20:51:59] <carlio> or are you talking about new models?
[20:52:09] <dont-panic> Very probably after they were created
[20:52:36] <dont-panic> should I just blast the db and recreate?  It should only have my admin user and one form entry that is garbage anyways
[20:52:55] <carlio> I think the issue is that they are stored with the timestamp value at the time the model is created - they don't get naive datetimes, but will be stored with America/New_York when using it and new ones with EST after
[20:52:56] <dont-panic> I also have daily backups
[20:54:14] <carlio> not sure about sqlite but I know postgres will keep a timezone in its datetime representation so likely you have inconsistent timezones in the DB data, that'd be my guess
[20:56:09] *** Joins: djapo (~archangel@user/djapo)
[21:05:32] *** Joins: Xof (~Xof@157-131-136-66.dedicated.static.sonic.net)
[21:08:02] <dont-panic> carlio: blasted the db, blasted the migrations, recreated the db, made a superuser, restarted both the site and nginx, still says 4:36pm when I make an entry and its 12:36pm
[21:08:45] <dont-panic> I have TIME_ZONE = 'America/New_York', I could try EST.  Or do I have to use postgress to get proper timestamps?
[21:09:07] *** Quits: GinFuyou (~GinFuyou@2a04:52c0:101:a4e::) (Ping timeout: 260 seconds)
[21:10:12] *** Quits: sreve (~quassel@p4ff44df3.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[21:13:16] <dont-panic> Weird, I set USE_TZ = False and now it works for me.  Trying to find someone in a different timezone to test that it still says my time and not theirs
[21:15:37] *** Joins: sreve (~quassel@p54a7110f.dip0.t-ipconnect.de)
[21:21:56] *** Joins: xkuru (~xkuru@user/xkuru)
[21:22:36] *** Quits: sreve (~quassel@p54a7110f.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[21:32:00] *** Quits: aclark (~aclark@pool-108-51-184-139.washdc.fios.verizon.net) (Ping timeout: 250 seconds)
[21:36:51] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[21:37:30] *** Joins: dez (uid92154@user/dez)
[21:44:42] *** Quits: kostkon_ (~androirc@2.142.66.94.static.otenet.gr) (Ping timeout: 272 seconds)
[21:45:27] *** Joins: kostkon_ (~androirc@2a02:1388:408b:3a93:dad4:fbc1:52d9:8c47)
[21:46:17] <pydev> hello everybody, does anyone use an Alpine.js alternative? i really detest the inline js code
[21:46:28] <pydev> i heard alpine is usually used with htmlx
[21:46:31] <pydev> htmx
[21:51:35] *** Joins: en7ropy (~en7ropy@37.120.130.4)
[21:53:56] *** Quits: lazzurs5 (~lazzurs@user/lazzurs) (Quit: Ping timeout (120 seconds))
[21:59:08] *** Quits: kostkon_ (~androirc@2a02:1388:408b:3a93:dad4:fbc1:52d9:8c47) (Ping timeout: 260 seconds)
[22:03:50] *** Joins: lazzurs5 (~lazzurs@user/lazzurs)
[22:13:04] *** Quits: lazzurs5 (~lazzurs@user/lazzurs) (Quit: Ping timeout (120 seconds))
[22:13:29] *** Joins: lazzurs5 (~lazzurs@user/lazzurs)
[22:16:32] *** Joins: Guddu (~Guddu@49.36.21.164)
[22:22:04] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 272 seconds)
[22:28:27] *** Quits: pydev (~pydev3@2001:b07:5d28:551:22e8:cddf:3a88:5d30) (Ping timeout: 260 seconds)
[22:36:45] *** Joins: blip25 (~blip2@blip2.net)
[22:40:58] *** blip25 is now known as blip2
[22:42:11] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 246 seconds)
[22:42:38] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[23:09:00] *** Quits: audio (~audio@user/audio) (Ping timeout: 240 seconds)
[23:15:24] *** Quits: dont-panic (~andy@98.13.47.63) (Quit: leaving)
[23:19:35] *** Joins: lucascastro (~lucascast@177-185-131-162.corp.isotelco.net.br)
