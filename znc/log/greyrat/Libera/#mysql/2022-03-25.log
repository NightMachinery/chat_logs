[00:14:28] <Xgc> sharpertool: Unless you're in an interactive session and make a mistake.
[00:15:21] <Xgc> sharpertool: I never / ever use auto_commit.  Lots of reasons for that.
[00:16:09] <sharpertool> Xgc:  can you explain that better for me?
[00:16:29] <sharpertool> You "can" use a transaction with auto_commit on, you just have to do it explicitely
[00:16:35] <Xgc> sharpertool: The commit can interfere with transactional behavior.
[00:17:04] <sharpertool> Well, if we are comming from a 100% MyISAM environmnt, then we are no using anything related to a transaction
[00:17:21] <Xgc> sharpertool: Just be careful where / when you add commits;
[00:17:45] <sharpertool> So, until I can go in an update all code to use a transaction, or at least issue a 'commit()' after an operation, it will be an interim approach
[00:17:59] <Xgc> sharpertool: That's a different matter.  Moving away from logic that would make transition to InnoDB problematic is also a problem.
[00:18:04] <sharpertool> I should be free to add commits anywhere I would expect the code to do so.
[00:18:21] <sharpertool> Can you explain that last statement?
[00:19:03] <Xgc> sharpertool: If you're making changes that rely on MyISAM, that can be a problem moving away from MyISAM, which generally should be a high priority goal, in most systems.
[00:19:47] <sharpertool> Well, currently MyISAM is effectively "autocommit", since there is no such thing as a transaction.
[00:20:18] <sharpertool> But, if I issue a 'commit()' after a insert/delete/update, then that should essentially be a NOP on MyISAM, but would close any explicit transaction (based on the session) with InnoDB
[00:20:29] <sharpertool> is that a correct assumption?
[00:21:55] <Xgc> sharpertool: \\ if we're using 100% MyISAM, transactional behavior really doesn't matter \\ ... can lead you down a deeper hole.  That's all I meant.
[00:24:11] <Xgc> sharpertool: I guess autocommit can be an intermediate short-term solution, as you move into InnoDB.
[00:25:57] <Xgc> Working on the transactional behavior, without autocommit can be one of the next few steps, as time permits.   The constant commit after every modifying statement can be a performance issue.
[00:28:07] *** Quits: maroloccio (~marolocci@pousada3ja.mma.com.br) (Quit: WeeChat 3.0)
[00:29:38] <Xgc> sharpertool: Yes.  I believe that's correct.
[00:30:00] <sharpertool> Well, thanks a lot for the feedback Xgc -- much appreciated
[00:30:32] <Xgc> It's not really that there's no transaction with MyISAM.  It's that the transaction isn't under your control, as in the case of InnoDB.  It's statement level transactions only.
[00:52:44] *** Quits: PTNapivoski (~PTNapivos@179.189.133.33) (Quit: Leaving)
[00:55:12] *** Quits: Naktibalda (~Naktibald@88.135.22.17) (Quit: Man who run behind car get exhausted)
[02:02:56] *** Joins: mickey (~user@user/mickey)
[02:42:29] *** Quits: nb (~nb@fedora/ansible.user.nb) (Ping timeout: 256 seconds)
[02:53:31] *** Joins: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net)
[03:01:08] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Quit: shibboleth)
[03:33:53] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[04:17:45] *** Joins: ferdna (~ferdna@user/ferdna)
[04:33:29] *** Quits: mav`rik (~unknown@ec2-54-171-126-99.eu-west-1.compute.amazonaws.com) (Quit: leaving)
[04:44:27] *** Quits: jiffe (~jiffe@47-220-182-140.gtwncmkt04.res.dyn.suddenlink.net) (Read error: Connection reset by peer)
[04:50:12] *** Joins: jiffe (~jiffe@47-220-182-140.gtwncmkt04.res.dyn.suddenlink.net)
[05:30:32] *** Quits: jamiejackson (~jamiejack@131.106.140.145) (Quit: Connection closed)
[05:30:50] *** Quits: nemox (nemox@kvm6.telegraphics.com.au) (Quit: WeeChat 3.1)
[05:49:29] *** Joins: handsome_kid (~shynerd@user/handsome-kid/x-9656391)
[05:50:13] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[05:51:34] <handsome_kid> Sorry if it's a stupid question, but INNER JOIN is same as using WHERE clause equating the id's right? For example in this simple example, `SELECT * FROM table_a INNER JOIN table_b ON table_b.id = table_a.table_b_id` and `SELECT * FROM table_a, table_b WHERE table_a.table_b_id = table_a.id` returns the same result right? I've tested it, it seems like returning the same result, but I'm not sure.
[06:12:51] <thumbs> handsome_kid: yes, but avoid commas in the FROM clause
[06:19:07] *** Quits: jkavalik (~jkavalik@ip-78-102-141-139.net.upcbroadband.cz) (Read error: Connection reset by peer)
[06:19:24] *** Joins: jkavalik (~jkavalik@ip-78-102-141-139.net.upcbroadband.cz)
[06:30:11] *** Joins: Intelo (~Intelo@user/Intelo)
[06:32:27] <handsome_kid> thumbs: Thank you.
[06:40:36] *** Quits: Sleepy63 (~Sleepy63@user/sleepy63) (Quit: Sleepy63)
[06:41:10] *** Quits: handsome_kid (~shynerd@user/handsome-kid/x-9656391) (Quit: leaving)
[07:20:09] *** Quits: Intelo (~Intelo@user/Intelo) (Ping timeout: 256 seconds)
[07:21:09] *** Joins: Sleepy63 (~Sleepy63@user/sleepy63)
[07:40:14] *** Joins: makoto2600 (~makoto260@94.86-180-91.adsl-dyn.isp.belgacom.be)
[07:41:34] *** Quits: makoto2600 (~makoto260@94.86-180-91.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[07:56:20] *** Joins: nb (~nb@fedora/ansible.user.nb)
[08:58:51] *** Quits: jkavalik (~jkavalik@ip-78-102-141-139.net.upcbroadband.cz) (Read error: Connection reset by peer)
[08:59:09] *** Joins: jkavalik (~jkavalik@ip-78-102-141-139.net.upcbroadband.cz)
[09:57:16] *** Joins: ferdna (~ferdna@user/ferdna)
[09:57:47] *** Quits: rvalue (~rvalue@user/rvalue) (Remote host closed the connection)
[09:58:12] *** Joins: rvalue (~rvalue@user/rvalue)
[10:24:08] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[10:35:16] <Isotopp> sharpertool: 1. stay away from foreign key constraints, or if you experiment wiith them, be prepared to roll that back. i can elaborate, if you are interested.
[10:35:50] <Isotopp> 2. when you run "myisam" code with innodb tables, every statement becomes a transaction, because the default is autocommit. that means that "the disk led" is flashing a lot, once per statement.
[10:36:09] <Isotopp> that is a change from before, where myisam was very lazy in writing index changes back, and in some cases even writing table changes back.
[10:36:59] <Isotopp> your code will "run as before", no changes are strictly required, except where you use myisam "features" that do not work the same way in innodb (ie. compound primary keys with auto_increment work differently, max key length is different etc)
[10:37:28] <Isotopp> but the performance will differ a lot. notably, when you bulk load by running insert-in-a-loop the loop will now turn as fast as you can flash the disk led.
[10:37:59] <Isotopp> these are the places where code changes are required. usuallly by adding a counter, and when the counter%1000 == 0 commit
[10:38:33] <Isotopp> so a for ($ary as $k => $v) { cursor->execute("insert ...") } becomes
[10:39:22] <Isotopp> a $counter = 0; for ($ary as $k => $v) { cursor->execute(....); $counter++; if $counter%1000 == 0 db->commit(); }; db->commit(); or similar
[10:39:44] <Isotopp> add db->begin() as needed, my example is very weird syntax.
[10:40:13] <Isotopp> other than that, the change should be more or less harmless. the performace problems will make themselves known quickly in testing, and the changes are not hard to do.
[10:40:23] <Isotopp> overall, the perfomance and reliability will improve.
[10:40:41] <Isotopp> but yes, you need business unit buy-in for code-changes
[10:42:11] <Isotopp> 3. myisam has no transactions, and delays writing back to disk. if you run a statement such as "update t set counter = counter+1 where id in ( a million rows )", and it crashes half way through, 500k rows will be changed, 500k rows will be unchanged, and you do not know which are which.
[10:42:24] <Isotopp> this can never happpen with innodb, even in autocommit, 0 rows or all rows will be changed.
[10:42:51] <Isotopp> even if you crash, innodb will always recover to a state before/after a transaction. there will never be half-written changes. this is a fantastic improvement.
[10:44:18] <Isotopp> 4. killing all myisam and moving to innodb is a precondition for safe operation of row based replication. rbr and myisam do not mix well because of the non-transactionality of myisam. such a crash as outlined above will ALSO break RBR, always, in a way that is impossible to recover from.
[10:45:21] <Isotopp> 5. having innnodb, a reasonable transaction size (1000-10k rows per txn) and rbr is a precondition to parallel replication, group replication and other replication speed and stability improvements. your migration is opening up getting rid of a lot of technical debt and enables a lot of future performance improvements.
[10:46:09] <Isotopp> where i work, we have been going through this kind of migration quite some time ago. i am not sure i remember all the tiny rough edges, but if you have questions, ask.
[11:51:46] *** Joins: Naktibalda (~Naktibald@88.135.22.17)
[11:56:04] *** Joins: jenntech (~jenntech@134.134.137.81)
[11:56:35] <jenntech> can some one help me with error: An error has occurred on login.
[11:56:36] <jenntech> Error message:Error connecting to the database
[11:56:36] <jenntech> Please clear the cache, reboot the system and try again.
[11:57:07] <jenntech> i cleared cache and rebooted - twice
[11:57:09] <lopid> what cache?
[11:57:24] <jenntech> i assumed it was referring to the browser cache
[11:57:40] <lopid> are you connecting to mysqld? what with?
[11:57:53] <jenntech> xampp
[11:59:01] <lopid> can you connect with mysql?
[11:59:59] <jenntech> yes both mysql and apache connect in the xampp control panel... which brings up my db... but when i click one of the dbs to access the benchmark thats what i get
[12:41:39] *** Joins: palasso (~palasso@user/palasso)
[13:05:21] *** Quits: tercaL (~tercaL@user/tercal) (Ping timeout: 268 seconds)
[13:49:52] *** Joins: gulzar (~gulzar@49.206.240.149)
[14:01:30] *** Joins: tercaL (~tercaL@user/tercal)
[14:18:38] <obviyus> Isotopp: regarding (1), why stay away from foreign keys?
[14:21:09] *** Joins: sultand (~sultand@office.rackhosting.com)
[14:21:43] <Isotopp> obviyus: foreign key constraints. a foreign key of a in b is b.a_id, and you have that a lot.
[14:22:11] <Isotopp> a foreign key constraint will enforce that b.a_id contains only valid a_id values and may do things in b rows when you change a.a_id values.
[14:23:20] <Isotopp> a foreign key constraint means if you lock a concrete b row (ie b.b_iid = 17 with b.a_id = 3), an additional lock on a.a_id (=3) will be created, and an additional lookup on a.a_id will happen in order to actually be able to set the lock and validate the constraint.
[14:23:39] <Isotopp> this increases the working set of the database -- a lot.
[14:23:41] <obviyus> oh darn
[14:24:21] <Isotopp> in mysql, constraint checking is always IMMEDIATE, after each statement and never DEFERRED (at the end of the transaction, on commit). That enforces an order to statements inside a transaction and is a nuiosance for developers.
[14:25:19] <Isotopp> with self-referential constraints (ie you have the employee database, and emp.manager_id references emp.emp_id) you can create rows that cannot be deleted or updates because of circular dependencies.
[14:25:54] <Isotopp> that also means that dump and load of the database cannnot be done unless you disable foreign key constraint checking which kind of defeats the purpose of having them in the first place.
[14:26:37] <Isotopp> in general, it is possible to build and run databases for foreign key constraints, but it creates additional memory requirements, and additional operational burden that needs to be weighed agains the benefit of enforced relationship validity.
[14:27:01] <Isotopp> you cannot weigh that properly unless you have tried, and that means that you need to be careful when introducing this, and be prepared to roll the change back.
[14:27:19] <obviyus> i see, thanks for explaining Isotopp
[14:27:24] <Isotopp> and finally, foreign key constraints have ON DELETE and ON UPDATE rules such as ON DELETE CASCADE
[14:27:45] <Isotopp> they can create action at a distance, for example updating a.a_id will also affect all b.a_id (change rows in b).
[14:28:29] <Isotopp> The amount of work done is completely dependent on the data (how many b-rows reference a.aid = 3, as opposed to a.aid = 17), and that makes it very hard for a developer to estimate the amount of work the database will have to do whhen running an update or delete statement.
[14:29:12] <Isotopp> https://blog.koehntopp.info/2020/08/03/mysql-foreign-keys-and-foreign-key-constraints.html https://blog.koehntopp.info/2020/08/04/mysql-foreign-key-constraints-and-locking.html
[14:29:45] *** Quits: sultand (~sultand@office.rackhosting.com) (Quit: Client closed)
[14:31:51] <obviyus> >It is easy to create structures with undeletable records.
[14:32:07] <obviyus> yeah, too many FKs will make that near impossible
[14:35:51] <Isotopp> specifically https://blog.koehntopp.info/2020/08/03/mysql-foreign-keys-and-foreign-key-constraints.html#a-self-referential-structure
[14:47:10] *** Joins: sultand (~sultand@office.rackhosting.com)
[14:50:16] *** Joins: dslegends (~dslegends@user/dslegends)
[14:52:42] *** Quits: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net) (Quit: Client closed)
[15:09:24] *** Quits: jenntech (~jenntech@134.134.137.81) (Quit: Client closed)
[16:24:54] *** Quits: gulzar (~gulzar@49.206.240.149) (Quit: gulzar)
[16:45:16] *** Joins: csm3105 (~csm3105@143.red-83-48-84.staticip.rima-tde.net)
[17:56:13] *** Quits: csm3105 (~csm3105@143.red-83-48-84.staticip.rima-tde.net) (Quit: Leaving)
[18:29:30] <arash> Hello, can I use better syntax/function instead of "dept = 1 or dept = 2" ?
[18:30:20] <Naktibalda> no
[18:30:41] <Naktibalda> oh, this is mysql, then dept IN(1,2)
[18:31:22] <arash> Naktibalda, thank you.
[19:35:41] *** Quits: sultand (~sultand@office.rackhosting.com) (Ping timeout: 256 seconds)
[20:39:31] *** Joins: PTNapivoski (~PTNapivos@179.189.133.33)
[20:55:05] *** Joins: yuesbeez (uid458354@id-458354.tinside.irccloud.com)
[21:07:14] *** Quits: mthall (~quassel@mail.thalliman.com) (Ping timeout: 252 seconds)
[21:07:28] *** Joins: mthall (~quassel@mail.thalliman.com)
[21:16:48] *** Joins: masber (~masber@213.55.224.91)
[21:34:02] *** Quits: masber (~masber@213.55.224.91) (Quit: Client closed)
[21:37:59] *** Joins: masber (~masber@213.55.224.91)
[22:06:39] *** Joins: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net)
[22:53:44] *** Quits: masber (~masber@213.55.224.91) (Quit: Client closed)
[23:06:37] *** Joins: pagios (~pagios@life.is-a.beauty)
[23:07:13] <pagios> hello, mysql is using 130% of cpu, checkd error.log in /var/log/mysql nothing thwre, how can. i know whats happening behind the scenes?
[23:12:35] *** Joins: leftyfb (leftyfb@ubuntu/member/leftyfb)
[23:14:30] *** Joins: tmus (~tmus@cust-185-157-203-2.nanoqnet.gl)
[23:14:45] <Isotopp> pagios: you can run SHOW PROCESSLIST
[23:14:57] <Isotopp> as a root user, you will be able to see what the database does
