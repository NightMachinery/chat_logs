[00:07:00] *** Quits: yaverot (~yaverot@71-218-251-187.hlrn.qwest.net) (Quit: Leaving)
[00:31:17] *** Quits: wacki (~wacki@87.122.86.228) (Quit: Leaving.)
[00:50:32] *** Joins: yauhsien_ (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[00:55:02] *** Quits: yauhsien_ (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[00:57:58] *** Joins: TCZ (~tcz@91.150.178.124)
[00:58:35] *** Joins: vms14 (~vms14@29.red-79-153-202.dynamicip.rima-tde.net)
[00:58:59] <vms14> why do you guys love prolog?
[00:59:36] <vms14> can you explain for a mere mortal?
[01:01:13] <[relay]_> <Dave Whitten> Because you can write out the requirements for a solution without specifying the algorithm
[01:02:00] <vms14> so it's all about its declarative features?
[01:02:26] <vms14> A guy is kind of convincing me to learn prolog just by talking about this language
[01:02:32] <[relay]_> <Dave Whitten> For me, yes it is.
[01:02:48] <vms14> I had a look at prolog some time ago and there's something that somehow triggered me
[01:03:32] <vms14> they say prolog is kind of a evolutionary step in programming in the sense that it wraps better to your mind than to the mind of a computer
[01:03:55] <vms14> and this guy just told me he hasn't found a higher level language than prolog
[01:04:21] <vms14> I know he knows haskell, so he is admitting prolog is higher level than haskell
[01:06:22] <[relay]_> <Dave Whitten> SQL also has a declarative syntax but doesn’t have the Prolog idea of bound versus unbound variables which has the idea of successive search for a solution as a control method.
[01:07:39] <[relay]_> <Dave Whitten> Haskell is higher level in my opinion because it uses more sophisticated math and it’s more sophisticated mathematical objects.
[01:09:03] <[relay]_> <Dave Whitten> Prolog is higher level in a different way because it uses search as it’s method of solving problems.
[01:11:10] <[relay]_> <Dave Whitten> I leave it to another more experienced Prolog person who can describe if Prolog search methods can be used for more complex math objects
[01:11:37] <vms14> and what are the flaws of prolog?
[01:14:47] <[relay]_> <Dave Whitten> For me, Prolog doesn’t have a persistent Data Storage and isn’t multitasking or multi-user. Again, I suspect a more sophisticated user would tell me why I’m wrong.
[01:18:57] <vms14> thanks for all your words
[01:19:17] <vms14> I'm starting to be convinced in learning prolog
[01:19:19] <vms14> xD
[01:20:45] *** Joins: ski (~ski@remote12.chalmers.se)
[01:20:57] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[01:22:13] <[relay]_> <Dave Whitten> I write medical systems to run hospitals, so I use a language tuned to that purpose. I can see using Prolog to do it but Prolog has to deal with the data load and user load to function in that area. And maybe it can. I am a dilettante to Prolog
[01:24:58] <vms14> I'm not looking for a programming job, programming is my hobby and I always look for stuff that makes me learn more
[01:25:36] <vms14> but also I'm kind of looking for a language that binds to my way of thinking
[01:26:16] <vms14> prolog is fucking weird if you compare it with other languages, but the claims I hear about it make me think
[01:26:59] <[relay]_> <Dave Whitten> So, what examples have you looked at?
[01:28:47] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[01:28:55] <vms14> I've just looked at some basic tutorials
[01:29:25] <[relay]_> <Dave Whitten> Since Prolog uses search instead of you explicitly writing the algorithm, it can be a bit crazy in the order it presents solutions.
[01:29:38] <vms14> and some basic info about prolog, I see homoiconity and unification (I love common lisp
[01:30:31] <vms14> now I try to look at "why prolog" posts in order to convince myself of learning prolog
[01:31:43] <[relay]_> <Dave Whitten> All the solutions it provides are within the conditions you provide and coding involves setting up new constraints to eliminate solutions that ATT bad for some other reason that you add.
[01:33:15] <[relay]_> <Dave Whitten> Like if I am looking for a list of Drugs that a patient is taking, I can view creating that list as a prolog search.
[01:34:06] <[relay]_> <Dave Whitten> But then if I want those prescribed in the last month, that would be a new constraint.
[01:34:42] <vms14> so your main trouble with prolog is persistence?
[01:35:01] <vms14> the guy who talks me about prolog made a web server with prolog
[01:35:25] <[relay]_> <Dave Whitten> For me, yes. Prolog is fastest when it does everything in memory.
[01:36:43] <[relay]_> <Dave Whitten> But if I need to look at data for the last six months, I don’t want all of that to stay in memory after I have a tentative solution.
[01:37:56] <[relay]_> <Dave Whitten> And if someone just wrote a prescription in a different place for this patient, I would want it to show up in my solution.
[01:38:33] <[relay]_> <Dave Whitten> So multiple concurrent users have to be handled.
[01:39:13] <vms14> looks like you just need a binding for postgresql/mysql
[01:40:00] <vms14> but you have them already
[01:40:03] <vms14> https://www.swi-prolog.org/pldoc/man?section=odbc
[01:40:14] <[relay]_> <Dave Whitten> A web server is good. And if the data is available from disk, I would want it to move it into memory to be tested, and then erased if it isn’t relevant.
[01:41:02] <[relay]_> <Dave Whitten> Does it handle adding new entries into the table from multiple sources ?
[01:42:44] <vms14> mysql and postgresql are suited for concurrent stuff, so I would say yes
[01:43:04] <vms14> sqlite does not handle this stuff so you could run into race conditions
[01:43:15] <vms14> but supposedly mysql and postgresql do
[01:43:27] <vms14> I would recommend postgre over mysql
[01:43:45] <vms14> idk if odbc handles postgre too, but it should
[01:43:48] <[relay]_> <Dave Whitten> And then adding the new entries as candidates when they are added after it has looked at the old entries and gone on to check other criteria?  It would be nice if new data that invalidated a solution would mark a partial solution as not valid too.
[01:44:17] <vms14> I'm not sure and don't want to say things I don't really know about
[01:44:34] <vms14> but sure there's a way
[01:45:15] <[relay]_> <Dave Whitten> There is a way to ask PostgreSQL for data across a TCP/IP link
[01:45:54] <[relay]_> <Dave Whitten> Like I said, I’m hopeful.
[01:50:15] <vms14> you could make something similar to what an audio mixer does
[01:50:37] <vms14> which is to just handle all requests to save the data and doing it from only one source
[01:50:41] <[relay]_> <Dave Whitten> Could you elaborate ?
[01:51:17] <vms14> something that "wraps" all the requests to work with a database and handles those problems you could run into
[01:51:48] <vms14> like when something wants to operate into a db it just request this part of software to do it for him
[01:52:03] <[relay]_> <Dave Whitten> I have seen a multiuser setup that funneled all updates, deletes, changes, through a single process.
[01:52:35] <vms14> this way you "centralize" the access to the db with only one source so you can handle it better
[01:53:34] <vms14> but usually that's what postgre or mysql do for you I guess
[01:53:46] <[relay]_> <Dave Whitten> For Prolog, I think the issue will be knowing when something changes and it validates or invalidates a solution or partial solution that has been found.
[02:07:21] <[relay]_> <Dave Whitten> So, I am looking for a drug prescription that is used for diabetes, a new prescription to the same drug won’t matter, but a cancel order for a prescription means the current search needs to know if it accepted that prescription earlier. Since I don’t write the code that does that search, the Prolog engine needs to know, and keep data structures around to be able to include in a retry operation when I ask for it, b
[02:09:02] <[relay]_> <Dave Whitten> Have you talked to Andrew Dougherty or Douglas Miles, or Annie? They are by far more sophisticated Prolog users than I am.
[02:09:34] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[02:16:34] <vms14> no, I'm not in the "prolog world" yet
[02:16:50] <vms14> just wondering and trying to convince myself why should learn it
[02:23:10] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 260 seconds)
[02:23:44] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[02:42:41] <vms14> wow just discovered xpce and that it comes with its own emacs version
[02:42:51] <vms14> do yo guys use it?
[02:42:58] <vms14> you*
[02:43:20] <vms14>  PceEmacs 
[02:43:32] <[relay]_> <Dave Whitten> I don’t recognize xpce
[02:43:57] <[relay]_> <Dave Whitten> Is the e for expressions ?
[02:50:10] *** Quits: pikrzysztof (~kris@leaf.dragonflybsd.org) (Read error: Connection reset by peer)
[02:51:05] *** Joins: pikrzysztof (~kris@leaf.dragonflybsd.org)
[02:55:30] <vms14> for environment I guess
[02:56:46] <vms14>  X-Window Portable Computing Environment. 
[02:57:07] <vms14> thought the p was for prolog
[03:00:42] <[relay]_> <Dave Whitten> That is what I would guess too.
[03:01:16] <[relay]_> <Dave Whitten> That actually sounds familiar
[03:01:51] <[relay]_> <Dave Whitten> is there a docker image for xpce ?
[03:02:22] <[relay]_> <Dave Whitten> How does one install it ?
[03:04:44] <vms14> it comes with swi-prolog
[03:05:08] <vms14> in netbsd I had swi-prolog lite and swi-prolog + some additional packages
[03:05:18] <vms14> and xpce was one of them
[03:13:34] *** Quits: sakasama (~sakasama@user/sakasama) (Remote host closed the connection)
[03:26:24] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:cdda:3757:8d29:77bf)
[03:26:24] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:cdda:3757:8d29:77bf) (Changing host)
[03:26:24] *** Joins: skapata (~Skapata@user/skapata)
[03:37:16] *** Joins: sakasama (~sakasama@user/sakasama)
[03:40:02] *** Joins: yauhsien_ (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[03:41:27] *** Quits: vms14 (~vms14@29.red-79-153-202.dynamicip.rima-tde.net) (Quit: WeeChat 3.4)
[03:53:55] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 268 seconds)
[03:56:41] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[04:03:26] <yauhsien> "why do you guys love prolog?" for it as a symbolic language, that is a neat feature among programming languages.
[04:05:48] <yauhsien> it's not about declarative. sql is also declarative, but for me, hmm...... it's ok, and I'm not loving it.
[04:16:47] *** Joins: libertyprime (~libertypr@118-92-82-225.dsl.dyn.ihug.co.nz)
[04:41:05] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Remote host closed the connection)
[04:42:18] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[05:07:37] *** Quits: sakasama (~sakasama@user/sakasama) (Remote host closed the connection)
[05:26:19] *** Quits: yauhsien_ (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Remote host closed the connection)
[05:27:04] *** Joins: yauhsien_ (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[05:31:48] *** Quits: yauhsien_ (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[06:09:44] <ski> ("new data that invalidated a solution would mark a partial solution as not valid too","invalidates a solution or partial solution that has been found" reminds me of "Truth^WReason Maintainence" (or perhaps something RETE-like) .. no idea if there's anything like that, for bindings to DBs)
[06:13:47] *** Joins: yauhsien_ (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[06:30:13] *** Quits: yauhsien_ (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Remote host closed the connection)
[06:31:07] *** Joins: yauhsien_ (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[06:35:42] *** Quits: yauhsien_ (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[06:51:26] *** Quits: millido (~millido@84.210.150.128) (Quit: ZNC 1.8.2 - https://znc.in)
[07:07:23] *** Joins: millido (~millido@84.210.150.128)
[07:41:01] *** Quits: mintograde (~mintograd@47.201.5.61) (Read error: Connection reset by peer)
[07:42:19] *** Joins: mintograde (~mintograd@47.201.5.61)
[08:09:17] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[08:14:32] *** Quits: yauhsien (~Yau-Hsien@61-231-56-96.dynamic-ip.hinet.net) (Quit: Leaving)
[09:14:56] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[09:15:50] *** Joins: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[09:20:35] *** Quits: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[09:23:31] *** Joins: Sauvin (~sauvin@about/linux/staff/sauvin)
[09:52:25] *** Joins: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[10:07:23] *** Quits: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Remote host closed the connection)
[10:11:06] *** Joins: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[10:16:07] *** Quits: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[10:34:35] *** Joins: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[12:26:19] *** Quits: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Remote host closed the connection)
[12:28:30] *** Joins: pikrzysz1of (~kris@leaf.dragonflybsd.org)
[12:30:19] *** Quits: pikrzysztof (~kris@leaf.dragonflybsd.org) (Read error: Connection reset by peer)
[12:35:07] *** Joins: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[12:39:32] *** Quits: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[12:49:19] *** Joins: rogersm (~rogersm@90.166.180.250)
[12:55:36] <rogersm> Is there any good resource on applying DCGs for parsing files?
[13:58:09] *** Joins: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[14:02:47] *** Quits: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[14:21:04] *** Joins: wacki (~wacki@87.123.131.191)
[14:25:53] *** Quits: rogersm (~rogersm@90.166.180.250) (Read error: Connection reset by peer)
[14:26:38] *** Joins: rogersm (~rogersm@90.166.180.250)
[14:26:39] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[14:50:42] *** pikrzysz1of is now known as pikrzysztof
[14:56:45] *** Quits: rogersm (~rogersm@90.166.180.250) (Quit: Leaving...)
[15:38:38] *** Joins: TCZ (~tcz@91.150.178.124)
[16:43:43] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[16:52:21] *** Joins: yauhsien (~Yau-Hsien@61-231-56-96.dynamic-ip.hinet.net)
[16:54:07] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[17:09:59] *** Joins: yauhsien_ (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[17:18:45] *** Joins: Inst (~Liam@2601:6c4:4080:3f80:d42f:99b7:4e95:b08d)
[17:19:01] <Inst> Hi, I'm someone studying Haskell as a first language right now.
[17:19:06] <Inst> What does Prolog give me that Haskell doesn't?
[17:19:50] <cehteh> sanity :D
[17:20:31] <cehteh> you may look at mercury too, thats kindof blend between prolog and haskell, with prolog like syntax
[17:31:05] <Inst> I think I'll start with Haskell, then move into Prolog
[17:31:09] <Inst> Haskell is barely practical
[17:32:56] <cehteh> i never got haskell, theoretically its nice, but its too complicated, performance isnt very good, binarys explode in size .. and i use git-annex, written in haskell and surprisingly it still segfaults on some occations
[17:33:50] <cehteh> currently doing rust and be somewhat happy with it
[17:59:00] <pikrzysztof> i wrote a compiler & interpeter in haskell, that was a perfect use-case
[18:14:13] *** Quits: yauhsien_ (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Remote host closed the connection)
[18:17:25] *** Joins: yauhsien_ (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[18:20:57] <yauhsien> Inst: every non-mainstream languages may be treat as non-practical. but, you will find passionate users of some language and great builders, such as a Japanese named Eitaro were building web servers in lisp recently.
[18:21:45] *** Quits: yauhsien_ (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[18:30:21] *** Quits: yauhsien (~Yau-Hsien@61-231-56-96.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[18:37:32] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 240 seconds)
[18:38:22] *** Joins: slavfox (~slavfox@93.158.232.111)
[18:42:02] *** Joins: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[18:43:26] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:dce3:39ec:6605:20a)
[18:43:26] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:dce3:39ec:6605:20a) (Changing host)
[18:43:26] *** Joins: skapata (~Skapata@user/skapata)
[18:50:39] *** Joins: slavfox_ (~slavfox@93.158.232.111)
[18:51:03] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 252 seconds)
[18:51:25] *** slavfox_ is now known as slavfox
[18:53:09] <Inst> yauhsien: I am learning Haskell to learn the high ground of computing languages. In reality, there are languages more practical than Haskell, as well as more abstract, but it is a practical level. I would like to learn first Haskell, C, then Prolog
[19:00:23] *** Quits: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Remote host closed the connection)
[19:01:36] *** Joins: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[19:05:17] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 240 seconds)
[19:05:57] *** Quits: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[19:08:02] <krl> ¨
[19:08:13] <krl> whoops - cleaned the keyboard ^^
[19:08:27] *** Joins: slavfox (~slavfox@93.158.232.111)
[19:44:53] *** Joins: TCZ (~tcz@91.150.178.124)
[19:48:53] *** Quits: TCZ (~tcz@91.150.178.124) (Client Quit)
[20:49:44] *** Joins: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[20:54:45] *** Quits: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[21:04:06] *** Joins: econo (uid147250@user/econo)
[21:27:41] *** Joins: rogersm (~rogersm@90.166.180.250)
[21:28:10] <rogersm> People, something that is driving me crazy in SWI-Prolog. Why I cannot create a Pair?
[21:28:51] <rogersm> ?- A-12.
[21:28:52] <rogersm> ERROR: Unknown procedure: (-)/2 (DWIM could not correct goal)
[21:29:43] <rogersm> please ignore my question...
[21:29:49] <rogersm> this cannot be done interactively.
[21:30:00] *** Quits: ns12 (~ns12@user/ns12) (Quit: bye)
[21:30:44] *** Joins: ns12 (~ns12@user/ns12)
[21:36:46] <ccx> rogersm: ?- Pair = _-12
[21:40:45] <cehteh> what do you actually trying to do?
[21:42:13] <[relay]_> <Dave Whitten> ?-  means try to find a goal, right ?
[21:42:13] <[relay]_> <Dave Whitten> = is equality test? Or is it Unify ?
[21:43:31] <[relay]_> <Dave Whitten> Would you expect Pair to be an unbound variable?
[21:50:15] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Remote host closed the connection)
[21:51:06] <ccx> = is unification, what I wrote unifies variable Pair with a compound term '-'(unbound variable, integer)
[21:51:22] <ccx> Given default operator settings.
[22:33:07] *** Joins: stis (~stis@h46-236-78-23.cust.a3fiber.se)
[22:33:19] <stis> Tjena prologuers!
[22:53:31] *** Joins: pbmagi (~Thunderbi@host-92-14-106-162.as13285.net)
[22:56:55] *** Joins: Lycurgus (~juan@98.4.112.204)
[22:58:52] *** Quits: pbmagi (~Thunderbi@host-92-14-106-162.as13285.net) (Quit: pbmagi)
[22:59:13] *** Joins: pbmagi (~Thunderbi@host-92-14-106-162.as13285.net)
[23:15:04] *** Joins: yaverot (~yaverot@97-118-146-23.hlrn.qwest.net)
[23:20:57] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[23:33:47] *** Joins: Everything (~Everythin@37.115.210.35)
[23:44:46] *** Quits: [relay]_ (~logicmoo@c-98-232-203-68.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[23:46:36] *** Quits: PrologMUD (~PrologMUD@c-98-232-203-68.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[23:48:46] *** Joins: TCZ (~tcz@91.150.178.124)
[23:51:04] *** Joins: Lycurgus (~juan@98.4.112.204)
[23:52:36] *** Quits: wacki (~wacki@87.123.131.191) (Quit: Leaving.)
[23:54:00] *** Joins: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[23:54:39] *** Joins: [relay]_ (~logicmoo@c-98-232-203-68.hsd1.wa.comcast.net)
[23:58:55] *** Quits: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[23:59:47] <rogersm> ?- is the prompt
