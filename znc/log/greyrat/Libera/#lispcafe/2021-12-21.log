[00:01:23] <gilberth> And this still surprises me because EVAL[e;a] would have been a bit easier with just lexical closures. There would be no special case for ((LAMBDA ...) ..) a combination would just eval all list elements including the first and then invoke APPLY. Like (APPLY #'APPLY (EVLIS FORM)).
[00:02:18] <gilberth> But somehow they were on the wrong track for a long time.
[00:38:01] <gilberth> By chance does anyone know which Lisp was the first to have hunks?
[00:48:08] <moon-child> gilberth: regarding m-expressions: k uses them, and mathematica uses something similar
[00:48:30] <moon-child> (mathematica: f[x,y]; , instead of ;)
[00:50:05] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[00:50:38] <gilberth> I have seen them with REDUCE, too.
[00:50:57] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 240 seconds)
[00:51:17] <gilberth> And you may call what Macsyma uses m-expressions too, if you wish.
[00:51:48] *** Joins: aeth (~aeth@user/aeth)
[00:53:54] <gilberth> What I had in mind though, is some actual Lisp. And my beloved muLISP is funny here. It reads [a,b] and (a,b) as (a b). But not f[a;b] as (F A B).
[01:24:49] <pjb> gilberth: the lore is that it has never been implemented.  It was used to write lisp code in manuals and papers until 1962 or so (eg. in the LISP 1.5 user manual, and in papers).
[01:28:16] <moon-child> I thought lisp 1.5 itself used them?
[01:34:03] <gilberth> moon-child: m-expressions? No, Lisp 1.5 uses s-expressions as does Lisp I.
[01:34:12] <moon-child> ok
[01:36:07] <gilberth> The manual has definitions of some functions like SUBST or SUBLIS in m-expressions though.
[02:01:41] *** Joins: notzmv (~zmv@user/notzmv)
[02:29:51] * hayley asked the void how to measure fragmentation.
[02:30:08] * hayley gets a response from Steve Blackburn, who published the Immix GC among other neat things.
[03:13:54] <hayley> https://www.youtube.com/watch?v=9Rzyox9msOc
[03:13:55] -ixelp- Doctorska sausage (doctor sausage) vs 240V - YouTube
[03:25:47] <hayley> Okay, Steve summoned his co-author because I mentioned how Immix counted holes.
[03:29:24] <hayley> But he says that he's not sure he has the ideal heuristic for fragmentation, when we've talked about two (pages used vs. pages actually needed, and number of holes in the heap).
[03:31:04] <hayley> But measuring pages would be useful for CLOSOS, since we actually page and so locality there would help.
[04:02:19] <hayley> The other problem is locality of reference on the scale of CPU cache, and idk how you measure that. But it's not as bad as paging.
[04:17:07] <hayley> https://www.youtube.com/watch?v=J8hhqT-TwzM
[04:17:08] -ixelp- Peaches en regalia-Kώστας Κωστόπουλος-Αποστόλης Νήρας (Frank Zappa) - YouTube
[04:17:36] *** Joins: OutsideContextPr (GreatFlea@168.138.73.107)
[04:47:40] *** Quits: random-nick (~random-ni@87.116.180.98) (Ping timeout: 256 seconds)
[04:53:51] *** Joins: djuber (~user@65.79.128.64)
[05:15:08] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Read error: Connection reset by peer)
[05:15:25] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[05:16:57] *** Quits: Catie (~user@user/catie) (Quit: going home)
[05:16:57] *** Quits: djuber (~user@65.79.128.64) (Remote host closed the connection)
[05:24:29] *** Quits: OutsideContextPr (GreatFlea@168.138.73.107) (Quit: The Lounge - https://thelounge.chat)
[05:29:36] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[05:33:34] *** Quits: marcoxa (~user@77-57-64-215.dclient.hispeed.ch) (Remote host closed the connection)
[05:39:45] *** Quits: ryanbw (~ryanbw@mab.sdf.org) (Ping timeout: 268 seconds)
[05:40:19] *** Joins: ryanbw (~ryanbw@mab.sdf.org)
[05:49:54] <epony> hayley, still looking for the perfect garbage for your collection of GC's ;-)
[05:51:04] <hayley> Fuck, epony is back.
[05:51:24] <epony> how're doing?
[05:51:24] * hayley uploaded an image: (71KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/uGhRaLFcQXavJwJbsRUMSNuX/lamport-what-the-fuck.jpg >
[05:52:02] <epony> does your collection grow?
[05:52:22] <hayley> Only when the live set is large enough.
[05:52:41] <epony> I'd use my collection on my collection from time to time ;-)
[05:52:59] <epony> lisp can teach you stuff you know
[05:53:46] <hayley> What does it look like I am doing?
[05:54:14] <epony> I think you're implementing memory management in application space.
[05:54:24] <hayley> Yes, tends to happen.
[05:54:47] <epony> (as in, not relying on the operating system, since your program is the platform)
[05:55:07] <epony> and it's probably slow for you, or you lack control, since you're not spawning processes
[05:55:09] <hayley> Well, they won't merge anything in the kernel to help, so what am I to do exactly?
[05:56:33] <epony> propose what you learned to a system that exposes mechanisms for control of the memory allocation and process control from kernel to your management utility (dynamic tuner)
[05:56:57] <epony> have to  touch base at some point
[05:57:27] <epony> syscalls don't bite ;-)
[05:58:06] <hayley> As I said, there's nothing the kernel can help with.
[05:58:39] <epony> it gives you memory management and process control, which you can control.. if dynamic tracing can do it, what gives you obstructions?
[05:58:56] <epony> (your own choices)
[06:00:42] <hayley> Process control won't do very much, and one only gets mmap, munmap, mremap, mprotect from the kernel.
[06:00:47] <epony> you have also micro-kernel systems to consider at some point as your host
[06:01:28] <epony> process control is the real stuff ;-) trust other systems implementers
[06:01:30] <hayley> See Appel and Li's "Virtual memory primitives for user programs" <http://bnrg.cs.berkeley.edu/~adj/cs262/papers/vm-tricks.pdf> 
[06:06:45] <epony> 1991 called home, nobody picked ;-)
[06:07:10] <hayley> The primitives are still basically the same.
[06:07:38] <epony> yes, the BSD4* added VM to UNIX
[06:08:19] <epony> a bit before this paper compares sun's copy and mach trials
[06:11:46] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[06:12:11] <dave0> maw
[06:14:42] <hayley> maw
[06:15:01] <dave0> hi hayley 
[06:15:30] <dave0> cold drink?
[06:16:40] <hayley> If you're that annoyed by a 30 year old paper on MMU design that really hasn't changed, let me tell you about this 44 year old one that claims the entropy of a cons cell is between 7.4 and 11.7 on average.
[06:16:41] <hayley> https://sci-hub.st/10.1145/359423.359427
[06:16:42] -ixelp- Sci-Hub | An empirical study of list structure in Lisp. Communications of the ACM, 20(2), 78–87 | 10.1145/359423.359427
[06:17:00] * moon-child serves dave0 a nice iced latte
[06:17:15] <dave0> thanks moon-child !
[06:17:26] <dave0> i had a double espresso today
[06:17:30] <dave0> nom
[06:17:50] <hayley> Don't worry, the copyright notice is at the end, and typeset in Comic Sans apparently, so it's legal.
[06:19:01] <moon-child> I think sci-hub.se is the current one
[06:19:23] <moon-child> actually kinda strange, they have almost the same ip.  But a couple of times sci-hub.st didn't have a copy of some paper and .se did
[06:19:31] <hayley> ¯\_(ツ)_/¯
[06:34:07] *** Quits: clothespin_ (~awolven@c-73-209-95-92.hsd1.il.comcast.net) (Remote host closed the connection)
[06:57:15] <dave0> sectorlisp story on hacker news has added garbage collection and is saying it's smaller than sectorforth
[06:57:20] <dave0> this cannot stand!
[07:00:06] <moon-child> why?
[07:01:25] <dave0> just because of the challenge
[07:01:58] <dave0> to make a forth smaller than a lisp :-p
[07:03:03] <moon-child> sectorforth has pointers though
[07:03:08] <moon-child> and i/o
[07:08:33] <hayley> Sectorlisp has a copying GC without forwarding pointers, as objects are immutable. So nothing like pointers.
[07:09:18] <moon-child> you don't need forwarding pointers anyway, if you are not concurrent
[07:09:52] <moon-child> well, you need some sort of forwarding table, I guess
[07:10:19] <hayley> You need forwarding pointers to break cycles and preserve structure sharing.
[07:12:37] <moon-child> sure, yes.  I think of a forwarding pointer as specifically something for the mutator's use.  But I'm not sure there's a good reason for that, and mm glossary does not corroborate
[07:13:14] <hayley> "If a garbage collector does not use forwarding pointers, then it will "unshare" all objects during copying, leaving all objects with exactly one reference, and it will diverge on cyclic list structures."
[07:13:34] <hayley> Though the sectorlisp GC does something clever to only make one copy, idk.
[07:13:53] <epony> hayley, wasn't annoyed by your suggested paper ;-)
[07:14:09] <hayley> Next one then: https://plover.com/~mjd/misc/hbaker-archive/CacheCGC.html
[07:14:10] -ixelp- GC'91 Workshop on Garbage Collection in Object-Oriented Systems
[07:15:22] <epony> I'd appreciate if you quote the key sentence in the conclusion to spare me a RTT to the PDFs that you think I have to read in detail.. which I'll read after the "excerpt"
[07:15:27] * hayley skims the sectorlisp article
[07:15:51] <hayley> "It's unlikely, but it'd explain why [JMC] felt so unhappy working with IBM on FORTRAN since it would be like asking a Rust developer to fix Visual Basic 6." Nah, it's like asking gilberth to hack Rust.
[07:16:33] <hayley> The GC does something spiffy by comparing the allocation pointer before and after evaluation per https://justine.lol/sectorlisp2/#garbage
[07:16:35] -ixelp- LISP with GC in 436 bytes
[07:16:44] <epony> I see, Rust is selling GC too ;-)
[07:22:15] *** Alfr is now known as Guest8608
[07:22:15] *** Quits: Guest8608 (~Alfr@user/alfr) (Killed (strontium.libera.chat (Nickname regained by services)))
[07:22:19] *** Joins: Alfr (~Alfr@user/alfr)
[07:28:37] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[07:28:43] <GreaseMonkey> VB6 definitely has some legacy baggage with it but it does provide the With / End With block
[07:29:06] <GreaseMonkey> also if you have the JP version you can straight up name things using Japanese characters
[07:32:26] <epony> from codepages to memory paging with multiprocess and occasional halts.. kernels everywhere
[07:32:54] <epony> driving people nutty all the time ;-)
[07:33:51] <epony> browsers are now managing memory too, it's not just java's privilege any more
[07:34:36] <epony> "you can get a GC, and you can get a GC.. everyone gets a GC"  --Opera
[07:57:52] *** Quits: semz (~none@user/semz) (Ping timeout: 268 seconds)
[08:10:29] *** Joins: semz (~none@user/semz)
[08:10:50] <epony> "Finally, we studied the Intel 80860XP architecture, and found that it is very suitable for copying garbage collection, in both single-processor and multi-processor configurations.. We are particularly interested in the improvements due to bypassing the cache."
[08:11:11] <epony> tough nut to crack
[08:11:32] <epony> memory controllers are now in-CPU
[08:12:55] <epony> from the graveyard of failed RISCs  https://en.wikipedia.org/wiki/Intel_i860
[08:13:47] *** Joins: clothespin_ (~awolven@c-73-209-95-92.hsd1.il.comcast.net)
[08:14:39] <epony> "For instance, an instruction to add two numbers will take considerably longer if the data are not in the cache, yet there is no way for the programmer to know if they are or not."  --p00p
[08:15:00] <moon-child> ooo go brr
[08:18:25] <epony> P5 was a success though..
[08:19:09] <epony> they blame it on compilers, you know ;-)
[08:19:57] <moon-child> 'tain't vliw
[08:20:02] <epony> ya
[08:21:00] <epony> constant data >> ordered data
[08:21:28] <epony> applies to instructions too
[08:46:23] <epony> (with p5 the p00p was renamed f00f)
[08:48:40] <epony> https://en.wikipedia.org/wiki/F00f#See_also
[08:56:15] <epony> "However, this variant requires that the operating system itself be prevented from writing to read-only pages (through the setting of a global processor flag), and not all kernels are designed this way; more recent kernels in fact are, since this is the same basic mechanism used for implementing copy-on-write." then https://en.wikipedia.org/wiki/Copy-on-write#In_virtual_memory_management
[08:56:38] <epony> so HW bugs were telling the "future" ;-)
[08:59:40] <epony> (that was in the past of how "Unix" forks)
[09:05:14] <moon-child> gilberth: random thought, regarding js, cps, and tco: can you not take advantage of the event loop?  Do a full cps transformation, but once every n calls, do 'setTimeout(continuation, 0)' and return normally
[09:05:19] <moon-child> then it doesn't matter if you get tco or not
[09:24:48] *** Joins: notzmv (~zmv@user/notzmv)
[09:37:28] <moon-child> hmm.  In sectorlisp, a cons is 4 bytes; but there are only two types and so one bit of tag.  So you have 2 spare bits in each cons.  Why not just mark/sweep?
[09:49:29] *** Joins: shka (~herr@109.231.0.226)
[09:56:31] <moon-child> though, hmm, I'm not sure how you would do non-local exits that way
[09:59:12] <moon-child> I guess just by passing around extra continuations.  Duh.
[10:16:23] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[10:28:04] <shka> https://www.themoscowtimes.com/2021/12/20/russia-cuts-gas-supplies-to-europe-as-temperatures-drop-a75881 <- completely reliable business partner, yes
[10:28:04] -ixelp- Russia Cuts Gas Supplies to Europe as Temperatures Drop - The Moscow Times
[10:28:49] <shka> selwyn: still skeptical?
[10:58:54] <sham1> Clearly Russia wants to ruin its economy to get back at Yurop
[11:07:31] <hayley> https://news.ycombinator.com/item?id=29633696 Ah shit, here we go again
[11:07:32] -ixelp- The Lisp “Curse” Redemption Arc | Hacker News
[11:17:15] <sham1> Orange site, f
[11:17:55] <sham1> Rip server
[11:18:29] *** Joins: treflip (~user@user/treflip)
[11:18:36] <moon-child> hn is just a shitty reddit knockoff
[11:18:47] <hayley> No, applied-langua.ge survived Reddit and HN reading up on the one-more-re-nightmare compiler.
[11:37:58] <epony> well, it built the pipelines to several countries, why cut gas and miss any payment.. makes no economic sense, must be a political problem by the green party of the bundestag
[11:38:22] <epony> "pipes must rot" --analena
[11:39:45] <epony> shka, we need non-EU funded media (private think-tanks) for info
[11:40:52] <epony> (and less naive readers)
[11:41:50] <epony> the real problems is, they want to make use of the renewables which are owned by new politicians and conditions are unfavourable due to clima(c)tic changes
[11:42:01] <epony> so, green.. coldness
[11:42:49] <epony> privatisation of the energy sector and liberalisation of the market in the middle of the pandemic - greatest failure after the 80ies
[11:43:41] <epony> that's what facebook and twitter install for politicians (who are business-lobyists for unprofitable and expensive generation)
[11:44:38] <epony> cheers, you got your trump-obiedan-johnson too now ;-)
[11:46:08] <epony> new politicians, new media, new fake crises, new policy, new taxes, new price hikes, new inflation, new economy, new protests, new internet companies, new crash-bubble-collapse, new lies, new chills, new viruses, new definitions, new post-modernism
[11:46:34] <epony> the only old thing is, you and me
[11:46:59] <epony> (and we're younger than the new politicians)
[11:49:53] <epony> so, how about switching off some energy wasting fake currency computers and confiscate them for social services web pages and access to education during the stay home dictatorship-martial-law-regime
[11:50:25] <epony> or move them abroad so they don't weigh on the failing e-cars sector
[11:50:41] <epony> (which don't work in the winter anyway)
[11:52:16] <epony> or switch off facebook and google and twitter and other non-essential (wasteful) regional data centres for an extra 25% energy boost ;-)
[11:52:58] <epony> you won't be able to find fake articles published on their portals, but it's not a big miss, that way we will not feel like politicians have anything useful to say
[11:54:22] <epony> the economy works without amazon services too
[11:54:46] <epony> and there is more fuel and clear roads for people transit to hospitals
[11:56:08] <epony> WW2 "give us your coal and oil and gas" WW3 "take it all, just no more sanctions and embargo on your precious electronics"
[11:56:26] <epony> lulzies ;-)
[11:57:18] <epony> France says, gnuclear is clean/clear and hosts 10x more servers than Germany.
[11:57:43] <sm2n> oh man it's happening again
[11:57:56] <epony> Xmas?
[11:58:11] <sm2n> no, wall of text
[11:58:17] <epony> ah, don't read it
[11:58:27] <sm2n> did you finally move from freenode
[11:58:39] <epony> this is freenode but rebranded ;-)
[11:59:05] <epony> there are no real people on the other side of the fashion statement since mid-summer
[11:59:26] <sm2n> that is what I thought
[11:59:35] <pl> yep, a rude awakening that the ignore list was emptied by server move
[11:59:50] <epony> not quite rude ;-)
[12:00:41] <epony> if you want your silence back.. I can just read too, but you have to talk
[12:01:00] <epony> at least 1-2 lines per 5min
[12:01:28] <epony> (kidding, not going to write much)
[12:34:50] <shka> just ignore you drama queens
[12:35:48] <hayley> https://www.youtube.com/watch?v=y3AQXtqY0Es
[12:35:49] -ixelp- Yes Starship Trooper - YouTube
[12:36:51] *** Quits: clothespin_ (~awolven@c-73-209-95-92.hsd1.il.comcast.net) (Remote host closed the connection)
[12:37:06] * hayley wonders if she can test CONS without CONSing its arguments in C somehow. Just need to open and close regions, then have some way to evacuate objects out of regions.
[12:37:56] <hayley> Best assume that we won't have integers pretending to be pointers. And I guess I have to diddle registers...somehow.
[12:52:19] <epony> so you need memory allocator as a service ;-) I can't imagine any reason to not run a process that does this, if you have no access to the underlying system
[12:52:28] <moon-child> you are going to move pointers without knowing their tags?
[12:52:33] <moon-child> best of luck
[12:53:09] <epony> "I need kernel services, but I wo't ever use a kernel syscal.. so, then I want to spawn processes, but I said no kernels".. start another lisp
[12:53:24] <hayley> I don't need tags per se, just "in data stack" or not. And it'll be wrong, of course, but probably not wrong enough to be useless.
[12:53:38] <gilberth> moon-child: [js, cps, tco] This is exactly what I did. However, I let the stack pile up for some guessed depth and then go through setTimeout to yield essentially. This works well, but is slow, very slow. Not because of setTimeout but because of all the closures. To unwind you could also 'throw', IIRC I used a hybrid approach: 'throw" every /n/ continuations, 'setTimeout' every /k/ throws.
[12:53:55] * hayley wonders if she can setjmp(), diddle the registers in the jmp_buf, then longjmp() and get fixed pointers in registers. 
[12:54:08] <epony> and not panic in the middle
[12:54:31] <epony> ROP is a thing these days
[12:54:53] <moon-child> gilberth: I see
[12:55:01] <epony> https://en.wikipedia.org/wiki/Return-oriented_programming#Defenses
[12:55:03] <moon-child> gilberth: feels like you could get rid of a lot of that with some global transforms
[12:55:43] <epony> in short, bypassing your system and pretending you're it is a sure way to discover you're not it ;-)
[12:56:03] <moon-child> hayley: better to just do it in asm.  non-volatile variables are not guaranteed to be accessible across setjmp/longjmp, and compilers do exploit this fact
[12:56:17] <epony> and kernels too
[12:56:23] <hayley> Well, okay then.
[12:56:28] <epony> even on windows
[12:58:02] <moon-child> https://0x0.st/-Ct2.txt  compiler-opaque setjmp/longjmp
[12:58:45] <gilberth> moon-child: Perhaps. I didn't bother though. But keep in mind, that I wanted a runtime error to enter a debugger REPL, which implies that even CAR or + must be prepared to go through setTimeout, if needed. So there aren't long strands of code, which could be proven to be "yield free".
[12:59:27] <moon-child> I see
[12:59:53] <moon-child> need type inference to make that work, I guess
[13:01:07] <gilberth> Yep, and when I would do that, which is a major task, I won't waste the effort on a JS backend.
[13:01:17] <moon-child> yeah
[13:16:27] <hayley> moon-child: So, your longjmp just has to stash the callee-saves registers? And can you do the if (sjmp(&foo)) { jumped } else { haven't jumped } thing?
[13:17:48] <moon-child> yes
[13:18:01] <hayley> Thanks!
[13:18:29] <moon-child> (need to pass nonzero as second ljmp arg)
[13:22:34] <moon-child> (well, hmm, I think there is still potential for existing stack entries to get trashed.  But ideally rather than doing that you would make 'sjmp' do the fixups directly--or, more likely, delegate to a c function that does the fixups--rather than returning twice)
[13:24:02] <hayley> Yeah, I should just do the fixups in assembly...though IIRC I had pains with baker-gc (which did replication copying) and the C compiler throwing in derived pointers, so I should just write my own compiler first. :)
[13:24:27] <moon-child> :)
[13:25:02] <hayley> ):
[13:25:42] <hayley> I decided to start with a very stupid template(?) compiler where it's just one set of instructions per VM instruction. The stupidest thing possible.
[13:28:26] <hayley> But, unfortunately, if you have lazy allocation, it can bootstrap and you can even write the GC with it. It'll probably be terribly slow, but you can do it.
[13:36:41] * hayley finds more stupid articles by looking up "lazy allocation gc".
[13:36:42] <hayley> https://segment.com/blog/allocation-efficiency-in-high-performance-go-services/
[13:36:43] -ixelp- Allocation efficiency in high-performance Go services | Segment Blog
[13:37:24] <hayley> "It’s cheap because it only requires two CPU instructions: one to push onto the stack for allocation, and another to release from the stack." And compacting GC allocation only requires one instruction: one to push. 
[13:37:32] <hayley> IOW that is so not why it's cheap.
[13:40:42] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Quit: WeeChat 3.3)
[13:42:38] <hayley> But then I found an interesting article name: "Heap compression for memory-constrained Java environments" <https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.4.3091&rep=rep1&type=pdf>
[13:42:39] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[13:43:27] <hayley> I think we know how to write fast compression algorithms, so why not use a LRU cache and compress the garbage? lol
[13:54:29] <shka> hayley: linux actually has a module for compressing RAM
[13:54:31] <shka> :P
[13:55:12] <hayley> zswap?
[13:55:24] <hayley> ...or zram?
[13:55:48] <hayley> In either case I think they both just compress memory as a bag of bits, rather than e.g. delta encoding pointers, which could be great.
[13:57:21] <moon-child> hayley: template thing is used by hotspot, iirc they don't even do it the honour of calling it a 'compiler'
[13:57:33] <hayley> lol
[13:57:47] <hayley> HotSpot: has C1, C2
[13:57:53] <hayley> hayley's compiler: has C0, C1
[13:58:59] <shka> hayley: zram
[14:05:19] <hayley> .oO(Aren't compressed OOPs in the JVM a bit like this? But they always have 32-bit object references, and shift all references right to drop zero bits due to alignment.)
[14:09:24] <hayley> Yeah, seems like someone got the idea for bigger machines though. <https://dl.acm.org/doi/10.1145/3297858.3304006>
[14:22:57] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 240 seconds)
[14:39:45] *** Joins: random-nick (~random-ni@87.116.167.125)
[14:58:19] <moon-child> https://danluu.com/cgroup-throttling/  imagine using containers instead of first-class global environments 
[14:58:20] -ixelp- The container throttling problem
[14:59:29] <hayley> That wasn't very metamodular of you
[15:25:17] <hayley> https://www.youtube.com/watch?v=mufOeaZCEkw
[15:25:18] -ixelp- King Crimson - Larks III Into Sleepless (1983) - YouTube
[15:39:25] <shka> i was doing it wrong all this time https://stackoverflow.com/questions/9288181/converting-from-camelcase-to-in-emacs
[15:39:25] -ixelp- elisp - Converting from camelcase to _ in emacs - Stack Overflow
[15:39:27] <shka> god damnit
[15:53:23] <hayley> The other thing is that compression also helps with locality, as you can fit more crap in cache, but I have no idea how to pull that off in "real time" on a multi core machine.
[16:06:56] *** Joins: makomo (~makomo@user/makomo)
[16:33:07] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[17:18:48] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:06:57] <dave0> nite all
[18:07:27] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:38:02] <selwyn> https://playxo.com/
[18:38:04] -ixelp- All Bitcoin private keys is on this website
[18:38:08] <selwyn> a literal wallet inspector
[18:44:40] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:8033:35bf:bcd3:1f86)
[20:06:21] *** Joins: clothespin_ (~awolven@c-73-209-95-92.hsd1.il.comcast.net)
[20:17:09] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[20:17:40] *** Joins: Alfr (~Alfr@user/alfr)
[20:31:40] <selwyn> is d like rust before its time
[20:33:29] <shka> selwyn: no
[20:33:50] <shka> but also yes
[20:34:24] <shka> D is more OO C++ with GC in nutshell 
[20:34:33] <shka> kinda like java honestly 
[20:34:38] <shka> but less annoying
[20:35:00] <shka> i like D standard library
[20:35:13] <shka> they had ranges instead of C++ iterators 
[20:38:49] <pl> in a way, D and Rust had similar original reason
[20:39:00] <pl> to be replacement for C++, targeted at C++ people
[20:48:40] <shka> yeah
[20:48:48] <shka> just with a different focus
[20:49:03] <shka> i personally think that D made more sense 
[20:49:11] <shka> but it is pretty much dead right now
[21:16:12] <gilberth> What I don't get with Rust is that if the compiler could tell me where I need Rc<T>, RefCell<T>, Arc<T>, Mutex<T>, .lock().unwrap(), .borrow(), .borror_mut(), .clone), why do I need to insert that manually?
[21:16:52] <gilberth> Or 'mut' or my favorite: '*&', which just looks completely nuts.
[21:16:59] <shka> gilberth: yeah, that borrow checker is simply overblown
[21:17:47] <gilberth> Well, I could see the point from a C hacker perspective. But why this approach to blame rather than to help?
[21:19:14] <gilberth> IMHO it should be the reverse. State that you really, really need 'x' on the stack and let the compiler whine, when it can't figure out how to do that. The default should be the least restrictions.
[21:19:54] <shka> honestly?
[21:20:09] <shka> the very concept of ownership is a problem in my opinion
[21:20:22] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[21:20:40] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[21:21:30] <gilberth> Well, I can see the point as they wanted to make passing pointers to stack allocated objects safe. So when you buy the doctrine that copying is nicer than a GC, this makes sense. But I don't by that.
[21:22:12] <gilberth> And from copying comes the need to have mutexes to fight word-tearing.
[21:22:22] <gilberth> Anyhow, bbl.
[21:22:28] <selwyn> d looks prettier
[21:23:00] <shka> selwyn: and less templates 
[21:24:25] <shka> i mean, compared to C++
[21:24:43] <shka> also, some practical features, like integrated unit tests
[21:25:47] <selwyn> sigh
[21:25:50] <shka> honestly, i would rather have something like CL, but with the concept of immutability 
[21:26:08] <selwyn> for data science?
[21:26:24] <shka> for general programming, but also for data science 
[21:26:58] <shka> and maybe more consistent naming conventions
[21:27:08] <shka> but otherwise i really like CL
[21:27:17] <shka> ... obviously 
[21:27:19] <selwyn> indeed
[21:27:26] <selwyn> wondering if i have omicron
[21:27:36] <selwyn> lateral flow says no but that might not mean much
[21:27:36] <shka> test yourself 
[21:27:57] <selwyn> before you wreck yourself
[21:27:57] <shka> lateral flow sounds like aerodynamics terms
[21:29:18] <shka> is that "lateral flow" just western blot?
[21:29:22] <selwyn> um
[21:29:31] <selwyn> it may be a britishism
[21:29:43] <selwyn> antigen rapid test?
[21:30:42] <shka> in Poland lab community we usually use "immunoassay" for that 
[21:30:46] <shka> anyhow
[21:31:19] <shka> don't even know what general population call it
[21:31:47] <selwyn> important thing is that they are maybe not that great but they are used a lot here
[21:32:50] <selwyn> the lira pulled off quite a recovery
[21:34:44] <shka> yeah, still 1 lira used to be 0.5 euros 10 years a go 
[21:34:59] <shka> and right now it is just a random shit coin
[21:57:25] *** Joins: Catie (~user@user/catie)
[22:02:07] <gilberth>  It's kinda funny, the more I start to prepare proper meals, the more items land on the grocery list, which my cousin has never bought. (He does the groceries for me.) It then goes like "I would need XYZ" "What's that? How does it look? Where would I find that?"
[22:04:37] <selwyn> shka: my cousin is actually investing in ethereum as a stable foreign currency
[22:04:40] <selwyn> which may actually work
[22:04:52] <shka> uh
[22:04:58] <shka> 'stable'
[22:05:55] <selwyn> i also feel that irl currencies are better
[22:05:56] <gilberth> In the long run it might actually be more stable than our fiat currencies.
[22:05:58] <selwyn> but still
[22:06:08] <shka> gilberth: nah
[22:06:23] <shka> well, maybe in a really long run
[22:06:39] <selwyn> surely the real danger is that they just get outlawed and you lose your savings automatically
[22:07:19] <gilberth> You could always ask yourself: Did real estate raised in price or has the EUR fallen that much? A matter of the perspective.
[22:07:25] <shka> but the issue is that there is little to no money velocity for the crypto
[22:07:52] <shka> and without that, what is really stabilizing cryptos?
[22:08:12] <shka> crypto is not a money actually
[22:08:42] <shka> it is simply a very liquid, non-productive asset of speculative price and no value
[22:09:14] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Quit: WeeChat 3.3)
[22:09:14] <shka> maybe it could become something else in the future, i don't know
[22:09:26] <shka> pl: your opinion on that?
[22:09:30] *** Quits: treflip (~user@user/treflip) (Quit: good night ✨)
[22:10:03] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:14:24] <Aurora_v_kosmose> gilberth: Thing is the price of other things matters as well. Food & power for one.
[22:16:42] <gilberth> Aurora_v_kosmose: Yes, and we face quite some inflation at the moment. Still the costs for just having a roof above your head skyrocketed in the last decade. And that is a bubble waiting to burst.
[22:17:55] <Aurora_v_kosmose> Yeah. I (uselessly) hope the corporations responsible for it don't get bailouts for the crash they caused in the first place.
[22:17:56] <gilberth> It'll burst the very moment central banks would quit printing money like crazy.
[22:18:23] <Aurora_v_kosmose> Corporate dickwads buying housing as assets...
[22:18:42] <gilberth> Aurora_v_kosmose: They are not to blame.
[22:18:49] <shka> gilberth: central banks produce only around 3% to 8% of total money
[22:18:50] <selwyn> i agree with aurora
[22:19:23] <gilberth> shka: Central banks set the interest rate. And regular banks print the money.
[22:19:40] <shka> well, they produce debt
[22:19:45] <shka> which can be used as currency 
[22:19:50] <shka> but not "print" 
[22:20:03] <gilberth> debt is the very same thing as money. debt = money. No debt, no money.
[22:20:11] <Aurora_v_kosmose> Distinction mostly exists because currency is more digital than physical nowadays.
[22:20:34] <Aurora_v_kosmose> But it amounts to the same thing.
[22:21:19] <gilberth> Money never has been something different from debt.
[22:21:59] <Aurora_v_kosmose> Depends on if you consider money as "tokens of value" of "physical expressions of those tokens".
[22:22:13] <Aurora_v_kosmose> The latter is produced less & less.
[22:22:29] <gilberth> Money are transferable tokens of I-owe-you.
[22:23:14] <gilberth> Whether you use clay tablets, shells, coins from metal, notes on paper, or bits, does not matter.
[22:23:22] <Aurora_v_kosmose> Fair enough.
[22:23:26] <shka> gilberth: there is one fundamental difference 
[22:23:54] <gilberth> Yeah, there is: I could use an official currency to pay my taxes.
[22:23:59] <shka> no
[22:24:10] <shka> debt has to be paid with interests 
[22:24:23] <shka> that that's huge 
[22:24:35] <gilberth> Yes, that is one part of the scam that banks invented.
[22:25:05] <gilberth> Where does the interest come from? Does it even exist the moment the debt is created?
[22:26:28] <Aurora_v_kosmose> Interest is differentiated from fraud through pure contriviance and legalization.
[22:26:34] <shka> listen, there are things that exist only in our heads, but imagination is equally important to material world
[22:27:24] <Aurora_v_kosmose> Currencies are currently stable enough that interest being equal to inflation (of the specific currency) would work better in most non-failing economies.
[22:27:47] <Aurora_v_kosmose> The moment it starts failing or crashing though that's a different story.
[22:27:47] <shka> the immaterium is real 
[22:27:48] <gilberth> Well, for me the real scam is not the interest, but that I borrow money from banks, that they just invented. Thus you pay interest for thin air.
[22:27:51] <shka> thought it does not exist
[22:29:03] <gilberth> They give you thin air and want real money back in return. I wish I could print money. I should found a bank.
[22:29:23] <Aurora_v_kosmose> Well yes, but the notion of debt isn't dependent on the creation of value ex-nihilo.
[22:29:30] <Aurora_v_kosmose> Interest comes from literally nothing.
[22:29:55] <Aurora_v_kosmose> But you could theoretically mandate that all loans be backed by actual pre-owned value.
[22:30:11] <Aurora_v_kosmose> At which point lending has a much greater risk, but makes a lot more logical sense.
[22:30:22] <gilberth> Yes and I would favor that.
[22:30:55] <Aurora_v_kosmose> So would I. The logical consistency pleases me.
[22:32:06] <gilberth> Interest per se is fine with me. When I lend money, I want interest, just because, when I lend it, I cannot use it anymore to do an investment on my own. But then not being a bank, I may only lend money, that I have. The loan is the investment.
[22:33:08] <pl> Interest is how new money is created in fiat systems 
[22:33:13] <Aurora_v_kosmose> That's kind of a feature, not a bug, though. It removes the incentive to loan in the first place to anyone you don't know.
[22:33:17] <Aurora_v_kosmose> Or care about.
[22:33:28] <Aurora_v_kosmose> Which means a debt economy can't stand up.
[22:33:31] <gilberth> A return of investment is very real. Say you invest into a machine, which makes things cheaper for you to produce. You'll have a return on that initial upfront cost.
[22:33:47] <Aurora_v_kosmose> Indeed.
[22:33:51] <pl> Anyway, the reason why gist works is that it's how you pay taxes 
[22:34:00] <Aurora_v_kosmose> It'd make all loan evaluation a lot more sensible.
[22:34:01] <pl> s/gist/fiat/
[22:34:07] <Aurora_v_kosmose> Because the loan would have to make sense.
[22:34:22] <pl> Aurora_v_kosmose: it would also pretty much kill economy 
[22:34:36] <Aurora_v_kosmose> pl: The current one? Definitely, it's based on debt and nonsensical faffing about.
[22:34:52] <Aurora_v_kosmose> It unravels if you so much as look at ti a bit too hard.
[22:35:25] <pl> Thing is, the part that is breaking up is the extreme use of it by capitalism unfettered 
[22:35:30] <Aurora_v_kosmose> It works more on the inertia of its own bullshit than anything else.
[22:35:36] <pl> So called financialization of economy 
[22:35:55] <pl> Blockchain cryptocurrencies are about total financialization 
[22:36:09] <pl> So I see it as the same, except some remaining good bits 
[22:36:16] <pl> So even worse 
[22:36:26] <Aurora_v_kosmose> And each of them which lends itself well to that use has pretty much failed as anything more than yet another speculation token unusable as actual currency.
[22:36:38] <Aurora_v_kosmose> The few privacy coins around don't lend themselves well to speculation and remain low-value.
[22:36:44] <pl> If you want to see alternative system, consider Muslim investment system 
[22:37:29] <pl> Because "usury" (and that includes "unearned (by work) interest") is forbidden 
[22:37:51] <pl> So instead of loans, you have partnerships/investments
[22:38:13] <selwyn> yes
[22:38:42] <selwyn> it doesn't play well with the secular system though
[22:38:58] <gilberth> pl: Yes, and that is IMHO the way more honest way.
[22:39:07] <selwyn> this is why the lira is in the shit - keeping interest rates low is a strategic economic goal for this reason
[22:39:46] <pl> selwyn: lots of banks cooperate with that 
[22:39:48] <Aurora_v_kosmose> pl: That sounds interesting.
[22:40:34] <gilberth> I mean, a borrower with spare money seeks an opportunity to invest. With a loan this is almost risk free, not his problem, if the business idea is shit. Going the other route and getting some share[s] of the business in return for giving money makes both parties carry the same risk.
[22:41:06] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[22:41:18] <gilberth> Which is the original idea of stocks.
[22:57:19] <pl> Yep
[22:57:44] <pl> In sharia-compliant banking, banks or other lenders have to take a stake in the business 
[22:58:09] <pl> Because the core of capitalism is, we'll, banned 
[22:58:14] <pl> *well 
[23:01:38] <selwyn> iirc muhammad spoke out in favour of the market regulating prices
[23:03:32] <shka> one of the Hudson books may be partly about it IIRC
[23:03:51] <selwyn> can believe that
[23:04:08] <shka> he has done some writing on the banking history...
[23:04:22] <selwyn> hm
[23:07:50] <selwyn> i wonder how much they actually enforced zero interest
[23:10:18] <selwyn> seems that it was not often practical
[23:18:42] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[23:30:17] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
