[00:11:58] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[00:19:58] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[00:23:13] *** Joins: coot (~coot@213.134.190.95)
[00:37:54] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[00:46:37] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Quit: WeeChat 3.4)
[00:56:35] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[00:58:10] *** Joins: coot (~coot@213.134.190.95)
[01:12:53] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[01:26:36] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[01:55:56] *** Joins: coot (~coot@213.134.190.95)
[01:57:53] *** Quits: coot (~coot@213.134.190.95) (Client Quit)
[01:58:54] *** Joins: coot (~coot@213.134.190.95)
[03:01:43] *** Quits: joes (~joes@hardfought/member/joes) (Quit: Leaving)
[03:17:26] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[03:53:37] *** Quits: segfaultfizzbuzz (~rustisafu@2602:306:cd3c:9350:59e3:db49:aa0a:46e5) (Ping timeout: 240 seconds)
[03:56:33] *** Joins: jackson99 (~bc8147f2@83.167.180.121)
[04:14:56] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:22:25] *** Quits: polyphem (~rod@2a02:810d:840:8754:2622:b61:ec32:bf43) (Quit: WeeChat 3.4)
[05:26:15] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[05:51:54] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[05:53:00] *** Joins: zaquest (~notzaques@5.130.79.72)
[05:57:28] *** Joins: xsperry (~xs@user/xsperry)
[07:07:33] *** Joins: lionhairdino (~jacoo@121.131.39.82)
[07:14:25] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:15:42] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[08:56:52] *** Quits: jackson99 (~bc8147f2@83.167.180.121) (Quit: CGI:IRC (Session timeout))
[08:59:57] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[09:13:25] *** Joins: libertyprime (~libertypr@118-92-72-229.dsl.dyn.ihug.co.nz)
[09:22:46] *** Quits: lionhairdino (~jacoo@121.131.39.82) (Ping timeout: 256 seconds)
[09:28:01] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[09:28:02] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[09:28:05] *** allbery_b is now known as geekosaur
[09:30:34] *** Joins: dobblego (~dibblego@122-199-1-30.ip4.superloop.com)
[09:30:34] *** Quits: dobblego (~dibblego@122-199-1-30.ip4.superloop.com) (Changing host)
[09:30:34] *** Joins: dobblego (~dibblego@haskell/developer/dibblego)
[09:31:50] *** Joins: libertyp1ime (~libertypr@118-92-72-229.dsl.dyn.ihug.co.nz)
[09:32:48] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[09:37:08] *** Quits: libertyprime (~libertypr@118-92-72-229.dsl.dyn.ihug.co.nz) (*.net *.split)
[09:37:09] *** Quits: dminuoso (~dminuoso@user/dminuoso) (*.net *.split)
[09:37:09] *** Quits: dibblego (~dibblego@haskell/developer/dibblego) (*.net *.split)
[09:37:09] *** Quits: Goodbye_Vincent (~Goodbye_V@freakshells.net) (*.net *.split)
[09:37:09] *** Quits: mmaruseacph2 (~mihai@198.199.100.72) (*.net *.split)
[09:37:09] *** Quits: meejah (~meejah@rutas.meejah.ca) (*.net *.split)
[09:37:09] *** Quits: neverwas (jpneverwas@swissbox.unperson.link) (*.net *.split)
[09:37:09] *** Quits: ski (~ski@remote11.chalmers.se) (*.net *.split)
[09:37:10] *** Quits: drewr (~drew@user/drewr) (*.net *.split)
[09:37:11] *** dobblego is now known as dibblego
[09:42:50] *** Joins: ski (~ski@remote11.chalmers.se)
[09:42:50] *** Joins: dminuoso (~dminuoso@user/dminuoso)
[09:42:50] *** Joins: mmaruseacph2 (~mihai@198.199.100.72)
[09:42:50] *** Joins: meejah (~meejah@rutas.meejah.ca)
[09:42:50] *** Joins: neverwas (jpneverwas@swissbox.unperson.link)
[10:26:16] *** Joins: polyphem (~rod@2a02:810d:840:8754:2c8b:1f9:dc9a:b89b)
[11:11:31] *** Joins: vpan (~0@212.117.1.172)
[11:13:35] *** Joins: lionhairdino (~jacoo@121.131.39.82)
[11:51:56] *** Quits: libertyp1ime (~libertypr@118-92-72-229.dsl.dyn.ihug.co.nz) (Quit: leaving)
[12:05:56] *** Joins: jespada (~jespada@87.74.36.188)
[12:06:37] *** Joins: coot (~coot@213.134.190.95)
[12:07:06] *** Quits: coot (~coot@213.134.190.95) (Remote host closed the connection)
[12:07:38] *** Joins: coot (~coot@2a02:a310:e241:1b00:ec1a:e9df:79ac:66ba)
[12:24:52] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[12:28:02] <vpan> hi, I'm looking at two sample RPN calculators: one is simply using a fold (http://learnyouahaskell.com/functionally-solving-problems#reverse-polish-notation-calculator) and another (https://github.com/bravit/hid-examples/blob/master/expr/rpn/EvalRPN.hs) is using State. I wonder if there's a benefit in using State in this case (performance?) or is it for the sake of example and there are other cases where State is harder to avo
[12:28:02] <vpan> id?
[12:28:53] *** Joins: denbrahe (~denbrahe@2001:470:69fc:105::19c0)
[12:31:08] <dminuoso> vpan: Generally State is not something you pick out of performance concern, but rather out of certain convenience
[12:31:31] <dminuoso> Or perhaps just because you like its purity
[12:31:49] <dminuoso> Over the years I practiced Haskell, I stopped using State in most cases
[12:32:09] <merijn> I like State for complex traversals, tbh
[12:32:20] <dminuoso> merijn: Ive grown fond of IORef.
[12:32:23] <merijn> but those are fairly rare
[12:32:34] <dminuoso> In more complex software I happen to want IO anyway in those places
[12:32:37] <dminuoso> Just to be able to log
[12:32:46] <vpan> right, you guessed my underlying question - when should I consider using State? :) I feel inclined to avoid state, but maybe I'm missing something.
[12:33:09] <dminuoso> Hard to say, really.
[12:33:19] <dminuoso> vpan: State is useful if you have stateful computations in otherwise pure code.
[12:33:44] <dminuoso> It lets you write sort of "imperative/stateful code" inside pure regions
[12:34:05] <dminuoso> But if performance is your utmost concern, ST/STRef is probably the silver bullet
[12:34:40] *** Joins: libertyprime (~libertypr@118-92-72-229.dsl.dyn.ihug.co.nz)
[12:37:21] <vpan> I think it should be possible to avoid state, e.g. by using recursion. So I guess State is useful in the cases where a recursive approach is too complicated.
[12:46:58] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Read error: Connection reset by peer)
[12:47:03] <merijn> vpan: Well, the first thing you need to realise is that State isn't really state in the "mutable state" sense of other programming languages
[12:47:21] <merijn> It's just a convenient abstraction for threading a "state argument" through a bunch of functions
[12:47:31] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[12:47:57] <vpan> ok, that might help dislike it a little less :)
[12:48:03] <merijn> Implementing it yourself from scratch is usually an educational exercise: https://gist.github.com/merijn/098106abd45c940dab09
[12:48:31] <dibblego> if you force your data types to be immutable, you will inadvertently invent State, regardless of language
[12:49:15] <dibblego> if you "just use recursion", you'll just re-implement >>= for State several times
[12:49:18] <merijn> vpan: We do have a whole bunch of *actual* mutable state, but that looks rather different than State
[12:49:52] <merijn> i.e. IORef, STRef, and TVar in IO, ST, and STM respectively
[12:50:12] <vpan> dibblego: that's very interesting. I need more practice to come closer to re-inventing State, but I'll keep this in mind. :)
[12:50:51] <merijn> vpan: From the gist I linked it's actually fairly easy (note, that "a few hours of frustration" still counts as easy in my opinion :p) to implement yourself
[12:51:18] <merijn> There's only a handful of things that actually typecheck as implementations and most of the wrong ones are *obviously* wrong
[12:51:32] <dibblego> merijn: I'd suggest turning on warnings
[12:51:46] <dibblego> i.e. you can get >>= wrong, and a lot of people do if they use type-holes
[12:52:45] <merijn> In my defense, that gist predates the mainstream release of typed-holes, or I would've used those instead of undefined :p
[12:54:20] <vpan> merijn: sure, I've already sustained "a few hours of frustration" more than once learning Haskell. :) I embrace that - you don't become fit by lying on the couch, you don't learn new things by doing things you already know.
[12:54:53] <dibblego> they will do this: MyStateT k >>= f = MyStateT (\s -> k s >>= \(a, s') -> runMyStateT (f a) s)
[13:01:33] <merijn> vpan: Yeah, I'm just trying to set realistic expectations of "easy" :)
[15:14:07] *** Quits: coot (~coot@2a02:a310:e241:1b00:ec1a:e9df:79ac:66ba) (Quit: coot)
[15:20:21] *** Joins: coot (~coot@213.134.190.95)
[15:25:34] *** Quits: awpr (uid446117@id-446117.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[15:48:44] *** Joins: jackson99 (~bc8147f2@cerf.good1.com)
[16:14:44] *** Quits: libertyprime (~libertypr@118-92-72-229.dsl.dyn.ihug.co.nz) (Ping timeout: 256 seconds)
[16:29:28] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[16:45:37] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[16:52:03] *** Joins: drewr (~drew@user/drewr)
[17:13:12] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[17:15:19] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[17:24:09] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Quit: WeeChat 3.4)
[18:19:05] *** Quits: jackson99 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC)
[18:19:15] *** Quits: xsperry (~xs@user/xsperry) ()
[18:42:53] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[18:43:22] *** Joins: coot (~coot@213.134.190.95)
[18:52:44] *** Joins: xsperry (~xs@user/xsperry)
[19:17:24] *** Joins: segfaultfizzbuzz (~rustisafu@2602:306:cd3c:9350:59e3:db49:aa0a:46e5)
[20:05:38] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Quit: Leaving)
[20:05:56] *** Quits: ski (~ski@remote11.chalmers.se) (Ping timeout: 256 seconds)
[20:06:46] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[20:13:44] *** Quits: vpan (~0@212.117.1.172) (Quit: Leaving.)
[20:14:51] *** Joins: vicfred (~vicfred@user/vicfred)
[20:16:27] *** Joins: vicfred_ (~vicfred@user/vicfred)
[20:18:57] *** Quits: vicfred (~vicfred@user/vicfred) (Ping timeout: 240 seconds)
[20:25:49] *** Quits: jespada (~jespada@87.74.36.188) (Ping timeout: 240 seconds)
[20:26:58] *** Joins: jespada (~jespada@87.74.36.188)
[20:31:41] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[20:38:24] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[20:49:20] *** Joins: awpr (uid446117@id-446117.lymington.irccloud.com)
[21:00:42] *** Joins: coot (~coot@213.134.190.95)
[21:01:48] *** Quits: lionhairdino (~jacoo@121.131.39.82) (Ping timeout: 250 seconds)
[21:08:26] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[21:11:43] *** Quits: vicfred_ (~vicfred@user/vicfred) (Quit: Leaving)
[22:25:41] *** Quits: alphabeta (~kilolympu@31.205.200.235) (Ping timeout: 256 seconds)
[22:29:28] *** Joins: kilolympus (~kilolympu@31.205.200.235)
[22:30:26] *** Joins: mcglk (~mcglk@131.191.49.120)
[22:31:10] *** Quits: mcglk_ (~mcglk@131.191.49.120) (Read error: Connection reset by peer)
[22:44:54] <Midjak> Hi is it possible to see the reduction on the given expression in ghci ?
[22:45:15] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[22:45:22] <geekosaur> ghci itself can't, but look at the ghc-vis package
[22:47:30] <Midjak> ok thank you geekosaur
[23:47:28] *** Joins: libertyprime (~libertypr@118-92-72-229.dsl.dyn.ihug.co.nz)
