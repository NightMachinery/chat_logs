[00:07:47] *** Quits: lumo_e (~enrico@2001:b07:5d38:4002:5621:72eb:398a:dcb1) (Ping timeout: 250 seconds)
[00:31:41] <arkanoid> am I the only one receiving http 500 error here? https://github.com/yglukhov/nimpy
[00:32:11] <FromDiscord> <enthus1ast> nope
[00:32:12] <FromDiscord> <enthus1ast> 500
[00:32:23] <FromDiscord> <enthus1ast> for me aswell
[00:32:48] <arkanoid> yglukhov hacked github with the power of nimpy
[00:34:04] <arkanoid> oh well, is massive https://www.githubstatus.com/
[00:40:33] <arkanoid> do you tend to "import" or "include" the tested module X into your test_X.nim ?
[01:03:30] <arkanoid> I'm realizing how many different things in the world are named nim* nimble* nimpy* thanks to github being down
[01:06:08] <FromDiscord> <evoalg> regarding deepcopy which was mentioned above, when would I use that in Nim instead of normal copy ... I though containers in Nim were copied by value anyway?
[01:06:28] <arkanoid> what's the equivalent of "--app:lib" in .nimble file?
[01:09:07] <FromDiscord> <pyautogui> Github appears to be down for everybody. Twitter is memeing like crazy about it. Kind of sucks.
[01:09:13] <FromDiscord> <Recruit_main707> arkanoid: i think there is a way but i dont remember it right now, you can use a .nims file too and do `switch("app", "lib")`, lemme search and see if i can find a way to do it in the nimble file
[01:10:12] <FromDiscord> <Recruit_main707> I think there isnt
[01:10:42] <FromDiscord> <Recruit_main707> but what i said will work
[01:11:31] <FromDiscord> <Recruit_main707> so if you have a a `src/main.nim` file, add a `src/main.nims` file with that switch
[01:14:25] <arkanoid> yes it works, thanks
[01:19:30] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[01:20:34] *** Joins: xet7 (~xet7@user/xet7)
[01:21:48] <FromDiscord> <pyautogui> GH is back up.
[01:23:27] <arkanoid> yes
[01:24:45] <arkanoid> well, almost
[01:38:34] *** Joins: src (~src@user/src)
[01:41:53] *** Quits: src (~src@user/src) (Client Quit)
[01:44:48] *** Joins: perro (~perro@072-191-245-069.res.spectrum.com)
[01:56:28] *** Quits: xet7 (~xet7@user/xet7) (Quit: Leaving)
[01:56:52] *** Joins: xet7 (~xet7@user/xet7)
[02:06:57] <FromDiscord> <codic> sent a code paste, see https://play.nim-lang.org/#ix=3Giy
[02:07:03] <FromDiscord> <codic> It seems just calling self.focused.isSome causes it to crash
[02:07:15] <FromDiscord> <codic> sent a code paste, see https://play.nim-lang.org/#ix=3Giz
[02:07:20] <FromDiscord> <codic> 734 is the last line in the code snippet I posted
[02:07:26] <FromDiscord> <codic> Where is -1 coming from
[02:08:14] <FromDiscord> <codic> Oh nvm the trace is wrong
[02:19:22] <FromDiscord> <Varriount> What's the current state of CPS (continuation-passing style) for asynchronous programming in Nim?
[02:20:20] <FromDiscord> <Elegantbeef> The CPS folks have a bunch of demo projects, so it works 😀
[02:23:17] <FromDiscord> <codic> Fixed the issue but is the trace pointing to the wrong line a compiler bug?
[02:24:12] <FromDiscord> <konsumlamm> In reply to @Varriount "What's the current state": https://github.com/nim-works/cps
[02:24:19] <FromDiscord> <konsumlamm> the readme says it's beta quality
[02:28:48] *** Joins: k0ta (~k0ta@114.23.111.136)
[02:46:17] <FromDiscord> <evoalg> @ElegantBeef I'm noob and naive, but is there are way for Nim to completely change the default way slices work, so a slice would return an iterator unless a copy is needed? (a copy would be needed for `let a = "hello"[1..3]`) but it would return an iterator when needed, and also `for i, x in` would work? I'm trying to understand if Nim didn't do some of the iterators early on when it was being created and so iterators need to be "bolted on
[02:47:57] <FromDiscord> <Elegantbeef> Well i mean that's what it's supposed to do, the issue is that nim doesnt dispatch on return types
[02:48:47] *** Quits: Onionhammer (~onionhamm@23-88-146-29.fttp.usinternet.com) (Ping timeout: 250 seconds)
[02:48:49] <FromDiscord> <Elegantbeef> so when you do `iterator [](a: openarray, rng: slice[int]): T` and `iterator [](a: openarray, rng: slice[int]): (int, T)` it cannot disambiguate the two iterators
[02:49:35] <FromDiscord> <Elegantbeef> so in the case of the fun `for i, x in "hello"[0..^2]` it calls the `[]` iterator and since we can only have one it cannot be used with pairs
[02:49:36] <FromDiscord> <Varriount> In reply to @evoalg "<@!145405730571288577> I'm noob and": `
[02:50:43] <FromDiscord> <Elegantbeef> The only issue we have with my package is that `for i, x in "hello"[0..^2]` calls my `[]` iterator that doesnt return a tuple, which means we have an error as we're attempting to unpack a T into two values
[02:51:14] <FromDiscord> <Elegantbeef> And actually your example is wrong, since a copy is only needed if you mutate the value
[02:51:44] <FromDiscord> <Elegantbeef> So you can do a reference aslong as you know the variable stays within scope of another and doesnt mutate
[02:52:01] <FromDiscord> <Elegantbeef> But that's an optimization
[02:52:22] <FromDiscord> <Elegantbeef> Hopefully that makes sense
[02:53:09] <FromDiscord> <Elegantbeef> Like i said i can remove the ambiguity 100% but then the ergonomics get shit
[02:53:30] <FromDiscord> <Elegantbeef> like `for i, x in "hello"[&0..^2]` solves the problem
[02:53:51] <FromDiscord> <Elegantbeef> But now we have to use `&` for pairs
[02:54:56] <FromDiscord> <evoalg> it does thank you! ... apart from the last bit ... so the assignment `a = "hello"[1..3]` could have an iterator assigned to it? ... so that would be an iterator not a range? I'm a bit confused about assigning a slice to a variable when it's an iterator?
[02:55:16] <FromDiscord> <Elegantbeef> Only closure iterators are assignable to variables
[02:55:23] <FromDiscord> <Elegantbeef> So it'd never call the iterator since it's not a closure
[02:55:47] <FromDiscord> <Elegantbeef> Only in `for` context is an iterator preferred over a function
[02:55:57] <FromDiscord> <Elegantbeef> Which is what slicerator relies upon
[02:56:03] <FromDiscord> <evoalg> ahh
[02:57:58] <FromDiscord> <Elegantbeef> Alternatively we could do `for i, x in "hello"[&(0..^2)]` 😛
[02:58:30] <FromDiscord> <Elegantbeef> I dont know we need something to nicely disambiguate the pairs from the normal iterator
[02:58:58] <FromDiscord> <Elegantbeef> Cause i really dont care that `for i, x in "hello"[0..^2]` errors, cause it's bad anyway
[02:59:28] <FromDiscord> <evoalg> Thank you, I understand the problem now ... I don't know what the answer is, but as least I understand the problem!
[02:59:53] <FromDiscord> <Elegantbeef> Yea i mean it's really just a question of do we want to use distincts or `pairs(range)`
[02:59:54] <FromDiscord> <evoalg> oh that's bad? ... how would you do `for i, x in` instead?
[03:00:08] <FromDiscord> <Elegantbeef> Well it's bad cause it relies on sequence slicing
[03:00:43] <FromDiscord> <Elegantbeef> So if you have a large string and you do that to it you're needlessly taking more ram and slowing the program
[03:01:24] <FromDiscord> <Elegantbeef> The iteration isnt the issue as much as the fact it's abusing slicing and implicit pairs like i mentioned yesterday
[03:01:27] <FromDiscord> <evoalg> "sequence slicing" is making a copy?
[03:01:34] <FromDiscord> <Elegantbeef> Yep
[03:01:59] <FromDiscord> <Elegantbeef> `for i, x in "hello"[0..^2]` is turned into `for i, x in "hell".pairs`
[03:02:07] <FromDiscord> <Elegantbeef> And creation of `"hell"` is an allocation
[03:02:34] <FromDiscord> <evoalg> that's hell
[03:05:00] <meowray> `create(T)` does not set m_type so `T of BaseOfT` does not work. How to set m_type?
[03:05:53] <meowray> `var a = create(T); a = T()` sets m_type but the redundant assignment looks bad
[03:06:40] <FromDiscord> <Elegantbeef> do you have a full example?
[03:07:03] <FromDiscord> <Ricky Spanish> how do you define an object that has a string array as a field? it seems to be unhappy when i use []string, seq[string] works but not really what i was aiming for
[03:07:32] <FromDiscord> <Elegantbeef> Arrays in nim are dependent types so it's `field: array[Length, string]`
[03:07:50] <FromDiscord> <Ricky Spanish> ah ok thanks for explaining @ElegantBeef
[03:07:54] <FromDiscord> <Elegantbeef> If you do not know the length at compile time you do not use an array
[03:08:00] <FromDiscord> <Elegantbeef> Or you do but make it larger than you'll need
[03:10:13] <FromDiscord> <MaskRay (Fangrui Song)> sent a code paste, see https://play.nim-lang.org/#ix=3GiP
[03:11:38] *** Joins: src (~src@user/src)
[03:11:51] *** Quits: src (~src@user/src) (Remote host closed the connection)
[03:12:55] <FromDiscord> <Elegantbeef> You've jumped three programs in 10 seconds 😛
[03:13:14] <FromDiscord> <Elegantbeef> Is there a reason you're using `create` over a reference?
[03:13:54] <FromDiscord> <@MaskRay:matrix.org> (I realized that IRC is bad for pasting program... Then I thought I might try Gitter, but finalized I realized most people seem to use Matrix... So I dug up my app.element.io account which has been used for a while..)
[03:14:06] <FromDiscord> <Elegantbeef> Well gitter is matrix now so ya 😛
[03:14:55] <FromDiscord> <@MaskRay:matrix.org> I want to do raw memory management without GC, so I want to avoid `ref`. I still need `instanceof`, though...
[03:15:10] <FromDiscord> <Elegantbeef> Ah i see, was uncertain what you were after so thought i'd ask
[03:15:29] <FromDiscord> <Elegantbeef> I assume there is lacking type information from `create` since it just dumbly 0's memory
[03:16:53] <FromDiscord> <@MaskRay:matrix.org> Yes. According to `nim c --gc:arc -d:debug --debugger:on a; rr record ./a; rr replay -d cgdb`, `create` allocated memory does not have valid `m_type`. `b[] = InputSection()` will set `m_type`, but the redundant assignment is bad.
[03:17:05] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[03:17:18] <FromDiscord> <Elegantbeef> Might be the way to do it
[03:17:20] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3GiQ
[03:17:52] <FromDiscord> <Elegantbeef> You of course can do `createU` in this case since you're setting it after
[03:18:06] <FromDiscord> <Elegantbeef> So it shouldnt be any more costly, or negligibly more costly
[03:18:39] <FromDiscord> <Elegantbeef> Actually that caching is useless
[03:18:40] <FromDiscord> <Elegantbeef> I'm dumb
[03:19:04] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3GiS
[03:20:40] <FromDiscord> <@MaskRay:matrix.org> sent a code paste, see https://play.nim-lang.org/#ix=3GiT
[03:20:49] <FromDiscord> <Elegantbeef> Yea that also works, if you never want to pass an expression
[03:20:54] <FromDiscord> <pmunch> Generally a good idea to do the caching though [Elegantbeef](https://matrix.to/#/@elegantbeef:matrix.org)
[03:21:05] <FromDiscord> <Elegantbeef> Well it doesnt matter in this case
[03:21:24] <FromDiscord> <Elegantbeef> `typeof(default)` is a compile time evaluated statement, and you only use default after i t
[03:21:26] <FromDiscord> <pmunch> Sure, but it's good that you're showing it to people
[03:21:35] <FromDiscord> <Elegantbeef> Ah yes
[03:23:47] <FromDiscord> <Elegantbeef> @evoalg\: if you ever want to play with "how bad is it really" this is fun https://play.nim-lang.org/#ix=3GiW
[03:24:02] <FromDiscord> <Elegantbeef> Though slicerator was dumbly using `toOpenArray` which slowed it down like 5ns
[03:24:23] <FromDiscord> <Elegantbeef> But naive is like 3 times slower than slicerator/manual
[03:24:48] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3GiX
[03:26:27] <FromDiscord> <Elegantbeef> This of course gets worse the larger the sequence is
[03:30:51] *** Joins: Onionhammer (~onionhamm@23-88-146-29.fttp.usinternet.com)
[03:31:19] <FromDiscord> <evoalg> nice! ... yea "hello" isn't a long string ... gosh i had to compile with "-d:release" and knock a zero off each of them just so it'd finish in a reasonable time on my system lol ... thank you for the nice example!
[03:31:46] <FromDiscord> <Elegantbeef> Well you should only bench on release or danger anywho
[03:32:01] <FromDiscord> <Elegantbeef> No problem for the example though
[03:36:21] <FromDiscord> <evoalg> That "full iter" one might even be slower when it has to do `a[i]` to actually use the values, or will it be just the same?
[03:36:47] <FromDiscord> <Elegantbeef> Oh right i forgot to index
[03:37:46] <FromDiscord> <Elegantbeef> It'll probably get inlined and not matter much
[03:38:45] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3GiZ
[03:38:46] <FromDiscord> <Elegantbeef> Yea no cost
[03:39:06] <FromDiscord> <Elegantbeef> That std deviation of 20ns on the naive iteration is fucking silly
[03:39:16] <FromDiscord> <Elegantbeef> That's 50% of the average
[03:40:03] <FromDiscord> <evoalg> sent a code paste, see https://play.nim-lang.org/#ix=3Gj0
[03:40:24] <FromDiscord> <Elegantbeef> what flags are you passing?
[03:40:31] <FromDiscord> <Elegantbeef> I'm doing `-d:release -d:lto`
[03:40:45] <FromDiscord> <evoalg> `nim -r -d:release c slicerator_test3.nim`
[03:40:49] <FromDiscord> <Recruit_main707> what was lto againg?
[03:40:49] <FromDiscord> <Elegantbeef> Though the `lto` doesnt matter too much
[03:40:56] <FromDiscord> <Elegantbeef> Link time optimization
[03:41:02] <FromDiscord> <Recruit_main707> thanks
[03:41:19] <FromDiscord> <Elegantbeef> it's preferable to use `--passC:"-flto" --passL:"-flto"`
[03:41:28] <FromDiscord> <Elegantbeef> Since that works on all compilers
[03:43:15] <FromDiscord> <evoalg> sent a code paste, see https://play.nim-lang.org/#ix=3Gj2
[03:43:18] <FromDiscord> <ynfle (ynfle)> Why doesn't `-d:lto`?
[03:43:42] <FromDiscord> <Elegantbeef> Why dont do `-d:lto`?
[03:44:04] <FromDiscord> <Elegantbeef> It passes the wrong flags to clang and other C compilers
[03:44:05] <FromDiscord> <ynfle (ynfle)> Why doesn't it work on al compilers?
[03:44:19] <FromDiscord> <ynfle (ynfle)> Why can't it be configured to pass the correct ones?
[03:44:27] <FromDiscord> <Elegantbeef> It can but apparently no one bothered
[03:44:55] <FromDiscord> <Elegantbeef> Yea i dont know evo, quite odd performance numbers
[03:45:00] <FromDiscord> <Elegantbeef> Did you use a much bigger string?
[03:45:06] <FromDiscord> <Elegantbeef> Or is it still `"Hello"`?
[03:45:38] <FromDiscord> <evoalg> still "hello" ... but let me remind you that I'm running nim on linux with is on docker on my mac
[03:46:02] <FromDiscord> <Elegantbeef> Ah
[03:46:16] <FromDiscord> <evoalg> cos I'm cray cray
[03:46:24] <FromDiscord> <Elegantbeef> Apparently so
[03:46:31] <FromDiscord> <Elegantbeef> Takes 3 seconds to install Nim on mac 😛
[03:49:12] *** Quits: k0ta (~k0ta@114.23.111.136) (Ping timeout: 260 seconds)
[03:50:10] <FromDiscord> <evoalg> it runs a lot faster!
[03:50:16] <FromDiscord> <evoalg> on my mac
[03:50:25] <FromDiscord> <Elegantbeef> Is the performance difference noticeable now?
[03:52:58] <FromDiscord> <evoalg> sent a code paste, see https://play.nim-lang.org/#ix=3Gj7
[03:55:04] <FromDiscord> <Elegantbeef> Yay!
[03:55:15] <FromDiscord> <Elegantbeef> The deviation is unreal
[03:55:31] <FromDiscord> <evoalg> yea ... that's still with only "hello"
[03:57:32] <FromDiscord> <@MaskRay:matrix.org> sent a code paste, see https://play.nim-lang.org/#ix=3Gj8
[03:59:08] <FromDiscord> <evoalg> In reply to @Elegantbeef "The deviation is unreal": the deviation true!
[04:00:08] <FromDiscord> <Elegantbeef> Is that suppose to fail running Mask?
[04:02:39] <FromDiscord> <@MaskRay:matrix.org> Maybe...
[04:02:57] <FromDiscord> <Elegantbeef> I just mean that example runs finee
[04:04:05] <FromDiscord> <@MaskRay:matrix.org> sent a code paste, see https://paste.rs/Fjw
[04:04:38] <FromDiscord> <@MaskRay:matrix.org> sent a code paste, see https://play.nim-lang.org/#ix=3Gj9
[04:04:42] <FromDiscord> <@MaskRay:matrix.org> Edited the message. It is fine with refc but crashes with arc/orc.
[04:04:46] <FromDiscord> <Elegantbeef> Ah
[04:04:53] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[04:05:02] <FromDiscord> <Elegantbeef> I mean i'd be cautious using a ref in a pointer object, i dont know the validity there
[04:05:49] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[04:06:11] <FromDiscord> <Elegantbeef> This might be a bug, or this might be bad practice hard for me to reason
[04:07:05] <FromDiscord> <Elegantbeef> Hopefully someone smarter than i can weigh in
[04:08:22] <FromDiscord> <@MaskRay:matrix.org> Yeah, the usage looks suspicious. I'll just avoid the usage. Since I do manual memory management, I'll just avoid `ref` in the members
[04:11:32] <FromDiscord> <konsumlamm> in general, is there any performance difference between writing to a `var` parameter vs returning a new value?
[04:12:03] <FromDiscord> <Elegantbeef> Well there is supposed to be NVRO optimization but it can be buggy
[04:12:47] <FromDiscord> <Elegantbeef> NVRO should rewrite `proc(args): T` to `proc(args, ret: var T)` and pass the address of the variable in the case of `var a = doThing()`
[04:13:12] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/manual.html#procedures-nrvo
[04:13:12] <FromDiscord> <konsumlamm> oh, i've heard of NRVO a lot (mostly that it's not reliable), but i never bothered to look it up
[04:13:50] <FromDiscord> <Elegantbeef> Depends on the type of course on how bad it is if it fails, but yea if concerned just pass it
[04:13:54] <FromDiscord> <konsumlamm> so without NRVO, a `var` parameter would be more efficient because returning something would copy it?
[04:14:04] <FromDiscord> <Elegantbeef> Yep
[04:14:16] <FromDiscord> <Elegantbeef> It's only a concern with large data types
[04:14:27] <FromDiscord> <Elegantbeef> with small type it doesnt make much sense afaik
[04:14:41] <FromDiscord> <konsumlamm> i see, ty
[04:15:17] <FromDiscord> <Elegantbeef> Didnt know `If p can raise an exception, NRVO applies regardless. `
[04:21:51] *** Joins: k0ta (~k0ta@151.210.235.115)
[04:23:52] <FromDiscord> <evoalg> @ElegantBeef am I correct in thinking that slicing by allocation vs by iterator wont make any practical different for most programs?
[04:31:42] <FromDiscord> <Elegantbeef> Well slicing in a for statement creates a copy that is then destroyed by the memory management so indeed
[04:35:03] <FromDiscord> <evoalg> (Sorry it might have been a been cheeky for me to suggest that ... even though I don't find it satisfying that slices to that wasteful stuff, I'm wondering if it'll make any practical difference)
[04:35:09] <FromDiscord> <Elegantbeef> The only cases you want to keep the value around is when you're doing something like `var a = yourSeq[a..b]` and there is no semantic difference with the iterators
[04:35:47] <FromDiscord> <Elegantbeef> I mean it's a correct statement, the only difference is performance
[04:36:02] <FromDiscord> <Elegantbeef> Semantically the program will run the same using my iterators or using slices
[04:36:16] <FromDiscord> <evoalg> `var a = yourSeq[a..b]` <-- that works with an iterator?
[04:36:25] <FromDiscord> <Elegantbeef> Nope
[04:36:34] <FromDiscord> <Elegantbeef> That's the proc
[04:36:40] <FromDiscord> <evoalg> gotcha
[04:36:41] <FromDiscord> <Elegantbeef> iterators are only called in `for` statements or loops
[04:36:55] <FromDiscord> <evoalg> ahh ok!
[04:36:57] <FromDiscord> <Elegantbeef> i say or loops but i'm being daft
[04:37:23] *** Quits: Onionhammer (~onionhamm@23-88-146-29.fttp.usinternet.com) (Ping timeout: 256 seconds)
[04:38:22] <FromDiscord> <evoalg> I take it you don't like using `for i, x in ...` at any time ... how would you do that instead? ... `for i in ... ` and then just do `a[i]` etc?
[04:38:36] <FromDiscord> <Elegantbeef> The issue isnt `for i, x in ...`
[04:38:45] <FromDiscord> <Elegantbeef> The issue is the `yourCollection[a..b]`
[04:38:56] <FromDiscord> <Elegantbeef> without my package that's making a brand new collection
[04:39:03] <FromDiscord> <Elegantbeef> So it's very silly to do
[04:39:12] *** Joins: Onionhammer (~onionhamm@23-88-146-29.fttp.usinternet.com)
[04:40:19] <FromDiscord> <evoalg> but ... but ... even before slicerator, I get the impression you'd avoid ever using `for i, x in` ? (yea I'm changing the subject a bit sorry)
[04:40:27] <FromDiscord> <Elegantbeef> No i dont
[04:40:38] <FromDiscord> <Elegantbeef> I like the pairs iterator very much
[04:40:53] <FromDiscord> <Elegantbeef> My disdain was with using slices + pairs
[04:41:36] <FromDiscord> <evoalg> ok phew! All clear now 🙂
[04:42:22] <arkanoid> having big sad moments with nim <> python interop for science. We're far far from interop
[04:42:56] <FromDiscord> <Elegantbeef> The mechanism of `for i, x in coll[a..b]` is a lazy solution to the problem, but i'll give it's easy to do
[04:43:17] <FromDiscord> <Elegantbeef> cause you're slicing that collection then iterating over it, so it's doing twice the work
[04:43:34] <FromDiscord> <Elegantbeef> What's wrong with the interop?
[04:46:09] <arkanoid> passing strings from arraymancer to python (pandas/numpy) is not working
[04:46:25] <arkanoid> it's ok if you stay with numbers, but strings are just no
[04:46:55] <FromDiscord> <Elegantbeef> How is the interop  beingn done?
[04:47:03] <FromDiscord> <Elegantbeef> being done even
[04:47:38] <arkanoid> arraymancer + datamancer + scinim/numpyarrays + nimpy
[04:48:03] <FromDiscord> <Elegantbeef> Nimpy should handle it
[04:48:07] <FromDiscord> <Elegantbeef> But odd that it doesnt
[04:48:54] <arkanoid> https://play.nim-lang.org/#ix=3Gjg
[04:49:04] <arkanoid> it won't run online
[04:50:04] <FromDiscord> <Elegantbeef> Jeez i'm going to be testing code that talks to python, what have i done to deserve this
[04:51:50] <arkanoid> I'm trying escape python too
[04:52:24] <arkanoid> but I need to move data for this
[04:52:37] <FromDiscord> <Elegantbeef> I dont try to escape it
[04:52:40] <FromDiscord> <Elegantbeef> I never visited 😛
[04:53:56] <arkanoid> got captured from it due to data science, sadly it has very good tools
[04:55:24] <arkanoid> this is how toNdArray is supposed to be used to move data from nim to python: https://scinim.github.io/getting-started/external_language_integration/nim_with_py.html
[04:56:29] <FromDiscord> <Elegantbeef> it errors for you on the `toNdArray`?
[04:57:03] <arkanoid> yes, it returns a Error: type mismatch
[04:57:16] <arkanoid> numpyarrays.nim(179, 37)
[04:58:22] <FromDiscord> <Elegantbeef> Seems it's 100% just a string tensor isnt happened
[04:58:26] <FromDiscord> <Elegantbeef> handled
[04:58:29] <FromDiscord> <Elegantbeef> Jeez i cannot type
[04:58:47] <arkanoid> this is the error I get: https://play.nim-lang.org/#ix=3Gjj
[04:58:57] <FromDiscord> <Elegantbeef> Yea same error
[04:59:22] <arkanoid> exactly. Without the possibility to send a string Tensor to python, no party for science
[04:59:54] <arkanoid> actually I'm quite confused if I do really need to use scinim/numpyarrays
[05:00:48] <arkanoid> by lurking the arraymancer issues it seems that there a thing called "laser" already merged supposed to make this operation possible, but unsure
[05:02:19] <FromDiscord> <Elegantbeef> Well `KnownSupportsCopyMem` is the issue
[05:02:32] <FromDiscord> <Elegantbeef> I dont know where it's declared
[05:02:55] <FromDiscord> <Elegantbeef> Ah it's in arraymancer
[05:03:31] <FromDiscord> <Elegantbeef> https://github.com/mratsim/Arraymancer/blob/66372d249b849102fd196345a08d4563d904751a/src/arraymancer/laser/tensor/datatypes.nim#L17 either string needs to be added here and handled, or a new overload that accepts `Tensor[string]` needs to be implemented
[05:03:33] <arkanoid> I think the real issue is this. Try "let data = @[@["a","b","c"],@["d","e","f"]].toTensor.get_data_ptr"
[05:04:03] <FromDiscord> <Elegantbeef> It's calling `toUnsafeView` on the tensor and not getting one cause it's not handled for this type
[05:04:31] <arkanoid> maybe because strings does not support copymem?
[05:04:52] <FromDiscord> <Elegantbeef> Well they do just not directly
[05:05:40] <FromDiscord> <Elegantbeef> https://github.com/mratsim/Arraymancer/blob/66372d249b849102fd196345a08d4563d904751a/src/arraymancer/laser/tensor/initialization.nim#L259 implementing this for a string is probably the only solution
[05:06:08] <FromDiscord> <Elegantbeef> should be `cast[ptr UncheckedArray[char](yourString[0].unsafeAddr)` though dont know the downside
[05:06:34] <FromDiscord> <Elegantbeef> I very much dont know about it
[05:07:09] <arkanoid> I'll just consider nim+python integration not possible when dealing with a dataframe with a string column
[05:07:25] <FromDiscord> <Elegantbeef> I think it's fully doable just it'll require copying data
[05:09:28] <arkanoid> sure I'm not planning to share GC'ed stuff between the two worlds
[05:09:47] <arkanoid> but how to copy/interop with strings is not documented
[05:17:50] <arkanoid> sigh, every time I try to start a new project with nim instead of python, I have to walk back to that old dirty road. Sad. Hopefully I will be able to write some nim functions and export them with exportpy
[05:18:26] <arkanoid> thanks for the help Elegantbeef
[05:19:37] <FromDiscord> <JOSTGRANT> On the topic of Python vs Nim; Is there a rough equivalent to "Wheels" floating around?
[05:21:55] <arkanoid> this money went to numpy, scipy, matplotlib and pandas: https://chanzuckerberg.com/newsroom/czi-awards-16-million-for-foundational-open-source-software-tools-essential-to-biomedicine/ . Nim is just better for everything, it just lacks libs and users
[05:22:27] <arkanoid> JOSTGRANT, what do you mean? Why you want wheels?
[05:23:40] <FromDiscord> <JOSTGRANT> To make it trivial to install C/C++ level dependencies for Nim packages in Nimble. Maybe this is already possible and I just haven't looked deep enough though :^P
[05:26:02] <arkanoid> All files and folders in the directory where the .nimble file resides will be copied as-is
[05:26:27] <arkanoid> you can however skip some directories or files by setting the skipDirs, skipFiles or skipExt options in your .nimble file. Directories and files can also be specified on a whitelist basis, if you specify either of installDirs, installFiles or installExt then Nimble will only install the files specified
[05:26:39] <arkanoid> I'm just copypasting from https://github.com/nim-lang/nimble
[05:27:36] <FromDiscord> <JOSTGRANT> Is that how Wheels works? I have no idea, I assumed it was grabbing offsite and there was just some config you specified or something? Have only been an end-user of it -- not done any of the actual grunt-work to make it happen
[05:29:58] <arkanoid> The *.whl file is similar to an *.egg in that it’s basically a *.zip file in disguise. If you rename the extension from *.whl to *.zip, you can open it up with your zip application of choice and examine the files and folders inside at your leisure
[05:31:04] <FromDiscord> <JOSTGRANT> So it's all just prepackaged then (underlying C/C++ dependencies). Fair enough. So wonder if this is just not done as-often currently in Nim because it'd bloat a given package / archive?
[05:32:01] <arkanoid> there's a setup file to do stuff
[05:32:52] <arkanoid> have to go now, sorry, it's damn cold here
[05:33:32] <FromDiscord> <JOSTGRANT> arkanoid: np thanks for the clarification!
[05:33:46] <arkanoid> yw
[05:34:39] <FromDiscord> <JOSTGRANT> _will also def look into it more. Guess it should be trivial for what I've been messing with recently (namely raylib demos ... could just add the given headers to my repo for now I guess anyways)._
[05:37:29] *** Quits: xet7 (~xet7@user/xet7) (Quit: Leaving)
[05:37:55] *** Joins: xet7 (~xet7@user/xet7)
[05:48:16] *** Quits: k0ta (~k0ta@151.210.235.115) (Ping timeout: 245 seconds)
[05:48:27] *** Joins: k0ta (~k0ta@103.108.94.37)
[05:53:02] *** Quits: k0ta (~k0ta@103.108.94.37) (Ping timeout: 240 seconds)
[05:54:31] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[05:55:19] *** Joins: k0ta (~k0ta@151.210.235.115)
[05:59:06] <FromDiscord> <Anonymous Poet> sent a code paste, see https://play.nim-lang.org/#ix=3Gjt
[06:03:34] <FromDiscord> <Elegantbeef> `K`
[06:03:42] <FromDiscord> <Anonymous Poet> it doesnt like it
[06:03:54] <FromDiscord> <Anonymous Poet> because it thinks T is of type `Equipment`, which doesnt have a `K`
[06:04:09] <FromDiscord> <Elegantbeef> Yea to be expected
[06:04:22] <FromDiscord> <Anonymous Poet> i couldnt find a way to get the inherited class type
[06:04:37] <FromDiscord> <Anonymous Poet> also all i have is a `typedesc`, not an instantiated obj
[06:07:34] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 268 seconds)
[06:08:41] <FromDiscord> <Elegantbeef> This seems to be a fun problem to solvee
[06:08:51] <FromDiscord> <Elegantbeef> Trying to do it without a macro
[06:09:30] <FromDiscord> <Elegantbeef> Macro might be the only case without fields
[06:09:45] *** Quits: k0ta (~k0ta@151.210.235.115) (Ping timeout: 256 seconds)
[06:09:55] *** Joins: k0ta (~k0ta@103.108.94.37)
[06:10:11] <FromDiscord> <Anonymous Poet> i can maybe kind of cheat it, because i know that the enum is named `EquipmentKind`, (ie. `$T & "Kind"`) if theres a way to turn a string into the type it names
[06:11:51] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Gju
[06:14:08] <FromDiscord> <Anonymous Poet> let me play around with it a bit
[06:22:43] <FromDiscord> <Elegantbeef> Here is a macro approach https://play.nim-lang.org/#ix=3Gjw
[06:22:57] <FromDiscord> <Elegantbeef> Only works for this specific object and relation ship so something can very easily fuck it up i imagine
[06:24:06] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:28:52] <FromDiscord> <Anonymous Poet> sent a code paste, see https://play.nim-lang.org/#ix=3Gjy
[06:30:48] <FromDiscord> <Anonymous Poet> supposing i know that the structure always follows this pattern (each case only has a single member, with the matching name + type), and we can assume that i can read the correct object; but i need to parse the enum type to know what to read and then cast to the right variant
[06:31:35] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3GjF
[06:31:41] <FromDiscord> <Elegantbeef> The macro does work if this is the pattern you have
[06:32:34] <FromDiscord> <Elegantbeef> Also if it's `kind` is root level on all objects you can do anothing thing
[06:32:47] <FromDiscord> <Anonymous Poet> why is the returned object of type `EquipmentKind` instead of `Equipment`?
[06:32:59] <FromDiscord> <Anonymous Poet> yes, kind is root level; what do you have in mind?
[06:33:39] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3GjG
[06:34:09] <FromDiscord> <Anonymous Poet> still prints the same thing :/
[06:34:28] <FromDiscord> <Elegantbeef> What's the expected output?
[06:34:51] <FromDiscord> <Anonymous Poet> `Equipment`, ie. `get` is supposed to return an object of type T
[06:35:01] <FromDiscord> <Elegantbeef> It does
[06:35:04] <FromDiscord> <Anonymous Poet> actually im very confused why this is printing the wrong thing
[06:35:12] <FromDiscord> <Anonymous Poet> is this the overloaded $?
[06:35:32] <FromDiscord> <Anonymous Poet> yup, i was just being dumb
[06:36:04] <FromDiscord> <Anonymous Poet> out of curiosity, does the line↵`typeof(T().kind)` actually allocate anything? or is the compiler smart enough to know i just want the type?
[06:36:10] <FromDiscord> <Elegantbeef> and no `typeof(T().kind)` is not done at runtiime
[06:36:34] <FromDiscord> <Elegantbeef> `typeof` gets the type of an expression so has to be done statically which means compile time
[06:38:00] <FromDiscord> <Anonymous Poet> thanks, i think this is close to what i had in mind; let me play around with it a bit. next issue is going to be creating an object of the matching variant
[06:56:38] <FromDiscord> <Anonymous Poet> ok, so i did get to the next issue now
[06:56:40] <FromDiscord> <impbox [ftsf]> looking at using https://github.com/nim-lang/dialogs i'm wondering if there's a way I can open a dialog but not block my app while it's open?
[06:58:36] <FromDiscord> <Anonymous Poet> In reply to @impbox "looking at using https://github.com/nim-lang/dialog": not familiar with this lib, but when you say "block my app" do you mean the app freezes, or that you cant access the content behind the dialog? the second one seems intended, and the first you might need to work around by having a different thread for rendering and working/processing
[06:59:51] <FromDiscord> <impbox [ftsf]> the app freezes, I'd like the dialog to run separately and I guess notify my app when a selection has been made
[07:00:03] <FromDiscord> <impbox [ftsf]> maybe I can use a separate process
[07:00:08] <FromDiscord> <impbox [ftsf]> or threads
[07:00:20] <FromDiscord> <Elegantbeef> Yea the easy answer is throw up a thread
[07:00:46] <FromDiscord> <Elegantbeef> A thread shouldnt be too bad
[07:01:45] <FromDiscord> <Elegantbeef> I atleast assume you're after the `info`/`warning` dialogs?
[07:04:12] <FromDiscord> <impbox [ftsf]> nah, open file
[07:04:30] <FromDiscord> <impbox [ftsf]> it's for a live music visualiser, so i don't it to pause the show when i want to load in a new file
[07:12:05] <FromDiscord> <Anonymous Poet> sent a code paste, see https://play.nim-lang.org/#ix=3GjX
[07:12:24] <FromDiscord> <Elegantbeef> This cannot be done
[07:12:29] <FromDiscord> <Anonymous Poet> oh no, why?
[07:12:31] <FromDiscord> <Elegantbeef> Without having a list of all types in scope
[07:12:46] <FromDiscord> <Anonymous Poet> ah
[07:12:49] <FromDiscord> <Elegantbeef> Well you've got a runtime value you want to convert to a type
[07:12:49] <FromDiscord> <Elegantbeef> It's not static
[07:13:01] <FromDiscord> <Anonymous Poet> this is meant to run at compiletime
[07:13:05] <FromDiscord> <Elegantbeef> If that was a `const` it is doable
[07:13:09] <FromDiscord> <Elegantbeef> Oh then yes it's doable
[07:13:38] <FromDiscord> <Elegantbeef> Though pretty pointless, but i'll show how
[07:13:40] <FromDiscord> <Anonymous Poet> its not quite const though; im parsing a schema file and generating the types from that
[07:14:01] <FromDiscord> <Elegantbeef> Well if it's done at compile time should be fine
[07:14:03] <FromDiscord> <Anonymous Poet> why do you say it is pointless? i might be missing something in that case
[07:14:25] <FromDiscord> <Elegantbeef> depends on what you're doing i suppose
[07:15:13] <FromDiscord> <Anonymous Poet> i have a schema file and a binary buffer created by that schema; im trying to write a codegen lib that will create the code to parse buffers specified by the given schema
[07:15:28] <FromDiscord> <Anonymous Poet> we can assume the schema is known at compile time
[07:16:06] <FromDiscord> <Anonymous Poet> ive implemented everything except the variant types that the schema allows
[07:17:45] <FromDiscord> <Elegantbeef> It might be doable, depends on how you skin it
[07:17:49] <FromDiscord> <Anonymous Poet> i think the way im trying to implement this may or may not be quite right though
[07:17:53] <FromDiscord> <Elegantbeef> You're probably better passing it to macro
[07:18:22] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3GjY
[07:18:33] <FromDiscord> <Anonymous Poet> in the case of this `get` function, we can assume that the type exists, but is not in scope of this file
[07:19:30] <FromDiscord> <Elegantbeef> Can i see the scheme?
[07:19:58] <FromDiscord> <Anonymous Poet> i can give an example schema, but it changes, hence the code gen :p
[07:20:09] <FromDiscord> <Anonymous Poet> specifically, im trying to write a flatbuffer compiler
[07:20:51] <FromDiscord> <Anonymous Poet> sent a code paste, see https://play.nim-lang.org/#ix=3GjZ
[07:22:16] <FromDiscord> <Elegantbeef> I dont know much about flat buffers, but i dont know if this is the right way around
[07:22:16] <FromDiscord> <Anonymous Poet> im imagining that the code im writing would be compiled by the end user together with their schema, and would generate some nim files that their project would import to read the data from the schema
[07:23:08] <FromDiscord> <Elegantbeef> the way i see it you have a variety of types you tag/id that can be used with a flat buffer then when you store the types it writes `id, data, id, data` ... so then you can access it directly
[07:23:34] <FromDiscord> <Elegantbeef> But it only works for static sized types afaik
[07:23:41] <FromDiscord> <Elegantbeef> Like i said i dont know anything about it, so probably should shush
[07:25:10] <FromDiscord> <Anonymous Poet> thats not quite correct; because the schema is agreed upon out-of-band, you dont have the same static sized type requirements
[07:25:30] <FromDiscord> <Elegantbeef> Isnt the entire point of it so you dont have to unpack values
[07:25:32] <FromDiscord> <Anonymous Poet> there are still some restrictions (like on alignment, etc), but i dont think thats relevant
[07:26:23] <FromDiscord> <Anonymous Poet> i think the point is more that you dont need to deserialize the whole buffer, if youre looking for a specific entry, you can follow a short number of pointer derefs to get what you want
[07:27:01] <FromDiscord> <Anonymous Poet> so if i know that my root type is Monster, and given a buffer i want Monster.Pos.Z, i dont need to read the whole buffer and parse it
[07:27:05] <FromDiscord> <Elegantbeef> yea i dont know anything about it, from briefly reading i figured you just have your structs stored with an ID so you can access fields
[07:28:02] <FromDiscord> <Anonymous Poet> the format is fairly simple though not as well documented as id like, haha :/ structs are just stored as dumps of data, tables are a bit more complex
[07:28:23] <FromDiscord> <Anonymous Poet> in any case though, i can read all of the basic types just fine, and mostly do the generic code generation that i want
[07:28:52] <FromDiscord> <Anonymous Poet> the problem (and maybe this is a design flaw on my part) is for the unions, i need to read the type (thats fine) and then return an object of the matching type
[07:29:18] <FromDiscord> <Anonymous Poet> i can do this, but i dont know how to express the return object construction bit
[07:29:34] <FromDiscord> <Elegantbeef> I can only say look at serialization libraries
[07:30:37] <FromDiscord> <Anonymous Poet> hmm, not sure that will really help for this; do you have any recommendations for resources on generics in nim? and macros?
[07:31:25] <FromDiscord> <Elegantbeef> https://dev.to/beef331/demystification-of-macros-in-nim-13n8 is all i really have for macros generics are simple so i dont think you overly need manuals for them 😀
[07:31:48] <FromDiscord> <Anonymous Poet> i guess i meant "generics in macros" 😄 thanks
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:38:36] <FromDiscord> <Rika> There is a protocol buffer compiler and library in Nim
[07:38:42] <FromDiscord> <Rika> Maybe take a look
[07:39:45] <FromDiscord> <Anonymous Poet> interesting, thanks
[07:45:21] <meowray> How to emulate a dynamic_cast with a `template`? Like C++ `if (auto *maybe_sub = dynamic_cast<Sub>(x))`
[07:46:23] <FromDiscord> <Elegantbeef> dynamic cast is a conversion to an inherited type?
[07:46:58] <FromDiscord> <Anonymous Poet> dynamic cast tries to convert to a parent type
[07:47:22] <FromDiscord> <Elegantbeef> Should just be `ParentType(yourType)`
[07:47:46] <FromDiscord> <Anonymous Poet> dynamic cast is runtime though; not sure how you can do the conditional like this
[07:48:06] <FromDiscord> <Anonymous Poet> and sorry, not parent, child type
[07:48:10] <FromDiscord> <Elegantbeef> `if yourType of SpecificType`
[07:52:50] <FromDiscord> <Elegantbeef> hopefully that suffices meow
[07:53:10] <FromDiscord> <Elegantbeef> actually that should be `yourVal` 😛
[07:54:22] <FromDiscord> <@MaskRay:matrix.org> sent a code paste, see https://play.nim-lang.org/#ix=3Gk7
[07:54:55] <FromDiscord> <Elegantbeef> Well dont you want to convert it to so it should be `(ptr T)(res)`?
[07:55:15] <FromDiscord> <@MaskRay:matrix.org> Ah, yes!
[08:00:15] <FromDiscord> <@MaskRay:matrix.org> sent a code paste, see https://paste.rs/65P
[08:01:47] <FromDiscord> <@MaskRay:matrix.org> sent a code paste, see https://play.nim-lang.org/#ix=3Gk9
[08:01:50] <FromDiscord> <Elegantbeef> Lol
[08:01:51] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Gka
[08:02:10] <FromDiscord> <@MaskRay:matrix.org> Your version is correct. Thanks!
[08:02:22] <FromDiscord> <Elegantbeef> Well it's not correct as much as an option
[08:03:07] <FromDiscord> <Elegantbeef> You may want to look at using type aliases or making your own create that handles this better so you dont need `ptr T` everywhere
[08:04:28] <FromDiscord> <Elegantbeef> That is assuming you are mostly doing `ptr T`
[08:08:30] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Gkb
[08:08:46] <FromDiscord> <Elegantbeef> Jeez this client hates me
[08:08:52] <FromDiscord> <Rika> why the untyped return for templates
[08:08:53] <FromDiscord> <Rika> ?
[08:09:08] <FromDiscord> <Elegantbeef> I mean it can be typed i was being lazy
[08:37:27] <FromDiscord> <@MaskRay:matrix.org> Nice. How do I use object construction syntax with `ptr object`? I.e. I want to initialize `someField` when creating `ChildA`
[08:39:50] <FromDiscord> <Elegantbeef> `a[] = typeof(a[])(someField: 30)` it's not ergonomic one bit
[08:42:52] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Gki
[08:44:00] <FromDiscord> <Marisol> Hey guys, does norm has automatic created_at and updated_at support? Or need to implement manually for every model?
[08:49:42] <FromDiscord> <@MaskRay:matrix.org> Then I'll stick with `object` instead of `ptr object` so that I can use `create`. I am using `ptr` for the main data structure (Section, Symbol) and `ref` for objects with few instances (linker script command) because `ref` has better ergonomics. I guess I am abusing https://nim-lang.org/docs/manual.html#types-mixing-gc-ed-memory-with-nimptr hope I don't run into weird issues...
[09:02:29] <FromDiscord> <Elegantbeef> I've not done much with manual memory management so i can only really wish you luck 😀
[10:14:19] *** Joins: Doraemon (~NeoCron@p200300c4cf07d8007d174ac0d3b51364.dip0.t-ipconnect.de)
[10:16:46] *** Quits: neocron (~NeoCron@p200300c4cf3f7e00320b69bf1a44e74d.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[10:55:55] <FromDiscord> <evoalg> When should I use Deepcopy ... when Nim copies by vaulue anyway??
[11:12:05] <FromDiscord> <Rika> The value of a reference is merely the pointer
[11:12:13] <FromDiscord> <Rika> If you want to cross pointer boundaries you use deep copy
[11:13:40] <FromDiscord> <evoalg> ahh thank you!
[11:18:55] *** Quits: tinystoat (~squeek@user/tinystoat) (Quit: Reconnecting)
[11:19:04] *** Joins: tinystoat (~squeek@user/tinystoat)
[12:02:13] <FromDiscord> <Ricky Spanish> how can you convert a string to a byte array?
[12:10:35] <FromDiscord> <Ricky Spanish> sent a code paste, see https://play.nim-lang.org/#ix=3Gl2
[12:26:34] <FromDiscord> <qb> Umm how does a compile time os check work? I saw it before somewhere but can't remember. `when win32:`
[12:27:13] <FromDiscord> <Elegantbeef> `when defined(windows)`?
[12:27:23] <FromDiscord> <qb> thanks
[13:29:59] <FromDiscord> <DaiChimpo> Is there a reason a fileStream could = nil after being declared with newFileStream() besides an invalid file name?
[13:30:45] <FromDiscord> <DaiChimpo> sent a code paste, see https://play.nim-lang.org/#ix=3Gll
[13:31:06] <FromDiscord> <DaiChimpo> it's 5am maybe I should just stop coding lmfao
[13:31:31] <FromDiscord> <Rika> Where are you running the program and where is the file located
[13:31:41] <FromDiscord> <DaiChimpo> same directory
[13:31:52] <FromDiscord> <Rika> Are you running on the terminal
[13:32:00] <FromDiscord> <Rika> Is the terminal in the same directory
[13:32:32] <FromDiscord> <DaiChimpo> I have another similar program in a parent directory that works, but that's an interesting theory. Lemme try absolute path then
[13:35:04] <FromDiscord> <DaiChimpo> ok fair point absolute path works. Terminal is on a separate drive (haha) but program in E:\X\Y works when this in E:\X\A\B\C doesn't. This is for morning me probably
[13:37:32] <FromDiscord> <DaiChimpo> god damn it it's because the filename is relative to the terminal's working directory and not the .nim file's directory, I am going to bed
[13:38:13] <FromDiscord> <Elegantbeef> `import std/os; setCurrentDir(getAppDir())` 😛
[14:26:05] <FromDiscord> <enthus1ast> I always pretend the getAppDir() to a path and do not change the working dir.
[14:26:43] <FromDiscord> <enthus1ast> Prepend
[14:28:29] <FromDiscord> <enthus1ast> Imho changing the working dir is an antipattern
[14:31:47] <FromDiscord> <Rika> Why
[14:35:23] <FromDiscord> <enthus1ast> at least in shellscripts its bad because it changes the terminals work dir
[14:35:32] <FromDiscord> <enthus1ast> unless you run it in a subshell
[14:36:05] <FromDiscord> <enthus1ast> just tried it with nim and does not change the outer work dir
[14:36:16] <FromDiscord> <enthus1ast> so maybe not that bad \:)
[14:45:40] *** Joins: src (~src@user/src)
[14:45:48] <NimEventer> New thread by Templatedperson: Is it possible to make the program crash if orc gc finds a cyclic reference?, see https://forum.nim-lang.org/t/8662
[14:45:54] *** Quits: src (~src@user/src) (Read error: Connection reset by peer)
[14:52:31] <FromDiscord> <ag> In reply to @NimEventer "New thread by Templatedperson:": I didn't know there were plans for custom allocators, nice.
[15:09:22] <qwr> weird, I can't get the forum page load at all in firefox, even with tracking protection and ublock disabled - but no problem with epiphany
[15:09:43] *** Joins: src (~src@user/src)
[15:09:49] *** Quits: src (~src@user/src) (Remote host closed the connection)
[15:10:54] *** Joins: neurocyte0132889 (~neurocyte@94.16.91.65)
[15:10:54] *** Quits: neurocyte0132889 (~neurocyte@94.16.91.65) (Changing host)
[15:10:54] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[15:12:40] <FromDiscord> <Yardanico> can you check the console?
[15:14:36] <qwr> Uncaught TypeError: css.match is not a function modifyCSS https://forum.nim-lang.org/t/8662:461 clicking it gives line not found with no source:)
[15:15:27] <qwr> also a lot of CSP warnings - Ignoring “'unsafe-inline'” within script-src: ‘strict-dynamic’ specified; Ignoring “https:” within script-src: ‘strict-dynamic’ specified; Ignoring “http:” within script-src: ‘strict-dynamic’ specified
[15:16:49] <qwr> ok,       let matches = css.match(REGEX_FONT_FAMILY); 
[15:17:02] <qwr> seems to be the offending line
[15:19:02] * qwr is not 100% sure, if it is the real cause, but this seems only real exception in the console
[15:21:07] <qwr> hm this also - Loading failed for the <script> with source “https://www.googletagmanager.com/gtag/js?id=UA-58103537-1”. just before the exception
[15:21:44] <FromDiscord> <Yardanico> well that should be fine
[15:22:10] <FromDiscord> <Yardanico> can you maybe check the network tab and see if forum.js is being downloaded?
[15:22:16] <FromDiscord> <Yardanico> after refreshing the page
[15:23:27] <qwr> GET
[15:24:00] <FromDiscord> <Yardanico> yes, but is it being downloaded successfully?
[15:24:10] <qwr> https://forum.nim-lang.org/js/forum.js?t=2020-08-2420%3A22%3A46
[15:24:13] <qwr> 200 OK Cached
[15:24:17] <FromDiscord> <Yardanico> but yeah, it must be something specific to your environment/network
[15:24:22] <FromDiscord> <Yardanico> it works for me in both chrome/firefox
[15:26:42] <qwr> the googletagmanager stuff shouldn't really matter? (seems that i've got it blocked from dns)
[15:26:44] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[15:27:08] <qwr> and if it did, it should affect epiphany as well...
[15:27:21] <FromDiscord> <Yardanico> yeah, I also run adguard home and have ublock origin installed, yet the forum works
[15:27:37] <FromDiscord> <Yardanico> are you blocking recaptcha maybe?
[15:31:41] *** Joins: neurocyte0132889 (~neurocyte@94.16.91.65)
[15:31:41] *** Quits: neurocyte0132889 (~neurocyte@94.16.91.65) (Changing host)
[15:31:41] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[15:35:49] <qwr> not directly, but i have privacy.firstparty.isolate and privacy.resistFingerprinting enabled
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:50] <FromDiscord> <Yardanico> well, not sure, never used those, try disabling them
[15:37:14] <qwr> disabled - nothing changed...
[15:38:05] <qwr> but on the other hand, if you're using recaptcha 3 then it gives me really bad scores due not normally being able to track me :)
[15:40:50] <qwr>  Your score is: 0.3 
[15:42:03] <qwr> that is with ublock and tracking protection disabled on the https://antcpt.com/eng/information/demo-form/recaptcha-3-test-score.html
[15:45:58] <FromDiscord> <Ricky Spanish> sent a code paste, see https://play.nim-lang.org/#ix=3GlW
[15:46:52] <FromDiscord> <enthus1ast> you can use JsonNode (from the json module)
[15:47:30] <FromDiscord> <enthus1ast> then you can serialize it with `$ % myJsonVar`
[15:47:59] <FromDiscord> <Ricky Spanish> ah awesome thank you
[15:50:35] <FromDiscord> <enthus1ast> is greenfork here?
[16:02:36] <FromDiscord> <dom96> In reply to @qwr "weird, I can't get": Even the front page? Can you try in a private window (should give a clean session)?
[16:09:26] <qwr> i've got firefox setup in "always private" mode, and closed the browser, so already did it
[16:09:57] <qwr> the page header shows, like login button, then there is the spinner and white all the way down
[16:12:21] <qwr> forum.nim-lang.org also shows the Latest and Changes buttons, and nim-lang.org seems fine
[18:03:47] *** Joins: arkurious (~arkurious@user/arkurious)
[18:11:32] <FromDiscord> <gdquest> sent a code paste, see https://play.nim-lang.org/#ix=3GmZ
[18:12:38] <FromDiscord> <gdquest> sent a code paste, see https://play.nim-lang.org/#ix=3Gn0
[18:12:48] <FromDiscord> <gdquest> Could someone tell me what I'm doing wrong?
[18:13:05] <FromDiscord> <gdquest> (edit) "Could" => "Does" | "tell me" => "know"
[18:15:14] <FromDiscord> <gdquest> (what i'm doing in the meantime is using a plain `proc` instead of a template)
[18:15:51] <FromDiscord> <lenis> I dont really see why your template wouldnt work. but I also dont understand why regexWrap isnt just a proc
[18:18:20] <FromDiscord> <Rika> templates cant return
[18:18:42] <FromDiscord> <Rika> dont put return there and instead rely on implicit value return
[18:19:07] <FromDiscord> <lenis> ah yeah thats right
[18:19:12] <FromDiscord> <Rika> copy paste = return is copied = proc now returns what template was supposed to return
[18:19:18] <FromDiscord> <Rika> = type error
[18:20:03] <FromDiscord> <Rika> why not just use a proc? a template here wouldnt improve speeds and would prolly bloat binary size
[18:26:34] <FromDiscord> <gdquest> In reply to @Rika "why not just use": That's what I'm doing, I just wanted to see how this worked
[18:26:41] <FromDiscord> <gdquest> In reply to @Rika "templates cant return": Thanks! That was that 🙂
[18:27:21] <FromDiscord> <gdquest> I just tested making a few templates and macros to get a sense for how they work and what you can do with them basically
[18:27:37] <FromDiscord> <gdquest> Thanks for the help
[18:27:50] <FromDiscord> <lenis> sent a code paste, see https://play.nim-lang.org/#ix=3Gn6
[18:28:30] <FromDiscord> <Rika> need comma
[18:28:37] <FromDiscord> <gdquest> Oh, that's cool, thanks!
[18:28:46] <FromDiscord> <Rika> sent a code paste, see https://play.nim-lang.org/#ix=3Gn7
[18:28:50] <FromDiscord> <Rika> also at the end whoops
[18:28:54] <FromDiscord> <gdquest> `procName` is a built-in keyword?
[18:29:08] <FromDiscord> <lenis> In reply to @Rika "need comma": youre right sorry
[18:29:08] <FromDiscord> <Rika> sent a code paste, see https://play.nim-lang.org/#ix=3Gn8
[18:29:10] <FromDiscord> <Rika> In reply to @gdquest "`procName` is a built-in": no, argument of templaet
[18:29:12] <FromDiscord> <Rika> (edit) "templaet" => "template"
[18:29:22] <FromDiscord> <gdquest> Ah right, of course 🙂
[18:30:20] <FromDiscord> <lenis> you might also have to add {.inject.} im not certain
[18:30:52] <FromDiscord> <gdquest> Is there a code formatter or options to have something a bit more like Python's black for Nim? In particular, I'm looking for something that tidies up line returns between procs, things like those
[18:31:10] <FromDiscord> <gdquest> I like to use opinionated formatters that just format about everything for you
[18:31:37] <FromDiscord> <gdquest> E.g. `black` will ensure there are always 2 lines between functions and classes in Python
[18:33:04] <FromDiscord> <qb> `nimpretty` ?
[18:33:40] <FromDiscord> <Rika> nimpretty is opinionated
[18:33:52] <FromDiscord> <gdquest> I use it, sure, but it doesn't do the above
[18:34:10] <FromDiscord> <Rika> i was planning on making a stronger formatter but i did not have the time
[18:34:16] <FromDiscord> <Rika> or rather still do not
[18:34:16] <FromDiscord> <qb> aww
[18:34:42] <FromDiscord> <gdquest> A formatter in Nim seems pretty fun to make as you have the whole AST,
[18:34:50] <FromDiscord> <gdquest> But it's always quite a bit of work
[18:35:18] <FromDiscord> <Rika> well you'll need to find out where to get the parser (prolly compiler-as-a-package but i dont know the status of that)
[18:35:31] <FromDiscord> <gdquest> Ah okay
[18:36:22] <FromDiscord> <gdquest> I'm not fond of how nimpretty does line returns either, it tries to keep things packed vertically and doesn't favor making things easier to read I feel
[18:36:23] <FromDiscord> <lenis> btw
[18:37:20] <FromDiscord> <gdquest> sent a code paste, see https://play.nim-lang.org/#ix=3Gnr
[18:37:21] <FromDiscord> <lenis> since when you you do tuple unpacking
[18:37:31] <FromDiscord> <Rika> forever
[18:37:44] <FromDiscord> <gdquest> I'm just learning but saw this in the manual I think
[18:38:21] <FromDiscord> <Rika> sent a code paste, see https://play.nim-lang.org/#ix=3Gnt
[18:38:35] <FromDiscord> <Rika> which is why i was planning on making a flexible one (prolly more akin to clang-format)
[18:39:25] <FromDiscord> <gdquest> Yeah so to me opinionated should be non-configurable, but driven by UX design work
[18:39:40] <FromDiscord> <gdquest> That is, gathering data on what people find most readable and formatting like that
[18:40:18] <FromDiscord> <gdquest> I doubt that's how nimpretty was developed, that is, gathering quantitative feedback and doing A/B testing with many users
[18:40:38] <FromDiscord> <gdquest> Which is fine, it's still a useful tool
[18:41:15] <FromDiscord> <gdquest> It's just that it simply splits lines longer than 80 character after an operator. It's a sound, simple rule programming-wise
[18:41:38] <FromDiscord> <gdquest> But it doesn't optimize for what's easiest to read for most people
[18:42:05] <FromDiscord> <gdquest> Nimpretty will let you split lines however you want too, if you want to do it manually instead
[18:42:38] <FromDiscord> <gdquest> Anyway, thanks much once again.
[18:43:04] <FromDiscord> <gdquest> (edit) "Nimpretty will ... let-" 03added "also" | "alsolet you split lines however you want too, if you want to do it manually instead ... " 03added "- it just checks the line length"
[18:43:15] <FromDiscord> <gdquest> (edit) "Nimpretty will also let you split ... lines" 03added "and format"
[18:44:08] <FromDiscord> <Rika> In reply to @gdquest "Yeah so to me": well i want it to be configurable, but the defaults are also good
[19:01:52] *** Joins: Bager170 (~Bager170@78.185.187.232)
[19:02:13] <Bager170> are there plans to make the fields iterator work for object variants? i don't see why they shouldn't
[19:06:25] <FromDiscord> <Rika> technically cant (unless you mean what i think you mean) because fields is a compiletime iterator and whichever fields actually are part is dependent on runtime info
[19:08:08] <Bager170> couldn't you expand it to a case statement?
[19:08:58] <Bager170> like you put all the fields of one object variant into one case statement branch and same for the other one
[19:09:57] <Bager170> or am i wrong in thinking that the fields iterator acts like a macro?
[19:10:18] <FromDiscord> <Rika> im thinking about it
[19:10:49] <FromDiscord> <Rika> it could probably work but that would be a large possibly breaking change i'd assume
[19:11:03] <FromDiscord> <Rika> or new edge case issues
[19:15:20] <FromDiscord> <Slava0135> found vscode theme fitting Nim style https://media.discordapp.net/attachments/371759389889003532/914542481490706562/unknown.png
[19:16:09] *** Quits: Bager170 (~Bager170@78.185.187.232) (Quit: Client closed)
[19:36:47] <FromDiscord> <hmmm> oioi I need to parse an xml file and get out all the contents between a tag. Since there are many I also want all the matches placed on a seq. What should I use?
[19:37:11] <FromDiscord> <Rika> xmltree?
[19:37:21] <FromDiscord> <hmmm> sounds right
[19:37:25] <FromDiscord> <hmmm> I'll look into it
[19:37:43] <FromDiscord> <deech> sent a code paste, see https://play.nim-lang.org/#ix=3GnN
[19:38:48] <FromDiscord> <Rika> no
[19:38:53] <FromDiscord> <Rika> afaik at least
[19:39:09] <FromDiscord> <Rika> prolly something's there but i would call it "hacky"
[19:39:19] <FromDiscord> <Rika> maybe something to do with line instantiation info
[19:57:34] <FromDiscord> <qb> In reply to @Slava0135 "found vscode theme fitting": Which one is that?
[19:59:19] <FromDiscord> <Slava0135> In reply to @qb "Which one is that?": rainglow https://media.discordapp.net/attachments/371759389889003532/914553549214613547/unknown.png
[19:59:31] <FromDiscord> <Slava0135> (edit) "In reply to @qb "Which one is that?": rainglow ... https://media.discordapp.net/attachments/371759389889003532/914553549214613547/unknown.png" 03added "plugin"
[20:00:31] <FromDiscord> <Slava0135> ~~one i showed above wasn't contrast~~
[20:01:56] <FromDiscord> <Slava0135> contrast https://media.discordapp.net/attachments/371759389889003532/914554208722776105/unknown.png
[20:04:29] <NimEventer> New thread by Codic12: Errors with Option[T] on 1.4.8, see https://forum.nim-lang.org/t/8664
[20:06:58] <FromDiscord> <qb> In reply to @Slava0135 "rainglow plugin": Thats pretty cool. But the bottom toolbar is yellow which makes it almost unreadable
[20:09:40] *** Quits: anddam (~anddam@user/anddam) (Quit: WeeChat 3.3)
[20:10:08] <FromDiscord> <Slava0135> yea
[20:10:54] <FromDiscord> <codic> In reply to @NimEventer "New thread by Codic12:": thanks, bot
[20:12:49] *** Joins: anddam (~anddam@user/anddam)
[20:21:16] <FromDiscord> <TryAngle> is there something like a ↵while let x = ... and x.isSome()↵in Nim?
[20:21:21] <FromDiscord> <qb> How would I make a hint message in my nim.cfg? Or echo some message
[20:23:02] <NimEventer> New question by ChrisoLosoph: Does single file type exist to get path or name of a file in Nim?, see https://stackoverflow.com/questions/70145573/does-single-file-type-exist-to-get-path-or-name-of-a-file-in-nim
[20:32:00] <FromDiscord> <hmmm> oi I want to use the magic incantation "with <file open>: do a lot of thingies" where do I find the docs about it
[20:32:21] <FromDiscord> <hmmm> I remember using it in the past but forgot all about it lol
[20:34:55] <FromDiscord> <Rika> In reply to @TryAngle "is there something like": no
[20:35:17] <FromDiscord> <Rika> In reply to @hmmm "I remember using it": i dont recall such a thing being in the standard library'
[20:36:31] <FromDiscord> <qb> Something like that was in the template documentation https://nim-lang.org/docs/tut2.html#templates
[20:37:14] <FromDiscord> <Rika> i dont think its recommended anymore though as destructors are slowly being introduced
[20:37:15] <Amun-Ra> there's pascal-like 
[20:37:22] <Amun-Ra> …'with' in Nim
[20:39:20] *** Joins: src (~src@user/src)
[20:40:01] <FromDiscord> <hmmm> I'm pretty it exists 🤔
[20:40:04] <FromDiscord> <hmmm> sure
[20:40:40] <Amun-Ra> https://nim-lang.org/docs/with.html ;>
[20:40:58] <FromDiscord> <hmmm> oh u see
[20:41:02] *** Quits: src (~src@user/src) (Client Quit)
[20:41:16] <FromDiscord> <hmmm> but does it work with files
[20:41:26] <FromDiscord> <hmmm> I see a string example 🤨
[20:42:09] <Amun-Ra> it works closely to Pascal's with equivalent
[20:42:22] <Amun-Ra> and it's a different beast than Python one
[20:43:31] <FromDiscord> <JOSTGRANT> In reply to @Slava0135 "contrast": Pretty dang close to Ayu tbh
[20:44:49] <FromDiscord> <Slava0135> show me
[20:45:40] <FromDiscord> <Rika> In reply to @hmmm "I'm pretty it exists": "with" exists but not the one you describe
[20:50:07] <FromDiscord> <JOSTGRANT> @Slava0135 Okay, not as-much as I remember. lool  ↵(Example is the bottom of crown.nim from greenfork's raylibnow proj) https://media.discordapp.net/attachments/371759389889003532/914566335269339186/unknown.png
[20:51:23] *** Joins: terminalpusher (~terminalp@2a01:586:2941:1:aeef:4407:c895:665b)
[20:51:26] <FromDiscord> <Rika> ~~god damn thats a real hard to read font~~
[20:51:36] <FromDiscord> <JOSTGRANT> Think I'm 'remembered' / recall a similarity with the yellow for keywords, and orange in Ayu, green strings, and purple being present.
[20:51:57] <FromDiscord> <Rika> ah yes yellow and orange my worst nightmare
[20:53:34] <FromDiscord> <JOSTGRANT> Should be 'droid sans mono'; Though I'm not really font-picky unless it's REALLY out there. lol
[20:53:53] <FromDiscord> <Rika> it's just too thin for me
[20:54:32] <FromDiscord> <JOSTGRANT> "Thin" as-in not enough spacing between characters, or the actual characters themselves are too thin?
[20:54:52] <FromDiscord> <Rika> latter
[20:55:34] <FromDiscord> <JOSTGRANT> It's honestly something I don't even consciously notice; Now that I'm looking can see it between numerals though I guess.
[20:55:55] <FromDiscord> <Rika> i notice because i read much more erratically lmao
[20:56:01] <FromDiscord> <Rika> or slowly
[20:56:36] <FromDiscord> <JOSTGRANT> For me, I feel like color-themes are more important than most fonts tbh. But very possibly I'm "the weird one". lol
[20:56:56] <FromDiscord> <Rika> oh colour matters a lot too but font thickness isnt negligible
[20:58:26] <FromDiscord> <JOSTGRANT> I guess they (fonts) are just easier to 'not notice' consciously ; When a bad 'theme' can result in actual revulsion
[20:58:47] <FromDiscord> <Rika> ~~me swearing by my solarized~~
[21:01:02] <FromDiscord> <JOSTGRANT> I've jumped all around; When I was still on Emacs I wrote a custom light and dark theme and was pretty happy with them -- then switched to Atom then eventually VSCode an about a dozen-or-so themes in that transitionally period  and at somepoint @lqdev either recommended and/or just posted screenshots in this server about Ayu and have been on 'Ayu Mirage' ever since.
[21:01:25] <FromDiscord> <JOSTGRANT> (edit) "an" => "and"
[21:02:15] <FromDiscord> <Rika> i use solarized because i can actually see the differences between colours without taking idk 3 seconds to compare
[21:02:47] <FromDiscord> <JOSTGRANT> Yeah, not a huge fan of Solarized but am 100% with them in the goal of highly contrasted themes are the ideal
[21:03:56] <FromDiscord> <TryAngle> In reply to @Rika "no": ok ty
[21:04:12] <FromDiscord> <JOSTGRANT> Well I guess solarized isn't "highly contrasting" tbf but the hues are notable enough to 'not be a problem'
[21:04:18] <FromDiscord> <Rika> In reply to @TryAngle "ok ty": i mean there probably is in some macro beef made but L O L
[21:04:25] <FromDiscord> <Rika> not something for prod i'd say
[21:04:41] <FromDiscord> <Rika> In reply to @JOSTGRANT "Well I guess solarized": its been a massive help yes
[21:05:44] <FromDiscord> <JOSTGRANT> I think Ayu Mirage fits into a similar niche; There's not an extreme amount of 'pop' compared to the bg but it's certainly more than enough to easily tell apart elements
[21:06:14] <FromDiscord> <JOSTGRANT> It doesn't feel like everything is a "shade of grey" which seems pretty common in theme design. lol
[21:08:54] <FromDiscord> <TryAngle> In reply to @Rika "i mean there probably": ah true I forgot that you can almost write your own language in nim XD
[21:10:58] <FromDiscord> <TryAngle> what is a lent? https://media.discordapp.net/attachments/371759389889003532/914571579634102332/unknown.png
[21:13:56] <FromDiscord> <Rika> "Lent is a solemn religious observance in the Christian liturgical calendar commemorating the 40 days Jesus spent fasting in the desert"
[21:13:58] <FromDiscord> <Rika> im joking
[21:14:53] <FromDiscord> <Rika> https://nim-lang.org/docs/destructors.html
[21:16:48] *** Joins: src (~src@user/src)
[21:17:01] *** Quits: src (~src@user/src) (Remote host closed the connection)
[21:18:02] <FromDiscord> <hmmm> oioi I want to chunk my stringies in pieces of 64 chars lines
[21:18:05] <FromDiscord> <hmmm> how do I
[21:19:57] <FromDiscord> <hmmm> like this: https://www.php.net/manual/en/function.chunk-split.php
[21:20:23] <FromDiscord> <Rika> sent a code paste, see https://play.nim-lang.org/#ix=3GoA
[21:20:54] <FromDiscord> <hmmm> isn't there something like chunkthis(string,64)
[21:21:16] <FromDiscord> <Rika> itertools 3rd party lib
[21:21:20] <FromDiscord> <hmmm> hmm
[21:21:21] <FromDiscord> <Rika> or was it iterutils
[21:21:26] <FromDiscord> <Rika> i dont fuckin know go ask a computer
[21:21:30] <FromDiscord> <hmmm> lol
[21:21:56] <FromDiscord> <hmmm> Rika = :nim1:
[21:22:55] <FromDiscord> <apahl> In reply to @Rika "https://nim-lang.org/docs/destructors.html": Theses hooks only have effect with ORC and ARC, not with the "normal", is that correct?
[21:23:05] <FromDiscord> <apahl> (edit) ""normal"," => ""normal" GC,"
[21:23:18] <FromDiscord> <apahl> (edit) "Theses" => "These"
[21:24:38] <FromDiscord> <Rika> i dont know the answer to that, but from what i recall (and know that my memory is more spotty than a consumer ram stick in a nuclear reactor site), they do get called
[21:25:03] <FromDiscord> <apahl> Lol, fair enough.
[21:38:56] <FromDiscord> <TryAngle> In reply to @Rika ""Lent is a solemn": ty
[21:39:09] <FromDiscord> <TryAngle> are arrays or strings indexed with uint or int?
[21:45:21] *** Joins: Guest19 (~Guest19@2a02:2f07:d411:6800:b610:a061:8a3c:5942)
[21:45:48] <Guest19> Hello.I am on Fedora 35 and there is no match for the Nim package. Anyone knows what's up?
[21:46:02] <Guest19> Is it working for everyone else?
[21:48:21] <FromDiscord> <hmmm> Rika I actually wrote a while loop to chunk stuff around. I feel it's so solid it could blaze into our std
[21:53:48] <Guest19> Looks like the Nim package is unmaintained? https://src.fedoraproject.org/rpms/nim
[22:01:01] <FromDiscord> <hmmm> hmm
[22:01:32] <FromDiscord> <hmmm> I mean it's fedora, as far as we know shipping decade old stuff is "part of the plan"
[22:02:41] <FromDiscord> <hmmm> apparently both arch and aur are still at 1.4.x
[22:04:18] <FromDiscord> <apahl> In reply to @Guest19 "Looks like the Nim": IMO, the easiest way to install Nim on Linux and to keep it up to date, is to clone the repo and run `./build_all.sh` (https://github.com/nim-lang/Nim/#compiling)
[22:04:37] <nrds> <06Prestige99> or just use choosenim
[22:06:00] <nrds> <06Prestige99> I think that easiest
[22:06:04] <nrds> <06Prestige99> that's*
[22:10:40] <Guest19> Alright. Cool.
[22:10:42] *** Quits: Guest19 (~Guest19@2a02:2f07:d411:6800:b610:a061:8a3c:5942) (Quit: Client closed)
[22:13:08] <FromDiscord> <huantian> In reply to @hmmm "apparently both arch and": Ik mainline arch is, idk about aur
[22:13:21] <FromDiscord> <huantian> I just use the choosenim package
[22:17:25] <FromDiscord> <JOSTGRANT> In reply to @hmmm "apparently both arch and": Just checked, yeah, 1.4.8 on Arch
[22:18:27] <FromDiscord> <JOSTGRANT> As other's have said; Would 100% just use choosenim
[23:14:41] <Amun-Ra> what's the fastest way of setting all elements of seq to 0?
[23:31:52] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3Gpv
