[00:01:21] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:01:57] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 240 seconds)
[00:04:32] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[00:11:41] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 268 seconds)
[00:15:29] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[00:17:02] *** Quits: asarch (~asarch@189.250.218.98) (Quit: leaving)
[00:22:41] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[00:23:08] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[00:23:36] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:25:06] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[00:30:23] *** Quits: artchad (~user@public-gprs225103.centertel.pl) (Read error: Connection reset by peer)
[00:31:10] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 250 seconds)
[00:31:29] *** Joins: Bike (~Bike@71.69.170.70)
[00:38:51] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c)
[00:40:21] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:40:28] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[00:40:34] *** Quits: lispy (~lispy4@84.69.59.93) (Quit: Leaving)
[00:45:37] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 240 seconds)
[00:52:39] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[00:57:06] *** Quits: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (Quit: WeeChat 3.4)
[00:59:30] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[01:02:42] *** Quits: davep (uid504677@id-504677.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[01:05:02] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 240 seconds)
[01:13:08] *** Quits: kevingal (~quassel@2001:770:c0:401:2925:bac0:faad:c07c) (Remote host closed the connection)
[01:14:23] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[01:16:20] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:16:27] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:17:01] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[01:18:50] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 250 seconds)
[01:19:55] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[01:21:05] *** Joins: wmblathe_ (~wmblather@162-199-148-123.lightspeed.mdsnwi.sbcglobal.net)
[01:22:07] *** Quits: wmblathers (~wmblather@162-199-148-123.lightspeed.mdsnwi.sbcglobal.net) (Ping timeout: 256 seconds)
[01:23:25] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[01:27:56] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 250 seconds)
[01:31:32] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[01:33:58] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[01:34:00] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[01:35:44] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c) (Ping timeout: 250 seconds)
[01:45:27] *** Joins: akoana (~ah@user/akoana)
[01:47:11] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:51:47] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[01:53:27] *** Quits: pve (~pve@37-136-155-201.rev.dnainternet.fi) (Quit: leaving)
[01:57:37] *** Quits: phantomics (~phantomic@71-218-126-185.hlrn.qwest.net) (Ping timeout: 240 seconds)
[01:58:33] *** Joins: jeosol (~jeosol@user/jeosol)
[01:58:42] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:70bc:f294:948f:2599) (Ping timeout: 250 seconds)
[02:00:09] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[02:01:18] *** Joins: phantomics (~phantomic@71-218-126-185.hlrn.qwest.net)
[02:07:57] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:9003:ed0c:7525:f4b7)
[02:13:10] *** wmblathe_ is now known as wmblathers
[02:13:37] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 240 seconds)
[02:16:43] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[02:23:45] <phantomics> For all who are interested: I will be hosting a webinar on the April APL compiler (compiles APL into Common Lisp) tomorrow at 16:00 UTC. You can see the webinar at https://zoom.us/j/858532665, the passcode is 391680 It may be early for American viewers; that's 8am on the US west coast
[02:24:43] <phantomics> This webinar is hosted by the British APL Association, so it'll offer a look at April from the perspective of APL users, as opposed to my last presentation which was directed at Lisp users
[02:25:26] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:a078:3cdd:386b:cd9b)
[02:26:24] <phoe> nice! will there be a recording? (I won't be able to attend)
[02:26:51] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[02:30:51] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[02:31:09] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10fe:c92d:dc6e:8324:3fa9:29a8)
[02:33:43] *** Quits: occ (~occ@user/occ) (Ping timeout: 256 seconds)
[02:34:45] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:a078:3cdd:386b:cd9b) (Ping timeout: 268 seconds)
[02:35:35] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10fe:c92d:dc6e:8324:3fa9:29a8) (Read error: Network is unreachable)
[02:38:57] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[02:41:25] *** Joins: Major_Biscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[02:49:32] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[02:51:43] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[02:54:41] *** Quits: Major_Biscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 256 seconds)
[03:04:58] *** Quits: cosimone (~user@93-44-185-255.ip98.fastwebnet.it) (Ping timeout: 268 seconds)
[03:07:31] *** Joins: igemnace (~ian@user/igemnace)
[03:19:36] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-6F8B-dynamic.midco.net) (Quit: Using Circe, the loveliest of all IRC clients)
[03:24:04] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 250 seconds)
[03:26:00] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[03:29:34] *** Joins: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925)
[03:30:51] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[03:31:02] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[03:33:41] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[03:35:59] *** Quits: morganw (~user@80.225.24.132) (Remote host closed the connection)
[03:36:17] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 240 seconds)
[03:41:09] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[03:42:11] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[03:43:08] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[03:43:27] *** Joins: occ (~occ@user/occ)
[03:46:32] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 240 seconds)
[03:48:32] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[03:48:47] *** Joins: lisp123 (~lisp123@5.30.23.247)
[03:52:57] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[03:54:28] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[03:55:07] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[04:00:28] *** Joins: samps (~samps@179.225.196.215)
[04:02:19] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[04:04:29] <samps> Hi folks. I've been working on some pet projects in Common Lisp. I'm using SBCL and Iá¸¿ having trouble trying to understand a compilation error. Would anyone be able to help me out? https://gist.github.com/lsmag/ebb517a8702f454c4bbf624d7c44b182 ... I tried typing out roughly the same faulty line on the REPL and it seems to work
[04:04:50] <samps> changing the line just to (merge-pathnames (first argument)) also spawns the same error
[04:05:16] <samps> but, say, (merge-pathnames (first '("foo" "bar" "baz"))) on the REPL doesn't
[04:05:48] <EdLangley[m]> Just a note, errors are "signaled" in lisp
[04:06:05] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[04:06:53] <samps> I've read about it but haven't dipped my toes into condition signalling yet, though I have found quite a few while playing with the adopt library
[04:07:06] <EdLangley[m]> Anyways, that's not an error it's a warning because write-line expects a string and it's getting a pathname
[04:07:19] <EdLangley[m]> clhs write-line
[04:07:19] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_wr_stg.htm
[04:07:49] <EdLangley[m]> you should do something like (write-line (namestring target-dir))
[04:07:50] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[04:09:00] <EdLangley[m]> samps: yeah, I'm just mentioning that because using the expected terminology helps people understand the problem :)
[04:09:48] <samps> damn, I was caught off guard. The signal message actually starts with `IN (WRITE-LINE ...)`. Thanks, folks :)
[04:09:59] <samps> and what would this "in hairy form" be?
[04:11:26] <EdLangley[m]> I'm not sure, my guess is that just means sbcl able to print the form that's triggering the error for some reason
[04:11:38] <EdLangley[m]> that is, sbcl isn't able to print...
[04:11:56] *** Quits: Colleen (~fermion@supersolid.equilibrium.tymoon.eu) (Quit: Colleen)
[04:12:16] <samps> gotcha. I'll try to dig further into that some other time. Nonetheless, thanks again :)
[04:12:42] *** Joins: Colleen (~fermion@supersolid.equilibrium.tymoon.eu)
[04:13:54] *** Quits: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[04:18:37] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:24:15] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[04:24:50] *** molson_ is now known as molson
[04:27:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[04:28:53] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[04:31:35] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[04:34:42] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 250 seconds)
[04:38:45] *** Quits: phadthai (mmondor@ginseng.pulsar-zone.net) (Ping timeout: 256 seconds)
[04:40:15] *** Joins: pillton (~user@14-203-184-248.tpgi.com.au)
[04:44:38] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[04:46:02] *** Quits: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[04:51:35] <White_Flame> is it typical for implementations to close I/O streams when garbage collected?
[04:51:39] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 268 seconds)
[04:52:26] <Xach> White_Flame: i seem to remember sbcl putting a finalizer on closing the fd on a fd-stream, but I'd have to double-check. I don't know if that would make it "typical" or not.
[05:12:09] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[05:15:22] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[05:16:12] *** Joins: Bike (~Bike@71.69.170.70)
[05:20:02] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[05:20:21] <Bike> so thanks to mfiano nerd sniping me, i now know that sbcl actually does maintain backpointers from arrays to arrays displaced to them (sb-kernel:%array-displaced-from). however the general form of the with-array-data macro does still do a loop to get at the simple vector backing
[05:20:21] <Bike> (https://github.com/sbcl/sbcl/blob/master/src/compiler/array-tran.lisp#L1629-L1661). so does sbcl not actually collapse displacements despite going through some effort to maintain the backpointers?
[05:21:56] <mfiano> Bike: I submitted the patch to sbcl-devel
[05:22:10] <mfiano> It is roughly 2x as fast and eliminates consing
[05:22:30] <mfiano> Still not adequate for my use case, but a nice change regardless
[05:23:44] <EdLangley[m]> Is there any way to promise to the compiler that an argument to a function is const?
[05:24:28] <Bike> meaning, a promise that the function will not mutate that value? no.
[05:24:55] <EdLangley[m]> e.g. if I have (defun mapping (fn) (lambda (list) (mapcar fn list))) It'd be nice if I could convince the compiler that it doesn't need a closure
[05:25:36] <Bike> how would it not need a closure?
[05:26:43] <EdLangley[m]> Hmm, maybe I'm wrong
[05:27:30] <EdLangley[m]> What I'm trying to figure out if there's anyway to use functions like this without blocking optimizations of things like (compose (mapping #'1+) (mapping #'1+))
[05:28:34] <EdLangley[m]> If the compiler assumes FN never changes, I'd think you could do some sort of inlining trick to avoid extra indirection.
[05:29:27] <mfiano> You're still looking it up in the global environment at runtime.
[05:30:57] *** Quits: samps (~samps@179.225.196.215) (Ping timeout: 240 seconds)
[05:31:19] <EdLangley[m]> It should be able to replace (mapping #'1+) with (lambda (list) (mapcar #'1+ list))
[05:31:26] <EdLangley[m]> I guess I could do this with a compiler macro
[05:31:36] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[05:31:40] <Bike> if it's willing to believe that MAPPING will never be redefined, yeah. you could just proclaim it inline.
[05:32:06] <EdLangley[m]> Hmm, I didn't think of that
[05:32:25] <Bike> but MAPPING as a function itself can't behave as though its argument is unchanging, because it doesn't know what its argument is until it's called.
[05:33:35] *** Joins: notzmv (~zmv@user/notzmv)
[05:33:51] <EdLangley[m]> It can't know that the value named by FN isn't mutated, but it can know that FN is never re-bound
[05:34:17] <Bike> it knows that already, since it's what binds FN.
[05:35:04] <EdLangley[m]> So, when compiling the lambda, couldn't it eliminate the outer binding?
[05:35:32] <EdLangley[m]> I guess it has to store the argument value somewhere
[05:36:11] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[05:36:14] <Bike> right. it's stored in the closure.
[05:36:28] <mfiano> How would it eliminate it if calling thing function is the only way to bind it to a value?
[05:36:52] <mfiano> s/thing/the/
[05:37:19] <EdLangley[m]> I think what I'm really interested in is whether something like (compose (mapping ...) (mapping ...)) can be optimized at all
[05:37:31] <mfiano> Make mapping a macro
[05:37:37] <Bike> yeah, it can be optimized.
[05:37:40] <EdLangley[m]> That changes the utility
[05:37:50] <Bike> if you're using alexandria:compose, a compiler macro on COMPOSE will kick in
[05:37:52] <mfiano> Make it a compiler macro then.
[05:38:01] <mfiano> Oh, automatically, cool.
[05:38:41] <Bike> so (compose (mapping #'1+) (mapping #'1+)) will end up as something like (let ((m1 (mapping #'1+)) (m2 (mapping #'1+))) (lambda (&rest args) (funcall m1 (apply m2 args))))
[05:39:04] <Bike> then after inlining each (mapping #'1+) ends up as (let ((fn #'1+)) (lambda (list) (mapcar fn list)))
[05:39:16] <Bike> the compiler can be smart enough to inline _that_ into the body of the compose lambda
[05:39:39] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[05:39:56] <Bike> and then maybe it inlines mapcar into a loop
[05:40:21] <Bike> that said, it will probably not be smart enough to avoid consing an intermediate list, due to side effect restrictions
[05:40:30] <EdLangley[m]> cool, I think that answers my question
[05:41:01] <qhong> Soviet Refal is able to eliminate that list automatically in 1970s
[05:41:18] <EdLangley[m]> I've always wondered how much of an optimization barrier passing LAMBDAs around is
[05:41:54] <EdLangley[m]> And it sounds like compilers can, in theory at least, be smart enough to inline them like any other function
[05:42:07] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[05:42:13] <qhong> if everything is mutable, compiler just commit breinded
[05:42:24] <qhong> but srsly I think this whole thing is totally broken
[05:42:36] <qhong> we have dependence maintenence protocol in MOP
[05:42:42] <Bike> clasp can do it, so i figure a better compiler like sbcl can as well
[05:43:19] <qhong> why not do the same for compiler, assume the best scenario, and update dependent if the assumption is broken
[05:43:47] <qhong> Bike: I don't think it can get around ubiquitous mutability
[05:43:50] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:43:59] <Bike> i meant clasp can do the inlining
[05:44:40] <Bike> for avoiding consing up the intermediate list, i think what the compiler would have to do is observe that the first mapcar's result is only ever used by the second mapcar, so the storage can be reused
[05:44:48] <qhong> When lambda get passed around, most of the case that means they are stored in mutable variables that confuses compiler
[05:44:49] <Bike> I don't think any implementations actually do this, though
[05:44:54] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 250 seconds)
[05:45:11] <Bike> i mean, sure, but in this case the variables aren't actually mutable, so it's pretty easy to see how it goes.
[05:45:25] <qhong> Bike: there's systematic western adhoc method called stream fusion, and chad Soviet method called super-compilation
[05:45:28] <Bike> the variables aren't actually mutated* i mean.
[05:46:23] <Bike> this is what, futamura projection stuff?
[05:46:34] <qhong> Bike: yes I think the above cases the only problem is global functions getting redefined
[05:46:47] <sm2n> supercompilation reduces your program to a normal form
[05:46:48] <qhong> Bike: it's much stronger than western school of partial evaluation
[05:47:26] <sm2n> but more or less any nontrivial language does not necessarily reach a normal form in finite time
[05:47:31] <sm2n> does not even have to exist
[05:47:46] <qhong> sm2n: supercompilation doesn't reduce your program to normal form
[05:48:19] <Bike> "I have interpreted the major steps in biological and cultural evolution, including the emergence of the thinking human being, as nothing else but metasystem transitions on a large scale. Even though my Ph.D. was in theoretical physics, I" and i'm out.
[05:48:20] <sm2n> with supercompilation you can get bit-identical compiler output for all programs with the same denotational semantics
[05:48:37] <sm2n> qhong: oh?
[05:48:44] <sm2n> Bike: where is that from?
[05:49:09] <Bike> some paper by the refal guy.
[05:49:21] <qhong> sm2n: are we talking about the same thing? there're two totally different thing supercompilation and superoptimization which has confusing name
[05:49:53] <pillton> Bike: Have you seen work which allows users to perform optimisations of compositions (H X) <=> (G (F X)) without relying on compiler macros / inlining? I was thinking something like (LET ((GRAPH (G (F (LAZILY X))))) (OPTIMIZE-GRAPH GRAPH)) <=> (LAMBDA (X) (H X)).
[05:50:53] <sm2n> qhong: oh, yes I see, I did mix them up I think
[05:51:09] <Bike> seen some of that in the haskellverse, i think, though i don't think i understand your example.
[05:55:02] <qhong> Bike: chad 20th century physicist
[05:55:24] <qhong> Bike: physicist nowadays: I only know how to solve eigen value using matlab
[05:56:30] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[05:59:09] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[06:00:52] <pillton> Bike: Assume that the evaluation of (G (F X)) is equivalent to the evaluation of (H X). I could extend both F and G to support being able to "record" their operations in a graph structure when given an "lazy" object. A "lazy" object allows F to inspect the object to obtain its type but does not perform the operation. The function F returns another "lazy" object which allows G to record its operation in the same graph as F and
[06:00:52] <pillton> importantly, preserves the knowledge that it relies on the output of F.
[06:02:08] <pillton> Bike: The function OPTIMIZE-GRAPH takes the full graph and identifies that #'H can be used instead of (compose #'G #'F) and returns the "optimized" graph as a closure.
[06:02:55] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[06:03:52] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[06:05:20] <Bike> okay, sure. seems pretty simple phrased like that. your graph is something like <input> -> F -> G -> <output>, your optimizer replaces F -> G with H.
[06:07:24] <qhong> pillton: you want to do it at runtime?
[06:08:44] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 268 seconds)
[06:10:27] <pillton> qhong: Yes.
[06:11:13] <pillton> Sorry, I think realistically, the output of OPTIMIZE-GRAPH would be (LAMBDA () (H X)).
[06:12:59] *** Joins: lisp123 (~lisp123@5.30.23.247)
[06:12:59] <pillton> ... to handle situations like (defun user-function (X Y) (OP (F X) (G (F Y)))).
[06:13:08] *** Joins: samps (~samps@179.225.196.215)
[06:14:32] *** Joins: phadthai (~mmondor@user/phadthai)
[06:17:33] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[06:20:10] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[06:20:22] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Remote host closed the connection)
[06:24:46] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 250 seconds)
[06:29:37] *** Quits: samps (~samps@179.225.196.215) (Ping timeout: 240 seconds)
[06:31:24] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:9003:ed0c:7525:f4b7) (Remote host closed the connection)
[06:32:58] *** Joins: wheelsucker (~user@2600:8801:8c24:d000::8e14)
[06:39:01] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[06:39:14] *** Quits: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925) (Remote host closed the connection)
[06:42:08] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[06:43:37] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[06:43:40] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[06:43:41] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Remote host closed the connection)
[06:43:53] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[06:56:07] *** Joins: jeosol (~jeosol@user/jeosol)
[06:56:22] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[06:57:15] <yottabyte> if I'm reading lines from a file, and I see "^M" in my repl, that means newline, right? how do I check for equality for that? as in, how do I check the line is a newline?
[06:57:32] <yottabyte> (i'm doing (print line))
[06:57:41] <pillton> yottabyte: It means carriage return. #\Return
[06:57:54] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Ping timeout (120 seconds))
[06:58:33] <pillton> There is carriage return (#\Return) and new line (#\NewLine).
[06:58:44] *** Joins: s-liao (~s-liao@101.86.96.21)
[06:59:07] <pillton> clhs 13.1.7
[06:59:08] <specbot> Character Names: http://www.lispworks.com/reference/HyperSpec/Body/13_ag.htm
[06:59:18] <yottabyte> thanks
[07:00:05] <pillton> It is used to tell the cursor to go to the beginning of the current line.
[07:00:07] <yottabyte> what will Newline and Linefeed show up as if Return shows up as ^M?
[07:00:27] <pillton> ^N I think.
[07:00:45] <pillton> Normally editors render the new line as a new line.
[07:01:13] <pillton> Carriage return makes little sense in an editor.
[07:02:11] <pillton> Carriage return is important for terminals.
[07:03:50] <yottabyte> gotcha
[07:06:43] <White_Flame> CR = 13 = ^M, LF = 10 = ^J.  "Newline" technically is LF, but in practice the output encoder will render it as whatever's default for the platform
[07:07:31] <White_Flame> well, ASCII calls LF Newline as well, afaik.  I guess #\Newline is independent of that
[07:10:49] *** Quits: occ (~occ@user/occ) (Ping timeout: 256 seconds)
[07:24:35] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:54d9:91e1:8da8:c09f)
[07:25:23] *** Joins: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925)
[07:26:03] <remexre> are displaced vectors expensive to have as temporaries? wondering why e.g. find has :start, instead of there being a convenient (slice vec 3 nil) or something to make displaced vectors, and the common pattern being to use them
[07:27:16] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[07:28:53] <pillton> remexre: (slice vec 3 nil) requires consing the displaced array where (find ... :start 3) does not.
[07:29:56] <remexre> shouldn't a really basic escape analysis be able to determine that the one created by (find x (slice vec 3 nil)) has dynamic extent though?
[07:30:14] <beach> Good morning everyone!
[07:30:23] <remexre> good morning
[07:30:41] <remexre> (well, evening here lol)
[07:31:03] <pillton> remexre: You shouldn't return values with dynamic extent.
[07:32:15] <remexre> pillton: this wouldn't be something declared on slice, it'd be something the compiler could recognize after inlining it
[07:32:30] <beach> minion: Please tell remexre about universal greeting time.
[07:32:31] <minion> remexre: look at universal greeting time: It is always morning when a person enters a channel, and late night when they leave. You may want to read http://www.total-knowledge.com/~ilya/mips/ugt.html for further information
[07:34:06] <remexre> beach: hah, sure
[07:35:41] <pillton> remexre: Sure, but it wouldn't catch every case where (find vec :start 3) is trivial to define, doesn't cons, interacts easily with :from-end, and doesn't require a "sufficiently smart" compiler.
[07:37:40] *** Joins: occ (~occ@user/occ)
[07:38:01] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[07:39:08] <remexre> I guess, though I think the sufficiently-smart isn't too very smart
[07:43:26] *** Joins: Guest43 (~Guest43@pool-96-233-64-53.bstnma.fios.verizon.net)
[07:44:20] <Guest43> Does the esrap parser library provide strong error reporting for parse failures?
[07:52:57] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[07:55:34] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[07:56:15] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[08:01:17] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 240 seconds)
[08:03:39] *** Quits: Guest43 (~Guest43@pool-96-233-64-53.bstnma.fios.verizon.net) (Quit: Client closed)
[08:14:26] *** Joins: semz_ (~semz@user/semz)
[08:14:46] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:17:00] *** Quits: semz (~semz@user/semz) (Ping timeout: 250 seconds)
[08:18:41] *** Quits: Bike (~Bike@71.69.170.70) (Quit: sleep)
[08:19:10] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[08:25:14] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 250 seconds)
[08:25:41] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[08:30:31] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[08:32:04] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[08:32:51] *** Joins: karlosz (~karlosz@47.151.136.69)
[08:40:17] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 240 seconds)
[08:52:10] *** Joins: igemnace (~ian@user/igemnace)
[08:53:10] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[08:54:32] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[08:58:37] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 240 seconds)
[09:15:10] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Remote host closed the connection)
[09:15:29] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[09:17:15] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:24:01] *** Joins: kathe (~mayuresh@49.33.227.180)
[09:27:55] <kathe> hi all. :)
[09:27:56] *** Quits: jealousmonk (~user@2804:431:e7c5:c29d:f611:a6e4:135a:8b29) (Quit: ERC (IRC client for Emacs 27.1))
[09:33:42] <beach> Hello kathe.
[09:34:12] <kathe> heya beach. following the 'ug' maxim; good morning. :)
[09:34:25] <kathe> and literally true out here. :)
[09:35:30] <kathe> i am about to ask an existential question, though it might seem provocative.
[09:35:56] <kathe> what could "i" do with "common lisp" after i've learnt it well?
[09:36:16] <kathe> i am learning common lisp only because i've fallen in love with it.
[09:36:26] <beach> Write some applications or some libraries.
[09:36:30] <kathe> especially due to it's condition system and 'clos'.
[09:36:51] <kathe> beach: is there some kind of "required projects" list for common lisp?
[09:37:04] <beach> http://metamodular.com/Common-Lisp/suggested-projects.html
[09:37:08] <kathe> like netbsd, freebsd have!
[09:37:31] <beach> Feel free to ask questions about that list.
[09:38:07] <kathe> that webpage is failing to get accessed.
[09:38:18] <kathe> beach: could you please check at your end?
[09:38:39] <beach> It works, but maybe you assume https when it is http.
[09:39:06] <kathe> beach: yeah, got it loaded now. thanks for that tip. :)
[09:39:11] <beach> Sure.
[09:39:34] <kathe> beach: you are super cool, though cranky at times. may be it is the rest of us. ;)
[09:39:57] <beach> Thanks, I guess.
[09:42:07] <kathe> that projects list has as assembler! that's interesting, and more to my liking.
[09:42:32] <kathe> i think that assembler should also mention need for a linker.
[09:42:42] <kathe> i think that's the one i'm going to pursue.
[09:42:55] <kathe> beach: thanks for sharing that list. :)
[09:42:57] <beach> It is being worked on: https://github.com/robert-strandh/Cluster
[09:43:27] <beach> But we have only a small portion of the x86 database, and we have no other architectures.
[09:44:08] <kathe> cluster assembler is interesting. i'll ask if they would accept a linker too.
[09:44:38] <mfiano> I am curious what linker means in CL context.
[09:44:42] <beach> A linker is quite meaningless in the context of Common Lisp.
[09:44:48] <beach> Heh.
[09:44:51] <mfiano> Ha
[09:45:49] <beach> kathe: I mean, you can write a traditional assembler and a traditional liker if you like, of course, but it wont be related to the project I meant in that list.
[09:46:04] <kathe> beach: a linker would allow a 'cl' system to be fully independent.
[09:46:49] <EdLangley[m]> kathe: it already basically is
[09:47:05] <mfiano> Yes, it already is.
[09:47:10] <kathe> EdLangley: hi. would you explain how?
[09:47:17] <EdLangley[m]> Most implementations don't have direct access to the hardware but, generally, they don't use the OS for much else
[09:47:51] <kathe> i can understand a 'cl' system generating object files, but how could they build an executable without having access to a linker?
[09:47:53] <EdLangley[m]> They usually generate machine code for loaded code themselves
[09:47:56] <mfiano> kathe: Are you only familiar with batch-compiled languages?
[09:48:00] <EdLangley[m]> And just put it somewhere in memory
[09:48:24] <EdLangley[m]> just try (defun foo (a b) (+ a b)) (disassemble 'foo)
[09:48:27] <EdLangley[m]> in sbcl or ccl
[09:48:30] <kathe> mfiano: yes.
[09:48:43] <mfiano> kathe: Then you have much to learn (and to forget)
[09:48:52] <kathe> mfiano: true that. :)
[09:49:26] <mfiano> #clschool may be a more appropriate place for beginner questions.
[09:49:45] <kathe> mfiano: okay, sorry to have polluted this space.
[09:49:46] <mfiano> But nothing is wrong with here, if you don't mind people assuming you have a decent knowledge of CL
[09:50:09] <mfiano> Not a problem
[09:50:46] <beach> kathe: In Common Lisp, there is typically just one executable, which is the entire Common Lisp system.  FASL files are loaded into the image when that executable is running.  There is a process that ties the contents of the FASL to the image, and that process is similar to linking, but there is no traditional linker creating an executable.
[09:51:42] <beach> kathe: Some Common Lisp systems can create an executable file, but that is usually done by turning the contents of memory directly into an executable file, and not by combining object files.
[09:52:11] <kathe> beach: okay, that's what i was a bit confused about.
[09:52:32] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[09:52:38] <kathe> beach: so the common lisp's assembler has knowledge of things like "elf".
[09:53:18] <beach> Not typically, no.  No files are involved.
[09:53:47] <beach> The Cluster assembler doesn't even read assembly source code.
[09:54:03] <kathe> beach: yes, i read and understood that.
[09:54:25] <kathe> but, some part of a common lisp system has to know about "elf" or similar formats, right?
[09:54:36] <beach> No.
[09:55:08] <beach> In a typical Common Lisp system, only the executable of the entire system is an ELF file.
[09:55:11] <moon-child> some part of a bootstrapped common lisp system running under unix does, sure
[09:55:32] <moon-child> but interacting with object files is not part of normal operation
[09:56:13] <beach> Cluster takes a list of standard objects, each representing some abstract instruction or a label, like ADD or SUB.  It then figures out, from the arguments, what machine instruction to use.  That's the essence of an assembler.  Reading text and writing object files is secondary.
[09:56:37] <kathe> beach: so when a 'cl' compiler produces a binary, it holds some part of itself?
[09:56:51] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[09:57:27] <kathe> moon-child: so a 'cl' binary is actually an entire operating environment host for the new application?
[09:57:33] <beach> The Common Lisp compiler produces a FASL (if it is the file compiler) or if it is COMPILE, it does everything in memory.  Typically, at least.
[09:57:47] <beach> kathe: Yes, including the compiler.
[09:58:12] <kathe> beach: okay, now i get it. that's quite similar to what squeak (smalltalk) does.
[09:58:30] <beach> Sure, except it's probably the other way around, given history.
[09:58:47] <kathe> beach: they both evolved independently.
[09:59:22] <kathe> actually, in olden times, microsoft access projects needed a microsoft access "runtime" to work when deployed in the wild.
[09:59:24] <beach> Smalltalk did not evolve independently of Lisp.
[09:59:39] <kathe> beach: can you prove that?
[10:00:01] <beach> I think pretty much any of Alan Kay's talks would say so.
[10:00:38] <kathe> beach: alan kay only talks about 'cl' influence on the design of the language.
[10:00:53] <kathe> beach: the architecture of smalltalk is a lot more than the language.
[10:01:22] <kathe> beach: check out papers by "dan ingalls".
[10:01:35] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[10:02:03] <mfiano> You say you are only familiar with batch-compiled languages, and then know all this about Smalltalk?
[10:02:08] <mfiano> Are you trolling us?
[10:02:33] <kathe> mfiano: i've worked with c++ majorly. but i've also spent around 10 years with smalltalk.
[10:02:41] <mfiano> Smalltalk wasn't even conceived for like 15 years after Lisp.
[10:02:44] <kathe> mfiano: no i'm not trolling. i'm for real.
[10:03:54] <kathe> mfiano: and lisp was actually birthed because one of mccarthy's students/assistants thought it better to implement an interpreter instead of a pure compiler.
[10:04:50] <beach> kathe: Quote from Alan Kay: "Iâve written about this variously elsewhere: including in âThe Early History of Smalltalkâ, and Iâve emphasized especially that âthe idea of Lispâ pervades the underpinnings of Smalltalk as it was developed at Xerox Parc."
[10:05:35] <kathe> beach: again, smalltalk the language isn't all there is, there's also smalltalk the architecture.
[10:05:46] <beach> Fine.
[10:06:00] <mfiano> I don't have an interest in continuing this topic the way it is going.
[10:06:08] <beach> Moi non plus.
[10:06:09] <kathe> agree. :)
[10:07:25] <kathe> kind-a off-topic, does everybody who uses emacs on a regular 'pc' keyboard use the "esc" key in place of "meta"?
[10:07:47] <moon-child> alt
[10:08:27] <semz_> alt works fine. control often gets rebound to where caps lock normally is though
[10:08:35] <kathe> moon-child: "alt" is quite awkwardly placed which prevents easy reach.
[10:08:59] <kathe> semz_: yes, i've swapped "ctrl" with "caps_lock". :)
[10:09:33] <semz_> keyboard designs suck pretty bad :/
[10:10:04] <moon-child> I don't know how your keyboard is laid out ('pc' is not very descriptive).  I am just telling you that the alt key generally corresponds to meta in emacs.  You should be able to change which physical keys are associated with which virtual keycodes; the details will depend on what software you are using to perform input translation
[10:10:07] <kathe> semz_: i also have a "happy hacking keyboard", so i guess i'll just have to pull it out.
[10:10:08] <moon-child> semz_: kinesis is pretty good
[10:10:45] <sm2n> moon-child: which one?
[10:10:51] <kathe> moon-child: thanks. i am on a lenovo thinkpad.
[10:10:58] <moon-child> sm2n: advantage
[10:11:08] <ck_> keyboards have evolved pretty independently from smalltalk though.
[10:11:10] <sm2n> I don't understand the appeal of these weird keyboards, are they really such a large improvement?
[10:11:10] <ck_> scnr
[10:11:21] <semz_> moon-child: interesting, it seems to get modifier keys right and doesn't lack F keys like so many
[10:11:53] <kathe> sm2n: they definitely help a lot, especially with emacs.
[10:12:14] <kathe> sm2n: the rhythmic flow stays undisturbed.
[10:12:23] <moon-child> sm2n: it is split and bowled, which avoids wrist deviation, and the keys are arranged ortholinearly, which avoids unergonomic sideways movement
[10:12:47] <kathe> sm2n: i've just migrated to emacs from vi, and i'm experiencing jarring. a lot.
[10:12:55] <moon-child> sm2n: it also places many important keys on the thumbs (vs just space on a traditional keyboard), which are much stronger than other fingers
[10:13:00] <semz_> ^
[10:13:37] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:54d9:91e1:8da8:c09f) (Quit: My MacBook has gone to sleep. ZZZzzzâ¦)
[10:13:46] <moon-child> sm2n: long travel distance also reduces stress of a given keystroke, though this can also be mitigated by with care
[10:14:02] <moon-child> s/by//
[10:14:27] <sm2n> I see
[10:14:31] <White_Flame> kathe: for tab completion in a source code buffer, I use Esc Tab, as M-Tab/Alt-Tab is already taken by the OS :-P
[10:14:47] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[10:15:35] <kathe> White_Flame: i think i'll just stick with "esc" for "meta", less jarring. :-p
[10:15:42] <sm2n> moon-child: What do you do for a compose key?
[10:15:49] <White_Flame> C-M-foo might be weird, though
[10:15:54] <White_Flame> or Shift-Meta
[10:16:01] *** Quits: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63) (Quit: Client limit exceeded: 20000)
[10:16:05] <ck_> esc, c-foo is what I do
[10:16:14] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:16:19] <ck_> it's more easy to get used to than I once thought
[10:16:21] *** Joins: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63)
[10:16:30] <moon-child> sm2n: I use the key labeled 'page down' as both compose and mode_switch (depending on press vs tap)
[10:17:03] <White_Flame> I use either the right "windows key" or caps lock as compose
[10:17:03] <moon-child> sm2n: not sure how worthwhile it is to look at the idiosyncrasies of my keyboard layout :P it works for me but
[10:18:07] <sm2n> hmm, I see. I don't think I'd be willing to sacrifice pgdn
[10:18:22] <moon-child> oh, I still have a pagedown key
[10:18:49] *** Quits: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (Read error: Connection reset by peer)
[10:19:09] <kathe> is it acceptable out here to just leave? or better with a goodbye message?
[10:19:26] <mfiano> Just leave.
[10:19:28] <moon-child> but, again, this is my idiosyncratic keyboard layout.  If you want something with more buttons there is maltron, but I have not found kinesis lacking
[10:19:36] <kathe> mfiano: thanks.
[10:19:39] *** Quits: kathe (~mayuresh@49.33.227.180) (Quit: Leaving)
[10:19:47] <White_Flame> I've seen asking to ask, but never asking to leave ;)
[10:20:02] <mfiano> I use a modal keyboard
[10:20:09] * moon-child backs out, facing White_Flame and bowing
[10:20:17] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 240 seconds)
[10:20:39] <sm2n> Wow, I've never seen or even heard of a "mouth stick" keyboard before
[10:20:40] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[10:21:04] <moon-child> yeah, maltron has some hardcore accessibility stuff
[10:21:13] <moon-child> also one-handed keyboards which--I've always wanted to get two, one for each hand
[10:22:07] <sm2n> why would that be useful? Are you trying to replicate a hollywood movie scene in real life?
[10:22:34] <moon-child> more efficiency?
[10:22:47] <moon-child> for any key, there are twice as many places I might find it
[10:22:50] <ck_> I can see the benefit, for all character tuples that you'd have to move the same finger for with only one keyboard
[10:22:59] <sm2n> I guess that makes sense
[10:23:04] <moon-child> so better likelihood a given finger will be free when it is needed
[10:23:23] <sm2n> yeah, but the keys are smaller
[10:23:33] <ck_> for example you could type "vr" maybe four times as fast. That's a significant improvement
[10:23:58] <moon-child> sm2n: they're smaller?  I thought they were just more spread out
[10:24:11] <sm2n> they look smaller at least
[10:24:33] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:54bc:3778:6db0:347c)
[10:25:15] <sm2n> https://www.maltron.com/uploads/6/1/2/5/61250099/640px-dsc-3536_orig.jpg
[10:25:18] <sm2n> hard to tell
[10:25:52] <White_Flame> are there "null modem" type in-memory streams anywhere, where a reader can block until a writer writes into it?
[10:26:07] <White_Flame> for an I/O byte stream specifically, not a message queue
[10:26:56] <moon-child> not sure what you're asking for.  A scheduler?
[10:27:10] <EdLangley[m]> Isn't LISTEN something like this White_Flame ?
[10:27:14] <ck_> sm2n: https://www.youtube.com/watch?v=fkGpFeUQ49Y
[10:27:21] <EdLangley[m]> Hmm, nvm
[10:27:32] <White_Flame> no, an in-memory stream where you write into it which will store into a buffer, and read from it which will block if the buffer is empty
[10:27:41] <moon-child> like a unix pipe?
[10:27:50] <White_Flame> I guess so, haven't used those before
[10:28:05] <moon-child> I think you want a unix pipe
[10:28:24] <moon-child> but will have to build something of your own if you want to support non-unix
[10:28:45] <White_Flame> hmm, sounds like it's a fair bit of overhead for just connecting a stream-reader loop to a writer in the same process
[10:29:08] <White_Flame> I'm using the zip library, where to compress a file you give it a stream to read
[10:29:12] <mfiano> Sounds like a channel in CSP terms
[10:29:13] <White_Flame> and I'd like to stream bytes _into_ that
[10:30:00] <White_Flame> the whole CL notion of streams really needs a full replacement :-P
[10:30:10] <mfiano> o.O
[10:30:23] <moon-child> mr gray, I don't feel too well
[10:30:40] <White_Flame> yeah, I know
[10:31:12] <EdLangley[m]> I think flexi-streams might have something
[10:31:16] <EdLangley[m]> I've had this problem before
[10:31:46] <EdLangley[m]> http://edicl.github.io/flexi-streams/#make-in-memory-output-stream
[10:32:04] <White_Flame> that converts output into a sequence
[10:32:09] <EdLangley[m]> I guess most of this assumes you have all the data in memory
[10:32:11] <White_Flame> not into an input stream
[10:32:27] <White_Flame> right, I want to stream it through, not store it all at once, since it's big
[10:32:36] <EdLangley[m]> The one before that does sequence->stream
[10:32:43] <EdLangley[m]> same issue, though
[10:32:56] <White_Flame> right, would have to wait until the sequence is completed
[10:32:56] <sm2n> Yeah, but for this to make sense you need some notion of multitasking, which is not part of CL
[10:33:17] <EdLangley[m]> https://github.com/smithzvk/cl-plumbing
[10:33:20] <White_Flame> well, multithreading/"multiprocess" in lispspeak
[10:33:41] <White_Flame> EdLangley[m]: ah, looks good
[10:33:45] <EdLangley[m]> I think I've used that one before
[10:33:49] <EdLangley[m]> But, one of the libraries for this I had to rewrite a bit
[10:34:03] <White_Flame> there's always so many edge cases ot hit
[10:34:05] <EdLangley[m]> it's been a while
[10:35:37] <sm2n> wow, that actually uses a unix pipe underneath
[10:35:42] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[10:36:00] <White_Flame> huh, well we'll see then.  I hope it still is fast enough
[10:36:12] *** Joins: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[10:36:32] <White_Flame> at least I don't have to figure out another bare OS API with the lib ;)
[10:37:26] <sm2n> or not? there is just a random file in there
[10:37:43] <sm2n> it's reader conditional'd out in the .asd
[10:39:44] <White_Flame> ah yeah, looking at the gray-streams-pipe, that's a proper in-memory buffering solution
[10:39:46] <EdLangley[m]> It looks like it's attempting to provide something on implementations that don't supply gray-streams
[10:41:32] <sm2n> right, but what implementations don't have gray-streams support but can also be assumed to run on unix?
[10:42:44] <EdLangley[m]> One that's none of "abcl ccl clisp cmu ecl sbcl allegro lispworks"
[10:42:45] <EdLangley[m]> :)
[10:42:48] <mfiano> It looks like phoe is maintaining this now, so maybe ask him.
[10:42:53] <EdLangley[m]> So, scieneer?
[10:42:57] <EdLangley[m]> XCL?
[10:43:14] <EdLangley[m]> hmm, it's probably actually gcl
[10:43:15] *** Joins: xsperry (~xs@user/xsperry)
[10:43:19] <sm2n> I mean clasp fits that but I think it has gray streams
[10:43:58] <EdLangley[m]> The fifo pipe file has a #> reader macro, which I don't recognize
[10:44:01] <EdLangley[m]> that might be a clue
[10:44:49] <sm2n> that appears to run a unix command
[10:44:54] <sm2n> interesting
[10:45:38] <EdLangley[m]> #> is undefined read syntax, per the standard
[10:46:41] <EdLangley[m]> I wonder where it comes from
[10:46:43] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[10:47:03] <sm2n> not seeing anything in http://git.savannah.gnu.org/cgit/gcl.git/tree/gcl/doc
[10:47:25] <sm2n> but this is unrelated and interesting: http://git.savannah.gnu.org/cgit/gcl.git/tree/gcl/doc/format
[10:47:42] <sm2n> I think there was some talk about an extensible FORMAT here before
[10:49:42] <sm2n> wow, gcl is /weird/
[10:50:01] <mfiano> Why would they use the difference #-(or ...) to load a file that uses an implementation-specific reader extension?
[10:50:09] *** Quits: xsperry (~xs@user/xsperry) ()
[10:50:10] <mfiano> That seems wrong.
[10:50:30] <sm2n> Yes
[10:50:35] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[10:50:40] <mfiano> GCL is not a CL
[10:50:52] <mfiano> (yet, or probably ever)
[10:51:39] *** Joins: igemnace (~ian@user/igemnace)
[10:52:16] <EdLangley[m]> From their release notes, it sounds like they're trying to make it one
[10:52:38] <EdLangley[m]> Which is interesting
[10:53:01] <EdLangley[m]> It's also interesting that, like clisp, their git repo seems pretty active without ever having a release
[10:54:06] <mfiano> They've had releases
[10:54:14] <mfiano> You just have to look almost a decade back
[10:54:15] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[10:54:46] <EdLangley[m]> My phrasing was imprecise
[10:55:04] *** Joins: igemnace (~ian@user/igemnace)
[10:55:16] <EdLangley[m]> All I mean is they don't seem to care about cutting a new release, despite having a more or less continuous stream of commits
[10:55:40] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[10:57:22] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:11d3:bdb3:59a2:15aa)
[10:58:27] <mfiano> My understanding is that they is a person and probably only uses it for personal things.
[11:00:19] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[11:04:37] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 240 seconds)
[11:06:17] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[11:10:25] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[11:10:50] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[11:14:56] *** Joins: igemnace (~ian@user/igemnace)
[11:18:59] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[11:24:43] *** Joins: shka (~herr@109.231.0.226)
[11:26:03] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[11:26:35] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 252 seconds)
[11:26:39] *** Joins: igemnace (~ian@user/igemnace)
[11:34:07] *** Joins: lispy (~lispy@84.69.59.93)
[11:41:08] *** Joins: kathe (~mayuresh@49.32.194.190)
[11:41:17] <kathe> hello. :)
[11:45:47] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Remote host closed the connection)
[11:49:48] *** Joins: Krystof (~user@81.174.155.115)
[11:50:55] <kathe> i read-up about "clx", it's interesting, but failed to find a widget-set.
[11:51:09] <kathe> does anyone here know about any widget-set for "clx"?
[11:53:45] *** Joins: cosimone (~user@93-44-184-251.ip98.fastwebnet.it)
[11:54:28] <ns12> kathe: Is this the "clx"? https://github.com/sharplispers/clx
[11:54:38] <kathe> ns12: yes.
[11:58:52] *** Quits: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 250 seconds)
[12:02:52] <kathe> okay, in relation with "clx", i found mcclim, but it depends on gtk+!
[12:03:22] <kathe> so now, i don't understand what's mcclim? or for that matter what's clim?
[12:05:55] <ns12> https://www.cliki.net/CLIM
[12:07:19] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:08:59] <_death> kathe: how did you determine that it depends on gtk+?
[12:09:50] <kathe> _death: i read it in passing while going through various articles/blogs/forums about it.
[12:11:27] <kathe> looks like mcclim, as it's name suggests is an interface-manager that uses gtk+ for widgets.
[12:11:33] <_death> kathe: it does not.. although old documentation refers to a gtkairo backend, which isn't part of the main branch
[12:11:49] <_death> kathe: mcclim renders its own widgets
[12:12:03] *** Joins: s-liao (~s-liao@101.86.96.21)
[12:12:06] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[12:12:25] <kathe> _death: can you point me to something on that widget set from mcclim?
[12:12:46] <kathe> i'm running around circles. so any help would be nice.
[12:12:50] <lisp123w> Is CL a "safe" language?
[12:13:03] <lisp123w> (memory safe, similar to Rust)
[12:13:23] <kathe> lisp123w: comparing apples with oranges.
[12:13:52] <kathe> lisp123w: i think the 'cl' compiler enforces strong typing.
[12:13:54] <_death> kathe: https://github.com/mmontone/clim-doc contains documents on clim.. you can try the guided tour or other tutorials/guides.. probably not a good idea to _start_ with the spec
[12:15:13] <lisp123w> I don't have any idea of the topic, but I read online that memory safety is important, but I wonder if this is just an issue for languages like C and if CL already solved this problem before: https://news.ycombinator.com/item?id=30091980
[12:16:16] <_death> kathe: in climspeak, widgets are called gadgets.. here's code for drawing gadgets like push buttons, radio boxes, scroll bars, etc. https://github.com/McCLIM/McCLIM/blob/master/Core/clim-core/gadgets/concrete.lisp
[12:16:24] <lisp123w> kathe: A very good introduction to CLIM: https://franz.com/support/documentation/10.1/doc/clim-ug.pdf
[12:19:01] *** Joins: lawt (~lawt@2601:200:8101:f140:dea6:32ff:fea1:adf9)
[12:19:40] <_death> kathe: there are some videos on youtube talking about mcclim, and you can look at the demos by loading "clim-examples" and evaluating (clim-demo:demodemo)
[12:21:42] *** Joins: pve (~pve@178-55-15-63.bb.dnainternet.fi)
[12:23:09] <ns12> McCLIM doesn't look native at all. https://mcclim.common-lisp.dev/excite.html
[12:23:29] <ns12> Actually, the screenshots are a bit weird.
[12:31:56] <kathe> in the lisp world, just like in the 'oss' world, everybody is hell-bent on doing their own thing.
[12:32:07] <kathe> quite discomforting.
[12:33:00] <kathe> emacs + slime/sly are so well entrenched that even through symbolics/genera had advanced graphical 'ide' systems, there's nothing for the present day common lisp systems.
[12:33:08] <kathe> even more discomforting.
[12:33:40] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[12:33:44] <kathe> i see rainer joswig's tweets about his experiments with graphical integrated development systems for common lisp and get serious heart-burn.
[12:33:52] <kathe> time after time, every time.
[12:33:52] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[12:34:15] <_death> be the change that you want to see
[12:34:59] <kathe> even though there are so many free common lisp systems, including the 'gpl' one called "clisp", 'gnu' people are hell-bent on developing their own common lisp, and that too a variant.
[12:35:05] <kathe> man, this is crazy.
[12:36:26] <kathe> i'm taking time out to figure if i really want to go ahead with common lisp or simply learn enough common lisp to understand the "condition system" and "metaobject protocol" based 'clos' and return to the world of smalltalk via squeak.
[12:36:32] <phoe> I think you are making the assumption that there is some "gnu" people in there
[12:36:45] <phoe> or rather just one or a small group of developers who are hacking at it in their free time
[12:37:01] <phoe> like, you assume there is some greater scheme behind it (pun intended)
[12:37:14] <kathe> phoe: that was a good one. :)
[12:37:47] <kathe> does anyone here use the lispworks system? their 'ide' is beautiful.
[12:38:04] <White_Flame> lisp123w: yes, it's memory safe.  basically, raw pointers aren't exposed and accessing out-of-bounds array indices or using the wrong accessors won't destroy your memory
[12:38:05] <phoe> you might want to ask on lisp-hug; Libera Chat is kind of more about FOSS implementations
[12:38:13] <flip214> Is there some UI tracing tool, like clouseau for value inspection?
[12:39:33] <kathe> phoe: sure. thanks for that tip.
[12:40:21] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 245 seconds)
[12:40:30] <White_Flame> (rust attempts to be automatically threadsafe, which is a separate topic)
[12:41:42] <ns12> White_Flame: "yes, it's memory safe" - What if I use a foreign function interface (such as CFFI)?
[12:42:03] <White_Flame> then that's not lisp, and you're interfacing with & includign non-safe language stuff
[12:42:40] <ns12> flip214: #'INSPECT ?
[12:43:53] <ns12> White_Flame: Is the Lisp part still memory safe in the presence of non-Lisp parts accessed through a foreign function interface?
[12:44:01] <phoe> no
[12:44:06] <White_Flame> no, because the non-safe stuff can trample lisp
[12:44:47] <saturn2> is rust still memory-safe when run under a kernel written in a non-safe language?
[12:44:56] <lisp123w> White_Flame: Thanks! Lisp 1, Rest of World 0 :)
[12:45:08] <White_Flame> I prefer Lisp 2 ;)
[12:45:47] <lisp123w> Heh ;)
[12:45:56] *** Quits: wheelsucker (~user@2600:8801:8c24:d000::8e14) (Remote host closed the connection)
[12:46:00] <White_Flame> saturn2: pedantic, but one assumes the runtime is implemented properly
[12:46:03] <ns12> "no, because the non-safe stuff can trample lisp" - Doesn't this have significant implications, since many Common Lisp libraries rely on CFFI?
[12:46:18] <White_Flame> the unsafety of an implementation would be a fixable bug
[12:46:44] <White_Flame> ns12: correct, if you pull in a buggy/exploitable non-lisp library, you might have problems
[12:46:51] *** Quits: frodef (~frode@46.212.93.4) (Ping timeout: 256 seconds)
[12:47:00] <phoe> ns12: in practice, this has as many implications as using these unsafe libraries without Lisp
[12:47:23] <phoe> you use a library, you get to use its bugs as well, no matter if these are about memory safety or logic bugs
[12:47:39] <phoe> it's simply that memory safety issues are hard to get in a memory safe language
[12:48:18] <phoe> ...unless you can evaluate Lisp code, at which point not only pwn the machine, but can also abuse DX to destroy memory
[12:48:30] <phoe> s/at which point/at which point you/
[12:48:42] <semz_> Maybe more notable than CFFI (which obviously can't give you much more than the pittance C provides) is safety 0 code
[12:48:43] <_death> in general, nothing is safe.. there are risks and you can try avoid their triggers, place control mechanisms, or mitigate bad consequences
[12:49:16] <semz_> which isn't THAT common, but I've still seen (declaim (safety 0) (speed 3)) way too often
[12:50:10] <ns12> Why would one want (declaim (safety 0) (speed 3)) ?
[12:50:16] <semz_> "to make it fast"
[12:50:29] <ns12> Fast, but possibly wrong ...
[12:50:36] <phoe> to mark your code as not usable for pubilc consumption
[12:50:49] <semz_> it's dumb but it's out there. and unlike a CFFI dependency, it isn't as easy to spot
[12:51:02] *** Joins: frodef (~frode@46.212.93.4)
[12:51:04] <phoe> thankfully it's easy to fix with sb-ext:restrict-compiler-policy
[12:51:10] <phoe> but that is SBCL-specific
[12:51:13] <semz_> it's usually not even particularly fast
[12:51:31] <ns12> semz_: "it isn't as easy to spot" - Why not? Isn't it a simple matter of using grep to find "(safety 0)"?
[12:51:46] <semz_> sure, but a CFFI dependency is usually documented
[12:51:47] <phoe> you need to walk all transitive dependencies
[12:52:40] <flip214> ns12: no, something using mcclim or similar... allowing to click open subcalls and so on.
[12:53:19] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[12:53:34] <ns12> semz_: "CFFI dependency is usually documented" - I don't think so. In any case, CFFI would be listed in the ASD file.
[12:57:06] <ns12> My ~/.sbclrc contains:
[12:57:06] <ns12> (sb-ext:restrict-compiler-policy 'debug 3)
[12:57:06] <ns12> (sb-ext:restrict-compiler-policy 'safety 3)
[12:57:06] <ns12> Does the setting apply to everything that I compile, including all libraries and their dependencies?
[12:57:12] <phoe> t
[12:58:01] <ns12> This would override all (declaim (safety 0)) in any library that I compile?
[12:59:17] *** Joins: Major_Biscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[13:00:32] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 240 seconds)
[13:00:52] <mfiano> You shouldn't ever declaim optimization qualities at the toplevel anyway. The semantics are not clearly defined.
[13:01:10] <phoe> ns12: t
[13:01:55] <ns12> Thank you phoe.
[13:01:58] <mfiano> Years ago I remember taking a couple days to find a bug that was due to some library declaiming at the toplevel.
[13:02:10] <phoe> therefore, after restricting compiler policy, you can e.g. (ql:quickload :jsown) without feeling guilty
[13:02:13] <mfiano> Tainting the image, by leaking into later compiled files.
[13:03:51] * mfiano waits for #+real-damn-fast-priority-queue bug report
[13:04:58] <phoe> mfiano: I am giving the programmer a choice at https://github.com/phoe/damn-fast-priority-queue/blob/main/damn-fast-priority-queue/src.lisp#L20, not set the defaults for them
[13:05:03] <jdz> There are cases where real damn fast priority queue is slower than alternatives.
[13:05:11] <mfiano> I know
[13:05:30] <phoe> jdz: you mean the ones listed in my benchmark, or have some other ones been foind?
[13:05:33] <phoe> found*
[13:06:09] <mfiano> I already informed phoe of some large optimizations that can be made. I'm not sure if he applied them yet
[13:06:09] <jdz> I've been playing around implementing a straight-forward pairing heap: https://github.com/jdz/simple-pairing-heap/blob/master/bench.org
[13:06:42] <phoe> I'm interested
[13:07:01] <phoe> mfiano: not yet, https://github.com/phoe/damn-fast-priority-queue/issues/12 is still there
[13:07:18] <mfiano> Looks like you didn't fork my ephemeral gists
[13:07:36] <phoe> aw snap
[13:07:39] <phoe> no, I didn't
[13:07:52] <scymtym> flip214: can you elaborate on what you are looking for?
[13:09:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[13:09:56] *** Joins: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl)
[13:11:38] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:13:17] *** Quits: occ (~occ@user/occ) (Ping timeout: 240 seconds)
[13:13:35] <flip214> scymtym: some UI that allows to trace a function call, and displays the data graphically (X11, McClim).
[13:13:38] <lisp123w> That new CLOG demo looks pretty cool
[13:15:18] <scymtym> flip214: i have a tool for that, but it is not very usable at the moment
[13:22:43] *** Quits: kathe (~mayuresh@49.32.194.190) (Quit: Leaving)
[13:23:24] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:27:52] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[13:28:07] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[13:28:24] <flip214> The Story of My Life
[13:32:12] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[13:48:11] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[13:50:53] *** Quits: alvaro121_ (~aa@201.230.126.66) (Quit: Bye)
[13:51:08] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Read error: Connection reset by peer)
[13:51:37] *** Joins: igemnace (~ian@user/igemnace)
[13:51:47] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Quit: WeeChat 3.3)
[13:52:07] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[13:52:38] *** Quits: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925) (Remote host closed the connection)
[13:52:45] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[13:53:17] *** Quits: dilated_dinosaur (~dino@cpc1-bexl9-2-0-cust231.2-3.cable.virginm.net) (Ping timeout: 240 seconds)
[13:54:30] *** Joins: dilated_dinosaur (~dino@cpc1-bexl9-2-0-cust231.2-3.cable.virginm.net)
[14:01:17] *** Quits: lispy (~lispy@84.69.59.93) (Quit: O/)
[14:02:16] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[14:04:17] <beach> Although probably all implementations of Common Lisp are safe with high values of the safety quality, the language itself is not as safe as we would like to believe.  Hence WSCL.
[14:04:46] *** Joins: igemnace (~ian@user/igemnace)
[14:05:31] <beach> kathe: I think you should stick to Smalltalk and Squeak.
[14:06:39] *** Joins: mister_m` (~user@c-73-110-154-209.hsd1.il.comcast.net)
[14:07:07] *** Quits: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof) (Ping timeout: 256 seconds)
[14:07:07] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[14:07:39] *** Joins: occ (~occ@user/occ)
[14:07:41] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 256 seconds)
[14:07:45] *** Joins: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof)
[14:07:45] *** Joins: kevingal (~quassel@149.157.101.196)
[14:08:15] *** Quits: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net) (Ping timeout: 256 seconds)
[14:09:26] *** Joins: selwyn (~selwyn@user/selwyn)
[14:11:39] *** Quits: jeosol (~jeosol@user/jeosol) (Ping timeout: 256 seconds)
[14:12:19] *** Quits: kevingal (~quassel@149.157.101.196) (Ping timeout: 250 seconds)
[14:12:49] *** Joins: kevingal (~quassel@hamilton-nat.nuim.ie)
[14:17:01] *** Quits: kevingal (~quassel@hamilton-nat.nuim.ie) (Ping timeout: 245 seconds)
[14:17:32] *** Joins: kevingal (~quassel@2001:770:c0:401:dd75:adc5:c248:9cdf)
[14:17:58] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[14:22:39] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:25:20] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:27:19] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-6F8B-dynamic.midco.net)
[14:28:47] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[14:33:02] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 252 seconds)
[14:40:03] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[14:41:02] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.4)
[14:48:36] *** Joins: dickbar__ (~dickbaren@dyndsl-085-016-151-208.ewe-ip-backbone.de)
[14:51:25] *** Quits: mzan (~quassel@mail.asterisell.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[14:51:43] *** Joins: mzan (~quassel@mail.asterisell.com)
[14:53:29] *** Joins: samps (~samps@179.225.196.215)
[14:54:33] *** Quits: dickbar__ (~dickbaren@dyndsl-085-016-151-208.ewe-ip-backbone.de) ()
[14:55:27] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[15:00:02] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[15:00:11] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[15:05:42] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:11d3:bdb3:59a2:15aa) (Ping timeout: 260 seconds)
[15:05:57] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[15:07:46] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:11d3:bdb3:59a2:15aa)
[15:10:25] *** Joins: random-nick (~random-ni@87.116.167.125)
[15:11:02] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[15:11:09] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[15:11:37] *** Quits: OlCe (~user@amarseille-656-1-684-224.w90-8.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[15:14:06] *** Joins: xsperry (~xs@user/xsperry)
[15:15:02] *** Quits: samps (~samps@179.225.196.215) (Ping timeout: 240 seconds)
[15:15:17] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 240 seconds)
[15:21:50] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[15:24:08] *** Joins: aartaka (~aartaka@176.59.200.114)
[15:25:04] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:26:40] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[15:28:10] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[15:28:10] *** Quits: aartaka (~aartaka@176.59.200.114) (Read error: Connection reset by peer)
[15:28:36] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[15:29:30] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[15:32:54] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[15:39:12] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[15:39:35] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:11d3:bdb3:59a2:15aa) (Ping timeout: 252 seconds)
[15:39:59] *** Joins: OlCe` (~user@amontsouris-654-1-37-13.w92-151.abo.wanadoo.fr)
[15:43:17] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 240 seconds)
[15:53:15] *** Quits: mmk2410 (~mmk2410@user/mmk2410) (Quit: ZNC - https://znc.in)
[15:53:31] *** Joins: mmk2410 (~mmk2410@user/mmk2410)
[15:54:15] *** Joins: samps (~samps@179.225.196.215)
[15:57:30] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[16:07:23] *** Joins: foxfromabyss (~foxfromab@2a01:c23:6124:2b00:d8ee:10cc:592c:4322)
[16:17:32] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[16:18:11] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[16:18:58] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:23:20] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[16:25:26] *** Joins: Algernon69 (~Algernon6@88.124.69.179)
[16:25:27] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[16:26:44] *** Joins: knobo (~knobo@cCF845BC1.dhcp.as2116.net)
[16:30:06] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10fe:c92d:2c6e:e62b:2856:ee9e)
[16:33:32] *** Quits: shozo (~user@178.74.52.55) (Remote host closed the connection)
[16:33:49] *** Quits: Algernon69 (~Algernon6@88.124.69.179) (Ping timeout: 240 seconds)
[16:36:02] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[16:37:30] *** Joins: shozo (~user@178.74.52.55)
[16:42:16] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 250 seconds)
[16:44:08] *** Joins: artchad (~user@public-gprs225103.centertel.pl)
[16:47:44] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[16:48:02] *** Joins: morganw (~user@80.225.24.132)
[16:53:57] *** Joins: splatt990 (4b25e29db1@198.108.77.17)
[16:55:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[16:56:29] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[16:58:08] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:07:43] <Demosthenex> anyone seen a simple utility to output lists to yaml, so i can avoid editing yaml ? =]
[17:11:41] <phoe> you mean something to generate YAML from Lisp data?
[17:11:51] <phoe> (ql:quickload :cl-yaml) maybe
[17:17:09] <flip214> with TRIVIA, how would I match (A B C) and (A C)? Can I specify a nothing-pattern in an OR, like (LIST 'A (OR 'B <nothing>) 'C)?
[17:17:22] <Demosthenex> yeah, i'm looking at cl=yaml. just felt like i was reinventing the wheel
[17:17:47] *** Quits: shozo (~user@178.74.52.55) (Remote host closed the connection)
[17:17:51] <Demosthenex> flip214: i had the impression you couldn't chain tests in trivia because it was macros, not functions.
[17:18:13] <flip214> Or would I need something like (OR (CONS 'A (CONS 'B #1= (CONS C NIL))) (CONS 'A #1#))?
[17:18:50] <flip214> the actual example is a a bit more involved, so I'd like to share the part after the optional thing somehow
[17:20:02] <flip214> well, SATISFIES might be another idea, though not actually better - I wanted to avoid all that CAR CDR EQ stuff
[17:22:22] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:23:17] <Demosthenex> yeah, i've been tinkering with trivia to use to enforce grammar testing of records, and field extraction. and it appears there is no skip, optional, or wildcard that i can find
[17:24:59] <flip214> Demosthenex: thanks
[17:28:00] *** Quits: foxfromabyss (~foxfromab@2a01:c23:6124:2b00:d8ee:10cc:592c:4322) (Quit: Client closed)
[17:31:32] *** Joins: Bike (~Glossina@71.69.170.70)
[17:34:19] *** Quits: OlCe` (~user@amontsouris-654-1-37-13.w92-151.abo.wanadoo.fr) (Remote host closed the connection)
[17:34:37] *** Joins: foxfromabyss (~foxfromab@2a01:c23:6124:2b00:d8ee:10cc:592c:4322)
[17:39:00] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[17:39:31] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[17:39:38] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Remote host closed the connection)
[17:49:25] *** Joins: cage (~cage@dynamic-adsl-84-221-50-16.clienti.tiscali.it)
[17:52:18] *** Quits: Major_Biscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 260 seconds)
[17:58:25] *** Joins: shozo (~user@178.74.52.55)
[18:02:43] <phantomics> For Europeans and American early risers: in an hour and a half (at 14:00 GMT) I will be presenting the April compiler to the British APL Association. You can watch it at https://zoom.us/j/858532665 with the passcode 391680
[18:02:54] <Demosthenex> awesome!
[18:03:06] *** Parts: nij- (~jin@2001-48F8-9021-806-0-0-0-6F8B-dynamic.midco.net) (#commonlisp)
[18:03:10] <phantomics> This is a presentation for APL users, so will come from a different perspective than my presentation to the CL users at LispNYC
[18:03:28] <phoe> phantomics: please post a link to the recording later
[18:03:51] <phoe> I have a conflicting chore :(
[18:04:36] <phantomics> Ok, I'll be recording this one myself just like the LispNYC talk
[18:04:46] <phoe> thanks!
[18:06:03] *** Joins: OlCe (~user@amontsouris-654-1-37-13.w92-151.abo.wanadoo.fr)
[18:06:04] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Read error: Connection reset by peer)
[18:07:51] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[18:09:02] <phantomics> Correction: that's 16:00 GMT
[18:23:41] *** Joins: jeosol (~jeosol@user/jeosol)
[18:27:13] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[18:31:04] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Read error: Connection reset by peer)
[18:32:46] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[18:33:40] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[18:38:55] *** Joins: s-liao (~s-liao@101.86.96.21)
[18:40:38] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:41:52] *** Quits: samps (~samps@179.225.196.215) (Ping timeout: 250 seconds)
[18:44:51] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:46:23] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Read error: Connection reset by peer)
[18:46:49] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[18:49:14] *** Quits: OlCe (~user@amontsouris-654-1-37-13.w92-151.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[18:49:30] *** Joins: Major_Biscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[19:05:13] *** Joins: _73 (~user@pool-96-233-64-53.bstnma.fios.verizon.net)
[19:08:54] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[19:10:27] *** Parts: _73 (~user@pool-96-233-64-53.bstnma.fios.verizon.net) (ERC 5.4 (IRC client for GNU Emacs 28.0.90))
[19:21:43] *** Joins: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de)
[19:33:51] *** Joins: OlCe (~user@amontsouris-654-1-37-13.w92-151.abo.wanadoo.fr)
[19:35:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[19:40:03] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[19:41:52] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[19:47:38] *** Quits: morganw (~user@80.225.24.132) (Remote host closed the connection)
[19:47:49] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 240 seconds)
[19:48:17] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:50:07] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10fe:c92d:2c6e:e62b:2856:ee9e) (Remote host closed the connection)
[19:50:24] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10fe:c92d:2c6e:e62b:2856:ee9e)
[19:54:19] *** Quits: cosimone (~user@93-44-184-251.ip98.fastwebnet.it) (Remote host closed the connection)
[19:54:47] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[19:54:54] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[19:54:57] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[19:56:35] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:00:17] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 252 seconds)
[20:06:20] *** Joins: treflip (~user@user/treflip)
[20:08:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[20:10:54] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:12:46] <Josh_2> I have never used APL but I have to say April is very impressive
[20:15:16] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[20:19:17] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 240 seconds)
[20:23:08] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[20:26:47] *** Joins: samps (~samps@179.225.196.215)
[20:31:03] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[20:32:19] *** Joins: jeffrey (~jeffrey@217-120-53-119.cable.dynamic.v4.ziggo.nl)
[20:37:31] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:54bc:3778:6db0:347c) (Quit: My MacBook has gone to sleep. ZZZzzzâ¦)
[20:37:37] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 268 seconds)
[20:39:14] *** Quits: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de) (Quit: Leaving)
[20:40:03] *** Joins: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de)
[20:43:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[20:44:10] *** Quits: kevingal (~quassel@2001:770:c0:401:dd75:adc5:c248:9cdf) (Remote host closed the connection)
[20:46:19] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:48:50] *** Quits: Major_Biscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 250 seconds)
[20:52:01] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[20:54:20] *** Joins: ldb (ldbeth@user/ldb)
[20:57:48] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[20:59:32] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[20:59:34] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:00:20] <lisp123> Is there a reason why a compilation unit stops at a file?
[21:00:26] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[21:00:39] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[21:00:51] <ldb> lisp123: have you checked out ASDF?
[21:01:23] <lisp123> ldb: Well, if a comp unit could be multi file, it would simplify ASDF
[21:02:26] <beach> clhs with-compilation-unit
[21:02:27] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/m_w_comp.htm
[21:02:50] <lisp123> beach: Thanks! Problem Solved
[21:03:43] <lisp123> Interesting that I haven't seen it used much (maybe I missing it)? ASDF likes to get people to specify the dependencies between files or to use the :SERIAL T option
[21:04:53] <Bike> you still need that stuff because being in the same compilation unit isn't always enough. most obvious example is that macros need to be defined before they are used in code that's being compiled.
[21:04:53] <Colleen> Bike: scymtym said 4 hours, 29 minutes ago: the "Minor fixes" pull request for Cleavir is in preparation for the BIR visualizer improvements
[21:07:52] <lisp123> Bike: Thanks, yes that is true. Although I would tend to be careful around Macros and more liberal around functions (in terms of placing) for that reason
[21:08:14] <Bike> i mean. yes. specifying dependencies between files is part of being careful.
[21:10:18] <Josh_2> phantomics: Nice talk thanks. Shame that just as you answered my questions I had to leave :(
[21:10:49] <lisp123> Yeah. I am just on my anti-ASDF phase for now, which I will come around to in due course once my projects become more complex :)
[21:10:58] <Josh_2> It would be nice to have heard a bit more about how you implemented it, but thats because I am a lisper but you were talking to APL users
[21:11:57] <lisp123> The automatic finding of files in ASDF is very convenient, but IMO is the root of quite a few of the problems (e.g. versioning)
[21:12:33] *** Joins: Guest6628 (~Guest66@213.194.153.233)
[21:18:24] *** Quits: ldb (ldbeth@user/ldb) (Quit: leaving)
[21:23:10] <Guest6628> why are there two common lisp websites? https://lisp-lang.org/ and https://common-lisp.net/
[21:23:27] <lisp123> Unrelated if I understand correctly
[21:23:34] <phantomics> Josh_2, have you seen my previous presentation? https://news.ycombinator.com/item?id=24434717 (video linked here, more discussion in the comments)
[21:23:37] <lisp123> The latter is the main one
[21:23:42] <phantomics> Thanks for watching
[21:23:42] *** Joins: Brucio-92 (~Brucio-92@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[21:24:14] <Guest6628> lisp123 ty
[21:24:23] <Josh_2> phantomics: totally offtopic but have you used swiper/marginalia in emacs?
[21:24:40] <phantomics> No, haven't
[21:25:00] <beach> Guest6628: Nobody controls the number of Common Lisp web sites there can be, so there are probably many more.
[21:26:07] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Read error: Connection reset by peer)
[21:26:29] <beach> Guest6628: The last one is run by the Common Lisp Foundation, but again, anyone can create a Common Lisp foundation, just not another one in the Netherlands.
[21:26:48] <Bike> chaos reigns.
[21:26:49] <moon-child> trademarked there?
[21:27:47] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[21:27:57] *** Quits: shozo (~user@178.74.52.55) (Remote host closed the connection)
[21:28:04] <Josh_2> phantomics: using lisp to generate APL which is then processed by lisp :P
[21:28:15] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10f4:5ff0:2c6e:e62b:2856:ee9e)
[21:28:42] <Guest6628> beach so, should i follow the CLFoundation one? or are there better references?
[21:29:11] <beach> "follow"?
[21:29:18] <beach> Guest6628: For what purpose?
[21:30:31] <Guest6628> by follow i mean to use their guidelines
[21:31:11] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10fe:c92d:2c6e:e62b:2856:ee9e) (Ping timeout: 245 seconds)
[21:31:11] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Read error: Connection reset by peer)
[21:31:12] <phantomics> Josh_2: haven't done much APL code generation with Lisp, could be an interesting way to test
[21:31:19] <Guest6628> idk the purpose, just see what it can offer me
[21:32:33] <beach> Guest6628: Guidelines for what?  You mean style guides for coding?
[21:32:51] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[21:34:08] <beach> Guest6628: I think you may be overthinking this issue.  Both sites contain information about Common Lisp.  I see no immediate conflicting information there, but I haven't looked too hard.
[21:34:13] <Guest6628> guidelines for learning the language: the getting started, the documentation, the resources...
[21:34:16] *** Quits: pillton (~user@14-203-184-248.tpgi.com.au) (Ping timeout: 260 seconds)
[21:34:48] <lisp123> Guest6628: If you are any experienced programmer. read Practical Common Lisp
[21:35:05] <beach> Yes, read a good book.  That's a reasonable one.
[21:35:06] <lisp123> If you are a beginner, read A Gentle Introduction to Symbolic Computing
[21:35:07] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Read error: Connection reset by peer)
[21:35:17] <etimmons> lisp123: ASDF performs its plan within the body of WITH-COMPILATION-UNIT
[21:35:39] <etimmons> lisp123: Also what do you mean "automatic finding of files"?
[21:35:54] *** Quits: foxfromabyss (~foxfromab@2a01:c23:6124:2b00:d8ee:10cc:592c:4322) (Quit: Client closed)
[21:36:03] *** Joins: foxfromabyss (~foxfromab@2a01:c23:6124:2b00:d8ee:10cc:592c:4322)
[21:36:46] <Guest6628> lisp123 okay, i will. ty
[21:36:51] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[21:36:58] <foxfromabyss> do BT threads create real threads in terms of overhead? I just need to poll a socket every 15 seconds, and a whole thread dedicated to that seems like an overkill
[21:37:30] <beach> Are there threads that are not real?
[21:37:30] <lisp123> etimmons: ASDF will find / load the first system definition it finds if I understand correctly. If the user was forced to supply the path of the dependency, they could 'lock-in' a particular version. Of course most would favour the ease of use of ASDF, but that automatic mechanism does have these downsides
[21:38:13] *** Parts: Guest6628 (~Guest66@213.194.153.233) ()
[21:38:18] <Bike> foxfromabyss: if you mean operating system threads rather than green threads, that would be up to the lisp implementation, but i don't think any of them use green threads right now.
[21:38:19] <lisp123> (I guess for large projects with many dependencies that end up sharing dependencies, the ASDF way is much better)
[21:38:38] *** Quits: samps (~samps@179.225.196.215) (Ping timeout: 260 seconds)
[21:39:11] *** Joins: Oladon (~olad@98.43.81.226)
[21:39:51] <foxfromabyss> Bike i see, thanks. Could you point me in the direction of any more lightweight alternatives?
[21:40:04] <lisp123> etimmons: If there is a way to force ASDF to load a dependency at a particular filepath, that could be quite useful
[21:40:41] <lisp123> A lot of beginners also don't understand the ASDF scanning process and how they have to register folders to be searched
[21:40:53] <lisp123> This would overcome that
[21:40:58] <Bike> i don't know of any. i think people use thread pools, or maybe poll for that kind of thing
[21:42:18] <beach> lisp123: I don't think ASDF requires registration.  That's something that Quicklisp introduces if I remember correctly.
[21:42:19] <lisp123> And then I can deliver a repo with all the dependencies being references by relative pathnames
[21:42:37] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 240 seconds)
[21:42:53] <foxfromabyss> gotcha, thanks!
[21:43:30] <etimmons> lisp123: ASDF has several ways to configure where to look for dependencies. But none of them are meant to be used from an .asd file. That's good in terms of separation of concerns.
[21:43:47] <lisp123> beach: I think ASDF searches ~/common-lisp by default (and maybe some other folders), but otherwise you need to edit "~/.config/common-lisp/source-registry.conf.d/"
[21:44:13] <etimmons> If you want to deliver such a repo, tell your users to set CL_SOURCE_REGISTRY=/path/to/repo// and then all your systems (and only your systems) will be found
[21:45:30] <etimmons> Or have a helper script that calls ASDF:INITIALIZE-SOURCE-REGISTRY appropriately
[21:46:19] <beach> lisp123: Oh, i thought you meant QL:REGISTER-LOCAL-PROJECTS.  Sorry.
[21:46:47] <lisp123> etimmons: Would that override ASDF default search and interfere with the user's use of ASDF for other purposes?
[21:47:01] <lisp123> beach: No worries, most usually think directly in QL terms
[21:47:13] <Bike> ccl complains about x being unused in (loop for (x . y) in list do (print y)). is there some way to pacify it? while keeping the destructuring, if possible
[21:48:35] <Alfr> lisp123, place :inherit-configuration conveniently.
[21:48:35] <scymtym> LOOP treats NIL (or ()) as ignored instead of an empty-list sub-pattern if i recall correctly
[21:49:48] <Bike> ohh yeah i see, buried in 6.1.1.7. wasn't sure if that was standard or what
[21:50:13] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[21:50:59] *** Quits: treflip (~user@user/treflip) (Quit: good night!)
[21:51:29] <Bike> Thanks
[21:52:00] <etimmons> lisp123: Alfr's got it.
[21:54:50] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[21:57:09] <lisp123> etimmons & Alfr: Thanks, I did a quick search and didn't find any quick explanation on it. I'll take your word for it of course. But IMO I think if you can make the :depends-on clause to have an option to specify the exact path of the system, it would be much more natural to read and follow
[21:58:34] <lisp123> Versioning wouldn't be a problem then, and having filepaths in the ASD would be much more readable for many IMHO
[22:02:48] <etimmons> lisp123: That would introduce a lot more problems
[22:02:51] <Josh_2> foxfromabyss: the overhead for starting a thread is tiny
[22:03:09] <Josh_2> but you can just have a single thread that waits every 15 seconds and then checks and stores the result somewhere, that way you dont have the overhead
[22:03:28] <etimmons> First, paths are likely to not be portable between different computers
[22:04:08] <etimmons> Second, what happens if A loads B from foo/b.asd and C loads B from bar/b.asd?
[22:04:42] <etimmons> There's been discussion here over the past few days how we can't load multiple versions of the same system (yet, at least)
[22:06:05] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Read error: Connection reset by peer)
[22:06:08] <lisp123> etimmons: On (1) - I see, my understanding was you could have a portability layer (UIOP?) and translate between filepaths on different computers without too much work
[22:07:41] <EdLangley[m]> Depending by path is a bad idea`
[22:07:45] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[22:08:18] <EdLangley[m]> It's a great way to get build specs that have /home/foo/... in them
[22:08:19] <EdLangley[m]> And only work in one place
[22:08:19] <lisp123> (2) - I thought about that earlier, and its an issue which ASDF's current approach solves best. But you could leave it to the writer of the main system (e.g. me in this case), to go through each of the dependencies, and ensure they are compatible and specify the paths to the common dependency
[22:08:56] <EdLangley[m]> lisp123: I think you're overthinking this, "version compatibility" is not a huge issue in CL at the moment
[22:09:15] <EdLangley[m]> Occasionally an update breaks your code a tiny bit and you figure it out
[22:09:28] <EdLangley[m]> But, it's nothing like what you find in other languages, IME
[22:09:49] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[22:09:52] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[22:10:33] <EdLangley[m]> And my experience is that other languages have a huge problem of getting people used to the idea of not updating
[22:11:01] <EdLangley[m]> Which makes everyone fear the upgrades, because they turn into huge projects
[22:11:17] <EdLangley[m]> If you're always upgrading all the time, the work is significantly more manageable.
[22:11:39] <lisp123> EdLangley[m]: Actually it doesn't affect me much. But something does sit off with me on not being able to specify a path to a particular dependency. Like, reading (load "/new-sass-idea/make-money.lisp") is a natural way of thinking about loading files, but with ASDF, I have to learn about how the process works
[22:11:58] <lisp123> And I think its fair to say many don't understand it that well
[22:12:09] <EdLangley[m]> You shouldn't think about "loading files"
[22:12:16] <EdLangley[m]> Files are an implementation detail of systems
[22:12:20] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[22:12:31] <etimmons> lisp123: But what if your "main" system uses a system that thinks _it_ is the "main" system and defines paths as well?
[22:12:53] <EdLangley[m]> For example, there's nothing preventing someone from writing an ASDF component that loads code from an SQLite database
[22:13:24] <etimmons> IMO there should be no distinction between a "main" system and non-main system. And that's why it's important configuration is decoupled from the system definition
[22:14:11] <EdLangley[m]> The thing I like about ASDF is that it makes systems first-class
[22:14:12] *** Quits: knobo (~knobo@cCF845BC1.dhcp.as2116.net) (Quit: Client closed)
[22:14:15] <lisp123> EdLangley[m]: Yes, but that's getting too abstract :P Lisp is just an implementation detail of my thoughts ;) Like most people *DO* think in terms of files
[22:14:34] <EdLangley[m]> Yeah, and IMO that's a problem with modern dev environments :)
[22:14:57] <EdLangley[m]> Files force you to have one preferred code structure
[22:15:01] <EdLangley[m]> Which doesn't make sense
[22:15:31] <EdLangley[m]> In different contexts, different structures make sense
[22:15:45] <etimmons> the short story is that you should really only care about the exact versions of your dependencies when you're delivering something like an application. In that case, you deliver an ASDF config that finds the exact systems you want
[22:15:55] <EdLangley[m]> +1
[22:16:12] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Read error: Connection reset by peer)
[22:16:22] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[22:16:24] *** Joins: ldb (~user@user/ldb)
[22:16:26] <etimmons> Otherwise, let developers control exactly which systems they use
[22:16:59] <etimmons> Also makes it easier for a dev to hack on one of your deps without needing to modify your .asd file to point it to a different place on their filesystem, etc.
[22:17:05] <lisp123> etimmons: I didn't think of "main" systems at all, perhaps I missed it, but is it an issue if a system definition called by another system definition defines its own paths?
[22:17:25] <lisp123> Each is loaded as a unit
[22:17:28] <etimmons> Yes, if there are conflicting paths
[22:17:38] <lisp123> to the same dependency?
[22:17:40] <Josh_2> etimmons: does quicklisp support versioning? Wouldn't that be a royal PITA for Xach
[22:17:51] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[22:18:28] <etimmons> Josh_2: no, versioning doesn't fit into QL
[22:18:59] <etimmons> other than the data at which the snapshot was taken
[22:19:23] <etimmons> And you _can_ mix and match between different versions of the QL dist if you know what you're doing
[22:19:27] <lisp123> etimmons: I don't deny the 'automatic' approach of ASDF makes using systems much more convenient. But I disagree that you should only care about dependencies if you are delivering an application, some of us will want control from the first step in the process
[22:19:38] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[22:20:30] <lisp123> I guess the crux is the though of whether files are an implementation detail or not
[22:20:59] <etimmons> lisp123: I understand, but the reality is that current CL implementations make that basically impossible.
[22:21:09] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Read error: Connection reset by peer)
[22:21:25] <etimmons> because as soon as your and one of your deps disagree on where a shared dep is loaded from you've got problems
[22:21:33] <etimmons> * you
[22:21:47] <lisp123> Yes
[22:22:53] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[22:22:59] <etimmons> And sorry, there are more cases where explicitly pining deps is useful
[22:23:20] <etimmons> One I use quite frequently is pinning the development environment of my libraries
[22:23:44] <etimmons> So I know I, my collaborators, and CI are running in the same environment
[22:24:08] <lisp123> Yes
[22:24:09] <Demosthenex> hrm, i'm trying to figure out how to make trivia:match use my object accessor when it encounters a keyword (ie: compare the keyword to the obj)
[22:24:10] <etimmons> But that doesn't leak to users of my library and is kept up to date on a semi-regular basis by automated CI jobs
[22:26:03] <lisp123> I think the larger the system gets, the better ASDF gets
[22:26:03] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Read error: Connection reset by peer)
[22:26:52] <lisp123> And the cost of it is forcing small-time users to learn a bit of complexity
[22:27:49] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[22:28:59] <lisp123> I do think the lack of filepaths adds to quite a bit of that initial complexity. But I guess you may not want to enable practices that could cause some issues when systems have many dependencies (as just discussed)
[22:29:45] <White_Flame> foxfromabyss: if you don't want to use OS threads (which I personally don't see as problematic for your use case), you could also use timers, if your implementation supports them.  They can interrupt your code every 15 seconds and do something
[22:29:46] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10f4:5ff0:2c6e:e62b:2856:ee9e) (Read error: Connection reset by peer)
[22:30:03] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10f4:5ff0:2c6e:e62b:2856:ee9e)
[22:39:16] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[22:41:16] <foxfromabyss> thanks Josh_2 White_Flame !
[22:41:17] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Read error: Connection reset by peer)
[22:42:37] *** Quits: Brucio-92 (~Brucio-92@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 240 seconds)
[22:42:51] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[22:43:46] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10f4:5ff0:2c6e:e62b:2856:ee9e) (Read error: Network is unreachable)
[22:44:42] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 256 seconds)
[22:45:45] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Read error: Connection reset by peer)
[22:47:15] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[22:51:15] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Read error: Connection reset by peer)
[22:51:58] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[22:52:47] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[22:56:02] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Read error: Connection reset by peer)
[22:56:23] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[22:57:48] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[23:00:19] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Read error: Connection reset by peer)
[23:00:45] *** Quits: jeffrey (~jeffrey@217-120-53-119.cable.dynamic.v4.ziggo.nl) (Ping timeout: 250 seconds)
[23:00:48] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[23:01:00] *** Joins: jeffrey (~jeffrey@217-120-53-119.cable.dynamic.v4.ziggo.nl)
[23:01:55] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[23:02:53] *** Quits: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net) (Ping timeout: 252 seconds)
[23:06:08] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Read error: Connection reset by peer)
[23:07:47] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[23:09:23] *** Joins: alvaro121 (~aa@201.230.126.66)
[23:12:04] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Read error: Connection reset by peer)
[23:12:52] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[23:14:41] *** Joins: karmichammer (~patrick@ip68-9-95-224.ri.ri.cox.net)
[23:15:36] *** Quits: ldb (~user@user/ldb) (Quit: ERC (IRC client for Emacs 27.2))
[23:17:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[23:19:39] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:22:40] *** Quits: jeffrey (~jeffrey@217-120-53-119.cable.dynamic.v4.ziggo.nl) (Ping timeout: 256 seconds)
[23:24:56] <Josh_2> Who maintains the cliki?
[23:25:27] <phoe> all of us
[23:25:44] <mfiano> Whoever is logged in?
[23:28:01] <Josh_2> No I mean, who hosts the website
[23:28:48] <Josh_2> vsedach ?
[23:28:59] <mfiano> Yes
[23:29:17] <mfiano> Likely on the CLF infrastructure
[23:29:30] <phoe> ^
[23:31:34] *** Quits: foxfromabyss (~foxfromab@2a01:c23:6124:2b00:d8ee:10cc:592c:4322) (Quit: Client closed)
[23:35:03] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[23:35:56] *** Quits: rogersm (~rogersm@90.166.180.250) (Quit: Leaving...)
[23:36:36] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 245 seconds)
[23:37:14] *** Joins: alvaro121_ (~aa@201.230.126.66)
[23:38:00] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Read error: Connection reset by peer)
[23:39:34] *** Quits: alvaro121 (~aa@201.230.126.66) (Ping timeout: 250 seconds)
[23:40:04] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[23:45:51] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-6F8B-dynamic.midco.net)
[23:46:21] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Read error: Connection reset by peer)
[23:46:51] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[23:51:36] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Quit: WeeChat 3.4)
[23:59:27] *** Quits: jmpeax (~jmpeax@host-68-169-157-168.VALOLT2.epbfi.com) (Quit: leaving)
