[00:01:19] *** Joins: ttree (~ttree0@c-73-97-116-42.hsd1.wa.comcast.net)
[01:35:11] *** Joins: jaix (~jaix@user/jaix)
[01:44:47] *** Quits: dreamon (~dreamon@pd9503526.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[02:15:01] *** Quits: dthpulse (~quassel@podciarou.sk) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:16:09] *** Joins: dthpulse (~quassel@podciarou.sk)
[02:16:32] *** Quits: MBrod208 (MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net) (Ping timeout: 272 seconds)
[02:17:56] *** Quits: Habbie (peter@lorentz.7bits.nl) (Ping timeout: 250 seconds)
[02:20:13] *** Quits: Me-me (~me-me@user/me-me) (Ping timeout: 256 seconds)
[02:20:13] *** Quits: Chunky_Ks (~chunky@icculus.org) (Ping timeout: 256 seconds)
[02:20:47] *** Quits: Church (~aleph@68.161.207.188) (Ping timeout: 256 seconds)
[02:20:47] *** Quits: CoJaBo (~aztec@user/CoJaBo) (Ping timeout: 256 seconds)
[02:21:36] *** Joins: Chunky_Ks (~chunky@icculus.org)
[02:21:39] *** Joins: ttree_ (~ttree0@c-73-97-116-42.hsd1.wa.comcast.net)
[02:22:19] *** Joins: CoJaBo (~aztec@user/CoJaBo)
[02:25:24] *** Quits: ttree (~ttree0@c-73-97-116-42.hsd1.wa.comcast.net) (Ping timeout: 272 seconds)
[02:34:46] *** Joins: Church (~aleph@68.161.207.188)
[02:49:04] *** Quits: k8yun (~k8yun@user/k8yun) (Read error: Connection reset by peer)
[02:49:34] *** Joins: k8yun (~k8yun@user/k8yun)
[02:53:34] *** Quits: oriba (~oriba@dynamic-078-055-220-151.78.55.pool.telefonica.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:53:55] *** Quits: k8yun (~k8yun@user/k8yun) (Ping timeout: 256 seconds)
[03:00:22] *** Joins: ferdna (~ferdna@user/ferdna)
[03:19:07] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[03:21:20] *** Joins: Me-me (~me-me@tunnel690570-pt.tunnel.tserv12.mia1.ipv6.he.net)
[03:26:18] *** Joins: ferdna (~ferdna@user/ferdna)
[03:29:33] *** Joins: Joanna (uid57472@id-57472.lymington.irccloud.com)
[03:37:25] *** Quits: AmR (~AmREiSa@156.199.192.24) (Ping timeout: 250 seconds)
[04:10:45] *** Joins: af (~af@awalgarg.me)
[05:05:02] *** Quits: ttree_ (~ttree0@c-73-97-116-42.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[05:07:17] *** Joins: ttree (~ttree0@c-73-97-116-42.hsd1.wa.comcast.net)
[05:13:11] *** Quits: Me-me (~me-me@tunnel690570-pt.tunnel.tserv12.mia1.ipv6.he.net) (Changing host)
[05:13:11] *** Joins: Me-me (~me-me@user/me-me)
[05:26:19] *** Quits: jaix (~jaix@user/jaix) (Quit: Leaving)
[05:55:31] <Jong> anyone here benched sqlite select versus numpy.load?
[06:17:01] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[07:05:22] <pekster> The latter isn't a relational database, so that seems like an odd thing to be comparing on broad terms.
[07:51:50] *** Joins: k8yun (~k8yun@user/k8yun)
[08:21:45] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[08:27:21] *** Quits: Joanna (uid57472@id-57472.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[08:51:47] *** Quits: Xgc (~Xgc@user/xgc) (Ping timeout: 256 seconds)
[08:55:07] *** Joins: Xgc (~Xgc@user/xgc)
[09:15:50] *** Quits: ttree (~ttree0@c-73-97-116-42.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[10:25:30] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[10:28:20] *** Quits: bob_x1 (~bob_x@gateway/tor-sasl/bobx1/x-26457072) (Remote host closed the connection)
[10:28:41] *** Joins: bob_x1 (~bob_x@gateway/tor-sasl/bobx1/x-26457072)
[10:41:21] *** Joins: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk)
[10:41:49] *** Quits: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk) (Remote host closed the connection)
[10:45:10] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Ping timeout: 260 seconds)
[11:12:03] *** Joins: dreamon (~dreamon@ppp-88-217-74-38.dynamic.mnet-online.de)
[11:12:45] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[11:20:34] *** Quits: Jong (~Jong@163.114.132.1) (Ping timeout: 272 seconds)
[11:21:11] *** Joins: Joanna (uid57472@id-57472.lymington.irccloud.com)
[11:37:56] *** Joins: Jong (~Jong@2620:10d:c090:400::5:f783)
[11:46:13] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[11:50:17] <Jong> anyone here benched sqlite select of blobs versus numpy.load? They're comparable because numpy arrays can be stored in blobs using byte arrays
[11:56:10] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Read error: Connection reset by peer)
[12:08:34] *** Joins: danshearer1 (~dansheare@host81-136-30-41.range81-136.btcentralplus.com)
[12:49:18] *** Quits: toruvinn (~toruvinn@87-205-85-187.adsl.inetia.pl) (Ping timeout: 250 seconds)
[12:52:26] *** Quits: dreinull30 (~dreinull@2a01:4f8:1c1c:8981::1) (Quit: The Lounge - https://thelounge.chat)
[12:53:45] *** Joins: dreinull30 (~dreinull@2a01:4f8:1c1c:8981::1)
[12:57:02] *** Joins: Habbie (peter@lorentz.7bits.nl)
[13:29:26] *** Quits: af (~af@awalgarg.me) (Ping timeout: 260 seconds)
[13:41:47] <pekster> No one here is likely to be able to answer that. These tools are not at all doing the same thing.
[13:42:23] <Habbie> can you repeat the question for my curiosity?
[13:43:21] <pekster> Habbie: Jong has asked twice now about benchmarks between sqlite and numpy.load, most recently asking: < Jong> anyone here benched sqlite select of blobs versus numpy.load? They're comparable because numpy arrays can be stored in blobs using byte arrays
[13:43:34] <Habbie> ah
[13:43:36] <pekster> But, storing a Python pickled object storage "in" SQLite sounds downright silly to me.
[13:43:44] <Habbie> the easier answer is that everybody should benchmark their own usecases
[13:43:50] <Habbie> because minor details matter
[13:44:10] <Jong> pekster  in blobs in sqlite
[13:44:18] <Jong> keyword blob
[13:44:19] <pekster> Python pickles (which are largely abstract storage) is really not the same thing as a relational database, but sure, if SQLite is able to do the same thing in your use-case you could evaluate it.
[13:45:02] <pekster> The real question is if you want or need the complexity of an RDBMS, but you certainly "can" use SQLite as a glorified key/value store. It may not be a great tool for the task, but you haven't said what your task is.
[13:46:41] <pekster> A summary of what you're doing may get you better answers.
[13:47:45] <Jong> currently I have machiine learning datasets stored in npy files. It takes a long time to read. I could turn each sample into a blob and store in sqlite. I'm going to benchmark this
[13:47:52] <Jong> pekster  sqlite is 50% faster than the file system
[13:47:55] <Jong> npy uses the file system
[13:48:30] <Jong> 35% faster I mean: https://www.sqlite.org/fasterthanfs.html
[13:48:33] <pekster> Ultimately so does SQLite (provided you're not using sqlite in memory-only mode with the :memory: database)
[13:50:17] <pekster> Give it a try and see then? You might want to consider if the relational tools a database engine such as SQLite could solve other issues such as identifying a smaller set of data the application needs.
[13:50:58] <pekster> You you literally have so much data that you're stuck in disk I/O for a large file, the link you cited doesn't really apply.
[13:52:33] <pekster> On the other hand, if you're dealing with lots of very small files which you can index somehow and use a relational database to query, SQLite might help. You'd have to write some test-cases and see if your data is at the sweet-spot of size where that may actually matter.
[13:59:00] <pekster> Jong: What is the data you're working with exactly? You mentioned arrays, but arrays of what, and how many members would one of these datasets you need to load include?
[14:02:31] *** Joins: af (~af@awalgarg.me)
[14:11:33] <pekster> Regardless, note that the page you linked was specific to individual files between 8 & 12 kB in size, and had an assumption of using the SQLite C-interface `sqlite3_blob_read()` access method. That performance improvement doesn't apply to the general case.
[14:12:50] *** Joins: toruvinn (~toruvinn@87-205-85-187.adsl.inetia.pl)
[15:50:01] *** Quits: af (~af@awalgarg.me) (Ping timeout: 256 seconds)
[15:56:08] *** Quits: nickodd (~nickodd@user/nickodd) (Remote host closed the connection)
[16:26:26] <Jong> pekster  the data is 1tb of data samples that are 2056*36*4bytes per training sample.  sqlite would be good for reading samples instead numpy.load loading the entire thing taking so long. I tried numpy's memory mapping but it's still slow. I don't see any difference using it
[16:32:20] <pekster> Depends a bit on what you're reading, but mmap solutions still ultimately need to read the data from disk, and if you need a bunch of random-access of tiny files (or worse: segments of them) that could well slow things down.
[16:36:52] <pekster> If you explore SQLite, consider how you want to store the data in a way that you can pull out just the bits the application needs. That'd usually be a primary key you can use as a kind of index to get the sample data you want or some other indexed column that can do the same. A well-designed schema can make all the difference with database performance.
[16:43:34] *** Joins: af (~af@awalgarg.me)
[16:54:51] *** Parts: colo_work (~colo_work@212095007235.public.telering.at) (Leaving)
[17:18:37] <Jong> " pull out just the bits the application needs" <-- that's the idea behind storing each sample as a separate contiguous blob
[17:29:22] *** Joins: jringstad__ (~Amadiro@191.96.180.90)
[17:29:24] *** Quits: jringstad__ (~Amadiro@191.96.180.90) (Remote host closed the connection)
[17:29:43] *** Joins: jringstad__ (~Amadiro@191.96.180.90)
[17:30:47] *** Quits: jringstad__ (~Amadiro@191.96.180.90) (Remote host closed the connection)
[17:31:10] *** Joins: nickodd (~nickodd@user/nickodd)
[17:32:20] *** Quits: Amadiro (~Amadiro@31.11.55.179) (Ping timeout: 272 seconds)
[17:33:00] *** Joins: Amadiro (~Amadiro@191.96.180.90)
[17:49:34] *** Quits: Joanna (uid57472@id-57472.lymington.irccloud.com) ()
[18:26:35] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[18:37:29] *** Joins: AmR (~AmREiSa@197.42.112.70)
[20:03:56] *** Quits: danshearer1 (~dansheare@host81-136-30-41.range81-136.btcentralplus.com) (Ping timeout: 250 seconds)
[20:18:36] *** Quits: dreamon (~dreamon@ppp-88-217-74-38.dynamic.mnet-online.de) (Ping timeout: 240 seconds)
[20:31:27] *** Parts: exarkun (~exarkun@user/exarkun) (WeeChat 3.3)
[20:36:45] *** Joins: toma (~RubbishPu@node-1w7jr9yhpl48aghvvyhn682j5.ipv6.telus.net)
[20:40:06] *** Joins: ttree (~ttree0@c-73-97-116-42.hsd1.wa.comcast.net)
[21:19:13] *** Joins: Joanna (uid57472@id-57472.lymington.irccloud.com)
[21:25:49] *** Joins: dreamon (~dreamon@pd9503c4b.dip0.t-ipconnect.de)
[21:51:05] *** Joins: k8yun (~k8yun@user/k8yun)
[23:34:31] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[23:37:46] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
