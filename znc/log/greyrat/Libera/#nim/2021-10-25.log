[00:00:28] <PMunch> Pyautogui, they all have slightly different purposes. But if you just need to use a small C library I can highly reccomend Futhark, then again I'm a bit biased :P
[00:02:47] *** Joins: [R] (~rs@genoce.org)
[00:04:02] *** Quits: PMunch (~PMunch@c01F28BC3.dhcp.as2116.net) (Quit: Leaving)
[00:16:26] *** Quits: Jjp137 (~Jjp137@2603-8000-2a01-3406-92fb-a6ff-fee2-6861.res6.spectrum.com) (Quit: Leaving)
[00:17:55] *** Joins: Jjp137 (~Jjp137@2603-8000-2a01-3406-92fb-a6ff-fee2-6861.res6.spectrum.com)
[00:35:36] <FromDiscord> <exelotl> I can't stand ligatures lol
[00:37:17] <FromDiscord> <exelotl> even joining "fi" is just really distracting to me
[00:58:38] <FromDiscord> <evoalg> I'm googling what a static variable is, static and means "eval at compile-time" ... why is that a good idea vs using non-static? Is there a simple example?
[01:00:56] <FromDiscord> <bsdooby> when should I use `echo` vs. `stdout.write`?
[01:01:16] <FromDiscord> <ynfle (ynfle)> echo adds a newline and flushs the output for you
[01:01:46] <FromDiscord> <ynfle (ynfle)> So for printing things to the terminal where you are going to use a newline at the end anyway, may as well use echo
[01:02:05] <FromDiscord> <ynfle (ynfle)> @evoalg what's the context?
[01:02:05] <FromDiscord> <bsdooby> so it is better in every regards (because flushing is most of the time wanted anyways)...
[01:02:39] <FromDiscord> <ynfle (ynfle)> Ya, unless you don't want a newline
[01:03:04] <FromDiscord> <bsdooby> thx
[01:03:54] <FromDiscord> <ynfle (ynfle)> \:thumbsup\:
[01:04:56] <FromDiscord> <evoalg> In reply to @ynfle (ynfle) "@evoalg what's the context?": I guess I only know what a local and global variable is (I don't know much) and I'm trying to figure about what it means when I see a type of "static int" instead of just "int" in nim code
[01:05:21] <FromDiscord> <tandy> how can i find where code is in nim? nimsuggest obviously doesnt work
[01:05:29] <FromDiscord> <tandy> i wanna know where cstrings are converted to strings using `$`
[01:08:01] <FromDiscord> <Elegantbeef> Nimsuggest should work, but it'll bring you to the dollars header
[01:08:04] <FromDiscord> <Elegantbeef> https://github.com/nim-lang/Nim/blob/version-1-6/lib/system/dollars.nim#L45
[01:08:15] <FromDiscord> <Elegantbeef> You now need to look in the compilers CstrToStr impl
[01:08:23] <FromDiscord> <ynfle (ynfle)> @evoalg static means known at compile time
[01:08:50] <FromDiscord> <ynfle (ynfle)> @tandy, vscode has a nim extension that really works
[01:09:07] <FromDiscord> <Elegantbeef> Saem's nim extension is best ime
[01:09:08] <FromDiscord> <tandy> huh really
[01:09:23] <FromDiscord> <tandy> yeah im using nimsaems extension
[01:09:25] <FromDiscord> <tandy> it doesnt work tho lol
[01:09:38] <FromDiscord> <evoalg> eg in the example demotomohiro posted above, what is "static int" used? What does it do? https://play.nim-lang.org/#ix=3CGD ... why is it good that it's known at compile time?
[01:09:43] <FromDiscord> <ynfle (ynfle)> Do you have nim configured correctly?
[01:10:07] <FromDiscord> <tandy> i believe so
[01:10:20] <FromDiscord> <Elegantbeef> Well in this case it needs to be known at compiler time since it's initing an array
[01:10:27] <FromDiscord> <ynfle (ynfle)> @evoalg Main reason is for array length which has to be at compile time and for macros which only operate at compile time
[01:10:30] <FromDiscord> <Elegantbeef> compile time\ ðŸ˜›
[01:10:46] <FromDiscord> <Elegantbeef> Generics cannot be instantiated at runtime, and arrays are generics in Nim
[01:10:50] <FromDiscord> <ynfle (ynfle)> Compiler standard time
[01:11:05] <FromDiscord> <Elegantbeef> So you need to tell the compiler it's a static so it knows the value at CT and generates the code accordingly
[01:11:26] <FromDiscord> <evoalg> oh ok thank you all!
[01:13:27] <FromDiscord> <tandy> thank you beefe
[01:17:04] <FromDiscord> <tandy> huh
[01:17:24] <FromDiscord> <tandy> cstrtostr yields no results when search the compiler folder
[01:17:35] <FromDiscord> <tandy> its only in here
[01:18:31] <FromDiscord> <tandy> https://github.com/nim-lang/Nim/blob/devel/compiler/magicsys.nim
[01:18:33] <FromDiscord> <tandy> i found this
[01:29:40] <FromDiscord> <evoalg> Is it reasonable to want std/strformat part of nim system (or whatever) so we can use it without having to import it? ... or is the idea not to make nim too bulky?  I'm only asking because in python I'm used to f"" without having to import anything.  I understand nim isn't trying to be python and there's probably good reasons for not having it available by default.
[01:30:19] <FromDiscord> <ynfle (ynfle)> What's wrong with importing it?
[01:51:59] <FromDiscord> <evoalg> I guess I have the the mindset that if I'm writing a quick simple script (that does nothing fancy) then I shouldn't have to import anything. That's not really the case with nim, but I guess that makes nim nice & lean (which is good)
[01:54:50] <FromDiscord> <Elegantbeef> The core team want to make the system module even smaller so imports are good
[01:56:07] <FromDiscord> <evoalg> oh ok! ... nice ... I'll stop trying to make nim the same as python in my brain hehe
[01:56:32] <FromDiscord> <Elegantbeef> They're very different aside from some syntax overlap
[02:55:56] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[03:02:04] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[03:03:58] *** Joins: Pyautogui (~Pyautogui@108-216-110-132.lightspeed.sndgca.sbcglobal.net)
[03:15:59] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[03:19:05] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[03:30:20] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[03:30:44] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[03:43:11] *** Quits: Pyautogui (~Pyautogui@108-216-110-132.lightspeed.sndgca.sbcglobal.net) (Quit: Connection closed)
[03:52:13] <FromDiscord> <demotomohiro> If you write a config file that sets `--import` compiler option, you might be able to use  modules specified by that option without writing import statement.
[03:52:54] <FromDiscord> <demotomohiro> https://nim-lang.org/docs/nimc.html
[04:02:05] <FromDiscord> <exelotl> sent a code paste, see https://play.nim-lang.org/#ix=3CK0
[04:03:47] <FromDiscord> <impbox [ftsf]> tbh i always get annoyed when I have to go and add `import std/strformat` but ahh well
[04:38:40] <FromDiscord> <evoalg> "include prelude" <-- exactly what I was after for quick & dirty testing while I'm learning - thank you!
[04:42:13] <nrds> <06Prestige99> On 1.4.8 I was able to this: https://play.nim-lang.org/#ix=3CKd but not on 1.6 - It's probably proper now, but is there a way I could get the same behavior without having to cast A to B? 
[04:42:49] <FromDiscord> <Elegantbeef> You'll have to cast, since that was a bug it worked
[04:42:56] <nrds> <06Prestige99> dang
[04:43:07] <FromDiscord> <Elegantbeef> One second have to see something
[04:46:36] <FromDiscord> <furyusss> sent a code paste, see https://play.nim-lang.org/#ix=3CKf
[04:47:09] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 244 seconds)
[04:52:10] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[04:53:27] <FromDiscord> <KimJongUnstoppable> does anyone know an easy way to get OS version using either the standard library or a package for nim? the best solution I found so far is using wmic but that's both hacky and likely to look suspect lol and even with wmic I have to parse the output which is a PITA
[04:54:51] <FromDiscord> <Elegantbeef> Getting os version is platform specific
[04:55:01] <FromDiscord> <KimJongUnstoppable> I can limit scope to windows for now
[04:55:04] <FromDiscord> <KimJongUnstoppable> if that helps
[04:55:16] <FromDiscord> <KimJongUnstoppable> I don't plan on dealing with macos or linux anytime soon tbh
[04:56:09] <FromDiscord> <Elegantbeef> Well doesnt help me since i dont know how to get version on that OS
[04:56:20] <FromDiscord> <KimJongUnstoppable> LOL
[04:56:27] <FromDiscord> <KimJongUnstoppable> I finally found a question you can't answer
[04:56:38] <nrds> <06Prestige99> is there nothing on https://nim-lang.org/docs/os.html about it?
[04:56:41] <FromDiscord> <Elegantbeef> Well i mean i can refer you to stackoverflow
[04:56:43] <FromDiscord> <KimJongUnstoppable> if I figure it out I'll report back and share
[04:57:04] <FromDiscord> <Elegantbeef> uname is the answer on posix ðŸ˜›
[04:57:18] <FromDiscord> <Elegantbeef> Sadly prestige i cannot get any of my onesize fit all solutions to work
[04:57:29] <nrds> <06Prestige99> ah, all good
[04:57:42] <nrds> <06Prestige99> was thinking maybe I could write a macro or something
[04:58:07] <FromDiscord> <Elegantbeef> I mean all you need to do is add one line https://play.nim-lang.org/#ix=3CKj
[04:58:14] <FromDiscord> <Elegantbeef> You can do it in a macro ofc
[05:02:51] <FromDiscord> <evoalg> sent a long message, see https://paste.rs/fwA
[05:03:31] <FromDiscord> <Elegantbeef> You cannot expect the name of a proc/macro to do anything without arguments or parenthesis
[05:03:50] <FromDiscord> <Elegantbeef> `echo` is just the symbol(unless it's a template, they have different semantics)
[05:04:21] <FromDiscord> <evoalg> makes sense, thank you
[05:09:29] <FromDiscord> <Elegantbeef> Prestige here's the macro solution https://play.nim-lang.org/#ix=3CKl
[05:09:48] <FromDiscord> <Elegantbeef> Not great since it injects a proc, but it's a solution
[05:14:33] <FromDiscord> <Professor Actual Factual> sent a code paste, see https://play.nim-lang.org/#ix=3CKp
[05:19:52] <nrds> <06Prestige99> Thanks beef :)
[05:21:26] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[05:22:09] <FromDiscord> <Elegantbeef> no problem
[05:25:57] <FromDiscord> <KimJongUnstoppable> is there a specific way to reference a space as a character constant? I tried '\s' which didn't work and ' ' is treated as void
[05:26:12] <FromDiscord> <impbox [ftsf]> `' '`
[05:26:58] <FromDiscord> <KimJongUnstoppable> sent a long message, see http://ix.io/3CKu
[05:27:08] <FromDiscord> <impbox [ftsf]> `" "` is not the same as `' '`
[05:27:27] <FromDiscord> <impbox [ftsf]> but that's no the reason for that error
[05:27:41] <FromDiscord> <KimJongUnstoppable> Got the same error with single quotes
[05:27:42] <FromDiscord> <impbox [ftsf]> removePrefix doesn't return a string
[05:28:02] <FromDiscord> <KimJongUnstoppable> OH. I need to call it and then echo the variable after
[05:28:03] <FromDiscord> <impbox [ftsf]> where does `removePrefix` come from?
[05:28:14] <FromDiscord> <KimJongUnstoppable> strutils. I just reread the example and I missed that the first time
[05:28:50] <FromDiscord> <impbox [ftsf]> yeah it takes a var string so it mutates the string you pass it but doesn't return a value
[05:28:57] <FromDiscord> <KimJongUnstoppable> sent a long message, see http://ix.io/3CKw
[05:29:25] <FromDiscord> <impbox [ftsf]> `"but expression 'removePrefix(winVersion, " ")' is of type: void"`â†µmeans it doesn't return a value so you can't pass it as an argument
[05:52:40] *** Quits: elph (uid286227@id-286227.lymington.irccloud.com) (Read error: Connection reset by peer)
[05:54:07] *** Joins: elph (uid286227@lymington.irccloud.com)
[06:04:34] <FromDiscord> <evoalg> I'm just trying to see in what other ways removePrefix can be done (by something else) (so that I can learn) ... if there is only one space in front of the string, this seems to work:â†µwinVersion = winVersion.strip(trailing=false)
[06:06:26] <FromDiscord> <impbox [ftsf]> winVersion = winVersion[1..^1]
[06:06:40] <FromDiscord> <impbox [ftsf]> if you know the first character will be a space
[06:06:46] <FromDiscord> <Elegantbeef> If there is only one space, though that copies the collection
[06:08:23] <FromDiscord> <Elegantbeef> Which i guess is probably what you want ðŸ˜€
[06:08:58] <FromDiscord> <evoalg> In reply to @Elegantbeef "If there is only": Are you saying to if it's possible to do it in-place then it's better because it's faster? ... or more memory efficient?
[06:10:29] <FromDiscord> <evoalg> oh I think I was misunderstanding again
[06:10:57] <FromDiscord> <Elegantbeef> Well doing `[1..^1]` will make a new string, where `removePrefix` will move the the elements by the number of characters that procede the data
[06:11:19] <FromDiscord> <Elegantbeef> So the `removePrefix` doesnt have another allocation
[06:12:37] *** Joins: rockcavera (~rc@192.12.112.195)
[06:12:37] *** Quits: rockcavera (~rc@192.12.112.195) (Changing host)
[06:12:37] *** Joins: rockcavera (~rc@user/rockcavera)
[06:12:46] <FromDiscord> <evoalg> gotcha ok thanks
[06:16:44] <FromDiscord> <evoalg> import re; winVersion = winVersion.replace(re"^ ")â†µ.... so many ways
[06:18:41] <FromDiscord> <Elegantbeef> Regex is the worst
[06:18:49] <FromDiscord> <Elegantbeef> there is also `strscans`
[06:19:27] <FromDiscord> <evoalg> oh ok! ... re is the worst in terms of speed? readability?
[06:21:46] <FromDiscord> <Elegantbeef> I hate regex ðŸ˜›
[06:21:59] <FromDiscord> <Elegantbeef> Mostly just it's generally annoying to read/write and doesnt nicely capture anything
[06:23:39] <nrds> <06Prestige99> ACTION loves regex
[06:24:02] <FromDiscord> <impbox [ftsf]> How often are you running this function?
[06:24:29] <FromDiscord> <impbox [ftsf]> If it's less than thousands/millions of times a second, probably don't worry
[06:24:55] <FromDiscord> <impbox [ftsf]> Use whatever's least confusing
[06:25:03] <FromDiscord> <Elegantbeef> Yea there isnt much reason to care, but i just though it'd mention that `[a..b]` is a copy operation, so in performance sensitive areas you'd want to use `toOpenArray`
[06:25:15] <FromDiscord> <Elegantbeef> I'm a terrible person so shun me to my shun corner
[06:32:38] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[06:33:50] *** Joins: xet7 (~xet7@user/xet7)
[07:24:21] <FromDiscord> <evoalg> sent a long message, see http://ix.io/3CL5
[07:28:30] <FromDiscord> <Elegantbeef> It probably should error
[07:28:54] <FromDiscord> <Elegantbeef> But eh seems it works "properly"
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:42:37] <FromDiscord> <evoalg> echo "foo"[^4] # leads to: Error: unhandled exception: index -1 not in 0 .. 2 [IndexDefect]â†µ(as expected)
[07:45:53] <FromDiscord> <evoalg> sent a long message, see http://ix.io/3CLb
[07:46:32] <FromDiscord> <Professor Actual Factual> Does anyone know if a library exists in Nim that provides circular static arrays? In other words Arrays (not seq) that kind of behave like deques (but we're not really allocating anything for popping or appending)
[07:47:22] <FromDiscord> <Elegantbeef> A ring buffer?
[07:47:27] <FromDiscord> <Professor Actual Factual> Yes thats the term lol
[07:47:46] <FromDiscord> <Elegantbeef> I think impbox has one for Nico
[07:48:16] <FromDiscord> <Elegantbeef> There is also this ancient impl https://github.com/megawac/RingBuffer.nim
[07:49:18] <FromDiscord> <Professor Actual Factual> Thank you for the help ðŸ™‚
[07:49:51] <FromDiscord> <Elegantbeef> No problem
[08:00:07] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[08:21:16] <NimEventer> New thread by V3ss0n: TechEmpower Benchmarks , see https://forum.nim-lang.org/t/8537
[08:21:27] <FromDiscord> <Elegantbeef> @impbox [ftsf]\: @geekrelief well i felt good with the present stated of nimscripter(i documented it) so nimscripter 1.0.0! ðŸ˜€
[08:21:31] <FromDiscord> <impbox [ftsf]> yeah, i think i stole mine from that one and modified it
[08:21:41] <FromDiscord> <impbox [ftsf]> @ElegantBeef \o/ congrats!
[08:22:12] <FromDiscord> <Elegantbeef> Thanks i cant believe it myself, i could write 1.0.0, my first day of kindergarten paid off!
[08:23:28] <FromDiscord> <Elegantbeef> Though i still need to tend to `exportTo` with types/converters, but for now we'll pretend it doesnt work with them
[08:23:50] <FromDiscord> <geekrelief> @ElegantBeef Looking forward to checking it out tomorrow.
[08:25:19] <FromDiscord> <Elegantbeef> impbox you'll probably like the `safeLoadScriptWithState` as it only changes the interpreter if the code is parsed properly
[08:25:33] <FromDiscord> <impbox [ftsf]> rad! sounds handy
[08:26:12] <FromDiscord> <Elegantbeef> Though one thing i'm thinking about changing is making `nim -> nimscript` involve a hidden variable, to make it less user error prone
[08:26:43] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3CLm
[08:26:54] <FromDiscord> <Elegantbeef> Cause right now they can change that dt to a string and it'll crash and there is no good way of preventing it
[08:28:05] <FromDiscord> <Elegantbeef> It's probably a fine solution given the facts at hand, no clue how you guys feel about it
[08:28:30] <FromDiscord> <impbox [ftsf]> how does the hidden variable help?
[08:28:42] <FromDiscord> <Elegantbeef> It's typed and the users cannot change it
[08:28:58] <FromDiscord> <Elegantbeef> `var update: proc(dt: float32)`  would be hidden from the programmer
[08:29:19] <FromDiscord> <Elegantbeef> So when you do `update = proc(dt: string) = discard` the vm doesnt run and you get an error
[08:29:37] <FromDiscord> <Elegantbeef> Right now the VM runs but the compiled code doesnt know it's going to send an invalid type
[08:30:17] <FromDiscord> <Elegantbeef> Cause in your case the compiled code is still sending a float32, but the VM treats it as a string
[08:30:25] *** Quits: Ekho (~Ekho@user/ekho) (*.net *.split)
[08:30:56] <FromDiscord> <Elegantbeef> So as soon as you use the value the VM crashes, and  this is the least awful solution
[08:31:04] <FromDiscord> <impbox [ftsf]> nods i see
[08:31:06] <FromDiscord> <impbox [ftsf]> kinda
[08:31:44] <FromDiscord> <Elegantbeef> The best sounding but most awful to implement is to type check the proc the user is calling. Sounds simple until you remember the types we have are compiled types not compiled runtime types
[08:32:27] <FromDiscord> <Elegantbeef> So to check if a given type matches the type i have to traverse the VM's typedef, and the compiled codes typedef
[08:34:11] <FromDiscord> <Elegantbeef> It's just a side effect of having a static environment and one that can statically change
[08:34:47] <FromDiscord> <Elegantbeef> I also should have checked conversions to/from the VM for catchable errors, but presently do not since it's complicated ðŸ˜€
[08:35:24] <FromDiscord> <impbox [ftsf]> sounds like it's good enough to take for a spin, just not trust to life support systems
[08:35:31] <FromDiscord> <impbox [ftsf]> (edit) "sounds like it's good enough to take for a spin, just not ... trust" 03added "to"
[08:36:23] <FromDiscord> <Elegantbeef> Well if you dont right wrong code "it'll work" ðŸ˜›
[08:36:24] <FromDiscord> <Elegantbeef> Well if you dont write wrong code "it'll work" ðŸ˜›
[08:40:05] <FromDiscord> <impbox [ftsf]> I would never do such a thing
[08:40:47] *** Joins: Ekho (~Ekho@user/ekho)
[08:41:01] <FromDiscord> <Elegantbeef> I think it's more like a mostly built ship without escape pods, it'll get you there but if you fuck up you're sincerely fucked
[08:42:59] <FromDiscord> <Elegantbeef> I'm now curious if it's possible to save the global states to a file and reload them after closing the program and reopening
[08:43:29] <FromDiscord> <impbox [ftsf]> assuming all the state is serializable i don't see why not
[08:43:40] <FromDiscord> <Elegantbeef> Well the state uses VM symbols
[08:44:00] <FromDiscord> <Elegantbeef> So it's reliant on the VM's script not changing the symbols around
[09:11:12] <FromDiscord> <unknownusername> Is de morgan law a meme to handle simple if-else statements?
[09:13:38] <FromDiscord> <Elegantbeef> What do you mean by that, briefly skimming it's a simple law
[09:15:22] <FromDiscord> <unknownusername> Yeah but some """"seniors"""" say that   if you use else rather than de morgan law you are dumb, which actually I find it dumb
[09:16:52] <FromDiscord> <Elegantbeef> I dont get how `use else` and the laws coincide
[09:17:52] <FromDiscord> <Elegantbeef> Ideally you use the least amount of flow control whilst still having easily to maintain code, so that means using nested ifs when it makes sense
[09:18:51] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3CLA
[09:19:25] <FromDiscord> <xflywind> \
[10:21:29] *** Joins: PMunch (~PMunch@vpn.dualog.com)
[11:00:55] *** Quits: PMunch (~PMunch@vpn.dualog.com) (Remote host closed the connection)
[11:00:58] *** Quits: mahlon (~mahlon@martini.nu) (Quit: PotatoTech)
[11:01:18] *** Joins: mahlon (~mahlon@martini.nu)
[11:07:06] *** Joins: PMunch (~PMunch@vpn.dualog.com)
[11:19:11] *** Joins: pro (~pro@user/pro)
[11:50:55] *** Quits: mal`` (~mal``@static.38.6.217.95.clients.your-server.de) (Quit: Leaving)
[11:56:38] *** Joins: mal`` (~mal``@static.38.6.217.95.clients.your-server.de)
[12:53:49] *** Joins: Vladar (~Vladar@46.162.2.53)
[14:14:48] <NimEventer> New thread by Kobi: Code comments please, see https://forum.nim-lang.org/t/8538
[14:43:50] <FromDiscord> <eyecon> Hello, I'm very new to Nim and I'm currently trying to write a proc that takes an iterator and gives the maximum value yielded by the iterator together with its index, without allocating memory for all return values (throwing away all non-maximum values at each step). I thought this could be an easy task for a template, but I seem to be running into beginner problems. Do we already have something like this I can learn from?
[14:46:17] <FromDiscord> <demotomohiro> An inline iterator is no a thing exists at runtime and you cannot pass it to a proc
[14:47:10] <FromDiscord> <eyecon> So I need a closure iterator, you mean?
[14:47:14] <FromDiscord> <haxscramper> There is no `maxIt` template in the stdlib, but you can check out implementation of the `mapIt`
[14:47:19] <FromDiscord> <demotomohiro> https://nim-lang.org/docs/manual.html#iterators-and-the-for-statement-firstminusclass-iteratorsâ†µYes
[14:47:35] <FromDiscord> <haxscramper> Yes, closure iterator can be passed to procs
[14:47:44] <FromDiscord> <eyecon> In reply to @haxscramper "There is no `maxIt`": Thanks, will do
[14:50:11] <FromDiscord> <eyecon> sent a code paste, see https://play.nim-lang.org/#ix=3CNQ
[14:51:13] <FromDiscord> <haxscramper> `iter: iterator` -\> `iter: iterator(): int {.closure.}`
[14:51:15] <FromDiscord> <eyecon> sent a code paste, see https://play.nim-lang.org/#ix=3CNR
[14:51:17] <FromDiscord> <Rika> `proc maxiter[T](iter: iterator[T]): T =`
[14:51:22] <FromDiscord> <haxscramper> `iterator` is a typeclass
[14:51:23] <FromDiscord> <eyecon> proc will ideally be a template
[14:51:24] <FromDiscord> <Rika> oh yeah
[14:51:25] <FromDiscord> <Rika> iterable
[14:51:26] <FromDiscord> <Rika> not iterator
[14:51:27] <FromDiscord> <Rika> whoops
[14:51:28] <FromDiscord> <haxscramper> `iterator(): int {.closure.}` is a concrete class
[14:51:41] <FromDiscord> <Rika> read what hax said, not mine
[14:52:16] <FromDiscord> <haxscramper> also, `maxValue: int = 0` is a bug, what if max value ever found is -120?
[14:52:22] <FromDiscord> <haxscramper> `maxValue = low(int)`
[14:52:32] <FromDiscord> <haxscramper> or for generic procs `maxValue = low(T)`
[14:52:51] <FromDiscord> <eyecon> In reply to @haxscramper "also, `maxValue: int =": You are right, I oversimplified a bit, originally I tried to use a sentinel value but I can add it later
[14:53:03] <FromDiscord> <eyecon> Or I can use the low()
[14:54:16] <FromDiscord> <eyecon> In reply to @haxscramper "`iter: iterator` -\> `iter:": Which line is this change? Do you mean the `maxiter` definition?
[14:54:33] <FromDiscord> <Rika> yes
[14:55:01] <FromDiscord> <Rika> also remove the `[int]` part there
[14:56:16] <FromDiscord> <eyecon> sent a code paste, see https://play.nim-lang.org/#ix=3CNV
[14:56:35] <FromDiscord> <Rika> at the end you are returning (maxIndex, maxValue)
[14:56:42] <FromDiscord> <Rika> but only specify `): int =`
[14:56:52] <FromDiscord> <eyecon> Ah, right
[14:57:04] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3CNW
[14:57:31] <FromDiscord> <eyecon> Can I use `tuple[int, int]`?
[14:57:34] <FromDiscord> <Rika> yes
[14:57:37] <FromDiscord> <Rika> wait
[14:57:38] <FromDiscord> <Rika> no
[14:57:44] <FromDiscord> <Rika> `tuple[a: int, b: int]`
[14:58:13] <FromDiscord> <Rika> you can change a to index and b to value if you want
[14:58:49] <FromDiscord> <eyecon> sent a code paste, see https://play.nim-lang.org/#ix=3CNX
[14:58:59] <FromDiscord> <Rika> myit is not a closure
[14:59:22] <FromDiscord> <eyecon> In reply to @Rika "myit is not a": Yes
[14:59:24] <FromDiscord> <eyecon> That did it
[14:59:27] <FromDiscord> <eyecon> Thank you!
[14:59:35] <FromDiscord> <Rika> dont forget to read what hax said
[15:00:01] <FromDiscord> <eyecon> I will in a couple hours, I changed so much that I can't see basic errors anymore
[15:00:08] <FromDiscord> <eyecon> And will definitely come back
[15:00:13] <FromDiscord> <eyecon> Thank you both so much
[15:00:21] <FromDiscord> <eyecon> I have to take a break now ðŸ™‚
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:53:10] <NimEventer> New question by Jonas Bystr&#246;m: How to assign object to ref, see https://stackoverflow.com/questions/69707966/how-to-assign-object-to-ref
[16:21:18] <NimEventer> New thread by Kobi: Foray into android land with Kivy, and nimpy., see https://forum.nim-lang.org/t/8539
[16:32:00] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Read error: Connection reset by peer)
[16:32:06] *** Joins: kayabaNerve_ (~kayabaNer@user/kayabanerve)
[16:35:20] <NimEventer> New thread by Miran: Nim receives $100k in Bitcoin donations, see https://forum.nim-lang.org/t/8540
[16:43:52] <PMunch> Damn, that's quite the amount!
[16:47:42] <FromDiscord> <Recruit_main707> I read: nim will receive $150k by march 2022
[16:48:35] <FromDiscord> <Rika> nim will receive 10k by april 2022
[16:48:58] <FromDiscord> <Gumber> I don't even remember where I donated my $$$$ to Nim - it wasn't open collective
[16:49:03] <FromDiscord> <Gumber> it wasn't a bitcoin wallet
[16:49:10] <FromDiscord> <Gumber> it was some other donation website that seems to no longer be around / in use?
[16:49:13] <FromDiscord> <forlorn> $100k? Whoa
[16:49:29] <FromDiscord> <Gumber> I think I did like $150/mo for about 1.5 years?
[16:49:32] <FromDiscord> <forlorn> Haven't heard an opensource project getting donations of this scale
[16:49:42] <FromDiscord> <forlorn> (edit) "Haven't heard ... an" 03added "of"
[16:49:53] <FromDiscord> <Gumber> some open source projects have multimillion/billion dollar companies backing them
[16:50:00] <FromDiscord> <Gumber> (edit) "multimillion/billion" => "multi-million/billion"
[16:50:03] <FromDiscord> <Gumber> $100k is peanuts
[16:50:11] <FromDiscord> <forlorn> Nim doesn't have any of those does it?
[16:50:17] <FromDiscord> <Recruit_main707> Nop
[16:50:23] <FromDiscord> <Gumber> No - it's only received two sizable donations in its history
[16:50:26] <FromDiscord> <Gumber> the status.im grant
[16:50:29] <FromDiscord> <Gumber> and now this bitcoin one
[16:50:39] <FromDiscord> <Gumber> the status.im one was for like ~20k or so I think?
[16:50:46] <FromDiscord> <Rika> i guess it was nice to have delayed cashing out on this since they received it
[16:50:48] <FromDiscord> <forlorn> status.im?
[16:50:48] <FromDiscord> <Gumber> so this is by far the largest
[16:50:51] <FromDiscord> <Gumber> yes status.im
[16:51:05] <FromDiscord> <forlorn> Is that an app that uses Nim?
[16:51:11] <FromDiscord> <haxscramper> status pays 10k per month for nim core devs
[16:51:22] <FromDiscord> <Gumber> Ah okay - didn't realize they had made that official - sweet
[16:51:39] <FromDiscord> <Gumber> they implemented eth 2.0 in Nim I believe
[16:51:47] <FromDiscord> <Gumber> and they use Nim for one of their desktop apps as well
[16:51:57] <FromDiscord> <Gumber> for web apps / mobile apps I think they use clojurescript
[16:52:27] *** Joins: arkurious (~arkurious@user/arkurious)
[16:52:37] <FromDiscord> <Gumber> a few Nim core devs went to work for them
[16:52:57] <FromDiscord> <haxscramper> really?â†µ(@Gumber)
[16:53:03] <FromDiscord> <Gumber> Zahary
[16:53:09] <FromDiscord> <Gumber> Cheatfate - although he wasn't a core dev
[16:53:20] <FromDiscord> <Recruit_main707> Araq himself?
[16:53:29] <FromDiscord> <Gumber> Araq yeah I think he has done some work for them for sure
[16:53:42] <FromDiscord> <Recruit_main707> Thanks, thats what i thought
[16:53:44] <FromDiscord> <Gumber> there was one or two other people as well I believe
[16:54:00] <FromDiscord> <Gumber> I just can't remember off the top of my head - if you go check out their github org its easy enough to figure out ðŸ™‚
[16:54:08] <FromDiscord> <Recruit_main707> I wanna say kurx but idk
[16:54:13] <FromDiscord> <Gumber> nah krux02 didn't
[16:54:15] <FromDiscord> <Gumber> but arne did
[16:54:30] <FromDiscord> <Gumber> he was one of the original hires though - and was the one that pushed Nim I think
[16:54:43] <FromDiscord> <Recruit_main707> I always say It wrong x)
[16:54:52] <FromDiscord> <Gumber> mratsim
[16:54:59] <FromDiscord> <Gumber> again not a core dev
[16:55:22] <NimEventer> New thread by Kiloneie: Looking for feedback on Nim for Beginners #27 Object Variants, see https://forum.nim-lang.org/t/8541
[16:55:37] <FromDiscord> <Gumber> maybe it was only zah and araq but I could have sworn there were one or two others - I guess maybe just not core devs ðŸ˜…
[16:56:44] <FromDiscord> <forlorn> So what's the constrained type story in Nim?â†µI know you can specify numeric ranges as types, which I found very impressive. What else can you do?
[16:56:57] <FromDiscord> <forlorn> Do you have literal types like you do in TypeScript?
[16:57:56] <FromDiscord> <Gumber> we have distinct types but not literal types
[16:58:14] <FromDiscord> <Gumber> and we have first class enums
[16:58:49] <FromDiscord> <Gumber> so you can do like `type myuint32 = distinct uint32`
[16:59:05] <FromDiscord> <forlorn> In reply to @Gumber "and we have first": Are you able to use a subset of existing enum as another type, maybe using any of Nim's static introspection features?
[16:59:17] <FromDiscord> <forlorn> (edit) "In reply to @Gumber "and we have first": Are you able to use a subset of ... existing" 03added "an"
[16:59:43] <FromDiscord> <haxscramper> Yes, `range[EnumStart .. EnumEnd]`
[17:00:09] <FromDiscord> <haxscramper> This is not a subset, but only a slice
[17:00:28] <FromDiscord> <forlorn> Do you have to use ranges?
[17:00:39] <FromDiscord> <forlorn> Can't you make a non-contiguous subset?
[17:00:53] <FromDiscord> <haxscramper> No, I can't make  non-contiguous subset
[17:01:12] <FromDiscord> <forlorn> Aw that's unfortunate
[17:01:18] <FromDiscord> <haxscramper> You can get creative with `[T: static[set[Enum]]` or something like that
[17:01:48] <FromDiscord> <forlorn> So there are workarounds?
[17:02:27] <FromDiscord> <haxscramper> yes, you can implement anything given enough interest
[17:02:37] <FromDiscord> <haxscramper> https://github.com/alaviss/union
[17:02:42] <FromDiscord> <haxscramper> Example of "anything"
[17:02:56] <FromDiscord> <forlorn> Like, does Nim allow you to programmatically access members of an enum (like a list maybe) and return another enum list?
[17:03:02] <FromDiscord> <haxscramper> ts-like `A | B`
[17:03:39] <FromDiscord> <haxscramper> @forlorn)
[17:03:59] <FromDiscord> <haxscramper> you can do `for value in low(Enum) .. high(Enum)`
[17:04:14] <FromDiscord> <haxscramper> or you can `getType` and retrieve full type structure
[17:05:20] <FromDiscord> <haxscramper> what is the end goal here? You can write a macro that takes `enum A, B, C` and then creates you enum with `A, B` that is convertible to/from original one
[17:05:32] <FromDiscord> <haxscramper> Using automatically declared `converter` etc.
[17:05:39] <FromDiscord> <forlorn> In reply to @haxscramper "what is the end": Yes that was what I was looking for
[17:06:21] <FromDiscord> <haxscramper> https://github.com/nim-lang/Nim/blob/devel/lib/std/enumutils.nim#L76-L81
[17:06:29] <FromDiscord> <haxscramper> get enum names from `typed`
[17:06:42] <FromDiscord> <forlorn> One last question, does Nim have pattern matching to go along with its tuples and distinct types?
[17:07:08] <FromDiscord> <haxscramper> tuples - yes, distinct types - no, but I also don't understand how this might work
[17:07:23] <FromDiscord> <haxscramper> so if latter one makes sense I might be able to implement this
[17:07:50] <FromDiscord> <haxscramper> https://nim-lang.org/blog/2021/03/10/fusion-and-pattern-matching.html
[17:08:00] <FromDiscord> <forlorn> From what I understand distinct types are opaque types/`newtype`'s right?
[17:08:08] <FromDiscord> <haxscramper> right
[17:08:13] <FromDiscord> <forlorn> How are you able to destructure/extract their underlying value?
[17:08:51] <FromDiscord> <haxscramper> for `type Distinct = disctinct Base` I need to do `Base(<Distinct value>)`
[17:08:56] <FromDiscord> <haxscramper> But this conversion is a compile-time
[17:09:06] <FromDiscord> <haxscramper> So I can't really pattern-match against it at runtime
[17:09:14] <FromDiscord> <forlorn> Oh, fair
[17:09:16] <FromDiscord> <haxscramper> Well, I could of course
[17:09:36] <FromDiscord> <haxscramper> But pattern matching checks current "runtime shape" of the object mostly
[17:10:10] *** Joins: rockcavera (~rc@192.12.112.199)
[17:10:10] *** Quits: rockcavera (~rc@192.12.112.199) (Changing host)
[17:10:10] *** Joins: rockcavera (~rc@user/rockcavera)
[17:12:55] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[17:13:23] <FromDiscord> <forlorn> sent a code paste, see https://play.nim-lang.org/#ix=3COK
[17:14:15] <FromDiscord> <haxscramper> We don't do CFA right now
[17:14:18] <FromDiscord> <haxscramper> Control flow analysis
[17:14:41] <FromDiscord> <haxscramper> https://github.com/nim-lang/RFCs/issues/429
[17:15:04] <FromDiscord> <haxscramper> I don't remember, I think it will compile but fail at runtime at the moment you pass function
[17:15:09] <FromDiscord> <forlorn> Oh alright, so how can you cast an `int` to `Foo`?
[17:15:39] <FromDiscord> <forlorn> In reply to @haxscramper "I don't remember, I": This does not produce a compile error?
[17:15:46] <FromDiscord> <haxscramper> First - this is called conversion, not casting. There is a `cast` and it is different
[17:16:06] <FromDiscord> <haxscramper> Second - `let a: range[1 .. 10] = 20` is a compilation error
[17:16:09] <FromDiscord> <Rika> no it does not, he just said control flow analysis isnt done
[17:16:16] <FromDiscord> <haxscramper> !eval let a\: range[1..30] = 123
[17:16:19] <NimBot> Compile failed: /usercode/in.nim(1, 9) Error: ':' or '=' expected, but got 'range'
[17:16:31] <FromDiscord> <haxscramper> wath
[17:16:40] <FromDiscord> <haxscramper> killed by a bridge
[17:17:07] <FromDiscord> <Rika> its the discord bridge specifically
[17:17:21] <FromDiscord> <haxscramper> Yes, this does not produce compile-time error because `n`'s value is not known at compile-time, and additional heuristics is not deployed after you check for value rangesâ†µ(@forlorn)
[17:18:21] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3COP
[17:18:29] <FromDiscord> <haxscramper> Points to the `discard f(n)` line
[17:21:56] <FromDiscord> <reilly> How can I get around `Error: illegal capture 's' because ':anonymous' has the calling convention: <cdecl>`? I'm passing a callback proc into an ImGui element, and the type definition requires `{.cdecl.}`. `s` is of type `cstring`.
[17:22:32] <FromDiscord> <haxscramper> you cannot capture external variables in the `{.cdecl.}` procs, so your only option is to declare it as `s {.global.}: ...`
[17:22:52] <FromDiscord> <haxscramper> Alternatively, does your cdecl callback support `void payload` maybe?
[17:23:52] <FromDiscord> <reilly> Just making `s` `{.global.}` does the job. Thanks.
[17:24:14] <FromDiscord> <forlorn> sent a code paste, see https://play.nim-lang.org/#ix=3COR
[17:24:21] *** Joins: SebastianM (~seba@user/sebastianm)
[17:24:40] <FromDiscord> <Rika> nim needs manpower for the nicer features
[17:24:55] <FromDiscord> <haxscramper> nim needs singular aim for nicer features
[17:25:23] <FromDiscord> <haxscramper> and then people can start working on things, if there were some kind of shared/official vision
[17:25:41] <FromDiscord> <forlorn> There's no official roadmap of some sort?
[17:26:10] <FromDiscord> <haxscramper> I feel like a bad person at these moments
[17:26:12] <FromDiscord> <haxscramper> none that I know of
[17:26:55] <FromDiscord> <Rika> its fine hax
[17:27:12] <FromDiscord> <Rika> nim does need a more aimed vision
[17:27:32] <FromDiscord> <haxscramper> There is a lot of nice features currently in development
[17:27:42] <FromDiscord> <haxscramper> IC, view types, strict functions, somewhat better effect system
[17:27:46] <FromDiscord> <haxscramper> But the problem
[17:27:52] <FromDiscord> <haxscramper> there is a lot of them
[17:28:00] <FromDiscord> <haxscramper> too much for a current dev team IMO
[17:28:03] <FromDiscord> <dom96> In reply to @Gumber "Ah okay - didn't": that 10k per month figure was on the website at some point in the past IIRC
[17:28:29] <FromDiscord> <dom96> it's a pity it was removed
[17:28:35] <FromDiscord> <dom96> we should be more transparent not less
[17:28:49] <FromDiscord> <forlorn> we have an effect system?
[17:28:53] <FromDiscord> <Rika> yes
[17:29:02] <FromDiscord> <Rika> its not that good
[17:29:03] <FromDiscord> <haxscramper> probably not the one you used to though
[17:29:05] <FromDiscord> <Rika> but its there
[17:29:18] <FromDiscord> <haxscramper> it is good, just nobody really figure out what to do with it
[17:29:34] <FromDiscord> <haxscramper> Side effect tracking is good
[17:29:38] <FromDiscord> <Rika> eh isnt it a bit buggy
[17:29:48] <FromDiscord> <Rika> actually i guess everything in general is a bit buggy
[17:29:49] *** Quits: SebastianM (~seba@user/sebastianm) (Quit: Bye)
[17:30:12] <FromDiscord> <haxscramper> But general effect tagging is not so widely used, in a sense that nobody came up with actuall usage patterns
[17:30:46] <FromDiscord> <haxscramper> But with 1.6 side effect messages finally gotten better
[17:31:14] <FromDiscord> <haxscramper> if you declare code as `func` and have some unwanted side effects it will tell you exactly where are they
[17:31:41] <FromDiscord> <haxscramper> I guess
[17:31:42] <FromDiscord> <haxscramper> so you can have mostly imperative code but still achieve functional purity
[17:36:38] <FromDiscord> <eyecon> sent a code paste, see https://play.nim-lang.org/#ix=3COW
[17:36:53] <FromDiscord> <Rika> `maxValue: int = T.low` this is uhhhhhhh
[17:37:01] <FromDiscord> <haxscramper> low(T)
[17:37:01] <FromDiscord> <Rika> strange
[17:37:11] <FromDiscord> <eyecon> Ah, I forgot the int there
[17:37:16] <FromDiscord> <haxscramper> usually you do `low(T)`, `high(T)`, `default(T)`
[17:37:34] <FromDiscord> <Rika> hax i personally do T.low T.high default(T)
[17:37:38] <FromDiscord> <Rika> its preference
[17:37:45] <FromDiscord> <haxscramper> You can also define `func init(t: typedesc[MyType])` and do `init(MyType)`
[17:37:49] <FromDiscord> <Rika> the issue is more of dont `low` and `high` return T?
[17:37:55] <FromDiscord> <eyecon> But `int` is wrong at any rate, should have been `T`
[17:38:12] <FromDiscord> <Rika> yes pretty much
[17:39:52] <FromDiscord> <alehander42> In reply to @Gumber "he was one of": iirc zahary got arne in, they already had chosen nim before that. zahary and me were on of the first hires, i left quickly after that after deciding i don't want to work on crypto/blockhain
[17:39:58] <NimEventer> New post on r/nim by miran1: Nim receives $100k in Bitcoin donations, see https://reddit.com/r/nim/comments/qfhjrb/nim_receives_100k_in_bitcoin_donations/
[17:40:03] <FromDiscord> <alehander42> (edit) "on" => "one" | "oneof the first ... hires," 03added "nim"
[17:40:22] <FromDiscord> <Gumber> In reply to @alehander42 "iirc zahary got arne": ah okay - I didn't realize you were working there too xD
[17:40:30] <FromDiscord> <alehander42> it started with a forum post by them in the nim forum
[17:40:54] <FromDiscord> <alehander42> maybe there was more before that, but that's what i personally know or remember
[17:40:59] <FromDiscord> <Rika> what's wrong with working on crypto?
[17:41:06] <FromDiscord> <haxscramper> oh, they do hire on nim forum sometimes
[17:41:09] <FromDiscord> <alehander42> i hate the blockchain industry
[17:41:36] *** Quits: PMunch (~PMunch@vpn.dualog.com) (Remote host closed the connection)
[17:41:50] *** Joins: casionaut (~casionaut@user/casionaut)
[17:44:27] <FromDiscord> <alehander42> however congrats on the big donation ðŸ˜„
[17:47:03] <FromDiscord> <dom96> lol
[17:51:19] <FromDiscord> <Gumber> All I know is that as soon as I hear the words distributed and crypto in the description of any product
[17:51:25] <FromDiscord> <Gumber> my brain immediately shuts off
[17:51:47] <FromDiscord> <Gumber> (edit) "All I know is that as soon as I hear the words distributed and crypto in the description of any product ... " 03added "/ project"
[17:52:08] <FromDiscord> <Gumber> the person talking to me turns into chef from muppet babies
[17:52:16] <FromDiscord> <Gumber> (edit) "the person talking to me turns into ... chef" 03added "the"
[17:55:10] <FromDiscord> <dom96> Personally I've always seen the crypto companies as risky, but now I think most crypto companies are likely to stick around for the foreseeable future (at the very least the well established ones, which I think Status is).
[17:55:21] <FromDiscord> <dom96> That said, it would still take a lot for me to work there
[17:55:37] <FromDiscord> <Gumber> I just have zero interest in the problem domain
[17:55:46] <FromDiscord> <Gumber> like negative interest actually
[17:56:49] <FromDiscord> <Gumber> but - it's probably why I'm not rich off crypto yet as well xD
[17:57:57] <FromDiscord> <IsaacPaul> Crypto isn't really sustainable imo. Monero is the only useful one (for illegal transactions). Everything else just burns electricity or some sort of resource.
[17:58:12] <FromDiscord> <IsaacPaul> (edit) "else" => ""
[17:59:23] <FromDiscord> <haxscramper> Need to make cryptocurrency that works on energy of people who hate cryptocurrency
[17:59:27] <FromDiscord> <haxscramper> infinite money
[17:59:36] <FromDiscord> <dom96> ETH is moving to PoS
[18:00:00] <FromDiscord> <dom96> (and I bet there are other cryptos that already do PoS)
[18:00:02] <FromDiscord> <IsaacPaul> I suppose eth is more viable but still a rocky foundation
[18:00:13] <FromDiscord> <Rika> tbh thats the only gripe most people have with crypto, the amount of stress it puts on the environment
[18:04:07] <NimEventer> New post on r/nim by padraig_oh: fusion/matching broken in nim 1.6?, see https://reddit.com/r/nim/comments/qfi1d0/fusionmatching_broken_in_nim_16/
[18:06:25] *** Quits: pro (~pro@user/pro) (Ping timeout: 244 seconds)
[18:07:25] <FromDiscord> <haxscramper> oh, fun stuffâ†µ(<@709044657232936960_=4eim=45venter=5b=49=52=43=5d>)
[18:07:34] <FromDiscord> <haxscramper> I need to poke at fusion rotting corpse again
[18:07:36] <FromDiscord> <eyecon> sent a code paste, see https://play.nim-lang.org/#ix=3CP4
[18:07:44] <FromDiscord> <haxscramper> I wonder who would finally come up and unclog the CI
[18:07:49] <FromDiscord> <eyecon> (edit) "https://play.nim-lang.org/#ix=3CP4" => "https://play.nim-lang.org/#ix=3CP5"
[18:07:53] <FromDiscord> <haxscramper> has been failing for months now on windows
[18:13:27] <FromDiscord> <haxscramper> was fixed for clybber, but because fusion tries but does not really follow semver now person has the wrong version installedâ†µ(<@709044657232936960_=4eim=45venter=5b=49=52=43=5d>)
[18:14:20] <FromDiscord> <Gumber> I'm using `smartptrs` from fusion but I just copied / pasted the implementation into my project
[18:24:45] <FromDiscord> <haxscramper> This looks like a more sustainable solution at this point
[18:24:46] <FromDiscord> <haxscramper> I mean
[18:24:48] <FromDiscord> <haxscramper> july 9
[18:25:12] <FromDiscord> <haxscramper> I have fixes from three months worth of things, and nobody even bothered to look at it
[18:25:14] <FromDiscord> <haxscramper> fusion can be considered dead
[18:25:28] <FromDiscord> <haxscramper> But hey, 15 new stdlib modules
[18:29:08] <FromDiscord> <Goel> Meanwhile arch official repository of nim still at version `1.4.8-1` ðŸ˜«  And i don't want to compile from source again or i'll mess up my installation so i'll just wait. At least i flagged that as out of date, so hopefully they will push 1.6 tomorrow or `soon(Tm)`
[18:29:48] <FromDiscord> <enthus1ast> why not use choosenim?
[18:31:09] <FromDiscord> <Goel> Last time i used it i was on Windows and i had problems installing it with MingW, then it worked, then i went using Linux and since then i just rely on official packages from Arch and i never had a problem, just sometimes its a bit slow waiting
[18:32:17] <FromDiscord> <enthus1ast> for both os you just need to have a compiler and the nim bin directory on path
[18:32:55] <FromDiscord> <enthus1ast> when you can type in "gcc" in your shell you normally are good
[18:38:43] *** Quits: casionaut (~casionaut@user/casionaut) (Remote host closed the connection)
[19:09:43] <NimEventer> New thread by Kiloneie: Metaprogramming in Nim #1 Introduction, see https://forum.nim-lang.org/t/8543
[19:10:24] <NimEventer> New post on r/nim by Kiloneie: Metaprogramming in Nim #1 Introduction, see https://reddit.com/r/nim/comments/qfjg90/metaprogramming_in_nim_1_introduction/
[19:10:35] <FromDiscord> <Kiloneie> Hey guys, check out my new video ðŸ™‚
[19:15:55] <FromDiscord> <Kiloneie> Can someone retweet it on nim_lang pretty please ðŸ˜› ?
[19:20:44] <FromDiscord> <dom96> yay, we're on HN again ðŸ™‚
[19:20:59] <FromDiscord> <dom96> Looks like we need not just Ethereum but also other crypto addresses https://news.ycombinator.com/item?id=28989089
[19:23:37] <FromDiscord> <pietroppeter> we could set up crypto contributions in open collective (recent feature): it increases number of crypto currencies accepted and solves the problem of managing crypto currencies (you just don't, it translates directly do dollars): https://opencollective.com/opencollective/updates/support-open-source-software-using-crypto
[19:24:47] <nrds> <06Prestige99> Wow that's a lot of $$
[19:28:55] <FromDiscord> <haxscramper> > â†µ> Nice, weâ€™ve got $100k! I wonder what weâ€™re going to spend our $88k on? Maybe we should use our $112k to hire somebody to work on the compiler full time? Would $85k be enough for them?â†µ>
[19:29:03] <FromDiscord> <haxscramper> haha funny
[19:29:55] <FromDiscord> <dom96> In reply to @pietroppeter "we could set up": Doesn't hurt to provide addresses, especially since we've invested in hardware wallets. Opencollective takes a cut afaik and their crypto support is still in beta. Also it's better to not centralise on just one donation platform.
[19:32:03] <FromDiscord> <haxscramper> use github donations as well
[19:32:10] <FromDiscord> <haxscramper> IIRC they are not set up for nim
[19:32:49] <FromDiscord> <pietroppeter> In reply to @dom96 "Doesn't hurt to provide": well, it is yet another option to receive donations and it seems easy enough to set up and forget about it
[19:32:57] <FromDiscord> <dom96> can github donations be set up for orgs or just individuals?
[19:33:08] <FromDiscord> <dom96> afaik github matches these so definitely would be good to set them up
[19:34:11] <FromDiscord> <haxscramper> https://github.blog/2020-05-12-github-sponsors-is-out-of-beta-for-sponsored-organizations/#join-github-sponsors-to-get-funded-as-an-organization
[19:34:19] <FromDiscord> <haxscramper> tldr can donate to org
[19:37:49] *** Joins: neurocyte0132889 (~neurocyte@212.232.86.211)
[19:37:49] *** Quits: neurocyte0132889 (~neurocyte@212.232.86.211) (Changing host)
[19:37:49] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[19:41:17] <FromDiscord> <dom96> why aren't we doing this lol
[19:43:36] <FromDiscord> <dom96> Here is a proposal: let's use the website repo for these kinds of "operational" tasks: https://github.com/nim-lang/website/issues/313
[20:00:38] *** Joins: tiorock (~rc@192.12.112.199)
[20:00:38] *** Quits: tiorock (~rc@192.12.112.199) (Changing host)
[20:00:38] *** Joins: tiorock (~rc@user/rockcavera)
[20:00:38] *** rockcavera is now known as Guest5144
[20:00:38] *** Quits: Guest5144 (~rc@user/rockcavera) (Killed (silver.libera.chat (Nickname regained by services)))
[20:00:38] *** tiorock is now known as rockcavera
[20:10:43] <FromDiscord> <dom96> anddd a mod has killed the HN thread from front page
[20:12:47] <FromDiscord> <dom96> or at least that's what I assume happened
[20:17:27] <FromDiscord> <geekrelief> Besides bisecting, any tips on figuring out what's causing my slow compile times?  The difference is an order of magnitude.
[20:18:54] <FromDiscord> <geekrelief> Sometimes I get compilations in a couple seconds and others 16s.  I'm creating a C binding which is using generated code from nimterop, so I'm using includes to deal with type dependencies.  I wonder if use of includes is causing it.
[20:41:26] <FromDiscord> <dom96>  https://media.discordapp.net/attachments/371759389889003532/902242960568107048/Screen_Shot_2021-10-25_at_6.10.48_PM.png
[20:41:45] <nrds> <06Prestige99> :o
[20:44:08] <FromDiscord> <Recruit_main707> "we are too smart to talk about your lang or the arguably more important invention since the steam engine"
[20:45:03] <FromDiscord> <Recruit_main707> idc if you think bitcoin is as important as i do, not the place to debate it, nor HN apparently :p
[20:45:57] <FromDiscord> <haxscramper> someone write bitcoin `<thing>` in rust
[20:46:32] <FromDiscord> <haxscramper> `#1` on HN front page, 490 comments all praising how this would help everyone everywhere
[20:49:39] <FromDiscord> <juan_carlos> Lets make a rust backend then  ðŸ¤ª
[20:50:05] <FromDiscord> <Rika> > infinitely worse
[20:50:06] <FromDiscord> <Rika> LMFAO
[20:50:07] <FromDiscord> <Rika> true
[20:50:16] <FromDiscord> <juan_carlos> Thats actually a good one for april fools... ðŸ¤”
[20:51:12] <FromDiscord> <Recruit_main707> In reply to @juan_carlos "Lets make a rust": smart, that way rust and nim would cancel out
[20:52:00] <FromDiscord> <juan_carlos> I mean eventually someone will do something that emits rust is just about time...
[20:52:24] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[20:53:57] <FromDiscord> <Recruit_main707> idk, rust's selling point is memory safety, which can be enforced by the nim compiler without emitting rust code
[20:55:00] <FromDiscord> <juan_carlos> It was jk
[20:55:07] <FromDiscord> <Rika> yes but with significant difficulty
[20:55:15] <FromDiscord> <Rika> just like nim could output direct asm
[20:55:31] <FromDiscord> <Recruit_main707> tbh the fact that is isnt needed doesnt mean someone wont do it xD
[20:55:45] <FromDiscord> <geekrelief> In reply to @geekrelief "Sometimes I get compilations": hmm actually it's linking that's taking a long time.
[20:55:53] <FromDiscord> <Rika> someone might do it sure but whats the chance it would become a popular/used backend?
[20:56:17] <FromDiscord> <Recruit_main707> In reply to @Rika "yes but with significant": more difficult than adding a new backend that used correct rust code?
[20:56:51] <FromDiscord> <Rika> i would argue yes
[20:57:37] <FromDiscord> <Rika> if you want the enforced safety over the optimisations nim offers instead...
[20:57:45] <FromDiscord> <Rika> lots of things need implementing
[20:57:50] <FromDiscord> <Rika> okay
[20:58:06] <FromDiscord> <Rika> i see what your point is, but i still think theyre at least equally difficult
[20:59:04] <FromDiscord> <Recruit_main707> lets leave it in a tie then, i have to study :)
[21:24:47] *** Joins: casionaut (~casionaut@user/casionaut)
[21:27:21] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[21:27:51] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[21:31:40] *** Joins: boardwalk19 (~boardwalk@136.49.88.66)
[21:38:16] <FromDiscord> <pietroppeter> In reply to @dom96 "": Thatâ€™s actually a fair answer to me (the discussion in the thread was not going anywhere), impressed that you were able to get an answer! I was more pissed when the same happened to NimConf2021 post. And maybe they had a good reason for that, but without knowing why, it all seems arbitrary and annoying
[21:43:15] <NimEventer> New post on r/nim by shujidev: How to send a user defined callback to C with less parameters than it expects, see https://reddit.com/r/nim/comments/qfms0o/how_to_send_a_user_defined_callback_to_c_with/
[21:45:47] *** Quits: casionaut (~casionaut@user/casionaut) (Remote host closed the connection)
[21:49:14] <FromDiscord> <dom96> In reply to @pietroppeter "Thatâ€™s actually a fair": They are pretty responsive. Next time just email hn@ycombinator.com
[21:49:30] <FromDiscord> <dom96> They should really be more transparent about this
[21:50:21] <FromDiscord> <dom96> But at least they answer when asked. Could just ignore us completely
[22:01:04] <FromDiscord> <Goel> Why paying @haxscramper $87k a year when he can do it for free :nim1:
[22:06:06] <FromDiscord> <haxscramper> Complain about everything there is for free is my mission
[22:14:49] <FromDiscord> <Recruit_main707> if im wrapping a class, with a constructor that takes certain parameters, and is initialised like this, how am i supposed to replicate this in nim?â†µ`AClass myClass = new AClass(index, team, name);`
[22:14:59] <FromDiscord> <Recruit_main707> im sorry the question is not that clear
[22:16:16] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3CRc
[22:16:18] <FromDiscord> <Recruit_main707> ah, right, thanks hax
[22:16:33] <FromDiscord> <haxscramper> I think there was some magic to wrap `new` explicitly, but I prefer to just make procs for thsi
[22:16:47] <FromDiscord> <haxscramper> `cnew` because it is also possible to wrap constructor in a way that would construct `ref ACLass`
[22:16:59] <FromDiscord> <haxscramper> using placement new
[22:42:26] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[22:53:26] <FromDiscord> <demotomohiro> If you need to write C++ code, I think using `new` operator is not safe because you have to call `delete` operator after you used the object.â†µJust creating a object on stack like `AClass myClass(index, team, name);` or using smart pointer like `std::unique_ptr` or `std::shared_ptr` is safer.
[22:55:31] <FromDiscord> <haxscramper> best way to deal with this is to use nim memory management
[22:55:46] <FromDiscord> <haxscramper> placement new, etc.
[22:57:08] <FromDiscord> <haxscramper> https://github.com/sinkingsugar/nimline/blob/master/nimline.nim#L151
[22:57:44] <FromDiscord> <haxscramper> Wrong line, I meant next one
[22:58:01] <Amun-Ra> the comment
[23:00:51] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3CRv
[23:02:33] *** Joins: vicfred (~vicfred@user/vicfred)
[23:08:17] <FromDiscord> <Gumber> sent a code paste, see https://play.nim-lang.org/#ix=3CRy
[23:09:18] <FromDiscord> <Gumber> guess I need to look at the C code...
[23:26:22] <FromDiscord> <Alea> In reply to @Recruit_main707 ""we are too smart": More important than the computers it runs on? ðŸ¤”
[23:29:37] <FromDiscord> <Alea> Actually that's an interesting questionâ†µCan a child invention be more important than its parent invention?
[23:33:12] <FromDiscord> <Recruit_main707> too late to get so phylosophical :P
