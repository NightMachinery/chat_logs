[00:01:18] *** Joins: BlackboardN (~Blackboar@user/BlackboardN)
[00:04:28] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[00:05:49] *** Quits: coot (~coot@213.134.190.95) (Ping timeout: 240 seconds)
[00:08:25] *** Quits: Psybur (~Psybur@2600:1003:b1a3:2343:f1fc:41cc:1190:cfb8) (Ping timeout: 268 seconds)
[00:08:51] *** Joins: Psybur (~Psybur@2603:3021:2541:80c1:19c2:a1cd:6600:38ba)
[00:13:03] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.4.1)
[00:13:09] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[00:17:40] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 268 seconds)
[00:18:55] *** Joins: rawley (~rawley@142.99.241.242)
[00:21:45] *** Quits: p3n (~p3n@217.198.124.246) (Ping timeout: 256 seconds)
[00:23:14] *** Joins: p3n (~p3n@2a00:19a0:3:7c:0:d9c6:7cf6:1)
[00:23:35] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[00:24:11] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[00:25:04] *** Quits: simendsjo (~user@84.211.91.241) (Ping timeout: 268 seconds)
[00:27:57] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[00:29:02] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 246 seconds)
[00:29:53] *** Quits: CiaoSen (~Jura@p200300c957311e002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 248 seconds)
[00:31:43] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Client Quit)
[00:33:54] *** Joins: hololeap (~hololeap@user/hololeap)
[00:34:55] *** Quits: hololeap_ (~hololeap@user/hololeap) (Ping timeout: 240 seconds)
[00:35:30] *** Joins: p3n_ (~p3n@217.198.124.246)
[00:35:46] *** Quits: p3n (~p3n@2a00:19a0:3:7c:0:d9c6:7cf6:1) (Read error: Connection reset by peer)
[00:38:29] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 246 seconds)
[00:42:16] *** Joins: spacenautx (~spacenaut@user/spacenautx)
[00:43:17] *** Quits: zer0bitz (~zer0bitz@2001:2003:f750:a200:d52e:866a:6f3a:60a1) (Ping timeout: 256 seconds)
[00:43:33] *** Joins: urdh_ (~urdh@user/urdh)
[00:43:46] *** Quits: urdh (~urdh@user/urdh) (Ping timeout: 260 seconds)
[00:43:46] *** urdh_ is now known as urdh
[00:47:41] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:47:42] *** Joins: acidjnk (~acidjnk@p200300d0c7049f5375c1d267ad8f6a07.dip0.t-ipconnect.de)
[00:47:56] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 246 seconds)
[00:49:35] *** Quits: fendor_ (~fendor@91.141.33.204.wireless.dyn.drei.com) (Remote host closed the connection)
[00:50:24] *** Lord_of_Life_ is now known as Lord_of_Life
[00:50:42] *** Joins: crazazy (~user@130.89.171.62)
[00:51:07] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[00:53:53] *** Quits: romesrf (~romes@2001:8a0:6d13:9700:55ae:5d11:5a75:11c3) (Ping timeout: 260 seconds)
[00:55:37] *** Joins: Pickchea (~private@user/pickchea)
[00:57:39] *** Quits: V (~v@anomalous.eu) (Changing host)
[00:57:39] *** Joins: V (~v@ircpuzzles/2022/april/winner/V)
[00:57:50] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:67c4:4ad5:7007:410f) (Quit: WeeChat 2.8)
[00:58:11] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[01:02:12] <lechner> Hi, do people still use hugs?
[01:02:22] <napping> Is there any way to use optimization settings or pragmas to get GHC to fully simplify application of a recursive function to term explicitly built up from constructor
[01:02:53] <geekosaur> lechner, apparently it's still used in some intro to haskell sources
[01:03:09] <geekosaur> *courses
[01:03:22] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[01:03:30] <napping> like, if eval (Add x y) = eval x + eval y; eval (Lit n) = n, could I get a function like test n = eval (Add (Add (Lit n) (Lit n)) (Lit 2)) to optimize the body down to (x+x)+2?
[01:04:15] <napping> SpecConstr only seems to want to do one layer of constructor (or the optimization isn't recursively applied to the generated specializations)
[01:04:49] <napping> -fliberate-case sounds possibly relevant but I haven't got it to do anything useful
[01:05:08] <lechner> geekosaur: thanks!
[01:05:30] <lechner> also, does ghcjs have a bright future?
[01:05:55] <napping> (also tried to somehow put in a SPEC as mentioned in the user's guide and it didn't work, but I didn't find documentation on the feature)
[01:06:08] <geekosaur> it has the advantages ofbeing easy to install and highly portable. the disadvantage is it doesn't work with modern Haskell software, but for an intro course that's not especially relevant
[01:06:12] <napping> Perhaps RULES?
[01:06:45] *** Joins: romesrf (~romes@2001:8a0:6d13:9700:55ae:5d11:5a75:11c3)
[01:07:27] *** Joins: pavonia (~user@user/siracusa)
[01:07:33] *** Joins: hololeap_ (~hololeap@user/hololeap)
[01:08:35] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 240 seconds)
[01:09:12] *** Joins: coot (~coot@213.134.190.95)
[01:11:04] <lechner> geekosaur: Thanks! Hugs is still in Debian, but I think ghcjs was dropped
[01:12:26] <geekosaur> ghcjs's status is at best questionable, but I thinkit doesn't matter much as official js and wasm backends are tentatively scheduled for 9.6
[01:12:43] <lechner> i see
[01:13:02] <lechner> thank you so much!
[01:15:17] *** Quits: zincy (~zincy@host86-160-236-152.range86-160.btcentralplus.com) (Remote host closed the connection)
[01:16:28] <c_wraith> huh. so I had an idea - I wanted to create  GADT where each constructor has a type level tag, so you can specify an individual constructor by the type. but I wanted to see if I could use DataKinds and PolyKinds to promote the constructor itself to use as the type level tag, too.
[01:16:40] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[01:16:53] <c_wraith> but... GHC was unhappy with that brand of recursion.
[01:17:05] <c_wraith> very sadness.
[01:18:15] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:23:16] *** Joins: hololeap (~hololeap@user/hololeap)
[01:24:15] *** Quits: hololeap_ (~hololeap@user/hololeap) (Ping timeout: 240 seconds)
[01:27:17] *** Quits: Athas (athas@2a01:7c8:aaac:1cf:6914:1dfa:1871:fc52) (Quit: ZNC 1.8.2 - https://znc.in)
[01:27:25] *** Joins: Athas (athas@2a01:7c8:aaac:1cf:6914:1dfa:1871:fc52)
[01:27:59] *** Joins: hololeap_ (~hololeap@user/hololeap)
[01:28:55] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 240 seconds)
[01:32:51] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[01:33:05] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[01:33:33] <mcgroin> if i define my operator  like this: x :| f = f x, does it automatically mean it's infix?
[01:33:51] <mcgroin> infixl
[01:35:30] <monochrom> Yes. But don't name it :|
[01:35:50] <tomsmeding> should name it :> because then it's happier
[01:35:54] <monochrom> haha
[01:36:26] <monochrom> But no, colon is reserved for infix data constructors, e.g., data M = Int :| Int
[01:36:49] <mcgroin> colon is reserved ?
[01:37:03] <tomsmeding> but yeah two issues with that: 1. :| is already taken by Data.List.NonEmpty (not terribly important perhaps), but 2. ':' is the capital letter of symbols: Foo can only be a type or data constructor, and similarly :| can only be a type or data constuctor
[01:37:06] <tomsmeding> : is the only "capital symbol"
[01:37:16] <monochrom> No, that is not the reserved-word notion.
[01:37:36] <tomsmeding> % data MyThing = Int :& Bool  deriving (Show)
[01:37:36] <yahb> tomsmeding: 
[01:37:38] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[01:37:39] <tomsmeding> % 3 :& False
[01:37:39] <yahb> tomsmeding: 3 :& False
[01:37:48] <tomsmeding> see? not reserved, it just needs to be a data constructor
[01:38:03] <monochrom> You cannot name your function "Myfunc", it has to be "myfunc", M is for data constructors, and these still don't imply that M is reserved.
[01:38:03] <tomsmeding> % let a :&& b = a + b
[01:38:03] <yahb> tomsmeding: ; <interactive>:27:7: error:; Not in scope: data constructor `:&&'; Perhaps you meant one of these: `:&' (line 25), variable `&&' (imported from Prelude), variable `&&&' (imported from Control.Arrow)
[01:38:12] <tomsmeding> note the "data constructor `:&&'"
[01:38:51] <tomsmeding> % let a !&& b = a + b
[01:38:51] <yahb> tomsmeding: 
[01:38:54] <tomsmeding> % 3 !&& 4
[01:38:54] <yahb> tomsmeding: 7
[01:39:11] *** Quits: romesrf (~romes@2001:8a0:6d13:9700:55ae:5d11:5a75:11c3) (Ping timeout: 260 seconds)
[01:39:43] <monochrom> Infix camel case: ?+:--:>>
[01:40:07] <tomsmeding> ._.
[01:40:11] <mcgroin> i see, so : is considered as a capital letter
[01:43:16] *** Quits: rawley (~rawley@142.99.241.242) (Remote host closed the connection)
[01:43:55] *** Quits: hololeap_ (~hololeap@user/hololeap) (Ping timeout: 240 seconds)
[01:44:12] *** Quits: Psybur (~Psybur@2603:3021:2541:80c1:19c2:a1cd:6600:38ba) (Read error: Connection reset by peer)
[01:44:25] *** Joins: hololeap_ (~hololeap@user/hololeap)
[01:44:28] *** Joins: Psybur (~Psybur@2603:3021:2541:80c1:19c2:a1cd:6600:38ba)
[01:46:31] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Remote host closed the connection)
[01:49:01] *** Quits: Psybur (~Psybur@2603:3021:2541:80c1:19c2:a1cd:6600:38ba) (Ping timeout: 256 seconds)
[01:50:37] *** Joins: Psybur (~Psybur@2600:1003:b1a3:2343:446a:e995:495d:c777)
[01:51:05] *** Joins: cjb (~cjbayliss@user/cjb)
[01:53:22] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[01:54:31] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[01:55:08] *** Quits: Psybur (~Psybur@2600:1003:b1a3:2343:446a:e995:495d:c777) (Ping timeout: 260 seconds)
[01:55:40] *** Joins: Psybur (~Psybur@2601:5c9:4201:3220:19c2:a1cd:6600:38ba)
[01:55:51] *** Joins: mastarija (~mastarija@2a05:4f46:e04:6000:85bd:9b8e:1cdb:300e)
[01:56:37] *** Quits: mastarija (~mastarija@2a05:4f46:e04:6000:85bd:9b8e:1cdb:300e) (Client Quit)
[01:58:35] *** Quits: hololeap_ (~hololeap@user/hololeap) (Ping timeout: 240 seconds)
[01:58:51] *** Joins: kaph (~kaph@dynamic-adsl-78-12-162-98.clienti.tiscali.it)
[02:00:07] *** Joins: hololeap_ (~hololeap@user/hololeap)
[02:02:10] *** Joins: romesrf (~romes@2001:8a0:6d13:9700:55ae:5d11:5a75:11c3)
[02:02:31] *** Quits: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp) (Quit: Leaving)
[02:03:13] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 248 seconds)
[02:06:48] *** Joins: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp)
[02:08:49] *** Quits: michalz (~michalz@185.246.204.33) (Remote host closed the connection)
[02:10:50] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[02:11:41] *** Quits: romesrf (~romes@2001:8a0:6d13:9700:55ae:5d11:5a75:11c3) (Ping timeout: 256 seconds)
[02:12:07] *** Joins: vicfred (~vicfred@user/vicfred)
[02:12:55] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[02:14:23] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 246 seconds)
[02:15:29] *** Quits: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com) (Ping timeout: 248 seconds)
[02:17:50] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[02:18:56] *** Joins: Topsi (~Tobias@dyndsl-037-138-064-193.ewe-ip-backbone.de)
[02:19:57] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:21:36] *** Quits: DNH (~DNH@2a02:8109:b740:2c4:c037:4b3d:a51c:742a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:24:10] *** Joins: cheater (~Username@user/cheater)
[02:26:22] *** Joins: romesrf (~romes@2001:8a0:6d13:9700:55ae:5d11:5a75:11c3)
[02:26:44] *** Quits: cjb (~cjbayliss@user/cjb) ()
[02:26:52] *** Joins: hololeap (~hololeap@user/hololeap)
[02:27:18] *** Joins: cjb (~cjb@user/cjb)
[02:27:35] *** Quits: hololeap_ (~hololeap@user/hololeap) (Ping timeout: 240 seconds)
[02:30:57] *** Quits: romesrf (~romes@2001:8a0:6d13:9700:55ae:5d11:5a75:11c3) (Ping timeout: 256 seconds)
[02:31:49] *** Quits: chomwitt (~chomwitt@2a02:587:dc19:3600:aabd:edaf:cb83:4282) (Ping timeout: 240 seconds)
[02:32:14] *** Joins: Guest27 (~Guest27@2601:281:d47f:1590::6b90)
[02:32:31] *** Quits: BlackboardN (~Blackboar@user/BlackboardN) (Quit: ZNC 1.8.2 - https://znc.in)
[02:32:52] *** Joins: BlackboardN (~Blackboar@user/BlackboardN)
[02:33:17] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[02:33:41] *** Quits: juri_ (~juri@178.63.35.222) (Ping timeout: 245 seconds)
[02:36:27] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[02:36:37] *** Joins: DNH (~DNH@2a02:8109:b740:2c4:6d7f:99b6:5035:1068)
[02:38:02] *** Joins: redb (~nmh@user/redb)
[02:39:22] <Guest27> Is there any Monad like Maybe that short-circuits on success rather than failure?
[02:39:46] <geekosaur> perhaps you want asum?
[02:40:01] <Guest27> :t asum
[02:40:03] <lambdabot> (Foldable t, Alternative f) => t (f a) -> f a
[02:40:28] <geekosaur> > asum [Nothing, Just 5, Nothing, Just 12]
[02:40:29] <lambdabot>  Just 5
[02:40:41] <Guest27> That's exactly what I want, thanks
[02:40:51] <jackdk> mcgroin: Yes, colons and capitals begin constructors. (Haskell 98 Report, section 2.4)
[02:41:39] <Guest27> What exactly is Alternative?
[02:41:44] <mcgroin> jackdk: thx for the reference
[02:41:45] <monochrom> If you just have 2 operands, then it's x <|> y, i.e., asum [x, y] = x <|> y
[02:42:14] <monochrom> Alternative is the subclass of Applicative that adds "empty" and "<|>".
[02:42:42] <monochrom> Its behaviour for Maybe is short-circuiting upon Just.
[02:42:44] <geekosaur> it's Applicative over a Monoid, meaning it can deal with a notion of "empty"
[02:42:53] <Guest27> Ohh, it's like the Parsec <|>
[02:43:01] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:43:23] <monochrom> Yes, parsec was its main inspiration, as can be seen from the names of the methods :)
[02:44:53] <redb> Hey all, noob here. I'm writing tests for a compiler I'm writing in Haskell, and I'd like some of my test cases to live in files rather than in the test file itself. My idea was to make a list of such files, add the parsed data to a dict keyed on those file names, and then use that dict while creating my Spec for testing. Here was my attempt: https://paste.tomsmeding.com/hdf3Re04 (cobbled from example). My 
[02:44:59] <redb> problem is I'm not sure how to get the list of file names down to a single IO, which will return the filled in (name, data) tuples I can then use to make a dict (Map).
[02:48:40] <geekosaur> you may like sequence
[02:49:01] <geekosaur> :t sequence
[02:49:02] <lambdabot> (Traversable t, Monad m) => t (m a) -> m (t a)
[02:49:14] <geekosaur> % :t sequence @[]
[02:49:14] <yahb> geekosaur: Monad m => [m a] -> m [a]
[02:49:56] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:67d2:d391:3f5:bf92) (Quit: WeeChat 3.4.1)
[02:50:24] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:f37c:486d:e6c4:36d4)
[02:50:36] *** Joins: hololeap_ (~hololeap@user/hololeap)
[02:51:30] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[02:51:36] <hpc> @src Const
[02:51:37] <lambdabot> Source not found. Abort, Retry, Panic?
[02:51:55] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 240 seconds)
[02:52:05] *** Quits: acidjnk (~acidjnk@p200300d0c7049f5375c1d267ad8f6a07.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[02:52:11] <hpc> Guest27: answering the original question because it's interesting, there's also https://hackage.haskell.org/package/base-4.16.1.0/docs/Control-Applicative.html#t:Const
[02:53:00] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[02:54:03] *** Quits: jgeerds (~jgeerds@d5364b87.access.ecotel.net) (Ping timeout: 260 seconds)
[02:56:07] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[02:56:22] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[02:56:53] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi)
[02:58:05] *** Quits: hololeap_ (~hololeap@user/hololeap) (Remote host closed the connection)
[02:59:23] *** Joins: hololeap_ (~hololeap@user/hololeap)
[03:00:12] *** Joins: romesrf (~romes@2001:8a0:6d13:9700:55ae:5d11:5a75:11c3)
[03:02:29] *** Joins: machinedgod (~machinedg@24.105.81.50)
[03:03:49] *** Joins: boxscape_ (~boxscape_@p4ff0be5f.dip0.t-ipconnect.de)
[03:05:05] *** Quits: romesrf (~romes@2001:8a0:6d13:9700:55ae:5d11:5a75:11c3) (Ping timeout: 250 seconds)
[03:06:30] *** Joins: Inst (~Liam@2601:6c4:4080:3f80:ed81:d418:758d:530d)
[03:06:35] <Inst> yo
[03:06:50] <geekosaur> yes?
[03:06:52] <Inst> if I started a lib collection on Hackage, alongside someone tutoring me Haskell
[03:06:56] <Inst> called n_n, would anyone object?
[03:07:20] <Inst> n_n -> Naga Nyaya, or "Rule of Snakes", an indirect reference to Rule of Fish (Matsya Nyaya) in Hindu culture, which refers to big fish eating medium fish eating small fish
[03:07:37] <Inst> the implicit meaning is Python-eater, or rather, it's intended to be a set of educational libraries
[03:08:18] <Inst> like, for instance, a self-maintained implementation of CAPI FFI for tinyfiledialogs
[03:08:26] <Inst> various GUI tools, and so on
[03:08:37] <geekosaur> I doubt anyone would complain
[03:08:56] <Inst> but no one would contribute either, right?
[03:09:21] <Inst> n_n -> cutesy name hiding something ambitious and threatening
[03:09:47] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[03:09:56] <geekosaur> that's up to you. contributions would typically be via a github (or gitlab or darcsden or etc.) repo
[03:10:09] <Inst> yeah, we'll hopefully work on it
[03:10:27] <geekosaur> if you invite contributions in the README, you may well get them. biggest problem might be discoverability with a "cutesy" name
[03:10:40] <Inst> it's an umbrella
[03:12:29] *** Wstfgl0 is now known as Me-me
[03:12:37] *** Quits: Me-me (~me-me@tunnel690570-pt.tunnel.tserv12.mia1.ipv6.he.net) (Changing host)
[03:12:37] *** Joins: Me-me (~me-me@user/me-me)
[03:12:38] *** Quits: dextaa_5 (~dextaa@user/dextaa) (Read error: Connection reset by peer)
[03:15:19] *** Quits: DNH (~DNH@2a02:8109:b740:2c4:6d7f:99b6:5035:1068) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:15:45] *** Quits: alp_ (~alp@user/alp) (Ping timeout: 248 seconds)
[03:16:26] *** Joins: dextaa_5 (~dextaa@user/dextaa)
[03:17:05] *** Joins: InstX1 (~Liam@2601:6c4:4080:3f80:6189:32c1:ad22:f12d)
[03:17:21] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 248 seconds)
[03:17:39] *** Quits: Inst (~Liam@2601:6c4:4080:3f80:ed81:d418:758d:530d) (Ping timeout: 260 seconds)
[03:18:23] *** Quits: zeenk (~zeenk@2a02:2f04:a313:d600:8d26:ec9f:3ff6:fc94) (Quit: Konversation terminated!)
[03:20:12] *** Quits: crazazy (~user@130.89.171.62) (Ping timeout: 268 seconds)
[03:21:16] <sm> -1 on that package name, it's too opaque so makes hackage less useful
[03:21:23] *** Quits: InstX1 (~Liam@2601:6c4:4080:3f80:6189:32c1:ad22:f12d) (Ping timeout: 256 seconds)
[03:22:04] *** Quits: boxscape_ (~boxscape_@p4ff0be5f.dip0.t-ipconnect.de) (Quit: Connection closed)
[03:22:37] *** Quits: Guest27 (~Guest27@2601:281:d47f:1590::6b90) (Quit: Client closed)
[03:27:52] *** Joins: romesrf (~romes@2001:8a0:6d13:9700:55ae:5d11:5a75:11c3)
[03:29:18] *** Quits: dextaa_5 (~dextaa@user/dextaa) (Read error: Connection reset by peer)
[03:30:01] *** Joins: nahcetan (~nate@98.45.152.91)
[03:30:18] *** Quits: n8chan (~nate@98.45.152.91) (Ping timeout: 272 seconds)
[03:31:03] *** Joins: dextaa_5 (~dextaa@user/dextaa)
[03:32:59] *** Joins: alp_ (~alp@user/alp)
[03:33:17] *** Quits: romesrf (~romes@2001:8a0:6d13:9700:55ae:5d11:5a75:11c3) (Ping timeout: 256 seconds)
[03:34:01] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:36:54] *** Joins: BlackboardN_ (~Blackboar@user/BlackboardN)
[03:37:13] *** Quits: BlackboardN (~Blackboar@user/BlackboardN) (Ping timeout: 260 seconds)
[03:38:15] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 240 seconds)
[03:47:01] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[03:51:29] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 248 seconds)
[03:55:17] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Quit: ChaiTRex)
[03:55:47] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[04:00:52] *** Quits: redb (~nmh@user/redb) (Quit: leaving)
[04:03:09] <jackdk> Umbrella packages are often not what you want, because (to paraphrase Joe Armstrong) you wanted a banana but what you got was a gorilla to hold the banana and the entire jungle too
[04:03:38] *** Quits: liz (~liz@cpc84585-newc17-2-0-cust60.16-2.cable.virginm.net) (Quit: Lost terminal)
[04:04:05] <monochrom> Every tree is an umbrella in a jungle >:)
[04:05:19] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 250 seconds)
[04:06:11] *** Quits: ft (~ft@shell.chaostreff-dortmund.de) (Ping timeout: 260 seconds)
[04:06:46] *** Joins: redb (~nmh@user/redb)
[04:07:47] *** Joins: ft (~ft@shell.chaostreff-dortmund.de)
[04:13:21] *** Joins: chenqisu12 (~chenqisu1@183.217.202.44)
[04:15:24] <dons> moin moin
[04:15:51] <geekosaur> o/
[04:16:43] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[04:18:44] *** Joins: inversed (~inversed@94.13.111.159)
[04:18:47] *** Quits: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10) (Ping timeout: 268 seconds)
[04:19:04] *** Quits: inversed_ (~inversed@94.13.111.159) (Ping timeout: 272 seconds)
[04:20:44] *** Joins: juri_ (~juri@178.63.35.222)
[04:21:15] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 268 seconds)
[04:21:35] *** Joins: romesrf (~romes@2001:8a0:6d13:9700:55ae:5d11:5a75:11c3)
[04:24:59] *** Joins: InstX1 (~Liam@c-98-208-218-119.hsd1.fl.comcast.net)
[04:26:00] <redb> What's the equivalent of *> that passes the value rather than discarding it?
[04:26:11] *** Quits: romesrf (~romes@2001:8a0:6d13:9700:55ae:5d11:5a75:11c3) (Ping timeout: 268 seconds)
[04:26:16] <dolio> Passes which value?
[04:26:32] <redb> Ah, I think it's >>=
[04:26:43] <dons> :)
[04:26:47] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 260 seconds)
[04:26:51] <dons> :t (>>=)
[04:26:52] <lambdabot> Monad m => m a -> (a -> m b) -> m b
[04:26:52] <dolio> Oh, that's what you mean.
[04:27:02] <dons> :t (*>)
[04:27:03] <lambdabot> Applicative f => f a -> f b -> f b
[04:27:32] <dons> good intuition, if you're dealing with the specific value from a computation, you're probably doing something monadic, with bind (>>=)
[04:27:33] *** Quits: xff0x (~xff0x@i121-117-52-147.s41.a013.ap.plala.or.jp) (Quit: xff0x)
[04:27:49] <dons> if its just composition, its more likely something Applicative or Functor-ish. which don't switch on the specific value.
[04:29:15] <hpc> the "you could have invented monads" prophecy is once again fulfilled
[04:29:29] <dons> dude you totally just invented monads 
[04:30:14] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[04:30:28] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[04:30:54] *** Joins: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10)
[04:31:53] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:33:32] <InstX1> question about the dependent types debate
[04:33:39] <InstX1> why not just syntax a type to indicate it's a dependent type?
[04:33:43] <InstX1> i.e, data {...
[04:33:48] <InstX1> unless that's used for something already
[04:33:50] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[04:34:01] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Quit: Laa shay'a waqi'un moutlaq bale kouloun moumkine)
[04:34:50] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[04:35:59] *** Joins: statusbot2 (~statusbot@ec2-34-198-122-184.compute-1.amazonaws.com)
[04:37:33] *** Joins: MironZ5 (~MironZ@nat-infra.ehlab.uk)
[04:37:41] *** Joins: SoF9 (~skius@user/skius)
[04:37:46] *** Joins: Dorkside64 (~dorkside@208.190.197.222)
[04:37:48] *** Joins: ralu1 (~ralu@static.211.245.203.116.clients.your-server.de)
[04:37:49] *** Joins: Noinia (~Frank@77-162-168-71.fixed.kpn.net)
[04:37:58] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Remote host closed the connection)
[04:38:10] *** Dorkside64 is now known as Dorkside6
[04:38:14] *** Quits: dminuoso (~dminuoso@user/dminuoso) (Quit: ZNC 1.7.5 - https://znc.in)
[04:38:16] *** Quits: vgtw (~vgtw@user/vgtw) (Remote host closed the connection)
[04:38:18] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[04:38:18] *** Quits: red-snail1 (~snail@static.151.210.203.116.clients.your-server.de) (Quit: ZNC 1.8.2 - https://znc.in)
[04:38:34] *** Joins: vgtw (~vgtw@user/vgtw)
[04:38:37] *** Quits: Kaiepi (~Kaiepi@156.34.47.253) (Read error: Connection reset by peer)
[04:38:41] *** Quits: WhateverRabbit (~rabbit@206.81.18.26) (Ping timeout: 256 seconds)
[04:38:41] *** Quits: omantere (~pi@85-156-109-34.elisa-laajakaista.fi) (Ping timeout: 256 seconds)
[04:38:42] *** Joins: Kaipi (~Kaiepi@156.34.47.253)
[04:38:42] *** Quits: spacenautx (~spacenaut@user/spacenautx) (Quit: WeeChat 3.4.1)
[04:38:54] *** Quits: SoF (~skius@user/skius) (Read error: Connection reset by peer)
[04:38:54] *** SoF9 is now known as SoF
[04:38:59] *** Joins: WhateverRabbit (~rabbit@206.81.18.26)
[04:39:04] *** Joins: red-snail (~snail@static.151.210.203.116.clients.your-server.de)
[04:39:07] *** Quits: wolfshappen (~waff@irc.furworks.de) (Read error: Connection reset by peer)
[04:39:15] *** Quits: sweater (~sweater@206.81.18.26) (Ping timeout: 256 seconds)
[04:39:15] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Ping timeout: 256 seconds)
[04:39:15] *** ralu1 is now known as ralu
[04:39:30] *** Joins: dminuoso (~dminuoso@static.88-198-218-68.clients.your-server.de)
[04:39:38] *** Joins: omantere (~pi@85-156-109-34.elisa-laajakaista.fi)
[04:39:39] *** Joins: sweater (~sweater@206.81.18.26)
[04:39:49] *** Quits: statusbot (~statusbot@ec2-34-198-122-184.compute-1.amazonaws.com) (Ping timeout: 256 seconds)
[04:39:49] *** Quits: exarkun (~exarkun@user/exarkun) (Ping timeout: 256 seconds)
[04:39:49] *** Quits: MironZ (~MironZ@nat-infra.ehlab.uk) (Ping timeout: 256 seconds)
[04:39:49] *** Quits: kawen (~quassel@static.208.191.216.95.clients.your-server.de) (Ping timeout: 256 seconds)
[04:39:49] *** Quits: WzC (~Frank@77-162-168-71.fixed.kpn.net) (Ping timeout: 256 seconds)
[04:39:49] *** MironZ5 is now known as MironZ
[04:39:52] <jackdk> This is my first time seeing the prophecy
[04:39:57] *** Joins: exarkun_ (~exarkun@user/exarkun)
[04:39:58] *** Joins: kawen (~quassel@static.208.191.216.95.clients.your-server.de)
[04:40:03] *** Joins: wolfshappen (~waff@irc.furworks.de)
[04:40:15] <hpc> http://blog.sigfpe.com/2006/08/you-could-have-invented-monads-and.html
[04:40:34] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:40:34] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:40:34] *** Joins: wroathe (~wroathe@user/wroathe)
[04:41:55] <geekosaur> InstX1, the real problem is once they go in people will start using them and then people who don't know or care will suddenly have to turn on -XDependentHaskell or whatever and possibly deal with weird syntax and/or errors
[04:42:39] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 256 seconds)
[04:42:39] *** Quits: zzz (~z@user/zero) (Ping timeout: 256 seconds)
[04:42:56] *** Joins: Unode_ (~Unode@194.94.44.220)
[04:42:59] *** Joins: bgamari_ (~bgamari@70.16.102.89)
[04:43:00] *** Joins: zero (~z@user/zero)
[04:43:13] *** Quits: absence (torgeihe@hildring.pvv.ntnu.no) (Ping timeout: 256 seconds)
[04:43:13] *** Quits: noctuks (9wxBRvrIcP@user/noctux) (Ping timeout: 256 seconds)
[04:43:13] *** Quits: wrengr (~wrengr@249.189.233.35.bc.googleusercontent.com) (Ping timeout: 256 seconds)
[04:43:13] *** Quits: statusfailed (~statusfai@statusfailed.com) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: martin02_ (~silas@141.84.69.76) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: sshine (~simon@exocortex.online) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: tomku (~tomku@user/tomku) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: Profpatsch (~Profpatsc@static.88-198-193-255.clients.your-server.de) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: dixie (~dixie@real.wilbury.sk) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: meejah (~meejah@rutas.meejah.ca) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: icebreaker (~icebreake@user/icebreaker) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: cods (~fred@82-65-232-44.subs.proxad.net) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: wz1000 (~zubin@static.11.113.47.78.clients.your-server.de) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: bgamari (~bgamari@70.16.102.89) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: Unode (~Unode@194.94.44.220) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: Ekho (~Ekho@user/ekho) (Ping timeout: 256 seconds)
[04:43:47] *** Unode_ is now known as Unode
[04:43:57] *** Joins: derelict (~derelict@user/derelict)
[04:44:21] *** Quits: APic (apic@apic.name) (Ping timeout: 256 seconds)
[04:44:21] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Ping timeout: 256 seconds)
[04:44:21] *** Quits: [exa] (exa@user/exa/x-3587197) (Ping timeout: 256 seconds)
[04:44:21] *** Quits: haveo (~haveo@sl35.iuwt.fr) (Ping timeout: 256 seconds)
[04:44:21] *** Quits: hltk (~hltk@hltk.fi) (Ping timeout: 256 seconds)
[04:44:29] *** Joins: fjmorazan_ (~quassel@user/fjmorazan)
[04:44:58] *** Joins: statusfailed (~statusfai@statusfailed.com)
[04:44:59] *** Joins: dixie (~dixie@real.wilbury.sk)
[04:44:59] *** Joins: absence (torgeihe@hildring.pvv.ntnu.no)
[04:45:00] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi) (Quit: Leaving.)
[04:45:02] *** Joins: wrengr (~wrengr@249.189.233.35.bc.googleusercontent.com)
[04:45:09] *** Joins: noctuks (mk6gDPckYi@user/noctux)
[04:45:11] *** Joins: meejah (~meejah@rutas.meejah.ca)
[04:45:15] *** Joins: sshine (~simon@exocortex.online)
[04:45:22] *** Joins: cods (~fred@82-65-232-44.subs.proxad.net)
[04:45:27] *** Joins: icebreaker (~icebreake@user/icebreaker)
[04:45:29] *** Joins: tomku (~tomku@user/tomku)
[04:45:29] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[04:45:42] *** Joins: haveo (~haveo@sl35.iuwt.fr)
[04:45:46] *** Joins: [exa] (exa@srv3.blesmrt.net)
[04:45:54] *** Joins: hltk (~hltk@hltk.fi)
[04:53:01] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[04:53:22] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 29.0.50)
[04:55:24] *** Joins: xff0x (~xff0x@i121-117-52-147.s41.a013.ap.plala.or.jp)
[04:56:12] *** Joins: APic (~apic@apic.name)
[04:56:27] *** Joins: wz1000 (~zubin@static.11.113.47.78.clients.your-server.de)
[04:56:42] *** Joins: Profpatsch (~Profpatsc@static.88-198-193-255.clients.your-server.de)
[04:56:45] *** Joins: martin02_ (~silas@141.84.69.76)
[04:57:07] *** Joins: Ekho (~Ekho@user/ekho)
[04:57:42] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[05:03:35] *** Quits: alp_ (~alp@user/alp) (Ping timeout: 260 seconds)
[05:04:33] *** Quits: gurkenglas (~gurkengla@dslb-178-012-018-212.178.012.pools.vodafone-ip.de) (Ping timeout: 248 seconds)
[05:05:41] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[05:07:54] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[05:12:04] *** Quits: Topsi (~Tobias@dyndsl-037-138-064-193.ewe-ip-backbone.de) (Quit: Leaving.)
[05:13:17] *** Joins: deadmarshal_ (~deadmarsh@95.38.113.9)
[05:16:45] *** Quits: InstX1 (~Liam@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 268 seconds)
[05:17:53] *** Quits: deadmarshal_ (~deadmarsh@95.38.113.9) (Ping timeout: 248 seconds)
[05:18:34] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[05:25:21] *** Quits: xff0x (~xff0x@i121-117-52-147.s41.a013.ap.plala.or.jp) (Ping timeout: 248 seconds)
[05:27:52] *** Joins: Inst[m] (~instrmatr@2001:470:69fc:105::1:903e)
[05:30:58] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[05:31:18] *** Joins: romesrf (~romes@2001:8a0:6d13:9700:55ae:5d11:5a75:11c3)
[05:31:59] *** Joins: InstX1 (~Liam@c-98-208-218-119.hsd1.fl.comcast.net)
[05:32:04] <InstX1> axman6
[05:32:12] *** Joins: jbox (~jbox@user/jbox)
[05:32:13] <InstX1> if you were making an educational lib collection for Haskell, what would you include?
[05:32:22] <InstX1> I'd def add an interface for NativeFileDialog or TinyFileDialogs
[05:32:29] *** Quits: redb (~nmh@user/redb) (Ping timeout: 246 seconds)
[05:32:49] <Axman6> import Prelude; -- done
[05:33:01] <InstX1> actually, i'd also consider a custom Prelude
[05:33:20] <InstX1> so learners could end up reimplementing basic Haskell functions
[05:33:24] *** Joins: redb (~nmh@136.49.49.211)
[05:34:09] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[05:34:14] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 246 seconds)
[05:35:57] *** Joins: vysn (~vysn@user/vysn)
[05:36:13] *** Quits: romesrf (~romes@2001:8a0:6d13:9700:55ae:5d11:5a75:11c3) (Ping timeout: 260 seconds)
[05:37:44] *** Quits: redb (~nmh@136.49.49.211) (Ping timeout: 246 seconds)
[05:38:07] *** Joins: Guest27 (~Guest27@2601:281:d47f:1590::6b90)
[05:39:29] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 246 seconds)
[05:40:02] *** Joins: mbuf (~Shakthi@122.173.67.210)
[05:40:39] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[05:45:07] <dsal> I've written a lot of haskell code, but I've not written anything that sounds like "file dialog"
[05:46:06] <Axman6> yeah me either, sounds like something I have never wanted
[05:46:46] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[05:47:00] *** Joins: neurocyte861449 (~neurocyte@IP-045093110082.dynamic.medianet-world.de)
[05:47:00] *** Quits: neurocyte861449 (~neurocyte@IP-045093110082.dynamic.medianet-world.de) (Changing host)
[05:47:00] *** Joins: neurocyte861449 (~neurocyte@user/neurocyte)
[05:47:07] <Axman6> I'm pretty happy writing BS.readFile filePath
[05:47:13] *** Joins: redb (~nmh@136.49.49.211)
[05:48:42] <dsal> I do have some file selection stuff in my gopro uploader which is `/some/path/*` (globbed by the shell) -> list of ordered parts of files by filename patterns.  That's a little fancy.  Similar thing with given a directory, find files that seem like they'd be related to media (which is really a depth traversal through a tree and a map of filename to the path where I found it, I think).  Otherwise, argv does me pretty well.
[05:48:52] *** Joins: romesrf (~romes@2001:8a0:6d13:9700:55ae:5d11:5a75:11c3)
[05:49:26] <InstX1> your former students probably wanted it, though, Axman6
[05:49:26] *** Quits: neurocyte86144 (~neurocyte@user/neurocyte) (Ping timeout: 268 seconds)
[05:49:26] *** neurocyte861449 is now known as neurocyte86144
[05:49:32] <InstX1> oh hi romesrf, thanks for everything
[05:50:12] <Axman6> We never did anything with files
[05:50:19] <dsal> InstX1: What does one use a file dialog for?
[05:50:30] <InstX1> dsal: to get a filepath
[05:50:36] <InstX1> through a GUI
[05:50:54] <InstX1> basically, the notion is that people are less likely to hurt themselves if they have to do it through the GUI
[05:51:05] <jackdk> That notion is completely false.
[05:51:16] <dsal> Oh, you're making GUIs, too?  That seems unnecessarily difficult.
[05:51:45] <InstX1> i mean, not really, but just calling the native OS file selectors
[05:51:54] *** Quits: redb (~nmh@136.49.49.211) (Ping timeout: 268 seconds)
[05:52:22] <dsal> I've always seen file dialogs as a compromise for having an application that has a GUI.  They're sometimes not in the way, but often are extremely limiting.
[05:52:44] <InstX1> i mean i'm closer to noob / poweruser levels, as opposed to developer
[05:52:58] <InstX1> specifying a filepath within the app instead of through args from command line feels safer
[05:53:13] <dsal> Most of the GUI stuff I work with are photo or video editing which have their own file picker concepts because filesystem paths don't fit the paradigm in any useful way.
[05:53:23] <InstX1> i see
[05:53:37] *** Quits: romesrf (~romes@2001:8a0:6d13:9700:55ae:5d11:5a75:11c3) (Ping timeout: 248 seconds)
[05:54:00] <dsal> How is it safer?  On a mac, you can always drag a file from Finder into terminal safely.  But I don't know that I do that too often.
[05:54:18] <dsal> I think I've also done that on Linux, but I don't do it often enough to know.  heh
[05:54:31] <exarkun_> What does "safer" even mean?  I've never once cut myself while typing a filename into a shell.  Is that a thing that happens to people?
[05:54:54] <dsal> shells can be sharp
[05:54:58] <jackdk> I cut my feet on a shell once, you gotta be careful when wandering around rock pools
[05:55:24] <Axman6> hope it wasn't a cone shell
[05:55:25] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[05:55:26] <InstX1> hum, windows doesn't have io.sys anymore
[05:55:35] <InstX1> i sort of worry about accidentally selecting io.sys and causing the system to stop booting
[05:55:40] <jackdk> `what_year_is_it.jpg`
[05:55:48] <InstX1> not 1995
[05:55:55] <jackdk> `IO.SYS` is an MS-DOS thing
[05:56:03] <InstX1> but seriously, some people are just not comfortable with shell / command line
[05:56:09] <exarkun_> Why are you going to accidentally type "io.sys" but you're not going to accidentally click on "io.sys"?
[05:56:11] <InstX1> it's a convenience factor
[05:56:17] <jackdk> (and so Win[9x..ME])
[05:56:19] <dsal> And you think people are not comfortable with a shell are going to write GUI programs effectively?
[05:56:30] <InstX1> it's not true GUI
[05:56:38] <InstX1> just a command prompt program that can call native fileloaders
[05:56:38] <exarkun_> InstX1: Okay.  "I'm more comfortable with a GUI file picker" is fine.  It just has nothing to do with safety, I think.
[05:56:40] <monochrom> Does GHC even run on Win9x?
[05:56:49] *** Joins: redb (~nmh@136.49.49.211)
[05:57:28] <dsal> So is the idea to have something like `popUpAWindowToAskAUserForAFile >>= doStuffToFile` ?
[05:58:21] <monochrom> I once "cut" myself with command line shell things when I mistakenly wrote "cmd infile outfile" when it should be "cmd outfile infile".
[05:58:43] <Axman6> yeah positional arguments suck
[05:59:11] <monochrom> <sarcasm>"Clearly", this could have been avoided by popping up one dialog for infile, and another one for outfile</sarcasm>
[05:59:15] <dsal> The interface feels weird, but in the topic of education, I don't think teaching people to build a strange UX just to avoid argv is good.  I'd be pretty sad if I typed `cp` and it popped up two windows.
[05:59:31] <exarkun_> dsal: maaaybe
[05:59:48] <exarkun_> dsal: what if it popped up two windows for passing files to cp in a capability-secure manner
[05:59:50] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[05:59:53] <exarkun_> dsal: and also your whole os worked like that
[05:59:59] <dsal> Let's call it scp
[06:00:33] <monochrom> Axman6: Lest you really think it's only position, I wrote "gcc -o foo.c foo", too. >:)
[06:00:35] <Axman6> for slow copy
[06:00:47] <Axman6> monochrom: ha, oof
[06:00:59] <Axman6> shells need typesd
[06:01:02] <Axman6> types*
[06:01:10] <dsal> It just seems frustrating to use.  The two programs I use that have file popups occasionally get into a weird state with them and have to be restarted, which is not a great experience.  heh
[06:01:28] <InstX1> dsal: just saying it's what I, and presumably a bucnh of other people, would be accustomed to
[06:01:30] <InstX1> also iirc visual basic
[06:01:34] <dsal> monochrom: That looks like you were trying to write that one famous GHC bug.
[06:01:41] <InstX1> devs don't need to know command line, can do GUI programming
[06:02:15] <exarkun_> true
[06:02:26] <exarkun_> but /good/ devs need to know command line
[06:02:28] *** Quits: redb (~nmh@136.49.49.211) (Ping timeout: 260 seconds)
[06:02:34] <dsal> I don't know anything about visual basic.  I've written smalltalk and some objective C GUI stuff in the past.  But that's and environment built around those GUI toolkits.
[06:02:51] <InstX1> what else would you stuff into a newbie lib?
[06:02:57] <InstX1> newbie lib collection?
[06:03:02] *** Joins: abastro (~abab9579@143.248.229.217)
[06:03:11] <InstX1> I'd like to put in edMonad or something like that, i.e, demo programs that can be torn apart
[06:03:12] <dsal> I think it's totally possible to be born into smalltalk and never see a CLI.
[06:03:42] <exarkun_> dsal: I don't think you'd get very far
[06:03:59] <exarkun_> dsal: you'd have almost no one to learn from
[06:03:59] <InstX1> i'm supposed to be coding something
[06:04:02] <dsal> I'm imagining an alternate universe where smalltalk is more widely used.  :)
[06:04:04] <InstX1> that's going to take a 56,000 wordlist
[06:04:06] <exarkun_> ah, well, yes
[06:04:11] <monochrom> I was born into the handheld calculator era and was spared of the abascus except for historical interest. (I was in Hong Kong.)
[06:04:15] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 260 seconds)
[06:04:17] <InstX1> then reprocess it into a 46656 word list with numbers
[06:04:19] <dons> i think its possible to be born into react/js + vs code and never/rarely see a CI
[06:04:20] <exarkun_> I was thinking that maybe in another 50 years we'd have developed enough stuff that you could do reasonably well with no cli
[06:04:26] <exarkun_> but not in 2022 in this timeline
[06:04:28] <InstX1> monochrom: my aunt was born into the slide rule era
[06:04:35] <dons> there'a a lot of custom tooling to do UI development without ever knowing your on a unix
[06:04:42] <InstX1> i hear that you can do mental math with slide rules
[06:05:02] <exarkun_> dons: still waiting to meet a good programmer who only writes react/js
[06:05:17] <monochrom> Looking at 40 years of history, I realize that no old technology can stay "must learn" forever.
[06:05:21] <exarkun_> in fact, if you know any I might hire them
[06:05:25] <InstX1> monochrom: pencils
[06:05:30] <dsal> Oh  no.  I just realized I had a slide rule in my car last night, and I just put my car on a boat.  It's supposed to be empty.  I don't know where my slide rule is.
[06:05:42] <InstX1> like, are we going to do everything via touchcreen in the future?
[06:05:58] <InstX1> trash cans, also
[06:06:05] <InstX1> toilets transform very quickly, though
[06:06:24] <dsal> Ugh.  Well, that may suck.  Finding a new slide rule might be hard.
[06:06:43] <InstX1> https://www.google.com/search?q=slide+rule&source=lnms&tbm=shop&sa=X&ved=2ahUKEwi47Imz5Pv2AhWvRjABHWM4ARcQ_AUoAnoECAEQBA&biw=1592&bih=1359&dpr=1
[06:06:45] <exarkun_> dsal: https://www.instructables.com/Making-Your-Own-Slide-Rule/
[06:06:50] <dsal> I used to write a lot of scheme on PalmOS and that was pretty nice.
[06:06:57] <dsal> exarkun_: I used to do that in elementary school.  heh
[06:07:37] <dsal> Just used a regular ruler and a log table.
[06:07:46] <dsal> Then I learned the commandline.
[06:08:32] *** Joins: redb (~nmh@136.49.49.211)
[06:08:55] *** Quits: abastro (~abab9579@143.248.229.217) (Ping timeout: 260 seconds)
[06:08:56] <dsal> Actually, I wrote a ton of RPL and Saturn assembler in high school.  Not quite what I'd call a CLI there.  I used a stack more than dialogs, thoug.
[06:12:58] *** Quits: kaph (~kaph@dynamic-adsl-78-12-162-98.clienti.tiscali.it) (Ping timeout: 260 seconds)
[06:13:37] *** Quits: martin02_ (~silas@141.84.69.76) (Read error: Connection reset by peer)
[06:14:02] *** Joins: martin02_ (~silas@141.84.69.76)
[06:14:58] *** Joins: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp)
[06:15:25] <Axman6> my intro to programming was Logo. fun times
[06:17:12] *** Joins: seydar (~seydar@pool-108-31-245-5.washdc.fios.verizon.net)
[06:18:18] <seydar> I wrote three styles of an echo server (sequential, forking, process pool): https://paste.tomsmeding.com/aZFwOVUf. I'd love some feedback if anyone is feeling hateful
[06:18:58] <monochrom> <grumpy>I hate echo servers.</grumpy>
[06:19:31] <Axman6> @hoogle bracketOnError
[06:19:31] <lambdabot> Control.Exception bracketOnError :: IO a -> (a -> IO b) -> (a -> IO c) -> IO c
[06:19:31] <lambdabot> Control.Exception.Base bracketOnError :: IO a -> (a -> IO b) -> (a -> IO c) -> IO c
[06:19:31] <lambdabot> Control.Monad.Catch bracketOnError :: MonadMask m => m a -> (a -> m c) -> (a -> m b) -> m b
[06:19:36] <monochrom> Uh what's in Common?
[06:19:45] <jackdk> it's at the bottom of the paste
[06:19:55] <monochrom> :(
[06:19:59] <Axman6> I feel like returjning the socket is unnecessary, it's neber used
[06:20:10] <Axman6> never*
[06:20:17] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 248 seconds)
[06:20:17] <Axman6> fark, learn to type Axman
[06:23:07] <seydar> Axman6: I have to return the socket in Pool.hs because I need to match the type
[06:23:38] <seydar> actually I could prolly just change the type signature to match what `concurrently` returns
[06:24:54] <seydar> monochrom: i'm looking for more practice, do you have a better/more fun server that I should write?
[06:24:55] <Axman6> you're also redundantly returning the socket everywhere. your code looks like return socket >> return socket >> return socket >> ... if you unrol the recursion
[06:25:02] <dons> wish i could edit little snippets like that and suggest changes/generate colorized unified diff via web
[06:25:11] <dons> would be easy to mentor async , very cheaply
[06:25:24] <dons> we sort of used to do that in hpaste , is there an equiv now?
[06:25:32] <Axman6> if you need it to return the socket, do something like (\sock -> recursiveHandler socker >> pure socket)
[06:26:57] <Axman6> seydar: you will create an infinite number of thereads in your forking version. change it to: accept server >>= forkIO . handleClient
[06:27:42] <Axman6> what you have now is creating as many threads as possible, as quickly as possible, each trying to accept on the socket instead of accepting and then forking
[06:27:45] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 248 seconds)
[06:29:48] *** Quits: Guest27 (~Guest27@2601:281:d47f:1590::6b90) (Ping timeout: 250 seconds)
[06:30:01] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[06:30:35] *** Joins: abastro (~abab9579@143.248.229.217)
[06:31:18] <dons> didn't review for semantics, but just stylisticalyl. https://gist.github.com/donsbot/106a83b8d7485bef312917cc714cb913 
[06:31:41] <dons> you might want to install an LSP (at least, I find it very handy to use the Haskell LSP to help infer types/module imports/lints)
[06:31:50] <jackdk> Does anyone have a link describing the magic cabal comment you can use to make a single .hs fil depend on hackage packages? My search-fu is failing me
[06:32:03] <dons> one thing to do is not pass constant arguments around a loop, instead, bind them and share with an inner loop (`go` here)
[06:32:30] <Axman6> jackdk: it's cabal v2-run
[06:32:45] <Axman6> comment looks like {- cabal: buildDepends: ... -} IIRC
[06:32:55] <Axman6> https://cabal.readthedocs.io/en/3.6/cabal-commands.html?highlight=run#cabal-v2-run
[06:33:05] <Axman6> I actually happened to have the link still open, heh
[06:33:50] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[06:34:58] <seydar> Axman6: oooooooooooooh that is a very good point
[06:35:07] *** Quits: abastro (~abab9579@143.248.229.217) (Ping timeout: 260 seconds)
[06:35:10] *** Joins: romesrf (~romes@2001:8a0:6d13:9700:55ae:5d11:5a75:11c3)
[06:35:15] <abastro[m]> <hpc> "http://blog.sigfpe.com/2006/08/..." <- Well to be fair, the blog states that you might have invented monads while not using haskell, but goes on with haskell examples
[06:35:16] <seydar> dons: thank you! greatly appreciate the style help
[06:35:40] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[06:35:55] <abastro[m]> Like they could easily go "But this is so easy in X language.."
[06:36:11] <abastro[m]> "Why would I ever have to do that"
[06:36:40] <dons> can be useful to install hlint, too, to get a few style fixes (the Haskell LSP will pick that up in vs code if you use it)
[06:37:23] <Axman6> abastro[m]: the answer is "I thought you liked DRY? when you recognise the many shapes Monads come in, you'll see that _a lot_ of code you write can be abstracted to work for all monads"
[06:38:00] <dolio> The audience is people learning monads in Haskell.
[06:38:07] <abastro[m]> Only async programming is the one where they could recognize monads, and as that is the only place, they just go with built-in async-await
[06:38:16] *** Joins: nun57 (~nun@61.140.176.155)
[06:38:27] <nun57> hey gay
[06:39:06] *** Joins: dextaa_54 (~dextaa@user/dextaa)
[06:39:10] <seydar> dons: can you explain why you made `n` eagerly evaluated in gi your paste? (https://gist.github.com/donsbot/106a83b8d7485bef312917cc714cb913)
[06:39:15] <Axman6> seydar: ... doesn't your `open` code close the socket before it returns it? 
[06:39:19] <abastro[m]> So ppl who are already quite devoted to learn haskell and trying to understand how haskell monads are used? I see.
[06:39:22] *** Joins: res0nat0r0844 (~Fletch@dia.whatbox.ca)
[06:39:23] *** Quits: haritz (~hrtz@user/haritz) (Ping timeout: 256 seconds)
[06:39:23] *** Quits: simpleauthority (~simpleaut@user/simpleauthority) (Ping timeout: 256 seconds)
[06:39:23] *** Quits: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof) (Ping timeout: 256 seconds)
[06:39:29] *** Quits: romesrf (~romes@2001:8a0:6d13:9700:55ae:5d11:5a75:11c3) (Ping timeout: 248 seconds)
[06:39:35] *** Joins: Goodbye_Vincent1 (cyvahl@freakshells.net)
[06:39:40] *** Quits: res0nat0r084 (~Fletch@dia.whatbox.ca) (Read error: Connection reset by peer)
[06:39:49] <abastro[m]> Yep I somehow read it as an introduction of monads for everyone
[06:39:56] <dons> seydar: probably just habit at this point, since there was a match against 0 , the strictness can be inferred
[06:39:57] *** Quits: a1paca (~a1paca@user/a1paca) (Ping timeout: 256 seconds)
[06:40:07] *** Joins: haritz (~hrtz@62.3.70.206)
[06:40:07] *** Quits: haritz (~hrtz@62.3.70.206) (Changing host)
[06:40:07] *** Joins: haritz (~hrtz@user/haritz)
[06:40:11] *** Joins: dysfigured (~dfg@dfg.rocks)
[06:40:12] *** Joins: simpleauthority (~simpleaut@user/simpleauthority)
[06:40:13] <seydar> Axman6: it 100% looks like that. i swear the code works! i stole it from the example on the Network.Socket page
[06:40:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[06:40:20] <seydar> dons: why does the strictness matter?
[06:40:28] <dons> generally, if I see a tail call passing an unevaluated arithmetic expression, i'll want to put a ! on it to make sure it compiles without a lazy thunk building in the arg
[06:40:31] *** Quits: dfg (~dfg@user/dfg) (Ping timeout: 256 seconds)
[06:40:31] *** Joins: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof)
[06:40:56] <Axman6> I'm very surprised that code works, I guess I don't know what the semantics of bracketOnError are
[06:40:57] <dons> go n = .. something ..; go (n-1) -- is lazy in `n` unless there's something that's going to force the value
[06:41:05] *** Quits: dextaa_5 (~dextaa@user/dextaa) (Ping timeout: 256 seconds)
[06:41:05] *** Quits: noctux (~noctux@user/noctux) (Ping timeout: 256 seconds)
[06:41:05] *** Quits: Goodbye_Vincent (cyvahl@freakshells.net) (Ping timeout: 256 seconds)
[06:41:05] *** Quits: Cheery (~cheery@7-239-179-185.static.tentacle.fi) (Ping timeout: 256 seconds)
[06:41:05] *** Quits: janus (janus@anubis.0x90.dk) (Ping timeout: 256 seconds)
[06:41:05] *** Quits: ario (~ario@159.65.220.102) (Ping timeout: 256 seconds)
[06:41:05] *** dextaa_54 is now known as dextaa_5
[06:41:05] *** Goodbye_Vincent1 is now known as Goodbye_Vincent
[06:41:35] <dons> very common source of unexpected thunks is forgetting to ! an accumulating parameter in a loop. in your case, you have a match against 0 and it counts down from 2, so nothing to worry about
[06:42:00] <dons> still, i think its good style to be explicit about strictness where it matters (just like writing the type signature)
[06:42:08] *** Joins: a1paca (~a1paca@user/a1paca)
[06:42:39] *** Joins: janus (janus@anubis.0x90.dk)
[06:42:55] *** Joins: ario (~ario@159.65.220.102)
[06:42:58] *** Joins: Cheery (~cheery@7-239-179-185.static.tentacle.fi)
[06:43:22] *** Joins: noctux (~noctux@user/noctux)
[06:44:23] *** dysfigured is now known as dfg
[06:44:32] *** Quits: dfg (~dfg@dfg.rocks) (Changing host)
[06:44:32] *** Joins: dfg (~dfg@user/dfg)
[06:44:36] <abastro[m]> I finally come to realize that why ppl complain about monad tutorials
[06:45:24] <nun57> monad tutorials?
[06:45:25] <abastro[m]> It's because haskell is too hard for them, but many ppl started saying about monads, so they try to skim through it to know what it is
[06:45:57] <abastro[m]> And then frustrated because most monad tutorials are written for haskell programmers.
[06:46:08] <abastro[m]> Haskell beginners*
[06:46:23] <monochrom> That's only the beginner side.
[06:46:33] <abastro[m]> So they are extremely frustrated because now they have to learn this exotic difficult language to learn the concept of monad
[06:46:56] <monochrom> The those-in-the-know side complain for a different reason, probbably the opposite reason.
[06:47:03] <Axman6> that's why I send them this: https://tomstu.art/refactoring-ruby-with-monads
[06:47:06] <monochrom> Those monad tutorials are sacrilegeous.
[06:47:17] <abastro[m]> When they just want to know what monad broadly is
[06:47:28] <abastro[m]> Oh, I was talking about the perspective from outside. Yes.
[06:48:00] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[06:48:14] <Axman6> For anyone who's familliar with <GENERIC OOP LANGUAGE>, the above link is a good introduction to how several things which feel unrelated actually follow the same patterns all the time
[06:48:21] *** Quits: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp) (Quit: xff0x)
[06:48:34] <abastro[m]> Haskellers have other reasons to dislike monad tutorials
[06:49:04] <dolio> Yeah, usually they're written by people who don't understand monads.
[06:49:13] <Axman6> > concat . transpose $ ["ABC","123","wxyz","89"]
[06:49:15] <lambdabot>  "A1w8B2x9C3yz"
[06:49:27] <dons> cute 
[06:49:40] *** Joins: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp)
[06:50:16] <Axman6> just had a though about an alternative monad implementation for lists which interleves instead of concat
[06:50:55] <abastro[m]> And because the vocal minority does not understand monads and write tutorials, ppl say that monad is not well-researched concepts
[06:51:12] <abastro[m]> Since they think it should be something that could be explained in a few lines.
[06:51:58] <Axman6> I've never heard anyone say it's not a well researched concept
[06:52:18] <monochrom> Find out what's wrong with the example in this monad tutorial: https://betterprogramming.pub/monads-are-just-fancy-semicolons-ffe38401fd0e
[06:52:25] <abastro[m]> There is a StackOverflow comment on this
[06:52:31] <Axman6> it literally is something that can be explained in a few lines, the monad concept is _incredibly simple_, but the impleication of such a simple abstraction are massive
[06:54:17] <Axman6> implications*
[06:54:21] <monochrom> Ugh I thought people's impression on monad was "academic" so "way too well researched" >:)
[06:54:39] <abastro[m]> Hm how would you explain monad in a few lines btw
[06:55:02] <monochrom> I might write the laws. Or I might just decline.
[06:55:09] <Axman6> return :: a -> m a; (>>=) :: m a -> (a -> m b) -> m b
[06:55:19] <Axman6> + laws
[06:55:27] *** Joins: AlexNoo_ (~AlexNoo@178.34.163.99)
[06:55:31] <monochrom> How would you explain computer programming in a few lines?
[06:56:24] <Axman6> write words, computer do things
[06:56:47] <abastro[m]> I will just say wrong things which will still potentially click for them
[06:57:14] <InstX1> monads are parameterized data types that allow you to access them only through functions designed for them
[06:57:15] <monochrom> That's a different kind of "explain". It works for people who won't go into computer programming.
[06:57:29] <InstX1> or through fmap, which calls a method designed for the specific monad
[06:57:55] *** Quits: AlexZenon (~alzenon@178.34.161.168) (Ping timeout: 260 seconds)
[06:57:56] <InstX1> the do syntax / bind also causes sequencing by default, whereas with applicatives sequencing requires more specific functions for that to happen
[06:58:17] <InstX1> sacrilegious?
[06:58:26] <seydar> dons: i'm learning about unexpected thunks here: https://well-typed.com/blog/2020/09/nothunks/. it sounds like it's saying that they're memory bloat during runtime?
[06:58:53] <seydar> Axman6: i'm gonna play with the code and see if i can write code that not only works but also makes sense
[06:58:57] <InstX1> the methods are part of where the magic happens with a monadic type; i.e, you can program logic into the accessor methods
[06:59:02] *** Joins: abastro (~abab9579@143.248.229.217)
[06:59:07] <abastro> Hmm
[06:59:18] <monochrom> Whereas "explain monad"'s "explain" is a taller order in this context because this time the target audience will need to write Haskell code successfully. Not a pedestrian wanting just a popsci fix.
[06:59:18] *** Quits: AlexNoo (~AlexNoo@178.34.161.168) (Ping timeout: 272 seconds)
[06:59:18] <InstX1> am i doing it wrong?
[06:59:19] *** Quits: Alex_test (~al_test@178.34.161.168) (Ping timeout: 260 seconds)
[06:59:45] <abastro> No, I mean, they first wanted to know what is monads
[06:59:50] <abastro> Yet they did not understood
[06:59:54] <abastro> in the stackoverflow
[06:59:57] <InstX1> monads are a meme
[06:59:58] <abastro> Hm let me dig it up
[07:00:35] <InstX1> oh, by the way, i finally understood what a category is
[07:00:41] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[07:00:53] <InstX1> a set of objects with morphisms (arrows) between them that create 1-1 relations
[07:00:59] <abastro> Congrats (if you did for real)
[07:01:08] <abastro> This stackoverflow btw: https://stackoverflow.com/questions/44965/what-is-a-monad
[07:01:33] <abastro> In the first answer, you can see Breton's comments
[07:01:53] <InstX1> and iirc a binary operation defined on the morphisms
[07:02:35] <InstX1> morphisms are associative, there's an identity morphism, and commutative
[07:02:37] <abastro> https://paste.tomsmeding.com/n5dWSJNU
[07:02:39] <abastro> The comment part
[07:02:55] <InstX1> well, not commutative
[07:03:16] *** Joins: Alex_test (~al_test@178.34.163.99)
[07:03:20] <abastro> Their impression seems to be: "Because the authors of haskell are sadomasochists and decided that you should do something stupidly complex to accomplish simple things, so you HAVE to learn monads to use haskell, not because they're in any way useful in themselves"
[07:03:21] <InstX1> ((a->b) apply b-> c) -> (a->c)
[07:03:25] *** Joins: AlexZenon (~alzenon@178.34.163.99)
[07:03:58] <InstX1> monads are just (primarily) a way to force you to use the accessor methods, which have embedded logic into them
[07:04:28] <abastro> monochrom: How do you think of the comment - which seem to explain the general sentiment
[07:04:47] <monochrom> Soon you will find me badmouthing all of stackoverflow altogether, not just blogs and monad tutorials.
[07:04:50] <InstX1> abastro: monads are getting into other languages
[07:04:59] <abastro> Hm are they
[07:05:02] <InstX1> and monad tutorials in other languages are better than haskell monad tutorials
[07:05:02] <monochrom> Sorry I don't bother to read stackoverflow.
[07:05:09] <InstX1> javascript has monads now
[07:05:22] <abastro> Well, monochrom, my point is that 1. stackoverflow is the go-to site for programmers to solve problems
[07:05:35] <abastro> 2. The comment is heavily upvoted, which means that there are many sympathizers
[07:06:11] *** Quits: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp) (Quit: xff0x)
[07:06:15] <monochrom> I know. I still don't care. Let them have cake.
[07:06:17] <abastro> 3. Just ignoring them as badmouthing could be seen as an elitist attitude for outsiders
[07:06:24] <InstX1> "because the Haskell community are elitists and refuse to teach monads properly"
[07:06:29] <InstX1> that's the correct line
[07:06:37] <monochrom> No, I will be the one badmouthing them.
[07:06:41] <InstX1> people have concluded monads are gatekeeping in the Haskell community
[07:07:02] <abastro> InstX1: Yeah, somewhat
[07:07:08] *** Quits: seydar (~seydar@pool-108-31-245-5.washdc.fios.verizon.net) (Ping timeout: 268 seconds)
[07:07:57] <abastro> Anyway, tbh I think this is the aspect ppl call out haskell community for being elitist.
[07:07:58] <monochrom> So I was teaching a C-and-Unix course. I put this question on an exam. Using stdio.h how do you check that stdin has hit end-of-file.
[07:08:21] <monochrom> A few students answered "fseek then ftell".
[07:08:59] <monochrom> My marking TA discovered that they probably got this approach from stackoverflow, since stackoverflow had this question and this solution.
[07:09:11] <InstX1> if i post a "this is what a monad is and haskell community should feel bad for gatekeeping" onto stackoverflow, will I be misinterpreting monads?
[07:09:34] <monochrom> I am elitist and I think stackoverflow is the blind leading the blind and here is my anecdote.
[07:09:36] <dolio> Probably.
[07:09:46] <abastro> Well, InstX1, tbh it kind of would be.
[07:11:22] <abastro> monochrom: Do you also think knowledge base should be distributed by the ppl who know more & better?
[07:11:57] <monochrom> I do my share of distribution at my http://www.vex.net/~trebla/haskell/
[07:12:17] <abastro> Oh wait, is it yours
[07:12:28] <monochrom> But stackoverflow has all the wrong mechanics and incentives.
[07:12:49] <abastro> Hmm, could you elaborate?
[07:12:54] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:13:00] <monochrom> On that point, it's not just me, there are former stackoverflow answerers who blogged on why they quit.
[07:13:11] <abastro> !
[07:13:16] <d34df00d> As I got slightly older (but in no way wiser, sadly) I figured trying to change somebody else's attitude is both pointless and futile.
[07:13:29] <d34df00d> So nowi I just use my wannabe-knowledge of certain things to flex.
[07:13:34] <InstX1> the 1226 is actually good
[07:13:50] <monochrom> My personal impression though is that upvoting is correlated to length rather than correctness.
[07:13:59] <abastro> Sorry that my attitude is a bit intimidating and is hard to change...
[07:14:07] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:14:16] <d34df00d> abastro: nope that's good, intimidating attitudes are best attitutdes.
[07:14:19] <d34df00d> I'd buy two.
[07:14:20] <abastro> Oh, now I see. So they implemented the mechanics in wrong way
[07:14:25] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[07:14:28] <abastro> d34df00d: Wait wha
[07:15:13] <abastro> Basically you mean, SO messed up in being a credible crowd-sourced document site, right?
[07:15:29] <abastro> (Eh, or Q&A site)
[07:16:16] <abastro> In that they did not set up the facilities around UX correctly towards the unbiased info sharing
[07:16:34] <abastro> monochrom: Or did I get you wrong?
[07:17:53] <monochrom> Ugh unbiasedness is the culprit here. Everyone who don't know can cast their upvote.
[07:18:29] <monochrom> Even Wikipedia knows that they need privileged moderators.
[07:18:45] *** Joins: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp)
[07:18:48] <abastro> I thought stackoverflow also had privileged moderators
[07:19:00] <monochrom> You need a bias and need that bias to favour experts.
[07:19:02] *** Quits: ellie (~ellie@user/ellie) (Remote host closed the connection)
[07:19:15] <abastro> Well, I mean, *public bias* is a thing
[07:19:49] <abastro> In my experience, collection of experts more likely know better to try being less biased
[07:20:02] <dolio> The moderators on stack overflow aren't in charge of judging which things are accurate.
[07:20:03] <monochrom> I think SO moderators only lock and delete questions?
[07:20:13] <abastro> That's all they do?
[07:20:29] <monochrom> I would be on board if SO moderators started deleting wrong answers despite upvotes.
[07:20:30] <dolio> They, like, tell people not to post too many comments.
[07:20:31] <abastro> Just able to bluntly lock?
[07:20:43] <abastro> Oh god
[07:21:05] <monochrom> Right? Wikipedia moderators delete stuff.
[07:21:12] <abastro> Now sounds like democracy implemented wrong
[07:22:49] <abastro> Internet truly became ocean of information... which is mostly trash smh
[07:25:59] <abastro> For that matter, is Wikipedia better than StackOverflow
[07:29:02] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 246 seconds)
[07:30:03] <abastro> Anyway, thanks for TILs. Did not know SO was this problematic
[07:30:34] *** Quits: InstX1 (~Liam@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 268 seconds)
[07:31:00] *** Joins: InstX1 (~Liam@2600:1006:b001:e27:388d:a695:9e26:c146)
[07:34:05] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[07:35:28] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[07:37:09] *** Quits: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp) (Quit: xff0x)
[07:37:50] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[07:38:27] *** Joins: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp)
[07:39:18] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 260 seconds)
[07:43:50] *** Joins: InstX1_ (~Liam@2601:6c4:4080:3f80:715c:6e2e:e135:d0fa)
[07:45:59] *** Quits: InstX1 (~Liam@2600:1006:b001:e27:388d:a695:9e26:c146) (Ping timeout: 268 seconds)
[07:48:41] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 245 seconds)
[07:48:49] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 248 seconds)
[07:50:45] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[07:50:59] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[07:51:08] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:f37c:486d:e6c4:36d4) (Ping timeout: 260 seconds)
[07:51:42] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:7b2e:dcb2:6878:c267)
[08:03:00] *** Quits: chenqisu12 (~chenqisu1@183.217.202.44) (Quit: Leaving)
[08:04:39] *** InstX1_ is now known as InstX1
[08:09:44] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[08:10:41] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 246 seconds)
[08:13:24] *** Quits: erisco (~erisco@d24-57-249-233.home.cgocable.net) (Ping timeout: 240 seconds)
[08:13:43] *** Joins: erisco (~erisco@d24-57-249-233.home.cgocable.net)
[08:16:42] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[08:22:46] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:23:06] *** Joins: romesrf (~romes@2001:8a0:6d13:9700:55ae:5d11:5a75:11c3)
[08:25:19] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[08:27:45] *** Quits: romesrf (~romes@2001:8a0:6d13:9700:55ae:5d11:5a75:11c3) (Ping timeout: 248 seconds)
[08:29:04] *** Quits: littlebobeep (~alMalsamo@gateway/tor-sasl/almalsamo) (Quit: leaving)
[08:29:29] *** Joins: littlebobeep (~alMalsamo@gateway/tor-sasl/almalsamo)
[08:36:06] *** Quits: littlebobeep (~alMalsamo@gateway/tor-sasl/almalsamo) (Quit: leaving)
[08:36:18] *** Joins: littlebobeep (~alMalsamo@gateway/tor-sasl/almalsamo)
[08:38:23] *** Quits: melonai (~mel@rnrd.eu) (Ping timeout: 256 seconds)
[08:38:35] *** Joins: melonai (~mel@rnrd.eu)
[08:38:51] *** Joins: sayola1 (~vekto@dslb-088-078-152-238.088.078.pools.vodafone-ip.de)
[08:38:57] *** Quits: mcglk (~mcglk@131.191.49.120) (Ping timeout: 256 seconds)
[08:38:57] *** Quits: sabx (~sabbas@user/sabbas) (Ping timeout: 256 seconds)
[08:40:05] *** Quits: sayola (~vekto@dslb-088-078-152-238.088.078.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[08:40:36] *** Joins: sabx (~sabbas@user/sabbas)
[08:40:39] *** Quits: simeon (~pi@dslb-090-186-003-168.090.186.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[08:41:52] *** Joins: mcglk (~mcglk@131.191.49.120)
[08:42:00] *** Joins: simeon (~pi@dslb-090-186-003-168.090.186.pools.vodafone-ip.de)
[08:43:30] *** Joins: cdman (~dcm@user/dmc/x-4369397)
[08:44:17] *** Joins: bahamas (~lucian@84.232.140.158)
[08:47:23] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[08:50:15] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:50:47] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[08:54:46] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:56:01] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 248 seconds)
[08:56:05] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[08:57:35] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[09:00:46] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 245 seconds)
[09:10:53] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[09:13:13] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[09:13:49] *** Quits: abastro (~abab9579@143.248.229.217) (Ping timeout: 240 seconds)
[09:17:34] *** Joins: romesrf (~romes@2001:8a0:6d13:9700:55ae:5d11:5a75:11c3)
[09:21:49] *** Quits: romesrf (~romes@2001:8a0:6d13:9700:55ae:5d11:5a75:11c3) (Ping timeout: 240 seconds)
[09:29:50] *** Joins: Guest27 (~Guest27@2601:281:d47f:1590::6b90)
[09:31:53] *** Joins: deadmarshal_ (~deadmarsh@95.38.113.9)
[09:32:57] *** Joins: KaitoDaumoto (Frat@user/kaitodaumoto)
[09:35:07] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:36:14] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[09:45:25] *** Quits: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net) (Remote host closed the connection)
[09:45:48] *** Quits: zebrag (~chris@user/zebrag) (Read error: Connection reset by peer)
[09:48:55] *** Quits: jbox (~jbox@user/jbox) (Read error: Connection reset by peer)
[09:48:55] *** Joins: abastro (~abab9579@143.248.229.217)
[09:53:44] *** Joins: chomwitt (~chomwitt@2a02:587:dc19:3600:a66b:8309:cc51:32)
[09:54:17] *** Quits: zmt00 (~zmt00@user/zmt00) (Quit: Leaving)
[09:55:28] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Quit: Laa shay'a waqi'un moutlaq bale kouloun moumkine)
[09:56:17] *** Joins: zmt00 (~zmt00@user/zmt00)
[09:58:55] *** Quits: hololeap_ (~hololeap@user/hololeap) (Ping timeout: 240 seconds)
[10:00:09] *** Joins: hololeap_ (~hololeap@user/hololeap)
[10:07:28] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[10:19:54] *** Quits: joo-_ (~joo-_@fsf/member/joo--) (Quit: Lost terminal)
[10:24:39] *** Quits: Guest27 (~Guest27@2601:281:d47f:1590::6b90) (Quit: Client closed)
[10:26:21] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[10:26:31] *** Quits: [_] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[10:26:56] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[10:27:08] *** Joins: jakalx (~jakalx@base.jakalx.net)
[10:31:39] *** Quits: [exa] (exa@srv3.blesmrt.net) (Changing host)
[10:31:39] *** Joins: [exa] (exa@user/exa/x-3587197)
[10:33:37] *** Quits: deadmarshal_ (~deadmarsh@95.38.113.9) (Ping timeout: 248 seconds)
[10:35:41] *** Quits: defanor (~defanor@tart.uberspace.net) (Ping timeout: 256 seconds)
[10:35:56] *** Joins: defanor (~defanor@tart.uberspace.net)
[10:36:19] *** Joins: caubert_ (~caubert@136.244.111.235)
[10:36:45] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[10:37:23] *** Quits: sudden (~cat@user/sudden) (Ping timeout: 256 seconds)
[10:37:23] *** Quits: andjjj23_ (~irc@107.170.228.47) (Ping timeout: 256 seconds)
[10:37:57] *** Quits: caubert (~caubert@136.244.111.235) (Ping timeout: 256 seconds)
[10:38:00] <Axman6> vaibhavsagar[m]: Hey man, you around?
[10:38:56] <vaibhavsagar[m]> Yup, how can I help? 
[10:39:12] *** Joins: sudden (~cat@user/sudden)
[10:39:26] <Axman6> I just came across an old tab (yeah I'm one of those people) with https://vaibhavsagar.com/blog/2018/07/29/hamts-from-scratch/, and I wanted to say it's great, really well done man
[10:39:41] <vaibhavsagar[m]> oh, thank you very much
[10:40:00] <vaibhavsagar[m]> I actually have been exploring an alternative explanation that starts with binary hash trees and builds from there
[10:40:08] *** Joins: DNH (~DNH@2a02:8109:b740:2c4:9487:ccc0:d294:ae76)
[10:40:22] <Axman6> HAMT with branching factor of 2?
[10:40:29] <vaibhavsagar[m]> https://github.com/vaibhavsagar/notebooks/blob/master/hamt/HashArrayMappedTrieProgression.ipynb
[10:40:30] <vaibhavsagar[m]> yeah
[10:41:07] <vaibhavsagar[m]> I think what it needs is diagrams but I have to write a bunch of tedious boilerplate to get graphviz to do what I want so I've been procrastinating on that for a few months now
[10:41:09] <Axman6> nice - yeah not a bad way to start
[10:41:37] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 248 seconds)
[10:41:49] <Axman6> use the diagrams package - I think I gave a talk once on fingertrees where I generated the diagrams from the actual structure of the tree
[10:42:15] <vaibhavsagar[m]> I've gotten that advice before but I think graphviz is nicer
[10:42:27] <vaibhavsagar[m]> (for this specifically)
[10:42:42] <Axman6> fair enough - IIRC it did have some code specifically for drawing trees
[10:42:43] <vaibhavsagar[m]> e.g. https://github.com/vaibhavsagar/notebooks/blob/master/hamt/HAMTVisualisation.ipynb
[10:42:52] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[10:42:58] <vaibhavsagar[m]> maybe I need to take another look at it
[10:43:26] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[10:43:27] <vaibhavsagar[m]> when I tried it last I ended up fussing with the line spacing and it looked kinda jank
[10:43:41] <vaibhavsagar[m]> but graphviz doesn't let you configure any of that so it's less trouble that way
[10:43:56] <vaibhavsagar[m]> you basically just take what you get with graphviz
[10:44:52] <Axman6> diagrams is worth learning anyway, takes a bit of getting used to, but it's pretty crazy once you get it
[10:45:08] <Axman6> yeah nice with graphviz is you separate out the graph and its styling
[10:46:45] <vaibhavsagar[m]> maybe you've already seen https://plume-quokka.glitch.me/, where I put my graphviz HAMT visualisation online
[10:47:24] <vaibhavsagar[m]> hmm, seems broken now
[10:48:55] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[10:49:06] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[10:50:01] *** Quits: DNH (~DNH@2a02:8109:b740:2c4:9487:ccc0:d294:ae76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:50:15] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[10:51:04] *** Joins: andjjj23_ (~irc@107.170.228.47)
[10:54:15] *** Joins: acidjnk (~acidjnk@p200300d0c7049f07f8ca2b00dd6818e1.dip0.t-ipconnect.de)
[10:54:16] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 272 seconds)
[10:58:08] *** Joins: DNH (~DNH@2a02:8109:b740:2c4:9487:ccc0:d294:ae76)
[10:58:32] *** Joins: bahamas (~lucian@84.232.140.158)
[10:59:22] *** Joins: InstX1_ (~Liam@2601:6c4:4080:3f80:99cb:ce04:4b4a:7252)
[10:59:37] *** Quits: InstX1 (~Liam@2601:6c4:4080:3f80:715c:6e2e:e135:d0fa) (Ping timeout: 268 seconds)
[11:02:28] *** Joins: seydar (~seydar@pool-108-31-245-5.washdc.fios.verizon.net)
[11:03:28] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 260 seconds)
[11:03:49] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:5d73:ba4b:5267:e012)
[11:05:03] *** Joins: odnes (~odnes@5-203-209-2.pat.nym.cosmote.net)
[11:05:30] *** Joins: romesrf (~romes@2001:8a0:6d13:9700:55ae:5d11:5a75:11c3)
[11:05:37] *** Joins: cfricke (~cfricke@user/cfricke)
[11:06:44] *** Quits: seydar (~seydar@pool-108-31-245-5.washdc.fios.verizon.net) (Ping timeout: 246 seconds)
[11:09:36] *** Quits: DNH (~DNH@2a02:8109:b740:2c4:9487:ccc0:d294:ae76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:10:25] *** Quits: romesrf (~romes@2001:8a0:6d13:9700:55ae:5d11:5a75:11c3) (Ping timeout: 250 seconds)
[11:11:35] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 240 seconds)
[11:12:03] *** Quits: abastro (~abab9579@143.248.229.217) (Remote host closed the connection)
[11:16:08] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[11:16:22] *** Joins: coot (~coot@213.134.190.95)
[11:16:38] *** Joins: michalz (~michalz@185.246.204.37)
[11:18:59] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:19:05] *** Quits: shriekingnoise (~shrieking@201.231.16.156) (Quit: Quit)
[11:20:01] *** Quits: raym (~raym@user/raym) (Ping timeout: 248 seconds)
[11:21:00] *** Joins: raym (~raym@user/raym)
[11:23:06] *** Joins: zeenk (~zeenk@2a02:2f04:a313:d600:8d26:ec9f:3ff6:fc94)
[11:25:19] *** Joins: kaph (~kaph@dynamic-adsl-78-12-162-98.clienti.tiscali.it)
[11:25:43] *** Joins: mixfix41 (~sdenynine@user/mixfix41)
[11:27:52] *** Joins: abastro (~abab9579@143.248.229.217)
[11:28:39] *** Joins: deadmarshal_ (~deadmarsh@95.38.113.9)
[11:29:05] *** Quits: abastro (~abab9579@143.248.229.217) (Remote host closed the connection)
[11:34:45] *** Joins: abastro (~abab9579@143.248.229.217)
[11:36:01] *** Quits: nun57 (~nun@61.140.176.155) (Ping timeout: 248 seconds)
[11:36:49] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[11:38:59] *** Joins: gurkenglas (~gurkengla@dslb-178-012-018-212.178.012.pools.vodafone-ip.de)
[11:39:05] *** Joins: alp_ (~alp@user/alp)
[11:40:15] <random-jellyfish> every time I learn something new, e.g. haskell and functional programming, I get very excited about it but in the end I fail to create anything meaningful with the new thing I've just learned, the only "achievements" consist of reproducing some tutorials, reading and understanding some articles ans solving very simple problems
[11:40:51] *** Joins: CiaoSen (~Jura@p200300c957311e002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[11:40:58] <Axman6> The curse of curiosity without imagination or a problem to solve
[11:41:18] <random-jellyfish> could this mean I'm not smart or creative enough to leverage the latest technologies in developing myself and the world?
[11:42:08] <siers> not "not smart enough". indeed, go try to solve a new problem with the language. this is how it always goes with learning new languages
[11:42:21] <opqdonut> writing an actual program, with a team, that solves an actual problem, in just plain haskell is cool enough
[11:42:39] <opqdonut> you probably won't need any fancy techniques or libraries
[11:42:58] <Axman6> The question "I've learnt X, now what should I make?" is a pretty common one, and not one which had a useful answer because it depends more on you. IMO it's ok to use this point as a time to learn more; I often find that's when I'll come across something cool that I do want to build - go on lobste.rs and find some cool algorithm or project and build it in Haskell, that's often what motivates me
[11:42:59] <opqdonut> after you've written 5 programs or so, you might start seeing the need for fancy stuff, but even then, it might be better for the team to stick to basics
[11:43:35] <jackdk> ^ this. most of the haskell I write for work is not that galaxybrained. Some small parts are galactic, but nothing intergalactic
[11:43:37] <opqdonut> advent of code is a nice source of programming exercises if you can't think of anything real
[11:44:06] <opqdonut> I know I can't think of anything real, that's why I'm a consultant so people come to me with their real problems
[11:44:14] <Axman6> I find myself often reading some article about someone else's project and thinking "Hmm, I wonder how I'd write that in Haskell"
[11:44:36] <Axman6> (jackdk will know what that I ACTUALLY think is "I wonder if I can write that in Haskell and make it faster than theirs")
[11:46:59] *** Joins: kuribas (~user@ptr-25vy0i7lyxwuflpbsmc.18120a2.ip6.access.telenet.be)
[11:48:11] <random-jellyfish> thanks, very interesting answers
[11:48:38] <Axman6> I definitely sympathise with the feeling, I've been there many times, and I'm not organised enough to take on a large project of my own
[11:48:58] *** Quits: Psybur (~Psybur@2601:5c9:4201:3220:19c2:a1cd:6600:38ba) (Ping timeout: 260 seconds)
[11:49:08] <[exa]> random-jellyfish: .........honestly, what's wrong on just learning stuff? :D
[11:49:37] <tdammers> indeed, people need to stop obsessing about "usefulness" and "goals" and "purpose" and all that
[11:49:45] *** Joins: chenqisu1 (~chenqisu1@183.217.202.44)
[11:49:50] <Axman6> Amen
[11:50:05] <Axman6> the way the world's going, it ain't gonna matter soon enough =)
[11:50:06] <siers> Axman6, I made something faster than haskell than anyone else in my company (maze solver, just for fun). by a huge margin, but also because I had better algorithms :D
[11:50:24] *** Joins: Neuromancer (~Neuromanc@user/neuromancer)
[11:50:25] <siers> it is my most serious, longest haskell program ever
[11:50:29] *** Quits: abastro (~abab9579@143.248.229.217) (Ping timeout: 246 seconds)
[11:50:57] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Ping timeout: 248 seconds)
[11:51:00] *** Joins: abastro (~abab9579@143.248.229.217)
[11:51:02] *** Quits: abastro (~abab9579@143.248.229.217) (Remote host closed the connection)
[11:51:15] <Axman6> As much as a hate it, algorithms trump optimisations nearly anyday, but I love optimisations
[11:51:49] <siers> I did pack bits and mirror them for easier rot8, so there's that!
[11:52:23] <Axman6> learning how to write C in Haskell is very fun :P
[11:52:24] <siers> and I'm pretty sure I had numbers to back up the speed improvements
[11:52:25] <[exa]> random-jellyfish: anyway, people seem obsessed with results and achievements but you need actual problems to start with, otherwise the results are superfluous. If you can't find a problem then you're happy right? :D
[11:52:28] *** Joins: abastro (~abab9579@143.248.229.217)
[11:52:35] <siers> Axman6, yes :D
[11:52:49] <[exa]> Axman6: GPU crowd disagrees, throw array bruteforce at stuff!!
[11:53:01] *** Quits: acidjnk (~acidjnk@p200300d0c7049f07f8ca2b00dd6818e1.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[11:53:17] <siers> programming is all problems. if you have no problems, congratulations, you may finally go outside and see the sunshine
[11:54:15] <Axman6> > let isProblem = const True in any isProblem []
[11:54:17] <lambdabot>  False
[11:54:34] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[11:54:34] <siers> I wrote a solver that solves mazes like these: http://raitis.veinbahs.lv/maze/content/lvl5-2021-06-15-14-32-04-c744.mp4 (also generated the pics for the video with haskell)
[11:54:39] <kuribas> [exa]: for most problems, moving stuff to the GPU already takes longer than calculating on the CPU.
[11:55:05] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[11:55:12] <tdammers> that's quite the generalization there
[11:55:34] <Axman6> unless you're on an M1 mac
[11:55:39] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[11:55:41] <abastro> Throw array brutefoce works well for multithreading at least
[11:55:47] <Axman6> or... the many other cases where that is also not true :P
[11:56:18] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[11:57:20] <kuribas> tdammers: well, depending how you count "most" :)  For a game engine programmers, it's probably not true, but most programmers are not game engine programmers.
[11:57:32] <abastro> How are you guys already awake, it is illegal
[11:57:43] <siers> it's 10:27 here
[11:57:55] <kuribas> 9:27 :) 
[11:57:55] <Axman6> it's 17:27 here
[11:58:14] <Axman6> asn't it like 14:27 where you are abastro?
[11:58:27] <kuribas> People who claim FP is slow because of immutability are completely clueless IMO.
[11:58:36] *** Joins: MajorBiscuit (~MajorBisc@c-001-028-054.client.tudelft.eduvpn.nl)
[11:58:59] <siers> Well, it can be true...
[11:59:08] <siers> that was supposed to be italics 
[11:59:41] <kuribas> siers: I mean in general, not some specific problem where it "might" be slow.
[11:59:54] <tdammers> kuribas: so are people who just hand-waive the practical difficulties of compiling functional code into efficient machine code for Von Neumann machines
[12:00:17] <kuribas> tdammers: perhaps, but that's the job of the compiler, no?
[12:00:27] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[12:01:49] <kuribas> But in reality "performance" is mostly not a function of the programming language.
[12:02:08] <tdammers> it is, and it isn't
[12:02:30] <tdammers> the semantics of a given language may make it impossible to implement it efficiently
[12:02:32] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[12:02:49] <kuribas> I mean, people claim FP is slow, but you don't hear that about Python or Javascript, which are an order of magnitude slower.
[12:03:17] <tdammers> Python is actually pretty famous for being slow
[12:03:19] *** Joins: bahamas (~lucian@84.232.140.158)
[12:03:34] <kuribas> still it's more popular than ever.
[12:03:57] <tdammers> correct; because for the things that people use it for, the speed of the Python interpreter doesn't actually matter
[12:05:10] <kuribas> Yes, and for that realson, the penalty of immutability doesn't matter either.
[12:05:21] <tdammers> 90% of Python applications are probably one of 1) ad-hoc scripting; 2) scientific stuff; 3) web dev. For #1, speed doesn't matter *at all*; for #2, the grunt work is offloaded to efficient numeric libraries written in C or Fortran or whatever; and for #3, the majority of time is spent waiting for the network and the database, and what remains can usually be solved with caching and horizontal
[12:05:23] <tdammers> scaling.
[12:05:45] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[12:06:07] *** Joins: timCF (~timCF@200-149-20-81.sta.estpak.ee)
[12:06:22] <tdammers> The problem with "FP slowness" is that if you implement the compiler naively, it can easily turn quadratic or exponential; unlike Python's slowness, which is largely just a constant factor across the board, "FP slowness" is of the nasty big-O kind
[12:06:37] *** Quits: MajorBiscuit (~MajorBisc@c-001-028-054.client.tudelft.eduvpn.nl) (Ping timeout: 240 seconds)
[12:07:23] <kuribas> tdammers: that is not an argument against using a FP language.
[12:07:27] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 268 seconds)
[12:07:49] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 240 seconds)
[12:07:51] <kuribas> at best, it's an argument against rolling your own FP language, or compiler.
[12:08:04] <siers> was there some limit how much sharing can functional data structures do at most or something? or is this something that I just dreamt?
[12:08:09] <siers> I saw something like that a long time ago
[12:08:12] <kuribas> But there are projects, like GRIN, which can do this step efficiently.
[12:09:16] <tdammers> kuribas: it used to be an argument, until people figured out how to compile FP languages in such a way that the algorithmic explosion can be avoided.
[12:09:23] <kuribas> siers: well, there's a log(n) factor which needs to be updated for immutable updates.
[12:09:40] *** Joins: jgeerds (~jgeerds@d5364b87.access.ecotel.net)
[12:09:47] <kuribas> siers: for most immutable datastructures.
[12:10:33] *** Quits: michalz (~michalz@185.246.204.37) (Ping timeout: 260 seconds)
[12:10:41] <abastro> Axman6: It is indeed about 16:40 now
[12:10:43] <maerwald[m]> tdammers: absolutely. IME, naive FP implementations do much worse than naive C/java/whatever
[12:10:58] <abastro> So it is morning for east european folks :)
[12:11:12] *** Quits: dextaa_5 (~dextaa@user/dextaa) (Remote host closed the connection)
[12:11:41] <abastro> Is Scala one of the naive FP implementations?
[12:11:58] <abastro> Idk if it is actually slow in industrial practice
[12:12:55] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 260 seconds)
[12:13:13] <siers> I couldn't answer that because I haven't consluted any benchmarks, but it is fast enough for us at work, haha
[12:14:23] <siers> pretty much a non-answer, but I wanted to chime in purely because I write scala every day :D 
[12:14:40] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[12:15:37] <kuribas> clojure is pretty slow, but somehow enthousiast keep claiming how fast it is.
[12:15:49] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:15:56] <kuribas> On the back of a famous clojure book it literally says that clojure is "really, really fast".
[12:16:11] *** Joins: romesrf (~romes@2001:8a0:6d13:9700:55ae:5d11:5a75:11c3)
[12:16:17] <kuribas> Yet, any evidence I found for the performance of clojure shows it fares pretty bad compared to other languages.
[12:16:36] <tdammers> I'm pretty sure Scala is not a naive implementation. There is some overhead due to having to run on the JVM, which wasn't designed for this kind of thing, but that's in the same category as what makes Python slow, not in the "accidentally quadratic" category of a naive FP implementation.
[12:16:43] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[12:16:44] <kuribas> IMO an order of magnitude slower than GHC.
[12:17:31] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[12:17:43] <kuribas> IMO clojure is slow because it doesn't attempt to tear down abstractions, like GHC does.
[12:17:59] <kuribas> But the clojure crowd must be the most uncritical ever.
[12:18:30] <lortabac> I benchmarked both Scala and Clojure recently because I had to choose a JVM language for a specific task
[12:18:34] <tdammers> It doesn't attempt it, because it can't, due to the whole homoiconic live coding stuff. If you want to be able to manipulate code as data at runtime, then you have to keep the abstractions around, otherwise you can't fiddle with them anymore.
[12:18:43] <opqdonut> yeah the clojure implementation is naive for sure, all the allocs and calls you see in the code actually happen
[12:18:54] <lortabac> Clojure segfaulted, Scala was much better
[12:19:06] <tdammers> Then again, Clojure isn't actually a functional language in any meaningful sense of the word
[12:19:15] <opqdonut> relying on hotspot inlining works out ~ok~
[12:19:26] <kuribas> lortabac: how can the jvm segfault?
[12:19:44] <opqdonut> tdammers: TBH most clojure code I see is fairly functional, preferring pure functions operating on persistent data
[12:19:46] <abastro> Oh, scala is fast enough in practive, I see
[12:20:00] <abastro> s/practive/practice
[12:20:23] <tdammers> opqdonut: you can't even make sure that a clojure "function" is pure to begin with - the whole thing is so dynamic that whether a "function" is pure or not depends on the arguments you pass
[12:20:25] <kuribas> opqdonut: but referential transparency also doesn't mean much in clojure, since it's fairly impossible to understand a function without context.
[12:20:39] <abastro> It is strange how Scala reports v slow speed in competitive sites now
[12:20:43] <kuribas> opqdonut: due to the "everything is a hashmap" approach.
[12:20:54] <lortabac> kuribas: no idea, you can try the benchmark yourself, it was the right-associative (non tail-recursive) sum of all the naturals from 0 to 1000000
[12:21:10] <abastro> Like, Scala is reported as 10 times slower than other languages in most algorithm problems
[12:21:18] <opqdonut> kuribas: that depends on how you write your code, it's possible to write clear clojure code, and to document your huge hashmaps with libraries like schema or malli
[12:21:22] <tdammers> so judging whether a function is pure or not requires that you take its entire implementation into account, and the entire context in which it is called, which is pretty much the same as in Python, C, or literally any other language without built-in FP support
[12:21:41] <opqdonut> kuribas: tdammers: but for sure, clojure merely enables functional programming, it doesn't really enforce it
[12:21:54] <tdammers> opqdonut: it "enables" it about as much as Python does
[12:21:56] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[12:21:59] <opqdonut> I think FP is a bit more than "your language tags functions as pure/impure"
[12:22:10] <abastro> Haskell merely enables functional programming, it doesn't enforce it if you use IO liberally
[12:22:15] <opqdonut> tdammers: accidental mutation is all over the place in python, never a problem in clojure
[12:22:20] <abastro> Wait what I said doesn't work meh
[12:22:46] <tdammers> opqdonut: "never a problem"? my experience was different, in horrible horrible ways
[12:22:48] <kuribas> opqdonut: yeah, but it is typically only used at boundaries, like database, or REST API.  So in order to know which type is being passed to a function you need to trace it back in the code.
[12:22:53] <maerwald[m]> abastro: whether you use IO or not has nothing to do with "functional"
[12:23:10] <kuribas> opqdonut: until eventually you arrive at a REST API call, where it has a malli schema.
[12:23:13] <opqdonut> tdammers: fair enough. it's definitely possible to write horrible code in any language
[12:23:25] <tdammers> granted, clojure makes it easier to be diligent, but you still depend 100% on manual diligence
[12:23:48] <opqdonut> kuribas: naming, docs, giving malli schemas to functions all help
[12:23:54] <opqdonut> but it is dynamic programming in the end
[12:24:05] <abastro> maerwald[m]: Yep, I momentarily failed to see that
[12:24:21] <abastro> Well what if you use unsafeInterleaveIO liberally tho
[12:24:22] <opqdonut> and it's fine to have a problem with dynamic programming, I don't love it either, but saying "Clojure isn't actually a functional language in any meaningful sense of the word" is just bull
[12:24:23] <kuribas> opqdonut: but then, don't you get a huge performance penalty, because all those functions need to check the type at runtime?
[12:25:01] <abastro> I think clojure counts as FP since Lisp is FP
[12:25:02] <opqdonut> a) the penalty might not matter b) you can switch off the validations in production (at least for plumatic schema, probably for malli as well)
[12:25:16] <tdammers> what FP means to me is "programming with functions", and in order to qualify as a "functional language", it needs to have "functions" as a language feature. clojure does not; it only has "procedures", and if you are diligent enough, you can use them to implement functions, but the compiler doesn't care about the difference, and doesn't help you with it in any way
[12:25:20] <kuribas> abastro: lisp is multi paradigm.  But not particularly functional.
[12:25:47] <kuribas> tdammers: but following your definition, neither ML, ocaml, or scala is functional.
[12:25:52] <opqdonut> tdammers: see, if you would've said "Clojure isn't actually a functional language in _my_ sense of the word" I would've agreed
[12:26:00] <opqdonut> but you said "any meaningful sense"
[12:26:14] <abastro> Lisp is multi paradigm but many places do consider lisp as FP
[12:26:27] <kuribas> opqdonut: I find referential transparency one of the most important features of FP, and clojure just isn't referentially transparent.
[12:26:28] <tdammers> well, OK, but what's a definition of "functional programming language", then, that distinguishes Clojure from, say, JavaScript, or C, or Python?
[12:26:40] <siers> there's nothing more fulfilling than a debate about semantics early in the morning
[12:26:50] <abastro> kuribas: So only haskell is FP then?
[12:27:02] <abastro> Wait, you said "one of the most important features"
[12:27:20] <opqdonut> tdammers: to me, functionality is a feature of the code, and a language is functional if the idiomatic way of programming is functional, and that's certainly true for clojure
[12:27:23] <abastro> How I understand it is that, it is not strictly necessary for FP
[12:27:36] <opqdonut> kuribas: referential transparency is a spectrum, GHC Haskell isn't referentially transparent either
[12:27:41] <kuribas> abastro: I'd say more precicely, lisp allows you to program in a FP style.  But most common lisp programs are pretty imperative.
[12:28:03] <abastro> Welp true, but many ppl just say "code web server in lisp" when I talk about FP
[12:28:04] <tdammers> opqdonut: a lot of clojure code I've come across, including a lot of code that is considered perfectly "idiomatic", isn't functional at all
[12:28:09] <opqdonut> it's nice to program in an architecture where things (apart from well known exceptions) are referentially transparent _enough for the use case_
[12:28:30] <abastro> "Code an actual web server then talk about it, otherwise we'll just regard it as toy"
[12:28:36] <tdammers> IME, idiomatic clojure puts a lot of emphasis on "immutable data structures", but completely ignores all other effects
[12:28:50] <abastro> I mean "Actual web server in common lisp"
[12:28:55] <opqdonut> tdammers: for sure
[12:29:03] <tdammers> abastro: people have done that just fine, what's the problem?
[12:29:07] <opqdonut> still more functional than your typical python code
[12:29:26] <tdammers> opqdonut: oh yes; python is outright hostile towards FP
[12:29:40] <abastro> Many ppl say to "me" that I need to be able to code in common lisp to talk about FP
[12:29:43] <tdammers> I think Guido did it on purpose
[12:30:03] <abastro> I know, it is just dumb comment. Yet it shows that many ppl think Lisp is quite close to FP
[12:30:05] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[12:30:20] <abastro> (Lots of languages are multi-paradigm anyway. Even OCaml has objects)
[12:30:41] <tdammers> Lisp is definitely worth learning, but the mind-blowing thing about it is not FP, but the whole "homoiconicity" thing
[12:30:45] <kuribas> opqdonut: clojure simply isn't referentially transparent at all.
[12:31:14] <kuribas> opqdonut: like, on the spectrum, it's more "not transparent" than transparent.
[12:31:17] <tdammers> What Lisp, and especially Scheme, beautifully demonstrates is how you can build a full-blown general purpose language on top of a ridiculously small core
[12:31:25] <abastro> How I understand it is that homoiconicity allows FP-esque programming
[12:31:32] <tdammers> no, not at all
[12:31:45] <abastro> Other things allow FP programming as well
[12:31:48] <tdammers> homoiconicity allows the "meta" level to collapse
[12:31:51] <abastro> But homoiconicity does, too
[12:32:07] <tdammers> nope. you can program functionally in a Lisp without macros just fine
[12:32:11] <abastro> s/allow/enables
[12:32:38] <abastro> Though doesn't standard FP idioms implemented in macros
[12:32:47] <abastro> Actually I thought nearly everything in lisp was macros
[12:33:18] *** Joins: ccntrq (~Thunderbi@2a01:e34:eccb:b060:de80:e6ed:5bb7:2742)
[12:33:29] <tdammers> in practice, yes, a lot of things in lisp are implemented as macros
[12:33:34] <timCF> Hello! I have a strange problem with leaking memory in my program. It definitely leaks somewhere in http2-client-grpc code, and I can reproduce it with simple program which polls gRPC endpoint without timeout, and I see memory growth like 2Mb/Sec in task manager. But at the same time, I've tried to profile program memory with all kinds of flags, and output diagram shows very normal constant memory usage by 
[12:33:35] <opqdonut> kuribas: I find the level of referential transparency in _my codebases_ is still very useful compared to python/js
[12:33:37] <tdammers> but that's not what enables FP
[12:33:40] <timCF> functions and proccesses. Any ideas why memory leak is not shown in profiler output, and how I can find the leak then?
[12:33:45] <timCF> Hello! I have a strange problem with leaking memory in my program. It definitely leaks somewhere in http2-client-grpc code, and I can reproduce it with simple program which polls gRPC endpoint without timeout, and I see memory growth like 2Mb/Sec in task manager. But at the same time, I've tried to profile program memory with all kinds of flags, and output diagram shows very normal constant memory usage by 
[12:33:51] <timCF> functions and proccesses. Any ideas why memory leak is not shown in profiler output, and how I can find the leak then?
[12:34:03] <opqdonut> kuribas: but it's hard to separate experiences with languages from experiences with codebases
[12:34:07] *** Quits: BlackboardN_ (~Blackboar@user/BlackboardN) (Ping timeout: 256 seconds)
[12:34:58] <timCF> sorry, accidentaly sent message twice
[12:35:07] <kuribas> opqdonut: the culture of clojure is not, "let's write this function so I can understand it", but "let's write this function so I can mess around with it in the REPL".
[12:35:34] <abastro> tdammers: Well, I think it would be harder to implement those concepts in lisp without FP.
[12:35:42] *** Joins: BlackboardN (~Blackboar@user/BlackboardN)
[12:35:48] <opqdonut> kuribas: I won't contest that
[12:35:51] <abastro> All this wordings and classifications are quite tiring tbh
[12:35:58] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[12:37:39] *** Joins: dextaa_54 (~dextaa@user/dextaa)
[12:37:51] <kuribas> opqdonut: it's not wrong in itself, it just doesn't feel like it follows the FP ideal of making abstractions on top of abstractions.
[12:40:45] <abastro> Hm, is Clojure still closer to FP than Common Lisp
[12:41:03] <abastro> (Btw why some FP servers have common lisp channels)
[12:41:23] <kuribas> abastro: well, yes :)
[12:42:00] *** Joins: bahamas (~lucian@86.120.77.115)
[12:43:37] *** Joins: mattil (~mattil@helsinki.portalify.com)
[12:43:46] <tdammers> Well, Lisp was originally conceived as a didactic vehicle, a thought experiment designed to illustrate how Lambda Calculus is enough, in theory, to make for a Turing-complete programming language. The first implementation was famously made by a student, based on the professor's comment that all it would take to make a Lisp interpreter would be to implement the `eval` function, which the student
[12:43:48] <tdammers> mistook for a homework assignment.
[12:44:15] <merijn> tdammers: naah
[12:44:23] <tdammers> well, that's how the legend goes
[12:44:32] <merijn> tdammers: The first implementation was made by a grad student of McCarthy
[12:45:01] <abastro> "Mistook for a HW assignment" LMAO
[12:45:03] <merijn> not by accident, but because he was collaborating on the research of McCarthy and was like "man, I bet I can implement this"
[12:45:05] <abastro> What a legend
[12:45:17] <abastro> So that is HW assignment then
[12:45:17] <merijn> abastro: That did actually happen in statistics once
[12:45:46] <abastro> Perhaps they might actually have considered it as an assignment for practicing their field
[12:46:08] <abastro> Why is lisp quite far from lambda calculus now tho?
[12:46:30] *** Quits: napping (~brandon@65.128.49.110) (Quit: leaving)
[12:46:38] *** Quits: lawt (~lawt@2601:200:8101:f140:dea6:32ff:fea1:adf9) (Ping timeout: 260 seconds)
[12:46:38] <tdammers> is it?
[12:46:46] <merijn> tdammers: Perhaps you're mixing up your lisp origin story with Dantzig? :p
[12:46:51] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[12:47:13] <tdammers> merijn: ah yes, that might be it
[12:47:39] <merijn> because Dantzig did mistake two open statistics problems for homework and solve them as a student, and that story is well documented :p
[12:48:03] <merijn> because he overslept and was late for a lecture xD
[12:48:42] <abastro> Wow, how could one mistook problems for HW and solve it
[12:49:00] <abastro> Like I cannot comprehend that level of genius
[12:50:06] *** Joins: Psybur (~Psybur@c-76-123-45-25.hsd1.va.comcast.net)
[12:50:40] <tdammers> lesson learned: sleep is more important than punctuality
[12:51:07] <abastro> Being genius is the most important but anyway
[12:53:08] <kuribas> abastro: I also think current functional language wouldn't be efficient on hardware of 50 years ago.
[12:53:24] *** Joins: ubert1 (~Thunderbi@p200300ecdf1588eb09611d41de6fd446.dip0.t-ipconnect.de)
[12:53:25] <abastro> Hmm.
[12:53:31] <kuribas> abastro: lisps imperativeness may have been necessary in that day.
[12:53:52] <abastro> Perhaps imperative programming was an unfortunate path due to performance limitation
[12:54:16] <abastro> I heard that initially, the memory used to be the bottleneck. Even.
[12:54:34] <abastro> I cannot imagine such world..
[12:54:56] *** Joins: __monty__ (~toonn@user/toonn)
[12:56:41] <kuribas> abastro: never programmed an arduino? :)
[12:57:19] <kuribas> bottleneck as in speed bottleneck?
[12:57:35] <kuribas> memory is still a bottleneck.
[12:57:49] <kuribas> A cache miss can cost hunderds of cycles.
[12:58:14] *** Quits: cosimone (~user@93-47-228-79.ip115.fastwebnet.it) (Remote host closed the connection)
[12:58:23] * merijn mumbles something about roofline analysis
[12:58:54] *** Joins: lawt (~lawt@2601:200:8200:6870:dea6:32ff:fea1:adf9)
[12:59:06] <kuribas> and hundreds of cycles still aren't much compared to network or disk latency.
[13:00:00] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[13:01:00] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[13:01:42] *** Joins: zaquest (~notzaques@5.130.79.72)
[13:03:22] <abastro> Bottleneck as in, size bottleneck
[13:03:46] <abastro> Memory access speed is problematic, indeed, but that is less unfavorable to FP
[13:04:01] <abastro> Hard limit on memory usage, that's a stopper
[13:04:19] *** Quits: abastro (~abab9579@143.248.229.217) (Remote host closed the connection)
[13:04:55] <kuribas> http://www.ulisp.com/
[13:07:27] *** Joins: cosimone (~user@93-47-228-79.ip115.fastwebnet.it)
[13:10:53] *** Quits: cdman (~dcm@user/dmc/x-4369397) (Remote host closed the connection)
[13:11:26] *** Joins: cdman (~dcm@27.2.216.95)
[13:11:27] *** Quits: cdman (~dcm@27.2.216.95) (Changing host)
[13:11:27] *** Joins: cdman (~dcm@user/dmc/x-4369397)
[13:12:10] *** Quits: kuribas (~user@ptr-25vy0i7lyxwuflpbsmc.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
[13:17:38] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 260 seconds)
[13:19:36] *** Quits: romesrf (~romes@2001:8a0:6d13:9700:55ae:5d11:5a75:11c3) (Ping timeout: 268 seconds)
[13:25:06] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[13:25:39] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[13:32:55] <vaibhavsagar[m]> Axman6: I fixed my HAMT visualiser https://plume-quokka.glitch.me/
[13:33:55] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[13:35:23] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[13:35:50] *** Quits: kaph (~kaph@dynamic-adsl-78-12-162-98.clienti.tiscali.it) (Ping timeout: 246 seconds)
[13:36:26] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[13:36:29] *** Joins: romesrf (~romes@2001:8a0:6d13:9700:55ae:5d11:5a75:11c3)
[13:37:15] *** Quits: littlebobeep (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[13:44:41] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:45:22] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[13:52:17] *** Quits: bahamas (~lucian@86.120.77.115) (Ping timeout: 268 seconds)
[13:59:20] *** Joins: michalz (~michalz@185.246.204.104)
[14:01:31] *** Joins: littlebobeep (~alMalsamo@gateway/tor-sasl/almalsamo)
[14:01:49] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[14:02:11] *** Joins: littlebo1eep (~alMalsamo@gateway/tor-sasl/almalsamo)
[14:02:28] *** Quits: littlebo1eep (~alMalsamo@gateway/tor-sasl/almalsamo) (Client Quit)
[14:02:39] *** Quits: asthasr (~asthasr@208.80.78.154) (Quit: asthasr)
[14:06:17] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 246 seconds)
[14:07:47] <abastro[m]> Is there good monad tutorial written in JS? I might want to see how near complete beginners act to it
[14:09:14] <merijn> abastro[m]: Doubtful
[14:09:38] <abastro[m]> Oh no :(
[14:09:38] <merijn> It's like trying to write one in python. You're gonna be missing 90% of the things that make the abstraction useful and nice
[14:10:18] <abastro[m]> I think in this channel, I heard of monads being used in other languages
[14:10:46] <merijn> You really need some form of typesystem and (ideally) something like typeclasses to get real value from
[14:11:06] <abastro[m]> And I was given with https://tomstu.art/refactoring-ruby-with-monads as well
[14:11:09] <merijn> So you're gonna mostly see it used in language that are a lot like Haskell
[14:11:34] <abastro[m]> Then how is the tutorial written in ruby?
[14:11:51] <abastro[m]> Someone here recommended it iirc
[14:12:01] <merijn> abastro[m]: The problem is that you can only write code using a *specific* "and_then"
[14:12:10] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[14:12:14] *** Quits: belphegor666 (~satan@user/belphegor666) (Quit: WeeChat 3.4)
[14:12:23] <merijn> abastro[m]: Much of the usefulness of the Monad class is that you can write generic code that works for any instance of Monad, not just one
[14:13:37] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[14:13:57] <abastro[m]> I know, but still, someone made use of it in other languages
[14:14:16] <abastro[m]> Like, `and_then` even exists in many other langs as well
[14:14:28] *** Joins: belphegor666 (~satan@ip-046-223-003-068.um13.pools.vodafone-ip.de)
[14:15:03] <kritzefitz> merijn: Do you really need typeclasses for Monads to be useful as an abstraction? I'd imagine that duck typing would be sufficient for the job in languages like Python.
[14:15:04] *** Quits: belphegor666 (~satan@ip-046-223-003-068.um13.pools.vodafone-ip.de) (Changing host)
[14:15:04] *** Joins: belphegor666 (~satan@user/belphegor666)
[14:15:05] *** Quits: chomwitt (~chomwitt@2a02:587:dc19:3600:a66b:8309:cc51:32) (Read error: Connection reset by peer)
[14:15:19] *** Joins: chomwitt (~chomwitt@2a02:587:dc19:3600:a66b:8309:cc51:32)
[14:16:13] <merijn> kritzefitz: Yeah, but then reasoning about stuff like lawfulness becomes a PITA
[14:16:17] <abastro[m]> Right, you could have verbal contract on that
[14:16:42] <abastro[m]> In haskell we still have verbal contract about laws without enforcement
[14:18:11] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 246 seconds)
[14:21:32] <[exa]> kritzefitz: without type inference it's actually pretty hard to avoid having to explicitly carry the type duck to each "leaf" expression
[14:23:14] <kritzefitz> [exa]: I'm not sure what you by “type duck”.
[14:24:13] <[exa]> the type of the monad that should be executed. If you'd type >>= somewhere in a completely abstract python function (say `traverse`), how does it know whether it should do Maybe or State?
[14:25:11] *** Quits: Raito_Bezarius (~Raito@2a01:e0a:5f9:9681:a0a0:bb76:611f:9da7) (Ping timeout: 252 seconds)
[14:25:27] <kritzefitz> merijn: Fair.
[14:26:08] <abastro[m]> Maybe calculate type explicitly?
[14:26:08] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:26:15] <[exa]> (with >>= it could technically take the type from the left argument, but what do you do with `return` ? :D )
[14:26:17] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[14:26:58] <kritzefitz> Ah, yes. return is a problem. I see what you mean now.
[14:27:15] <abastro[m]> Handle Polymorphic type in runtime
[14:28:03] <[exa]> anyway I'd certainly love to have some reasonable encoding of the monads into other languages but languages without inference just becomes insanely clumsy
[14:28:07] *** Joins: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius)
[14:28:25] <[exa]> last time I tried was in Julia, they have this "workaround" even implemented in Monads.jl and I didn't like it
[14:29:34] <[exa]> as in, "chances to run parsec: 0"
[14:30:36] <abastro[m]> I mean, still non-full-fledged monads could be useful
[14:31:48] <[exa]> they have an ad-hoc specified implicitly defined implementation of half of IO, does that qualify? :]
[14:32:33] *** Quits: swistak (~swistak@185.21.216.141) (Ping timeout: 256 seconds)
[14:35:03] *** Joins: abastro (~abab9579@143.248.229.217)
[14:35:29] <abastro> Half of IO?
[14:35:58] <abastro> Wait how is IO ever practical outside of haskell
[14:37:19] <merijn> abastro: In any other purely functional language with a strong type system? :p
[14:37:20] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[14:37:28] <[exa]> abastro: it's not, it was an iMpEraTiVE rEfEreNCe
[14:37:30] <merijn> It's not too hard to imagine something like Ocaml with IO
[14:39:21] <abastro> Haha imperative reference of IO
[14:39:30] *** Joins: swistak (~swistak@185.21.216.141)
[14:39:54] <abastro> Hm actually yeah it might make sense in langs with very strong FP culture with strong type system
[14:41:30] <abastro> Anyway, so which mainstream language would be suitable to introduce monads for junior devs
[14:43:10] <merijn> "haskell"
[14:43:11] *** Quits: CiaoSen (~Jura@p200300c957311e002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[14:43:44] <abastro> > Me: Mainstream Programming Language
[14:43:46] <lambdabot>  error:
[14:43:46] <lambdabot>      • Data constructor not in scope: Me
[14:43:46] <lambdabot>      • Perhaps you meant one of these:
[14:43:49] <abastro> > You: "haskell"
[14:43:50] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Quit: Client closed)
[14:43:50] <lambdabot>  error:
[14:43:50] <lambdabot>      Data constructor not in scope: You :: Char
[14:44:10] *** Joins: acidjnk (~acidjnk@p200300d0c7049f07a51ab7ce4c98e594.dip0.t-ipconnect.de)
[14:44:17] *** Quits: deadmarshal_ (~deadmarsh@95.38.113.9) (Ping timeout: 248 seconds)
[14:44:55] <[exa]> abastro: lambdabot thinks you err with that evaluation. :]
[14:45:08] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[14:45:10] <abastro> Welp anyway
[14:45:27] <tdammers> a monad abstraction in an untyped language is about as useful as classes in Python or PHP
[14:45:40] <abastro> I usually don't say sth is mainstream programming language unless it is on the top 10~20
[14:46:05] <abastro> I've seen ppl using classes daily in Python
[14:46:23] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[14:46:35] <tdammers> yes, I know. I don't mean "don't use classes in Python", I mean "Python would be better if it had an OOP system that doesn't depend on classes"
[14:46:47] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[14:46:59] <abastro> So you mean, still quite useful
[14:47:13] <tdammers> from an ergonomics perspective, classes in an OOP language are useful because they allow for static checks; but Python doesn't do static checks anyway
[14:47:36] <abastro> Prototype OOP exists though.
[14:47:40] <abastro> Oh wait
[14:47:45] <merijn> abastro: I mean, my girlfriend's first language was Haskell. It's fine for beginners :)
[14:47:48] <abastro> You said classes
[14:48:00] <tdammers> so when I say foo.save() in Python, then the class of foo is completely irrelevant, all I care about, and all the interpreter checks for me, is whether foo has a .save() method, and that check happens at runtime, just before the call is made
[14:48:06] *** Joins: akegalj (~akegalj@93-138-67-213.adsl.net.t-com.hr)
[14:48:19] <abastro> <del>You have a girlfriend? Wat</del> I mean, it's not good for every beginners at least
[14:48:23] <siers> merijn, it's way easier, if you don't have to think about mutation :)
[14:48:31] <[exa]> btw the last time I checked TIOBe popularity index, VisualBasic was in top 10 and MATLAB in top 20
[14:48:45] <abastro> Yep, VB is somewhat fine
[14:48:45] <tdammers> and in fact, this kind of "duck typing" is considered idiomatic; so why bother with classes and class inheritance? it just complicates matters, and it doesn't really buy you anything
[14:48:52] <merijn> [exa]: TIOBE metrics are so wrong it's laughable
[14:48:58] <abastro> Tho in this case, I need something within top 5
[14:49:03] <merijn> [exa]: It's like "search engine folume" levels of accurate
[14:49:09] <merijn> s/folume/volume
[14:49:15] <siers> I taught my girlfriend scala though, because syntax has more carry over to other languages, but maybe that's not much of a biggie
[14:49:17] <tdammers> (it's just that JavaScript's version of prototype-based OOP has scarred generations of programmers...)
[14:49:32] <tdammers> merijn: found the Dutch guy!
[14:49:45] <siers> it's obvious by the ij already anyway :)
[14:50:07] <siers> (and he's mentioned it a number of times here, but never mind that :P)
[14:50:10] <abastro> i.e. one of Java, JS, Python, Go
[14:50:28] <[exa]> merijn: omg, I never checked how they do it but this is really laughable. :D
[14:50:55] <tdammers> fwiw, there is no way one can measure "programming language popularity" in a meaningful way
[14:51:01] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[14:51:16] <abastro> Well, still, like there are most common 5~10 languages
[14:51:23] <abastro> where Java, JS, Python, Go would always be in
[14:51:37] <abastro> (Maybe there is one more I forgot but anyway)
[14:52:09] <tdammers> I'm pretty sure there is still vastly more C code running in production than Go code
[14:52:22] <abastro> I forgot C. Yes.
[14:52:23] <abastro> Apparently
[14:52:24] <abastro> Lmao
[14:52:42] <abastro> Java, JS, C, Python, C++, then Go
[14:52:53] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[14:52:55] <tdammers> but really, the whole thing already breaks down when you attempt to quantify "use of a programming language"
[14:52:58] <abastro> (and I thought I quite like C..)
[14:53:04] <[exa]> abastro: there's likely more PHP code than Go code
[14:53:14] <[exa]> (also rust code)
[14:53:22] <abastro> Oh, one good thing is that I do not need to see PHP code in my neighborhood
[14:53:29] <abastro> It was abolished in my country
[14:53:37] <abastro> So that's an accomplishment
[14:53:38] <[exa]> splendid!
[14:53:46] <tdammers> e.g., PHP has massive usage on the public internet, but 90% of it is wordpress, joomla, and drupal, i.o.w., millions of copies of the same codebases
[14:53:48] <abastro> Well, instead we have more Java tho
[14:53:55] <abastro> Still, might be better
[14:54:05] <abastro> betteer than PHP, I mean
[14:54:17] *** Quits: KaitoDaumoto (Frat@user/kaitodaumoto) (Remote host closed the connection)
[14:54:50] <tdammers> that's not a high bar to clear
[14:54:58] <abastro> XD
[14:55:29] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 248 seconds)
[14:55:39] <abastro> Anyway, the junior devs I know would only accept Java, JS, C, Python, Go
[14:55:56] <tdammers> "junior dev" kind of implies that what you "accept" is irrelevant
[14:56:04] <abastro> They are not so fond of cognitive overhead by learning complex languages
[14:56:10] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[14:56:12] <tdammers> the "junior dev" deal is usually "here's what we use, learn it"
[14:56:28] <abastro> Yep, but I mean, I am not a senior dev teaching junior devs
[14:56:35] <abastro> It's just that I know of a few junior devs
[14:56:46] <abastro> And just want to see the reaction towards the concept of monads
[14:57:02] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 246 seconds)
[14:57:17] <abastro> If I were paying them, ofc they would learn I guess XD
[14:57:18] <tdammers> also: Python is very complex, and among the most difficult programming languages I have worked with (though PHP easily beats it out of the water)
[14:57:27] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:58:02] <tdammers> "Monad" is actually a very simple concept. It is not complexity that baffles people when they encounter it; the problem is that 1) it is very abstract, and 2) it is usually taught completely wrong.
[14:58:03] <abastro> This kind of junior devs will only learn what would help them get a job
[14:58:08] *** Quits: alp_ (~alp@user/alp) (Ping timeout: 260 seconds)
[14:58:21] <abastro> You know, ppl do not have quite a leeway in life
[14:58:27] *** Quits: timCF (~timCF@200-149-20-81.sta.estpak.ee) (Quit: leaving)
[14:58:42] <abastro> Yea, so that's why I am trying to avoid giving wrong impression
[14:58:51] <abastro> I just want to see in what way they would dislike the concept
[14:59:01] <tomsmeding> tdammers: Python is a simple language compared to Haskell. However, using it for complex software is harder if you are used to being helped by a type system.
[14:59:29] *** Quits: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp) (Ping timeout: 246 seconds)
[15:00:08] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[15:00:30] <tomsmeding> a common pattern among people in general is that they like most what they already know; then if someone is willing to do a bit of learning, of course they are going to prefer something for which it is easy to learn the rules
[15:00:32] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[15:00:53] <abastro> Yeah
[15:00:54] <tomsmeding> see also: most people using VSCode instead of vim/emacs
[15:01:13] <abastro> I use VSCode because of UI tho
[15:01:13] <tomsmeding> though that does have some confounding factors like MS support
[15:01:20] <tomsmeding> and UI I guess?
[15:01:24] <abastro> Yes, UI
[15:01:40] <abastro> I just cannot get rid of this like towards UI
[15:01:44] <tdammers> I don't think Python is simpler than Haskell from a user perspective. Sure, *implementing* it is a lot simpler, because you don't need a type checker or anything, but in order to *use* Python, you need to understand more concepts than to use Haskell. Or at least that's my personal impression, I haven't actually done any rigid research on the subject.
[15:02:03] <tdammers> And yes, "simple" and "easy" are different things.
[15:02:04] <abastro> I mean, ppl learn python much easier
[15:02:06] <tomsmeding> tdammers: what more concepts do you need to understand to use python than to use haskell?
[15:02:15] <tomsmeding> (roughly, example-wise)
[15:02:52] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[15:02:53] *** Joins: seydar (~seydar@pool-108-31-245-5.washdc.fios.verizon.net)
[15:03:34] <tomsmeding> the rules of Go are easier to learn than the rules of Agricola, however arguably it's harder to really understand Go than to really understand Agricola
[15:03:42] <tomsmeding> Python is Go; Haskell is Agricola
[15:03:49] <tdammers> well, there's a bit more magic in Python - magic functions like __init__ and all that, generators, annotations, various string formatters, ...
[15:03:57] <tomsmeding> okay the relative ratios are a bit skewed, but that idea
[15:04:21] <tdammers> Python is probably subjectively easier though
[15:04:27] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[15:04:30] <abastro> For ppl, it is easier to learn handful of general rules and loads of exceptions
[15:04:44] <abastro> Like, they could memorize `__init__` as one of the exceptions
[15:04:52] <abastro> Many ppl do better with concrete cases
[15:04:53] <tomsmeding> good point about generators and annotations; string formatters don't count as that's just instances of "a library"
[15:05:14] <tomsmeding> the magic functions are also all instances of "an automatic method call"
[15:05:19] <siers> annotations are so ad-hoc
[15:05:21] <tomsmeding> or operator overloading, I guess
[15:05:42] <abastro> Annotations are poor man's declarative programming
[15:05:49] <abastro> At least that is the impression I got in Java
[15:06:01] <tomsmeding> annotations are nice syntax but ultimately so dumb
[15:06:21] <tomsmeding> @f(xyz) def g(abc): ...   ====   g = f(xyz)(lambda g(abc): ...)
[15:06:21] <lambdabot> Unknown command, try @list
[15:06:27] <tomsmeding> @botsnack
[15:06:27] <lambdabot> :)
[15:06:33] <siers> "@annotation; def f()... = ..."  are  "f = annotate $ rest of the fucking function"
[15:06:40] <tomsmeding> that
[15:06:48] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[15:06:49] <siers> and for that they had to invent a whole another syntax 
[15:07:00] <tomsmeding> because python doesn't have multi-line lambdas!
[15:07:09] <tomsmeding> otherwise my rewrite rule would be generally applicable
[15:07:18] *** Quits: seydar (~seydar@pool-108-31-245-5.washdc.fios.verizon.net) (Ping timeout: 260 seconds)
[15:07:31] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 268 seconds)
[15:07:34] <siers> python the language makes my python sad :( 💩
[15:07:51] <tomsmeding> even though it was named after an actual python
[15:07:58] <tdammers> and let's please not talk about Python's scoping rules
[15:08:02] <tomsmeding> lol
[15:08:05] <abastro> You have a python?(snake?)
[15:08:10] <siers> (and I'm trying to stay hard out here)
[15:08:15] <tomsmeding> abastro: Guido has (had?) a python
[15:08:17] <tdammers> wasn't Python (the language) named after Monty Python?
[15:08:27] <abastro> Oh
[15:09:09] <tomsmeding> hm then I misremember
[15:10:09] <siers> .
[15:12:33] <abastro> Well anyway, so which language among "Java, JS, C, Python, Go"
[15:12:40] <abastro> To introduce monad concept
[15:13:19] <siers> haskell 😅
[15:13:51] <siers> ooh, ooh! scala
[15:14:49] <abastro> I mean, that's not an option
[15:14:56] <siers> for what it's worth, what others said about the necessity for a type system that can express the concept rings true to me
[15:15:09] <abastro> They just shooked head when seeing any Scala code
[15:15:20] <abastro> "How could anyone ever understand this"
[15:15:28] <siers> do you really need to teach someone "monads"? if they're not in the language, you won't benefit from knowing them much
[15:15:30] <tdammers> Monad doesn't buy you enough as an abstraction in any of these languages to pull its weight
[15:15:38] <siers> well then you didn't break it down well enough
[15:15:57] <abastro> Well, I just wanted to see their reactions
[15:16:12] <tdammers> also: in order to properly understand the Monad abstraction, you first need to understand typeclasses and such
[15:16:29] <siers> you can always shock someone by throwing gory, new syntax at anyone, that's not really an achievement
[15:16:33] <abastro> I guess I shouldn't explain, then.
[15:16:49] <abastro> I mean, I don't want shock
[15:16:56] <opqdonut> the bind "design pattern" can be taught in e.g. JS and Java (promise.then / flatmap / whatever)
[15:17:09] <opqdonut> but languages other than Haskell aren't really capable of expressing the Monad abstraction/library
[15:17:10] <abastro> I want to see the distaste from its great complexity
[15:17:20] <tdammers> what complexity
[15:17:25] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[15:17:34] <siers> abastro, aha! you do want to shock them!
[15:17:43] <abastro> No.
[15:17:49] <tdammers> Monad really is just bind, return, and the Monad Laws. None of that is more complex than elementary school algebra.
[15:18:03] <abastro> Elementary school algebra is quite complex to many.
[15:18:07] <abastro> That is the point.
[15:18:18] <siers> ok, well, what do you mean by wanting "to see the distaste" then?
[15:18:35] <abastro> I mean, I just want to test, that was my expectation
[15:18:52] <tdammers> Well, but if you find Monad "distastefully complex", then you must really hate multiplication.
[15:18:58] <abastro> I expect them to show distaste from its complexity, as they are only used to anything so simple
[15:19:22] <tdammers> class inheritance in Java is a lot more complex than the Monad abstraction, really
[15:19:25] <abastro> Multiplication is not as complex as monad tho, like in most ways
[15:19:32] <siers> that's not how you teach anything – by trying to connect with someone's distaste of complexity
[15:19:43] <abastro> Good point, in fact, they dislike Java because they cannot wrap head around class inheritance
[15:19:53] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:20:01] <abastro> No, I was not trying to teach them, because that is unrealistic goal
[15:20:08] <abastro> Ofc if I could, it would be great
[15:20:19] <siers> 👀
[15:20:21] <abastro> Tho it is too unrealistic for that.
[15:20:26] <tdammers> Again, Monad isn't complex at all. What makes it tricky to intuit is that, despite its utter simplicity, it is a very abstract and general concept, so it's hard to come up with a tangible intuition for it.
[15:21:00] <abastro> I mean, yea, if you show sth like `a * b = b * a`, they will cower at its difficulty
[15:21:01] <tdammers> Multiplication is easier that way: you can picture three piles of four marbles each, and visualize that as "3 x 4", and then you count the mental marbles and arrive at "12"
[15:21:11] <abastro> Yep, exactly
[15:21:34] <tdammers> And you can then rearrange those 12 marbles into four piles of 3, and thus intuit "a x b == b x a"
[15:21:35] <abastro> I guess I conflated complexity with difficulty
[15:22:12] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[15:22:16] <abastro> They just intuit `a*b = b*a`, but when they see the equation, they cannot stand the abstraction
[15:22:19] <siers> tdammers, I'm no expert in the corresponding theory, but I've also landed at that — the bind type makes sense and is intuitive for all the concrete types, but I wouldn't try to claim I can give a good intuition about the general case :)
[15:22:41] <tdammers> siers: exactly. (also see Diehl's "Eightfold Path To Monad Satori")
[15:23:06] <siers> abastro, so what are you trying to do, if not teach?
[15:23:20] <abastro> Just trying to give them a taste of monad
[15:23:44] <[exa]> that's a very abstract taste
[15:23:45] * [exa] dodges
[15:23:46] *** Joins: crazazy (~user@130.89.171.62)
[15:24:00] <abastro> And see if they would really have difficulty at it.
[15:24:02] <siers> yeah, it'll be an abstract case unless you teach them where they're powerful — in haskell or scala
[15:24:16] <[exa]> abastro: anyway, throwing examples is best for building trust&intuition
[15:24:18] <abastro> I see, so it would never be possible then.
[15:24:29] <siers> well, maybe it would be
[15:24:44] <siers> but if the type system didn't support it, would they be quite the same?
[15:24:53] <abastro> They have hard time in front of folding function
[15:25:19] <tdammers> there's also this thing called "problem-solution-ordering"
[15:25:24] <[exa]> abastro: for monads the common explanatory topic is the burritos analogy, as in "my precious stuff is wrapped in some complexity and I want to write a program that sanely manages the complexity itself, leaving me with my simply looking code"
[15:25:30] <tdammers> for effective teaching, you have to present the problem before the solution
[15:25:46] <abastro> Well at least I am aware that burritos are not useful analogy :)
[15:25:50] <tdammers> the Monad abstraction is a solution; in order to understand it, you have to first experience the problem it solves
[15:26:02] <abastro> Ofc I am going to present the problem
[15:26:05] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 246 seconds)
[15:26:09] <siers> tdammers, kind of obvious, but it's nice to see it put into words
[15:26:13] <abastro> Wait.. they would not understand that it is problem :(
[15:26:23] <tdammers> see, and that's why you won't be able to teach it
[15:26:35] <abastro> They will forever think e.g. null check is simple enough
[15:26:36] <abastro> Meh.
[15:26:38] <tdammers> siers: not my words, unfortunately :D
[15:26:52] <siers> I'll believe that, but that is not important :)
[15:26:54] <[exa]> abastro: for that you can perfectly demonstrate Maybe/Either as "erroring complexity", lists as "multiple results complexity", IO as "ordering the stuff right complexity", HTML builders as "who carries the result out complexity" (blaze is cool!), parsecs as "who tracks what we are actually parsing complexity", and at that point it usually clicks
[15:27:05] <tdammers> abastro: well, the Monad instance of Maybe is, if you squint a little, nothing more than a null checking framework
[15:27:15] <abastro> Indeed
[15:27:18] <tdammers> so there's a good start for a problem definition
[15:27:25] <siers> re: Eightfold Path to Monad Satori
[15:27:27] <siers> nice
[15:27:28] <abastro> Tho they won't have hard time with null check themselves
[15:27:35] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[15:27:37] <maerwald> the problems aren't so much monads, but what we did with them
[15:27:54] <[exa]> maerwald: +1
[15:27:55] <abastro> At least that is my impression when they love Go
[15:27:57] <tdammers> null checks are fine, it's just that having to spell them out every time gets old quick
[15:28:20] <tdammers> so we would like a framework that somehow makes null checking automatic, and warns us when we forgot a null check
[15:28:29] <abastro> I can already expect their answer: "Explicit null check is great for readability"
[15:28:42] <tdammers> is it, though?
[15:29:01] <tdammers> it's great for readability when you have to rely on someone reading the code to make sure you have all the null checks in place
[15:29:02] <abastro> It isn't, but for them, readability is what they can read :P
[15:29:19] <tdammers> but what if you could outsource that work to the compiler?
[15:29:21] <siers> "great for readability" is such a circlejerk, I am immediately reminded about all the pointless arguing over this. I have been traumatized 
[15:29:39] <[exa]> abastro: you need to sink the null checks into several layers of functions and loops before it becomes obvious that manual isn't the way
[15:29:44] <abastro> Outsourcing the work makes it implicit
[15:29:53] <abastro> So, they'd argue it hinders readability
[15:29:55] <[exa]> abastro: craft your examples well! :]
[15:29:59] <abastro> They want to see when it is actually done
[15:30:22] <abastro> Well they would be fine with it I guess
[15:30:23] <maerwald> https://paul.bone.id.au/pub/pbone-2016-haskell-sucks.pdf :p
[15:30:35] <tdammers> "readability" means that the things you need to know in order to understand the code are explicit, and the things you can safely take for granted are not
[15:30:41] <maerwald> although it goes only very shortly into the monad problem
[15:30:50] <tdammers> in Java, you cannot take non-nullability for granted, so explicit null checks are a good thing
[15:30:51] <abastro> Yep, I mean they don't understand true readability
[15:31:11] <geekosaur> readability is in the eye of the reader
[15:31:11] <maerwald> but: 1. monads don't compose and 2. transformers are a kludge for the lack of composability of monads
[15:31:21] <abastro> Yep, readability is in the eye of the reader
[15:31:30] <tdammers> but in Haskell, we can encode nullability in the type, and that makes null checks something we can take for granted - if a required check is missing, then the code will simply not compile
[15:31:33] <abastro> Well, tho they say that Go code is usually readable by everyone
[15:31:43] <abastro> Thus, Go is great for readability :tm:
[15:31:56] <maerwald> abastro: depends
[15:32:03] <[exa]> abastro: that's a cobol argument
[15:32:04] <maerwald> slices can be very hard
[15:32:12] <abastro> I am saying what they would be saying
[15:32:16] <tdammers> also: there are some relatively objective metrics wrt readability, but most people focus too much on "familiarity"
[15:32:21] <maerwald> every Go interview has something about slices
[15:32:33] <abastro> Familiarity, yeah
[15:32:37] <maerwald> because many Go devs don't understand them (thorougly)
[15:32:41] <abastro> Go is centered towards familiar stuffs
[15:33:18] <tdammers> Python syntax, for example, has some features that are objectively horrible for readability, such as making all sorts of different constructs (classes, procedures, conditionals) look similar
[15:33:19] <abastro> Anyway, I'd say, Go is good for junior's readability
[15:33:31] <maerwald> error handling in Go is extremely verbose
[15:33:32] <abastro> That is, not so much to learn until being able to read
[15:33:39] <tdammers> but people think of Python as "very readable", because it looks familiar to someone who doesn't have a lot of programming experience
[15:33:58] <maerwald> also funny: https://www.innoq.com/en/blog/golang-errors-monads/
[15:34:00] <abastro> I think Go would be similar case
[15:34:06] <tdammers> Perl is much better in that regard - it makes maximal use of the available character set, and makes different things look maximally different
[15:34:12] <abastro> Go is now taking that place of python at least
[15:34:28] <tdammers> but Perl is considered hard to read by many, because it looks so unfamiliar
[15:35:04] <maerwald> the only good thing about go is that their maintainers are *extremely* thorough and conservative about considering new features to the language and their impact
[15:35:16] <maerwald> something that most don't have
[15:36:24] <maerwald> but that also means they're still discussing whether ADTs are sensible
[15:36:35] *** Joins: xff0x (~xff0x@i121-117-52-147.s41.a013.ap.plala.or.jp)
[15:36:50] <abastro> Well I think ADT would not be sensible in their OOP-oriented eyes
[15:37:01] <maerwald> OOP?
[15:37:11] <maerwald> go is a procedural language
[15:37:23] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[15:37:26] <abastro> I heard Go has this `interface` thing
[15:37:34] <maerwald> that hardly makes it OOP
[15:37:37] <tdammers> "interface" isn't object-oriented
[15:38:13] <tdammers> IMO, "OOP" requires the ability to have open-recursion inheritance
[15:38:41] <abastro> Oh
[15:38:52] <tdammers> that is, when an object calls a method of itself, even from within an inherited method, the method call is resolved dynamically, based on the actual runtime object, not the lexical type by which it is accessed
[15:39:46] <abastro> I see.
[15:40:02] <tdammers> without open recursion, an "object" is really just a record of procedures
[15:40:13] <tdammers> or a record, where some fields may be procedures
[15:40:43] <abastro> Hmm
[15:40:53] <tdammers> which is of course a very useful thing to have, but it's not a new paradigm, people do this in procedural and functional code all the time
[15:41:03] <abastro> Then I guess they would put ADT at similar level of OOP
[15:41:13] <abastro> I do think they would be more eager to accept OOP than ADT
[15:41:38] *** Quits: jgeerds (~jgeerds@d5364b87.access.ecotel.net) (Ping timeout: 252 seconds)
[15:41:42] <maerwald> Go devs are concerned about the simplicity of their compiler implementation. Something we don't have in Haskell :p
[15:41:46] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:7904:da90:b863:898)
[15:42:12] <maerwald> so when they discuss features, it's also a discussion about whether that can even be implemented without significant increase in implementation complexity
[15:43:03] <maerwald> It's a controversial stance... because I'd rather have complexity in the compiler than in my program. But yeah, someone has to maintain the compiler too.
[15:43:46] <abastro> Yeah
[15:43:55] *** Joins: boxscape_ (~boxscape_@p4ff0be5f.dip0.t-ipconnect.de)
[15:44:07] <abastro> Also increasing complexity budget does not lead to great consequences
[15:44:36] <maerwald> I think it would be fascinating to marry some of the principles of the Haskell language with the pragmatism of the Go community. I don't think there is any such language/community, yet.
[15:44:55] <tdammers> maerwald: I've been thinking about this a bit myself
[15:45:14] <abastro> Wish it were possible
[15:46:25] <abastro> Btw, back to monads.. So I should not let them know about monads right?
[15:47:23] <abastro> Maybe, I should avoid trying to get them touch some concepts of FP
[15:47:28] <abastro> as that would also be difficult for them
[15:47:39] <maerwald> tdammers: I think the only way I can see this work is with a *set* of languages, that are even more interoperable than C#/F#/F*. So you can have some really fancy DT based stuff that's used by the maintainers of e.g. tls, but compiles to a more boring API.
[15:49:26] <abastro> <del>Compiles to JVM?</del>
[15:51:21] <boxscape_> I'm using mtl, and my main monad is just State at the moment. But I'm also using MonadWriter locally. Now I'd like to add another writer to the main monad, but of course I can't do that because of the functional constraint on MonadWriter. I was thinking maybe I'll just add it to the state, is there a better way?
[15:51:35] <maerwald> abastro: no, F* compiles to actualy F# code (or OCaml code)
[15:52:34] <maerwald> but now you're maintaining two (or three) compilers :D
[15:52:38] <maerwald> so it isn't for free
[15:52:42] <abastro[m]> I mean, more interpperable than C# etc -> use JVM
[15:53:56] <maerwald> The problem in Haskell is, you cannot opt out of API complexity. If someone thought it's probably cool to express all of this stuff with type families, you're going to deal with it too.
[15:55:17] <maerwald> So the ergonomics and image of the language is often dictated by the upper 10% of features. Because they will be used somewhere.
[15:56:13] <abastro[m]> True
[15:56:14] *** Quits: abastro (~abab9579@143.248.229.217) (Ping timeout: 268 seconds)
[15:56:17] <maerwald> transpiling is one solution to this
[15:56:54] <abastro[m]> How about transpiling to JVM
[15:57:16] <geekosaur> JVM still has some weaknesses when it comes to Haskell-like code
[15:57:47] <abastro[m]> Oh, bigger weakness than .NET?
[15:58:00] <geekosaur> I think it'sonly just getting tail calls?
[15:58:06] <boxscape_> there's both frege and eta as Haskell for the JVM, though I think neither are being actively developed
[15:58:14] <geekosaur> which are used heavily by STG
[15:58:23] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.4.1)
[15:58:38] <geekosaur> CLR is indeed a lot friendlier
[15:59:31] <maerwald> I mean, typescript is such a success story, partly because it's opt-in imo. You can still have your insane js spaghetti if you like.
[15:59:57] <tdammers> but opt-in also means that the benefits you get from types are marginal
[16:00:02] <abastro[m]> Hmm, CLR
[16:00:18] <boxscape_> at least typescript has the --strict flag
[16:00:20] <abastro[m]> Then maybe, gradual typing is the future
[16:00:23] <maerwald> tdammers: well, you can use the types too, but then you gotta write typescript
[16:00:57] <tdammers> maerwald: but if you're using an untyped library that you don't control, then the type guarantees pretty much end at the API boundary
[16:01:00] <abastro[m]> Wait, haskell does not mesh well with any imperative code though
[16:01:14] <tdammers> abastro[m]: it actually meshes surprisingly well
[16:01:14] <abastro[m]> So it would be hard to have the middleman language
[16:01:26] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[16:01:35] <tdammers> FFI-ing C code into Haskell is, IME, easier than into most OOP languages
[16:01:35] <abastro[m]> I mean, you frequently need IO to connect to those
[16:01:40] <merijn> abastro[m]: What makes you say that?
[16:01:40] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[16:01:42] <merijn> abastro[m]: So?
[16:01:45] <maerwald> tdammers: I'm more thinking about the F* vs F# difference. Both have strong types, but only one has refinement/dependent types.
[16:01:47] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[16:01:59] <maerwald> It's your choice at which complexity level you want to work.
[16:02:02] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[16:02:02] <tdammers> maerwald: I must admit I am not familiar with either of them to any meaningful degree
[16:02:10] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[16:02:14] <merijn> abastro[m]: I fail to see how "you need to use IO" and "does not mesh well" are related
[16:02:19] <abastro[m]> The strong typing is going to have struggle with the system
[16:02:23] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[16:02:31] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[16:02:35] <abastro[m]> I mean, this means littering IO in the codebase
[16:02:43] <abastro[m]> Which fairly many ppl dislike
[16:02:44] <maerwald> tdammers: so let's say you write a superset language of Haskell with dependent types that compiles back to haskell. So you can provide two APIs.
[16:02:46] <merijn> "litter" implies something bad
[16:02:47] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[16:02:47] <AndreasK> If the C FFI function can be treated as a pure mapping from input to output one doesn't even need IO
[16:02:53] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[16:03:07] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[16:03:11] <tdammers> abastro[m]: it's just making the littering of effects explicit
[16:03:15] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[16:03:15] <boxscape_> abastro[m] the usual idea is to only use IO where it needs to be, but that also means using IO where you do need it is fine
[16:03:23] <tdammers> abastro[m]: which, according to how you described the target audience, should be seen as a good thing
[16:03:28] *** ChanServ sets mode: +o litharge
[16:03:29] *** litharge sets mode: +b *!*@98.38.249.169
[16:03:29] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[16:03:32] <merijn> abastro[m]: Over focussing on avoiding IO and acting like IO is bad is a rather common thing many beginners do. In practice I fail to see the problem. Some things just involve a lot of IO
[16:03:37] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[16:03:39] *** litharge sets mode: -o litharge
[16:03:52] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[16:03:54] <geekosaur> hm
[16:03:58] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[16:04:01] <abastro[m]> Yea, I thought ppl does not make extreme use of FFI because of the purity barrier
[16:04:12] <tdammers> that is not true
[16:04:12] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[16:04:16] <tdammers> there is no "purity barrier"
[16:04:20] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[16:04:23] *** ChanServ sets mode: +o litharge
[16:04:23] <abastro[m]> I mean ofc, IO is common in codd
[16:04:23] *** litharge sets mode: +b *!*@c-174-63-118-52.hsd1.ma.comcast.net
[16:04:33] *** litharge sets mode: -o litharge
[16:04:46] <tdammers> it's just that when you FFI C procedures into Haskell, it is up to you to decide whether they should be declared in IO on the Haskell side, and if not, to make sure that that is safe
[16:04:57] <abastro[m]> But then, why are many libraries not thin facade over C codes?
[16:05:10] <tdammers> because it's often not necessary to resort to C
[16:05:16] <abastro[m]> I heard langs like python have really thin facades
[16:05:21] <merijn> abastro[m]: I call BS
[16:05:25] <hpc> in python it's because the language is hella slow
[16:05:29] <maerwald> abastro[m]: yaml is
[16:05:30] <geekosaur> many haskell libs *are* such thin wrappers
[16:05:33] <merijn> abastro[m]: Haskell's FFI to C is *much* less painful to use
[16:05:35] <hpc> you're not getting numpy performance in native python
[16:05:38] <merijn> (than python's)
[16:05:52] <geekosaur> and then there's higher level interfaces which allow you to work with them in native idiom
[16:05:58] <abastro[m]> Are many haskell libs thin wrappers?
[16:05:58] <merijn> And even numpy needs meta libraries to make it fast
[16:06:09] <abastro[m]> Then why are there still not enough libraries
[16:06:12] <merijn> abastro[m]: Some, depends on the library. How easy the model fits, etc.
[16:06:21] <hpc> abastro[m]: look through hackage for anything that's the name of a c lib
[16:06:25] <hpc> like sdl and such
[16:06:25] <merijn> abastro[m]: At what point are there "enough" libraries?
[16:06:35] *** Quits: dextaa_54 (~dextaa@user/dextaa) (Read error: Connection reset by peer)
[16:06:39] <boxscape_> abastro[m] a lot of graphics-related haskell libraries are such wrappers
[16:06:53] <abastro[m]> When ppl can find library for some obscure thing as well
[16:06:56] <hpc> there's a lot out there, but haskell doesn't abdicate its role as a programming language for something like vector math
[16:06:57] <merijn> abastro[m]: If you know C reasonably well, using GHC's FFI is very trivial
[16:07:20] <geekosaur> "enough libraries": because someone needs to do the work. even in python it's not just run a script over a C lib to generate the python wrapper
[16:07:57] <abastro[m]> Like, I recall someone saying that there is no binding to Microsoft SQL Server
[16:08:17] <abastro[m]> And Oracle DB
[16:08:35] <abastro[m]> Saw it from a link describing maturity of haskell on domains
[16:08:43] <hpc> there's absolutely database drivers for those
[16:08:46] *** Joins: dextaa_54 (~dextaa@user/dextaa)
[16:09:15] <abastro[m]> Hmmm, what does the link mean then
[16:09:28] <hpc> no clue, you didn't link it :P
[16:12:44] <maerwald> I tried to use mongodb once in Haskell
[16:13:01] *** Joins: abastro (~abab9579@143.248.229.217)
[16:13:07] <hpc> that's a mistake in any language :D
[16:13:09] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Remote host closed the connection)
[16:13:10] <merijn> I would consider a lack of mongodb bindings a feature in any language :D
[16:13:10] <abastro[m]> Let me search it up
[16:13:13] *** Quits: romesrf (~romes@2001:8a0:6d13:9700:55ae:5d11:5a75:11c3) (Ping timeout: 260 seconds)
[16:13:19] <hpc> merijn: *highfive*
[16:13:45] *** Quits: wolfshappen (~waff@irc.furworks.de) (Quit: later)
[16:13:56] <abastro> lmao
[16:14:10] *** Joins: wolfshappen (~waff@irc.furworks.de)
[16:14:53] <abastro> https://github.com/Gabriel439/post-rfc/blob/main/sotu.md
[16:15:04] *** Joins: romesrf (~romes@2001:8a0:6d13:9700:55ae:5d11:5a75:11c3)
[16:15:16] <maerwald> merijn: yeah, there's a library for mongodb schemas... but that doesn't exist in haskell
[16:15:22] <maerwald> that's the only sane way to use this beast
[16:15:44] <merijn> I don't think there is a sane way to use mongodb unless you literally don't care about your data :p
[16:15:51] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[16:16:06] *** Joins: califax (~califax@user/califx)
[16:16:27] <maerwald> it's just money transactions, so why would you
[16:16:29] <maerwald> :D
[16:16:47] <abastro> Then what are all the folks praising MongoDB
[16:16:51] <abastro> And refusing to use other DBs
[16:17:03] <tdammers> because it's what they know
[16:17:17] <hpc> if you can call it "knowing"
[16:17:54] <abastro> I mean, they learned SQL
[16:18:02] <abastro> And still went to use MongoDB
[16:18:24] <tdammers> "knowing" as in "feeling familiar"
[16:18:26] <abastro> https://github.com/Gabriel439/post-rfc/blob/main/sotu.md#databases-and-data-stores
[16:18:41] <tdammers> they may not have learned SQL properly
[16:18:43] <abastro> ^ Describes that there is no bindingto MS SQL Server and Oracle
[16:18:46] <merijn> abastro: So, I don't know how to break this to you. But on the whole, most people don't know what they're talking about :D
[16:18:54] <abastro> Yep, I mean perhaps learning SQL properly would have been hard to them
[16:18:54] <merijn> *Especially* on the internet
[16:18:56] <hpc> being able to write insert, select, update, delete statements does not count as learning sql
[16:19:18] <abastro> merijn: Indeed, in this case it was more personal engagement tho
[16:19:37] <abastro> hpc: You forgot "joining" there
[16:20:08] <abastro> Is there really binding towards Oracle? Is that article outdated?
[16:20:09] <hpc> not many people actually know joining
[16:20:17] <abastro> Welp
[16:20:28] <abastro> I do know that they learned joining quite a bit. Still prefers MongoDB
[16:20:43] *** Quits: romesrf (~romes@2001:8a0:6d13:9700:55ae:5d11:5a75:11c3) (Ping timeout: 260 seconds)
[16:20:46] *** Quits: mixfix41 (~sdenynine@user/mixfix41) (Quit: and the winter is outta here...)
[16:20:54] <abastro> What can I say tho, as they love to use ORM as well
[16:21:05] <abastro> loved to use ORMs when using SQL*
[16:21:27] <merijn> abastro: Many people believed the claims MongoDB was making ("fast", "distributed", "safe"), and not the actual testing that shows mongodb (at least in the beginning) dropped data on the floor *all the time*
[16:21:28] <tdammers> so basically, compensating for lack of understanding with superficially easy APIs
[16:21:54] <tdammers> textbook anti-intellectualism
[16:21:57] <tdammers> "don't make me think"
[16:22:02] <abastro> merijn: Well that's true, yes.
[16:22:16] <merijn> Dammit, I forgot the name of the guy who did those in-depth ACID compliance tests for databases
[16:22:16] <abastro> tdammers: Yea, it is common everywhere nowadays
[16:22:25] <abastro> We have to deal with it now
[16:22:35] <tdammers> also, quasi-mandatory reading in this context: http://www.paulgraham.com/avg.html
[16:23:06] <merijn> tdammers: Isn't Paul Graham the post child of weird anti-intellectualism when it comes to software dev? :p
[16:23:13] <maerwald> well, if I had to choose between ultra-correct event sourcing and mongodb... I might actually go with the latter :p But most likely I'd just quit the job on the spot.
[16:23:43] <tdammers> merijn: Paul Graham is a typical lisper in many regards - principled when it serves him, but then resorting to "pragmatism" in weird places
[16:23:47] *** Quits: abastro (~abab9579@143.248.229.217) (Remote host closed the connection)
[16:24:04] *** Joins: abastro (~abab9579@143.248.229.217)
[16:24:10] <abastro> Meh accidentally logged  out
[16:24:14] <tdammers> anyway, I think the Blub Paradox he describes is pretty spot-on, if you ignore the fact that he uses Lisp as an example
[16:24:31] <merijn> tdammers: He just thinks it doesn't apply to him xD
[16:24:43] <tdammers> merijn: ah yes, the blub paradox paradox
[16:25:01] <hpc> that's the nice thing about haskell - it's immune to the blub paradox
[16:25:09] <hpc> it may be the best language ever, but idris is even better :P
[16:25:15] <merijn> Ah!
[16:25:18] <merijn> Jepsen!
[16:25:20] <merijn> That's the guy
[16:25:55] <abastro> Well though, it is fair to say that many ppl just cannot stand the difficulty of abstractions and such
[16:26:23] <abastro> Not just anti-intellectualism, it's that they are trying to do more than what they can
[16:26:40] <maerwald> well, there's also "elitism" 
[16:26:53] <maerwald> that is ignorance towards intellectual complexity
[16:26:59] <maerwald> and its impact on engineering
[16:27:48] <abastro> Elitism was ignorance towards intellectual complexity?
[16:27:51] <abastro> Wow.
[16:29:52] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[16:30:12] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[16:30:38] <tdammers> "elitism" in the sense of taking the ability to understand and deal with a certain type of complexity for granted, and refusing to admit that this complexity is detrimental to adoption of the language and its libraries, and that it is a significant problem in production use
[16:31:02] <maerwald> yes, ecosystem effects
[16:31:11] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Remote host closed the connection)
[16:31:11] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Read error: Connection reset by peer)
[16:31:25] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[16:31:26] <tdammers> in other words, people have been making horribly complex APIs, and just insisting that if you find them too complex, then the problem is your inability to casually understand them, not that they are simply too complex
[16:31:51] <abastro> So, haskell?
[16:31:55] <maerwald> and: just because we understand a concept doesn't mean we understand its *design space* in the practical sense. And most of the latter, that design space is what's going to come back at us
[16:32:02] *** Joins: kaph (~kaph@dynamic-adsl-78-12-162-98.clienti.tiscali.it)
[16:32:06] <tdammers> yeah
[16:32:08] <merijn> abastro: Depends on your corner of the Haskell ecosystem
[16:32:28] *** Quits: Psybur (~Psybur@c-76-123-45-25.hsd1.va.comcast.net) (Ping timeout: 260 seconds)
[16:32:31] <abastro> I wonder which corner of haskell ecosystem
[16:32:36] <abastro> I guess Servant
[16:33:00] <maerwald> servant is a rather good citizen though and has good justification for the approach
[16:33:06] <abastro> Hmmm.
[16:33:10] <tdammers> like, it's great that you have discovered how Van Laarhoven lenses magically fit into this self-contained ecosystem of all sorts of functors and traversals and whatnot, and it all beautifully works out; but the reality of it is that you often end up with completely useless error messages that aren't helpful at all
[16:33:13] <abastro> Which libraries do you mean?
[16:33:29] *** ChanServ sets mode: +o litharge
[16:33:30] *** litharge sets mode: -bo *!*@98.38.249.169 litharge
[16:33:37] <maerwald> tdammers: heh, are you marketing optics? :p
[16:33:55] <abastro> optics aren't particularly immune to the criticism as well tho
[16:34:00] <tdammers> maerwald: given my professional affiliation, I can see why you would think that XD
[16:34:00] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[16:34:22] <abastro> I guess I should distance myself from optics, but.. I just cannot. :(
[16:34:23] *** ChanServ sets mode: +o litharge
[16:34:23] *** Quits: agrosant (~agrosant@79.103.182.92.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[16:34:23] *** litharge sets mode: -bo *!*@c-174-63-118-52.hsd1.ma.comcast.net litharge
[16:34:30] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[16:34:49] *** Quits: abastro (~abab9579@143.248.229.217) (Remote host closed the connection)
[16:34:57] *** Joins: agrosant (~agrosant@79.103.182.92.dsl.dyn.forthnet.gr)
[16:34:57] *** Joins: Psybur (~Psybur@2600:1003:b138:112:6968:67e7:2717:bba0)
[16:35:19] *** AlexNoo_ is now known as AlexNoo
[16:35:31] *** Joins: abastro (~abab9579@143.248.229.217)
[16:36:42] <abastro> Is `lens` somewhat bad concept then?
[16:36:59] <merijn> Please define "bad" and "concept" :D
[16:37:00] <maerwald> no, it's just that there's little difference between internals and API
[16:37:06] <maerwald> it's all the same
[16:37:08] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 246 seconds)
[16:37:18] <tdammers> the concept is solid and useful
[16:37:29] <tdammers> and it's actually shared between the lens and optics libraries
[16:37:33] <abastro> Oh, I thought you mean `lens` itself is quite tangled and byzantine invention
[16:37:37] <tdammers> the difference is how they are im[plemented
[16:38:01] <abastro> As how ppl outside haskell community says about `lens`
[16:38:06] <tdammers> the optics library takes a relatively "down to earth" approach, expressing lenses as what they conceptually are - a getter/setter pair.
[16:38:12] *** Joins: briandaed (~root@109.95.142.93.r.toneticgroup.pl)
[16:38:13] <abastro> Btw who is this guy nicked `lens`
[16:38:34] <abastro> Yep I prefer optics library as well
[16:38:51] <tdammers> the lens library, by contrast, uses a trick known as "van Laarhoven lenses", which allows embedding both getter and setter into a single function, parametrized over a functor type variable
[16:39:09] <tdammers> by selecting an appropriate functor, one can use the same function as a getter or as a setter
[16:39:40] <abastro> Hm actually, this is a question I got often and I myself also had as well:
[16:39:48] <maerwald> https://hackage.haskell.org/package/optics-core-0.4.1/docs/Optics-Optic.html#t:JoinKinds <- pretty self explanatory and these are internals
[16:39:56] <abastro> What is the benefit of Van Laarhoven implementation?
[16:40:01] <tdammers> and, by virtue of a happy little coincidence, composing these van Laarhoven lens functions is equivalent to composing the lenses themselves (but with composition order flipped), so the lens library doesn't have to define a dedicated lens composition operator, you can just use (.) to compose lenses
[16:40:25] <tdammers> and by extension, you get a bunch of other things for free as well, which is what the lens library extensively exploits
[16:40:29] <siers> so cool
[16:40:40] <abastro> I think I saw van laarhoven encoding in optics library as well
[16:40:41] <abastro> Why is that?
[16:41:29] <boxscape_> edward has a few paragraphs about the benifits/drawbacks of profunctor optics vs van laarhoven here, abastro https://www.reddit.com/r/haskell/comments/73tlhs/dont_fear_the_profunctor_optics/dnt3bx7/
[16:42:01] <abastro> Oh, I meant to say profunctor optics implementation, duh
[16:42:15] <abastro> It is still quite complex
[16:42:31] <tdammers> the concept itself isn't complex at all
[16:44:17] <abastro> Welp I meant to say, difficult
[16:44:49] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:7904:da90:b863:898) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:45:21] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:7904:da90:b863:898)
[16:45:47] <abastro> Anyway btw, it is still illusive which libraries you mean by being overly complex
[16:45:56] <abastro> Other than lens, that is
[16:46:07] <merijn> That one SQL one :p
[16:46:25] <merijn> I forget the name
[16:46:32] <tdammers> esqueleto?
[16:46:36] <maerwald> beam
[16:46:39] <abastro> Oh. Beam
[16:46:42] <abastro> I def recall that one
[16:47:07] <tdammers> something like beam would generally be about my 4th choice
[16:47:09] <abastro> Looked through documentation, thought, "No, that's nope, I am not learning this"
[16:47:15] <merijn> oh, right beam
[16:47:34] <abastro> Is Opaleye also near the limit?
[16:47:34] <tdammers> but if you have to take that approach, then beam is about as good as it gets
[16:47:47] <merijn> tdammers: I dislike esqueleto, because overall it just seems less effort to, ya know, just write SQL :p
[16:47:59] <maerwald> I switched my code to hasql
[16:48:01] <maerwald> it's ok
[16:48:01] <tdammers> merijn: yes, indeed; "just write SQL" is approach #1 for me
[16:48:21] <maerwald> the encoders/decoders approach is a bit confusing at first
[16:48:24] <merijn> beam is just...madness
[16:48:28] <maerwald> but in general I appreciate less typeclass foo
[16:48:29] <abastro> (Well I legit thought of making an SQL library using typed list, glad that I scraped that one)
[16:48:48] <tdammers> approach #2 is "whip up my own domain-specific SQL query construction automation"
[16:48:56] *** Joins: cfricke (~cfricke@user/cfricke)
[16:49:06] <maerwald> and hasql is designed nicely as a library *set*
[16:49:07] <merijn> tdammers: I'm doing a mix off 1, 2, and persistent
[16:49:08] <abastro> *Monomer typeclasses are in extreme fear*
[16:49:27] <merijn> tdammers: Although persistent only for legacy reasons :p
[16:49:35] <merijn> And once you have it, might as well use it
[16:49:38] <tdammers> the advantage of making it application-specific is that you can aggressively exploit application-specific conventions, such as "all primary keys will be UUID's"
[16:49:52] <abastro> Now that is quite useful convention
[16:50:19] <abastro> Next time I am making DB for my own usage, I will use UUID Primary key
[16:50:23] *** Joins: romesrf (~romes@2001:8a0:6d13:9700:55ae:5d11:5a75:11c3)
[16:50:37] <tdammers> just an example - but as long as you have those conventions, and consistently apply them, the complexity of your database abstraction layer melts down a lot, because you can ditch a whole lot of generalizations
[16:50:46] *** Quits: abastro (~abab9579@143.248.229.217) (Remote host closed the connection)
[16:51:33] *** Joins: abastro (~abab9579@143.248.229.217)
[16:52:14] <abastro> Is "too many typeclasses" bad?
[16:52:21] <abastro> When used for name overloading
[16:52:42] <merijn> name overloading in general is a bad idea, imo
[16:52:43] <abastro> Not using clever\ tricks
[16:52:49] <merijn> So "yes"
[16:52:51] <abastro> monomer is a bad idea then hmm
[16:52:54] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[16:53:12] <abastro> Good UI library in haskell when
[16:56:59] *** Quits: romesrf (~romes@2001:8a0:6d13:9700:55ae:5d11:5a75:11c3) (Ping timeout: 252 seconds)
[16:57:07] *** Quits: acidjnk (~acidjnk@p200300d0c7049f07a51ab7ce4c98e594.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[16:58:09] <abastro> Btw are common set of libraries of haskell fine? Like, vector, transformers, containers, unordered-containers, text, bytestring, etc
[16:59:42] *** Joins: seydar (~seydar@154-27-113-252.starry-inc.net)
[17:01:10] *** Joins: alp_ (~alp@user/alp)
[17:01:59] *** Quits: akegalj (~akegalj@93-138-67-213.adsl.net.t-com.hr) (Quit: leaving)
[17:05:47] <maerwald> Is there a solution for jsonifying a result set from a postgres library at the client side (without knowing the number of columns or even their types)?
[17:08:36] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[17:09:09] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[17:09:59] *** Quits: xff0x (~xff0x@i121-117-52-147.s41.a013.ap.plala.or.jp) (Quit: xff0x)
[17:10:23] *** Joins: romesrf (~romes@2001:8a0:6d13:9700:55ae:5d11:5a75:11c3)
[17:13:25] *** Quits: romesrf (~romes@2001:8a0:6d13:9700:55ae:5d11:5a75:11c3) (Client Quit)
[17:13:37] *** Quits: fryguybob (~fryguybob@cpe-74-67-169-145.rochester.res.rr.com) (Quit: leaving)
[17:14:12] *** Quits: seydar (~seydar@154-27-113-252.starry-inc.net) (Ping timeout: 240 seconds)
[17:16:05] *** Joins: jgeerds (~jgeerds@d5364b87.access.ecotel.net)
[17:16:37] *** Joins: xff0x (~xff0x@i121-117-52-147.s41.a013.ap.plala.or.jp)
[17:17:14] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[17:20:01] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 248 seconds)
[17:21:51] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 260 seconds)
[17:22:30] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 272 seconds)
[17:26:46] *** Joins: razetime (~quassel@117.254.35.74)
[17:30:40] *** Joins: seydar (~seydar@154-27-113-252.starry-inc.net)
[17:30:44] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[17:33:01] *** Quits: chenqisu1 (~chenqisu1@183.217.202.44) (Ping timeout: 240 seconds)
[17:33:57] *** Joins: deadmarshal_ (~deadmarsh@95.38.113.9)
[17:35:05] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[17:35:13] *** Quits: seydar (~seydar@154-27-113-252.starry-inc.net) (Ping timeout: 250 seconds)
[17:38:09] *** Quits: deadmarshal_ (~deadmarsh@95.38.113.9) (Ping timeout: 248 seconds)
[17:44:40] *** Quits: abastro (~abab9579@143.248.229.217) (Remote host closed the connection)
[17:45:31] *** Joins: xff0x_ (~xff0x@i121-117-52-147.s41.a013.ap.plala.or.jp)
[17:45:33] *** Joins: abastro (~abab9579@143.248.229.217)
[17:47:41] *** Joins: sondre (~sondre@2001:700:200:f112::2a03)
[17:48:02] *** sondre is now known as sondr3
[17:49:05] <sondr3> anyone have any experience with reading lots of files in parallel? I have an embarrasingly parallel problem where I want to read and parse a few thousand files 
[17:49:55] <sondr3> I tried using the async package, but it spawns as many threads as files I want to parse, which was... a bit too much, haha
[17:50:13] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[17:50:25] *** Joins: califax (~califax@user/califx)
[17:50:47] *** Joins: tito (tito@tilde.team)
[17:51:21] *** Joins: fask (~fax@2a02:c7f:f097:7f00:8c5c:bbbe:c07f:5d1b)
[17:51:29] <sondr3> Something like a concurrent mapM that's bound by the available threads would be ideal, sort of like how `par_iter` from `rayon` in Rust 
[17:51:33] *** Joins: seydar (~seydar@154-27-113-252.starry-inc.net)
[17:52:06] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[17:52:07] *** Joins: off^ (~off@c-24-99-107-170.hsd1.ga.comcast.net)
[17:52:23] <abastro[m]> IIRC there was a package which is similar to Async but also limits thread number
[17:53:24] <abastro[m]> https://hackage.haskell.org/package/async-pool-0.9.1/docs/Control-Concurrent-Async-Pool.html
[17:54:01] *** Quits: abastro (~abab9579@143.248.229.217) (Ping timeout: 268 seconds)
[17:54:01] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Ping timeout: 268 seconds)
[17:54:32] <sondr3> abastro[m]: thanks, I'll try it out 
[17:54:50] *** Quits: ystael (~ystael@user/ystael) (Quit: Lost terminal)
[17:55:43] *** Joins: abastro (~abab9579@192.249.26.113)
[17:55:49] *** Quits: seydar (~seydar@154-27-113-252.starry-inc.net) (Ping timeout: 240 seconds)
[17:56:51] *** Joins: ystael (~ystael@user/ystael)
[17:57:12] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[17:57:44] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[18:00:02] *** Quits: fask (~fax@2a02:c7f:f097:7f00:8c5c:bbbe:c07f:5d1b) (Remote host closed the connection)
[18:00:19] *** Joins: fax (~fax@2a02:c7f:f097:7f00:8c5c:bbbe:c07f:5d1b)
[18:00:35] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[18:01:23] <merijn> I also wrote my own package with bounded concurrency for that sorta thing
[18:01:29] <merijn> @hackage broadcast-chan
[18:01:29] <lambdabot> https://hackage.haskell.org/package/broadcast-chan
[18:02:21] <merijn> sondr3: I specifically wrote that because the lack of bound on mapConcurrently was a problem for my own trivially parallel IO :p
[18:02:53] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 246 seconds)
[18:03:30] <merijn> The current implementation isn't super fast, so don't expect great scaling for trivial work, but should be fine for stuff like IO
[18:04:52] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[18:05:12] <sondr3> merijn: nice, I'll try that too and see what works best
[18:05:58] <merijn> (trivial as in less than 1 millisecond or so)
[18:06:36] <merijn> sondr3: I have a wrapper for conduit to so you can stream data into a conduit that processes N elements in parallel :)
[18:06:44] <merijn> (if that helps your usecase :p)
[18:07:47] *** Quits: kaph (~kaph@dynamic-adsl-78-12-162-98.clienti.tiscali.it) (Ping timeout: 246 seconds)
[18:08:01] <sondr3> I've never used conduit so unless it is very straight forward I'm not sure its worth trying it :p 
[18:08:32] *** Quits: marquis_andras (~marquis_a@14-201-230-116.tpgi.com.au) (Remote host closed the connection)
[18:09:37] *** Quits: BlackboardN (~Blackboar@user/BlackboardN) (Ping timeout: 248 seconds)
[18:10:53] <merijn> it's quite nice for stream processing.
[18:11:40] *** Joins: BlackboardN (~Blackboar@user/BlackboardN)
[18:12:25] *** Joins: seydar (~seydar@154-27-113-252.starry-inc.net)
[18:12:36] *** Joins: deadmarshal_ (~deadmarsh@95.38.113.9)
[18:13:50] <sondr3> Never touched streaming in Haskell, this is basically me running a megaparsec parser on a bunch of small files that right now is somewhat slow
[18:15:40] <maerwald> streamly has parsers
[18:16:03] <maerwald> https://hackage.haskell.org/package/streamly-0.8.2/docs/Streamly-Internal-Data-Parser.html
[18:17:16] <sondr3> The problem isn't really that the parser itself is very slow, it's that it's slow to run the parser sequentially on >10k files all the time, hehe
[18:17:36] *** Quits: seydar (~seydar@154-27-113-252.starry-inc.net) (Ping timeout: 272 seconds)
[18:17:47] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:17:47] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:17:47] *** Joins: wroathe (~wroathe@user/wroathe)
[18:18:07] *** Joins: kaph (~kaph@dynamic-adsl-78-12-162-98.clienti.tiscali.it)
[18:21:09] <tdammers> so... pump the filenames into a Chan, spawn a number of worker threads, have each one pull a filename from the Chan, process it, rinse and repeat
[18:21:15] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[18:21:50] <merijn> tdammers: Except the library I linked already does that :p
[18:21:55] <tdammers> merijn: sure
[18:22:06] <merijn> tdammers: Because I kept having to do it and managing all the edge cases correctly *sucks*
[18:22:20] <merijn> So I figured I'd just do it correctly once and reuse it :p
[18:22:21] <tdammers> haha, yeah, I'd expect that 
[18:22:24] *** Quits: xff0x (~xff0x@i121-117-52-147.s41.a013.ap.plala.or.jp) (Quit: xff0x)
[18:23:13] <merijn> Bonus of using conduit is that I apply backwards propagation and block the filename writer if you produce to many :)
[18:23:26] <maerwald> boring, streamly already has async support
[18:23:35] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:70be:3437:d6be:b5ae) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:24:03] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:70be:3437:d6be:b5ae)
[18:24:07] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[18:24:07] <merijn> maerwald: My dependency footprint is a fraction of streamly's, so there's that :)
[18:24:35] <maerwald> if you want few dependencies, Haskell isn't the right language
[18:24:35] *** Quits: Katarushisu (~Katarushi@cpc147334-finc20-2-0-cust27.4-2.cable.virginm.net) (Ping timeout: 246 seconds)
[18:24:52] <merijn> base, transformers, and unliftio-core
[18:26:13] *** Quits: alp_ (~alp@user/alp) (Ping timeout: 260 seconds)
[18:26:42] *** Quits: Psybur (~Psybur@2600:1003:b138:112:6968:67e7:2717:bba0) (Ping timeout: 268 seconds)
[18:26:43] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 260 seconds)
[18:26:46] *** Joins: xff0x (~xff0x@i121-117-52-147.s41.a013.ap.plala.or.jp)
[18:27:39] *** Joins: Psybur (~Psybur@2601:5c9:4201:3220:19c2:a1cd:6600:38ba)
[18:28:52] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Quit: mikoto-chan)
[18:29:08] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[18:30:00] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Quit: WeeChat 3.4.1)
[18:30:09] <abastro> What if I want less than 100GB dependencies
[18:31:01] <geekosaur> 100GB does sound a bit exscessive; sounds more like you need to gc stack/cabal
[18:31:19] <geekosaur> (or nix)
[18:32:07] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[18:33:15] *** Joins: seydar (~seydar@154-27-113-252.starry-inc.net)
[18:34:11] *** Joins: shriekingnoise (~shrieking@201.231.16.156)
[18:35:53] *** Joins: bahamas (~lucian@84.232.140.158)
[18:36:08] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 246 seconds)
[18:36:29] <maerwald> I use cabal-cache with an S3 bucket and just regularly delete all local stuff
[18:37:11] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[18:37:53] *** Quits: seydar (~seydar@154-27-113-252.starry-inc.net) (Ping timeout: 248 seconds)
[18:39:08] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[18:42:22] <abastro> Yep, I mean I could gc but
[18:42:26] <abastro> It is hard to do
[18:42:32] <merijn> Not really
[18:42:41] <merijn> "rm -rf ~/.cabal/store"
[18:43:18] <merijn> Or only the subdir for a specific GHC if you want to be a bit more targeted
[18:43:22] <geekosaur> monochrom has a more selective way but just nuking the store and starting over is usually decent
[18:44:16] <geekosaur> https://github.com/treblacy/cabalgc
[18:44:49] <janus> we need a bigger store, such that it can survive nuking... like walmart, but planet-sized
[18:45:43] *** Joins: acidjnk (~acidjnk@p200300d0c7049f074d48d16d808cf7eb.dip0.t-ipconnect.de)
[18:46:34] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[18:49:46] <razetime> hello. Is this the correct place to talk about Google Summer of Code for Haskell?
[18:50:09] <janus> razetime: i think so, which project are you looking at?
[18:50:26] <razetime> Control headless Chrome/Chromium
[18:50:33] <razetime> I'm interested in this one
[18:50:39] <razetime> https://summer.haskell.org/ideas.html#chrome-devtools-protocol
[18:51:09] <janus> oh, that's mentored by Albert Krewinkel and Jasper Van der Jeugt. I know you can reach Jasper on the Discourse, I am not sure he is on IRC
[18:51:33] <razetime> i see. Will check out the discourse, then.
[18:51:38] <janus> well, wait a bit
[18:51:45] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[18:51:53] <janus> maybe Albert Krewinkel is in here, i just don't know his nick name
[18:52:04] <razetime> I will stay online here. thanks.
[18:52:22] <janus> generally you have to wait a few hours on IRC because people are not all hyper obsessive about reading it all the time :P
[18:52:28] <janus> (like me :O)
[18:52:59] <razetime> good habits. I agree
[18:53:02] *** Quits: sondr3 (~sondre@2001:700:200:f112::2a03) (Quit: sondr3)
[18:54:07] *** Joins: seydar (~seydar@154-27-113-252.starry-inc.net)
[18:54:14] *** Quits: xff0x (~xff0x@i121-117-52-147.s41.a013.ap.plala.or.jp) (Quit: xff0x)
[18:54:16] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.4.1)
[18:54:25] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:57:01] *** Joins: xff0x (~xff0x@i121-117-52-147.s41.a013.ap.plala.or.jp)
[18:57:08] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[18:58:41] *** Quits: seydar (~seydar@154-27-113-252.starry-inc.net) (Ping timeout: 248 seconds)
[18:59:29] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[19:00:27] *** Joins: Akiva (~Akiva@user/Akiva)
[19:00:27] <abastro> merijn: Well, there is a problem:
[19:00:35] <abastro> I hate how long it takes to compile
[19:04:11] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[19:05:31] *** Joins: zaquest (~notzaques@5.130.79.72)
[19:05:37] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 248 seconds)
[19:07:45] *** Quits: chomwitt (~chomwitt@2a02:587:dc19:3600:a66b:8309:cc51:32) (Ping timeout: 248 seconds)
[19:09:36] *** Joins: seydar (~seydar@154-27-113-252.starry-inc.net)
[19:11:16] *** Quits: fax (~fax@2a02:c7f:f097:7f00:8c5c:bbbe:c07f:5d1b) (Remote host closed the connection)
[19:11:33] *** Joins: fax (~fax@2a02:c7f:f097:7f00:8c5c:bbbe:c07f:5d1b)
[19:11:48] *** Joins: Chai-T-Rex (~ChaiTRex@user/chaitrex)
[19:12:55] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Ping timeout: 240 seconds)
[19:15:25] *** Quits: abastro (~abab9579@192.249.26.113) (Ping timeout: 240 seconds)
[19:17:36] *** Quits: fax (~fax@2a02:c7f:f097:7f00:8c5c:bbbe:c07f:5d1b) (Remote host closed the connection)
[19:17:52] <merijn> abastro: I just nuke it once or twice a year
[19:17:58] *** Joins: fax (~fax@94.6.139.91)
[19:19:38] *** Quits: fax (~fax@94.6.139.91) (Remote host closed the connection)
[19:19:44] *** Quits: seydar (~seydar@154-27-113-252.starry-inc.net) (Ping timeout: 268 seconds)
[19:19:56] *** Joins: fax (~fax@2a02:c7f:f097:7f00:8c5c:bbbe:c07f:5d1b)
[19:20:57] <maerwald> I wonder when cabal hooks finally land. Then I'll add a post-build hook that uploads the artifacts to S3
[19:21:03] <abastro[m]> I see.. perhaps mine just grew fast this time.
[19:21:36] <abastro[m]> Every time I run cabal update, things rebuilf
[19:21:39] <abastro[m]> Rebuild*
[19:22:16] <merijn> abastro[m]: That's because by default the cabal build plan uses the newest allowed version, so everytime you update the buildplan changes
[19:22:23] <merijn> It's not rebuilding things at all
[19:22:28] <merijn> It's building new things
[19:22:39] <merijn> If you don't want that, freeze the buildplan
[19:22:56] <maerwald> would be interesting to have a solver setting that prefers installed versions
[19:23:09] <merijn> maerwald: That's what v1- cabal had
[19:23:12] <merijn> And it fucking sucked
[19:23:16] *** Joins: seydar (~seydar@154-27-113-252.starry-inc.net)
[19:23:25] <merijn> because build plans were super unpredictable and would randomly break on random machines
[19:23:58] <merijn> The switch to the new deterministic approach was to avoid those issues and make testing with more recent versions easier
[19:25:36] *** Quits: fax (~fax@2a02:c7f:f097:7f00:8c5c:bbbe:c07f:5d1b) (Remote host closed the connection)
[19:25:53] *** Joins: fax (~fax@2a02:c7f:f097:7f00:8c5c:bbbe:c07f:5d1b)
[19:27:16] <abastro[m]> Yep, building new things
[19:27:19] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[19:28:03] *** Joins: jakalx (~jakalx@base.jakalx.net)
[19:28:07] <abastro[m]> While it is normally great, with absence of great gc tools, it easily grows the file size
[19:28:21] <maerwald> you can cabal update but still pin index-state
[19:28:28] <maerwald> for a certain project
[19:28:42] *** exarkun_ is now known as exarkun
[19:28:42] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[19:28:43] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[19:29:04] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[19:29:13] <abastro[m]> I indeed like the 10 instances of xmonads  /s
[19:29:49] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Ping timeout: 240 seconds)
[19:31:54] *** Quits: fax (~fax@2a02:c7f:f097:7f00:8c5c:bbbe:c07f:5d1b) (Remote host closed the connection)
[19:32:11] *** Joins: fax (~fax@2a02:c7f:f097:7f00:8c5c:bbbe:c07f:5d1b)
[19:33:55] *** Joins: danso (~danso@danso.ca)
[19:35:49] *** Quits: fax (~fax@2a02:c7f:f097:7f00:8c5c:bbbe:c07f:5d1b) (Remote host closed the connection)
[19:35:55] *** Joins: chomwitt (~chomwitt@athedsl-31881.home.otenet.gr)
[19:36:06] *** Joins: fax (~fax@2a02:c7f:f097:7f00:8c5c:bbbe:c07f:5d1b)
[19:36:20] *** Joins: Katarushisu (~Katarushi@cpc147334-finc20-2-0-cust27.4-2.cable.virginm.net)
[19:39:42] *** Quits: fax (~fax@2a02:c7f:f097:7f00:8c5c:bbbe:c07f:5d1b) (Remote host closed the connection)
[19:39:59] *** Joins: fax (~fax@2a02:c7f:f097:7f00:8c5c:bbbe:c07f:5d1b)
[19:45:46] *** Quits: fax (~fax@2a02:c7f:f097:7f00:8c5c:bbbe:c07f:5d1b) (Remote host closed the connection)
[19:46:04] *** Joins: fax (~fax@2a02:c7f:f097:7f00:8c5c:bbbe:c07f:5d1b)
[19:47:23] *** Quits: razetime (~quassel@117.254.35.74) (Ping timeout: 250 seconds)
[19:47:58] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:5d73:ba4b:5267:e012) (Quit: WeeChat 2.8)
[19:49:25] *** Quits: seydar (~seydar@154-27-113-252.starry-inc.net) (Ping timeout: 240 seconds)
[19:49:33] *** Quits: dextaa_54 (~dextaa@user/dextaa) (Read error: Connection reset by peer)
[19:50:13] *** Quits: Psybur (~Psybur@2601:5c9:4201:3220:19c2:a1cd:6600:38ba) (Ping timeout: 260 seconds)
[19:50:20] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 246 seconds)
[19:50:54] *** Joins: Psybur (~Psybur@2600:1003:b138:112:20c5:efb4:887:de9a)
[19:51:18] *** Joins: seydar (~seydar@154-27-113-252.starry-inc.net)
[19:51:44] *** Joins: dextaa_54 (~dextaa@user/dextaa)
[19:54:00] *** Quits: fax (~fax@2a02:c7f:f097:7f00:8c5c:bbbe:c07f:5d1b) (Remote host closed the connection)
[19:54:04] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:54:23] *** Joins: fax (~fax@94.6.139.91)
[19:55:24] *** Quits: seydar (~seydar@154-27-113-252.starry-inc.net) (Ping timeout: 240 seconds)
[19:56:21] <tomsmeding> abastro[m]: `cabal freeze` in your project
[19:56:32] <tomsmeding> creates a cabal.project.freeze file that fixes dep versions
[19:57:18] *** Joins: razetime (~quassel@117.254.35.210)
[19:59:20] <abastro[m]> Yep, I should not forget about that.
[19:59:28] <abastro[m]> <del>Cabal as package manager when</del>
[19:59:47] <maerwald> freeze can be annoying if you experimenting with different flag configurations
[19:59:48] *** Joins: joo-_ (~joo-_@80-62-116-70-mobile.dk.customer.tdc.net)
[19:59:48] *** Quits: joo-_ (~joo-_@80-62-116-70-mobile.dk.customer.tdc.net) (Changing host)
[19:59:48] *** Joins: joo-_ (~joo-_@fsf/member/joo--)
[19:59:58] <maerwald> that's why for dev-ing index-state is more appropriate
[20:00:25] <tomsmeding> maybe even doing `cabal freeze` then removing everything but 'xmonad' itself from the freeze file would do the trick
[20:00:54] <tomsmeding> or more generally, only pin the unimportant but large stuff
[20:01:18] *** Quits: acidjnk (~acidjnk@p200300d0c7049f074d48d16d808cf7eb.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[20:02:02] <abastro[m]> I mean, I don't see xmonad update that often
[20:02:13] <abastro[m]> Wait
[20:02:27] <abastro[m]> I guess it is xmonad-contrib being updated
[20:02:30] <abastro[m]> So I can fix that
[20:02:44] <abastro[m]> (Btw other packages are also being duplicated it seems)
[20:03:41] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[20:03:55] <tomsmeding> abastro[m]: yeah replace 'xmonad' in my message with whatever package you want to be pinned :p
[20:04:33] <tomsmeding> though if you use freeze, you should remember that you have a freeze file if at somepoint you're wondering why you're not getting updates from upstream :p
[20:04:43] <abastro[m]> Makes sense.
[20:05:00] <abastro[m]> "Not getting updates" heh
[20:05:55] <abastro[m]> Btw I find it a bit annoying that whenever something is built, its dependencies, even the same version ones, are built in new builds
[20:06:03] *** Quits: cdman (~dcm@user/dmc/x-4369397) (Quit: Leaving)
[20:06:03] <abastro[m]> Which duplicates stuff further
[20:06:11] <abastro[m]> Why does this happen?
[20:06:42] *** Joins: bahamas (~lucian@84.232.140.158)
[20:06:53] <geekosaur> it shouldn't do that unless something else is changing (compile options, cabal flags, etc.)
[20:07:00] <tomsmeding> you mean that if you have a dep on package A which itself depends on package B, and A updates to a new version but B does not, but nevertheless B is rebuilt?
[20:07:08] <tomsmeding> precisely what geekosaur says
[20:07:29] <tomsmeding> look in the file created by `cabal freeze`, it lists cabal flags for each package
[20:07:38] <tomsmeding> if those change, a package needs to be rebuilt
[20:07:50] *** Joins: zebrag (~chris@user/zebrag)
[20:07:56] <tomsmeding> also, if A depends on B which depends on C, and A and C change, then B needs to be rebuilt as well
[20:07:59] <abastro[m]> Cabal flags change, hmm
[20:08:13] * tomsmeding is not sure if you can have two different versions of the same package in a build plan
[20:08:13] <abastro[m]> Oh
[20:08:29] <abastro[m]> I guess it happens since both A and C changes
[20:08:35] <abastro[m]> And I get the illusion
[20:08:57] <tomsmeding> probably C is a tiny package that you're skipping in your analysis of the issue because it's small and "hence" irrelevant :p
[20:09:05] <abastro[m]> Well ye, never seen two different versions of same package in single build plan
[20:09:27] <abastro[m]> I mean there are too many packages
[20:09:30] <geekosaur> pretty sure cabal does not handle that although there are cases where it's technically safe
[20:09:34] <abastro[m]> So I cannot check every package
[20:10:00] <geekosaur> ftr I have 4.1G in my local store and I update xmonad and xmonad-contrib from git once a week
[20:10:23] <geekosaur> and this is unusually large because my config depends on dbus which sucks in lens and acouple of other big-footprint packages
[20:11:59] <abastro[m]> 4G? Sounds quite small
[20:12:42] <geekosaur> for xmonad being the primary pressure on it, it's big :)
[20:13:00] <abastro[m]> Aha
[20:13:16] <abastro[m]> Wait, `dbus` depends on lens?
[20:13:26] * tomsmeding just removed 14G of cabal store because I don't work with agda anymore
[20:13:31] <geekosaur> one of its dependencies does, for some reason
[20:13:40] <abastro[m]> Btw my dependency footprint is greatly exploded by taffybar
[20:13:52] <geekosaur> I haven't tried to work out the full dep tree
[20:17:53] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[20:18:29] <danso> when would somebody want to save the .hi and .o files for their Main module? 
[20:18:47] <danso> it seems to me that those have to be rebuilt any time the source for Main changes, or anything it depends on
[20:19:11] *** Joins: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net)
[20:19:38] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Remote host closed the connection)
[20:19:40] <tomsmeding> danso: the .o is the compiled form of the module, necessary to produce the final executable; the .hi is a by-product of compilation that I guess would be redundant for Main
[20:19:44] <danso> i guess the point of storing .hi and .o files in general is to avoid recompiling things that don't need it
[20:20:09] <geekosaur> in this case I think it's more thatnotkeeping them would require special-casing handling of maoin modules
[20:20:12] <geekosaur> *main
[20:20:16] <abastro[m]> Well doesn't other modules require those caching schemes?
[20:20:25] <tomsmeding> but in general .hi files of other modules are used by ghc and are necessary, they store haskell type info, inlining info, etc. of the modules
[20:20:35] <abastro[m]> Yep, I also think it is just avoiding special-casing
[20:20:44] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[20:20:50] <tomsmeding> also not storing them wouldn't really give much of a speedup for that one module
[20:21:16] <geekosaur> it'd be a very slight slowdown as it wouldneed to remove them after; it needs them to link it all together
[20:21:20] <abastro[m]> Oh, that gave me an idea
[20:21:31] <abastro[m]> .hsig for file with type declarations
[20:21:49] <tomsmeding> isn't that .hs-boot
[20:21:58] <danso> okay, thanks all for the input. the actual reason i don't want to store them is because i have two Main modules for two different binaries, and sometimes they get confused when Main.hi and Main.o exist
[20:22:21] <tomsmeding> danso: how are you compiling your binaries?
[20:22:25] <geekosaur> I think .hsig is taken by backpack
[20:22:32] <geekosaur> but fat .hi files are coming
[20:22:48] <danso> take a look at the demo i created here: https://gitlab.com/danso/ghc-demo/-/tree/main 
[20:23:24] <geekosaur> storing more information for use by haddock, HIE/HLS, etc.
[20:24:14] <tomsmeding> danso: usually the answer would be different -hidir and -odir for the two binaries, but now you're sharing a module so that doesn't work
[20:24:31] <abastro[m]> I mean .hsig to be supplied by user
[20:24:47] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[20:24:52] <abastro[m]> Supply your types in separate header!
[20:25:09] <abastro[m]> And its implementation in the correlated source file
[20:25:18] <tomsmeding> danso: hack: compile Common.hs with -hidir and -odir set to cache/common/, then symlink/copy those files in the makefile to cache/hello/ and cache/greetings/, then compile the two executables
[20:25:22] <geekosaur> that sounds like a maintenance nightmare
[20:25:30] <tomsmeding> abastro[m]: are you trying to revert back to C
[20:25:38] <geekosaur> (abastro[m])
[20:25:38] <tomsmeding> there is a reason that most languages did _not_ copy that style
[20:27:13] *** Quits: boxscape_ (~boxscape_@p4ff0be5f.dip0.t-ipconnect.de) (Ping timeout: 248 seconds)
[20:27:40] <danso> tomsmeding, the hack i've been using in my actual projects is to run `rm cache/Main.hi cache/Main.o` in the makefile after GHC finishes  
[20:28:41] *** Quits: caubert_ (~caubert@136.244.111.235) (Quit: WeeChat 3.4)
[20:28:48] <abastro[m]> tomsmeding: Exactly!
[20:29:01] *** Joins: caubert (~caubert@136.244.111.235)
[20:29:20] <abastro[m]> C++ copied C at least :^)
[20:30:06] <danso> is it a bug that Main.o and Main.hi are created even tho the source files have the -no-keep-*-files specified in pragmas? 
[20:31:58] <tomsmeding> hm, users guide doesn't say much about where the options are allowed https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/separate_compilation.html#keeping-intermediate-files
[20:32:45] <danso> this page says they are dynamic that have been reported in GHC but not yet fixed: see the 
[20:32:49] <danso> that have been reported in GHC but not yet fixed: see the 
[20:32:54] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Read error: Connection reset by peer)
[20:33:00] <danso> oops, sorry. wrong paste twice >_> 
[20:33:04] <danso> https://ghc.gitlab.haskell.org/ghc/doc/users_guide/flags.html#keeping-intermediate-files
[20:33:21] <danso> "dynamic" flags are ones that can be invoked by pragmas in source files
[20:34:17] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[20:35:08] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 260 seconds)
[20:35:09] <tomsmeding> danso: given that "keep-o-files" and "keep-hi-files" give 0 hits in the ghc issue tracker, it might be worth opening an issue about this (https://gitlab.haskell.org/ghc/ghc/-/issues); even if it's intended, perhaps the documentation should be clarified
[20:40:01] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[20:46:00] *** Quits: fax (~fax@94.6.139.91) (Remote host closed the connection)
[20:46:17] *** Joins: fax (~fax@2a02:c7f:f097:7f00:8c5c:bbbe:c07f:5d1b)
[20:46:19] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[20:46:25] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[20:47:19] *** Quits: Psybur (~Psybur@2600:1003:b138:112:20c5:efb4:887:de9a) (Read error: Connection reset by peer)
[20:47:38] *** Joins: Psybur (~Psybur@2600:1003:b138:112:20c5:efb4:887:de9a)
[20:48:02] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[20:50:17] *** Quits: jgeerds (~jgeerds@d5364b87.access.ecotel.net) (Ping timeout: 260 seconds)
[20:51:06] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[20:52:39] *** Quits: ubert (~Thunderbi@p548c8d44.dip0.t-ipconnect.de) (Quit: ubert)
[20:52:39] *** ubert1 is now known as ubert
[20:54:19] *** Quits: fax (~fax@2a02:c7f:f097:7f00:8c5c:bbbe:c07f:5d1b) (Remote host closed the connection)
[20:54:36] *** Joins: fax (~fax@2a02:c7f:f097:7f00:8c5c:bbbe:c07f:5d1b)
[20:55:54] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[20:58:43] *** Quits: mbuf (~Shakthi@122.173.67.210) (Quit: Leaving)
[21:01:19] *** Joins: zer0bitz (~zer0bitz@2001:2003:f750:a200:5019:823:a50e:5ee6)
[21:03:39] *** Joins: ph88 (~ph88@ip5f5af71f.dynamic.kabel-deutschland.de)
[21:04:58] *** Quits: wolfshappen (~waff@irc.furworks.de) (Read error: Connection reset by peer)
[21:07:13] *** Quits: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com) (Ping timeout: 260 seconds)
[21:10:32] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 252 seconds)
[21:11:06] <danso> thanks tomsmeding, it is done https://gitlab.haskell.org/ghc/ghc/-/issues/21349 
[21:12:04] *** Quits: fax (~fax@2a02:c7f:f097:7f00:8c5c:bbbe:c07f:5d1b) (Ping timeout: 250 seconds)
[21:12:50] <geekosaur> I expect that to be more of a labeling issue (they should not be considered dynamic): they need to stick around for the linking step, after which it's too late for a source pragma to fire
[21:13:42] <danso> i'm fine with that. a bug in the docs is still a bug ;^) 
[21:16:54] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 268 seconds)
[21:21:56] *** Joins: xkuru (~xkuru@user/xkuru)
[21:26:09] *** Quits: redb (~nmh@136.49.49.211) (Ping timeout: 268 seconds)
[21:29:15] *** Joins: napping (~brandon@65.128.49.110)
[21:30:40] *** Joins: bahamas (~lucian@84.232.140.158)
[21:31:55] *** Joins: liz (~liz@host109-151-125-217.range109-151.btcentralplus.com)
[21:32:17] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Ping timeout: 248 seconds)
[21:36:22] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 260 seconds)
[21:36:36] *** Quits: razetime (~quassel@117.254.35.210) (Ping timeout: 240 seconds)
[21:36:42] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[21:36:49] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[21:38:12] *** Joins: econo (uid147250@user/econo)
[21:38:22] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[21:45:10] *** Joins: redb (~nmh@136.49.49.211)
[21:52:20] *** Quits: cheater (~Username@user/cheater) (Read error: Connection reset by peer)
[21:53:02] *** Joins: cheater (~Username@user/cheater)
[21:57:00] *** Quits: dextaa_54 (~dextaa@user/dextaa) (Read error: Connection reset by peer)
[21:59:02] *** Joins: dextaa_54 (~dextaa@user/dextaa)
[21:59:55] *** Quits: hololeap_ (~hololeap@user/hololeap) (Ping timeout: 240 seconds)
[22:00:23] *** Joins: hololeap_ (~hololeap@user/hololeap)
[22:07:28] *** Quits: redb (~nmh@136.49.49.211) (Ping timeout: 268 seconds)
[22:11:51] *** Quits: zeenk (~zeenk@2a02:2f04:a313:d600:8d26:ec9f:3ff6:fc94) (Quit: Konversation terminated!)
[22:14:31] *** Joins: alp_ (~alp@user/alp)
[22:18:13] *** Joins: bahamas (~lucian@84.232.140.158)
[22:21:03] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi)
[22:22:53] *** Quits: chomwitt (~chomwitt@athedsl-31881.home.otenet.gr) (Ping timeout: 268 seconds)
[22:24:33] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[22:24:48] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[22:28:15] *** Joins: chomwitt (~chomwitt@athedsl-20549.home.otenet.gr)
[22:28:59] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[22:29:38] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[22:30:17] *** Quits: deadmarshal_ (~deadmarsh@95.38.113.9) (Ping timeout: 252 seconds)
[22:31:44] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-e4f8-bd3f-9136-d580.res6.spectrum.com) (Ping timeout: 260 seconds)
[22:34:59] *** Joins: redb (~nmh@136.49.49.211)
[22:35:46] *** Joins: Xplorator (~Xplorator@176.166.206.65)
[22:35:50] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[22:36:56] *** Joins: Macbethwin (~chargen@8.31.163.87)
[22:37:50] *** Macbethwin is now known as Chargen
[22:40:44] *** Quits: Psybur (~Psybur@2600:1003:b138:112:20c5:efb4:887:de9a) (Ping timeout: 252 seconds)
[22:40:59] *** Joins: Psybur (~Psybur@75.145.205.201)
[22:42:09] *** Quits: redb (~nmh@136.49.49.211) (Ping timeout: 248 seconds)
[22:43:55] *** Joins: redb (~nmh@136.49.49.211)
[22:44:21] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-f1ec-d7f3-37e1-032c.res6.spectrum.com)
[22:45:13] *** Joins: vicfred (~vicfred@user/vicfred)
[22:45:31] *** Quits: cosimone (~user@93-47-228-79.ip115.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[22:46:16] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[22:47:49] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[22:47:56] *** Joins: cosimone (~user@93-47-228-79.ip115.fastwebnet.it)
[22:48:26] *** Quits: redb (~nmh@136.49.49.211) (Ping timeout: 252 seconds)
[22:50:11] *** Joins: redb (~nmh@136.49.49.211)
[22:50:34] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[22:54:26] *** Quits: redb (~nmh@136.49.49.211) (Ping timeout: 246 seconds)
[22:54:32] *** Joins: jakalx (~jakalx@base.jakalx.net)
[22:57:20] *** Joins: mvr_ (uid36976@id-36976.tinside.irccloud.com)
[22:58:24] <odnes> tdammers
[22:58:42] *** Joins: wolfshappen (~waff@irc.furworks.de)
[22:59:22] *** Quits: michalz (~michalz@185.246.204.104) (Remote host closed the connection)
[22:59:25] <odnes> tdammers: sry, mistakenly pinged. amazing read, this whole discussion though
[23:01:21] <SrPx> give me ideas of non-recursive, non-polymorphic types to teach FP newcomers, that are related to some intuitive real-world concept, and that have some cool functions to implement. example: Rock | Paper | Scizor, with functions like "equals : RPS -> RPS -> Bool" and "beats : RPS -> RPS -> Bool". what else?
[23:04:07] *** Joins: tfeb (~tfb@88.98.95.237)
[23:06:25] <geekosaur> notes, with things like major and minor thirds and fifths leading to chords?
[23:06:57] <SrPx> that's great, thanks geekosaur  
[23:07:01] <geekosaur> (optionally including patsyns to support C# and Db being the same note)
[23:07:06] <SrPx> nice
[23:12:21] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[23:13:37] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 248 seconds)
[23:14:38] *** Quits: odnes (~odnes@5-203-209-2.pat.nym.cosmote.net) (Quit: Leaving)
[23:15:07] *** Quits: Chargen (~chargen@8.31.163.87) (Remote host closed the connection)
[23:15:11] <tomsmeding> (scissor, btw, in english)
[23:15:11] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[23:15:13] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[23:15:27] <tomsmeding> (not that the spelling necessarily makes much sense)
[23:15:45] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[23:15:51] *** Joins: Chargen (~chargen@8.31.163.87)
[23:16:04] *** Quits: chomwitt (~chomwitt@athedsl-20549.home.otenet.gr) (Ping timeout: 260 seconds)
[23:16:53] *** Quits: Chargen (~chargen@8.31.163.87) (Remote host closed the connection)
[23:17:08] <geekosaur> it's usually plural even in that context: one scissor blade does not reliably cut paper…
[23:17:18] *** Joins: Chargen (~chargen@8.31.163.87)
[23:17:22] *** Joins: chomwitt (~chomwitt@athedsl-369869.home.otenet.gr)
[23:17:36] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:17:36] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:17:36] *** Joins: wroathe (~wroathe@user/wroathe)
[23:17:48] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 272 seconds)
[23:18:30] *** Quits: Chargen (~chargen@8.31.163.87) (Remote host closed the connection)
[23:19:05] *** Joins: Chargen (~chargen@8.31.163.87)
[23:20:17] *** Joins: simendsjo (~user@84.211.91.241)
