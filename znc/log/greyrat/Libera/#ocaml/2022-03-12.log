[00:12:57] *** Quits: tomku (~tomku@user/tomku) (Ping timeout: 240 seconds)
[00:18:05] *** Joins: tomku (~tomku@user/tomku)
[00:33:34] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:12:55] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[01:18:53] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:35:48] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[01:36:55] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[01:38:01] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[01:56:35] *** Quits: hackinghorn (hackinghor@user/hackinghorn) (Ping timeout: 256 seconds)
[02:03:34] *** Joins: TheRuralJuror (~quassel@178.115.237.87.static.drei.at)
[02:04:40] *** Joins: ski_ (~ski@remote12.chalmers.se)
[02:05:15] *** Joins: hannes_ (~hannes@193.30.40.133)
[02:05:57] *** Joins: t-j-r (~tjr@233.ip-144-217-92.net)
[02:07:12] *** Joins: infinity0_ (~infinity0@occupy.ecodis.net)
[02:07:12] *** Quits: infinity0 (~infinity0@occupy.ecodis.net) (Killed (lead.libera.chat (Nickname regained by services)))
[02:07:12] *** infinity0_ is now known as infinity0
[02:09:44] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi) (*.net *.split)
[02:09:44] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (*.net *.split)
[02:09:44] *** Quits: zebrag (~chris@user/zebrag) (*.net *.split)
[02:09:44] *** Quits: tizoc (~user@li296-221.members.linode.com) (*.net *.split)
[02:09:45] *** Quits: kakadu (~kakadu@195.19.236.234) (*.net *.split)
[02:09:45] *** Quits: ansiwen (~sanders@vm1.a6n.de) (*.net *.split)
[02:09:45] *** Quits: Absalom (~Absalom@envs.net) (*.net *.split)
[02:09:45] *** Quits: gjvc (~gjvc@user/gjvc) (*.net *.split)
[02:09:45] *** Quits: cross (~cross@spitfire.i.gajendra.net) (*.net *.split)
[02:09:45] *** Quits: ski (~ski@remote12.chalmers.se) (*.net *.split)
[02:09:45] *** Quits: _tjr_ (~tjr@233.ip-144-217-92.net) (*.net *.split)
[02:09:45] *** Quits: hannes (~hannes@193.30.40.133) (*.net *.split)
[02:10:53] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[02:11:00] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[02:12:59] *** Joins: wingsorc (~wingsorc@user/wingsorc)
[02:15:26] *** Joins: tizoc (~user@li296-221.members.linode.com)
[02:15:26] *** Joins: kakadu (~kakadu@195.19.236.234)
[02:15:26] *** Joins: ansiwen (~sanders@vm1.a6n.de)
[02:15:26] *** Joins: Absalom (~Absalom@envs.net)
[02:15:26] *** Joins: gjvc (~gjvc@user/gjvc)
[02:15:26] *** Joins: cross (~cross@spitfire.i.gajendra.net)
[02:16:36] *** Quits: tomku (~tomku@user/tomku) (Ping timeout: 252 seconds)
[02:17:14] *** ski_ is now known as ski
[02:17:59] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi)
[02:21:23] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[02:22:27] *** Joins: tomku (~tomku@user/tomku)
[02:22:47] *** Joins: hackingh- (hackinghor@2607:5300:203:3f52::18)
[02:29:40] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Read error: Connection reset by peer)
[02:29:59] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[02:36:20] *** Joins: zebrag (~chris@user/zebrag)
[03:32:25] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi) (Quit: Leaving.)
[03:36:33] *** Quits: dwt_ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net) (Ping timeout: 256 seconds)
[03:43:21] *** Quits: servytor (uid525486@id-525486.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[03:55:55] *** Quits: mmalter (~mmalter@88.126.10.237) (Quit: Lost terminal)
[04:16:33] *** Joins: rgrinberg (~textual@177.244.18.30)
[04:23:56] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 272 seconds)
[04:25:57] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[04:29:18] <bgs> is there some convention on how to get around having labels with the same name defined in multiple records?
[04:30:01] *** Quits: rgrinberg (~textual@177.244.18.30) (Read error: Connection reset by peer)
[04:30:36] *** Joins: rgrinberg (~textual@177.244.18.30)
[04:33:24] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[04:34:59] <d_bot_> <RegularSpatula> bgs: See FAQ https://caml.inria.fr/pub/old_caml_site/FAQ/FAQ_EXPERT-eng.html#labels_surcharge
[04:36:03] <d_bot_> <RegularSpatula> or this: https://stackoverflow.com/a/8929734
[04:38:08] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[04:39:39] <bgs> RegularSpatula: thanks
[04:39:45] <bgs> the latter link is not applicable to my case because my types are mutually recursive
[04:40:01] <bgs> but I'll work something out
[04:40:47] <d_bot_> <RegularSpatula> ah yeah i guess you could make mutually recursive modules...but probably not the best option
[04:41:53] <bgs> that probably exceeds my current capabilities of manipulating modules
[04:42:13] <bgs> so I'll just stick to renaming things systematically
[04:45:54] <d_bot_> <RegularSpatula> that's probably best...ive seen a few times advice to avoid recursive modules when possible
[04:46:51] <d_bot_> <RegularSpatula> if youre curious, you can check out this (https://ocaml.org/manual/recursivemodules.html) and see how you can get runtime errors with them
[04:50:38] <bgs> thanks, I'll take a look
[04:50:46] <bgs> always nice to learn somethink new
[05:10:58] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 260 seconds)
[05:33:37] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[05:34:24] *** Quits: TheRuralJuror (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[05:41:49] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[06:04:30] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[06:09:02] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 240 seconds)
[06:45:30] *** Quits: rgrinberg (~textual@177.244.18.30) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:55:27] *** Joins: gravicappa (~gravicapp@145.255.0.191)
[07:16:48] *** Joins: mbuf (~Shakthi@122.174.232.218)
[07:32:32] *** Quits: unyu (~pyon@user/pyon) (Quit: brb)
[07:41:49] *** Joins: bobo (~bobo@37.165.10.12)
[07:42:13] *** Quits: spip (~bobo@37.164.82.97) (Ping timeout: 240 seconds)
[08:13:28] *** Joins: rgrinberg (~textual@177.244.18.30)
[08:15:44] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca) (Quit: ZNC 1.8.2 - https://znc.in)
[08:18:52] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca)
[08:40:57] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[08:49:20] *** Quits: ado (sid462155@id-462155.uxbridge.irccloud.com) (Ping timeout: 250 seconds)
[08:49:46] *** Quits: JSharp (sid4580@2a03:5180:f:2::11e4) (Ping timeout: 250 seconds)
[08:50:05] *** Quits: jyc (sid40911@id-40911.ilkley.irccloud.com) (Read error: Connection reset by peer)
[08:50:15] *** Joins: jyc (sid40911@id-40911.ilkley.irccloud.com)
[08:50:16] *** Joins: ado (sid462155@id-462155.uxbridge.irccloud.com)
[08:50:57] *** Joins: JSharp (sid4580@id-4580.lymington.irccloud.com)
[08:51:30] *** Quits: lobo (~lobo@user/lobo) (Ping timeout: 250 seconds)
[08:51:50] *** Joins: lobo (~lobo@user/lobo)
[09:15:37] *** Joins: unyu (~pyon@user/pyon)
[09:16:15] *** Quits: rgrinberg (~textual@177.244.18.30) (Ping timeout: 252 seconds)
[09:21:20] *** Joins: rgrinberg (~textual@177.244.18.30)
[09:32:31] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[11:50:55] *** Quits: rgrinberg (~textual@177.244.18.30) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:56:53] *** Joins: xd1le (~xd1le@user/xd1le)
[12:49:11] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[13:01:40] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi)
[13:21:50] *** Joins: bartholin (~bartholin@109.53.6.81)
[14:05:10] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Remote host closed the connection)
[14:05:34] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[14:07:17] *** Joins: namkeleser (~namkelese@101.175.104.107)
[14:07:25] *** Joins: notnotdan (~notd@v22019068545391262.megasrv.de)
[15:17:03] *** Quits: bartholin (~bartholin@109.53.6.81) (Ping timeout: 252 seconds)
[15:30:41] *** Joins: bartholin (~bartholin@109.53.0.86)
[15:56:28] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[16:08:06] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[16:20:18] *** Quits: mbuf (~Shakthi@122.174.232.218) (Ping timeout: 252 seconds)
[16:22:13] *** Joins: mbuf (~Shakthi@110.225.244.90)
[16:27:27] *** Quits: infinity0 (~infinity0@occupy.ecodis.net) (Ping timeout: 252 seconds)
[16:30:38] *** Joins: infinity0 (~infinity0@occupy.ecodis.net)
[16:32:39] <d_bot_> <octachron> @RegularSpatula , there is no issues at all with having records sharing the same labels since type-directed disambiguation (introduced in OCaml 4.01 in 2013). Generally, if you end up linking the old caml site, your information is most probably outdated.
[16:45:17] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:47:58] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Remote host closed the connection)
[16:48:18] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[17:08:35] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[17:10:28] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:16:12] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Ping timeout: 240 seconds)
[17:16:48] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[17:17:14] *** Quits: bartholin (~bartholin@109.53.0.86) (Ping timeout: 272 seconds)
[17:20:05] *** Quits: bacam (~bacam@dhondt.z273.org.uk) (Quit: reboot)
[17:21:00] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Ping timeout: 240 seconds)
[17:21:40] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[17:23:31] *** Joins: bacam (~bacam@dhondt.z273.org.uk)
[17:25:53] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:30:49] *** Joins: bartholin (~bartholin@109.53.4.201)
[17:32:02] *** Joins: dextaa_ (~dextaa@user/dextaa)
[17:46:33] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[17:46:57] *** Quits: bartholin (~bartholin@109.53.4.201) (Ping timeout: 240 seconds)
[17:59:02] *** Joins: bartholin (~bartholin@109.53.7.114)
[18:22:41] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[18:53:11] *** Quits: namkeleser (~namkelese@101.175.104.107) (Quit: Client closed)
[19:11:10] *** Quits: mbuf (~Shakthi@110.225.244.90) (Quit: Leaving)
[19:12:55] *** Joins: zebrag (~chris@user/zebrag)
[19:12:55] <d_bot_> <RegularSpatula> Ah sorry about that, thanks for the correction
[19:14:59] <companion_cube> however there's a warning in case of ambiguity :(
[19:27:25] *** Quits: bartholin (~bartholin@109.53.7.114) (Ping timeout: 256 seconds)
[19:28:23] *** Joins: jlrnick (~josephler@2a01cb040a159400d5f1734ba665bbe6.ipv6.abo.wanadoo.fr)
[19:41:30] *** Quits: bobo (~bobo@37.165.10.12) (Ping timeout: 250 seconds)
[19:41:41] *** Joins: bobo (~bobo@37.166.17.178)
[19:42:09] *** Quits: jlrnick (~josephler@2a01cb040a159400d5f1734ba665bbe6.ipv6.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[19:42:14] *** Quits: kakadu (~kakadu@195.19.236.234) (Remote host closed the connection)
[19:47:32] *** Quits: xd1le (~xd1le@user/xd1le) (Quit: xd1le)
[19:54:20] *** Joins: bartholin (~bartholin@109.53.5.130)
[20:36:46] *** Joins: mrvn (~mrvn@ip-046-005-255-082.um12.pools.vodafone-ip.de)
[20:36:53] <mrvn> moin, long time no read
[20:38:03] <mrvn> You (hopefully) all know extensible variants: "type t = ..   type t += Foo"  Is there something like that for records?
[20:39:03] <d_bot_> <NULL> objects ?
[20:39:41] <mrvn> extensible records where different .ml files can add rows.
[20:40:45] <d_bot_> <glennsl> like one record _inheriting_ the rows of another record?
[20:40:52] <d_bot_> <glennsl> yea sounds like objects to me
[20:41:30] <mrvn> inheriting needs a clear chain of a inherits b.
[20:42:03] <mrvn> extensible variants are open to anyone in any order to just add something.
[20:42:27] <d_bot_> <NULL> You're adding requirements then, so an object of type t then may not be of type t now ? That doesn't seem like a good idea
[20:44:34] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[20:44:55] <companion_cube> mrvn: there isn't
[20:48:44] <mrvn> Well, maybe we have to make one then :) Just as a tought experiment. Assuming there is such a record defined by "type t += { my_row : my_type; }" then the compiler would know the size and layout at link time. It has a clear type so that is good too. Access to my_row withint a module looks trivial too. copy/modify with { t with my_row = bla; } seems trivial too.
[20:49:05] <mrvn> Any thoughts how one could construct the first instance of such a record?
[20:49:15] *** Joins: kaph_ (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[20:49:26] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[20:49:49] *** Joins: zebrag (~chris@user/zebrag)
[20:51:07] <mrvn> My feeling is that each module would have to provide a part of the constructor covering it's own rows.
[20:53:53] <sim642> What good is knowing the layout of such extensible record at link time? Each of the modules would have to be compiled beforehand and they need to know the offsets of the fields they access already then, before any linking
[20:54:31] <mrvn> sim642: somehow extensible variants solve that problem.
[20:55:27] <mrvn> sim642: the compiler would leave little boxes for the offset all over the place for the linker to fill in later.
[20:57:49] <d_bot_> <NULL> Extensible variants just have to know what tag they are, if you use a hash and don't stumble on a collision you are completely modular
[20:58:05] <sim642> I don't think extensible variants need to solve that problem exactly because they are variants: the constructors used by a module are known at compilation time already. The offsets of constructors defined by other modules don't matter
[20:59:26] <sim642> And yeah, so only the tags have to be handled, not the entire layout across everything
[21:00:35] <d_bot_> <NULL> Also, how do you construct a value of type t ?
[21:03:23] <mrvn> Null: Yes, that is the problem. If you have one you can modify it. So each module would have to provide defaults for the rows it defines to make a default t.
[21:03:28] <mrvn> or something.
[21:04:41] <d_bot_> <NULL> That would be weird by OCaml standards
[21:04:53] <sim642> The inability to construct these extensible records makes them trivial: they're just empty variants :P
[21:07:06] <companion_cube> mrvn: the closest you can do is a universal hashmap
[21:07:28] *** Quits: tizoc (~user@li296-221.members.linode.com) (*.net *.split)
[21:07:28] *** Quits: ansiwen (~sanders@vm1.a6n.de) (*.net *.split)
[21:07:28] *** Quits: Absalom (~Absalom@envs.net) (*.net *.split)
[21:07:28] *** Quits: gjvc (~gjvc@user/gjvc) (*.net *.split)
[21:07:28] *** Quits: cross (~cross@spitfire.i.gajendra.net) (*.net *.split)
[21:12:55] *** Joins: tizoc (~user@li296-221.members.linode.com)
[21:12:55] *** Joins: ansiwen (~sanders@vm1.a6n.de)
[21:12:55] *** Joins: Absalom (~Absalom@envs.net)
[21:12:55] *** Joins: gjvc (~gjvc@user/gjvc)
[21:12:55] *** Joins: cross (~cross@spitfire.i.gajendra.net)
[21:23:54] *** Quits: bartholin (~bartholin@109.53.5.130) (Ping timeout: 268 seconds)
[21:51:57] <mrvn> ito of a random ineter will just return 0. and 0 == 0
[21:51:59] <mrvn> ups
[22:14:19] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[22:14:25] *** Joins: rgrinberg (~textual@177.244.18.30)
[22:14:47] *** Joins: bartholin (~bartholin@109.53.6.136)
[22:14:51] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[22:41:00] *** Quits: bartholin (~bartholin@109.53.6.136) (Ping timeout: 240 seconds)
[22:44:56] *** Quits: rgrinberg (~textual@177.244.18.30) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:55:22] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[22:56:26] *** Joins: hackhorn (~hackingho@user/hackinghorn)
[22:56:46] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Read error: Connection reset by peer)
[23:10:49] *** Joins: bartholin (~bartholin@158.110.71.61)
[23:31:18] <d_bot_> <mbacarella> this one random ocaml program i'm running throws an exception that isn't caught and it... doesn't show a backtrace
[23:31:20] <d_bot_> <mbacarella> what's going on
[23:32:43] <sim642> Assuming you have backtraces enabled, maybe it's being thrown with raise_notrace
[23:32:49] <mrvn> compiled without debug enabled?
[23:34:57] <d_bot_> <mbacarella> i'm running with the normal dune dev profile
[23:35:37] <d_bot_> <mbacarella> it's ocaml-swagger
[23:35:46] <d_bot_> <mbacarella> maybe atdgen emits code that turns it off?
[23:39:39] <d_bot_> <mbacarella> oh duh i didn't open! Core in this codegen thing
[23:39:47] <d_bot_> <mbacarella> i guess i've been taking for granted that Core turns backtraces on
[23:39:57] <d_bot_> <mbacarella> ... taking it for granted for a decade now
[23:40:27] <mrvn> Did you set OCAMLRUNPARAM?
[23:40:32] <d_bot_> <mbacarella> no why would i
[23:40:41] <mrvn> because you didn't open Core
[23:40:48] <d_bot_> <mbacarella> ¯\_(ツ)_/¯
[23:41:20] <d_bot_> <mbacarella> i simply thought backtraces were on by default in ocaml this entire time
[23:41:57] <mrvn> push it
[23:42:01] <mrvn> ups
[23:46:20] <d_bot_> <mbacarella> ? like, do 10 pushups for being so naive?
[23:47:37] <sim642> One pushup for each frame in the backtrace you now got
[23:52:57] *** Quits: gravicappa (~gravicapp@145.255.0.191) (Ping timeout: 256 seconds)
