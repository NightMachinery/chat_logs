[00:01:40] *** Joins: paule32 (~paule32@user/paule32)
[00:04:09] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[00:07:37] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[00:15:57] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 265 seconds)
[00:16:50] *** Joins: aartaka (~aartaka@5.1.53.225)
[00:17:24] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 265 seconds)
[00:20:37] *** Joins: khrbt (~znc@user/khrbt)
[00:27:11] *** Quits: aartaka (~aartaka@5.1.53.225) (Ping timeout: 245 seconds)
[00:29:08] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[00:33:29] *** Joins: heisig (~heisig@p508b531b.dip0.t-ipconnect.de)
[00:36:57] *** Quits: heisig (~heisig@p508b531b.dip0.t-ipconnect.de) (Client Quit)
[00:38:37] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:41:22] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[00:43:59] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[00:50:33] *** Joins: aartaka (~aartaka@176.59.214.206)
[00:53:53] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[00:55:51] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:57:02] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 265 seconds)
[00:57:11] *** Lord_of_Life_ is now known as Lord_of_Life
[01:02:57] <Josh_2> Is it possible to garbage collect keywords?
[01:03:35] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[01:07:31] <semz> The only way I can think of is to unintern it and make it inaccessible (latter probably not a big concern for keywords), but that probably causes all kinds of problems unless you know a lot about how the keyword came to be and will be used.
[01:08:44] <semz> Or hm, the inaccessibility part might actually be key
[01:09:12] <Josh_2> That was my thinking
[01:13:53] *** Quits: aartaka (~aartaka@176.59.214.206) (Read error: Connection reset by peer)
[01:16:20] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:16:30] <Josh_2> Seems all the symbols I would be interested in garbage collecting start with a $ sign
[01:17:43] <semz> Is it possible to just keep them uninterned and work with that?
[01:18:23] <Josh_2> Well its jojo thats interning them
[01:18:52] <Josh_2> Okay word of advice, dont unintern all symbols starting with & :joy:
[01:19:16] <semz> RIP
[01:26:49] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[01:28:05] <Josh_2> Is 14k keywords gonna take up much space?
[01:30:19] <Josh_2> https://imgur.com/tnHl7JV.png wheres my garbage collector :joy:
[01:32:36] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[01:34:55] <Josh_2> before: https://imgur.com/57Zvnyb.png after: https://imgur.com/mAMtdcF.png
[01:35:01] <Josh_2> single jojo:parse operation
[01:37:51] <Josh_2> 260mb of simple-character-string :joy:
[01:46:34] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[01:47:04] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[01:54:32] <Josh_2> Just gonna keep using jojo, seems that if I *really* want to clean up the keywords package I can just unintern symbols starting with & that are exactly 44 long
[02:06:08] *** Quits: frgo (~frgo@p200300deef0cee00c43b6570bf802e49.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:06:36] *** Joins: frgo (~frgo@p200300deef0cee001121140f94627547.dip0.t-ipconnect.de)
[02:11:06] *** Quits: Skyfire (~pyon@user/pyon) (Quit: WeeChat 3.3)
[02:15:20] <White_Flame> 44 chars * 8 bytes per char worst case * 14000 keywords = "only" 4.7MB of raw string text
[02:16:30] <hayley> madnificent: Well, some of the decentralise2 benchmarks are CPU and GC heavy (particuarly network simulations).
[02:17:13] *** Joins: lad (~lad@user/lad)
[02:18:57] <Josh_2> Thats what I thought
[02:19:00] <Josh_2> White_Flame:
[02:19:34] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:19:56] <hayley> What's funny is that hash table benchmarks tend to try really hard to _not_ allocate. But my code is evil and hammers on some mailboxes and even deletes from hash tables (gasp!), which tends to give the GC a bad time.
[02:20:53] <hayley> I believe safe-queue is lockless on SBCL, but otherwise it falls back to lparallel which might or might not lock.
[02:22:07] <hayley> And I don't recommend Threadmill because it only seems to work well on UMA machines with < 40 threads or so. Else the SIMD lookup becomes a problem.
[02:23:00] <hayley> In testing, it also very rarely drops messages (1 in 10 million-ish) so I've apparently done something wrong.
[02:26:42] <hayley> Josh_2: cons harder, git gud skrub
[02:26:58] *** Joins: igemnace (~ian@user/igemnace)
[02:30:21] <hayley> (Oh, and Threadmill works on newer versions of SBCL, I just had problems w.r.t fixing a bug in how AVX instructions are assembled. But I found SSE2 to be no slower, and heisig fixed that recently, so it should be unnecessary.)
[02:30:37] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 252 seconds)
[02:47:00] *** Joins: Skyfire (~pyon@user/pyon)
[02:53:11] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 264 seconds)
[02:54:54] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:81a9:fc65:4b6d:fdd2)
[03:01:30] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[03:01:54] *** Joins: akoana_ (~ah@user/akoana)
[03:03:05] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:998b:7cbb:625e:1581) (Ping timeout: 264 seconds)
[03:03:46] *** Quits: akoana_ (~ah@user/akoana) (Client Quit)
[03:04:15] *** Joins: akoana (~ah@user/akoana)
[03:24:47] *** Quits: Josh_2 (~user@37.25.47.130) (Quit: ERC (IRC client for Emacs 27.1))
[03:24:55] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[03:39:42] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:81a9:fc65:4b6d:fdd2) (Remote host closed the connection)
[03:40:31] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 245 seconds)
[03:44:22] *** Quits: Catie (~user@2603:3023:523:400:82e8:2cff:fed9:cc84) (Quit: going home)
[03:47:31] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[04:02:31] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 252 seconds)
[04:09:19] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:d5a8:feca:7e29:db08) (Quit: Konversation terminated!)
[04:09:38] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:e4e5:367:afe1:9795)
[04:16:21] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 245 seconds)
[04:35:26] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[04:36:42] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[04:38:21] *** Joins: nature (~nature@45.32.235.173)
[04:41:01] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[04:41:50] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[04:46:57] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[04:48:01] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[04:52:35] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[04:54:13] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[04:54:14] *** Joins: pjb (~pjb@user/pjb)
[04:58:05] *** Joins: zazzerino (~user@2600:1700:6004:8470::23)
[05:00:08] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[05:02:57] *** Joins: zazzerin` (~user@2600:1700:6004:8470:b9cd:b54f:6031:bbcb)
[05:04:00] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 260 seconds)
[05:07:35] *** Quits: zazzerino (~user@2600:1700:6004:8470::23) (Ping timeout: 264 seconds)
[05:08:51] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 265 seconds)
[05:28:24] *** Joins: winning-luser (~winning-l@2601:8c1:181:1340::e50f)
[05:30:03] *** Quits: sander (~sander@user/sander) (Quit: So long! :))
[05:30:50] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[05:31:25] *** Joins: sander (~sander@user/sander)
[05:36:40] *** Quits: IUSR (sid348938@id-348938.hampstead.irccloud.com) (Ping timeout: 252 seconds)
[05:36:46] *** Quits: sgithens (sid10659@id-10659.helmsley.irccloud.com) (Ping timeout: 245 seconds)
[05:36:46] *** Quits: victor (sid208353@user/victor) (Ping timeout: 245 seconds)
[05:36:46] *** Quits: hubvu (sid495858@user/hubvu) (Ping timeout: 245 seconds)
[05:37:35] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:e4e5:367:afe1:9795) (Ping timeout: 264 seconds)
[05:38:08] *** Quits: pl (sid98063@id-98063.helmsley.irccloud.com) (Ping timeout: 246 seconds)
[05:38:13] *** Quits: ullbeking (sid5364@user/ullbeking) (Ping timeout: 252 seconds)
[05:38:13] *** Quits: jsatk (sid304796@id-304796.helmsley.irccloud.com) (Ping timeout: 252 seconds)
[05:38:13] *** Quits: iisi (sid19824@id-19824.hampstead.irccloud.com) (Ping timeout: 252 seconds)
[05:38:19] *** Quits: d_run (sid83858@id-83858.hampstead.irccloud.com) (Ping timeout: 252 seconds)
[05:38:19] *** Quits: travv0 (sid293381@user/travv0) (Ping timeout: 252 seconds)
[05:39:04] *** Joins: iisi (sid19824@hampstead.irccloud.com)
[05:39:06] *** Joins: hubvu (sid495858@user/hubvu)
[05:39:09] *** Joins: IUSR (sid348938@hampstead.irccloud.com)
[05:39:17] *** Joins: jsatk (sid304796@helmsley.irccloud.com)
[05:39:20] *** Joins: pl (sid98063@helmsley.irccloud.com)
[05:39:20] *** ChanServ sets mode: +o pl
[05:39:32] *** Joins: d_run (sid83858@hampstead.irccloud.com)
[05:39:33] *** Joins: ullbeking (sid5364@user/ullbeking)
[05:39:34] *** Joins: taiju (~taiju@m014013236064.v4.enabler.ne.jp)
[05:39:39] *** Joins: travv0 (sid293381@user/travv0)
[05:40:32] *** Joins: victor (sid208353@user/victor)
[05:41:45] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[05:44:04] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[05:44:13] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[05:52:30] *** Joins: sgithens (sid10659@helmsley.irccloud.com)
[06:12:19] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[06:12:59] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 264 seconds)
[06:13:54] *** Joins: Guest-liao (~Guest-lia@101.86.98.144)
[06:14:23] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[06:19:16] *** Quits: gaqwas (~john@dynamic-077-009-045-149.77.9.pool.telefonica.de) (Ping timeout: 245 seconds)
[06:19:44] *** Joins: gaqwas (~john@dynamic-077-004-112-217.77.4.pool.telefonica.de)
[06:20:22] *** Joins: Demosthe1ex (~Demosthen@user/demosthenex)
[06:23:23] *** Joins: khrbt (~znc@user/khrbt)
[06:23:49] *** Quits: Demosthenex (~Demosthen@user/demosthenex) (Ping timeout: 252 seconds)
[06:24:15] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 265 seconds)
[06:26:11] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 265 seconds)
[06:29:37] *** Joins: lisp123 (~lisp123@5.30.23.247)
[06:30:09] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[06:31:28] <beach> Good morning everyone!
[06:34:24] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[06:35:55] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 252 seconds)
[06:38:16] *** Joins: johnjay (~pi@192.142.100.50)
[06:39:59] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 264 seconds)
[06:41:51] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[06:42:42] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[06:43:33] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[06:46:07] *** Quits: Guest-liao (~Guest-lia@101.86.98.144) (Quit: Client closed)
[06:47:13] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[06:50:06] *** Quits: lad (~lad@user/lad) (Ping timeout: 245 seconds)
[06:52:38] *** Quits: winning-luser (~winning-l@2601:8c1:181:1340::e50f) (Quit: zzz)
[07:04:35] *** Quits: zazzerin` (~user@2600:1700:6004:8470:b9cd:b54f:6031:bbcb) (Ping timeout: 264 seconds)
[07:12:22] *** Joins: Guest-liao (~Guest-lia@101.86.98.144)
[07:20:39] <hayley> I'd be interested in any other GC-heavy multi-threaded benchmarks too, for what it's worth.
[07:22:23] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[07:26:31] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: sleep)
[07:29:25] *** Quits: Guest-liao (~Guest-lia@101.86.98.144) (Ping timeout: 256 seconds)
[07:32:37] *** Quits: semz (~none@user/semz) (Ping timeout: 252 seconds)
[07:34:36] <jmercouris> good morning beach
[07:35:20] <jmercouris> borodust: is it called 'burgled batteries' because the batteries are burgled from other projects? is that the rationale?
[07:36:40] <jmercouris> borodust: sorry, I confused you with somebody else, I was thinking of bodge* or some other library you have and burgled-bodged got transposed in my head
[07:38:09] *** Quits: jealousmonk (~user@2804:431:e7c5:3f2:5f6e:d4b3:6e97:d2df) (Quit: sleep zZzz)
[07:46:11] *** Joins: semz (~none@user/semz)
[07:47:02] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[07:54:21] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[08:09:03] *** Quits: _whitelogger (~whitelogg@uruz.whitequark.org) (Remote host closed the connection)
[08:10:03] *** Joins: _whitelogger (~whitelogg@uruz.whitequark.org)
[08:10:17] <etimmons> jmercouris: Python famously comes with "batteries included"
[08:10:34] <etimmons> So I've always assumed that it's called "burgled batteries" since, as a Python/CL bridge, it's stealing Python's batteries
[08:11:11] <jmercouris> I was thinking the same after reflecting on the fact that it was python :-D
[08:11:16] <hayley> Don't worry, the batteries only corroded 10 years ago.
[08:11:37] <jmercouris> I kind of want to make my own lisp which is a superset of Common Lisp by including some of my favorite CL libraries
[08:12:09] <jmercouris> I wouldn’t make a new compiler or anything, just ship an image with some libraries added
[08:12:30] <jmercouris> Maybe even put all of their symbols in the cl package or something
[08:12:40] <hayley> 😬
[08:12:49] <jmercouris> I guess that’s what cl21 tried to do
[08:13:04] <jmercouris> A lot of people really don’t like it, but I think it was a good endeavor
[08:13:13] <jmercouris> Why the reaction Hayley?
[08:13:20] <hayley> Double :grimacing:. 😬 😬
[08:13:54] <hayley> Because another language breaks compatibility with everything, whereas just having "CL with some nice libraries" doesn't.
[08:13:58] <jmercouris> Grimacing because it would break backward compatibility ?
[08:14:06] <jmercouris> I figured as much
[08:14:15] <jmercouris> You just typed a little faster
[08:14:21] <jmercouris> I haven’t done it yet, have I?
[08:14:28] <hayley> Yeah. Good chance that (defpackage :blah (:use :cl)) is going to do something very bad.
[08:14:54] *** Joins: ad-absurdum (~ad-absurd@2600:1700:b2d2:4560::5bb)
[08:14:59] <jmercouris> Well, maybe one day I will do it
[08:15:28] <jmercouris> I think it would be nice, but maybe that’s too much NIH
[08:15:59] <jmercouris> Don’t worry, I’m not doing it today, or this next year
[08:16:04] <jmercouris> Maybe in 5 or 10 years
[08:16:20] <jmercouris> So there will be time to convince me of my errant ways in the future
[08:33:29] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[08:36:58] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[08:44:21] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[08:44:47] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[08:45:55] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:55:57] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[09:02:40] *** Joins: aartaka (~aartaka@176.59.215.86)
[09:03:23] *** Joins: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49)
[09:05:39] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[09:05:53] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:06:24] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[09:08:49] *** Quits: Posterdati (~posterdat@host-87-7-175-125.retail.telecomitalia.it) (Ping timeout: 252 seconds)
[09:12:13] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[09:23:00] *** Joins: Posterdati (~posterdat@host-82-49-184-109.retail.telecomitalia.it)
[09:33:47] *** Quits: aartaka (~aartaka@176.59.215.86) (Read error: Connection reset by peer)
[09:33:49] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Quit: Ping timeout (120 seconds))
[09:34:02] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[09:45:06] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 245 seconds)
[09:47:44] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[10:03:08] *** Joins: pve (~pve@176-93-59-175.bb.dnainternet.fi)
[10:15:33] *** Joins: selwyn_ (~selwyn@user/selwyn)
[10:18:27] *** Quits: selwyn_ (~selwyn@user/selwyn) (Client Quit)
[10:23:01] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:11fc:225b:3e1b:f83b) (Ping timeout: 245 seconds)
[10:24:12] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:8d5f:78c6:cd1:4a9b)
[10:26:33] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:27:31] *** Quits: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354) (Ping timeout: 265 seconds)
[10:40:17] *** Joins: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354)
[10:46:41] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[10:48:55] <jackdaniel> yesterday I wrote a short post about the macro do and tail recursion https://turtleware.eu/posts/How-do-you-DO-when-you-do-DO.html
[10:49:07] <jackdaniel> that was prompted by the yesterday discussion about do (however only remotely relevant to it)
[10:56:48] <lisp123> jackdaniel: Interesting, thanks
[10:57:30] <lisp123> Do you prefer DO over normal recursive functions?
[10:57:51] <lisp123> tail recursive*
[11:03:21] <jackdaniel> I don't have any strong preference - if something can be expressed clearly in terms of do then it is fine
[11:03:41] <xaotuk> jackdaniel: Wow! I always observed "do" as some ancient iteration construct, never being aware that it's compact tail recursion. You opened my eyes, thanks!
[11:04:07] <jackdaniel> I mostly use do in macros to build specialized iteration constructs
[11:04:18] <jackdaniel> xaotuk: sure :)
[11:08:35] <lisp123> jackdaniel: Makes sense, DO does offer quite a bit of control
[11:09:39] *** Joins: heisig (~heisig@p508b531b.dip0.t-ipconnect.de)
[11:19:57] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:8166:19bb:6446:cdb4)
[11:21:23] <pve> jackdaniel: Is it "recurring" or "recursing"?
[11:21:52] <pve> jackdaniel: Good post. I've never once used "do", but maybe that will change now :)
[11:22:52] *** Joins: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de)
[11:22:52] *** ChanServ sets mode: +o MichaelRaskin
[11:30:05] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[11:30:05] *** Quits: ad-absurdum (~ad-absurd@2600:1700:b2d2:4560::5bb) (Quit: Leaving)
[11:36:31] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:39:12] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:40:38] *** Joins: cosimone (~user@93-34-133-215.ip49.fastwebnet.it)
[11:53:37] *** Joins: zacque (~zacque@5.102.49.60.klj04-home.tm.net.my)
[12:08:26] <jackdaniel> thanks
[12:14:05] *** Quits: zacque (~zacque@5.102.49.60.klj04-home.tm.net.my) (Quit: Client closed)
[12:16:57] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Quit: Client closed)
[12:19:21] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[12:19:37] <borodust> jmercouris: no probs! i have some bodges, yes :)
[12:19:37] <Colleen> borodust: drmeister said at 2021.10.11 20:25:12: Thanks - I wasn't sure if I was just not thinking about it properly
[12:30:23] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[12:30:43] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:33:20] *** Joins: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it)
[12:38:11] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[12:39:24] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:41b6:17cb:e636:5883)
[12:40:47] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[12:53:29] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 265 seconds)
[12:55:13] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[12:55:48] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Client Quit)
[12:59:00] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.3)
[12:59:13] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[13:03:55] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[13:05:20] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[13:12:15] *** Joins: hendursa1 (~weechat@user/hendursaga)
[13:23:07] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[13:23:51] *** Joins: hendursa1 (~weechat@user/hendursaga)
[13:25:28] *** Joins: frgo_ (~frgo@p200300deef0cee004404bf5c684e7cef.dip0.t-ipconnect.de)
[13:26:41] *** Quits: frgo (~frgo@p200300deef0cee001121140f94627547.dip0.t-ipconnect.de) (Quit: Leaving...)
[13:28:39] *** Quits: frgo_ (~frgo@p200300deef0cee004404bf5c684e7cef.dip0.t-ipconnect.de) (Client Quit)
[13:28:55] *** Joins: frgo (~frgo@p200300deef0cee004404bf5c684e7cef.dip0.t-ipconnect.de)
[13:34:10] *** Quits: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b) (Remote host closed the connection)
[13:37:00] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:38:09] *** Quits: hendursa1 (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[13:38:53] *** Joins: hendursa1 (~weechat@user/hendursaga)
[13:39:41] *** Quits: frgo (~frgo@p200300deef0cee004404bf5c684e7cef.dip0.t-ipconnect.de) (Remote host closed the connection)
[13:42:04] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:44:45] *** Joins: frgo (~frgo@p200300deef0cee004404bf5c684e7cef.dip0.t-ipconnect.de)
[13:45:22] *** Quits: frgo (~frgo@p200300deef0cee004404bf5c684e7cef.dip0.t-ipconnect.de) (Remote host closed the connection)
[13:45:31] *** Joins: frgo (~frgo@p200300deef0cee004404bf5c684e7cef.dip0.t-ipconnect.de)
[13:46:35] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 264 seconds)
[13:47:10] *** Quits: frgo (~frgo@p200300deef0cee004404bf5c684e7cef.dip0.t-ipconnect.de) (Client Quit)
[13:54:54] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Remote host closed the connection)
[13:56:07] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[13:57:28] *** Joins: montxero (~user@123.208.58.133)
[14:20:29] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:22:17] *** Quits: skeemer (~skeemer@h-158-174-23-142.NA.cust.bahnhof.se) (Remote host closed the connection)
[14:22:46] *** Joins: makomo_ (~makomo@user/makomo)
[14:28:00] *** Joins: random-nick (~random-ni@87.116.165.220)
[14:30:58] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[14:34:46] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[14:35:29] *** Joins: srhm (~srhm@user/srhm)
[14:37:23] *** Joins: skeemer (~skeemer@h-158-174-23-142.NA.cust.bahnhof.se)
[14:37:30] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Quit: Laa shay'a waqi'un moutlaq bale kouloun moumkine)
[14:38:13] <skeemer> hello all, i am quite new to common lisp, i was wondering why most of the people uses sbcl, and what are the reasons to prefer it to clisp ?
[14:39:18] <hayley> SBCL compiles to machine code, so it is (almost?) always faster, and it is more maintained.
[14:39:46] <skeemer> okok thanks
[14:41:51] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:44:58] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:46:21] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 245 seconds)
[14:46:22] *** Lord_of_Life_ is now known as Lord_of_Life
[14:50:11] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 264 seconds)
[14:52:30] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:53:11] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 264 seconds)
[14:55:20] *** Lord_of_Life_ is now known as Lord_of_Life
[15:03:49] *** Quits: heisig (~heisig@p508b531b.dip0.t-ipconnect.de) (Quit: Leaving)
[15:05:11] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 264 seconds)
[15:14:51] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[15:22:38] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[15:35:56] *** Joins: frgo (~frgo@p200300deef0cee0051147a6a99c7a259.dip0.t-ipconnect.de)
[15:36:10] *** Quits: frgo (~frgo@p200300deef0cee0051147a6a99c7a259.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:36:25] *** Joins: frgo (~frgo@p200300deef0cee0051147a6a99c7a259.dip0.t-ipconnect.de)
[15:40:36] *** Quits: frgo (~frgo@p200300deef0cee0051147a6a99c7a259.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:41:14] *** Joins: frgo (~frgo@p200300deef0cee0051147a6a99c7a259.dip0.t-ipconnect.de)
[15:41:34] *** Quits: frgo (~frgo@p200300deef0cee0051147a6a99c7a259.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:41:43] *** Joins: frgo (~frgo@p200300deef0cee0051147a6a99c7a259.dip0.t-ipconnect.de)
[16:00:50] *** Joins: icer (eric@gateway/vpn/protonvpn/icer)
[16:06:01] *** Joins: tfb (~tfb@88.98.95.237)
[16:06:46] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 245 seconds)
[16:07:00] *** Joins: Bike (~Bike@71.69.170.70)
[16:07:00] *** ChanServ sets mode: +o Bike
[16:08:09] <icer> My working remote slime/swank debugging broke after trying to update sbcl to the downloaded latest from Ubuntu 20.04's default.  I've tried reverting, recompiling, but now it's always complaining about swank-io-package stuff missing and swank indentation things missing.  Any ideas?
[16:08:51] <icer> Slime itself is working.  The slime-connect fails with errors.
[16:09:44] <icer> Or is there a better place to ask?
[16:12:50] <Bike> have you updated swank too? maybe it needs changes for newer sbcl
[16:13:25] <jackdaniel> remove ~/.slime
[16:13:29] *** Joins: sepanko (~sepanko@user/sepanko)
[16:14:05] <icer> I tried a fresh load of the latest quicklisp swank.
[16:14:21] <icer> jack: I'll try now
[16:15:55] <beach> icer: You can use completion to get the full IRC handle of the person you are addressing.
[16:17:27] *** Quits: frgo (~frgo@p200300deef0cee0051147a6a99c7a259.dip0.t-ipconnect.de) (Remote host closed the connection)
[16:17:56] *** Joins: frgo (~frgo@p200300deef0cee0051147a6a99c7a259.dip0.t-ipconnect.de)
[16:21:34] <icer> jackdaniel: Ok, I can connect to the binary running on my local machine, but to the same binary over ssh port forwarding, the same errors occur.
[16:21:43] <icer> beach: thanks
[16:22:34] *** Quits: frgo (~frgo@p200300deef0cee0051147a6a99c7a259.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[16:25:50] <icer> jackdaniel: I md5summed the binary to confirm its the same.  There is no ~/.slime on the remote system.
[16:29:45] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:31:17] <_death> jackdaniel: when I think of DO, I tend to recall the little box on PG's ANSI Common Lisp, I think with the headline "The point of DO".. in it he quotes from the paper "The Evolution of Lisp"
[16:31:54] *** Joins: pjb (~pjb@user/pjb)
[16:32:27] <hayley> DO or DO not, there is no TRY.
[16:33:26] <icer> I still connect and get the "Can't locate module: SWANK-IO-PACKAGE::SWANK-INDENTATION", which is odd considering it's the same binary.
[16:33:56] <_death> the quotation is about how iteration over a single variable is often not very useful on its own, and how DO allows iterating multiple variables, and consequently the DO body can often be empty
[16:34:10] *** Joins: frgo (~frgo@p200300deef0cee0051147a6a99c7a259.dip0.t-ipconnect.de)
[16:36:01] *** Quits: djuber (~user@65.79.128.64) (Remote host closed the connection)
[16:36:59] <_death> icer: maybe the swank fasls are some other place on the remote machine
[16:37:40] <_death> icer: a while ago I added a restart to be able to continue from this error, btw.. https://github.com/death/slime/commit/9f5cc8c7cf042f821ee3f2c838c6b617e8aeaf6d
[16:38:26] *** Quits: frgo (~frgo@p200300deef0cee0051147a6a99c7a259.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[16:39:53] <icer> _death: nice retart idea.  So, are fasls not built into the image?  My Makefile uses (asdf:make).  Or is swank something I need to manually quickload on the remote?
[16:40:31] <_death> icer: if you load swank into the image prior to building it, it's there
[16:41:52] <_death> icer: you should also make sure to load the contribs you use
[16:42:07] <akater[m]> jackdaniel: Your post did clarify DO for me.
[16:44:56] <icer> _death: I don't do an explicit load, just a ql:quickload of the project's asd system, then build, which shouldn't call the entrypoint.  At one point I tried adding --eval '(swank-loader:init)' before the build command.
[16:45:03] <mfiano> _death: Ah yes, Norvig uses the empty body form a few times in PAIP
[16:45:16] <mfiano> I practically learned DO by reading his code :)
[16:45:25] <icer> _death: It didn't seem to help, but I'll add it back in.
[16:47:21] <_death> icer: can also try to pass :load-contribs t to init
[16:59:32] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:01:46] *** Joins: dra (~dra@2a04:4540:641a:ef00:f09a:5895:b098:1e62)
[17:03:57] <icer> _death: It takes a couple minute to deploy - slow connection.  In the meantime I tried sshing in to the remote and trying to emacs/slime locally on the remote and got a swank version mismatch 24 vs 26.1, which apt tells me 24 is on the remote, and I know 26.1 is local to my dev machine.  May be the issue.
[17:03:59] <pjb> hayley: (defmacro try (expression) `(ignore-errors ,expression))
[17:04:04] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[17:06:57] <_death> icer: probably shouldn't use apt to manage swank ;)
[17:09:40] *** Joins: frgo (~frgo@p200300deef0cee0051147a6a99c7a259.dip0.t-ipconnect.de)
[17:11:34] <icer> _death: :)
[17:13:36] <icer> _death: how do I make slime recompile after I patch the file for your restart?  I did a slime C-c C-c, and compiled, but that didn't seem to be enough.
[17:13:58] *** Quits: frgo (~frgo@p200300deef0cee0051147a6a99c7a259.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[17:16:06] <_death> icer: my core rebuilding script removes ~/.slime/fasl prior to making the core
[17:16:46] <icer> _death: odd, the swank-loader line doesn't seem to have an effect, the remote is still looking for the v24 swank rather than what I tried to build into the image.
[17:21:13] <_death> icer: did you apt remove slime
[17:21:55] <_death> I dunno what the distribution-specific packages do exactly
[17:23:38] <icer> _death: yes, I forgot to "purge" it, I'll see if that works.  I've also quickloaded swank, but that didn't work.
[17:38:54] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[17:43:29] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:44:52] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[17:47:36] *** Quits: montxero (~user@123.208.58.133) (Remote host closed the connection)
[17:47:44] <icer> _death: so.. same as dev machine, used quicklisp to install swank and melpa in emacs to install slime on remote.  Tried using emacs/slime on remote for a remote-local connection, and it fails, same failure to load swank-indentation :(
[17:49:28] <icer> _death: same version of sbcl.  Is sly less finicky?
[17:54:14] <_death> icer: I don't use quicklisp or melpa to manage slime.. I just clone the repo
[17:57:24] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[17:57:52] *** Joins: srhm (~srhm@user/srhm)
[17:59:11] <icer> _death: I'll try it. github.com/slime/slime right?
[17:59:27] <_death> icer: in fact I do this for all lisp-related things.. I have a "third-party" directory of CL code repos (it's a subdirectory of quicklisp, ~/quicklisp/third-party due to historical reasons, as I started by converting all QL libraries I had.. https://gist.github.com/death/2fb6218858c6212ebea052f2e3d4f0b3 )
[18:00:54] <icer> _death: lisp is starting to not look practical
[18:01:38] <_death> icer: well, it's just the way I work.. maybe others can help you do it in a way that is more practical for you
[18:02:44] *** Joins: frgo (~frgo@p200300deef0cee0051147a6a99c7a259.dip0.t-ipconnect.de)
[18:03:00] <icer> _death: you do this for every project deployment?  Or no deployments?
[18:03:14] *** Joins: Psybur (~Psybur@mobile-166-170-34-168.mycingular.net)
[18:03:29] *** Quits: Inline (~Inline@2a02:908:1252:7a80:89dc:6a58:9f2a:ff3d) (Ping timeout: 268 seconds)
[18:04:26] <_death> icer: I have a personal server running lisp.. I don't upload images to it, though
[18:05:32] <_death> I use syncthing to synchronize between various development machines
[18:06:46] <_death> to pick up new changes, I have a basic program that fetches for each repo, and I can then review the changes and merge/rebase
[18:07:29] <_death> https://gist.github.com/death/468f2bb4c0b6c383697ca2cc8f15e064
[18:07:48] <_death> anyway, it's just how I work.. lots of custom stuff ;)
[18:07:48] *** Quits: frgo (~frgo@p200300deef0cee0051147a6a99c7a259.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[18:10:15] *** Joins: Inline (~Inline@2a02:908:1252:7a80:89dc:6a58:9f2a:ff3d)
[18:11:05] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:12:05] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[18:12:09] <_death> I do use melpa for emacs packages (not slime), but also keep them in a big git repo, so that I can review changes, revert, etc.
[18:13:31] *** Joins: frgo (~frgo@p200300deef0cee0051147a6a99c7a259.dip0.t-ipconnect.de)
[18:13:33] *** Quits: frgo (~frgo@p200300deef0cee0051147a6a99c7a259.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:13:47] *** Joins: frgo (~frgo@p200300deef0cee0051147a6a99c7a259.dip0.t-ipconnect.de)
[18:13:52] <mfiano> _death: I also do that with syncthing, but no quicklisp, just CLPM
[18:14:09] *** Quits: frgo (~frgo@p200300deef0cee0051147a6a99c7a259.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:14:11] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[18:14:41] *** Joins: frgo (~frgo@p200300deef0cee000d1333f08f66c8c0.dip0.t-ipconnect.de)
[18:14:58] <icer> _death: I can see using git for control.  What's CLPM?
[18:16:18] <icer> _death: nvm, found it
[18:17:13] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 252 seconds)
[18:23:11] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 264 seconds)
[18:23:53] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:34:06] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:34:18] *** Joins: tfb (~tfb@88.98.95.237)
[18:34:27] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:34:41] *** Joins: tfb (~tfb@88.98.95.237)
[18:34:48] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:35:01] *** Joins: tfb (~tfb@88.98.95.237)
[18:35:09] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:35:22] *** Joins: tfb (~tfb@88.98.95.237)
[18:35:30] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:35:42] *** Joins: tfb (~tfb@88.98.95.237)
[18:35:52] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:36:03] *** Joins: tfb (~tfb@88.98.95.237)
[18:36:13] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:36:26] *** Joins: tfb (~tfb@88.98.95.237)
[18:36:28] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[18:36:34] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:36:48] *** Joins: tfb (~tfb@88.98.95.237)
[18:36:56] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:37:06] *** Joins: tfb (~tfb@88.98.95.237)
[18:37:15] *** Quits: frgo (~frgo@p200300deef0cee000d1333f08f66c8c0.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:37:17] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:37:28] *** Joins: tfb (~tfb@88.98.95.237)
[18:37:38] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:37:46] *** Joins: frgo (~frgo@p200300deef0cee000d1333f08f66c8c0.dip0.t-ipconnect.de)
[18:37:51] *** Joins: tfb (~tfb@88.98.95.237)
[18:38:00] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:38:03] *** Joins: nature (~nature@45.32.235.173)
[18:38:11] *** Joins: tfb (~tfb@88.98.95.237)
[18:38:12] *** Joins: igemnace (~ian@user/igemnace)
[18:38:21] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:38:33] *** Joins: tfb (~tfb@88.98.95.237)
[18:38:38] *** Quits: igemnace (~ian@user/igemnace) (Client Quit)
[18:38:43] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:38:54] *** Joins: tfb (~tfb@88.98.95.237)
[18:38:58] *** Quits: frgo (~frgo@p200300deef0cee000d1333f08f66c8c0.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:39:04] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:39:09] *** Joins: frgo (~frgo@p200300deef0cee000d1333f08f66c8c0.dip0.t-ipconnect.de)
[18:39:15] *** Joins: tfb (~tfb@88.98.95.237)
[18:39:25] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:39:37] *** Joins: tfb (~tfb@88.98.95.237)
[18:39:47] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:39:58] *** Joins: tfb (~tfb@88.98.95.237)
[18:40:09] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:40:19] *** Joins: tfb (~tfb@88.98.95.237)
[18:40:30] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:40:41] *** Joins: tfb (~tfb@88.98.95.237)
[18:40:51] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:41:02] *** Joins: tfb (~tfb@88.98.95.237)
[18:41:12] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:41:25] *** Joins: tfb (~tfb@88.98.95.237)
[18:41:34] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:41:44] *** Joins: tfb (~tfb@88.98.95.237)
[18:41:55] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:42:06] *** Joins: tfb (~tfb@88.98.95.237)
[18:42:16] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:42:27] *** Joins: tfb (~tfb@88.98.95.237)
[18:42:37] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:42:49] *** Joins: tfb (~tfb@88.98.95.237)
[18:42:58] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:43:10] *** Joins: tfb (~tfb@88.98.95.237)
[18:43:10] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[18:43:20] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:43:32] *** Joins: tfb (~tfb@88.98.95.237)
[18:43:41] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:43:53] *** Joins: tfb (~tfb@88.98.95.237)
[18:44:03] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:44:15] *** Joins: tfb (~tfb@88.98.95.237)
[18:44:24] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:44:36] *** Joins: tfb (~tfb@88.98.95.237)
[18:44:45] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:44:56] *** Joins: tfb (~tfb@88.98.95.237)
[18:45:06] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:45:19] *** Joins: tfb (~tfb@88.98.95.237)
[18:45:28] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:45:40] *** Joins: tfb (~tfb@88.98.95.237)
[18:45:49] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:46:01] *** Joins: tfb (~tfb@88.98.95.237)
[18:46:10] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:46:22] *** Joins: tfb (~tfb@88.98.95.237)
[18:46:32] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:46:45] *** Joins: tfb (~tfb@88.98.95.237)
[18:46:53] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:47:05] *** Joins: tfb (~tfb@88.98.95.237)
[18:47:14] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:47:25] *** Joins: tfb (~tfb@88.98.95.237)
[18:47:35] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:47:46] *** Joins: tfb (~tfb@88.98.95.237)
[18:47:56] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:48:06] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Quit: Client closed)
[18:48:07] *** Joins: tfb (~tfb@88.98.95.237)
[18:48:17] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:48:29] *** Joins: tfb (~tfb@88.98.95.237)
[18:48:39] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:48:51] *** Joins: tfb (~tfb@88.98.95.237)
[18:49:00] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:49:12] *** Joins: tfb (~tfb@88.98.95.237)
[18:49:21] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:49:32] *** Joins: tfb (~tfb@88.98.95.237)
[18:49:42] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:49:53] *** Joins: tfb (~tfb@88.98.95.237)
[18:50:04] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:50:15] *** Joins: tfb (~tfb@88.98.95.237)
[18:50:25] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:50:36] *** Joins: tfb (~tfb@88.98.95.237)
[18:50:46] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:50:58] *** Joins: tfb (~tfb@88.98.95.237)
[18:51:07] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:51:10] <gin> if I just need to do a boolean check for whether an item exists in list, is either of FIND or POSITION more preferred than the other?
[18:51:18] *** Joins: tfb (~tfb@88.98.95.237)
[18:51:29] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:51:40] *** Joins: tfb (~tfb@88.98.95.237)
[18:51:50] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:52:02] *** Joins: tfb (~tfb@88.98.95.237)
[18:52:05] <_death> clhs member
[18:52:06] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/a_member.htm
[18:52:11] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:52:14] <beach> gin: I would use MEMBER.
[18:52:15] <mfiano> Which will handle finding a NIL
[18:52:22] *** Joins: tfb (~tfb@88.98.95.237)
[18:52:32] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:53:02] *** Joins: tfb (~tfb@88.98.95.237)
[18:53:20] <gin> beach, mfiano, thanks! MEMBER is exactly what I needed
[18:53:51] <beach> Sure.
[18:54:38] *** Joins: rain3 (~rain3___@86.127.200.187)
[18:57:11] *** Quits: tfb (~tfb@88.98.95.237) (Ping timeout: 245 seconds)
[18:58:32] *** Joins: f-a (f2a@f2a.jujube.ircnow.org)
[19:00:01] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[19:02:14] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:03:25] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:8166:19bb:6446:cdb4) (Ping timeout: 260 seconds)
[19:09:23] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 264 seconds)
[19:10:20] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[19:11:19] *** Joins: pjb (~pjb@user/pjb)
[19:14:06] *** Quits: lonjil (~quassel@user/lonjil) (Quit: Quit.)
[19:16:13] *** Joins: lonjil (~quassel@user/lonjil)
[19:17:10] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[19:17:36] *** Joins: amb007 (~a_bakic@84.107.204.77.rev.sfr.net)
[19:19:35] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 264 seconds)
[19:23:34] *** Joins: tfb (~tfb@88.98.95.237)
[19:27:48] <beach> There is an irritating contradiction of terminology in the Common Lisp standard that would be good to fix some day.  Usually "bound" means "has a value", so that BOUNDP returns true if and only if the variable has a value and MAKUNBOUND makes the variable have no value.  But that terminology is not great, as is evident in the dictionary entry on PROGV.
[19:27:54] <beach> clhs progv
[19:27:54] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/s_progv.htm
[19:28:34] <beach> "the remaining symbols are bound and then made to have no value"
[19:28:49] <beach> But they are not bound and then made unbound.
[19:29:17] <beach> So it is possible to have a binding for a special variable, but it has no value in that binding.
[19:29:49] <beach> I can see two solutions...
[19:29:52] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[19:30:02] *** Joins: tfb (~tfb@88.98.95.237)
[19:30:18] *** Parts: f-a (f2a@f2a.jujube.ircnow.org) ()
[19:30:49] <beach> 1. Let "bound" mean that a binding exists, but it can have no value.  That solution would require renaming BOUNDP and MAKUNBOUND which makes this solution hard.
[19:31:50] <beach> 2. Keep "bound" to mean "has a value", but introduce a new term for what we now call a "binding".
[19:32:41] <beach> I much prefer solution 1, but it's not going to happen.
[19:33:45] *** Joins: selwyn_ (~selwyn@user/selwyn)
[19:38:39] <beach> The glossary does not mention "having a value" in association with "bind", "bound", "binding", so that suggests solution 1.
[19:38:59] <Nilby> How about accepting that natural language is imprecise and adding a denotational semantics definition like scheme?
[19:39:57] <MichaelRaskin> Hmm, the glossary does mention values in examples for bindings
[19:40:07] <beach> Nilby: [quoting RMS]: Sounds good.  Let me know when you have implemented it.
[19:41:27] <Nilby> beach: I know. It makes my head swim to to think of it for all of CL. Even the scheme version is challenging.
[19:41:37] <beach> MichaelRaskin: There is no glossary entry for "bindings".  Do you mean for "binding"?  For lexical variables, they are the same.
[19:41:45] <MichaelRaskin> I have an impression that mentioning the remaining variables being bound (which is against the glossary definition, which asks these names to denote something, which they don't withing dynamic extent) is just so that «bindings are undone» covers them
[19:41:50] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[19:42:24] <MichaelRaskin> beach: I mean entry for «binding» that gives examples of different kinds of bindings
[19:42:35] <beach> MichaelRaskin: I have no idea what your last phrase means.
[19:43:08] <beach> "is just so that «bindings are undone» covers them"?
[19:43:17] <beach> Who is "them"?
[19:43:49] <MichaelRaskin> The spec for progv says «The bindings of the dynamic variables are undone on exit from progv.»
[19:43:59] <Nilby> Also it's not clear how useful denotational semantics is to anybody, since I and many others wrote a scheme without looking too much at it.
[19:44:20] <beach> MichaelRaskin: Yes, so?
[19:44:33] *** Quits: selwyn_ (~selwyn@user/selwyn) (Quit: Leaving)
[19:44:55] <MichaelRaskin> This seems to cover the variables that are deprived of their values for the dynamic extent of progv
[19:45:20] <beach> I still have no idea what you are suggesting, but let me put it this way...
[19:45:38] <beach> Do we agree that (let ((*x* 234)) ...) introduces a binding for *x*?
[19:46:01] <MichaelRaskin> I am not yet suggesting, I am trying to understand why the phrase «bound and then made to have no value» was written
[19:46:12] <beach> I'll explain again then.
[19:46:21] <Nilby> I agree there's more to it than just being bound and unbound which it would be nice to have a precise term for.
[19:46:36] <beach> If so, assume we have (let ((*x* 111)) (let ((*x* 234)) (makunbound '*x*) *x*))
[19:46:50] <beach> What is the value of the last *x*?
[19:47:04] <_death> (defvar *x* 123) (progv '(*x*) () (boundp '*x*)) => NIL
[19:47:22] <beach> If it has no value, then makunbound did not undo the binding introduced by the inner LET.
[19:47:33] <beach> MichaelRaskin: Do you see what I mean?
[19:48:57] <beach> _death: Exactly, so the PROGV page says *x* is still bound, but BOUNDP returns false.
[19:49:27] <_death> beach: right.. so maybe the wording in PROGV entry is bad
[19:49:56] <MichaelRaskin> Technically speaking. doesn't «then made to have no value» have power to also make the variable unbound there?
[19:50:00] <beach> _death: If that is what you think, you have to invent a new term for what (let ((*x* 234)) does
[19:50:54] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[19:52:09] <_death> beach: why? it binds *x* to 234.. I am saying that you're right there's a distinction missing.. the progv form creates a binding with the value being a marker
[19:52:15] <beach> MichaelRaskin: Only if you accept that "to be unbound" does not mean "has no binding".
[19:52:35] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 264 seconds)
[19:52:45] <MichaelRaskin> I am fine with «unbound ]
[19:53:17] <MichaelRaskin> [in the current extent and scope]» meaning «has no binding [accessible in the current extent and scope]»
[19:53:55] <beach> MichaelRaskin: But the binding is accessible.  You can do (setq *x* 234), and it affects that very binding.
[19:55:13] <Nilby> LET just doesn't allow the trick that progv does, but one could imagine or make a LET that allowed you to make something locally unbound.
[19:55:13] <MichaelRaskin> In practice makunbound doesn't seem to do anything to the lexical binding. Which might be a bigger question than whether progv specification is too sloppily worded
[19:55:18] <pjb> beach: 1. is impossible.  If a binding exists, the  variable or slot  is bound.
[19:55:47] <beach> pjb: Sure, that's a tautology.
[19:56:37] <pjb> Perhaps the problems comes from the difference between variables and slots, and the fact that dynamic variables use the symbol-value slot (or at least, the symbol-value operator).
[19:56:51] <beach> MichaelRaskin: Right, no lexical bindings are involved here.
[19:57:07] <MichaelRaskin> In case of progv?
[19:57:16] <beach> They are all special bindings.
[19:57:18] <beach> Not lexical.
[19:57:58] <pjb> Yesterday I described varname : [*]--> value   saying that the symbol varname named the variable [ ]  (a slot)   and the binding is the arrow *-->  between the variable (or slot) and the value.
[19:58:05] <MichaelRaskin> Just (let ((x 1)) (makunbound 'x) x) is already questionable
[19:58:23] <beach> MichaelRaskin: Questionable?
[19:58:39] <beach> MichaelRaskin: PROGV handles only special variables.
[19:58:56] <MichaelRaskin> My code does not even use PROGV
[19:59:17] <beach> MichaelRaskin: MAKUNBOUND works only on special variables.
[19:59:17] <MichaelRaskin> Just LET. I am not sure if by the letter of the standard it should work. In practice it does.
[19:59:20] <pjb> I think the spec of PROGV uses "bound" incorrectly in "the remaining symbols are bound and then made to have no value."  they mean that the variables named by those symbols are created, and made unbound.
[19:59:41] <beach> MichaelRaskin: Define "works"?
[19:59:44] <pjb> Same as with defvar without an initial value.
[20:00:05] <MichaelRaskin> Returns a value without signalling an serious condition.
[20:00:08] <beach> pjb: What you are saying is solution 2.
[20:00:52] <beach> pjb: But that is unfortunate, because then (let ((*x*)) does not "create a binding" but it "creates a variable".
[20:01:13] <MichaelRaskin> Specification of MAKUNBOUND is vague enough that I am not sure how to deduce from it that it only affect special variables
[20:01:20] <pjb> LET always creates bindings in addition to the variable, since it binds them to NIL.
[20:01:50] <beach> MichaelRaskin: That is entirely possible, but I can guarantee you that that is what is meant, since the name of the variable is evaluated.
[20:03:08] <beach> pjb: I understand what you are saying, and that's solution 2.
[20:03:09] <MichaelRaskin> Sure
[20:03:21] <pjb> Notably any unbound slot or variable, still exists.  There's some place designated by the slot accessor or the variable name, that can be assigned a value, ie. bound to it.
[20:03:40] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[20:03:40] <pjb> beach: I agree.
[20:04:17] <pjb> For me, the binding is the *--> arrow, not the : association between varname (or slot place form) and [ ] the actual box where the reference to the value is stored.
[20:04:33] <beach> The way I see things is that special variables come with a stack of "things", where each entry in the stack has a value or a marker indicating that there is no value there.
[20:04:47] <beach> I would like a word for that thing.
[20:05:12] <beach> The glossary suggests "binding", but that is inconsistent with MAKUNBOUND and BOUNDP.
[20:05:41] <beach> So pjb is suggesting a "variable", because the variables are created.
[20:06:03] <pjb> Yes.
[20:06:05] <beach> But then we have a problem that a "special variable" is a not a variable, but a stack of variables.
[20:06:24] <pjb> That said, only one is visible at a time.
[20:06:35] <beach> Sure.
[20:06:48] <pjb> (and it's multiple stacks, one for each thread, unless the thread access a global stack).
[20:06:54] <Nilby> I thought that's what "environment" was.
[20:07:34] <beach> Nilby: An environment is way more than a single association between a single symbol and a single value/no-value-marker.
[20:08:11] <pjb> I think "variable" can recover both a single slot, or a stack of them or more complex storage forms.
[20:08:23] <beach> Anyway, it was a big mistake to bring this up.  Besides, dinner is imminent.
[20:08:51] <pjb> Also, temporary dynamic bindings can be implemented using the same slot, but saving and restoring the value on the execution stack.
[20:09:25] <pjb> I think we'd need a formal specification of CL. Terminology can be deduced from the formal notions.
[20:09:33] *** Quits: frgo (~frgo@p200300deef0cee000d1333f08f66c8c0.dip0.t-ipconnect.de) (Remote host closed the connection)
[20:09:45] *** Joins: frgo (~frgo@p200300deef0cee000d1333f08f66c8c0.dip0.t-ipconnect.de)
[20:12:05] <beach> So then we must accept that (setq *x* 234) does not alter the current binding of *x*)
[20:12:45] <beach> Because if it was preceded by (makunbound '*x*) then it doesn't HAVE a binding to be altered.
[20:13:54] <beach> Luckily, SETQ doesn't mention "binding".
[20:14:16] <beach> Anyway, I'm off.  Sorry for stirring up this controversy.
[20:14:47] *** Quits: amb007 (~a_bakic@84.107.204.77.rev.sfr.net) (Ping timeout: 264 seconds)
[20:15:01] <_death> I would say that special variables always have a binding.. makunbound merely sets the value to a marker
[20:15:54] <edgar-rft> here's howto export a binding -> https://res.cloudinary.com/ratebeer/image/upload/w_250,c_limit/beer_8237.jpg
[20:18:03] <_death> and boundp tests for (i) does it have a binding (ii) if it does, is the value this marker
[20:22:09] <Nilby> _death: That's how I think of it. In the old days the unbound marker was even real.
[20:22:29] <_death> it's still real, say in class slots
[20:36:23] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Ping timeout: 264 seconds)
[20:38:50] <_death> Nilby: (let ((*x* (sb-kernel:make-unbound-marker))) *x*)
[20:41:26] <_death> the question is, I guess, from this implementational model, how do we abstract to create good wording for the language specification
[20:43:01] <_death> in ordinary CL conversation we say that (defvar *x*), without prior reference to *x*, marks *x* as a special variable, and that this special variable is unbound
[20:44:28] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[20:44:30] <Nilby> TIL an unbound variable actually has the value #x50100109
[20:45:06] <Nilby> in some sense
[20:46:28] <Nilby> (logior (+ sb-vm:static-space-start #x100) 9)
[21:00:28] *** Joins: selwyn_ (~selwyn@user/selwyn)
[21:02:05] *** Quits: selwyn_ (~selwyn@user/selwyn) (Client Quit)
[21:02:11] *** Quits: Posterdati (~posterdat@host-82-49-184-109.retail.telecomitalia.it) (Ping timeout: 245 seconds)
[21:09:14] <White_Flame> looking at the disassembly, it's only checking the low byte tags for #x09.  I wonder what the rest of the word implies
[21:11:08] <White_Flame> (and obviously the #x50100109 is not a "value" in the lisp sense, but rather a specific machine word encoding here)
[21:13:22] *** Joins: amb007 (~a_bakic@69.198.204.77.rev.sfr.net)
[21:15:29] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 268 seconds)
[21:16:15] *** Joins: Posterdati (~posterdat@host-95-233-159-95.retail.telecomitalia.it)
[21:16:28] <Nilby> Yes. Not very important to know, but at least now I can see that unbound things might look like dark red when I scroll through memory as pixels.
[21:17:16] *** Joins: johnjay (~pi@192.142.100.50)
[21:17:34] *** Joins: Bike (~Bike@71.69.170.70)
[21:17:34] *** ChanServ sets mode: +o Bike
[21:18:14] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[21:18:33] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:18:58] *** Joins: hendursaga (~weechat@user/hendursaga)
[21:19:16] <_death> with that alpha?
[21:20:11] <Nilby> of course to see the pixels well, one has to ignore alpha or do 24 bits
[21:21:11] <_death> reminded of those hilbert curve visualizations of binary data
[21:21:56] <Nilby> Hmmm. That sounds like a fun filter
[21:23:25] * Nilby considers how to implement as a Lisp pixel shader 
[21:23:25] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[21:28:54] *** Quits: frgo (~frgo@p200300deef0cee000d1333f08f66c8c0.dip0.t-ipconnect.de) (Remote host closed the connection)
[21:31:57] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 265 seconds)
[21:32:47] *** Quits: tfb (~tfb@88.98.95.237) (Quit: died)
[21:33:58] *** Joins: johnjay (~pi@192.142.100.50)
[21:38:12] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[21:38:47] *** Joins: hendursaga (~weechat@user/hendursaga)
[21:40:43] *** Quits: icer (eric@gateway/vpn/protonvpn/icer) (Ping timeout: 252 seconds)
[21:44:40] *** Joins: frgo (~frgo@p200300deef0cee000d1333f08f66c8c0.dip0.t-ipconnect.de)
[21:45:30] *** Quits: frgo (~frgo@p200300deef0cee000d1333f08f66c8c0.dip0.t-ipconnect.de) (Client Quit)
[21:59:40] *** Joins: tfeb (~tfb@88.98.95.237)
[22:08:08] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[22:10:21] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[22:10:52] *** Joins: hendursaga (~weechat@user/hendursaga)
[22:23:42] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[22:37:41] *** Quits: amb007 (~a_bakic@69.198.204.77.rev.sfr.net) (Ping timeout: 265 seconds)
[22:39:15] *** Quits: rain3 (~rain3___@86.127.200.187) (Ping timeout: 260 seconds)
[22:45:34] *** Joins: lad (~lad@user/lad)
[22:46:01] *** Joins: amb007 (~a_bakic@38.198.204.77.rev.sfr.net)
[22:52:34] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[23:00:24] *** Quits: amb007 (~a_bakic@38.198.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[23:00:31] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[23:23:36] *** Quits: cosimone (~user@93-34-133-215.ip49.fastwebnet.it) (Remote host closed the connection)
[23:23:37] *** Quits: pve (~pve@176-93-59-175.bb.dnainternet.fi) (Quit: leaving)
[23:23:49] *** Joins: cosimone (~user@93-34-133-215.ip49.fastwebnet.it)
[23:24:02] *** Joins: frgo (~frgo@p200300deef0cee0080d96904929b238c.dip0.t-ipconnect.de)
[23:34:26] *** Quits: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:34:51] *** Quits: lad (~lad@user/lad) (Remote host closed the connection)
[23:45:55] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[23:50:57] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[23:54:22] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[23:54:31] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:56:36] *** Joins: Michal (~user@5.30.23.247)
[23:57:10] <Michal> Hi all
[23:57:52] <lisp123> Hi Michal, how are you?
[23:58:32] <Michal> I'm great
[23:58:49] <lisp123> Good stuff
