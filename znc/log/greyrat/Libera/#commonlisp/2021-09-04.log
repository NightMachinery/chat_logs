[00:05:52] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 252 seconds)
[00:07:38] *** Quits: rain3 (~rain3___@79.115.250.43) (Ping timeout: 256 seconds)
[00:07:50] *** Joins: VincentVega (~user@212.241.16.18)
[00:09:48] *** Quits: vats (~vats@180.149.226.8) (Read error: Connection reset by peer)
[00:10:00] *** Quits: attila_lendvai (~alendvai@217.65.127.197) (Read error: Connection reset by peer)
[00:10:30] *** Joins: attila_lendvai (~alendvai@217.65.127.197)
[00:12:28] *** Quits: fe[nl]ix (~quassel@2a01:4f8:200:2425::adda) (Ping timeout: 252 seconds)
[00:13:06] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Ping timeout: 276 seconds)
[00:13:38] *** Joins: fe[nl]ix (~quassel@2a01:4f8:200:2425::adda)
[00:13:38] *** ChanServ sets mode: +o fe[nl]ix
[00:14:34] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[00:21:40] *** Joins: karlosz (~karlosz@5.9.160.72)
[00:23:17] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[00:24:21] *** Quits: raeda_ (~raeda@72.49.219.33) (Quit: Leaving)
[00:25:32] *** Joins: raeda (~raeda@72.49.219.33)
[00:30:44] *** Quits: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:37:16] *** Joins: Oladon (~olad@98.43.81.226)
[00:38:05] *** Quits: fengshaun (~fengshaun@68.69.214.210) (Quit: bibi!)
[00:40:23] *** Joins: molson (~michael@2001-48F8-704A-CA1-0-0-75F-100B-static.midco.net)
[00:51:36] *** Joins: charles_ (~charles@cpe-76-186-124-165.tx.res.rr.com)
[00:54:10] *** Quits: charles__ (~charles@cpe-76-186-124-165.tx.res.rr.com) (Ping timeout: 240 seconds)
[00:57:47] *** Quits: karlosz (~karlosz@5.9.160.72) (Read error: Connection reset by peer)
[00:58:07] *** Joins: karlosz (~karlosz@5.9.160.72)
[00:59:34] *** Quits: VincentVega (~user@212.241.16.18) (Read error: Connection reset by peer)
[01:10:38] *** Joins: VincentVega (~user@212.241.16.18)
[01:11:08] *** Joins: lisp123 (~lisp123@45.86.202.65)
[01:17:12] *** Quits: molson (~michael@2001-48F8-704A-CA1-0-0-75F-100B-static.midco.net) (Ping timeout: 245 seconds)
[01:20:57] *** Joins: molson (~michael@2001-48F8-704A-CA1-0-0-75F-100B-static.midco.net)
[01:22:15] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[01:22:17] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[01:23:25] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[01:24:55] *** Lord_of_Life_ is now known as Lord_of_Life
[01:33:45] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[01:33:58] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[01:35:04] *** Joins: lad (~lad@user/lad)
[01:43:46] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 252 seconds)
[01:44:15] *** Quits: pve (~pve@188-67-201-194.bb.dnainternet.fi) (Quit: leaving)
[01:51:40] *** Quits: attila_lendvai (~alendvai@217.65.127.197) (Ping timeout: 240 seconds)
[02:01:08] *** Quits: karlosz (~karlosz@5.9.160.72) (Quit: karlosz)
[02:24:08] *** Quits: VincentVega (~user@212.241.16.18) (Remote host closed the connection)
[02:28:03] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[02:29:17] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 245 seconds)
[02:29:34] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[02:31:36] *** Quits: lisp123 (~lisp123@45.86.202.65) (Quit: Leaving...)
[02:35:35] *** Joins: djuber (~user@65.79.128.64)
[02:37:17] *** Joins: karlosz (~karlosz@5.9.160.72)
[02:42:06] *** Joins: Yehowshua (~Yehowshua@2601:c9:8000:14b8:5def:f6fe:d5ed:dbeb)
[02:43:02] <Yehowshua> I've got a list that looks like (list 'param1 1234 'param2 5678).
[02:43:08] <Yehowshua> I'd like to write this to a file
[02:43:18] <Yehowshua> and then read it back in to common lisp using load
[02:43:31] <Yehowshua> what is the best way to go about that?
[02:44:09] <lotuseater> hello Yehowshua
[02:44:10] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 240 seconds)
[02:44:56] <Yehowshua> hi
[02:45:23] <lotuseater> so it's '(param1 1234 'param2 5678)
[02:45:29] <lotuseater> ah no sry
[02:45:41] <lotuseater> '(param1 1234 param2 5678)
[02:45:45] <pjb> (let ((list '(param1 1234 'param2 5678))) (with-open-file (out "file.sexp" :direction :output :if-does-not-exist :create :if-exists :supersede) (prin1 list out)))
[02:45:45] <Yehowshua> yea
[02:45:48] <semz> Is there a reason it has to be load?
[02:46:00] <Yehowshua> not necessarily load I guess
[02:46:09] *** Quits: frgo (~frgo@p200300deef0cee00210c991e7a48e585.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:46:14] <Yehowshua> I'm trying to write a compiler though - so roundtripping is important
[02:46:22] <Yehowshua> whatever the best way to roundtrip is I guess
[02:46:23] <pjb> (with-open-file (inp "/tmp/file.sexp") (read inp)) #| --> (param1 1234 'param2 5678) |#
[02:46:26] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[02:46:30] <moon-child> with load the form will be evaluated, so you will need to wrap it with a quote.  If you just use read, you won't have to do that
[02:46:37] *** Joins: frgo (~frgo@p200300deef0cee00210c991e7a48e585.dip0.t-ipconnect.de)
[02:46:51] <Yehowshua> ah - gotcha
[02:46:58] <Yehowshua> and thx thanks pjb
[02:47:13] <moon-child> also be aware of security issues with read
[02:47:33] <Yehowshua> oh?
[02:47:41] <lotuseater> moon-child: you mean #. ?
[02:47:45] <moon-child> don't call READ on untrusted input
[02:47:50] <moon-child> lotuseater: yes
[02:48:05] <lotuseater> or/and setting *read-eval* to NIL
[02:48:21] <Yehowshua> ah
[02:49:14] <lotuseater> cause you can use it for readtime evaluation for example '(1 2 #.(+ 1 2))
[02:49:23] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[02:51:18] <lotuseater> and if you need some more of "howto" with a compiler, there's a section in the end of Paradigms of Artificial Intelligence Programming about how a possible Scheme compiler can be constructed (the section before with interpreting)
[02:52:03] <lotuseater> but okay I don't know if you wanna generate directly native code or from CL to another lang or elsewise
[02:52:25] <saturn2> READ also opens a DoS attack by interning millions of new symbols
[02:53:40] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[02:53:52] <pjb> You could sign your data, and validate the signature before loading or reading it with *read-eval* ;-)
[02:53:54] <lotuseater> hey Qwnavery :)
[02:54:08] <Qwnavery> lotuseater: helloo
[02:54:33] <pjb> #.(loop (gentemp)) ;-)
[02:54:43] <lotuseater> args
[02:55:06] <lotuseater> till your heap overflows
[02:55:22] <pjb> Perhaps there's a limit on the package size?
[02:55:28] <lotuseater> ahh
[02:55:38] <lotuseater> then #.(loop collect 1)
[02:56:40] *** Quits: karlosz (~karlosz@5.9.160.72) (Ping timeout: 240 seconds)
[02:56:48] <Qwnavery> also lotuseater I have a solid understanding of the concepts but I haven't been able to hold myself accountable and actually write the until loop. :(
[02:57:15] <lotuseater> Yehowshua: and WITH-OPEN-FILE is good, it manages your file stream gets closed nonetheless what happens
[02:57:27] <lotuseater> don't worry
[02:57:40] <lotuseater> good when the writing was not too bad
[02:58:08] <pjb> (setf (sexp-file-contents "/tmp/file.sexp") '(howdy doo dah 42)) (sexp-file-contents "/tmp/file.sexp") #| --> (howdy doo dah 42) ; t |#
[02:58:25] <pjb> com.informatimago.common-lisp.cesarum.file:sexp-file-contents
[02:58:55] <lotuseater> so tell us how to load this system
[03:00:25] *** Quits: Yehowshua (~Yehowshua@2601:c9:8000:14b8:5def:f6fe:d5ed:dbeb) (Ping timeout: 256 seconds)
[03:06:43] *** Quits: Skyfire (~pyon@user/pyon) (Quit: WeeChat 3.2)
[03:10:27] <pjb> lotuseater: cd ~/quicklisp/local-projects ; git clone http://github.com/informatimago/lisp com-informatimago ; (ql:quickload :com.informatimago.common-lisp)
[03:10:56] <lotuseater> ok
[03:13:53] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[03:26:14] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[03:37:48] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[04:18:02] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 245 seconds)
[04:30:03] *** Quits: lad (~lad@user/lad) (*.net *.split)
[04:30:03] *** Quits: charles_ (~charles@cpe-76-186-124-165.tx.res.rr.com) (*.net *.split)
[04:30:03] *** Quits: raeda (~raeda@72.49.219.33) (*.net *.split)
[04:30:03] *** Quits: john__ (~john@dynamic-095-118-088-074.95.118.pool.telefonica.de) (*.net *.split)
[04:30:03] *** Quits: random-nick (~random-ni@87.116.176.59) (*.net *.split)
[04:30:03] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (*.net *.split)
[04:30:03] *** Quits: montxero (~user@149.167.149.74) (*.net *.split)
[04:30:03] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (*.net *.split)
[04:30:03] *** Quits: andreyorst (~andreyors@2.92.126.234) (*.net *.split)
[04:30:03] *** Quits: mariari (~mariari@user/mariari) (*.net *.split)
[04:30:03] *** Quits: micro (~micro@user/micro) (*.net *.split)
[04:30:03] *** Quits: aeth (~aeth@user/aeth) (*.net *.split)
[04:30:03] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (*.net *.split)
[04:30:03] *** Quits: specbot (~specbot@common-lisp.net) (*.net *.split)
[04:30:04] *** Quits: Colleen (~fermion@supersolid.equilibrium.tymoon.eu) (*.net *.split)
[04:30:04] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (*.net *.split)
[04:30:04] *** Quits: Posterdati (~posterdat@host-82-49-175-12.retail.telecomitalia.it) (*.net *.split)
[04:30:06] *** Quits: minion (~minion@common-lisp.net) (Remote host closed the connection)
[04:30:10] *** Joins: micro (~micro@user/micro)
[04:30:16] *** Joins: montxero (~user@149.167.149.74)
[04:30:20] *** Joins: john__ (~john@dynamic-095-118-088-074.95.118.pool.telefonica.de)
[04:30:25] *** Joins: charles_ (~charles@cpe-76-186-124-165.tx.res.rr.com)
[04:30:25] *** Joins: mariari (~mariari@024-171-017-003.res.spectrum.com)
[04:30:40] *** Joins: andreyorst (~andreyors@2.92.126.234)
[04:30:43] *** Quits: mariari (~mariari@024-171-017-003.res.spectrum.com) (Changing host)
[04:30:43] *** Joins: mariari (~mariari@user/mariari)
[04:30:50] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[04:31:35] *** Joins: minion (~minion@common-lisp.net)
[04:31:39] *** Joins: specbot (~specbot@common-lisp.net)
[04:31:44] *** Joins: Colleen (~fermion@supersolid.equilibrium.tymoon.eu)
[04:31:48] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[04:31:51] *** Joins: raeda (~raeda@72.49.219.33)
[04:32:00] *** Joins: lad (~lad@user/lad)
[04:32:09] *** Joins: Posterdati (~posterdat@host-82-49-175-12.retail.telecomitalia.it)
[04:32:10] *** Joins: random-nick (~random-ni@87.116.165.220)
[04:32:16] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Read error: Connection reset by peer)
[04:32:33] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[04:33:40] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[04:35:16] *** Joins: aeth (~aeth@user/aeth)
[04:56:49] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 252 seconds)
[05:03:00] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[05:11:47] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[05:14:34] *** Joins: Yehowshua (~Yehowshua@2601:c9:8000:14b8:5def:f6fe:d5ed:dbeb)
[05:18:16] *** Quits: robin (~robin@user/terpri) (Ping timeout: 252 seconds)
[05:21:01] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[05:30:09] <Yehowshua> http://ix.io/3xSm
[05:30:25] <Yehowshua> when I write out the sexps, can I make param1 and param2 symbols?
[05:33:20] <moon-child> not sure what your question is.  param1 and param2 _are_ symbols
[05:34:57] <Yehowshua> oh
[05:36:42] <mfiano> This backquoting and unquoting is meaningless.
[05:40:01] *** Quits: Yehowshua (~Yehowshua@2601:c9:8000:14b8:5def:f6fe:d5ed:dbeb) (Quit: Client closed)
[05:42:55] *** Joins: Yehowshua (~Yehowshua@2601:c9:8000:14b8:5def:f6fe:d5ed:dbeb)
[05:44:20] *** Joins: Everything (~Everythin@37.115.210.35)
[05:46:43] *** Joins: Oladon (~olad@98.43.81.226)
[05:57:49] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[06:06:33] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[06:08:47] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[06:09:37] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 245 seconds)
[06:11:57] *** Joins: amk (~amk@109.255.169.126)
[06:30:07] *** Joins: robin (~robin@user/terpri)
[06:31:41] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[06:32:24] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Ping timeout: 256 seconds)
[06:32:27] *** Quits: conjunctive (sid433686@id-433686.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[06:33:27] *** Quits: pl (sid98063@id-98063.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[06:34:46] *** Joins: conjunctive (sid433686@id-433686.helmsley.irccloud.com)
[06:36:15] *** Joins: pl (sid98063@id-98063.helmsley.irccloud.com)
[06:36:15] *** ChanServ sets mode: +o pl
[06:44:08] <Yehowshua> can I tell sbcl where to load and asd package from directly?
[06:44:24] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[06:46:37] *** Joins: gaqwas (~john@dynamic-077-009-028-051.77.9.pool.telefonica.de)
[06:48:28] *** Quits: john__ (~john@dynamic-095-118-088-074.95.118.pool.telefonica.de) (Ping timeout: 252 seconds)
[07:13:52] *** Joins: wilfred (uid159@id-159.highgate.irccloud.com)
[07:29:14] *** Quits: montxero (~user@149.167.149.74) (Read error: Connection reset by peer)
[07:29:28] *** Joins: montxero (~user@149.167.149.74)
[07:30:43] *** Quits: Yehowshua (~Yehowshua@2601:c9:8000:14b8:5def:f6fe:d5ed:dbeb) (Ping timeout: 256 seconds)
[07:31:09] <beach> Good morning everyone!
[07:31:44] <Oladon> Good morning, beach!
[07:46:02] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[07:53:02] *** Quits: semz (~none@user/semz) (Ping timeout: 245 seconds)
[08:06:05] *** Joins: semz (~none@user/semz)
[08:24:11] *** Joins: notzmv (~zmv@user/notzmv)
[08:32:31] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[08:47:50] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 256 seconds)
[08:48:06] *** Joins: amb007 (~a_bakic@254.148.22.93.rev.sfr.net)
[08:55:14] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[09:20:42] *** Quits: gaqwas (~john@dynamic-077-009-028-051.77.9.pool.telefonica.de) (Ping timeout: 256 seconds)
[09:40:37] *** Quits: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au) (Ping timeout: 252 seconds)
[09:53:27] *** Quits: amb007 (~a_bakic@254.148.22.93.rev.sfr.net) (Ping timeout: 245 seconds)
[09:54:16] *** Joins: amb007 (~a_bakic@226.151.22.93.rev.sfr.net)
[10:03:02] <susam> Good morning, beach!
[10:11:06] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[10:13:54] *** Joins: hendursaga (~weechat@user/hendursaga)
[10:26:57] <beach> SICL FORMAT was the first module I implemented for the SICL project.  That module is now 13 years old, and it shows.  I think it would be a great project for someone to extract that module to a separate repository.  Its specificity would be that it is extensible.
[10:27:18] <beach> The module doesn't use conditions as much as it should so there is work to do too.
[10:32:42] <beach> And the code is not very modular in that there is essentially one big file containing most of the code.  I would rather see one file per directive, containing the directive interpreter and the directive compiler.
[10:34:40] <beach> And we would need to come up with the best way of making an "intrinsic" and an "extrinsic" ASDF system and package.  The former would be used when the module is meant to be the native FORMAT of an implementation, as it is in SICL.  The latter would be used in a system that already has FORMAT, for example to run tests.
[10:37:21] *** Quits: amb007 (~a_bakic@226.151.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[10:44:16] *** Joins: pve (~pve@37-136-150-194.rev.dnainternet.fi)
[10:45:14] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[10:45:22] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798)
[10:57:48] *** Joins: attila_lendvai (~alendvai@217.65.127.197)
[11:12:45] *** Joins: shka (~herr@109.231.62.239)
[11:35:00] *** Joins: icer (eric@gateway/vpn/protonvpn/icer)
[11:36:41] *** Joins: gaqwas (~john@dynamic-077-009-028-051.77.9.pool.telefonica.de)
[11:55:54] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[12:22:46] <pjb> beach: I don't know if minion worked, I've updated the links in the README.org.
[12:23:14] <beach> Oh, OK.  Thanks!
[12:23:22] <beach> I haven't seen anything from minion.
[12:23:48] <beach> Perfect!
[12:28:45] *** Quits: icer (eric@gateway/vpn/protonvpn/icer) (Quit: WeeChat 2.8)
[12:32:37] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:33:21] *** Joins: heisig (~heisig@p508b531b.dip0.t-ipconnect.de)
[12:36:48] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:40:36] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:53:07] *** Quits: santiagopim (~user@90.167.66.93) (Ping timeout: 252 seconds)
[13:05:22] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:05:59] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:10:43] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[13:17:45] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:27:22] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[13:31:09] *** Quits: heisig (~heisig@p508b531b.dip0.t-ipconnect.de) (Quit: Leaving)
[13:32:52] *** Joins: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it)
[13:53:28] *** Quits: wilfred (uid159@id-159.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[14:09:03] *** Joins: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de)
[14:35:12] *** Quits: attila_lendvai (~alendvai@217.65.127.197) (Ping timeout: 256 seconds)
[14:41:23] *** Joins: random-nick (~random-ni@87.116.165.220)
[14:46:02] *** Quits: frgo (~frgo@p200300deef0cee00210c991e7a48e585.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:46:30] *** Joins: frgo (~frgo@p200300deef0cee0061aa6d334b907ade.dip0.t-ipconnect.de)
[14:55:19] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.2)
[14:57:05] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[14:59:05] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:03:57] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[15:08:44] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[15:16:07] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[15:20:07] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 245 seconds)
[15:21:22] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 245 seconds)
[15:23:31] *** Quits: boeg (sid41541@id-41541.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[15:24:05] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[15:31:02] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[15:32:43] *** Joins: cosimone (~user@93-44-184-220.ip98.fastwebnet.it)
[15:33:16] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[15:41:38] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 250 seconds)
[15:42:18] *** Joins: amb007 (~a_bakic@194.151.22.93.rev.sfr.net)
[15:46:22] *** Quits: luna-is-here (~quassel@ip-95-223-58-39.hsi16.unitymediagroup.de) (Ping timeout: 252 seconds)
[15:46:29] *** Joins: luna-is-here_ (~quassel@2a02:908:f761:2a3c::a)
[15:47:56] <lukego> Hey how do I get Lisp/SBCL to preserve the case of non-latin letters like σ verses Σ in symbol names? I'm looking for the minimally intrusive way to keep the reader/printer doing its upcase'ery but excluding these characters e.g. so that α doesn't get confusingly upcased into A.
[15:50:14] <lukego> I suppose that I'd like the reader/printer to treat those characters as separate symbols rather than letter-pairs.
[15:54:33] <_death> (defun read-single-char-symbol (stream char) (declare (ignore stream)) (intern (string char)))
[15:57:55] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 252 seconds)
[16:02:26] <Krystof> my guess is that you probably don't want them to print as |α|
[16:02:43] <Krystof> in which case you might need to try readtable-case :invert
[16:02:47] <pjb> lukego: (setf (readtable-case *readtable*) :preserve) #| --> :PRESERVE |# (QUOTE Été-σ) #| --> Été-σ |#
[16:03:22] <lukego> That will affect latin characters too though, right? I don't want that
[16:03:25] <beach> lukego: In case you can influence which reader you have, Eclector can be easily programmed to handle such cases.
[16:03:37] <pjb> (string-upcase "
[16:04:33] <lukego> beach: the printer will have to play ball too right? I want to see α and not |α|
[16:04:35] <_death> could also set pprint dispatch for them
[16:05:28] <pjb> :preserve is nice.
[16:06:53] <lukego> I'll think about :preserve but I seem to remember that opening a can of worms each time I used it globally in the past.
[16:08:56] <hayley> I wonder what the printer does when downcasing a symbol name like ΠΑΤΆΤΕΣ...I suppose it would use the Unicode downcasing algorithm and correctly print the last σίγμα correctly, i.e. πατάτες.
[16:09:38] <hayley> (string-downcase 'ΠΑΤΆΤΕΣ) ; => "πατάτεσ" I think only the SB-UNICODE function does it correctly.
[16:10:10] <lukego> The trouble is that these are mathematical symbols for me and not in fact e.g. greek letters.
[16:10:39] <hayley> (That is not the printer, of course...but the printer does the same thing.)
[16:12:39] <hayley> Okay. I'll be honest, I'd feel a bit bothered if the printer did treat the characters in my first language as "symbols" and refused to up/downcase them. But I can see the use given how mathematicians can't find anything better to do than use random Greek letters.
[16:13:32] <lukego> I see that unicode has my back somewhat... there is a #\MICRO_SIGN that won't be unwantedly upcased the way #\GREEK_SMALL_LETTER_MU does... but no such counterparts to others like alpha and lambda
[16:14:27] <hayley> As revenge, we do have the Greek question mark which looks like a semicolon.
[16:15:31] <lukego> I wonder how unreasonable it would be to define new custom unicode non-letter characters for all the symbols and have the reader translate to them
[16:15:37] <hayley> On the other hand, "greek question mark prank" is the first thing DuckDuckGo suggests when you type "greek question mark". So, not that thrilling.
[16:18:18] <lukego> though also... if these will all be used in single-letter symbols in practice... maybe local reader/printer hacks would be fine.
[16:20:40] <lukego> I'm also feeling a little envy towards racket/clojure and their multiple parenthesis styles... would it be so bad to do (let ❨(x 1) (y 2)❩ ...) I wonder...
[16:26:35] *** Quits: cosimone (~user@93-44-184-220.ip98.fastwebnet.it) (Ping timeout: 252 seconds)
[16:35:49] *** Quits: ryanbw (~ryanbw@mab.sdf.org) (Ping timeout: 252 seconds)
[16:36:25] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[16:36:40] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[16:36:58] <_death> clhs s-s-f-c
[16:36:59] <specbot> set-syntax-from-char: http://www.lispworks.com/reference/HyperSpec/Body/f_set_sy.htm
[16:41:41] <_death> though CL lacks a read-delimited-form, so implementation can be more involved.. but maybe read-delimited-list will be "good enough"
[16:53:14] *** Joins: random-nick (~random-ni@87.116.180.105)
[17:01:02] <lukego> thanks, s-s-f-c is a pretty painless approach
[17:01:24] <lukego> The novelty will probably wear off quickly, but novelty is nice sometimes anyway.
[17:02:15] <lukego> er, no, wasn't sufficient to make the closing ) match in my case
[17:02:28] <lukego> but I have the source for the reader...
[17:03:04] <_death> you need to set up a reader macro for #\❨ that e.g., uses read-delimited-list
[17:06:57] <Shinmera> Anyone know of a pure SAT solver for lisp, preferably with XOR extension?
[17:07:14] <lukego> have to consider why #\( calls READ-LIST which is not just a wrapper to READ-DELIMITED-LIST though..
[17:07:24] <Shinmera> Or am I gonna have to write one myself, like it seems I always have to
[17:07:30] <_death> lukego: consider (a . b)
[17:08:13] <_death> Shinmera: do you mean that the solver has to be written in Lisp?
[17:08:19] <Shinmera> yes.
[17:08:21] <lukego> Shinmera: no, but fwiw CL-SMT-LIB works okay for me with Z3, I needed to make a couple of patches that may or may not have been merged
[17:08:22] <Shinmera> No C bindings.
[17:08:59] <lukego> (that's interfacing with an external process which might not be what you want, but to me was acceptable)
[17:09:08] <Shinmera> It is indeed not what I want :)
[17:09:17] <lukego> fun yak to shave, then :)
[17:09:37] *** Joins: cosimone (~user@93-44-184-220.ip98.fastwebnet.it)
[17:09:47] <Shinmera> Not for me, really.
[17:09:53] <beach> Shinmera: I believe my favorite coauthor uses one of those, but she is no longer on IRC.  You may want to send her an email.
[17:10:34] <Shinmera> beach: Will do if I don't find anything
[17:10:54] <Shinmera> Context is I'm building a build system with version constraint resolution.
[17:11:04] *** Quits: amb007 (~a_bakic@194.151.22.93.rev.sfr.net) (Ping timeout: 252 seconds)
[17:11:38] <lukego> _death: yeah likely the extensions for #\( aren't needed for the other parens, but guess have to look closely, e.g. because backquote needs to play nie
[17:11:54] *** Joins: amb007 (~a_bakic@92.134.22.93.rev.sfr.net)
[17:11:59] <hayley> Once I used programatically generated MEMBER types to do "theorem proving" with subtypep. I would not recommend that approach for a SMT solver, of course.
[17:12:16] <Shinmera> hayley: hah
[17:12:29] <_death> if the problems are small you can use screamer ;)
[17:12:47] <hayley> I also recall someone using a general SMT solver for dependency resolution and it was found to be pretty slow. But I forgot who unfortunately.
[17:13:23] <Shinmera> I'm going after what's described in the opium paper: https://cseweb.ucsd.edu/~lerner/papers/opium.pdf
[17:13:32] <Shinmera> Not sure what you're talking about.
[17:15:14] <Shinmera> I'm not yet set on using an SAT for the resolution though, which is why I'm a bit hesitant on diving into writing an SAT.
[17:15:26] *** Joins: yitzi_ (~yitzi@173-27-106-188.client.mchsi.com)
[17:15:35] <Shinmera> *an SAT solver
[17:15:42] <hayley> Hey, that's quite good. The blog post I read (which I think was from r/programming?) described taking minutes with something like Z3.
[17:16:01] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Ping timeout: 252 seconds)
[17:16:07] <Shinmera> There's also http://0install.net/solver.html#idp172528 which builds on Opium.
[17:16:50] <hayley> If you don't know, maybe it would be fine to prototype with an external solver?
[17:16:58] <Shinmera> Anyway, I've been trying to figure out a different solution myself for weeks now but with no success so far. I feel like I'm just too stupid to figure this particular problem out.
[17:17:21] <Shinmera> hayley: Probably what a smart person would do, yea
[17:18:35] <hayley> Shinmera: On the contrary, I'd do it because I'm too stupid to write a solver. And apparently there is a standard input language with S-expressions, which is supposed to magically make Lisp interoperability problems disappear.
[17:19:34] <hayley> (Maybe I'm too cynical in the last statement, but I did _not_ enjoy trying to read WASM text files, even though they are S-expressions on paper.)
[17:21:31] *** Joins: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au)
[17:21:32] *** Quits: yitzi_ (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[17:21:49] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[17:22:41] *** Quits: amb007 (~a_bakic@92.134.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[17:22:58] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[17:23:14] <hayley> Right, that language is called SMT-LIB. And now I realise that one is SAT and the other is SMT, and I don't know the difference.
[17:41:24] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Read error: Connection reset by peer)
[17:41:36] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[17:46:25] *** Quits: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b) (Quit: Leaving.)
[17:46:46] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[17:47:10] *** Joins: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b)
[17:58:05] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:58:47] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:05:23] <lukego> any idea why my unicode brackets hack is erroring on read? https://gist.github.com/lukego/5694399a0cf10aa1773b883d3924b9bd
[18:06:27] <_death> probably want to rebind open/close..
[18:06:56] <lukego> ?
[18:07:09] <_death> (mapc #'funcall (loop for x in '(a b c) collect (lambda () (print x))))
[18:07:37] <lukego> oh!
[18:07:54] <lukego> lexenv fail, thanks
[18:09:21] <lukego> thanks, that fixed it
[18:09:26] <_death> an easy way is to move the DO body into its own function
[18:09:54] <lukego> I made it a do (let ((open ...) .....
[18:09:56] <hayley> It's way more fun when you are starting threads in a LOOP.
[18:11:15] <lukego> Maybe now C-u M-( will have to insert ⟦⟧ instead of ()
[18:11:30] <_death> you probably also want to s-s-f-c #\(
[18:13:58] <lukego> oh, M-( already takes a numeric prefix and does something useful with it, didn't even know that..
[18:14:19] <lukego> _death: oh, yeah
[18:43:16] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[18:52:20] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[18:53:16] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[18:53:43] *** Joins: jans (~Thunderbi@193.138.218.212)
[18:59:58] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[19:02:06] <pjb> lukego: loop for can use a single binding of the variable, so all your closures use the same variable, and the same value.
[19:04:14] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[19:04:44] <lukego> yeah, obvious once pointed out. I'd actually introduced the "open" and "close" variables because I knew that i would be updated destructively, but I should have done that with LET instead of inside the FOR.
[19:05:48] <lukego> If it were elisp I might have been tempted to do some stylish programming like `(lambda (stream) (read-delimited-list ,close))
[19:13:10] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 240 seconds)
[19:13:52] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[19:19:27] <lukego> okay that was the easy part, now how the heck will I update this format string in PPRINT-LET to use those parens... "~:<~^~W~^ ~@_~:<~@{~:<~^~W~@{ ~_~W~}~:>~^ ~_~}~:>~1I~^~:@_~@{~W~^ ~_~}~:>"
[19:24:19] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[19:24:26] <lukego> [Narrator voice] By trial and error
[19:31:30] <lukego> okay now lisp is happy. emacs is inserting this kind of parent on C-M-( but for some weird reason refuses to forward-sexp over it even with seemingly reasonable syntax table updates. https://imgur.com/a/GXt3ScI
[19:37:19] *** Joins: makomo (~makomo@user/makomo)
[19:37:35] <jcowan> lotuseater: Hysterical raisins don't yell.  They bite.
[19:45:57] *** Joins: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.sdns.net.rogers.com)
[19:45:59] *** Joins: Skyfire (~pyon@user/pyon)
[19:52:22] <beach> What should (coerce #(a b c) '(cons integer)) do?
[20:10:34] *** Joins: Bike (~Bike@71.69.170.70)
[20:10:34] *** ChanServ sets mode: +o Bike
[20:13:07] <Bike> (cons integer) is a recognizable subtype of list, so it has to coerce to a list. however, the "arguments and values" section says the result is of the given type, which wouldn't be the case here, so i guess the behavior is undefined, unless you read "if a coercion is not possible" to include this situation, in which case it's a type error
[20:22:08] <beach> I think I'll vote for a type error.
[20:26:39] <Bike> coerce taking general type specifiers is weird in this respect. same as the lengths. it effectively means putting in an extra length check, which seems a little orthogonal to the general purpose of the function
[20:30:16] *** Quits: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.sdns.net.rogers.com) (Quit: ERC (IRC client for Emacs 27.2))
[20:31:09] <beach> It's a strange function, yes.
[20:32:49] <beach> Right, I can't imagine a situation where the type would include the length of the vector and a sequence was given that was not the right length.
[21:00:10] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 240 seconds)
[21:00:49] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[21:07:47] <lotuseater> jcowan: good to know
[21:18:01] *** Quits: jans (~Thunderbi@193.138.218.212) (Ping timeout: 252 seconds)
[21:18:06] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[21:32:00] <lukego> ... Just thinking, for my unicode upcase/downcase issue, it's probably only really the greek alphabet that's relevant. all the other weirdo symbols won't be marked as alphabetic with upcase/downcase.
[21:34:54] *** Joins: attila_lendvai (~alendvai@217.65.127.197)
[21:51:55] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[22:03:40] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 252 seconds)
[22:06:25] *** Quits: charles_ (~charles@cpe-76-186-124-165.tx.res.rr.com) (Ping timeout: 252 seconds)
[22:11:26] *** Joins: Bike (~Bike@71.69.170.70)
[22:11:26] *** ChanServ sets mode: +o Bike
[22:13:43] *** Quits: cosimone (~user@93-44-184-220.ip98.fastwebnet.it) (Remote host closed the connection)
[22:14:33] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[22:14:34] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[22:15:35] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[22:18:02] *** Joins: khrbt (~znc@user/khrbt)
[22:36:43] *** Joins: Lycurgus (~juan@98.4.112.204)
[22:41:41] *** Joins: ryanbw (~ryanbw@mab.sdf.org)
[22:42:23] *** Joins: Guest82 (~Guest82@72.64.1.179)
[22:42:59] *** Joins: akoana (~ah@user/akoana)
[22:45:03] <Guest82> Good afternoon lispers.  Question: I wrote a readtable processor to parse `#"xyz"` content and pass create a cl-ppcre scanner for it.  Scanners are functions. The problem is that compile-file refuses to emit the resulting cl-ppcre scanner function to fasl files.  I could use some hints as to the best workaround for this.
[22:46:15] <Bike> you could do what cl-ppcre itself does and use load-time-value
[22:46:58] <Bike> https://github.com/edicl/cl-ppcre/blob/master/api.lisp#L285-L292
[22:48:29] <Guest82> Thanks, will take a look.
[22:51:12] <random-nick> I think you could also wrap it with a class and then specialise MAKE-LOAD-FORM
[22:52:35] *** Joins: charles_ (~charles@cpe-76-186-124-165.tx.res.rr.com)
[22:59:37] *** Quits: attila_lendvai (~alendvai@217.65.127.197) (Read error: Connection reset by peer)
[23:01:14] *** Joins: attila_lendvai (~alendvai@217.65.127.197)
[23:06:10] *** Quits: attila_lendvai (~alendvai@217.65.127.197) (Ping timeout: 240 seconds)
[23:11:05] *** Joins: VincentVega (~user@212.241.16.18)
[23:19:43] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[23:22:13] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Read error: Connection reset by peer)
[23:25:31] <Guest82> Thanks again, load-time-value seems to be doing the job.
[23:44:29] <lukego> Controversial opinion: readtable-case and print-case should only apply to iso8559-1 characters, leaving other characters e.g. greek letters available as case-sensitive without needing to be |escaped|
[23:50:38] *** Quits: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:52:42] *** Joins: lisp123 (~lisp123@45.86.202.23)
[23:53:28] <pjb> lukego: I would agree.
[23:54:07] <lisp123> lukego: Hey how do I get Lisp/SBCL to preserve the case of non-latin letters like σ verses Σ in symbol names? I'm looking for the minimally intrusive way to keep the reader/printer doing its upcase'ery but excluding these characters e.g. so that α doesn't get confusingly upcased into A.
[23:54:29] <lisp123> Can you expand on this? I am not having any issues with uppercase on that I think
[23:54:54] <pjb> lukego: but even with iso-8859-1 (and 15?) you have the problem of ß
[23:55:23] <pjb> (string-upcase "ß") --> "SS"  (string-downcase "SS") -> "ß" only when "ss" depending on the word.
[23:56:10] <lisp123> Oh wait, I see what you mean
[23:56:22] <pjb> lisp123: it's implementation dependent.
[23:56:49] <lukego> lisp123: well, in numeric code I'm seeing variable names like SIGMA and RHO. I'd prefer to write σ and ρ. But it will be very confusing if these are printed back in the REPL as uppercased to Σ and Ρ.
[23:57:11] <pjb> lukego: one alternatiev is to use pretty-greek.
[23:57:31] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[23:57:54] <pjb> lukego: https://github.com/informatimago/emacs/blob/098bbc753abb71c8f2af5d3735f128a2309c38f1/pjb-sources.el#L738
[23:58:24] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[23:59:06] <lukego> pjb: true. I've done that kind of thing in the past. I'd quite like to try tasting liberation of having it directly in the Lisp image though. I've been reading Julia code lately and it's full of these symbols and I want to try that out in my Lisp code, even if it might turn out to be a bad idea.
[23:59:47] <pjb> Well, Finally on June 29 2017, the Council for German Orthography, the country’s official spelling authority, decreed that ß deserved its own capital: ẞ.
