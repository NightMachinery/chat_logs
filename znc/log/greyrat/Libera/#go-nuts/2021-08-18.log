[00:01:40] *** Joins: motheki (~motheki@8.20.123.97)
[00:07:17] *** Quits: motheki (~motheki@8.20.123.97) (Quit: motheki)
[00:08:31] *** Joins: motheki (~motheki@8.20.123.97)
[00:10:16] *** Quits: motheki (~motheki@8.20.123.97) (Client Quit)
[00:11:07] *** Joins: motheki (~motheki@8.20.123.97)
[00:12:37] *** Quits: motheki (~motheki@8.20.123.97) (Client Quit)
[00:12:52] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:15:24] *** Joins: motheki (~motheki@8.20.123.97)
[00:20:49] *** Joins: hikhvar796073809 (~thelounge@x4dbe166b.dyn.telefonica.de)
[00:21:08] *** Quits: neurocyte8 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[00:21:32] *** Joins: neurocyte8 (~neurocyte@user/neurocyte)
[00:32:43] *** Quits: burningserenity_ (~burningse@142-196-178-216.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[00:41:21] *** Joins: nmollerup (~nmollerup@2a00:7660:1612:168:e04a:cf5c:75dd:50bd)
[00:46:58] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[00:47:37] *** Quits: mei (~mei@user/mei) (Ping timeout: 248 seconds)
[00:48:38] *** Quits: jinie (~jimmy@188.114.173.37) (Remote host closed the connection)
[00:50:34] *** Joins: jinie (~jimmy@188.114.173.37)
[00:51:02] *** Quits: fhs_ (~fhs@pool-74-101-98-114.nycmny.fios.verizon.net) (Ping timeout: 272 seconds)
[00:51:44] *** Quits: neurocyte8 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[00:59:08] *** Joins: fhs (~fhs@pool-74-101-98-114.nycmny.fios.verizon.net)
[01:01:49] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[01:06:40] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 240 seconds)
[01:11:22] *** Quits: hikhvar796073809 (~thelounge@x4dbe166b.dyn.telefonica.de) (Quit: The Lounge - https://thelounge.chat)
[01:13:53] *** Joins: oxum (~oxum@122.172.205.112)
[01:16:51] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[01:18:10] *** Quits: oxum (~oxum@122.172.205.112) (Ping timeout: 240 seconds)
[01:20:08] *** Quits: motheki (~motheki@8.20.123.97) (Quit: motheki)
[01:22:07] *** Joins: motheki (~motheki@8.20.123.97)
[01:22:39] *** Quits: motheki (~motheki@8.20.123.97) (Client Quit)
[01:24:42] *** Quits: fhs (~fhs@pool-74-101-98-114.nycmny.fios.verizon.net) (Quit: ZNC 1.8.2 - https://znc.in)
[01:27:02] *** Joins: fhs (~fhs@pool-74-101-98-114.nycmny.fios.verizon.net)
[01:29:17] *** Joins: nikz (uid513213@id-513213.brockwell.irccloud.com)
[01:29:56] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[01:30:03] *** Quits: fhs (~fhs@pool-74-101-98-114.nycmny.fios.verizon.net) (Client Quit)
[01:31:21] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 248 seconds)
[01:34:37] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[01:36:06] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Quit: WeeChat 3.2)
[01:36:21] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[01:36:25] *** Joins: fhs (~fhs@pool-74-101-98-114.nycmny.fios.verizon.net)
[01:36:43] *** Joins: fikran (~fikran@user/fikran)
[01:40:52] *** Quits: revolve (~u0_a227@82-132-247-141.dab.02.net) (Ping timeout: 245 seconds)
[01:42:51] *** Quits: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[01:46:58] *** Quits: fhs (~fhs@pool-74-101-98-114.nycmny.fios.verizon.net) (Quit: ZNC 1.8.2 - https://znc.in)
[01:49:19] *** Joins: fhs (~fhs@pool-74-101-98-114.nycmny.fios.verizon.net)
[01:52:09] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 248 seconds)
[01:53:18] *** Quits: fhs (~fhs@pool-74-101-98-114.nycmny.fios.verizon.net) (Client Quit)
[01:57:33] *** Quits: enkeyz (~enkeyz@user/enkeyz) (Quit: WeeChat 3.2)
[01:59:40] *** Joins: fhs (~fhs@pool-74-101-98-114.nycmny.fios.verizon.net)
[02:00:26] *** Joins: enkeyz (~enkeyz@user/enkeyz)
[02:04:52] *** Joins: revolve (~u0_a227@82-132-247-141.dab.02.net)
[02:06:04] *** Quits: independent56 (~independe@185.50.0.80) (Ping timeout: 258 seconds)
[02:12:06] <dostoyevsky2> https://gist.github.com/Grrrben/96f833648bd8371408dfa3f6641bb7da <- I found an example using rsa's SignPKCS1v15/VerifyPKCS1v15 -- but it doesn't include an implementation for getHashSum(msg) ...  I wonder what a possible implementation would look like
[02:13:55] <Tv_> this is your gentle hit to not implement RSA in 2021...
[02:14:40] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 240 seconds)
[02:14:53] <Tv_> also that code sure looks buggy
[02:15:21] <dostoyevsky2> I found another gist that actually works: https://gist.github.com/hansstimer/3517906
[02:15:52] *** Quits: fhs (~fhs@pool-74-101-98-114.nycmny.fios.verizon.net) (Quit: ZNC 1.8.2 - https://znc.in)
[02:16:11] *** Joins: fhs (~fhs@pool-74-101-98-114.nycmny.fios.verizon.net)
[02:16:49] <dostoyevsky2> Should I use another algorithm for signing/verifying instead of rsa?
[02:17:32] <Tv_> okay now you're making me think you shouldn't be writing any of this stuff. you can probably find a pre-existing signature thing for your needs.
[02:17:50] <dostoyevsky2> ah... there is something pre-existing?
[02:18:19] <dostoyevsky2> I just want to sign a message with my private key and then verify it on the other side with the public key
[02:19:18] <Tv_> https://man.openbsd.org/signify.1 or https://pkg.go.dev/crypto/ed25519
[02:20:03] <Tv_> but really, the first 100 times you write crypto things you'll very definitely get something wrong
[02:20:29] <Tv_> and that's if you're a quick learner. "get something wrong for the rest of your life" is well within expectations, too.
[02:23:02] <dostoyevsky2> I've been using openbsd for 20 years, if that helps... also implemented custom kernel security stuff on openbsd for customers..  I guess I can give it a try
[02:23:47] <dostoyevsky2> In any way, none of the public key algorithms I have available seem to be quantum-safe...  so
[02:24:14] <foobaz> ed25519 is elliptic curve
[02:25:25] <dostoyevsky2> anything lattice-based?
[02:34:27] *** Joins: quippy (~quippy@47-220-146-143.gtwncmkt04.res.dyn.suddenlink.net)
[02:36:17] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 245 seconds)
[02:39:26] *** Quits: revolve (~u0_a227@82-132-247-141.dab.02.net) (Read error: Connection reset by peer)
[02:40:22] *** Quits: kupi (uid212005@id-212005.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[02:42:26] *** Quits: jjakob (~quassel@2a01:260:8028:10f0::62) (Quit: Either rebooting or something broke.)
[02:48:41] *** Quits: jinie (~jimmy@188.114.173.37) (Remote host closed the connection)
[02:49:56] *** Quits: dalan6 (~dalan@14-203-203-26.tpgi.com.au) (Quit: dalan6)
[02:50:22] *** Joins: dalan62 (~dalan@14-203-203-26.tpgi.com.au)
[02:50:32] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[02:50:38] *** Joins: jinie (~jimmy@188.114.173.37)
[02:50:52] *** Quits: src (~src@user/src) (Ping timeout: 245 seconds)
[02:50:56] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Client Quit)
[02:52:00] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[02:52:45] *** Joins: aead (~aead@pool-96-232-187-142.nycmny.fios.verizon.net)
[02:53:10] *** Quits: aeadio (~aead@ec2-52-2-178-231.compute-1.amazonaws.com) (Ping timeout: 240 seconds)
[02:54:41] <b0nn> dostoyevsky2: https://hacker-news.news/post/21536168
[02:54:50] <b0nn> Assuming you hadn't found it yourself already
[02:55:10] *** Joins: aeadio (~aead@ec2-52-2-178-231.compute-1.amazonaws.com)
[02:55:12] *** Quits: nmollerup (~nmollerup@2a00:7660:1612:168:e04a:cf5c:75dd:50bd) (Quit: Leaving)
[02:57:10] *** Quits: aead (~aead@pool-96-232-187-142.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[03:00:28] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.2)
[03:06:40] *** Quits: normen (~normen@p200300d7173dc90031969e32a3f9bba0.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[03:07:58] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[03:10:31] <Tv_> that's homomorphic crypto, lmao if you use that to construct a two-party signature system
[03:12:52] <dostoyevsky2> Does go have a satsolver?  Like http://www.cprover.org/cbmc/ for c?
[03:13:47] <dostoyevsky2> https://www.cs.uaf.edu/2017/fall/cs493/lecture/09_26_cbmc_decrypt.html
[03:15:29] *** Joins: grayhemp (~grayhemp@108-75-133-119.lightspeed.sndgca.sbcglobal.net)
[03:20:55] <dostoyevsky2> You'd just need something that transforms a go ast into a CNF format and from there one can use state of the art satsolvers like: https://github.com/msoos/cryptominisat/ (that's how cbmc is designed too)
[03:25:27] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[03:26:17] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 245 seconds)
[03:26:28] *** Joins: flynn (~mcbloch@user/flynn)
[03:27:54] <dostoyevsky2> https://pkg.go.dev/suah.dev/protect - pledge/unveil support for openbsd -- neat
[03:31:34] *** Quits: enkeyz (~enkeyz@user/enkeyz) (Quit: WeeChat 3.2)
[03:33:14] *** Quits: jsrnop1 (~mark@user/jsrnop) (Quit: The Lounge - https://thelounge.chat)
[03:33:22] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[03:33:38] *** Joins: jsrnop1 (~mark@user/jsrnop)
[03:35:05] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Ping timeout: 248 seconds)
[03:35:55] *** Joins: Guest84 (~Guest84@2406:3003:2006:447e:a859:4a56:2629:b84e)
[03:37:49] *** Quits: codebam (~codebam@user/codebam) (Remote host closed the connection)
[03:42:41] *** Joins: normen (~normen@p54b3452e.dip0.t-ipconnect.de)
[03:44:27] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[03:44:35] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[03:46:02] *** Joins: fikran (~fikran@user/fikran)
[03:52:05] *** Joins: burningserenity (~burningse@2603-9001-0f01-ad99-0000-0000-0000-1008.inf6.spectrum.com)
[03:52:15] *** Quits: normen (~normen@p54b3452e.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[03:57:14] *** Joins: codebam (~codebam@user/codebam)
[04:03:25] *** Joins: revolve (~u0_a227@82-132-247-141.dab.02.net)
[04:04:54] *** Quits: quippy (~quippy@47-220-146-143.gtwncmkt04.res.dyn.suddenlink.net) (Quit: Leaving)
[04:07:15] *** Quits: aeadio (~aead@ec2-52-2-178-231.compute-1.amazonaws.com) (Quit: aeadio)
[04:13:49] *** Joins: burningserenity_ (~burningse@142-196-178-216.res.spectrum.com)
[04:26:24] *** Joins: normen (~normen@p200300d7173dc90039937cbb8ed9b05c.dip0.t-ipconnect.de)
[04:30:40] *** Quits: normen (~normen@p200300d7173dc90039937cbb8ed9b05c.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[04:31:23] *** Joins: furincleavagesit (~textual@45.144.113.151)
[04:38:21] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[04:40:48] *** Quits: Guest84 (~Guest84@2406:3003:2006:447e:a859:4a56:2629:b84e) (Quit: Client closed)
[04:45:44] *** Quits: darkapex (~darkapex@user/darkapex) (Read error: Connection reset by peer)
[04:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:46:11] *** Joins: darkapex (~darkapex@user/darkapex)
[04:47:35] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:48:36] *** Quits: jinie (~jimmy@188.114.173.37) (Remote host closed the connection)
[04:50:12] *** Joins: jinie (~jimmy@188.114.173.37)
[05:03:03] *** Quits: burningserenity_ (~burningse@142-196-178-216.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[05:03:07] *** Quits: burningserenity (~burningse@2603-9001-0f01-ad99-0000-0000-0000-1008.inf6.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[05:03:30] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1008)
[05:15:20] *** Joins: normen (~normen@p200300d7173dc90039937cbb8ed9b05c.dip0.t-ipconnect.de)
[05:19:37] *** Quits: normen (~normen@p200300d7173dc90039937cbb8ed9b05c.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[05:22:54] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:24:29] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[05:28:22] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[05:32:14] *** Joins: aead (~aead@pool-96-232-187-142.nycmny.fios.verizon.net)
[05:32:19] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[05:35:48] *** Joins: freakazoid333 (~matt@2603:9000:cf0f:80e3:30b0:cf2a:af63:1f3a)
[05:36:00] *** Joins: aeadio (~aead@pool-96-232-187-142.nycmny.fios.verizon.net)
[05:36:09] *** Quits: aead (~aead@pool-96-232-187-142.nycmny.fios.verizon.net) (Client Quit)
[05:36:12] *** aeadio is now known as aead
[05:37:37] *** Quits: freakazoid343 (~matt@2603-9000-cf0f-80e3-59c0-909a-8de4-2805.inf6.spectrum.com) (Ping timeout: 245 seconds)
[05:57:59] *** Quits: aead (~aead@pool-96-232-187-142.nycmny.fios.verizon.net) (Quit: aead)
[05:58:40] *** Quits: revolve (~u0_a227@82-132-247-141.dab.02.net) (Ping timeout: 240 seconds)
[05:58:47] *** Joins: aead (~aead@pool-96-232-187-142.nycmny.fios.verizon.net)
[06:01:46] *** Joins: revolve (~u0_a227@82-132-245-40.dab.02.net)
[06:10:40] *** Quits: kiril (~kiril@85.91.153.163) (Quit: ZNC - https://znc.in)
[06:10:52] *** Joins: kiril (~kiril@85.91.153.163)
[06:12:55] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Quit: Textual IRC Client: www.textualapp.com)
[06:25:50] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1008) (Quit: ZNC 1.8.2 - https://znc.in)
[06:25:58] *** Joins: califax- (~califax@user/califx)
[06:28:44] *** Quits: califax (~califax@user/califx) (Ping timeout: 244 seconds)
[06:28:45] *** califax- is now known as califax
[06:40:10] *** Quits: Kane (~Kane@portal.yarg.fr) (Ping timeout: 240 seconds)
[06:40:51] *** Joins: adlternative (~adl@117.32.216.79)
[06:41:13] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 248 seconds)
[06:41:23] *** Joins: arcatech (~arcatech@user/arcatech)
[06:42:55] *** Joins: Kane (~Kane@portal.yarg.fr)
[06:43:53] *** Quits: codebam (~codebam@user/codebam) (Remote host closed the connection)
[06:48:40] *** Quits: jinie (~jimmy@188.114.173.37) (Remote host closed the connection)
[06:50:16] *** Joins: jinie (~jimmy@188.114.173.37)
[06:58:21] *** Quits: omegatron (~some@p54849842.dip0.t-ipconnect.de) (Quit: What happened? You quit!)
[06:58:45] *** Joins: Guest90 (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net)
[07:02:57] *** Quits: Guest90 (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net) (Ping timeout: 245 seconds)
[07:17:23] *** Joins: normen (~normen@p200300d7173dc90039937cbb8ed9b05c.dip0.t-ipconnect.de)
[07:39:46] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:43:16] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[07:49:40] *** Quits: normen (~normen@p200300d7173dc90039937cbb8ed9b05c.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[07:50:21] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[07:52:32] *** Joins: c10l (~c10l@89.34.167.207)
[07:53:34] *** Quits: c10l (~c10l@89.34.167.207) (Client Quit)
[08:02:31] *** Quits: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net) (Read error: Connection reset by peer)
[08:17:04] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[08:17:20] *** Joins: califax (~califax@user/califx)
[08:19:43] *** Joins: normen (~normen@p200300d7173dc90039937cbb8ed9b05c.dip0.t-ipconnect.de)
[08:25:52] *** Quits: normen (~normen@p200300d7173dc90039937cbb8ed9b05c.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[08:26:30] *** Quits: grayhemp (~grayhemp@108-75-133-119.lightspeed.sndgca.sbcglobal.net) (Quit: Connection closed)
[08:32:52] *** Joins: mei (~mei@user/mei)
[08:34:56] *** Quits: lungaro (~lungaro@99-117-118-33.lightspeed.sndgca.sbcglobal.net) (Remote host closed the connection)
[08:46:48] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:48:07] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[08:49:05] *** Quits: jinie (~jimmy@188.114.173.37) (Remote host closed the connection)
[08:50:18] *** Joins: jinie (~jimmy@188.114.173.37)
[09:03:25] *** Quits: furincleavagesit (~textual@45.144.113.151) (Remote host closed the connection)
[09:03:50] *** Joins: normen (~normen@p200300d7173dc90039937cbb8ed9b05c.dip0.t-ipconnect.de)
[09:06:47] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[09:07:07] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Remote host closed the connection)
[09:07:29] *** Joins: oxum (~oxum@122.172.205.112)
[09:07:35] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[09:10:56] *** Quits: ninjin (~ninjin@user/ninjin) (Remote host closed the connection)
[09:11:41] *** Joins: ninjin (~ninjin@user/ninjin)
[09:12:09] *** Quits: oxum (~oxum@122.172.205.112) (Ping timeout: 248 seconds)
[09:16:52] *** Joins: jpw (~jpw@user/jpw)
[09:26:25] *** Joins: oxum (~oxum@122.172.205.112)
[09:33:22] *** Quits: normen (~normen@p200300d7173dc90039937cbb8ed9b05c.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[09:35:10] *** Quits: oxum (~oxum@122.172.205.112) (Ping timeout: 240 seconds)
[09:40:03] *** Quits: zwr (~zwr@2804:d45:b966:fb00:caf0:5290:28da:8071) (Remote host closed the connection)
[09:42:14] <dngray[m]> so i'm doing some templating, and i am deciding not to print a value if it's not set
[09:42:15] <dngray[m]> normally i'd do something like if $value = ""
[09:42:39] <dngray[m]> but i am thinking in this case that the "correct" way might be something like {{- if eq (kindIs "invalid" .value) false }}
[09:43:17] <dngray[m]> i guess if a value isn't set it is null? and that would mean kindIs "invalid" would be better than checking to see if it equals ""
[09:44:09] <A_Dragon> perhaps a function to do this for you that returns a string or an empty string may be clearer?
[09:44:11] <dngray[m]> or are they the same thing?
[09:44:12] <dngray[m]> what I am doing is iterating through a bunch of json objects. some keys are set for some of the objects but not for all of them
[09:44:37] <A_Dragon> that sounds like something you definitely will want to rather do with code instead of a template
[09:44:52] <snappy> We're stumped at a problem using goroutines. https://play.golang.org/p/sKaPFFK3XdF <- why is the in loop printing id:0 everytime
[09:45:05] <A_Dragon> build a slice of structs of what you want, filtered as you need, and then template your data
[09:45:12] <A_Dragon> far easier than trying to process data in a template
[09:45:15] <dngray[m]> A_Dragon: yeah in this case no, because it's a chezmoi template
[09:45:28] <dngray[m]> so i don't actually have access to writing actual go code.
[09:45:45] <A_Dragon> Ah. Welp.
[09:45:52] <A_Dragon> snappy: one moment
[09:45:58] <dngray[m]> can i use functions within templates?
[09:46:09] <A_Dragon> only ones provided by the calling go code
[09:46:27] <dngray[m]> A_Dragon: but yes generally i would agree, doing the code before going to template does make more sense normally
[09:46:38] <A_Dragon> dngray[m]: can you filter before it gets there?
[09:47:06] <A_Dragon> snappy: are you sure t you're not accidentally shadowing somewhere in a loop?
[09:47:07] <dngray[m]> no, because chezmoi apply - https://www.chezmoi.io/ is what is running the template
[09:47:13] <dngray[m]> chezmoi is statically linked, and includes sprig
[09:47:13] <A_Dragon> because this pritns the right id for me each time
[09:47:18] <A_Dragon> or "a correct id"
[09:47:29] <snappy> definitely not shadowing, the code is relatively simple
[09:47:30] <dngray[m]> so i would have to call something externally, and that kinda defeats the purpose
[09:47:49] <A_Dragon> snappy: I see this, I do not, however, see the issue you've described
[09:48:12] <A_Dragon> dngray[m]: is `kindIs` provided by chezmoi? Ive not used it before
[09:48:21] <dngray[m]> yes it is
[09:48:27] <A_Dragon> sounds reflecty.
[09:48:30] <dngray[m]> it's provided by sprig, which is a chezmoi dep
[09:48:33] <snappy> A_Dragon: before loop print statements are correct, but the in loop print statements show fixed id:0 start:0 and end:10000 (different to the before loop print)
[09:48:37] <A_Dragon> but yeah thats probably your best option
[09:48:52] <dngray[m]> > chezmoi uses the text/template syntax from Go extended with text template functions from sprig.
[09:48:58] <A_Dragon> snappy: oh sorry I missed that
[09:49:11] <A_Dragon> dngray[m]: yes it would pass additional available functions
[09:49:54] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Remote host closed the connection)
[09:50:19] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[09:50:37] <dngray[m]> A_Dragon: what i was doing was code like this https://clbin.com/1drM6
[09:53:17] <dngray[m]> the json object looks like this https://clbin.com/9lOMw
[09:53:39] <A_Dragon> snappy: I think
[09:53:46] <A_Dragon> that your other IDs just arent running
[09:53:51] <dngray[m]> (assume there is more than just an ircServers object, and more than one server)
[09:53:59] <dngray[m]> otherwise it obviously wouldn't be formatted like that
[09:54:15] <A_Dragon> snappy: yeah
[09:54:28] <dngray[m]> would: {{ range (index .weechat 0).ircServers }} be the correct way to iterate?
[09:54:29] <snappy>  Oh I see, so the other goroutines aren't running.
[09:54:39] <A_Dragon> snappy: they're running
[09:54:40] <dngray[m]> it does work, but, i'm not sure that i need index or 0
[09:54:45] <A_Dragon> the loops just being skipped.
[09:54:55] <A_Dragon> see https://play.golang.org/p/3GAwIxwq7yp
[09:54:59] <dngray[m]> i think i might when it is iterating a []
[09:55:20] <A_Dragon> dngray[m]: sorry gimme a min to reread this, bit sleepy :D
[09:55:28] <dngray[m]> 😀 that's okay
[09:56:04] <dngray[m]> i'm still getting used to the index 0 thing
[09:56:05] <A_Dragon> range (index .weechat 0).ircServers should work howeeeever
[09:56:12] <A_Dragon> thats gonna be funky
[09:56:22] <A_Dragon> depending on what *exactly* . is
[09:56:32] <dngray[m]> right.
[09:56:34] <A_Dragon> because .weechat in normal templates goes bang
[09:56:39] <A_Dragon> as does .ircServers
[09:56:43] <A_Dragon> because neither are public
[09:56:49] <dngray[m]> right
[09:56:56] <A_Dragon> oh wait this will be a map
[09:57:02] <dngray[m]> yeah it is a map
[09:57:03] <A_Dragon> which then should work with dots, one moment
[09:57:17] <dngray[m]> any json object that is [] is a map
[09:57:18] <dngray[m]> i think
[09:57:31] <A_Dragon> {}
[09:57:39] <A_Dragon> [] is a list which in go becomes a slice
[09:57:55] <A_Dragon> {} is in json nomenclature an object which becomes a map in go
[09:58:01] <dngray[m]> right
[09:58:04] <snappy> A_Dragon: thanks, that added a wohle lot of clarity
[09:58:04] <A_Dragon> (or a struct, but lets not go down there)
[09:58:13] <dngray[m]> i am trying to un-python myself which i was used to lists and dicts 😀
[09:58:14] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[09:58:16] <A_Dragon> snappy: bit too half asleep to tell you WHY its not looping
[09:58:28] <A_Dragon> dngray[m]: oh well in that case maps are dicts, slices are lists
[09:58:35] <A_Dragon> mostly the same semantics
[09:58:35] <dngray[m]> yeah
[09:59:32] <A_Dragon> so you want... `range ((index .weechat 0).ircServers)` yes, I think
[09:59:41] <A_Dragon> that shooould work, one moment and Ill have a test
[09:59:46] <dngray[m]> 😀 map[addresses:libera75j....
[10:00:18] <dngray[m]> so can you tell me what the 0 is?
[10:00:40] <dngray[m]> is that initialising the iterator?
[10:00:54] <dngray[m]> kinda been struggling with index, understanding
[10:01:05] <A_Dragon> index just indexes a list
[10:01:31] <A_Dragon> so `.index .weechat 0` is exactly equivalent to weechat[0]
[10:01:41] <A_Dragon> so in your example code
[10:01:45] <dngray[m]> that number though 0 is that telling it where to start the iterator? ie "for i = 0; i++;"
[10:02:00] <A_Dragon> nope you've missed a step, one moment
[10:02:46] <A_Dragon> in your example json, the outermost thing is a dict, with one key: `weechat`, the key has a value that is a list, which itself contains a dict with one key, called ircServers, which has a value of a list of more dicts
[10:03:21] <dngray[m]> right
[10:03:40] <A_Dragon> so its a Dict[Literal['weechat'], List[Dict[Literal['ircServers'], ...]]
[10:03:43] <dngray[m]> oh so the 0 refers to the first list ircServers
[10:03:46] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:03:54] <A_Dragon> one higher
[10:04:09] <A_Dragon> it refers to the first entry in the list under the key weechat
[10:04:18] <dngray[m]> oh.
[10:04:19] <dngray[m]> ls
[10:04:48] <dngray[m]> yeah that makes sense actually
[10:04:49] <A_Dragon> https://pkg.go.dev/text/template here are the docs for template itself
[10:04:57] <A_Dragon> just for background if you need it
[10:05:01] <dngray[m]> yeah i've been reading that
[10:05:16] <A_Dragon> but yeah its equiv to mydict['weechat'][0]['ircServers']
[10:05:50] <dngray[m]> right
[10:06:06] <dngray[m]> so is doing this actually correct? `{{ (index .weechat 0).ircServers }}`
[10:06:15] <dngray[m]> it works, but i am kinda copying something i saw somewhere
[10:06:35] <dngray[m]> and i don't want to be uh, miss-using that if i am
[10:06:51] <A_Dragon> you're missing your range, but yes, that (should) ask for the key weechat, index it to its first value, then indexing the key ircServers on that value
[10:06:57] <dngray[m]> (when doing it within a range
[10:07:14] <dngray[m]> okay well that's good to know i'm not doing it all wrong 😀
[10:07:19] <A_Dragon> as far as range is concerned you are handing it the list that ircServers contains
[10:07:22] <A_Dragon> no more, no less
[10:07:24] <dngray[m]> when i read it in my mind it made sense
[10:07:27] *** Joins: mic4ael (~mic4ael@kolodzie-pc.cern.ch)
[10:08:12] <dngray[m]> one of my friends said go was a bit weird but when you get used to it it's awesome
[10:08:36] <A_Dragon> heh this isnt quite go
[10:08:46] <A_Dragon> the template syntax is very different from go syntax
[10:08:49] <dngray[m]> and the tooling is a treat
[10:08:59] <A_Dragon> in "actual" go, given the same layout, you'd do:
[10:08:59] <dngray[m]> no it's not, but the fact that the template library is a part of the stl is cool
[10:09:26] <A_Dragon> `for _, value := range theMap["weechat"][0]["ircServers"]`
[10:09:37] <dngray[m]> ah
[10:10:00] <A_Dragon> which will be.... honestly weird
[10:10:04] <A_Dragon> it wouldnt work quite that easily
[10:10:16] <A_Dragon> because the map you'd get out of json is a map[string]interface{}
[10:11:00] <A_Dragon> so it'd have to be more like.... (([]map[string]interface{})theMap["weechat"])[0]["ircServer"]
[10:11:04] <A_Dragon> or something like that
[10:11:13] <dngray[m]> mm yeah
[10:11:18] <A_Dragon> if you did this in go you'd define a struct rather than just getting a map, because its messy otherwise
[10:11:26] <A_Dragon> and I forgot a .
[10:12:45] <A_Dragon> dngray[m]: if you want to learn more about go / learn go itself, https://tour.golang.org is a great place to start
[10:12:51] <A_Dragon> and on that note, Im gonna get some sleep
[10:14:15] <dngray[m]> thanks, i didn't know about that site 😀
[10:21:03] *** Joins: gggp (~gggp@123.113.187.31)
[10:21:18] *** Joins: theoceaniscool (~theoceani@93.177.120.45)
[10:22:56] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[10:23:01] *** Joins: jpw (~jpw@user/jpw)
[10:23:09] *** Quits: shiroyasha (~shiroyash@ec2-3-124-70-31.eu-central-1.compute.amazonaws.com) (Quit: WeeChat 3.2)
[10:23:23] *** Joins: shiroyasha (~shiroyash@ec2-3-124-70-31.eu-central-1.compute.amazonaws.com)
[10:30:12] *** Joins: Jad (~Nashmi@user/jad)
[10:30:41] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:30:47] *** Joins: hikhvar796073809 (~thelounge@x4db6b778.dyn.telefonica.de)
[10:32:41] *** Quits: arahael (~arahael@124.170.238.106) (Ping timeout: 248 seconds)
[10:32:49] *** Joins: hand4ever (~admin@47.91.216.19)
[10:33:34] *** Joins: absc (~absc@dynamic-adsl-94-34-200-137.clienti.tiscali.it)
[10:34:21] *** Parts: hand4ever (~admin@47.91.216.19) ()
[10:36:50] *** Joins: independent56 (~independe@185.50.0.80)
[10:38:20] *** Quits: csmarchbanks (~csmarchba@prometheus/team/csmarchbanks) (Ping timeout: 256 seconds)
[10:41:25] *** Joins: csmarchbanks (~csmarchba@prometheus/team/csmarchbanks)
[10:42:27] *** Joins: arahael (~arahael@203.221.97.63)
[10:42:56] *** Joins: pldream (~admin@47.91.216.19)
[10:43:29] *** Joins: Ergo^ (~ergo@91.238.59.144)
[10:46:17] *** Quits: theoceaniscool (~theoceani@93.177.120.45) (Ping timeout: 245 seconds)
[10:48:41] *** Quits: jinie (~jimmy@188.114.173.37) (Remote host closed the connection)
[10:50:19] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[10:50:26] *** Joins: jinie (~jimmy@188.114.173.37)
[10:54:35] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[11:07:49] *** Joins: Guest7566 (~AdminUser@c-67-164-182-41.hsd1.co.comcast.net)
[11:08:58] *** Quits: Guest7566 (~AdminUser@c-67-164-182-41.hsd1.co.comcast.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[11:11:19] *** Quits: smitop (~smitop@user/smitop) (Remote host closed the connection)
[11:11:59] *** Joins: smitop (~smitop@user/smitop)
[11:16:02] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Remote host closed the connection)
[11:16:28] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[11:18:30] *** Joins: bkircher (~bkircher@109.70.98.35)
[11:23:26] *** Quits: adlternative (~adl@117.32.216.79) (Quit: Konversation terminated!)
[11:25:00] *** Joins: theoceaniscool (~theoceani@93.177.120.45)
[11:30:11] *** Joins: saschagrunert (~saschagru@46.128.124.113)
[11:30:13] *** Quits: saschagrunert (~saschagru@46.128.124.113) (Remote host closed the connection)
[11:30:58] *** Joins: saschagrunert (~saschagru@46.128.124.113)
[11:31:32] *** Joins: normen (~normen@p200300d7173dc90039937cbb8ed9b05c.dip0.t-ipconnect.de)
[11:36:09] *** Joins: gggp_ (~gggp@123.113.184.187)
[11:36:10] *** Quits: normen (~normen@p200300d7173dc90039937cbb8ed9b05c.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[11:39:55] *** Quits: gggp (~gggp@123.113.187.31) (Ping timeout: 268 seconds)
[11:42:12] *** Joins: zwr (~zwr@2804:d45:b966:fb00:881c:1992:38ca:8248)
[11:49:38] *** Joins: mrig (~mrig@user/mrig)
[11:54:46] *** Quits: jinie (~jimmy@188.114.173.37) (Remote host closed the connection)
[11:55:13] *** Quits: albertito (~nil@37.228.204.251) (Quit: leaving)
[11:55:31] *** Joins: jinie (~jimmy@188.114.173.37)
[11:57:59] *** Joins: oxum (~oxum@122.172.205.112)
[11:58:45] *** Joins: Zwiebel (~Guest96@2001:67c:2660:425:92e2:baff:fe82:1b20)
[11:59:40] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 240 seconds)
[12:03:09] *** Joins: normen (~normen@p200300d7173dc90039937cbb8ed9b05c.dip0.t-ipconnect.de)
[12:03:20] *** Quits: oxum (~oxum@122.172.205.112) (Ping timeout: 268 seconds)
[12:06:20] *** Quits: jinie (~jimmy@188.114.173.37) (Quit: ZNC 1.8.2 - https://znc.in)
[12:10:59] *** Quits: justache (~justache@user/justache) (Ping timeout: 252 seconds)
[12:11:25] *** Parts: Zwiebel (~Guest96@2001:67c:2660:425:92e2:baff:fe82:1b20) ()
[12:19:18] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:20:38] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[12:23:04] *** Joins: justache (~justache@user/justache)
[12:26:48] *** Joins: sizeof_void34 (~Thunderbi@109-252-75-112.nat.spd-mgts.ru)
[12:28:27] *** Quits: justache (~justache@user/justache) (Read error: Connection reset by peer)
[12:29:35] *** Quits: revolve (~u0_a227@82-132-245-40.dab.02.net) (Read error: Connection reset by peer)
[12:29:35] *** Quits: absc (~absc@dynamic-adsl-94-34-200-137.clienti.tiscali.it) (Remote host closed the connection)
[12:29:55] *** Joins: justache (~justache@user/justache)
[12:30:26] *** Joins: revolve (~u0_a227@82-132-244-91.dab.02.net)
[12:31:30] *** Joins: absc (~absc@dynamic-adsl-94-34-200-137.clienti.tiscali.it)
[12:32:31] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:33:30] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 244 seconds)
[12:33:56] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[12:35:27] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[12:35:44] *** Quits: j00n (~mario@user/j00n) (Quit: j00nior)
[12:36:55] *** Quits: independent56 (~independe@185.50.0.80) (Remote host closed the connection)
[12:37:09] *** Joins: j00n (~mario@user/j00n)
[12:37:19] *** Joins: independent56 (~independe@185.50.0.80)
[12:39:31] *** Joins: neurocyte8 (~neurocyte@92.119.9.30)
[12:39:32] *** Quits: neurocyte8 (~neurocyte@92.119.9.30) (Changing host)
[12:39:32] *** Joins: neurocyte8 (~neurocyte@user/neurocyte)
[12:41:07] *** Joins: enkeyz (~enkeyz@user/enkeyz)
[12:51:26] *** Quits: independent56 (~independe@185.50.0.80) (Ping timeout: 268 seconds)
[12:53:14] *** Quits: gggp_ (~gggp@123.113.184.187) (Read error: Connection reset by peer)
[12:53:37] *** Joins: gggp_ (~gggp@60.10.194.45)
[12:57:39] *** Quits: zwr (~zwr@2804:d45:b966:fb00:881c:1992:38ca:8248) (Remote host closed the connection)
[12:59:11] *** Joins: gggp__ (~gggp@123.113.178.232)
[13:02:07] *** Quits: gggp_ (~gggp@60.10.194.45) (Ping timeout: 245 seconds)
[13:05:47] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 258 seconds)
[13:07:26] *** Joins: mrig (~mrig@user/mrig)
[13:09:20] *** Quits: Kyros (~kyros@user/kyros) (Quit: ZNC 1.8.2 - https://znc.in)
[13:09:36] *** Joins: CoolerX (~CoolerX@user/coolerx)
[13:10:15] *** Joins: Kyros (~kyros@user/kyros)
[13:11:40] *** Joins: albertito (~nil@37.228.204.251)
[13:15:45] *** Quits: CoolerX (~CoolerX@user/coolerx) (Quit: Leaving)
[13:18:42] *** Joins: src (~src@user/src)
[13:22:21] *** Joins: independent56 (~independe@185.50.0.80)
[13:25:22] *** Quits: pldream (~admin@47.91.216.19) (Ping timeout: 268 seconds)
[13:32:34] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[13:37:04] *** Joins: pldream (~admin@47.91.216.19)
[13:40:46] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[13:41:47] *** Joins: flynn (~mcbloch@user/flynn)
[13:55:07] *** Quits: jespada (~jespada@90.254.247.46) (Ping timeout: 245 seconds)
[13:57:42] *** Joins: jespada (~jespada@90.254.247.46)
[13:59:55] *** Quits: independent56 (~independe@185.50.0.80) (Remote host closed the connection)
[14:00:20] *** Joins: independent56 (~independe@185.50.0.80)
[14:05:26] *** Quits: independent56 (~independe@185.50.0.80) (Ping timeout: 268 seconds)
[14:05:27] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 268 seconds)
[14:08:25] *** Quits: thing (~thing@user/thing) (Remote host closed the connection)
[14:08:49] *** Joins: thing (~thing@user/thing)
[14:15:33] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[14:21:19] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:23:01] *** Joins: PinealGlandOptic (~PinealGla@37.115.210.35)
[14:23:42] *** Quits: NeoCron (~NeoCron@p200300c4cf4a8400dde9c021b1b0ad3f.dip0.t-ipconnect.de) (Quit: Leaving)
[14:25:12] *** Joins: NeoCron (~NeoCron@p200300c4cf4a8400dde9c021b1b0ad3f.dip0.t-ipconnect.de)
[14:43:40] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 240 seconds)
[14:54:48] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[14:55:55] *** Quits: PinealGlandOptic (~PinealGla@37.115.210.35) (Quit: leaving)
[14:59:39] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Client Quit)
[15:03:25] *** Quits: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net) (Ping timeout: 268 seconds)
[15:04:55] *** Joins: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net)
[15:16:56] *** Joins: toretto (~ryan@45.15.18.18)
[15:17:41] *** Quits: toretto (~ryan@45.15.18.18) (Changing host)
[15:17:41] *** Joins: toretto (~ryan@user/toretto)
[15:17:44] <toretto> what are the type with `()` mean? like, i'm seeing a return type of `Foo()`, not sure what that `()` mean.
[15:18:09] <ikke> example? That sounds like just a function call
[15:18:21] <toretto> func (r *Response) Cookies() []*Cookie {
[15:18:22] <ikke> or do you mean a function type that is returned
[15:18:26] <ikke> ah
[15:18:27] <toretto> it's from the golang's HTTP
[15:18:33] <ikke> That's a method
[15:18:51] <toretto> oh, a function pointer?
[15:19:04] <ikke> https://tour.golang.org/methods/1
[15:19:18] <ikke> Cookies() is the method name
[15:19:30] <ikke> (r *Response) is the receiver
[15:19:59] <ikke> so when you do response.Cookies, r would be the value of response
[15:20:07] <ikke> `response.Cookies()`
[15:22:17] <toretto> i see, thanks.
[15:27:03] <toretto> and it returns a pointer to an array of 'Cookie' type, isn't it? to make sure
[15:27:35] <ikke> Yes, correct
[15:28:58] * toretto misses array to pointer decomposition.
[15:30:07] *** Joins: gggp_ (~gggp@114.245.108.247)
[15:33:37] *** Quits: gggp__ (~gggp@123.113.178.232) (Ping timeout: 268 seconds)
[15:35:17] *** Quits: pldream (~admin@47.91.216.19) (Ping timeout: 258 seconds)
[15:36:26] *** Quits: dsrt^ (~dsrt@209.65.131.194) (Ping timeout: 258 seconds)
[15:40:15] *** Joins: noli` (~seppe@ptr-82p98k8ydr48un5dq9j.18120a2.ip6.access.telenet.be)
[15:43:25] *** Joins: masoudd (~masoudd@user/masoudd)
[15:43:43] <noli`> quick question: What would be considered the correct way to implement a "press space to exit" kind of thing for a cli application?
[15:45:16] <ikke> https://stackoverflow.com/questions/15159118/read-a-character-from-standard-input-in-go-without-pressing-enter
[15:46:46] *** Joins: frost (~frost@59.71.240.119)
[15:47:18] <noli`> ikke: awesome, I've been trying to find such a SO question but couldn't think of a correct query. Tyvm!
[15:47:51] <ikke> yw
[15:48:13] <ikke> in shell, I'd use `read -n1`
[15:52:01] *** Joins: pldream (~admin@47.91.216.19)
[15:56:10] *** Quits: pldream (~admin@47.91.216.19) (Ping timeout: 240 seconds)
[16:05:02] *** Quits: Jad (~Nashmi@user/jad) (Ping timeout: 245 seconds)
[16:13:51] *** Quits: _\_ (~o@user/ding) (Quit: ___)
[16:14:04] *** Joins: _\_ (~o@user/ding)
[16:16:29] *** Joins: moldorcoder7_ (~moldorcod@37.120.143.28)
[16:18:02] *** Quits: moldorcoder7 (~moldorcod@37.120.143.28) (Ping timeout: 268 seconds)
[16:21:14] *** Quits: corby (~corby@c0rby.de) (Quit: So long)
[16:21:55] *** Joins: corby (~corby@c0rby.de)
[16:22:47] *** Joins: pldream (~admin@47.91.216.19)
[16:27:05] <pinky> trying to find a good way to have a serial.Config struct as a member in my config struct and unmarshal it https://pkg.go.dev/github.com/tarm/serial
[16:27:20] <pinky> why would everyone not implement Unmarshaller interface on these things?
[16:27:21] *** Quits: pldream (~admin@47.91.216.19) (Ping timeout: 248 seconds)
[16:27:47] <pinky> https://pkg.go.dev/github.com/tarm/serial#Config
[16:28:29] *** Joins: jlix (~johannes@81-236-244-23-no298.tbcn.telia.com)
[16:29:01] <j416> sounds like so-so idea to base your config format on a third-party struct doesn't it
[16:29:20] <j416> you can make an identical struct with json tags or whatnot and convert it directly
[16:29:51] <pinky> but since it uses the type alias for Parity, and etc which are really just concrete byte type ..
[16:29:52] <j416> or, just make what is needed out of that, configurable
[16:29:56] *** Quits: holgersson (~quassel@user/holgersson) (Quit: “Format C:........[Done]“)
[16:29:58] <pinky> can i type assert my struct to theirs?
[16:30:11] *** Joins: holgersson (~quassel@user/holgersson)
[16:30:13] <j416> type assertion is for interfaces
[16:30:17] <j416> you mean convert
[16:30:32] <pinky> ah ok yeah, but i can't do that right?
[16:30:35] <j416> and I don't know if the types have to match exactly, perhaps you could get away with a byte. Try it.
[16:30:57] <j416> although, if you're converting, it would make some sense to use the exact same types wouldn't it
[16:31:03] <pinky> I can't just say like p = serial.Parity(x)
[16:31:11] <pinky> where x is a byte ?
[16:31:13] <j416> so it doesn't work?
[16:31:24] <j416> I meant the entire struct.
[16:31:27] <pinky> i don't know let me try, i'm a bit confused where i'd put Unmarshaller
[16:31:34] <pinky> oh, hmm
[16:31:42] <j416> why do you need to implement Unmarshaler?
[16:32:16] <pinky> i guess i don't just seemed like the right way
[16:32:25] <j416> I'd avoid that unless you need it
[16:32:30] <pinky> maybe i need something like
[16:32:31] <pinky> 	Serial serial.Config `json:"omit"`
[16:32:31] <pinky> 	rawSerial rawSerial `json:"serial"`
[16:32:31] <pinky> }
[16:32:44] <pinky> oops
[16:32:45] <j416> I don't follow
[16:32:53] <j416> also, play.golang.org
[16:33:04] <pinky> https://pastebin.com/ZQ4Jcns1
[16:37:01] *** Joins: gggp__ (~gggp@123.113.178.232)
[16:40:04] *** Quits: gggp_ (~gggp@114.245.108.247) (Ping timeout: 258 seconds)
[16:53:32] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[16:54:26] *** Joins: Torr (~Torr@user/torr)
[16:55:27] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 245 seconds)
[16:58:06] *** Joins: darkapex (~darkapex@user/darkapex)
[16:59:21] *** Quits: gggp__ (~gggp@123.113.178.232) (Ping timeout: 268 seconds)
[17:04:30] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[17:10:27] *** Quits: albertito (~nil@37.228.204.251) (Ping timeout: 268 seconds)
[17:11:02] *** Joins: cassio (~cassio@189.37.69.22)
[17:13:36] *** Quits: frost (~frost@59.71.240.119) (Quit: Connection closed)
[17:17:32] *** Joins: pldream (~admin@47.91.216.19)
[17:19:49] *** Quits: fmac (~fmac@hel1-1.fmac.xyz) (Remote host closed the connection)
[17:20:02] *** Joins: fmac (~fmac@hel1-1.fmac.xyz)
[17:22:01] *** Joins: mike18 (~geri@217-149-162-237.nat.highway.telekom.at)
[17:22:04] *** Quits: pldream (~admin@47.91.216.19) (Ping timeout: 252 seconds)
[17:23:25] <mike18> hi i have 3 regex to check if filenames match a pattern - how can i check if those match? call FindStringSubmatch 3 times and check if len < 1 ?
[17:24:36] *** Quits: fmac (~fmac@hel1-1.fmac.xyz) (Remote host closed the connection)
[17:24:40] *** Quits: hikhvar796073809 (~thelounge@x4db6b778.dyn.telefonica.de) (Ping timeout: 240 seconds)
[17:24:50] *** Joins: fmac (~fmac@hel1-1.fmac.xyz)
[17:29:39] <mike18> https://play.golang.org/p/nHwJaKQgfUn ... any cleaner way to do that?
[17:30:56] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[17:31:22] *** Joins: cp- (~cp-@b157153.ppp.asahi-net.or.jp)
[17:33:15] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:37:42] <siXy> mike18: By using switch/case rather than ifs, and Match.
[17:37:43] <siXy> https://play.golang.org/p/GSBZdvnkKaM
[17:37:57] <mike18> can i use MatchString right?
[17:38:14] <siXy> sure
[17:38:46] *** Quits: fmac (~fmac@hel1-1.fmac.xyz) (Remote host closed the connection)
[17:39:01] *** Joins: fmac (~fmac@2a01:4f9:c011:29a2::2)
[17:39:52] <mike18> than i dont need to convert to bytes?
[17:43:19] <siXy> You can try it and see :) But yes matchstring is better.
[17:45:44] *** Quits: holgersson (~quassel@user/holgersson) (Quit: “Format C:........[Done]“)
[17:48:16] *** Joins: holgersson (~quassel@user/holgersson)
[17:48:27] *** Quits: neurocyte8 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[17:50:12] *** Joins: neurocyte8 (~neurocyte@user/neurocyte)
[18:16:45] *** Quits: svedrin (~quassel@tiamat.funzt-halt.net) (Quit: https://quassel-irc.org - Komfortabler Chat. Überall.)
[18:17:03] *** Joins: svedrin (~quassel@tiamat.funzt-halt.net)
[18:17:16] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[18:25:10] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 240 seconds)
[18:27:15] *** Quits: enkeyz (~enkeyz@user/enkeyz) (Quit: WeeChat 3.2)
[18:34:10] *** Joins: zanshin (~zanshin@user/zanshin)
[18:39:12] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[18:52:07] *** Joins: Jad (~Nashmi@user/jad)
[18:55:01] *** Joins: shka (~herr@109.231.62.239)
[18:59:10] *** Quits: revolve (~u0_a227@82-132-244-91.dab.02.net) (Ping timeout: 240 seconds)
[19:00:25] *** Joins: revolve (~u0_a227@82-132-245-163.dab.02.net)
[19:05:36] *** Joins: darkapex_ (~darkapex@user/darkapex)
[19:06:17] *** Church is now known as HankHill
[19:06:33] *** Joins: freakazoid343 (~matt@35.136.210.185)
[19:08:10] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 240 seconds)
[19:08:54] *** Quits: freakazoid333 (~matt@2603:9000:cf0f:80e3:30b0:cf2a:af63:1f3a) (Ping timeout: 256 seconds)
[19:09:06] *** Joins: darkapex (~darkapex@user/darkapex)
[19:10:02] *** Quits: darkapex_ (~darkapex@user/darkapex) (Ping timeout: 245 seconds)
[19:13:18] *** Joins: Torr (~Torr@user/torr)
[19:18:04] *** Joins: oxum (~oxum@122.172.205.112)
[19:21:38] <Tv_> and that code demonstrates author hasn't really grasped Go fully yet, either -- using crypto written by such scares me
[19:22:05] <Tv_> oops, that was for dostoyevsky2 way back
[19:23:39] *** Quits: oxum (~oxum@122.172.205.112) (Ping timeout: 268 seconds)
[19:30:21] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:31:48] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[19:33:07] *** Quits: saschagrunert (~saschagru@46.128.124.113) (Remote host closed the connection)
[19:33:10] *** Joins: src_ (~src@user/src)
[19:36:36] *** Quits: src (~src@user/src) (Ping timeout: 268 seconds)
[19:42:16] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[19:43:05] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 248 seconds)
[19:44:31] *** Joins: StyXman (~mdione@2a01:e0a:5e5:4790:20d:b9ff:fe52:1a0)
[19:45:02] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[19:45:19] <StyXman> there's strings.EqualFold and strings.ToLowerSpecial. is there a EqualFoldSpecial?
[19:45:30] <StyXman> or why doesn't it exist?
[19:48:36] *** Valentine is now known as Valentine[m]
[19:48:54] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[19:49:07] *** Valentine[m] is now known as Valentine
[20:02:15] *** Joins: bancroft_ (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-147.dsl.bell.ca)
[20:02:29] <bancroft_> is there a way I can limit the virtual memory my process will take?
[20:03:00] <bancroft_> I have a process that's taking 204M but it has reserved 2.6G
[20:04:24] <bancroft_> https://golang.org/doc/faq#Why_does_my_Go_process_use_so_much_virtual_memory is what i'm looking at
[20:04:38] <siXy> bancroft_: rlimits/cgroups will allow you to limit resident set sizes. But I suspect the problem here is that you're looking at the wrong thing.
[20:05:09] <siXy> bancroft_: linux memory management is fairly unintuitive - that virtual memory isn't actually USED. You don't need to worry about it.
[20:05:21] <bancroft_> i'm looking at htop and I see VIRT being 2.6G while RES is 204M
[20:05:38] <siXy> yeah ignore VIRT. RES is the important number
[20:08:24] <cassio> bougyman: sometimes webkit-gtk uses more then a TB of virtual memory, and i have 8G. I can't understand how it works
[20:08:41] <StyXman> it's little bit of both. you might have allocated but non existant memory, allocated but swapped out memory, and resident memory
[20:08:48] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[20:08:52] <cassio> bancroft_: sorry, i ment to ping you ^
[20:09:11] <StyXman> where non existant means that since you never used the page, no physical or swap page has been really used
[20:09:12] *** Joins: mickey (~user@user/mickey)
[20:10:13] <siXy> cassio: the good news is that you don't really need to understand. It's not an important metric for understanding application or system performance.
[20:12:07] *** Joins: quippy (~quippy@47-220-146-143.gtwncmkt04.res.dyn.suddenlink.net)
[20:12:27] <StyXman> +1
[20:13:27] <StyXman> the one you could worry about is the swapped + resident, but then you also have the shared memory, which are pages that usually belong to libraries that are shared among processes
[20:13:45] <StyXman> and then mmaped memory, and shr() memory, and...
[20:17:05] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Quit: SureVoIP: http://www.surevoip.co.uk)
[20:18:27] *** Joins: oxum (~oxum@122.172.205.112)
[20:23:02] *** Joins: independent56 (~independe@185.50.0.80)
[20:23:13] <bancroft_> I always have swap mem to zero
[20:23:18] <Tv_> StyXman: unicode equality is just a single concept, there's no pluggability about it. ToLowerSpecial is for following language specific rules for case folding, there can be as many of those as there are weirdo languages/writing systems.
[20:23:34] *** Quits: oxum (~oxum@122.172.205.112) (Ping timeout: 252 seconds)
[20:25:25] <StyXman> Tv_: but EqualFold implements case insensitivity. turkish has a special case for that; hence the *Special . do ouy mean that somewho unicode code can know if I'm comparing turkish strings?
[20:25:39] <bancroft_> in testing it seems like free -m is pretty unreliable because MemFree and MemAvailable are dependent on what memory pages processes have actually mapped
[20:26:31] <bancroft_> StyXman: and then buff/cache overcounts what is evictable by the kernel (with drop_caches)
[20:27:00] <StyXman> bancroft_: like siXy says, do not worry about ir untill you really have the problem
[20:27:19] <Tv_> StyXman: EqualFold says all kinds of i's are equal, including the funny turkish one
[20:27:33] <StyXman> why? those are different letters
[20:27:56] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:28:16] <StyXman> it's not an i, it's a ı
[20:28:30] <siXy> bancroft_: I'm uncertain why you think that MemFree/MemAvailable depending on what pages are mapped makes it unreliable.
[20:29:05] <siXy> Of course "how much ram is free" is going to depend on what things are in use
[20:29:07] <Tv_> StyXman: because unicode is insanity codified? https://pkg.go.dev/unicode#SimpleFold
[20:30:19] <StyXman> Tv_: so the unicode standard and not the unocode pkg; that one follows the standard, that's what you mean?
[20:30:34] <bancroft_> siXy: well I tried it with c because my go-fu is not strong but these are my programmed steps: 1. Snapshots current system state. 2. Allocates a gigabyte and snapshots system state. 3. Writes to the allocated memory and snapshots system state. 4.Frees the allocated memory and snapshots system state. 5. Drops virtual memory caches and snapshots system state.
[20:30:35] <Tv_> StyXman: go didn't invent the madness
[20:30:46] <StyXman> Tv_: it could _implement_ madness :)
[20:31:01] <Tv_> as it does, at least partially
[20:31:10] *** Quits: theoceaniscool (~theoceani@93.177.120.45) (Ping timeout: 240 seconds)
[20:31:18] <siXy> bancroft_: "virtual memory caches" aren't a thing. What are you really trying to do?
[20:31:46] *** Joins: pldream (~admin@47.91.216.19)
[20:32:17] <bancroft_> siXy: echo 3 | sudo tee /proc/sys/vm/drop_caches
[20:32:26] <j416> StyXman: and yet English uppercase I is i in lowercase.
[20:32:36] <StyXman> bancroft_: stop messing with the VMM
[20:32:59] <siXy> bancroft_: that's nothing to do with VIRT. What's the end goal here. What are you really trying achieve?
[20:33:22] <StyXman> j416: what does it have to do with the turkish folding?
[20:33:44] <j416> StyXman: my point is, if the language is not specified, it's difficult to categories
[20:33:46] <j416> categorize*
[20:33:48] <bancroft_> I'm trying to solve two questions: Does free -m accurately represent the state of the world when giving stats on truly unclaimed memory? How does this correspond with CommitAS_bytes?
[20:34:44] <StyXman> j416: sorry, I don't follow, which language are you talking about?
[20:35:17] <StyXman> bancroft_: free -m provides _some_ stats that probably you're reading wrong
[20:35:49] <j416> StyXman: you brought up that in Turkish, i ≠ ı, so I said well in English, I lowercases to i (which it doesn't in Turkish), and so it's difficult to put i/ı/I into categories without language info
[20:36:25] *** Quits: pldream (~admin@47.91.216.19) (Ping timeout: 268 seconds)
[20:36:29] <StyXman> like siXy said, Linux VMM (and most probably other OS) is complex, ignore it until you really have an issue with it
[20:36:39] *** Quits: stefanc_diff (~stefanc_d@cpc97950-croy24-2-0-cust78.19-2.cable.virginm.net) (Read error: Connection reset by peer)
[20:36:43] <j416> some scripts don't even have a concept of upper/lowercase
[20:37:05] <StyXman> j416: agreed, that's why I was asking about EqualFold not having the *Special version
[20:37:52] <j416> ooh, my bad. That actually _does_ take the language into consideration. Sorry, I should have looked that up.
[20:37:54] <bancroft_> StyXman: then what am I reading wrong?? also by CommitAs_Bytes I mean node_memory_Committed_AS_bytes from prometheus
[20:37:57] <siXy> bancroft_: https://access.redhat.com/solutions/406773 lays out clearly what all these things actually mean. But the TL;DR is that this is a deeply complicated topic, and free -m is going to be good enough unless you're trying to do something extremely unusual (in which case a few months of detailed reading will be required)
[20:38:00] *** Joins: stefanc_diff (~stefanc_d@cpc97950-croy24-2-0-cust78.19-2.cable.virginm.net)
[20:40:04] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 252 seconds)
[20:42:03] <foobaz> bancroft_: "truly unclaimed memory" is a bad thing to want, cache memory is superior in every regard
[20:42:11] <StyXman> bancroft_: Commited is that, the sum of all resident memory, where every shared paged is counted only once, I think
[20:42:35] <StyXman> hmm,
[20:42:35] <foobaz> like unclaimed memory, cache memory is available for processes to claim, but in addition it boosts performance
[20:42:51] <siXy> Generally, I'd suggest you report on % of total ram that's marked Active. That's going to give you the best 1000-ft view of "how much usable memory is left on the box" which is almost certainly the number you really want.
[20:43:08] <StyXman> +1
[20:43:36] *** Quits: darkapex (~darkapex@user/darkapex) (Read error: Connection reset by peer)
[20:44:34] <StyXman> bancroft_: scratch that, it's the sum of all alloc'ed memory, which usually is way bigger than the available phisical ram
[20:44:52] <Tv_> StyXman: consider the concept of equality being a universal (as defined by unicode), because that'd be a sane thing to do. then they encode rules about it that make the best sense of the complex world they can.
[20:45:00] <bancroft_> foobaz: truly unclaimed because another processes which can not make use of the cache needs the memory
[20:45:13] *** Joins: darkapex (~darkapex@user/darkapex)
[20:45:21] <foobaz> that's wrong
[20:45:29] <siXy> bancroft_: that's not how linux memory management works.
[20:45:59] <bancroft_> siXy: can you point me to something I can read for the next two months to get it straight then?
[20:46:17] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Quit: Leaving)
[20:46:31] <Tv_> bancroft_: https://linux-mm.org/ ?
[20:46:40] *** Quits: independent56 (~independe@185.50.0.80) (Ping timeout: 240 seconds)
[20:46:51] *** Quits: mike18 (~geri@217-149-162-237.nat.highway.telekom.at) (Remote host closed the connection)
[20:46:57] <siXy> bancroft_: start here: https://www.kernel.org/doc/html/v5.3/admin-guide/mm/concepts.html
[20:47:05] *** Joins: kdsch (~kdsch@89.45.224.122)
[20:47:14] <Tv_> https://www.kernel.org/doc/html/latest/vm/index.html
[20:47:21] <foobaz> if a process (like prometheum) needs memory, linux will happily give it cache memory right away
[20:47:49] <siXy> Tv_'s second link is also good. read both, very carefully, and google each word you don't fully understand.
[20:47:50] <foobaz> for purposes of memory allocation, cache memory is as available as unused memory
[20:47:53] <StyXman> bancroft_: buffers, cache and other types of memory can be relinquished to processes; other resident memory can be swapped out
[20:48:26] <StyXman> but I think this is getting more in 'what should I monitor on my box', which probably is not a topic for this channel
[20:48:50] <siXy> if you can't figure something out that either of those pages talks about, come back and ask - I'm happy to explain individual terms in detail, but a full lecture on the details of linux MM is well out of scope for what I'm prepared to do on IRC
[20:49:21] <StyXman> hehehe
[20:49:22] *** Quits: darkapex (~darkapex@user/darkapex) (Read error: Connection reset by peer)
[20:49:56] *** Joins: darkapex (~darkapex@user/darkapex)
[20:51:37] *** Quits: absc (~absc@dynamic-adsl-94-34-200-137.clienti.tiscali.it) (Quit: Leaving.)
[20:52:45] <StyXman> bancroft_: I can also suggest looking at munin's default memory graph
[20:53:47] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 245 seconds)
[20:55:06] *** Joins: fikran (~fikran@user/fikran)
[20:55:53] <StyXman> http://demo.munin-monitoring.org/server/ameise/memory.html
[20:56:10] <bancroft_> siXy StyXman this is all very helpful, thank you
[20:56:23] <StyXman> good luck :)
[20:56:45] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[20:57:36] <StyXman> Tv_: so the final answer is: this is a shotrhand that only breaks in turkish because of the unicode cons?
[20:57:43] <StyXman> consortium*
[20:58:31] <Tv_> StyXman: i don't know enough about turkish to debate whether it breaks something or not. it is a desirable property of raw unicode codepoints to be able to ask are two of them equal apart from the user holding shift key down.
[20:58:59] *** Quits: src_ (~src@user/src) (Quit: Leaving)
[20:59:02] <StyXman> Tv_: yes, but equal fold ignores 'the shift key down'
[20:59:07] <StyXman> or should*
[20:59:10] *** Joins: src (~src@user/src)
[20:59:21] <A_Dragon> might I suggest
[20:59:23] <Tv_> not sure what you're trying to say. that's the point of it.
[20:59:27] <StyXman> which breaks in .tc
[20:59:37] <A_Dragon> strings.FoldSpecial(s1) == strings.FoldSpecial(s2)?
[20:59:45] <A_Dragon> or I think EqualFold uses ToLower
[20:59:46] <StyXman> .tr*
[20:59:47] <A_Dragon> so
[21:00:36] <A_Dragon> oh no equalfold is reasonably complex
[21:00:37] <Tv_> StyXman: if you think the Unicode Consortium screwed over the Turkish people, go take it up with the Unicode Consortium? https://metacpan.org/pod/Unicode::CaseFold#What-is-Case-Folding?
[21:00:43] <A_Dragon> that'll be why theres no special variant.
[21:00:50] <A_Dragon> https://cs.opensource.google/go/go/+/refs/tags/go1.17:src/strings/strings.go;l=970
[21:00:55] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[21:00:58] <StyXman> where can I share runnable test code?
[21:01:04] *** Quits: aead (~aead@pool-96-232-187-142.nycmny.fios.verizon.net) (Ping timeout: 268 seconds)
[21:01:10] <A_Dragon> play.golang.org
[21:01:36] <Tv_> https://www.w3.org/TR/charmod-norm/#definitionCaseFolding
[21:02:04] <foobaz> why did dotless i get the works? that's nobody's business but the turks
[21:02:26] *** Joins: aead (~aead@ec2-52-2-178-231.compute-1.amazonaws.com)
[21:03:14] <StyXman> foobaz: they decided they needed a letter for their extra vowel, which I welcome, as the language becomse mostly phonetic like Spanish
[21:04:42] <foobaz> consider that EqualFold is not intended to preserve all nuances of the original string, in fact its goal is the opposite of that
[21:05:17] <A_Dragon> ^
[21:05:28] <foobaz> it's unusual to display the result of EqualFold, its results are typically used internally as comparison
[21:05:34] <StyXman> well, it's not a nuance since they consider it a different letter unlike accented letters in Spanish
[21:05:52] <A_Dragon> Take that up with the unicode consortium
[21:06:06] <A_Dragon> its not a go problem. you'd have the same problem in python using its casefold()
[21:06:40] <foobaz> for example if a user named jım exists, you might want to reject a new user registering as jim because the names are too similar and there could be confusion
[21:06:40] <StyXman> yes, but golang has made something to avoid that with the *Special functions. I'm just asking why there is no EqualFoldSpecial()
[21:06:49] *** Quits: jlix (~johannes@81-236-244-23-no298.tbcn.telia.com) (Ping timeout: 248 seconds)
[21:07:05] <StyXman> foobaz: unless you're in turkey :)
[21:07:07] <foobaz> unicode is not saying jim and jım are the same, it's saying they are close enough that there could be confusion
[21:07:22] <A_Dragon> StyXman: because you could use ToLowerSpecial(s1) == ToLowerSpecial(s2).
[21:07:39] <StyXman> A_Dragon: rightm then what's the use of EqualFold(), then? :)
[21:07:51] <A_Dragon> casefolding.
[21:07:58] <A_Dragon> Which is distinct from lowering.
[21:08:07] <A_Dragon> But both should work fine most cases.
[21:08:14] <StyXman> which is distinct from equalizing, hmmm...
[21:08:25] <A_Dragon> Yes. Unicode is a giant mess.
[21:08:29] <A_Dragon> Has been for decades.
[21:08:31] * StyXman tries to recompute but it's too late in the day
[21:09:02] <Tv_> StyXman: the non-language-aware case fold is useful for comparison and e.g. building search indexes
[21:09:05] <foobaz> or what if you are writing a chat app, and you want to block certain words, you could use equalfold to prevent people from substituting ı into bad words
[21:09:20] <siXy> StyXman: You could always file an issue asking for EqualFoldSpecial. I'm not sure how far you'll get but if it's important to you, why not ask?
[21:09:24] <A_Dragon> note that equalfold will not do lookalikes foobaz
[21:09:27] <A_Dragon> theres a whole list of them
[21:09:31] <foobaz> ah good to know
[21:09:56] <Tv_> A_Dragon: there's a separate spec for malicious lookalike inputs, called precis
[21:10:10] <A_Dragon> mhmm
[21:10:18] <Tv_> https://pkg.go.dev/golang.org/x/text/secure/precis
[21:12:51] <foobaz> huh i didn't know there was an RFC for how to normalize usernames and passwords, that's cool
[21:16:01] <A_Dragon> note that you should not ever use the normalized passwds as what you hash and store
[21:16:48] <foobaz> ...that's exactly what i do
[21:17:17] <foobaz> what's the point of normalizing the password if it's not what you hash?
[21:18:24] <Tv_> A_Dragon: the point here is to normalize the encoding of the password, surrogates etc, so that the byte sequence doesn't depend on how exactly the user composed the input. https://www.rfc-editor.org/rfc/rfc8265.html#section-4
[21:18:58] <A_Dragon> oh they want to do it THAT way?
[21:19:00] <Tv_> it's a little.. different in scope and purpose.. from the rest of the PRECIS stuff (which focuses on preventing homonym attacks etc)
[21:19:12] <A_Dragon> see I'd just hash the given data as is
[21:19:29] <A_Dragon> but if its for THAT that makes more sense
[21:20:00] <foobaz> if a password contains 'ä' i want it to work whether it's a single rune or if it uses combining characters
[21:20:17] *** Joins: codebam (~codebam@user/codebam)
[21:20:34] <A_Dragon> ¯\_(ツ)_/¯ thats my fault for being very byte oriented with that and not considering the actual composition of non-pure-latin passwords
[21:20:41] <A_Dragon> but noted, Ill remember that in future
[21:20:49] <foobaz> certainly this makes it slightly easier to brute-force passwords but if such an attempt is made it's very likely to be the same person typing on a different keyboard or OS
[21:20:59] *** Joins: independent56 (~independe@185.50.0.80)
[21:21:40] <Tv_> also includes things like forbidding TAB in password input
[21:21:52] <Tv_> all in the name of making it more likely the user is able to input the "same" string again
[21:22:18] *** Joins: DeltaNova (~DeltaNova@user/deltanova)
[21:23:07] <foobaz> yea, i see it says "Any instances of non-ASCII space MUST be mapped to SPACE"
[21:24:01] *** Quits: kdsch (~kdsch@89.45.224.122) (Quit: WeeChat 2.8)
[21:26:11] *** Joins: jpw (~jpw@user/jpw)
[21:27:44] <foobaz> i see that strings.EqualFold() does not consider よ and ょ equal, or や and ゃ
[21:28:03] <foobaz> surprising considering they are somewhat analogous to upper/lower case
[21:29:52] *** Quits: DeltaNova (~DeltaNova@user/deltanova) (Ping timeout: 258 seconds)
[21:30:18] <nevivurn> foobaz: are they? I wouldn't expect those characters to equalfold.
[21:30:42] *** Joins: jjakob (~quassel@2a01:260:8028:10f0::62)
[21:30:54] *** Joins: c10l (~c10l@89.34.167.207)
[21:30:59] <nevivurn> Though it's probably just doing whatever the unicode standards says it should do.
[21:31:35] <foobaz> it's very similar to the turkish i situation, isn't it? slightly different sound written using a slight variation on an existing character
[21:33:29] *** Joins: kdsch (~kdsch@89.45.224.122)
[21:34:44] *** Joins: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de)
[21:35:36] *** Joins: lungaro (~lungaro@99-117-118-33.lightspeed.sndgca.sbcglobal.net)
[21:35:50] <lungaro> anybody use https://github.com/FDio/govpp ?
[21:35:52] *** Joins: oxum (~oxum@122.172.205.112)
[21:36:05] <nevivurn> No idea about turkish, but given that you end up with different words entirely if you interchange those characters, I'm glad unicode decided on the sane behavior.
[21:36:40] *** Joins: Torr (~Torr@user/torr)
[21:37:15] *** Joins: DeltaNova (~DeltaNova@user/deltanova)
[21:38:09] *** CommunistWolf is now known as slime-mould
[21:40:40] *** Quits: oxum (~oxum@122.172.205.112) (Ping timeout: 240 seconds)
[21:41:39] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[21:42:00] *** Joins: mickey (~user@user/mickey)
[21:50:08] *** Quits: martin_ (nobody@188.113.85.137) (Quit: WeeChat 3.0)
[21:52:15] *** Quits: kdsch (~kdsch@89.45.224.122) (Quit: WeeChat 2.8)
[21:56:39] *** Quits: darkapex (~darkapex@user/darkapex) (Read error: Connection reset by peer)
[21:56:55] *** Joins: darkapex (~darkapex@user/darkapex)
[21:57:47] *** Quits: jjakob (~quassel@2a01:260:8028:10f0::62) (Quit: Either rebooting or something broke.)
[21:58:04] *** Joins: jjakob (~quassel@2a01:260:8028:10f0::62)
[22:01:12] *** Joins: fef (~thedawn@user/thedawn)
[22:01:58] <Tv_> lungaro: wow that project utterly fails to communicate what VPP is
[22:02:15] <Tv_> total turbo encabulator vibes
[22:02:31] <lungaro> hahaha
[22:02:44] <lungaro> it's yet another userspace networking implementation afaics, but honestly I dont know
[22:03:09] <lungaro> I *Think* its goal is to abstract away the backend and establish a common api (but I could be wrong!)
[22:03:10] <ikke> I guess you already need to know what VPP is
[22:03:43] <lungaro> ie, RDMA vs DPDK
[22:04:11] <ikke> https://fd.io/docs/vpp/master/
[22:05:23] <Tv_> oh i'm perfectly capable to discover what it is, but only via means of google or previous memories
[22:05:32] <ikke> Understood
[22:05:38] <Tv_> (or in this case, previous bookmarks in queue of things to look at ;)
[22:05:46] <Tv_> it's shitty communication, that's all
[22:06:22] <ikke> I was not disagreeing
[22:06:24] <Tv_> it's like putting the github repo url in the About/Website field on a github repo
[22:07:00] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[22:07:39] *** Quits: noli` (~seppe@ptr-82p98k8ydr48un5dq9j.18120a2.ip6.access.telenet.be) (Quit: WeeChat 3.0.1)
[22:11:01] *** Joins: martin_ (nobody@188.113.85.137)
[22:11:10] *** Quits: Valentine (~valentine@hackerspacesg/valentine) (Quit: Addio, adieu, adios, aloha, arrivederci, auf Wiedersehen, au revoir, bye, bye-bye, cheerio, cheers, farewell, good-by, good-bye, goodbye, good day, sayonara, shalom, so long.)
[22:16:40] *** Quits: aead (~aead@ec2-52-2-178-231.compute-1.amazonaws.com) (Ping timeout: 240 seconds)
[22:18:46] *** Joins: aead (~aead@pool-96-232-187-142.nycmny.fios.verizon.net)
[22:26:43] *** Joins: fikran_ (~fikran@user/fikran)
[22:27:02] *** Quits: fikran_ (~fikran@user/fikran) (Client Quit)
[22:29:09] *** Joins: fikran_ (~fikran@user/fikran)
[22:29:16] *** Quits: fikran_ (~fikran@user/fikran) (Client Quit)
[22:30:25] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[22:34:48] *** Joins: Valentine (~valentine@hackerspacesg/valentine)
[22:38:01] *** Joins: fikran_ (~fikran@user/fikran)
[22:38:11] *** Joins: ark (~ark@c-73-71-150-205.hsd1.ca.comcast.net)
[22:38:30] *** Quits: fikran_ (~fikran@user/fikran) (Client Quit)
[22:47:05] *** Quits: aead (~aead@pool-96-232-187-142.nycmny.fios.verizon.net) (Ping timeout: 248 seconds)
[22:49:06] *** Joins: aead (~aead@ec2-52-2-178-231.compute-1.amazonaws.com)
[22:50:15] *** Quits: Valentine (~valentine@hackerspacesg/valentine) (Quit: Addio, adieu, adios, aloha, arrivederci, auf Wiedersehen, au revoir, bye, bye-bye, cheerio, cheers, farewell, good-by, good-bye, goodbye, good day, sayonara, shalom, so long.)
[22:53:26] *** Quits: gst (~gst@gateway/tor-sasl/gst) (Remote host closed the connection)
[22:53:48] *** Joins: gst (~gst@gateway/tor-sasl/gst)
[22:55:03] *** Joins: Valentine (~valentine@hackerspacesg/valentine)
[22:57:03] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[23:00:04] *** Quits: ark (~ark@c-73-71-150-205.hsd1.ca.comcast.net) (Quit: Client closed)
[23:02:31] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[23:04:27] *** Joins: fikran (~fikran@user/fikran)
[23:13:04] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:17:44] *** Quits: zunk (~zunk@h-79-136-122-114.A240.priv.bahnhof.se) (Quit: leaving)
[23:39:30] *** Quits: Jad (~Nashmi@user/jad) (Quit: Benefits I derive from free­dom are largely the result of the uses of freedom by others, and mostly of those uses of freedom that I could never avail myself of.)
[23:40:51] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[23:46:04] *** Parts: StyXman (~mdione@2a01:e0a:5e5:4790:20d:b9ff:fe52:1a0) (cheers!)
[23:46:45] *** Joins: StyXman (~mdione@2a01:e0a:5e5:4790:20d:b9ff:fe52:1a0)
[23:47:16] <StyXman> foobaz: no, the turkish situation is that I becomes the uppercase of a rune that is not i
[23:47:38] <StyXman> not that 'they sound different'
[23:52:25] *** slime-mould is now known as CommunistWolf
[23:53:14] <j416> foobaz: not sure I'd call them somewhat analoguous to upper/lower case; it would be strange to convert one to the other
[23:53:54] <j416> it would work in some specific cases, but far from all
[23:56:54] <dostoyevsky2> I often seem t find go projects on github which seem great but the builds are failing, e.g.: https://github.com/hashicorp/raft
[23:57:24] *** Quits: ilpanda (ilpanda@user/ilpanda) (Ping timeout: 272 seconds)
[23:57:41] <dostoyevsky2> Is that more a  problem of the CI system?
[23:58:16] *** Joins: dr0n (~mnxaw@94.11.23.235)
[23:59:47] <dostoyevsky2> Also k8s is using raft for etcd, not paxos??
