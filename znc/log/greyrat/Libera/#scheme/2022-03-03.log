[00:00:43] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[00:00:44] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[00:01:20] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:01:38] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[00:21:23] *** Joins: TCZ (~tcz@91.150.178.124)
[00:22:26] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[00:23:32] *** Joins: badkins (~badkins@136.56.92.199)
[00:32:57] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Ping timeout: 240 seconds)
[00:34:14] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[00:35:59] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[00:36:32] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[00:49:44] *** Joins: lumberjack (~alMalsamo@gateway/tor-sasl/almalsamo)
[00:50:25] *** Joins: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo)
[01:04:36] <Zipheir> It's too bad there isn't a public online version of Dan Friedman & Mitch Wand's *Essentials of Programming Languages*.  It's one of the wonderful Scheme books, IMO.
[01:05:55] <Zipheir> (They should follow Peirce's example with TaPL and open it up!)
[01:06:20] <libfud> oh
[01:06:28] <libfud> sounds like another book for my reading list
[01:06:44] <libfud> I do still need to read that paper you linked, Zipheir 
[01:07:20] <libfud> my backlog of stuff to do is monstrous right now
[01:07:36] <Zipheir> Hmm, I thought TaPL was open source, but I guess it isn't.  I guess I'm thinking of Software Foundations .
[01:08:26] <Zipheir> libfud: Yes, there's always a ton to read.  Ars longa...
[01:09:00] <libfud> oh, not just my reading list
[01:09:13] <libfud> but that has certainly suffered and grown
[01:10:12] <libfud> full time job, making furniture, taking care of dogs, and all my other errands that I have to run
[01:12:15] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[01:13:45] <Zipheir> Making furniture sounds interesting.
[01:15:36] <libfud> I find it interesting. I picked it up becaues I needed to replace my hobby of programming since that's my job now
[01:16:59] <libfud> that, and I'd rather make something that'll last me years to decades or even more, than overpay for crap from a furniture store.
[01:19:15] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:36:27] <xaltsc> Hey, is possible to implement an infinite loop using recursion in Scheme ? I.e. are there attainable limits of recursive calls or do I have to use a do loop ? I'm using guile right now but I'm interested in other implementations as well.
[01:36:46] <xaltsc> s/or/and
[01:38:09] <aeth> (define (loop) (loop)) (loop)
[01:39:10] <xaltsc> aeth: will stack overflow happen doing that ?
[01:39:31] <aeth> no
[01:39:41] <aeth> it's in the tail position
[01:40:09] <aeth> this is the biggest difference between Scheme and Common Lisp
[01:40:11] <xaltsc> Is that guaranteed across implementations ?
[01:40:17] <aeth> Scheme by guaranteeing this, allows one to iterate this way
[01:40:22] <aeth> Common Lisp may or may not stack overflow
[01:40:30] <aeth> This leads to a major difference in style
[01:40:38] <xaltsc> ok great :)
[01:40:43] <Zipheir> xaltsc: In any case, that's what the `do` version will expand to, too.
[01:40:47] <Zipheir> (Probably)
[01:42:08] *** Quits: Darkcoal (~user@user/Darkcoal) (Quit: Darkcoal)
[01:43:49] <xaltsc> Yeah, I think I've never really used a do before, but I had noticed that CL code had much more such constructs. Now I understand why.
[01:44:12] <aeth> to be fair, CL has more, useful built-ins for iteration
[01:44:17] <aeth> LOOP is very nice
[01:44:26] <aeth> the syntax is unlispy, but it is convenient
[01:47:58] <Zipheir> LOOP is sooo ugly, though.
[01:48:27] <Zipheir> IIRC the CL standard says that there are *no* scope rules for variables in LOOP constructs.
[01:49:25] <aeth> LOOP only gets messy when you do conditionals which you only have to do if you're using something like COLLECT inside of the LOOP
[01:49:26] <Zipheir> (There's a funny cartoon in Land of Lisp that depicts DO and LOOP as grungy dudes in trench coats smoking in alley off the nice, clean Lisp main avenue.)
[01:49:34] <Zipheir> *in an alley
[01:50:18] <aeth> for the most part, if you're given an algorithm in pseudo-code, especially a numerical one, it will likely directly translate into LOOP
[01:50:41] <aeth> on the other hand, DO is... hard. It's so simple but it goes against one's brain.
[01:50:43] <Zipheir> Because most books on algorithms assume an imperative language (unfortunately).
[01:51:08] <Zipheir> Or, rather, I should say, they express algorithms imperatively.
[01:51:09] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[01:52:40] <aeth> numerical code is just imperative loops on arrays of double floats.
[01:53:07] <aeth> are there other ways to do that? probably. would you have to derive them yourself with proofs that would require both advanced comp sci and advanced mathematics? also yes.
[01:53:44] <Zipheir> Oh, come on.  You don't need advanced anything to express Peano addition as a recursive algorithm.
[01:54:00] <aeth> only to make it fast
[01:54:09] <Zipheir> Who said anything about fast?
[01:54:12] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[01:54:47] <Zipheir> The discussion was about describing algorithms, not optimizing their implementation on some hardware.
[01:55:07] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:88a7:1068:8c94:c172)
[01:55:07] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:88a7:1068:8c94:c172) (Changing host)
[01:55:07] *** Joins: skapata (~Skapata@user/skapata)
[01:57:27] <Zipheir> There are plenty of books that deal with numerical algorithms without reference to array assignment or loop constructs.  Those just happen to be the most popular idiom, I guess.
[02:06:19] <xaltsc> Is the cooking recipe metaphor versus the n-category pov I guess
[02:22:26] *** Joins: Fare (~fare@pool-71-185-187-182.phlapa.fios.verizon.net)
[02:45:53] *** Quits: apg (~apg@71-34-103-243.ptld.qwest.net) (Ping timeout: 256 seconds)
[02:46:11] *** Quits: Fare (~fare@pool-71-185-187-182.phlapa.fios.verizon.net) (Ping timeout: 245 seconds)
[03:08:17] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 240 seconds)
[03:08:36] *** Joins: Fare (~fare@pool-71-185-187-182.phlapa.fios.verizon.net)
[03:09:58] <Zipheir> Sometimes it's good to explicitly avoid questions of efficiency or implementation until something has been accurately described.  Premature optimization (and implementation) are the programmer's curses.
[03:34:14] *** Joins: s-liao (~s-liao@101.86.96.21)
[03:51:30] *** Quits: elflng (~elflng@5.28.137.182) (Ping timeout: 250 seconds)
[03:52:17] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[04:05:31] *** Joins: badkins (~badkins@136.56.92.199)
[04:05:33] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[04:05:50] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[04:05:59] *** Joins: badkins (~badkins@136.56.92.199)
[04:11:54] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[04:18:39] <lagash> Zipheir: out of curiosity, can you name one or two of said books?
[04:43:29] *** Quits: Kooda (~kooda@natsu.upyum.com) (Ping timeout: 250 seconds)
[04:44:48] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 250 seconds)
[05:07:51] *** Joins: TCZ (~tcz@91.150.178.124)
[05:10:09] <Zipheir> lagash: Off the top of my head, one of the most recent is _Algorithm Design with Haskell_ by Richard Bird and Jeremy Gibbons.
[05:12:57] <Zipheir> lagash: Also, Bird's Pearls of Functional Algorithm Design, which has some nice examples of rational arithmetic coding using recursive narrowing.
[05:20:37] *** Quits: tripfandango (~tripfanda@77.137.68.50) (Ping timeout: 240 seconds)
[05:23:24] *** Quits: Fare (~fare@pool-71-185-187-182.phlapa.fios.verizon.net) (Ping timeout: 240 seconds)
[05:27:39] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[05:30:59] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[05:35:17] *** Joins: TCZ (~tcz@91.150.178.124)
[05:36:24] *** Joins: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net)
[05:43:08] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[05:54:35] *** Quits: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[05:56:48] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[05:57:12] *** Joins: Kooda (~kooda@natsu.upyum.com)
[06:11:10] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca)
[06:13:09] *** Joins: notzmv (~zmv@user/notzmv)
[06:17:42] *** Joins: badkins (~badkins@136.56.92.199)
[06:22:12] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[06:24:37] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca) (Ping timeout: 256 seconds)
[06:30:57] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[06:37:05] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[06:42:22] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[06:44:54] *** Joins: frost (~frost@user/frost)
[06:45:52] *** Quits: frost (~frost@user/frost) (Read error: Connection reset by peer)
[06:47:19] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca)
[06:50:10] *** Joins: frost (~frost@user/frost)
[06:53:56] *** Quits: frost (~frost@user/frost) (Client Quit)
[06:54:11] *** Joins: elflng (~elflng@5.28.137.182)
[06:54:12] *** Joins: s-liao (~s-liao@101.86.96.21)
[06:56:11] *** Joins: frost (~frost@user/frost)
[07:00:32] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[07:03:55] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[07:10:39] *** Joins: s-liao (~s-liao@101.86.96.21)
[07:11:49] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[07:13:16] *** Quits: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de) (Quit: The Lounge - https://thelounge.chat)
[07:15:19] <lagash> Incidentally I have those in my to-read list already, lol
[07:15:27] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:23:33] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 256 seconds)
[07:55:21] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[07:59:11] *** Quits: klovett (~klovett@107.116.92.161) (Quit: ZZZzzz…)
[08:00:37] *** Joins: hashfunc107e (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[08:03:10] *** Joins: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net)
[08:34:55] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[08:41:40] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[08:49:55] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[09:01:22] *** Parts: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca) ()
[09:03:07] *** Joins: badkins (~badkins@136.56.92.199)
[09:05:33] *** Joins: Darkcoal (~user@user/Darkcoal)
[09:07:29] *** Joins: zacque (~zacque@1.32.81.194)
[09:07:50] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 250 seconds)
[09:21:36] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Read error: Connection reset by peer)
[09:22:58] *** Quits: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net) (Ping timeout: 272 seconds)
[09:25:18] *** Joins: Everything (~Everythin@37.115.210.35)
[09:27:33] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[09:28:37] *** Joins: klovett (~klovett@107.116.92.161)
[09:29:34] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[09:33:40] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:34:14] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[09:35:35] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[09:57:01] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[09:57:07] *** Quits: Perryman (~perryman@user/perryman) (Ping timeout: 256 seconds)
[10:10:11] *** Joins: Perryman (~perryman@216.97.249.113)
[10:30:33] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[10:31:01] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[10:54:58] *** Quits: klovett (~klovett@107.116.92.161) (Quit: ZZZzzz…)
[11:36:20] *** Joins: silasfox (~sbv@p200300cec71b7900525c480533030ba1.dip0.t-ipconnect.de)
[11:38:35] *** Quits: masoudd (~masoudd@user/masoudd) (Quit: Leaving)
[11:40:30] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[11:50:12] *** Joins: tripfandango (~tripfanda@2a02:6680:2106:9d0c:e8c4:f074:1193:f6d3)
[11:50:40] *** Joins: civodul (~user@guix/contributor/civodul)
[11:51:58] *** Joins: s-liao (~s-liao@101.86.96.21)
[11:52:04] *** Quits: s-liao (~s-liao@101.86.96.21) (Client Quit)
[12:11:03] *** Joins: ManDay (~manday@user/manday)
[12:14:12] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[12:23:34] *** Joins: masoudd (~masoudd@user/masoudd)
[12:31:07] *** Joins: thevishy (~Nishant@2405:201:f005:c007:b514:75a9:41b7:5c1b)
[12:41:34] *** Joins: badkins (~badkins@136.56.92.199)
[12:45:17] *** Quits: tripfandango (~tripfanda@2a02:6680:2106:9d0c:e8c4:f074:1193:f6d3) (Ping timeout: 240 seconds)
[12:45:37] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[12:48:43] *** Joins: tripfandango (~tripfanda@188.64.206.14)
[13:04:28] *** Quits: thevishy (~Nishant@2405:201:f005:c007:b514:75a9:41b7:5c1b) (Quit: Leaving)
[13:40:50] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[13:54:51] *** Quits: ManDay (~manday@user/manday) (Quit: WeeChat 3.3)
[14:06:55] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[14:09:24] *** Quits: hashfunc107e (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 240 seconds)
[14:21:37] *** Joins: seninha (~chatzilla@user/seninha)
[14:26:23] *** Joins: notzmv (~zmv@user/notzmv)
[14:35:55] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 240 seconds)
[14:37:41] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[15:11:23] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[15:14:13] *** Joins: tatsumaru (~tatsumaru@82.147.131.155)
[15:14:43] <tatsumaru> hey guys, is it true that using immutable structures when NOT having to deal with concurrency is wasteful and unneeded?
[15:15:28] <dpk> i mean, better concurrency friendless is *one* advantage of immutable data …
[15:15:53] <dpk> it's easier to reason about functions with no side-effects
[15:15:56] <dpk> easier to test them
[15:16:53] <dpk> also, problems might not just come from concurrency but from some part of a program expecting data not to change in a certain way, where another part actually does change it — it increases isolation between modules
[15:18:44] <dpk> i guess that's special case of/a practical effect of being easier to reason about pure functions
[15:19:45] <tatsumaru> dpk: I see, thanks
[15:20:37] *** Joins: TCZ (~tcz@91.150.178.124)
[15:27:47] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 256 seconds)
[15:33:18] *** Joins: civodul (~user@guix/contributor/civodul)
[15:38:42] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 250 seconds)
[15:48:32] *** Parts: tatsumaru (~tatsumaru@82.147.131.155) ()
[16:01:35] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[16:10:24] *** Quits: zacque (~zacque@1.32.81.194) (Quit: Goodbye :D)
[16:16:33] *** Joins: badkins (~badkins@136.56.92.199)
[16:25:48] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[16:42:29] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:55:30] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[16:58:21] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:8151:9b0d:b8cd:32c4)
[16:58:21] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:8151:9b0d:b8cd:32c4) (Changing host)
[16:58:21] *** Joins: skapata (~Skapata@user/skapata)
[16:59:51] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 256 seconds)
[17:01:04] *** Quits: Techcable (~Techcable@168.235.93.147) (*.net *.split)
[17:01:04] *** Quits: mdhughes (~mdhughes@user/mdhughes) (*.net *.split)
[17:01:04] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (*.net *.split)
[17:01:04] *** Quits: snits (~quassel@ip98-179-76-75.ph.ph.cox.net) (*.net *.split)
[17:01:04] *** Quits: duncanm (sid287146@id-287146.tinside.irccloud.com) (*.net *.split)
[17:01:04] *** Quits: Balooga (sid407689@id-407689.lymington.irccloud.com) (*.net *.split)
[17:01:04] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (*.net *.split)
[17:01:04] *** Quits: teiresias (~chris@blvuug/founder/teiresias) (*.net *.split)
[17:01:04] *** Quits: dstein64 (~dstein64@dannyadam.com) (*.net *.split)
[17:01:04] *** Quits: rudybot (~luser@ec2-52-8-12-207.us-west-1.compute.amazonaws.com) (*.net *.split)
[17:01:04] *** Quits: eMBee (~eMBee@realss.com) (*.net *.split)
[17:01:04] *** Quits: lloda (~user@11-206-127-185.static.world-connect.ch) (*.net *.split)
[17:01:04] *** Quits: yosafbridge (~yosafbrid@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[17:01:04] *** Quits: DeeEff (~DeeEff@user/deeeff) (*.net *.split)
[17:02:30] *** Joins: Techcable (~Techcable@168.235.93.147)
[17:02:30] *** Joins: mdhughes (~mdhughes@user/mdhughes)
[17:02:30] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[17:02:30] *** Joins: snits (~quassel@ip98-179-76-75.ph.ph.cox.net)
[17:02:30] *** Joins: duncanm (sid287146@id-287146.tinside.irccloud.com)
[17:02:30] *** Joins: Balooga (sid407689@id-407689.lymington.irccloud.com)
[17:02:30] *** Joins: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com)
[17:02:30] *** Joins: teiresias (~chris@blvuug/founder/teiresias)
[17:02:30] *** Joins: dstein64 (~dstein64@dannyadam.com)
[17:02:30] *** Joins: rudybot (~luser@ec2-52-8-12-207.us-west-1.compute.amazonaws.com)
[17:02:30] *** Joins: eMBee (~eMBee@realss.com)
[17:02:30] *** Joins: lloda (~user@11-206-127-185.static.world-connect.ch)
[17:02:30] *** Joins: yosafbridge (~yosafbrid@static.38.6.217.95.clients.your-server.de)
[17:02:30] *** Joins: DeeEff (~DeeEff@user/deeeff)
[17:03:16] *** Quits: yosafbridge (~yosafbrid@static.38.6.217.95.clients.your-server.de) (Max SendQ exceeded)
[17:03:16] *** Quits: Techcable (~Techcable@168.235.93.147) (Max SendQ exceeded)
[17:03:24] *** Joins: Techcable (~Techcable@168.235.93.147)
[17:04:46] *** Joins: yosafbridge (~yosafbrid@static.38.6.217.95.clients.your-server.de)
[17:07:00] *** Joins: civodul (~user@guix/contributor/civodul)
[17:25:27] *** Joins: badkins (~badkins@136.56.92.199)
[17:29:38] *** Joins: X-Scale` (~ARM@83.223.250.236)
[17:30:36] *** Quits: X-Scale (~ARM@135.232.28.37.rev.vodafone.pt) (Ping timeout: 240 seconds)
[17:30:38] *** X-Scale` is now known as X-Scale
[17:42:58] *** Quits: masoudd (~masoudd@user/masoudd) (Read error: Connection reset by peer)
[17:43:23] *** Joins: masoudd (~masoudd@user/masoudd)
[17:52:14] *** Joins: TCZ (~tcz@91.150.178.124)
[17:58:38] *** Joins: klovett (~klovett@107.116.92.161)
[18:13:32] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[18:14:06] *** Joins: s-liao (~s-liao@101.86.96.21)
[18:14:59] *** Quits: silasfox (~sbv@p200300cec71b7900525c480533030ba1.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[18:15:16] *** Joins: silasfox (~sbv@p4fe8dfb9.dip0.t-ipconnect.de)
[18:17:01] *** Quits: s-liao (~s-liao@101.86.96.21) (Client Quit)
[18:19:02] *** Joins: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net)
[18:24:35] *** Quits: tripfandango (~tripfanda@188.64.206.14) (Ping timeout: 268 seconds)
[18:28:23] *** Joins: sp1ff (~user@c-73-189-25-64.hsd1.ca.comcast.net)
[18:29:33] <jcowan> tatsumaru: unfortunately ordinary Scheme data is all in mutable types.  There is a SRFI for immutable pairs and lists, but it's annoying to use.  So most people just pretend that pairs and strings are immutable.
[18:31:06] <jcowan> As long as you adhere to that rule throughout the program, you can just use lists (and strings) as immutable objects.
[18:31:48] <ecraven> I've used mutable strings as a "canvas" to draw ascii art on. I use them more often than mutable pairs, which I don't remember ever using ;)
[18:39:51] *** Joins: gproto23 (~gproto23@user/gproto23)
[18:58:52] *** Joins: tripfandango (~tripfanda@5.29.15.59)
[18:58:55] *** Quits: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[18:58:55] *** Quits: lumberjack (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[19:00:42] *** Joins: lumberjack (~alMalsamo@gateway/tor-sasl/almalsamo)
[19:02:33] <dpk> in Scheme i don't think i've ever used mutable pairs in ‘real’ code, though in Elisp i wrote code only this week that reuses lists to avoid consing at performance hot-spots
[19:03:00] *** Quits: tripfandango (~tripfanda@5.29.15.59) (Ping timeout: 240 seconds)
[19:03:18] <dpk> (this is probably mainly needed because Elisp's memory allocator and garbage collector still come from the ‘not significantly advanced beyond mid-1970s technology’ part of Emacs)
[19:03:28] *** Joins: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo)
[19:26:32] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:b4bf:6568:e1a6:6cf5)
[19:26:36] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 245 seconds)
[19:28:37] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:b4bf:6568:e1a6:6cf5) (Read error: Connection reset by peer)
[19:29:39] *** Joins: tripfandango (~tripfanda@77.137.77.22)
[19:33:09] *** Quits: TCZ (~tcz@91.150.178.124) (Ping timeout: 256 seconds)
[19:38:18] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[19:39:12] *** Quits: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net) (Ping timeout: 272 seconds)
[19:50:28] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[20:01:41] *** Joins: badkins (~badkins@136.56.92.199)
[20:04:15] <Zipheir> I tend to think that if list operations become performance-critical enough that one starts swapping in mutating procedures, then maybe lists aren't the right structure for this program.
[20:04:25] <mdhughes> I used mutable pairs for making trees, but I don't really use trees in any production code. I do occasionally set-cdr! on an alist, tho.
[20:04:57] <Zipheir> mdhughes: You're the mighty baremetal Schemer, though. :-p
[20:05:24] <mdhughes> True. I have a 15ms clock to keep in render loops.
[20:06:49] <Zipheir> I don't think I've ever seen set-car!/-cdr! used outside of SICP and SRFI 1.  I'm sure someone's using it, though.
[20:07:50] <mdhughes> Using immutable objects may in some cases make your code use L1 cache instead of L2 or calling out to slow-ass RAM, but no guarantees in any Scheme.
[20:11:35] <Zipheir> There's a lot of competing folklore on this point.  Olin Shivers wrote in a few places that using mutation extensively will "thrash the GC", but I don't know the details.
[20:12:19] <mdhughes> Mutation should't touch GC at all, since the parent object's still in the live pool.
[20:12:57] <Zipheir> I believe his concern related to generational GCs.
[20:13:23] <mdhughes> Like if I have a string "HELL" in live pool, (string-set! s 3 #\P), it's in exactly the same place, GC doens't know it's changed.
[20:14:11] <mdhughes> If you have non-primitive types in a vector or whatever, that might be a problem, throwing away the old value.
[20:14:51] <sjamaan> mdhughes: Depending on string representation, strings might need to be reallocated when setting them to a higher codepoint
[20:14:54] <mdhughes> And nothing says a Scheme has to have primitives, could be #\L is a non-integer object, but that'd be weird.
[20:15:34] <Zipheir> I don't know.  I find GCs very hard to reason about, and, again, opinions differ on what's effective.
[20:16:34] <mdhughes> I'm way too lazy/almost done with beer to write a demo, but I'm 90% sure if I make a string, use FFI to get its address, mutate it, force GC, FFI again, it'll be same address.
[20:17:09] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[20:17:20] *** Joins: badkins (~badkins@136.56.92.199)
[20:17:58] <mdhughes> I know some of my vectors-fulla-integers processing tasks haven't touched GC at all when I was trying to optimize them.
[20:19:37] <sjamaan> mdhughes: What string representation/character encoding is your Scheme using?
[20:20:15] <Zipheir> Certainly with Unicode a mutation might have to allocate a whole new string, as sjamaan says.
[20:20:42] <Zipheir> Hence all of the wrangling about post-SRFI-13 string libraries over the past decade.
[20:20:52] <mdhughes> Chez's UCS-32? I don't do a lot of cruel things to strings in it. CHICKEN with utf8 module is a nightmare, it's UTF-8 all right, O(n) char indexing.
[20:21:25] <sjamaan> UCS-32 would do the trick to not require reallocation, at the cost of a string copy when dealing with C
[20:22:31] <mdhughes> I only send a string on FFI when I'm registering a sound or image, then it's just an address/index after that.
[20:22:32] <Zipheir> UCS-32 = UCS-4 ?
[20:23:16] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[20:24:02] <sjamaan> Oh right, it's UCS-4 and UTF-32
[20:24:10] <sjamaan> Stupid terminology ;)
[20:24:24] <mdhughes> Yeah, that one.
[20:24:26] <Zipheir> The Unicode Consortium always picks very clear and memorable names. :)
[20:27:30] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[20:28:01] <Zipheir> IIRC there are only a very few Scheme implementations using UCS-4.  Here as elsewhere, UTF-8 seems to be the future.  Although you could use vectors of characters internally, I suppose.
[20:39:22] <sjamaan> CHICKEN's system is going to be reworked
[20:39:37] <Zipheir> Yes, which is great news.
[20:39:53] <sjamaan> It'll be UTF-8 native and have O(1) access if walking through the string linearly
[20:40:34] <ecraven> how does that work? will it store strings as utf-32 internally?
[20:40:52] <tokie> https://lololo.lol/mandelbrot i swapped my web terminal library out for xtermjs and it's way faster at rendering now
[20:40:56] <sjamaan> No, it'll work with a cursor pointing to the last operation's location
[20:41:07] <sjamaan> So it'll be O(n) scanning from the cursor
[20:41:22] <ecraven> ah, so (string-ref i) with increasing I will *not* be O(1), only cursor operations?
[20:41:57] <ecraven> or rather, with *decreasing* i it won't work ;)
[20:42:06] <Zipheir> Sounds like SRFI 130 would be a good fit, then.
[20:42:24] <ecraven> or actually, it will ;) ignore me please
[20:42:36] <ecraven> sjamaan: that sounds like a neat design!
[20:43:44] <sjamaan> ecraven: It doesn't require using a cursor based API, it'll have an internal cursor
[20:43:47] <tokie> that's how rust strings work
[20:43:52] <sjamaan> So string-ref will use that cursor internally
[20:43:58] <tokie> oh, rust requires you use the iterator API
[20:44:07] <tokie> sjamaan: that's nice!
[20:44:27] <sjamaan> This is the design, we don't know how it'll work in practice, of course
[20:45:08] <tokie> i just spent a few days trying to write a readline on xtermjs that supports unicode and javascript's support for unicode is really awful
[20:46:21] <mdhughes> You can just do a (string->bytevector) to get the UTF-8, but that sucks for internal use.
[20:46:29] <mdhughes> https://paste.debian.net/1232889/
[20:46:39] <mdhughes> You can now look at exactly what's in your strings. Annoyingly, Chez stores the full UTF-32 value, but only displays some crippled Latin-1 plane or soemthing. 
[20:46:47] <mdhughes> 7 #\ð 1F30A    should be Hokusai's wave 🌊
[20:48:23] <mdhughes> And limechat's driving me insane, it'll have chat focus in a different channel than I'm writing to if I carelessly hit the page key.
[20:55:37] <dpk> sjamaan: hah, exact same trick i recently implemented for Chibi
[20:56:30] <Zipheir> It sounds a bit like a zipper.
[20:56:33] <sjamaan> dpk: Maybe that's where Felix saw the idea
[20:57:08] <dpk> https://github.com/ashinn/chibi-scheme/pull/793
[20:57:37] <dpk> i later learned that Emacs Lisp does the same https://nullprogram.com/blog/2019/05/29/
[20:58:58] <dpk> well, almost the same: mine has a per-string bookmark instead of a VM-global one
[20:59:25] <Zipheir> Yeah, it's basically a one-direction zipper.
[20:59:53] <Zipheir> Although no reason traditional two-way zippers wouldn't do the trick.
[21:01:54] <dpk> i have a branch which adds the ability to go backwards from the bookmark as well, but it's slower to skip backwards in UTF-8 than forwards (because you have to look at each continuation byte individually, whereas when going forwards you know from the header byte how many continuation bytes you need to skip)
[21:02:19] <dpk> which is why i need benchmarks. maybe the Chicken people will come up with some
[21:06:32] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 240 seconds)
[21:07:42] * dpk reads https://lists.nongnu.org/archive/html/chicken-hackers/2022-01/msg00002.html
[21:32:13] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[21:32:28] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[21:33:04] *** Quits: daviid (~user@179.210.58.162) (Remote host closed the connection)
[21:33:33] *** Joins: civodul (~user@guix/contributor/civodul)
[21:36:47] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[21:38:14] *** Joins: daviid (~user@179.210.58.162)
[21:38:53] *** Joins: notzmv (~zmv@user/notzmv)
[22:13:26] *** Joins: Psybur (~Psybur@mobile-166-171-56-243.mycingular.net)
[22:15:29] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 256 seconds)
[22:20:09] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Quit: catonano)
[22:20:34] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[22:21:19] *** Quits: silasfox (~sbv@p4fe8dfb9.dip0.t-ipconnect.de) (Quit: WeeChat 3.4)
[22:24:04] *** Joins: silasfox (~sbv@p200300cec71b7900525c480533030ba1.dip0.t-ipconnect.de)
[22:33:03] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 256 seconds)
[22:34:53] *** Joins: Darkcoal (~user@user/Darkcoal)
[23:29:25] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[23:29:40] *** Joins: gproto23 (~gproto23@user/gproto23)
[23:32:42] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[23:48:41] *** Joins: badkins (~badkins@136.56.92.199)
[23:51:00] *** Quits: silasfox (~sbv@p200300cec71b7900525c480533030ba1.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[23:53:02] *** Joins: silasfox (~sbv@p4fe8dfb9.dip0.t-ipconnect.de)
