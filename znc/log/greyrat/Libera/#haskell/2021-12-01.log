[00:00:02] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[00:00:33] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[00:01:34] *** Joins: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net)
[00:01:38] <geekosaur> you may find that +RTS -V0 makes the output more sane
[00:02:21] <sm> there was a blog post on it recently, perhaps from tweag
[00:02:41] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41f2:b4d5:142e:946f) (Remote host closed the connection)
[00:02:52] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[00:04:10] *** Joins: Erutuon (~Erutuon@user/erutuon)
[00:05:53] *** Quits: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[00:07:11] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[00:08:52] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[00:09:11] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[00:10:24] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Remote host closed the connection)
[00:10:51] *** Quits: kmein (~weechat@user/kmein) (Quit: ciao kakao)
[00:11:11] *** Joins: kmein (~weechat@user/kmein)
[00:12:40] <Franciman> thanks y'all
[00:13:29] <Franciman> now what's left is making sense of the output
[00:13:31] <Franciman> AHAH
[00:19:05] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186) (Remote host closed the connection)
[00:19:21] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186)
[00:19:28] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Read error: Connection reset by peer)
[00:20:13] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[00:21:17] *** Quits: MoC (~moc@user/moc) (Quit: Konversation terminated!)
[00:26:36] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[00:26:40] *** Quits: _bo (~bo@217.18.216.247) (Ping timeout: 256 seconds)
[00:26:55] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[00:28:35] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[00:28:54] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[00:32:07] *** Joins: LukeHoersten (~LukeHoers@user/lukehoersten)
[00:33:41] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[00:33:56] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186) (Remote host closed the connection)
[00:35:10] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186)
[00:35:54] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:36:48] *** Joins: maroloccio (~marolocci@151.53.155.184)
[00:37:24] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186) (Remote host closed the connection)
[00:38:15] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41f2:b4d5:142e:946f)
[00:40:32] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 252 seconds)
[00:42:12] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[00:42:15] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[00:42:30] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[00:43:37] *** Quits: deadmarshal (~deadmarsh@95.38.229.118) (Ping timeout: 256 seconds)
[00:43:37] *** Quits: alx741 (~alx741@181.196.69.176) (Ping timeout: 256 seconds)
[00:44:16] *** Joins: acidjnk_new (~acidjnk@p200300d0c7271e72351a12a888efd4cb.dip0.t-ipconnect.de)
[00:44:18] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[00:46:02] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186)
[00:47:25] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:50:26] <dsal> My new MacBook arrived. Has twice as much ram as my Thinkpad.  In an hour, I might be able to start setting up nix...
[00:50:45] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186) (Remote host closed the connection)
[00:51:06] <dsal> Lots of memory means I don't have to learn to write good code.
[00:51:15] *** Joins: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[00:51:33] <dolio> You should program in Agda, then.
[00:51:33] <geekosaur> there's something about the nature of programmers in there somewhere
[00:52:49] <sm> congrats!
[00:53:47] *** Quits: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk) (Remote host closed the connection)
[00:54:22] *** sshine_ is now known as sshine
[00:54:30] *** Quits: MaybeJustJames (~jacol@2001:981:4ea3:1:a8b4:6ac6:c93b:9bcf) (Remote host closed the connection)
[00:56:26] *** Quits: michalz (~michalz@185.246.204.62) (Remote host closed the connection)
[00:56:30] *** Joins: alx741 (~alx741@186.178.109.129)
[00:58:07] *** Joins: pavonia (~user@user/siracusa)
[00:59:26] <ephemient> is https://stackage.org down for everybody or just me?
[00:59:53] <janus> ephemient: down for me too
[01:00:03] <sm> responding slowly at least
[01:00:13] <geekosaur> down/very slow here too
[01:00:20] <maerwald> dsal: and lots of storage means you can use resource hogs like nix
[01:00:29] *** Quits: LukeHoersten (~LukeHoers@user/lukehoersten) (Quit: Textual IRC Client: www.textualapp.com)
[01:01:22] <geekosaur> just loaded
[01:01:26] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 252 seconds)
[01:02:44] <sm> I feel a disturbance in the Force.. like a sudden influx of new haskell users
[01:03:01] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186)
[01:03:06] *** Joins: jgeerds (~jgeerds@55d45b75.access.ecotel.net)
[01:03:06] <Rembane> New semester perhaps?
[01:03:14] <sm> it's dsal.
[01:03:26] <EvanR> Like a billion python users suddenly just... gone
[01:03:27] <sm> unleashing the new macbook
[01:03:45] <EvanR> (to haskell)
[01:04:06] *** Quits: jeetelongname (~jeet@eduroam-public-46.nat.port.ac.uk) (Ping timeout: 245 seconds)
[01:05:13] <Rembane> 's gonna be legendary
[01:05:34] <Franciman> is there any known trick to force things to go in the cache?
[01:05:43] <dsal> maerwald: I do use resource hogs like nix. :)
[01:05:49] <Rembane> Franciman: What cache? What things?
[01:06:07] <ephemient> ok hmm it *is* responding, but taking like a minute per request. I wonder what's going on with it.
[01:06:11] <dsal> I didn't go crazy on storage, though.  1TB goes pretty far.
[01:06:56] *** Quits: alx741 (~alx741@186.178.109.129) (Ping timeout: 252 seconds)
[01:07:11] <EvanR> heh, cache wisperer
[01:07:16] <Franciman> Rembane: L1 cache
[01:07:24] <Franciman> of the CPU
[01:08:07] <sm> I think reading and optimising the generated core would be one important step
[01:09:13] <maerwald> dsal: that's quickly full with nix and docker
[01:10:08] <dsal> I gc'd 100GB of nix last week.
[01:10:25] <dsal> I don't do much docking
[01:10:57] <maerwald> oh, gc actually worked for you?
[01:10:58] <dsal> Docker seems so much worse than nix where they overlap.
[01:11:10] <dsal> gc always works for me, but it overshot
[01:11:19] *** Quits: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[01:11:20] <maerwald> I think last time I tried it just busted everything
[01:11:44] <dsal> There were two requirements of ghc that apparently weren't declared
[01:11:52] <dsal> Oh, maybe that's what you meant. :)
[01:12:13] <maerwald> ah well... my expectations when using nix are very low
[01:15:22] <maerwald> GCing docker is less dangerous
[01:15:40] <maerwald> but I usually just delete the entire store
[01:15:59] <maerwald> because GC takes half an hour, doing who knows what
[01:16:17] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[01:18:04] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:f9a9:132:7129:df1c) (Quit: Textual IRC Client: www.textualapp.com)
[01:19:29] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:b590:8966:cd38:8f41)
[01:20:10] *** Joins: alx741 (~alx741@181.196.69.153)
[01:21:59] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[01:23:51] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[01:25:08] <monochrom> dsal: Congrats! Lots of RAM means you can run JHC in its default mode which doesn't do GC at all bwahahaha
[01:25:47] <monochrom> Enjoy GCless hard real-time Haskell!
[01:26:14] <energizer> i want to find a correct implementation of complex duration comparisons like "years 1 + days 1 < years 1 + days 2". does haskell have something like that?
[01:26:32] <dsal> Which year?
[01:27:05] *** Joins: a6a45081-2b83 (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507)
[01:27:08] *** Joins: vysn (~vysn@user/vysn)
[01:27:17] <energizer> *i want to find a correct implementation of complex duration comparisons like "years 1 + days 1 < years 1 + days 99". does haskell have something like that?
[01:27:21] <janus> even without a GC, is it possible to do constant-time memory allocation? only with no heap usage, right?
[01:27:50] <geekosaur> you can do it the way the nursery does it
[01:27:51] <monochrom> Allocation has always been constant-time IIUC.
[01:28:27] <monochrom> including heap allocation. (What else is there in the context of Haskell?)
[01:28:35] <geekosaur> it's only gc of and into generations > 0 that are slower
[01:28:56] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 252 seconds)
[01:29:26] <geekosaur> energizer, how much do you care about things like leap years?
[01:29:34] <dsal> energizer: you'd have to define "year" more rigidly than generally useful.  Even "day" isn't necessarily the same duration all the time
[01:29:42] <geekosaur> time is *hard* to do right
[01:29:55] *** Joins: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk)
[01:29:58] <energizer> i dont think any answer to those questions will result in "years 1 + days 1 < years 1 + days 99" being false
[01:30:02] <dsal> Nobody understands time
[01:30:02] *** Quits: chomwitt (~chomwitt@2a02:587:dc16:f200:12c3:7bff:fe6d:d374) (Ping timeout: 252 seconds)
[01:30:26] <geekosaur> https://infiniteundo.com/post/25326999628/falsehoods-programmers-believe-about-time
[01:30:40] <monochrom> OK, I can see that a malloc-free pair of C, if it uses a free-list implementation, could be non-constant because the 1st node of the free list is too small and you have to walk through the whole list looking for a big one.
[01:30:43] <energizer> i dont think this is a falsehood
[01:31:38] <monochrom> But without any notion of free or GC, you can have a much dumber allocator. It can be just "heap_pointer += n".
[01:31:51] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:14f6:792c:9624:6b14)
[01:32:08] <monochrom> (which GHC does, too, at the price of needing a much smarter GCer)
[01:33:16] *** Quits: a6a45081-2b83 (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507) (Remote host closed the connection)
[01:33:43] *** Joins: deadmarshal (~deadmarsh@95.38.115.243)
[01:33:49] <monochrom> energizer: I think I will just refer you to the "time" library package, which comes with GHC, and look into all those Data.Time.* modules and find what you need.
[01:34:37] *** Quits: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[01:34:47] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:35:15] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:4de4:2055:b8c4:f1e) (Ping timeout: 264 seconds)
[01:36:18] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41f2:b4d5:142e:946f) (Remote host closed the connection)
[01:36:35] *** Joins: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk)
[01:38:07] *** Quits: ub (~Thunderbi@p200300ecdf0ba2aaa54fdd1e9768c0b5.dip0.t-ipconnect.de) (Quit: ub)
[01:38:10] <energizer> looks like a nice time library. how correct is it, on a scale from normal to formally verified?
[01:38:14] <monochrom> And in case you feel information overload, the two most important types are UTCTime (for an absolute point in time) and NominalDiffTime (for a duration).
[01:38:30] <monochrom> Normal.
[01:38:47] <energizer> thanks
[01:38:49] *** Joins: AlexNoo (~AlexNoo@178.34.160.14)
[01:39:10] <EvanR> time is relative
[01:39:23] <EvanR> not everything needs to care about leap seconds, or even time zones
[01:39:51] <energizer> relative?
[01:40:03] <EvanR> times not only a construct but there are many to choose from xD
[01:40:27] <energizer> sure, like anything
[01:40:27] <sm> energizer: the time library is very good and probably more correct than most things out there
[01:40:35] <EvanR> https://i.imgur.com/g6rTcZK.png
[01:40:45] <janus> i guess the my question is confusing because of the haskell heap not being equal to the c heap
[01:41:13] <monochrom> Yeah :)
[01:41:32] <janus> the runtime may not even start if it requests too much stack space. and if overcommitting is off, there would be some limit at which it can't malloc
[01:41:43] <monochrom> Heap implementation is very different between a malloc-free language and a GCed language.
[01:42:20] <energizer> nice diagram EvanR 
[01:43:37] <monochrom> Or rather, a language with transparent pointers and a language with opague pointers.
[01:44:15] <monochrom> Transparent pointers forbidding compaction, while opague pointers allowing compaction, for example.
[01:45:33] <janus> but haskell has both, no?
[01:45:48] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[01:46:10] <janus> the ffi suggests that it has, i think?
[01:46:10] <monochrom> Haskell 2010 doesn't. GHC does, in terms of primitive pinned byte arrays.
[01:46:26] <monochrom> Yeah, it has C malloc.
[01:46:42] *** Joins: slack1256 (~slack1256@191.126.99.71)
[01:48:11] <monochrom> FFI's C malloc really uses your libc. So it is a different heap space from the GC'ed heap for normal Haskell code.
[01:48:52] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[01:49:24] *** Quits: deadmarshal (~deadmarsh@95.38.115.243) (Ping timeout: 256 seconds)
[01:50:22] <hpc> what i read from that diagram is in practice, always use UTC and ZonedTime
[01:50:26] <janus> if i give something a Storable instance, is it copied to the C heap when needed? and then copied back?
[01:50:32] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[01:50:59] <monochrom> Orthogonal.
[01:51:16] <monochrom> If the space was obtained from malloc then it's already in the C heap.
[01:51:38] *** Joins: mestre (~mestre@191.177.175.57)
[01:51:52] <monochrom> Storable does not specify how to allocate, at all. It only specifies size, peek, poke.
[01:51:55] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[01:52:23] <monochrom> But OK, peeking and poking do not cause copying.
[01:54:26] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[01:54:43] <monochrom> err, do not cause copying between two heaps.
[01:54:45] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[01:54:57] <monochrom> (Clearly, copying between memory and registers, yes.)
[01:55:29] <monochrom> You do not even know that the address is in the heap space, and it should not matter.
[01:56:19] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:56:40] <monochrom> Suppose the C side has "int xxx;" at the top level.  A certain piece of C code decides to call a certain piece of Haskell code with &xxx.  The Haskell side should still be able to peek and poke it.  Totally not heap.
[01:56:41] <janus> hmm yeah i guess i imagined it the wrong way around. the usual style is to write a haskell wrapper for a c struct, which can then be filled from haskell. then i can pick any allocation strategy and pass that pointer into C, and C won't care where it is
[01:56:50] <boxscape> are there any reasons to believe that this shouldn't work? https://github.com/ghc-proposals/ghc-proposals/discussions/463
[01:56:51] <boxscape> (Allowing type family applications in instances if they can be fully evaluated)
[01:56:58] *** Quits: slack1256 (~slack1256@191.126.99.71) (Remote host closed the connection)
[01:57:44] <janus> i don't even need to know about the haskell heaps to do that, i just need to know the pointer is stable as long as i am inside my withForeignPtr block
[01:58:29] <hpc> boxscape: type families always felt like a logical extension of type aliases to me
[01:58:37] <hpc> and you can write instance Num String just fine
[01:58:40] <hpc> +1 from me
[01:58:44] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:58:54] <boxscape> yeah, that's true
[01:59:10] <awpr> aren't they often referred to as "type synonym families", too?
[01:59:21] <hpc> a partially applied type family is like a partially applied type alias, it just doesn't work
[01:59:38] <boxscape> awpr yep, in fact the error message mentioned in the discussion does
[01:59:43] <hpc> type X a b = Y a b is very different from type X a = Y a
[02:02:56] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[02:03:07] *** Joins: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net)
[02:03:13] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[02:03:28] <janus> it just seems intuitively to me like, if i have that previous model with a C struct with hsc2hs or something, and I have a matching haskell record that i use to fill that struct, copying will be needed, these are two separate data structures
[02:04:14] <monochrom> Yeah that kind of copying has to happen.
[02:04:46] <monochrom> I worded "peeking and poking does not cause copying" wrong. Oops. I meant something else.
[02:05:56] <janus> i thought Daan Leijnen's new "functional but in-place" paradigm is meant to prevent copying
[02:06:07] <janus> maybe it also makes it easier to treat records like C structs
[02:06:28] <janus> *Leijen
[02:07:16] <geekosaur> you still have the problem of data representation
[02:07:32] *** Quits: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[02:07:50] <geekosaur> linked lists just aren't going to match up with anything useful C-side
[02:08:34] <monochrom> In the case of Haskell, laziness causes a necessary difference between Haskell types and C types.
[02:10:46] <janus> why can't linked list match up with anything useful on the C side? if the linked list is instantiated with a particular type that maps to a struct, the linked list can be compiled to a tag and an optional pointer to the next element.
[02:11:46] <monochrom> Hrm I forgot polymorphism too. Parametric polymorphic also gets in the way.
[02:12:16] <hpc> janus: laziness
[02:12:32] <janus> ah ok, i thought monochrom and geekosaur were making different points
[02:13:13] <monochrom> Actually I don't know geekosaur's point :)
[02:13:27] <monochrom> But your "instantiated" reminds me.
[02:13:36] <geekosaur> no, they're different aspects of the same point. (and "anything useful" here means in part that there is no *standard* linked list representation in C)
[02:16:27] <janus> that just means a standard needs to be written ;)
[02:16:53] <janus> we could argue that C is impossible to link because there is no universal ABI. but no, we just have decide on an ABI and be consistent, then it can work 
[02:18:41] <janus> i suspect that doesn't address the laziness point. as far as i understood, it is related to how C doesn't have sum types? so different constructors need to reuse the same space and C doesn't provide an elegant way to do that
[02:19:25] <janus> hence the 'tag' which is not a language level construct, but just some ad-hoc way
[02:20:04] <monochrom> So, what you said works for C++, which takes the stance of "you don't have a parametric polymorphic function, you have a template, compiler does code duplication (even at the source level) at monomorphic use sites".
[02:20:23] <monochrom> But FPers tend not to do that.
[02:20:31] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[02:20:39] *** Joins: sproso (~sproso@d137-186-73-215.abhsia.telus.net)
[02:20:47] <monochrom> FPers do this: If you have "f :: a -> a", it's compiled to "void *f(void *)"
[02:20:52] <geekosaur> janus, laziness requires that a value be represented as a pointer
[02:21:23] <geekosaur> we have a strict (or C/machine style if you prefer) Int# (or Int64# as of 9.2.1), and a lazy Int
[02:21:35] <geekosaur> which is an I# Int64# under the hood
[02:22:03] <monochrom> So even if you call it as "f (4 :: Int)" it goes as "allocate heap object to store 4, pass address to f".
[02:22:29] <monochrom> And then laziness doubles down on that because the void* can point to either thunk or value.
[02:22:33] <geekosaur> and laziness comes in because we always work with a pointer to that, so that pointer could be undefined
[02:22:37] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41f2:b4d5:142e:946f)
[02:22:42] <geekosaur> or a pointer to an unrealized computation
[02:22:50] <janus> right, i don't know how to address laziness . Leijen probably punted on that :P
[02:23:17] <monochrom> I don't think FBIP does laziness at all. Does Koka do laziness?
[02:24:18] <janus> i don't know, maybe it could have something like idris where you can opt-in to laziness.
[02:25:23] <monochrom> I'm dumb, it's very easy to see. Just look at the APP rule :)
[02:26:35] <monochrom> Hrm, maybe not this one. "expression e1 is translated to ref-counted expression e2". Now I know nothing haha.
[02:27:18] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186) (Remote host closed the connection)
[02:28:15] <maerwald> let's get rid of laziness
[02:29:55] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[02:30:02] <monochrom> It looks like eager.
[02:30:13] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[02:31:28] *** Quits: __monty__ (~toonn@user/toonn) (Ping timeout: 264 seconds)
[02:31:51] *** Quits: jstolarek (~jstolarek@137.220.120.162) (Ping timeout: 256 seconds)
[02:32:57] *** Joins: __monty__ (~toonn@user/toonn)
[02:33:16] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[02:33:23] <Axman6> maerwald: we'll get around to it one day, I'm sure
[02:33:48] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Remote host closed the connection)
[02:34:05] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[02:34:59] <monochrom> When it is really demanded, yes. >:)
[02:36:00] <geekosaur> that will be a sad day
[02:36:20] <geekosaur> when haskell abandons its core principle
[02:36:34] <maerwald> SPJ said the next Haskell might be strict
[02:36:58] <monochrom> No worries geekosaur, I (and I think Axman6) were doing meta-punning on laziness! Can't you see? >:)
[02:38:25] <maerwald> I think laziness is a failed experiment. It only really serves compiler optimizations, but creates more headache for the users and is a poor streaming hack
[02:39:47] <monochrom> No, I think it's successful. "f bottom = bottom" sucks.
[02:40:17] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[02:40:56] <monochrom> if-then-else not being a function sucks.
[02:41:35] <monochrom> I do not think of laziness as the only solution to streaming. I only admit that I do benefit from it, but only when it's appropriate.
[02:41:51] <dibblego> can't write map in terms of foldr with scala, that sucks
[02:41:52] <jackdk> At least we have Data.Bool.bool
[02:42:10] <jackdk> and take n . sort
[02:42:29] *** ChanServ sets mode: -o dibblego
[02:42:46] <monochrom> But as said, my reason for preferring laziness is because it enables "f True x y = x; f False x y = y".
[02:43:14] <monochrom> I tried to do that in Python. It was disappointing.
[02:43:20] <dibblego> map f = foldr ((:) . f) [] -- I like laziness because it enables this
[02:43:29] <monochrom> I then tried to do that in Scheme. It was also disappointing.
[02:43:32] <maerwald> you can have laziness in strict languages
[02:43:39] <maerwald> but the language is strict
[02:43:50] <dibblego> with so much effort that it is not worth it, yes
[02:43:53] <janus> monochrom: you tried refactoring through a if-then-else? or you tried writing lazy python by putting everything in lambdas?
[02:44:19] <dibblego> I have also tried this with python, but the failure was obviously imminent
[02:44:36] <monochrom> I tried the simple-minded "def f(b, x, y): if b return x else return y"
[02:44:44] <dibblego> dead
[02:45:14] <monochrom> Well, that reminded me that I needed to do "def f(b, x, y): if b return x() else return y()".  Well, that sucks.
[02:45:18] <dibblego> def f(b, x, y): if b return x() else return y() # but ya can do laziness in a strict language!
[02:45:32] <hpc> yeah, and then you have to be able to say "function of zero arguments" with a straight face
[02:45:37] <monochrom> Also, it's not the same. You lose memoization.
[02:45:42] <janus> i wonder with this question how people can have such different perspectives... is it because monochrom encounters a lot more infinite loops than maerwald? surely the problem domain must have something to do with it
[02:46:00] <monochrom> Or put it theoretically, call-by-name is not call-by-need.
[02:46:23] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:b590:8966:cd38:8f41) (Quit: gone to sleep. ZZZzzz…)
[02:46:23] <hpc> i think it comes from just how you think about the definitions of things
[02:46:35] <hpc> that definition of f leans heavily on equational reasoning
[02:46:44] <janus> i mean, why does it matter how to reason about bottom if bottom never occurs? it could tip the scale if you have more bottoms than the next person
[02:47:03] <kennyd> @src and
[02:47:03] <lambdabot> and = foldr (&&) True
[02:47:04] <geekosaur> but bottom does occur in strict languages
[02:47:06] <maerwald> janus: when you've experienced complicated laziness issues in production that cost the business a lot of money and engineering time, you realize that for many thing, you don't actually want it. High-performance libraries already depend on hacks and whatnot, not on naive laziness
[02:47:23] <geekosaur> it just means hangs or crashes
[02:47:28] <kennyd> @src any
[02:47:28] <lambdabot> any p = or . map p
[02:47:32] <maerwald> every library I looked at that uses laziness to implement streaming sucks
[02:47:36] <maerwald> (e.g. tar)
[02:47:51] <maerwald> so you don't even want it for that
[02:47:59] <monochrom> Only with a total language are you really free of bottom.
[02:48:08] <maerwald> for networking, even the maintainers of said packages say they don't want laziness in their code
[02:48:40] <monochrom> The rest, it depends on whether you focus on operational or denotational semantics.
[02:48:51] <maerwald> the only pro argument I constantly hear is that you get neat optimizations tricks
[02:48:53] <kennyd> for `any p = or . map p', all functions involved need to be lazy
[02:48:57] <kennyd> +to work
[02:49:05] <dibblego> you saw compositional arguments earlier
[02:49:05] <janus> geekosaur: hangs or crashes are the worst though ;) i think request timeout is tested less than just normal failures like permission denied 
[02:49:09] <maerwald> but if you implement a high performance library you may do these tricks yourself anyway 
[02:49:21] <monochrom> If you focus on operational semantics, then, by the time your control flow is inside your function, you are assured that all parameters are non-bottoms, yes.
[02:49:51] <monochrom> But if you focuse on denotational semantics, then "f bottom = bottom" is still there, it's a true statement.
[02:51:52] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 264 seconds)
[02:51:53] <maerwald> and... have you ever used a library where the performance characteristics depends heavily on laziness or inlining? Those properties constantly break
[02:52:39] <dibblego> yes, no they don't
[02:53:01] <dibblego> > take 2 (map (+1) [1..])
[02:53:02] <lambdabot>  [2,3]
[02:53:06] <dibblego> still works, phew
[02:53:18] *** Quits: gawen (~gawen@user/gawen) (Quit: cya)
[02:53:24] <maerwald> erm
[02:53:31] <maerwald> I'm not talking about silly repl examples :p
[02:53:39] <int-e> inlining and rewrite rules are everywhere
[02:53:50] <maerwald> yep and they constantly break
[02:53:56] <maerwald> see streamly
[02:54:01] <dibblego> oh, you mean poorly designed libraries that focus on operational semantics while trying to exploit laziness? No, I haven't used those libraries, since I don't bother picking them up to begin with.
[02:54:17] <maerwald> aha
[02:54:39] <maerwald> well, lens/optics also play that game
[02:54:44] <maerwald> you don't use those?
[02:54:50] <dibblego> of course I do, and no they don't
[02:55:10] <maerwald> absolutely... they're affected by small GHC changes
[02:55:38] <maerwald> or a PR unknowingly breaking laziness
[02:55:38] <monochrom> Food for thought: tibbe is a battle-tested Haskeller, and his style guide recommends: lazy functions, eager data.
[02:55:40] <int-e> lists, bytestring, vector ... everything with fusion. it's just constant factors but those matter
[02:55:47] <dibblego> I worked on data-lens before lens existed, and now I use mostly lens — please show me where it broke in all those years
[02:55:48] <maerwald> except those are smart guys understanding GHC
[02:55:57] <maerwald> but don't tell me that's easy or common
[02:56:28] <int-e> these things are battle-tested and relatively robust but it does hurt when they fail
[02:56:41] <maerwald> dibblego: it's constantly fixed up, that's what I said
[02:56:55] <monochrom> It would have said "turn on StrictData, but don't turn on Strict" if it were written after those extensions were introduced.
[02:57:04] <dibblego> perhaps I don't know what this means, "those properties constantly break"
[02:57:21] <maerwald> I'm not going to pull out all the issues now :)
[02:57:32] <dibblego> then I won't know what "properties"
[02:57:35] <monochrom> And indeed that's also the advice from other front-line Haskellers.
[02:57:53] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[02:58:26] * geekosaur does not see the page-long list of updates that would corroborate
[02:58:33] <maerwald> Haskell is a performance debugging nightmare
[02:58:39] *** Joins: gawen (~gawen@user/gawen)
[02:58:50] <jackdk> there's a warning in the haddocks for either (^?) or preview that says if you see space leaks, try `firstOf` instead because the First monoid is lazy
[02:58:52] <maerwald> and laziness is one of the reasons
[02:59:14] <dibblego> when I think of properties breaking, I think of e.g. this: 
[02:59:20] <dibblego> scala> def map[A, B](f: A => B, x: Stream[A]): Stream[B] = x.foldRight(Stream.empty[B])((a, b) => Stream.cons(f(a), b))
[02:59:25] <dibblego> scala> streamMap((_: Int) + 1, Stream.continually(1)).take(5)
[02:59:26] <dibblego> java.lang.StackOverflowError
[02:59:28] <maerwald> the last memory leak I found in cardano a week ago
[02:59:54] <maerwald> after 2hours I stopped searching and just filed a bug
[02:59:57] <dibblego> s/map/streamMap
[03:00:23] <monochrom> OK I'm going to be elitist. I'm going to agree up to this much: Eagerness is a better idea, for programmers below let's say the 50th percentile.
[03:00:33] <dibblego> I will support this notion.
[03:01:07] <kennyd> <maerwald> Haskell is a performance debugging nightmare <- why do trollish statements like this get tolerate? it is not the first time I've heard something similar from the same person either
[03:01:10] <hpc> banning recursion is also a better idea for that same group
[03:01:25] <dsal> Only allow them to use fix
[03:01:25] <monochrom> :)
[03:02:01] <maerwald> kennyd: that's my production experience
[03:02:04] <monochrom> Laziness is a power tool and is also harder to use. I am aware of the cost and benefit, and I chose it.
[03:02:08] <yushyin> kennyd: it is always the same discussions with always the same participants in here
[03:02:24] <kennyd> maerwal, I don't care, you are using loaded language for trolling and attention
[03:02:28] <maerwald> monochrom: have you worked on a large scale Haskell codebase that needs to meet certain performance criteria?
[03:02:35] <monochrom> No.
[03:02:50] <monochrom> But tibbe has.
[03:02:50] <maerwald> kennyd: loaded language? :D
[03:02:57] <maerwald> monochrom: yeah, me too
[03:03:13] <maerwald> and even after hiring expensive Haskell consultants they couldn't figure it out :D
[03:03:43] <monochrom> What I have experience is in observing students in the lower 50th percentile vs students in the upper 50th percentile.
[03:03:45] <dibblego> I have done this. Yes, figuring it out after the code is written (poorly) is one of the most difficult situations. It can be done though.
[03:03:46] <maerwald> so I don't think this has much to do with elitism
[03:03:56] <maerwald> GHC is a moving target
[03:03:59] <maerwald> laziness is a moving target
[03:04:13] <maerwald> you need to invest a lot of manpower in it
[03:04:25] <maerwald> facebook does, cardano does (but they struggle too)
[03:04:28] *** Quits: cosimone (~user@93-47-231-3.ip115.fastwebnet.it) (Ping timeout: 264 seconds)
[03:04:34] <dibblego> I would like to see all the manpower in my code because of laziness
[03:04:44] <monochrom> Laziness, recursion, non-operational reasoning of code... a lot of nice things are out of reach for the lower ones, yes, can't be helped.
[03:04:49] <dibblego> as the example above illustrates, quite the opposite is true
[03:04:57] <hpc> facebook is a bad example, they've written their own php implementation from scratch multiple times
[03:05:07] <hpc> if you want to argue "lots of manpower"
[03:05:55] <janus> hpc: how does a php implementation disprove that they have a lot of manpower?
[03:06:14] <maerwald> there's a reason standard chartered uses Mu, which is strict
[03:06:26] <hpc> janus: if haskell requires such a wasteful amount of expert-written code, so does the most popular language in the world
[03:06:43] <hpc> and somehow the web hasn't collapsed
[03:06:49] <monochrom> I think hpc means: Having re-implemented PHP multiple times disproves that the immense manpower was spent majorly on fighting laziness.
[03:07:30] <monochrom> If anything, it was spent on fixing PHP, no? >:)
[03:07:30] <maerwald> monochrom: then you haven't read Simon Mars last post on the GHC/base breaking discussion, where he explained how new GHC versions break their performance characteristics
[03:09:51] *** Quits: sproso (~sproso@d137-186-73-215.abhsia.telus.net) (Quit: Client closed)
[03:09:55] <janus> maerwald: where can i find that ? i tried googling for it, couldn't see it
[03:10:53] <maerwald> https://github.com/haskell/core-libraries-committee/issues/12#issuecomment-971794515
[03:11:23] *** Quits: sus (zero@user/zeromomentum) (Quit: the lounge - https://webirc.envs.net)
[03:11:50] <janus> thanks
[03:11:53] <maerwald> https://github.com/composewell/streamly/issues/1061 is also a good read
[03:12:22] <maerwald> you can also search the cardano issue tracker for performance issues :p
[03:12:47] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[03:12:51] <yushyin> :p:p
[03:12:51] *** Joins: dagit (~dagit@2001:558:6025:38:6476:a063:d05a:44da)
[03:12:55] *** Quits: max22- (~maxime@2a01cb088335980070cf7b273a01dbc1.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:13:05] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[03:13:11] <hpc> one person-year on a typical software team is a month or two, and they forked the core tools
[03:13:19] <hpc> from my experience that's not bad at all
[03:13:20] <concrete-houses> postgresql is harder to program than I had thought
[03:13:23] <concrete-houses> sql too
[03:13:26] <concrete-houses> its hell
[03:13:30] <maerwald> or https://github.com/yesodweb/wai/pull/752#issuecomment-501531386
[03:13:43] <concrete-houses> but how do you save data in haskell?
[03:14:13] <concrete-houses> maybe forth is the answer
[03:14:38] <sm> a much higher proportion of haskell issues are performance issues. In part because there are fewer of the other kind
[03:15:20] <dsal> concrete-houses: postgresql has been in development for decades.  I'd expect if it were easy it would've been finished in the 90s.  :)
[03:15:34] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:16:02] *** Joins: jeetelongname (~jeet@eduroam-public-46.nat.port.ac.uk)
[03:16:29] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[03:16:55] <maerwald> or in optics: https://github.com/well-typed/optics/pull/277
[03:17:01] <maerwald> I can do this all day
[03:17:07] <sm> positive view: you freed up a bunch of time by avoiding uncontrolled effects and unclear semantics, now you can afford to spend more time chasing performance
[03:17:25] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[03:17:46] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[03:17:57] <maerwald> so... if you really claim laziness doesn't affect your performance code... you have never written performant code. Yes, StrictData is neat (I enable it a lot), but not enough
[03:18:36] <hpc> maerwald: now do python
[03:18:42] <maerwald> I do
[03:18:50] <hpc> find all the garbage collection and GIL bugs :P
[03:19:11] <maerwald> I know a couple of folks who write high-performance python code... it's a dark art too
[03:19:24] <hpc> or javascript, find all the useless roundtrips in popular frameworks
[03:20:11] <janus> concrete-houses: using bitcoin you can store data with their forth-based scripting language ;) (joking!)
[03:20:19] <hpc> and then find all the other stupid problems like having a hundred copies of the is-false package in node_modules
[03:21:29] <maerwald> I found writing high performance code in Go much easier, because the language is so dumb
[03:21:35] <maerwald> and that's a good thing for that goal
[03:21:35] <janus> concrete-houses: i almost think you're joking but the debate is in a way also typical of #haskell i think, because it is about leaving the pure world and things get ugly. thinking of acid-state which burned some people in here. almost seems like your question could open that wound
[03:22:27] <EvanR> what's wrong with acid-state
[03:22:43] <hpc> EvanR: data in an acid-state database needs to fit entirely in memory
[03:22:48] <EvanR> concrete-houses, I'm thinking of taking sqlite out for a spin
[03:23:08] <maerwald> ixset-typed
[03:23:19] <maerwald> btw... another performance nightmare ;p
[03:23:22] <EvanR> hpc, ok that's understood. What's the problem? xD
[03:23:30] <maerwald> but it's actually neat
[03:23:37] <maerwald> @hackage ixset-typed
[03:23:37] <lambdabot> https://hackage.haskell.org/package/ixset-typed
[03:23:59] <janus> it's like that perfect moment where i can't decide whether a question is a troll or if i am just in #haskell :D
[03:24:20] <hpc> how can haskell be real if our eyes aren't real
[03:24:31] <EvanR> real eyes realize real lies
[03:25:43] <EvanR> so is it that acid-state has no API for knowing if you're getting close to your limit or something
[03:25:52] <EvanR> unlike e.g. the bounds on Int
[03:26:20] *** Quits: hiruji (~hiruji@user/hiruji) (Quit: ZNC 1.8.2 - https://znc.in)
[03:26:34] <hpc> more that it doesn't really make that clear on its own
[03:26:44] <hpc> and people writing about it made it sound like it could replace postgres
[03:26:55] <hpc> it was an expectation thing
[03:27:18] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[03:27:20] <EvanR> that's like the number zero thing I learned about acid-state
[03:27:37] <hpc> ah
[03:27:56] <EvanR> it seems like the defining characteristic, because I don't believe "acid" usually xD
[03:29:15] <EvanR> when acid state was written I don't think people had like 16G of memory
[03:29:48] <EvanR> oh yeah, and GHC uses like 3x your live data for gc maintenance
[03:29:53] *** Joins: jinsun (~quassel@user/jinsun)
[03:30:02] *** Quits: zopsi_ (zopsi@2600:3c00::f03c:91ff:fe14:551f) (Quit: Oops)
[03:30:03] *** Quits: jinsun (~quassel@user/jinsun) (*.net *.split)
[03:30:03] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (*.net *.split)
[03:30:03] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (*.net *.split)
[03:30:03] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41f2:b4d5:142e:946f) (*.net *.split)
[03:30:03] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (*.net *.split)
[03:30:03] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (*.net *.split)
[03:30:03] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (*.net *.split)
[03:30:03] *** Quits: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net) (*.net *.split)
[03:30:03] *** Quits: caubert (~caubert@136.244.111.235) (*.net *.split)
[03:30:03] *** Quits: heath (~heath@user/heath) (*.net *.split)
[03:30:03] *** Quits: Patternmaster (~georg@li1192-118.members.linode.com) (*.net *.split)
[03:30:03] *** Quits: jackhill (~jackhill@kalessin.dragonsnail.net) (*.net *.split)
[03:30:03] *** Quits: Teacup_ (~teacup@user/teacup) (*.net *.split)
[03:30:03] *** Quits: oats (~thomas@user/oats) (*.net *.split)
[03:30:03] *** Quits: haskl (~haskl@user/haskl) (*.net *.split)
[03:30:03] *** Quits: dolio (~dolio@130.44.130.54) (*.net *.split)
[03:30:03] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (*.net *.split)
[03:30:03] *** Quits: Alex_test (~al_test@178.34.160.14) (*.net *.split)
[03:30:03] *** Quits: AlexZenon (~alzenon@178.34.160.14) (*.net *.split)
[03:30:03] *** Quits: ystael (~ystael@user/ystael) (*.net *.split)
[03:30:03] *** Quits: filwisher (2e6936c793@2604:bf00:561:2000::170) (*.net *.split)
[03:30:03] *** Quits: emf (~emf@2620:10d:c090:400::5:d28b) (*.net *.split)
[03:30:03] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (*.net *.split)
[03:30:03] *** Quits: ehamberg_ (sid18208@id-18208.hampstead.irccloud.com) (*.net *.split)
[03:30:03] *** Quits: yaroot (~yaroot@2409:12:ac0:2300:680e:dbff:fe1e:4953) (*.net *.split)
[03:30:03] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (*.net *.split)
[03:30:03] *** Quits: natechan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (*.net *.split)
[03:30:03] *** Quits: iqubic (~user@2601:602:9502:c70:6765:a5f:e5b9:6c69) (*.net *.split)
[03:30:03] *** Quits: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de) (*.net *.split)
[03:30:03] *** Quits: nickdaly (45ce440a48@2604:bf00:561:2000::e2) (*.net *.split)
[03:30:03] *** Quits: FragByte (~christian@user/fragbyte) (*.net *.split)
[03:30:03] *** Quits: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com) (*.net *.split)
[03:30:03] *** Quits: Logio (em@kapsi.fi) (*.net *.split)
[03:30:03] *** Quits: glider (~glider@user/glider) (*.net *.split)
[03:30:03] *** Quits: lukec (9dfd4d094e@2604:bf00:561:2000::10e) (*.net *.split)
[03:30:03] *** Quits: jkoshy (99b9359beb@2604:bf00:561:2000::10f) (*.net *.split)
[03:30:03] *** Quits: sm2n (ae95cb1267@user/sm2n) (*.net *.split)
[03:30:03] *** Quits: acidsys (~LSD@2.lsd.systems) (*.net *.split)
[03:30:03] *** Quits: sander (~sander@user/sander) (*.net *.split)
[03:30:03] *** Quits: vjoki (~vjoki@2a00:d880:3:1::fea1:9ae) (*.net *.split)
[03:30:03] *** Quits: arahael (~arahael@27-32-144-20.tpgi.com.au) (*.net *.split)
[03:30:03] *** Quits: evanrelf (3addc196af@2604:bf00:561:2000::f0) (*.net *.split)
[03:30:03] *** Quits: zmt00 (~zmt00@user/zmt00) (*.net *.split)
[03:30:03] *** Quits: Typedfern (~Typedfern@75.red-88-22-25.staticip.rima-tde.net) (*.net *.split)
[03:30:04] *** Quits: Profpatsch (~Profpatsc@static.88-198-193-255.clients.your-server.de) (*.net *.split)
[03:30:04] *** Quits: sweater (~sweater@206.81.18.26) (*.net *.split)
[03:30:04] *** Quits: carbolymer (~carbolyme@dropacid.net) (*.net *.split)
[03:30:04] *** Quits: shanemikel (~shanemike@desk.roadwar.net) (*.net *.split)
[03:30:04] *** Quits: remexre (~remexre@user/remexre) (*.net *.split)
[03:30:04] *** Quits: teddyc (theodorc@cassarossa.samfundet.no) (*.net *.split)
[03:30:04] *** Quits: dyniec (~dyniec@mail.dybiec.info) (*.net *.split)
[03:30:04] *** Quits: rembo10 (~rembo10@remulis.com) (*.net *.split)
[03:30:04] *** Quits: TimWolla (~timwolla@2a01:4f8:150:6153:beef::6667) (*.net *.split)
[03:30:04] *** Quits: cocreature (~moritz@2a03:b0c0:3:d0::c8:f001) (*.net *.split)
[03:30:04] *** Quits: xacktm (xacktm@user/xacktm) (*.net *.split)
[03:30:11] *** Joins: lukec (9dfd4d094e@2604:bf00:561:2000::10e)
[03:30:13] *** Joins: TimWolla (~timwolla@2a01:4f8:150:6153:beef::6667)
[03:30:16] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[03:30:19] *** Joins: dyniec (~dyniec@mail.dybiec.info)
[03:30:19] *** Joins: Alex_test (~al_test@178.34.160.14)
[03:30:20] *** Joins: evanrelf (3addc196af@2604:bf00:561:2000::f0)
[03:30:21] *** Joins: AlexZenon (~alzenon@178.34.160.14)
[03:30:22] *** Joins: teddyc (theodorc@cassarossa.samfundet.no)
[03:30:23] *** Joins: sm2n (ae95cb1267@user/sm2n)
[03:30:23] *** Joins: jkoshy (99b9359beb@2604:bf00:561:2000::10f)
[03:30:26] *** Joins: nickdaly (45ce440a48@2604:bf00:561:2000::e2)
[03:30:28] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[03:30:28] *** Joins: Logio (em@kapsi.fi)
[03:30:28] *** Joins: FragByte (~christian@p579d2134.dip0.t-ipconnect.de)
[03:30:31] *** Joins: caubert (~caubert@136.244.111.235)
[03:30:35] *** Joins: ehamberg_ (sid18208@id-18208.hampstead.irccloud.com)
[03:30:36] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[03:30:39] *** Quits: FragByte (~christian@p579d2134.dip0.t-ipconnect.de) (Changing host)
[03:30:39] *** Joins: FragByte (~christian@user/fragbyte)
[03:30:41] *** Joins: Profpatsch (~Profpatsc@static.88-198-193-255.clients.your-server.de)
[03:30:42] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[03:30:47] *** Joins: Teacup (~teacup@user/teacup)
[03:31:01] *** Joins: zopsi (~zopsi@irc.dir.ac)
[03:31:14] *** Joins: natechan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[03:31:19] *** Joins: rembo10 (~rembo10@remulis.com)
[03:31:57] *** Joins: yaroot (~yaroot@2409:12:ac0:2300:680e:dbff:fe1e:4953)
[03:32:06] *** Joins: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net)
[03:32:09] *** Joins: filwisher (2e6936c793@2604:bf00:561:2000::170)
[03:32:11] *** Joins: sander (~sander@user/sander)
[03:32:14] *** Joins: shanemikel (~shanemike@desk.roadwar.net)
[03:32:15] *** Joins: heath (~heath@user/heath)
[03:32:18] *** Joins: jinsun (~quassel@user/jinsun)
[03:32:18] *** Joins: dolio (~dolio@130.44.130.54)
[03:32:25] *** Joins: carbolymer (~carbolyme@dropacid.net)
[03:32:27] *** Joins: xacktm (xacktm@user/xacktm)
[03:32:29] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[03:32:35] *** Joins: acidsys (~LSD@2.lsd.systems)
[03:32:35] *** Joins: oats (~thomas@user/oats)
[03:32:35] *** Joins: vjoki (~vjoki@2a00:d880:3:1::fea1:9ae)
[03:32:42] *** Joins: haskl (~haskl@user/haskl)
[03:32:42] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41f2:b4d5:142e:946f)
[03:32:55] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[03:33:05] <davean> EvanR: Also, like acid-state has NOT built in recovery
[03:33:05] *** Quits: lbseale_ (~ep1ctetus@user/ep1ctetus) (Quit: Leaving)
[03:33:14] <EvanR> eh?
[03:33:15] *** Joins: sweater (~sweater@206.81.18.26)
[03:33:16] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41f2:b4d5:142e:946f) (Remote host closed the connection)
[03:33:17] *** Joins: remexre (~remexre@user/remexre)
[03:33:18] <davean> either it comes up because everything went well or you get all the peices
[03:33:27] *** Joins: cocreature (~moritz@2a03:b0c0:3:d0::c8:f001)
[03:33:31] <EvanR> that part I did not know
[03:33:33] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[03:34:11] *** Quits: jeetelongname (~jeet@eduroam-public-46.nat.port.ac.uk) (Ping timeout: 256 seconds)
[03:34:11] *** Quits: noctux (~noctux@user/noctux) (Ping timeout: 256 seconds)
[03:34:12] <EvanR> even my shitty append-only log for my MUD server could recover
[03:34:16] *** Joins: glider (~glider@user/glider)
[03:34:28] *** Joins: noctux (~noctux@user/noctux)
[03:35:09] <davean> I mean acid state is an operational append log with rollup
[03:35:11] *** Joins: jackhill (~jackhill@kalessin.dragonsnail.net)
[03:35:16] *** Joins: Patternmaster (~georg@li1192-118.members.linode.com)
[03:35:22] *** Joins: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com)
[03:35:24] *** Joins: ystael (~ystael@user/ystael)
[03:36:08] *** Joins: emf (~emf@2620:10d:c090:400::5:d28b)
[03:36:55] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[03:37:01] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[03:37:15] *** Joins: jeetelongname (~jeet@148.197.248.46)
[03:37:57] *** Quits: Profpatsch (~Profpatsc@static.88-198-193-255.clients.your-server.de) (Quit: WeeChat 3.3)
[03:38:11] *** Joins: Profpatsch (~Profpatsc@static.88-198-193-255.clients.your-server.de)
[03:38:32] *** Quits: sheb (~sheb@31.223.228.71) (Ping timeout: 240 seconds)
[03:40:50] <concrete-houses> acid state!! happstack.com!! I am beginning to think that centralized databases are a huge mistake and bs of usury bankers
[03:41:13] <maerwald> right... you should enjoy blockchain
[03:41:23] <maerwald> it's pretty simple... look
[03:41:47] <concrete-houses> I am stunned how ahrd sql adn psotgresql are to use
[03:41:59] <concrete-houses> how poor the docs are
[03:42:09] <concrete-houses> endless manusl 
[03:42:12] <concrete-houses> no howto to do x y
[03:42:20] <concrete-houses> almsot as if its a distraction to keep u poor
[03:42:24] <EvanR> 🤔
[03:43:32] <davean> uh what?
[03:43:59] <maerwald> it's a blockchain scam... wait for it :D
[03:44:01] <hpc> sql adn psotgresql are ahrd :P
[03:45:00] <EvanR> > sort "sql adn psotgresql are ahrd"
[03:45:02] <lambdabot>  "    aaaddeeghllnopqqrrrssst"
[03:45:13] <janus> concrete-houses: i know your struggle. you like relational algebra but sql doesn't respect it
[03:45:15] <EvanR> fixed it
[03:45:18] <janus> i know the project that saves the day
[03:45:22] <janus> @package Project-M36
[03:45:23] <lambdabot> https://hackage.haskell.org/package/Project-M36
[03:45:27] <hpc> EvanR: sorted it all out, one might say
[03:45:32] <janus> oh ok here it is https://github.com/agentm/project-m36
[03:46:02] <janus> relational algebra built totally in haskell with much type fanciness that lets you collaborate with the compiler in harmony
[03:46:29] <EvanR> but is it web scale
[03:46:52] <janus> yes, it doesn't require all data to be in memory. in theory.
[03:47:55] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[03:49:05] <janus> there is even an irc channel on this network, but you must be patient because Agent M doesn't use a bouncer, iirc: #project-m36
[03:49:33] <EvanR> what's up with haskellDB, is that still a thing
[03:49:36] <davean> Bouncers are weird
[03:52:03] <janus> EvanR: haskellDB looks like it compiles to SQL, so not nearly as ambitious as Project M36
[03:52:09] *** Quits: jeetelongname (~jeet@148.197.248.46) (Remote host closed the connection)
[03:52:40] <janus> but no, haskellDB doesn't seem active, no commits since 2019
[03:52:47] <EvanR> that's ancient
[03:52:55] <EvanR> jk
[03:52:59] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[03:53:19] <EvanR> give them time to recover from the pandemic
[03:53:35] <janus> the drivers havn't been touched for 9 years ;)
[03:53:58] <EvanR> good that means they work with databases
[03:54:08] <EvanR> that are that old
[03:54:27] <EvanR> vintage drivers
[03:55:03] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[03:56:51] *** Quits: jgeerds (~jgeerds@55d45b75.access.ecotel.net) (Ping timeout: 256 seconds)
[03:57:20] *** Joins: jeetelongname (~jeet@148.197.248.46)
[04:00:17] <dsal> What's wrong with postgres docs?  I've found them quite good.
[04:01:07] <monochrom> Can I ban that person already?
[04:02:20] <Axman6> yeah postgres has some of the best docs of any project I use regularly
[04:02:36] *** Quits: zava (~zava@ip5f5bdf0f.dynamic.kabel-deutschland.de) (Quit: WeeChat 3.3)
[04:02:57] <janus> monochrom: yes you can :)
[04:02:58] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Ping timeout: 265 seconds)
[04:03:09] <monochrom> Pretty sure they just mean the entitlement attitude "the doc does not teach me SQL for free".
[04:03:24] <janus> i still think it is an elaborate joke on the culture of the channel
[04:03:28] *** ChanServ sets mode: +o monochrom
[04:03:30] *** justache is now known as totallynotjustac
[04:03:32] *** Quits: seanparsons (~seanparso@cpc158525-gill21-2-0-cust151.20-1.cable.virginm.net) (Ping timeout: 240 seconds)
[04:03:34] *** monochrom sets mode: +b *!*@209.6.150.53
[04:03:34] *** concrete-houses was kicked by monochrom (concrete-houses)
[04:03:47] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:b590:8966:cd38:8f41)
[04:03:59] *** Joins: iqubic (~user@2601:602:9502:c70:7d14:3ce3:e8b8:8f59)
[04:04:10] *** totallynotjustac is now known as justache
[04:04:11] <Axman6> and nothing of value was lost
[04:04:31] *** Joins: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net)
[04:04:35] *** Quits: Katarushisu (~Katarushi@cpc147334-finc20-2-0-cust27.4-2.cable.virginm.net) (Ping timeout: 268 seconds)
[04:05:40] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[04:09:12] <jeetelongname> dis postgress and get the hammer /s
[04:09:19] *** Quits: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[04:09:26] <Axman6> damn right
[04:09:47] <Axman6> We can't have PHP with the first P
[04:11:03] *** Joins: seanparsons (~seanparso@cpc158525-gill21-2-0-cust151.20-1.cable.virginm.net)
[04:11:17] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[04:11:18] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[04:11:18] *** Joins: wroathe (~wroathe@user/wroathe)
[04:12:06] *** Joins: Katarushisu (~Katarushi@cpc147334-finc20-2-0-cust27.4-2.cable.virginm.net)
[04:13:45] <maerwald> postgres keeps you poor... blockchain makes you rich
[04:13:47] <maerwald> checks out
[04:14:15] *** Quits: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk) (Remote host closed the connection)
[04:19:59] *** Joins: mvk (~mvk@2607:fea8:5cc1:fa00::4702)
[04:20:15] *** Joins: pfurla_ (~pfurla@205-185-222-149.ipvanish.com)
[04:21:37] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:b590:8966:cd38:8f41) (Ping timeout: 250 seconds)
[04:24:47] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[04:27:10] *** justache is now known as zoite
[04:28:05] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[04:29:11] *** zoite is now known as z0ite
[04:29:23] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:34:01] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41f2:b4d5:142e:946f)
[04:38:19] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41f2:b4d5:142e:946f) (Ping timeout: 252 seconds)
[04:39:35] *** Joins: zuserm (~mz@71.161.92.216)
[04:40:09] *** Joins: lbseale_ (~ep1ctetus@user/ep1ctetus)
[04:40:19] <zuserm> can anyone help my with stack on nixos?
[04:40:49] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:41:15] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[04:43:53] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Ping timeout: 256 seconds)
[04:45:17] *** Quits: acidjnk_new (~acidjnk@p200300d0c7271e72351a12a888efd4cb.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[04:45:23] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:1d11:e285:317e:6a2a)
[04:46:56] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:47:14] *** Joins: gentauro (~gentauro@user/gentauro)
[04:47:30] *** Quits: tinwood (~tinwood@canonical/tinwood) (Remote host closed the connection)
[04:47:54] *** Quits: pfurla_ (~pfurla@205-185-222-149.ipvanish.com) (Ping timeout: 256 seconds)
[04:50:34] *** Joins: tinwood (~tinwood@general.default.akavanagh.uk0.bigv.io)
[04:50:34] *** Quits: tinwood (~tinwood@general.default.akavanagh.uk0.bigv.io) (Changing host)
[04:50:34] *** Joins: tinwood (~tinwood@canonical/tinwood)
[04:51:45] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[04:53:15] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[04:55:06] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[04:55:07] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[04:55:09] *** allbery_b is now known as geekosaur
[04:56:43] *** Joins: sus (zero@user/zeromomentum)
[04:58:20] <dsal> zuserm: possibly.
[04:58:38] <dsal> Native ghc no longer works on my new laptop. heh
[04:59:39] <zuserm> I'm trying to run "stack script test.hs" and I'm getting "Executable named nix-shell not found on path: ..."
[05:00:06] <dsal> Not having nix-shell in your path on a nixos machine seems a bit odd.
[05:00:40] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41f2:b4d5:142e:946f)
[05:00:48] <dsal> I don't do stack scripts, though.  There's a bunch of indirection along the way.
[05:03:34] <zuserm> alternately if I run "stack script --no-nix test.hs" "I don't know how to install GHC on your system configuration, please install manually" but I already have the same version of ghc installed as the resolver I'm trying to use
[05:03:43] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[05:05:57] <geekosaur> you would also need --system-ghc
[05:06:10] <geekosaur> because stack really really wants to install and manage its own ghcs
[05:09:10] *** zero is now known as yin
[05:10:32] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[05:10:55] *** Joins: lbseale__ (~ep1ctetus@user/ep1ctetus)
[05:11:18] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41f2:b4d5:142e:946f) (Remote host closed the connection)
[05:12:57] *** Quits: lbseale__ (~ep1ctetus@user/ep1ctetus) (Client Quit)
[05:13:26] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41f2:b4d5:142e:946f)
[05:14:29] *** Quits: lbseale_ (~ep1ctetus@user/ep1ctetus) (Ping timeout: 256 seconds)
[05:19:39] *** Joins: renzhi (~xp@2607:fa49:6500:b100::5cef)
[05:26:43] <EvanR> ghcup is awesome
[05:27:31] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Ping timeout: 256 seconds)
[05:28:03] <zuserm> geekosaur: --system-ghc doesn't help :(
[05:28:44] <geekosaur> mrr, wonder if that works with stack script then
[05:29:22] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:f00d:18c8:3973:574b) (Quit: Textual IRC Client: www.textualapp.com)
[05:30:55] <lechner> Hi, can aeson's Generics parser handle sum types? Thanks!
[05:32:19] <dsal> lechner: you mean simple enums?  sure.
[05:32:34] *** Joins: bsima1 (9d7e39c8ad@2604:bf00:561:2000::dd)
[05:33:42] <lechner> not just enum but something like     Hint | PointedHint   where PointedHint includes a Pointer
[05:34:42] *** Joins: jmorris (uid433911@id-433911.hampstead.irccloud.com)
[05:38:05] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[05:38:06] *** Joins: hiruji (~hiruji@user/hiruji)
[05:38:43] <lechner> i think that's it    https://artyom.me/aeson#types-with-many-constructors
[05:41:53] *** Joins: sheb (~sheb@31.223.228.71)
[05:44:04] *** Quits: sheb (~sheb@31.223.228.71) (Remote host closed the connection)
[05:44:20] *** Joins: sheb (~sheb@31.223.228.71)
[05:48:29] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[05:49:38] *** Quits: alzgh (~alzgh@user/alzgh) (Ping timeout: 256 seconds)
[05:52:50] *** monochrom sets mode: -o monochrom
[05:55:12] *** Joins: jkaye (~jkaye@2601:281:8300:7530:4aac:42f1:645e:c02f)
[05:55:17] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[05:55:17] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[05:55:17] *** Joins: wroathe (~wroathe@user/wroathe)
[05:59:43] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[06:02:20] *** Joins: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net)
[06:03:27] *** Joins: alzgh (alzgh@user/alzgh)
[06:04:29] *** Quits: xff0x (~xff0x@2001:1a81:52c5:f300:8200:618:b8e3:ab90) (Ping timeout: 252 seconds)
[06:06:17] *** Joins: xff0x (~xff0x@2001:1a81:530d:ee00:3ffa:7a4c:8a0a:d168)
[06:06:41] *** Quits: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[06:08:18] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:08:31] *** Quits: mvk (~mvk@2607:fea8:5cc1:fa00::4702) (Ping timeout: 252 seconds)
[06:09:01] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[06:09:01] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[06:09:01] *** Joins: wroathe (~wroathe@user/wroathe)
[06:14:23] *** Quits: mmhat (~mmh@55d4269f.access.ecotel.net) (Ping timeout: 252 seconds)
[06:19:20] *** Quits: alzgh (alzgh@user/alzgh) (Remote host closed the connection)
[06:20:30] *** Joins: Sgeo (~Sgeo@user/sgeo)
[06:25:25] *** Joins: alzgh (~alzgh@user/alzgh)
[06:26:25] *** Quits: ubert (~Thunderbi@p200300ecdf0ba2aae6b318fffe838f33.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[06:26:50] *** Joins: ubert (~Thunderbi@p200300ecdf0ba2bee6b318fffe838f33.dip0.t-ipconnect.de)
[06:29:20] *** Quits: ubert (~Thunderbi@p200300ecdf0ba2bee6b318fffe838f33.dip0.t-ipconnect.de) (Remote host closed the connection)
[06:29:37] *** Joins: ubert (~Thunderbi@p200300ecdf0ba2bee6b318fffe838f33.dip0.t-ipconnect.de)
[06:29:39] *** Joins: arahael (~arahael@27-32-144-20.tpgi.com.au)
[06:30:41] *** Joins: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net)
[06:35:21] <dsal> I tried out ghcup and it seems to not work at all because clang something.
[06:41:03] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[06:42:28] <sm> someone should write an accurate "set up haskell on new m1 mac" guide
[06:42:33] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:42:33] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[06:42:33] *** finn_elija is now known as FinnElija
[06:43:55] <lechner> maerwald: ^
[06:46:34] <dsal> I'd never tried ghcup, but my new m1 mac doesn't build stuff my old m1 mac would build via nix.  And ghcup doesn't get very close.
[06:50:27] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[06:52:53] *** Quits: td_ (~td@muedsl-82-207-238-126.citykom.de) (Ping timeout: 252 seconds)
[06:54:46] *** Joins: td_ (~td@muedsl-82-207-238-025.citykom.de)
[06:55:49] *** Quits: jkaye (~jkaye@2601:281:8300:7530:4aac:42f1:645e:c02f) (Ping timeout: 252 seconds)
[06:59:54] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:01:45] *** Joins: mbuf (~Shakthi@27.58.139.230)
[07:05:32] *** Quits: stefan-_ (~cri@42dots.de) (Ping timeout: 252 seconds)
[07:06:41] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[07:08:21] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[07:08:59] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[07:09:26] *** Joins: stefan-_ (~cri@42dots.de)
[07:12:39] *** Joins: deadmarshal (~deadmarsh@95.38.115.243)
[07:15:53] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[07:15:53] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[07:15:53] *** Joins: wroathe (~wroathe@user/wroathe)
[07:17:05] *** Quits: deadmarshal (~deadmarsh@95.38.115.243) (Ping timeout: 252 seconds)
[07:17:23] <sm> dsal: there was a recent reddit discussion on m1 setup
[07:18:00] <sm> https://www.reddit.com/r/haskell/comments/qwvj0k/does_anyone_know_the_best_way_to_build_a_haskell/
[07:20:17] *** Quits: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[07:22:32] <dsal> Oh yeah, I saw that.  I had thing that worked on my old M1, but not my new M1.
[07:22:37] <dsal> I'm not 100% sure what the difference is
[07:23:00] <dsal> GHC for aarch64 from nix fails with EXC_BAD_ACCESS (SIGKILL (Code Signature Invalid))
[07:23:08] *** Quits: renzhi (~xp@2607:fa49:6500:b100::5cef) (Ping timeout: 252 seconds)
[07:23:34] <dsal> From ghcup, just something about needing clang.
[07:24:50] <Axman6> do you have clang installed?
[07:26:41] <dsal> I don't.  There's no binary release for this platform.  I guess I can see if it'll build.
[07:30:01] *** Quits: haasn (~nand@haasn.dev) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[07:30:29] *** Quits: bliminse (~bliminse@host86-188-36-178.range86-188.btcentralplus.com) (Ping timeout: 256 seconds)
[07:31:21] *** Joins: haasn (~nand@haasn.dev)
[07:32:07] *** Joins: bliminse (~bliminse@host86-162-147-196.range86-162.btcentralplus.com)
[07:33:03] <Axman6> surely Apple provides one
[07:33:11] <Axman6> you've got Xcode installed right?
[07:33:53] *** Quits: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[07:34:27] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[07:36:21] <dsal> Yeah.   I've not used it, though.  I wonder if there's a thing I have to do to activate that.
[07:37:48] <dsal> I have clang, but not opt
[07:38:58] *** Quits: jeetelongname (~jeet@148.197.248.46) (Remote host closed the connection)
[07:40:32] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[07:40:33] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[07:40:58] <arahael> That's odd.  I'm on M1 and it works fine for me.  Granted, I'm using an existing ghc, and not building that myself using nix.
[07:41:31] <arahael> What's the specific error message due to that "clang something"?
[07:42:16] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[07:42:40] <arahael> But yeah, that promise of nix just workign has been something that's let me down a lot. :( 
[07:43:24] *** Joins: fef (~thedawn@user/thedawn)
[07:43:39] <arahael> dsal: ghc 9.2.1 works fine with ghcup for me.  Sadly not the earlier one.  And I do need to set export C_INCLUDE_PATH="`xcrun --show-sdk-path`/usr/include/ffi" as a workaround for another bug with it.
[07:43:49] *** Joins: sproso (~sproso@node-1w7jr9y8y96l370tw0h9cpsrf.ipv6.telus.net)
[07:45:57] *** Joins: zaquest (~notzaques@5.130.79.72)
[07:47:59] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[07:47:59] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[07:47:59] *** Joins: wroathe (~wroathe@user/wroathe)
[07:50:34] <dsal> My old M1 was fine.  New M1 is less fine.
[07:50:46] <dsal> This is an "M1 Max"
[07:51:08] <sm> it's just too fast.
[07:53:04] <dsal> My old machine had 4 performance cores and 4 efficiency cores.  This one has 8 performance cores and 2 efficiency cores, so maybe it's just not efficient enough.
[07:54:28] *** Quits: maroloccio (~marolocci@151.53.155.184) (Quit: WeeChat 3.0)
[07:56:44] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Quit: Leaving)
[07:56:45] <arahael> dsal: LLVM 13.0 broke a few things - which is what you would've gotten with the latest xcode. Which is what you would have on the new M1.
[07:57:37] <dsal> Hmm...   The error I get is about code signature.
[07:58:08] <arahael> Notorisation requirements may well have been boosted in the new OS?
[07:58:12] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[07:58:21] <sm> arahael: I've always had to install some optional command line component of xcode
[07:59:09] <arahael> sm: That hasn't changed.
[07:59:18] <arahael> sm: (The versions of the tools in that would have, though)
[08:01:27] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[08:02:26] <dsal> I've got x86 working.  I'll have to switch to that in the meantime.
[08:03:08] <sm> dsal, tried the stack route ?
[08:03:10] <arahael> A bit slower to start, but yeah, that does work nicely.  However, aarch64 works fine too but you have to use 9.2.1
[08:03:13] <Square> I have this function that works properly https://paste.tomsmeding.com/jE8lp78x . The case part is recurring in other places so i felt I needed some sort of reuse of it. Ie, something that that routes the "path" to a handler for each case. 
[08:03:27] <Square> You dont happen to see what would be practical here?
[08:04:07] <dsal> sm: I'm using stack via nix.  It gets ghc just like I did on my other machine, it just won't run it.
[08:04:56] <sm> ack. Is the stack executable x86 or arm ? just curious
[08:05:26] <arahael> dsal: Use the arch command to force a particular arch.
[08:05:55] <arahael> dsal: But yeah, I've moved away from nix for various reasons.  And also stack - less moving parts.
[08:06:10] *** Quits: sagax (~sagax_nb@user/sagax) (Quit: Konversation terminated!)
[08:06:11] <dsal> Well, I'm actually failing a little earlier than that.  Just getting home-manager to switch to arm tries to run the GHC and crashes.
[08:06:14] <arahael> nix doesn't even sandbox adequately on macos.
[08:06:17] <dsal> I tried the stack that came with ghcup.
[08:06:25] * sm seems to remember getting newer clang/llvm with homebrew
[08:06:49] <arahael> sm: In this case, you're goign to want _older_ clang/llvm, I think.
[08:06:51] *** Joins: Erutuon (~Erutuon@user/erutuon)
[08:07:05] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[08:07:06] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[08:07:06] *** Joins: wroathe (~wroathe@user/wroathe)
[08:07:25] <dsal> I've not used homebrew in a while.  nix has done a good job of getting my tools for the most part.  New install has a couple issues, but I'm not going to solve them tonight.
[08:07:38] * sm would try the stack binary from fpcomplete as well
[08:09:17] <dsal> yeah, stack from ghcup is the path that got me the complains about missing `opt`
[08:09:39] <arahael> dsal: What's the full error - what's the whole "opt" thing?
[08:09:56] <arahael> dsal: I might be able to recognise some of it.
[08:10:23] <dsal> Actually, different error.  Earlier it was that it couldn't find `opt` from clang.  Now it's just saying it can't find clang.  Warning: Couldn't figure out LLVM version! Make sure you have installed LLVM between [9 and 13)
[08:10:26] <dsal> It says warning, but it fails.
[08:11:04] <arahael> dsal: Ah, yes.  You need ghc 9.2.1, that's the same issue I have.  Note [9 and 13], that's "version 9, through to but not including version 13".  My guess is you have version 13.
[08:11:43] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[08:11:45] <dsal> Oh, I selected 9.2.1
[08:11:50] <dsal> It's seeming to do something now.
[08:12:14] <arahael> dsal: That has a bug involving ffi on macos.  You'll need that environment variable I showed above for the C_INCLUDE_PATH.
[08:12:22] <dsal> Er, maybe not.   OK.  I'll try that.  heh
[08:13:03] <sm> arahael: wow, tricky error message there..
[08:13:15] <arahael> dsal: Does stack support that yet, incidentially? I thought ghc 9.2.1 is too new for stack?
[08:14:02] <dsal> Hmm...  No, it still fails to compile all my deps.
[08:14:33] <dsal> ghc: could not execute: opt
[08:14:47] <arahael> "could not execute: opt".  That's _curious_.
[08:15:58] <dsal> yeah, I don't know where it's supposed to get opt.  I have Apple clang version 13.0.0 (clang-1300.0.29.3)
[08:16:27] <arahael> Right, that's not within the supported [9 and 13) range (except for GHC 9.2.1)
[08:16:55] *** Joins: deadmarshal (~deadmarsh@95.38.115.243)
[08:16:59] <arahael> dsal: Welcome to my troubles here from the past week or so. :)  I recall you were there! ;)
[08:17:18] <dsal> ah.  Everything worked well for me on my old machine due to luck.
[08:17:43] <arahael> dsal: Hmm. :)
[08:17:56] <dsal> Oooh, I didn't notice the ) on 13.
[08:18:24] <arahael> dsal: It's super subtle isnt' it? I only pointed it out like 3 times, and you _STILL_ missed it, it's that subtle, yes. (And not blaming you for that, either)
[08:18:32] <sm> that's what I meant by "tricky error message"! Pretty bad UX
[08:19:43] <dsal> Yeah.  There's a fairly narrow band of tooling I care about.
[08:20:04] <arahael> dsal: One thing I did not try, was installing an older xcode.  
[08:20:42] <arahael> dsal: But you need an apple developer account to get access to the older xcodes.
[08:20:48] <dsal> Ah, that sounds painful.
[08:20:53] <dsal> I think I've done that before.
[08:21:00] <arahael> (I have the account, but anyways)
[08:25:20] <arahael> dsal: Anyway, realise you're ultimately dealing with four layers here: nix, stack, haskell, and macos/xcode.  That's a lot of moving parts.
[08:25:30] <sm> +1
[08:25:46] *** Joins: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net)
[08:25:55] <Axman6> and Apple don't give a shit about us
[08:26:53] *** Quits: ubert (~Thunderbi@p200300ecdf0ba2bee6b318fffe838f33.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[08:27:57] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[08:27:57] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[08:27:57] *** Joins: wroathe (~wroathe@user/wroathe)
[08:28:35] <EvanR> advent of code... like 1 minute xd
[08:28:57] <sm> agh!
[08:28:59] <arahael> Oh, yeah!  I'm torn between doing this in literate haskell, or rust.
[08:29:19] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:29:45] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[08:30:25] *** Quits: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[08:30:52] *** Joins: ubert (~Thunderbi@p200300ecdf0ba2bee6b318fffe838f33.dip0.t-ipconnect.de)
[08:31:05] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[08:32:49] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[08:33:33] *** z0ite is now known as justache
[08:36:15] *** Quits: kennyd (~bc8165b6@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[08:38:40] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[08:45:29] *** Joins: Jing_ (~hedgehog@2604:a840:3::1061)
[08:46:11] <dsal> I also had emacs in the layers there.  It froze up on part 2.  *sigh*
[08:46:43] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:1d11:e285:317e:6a2a) (Quit: gone to sleep. ZZZzzz…)
[08:48:04] <arahael> That's another moving part!
[08:48:32] *** Quits: Jing (~hedgehog@125.105.11.101) (Ping timeout: 240 seconds)
[08:49:34] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[08:51:14] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[08:53:10] *** Joins: lavaman (~lavaman@98.38.249.169)
[08:55:28] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:1d11:e285:317e:6a2a)
[08:56:37] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[08:58:36] *** Joins: ees (~user@pool-108-18-30-46.washdc.fios.verizon.net)
[09:01:03] *** Joins: img (~img@user/img)
[09:09:56] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[09:10:08] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[09:11:21] *** Quits: deadmarshal (~deadmarsh@95.38.115.243) (Ping timeout: 256 seconds)
[09:11:38] *** Quits: sproso (~sproso@node-1w7jr9y8y96l370tw0h9cpsrf.ipv6.telus.net) (Quit: Client closed)
[09:15:31] *** Quits: ees (~user@pool-108-18-30-46.washdc.fios.verizon.net) (Ping timeout: 252 seconds)
[09:17:37] <arahael> With literate haskell (Particularly markdown-unlit), how can I produce test cases from the same markdown file? I want to say: ... And that should produce the following outcome in the repl: ...
[09:20:33] <aplainzetakind> `ghcid "--command=cabal run the-project"` exits on error, and when no-error, does not update on save. What am I doing wrong?
[09:21:04] <aplainzetakind> I mean it's as if I simply issued the cabal command by itself.
[09:21:38] <sm> ghcid -c 'cabal run'
[09:22:07] <sm> but really I think you mean ghcid -c 'cabal repl'
[09:22:14] *** Joins: deadmarshal (~deadmarsh@95.38.115.243)
[09:22:41] *** Quits: atwm (~atwm@19-193-28-81.ftth.cust.kwaoo.net) (Ping timeout: 256 seconds)
[09:23:04] *** Quits: obfusk (~quassel@a82-161-150-56.adsl.xs4all.nl) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[09:23:27] *** Joins: obfusk (~quassel@a82-161-150-56.adsl.xs4all.nl)
[09:24:44] *** Joins: fr33domlover (~fr33@2.53.150.205)
[09:25:19] <aplainzetakind> sm: Still not updating, as if a single run (with ghcid -c 'cabal repl')
[09:28:45] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[09:30:31] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:35:46] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:1d11:e285:317e:6a2a) (Quit: gone to sleep. ZZZzzz…)
[09:36:17] *** Quits: fr33domlover (~fr33@2.53.150.205) (Ping timeout: 256 seconds)
[09:36:42] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:37:34] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:1d11:e285:317e:6a2a)
[09:37:42] *** Joins: moet (~moet@mobile-166-170-42-127.mycingular.net)
[09:37:48] *** Joins: puke (~puke@user/puke)
[09:39:35] *** Quits: moet (~moet@mobile-166-170-42-127.mycingular.net) (Client Quit)
[09:40:36] *** Quits: echoreply (~echoreply@2001:19f0:9002:1f3b:5400:ff:fe6f:8b8d) (Quit: WeeChat 2.8)
[09:47:51] <EvanR> how does the AoC guy know to come up with puzzles that are fun for haskell
[09:49:17] <jle`> it's a conspiracy
[09:49:28] *** Joins: chomwitt (~chomwitt@2a02:587:dc16:f200:12c3:7bff:fe6d:d374)
[09:50:05] <opqdonut> typically there are ones in the second half that aren't much fun in haskell
[09:50:17] <opqdonut> "simulate this slightly ill-specified register machine"
[09:50:21] *** Quits: xff0x (~xff0x@2001:1a81:530d:ee00:3ffa:7a4c:8a0a:d168) (Ping timeout: 245 seconds)
[09:50:31] <EvanR> yeah I remember that
[09:50:52] <opqdonut> but in general they're purely computational puzzles that don't need maximum performance, so of course haskell is a good fit!
[09:51:28] *** Joins: xff0x (~xff0x@2001:1a81:530d:ee00:3669:3c5b:65c3:3f53)
[09:51:50] <EvanR> how fast it runs will be a crucial tie breaker if you and the C guy press `enter' at the same time
[09:54:25] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:1d11:e285:317e:6a2a) (Quit: gone to sleep. ZZZzzz…)
[09:58:53] <dsal> I've rarely found any that weren't fun in Haskell.
[09:59:17] <dsal> Just the ones that feel like labor.
[10:03:24] *** Joins: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net)
[10:03:40] *** Joins: vysn (~vysn@user/vysn)
[10:03:43] *** Quits: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net) (Remote host closed the connection)
[10:04:03] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 256 seconds)
[10:04:19] *** Joins: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net)
[10:04:39] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[10:05:11] *** Quits: deadmarshal (~deadmarsh@95.38.115.243) (Ping timeout: 256 seconds)
[10:05:22] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[10:09:09] *** Quits: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[10:13:05] *** Quits: xff0x (~xff0x@2001:1a81:530d:ee00:3669:3c5b:65c3:3f53) (Ping timeout: 252 seconds)
[10:13:39] *** Joins: xff0x (~xff0x@2001:1a81:530d:ee00:fdea:9bb5:abe4:a159)
[10:15:48] *** Joins: deadmarshal (~deadmarsh@95.38.115.243)
[10:16:28] *** Quits: connrs (~connrs@user/connrs) (Ping timeout: 260 seconds)
[10:18:06] <dmj`> An AOC CLI tool would be nice ... automatic puzzle fetching, submission, stats
[10:20:43] *** Joins: rkrishnan (~user@122.171.76.46)
[10:22:50] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[10:23:11] <iqubic> @hackage aoc
[10:23:11] <lambdabot> https://hackage.haskell.org/package/aoc
[10:23:34] <iqubic> @hackage advent-of-code-api
[10:23:34] <lambdabot> https://hackage.haskell.org/package/advent-of-code-api
[10:23:47] <iqubic> That's a library made by jle` and it's excellent.
[10:24:30] <iqubic> jle`: Does that also have an executable too, or is it just a haskell library?
[10:25:06] <dmj`> jle` does write good code
[10:26:32] <dmj`> this explains how he's so fast too
[10:27:08] <iqubic> Yeah. I also use that library. It's good.
[10:28:09] <iqubic> > (zip <*> tail) [1..10]
[10:28:10] <lambdabot>  [(1,2),(2,3),(3,4),(4,5),(5,6),(6,7),(7,8),(8,9),(9,10)]
[10:28:16] <iqubic> Why does that work!?!?
[10:32:46] *** Quits: ubert (~Thunderbi@p200300ecdf0ba2bee6b318fffe838f33.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[10:33:20] <jle`> iqubic: that's just the library :) my advent-of-code-dev repo on github has an executable for auto fetching and stuff but it's probably more of an example than something that works out of the box
[10:33:26] <jle`> iqubic: (f <*> g) x = f x (g x)
[10:34:06] <iqubic> Isn't that just S from the SKI combinators?
[10:34:48] <iqubic> And let me guess... pure is K?
[10:34:56] *** Joins: ubert (~Thunderbi@p200300ecdf0ba2bee6b318fffe838f33.dip0.t-ipconnect.de)
[10:35:03] <jle`> it's been a while, but that does sound familiar :)
[10:35:06] <iqubic> :t pure
[10:35:07] <lambdabot> Applicative f => a -> f a
[10:35:28] <iqubic> https://en.wikipedia.org/wiki/SKI_combinator_calculus
[10:35:40] <arahael> Really happy with how I've started advent of code: Start with a bang, end with a whimper? (It's a LOT of typing for literate haskell!) https://github.com/arafangion/super-eureka/blob/main/app/Day1.md
[10:36:21] <arahael> Disclaimer: That's the *solution*.
[10:37:15] <iqubic> jle`: Wikipedia gives this: I x = x, K x y = x, S x y z = x z (y z), which, after some variable renaming shows that <*> is the same as S.
[10:37:45] *** Quits: monochrom (trebla@216.138.220.146) (Quit: NO CARRIER)
[10:38:47] <jle`> iqubic: looks convincing to me :)
[10:39:43] *** Joins: cyclosa (~cyclosa@2603-6011-4a41-8ada-0000-0000-0000-0eaa.res6.spectrum.com)
[10:40:36] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[10:40:42] <iqubic> What exactly is pure for the Function/Reader applicative?
[10:43:56] <c_wraith> const
[10:44:04] <c_wraith> > pure 5 ()
[10:44:06] <lambdabot>  5
[10:44:23] <jle`> iqubic: there is actually only one implementation that typechecks
[10:44:52] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[10:46:26] *** Quits: caubert (~caubert@136.244.111.235) (Quit: WeeChat 3.3)
[10:46:59] <iqubic> "pure :: a -> (b -> a)" is the type signature for pure, when specialized to functions. And clearly the only thing you can do there is to ignore the b and just return the a you have. Which is exactly what const does.
[10:48:26] *** Joins: caubert (~caubert@136.244.111.235)
[10:48:42] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[10:53:43] <arahael> Anyone else doing advent of code using literate haskell?
[10:54:11] *** Joins: hololeap (~hololeap@user/hololeap)
[10:55:46] *** Joins: fr33domlover (~fr33@2.53.150.205)
[10:56:16] <dmj`> that's advanced
[10:57:39] <arahael> dmj`: Not really, it was surprisingly easy - the literate haskell bit.  Ensuring it's *intelligent* is a separate matter!
[10:58:02] *** Joins: monochrom (trebla@216.138.220.146)
[10:58:13] <dmj`> arahael: hmm, intelligent in what way?
[10:58:17] <arahael> The main thing that's awkward is that cabal requires the file extension to be either .hs, or .lhs, so since I need .md for... Uh... Literate reasons, I had to use symlinks.
[10:58:29] <arahael> dmj`: Intelligent in that it makes sense to the reader.
[10:58:52] <dmj`> arahael: ah, yea I don't use cabal files, just raw ghc
[10:59:06] <arahael> dmj`: That's even easier!
[10:59:10] <dmj`> might try to do AOC w/ just boot packages only
[10:59:20] <dmj`> ReadP FTW
[10:59:28] <arahael> dmj`: Go for it. :)
[11:00:27] <dmj`> the only thing I don't like is that chunksOf and split aren't in Data.List, so I always end up rewriting them
[11:01:10] <dmj`> just all maps, sets, lists, etc.
[11:01:33] <arahael> Yeah.  I was surprised to discover that there isn't a windowing function already in the prelude.
[11:01:38] <arahael> (Am I wrong?)
[11:01:55] <arahael> I had to write my own implementation in my example above.
[11:02:46] * dmj` looks
[11:04:09] <dmj`> arahael: nothing built-in, but you can use tails
[11:04:40] *** Joins: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net)
[11:04:46] <dmj`> @def sliding n xs = take n <$> tails xs
[11:04:47] <lambdabot>  Defined.
[11:05:00] <dmj`> > sliding 3 [1..5]
[11:05:03] <lambdabot>  [[1,2,3],[2,3,4],[3,4,5],[4,5],[5],[]]
[11:05:10] *** Joins: chele (~chele@user/chele)
[11:05:36] <c_wraith> I just used zipWith3
[11:06:02] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[11:06:43] <arahael> Nice.
[11:09:11] *** Quits: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[11:09:13] <dmj`> c_wraith: that was smart
[11:09:46] <dmj`> > zipWith3 (\x y z -> sum [x,y,z]) [1..5] (tail [1..5]) (tail (tail [1..5]))
[11:09:48] <lambdabot>  [6,9,12]
[11:10:09] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[11:10:16] <dmj`> c_wraith: would have been up a creek if the window size was 4 :) 
[11:10:37] <hololeap> what function in System.FilePath can resolve ("/var/uploads/" </> "../uploads/thing") to "/var/uploads/thing" ?
[11:10:37] <arahael> That's teh thing with advent of code: It's *all* throwaway code, and you don't know the change that will happen in part 2.
[11:11:05] <c_wraith> nah, I can nest zipWith :)
[11:11:26] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:2b1a:1927:b5c5:1912)
[11:11:29] <dmj`> arahael: true
[11:11:39] <arahael> I think I prefer the take n <$> tails xs
[11:12:06] *** Quits: alx741 (~alx741@181.196.69.153) (Ping timeout: 256 seconds)
[11:13:01] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[11:17:30] <dmj`> c_wraith: tricky :)
[11:18:04] <hololeap> % canonicalizePath ("/dev/" </> "..")
[11:18:04] <yahb> hololeap: "/dev/.."
[11:18:12] <hololeap> shouldn't this return "/" ?
[11:20:56] *** Joins: jakalx (~jakalx@base.jakalx.net)
[11:21:40] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:22:48] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[11:23:08] <c_wraith> hololeap: I'm willing to bet yahb runs in a jail that doesn't have /dev
[11:23:47] *** Joins: kennyd (~bc8165b6@83.167.180.121)
[11:23:58] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:24:16] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:24:25] <hololeap> no, I think this is the actual reason: https://neilmitchell.blogspot.com/2015/10/filepaths-are-subtle-symlinks-are-hard.html
[11:24:52] <c_wraith> on my system, it does result in "/"
[11:25:00] <hololeap> wait, really?
[11:25:01] *** Joins: alx741 (~alx741@181.196.69.156)
[11:25:40] <hololeap> oh, I guess it does on mine too
[11:25:50] <c_wraith> I think it's just the env yahb runs in
[11:26:38] <c_wraith> If I ask ghci to canonicalize a "/dev2/.." I get no change, as I have no /dev2 directory
[11:27:19] *** Quits: cyclosa (~cyclosa@2603-6011-4a41-8ada-0000-0000-0000-0eaa.res6.spectrum.com) (Quit: computer broke)
[11:27:22] <kennyd> it works even on windows, canonicalizePath ("/dev/" </> "..")  => "C:\\"
[11:27:43] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[11:28:18] <hololeap> https://github.com/Happstack/happstack-server/blob/master/src/Happstack/Server/FileServe/BuildingBlocks.hs#L375-L394
[11:28:30] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[11:29:27] <hololeap> I'm trying to submit a PR that does away with the system-filepath package, but I don't see any equivalent in the filepath or directory packages
[11:30:00] <hololeap>  >>> combineSafe "/var/uploads/" "../uploads/home/../etc/passwd"
[11:30:08] <hololeap> Just "/var/uploads/etc/passwd"
[11:30:12] *** Quits: Cajun (~Cajun@user/cajun) (Ping timeout: 256 seconds)
[11:34:03] *** Joins: cfricke (~cfricke@user/cfricke)
[11:34:43] *** Quits: deadmarshal (~deadmarsh@95.38.115.243) (Ping timeout: 256 seconds)
[11:38:29] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[11:38:49] *** Joins: deadmarshal (~deadmarsh@95.38.115.243)
[11:39:51] *** Joins: img (~img@user/img)
[11:39:55] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:40:00] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[11:40:01] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:40:19] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:44:22] *** Joins: ub (~Thunderbi@p200300ecdf0ba2be089e3f14725e8432.dip0.t-ipconnect.de)
[11:49:20] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 252 seconds)
[11:50:30] *** Joins: nschoe (~quassel@2a01:e0a:8e:a190:8ef1:d1b1:96b4:f9df)
[11:51:02] *** Joins: Erutuon (~Erutuon@user/erutuon)
[11:55:13] *** Quits: iqubic (~user@2601:602:9502:c70:7d14:3ce3:e8b8:8f59) (Remote host closed the connection)
[11:55:24] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:55:29] *** Joins: neurocyte0132889 (~neurocyte@45.128.183.11)
[11:55:29] *** Quits: neurocyte0132889 (~neurocyte@45.128.183.11) (Changing host)
[11:55:29] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[11:57:24] *** Quits: aarchi (sid486183@id-486183.uxbridge.irccloud.com) (Excess Flood)
[11:57:27] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:57:33] *** Joins: aarchi (sid486183@id-486183.uxbridge.irccloud.com)
[11:59:32] *** Joins: iqubic (~user@2601:602:9502:c70:7d14:3ce3:e8b8:8f59)
[12:01:10] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:04:58] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:05:16] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:09:37] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 250 seconds)
[12:11:17] *** Quits: chomwitt (~chomwitt@2a02:587:dc16:f200:12c3:7bff:fe6d:d374) (Quit: Leaving)
[12:13:48] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:14:06] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:15:45] *** Joins: alzgh (~alzgh@user/alzgh)
[12:16:28] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[12:16:50] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[12:18:55] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[12:19:29] *** Joins: michalz (~michalz@185.246.204.43)
[12:22:51] *** Joins: kuribas (~user@188.188.219.184)
[12:22:56] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[12:24:24] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[12:26:50] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:27:08] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:30:30] <dminuoso> Is there any documentation for `cabal build --ghc-options`? Because I cant find any..
[12:33:04] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:33:22] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:33:33] *** Joins: jstolarek (~jstolarek@137.220.120.162)
[12:35:13] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:35:31] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:35:57] *** Joins: acidjnk_new (~acidjnk@pd9e0bdc0.dip0.t-ipconnect.de)
[12:36:05] *** Quits: deadmarshal (~deadmarsh@95.38.115.243) (Ping timeout: 252 seconds)
[12:37:19] *** aforemny_ is now known as aforemny
[12:37:29] *** Quits: nrl^ (~nrl@68.101.58.90) (Remote host closed the connection)
[12:39:23] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:39:29] <merijn> dminuoso: What kinda documentation would you expect?
[12:39:36] <dminuoso> Any?
[12:39:41] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:39:42] <dminuoso> It's not even listed in the man page
[12:39:44] <merijn> It just passes options directly to GHC
[12:39:48] <dminuoso> Well only under configure
[12:39:49] <dminuoso> Sure
[12:39:56] <dminuoso> Is it too much to ask for a man page regardless?
[12:40:01] <merijn> Probably :p
[12:40:03] <dminuoso> A note of it I mean
[12:40:05] <dminuoso> :p
[12:40:15] <dminuoso> The thing is
[12:40:26] <dminuoso> It allows for no discoverability of this option
[12:40:41] <dminuoso> You know it exists because someone told you. But I couldn't even find its existence based on the man page
[12:40:44] <merijn> I don't even know where the manpage is in the cabal repo, so I'm not sure anyone else does either, let alone update it :p
[12:40:50] <dminuoso> Unless I happened to have read this:
[12:40:52] <dminuoso> https://cabal.readthedocs.io/en/3.4/cabal-commands.html
[12:40:57] <dminuoso> Under `cabal v2-configure`
[12:41:02] <dminuoso> `cabal v2-configure FLAGS; cabal v2-build is roughly equivalent to cabal v2-build FLAGS`
[12:41:02] <merijn> dminuoso: I was about to say, the cabal docs :p
[12:41:05] <dminuoso> The thing is
[12:41:32] <dminuoso> Its just highly annoying that you need to read another commands (v2-configure, it's even called v2 mind you!) documentation to know about build.
[12:41:50] <dminuoso> Sort of suggesting "read the entire docs from top to bottom before you ask"
[12:42:41] *** Quits: kuribas (~user@188.188.219.184) (Ping timeout: 252 seconds)
[12:44:21] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:44:40] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:45:45] <merijn> dminuoso: Complain to Hecate and her docs improvement iniative? :p
[12:46:46] <dminuoso> I guess I should just fix it myself rather than complain
[12:46:53] <merijn> Hecate just became cabal core contributor too, so... :p
[12:46:54] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Read error: Connection reset by peer)
[12:46:55] <Hecate> 'sup
[12:47:04] <merijn> Hecate: Throwing you under the bus :p
[12:47:12] <Hecate> sure that's the point :)
[12:47:35] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[12:49:23] *** Joins: dsrt^ (~dsrt@68.101.58.90)
[12:50:30] <dminuoso> But yeah, cabal-install documentation has some pretty bad parts.
[12:50:56] <Hecate> yes
[12:51:20] <Hecate> Gil Mizrahi is working on improving this
[12:51:47] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[12:52:37] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[12:54:07] *** Joins: deadmarshal (~deadmarsh@95.38.115.243)
[12:57:26] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:57:44] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:59:24] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:59:42] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:01:24] <arahael> dminuoso: Imagine my difficulty finding out how to disable colour output in cabal build.
[13:03:40] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:03:59] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:04:47] *** Quits: mestre (~mestre@191.177.175.57) (Quit: Lost terminal)
[13:04:59] <Hecate> arahael: NO_COLOR doesn't work?
[13:06:13] *** Joins: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net)
[13:06:28] <arahael> Hecate: 1) I didn't actually test that, and 2) Where's that documented?
[13:10:27] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:10:42] <Hecate> hmm, nowhere
[13:10:46] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:10:47] <Hecate> it doesn't work.
[13:10:53] <Hecate> but it will have to
[13:11:03] *** Quits: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[13:11:58] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[13:13:21] <merijn> Only 45 people on the Haskell leaderboard for AoC
[13:13:25] <merijn> come on, slackers :p
[13:14:50] *** Quits: kmein (~weechat@user/kmein) (Quit: ciao kakao)
[13:15:53] *** Joins: kuribas (~user@ip-188-118-57-242.reverse.destiny.be)
[13:16:52] *** Joins: kmein (~weechat@user/kmein)
[13:17:08] <mniip> slackers indeed
[13:18:43] <[exa]> people don't use awk for this?
[13:18:57] <merijn> I mean, you can use whatever :p
[13:19:12] <merijn> I use over-engineered Haskell :p
[13:20:53] <merijn> My personal rule is to try and keep my code (mostly?) readable to Haskell beginners and (more importantly) no unhandled errors
[13:21:15] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[13:21:32] <Hecate> arahael: what did you use for no colours in cabal, btw?
[13:21:40] <Hecate> I'm gonna implement NO_COLOR
[13:22:16] <arahael> Hecate: I ended up using --ghc-options=-fdiagnostics-color=never but there are other bugs preventing that from working - and it didn't fix my ultimate issue where Shake, which calls cabal, has an "fd:7: hGetContents: invalid argument (invalid byte sequence)" as a result.
[13:22:45] <arahael> Hecate: Or rather, it works, but you have to recompile basically everything, and still has that result.
[13:23:23] <arahael> I should find out what byte sequence it's complaining about, but not today - rather drained from everything else.  *sigh*.  Video conferences....
[13:23:29] <Square> if i have a polymorphic function with proper signature and all. Create local version of it (providing some, but not all, arguments) it sort loses its polymorphic status and get type infered to first application. Ie. myFknWSomeParams = myFkn x y. Can invoke "myFkn x y moreArgs" but not "myFknWSomeParams moreArgs" 
[13:23:35] <merijn> arahael: tbh, invalid byte sequence is often "you f-ed up your locale" :p
[13:23:49] <arahael> merijn: Yep, it's f'ing UTF-8. :)
[13:23:52] *** Joins: nek0 (~nek0@nek0.eu)
[13:23:57] <merijn> arahael: Which OS?
[13:24:02] <arahael> merijn: macOS.
[13:24:14] <merijn> What's the output of "locale" in your shell?
[13:24:39] <arahael> merijn: Except for LC_ALL, which is unset, it's all en_AU.UTF-8.
[13:25:33] <merijn> arahael: Mine is: https://paste.tomsmeding.com/deHyKqgk
[13:25:52] <merijn> arahael: And I recall having issues on macOS (years ago) before fixing my environment to set a proper locale
[13:26:34] <arahael> merijn: Hmm, let me try setting the LANG and LC_ALL explicitly to those, as well - that's the only thing that's different.
[13:27:01] <arahael> merijn: Doing a rebuild...
[13:27:41] *** Joins: xkuru (~xkuru@user/xkuru)
[13:27:57] <zincy> I am doing state machine testing in hedgehog for a card game, should I use my existing player action validation function to help generate state machine actions or does this defeat the point?
[13:28:05] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[13:28:21] <[exa]> merijn: where's the haskell leaderboard tho?
[13:28:32] <merijn> [exa]: See topic
[13:28:47] <[exa]> aaaaaay
[13:28:49] <[exa]> thanks
[13:29:26] *** Quits: deadmarshal (~deadmarsh@95.38.115.243) (Ping timeout: 252 seconds)
[13:30:11] <arahael> Oh, wow, quite a few peole on that leaderboard, has it been shared outside the IRC?
[13:30:26] <merijn> arahael: It's been the same for the past 2 years
[13:30:44] <arahael> I just put myself on it :D
[13:31:00] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[13:31:48] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[13:34:11] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:34:32] <[exa]> will I get banned if I did the first aoc in R?
[13:34:45] <merijn> :O
[13:34:47] <merijn> Heresy
[13:34:56] *** Joins: hololeap (~hololeap@user/hololeap)
[13:35:24] <nek0> Hi folks, I'm having a problem using exceptions, with which I am not very familiar with. The issue I have is, that a call of "fromException" returns "Nothing" instead of "Just WhateverException". Reproducing this issue in GHCI has been unsuccessful so far...
[13:35:29] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[13:35:37] *** Joins: deadmarshal (~deadmarsh@95.38.115.243)
[13:35:46] <arahael> [exa]: I did one of mine last year (or was it 2019?), in QuickBASIC.
[13:35:59] <[exa]> nek0: there are many types of exceptions so you might be catching the wrong one. Can we have a code sample?
[13:36:25] <[exa]> arahael: now that's a honorable adventure
[13:36:25] <merijn> Yeah, ENOTENOUGHINFO
[13:36:48] <arahael> merijn: E_NOTENOUGHINFO.
[13:37:03] *** Lord_of_Life_ is now known as Lord_of_Life
[13:37:04] <[exa]> pls negate your error returns
[13:37:07] <merijn> arahael: No underscores in E codes :p
[13:37:12] <Unhammer> Hi, http://sprunge.us/3rIlhp?haskell is there some smart way to check that roundtripping works in both directions for sumtypes that can't be enum/bounded?
[13:37:12] <arahael> Finally, my build completed. Now to do a re-build, with my set locale.
[13:37:18] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:37:20] <arahael> merijn: Oh?  I thought they often did!
[13:37:31] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[13:37:52] *** Joins: mvk (~mvk@2607:fea8:5cc1:fa00::4702)
[13:38:04] <merijn> Unhammer: 1 list of tuples and then build two maps (one in each direction)
[13:38:08] <Unhammer> for all ints, I know fromStatus(toStatus n)==n, can even quickcheck that, but I can't check the other way around toStatus(fromStatus s)==s without being able to generate all possible statuses 
[13:38:30] <arahael> merijn: https://gist.github.com/arafangion/632f5072d56afed633e3f77d9ec44d11
[13:38:38] <Unhammer> merijn,  but how do I know my map is complete?
[13:38:43] <arahael> merijn: I don't think it's the locale.
[13:38:48] <nek0> [exa]: I tried to build a minimal working error, but it failed at failing...
[13:39:03] <merijn> Unhammer: Same idea, but special case the other constructor :p
[13:39:24] <Unhammer> I don't quite understand
[13:39:37] <merijn> use my approach for the bounded constructor part
[13:39:39] <[exa]> nek0: oh noes.
[13:39:50] <merijn> Then write a wrapper function around those dictionaries handling the unbounded Other part
[13:40:16] <[exa]> nek0: so at least snippets of the original code?
[13:42:33] <arahael> merijn: When I find time (and energy), I intend to make my buidl system call 'cabal build' in _binary_ mode, such that it uses ByteStrings instead, I'll then be able to look at what the particular sequence is that it's choking on.
[13:42:37] <hololeap> Unhammer: you could also move the Other constructor to it's own type so you can derive Enum/Bounded, then have your round trip between (Either OtherStatus Status <-> Int)
[13:44:08] <Unhammer> merijn,  list of pairs just means I make it a runtime error, doesn't it? http://sprunge.us/tNc1gA?haskell
[13:44:23] <Unhammer> hololeap,  yeah thought of that, except it complicates the use of the type :/
[13:46:10] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:46:29] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:46:29] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:46:42] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[13:46:54] <lortabac> Unhammer: I think you should be able to enumerate the constructors with Data
[13:46:57] <merijn> Unhammer: Just wrap hololeap's approach with pattern synonyms
[13:47:08] <merijn> Then you can use your current syntax with his suggest type
[13:47:31] *** Quits: juhp (~juhp@128.106.188.82) (Quit: juhp)
[13:47:47] <lortabac> otherwise you can make an Arbitrary instance with generic-random
[13:48:47] <Franciman> at last it happened, haskell interpreter overperformed
[13:48:57] <Franciman> ggwp to the haskell garbage collector
[13:49:00] <Franciman> it was hard to overperform it
[13:49:27] <merijn> What do you mean by that?
[13:49:30] <Franciman> precise memory management and high level programming. Choose two
[13:49:38] <Unhammer> ok. Was hoping there was some uncomplicated solution that I just can't see but I guess I hit a hard problem.
[13:50:58] <lortabac> Unhammer: to be honest nothing beats code reviews for these problems
[13:52:11] <Unhammer> that would be a nice world to live in
[13:52:11] <lortabac> Unhammer: we have several data-types like that at work, and have never had a bug due to missing some integers
[13:52:31] <Franciman> merijn: I was doing some tests against haskell's memory management system. I wrote a lambda calculus interpreter in haskell. And now an interpreter in zig where I can fully manage memory layout
[13:52:33] <Franciman> easily
[13:53:04] <Franciman> haskell manages to keep the amount of cache refs high, while keeping cache misses very low
[13:53:14] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[13:53:15] *** Joins: fef (~thedawn@user/thedawn)
[13:54:05] *** Quits: Jing_ (~hedgehog@2604:a840:3::1061) (Remote host closed the connection)
[13:54:42] *** Joins: Jing (~hedgehog@115.207.46.97)
[13:55:49] <Franciman> in zig I get like 70% cache misses lol
[13:55:54] <Franciman> but it is still faster
[13:56:39] <Franciman> haskell also has an higher throughput
[13:56:47] <Franciman> it performs a lot more instructions, in less time
[13:56:50] <Franciman> but that's not enough
[13:56:59] <Franciman> it performs too much
[13:57:07] <arahael> Too much?
[13:57:42] <Franciman> yes it has to do too many operations, that's why in the end it is slower
[13:57:47] <merijn> Franciman: Ah, I know why that is
[13:57:49] <Franciman> I hyperoptimized the zig version
[13:58:00] <Franciman> oh curious to hear
[13:58:09] <merijn> Franciman: GHC is using a copy&collect GC, which means that if you have a small liveset it's very likely to all be in cache
[13:58:19] <merijn> Franciman: Because it all gets copied into a dense memory region
[13:58:25] <Franciman> nice
[13:58:53] <Franciman> the GHC does a really good job
[13:58:55] <Franciman> GC*
[13:59:06] <merijn> Franciman: Basically, the way GHC's GC works is: Create a new heap. Copy all alive data to new heap. Throw away old heap
[13:59:19] <merijn> Franciman: This has several advantages (and disadvantages)
[13:59:35] <merijn> Due to Haskell being lazy there are *a lot* of allocations and *a lot* of garbage
[13:59:45] <Franciman> yep, that's why it's impressive
[14:00:02] <merijn> Since our heap is always a dense blob, your allocator is just a pointer to the end of the heap and allocating is literally "increment a pointer and check overflow"
[14:00:09] <merijn> You can't build a faster allocator than that
[14:00:31] <Franciman> but my zig allocator is the same
[14:00:34] <merijn> And because we copy *live* data only, the GC time scales with the amount of *live* data, not garbage
[14:00:37] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[14:00:50] <Franciman> by live you mean reachable data?
[14:00:55] <Franciman> or something about generations too?
[14:00:58] <merijn> The downside is that if you have a large live set (see the pusher blog posts from a few years ago) you copy a lot
[14:01:18] <merijn> Franciman: I meant reachable yeah. There's also generational collection, but then things get messier to explain :p
[14:01:28] <Franciman> okok nvm the generational
[14:02:00] <merijn> Franciman: basically there's a nursery (where new allocations happen) and if they survive 1 GC, they go into the older generation (which is GCed less frequently), iirc
[14:02:28] <merijn> Franciman: But yeah, if you have 2GB reachable data, you end up copying 2 GB every GC, which can kill you (although compact regions can help reduce/eliminate that)
[14:02:49] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41f2:b4d5:142e:946f) (Remote host closed the connection)
[14:03:00] <Franciman> my test case is summing the first 10M numbers, with a recursive function
[14:03:02] <Franciman> :P
[14:03:10] <Franciman> so it allocates quite a bit, but they are all small values
[14:03:18] <Franciman> also in haskell recursion is basically cheap
[14:03:20] <merijn> yeah, that's gonna have a tiny live set (only a handful of numbers)
[14:03:39] <merijn> Franciman: You might wanna run your haskell code with "+RTS -sstderr" if you wanna see GC info
[14:04:07] <Franciman> thanks. merijn my problem is that I can't figure out in any way how to improve the timing
[14:04:11] <Franciman> of the haskell version
[14:04:28] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[14:04:51] <Franciman> if the GC is so effettive, it must be somewhere that I have to improve. I bet on the GC
[14:05:01] <Franciman> in fact my zig version does arena allocation
[14:05:07] *** Quits: hololeap (~hololeap@user/hololeap) (Read error: Connection reset by peer)
[14:05:14] <Franciman> I request a page of memory from the OS, and allocate without ever deallocating anything
[14:05:23] <Franciman> so it does 0 memory management
[14:06:11] *** Joins: _bo (~bo@217.18.216.247)
[14:06:16] <arahael> Franciman: Generally you can't achieve the best general case GC.
[14:06:23] *** Joins: hololeap (~hololeap@user/hololeap)
[14:06:26] <arahael> Franciman: You have to optimise it for a very particular use case.
[14:06:46] <Franciman> hmm I see, so for writing a programming language it's not a particularly good idea
[14:07:02] <merijn> There is no best GC, no
[14:07:07] <merijn> GC design is 100% trade offs
[14:07:13] <Franciman> because I want the internal memory of the interpreter to be managed differently from the language GC
[14:07:19] <arahael> Franciman: There is a *ton* of papers about GC's, some quite good ones out tehre.
[14:07:31] <merijn> GHC's GC is optimised for lots of garbage and high throughput (small percentage of GC time compared to compute)
[14:07:37] <Franciman> yes I understand
[14:07:50] <Franciman> basically my problem was: let me see if memory management affects my interpreter, but it doesn't lol
[14:07:51] <merijn> It is not good for large live sets or for low latency (i.e. minimising the longest possible GC pause)
[14:08:12] <Franciman> so I can't get any more speed out of it
[14:08:15] <Franciman> yes I understand it
[14:08:51] <Hecate> arahael: can you tell me if setting LC_ALL has fixed your issues?
[14:09:04] <arahael> Hecate: It did not.
[14:09:08] <Franciman> well ty all
[14:09:28] <Franciman> back to humiliating my haskell interpreter to hope and find out something about its performances
[14:09:40] <Hecate> arahael: ok thanks :)
[14:10:04] <arahael> Hecate: No worries :)
[14:12:26] <sm> Franciman, have you tried profiling yet ?
[14:12:33] <Franciman> I did
[14:13:28] <sm> sounds like you're finding out lots
[14:14:46] <Hecate> arahael: what's your GH username?
[14:15:42] <Franciman> sm: I got some numbers out, but can't quite make sense of them
[14:15:51] <arahael> Hecate: arafangion
[14:16:03] <Franciman> I mean the most used functions are of course what make the most of the time spent
[14:16:04] <arahael> Hecate: most of my repos are private, though.
[14:16:11] <Franciman> but I can't optimize them more than I do now
[14:16:11] *** Quits: theproffesor (~theproffe@user/theproffesor) (Ping timeout: 245 seconds)
[14:16:37] <merijn> Franciman: Have you tried playing with speedscope?
[14:16:41] <merijn> https://www.speedscope.app/
[14:16:56] <Franciman> I didn't know about it, so many thanks
[14:16:57] <merijn> See also https://mpickering.github.io/posts/2019-11-07-hs-speedscope.html
[14:18:17] *** Joins: theproffesor (~theproffe@user/theproffesor)
[14:19:57] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:20:15] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:20:18] <Hecate> arahael: yeah I just ping'd you on the ticket
[14:21:02] *** Joins: cuz (~user@50.235.10.194)
[14:21:12] <Franciman> ty and nice font
[14:21:16] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Quit: Leaving)
[14:21:26] <arahael> Hecate: Ah, very nice!  I also want it on 'cabal build' as well, not just cabal install.
[14:21:49] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[14:22:16] <arahael> Hecate: I also use --ghc-options=-fdiagnostics-color=never which was suggested by someone else here, and it does disable colour for the most part, but still causes an invalid byte order for some reason.
[14:24:35] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:24:43] <arahael> Hecate: Other, possibly related links, which were also given to me in this channel are: https://gitlab.haskell.org/ghc/ghc/-/issues/13718
[14:24:54] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:25:20] *** Quits: deadmarshal (~deadmarsh@95.38.115.243) (Ping timeout: 256 seconds)
[14:26:02] *** Joins: juhp (~juhp@128.106.188.82)
[14:26:03] <Hecate> hmm, not *that* related in the end
[14:28:02] *** Quits: ouro_boros (~ouroboros@2804:14c:65e4:93f6:a589:7295:b475:5b03) (Ping timeout: 268 seconds)
[14:28:59] *** Joins: jakalx (~jakalx@base.jakalx.net)
[14:30:05] *** Joins: __monty__ (~toonn@user/toonn)
[14:30:36] *** Joins: deadmarshal (~deadmarsh@95.38.115.243)
[14:32:11] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:b4e0:9d38:46ba:cc41)
[14:32:15] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:b4e0:9d38:46ba:cc41) (Client Quit)
[14:34:17] *** Joins: Farzad (~FarzadBek@37.98.106.66)
[14:36:01] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:36:19] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:38:11] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:38:30] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:39:13] *** Quits: kennyd (~bc8165b6@83.167.180.121) (Quit: CGI:IRC (Ping timeout))
[14:39:19] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:39:42] *** Joins: kennyd (~bc8165b6@cerf.good1.com)
[14:42:01] <sm> Franciman: I guess next level down would be inspecting the core, there have been some how-tos on that
[14:44:57] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:45:15] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:46:55] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:47:13] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:48:53] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:49:11] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:50:51] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:51:09] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:52:25] *** Quits: deadmarshal (~deadmarsh@95.38.115.243) (Quit: ZNC 1.8.2 - https://znc.in)
[14:53:32] *** Joins: deadmarshal (~deadmarsh@95.38.115.243)
[14:53:41] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[14:54:39] *** Joins: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de)
[14:54:51] *** Joins: mmhat (~mmh@55d4c042.access.ecotel.net)
[14:57:07] *** Quits: kennyd (~bc8165b6@cerf.good1.com) (Quit: CGI:IRC (Error))
[14:57:19] *** Joins: Lycurgus (~juan@98.4.112.204)
[14:57:59] *** Joins: kennyd (~bc8165b6@83.167.180.121)
[14:58:49] *** Quits: kennyd (~bc8165b6@83.167.180.121) (Client Quit)
[14:59:37] *** Joins: kennyd (~bc8165b6@cerf.good1.com)
[14:59:48] *** Joins: Guest42 (~Guest42@50.39.205.155)
[15:02:42] *** Quits: deadmarshal (~deadmarsh@95.38.115.243) (Quit: ZNC 1.8.2 - https://znc.in)
[15:03:15] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41f2:b4d5:142e:946f)
[15:03:43] *** Joins: deadmarshal (~deadmarsh@95.38.115.243)
[15:04:26] *** Quits: jmorris (uid433911@id-433911.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[15:06:08] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[15:07:32] *** Joins: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net)
[15:08:59] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41f2:b4d5:142e:946f) (Ping timeout: 252 seconds)
[15:11:10] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:11:28] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:12:17] *** Quits: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[15:14:38] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:15:54] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:16:20] *** Quits: cuz (~user@50.235.10.194) (Ping timeout: 256 seconds)
[15:21:05] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[15:21:24] *** Quits: Guest42 (~Guest42@50.39.205.155) (Quit: Client closed)
[15:24:22] <geekosaur> arahael, have you tried LANG=C? ghc uses various Unicode characters in its errors even without color sequences
[15:26:58] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:27:50] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[15:29:48] <yin> @pl if x then a else b
[15:29:48] <lambdabot> if' x a b
[15:30:05] <yin> where is lambdabt getting this if' from?
[15:30:27] <kennyd> @hoogle if'
[15:30:28] <lambdabot> Data.Bool.HT if' :: Bool -> a -> a -> a
[15:30:28] <lambdabot> Control.Conditional if' :: ToBool bool => bool -> a -> a -> a
[15:30:28] <lambdabot> GHC.SourceGen.Expr if' :: HsExpr' -> HsExpr' -> HsExpr' -> HsExpr'
[15:31:16] <yin> eh. i did that and got nothing
[15:31:45] <geekosaur> it's just invented
[15:32:12] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:32:13] <geekosaur> since the @pl plugin was last updated we got bool, which is what it really should be using these days
[15:32:31] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:32:41] <kennyd> I kind of dislike the name, and reversed arguments
[15:32:45] <kennyd> (of bool)
[15:33:01] <geekosaur> the arguments match maybe and either
[15:33:25] <yin> what does HT stand for?
[15:33:57] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[15:34:15] <arahael> geekosaur: nope but i have gone to bed, will try to remember tomorrow!
[15:34:17] <kennyd> geekosaur. right. but if I'm using such a function I'm more likely to think in terms of if-then-else than maybe or either 
[15:34:49] <byorgey> yin: I believe it stands for Henning Thielemann
[15:34:56] <byorgey> https://hackage.haskell.org/package/utility-ht-0.0.16
[15:35:05] <yin> kennyd: haskell having if...then...else is the original sin
[15:35:25] <kennyd> though bool might be nicer when partially implying it in some cases. so maybe there's place for both if' and bool
[15:35:33] *** Quits: deadmarshal (~deadmarsh@95.38.115.243) (Ping timeout: 256 seconds)
[15:35:39] <byorgey> kennyd: I use partially applied bool on a regular basis
[15:35:40] <kennyd> partially applying :P
[15:37:43] <yin> byorgey: thanks
[15:39:49] *** Joins: narendra (~user@2a02:8109:b63f:ff7c::56c2)
[15:41:41] *** Joins: deadmarshal (~deadmarsh@95.38.115.243)
[15:42:51] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[15:43:12] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[15:45:23] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[15:48:58] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[15:51:56] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:52:05] *** Joins: jakalx (~jakalx@base.jakalx.net)
[15:52:14] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:55:13] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[15:58:09] *** Joins: arjun (~user@user/arjun)
[15:58:46] <arjun> soo, just got around reading the 3 layered haskell cake post from here (https://www.parsonsmatt.org/2018/03/22/three_layer_haskell_cake.html)
[15:59:13] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[15:59:20] <arjun> what do people think of it ?
[16:02:12] <dminuoso> Every time you have someone offer you a silver bullet on program design, reject it.
[16:03:26] <dminuoso> I've seen this particular blog post many times, and I dislike every bit of it. I think what this is, is a representation on how the author - at that time in the past - used to structure their programs.
[16:03:56] <[exa]> arjun: reminds me some of the more traditional OOP guidelines
[16:04:31] <arjun> it does, doesn't it
[16:05:10] <arjun> dminuoso: sure, i've seen this post several times, finally got around to reading it
[16:05:19] <[exa]> would be nice if it was published as "how and why we have our internal guidelines as such", but trying to apply this universally is a monstrous mistake
[16:05:55] <arjun> every place/one has/have their own tbh
[16:06:07] <[exa]> or perhaps if there was a tools ecosystem that benefited from having the internals similar
[16:06:12] <[exa]> yeah
[16:06:38] <arjun> i was just wondering if this is a popular approach, since the blog post is popular and thus amplified
[16:06:53] <dminuoso> Not given what I see around
[16:06:59] <dminuoso> Some bits of it, yes.
[16:07:05] <dminuoso> But the overall structure, no.
[16:08:16] <arjun> i liked the readerT pattern post (linked atop this post) from fpcomplete much better
[16:08:26] <dminuoso> For instance, for many of my executables I usually maintain some `newtype AppM a = AppM { runAppM :: ReaderT Env (LoggingT IO) a }`
[16:08:42] <dminuoso> So I avoid transformers that are not isomorphic to ReaderT
[16:09:09] <dminuoso> This I do because I want to be able to unlift IO actions without worrying about interactions between state and exceptions
[16:09:41] <[exa]> arjun: you can kinda see that the post degenerates to something like database-ish transactions & data stream handling specifics later... For that usecase I'd probably think about similar structure
[16:09:52] <arjun> i didn't get the last part dminuoso 
[16:10:08] <maerwald> I somehow always disliked 'App' transformers, but I don't know why
[16:10:37] <arjun> \o
[16:10:49] <dminuoso> arjun: Imagine you have a `StateT IO Int` and you want to have bracket for that
[16:10:53] *** Joins: chomwitt (~chomwitt@2a02:587:dc0d:6d00:12c3:7bff:fe6d:d374)
[16:11:03] <dminuoso> Or `catch`
[16:12:23] <dminuoso> Do you want state in an exception handler to be preserved?
[16:12:34] <maerwald> hm, I think I've never seen StateT or MonadState as part of the general application architecture... people either use IORefs/TVars/etc in their ReaderT env or use StateT only locally
[16:13:02] <dminuoso> maerwald: servant forces it onto you in handlers unless you hoist yourself out of it
[16:13:47] <dminuoso> So far Ive seen more global StateT than IORefs in a ReaderT environment, sadly
[16:14:02] <arjun> maerwald: i think state isn't cool with concurrent stuff either (race / non-determinism)
[16:14:25] <dminuoso> arjun: Its perfectly cool, we have STM to deal with that.
[16:14:45] <dminuoso> Of course this is yet another reason why StateT is lacking, since you cant do concurrency with it
[16:14:47] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:1d11:e285:317e:6a2a)
[16:15:43] *** Quits: chomwitt (~chomwitt@2a02:587:dc0d:6d00:12c3:7bff:fe6d:d374) (Ping timeout: 252 seconds)
[16:16:33] <arjun> dminuoso: that's why we use IORefs/TVars instead of StateT ?
[16:17:01] <dminuoso> Like I said, I use it because I find it way simpler to reason about in the presence of exceptions
[16:17:36] <arjun> i see
[16:17:39] <dminuoso> It's a coping technique because I'm not a genius.
[16:17:54] *** Joins: chomwitt (~chomwitt@2a02:587:dc0d:6d00:12c3:7bff:fe6d:d374)
[16:18:38] <maerwald> IOHK since has shifted to freer-simple I think (in some parts of their stack)... which, amusingly, still has the same issues as any mocking: equivalence
[16:19:40] <arjun> that's an effect system, right maerwald? something like polysemy ?
[16:20:19] <maerwald> other parts use a configuration context (passed inte the reader env I hink)  that defines functions
[16:20:32] <maerwald> so I'm not sure that three-layer cake is used anywhere there anymore
[16:20:54] <maerwald> arjun: yeah
[16:22:12] <dminuoso> arjun: And regarding tagless final. First this creates a hefty optimization barrier, if you employ this widely in your program, chances are you will miss a lot of inlining opportunities. 
[16:22:32] <dminuoso> This is because writing typeclass polymorphic code ends up being represented as a function taking a dictionary
[16:22:55] <maerwald> I think using custom classes instead of explicit dictionaries is unpopular
[16:23:01] <dminuoso> So doing this out of a basic rudimentary design principle seems to be flawed in that you're tieng your compilers hands from the beginning.
[16:23:33] *** Joins: Typedfern (~Typedfern@75.red-88-22-25.staticip.rima-tde.net)
[16:23:40] <merijn> dminuoso: I like tagless final for specific logic bits, but a specific stack for the majority of actual program code
[16:23:58] <arjun> hang on, let me google what this tagless final thingy is
[16:23:59] <maerwald> e.g. https://git.io/JMwdD
[16:24:04] <arjun> sounds like bad news : P
[16:24:20] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[16:24:41] <merijn> arjun: Basically "mtl style classes, but not the ones from mtl, because they're bad"
[16:25:03] <maerwald> isn't that just only one interpretation of tagless final?
[16:25:25] <merijn> What other interpretations exist?
[16:25:39] <maerwald> I don't remember... it was discussed here once, I probably won't find it
[16:25:59] *** Quits: fr33domlover (~fr33@2.53.150.205) (Ping timeout: 252 seconds)
[16:26:13] <dminuoso> maerwald: I think you were missing a single word in that sentence somewhere.
[16:26:22] <dminuoso> Either a `dont` in the first half or a `not` in the second
[16:26:36] <dminuoso> Ops sorry. I meant merijn
[16:26:59] *** Quits: Typedfern (~Typedfern@75.red-88-22-25.staticip.rima-tde.net) (Remote host closed the connection)
[16:27:07] <merijn> dminuoso: No?
[16:27:37] <dminuoso> You like tagless final for specific logic bits, *but* a specific stack for the majority of actual program code?
[16:27:44] <merijn> yes
[16:27:44] <dminuoso> Im not sure how to understand that sentence then
[16:28:09] <merijn> dminuoso: i.e. most of the program logic *isn't* typeclass polymorphic, avoiding the lack of inlining problem you mentioned
[16:28:32] <dminuoso> Ah.
[16:28:36] <merijn> dminuoso: But I tend to have 3-4 different stacks (command line UI, batch job, etc.)
[16:28:52] *** Joins: Typedfern (~Typedfern@75.red-88-22-25.staticip.rima-tde.net)
[16:28:57] <merijn> dminuoso: And tagless final for *specific* tasks (logging, database accesses, etc.) means I can reuse those in all 3-4 stacks
[16:29:36] <dminuoso> Right
[16:30:02] <dminuoso> So if you do this out of code sharing, that's a very different mindset than what the three-layer cake envisions.
[16:30:07] <dminuoso> Which is mostly about mockability/testability
[16:30:16] <merijn> I don't believe in mockability, tbh
[16:30:20] <dminuoso> Yup, neither do I.
[16:30:32] <tomsmeding> maerwald: talking about this thing? https://www.foxhound.systems/blog/final-tagless/
[16:30:41] <dminuoso> Because now you have to guarantee that your mock behaves the same way
[16:30:42] <merijn> Mocks are a copout because you're either bad at engineering, bad at testing, or both
[16:30:43] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[16:30:52] <dminuoso> There's certainly some types where you must mock for some reason or another.
[16:31:06] <dminuoso> We had to mock an external API that was out of our control without access to a test API once
[16:31:42] *** Quits: deadmarshal (~deadmarsh@95.38.115.243) (Ping timeout: 256 seconds)
[16:32:34] *** Joins: deadmarshal (~deadmarsh@95.38.115.243)
[16:32:38] *** Joins: xkuru (~xkuru@user/xkuru)
[16:33:36] <maerwald> merijn: I think mocking is fine to test the logic that has little to do with the mocked stuff... but many times people use it in other ways
[16:33:53] <maerwald> then you'll end up constantly trying to figure out why your tests pass, but the real application fails
[16:36:06] <dminuoso> Plus, if all you did was to test business logic, perhaps keeping it separate and running a unit test would be better?
[16:36:39] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[16:36:48] <kuribas> Square: yes, put it in a let.
[16:37:00] <kuribas> let poly2 = poly1 "someArg"
[16:37:31] <maerwald> tomsmeding: yeah, the more I read about tagless final, the less I understand what they want from me, so I largely just ignore it
[16:37:43] <kuribas> Square: unless you have MonoLocalBinds.
[16:37:52] <kuribas> Square: in that case, give an explicit type signature.
[16:39:33] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:39:51] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:40:52] <kuribas> Square: "where" should work also
[16:41:21] <Square> kuribas, hmm. I seem to have no luck with that. 
[16:41:34] <kuribas> Square: paste some code?
[16:41:47] <Square> ok, give me minute
[16:42:01] <kuribas> If you are using rank-n or other extensions, you may need an explicit signature.
[16:42:07] <arjun> merijn: this really does look like mtl but not mtl (https://dev.to/piq9117/haskell-look-ma-no-concrete-implementation-32p8)
[16:42:20] <kuribas> I believe GADTs enables monoLocalBinds.
[16:42:57] <merijn> arjun: That's because mtl are tagless final, it's just that abstraction level of mtl is bad
[16:43:46] <arjun> dminuoso: so if i understood about the inlining stuff, it's to do with writing typeclass polymorphic functions/code and not getting faster optimized code?
[16:44:38] <arjun> also, what are the alternatives so that we CAN get the compiler love AND write general code ?
[16:45:07] <arjun> merijn: i see
[16:45:26] <merijn> arjun: I the compiler knows the *exact* type (i.e. not typeclass polymorphic) it can just inline the implementation of the relevant class, instead of keeping the typeclass indirection
[16:46:03] <arjun> merijn: you mean *if* ?
[16:46:09] <merijn> eh, yeah
[16:46:11] <dminuoso> arjun: Something like `f :: Num t => t; f = 5` is internally not implemented as an actual value, but a function that takes a dictionary of Num, and then returns a value.,
[16:46:29] <dminuoso> arjun: Note how you have this sort of "function" indirection?
[16:46:50] *** Quits: Typedfern (~Typedfern@75.red-88-22-25.staticip.rima-tde.net) (Remote host closed the connection)
[16:46:53] <dminuoso> Without knowing the dictionary choice/the type of t beforehand, we cannot inline its definition
[16:47:17] <dminuoso> its sort of how you cant inline the body of `\x -> x + 1` without having the argument to that function
[16:47:32] <arjun> dictionary of Num?
[16:47:35] <Square> kuribas, i feel theres too much context involved to produce a readable example in a short while when I *really* should focus on my job. Ill play with it and might ask again at later time. 
[16:47:39] <arjun> what shape does that look like?
[16:47:46] <dminuoso> A record of values/functions
[16:47:53] <arjun> ah, i see
[16:48:10] <arjun> something like dynamic method dispatch in OO polymorphism
[16:48:15] <dminuoso> Yes, exactly
[16:48:34] <arjun> i always wondered how that worked
[16:48:50] <maerwald> arjun: see https://youtu.be/0jI-AlWEwYI
[16:49:05] <merijn> arjun: Note that that's an implementation detail of GHC, though :)
[16:49:14] <maerwald> there's some explanation of inlining wrt classes
[16:50:07] <arjun> maerwald: brownies,i've been dragging my feet on her content for so long, that video and the post "parse dont validate", i'll just carve out and afternoon for those
[16:51:21] <arjun> dminuoso: so, i get it for the values, does that works the same way for typeclass polymorphic functions too?
[16:51:51] <merijn> arjun: Yes
[16:51:51] <arjun> something like `f :: (MonadIO m, MonadFail m, etc..)`
[16:52:06] <merijn> arjun: Effectively they function as hidden arguments taking a dictionary of class functions
[16:52:34] <merijn> arjun: Except, that when GHC statically knows which *actualy* type you use, inlining those dictionaries straight into the code is trivial
[16:52:49] <merijn> So a lot of typeclass overhead/indirection can be trivially optimised away at compile time
[16:52:55] <arjun> so those values and functions are general, but that comes at an inlining cost?
[16:53:03] <maerwald> -fspecialize-aggressively to the rescue
[16:53:31] <dminuoso> It's not even enough
[16:53:35] <arjun> merijn: so if i write general code and not runtime call it, it's fine?
[16:53:40] <dminuoso> You usually need this in conjunction with -fexpose-all-unfoldings
[16:53:48] <dminuoso> and then watch compile time and memory usage skyrocket
[16:54:21] *** Quits: kennyd (~bc8165b6@cerf.good1.com) (Quit: CGI:IRC (Ping timeout))
[16:54:24] <merijn> arjun: So, suppose you write "2 + 2" normally all those things are typeclass polymorphic
[16:54:38] <arjun> sure
[16:54:42] <merijn> arjun: But as soon as it's "2 + 2 :: Int" (via type inference for some function argument, whatever)
[16:55:09] <merijn> arjun: GHC can trivially see "oh, this only uses the Int dictionary" and just inline all the dictionaries function calls straight into that removing all indirection
[16:55:35] <dminuoso> arjun: Yes. In fact, there's some other subtleties involved as well. If you have something polymorphic, it cant be shared. That is, if you have `let x :: Num; x = expensiveExpr in (x * 10, x * 20)`, this will unexpectedly evaluate the expression of `x` twice 
[16:55:37] <arjun> so, fix the type either manually or via inference, win ?
[16:55:53] <merijn> Which actually applies to a large number of typeclass calls, since probably >50% of all calls deal with statically known types
[16:55:56] <merijn> arjun: basically
[16:56:20] <dminuoso> arjun: And because the Haskell authors antipicated this, we have the monomorphism restriction, which will try to monomorphize (make them non-polymorphic) bindings without type signatures in most situations, to avoid performance problems creeping up
[16:56:31] <merijn> arjun: And due to inference this can happen through large chunks of code at once via just 1 type signature somewhere
[16:56:44] <arjun> maerwald: this is what we do with the ghcup code right? there's all sort of poly functions, but they get inferred with main invocations? 
[16:56:49] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[16:56:59] <maerwald> uhm
[16:57:23] <maerwald> you mean `runReaderT` probably 
[16:57:25] <maerwald> etc
[16:57:30] <arjun> merijn: wouldn't the compiler need to know the types anyway for typechecking ?
[16:58:20] <merijn> arjun: the runtime invocation of any specific function can't always be statically known
[16:58:23] <arjun> maerwald: yea, those in the main function which fix the logger and envs etc
[16:58:42] <maerwald> yes, runE, runReaderT and runLogger mostly
[16:58:48] <arjun> merijn: i see
[16:58:49] <maerwald> and then there's LabelOptics tricks
[16:58:55] <merijn> (don't ask me to conjure up an example, because I can't think of an easy one right now :p)
[16:59:12] <arjun> HasDirs and stuff right?
[16:59:38] <maerwald> yeah that allows to re-use the same api across different environments
[17:00:04] <dminuoso> arjun: Consider that you can simply write a module that exposes a polymorphic function. GHC must be able to compile this module on its own, irrespective of whether something else uses it or not.
[17:00:21] <arjun> merijn: that's alright, you've been quite a help already; )
[17:00:21] <dminuoso> So you cant know the used type(s!) beforehand
[17:00:49] <dminuoso> And you cant know all possible typeclass instances either, because they might be defined somewhere else too
[17:01:33] <maerwald> whole program optimization to the rescue
[17:01:33] <arjun> dminuoso: THAT MAKES SO MUCH SENSE
[17:03:55] <dminuoso> Sigh
[17:03:57] <dminuoso> WARNING: /root/.cabal/: no matching files          
[17:04:28] <dminuoso> Is there a way to have cabal tell me where the cabal store is?
[17:05:40] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[17:06:06] *** Joins: sagax (~sagax_nb@user/sagax)
[17:06:14] <maerwald> https://hackage.haskell.org/package/cabal-install-parsers-0.4.3/docs/Cabal-Config.html
[17:06:28] <dminuoso> Mmm
[17:06:56] <dminuoso> Ah I think what happens is that gitlab ci cache can only operate on the current directory
[17:07:04] <dminuoso> That could explain it
[17:07:24] <dminuoso> Damn yes.
[17:07:42] <arjun> dminuoso: just to solidify if i understood, TC polymorphic functions and values are ALWAYS compiled to ditcs redirects, but if you fix a type a compile time, the compiliers walks the redirection for you and basically kisses you on the forehead and inlines that code ?
[17:08:08] <maerwald> whether something inlines or not depends on a lot more factors
[17:08:33] <arjun> : P
[17:08:39] <dminuoso> arjun: No.
[17:08:57] <dminuoso> arjun: Honestly this is a long story and GHC has mechanisms to still inline polymorphic things.
[17:10:02] <arjun> "long story" i bet, i sometimes forget haskell is older than the j word language
[17:10:14] *** Quits: jstolarek (~jstolarek@137.220.120.162) (Ping timeout: 256 seconds)
[17:10:16] <dminuoso> But put it this way: If you make it polymorphic, you dont have a good guarantee it will get inlined. If you make it polymorphic and specialize, you have a better chance of inlining. If you make it polymorphic, specialized and inlinable, you *guarantee* that GHC *can* inline it on the oother side
[17:10:43] <maerwald> it also depends how you call the function
[17:11:00] <dminuoso> (specialization here means, that alongside the definition, GHC will embed a secondary definition that assumes the polymorphic code to be fixed to some type known beforehand)
[17:11:19] <dminuoso> (and then GHC can, on the other side, use the specialized implementation if in that spot it knows it to be that type)
[17:11:26] <maerwald> you have to supply all "arguments"
[17:11:39] <dminuoso> But really, this whole discussion can only go on with "read the GHC source code" at some point
[17:11:51] <maerwald> yes, until the next GHC version 
[17:11:57] <dminuoso> It's very complicated and requires a lot of finesse, expertise and trial-and-error to control optimization
[17:12:11] <arjun> got it (pun)
[17:15:20] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[17:15:56] *** Joins: max22- (~maxime@2a01cb088335980011d3732a3bb127e3.ipv6.abo.wanadoo.fr)
[17:18:00] <yin> is there a usual way of getting chunks between delimiters, like `f START END [0,1,2,START,3,4,END,5,START,6,7,8,END,9] => [[3,4],[6,7,8]]` ?
[17:18:12] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[17:18:19] <maerwald> arjun: https://github.com/quchen/articles/blob/master/fbut.md#f-x---is-not-f--x---
[17:19:42] *** Quits: narendra (~user@2a02:8109:b63f:ff7c::56c2) (Remote host closed the connection)
[17:19:46] <arjun> maerwald: that was helpful
[17:21:17] <arjun> yin: some combination of, dropWhile Start, takeWhile (not End) perhaps ?
[17:21:36] <yin> yes that's what i have
[17:21:57] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[17:26:36] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:26:53] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:28:52] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[17:31:03] *** Quits: Farzad (~FarzadBek@37.98.106.66) (Quit: Leaving)
[17:32:50] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:33:08] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:34:48] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:35:05] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:37:02] *** Quits: max22- (~maxime@2a01cb088335980011d3732a3bb127e3.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[17:38:00] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[17:38:42] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[17:41:55] *** Quits: acidjnk_new (~acidjnk@pd9e0bdc0.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[17:42:16] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[17:45:52] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:46:02] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[17:46:09] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:52:06] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:52:25] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:53:56] <merijn> hmmm
[17:54:10] <merijn> why does incomplete-uni-patterns trigger on an explicitly lazy pattern?
[17:55:21] <dminuoso> Curious, because they're even properly called irrefutable patterns.
[17:55:47] <dminuoso> But I guess, add them to the long list of incomplete/incomplete-uni-patterns bugs?
[17:56:24] <merijn> Well, the warning says it applies to lazy bindings too
[17:56:29] <merijn> I dunno why it's on, though
[17:58:20] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:58:38] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[18:00:18] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[18:00:35] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[18:01:27] <merijn> dminuoso: As far as I can tell it shouldn't be enabled by default (according to the docs) and it isn't on 8.0 through 9.0
[18:01:38] <merijn> So I'm confused why it is on in 9.2
[18:02:29] *** Joins: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com)
[18:03:39] *** Joins: Farzad (~FarzadBek@37.98.106.66)
[18:06:50] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[18:07:07] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[18:08:28] *** Quits: dsrt^ (~dsrt@68.101.58.90) (Remote host closed the connection)
[18:10:05] <yin> is there a flip (.) ?
[18:11:29] <geekosaur> @index (&)
[18:11:29] <lambdabot> Data.Function
[18:12:44] <yin> that's flip ($)
[18:13:48] <yushyin> (>>>)
[18:13:53] <boxscape> yin: Data.Category.>>>
[18:13:59] <boxscape> oh I'm too late
[18:14:23] *** Joins: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de)
[18:14:42] <yushyin> boxscape: only by a few seconds!
[18:15:39] <boxscape> I'm always a bit unsure how long the matrix bridge will take to actually send a message
[18:15:46] <boxscape> (I think there's some jitter, too)
[18:16:04] <yin> that was it! thank you
[18:16:19] <merijn> The answer is *drumroll* someone put in a proposal to enable incomplete-uni-patterns by default and didn't bother to update *any* of the docs! Yay!
[18:17:09] <yin> boxscape: a couple of weeks ago i was hitting 2 hours
[18:17:25] <boxscape> oh boy
[18:18:25] <yin> i'm used to 20 secs when it's good, 2 mins when it' bad and 20 min when it's really bad
[18:18:45] <yin> but many get lost
[18:18:48] <merijn> Well, that kinda renders irrefutable patterns useless
[18:19:20] *** Quits: bsima (~bsima@2604:a880:400:d0::19f1:7001) (Quit: ZNC 1.8.2 - https://znc.in)
[18:19:48] *** Joins: max22- (~maxime@2a01cb08833598008751b1889105ced7.ipv6.abo.wanadoo.fr)
[18:19:55] *** Joins: bsima (~bsima@2604:a880:400:d0::19f1:7001)
[18:20:35] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:20:43] <boxscape> merijn: you can always turn off the warning
[18:20:53] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[18:20:54] <geekosaur> for the whole file, yes
[18:21:04] <merijn> boxscape: Yes, but you can never do that for an individual irrefutable pattern
[18:21:06] <geekosaur> https://gitlab.haskell.org/ghc/ghc/-/issues/20643
[18:21:19] <geekosaur> as merijn just pointed out in #ghc
[18:21:33] <merijn> Also, I'm just grumpy because once *again* nobody updated the GHC flag reference
[18:21:40] <boxscape> merijn: right, but it doesn't seem like adding it to -Wall made this part any worse
[18:21:56] <merijn> Literally *every* *single* *time* I interact with flags someone has fucked up and not updated shit
[18:22:20] <merijn> over 50% of my GHC issues are pointing out missing/undocumented flags >.>
[18:22:22] <yin> when do we replace irrefutable patterns for proofs to the compiler
[18:23:16] <merijn> boxscape: Well, I would've liked that problem to be solved before it got enabled unconditionally and I had to figure out how to selectively disable that flag for 1 compiler in my CI >.>
[18:23:47] <boxscape> that's fair
[18:24:02] <merijn> especially since I consider it a low value warning
[18:24:20] *** Joins: shapr` (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[18:24:47] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:24:47] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:24:47] *** Joins: wroathe (~wroathe@user/wroathe)
[18:26:10] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[18:27:40] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[18:30:17] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[18:35:44] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[18:36:02] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[18:36:05] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[18:36:22] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[18:38:02] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[18:38:35] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:38:35] *** Quits: justache (~justache@user/justache) (Ping timeout: 256 seconds)
[18:39:27] *** Joins: TranquilEcho (~grom@user/tranquilecho)
[18:42:55] *** Quits: bliminse (~bliminse@host86-162-147-196.range86-162.btcentralplus.com) (Quit: leaving)
[18:46:14] <merijn> oh goodie
[18:46:25] <merijn> someone broke operator sections for $ too
[18:46:39] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[18:47:30] <boxscape> asking you if you want to enable template haskell?
[18:47:42] * [exa] . o O ((`id` function))
[18:48:06] <merijn> boxscape: That's a warning enabled by default now, so -Werror on CI breaks on that too
[18:48:17] <merijn> So far, not particularly happy with 9.2
[18:49:09] <merijn> Way too many default enabled warnings that trigger on completely benign and correct haskell
[18:49:38] <boxscape> I think the warning didn't exist at all before https://github.com/ghc-proposals/ghc-proposals/pull/229
[18:49:45] *** Joins: justache (~justache@user/justache)
[18:49:48] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[18:49:49] <merijn> boxscape: It didn't no
[18:50:28] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:1d11:e285:317e:6a2a) (Quit: gone to sleep. ZZZzzz…)
[18:51:16] *** Joins: jakalx (~jakalx@base.jakalx.net)
[18:52:08] *** Joins: MaybeJustJames (~jacol@2001:981:4ea3:1:a8b4:6ac6:c93b:9bcf)
[18:53:01] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:54:30] *** Quits: justache (~justache@user/justache) (Ping timeout: 256 seconds)
[18:54:39] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:54:39] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:54:39] *** Joins: wroathe (~wroathe@user/wroathe)
[18:55:01] *** Quits: deadmarshal (~deadmarsh@95.38.115.243) (Ping timeout: 256 seconds)
[18:55:23] *** Quits: sheb (~sheb@31.223.228.71) (Quit: Leaving)
[18:55:43] *** Joins: deadmarshal (~deadmarsh@95.38.115.243)
[18:58:02] *** Joins: bliminse (~bliminse@host86-162-147-196.range86-162.btcentralplus.com)
[18:59:08] *** Joins: justache (~justache@user/justache)
[18:59:36] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:59:57] *** Joins: Vajb (~Vajb@nalkaylds2h97nzof-2.v6.elisa-mobile.fi)
[19:05:22] *** Quits: dermato (~dermatobr@cpe-70-114-219-76.austin.res.rr.com) (Quit: WeeChat 3.1)
[19:09:35] *** Quits: arjun (~user@user/arjun) (Remote host closed the connection)
[19:11:51] *** Quits: justache (~justache@user/justache) (Read error: Connection reset by peer)
[19:12:01] *** Quits: Farzad (~FarzadBek@37.98.106.66) (Ping timeout: 256 seconds)
[19:12:33] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Read error: Connection reset by peer)
[19:12:51] *** Joins: justache (~justache@user/justache)
[19:13:06] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[19:14:09] *** Joins: dschrempf (~dominik@mobiledyn-62-240-134-39.mrsn.at)
[19:20:43] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[19:23:08] *** Joins: Guest|27 (~Guest|27@cpea456cc4b1ddd-cma456cc4b1ddb.cpe.net.cable.rogers.com)
[19:23:57] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi)
[19:24:31] *** shapr` is now known as shapr
[19:32:34] *** justache is now known as justSleigh
[19:34:40] <eyJhb> I am not sure, if this is possible. But I am trying to play a little around with ghci, and I somewhat thought it was comman that if I wrote ie. `length`, that it would show me the definition of it, instead of an error ie. https://termbin.com/2f7i
[19:34:53] *** Joins: nvmd (~nvmd@user/nvmd)
[19:35:25] <merijn> eyJhb: ghci runs expressions through "show" to print them
[19:35:35] <merijn> eyJhb: length is a function and there is no show isntance for functions
[19:35:56] <merijn> eyJhb: That error is complaining "[a] -> Int" (the function type of length) doesn't have a show instance
[19:35:59] *** Joins: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk)
[19:36:43] <geekosaur> and at present there's no way for ghci to know the definition of a function. there is work on changing that via .hie files containing enough information to recover or find definitions, but it's not there yet nor does ghci know how to use it yet
[19:36:44] *** Quits: dschrempf (~dominik@mobiledyn-62-240-134-39.mrsn.at) (Quit: WeeChat 3.3)
[19:36:55] *** Joins: gaff (~gaff@49.207.195.117)
[19:38:10] <gaff> if a package is listed as package id in the package environment file (default), how can i remove that package?
[19:38:13] *** Joins: Typedfern (~Typedfern@75.red-88-22-25.staticip.rima-tde.net)
[19:38:14] <eyJhb> Okay :) Guess I just thought it wold return "the function", and show that it still accepts args, 1, 2, 3.
[19:38:51] <merijn> eyJhb: Did you maybe want ":type"?
[19:38:54] <merijn> :t length
[19:38:55] <lambdabot> Foldable t => t a -> Int
[19:39:01] <merijn> :t length []
[19:39:02] <lambdabot> Int
[19:39:17] <geekosaur> % :t length @[]
[19:39:18] <yahb> geekosaur: [a] -> Int
[19:39:22] <eyJhb> Hmm... Yeah, that's actually what I excected it to show! Thanks :)
[19:39:47] <geekosaur> > length
[19:39:49] <lambdabot>  error:
[19:39:49] <lambdabot>      • No instance for (Typeable a0)
[19:39:49] <lambdabot>          arising from a use of ‘show_M78435480957096341498’
[19:39:51] <eyJhb> Trying to do some basic advent of code using Haskell. And sorting in the Haskell learning material that I got
[19:40:05] <merijn> Nice :)
[19:40:08] <geekosaur> didn't think that would work, polymorphism's a bit much for ghci's show-functions hack
[19:40:12] <merijn> See also the leaderboard in the topic :)
[19:40:55] <geekosaur> er, lambdabot's. I don't think it's packaged in a way you could use it with ghci
[19:41:13] <geekosaur> at least I couldn't find the lambdabot module when I went looking for it the other day
[19:41:24] <boxscape> > ord
[19:41:25] <lambdabot>  <Char -> Int>
[19:42:23] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[19:42:58] <gaff> the package id is listed in the file named "default"
[19:43:25] <merijn> gaff: You used "cabal install --lib", I guess?
[19:43:33] <gaff> yeah
[19:43:42] <gaff> i did
[19:43:50] <merijn> I think you can just nuke the line from the file, tbh
[19:44:50] <tomsmeding> geekosaur: isn't it something like 'instance {-# OVERLAPPABLE #-} (Typeable a, Typeable b) => Show (a -> b) where ...'?
[19:44:52] <gaff> merijn: i tried that, but GHCi still finds the package, although it complains that it is now hidden
[19:45:04] <geekosaur> probably, yes
[19:45:08] <merijn> gaff: Is there a .ghc.environment in your working dir?
[19:45:18] <gaff> i want to get rid off the package altogether
[19:45:34] <gaff> no
[19:45:44] <geekosaur> but I was hoping to find the actual module and verify. sadly I could find the import in L.hs but not the module itself
[19:45:49] <gaff> this "default" file is in the global location
[19:46:19] <gaff> .ghc/.../environments/default
[19:46:20] <merijn> gaff: tbh, there's no real convenient way to "uninstall" specific packages atm, but you also shouldn't really need to in general
[19:46:45] <geekosaur> just edit the file
[19:47:01] <geekosaur> or better yet, nuke it and let cabal or stack manage packages for you
[19:47:02] <eyJhb> merijn: I think I have been invited to 3x leaderboards so far :D Nix community, and some from University :D
[19:47:06] <gaff> ok ... i am kind of surprised
[19:47:10] <merijn> geekosaur: I already said that
[19:47:56] <merijn> gaff: There's some tools for "GCing" the global store, but it's surprisingly tricky to do properly
[19:48:05] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:2b1a:1927:b5c5:1912) (Quit: WeeChat 2.8)
[19:48:09] <gaff> merijn: where exactly would this package be? i tried a ghc-pkg find-module, but it didn't find it anywhere
[19:48:23] <gaff> but strangely, GHCi, finds it
[19:48:25] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[19:48:32] <merijn> tbh, I haven't used the global package db since 2016 so I kinda forgot
[19:48:42] <gaff> merijn: 
[19:49:02] <merijn> The global store is under .cabal/store, but I don't think global installs (i.e. with --lib) use the store
[19:49:15] <gaff> i don't want to use the global db either, but i was just experimenting with something
[19:49:19] *** Quits: Typedfern (~Typedfern@75.red-88-22-25.staticip.rima-tde.net) (Remote host closed the connection)
[19:49:26] <geekosaur> last I checked, they did and the environment file points into the store
[19:50:08] <geekosaur> last time I read through and nuked the env, which was while I was experimenting with updating cabal installation for xmonad
[19:50:15] <gaff> geekosaur: you mean the "default" file where the package ids are listed?
[19:50:20] <geekosaur> yes
[19:50:31] <gaff> nuke the "default" file?
[19:50:45] *** Joins: zebrag (~chris@user/zebrag)
[19:51:31] <geekosaur> well. go through it and figure out what packages you'll need in the future. but cabal should already have them in its store, so yoou'll just have to update how you're using them to use the v2-* commands instead of v1-*
[19:51:41] <geekosaur> then nuke it because it just causes pain
[19:52:07] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[19:52:17] <geekosaur> also, you'll want a cabal file and cabal repl because things will stop working in plain ghci. if you really need plain ghci to work then edit the environment to remove the package(s) you don't want
[19:52:35] <geekosaur> but I'd really recommend moving away from that because environment files are such a pain
[19:53:01] *** Quits: TranquilEcho (~grom@user/tranquilecho) (Ping timeout: 268 seconds)
[19:53:11] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[19:53:12] <sclv> to answer the specific question you can literally delete the line from the package env file to remove the package
[19:53:33] <merijn> sclv: But  already said that, and that supposedly didn't work?
[19:53:34] <gaff> geekosaur: yeah, i don't want to fiddle around with global stuff, i was just experimenting with something
[19:53:39] *** Quits: MaybeJustJames (~jacol@2001:981:4ea3:1:a8b4:6ac6:c93b:9bcf) (Remote host closed the connection)
[19:53:46] *** Joins: TranquilEcho (~grom@user/tranquilecho)
[19:53:52] <sclv> oh i see
[19:54:03] <sclv> ok, i imagine that would be because there's something else that's a transitive dep on it?
[19:54:15] <geekosaur> or because they didn't restart ghci afterward
[19:54:25] <geekosaur> maybe
[19:54:44] <gaff> sclv: even if delete the line from the denv file, GHCi still finds the package, although now it complains that the package is hidden.
[19:54:56] <sclv> gaff: is there any other package that has that package as a dep?
[19:54:59] *** Quits: mvk (~mvk@2607:fea8:5cc1:fa00::4702) (Ping timeout: 252 seconds)
[19:55:05] <gaff> no
[19:55:15] <sclv> well, then that shouldn't happen
[19:56:03] <sclv> if you want to pastebin the error that could be useufl
[19:56:18] <geekosaur> could it be in the old user package db, perhaps?
[19:56:22] <gaff> also, GHCi suggests `:set` command to make the package visible as well
[19:56:36] <geekosaur> @where paste
[19:56:37] <lambdabot> Help us help you: please paste full code, input and/or output at e.g. https://paste.tomsmeding.com
[19:57:11] *** Joins: reumeth (~reumeth@user/reumeth)
[19:57:18] <gaff> Could not load module ‘QuickCheck1’, It is a member of the hidden package ‘qcheck-original-0.1.0.0’. You can run ‘:set -package qcheck-original’ to expose it.
[19:57:57] <gaff> that's the error message from GHCi
[19:58:12] *** Joins: Farzad (~FarzadBek@5.234.246.252)
[19:58:35] <gaff> now in the code that GHCi runs, there is an "import QuickCheck1" statement
[19:58:37] <sclv> so you're trying to load a module from a package you don't have in your env file
[19:58:43] <sclv> and you get an error
[19:58:47] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[19:58:47] <gaff> yeah
[19:58:56] <sclv> that seems like expected behavior, except the wording in the error may confuse you?
[19:58:57] *** Quits: siers (~ij@user/ij) (Quit: ZNC 1.8.2 - https://znc.in)
[19:59:04] *** Quits: alzgh (~alzgh@user/alzgh) (Ping timeout: 256 seconds)
[19:59:12] <sclv> like... if you try to load the module, but the package isn't in the env, you _should_ get some error
[19:59:31] <EvanR> I just noticed in the ghc manual it says "If you think an error message is especially terrible, report it as a bug" xD
[19:59:45] *** Joins: kennyd (~bc8165b6@cerf.good1.com)
[20:00:46] <gaff> sclv: the problem here is that even though i deleted the package id from the env file, if i do the `:set` command suggested by GHCi, the package loads and things work fine.  what i wanted was to delete the package completely.
[20:01:00] <sclv> why
[20:01:39] <gaff> because that package is installed globally by me (as an experiment) and i wanted to remove it
[20:01:48] <sclv> ok well in an important sense you can't
[20:01:56] <sclv> because you can't delete individual packages from the store
[20:01:57] <gaff> sclv: i see
[20:02:04] <sclv> you can just expose them or not in a package environment
[20:02:23] <gaff> sclv: is that by design?
[20:02:28] <sclv> yes, ish
[20:02:31] <sclv> the store is just a cache
[20:02:44] <sclv> ideally we'd have a garbage-collect for it
[20:02:52] <sclv> but it would need to have gc roots and chase transitive deps, etc
[20:02:52] <gaff> ok
[20:03:00] <sclv> and nobody's written that
[20:03:06] <gaff> i see 
[20:03:14] <sclv> so the store just accumulates stuff, and eventually if people really want to they nuke it on occasion
[20:03:22] <sclv> but since its a cache, thats fine and it fills up again
[20:03:23] <merijn> You'd also somehow have to find all packages on someone's filesystem to determine what is needed or not
[20:03:41] <merijn> gaff: Personally I just nuke the global store once or twice a year (or if I upgrade GHC)
[20:03:53] <gaff> sclv: another weird thing is that if i do a serach using `find-module`, ghc-pkg is unable to find that package anywhere!
[20:03:54] <sclv> this is not qualitatively different from v1-build i will note
[20:04:17] *** Joins: pfurla (~pfurla@201.17.118.230)
[20:04:23] <sclv> ghc's never had robust support for deleting a package from a db, just for hiding it
[20:04:36] <merijn> gaff: The "worst case" of nuking the global store is "every time you go to a new project after nuking the store, you will have to recompile your dependencies"
[20:04:49] <merijn> But that's a pretty minor issue if you only do it once or twice a year
[20:04:53] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[20:05:03] <geekosaur> gaff, ghc-pkg is unaware of environment files. I wonder if you have another one somewhere
[20:05:13] <gaff> merijn: yeah, i know ... i am not going there ... trust me.  this was just an experiment
[20:05:26] <merijn> gaff: So, ghc-pkg interfaces with a static "package database", but that's kinda...limiting and let to lots of issues
[20:05:31] <geekosaur> (there's a ghc bug open about that iirc)
[20:05:57] <merijn> gaff: In the v2-world order, there is no longer a package database for ghc-pkg, instead cabal (dynamically) generates a unique package database for each project
[20:06:26] <merijn> gaff: So each project can only see the packages relevant to that specific project (allowing you to have conflicting versions, configurations, etc.) of packages installed at the same time
[20:06:51] <gaff> merijn: when you say global store, the ~.cabal/store?
[20:07:14] <merijn> yes
[20:07:17] <gaff> ok
[20:08:10] <gaff> merijn: yeah, currently i am working using cabal v2-builds on every project.  not using global store at all
[20:09:45] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41f2:b4d5:142e:946f)
[20:09:56] <merijn> Eh, v2 uses the global store rather heavily. There was no global store pre-v2 :p The global store, however, is different from the global package db (which was used pre-v2 and now mostly obsolete)
[20:09:59] <gaff> merijn: one point ... using the nix style, it does cache the packages so that they can be shared between projects if needed.  but you are right -- no conflicts whatsoever
[20:10:28] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[20:11:54] <gaff> merijn: so the experiment i tried where i have a package id listed in the global environment file -- that is a legacy from the old style of global package db?
[20:12:45] *** Joins: alzgh (alzgh@user/alzgh)
[20:12:53] <merijn> gaff: That tries to mimic the global package db by having an environment that points to a few specific things in the store. Which is why nuking things in the environment file "gets rid off them"
[20:13:07] <gaff> ok
[20:13:25] <merijn> but because the global environment affects everything, it now messes with every individual project, iirc
[20:13:36] <gaff> yeah
[20:14:42] <gaff> so nuking the line in the file is enough? or do i need to nuke the entire file? or nuke the entire global store, ~/.cabal/store?
[20:14:54] <merijn> just nuking the line in the file is enough
[20:15:03] <gaff> merijn: cool
[20:15:09] <gaff> merijn: thanks much
[20:15:12] <merijn> You'll still have the package in the store, but besides a bit of disk space that shouldn't affect anything
[20:15:49] <gaff> yeah, i need to remember to work using cabal projects
[20:15:58] *** Quits: nvmd (~nvmd@user/nvmd) (Quit: Later, nerds.)
[20:16:50] <monochrom> I think that saying "store" is less confusing than saying "global store".
[20:18:26] <monochrom> This is a consideration based on Hamming distance and the human mind always trying to "auto-correct" words and phrases.
[20:19:08] <c_wraith> Also, "global" used to mean "for all users of the system" in some cases.
[20:19:09] <monochrom> "store" is very far from "global db", but "global store" is closer.
[20:20:08] <monochrom> When the human mind reckons "eh I haven't seen the word 'store' used like this", it goes "ah but I have seen 'db', so let me just pretend you said 'db'".
[20:21:29] <davean> monochrom: Some people's mind do that - I tend to dislike those people
[20:21:43] <davean> This seems to very much be a personality thing
[20:22:04] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[20:23:47] <monochrom> But it also has its value. There are a large class of typos that I can make and you can auto-correct on, and your auto-correction is correct.
[20:24:39] <monochrom> There are acronyms like "kthxbye" "weg" that you can guess correctly without being taught.
[20:25:11] <gaff> monochrom: also the human mind can be made to believe anything ... one thing now, another thing next ... which is why you see so many contradictory views.  anyway, what i am saying is unrelated to haskell ... just something general. 
[20:25:21] <monochrom> When comprehending a large code base, there are large chunks of code you don't carefully read but you correct guess what they're doing and you quickly move on.
[20:25:53] <davean> only one of thsoe was an acronym BTW
[20:26:25] <EvanR> the generalities have gone beyond haskell now
[20:26:50] <EvanR> did we figure out the #haskell AoC leaderboard yet?
[20:27:10] <gaff> thanks much for the help
[20:27:15] *** Quits: gaff (~gaff@49.207.195.117) ()
[20:27:27] <geekosaur> see the /topic
[20:28:05] <geekosaur> I saw the topic change but nothing else so I assume The Guy caught the earlier discussion and updated it
[20:28:46] <EvanR> oh nice, I'm already there!
[20:28:58] <merijn> It's the same as the last 2 years, yeah
[20:30:41] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[20:32:39] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41f2:b4d5:142e:946f) (Remote host closed the connection)
[20:32:43] <EvanR> to get a high score on the leaderboard, you not only have to be quick, but you have to be awake at midnight? xD
[20:33:16] <monochrom> Or move to a more advantageous time zone.
[20:33:21] <EvanR> oh yeah
[20:34:24] <merijn> They open at 6 AM here
[20:34:27] <merijn> and fuck that :p
[20:34:36] <EvanR> that's even worse
[20:34:52] <monochrom> "The best way to win is not to play"
[20:35:16] *** Joins: Erutuon (~Erutuon@user/erutuon)
[20:35:33] *** Quits: td_ (~td@muedsl-82-207-238-025.citykom.de) (Remote host closed the connection)
[20:36:25] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[20:39:30] *** Joins: jncraton (~jncraton@199.8.13.16)
[20:40:16] *** Joins: aman (~aman@user/aman)
[20:41:17] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[20:42:43] *** Techcable_ is now known as Techcable
[20:43:02] *** Joins: jakalx (~jakalx@base.jakalx.net)
[20:43:19] *** Quits: n8ess163 (~b@pool-72-80-171-162.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:43:58] *** Joins: n8ess163 (~b@pool-72-80-171-162.nycmny.fios.verizon.net)
[20:47:18] *** Joins: |beowulf| (1000@sourcemage/mage/beowulf)
[20:47:26] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[20:47:36] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Quit: Leaving)
[20:49:37] *** Quits: aman (~aman@user/aman) (Quit: aman)
[20:52:01] *** Quits: srk (~sorki@user/srk) (Ping timeout: 245 seconds)
[20:52:11] *** Quits: deadmarshal (~deadmarsh@95.38.115.243) (Ping timeout: 252 seconds)
[20:54:31] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[20:56:30] *** Quits: kmein (~weechat@user/kmein) (Quit: ciao kakao)
[20:56:44] *** Joins: kmein (~weechat@user/kmein)
[20:58:17] <EvanR> doing "quick one off" haskell "scripts" is the only time I encounter the no type signatures version of haskell, very cool
[20:58:38] <EvanR> and tricky, had to put (read :: String -> Int) in there
[20:59:59] <EvanR> I always put signatures on everything, so I don't know how to explain monomorphism restriction to someone who encountered it xD
[21:00:08] <boxscape> EvanR: shorter: read @Int
[21:01:03] <EvanR> ok... but you'd have to add a language pragma right, and anyone who sees that and doesn't know haskell will increase their weird syntax defcon level by 1
[21:01:49] <boxscape> possibly
[21:02:02] <boxscape> I think it's enabled by default in the newest version of ghc
[21:02:05] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[21:02:43] <EvanR> I only understand how @Int works by smashing my head on Idris so much
[21:02:49] <EvanR> with implicit params
[21:03:14] *** Quits: kuribas (~user@ip-188-118-57-242.reverse.destiny.be) (Remote host closed the connection)
[21:03:58] <yushyin> boxscape: TypeApplications is in GHC2021, yes.
[21:04:22] <tomsmeding> TIL GHC2021 is actually the default language in HEAD at this point
[21:05:00] <boxscape> tomsmeding: to be fair you might not even notice if you use cabal or stack since I think the default in the .cabal file is still Haskell2010
[21:05:44] <tomsmeding> yeah
[21:06:43] *** Joins: FarzadBekran_ (~FarzadBek@94.74.153.122)
[21:07:54] <pragma-> I concur.
[21:08:29] <merijn> boxscape: Haskell98 unless you use a recent cabal-version
[21:08:32] *** Quits: barrucadu (~barrucadu@carcosa.barrucadu.co.uk) (Quit: Rebooting for OS update...)
[21:08:46] <boxscape> hm okay
[21:09:11] <geekosaur> tomsmeding, it's also the default in 9.2.1
[21:09:18] <merijn> actually, the version doesn't mention any change, so looks like Haskell98 in all cabal versions
[21:09:18] *** Quits: mbuf (~Shakthi@27.58.139.230) (Quit: Leaving)
[21:09:37] *** Joins: deadmarshal (~deadmarsh@95.38.115.243)
[21:09:53] *** Quits: Farzad (~FarzadBek@5.234.246.252) (Ping timeout: 256 seconds)
[21:10:25] <merijn> ah, no, in 3.4 the default-language is optional and set to the compiler's default...so that's a terrible idea
[21:10:25] <sclv> right, i think that cabal init will tend to add Haskell2010 when you init, however
[21:10:30] <sclv> oh wait, ugh
[21:10:39] <merijn> Who thought that was a good idea
[21:10:40] <tomsmeding> "default in cabal files" for me is "whatever is in the last project that I happen to copy the .cabal file from" :p
[21:10:43] <sclv> well, both can be true :-)
[21:11:01] <sclv> (i.e. that cabal init gives it explicitly, and also the spec has this silly floating default)
[21:11:38] <davean> merijn: Not true?
[21:11:39] <boxscape> cabal init sets it to Haskell2010 in cabal 3.6 for me
[21:11:45] <merijn> davean: What is not true?
[21:11:46] <boxscape> oh sclv said as much
[21:11:51] <davean> merijn: Your claim about 3.4
[21:12:07] <merijn> davean: https://cabal.readthedocs.io/en/latest/file-format-changelog.html#cabal-version-3-4
[21:12:14] <merijn> davean: Well, the docs disagree with you there :p
[21:12:37] <davean> Its just ... false. Thats not how cabal init behaves, it puts in default-language:
[21:12:41] <davean> Haskell2010
[21:12:44] <merijn> hold on
[21:12:51] <boxscape> I don't think the docs are talking about cabal init
[21:13:00] <merijn> cabal init and the version of your cabal executable are entirely unrelated to what I'm saying
[21:13:03] <boxscape> they're talking about what the value is if your cabal file doesn't have default-language
[21:13:03] <davean> They are not talking about cabal init
[21:13:12] <merijn> davean: Neither was I?
[21:13:12] *** Joins: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net)
[21:13:21] <davean> ok
[21:13:22] <merijn> Also, cabal init default to 2.4, iirc
[21:13:30] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[21:13:35] <merijn> In which version the default language is not optional
[21:14:11] *** Joins: barrucadu (~barrucadu@carcosa.barrucadu.co.uk)
[21:14:30] <davean> merijn: sorry, I'd thought you were refering to the conversation around it, not making a seperate statement
[21:15:07] <davean> (Specificly you'd said 'cabal', not 'Cabal' right before it)
[21:17:21] <pragma-> So the cabal package manager can never be at the beginning of a sentence.
[21:17:49] <davean> pragma-: why is that?
[21:17:49] *** Quits: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[21:17:55] <merijn> davean: The capitalisation ;)
[21:18:09] <davean> merijn: you just don't capitalize it at the start of a sentance
[21:18:15] <geekosaur> well, you can stil refer to it as cabal-install
[21:18:16] <sclv> wow you're really capitalizing on this confusion here
[21:18:29] <monochrom> I violate the capitalization convention when in this kind of situations.
[21:18:47] <EvanR> does Haskell2010 enable new things by default like this new "standard" does?
[21:18:49] <monochrom> "t is a type variable" rather than "T is a type variable"
[21:19:10] <monochrom> Also not bothering with the trick of "The t there is a type variable".
[21:19:33] <EvanR> to be super proper should t be in quotes or another font xD
[21:19:41] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 252 seconds)
[21:19:42] <monochrom> But I know that there are English grammatists who go out of their way to do rewording like that.
[21:19:52] <davean> The only language standard I know to get the start of a sentance wrong is APA, and I don't even think they'd agree with their own rules if they thought about them
[21:20:06] <Hecate> perl is also something like this
[21:20:15] <Hecate> perl -> the cli tool (so really perl(1))
[21:20:18] <Hecate> Perl -> the language
[21:20:25] <monochrom> And sclv: haha
[21:20:29] <boxscape> EvanR: differences to Haskell98: FFI, Hierarchical module names, Pattern guards, no n+k patterns. Though I believe ghc lets you use pattern guards even with Haskell98
[21:20:43] <EvanR> Haskell the language, haskell the cli tool, wait that would be cool
[21:20:56] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[21:21:26] <EvanR> what about FFI?
[21:21:30] *** Joins: srk (~sorki@user/srk)
[21:21:54] <EvanR> how does that pertain to the language
[21:21:59] <monochrom> Well, "runhaskell" comes close.
[21:22:16] <EvanR> runHaskell xD
[21:22:21] <monochrom> haha
[21:22:30] <monochrom> I hate camel case too.
[21:22:35] <Franciman> run_haskell
[21:22:35] <sclv> FFI was an appendix to haskell98, but incorporated in 2010
[21:22:37] <Franciman> ?
[21:22:48] <EvanR> caps lock everything was a simpler time
[21:22:48] <boxscape> EvanR: you can write things like "foreign import" in a Haskell source file
[21:22:54] <sclv> that said in GHC, h98 and h2010 both have the ffi enabled 
[21:22:59] <EvanR> boxscape, oooh ok
[21:23:09] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[21:23:16] *** Joins: td_ (~td@muedsl-82-207-238-021.citykom.de)
[21:23:55] <EvanR> there are too many conventions for writing multiple words as one. Obviously we can fix it all by inventing new tech that lets you just use spaces
[21:24:24] <EvanR> (or reviving old old tech that had this)
[21:24:30] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[21:24:30] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[21:24:33] *** allbery_b is now known as geekosaur
[21:24:33] <boxscape> that tech is called "not using ASCII files to represent ASTs"
[21:24:41] <davean> EvanR: Just out in non-breaking spaces
[21:24:45] <EvanR> lol
[21:24:58] <monochrom> "Space, the final frontier"
[21:25:00] <EvanR> not using text files is one way I guess but no
[21:25:11] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 256 seconds)
[21:25:45] <monochrom> Can Programming Be Liberated from The Plain Text File
[21:26:13] <EvanR> I didn't want to open that can
[21:27:14] <pragma-> monochrom: certainly! https://www.dangermouse.net/esoteric/piet/samples.html
[21:29:38] <monochrom> The Cödel Incompleteness Theorem
[21:33:03] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41f2:b4d5:142e:946f)
[21:34:51] *** Quits: jncraton (~jncraton@199.8.13.16) (Quit: leaving)
[21:35:05] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 252 seconds)
[21:36:50] <EvanR> is there a Piet on a Parasail (webframework)
[21:37:17] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41f2:b4d5:142e:946f) (Ping timeout: 252 seconds)
[21:38:27] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186)
[21:39:21] *** Quits: deadmarshal (~deadmarsh@95.38.115.243) (Ping timeout: 256 seconds)
[21:43:04] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Remote host closed the connection)
[21:43:43] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[21:43:53] *** Quits: td_ (~td@muedsl-82-207-238-021.citykom.de) (Ping timeout: 256 seconds)
[21:43:57] *** Joins: gabriel (~gabriel@188-167-229-200.dynamic.chello.sk)
[21:44:07] *** gabriel is now known as gabriel_sevecek
[21:45:31] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[21:45:43] *** Joins: td_ (~td@94.134.91.22)
[21:45:48] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[21:53:07] *** Joins: Guest1723 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[21:57:36] *** Quits: alx741 (~alx741@181.196.69.156) (Quit: alx741)
[22:00:02] *** Quits: alzgh (alzgh@user/alzgh) (Remote host closed the connection)
[22:00:23] *** Joins: alzgh (alzgh@user/alzgh)
[22:01:11] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[22:01:51] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[22:03:07] *** Quits: pfurla (~pfurla@201.17.118.230) (Quit: gone to sleep. ZZZzzz…)
[22:06:34] *** Joins: alx741 (~alx741@181.196.68.155)
[22:06:57] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Remote host closed the connection)
[22:07:21] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[22:09:09] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:11:47] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:13:27] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[22:13:45] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:14:32] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[22:14:53] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:15:14] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 252 seconds)
[22:15:47] *** Joins: cheater (~Username@user/cheater)
[22:16:50] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186) (Remote host closed the connection)
[22:18:43] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186)
[22:20:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[22:20:31] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:22:06] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Read error: Connection reset by peer)
[22:22:36] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[22:23:51] *** Joins: econo (uid147250@user/econo)
[22:25:16] *** Quits: Guest1723 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 256 seconds)
[22:25:52] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[22:26:15] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:27:34] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[22:27:49] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41f2:b4d5:142e:946f)
[22:27:53] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:29:33] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[22:29:50] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:31:30] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[22:31:32] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[22:31:47] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:31:59] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:33:39] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[22:33:57] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:34:10] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[22:34:36] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:34:49] *** Joins: nvmd (~nvmd@user/nvmd)
[22:35:13] *** Quits: rkrishnan (~user@122.171.76.46) (Ping timeout: 252 seconds)
[22:36:06] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[22:37:12] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[22:37:36] *** Quits: alzgh (alzgh@user/alzgh) (Remote host closed the connection)
[22:37:51] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[22:37:54] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:37:58] *** Joins: alzgh (alzgh@user/alzgh)
[22:38:09] *** Parts: zuserm (~mz@71.161.92.216) ()
[22:38:21] *** Joins: hololeap (~hololeap@user/hololeap)
[22:39:43] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[22:39:44] *** Quits: Vajb (~Vajb@nalkaylds2h97nzof-2.v6.elisa-mobile.fi) (Read error: Connection reset by peer)
[22:40:09] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[22:40:30] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[22:42:14] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[22:42:31] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:42:55] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[22:43:19] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[22:43:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:44:56] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 252 seconds)
[22:45:59] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186) (Remote host closed the connection)
[22:47:24] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[22:48:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[22:49:16] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:49:24] *** Joins: jncraton (~jncraton@199.8.13.16)
[22:49:39] *** Joins: WatermelonStory (~Watermelo@199.8.13.237)
[22:51:24] *** Parts: WatermelonStory (~Watermelo@199.8.13.237) ()
[22:52:05] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 252 seconds)
[22:54:39] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[22:54:43] *** Joins: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com)
[22:54:52] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:57:32] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[22:57:50] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:58:21] <maerwald> is `arch` command available on macOS by default or only if you install coreutils via brew?
[22:58:27] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[22:59:09] <dsal> I don't use homebrew, but I have /usr/bin/arch
[22:59:37] *** Joins: deadmarshal (~deadmarsh@95.38.115.243)
[23:00:23] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[23:00:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:04:24] *** Quits: deadmarshal (~deadmarsh@95.38.115.243) (Ping timeout: 256 seconds)
[23:04:44] <maerwald> it seems uname -m behaves very different from arch under rosetta
[23:06:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[23:06:23] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:08:18] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[23:08:36] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[23:11:43] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[23:11:59] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:12:35] *** Quits: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com) (Remote host closed the connection)
[23:13:36] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186)
[23:17:23] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[23:17:35] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:18:02] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186) (Remote host closed the connection)
[23:18:39] *** Joins: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net)
[23:22:53] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[23:23:08] *** Joins: fef (~thedawn@user/thedawn)
[23:23:11] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:23:15] *** Quits: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[23:25:20] *** Quits: alzgh (alzgh@user/alzgh) (Ping timeout: 256 seconds)
[23:29:49] *** Joins: alzgh (~alzgh@user/alzgh)
[23:29:54] *** Quits: n8ess163 (~b@pool-72-80-171-162.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:30:53] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186)
[23:32:30] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[23:33:09] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[23:33:16] *** Joins: jstolarek (~jstolarek@137.220.120.162)
[23:33:31] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Ping timeout: 252 seconds)
[23:34:12] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186) (Remote host closed the connection)
[23:34:32] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[23:34:42] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:35:08] *** Joins: deadmarshal (~deadmarsh@95.38.115.243)
[23:35:21] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 252 seconds)
[23:35:32] *** Quits: jncraton (~jncraton@199.8.13.16) (Quit: leaving)
[23:35:40] *** Joins: Feuermagier_ (~Feuermagi@2a02:2488:4211:3400:b6fd:ec18:acf6:f1a8)
[23:37:21] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[23:37:38] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[23:37:38] *** Joins: juhp (~juhp@128.106.188.82)
[23:38:27] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186)
[23:38:33] *** Joins: mvk (~mvk@2607:fea8:5cc1:fa00::4702)
[23:40:07] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[23:40:27] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:41:17] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41f2:b4d5:142e:946f) (Remote host closed the connection)
[23:41:36] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[23:43:48] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Quit: Leaving)
[23:43:56] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[23:45:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[23:46:15] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:48:32] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[23:48:50] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[23:50:30] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[23:50:47] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[23:51:05] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[23:51:29] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[23:51:48] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:52:02] *** Quits: nschoe (~quassel@2a01:e0a:8e:a190:8ef1:d1b1:96b4:f9df) (Ping timeout: 252 seconds)
[23:53:26] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[23:56:16] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[23:56:31] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[23:56:59] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[23:57:15] *** Quits: aweinstock (~aweinstoc@cpe-67-248-65-250.nycap.res.rr.com) (Ping timeout: 250 seconds)
[23:57:21] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
