[00:05:31] *** Quits: ASau (~user@lmpc.drb.insel.de) (Read error: Connection reset by peer)
[00:08:29] *** Joins: ASau (~user@lmpc.drb.insel.de)
[00:10:27] <ASau> amazigh: working with XML definitely much easier than with all that fancy "lightweight" nonsense.
[00:13:06] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[00:18:42] *** Quits: ASau (~user@lmpc.drb.insel.de) (Read error: Connection reset by peer)
[00:27:52] *** Quits: xsperry (~xs@user/xsperry) ()
[00:31:01] *** Quits: elflng (~elflng@5.28.137.182) (Ping timeout: 240 seconds)
[00:48:04] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Quit: jrincayc)
[00:48:22] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[00:53:29] *** Joins: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63)
[01:03:25] *** Quits: sdu (~doo@185.44.146.214) (Remote host closed the connection)
[01:03:43] *** Joins: elflng (~elflng@5.28.137.182)
[01:39:23] *** BoostedMenchers is now known as truinternatialde
[01:40:54] *** Joins: jao (~jao@211.68.17.95.dynamic.jazztel.es)
[01:44:06] *** Quits: jao (~jao@211.68.17.95.dynamic.jazztel.es) (Remote host closed the connection)
[01:47:07] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:49bd:7bc5:78f2:8fae) (Ping timeout: 256 seconds)
[01:52:25] *** truinternatialde is now known as Menchers
[01:52:37] *** Joins: seninha (~seninha@user/seninha)
[01:52:47] *** Joins: TCZ (~tcz@91.150.178.124)
[01:56:12] *** Quits: ZombieChicken (~weechat@user/zombiechicken) (Remote host closed the connection)
[01:59:07] *** Joins: notzmv (~zmv@user/notzmv)
[02:20:06] *** Joins: jao (~jao@211.68.17.95.dynamic.jazztel.es)
[02:25:29] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[02:25:52] *** Joins: TCZ (~tcz@91.150.178.124)
[02:26:32] *** Quits: TCZ (~tcz@91.150.178.124) (Remote host closed the connection)
[02:39:37] *** Quits: sp1ff (~user@c-73-189-25-64.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[02:57:37] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[03:08:09] *** Quits: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4) (Quit: Quit)
[03:08:25] *** Joins: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4)
[03:15:46] *** Joins: xsperry (~xs@user/xsperry)
[03:33:57] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[03:36:58] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:85f4:5f76:4849:adb1)
[03:36:58] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:85f4:5f76:4849:adb1) (Changing host)
[03:36:58] *** Joins: skapata (~Skapata@user/skapata)
[03:39:26] *** Quits: rito_ (~rito_gh@45.112.243.151) (Ping timeout: 268 seconds)
[03:50:58] *** Joins: eddof13 (~textual@2600:4040:4029:5000:4123:cda2:78c0:609c)
[03:57:48] *** Joins: m455 (~m455@user/m455)
[04:04:39] <Zipheir> amazigh: Thanks!  That looks workable.
[04:28:57] *** Quits: klovett (~klovett@107.115.32.130) (Ping timeout: 240 seconds)
[04:41:08] *** Quits: nyarmith (~nyarmith@pool-72-95-220-156.pitbpa.fios.verizon.net) (Read error: Connection reset by peer)
[04:46:15] *** Joins: nyarmith (~nyarmith@pool-72-95-220-156.pitbpa.fios.verizon.net)
[04:52:08] *** Quits: nyarmith (~nyarmith@pool-72-95-220-156.pitbpa.fios.verizon.net) (Remote host closed the connection)
[04:52:34] *** Joins: nyarmith (~nyarmith@pool-72-95-220-156.pitbpa.fios.verizon.net)
[05:08:57] *** Quits: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4) (Ping timeout: 240 seconds)
[05:32:50] *** Quits: eddof13 (~textual@2600:4040:4029:5000:4123:cda2:78c0:609c) (Quit: Textual IRC Client: www.textualapp.com)
[05:33:04] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:34:51] *** Joins: eddof13 (~textual@2600:4040:4029:5000:40a7:771f:cdfd:21ff)
[05:42:51] *** Quits: rgherdt_ (~rgherdt@2a02:8109:86c0:d8d:30fe:eea7:a0bb:e650) (Ping timeout: 245 seconds)
[05:44:41] *** Quits: schulze (~schulze@dynamic-077-003-089-208.77.3.pool.telefonica.de) (Ping timeout: 256 seconds)
[05:48:05] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 256 seconds)
[05:58:39] *** Joins: frost (~frost@user/frost)
[05:59:57] *** Joins: taiju (~taiju@215.185.218.133.dy.bbexcite.jp)
[06:02:11] *** Joins: klovett (~klovett@107.115.32.130)
[06:42:17] *** Quits: daviid (~user@179.210.52.91) (Ping timeout: 240 seconds)
[06:59:35] *** Joins: livoreno (~livoreno@user/notzmv)
[07:05:34] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[07:08:03] *** Joins: livoreno (~livoreno@user/notzmv)
[07:09:35] *** Joins: daviid (~user@177.25.184.157)
[07:12:04] *** Quits: daviid (~user@177.25.184.157) (Remote host closed the connection)
[07:12:22] *** Joins: daviid (~user@177.25.184.157)
[07:19:20] *** Quits: klovett (~klovett@107.115.32.130) (Quit: ZZZzzz…)
[07:26:41] *** Quits: karlosz (~karlosz@136.56.98.53) (Ping timeout: 256 seconds)
[07:46:57] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[07:48:37] <Spawns_Carpeting> how is let normally implemented in a really barebones and minimal scheme? my first question is, whether its a macro or not, and if so roughly what that macro would expand to. my next question is what the implementation is like in terms of an interpreter, like whether lets create new stack frames, or if locals are often on the stack where general computations happen or not
[07:49:12] <Spawns_Carpeting> i do realize some of these things are implementation details, but a general guide in the correct direction would be helpful
[07:58:13] *** Quits: jao (~jao@211.68.17.95.dynamic.jazztel.es) (Ping timeout: 250 seconds)
[07:58:32] *** Joins: [deleted] (~livoreno@user/notzmv)
[08:01:01] <fizzie> There's an example of how `let` could be defined in terms of `lambda` in the "derived expression types" section of R5RS (maybe in newer standards as well).
[08:02:09] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 268 seconds)
[08:02:25] <fizzie> Paraphrasing a bit, (let ((n1 v1) (n2 v2)) b1 b2) is the same as ((lambda (n1 n2) b1 b2) v1 v2).
[08:04:15] <fizzie> (And https://0x0.st/or5F.txt has the full define-syntax/syntax-rules R5RS definitions of let, let* and letrec.)
[08:06:10] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[08:09:04] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:15:12] <Spawns_Carpeting> why do top level functions not capture parameters from the area they are called from like lambdas do?
[08:15:30] <Spawns_Carpeting> as in, a lambda can access bindings from above where its called, but top level functions cannot
[08:16:37] <Spawns_Carpeting> also as for the scheme spec, which one is better to target? the newest version?
[08:21:32] <Spawns_Carpeting> im trying this out in scheme to see, but "expand" seems to collapse the entire expression into a single number for trivial examples of let
[08:22:15] <Spawns_Carpeting> i think i see how it works though now
[08:22:26] <Spawns_Carpeting> but the whole top level function part still confuses me
[08:24:39] <light> What do you mean? Scheme uses lexical scoping.
[08:25:36] <Spawns_Carpeting> so I guess what I really want to know is how to implement lexical scoping inside of my compiler, which is probably outside of the scope of this channel
[08:26:02] <Spawns_Carpeting> but yes now that you mention it, handling lexical scoping correctly solves my issue
[08:26:10] <Spawns_Carpeting> not sure how I missed that
[08:27:25] *** Quits: shawnw (~shawn_w@152.44.212.188) (Ping timeout: 268 seconds)
[08:38:27] *** Quits: eddof13 (~textual@2600:4040:4029:5000:40a7:771f:cdfd:21ff) (Quit: Textual IRC Client: www.textualapp.com)
[08:42:06] <light> I would use a table.
[08:42:42] <light> To track the environment.
[08:57:56] *** Quits: daviid (~user@177.25.184.157) (Read error: Connection reset by peer)
[08:58:17] *** Joins: daviid (~user@177.25.178.11)
[08:58:59] *** Joins: eddof13 (~textual@2600:4040:4029:5000:b8ad:3a64:4453:45f4)
[09:03:17] *** Quits: daviid (~user@177.25.178.11) (Ping timeout: 240 seconds)
[09:13:05] *** Joins: karlosz (~karlosz@76-204-58-159.lightspeed.rlghnc.sbcglobal.net)
[09:18:45] <Spawns_Carpeting> yeah i did some research and thinking, and its not as bad as i thought
[09:25:31] *** Quits: [deleted] (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[09:42:28] *** Quits: taiju (~taiju@215.185.218.133.dy.bbexcite.jp) (Read error: Connection reset by peer)
[09:42:46] *** Joins: taiju (~taiju@215.185.218.133.dy.bbexcite.jp)
[09:46:57] *** Quits: taiju (~taiju@215.185.218.133.dy.bbexcite.jp) (Ping timeout: 240 seconds)
[09:49:27] *** Quits: eddof13 (~textual@2600:4040:4029:5000:b8ad:3a64:4453:45f4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:50:56] *** Joins: eddof13 (~textual@2600:4040:4029:5000:b8ad:3a64:4453:45f4)
[09:56:54] *** Joins: seninha (~seninha@user/seninha)
[10:04:04] *** Joins: notzmv (~zmv@user/notzmv)
[10:05:37] *** Quits: eddof13 (~textual@2600:4040:4029:5000:b8ad:3a64:4453:45f4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:36:55] *** Joins: tohoyn (~tohoyn@mobile-access-2e8465-250.dhcp.inet.fi)
[10:37:55] *** Joins: sdu (~doo@185.44.146.214)
[10:40:40] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[10:58:10] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[11:11:17] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[11:13:21] *** Joins: taiju (~taiju@p236053-ipngn200203fukui.fukui.ocn.ne.jp)
[11:15:30] *** Quits: karlosz (~karlosz@76-204-58-159.lightspeed.rlghnc.sbcglobal.net) (Quit: karlosz)
[11:24:03] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 250 seconds)
[11:26:12] *** Joins: amk (~amk@109.255.169.126)
[11:49:24] *** Joins: rgherdt_ (~rgherdt@ip5f5af447.dynamic.kabel-deutschland.de)
[11:54:22] *** Joins: karlosz (~karlosz@76-204-58-159.lightspeed.rlghnc.sbcglobal.net)
[11:58:17] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[12:04:08] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[12:07:59] *** Quits: taiju (~taiju@p236053-ipngn200203fukui.fukui.ocn.ne.jp) (Ping timeout: 252 seconds)
[12:15:59] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[12:18:21] *** Joins: epony (epony@user/epony)
[12:25:58] *** Quits: karlosz (~karlosz@76-204-58-159.lightspeed.rlghnc.sbcglobal.net) (Quit: karlosz)
[12:34:39] *** Joins: daviid (~user@179.210.52.91)
[12:56:28] *** Joins: schulze (~schulze@dynamic-077-000-046-141.77.0.pool.telefonica.de)
[13:13:11] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:51:12] <amazigh> heya!
[13:52:22] <s-liao> Hello
[13:52:39] <s-liao> New discovery in scheme?
[14:05:44] <amazigh> latex is hardcore!
[14:05:46] <amazigh> ^^'
[14:06:52] <amazigh> latex is not meant for html generation
[14:07:00] <amazigh> #true-story
[14:11:09] <Franciman> +1
[14:13:46] *** Joins: rito_ (~rito_gh@45.112.243.151)
[14:17:04] <amazigh> The moment you have been waiting for: anyone wants to help clean up the markdown markup?
[14:17:20] <amazigh> here is a live preview: https://github.com/johnwcowan/r7rs-spec/blob/22cf5dd783fd121731483c93ba55b87b1e601c35/spec/r7rs.md
[14:17:33] <amazigh> NB: We do not need to work only on github
[14:18:42] <amazigh> I removed the formal semantics from the md output
[14:19:11] <amazigh> that is `syn.tex` and `sem.tex` are not part of r7rs.md
[14:21:37] *** Joins: ManDay (~manday@user/manday)
[14:21:58] <amazigh> ManDay: yo! Long time no see :)
[14:22:07] <Franciman> hi ManDay !
[14:22:18] <ManDay> Hi all
[14:22:23] <ManDay> amazigh: I saw you, you didn't see me :p
[14:22:29] <amazigh> oh oh oh
[14:22:37] <ManDay> "ho ho ho"
[14:22:45] <ManDay> and I have seen you've been a naughty boy!
[14:23:01] <amazigh> ^^'
[14:23:04] <ManDay> how is your database knowledge project going?
[14:23:15] <amazigh> Oops...
[14:23:25] <amazigh> I am busy with getting together the foundations...
[14:23:28] <amazigh> again
[14:23:45] <ManDay> i can relate
[14:24:26] <amazigh> I spent way to much time thinking, rather than doing
[14:24:43] <amazigh> I do not want to make mistakes even if it is impossible not to
[14:24:44] <ManDay> It's easy to say in retrospect
[14:25:02] <amazigh> but the worst is I want to commit to the right project, and I do not know which one it is
[14:25:26] <ManDay> I've convinced myself (perhaps for a certain peace of mind) that a lot of planning and thinking is not always overthinking. It's just crucial to approximately know when to stop.
[14:26:42] <amazigh> So outside thinking, I jump from small wanna-be big projects to another small wanna be big project :)
[14:26:50] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[14:26:55] <amazigh> And you, what have you been up to?
[14:27:02] <ManDay> thinking :p
[14:27:05] <ManDay> (and a little coding)
[14:27:16] <ManDay> shit's difficult, yo
[14:28:54] <ManDay> i've implemented the core semantics of a graph analyzer (along the line of "don't overthink it, build something, then optimize") and then I hit the next stage of optimizing because even simple problems wouldn't finish for the life of mine. turns out, i have to turn many things upside down
[14:29:08] <ManDay> so much for "(not) overthinking/overplanning something"
[14:29:30] <ManDay> i actually don't think I could have gotten that far without implementing the core semantics first
[14:29:31] <ManDay> tho
[14:31:07] <amazigh> yes, sometimes, many times, I can not forsee problems before actually getting together the code
[14:56:29] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[15:41:50] <amazigh> Zipheir: thanks for the feedback, I will proceed to improve the markdown file without formal semantic in scheme.rs repository
[15:41:52] <amazigh> at https://git.sr.ht/~amirouche/scheme.rs
[15:52:27] <sham1> Hm, sourcehut seems a bit slow
[15:55:30] *** Quits: madage (~madage@user/madage) (Remote host closed the connection)
[15:55:44] *** Joins: madage (~madage@user/madage)
[16:00:10] <Franciman> sham1: use fossil
[16:00:12] <Franciman> git is the past
[16:00:15] <wasamasa> lol
[16:00:36] <sham1> I'm not the one with the sourcehut repo
[16:01:06] <Franciman> i try to ignore git repos as much as i can
[16:01:09] <wasamasa> if you think sourcehut is slow, try github
[16:01:11] <Franciman> unfortunately I can't 100% ignore it
[16:01:36] <sham1> Well GitHub does stupid stuff like SPA
[16:02:00] <Franciman> bazaar is also intriguing. Not to speak about pijul
[16:02:07] <sham1> Darcs
[16:02:13] <Franciman> darcs is nice yeah
[16:02:34] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::414b)
[16:03:55] <sham1> Having a semantic version control would be neat, but I don't know if it'd work, especially for cross-language projects and such
[16:04:20] *** Joins: gallup (~gallup@192-222-138-215.qc.cable.ebox.net)
[16:04:22] *** Quits: gallup (~gallup@192-222-138-215.qc.cable.ebox.net) (Client Quit)
[16:04:59] *** Joins: gproto23 (~gproto23@user/gproto23)
[16:05:50] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[16:07:11] <ouestbillie> hey all, were using an inhouse scheme at work and we're providing a half-baked DSL to the upper stack devs for queries to our data
[16:07:53] <ouestbillie> now we want to sanitize the DSL "parser"'s input and do some more formal stuff according to a well defined grammar etc
[16:09:06] <ouestbillie> the scheme is implemented in C, I was wondering what would be the best way to re implement and formalize said DSL, in the C layer as a library with standard nix lexer/parser generators, or I can/should stay above and generate scheme code from a formal grammar spec?
[16:09:33] <wasamasa> does the scheme suck so much you can't do that in scheme?
[16:10:09] <ouestbillie> well, I wouldn't hmmm, say that but, I'd like to generate the parsing from the grammar
[16:10:17] <wasamasa> sure, that's a valid approach
[16:10:33] <wasamasa> depending on the grammar you could manually roll a lexer/parser combo
[16:10:43] <ouestbillie> and scheme being scheme (were on R5RS) and the ecosystem being what it is
[16:10:59] <ouestbillie> i don't want to fall into a rabbit hole that's impl dependent like racket or guile
[16:12:00] <ouestbillie> wasamasa: do you know of any R5RS lexer/parser tools, on the spectrum from manual to fully generated?
[16:12:50] <wasamasa> the easiest thing to use is to stick to s-expressions and read them
[16:13:15] <sham1> That's probably not the DSL used thiugh
[16:13:18] <ouestbillie> the DSL is s-exp based
[16:13:25] <ouestbillie> should have mentionned altough
[16:13:28] <sham1> Well then
[16:13:31] <wasamasa> then I don't know what else is to be parsed
[16:13:47] <wasamasa> making sense of the s-expression should be a matter of the usual list processing
[16:13:50] <sham1> I suppose one still needs to recognise the commands and such
[16:13:57] <ouestbillie> sham1: yeah thats the thing
[16:14:06] <ouestbillie> don't want to just blindly eval stuff na mean
[16:14:20] <sham1> Understandable
[16:14:24] <wasamasa> so you write your own interpreter
[16:14:36] <wasamasa> that's unrelated to lexing/parsing
[16:15:16] <sham1> You look at the first element on the list and dispatch on that, calling your DSL evaluation and such recursively as needed
[16:15:18] <ouestbillie> yeah youre right my bad, i mean theres still sanitization to be made before passing to the interpreter but the core of the issue is more interpreterish
[16:16:02] <ouestbillie> cause at the end of the day were gonna call eval on the result, after some optimization/sanitization passes
[16:16:17] <wasamasa> uh
[16:16:22] <sham1> Yeah, you'll need to traverse the entire tree
[16:16:34] <wasamasa> eval is not going to save you
[16:16:59] <ouestbillie> no what im saying is that, I wouldn't want to call eval on arbitrary sexp
[16:17:12] <sham1> wasamasa: they're probably turning the DSL into fragments of Scheme and then evaling. Maybe
[16:17:27] <ouestbillie> other way around
[16:17:47] <sham1> So… general Scheme to DSL?
[16:18:05] <ouestbillie> fragments of scheme are implemented, broadcasted to a java team that sends agreed upon s-exps on which we call eval
[16:18:15] <ouestbillie> (and hey I wasn't there when that happened ¯\_(ツ)_/¯)
[16:18:33] <ouestbillie> sham1: so yes i want to "jail" that general scheme
[16:18:37] <wasamasa> lol
[16:18:40] <wasamasa> good luck with that
[16:19:03] <wasamasa> usually security proofs start from a limited scheme subset
[16:19:47] <ouestbillie> yeah hence the parsing issue, i want to write something that will look at the received s-exps and at the grammar and say sure okay
[16:19:52] <ouestbillie> before passing further down
[16:19:56] <ouestbillie> am i making sense here?
[16:20:16] <wasamasa> not really
[16:20:21] <wasamasa> rudybot: eval (+ 1 1)
[16:20:32] <rudybot> wasamasa: error: with-limit: out of time
[16:20:36] <wasamasa> bleh
[16:20:43] <wasamasa> rudybot implements a sandbox for that
[16:20:58] <wasamasa> a scheme interpreter not supporting anything actually dangerous
[16:21:07] <wasamasa> if it runs into an error, the input is bunk
[16:21:07] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:21:53] <ouestbillie> interesting thanks
[16:22:51] <ouestbillie> i see an old abandonned gh repo in rkt and a website for a "ML powered chat client", related?
[16:24:03] <wasamasa> I wouldn't call it ML
[16:24:16] <wasamasa> but yeah, rudybot is up for adoption
[16:24:56] <ouestbillie> i mean everything is "ML" branded these days wtv
[16:25:18] <wasamasa> rudybot: what could machine learning possibly mean?
[16:25:25] <rudybot> wasamasa: hi,I'm playing with racket since yesterday (I'm no expert at all, just started learning some scheme/racket). Is there a way to retrieve a procedure's lambda list (possibly using non-portable racket-only code)?
[16:25:41] <wasamasa> rudybot: possibly
[16:25:42] <rudybot> wasamasa: I'll possibly investigate further. Thusfar I've been fairly entertained just reading through the manuals.
[16:25:56] <wasamasa> as you can see, it's just a match for the most unusual word
[16:26:07] <mdhughes> Uh oh, the computer's reading manuals and learning? Get an axe.
[16:26:30] <ouestbillie> nono no uncle ted thread plz
[16:26:32] <ouestbillie> too early
[16:26:49] <wasamasa> the quotes are from IRC history it has dutifully logged
[16:27:06] <ouestbillie> i mean it could navigate knowledge graphs and do some RL 
[16:27:39] <ouestbillie> but yeah its cool to look into, but, very coupled to racket and like
[16:27:45] <wasamasa> sure
[16:27:53] <wasamasa> you can implement your own scheme interpreter in r5rs
[16:28:10] <wasamasa> just omit all the dangerous stuff, like accessing the file system
[16:28:27] <ouestbillie> or the shell module we have lol
[16:28:48] *** Quits: taylan (~taylan@user/taylan) (Quit: Leaving)
[16:28:57] <wasamasa> sandboxes usually have some timeout/limit system
[16:29:09] <wasamasa> so that an infinite loop doesn't break them
[16:29:13] <ouestbillie> it s just, I would expect, scheme being a platform for playing with languages, to have some sort of generators given a formal grammar
[16:29:24] <ouestbillie> even if buried in a pdf on libgen or some shit
[16:29:33] <wasamasa> sure, but that's not what you're asking for, lol
[16:29:46] <wasamasa> you're asking about judging the safety of an AST
[16:30:22] <wasamasa> for that you'd need to traverse each part of it and evaluate that according to rules that suspiciously resemble a scheme interpreter
[16:30:57] <tohoyn> In the Theme-D compiler I implemented my own interpreted language for the macro system. The compiler is written in Guile Scheme.
[16:31:04] <ouestbillie> yes im asking for both I guess, but if the formal grammar is as small as ours we predefined symbols that translate to lambdas further down i though I could restrict purely syntactically the s-exps received
[16:32:25] <tohoyn> https://sourceforge.net/p/theme-d/code/ci/master/tree/theme-d/translator/theme-d-macros.scm.in
[16:32:26] <ouestbillie> tohoyn: oh that looks like a cool project will def dig
[16:36:13] <tohoyn> start to look at procedure interpret-core
[16:47:33] <ouestbillie> a bit lost will msg for further inquiries thanks :)
[16:47:56] <ouestbillie> why are there so many results for CL though https://www.cliki.net/parser%20generator :(
[16:48:43] <wasamasa> lol
[16:49:27] <wasamasa> recognizers and parsers are related
[16:50:06] <wasamasa> there are attempts at porting some old r5rs-like code for parsers to r7rs
[16:50:56] <ouestbillie> thats interesting, gotta fight the good fight against lisp-2s
[16:51:22] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[16:51:29] <wasamasa> https://github.com/schemeway/lalr-scm
[16:51:41] <wasamasa> http://wiki.call-cc.org/eggref/5/silex
[16:51:52] <wasamasa> https://github.com/Zipheir/silex
[16:52:06] <ouestbillie> wasamasa: ah yissss 
[16:52:15] <wasamasa> none of this is ready, mind you
[16:52:48] <ouestbillie> no but i'd need to translate that to my own non-fully-r5rs scheme anyways
[16:53:01] <ouestbillie> and the dsl is so small it s a fun way to practice these kinds of things
[16:53:09] <amazigh> mdhughes: ^^
[16:53:33] <wasamasa> https://okmij.org/ftp/Scheme/parsing.html
[16:53:45] <wasamasa> this is used as building block for ssax
[16:54:25] <ouestbillie> when I'm not, ugh, adjusting rest endpoints in flask (which communicates with scheme interpreter through a named pipe) 
[16:54:34] <ouestbillie> (again i wasnt there trololol)
[16:54:45] <ouestbillie> wasamasa: thats all gr8t stuff
[16:55:25] <amazigh> ouestbillie: is your company hiring by any luck?
[16:56:31] <ouestbillie> amazigh: I think so but it s kind of the wildwest, were a small shop in a huge one, I was supposed to do some operations research stuff, simplex with column generation and ILP in general etc
[16:57:22] <ouestbillie> but the team in charge is small and wrote their own scheme and all that stuff a while back and were migrating to cloud so I ended up
[16:58:15] <amazigh> ouestbillie: I would love to have a website to look around
[16:58:18] <ouestbillie> helping with helm?? (math grad), k8s, flask, some scheme endpoints, working my way towards the scheme interpreter/custom database in C and the solver
[16:58:34] <amazigh> that is exciting
[16:58:52] <ouestbillie> https://www.ad-opt.com/core-technology/?slide_1
[16:58:55] <ouestbillie> montreal
[16:59:17] <wasamasa> airline crew planning
[16:59:19] <wasamasa> with scheme
[16:59:30] <ouestbillie> it s C really
[16:59:54] <ouestbillie> just instead of, what's that law again where if you write a big enough C or C++ program etc.
[17:00:02] <ouestbillie> well they just short circuited that
[17:00:22] <ouestbillie> amazigh: I can talk to my boss if you want
[17:00:44] <amazigh> ouestbillie: any way I am GMT+1 
[17:00:50] <ouestbillie> were in montreal but fully remote atm anyways
[17:00:50] <amazigh> i am not sure it will work
[17:01:11] <ouestbillie> planning on going to work from portugal when I get the money
[17:01:32] <amazigh> ouestbillie: did you find a solution to your problem?
[17:01:57] <s-liao> scheme programming jobs
[17:02:32] <sham1> The law? You mean Greenspun's 10th rule?
[17:03:19] <ouestbillie> sham1: yeah thats the one
[17:03:50] <ouestbillie> amazigh: well not a solution per se but a bunch of links that will most likely lead to something
[17:03:56] *** Joins: klovett (~klovett@107.115.32.130)
[17:08:38] *** Joins: seninha (~seninha@user/seninha)
[17:08:56] *** Joins: taylan (~taylan@user/taylan)
[17:11:07] <mdhughes> You don't need a parser if you have (read). With a few exceptions/improvements if you want #! and such. Maybe do a string preprocessor pass to turn those into sexpr.
[17:12:24] <ouestbillie> yeah parser isnt exactly the right word its just that in my personal experience "syntax checking" happens at parsing so thats where I started googling
[17:12:46] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:90de:bade:1639:c5d2)
[17:12:46] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:90de:bade:1639:c5d2) (Changing host)
[17:12:46] *** Joins: skapata (~Skapata@user/skapata)
[17:12:47] <ouestbillie> dont know how to google passes at a finer granularity 
[17:13:55] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:71e0:c4bf:d866:f951) (Remote host closed the connection)
[17:14:22] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:71d0:995f:9252:5bc7)
[17:16:27] <sham1> Pattern matching
[17:16:37] <wasamasa> code walking
[17:17:28] <s-liao> what is code walking?
[17:18:02] <wasamasa> it's like tree walking, but the tree is an AST
[17:18:12] <wasamasa> and you follow appropriate rules
[17:18:29] <wasamasa> like, if walking a let, there are bindings and you walk their definitions, not their names
[17:19:06] <wasamasa> then the body
[17:19:28] <ouestbillie> pattern matching sounds right true
[17:19:31] <amazigh> that is a step toward interpreting or compiling a language
[17:20:14] <ouestbillie> I just tend to go  EBNF and not sicp rule style coding
[17:20:25] <s-liao> is Pattern matching the suger daddy of the read?
[17:20:27] <ouestbillie> and we have other optimization passes after that
[17:26:59] <s-liao> The read accept the s-exp,  pattern matching can accept the different forms.
[17:27:28] <ouestbillie> unification would be the grand daddy then
[17:27:47] <s-liao> Of course, those different forms are s-exp as well.
[17:29:50] <s-liao> I just blew up my brain. I need to check as well.
[17:36:52] *** Quits: zwr (~zwr@2804:d45:b966:fb00:9a15:fa56:81f7:4afc) (Ping timeout: 268 seconds)
[17:37:04] *** Joins: zwr (~zwr@2804:d45:b966:fb00:c657:4fa8:ebc0:a8bd)
[17:39:57] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[17:44:18] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[17:53:13] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[18:00:50] <amazigh> what do you think about SRFIs getting their own DOI?
[18:00:59] <amazigh> see https://www.doi.org/
[18:01:37] <sham1> That should make referencing them nice
[18:11:42] *** Joins: jao (~jao@211.68.17.95.dynamic.jazztel.es)
[18:30:15] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[18:30:58] *** Quits: wasamasa (~wasamasa@chicken/contributor/wasamasa) (Quit: ZNC - https://znc.in)
[18:31:25] *** Joins: wasamasa (~wasamasa@chicken/contributor/wasamasa)
[18:32:35] *** Joins: klovett_ (~klovett@107.115.32.130)
[18:34:47] *** Quits: klovett (~klovett@107.115.32.130) (Ping timeout: 256 seconds)
[18:35:29] *** Quits: wasamasa (~wasamasa@chicken/contributor/wasamasa) (Client Quit)
[18:36:38] *** Joins: wasamasa (~wasamasa@chicken/contributor/wasamasa)
[18:38:38] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Quit: Lost terminal)
[18:46:46] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[18:50:07] *** Joins: xsperry (~xs@user/xsperry)
[19:01:49] *** Quits: ManDay (~manday@user/manday) (Quit: TURBOquit (tm) - the fastest way to get out of an awkward situation)
[19:15:27] *** Quits: madage (~madage@user/madage) (Remote host closed the connection)
[19:15:39] *** Joins: madage (~madage@user/madage)
[19:19:54] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 260 seconds)
[19:34:46] <amazigh> I know what would be nice: a red booklet implemented in terms of R7RS-small, tangerine booklet in terms of red, all the way... until... until... ultra-violet!
[19:36:58] <sham1> Depends on how much you can you can implement based on the previous dockets
[19:39:00] *** Joins: seninha (~seninha@user/seninha)
[19:49:07] <dpk> we already have requirements imposed on Large implementations which can't be implemented in terms of small (though not nearly enough such requirements, imo, and the lack of a clear way to make decisions about the large number of such issues is a major flaw of the current R7 process)
[19:49:13] <amazigh> yes docket I forgot about the term
[19:50:26] <dpk> the main such requirement is the full numeric tower. also, the ephemerons library can't meaningfully be implemented in terms of small. (it is theoretically 'portable' because the GC might not exist at all, but frankly it would be better for an implementation simply not to provide (scheme ephemeron) than to use the strong-referencing sample implementation or an equivalent)
[19:51:41] <amazigh> ephemeron can't be implemented in terms of small, I trust you on that.
[19:52:40] <amazigh> Tho, at this time, I have (scheme base) that is implemented in terms of rnrs, and srfi 6, 9, 13, 39, and 43. That seems backward.
[19:54:36] <amazigh> I will probably need to rewrite scheme base, then re-implement the rest, red, and tangerine in terms of the previously defined libraries, and fallback to (chezscheme) in case something can not be implemented portably
[19:55:03] <dpk> Racket-Chez has ephemerons, i believe
[19:55:15] <tokie> does nils holm frequent here?
[19:55:18] <amazigh> not portablbe in the case I am interested in: neither rnrs, nor small, red or tangerine
[19:55:40] <amazigh> tokie: idk
[19:55:56] <dpk> though they work a bit differently from the ones in R7RS, you can almost certainly work around it. (see how the Racket implementation of SRFI ephemerons works for an example)
[19:56:02] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 240 seconds)
[19:56:09] <amazigh> ah yes! Good call.
[19:56:19] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[19:56:26] <tokie> i'm implementing lambdas in my scheme and his book was pretty useful for conceptualizing a good way of doing it
[19:59:30] <amazigh> tokie: which one? I never read nils holm books. Thanks for the feedback btw. If you want to give feedback to Nils send him an email I guess.
[20:01:59] <amazigh> OR I could just copy what I already have... that would be 2 sec effort.
[20:43:11] *** Quits: sdu (~doo@185.44.146.214) (Quit: leaving)
[20:59:27] *** Joins: livoreno (~livoreno@user/notzmv)
[21:05:50] *** Joins: sdu (~doo@185.44.146.214)
[21:29:08] <dpk> every day i learn something i thought i should have known before. in this case, that the pattern literals in a syntax-rules macro aren't automatically bound to auxiliary syntax keywords like i thought for some reaso
[21:29:09] <dpk> n
[21:29:53] *** Joins: sp1ff (~user@c-73-189-25-64.hsd1.ca.comcast.net)
[22:14:53] *** Quits: jao (~jao@211.68.17.95.dynamic.jazztel.es) (Remote host closed the connection)
[22:19:09] *** Quits: tohoyn (~tohoyn@mobile-access-2e8465-250.dhcp.inet.fi) (Quit: Leaving)
[22:19:36] *** Quits: winning-luser (~wl@2601:8c1:80:70d0::414b) (Quit: Leaving)
[22:21:06] *** Joins: jao (~jao@211.68.17.95.dynamic.jazztel.es)
[23:06:58] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Quit: jrincayc)
[23:15:57] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Remote host closed the connection)
[23:16:21] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[23:45:53] *** Joins: karlosz (~karlosz@136.56.98.53)
[23:47:02] *** Quits: jao (~jao@211.68.17.95.dynamic.jazztel.es) (Ping timeout: 252 seconds)
[23:50:10] <amazigh> echo "(import (arew))" | ../bin/ta6le/arew repl > /dev/null && echo OK!
[23:50:12] <amazigh> OK!
[23:50:17] <amazigh> :)
[23:53:52] <Zipheir> tokie: IIUC Nils Holm thinks everything that's happened in Scheme since R4RS is irrelevant, so I bet he's ignoring us.
[23:54:23] <Zipheir> Another mountaintop hermit Lisper.
[23:58:11] <Zipheir> Or not, I don't know.
