[00:09:39] *** Joins: carmysilna (~brightly-@2001:470:69fc:105::2190)
[00:15:02] <FromDiscord> <@bracketmaster-5a708063d73408ce4> I have a weird I allow the arg type to be `int or uint` and I need to check within the procs body whether or not I passed in int or uint
[00:15:05] <FromDiscord> <@bracketmaster-5a708063d73408ce4> how might I go about this
[00:15:20] <FromDiscord> <@bracketmaster-5a708063d73408ce4> a solution that does the check statically(at compile time) is fine
[00:17:56] <FromDiscord> <@bracketmaster-5a708063d73408ce4> `is` seems to do what I want here
[00:18:02] <FromDiscord> <Rika> `when it is int`
[00:18:25] <FromDiscord> <Rika> the check will always be at compile time
[00:18:43] <FromDiscord> <Rika> its just a matter of if you use runtime if or compiletime when
[00:18:55] <FromDiscord> <@bracketmaster-5a708063d73408ce4> first time I'm hearing of `when`
[00:19:05] <FromDiscord> <Rika> ? really
[00:19:05] <FromDiscord> <Rika> how
[00:19:12] <FromDiscord> <@bracketmaster-5a708063d73408ce4> found it
[00:19:13] <FromDiscord> <@bracketmaster-5a708063d73408ce4> https://nim-lang.org/docs/manual.html#statements-and-expressions-when-statement
[00:19:16] <fn> <06Prestige99> Isn't it in the 1st tutorial
[00:19:18] <FromDiscord> <@bracketmaster-5a708063d73408ce4> well, I always used if
[00:19:26] <FromDiscord> <@bracketmaster-5a708063d73408ce4> it may have been
[00:19:36] <FromDiscord> <@bracketmaster-5a708063d73408ce4> I did do the tutorials - perhaps I"m forgetful
[00:19:48] <fn> <06Prestige99> `when isMainModule` for instance
[00:19:48] <FromDiscord> <@bracketmaster-5a708063d73408ce4> https://nim-lang.org/docs/tut1.html#control-flow-statements-when-statement
[00:19:54] <FromDiscord> <@bracketmaster-5a708063d73408ce4> yup - you're right it was
[00:20:05] <FromDiscord> <@bracketmaster-5a708063d73408ce4> I never use that lol
[00:20:20] <FromDiscord> <@bracketmaster-5a708063d73408ce4> ALthough I've only been nimming officially for two months going on three now
[00:22:16] <fn> <06Prestige99> It takes some time to learn, no worries
[01:04:57] <FromDiscord> <hiros> What are the known nim dialects?
[01:05:14] <fn> <06Prestige99> dialects?
[01:07:47] <FromDiscord> <hiros> You know how with lisp for example there's racket, clojure, and scheme? But it's still lisp in nature? What are languages that are like that for nim?
[01:13:02] <FromDiscord> <carmysilna> new user here, but I think its just nim. Lisp is kind of special in that it has dialects, not many languages are like that
[01:13:38] <FromDiscord> <Rika> no one has made a dialect of nim yet i believe
[01:13:49] <FromDiscord> <Rika> there are similar languages but they arent forks of nim either
[01:14:00] <FromDiscord> <Rika> just "took inspiration"
[01:14:54] <FromDiscord> <Rika> indeed lisp is the exception in having dialects; thinking about C, it doesnt have as many dialects as lisp yet being much much much more popular
[01:16:32] <FromDiscord> <hiros> C is already pretty tiny to begin with. So not much you could do with a dialect of C that wouldn't become a new language entirely. It would be silly to think C++ is a C dialect.
[01:19:57] <FromDiscord> <Rika> i had whatever haskell was using in mind more
[01:20:00] <FromDiscord> <Rika> c--?
[01:20:03] <FromDiscord> <Rika> i dont know the name
[01:21:41] <FromDiscord> <InventorMatt> Nim with curly brackets could be considered a dialect
[01:23:35] <FromDiscord> <carmysilna> Its Cmm, I think, for, C minus minus
[01:28:18] *** Quits: pro (~pro@user/pro) (Quit: WeeChat 3.2)
[01:55:33] *** Quits: maxime_ (~maxime@2a01cb0883359800f69fed5c65f9e937.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[02:07:35] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[02:09:35] *** Parts: carmysilna (~brightly-@2001:470:69fc:105::2190) ()
[02:31:50] *** Joins: rockcavera (~rc@192.12.112.196)
[02:31:50] *** Quits: rockcavera (~rc@192.12.112.196) (Changing host)
[02:31:50] *** Joins: rockcavera (~rc@user/rockcavera)
[02:40:05] <FromDiscord> <stu002> If I have a `proc` that accepts a proc parameter `proc (x: int, y:int): bool` do I always need to wrap the builtin `==` proc to pass it as a parameter?
[02:42:17] <FromDiscord> <ElegantBeef> I dont follow what you mean
[02:42:37] <FromDiscord> <ElegantBeef> if a proc you pass to a proc matches the type signature it'll let you pass it
[02:46:30] <FromDiscord> <theangryepicbanana> In reply to @ElegantBeef "if a proc you": I think they want to pass the `==` operation as a proc
[02:46:40] <FromDiscord> <theangryepicbanana> I think you could do that by putting the operator in backticks
[02:49:20] <FromDiscord> <ElegantBeef> Nah some operators cannot be passed due to using compiler magic iirc
[02:49:31] <FromDiscord> <ElegantBeef> So yea for primitives you need to wrap them afaik
[02:50:47] <FromDiscord> <stu002> Thanks -- the backticks approach didn't work and I started to suspect that `==` was special somehow
[02:53:04] <FromDiscord> <stu002> Target function was `func is_equal(eq: proc (x: int, y: int): bool, a: int, b: int): bool  = eq(a, b)`
[02:53:36] <FromDiscord> <stu002> And the call `is_equal(``==``, 12 ,42)`
[02:53:47] <FromDiscord> <stu002> Only with single backticks
[02:55:04] <FromDiscord> <stu002> But this did work: `is_equal((x: int, y: int) => x == y, 12, 42)`
[03:07:14] <FromDiscord> <jfmonty2> `when` is basically compile-time `if`, right? So in a macro or const assignment, can they be used interchangeably?
[03:08:09] <FromDiscord> <juan_carlos> when does not open a new scope, if does.
[03:08:29] <FromDiscord> <jfmonty2> ah
[03:27:45] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[03:55:29] <FromDiscord> <dom96> Anyone familiar with VS Code know how to see what the extensions are running?
[03:59:46] <FromDiscord> <dom96> nvm
[04:15:49] <FromDiscord> <dom96> damn dimscord is really nice
[04:16:07] <FromDiscord> <dom96> well done @krisppurg and all contributors 🙂
[04:25:47] <fn> <06Prestige99> yeah it's great
[04:58:33] *** Joins: Onionhammer2 (~onionhamm@207-153-1-151.fttp.usinternet.com)
[04:58:33] *** Quits: Onionhammer (~onionhamm@207-153-1-151.fttp.usinternet.com) (Read error: Connection reset by peer)
[04:58:33] *** Onionhammer2 is now known as Onionhammer
[05:54:04] <fn> <11ForumUpdaterBot99> New post on r/nim by chrisbot5000: Printing tabular data, see https://reddit.com/r/nim/comments/olukny/printing_tabular_data/
[06:10:42] <FromDiscord> <carmysilna> How would I catch a Ctrl-C SIGINT from `stdin.readLine`? `try...catch IOError` isn't doing it
[06:16:06] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:19:48] <FromDiscord> <ElegantBeef> You want to over ride the ctrl + c behaviour?
[06:19:50] <FromDiscord> <@bracketmaster-5a708063d73408ce4> like this?
[06:19:58] <FromDiscord> <ElegantBeef> https://nim-lang.org/docs/system.html#setControlCHook%2Cproc%29
[06:20:18] <FromDiscord> <@bracketmaster-5a708063d73408ce4> nvm
[06:20:30] <FromDiscord> <@bracketmaster-5a708063d73408ce4> can I do fancy type constraint in Nim?
[06:20:37] <FromDiscord> <@bracketmaster-5a708063d73408ce4> sent a long message, see http://ix.io/3tdD
[06:20:44] <FromDiscord> <ElegantBeef> Jeez the bridge destroyed that
[06:21:34] <FromDiscord> <@bracketmaster-5a708063d73408ce4> https://play.nim-lang.org/#ix=3tdE
[06:22:30] <FromDiscord> <ElegantBeef> I dont think you can
[06:24:15] <FromDiscord> <ElegantBeef> It also doesnt make any sense
[06:25:01] <FromDiscord> <ElegantBeef> in this case you give it `obj[3]` which means `T = 3` but then the parameter is expecting `T + 1` so that means you needed to pass a `obj[4]`
[06:26:09] <FromDiscord> <ElegantBeef> and that logic applies to all static ints < 3
[06:26:12] <FromDiscord> <ElegantBeef> (edit) "<" => "<="
[06:28:27] <FromDiscord> <@bracketmaster-5a708063d73408ce4> Actually, I wanted to do something where the function has two argument, each of type obj
[06:28:52] <FromDiscord> <@bracketmaster-5a708063d73408ce4> the proc signature enforces that one obj must be one larger than the other
[06:28:55] <FromDiscord> <ElegantBeef> Ok
[06:33:55] <FromDiscord> <@bracketmaster-5a708063d73408ce4> I'm not sure that is possible either
[06:37:21] <FromDiscord> <theangryepicbanana> In reply to @@bracketmaster-5a708063d73408ce4 "type   obj\*[n": there's a chance you could do this with concepts
[06:37:37] <FromDiscord> <@bracketmaster-5a708063d73408ce4> concepts
[06:37:44] <FromDiscord> <@bracketmaster-5a708063d73408ce4> what's that?
[06:37:54] <FromDiscord> <theangryepicbanana> they're a somewhat experimental feature
[06:38:03] <FromDiscord> <theangryepicbanana> basically typeclasses (if you've ever used those)
[06:38:41] <FromDiscord> <theangryepicbanana> https://nim-lang.org/docs/manual_experimental.html#concepts
[06:38:50] <FromDiscord> <@bracketmaster-5a708063d73408ce4> https://play.nim-lang.org/#ix=3tdL
[06:39:02] <FromDiscord> <@bracketmaster-5a708063d73408ce4> Do concepts support that?
[06:39:09] <FromDiscord> <carmysilna> In reply to @ElegantBeef "You want to over": Yeah, I want to be able to exit quietly instead of providing a stack trace
[06:39:44] <FromDiscord> <theangryepicbanana> In reply to @@bracketmaster-5a708063d73408ce4 "Do concepts support that?": probably in combination with macros or a second generic parameter
[06:40:50] <FromDiscord> <carmysilna> In reply to @ElegantBeef "https://nim-lang.org/docs/system.html#setControlCHo": Thanks, that looks like exactly what I want
[06:42:12] <FromDiscord> <ElegantBeef> It's not ideal but you could do this https://play.nim-lang.org/#ix=3tdO
[06:42:24] <FromDiscord> <ElegantBeef> Not too far off what you were doing
[06:42:42] <FromDiscord> <ElegantBeef> Though the constraint is moved into the body instead of the procdef
[06:42:53] <FromDiscord> <@bracketmaster-5a708063d73408ce4> I honestly think that will work
[06:43:04] <FromDiscord> <@bracketmaster-5a708063d73408ce4> its still compile time - so yeah, I'm happy
[06:43:13] <FromDiscord> <ElegantBeef> Though truthfully you dont need the `static Int` part
[06:43:20] <FromDiscord> <ElegantBeef> you cannot make an `obj` with anything but static cint
[06:44:00] <FromDiscord> <ElegantBeef> So this works fine https://play.nim-lang.org/#ix=3tdP
[06:44:33] <FromDiscord> <@bracketmaster-5a708063d73408ce4> you still had static[int]
[06:45:06] <FromDiscord> <ElegantBeef> refresh ix.io is a bit glitchy sometimes
[06:48:59] <FromDiscord> <theangryepicbanana> In reply to @@bracketmaster-5a708063d73408ce4 "you still had static[int]": this should theoretically work but idk why it doesn't https://play.nim-lang.org/#ix=3tdQ
[06:59:06] <FromDiscord> <ElegantBeef> https://play.nim-lang.org/#ix=3tdS congrats banana you had a better solution than i
[06:59:42] <FromDiscord> <generic linux user> babana where?
[06:59:52] <FromDiscord> <generic linux user> oh
[07:02:15] <FromDiscord> <theangryepicbanana> In reply to @ElegantBeef "https://play.nim-lang.org/#ix=3tdS congrats banana ": yay
[07:02:29] <FromDiscord> <theangryepicbanana> been doing some hacking into concepts lately ;)
[07:03:06] <FromDiscord> <ElegantBeef> Yea i dont touch them much but i've been slowly moving towards them
[07:03:12] <FromDiscord> <ElegantBeef> They have a lot of power, especially paired with macros
[07:03:16] <FromDiscord> <theangryepicbanana> they're pretty pog
[07:03:30] <FromDiscord> <theangryepicbanana> waiting for runtime concepts though (i.e interfaces)
[07:03:52] <FromDiscord> <ElegantBeef> I still dont get how iface doesnt solve that for you
[07:04:06] <FromDiscord> <ElegantBeef> I'm a numpty and it seems to match 1:1 what you want
[07:04:23] <FromDiscord> <theangryepicbanana> supposedly they were in the spec via vtref and vtptr for about 8 months before being removed for some reason
[07:04:56] <FromDiscord> <ElegantBeef> I mean araq does want to make it happen which is one reason for new style concepts
[07:04:56] <FromDiscord> <theangryepicbanana> In reply to @ElegantBeef "I still dont get": because I need actual inheritance behavior, not golang interfaces
[07:05:14] <FromDiscord> <ElegantBeef> So you need C# style interfaces?
[07:05:22] <FromDiscord> <theangryepicbanana> essentially yeah
[07:05:34] <FromDiscord> <theangryepicbanana> or like, interfaces in any language except golang
[07:05:43] <FromDiscord> <theangryepicbanana> (edit) "in" => "from"
[07:05:49] <FromDiscord> <ElegantBeef> hey i havent used many languages
[07:06:32] <FromDiscord> <ElegantBeef> That's actually not to bad considering you're transpiling to nim though, since you can make a typedef, subscribe to a vtable and all in the generated nim file
[07:06:38] <FromDiscord> <theangryepicbanana> basically interfaces form an "is-a" relationship with the types they're implemented in, similar to object inheritance
[07:06:46] <FromDiscord> <ElegantBeef> Well i know how they work
[07:06:53] <FromDiscord> <ElegantBeef> i've used them afterall
[07:07:00] <FromDiscord> <theangryepicbanana> I'm describing the behavior I need
[07:07:09] <FromDiscord> <ElegantBeef> Ah
[07:07:59] <FromDiscord> <theangryepicbanana> now I've kinda come up with a workaround using an unhealthy amount of dummy procs/methods, generics, concepts, and typedesc, but it still isn't perfect
[07:08:11] <FromDiscord> <ElegantBeef> Sounds hellish
[07:08:29] <FromDiscord> <theangryepicbanana> pretty much yeah
[07:09:24] <FromDiscord> <ElegantBeef> With macros + macro cache this actually might be pretty reasonably achieved
[07:09:44] <FromDiscord> <theangryepicbanana> I can understand why it's difficult to make concepts a runtime thing though. afaik liquid haskell and raku are the only language with such a feature
[07:09:59] <FromDiscord> <theangryepicbanana> (edit) "I can understand why it's difficult to make concepts a runtime thing ... though.languages" 03added "in nim" | "language" => "languages"
[07:10:16] <FromDiscord> <theangryepicbanana> scratch that, it's just raku lol
[07:10:31] <FromDiscord> <ElegantBeef> I swear if you have me writing an interface system.... 😄
[07:10:42] <FromDiscord> <theangryepicbanana> oh raku is plenty fun
[07:11:10] <FromDiscord> <theangryepicbanana> imagine runtime concepts that also double as refinement types
[07:11:55] <FromDiscord> <ElegantBeef> presently thinking about making runtime concepts
[07:12:09] <FromDiscord> <theangryepicbanana> I mean it's possible
[07:12:50] <FromDiscord> <theangryepicbanana> probably easier to stick with concepts that are treated as interfaces though
[07:13:35] <FromDiscord> <theangryepicbanana> (so it's just has to check the is-a relationship)
[07:13:41] <FromDiscord> <theangryepicbanana> (edit) "it's" => "it"
[07:14:57] <FromDiscord> <theangryepicbanana> either way I'm sure it'll be fun
[07:15:29] <FromDiscord> <theangryepicbanana> yeah like that
[07:15:34] <FromDiscord> <ElegantBeef> sent a code paste, see https://play.nim-lang.org/#ix=3tdT
[07:18:49] <FromDiscord> <ElegantBeef> Trying to get away from the nested ifelse is a tricky thing 😄
[07:19:33] <FromDiscord> <ElegantBeef> Cause you need to bake runtime information on instantiation of the object
[07:21:49] <FromDiscord> <ElegantBeef> Just thought of the dumbest way and that's to add an `clickableId: 1..1` replacing `1..1` with the id of the object
[07:26:38] <FromDiscord> <ElegantBeef> Oh right ranges dont default init to their range
[07:45:36] <FromDiscord> <theangryepicbanana> In reply to @ElegantBeef "Oh right ranges dont": you could always use high/low?
[07:47:02] <FromDiscord> <ElegantBeef> I mean you'd still have to convert it to the type to get that, so it'd be pointless
[07:48:58] <FromDiscord> <theangryepicbanana> yeah
[07:49:02] <FromDiscord> <theangryepicbanana> or actually
[07:50:08] <FromDiscord> <theangryepicbanana> In reply to @ElegantBeef "I mean you'd still": `typeof(default(Clickable).clickableId).high`?
[08:08:32] <FromDiscord> <Tuatarian> In reply to @ElegantBeef "Since around Nim 1.4.6(maybe": Will do, I have 1.4.4
[08:31:44] <FromDiscord> <@bracketmaster-5a708063d73408ce4> I have a proc that has some static when conditions that are predicated on the proc's argument's type. The proc as of compile time might actual be 4 different procs depending on the argument types. Does nim generate 4 different procs and end up re-using the code in the emitted C?
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:10] <FromDiscord> <ElegantBeef> 4 different procs with 4 different bodies
[08:36:37] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:36:55] <FromDiscord> <@bracketmaster-5a708063d73408ce4> I'm hoping nim re-uses the procs in the emitted code
[08:37:25] <FromDiscord> <ElegantBeef> Well depends what you're doing
[08:37:30] <FromDiscord> <@bracketmaster-5a708063d73408ce4> that is, if I call proc\_variant\_2() three different places in my code, nim shouldn't be re-emitting the proc
[08:37:47] <FromDiscord> <ElegantBeef> Well if it's the same parameters it'd reuse it
[08:37:48] <FromDiscord> <juan_carlos> Different types can be optimized differently, etc.
[08:42:31] <FromDiscord> <ElegantBeef> Remember you can always look at the C source to see what it emits
[08:43:24] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[08:44:24] *** Joins: xet7 (~xet7@user/xet7)
[09:48:02] <FromDiscord> <generic linux user> in a switch , will it be good if i use char instaed of int?
[09:48:08] <FromDiscord> <generic linux user> save memory?
[09:48:27] <FromDiscord> <generic linux user> after 9 i i used A,B....
[09:50:03] <FromDiscord> <ElegantBeef> It's best to just make a program work then optimize it after
[09:50:12] <FromDiscord> <ElegantBeef> If you just need a char, use a char
[10:40:17] <FromDiscord> <Rika> In reply to @ElegantBeef "Well what i'm thinking": sounds easy
[10:40:35] <FromDiscord> <Rika> relative to other things i mean
[10:40:57] <FromDiscord> <ElegantBeef> Yea the one issue i see is the whole how to get what it is without having an ifelse branch
[10:41:15] <FromDiscord> <Rika> probably a set?
[10:41:39] <FromDiscord> <Rika> rtinfo: set[interfacetypes] # or whatever
[10:42:59] <FromDiscord> <Rika> well
[10:43:00] <FromDiscord> <ElegantBeef> Well say it's a button, how do you know it's a button so you can call the button procedure without the branches
[10:43:12] <FromDiscord> <Rika> the issue with that is now you need access to the names of every concept used as an interface
[10:43:24] <FromDiscord> <Rika> prolly something to do with macrocache again, ive never used macrocache
[10:43:40] <FromDiscord> <ElegantBeef> Yea macrocache can do all the heavy lifting
[10:43:44] <FromDiscord> <Rika> In reply to @ElegantBeef "Well say it's a": when you implements: it adds the interface type to rtinfo
[10:44:15] <FromDiscord> <Rika> so you just check if type in rtinfo or w/e
[10:44:28] <FromDiscord> <Rika> i dont see what's wrong with one if branch
[10:44:51] <FromDiscord> <ElegantBeef> Well that doesnt help since each type has it's own implementation of the procedure
[10:45:30] <FromDiscord> <Rika> hm i dont really follow because ive never used anything like interfaceds
[10:45:31] <FromDiscord> <Rika> (edit) "interfaceds" => "interfaces"
[10:45:45] <FromDiscord> <ElegantBeef> Well interfaces can be overridden per object that implements them
[10:46:00] <FromDiscord> <Rika> okay, then
[10:46:01] <FromDiscord> <ElegantBeef> So you need some quick way to go from the base non specified object to the actual object
[10:46:15] <FromDiscord> <Rika> what?
[10:46:56] <FromDiscord> <ElegantBeef> Say you have all your clickables in a sequence, you want some quick way figure out what actual type it is and be able to invoke it's procedure
[10:47:19] <FromDiscord> <ElegantBeef> The thing is these interfaces behave like inherited objects, you can lose type information
[10:47:47] <FromDiscord> <ElegantBeef> So you can relatively easily get it back with nested elifs but you'd rather a vtable where it's super cheap
[10:48:01] <FromDiscord> <Rika> you cannot avoid if branches if you're doing that i dont thinkj
[10:48:13] <FromDiscord> <Rika> you cant embed types because theyre static info, you cant do a lot of things
[10:48:21] <FromDiscord> <Rika> vtable, hm
[10:48:28] <FromDiscord> <Rika> what's the trouble with using a vtable
[10:48:54] <FromDiscord> <ElegantBeef> well i was trying to figure out a way to embed the type id into the type for that
[10:49:08] <FromDiscord> <ElegantBeef> That way you arent reliant on using a specific procedure to intialize them
[10:49:22] <FromDiscord> <Rika> well you basically just assign a hash/random number to a type and have a lut for that i guess?
[10:50:52] <FromDiscord> <Rika> wait why do you need the type id w/e stuff, vtables dont have something like  that do they?
[10:52:33] <FromDiscord> <ElegantBeef> > Whenever a class defines a virtual function (or method), most compilers add a hidden member variable to the class that points to an array of pointers to (virtual) functions called the virtual method table. These pointers are used at runtime to invoke the appropriate function implementations, because at compile time it may not yet be known if the base function is to be called or a derived one implemented by a class that inherits from
[10:53:01] <FromDiscord> <ElegantBeef> Though i was going to use the macrocache  to not use a pointer
[10:53:54] <FromDiscord> <ElegantBeef> (edit) "Though i was going to use the macrocache  to not use a pointer ... " 03added "directly"
[10:57:23] <FromDiscord> <Rika> dont think thats possible
[10:58:55] <FromDiscord> <ElegantBeef> What do you mean?
[11:00:27] <FromDiscord> <Rika> how would you not use a pointer directly?
[11:00:32] <FromDiscord> <Rika> well
[11:00:41] <FromDiscord> <Rika> okay its possible just less ergonomic i feel
[11:01:15] <FromDiscord> <ElegantBeef> The symbols are looked up in the macrocache so when using whatever macro magic to call the procedure it can just unpack and run in place
[11:03:01] <FromDiscord> <ElegantBeef> Yes probably dot operators would be used
[11:21:52] *** Quits: PMunch (~PMunch@178.74.36.198) (Quit: leaving)
[11:24:57] *** Joins: beshr (~beshr@78-72-246-187-no2006.tbcn.telia.com)
[11:24:57] *** Quits: beshr (~beshr@78-72-246-187-no2006.tbcn.telia.com) (Changing host)
[11:24:57] *** Joins: beshr (~beshr@user/beshr)
[11:29:21] *** Joins: max22- (~maxime@2a01cb0883359800d1ceed1300bf7a0f.ipv6.abo.wanadoo.fr)
[11:29:37] *** Quits: max22- (~maxime@2a01cb0883359800d1ceed1300bf7a0f.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[11:29:59] *** Joins: max22- (~maxime@2a01cb0883359800d1ceed1300bf7a0f.ipv6.abo.wanadoo.fr)
[11:31:29] *** Joins: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f)
[11:48:46] *** Joins: Vladar (~Vladar@46.162.2.53)
[11:58:04] *** Joins: Guest81 (~Guest81@103.119.60.103)
[11:58:11] *** Quits: Guest81 (~Guest81@103.119.60.103) (Client Quit)
[12:38:39] <FromDiscord> <aleclarson> is there a shorthand for slicing a seq from one index to the end?↵or is this the most concise `seq[1..(seq.len - 1)]`
[12:40:01] <FromDiscord> <aleclarson> oh i found it \:)↵`seq[1..^1]
[12:40:04] <FromDiscord> <aleclarson> (edit) "\:)↵`seq[1..^1]" => "\:)↵`seq[1..^1]`"
[13:16:51] *** Joins: sagax (~sagax@213.138.71.146)
[13:30:06] <FromDiscord> <sealmove> wow! I am learning Kotlin and it's the most similar language to Nim in some aspects that I've seen
[13:31:35] <FromDiscord> <sealmove> I mean the way you play arround with basic types and the overloaded operators are very similar
[13:49:25] *** Quits: koltrast (32216d47@h77-53-57-114.cust.a3fiber.se) (Quit: ZNC - http://znc.in)
[13:54:59] *** Joins: koltrast (403c30d0@h77-53-57-114.cust.a3fiber.se)
[14:10:42] <FromDiscord> <generic linux user> i found a way to reduce the size of the binary (w/o using --opt:size) .instead of importing the library as a whole , parse the procs from the library and put them inside,↵i did it for 3procs , and i reduced it from 288K to 180K
[14:10:48] <FromDiscord> <generic linux user> didnt even strip it
[14:13:00] <FromDiscord> <Rika> What?
[14:13:16] <FromDiscord> <Rika> Parse?
[14:13:26] <FromDiscord> <Rika> Put them inside where
[14:13:39] <FromDiscord> <generic linux user> inside you .nim file
[14:13:46] <FromDiscord> <Rika> Parse what?
[14:13:50] <FromDiscord> <generic linux user> copy the procs from stdlib
[14:14:07] <FromDiscord> <Rika> Does your program still work precisely as intended
[14:14:15] <FromDiscord> <generic linux user>  https://media.discordapp.net/attachments/371759389889003532/865891637796274186/Screenshot_2021-07-17-15-14-04.jpeg
[14:14:22] <FromDiscord> <sealmove> how do you manage dependencies?
[14:14:25] <FromDiscord> <generic linux user> In reply to @Rika "Does your program still": yiss
[14:14:29] <FromDiscord> <Rika> Nim has dead code elimination so there should be no reason for the difference
[14:14:36] <FromDiscord> <generic linux user> there is
[14:14:44] <FromDiscord> <generic linux user> In reply to @Rika "Nim has dead code": i didnt know btw
[14:15:47] <FromDiscord> <generic linux user> In reply to @รєคɭ๓๏שє "how do you manage": mine is a small file , so there seems no dependencies↵the dependencies seem not to be for the procs that i am using
[14:16:04] *** Joins: al1ranger (~al1ranger@182.57.170.251)
[14:17:46] <FromDiscord> <sealmove> So it's not a consistent way. The dead code elimination not working perfectly is interesting to investigate.
[14:18:23] <FromDiscord> <generic linux user> yess
[14:18:43] <FromDiscord> <generic linux user> a .nim file with nothing inside takes 44K(arm64) release
[14:18:47] <FromDiscord> <generic linux user> thats the baseline
[14:25:55] <FromDiscord> <generic linux user> @sealmove↵{.deadCodeElim: on.} doesnt seem to do anything
[14:26:50] <FromDiscord> <Rika> It’s on by default
[14:27:20] <FromDiscord> <Rika> Why wouldn’t you use opt size though
[14:28:17] <FromDiscord> <generic linux user> i dont really need it to be small
[14:28:28] <FromDiscord> <generic linux user> just optimizing size without losing performance
[14:28:50] <FromDiscord> <generic linux user> turing the switch on and off doesnt change the bin size tho
[14:28:59] <FromDiscord> <Rika> Which
[14:30:57] <FromDiscord> <generic linux user>  https://media.discordapp.net/attachments/371759389889003532/865895839325749268/Screenshot_2021-07-17-15-30-46.jpeg
[14:31:03] <FromDiscord> <generic linux user> SUS
[14:31:16] <FromDiscord> <Rika> I said already it’s on by default
[14:31:22] <FromDiscord> <generic linux user> i tunred it off
[14:31:24] <FromDiscord> <Rika> Turning it on manually won’t change anything
[14:31:27] <FromDiscord> <Rika> Ah
[14:31:33] <FromDiscord> <Rika> I don’t think you can turn it off either
[14:31:38] <FromDiscord> <Rika> It’s a deprecated switch
[14:31:41] <FromDiscord> <generic linux user> a
[14:31:57] <FromDiscord> <generic linux user> wait
[14:32:18] <FromDiscord> <generic linux user>  https://media.discordapp.net/attachments/371759389889003532/865896179539116032/Screenshot_2021-07-17-15-32-08.jpeg
[14:32:23] <FromDiscord> <generic linux user> oops
[14:33:07] <FromDiscord> <generic linux user> yes
[14:36:01] <FromDiscord> <generic linux user> thats convinient lol
[15:06:20] *** Quits: al1ranger (~al1ranger@182.57.170.251) (Quit: Leaving)
[15:14:06] <FromDiscord> <hiros> What's a recommended profiler/debugger for nim?
[15:18:42] <FromDiscord> <Yinisiki> In reply to @hiros "What's a recommended profiler/debugger": i am using code runner plugin from vscode
[15:19:15] <FromDiscord> <Yinisiki> install code runner and type Ctrl+Alt+N in a nim code file
[15:23:30] <FromDiscord> <Yinisiki> Guys, i am facing a roadblock....
[15:24:02] <FromDiscord> <Yinisiki> At line 19 column 8.... its showing this error https://media.discordapp.net/attachments/371759389889003532/865909196141625374/unknown.png
[15:24:34] <FromDiscord> <Yinisiki> this error https://media.discordapp.net/attachments/371759389889003532/865909338299170836/unknown.png
[15:25:40] <FromDiscord> <Yinisiki> I am stuck... please help!
[15:26:16] <FromDiscord> <pointystick> Missing a colon at the end of the 'for' line
[15:27:20] <FromDiscord> <Yinisiki> oops... worked like magic.....
[15:27:30] <FromDiscord> <Yinisiki> Thx @pointystick
[15:39:59] <FromDiscord> <0ffh> If a proc returns a ref tuple, does it auto-allocate or do I need to to new(result)?
[15:40:28] <FromDiscord> <0ffh> (edit) "to" => "do"
[15:41:52] <FromDiscord> <Rika> new result
[15:41:56] <FromDiscord> <Rika> oh wait
[15:42:11] <FromDiscord> <Rika> wdym? if the proc you're writing returns ref tuple?
[15:42:21] <FromDiscord> <Rika> if its your proc yes you need to do new result at the top
[15:42:30] <FromDiscord> <0ffh> Okay, thanks!
[15:43:35] <FromDiscord> <hiros> Is GDB really the best way to debug & profile my nim programs?
[15:44:07] <fn> <11ForumUpdaterBot99> New thread by Murabito: Open nims with proper highlighting, see https://forum.nim-lang.org/t/8237
[15:50:49] *** Joins: arkurious (~arkurious@user/arkurious)
[16:05:42] <FromDiscord> <hamidb80> hey
[16:07:28] <FromDiscord> <hamidb80> sent a code paste, see https://play.nim-lang.org/#ix=3tfl
[16:08:35] <FromDiscord> <hamidb80> sent a code paste, see https://play.nim-lang.org/#ix=3tfm
[16:09:30] <FromDiscord> <hamidb80> sent a code paste, see https://play.nim-lang.org/#ix=3tfn
[16:09:31] <FromDiscord> <Rika> need macro
[16:10:08] <FromDiscord> <Rika> i dont exactly know how to get there but it probably involves getting the type of the proc and seeing the return type
[16:14:14] <FromDiscord> <hamidb80> typed macro can help i guees
[16:15:06] <FromDiscord> <Rika> yes
[16:15:06] <FromDiscord> <hamidb80> since it resolves `ident`s to `sym`
[16:15:30] <FromDiscord> <hamidb80> (edit) "`ident`s" => "`ident`"
[16:27:42] <arkanoid> !evan 5/0
[16:27:48] <arkanoid> !eval 5/0
[16:27:49] *** Quits: max22- (~maxime@2a01cb0883359800d1ceed1300bf7a0f.ipv6.abo.wanadoo.fr) (Ping timeout: 246 seconds)
[16:27:51] <NimBot> Compile failed: /usercode/in.nim(1, 2) Error: expression '5 / 0' is of type 'float' and has to be used (or discarded)
[16:27:58] <arkanoid> !eval echp(5/0)
[16:28:01] <NimBot> Compile failed: /usercode/in.nim(1, 1) Error: undeclared identifier: 'echp'
[16:28:08] <arkanoid> :( damn broken keyboard
[16:28:16] <FromDiscord> <Rika> needs fixin
[16:28:25] <FromDiscord> <Rika> !eval echo 5/0
[16:28:28] <NimBot> inf
[16:28:39] <FromDiscord> <Rika> 🤔 not nan?
[16:28:55] <FromDiscord> <Rika> !eval import fenv; echo 5/0
[16:28:58] <NimBot> inf
[16:29:54] <FromDiscord> <Rika> !eval echo 5f64/0f64
[16:29:57] <NimBot> inf
[16:32:40] <FromDiscord> <hamidb80> nan is for 0.0 / 0.0
[16:32:54] <FromDiscord> <hamidb80> !eval echo 0.0/0.0
[16:32:57] <NimBot> nan
[16:33:20] <FromDiscord> <Rika> hm i guess, but then should there not be a divbyzero exc.?
[16:33:39] <FromDiscord> <hamidb80> it should be
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:37] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:37:42] <FromDiscord> <hamidb80> In reply to @hiros "Is GDB really the": take a look at this:↵https://github.com/treeform/hottie
[16:37:45] <fn> <12R2D299> 4GitHub: 7"Sampling profiler that finds hot paths in your code."
[16:58:50] <FromDiscord> <System64 ~ Flandre Scarlet> Do you know what "p" is in the return statement please? It's for interop https://media.discordapp.net/attachments/371759389889003532/865933056866123836/unknown.png
[17:01:18] <FromDiscord> <exelotl> it's a pointer to some memory that was allocated and filled with the contents of the file.
[17:01:26] <FromDiscord> <System64 ~ Flandre Scarlet> ah so P is a pointer?
[17:01:40] <FromDiscord> <leorize> p is that variable p declared above↵(@System64 ~ Flandre Scarlet)
[17:01:42] <FromDiscord> <Rika> yes it shows in `void p`
[17:02:05] <FromDiscord> <System64 ~ Flandre Scarlet> okay so in nim I have to indicate it returns a pointer?
[17:02:13] <FromDiscord> <exelotl> the return type of the function is `char `  which would be `cstring` in Nim
[17:02:23] <FromDiscord> <exelotl> most likely
[17:02:46] <FromDiscord> <System64 ~ Flandre Scarlet> ah yeah I'm dumb lol
[17:02:58] <FromDiscord> <Rika> lol
[17:03:59] <FromDiscord> <System64 ~ Flandre Scarlet> https://github.com/dmitrysmagin/a2t_play/blob/master/src/sdl.c↵But maybe it's a stream of bytes
[17:05:33] <FromDiscord> <System64 ~ Flandre Scarlet> 'cause one char is one byte
[17:05:43] <FromDiscord> <Rika> depends
[17:05:45] <FromDiscord> <System64 ~ Flandre Scarlet> so you can use a cstring as a stream of bytes
[17:05:48] <FromDiscord> <Rika> yes
[17:06:02] <FromDiscord> <Rika> if you explicitly want bytes probably `ptr UncheckedArray[byte]`
[17:06:22] <FromDiscord> <System64 ~ Flandre Scarlet> I'll still return a cstring since it's a cstring
[17:06:40] <FromDiscord> <Rika> In reply to @Rika "if you explicitly want": this is "equivalent" to a cstring though?
[17:07:27] <FromDiscord> <System64 ~ Flandre Scarlet> I think logically yeah
[17:08:36] <FromDiscord> <System64 ~ Flandre Scarlet> yeah it's used as a stream of bytes https://media.discordapp.net/attachments/371759389889003532/865935517489037312/unknown.png
[17:10:17] <FromDiscord> <exelotl> I guess if being pedantic then you could argue a cstring should be an actual null-terminated string and hold text rather than raw data. That said, I do use string and cstring for data most of the time, just cause they're easily available and there's no real downside to using them that way.
[17:11:53] <FromDiscord> <System64 ~ Flandre Scarlet> I guess my interop is done https://media.discordapp.net/attachments/371759389889003532/865936340121813032/unknown.png
[17:12:21] <FromDiscord> <exelotl> awesome :D
[17:12:24] <FromDiscord> <System64 ~ Flandre Scarlet> https://nim-lang.org/docs/backends.html↵Followed that
[17:12:31] <FromDiscord> <Rika> sometimes it is better to be pedantic
[17:12:56] <FromDiscord> <System64 ~ Flandre Scarlet> But now I'll suffer with compilation 'cause WIndows is badly made
[17:13:24] <FromDiscord> <System64 ~ Flandre Scarlet> why the fck Microsoft you didn't do a lib folder or dunno what like Linux???
[17:13:48] <FromDiscord> <System64 ~ Flandre Scarlet> On Linux AAALLLL your libs are in one place
[17:13:57] <FromDiscord> <Rika> because windows isnt programmer-first
[17:14:33] <FromDiscord> <System64 ~ Flandre Scarlet> Linux too I guess?↵I meant, Ubuntu or Mint for exemple are for all people
[17:15:40] <FromDiscord> <Rika> yes but they inherit from linux (and didnt change the fs structure because that would be a massive pain) and linux inherits from unix therefore
[17:15:53] <FromDiscord> <System64 ~ Flandre Scarlet> yeah true
[17:16:11] <FromDiscord> <System64 ~ Flandre Scarlet> but I think Microsoft should put efforts for devs
[17:16:53] <FromDiscord> <Rika> wsl
[17:17:45] <FromDiscord> <System64 ~ Flandre Scarlet> it's still Linux so if you compile from there, you compile for Linux
[17:17:59] <FromDiscord> <System64 ~ Flandre Scarlet> I might got wrong but I think you compile for Linux
[17:18:16] <FromDiscord> <Rika> yes indeed
[17:18:23] <FromDiscord> <Rika> do you need to run this on windows?
[17:18:30] <FromDiscord> <System64 ~ Flandre Scarlet> yeah it's for my game
[17:18:46] <FromDiscord> <Rika> i dont know windows too much so gl lol
[17:18:56] <FromDiscord> <System64 ~ Flandre Scarlet> and also, Windows is the most used operating system so Windows has priority for me
[17:19:15] <FromDiscord> <System64 ~ Flandre Scarlet> I don't reject Linux, I love Linux, but to hit more people I need Windows first
[17:19:22] <FromDiscord> <Rika> wasnt gonna say anything about that
[17:19:35] <FromDiscord> <System64 ~ Flandre Scarlet> My secondary PC runs Arch btw
[17:19:43] <FromDiscord> <System64 ~ Flandre Scarlet> (well Archcraft in fact)
[17:20:21] <FromDiscord> <System64 ~ Flandre Scarlet> and no, it's not as unstable as most of people think
[17:22:51] <arkanoid> I need to define "func foo[M, T](callback: proc(value: T): M[T])" but compiler says "Error: no generic parameters allowed for M". How would you workaround this?
[17:23:51] <FromDiscord> <haxscramper> We dont' have HKT
[17:24:09] <FromDiscord> <haxscramper> There is no sane workaround IIRC
[17:24:44] <arkanoid> didn't even realize I was touching that subject
[17:24:49] <FromDiscord> <haxscramper> And I don't think there is any hack that would be barely usable either
[17:25:06] <FromDiscord> <haxscramper> `M[T]`
[17:25:07] <FromDiscord> <haxscramper> If I'm not mistaken this is a HKT
[17:25:55] <arkanoid> possibly, yes
[17:27:58] <arkanoid> General question: if I have "type MyType[A]",  what is MyType and what is MyType[int] when reading the documentation?
[17:28:17] <arkanoid> MyType is a type? Is a generic type? MyType[int] is a real type?
[17:31:10] <FromDiscord> <haxscramper> You mean when `MyType` is used like foo/bar?
[17:31:21] <FromDiscord> <haxscramper> Otherwise it depends on context of course
[17:31:50] <FromDiscord> <haxscramper> `MyType` is a name of the type, `MyType[int]` is a concrete specialization that might have some additional semantics
[17:36:02] <arkanoid> is it possible to extract type "int" from type "MyType[int]" in a template?
[17:38:54] <arkanoid> got it, is https://nim-lang.org/docs/typetraits.html#genericParams.t%2Ctypedesc
[17:42:18] <arkanoid> no, it's not working as expected
[17:44:08] <arkanoid> eval! import typetraits; type Foo[T] = object; func bar[A]() = echo genericParams(A); bar[Foo[int]]
[17:44:51] <arkanoid> eval! import typetraits; type Foo[T] = object; func bar[A]() = echo genericParams(A); bar[Foo[int]]()
[17:45:19] <FromDiscord> <haxscramper> you can't declare function and use it in one lien
[17:45:31] <FromDiscord> <haxscramper> `; bar[Foo[int]]` is a part of the function
[17:47:12] <arkanoid> https://play.nim-lang.org/#ix=3tfK
[17:47:44] <FromDiscord> <hiros> For those with experience with gdscript, how different is gdscript from nim? Because both nim and gdscript are python like.
[17:48:13] <arkanoid> but this one works correcly, just by avoiding generic parameter: https://play.nim-lang.org/#ix=3tfL
[17:52:20] <FromDiscord> <haxscramper> Last time I tried to make something meaningful with `genericParams` it was complete and horrible mess of hacks around hacks around random compiler crashes
[17:52:44] <FromDiscord> <haxscramper> So before you go into this I warn you - most likely it will be 95% frustration
[17:52:53] <FromDiscord> <haxscramper> 4% maybe things working
[17:53:25] <FromDiscord> <haxscramper> And 1% of useful knowledge that yes, you can in fact do something with it, sometimes, in simple cases
[17:56:13] <arkanoid> yeah I do know I'm walking on quicksand, but is still just a toy project around monads: now trying to unittest the 3 basic monad laws via generic template
[17:56:18] <FromDiscord> <hiros> Is there a GUI IDE for nim you recommend that has stuff like graphical profiling and the like?
[17:56:19] <arkanoid> this works https://play.nim-lang.org/#ix=3tfL
[17:57:30] <FromDiscord> <Rika> In reply to @hiros "Is there a GUI": a gui for gdb (gdbgui) works well enough. otherwise not really
[17:59:40] *** Joins: SebastianM (~seba@user/sebastianm)
[18:00:29] <arkanoid> a template without params but just type params has to be called without()!?
[18:01:20] <arkanoid> If I change "bar[Foo[int]]" in "bar[Foo[int]]()" int https://play.nim-lang.org/#ix=3tfL it doesn't work
[18:01:42] <FromDiscord> <Rika> what?
[18:02:19] <FromDiscord> <Rika> can you say that again, the bridge mangled it
[18:02:25] *** Joins: aeverr (~deodex@ai126146253007.53.access-internet.ne.jp)
[18:03:11] <FromDiscord> <Rika> arkanoid mind saying that again?
[18:03:43] <arkanoid> Rika, sure. Please open "https://play.nim-lang.org/#ix=3tfL" and run it, then change last line and add "()" at the end if it, it doesn't work anymore
[18:03:50] <FromDiscord> <Bung> @haxscramper how is the example yesterday you talk about ?
[18:04:09] <arkanoid> I might be just getting confused by generics+templating
[18:04:11] <aeverr> arkanoid, so you mean bar()()?
[18:04:55] <arkanoid> aeverr: no, I mean replace "bar[Foo[int]]" with "bar[Foo[int]]()"
[18:05:12] <FromDiscord> <konsumlamm> there is no "bar[Foo[int]]" in your code
[18:05:18] <aeverr> had the wrong link open
[18:05:23] <aeverr> wait i didnt??
[18:05:33] *** Joins: max22- (~maxime@2a01cb08833598009f0c47c143d42484.ipv6.abo.wanadoo.fr)
[18:05:33] <FromDiscord> <haxscramper> You need it literally now or this can wait?↵(@Bung)
[18:05:39] <aeverr> i think you have the wrong link
[18:05:56] <arkanoid> oh! wait, you're right, my browser cache went nuts. 1 secs 
[18:06:15] <FromDiscord> <Bung> wait for api I can call with args directly😄
[18:06:23] <arkanoid> https://play.nim-lang.org/#ix=3tfM
[18:07:08] <aeverr> seems like a bug
[18:07:21] <aeverr> you can add () if you make the template say `echo genericParams(type M)`
[18:07:44] <aeverr> its kind of odd but i think its consistent 
[18:08:39] <arkanoid> well it really seems that templates can be called without parethesis: https://play.nim-lang.org/#ix=3tfN
[18:11:44] <arkanoid> aeverr: if I change genericParams(M) to genericParams(type M) I get a different result. With the first one from "Foo[int]" I get (int,), with the second with same input I get (Foo[system.int],)
[18:11:56] <aeverr> huh true
[18:12:04] <arkanoid> I need to extract generic param, so second version is not correct
[18:12:08] <aeverr> i get why
[18:12:18] <aeverr> because it becomes typedesc[Foo[int]]
[18:12:26] <aeverr> okay so hm then its probably a bug
[18:13:01] <aeverr> wait
[18:13:04] <aeverr> that doesnt make sense
[18:13:12] <aeverr> genericParams takes a typedesc
[18:13:19] <aeverr> so that should totally work
[18:14:06] <arkanoid> also I'm failing to save the result of genericParams to a variable: "let myvar = genericParams(M)" result in "Error: invalid type: 'type (float,)' for let"
[18:14:43] <aeverr> https://play.nim-lang.org/#ix=3tfQ stranger way to do this
[18:14:49] <arkanoid> well, I'm not expecting to get a lot from this, haxscramper has already warned me that I was going into the rabbit hole
[18:15:20] <aeverr> you cannot store the result i assume because it is a tuple of types
[18:17:22] <arkanoid> but if I try to use the genericParams(M)[0] as a type like in "let bar: genericParams(M)[0]" I'm getting "Error: type expecte"
[18:17:50] *** Quits: Vladar (~Vladar@46.162.2.53) (Remote host closed the connection)
[18:20:02] <FromDiscord> <hiros> Nim isn't putting the C file where I'm telling it to.
[18:20:46] <aeverr> arkanoid thats because it's a type, i just discovered. `(int, )` is a type referring to a tuple with one int i believe
[18:21:00] <aeverr> yup indeed it is
[18:21:13] <FromDiscord> <haxscramper> `--nimcache:your/cache/directory`↵(@hiros)
[18:21:15] <aeverr> you can use `get` in typetraits as well
[18:21:32] <aeverr> so `let bar: genericParams(M).get(0)`
[18:23:02] <arkanoid> aeverr: it works! thanks
[18:23:17] <FromDiscord> <hiros> Thanks @haxscramper that worked.
[18:23:18] <aeverr> nice
[18:23:37] <aeverr> btw im rika i switched to irc just to check the thing you said w/o the bridge fucking shit
[18:26:32] <arkanoid> if you replace "template" with "proc" in https://play.nim-lang.org/#ix=3tfT a "Error: internal error: /build/Nim/compiler/semtypes.nim(1900, 26)" is reached
[18:26:46] <arkanoid> not a real deal
[18:27:54] <FromDiscord> <Rika> its an internal error
[18:28:00] <FromDiscord> <Rika> so its prolly a bug
[18:28:14] <FromDiscord> <Rika> either already in an issue or needs to be made an issue
[18:28:18] <arkanoid> what's the difference between "typedescr" and "typed" in template parameters, both seems to work for my playground
[18:29:40] <arkanoid> possibly this error https://github.com/nim-lang/Nim/issues/16600
[18:29:47] <aeverr> typedesc is a type, typed is an expression
[18:30:05] <aeverr> "type description", "typed code"
[18:34:27] <FromDiscord> <konsumlamm> sometimes i feel like some parts of Nim are just horribly broken beyond any hope of repair
[18:35:21] <arkanoid> konsumlamm, it's the same boundary I'm trying to touch before using nim in production
[18:36:39] <arkanoid> yet for now I feel it is the most advanced system languages I know
[18:37:27] <FromDiscord> <konsumlamm> well, there aren't that many systems languages to begin with :P
[18:37:50] <FromDiscord> <konsumlamm> Rust's type system is also quite advanced, even more in some areas, but less in others
[18:37:57] <arkanoid> I can compile successfully "var x: genericParams(M).get(0)", but I don't want to type "var x: genericParams(M).get(0)" every time, but how can I define such a temporary type?
[18:38:33] <FromDiscord> <konsumlamm> `type MyType = genericParams(M).get(0)`?
[18:42:00] *** Quits: SebastianM (~seba@user/sebastianm) (Ping timeout: 255 seconds)
[18:42:52] <arkanoid> yeah, it worked
[18:43:20] <arkanoid> quite sure I tried that first ....
[18:43:28] <FromDiscord> <hiros> Whenever I use gdb and type l or list, it says a nim file that I certainly have doesn't exist.
[18:43:58] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Ping timeout: 246 seconds)
[18:57:16] <FromDiscord> <System64 ~ Flandre Scarlet> why insigned char? char is always insigned no? https://media.discordapp.net/attachments/371759389889003532/865962863318007878/unknown.png
[19:01:59] *** Joins: SebastianM (~seba@user/sebastianm)
[19:02:18] <arkanoid> I really do need to find good examples of the differences and uses of "T: type", "T: typed" and "T: typedesc" inside proc/templates
[19:06:40] <arkanoid> the first (T: type params) seems just sugar for generics 
[19:07:05] <arkanoid> typed is a thing for templates, but typedesc puzzles me
[19:08:36] <FromDiscord> <Rika> chars can be signed in C
[19:19:53] <FromDiscord> <hiros> I don't think gdb with nim works on windows.
[19:20:45] <FromDiscord> <System64 ~ Flandre Scarlet> In reply to @Rika "chars can be signed": ah alright
[19:20:56] <FromDiscord> <System64 ~ Flandre Scarlet> so the equivalent in nim?
[19:21:05] <FromDiscord> <System64 ~ Flandre Scarlet> uInt8?
[19:21:48] <FromDiscord> <System64 ~ Flandre Scarlet> ah ptr uInt8 yeah
[19:26:06] *** Quits: SebastianM (~seba@user/sebastianm) (Ping timeout: 255 seconds)
[19:28:56] <FromDiscord> <System64 ~ Flandre Scarlet> I have to put the compile pragma before each proc? https://media.discordapp.net/attachments/371759389889003532/865970833050042368/unknown.png
[19:30:25] <FromDiscord> <Rika> no
[19:32:53] <FromDiscord> <System64 ~ Flandre Scarlet> ah alright
[19:38:34] <arkanoid> is it possible to loop base types at compile time and run a generic/type arg function for all of them?
[19:45:22] *** Quits: systemdsucks (~systemdsu@user/systemdsucks) (Ping timeout: 268 seconds)
[19:45:22] *** Quits: blackbeard420 (~blackbear@blackbeard420.me) (Ping timeout: 268 seconds)
[19:45:29] *** Joins: blackbeard420_ (~blackbear@2600:3c03:e000:297::)
[19:45:30] *** Joins: systemdsucks (~systemdsu@user/systemdsucks)
[19:48:11] <FromDiscord> <System64 ~ Flandre Scarlet> I imported a module but I have no suggestions, is it normal? https://media.discordapp.net/attachments/371759389889003532/865975674031964208/unknown.png
[19:50:23] <FromDiscord> <Rika> you have to start typing wdym
[19:52:48] <FromDiscord> <System64 ~ Flandre Scarlet> yeah what I did
[19:52:51] <fn> <11ForumUpdaterBot99> New thread by Geohuz: Problem of run procedure with interval and stop the running , see https://forum.nim-lang.org/t/8238
[19:53:04] <FromDiscord> <System64 ~ Flandre Scarlet> nothing https://media.discordapp.net/attachments/371759389889003532/865976907592761354/unknown.png
[20:01:25] <FromDiscord> <System64 ~ Flandre Scarlet> t doesn't suggest anything
[20:01:58] <FromDiscord> <Rika> nimsuggest probably died again then
[20:02:03] <FromDiscord> <SolitudeSF> damn, that sucks...
[20:03:27] <FromDiscord> <System64 ~ Flandre Scarlet> Even worse, it displays an error but my proc exists https://media.discordapp.net/attachments/371759389889003532/865979516311961661/unknown.png
[20:04:33] <FromDiscord> <Rika> might not be exported
[20:04:33] <FromDiscord> <Rika> lol
[20:04:38] <FromDiscord> <Rika> i just checked your old image
[20:04:41] <FromDiscord> <Rika> indeed not exported
[20:04:57] <FromDiscord> <System64 ~ Flandre Scarlet> what should I do?
[20:05:21] <FromDiscord> <Rika> in the file with compile
[20:05:37] <FromDiscord> <Rika> add a `` before the parentheses of each proc
[20:05:52] <FromDiscord> <SolitudeSF> read tutorial
[20:08:03] <FromDiscord> <System64 ~ Flandre Scarlet> Aaaah yeah sorry
[20:29:39] <FromDiscord> <generic linux user> In reply to @ElegantBeef "If you just need": i dont need anything , it just some input to know what switch(block) to go for , so if char does use less memeory
[20:31:01] <FromDiscord> <generic linux user> and it does work tho
[20:31:14] <FromDiscord> <generic linux user> just asked if it was better than using int
[20:34:05] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[21:01:19] <fn> <11ForumUpdaterBot99> New question by georgehu: implementing setInterval/clearInterval in nim, see https://stackoverflow.com/questions/68422361/implementing-setinterval-clearinterval-in-nim
[21:41:04] <arkanoid> I have myproject.nim and myproject.nims in the same folder. the nims file contains only 'switch("define", "ssl")' only and I'm compiling the .nim file with vscodium (pressing F6). The nims file seems not parsed. Docs says "A project can also have a project specific configuration file named $project.nims that resides in the same directory as $project.nim."
[21:42:49] <arkanoid> this is the line executed by vscodium "nim c -r "/home/arkanoid/nim/experiments/myproject.nim""
[21:45:25] <arkanoid> If I rename myproject.nims into config.nims it works correctly
[21:45:43] <arkanoid> is this page updated? https://nim-lang.org/docs/nims.html
[21:58:55] *** Quits: max22- (~maxime@2a01cb08833598009f0c47c143d42484.ipv6.abo.wanadoo.fr) (Ping timeout: 246 seconds)
[22:07:47] <FromDiscord> <SolitudeSF> arkanoid, works on my machine
[22:08:23] <arkanoid> classic
[22:10:24] <FromDiscord> <SolitudeSF> does compiler output hint `used config file myproject.nims`?
[22:13:13] <FromDiscord> <Rika> prolly has to be in the same pwd
[22:14:14] <FromDiscord> <SolitudeSF> no
[22:14:23] <arkanoid> no it doesn't output that
[22:14:53] <fn> <06Prestige99> weird, I thought it did 🤔
[22:19:08] <FromDiscord> <haxscramper> It does, but at verbosity\:3 and hints enabled
[22:19:27] <FromDiscord> <generic linux user> :3 <- why this tho
[22:20:24] <FromDiscord> <timotheecour> `--hint:conf`
[22:21:25] <FromDiscord> <aleclarson> sent a code paste, see https://play.nim-lang.org/#ix=3thW
[22:22:11] <FromDiscord> <SolitudeSF> {.discardable.}
[22:22:30] <arkanoid> I've another problem with httpclient: Error: unhandled exception: error:14094410:SSL routines:ssl3_read_bytes:sslv3 alert handshake failure [SslError]
[22:22:48] <FromDiscord> <generic linux user> sslerror
[22:22:49] <arkanoid> same url opens correctly with: browser/openssl -s client/curl
[22:22:56] <FromDiscord> <generic linux user> i have it too
[22:23:05] <FromDiscord> <generic linux user> in nimble
[22:30:34] <arkanoid> I've solved the problem by lowering the SSL cypher levels in SSL context (probably connecting to old site)
[22:30:47] <arkanoid> let sslContext = newContext(protVersion = protSSLv23, verifyMode = CVerifyPeer, CiphersOld)
[22:30:55] <arkanoid> https://nim-lang.org/docs/ssl_config.html#CiphersOld
[22:35:40] <arkanoid> sorry, pasted incomplete line: let sslContext = newContext(protVersion = protSSLv23, verifyMode = CVerifyPeer, cipherList = CiphersOld)
[22:36:38] <FromDiscord> <dom96> interesting, can you add this trick to our docs? 🙂
[23:10:24] <arkanoid> dom96 is not really a trick, when you have to deal with outdated TLS sockets it's quite common to have to "downgrade" cipher level
[23:19:30] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f) (Ping timeout: 240 seconds)
[23:30:26] <FromDiscord> <dom96> still, might be worth to add it in so that this problem is searchable
[23:42:05] <FromDiscord> <hamidb80> اثغ
[23:42:07] <FromDiscord> <hamidb80> hey
[23:42:20] <FromDiscord> <hamidb80> can i raise custom exception with custom fields?
[23:42:57] <FromDiscord> <haxscramper> yes,
[23:43:09] <FromDiscord> <haxscramper> `YourException = object of CatchableError`
[23:43:51] <FromDiscord> <hamidb80> ok how to raise it ( and fill those cutom fields)?
[23:44:08] <FromDiscord> <hamidb80> `newException` seems not useful
[23:44:10] <FromDiscord> <hamidb80> here
[23:44:22] <FromDiscord> <haxscramper> Write a constructor for your exception
[23:44:28] <FromDiscord> <theangryepicbanana> don't you use `raise YourException()`
[23:44:30] <FromDiscord> <theangryepicbanana> lol
[23:44:40] <FromDiscord> <haxscramper> Or do `var exception = newException(YourException, msg)`
[23:44:49] <FromDiscord> <haxscramper> Then set necessary fields
[23:44:55] <FromDiscord> <hamidb80> thanks
[23:45:32] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3til
[23:45:47] <FromDiscord> <haxscramper> Your constructor must return `ref` type, but it is better to define exception as non-ref type
[23:46:14] <FromDiscord> <haxscramper> `newException` internally doers `(ref ErrType)(msg: "text")`
[23:47:56] <FromDiscord> <hamidb80> +1
[23:48:25] <FromDiscord> <haxscramper> if you want to know more concrete timeline - I started working on the example for nimscripter, @Bung
[23:49:27] <FromDiscord> <haxscramper> Though it looks like `Error: illformed AST:` will drive my crazy earlier
