[00:13:13] <johnny> TheGuestMovie, what's worse is when they come out of school not knowing anything about version control! :(
[00:24:02] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[00:24:08] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[00:26:32] <computerquip> At least on Windows, I can understand why statically linking ICU might make sense.
[00:26:58] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[00:26:59] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[00:27:10] <computerquip> That'll eventually change since Windows has started shipping a version of ICU but it'll take awhile to become the de facto.
[00:28:29] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[00:32:30] *** Joins: metabulation (~wootehfoo@user/wootehfoot)
[00:34:01] *** Quits: metabulation (~wootehfoo@user/wootehfoot) (Remote host closed the connection)
[00:35:11] *** Quits: SuperNintendoSUX (~sjw@69.206.48.64) (Remote host closed the connection)
[00:35:27] <AmR> TinoDidriksen: configure: error: Namespace support is required to build ICU.
[00:36:24] *** Joins: SuperNintendoSUX (~sjw@69.206.48.64)
[00:36:24] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[00:36:27] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[00:37:12] <TinoDidriksen> AmR, change U_USING_ICU_NAMESPACE to 1
[00:37:27] <TinoDidriksen> U_USING_ICU_NAMESPACE=0 is for older versions of ICU.
[00:39:01] *** Quits: jokoon (~eio@37.164.92.44) (Quit: Leaving)
[00:39:03] <johnny> they ship icu, but not the nice C++ api afaik computerquip ?
[00:39:18] <johnny> maybe i misuderstood
[00:39:57] <TinoDidriksen> Windows 10's ICU is also using another header and library structure, which is not ideal. But even so, dynamic link that.
[00:40:14] <johnny> that's all fin and good, but i still want the C++ api
[00:42:48] <AmR> the same error
[00:43:53] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 264 seconds)
[00:44:45] <johnny> do you think they will ever make the C++ api buildable separately?
[00:44:46] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[00:45:04] <johnny> or is it somehow possible now?
[00:46:58] *** Quits: TheGuestMovie (~TheGuestM@173.231.114.74) (Quit: Client closed)
[00:54:28] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[00:57:23] *** Quits: proller (~p@2a02:6b8:b081:1205::1:17) (Ping timeout: 264 seconds)
[00:57:30] <computerquip> I'd be surprised if there wasn't some way to get it to work.
[00:57:38] <computerquip> Well... maybe not *too* surprised.
[00:59:39] <computerquip> ... maybe not, seems that's how ICU was designed. The C API is a wrapper over the C++ API I guess.
[01:00:32] <computerquip> https://unicode-org.github.io/icu/userguide/icu4c/build.html#icu-as-a-system-level-library
[01:04:53] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.3)
[01:04:54] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[01:09:15] <computerquip> I can't tell if Boost Locale would work there or not... well this is depressing.
[01:12:06] <computerquip> Seems like it would... unfortunately, doesn't provide string types, etc. though.
[01:13:50] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[01:17:12] *** Joins: markong (~kvirc@213.146.188.203)
[01:19:03] <AmR> I can't get out off this error :(
[01:27:02] <TinoDidriksen> Why do you want to build ICU yourself? Why not use a package manager?
[01:27:42] *** Joins: proller (~p@2a02:6b8:b081:8805::1:11)
[01:28:17] <TinoDidriksen> This is great for cross-building using MinGW: https://github.com/mxe/mxe
[01:30:49] *** Joins: ShiftyLogic (~shiftylog@66.115.146.16)
[01:30:58] *** Joins: ShiftyLo_ (~shiftylog@66.115.146.16)
[01:35:56] *** Quits: ShiftyLogic (~shiftylog@66.115.146.16) (Ping timeout: 245 seconds)
[01:36:30] *** Quits: ShiftyLo_ (~shiftylog@66.115.146.16) (Ping timeout: 260 seconds)
[01:37:07] *** Quits: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz) (Remote host closed the connection)
[01:37:19] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:37:27] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:37:27] *** ChanServ sets mode: +v npaperbot
[01:40:46] *** Quits: HvszrStykp (~X@81.171.62.81) (Ping timeout: 252 seconds)
[01:42:37] <johnny> why would one want to use mingw on windows if one doesn't necessarily care about free software in a particular way? that's what i'm not sure of
[01:43:23] <johnny> it's probably also packaged via vcpkg tho
[01:46:14] *** Quits: proller (~p@2a02:6b8:b081:8805::1:11) (Ping timeout: 260 seconds)
[01:47:28] <TinoDidriksen> It's absolutely in vcpkg.
[01:51:55] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:7411:242:32c0:bf72) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[01:56:18] *** Quits: mitch0 (~mitch@193-110-63-186.cable-modem.hdsnet.hu) (Remote host closed the connection)
[01:56:18] *** Quits: baltazar (~baltazar@193-110-63-186.cable-modem.hdsnet.hu) (Remote host closed the connection)
[01:57:42] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[01:59:31] *** Joins: proller (~p@80.240.216.69)
[02:00:20] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 246 seconds)
[02:02:37] *** Joins: baltazar (~baltazar@193-110-63-186.cable-modem.hdsnet.hu)
[02:02:37] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[02:11:26] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[02:13:17] *** Quits: emerent (~quassel@p200300cd57485531ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[02:13:33] *** Joins: emerent (~quassel@p200300cd5748553bba27ebfffed28a59.dip0.t-ipconnect.de)
[02:21:16] *** Joins: TheGuestMovie (~TheGuestM@173.231.114.74)
[02:30:20] *** Joins: gggpkm (~gggpkm@123.113.182.112)
[02:37:19] *** Guest502 is now known as wasd
[02:37:49] *** wasd is now known as Guest9535
[02:41:06] *** Quits: Guest9535 (~wasd@100.101.7.51.dyn.plus.net) (Changing host)
[02:41:06] *** Joins: Guest9535 (~wasd@user/axis)
[02:41:36] *** Guest9535 is now known as wasd
[02:54:42] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[02:55:01] *** Quits: hesse (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[02:57:02] *** Joins: X-Scale` (~ARM@50.77.166.178.rev.vodafone.pt)
[02:57:23] *** Quits: X-Scale (~ARM@83.223.251.139) (Ping timeout: 264 seconds)
[02:58:55] *** X-Scale` is now known as X-Scale
[03:05:03] *** Joins: pull (~tcz@91.150.165.88)
[03:06:09] *** Quits: ethrl (uid524335@user/doforlove33) (Quit: Connection closed for inactivity)
[03:27:12] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[03:27:44] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[03:30:10] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[03:30:17] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 246 seconds)
[03:30:31] *** Quits: ARoxdale (~ARoxdale@84.203.31.229) (Ping timeout: 245 seconds)
[03:38:39] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[03:46:17] *** Quits: gggpkm (~gggpkm@123.113.182.112) (Read error: Connection reset by peer)
[03:46:46] *** Joins: HvszrStykp (~X@81.171.62.81)
[03:49:55] *** Joins: Fairy (~Fairy@ti0004a400-4356.bb.online.no)
[03:52:28] *** Quits: Fairy97 (~Fairy@2001:464a:4992:0:dd95:968b:982e:1ba9) (Ping timeout: 260 seconds)
[03:52:46] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 260 seconds)
[03:54:44] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:59:16] *** Joins: ARoxdale (~ARoxdale@84.203.31.229)
[04:01:36] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[04:02:07] *** Quits: Skyfire (~pyon@user/pyon) (Quit: brb)
[04:02:30] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[04:02:35] *** Joins: Skyfire (~pyon@user/pyon)
[04:05:11] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 264 seconds)
[04:19:41] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.3)
[04:23:54] *** Quits: pull (~tcz@91.150.165.88) (Quit: Czesc)
[04:34:53] *** Joins: ferdna (~ferdna@user/ferdna)
[04:35:37] <computerquip> mingw is also the primary linux->windows cross compiler
[04:40:26] *** Quits: DSpider (~DSpider@82.79.237.121) (Quit: Leaving)
[04:42:05] *** Quits: paule32 (~paule32@user/paule32) (Ping timeout: 260 seconds)
[04:55:54] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[04:56:32] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[05:14:59] *** Joins: euouae (~euouae@user/euouae)
[05:24:52] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[05:31:50] <johnny> i'm just letting the maintainer do it via his windows machine since he primarily develops there + plus github actions with msvc
[05:37:20] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:37:27] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:37:27] *** ChanServ sets mode: +v npaperbot
[05:39:06] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[05:57:16] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[06:09:09] <computerquip> https://docs.google.com/document/d/e/2PACX-1vRZr-HJcYmf2Y76DhewaiJOhRNpjGHCxliAQTBhFxzv1QTae9o8mhBmDl32CRIuaWZLt5kVeH9e9jXv/pub <- interesting read by google concerning safer usage of C++
[06:10:00] <computerquip> johnny, personally, I don't like cross-compiling. Cross-compiling usually means you don't have an instance of the platform that it's mean to be run on which means you can't run tests anyways.
[06:10:28] <computerquip> There's usually trade offs as well. Like building with msvc is important for ucrt support. Using the VC++ debugger is also a nice bonus.
[06:10:46] <johnny> somethines you just have to though, it's not like i can run tests on my embedded board without flashing it easily
[06:10:46] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[06:11:08] <johnny> so the tests run once its flashed, not before
[06:11:20] <computerquip> Indeed. I was mostly referring to the three big desktops, embedded devices are always special.
[06:11:42] <johnny> well you can probably run it easily enough in wine if building from linux
[06:11:51] <johnny> but i suppose you could also perhaps force msvc to work there as well
[06:12:47] <johnny> i think visual studio makes it easy to build for linux somewhat now maybe with wsl? i think i read something like that
[06:12:51] <computerquip> Not an ideal scenario. Wine isn't perfect and getting the msvc environment setup on Linux is no joke. Plus running your application in Wine isn't indicative of how it might run on the native platform, having two different implementations and all.
[06:13:13] <johnny> it's probably fine as long as you do also test it separately on a real machine
[06:13:20] <johnny> like via CI
[06:13:39] <computerquip> Windows -> Linux is easy. Linux -> Windows is harder.
[06:14:03] <computerquip> Then Mac -> anything and anything -> Mac is borderline impossible.
[06:14:06] <johnny> it of course depends on the complexity of your application
[06:15:01] <johnny> cli apps for and from mac aren't that hard as long as it also works on freebsd
[06:15:31] <johnny> and how many freakin uhmm whaotever those foundation apis are called when going TO mac
[06:15:42] <computerquip> You know some secret I don't then.
[06:16:04] <johnny> well if you're using those core apis, it's probably pretty hard. i've only deal with that for bluetooth apis
[06:16:21] <johnny> i've never done gui stuff for mac ever
[06:16:39] <computerquip> Also, stuff like MSI packaging can't be done cross-platform. So that ends up also being problematic.
[06:16:55] <johnny> well it's probably best not to package on your own machines anyways
[06:17:19] <johnny> less chance is accidentally including garbage in your final build
[06:17:55] <johnny> i haven't actually packaged anything for windows in awhile, but can't nsis do it?
[06:18:18] <johnny> is nsis even still alive?
[06:18:51] <johnny> a long time ago i cross compiled pidgin for windows and i think it did an nsis installer
[06:19:06] <computerquip> Yeah, NSIS can be done cross-platform but it's a bit different.
[06:19:32] <euouae> computerquip that's a good article
[06:20:45] <computerquip> Yeah, I found it interesting. The cyclone language and the CCured paper is also an interesting read.
[06:22:17] *** Joins: The_Jag (~The_Jag@host-82-56-115-92.retail.telecomitalia.it)
[06:25:35] *** Quits: The_Jag_ (~The_Jag@host-79-32-14-38.retail.telecomitalia.it) (Ping timeout: 264 seconds)
[06:30:55] *** Joins: great_taste (~great_tas@190.32.235.20)
[06:31:01] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[06:32:10] <euouae> computerquip: yeah! There's also ivory lang,  but cyclone seems to have more features.
[06:32:27] <euouae> On the other hand, perhaps ivory has stronger guarantees
[06:33:15] <computerquip> Cyclone in particular is meant to be mostly compatible with C though, with minor required changes (also, Cyclone isn't supported anymore and the developers basically recommend using Rust).
[06:36:11] <euouae> computerquip I know that Rust guarantees some things, but there's probably features that it is also missing, right? I'm thinkign of memory zeroization for example. For a password. Can that be "guaranteed" in rust??
[06:38:06] <computerquip> I'd be surprised if it didn't. But in particular, C++ has a hard time with this as well. You end up either needing to implementing your own memcpy using a volatile pointer or you use something like memcpy_s or ZeroMemory
[06:38:35] <computerquip> Otherwise, memcpy can end up turning into a no-op if the optimizer sees you don't use the result, thus leaving memory in the buffer.
[06:39:03] <euouae> lol
[06:39:53] <computerquip> Also, there's other trap doors as well. Like trying to clear an std::string.
[06:40:49] <computerquip> You can end up with design flaws like this that seem safe but aren't: https://github.com/microsoft/wil/issues/159
[06:41:05] <euouae> there's also explicit_bzero
[06:41:40] <computerquip> Also, even *then*, it's not that simple, as explained here: https://github.com/microsoft/STL/issues/295#issuecomment-749165553
[06:41:50] <euouae> lol
[06:41:57] <euouae> you seem familiar with this problem computerquip
[06:42:24] <computerquip> Maybe ;)
[06:42:28] <euouae> I'm interested in sharpening my skills with writing secure code. I'm looking more into Haskell myself, but I guess maybe I should be looking into Rust instead?
[06:43:02] *** Quits: ARoxdale (~ARoxdale@84.203.31.229) (Ping timeout: 260 seconds)
[06:45:30] <euouae> It's a good point though "What's your threat model?". Some of the mitigations I'm imagining (such as zeroization) may be simply the same sort of mistake as "premature optimizations"...
[06:45:59] <computerquip> It's a Good Enough(TM) measure usually.
[06:47:05] <computerquip> I don't think you have to look at Rust for more secure code. You can right secure code in C++ with some care and tooling.
[06:47:11] <computerquip> write secure*
[06:47:47] <euouae> If I were to go the Haskell way, it'd be some transpiler into C or something of the sort
[06:48:08] <euouae> with Rust, it stands on its own, but C++, I'm not sure. I think people would prefer C for a crypto-related library
[06:48:11] *** Joins: peeps[zen] (~peepsalot@openscad/peepsalot)
[06:49:35] *** Quits: peepsalot (~peepsalot@openscad/peepsalot) (Ping timeout: 264 seconds)
[06:49:52] <computerquip> Well, if OpenSSL is any indication, it's an awful choice of language.
[06:50:38] <computerquip> They ended up having to create their own pre-processor, ended up with ASN1 types encoded in some goofy macros that ended up looking like a meta-language of their own, and it's ridiculously hard to use correctly.
[06:51:38] <euouae> it's so insane that the open source crypto libraries are all so crazy
[06:52:31] <computerquip> I don't think libsodium is that bad, but it's not as feature-complete as OpenSSL.
[06:53:23] <computerquip> Which is a good thing in my opinion, it has a particular way you should do things. But it doesn't do things like TLS either unfortunately.
[06:53:59] <euouae> yeah I guess TLS is the big money right
[06:54:23] <euouae> IDK. Maybe it's all for nothing. I feel defeated
[06:54:47] <johnny> we go all these fuzzers and other tooling that should help you make some decisions about wheter that zeroization matters right?
[06:55:18] <euouae> Can you mention some of these tool names johnny?
[06:55:32] <johnny> and lol.. you could also do the thing where you say "This is the most secure thing ever" just to piss off enough smart security researchers to prove you wrong
[06:56:27] <johnny> security's not my forte in that regard. that's just the impression that i got when reading through other stuff
[06:56:44] <johnny> most of the security stuff i deal with is on a much higher level , like related to web applications
[06:57:10] <johnny> it just happens that i run into other stuff sometimes due to the fact that the servers and of course things like openssl aren't written in those higher level languages, but are still relevant for security purposes
[06:57:29] <johnny> although the best i could personally do is just stay patched, or say. disable http compression when that was a problem
[06:58:21] <johnny> euouae, i would say that one benefit of rust or even relying on llvm based tooling for C++ is that you can do all sort sorts of neat stuff when you can mess with the IR
[06:58:33] <euouae> IR?
[06:58:42] <computerquip> From a high-level perspective, as long as you understand asymmetric vs symmetric keys, one way hashing, and how a how a chain of trust works, that's 90% of your required knowledge.
[06:58:47] <johnny> we haven't seen this sort of explosion in cross platform and non IDE specific tooling until clang
[06:59:11] <johnny> euouae, intermediate representation
[06:59:27] <computerquip> The rest you should leave up to libraries that implement specific standards.
[06:59:59] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[07:00:06] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 245 seconds)
[07:00:14] <euouae> https://docs.rs/zeroize/1.4.2/zeroize/#zeroizingz-wrapper-for-zeroizing-arbitrary-values-on-drop
[07:00:22] <euouae> ^ This is one example. The zeroization happens here
[07:00:29] <johnny> euouae, so with clang, it goes from your code -> the preprocessor -> the compiler -> the llvm ir -> and then whatever steps to turn into machien code
[07:00:53] <johnny> rust does the same thing
[07:01:23] <johnny> i'm sure there's a step like that in other compilers, but it's not a relatively resuable one like it is with clang
[07:01:28] <euouae> johnny ah got you. You're talking of tools that do analysis on the IR
[07:02:43] <johnny> gcc didn't wanna offer these features because they didn't wanna make it possible for folks to ever have to rely on proprietary software to compile programs were "compiler plugins" for gcc ever allowed too much access
[07:03:07] <euouae> yeah I'm familiar with that
[07:03:09] <johnny> so they really wanna make sure you actually are forced to link into gcc to do anything
[07:03:10] <euouae> I've heard it before
[07:03:20] <euouae> monolithic by choice
[07:03:30] <johnny> but clearly that just led to the continuation of IDE surpremacy
[07:03:46] <johnny> with each one offering it's own set of inspections and formatters and all that other junk
[07:03:54] <euouae> I don't fault GNU for anything honestly. They were up against really stupid and greedy adversaries
[07:04:12] <johnny> but the question is.. what should they have done AFTER clang appeared
[07:05:21] <euouae> I don't know. That's history now
[07:07:54] <johnny> when it comes to rust vs C++ though.. a lot of comes down to defaults more than what you can do
[07:08:10] <johnny> like.. rust defaults to immutability.. and that's a big deal
[07:09:44] <johnny> i haven't read that entire paper posted, but it'd be nice to be able to opt into a C++ that didn't allow raw pointers
[07:10:18] <euouae> johnny can't you ensure that by using llvm to parse the C++ files and ensure certain keywords are not there?
[07:10:20] <euouae> For instance
[07:10:33] <johnny> well for raw pointers and new and delete, probably
[07:10:40] <computerquip> Rust also has lifetime semantics, which basically eliminates any potential bug concerning temporary references.
[07:10:43] <johnny> but defaults matter, and it should be easy to go to the safe way
[07:10:53] <johnny> it shouldn't harder to opt into the safer way
[07:11:40] <computerquip> The thing is though, rust doesn't have to default to those things and it would still be as safe, because it can detect, be design, if something was potentially used uninitialized or didn't need to mutable.
[07:11:46] <euouae> I guess it depresses me when I try to contribute to open source and I realize how hard it is because everything depends on everything else and at the very bottom there's some documentation missing, something crazy happening, etc
[07:12:49] <euouae> in the case of gnutls, I can't figure out e.g. what flags to pass to gnutls_set_x509_key_file2(). The only examples I can find online seem to pass 0, but that seems (after delving into the source code, no docs!) to imply plain text. So I'm confused.
[07:13:01] <johnny> euouae, well it should also be somewhat inspiring to how we've built an entire global network to share how to do all this junk on top of what's equivalent to baling wire and duct tape
[07:13:11] <euouae> While delving into the source code, I pretty quickly saw some suspicious things happening. That's also depressing
[07:13:26] <johnny> it's amazing that any of it works atall
[07:14:02] <johnny> isn't there a higher level api you could use?
[07:14:29] <johnny> and honestly, why not use openssl
[07:14:46] <johnny> ah i think you mentioned this before
[07:14:49] <computerquip> Not much better in terms of documentation either, in my experience at least.
[07:14:49] <euouae> I use circe, an IRC client for emacs, which uses elisp implementation of gnutls, which is missing features that I want from my IRC client, and I'm trying to add them, but gnutls is undocumented in the place I need...
[07:14:51] <johnny> i forgot, it as awhile ago
[07:14:56] <johnny> yeah
[07:15:06] <johnny> euouae, and they won't help you?
[07:15:19] <johnny> sya.. i tried to write this patch.. it's all done except for X
[07:15:42] <euouae> johnny I was reading an article on the cost of building street walks in US streets. Apparently it's much more expensive /after/ they're built. You can save so much money by making streets with street walks... I think software is similar. If you start with buggy software, no guarantees, no specifications...
[07:15:45] <johnny> computerquip, indeed, but you're way more likely to find examples of usage
[07:15:47] <computerquip> euouae, what flag are you confused about exactly?
[07:15:48] <euouae> It's so hard to fix it
[07:16:05] <computerquip> johnny, that's true and it has a more active community.
[07:16:19] <johnny> yep.. those thinsg matter a lot
[07:16:26] <johnny> try to find gnutls experts.. and it's not so easy
[07:16:50] <euouae> computerquip gnutls_certificate_set_x509_key_file2() takes a flag argument. It's the encryption algorithm for the private key file. I don't understand how to obtain that. E.g. if I have privkey.pem, how do I get that? There should be a function to obtain the flags from a privkey file.
[07:17:01] <johnny> euouae, well i mean it applies to EVERYTHING.. evolution, our bodies, our cities (in general) , railroad guages.. all sortso f things
[07:17:09] <johnny> heck.. the english language
[07:17:34] <johnny> that's just the way evolutionary design works
[07:19:00] <johnny> ah.. and with computers.. email is another great/terrible example (smtp in particular0
[07:19:44] <johnny> euouae, have you considered looking at openssl examples not to actually use, but jut to make sure you're thinking about the problem the right way?
[07:20:08] <johnny> i'm not gonna pretend to an expert in this field at all
[07:20:32] <johnny> at least hten you might have the correct language to narrow your search
[07:20:58] <euouae> johnny https://datatracker.ietf.org/doc/html/rfc5208#section-6 for example
[07:21:09] <johnny> i could not for the life of me find a C++ library that did what i wanted it to do until i found a python one and then i had the correct jargon to use to end up finding something close to it in C++
[07:21:22] <euouae> As you can see there's two fields, the encryptionAlgorithm and the encryptedData. So I believe the `flags` denote the algorithm. It looks like it
[07:21:44] *** Quits: frost (~frost@user/frost) (Ping timeout: 268 seconds)
[07:21:55] <euouae> I just don't know how to obtain those flags for a given .pem file. There should be some function in gnutls that does this. I don't even understand why key_file2() requires it. Why can't it load it itself?
[07:22:48] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:4144:d8a4:3663:1a32)
[07:22:51] <johnny> is there an equivalent for gnutls to the openssl cli?
[07:23:14] <euouae> gnutls-cli
[07:23:24] <johnny> and does that give you theinformation from the private key you expect?
[07:23:34] <johnny> if so, shouldn't you be able to tell from how they implement it?
[07:24:15] <euouae> That's a good idea thank you
[07:24:28] <euouae> I'm lookign into it. I couldn't find examples online of people using key_file2()...
[07:24:42] <johnny> what were you using to search?
[07:24:44] <euouae> (my guess is, enrypted certificates at rest is not super popular)
[07:24:47] <euouae> its name
[07:24:59] <johnny> i mean which search engines
[07:25:05] <euouae> google
[07:25:20] <johnny> google is becoming almost useless at finding anything i'm looking for
[07:26:09] <johnny> where the heck is the good code search these days anyways??
[07:26:54] <johnny> i've been using this and it's been (mostly) helpful, but the data set is limited to a small set of repositories hosted on github https://grep.app/
[07:27:27] <johnny> there were some results https://grep.app/search?q=gnutls_certificate_set_x509_key_file2
[07:27:48] <johnny> but perhaps one should make sure this is truly the api you need, htus the gnutls-cli is probably still the best bet
[07:27:57] <computerquip> euouae, I think those flags are normally auto-detected. You can probably set null and still provide a password.
[07:28:20] <euouae> How are you going to provide a password if you set it to NULL?
[07:28:28] <computerquip> er, set the GNUTLS_PKCS_NULL_PASSWORD flag
[07:28:44] <johnny> computerquip, do you have any recommendations for code search?
[07:29:04] <computerquip> Honestly, just github search your way everywhere. It's quick, easy to bookmark, etc.
[07:29:05] <johnny> although the worst part is how terrible github's own search is
[07:29:33] <computerquip> It's only bad if you need to find something very specific. In that case, just pull the repo and grep.
[07:29:34] <johnny> github's search almost always returns nonsense for me
[07:29:39] <euouae> computerquip that's not what GNUTLS_PKCS_NULL_PASSWORD is about
[07:29:56] <euouae> computerquip GNUTLS_PKCS_NULL_PASSWORD is because of an old bug where gnutls encrypted with a NULL password instead of not encrypting
[07:30:09] <euouae> so they maintain backwards compat. using that flag
[07:30:18] <johnny> computerquip, what wanna be abl to do is search all of github with a function, so i can see how people use it, and not part of the name.. the entire function name.. and only the function, not documentation that mentions the function
[07:30:50] <johnny> and sometimes i need to filter it down by args, and github really fails at that part
[07:31:04] <johnny> grep.app is much btter even if the data set is smaller
[07:31:16] <johnny> there's so much poor documentation out there that i really do have to see it in code
[07:31:27] <computerquip> euouae, there's some way to pull it implicitly. For example, here's an example PKCS8 private key: https://tinyurl.com/4h8ex5th
[07:31:34] <computerquip> It has the algorithm in its header.
[07:31:57] <johnny> the problme is.. the documentation is written by the people who wrote the code :(
[07:32:49] <johnny> i can't tell if i broke this code.. but i guess i should try to uhmm. fix t
[07:33:21] <computerquip> Actually, euouae, I'd wager that if you set flags to 0, it would just work.
[07:33:22] <euouae> computerquip if I recall correctly from what I've read, the algorithm is included twice in these sorts of files, once in the header and once in the payload
[07:33:46] <euouae> computerquip You /might/ be right, I tried reading the source code to verify and I thought it doesn't work.
[07:33:58] <computerquip> Well, in a p12 file it can because it may embed a pkcs8 structure, so you can ultimately end up with two separate password-protected structures.
[07:34:45] <computerquip> https://github.com/gnutls/gnutls/blob/master/lib/x509/privkey_pkcs8.c#L1583 <- appears to ultimately be the call that uses those flags in case you're curious.
[07:35:47] <computerquip> https://github.com/gnutls/gnutls/blob/master/lib/x509/privkey_pkcs8.c#L1642 <- this line in particular executes if the PLAIN flag isn't set. So you could probably set any flag and it would do the same thing.
[07:36:04] <computerquip> Honestly, looks like years of legacy cruft that isn't well explained.
[07:36:50] <euouae> deep down key_file2() calls gnutls_x509_privkey_import_pkcs8() which -- you are right! -- says @flags: 0 if encrypted or GNUTLS_PKCS_PLAIN if not encrypted.
[07:37:28] <euouae> so thanks! you're totally right. The value 0 is not defined to be an enum value of gnutls_pkcs_encrypt_flags_t
[07:37:34] <euouae> so... yeah.
[07:38:06] <euouae> I checked its source code and I was confused but I neglected its docstring, but in this instance it's a case of the inner function having more documentation than the outer function :P
[07:38:10] <euouae> thanks computerquip
[07:38:45] <euouae> btw really impressive how quickly you dug that up. It took me more time
[07:43:45] <euouae> I mean from a cursory glance, https://github.com/gnutls/gnutls/blob/master/tests/pkcs11/pkcs11-privkey.c seems to use the 0 flag but the privkey also seems to be unencrypted despite a PIN being passed.
[07:44:15] <euouae> Which is something I saw but I was also confused about... My brain has melted, I'm going to switch to learning stuff on networking for now, I don't think I can write any more code
[07:46:40] <johnny> reading code is a skill .. one too hard for tons of folks
[07:46:51] <johnny> particularly code they didn't write themselves
[07:47:42] <euouae> yeah... older code is harder to read too
[07:48:18] *** Quits: euouae (~euouae@user/euouae) (Quit: thank you for the help)
[07:58:06] *** vinleod is now known as vdamewood
[07:59:12] <yolo_> std::rotate(v.begin(),v.begin()-1, v.end()); -- compiles OK, runtime error, how can I avoid this at compile time? static_assert?
[07:59:58] <yolo_> actually the v is unknown at compile time, can only assert
[08:00:20] <yolo_> basically, can compiler detect iterator goes out of boundary
[08:01:06] <RandomReader> no, since it's dynamic data
[08:02:23] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[08:02:29] <RandomReader> in general, a C++ compiler can detect violations of the type system, since that's the primary form of static information that has specific rules associated with it
[08:02:38] <RandomReader> anything beyond that is the compiler's job
[08:03:15] <RandomReader> sorry, anything beyond that is not the compiler's job / is the programmer's job
[08:03:29] <RandomReader> external static analysis tools try to fill in the gaps with some inference and (good) guesswork, but they're not bulletproof
[08:03:54] <yolo_> assert(n < v.size() - 1 && n >= 0) for rotate(v.begin(),v.begin()+n, v.end()) seems the only 'safe' way.
[08:04:49] <yolo_> RandomReader: thanks. just had a strange crash in rotate and found the offset is making troubles
[08:05:13] <yolo_> anyway I will assert it so at least I know what the problem is more easily next time
[08:05:28] <RandomReader> I normally wouldn't use assert() since it can be disabled at build-time .. in this case it seems wherever your "n" is coming from has not been properly validated / sanitized
[08:05:34] <yolo_> iterator out-of-bound has been a headache for me once a while
[08:06:21] <yolo_> RandomReader: i agree, sometimes the upstream caller is beyond my control
[08:06:26] <RandomReader> for just debugging purposes, there are debug switches for most stdlib implementations that have them check iterators at runtime, and there's also the sanitizers as well
[08:06:58] <RandomReader> you can validate it on your own side sure, I'm just saying I wouldn't use assert() for that
[08:07:17] <RandomReader> I'd just make the check happen all the time, and either throw an exception or abort
[08:07:25] <yolo_> yes it's the AddressSanitizer complained indeed
[08:08:08] <RandomReader> put another way, assert() is only likely to work in "debug mode", but if your callers are this troublesome, it seems appropriate to have the check happen all the time
[08:11:42] <yolo_> I agree. will do. Thanks again.
[08:11:51] <RandomReader> as an example of the debug iterator checks, for libstdc++ (gcc) you can build with _GLIBCXX_DEBUG and _GLIBCXX_DEBUG_PEDANTIC defined: https://gcc.gnu.org/onlinedocs/libstdc++/manual/debug_mode_semantics.html
[08:12:01] <RandomReader> most other stdlibs have something similar
[08:12:25] <yolo_> I do use GLIBCXX_DEBUG, not sure the difference vs DEBUG_PEDANTIC though
[08:13:16] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:14:03] <yolo_> looks like no need for DEBUG_PEDANTIC since gcc 4.0.1
[08:14:13] <RandomReader> no, that's about a mispelling of it
[08:14:32] <RandomReader> it adds more checks on top of the regular debug, to match the C++ standard instead of libstdc++ extensions
[08:23:00] *** Quits: Skyfire (~pyon@user/pyon) (Quit: brb broken config)
[08:23:21] *** Joins: Skyfire (~pyon@user/pyon)
[08:23:39] <yolo_> so I should use both then
[08:49:29] *** Quits: DrMax (~DrMax@node-1w7jra94757fyrs6vqxiaj1hc.ipv6.telus.net) (Remote host closed the connection)
[08:50:42] *** Joins: DrMax (~DrMax@node-1w7jra94757g2eprjyhu30i0z.ipv6.telus.net)
[08:57:25] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[09:09:33] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[09:14:29] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Quit: Leaving)
[09:15:00] <johnny> is there a reasonable list of that sort of thing?
[09:15:08] <johnny> not just for glibc tho
[09:37:20] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:37:29] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:37:29] *** ChanServ sets mode: +v npaperbot
[09:39:33] *** Joins: frost (~frost@user/frost)
[10:00:56] *** Quits: pah (~pah@user/pah) (Ping timeout: 245 seconds)
[10:01:54] *** Joins: pah (~pah@user/pah)
[10:02:26] *** Joins: gggpkm (~gggpkm@60.10.194.46)
[10:07:20] *** Joins: gggpkm_ (~gggpkm@123.113.182.112)
[10:10:14] *** Quits: gggpkm (~gggpkm@60.10.194.46) (Ping timeout: 260 seconds)
[10:15:26] <computerquip> johnny, not that I can find. Usually googling "debug iterators" for your compiler brings up the right documentation though
[10:15:42] <johnny> i did not just mean for iterators, but anything like that
[10:17:14] <computerquip> I didn't mean just for iterators either, it's just a term specific enough to bring up the right documentation.
[10:20:14] <ville> johnny: look up the documentation of the standard library you are using
[10:20:25] <johnny> clearly. I COULD DO THAT
[10:21:17] <johnny> it just seems like there are so many important documents scattered about that i wouldn't even knwo what i was missing unless i read and remembered everyting
[10:21:39] <johnny> first you actually have to think something exists bfeore you search for it, or you might not even know you want it
[10:22:07] <ville> https://gcc.gnu.org/onlinedocs/libstdc++/manual/using_macros.html
[10:23:09] <computerquip> Nobody starting out is going to know that those macros exist and it's rare someone is going to read the documentation for the compiler suite to find such a thing.
[10:24:08] <computerquip> Well, long story short, you should RTFM.
[10:24:17] <computerquip> Nobody does but you should.
[10:24:28] <ville> nobody is a helluva quantifier
[10:25:18] <computerquip> Fine, most peole don't read the documentation.
[10:26:02] <computerquip> Did that clear things up? Didn't mean to cause confusion by indicating that a whole slew of documentation is absolutely never read by anyone ever.
[10:26:48] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[10:27:42] <ville> oh well. i do tend to evaluate things based on their documentation and it plays large part on whether i will use something. learned that a long time ago when starting out
[10:28:32] <ville> so if i am about to pick up something new i definetly do look up its documentation
[10:29:09] <johnny> thing is, i don't have a choice when it comes to the stdlib really.. i mean.. kinda.. but not really
[10:29:25] <computerquip> What do you mean?
[10:29:57] <johnny> it's just something that happens, i don't really think about it. it's just stuff that happens when i use say C++. it's just an implementation detail i'm not really concerned with until forced
[10:30:25] *** Joins: ShiftyLogic (~shiftylog@66.115.146.16)
[10:30:56] *** Joins: ShiftyLo_ (~shiftylog@66.115.146.16)
[10:31:17] <johnny> i don't do C++ for work btw..
[10:31:42] <johnny> well i do have an embedded prototype, but it's not fit for purpose, and literally can't be deployed
[10:32:41] <johnny> but even with that embedded thing, i can still mostly use the the higher level constructs that C++ offers and they jsut work
[10:32:57] <computerquip> Forced to do what exactly?
[10:33:47] <johnny> like say i needed to do something that couldn't be done easily with a library.  taking windows for example, i might end up going with the windows apis for encoding conversion on windows
[10:33:57] <johnny> or let's say i needed to deal with raw sockets..
[10:34:11] <johnny> which if i was recoding this bluetooth hci socket thingy, i'd need to care more about it
[10:34:16] <johnny> or at least i think i would
[10:35:34] <computerquip> I'm lost on where this conversation wnet.
[10:35:37] <johnny> not that i know much about std::thread, but i'm not using that in my embedded thing, i'm using their threading primtive, and i'm using their function pointer wrapper rather than std::function because of how much cheaper it is
[10:35:53] <johnny> it's just that i never have to think about glibc or whatver widows's thing is called :)
[10:35:54] *** Quits: ShiftyLogic (~shiftylog@66.115.146.16) (Ping timeout: 260 seconds)
[10:35:56] *** Quits: ShiftyLo_ (~shiftylog@66.115.146.16) (Ping timeout: 245 seconds)
[10:36:02] <computerquip> Ah, I see.
[10:36:20] <johnny> or the specific implementation of libstdc++
[10:36:33] <johnny> sorry i tied up C and C++ there, my fault
[10:37:02] <johnny> technically arm's C++ stdlib whatever has std::thread (or at least i think it does), but i don't use it
[10:37:02] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[10:37:40] <johnny> generally i only go looking up that stuff it it doesn't work
[10:38:07] <johnny> i'm not that performance sensitive, so i don't go looking up at how to tweak things too much (until a profiler says so anwyays)
[10:38:46] <johnny> C++ is something i have to do.. but that doesn't mean i don't wanna enable the things that make it better
[10:38:49] <johnny> or safer
[10:38:52] <ville> if you don't care about performance isn't there embedded python these days?
[10:39:03] <johnny> my latest mcu could probably use one
[10:39:15] <johnny> micropython and circuitpython
[10:39:25] <johnny> heck, there's embedded lua, js, and others
[10:39:39] <johnny> my last mcu was just a little bit underpowered for that sort of thing
[10:40:13] <johnny> sorry though i meant not performance sensitive in general, i'm still a little concerned about that sort of thing on say an arm cortex-0
[10:40:30] <johnny> m0*
[10:41:16] <johnny> i do have some pretty tight timings for this bitbanged library to drive a led strip
[10:41:33] <johnny> well not real real real time tight.. i'm sure
[10:41:39] <johnny> it does have a bit of leeway..
[10:43:01] <johnny> i suppose C++ (mostly) lets me get away with it
[10:43:37] <johnny> i guess it does help that i a bit more familiarity with the standard posix and unix apis even before i wrote any programs
[10:44:02] <johnny> s/unix/linux/*  since it's indeed way more on the linux side
[10:45:29] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[10:46:49] <johnny> computerquip, ville . both of you chose C++ on purpose didn't you?
[10:47:30] <johnny> you weighed your options and thought it was the bset choice for whatever you had to do
[10:55:13] <computerquip> My choice of C++ was mostly due to ill-conceived notions from earlier days.
[10:55:37] <johnny> which ones?
[10:56:00] *** Joins: gggpkm__ (~gggpkm@60.10.194.46)
[10:56:03] <johnny> and what were your other options?
[10:56:14] <computerquip> Well, mostly that a performant and flexible solution could only be done in something like C or C++.
[10:56:25] <johnny> rather than in say python? or vs what else?
[10:57:13] <computerquip> Especially in todays environment of horizontal scaling and microservices, that choice seems worse and worse if I'm honest.
[10:57:35] <johnny> well was the kind of thing you wanted to write?
[10:57:57] <johnny> man.. that google doc is pretty damning isn't it.. it's not a scalpal, it's a freakin axe
[10:58:56] <computerquip> I wanted to write everything. I wrote parsers, servers, games, etc.
[10:59:11] <johnny> nice
[10:59:18] *** Quits: gggpkm_ (~gggpkm@123.113.182.112) (Ping timeout: 260 seconds)
[10:59:40] <computerquip> It seemed obvious at the time that C++ with UI stuff was basically the de facto standard.
[10:59:42] <johnny> well games and parsers still seem well suited to C at least, since everything has bindings to it
[11:00:02] <johnny> err i mean.. games are still well suited to C++, and parsers to C
[11:00:44] <computerquip> Just depends really. There isn't much reason to make something like a compiler C or C++ if your first concern isn't performance but the thing it can parse and the stuff it generates.
[11:00:51] <computerquip> compiler in*
[11:01:07] <johnny> the reason is if you care about driving it from somthing else
[11:01:28] <johnny> like lua for example is really easy to embed, and that's only because it's C
[11:01:51] <computerquip> Well, what most people want is the C ABI, not necessarily C itself.
[11:02:04] <computerquip> You can expose a C ABI without C entirely.
[11:02:59] <johnny> well sure, in rust it seems reasonably easy enough
[11:03:03] <computerquip> Over the years, I noticed that the things people told me were advantages in C such as simplicity or speed were just plain bologna.
[11:03:51] <computerquip> What ends up happening in reality is you don't have the same utility you get in those higher level languages, you end up writing half-baked solutions yourself, and the burden on maintenance and implementation itself ends up with a half-baked result.
[11:04:07] <johnny> well i always new the simplicit arg was garbage, but not the speed one.. until i'd seen all these JITed implementations for interpreted languages
[11:04:28] <johnny> that simplicity is just code for moving the complexity somewhere else
[11:04:49] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:1c07:22c7:b7d5:2c38)
[11:05:03] <johnny> i mean heck.. php for example is unreasonably fast for what it is
[11:05:04] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[11:05:21] <ville> back then, mid-90s, there weren't that many great options. so c and c++ it was.
[11:05:26] <johnny> indeed
[11:05:58] <johnny> python, ruby and php both came out somewhere between 93 and 96.. quite new
[11:06:03] <johnny> s/both//
[11:06:32] <johnny> although i suppose in php's case, it wasn't at all the same .. so i guess i can exclude it until whenever php 4 came out
[11:07:20] <johnny> you could have written visualbasic (i think)
[11:07:45] <johnny> sorry. i'm just remembering when almost wrote a program
[11:07:55] <ville> i also made the move to linux at the same-ish time
[11:08:08] <johnny> so did you do perl at all?
[11:08:32] <ville> sure. even for a job
[11:09:03] <ville> or as part of one, some stuff was perl
[11:09:16] <johnny> but now perl really only exists most normal people's systems as part of build systems.. while C remains
[11:09:55] <johnny> all that glue code ended up as python
[11:10:34] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[11:11:14] <johnny> computerquip, well was it really balongna or were people just thinking that pure execution speed was the only valuable metric  when a lot of a apps spend more time doing i/o stuff that just being C wouldn't really help with
[11:11:40] <johnny> i think that's the main thing i learned in my earlier days of messing with computers and reading about programming languages
[11:12:19] <johnny> it doesn't matter if you can execute a quadrillion operations per second if you're mostly waiting on slow disk reads
[11:14:32] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[11:16:12] <computerquip> Maybe. C/++ compilers look good on synthetic benchmarks. When performance does actually matter at the system-level, the kind of control and optimization C and C++ gives is hard to beat.
[11:16:56] <johnny> i wonder how much of that disappers were you to implement the suggestons as per that google doc
[11:17:22] <johnny> but in fairness, the high level constructs you get with C++ aren't that bad.. it needs more sugar.. so i wish the committee would do that :(
[11:18:32] <johnny> not to the qt level of sugar though..
[11:18:56] <ville> language or library? we should drop "half" the library
[11:19:39] <johnny> library mostly
[11:19:52] <johnny> half the library? what would you drop?
[11:20:46] <computerquip> I'm still pretty unsure about the networking ts honestly. A bunch of the streaming utilities are rough. Some of the libraries that seem nice, like span, are gargantuan amounts of bloat.
[11:21:01] <johnny> why is span particularly bloatful?
[11:21:03] <computerquip> I'm unsure about a lot of it.
[11:21:18] <computerquip> Span, which you would think would be a really light utility for what it does, is just gigantic.
[11:21:27] <johnny> why is that
[11:21:34] <computerquip> Dunno, haven't looked into it ;P
[11:21:39] <ville> span or mdspan?
[11:21:57] <computerquip> span. If I'm remembering the right one.
[11:21:59] <johnny> std::span indeed seems like it should be light when i read a description of whatit does
[11:23:11] <computerquip> Stuff like that is all over though. std::regex is really just recently starting to get decent implementations but that would have been solved if we forced people to use something like re2 or boost regex.
[11:23:12] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[11:23:38] <computerquip> Plus a lot of these APIs don't intermix.
[11:23:45] <computerquip> I forgot why I started ranting.
[11:23:56] <johnny> i'm not familiar with either of those. i'm only familiar with pcre and ecmascript
[11:24:21] <johnny> oh.. i guess i'm somewhat familiar with the posix variant.. but i always have to look it up
[11:25:27] <johnny> that part about them not intermixing is the real shame...
[11:26:14] <johnny> although it's not like python isn't at least somewhat simliar as far as different styles go.. unittests2 isn't exactly pythonic
[11:27:09] <johnny> everybody is all "write idiomatic python" but then you have stuff that was clearly a direct reimplementation from java
[11:27:59] <johnny> lol.. looking at all the different limits headers..
[11:29:59] <ville> there are too many things in the library for me to list what i'd drop or keep really. i'd just keep fundamental things that are needed to use your machine
[11:30:19] <ville> say atomics and threads would stay, containers would probably not
[11:31:32] <johnny> so.. supposing there was a new C++ programmer who was just starting their first project. what would they do?
[11:31:34] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[11:31:57] <ville> learn?
[11:32:16] <johnny> how would they get started. how would they get a decent container library?
[11:32:44] <johnny> what would the path of least resistance so they could write a somewhat useful program as quickly as possible?
[11:33:55] <johnny> they shouldn't have to do a lot of work just to use what's possible with std::vector and std:map , even if it's not shipped with the stdlib
[11:34:14] <johnny> and don't hit em with analysis paralysis sitaution for what they're not yet prepared to analyze
[11:34:18] <ville> it's all part of learning
[11:34:54] <johnny> so you think : here have some lego pieces and a book and go to it?
[11:35:00] <ville> sure
[11:37:20] <johnny> rust has a slimmer stdlib in some ways (although of course it could probably be slimmer), but it's also super easy to get the other pieces you need
[11:37:36] <computerquip> Actually I think I was thinking of array, not span.
[11:37:41] <johnny> and you alreayd have a build system
[11:38:16] <johnny> i'd be happy if C++ made that kinda tradeoff, but nobody wants to make that one
[11:39:09] <johnny> it'd mean way less dependence on the committee for library features, while still relying on the committee to keep the overal syntax and semantics sane
[11:39:15] <computerquip> I have the same issue with rust. For example, they've had a once_cell implementation in experimental for awhile now... but there's not a lot stopping people from using the once_cell library.
[11:40:05] <computerquip> All you have to do is add it to cargo and it's done, you have a once_cell implementation that doesn't correspond to your version of rust.
[11:40:31] <johnny> indeed
[11:41:15] <johnny> you get your comiler and a build systme with one command , and you can add dependencies with one command.. the friction is low
[11:41:16] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[11:41:27] <computerquip> Waiting for C++ or Rust to put stuff in a stable point release is painful. It's more painful with C++ since we're at the mercy of the implementers.
[11:42:28] <johnny> hmm.. if only they built msvc for linux/mac..  i'd totally want the equivalent of pyenv or nvm
[11:42:48] <johnny> i use fedora, so my clang and gcc are relatively up to date
[11:43:32] <johnny> but i suppose i'd still still something like pyenv if i actually cared about working against older computers.. and i guess such a tool would also need to include glibc as well if you really  wanted it to be valuable..
[11:43:44] <ville> computerquip: std::array owns things, so it has to start thinking about what copying and moving means for various kinds of T, and that's where things may get complicated. std::span doesn't own things
[11:44:44] <ville> (exceptions and whatnot occuring during copy or move operations)
[11:45:03] <johnny> drop exceptions from C++ hah
[11:45:08] <computerquip> Ah, I see. I remember measuring one of those and realizing it was having a larger impact than I thought it should. I usually like to think of std::array as a simple wrapper around T[N]
[11:45:10] <johnny> man.. that' be something
[11:45:47] <johnny> at least you can disable exceptions.. which is is done indeed for my embedded project
[11:46:06] <ville> johnny: yes, but that would have nothing to do with the above "problem". whether you communicate the failure through exception or other means doesn't remove the need to deal with the failure properly
[11:46:14] <johnny> of course it doesn't
[11:46:52] <johnny> that was just an aside from when you were talking about dropping stuff
[11:47:11] <johnny> and i was imagining how much code out there would break if it happened
[11:49:55] <computerquip> I will say that Rust's result type had a huge impact on how I coded, to the point it changed how I coded in C++ as well. I usually use some result library if I can and use it everywhere except for the interface itself. Makes error bubbling and handling almost easy.
[11:50:07] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[11:50:33] <computerquip> Especially since I haven't worked in a codebase that allows exceptions (or pretends they don't) in a long time.
[11:51:05] <johnny> i've seen people using result types in typescript code even, although i probably wouldn't since so much can just throw exceptions
[11:51:27] <johnny> at least you can turn them off in C++
[11:52:15] <computerquip> Well... you can't technically, it's a compiler feature more often than not.
[11:52:38] <computerquip> You could have a C++ implementation that doesn't let you turn them off.
[11:53:05] <johnny> not that worried about that one
[11:53:16] <computerquip> In that scenario, using std::map/string/vector etc. can get complicated.
[11:53:55] <johnny> i can't say i know anything about compilers much beyond the big three and what i've heard about from arm's proprietary compiler
[11:54:31] <johnny> i did learn some new flags (mostly for clang) that that google doc
[11:55:13] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[11:59:22] <computerquip> iirc, chromium uses clang exclusively, including on Windows via clang-cl.
[11:59:46] <computerquip> So they're all in on that compiler.
[12:01:28] *** Joins: John99 (~johnny@87.200.94.90.dynamic.jazztel.es)
[12:02:51] <ville> computerquip: on further thinking std::array doesn't care about exceptions for copying and moving. it just has the implicitly generated ones. so not sure what bloat you are referring to
[12:04:22] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[12:05:09] <computerquip> https://artificial-mind.net/projects/compile-health/ <-- not sure that's indicative and I don't have my original numbers but that sort of supports that array isn't as lite as one would think.
[12:05:38] <computerquip> Unfortunately doesn't have span on there... but I'll have to look back on what it was I was seeing, it's been a few months.
[12:08:30] <urdh> that graphs include times though, it doesn't say much about the run-time performance of std::array
[12:08:52] <computerquip> I was only referring to compile-time and potential binary bloat.
[12:09:53] <urdh> right, this isn't binary bloat is my point
[12:10:31] <urdh> but yeah unfortunately some headers pull in too many dependencies in some stdlibs
[12:10:54] *** Quits: ravan (~ravan@user/ravan) (Remote host closed the connection)
[12:10:59] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:4144:d8a4:3663:1a32) (Quit: Quit)
[12:11:01] <urdh> it's shitty QoI, but I don't think <array> necessarily *has* to be that heavy given the specification?
[12:11:20] * computerquip shrugs.
[12:11:39] <computerquip> I hope a lot of that concern goes out the window with modules at some point.
[12:14:30] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[12:19:06] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 260 seconds)
[12:21:23] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[12:29:29] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[12:30:34] *** Joins: gggpkm_ (~gggpkm@60.10.194.46)
[12:31:33] <ville> somehow managing to make the array header expand to more loc than vector header is pretty impressive
[12:32:22] <ville> thes stripped array header is more than non-stripped vector. impressive
[12:33:58] *** Quits: gggpkm__ (~gggpkm@60.10.194.46) (Ping timeout: 260 seconds)
[12:43:44] *** pah is now known as pa
[12:43:44] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[12:52:14] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[13:09:09] *** Joins: ARoxdale (~ARoxdale@84.203.31.229)
[13:17:11] *** Quits: pa (~pah@user/pah) (Ping timeout: 264 seconds)
[13:19:14] *** Joins: pah (~pah@user/pah)
[13:19:29] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[13:21:07] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[13:24:22] *** Quits: pah (~pah@user/pah) (Ping timeout: 260 seconds)
[13:24:43] *** Joins: pah_ (~pah@host-79-35-3-124.retail.telecomitalia.it)
[13:32:25] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[13:34:12] *** Joins: Guest90 (~Guest90@178.49.152.42)
[13:34:13] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[13:35:07] *** pah_ is now known as pa
[13:35:25] *** Quits: pa (~pah@host-79-35-3-124.retail.telecomitalia.it) (Changing host)
[13:35:25] *** Joins: pa (~pah@user/pah)
[13:37:21] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:37:28] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:37:28] *** ChanServ sets mode: +v npaperbot
[13:43:50] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[13:44:17] <LordKalma> morning
[13:47:40] *** Joins: DSpider (DSpider@2a02:2f00:1ff:ffff::646c:6a26)
[13:47:56] <LordKalma> btw, what happens if get_or_create returns more than one object?
[13:48:22] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:48:42] <LordKalma> or finds more than one, I mean
[13:48:46] <LordKalma> also, this was a django question, nevermind
[13:48:53] * LordKalma has to look where he is...
[13:51:46] *** Quits: DSpider (DSpider@2a02:2f00:1ff:ffff::646c:6a26) (Ping timeout: 245 seconds)
[13:52:11] *** Joins: DSpider (DSpider@2a02:2f00:1ff:ffff::646c:6a26)
[13:58:02] *** Quits: frost (~frost@user/frost) (Ping timeout: 260 seconds)
[13:59:39] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[14:04:15] *** Joins: frost (~frost@user/frost)
[14:05:44] *** Joins: proller (~p@80.240.216.69)
[14:22:46] *** Joins: mitch0 (~mitch@193-110-63-186.cable-modem.hdsnet.hu)
[14:22:57] *** Quits: mitch0 (~mitch@193-110-63-186.cable-modem.hdsnet.hu) (Client Quit)
[14:23:32] *** Joins: gggpkm__ (~gggpkm@60.10.194.46)
[14:23:42] *** Joins: mitch0 (~mitch@193-110-63-186.cable-modem.hdsnet.hu)
[14:26:02] *** Quits: gggpkm__ (~gggpkm@60.10.194.46) (Read error: Connection reset by peer)
[14:26:54] *** Quits: gggpkm_ (~gggpkm@60.10.194.46) (Ping timeout: 260 seconds)
[14:29:32] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[14:33:47] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[14:37:50] *** Joins: Guest31 (~Guest31@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[14:54:55] *** Joins: markong (~kvirc@213.146.188.203)
[15:01:35] *** Quits: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian) (Ping timeout: 260 seconds)
[15:02:21] *** Joins: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian)
[15:05:26] *** Joins: paul424 (~tom@ip-31-0-125-120.multi.internet.cyfrowypolsat.pl)
[15:05:40] <paul424> hello, as usual, when no idea what to do I came here
[15:07:26] <paul424> I try to send an enum class TrapType through sfml::Packet and there is no specialization for ODPacket& ODPacket::operator >>(TrapType& tt) how do I write one  ?
[15:07:26] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[15:08:59] <paul424> every try ends up with a protest like :  no match for â€˜operator>>â€™ (operand types are â€˜sf::Packetâ€™ and â€˜TrapTypeâ€™)  134 |     mPacket >> tt;
[15:10:23] <paul424> and afaik conversion between anything and enum classes is hard if not impossible
[15:10:29] <paul424> what to do ?
[15:11:23] *** Joins: horribleprogram (~user@2607:fea8:7040:830:dd82:3aa7:996e:fe13)
[15:11:30] *** Quits: horribleprogram (~user@2607:fea8:7040:830:dd82:3aa7:996e:fe13) (Changing host)
[15:11:30] *** Joins: horribleprogram (~user@user/horribleprogram)
[15:14:47] *** Joins: artok (~azo@mobile-access-5672e7-16.dhcp.inet.fi)
[15:15:48] <paul424> ahh static_cast to the rescue
[15:15:55] <paul424> anyway I have errors somewhere else
[15:16:00] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[15:16:13] *** Joins: magla (~gelignite@55d47dc5.access.ecotel.net)
[15:16:17] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[15:29:17] <John99> https://isocpp.org/wiki/faq/mixing-c-and-cpp // How can I pass an object of a C++ class to/from a C function?
[15:29:17] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[15:29:17] <John99> Hi, i am trying to create a wrapper of std::map for a C application but typdef std::map<string,void*>Dict when i call this in C code is "storage size unknow"
[15:29:36] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[15:30:12] <John99> its mandatory define a new clase for do the code compatible?
[15:30:22] <John99> class*
[15:30:32] *** Quits: paul424 (~tom@ip-31-0-125-120.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[15:30:44] <cbreak> John99: C can't handle templates
[15:31:05] <cbreak> you'll have to hide the c++ code
[15:31:06] <John99> yes, for that i tryed to hide that under a typedef
[15:31:10] <cbreak> no
[15:31:16] <cbreak> typedefs are not hiding anything
[15:31:42] <cbreak> use something like struct HiddenThing;
[15:31:51] <John99> yes, done
[15:31:52] <cbreak> which you then implement in a cpp file
[15:32:06] <cbreak> or struct HiddenThing {}; which you derive from in a cpp file, and implement there too
[15:32:14] <John99> https://github.com/JohnnyVM/libdict/blob/main/include/dict.h
[15:32:37] *** Joins: PJBoy (~PJBoy@user/pjboy)
[15:32:38] <John99> its not that?
[15:32:39] <cbreak> that's not a C header
[15:32:55] *** Quits: johnny (~johnny@user/johnny) (Ping timeout: 260 seconds)
[15:32:59] <John99> in the ioso cpp faq do that
[15:33:03] <cbreak> remove lines 4 to 11
[15:33:03] <John99> isocpp
[15:33:44] <cbreak> it's bad.
[15:34:05] <John99> https://isocpp.org/wiki/faq/mixing-c-and-cpp this is bad?
[15:34:57] <John99> // How can I pass an object of a C++ class to/from a C function?
[15:34:57] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[15:34:58] *** PJBoy is now known as Guest3846
[15:34:58] *** Quits: Guest3846 (~PJBoy@user/pjboy) (Killed (molybdenum.libera.chat (Nickname regained by services)))
[15:35:01] <cbreak> yes
[15:35:02] *** Joins: PJBoy (~PJBoy@user/pjboy)
[15:35:19] <John99> am
[15:35:42] *** Quits: horribleprogram (~user@user/horribleprogram) (Remote host closed the connection)
[15:35:47] <cbreak> but it's much less bad than your code
[15:35:59] <John99> i suppose
[15:36:26] <cbreak> they don't use typedefs in c++
[15:36:35] <cbreak> they actually define the type
[15:36:41] <cbreak> which you fail to do
[15:36:54] <John99> true , i mistake taht
[15:37:19] <John99> but then i need define a new class Dict that intherit form map?
[15:37:26] <cbreak> no
[15:37:35] <cbreak> you need to define on that has a map as member
[15:37:57] <John99> okay, i am going to try
[15:39:03] <cbreak> and use the same name for the C struct and the C typedef
[15:39:42] *** Joins: johnny (~johnny@user/johnny)
[15:42:25] <Raziel> >building ffmpeg on windows with msvc >you will need: msys
[15:42:30] * Raziel screams internally
[15:43:39] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[15:47:38] <John99> cbreak the same :(
[15:47:40] <John99> https://github.com/JohnnyVM/libdict/blob/main/include/dict.h
[15:48:03] <John99> unknow storage size dict
[15:49:20] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[15:49:20] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[15:50:20] <cbreak> John99: yeah, but why is that a problem?
[15:50:28] <cbreak> it's defined in C++
[15:50:32] <cbreak> the storage size in c++ is known
[15:51:21] *** Quits: Guest90 (~Guest90@178.49.152.42) (Quit: Client closed)
[15:52:22] <John99> https://github.com/JohnnyVM/libdict/blob/main/tests/src/test.c
[15:52:32] <John99> when i tryed to use the function in c not work
[15:55:03] *** Joins: RoKenn (~RoKenn@2001:a61:3505:d101:7bdd:f51d:913d:a85)
[15:55:03] *** Quits: RoKenn (~RoKenn@2001:a61:3505:d101:7bdd:f51d:913d:a85) (Changing host)
[15:55:03] *** Joins: RoKenn (~RoKenn@user/rokenn)
[15:57:42] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[15:58:23] <cbreak> John99: you obviously can't create a Dict in C
[15:58:28] <cbreak> use C++
[16:00:03] <cbreak> John99: look at your code, you only declare the existence of Dict in C, but neither its constructor, destructor, or even its definition (and size) are known.
[16:00:13] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[16:00:15] <cbreak> so you can't allocate or destroy such objects
[16:00:44] <cbreak> and since C has no notion of destructors or constructors, trying to create or destroy any C++ object would be foolish anyway. Use C++ for that.
[16:00:49] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:13:16] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 265 seconds)
[16:13:19] <johnny> i thought i was being clever with gdb and skipping all of C++ library functions until i hit std::make_shared
[16:15:22] <John99> cbreak, the point is i want a dict class equivalent to map<std::string, void*> compatible with C, use C++ is not ever a posibilitie
[16:16:06] <John99> i am missing dict.cpp
[16:16:12] <John99> okay, going
[16:19:08] <johnny> and that is why they invented glib and libraries
[16:20:52] <John99> C dont have libraries as map or unordered_map, i implemented a few of them, but i was trying to replace for C++
[16:21:08] <John99> for less cumbersome maintenance
[16:21:33] <cbreak> John99: you need to use c++ for creation and destruction
[16:21:41] <cbreak> as well as any other interaction with the object
[16:21:44] <cbreak> since it is a C++ object
[16:21:57] <johnny> hmm?
[16:22:11] <johnny> i don't think John99 is thinking anything about C++ , but all C
[16:22:16] <cbreak> no.
[16:22:30] <cbreak> he's obviously using std::map, which is a C++ template
[16:22:42] *** Quits: frost (~frost@user/frost) (Ping timeout: 260 seconds)
[16:22:45] <cbreak> C is incapable of interacting with objects created from a C++ template instantiation
[16:22:57] <cbreak> any such interaction needs to be done from c++
[16:23:05] <cbreak> it is not sufficient to just wrap get and set
[16:23:12] <cbreak> creation and destruction also needs to be wrapped
[16:23:17] <johnny> indeed
[16:23:37] <John99> okay, can you explain me how i "wrap constructor and destructor"?
[16:23:54] <cbreak> extern "C" Dict * make_dict()
[16:24:04] <cbreak> extern "C" void destroy_dict(Dict * dict);
[16:24:15] <johnny> is it even worth doing that?
[16:24:16] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[16:24:23] <cbreak> is it worth using C?
[16:24:36] <johnny> i mean trying to use C++ things like std::map from C
[16:24:48] <cbreak> I wouldn't bother using C for anything normally
[16:25:01] <cbreak> but if you want to expose a C++ library from C++, then this is what you have to deal with
[16:25:13] <LiaoTao> https://godbolt.org/z/6rb4454xK
[16:25:16] <cbreak> this is similar to writing a C library from scratch too
[16:25:26] <johnny> but then.. why not just write C++ is what i'm sayin
[16:25:29] <cbreak> you also have to provide creation and destruction functions for C libs
[16:26:02] <johnny> hmm.. i thought i was doing this correctly
[16:26:38] <cbreak> LiaoTao: you should return the object from the "construction" function
[16:26:49] <cbreak> and  you shouldn't use void*, those are not type safe
[16:26:57] <John99> johnny, becouse i am simply studing the posibility now, but if i want use that in some moment in real life i will need C compatibility
[16:27:34] *** Joins: frost (~frost@user/frost)
[16:27:36] <johnny> in real life, most people who write C  don't want C++ infecting their codebases unless there's no other choice
[16:27:45] <cbreak> LiaoTao: you have the 'dict' type, which gives some sense of type safety, no point screwing it up again with a void * member
[16:27:48] <LiaoTao> cbreak, This is a standard pattern in C with the return value indicating success or failure. I didn't care for this example so it's void.
[16:28:27] <LiaoTao> cbreak, How would you do this without void*?
[16:28:34] <johnny> John99, in real life, C programmers tend to use stuff like glib which fully implement things like hash tables in C itself
[16:28:37] <cbreak> as demonstrated above
[16:28:51] <cbreak> LiaoTao: struct Dict { std::map<A,B> map; };
[16:29:03] <cbreak> and in the c part, it'd be struct Dict;, without implementation
[16:29:09] <johnny> oh sorry.. i forgot most folks are probably in windows land.. !
[16:29:10] <LiaoTao> Is that ABI compatible?
[16:29:12] <cbreak> yes
[16:29:19] <LiaoTao> The more you know
[16:29:43] <cbreak> from C's point of view, it only ever handles Dict*
[16:29:45] <johnny> hmm.. so any you folks mess with xxd for binary files?
[16:29:48] <cbreak> and those are the same in C++
[16:29:52] <johnny> or similiar tools i suppose
[16:30:08] <John99> johnny, me, i work a lot with embed and old code
[16:30:17] <johnny> oh silly me.. i bet i did an off by one
[16:30:19] <johnny> hold up
[16:31:07] <johnny> yep.. that was it.. files start at line 1, arrays and such things tend to start at 0 :)
[16:31:30] <johnny> i was wondering if i was doing it wrong in gdb to print the vector position after reading the complete file into it
[16:31:53] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:2402:3824:89e9:f383)
[16:32:33] <johnny> i just copying the line number from the output of meld (xxd -c1 -p a/file.dat | psub ) (xxd -c1 -p b/file.dat | psub) &
[16:32:45] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[16:33:41] <johnny> hmm. i do wonder if there's a better way to approach this situation though
[16:34:30] <John99> the problem with taht is still the same LiaoTao, cbreak in some moment i will need declare a variable as Dict inside a c function, i suppose is not posible then?
[16:35:36] *** Joins: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz)
[16:35:48] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[16:36:00] <johnny> so this program tends to take an input bespoke binary format, and then generates an intermediate presentation and then converts that into something like excel or csv.  i found some problems, so i'm trying to debug it by going from binary in-> intermediate -> binary out on one of the files.
[16:36:32] <johnny> so i used that xxd output to get the positions where the data is different (via gui diff tool meld)
[16:36:35] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[16:38:36] <johnny> the program tends to read data from the vector in chunks at a time. is there some way i can find when it's reading in from a particular position in that vector in a debugger?
[16:38:36] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[16:38:47] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[16:39:08] <John99> watch address
[16:39:16] <John99> watch/awatch/rwatch
[16:39:22] <johnny> how does one know the address?
[16:39:29] <John99> x var
[16:39:43] <johnny> doesn't that watch the whole vector?
[16:39:48] <John99> in C yes
[16:40:01] <johnny> i didn't wanna do that if i could avoid it
[16:40:02] <John99> check the docu in c++ becouse i am not sure 100%
[16:40:25] <johnny> the vector is pretty large, so watching the whole thing wouldn't be much easier than simply stepping through the program
[16:40:39] <John99> i suppose that yes
[16:40:59] <John99> but as i told you, i am 100% sure in C, i am no so sure how work in C++
[16:41:05] <johnny> i think it works hte same there
[16:41:11] <cbreak> John99: as I said: C will only ever see pointers
[16:41:17] <cbreak> not variables of that type
[16:41:28] <cbreak> you do not need to declare a variable of that type in C, since you can not.
[16:41:50] <John99> ummm, okay, i understood now, i ahve to think is still usefull then
[16:42:10] <cbreak> C is not nearly as capable as c++ in value semantics
[16:42:32] <cbreak> and the value semantics it does have are not really sufficient for C++ interaction
[16:42:53] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[16:42:55] <John99> nore or less i think is normal
[16:44:06] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[16:44:24] <John99> well, i will think how survive until C have a real generic and cointainer type
[16:45:30] <LiaoTao> John99, What do you mean you can't declare a variable as dict?
[16:45:49] <LiaoTao> In my solution the struct is a pure C type that can have its definition included in the C translation units
[16:46:23] <LiaoTao> i.e. its size is known at compile time
[16:46:25] <John99> yes i know, i can add a level of indirection, but is the same, in de end Dict is a pointer
[16:46:40] <LiaoTao> Right, solution through indirection
[16:48:37] <cbreak> LiaoTao: your struct is also worthless
[16:48:48] <John99> yes, but taht mean that i have to add a call to create init every time i want use that even if i can live with taht is much less usefull, if i want use the heap i need 2 new functions for alloca, and even if i want "do it in automatic" i have to wrapp __attribute__((cleanup))
[16:48:50] <cbreak> might as well use a properly typed pointer directly
[16:48:59] <LiaoTao> cbreak, I beg to differ.
[16:49:34] <cbreak> wrapping the pointer into a struct doesn't give you anything
[16:50:02] <John99> anyway, i am not sure what i will do
[16:50:11] <John99> but thanks for your time :)
[16:50:13] <LiaoTao> cbreak, I beg to differ.
[16:50:39] <cbreak> Dict * dict = NULL; // direct pointer usage in C, limited type safety
[16:51:10] <cbreak> forgetting type safety and wrapping a struct around will make using it less safe and more complex
[16:51:22] <LiaoTao> John99, FWIW there are also some perverted things one can do with querying for object size and allocating it on the stack if that's an issue.
[16:51:55] <John99> yes, but i want repalce a functional dict class for a c++ dict class, if i have to do dirty tricks i am in the bad way
[16:52:15] <cbreak> LiaoTao: that's risky because of alignment
[16:52:23] <cbreak> you will have to query both alignment and size
[16:52:23] <LiaoTao> I did call it perverted.
[16:52:50] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[16:52:58] <cbreak> and you will still need a constructor function
[16:53:06] *** Joins: meator (~meator@user/meator)
[16:53:10] <cbreak> but really: native C libs use constructor functions all the time
[16:53:17] <cbreak> and destructor functions
[16:53:31] <cbreak> it's not that hard to see why a C++ lib wrapped in a C API also needs them
[16:53:53] <John99> yes yes
[16:54:20] <John99> but if i end with the same its not a big progressing and as johnny said, normal C developlers dont want C++
[16:54:35] <John99> i am simply studing the posibility
[16:54:54] <John99> if not big gain i not going to convinve no one to use that
[16:55:00] <John99> convince
[16:55:03] <cbreak> the primary reason to use C as C++ programmer is for ABI compatibility
[16:55:27] <cbreak> many C libraries use C++ behind the scenes, simply because C++ is a better language
[16:55:29] <John99> yep, but i am mainly a C programmer that is looking at C++ for make his life easier
[16:55:49] <cbreak> the API is small, so the required C glue code is not that big
[16:55:55] <cbreak> everything internal would be C++
[16:56:23] <John99> um, well, i really think (its sad) that in general c++ is better language that C
[16:56:41] <John99> but that is only becopuse C is really horrible XD
[16:56:53] <cbreak> it's because C improved
[16:56:58] <cbreak> at a glacial pace
[16:57:06] <Raziel> C improved?
[16:57:07] <cbreak> have you seen the minor changes they added since 99?
[16:57:21] <cbreak> and most of it is just copy-cat stuff from C++
[16:57:28] <John99> i know
[16:57:28] <LiaoTao> C isn't so bad unless you want to do <anything>
[16:57:29] <cbreak> Raziel: they got atomics and so on
[16:57:38] <John99> yep
[16:57:53] <pa> C++ has become perverted
[16:57:53] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[16:57:55] <Raziel> cbreak, atomics but still no threads other than native ones?
[16:57:56] <cbreak> C++ has changed much more, it has improved much faster.
[16:57:57] <John99> the C comunity is ver very resistant to change
[16:58:04] <cbreak> Raziel: can't have everything :P
[16:58:05] <Raziel> that's a big oof
[16:58:17] <cbreak> Raziel: they also added their own imitation of std::complex :P
[16:58:21] <johnny> John99, i think my advice was more in the realm of linux/unix than windows.. more people probably do it on windows than in linux
[16:58:25] <pa> John99: thanks God!
[16:58:28] <Raziel> John99, escape while you can. join us here on the dark side. we have cookies, and std::ranges
[16:58:33] <johnny> on linux thye invent glib
[16:58:48] <John99> johnny i am linux users, but in embed and low resusrces environment is not a option
[16:58:52] <John99> resources
[16:58:58] <johnny> how low resource?
[16:59:03] <cbreak> yeah. C++ is much more efficient than C
[16:59:09] <cbreak> especially thanks to templates
[16:59:13] <johnny> i mean i'm doing arm cortex m-0 with C++ just fine most of the time
[16:59:32] <John99> waht is nbot a option is load big libraries
[16:59:32] <johnny> of coure exceptions are rtti is disabled tho
[16:59:33] <cbreak> just compare c++ std::sort with c qsort
[16:59:35] <John99> not*
[16:59:36] <Raziel> cbreak, don't tell C people that, they might explode
[16:59:49] <ville> cbreak: that is not really an apples-to-apples comparison ever. just make all your c functions inline
[16:59:51] <johnny> i'm not loading big libraries.. i'm just using stuff like std::vector and friends just fine
[16:59:53] <cbreak> Raziel: it's ok, we're safe here in #c++-general
[17:00:05] <cbreak> ville: the problem's the genericity
[17:00:05] <johnny> no need for plain C
[17:00:07] <John99> johnny yes but glib is a bit librarie
[17:00:13] <John99> big
[17:00:16] <cbreak> qsort's generic via pointers and function pointers
[17:00:20] <johnny> i'm sayin for low resource environments you can still just use C++
[17:00:22] <ville> cbreak: inline
[17:00:31] <John99> i can use c++ i know
[17:00:33] <cbreak> inlining that stuff is much harder, since qsort is defined in some dynamic library
[17:00:43] <cbreak> you'd have to inline it at runtime, somehow
[17:00:47] <LiaoTao> I think many C developers want templates and basically nothing else from C++. At least that's what I want everytime I have to rewrite a tree implementation at a new company.
[17:00:50] <johnny> but for me.. it's nap time
[17:00:56] <John99> LiaTao
[17:00:57] <John99> nop
[17:01:13] <John99> we want a generic class and some way of more easy memory handle
[17:01:19] <ville> cbreak: again you're not doing an apples-to-apples then. to get near that you would do all inline including the sort "driver"
[17:01:29] <ville> cbreak: an optimizer happily inline that sort of indirection through a pointer-to-function
[17:01:29] <LiaoTao> John99, It's just that they don't know they want it. :P
[17:01:37] <cbreak> ville: I'm comparing idiomatic C with idiomatic C++
[17:01:59] <cbreak> the sort driver of C is in the C library in the form of qsort
[17:02:07] <cbreak> which is probably linked dynamically
[17:02:20] <cbreak> they could make qsort some form of macro I suppose
[17:02:27] <cbreak> but that's not what c chose
[17:02:36] <John99> no, is simply that you like templates and i like https://gustedt.wordpress.com/2021/10/18/type-safe-parametric-polymorphism/
[17:02:37] <ville> if i care that much about the performance i write it my self
[17:02:58] <John99> LiaoTao*
[17:03:12] <cbreak> -> c is not as fast as c++, unless you rewrite the stdlib yourself? :)
[17:03:39] <John99> no one compare never stdlib for measure c speed
[17:03:41] <John99> ...
[17:03:50] <cbreak> I'm quite sure that if I'd rewrite a sort function myself, it'd still not be as reliably fast as std::sort
[17:04:17] <cbreak> John99: isn't that what the first thing you'd want to compare? The standard library?
[17:04:26] <cbreak> the foundation on top of which everything else is built?
[17:04:42] <cbreak> the C stdlib is presumably created by those who know C the best
[17:05:09] <John99> really, i dont belive i am the best person for that discussion, but the sort answer is no
[17:05:18] <ville> cbreak: hah no. neither is c++'s standard library
[17:05:22] <John99> no compare C comunity and libraries with c++ please
[17:05:32] <John99> short answer*
[17:05:43] <cbreak> John99: then we get to use community C++ libs too
[17:06:42] <John99> are you going to compare the community library sqlite with?
[17:06:47] <ville> cbreak: really can't expect anything more than a mediocre implementation out of either language's standard library for any particular thing
[17:06:53] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[17:07:06] <cbreak> ville: we can expect more from c++ because it has better support for writing generic code
[17:07:26] <cbreak> we can expect more reusability
[17:07:52] <John99> yep, becouse every body now that in IT world reusability is the king
[17:07:56] <cbreak> and more performance, for those reusable components, due to the way reusability is provided
[17:08:27] <John99> we never never never begin projects from 0 or reinvent entire languages only for a task
[17:08:51] <cbreak> yeah. Only google or apple does that :)
[17:09:07] <cbreak> ... and mozilla...
[17:09:19] <John99> haskell python ryby...
[17:09:26] <John99> php
[17:09:28] <cbreak> those are old languages used in many fields
[17:09:42] <cbreak> well. Not sure about haskel and ruby
[17:09:49] <cbreak> but python seems to be popular in many places
[17:09:58] <LiaoTao> John99, Sure, people might want something lighter and less powerful than templates. No disagreement from me there.
[17:10:01] <cbreak> and php unfortunately too, for old web crap :(
[17:12:36] <John99> well, i ahve to think if i try move all to pointers or i keep the friendly simple C library
[17:12:36] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[17:13:12] <cbreak> heh
[17:13:17] <cbreak> friendly c library? :D
[17:13:51] *** Quits: Guest31 (~Guest31@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 256 seconds)
[17:14:03] <John99> yep, i dont need templates with i simply can reimplement all with a new tipe dict_get_char, dict_get_int, dict_get_floa
[17:14:26] <John99> #define dict_get _Generic() tarara
[17:14:31] <John99> XD
[17:16:12] <cbreak> John99: I've seen code like that once
[17:16:33] <cbreak> it was fairnly annoying to use, but the idea was to have a macro to define a type, and all associated functions
[17:16:48] <cbreak> kind of like a very crappy template system
[17:18:20] <John99> yep, i agree long time ago, C++ is better than C, but curiously majority ofC  developer dont like C++
[17:18:49] <John99> the C improvement at some point took some undesired direction for us
[17:20:42] <John99> in fact most linux development is still C
[17:20:56] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[17:21:00] <comrad> i still think that pascal has a better language design than C
[17:21:34] <comrad> c feels like a double sided sword but without any handlebar
[17:21:39] <John99> probably true, i agree long time ago taht C is horrible XD but you can feet a C compiler in a toaster
[17:21:45] <Raziel> if the majority of C developers did like C++, they wouldn't be C developers anymore, no?
[17:21:47] *** Joins: plastico (~plastico@neomutt/plastico)
[17:21:52] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[17:22:08] <cbreak> yeah. Developers that like a language will prefer to use it, if they can
[17:22:21] <cbreak> there's no technical reason to use C over C++, other than ABI compatibility
[17:22:24] <John99> ummm, true, ok, mostly of the developers prefer C ?
[17:22:39] <cbreak> I'd expect most C programmers to prefer C
[17:22:43] <Raziel> lol
[17:22:46] <cbreak> and most C++ programmers to prefer C++
[17:22:53] <comrad> cbreak: you can define a function to be callable with C interfaces from almost any native language
[17:23:01] <John99> cbreak, i can iamgine a few reasons no technical for prefer C :) XD
[17:23:03] <cbreak> comrad: I know
[17:23:10] <Raziel> did you know that a lot of programmers prefer Python? although, we're still unsure on whether a lot of people who use python are actually programmers or not
[17:23:21] <cbreak> that's ABI compatibility
[17:25:51] <John99> Raziel, i belive taht you cannot program too much in C or C++ without break something if you are not a real programmer...
[17:25:51] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[17:26:51] <Raziel> John99, I'd say that's pretty true, yes. way too many ways to shoot yourself in the nuts. although I guess if you somehow limit yourself to a very polite and safe subset, maybe, with C++, you could kinda get by?
[17:27:48] <John99> no, big part of the problem of C++ is that the "easy friendly subset" is really dificult of define
[17:28:02] <John99> and too much easy to go outside of that
[17:28:05] <Raziel> because it's not really supposed to be a subset in the first place
[17:29:17] <John99> yep, in fact in C is more easy, you only need asume that you will have memory leaks and its done XD
[17:30:07] <John99> anyway, off topic
[17:30:28] <John99> i am going to leave, ty guys, was a nice conversation :)
[17:30:47] <Raziel> have funziez
[17:31:06] *** Quits: John99 (~johnny@87.200.94.90.dynamic.jazztel.es) (Remote host closed the connection)
[17:33:39] <cbreak> C is hard because it's low level
[17:34:13] <cbreak> C++ makes this problem smaller, because it provides high level language features in addition... along with a lot more complexity, which makes C++ hard
[17:34:25] <cbreak> the two languages are hard for different reasons I think
[17:34:59] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[17:37:21] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:37:28] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:37:28] *** ChanServ sets mode: +v npaperbot
[17:38:42] *** Quits: meator (~meator@user/meator) (Ping timeout: 260 seconds)
[17:48:02] *** Quits: RoKenn (~RoKenn@user/rokenn) (Ping timeout: 260 seconds)
[17:48:02] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[17:56:31] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[17:56:54] *** Quits: shailangsa (~shailangs@host217-39-45-200.range217-39.btcentralplus.com) (Remote host closed the connection)
[18:08:06] *** Quits: frost (~frost@user/frost) (Ping timeout: 260 seconds)
[18:08:24] *** Quits: pa (~pah@user/pah) (Ping timeout: 268 seconds)
[18:11:38] *** Joins: pah (~pah@user/pah)
[18:12:50] *** Quits: peeps[zen] (~peepsalot@openscad/peepsalot) (Ping timeout: 260 seconds)
[18:16:31] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[18:16:39] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[18:17:02] *** Quits: pah (~pah@user/pah) (Ping timeout: 260 seconds)
[18:18:18] *** Quits: proller (~p@80.240.216.69) (Read error: Connection reset by peer)
[18:18:27] *** Joins: pah (~pah@user/pah)
[18:22:53] *** Joins: proller (~p@80.240.216.69)
[18:25:10] *** Quits: magla (~gelignite@55d47dc5.access.ecotel.net) (Quit: Stay safe!)
[18:25:36] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[18:28:23] *** Joins: peepsalot (~peepsalot@openscad/peepsalot)
[18:33:50] *** Joins: cart_man (~rynot@host-78-144-120-137.as13285.net)
[18:33:54] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:8872:6fff:30a7:51e0)
[18:34:39] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:37:25] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:21d2:19c0:e01b:f66c) (Ping timeout: 260 seconds)
[18:41:07] *** Joins: shailangsa (~shailangs@host217-39-45-200.range217-39.btcentralplus.com)
[18:53:20] *** Joins: ferdna (~ferdna@user/ferdna)
[18:53:20] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[18:56:13] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:6575:10df:b6d2:a414)
[18:56:13] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:6575:10df:b6d2:a414) (Changing host)
[18:56:13] *** Joins: skapata (~Skapata@user/skapata)
[19:02:10] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[19:06:25] *** Joins: magla (~gelignite@55d47dc5.access.ecotel.net)
[19:08:31] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[19:11:09] *** Quits: sunny93 (~sunny93@wireguard/tunneler/sunny93) (Quit: Ping timeout (120 seconds))
[19:11:10] *** Joins: RoKenn (~RoKenn@2001:a61:3505:d101:1303:fa27:a3f6:fead)
[19:11:10] *** Quits: RoKenn (~RoKenn@2001:a61:3505:d101:1303:fa27:a3f6:fead) (Changing host)
[19:11:10] *** Joins: RoKenn (~RoKenn@user/rokenn)
[19:11:26] *** Joins: sunny93 (~sunny93@wireguard/tunneler/sunny93)
[19:31:46] *** pah is now known as pa
[19:33:11] *** Quits: RoKenn (~RoKenn@user/rokenn) (Remote host closed the connection)
[19:33:32] *** Joins: RoKenn (~RoKenn@2001:a61:3505:d101:5e1c:11db:e7d8:c214)
[19:33:32] *** Quits: RoKenn (~RoKenn@2001:a61:3505:d101:5e1c:11db:e7d8:c214) (Changing host)
[19:33:32] *** Joins: RoKenn (~RoKenn@user/rokenn)
[19:40:34] *** Quits: cart_man (~rynot@host-78-144-120-137.as13285.net) (Ping timeout: 260 seconds)
[19:43:34] *** Joins: pulse (~pulse@user/pulse)
[19:43:34] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[19:43:52] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[19:52:15] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[19:56:35] *** Joins: Mooncairn (~mooncairn@user/mooncairn)
[20:04:34] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[20:24:33] *** Quits: RoKenn (~RoKenn@user/rokenn) (Remote host closed the connection)
[20:24:54] *** Joins: RoKenn (~RoKenn@2001:a61:3505:d101:d1c5:b67d:9f21:2d6a)
[20:24:54] *** Quits: RoKenn (~RoKenn@2001:a61:3505:d101:d1c5:b67d:9f21:2d6a) (Changing host)
[20:24:54] *** Joins: RoKenn (~RoKenn@user/rokenn)
[20:27:39] *** Joins: great_taste (~great_tas@190.32.235.20)
[20:32:43] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[20:32:50] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[20:33:27] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:2402:3824:89e9:f383) (Quit: Quit)
[20:34:42] *** Quits: pa (~pah@user/pah) (Ping timeout: 260 seconds)
[20:37:21] *** Joins: pah (~pah@user/pah)
[20:37:21] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[20:44:20] *** Joins: CaCode (~CaCode@user/cacode)
[20:46:52] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[20:48:38] *** Joins: cart_man (~rynot@cpc100914-uddi26-2-0-cust18.20-3.cable.virginm.net)
[20:49:34] <cart_man> Is the shorthand notation for an if()result; sensative to indentations or is it simple the first and only line it will include if the if body?
[20:53:11] *** Quits: Leone (~Leo@45.72.233.136) (Read error: Connection reset by peer)
[20:53:21] *** Joins: paul424 (~tom@ip-31-0-124-185.multi.internet.cyfrowypolsat.pl)
[20:53:38] <paul424> ohh universal-ctags is no more maintained for my distro, what can I do instead ?
[21:01:02] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[21:02:56] <TheGuestMovie> switch to a well-supported distro?
[21:09:12] <rpav> use clangd?
[21:15:40] *** Quits: BluesBoy (~bboy@stotz2.com) (Quit: leaving)
[21:16:23] *** Joins: BluesBoy (~bboy@stotz2.com)
[21:25:48] <yolo_> is it a good idea to enable -fanalyzer address-sanitizer etc for released code? or they should only be used for in-house debugging
[21:26:32] <yolo_> specifically, ASan, UBSan, -fanalyzer, and GLIBCXX_DEBUG
[21:26:40] <rpav> given it's like 3x slowdown and (iirc) a large size increase .. internal only probably
[21:26:54] <rpav> asan+ubsan is an even bigger slowdown
[21:27:18] <rpav> if you need clients to help debug something, maybe provide them with a debug binary then
[21:27:43] <rpav> also compiling with sufficient debug info may expose a lot of unwanted things about your code
[21:27:44] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[21:27:50] <yolo_> ok, what about -g, so if the app crashes at customer's place you can get some info to help debug, but, it could still be large/slow, like a tradeoff
[21:28:05] <rpav> you can compile with RelWithDebInfo
[21:28:50] <rpav> basically like -O2 -g .. sortof reasonable usability-but-has-source-lines tradeoff
[21:29:08] <yolo_> new to me, so far I'm using `-g -Og` as it's said `-Og` is better than `-O0`, the problem is that I really want to use -O2, but how useful when you do `-g -O2`
[21:31:00] <yolo_> RelWithDebInfo: optimized, *with* debug info, but no debug (output) code or asserts.
[21:31:09] <yolo_> looks like this is the one I should use
[21:31:29] <yolo_> RelWithDebInfo: `-O2 -g -DNDEBUG`
[21:31:38] <yolo_> MinSizeRel: `-Os -DNDEBUG`
[21:31:45] <yolo_> Release: `-O3 -DNDEBUG`
[21:31:50] <yolo_> Debug: `-O0 -g`
[21:31:55] <Alipha> cart_man: when you don't use {} after an if, the body is a single statement (until the ; )
[21:32:19] *** Joins: X-Scale` (~ARM@31.22.147.35)
[21:32:38] <rpav> if you can integrate something like https://github.com/bombela/backward-cpp it might be nicer too
[21:32:55] <Alipha> cart_man: newlines don't mean anything in c++, for the most part, except for the preprocessor (lines that begin with #)
[21:33:02] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 260 seconds)
[21:33:18] <Alipha> cart_man: and indentation doesn't mean anything either
[21:33:25] <rpav> or strings sadly, though there are multiline strings now
[21:33:41] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Quit: varioust)
[21:33:47] <Alipha> And // comments
[21:33:57] <rpav> don't those count as preprocessor
[21:33:58] <cart_man> Alipha: Ahh I see ok
[21:34:01] <cart_man> Thanks that makes sense
[21:34:23] *** X-Scale` is now known as X-Scale
[21:34:28] <rpav> c++ has like a bunch of phases and i'm not even sure what's where anymore
[21:34:45] *** Quits: psb (sid500598@user/psb) (Ping timeout: 260 seconds)
[21:35:19] *** Joins: pah_ (~pah@host-87-1-12-192.retail.telecomitalia.it)
[21:35:47] *** Quits: pah (~pah@user/pah) (Ping timeout: 264 seconds)
[21:35:51] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[21:36:14] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:1c07:22c7:b7d5:2c38) (Ping timeout: 260 seconds)
[21:36:47] *** Joins: psb (sid500598@user/psb)
[21:36:57] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[21:37:21] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:37:29] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:37:29] *** ChanServ sets mode: +v npaperbot
[21:38:39] <TheGuestMovie> Anyone here using osquery in their apps?
[21:39:16] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 245 seconds)
[21:41:18] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[21:41:45] *** Quits: wasd (~wasd@user/axis) (Ping timeout: 260 seconds)
[21:45:08] <xkoncek> the phases would be ok until the template instantiation phase which is weird and differes between compilers
[21:57:27] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:5933:ca1a:d2a4:f410)
[21:57:27] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[21:58:04] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Quit: varioust)
[22:00:59] *** pah_ is now known as pa
[22:01:17] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[22:01:23] *** Quits: pa (~pah@host-87-1-12-192.retail.telecomitalia.it) (Changing host)
[22:01:23] *** Joins: pa (~pah@user/pah)
[22:06:01] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[22:06:54] <yolo_> must disable -fanalyzer with g++-11 as it slows down the build process too much, like 5 mins comparing to 30 seconds
[22:07:08] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:2402:3824:89e9:f383)
[22:07:17] <TinoDidriksen> Never heard of osquery before, but that's quite a weird tool. A cross-platform query API makes sense, but exposing it as SQL is odd. Guess it works, given the project activity.
[22:09:44] <RandomReader> sounds similar in concept to WMI
[22:10:13] <RandomReader> although being built on sqlite, I think I'd like it better than WMI
[22:10:15] <TheGuestMovie> TinoDidriksen: https://paste.debian.net/plain/1217492 handy example
[22:10:32] *** Ameisen_ is now known as Ameisen
[22:10:51] <TheGuestMovie> reminds me of Powershell, if Powershell had caught on in Linux and could do more than just basic process and filesystem info
[22:11:03] <RandomReader> would have been nice to have around back when I was doing IT
[22:11:03] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[22:12:42] <LordKalma> !rq
[22:12:42] <nolyc> LordKalma: <Raziel> he thicc boyeeee
[22:12:44] <TheGuestMovie> TinoDidriksen: what better than SQL do you want, to make queries? I'd rather this than some custom language
[22:13:10] <Raziel> SQL is pretty thicc, yeah
[22:13:47] <LordKalma> "osquery is an operating system instrumentation framework for Windows, OS X (macOS), Linux, and FreeBSD. The tools make low-level operating system analytics and monitoring both performant and intuitive."
[22:13:48] <LordKalma> this?
[22:14:42] <TheGuestMovie> LordKalma: yes, see the paste I pasted above. basically, "your OS info as a bunch of SQL tables"
[22:14:49] <LordKalma> me learning Django to not use SQL
[22:14:56] <LordKalma> and you come here with a SQL engine for the OS
[22:15:58] <LordKalma> btw, we had that conversation about for example postgrest and etc. But I'm quite enjoying django
[22:16:02] <TheGuestMovie> dude you can learn the basics in less than 2 hours, and unlike <random framework> this is universal and used for all sorts of applications
[22:16:16] <LordKalma> yes, I know I know
[22:16:23] <LordKalma> but it's so great to get an api going
[22:16:35] <TheGuestMovie> For example you could save your stuff to a local SQLite file. And for a single process, performance in SQLite is on par with server databases like Postgres/MySQL
[22:17:28] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[22:17:30] <TheGuestMovie> SQLite even has full text search, but that's beyond SQL, it's a custom query language at that point
[22:17:37] <LordKalma> https://github.com/ruilvo/radioamadorismo-website/blob/master/backend/repetidores/models.py
[22:17:39] <LordKalma> this is so great
[22:17:42] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[22:17:56] <TheGuestMovie> nice documentation bro
[22:18:38] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[22:18:39] <LordKalma> if you know django that file is pretty much self documenting
[22:18:45] <TheGuestMovie> I do not :(
[22:19:10] <LordKalma> DecimalField, CharField, ForeignKey abstract column types
[22:19:13] <TheGuestMovie> I'm surprised the variables and strings are portuguese. English is not my native language either, but I always write in english
[22:19:23] <LordKalma> hahaha I usualyl write in english to
[22:19:27] <LordKalma> this is a small exception
[22:19:52] <LordKalma> I might change my mind later
[22:20:03] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[22:20:10] <LordKalma> classes themselves abstract tables
[22:20:12] <TheGuestMovie> dont worry about it. Hope this works out.
[22:20:59] <LordKalma> https://i.gyazo.com/6bcf36b60e928bcaf7a81cdf7414268e.png
[22:21:08] <LordKalma> the cool thing is how a REST API is pretty much free
[22:21:19] <TheGuestMovie> in Django?
[22:21:26] <LordKalma> yes
[22:22:45] <LordKalma> https://www.django-rest-framework.org/tutorial/quickstart/#serializers
[22:22:48] <LordKalma> it can be as simple as this
[22:24:38] <yolo_> i have -isystem for my huge catch.hpp that I never want -fanayzer -fsanitizer to check it(takes forever), I used -isystem path/to/catch.hpp trying to bypass the check, did not work, is there any other way to skip those external headers for the checks? is the only safe way "#pragma GCC diagnostic ignored "-fanalyzer" before "include catch.h"
[22:27:36] <RandomReader> considering both of them have to work on the compiled code, which naturally includes any #include copy-paste, I don't see how you could reasonably avoid that
[22:28:03] <RandomReader> the usual option is to build in a separate TU
[22:28:36] *** Quits: mgot (~mgot@vps-35cddd71.vps.ovh.net) (Quit: ZNC 1.8.2 - https://znc.in)
[22:28:46] *** Joins: mgot (~mgot@vps-35cddd71.vps.ovh.net)
[22:29:03] <RandomReader> although that wouldn't do anything for the sanitzers
[22:29:15] <yolo_> per catch.hpp instruction I put it into a small catch.cpp to avoid rebuild it, still, one-time build takes like 10 minutes
[22:29:48] <yolo_> for those external well-known large header files all I want is to use them without duplicate sanitizer/analyzer to check on them
[22:29:51] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[22:30:15] <RandomReader> but there's no duplication, they're being compiled
[22:31:15] <yolo_> you're right, no way to ignore sanitizers, as those are injected into the code
[22:31:22] <LordKalma> is that the header for catch2?
[22:31:25] <yolo_> i will just remove -fanalyzer and forgot about it
[22:31:39] <yolo_> LordKalma: yes, catch2 is essentially a header like 10000 lines
[22:31:46] <LordKalma> running with analysers and sanitizer is those things you should do every now and then
[22:32:04] <yolo_> normally it's only compiled once, the problem is now, with -fanalyzer, the one time compiler still takes forever
[22:32:20] *** Quits: Mooncairn (~mooncairn@user/mooncairn) (Ping timeout: 268 seconds)
[22:32:21] <LordKalma> if you're using cmake, for example, ideally you use 3.19, or even better 3.21 for the V3 schema and use a nice CMakePresets.json with those flags
[22:32:29] <LordKalma> and shove that on your CI and every now and then run the app with them
[22:32:29] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[22:33:04] <LordKalma> yolo_, my best recomendation is https://github.com/onqtam/doctest
[22:33:12] <LordKalma> look at https://github.com/onqtam/doctest/blob/master/scripts/data/benchmarks/header.png
[22:33:34] <LordKalma> the API is kinda similar to catch
[22:33:44] <LordKalma> (or so I've heard)
[22:35:15] <LordKalma> but anyway, with test frameworks you have a LOT of macros. With macros and templates you can't escape. Most of the stuff will be built into the code
[22:35:21] <RandomReader> wait, if catch2 is being built separately, and you don't use -fanalyzer for it, where is the slowdown coming from?
[22:35:23] <LordKalma> you can't escape compiler flags
[22:35:35] <LordKalma> can you *even* build catch2 separate?
[22:35:45] <LordKalma> like don't must you use the macros, aka, include the header anyway?
[22:36:17] <yolo_> LordKalma: I used doctest and liked it actually, I started to come back to catch2 recently
[22:36:39] <RandomReader> oh, wait, are you using the header-only version?
[22:36:53] <yolo_> doctest is good for 'smaller' project but catch2 provides more functions
[22:36:57] <yolo_> yes header only
[22:37:08] <RandomReader> try using the normal package instead
[22:37:30] <RandomReader> that way there should only be a lightweight header or two where you use it, instead of having to include the entire thing every time
[22:38:04] <RandomReader> (although this is assuming you're currently including it in multiple places .. otherwise we're back to my last question about where the slowdown is coming from)
[22:38:54] <yolo_> just got rid of -fanalyzer, life is good
[22:39:37] <yolo_> yes I could use subset of those giant headers, but I include the catch.hpp and spdlog.h (both are large) to save some hassle
[22:40:18] <RandomReader> it's costing you build time, so is it really saving you hassle?
[22:40:29] <RandomReader> (this is the tradeoff for "header only" stuff)
[22:41:05] <yolo_> maybe I should return to doctest.h indeed, catch2 seems so heavy and did not bring much. I was planning to use it benchmark stuff
[22:41:18] <yolo_> s/use it/use its/
[22:41:37] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[22:42:16] *** Joins: chris64 (~chris@user/chris64)
[22:42:22] *** Quits: chris64 (~chris@user/chris64) (Client Quit)
[22:53:41] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Quit: varioust)
[22:59:31] <TheGuestMovie> TinoDidriksen: osquery cant even show you a list of partitions and their capacity / used %. DROPPED! (ok not really, I'll keep it in mind in case I need OS info they cover in a pre-parsed format...but you can't rely on it entirely, it has gaps).
[22:59:44] <TheGuestMovie> the disk_info table is Windows-only
[23:00:08] *** Quits: mgot (~mgot@vps-35cddd71.vps.ovh.net) (Quit: ZNC 1.8.2 - https://znc.in)
[23:00:26] <TheGuestMovie> why must software always disappoint me?
[23:01:35] <Raziel> there's a thanos meme somewhere in there
[23:01:35] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[23:01:51] *** Joins: mgot (~mgot@vps-35cddd71.vps.ovh.net)
[23:03:34] *** Quits: shailangsa (~shailangs@host217-39-45-200.range217-39.btcentralplus.com) (Remote host closed the connection)
[23:03:49] <TheGuestMovie> I saw that movie but dont remember anything that relates to this
[23:04:00] *** Quits: mgot (~mgot@vps-35cddd71.vps.ovh.net) (Client Quit)
[23:04:20] <Raziel> there's a line that says "reality is often disappointing" which gets memed
[23:04:57] *** Quits: RoKenn (~RoKenn@user/rokenn) (Remote host closed the connection)
[23:05:07] *** Quits: pa (~pah@user/pah) (Ping timeout: 260 seconds)
[23:05:19] *** Joins: RoKenn (~RoKenn@2001:a61:3505:d101:d1c5:b67d:9f21:2d6a)
[23:05:19] *** Quits: RoKenn (~RoKenn@2001:a61:3505:d101:d1c5:b67d:9f21:2d6a) (Changing host)
[23:05:19] *** Joins: RoKenn (~RoKenn@user/rokenn)
[23:06:11] <TheGuestMovie> it's just...people still gotta parse "cat /proc/*" output in 2021 to get info about the OS. So it's not any simpler today than it was 20 years ago.
[23:06:25] <TheGuestMovie> (presumably, I dont know what Linux was like 20 years ago)
[23:07:17] *** Joins: mgot (~mgot@vps-35cddd71.vps.ovh.net)
[23:07:32] <TinoDidriksen> Why change what works? The paradigm "everything is a file" works.
[23:08:03] *** Joins: pah (~pah@user/pah)
[23:08:39] <TheGuestMovie> everyone doing their own unstructured text parsing is just not efficient
[23:08:51] <TheGuestMovie> I mean at least give the info in a structured schema
[23:10:16] <TheGuestMovie> I was googling, apparently systemctl has a JSON output flag, but because it outputs the plaintext version THEN the JSON, the output is not valid JSON. Kill me now! https://paste.debian.net/plain/1217499
[23:10:40] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[23:10:43] <TinoDidriksen> That's so hilariously systemd.
[23:10:54] *** Quits: mgot (~mgot@vps-35cddd71.vps.ovh.net) (Client Quit)
[23:11:07] <TheGuestMovie> "not my problem"  (Lennart probably)
[23:11:15] *** Joins: mgot (~mgot@vps-35cddd71.vps.ovh.net)
[23:13:00] <TheGuestMovie> LMAO https://github.com/systemd/systemd/issues/83
[23:14:40] <TheGuestMovie> basically only DBus is properly supported for systemd
[23:15:32] <TheGuestMovie> I mean, I have no beef with what Lennart is saying, but then why add JSON at all?
[23:16:53] <yolo_> Back to doctest, means I wasted 1.5 full days on catch2 switch. doctest is so much lighter, and it can finish all my code with -fanalyzer in less than 2 minutes, instead of 15+ minutes
[23:20:22] *** Quits: pah (~pah@user/pah) (Ping timeout: 260 seconds)
[23:24:08] *** Quits: TheGuestMovie (~TheGuestM@173.231.114.74) (Quit: Client closed)
[23:27:04] *** Quits: mgot (~mgot@vps-35cddd71.vps.ovh.net) (Quit: Goodbye)
[23:27:41] *** Joins: pah_ (~pah@host-79-49-135-16.retail.telecomitalia.it)
[23:28:17] *** Joins: mgot (~mgot@vps-35cddd71.vps.ovh.net)
[23:28:57] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[23:29:45] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Remote host closed the connection)
[23:29:46] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[23:30:08] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[23:30:41] *** Joins: ShiftyLogic (~shiftylog@66.115.146.16)
[23:32:19] *** Quits: mgot (~mgot@vps-35cddd71.vps.ovh.net) (Client Quit)
[23:32:36] *** Quits: luizfrds (~Luiz@152.250.243.147) (Read error: Connection reset by peer)
[23:33:20] *** Joins: mgot (~mgot@vps-35cddd71.vps.ovh.net)
[23:33:27] *** Quits: mgot (~mgot@vps-35cddd71.vps.ovh.net) (Remote host closed the connection)
[23:33:32] <paul424> may I ask here about gdb ?
[23:36:05] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:5933:ca1a:d2a4:f410) (Ping timeout: 260 seconds)
[23:36:16] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[23:36:33] *** Joins: mgot (~mgot@vps-35cddd71.vps.ovh.net)
[23:37:10] *** Quits: ShiftyLogic (~shiftylog@66.115.146.16) (Ping timeout: 260 seconds)
[23:37:54] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[23:38:13] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[23:38:21] <TinoDidriksen> Sure
[23:41:30] <paul424> something wrong happens with GDB :
[23:41:32] <paul424> I set :
[23:41:38] <paul424> gdb) break GameMap.cpp:854
[23:41:41] <paul424>  I get:
[23:41:51] <paul424> Breakpoint 1 at 0x58dc6a: file /home/tom/Opendungeons_github/OpenDungeonstomluchowski/source/gamemap/GameMap.cpp, line 867.
[23:42:52] <TinoDidriksen> What's the code on 854? Sometimes code is optimized out or otherwise not debuggable, so breakpoints go to next possible stop point.
[23:45:03] <paul424> aha... anyway that's an entire function >_> : https://pastebin.com/4QGHXh7x
[23:45:15] *** Joins: shailangsa (~shailangs@host217-39-45-200.range217-39.btcentralplus.com)
[23:45:43] <paul424> on that line is the first OD_LOG_INF(serverStr()  ...
[23:46:27] <TinoDidriksen> What build flags? Could be the function is inlined and lost to the debugger.
[23:46:50] *** Quits: cart_man (~rynot@cpc100914-uddi26-2-0-cust18.20-3.cable.virginm.net) (Quit: Konversation terminated!)
[23:47:02] <paul424> TinoDidriksen, yeah I just switched from RelWithDebug to Debug in cmake-gui
[23:49:08] <paul424> TinoDidriksen, yeah now it stops , where it should be , thanks
[23:49:31] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:1d19:ac87:3b13:4cf)
