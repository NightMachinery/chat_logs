[00:00:23] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 250 seconds)
[00:00:37] *** Joins: bkircher (~bkircher@2001:a61:25b1:b301:38c4:d8e7:23b0:bde5)
[00:02:08] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[00:06:50] *** Joins: kiril (~kiril@85.91.153.163)
[00:09:03] <fentanyl> KirkMcDonald: This was the time I ran the test file: https://paste.debian.net/plain/1215102
[00:09:56] <fentanyl> If it helps, this is the test file that i've used: https://termbin.com/1q9h
[00:09:57] <KirkMcDonald> So, line 58.
[00:10:39] <KirkMcDonald> The bit where you index with `stop_index+1`.
[00:11:02] <KirkMcDonald> What do you want to do if the stop_index refers to the last element of the slice?
[00:15:08] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[00:18:49] *** Joins: kiril (~kiril@85.91.153.163)
[00:28:29] <fentanyl> KirkMcDonald: If that's the case, I'm checking for that explicit case on in line 38. Sorry for delayed reply.
[00:28:47] <fentanyl> In that case, I'd just append to the end.
[00:34:04] <KirkMcDonald> fentanyl: But that isn't what line 38 checks.
[00:34:19] <KirkMcDonald> fentanyl: If stop_index equals the length, then that is one *past* the end.
[00:35:51] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[00:35:51] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[00:35:51] *** Joins: wroathe (~wroathe@user/wroathe)
[00:38:49] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fafc-123.dhcp.inet.fi) (Ping timeout: 252 seconds)
[00:39:19] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[00:42:48] *** Quits: tane (~tane@dslb-002-201-234-068.002.201.pools.vodafone-ip.de) (Quit: Leaving)
[00:44:17] <fentanyl> One one *past* the end? Hmm, I'm not sure why you mean by that though.
[00:45:28] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.2)
[00:46:03] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[00:46:42] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[00:48:00] <fentanyl> Since the loop terminates if `uuid_hash_output` is the largest on line 31 (since stop_index++)
[00:48:20] <fentanyl> And when that happens, which the 38 checks, we just append.
[00:48:33] <KirkMcDonald> fentanyl: Slices are zero-indexed. So valid indexes are between zero and *one less than* the length. So if it *equals* the length, that is one *past* the end.
[00:50:06] <KirkMcDonald> Your loop's condition is `stop_index < len(hash_ring.node_holder)`, which means that it terminates once the index equals the length.
[00:50:23] <fentanyl> ah, yeah. I see what you mean.
[00:51:29] *** Joins: kiril (~kiril@85.91.153.163)
[00:53:03] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[00:54:30] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[00:54:52] <fentanyl> So, I think this is the right condition right? `stop_index == (len(hash_ring.node_holder) - 1)` (I don't think so, Hmm..)
[00:55:05] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[00:55:18] <fentanyl> panic: runtime error: index out of range [1] with length 1 [recovered] panic: runtime error: index out of range [1] with length 1
[00:55:48] <fentanyl> I guess, this time I need to check at at line 49
[00:55:52] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[00:57:27] <fentanyl> I'm just curious, is this operation legal? `hash_ring.node_holder = temp_node_holder` (on line 57 for example)
[00:59:06] *** Joins: pepee (~pepee@user/pepee)
[01:01:12] <KirkMcDonald> Assignment to a struct field? Sure.
[01:06:18] *** Quits: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:06:58] *** Joins: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net)
[01:09:41] <fentanyl> KirkMcDonald: On the line 56, is there something wrong? I'm getting panic: runtime error: slice bounds out of range [2:1], I'm not sure why it's 2:1 (since if stop_index is 1, it would execute that special case above)
[01:10:43] *** Quits: whoami (~whoami@d118-75-170-49.try.wideopenwest.com) (Ping timeout: 252 seconds)
[01:13:17] *** Parts: src (~src@user/src) (Leaving)
[01:13:58] *** Joins: whoami (~whoami@d118-75-170-49.try.wideopenwest.com)
[01:18:22] *** tg_ is now known as tg
[01:18:49] *** Quits: Torr (~Torr@user/torr) ()
[01:18:51] *** Joins: Torr_ (~Torr@user/torr)
[01:18:56] *** Quits: Torr_ (~Torr@user/torr) (Client Quit)
[01:19:09] *** Joins: Torr (~Torr@user/torr)
[01:21:47] <fentanyl> Is this line incorrect? `hash_ring.node_holder[stop_index+1:]...`?
[01:22:18] <b0nn> fentanyl: is there a way you can experiment to find out?
[01:23:05] <fentanyl> b0nn: Yeah, I did. I tried writing a special if condition before that statement, but my assertion seems wrong.
[01:23:31] <fentanyl> I'm also new to using that `...` expresssion, so not quite sure.
[01:24:02] <b0nn> fentanyl: I really mean, jump on play.golang.org, write yourself a little testcase, only a few lines, that prove/disprove your hypothesis
[01:25:18] *** Joins: plasticmae (~plasticma@173.254.196.59.adsl.inet-telecom.org)
[01:26:02] *** Joins: foobaz212 (~foobaz212@host86-187-225-137.range86-187.btcentralplus.com)
[01:26:56] <fizzie> fentanyl: I haven't really been following, but if you want to *insert* X to a slice, generally you append together s[:n], X, and s[n:], *not* s[:n], X and s[n+1:].
[01:29:08] <fentanyl> fizzie: Yeah, you're right. I was doing a replacement operation instead. Like, when we need to replace the element at index `stop_index`, which I don't wanted to do.
[01:30:46] <fentanyl> This version passes the test: https://termbin.com/cx27 Although I guess we could write the same logic without those two if conditions...
[01:31:39] <fizzie> Yes, the insert operation should also work for n == 0 and n == len(s), because s[:0] and s[len(s):] are both valid empty slices.
[01:32:09] <fentanyl> I think we need n == len(s) - 1, isn't it?
[01:32:48] *** Quits: plasticmae (~plasticma@173.254.196.59.adsl.inet-telecom.org) (Remote host closed the connection)
[01:33:04] <fentanyl> Just for a background, this is a Consistent Hashing implementation (probably not the best one)
[01:33:36] *** Quits: Torr (~Torr@user/torr) (Quit: leaving)
[01:33:51] *** Joins: prologic (~prologic@mail.mills.io)
[01:34:30] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 260 seconds)
[01:34:35] <fizzie> Not if you want to insert at the very end.
[01:34:59] <prologic> Does anyone have any experience with a Go standard net/http server and http.ServeContent() serving large files like video behind Cloudflare? Specifically Safari and Mobile Safari b0rk and don't play the video and it has something to do with CF screwing up the client -> can -> origin somehow.
[01:35:28] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Ping timeout: 252 seconds)
[01:35:34] <fizzie> If you have s = []int{0, 1, 2}, there's four different locations you can insert a thing at (0, 1, 2, or 3), and for all of them the operation append(append(s[:n], 99), s[n:]...) will do it.
[01:36:03] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1006)
[01:37:32] <fizzie> Uh, except for the bit where the first append overwrites a bit of the slice. ;) I of course meant s[:n:n] there.
[01:37:39] <fentanyl>  a sec
[01:37:42] <fentanyl> im typing
[01:38:34] <fizzie> It's an asynchronous medium. But I did a small insert example at https://play.golang.org/p/pXOSVrOkZFa anyway.
[01:39:36] <fentanyl> Let's say `foo = []int{1, 2, 3, 4}` and let's say `s = 3 and len(foo) = 4`, so in the operation `bla = append(bla, foo[:3])`, this'd include {1, 2, 3} and we append so let's say 5 so it'd be {1, 2, 3, 5} and we do `bla = append(bla, foo[3:0])` so it'd append 4 so it's finally `{1, 2, 3, 5, 4}` which we don't want.
[01:40:05] <fentanyl> right?
[01:40:36] <fentanyl> oops
[01:40:42] <fentanyl> `bla = append(bla, foo[3:])`
[01:40:47] <fentanyl> (at the end)
[01:42:07] *** Quits: bkircher (~bkircher@2001:a61:25b1:b301:38c4:d8e7:23b0:bde5) (Ping timeout: 252 seconds)
[01:42:52] *** Joins: xzr (xzar@shell.troopers.fi)
[01:47:00] *** Quits: sztanpet (sztanpet@user/sztanpet) (Quit: asd)
[01:47:18] *** Joins: sztanp3t (sztanpet@user/sztanpet)
[01:47:42] *** sztanp3t is now known as sztanpet
[01:48:29] <xzr> hey fellows, I'm trying to figure out how to upload a file to minio and base64 encode it without reading the whole thing to memory. Minio works fine with reader interfaces but the encoding part of the base64 package (NewEncoder) only offers a writer and I can't wrap my head around how to make it work
[01:48:30] *** Quits: tuskkk____ (uid18470@id-18470.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[01:49:11] <xzr> I could ofc just encode the file to another file in base64 and that would solve the problem easily
[01:49:34] <xzr> but I've got an itch that there's probably a way to sort it out the other way and maybe learn a bit
[01:51:05] *** Quits: achilleas (ach@user/achilleas) (Quit: :wq)
[01:52:50] *** Joins: achilleas (ach@user/achilleas)
[01:54:46] *** Quits: theoceaniscool (~theoceani@119.12.232.133) (Ping timeout: 252 seconds)
[02:02:10] *** Joins: evocatus (~rg@84.51.113.13)
[02:03:22] <fentanyl> fizzie: any response?
[02:03:32] * fentanyl goes to sleep soon :) sorry....
[02:04:20] *** Quits: ItsNotGoodName (~ItsNotGoo@c-73-83-144-140.hsd1.wa.comcast.net) (Quit: The Lounge - https://thelounge.chat)
[02:05:05] *** Joins: ItsNotGoodName (~ItsNotGoo@c-73-83-144-140.hsd1.wa.comcast.net)
[02:05:06] <fizzie> fentanyl: I mean, it's up to you what you *do* want out of it.
[02:05:44] <fizzie> If you have {1, 2, 3, 4} and want to insert a 5 at index 3, then {1, 2, 3, 5, 4} sounds like the correct outcome.
[02:06:35] <fizzie> If you wanted {1, 2, 3, 4, 5} instead, then you'd insert at position 4 (equal to the length), and you'd get that.
[02:06:38] *** Joins: rcernin (~rcernin@144.132.209.31)
[02:11:56] *** Parts: prologic (~prologic@mail.mills.io) (Textual IRC Client: www.textualapp.com)
[02:12:47] *** Joins: PortableDave (~portabled@194-223-17-29.tpgi.com.au)
[02:16:35] *** Quits: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net) (Quit: Textual IRC Client: www.textualapp.com)
[02:24:07] *** Quits: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:25:02] *** Quits: ItsNotGoodName (~ItsNotGoo@c-73-83-144-140.hsd1.wa.comcast.net) (Quit: The Lounge - https://thelounge.chat)
[02:25:17] *** Joins: oldgalileo7 (~oldgalile@host-212-18-2-82.customer.m-online.net)
[02:25:21] *** Joins: ItsNotGoodName (~ItsNotGoo@c-73-83-144-140.hsd1.wa.comcast.net)
[02:25:49] <j416> xzr: io.Pipe
[02:26:35] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Ping timeout: 265 seconds)
[02:26:35] *** oldgalileo7 is now known as oldgalileo
[02:27:10] *** Quits: Vigdis (~danj@ns4.chown.me) (Quit: WeeChat 3.2.1)
[02:33:43] *** Joins: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net)
[02:36:22] *** Quits: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca) (Changing host)
[02:36:22] *** Joins: aportnoy (~aportnoy@user/aportnoy)
[02:37:52] *** Quits: aportnoy (~aportnoy@user/aportnoy) (Read error: Connection reset by peer)
[02:38:09] *** Joins: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca)
[02:43:43] *** Quits: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca) (Ping timeout: 252 seconds)
[02:43:53] *** Joins: Torr (~Torr@user/torr)
[02:45:55] *** Quits: hikhvar796073809 (~thelounge@x4db67fcf.dyn.telefonica.de) (Ping timeout: 265 seconds)
[02:47:55] *** Quits: Torr (~Torr@user/torr) (Client Quit)
[02:49:47] *** Quits: sono (~sono@dslb-178-010-208-031.178.010.pools.vodafone-ip.de) (Ping timeout: 265 seconds)
[02:51:05] *** Quits: internut (~internut@2601:280:4e00:7b70:5db0:1f2a:f127:bed1) (Remote host closed the connection)
[02:55:28] *** Joins: alphasierra (~as53@2405:201:e:4d:e91c:e3b8:9701:614f)
[02:55:31] *** Quits: alphasierra (~as53@2405:201:e:4d:e91c:e3b8:9701:614f) (Remote host closed the connection)
[02:56:05] *** Joins: alphasierra (~alphasier@2405:201:e:4d:e91c:e3b8:9701:614f)
[03:00:30] *** Joins: gcd (gd@104-9-69-236.lightspeed.nsvltn.sbcglobal.net)
[03:05:39] *** Joins: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca)
[03:05:45] *** Quits: tebruno99 (~tebruno99@user/tebruno99) (Quit: I'm out!)
[03:06:14] *** Quits: foobaz212 (~foobaz212@host86-187-225-137.range86-187.btcentralplus.com) (Quit: Client closed)
[03:06:27] *** Joins: foobaz212 (~foobaz212@host86-187-225-137.range86-187.btcentralplus.com)
[03:06:41] *** Quits: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca) (Changing host)
[03:06:41] *** Joins: aportnoy (~aportnoy@user/aportnoy)
[03:07:52] *** Joins: tebruno99 (~tebruno99@user/tebruno99)
[03:09:20] *** Quits: aportnoy (~aportnoy@user/aportnoy) (Client Quit)
[03:09:54] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1006) (Quit: ZNC 1.8.2 - https://znc.in)
[03:10:09] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1004)
[03:10:51] *** Quits: foobaz212 (~foobaz212@host86-187-225-137.range86-187.btcentralplus.com) (Ping timeout: 256 seconds)
[03:23:41] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[03:25:50] *** Joins: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca)
[03:26:07] *** Joins: internut (~internut@2601:280:4e00:7b70:5db0:1f2a:f127:bed1)
[03:26:12] *** Quits: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca) (Changing host)
[03:26:12] *** Joins: aportnoy (~aportnoy@user/aportnoy)
[03:27:13] *** Joins: foobaz212 (~foobaz212@host86-187-225-137.range86-187.btcentralplus.com)
[03:27:43] *** Quits: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu) (Ping timeout: 252 seconds)
[03:29:14] *** Joins: ahappydeath (~silbermm@dsl-74-83-53-157.fuse.net)
[03:30:27] *** Quits: pieguy128_ (~pieguy128@bras-base-mtrlpq5031w-grc-57-65-92-163-194.dsl.bell.ca) (Ping timeout: 240 seconds)
[03:30:42] *** Quits: internut (~internut@2601:280:4e00:7b70:5db0:1f2a:f127:bed1) (Ping timeout: 260 seconds)
[03:31:56] *** Quits: aportnoy (~aportnoy@user/aportnoy) (Quit: Leaving)
[03:32:20] *** Quits: ahappydeath (~silbermm@dsl-74-83-53-157.fuse.net) (Changing host)
[03:32:20] *** Joins: ahappydeath (~silbermm@user/ahappydeath)
[03:32:24] *** Quits: foobaz212 (~foobaz212@host86-187-225-137.range86-187.btcentralplus.com) (Ping timeout: 256 seconds)
[03:33:36] *** Quits: alphasierra (~alphasier@2405:201:e:4d:e91c:e3b8:9701:614f) (Remote host closed the connection)
[03:39:22] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca)
[03:42:35] *** Joins: alphasierra (~alphasier@2405:201:e:4d:e91c:e3b8:9701:614f)
[03:45:27] *** Quits: freakazoid343 (~matt@2603-9000-cf0f-80e3-a487-1497-3511-a6b2.inf6.spectrum.com) (Read error: Connection reset by peer)
[03:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[03:46:12] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:a487:1497:3511:a6b2)
[03:47:38] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[03:47:59] *** Joins: victori (~victori@cpe-76-174-179-126.socal.res.rr.com)
[03:48:16] *** Joins: lishanhui (~lishanhui@104-184-3-133.lightspeed.austtx.sbcglobal.net)
[03:50:49] *** Quits: normen (~normen@p200300d71739f200b0d60c49f26ce50e.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[03:52:39] *** Quits: lishanhui (~lishanhui@104-184-3-133.lightspeed.austtx.sbcglobal.net) (Ping timeout: 250 seconds)
[03:59:13] *** Quits: danderson (~dave@tailscale/danderson) (Quit: WeeChat 3.3)
[04:00:07] *** Quits: christophergray (~christoph@190.148.52.166) (Quit: WeeChat 3.3)
[04:06:34] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Quit: Leaving)
[04:20:23] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1004) (Quit: ZNC 1.8.2 - https://znc.in)
[04:22:24] *** Joins: normen (~normen@p200300d71739f200b0d60c49f26ce50e.dip0.t-ipconnect.de)
[04:28:14] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[04:29:59] *** Quits: alphasierra (~alphasier@2405:201:e:4d:e91c:e3b8:9701:614f) (Remote host closed the connection)
[04:31:29] *** Joins: alphasierra (~alphasier@2405:201:e:4d:e91c:e3b8:9701:614f)
[04:33:52] *** Joins: internut (~internut@2601:280:4e00:7b70:5db0:1f2a:f127:bed1)
[04:34:28] *** Quits: nostalgia (~nostalgia@c-24-13-122-176.hsd1.in.comcast.net) (Remote host closed the connection)
[04:36:26] *** Joins: Torr (~Torr@user/torr)
[04:37:23] *** Joins: arinov (~arinov@213.194.126.155)
[04:37:54] *** Joins: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[04:37:59] *** Joins: fikran (~fikran@user/fikran)
[04:38:26] *** Quits: internut (~internut@2601:280:4e00:7b70:5db0:1f2a:f127:bed1) (Ping timeout: 245 seconds)
[04:40:28] *** Quits: PortableDave (~portabled@194-223-17-29.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:41:58] *** Quits: normen (~normen@p200300d71739f200b0d60c49f26ce50e.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[04:46:47] *** Joins: Vigdis (~danj@ns4.chown.me)
[04:48:32] *** Quits: evocatus (~rg@84.51.113.13) (Quit: Konversation terminated!)
[04:55:40] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Ping timeout: 252 seconds)
[04:59:25] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[05:02:21] *** Joins: shtirlic (~shtirlic@95-55-26-134.dynamic.avangarddsl.ru)
[05:02:57] *** Joins: PortableDave (~portabled@194-223-17-29.tpgi.com.au)
[05:03:49] *** Quits: victori (~victori@cpe-76-174-179-126.socal.res.rr.com) (Quit: ZNC 1.8.2 - https://znc.in)
[05:04:09] *** Joins: victori (~victori@cpe-76-174-179-126.socal.res.rr.com)
[05:04:10] *** Quits: computerquip (sid423484@user/computerquip) (Ping timeout: 260 seconds)
[05:04:10] *** Quits: hhes (sid420846@ilkley.irccloud.com) (Ping timeout: 260 seconds)
[05:04:10] *** Quits: eruditass (uid248673@uxbridge.irccloud.com) (Ping timeout: 260 seconds)
[05:04:10] *** Quits: meinside (uid24933@helmsley.irccloud.com) (Ping timeout: 260 seconds)
[05:04:10] *** Quits: jimcroft_______ (sid148498@uxbridge.irccloud.com) (Ping timeout: 260 seconds)
[05:04:10] *** Quits: ddevault (znc@sourcehut/staff/ddevault) (Ping timeout: 260 seconds)
[05:04:20] *** Joins: jimcroft_______ (sid148498@id-148498.uxbridge.irccloud.com)
[05:04:45] *** Quits: fdv (sid27570@helmsley.irccloud.com) (Ping timeout: 260 seconds)
[05:04:45] *** Quits: sshow (~sshow@neo.hackeriet.no) (Ping timeout: 260 seconds)
[05:04:52] *** Quits: oz (~oz@crystal/user/oz) (Remote host closed the connection)
[05:04:55] *** Joins: sshow (~sshow@neo.hackeriet.no)
[05:05:00] *** Joins: ddevault (znc@sourcehut/staff/ddevault)
[05:05:07] *** Joins: ox (~oz@crystal/user/oz)
[05:05:08] *** Joins: hhes (sid420846@id-420846.ilkley.irccloud.com)
[05:05:10] *** Joins: computerquip (sid423484@user/computerquip)
[05:05:15] *** Joins: eruditass (uid248673@id-248673.uxbridge.irccloud.com)
[05:05:20] *** Quits: shtirlic_ (~shtirlic@95-55-26-134.dynamic.avangarddsl.ru) (Ping timeout: 260 seconds)
[05:05:20] *** Quits: wim (~wim@42.be) (Ping timeout: 260 seconds)
[05:05:20] *** Quits: f8e4 (~user@159.89.21.45) (Ping timeout: 260 seconds)
[05:05:23] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[05:05:34] *** Joins: wim (~wim@42.be)
[05:05:41] *** Joins: fdv (sid27570@id-27570.helmsley.irccloud.com)
[05:07:19] *** Joins: f8e4 (~user@159.89.21.45)
[05:10:47] *** Quits: krux02 (~krux02@p200300e81728d600319fb3a709c9a336.dip0.t-ipconnect.de) (Remote host closed the connection)
[05:11:48] *** Joins: frost (~frost@59.71.244.36)
[05:15:17] *** Joins: normen (~normen@p200300d71739f200b0d60c49f26ce50e.dip0.t-ipconnect.de)
[05:37:43] *** Joins: brainfreeze (~brainfree@2a03:1b20:4:f011::20d)
[05:43:08] <novns> they refuse to fix that annoying issue
[05:43:21] <novns> https://github.com/golang/go/issues/46415#issuecomment-940467116
[05:43:58] <novns> because "the function has worked this way since it was introduced"
[05:48:21] *** Joins: brnwx (~brnwx@cpe-74-71-226-69.nyc.res.rr.com)
[05:49:53] *** Quits: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:54:33] *** Joins: andlabs (~andlabs@2604:ca00:17c:15f1:18c6:60db:7b71:923a)
[05:55:37] *** Quits: ahappydeath (~silbermm@user/ahappydeath) (Ping timeout: 252 seconds)
[05:57:44] *** Quits: alphasierra (~alphasier@2405:201:e:4d:e91c:e3b8:9701:614f) (Remote host closed the connection)
[05:58:10] <b0nn> They have to - you complaint is the way it works isn't ... ideal in your opinion (I'm not arguing it is or it isn't), their response is, they can't change the behaviour without breaking anyone's code that relied on that behaviour
[05:58:17] <b0nn> your*
[05:59:35] <b0nn> The only reason they can change behaviour is if it does something dangerous, or isn't in alignment with the spec
[06:03:57] <seebs> The current behavior seems correct to me. It specifically states that it will return a copy, not the original slice.
[06:04:08] <seebs> And it's ridiculous for it to allocate to create an empty slice because it doesn't need to.
[06:04:59] <seebs> I think... if you want to distinguish between "empty slice" and "nil slice", that's not a thing stdlib is going to help with, because they're definitionally identical, and code relying on nil being a valid empty slice is all over.
[06:05:11] <seebs> and it'd suck for everyone else to have bytes.Replace suddenly cost 50x as much to execute in that case.
[06:06:01] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[06:08:07] *** Joins: cskr (~cskr@49.207.222.128)
[06:15:12] *** Quits: brnwx (~brnwx@cpe-74-71-226-69.nyc.res.rr.com) (Ping timeout: 265 seconds)
[06:22:20] *** Quits: brainfreeze (~brainfree@2a03:1b20:4:f011::20d) (Quit: Leaving)
[06:25:43] *** Joins: internut (~internut@2601:280:4e00:7b70:5db0:1f2a:f127:bed1)
[06:29:50] *** Quits: andlabs (~andlabs@2604:ca00:17c:15f1:18c6:60db:7b71:923a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:29:57] *** Quits: internut (~internut@2601:280:4e00:7b70:5db0:1f2a:f127:bed1) (Ping timeout: 250 seconds)
[06:32:19] *** Quits: Torr (~Torr@user/torr) (Remote host closed the connection)
[06:37:39] *** Joins: andlabs (~andlabs@70.107.171.168)
[06:44:38] *** Joins: be3uykpy_ (~be3uykpy@2a00:a040:19a:b060:f580:b0db:b1c7:c33d)
[06:45:18] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[06:47:20] *** Joins: fikran (~fikran@user/fikran)
[06:48:34] *** Quits: be3uykpy (~be3uykpy@2a00:a040:19a:b060:e0ad:98f3:5413:378e) (Ping timeout: 268 seconds)
[06:52:24] <zanshin> I installed Go on a Raspberry Pi. The version apt got me was 1.11. I then installed it from the latest tarball, 1.17.2. Unfortunately there are bits of the 1.11 install still in the way. I'm getting "gcc: error: unrecognized command line option '-marm'; did you mean '-fasm'" errors. What's the best way to completely eradicate 1.11?
[06:54:48] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[06:55:05] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[07:02:47] *** Quits: cskr (~cskr@49.207.222.128) (Quit: Leaving)
[07:07:14] *** Quits: xzr (xzar@shell.troopers.fi) (Ping timeout: 260 seconds)
[07:11:11] *** Quits: opcode (~nathan@user/opcode) (Quit: WeeChat 3.3)
[07:11:11] <kodah> i know i've been babbeling about desktop development in Go for a while now, but wails (https://github.com/wailsapp/wails) svelte (https://svelte.dev) and go are by far the simplest set i've come across
[07:15:45] *** Quits: LiftLeft (~LiftLeft@191.96.185.13) (Ping timeout: 265 seconds)
[07:16:45] *** Joins: girafe2 (~girafe@176-147-142-235.abo.bbox.fr)
[07:16:55] *** Joins: opcode (~nathan@user/opcode)
[07:18:38] <b0nn> zanshin: I think `dpkg-query -L <package name>` will show you all the files that were installed by apt
[07:18:53] <b0nn> typically though they should all be under /usr/local/go
[07:19:22] <b0nn> the problem you're having is the tools that get added with an install
[07:19:46] *** Quits: girafe (~girafe@176-147-142-235.abo.bbox.fr) (Ping timeout: 252 seconds)
[07:19:47] <b0nn> eg. `go build` or `go test`
[07:25:22] *** Joins: jpw (~jpw@user/jpw)
[07:26:15] <seebs> huh, interesting. i was looking at fyne for desktop apps.
[07:31:38] *** Joins: lishanhui (~lishanhui@104-184-3-133.lightspeed.austtx.sbcglobal.net)
[07:36:16] *** Quits: lishanhui (~lishanhui@104-184-3-133.lightspeed.austtx.sbcglobal.net) (Ping timeout: 252 seconds)
[07:43:46] *** Joins: LiftLeft (~LiftLeft@191.96.185.40)
[07:48:05] *** wkalt_ is now known as wkalt
[07:48:08] *** Quits: pepee (~pepee@user/pepee) (Quit: WeeChat 2.8)
[07:48:51] *** Quits: LiftLeft (~LiftLeft@191.96.185.40) (Ping timeout: 245 seconds)
[07:49:47] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[08:08:10] *** Quits: PortableDave (~portabled@194-223-17-29.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:20:04] *** Joins: PortableDave (~portabled@194-223-17-29.tpgi.com.au)
[08:24:45] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[08:26:20] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[08:30:16] *** Quits: c10l (~c10l@user/c10l) (Quit: The Lounge - https://thelounge.chat)
[08:30:30] *** Joins: c10l (~c10l@user/c10l)
[08:32:31] *** Joins: NaTaSa21F (~KELEBEK@95.70.207.169)
[08:36:00] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[08:49:55] *** Joins: internut (~internut@2601:280:4e00:7b70:5db0:1f2a:f127:bed1)
[08:52:11] *** Quits: zwr (~zwr@2804:d45:b966:fb00:ed01:e98c:8cbf:dcfe) (Ping timeout: 245 seconds)
[08:52:35] *** Quits: NaTaSa21F (~KELEBEK@95.70.207.169) (K-Lined)
[08:54:42] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[08:55:06] *** Quits: internut (~internut@2601:280:4e00:7b70:5db0:1f2a:f127:bed1) (Ping timeout: 245 seconds)
[08:56:39] *** Joins: fikran (~fikran@user/fikran)
[09:04:07] *** Joins: zwr (~zwr@2804:d45:b966:fb00:87cc:807d:892e:b4d5)
[09:07:04] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[09:12:51] *** Quits: be3uykpy_ (~be3uykpy@2a00:a040:19a:b060:f580:b0db:b1c7:c33d) (Quit: Leaving)
[09:13:40] *** Joins: idstam (~idstam@2.71.166.96.mobile.tre.se)
[09:15:54] *** Quits: idstam (~idstam@2.71.166.96.mobile.tre.se) (Client Quit)
[09:21:06] *** Joins: idstam (~idstam@2.71.166.96.mobile.tre.se)
[09:21:24] *** Quits: idstam (~idstam@2.71.166.96.mobile.tre.se) (Client Quit)
[09:23:55] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[09:23:55] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[09:23:55] *** Joins: wroathe (~wroathe@user/wroathe)
[09:28:28] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[09:29:38] *** Joins: jpw_ (~jpw@user/jpw)
[09:30:42] *** Joins: internut (~internut@2601:280:4e00:7b70:5db0:1f2a:f127:bed1)
[09:33:22] *** Quits: jpw (~jpw@user/jpw) (Ping timeout: 265 seconds)
[09:33:51] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 245 seconds)
[09:34:01] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 252 seconds)
[09:35:06] *** Quits: internut (~internut@2601:280:4e00:7b70:5db0:1f2a:f127:bed1) (Ping timeout: 245 seconds)
[09:38:29] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[09:40:01] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[09:49:22] *** Quits: jpw_ (~jpw@user/jpw) (Ping timeout: 252 seconds)
[09:50:21] *** Joins: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz)
[09:52:16] *** Joins: sizeof_void34 (~Thunderbi@109-252-124-86.nat.spd-mgts.ru)
[09:58:03] *** Quits: girafe2 (~girafe@176-147-142-235.abo.bbox.fr) (Read error: Connection reset by peer)
[10:00:33] *** Joins: idstam (~idstam@2.71.166.96.mobile.tre.se)
[10:01:38] *** Quits: hgl (hgl@67.230.181.248.16clouds.com) (Quit: Bye)
[10:03:28] *** Joins: hgl (hgl@67.230.181.248.16clouds.com)
[10:04:38] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (*.net *.split)
[10:04:38] *** Quits: c10l (~c10l@user/c10l) (*.net *.split)
[10:04:38] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (*.net *.split)
[10:04:38] *** Quits: andlabs (~andlabs@70.107.171.168) (*.net *.split)
[10:04:38] *** Quits: arinov (~arinov@213.194.126.155) (*.net *.split)
[10:04:38] *** Quits: ItsNotGoodName (~ItsNotGoo@c-73-83-144-140.hsd1.wa.comcast.net) (*.net *.split)
[10:04:38] *** Quits: rcernin (~rcernin@144.132.209.31) (*.net *.split)
[10:04:38] *** Quits: moto (~moto@user/moto) (*.net *.split)
[10:04:38] *** Quits: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl) (*.net *.split)
[10:04:39] *** Quits: MD87 (~MD87@user/md87) (*.net *.split)
[10:04:39] *** Quits: darkapex_ (~darkapex@user/darkapex) (*.net *.split)
[10:04:39] *** Quits: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net) (*.net *.split)
[10:04:39] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (*.net *.split)
[10:04:39] *** Quits: aarchi (sid486183@uxbridge.irccloud.com) (*.net *.split)
[10:04:39] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (*.net *.split)
[10:04:39] *** Quits: gjnoonan (sid95422@lymington.irccloud.com) (*.net *.split)
[10:04:39] *** Quits: cim (~cim@205.185.117.110) (*.net *.split)
[10:04:39] *** Quits: ztx (~ztx@user/ztx) (*.net *.split)
[10:04:39] *** Quits: mooff (~mooff@awful.cooking) (*.net *.split)
[10:04:39] *** Quits: Kane (~Kane@portal.yarg.fr) (*.net *.split)
[10:04:39] *** Quits: RaySl (~raysl@sdf1.xen.prgmr.com) (*.net *.split)
[10:04:39] *** Quits: markkuit_ (~markkuit@93-43-234-84.ip94.fastwebnet.it) (*.net *.split)
[10:04:39] *** Quits: lazyreader (~lazyreade@user/lazyreader) (*.net *.split)
[10:04:39] *** Quits: lux0r (~lux0r@65.56.68.34.bc.googleusercontent.com) (*.net *.split)
[10:04:39] *** Quits: henry40408 (~henry4040@112-104-97-56.adsl.dynamic.seed.net.tw) (*.net *.split)
[10:04:39] *** Quits: Balooga_ (sid407689@lymington.irccloud.com) (*.net *.split)
[10:04:39] *** Quits: Memory (sid459764@user/memory) (*.net *.split)
[10:04:39] *** Quits: telemachus (sid2004@helmsley.irccloud.com) (*.net *.split)
[10:04:39] *** Quits: csmarchbanks (~csmarchba@prometheus/team/csmarchbanks) (*.net *.split)
[10:04:39] *** Quits: eti (~eti@89.234.183.156) (*.net *.split)
[10:04:39] *** Quits: vhost- (~vhost@user/vhost-) (*.net *.split)
[10:04:39] *** Quits: nakedeyes (~nakedeyes@user/nandormagyar) (*.net *.split)
[10:04:39] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (*.net *.split)
[10:04:39] *** Quits: eyJhb (~eyJhb@user/eyjhb) (*.net *.split)
[10:04:39] *** Quits: since_ (d1cb7284cb@ircbox.informatik.uni-erlangen.de) (*.net *.split)
[10:04:39] *** Quits: connor_goodwolf (~connor@user/connor-goodwolf/x-2615606) (*.net *.split)
[10:04:39] *** Quits: nj (nicholas@stop.disconnecting.me) (*.net *.split)
[10:04:39] *** Quits: hendry (~hendry@210.23.22.2) (*.net *.split)
[10:04:39] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (*.net *.split)
[10:04:39] *** Quits: lack (~lack@user/lack) (*.net *.split)
[10:04:39] *** Quits: endigma (~endigma@134.41.124.82) (*.net *.split)
[10:04:39] *** Quits: jimeh (~jimeh@51.15.210.236) (*.net *.split)
[10:04:39] *** Quits: jolan (~jolan@ec2.jolan.org) (*.net *.split)
[10:04:39] *** Quits: Piraty (~irc@user/piraty) (*.net *.split)
[10:04:39] *** Quits: jsanford_ (~jsanford@lax.froop.com) (*.net *.split)
[10:04:39] *** Quits: CRThaze1 (~weechat@188.166.44.58) (*.net *.split)
[10:04:39] *** Quits: Artea (~Lufia@artea.com.pt) (*.net *.split)
[10:04:39] *** Quits: Ugrastil (~Ugrastil@89.40.112.204) (*.net *.split)
[10:04:39] *** Quits: mika (~mika@odysseus.grml.info) (*.net *.split)
[10:04:39] *** Quits: Fish (~Fish@cartwheel.9grid.fr) (*.net *.split)
[10:05:51] *** Quits: hgl (hgl@67.230.181.248.16clouds.com) (Changing host)
[10:05:51] *** Joins: hgl (hgl@user/hgl)
[10:06:28] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Remote host closed the connection)
[10:10:43] *** Joins: mrig (~mrig@user/mrig)
[10:17:40] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[10:20:33] *** Joins: kiril (~kiril@85.91.153.163)
[10:20:34] *** Quits: hgl (hgl@user/hgl) (Quit: Bye)
[10:21:16] *** Joins: hgl (hgl@67.230.181.248.16clouds.com)
[10:21:16] *** Quits: hgl (hgl@67.230.181.248.16clouds.com) (Changing host)
[10:21:17] *** Joins: hgl (hgl@user/hgl)
[10:23:32] *** Joins: danderson (~dave@tailscale/danderson)
[10:23:32] *** ChanServ sets mode: +v danderson
[10:26:26] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[10:26:26] *** Joins: c10l (~c10l@user/c10l)
[10:26:26] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[10:26:26] *** Joins: andlabs (~andlabs@70.107.171.168)
[10:26:26] *** Joins: arinov (~arinov@213.194.126.155)
[10:26:26] *** Joins: ItsNotGoodName (~ItsNotGoo@c-73-83-144-140.hsd1.wa.comcast.net)
[10:26:26] *** Joins: rcernin (~rcernin@144.132.209.31)
[10:26:26] *** Joins: moto (~moto@user/moto)
[10:26:26] *** Joins: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl)
[10:26:26] *** Joins: MD87 (~MD87@user/md87)
[10:26:26] *** Joins: darkapex_ (~darkapex@user/darkapex)
[10:26:26] *** Joins: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net)
[10:26:26] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[10:26:26] *** Joins: aarchi (sid486183@uxbridge.irccloud.com)
[10:26:26] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[10:26:26] *** Joins: gjnoonan (sid95422@lymington.irccloud.com)
[10:26:26] *** Joins: cim (~cim@205.185.117.110)
[10:26:26] *** Joins: ztx (~ztx@user/ztx)
[10:26:26] *** Joins: mooff (~mooff@awful.cooking)
[10:26:26] *** Joins: Kane (~Kane@portal.yarg.fr)
[10:26:26] *** Joins: RaySl (~raysl@sdf1.xen.prgmr.com)
[10:26:26] *** Joins: markkuit_ (~markkuit@93-43-234-84.ip94.fastwebnet.it)
[10:26:26] *** Joins: lazyreader (~lazyreade@user/lazyreader)
[10:26:26] *** Joins: lux0r (~lux0r@65.56.68.34.bc.googleusercontent.com)
[10:26:26] *** Joins: henry40408 (~henry4040@112-104-97-56.adsl.dynamic.seed.net.tw)
[10:26:26] *** Joins: Balooga_ (sid407689@lymington.irccloud.com)
[10:26:26] *** Joins: Memory (sid459764@user/memory)
[10:26:26] *** Joins: telemachus (sid2004@helmsley.irccloud.com)
[10:26:26] *** Joins: csmarchbanks (~csmarchba@prometheus/team/csmarchbanks)
[10:26:26] *** Joins: eti (~eti@89.234.183.156)
[10:26:26] *** Joins: vhost- (~vhost@user/vhost-)
[10:26:26] *** Joins: nakedeyes (~nakedeyes@user/nandormagyar)
[10:26:26] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[10:26:26] *** Joins: eyJhb (~eyJhb@user/eyjhb)
[10:26:26] *** Joins: since_ (d1cb7284cb@ircbox.informatik.uni-erlangen.de)
[10:26:26] *** Joins: connor_goodwolf (~connor@user/connor-goodwolf/x-2615606)
[10:26:26] *** Joins: nj (nicholas@stop.disconnecting.me)
[10:26:26] *** Joins: Artea (~Lufia@artea.com.pt)
[10:26:26] *** Joins: hendry (~hendry@210.23.22.2)
[10:26:26] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[10:26:26] *** Joins: lack (~lack@user/lack)
[10:26:26] *** Joins: endigma (~endigma@134.41.124.82)
[10:26:26] *** Joins: jimeh (~jimeh@51.15.210.236)
[10:26:26] *** Joins: jolan (~jolan@ec2.jolan.org)
[10:26:26] *** Joins: Piraty (~irc@user/piraty)
[10:26:26] *** Joins: jsanford_ (~jsanford@lax.froop.com)
[10:26:26] *** Joins: CRThaze1 (~weechat@188.166.44.58)
[10:26:26] *** Joins: Ugrastil (~Ugrastil@89.40.112.204)
[10:26:26] *** Joins: mika (~mika@odysseus.grml.info)
[10:26:26] *** Joins: Fish (~Fish@cartwheel.9grid.fr)
[10:28:45] *** Quits: ItsNotGoodName (~ItsNotGoo@c-73-83-144-140.hsd1.wa.comcast.net) (Max SendQ exceeded)
[10:28:45] *** Quits: Memory (sid459764@user/memory) (Max SendQ exceeded)
[10:29:07] *** Joins: ItsNotGoodName (~ItsNotGoo@c-73-83-144-140.hsd1.wa.comcast.net)
[10:29:12] *** Joins: Memory (sid459764@user/memory)
[10:34:05] *** Joins: saschagrunert (~saschagru@46.128.124.46)
[10:34:52] *** Joins: internut (~internut@2601:280:4e00:7b70:5db0:1f2a:f127:bed1)
[10:37:45] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[10:38:29] *** Quits: PortableDave (~portabled@194-223-17-29.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:39:25] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Ping timeout: 252 seconds)
[10:39:49] *** Quits: internut (~internut@2601:280:4e00:7b70:5db0:1f2a:f127:bed1) (Ping timeout: 268 seconds)
[10:41:19] *** Joins: kiril (~kiril@85.91.153.163)
[10:43:00] *** Joins: jla (~jordi@tao.ddns.jazztel.es)
[10:43:35] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[10:46:53] *** Joins: kiril (~kiril@85.91.153.163)
[10:50:19] *** Joins: Klunk (~Klunk@91-167-50-187.subs.proxad.net)
[10:50:37] *** Quits: Klunk (~Klunk@91-167-50-187.subs.proxad.net) (Changing host)
[10:50:37] *** Joins: Klunk (~Klunk@user/klunk)
[10:53:41] *** Joins: bkircher (~bkircher@2001:a61:25b1:b301:38c4:d8e7:23b0:bde5)
[10:56:07] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[10:58:27] *** Joins: gggpkm (~gggpkm@60.10.194.44)
[10:58:58] *** Quits: Klunk (~Klunk@user/klunk) (Quit: Client closed)
[10:59:49] *** Joins: kiril (~kiril@85.91.153.163)
[11:04:41] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[11:05:34] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[11:06:47] *** Joins: fikran (~fikran@user/fikran)
[11:08:49] *** Joins: kiril (~kiril@85.91.153.163)
[11:14:43] *** Joins: xzr (xzar@shell.troopers.fi)
[11:15:07] *** xzr is now known as Guest7254
[11:16:14] *** Guest7254 is now known as xzr
[11:18:39] *** Joins: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de)
[11:23:29] <novns> seebs, "they're definitionally identical" but they are not in the world of practical real usage
[11:24:01] <novns> it's like confusing "" with a NULL pointer in C
[11:24:38] <novns> I see no reason for this
[11:25:21] <novns> empty slice is an empty slice, nil slice is not
[11:25:58] <xzr> j416: I did look at io.Pipe, if I io.Copy to the writer then it doesn't actually copy the data into memory instantly but only when something starts using the reader?
[11:26:36] <novns> seebs, or they have to warn in the documentation with bold font and red color
[11:27:12] <novns> I wouldn't spend hours of debugging then
[11:28:37] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[11:31:35] *** Joins: kiril (~kiril@85.91.153.163)
[11:36:47] <andlabs> errr
[11:36:55] <andlabs> I'm fairly certain the idiomatic thing is to treat them as identical
[11:37:08] <andlabs> that's what the builtns do
[11:37:23] <andlabs> like if you're going to make a distinction there had better be a good reason
[11:37:42] *** Joins: cvemys (~cvemys@user/cvemys)
[11:41:15] *** Joins: internut (~internut@2601:280:4e00:7b70:5db0:1f2a:f127:bed1)
[11:43:04] <novns> andlabs, databases make distinctions, and we use them
[11:43:19] <novns> this is a pretty good reason
[11:44:34] <novns> databases treat empty strings '' and NULL values differently
[11:45:31] *** Quits: internut (~internut@2601:280:4e00:7b70:5db0:1f2a:f127:bed1) (Ping timeout: 245 seconds)
[11:45:35] *** Quits: teasea (~teasea@user/teasea) (Quit: teasea)
[11:45:56] *** Joins: teasea (~teasea@user/teasea)
[11:46:31] *** Joins: slowtyper (~slowtyper@user/slowtyper)
[11:53:31] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[11:54:37] <danieln> about my cgo problem from yesterday, I've narrowed it down a bit but I am still lost... I have an include in my C code that works if I have everything in the main package, but breaks when I try to do it from a module... any pointers what go run/cgo would be doing differently here?
[11:56:45] *** Joins: tdaeayusr^ (~tdaeayusr@wsip-70-165-23-55.mc.at.cox.net)
[11:57:50] <andlabs> but does your specific database need to?
[11:58:00] <danieln> I think its got to do with this funny construction maybe, any C wizz here to help me out? I'm trying to get to bcc/proto.h from cgo basically... https://github.com/iovisor/bcc/blob/master/src/cc/exported_files.cc
[11:58:29] *** Joins: kiril (~kiril@85.91.153.163)
[12:00:34] <sztanpet> that aint c chief
[12:00:40] <b0nn> novns: Databases treat booleans as tri-state though
[12:01:21] <b0nn> I mean, what is a null boolean if it isn't false?
[12:02:37] <novns> andlabs, yes, there is the distinction of "we have no value here" and "we have a value, possible empty but that's not our problem"
[12:03:21] <novns> b0nn, any expression that involves NULL values return NULL
[12:03:55] <b0nn> what is a null boolean?
[12:04:03] <b0nn> it's a NONSENSE
[12:04:23] <novns> b0nn, it's a boolean that value was not set
[12:04:34] <b0nn> then it's not a boolean
[12:04:37] <novns> it means there no any value in this field
[12:04:48] <novns> *there are no
[12:04:53] <b0nn> A boolean can only have two states.
[12:05:06] <novns> NULL is not boolean
[12:05:21] <b0nn> Your database type system representing something that isn't boolean and calling it a boolean is a problem.
[12:05:25] <novns> NULL works for any types
[12:05:31] <b0nn> no.
[12:06:28] <novns> b0nn, imagine you have a table of persons with the field "alive", and for some persons you don't know yet
[12:06:36] <novns> so there you put NULLs
[12:06:39] <b0nn> no.
[12:06:52] <b0nn> I have a type that has two TWO possible states
[12:06:55] <b0nn> not 3
[12:07:13] <b0nn> assume you understand what boolean is.
[12:07:33] <novns> you have two states and "no state at all"
[12:07:37] <novns> additionally
[12:07:41] <b0nn> three != two
[12:07:55] <novns> ye
[12:07:57] <novns> yes
[12:08:02] <b0nn> ???
[12:08:04] <novns> two and NULL
[12:08:08] *** Joins: alzgh (~alzgh@user/alzgh)
[12:08:11] <novns> two different things
[12:08:19] <b0nn> so.. three... which means it's not a boolean type
[12:08:40] <novns> b0nn, are you reinventing databases or what?
[12:08:53] <b0nn> you're whining about Go's type system
[12:09:10] <b0nn> And I'm showing you that the DB type system is just as screwed
[12:09:15] <novns> b0nn, how would you keep fields that have to store NULL state additionally?
[12:09:33] <b0nn> but - instead of accepting both of them are fallible, you want to make excuses
[12:09:44] <novns> that's real life
[12:09:46] <b0nn> Booleane == two states
[12:10:11] <b0nn> oh, so you understand "real life" Yay, that means you've built a little bridge about the null string
[12:10:24] <novns> b0nn, how would you a record for a person with the field "alive"?
[12:10:39] <novns> *would you keep
[12:11:03] <b0nn> I would spend months complaining about something that nobody cared about
[12:11:04] <novns> you cannot store false or true there if you don't know
[12:11:19] <b0nn> yes, you can store "false" because it's not true
[12:11:23] <danieln> sztanpet: cpp anyways, but the build tooling is close enough no? I mainly wonder what go run does differently in a main package... it works flawlessly before the following commit, but fails after (and obviously to when the package from elsewhere) https://github.com/bwNetFlow/bpfdump/commit/4107f924d6ecc7f0888546a663965b39834feb6f
[12:11:27] <novns> there are no default choices
[12:11:33] <b0nn> says who?
[12:11:44] <b0nn> you're claming null is the default choice
[12:11:55] <novns> yes
[12:12:00] <novns> it means "unknown"
[12:12:04] <novns> says logic of your app
[12:12:05] <b0nn> 19:41 < novns> there are no default choices
[12:12:31] <novns> there are no default choices of true or false
[12:12:42] <b0nn> If there is no p[erson, there's no life state to keep ;)
[12:13:15] <novns> there is a person, but you don't know is it alive or dead
[12:13:32] <b0nn> He's false unless I am told otherwise
[12:13:59] <novns> so you will send condolences to relatives of alive person
[12:14:10] <b0nn> Since when?
[12:14:19] <b0nn> I send them on time of death
[12:14:26] <b0nn> and anniversary of death
[12:14:32] <novns> you know what I mean
[12:14:36] <b0nn> not every second of every day
[12:14:42] <b0nn> nope, false.
[12:14:52] <novns> you have to know the state clearly before you do actions
[12:14:56] <b0nn> nope
[12:15:08] <novns> you cannot suggest that a person has passed if you not sure
[12:15:13] <b0nn> null would be treated as false
[12:15:23] <novns> not acceptable in real situations
[12:15:28] <b0nn> since when
[12:15:36] <b0nn> Dear John of unknown life status
[12:15:52] <b0nn> We don't know if you live or die, so we aren't billing you
[12:15:55] <novns> the same for string values (Go libs use slices for them)
[12:16:04] <b0nn> ?????
[12:16:15] <b0nn> False.
[12:16:16] *** Quits: jla (~jordi@tao.ddns.jazztel.es) (Ping timeout: 252 seconds)
[12:16:44] <novns> you have a form on a website, and you have to know wether some field was posted or not
[12:16:50] <b0nn> Dear unknown name of unknown status of unknown address - we don't know what a not null field is
[12:17:02] <novns> and it could be posted with "empty" value
[12:17:11] <novns> but still posted
[12:17:16] <b0nn> so, there's this thing cvalled "Validation"
[12:17:23] <novns> or not posted at all, that's nil
[12:17:25] <b0nn> You should look it up
[12:17:49] <novns> b0nn, you are trolling, goodbye
[12:17:57] <b0nn> bye felicia
[12:21:43] *** Quits: cvemys (~cvemys@user/cvemys) (Ping timeout: 252 seconds)
[12:23:53] *** Joins: cvemys (~cvemys@user/cvemys)
[12:26:49] *** Joins: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu)
[12:30:06] *** Quits: bfsuns2k[m] (~bfsuns2km@2001:470:69fc:105::e4ed) (Quit: You have been kicked for being idle)
[12:30:49] <baakeydow> hello I'm at the very beginning of learning go and I feel like there is a design pattern in this simple snippet https://play.golang.org/p/fuc7Ri67hek but I'm not sure... is there really one or is it just the way go makes oop possible ?
[12:31:03] *** Quits: idstam (~idstam@2.71.166.96.mobile.tre.se) (Quit: WeeChat 2.8)
[12:32:58] <b0nn> So, Go isn't "OOP" - you're looking at using an interface, which is the same (I think) in Java
[12:33:35] *** Joins: idstam (~idstam@2.71.166.96.mobile.tre.se)
[12:33:43] <b0nn> I /think/ you're fishing around trying to learn inheritance (which Go does not have) but what you use instead is Composition
[12:33:48] *** Joins: normen_ (~normen@p54b35338.dip0.t-ipconnect.de)
[12:34:05] <b0nn> But your example isn't at that point just yet
[12:34:07] *** Quits: mmk2410 (~mmk2410@user/mmk2410) (Quit: ZNC - https://znc.in)
[12:34:58] *** Joins: mmk2410 (~mmk2410@user/mmk2410)
[12:35:31] *** Quits: normen (~normen@p200300d71739f200b0d60c49f26ce50e.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[12:35:33] *** normen_ is now known as normen
[12:37:58] *** Quits: j00n (~mario@user/j00n) (Remote host closed the connection)
[12:40:26] *** Quits: normen (~normen@p54b35338.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[12:44:23] *** Quits: slowtyper (~slowtyper@user/slowtyper) (Quit: WeeChat 3.2.1)
[12:45:55] *** Quits: arinov (~arinov@213.194.126.155) (Quit: WeeChat 3.1)
[12:46:24] *** Joins: internut (~internut@2601:280:4e00:7b70:5db0:1f2a:f127:bed1)
[12:46:57] *** Joins: normen (~normen@p54b35c25.dip0.t-ipconnect.de)
[12:50:36] *** Quits: johncs (~johncs@2604:a880:2:d0::216b:f001) (Quit: bye)
[12:50:55] *** Joins: johncs (~johncs@2604:a880:2:d0::216b:f001)
[12:51:05] *** Quits: internut (~internut@2601:280:4e00:7b70:5db0:1f2a:f127:bed1) (Ping timeout: 264 seconds)
[12:51:27] *** Joins: gggpkm_ (~gggpkm@60.10.23.168)
[12:51:47] *** Quits: normen (~normen@p54b35c25.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[12:51:58] *** Joins: arinov (~arinov@213.194.126.155)
[12:52:15] *** Joins: cnf5 (~cnf@d5152daf0.static.telenet.be)
[12:52:48] *** Quits: cnf (~cnf@d5152daf0.static.telenet.be) (Read error: Connection reset by peer)
[12:52:49] *** cnf5 is now known as cnf
[12:53:15] *** Joins: normen (~normen@pd9eeccba.dip0.t-ipconnect.de)
[12:54:26] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[12:54:41] *** Quits: gggpkm (~gggpkm@60.10.194.44) (Ping timeout: 245 seconds)
[12:54:46] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[12:57:57] *** Quits: normen (~normen@pd9eeccba.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[12:58:58] *** Joins: gggpkm__ (~gggpkm@60.10.194.44)
[13:00:27] *** Quits: holgersson (~quassel@user/holgersson) (Quit: “Format C:........[Done]“)
[13:02:16] *** Quits: gggpkm_ (~gggpkm@60.10.23.168) (Ping timeout: 268 seconds)
[13:03:25] *** Joins: normen (~normen@p200300d71738d800d57b1c742325b6b1.dip0.t-ipconnect.de)
[13:05:58] *** Joins: azidhaka (~azidhaka@user/azidhaka)
[13:06:15] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[13:07:22] *** Quits: rcernin (~rcernin@144.132.209.31) (Ping timeout: 252 seconds)
[13:09:16] *** Quits: normen (~normen@p200300d71738d800d57b1c742325b6b1.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[13:09:29] *** Joins: kiril (~kiril@85.91.153.163)
[13:10:26] <azidhaka> Could someone recommend good and current book to begin Go? I have intermediate Perl and Python experience.
[13:11:09] <azidhaka> What do you think of The Go Programming Language by Brian Kernighan?
[13:12:49] *** Joins: sono (~sono@dslb-178-010-208-031.178.010.pools.vodafone-ip.de)
[13:13:28] <albertito> azidhaka: that is a good book, also do the Go tour and read Effective Go (both online on golang.org), and you're good to go :P
[13:13:46] <azidhaka> albertito: thanks
[13:13:58] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[13:16:08] *** Joins: fikran (~fikran@user/fikran)
[13:16:12] *** Joins: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de)
[13:16:19] *** Joins: holgersson (~quassel@user/holgersson)
[13:17:10] <albertito> azidhaka: also, fwiw, I would do tour first, then Effective go, and finally that book
[13:17:27] <azidhaka> albertito: that was my plan too
[13:17:34] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:c181:67d5:2696:f424)
[13:22:33] <baakeydow> thank you b0nn to have taken the time to answer me, what is missing to have the "full" Composite pattern ?
[13:22:57] *** Joins: rcernin_ (~rcernin@144.132.209.31)
[13:24:53] <baakeydow> b0nn I just found this https://refactoring.guru/design-patterns/composite/go/example and it seems pretty much the same to me, what am I missing ?
[13:25:01] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:c181:67d5:2696:f424) (Ping timeout: 252 seconds)
[13:25:03] *** Quits: holgersson (~quassel@user/holgersson) (Quit: “Format C:........[Done]“)
[13:25:20] *** Quits: mooff (~mooff@awful.cooking) (Quit: Quit)
[13:26:41] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[13:28:52] *** Quits: k0ta (~k0ta@151.210.173.1) (Ping timeout: 252 seconds)
[13:29:23] *** Joins: kiril (~kiril@85.91.153.163)
[13:29:50] *** Quits: azidhaka (~azidhaka@user/azidhaka) (Remote host closed the connection)
[13:29:51] *** Joins: mooff (~mooff@awful.cooking)
[13:30:03] *** Joins: azidhaka (~azidhaka@user/azidhaka)
[13:36:01] *** Quits: mooff (~mooff@awful.cooking) (Quit: Quit)
[13:36:42] *** Joins: mooff (mooff@awful.cooking)
[13:42:29] *** Joins: gggpkm_ (~gggpkm@60.10.194.44)
[13:44:56] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[13:45:27] *** Quits: gggpkm__ (~gggpkm@60.10.194.44) (Ping timeout: 250 seconds)
[13:46:56] *** Joins: kiril (~kiril@85.91.153.163)
[13:53:04] *** Quits: cvemys (~cvemys@user/cvemys) (Ping timeout: 252 seconds)
[13:55:16] *** Quits: rcernin_ (~rcernin@144.132.209.31) (Ping timeout: 252 seconds)
[13:59:18] *** Quits: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu) (Ping timeout: 260 seconds)
[13:59:56] *** Joins: rcernin_ (~rcernin@144.132.209.31)
[14:03:05] *** Joins: ayrus (~ayrus@user/ayrus)
[14:03:24] *** Parts: ayrus (~ayrus@user/ayrus) ()
[14:04:45] *** Joins: slowtyper (~slowtyper@user/slowtyper)
[14:07:16] <j416> xzr: correct. there is no buffering for io.Pipe.
[14:25:43] <dostoyevsky2> are interfaces a bit like classes in other languages?  so structs+methods?
[14:27:05] <ikke> interfaces are like interfaces
[14:27:24] <ikke> They only specify method signatures
[14:27:32] <ikke> no implementation
[14:27:37] <dostoyevsky2> like interfaces in java?
[14:28:05] <dostoyevsky2> so a struct can implement an interfce?
[14:28:06] *** Joins: normen (~normen@p54b35b24.dip0.t-ipconnect.de)
[14:29:03] <ikke> dostoyevsky2: yes, by convention
[14:29:53] <ikke> you cannot mark a struct implementing an interface, you just add the required methods
[14:29:54] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[14:30:02] <fizzie> More commonly, a pointer to struct might implement an interface.
[14:33:43] *** Quits: normen (~normen@p54b35b24.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[14:33:59] *** Joins: krux02 (~krux02@p200300e81728d600319fb3a709c9a336.dip0.t-ipconnect.de)
[14:34:06] *** Joins: kiril (~kiril@85.91.153.163)
[14:36:10] *** Joins: fub (uid190747@id-190747.ilkley.irccloud.com)
[14:36:45] *** Joins: normen (~normen@pd9eec5e6.dip0.t-ipconnect.de)
[14:41:20] *** Quits: slowtyper (~slowtyper@user/slowtyper) (Quit: ZNC 1.8.2 - https://znc.in)
[14:41:37] *** Joins: slowtyper (~slowtyper@user/slowtyper)
[14:41:58] *** Quits: normen (~normen@pd9eec5e6.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[14:47:51] *** Joins: normen (~normen@p54899811.dip0.t-ipconnect.de)
[14:48:11] *** Joins: NeoCron (~NeoCron@p200300c4cf195d00df9b3d9f9a455325.dip0.t-ipconnect.de)
[14:52:51] *** Quits: normen (~normen@p54899811.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[14:54:32] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[14:54:57] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[14:55:26] *** Quits: krux02 (~krux02@p200300e81728d600319fb3a709c9a336.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:55:54] *** Quits: slowtyper (~slowtyper@user/slowtyper) (Quit: ZNC 1.8.2 - https://znc.in)
[14:56:11] *** Joins: slowtyper (~slowtyper@user/slowtyper)
[14:58:06] *** Joins: normen (~normen@p54b3576f.dip0.t-ipconnect.de)
[14:58:09] *** Quits: rcernin_ (~rcernin@144.132.209.31) (Quit: WeeChat 3.3)
[14:59:34] *** Joins: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu)
[15:00:16] *** Quits: haliucinas (~haliucina@5.20.153.21) (Remote host closed the connection)
[15:02:52] *** Quits: normen (~normen@p54b3576f.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[15:03:23] *** Quits: slowtyper (~slowtyper@user/slowtyper) (Quit: ZNC 1.8.2 - https://znc.in)
[15:03:41] *** Joins: slowtyper (~slowtyper@user/slowtyper)
[15:04:39] *** Joins: normen (~normen@p54899112.dip0.t-ipconnect.de)
[15:05:40] *** Joins: haliucinas (~haliucina@5.20.153.21)
[15:07:21] *** Quits: dza (~dza@user/dza) (Ping timeout: 265 seconds)
[15:08:53] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[15:09:07] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[15:10:56] *** Quits: normen (~normen@p54899112.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[15:12:04] *** Quits: azidhaka (~azidhaka@user/azidhaka) (Quit: azidhaka)
[15:12:59] *** Joins: normen (~normen@p54b35380.dip0.t-ipconnect.de)
[15:13:21] *** Joins: j00n (~mario@user/j00n)
[15:19:19] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[15:19:55] *** Quits: tdaeayusr^ (~tdaeayusr@wsip-70-165-23-55.mc.at.cox.net) (Remote host closed the connection)
[15:22:22] *** Quits: normen (~normen@p54b35380.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[15:23:23] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 246 seconds)
[15:25:29] *** Joins: fikran (~fikran@user/fikran)
[15:29:22] *** Joins: Atque (~Atque@user/atque)
[15:31:19] *** Joins: normen (~normen@p54b349d0.dip0.t-ipconnect.de)
[15:34:10] <iivvoo> given a context, it's not possible to use it as expression on a for-loop to keep looping until done? `for _ = range ctx.Done() { .. }`?
[15:35:52] <iivvoo> hmm right, I guess reading from ctx.Done() blocks until actually done
[15:37:58] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[15:40:59] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[15:43:57] *** Joins: neurocyte0132889 (~neurocyte@IP-185189142238.dynamic.medianet-world.de)
[15:43:57] *** Quits: neurocyte0132889 (~neurocyte@IP-185189142238.dynamic.medianet-world.de) (Changing host)
[15:43:57] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[15:52:07] <siXy> iivvoo: You want select for that.
[15:53:31] <siXy> for { select { case ctx.Done(): return; default: dothing; } }
[15:54:10] *** Joins: xiongxin (~quassel@113.116.34.92)
[16:01:40] *** Joins: normen_ (~normen@p54b3553f.dip0.t-ipconnect.de)
[16:02:49] *** Quits: normen (~normen@p54b349d0.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[16:05:03] *** Joins: ahappydeath (~silbermm@user/ahappydeath)
[16:05:26] <rawtaz> EHLO rawtaz
[16:07:10] *** Quits: normen_ (~normen@p54b3553f.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[16:07:41] *** Quits: slowtyper (~slowtyper@user/slowtyper) (Quit: ZNC 1.8.2 - https://znc.in)
[16:07:58] *** Joins: slowtyper (~slowtyper@user/slowtyper)
[16:08:28] *** Joins: normen_ (~normen@p54b350d4.dip0.t-ipconnect.de)
[16:12:10] *** Joins: jezebel (jezebel@user/jezebel)
[16:12:38] <jezebel> is gin the recommended framework for building rest apis with golang? it's the one used in the tutorial?
[16:14:10] *** Quits: normen_ (~normen@p54b350d4.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[16:14:13] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[16:15:03] *** Joins: internut (~internut@2601:280:4e00:7b70:5db0:1f2a:f127:bed1)
[16:15:46] *** Joins: normen_ (~normen@p54b34462.dip0.t-ipconnect.de)
[16:16:05] *** Joins: jpw (~jpw@user/jpw)
[16:16:22] <Sam> I always recommend against anything that borders on "framework". Find small composable libraries and use those instead. I don't really know gin in particular though.
[16:19:55] *** Quits: internut (~internut@2601:280:4e00:7b70:5db0:1f2a:f127:bed1) (Ping timeout: 252 seconds)
[16:20:28] *** Quits: normen_ (~normen@p54b34462.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[16:20:42] *** Quits: jpw (~jpw@user/jpw) (Ping timeout: 260 seconds)
[16:22:05] *** Joins: normen_ (~normen@p54b35d20.dip0.t-ipconnect.de)
[16:22:18] *** normen_ is now known as normen
[16:23:28] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:9d6e:e820:71f6:16ee)
[16:28:01] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:9d6e:e820:71f6:16ee) (Ping timeout: 245 seconds)
[16:31:00] *** Quits: bkircher (~bkircher@2001:a61:25b1:b301:38c4:d8e7:23b0:bde5) (Quit: WeeChat 3.2)
[16:34:21] *** Joins: adip (~adip@aedv46.neoplus.adsl.tpnet.pl)
[16:37:16] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[16:39:40] *** Quits: sono (~sono@dslb-178-010-208-031.178.010.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[16:39:57] *** Joins: INeedAHandle (~INeedAHan@39.124.72.106)
[16:40:30] *** Joins: sono (~sono@dslb-178-010-208-031.178.010.pools.vodafone-ip.de)
[16:41:19] *** Quits: normen (~normen@p54b35d20.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[16:41:28] *** Joins: fef (~thedawn@user/thedawn)
[16:42:19] *** Joins: gggpkm__ (~gggpkm@60.10.23.168)
[16:42:52] *** Joins: normen (~normen@p54899401.dip0.t-ipconnect.de)
[16:45:17] *** Quits: sono (~sono@dslb-178-010-208-031.178.010.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[16:45:26] *** Quits: gggpkm_ (~gggpkm@60.10.194.44) (Ping timeout: 260 seconds)
[16:46:39] *** Quits: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[16:52:52] *** Quits: gggpkm__ (~gggpkm@60.10.23.168) (Ping timeout: 252 seconds)
[16:53:51] <andlabs> novns: anyway most Go database things accept pointer to X as a means to allow for distinguishing NULL values
[16:53:52] *** Quits: frost (~frost@59.71.244.36) (Quit: Connection closed)
[16:54:05] *** ox is now known as oz
[16:54:06] <andlabs> so *bool *string etc
[16:54:32] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[16:55:36] <novns> andlabs, pgx uses slices, and it recognizes []byte(nil) as NULL
[16:56:18] <novns> and that's ok, []byte{} is an empty string
[16:57:16] <novns> what's not ok is to return []byte(nil) instead of []byte{} by surprise
[16:57:29] <jezebel> Sam…  yeah me too but gettin something working first is the aim :D
[16:58:12] <andlabs> novns: what is returning that, somehting that *isn't* database code?
[16:58:32] <novns> andlabs, but it should be consistent any way
[16:58:55] <novns> without any unneeded special cases
[16:59:32] <andlabs> that would result in *adding* special cases
[16:59:46] *** Joins: sono (~sono@dslb-178-010-208-031.178.010.pools.vodafone-ip.de)
[17:00:00] <andlabs> since now everything that handles slices has to have an if at the start to distinguish betwen the two cases when it doesn't need to, or anything that generates a slice has to ask the caller "do you want a nil slice or an empty slice"
[17:00:08] <novns> in the library - maybe, but currently it adds special cases for your code
[17:00:33] <novns> so now you have to check for nil slices yourself
[17:01:16] <novns> and you have to avoid using bytes.ReplaceAll if the slice is empty
[17:01:47] <novns> if this behavior is valid it should be clearly documented
[17:02:19] <novns> currently it's not, and it brings bugs to your code
[17:03:42] <andlabs> I can see that scenario, yes
[17:04:21] <andlabs> you can file a bug asking to have these behavior snormalized or clarified if you want, I'm just going to say that the response is that your case is exceptional and that most Go code shouldn't have to concern itself with the difference
[17:04:30] <andlabs> the response I can think of anyway
[17:04:41] <andlabs> there's probably a better one but I wouldn't know it
[17:04:50] <novns> I've spent about 2 hours debugging, blaming my code and pgx library
[17:05:37] *** Joins: mickey84 (~user@user/mickey)
[17:05:43] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[17:05:44] *** mickey84 is now known as mickey8
[17:07:23] *** Joins: martinkennelly (~martinken@84.203.20.92)
[17:09:34] <martinkennelly> I assume theres no basic type that can only contain positive integers?
[17:09:51] <andlabs> the unsigned types
[17:09:56] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[17:10:00] <andlabs> uint and uint*
[17:10:03] <martinkennelly> ah yea... i forgot about that..
[17:11:08] <martinkennelly> andlabs: Thanks
[17:14:36] *** Quits: normen (~normen@p54899401.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[17:14:40] *** Joins: prime (~prime@user/prime)
[17:15:06] *** Joins: internut (~internut@2601:280:4e00:7b70:5db0:1f2a:f127:bed1)
[17:18:43] *** Joins: normen (~normen@p200300d71741f000b8b14297e9280ddc.dip0.t-ipconnect.de)
[17:24:36] *** Joins: holgersson (~quassel@user/holgersson)
[17:24:50] *** Quits: normen (~normen@p200300d71741f000b8b14297e9280ddc.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[17:25:13] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[17:25:13] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[17:25:13] *** Joins: wroathe (~wroathe@user/wroathe)
[17:26:19] *** Quits: tg (~tg@rockylinux/infra/tg) (Remote host closed the connection)
[17:26:56] *** Joins: tg (~tg@rockylinux/infra/tg)
[17:29:41] *** Quits: sono (~sono@dslb-178-010-208-031.178.010.pools.vodafone-ip.de) (Ping timeout: 245 seconds)
[17:29:52] *** Joins: jla (~jordi@tao.ddns.jazztel.es)
[17:33:01] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[17:34:50] *** Joins: fikran (~fikran@user/fikran)
[17:35:54] *** Quits: fub (uid190747@id-190747.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[17:39:43] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[17:40:41] *** Joins: sono (~sono@dslb-178-010-208-031.178.010.pools.vodafone-ip.de)
[17:44:10] *** Joins: arcatech (~arcatech@user/arcatech)
[17:49:53] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 265 seconds)
[17:53:32] *** Joins: xiongxin_ (~quassel@113.116.34.92)
[17:53:57] *** Quits: xiongxin (~quassel@113.116.34.92) (Ping timeout: 268 seconds)
[17:56:41] *** Quits: jla (~jordi@tao.ddns.jazztel.es) (Ping timeout: 246 seconds)
[17:59:10] *** Quits: halden (~halden@lden.im) (Remote host closed the connection)
[18:00:20] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[18:00:45] *** Joins: halden (~halden@lden.im)
[18:03:12] *** Joins: ibrahimk9000 (~ibrahimk9@105.110.79.225)
[18:06:30] *** Joins: arinov (~arinov@31.142.9.142)
[18:08:09] *** Joins: normen (~normen@p54b34d52.dip0.t-ipconnect.de)
[18:16:07] *** Joins: Torr (~Torr@user/torr)
[18:17:28] *** Joins: lilgopher (~textual@2601:241:8000:38f0:91b6:1448:b1dc:d7cc)
[18:17:47] *** Quits: normen (~normen@p54b34d52.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[18:18:53] *** Quits: internut (~internut@2601:280:4e00:7b70:5db0:1f2a:f127:bed1) (Remote host closed the connection)
[18:25:37] *** Quits: Jmainguy (~Jmainguy@phy01.standouthost.com) (Quit: I quit yo)
[18:26:35] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[18:29:07] *** Quits: sono (~sono@dslb-178-010-208-031.178.010.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[18:29:14] *** Joins: Jmainguy (~Jmainguy@phy01.standouthost.com)
[18:31:08] *** Quits: ibrahimk9000 (~ibrahimk9@105.110.79.225) (Ping timeout: 256 seconds)
[18:31:58] *** Joins: internut (~internut@2601:280:4e00:7b70:5db0:1f2a:f127:bed1)
[18:32:34] <seebs> novns: no, it's not like confusing a "" with a null pointer in C. If C had a special value, nil, which was valid to use as a string, and which you could check the length of and it was always 0, and it didn't have to point at any characters, then it would be like confusing that with an empty string, but you can't do that in C.
[18:33:04] <seebs> nil slice is in fact an empty slice. It is a *valid* slice.
[18:33:17] <seebs> A "null pointer" would be like a thing where if you did len(s) it would panic.
[18:34:01] <seebs> But you can do len(s) and cap(s) on a nil slice, and you can refer to every member of s; for all i such that i >= 0 and i < len(s), you can reference s[i], just like any other slice. You can append(s, ...), just like any other slice.
[18:34:04] <seebs> It's a valid slice.
[18:35:11] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[18:35:13] <seebs> And I see the pgx library's point, but I woulda used *[]byte if i wanted to express a nillable slice, probably.
[18:39:04] *** Quits: Jmainguy (~Jmainguy@phy01.standouthost.com) (Quit: I quit yo)
[18:39:19] <Tv_> i personally think []byte(nil) is perfectly fine to communicate NULL.. and if not, https://pkg.go.dev/database/sql#NullString is much nicer than *string imho
[18:39:47] *** Joins: Jmainguy (~Jmainguy@phy01.standouthost.com)
[18:41:34] <seebs> That's fair, but then if you do that, it's on you to be aware that many things will yield a nil slice for an empty slice, and distinguish which one you had in mind.
[18:46:41] <Tv_> it's mostly useful when your own code is providing the slice, sure.. or make a func nilMeansEmpty(s []byte) []byte, etc
[18:48:09] *** Joins: normen (~normen@p200300d717456c00ccffb3eddbb5a2c2.dip0.t-ipconnect.de)
[18:52:41] *** Quits: normen (~normen@p200300d717456c00ccffb3eddbb5a2c2.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[18:54:27] *** Joins: normen (~normen@p200300d7174587003d44b17afa66fae6.dip0.t-ipconnect.de)
[18:55:21] *** Quits: arinov (~arinov@31.142.9.142) (Quit: WeeChat 3.1)
[18:56:15] *** Joins: arinov (~arinov@31.142.9.142)
[18:57:53] *** Joins: iateadonut (~dan@121.177.17.154)
[18:58:50] *** Parts: iateadonut (~dan@121.177.17.154) ()
[18:58:51] *** Joins: iateadonut (~dan@121.177.17.154)
[18:59:06] <iateadonut> how do i see my documentation from within my own source code?
[18:59:41] <iateadonut> i want to be able to see my bugs when i type 'go doc' within my project.
[19:00:56] *** Quits: arinov (~arinov@31.142.9.142) (Ping timeout: 245 seconds)
[19:01:47] *** Quits: normen (~normen@p200300d7174587003d44b17afa66fae6.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[19:03:53] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[19:05:54] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Read error: No route to host)
[19:06:17] *** Quits: xiongxin_ (~quassel@113.116.34.92) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:07:07] *** Quits: whoami (~whoami@d118-75-170-49.try.wideopenwest.com) (Ping timeout: 252 seconds)
[19:08:14] *** Joins: xiongxin (~quassel@119.123.101.136)
[19:08:17] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[19:09:54] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[19:11:00] *** Joins: sono (~sono@dslb-178-010-208-031.178.010.pools.vodafone-ip.de)
[19:12:04] *** Quits: ahappydeath (~silbermm@user/ahappydeath) (Ping timeout: 252 seconds)
[19:12:07] *** Joins: whoami (~whoami@d118-75-170-49.try.wideopenwest.com)
[19:15:19] *** Joins: jpw (~jpw@user/jpw)
[19:18:27] *** Quits: internut (~internut@2601:280:4e00:7b70:5db0:1f2a:f127:bed1) (Remote host closed the connection)
[19:19:16] *** Quits: xiongxin (~quassel@119.123.101.136) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:27:07] *** Joins: ibrahimk9000 (~ibrahimk9@105.110.7.243)
[19:27:20] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 246 seconds)
[19:27:36] *** Joins: ahappydeath (~silbermm@user/ahappydeath)
[19:28:35] <novns> seebs, I just wrote my own function that calls bytes.ReplaceAll inside only if the slice is not empty, and never returns []byte(nil)
[19:28:55] <seebs> that makes sense
[19:29:04] <novns> but I wish this behavior wasn't a surprise for me
[19:29:07] <seebs> it's easy to write nilness-preserving wrappers if you actually care
[19:29:14] *** Joins: internut (~internut@98.38.226.136)
[19:29:18] *** Quits: ibrahimk9000 (~ibrahimk9@105.110.7.243) (Client Quit)
[19:29:38] <seebs> i would not object to it being more clearly documented, because i agree that it can be surprising. like, it seems normal to *me*, but if you're not used to it it can be surprising
[19:30:01] <seebs> i have definitely had issues that resulted from modifying something to accept nil as a valid empty value for another type, even though it basically worked in nearly-all casess
[19:34:04] *** Quits: internut (~internut@98.38.226.136) (Ping timeout: 268 seconds)
[19:39:41] *** Joins: ibrahimk9000 (~ibrahimk9@105.110.165.221)
[19:41:03] *** Quits: aml (~antoon_i@h-85-24-213-163.A392.priv.bahnhof.se) (Ping timeout: 265 seconds)
[19:42:19] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[19:43:13] *** Joins: normen (~normen@p200300d71746a600f4d1f249868923af.dip0.t-ipconnect.de)
[19:43:41] *** Joins: Ergo^ (~ergo@91.238.59.144)
[19:44:11] *** Joins: fikran (~fikran@user/fikran)
[19:44:22] *** Joins: aml (~antoon_i@h-85-24-213-163.a392.priv.bahnhof.se)
[19:44:28] *** Quits: sono (~sono@dslb-178-010-208-031.178.010.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[19:44:52] *** Joins: wroathe (~wroathe@user/wroathe)
[19:45:59] *** Joins: sono (~sono@dslb-178-010-208-031.178.010.pools.vodafone-ip.de)
[19:47:43] *** Quits: normen (~normen@p200300d71746a600f4d1f249868923af.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[19:49:25] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[19:52:03] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Read error: Connection reset by peer)
[19:52:10] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[19:53:49] *** Quits: aml (~antoon_i@h-85-24-213-163.a392.priv.bahnhof.se) (Ping timeout: 252 seconds)
[19:55:07] *** Joins: LiftLeft (~LiftLeft@191.96.185.109)
[20:00:20] *** Joins: aml (~antoon_i@h-85-24-213-163.A392.priv.bahnhof.se)
[20:01:27] *** Joins: jla (~jordi@tao.ddns.jazztel.es)
[20:05:37] *** Joins: dsrt^ (~dsrt@wsip-70-165-23-55.mc.at.cox.net)
[20:05:50] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 246 seconds)
[20:07:23] <iateadonut> there's something like //BUG(something) where you document your bugs, right?  i can't seem to get it to work or find anything about it.  where can i find info about that?
[20:07:49] *** Joins: mrig (~mrig@user/mrig)
[20:07:59] *** Quits: aml (~antoon_i@h-85-24-213-163.A392.priv.bahnhof.se) (Ping timeout: 265 seconds)
[20:11:31] *** Joins: normen (~normen@p54b343e3.dip0.t-ipconnect.de)
[20:12:04] *** Joins: dreamreal (~dreamreal@about/java/dreamreal)
[20:12:46] <fizzie> iateadonut: https://go.dev/blog/godoc "Top-level comments that begin with the word "BUG(who)” are recognized as known bugs --"
[20:13:03] <dreamreal> I am trying to convert an int64 to a time.Duration and for the life of me I can't figure out the type system properly. I keep thinking it's just var delayTime time.Duration = nanos * time.Nanosecond but the compiler complains.
[20:13:26] *** Joins: Diego (~textual@user/diego)
[20:13:34] <fizzie> You need an explicit conversion. `time.Duration(nanos)` would do it.
[20:14:16] <dreamreal> argh, that makes, like, perfect sense. I am *clearly* a go newbie :)
[20:14:25] *** Joins: be3uykpy (~be3uykpy@2a00:a040:19a:b060:e86c:be50:e673:c005)
[20:14:31] <fizzie> https://play.golang.org/p/KJVUrrjDShl because everything's better with a playground example.
[20:16:24] *** Quits: normen (~normen@p54b343e3.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[20:21:57] <iateadonut> fizzie, know if there's any way to make those BUGS show up in the command line when i type "go doc"?
[20:22:52] <fizzie> It might be a bug that it doesn't? Based on a quick glance at https://github.com/golang/go/issues/33970
[20:23:05] *** Joins: aml (~antoon_i@h-85-24-213-163.a392.priv.bahnhof.se)
[20:23:59] *** Quits: jla (~jordi@tao.ddns.jazztel.es) (Quit: Leaving.)
[20:24:11] *** Joins: jla (~jordi@tao.ddns.jazztel.es)
[20:25:43] *** Quits: whoami (~whoami@d118-75-170-49.try.wideopenwest.com) (Ping timeout: 252 seconds)
[20:27:22] *** Quits: aml (~antoon_i@h-85-24-213-163.a392.priv.bahnhof.se) (Ping timeout: 252 seconds)
[20:28:25] *** Quits: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl) (Remote host closed the connection)
[20:28:47] *** Joins: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl)
[20:28:51] *** Joins: whoami (~whoami@d118-75-170-49.try.wideopenwest.com)
[20:29:45] <iateadonut> and "top level comment" means not within a function, i guess?
[20:29:53] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[20:31:19] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 265 seconds)
[20:34:09] *** Joins: nikos[work] (~ntsipinak@tsipinakis.cern.ch)
[20:34:32] <nikos[work]> os.Chmod("./testdir", 01777) apparently ignores the sticky bit ?
[20:34:42] <Tv_> iateadonut: i don't think `go doc` ever got that support, from the older `godoc -notes`.. you can just grep
[20:35:11] <Tv_> iateadonut: frankly, the convention has never caught on in the commnunity outside of go.git itself
[20:35:14] *** Quits: wkalt (~wkalt@user/wkalt) (Ping timeout: 246 seconds)
[20:35:21] <nikos[work]> Access: (0777/drwxrwxrwx) Weird
[20:35:25] <nikos[work]> Any ideas why?
[20:35:31] *** Quits: danderson (~dave@tailscale/danderson) (Ping timeout: 268 seconds)
[20:35:37] *** Quits: sono (~sono@dslb-178-010-208-031.178.010.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[20:35:40] *** Parts: jla (~jordi@tao.ddns.jazztel.es) ()
[20:35:56] *** Quits: arcanez (~arcanez@warpedreality.org) (Ping timeout: 246 seconds)
[20:36:05] <Tv_> hrmm https://github.com/golang/go/issues/33970#issuecomment-526783296
[20:37:06] <Tv_> nikos[work]: try to reproduce with mkdir --mode= on command line, your FS might consider sticky bit privileged
[20:37:19] *** Joins: danderson (~dave@tailscale/danderson)
[20:37:19] *** ChanServ sets mode: +v danderson
[20:37:23] *** Joins: arcanez (~arcanez@warpedreality.org)
[20:37:31] *** Joins: wkalt (~wkalt@user/wkalt)
[20:38:06] <nikos[work]> Tv_: $ mkdir --mode=01777 testdir2 => 1777/drwxrwxrwt
[20:38:19] <nikos[work]> So, worked
[20:38:24] <Tv_> nikos[work]: BSD? macOS? Solaris?
[20:38:30] <nikos[work]> CentOS 8
[20:38:44] <nikos[work]> go 1.17
[20:39:29] <Tv_> nikos[work]: ohh it's stripped by umask i bet
[20:39:29] <siXy> Yeah I can repro nikos[work]'s issue. Looking at it now.
[20:40:28] <Tv_> hrmm yeah i can repro too
[20:40:33] <Tv_> [pid 1503797] mkdirat(AT_FDCWD, "foo", 0777) = 0
[20:40:39] <siXy> fchmodat(AT_FDCWD, "iamatest", 0777) = 0
[20:40:41] <siXy> heh
[20:40:53] <Tv_> https://cs.opensource.google/go/go/+/refs/tags/go1.17.2:src/os/file_posix.go;drc=refs%2Ftags%2Fgo1.17.2;l=63
[20:41:26] <dreamreal> fizzie: thank you, BTW
[20:41:57] *** Joins: internut (~internut@2601:280:4e00:7b70:41f3:85d5:4dca:75a7)
[20:42:11] <fizzie> nikos[work]: os.ModeSticky != 01000, most likely.
[20:42:15] *** Joins: aml (~antoon_i@h-85-24-213-163.A392.priv.bahnhof.se)
[20:42:16] <Tv_> nikos[work]: ah yes
[20:42:20] <Tv_> what fizzie said
[20:42:23] <Tv_> Go modes != unix modes
[20:42:27] <fizzie> Only the low 9 bits are standardized to be the usual 0777.
[20:42:33] <Tv_> it translates between those as needed
[20:43:00] <siXy> os.Chmod("iamatest", 0777|os.ModeSticky) // works
[20:43:29] <nikos[work]> siXy: Confirmed it works, thanks a ton!
[20:43:33] <nikos[work]> That was counter-intuitive
[20:44:07] <siXy> yeah. if this is something you expect to use more than once I'd be tempted to file an RFE, as it is indeed very counter-intuitive
[20:44:31] <Tv_> the curse of cross-platform
[20:44:56] <Tv_> os.FileMode has more mode bits than unix
[20:45:23] <Tv_> the other alternative would have been to not use(/expose) mode bits at all on the Go side
[20:46:30] <siXy> The docs (https://pkg.go.dev/os#Chmod) could be much clearer - they should probably call out explicitly that you must use those consts rather than trying to do it the unix way
[20:46:40] *** Joins: sono (~sono@dslb-178-010-208-031.178.010.pools.vodafone-ip.de)
[20:46:47] *** Quits: internut (~internut@2601:280:4e00:7b70:41f3:85d5:4dca:75a7) (Ping timeout: 265 seconds)
[20:49:58] *** Quits: whoami (~whoami@d118-75-170-49.try.wideopenwest.com) (Ping timeout: 260 seconds)
[20:53:18] *** Joins: frm (~frm@user/frm)
[20:54:33] *** Joins: whoami (~whoami@d118-75-170-49.try.wideopenwest.com)
[20:54:52] *** Quits: aml (~antoon_i@h-85-24-213-163.A392.priv.bahnhof.se) (Ping timeout: 265 seconds)
[20:56:23] *** Joins: aml (~antoon_i@h-85-24-213-163.A392.priv.bahnhof.se)
[21:00:43] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[21:01:18] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[21:01:58] *** Quits: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl) (Remote host closed the connection)
[21:04:38] *** Quits: whoami (~whoami@d118-75-170-49.try.wideopenwest.com) (Ping timeout: 246 seconds)
[21:04:53] *** Quits: Diego (~textual@user/diego) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:06:21] *** Quits: aml (~antoon_i@h-85-24-213-163.A392.priv.bahnhof.se) (Ping timeout: 268 seconds)
[21:06:52] *** Joins: internut (~internut@2601:280:4e00:7b70:41f3:85d5:4dca:75a7)
[21:09:01] *** Quits: sono (~sono@dslb-178-010-208-031.178.010.pools.vodafone-ip.de) (Ping timeout: 265 seconds)
[21:09:18] <iateadonut> thanks.
[21:09:20] *** Quits: iateadonut (~dan@121.177.17.154) (Quit: Leaving.)
[21:09:43] *** Joins: whoami (~whoami@d118-75-170-49.try.wideopenwest.com)
[21:13:48] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[21:18:04] *** Quits: whoami (~whoami@d118-75-170-49.try.wideopenwest.com) (Ping timeout: 265 seconds)
[21:18:35] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Quit: Leaving)
[21:20:12] *** Quits: tebruno99 (~tebruno99@user/tebruno99) (Quit: I'm out!)
[21:20:28] *** Joins: tebruno99 (~tebruno99@user/tebruno99)
[21:21:09] *** Joins: jla (~jordi@tao.ddns.jazztel.es)
[21:21:13] *** Parts: jla (~jordi@tao.ddns.jazztel.es) ()
[21:21:15] *** Joins: normen (~normen@p200300d717477900fca11989dde1a6ad.dip0.t-ipconnect.de)
[21:22:01] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[21:24:50] *** Joins: emcconville (~emcconvil@c-98-222-200-8.hsd1.il.comcast.net)
[21:25:24] *** Joins: sono (~sono@dslb-178-010-208-031.178.010.pools.vodafone-ip.de)
[21:25:43] *** Joins: whoami (~whoami@d118-75-170-49.try.wideopenwest.com)
[21:25:53] *** Quits: normen (~normen@p200300d717477900fca11989dde1a6ad.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[21:27:07] *** Quits: frm (~frm@user/frm) (Quit: Textual IRC Client: www.textualapp.com)
[21:30:15] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fafc-123.dhcp.inet.fi)
[21:30:32] *** Quits: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz) (Quit: Leaving)
[21:30:52] <Tv_> clicking through to FileMode gives you "The bits have the same definition on all systems, so that information about files can be moved from one system to another portably. Not all bits apply to all systems."
[21:30:58] <Tv_> but that is probably too subtle
[21:31:14] <Tv_> Go docs tend to state exactly what it true, not volunteer how it's helpful to you
[21:31:18] <Tv_> *what is
[21:32:19] <Tv_> combined with "The nine least-significant bits are the standard Unix rwxrwxrwx permissions." -- *only* those
[21:32:53] *** Joins: girafe (~girafe@176-147-142-235.abo.bbox.fr)
[21:33:09] *** Joins: tane (~tane@dslb-002-201-234-068.002.201.pools.vodafone-ip.de)
[21:33:26] *** Joins: jpw_ (~jpw@user/jpw)
[21:33:53] *** Joins: wroathe (~wroathe@user/wroathe)
[21:33:55] *** Quits: jpw (~jpw@user/jpw) (Ping timeout: 252 seconds)
[21:40:18] *** Quits: whoami (~whoami@d118-75-170-49.try.wideopenwest.com) (Ping timeout: 265 seconds)
[21:47:41] *** Joins: whoami (~whoami@d118-75-170-49.try.wideopenwest.com)
[21:51:39] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[21:52:11] *** Quits: jpw_ (~jpw@user/jpw) (Ping timeout: 245 seconds)
[21:53:32] *** Joins: fikran (~fikran@user/fikran)
[22:00:11] *** Joins: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl)
[22:02:45] *** Joins: jpw (~jpw@user/jpw)
[22:05:24] *** Joins: jasper_ (~user@styria.daemonized.org)
[22:06:11] *** Quits: ztx (~ztx@user/ztx) (Quit: ztx)
[22:07:17] *** Quits: ttke (501@46-97-229-216.sr2.pon.net) (Ping timeout: 264 seconds)
[22:08:39] *** Joins: lishanhui (~lishanhui@104-184-3-133.lightspeed.austtx.sbcglobal.net)
[22:11:12] *** Joins: normen (~normen@p5489937c.dip0.t-ipconnect.de)
[22:14:46] *** Quits: saschagrunert (~saschagru@46.128.124.46) (Remote host closed the connection)
[22:16:40] *** Quits: normen (~normen@p5489937c.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[22:17:55] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[22:21:20] *** Quits: lishanhui (~lishanhui@104-184-3-133.lightspeed.austtx.sbcglobal.net) (Ping timeout: 260 seconds)
[22:23:22] *** Joins: fef (~thedawn@user/thedawn)
[22:27:29] *** Quits: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl) (Remote host closed the connection)
[22:27:53] *** Joins: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl)
[22:34:53] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[22:34:53] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[22:34:53] *** Joins: wroathe (~wroathe@user/wroathe)
[22:39:25] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[22:42:54] *** Quits: sizeof_void34 (~Thunderbi@109-252-124-86.nat.spd-mgts.ru) (Quit: sizeof_void34)
[22:51:01] *** Quits: whoami (~whoami@d118-75-170-49.try.wideopenwest.com) (Ping timeout: 250 seconds)
[22:58:41] *** Joins: whoami (~whoami@d118-75-170-49.try.wideopenwest.com)
[23:00:32] *** Quits: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl) (Ping timeout: 265 seconds)
[23:00:54] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[23:01:29] *** imm__ is now known as imm_
[23:02:53] <Led_Zeppelin2> I have a slice of int64. I need to convert it to float64. When populating the slice is it better to populate it as a interface{} so the conversion will be easier? or should I just run post processing to convert it to float64?
[23:05:16] *** Joins: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl)
[23:06:37] *** Quits: dsrt^ (~dsrt@wsip-70-165-23-55.mc.at.cox.net) (Ping timeout: 250 seconds)
[23:09:37] <KirkMcDonald> I don't see why you'd involve interface{} at all in that operation.
[23:11:31] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[23:11:35] <Led_Zeppelin2> just making sure. Will do a simple ToFloat64() function. thanks
[23:12:55] *** Joins: aml (~antoon_i@h-85-24-213-163.A392.priv.bahnhof.se)
[23:14:10] <KirkMcDonald> It's just https://play.golang.org/p/Y6l0eeufGMA
[23:14:54] <KirkMcDonald> (Modulo int values which are out of range for a float64.)
[23:18:22] *** Quits: aml (~antoon_i@h-85-24-213-163.A392.priv.bahnhof.se) (Ping timeout: 260 seconds)
[23:20:17] *** Joins: aml (~antoon_i@h-85-24-213-163.A392.priv.bahnhof.se)
[23:22:03] *** Joins: arinov (~arinov@188.58.26.189)
[23:23:10] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[23:25:55] *** Joins: normen (~normen@p54899dca.dip0.t-ipconnect.de)
[23:28:42] *** Quits: aml (~antoon_i@h-85-24-213-163.A392.priv.bahnhof.se) (Ping timeout: 265 seconds)
[23:32:48] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[23:33:16] *** Quits: normen (~normen@p54899dca.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[23:40:08] *** Joins: hexfive (~eric@50.35.83.177)
[23:41:04] *** Quits: emcconville (~emcconvil@c-98-222-200-8.hsd1.il.comcast.net) (Quit: WeeChat 3.2)
[23:48:54] *** Joins: aml (~antoon_i@h-85-24-213-163.A392.priv.bahnhof.se)
[23:54:28] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[23:55:58] *** Quits: hexfive (~eric@50.35.83.177) (Quit: WeeChat 3.0.1)
[23:56:22] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 252 seconds)
