[00:02:00] <sheetjs> hmm node fs readFile with encoding still builds up an array first
[00:06:09] *** Quits: dmaislin (~dmaislin@047-233-046-055.res.spectrum.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:07:24] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[00:09:59] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[00:10:20] *** Quits: kakashiA1 (~kakashi@37.84.156.126) (Ping timeout: 256 seconds)
[00:12:27] *** Quits: D4mned (~D1mned@212.101.251.246) (Read error: Connection reset by peer)
[00:13:06] *** Quits: chronon (~chronon@user/chronon) (Remote host closed the connection)
[00:13:39] <systemfault> Does that mean that NodeJS doesn't have a streaming text decoder?
[00:13:50] *** Joins: Betal (~Betal@user/betal)
[00:14:01] <stenno> TextDecoder ?
[00:14:06] <stenno> n> TextDecoder
[00:14:07] <jellobot> (okay) [class TextDecoder]
[00:14:25] <stenno> can handle node-style sterams, can't it?
[00:14:57] <stenno> hmm
[00:15:00] <stenno> just a buffer
[00:15:29] <stenno> there is a boolean 'stream' option?
[00:16:28] <sheetjs> probably no one revisited it
[00:16:38] <systemfault> Node also seems to have that https://nodejs.org/docs/latest/api/string_decoder.html
[00:17:18] <sheetjs> https://github.com/nodejs/node/blob/master/lib/fs.js#L497 the "most common" case is utf8 and probably should be special-cased
[00:17:19] <stenno> oh its just for multibyte stuff
[00:17:30] <stenno> the 'stream' option
[00:17:59] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[00:18:26] *** Joins: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[00:20:55] <systemfault> Looks like TextDecoder could be used in stream mode like you said
[00:21:29] <stenno> its just for multibyte handling
[00:21:35] <stenno> you still have to pass buffers
[00:21:40] <stenno> if i read that correctly
[00:21:43] <sheetjs> the problem with the implementation right now is
[00:21:54] <sheetjs> it collects buffers into an array, then concats, then encodes the whole thing
[00:22:17] *** Quits: Icedream (~icedream@hzn-b.serverkomplex.de) (Ping timeout: 268 seconds)
[00:22:29] *** Quits: underport (~underport@2a0c:5a80:1c17:5800:74b6:fd3f:5865:6f30) (Ping timeout: 250 seconds)
[00:22:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[00:22:59] <sheetjs> for UTF8 and supported encodings, TextDecoder appears to be more efficient
[00:24:27] *** Parts: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Leaving)
[00:24:46] <sheetjs> it's possible that concatenating the generated strings is slower than concatenating buffers and stringifying
[00:25:57] *** Quits: goddard (~goddard@user/goddard) (Remote host closed the connection)
[00:26:00] <BinarySavior> My employer is upgrading a system where they have been emailing word .docx files around to various stakeholders to enter information to their corresponding sections of the document
[00:26:00] <stenno> interesting question actually
[00:26:09] <stenno> concatenating buffers should be really fast though
[00:26:12] <BinarySavior> we are now implementing a document with html/css/js to take the place of docx
[00:26:13] *** Joins: Icedream (~icedream@hzn-b.serverkomplex.de)
[00:26:17] *** Joins: goddard (~goddard@user/goddard)
[00:26:33] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[00:27:08] <BinarySavior> we provide sections to edit rich text (RTE). What is a good way to have a standalone html document save the changes made to these editable rich text editor sections, such that after they make the changes they save the local html file so they can email it to the next stakeholder with their changes applied
[00:29:22] <samsch> BinarySavior, A plain .html file? And that's it?
[00:29:34] <BinarySavior> yes
[00:29:50] <sheetjs> BinarySavior: are you writing the docx tool too?
[00:29:53] <sheetjs> if so, use altChunks
[00:30:20] <samsch> You can't. The closest you could do is have JS in the document which handles a form and creates a download which would be a copy with changes. But you can't update the file in place.
[00:30:40] <sheetjs> in IE6-9 you can
[00:31:06] <BinarySavior> sheetjs is altChunks a browser-based rich text editor?
[00:31:07] <samsch> Right, so you can't 🙄
[00:31:15] <sheetjs> no its a docx feature
[00:31:28] <BinarySavior> oh, we are moving away from docx
[00:31:59] <sheetjs> ah.  altChunks are a way to sneak raw HTML into DOCX files
[00:32:02] *** Joins: pavonia (~user@user/siracusa)
[00:32:11] <BinarySavior> oh wow
[00:32:19] <BinarySavior> that actually might be a better option than what we're doing
[00:32:46] <samsch> Can't you do what you want with excel forms though?
[00:33:14] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[00:33:33] *** Joins: gproto23 (~gproto23@user/gproto23)
[00:33:50] <samsch> And moreover, why wasn't *that* ^ your first suggestion, sheetjs? lol
[00:34:29] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:34:40] <sheetjs> right tool for the job.  the hardest part of migrating a process that involves humans is persuading the humans to use the new process
[00:35:04] *** Joins: maret (~maret@nat-88-212-37-89.antik.sk)
[00:35:11] *** Quits: Alex8532 (~Alex8532@user/alex8532) (Quit: Going offline, see ya! (www.adiirc.com))
[00:35:38] <sheetjs> BinarySavior: in this case, is there a reason why the system itself can't just email the files to the next stakeholder?
[00:37:05] <BinarySavior> sheetjs it could, but the stakeholder needs to get it back to us
[00:37:26] <BinarySavior> the ideal situation would be to serve the page on a website and have them upload / edit information in a form and submit
[00:37:33] <sheetjs> do they use docusign?
[00:37:38] <BinarySavior> we will be using docusign
[00:38:06] <BinarySavior> but bureaucracy & security will not allow us to have external facing server
[00:38:17] <BinarySavior> so we are forced to exist in emails only
[00:38:24] <sheetjs> haha nodemailer
[00:39:30] <sheetjs> there was also an email server, forget the name
[00:42:51] *** Quits: magga (magga@ti0036a400-1042.bb.online.no) (Remote host closed the connection)
[00:43:02] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[00:43:31] <sheetjs> also samsch the new focus is Numbers
[00:44:03] <BinarySavior> sheetjs but actually wouldn't a mail server require external facing server?
[00:45:02] <sheetjs> electron app could also rewrite file
[00:45:57] *** Joins: vysn (~vysn@user/vysn)
[00:48:18] *** Quits: sagax (~sagax_nb@user/sagax) (Ping timeout: 260 seconds)
[00:49:10] *** Quits: ThePhilgrim (~ThePhilgr@151.41.185.44) (Ping timeout: 250 seconds)
[00:49:47] *** Quits: o|||||o (~ol_greg@50-24-3-187.chstcmta05.res.dyn.suddenlink.net) (Ping timeout: 250 seconds)
[00:57:20] *** Joins: sgt_chuckles (~sgt_chuck@pool-71-190-209-205.nycmny.fios.verizon.net)
[00:57:37] *** Quits: paule32_ (~paul@user/paule32) (Ping timeout: 240 seconds)
[00:58:03] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Read error: Connection reset by peer)
[01:00:58] *** Joins: rcoote (~rcoote@ip-176-198-113-232.um43.pools.vodafone-ip.de)
[01:03:02] *** Quits: Icedream (~icedream@hzn-b.serverkomplex.de) (Ping timeout: 256 seconds)
[01:03:48] *** Quits: duds- (~duds-@146.70.31.116) (Changing host)
[01:03:48] *** Joins: duds- (~duds-@user/duds)
[01:06:58] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[01:07:11] *** Joins: Icedream (~icedream@hzn-b.serverkomplex.de)
[01:07:46] *** Joins: viva (~viva@2601:2c7:8900:169:4ca6:2bdd:384e:acef)
[01:08:12] *** Joins: kakashiA1 (~kakashi@ip-037-201-198-057.um10.pools.vodafone-ip.de)
[01:08:28] <viva> hi all, is it possible to use XMLHttpRequest to either fire upon clicking a link/button or open a new window with a request?
[01:08:42] *** Joins: sam_1 (~sam_1@87.51.251.118)
[01:09:05] <viva> or fetch() ?
[01:09:19] <systemfault> Yes/No
[01:10:46] *** Quits: yassernasc (~yassernas@2804:29b8:505a:f33d:b018:fec8:a7e4:5428) (Remote host closed the connection)
[01:11:03] <austincheney> I ran a perf this morning and for some reason do/while loops perform at 2/3s speed compared to for and while loops in Chrome.  In Firefox all loops execute at the same speed.
[01:12:28] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[01:12:40] *** Quits: kakashiA1 (~kakashi@ip-037-201-198-057.um10.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[01:13:06] *** Quits: mdemo (~mdemo@user/mdemo22) (Quit: The Lounge - https://thelounge.github.io)
[01:13:23] *** Quits: ckdCreations (~ckdCreati@147.55.133.133) (Read error: Connection reset by peer)
[01:13:35] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 256 seconds)
[01:13:36] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[01:14:05] <viva> systemfault, can you give me the skinny?
[01:14:10] *** Joins: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:1df9:ed4:9e55:fcaf)
[01:14:34] *** Joins: mdemo (~mdemo@user/mdemo22)
[01:15:10] <systemfault> viva: XMLHttpRequest and fetch are just the HTTP clients of the browser, you can call them whenever you want... on click of something, on a timer... any way you want.
[01:15:27] <systemfault> But it's not the job of a HTTP client to open windows...
[01:16:10] <viva> opening windows is not my ideal solution
[01:16:22] <viva> i'd prefer a button that onclick=...
[01:16:38] <viva> but im still quite new to JS and im not certain how much script can be placed in that field
[01:16:49] <viva> should i create a function that calls the XMLHttpRequest ?
[01:17:05] <systemfault> You should use fetch in 2022
[01:17:08] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[01:17:10] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:d44d:e9a:465c:99de) (Ping timeout: 268 seconds)
[01:17:12] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 256 seconds)
[01:17:37] <systemfault> So... if you have a button <button type="button" id="hello">Hello</div>
[01:17:57] *** Joins: trevors (~trevors@user/trevors)
[01:18:34] *** Quits: maret (~maret@nat-88-212-37-89.antik.sk) (Quit: maret)
[01:18:48] <systemfault> Then you can do something like: document.querySelector('#hello').addEventListener('click', () => { fetch(someUrl, someOptions).then(data => data.json()).then(data => console.log(data)).catch(err => console.error(err)) })
[01:19:09] *** Joins: maret (~maret@nat-88-212-37-89.antik.sk)
[01:19:09] *** Quits: maret (~maret@nat-88-212-37-89.antik.sk) (Client Quit)
[01:19:54] *** Joins: maret (~maret@nat-88-212-37-89.antik.sk)
[01:19:55] *** Quits: maret (~maret@nat-88-212-37-89.antik.sk) (Client Quit)
[01:20:23] *** Quits: Intelo (~Intelo@88.246.74.142) (Ping timeout: 256 seconds)
[01:20:40] *** Joins: Stinger (~Stinger@14-203-0-22.tpgi.com.au)
[01:21:28] *** Parts: FightingFalcon (~none@2a01:4f8:1c17:6cd5::1) ()
[01:21:28] <viva> systemfault, i'm still VERY new to JS and i cant quite wrap my head around fetch yet >_< i tried for several hours over the weekend to convert a lab i was working on to fetch() but had no success.
[01:21:43] <viva> this is the code i have so far. it does... nothing... but the interpreter isnt finding any erros https://jsfiddle.net/#&togetherjs=VfL5kCzixb
[01:22:16] *** Joins: FightingFalcon (~none@user/fightingfalcon)
[01:22:21] <stenno> in order to properly use fetch, you kinda have to understand promises too
[01:23:22] <viva> i actually understand the idea of promises and chaining (at least as it pertains to fetch()) quite well, just dont know how to use fetch i prob just need to spend more time with it
[01:23:24] *** Joins: c4017w_ (~c4017@209.52.68.8)
[01:24:05] <viva> i assume the code in that fiddle is opening and sending a request to yahoo.com ?
[01:24:30] *** Joins: zebrag (~chris@user/zebrag)
[01:24:38] <viva> its just not "launching" me to the site?
[01:24:39] <stenno> are you willing to share that code without the collaboration thing?
[01:24:49] <stenno> oh it will not redirect you to another page
[01:24:50] <viva> sure, i dthought collab was share
[01:25:03] <stenno> it will make a request to another source
[01:25:15] <viva> they've changed jsfiddle quite a bit since i last used it... not sure how to get to share without hitting collab
[01:25:21] <stenno> stuff like CSP/cors applied
[01:25:27] <stenno> just save it and share the url
[01:25:34] *** Joins: kakashiA1 (~kakashi@ip-037-201-198-057.um10.pools.vodafone-ip.de)
[01:25:46] <viva> oh
[01:25:47] <viva> ok
[01:25:58] <viva> https://jsfiddle.net/zfe4hqwj/
[01:26:50] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[01:27:18] <stenno> in your case, the request gets blocked becuase you are requesting a http source from https
[01:27:21] *** Quits: zebrag (~chris@user/zebrag) (Client Quit)
[01:27:24] <stenno> but fetch is not for redirecting
[01:27:37] <stenno> fetch 'just' makes a http request
[01:27:46] <stenno> in this case its an xhr
[01:27:52] <stenno> but fetch works the same
[01:27:56] <stenno> but just use fetch
[01:28:04] <stenno> do you want a redirect?
[01:28:42] *** Joins: ckdCreations (~ckdCreati@147.55.133.138)
[01:28:46] <viva> well, i need to create a custom request then redirect
[01:29:31] *** Quits: Arisco (~ckmptnml@201-24-225-211.user3p.brasiltelecom.net.br) (Quit: CyberScript - President Bush uses CyberScript. Shouldn't you? (www.cyberscript.org))
[01:29:31] *** Quits: gproto23 (~gproto23@user/gproto23) (Quit: Leaving)
[01:29:32] <viva> custom headers in a request then redirect
[01:30:29] <stenno> see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options how to provide custom headers and also the 'redirect' attribute
[01:31:07] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[01:35:26] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 260 seconds)
[01:40:30] <devslash> is it possible to have a callback called after a state has been updated
[01:44:25] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[01:45:11] <banana_> what library do you use that can dynamic choose which  indefinite article to use
[01:45:23] <banana_> like "an apple" vs "a banana"
[01:45:34] <banana_> dynamically*
[01:45:46] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[01:48:33] <banana_> https://www.npmjs.com/package/indefinite nvm looks pretty good
[01:49:51] *** Joins: maret (~maret@nat-88-212-37-89.antik.sk)
[01:50:25] *** Quits: maret (~maret@nat-88-212-37-89.antik.sk) (Client Quit)
[01:50:40] *** Quits: ekathva (~ekathva@2001:999:51:be01:35a5:6efe:4821:a5c8) (Remote host closed the connection)
[01:50:40] <viva> does JS put in the <head> tag execute within an html page when called, or even line by line if not called? i was looking at a coding example on stackoverflow and they were like "put this in <head> ... " and i was thinking does this even work? (encapsulated in <script> tags?)
[01:51:34] <stenno> it gets executed when the parser reaches the line
[01:51:56] <stenno> this means that the dom is not neccessarily loaded yet when the JS is executed
[01:52:06] <systemfault> <script> tags can be everywhere on the page... it's just a convention to put all the script tags in the <head>
[01:52:26] <stenno> check out the 'defer' keyword of the script to execute scripts after the rest has loaded
[01:52:30] <systemfault> ^
[01:53:10] <stenno> for the longest time we didn't have defer so you will sometimes still see a <script> tag at the _bottom_ of the body to mitigate this
[01:54:44] *** Joins: Arisc (~ckmptnml@201-24-225-211.user3p.brasiltelecom.net.br)
[01:55:58] <devslash> stenno do you know if it possible to have a call back after the state has been updated
[01:56:15] <systemfault> "state" is like "temp" or "data"
[01:56:21] <systemfault> It doesn't mean anything without context.
[01:56:43] <systemfault> Are you talking about React? Vue? DOM-related stuff? Pure JS?
[01:56:52] *** Quits: tex (~super@user/dix) (Ping timeout: 256 seconds)
[01:57:17] <eXtr3m0> script tags execute as soon as they are found in the dom, right?
[01:57:17] <devslash> im using react. my "add" component adds an object to a list. After the list state has been updated, I want to call a method to save this data immediately
[01:58:32] <stenno> eXtr3m0: yes
[01:59:48] <systemfault> devslash: I believe setState has a second parameter for that... but don't take my word for it, ask someone competent with React :p
[01:59:58] *** Joins: nomic (~nomic@185.192.69.3)
[02:00:07] <stenno> are you using the hook?
[02:00:15] <stenno> or setState of a class component
[02:00:16] <devslash> yea
[02:00:20] <devslash> useState hook
[02:00:28] <stenno> you can pass a function to setState
[02:00:37] <devslash> im not using setState.
[02:00:39] <stenno> setFoo((prevFoo) => ...)
[02:00:51] <devslash> i tried that but the callback never gets called
[02:01:06] <stenno> well to the setFoo callback of state(...)
[02:01:15] <stenno> of setState(...)
[02:01:20] <stenno> well it does work though
[02:01:51] <devslash> setShoppingList is the method to set the state for shoppingList. My LOC reads:  setShoppingList([...shoppingList,shoppingListItem],() => { debugger});
[02:02:45] <stenno> as the first param, not the second
[02:02:52] <eXtr3m0> does someone know a git repo with great react usage? i mean modern react app code.
[02:02:52] <stenno> but i think you want useEffect here instead
[02:02:54] <devslash> what do you mea
[02:03:07] <devslash> i tried useeffect but i dont think it will work for my use case
[02:03:11] <ljharb> eXtr3m0: most apps aren't going to be public
[02:03:26] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[02:03:27] <stenno> it seill
[02:03:41] *** Quits: mat001 (~mat001@72.28.108.216) (Ping timeout: 256 seconds)
[02:04:02] <stenno> setShoppingList((prevShoppingList) => [...prevShoppingList, newItem]);
[02:04:41] <stenno> useEffect(() => console.log('shopping list changed'), [shoppingList])
[02:04:45] *** Tobbi__ is now known as Tobbi
[02:05:34] <devslash> useEffect will run every time shoppinglist component re-renders right
[02:06:05] <stenno> only if your shoppingList variable changes, thanks to that second parameter
[02:06:06] *** Joins: musee (~musee@91.216.213.191)
[02:06:11] <stenno> https://reactjs.org/docs/hooks-reference.html#useeffect
[02:06:35] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[02:06:37] <stenno> https://reactjs.org/docs/hooks-reference.html#conditionally-firing-an-effect
[02:06:54] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:07:05] <stenno> also,
[02:07:13] <devslash> that wont work because i only want it to fire this event after adding a new item
[02:07:53] <stenno> setShoppingList((prevShoppingList) => { const newShoppingList = [...prevShoppingList, newItem]; console.log(newShoppingList); return newShoppingList; });
[02:08:20] <devslash> i dont think you understand what Im asking
[02:08:24] <stenno> i do
[02:08:42] <stenno> i don't think you understand how hooks work
[02:08:45] <devslash> I want to save the shopping list state called shoppingList after its been updated
[02:08:54] <devslash> I do but this hook is not firing
[02:09:09] *** Joins: onosendi (~onosendi@user/onosendi)
[02:10:29] *** Joins: The_Tablet (~tablet@user/the-tablet)
[02:10:59] *** Joins: quazimodo (~quazimodo@n110-21-88-214.bla2.nsw.optusnet.com.au)
[02:11:57] *** Quits: pmercado (~pmercado@186.11.41.95) (Ping timeout: 256 seconds)
[02:14:46] *** Joins: maret (~maret@nat-88-212-37-89.antik.sk)
[02:16:16] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-cdff-5348-04ff-b4e2.res6.spectrum.com) (Read error: Connection reset by peer)
[02:17:38] *** Joins: mtm49 (~mtm49@177.137.113.68)
[02:17:52] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[02:18:31] *** Parts: mtm49 (~mtm49@177.137.113.68) ()
[02:19:52] *** Joins: SOMBRIO (~mtm49@177.137.113.68)
[02:20:39] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[02:21:25] *** Quits: brw (~bas@haring.bas.sh) (Read error: Connection reset by peer)
[02:21:35] *** Joins: robyndrake (~robyndrak@154.16.118.240)
[02:21:37] *** Quits: robyndrake (~robyndrak@154.16.118.240) (Changing host)
[02:21:37] *** Joins: robyndrake (~robyndrak@user/robyndrake)
[02:21:57] *** Joins: brw (~bas@haring.bas.sh)
[02:23:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[02:24:28] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Quit: Leaving)
[02:25:33] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 256 seconds)
[02:25:56] <devslash> stenno App component is the parent of all components and manages the states. I added this code before return: https://pastebin.com/BsQ07eKh it seems that if I try to access the shoppingList state in any way, the Firefox tab crashes
[02:27:28] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[02:30:01] *** Quits: Sven_vB (~sven@user/sven-vb/x-2094958) (Remote host closed the connection)
[02:30:05] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[02:30:26] *** Joins: Sven_vB (~sven@user/sven-vb/x-2094958)
[02:31:11] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:1df9:ed4:9e55:fcaf) (Ping timeout: 250 seconds)
[02:31:12] <SOMBRIO> Hello, JS! integrating a game platform with a web service, it's better to have a web app to handle its thirdparty authentication in order to leverage its thirdparty JS client and then building a API between web app and the game server. in basic terms,  the user would auth in web app with its game login and with the thirdparty. web app would
[02:31:12] <SOMBRIO> generate a "session code" to be inserted in-game by the player and the game server would validate it against the webapp using jsonrpc and then, webapp would intermediate game server and thirdparty auth user session
[02:32:09] *** Joins: Teckla (uid172075@user/teckla)
[02:32:16] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:d5a5:64d4:ee9a:11a1)
[02:32:20] *** Quits: pizdets (~pizdets@183.182.111.155) (Ping timeout: 250 seconds)
[02:32:24] <SOMBRIO> any hints on handling this "session code" thing and building API
[02:32:27] <SOMBRIO> ?
[02:33:11] <Decker> use websockets and use the socket itsef as the code?
[02:33:21] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (Ping timeout: 250 seconds)
[02:33:43] *** Joins: pizdets (~pizdets@183.182.111.120)
[02:36:19] *** Quits: rcoote (~rcoote@ip-176-198-113-232.um43.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[02:37:05] *** Joins: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net)
[02:39:31] <onosendi> devslash: "App component is the parent of all components and manages the states." - Without looking at it, this sounds bad - if state changes in `App`, it'll re-render every single component in your application.
[02:40:38] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[02:41:38] *** Quits: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[02:42:09] <onosendi> devslash: sounds like you have an infinite state loop somewhere, like `useEffect(() => { setFoo('bar'); }, [foo])`.
[02:42:18] *** Quits: kli (~kli@ip-89-177-122-45.net.upcbroadband.cz) (Quit: Leaving)
[02:42:34] *** Joins: kli (~kli@ip-89-177-122-45.net.upcbroadband.cz)
[02:45:57] *** Quits: maret (~maret@nat-88-212-37-89.antik.sk) (Quit: maret)
[02:51:16] *** Quits: musee (~musee@91.216.213.191) (Excess Flood)
[02:51:38] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[02:52:50] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 252 seconds)
[02:52:58] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[02:54:37] *** Joins: ferdna (~ferdna@user/ferdna)
[02:56:13] *** Parts: kli (~kli@ip-89-177-122-45.net.upcbroadband.cz) ()
[02:58:36] *** Joins: tatarqa (~kli@ip-89-177-122-45.net.upcbroadband.cz)
[02:59:53] *** Quits: sgt_chuckles (~sgt_chuck@pool-71-190-209-205.nycmny.fios.verizon.net) (Quit: Client closed)
[03:04:29] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[03:05:06] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 276 seconds)
[03:05:46] *** Quits: eXtr3m0 (~eXtr3m0@user/eXtr3m0) (Ping timeout: 245 seconds)
[03:06:16] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[03:09:35] *** Joins: sam_1 (~sam_1@87.51.251.118)
[03:09:52] <devslash> onosendi, Ive traced my problem to axios
[03:10:07] *** Joins: sgt_chuckles (~sgt_chuck@pool-71-190-209-205.nycmny.fios.verizon.net)
[03:10:17] *** Joins: Linkandzelda (~Linkandze@cloudirc.laz.li)
[03:14:17] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 256 seconds)
[03:14:31] *** Quits: sgt_chuckles (~sgt_chuck@pool-71-190-209-205.nycmny.fios.verizon.net) (Client Quit)
[03:15:40] *** Joins: kalen- (~kalen@gateway/vpn/pia/kalen)
[03:16:48] *** Quits: kmh (~kmh@2a00:6020:5004:6800:5d99:6627:d23c:6f74) (Ping timeout: 268 seconds)
[03:19:32] *** Quits: kalen (~kalen@gateway/vpn/pia/kalen) (Ping timeout: 240 seconds)
[03:19:33] *** kalen- is now known as kalen
[03:19:36] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (Quit: Goodbye.)
[03:20:10] *** Joins: kmh (~kmh@94.31.106.215)
[03:20:23] *** Quits: viva (~viva@2601:2c7:8900:169:4ca6:2bdd:384e:acef) (Remote host closed the connection)
[03:24:24] *** Joins: c4017w_ (~c4017@209.52.68.8)
[03:25:20] *** Joins: kalen- (~kalen@gateway/vpn/pia/kalen)
[03:27:43] *** Joins: kmh_ (~kmh@94.31.106.215)
[03:27:54] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 260 seconds)
[03:28:12] *** Quits: kmh (~kmh@94.31.106.215) (Ping timeout: 250 seconds)
[03:28:12] *** Quits: kalen (~kalen@gateway/vpn/pia/kalen) (Ping timeout: 250 seconds)
[03:28:12] *** kalen- is now known as kalen
[03:28:48] *** Joins: Betal (~Betal@user/betal)
[03:31:37] *** Quits: onosendi (~onosendi@user/onosendi) (Quit: WeeChat 3.4)
[03:32:26] *** Quits: tazle (tazle@kapsi.fi) (Ping timeout: 252 seconds)
[03:34:11] *** Joins: o|||||o (~ol_greg@50-24-3-187.chstcmta05.res.dyn.suddenlink.net)
[03:36:37] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[03:38:06] *** Joins: tazle (tazle@kapsi.fi)
[03:45:45] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:d5a5:64d4:ee9a:11a1) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:47:16] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[03:58:24] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[03:58:24] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[03:58:24] *** Joins: wroathe (~wroathe@user/wroathe)
[03:59:14] <relipse> is it posisble to click and drag and have a rectangle and after mouseup the objects inside the rectangle get selected?
[03:59:15] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[03:59:21] <relipse> i don't want to use canvas
[04:00:54] <relipse> something like this: only with JavaScript and html https://www.codeproject.com/articles/148503/simple-drag-selection-in-wpf
[04:01:00] *** Joins: mauz (~mauz@2a01:e0a:994:7ed0:c12b:4bd7:d283:325b)
[04:03:01] *** Quits: rewrit3 (~rewrit3@user/rewrit3) (Read error: Connection reset by peer)
[04:03:18] *** Quits: mauz (~mauz@2a01:e0a:994:7ed0:c12b:4bd7:d283:325b) (Remote host closed the connection)
[04:06:59] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[04:08:04] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 250 seconds)
[04:09:10] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[04:15:24] *** Quits: tatarqa (~kli@ip-89-177-122-45.net.upcbroadband.cz) (Quit: Leaving)
[04:22:11] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[04:22:21] *** Joins: trevors (~trevors@user/trevors)
[04:24:56] *** Joins: c4017w__ (~c4017@209.52.68.8)
[04:28:10] *** Quits: o|||||o (~ol_greg@50-24-3-187.chstcmta05.res.dyn.suddenlink.net) (Ping timeout: 256 seconds)
[04:28:26] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[04:30:45] *** Joins: mven (~mven@ip68-104-39-54.lv.lv.cox.net)
[04:32:35] *** Quits: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net) ()
[04:34:17] <em> is preact the same as react?
[04:34:37] <lf94> no
[04:34:41] <lf94> But they are close in usage.
[04:35:07] <em> Might learning preact be about as good as learning react?
[04:35:08] <lf94> I would just use React, it's much more widely supported
[04:35:18] <lf94> Yes, it'll teach you the same things
[04:35:20] <lf94> :)
[04:35:50] <em> Only reason I ask is becaue I found this https://preactjs.com/tutorial/
[04:36:20] <lf94> Ah, that is quite nice!
[04:36:24] <lf94> Yeah, I say go for it.
[04:36:50] <lf94> You'll see component-based development is quite simple. It has to be. Otherwise it'd be hard to build more complex things :)
[04:40:24] *** Quits: varrg (~varrg@h-176-10-198-245.A351.priv.bahnhof.se) (Quit: Leaving)
[04:42:54] *** Quits: kakashiA1 (~kakashi@ip-037-201-198-057.um10.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[04:43:21] *** Quits: cotko (~cotko@188-230-251-153.dynamic.t-2.net) (Quit: Konversation terminated!)
[04:50:06] *** Joins: masoudd (~masoudd@user/masoudd)
[04:50:06] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 250 seconds)
[04:55:45] *** Joins: kakashiA1 (~kakashi@ip-037-201-198-057.um10.pools.vodafone-ip.de)
[04:58:38] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Remote host closed the connection)
[04:58:54] *** Joins: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net)
[04:59:10] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[04:59:51] *** Joins: Buoy172 (~Buoy172@95.86.30.134)
[05:00:21] <Buoy172> Hi
[05:00:29] <Buoy172> I'm making an avatar uploader.
[05:01:03] <Buoy172> Should I make it so that the image is being cut at the frontend or at the backend?
[05:02:05] <Buoy172> i.e. send the original image with the subimage rect data, or cut it out in the frontend and send it?
[05:02:50] <masoudd> hmm I guess backend. Because maybe a weak smartphone may struggle to edit huge pictures in js
[05:05:16] *** Joins: AJTJ (~AJTJ@d205-234-49-159.yt.northwestel.net)
[05:05:21] *** Quits: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[05:06:22] <AJTJ> I'm wondering how I'd store a large file, around ~10MB or so in a client.
[05:06:37] <AJTJ> I'm looking at https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API
[05:06:43] <AJTJ> but I'm wondering if there are better practices
[05:06:50] *** Joins: crashrep (~crashrep@user/crashrep)
[05:06:55] <AJTJ> security is of concern as well
[05:10:05] *** Joins: Rockwood (~Rocky@user/rocky)
[05:10:55] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Remote host closed the connection)
[05:11:10] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[05:12:22] *** Quits: PowaBanga (~PowaBanga@user/powabanga) (Ping timeout: 256 seconds)
[05:13:13] <lf94> Buoy172: frontend. cutting the image on a smart phone is not a problem.
[05:13:17] *** Joins: PowaBanga (~PowaBanga@user/powabanga)
[05:13:34] <lf94> You will need to verify the cut in the backend though.
[05:13:42] <lf94> If it is not done, you must do it there as well.
[05:20:44] *** Joins: Betal (~Betal@user/betal)
[05:23:49] *** Quits: junktext (~junktext@gateway/vpn/pia/junktext) (Remote host closed the connection)
[05:23:49] *** Quits: goddard (~goddard@user/goddard) (Read error: Connection reset by peer)
[05:24:08] *** Joins: goddard (~goddard@user/goddard)
[05:25:00] *** Joins: junktext (~junktext@gateway/vpn/pia/junktext)
[05:25:25] *** Joins: c4017w_ (~c4017@209.52.68.8)
[05:25:38] <jaawerth> AJTJ: you can use localStorage but you're more likely to run into the "xyz is requesting in creased storage usage blah blah" since I think the limit can be as low as 5MB for localStorage (it's definitely teh limit for sessionStorage, I *think* LS can be higher in FF, but you wouldn't want to count on it across browsers)
[05:25:42] <jaawerth> the most is indexedDB though
[05:26:17] <AJTJ> jaawerth: have you used indexedDB? Currently I'm considering that an Electron app might be the best solution.
[05:27:01] <AJTJ> I'm also wondering if the browser will consistently cache/save that 10MB file or if the user will be forced to request it every time they load the page.
[05:27:03] <jaawerth> if you want unfettered fs access hten probably yeah
[05:27:26] <jaawerth> I haven't used indexeddb a whole lot tbh since it wasn't that widely available until a couple years backa nd I don't always do clients-ide dev
[05:27:46] <jaawerth> you might wanna look at the library localForage though, which cna do configurable fallbacks between indexeddb, websql, and localStorage
[05:28:22] <jaawerth> but the security limitations may still byte you - localStorage is only restricted by *domain*, not full origin, and I could be wrong but I Think indexeddb is the same
[05:28:46] *** Joins: Schultz (~ivillarro@user/Schultz)
[05:28:48] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[05:29:26] <Slade>  http://www.moonsulfab.info/   reading this guys bio.. is it bad that i recognize the image source code as coming from doom?
[05:29:41] <AJTJ> jaawerth: how would localStorage being restricted by *domain* and not full origin affect this?
[05:31:14] *** Joins: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net)
[05:31:15] <jaawerth> AJTJ: well, any third-party scripts you include (even from, like, a CDN) would also have access to it
[05:32:47] <jaawerth> this goes into detail (though the headline is a bit sensationalist) https://dev.to/rdegges/please-stop-using-local-storage-1i04
[05:32:48] *** Quits: nomic (~nomic@185.192.69.3) (Quit: Leaving)
[05:33:41] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[05:33:41] *** Quits: SOMBRIO (~mtm49@177.137.113.68) (Ping timeout: 256 seconds)
[05:34:03] <AJTJ> jaawerth: thanks, localForage looks interesting, but it might not still be the solution
[05:34:03] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 250 seconds)
[05:34:28] <AJTJ> it uses indexedDB or WebSQL
[05:37:03] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:37:03] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:37:03] *** Joins: wroathe (~wroathe@user/wroathe)
[05:37:37] *** Joins: vysn (~vysn@user/vysn)
[05:43:08] <jaawerth> AJTJ: or localStorage. and yeah, it's not necessarily the solution, it's just worth a look
[05:43:17] <jaawerth> ultimately it's up to you to follow up and make the call
[05:43:47] <AJTJ> jaawerth: for sure mate
[05:44:08] *** Quits: Schultz (~ivillarro@user/Schultz) (Quit: WeeChat 3.4)
[05:48:43] *** Joins: LiftLeft (~LiftLeft@187.170.244.154)
[05:49:38] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 250 seconds)
[05:51:41] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[05:57:16] *** Joins: src (~src@user/src)
[05:58:08] *** Quits: kakashiA1 (~kakashi@ip-037-201-198-057.um10.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[06:02:52] *** Quits: pulse (~pulse@user/pulse) (Read error: Connection reset by peer)
[06:03:33] *** Quits: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net) (Remote host closed the connection)
[06:05:16] *** Quits: Buoy172 (~Buoy172@95.86.30.134) ()
[06:08:32] *** Quits: Stinger (~Stinger@14-203-0-22.tpgi.com.au) (Ping timeout: 250 seconds)
[06:10:18] *** Joins: kakashiA1 (~kakashi@ip-037-201-198-057.um10.pools.vodafone-ip.de)
[06:11:28] *** Joins: jazzy (~jaziz@user/jaziz)
[06:13:32] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[06:13:33] *** Joins: mihael (~mihael@180.190.193.117)
[06:15:02] *** Quits: kakashiA1 (~kakashi@ip-037-201-198-057.um10.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[06:16:46] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[06:22:07] *** Quits: ThePendulum (~znc@user/ThePendulum) (Remote host closed the connection)
[06:22:33] *** Joins: ThePendulum (~znc@user/ThePendulum)
[06:25:21] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[06:25:34] *** Joins: Swahili_ (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[06:25:59] *** Joins: c4017w__ (~c4017@209.52.68.8)
[06:26:36] *** Joins: kakashiA1 (~kakashi@ip-037-201-198-057.um10.pools.vodafone-ip.de)
[06:26:44] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Ping timeout: 250 seconds)
[06:29:20] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[06:30:41] *** Joins: chronon (~chronon@user/chronon)
[06:30:46] *** Quits: defn (~n0b0dy@user/defn) (Ping timeout: 245 seconds)
[06:30:55] *** Quits: kakashiA1 (~kakashi@ip-037-201-198-057.um10.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[06:32:50] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 256 seconds)
[06:33:35] *** Joins: defn (~n0b0dy@user/defn)
[06:33:45] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Ping timeout: 276 seconds)
[06:36:08] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[06:37:52] <Rockwood> https://dpaste.com/94HQRNBXU i am using fetch api so i have to add this too
[06:38:16] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Client Quit)
[06:39:29] *** Quits: defn (~n0b0dy@user/defn) (Ping timeout: 250 seconds)
[06:40:31] *** Joins: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net)
[06:43:28] *** Joins: kakashiA1 (~kakashi@ip-037-201-198-057.um10.pools.vodafone-ip.de)
[06:45:22] *** Quits: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 250 seconds)
[06:47:58] *** Quits: kakashiA1 (~kakashi@ip-037-201-198-057.um10.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[06:49:15] <systemfault> I don't believe the fetch API is going to care about your axios configuration
[06:49:30] <systemfault> You're using axios, right?
[06:49:40] <Rockwood> i am bypassing
[06:49:49] <Rockwood> axios
[06:49:55] <Rockwood> and trying to using fetch
[06:49:58] <Rockwood> https://dpaste.com/BLRUWNLQ7
[06:50:02] <Rockwood> is looks correct
[06:50:05] <Rockwood> ?
[06:50:57] <systemfault> I don't know, I never heard of that library
[06:51:04] <systemfault> I thought you were using window.fetch
[06:51:58] <Rockwood> actially laravel uses axios by default
[06:52:16] <systemfault> I imagine that the author of that library isn't aware of what KY is...
[06:52:52] <systemfault> Rockwood: You're saying that you use "fetch" then you show me a paste with an axios config... then another one using some library called KY
[06:52:55] <Rockwood> systemfault, https://github.com/sindresorhus/ky i am using this api
[06:53:21] <systemfault> When someone says "I'm using fetch", it usually means the built-in "window.fetch"
[06:53:36] <systemfault> Ah, my favorite package author...
[06:53:38] <systemfault> </s>
[06:53:44] <Rockwood> in directly its uses fetch
[06:54:41] <systemfault> Line 25 looks suspicious to me
[06:54:56] *** Joins: defn (~n0b0dy@user/defn)
[06:54:56] <systemfault> The rest looks like it makes sense
[06:55:19] <Rockwood> https://dpaste.com/BLRUWNLQ7#line-25 hows?
[06:56:05] <systemfault> I'm not sure, I simply don't expect error to do IO
[06:56:12] *** Joins: paule32_ (~paul@nat-91-137-17-17.net.encoline.de)
[06:56:12] *** Quits: paule32_ (~paul@nat-91-137-17-17.net.encoline.de) (Changing host)
[06:56:12] *** Joins: paule32_ (~paul@user/paule32)
[06:56:55] *** Joins: macswagger (~cee@cpe-104-34-48-156.socal.res.rr.com)
[06:57:09] *** Joins: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net)
[06:57:13] <Rockwood> IO??
[06:57:31] <Rockwood> what is the fulling meaning of IO here?
[06:57:37] <Rockwood> what is the full meaning of IO here?
[06:57:41] <systemfault> Input/Output... How programs communicate with the world.
[06:57:49] <Rockwood> okay
[06:57:59] <Rockwood> its created for error
[06:59:16] <systemfault> Usually, errors are "values" that contains a name, a message and some other "values", they don't usually have special methods on them that requires them to be awaited
[06:59:58] <systemfault> But again, I don't know that KY library.... and I believe that the author is an asshole (as a developer, not as a person)
[06:59:59] *** Joins: kakashiA1 (~kakashi@ip-037-201-198-057.um10.pools.vodafone-ip.de)
[07:00:20] <Rockwood> lol
[07:00:46] *** Joins: de-facto_ (~de-facto@user/de-facto)
[07:01:01] <Rockwood> why?
[07:01:24] <systemfault> The guy as a billion packages and uses his weight to push ESM to everyone
[07:01:45] <systemfault> Telling people who still have to use CommonJS to go F themselves
[07:02:02] <Rockwood> in ky api too?
[07:02:11] <systemfault> I haven't looked
[07:02:18] *** Quits: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[07:02:21] *** Quits: de-facto (~de-facto@user/de-facto) (Ping timeout: 276 seconds)
[07:02:26] <Rockwood> ah okay
[07:02:26] <systemfault> From the package.json, ky looks like a ESM-only package
[07:02:37] <systemfault> https://github.com/sindresorhus/ky/blob/main/package.json#L13
[07:03:15] <systemfault> ESM is never a trouble if you use a bundler
[07:03:19] <systemfault> So you should be fine
[07:03:44] *** Quits: stagas (~stagas@2a02:587:c40c:7fd2:bb29:a7be:1027:6ad5) (Ping timeout: 268 seconds)
[07:04:08] <Rockwood> actually i am not technically sound in coding keywords
[07:04:39] <Rockwood> so i wanna as in general, ESM means outdated?
[07:04:58] *** de-facto_ is now known as de-facto
[07:07:01] <systemfault> ESM is the "import {whatever} from 'something';
[07:07:13] <systemfault> It's the new thing... too new
[07:07:13] <Rockwood> ah okay
[07:07:51] <Rockwood> is axios better comparatively ky?
[07:08:04] <systemfault> I don't know, never used them
[07:08:13] <systemfault> Axios is definitely more mature
[07:08:20] *** Quits: macswagger (~cee@cpe-104-34-48-156.socal.res.rr.com) (Ping timeout: 250 seconds)
[07:08:48] <Rockwood> and Fetch Api?
[07:08:53] *** Quits: LiftLeft (~LiftLeft@187.170.244.154) (Ping timeout: 256 seconds)
[07:08:53] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 256 seconds)
[07:08:58] <systemfault> Lower level than Axios
[07:09:00] <Rockwood> i means window.fetch
[07:09:03] *** Joins: macswagger (~cee@cpe-104-34-48-156.socal.res.rr.com)
[07:09:24] <systemfault> a 400 is not an error with fetch but is with axios for example
[07:09:56] <Rockwood> thanks for explain
[07:10:03] <Rockwood> now i got your point
[07:10:54] <Rockwood> my backend throws on error 422
[07:11:17] *** Joins: advanced_malform (~Srain@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417)
[07:11:18] <Rockwood> backend is PHP based
[07:11:26] <systemfault> wth is 422 again?
[07:12:02] <Rockwood> https://stackoverflow.com/questions/37146559/why-am-i-getting-a-422-error-code
[07:12:07] <Rockwood> i am talking about this
[07:12:24] <systemfault> Okay, strange but whatever
[07:12:43] <systemfault> (It's WebDAV)
[07:12:53] <systemfault> Not a standard HTTP error code (AFAIK)
[07:13:03] <Rockwood> ah okay
[07:13:22] <Rockwood> i think they set it in the behind of screens
[07:13:31] <systemfault> It's fine
[07:13:59] *** Joins: CoolerY (~CoolerX@user/coolerx)
[07:14:02] <Rockwood> do you use only fetch?
[07:14:05] <Rockwood> do you use only fetch api?
[07:14:45] <systemfault> That's probably what I would do... but I've mostly been doing backend programming for the last 4 years
[07:14:54] *** Joins: masoudd (~masoudd@user/masoudd)
[07:14:56] *** Quits: CoolerX (~CoolerX@user/coolerx) (Read error: Connection reset by peer)
[07:15:06] <Rockwood> ok if you need to do then?
[07:15:26] <Rockwood> i know you are TSX master
[07:16:02] <systemfault> I'm solid with TypeScript, React... not so much these days (TSX)
[07:18:09] <Rockwood> yes i noticed
[07:18:36] <Rockwood> in tsx nothing like requests?
[07:18:47] <Rockwood> idk know much about tsx
[07:19:14] <Rockwood> i means TypeScript
[07:20:35] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[07:20:40] *** Quits: advanced_malform (~Srain@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417) (Remote host closed the connection)
[07:21:25] *** Joins: MadcapJake (~MadcapJak@2600:6c44:257f:e1f7::1a29)
[07:21:56] <systemfault> TSX is to TS what JSX is to JS
[07:22:08] *** Quits: PowaBanga (~PowaBanga@user/powabanga) (Ping timeout: 256 seconds)
[07:22:53] *** Joins: PowaBanga (~PowaBanga@user/powabanga)
[07:24:04] *** Joins: junebug (~junebug@2600:1700:3db0:2540:4368:9dd6:c255:95c1)
[07:24:48] *** Joins: dsrt^ (~dsrt@128-092-164-034.biz.spectrum.com)
[07:25:15] <Rockwood> is setInterval not good for use?
[07:25:34] <systemfault> Let's say that it's bad in a lot of cases
[07:25:35] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[07:25:40] <Rockwood> okay
[07:25:57] <systemfault> Because unlike a setTimeout loop, it doesn't care about "lag" or errors
[07:26:17] <Rockwood> i wanna make a alternative of setInterval
[07:26:27] *** Joins: c4017w_ (~c4017@209.52.68.8)
[07:26:36] <Rockwood> i wanna stop scrolling of list
[07:27:00] <Rockwood> in every specified time
[07:27:23] <Rockwood> without clicking anywhere
[07:27:37] <systemfault> There are different ways to do it....
[07:27:47] <devslash> this is the heirarchy of my components in my react app: https://imgur.com/a/z1ks5pM As you can see, app is the parent component for all of my states
[07:28:56] <Rockwood> systemfault, please suggest me any
[07:29:42] <devslash> I feel that app handling everything int the best way but aside for Redux which I dont want to use, I dont know of a better way
[07:29:45] <systemfault> Rockwood: Here's one using async/await https://jsfiddle.net/0jfw2bcx/
[07:30:04] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[07:31:16] <systemfault> Rockwood: Here's one with setTimeout https://jsfiddle.net/0jfw2bcx/1/
[07:31:18] <Rockwood> systemfault, i am using react
[07:31:33] <systemfault> Not sure what that changes...\
[07:31:39] *** Joins: \mSg (mSg@user/msg/x-0285936)
[07:32:47] <Rockwood> i think new Promise
[07:32:59] *** Joins: idle_rain (~idle_rain@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417)
[07:33:01] <Rockwood> this keyword requires there too
[07:33:03] <Rockwood> ??
[07:34:31] *** Quits: idle_rain (~idle_rain@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417) (Quit: idle_rain)
[07:35:31] <Rockwood> https://dpaste.com/6LCD63D68 i was trying to that way
[07:36:00] <Rockwood> it is totally wrong looks
[07:41:33] *** Joins: thojanssens (~thojansse@49.230.65.10)
[07:41:43] *** Quits: thojanssens (~thojansse@49.230.65.10) (Client Quit)
[07:44:31] <Rockwood> you are calling twice function setTimeout(loop
[07:44:36] <Rockwood> loop()
[07:44:46] <Rockwood> am correct?
[07:47:56] <systemfault> Better ask a React pro
[07:49:21] <sickdyd> our index page does not have an h1 tag, should I add one and make it transparent or something? (for SEO)
[07:49:25] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[07:49:50] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[07:49:56] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 250 seconds)
[07:52:59] *** Joins: onosendi (~onosendi@user/onosendi)
[07:53:10] <ljharb> sickdyd: it should be visible. transparent things don't count towards seo.
[07:53:13] <onosendi> devslash: why don't you want to use Redux?
[07:53:46] <devslash> I think its overkill for a lot of projects
[07:54:30] <devslash> and is a bit complicated for newer react devs like myself
[07:55:28] *** Quits: voltage_ (voltage@user/voltage) (Quit: Leaving)
[07:55:28] <devslash> Rockwood, what are you trying to do in React
[07:55:30] <devslash> ?
[07:56:17] <onosendi> devslash: I disagree. It's a relatively small library, and you can get a reducer with actions implemented with 10~ lines of code.
[07:56:56] <devslash> I disagree about 10 LOC
[07:57:39] <onosendi> devslash: gimme a sec.
[07:57:40] <devslash> i followed a tutorial on React that covers Redux and it was a lot more lengthy for a basic setup of redux actions
[07:57:41] <devslash> ok
[07:57:47] <Rockwood> devslash, https://dpaste.com/3A2EA2RCA works but still i am not sure about setIsScrolling
[07:58:16] <Rockwood> i wanna control list to stop scrolling and running
[07:59:20] <devslash> ok why are you using setTimeout
[07:59:46] <Rockwood> i wanna control like in every 5 second
[07:59:49] <devslash> it seems like a bad idea in react because states updates are scheduled, not immediate
[08:00:53] <Rockwood> what is good solution?
[08:01:28] <devslash> so let me understand your goal
[08:01:38] <Rockwood> ok
[08:02:28] <Rockwood> i wanna run use <Marquee delay="40" marqueeItems={responseData} /> after every 5 sec
[08:02:36] <Rockwood> i wanna run <Marquee delay="40" marqueeItems={responseData} /> after every 5 sec
[08:02:47] <Rockwood> this is my concern just
[08:02:55] <devslash> you want to show it after 5 seconds
[08:03:07] <devslash> then after another 5 seconds hide it ?
[08:03:17] *** Quits: kakashiA1 (~kakashi@ip-037-201-198-057.um10.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[08:03:19] <Rockwood> yes ever 5 sec interval
[08:03:21] <devslash> then after another 5 seconds show it again
[08:03:37] <devslash> im confused
[08:03:52] <devslash> you want to show it every 5 seconds but how long do you want it to be visible for
[08:03:59] <Rockwood> after 5 <div>loading...</div>
[08:04:35] <Rockwood> only for 5 secs it should be show
[08:04:48] <devslash> then hidden forever
[08:05:12] <devslash> oh so you want to show a loading div while the data is being retrieved ?
[08:05:23] <sickdyd> ljharb: thanks
[08:05:30] <Rockwood> show (5) then blank div (5) show (5) then blank div (5)
[08:05:33] <Rockwood> likethis
[08:06:06] <Rockwood> devslash, repeat 5 to show 5 to hide
[08:06:08] <devslash> what king of content is being shown in that marquee component
[08:06:16] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[08:06:20] <Rockwood> its a list of members
[08:06:24] <Rockwood> its array
[08:06:41] <devslash> so why are you hiding it
[08:06:52] <Rockwood> actually
[08:06:55] <devslash> i just want to understand the logic
[08:07:14] <Rockwood> i wanna stop scrolling
[08:07:16] *** Quits: Relms-Wah (~relms@user/relms) (Quit: Ur Cute)
[08:07:24] <Rockwood> once scrolling
[08:07:30] <Rockwood> after once scrolling
[08:07:41] <devslash> i would use a state to control whats hidden and whats visible
[08:07:51] <Rockwood> ok
[08:08:04] <Rockwood> in my case?
[08:08:13] <devslash> when isScrolling == true render the marquee component
[08:08:18] <Rockwood> yes
[08:08:28] <Rockwood> that is i want just
[08:08:38] <devslash> in useeffect you should settimeout to toggle the value of isScrolling after 5 seconds
[08:09:00] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[08:09:02] <Rockwood> i am trying similar as you pointing
[08:09:36] <Rockwood> for --> 5 seconds i am using setTimeout
[08:09:36] <devslash> why are you using nested functions
[08:09:47] <Rockwood> which nested?
[08:09:49] <devslash> i dont think you need that in useEffect
[08:09:50] <Rockwood> oh
[08:09:52] *** Joins: que11en (~oem@dynamic-046-114-173-069.46.114.pool.telefonica.de)
[08:09:56] <Rockwood> ok
[08:10:02] <devslash> function aaa { function { .....
[08:10:35] <devslash> Try to get rid of everything except settimeout line
[08:11:00] <Rockwood> ok then
[08:11:11] <devslash> and see if it behaves differently. You shouldnt need to invoke the timeout like that
[08:11:31] <devslash> also
[08:11:50] <devslash> you probably want to do setScrolling(!isScrolling) dont you ?
[08:12:09] <devslash> to toggle the value of isScrolling on each run of setInterval
[08:12:31] *** Joins: sudomann (~sudomann@98.219.211.182)
[08:12:48] <Rockwood> devslash, i am stuck on the from last few days
[08:12:59] <Rockwood> so confuse how to do that
[08:13:11] <Rockwood> that why can't think abou tit
[08:13:27] <Rockwood> now i have only         setTimeout( setIsScrolling(true) , 5000) }
[08:13:38] <Rockwood> i removed other codes
[08:13:40] <devslash> ok
[08:13:48] <devslash> this will always set it to truw
[08:13:51] <devslash> true
[08:13:56] <Rockwood> okay
[08:13:58] <devslash> and I dont think you want to do that here
[08:14:17] <devslash> you want to toggle isScrolling
[08:14:23] <Rockwood> yes
[08:14:33] <devslash> so when its already false it will become true and vice versa
[08:15:03] <KevinX> 1. Have a useEffect that starts a timer on load [] and changes state after 5 seconds then 2. have another useEffect that monitors for that state change and sets a new timer (and also clears it in the return). This second useEffect will repeat
[08:15:07] <devslash> so replace true with !isScrolling
[08:15:49] <Rockwood>         setTimeout( setIsScrolling(!isScrolling) , 5000) } am correct?
[08:16:03] *** Joins: kakashiA1 (~kakashi@ip-037-201-198-057.um10.pools.vodafone-ip.de)
[08:16:20] <devslash> no trailing }
[08:16:28] <Rockwood> ah okay
[08:16:47] <onosendi> devslash: https://gist.github.com/onosendi/4d066ac74f228afe579b888014f9e53e
[08:17:30] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[08:17:30] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[08:17:30] *** Joins: wroathe (~wroathe@user/wroathe)
[08:17:41] <devslash> thanks i need to look this over to make sense of it ..
[08:18:10] <Rockwood> Too many re-renders. React limits the number of renders to prevent an infinite loop.
[08:18:14] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 256 seconds)
[08:18:30] <devslash> is that the same error you were getting before ?
[08:18:52] <Rockwood> no
[08:19:03] <Rockwood> right now i am getting after change the code
[08:19:15] <devslash> if you comment out settimeout does this error go away ?
[08:19:37] <KevinX> Rockwood put up a demo
[08:20:42] <Rockwood> https://dpaste.com/AUHPYRCFZ
[08:20:42] *** Quits: kakashiA1 (~kakashi@ip-037-201-198-057.um10.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[08:20:48] <Rockwood> the code looks like this
[08:20:50] <Rockwood> i think
[08:20:54] <Rockwood> i am missing
[08:21:13] <devslash> do you remove useeffect
[08:21:23] <Rockwood> yes
[08:21:36] <KevinX> just put up a live demo and i'll have it working in 5 minutes
[08:21:42] <onosendi> devslash: Redux Toolkit made Redux a lot more fun with less boilerplate. https://redux.js.org/tutorials/essentials/part-1-overview-concepts
[08:22:02] <devslash> i appreciate your help but fyi, that 51 LOC
[08:22:22] <Rockwood> KevinX, on sendbox?
[08:22:26] <devslash> a lot more than 10
[08:22:33] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[08:22:34] <KevinX> anywhere you want Rockwood
[08:22:39] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[08:23:11] <Rockwood> i have to do lots of configuration for that
[08:23:13] <Rockwood> ok
[08:23:20] <Rockwood> give me few seconds
[08:23:58] *** Joins: SchmoSeph (uid530771@id-530771.tinside.irccloud.com)
[08:24:35] <Rockwood> KevinX, anymore faster for demo?
[08:25:01] <onosendi> devslash: counterSlice.js and store.js are the only additions to your already working application.
[08:25:05] <KevinX> No tsure i dont use those sites often, maybe https://codesandbox.io/s/new
[08:26:58] *** Joins: c4017w__ (~c4017@209.52.68.8)
[08:27:02] <Rockwood> https://codesandbox.io/s/unruffled-cookies-dzssu?file=/src/App.js error
[08:28:32] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[08:28:56] <devslash> so yea settimeout is causing the re-renders
[08:29:09] <Rockwood> so now?
[08:29:14] <devslash> as soon as i comment it out the error goes away
[08:29:20] <Rockwood> yes
[08:29:31] <KevinX> give me 2 min
[08:29:34] <devslash> one sec i have an idea
[08:29:35] <Rockwood> okay
[08:29:43] <devslash> using useEffect
[08:30:10] <Rockwood> like before?
[08:30:18] <Rockwood> KevinX, take your time
[08:30:26] <systemfault> Even your setTimeout is weird...
[08:30:29] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[08:30:48] <systemfault> Unless setIsScrolling(!isScrolling) returns a function... it doesn't make sense
[08:31:20] <Rockwood> what should be there now??
[08:31:20] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Remote host closed the connection)
[08:31:37] <systemfault> So... the component is trying to render... setIsScrolling is reversed... causing another render... setIsScrolling is reversed yet again, causing a rerender...
[08:31:40] <systemfault> and so on.
[08:31:40] <Rockwood> really i am very confuse by many approaches
[08:31:57] *** Quits: paule32_ (~paul@user/paule32) (Read error: Connection reset by peer)
[08:32:05] <systemfault> "setTimeout" takes a function as its first argument that is going to be called when the timeout is done
[08:32:17] *** Joins: kakashiA1 (~kakashi@ip-037-201-198-057.um10.pools.vodafone-ip.de)
[08:32:34] <systemfault> But again, I'm not a React dev... maybe you have to use "useEffect" or whatever.
[08:32:53] <devslash> im using useEffect to try and fix it actually
[08:33:18] <Rockwood> ok
[08:33:45] <Rockwood> systemfault, but your logic is correct
[08:33:53] *** Quits: defn (~n0b0dy@user/defn) (Ping timeout: 256 seconds)
[08:33:59] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[08:33:59] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[08:33:59] *** Joins: wroathe (~wroathe@user/wroathe)
[08:34:07] <Rockwood> you know that code works there
[08:34:19] *** Joins: defn (~n0b0dy@user/defn)
[08:34:19] <Rockwood> your given code
[08:35:42] <devslash> i got isscrolling to toggle correctly
[08:35:49] <KevinX> https://codesandbox.io/s/damp-flower-7is8h?file=/src/App.js:0-1021
[08:36:20] <devslash> https://codesandbox.io/s/unruffled-cookies-dzssu?file=/src/App.js
[08:36:27] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[08:36:37] <systemfault> KevinX: React hooks are fun, I really need to update my React skills
[08:36:43] *** Quits: kakashiA1 (~kakashi@ip-037-201-198-057.um10.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[08:36:47] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[08:37:48] <KevinX> They really are a pleasure to work with
[08:37:52] <theskillwithin> devslash did you save the codesandbox and share the new link?  cuz I think you pasted the same link rockwood gave you
[08:38:06] <devslash> let me check
[08:38:26] <devslash> oh yea thanks
[08:38:28] <Rockwood> KevinX, 2 lists there
[08:38:29] <devslash> I forked it
[08:38:31] <devslash> https://codesandbox.io/s/damp-flower-7is8h?file=/src/App.js:0-1021
[08:38:37] <KevinX> i had to write it twice as when i hit fork codesandbox disgarded my changes =/
[08:38:54] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[08:38:59] *** Joins: Relms-Wah (~relms@user/relms)
[08:39:06] <devslash> oops thats not it
[08:39:39] <Rockwood> KevinX,   useEffect(() => { so 2 i needed there?
[08:40:17] <KevinX> yes, one to run on initial render only, then another that fires everytime you update the state, so every 5 sec
[08:40:45] <KevinX> useEffect lets you monitor specific state and only run when it changes
[08:42:10] <devslash> Rockwood, tiny.cc/e33ouz
[08:42:25] <devslash> i had to shorten the url because i cant paste it here
[08:43:15] <theskillwithin> devslash did you share the wrong one again?
[08:43:22] <devslash> no
[08:43:57] *** Joins: EdFletcher (~PKD@user/edfletcher)
[08:44:22] <devslash> that link shows loading... and not loading... every 5 seconds
[08:45:27] <KevinX> in react you want to put all side effects in useEffect
[08:45:54] <onosendi> KevinX: if `useEffect` has a dependency it'll still run on the first render, so both are being fired on first render.
[08:46:51] <KevinX> yeah that's true, can remove the first one
[08:48:07] <KevinX> But if you need code to run only once then keep it in there and add a flag to the second
[08:48:19] <KevinX> I think there was a fetch in there originally
[08:48:26] *** Quits: onosendi (~onosendi@user/onosendi) (Quit: WeeChat 3.4)
[08:48:36] <KevinX> fetch should los be done in useEffect
[08:48:51] <KevinX> Essentially anything that interacts with the browser api should be insid euseEffect
[08:49:35] <Rockwood> KevinX, so the code is finally fine?
[08:49:45] *** Quits: que11en (~oem@dynamic-046-114-173-069.46.114.pool.telefonica.de) (Ping timeout: 256 seconds)
[08:49:55] *** Joins: kakashiA1 (~kakashi@ip-037-201-198-057.um10.pools.vodafone-ip.de)
[08:50:04] <KevinX> yes but you need to add your other code too
[08:51:36] <KevinX> Are you checking the scroll position too? You can watch the scroll event instead and reset the timer there as well
[08:53:23] <Rockwood> what kind of i have to add there?
[08:54:23] <KevinX> what exactly do you want to do
[08:54:58] <Rockwood> responseData?.length && isScrolling is the correct?
[08:55:28] <KevinX> maybe
[08:55:38] <Rockwood> i wanna var1 === true AND var2 === true then run
[08:55:49] <Rockwood> i means render
[08:56:17] *** Quits: macswagger (~cee@cpe-104-34-48-156.socal.res.rr.com) (Quit: Lost terminal)
[08:56:22] <Rockwood> only loading is coming
[08:56:50] <KevinX> you have to get good at debugging. Did you console log what's in the response?
[08:57:08] <Rockwood> i think i have make it simple
[08:57:16] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:57:20] <Rockwood> just response before everything
[08:57:31] <Rockwood> scrolling should be next one
[08:58:02] <KevinX> then inside useEffect with [] dependencies, run fetch
[08:58:28] <KevinX> in the timer useEffect, return early if responseData is empty
[08:58:45] <KevinX> And update the dependencies to [isScrolling, responseData]
[08:59:31] *** Joins: src_ (~src@user/src)
[09:00:08] *** Quits: mihael (~mihael@180.190.193.117) (Quit: Client closed)
[09:00:52] *** Joins: que11en (~oem@dynamic-046-114-173-069.46.114.pool.telefonica.de)
[09:02:19] *** Quits: MadcapJake (~MadcapJak@2600:6c44:257f:e1f7::1a29) (Quit: MadcapJake)
[09:02:19] <KevinX> Something like this: https://codesandbox.io/s/damp-flower-7is8h?file=/src/App.js
[09:04:26] *** Quits: src_ (~src@user/src) (Remote host closed the connection)
[09:05:32] <KevinX> I set it up with real data in there now
[09:05:46] <KevinX> oh wait, one sec
[09:06:09] *** Quits: junebug (~junebug@2600:1700:3db0:2540:4368:9dd6:c255:95c1) (Quit: Leaving)
[09:06:12] <KevinX> ok now it's good
[09:06:45] *** Joins: src_ (~src@user/src)
[09:07:00] <KevinX> it's 12:30am here. signing off now
[09:08:12] *** Quits: kakashiA1 (~kakashi@ip-037-201-198-057.um10.pools.vodafone-ip.de) (*.net *.split)
[09:08:12] *** Quits: Relms-Wah (~relms@user/relms) (*.net *.split)
[09:08:12] *** Quits: c4017w__ (~c4017@209.52.68.8) (*.net *.split)
[09:08:12] *** Quits: \mSg (mSg@user/msg/x-0285936) (*.net *.split)
[09:08:12] *** Quits: masoudd (~masoudd@user/masoudd) (*.net *.split)
[09:08:12] *** Quits: CoolerY (~CoolerX@user/coolerx) (*.net *.split)
[09:08:12] *** Quits: Swahili_ (~Swahili@a95-94-208-187.cpe.netcabo.pt) (*.net *.split)
[09:08:12] *** Quits: src (~src@user/src) (*.net *.split)
[09:08:12] *** Quits: junktext (~junktext@gateway/vpn/pia/junktext) (*.net *.split)
[09:08:12] *** Quits: AJTJ (~AJTJ@d205-234-49-159.yt.northwestel.net) (*.net *.split)
[09:08:12] *** Quits: kalen (~kalen@gateway/vpn/pia/kalen) (*.net *.split)
[09:08:12] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (*.net *.split)
[09:08:12] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (*.net *.split)
[09:08:12] *** Quits: robyndrake (~robyndrak@user/robyndrake) (*.net *.split)
[09:08:12] *** Quits: The_Tablet (~tablet@user/the-tablet) (*.net *.split)
[09:08:12] *** Quits: ckdCreations (~ckdCreati@147.55.133.138) (*.net *.split)
[09:08:12] *** Quits: pavonia (~user@user/siracusa) (*.net *.split)
[09:08:12] *** Quits: ttys000 (~ttys000@user/ttys000) (*.net *.split)
[09:08:12] *** Quits: revolve (~u0_a227@cpc100838-bagu15-2-0-cust672.1-3.cable.virginm.net) (*.net *.split)
[09:08:12] *** Quits: moldorcoder7 (~moldorcod@37.120.143.28) (*.net *.split)
[09:08:12] *** Quits: APic (~apic@apic.name) (*.net *.split)
[09:08:12] *** Quits: robertmaxrees (~robert0@c-76-114-62-229.hsd1.ca.comcast.net) (*.net *.split)
[09:08:12] *** Quits: lefteye (~wbrawner@c-67-190-106-99.hsd1.co.comcast.net) (*.net *.split)
[09:08:12] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (*.net *.split)
[09:08:12] *** Quits: Tabmow (~tabmow@user/tabmow) (*.net *.split)
[09:08:12] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (*.net *.split)
[09:08:12] *** Quits: erry (~erry@errietta.me) (*.net *.split)
[09:08:12] *** Quits: sheetjs (~sheetjs@user/sheetjs) (*.net *.split)
[09:08:12] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (*.net *.split)
[09:08:12] *** Quits: vbgunz (~vbgunz@35.141.71.47) (*.net *.split)
[09:08:12] *** Quits: wovixo (~wovixo@128.104.205.49) (*.net *.split)
[09:08:12] *** Quits: Stanley (~stanley@d66-183-88-69.bchsia.telus.net) (*.net *.split)
[09:08:12] *** Quits: gde33 (~gde33@84-106-154-98.cable.dynamic.v4.ziggo.nl) (*.net *.split)
[09:08:12] *** Quits: Nnnavd (~Nnavd@ec2-34-220-224-214.us-west-2.compute.amazonaws.com) (*.net *.split)
[09:08:12] *** Quits: Joel (~jjshoe@user/joel) (*.net *.split)
[09:08:12] *** Quits: Nitrousoxide (~msdos@user/nitrousoxide) (*.net *.split)
[09:08:12] *** Quits: Alexendoo (~Alex@144.21.50.247) (*.net *.split)
[09:08:12] *** Quits: dskull (~dskull@user/dskull) (*.net *.split)
[09:08:12] *** Quits: brentaarnold (~brentaarn@24.112.58.14) (*.net *.split)
[09:08:12] *** Quits: kcrk (~kcrk@user/kcrk) (*.net *.split)
[09:08:12] *** Quits: monokrome| (~monokrome@50.215.11.140) (*.net *.split)
[09:08:12] *** Quits: justGhost (~justache@user/justache) (*.net *.split)
[09:08:13] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (*.net *.split)
[09:08:13] *** Quits: zuQe8 (~zuQe8@cpc105060-sgyl40-2-0-cust136.18-2.cable.virginm.net) (*.net *.split)
[09:08:13] *** Quits: sunyour (~sunyour@129.226.182.99) (*.net *.split)
[09:08:13] *** Quits: coc0nut (~coc0nut@user/coc0nut) (*.net *.split)
[09:08:13] *** Quits: webstran- (~webstrand@user/webstrand) (*.net *.split)
[09:08:13] *** Quits: hassoon__ (~hassoon@triton.blinkenshell.org) (*.net *.split)
[09:08:13] *** Quits: philivey9426 (~polarizin@188.166.72.81) (*.net *.split)
[09:08:13] *** Quits: cryocaustik7 (~cryocaust@user/cryocaustik) (*.net *.split)
[09:08:13] *** Quits: scoobydoo (~scooby@user/scoobydoo) (*.net *.split)
[09:08:13] *** Quits: Swant (~swant@libera/staff/swant) (*.net *.split)
[09:08:13] *** Quits: jellobot (~jellobot@li334-26.members.linode.com) (*.net *.split)
[09:08:13] *** Quits: llorllale (~llorllale@198.98.119.85) (*.net *.split)
[09:08:13] *** Quits: ethoxy (~root@bison.alphaw0lf.xyz) (*.net *.split)
[09:08:13] *** Quits: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net) (*.net *.split)
[09:08:13] *** Quits: [R] (~rs@genoce.org) (*.net *.split)
[09:08:13] *** Quits: Cheaterman (~Cheaterma@user/cheaterman) (*.net *.split)
[09:08:13] *** Quits: hassoon_ (hassoon@user/hassoon) (*.net *.split)
[09:08:13] *** Quits: Unfixed (~Jake@64.31.33.140) (*.net *.split)
[09:08:13] *** Quits: Spydar007 (~spydar007@user/spydar007) (*.net *.split)
[09:08:13] *** Quits: gjvc (~gjvc@user/gjvc) (*.net *.split)
[09:08:13] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (*.net *.split)
[09:08:13] *** Quits: dlam (~dlam@dlam.me) (*.net *.split)
[09:08:13] *** Quits: les_ (~whome@user/les) (*.net *.split)
[09:08:13] *** Quits: Lewix__ (sid158496@tinside.irccloud.com) (*.net *.split)
[09:08:13] *** Quits: AlbertLast (~nix@0exclusive.de) (*.net *.split)
[09:08:13] *** Quits: SchmoSeph (uid530771@id-530771.tinside.irccloud.com) (*.net *.split)
[09:08:13] *** Quits: ThePendulum (~znc@user/ThePendulum) (*.net *.split)
[09:08:13] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (*.net *.split)
[09:08:13] *** Quits: goddard (~goddard@user/goddard) (*.net *.split)
[09:08:13] *** Quits: Rockwood (~Rocky@user/rocky) (*.net *.split)
[09:08:14] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (*.net *.split)
[09:08:14] *** Quits: kmh_ (~kmh@94.31.106.215) (*.net *.split)
[09:08:14] *** Quits: Linkandzelda (~Linkandze@cloudirc.laz.li) (*.net *.split)
[09:08:14] *** Quits: pizdets (~pizdets@183.182.111.120) (*.net *.split)
[09:08:14] *** Quits: mdemo (~mdemo@user/mdemo22) (*.net *.split)
[09:08:14] *** Quits: Icedream (~icedream@hzn-b.serverkomplex.de) (*.net *.split)
[09:08:14] *** Quits: dmanto (~dmanto@181.110.128.9) (*.net *.split)
[09:08:14] *** Quits: pluri (~pluri@user/pluri) (*.net *.split)
[09:08:14] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (*.net *.split)
[09:08:14] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (*.net *.split)
[09:08:14] *** Quits: Isthmusi (~Isthmus@user/isveni) (*.net *.split)
[09:08:14] *** Quits: MassDebates_ (~MassDebat@2600:1700:1184:4510:9c49:337:e7b4:2360) (*.net *.split)
[09:08:14] *** Quits: b-rex (van@down.by.the.river.lol) (*.net *.split)
[09:08:14] *** Quits: Fossil (~Fossil@2a03:b0c0:0:1010::398:b001) (*.net *.split)
[09:08:14] *** Quits: baakeydow (~baake@2001:41d0:203:b12c::) (*.net *.split)
[09:08:14] *** Quits: EgonX (~EgonX@2601:2c6:47f:879e:117c:703e:db5f:c029) (*.net *.split)
[09:08:14] *** Quits: raj_ (raj@2600:3c03::f03c:91ff:feae:498) (*.net *.split)
[09:08:14] *** Quits: jw_dungeon (~quassel@2601:44:4380:4a10:4587:3637:b23f:ed34) (*.net *.split)
[09:08:14] *** Quits: dan_berg_pub_ (2c6463a49d@2604:bf00:561:2000::1c) (*.net *.split)
[09:08:14] *** Quits: _sgen (~sgen@2607:fea8:7ce1:c8e0:ec63:8eee:4635:2aa8) (*.net *.split)
[09:08:14] *** Quits: Anonamy (~Anonamy@2001:569:7b8c:5300:43ca:5acf:d440:6416) (*.net *.split)
[09:08:14] *** Quits: themaxdavitt_ (sid433050@id-433050.hampstead.irccloud.com) (*.net *.split)
[09:08:14] *** Quits: jwpapi (sid502614@id-502614.uxbridge.irccloud.com) (*.net *.split)
[09:08:14] *** Quits: notchris (sid181145@id-181145.hampstead.irccloud.com) (*.net *.split)
[09:08:14] *** Quits: llinguini (sid257922@id-257922.hampstead.irccloud.com) (*.net *.split)
[09:08:14] *** Quits: chowmeined (~chowmeine@user/chowmeined) (*.net *.split)
[09:08:14] *** Quits: doji (~doji@user/doji) (*.net *.split)
[09:08:14] *** Quits: diverdude (~user@176-21-102-230-cable.dk.customer.tdc.net) (*.net *.split)
[09:08:14] *** Quits: m_antis (~znc_admin@ool-44c09a21.dyn.optonline.net) (*.net *.split)
[09:08:14] *** Quits: qwedfg_ (~qwedfg@user/qwedfg) (*.net *.split)
[09:08:14] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (*.net *.split)
[09:08:14] *** Quits: blezz (~blez@213-130-92-213.ip.btc-net.bg) (*.net *.split)
[09:08:14] *** Quits: pragma- (~chaos@user/pragmatic-chaos) (*.net *.split)
[09:08:14] *** Quits: edr (~edr@user/edr) (*.net *.split)
[09:08:14] *** Quits: kzootech (~contact@kzoo.tech) (*.net *.split)
[09:08:14] *** Quits: mattf (mattf@2600:3c03::f03c:92ff:fea6:56a4) (*.net *.split)
[09:08:14] *** Quits: Talon (~Talon@172.77.106.63) (*.net *.split)
[09:08:14] *** Quits: g2anj (~v@58.228.230.4) (*.net *.split)
[09:08:14] *** Quits: davlefou (~davlefou@5.183.213.164) (*.net *.split)
[09:08:14] *** Quits: systemfault (sid267009@id-267009.uxbridge.irccloud.com) (*.net *.split)
[09:08:14] *** Quits: graingert (sid128301@id-128301.tinside.irccloud.com) (*.net *.split)
[09:08:14] *** Quits: Kol (~Kol@75.157.122.186) (*.net *.split)
[09:08:15] *** Quits: DK3 (~DK3@user/DK3) (*.net *.split)
[09:08:15] *** Quits: OverCoder (~OverCoder@user/overcoder) (*.net *.split)
[09:08:15] *** Quits: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9) (*.net *.split)
[09:08:15] *** Quits: earthbreaker (earthbreak@2600:3c03::f03c:91ff:fece:9070) (*.net *.split)
[09:08:15] *** Quits: winlundn (nick@2600:3c01::f03c:92ff:fe32:c297) (*.net *.split)
[09:08:15] *** Quits: croraf (croraf@croraf.ircforever.org) (*.net *.split)
[09:08:15] *** Quits: avu (~jan@user/avu) (*.net *.split)
[09:08:15] *** Quits: ryzenda (~ryzenda@pool-74-109-246-70.pitbpa.fios.verizon.net) (*.net *.split)
[09:08:15] *** Quits: k_sze (~k_sze@mail2.kalunite.net) (*.net *.split)
[09:08:15] *** Quits: shreyasminocha (51fdc93eda@user/shreyasminocha) (*.net *.split)
[09:08:15] *** Quits: b0o (0e4a0bf4c9@2604:bf00:561:2000::1bf) (*.net *.split)
[09:08:15] *** Quits: sm2n (ae95cb1267@user/sm2n) (*.net *.split)
[09:08:15] *** Quits: nemesit (~nemesit@myriadvisuals.com) (*.net *.split)
[09:08:15] *** Quits: Sol3 (~Sol3@user/sol3) (*.net *.split)
[09:08:15] *** Quits: pagios (~pagios@life.is-a.beauty) (*.net *.split)
[09:08:15] *** Quits: pikapika (~pikapika_@pika.powered.by.lunarbnc.net) (*.net *.split)
[09:08:15] *** Quits: bayleaf (~bayleaf@192.249.60.20) (*.net *.split)
[09:08:15] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (*.net *.split)
[09:08:15] *** Quits: lewisje (~lewisje@72.49.207.113) (*.net *.split)
[09:08:15] *** Quits: H4Z3 (~H4ZE@165.227.36.29) (*.net *.split)
[09:08:15] *** Quits: hackdash (h@user/hackdash) (*.net *.split)
[09:08:15] *** Quits: petril (~petril@user/petril) (*.net *.split)
[09:08:15] *** Quits: jsatk__ (sid304796@id-304796.helmsley.irccloud.com) (*.net *.split)
[09:08:16] *** Quits: PanamaCity3003 (~PanamaCit@skylab/user/panamacity3003) (*.net *.split)
[09:08:16] *** Quits: mishiranu (~mishiranu@78.129.171.229) (*.net *.split)
[09:08:16] *** Quits: eldritch_ (~eldritch@user/eldritch/x-9272577) (*.net *.split)
[09:08:16] *** Quits: silly (silly@user/silly) (*.net *.split)
[09:08:16] *** Quits: olspookishmagus (~pookie@snf-137798.vm.okeanos.grnet.gr) (*.net *.split)
[09:08:16] *** Quits: teear (~teear@cbharraste.eu) (*.net *.split)
[09:08:16] *** Quits: edk (edk@libera/staff/edk) (*.net *.split)
[09:08:16] *** Quits: syg_ (~syg@flamebot.net) (*.net *.split)
[09:08:16] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (*.net *.split)
[09:08:16] *** Quits: noarb (~noarb@user/noarb) (*.net *.split)
[09:08:16] *** Quits: deltab (~deltab@user/deltab) (*.net *.split)
[09:08:16] *** Quits: LIERO (~no@user/liero) (*.net *.split)
[09:08:16] *** Quits: Svitkona (~Svitkona@157.245.38.135) (*.net *.split)
[09:08:16] *** Quits: lilmonkey` (~lilmonkey@user/lilmonkey) (*.net *.split)
[09:08:16] *** Quits: haniaF (~haniaF@83.24.206.88.ipv4.supernova.orange.pl) (*.net *.split)
[09:08:16] *** Quits: Axy (~Axy@user/axy) (*.net *.split)
[09:08:16] *** Quits: eMBee (~eMBee@realss.com) (*.net *.split)
[09:08:16] *** Quits: niko (~niko@libera/staff/niko) (*.net *.split)
[09:08:16] *** Quits: codingcampbell (~codingcam@user/codingcampbell) (*.net *.split)
[09:08:16] *** Quits: simon816 (~simon816@ec2-35-178-246-72.eu-west-2.compute.amazonaws.com) (*.net *.split)
[09:08:16] *** Quits: simius (~simius@user/simius) (*.net *.split)
[09:08:16] *** Quits: devslash (~devslash@46.232.211.210) (*.net *.split)
[09:08:16] *** Quits: zer0 (~zer0@user/zer0) (*.net *.split)
[09:08:16] *** Quits: hax (~hax@user/hax) (*.net *.split)
[09:08:16] *** Quits: bliminse (~bliminse@host86-188-36-166.range86-188.btcentralplus.com) (*.net *.split)
[09:08:16] *** Quits: monoxane (~monoxane@user/monoxane) (*.net *.split)
[09:08:16] *** Quits: slaughter (~slaughter@europa.whatbox.ca) (*.net *.split)
[09:08:16] *** Quits: hendrikpern (~hendrikpe@host-176-36-13-171.b024.la.net.ua) (*.net *.split)
[09:08:16] *** Quits: csmiga (~Thunderbi@ec2-52-207-160-196.compute-1.amazonaws.com) (*.net *.split)
[09:08:16] *** Quits: dvanloon (~dvanloon@user/dvanloon) (*.net *.split)
[09:08:16] *** Quits: nelubit (~nelubit@user/nelubit) (*.net *.split)
[09:08:16] *** Quits: tccki (~tccki@box.webslate.co.nz) (*.net *.split)
[09:08:16] *** Quits: xsznix95 (~xsznix@104-14-31-126.lightspeed.austtx.sbcglobal.net) (*.net *.split)
[09:08:16] *** Quits: mrdata (~mrdata@user/mrdata) (*.net *.split)
[09:08:16] *** Quits: rawgreaze (~rawgreaze@user/rawgreaze) (*.net *.split)
[09:08:16] *** Quits: tempest (~ashe@user/tempestdawn) (*.net *.split)
[09:08:16] *** Quits: Cyp (~cyp@213.237.88.120) (*.net *.split)
[09:08:16] *** Quits: Memory (~user_name@user/memory) (*.net *.split)
[09:08:16] *** Quits: evulish (~evulish@cpe-72-231-26-248.nyc.res.rr.com) (*.net *.split)
[09:08:16] *** Quits: ox1eef (~0x1eef@user/ox1eef) (*.net *.split)
[09:08:16] *** Quits: calcmandan (~quassel@user/calcmandan) (*.net *.split)
[09:08:16] *** Quits: Decker (~d3x0r@user/d3x0r) (*.net *.split)
[09:08:16] *** Quits: Senz (whoa@ool-ad0244e9.dyn.optonline.net) (*.net *.split)
[09:08:16] *** Quits: yosafbridge (~yosafbrid@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[09:08:16] *** Quits: Neuromancer (~Neuromanc@user/neuromancer) (*.net *.split)
[09:08:17] *** Quits: minto (~mintograd@47.201.5.61) (*.net *.split)
[09:08:17] *** Quits: Scarecr0w (scarecr0w@user/scarecr0w) (*.net *.split)
[09:08:17] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (*.net *.split)
[09:08:17] *** Quits: nickel715 (~nickel715@user/nickel715) (*.net *.split)
[09:08:17] *** Quits: em (~em@user/emnode) (*.net *.split)
[09:08:17] *** Quits: msfninja (~kali@user/msfninja) (*.net *.split)
[09:08:17] *** Quits: BUSY (~BUSY@user/busy) (*.net *.split)
[09:08:17] *** Quits: hamess (~hamess@user/hamess) (*.net *.split)
[09:08:17] *** Quits: YoungFrog (~youngfrog@39.129-180-91.adsl-dyn.isp.belgacom.be) (*.net *.split)
[09:08:17] *** Quits: zwei (~Zweihande@znc.ext.zweihander.me) (*.net *.split)
[09:08:17] *** Quits: dodobrain (~dodobrain@user/dodobrain) (*.net *.split)
[09:08:17] *** Quits: w0ng (~w0ng@103.1.212.158) (*.net *.split)
[09:08:17] *** Quits: Spr0cket (sprocket@user/Spr0cket) (*.net *.split)
[09:08:17] *** Quits: kinabalu (~kinabalu@about/java/kinabalu) (*.net *.split)
[09:08:17] *** Quits: JayDoubleu_ (sid339529@id-339529.hampstead.irccloud.com) (*.net *.split)
[09:08:17] *** Quits: Ownix (sid11917@id-11917.helmsley.irccloud.com) (*.net *.split)
[09:08:17] *** Quits: patchie (sid504252@id-504252.ilkley.irccloud.com) (*.net *.split)
[09:08:17] *** Quits: merced (merced@user/merced) (*.net *.split)
[09:08:17] *** Quits: nb-ben (~ben@user/nb-ben) (*.net *.split)
[09:08:17] *** Quits: Tempesta (~Tempesta@user/tempesta) (*.net *.split)
[09:11:51] *** Quits: defn (~n0b0dy@user/defn) (Ping timeout: 256 seconds)
[09:11:51] *** Quits: trevors (~trevors@user/trevors) (Ping timeout: 256 seconds)
[09:12:15] *** Quits: src_ (~src@user/src) (Quit: Leaving)
[09:12:21] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 276 seconds)
[09:12:26] *** Joins: defn (~n0b0dy@user/defn)
[09:12:27] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Ping timeout: 250 seconds)
[09:13:03] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[09:13:19] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 250 seconds)
[09:14:47] *** Joins: fef (~thedawn@user/thedawn)
[09:18:56] *** Joins: stagas (~stagas@2a02:587:c40c:7fd2:27e5:9579:b326:6aba)
[09:21:15] *** Joins: teear (~teear@cbharraste.eu)
[09:21:15] *** Joins: msfninja (~kali@user/msfninja)
[09:21:15] *** Joins: edk (edk@libera/staff/edk)
[09:21:15] *** Joins: Memory (~user_name@user/memory)
[09:21:15] *** Joins: syg_ (~syg@flamebot.net)
[09:21:15] *** Joins: em (~em@user/emnode)
[09:21:15] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[09:21:15] *** Joins: noarb (~noarb@user/noarb)
[09:21:15] *** Joins: deltab (~deltab@user/deltab)
[09:21:15] *** Joins: LIERO (~no@user/liero)
[09:21:15] *** Joins: Svitkona (~Svitkona@157.245.38.135)
[09:21:15] *** Joins: lilmonkey` (~lilmonkey@user/lilmonkey)
[09:21:15] *** Joins: haniaF (~haniaF@83.24.206.88.ipv4.supernova.orange.pl)
[09:21:15] *** Joins: Axy (~Axy@user/axy)
[09:21:15] *** Joins: eMBee (~eMBee@realss.com)
[09:21:15] *** Joins: niko (~niko@libera/staff/niko)
[09:21:15] *** Joins: codingcampbell (~codingcam@user/codingcampbell)
[09:21:15] *** Joins: simon816 (~simon816@ec2-35-178-246-72.eu-west-2.compute.amazonaws.com)
[09:21:15] *** Joins: simius (~simius@user/simius)
[09:21:15] *** Joins: devslash (~devslash@46.232.211.210)
[09:21:15] *** Joins: zer0 (~zer0@user/zer0)
[09:21:15] *** Joins: hax (~hax@user/hax)
[09:21:15] *** Joins: bliminse (~bliminse@host86-188-36-166.range86-188.btcentralplus.com)
[09:21:15] *** Joins: monoxane (~monoxane@user/monoxane)
[09:21:15] *** Joins: slaughter (~slaughter@europa.whatbox.ca)
[09:21:15] *** Joins: hendrikpern (~hendrikpe@host-176-36-13-171.b024.la.net.ua)
[09:21:15] *** Joins: csmiga (~Thunderbi@ec2-52-207-160-196.compute-1.amazonaws.com)
[09:21:15] *** Joins: dvanloon (~dvanloon@user/dvanloon)
[09:21:15] *** Joins: nelubit (~nelubit@user/nelubit)
[09:21:15] *** Joins: tccki (~tccki@box.webslate.co.nz)
[09:21:15] *** Joins: xsznix95 (~xsznix@104-14-31-126.lightspeed.austtx.sbcglobal.net)
[09:21:15] *** Joins: mrdata (~mrdata@user/mrdata)
[09:21:15] *** Joins: rawgreaze (~rawgreaze@user/rawgreaze)
[09:21:15] *** Joins: tempest (~ashe@user/tempestdawn)
[09:21:15] *** Joins: Cyp (~cyp@213.237.88.120)
[09:21:15] *** Joins: evulish (~evulish@cpe-72-231-26-248.nyc.res.rr.com)
[09:21:15] *** Joins: ox1eef (~0x1eef@user/ox1eef)
[09:21:15] *** Joins: calcmandan (~quassel@user/calcmandan)
[09:21:15] *** Joins: Decker (~d3x0r@user/d3x0r)
[09:21:15] *** Joins: Senz (whoa@ool-ad0244e9.dyn.optonline.net)
[09:21:15] *** Joins: yosafbridge (~yosafbrid@static.38.6.217.95.clients.your-server.de)
[09:21:15] *** Joins: Neuromancer (~Neuromanc@user/neuromancer)
[09:21:15] *** Joins: minto (~mintograd@47.201.5.61)
[09:21:15] *** Joins: nickel715 (~nickel715@user/nickel715)
[09:21:15] *** Joins: Scarecr0w (scarecr0w@user/scarecr0w)
[09:21:15] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[09:21:15] *** Joins: BUSY (~BUSY@user/busy)
[09:21:15] *** Joins: hamess (~hamess@user/hamess)
[09:21:15] *** Joins: YoungFrog (~youngfrog@39.129-180-91.adsl-dyn.isp.belgacom.be)
[09:21:15] *** Joins: zwei (~Zweihande@znc.ext.zweihander.me)
[09:22:45] *** Joins: SchmoSeph (uid530771@id-530771.tinside.irccloud.com)
[09:22:45] *** Joins: ThePendulum (~znc@user/ThePendulum)
[09:22:45] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[09:22:45] *** Joins: goddard (~goddard@user/goddard)
[09:22:45] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[09:22:45] *** Joins: kmh_ (~kmh@94.31.106.215)
[09:22:45] *** Joins: Linkandzelda (~Linkandze@cloudirc.laz.li)
[09:22:45] *** Joins: pizdets (~pizdets@183.182.111.120)
[09:22:45] *** Joins: mdemo (~mdemo@user/mdemo22)
[09:22:45] *** Joins: Icedream (~icedream@hzn-b.serverkomplex.de)
[09:22:45] *** Joins: dmanto (~dmanto@181.110.128.9)
[09:22:45] *** Joins: pluri (~pluri@user/pluri)
[09:22:45] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[09:22:45] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[09:22:45] *** Joins: Isthmusi (~Isthmus@user/isveni)
[09:22:45] *** Joins: MassDebates_ (~MassDebat@2600:1700:1184:4510:9c49:337:e7b4:2360)
[09:22:45] *** Joins: jw_dungeon (~quassel@2601:44:4380:4a10:4587:3637:b23f:ed34)
[09:22:45] *** Joins: b-rex (van@down.by.the.river.lol)
[09:22:45] *** Joins: Fossil (~Fossil@2a03:b0c0:0:1010::398:b001)
[09:22:45] *** Joins: baakeydow (~baake@2001:41d0:203:b12c::)
[09:22:45] *** Joins: EgonX (~EgonX@2601:2c6:47f:879e:117c:703e:db5f:c029)
[09:22:45] *** Joins: raj_ (raj@2600:3c03::f03c:91ff:feae:498)
[09:22:45] *** Joins: dan_berg_pub_ (2c6463a49d@2604:bf00:561:2000::1c)
[09:22:45] *** Joins: _sgen (~sgen@2607:fea8:7ce1:c8e0:ec63:8eee:4635:2aa8)
[09:22:45] *** Joins: Anonamy (~Anonamy@2001:569:7b8c:5300:43ca:5acf:d440:6416)
[09:22:45] *** Joins: themaxdavitt_ (sid433050@id-433050.hampstead.irccloud.com)
[09:22:45] *** Joins: jwpapi (sid502614@id-502614.uxbridge.irccloud.com)
[09:22:45] *** Joins: notchris (sid181145@id-181145.hampstead.irccloud.com)
[09:22:45] *** Joins: llinguini (sid257922@id-257922.hampstead.irccloud.com)
[09:22:45] *** Joins: pragma- (~chaos@user/pragmatic-chaos)
[09:22:45] *** Joins: chowmeined (~chowmeine@user/chowmeined)
[09:22:45] *** Joins: doji (~doji@user/doji)
[09:22:45] *** Joins: diverdude (~user@176-21-102-230-cable.dk.customer.tdc.net)
[09:22:45] *** Joins: m_antis (~znc_admin@ool-44c09a21.dyn.optonline.net)
[09:22:45] *** Joins: qwedfg_ (~qwedfg@user/qwedfg)
[09:22:45] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[09:22:45] *** Joins: blezz (~blez@213-130-92-213.ip.btc-net.bg)
[09:22:45] *** Joins: pagios (~pagios@life.is-a.beauty)
[09:22:45] *** Joins: edr (~edr@user/edr)
[09:22:45] *** Joins: kzootech (~contact@kzoo.tech)
[09:22:45] *** Joins: mattf (mattf@2600:3c03::f03c:92ff:fea6:56a4)
[09:22:45] *** Joins: Talon (~Talon@172.77.106.63)
[09:22:45] *** Joins: g2anj (~v@58.228.230.4)
[09:22:45] *** Joins: davlefou (~davlefou@5.183.213.164)
[09:22:45] *** Joins: systemfault (sid267009@id-267009.uxbridge.irccloud.com)
[09:22:45] *** Joins: graingert (sid128301@id-128301.tinside.irccloud.com)
[09:22:45] *** Joins: Kol (~Kol@75.157.122.186)
[09:22:45] *** Joins: DK3 (~DK3@user/DK3)
[09:22:45] *** Joins: OverCoder (~OverCoder@user/overcoder)
[09:22:45] *** Joins: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9)
[09:22:45] *** Joins: earthbreaker (earthbreak@2600:3c03::f03c:91ff:fece:9070)
[09:22:45] *** Joins: winlundn (nick@2600:3c01::f03c:92ff:fe32:c297)
[09:22:45] *** Joins: croraf (croraf@croraf.ircforever.org)
[09:22:45] *** Joins: avu (~jan@user/avu)
[09:22:45] *** Joins: ryzenda (~ryzenda@pool-74-109-246-70.pitbpa.fios.verizon.net)
[09:22:45] *** Joins: k_sze (~k_sze@mail2.kalunite.net)
[09:22:45] *** Joins: shreyasminocha (51fdc93eda@user/shreyasminocha)
[09:22:45] *** Joins: sm2n (ae95cb1267@user/sm2n)
[09:22:45] *** Joins: b0o (0e4a0bf4c9@2604:bf00:561:2000::1bf)
[09:22:45] *** Joins: nemesit (~nemesit@myriadvisuals.com)
[09:22:45] *** Joins: Sol3 (~Sol3@user/sol3)
[09:22:45] *** Joins: pikapika (~pikapika_@pika.powered.by.lunarbnc.net)
[09:22:45] *** Joins: bayleaf (~bayleaf@192.249.60.20)
[09:22:45] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[09:22:45] *** Joins: lewisje (~lewisje@72.49.207.113)
[09:22:45] *** Joins: H4Z3 (~H4ZE@165.227.36.29)
[09:22:45] *** Joins: hackdash (h@user/hackdash)
[09:22:45] *** Joins: petril (~petril@user/petril)
[09:22:45] *** Joins: jsatk__ (sid304796@id-304796.helmsley.irccloud.com)
[09:22:45] *** Joins: PanamaCity3003 (~PanamaCit@skylab/user/panamacity3003)
[09:22:45] *** Joins: mishiranu (~mishiranu@78.129.171.229)
[09:22:45] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[09:22:45] *** Joins: silly (silly@user/silly)
[09:22:45] *** Joins: olspookishmagus (~pookie@snf-137798.vm.okeanos.grnet.gr)
[09:23:35] *** Joins: kakashiA1 (~kakashi@ip-037-201-198-057.um10.pools.vodafone-ip.de)
[09:23:35] *** Joins: Relms-Wah (~relms@user/relms)
[09:23:35] *** Joins: c4017w__ (~c4017@209.52.68.8)
[09:23:35] *** Joins: \mSg (mSg@user/msg/x-0285936)
[09:23:35] *** Joins: masoudd (~masoudd@user/masoudd)
[09:23:35] *** Joins: CoolerY (~CoolerX@user/coolerx)
[09:23:35] *** Joins: Swahili_ (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[09:23:35] *** Joins: junktext (~junktext@gateway/vpn/pia/junktext)
[09:23:35] *** Joins: AJTJ (~AJTJ@d205-234-49-159.yt.northwestel.net)
[09:23:35] *** Joins: kalen (~kalen@gateway/vpn/pia/kalen)
[09:23:35] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[09:23:35] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[09:23:35] *** Joins: robyndrake (~robyndrak@user/robyndrake)
[09:23:35] *** Joins: The_Tablet (~tablet@user/the-tablet)
[09:23:35] *** Joins: ckdCreations (~ckdCreati@147.55.133.138)
[09:23:35] *** Joins: pavonia (~user@user/siracusa)
[09:23:35] *** Joins: ttys000 (~ttys000@user/ttys000)
[09:23:35] *** Joins: revolve (~u0_a227@cpc100838-bagu15-2-0-cust672.1-3.cable.virginm.net)
[09:23:35] *** Joins: moldorcoder7 (~moldorcod@37.120.143.28)
[09:23:35] *** Joins: APic (~apic@apic.name)
[09:23:35] *** Joins: robertmaxrees (~robert0@c-76-114-62-229.hsd1.ca.comcast.net)
[09:23:35] *** Joins: lefteye (~wbrawner@c-67-190-106-99.hsd1.co.comcast.net)
[09:23:35] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[09:23:35] *** Joins: Tabmow (~tabmow@user/tabmow)
[09:23:35] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[09:23:35] *** Joins: erry (~erry@errietta.me)
[09:23:35] *** Joins: sheetjs (~sheetjs@user/sheetjs)
[09:23:35] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[09:23:35] *** Joins: vbgunz (~vbgunz@35.141.71.47)
[09:23:35] *** Joins: wovixo (~wovixo@128.104.205.49)
[09:23:35] *** Joins: Stanley (~stanley@d66-183-88-69.bchsia.telus.net)
[09:23:35] *** Joins: gde33 (~gde33@84-106-154-98.cable.dynamic.v4.ziggo.nl)
[09:23:35] *** Joins: Nnnavd (~Nnavd@ec2-34-220-224-214.us-west-2.compute.amazonaws.com)
[09:23:35] *** Joins: Joel (~jjshoe@user/joel)
[09:23:35] *** Joins: Nitrousoxide (~msdos@user/nitrousoxide)
[09:23:35] *** Joins: Alexendoo (~Alex@144.21.50.247)
[09:23:35] *** Joins: dskull (~dskull@user/dskull)
[09:23:35] *** Joins: brentaarnold (~brentaarn@24.112.58.14)
[09:23:35] *** Joins: kcrk (~kcrk@user/kcrk)
[09:23:35] *** Joins: monokrome| (~monokrome@50.215.11.140)
[09:23:35] *** Joins: justGhost (~justache@user/justache)
[09:23:35] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[09:23:35] *** Joins: zuQe8 (~zuQe8@cpc105060-sgyl40-2-0-cust136.18-2.cable.virginm.net)
[09:23:35] *** Joins: sunyour (~sunyour@129.226.182.99)
[09:23:35] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[09:23:35] *** Joins: webstran- (~webstrand@user/webstrand)
[09:23:35] *** Joins: philivey9426 (~polarizin@188.166.72.81)
[09:23:35] *** Joins: hassoon__ (~hassoon@triton.blinkenshell.org)
[09:23:35] *** Joins: cryocaustik7 (~cryocaust@user/cryocaustik)
[09:23:35] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[09:23:35] *** Joins: Swant (~swant@libera/staff/swant)
[09:23:35] *** Joins: jellobot (~jellobot@li334-26.members.linode.com)
[09:23:35] *** Joins: llorllale (~llorllale@198.98.119.85)
[09:23:35] *** Joins: ethoxy (~root@bison.alphaw0lf.xyz)
[09:23:35] *** Joins: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net)
[09:23:35] *** Joins: [R] (~rs@genoce.org)
[09:23:35] *** Joins: Cheaterman (~Cheaterma@user/cheaterman)
[09:23:35] *** Joins: hassoon_ (hassoon@user/hassoon)
[09:23:35] *** Joins: Unfixed (~Jake@64.31.33.140)
[09:23:35] *** Joins: Spydar007 (~spydar007@user/spydar007)
[09:23:35] *** Joins: gjvc (~gjvc@user/gjvc)
[09:23:35] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[09:23:35] *** Joins: dlam (~dlam@dlam.me)
[09:23:35] *** Joins: les_ (~whome@user/les)
[09:23:35] *** Joins: Lewix__ (sid158496@tinside.irccloud.com)
[09:23:35] *** Joins: AlbertLast (~nix@0exclusive.de)
[09:23:35] *** erbium.libera.chat sets mode: +v jellobot
[09:24:07] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[09:24:07] *** Joins: Spr0cket (sprocket@user/Spr0cket)
[09:24:07] *** Joins: w0ng (~w0ng@103.1.212.158)
[09:24:32] *** Joins: trevors (~trevors@user/trevors)
[09:24:51] *** Joins: kinabalu (~kinabalu@about/java/kinabalu)
[09:24:51] *** Joins: JayDoubleu_ (sid339529@id-339529.hampstead.irccloud.com)
[09:24:51] *** Joins: Ownix (sid11917@id-11917.helmsley.irccloud.com)
[09:24:51] *** Joins: patchie (sid504252@id-504252.ilkley.irccloud.com)
[09:24:51] *** Joins: merced (merced@user/merced)
[09:25:24] *** Joins: Tempesta (~Tempesta@user/tempesta)
[09:25:33] *** Joins: Habibismillah (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net)
[09:25:58] *** Parts: Habibismillah (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net) ()
[09:26:19] *** Joins: ben_ (~ben@135.125.147.53)
[09:27:00] *** Joins: mihael (~mihael@180.190.193.117)
[09:27:05] *** Joins: GreenHaze (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net)
[09:27:19] *** Joins: c4017w_ (~c4017@209.52.68.8)
[09:27:34] *** Joins: sudomann (~sudomann@98.219.211.182)
[09:28:22] <GreenHaze> anyone know what happened to GreenJello?
[09:30:36] <theskillwithin> GreenHaze yes, look at the first link in the topic
[09:30:46] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[09:30:58] <theskillwithin> RIP GreenJello https://git.io/J2m1C
[09:31:42] *** Quits: mihael (~mihael@180.190.193.117) (Client Quit)
[09:32:08] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 252 seconds)
[09:32:43] <GreenHaze> was greenjello someone from the old freenode javascript channel?
[09:33:06] <theskillwithin> GreenHaze yes, but he moved over here when everyone else did
[09:35:00] <theskillwithin> his bot jellobot we forked and kept alive
[09:35:30] <GreenHaze> whats the bot do?
[09:36:09] <alystair> n> 1+1
[09:36:10] <jellobot> (okay) 2
[09:36:52] <GreenHaze> well now, that kind of explains what it does
[09:36:59] <theskillwithin> GreenHaze how do you know GreenJello?
[09:37:11] *** Joins: ekathva (~ekathva@2001:999:51:be01:ece4:95d6:ed47:f97a)
[09:37:15] <theskillwithin> ?>
[09:37:16] <jellobot> n> node stable, b> babel, s> node vm.Script, m> node vm.SourceTextModule, e> engine262
[09:37:32] <alystair> n> let a=1330; 'Jello bot is ' + (a + 7);
[09:37:33] <jellobot> (okay) 'Jello bot is 1337'
[09:37:35] <alystair> :D
[09:38:12] <GreenHaze> i don't, but i do know #web #javascript #php from around 2009 - 2014 on freenode   back in the days when cake php was the thing to use
[09:39:33] <Maxdamantus> n> hello
[09:39:33] <jellobot> (fail) ReferenceError: hello is not defined
[09:40:18] <alystair> Welcome back then GreenHaze
[09:41:35] *** GreenHaze is now known as RighteousRat
[09:41:59] <RighteousRat> yes the rat is back
[09:44:43] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 256 seconds)
[09:47:49] *** Joins: yagamilito (~yagamilit@2601:642:4600:34b0:6cc9:c3d7:2ed9:3825)
[09:49:06] *** Quits: MassDebates_ (~MassDebat@2600:1700:1184:4510:9c49:337:e7b4:2360) (Ping timeout: 250 seconds)
[09:49:28] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[09:49:55] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[09:50:57] *** Quits: hax (~hax@user/hax) (Ping timeout: 240 seconds)
[09:53:26] *** Quits: kakashiA1 (~kakashi@ip-037-201-198-057.um10.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[09:55:11] *** Joins: stenno (~stenno@user/stenno)
[09:55:20] *** Quits: junktext (~junktext@gateway/vpn/pia/junktext) (Remote host closed the connection)
[09:56:31] *** Joins: junktext (~junktext@gateway/vpn/pia/junktext)
[09:57:12] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[10:01:12] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[10:03:24] *** RighteousRat is now known as psystemupdate
[10:04:47] *** psystemupdate is now known as PsyStemUpdate
[10:05:46] *** Joins: kakashiA1 (~kakashi@ip-037-201-198-057.um10.pools.vodafone-ip.de)
[10:06:49] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 256 seconds)
[10:07:23] *** Joins: museee (~museee@user/museee)
[10:08:52] *** Joins: maret (~maret@nat-88-212-37-89.antik.sk)
[10:09:20] *** Joins: fef (~thedawn@user/thedawn)
[10:09:45] *** Quits: h274f[m] (~h274fmatr@2001:470:69fc:105::1:6a8a) (Quit: Client limit exceeded: 20000)
[10:10:05] *** Quits: kakashiA1 (~kakashi@ip-037-201-198-057.um10.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[10:13:37] *** Quits: defn (~n0b0dy@user/defn) (Ping timeout: 256 seconds)
[10:14:06] *** Joins: mat001 (~mat001@213.143.69.121)
[10:14:41] *** Joins: defn (~n0b0dy@user/defn)
[10:18:30] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[10:22:56] *** Joins: kakashiA1 (~kakashi@ip-037-201-198-057.um10.pools.vodafone-ip.de)
[10:27:25] *** Joins: D4mned (~D1mned@212.101.251.235)
[10:27:50] *** Joins: c4017w__ (~c4017@209.52.68.8)
[10:28:41] *** Quits: museee (~museee@user/museee) (Quit: Leaving)
[10:29:41] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:1c48:6127:4105:3f28)
[10:30:14] *** Joins: sam_1 (~sam_1@87.51.251.118)
[10:31:34] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Ping timeout: 250 seconds)
[10:31:45] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[10:31:56] *** Joins: voltage_ (voltage@user/voltage)
[10:34:47] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[10:34:47] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[10:34:47] *** Joins: wroathe (~wroathe@user/wroathe)
[10:36:56] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 250 seconds)
[10:39:41] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[10:41:06] *** Quits: PsyStemUpdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net) (Ping timeout: 250 seconds)
[10:42:56] *** Joins: jazzy (~jaziz@user/jaziz)
[10:49:02] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[10:53:24] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 250 seconds)
[10:53:31] *** Joins: nomic (~nomic@185.192.69.3)
[10:54:12] *** Joins: tex (~super@user/dix)
[10:54:31] *** Joins: Ilyu (~quassel@166.215.82.79.rev.sfr.net)
[10:59:18] *** Joins: undefined_bob (~undefined@user/undefined-bob/x-5411918)
[11:05:09] *** Joins: plitter (~plitter@192.108.100.200)
[11:05:09] *** Quits: plitter (~plitter@192.108.100.200) (Changing host)
[11:05:09] *** Joins: plitter (~plitter@user/plitter)
[11:07:30] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[11:12:12] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Client Quit)
[11:15:08] *** Joins: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:9151:64f9:5c4c:ad39)
[11:16:23] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:1c48:6127:4105:3f28) (Ping timeout: 250 seconds)
[11:18:30] *** Quits: noarb (~noarb@user/noarb) (Quit: ZNC 1.8.2 - https://znc.in)
[11:20:19] *** Joins: noarb (~noarb@user/noarb)
[11:25:50] *** Joins: iomari891 (~iomari891@105.112.138.38)
[11:25:59] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 252 seconds)
[11:27:17] *** Quits: kakashiA1 (~kakashi@ip-037-201-198-057.um10.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[11:27:54] *** Quits: pluri (~pluri@user/pluri) (Ping timeout: 250 seconds)
[11:28:19] *** Joins: c4017w_ (~c4017@209.52.68.8)
[11:31:27] *** Joins: revolvereld (~oem@dynamic-046-114-173-069.46.114.pool.telefonica.de)
[11:31:38] *** Joins: pluri (~pluri@user/pluri)
[11:32:02] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[11:32:59] *** Joins: cotko (~cotko@188-230-251-153.dynamic.t-2.net)
[11:33:01] *** Quits: tex (~super@user/dix) (Quit: tex)
[11:33:29] *** Quits: SchmoSeph (uid530771@id-530771.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[11:34:03] *** Quits: revolvereld (~oem@dynamic-046-114-173-069.46.114.pool.telefonica.de) (Remote host closed the connection)
[11:34:23] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[11:34:26] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[11:35:17] *** Joins: revolvereld (~oem@dynamic-046-114-173-069.46.114.pool.telefonica.de)
[11:35:57] *** Quits: revolvereld (~oem@dynamic-046-114-173-069.46.114.pool.telefonica.de) (Read error: Connection reset by peer)
[11:37:59] *** Joins: revolvereld (~oem@dynamic-046-114-173-069.46.114.pool.telefonica.de)
[11:41:18] *** Joins: kakashiA1 (~kakashi@ip-037-201-198-057.um10.pools.vodafone-ip.de)
[11:44:17] *** Quits: voltage_ (voltage@user/voltage) (Quit: Leaving)
[11:45:59] *** Quits: kakashiA1 (~kakashi@ip-037-201-198-057.um10.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[11:50:00] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[11:50:28] *** Joins: fef (~thedawn@user/thedawn)
[11:51:16] *** Quits: yagamilito (~yagamilit@2601:642:4600:34b0:6cc9:c3d7:2ed9:3825) (Quit: Client closed)
[11:54:03] *** Joins: bobdobbs (~user@2406:5a00:4456:db00:f9b1:3765:d0cf:c4b9)
[11:58:52] *** Joins: voltage_ (voltage@user/voltage)
[11:59:05] *** Joins: PsyStemUpdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net)
[12:02:34] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[12:05:15] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[12:06:16] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Quit: leaving)
[12:09:08] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[12:12:26] *** Quits: PsyStemUpdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net) (Ping timeout: 245 seconds)
[12:15:56] *** Joins: kakashiA1 (~kakashi@ip-037-201-198-057.um10.pools.vodafone-ip.de)
[12:19:25] *** Quits: mintoyatsu (~mint@user/mintoyatsu) (Remote host closed the connection)
[12:23:44] *** Joins: PsyStemUpdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net)
[12:28:50] *** Joins: c4017w__ (~c4017@209.52.68.8)
[12:32:27] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[12:40:00] *** Joins: varrg (~varrg@h-176-10-198-245.A351.priv.bahnhof.se)
[12:41:59] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Quit: Leaving)
[12:43:16] *** Quits: Relms-Wah (~relms@user/relms) (Quit: Ur Cute)
[12:43:45] *** Joins: Relms-Wah (Relms@user/relms)
[12:48:53] *** Quits: alystair (~alystair@user/alystair) (Ping timeout: 256 seconds)
[12:50:01] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[12:51:51] *** Quits: revolvereld (~oem@dynamic-046-114-173-069.46.114.pool.telefonica.de) (Read error: Connection reset by peer)
[12:53:01] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 250 seconds)
[12:59:55] *** Joins: iomari891 (~iomari891@105.112.138.38)
[13:02:32] *** Joins: revolvereld (~oem@dynamic-046-114-173-069.46.114.pool.telefonica.de)
[13:07:13] *** Joins: fweht (uid404746@id-404746.lymington.irccloud.com)
[13:07:42] <D4mned> anyone used terminal-kit before ?
[13:07:54] *** Joins: h274f[m] (~h274fmatr@2001:470:69fc:105::1:6a8a)
[13:09:44] *** Quits: PsyStemUpdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net) (Ping timeout: 250 seconds)
[13:13:20] <fweht> is it bad practice to set an 'empty' dataset, like `<div data-foo></div>`, and then check if `div.dataset.foo==""`?
[13:15:05] *** Quits: ckdCreations (~ckdCreati@147.55.133.138) (Read error: Connection reset by peer)
[13:15:28] *** Joins: ckdCreations (~ckdCreati@147.55.133.136)
[13:18:34] *** Quits: kakashiA1 (~kakashi@ip-037-201-198-057.um10.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[13:18:51] <varrg> fweht, yes, an empty dataset is usually considered boolean true
[13:19:06] <varrg> dataset=dataattribute
[13:19:11] <fweht> varrg: thats what i meant to do
[13:19:23] <fweht> i just wondered if i need to set it explicitly to "true"
[13:19:34] <varrg> then just check existence of it, no need to check against the empty string
[13:20:00] <varrg> no, either way is good. I prefer to do it your way
[13:20:02] <fweht> aah yes of course!
[13:20:48] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[13:20:48] <fweht> but wait...  "" resolves to `false`, so `if(div.dataset.foo)` wouldnt distinguish between `""` (if set with no value) and `undefined`?
[13:22:12] <jwpapi> jaawerth: following the discussion from yesterday
[13:22:53] <jwpapi> I used to safe the accesstoken in my `.env` however accessToken is only valid for 90 days. That’s why I wanted to include a facebook authentication.
[13:23:35] <jwpapi> I did this here and it works. However now all the API calls are 503, if I do them later manually they work fine. https://github.com/JWPapi/marketingDashboard/blob/master/src/index.js
[13:24:04] <jwpapi> This has not been the issue before using Facebook SDK. I’m also quite sure this is not the right way to implement the SDK
[13:25:12] <varrg> fweht, The in operator can check if a given attribute exists: 'keyname' in element.dataset
[13:26:04] <varrg> fweht, for more: https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset
[13:26:20] <fweht> varrg: cool, many thanks!
[13:26:37] <fweht> oh its a special case for datasets, `'foo' in ['foo', 'bar']` doesnt work like that :(
[13:27:02] <varrg> fweht, in is for objects, not arrays
[13:27:12] <fweht> aah i see
[13:27:15] <varrg> > 'foo' in {foo: 'bar'}
[13:27:25] <fweht> very sweet
[13:28:43] *** Joins: eXtr3m0 (~eXtr3m0@user/eXtr3m0)
[13:29:19] *** Joins: c4017w_ (~c4017@209.52.68.8)
[13:30:17] <jwpapi> you could use `const attributes = data.getAttributeNames()` and then `if (attributes.include('data-foo')`
[13:30:30] <jwpapi> *div.getAttributeNames()
[13:30:36] <jwpapi> That makes it most readable imo
[13:31:42] <jwpapi> I think in general the functions are better performance than `div.attributes`
[13:32:04] <varrg> jwpapi, might as well do element.hasAttribute('data-foo') then. But nevertheless, Element.dataset is the 'modern' way of handling datasets, attributes were for when we didn't have dataset
[13:32:06] *** Quits: Koopz (~Koopz@koopz.rocks) (Quit: Ping timeout (120 seconds))
[13:32:21] *** Joins: Koopz (~Koopz@koopz.rocks)
[13:32:29] *** Joins: kakashiA1 (~kakashi@ip-037-201-198-057.um10.pools.vodafone-ip.de)
[13:32:32] <jwpapi> varrg: Oh thank you I actually didn’t know that
[13:32:34] *** Quits: ekathva (~ekathva@2001:999:51:be01:ece4:95d6:ed47:f97a) (Remote host closed the connection)
[13:32:53] *** Joins: ekathva (~ekathva@2001:999:51:be01:60a9:bdc2:476c:b11b)
[13:33:02] *** Quits: chovy (chovy@tilde.club) (Ping timeout: 240 seconds)
[13:33:10] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 260 seconds)
[13:33:14] <jwpapi> Just reading it on MDN, lol way easier
[13:34:00] *** Joins: JohnComputation (~JohnCompu@gateway/tor-sasl/johncomputation)
[13:34:06] *** Quits: ekathva (~ekathva@2001:999:51:be01:60a9:bdc2:476c:b11b) (Read error: Connection reset by peer)
[13:34:57] *** Quits: JohnComputation2 (~JohnCompu@gateway/tor-sasl/johncomputation) (Ping timeout: 276 seconds)
[13:35:11] *** Joins: chovy (chovy@tilde.club)
[13:37:03] *** Quits: kakashiA1 (~kakashi@ip-037-201-198-057.um10.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[13:37:33] *** Quits: realies (~realies@user/realies) (Quit: Ping timeout (120 seconds))
[13:37:59] *** Joins: realies (~realies@user/realies)
[13:44:18] <fweht> jwpapi: thanks, sorry, read it just now
[13:44:18] *** Quits: D4mned (~D1mned@212.101.251.235) (Read error: Connection reset by peer)
[13:44:54] *** Joins: D4mned (~D1mned@212.101.251.95)
[13:45:12] <maret> any good source about understanding debate about depedency injection pattern in Javascript? I've heard arguments both ways -> DI being really useful (Angular, Nest.js) but also that doesn't really belong in JS at least way how it's usually implement through dependency container
[13:49:17] *** Joins: kakashiA1 (~kakashi@ip-037-201-198-057.um10.pools.vodafone-ip.de)
[13:53:56] *** Quits: kakashiA1 (~kakashi@ip-037-201-198-057.um10.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[13:58:27] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[13:59:37] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[13:59:55] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[13:59:55] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Killed (platinum.libera.chat (Nickname regained by services)))
[13:59:55] *** vinleod is now known as vdamewood
[14:01:03] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[14:01:04] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[14:01:04] *** Joins: wroathe (~wroathe@user/wroathe)
[14:05:00] *** Joins: Guest55 (~Guest55@185.230.82.40)
[14:06:10] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[14:06:37] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[14:06:45] *** Joins: kakashiA1 (~kakashi@ip-037-201-198-057.um10.pools.vodafone-ip.de)
[14:07:42] *** Joins: dan01 (~dan01@2a02:2f0f:311c:1500:417e:2422:ad8a:29ee)
[14:08:07] *** Quits: CoolerY (~CoolerX@user/coolerx) (Quit: Leaving)
[14:08:19] *** Joins: vysn (~vysn@user/vysn)
[14:09:21] *** Quits: quazimodo (~quazimodo@n110-21-88-214.bla2.nsw.optusnet.com.au) (Ping timeout: 256 seconds)
[14:11:27] *** Quits: kakashiA1 (~kakashi@ip-037-201-198-057.um10.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[14:20:08] *** Quits: Swahili_ (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Remote host closed the connection)
[14:20:20] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[14:23:11] *** Joins: kakashiA1 (~kakashi@ip-037-201-198-057.um10.pools.vodafone-ip.de)
[14:23:55] *** Quits: maret (~maret@nat-88-212-37-89.antik.sk) (Quit: maret)
[14:26:09] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:28:34] *** Quits: jonifen (~jonifen@user/jonifen) (Quit: Bye everyone)
[14:29:46] *** Joins: jonifen (~jonifen@user/jonifen)
[14:29:50] *** Joins: c4017w__ (~c4017@209.52.68.8)
[14:30:31] *** Quits: dan01 (~dan01@2a02:2f0f:311c:1500:417e:2422:ad8a:29ee) (Ping timeout: 250 seconds)
[14:31:44] *** Joins: dan01 (~dan01@2a02:2f0f:311c:1500:417e:2422:ad8a:29ee)
[14:32:01] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[14:32:41] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 250 seconds)
[14:33:22] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[14:39:22] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[14:39:32] *** Quits: nepeat_ (~nepeat@79.110.170.60) (Ping timeout: 240 seconds)
[14:42:12] *** Joins: nepeat (~nepeat@79.110.170.60)
[14:47:19] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Quit: The Game)
[14:48:46] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Ping timeout: 260 seconds)
[14:49:43] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[14:52:47] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[14:53:54] <fweht> would `{...window.location,  ...{search: ""}}` be also a viable answer to this question?  https://stackoverflow.com/questions/5817505/is-there-any-method-to-get-the-url-without-query-string
[14:54:45] *** Quits: revolvereld (~oem@dynamic-046-114-173-069.46.114.pool.telefonica.de) (Remote host closed the connection)
[14:56:08] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:57:41] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[14:58:39] *** Quits: kakashiA1 (~kakashi@ip-037-201-198-057.um10.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[15:02:25] *** Joins: yassernasc (~yassernas@2804:29b8:505a:f33d:18fd:c3b6:aec4:7a02)
[15:02:47] <Maxdamantus> fweht: you mean passing that object to `URL` or something?
[15:02:53] *** Joins: mtm49 (~mtm49@177.137.113.71)
[15:03:10] <Maxdamantus> anyway, no.
[15:03:11] *** Parts: mtm49 (~mtm49@177.137.113.71) ()
[15:03:17] <fweht> Maxdamantus: i mean just replacing search with the empty string
[15:03:35] *** Joins: tatarqa (~kli@ip-89-177-122-45.net.upcbroadband.cz)
[15:03:37] <fweht> so the same object just the property `search` to equal `""`
[15:03:40] <Maxdamantus> but window.location.href contains the search.
[15:03:47] *** Joins: SOMBRIO (~mtm49@177.137.113.71)
[15:03:51] <fweht> yes, i wanted to overwrite it
[15:04:13] <Maxdamantus> Okay, but your code doesn't do that, because `o.href == window.location.href`
[15:04:37] <fweht> aah ok, good point, thanks!
[15:06:40] <Maxdamantus> Hmm.. I wonder what I did to work around that issue.
[15:07:02] <fweht> i wonder if its possible to tell the url searchparams object to drop all values
[15:07:11] *** Quits: bliminse (~bliminse@host86-188-36-166.range86-188.btcentralplus.com) (Quit: leaving)
[15:07:13] <fweht> i can delete them one by one but somehow i miss a drop all
[15:07:16] <Maxdamantus> Since iirc, it seems that `new URL("", location.href)` should basically just remove the query string, but it doesn't.
[15:08:01] <fweht> ill just do `window.location.toString().split('?')[0]` it feels dirty but it does the job
[15:09:42] *** Quits: SOMBRIO (~mtm49@177.137.113.71) (Quit: Client closed)
[15:10:30] <Maxdamantus> Oh, you can just modify `u.search` on a URL object.
[15:10:31] <fweht> oh but `new URL(location.pathname, location.href)` also looks sweet!  is there a reason why sometimes the  answers include `window` and sometimes not?  is it in case i have some local variable named `location` shadowing the global one?
[15:10:53] *** Joins: stenno (~stenno@user/stenno)
[15:11:07] <fweht> Maxdamantus: yes, but i basically want to wirk with `u.searchParams` and i dont think my changes to `u.search` are immedeately reflected in `u.searchParams`?
[15:11:13] <Maxdamantus> so `const u = new URL("", location.href); u.search = ""; u.toString()`
[15:11:37] <fweht> cool!
[15:15:31] *** Joins: bliminse (~bliminse@host86-188-36-166.range86-188.btcentralplus.com)
[15:19:01] *** Joins: SOMBRIO (~SOMBRIO@177.137.113.71)
[15:20:43] *** Quits: abraham1 (~abraham@143.244.185.86) (Quit: The Lounge - https://thelounge.chat)
[15:21:05] *** Joins: abraham1 (~abraham@143.244.185.86)
[15:22:01] *** abraham1 is now known as abraham
[15:22:54] *** Joins: sudomann (~sudomann@98.219.211.182)
[15:25:15] *** Joins: dmaislin (~dmaislin@047-233-046-055.res.spectrum.com)
[15:27:12] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 256 seconds)
[15:28:07] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 256 seconds)
[15:28:40] *** Joins: pmercado (~pmercado@190.22.180.4)
[15:29:36] *** Joins: peter29 (~peter@197.210.8.97)
[15:30:20] *** Joins: c4017w_ (~c4017@209.52.68.8)
[15:33:41] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 245 seconds)
[15:33:41] *** Joins: o|||||o (~ol_greg@50-24-3-187.chstcmta05.res.dyn.suddenlink.net)
[15:36:09] *** Joins: stenno (~stenno@user/stenno)
[15:36:11] *** Quits: dan01 (~dan01@2a02:2f0f:311c:1500:417e:2422:ad8a:29ee) (Ping timeout: 245 seconds)
[15:39:34] *** Joins: dan01 (~dan01@2a02:2f0f:311c:1500:b44a:f768:9ead:27f)
[15:39:54] *** Quits: SOMBRIO (~SOMBRIO@177.137.113.71) (Quit: Client closed)
[15:40:58] *** Joins: maret (~maret@195.12.158.102)
[15:41:27] *** Quits: kadoban (~kadoban@user/kadoban) (Quit: Reconnecting)
[15:41:32] *** Joins: Intelo (~Intelo@88.246.74.142)
[15:41:49] *** Joins: kadoban (~kadoban@user/kadoban)
[15:43:16] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 245 seconds)
[15:43:22] *** Quits: varrg (~varrg@h-176-10-198-245.A351.priv.bahnhof.se) (Ping timeout: 260 seconds)
[15:45:50] *** Joins: Simplar (~quassel@188.163.93.241)
[15:46:25] *** Joins: stenno (~stenno@user/stenno)
[16:01:25] *** Joins: varrg (~varrg@h-176-10-198-245.A351.priv.bahnhof.se)
[16:02:05] *** Quits: peter29 (~peter@197.210.8.97) (Ping timeout: 252 seconds)
[16:07:15] *** Quits: ben_ (~ben@135.125.147.53) (Changing host)
[16:07:15] *** Joins: ben_ (~ben@user/nb-ben)
[16:07:21] *** ben_ is now known as nb-ben
[16:15:03] *** Quits: Guest55 (~Guest55@185.230.82.40) (Quit: Client closed)
[16:20:15] *** Quits: keypusher (keypusher@user/keypusher) (Ping timeout: 256 seconds)
[16:22:06] *** Joins: keypusher (~keypusher@user/keypusher)
[16:25:54] *** Joins: zxvf (~zxvf@2001:8a0:7ef1:0:7df9:1431:8405:fdf4)
[16:26:00] <zxvf> hello
[16:26:44] *** Joins: keypushe- (keypusher@user/keypusher)
[16:26:56] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[16:27:56] *** Quits: keypusher (~keypusher@user/keypusher) (Ping timeout: 252 seconds)
[16:28:03] *** Parts: Intelo (~Intelo@88.246.74.142) ()
[16:28:04] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[16:28:05] <zxvf> I am writing an userscript for getting rid of the (n) notifications on pages tab title, and also get rid of the dot badges of the favico icons. In sites like Linkedin, etc.
[16:28:40] <zxvf> I already suceeded in my 1st goal. But the 2nd goal I did not.
[16:28:50] *** Joins: trevors (~trevors@user/trevors)
[16:29:48] *** Joins: sudomann (~sudomann@98.219.211.182)
[16:29:53] <zxvf> here is the code: https://kopy.io/6OEMS
[16:30:02] *** keypushe- is now known as keypusher
[16:30:49] <zxvf> the relevant part is under
[16:30:49] <zxvf>  //-----FAVICON----- comment
[16:30:50] *** Joins: c4017w__ (~c4017@209.52.68.8)
[16:31:52] <zxvf> so my idea was to restore the original favico, but I tried to eliminate the current, just to see if this works.
[16:34:04] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 256 seconds)
[16:34:38] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[16:36:01] *** Joins: ekathva (~ekathva@2001:999:51:be01:2c4a:6b25:b5d5:f2c9)
[16:37:53] *** Quits: FlorianBad (~FlorianBa@cpe-67-49-107-16.dc.res.rr.com) (Quit: Client closed)
[16:39:36] *** Quits: D4mned (~D1mned@212.101.251.95) (Quit: Leaving)
[16:40:56] *** Joins: MassDebates_ (~MassDebat@2600:1700:1184:4510:815:9af6:dd18:89ff)
[16:43:44] <zxvf> does <link rel="shortcut icon" href="https://static-exp1.licdn.com/sc/h/1bt1uwq5akv756knzdj4l6cdc" id="favicon-ico"> match on document.querySelector("link[rel~='icon']") ?
[16:46:26] <varrg> n> let el = document.createElement('div');el.innerHTML = '<link rel="shortcut icon" href="https://static-exp1.licdn.com/sc/h/1bt1uwq5akv756knzdj4l6cdc" id="favicon-ico">';el.querySelector('link[rel~="icon"]');
[16:46:27] <austincheney> zxvf, you can test that in your browser console
[16:46:27] <jellobot> (fail) ReferenceError: document is not defined
[16:46:32] *** Quits: revolve (~u0_a227@cpc100838-bagu15-2-0-cust672.1-3.cable.virginm.net) (Ping timeout: 256 seconds)
[16:47:30] <zxvf> austincheney yes I was testing it
[16:48:51] <austincheney> zxvf, the most precise way is document.getElementsByTagName("link") then loop through those looking for .getAttribute("rel").indexOf("icon") > -1
[16:49:32] <jaawerth> wat
[16:50:14] *** Quits: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com) (Remote host closed the connection)
[16:52:09] <jaawerth> you shouldn't need to do that  - should be able to just use querySelectorAll
[16:52:19] <austincheney> soooo slow
[16:52:29] <jaawerth> slower than manual iteration?
[16:52:31] <jaawerth> I'm surprised
[16:52:47] <austincheney> yes, querySelectorAll is epic slow
[16:53:06] <jaawerth> should depend on the query
[16:53:20] *** Quits: moldorcoder7 (~moldorcod@37.120.143.28) (Ping timeout: 256 seconds)
[16:53:31] <jaawerth> well plus the initial parsing of the selector but for nontrivial searches that should be negligible compared to teh dom traversal ofc
[16:53:54] <austincheney> https://jsbench.github.io/#b39045cacae8d8c4a3ec044e538533dc
[16:55:14] <jaawerth> that's.. what'si t actually querying against?
[16:55:25] <austincheney> the page html
[16:55:28] <EdFletcher> “I feel the need…. The need for speed!”
[16:55:41] <jaawerth> useless
[16:55:52] <EdFletcher> Lol exactly
[16:55:58] *** Quits: pmercado (~pmercado@190.22.180.4) (Quit: Konversation terminated!)
[16:56:43] <austincheney> its pretty common, in my experience, for JavaScript developers to ignore data if it favors static dom methods
[16:56:52] *** Joins: gehn (~gehn@user/gehn)
[16:57:26] <jaawerth> relatively trivial queries on a relatively small DOM tree means comparatively more time is going to take up just parsing the query selector itself. which, yes, sometimes the regular iteration *is* absolutely better, especially when uyou don't need lots of custom predicates of deep tree traversal, but also when the page and queries are that simple the perf hardly matters anyway
[16:57:35] <jaawerth> that's the problem with microbenchmarks
[16:57:52] <austincheney> jaawerth, the larger the DOM tree the greater the performance differences magnify
[16:57:56] <jaawerth> I'm not even saying you're wrong that querySelectorAll is slower, just that that benchmark is useless
[16:57:58] <EdFletcher> “Premature optimization is the root of all evil”
[16:58:02] *** Joins: kakashiA1 (~kakashi@37.84.156.126)
[16:58:06] <jaawerth> that too
[16:58:11] <austincheney> but that isn't premature optimization
[16:58:24] <EdFletcher> Is there a perf issue at hand?
[16:58:29] <jaawerth> it's an oversimplified test case
[16:58:44] <austincheney> jaawerth, how so?
[16:58:55] <jaawerth> all that stuff I just wrote
[16:59:48] *** Joins: han-solo (~hanish@user/han-solo)
[17:00:05] <austincheney> in chrome the best case scenario for querySelectorAll is 23x slower than just about any other approach.  In Firefox its 500x slower and the numbers get much larger the further away you get from best case scenario
[17:00:21] <jaawerth> that doesn't mean those benchmarks aren't useless
[17:00:25] <austincheney> really though, numbers are irrelevant when the alternative is scary
[17:00:34] <jaawerth> like, you acn easily compare these in a the context of a real app and pick the faster one
[17:00:46] <jaawerth> it's a trivial decision but best made for the data/page you're working with
[17:00:49] <jaawerth> that's all I'm sahing
[17:01:01] <EdFletcher> Also, if it’s the right semantic tool for the job and there’s no perf issue at hand, then it’s the right tool for the job
[17:01:07] <gehn> EdFletcher, knuth is solved by actually profiling and benchmarking, that's the main point
[17:01:13] <EdFletcher> Regardless of your little benchmarks
[17:01:38] <gehn> though to be fair it's not worth profiling and benchmarking if there's no visible performance issue
[17:01:42] <EdFletcher> gehn: “Knuth is solved”, sorry don’t understand that?
[17:01:52] <gehn> EdFletcher, your quote is from Donald Knuth
[17:01:57] <jaawerth> but I'll admit I shouldn't have "wat"'d at the getElementsByTagName either haha
[17:01:57] <austincheney> EdFletcher, are you saying that in the absense of measures we should ignore known performance traps?
[17:02:04] <gehn> well, his quote I guess I should say, cuz, it's attributed to him
[17:02:08] <EdFletcher> gehn: And yeah that’s really all I’m saying that until there’s an issue there isn’t one
[17:02:26] <EdFletcher> gehn: Yeah gotcha just wasn’t sure about the “solved” thing
[17:02:31] <gehn> he's probably not the only person to have ever come to this conclusion on their own, just the most famous person who said it in a public manner firstest
[17:02:32] * zxvf wondering why the f... in javascript the const keyword has a different meaning of every other language I know of!
[17:03:08] <gehn> zxvf, maybe you don't know enough languages
[17:03:23] <jaawerth> it isn't as different as you think, it's just that there are no pointers
[17:03:36] <EdFletcher> austincheney: I’m saying you’re arguing the wrong thing, and yes we should ignore all of this benchmarking crap if it’s the right semantic tool for the job and it doesn’t introduce a performance issue. Avoiding the API because of these contrived benchmarks is ridiculous and amateurish.
[17:03:39] <gehn> most languages share the same common ascii subset of lexical tokens, but what those tokens mean varies by language
[17:03:51] <gehn> quotes for example are actually the "comment" in both VB and vimscript
[17:04:10] <austincheney> EdFletcher, in my part time job that line of thinking gets people put in jail, killed, or both
[17:04:14] <gehn> which makes that somewhat unique compared to other languages, but not unique entirely as it's common between at least those two
[17:04:19] *** Joins: revolve (~u0_a227@82-132-236-173.dab.02.net)
[17:04:29] <gehn> in R the -> token is assignment, not = as most people are commonly familiar with
[17:04:33] <EdFletcher> austincheney: Lol what
[17:04:49] <gehn> and ofc that means that in R -> is not a function indicator as it is in some other languages like Coffeescript
[17:04:57] <EdFletcher> This is a programming channel sir, not a survival channel 😂
[17:05:19] *** Joins: Guest55 (~Guest55@185.230.82.40)
[17:05:19] <gehn> EdFletcher, if they work in the "intelligence" community it might be a reasonable statement
[17:05:22] <gehn> or dod etc
[17:05:37] <theskillwithin> welp my gf would probably call me a premature optimizer as well
[17:05:39] <gehn> or just dangerous stuff, like nuclear power plants or space rockets
[17:05:46] <EdFletcher> naw even there it's not reasonable
[17:05:53] <EdFletcher> it's just hyperbolic
[17:05:58] <gehn> it's not reasonable to suggest that computer mistakes can lead to death?
[17:06:03] *** Parts: Guest55 (~Guest55@185.230.82.40) ()
[17:06:09] <gehn> I mean for most websites, sure, but there are *plenty* of domains where this is true
[17:06:14] <EdFletcher> gehn: that's not at all how i interpreted that
[17:06:29] <EdFletcher> and yeah safety-critical systems surely do exist
[17:06:30] <wez> gehn: Correct, which is why Nasa doesn't employ PHP programmers
[17:06:45] <wez> :P
[17:06:47] <EdFletcher> but even the authors of those don't obsess over premature optimization, that's not the methodology
[17:06:49] <gehn> well, probably not for mission critical hardware
[17:06:54] <gehn> I bet NASA has websites though
[17:07:03] <EdFletcher> they use formal methods to verify their code
[17:07:05] <gehn> dunno if any of them are written in PHP but if so it probably doesn't matter
[17:07:23] <theskillwithin> i did hear that nodejs is used in space for something
[17:07:34] <wez> gehn: Probably in perl, as Larry Wall used to work for Nasa and developed it while working there
[17:07:53] <gehn> probably reasonable to use node for e.g. onboard science experiments, so, you know, stuff that, again isn't life threatening
[17:08:02] *** Joins: moldorcoder7 (~moldorcod@37.120.143.221)
[17:08:18] <EdFletcher> exactly, it isn't used in the safety-critical systems
[17:08:23] <EdFletcher> that would be bonkers
[17:08:29] *** Joins: Guest55 (~Guest55@185.230.82.40)
[17:08:41] <gehn> well if they use formal verification, it would probably be fine
[17:08:44] *** Joins: sagax (~sagax_nb@user/sagax)
[17:09:01] <gehn> I think the more important issue at hand is probably performance and speed and reaction time of hardware needing to be in the sub microsecond range
[17:09:03] <EdFletcher> sure but that's incredibly expensive so it's only done on systems that require it
[17:09:18] <theskillwithin> https://openjsf.org/wp-content/uploads/sites/84/2020/02/Case_Study-Node.js-NASA.pdf
[17:09:22] <gehn> as well as it's unlikely that nodejs runs on most of that embedded hardware for stuff like guidance computers etc
[17:10:39] <EdFletcher> theskillwithin: i'd heard about this but hadn't seen this formal study/report before, great link thank you!
[17:11:34] *** Quits: varrg (~varrg@h-176-10-198-245.A351.priv.bahnhof.se) (Quit: Leaving)
[17:12:36] *** Quits: moldorcoder7 (~moldorcod@37.120.143.221) (Ping timeout: 256 seconds)
[17:13:44] <theskillwithin> space exploration improves all engineering, including software engineering
[17:13:58] <EdFletcher> hell yes it does
[17:15:35] <zxvf> this is the script now: https://kopy.io/SNMqT
[17:16:03] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[17:16:08] <zxvf> now I receive this error on console:
[17:16:52] <zxvf> script.js:62 Uncaught TypeError: Failed to execute 'observe' on 'MutationObserver': parameter 1 is not of type 'Node'.
[17:16:52] <zxvf>     at script.js:62
[17:16:53] <zxvf>     at script.js:63
[17:16:53] <zxvf>     at script.js:64
[17:17:19] <zxvf> How do I put things to observe an array instead of single node?
[17:18:56] <Svitkona> loop through the array and observe each node?
[17:21:15] <wez> fp <3
[17:23:05] <zxvf> Svitkona yes i think i now was trying to do that but in a stupid way
[17:24:27] *** Joins: moldorcoder7 (~moldorcod@188.95.55.24)
[17:25:01] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[17:28:15] <zxvf> seem i eliminated that error, but nothing happens.
[17:28:17] <zxvf> https://kopy.io/gMu6y
[17:28:50] <zxvf> I was expecting to see 'handling the ico' on the console log
[17:29:19] *** robyndrake is now known as robyn
[17:31:09] *** Joins: varrg (~varrg@h-176-10-198-245.A351.priv.bahnhof.se)
[17:31:09] *** Quits: varrg (~varrg@h-176-10-198-245.A351.priv.bahnhof.se) (Client Quit)
[17:31:19] *** Joins: c4017w_ (~c4017@209.52.68.8)
[17:31:24] *** Joins: varrg (~varrg@h-176-10-198-245.A351.priv.bahnhof.se)
[17:33:39] *** Joins: pulse (~pulse@user/pulse)
[17:34:27] *** Quits: varrg (~varrg@h-176-10-198-245.A351.priv.bahnhof.se) (Client Quit)
[17:35:03] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[17:36:55] *** Joins: SOMBRIO (~SOMBRIO@177.137.113.71)
[17:37:17] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[17:38:07] *** Joins: Tempesta (~Tempesta@user/tempesta)
[17:42:15] *** Joins: rewrit3 (~rewrit3@user/rewrit3)
[17:43:57] *** Joins: ezio (~ezio@cpe688f2ec706e3-cm688f2ec706e0.cpe.net.cable.rogers.com)
[17:49:53] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 252 seconds)
[17:50:45] *** Joins: pmercado (~pmercado@190.22.185.202)
[17:51:40] *** Joins: The_Blode_ (uid537595@user/the-blode/x-7164444)
[17:51:42] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 256 seconds)
[17:52:39] <Tabmow> I have a JSON object like this that I need to post to an API (https://dpaste.org/FuBU) - what's the best way to work with that in javascript? So I have all the data I just need to essentially build that JSON.
[17:53:00] *** Quits: realies (~realies@user/realies) (Read error: Connection reset by peer)
[17:53:58] *** Joins: stenno (~stenno@user/stenno)
[17:54:23] <Svitkona> i don't really understand your question
[17:54:37] *** Joins: noarb (~noarb@user/noarb)
[17:54:55] <Svitkona> you have a .json file with that object in it?
[17:55:11] *** Joins: realies (~realies@user/realies)
[17:55:34] <Tabmow> No, I need to build that json string so I can post it to an API - that is just an example of what it should look like structure wise
[17:56:16] <Svitkona> well, just build a JS object that matches that structure and use JSON.stringify
[17:58:21] <Tabmow> Right, that's what I'm asking though, is there a 'best' way of doing this? Because there is really 3 distinct objects there with arrays etc. that I would like to loop through somewhat easily to build.
[17:58:36] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[17:58:36] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[17:58:36] *** Joins: wroathe (~wroathe@user/wroathe)
[17:59:17] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[17:59:48] *** Quits: w0ng (~w0ng@103.1.212.158) (Ping timeout: 250 seconds)
[18:02:45] *** Joins: obimod (~obimod@gateway/vpn/pia/obimod)
[18:03:37] *** Quits: kakashiA1 (~kakashi@37.84.156.126) (Ping timeout: 256 seconds)
[18:03:58] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 250 seconds)
[18:03:58] *** The_Blode_ is now known as The_Blode
[18:05:38] *** Joins: aLeSD (~aLeSD@139.47.114.114)
[18:05:51] *** Joins: daoumilseitek (~daoumilse@164.96.146.77.rev.sfr.net)
[18:05:55] <daoumilseitek> hey
[18:06:03] <wez> hi
[18:06:30] <daoumilseitek> anyone knows of a good free visual editor / wyiswyg with file upload (not just images) ?
[18:06:51] <daoumilseitek> old tinymce has become paid
[18:07:00] <daoumilseitek> (for file upload plugins at least)
[18:07:16] *** Joins: Deneb (~johnch@23.143.9.51.dyn.plus.net)
[18:07:21] <daoumilseitek> ckeditor, same
[18:07:39] <daoumilseitek> trix editor has file uploads but doesn't handle advanced formatting like tables
[18:08:31] <daoumilseitek> i feel dumb not having this available
[18:11:19] *** Quits: moldorcoder7 (~moldorcod@188.95.55.24) (Ping timeout: 256 seconds)
[18:11:53] *** Joins: moldorcoder7 (~moldorcod@188.95.55.24)
[18:12:48] *** Joins: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net)
[18:13:19] <daoumilseitek> and the prices geez
[18:13:26] <daoumilseitek> 37$/m, 80$/m
[18:13:42] *** Quits: mat001 (~mat001@213.143.69.121) (Remote host closed the connection)
[18:17:10] *** Joins: pmercado_ (~pmercado@190.22.160.49)
[18:17:12] *** Quits: pmercado (~pmercado@190.22.185.202) (Ping timeout: 256 seconds)
[18:17:33] *** Quits: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[18:17:50] *** Quits: ezio (~ezio@cpe688f2ec706e3-cm688f2ec706e0.cpe.net.cable.rogers.com) (Ping timeout: 250 seconds)
[18:18:25] *** Joins: varaindemian (uid73404@id-73404.ilkley.irccloud.com)
[18:18:26] *** Quits: Simplar (~quassel@188.163.93.241) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:18:44] *** Quits: dsrt^ (~dsrt@128-092-164-034.biz.spectrum.com) (Remote host closed the connection)
[18:23:41] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 245 seconds)
[18:26:04] *** Quits: defn (~n0b0dy@user/defn) (Ping timeout: 250 seconds)
[18:26:53] *** Joins: defn (~n0b0dy@user/defn)
[18:26:57] *** Joins: ccapndave (~ccapndave@178.197.239.216)
[18:27:07] <ccapndave> Does immutable.js have good performance?
[18:27:54] <daoumilseitek> god i'm doomed
[18:28:30] <gehn> daoumilseitek, there's always the good old bbcode
[18:28:43] <gehn> there's also the good old "reinvent the wheel"
[18:28:48] <daoumilseitek> that's not wysiwyg
[18:28:50] <gehn> which could make sense if there are not free equivalents anymore
[18:28:58] <gehn> well no, but it accomplishes a similar goal
[18:29:02] <ccapndave> I guess its going to be a lot slower than mutating stuff
[18:29:17] <ccapndave> But I'm not supposed to mutate stuff that's in React state :(
[18:29:35] <gehn> ccapndave, not necessarily, also have you actually identified a performance problem yet?
[18:29:47] <ccapndave> No, I'm just deciding what data structure to use
[18:29:48] <gehn> there are plenty of ways to achieve really great if not nearly equal performance in FP code
[18:30:06] <ccapndave> I need to store a map of ids to potentially very large objects
[18:30:11] <gehn> even where FP code might be slower, the benefits to your codebase are still probably worth it
[18:30:15] <ccapndave> Actually maps to arrays of potentially very large objects
[18:30:31] <gehn> the objects being large is unlikely to matter
[18:30:38] <ccapndave> Operations will be either to reset the array attached to an id, or adding elements to the array
[18:30:46] <ccapndave> React needs to notice if either thing happens
[18:30:47] <gehn> also again, too soon to worry about this if you don't actually see bad performance
[18:31:04] <gehn> if you have less than a million items per array, you probably don't have performance problems
[18:31:17] <ccapndave> The arrays won't be large, but the contents will be
[18:31:22] <ccapndave> e.g. multiple MBs
[18:31:29] <ccapndave> "will be" = "could be"
[18:31:43] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:31:49] *** Joins: c4017w__ (~c4017@209.52.68.8)
[18:31:52] <ccapndave> So I'm guessing I don't want to be deep-cloning them every time I update
[18:32:11] <ccapndave> But Immutable.js doesn't actually do that eh?  It does cleverness to not actually deep copy anything?
[18:32:26] <gehn> I don't use it, so I'm not sure
[18:32:29] <ccapndave> Me neither
[18:32:46] <ccapndave> You're right though, I'll try it the naive way and then change over later
[18:32:51] *** Quits: plitter (~plitter@user/plitter) (Ping timeout: 256 seconds)
[18:33:23] <gehn> you can write your own custom deep clone function to avoid copying contents of heavy data structures
[18:33:50] <gehn> iirc copying a fixed typed array doesn't copy its contents, same as any other array or object
[18:34:05] <gehn> i.e. you would in fact need to write a deep copy function to explicitly copy the contents
[18:34:17] <ccapndave> These aren't fixed types though - they contain arbitrary objects
[18:34:19] <gehn> so in the base general case you're probably fine already, if not, custom deep copy could work
[18:34:37] <gehn> well then those behave as any other arbitrary object - copy by value, not contents
[18:34:48] <ccapndave> Exactly
[18:35:32] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[18:35:33] <gehn> personally I just write "very FP" code and ignore immutable.js
[18:36:01] <gehn> it's a nice idea I guess, but I don't feel it would add much I can't already do or get with the way I approach coding in the first place
[18:36:06] <ccapndave> This is what I normally do too and its usually fine, but I'm just thinking about it because the data in the arrays will be so big
[18:37:22] *** Joins: sudomann (~sudomann@98.219.211.182)
[18:40:07] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:40:07] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:40:07] *** Joins: wroathe (~wroathe@user/wroathe)
[18:41:55] *** Quits: jonifen (~jonifen@user/jonifen) (Ping timeout: 256 seconds)
[18:42:08] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 252 seconds)
[18:42:39] *** Joins: jonifen (~jonifen@user/jonifen)
[18:43:50] *** Quits: ccapndave (~ccapndave@178.197.239.216) (Quit: Textual IRC Client: www.textualapp.com)
[18:44:58] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:55:20] *** Joins: sudomann (~sudomann@98.219.211.182)
[19:00:30] *** Joins: Schultz (~ivillarro@user/Schultz)
[19:00:50] <SOMBRIO> Hi, Decker! Would it work without sockets support? the default game platform build modding API is quite limited and only allows for http fetching. Would it be worth to build the game platform with sockets support in this case? Less coding work?
[19:01:53] <gehn> what game platform? is this a game platform that you are building 100% yourself? or are you talking about some modding API for someone else's game (platform)
[19:02:17] <gehn> I would imagine websockets would be *more* coding work than plain http fetch
[19:04:25] <SOMBRIO> Hi, gehn! Its a FLOSS game platform
[19:04:30] *** Quits: hughrawlinson_ (sid11243@id-11243.ilkley.irccloud.com) (Ping timeout: 260 seconds)
[19:04:37] *** Quits: pax_os__ (uid535114@id-535114.ilkley.irccloud.com) (Ping timeout: 240 seconds)
[19:05:02] *** Quits: MootPoot (uid444585@id-444585.ilkley.irccloud.com) (Ping timeout: 240 seconds)
[19:06:01] <austincheney> gehn, kind of
[19:06:38] <austincheney> gehn, Node has standard library for streams and sockets so half the work is already done, but there is not a standard Node library for RFC 6455
[19:07:08] <austincheney> but after that is done then implementing websockets is so much easier than http, including fetch
[19:07:59] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 256 seconds)
[19:08:16] <zxvf> ppl tks
[19:08:17] <austincheney> its a matter of establishing a connection via a single method, running a listener (server), and then sending messages is as simple as .send() (or however you implement it)
[19:08:58] <austincheney> there is a lot of overhead to HTTP because HTTP has headers and roundtrips
[19:10:21] *** Quits: que11en (~oem@dynamic-046-114-173-069.46.114.pool.telefonica.de) (Ping timeout: 245 seconds)
[19:10:34] *** Joins: pax_os__ (uid535114@ilkley.irccloud.com)
[19:11:16] *** Joins: hughrawlinson_ (sid11243@ilkley.irccloud.com)
[19:11:50] *** Joins: MootPoot (uid444585@ilkley.irccloud.com)
[19:12:45] *** Joins: junebug (~junebug@2600:1700:3db0:2540:11d6:6b43:33af:a788)
[19:12:49] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[19:14:05] <austincheney> gehn, if you are interested here is my attempt to explain RFC 6455: https://github.com/prettydiff/wisdom/blob/master/websocket_server.md
[19:14:13] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 256 seconds)
[19:14:26] <austincheney> sheets helped me a lot to understand the binary involved
[19:16:42] *** Joins: OnkelTem (~OnkelTem@user/onkeltem)
[19:16:51] <SOMBRIO> There is a JSONRPC library for the modding API so I tought at making a JSONRPC server to interface with
[19:18:30] <zxvf> can sb help me with this? https://stackoverflow.com/questions/70908925/userscript-for-getting-rid-of-annoying-notifications-counter-on-title-of-pages-l/70952970#comment125440453_70910570
[19:18:51] <zxvf> problem fully desribed in the comment
[19:20:37] <SOMBRIO> Would WebSockets be helpful at building a JSONRPC server? What should I look forward in this case?
[19:20:59] *** Joins: mat001 (~mat001@213.143.69.121)
[19:21:24] *** Joins: rcoote (~rcoote@2a02:908:690:a140:647b:9d11:b52b:c420)
[19:25:01] *** Quits: OnkelTem (~OnkelTem@user/onkeltem) (Quit: WeeChat 2.8)
[19:25:26] *** Quits: mat001 (~mat001@213.143.69.121) (Ping timeout: 250 seconds)
[19:26:58] *** Joins: Rockwood (~Rocky@user/rocky)
[19:28:29] <Covrus> maybe. Look at mole-rpc, BTW
[19:28:42] <Covrus> already has a websocket transport done for you
[19:29:32] *** Joins: Maxattax97 (~max@71-222-143-249.albq.qwest.net)
[19:30:50] *** Quits: yassernasc (~yassernas@2804:29b8:505a:f33d:18fd:c3b6:aec4:7a02) (Remote host closed the connection)
[19:30:56] *** Quits: Guest55 (~Guest55@185.230.82.40) (Quit: Client closed)
[19:31:09] *** Joins: yassernasc (~yassernas@2804:29b8:505a:f33d:18fd:c3b6:aec4:7a02)
[19:32:19] *** Joins: c4017w_ (~c4017@209.52.68.8)
[19:34:33] *** Quits: maret (~maret@195.12.158.102) (Quit: maret)
[19:35:45] *** Quits: yassernasc (~yassernas@2804:29b8:505a:f33d:18fd:c3b6:aec4:7a02) (Ping timeout: 256 seconds)
[19:35:50] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[19:36:46] *** Joins: maret (~maret@195.12.158.102)
[19:39:16] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[19:39:23] *** Quits: obimod (~obimod@gateway/vpn/pia/obimod) (Quit: every day brings new choices)
[19:41:15] <austincheney> SOMBRIO, look at gRPC and their node implementation
[19:42:21] <austincheney> gRPC is supposed to be 10x faster than regular RPC because its a straight binary stream without data encoding for transmission
[19:42:40] *** Joins: Guest57 (~textual@ip98-164-87-23.no.no.cox.net)
[19:43:37] *** Quits: pluri (~pluri@user/pluri) (Quit: Textual IRC Client: www.textualapp.com)
[19:44:31] *** Joins: wovixo (~wovixo@128.104.205.49)
[19:45:18] *** Joins: epolanski (uid312403@helmsley.irccloud.com)
[19:53:41] *** Joins: jim87 (~quassel@93.55.249.30)
[19:59:19] *** Quits: glider (~glider@user/glider) (Quit: ZNC 1.9.x-git-111-f2cdc3db - https://znc.in)
[19:59:20] *** Quits: eldritch_ (~eldritch@user/eldritch/x-9272577) (Quit: bye)
[20:00:11] *** Quits: Rockwood (~Rocky@user/rocky) (Quit: The Time is Over)
[20:01:23] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[20:02:17] *** Joins: yassernasc (~yassernas@2804:29b8:505a:f33d:18fd:c3b6:aec4:7a02)
[20:03:45] *** Quits: ekathva (~ekathva@2001:999:51:be01:2c4a:6b25:b5d5:f2c9) (Ping timeout: 250 seconds)
[20:04:22] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[20:05:15] *** Quits: _sgen (~sgen@2607:fea8:7ce1:c8e0:ec63:8eee:4635:2aa8) (Quit: Leaving)
[20:05:30] *** Joins: sgen (~sgen@2607:fea8:7ce1:c8e0:f141:ba0b:da0:3c4d)
[20:05:34] *** Joins: glider (~glider@user/glider)
[20:05:42] *** Quits: sgen (~sgen@2607:fea8:7ce1:c8e0:f141:ba0b:da0:3c4d) (Read error: Connection reset by peer)
[20:05:54] *** Joins: sgen (~sgen@2607:fea8:7ce1:c8e0:f141:ba0b:da0:3c4d)
[20:06:55] *** Quits: yassernasc (~yassernas@2804:29b8:505a:f33d:18fd:c3b6:aec4:7a02) (Ping timeout: 256 seconds)
[20:08:56] *** Quits: maret (~maret@195.12.158.102) (Quit: maret)
[20:11:25] *** Quits: Deneb (~johnch@23.143.9.51.dyn.plus.net) (Quit: Leaving)
[20:15:18] *** Joins: sam_1 (~sam_1@87.51.251.118)
[20:15:25] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[20:15:25] *** Quits: Schultz (~ivillarro@user/Schultz) (Ping timeout: 256 seconds)
[20:19:56] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 245 seconds)
[20:21:54] <lf94> Does everyone just keep nodejs website open for nodejs documentation?
[20:21:59] <lf94> Or do they get it directly in their editors?
[20:23:08] *** Joins: Akiva (~Akiva@user/Akiva)
[20:24:59] *** Joins: mat001 (~mat001@213.143.69.121)
[20:25:23] *** Joins: Schultz (~ivillarro@201.220.103.44)
[20:25:53] *** Quits: Schultz (~ivillarro@201.220.103.44) (Changing host)
[20:25:53] *** Joins: Schultz (~ivillarro@user/Schultz)
[20:25:55] *** Parts: foo (~foo@user/foo/x-8763512) ()
[20:27:10] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[20:28:45] *** Quits: mat001 (~mat001@213.143.69.121) (Remote host closed the connection)
[20:29:23] *** Joins: mat001 (~mat001@72.28.108.216)
[20:30:19] *** Quits: junebug (~junebug@2600:1700:3db0:2540:11d6:6b43:33af:a788) (Quit: Leaving)
[20:30:52] *** Quits: dan01 (~dan01@2a02:2f0f:311c:1500:b44a:f768:9ead:27f) (Ping timeout: 250 seconds)
[20:31:39] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0a8-31.dhcp.inet.fi)
[20:32:43] *** Quits: revolve (~u0_a227@82-132-236-173.dab.02.net) (Read error: Connection reset by peer)
[20:32:53] *** Joins: c4017w__ (~c4017@209.52.68.8)
[20:33:51] *** Joins: sam_1 (~sam_1@87.51.251.118)
[20:34:46] *** Joins: revolve (~u0_a227@cpc100838-bagu15-2-0-cust672.1-3.cable.virginm.net)
[20:36:30] *** Quits: goddard (~goddard@user/goddard) (Ping timeout: 250 seconds)
[20:36:36] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[20:37:41] *** Joins: yassernasc (~yassernas@177.37.144.34)
[20:38:00] <zxvf> bye tks
[20:38:14] *** Quits: zxvf (~zxvf@2001:8a0:7ef1:0:7df9:1431:8405:fdf4) (Quit: Client closed)
[20:38:25] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 250 seconds)
[20:39:43] *** Quits: Arisc (~ckmptnml@201-24-225-211.user3p.brasiltelecom.net.br) (Ping timeout: 250 seconds)
[20:40:21] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 256 seconds)
[20:42:03] *** Quits: yassernasc (~yassernas@177.37.144.34) (Ping timeout: 256 seconds)
[20:42:07] *** Quits: han-solo (~hanish@user/han-solo) (Quit: leaving)
[20:43:00] *** Quits: Maxattax97 (~max@71-222-143-249.albq.qwest.net) (Ping timeout: 250 seconds)
[20:44:16] *** Joins: maret (~maret@195.12.158.102)
[20:44:31] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[20:46:48] *** Joins: dan01 (~dan01@2a02:2f0f:311c:1500:b44a:f768:9ead:27f)
[20:47:21] *** Joins: programmar (~whatever@118.69.128.37)
[20:48:06] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[20:48:14] <programmar> hi everyone, one question, when i request permission to send notification using Notification.requestPermission(), how can i re-request if the user accidentally click "No" when the allowing prompt pops up ?
[20:48:37] <programmar> on chrome and also firefox, if i accidentally click "No", and re-request, it doesn't ask the user to allow again
[20:49:17] <pavonia> Not even if you reload the page?
[20:50:09] *** Joins: sam_1 (~sam_1@87.51.251.118)
[20:50:37] *** Quits: maret (~maret@195.12.158.102) (Quit: maret)
[20:50:46] <programmar> nope
[20:50:55] <programmar> it still doesn't allow me
[20:51:04] <programmar> i tried on both CHrome on my browser and chrome on my laptop
[20:51:26] *** Joins: yassernasc (~yassernas@ec2-54-87-145-249.compute-1.amazonaws.com)
[20:52:07] <programmar> i created this little testcase of mine, https://pastebin.com/22fALykJ, i wonder if it works on you or anyone else here
[20:53:32] *** Joins: Maxattax97 (~max@71-222-143-249.albq.qwest.net)
[20:53:34] *** Joins: goddard (~goddard@user/goddard)
[20:53:44] *** Joins: teut (~teut@2401:4900:1c68:dbe1:6472:470:2bf2:ff35)
[20:55:19] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 250 seconds)
[20:55:41] *** Quits: Maxattax97 (~max@71-222-143-249.albq.qwest.net) (Remote host closed the connection)
[20:56:10] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[20:57:14] <pavonia> programmar: This seems to be by design and the user has to manually remove the rejection in their browser
[20:58:12] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[20:58:13] <programmar> huh so it failed on your browser too ?
[20:58:15] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0a8-31.dhcp.inet.fi) (Read error: Connection reset by peer)
[20:58:54] <pavonia> https://stackoverflow.com/questions/39745691/notification-api-ask-permission-after-denied
[21:01:09] <programmar> i mean i know i have to reset it manually tho, just wonder if there is anyway to do it via codes
[21:01:14] *** Joins: sam_1 (~sam_1@87.51.251.118)
[21:01:25] <programmar> if there isn't then i guess i have to pop up an alert() saying the user has to manually removes it tho
[21:02:10] <pavonia> If there were a way, it would be considered a bug, I guess ;)
[21:03:24] *** Joins: Reign (~Username@ip98-161-226-10.ph.ph.cox.net)
[21:03:57] <programmar> ok
[21:04:03] <joepie91> programmar: don't use alert(), it steals focus
[21:04:16] <joepie91> and blocks other input to the page
[21:04:21] <programmar> then what should i use ? i mean i definitely can't use console.log()
[21:04:28] <joepie91> show something on your page isntead
[21:04:43] <programmar> hm yea that sounds better
[21:04:49] <programmar> even tho it requires a bit extra work
[21:05:50] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 260 seconds)
[21:06:00] *** Joins: maret (~maret@195.12.158.102)
[21:06:03] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[21:07:16] *** Quits: maret (~maret@195.12.158.102) (Client Quit)
[21:11:14] <austincheney> lf94, I just keep a browser tab open to the Node docs
[21:11:17] *** Joins: thojanssens (~thojansse@49.230.65.10)
[21:12:43] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[21:13:25] *** Quits: dan01 (~dan01@2a02:2f0f:311c:1500:b44a:f768:9ead:27f) (Ping timeout: 240 seconds)
[21:14:31] *** Joins: JohnComputation2 (~JohnCompu@gateway/tor-sasl/johncomputation)
[21:14:44] *** Joins: trevors (~trevors@user/trevors)
[21:15:19] *** Joins: maret (~maret@195.12.158.102)
[21:15:29] *** Quits: eXtr3m0 (~eXtr3m0@user/eXtr3m0) (Ping timeout: 256 seconds)
[21:16:03] *** Quits: yassernasc (~yassernas@ec2-54-87-145-249.compute-1.amazonaws.com) (Ping timeout: 256 seconds)
[21:17:06] *** Quits: JohnComputation (~JohnCompu@gateway/tor-sasl/johncomputation) (Ping timeout: 276 seconds)
[21:17:41] *** Quits: maret (~maret@195.12.158.102) (Client Quit)
[21:17:45] *** Quits: Schultz (~ivillarro@user/Schultz) (Ping timeout: 256 seconds)
[21:19:02] *** Joins: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk)
[21:19:59] *** Quits: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk) (Remote host closed the connection)
[21:22:51] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Ping timeout: 256 seconds)
[21:23:33] <twiclo> I just need a box that overlays my google maps website that says "Too much data to display. Try zooming in more" with no (x) button or clickable events. Should I just go with a div for that?
[21:23:54] *** Joins: magga (magga@ti0036a400-1042.bb.online.no)
[21:24:16] *** Joins: stenno (~stenno@user/stenno)
[21:27:17] <lf94> austincheney: yeah ok, same
[21:27:39] *** Joins: hax (~hax@69.165.175.67)
[21:27:39] *** Quits: hax (~hax@69.165.175.67) (Changing host)
[21:27:39] *** Joins: hax (~hax@user/hax)
[21:27:42] <austincheney> twiclo, does it need to be accessible?  I have no idea what google maps does for accessibility
[21:28:02] *** Joins: fef (~thedawn@user/thedawn)
[21:33:19] *** Joins: c4017w_ (~c4017@209.52.68.8)
[21:35:02] *** Joins: ezio (~ezio@cpe688f2ec706e3-cm688f2ec706e0.cpe.net.cable.rogers.com)
[21:35:31] *** happymeal` is now known as happymeal
[21:37:14] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[21:37:22] *** Joins: crashrep (~crashrep@user/crashrep)
[21:39:27] *** Joins: dan01 (~dan01@2a02:2f0f:311c:1500:b44a:f768:9ead:27f)
[21:42:15] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Quit: The Game)
[21:44:57] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Quit: Leaving)
[21:45:24] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[21:47:51] *** Quits: masoudd (~masoudd@user/masoudd) (Quit: Leaving)
[21:51:11] *** Joins: advanced_malform (~nuke@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417)
[21:53:08] *** Quits: advanced_malform (~nuke@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417) (Remote host closed the connection)
[21:53:52] *** Joins: advanced_malform (~nuke@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417)
[21:59:45] *** Joins: junebug (~junebug@2600:1700:3db0:2540:b872:5e21:461f:e72c)
[22:01:50] *** Joins: maret (~maret@195.12.158.102)
[22:02:53] *** Joins: Schultz (~ivillarro@201.220.103.44)
[22:03:02] *** Quits: maret (~maret@195.12.158.102) (Client Quit)
[22:03:03] *** Joins: mintoyatsu (~mint@user/mintoyatsu)
[22:06:04] *** Joins: jim87_ (~quassel@93.55.249.30)
[22:07:50] *** Quits: Schultz (~ivillarro@201.220.103.44) (Ping timeout: 256 seconds)
[22:08:58] *** Quits: ezio (~ezio@cpe688f2ec706e3-cm688f2ec706e0.cpe.net.cable.rogers.com) (Ping timeout: 256 seconds)
[22:09:29] *** Quits: jim87 (~quassel@93.55.249.30) (Ping timeout: 252 seconds)
[22:10:13] *** Quits: jim87_ (~quassel@93.55.249.30) (Client Quit)
[22:10:24] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[22:11:09] *** Joins: whatsupdoc (uid509081@hampstead.irccloud.com)
[22:15:03] *** Quits: fweht (uid404746@id-404746.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[22:15:53] *** Quits: thojanssens (~thojansse@49.230.65.10) (Quit: Leaving)
[22:18:56] *** Joins: terminalpusher (~terminalp@2a01:586:8e51:1:9e92:210c:f38:6810)
[22:19:08] <terminalpusher> How much bytes does `Number` take?
[22:19:13] <terminalpusher> It's dynamic isn't it?
[22:19:38] <terminalpusher> As a comparison, in Rust `u8` takes 1 byte
[22:21:15] *** Joins: The_Blod- (~Blode@user/the-blode/x-7164444)
[22:21:29] <stenno> Number is 64bit in javascript
[22:21:32] <Alexendoo> Logically, it's a 64 bit float, but how much memory it actually uses it an implementation detail subject to optimisation
[22:21:43] <terminalpusher> oh
[22:21:47] *** Quits: The_Blode_ (~Blode@user/the-blode/x-7164444) (Ping timeout: 256 seconds)
[22:22:05] <stenno> terminalpusher: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#number_type
[22:23:39] *** Joins: Schultz (~ivillarro@201.220.103.44)
[22:23:40] *** Joins: onosendi (~onosendi@user/onosendi)
[22:24:52] *** Joins: flughafen (~flughafen@p5de8ed0b.dip0.t-ipconnect.de)
[22:25:46] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[22:26:44] *** Quits: Guest57 (~textual@ip98-164-87-23.no.no.cox.net) (Quit: Textual IRC Client: www.textualapp.com)
[22:28:01] *** Joins: off^ (~off@128-092-174-141.biz.spectrum.com)
[22:28:55] *** Quits: Schultz (~ivillarro@201.220.103.44) (Ping timeout: 250 seconds)
[22:29:36] <austincheney> terminalpusher, the JS Number type is IEEE Double Precision Floating Point
[22:30:06] *** Quits: programmar (~whatever@118.69.128.37) (Quit: Leaving)
[22:30:24] *** Joins: PsyStemUpdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net)
[22:31:28] *** Joins: funhouse (~funhouse@user/funhouse)
[22:31:50] *** Tobbi__ is now known as Tobbi
[22:32:03] *** Joins: funhouse54 (~funhouse@user/funhouse)
[22:32:07] *** Quits: terminalpusher (~terminalp@2a01:586:8e51:1:9e92:210c:f38:6810) (Remote host closed the connection)
[22:32:26] *** Joins: terminalpusher (~terminalp@2a01:586:8e51:1:9e92:210c:f38:6810)
[22:32:35] *** Quits: funhouse54 (~funhouse@user/funhouse) (Client Quit)
[22:32:54] <terminalpusher> thanks
[22:33:11] *** Quits: csmiga (~Thunderbi@ec2-52-207-160-196.compute-1.amazonaws.com) (Quit: csmiga)
[22:33:51] *** Joins: c4017w__ (~c4017@209.52.68.8)
[22:34:03] *** Joins: ekathva (~ekathva@2001:999:51:be01:2c4a:6b25:b5d5:f2c9)
[22:36:46] *** Joins: skillbot1 (~skillbot@li1200-69.members.linode.com)
[22:36:47] *** Quits: skillbot1 (~skillbot@li1200-69.members.linode.com) (Changing host)
[22:36:47] *** Joins: skillbot1 (~skillbot@user/skillbot)
[22:36:47] *** ChanServ sets mode: +v skillbot1
[22:36:53] *** Joins: maret (~maret@nat-88-212-37-89.antik.sk)
[22:37:39] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[22:37:42] *** Joins: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net)
[22:38:29] *** Quits: skillbot (~skillbot@user/skillbot) (Remote host closed the connection)
[22:39:34] *** Quits: terminalpusher (~terminalp@2a01:586:8e51:1:9e92:210c:f38:6810) (Remote host closed the connection)
[22:39:50] *** Joins: chao (~stenno@user/stenno)
[22:40:24] *** Quits: The_Blode (uid537595@user/the-blode/x-7164444) (Quit: Connection closed for inactivity)
[22:40:54] *** Joins: alystair (~alystair@user/alystair)
[22:41:37] *** Quits: whatsupdoc (uid509081@hampstead.irccloud.com) (Ping timeout: 256 seconds)
[22:42:03] <ljharb> !numbers
[22:42:03] <jellobot> ljharb, The Number type has exactly 2^64 − 2^53 + 3 values, representing the double-precision 64-bit format IEEE 754 values as specified in the IEEE Standard for Binary Floating-Point Arithmetic, except that the 2^53 − 2 distinct “Not-a-Number” values of the IEEE Standard are represented as a single special NaN value. : http://www.2ality.com/2012/04/number-encoding.html
[22:42:09] <ljharb> if they ever come back, or for future reference.
[22:42:11] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 256 seconds)
[22:42:11] *** Quits: epolanski (uid312403@helmsley.irccloud.com) (Ping timeout: 256 seconds)
[22:42:23] *** Joins: Betal (~Betal@user/betal)
[22:42:24] *** Quits: dapinitial (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[22:43:13] *** Quits: teut (~teut@2401:4900:1c68:dbe1:6472:470:2bf2:ff35) (Quit: Client closed)
[22:44:27] *** Joins: whatsupdoc (uid509081@hampstead.irccloud.com)
[22:44:33] <SOMBRIO> I think I can see something now. basically, would need to build a websocket proxy object around browser client, as to allow nodejs to access the browser objects and then would build a jsonrpc proxy object around nodejs, as to allow game platform to access each player browser objects
[22:44:34] *** Quits: junebug (~junebug@2600:1700:3db0:2540:b872:5e21:461f:e72c) (Quit: Leaving)
[22:44:37] *** Joins: epolanski (uid312403@helmsley.irccloud.com)
[22:45:04] *** Quits: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:45:57] *** chao is now known as stenno
[22:46:19] <austincheney> thanks ljharb.  I need to make more use of the bot
[22:46:35] <ljharb> very few FAQs aren't in there :-)
[22:47:14] <austincheney> !help
[22:47:15] <jellobot> austincheney, For help, ask your question. Be patient. Code samples should be pasted in a paste service (see !paste). Tell us 1) what you want to happen, 2) what is actually happening, and 3) any error messages you find (see !describe and !debug).
[22:47:37] <stenno> its basically what is in the mdn article i linked earlier
[22:47:53] *** Joins: CoolerX (~CoolerX@user/coolerx)
[22:48:33] *** Joins: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com)
[22:50:16] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[22:54:21] *** Quits: epolanski (uid312403@helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[22:55:54] *** Quits: CoolerX (~CoolerX@user/coolerx) (Quit: Leaving)
[22:56:21] *** Quits: PsyStemUpdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net) (Ping timeout: 256 seconds)
[22:56:39] *** Joins: dimi1947 (~dimi1947@ppp005055093033.access.hol.gr)
[22:57:23] *** Quits: dimi1947 (~dimi1947@ppp005055093033.access.hol.gr) (Client Quit)
[22:57:30] <devslash> does anyone here have experience using the Ionic framework with react ?
[22:59:05] *** Joins: csmiga (~Thunderbi@ec2-52-207-160-196.compute-1.amazonaws.com)
[22:59:11] *** Quits: onosendi (~onosendi@user/onosendi) (Ping timeout: 256 seconds)
[22:59:35] *** Joins: onosendi (~onosendi@user/onosendi)
[22:59:44] *** Quits: onosendi (~onosendi@user/onosendi) (Client Quit)
[23:00:10] *** Joins: fweht (uid404746@lymington.irccloud.com)
[23:00:26] *** Quits: nomic (~nomic@185.192.69.3) (Quit: Leaving)
[23:03:07] <lf94> > By default, when the table name is not given, Sequelize automatically pluralizes the model name and uses that as the table name. This pluralization is done under the hood by a library called inflection, so that irregular plurals (such as person -> people) are computed correctly.
[23:03:11] <lf94> m(
[23:03:19] <lf94> Big nono.
[23:03:54] *** Joins: onosendi (~onosendi@user/onosendi)
[23:04:29] <devslash> I have a working React app that uses Bootstrap. I want to rewrite it as an Ionic app. I created a tabs template by running the command ionic start tabsApp tabs --type=react My app component looks like this: https://pastebin.com/6BXD24Qk I copied lines 60-62 from my non-Ionic React app into this Ionic based react app and I am getting an error type any is not assignable to never on line 61. This works fine in my non-Ionic app
[23:05:19] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[23:08:30] *** Joins: kakashiA1 (~kakashi@37.84.156.126)
[23:10:21] *** Quits: dan01 (~dan01@2a02:2f0f:311c:1500:b44a:f768:9ead:27f) (Ping timeout: 245 seconds)
[23:15:03] *** Quits: Ilyu (~quassel@166.215.82.79.rev.sfr.net) (Ping timeout: 256 seconds)
[23:16:28] *** Quits: advanced_malform (~nuke@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417) (Quit: Leaving.)
[23:19:27] *** Joins: Ilyu (~quassel@166.215.82.79.rev.sfr.net)
[23:20:26] *** Joins: trevors (~trevors@user/trevors)
[23:21:51] *** Joins: dan01 (~dan01@2a02:2f0f:311c:1500:b44a:f768:9ead:27f)
[23:23:20] <devslash> Is anyone around ?
[23:24:41] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Quit: Lost the game...)
[23:24:46] <stenno> yes?
[23:25:13] <devslash> I found a way to prevent the error from showing up but I am hoping someone can explain this to me. https://pastebin.com/6BXD24Qk On line 60, if I explicitly declare newStore as never, the error goes away
[23:25:25] <stenno> disclaimer: answering the question 'is anyone around' will NOT obligate me to answer any of your actual questions
[23:25:50] <stenno> !ask
[23:25:50] <jellobot> stenno, Don't ask to ask, nor if anyone is here or alive or uses something. Just ask your question. http://www.mikeash.com/getting_answers.html
[23:27:56] <onosendi> devslash: I told you last night, if you manage state in `App`, every time your state changes it will re-render every single component throughout your application. If you're not going to use Redux, at least use some sort of state management. Maybe React's `context` will be easier for you.
[23:28:17] <devslash> that is unrelated to this issue
[23:28:37] <devslash> and after considering it, I do not want to use Redux
[23:33:19] <onosendi> devslash: 'type any is not assignable to never' is a TypeScript error. Is this a TS file?
[23:34:13] *** Quits: ckdCreations (~ckdCreati@147.55.133.136) (Read error: Connection reset by peer)
[23:34:19] *** Joins: c4017w_ (~c4017@209.52.68.8)
[23:34:42] <devslash> the ionic app generatic a tsx file
[23:34:54] *** Joins: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net)
[23:36:45] <devslash> its like my ionic react app is treating all of my states like variables with the type never
[23:37:41] <onosendi> devslash: is TypeScript what you want?
[23:37:51] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 245 seconds)
[23:38:09] <devslash> i guess
[23:38:15] *** Joins: Schultz (~ivillarro@201.220.103.44)
[23:38:29] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:39:10] <onosendi> lol, so no, you don't. See if there's a flag to generate JavaScript files. I have a feeling `ionic start --type=react` does generate JavaScript files, but your 'tabsApp' is a TypeScript template. I don't know though. I know nothing of ionic.
[23:42:49] <devslash> ahh I found the problem
[23:43:36] *** Quits: Schultz (~ivillarro@201.220.103.44) (Ping timeout: 256 seconds)
[23:43:53] *** Joins: Harlin (~DonQixote@75-163-148-159.clsp.qwest.net)
[23:44:31] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[23:45:00] *** Quits: kakashiA1 (~kakashi@37.84.156.126) (Ping timeout: 250 seconds)
[23:46:13] *** Quits: SOMBRIO (~SOMBRIO@177.137.113.71) (Quit: Client closed)
[23:46:18] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[23:46:37] *** Joins: sgt_chuckles (~sgt_chuck@pool-71-190-209-205.nycmny.fios.verizon.net)
[23:52:56] *** Quits: Memory (~user_name@user/memory) (Remote host closed the connection)
[23:53:02] <flughafen> Is there a better way to do this filter?  It's not giving me an error , but it's not finding it.
[23:54:10] <flughafen> It's this... https://pptr.dev/#?product=Puppeteer&version=v13.1.3&show=api-browserpages
[23:55:11] <systemfault> Thanks for not showing your code, it really helps.
[23:55:42] <flughafen> systemfault: me?
[23:56:26] <onosendi> flughafen: where' the filter you're having issues with?
[23:56:46] *** Joins: SOMBRIO (~SOMBRIO@177.137.113.71)
[23:57:03] <flughafen> I want to return the object that has the url end with a string.
[23:57:09] *** Joins: PsyStemUpdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net)
[23:57:14] *** Quits: sgt_chuckles (~sgt_chuck@pool-71-190-209-205.nycmny.fios.verizon.net) (Quit: Client closed)
[23:57:49] <flughafen> onosendi: I loop through the urls() and they show.
[23:58:26] <stenno> that is.. fascinating
[23:58:39] <systemfault> flughafen: So, my car doesn't start... You can't look at it but It doesn't start, I turn the key and nothing happens, what is the problem?
[23:58:47] <stenno> i wanted to do the same lol
[23:59:16] <stenno> 'my car doesnt work, can you help me?' here is the car (shows promotional picture of car)
