[00:00:09] *** Quits: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) (Quit: Leaving.)
[00:01:28] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[00:06:36] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[00:06:54] *** Joins: joilerv (~joilerv@162.43.194.16)
[00:07:21] *** Quits: joilerv (~joilerv@162.43.194.16) (Client Quit)
[00:09:17] <PJBoy> last time I opened modern firefox, I wasn't too happy
[00:09:29] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:91c7:2a85:731c:7bf8)
[00:09:41] <rpav> correlation, or causation ðŸ¤”
[00:10:34] <PJBoy> "recommend extensions as your browse" "recommend features as you browse"
[00:10:36] <PJBoy> blurgh
[00:10:52] <PJBoy> all this crap in my home page, "recommended by pocket"
[00:11:07] <LordKalma> it's all opt out, but yeah
[00:11:23] <PJBoy> "allow firefox to install and run studies"!
[00:11:26] <PJBoy> fuck that shit
[00:11:33] <PJBoy> god there's so much of it
[00:11:44] <ashafq> What is a sane way to allocated aligned buffer in C++? std::aligned_alloc?
[00:11:49] <rpav> yeah the amount of crap on the default tab alone
[00:11:52] <PJBoy> "allow firefox to make personalised extension recommendations" it hurts
[00:12:03] <rpav> ashafq: yes
[00:12:21] <rpav> although isn't there a raii aligned_block or something
[00:12:24] <cbreak> ashafq: there's also std::align I think
[00:12:26] <ashafq> What is a sane wrapper to that function?
[00:12:42] <rpav> std::aligned_storage
[00:12:47] <PJBoy> ^
[00:12:54] <cbreak> rpav: that won't allocate anything
[00:13:09] <ashafq> Thanks
[00:13:10] <PJBoy> but you can allocate it with whatever
[00:13:16] <cbreak> and if you new it, it won't actually give you aligned storage beyond the basics, in some c++ standards
[00:13:29] <LordKalma> what's aligned storage?
[00:13:37] <rpav> oh, aligned_storage is kinda shit
[00:13:41] <PJBoy> storage declared with alignas
[00:13:54] <LordKalma> PJBoy, keep going...
[00:14:04] <ashafq> nvm... aligned_storage is useless
[00:14:13] <rpav> ashafq: there doesn't appear to be a good aligned wrapper, not surprisingly
[00:14:14] <ashafq> I'm sure it's useful for something else
[00:14:22] <cbreak> you can't rely on getting this to work for extended alignment
[00:14:26] <rpav> but ought to be trivial to write
[00:14:26] <LordKalma> new int[1000] // isn't this aligned?
[00:14:38] <PJBoy> it's aligned to 16 or whatever
[00:14:39] <rpav> LordKalma: it's int-aligned and you can't write non-ints to it
[00:14:41] <cbreak> in my own code, I used std::align: https://en.cppreference.com/w/cpp/memory/align
[00:14:44] <ashafq> template <typename T> T allocate(size_t n) { return reinterpret_cast<T>(std::aligned_alloc(CPU_CACHE_ALIGN, n * sizeof(T))); } // Is this insane?
[00:14:47] <PJBoy> but it could be aligned to 128 if you wanted
[00:14:54] <PJBoy> for SEE optimisations or whatever
[00:14:56] <PJBoy> SSE
[00:15:01] <rpav> LordKalma: the goal is to allocate aligned storage as bytes suitable for constructing other objects into
[00:15:08] <LordKalma> interesting
[00:15:09] <LordKalma> thanks
[00:15:30] <cbreak> LordKalma: what I needed was memory that is aligned enough to run AVX2 / AVX512 instructions in
[00:15:33] <rpav> also hypothetically new int[1000] might not be aligned to anything interesting, if an int is the size of a char
[00:15:40] <cbreak> and std::aligned_storage can't do that.
[00:15:45] <cbreak> new can't do it
[00:15:48] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[00:16:02] <cbreak> but new + std::align can
[00:16:29] <cbreak> rpav: it'll be aligned to the requirement of int :)
[00:16:35] <rpav> cbreak: yeah
[00:16:50] <PJBoy> new must give memory aligned to long long
[00:16:52] <PJBoy> or larger
[00:17:08] <ashafq> That's architecture dependent
[00:17:10] <PJBoy> and long long must be 16 bytes or larger, so
[00:17:16] <cbreak> rpav: the problem is that new std::aligned_storage<64, 64> might NOT be aligned to 64 byte boundaries
[00:17:20] <LordKalma> << std::alignment_of<int>::value << " " << sizeof(int)
[00:17:21] <geordi> 4 4
[00:17:22] <ashafq> long long is 8 bytes in amd64
[00:17:36] <LordKalma> << std::alignment_of<long long>::value << " " << sizeof(long long)
[00:17:37] <geordi> 8 8
[00:17:38] <rpav> cbreak: i don't know, but it otherwise doesn't seem to be particularly useful
[00:17:39] <PJBoy> erm yeah, 8
[00:17:42] <PJBoy> I miscalculated
[00:17:54] <cbreak> rpav: right, that's what I thought too.
[00:17:59] <PJBoy> so new gives you minimum alignment of 8
[00:18:08] <ville> ashafq: you're perhaps missing a * there in teh reinterpret_cast
[00:18:19] <cbreak> but https://en.cppreference.com/w/cpp/types/aligned_storage says "https://en.cppreference.com/w/cpp/types/aligned_storage"
[00:18:26] <cbreak> sorry, "It is implementation-defined whether any extended alignment is supported. "
[00:18:36] <ashafq> ville: I use it as allocate<stuff *>(100)
[00:18:49] <ville> ashafq: then your sizeof is wrong?
[00:19:06] <cbreak> ashafq: that's not good.
[00:19:16] <ashafq> cbreak: why?
[00:19:36] <LordKalma> I don't get it... the size of an AVX register is an integer multiple of sizeof(int) and since int has an aligment as big as its size.... then it doesn't matter for this specific case?
[00:19:40] <cbreak> ashafq: imagine allocating a buffer to something that is larger than a pointer
[00:19:50] <cbreak> ashafq: like std::string
[00:20:00] <cbreak> you compute n * sizeof(std::string*)
[00:20:07] <cbreak> which is not good
[00:20:10] <ashafq> oh.. yikes :)
[00:20:20] <ashafq> Thanks for catching that :)
[00:20:54] <cbreak> also, how about returning a std::unique_ptr<T>?
[00:21:02] <cbreak> or std::unique_ptr<T[]>?
[00:21:18] <ville> that would call dtors...
[00:21:19] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[00:21:19] <ashafq> Oh better idea... I need to learn C++ better :)
[00:21:26] <cbreak> ville: yes.
[00:21:44] <cbreak> it'd also requiring constructing the objects there
[00:22:01] <cbreak> or putting in a custom deleter (the one that's paired with aligned_alloc)
[00:22:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[00:22:46] <cbreak> seems it's std::free
[00:22:47] <ashafq> that would be std::free
[00:22:50] <ashafq> yes
[00:24:10] <cbreak> LordKalma: AVX _instructions_ have requirements for the alignment on the memory locations they work on
[00:24:15] <cbreak> not the AVX registers
[00:24:26] <cbreak> x86_64 is a CISC instruction set
[00:24:37] <cbreak> most instructions operate on a mixture of memory and register locations
[00:24:38] <ashafq> cbreak: they don't have to be aligned, AVX can work with unaligned pointers.
[00:24:46] <ashafq> cbreak: they are just slower.
[00:24:48] <cbreak> ashafq: depends
[00:24:56] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[00:24:57] <cbreak> I've seen many crashes because they can't.
[00:25:22] <cbreak> a long time ago, I even had a crash deep in a copy constructor of a Qt type...
[00:25:52] <cbreak> why? Because microsoft visual studio generated a trivial copy constructor that used sse (back then), and the object wasn't aligned enough for it...
[00:26:01] <LordKalma> cbreak, my question is, if you're doing like: `avx_function(pointer_to_4_ints)` it basically "just works" (TM) right? assuming 4 ints are tight into the expected buffer size
[00:26:06] <ville> pretty sure xbox required aligned memory for sse
[00:26:13] <cbreak> LordKalma: no
[00:26:21] <ashafq> cbreak: well, it depends on the instruction, there are unaligned variants of the loads for AVX
[00:26:23] <cbreak> usually, you'd use floats
[00:26:31] <cbreak> and those have to be aligned to the requirement of the instruction
[00:26:46] <LordKalma> cbreak, ahhh you need to align the *start* of the buffer to <avx_size>?
[00:26:59] <cbreak> LordKalma: of what ever the instruction requires
[00:27:08] <LordKalma> yes, we're making examples here
[00:27:12] <LordKalma> I think I get it now
[00:27:25] <cbreak> ashafq: yes. but those don't matter
[00:27:49] <ashafq> ARM has a harder requirements on alignment
[00:28:08] <cbreak> ashafq: what matters is that there's existing code that uses the aligned instructions, and that obviously only works with aligned data. For example I've encountered that inside intel's OneDNN, most recently
[00:28:29] <PJBoy> doesn't ARM have looser requirements on alignment?
[00:28:32] <cbreak> ended up having to add alignment support to my code, and later bump it up to 32 bytes (or even 64... don't remember), to support avx512
[00:28:36] <ashafq> yes, aligned instructions are typically 7x faster
[00:28:48] <ashafq> PJBoy: no, it's more strict about alignment.
[00:29:06] <ashafq> PJBoy: It will crash if you try to load an int from a char * boundary
[00:29:07] <PJBoy> right right
[00:29:11] <PJBoy> I was thinking of something else
[00:29:14] <ville> PJBoy: depends which way you mean "looser"
[00:30:00] <PJBoy> never heard of a misaligned access causing a crash though
[00:30:31] <ashafq> PJBoy: You never had to deal with "Bus Error"?
[00:30:35] <PJBoy> I know some of the instructions do rotated reads and some ignore the lower bits
[00:30:42] <PJBoy> nah
[00:30:47] <PJBoy> but I've only played with older ARMs
[00:30:54] <ashafq> I guess you're lucky :)
[00:31:39] <PJBoy> I guess they added an exception/interrupt for that
[00:32:48] <yolo> openwrt wants to move infra to github, some are aganist it because north korea and iran etc can not use github, it's like a niche oss project core team has to take care of world peace
[00:34:13] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 240 seconds)
[00:36:32] <cbreak> north korea and iran can mirror it... lazy gits... :D
[00:38:43] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:91c7:2a85:731c:7bf8) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[00:47:39] <ashafq> BM_avx_fft/256_mean         1076 ns         1077 ns            5
[00:47:59] <ashafq> ^ Looks like in 2021, you can compute a 256 point FFT in just over 1 microsecond
[00:48:07] <ashafq> er 2022 (typo)
[00:48:21] *** Quits: magla (~gelignite@55d483f5.access.ecotel.net) (Quit: Stay safe!)
[00:48:50] <ashafq> Well, that's AVX2. I don't have a AVX512 machine to write/test on
[00:49:38] <cbreak> there's also CuFFT
[00:49:57] <cbreak> ... if you can afford the hardware :(
[00:50:14] <ashafq> Well, that's good for computing large FFTs like 1 million points
[00:50:43] <ashafq> 256 is the sweet spot to fit all in L1 cache, I thought I optimize that use case :)
[00:50:52] <LordKalma> avx512? you make pizzas with that oven?
[00:51:35] <ashafq> LordKalma: With AVX512, I think you can compute 32 point FFT all in register.
[00:52:25] <PJBoy> has technology gone too far
[00:52:34] <ashafq> I was able to write a 16 point FFT only using YMM registers
[00:52:55] <ashafq> There are like 8 loads and 4 stores from memory
[00:54:19] <PJBoy> skynet's gonna be able to calculate so many approximate string matches with this
[01:02:32] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[01:03:48] *** Quits: malloy (~jimery@116.30.220.175) (Ping timeout: 250 seconds)
[01:05:58] *** Joins: malloy (~jimery@116.30.220.175)
[01:06:09] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[01:08:24] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[01:10:24] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[01:25:18] *** Quits: robod34 (~Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:27:03] *** Joins: Fairy (~Fairy@2001:464a:4992:0:55d4:c070:9ca0:8896)
[01:38:39] <CarloWood> (continued from #C++) m_render_graph is a member of the base class SynchronousWindow. And RenderGraph::create_render_pass(std::string const& name) does auto res = m_render_passes.try_emplace(name, utils::Badge<RenderGraph>{}, name); storing the render pass my name in a std::map of RenderPass objects, which are constructed here with just a name, too... Don't really see any reason why I can't do that before vulkan is
[01:38:39] <CarloWood> initialized.
[01:39:06] <CarloWood> by* name
[01:39:55] <BurumaSerafuku> m_ is the worst prefix ever
[01:40:18] <CarloWood> hm_?
[01:40:30] <kalven> CarloWood: so have create_render_pass return a little handle class that has the member functions you need?
[01:40:38] <kalven> it can wrap whatever pointer you have internally
[01:40:47] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:40:54] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:40:54] *** ChanServ sets mode: +v npaperbot
[01:42:16] <CarloWood> I honestly can't remember anymore why I am calling m_render_graph.create_render_pass in the first place :(.  That is, unless for debug reasons. All it does is make sure that each name is unique :/.  I am not even using m_render_passes anywhere else!
[01:42:39] <CarloWood> Maybe I did this in preparation to finding back the render pass objects by name.
[01:43:08] <CarloWood> But that is so not me :/.  I hate looking up things in a map, certainly by string. Too slow.
[01:43:47] <kalven> how often are they looked up?
[01:45:34] <CarloWood> I don't know yet. So far I worked on code that does a one-time initialization.  Just now I need to go over every existing render pass to get initialization data for beginning a command buffer, which is done every frame. Then I start to care about speed.
[01:46:39] <CarloWood> But even then, I'd (will) cache the data as much as possible(?). Certain things change from frame to frame - namely the actual images (memory buffers) being used - but a lot can be pre-calculated, including doing look ups.
[01:47:08] <kalven> sounds like you should be able to build some more efficent runtime structure from the graph
[01:47:27] <kalven> so that you avoid walking a bunch of objects when the graph structure hasn't changed
[01:47:45] <CarloWood> I don't want to do look ups by name anyway :/.  I just want to be able to use... hmm.
[01:48:39] <CarloWood> I was going to say: I want to be able to use the object themselves - but these objects are application specific (part of the derived class), and this generation is something that has to be done in the base class.
[01:49:11] <CarloWood> vulkan is just so incredibly difficult :(. I feel way too old for it.
[01:49:22] *** Quits: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net) (Ping timeout: 256 seconds)
[01:49:46] <CarloWood> objects* themselves (the rendergraph::RenderPass and rendergraph::Attachment objects)
[01:49:48] <kalven> writing a framework/abstraction for it without having a lot of hands on experience with it seems like a doomed effort
[01:51:16] <CarloWood> I'm designing the abstraction in order to get a grip on what is going on; I can't understand vulkan without abstracting the hell out of it; and I need to put that into code because otherwise I can't remember it all.
[01:51:53] <kalven> Personally, I can't write an abstraction without understanding what I'm working with. But that's just me
[01:52:21] <CarloWood> That is why this is so difficult I guess :P
[01:53:51] <CarloWood> But I don't think I have an option. The alternative would be to be able to read 1000 pages of complex documentation and simply be able to remember all of it and then analysis it in my head. But I can't get an overview (the tutorials are reallllly bad at showing how things are related, they only show a simplified way to call the API)
[01:54:44] <CarloWood> I concentrate on one (little) thing at a time and put what I understand in code. That way I slowly build my understanding.
[01:54:49] <kalven> well I don't know what you're writing, but there's a good chance one of the other APIs is better suited (like opengl)
[01:55:34] <CarloWood> Only if I am not able to do it; aka, too old. Might as well quite coding all together than though.
[01:55:41] <CarloWood> quit*
[01:55:55] <CarloWood> Anyway - back to the Current Problem.
[01:55:55] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[01:56:10] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 256 seconds)
[01:56:15] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:57:03] <CarloWood> At some point I will have code that starts a command buffer recording. That should happen in the application specific code too, aka in class Window.
[01:57:13] *** Quits: jsbach (~jsbach@2a01:c22:b171:2800:661:8ac5:856b:c920) (Ping timeout: 268 seconds)
[01:57:48] <CarloWood> So, I know which render pass the command buffer is for - and then I can call the library code to do some of the initialization; but already passing the RenderPass object to it.
[01:58:35] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[01:58:45] <CarloWood> I can only actually pass the RenderPass object if that is a member of the Window class, and not a temporary reference in a member function that was executed.
[01:59:28] <CarloWood> I now think that at least the render passes can be constructed at constructor time, because it seems all they store initially is a (debug) name.
[02:01:29] <CarloWood> But, I do not want to re-construct the vector(s) that I need to construct a vk::StructureChain<vk::RenderPassBeginInfo, vk::RenderPassAttachmentBeginInfo> every frame - then extracting the vk::RenderPassBeginInfo from that and pass that to beginRenderPass(..) - which HAS to be called every frame.
[02:04:51] *** Quits: luizfrds (~Luiz@152.250.243.147) (Read error: Connection reset by peer)
[02:07:07] <CarloWood> In the simplest case - having the rendergraph::RenderPass object (a rather abstract class, representing a node in the rendergraph) I should be able to do:  render_pass.get_begin_info(framebuffer, extent, attachment_image_views);
[02:08:55] <CarloWood> but... I wish to automate as much as possible. Knowing the render_pass, I should know the framebuffer already I think... the extent can default to the swapchain extent, and the especially the attachment_image_views are too hard to do manually :/.  The whole idea of the render graph is so I do NOT have to rethink that every time.
[02:09:42] <CarloWood> That is - I could easily generate a vector with the rendergraph::Attachment objects - I just need to find a way to find the real image views from there.
[02:10:36] <CarloWood> For the current code I am doing this manually, and had:
[02:10:39] <CarloWood>     std::array<vk::ImageView, 2> attachments = {
[02:10:39] <CarloWood>       *m_current_frame.m_frame_resources->m_depth_attachment.m_image_view,
[02:10:39] <CarloWood>       swapchain().vh_current_image_view()
[02:10:39] <CarloWood>     };
[02:13:13] <CarloWood> but that was for a render graph without a imgui pass. This would render the main stuff, not the imgui - and we now are not necessarily rendering to the acquired swapchain image (we are, but that aside).
[02:13:23] <CarloWood> Aka, from the render graph (code):
[02:13:38] <CarloWood>     m_render_graph = main_pass[~depth]->stores(~output) >> imgui_pass->stores(output);
[02:14:04] *** Joins: elb0w (~elb0w@pool-98-109-49-7.nwrknj.fios.verizon.net)
[02:15:39] <CarloWood> this should render to main_pass, which knows about two attachments: depth and output. I am not 100% but just from the fact that the depth attachment is -well- a depth/stencil attachment, I can conclude that the actual image is *m_current_frame.m_frame_resources->m_depth_attachment.m_image_view (what else could it be? Unless I have two depth attachments at some point :/).
[02:16:02] <CarloWood> The second attachment 'output' is created with:
[02:16:09] <CarloWood>     auto& output = swapchain().presentation_attachment();
[02:16:46] *** Quits: nojhan (uid443807@id-443807.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[02:17:22] <CarloWood> from which I should know it is "the swapchain" and hence use "swapchain().vh_current_image_view()".  Both (depth and color) cycle over different attachments (image views) each frame of pools with a different size.
[02:18:40] <CarloWood> Now both, depth and swapchain, are special cases... In order to be able to design this better I should have an example where there is some attachment involved that is neither.
[02:29:58] *** Joins: gehn1 (~gehn@user/gehn)
[02:32:51] *** Quits: gehn (~gehn@user/gehn) (Ping timeout: 256 seconds)
[02:42:32] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:42:44] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[02:45:59] *** gehn1 is now known as gehn
[02:50:38] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[03:03:20] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[03:03:35] *** Quits: AmR| (~AmREiSa@156.207.253.69) (Quit: Konversation terminated!)
[03:04:15] *** Joins: CaCode (~CaCode@user/cacode)
[03:28:03] *** Quits: DSpider (DSpider@2a02:2f00:1ff:ffff::646c:68ff) (Quit: Leaving)
[03:29:56] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[03:35:10] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[03:40:41] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.4)
[03:45:03] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[03:52:32] *** Quits: emerent (~quassel@p200300cd5724fde6ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[03:52:32] *** Joins: chozorho (~chozorho@2601:146:300:c30::d584)
[03:54:48] *** Joins: ferdna (~ferdna@user/ferdna)
[03:55:27] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[03:59:20] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[04:00:36] *** Quits: CaCode (~CaCode@user/cacode) (Quit: Leaving)
[04:00:37] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[04:02:49] *** Quits: mathe8787 (~wellmathe@85.251.70.233.dyn.user.ono.com) (Remote host closed the connection)
[04:03:01] *** Joins: mathe8787 (~wellmathe@85.251.70.233.dyn.user.ono.com)
[04:05:11] *** Joins: emerent (~quassel@p200300cd57025366ba27ebfffed28a59.dip0.t-ipconnect.de)
[04:09:37] *** Joins: Figworm (FiggyWitIt@user/figworm)
[04:09:49] *** Quits: emerent (~quassel@p200300cd57025366ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[04:10:31] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:10:36] *** Joins: jkaye_ (~qicruser@2604:ca00:158:98c7::662:b620)
[04:12:51] *** Joins: Led_Zeppelin2 (~user@cpe-68-172-241-89.nj.res.rr.com)
[04:12:59] <Led_Zeppelin2> any vcpkg users here?
[04:13:47] *** Quits: jkaye_ (~qicruser@2604:ca00:158:98c7::662:b620) (Read error: Connection reset by peer)
[04:13:53] *** Joins: emerent (~quassel@p5b265a25.dip0.t-ipconnect.de)
[04:14:15] *** Joins: jkaye_ (~qicruser@2604:ca00:158:98c7::662:b620)
[04:18:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[04:20:49] *** Quits: jkaye_ (~qicruser@2604:ca00:158:98c7::662:b620) (Read error: Connection reset by peer)
[04:25:27] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[04:25:43] <MaddHatter> what is this doing? I don't understand what the final "template" means:
[04:25:44] <MaddHatter> template<class A, class T> struct allocator_rebind { typedef typename A::template rebind<T>::other type; };
[04:26:08] *** Joins: frost (~frost@user/frost)
[04:28:58] <kalven> it tells the compiler that rebind is a template
[04:29:54] <MaddHatter> that's all? So I should be able to find a definition for rebind somewhere then. (I haven't, so far.)
[04:31:22] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[04:31:36] <kalven> https://en.cppreference.com/w/cpp/memory/allocator
[04:32:09] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzzâ€¦)
[04:32:43] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a98c:b4fd:85b3:2536)
[04:32:48] <MaddHatter> this is from boost, and the std:: one is removed since c++20, so it's definitely not that
[04:32:59] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a98c:b4fd:85b3:2536) (Remote host closed the connection)
[04:34:07] <kalven> and it's entirely unrelated to the old rebind functionality in the standard allocator?
[04:35:12] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[04:37:48] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:38:50] <MaddHatter> not unrelated, just not the rebind I'm looking for. Looks like boost's default allocator defines it, so the problem is in what's trying to instantiate allocator_rebind with an invalid A
[04:49:00] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[04:53:57] *** Quits: jkaye (~jkaye@2601:281:8300:7530:d171:6c14:e395:f91b) (Ping timeout: 240 seconds)
[05:00:22] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a98c:b4fd:85b3:2536)
[05:05:51] *** Quits: Burgundy (~yomon@82.76.72.88) (Ping timeout: 256 seconds)
[05:06:53] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[05:07:33] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[05:11:38] *** smallvil_ is now known as smallville7123
[05:13:22] *** Quits: mathe8787 (~wellmathe@85.251.70.233.dyn.user.ono.com) (Ping timeout: 256 seconds)
[05:23:31] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[05:23:59] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[05:24:19] *** Joins: seninha (~seninha@user/seninha)
[05:27:02] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[05:29:21] *** Joins: frost (~frost@user/frost)
[05:35:25] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[05:39:13] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 268 seconds)
[05:40:48] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:40:56] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:40:56] *** ChanServ sets mode: +v npaperbot
[05:50:14] *** Quits: malloy (~jimery@116.30.220.175) (Ping timeout: 250 seconds)
[05:51:29] *** Quits: Brewster (~Brewster@104.145.226.5) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[05:51:44] *** Joins: Brewster (~Brewster@104.145.226.5)
[05:51:45] *** Joins: ethoxy (~root@bison.sh3ll.ru)
[05:52:21] *** Joins: malloy (~jimery@116.30.220.175)
[05:54:57] *** Joins: frost (~frost@user/frost)
[05:56:32] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[05:58:18] *** Joins: Tokamak_ (~Tokamak@172.58.188.35)
[05:59:20] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Read error: Connection reset by peer)
[06:00:37] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[06:01:44] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[06:03:49] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Ping timeout: 240 seconds)
[06:05:36] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[06:11:38] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[06:13:56] *** Joins: frost (~frost@user/frost)
[06:15:45] *** Joins: Ivii (~Ivyy@2001:a62:4c3:8e01:60fb:64b1:ca3d:1cb1)
[06:15:51] *** Quits: Ivii (~Ivyy@2001:a62:4c3:8e01:60fb:64b1:ca3d:1cb1) (Remote host closed the connection)
[06:25:38] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[06:28:59] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:29:49] *** Quits: Fairy (~Fairy@2001:464a:4992:0:55d4:c070:9ca0:8896) (Ping timeout: 240 seconds)
[06:38:49] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[06:39:31] *** Quits: udet (~udet@ve603.venus.servdiscount-customer.com) (Remote host closed the connection)
[06:39:37] *** Joins: udet (~udet@ve603.venus.servdiscount-customer.com)
[06:46:11] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:46:43] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[06:49:00] *** Quits: teepee (~teepee@openscad/teepee) (Ping timeout: 276 seconds)
[06:50:37] *** Joins: teepee (~teepee@openscad/teepee)
[06:51:00] *** Joins: udet_ (~udet@ve603.venus.servdiscount-customer.com)
[06:51:04] *** Quits: udet (~udet@ve603.venus.servdiscount-customer.com) (Read error: Connection reset by peer)
[06:51:12] *** Joins: frost (~frost@user/frost)
[06:51:37] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[06:55:49] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Client Quit)
[06:58:16] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[07:03:26] *** Joins: jkaye_ (~qicruser@2604:ca00:158:98c7::662:b620)
[07:05:04] * yolo just found jthread
[07:11:25] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[07:12:20] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[07:21:26] *** Joins: adeliktas9 (~adeliktas@i59F5F66D.versanet.de)
[07:21:55] *** Joins: frost (~frost@user/frost)
[07:22:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[07:22:44] <yolo> A std::jthread instance represents an automatically joining and cooperatively cancellable thread. std::jthread has an exception-safe thread termination flow compared to std::thread and can replace it in most situations with little or no code changes.
[07:23:01] *** Quits: adeliktas (~adeliktas@i59F525D5.versanet.de) (Ping timeout: 240 seconds)
[07:23:01] *** adeliktas9 is now known as adeliktas
[07:26:57] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[07:27:24] <yolo> jthread = raii-thread, sort of, nice
[07:27:44] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[07:31:46] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:accc:f920:44e1:6c44)
[07:31:46] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:accc:f920:44e1:6c44) (Changing host)
[07:31:46] *** Joins: skapata (~Skapata@user/skapata)
[07:32:33] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[07:34:43] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:35:54] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[07:38:26] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[07:39:34] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[07:49:06] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[07:55:04] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[07:59:42] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[08:01:54] *** Joins: smeso (~smeso@user/smeso)
[08:06:18] *** Quits: Tokamak_ (~Tokamak@172.58.188.35) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[08:07:27] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Remote host closed the connection)
[08:16:57] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[08:19:24] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[08:20:07] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:23:36] *** Quits: jkaye_ (~qicruser@2604:ca00:158:98c7::662:b620) (Read error: Connection reset by peer)
[08:25:52] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[08:27:10] *** Joins: Fairy (~Fairy@2001:464a:4992:0:fddd:e672:32ce:4073)
[08:29:15] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[08:32:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[08:35:32] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[08:43:49] *** Joins: noarb- (~noarb@user/noarb)
[08:44:35] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 256 seconds)
[08:45:53] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[08:48:32] *** Quits: chozorho (~chozorho@2601:146:300:c30::d584) (Ping timeout: 268 seconds)
[08:48:46] *** Quits: malloy (~jimery@116.30.220.175) (Ping timeout: 250 seconds)
[08:49:09] *** Joins: chozorho (~chozorho@2601:146:300:c30::a060)
[08:49:51] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[08:50:17] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[08:50:40] *** Joins: malloy (~jimery@116.30.220.175)
[08:52:02] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Client Quit)
[08:53:33] *** Joins: noarb (~noarb@user/noarb)
[08:54:22] *** Quits: noarb- (~noarb@user/noarb) (Ping timeout: 256 seconds)
[08:57:55] *** Joins: rajkosto (~rajkosto@178-221-112-107.dynamic.isp.telekom.rs)
[09:06:07] *** Joins: supernova (~quassel@2405:9800:ba11:6207:9b58:d180:12a8:f790)
[09:11:25] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[09:30:04] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[09:30:30] <supernova> can anybody help me to find erorr
[09:30:45] <supernova> i have big programm within 11 files, its virtual function concern
[09:31:47] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:35:01] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[09:38:25] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[09:39:45] <Juliu> 11 files?
[09:40:48] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:41:00] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:41:00] *** ChanServ sets mode: +v npaperbot
[09:41:32] <supernova> yes
[09:43:26] <Juliu> If you can't locate the error a bit narrower, then that's a bit much
[09:44:06] <supernova> its one error and you easy will find it
[09:44:19] <supernova> if i hide virtual functions to comments it works
[09:44:45] <Juliu> What do you mean with the last sentence?
[09:46:36] <TinoDidriksen> Reduce the problem to ~3 files. It shouldn't take many lines of code to reproduce it.
[09:46:54] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[09:46:58] <supernova> ok
[09:49:33] *** Joins: frost (~frost@user/frost)
[09:54:05] <supernova> https://wandbox.org/permlink/Yg7NVArYEbEF8bdS
[09:54:49] <supernova> Could not reduce to 3, cuz this case of inheritance with virtual functions
[09:55:11] <TinoDidriksen> But you don't need all those member functions.
[09:56:08] <supernova> yes
[09:57:04] *** Joins: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net)
[10:01:01] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[10:01:52] <kalven> you have both a virtual print and a non-virtual print in the same class
[10:05:24] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[10:06:42] <supernova> in Base Class Employee?
[10:07:43] <kalven> yes
[10:08:51] <supernova> yes, i have thought that i have to rewrite to exclude this kind of dirt
[10:08:53] <Alipha> I refuse to look at code that's left-justified
[10:09:18] <supernova> thank you so much! I just add this print manually, when were integrating Date class objects
[10:12:08] <johnny> wow.. i've never seen so much code in brackets of any kind that's pushed to the left like that
[10:12:20] <johnny> although i guess i get lucky in which code i look at
[10:12:36] <kalven> would be nice if wandbox had clang-format built in
[10:13:54] <MaddHatter> and let you set your clang-format prefs as a cookie
[10:14:19] <MaddHatter> the problem is probably that it could change line numbers though, right?
[10:15:11] *** Joins: AmR (~AmREiSa@156.207.253.69)
[10:16:26] <supernova> usr/bin/ld: /tmp/ccc5N3Xp.o: in function `main':
[10:16:26] <supernova> Main.cpp:(.text+0xed): undefined reference to `CommissionEmployee::CommissionEmployee give me that
[10:16:48] <MaddHatter> you have a constructor in the header, but never implemented the function
[10:17:18] <MaddHatter> (declared in the header, I mean)
[10:18:05] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:19:35] <supernova> It meant to hold temporary data for derived classes, in previous cases it normally executed
[10:22:55] <supernova> undefined reference to `vtable for CommissionEmployee' this second part for error output
[10:25:59] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:7dc8:1477:cf9c:6f84)
[10:29:03] <MaddHatter> it doesn't have a vtable because it couldn't construct the object because the constructor was missing
[10:29:49] *** Quits: Fairy (~Fairy@2001:464a:4992:0:fddd:e672:32ce:4073) (Ping timeout: 240 seconds)
[10:30:45] <MaddHatter> I guess the other option is that you didn't include CommissionEmployee.o in the linker's command
[10:31:22] <supernova> lol
[10:33:26] <supernova> undefined reference to `vtable for CommissionEmployee' this second part for error output
[10:33:36] <supernova> sorry, this is missclick
[10:35:05] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Ping timeout: 256 seconds)
[10:36:51] <supernova> Thanks! Now I need to research and find good way to automatically find this "dirt" errors to save huge amount of time :)
[10:37:31] <supernova> I need to swap between windows and linux a lot, so i use basic linux and notepad, now i think i MUST use IDE for this kind of checks. Visual Code good for that?
[10:38:27] <MaddHatter> I mostly use vim myself, but vscode is one of the most popular editors
[10:39:22] *** Quits: chozorho (~chozorho@2601:146:300:c30::a060) (Quit: WeeChat 3.0)
[10:39:39] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[10:40:27] <johnny> supernova, i use vscode on linux, but with clangd and not the microsoft c/c++ extension. although it's probably improved in the meantime
[10:40:37] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[10:40:46] <johnny> i should check back into it again
[10:41:38] <ville> just about any code editor these days is configurable to give you "squiggly lines" error indicators in the editor code window as you type
[10:42:22] <johnny> it used to be kind of annoying to setup vim to do that though for a fair amount of languages, but now that you can just rely on lsp.. it's probably easier
[10:43:13] <johnny> i quit using plain vim because it felt like it took seconds to save changes to python files with jedi and i got tired of messin with it
[10:46:57] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:7dc8:1477:cf9c:6f84) (Ping timeout: 240 seconds)
[10:47:50] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[11:06:49] <supernova> if i was using vscode, it would find these things above? (missing -o file and double print)?
[11:08:31] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[11:09:37] *** Quits: rajkosto (~rajkosto@178-221-112-107.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[11:11:15] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[11:14:20] *** Quits: etolier (~somewhere@122.199.46.54) (Ping timeout: 256 seconds)
[11:16:59] <johnny> no.. you still need a build system
[11:17:19] *** Joins: etolier (~somewhere@122.199.46.54)
[11:17:20] <johnny> cmake is a popular choice, but there's also meson
[11:17:32] *** Joins: frost (~frost@user/frost)
[11:17:42] *** Joins: namo (~nomo@95.87.208.95)
[11:18:02] <johnny> well none of those actually help directly with missing -o, but they abstract over writing the -o directly. but rather let you specify your dependencies and thentake care of it
[11:18:36] <johnny> you'll still need to know about such things no matter what though.. that's just how it is in C++
[11:21:03] *** Joins: jsbach (~jsbach@2a01:c22:acc2:e00:b54:b457:7345:29c8)
[11:21:07] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[11:23:19] <ville> any conforming compiler will error out on declaring the same function non-virtual and virtual. and you can configure code editors to use "a real compiler" to drive their error display features. so yes
[11:23:49] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[11:25:40] <ville> however, to get an editor to that point, you may have had to have compiled the code succesfully at least once. to do that you probably want some kind of build system that describes how your project is built
[11:28:30] <ville> due to c++'s "complexities" the tooling that tries to understand c++ source sometimes needs what's called a compilation database. a file called compile_commands.json. and to produce that you need to build your code with most build systems. some may produce it with a "dry run" as well where they don't really do the build.
[11:30:00] <supernova> it seems to hard for me
[11:30:08] <supernova> too* hard :)
[11:30:56] <supernova> Any other decent options besides VScode for linux?
[11:31:14] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:40f5:2114:f40e:465b)
[11:31:35] * comrad throws in the occasional emacs ;)
[11:32:24] <ville> an IDE probably offers a more "packaged" approach than what are considered editors. for an IDE there's probably only two reasonable choices: kdevelop and qtcreator
[11:33:07] *** Joins: nojhan (uid443807@id-443807.lymington.irccloud.com)
[11:33:26] <ville> now some would also name some java-based IDEs, but they are non-starters for me
[11:33:49] <ville> comrad: emacs is clearly not going to be what he's after
[11:34:44] <comrad> well, especially if you want some non standard behaviour emacs could be a solution
[11:34:50] *** Joins: AmR| (~AmREiSa@41.36.185.103)
[11:34:59] <comrad> just because all its features are available programmatically
[11:35:09] *** Quits: AmR (~AmREiSa@156.207.253.69) (Ping timeout: 256 seconds)
[11:35:09] <comrad> but it is of course not an out of the box solution
[11:35:34] <ville> he is not looking for non-standard. he is looking for ready-to-go
[11:36:31] <ville> and also tricking people into using emacs under the guise of its "extensibility" is just donw right mean. you are tricking them into programming in a lisp variant
[11:36:32] <comrad> well, non default behaviour and ready-to-go just contradict
[11:36:40] <ville> no they don't
[11:36:45] <comrad> heh, yeah programming in lisp is mean
[11:36:55] <comrad> ville: so then what is your solution?
[11:36:58] <ville> you can be perfectly customizable with sane defaults
[11:37:00] <supernova> so kdeveop, qtreactor, emacs?
[11:37:28] <comrad> supernova: i found that vscode is pretty much customizable and has tons of plugins, probably your best shot
[11:37:43] <ville> supernova: emacs is not what you're looking for. you will still have to understand what a build system is, how to configure emacs' to be a decent c++ environment.
[11:37:45] <comrad> can you use the plugins with the vschromium?
[11:37:57] <supernova> is there any pros who works with simple notepad?
[11:38:03] <supernova> or notepad is only for complete beginners?
[11:38:12] <comrad> notepad is a simple texteditor
[11:38:14] <ville> comrad: my solution to what? to what supernova is asking: kdevelop or qtcreator
[11:39:05] <ville> comrad: to emacs sucking out of the box? i don't know if there is an emacs "distribution" that targets the c and c++ developers
[11:39:21] <ville> err beginner c and c++ developers
[11:39:54] <MaddHatter> don't forget visual studio, unless we're limited to linux
[11:40:05] <ville> MaddHatter: yes he asked linux
[11:40:10] <MaddHatter> ah, okay
[11:40:12] <comrad> visual studio does work with a linux box underneath
[11:40:34] <MaddHatter> it does, and fairly well considering, but that's more setup and we're looking for a "just click and go" solution
[11:41:18] <comrad> ville: most emacs setups are pretty universal, im pointing to spacemacs or some extension of that
[11:41:22] <supernova> ok, i will try all these apps, growing from starter VS to more sophisticated
[11:41:44] <comrad> supernova: if you are a novice you should go for the "default" apps per se
[11:42:08] <comrad> but starting from ground up is a good advice, as you should learn how the tools work before you automate them by more tools
[11:42:30] <supernova> im going to need QT soon, so QT creator is probably good solution
[11:42:37] <ville> comrad: spacemacs doesn't solve the "c or c++ in emacs" problem. it won't have lsp configured and button: "new project" that creates a sane project layout with build system done and you can just hit "build"
[11:42:42] <comrad> the reason for a build system like cmake or meson comes easier into mind when you find that your custom build batch file just dont bring it anymore
[11:43:06] <comrad> supernova: yeah, QTcreator would be your to go tool then
[11:43:18] <ville> comrad: emacs sucks. i know. i've used it for over 25 years..
[11:43:52] <comrad> heh, then you're addicted :)
[11:44:10] <ville> no. i am just being held hostage
[11:44:20] <comrad> i thought that was vim's approach?
[11:46:13] <ville> i am not sure exiting emacs is simpler/more intuitive. C-x C-c isn't exactly the first thing people try
[11:46:24] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[11:46:31] <comrad> no not really
[11:46:45] <ville> plus you've the whole: "where did my emacs go" with C-z by default
[11:47:08] <ville> in conclusion: emacs sucks
[11:47:14] <comrad> i know what you mean about emacs. still it is a tool with certain traits that can become handy if your needs require it
[11:47:24] <comrad> ville: well, what software does not suck?
[11:47:40] <comrad> with that approach we should all go back to punch cards
[11:47:51] *** Joins: robod34 (~Username@79.113.195.239)
[11:49:58] <ville> not sure how you made that leap, but ok
[11:50:13] <comrad> i have a emacs "shortcut" for it :-P
[11:54:09] <ville> it's just funny to watch the emacs people discuss the defaults every year or N years, and nothing ever coming out of it. so far i don't think anyone's suggested copying what blender did
[11:55:46] <ville> if you don't know what blender is, it's a 3d graphics program, and the industry standard in graphics is that left mouse button is used for "everything" and blender used right mouse button by default
[11:56:53] <ville> at some point blender people submitted and made it something you can choose and it now defaults to left-click. the old blender users can now get their right-click behaviour back with single setting
[11:57:43] <comrad> i think they even used blender for video editing
[11:57:54] <ville> yes it has a video sequence editor built in
[11:58:03] <ville> it's an
[11:59:39] <comrad> i use multiple editors often a tool for a specific job
[12:00:05] <comrad> emacs and code completion never worked for me, so i dont use it for deeper development stuff
[12:00:53] <comrad> but its programmatibility once enabled me to build a special toolchain for a specific problem i faced
[12:01:04] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[12:01:18] <ville> you can get a decent setup these days for c++. the lsp-mode package is fairly alright to get going
[12:02:02] <comrad> netbeans shows me my unit test results in a neat nice overview
[12:02:26] <comrad> visual studio code prints the test result above the tested method and has an overview
[12:02:33] <comrad> with emacs i would have to do it myself
[12:03:19] <comrad> i like certain aspects of emacs, but i never get the "i use emacs for everything"-mentality
[12:03:53] <AmR|> Can I check if struct defined or not ?
[12:03:59] *** AmR| is now known as AmR
[12:04:22] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:05:25] <ville> if your build system exposes a target to run tests, then it should be pretty simple to run tests from emacs
[12:06:22] <ville> or i guess if it doesn't you'd then have some other script that runs them, which would be just as easy
[12:06:51] <ville> ...but as always requires some configuration
[12:12:19] <comrad> i probably would need a plugin that understands the output of junit or something
[12:12:53] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[12:14:26] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[12:14:46] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[12:16:21] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[12:17:21] *** Joins: mathe8787 (~wellmathe@85.251.70.233.dyn.user.ono.com)
[12:22:22] *** Joins: Xardas (~Xardas@149.233.51.127)
[12:22:42] <very_sneaky> i actually think there's a lot of value in going for something that's not configured by default, i.e. vim
[12:23:00] <very_sneaky> forces you to learn about the language ecosystem that's sometimes obfuscated by IDEs
[12:23:31] <very_sneaky> that was certainly my experience moving from eclipse to sublime text when i was using java
[12:24:18] <very_sneaky> I've found configuring vim to be marginally more effort than configuring visual studio - easier in some cases, and i haven't had to learn where everything is configured in some random bespoke gui
[12:24:38] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[12:25:51] <very_sneaky> vim + ycm or coc with clangd/clang-tidy/conan integrations has worked really well. the only obvious deficiency that i can note is in debugging, but that might just be that I'm not super familiar with gdb yet. Termdebug works reasonably well otherwise
[12:27:31] *** Joins: Fairy (~Fairy@2001:464a:4992:0:fddd:e672:32ce:4073)
[12:27:32] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[12:27:51] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[12:31:58] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[12:35:22] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[12:36:53] <ville> there's a time and place for everything. front loading all of that is probably not a good idea. a person hears "games are made with c++" and decides to see what's it like and fins out that they now myst learn 2 other programming languagages before they can even get their editor up and running
[12:36:59] <ville> err must
[12:37:13] <ville> err finds
[12:47:49] *** Quits: HvszrStykp (~X@81.171.62.86) (Ping timeout: 240 seconds)
[12:49:14] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[12:51:54] *** Joins: plastico (~plastico@neomutt/plastico)
[13:00:45] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[13:00:52] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[13:03:49] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[13:05:24] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[13:05:52] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:e2c5:351b:e230:7e1b:b4a6)
[13:08:57] *** Quits: p-i- (~Ohmu@2403:6200:8978:e2c5:30ae:97d7:8d1d:fbf3) (Ping timeout: 240 seconds)
[13:09:30] *** Joins: oknenavin (~nomo@95.87.208.95)
[13:10:47] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[13:10:55] *** Quits: namo (~nomo@95.87.208.95) (Ping timeout: 256 seconds)
[13:15:02] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[13:16:13] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[13:20:02] <LordKalma> laughs in Unityu
[13:20:08] <LordKalma> *Unity, but anyway
[13:24:02] *** Quits: johnny (~johnny@user/johnny) (Remote host closed the connection)
[13:27:48] *** Joins: johnny (~johnny@user/johnny)
[13:28:31] *** Joins: jkaye_ (~qicruser@2601:281:8300:7530:81c9:15c5:1001:5f30)
[13:29:07] *** Quits: jkaye_ (~qicruser@2601:281:8300:7530:81c9:15c5:1001:5f30) (Read error: Connection reset by peer)
[13:35:08] <leduyquang753> I just use `vim` without any plugins.
[13:36:09] *** Quits: Cyp (~cyp@213.237.85.9) (Remote host closed the connection)
[13:36:33] *** Joins: Cyp (~cyp@213.237.85.9)
[13:39:26] *** Quits: Cyp (~cyp@213.237.85.9) (Read error: Connection reset by peer)
[13:40:49] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:40:58] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:40:58] *** ChanServ sets mode: +v npaperbot
[13:41:28] *** Joins: Cyp (~cyp@213.237.85.9)
[13:46:03] *** Quits: Cyp (~cyp@213.237.85.9) (Read error: Connection reset by peer)
[13:47:38] *** Joins: Cyp (~cyp@213.237.85.9)
[13:56:05] <LordKalma> hardcore
[13:56:26] <Haohmaru> h4x0rz
[13:57:48] *** Joins: frost (~frost@user/frost)
[14:01:25] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[14:02:29] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[14:07:07] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[14:09:33] *** Quits: Cyp (~cyp@213.237.85.9) (Excess Flood)
[14:10:05] *** Joins: Cyp (~cyp@213.237.85.9)
[14:12:31] *** Joins: frost (~frost@user/frost)
[14:14:56] *** Joins: luc4 (~luca@151.36.200.246)
[14:17:34] <AmR> How I can debug QSqlQuery for more info ? My select not work at all, And every thing run right, But no result :(
[14:19:37] <Haohmaru> are there no error messages anywhere?
[14:21:31] <Haohmaru> hm, wasn't it possible to use an class::method() in a static_assert() ?!
[14:22:12] <Haohmaru> bluh
[14:23:47] <AmR> Haohmaru: I try but I don't find any thing
[14:24:27] <Haohmaru> i mean, if the thing does have error/status messages, and then whether they say "the operation was all okay" or "there was some error, oops"
[14:24:58] <Haohmaru> that's the first level of figuring out what's going on
[14:25:08] <AmR> I know my code "  " bool test = query.prepare( "SELECT * FROM Trainee_Table WHERE TraineeName = \":traineeName\";" );     query.bindValue( ":traineeName", QString::fromStdString( value ) );
[14:25:43] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[14:30:13] *** Quits: Fairy (~Fairy@2001:464a:4992:0:fddd:e672:32ce:4073) (Ping timeout: 240 seconds)
[14:30:33] <supernova> for debugging purposes considering Assembler entry level course, possibly book or videos (book pref)
[14:30:33] <supernova> Please advise
[14:31:52] <johnny> AmR, use some of the QT_LOGGING env variable maybe??
[14:32:00] <LordKalma> for debugging purposes use a debugger and debug builds
[14:32:02] <johnny> i forgot what the variable is called
[14:32:05] *** Joins: frost (~frost@user/frost)
[14:32:07] <LordKalma> not assembly. this isn't the matrix
[14:32:28] <johnny> depends on how far down you're going .. :( but you probably don't need assembly
[14:37:33] <Haohmaru> can't a constexpr function return a constexpr-grade temporary object?
[14:37:52] * Haohmaru has forgotten how to constexpr
[14:40:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[14:44:13] *** Quits: mathe8787 (~wellmathe@85.251.70.233.dyn.user.ono.com) (Ping timeout: 240 seconds)
[14:46:00] *** Joins: ravan_ (~ravan@42.201.198.151)
[14:46:00] *** Quits: ravan_ (~ravan@42.201.198.151) (Changing host)
[14:46:00] *** Joins: ravan_ (~ravan@user/ravan)
[14:48:32] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 256 seconds)
[14:49:14] <AmR> I do same with ID And work :( I don't know why ? query.prepare( "SELECT * FROM Trainee_Table WHERE idTrainee = :idNumber;" ); query.bindValue( ":idNumber", QString::fromStdString( value ) );
[14:50:43] <Haohmaru> do i see a difference in the usage of \" or what
[14:51:14] *** Quits: mitch0 (~mitch@193-226-249-203.pool.digikabel.hu) (Quit: leaving)
[14:51:35] <AmR> Haohmaru: 1st I working with text 2nd I working with int
[14:51:43] <Haohmaru> *shrug* then
[14:52:02] <AmR> and I test remove \" it's same
[14:52:30] *** Joins: mathe8787 (~wellmathe@85.251.70.233.dyn.user.ono.com)
[14:53:02] *** Joins: mitch0 (~mitch@193-226-249-203.pool.digikabel.hu)
[14:53:18] *** Quits: pieguy12- (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca) (Ping timeout: 260 seconds)
[14:54:22] *** Joins: HvszrStykp (~X@81.171.62.86)
[14:56:53] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[14:57:05] <ville> supernova: http://ftp.acc.umu.se/mirror/gnu.org/savannah/pgubook/ProgrammingGroundUp-1-0-booksize.pdf ?
[14:58:30] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[14:58:32] <ville> LordKalma: sometimes you have to look at the possiblity that the compiler has miscompiled your code
[15:00:29] *** Joins: Burgundy (~yomon@82.76.72.88)
[15:01:07] <ville> AmR: have you printed out what the query looks like after all the variables have been bound? did you copy paste that query into your database client and executed it there?
[15:02:03] <Haohmaru> {} template<bool w> struct S { uint8_t a[4]; uint8_t g() { return 42+w; } }; template<bool w> constexpr S<w> MEH() { S s; s.a[0] = 5; return s; } constexpr S<false> test = MEH<false>();
[15:02:03] <geordi> error: class template argument deduction failed:
[15:02:39] <ville> and if the database library does not allow you to get the query string then it's time to look into abandoning that library. you need these kinds of basic tools to help you trouble shoot problems
[15:02:42] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Remote host closed the connection)
[15:03:05] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[15:03:21] <AmR> ville: I do And it's work with database client :(
[15:03:37] <very_sneaky> ville: yeah I agree with your point - it's certainly not appropriate as the _first_ thing one learns. But the point at which being forced to become familiar with the ecosystem and tooling is useful is earlier rather than later, imo. Like, if you've taken a single c++ course I think right after that is probably a good time
[15:04:36] *** Joins: jokoon (~jokoon@136.252.163.126)
[15:04:50] <very_sneaky> having said that, we weren't allowed to use an IDE at all in my first C course - we were required to manually construct the compiler commands, and I did find that useful
[15:05:35] <ville> it's bit different under structured environment like a class vs someone just deciding to see what c++ is like
[15:06:07] <ville> at school you're going to accept more crap because your whole academic success may depend on it
[15:06:09] <very_sneaky> supernova: assembly probably isn't that useful for debugging purposes specifically. It's useful for wider knowledge about how computers work, but that's probably not useful until a bit later in your education
[15:06:17] <very_sneaky> ville: yeah for sure
[15:06:38] <very_sneaky> this is a very personality driven question as well - the line isn't in the same place for everyone
[15:06:56] <AmR> query exec ok but have no next
[15:17:15] *** Joins: frost (~frost@user/frost)
[15:17:51] *** Quits: ravan_ (~ravan@user/ravan) (Quit: Leaving)
[15:18:34] <AmR> My db https://onlinegdb.com/rXeFrS1b5
[15:21:58] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[15:23:43] *** Joins: PJBoy (~PJBoy@user/pjboy)
[15:34:22] <xkoncek> tracking begin / end pointer inside erase method in a self-balancing tree is such a pain
[15:40:27] *** Joins: Roughy (~mdaw45ns@user/roughy)
[15:40:48] <ville> AmR: can you get your query to function as expected it if doesn't use a placeholder for the name?
[15:44:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[15:49:21] <AmR> ville: What did you mean by " placeholder for the name " ?
[15:51:56] <ville> :traineeName
[15:52:13] <ville> don't do any of that or bindValue(), hardcode some name you know exists
[15:53:09] <johnny> i missed if AmR actually tried using the QT_LOGGING stuff or whatever it's called. that likely shows the passed query
[15:53:16] <supernova> Thanks ville
[15:55:03] <AmR> johnny: How I can set and use that QT_LOGGING ?
[15:55:12] <johnny> i have no idea. i just know it exists
[15:55:23] <johnny> if you use Qt, it's really on you to understan that. it's really really important
[15:55:40] <johnny> my first goal in my project was to remove Qt, so i didn't learn the ins and outs of it
[15:55:47] *** Quits: unyu (~pyon@user/pyon) (Quit: Reboot.)
[15:56:44] <johnny> however it is very useful if you plan to be invested in Qt
[15:57:23] <ville> AmR: also you seem to be using double quotes to quote your string which is somewhat suspect. try single quotes
[15:57:41] *** Joins: Xardas (~Xardas@149.233.51.127)
[15:58:18] <TinoDidriksen> You're not supposed to quote placeholders at all.
[15:58:32] <AmR> ville: I try-ed \':traineeName\' & \":traineeName\" & :traineeName
[15:58:33] <TinoDidriksen> ":placeholder" is not a placeholder. Nor is ':placeholder'
[15:58:43] <Haohmaru> would it end up being a \" issue now
[15:59:35] <AmR> I try the 3 of them And it's the same
[16:01:39] <ville> AmR: that doesn't preclude you having screwed up elsewhere. go with unquoted as TinoDidriksen said
[16:03:33] <ville> https://doc.qt.io/qt-5/qsqlquery.html#approaches-to-binding-values shows that placeholders aren't quoted
[16:08:15] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[16:08:45] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[16:10:02] *** Joins: mathe (~wellmathe@85.251.70.233.dyn.user.ono.com)
[16:11:27] *** Quits: mathe8787 (~wellmathe@85.251.70.233.dyn.user.ono.com) (Read error: Connection reset by peer)
[16:12:33] *** Joins: DSpider (~DSpider@82.79.237.8)
[16:27:03] *** Joins: Fairy (~Fairy@2001:464a:4992:0:fddd:e672:32ce:4073)
[16:32:45] *** Joins: jsbach_ (~jsbach@2a01:c22:acc2:e00:3dc0:53ff:72f6:cd)
[16:33:57] *** Quits: jsbach (~jsbach@2a01:c22:acc2:e00:b54:b457:7345:29c8) (Ping timeout: 240 seconds)
[16:37:51] *** Joins: frost (~frost@user/frost)
[16:38:45] <LordKalma> one thing you can't beat fucking qt. the docs
[16:39:09] <LordKalma> (even though the docs on the more recent stuff like Qt Quick aren't up to the same standard IMHO)
[16:39:23] <LordKalma> every other library elsewhere just throws you a tutorial and crude API reference
[16:41:32] <Haohmaru> qtmentation
[16:46:49] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[16:49:54] *** Joins: romik (~romik@mm-135-105-125-178.mfilial.dynamic.pppoe.byfly.by)
[16:49:59] <p-i-_> I'm trying to write efficient code to listen on multiple websockets. I'm thinking to use a 32-core VMI and create websockets on 15 cores, and send all packets to the 16th, which will process them. At the other end, I want to make multiple simul HTTP POSTs using cores 17-32, so I need to get a signal out from core#16 to these. What's a good IPC setup to achieve this?
[16:50:26] <LordKalma> Haohmaru, you joke about it, but qt even has like a documentation format and parser, qdoc, to build their docs
[16:50:50] <Haohmaru> so?
[16:51:00] <LordKalma> they are serious about docs
[16:51:01] <LordKalma> which is nice
[16:51:10] <Haohmaru> isn't a company behind it?
[16:51:27] <LordKalma> so is behind many poorly documented crap
[16:51:37] <Haohmaru> which ones?
[16:54:31] *** Joins: unyu (~pyon@user/pyon)
[16:54:50] <LordKalma> can't remember any big one. because of course big ones will be good. but many of the stuff I use at work was very expensive and their docs are the .h file that comes with the sdk
[16:56:20] <Haohmaru> k
[16:56:59] <LordKalma> you're cranky today? haha
[16:57:06] <LordKalma> is it just because you're anti-qt? hahahah
[16:57:27] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) ()
[16:57:30] <Haohmaru> what does it mean to be "anti-qt" ?
[16:59:49] <TinoDidriksen> Essentially to be anti-codegen.
[17:00:02] <Haohmaru> o_O
[17:00:15] <LordKalma> hahahah
[17:00:35] <Haohmaru> but my svd parser generates.. code.. ehm, header files
[17:01:09] <LordKalma> the moc will be made useless with reflection (TM)
[17:01:10] <Haohmaru> if i'm "anti" something, then i'm more anti-coca-cola than anti-qt
[17:01:42] <Haohmaru> i don't use qt, i don't care about it much
[17:01:46] <LordKalma> if the reflection proposal solved everything people say it will, we would only require reflection as the only language feature
[17:02:02] <TinoDidriksen> So, Lisp.
[17:02:21] <LordKalma> can't comment on that because I dunno about list
[17:02:23] <LordKalma> *lisp
[17:02:39] <Haohmaru> i care as much about it as a bunch of programs i use are made using it
[17:02:57] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[17:04:57] <Haohmaru> i think i've heard good things about juce
[17:05:09] <LordKalma> JUCE is kind of a speciality framework
[17:05:20] <LordKalma> I guess nothing stops you from using it for general UI
[17:05:34] <LordKalma> (maybe the non-optional splash screen on the free license iirc)
[17:05:36] <Haohmaru> altho that one was one person operation, but i think it got bought recently
[17:05:48] <LordKalma> JUCE is backed by a company
[17:06:20] <LordKalma> their IDE even has magic hot reloading for C++ and what-not
[17:06:24] <LordKalma> they showcased it in a talk
[17:06:47] <Haohmaru> it's one thing a company of 1 man, it's another thing a company like nokia ;P~
[17:07:14] <Haohmaru> i think it recently got bought, but before that it was very small operation
[17:07:15] <LordKalma> Qt isn't a Nokia subsidiary since couple years now haha
[17:07:24] <Haohmaru> $whatever
[17:07:35] <Haohmaru> juce has a smaller niche
[17:07:49] <LordKalma> indeed indeed
[17:07:56] <LordKalma> but it markets strongly to the VST market
[17:08:01] <LordKalma> and that's probably smart
[17:08:08] <LordKalma> it's easier to be specific when you run a smaller operation
[17:08:22] <Haohmaru> it can't possibly be as big as qt, but i gave it as an example because it's similar to qt in that niche
[17:08:28] <Haohmaru> often considered "the best"
[17:09:01] <LordKalma> JUCE is probably the best VST UI kit haha
[17:09:07] <Haohmaru> LordKalma more like, music plugins just cannot use "normal" UI frameworks
[17:09:34] <Haohmaru> and/or don't want to
[17:09:46] <LordKalma> they "can" but yeah. For example, if you're using Qt you'll want tyo build Qt yourself from source and use a namespace for it
[17:09:55] <Haohmaru> thus its all custom, and often you'd want to reinvent all the widgets, so a library makes sense
[17:09:57] <LordKalma> in case other 50 plugins also use Qt and various versions of it
[17:10:12] <Haohmaru> * it's
[17:10:19] <LordKalma> that too of course, but yeah, there are technical challenges like what I mentioned
[17:10:53] <LordKalma> I think I even read it on some doc about VSTs and Qt that "compile "inside a namespace"" tip. Apparently the Qt build tooling even has a flag for that
[17:11:53] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[17:13:09] <Haohmaru> it's not like cue-tea fanbois haven't thought about using it for vst..
[17:13:10] <Haohmaru> https://stackoverflow.com/questions/12805084/qt-gui-environment-in-a-dll-vst-plugin
[17:15:31] <Haohmaru> "normal" UI libraries just aren't meant for this kind of problem
[17:15:55] <p-i-_> JUCE is an amazing piece of work
[17:16:01] <p-i-_> I used it about 5 years ago
[17:16:02] <LordKalma> they indeed aren't
[17:16:17] <p-i-_> Very intelligent design choices/principles by Julian Storer (creator)
[17:16:28] <Haohmaru> ^ see, people praise it
[17:16:32] <p-i-_> JUCE sold out to ROLI which let them pull in more manpower
[17:16:52] <Haohmaru> there, since recently, there's supposedly a slightly bigger company behind it
[17:16:59] <Haohmaru> so who knows what's gonna happen to it
[17:17:36] <p-i-_> It has the kind of internal consistency / coherence that you sometimes see with technologies created by a single individual
[17:17:44] <LordKalma> Haohmaru, these were made with Qt tho: https://www.imaginando.pt/products
[17:19:01] <p-i-_> It did emerge from the digital music niche -- it was originally the engine behind Jules' "Traktor" software. But it eventually became a fully-featured system-wide multiplatform API.
[17:19:17] <Haohmaru> sure.. i didn't say it's not possible.. but the ones made with juce/wdl/other/custom/... are _countless_
[17:19:25] <LordKalma> isn't traktor a NI product now?
[17:19:38] <p-i-_> dunno... I'm out of touch with that scene.
[17:19:42] <LordKalma> I'm confusing with Serato, nevermind
[17:19:43] <Haohmaru> p-i-_ did you mean Tracktion?
[17:19:48] <p-i-_> all my info is 7 years old
[17:19:49] <rpav> LordKalma: that sounds about right
[17:20:04] <LordKalma> traktor is also NI I went to check
[17:20:15] <p-i-_> yeah Tracktion, sorry
[17:20:20] <Haohmaru> forget NI
[17:20:22] <Haohmaru> ;]
[17:20:24] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[17:20:32] <rpav> bah NI has cool stuff
[17:20:47] <LordKalma> they do
[17:21:09] <LordKalma> and now they are called just NI, they dropped the national instruments branding
[17:21:10] <rpav> though i'm still a bit pissed the last time i paid for a Komplete upgrade it didn't inculde reaktor 6
[17:21:17] <rpav> what really? weird
[17:21:20] <LordKalma> yah
[17:21:23] <rpav> also "native instruments" iirc
[17:21:28] <Haohmaru> LordKalma NI was never "national"
[17:21:34] <Haohmaru> it's native instruments
[17:21:54] <LordKalma> https://en.wikipedia.org/wiki/National_Instruments
[17:22:01] <LordKalma> "NI, formerly National Instruments Corporation"
[17:22:05] <Haohmaru> national instruments is a DIFFERENT thing
[17:22:06] <LordKalma> different NI
[17:22:07] <LordKalma> hahahah
[17:22:09] <rpav> wrong.. yea heh
[17:22:09] <LordKalma> sorry
[17:22:14] <LordKalma> ffs
[17:22:15] <rpav> oddly close
[17:22:16] <Haohmaru> those make electronics and sh*t
[17:22:21] <Haohmaru> not music software
[17:22:24] <LordKalma> yeah, sorry
[17:22:37] <Haohmaru> gotta love short abbreviations
[17:22:39] <rpav> it would be weird if they made electronic instruments
[17:22:41] <LordKalma> I'm at the lab today, so I'm surrounded by NI crap
[17:22:49] <LordKalma> but the electronics NI haha
[17:23:36] <LordKalma> rpav, Yamaha makes bikes, keyboards, trombones, and the engine of the Lexus LFA
[17:23:38] <LordKalma> so, like....
[17:23:57] <Haohmaru> boat engines, drums, pianos
[17:24:05] <rpav> i think yamaha made some decent synths but it's been awhile
[17:25:04] <Haohmaru> they have a few classic ones, not sure if they've made anything exciting in the recent years tbh
[17:25:35] <LordKalma> Haohmaru whish they had Deadmau5's wall of analogue synths
[17:25:52] <Haohmaru> now music is largely made using normal computers.. thus the exciting things is mostly software
[17:26:15] <LordKalma> https://i.redd.it/w7z2j7iufge41.jpg
[17:26:21] <Haohmaru> has he made any music with that sh*t tho?
[17:26:34] <LordKalma> hahaha the actual music is probably mostly software haha
[17:26:46] <LordKalma> (not probably, it is)
[17:27:25] <supernova> char cast to void always gives hexadecimal adress to unit it points?
[17:27:30] <PJBoy> SHRT_MAX might be the worst abbreviation ever written
[17:27:47] <LordKalma> gotta sabe that one char
[17:27:49] <LordKalma> *save
[17:27:59] <LordKalma> supernova, what do you mean?
[17:28:02] <Haohmaru> supernova what do you mean?
[17:28:03] <PJBoy> pointers don't know what hexadecimal is
[17:28:11] <rpav> PJBoy: is it XXXL?
[17:28:24] <Haohmaru> hexadecimal is just one of a bunch of possible representations for numbers
[17:28:26] <LordKalma> XXXL is only his mom
[17:28:28] <rpav> wait, what country are you from and how do they size casual torsowear
[17:28:52] <PJBoy> UK and yeah XXXS <-> XXXL is the general scale
[17:29:03] <PJBoy> also spelt 3XS and 3XL more commonly
[17:29:14] <rpav> yea they do that here too (US)
[17:29:20] <LordKalma> never saw a XXXS. Usually people that small go the children section
[17:29:33] <Haohmaru> how dare you, LordKalma
[17:29:39] <Haohmaru> ;P~
[17:29:53] <PJBoy> I guess it's mostly women that would go for that
[17:30:11] <very_sneaky> qdoc uses sphinx as its backend doesn't it? I thought i read that
[17:30:11] <LordKalma> except... yo mom
[17:30:36] <LordKalma> dunno
[17:30:45] <Haohmaru> aww, fail
[17:30:47] <Haohmaru> >:)
[17:30:55] <PJBoy> bruh yo mama's so fat, she shops for clothes in the bedsheets aisle
[17:31:06] <LordKalma> damn
[17:31:09] <Haohmaru> PJBoy parachute aisle
[17:31:15] <LordKalma> anyway
[17:32:04] <Haohmaru> !fact
[17:32:05] <nolyc> Haohmaru: The template parameter Iterator shall meet the requirements for an Input Iterator.
[17:33:36] <Haohmaru> supernova you're maybe printing the pointer with cout << i guess?
[17:34:17] <LordKalma> https://www.reddit.com/r/cpp/comments/s0sodf/in_10_years_clang_has_become_2x_slower_but/hs78qkj/
[17:34:22] <LordKalma> interesting thread and interesting comment
[17:34:39] <Haohmaru> if it's a void* or almost any other pointer, cout will convert the address to an human-readibly integer (string, text)
[17:34:58] <Haohmaru> if it's char* it's gonna assume it's a C char-array "string"
[17:35:10] <Haohmaru> so it'll not print the address but print it as a C-string
[17:38:38] <LordKalma> that is probably it
[17:39:02] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[17:40:14] <PJBoy> anyone that assumes that cmov is better just because it's branchless doesn't have a clue
[17:40:45] <PJBoy> it prevents other optimisations by creating register dependencies
[17:40:49] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:40:58] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:40:58] *** ChanServ sets mode: +v npaperbot
[17:41:10] <PJBoy> our favourite linux user Torvalds wrote a whole rant about it
[17:41:45] <LordKalma> intel CPUs don't run instructions in the registers you tell them too, so that may help?
[17:41:57] <LordKalma> what didn't Torvalds rant about?
[17:42:07] <PJBoy> it's a good rant
[17:42:24] <LordKalma> if it was up to him, CPUs would be a minimal RISC architecture haha
[17:42:29] <rpav> PJBoy: i think anyone who assumes any given thing is faster without having measured and tested is probably clueless
[17:42:34] <PJBoy> point is that you can speculatively execute an entire branch, but you can't do anything with cmov
[17:42:36] <LordKalma> he also hates AVX512 with passion
[17:42:55] <PJBoy> so whether it's faster or not depends entirely on everything else
[17:43:01] <rpav> what's faster is very often weird and unintuitive without knowing all the details
[17:43:02] <PJBoy> also yeah what rpav said
[17:43:05] <LordKalma> PJBoy, that is true, speculative execution ftw. (*laughs in spectre*)
[17:43:08] <PJBoy> that will never stop being true
[17:44:05] <PJBoy> love the obligatory MSVC comment at the end
[17:44:21] <LordKalma> MSVC llvm backend, when?
[17:44:29] <LordKalma> it's called clang-cl hahah
[17:44:50] <supernova> static_cast< const void * >( word ) << endl;
[17:44:54] <supernova> const char *const word = "again";
[17:44:58] <Haohmaru> what's that? M$VC generating IR for llvm?
[17:45:13] <LordKalma> clang-cl is just clang with the msvc options parser
[17:45:19] <Haohmaru> "IR" or how was it called
[17:45:21] <LordKalma>  /O2 instead of -O2
[17:45:23] <Haohmaru> intermediate-something
[17:45:29] <Haohmaru> oh
[17:45:31] <Haohmaru> meh
[17:45:41] <rpav> with /O2 probably being the only common-ish option between them
[17:45:45] <very_sneaky> LordKalma: is it? surely there's more to it than that
[17:45:55] <LordKalma>  /AVX2 instead of -march=haswell
[17:45:58] <LordKalma> etc etc
[17:46:05] <rpav> very_sneaky: it is; however i think it may default ms extensions to on
[17:46:05] <LordKalma>  /arch:AVX2 * I mean
[17:46:11] <very_sneaky> clang-cl generates binaries that can be used with msvc without link libraries can't it
[17:46:22] <Haohmaru> where's the fun in that?
[17:46:23] <rpav> well sure, but that's not clang-cl specific
[17:46:27] <Haohmaru> no more "fun roll loops"
[17:46:34] <Haohmaru> no more "fun safe math"
[17:46:40] <very_sneaky> it's in contrast to the mingw toolchain for sure though ...
[17:46:49] <LordKalma> whaaaatttt?! dlls without link libraries?!
[17:46:53] <LordKalma> that's possible?!
[17:47:00] <rpav> very_sneaky: sure but that's entirely different
[17:47:04] <LordKalma> YOu mean I'm wasting my time in mingw + msvc tooling
[17:47:21] <rpav> not necessarily
[17:47:22] <LordKalma> I hate it when I have to generate a link library for a dll I have to build with mingw
[17:47:40] <very_sneaky> that's what i mean, i would have thought if it was just changing the options it would behave much more similarly to gcc on windows
[17:47:44] <rpav> VS's clang-cl always crashed building my game heh
[17:47:47] <very_sneaky> maybe that's not true though, idk
[17:48:05] <Haohmaru> rpav you must have some sketchy codez
[17:48:17] <LordKalma> because look at this shit:
[17:48:17] <LordKalma> https://github.com/conan-io/conan-center-index/blob/master/recipes/liquid-dsp/all/conanfile.py#L143
[17:48:20] <rpav> i'm not really sure what clang-cl buys you tbh
[17:48:30] <LordKalma> this is what I did to make a library build with mingw and then link with msvc
[17:48:47] <LordKalma> this is the more relevant bit: https://github.com/conan-io/conan-center-index/blob/master/recipes/liquid-dsp/all/conanfile.py#L93
[17:48:48] <rpav> Haohmaru: not at all, (other) clang, gcc (both mingw and linux), and msvc all built it without issue, -pedantic-errors and all
[17:48:51] <LordKalma> plus https://github.com/conan-io/conan-center-index/blob/master/recipes/liquid-dsp/all/generate_link_library.bat
[17:49:07] <rpav> MS has some weird bugs though
[17:49:16] <Haohmaru> rpav maybe your code is too nice and crashes some telemetry in the compiler
[17:49:31] <rpav> i forget if the one "tagged"/named-parameter idiom i tried crashed it or just didn't work
[17:49:45] <rpav> Haohmaru: no idea
[17:49:57] *** Joins: xkuru (~xkuru@user/xkuru)
[17:50:06] <Haohmaru> * telemetry theory confirmed
[17:50:25] <rpav> openmp #pragma stuff can crash clang too, but i haven't worked out the exact combination thereof to trigger it reliably in a test case
[17:50:34] <LordKalma> "<rpav> VS's clang-cl always crashed building my game heh" it was not MVSC the one crashing :)
[17:50:50] <LordKalma> rpav, most #pragma openmp stuff doesn't work on MSVC anyway, thus not crashing it hahahah
[17:51:09] <rpav> well the #pragma omp stuff is a separate thing
[17:53:56] *** Joins: pulse (~pulse@user/pulse)
[17:54:46] *** Joins: yorkin (~yorkin@61-224-87-81.dynamic-ip.hinet.net)
[17:56:52] <rpav> tangentially i really like lambdas for local functions that would otherwise not be useful as members etc
[17:58:58] <rpav> wtf does QPointF not have an operator=
[18:00:13] <Haohmaru> i guess they didn't see a point
[18:00:21] <PJBoy> apparently not :/
[18:00:38] <rpav> Haohmaru: ðŸ˜‚
[18:01:17] <PJBoy> wow that's pretty damn crappy
[18:01:27] <rpav> it's incredibly dumb yeah
[18:01:32] <PJBoy> it has a copy ctor
[18:01:39] <PJBoy> so clearly copy assignment should be possible
[18:01:48] <rpav> it has member assignment (as setX and setY of course ;P) but no assignment
[18:02:10] <PJBoy> rx() and ry() return non-const references
[18:02:22] <PJBoy> so they should just be data members
[18:02:45] <rpav> er wait, it _can_ be assigned though
[18:02:51] <PJBoy> oh that's not a copy ctor
[18:03:06] <PJBoy> that's a converting ctor from QPoint
[18:04:08] <rpav> wait so if you _do_ `p = getSomePointF()`, it'll convert to a QPoint then back to a QPointF?
[18:04:15] *** Joins: etolier_ (~somewhere@122.199.45.244)
[18:04:27] <PJBoy> nah because that's just a ctor
[18:04:41] <PJBoy> the docs don't mention any kind of operator= taking any arguments
[18:04:53] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[18:05:16] <PJBoy> if you did `QPointF p = getSomePointF();`, that still won't work because it will be two user defined conversions
[18:05:34] <rpav> i'm not sure why now but it compiles
[18:05:37] *** Quits: etolier (~somewhere@122.199.46.54) (Ping timeout: 240 seconds)
[18:05:39] <rpav> maybe the docs are incomplete
[18:05:49] <PJBoy> yeah you have to assume the docs suck
[18:06:08] <PJBoy> qtreference.com when
[18:06:40] <rpav> yeah the class itself doesnt' appear to have operator= or QPointF(const QPointF&)
[18:07:21] <rpav> is it default assignable because it's aggregate?
[18:07:26] <PJBoy> the implicitly generated one is most likely there
[18:07:39] <rpav> no wait it's not aggregate because it has ctors
[18:08:26] <rpav> oh duh, right, _again_ that's not a copy constructor
[18:09:09] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:e2c5:351b:e230:7e1b:b4a6) (Remote host closed the connection)
[18:09:14] <rpav> i hate c++ sometimes, but only on days ending in Y
[18:09:26] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:09:33] *** Quits: luc4 (~luca@151.36.200.246) (Ping timeout: 256 seconds)
[18:09:42] *** Joins: p-i- (~Ohmu@2403:6200:8978:e2c5:351b:e230:7e1b:b4a6)
[18:10:07] *** Joins: luc4 (~luca@151.36.177.49)
[18:10:09] <Haohmaru> no such days in .bg
[18:10:37] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[18:10:52] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:13:59] *** Quits: p-i- (~Ohmu@2403:6200:8978:e2c5:351b:e230:7e1b:b4a6) (Ping timeout: 250 seconds)
[18:14:37] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[18:17:30] *** Joins: jkaye (~jkaye@2601:281:8300:7530:7cb5:a22f:ba66:1688)
[18:18:18] *** Quits: Furai (~Furai@furai.pl) (Quit: WeeChat 3.4)
[18:19:05] <cbreak> y u h8 c++? :(
[18:19:37] * Haohmaru eyeballs cbreak
[18:21:17] *** Joins: Furai (~Furai@furai.pl)
[18:24:45] <mort> everyday's c++ hate day
[18:24:57] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[18:25:17] <AmR> ville: Weird but work, I tested that, And not work now working
[18:28:22] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Client Quit)
[18:28:26] <ville> it is a common occurance when you flail around not understanding something that you've errors in multiple stages
[18:29:25] *** Quits: Fairy (~Fairy@2001:464a:4992:0:fddd:e672:32ce:4073) (Ping timeout: 240 seconds)
[18:29:46] *** Joins: andreasbuhr (~quassel@p549dbe60.dip0.t-ipconnect.de)
[18:30:00] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[18:30:01] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[18:32:07] *** Quits: andreasbuhr (~quassel@p549dbe60.dip0.t-ipconnect.de) (Client Quit)
[18:33:11] <AmR> ville: Thanks :)
[18:33:40] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:4ee:a69c:d91a:66fb)
[18:33:40] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:4ee:a69c:d91a:66fb) (Changing host)
[18:33:40] *** Joins: skapata (~Skapata@user/skapata)
[18:36:11] *** Quits: yorkin (~yorkin@61-224-87-81.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[18:37:05] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Read error: Connection reset by peer)
[18:37:57] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[18:43:50] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[18:44:30] <comrad> if have a understanding issue with a reverse iterator
[18:45:11] <comrad> if have a vector with data and filled up with zero data at the end. i am now using a reverse iterator and std::find_if_not to find the last data != 0x00 in this vector
[18:45:22] <comrad> this results in a const std::vector<unsigned char>::const_reverse_iterator
[18:45:54] <comrad> how can i now use this to copy the vector subset with the data? like cbegin to the reverseiterator-point?
[18:46:38] <oj> Should clang-tidy --fix work for renaming identifiers
[18:46:46] <oj> or is that too much to expect?
[18:47:15] <oj> it seems to rename them where they are defined, but not where they are used
[18:48:11] <Haohmaru> at first i read "revenge iterator" ^
[18:49:28] *** Quits: OnlineCop (~OnlineCop@user/onlinecop) (Remote host closed the connection)
[18:49:37] *** Joins: OnlineCop (~OnlineCop@user/onlinecop)
[18:50:10] <rpav> revenge of the iterators.. sequel to decwars?
[18:52:08] *** Joins: Snyp (~Snyp@49.207.207.174)
[18:52:52] <comrad> Bjarnestoups Wrath!
[18:54:51] <cbreak> comrad: https://en.cppreference.com/w/cpp/iterator/reverse_iterator
[18:54:59] <cbreak> reverse iterators have a base member function
[18:57:52] <comrad> you mean to convert it to a normal iterator?
[19:02:05] <cbreak> not convert
[19:02:14] <cbreak> to access the normal iterator that your reverse iterator wraps
[19:11:52] *** Joins: seninha (~seninha@user/seninha)
[19:12:37] <rpav> what is an iterator? a miserable little pile of secrets!
[19:15:42] <comrad> cbreak: i suspect you mean .base()?
[19:15:52] <comrad> that seems to return a const_iterator
[19:21:21] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Remote host closed the connection)
[19:21:58] <Alipha> <Haohmaru> hm, wasn't it possible to use an class::method() in a static_assert() ?! - - - Yes
[19:22:22] <Alipha> <AmR> Can I check if struct defined or not ? - - - nope
[19:23:04] *** Quits: unyu (~pyon@user/pyon) (Quit: brb)
[19:23:49] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[19:25:57] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a98c:b4fd:85b3:2536) (Quit: Quit)
[19:26:40] <comrad> cbreak: thanks, base() seems to be the thing to go. i may have overlooked it.
[19:29:04] <ville> Alipha: sfinae on sizeof(struct aa)?
[19:30:43] <Alipha> ville: it'll still produce a compiler error. I'm pretty sure I've tried such things before
[19:31:10] <ashafq> Is there integer literal for fixed width integer types? Or should I use UINT32_C(1128)?
[19:32:06] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[19:32:36] <ville> ashafq: there isn't but you can make them your self if you wish
[19:32:55] <Alipha> ashafq: I think c++23 is adding them?
[19:33:14] <ville> thought they just added the float types, but not fixed integer types?
[19:33:21] <PJBoy> yeah that proposal got dropped
[19:33:22] <ashafq> Like this: https://stackoverflow.com/a/65120744 ?
[19:33:30] <Alipha> Oh, sad
[19:33:33] <PJBoy> for non public reasons
[19:33:44] <PJBoy> it was gonna be for the least_* types anyway
[19:33:46] <PJBoy> so no big loss
[19:33:58] <ville> it's a good thing though, they would have wasted the good names on poor types
[19:34:00] <PJBoy> no loss at all IMO
[19:35:16] <ville> ashafq: of course not in the std namespace
[19:35:37] <ashafq> ville: Yes, minus the std:: namespace
[19:35:54] <PJBoy> I don't think you should use UINT*_C either
[19:36:06] <PJBoy> just use normal integer literals
[19:36:30] <PJBoy> possibly casted if necessary
[19:38:26] <Haohmaru> Alipha as in.. it's not possible?
[19:38:48] *** Quits: sunny93 (~sunny93@wireguard/tunneler/sunny93) (Quit: The Lounge - https://thelounge.chat)
[19:42:30] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-227.dsl.bell.ca)
[19:44:20] *** Joins: p-i- (~Ohmu@2403:6200:8978:e2c5:351b:e230:7e1b:b4a6)
[19:45:53] *** Joins: unyu (~pyon@user/pyon)
[19:47:37] <Alipha> Haohmaru: sorry, I mean, it is possible
[19:47:39] *** Joins: sunny93 (~sunny93@wireguard/tunneler/sunny93)
[19:48:13] <Haohmaru> i can't get it working..
[19:49:17] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-227.dsl.bell.ca) (Ping timeout: 256 seconds)
[19:50:34] *** Quits: jokoon (~jokoon@136.252.163.126) (Remote host closed the connection)
[19:51:37] *** Quits: sunny93 (~sunny93@wireguard/tunneler/sunny93) (Client Quit)
[19:51:38] <Haohmaru> https://godbolt.org/z/zs97dG9qx
[19:52:16] *** Joins: sunny93 (~sunny93@wireguard/tunneler/sunny93)
[19:53:27] *** Quits: mathe (~wellmathe@85.251.70.233.dyn.user.ono.com) (Remote host closed the connection)
[19:53:28] <PJBoy> https://godbolt.org/z/Y9ohjfxr5
[19:53:49] *** Joins: mathe8787 (~wellmathe@85.251.70.233.dyn.user.ono.com)
[19:54:22] *** Joins: mathe8989 (~wellmathe@85.251.70.233.dyn.user.ono.com)
[19:54:36] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[19:54:52] *** Parts: mathe8989 (~wellmathe@85.251.70.233.dyn.user.ono.com) ()
[19:54:57] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[19:55:33] <Haohmaru> i thought i tried that >:/
[19:56:23] *** Quits: lh_not_bot (~lh_bot@mingw-w64/developer/lhmouse) (Ping timeout: 268 seconds)
[19:56:30] <supernova> guys, please help me to understand this right:
[19:56:30] <supernova> while ( ( character = cin.get() ) != EOF )
[19:56:30] <supernova> cout.put( character );
[19:56:30] <supernova> in while loop we input char by char to char character, after while fails with EOF we cout.put(character) with single line, am i right?
[19:57:05] <PJBoy> wish I could grab "input char by char to char character"
[19:57:53] <supernova> ? :)
[19:58:12] <PJBoy> so in a while loop, the condition gets executed every iteration
[19:58:24] <PJBoy> and if the condition is true then the body also gets executed on that iteration
[19:58:32] <LordKalma> https://twitter.com/TartanLlama/status/1480925736873742342 Sy LaTeXes
[19:58:39] <PJBoy> the condition there is `( character = cin.get() ) != EOF`
[19:58:45] <PJBoy> and the body is `cout.put( character );`
[19:59:24] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[19:59:24] <PJBoy> so you get a char into character, check if it's not EOF, and in that case you output the character
[19:59:43] <PJBoy> if it is instead EOF, then the loop ends
[19:59:45] <supernova> still not clear, cuz it outputs after EOF is entered
[19:59:58] <supernova> Enter a sentence followed by end-of-file:
[19:59:58] <supernova> hello
[19:59:58] <supernova> hello
[20:00:13] <cbreak> you can not "enter" an EOF
[20:00:25] <cbreak> EOF is not a character
[20:00:26] <rpav> sure you can, push Ctrl-z! ;)
[20:00:27] * rpav runs
[20:00:32] <PJBoy> ctrl+d
[20:00:38] <supernova> i do ctrl + d
[20:00:39] <supernova> oh
[20:00:39] <supernova> lol
[20:00:50] <cbreak> that just closes the TTY
[20:01:00] <LordKalma> ctrl+c is my favorite
[20:01:22] <PJBoy> it's end of transmission in the ascii table
[20:01:27] <rpav> https://en.wikipedia.org/wiki/End-of-file#EOF_character
[20:01:43] <PJBoy> or end of tape according to that link
[20:01:56] <PJBoy> either way, cbreak's right
[20:02:08] <cbreak> << (int)EOF
[20:02:09] <geordi> -1
[20:02:12] <supernova> so it does output first time when i push enter
[20:02:18] <rpav> he is not; EOF can _definitely_ be a character
[20:02:20] <supernova> what triggers output
[20:02:28] <PJBoy> not in ascii at least
[20:02:41] <cbreak> rpav: there's a reason get doesn't return a char
[20:02:57] <rpav> PJBoy: even in ascii
[20:03:06] <PJBoy> not in this ascii table https://en.cppreference.com/w/cpp/language/ascii
[20:03:21] <rpav> Â¯\_(ãƒ„)_/Â¯
[20:03:38] <rpav> don't assume all platforms follow some arbitrary table values
[20:03:47] <PJBoy> ascii isn't a platform
[20:04:01] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-183.dsl.bell.ca)
[20:04:08] <supernova> cin get - gets one char or can take string?
[20:04:10] <cbreak> just imagine a file could contain EOF. Then... how would you detect the end of the file?
[20:04:44] <rpav> PJBoy: your point is "this ascii table does not include a character labeled EOF, therefore EOF is 'not a character'," which is a pretty obviously idiotic position even if you want to be a pedant
[20:04:51] <cbreak> same reason C strings can't contain null bytes, or a ton of functions that work on C strings break
[20:05:36] <PJBoy> find me a character set that has an EOF character then
[20:06:05] <rpav> your argument is spurious and irrelevant
[20:06:11] <PJBoy> must be an 8 bit char set at the most
[20:06:32] <rpav> that a character is labeled EOF in some arbitrary character set does not have any bearing on whether EOF can be a character or not
[20:06:44] <rpav> it very clearly is a character on multiple platforms, picked by whatever reasoning they used
[20:06:53] <PJBoy> it's not clear at all
[20:07:01] <PJBoy> EOF is obviously not a character in any character set
[20:07:33] <PJBoy> ascii, ebcdic and unicode don't do it, and who else would be insane enough
[20:08:33] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-183.dsl.bell.ca) (Ping timeout: 256 seconds)
[20:08:40] <rpav> persisting in an untenable and useless argument will get you nowhere and i will engage no further with it; you are definitively and demonstrably wrong and there is nothing you can say to the contrary to show otherwise
[20:08:48] *** Quits: Snyp (~Snyp@49.207.207.174) (Quit: Textual IRC Client: www.textualapp.com)
[20:08:55] <PJBoy> demonstrate me wrong then
[20:09:17] <PJBoy> I'm demonstratably not demonstratable wrong if you can't demonstrate that I'm wrong
[20:09:59] <PJBoy> there's no EOF char because that would mean you can't detect the end of a file
[20:10:15] <PJBoy> try an argument that isn't "you're wrong, I'm sure"
[20:11:31] <cbreak> the main reason EOF can not be a valid character value is that it is negative
[20:11:48] <cbreak> man page says: "fgetc() reads the next character from stream and returns it as an unsigned char cast to an int, or EOF on end of file or error."
[20:11:59] <supernova> https://wandbox.org/permlink/gaSjWWWYlR9yLxjl
[20:12:10] <PJBoy> valid chars can be negative after that cast
[20:12:20] <cbreak> no
[20:12:41] <PJBoy> what if sizeof(char) = sizeof(int)
[20:12:57] <cbreak> hmm...
[20:13:01] <AmR> is that convert right " setTraineeStartDate( query.value( query.record().indexOf( "TraineeStartDate" ) ).toDateTime().toTime_t() ) " ? where is setTraineeStartDate header is " void setTraineeStartDate( time_t newTrainee_Start_Date_Time_t ) "
[20:13:50] <AmR> > And qDebug info is > Variant(QString, "Ù¢Ù Ù¢Ù¢-Ù Ù¡-Ù¡Ù¡") > QDate(Invalid) > 5 Ù…Ø´ÙƒØ§Ø­  4294967295 4294967295 0 0
[20:13:58] <supernova> am i right: I input characters one by one with cin get and instantly cout put to buffer same char by char string without converting to int. Then, after i press enter, cin ended and executed cout to screen. Then repeat cycle till EOF met
[20:18:18] <Haohmaru> okay, in my actual code it still doesn't wanna work, here's a less limitted test-case: https://godbolt.org/z/z1sbeWqT3
[20:18:28] <Haohmaru> dafuq is wrong?!
[20:18:55] *** Joins: paul424 (~tom@ip-5-172-233-237.multi.internet.cyfrowypolsat.pl)
[20:19:35] *** Joins: RoKenn (~RoKenn@user/rokenn)
[20:19:45] *** Quits: RoKenn (~RoKenn@user/rokenn) (Client Quit)
[20:19:50] <Haohmaru> yes, i'm actually doing some bit-fiddling
[20:20:00] <Haohmaru> is that too much to ask?
[20:20:25] <PJBoy> init_lut<false>() doesn't result in a constant expression, yeah
[20:20:35] <PJBoy> hm
[20:20:38] <Haohmaru> <but_why.gif>
[20:20:48] *** Joins: bobb_ (~bobb_@46.232.229.52)
[20:21:08] <Haohmaru> did i break some bit-fiddling limit?
[20:21:38] <PJBoy> I was gonna ask clang, but clang compiles it >_>
[20:21:47] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[20:22:12] <PJBoy> I'm not sure
[20:22:23] <Haohmaru> oh, so it's a gcc thing?
[20:22:52] <PJBoy> well gcc's not doing a good job of explaining itself
[20:23:15] <PJBoy> so it's hard to say
[20:23:25] <PJBoy> I do usually suspect GCC of being wrong
[20:23:37] <PJBoy> but then I'm usually surprised about some detail from the standard in return >_>
[20:23:52] <Haohmaru> you underestimate the gnu eh
[20:24:09] <PJBoy> it works in C++20
[20:24:16] <PJBoy> which is even more confusing
[20:24:38] <PJBoy> oh now clang complains
[20:24:43] <Haohmaru> i was suspecting maybe it's not allowed in C++20, that was before you fixed it
[20:24:50] <Haohmaru> hahaha
[20:24:57] <bobb_> Somebody sent me https://quuxplusone.github.io/blog/2021/11/09/pass-string-view-by-value/ which shows that makes sense to pass a std::string_view function parameter by value. While i agree with that, i do not agree with him preferring #1 over #2 in https://coliru.stacked-crooked.com/a/5394d770b50379ca - how can i counter that?
[20:24:58] <Haohmaru> * i meant in C++17
[20:25:12] <PJBoy> yup
[20:25:17] <PJBoy> it's uninitialised variables
[20:25:20] <PJBoy> gcc doesn't like those
[20:25:39] <Haohmaru> ooh
[20:25:41] <PJBoy> namely uint16_t x; and uint8_t v0;
[20:25:55] <Haohmaru> yeah i set them to 0 and it compiles
[20:25:57] <Haohmaru> o_O
[20:26:22] <bobb_> i assume he has a general misunderstanding but i can't be that direct
[20:26:23] <paul424> I must know something more about std::map before I proceed with my medical intervention  : Is it possible to delete entries from std::map ?
[20:26:30] <Haohmaru> so it's a highly unhelpful warning then?
[20:26:34] <bobb_> paul424 yes
[20:26:45] <PJBoy> so the lesson here is always use clang
[20:26:52] <Haohmaru> no
[20:27:06] <Haohmaru> the lesson is: init them stupid variables
[20:27:09] <PJBoy> https://godbolt.org/z/nx8zPhc7T look at that warning message though
[20:27:17] <PJBoy> "warning: uninitialized variable in a constexpr function is a C++20 extension [-Wc++20-extensions]"
[20:27:19] *** Joins: montpol (montpol@fine.mouses.xyz)
[20:27:21] *** Joins: Fairy (~Fairy@2001:464a:4992:0:fddd:e672:32ce:4073)
[20:27:25] <PJBoy> and then points at the problem lines
[20:27:31] <PJBoy> that's pretty god damn helpful
[20:27:58] <Haohmaru> yeah but you said that clang in c++17 mode just compiles it
[20:28:08] <PJBoy> yeah I can't explain that
[20:28:11] <Haohmaru> i call that illegal
[20:28:14] <PJBoy> it doesn't happen anymore
[20:28:25] <PJBoy> I must have hallucinated
[20:28:32] <Haohmaru> now now
[20:28:51] <LordKalma> this chat is hilarious today
[20:28:54] * Haohmaru sends clang straight to jail
[20:29:09] <PJBoy> paul424, `erase`
[20:29:23] <paul424> PJBoy, ahh oki thanks
[20:29:31] <Haohmaru> LordKalma why?
[20:30:19] <PJBoy> bobb_, I agree with #1 there
[20:31:51] <bobb_> PJBoy why?
[20:32:29] <PJBoy> it's hard to argue either way honestly
[20:32:31] *** Quits: mathe8787 (~wellmathe@85.251.70.233.dyn.user.ono.com) (Quit: Leaving)
[20:32:41] <PJBoy> but they're cheap to copy/destroy etc. as we both know
[20:32:56] <PJBoy> the compiler potentially has to consider the two references as possibly aliasing
[20:33:00] <PJBoy> whereas values never alias
[20:33:28] <PJBoy> and the memory you access is a bit closer in the value version
[20:33:43] <PJBoy> so it might be a bit more performant(?)
[20:33:49] <bobb_> okay, thats a valid argument
[20:34:04] <PJBoy> in general I prefer values as my default because they're simpler
[20:35:15] <PJBoy> any gains either way are probably marginal at best
[20:35:30] <LordKalma> I'd use by value there
[20:35:45] <LordKalma> std::string_view is made to be used as a value type
[20:36:04] <bobb_> i do so too but imagine a std::string veryLarge; my reflex would be to call std::find_if(veryLarge.begin(), veryLarge.end(), [](const auto& e) { // ...}; );
[20:36:23] <LordKalma> not really
[20:36:27] <bobb_> passing the std::string_view parameter by value is absolutly fine
[20:36:40] <PJBoy> for std::string I agree
[20:36:40] <LordKalma> (const auto& e) this would be passing a single char by reference
[20:37:03] <PJBoy> oh wait
[20:37:07] * PJBoy checks docs
[20:37:25] <LordKalma> !std::find_if
[20:37:26] <nolyc> http://en.cppreference.com/w/cpp/algorithm/find_if
[20:37:36] <LordKalma> !std::string
[20:37:37] <nolyc> http://en.cppreference.com/w/cpp/string/basic_string
[20:37:41] <PJBoy> yeah you right
[20:37:42] <PJBoy> hahaha
[20:37:51] <PJBoy> wow that was a blunder
[20:38:04] <LordKalma> https://en.cppreference.com/w/cpp/string/basic_string/begin
[20:38:07] <LordKalma> it's char by char
[20:38:21] <LordKalma> bobb_, remember one thing, references are pointers in disguise
[20:38:37] <bobb_> argh you are right
[20:38:42] <LordKalma> the pointer would be bigger in size than a char (most likely) *and* you'd have an indirection
[20:38:55] <LordKalma> so why do you want to pass single chars around by pointer?
[20:39:12] <bobb_> that is not reasonable i agree!
[20:39:23] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[20:39:30] <LordKalma> the compiler would (probably?) see that const and just ignore you and pass by value
[20:39:35] <LordKalma> by the as-if rule
[20:40:12] <PJBoy> that would be very nice of it to do
[20:40:28] <LordKalma> I think any compiler smart enough would pass a const& to anything sizeof(pointer) or less and change it to a value argument
[20:40:55] <PJBoy> if it can solve inlining and aliasing, yeah
[20:40:55] <Alipha> supernova: `character` has to be of type int, not char
[20:41:27] <PJBoy> actually probably just inlining is needed
[20:41:47] <PJBoy> clang is much better at inlining than gcc from what I've seen
[20:41:59] <PJBoy> so I don't tend to trust the compiler to inline
[20:41:59] <LordKalma> https://godbolt.org/z/7s8h1anh5
[20:42:05] <PJBoy> unless it's clang
[20:42:08] <LordKalma> shit it actually doesn't solve the indirection
[20:42:19] <Haohmaru> PJBoy your 'o-o' are biased
[20:42:32] <PJBoy> my glasses??
[20:43:03] <LordKalma> neither gcc or clang changed const char& to a value parameter
[20:43:06] <LordKalma> bummer
[20:43:16] <PJBoy> yeah it will never change a function codegen
[20:43:22] <PJBoy> you need to be able to link to that
[20:43:27] <PJBoy> or call it from ASM or whatever
[20:43:35] <LordKalma> fair enough
[20:43:36] <PJBoy> but if the call gets inlined, that's a different story
[20:44:25] <LordKalma> https://godbolt.org/z/6dqdT9Mdr
[20:44:26] <LordKalma> yap
[20:44:31] <LordKalma> the call got inlined
[20:44:46] <LordKalma> and without reference params
[20:44:49] <Haohmaru> yeah, your glasses ;P~
[20:44:58] *** Quits: luc4 (~luca@151.36.177.49) (Ping timeout: 256 seconds)
[20:45:06] <Haohmaru> you're with those clangarized sunglasses
[20:45:35] <LordKalma> clang also inlines that example, and also trims the reference away
[20:47:13] <Alipha> Haohmaru: x and v0 were uninitialized inside init_lut
[20:47:33] <Haohmaru> poor Alipha reading everything x_x
[20:47:49] <LordKalma> Alipha is the MVP
[20:47:54] <Alipha> oh, i missed PJBoy's answer :-(
[20:47:58] <Haohmaru> the what
[20:48:02] <Alipha> otherwise i wouldn't have bothered looking at your code
[20:48:14] <LordKalma> I'm also the MVP. But Alipha is Most Valued Player and I'm the Minimum Viable Product
[20:48:15] <Alipha> Most Valuable Player
[20:48:16] <Haohmaru> yeah, it's ugly as always
[20:48:17] <Alipha> ... Programmer?
[20:48:30] <Haohmaru> Person?
[20:48:37] <PJBoy> most vertical primate
[20:49:08] <Haohmaru> most volatile plastic
[20:49:32] <Alipha> member volatile pvalue
[20:49:40] <Alipha> *prvalue
[20:49:53] <Alipha> mutable volatile prvalue
[20:50:57] <Alipha> LordKalma: I do gloss over when you're talking about build envs, ides, qt, other libraries, and off topic things though ;-)
[20:51:14] <LordKalma> that's why you're the MVP
[20:51:42] <LordKalma> and amongst those things only "off topic" is really off topic :D
[20:52:40] <Alipha> That's why I said "and off topic things", not "and other off topic things"
[20:53:19] <Alipha> Except for metroid dread. Which I'm having fimun using the omega cannon outside of emmi zones. (via glitches!)
[20:53:28] <Alipha> *fun
[20:53:35] <LordKalma> My personal stand in "general" channels is like... I feel confortable shitposting when the channel is otherwise idling. Of course I'm not 100% consistent with that. But that's what I try to do.
[20:53:45] <LordKalma> and keeping it "techy" at least.
[20:54:07] <LordKalma> I would comply with stricter enforcement if you really want me to
[20:54:19] <Haohmaru> most violent policeman
[20:57:24] <bobb_> PJBoy and LordKalma thanks for the valuable discussion :)
[20:57:38] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:57:41] <PJBoy> :)
[20:59:10] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[21:02:57] *** Quits: bobb_ (~bobb_@46.232.229.52) (Ping timeout: 256 seconds)
[21:05:22] *** Quits: etolier_ (~somewhere@122.199.45.244) (Ping timeout: 256 seconds)
[21:05:46] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[21:07:50] *** Joins: etolier (~somewhere@122.199.45.244)
[21:12:17] *** Quits: etolier (~somewhere@122.199.45.244) (Ping timeout: 240 seconds)
[21:17:59] *** Joins: etolier (~somewhere@202-65-84-142.ip4.superloop.com)
[21:20:32] <computerquip> Does anyone know how to install a cmake target with its dependencies (generated from the same codebase) into a root directory?
[21:20:48] <computerquip> Currently, I'm having to specify all targets explicitly but it's kind of a pain to manually list.
[21:26:13] <supernova> Alipha, thanks! I
[21:26:14] <paul424> What';s wrong with this one : error: ambiguous overload for â€˜operator[]â€™ (operand types are â€˜const std::map<Tile*, TileStateNotified>â€™ and â€˜const Tile*â€™) 1655 |     TileStateNotified& tileState = mTilesStates[tile];
[21:26:38] <paul424> what's so ambiguous ?
[21:27:11] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:27:50] *** Joins: lh_not_bot (~lh_bot@mingw-w64/developer/lhmouse)
[21:29:17] <PJBoy> would need to know about the candidate overloads it tried
[21:29:40] <PJBoy> probably some conversions get involved
[21:29:54] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[21:30:07] <PJBoy> oh it's a const map you have
[21:30:15] <PJBoy> const maps don't support operator[]
[21:30:30] <PJBoy> read-only access requires you to use .at()
[21:30:38] <paul424> https://pastebin.com/v7rMDVtt
[21:31:17] <paul424> PJBoy, how so const std::map ... I didn't declared it to be in *.h as such
[21:31:34] <paul424>     std::map<Tile*,TileStateNotified> mTilesStates;
[21:31:51] <PJBoy> probably your class itself is const
[21:32:15] <PJBoy> so within that const instance, all your members are treated as const
[21:32:36] <paul424> arght void Seat::exportTileToPacket(ODPacket& os, const Tile* tile,
[21:32:37] <paul424>         bool hideSeatId) const
[21:32:46] <paul424> sure , sir , PJBoy thanks you sir :D
[21:33:02] <PJBoy> great :D
[21:33:27] <PJBoy> freaking hell
[21:33:34] <PJBoy> that error log *sucks*
[21:34:50] <LordKalma> conversion would be ill-formed
[21:34:51] <LordKalma> interesting
[21:35:24] <PJBoy> `error: passing â€˜const std::map<Tile*, TileStateNotified>â€™ as â€˜thisâ€™ argument discards qualifiers` would have been the giveaway
[21:35:40] <PJBoy> but you wouldn't know that unless you'd seen that error like a thousand times
[21:36:38] <LordKalma> I didn't even see that in the middle of that trash
[21:36:52] <LordKalma> that would be something hopefully clangd would pick up before building
[21:37:20] <LordKalma> how will be live in c++20 without clangd up to date? :(
[21:37:24] <LordKalma> *will we
[21:38:15] <rpav> yea clang needs to get on the c++20 features .. stdlib stuff should be picked up from libstdc++ but not understanding like template strings and stuff
[21:38:28] <LordKalma> or lambda templates
[21:38:31] <rpav> at this point clangd is probably more important than clang itself
[21:38:39] <rpav> huh, doesn't it already do that
[21:38:46] <LordKalma> let's check
[21:39:35] <LordKalma> oh nice, template-parameter-list for generic lambdas is in since clang 9
[21:40:49] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:40:59] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:40:59] *** ChanServ sets mode: +v npaperbot
[21:41:11] <rpav> yea like `[]<typename T>(T y) { return y+y; }` seems to work, is there something more complex
[21:41:18] <rpav> and auto has worked for a bit i'm pretty sure
[21:41:55] <Led_Zeppelin2> handling depedencies. Do you use vcpk or manually by using CMAKE?
[21:42:29] <kalven> I vendor everything for my project
[21:42:35] <rpav> i use https://github.com/cpm-cmake/CPM.cmake
[21:43:03] <rpav> pure cmake, easy dependency management and "packages" i can write, source from github, and then people who use it don't need anything special
[21:43:07] <LordKalma> https://en.cppreference.com/w/cpp/compiler_support#C.2B.2B20_core_language_features
[21:43:10] <LordKalma> it's actually not that bad
[21:43:52] <LordKalma> Led_Zeppelin2, I'm legally obliged to mention conan
[21:44:03] <LordKalma> (jk, I'm not, it's just I use/like the tool :))
[21:44:23] <Led_Zeppelin2> ha. ok.
[21:44:33] <Led_Zeppelin2> I am using vcpkg and seems ok. But I find it very buggy!
[21:44:45] <rpav> conan is definitely a thing .. it's just heavy/enterprisey, complicated to configure, and requires you manage packages for people who use your stuff, and requires users have conan, and configure it to use _your_ stuff
[21:44:58] <LordKalma> yes, that is true
[21:45:02] <rpav> vcpkg seems toylike
[21:45:12] <LordKalma> you have to buy into the ecosystem to be able to use conan
[21:45:17] <PJBoy> having used vcpkg and conan now, I'm a conan guy for sure
[21:45:30] <PJBoy> even though conan's slightly more awkward on windows
[21:45:38] <rpav> yeah .. like if you have a big corporate codebase and a zillion packages and a department to manage conan stuff, it's probably useful
[21:45:44] <LordKalma> I'll never understand vcpkg's decision to have whatever their equivalent of recipes is written in vcpkg
[21:45:52] <LordKalma> *written in cmake, sorry
[21:46:06] <rpav> i've managed "solo" conan stuff and with some custom scripts it was doable, but a pain, and didn't buy me nearly as much as just using CPM
[21:46:14] <rpav> not to be confused with cp/m
[21:46:47] <Led_Zeppelin2> so, there is vcpkg, conan and cpm? anything else?
[21:46:53] <rpav> oh yeah
[21:46:55] <LordKalma> someone made a conan-based tool names barbarian, which does somethign conan doesn't: it's capable of using any git repo that has a conanfile.py without a recipe
[21:47:00] <LordKalma> which is amazing
[21:47:01] <rpav> if you _just_ use linux, that other one seemed really neat
[21:47:11] <Led_Zeppelin2> I don't like conan because it needs Python as a depedency, no?
[21:47:12] <LordKalma> shame it hasn't gained much traction
[21:47:26] <Led_Zeppelin2> yeah, i juse use Linux. No windows.
[21:47:36] <LordKalma> then use apt/pacman :p
[21:47:43] <rpav> spack! spack seemed neat
[21:47:49] <rpav> https://github.com/spack/spack
[21:47:49] <LordKalma> yum/<whatever fedora uses>
[21:47:50] <Led_Zeppelin2> for C++ I can use apt?
[21:47:57] <LordKalma> apt install boost-dev // yes
[21:48:14] *** Joins: JohnMS (~JohnMS@2a02:a311:a344:9b00:4ecc:6aff:fed0:fdf)
[21:48:18] <rpav> i haven't used it and i need to build for windows so it was a no-go, but it seemed like "conan, but good"
[21:48:24] <Led_Zeppelin2> no. I have many users on a system. I can't have everyone use the same version of boost. people pick and choose their version of boost.
[21:48:38] <rpav> yeah definitely you want to control what you build with ime
[21:49:02] <Led_Zeppelin2> rpav, exactly!
[21:49:09] <rpav> maybe your package manager doesn't support some new version yet, or maybe they update to some buggy version, or maybe their package is broken because their package ends in .deb
[21:49:13] <rpav> i mean, there are a lot of reasons
[21:49:38] <Led_Zeppelin2> yeah. I live vcpkg's manifest mode. its really cool. Just that I run into this problem: https://giters.com/microsoft/vcpkg/issues/22041
[21:49:43] <Led_Zeppelin2> no idea how to get out of it.
[21:49:56] <rpav> if vcpkg seems useful to you, i mean it's free try it out right
[21:50:17] <LordKalma> manifest mode is the "self-consistent mode" or the "pick each version mode"?
[21:50:17] <Led_Zeppelin2> rpav, i have. its good so far. Just not sure where to get support.
[21:50:26] <Led_Zeppelin2> LordKalma, its pick each version.
[21:50:33] <rpav> for me it didn't seem to handle architecture/build types sufficiently _and_ required users have it, so it's like .. not really buying much?
[21:50:47] <LordKalma> if you have an enterprise environment it's probably worth the conan setup
[21:50:55] <Led_Zeppelin2> rpav, for me its just Linux as my arch. So its pretty easy in that sense.
[21:52:39] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[21:52:55] <rpav> sure
[21:52:58] <rpav> tool for the job and all
[21:53:50] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[21:54:40] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[21:58:51] <paul424> void Seat::exportTileToPacket(ODPacket& os, const Tile* tile,        bool hideSeatId) const and     TileStateNotified& tileState = mTilesStates.at(tile);  error: binding reference of type â€˜Tile* const&â€™ to â€˜const Tile*â€™ discards qualifiers
[21:59:03] <paul424> I see what's wroing iwht it , but I don;'t know any cure for it
[21:59:28] <LordKalma> const reference to pointer?
[21:59:48] <PJBoy> can't pass a pointer-to-const to a function expecting a pointer-to-non-const
[22:00:29] <PJBoy> tile is a pointer-to-const
[22:00:44] <PJBoy> and your map presumably is a Tile*
[22:01:00] <PJBoy> your map's key type, that is
[22:01:03] <paul424> yes
[22:01:32] <paul424> The devil invented all those const's :(
[22:01:43] <PJBoy> so don't take a const Tile* for your tile parameter
[22:01:48] <paul424> I haven't seen a program safety rescued by all those const
[22:02:13] <paul424> PJBoy, I have to, because somewhere I pass this as an argument
[22:02:15] *** Joins: pulse (~pulse@user/pulse)
[22:02:28] <paul424> and type of this is afaik const T*
[22:03:54] <paul424> hmm https://stackoverflow.com/questions/6067244/type-of-this-pointer it is only in const functions wait
[22:04:07] <PJBoy> idk there's some inconsistency in consts
[22:04:32] <PJBoy> if you only have a read-only tile, would it ever make sense to be able to access a map of writable tiles?
[22:07:31] <paul424> yeah I see]
[22:08:45] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[22:09:17] *** Quits: jsbach_ (~jsbach@2a01:c22:acc2:e00:3dc0:53ff:72f6:cd) (Ping timeout: 250 seconds)
[22:11:32] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[22:16:11] *** Quits: Youmu (uid129469@user/condy) (Quit: Connection closed for inactivity)
[22:20:37] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[22:25:44] *** Joins: magla (~gelignite@55d42175.access.ecotel.net)
[22:26:24] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[22:26:38] *** Quits: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) (Quit: Leaving.)
[22:26:38] *** Joins: Youmu (uid129469@user/condy)
[22:30:43] *** Quits: xkoncek (xkoncek@lounge.fi.muni.cz) (Quit: Ping timeout (120 seconds))
[22:31:01] *** Joins: xkoncek (xkoncek@lounge.fi.muni.cz)
[22:31:57] *** Quits: supernova (~quassel@2405:9800:ba11:6207:9b58:d180:12a8:f790) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:34:02] *** Joins: segnior (segnior@user/segnior)
[22:34:37] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[22:35:57] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[22:36:42] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[22:38:37] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[22:46:11] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-198.dsl.bell.ca)
[22:48:23] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[22:50:55] *** Joins: jkaye_ (~qicruser@2605:ef80:1a:c23f::1062:2648)
[22:51:25] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-198.dsl.bell.ca) (Ping timeout: 240 seconds)
[22:53:38] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[22:53:59] *** Quits: jkaye_ (~qicruser@2605:ef80:1a:c23f::1062:2648) (Read error: Connection reset by peer)
[22:56:33] *** Quits: nshire_ (~nshire@47.146.41.156) (Quit: Leaving)
[22:56:50] *** Joins: nshire (~nshire@user/nshire)
[22:59:10] *** Joins: jkaye_ (~qicruser@2605:ef80:1a:c23f::1062:2648)
[23:00:45] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-43-67-70-144-25.dsl.bell.ca)
[23:01:56] *** Quits: JohnMS (~JohnMS@2a02:a311:a344:9b00:4ecc:6aff:fed0:fdf) (Quit: Konversation terminated!)
[23:04:19] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[23:07:20] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[23:08:11] *** Quits: jkaye_ (~qicruser@2605:ef80:1a:c23f::1062:2648) (Read error: Connection reset by peer)
[23:10:41] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[23:11:09] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[23:12:17] <ashafq> template <typename T> std::unique_ptr<T, decltype(&std::free)> allocate(size_t n) { return std::unique_ptr<T, decltype(&std::free)>({std::aligned_alloc(CPU_CACHE_ALIGN, n * sizeof(T)), std::free});}
[23:12:25] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[23:12:31] <ashafq> ^ boy that's a mouthful of C++
[23:18:05] <ville> if std::unique_ptr didn't suck you wouldn't have to write that much
[23:18:59] <kalven> that'd be better done with a deleter struct in the type
[23:20:54] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[23:21:06] <ashafq> How do you interface C's uglyness with unique_ptr?
[23:21:28] <LordKalma> custom deleter
[23:21:33] <LordKalma> and add the deleter method there
[23:21:42] <LordKalma> !std::unique_ptr
[23:21:43] <nolyc> http://en.cppreference.com/w/cpp/memory/unique_ptr
[23:21:55] <ashafq> So, I have to create a wrapper for std::free?
[23:22:08] <kalven> struct FreeDeleter { void operator()(void* p) const { std::free(p); } };  std::unique_ptr<T, FreeDeleter> ...
[23:22:25] <LordKalma> ashafq, basically what kalven just wrote
[23:22:33] <ashafq> I see
[23:22:50] <ashafq> C-c, C-v
[23:22:53] <LordKalma> but you'd write something like myClib_object_delete(p);
[23:22:59] <LordKalma> instead of std::free I guess
[23:23:22] <LordKalma> you know, how every C library has a mylib_myobject_create and mylib_myobject_delete
[23:23:31] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[23:24:06] <LordKalma> ashafq, other, maybe better approach, is to do it at the object level, so you can do more than unique_ptr, the classical `class myObjectRaiiWrapper;`
[23:24:52] <ashafq> Yes
[23:25:02] <ashafq> Still really useful
[23:26:26] <ville> just write a better unique_ptr
[23:26:46] <kalven> ashafq: btw, the advantage with doing the deleter struct is that your unique_ptr won't have to hold a function pointer
[23:26:49] <LordKalma> why does that struct FreeDeleter need to use free? why not delete?
[23:27:15] <LordKalma> kalven, I guess a lambda would be equivalent to that functor?
[23:27:25] <ashafq> LordKalma: std::aligned_alloc needs std::free to delete
[23:27:30] <kalven> LordKalma: it was a translation from ashafq's use of std::free
[23:27:36] <LordKalma> ah because aligned_alloc, sorry
[23:28:06] <LordKalma> ah I went to check std::default_delete and it does use delete
[23:29:49] *** Quits: Fairy (~Fairy@2001:464a:4992:0:fddd:e672:32ce:4073) (Ping timeout: 240 seconds)
[23:48:22] <LordKalma> PJBoy, can you link me your clang-tidy=
[23:48:24] <LordKalma> ?
[23:48:57] <ashafq> https://godbolt.org/z/7v5TEndea maybe I am not getting unique_ptr :(
[23:49:05] <PJBoy> strictly speaking it's my work one
[23:49:17] *** Quits: jkaye (~jkaye@2601:281:8300:7530:7cb5:a22f:ba66:1688) (Ping timeout: 240 seconds)
[23:50:05] <LordKalma> ashafq, make_unique expects as arguments the arguments of the constructor of T
[23:50:23] <LordKalma> you're just using make_unique wrong :)
[23:50:27] <LordKalma> !std::make_unique
[23:50:28] <nolyc> LordKalma: Error: "std::make_unique" is not a valid command.
[23:50:32] <LordKalma> bah
[23:50:47] <ashafq> Ah, so I create the aligned allocator as a class?
[23:50:47] <rpav> `make_unique<T>(...)` is like saying `new T(...)`
[23:50:49] <LordKalma> PJBoy, well, if you can pastebin it for me, i'd appreciate it to check some things
[23:50:58] <PJBoy> https://pastebin.com/CE563keT
[23:51:00] <rpav> i mean, except it produces a unique_ptr obviously, but usage :p
[23:51:06] <ashafq> Oh ok
[23:51:15] <LordKalma> ashafq, https://en.cppreference.com/w/cpp/memory/unique_ptr/make_unique
[23:51:27] <PJBoy> yeah just saying it doesn't reflect my personal style, and I'm gonna keep pasting it with a one day expiration
[23:51:41] <PJBoy> but it is pretty sane
[23:51:53] <LordKalma> I j ust wanted to check your CheckOptions
