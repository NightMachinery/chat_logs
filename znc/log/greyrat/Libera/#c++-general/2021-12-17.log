[00:02:15] *** Quits: aniketgm (~Aniket@2405:201:1007:4e71:c1d:1ac6:7baf:8a43) (Quit: leaving)
[00:03:07] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[00:05:21] <AmR> Please Any help My Windows build not working at all :(
[00:07:54] *** Joins: jaakkos (~jaakkos@88-113-244-153.elisa-laajakaista.fi)
[00:08:47] <jaakkos> Hi all! What would be a sensible way to allocate an array of gcc vector types (eg. typedef uint64_t mmio_access_type __attribute__((vector_size(32)));)? Is new[] guaranteed to yield 32-byte-aligned pointers in this case?
[00:13:08] *** Joins: badone (~badone@209.132.189.152)
[00:13:25] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93)
[00:18:35] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93) (Ping timeout: 252 seconds)
[00:23:38] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[00:23:38] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a gamedev community https://indiedevs.net/)
[00:32:48] *** Joins: Inline__ (~Inline@aftr-37-201-240-204.unity-media.net)
[00:32:51] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Read error: Connection reset by peer)
[00:34:47] *** Inline__ is now known as Inline
[00:38:39] *** Quits: paul424 (~tom@ip-5-172-236-186.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[00:42:01] *** Joins: vuks_ (~Vuks69@87-206-7-209.dynamic.chello.pl)
[00:43:09] *** Quits: vuks_ (~Vuks69@87-206-7-209.dynamic.chello.pl) (Remote host closed the connection)
[00:43:15] *** Quits: vuks (~Vuks69@87-206-7-209.dynamic.chello.pl) (Quit: Leaving)
[00:43:38] *** Joins: vuks (~Vuks69@87-206-7-209.dynamic.chello.pl)
[00:46:35] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93)
[00:50:32] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Quit: WeeChat 3.3)
[00:51:50] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93) (Ping timeout: 260 seconds)
[00:53:09] *** Quits: miklcct (~quassel@vps2.miklcct.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:53:45] *** Joins: miklcct (~quassel@vps.miklcct.com)
[00:54:31] *** Quits: nshire (~nshire@user/nshire) (Read error: Connection reset by peer)
[00:54:50] *** Joins: nshire (~nshire@user/nshire)
[00:58:10] *** Quits: Ronalds_Mazitis_ (~Ronalds_M@46.109.136.184) (Quit: Connection closed)
[01:02:20] *** Quits: Ivii (~Ivyy@2001:a62:4c3:8e01:226:6685:3dd4:7093) (Quit: Leaving)
[01:03:07] <LordKalma> !rq
[01:03:07] <nolyc> LordKalma: <CodePoint> { vector<bool> v{false}; cout << (v[0] = !v[0])<< v[0]; }
[01:03:19] <LordKalma> hum...
[01:03:24] <LordKalma> { vector<bool> v{false}; cout << (v[0] = !v[0])<< v[0]; }
[01:03:25] <geordi> truetrue
[01:11:07] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:15:43] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93)
[01:17:10] *** Quits: Leone (~Leo@69-165-148-197.dsl.teksavvy.com) (Read error: Connection reset by peer)
[01:24:09] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93) (Ping timeout: 268 seconds)
[01:27:27] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Ping timeout: 256 seconds)
[01:28:29] <hnOsmium0001[m]> is there anything wrong with this except undefined execution order? out of context quotes...
[01:29:47] *** Joins: Simplar (~quassel@188.163.93.76)
[01:30:18] <rpav> is the order of execution undefined there? i'm not even sure
[01:30:45] <rpav> i would assume it is without double-checking, but i would be unsurprised if it were well-defined
[01:31:52] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:32:02] *** cryptonull is now known as eck
[01:32:57] <LordKalma> why does `(v[0] = !v[0])` return true?
[01:33:01] <LordKalma> assignments return true?
[01:33:15] <rpav> assignments returned the assigned value
[01:33:41] <rpav> v is a vector<bool> containing a single false element
[01:34:16] <rpav> probably should have been written `(v[0] =! v[0])` for maximal confusion
[01:34:41] <rpav> "reverse not-equal operator returns the opposite of regular not-equal"
[01:35:52] <RandomReader> I... came to see what was happening
[01:35:58] <RandomReader> I will now back away slowly
[01:36:41] <rpav> :D
[01:36:42] <kalven> we'll be back later for another round of "90s guis!"
[01:37:23] *** Quits: robod34 (Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:37:48] <rpav> a fitting subtopic for a "90s language" channel!
[01:39:36] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:39:44] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:39:44] *** ChanServ sets mode: +v npaperbot
[01:42:31] *** Quits: Simplar (~quassel@188.163.93.76) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[01:49:44] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[01:51:07] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93)
[01:51:39] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[01:55:37] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93) (Ping timeout: 240 seconds)
[01:58:10] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Quit: Leaving)
[02:03:12] *** Quits: Itaru (~Itaru@ro2.flokinet.is) (Remote host closed the connection)
[02:03:22] *** Joins: pulse (~pulse@user/pulse)
[02:03:37] *** Joins: Itaru (~Itaru@ro2.flokinet.is)
[02:11:26] *** Joins: seninha (~seninha@user/seninha)
[02:12:02] *** Quits: Itaru (~Itaru@ro2.flokinet.is) (Remote host closed the connection)
[02:12:17] *** Joins: Itaru (~Itaru@ro2.flokinet.is)
[02:15:54] *** Joins: markong (~kvirc@dynamic-adsl-78-12-27-21.clienti.tiscali.it)
[02:16:01] *** Quits: markong (~kvirc@dynamic-adsl-78-12-27-21.clienti.tiscali.it) (Client Quit)
[02:24:48] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93)
[02:27:26] *** Quits: proller (~p@2a02:6b8:b081:a428::1:24) (Ping timeout: 245 seconds)
[02:37:32] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93) (Ping timeout: 240 seconds)
[02:42:34] *** Joins: proller (~p@2a02:6b8:b081:8806::1:34)
[02:42:51] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[02:44:38] *** Quits: magla (~gelignite@55d46610.access.ecotel.net) (Quit: Stay safe!)
[02:47:18] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:52:43] *** Quits: DSpider (DSpider@2a02:2f00:1ff:ffff::646c:60d3) (Quit: Leaving)
[02:55:18] *** Quits: nojhan (uid443807@id-443807.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[03:03:24] *** Joins: ferdna (~ferdna@user/ferdna)
[03:07:37] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 240 seconds)
[03:09:12] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:09:55] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93)
[03:15:07] <BurumaSerafuku> +_+
[03:16:17] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93) (Ping timeout: 240 seconds)
[03:42:09] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93)
[03:44:57] *** Quits: Itaru (~Itaru@ro2.flokinet.is) (Ping timeout: 240 seconds)
[03:58:27] <hnOsmium0001[m]> rpav: I thought it would be undefined, since you have 2 consequitive calls to operator<<, and one of them has side effect on v[0], which is used in both calls
[03:59:09] <hnOsmium0001[m]> there was a bunch of changes in c++20 or 17 regarding sequencing, but tbh I don't remeber anything other than parameters are now gaurenteed to be evaluated before function body
[04:06:32] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:21a3:4bf2:b994:55b1) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:08:27] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:09:06] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[04:16:53] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Ping timeout: 256 seconds)
[04:25:05] *** Quits: Hello72 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[04:25:25] *** Joins: Hello72 (~Hello71@wireguard/contributor/hello71)
[04:25:26] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[04:32:21] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:46:08] *** Joins: seninha (~seninha@user/seninha)
[04:46:18] *** Joins: adeliktas26 (~adeliktas@2001:16b8:226f:d100:e165:6b49:a559:970f)
[04:46:59] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 252 seconds)
[04:49:39] *** Quits: adeliktas (~adeliktas@2001:16b8:226f:d100:e165:6b49:a559:970f) (Ping timeout: 256 seconds)
[04:50:17] *** adeliktas26 is now known as adeliktas
[04:51:03] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Remote host closed the connection)
[04:56:18] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[04:58:12] *** Quits: malloy (~jimery@116.30.221.255) (Ping timeout: 250 seconds)
[05:00:16] *** Joins: malloy (~jimery@116.30.221.255)
[05:06:20] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[05:15:56] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[05:16:25] *** Joins: rajkosto (~rajkosto@178.220.241.244)
[05:22:48] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:9180:b80f:58c7:8de8) (Quit: Quit)
[05:29:46] *** Quits: pflanze (~pflanze@5-168-208-80-pool.fiber.fcom.ch) (Remote host closed the connection)
[05:30:08] *** Joins: pflanze (~pflanze@5-168-208-80-pool.fiber.fcom.ch)
[05:30:30] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[05:39:37] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:39:46] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:39:46] *** ChanServ sets mode: +v npaperbot
[05:40:59] *** Quits: vuks (~Vuks69@87-206-7-209.dynamic.chello.pl) (Read error: Connection reset by peer)
[05:50:17] *** Quits: rajkosto (~rajkosto@178.220.241.244) (Ping timeout: 240 seconds)
[06:05:53] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[06:07:18] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[06:08:41] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[06:20:25] *** Quits: celphi (sid97751@user/celphi) (Ping timeout: 256 seconds)
[06:20:50] *** Quits: greyblue9 (sid500829@id-500829.ilkley.irccloud.com) (Ping timeout: 260 seconds)
[06:21:56] *** Joins: greyblue9 (sid500829@id-500829.ilkley.irccloud.com)
[06:24:01] *** Joins: celphi (sid97751@user/celphi)
[06:26:35] *** Quits: celphi (sid97751@user/celphi) (Max SendQ exceeded)
[06:26:44] *** Joins: celphi (sid97751@user/celphi)
[06:39:07] *** Quits: Kebianizao (~Kebianiza@188.127.172.253) (Ping timeout: 250 seconds)
[06:39:19] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:41:54] *** Joins: adeliktas62 (~adeliktas@2001:16b8:22a8:8d00:98a5:dadf:3482:ec11)
[06:44:17] *** Joins: Kebianizao (~Kebianiza@188.127.160.11)
[06:45:15] *** Quits: adeliktas (~adeliktas@2001:16b8:226f:d100:e165:6b49:a559:970f) (Ping timeout: 256 seconds)
[06:45:59] *** adeliktas62 is now known as adeliktas
[06:46:50] <KombuchaKip> RandomReader: Indeed. I don't know why so few people use parallel execution.
[06:49:49] *** Quits: KombuchaKip (~kip@192.252.230.5) (Remote host closed the connection)
[06:50:12] *** Joins: KombuchaKip (~kip@192.252.230.5)
[06:50:39] *** Quits: pac1 (~pac1@pool-72-74-61-158.bstnma.fios.verizon.net) (Remote host closed the connection)
[06:51:31] <KombuchaKip> Question for whomever. I have a short block of code of half a dozen lines or so. I need to ensure some other cleanup code is run after it, regardless of whether the main block succeeded or not. In some other languages, like Python, there is a final block or something like that which can follow after try-catch blocks. C++ doesn't have anything like this, but I imagine there is some elegant syntactical sugar / idiom with C++17 for thi
[06:51:31] <KombuchaKip> s?
[06:56:03] <Stryyker> throw it in an object and use a destructor?
[06:59:12] <KombuchaKip> Stryyker: But what kind?
[07:03:43] <jkaye> KombuchaKip, you'd create the object yourself. This idiom is called RAII if you'd like to read more about it
[07:12:28] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[07:16:00] *** Joins: frost (~frost@user/frost)
[07:18:14] *** Quits: adeliktas (~adeliktas@2001:16b8:22a8:8d00:98a5:dadf:3482:ec11) (Quit: Client closed)
[07:21:13] *** Joins: rajkosto (~rajkosto@178-221-120-181.dynamic.isp.telekom.rs)
[07:29:36] <RandomReader> the C++ ideal is that all of your resources that need to be cleaned up are already in neatly-defined objects, so their destructors handle everything
[07:30:12] <RandomReader> but the pattern for when that isn't true is sometimes called "scope guard", which is just inventing a type that has the destructor you need
[07:33:50] <Stryyker> https://ricab.github.io/scope_guard/
[07:33:56] <RandomReader> here's a sample implementation for a C++ proposal: https://github.com/PeterSommerlad/SC22WG21_Papers/tree/master/workspace/P0052_scope_exit
[07:34:29] <RandomReader> (the proposal has been accepted for a future experimental spec, but will not be in the full standard anytime soon)
[07:35:02] *** Quits: shad0w (~shad0w@user/xshadow) (Ping timeout: 240 seconds)
[07:35:07] <RandomReader> what Stryyker posted should be a similar pattern
[07:40:16] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[07:50:57] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[07:51:47] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[07:51:48] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[07:54:02] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[08:02:54] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[08:08:37] *** Quits: jkaye (~jkaye@2601:281:8300:7530:d672:a7f5:a798:3393) (Ping timeout: 240 seconds)
[08:16:46] *** Joins: adeliktas (~adeliktas@2001:16b8:22a8:8d00:98a5:dadf:3482:ec11)
[08:17:21] *** Quits: adeliktas (~adeliktas@2001:16b8:22a8:8d00:98a5:dadf:3482:ec11) (Client Quit)
[08:24:11] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:21ba:a382:6b6:54c4)
[08:27:07] *** Quits: rajkosto (~rajkosto@178-221-120-181.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[08:27:13] *** Joins: rajkohaxor (~rajkosto@178-221-120-181.dynamic.isp.telekom.rs)
[08:32:55] *** Joins: adeliktas (~adeliktas@2001:16b8:22a8:8d00:98a5:dadf:3482:ec11)
[08:33:15] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[08:45:17] *** Quits: rajkohaxor (~rajkosto@178-221-120-181.dynamic.isp.telekom.rs) (Ping timeout: 240 seconds)
[08:53:38] *** Quits: adeliktas (~adeliktas@2001:16b8:22a8:8d00:98a5:dadf:3482:ec11) (Quit: Client closed)
[09:09:19] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[09:11:58] *** Joins: EdFletcher (~PKD@user/edfletcher)
[09:19:38] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[09:20:44] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[09:24:55] <Alipha> KombuchaKip: I made my own too. `cleanup` perhaps isnt the best name, heh. https://github.com/alipha/cpp/tree/master/cleanup
[09:31:57] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[09:39:37] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:39:45] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:39:45] *** ChanServ sets mode: +v npaperbot
[10:00:34] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:04:34] *** Quits: letto (~letto@188.26.158.104) (Quit: Konversation terminated!)
[10:06:38] *** Joins: letto (~letto@188.26.158.104)
[10:17:35] *** Quits: malloy (~jimery@116.30.221.255) (Quit: WeeChat 3.0)
[10:18:25] *** Quits: wille (~wille@static.140.85.76.144.clients.your-server.de) (Ping timeout: 256 seconds)
[10:30:16] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[10:40:39] *** Joins: wille (~wille@static.140.85.76.144.clients.your-server.de)
[10:41:01] *** Joins: malloy (~jimery@116.30.221.255)
[10:44:29] <xkoncek> is there a way to initialize an array with -1 without having to specify all values?
[10:45:28] <TinoDidriksen> Only if you make a helper. Otherwise, good ol' std::fill()
[10:45:47] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:34f4:d035:a23f:3ced)
[10:46:51] <xkoncek> or... GNU extension
[10:51:17] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 256 seconds)
[10:53:33] *** Quits: msk (~msk@103.213.213.70) (Ping timeout: 256 seconds)
[10:55:01] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[11:03:57] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Ping timeout: 240 seconds)
[11:06:42] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[11:08:46] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:34f4:d035:a23f:3ced) (Ping timeout: 260 seconds)
[11:09:00] *** Joins: sysctl (~sysctl@88.215.77.255)
[11:21:16] *** Quits: malloy (~jimery@116.30.221.255) (Ping timeout: 250 seconds)
[11:24:03] *** Joins: malloy (~jimery@116.30.221.255)
[11:35:00] *** Joins: andreasbuhr (~quassel@p549db299.dip0.t-ipconnect.de)
[11:35:00] *** Quits: andreasbuhr (~quassel@p549db299.dip0.t-ipconnect.de) (Client Quit)
[11:37:21] <ville> hnOsmium0001[m]: the change was that argument evaluation can't be interleaved. order is still unspecified.
[11:38:40] <ville> hnOsmium0001[m]: previously f(new aa{}, new bb{}) had the chance to interleave the allocations and the constructions
[11:40:19] <ville> hnOsmium0001[m]: this was in 17
[11:40:53] <ville> http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0145r3.pdf
[11:42:19] <ville> hnOsmium0001[m]: but since operators can be called with 2 different syntax you have 2 different order guarantees
[11:57:12] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:b082:aa65:4b23:c398)
[11:57:12] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:b082:aa65:4b23:c398) (Changing host)
[11:57:12] *** Joins: skapata (~Skapata@user/skapata)
[12:02:42] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[12:04:25] <KombuchaKip> jkaye: Yes, I am familiar with RAII. That's obvious, but I meant the best way of making it happen. The language has lambdas and many other tools in the STL.
[12:06:27] <KombuchaKip> Stryyker: Interesting template, the scope_guard. It would be cool if that was built into the STL.
[12:06:38] <KombuchaKip> RandomReader: Very cool.
[12:07:18] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:07:24] <KombuchaKip> Alipha: Yeah yours is very simple. This is a scope guard too, correct?
[12:08:18] <ville> KombuchaKip: you will want to equip your self with few things in general, especially if you deal with c libraries at all: 0) "defer/scope exit"-like functionality 1) generic guard utility type 2) generic type-erasing guard utility type
[12:08:44] * KombuchaKip nods
[12:08:56] <riksteri> what's type-erasing?
[12:10:03] <ville> riksteri: it's the idea of "hiding" a type of something. so for example std::function type-erases the "thing" it's holding internally
[12:11:07] <ville> riksteri: std::function<void()> f; could hold a void(*)() or the result of std::bind(). you can't tell from the outside
[12:11:22] <ville> hmm outside. from looking at the type of "f" i mean
[12:11:55] <ville> https://www.youtube.com/watch?v=tbUCHifyT24
[12:12:20] <ville> if you're interested to see how this may be achieved in couple different ways
[12:12:59] <riksteri> thanks
[12:14:25] <KombuchaKip> RandomReader: Is this related to the P0052 scope exit proposal? https://en.cppreference.com/w/cpp/experimental/scope_exit
[12:15:21] <ville> [p0052]
[12:15:21] <npaperbot> P0052R10: [Library] Generic Scope Guard and RAII Wrapper for the Standard Library <https://wg21.link/p0052r10> (by Peter Sommerlad, Andrew L. Sandoval) (2019-02-19) (Related: https://wg21.link/lewg6, https://wg21.link/p0052r10/github)
[12:17:15] *** Joins: robod34 (Username@79.113.195.239)
[12:22:23] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[12:23:54] <KombuchaKip> Alipha: What does this portion do? noexcept(noexcept(std::declval<Func>()()))
[12:38:25] <ville> it decides whether the function is noexcept or not
[12:39:30] <ville> noexcept keyword comes in two flavours: noexcept the specifier and noexcept the operator
[12:39:57] <ville> you are seeing both of them applied above
[12:46:15] <xkoncek> RAII-tracing
[12:47:19] <Haohmaru> is that the new raytracing?
[13:05:17] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[13:05:42] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[13:14:23] *** Joins: plastico (~plastico@neomutt/plastico)
[13:14:48] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[13:15:58] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[13:19:15] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:21:47] *** Joins: paul424 (~tom@ip-5-172-237-179.multi.internet.cyfrowypolsat.pl)
[13:23:58] *** Joins: etolier (~somewhere@122-199-43-68.ip4.superloop.com)
[13:24:21] *** etolier is now known as Guest9799
[13:39:38] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:39:47] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:39:47] *** ChanServ sets mode: +v npaperbot
[13:42:19] *** Joins: nojhan (uid443807@id-443807.lymington.irccloud.com)
[13:43:19] *** Joins: msk (~msk@103.213.213.70)
[13:45:06] *** Joins: Ronalds_Mazitis_ (~Ronalds_M@46.109.136.184)
[13:49:50] <LordKalma> https://code.visualstudio.com/blogs/2021/11/08/custom-notebooks?ocid=aid3021690
[13:50:01] <LordKalma> what a cool idea, integrating the notebook API into the core system
[13:52:32] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[13:59:36] *** Joins: Burgundy (~yomon@79.115.213.171)
[14:00:11] *** Joins: MarcoFe (~marcofe@net-5-88-237-237.cust.vodafonedsl.it)
[14:04:01] <PJBoy> uh
[14:04:15] <PJBoy> what's a notebook?
[14:04:33] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[14:04:49] <PJBoy> I tried reading the article, but I'm allergic to sales pitches
[14:04:52] <LordKalma> you never heard of jupyter notebooks?
[14:05:04] <PJBoy> I've heard of jupyter
[14:05:05] <LordKalma> it's the best way to do python scripting
[14:05:13] <PJBoy> it was some hot garbage
[14:05:26] <LordKalma> I write most of my experiments and processing in notebooks
[14:05:31] <LordKalma> inline plots and etc
[14:05:32] <PJBoy> some of the worst webdev I've ever seen
[14:05:40] <LordKalma> haha yes, not ideal on that regard
[14:05:44] <LordKalma> that's why I use them on vscode
[14:06:27] <PJBoy> there's no way I'm thinking of the same thing though
[14:06:55] <PJBoy> so this is a thing that plots graphs
[14:07:16] <LordKalma> no
[14:07:24] <LordKalma> it's code cells interleaved with markdown
[14:07:30] <LordKalma> inline output, like plots and shit
[14:07:32] <LordKalma> all great stuff
[14:07:39] <PJBoy> so it's like latex?
[14:08:43] <PJBoy> with some additional support for plotting graphs
[14:08:57] <PJBoy> you can produce latex with it >_>
[14:09:11] <LordKalma> https://hub.gke2.mybinder.org/user/ipython-ipython-in-depth-3lkb2p3p/notebooks/binder/Index.ipynb
[14:09:17] <LordKalma> it'll error out
[14:09:19] <LordKalma> click "here"
[14:09:23] <LordKalma> and wait (a bit)
[14:09:25] <PJBoy> and has support for multiple languages, huh
[14:10:06] <PJBoy> > Too many users running https://github.com/ipython/ipython-in-depth! Try again so on.
[14:10:14] <LordKalma> https://code.visualstudio.com/docs/datascience/jupyter-notebooks#_variable-explorer-and-data-viewer
[14:10:47] <LordKalma> even google cloud has jupyter notebooks
[14:10:53] <PJBoy> so it's like
[14:10:56] <Haohmaru> i look into this channel, to free my mind from SNEKs which crawl into every other channel.. and this is what i get
[14:11:03] <PJBoy> PHP
[14:11:12] <LordKalma> what?
[14:11:13] <PJBoy> but with support for many other scripting languages
[14:11:17] <LordKalma> php?
[14:11:19] <LordKalma> wut?
[14:11:23] <PJBoy> like it's a super generic template markup format
[14:11:31] <PJBoy> where you can inline code
[14:11:58] <LordKalma> https://www.man.com/sites/public/mangroup/content/research/alpha-tech_notebooker-jupyter-example.png
[14:12:00] <LordKalma> this is a good example
[14:12:09] <PJBoy> that looks like mathematica
[14:12:12] <LordKalma> yes!
[14:12:13] <LordKalma> more like that
[14:12:35] <PJBoy> with support for arbitrary coding languages
[14:12:40] <PJBoy> interesting
[14:12:47] <LordKalma> you can write some code, then you can write some markdown (you don't need that dumb render function)
[14:12:51] <LordKalma> matplotlib can output inline
[14:12:53] <LordKalma> pretty cool
[14:12:56] <PJBoy> can you take notes with it?
[14:13:06] <PJBoy> i.e. does the notebook name actually make sense?
[14:13:08] <LordKalma> if you can write markdown fast enough
[14:13:17] <LordKalma> you can even make presentations with it
[14:13:20] <LordKalma> with code running live
[14:13:34] <PJBoy> hm
[14:14:00] <LordKalma> it's notebook in the sense you're writing like "reports" with your code
[14:14:17] <LordKalma> for example, when I run some simualtion or something, I have all intermediate plots and stuff, all documented along the way
[14:14:35] <LordKalma> and I love the fact that, like, when I'm writing scripts, i can just fix a single cell and re-run it
[14:15:00] <PJBoy> isn't that how writing scripts goes anyway >_>
[14:15:13] <LordKalma> you're missing the point
[14:15:55] <PJBoy> it sounds like a really cool feature
[14:16:26] <PJBoy> but I don't think I would ever actually use it
[14:16:36] <PJBoy> :(
[14:16:37] <LordKalma> it's useful in my work
[14:16:52] <PJBoy> plus VS Code is still a hard sell outside of working on linux
[14:17:03] <PJBoy> but that said
[14:17:15] <PJBoy> I might have to give up on notepad++ soon
[14:17:17] <LordKalma> if you saw my extension list you wouldn't say that
[14:17:30] <PJBoy> it's gotten uselessly slow for me recently if I leave folding enabled
[14:18:04] <PJBoy> I realise you can do fancy stuff in this notepad thing
[14:18:10] <PJBoy> but I just don't think I ever would
[14:18:38] <PJBoy> there's only so much time you can justify spending on code for helping you write code
[14:18:49] <LordKalma> depends whether you have use for it
[14:18:55] <LordKalma> you don't have to code nothing to use notebooks
[14:19:03] <LordKalma> it's literally just writing code on cells
[14:19:10] <LordKalma> it's not a language
[14:19:21] <PJBoy> yeah but that's still coding
[14:19:28] <PJBoy> which was what I meant
[14:19:42] <PJBoy> I can see where it would be useful though
[14:20:10] <PJBoy> I've written some hard to debug algorithms before that would have massively benefited from some visualisations like that
[14:21:11] <LordKalma> yeah, that's pretty much it
[14:21:18] <LordKalma> I write a small bit, visualize it, next bit
[14:23:03] <PJBoy> ughghgh
[14:23:10] <PJBoy> stop making me consider VS Code as my main text editor
[14:23:15] <PJBoy> that's just cruel
[14:23:25] *** Quits: malloy (~jimery@116.30.221.255) (Quit: WeeChat 3.0)
[14:23:29] <PJBoy> it's a electron program
[14:23:38] <LordKalma> I like it because
[14:23:44] <LordKalma> "oh it's missing syntax for this lang"
[14:23:48] * LordKalma checks extensions
[14:23:49] <LordKalma> done
[14:26:08] <LordKalma> !fact
[14:26:09] <nolyc> LordKalma: The keyword template may not be applied to non-template members of class templates.
[14:27:45] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[14:28:16] <LordKalma> {} template <> class Foo { template void member(){};};
[14:28:16] <geordi> error: explicit specialization of non-template 'Foo'
[14:28:30] <LordKalma> {} template <typename T> class Foo { template void member(){};};
[14:28:30] <geordi> error: expected '<' before 'void'
[14:28:39] <LordKalma> don't get it
[14:30:27] <PJBoy> it's like for uh
[14:31:32] <PJBoy> { S<void>().template f<void>(); } template<typename T> struct S { template<typename TT> void f() {} };
[14:31:33] <geordi>  
[14:31:50] <PJBoy> that `template` keyword in the main function
[14:32:19] <PJBoy> { S<void>().template f(); } template<typename T> struct S { void f() {} };
[14:32:19] <geordi> error: 'S<T>::f() [with T = void]' is not a template
[14:32:25] <PJBoy> and that's the thing that doesn't work
[14:32:30] *** Joins: shad0w (~shad0w@user/xshadow)
[14:33:25] <PJBoy> very occasionally you do need to specify that template keyword
[14:33:30] <LordKalma> never saw `.template`
[14:33:45] <PJBoy> yeah it doesn't come up much
[14:36:17] *** Quits: proller (~p@2a02:6b8:b081:8806::1:34) (Ping timeout: 240 seconds)
[14:37:31] <PJBoy> {} template<typename T> void f() {  using A = allocator<T>::rebind<int>::other; }
[14:37:31] <geordi> error: non-template 'rebind' used as template
[14:37:35] <PJBoy> {} template<typename T> void f() {  using A = allocator<T>::template rebind<int>::other; }
[14:37:36] <geordi>  
[14:37:44] <PJBoy> there's an example of where it's required
[14:39:03] <PJBoy> could have simplified by not including `::other`
[14:39:39] <PJBoy> point is that it's a allocator<T> is a dependent type, depending on that template parameter T
[14:39:43] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[14:40:05] <PJBoy> and so you have to tell the compiler that rebind is a template, the same way sometimes you have to tell the compiler something is a typename
[14:40:31] <PJBoy> 'cause it has no idea what allocator<T> is until you instantiate that template
[14:41:21] *** Joins: nshire_ (~nshire@47.146.41.156)
[14:42:17] *** Quits: nshire (~nshire@user/nshire) (Ping timeout: 240 seconds)
[14:43:02] *** Quits: MaddHatter (~maddhatt@user/maddhatter) (Ping timeout: 240 seconds)
[14:43:49] *** Joins: MaddHatter (~maddhatt@user/maddhatter)
[14:44:37] *** Quits: MarcoFe (~marcofe@net-5-88-237-237.cust.vodafonedsl.it) (Quit: Konversation terminated!)
[14:45:47] *** Joins: MarcoFe (~marcofe@net-5-88-237-237.cust.vodafonedsl.it)
[14:53:13] *** Quits: syrius (syrius@titan.stormtek.net) (Ping timeout: 268 seconds)
[14:55:49] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[14:57:12] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[14:59:20] *** Joins: syrius (syrius@titan.stormtek.net)
[15:07:40] <Haohmaru> !fact
[15:07:41] <nolyc> Haohmaru: An allocation function can be a function template.
[15:12:19] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Quit: Lost terminal)
[15:15:16] *** Quits: paule32 (~paule32@user/paule32) (Quit: Leaving)
[15:15:36] *** Joins: paule32 (~paule32@user/paule32)
[15:16:45] <PJBoy> only placement new though
[15:16:53] <PJBoy> the non-allocating allocation function >_>
[15:23:24] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[15:23:30] <PJBoy> { new (0) S; } struct S { template<typename T> static void* operator new(size_t, T) { BARK; return {}; } };
[15:23:30] <geordi> S::operator new(size_t, T) [with T = int; size_t = long unsigned int]
[15:25:14] <PJBoy> maybe should write these down and make a C++ standard mirror that inlines these examples
[15:41:27] <PJBoy> ugh these mixed feelings about VS Code are killing me
[15:41:46] <PJBoy> every time I use it, I feel pain
[15:41:52] <PJBoy> but then it has all these cool extensions
[15:42:31] <PJBoy> also the uh
[15:42:48] <PJBoy> "Cmake: Configure On Open" option in the CMake extension doesn't work
[15:43:55] *** Joins: adeliktas (~adeliktas@2001:16b8:22a8:8d00:98a5:dadf:3482:ec11)
[15:45:36] <johnny> why do you feel pain?
[15:45:47] <johnny> hmm the configure on open always worked for me
[15:46:07] <PJBoy> it's unchecking it that has no effect
[15:46:55] <PJBoy> the first bit of pain I always feel is from using the side panel
[15:47:11] <PJBoy> the icons are vague as hell and there's no text
[15:47:23] <PJBoy> and it doesn't autohide
[15:48:09] <PJBoy> though I'll confess that I haven't gone through all the preferences yet
[15:51:04] *** Joins: pulse (~pulse@user/pulse)
[15:51:26] <PJBoy> the second bit of pain is that not all the commands are available outside of the arbitrary command entry window
[15:51:46] <PJBoy> the crtl+shift+p thing
[15:53:59] *** Joins: Roughy (~mdaw45ns@user/roughy)
[15:56:39] *** Joins: Leone (~Leo@69-165-148-197.dsl.teksavvy.com)
[15:56:43] *** Quits: shad0w (~shad0w@user/xshadow) (Ping timeout: 256 seconds)
[15:58:16] *** Quits: Guest9799 (~somewhere@122-199-43-68.ip4.superloop.com) (Quit: No Ping reply in 180 seconds.)
[15:58:28] *** Quits: Ronalds_Mazitis_ (~Ronalds_M@46.109.136.184) (Quit: Connection closed)
[15:59:38] *** Joins: etolier (~somewhere@122-199-43-68.ip4.superloop.com)
[16:00:02] *** etolier is now known as Guest4472
[16:03:25] *** mattgirv_ is now known as mattgirv
[16:06:42] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[16:07:40] <LordKalma> I've had configure on open disabled since ever...
[16:07:48] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[16:08:44] <johnny> PJBoy, could be a bug if it doesn't work for you then.. i never bothered disabling it
[16:09:08] <PJBoy> could be
[16:09:24] <johnny> i wonder if there's a command to print all the commands available in the command pallate
[16:09:36] <PJBoy> fwiw it's both disabled in my "user" and "workspace" settings
[16:11:13] <johnny> hmm do they define the correct schema for the config options? i wonder if it's meant to be a true bool, or a 1/0 or a string
[16:18:42] <PJBoy> shame on you visual studio https://puu.sh/IwS8x/d02eaa1063.png
[16:18:55] <PJBoy> that's the default generated main source file when you create a new cmake project
[16:19:25] <PJBoy> it immediately commits three C++ sins
[16:20:42] <johnny> 3?
[16:21:04] <PJBoy> yeah
[16:21:08] <PJBoy> thought you could argue for more
[16:21:11] <PJBoy> *though
[16:21:11] <johnny> i'm not sure why it's not named main.cpp if it's a fresh project
[16:21:29] <PJBoy> it's named after the project itself, but yeah I like the main.cpp convention myself
[16:22:09] <johnny> ah.. i realize the context i've seen that.. it's always when the project is just the one file
[16:22:23] <johnny> that's the only time i've ever seen it
[16:22:38] <PJBoy> I've seen a number of projects use project-name.cpp
[16:22:49] <johnny> when they have more than one file?
[16:23:01] <PJBoy> yeah
[16:23:09] <johnny> that would really irritate me on a fundamental level
[16:23:51] <johnny> when i first started writing code.. i did it with php and the entry point was always index.php... anything i did always used the front controlle pattern
[16:24:10] <johnny> so from the beginning i didn't create a big mess
[16:26:00] *** Joins: meator (~meator@user/meator)
[16:26:51] <PJBoy> honestly either way is fine by me
[16:27:00] <PJBoy> the projects I hate most are the ones that obscure where the main entry pointis
[16:27:49] <cbreak> the main entry point should be project/project.hpp
[16:30:18] <PJBoy> can't tell if serious
[16:30:43] <cbreak> that's how I like to design my projects.
[16:30:59] <cbreak> a nice header with the primary public interface
[16:31:05] <PJBoy> the entry point in a header? :/
[16:31:13] <cbreak> sure. I write libraries. :)
[16:31:18] <PJBoy> ahhh
[16:31:31] <PJBoy> I need to write a library at some point
[16:31:40] <PJBoy> feels like a ridiculous gap in my knowledge
[16:31:47] <cbreak> it's much nicer than dealing with UI
[16:32:52] <cbreak> for a program, you'll have many entry points, maybe .ui files or what ever you use to create your GUI, are entry points for user input. Or where ever you parse the CLI. Or where ever you process network packets
[16:32:58] <cbreak> it's all so messy.
[16:33:07] <cbreak> much simpler when writing a library, usually :)
[16:33:23] <cbreak> even when I write programs, I often try to write a library first, and make a program that uses the lib later.
[16:33:37] <PJBoy> that's a pattern I've seen a few times
[16:34:00] <PJBoy> it's a pretty good way to go in general if you can be bothered
[16:35:05] <cbreak> yeah. And it makes writing integration tests easier.
[16:35:18] <cbreak> (or unit tests, for a large enough definition of "unit" :D)
[16:38:35] <LordKalma> all tests are integration tests if you just test in production
[16:53:22] *** Joins: proller (~p@2a02:6b8:0:40c:316:ce17:649f:92ab)
[16:55:05] *** Quits: mitch0 (~mitch@84-236-20-119.pool.digikabel.hu) (Ping timeout: 256 seconds)
[16:55:31] *** Quits: baltazar (~baltazar@84-236-20-119.pool.digikabel.hu) (Ping timeout: 250 seconds)
[16:56:18] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:56:47] *** Joins: mitch0 (~mitch@84-236-9-28.pool.digikabel.hu)
[16:56:57] *** Quits: meator (~meator@user/meator) (Ping timeout: 240 seconds)
[16:57:15] *** Joins: baltazar (~baltazar@84-236-9-28.pool.digikabel.hu)
[16:58:42] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[17:00:06] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[17:00:30] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[17:00:52] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[17:01:02] *** Joins: Ronalds_Mazitis_ (~Ronalds_M@46.109.136.184)
[17:03:22] *** Quits: paul424 (~tom@ip-5-172-237-179.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[17:07:20] <rpav> i find it more useful to write the project, but when you need <thing> add it to a library unless it's super-specific, and then have simple bits of code that you run at each step as you're writing it, then make those into tests by slapping some REQUIRE() and maybe fleshing them out a bit
[17:08:06] <rpav> that way you don't get into "what if i need..." mode, integrate it into your code pretty quickly and see what you actually need
[17:09:41] <LordKalma> what if I need mode is one of my major issues
[17:09:46] <LordKalma> been much better at it, but yeah
[17:09:58] <LordKalma> I always want to write the cleanest most general thing on the first run
[17:10:04] <LordKalma> just to end up overwelmed and write nothing
[17:10:36] <LordKalma> I once did say in a job interview when the HR dude asked me for the personal defect "hate MVPs"
[17:15:44] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[17:15:54] <rpav> yeah it can be "i think i might need.." kitchensinkism but that can also be ultimately not really understanding the problem or necessary solution
[17:16:23] <rpav> using something in tandem with writing it can avoid having to focus on MVP but also the other
[17:17:03] <LordKalma> in my case, I very often happen to be discovering/deciding what I need as I'm writing
[17:18:07] *** Joins: seninha (~seninha@user/seninha)
[17:20:12] <rpav> that can be useful too
[17:20:35] <rpav> really if you use it write and sortof splat out a solution as fast as possible it's the _most_ useful thing, because then you find what you need fast
[17:21:36] *** Joins: fluter (~fluter@user/fluter)
[17:27:26] *** Quits: frost (~frost@user/frost) (Ping timeout: 245 seconds)
[17:28:31] *** Quits: mitch0 (~mitch@84-236-9-28.pool.digikabel.hu) (Ping timeout: 256 seconds)
[17:29:05] *** Quits: baltazar (~baltazar@84-236-9-28.pool.digikabel.hu) (Ping timeout: 256 seconds)
[17:33:50] <kapil> ubuntu clang-12 using gcc 9. how to install libstdc++ and make clang it use libstdc++? or how to make clang use gcc 11 ?
[17:36:00] <rpav> 1) avoid ubuntu 2) clang --gcc-toolchain=$PATH to point it at a different gcc
[17:36:12] <rpav> building your own might be a good idea
[17:39:38] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:39:46] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:39:46] *** ChanServ sets mode: +v npaperbot
[17:39:48] <kapil> thank you so much
[17:41:30] *** Joins: meator (~meator@user/meator)
[17:48:09] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Remote host closed the connection)
[17:48:16] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[17:48:19] <PJBoy> clang uses libstdc++ by default AFAIK
[17:48:33] <PJBoy> if not then `-stdlib=libstdc++`
[17:52:52] <Haohmaru> liblibstdc++.a
[17:57:14] <pulse> I'm tempted to make a library called liblibliblib
[17:59:26] <Haohmaru> do it
[17:59:39] <rpav> there's libib, so you do -lib
[18:00:19] <Haohmaru> maybe i should make a libol
[18:00:41] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Read error: Connection reset by peer)
[18:01:50] <Haohmaru> !fact
[18:01:51] <nolyc> Haohmaru: The effect of dereferencing an iterator that has been invalidated is undefined.
[18:02:11] <pulse> What about dereferencing a validated iterator
[18:02:13] <Haohmaru> undefined effect (UE)
[18:05:30] *** Joins: mitch0 (~mitch@91-83-35-151.pool.digikabel.hu)
[18:05:55] *** Joins: baltazar (~baltazar@91-83-35-151.pool.digikabel.hu)
[18:06:44] *** Joins: jkaye (~jkaye@2601:281:8300:7530:e699:4743:67a2:216e)
[18:07:11] <PJBoy> it's so hard to hack together a cmake script ;_;
[18:08:03] <rpav> what's hard?
[18:08:17] <rpav> there are some annoying things but it has a ton of useful utilities
[18:08:53] <PJBoy> trying to make a dummy project that has a Makefile project as a dependency
[18:09:27] <rpav> make a FindXXX.cmake?
[18:09:54] <rpav> you don't really need to care about the target project, just write a few lines for find_package() to do its thing
[18:10:13] <PJBoy> so I have a ./lib/lib.cpp whose makefile is `g++ -o lib.obj -c lib.cpp`
[18:10:28] <PJBoy> and the first thing I tried was a `add_custom_target(lib COMMAND make WORKING_DIRECTORY lib)`
[18:11:00] <PJBoy> but it's getting increasingly clear that trying a command that kinda looks right isn't gonna help me out too much
[18:11:36] <rpav> https://cmake.org/cmake/help/latest/guide/using-dependencies/index.html#libraries-not-providing-config-file-packages
[18:11:58] <PJBoy> thanks
[18:12:23] <rpav> if it's a simple-enough library you may be better off writing a simple CMakeLists.txt for it
[18:12:39] <rpav> i've done that for a few things rather than deal with their crap in addition to cmake's crap
[18:13:00] <PJBoy> it's not in practice
[18:13:16] <PJBoy> but this dummy project is just for a bug report
[18:13:24] <rpav> ah
[18:13:42] <kapil> rpav, is CentOS Stream is recommanded?
[18:13:56] <rpav> kapil: recommended for what?
[18:14:04] <kapil> for latest packages
[18:14:56] <rpav> if i were recommending a dist, it would be arch, because while it's a bit of a pain to set up, it's the least pain from then on, and packages are mostly as bleeding edge as you want (AUR often has git builds)
[18:15:35] <kapil> Thanks
[18:15:45] <rpav> i'd recommend nixos except i haven't really used it myself, and i'm not sure how much it really covers
[18:15:57] <msk> rpav +1
[18:17:17] *** Quits: MaddHatter (~maddhatt@user/maddhatter) (Ping timeout: 240 seconds)
[18:17:24] *** Joins: MaddHatter (~maddhatt@user/maddhatter)
[18:20:22] <cbreak> I like ubuntu. It's popular and therefore well supported and documented, and rather simple.
[18:20:43] <cbreak> I wouldn't trust redhat after their cancelation of centos
[18:24:36] <rpav> ubuntu is a bit of a pain .. easy gui install if you have a very conventional setup, but a lot of halfassed and outdated packages, and for whatever reason it's all noticeably laggier than other dists
[18:24:55] <rpav> e.g. they can never build llvm+clang right for whatever reason
[18:26:18] <cbreak> it's outdated because it's stable
[18:26:33] <cbreak> major versions only change every 6 months, or every 2 years if you're on LTS
[18:26:41] <cbreak> stable as in version-stable
[18:26:53] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:28:05] <ville> kapil: arch linux is worth looking at
[18:29:09] *** Quits: MaddHatter (~maddhatt@user/maddhatter) (Ping timeout: 256 seconds)
[18:29:45] <ville> kapil: often lot of crap is packaged for it, and if it's not then writing a package your self is dead easy most of the time, which you can then install locally
[18:29:51] <rpav> arch is nice because you're highly likely to find everything you want, including various obscure packages, already with packaging and install config
[18:30:02] <rpav> yea
[18:30:40] *** Joins: MaddHatter (~maddhatt@user/maddhatter)
[18:31:20] <kapil> ville, thank you so much
[18:31:52] <rpav> i need to check out NixOS though .. i like the theory but i also like having a zillion packages and an extensive wiki that corresponds to the state of the dist
[18:35:57] *** Quits: meator (~meator@user/meator) (Ping timeout: 256 seconds)
[18:38:53] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[18:39:21] *** Quits: mitch0 (~mitch@91-83-35-151.pool.digikabel.hu) (Ping timeout: 256 seconds)
[18:39:32] *** Quits: baltazar (~baltazar@91-83-35-151.pool.digikabel.hu) (Ping timeout: 240 seconds)
[18:40:05] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:9180:b80f:58c7:8de8)
[18:41:14] *** Joins: mitch0 (~mitch@178-164-190-44.pool.digikabel.hu)
[18:41:38] *** Joins: baltazar (~baltazar@178-164-190-44.pool.digikabel.hu)
[18:45:51] *** Quits: mitch0 (~mitch@178-164-190-44.pool.digikabel.hu) (Client Quit)
[18:46:18] <rpav> i feel like the inefficiencies representing graphs implies something fundamental
[18:50:20] *** Joins: mitch0 (~mitch@178-164-190-44.pool.digikabel.hu)
[18:54:07] <BurumaSerafuku> wut
[18:58:00] *** Quits: Ronalds_Mazitis_ (~Ronalds_M@46.109.136.184) (Quit: Connection closed)
[19:02:30] <xkoncek> isn't nixos superceded by guix os?
[19:02:36] <xkoncek> guix SD
[19:03:22] <rpav> not afaict, separate thing
[19:03:47] *** Quits: Guest1693 (~vin@cortana.cs.wisc.edu) (Quit: WeeChat 2.8)
[19:03:53] <rpav> guix seems more like "the official distribution for gnu hurd" ;)
[19:06:06] <Alipha> KombuchaKip: ~cleanup is noexcept if Func's operator() is noexcept: https://github.com/alipha/cpp/blob/master/cleanup/cleanup.hpp#L9
[19:06:07] <ville> guix was based on nix, but then switched to their own thing at some point
[19:12:34] *** Quits: Roughy (~mdaw45ns@user/roughy) (Read error: Connection reset by peer)
[19:17:49] *** Quits: proller (~p@2a02:6b8:0:40c:316:ce17:649f:92ab) (Ping timeout: 240 seconds)
[19:18:54] *** Quits: tct (~tct@8.200.173.83.static.wline.lns.sme.cust.swisscom.ch) (Quit: ZNC 1.8.2 - https://znc.in)
[19:19:59] *** Joins: Roughy (~mdaw45ns@ti0090a400-4467.bb.online.no)
[19:20:02] *** Quits: Roughy (~mdaw45ns@ti0090a400-4467.bb.online.no) (Changing host)
[19:20:02] *** Joins: Roughy (~mdaw45ns@user/roughy)
[19:23:06] *** Joins: tct (~tct@8.200.173.83.static.wline.lns.sme.cust.swisscom.ch)
[19:23:13] *** Quits: tct (~tct@8.200.173.83.static.wline.lns.sme.cust.swisscom.ch) (Remote host closed the connection)
[19:26:41] *** Joins: tct (~tct@8.200.173.83.static.wline.lns.sme.cust.swisscom.ch)
[19:28:34] *** Quits: shailangsa (~shailangs@host86-186-127-128.range86-186.btcentralplus.com) (Ping timeout: 260 seconds)
[19:35:27] *** Joins: meator (~meator@user/meator)
[19:46:28] *** Joins: proller (~p@2a02:6b8:0:40c:bc68:65ed:247f:f6b)
[19:49:11] *** Joins: markong (~kvirc@213.146.188.203)
[19:52:02] *** Quits: proller (~p@2a02:6b8:0:40c:bc68:65ed:247f:f6b) (Ping timeout: 240 seconds)
[19:56:46] <MaddHatter> if I'm using a pointer-to-member-function in a template, it fails if the template is expanded with a type whose parent has the function in question rather than the type used in the template itself. Is there a std::something-or-other I can wrap that in so it will match against the template type or any of its parents?
[19:57:17] *** Quits: nojhan (uid443807@id-443807.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[19:57:56] *** Joins: shailangsa (~shailangs@host86-186-127-224.range86-186.btcentralplus.com)
[19:59:54] *** Quits: MarcoFe (~marcofe@net-5-88-237-237.cust.vodafonedsl.it) (Quit: Konversation terminated!)
[20:07:10] <rpav> avoid pointer-to-member-function?
[20:08:26] <MaddHatter> that doesn't work, since the whole point of the template is to check that
[20:12:54] *** Joins: proller (~p@2a02:6b8:0:40c:d37a:c267:9473:55b8)
[20:14:39] <Alipha> MaddHatter: can you write a testcase? sounds like perhaps you could template the member function pointer's class and then check std::is_base_of or something, but i'm not quite sure what your goal is
[20:17:56] *** Quits: Trollmann (~Trollmann@user/trollmann) (Quit: ZNC - https://znc.in)
[20:18:31] *** Joins: Trollmann (~Trollmann@user/trollmann)
[20:23:53] <rpav> ^
[20:24:13] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[20:24:43] <rpav> although i think i might understand the problem more with that clarification but
[20:28:20] <rpav> also _maybe_ how to check if `struct B : A` implements a member function specifically and doesn't just inherit it
[20:28:27] *** Joins: xkuru (~xkuru@user/xkuru)
[20:31:46] <rpav> actually is there even a way to take a "symbol" (for lack of better word) and "make" a member function name out of it
[20:35:29] <MaddHatter> Alipha: https://ideone.com/pR1VL4 approximates it
[20:36:38] <MaddHatter> class MyBase { void GetName(std::string&; }; class MyDerived : public MyBase { }; and hasname<MyBase> will have value 3, not value 1
[20:36:59] <MaddHatter> oops. hasname<MyBase> has value 1 but hasname<MyDerived> has value 3
[20:37:18] <MaddHatter> I want to change hasname such that hasname<MyDerived> is 1
[20:38:15] *** Quits: proller (~p@2a02:6b8:0:40c:d37a:c267:9473:55b8) (Remote host closed the connection)
[20:38:47] <rpav> ok you _are_ just checking for one specific member function then (e.g. `GetName`) and not trying to write something like `implements<C, GetName>`
[20:39:49] <MaddHatter> is "implements" a thing? Because that sounds like what I want
[20:40:10] <rpav> no
[20:40:10] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:40:38] *** Joins: proller (~p@2a02:6b8:0:40c:4e00:2ac2:e082:4525)
[20:40:44] <rpav> i'm fairly sure it's not possible to specify a "symbol" like GetName and splice it into `C::GetName`
[20:41:02] <MaddHatter> I did stumble into https://stackoverflow.com/questions/8709340/can-the-type-of-a-base-class-be-obtained-from-a-template-type-automatically which looks promising
[20:41:08] <rpav> (mostly because there is no such thing as a "symbol" necessary here)
[20:43:37] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:21ba:a382:6b6:54c4) (Ping timeout: 240 seconds)
[20:43:37] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[20:43:40] <rpav> that said also why do you need this, because likely there are better ways to do _that_
[20:45:40] <MaddHatter> I'm working with an API that provides multiple ways to GetName for its various types, and all I care about is getting the name back. I don't want to have to write a 20-line if/else-if/switch/some-other-type-check-conditional every time I just want the name of a thing
[20:45:47] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:21ba:a382:6b6:54c4)
[20:46:31] <MaddHatter> and since the compiler knows the types at compile time, it's kind of dumb to defer that conditional to runtime if I don't have to
[20:46:47] <rpav> right so why don't you write an overloaded function `std::string GetNameFrom(Type&)`
[20:47:11] <rpav> a handful of implementations and easily extended and no templating member-function-checking madness
[20:47:17] <MaddHatter> because I'd have to write a whole lot of them, and the compiler can write all 3000-however many of them for me instead
[20:47:35] <rpav> if it can, how do they otherwise differ?
[20:47:52] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[20:48:28] <MaddHatter> all the types implement one of three or four version of getname, hence the template up there that automatically checks which one the type implements (and then can dispatch appropriately)
[20:48:49] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[20:49:08] <MaddHatter> and bonus, if a new type is added or changed, the template automagically knows
[20:49:24] <MaddHatter> (or will fail at compile time because it doesn't match anything it knows about)
[20:53:12] *** Joins: Simplar (~quassel@188.163.93.76)
[20:54:02] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:dc8:8e33:a486:95b)
[20:54:16] <Alipha> MaddHatter: what version of c++ are you targeting? because that's very old school SFINAE technique
[20:54:39] <MaddHatter> Alipha: It has to span c++11 up through c++23
[20:55:37] <MaddHatter> although if a solution exists for only c++20 or something, I can probably figure it out from there
[20:56:48] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[20:58:23] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[21:00:33] <Alipha> MaddHatter: this is c++11 or later. i'm not sure what's wrong with your code--it'll take more effort to figure that out than i care to do. plus this is cleaner: https://wandbox.org/permlink/f2lJXgn3xaaM36N2
[21:02:31] <rpav> https://godbolt.org/z/n3xP84d73 <- this does what you want with a simple-ish overload
[21:02:34] <MaddHatter> I probably wrote this originally on c++03 before c++11 was an option, so decltype might not have originally bene an option
[21:02:43] <rpav> it's 17 but only becuase _t's and _v's
[21:02:48] <rpav> or maybe that's 14
[21:03:18] <MaddHatter> (we only recently set c++11 as the floor instead of c++03; it's nice to finally rely on move semantics)
[21:03:22] <Alipha> MaddHatter: do you care about matching exact function signature?
[21:03:46] <MaddHatter> what do you mean by "matching exact"?
[21:03:48] <Alipha> MaddHatter: note that mine also fails if GetName is overloaded
[21:04:16] <rpav> from the above he wants to do what the function overloaded version does .. i.e. "just get the name, and handle a few variations"
[21:04:18] <Alipha> MaddHatter: `void GetName(std::string&);` vs `void GetName(int);` or something
[21:04:22] <MaddHatter> I can't think of a case were getname would be overloaded. That wouldn't make sense.
[21:04:58] <rpav> (note the version i posted can be extended to call _any_ function, not just foo / GetName .. you could call get_name() or whatever)
[21:05:05] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[21:05:42] <MaddHatter> yeah, it needs to be able to tell GetName(std::string&) from GetName(SomeType, std::string&) from GetName(AnotherTYpe, std::string&)
[21:05:54] <rpav> MaddHatter: right, see
[21:06:02] <rpav> ..the example i posted :p
[21:06:25] <rpav> doFoo(a); doFoo(b); // calls a.foo() and b.foo(42);
[21:06:52] <MaddHatter> no single type will have multiple getnames, but A might have #2 and B might have #3
[21:07:26] <PJBoy> I'm still really lost by this whole problem
[21:08:03] <rpav> PJBoy: it's a simple "there are A, B, and C with slightly different interfaces for 'foo', and i just want foo"
[21:08:45] <Alipha> fyi, i "c++11-ified" rpav's example: https://godbolt.org/z/8hWov8n7K
[21:09:04] <MaddHatter> yeah, is_same is c++11, so I must have written this originally for 03
[21:09:09] <rpav> PJBoy: except more liuke, "there are Ts... with a few varying interfaces for 'foo', and i just want foo for any T"
[21:09:23] <PJBoy> so like
[21:09:27] *** Joins: Swemole (~Swemole@meta.ros.sgsnet.se)
[21:09:39] <Alipha> a different technique to identify different signatures, but with more "wiggle room" on the exact signature: https://wandbox.org/permlink/4IOytcAprhtafaaf
[21:09:47] <PJBoy> [](auto obj, auto... args) { return obj.foo(args...); }?
[21:10:06] <rpav> no since that's no different than its body
[21:11:07] <PJBoy> idk then
[21:11:24] <rpav> afaict the goal is to provide a simple interface to an arbitrary class with a certain predefined set of interfaces, e.g. `getName()`, `getName(int, string)` ...
[21:12:31] <MaddHatter> Alipha: prettier implementation, but still the same problem, I think. If foo is defined on a base class instead of directly on the template type, it fails.
[21:12:33] <PJBoy> and this interface will handle plugging in arguments when the arbitrary class doesn't have a prototype for getName without those parameters?
[21:13:19] <PJBoy> in your example, for example, it will handle plugging in 42 for the int argument, because struct B doesn't have a nullary foo?
[21:13:34] <MaddHatter> PJBoy: yes. The arguments that aren't part of the lowest-common-denominator interface have sensible defaults that can be used
[21:14:06] <PJBoy> you couldn't actually just use default arguments in your classes' getNames could you?
[21:14:39] <MaddHatter> I don't get to define the API. Some vendor has already done that.
[21:14:44] <PJBoy> ok
[21:15:06] <PJBoy> ok I think I might be up to speed
[21:15:53] <PJBoy> and you said each class only implements one getName overload
[21:16:01] <MaddHatter> right
[21:16:19] <Alipha> MaddHatter: i'm not sure what problem you're running into? because GetName is defined on the base class. and HasGetAName<MyDerived>::value is still returning true. i added a template to MyDerived, but that didn't change anything: https://wandbox.org/permlink/fxsUhFNcFfwIMus3
[21:16:35] <MaddHatter> https://godbolt.org/z/6nn7E79Kq
[21:17:49] <PJBoy> that error makes sense
[21:18:43] <PJBoy> I guess for the sfinae you'd want to separate out the class from the function pointer
[21:19:32] <PJBoy> ok but that error implies that there's a class that doesn't implement getName
[21:19:46] <PJBoy> so all classes implement up to 1 getName is it?
[21:20:10] <Alipha> oh yeah. so... you won't be able to do rpav's technique
[21:20:13] <PJBoy> do we have to consider multiple inheritence?
[21:21:03] <MaddHatter> I'm not sure whether there's any multiple inheritance or not. Let's just say no for now?
[21:21:25] <PJBoy> so each foo hides the base class foos
[21:21:52] <MaddHatter> not all. Some are directly class members and some are inherited
[21:22:02] <MaddHatter> (mostly direct, actually)
[21:22:26] <MaddHatter> because the original thing I posted way up there has been working 80% of the time and it doesn't check inherited
[21:22:35] <PJBoy> each getName hides all base class getNames I mean
[21:23:54] <MaddHatter> I'm lost on what you're asking. There's no virtual functions.
[21:25:27] <Alipha> MaddHatter: https://wandbox.org/permlink/kh9ZxDaz7tRUUYVU
[21:26:36] <MaddHatter> I don't think I've seen declval before
[21:26:51] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[21:28:06] <Alipha> yeah. std::declval<int>() is kinda overkill--you could just write 1 or something instead--but std::declval<T>() just creates an object of type T to be used in unevaluated contexts. you could write just T() instead, but then that assumes T has a default constructor.
[21:28:29] <Alipha> std::declval<T>() just gives you a T without any assumption about how to create it
[21:28:41] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[21:28:51] <MaddHatter> yeah, seems like a useful thing. Maybe not for 'int', but others :-)
[21:28:59] <Alipha> "unevaluated contexts", e.g., in decltype or sizeof
[21:29:51] <Alipha> so `std::declval<T>().foo(std::declval<int>())` is basically just doing `myT.foo(1)` and checking to see if that's a valid expression
[21:30:03] *** Joins: plastico (~plastico@neomutt/plastico)
[21:31:25] <PJBoy> https://godbolt.org/z/17xEPcb8z is what I got
[21:32:28] <MaddHatter> oh, nice
[21:34:28] <MaddHatter> thank you all for the insight
[21:35:37] <PJBoy> and then in C++20 it's just dead simple https://godbolt.org/z/c6cfnTb5b
[21:36:10] <PJBoy> which is what Alipha's solution emulates
[21:36:13] *** Quits: letto (~letto@188.26.158.104) (Quit: Konversation terminated!)
[21:37:36] <rpav> oh, yeah, declval if that's necessary
[21:37:57] <MaddHatter> I didn't realize you could just throw requires into a body like that
[21:38:07] <rpav> actually it's pretty useful that &C::foo doesn't work because it's explicitly C and doesn't consider base classes
[21:38:12] *** Joins: letto (~letto@188.26.158.104)
[21:38:38] <PJBoy> yeah requires expressions work anywhere that bools do
[21:39:25] <PJBoy> not to be confused with requires statements that have to be tethered to template declarations somehow
[21:39:39] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:39:47] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:39:47] *** ChanServ sets mode: +v npaperbot
[21:40:41] <MaddHatter> yeah, that's what I was thinking of, but: "The keyword requires is also used to begin a requires-expression..."
[21:41:33] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Remote host closed the connection)
[21:42:16] <MaddHatter> having two different "requires" is going to confuse so many people
[21:43:05] <PJBoy> you can make concepts for them if you want
[21:43:56] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[21:44:29] <PJBoy> `template<typename T> concept NullaryGetNameAble = requires (T t) { t.getName(); };` or some such
[21:45:12] <MaddHatter> I don't think it ends up being any cleaner than what you already wrote though
[21:45:40] <PJBoy> but it takes away the scary requires keywords from the function
[21:46:38] <PJBoy> https://godbolt.org/z/f6dc1GPGT
[21:46:46] <PJBoy> or you could sfinae on it or whatever
[21:47:10] <MaddHatter> I've got to go find a place to use this now. It's kind of like a game finding excuses to use constructs that break coco.
[21:47:36] <PJBoy> a la https://godbolt.org/z/99f58T8K5
[21:49:05] *** Joins: aniketgm (~Aniket@49.36.111.83)
[21:49:25] <PJBoy> <3 C++20
[21:50:14] <rpav> ...yeah damn that's pretty cool
[21:51:20] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[21:55:17] *** Quits: jiffe (~jiffe@mail.nsab.us) (Ping timeout: 240 seconds)
[21:56:27] *** Joins: jiffe (~jiffe@mail.nsab.us)
[22:00:27] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[22:05:05] *** PJBoy is now known as Guest8573
[22:05:05] *** Quits: Guest8573 (~PJBoy@user/pjboy) (Killed (tungsten.libera.chat (Nickname regained by services)))
[22:05:10] *** Joins: PJBoy (~PJBoy@user/pjboy)
[22:06:21] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[22:13:17] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 240 seconds)
[22:20:22] *** Quits: aniketgm (~Aniket@49.36.111.83) (Quit: leaving)
[22:25:31] *** Quits: kapil (~kapil@o-k.website) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[22:27:20] *** Joins: kapil (~kapil@o-k.website)
[22:29:58] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:2162:ed14:6f38:5e01)
[22:30:11] *** Quits: proller (~p@2a02:6b8:0:40c:4e00:2ac2:e082:4525) (Ping timeout: 268 seconds)
[22:36:07] *** Joins: artok (~azo@mobile-access-b0481d-183.dhcp.inet.fi)
[22:36:32] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[22:38:24] *** eck is now known as tiktoknull
[22:40:12] *** Quits: Simplar (~quassel@188.163.93.76) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:41:19] <rpav> for today's challenge, make C++ as reverse as possible .. `a + a = x; // assign a + a to x`
[22:41:54] <rpav> sadly i don't think '(...)x' will syntax
[22:42:21] <rpav> actually wait, casting, but i don't think you can put an expression in a C cast
[22:46:17] *** Quits: jiffe (~jiffe@mail.nsab.us) (Ping timeout: 240 seconds)
[22:47:45] *** Joins: jiffe (~jiffe@mail.nsab.us)
[22:48:24] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[22:50:15] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[22:53:02] *** Joins: meator (~meator@user/meator)
[22:56:27] *** Parts: Swemole (~Swemole@meta.ros.sgsnet.se) ()
[22:59:27] <manuels> can we hack equal_range, lower_bound and upper bound somehow to get a starts_with range of a sorted vector<string>?
[23:00:39] <rpav> you just want the first string that starts with a string?
[23:00:52] <PJBoy> you surely can
[23:00:58] <TinoDidriksen> Should be fairly simple with a custom comparator.
[23:00:59] <rpav> i'm not sure why you can't do that with lower_bound and a custom comparator
[23:01:08] <Alipha> well, std::lower_bound is easy--you don't even need a custom comparator
[23:01:13] <manuels> I want to get the entire range that starts with a given string
[23:01:28] <rpav> well
[23:01:32] <manuels> if the comparison functoin is guaranteed to never change element<value and value<element
[23:01:56] <rpav> lower_bound gives you the first <= item; you'd have to do a comparison to see if it's actually a match, but
[23:02:16] <Alipha> i'd just do std::lower_bound and then iterate from that point to get the range/upper_bound
[23:02:23] <Alipha> seems the most straightforward
[23:02:31] <manuels> i guess this would work with comp(value,element) {return value<element.resize(value.size())}
[23:03:32] <rpav> oh, rfind can be abused for a starts_wtih
[23:03:55] <Alipha> manuels: no, you can't assume what you're searching for is the first parameter and element is the second parameter
[23:04:41] <Alipha> i'd write up an example comparator to use, but i'm guessing PJBoy is already working on it ;-)
[23:05:06] <PJBoy> that's actually a bit of a problem
[23:05:52] <PJBoy> actually
[23:06:11] <PJBoy> I don't that's true
[23:06:40] <PJBoy> the lower_bound algorithm doesn't require an equivalence relation
[23:07:37] <manuels> a,b,bb,c: lower_bound(b) = b, upper_bound(b)=bb (<end() and not included), but i'd like to get b AND bb since it starts with b. so upperbound should be c.
[23:08:06] <rpav> ++
[23:08:17] <rpav> (if != .end())
[23:08:48] <manuels> ?
[23:08:59] <MaddHatter> just ++ the iterator if it's not end()
[23:09:06] <rpav> you get an iterator for the upper bound, so unless it's == .end(), ++ it
[23:10:16] <manuels> this is just a minimal example. there could of course be N items, i'd prefer O(logN). Thats exactly why I do binary search.
[23:10:47] <rpav> the point is you're getting a closed range, and you can make it open by incrementing the end of it (assuming it's not already .end())
[23:10:56] <rpav> (don't assume: check ;)
[23:11:47] <RandomReader> KombuchaKip - yes, P0052 was accepted into the Library Fundamentals TS version 3 draft, which is why it shows up on cppreference, but because that TS has not been published yet it's not considered complete and there are no actual implementations of it by anyone (so none of the major vendors are shipping this yet under experimental/)
[23:15:11] *** Quits: jkl1337 (~jkl@user/jkl) (Quit: Gone.)
[23:16:22] *** Joins: seninha (~seninha@user/seninha)
[23:16:32] *** Joins: jkl (~jkl@user/jkl)
[23:17:41] <RandomReader> the one I linked is by the paper author, so presumably it's reasonably complete, but I haven't personally checked it
[23:19:38] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[23:21:21] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:dc8:8e33:a486:95b) (Ping timeout: 268 seconds)
[23:21:24] <Alipha> manuels: https://wandbox.org/permlink/mGBEK5XoNBfA3Yik
[23:25:56] <KombuchaKip> ville: Got it.
[23:26:40] <KombuchaKip> RandomReader: Makes sense.
[23:27:18] <KombuchaKip> Alipha: Ok thanks for explaining that.
[23:32:24] <PJBoy> obligatory C++20 version https://wandbox.org/permlink/tLZwYqUjgKrlIUij
[23:40:58] *** Quits: adeliktas (~adeliktas@2001:16b8:22a8:8d00:98a5:dadf:3482:ec11) (Quit: Client closed)
[23:47:37] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[23:51:23] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[23:51:45] *** Quits: Tokamak (~Tokamak@172.58.191.87) (Quit: Textual IRC Client: www.textualapp.com)
[23:52:29] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[23:53:06] *** Joins: Guest75 (~Guest75@ip-95-223-73-60.hsi16.unitymediagroup.de)
[23:54:06] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[23:54:16] *** Quits: Guest75 (~Guest75@ip-95-223-73-60.hsi16.unitymediagroup.de) (Client Quit)
[23:54:37] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[23:56:44] <manuels> omg 🤦‍♂️ sure truncating both sides Alipha ty
