[00:00:54] *** Joins: ouestbillie (~gallup@193.138.218.160)
[00:02:04] *** Quits: rain3 (~rain3___@2a02:2f09:d113:6d00:6f23:fba2:d834:1a7) (Ping timeout: 268 seconds)
[00:02:07] <qhong> sm2n: it's sensible, but name is also completely detached from the intuitive concept of "locations". I'm not saying they should be associated, but you can also build a system based on specifying locations,and it might have some benefit, e.g. all datum gets a readable name even if it's not explicitly specified
[00:02:43] <sm2n> qhong: I don't understand
[00:03:01] <qhong> sm2n: For example, if the function is the 4th input of an REPL from a continuation named admin, it may be named admin:repl:4
[00:03:39] <sm2n> right, and where is the issue?
[00:04:02] <sm2n> as moon-child said, names are weak pointers
[00:04:12] <sm2n> you can have as many of them as you want
[00:04:17] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[00:05:18] <sm2n> you don't really need a "canonical" name, if that is what you are getting at
[00:05:33] <sm2n> names can be addresses, but all names need not be addresses
[00:07:26] <qhong> assigning readable name to every datum makes the system more transparent and discoverable
[00:07:30] <moon-child> a symbol is simply something which, though it doesn't itself denote anything, if you have two symbols you may ask whether they denote the same thing
[00:08:38] <sm2n> qhong: Note that you can have backlinks for names modulo latency
[00:09:30] <sm2n> (and the aforementioned trust barriers)
[00:10:49] <qhong> moon-child: I think interned symbols are very special because they can be print and read back, readably
[00:11:05] <moon-child> qhong: symbols are immutable though
[00:11:11] <moon-child> (ignoring details like symbol-plists)
[00:11:16] <qhong> they're a very effective bridge between the object graph in the memory and concept graph in your mind
[00:11:34] <moon-child> if you want something like this, you need to make it immutable.  Otherwise there are problems
[00:11:59] <qhong> When interacting through symbols and S-exprs, one naturally build an "internalization" of the memory in their own mind. It's much harder if one is interacting through memory addresses
[00:12:36] <qhong> moon-child: sure, symbol are usually immutable
[00:13:02] <moon-child> if you are willing to be referentially transparent, a world of possibilities opens up
[00:13:05] <qhong> except e.g. `unintern' and then `intern', but those operation are almost always issued consciously by the user
[00:13:28] <sm2n> qhong: the symbols themselves are still immutable
[00:13:37] <sm2n> intern and unintern mutate packages, not symbols
[00:13:53] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[00:14:17] <qhong> sm2n: it still have undesired effect. The same observed name can denote different object at different time
[00:14:36] <sm2n> sure
[00:15:11] <qhong> moon-child: what kind of possibilities? can you give an example?
[00:16:12] <sm2n> for one, if you are referentially transparent you can trivially serialize/mutate closures, I think
[00:16:13] <moon-child> in general, abstracting over state is easier.  If I want to share an object with you over the net, say, we don't have to worry that I might mutate it later
[00:16:23] <sm2n> err s/mutate/migrate/
[00:16:29] <moon-child> snapshotting becomes dramatically simpler
[00:16:52] *** Quits: amb007 (~a_bakic@34.144.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[00:17:06] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[00:17:26] <moon-child> sm2n: tbf, you can serialize closures anyway
[00:17:36] <moon-child> it's not worse than serializing lists, which people do all the time
[00:17:57] <qhong> IMO it's only hiding the problem under the carpet. All problem still shows up once you start to simulate mutation on top of an immutable environment
[00:18:04] <sm2n> yeah, I suppose
[00:18:37] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:22:08] *** Quits: shka (~herr@109.231.0.226) (Quit: Konversation terminated!)
[00:26:55] *** Joins: shka (~herr@109.231.0.226)
[00:38:17] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[00:43:02] *** Joins: klimnbrk (~barakvoid@2a02:14f:4:90c3:5267:c24a:c393:429d)
[00:53:15] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[01:09:12] *** Quits: kevingal_ (~quassel@176.61.88.240) (Remote host closed the connection)
[01:09:12] *** Quits: kevingal (~quassel@176.61.88.240) (Remote host closed the connection)
[01:09:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[01:11:41] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:11:58] *** Quits: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (Quit: WeeChat 3.4)
[01:12:47] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[01:22:08] *** Joins: f^ (~il@user/f/x-7830992)
[01:24:29] *** f^ is now known as il
[01:27:20] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:7411:4d6e:ff63:e8a3)
[01:27:58] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10ae:adc1:19c8:6f0b:d217:bdaf)
[01:29:36] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[01:32:06] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:7411:4d6e:ff63:e8a3) (Ping timeout: 268 seconds)
[01:37:36] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[01:37:57] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[01:46:57] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 240 seconds)
[01:48:20] *** Joins: lispy (~lispy4@84.69.59.93)
[01:51:26] *** Quits: AeroNotix (~xeno@185.107.67.252) (Ping timeout: 250 seconds)
[01:54:03] *** Quits: Masinterlisp (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (Quit: ~ Trillian - www.trillian.im ~)
[01:57:49] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[01:59:07] *** Joins: AeroNotix (~xeno@185.107.67.252)
[02:03:24] *** Quits: wacki (~wacki@87.122.85.169) (Quit: Leaving.)
[02:08:20] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[02:19:35] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10ae:adc1:19c8:6f0b:d217:bdaf) (Ping timeout: 268 seconds)
[02:21:58] *** Quits: VincentVega (~user@212.97.0.240) (Quit: ERC (IRC client for Emacs 27.2))
[02:23:58] <White_Flame> sm2n: yeah, erlang serializes immutable closures, but the overall language style tends not to have massive in-memory graphs of objects
[02:24:19] <White_Flame> it's no problem for it to send function objects over the wire
[02:35:38] *** Quits: occ (~occ@user/occ) (Ping timeout: 250 seconds)
[02:38:38] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[02:49:02] *** Quits: deltab (~deltab@user/deltab) (Ping timeout: 240 seconds)
[02:52:53] *** Quits: klimnbrk (~barakvoid@2a02:14f:4:90c3:5267:c24a:c393:429d) (Ping timeout: 268 seconds)
[02:59:01] *** Joins: deltab (~deltab@user/deltab)
[03:00:02] *** Joins: pillton (~user@193-116-85-183.tpgi.com.au)
[03:01:31] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 268 seconds)
[03:02:40] *** Joins: Akiva (~Akiva@user/Akiva)
[03:03:12] *** Joins: amb007 (~a_bakic@34.144.204.77.rev.sfr.net)
[03:03:12] *** Quits: amb007 (~a_bakic@34.144.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[03:03:25] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[03:03:57] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 240 seconds)
[03:05:15] *** Joins: notzmv (~zmv@user/notzmv)
[03:06:26] *** Joins: jao (~jao@68.235.43.93)
[03:07:13] <moon-child> White_Flame: right--erlang is referentially transparent!
[03:07:37] <moon-child> if you are referentially transparent, it doesn't really matter how deep your object graphs are, they can still be transparently serialized
[03:16:58] *** Joins: dra (~dra@2a04:4540:6402:9000:3d71:f20b:5e55:173f)
[03:18:48] *** Quits: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[03:19:17] *** Joins: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net)
[03:20:17] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[03:21:24] <White_Flame> moon-child: it could just pull in a bunch of accidental bigness, though
[03:23:27] <sm2n> it's ok gc pressure does not exist and cannot hurt you
[03:24:18] <AeroNotix> with erlang?  You bet it can
[03:24:32] <AeroNotix> reference counted binaries === get in the f(*@#(!@*# sea
[03:25:02] <sm2n> I thought beam had per process heaps with mark and sweep stop the world tracing gc
[03:25:19] <AeroNotix> sm2n: a specific data type is reference counted
[03:25:42] <sm2n> really?
[03:25:48] <AeroNotix> yes really
[03:26:03] <sm2n> Do you know why? That's interesting
[03:26:09] <AeroNotix> sm2n: it's an optimization 
[03:26:33] <AeroNotix> the tl;dr is that it is the 'binary' data type which is essentially untyped blobs of memory
[03:26:54] <AeroNotix> they end up getting used in place of strings
[03:27:08] <AeroNotix> because the built-in string type is little-more than a list of ints
[03:27:18] <AeroNotix> and has strange / surprising behaviour
[03:27:22] <sm2n> yeah, I do some elixir
[03:27:29] <sm2n> IO lists are cool though
[03:27:33] <AeroNotix> so overall, people use binaries in place of real strings
[03:28:01] <AeroNotix> any way, the whole refc thing can really bite you with certain workloads
[03:29:19] <sm2n> <https://www.erlang.org/doc/apps/erts/garbagecollection>
[03:29:23] <sm2n> Oh, this is interesting
[03:29:40] <sm2n> I didn't know erlang had gengc
[03:29:42] <AeroNotix> yeah well worth getting to grips with it if you are running a production beam system
[03:29:43] <sm2n> so I was wrong earlier
[03:30:07] <sm2n> it's not mark and sweep
[03:31:11] <AeroNotix> there's a few proper in-depth reviews of the gc floating around
[03:31:52] <White_Flame> AeroNotix: are those binaries refcounted per usage, or only refcounted once per process that uses it?
[03:32:11] <sm2n> White_Flame: it appears the binary heaps are per-process as well
[03:32:32] <sm2n> or not?
[03:32:38] <sm2n> there's something about a "virtual binary heap"
[03:32:40] <White_Flame> well the standard heaps are per-process, not sure what you mean by "binary" specifically here
[03:32:42] <AeroNotix> White_Flame: per process
[03:32:53] <White_Flame> AeroNotix: oh, so then the refcounting isn't that bad
[03:32:57] <sm2n> 2see https://www.erlang.org/doc/apps/erts/garbagecollection#binary-heap
[03:33:13] <AeroNotix> the tedious thing is that sub-binaries can increment the count on the whole binary
[03:33:16] *** Quits: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net) (Ping timeout: 250 seconds)
[03:33:40] <White_Flame> sm2n: ah, ok
[03:33:49] <AeroNotix> as binaries flow through your system, e.g. imagine a binary coming from a socket... flowing through the rest of your processes
[03:34:10] <AeroNotix> won't be removed until all processes along the way decrement or gc themselves..
[03:34:18] <sm2n> that sounds like a pain
[03:34:19] <White_Flame> well, it doesn't move anywhere, only the references flow through the processes ;)
[03:34:23] <AeroNotix> been a while since I was in the weeds with Erlang but that should be relatively accuratae ^
[03:34:34] <White_Flame> yeah, it's been many years for me now
[03:35:23] <AeroNotix> sm2n: not gonna lie in a real production system it's often a good thing to have a gen_server which periodically runs gc on every process
[03:35:31] <sm2n> lol
[03:35:36] <sm2n> seriously?
[03:35:39] <AeroNotix> yes
[03:35:43] <AeroNotix> riak does this, for example
[03:35:57] <AeroNotix> the alternative to handle sub-binaries is even more tedious
[03:36:24] <White_Flame> I presume you could force a subseq copy
[03:36:27] <sm2n> what is it?
[03:36:38] <AeroNotix> In one of my systems a few years ago, without 'manual gc on a timer'.. I was using 16GB RES constantly, when I enabled it every instance used only 2GB 
[03:36:45] <AeroNotix> sm2n: you can binary:copy out the parts you need
[03:36:52] <AeroNotix> and send those to other processes, instead
[03:37:57] <sm2n> I see
[03:38:12] <sm2n> so the problem is kinda the inverse of fragmentation
[03:40:02] <sm2n> oh but if the binary heap is per process, at least you don't need atomics for refcounting right?
[03:41:51] <AeroNotix> I'm not sure, I would've thought there's some global state somewhere that really says when the actual memory all the references are counting towards can be deallocated
[03:41:54] *** Quits: artchad (~user@public-gprs225103.centertel.pl) (Read error: Connection reset by peer)
[03:42:34] <moon-child> White_Flame: sure, but it's semantically coherent.  And distributed gc is a thing
[03:43:10] *** Joins: dra_ (~dra@2a04:4540:640a:de00:3d71:f20b:5e55:173f)
[03:45:32] *** Quits: dra (~dra@2a04:4540:6402:9000:3d71:f20b:5e55:173f) (Ping timeout: 240 seconds)
[03:48:18] *** Joins: pyook (~pyook@user/puke)
[03:49:15] *** Quits: dra_ (~dra@2a04:4540:640a:de00:3d71:f20b:5e55:173f) (Quit: Leaving)
[03:49:25] *** Joins: dra (~dra@2a04:4540:640a:de00:3d71:f20b:5e55:173f)
[03:52:31] *** Joins: xiews (~wxie@2409:891e:3540:27e5:6475:1f11:737f:acb8)
[03:54:28] *** Joins: occ (~occ@user/occ)
[04:02:37] *** Quits: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[04:02:53] *** Joins: xiongxin (~Thunderbi@2409:8954:38c4:44c4:53d0:6eda:c8cd:506c)
[04:17:43] *** Quits: dra (~dra@2a04:4540:640a:de00:3d71:f20b:5e55:173f) (Remote host closed the connection)
[04:36:12] *** Joins: molson (~molson@2001-48F8-704A-123D-0-0-75F-1029-static.midco.net)
[04:38:17] *** Quits: xiongxin (~Thunderbi@2409:8954:38c4:44c4:53d0:6eda:c8cd:506c) (Ping timeout: 240 seconds)
[04:38:37] *** Quits: xiews (~wxie@2409:891e:3540:27e5:6475:1f11:737f:acb8) (Ping timeout: 240 seconds)
[04:39:17] *** Joins: xiews (~wxie@124.77.94.254)
[04:40:25] *** Quits: AeroNotix (~xeno@185.107.67.252) (Quit: WeeChat 3.4)
[04:43:13] *** Joins: AeroNotix (~xeno@185.107.67.252)
[04:50:01] *** Quits: johnjaye (~pi@173.209.65.233) (Ping timeout: 256 seconds)
[04:50:04] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[04:51:44] *** Joins: johnjaye (~pi@173.209.65.233)
[04:54:49] *** Joins: xiongxin (~Thunderbi@120.197.198.189)
[04:54:50] *** Joins: Lumia (~Lumia@208.64.158.255)
[04:55:46] *** Joins: livoreno (~livoreno@user/notzmv)
[05:04:55] *** Joins: xiongxin1 (~Thunderbi@120.197.198.177)
[05:05:17] *** Quits: AeroNotix (~xeno@185.107.67.252) (Ping timeout: 240 seconds)
[05:06:15] *** Quits: xiongxin (~Thunderbi@120.197.198.189) (Ping timeout: 256 seconds)
[05:06:15] *** xiongxin1 is now known as xiongxin
[05:07:05] *** Joins: drewnix (~textual@c-73-118-230-129.hsd1.wa.comcast.net)
[05:09:34] *** Quits: xiongxin (~Thunderbi@120.197.198.177) (Client Quit)
[05:19:14] *** Joins: ZombieChicken (~weechat@user/zombiechicken)
[05:24:33] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[05:31:58] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[05:39:23] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[05:39:57] *** Joins: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net)
[05:47:02] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[05:49:45] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[05:51:48] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[05:53:41] *** Quits: drewnix (~textual@c-73-118-230-129.hsd1.wa.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[05:53:50] *** Quits: Colleen (~fermion@supersolid.equilibrium.tymoon.eu) (Quit: Colleen)
[05:54:36] *** Joins: Colleen (~fermion@supersolid.equilibrium.tymoon.eu)
[05:54:49] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[05:59:57] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[06:04:03] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[06:06:08] *** Joins: skapata (~Skapata@user/skapata)
[06:07:26] *** Quits: lispy (~lispy4@84.69.59.93) (Quit: Leaving)
[06:13:37] *** Quits: Lumia (~Lumia@208.64.158.255) (Ping timeout: 240 seconds)
[06:28:06] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 268 seconds)
[06:37:01] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:9c57:17b6:65b6:b182)
[06:44:12] *** Joins: Lumia (~Lumia@208.64.158.255)
[06:48:17] *** Quits: Lumia (~Lumia@208.64.158.255) (Ping timeout: 240 seconds)
[06:49:00] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[06:50:40] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[07:03:37] *** Joins: Lumia (~Lumia@208.64.158.255)
[07:17:44] *** Quits: wheelsucker (~user@2600:8801:8c24:d000::8e14) (Remote host closed the connection)
[07:17:57] *** Joins: wheelsucker (~user@2600:8801:8c24:d000::8e14)
[07:19:59] *** Quits: occ (~occ@user/occ) (Ping timeout: 256 seconds)
[07:23:13] *** Quits: dre (~dre@2001:8003:c932:c301:ce6d:d9b0:21ac:1ee2) (Quit: Leaving)
[07:24:06] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[07:25:54] *** Quits: Lumia (~Lumia@208.64.158.255) (Quit: ,-)
[07:27:02] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[07:29:55] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:31:04] *** Joins: dre (~dre@2001:8003:c932:c301:d3ad:30f8:46d3:c284)
[07:31:08] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[07:42:00] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[07:51:37] *** Joins: Guest9625 (~Guest96@2600:1700:ed0:36c0:c593:298a:f8ee:57f4)
[07:55:52] *** Quits: Guest9625 (~Guest96@2600:1700:ed0:36c0:c593:298a:f8ee:57f4) (Client Quit)
[07:57:57] *** Quits: xiews (~wxie@124.77.94.254) (Ping timeout: 240 seconds)
[08:00:02] *** Quits: flatwhatson (~flatwhats@118-208-220-160.tpgi.com.au) (Ping timeout: 240 seconds)
[08:00:20] *** Joins: xiews (~wxie@223.104.212.215)
[08:01:30] *** Joins: flatwhatson (~flatwhats@220.253.110.95)
[08:04:27] *** Joins: occ (~occ@user/occ)
[08:17:24] *** Quits: ZombieChicken (~weechat@user/zombiechicken) (Ping timeout: 276 seconds)
[08:24:12] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[08:27:57] *** Quits: jao (~jao@68.235.43.93) (Ping timeout: 240 seconds)
[08:29:41] *** Quits: xiews (~wxie@223.104.212.215) (Read error: Connection reset by peer)
[08:31:08] *** Joins: xiews (~wxie@124.77.94.254)
[08:33:13] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:35:39] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[08:36:29] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[08:38:05] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[08:38:23] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[08:42:25] *** Quits: opcode (~nathan@user/opcode) (Ping timeout: 250 seconds)
[08:50:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[08:52:31] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:04:20] *** Quits: johnjaye (~pi@173.209.65.233) (Ping timeout: 250 seconds)
[09:06:16] *** Joins: johnjaye (~pi@173.209.65.233)
[09:07:05] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[09:08:53] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:31:23] *** Joins: wacki (~wacki@87.122.84.133)
[09:31:40] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[09:36:45] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[09:38:36] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:57:14] <qhong> How does immutable system deal with updating/upgrading/fixing things?
[09:57:57] <qhong> That's my main reason for skepticism towards immutable system: it nukes object identity, but object identity is built into the way our world and our mind works
[09:58:16] <moon-child> is it?
[09:58:32] <moon-child> this is my address.  Or, it used to be; my house got torn down, and I live elsewhere now
[09:58:35] <moon-child> bits have no colour
[09:58:50] <moon-child> you can't tell the difference between two carbon atoms
[09:59:12] <qhong> but there is difference between two extensionally identical houses
[09:59:27] <qhong> you poke a hole at the first one, now they're extensionally distinct
[09:59:44] <moon-child> are they?
[09:59:54] <moon-child> how do you know that they didn't switch places right before you poked the hole?
[10:00:00] <qhong> do you live in 3+1 space time?
[10:00:07] <moon-child> all you know is that now there are two houses which are different
[10:00:48] <qhong> imagine they're two other observers, one only observe and knows about house1, one only observe and knows about house 2
[10:01:04] <qhong> and the observers themselves are extensionally distinct 
[10:02:58] <moon-child> what does that demonstrate?
[10:03:37] <qhong> "object identity is built into the way our world and our mind works"
[10:04:14] <moon-child> I don't see why
[10:04:38] <moon-child> you still haven't shown a reason why the houses couldn't change places without anyone noticing, without observer 1 suddenly starting to observe house 2 without realising it
[10:05:10] <qhong> the house observer 1 observing is by definition house 1
[10:05:32] <moon-child> ok
[10:05:36] <qhong> or, there are two distinct house: the house observer 1 observes, and the house observer 2 observes, even if they look exactly the same at the moment
[10:05:38] <moon-child> so now you define house 1 in terms of observer 1
[10:05:41] <moon-child> not in terms of what it _is_
[10:05:44] <moon-child> it does not have identity
[10:06:24] <qhong> it has: there're two observationally different case: observer 1 and 2 are observing two houses with different identity, or one single house
[10:06:41] <qhong> at the moment they may look exactly the same, but it changes as long as observer 1 punch a hole
[10:07:03] <moon-child> it changes only when observer 1 punches a hole, not before
[10:07:06] <moon-child> copy-on-write memory ;)
[10:08:20] <qhong> moon-child: but even before that, there is the notion that does these two extensionally same house *has same identity*
[10:08:36] <qhong> otherwise how you're going to decide whether observer 2 see the hole on the spot?
[10:09:08] <qhong> https://gist.github.com/BlueFlo0d/e402defa17ab3c2e78e57b3afe2dcdb6
[10:09:19] <moon-child> hmm I feel like this is an issue of axioms
[10:09:33] <moon-child> you are axiomatically assuming that there is identity, and I am axiomatically assuming that there is not
[10:09:41] <moon-child> so we see the world differently
[10:10:20] <qhong> the world works the way I describes. It is observationally testable
[10:10:41] <qhong> Now imagine three houses with distinct identitiy, 1 with hole at the moment, the other 2 with no holes
[10:11:01] <moon-child> one can implement identity semantics in terms of non-identity semantics, and vice versa
[10:11:08] <qhong> moon-child: sure
[10:11:11] <moon-child> and futamura projections get rid of the compiler
[10:11:17] <moon-child> it's still a matter of what view you project onto it
[10:11:35] <qhong> problem is once  you start to implement identity on ref-transparent system, all "good" property ref-trans promises are lost
[10:12:03] <qhong> you end up with something identical to a tranditional mutatble system -- that's my skepticism, it hides problem under the carpet without really solving any
[10:12:20] <moon-child> no, because the identity can be localised
[10:12:35] <moon-child> for example: in apl, global scope is mutable, but everything else is immutable
[10:12:51] <moon-child> this is a pragmatic choice that works very well in practice, vs fully immutable systems like haskell
[10:14:06] <qhong> moon-child: I always find a system with "full identitiy" more flexible. E.g. you can interrupt a running program that manually hack its continuation
[10:14:23] <qhong> In a system you describe the program can probably only either run to completion, or be aborted
[10:14:34] <moon-child> why?
[10:14:43] <qhong>  that manually -> and manually
[10:14:58] <moon-child> I can introspect the running program and produce a new version tweaked in ways I would like
[10:15:08] <moon-child> the old version may continue to run, but what do I care?  It can not mutate anything important
[10:15:48] <qhong> ok. How you draw the line between mutable and immutable then?
[10:16:09] <qhong> Is there a simple first principle?
[10:16:41] <moon-child> I don't know
[10:17:20] <qhong> also I doubt if it will lose the power to "automate everything"
[10:17:45] <qhong> apparently now the user can do powerful mutation-ish thing, but how to expose that power to program?
[10:19:11] <moon-child> yeah, interacting with the outside world is another problem
[10:19:56] <moon-child> (this is also the problem with continuations)
[10:22:27] <qhong> moon-child: I think continuation works fine (and pretty intuitively) with outside world. Do you mean the resource management problem and the lovecraftian dynamic-wind?
[10:23:29] <moon-child> yes
[10:23:40] <moon-child> in essence: you may fork() your own little bubble, but you may not fork() the universe
[10:25:06] <qhong> I think that problem is just one half of the pratical dynamic-wind issue (you already have that issue without interacting with outside world, because call/cc don't fork the memory store either). The other half is completely artificial
[10:25:45] <qhong> One should ban explicit memory (de)allocation and just use GC and finalizers. Then outside resource is no harder than manipulating data inside the image
[10:25:48] *** Quits: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (Ping timeout: 250 seconds)
[10:26:28] <moon-child> memory management is a distraction.  You still have the same state management problems
[10:26:46] <moon-child> what if I make the same 'login' request multiple times to some server?
[10:28:23] <qhong> I see. Pratically, maybe enforce that each account only "has" one continuation, thus only respond to one of the request
[10:28:32] <qhong> it does look messy
[10:34:32] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Ping timeout: 240 seconds)
[10:37:37] *** Joins: opcode (~opcode@user/opcode)
[10:56:48] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[11:01:22] *** Joins: Algernon69 (~Algernon6@2a04:cec0:10ae:adc1:a4d1:e3e1:6fc6:1c29)
[11:07:27] *** Quits: parjanya (~esb@177.33.154.179) (Ping timeout: 268 seconds)
[11:10:32] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[11:27:32] *** Joins: shka (~herr@109.231.0.226)
[11:28:27] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Read error: Connection reset by peer)
[11:33:04] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[11:42:03] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[11:42:55] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[11:58:25] *** Quits: ouestbillie (~gallup@193.138.218.160) (Ping timeout: 256 seconds)
[11:59:33] *** Joins: pjb (~pjb@user/pjb)
[12:00:06] *** Joins: ouestbillie (~gallup@bl16-179-173.dsl.telepac.pt)
[12:09:54] *** Joins: thomasb06 (~thomasb06@leat141.unice.fr)
[12:12:19] <thomasb06> Hello. In a let, is it possible to use the first variable when computing the second?
[12:13:04] <thomasb06> say (let (a some-calculus) (b some-other-calculus-with-a))
[12:15:25] *** Quits: wheelsucker (~user@2600:8801:8c24:d000::8e14) (Remote host closed the connection)
[12:15:39] *** Joins: wheelsucker (~user@2600:8801:8c24:d000::8e14)
[12:15:50] <pjb> thomasb06: not in a let. but in a let* yes.
[12:16:08] <thomasb06> pjb ah, this was the mistake... Thank you
[12:16:13] <pjb> thomasb06: and mind your syntax!    (let* ((a some-calculus) (b some-other-calculus-with-a)) (list a b))
[12:16:51] <thomasb06> At the moment, I trying to solve this challenge: https://www.codewars.com/kata/58ce8725c835848ad6000007
[12:17:02] <thomasb06> but it doesn't work out:
[12:18:07] <thomasb06> https://x0.at/s0OJ.txt
[12:18:53] <pjb> You have a system of 2 equations: (and (= 0.99 (/ (+ dry-matter-mass old-water-mass) old-water-mass)) (= 0.98 (/ (+ dry-matter-mass new-water-mass) new-water-mass)))
[12:19:22] <pjb> C'est quoi "pds"?
[12:19:32] <thomasb06> poids, hehe
[12:19:52] <pjb> Ah, "poids". Ça n'existe pas les poids en physique, seulement les masses, et les forces.
[12:20:30] <thomasb06> c'est vrai, mille excuses
[12:20:38] <pjb> Tu ne vas pas dire, « mon poids est de 735.75 newton », mais « ma masse est de 75 kg »!
[12:21:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[12:21:31] <thomasb06> Tu as raison, j'ai perdu les bons réflexes depuis le lycée
[12:22:10] <Alfr> pjb, that can't be right, assuming the masses involved are non-negative.
[12:22:32] <thomasb06> wow...
[12:23:42] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[12:24:43] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[12:25:44] <pjb> Alfr: yes, I exchanged the numerator and denominator; it should be:  (and (= 0.99 (/  old-water-mass (+ dry-matter-mass old-water-mass))) (= 0.98 (/ new-water-mass (+ dry-matter-mass new-water-mass))))
[12:25:45] <Alfr> pjb, not saying anything about any solution you may be talking about, but the equations above are a bit bogus, essentially: (a+b)/b < 1; and that won't work out for masses a,b >= 0.
[12:26:20] <Alfr> pjb, :)
[12:26:56] <thomasb06> this float issue doesn't seem to be a big deal in this challenge though
[12:28:00] *** Quits: hjudt (~hjudt@62-178-177-178.cable.dynamic.surfer.at) (Ping timeout: 250 seconds)
[12:35:39] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:35:52] *** Joins: Ilyu (~quassel@166.215.82.79.rev.sfr.net)
[12:45:29] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[12:49:39] *** Joins: hjudt (~hjudt@62-178-177-178.cable.dynamic.surfer.at)
[12:50:33] *** Quits: occ (~occ@user/occ) (Read error: Connection reset by peer)
[12:54:00] <thomasb06> Now it works: (defun potatoes (p0 w0 p1) (floor (* w0 (- 100.0 p0)) (- 100.0 p1)))
[12:54:06] <thomasb06> pjb: thank you
[12:54:15] <thomasb06> (arg, fichu Lisp...)
[12:56:23] <pjb> thomasb06: I'd use ROUND.
[12:56:47] *** Quits: Ilyu (~quassel@166.215.82.79.rev.sfr.net) (Ping timeout: 256 seconds)
[12:57:14] <thomasb06> what's the difference? ROUND takes the closest I guess
[12:57:28] <pjb> Yes.
[12:57:45] <pjb> (round 4.8) #| --> 5 ; -0.19999981 |#  (floor 4.8) #| --> 4 ; 0.8000002 |# 
[12:58:09] <thomasb06> how would do the computation in real numbers directly?
[13:00:20] <thomasb06> for example (/ 48 100) returns a fraction. It's ok for the rest of the computation?
[13:00:38] <pjb> Since you multiply by 100.0 it's done in float. If you mean (and REAL (not FLOAT)) aka RATIO, then (let ((m0 75) (p0 99/100) (p1 98/100)) (/ (* m0 (- 100 p0)) (- 100 p1))) #| --> 742575/9902 |# 
[13:00:58] <pjb> (let ((m0 75) (p0 99/100) (p1 98/100)) (round (* m0 (- 100 p0)) (- 100 p1))) #| --> 75 ; -3/4 |# 
[13:01:14] <thomasb06> Understood
[13:01:15] <pjb> Yes, we can perform the computation with exact numbers, using only ratio.
[13:01:36] <thomasb06> Cool, thanks the trick
[13:01:38] <pjb> And use ROUND or TRUNCATE or CEILING or FLOOR at the end to get an integer. 
[13:01:55] <thomasb06> got it
[13:02:23] <pjb> Also, it just depends on the input: (let ((m0 75) (p0 99.0) (p1 98)) (/ (* m0 (- 100 p0)) (- 100 p1))) #| --> 37.5 |# 
[13:03:32] <thomasb06> as soon as there is a float, it stays in float unless told to do otherwise
[13:03:57] *** Quits: hjudt (~hjudt@62-178-177-178.cable.dynamic.surfer.at) (Ping timeout: 256 seconds)
[13:10:01] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:9c57:17b6:65b6:b182) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:15:27] *** Joins: hjudt (~hjudt@62-178-177-178.cable.dynamic.surfer.at)
[13:28:08] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:41f6:c43f:4ee1:b9fb)
[13:35:10] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 250 seconds)
[13:40:25] *** Quits: xiews (~wxie@124.77.94.254) (Ping timeout: 256 seconds)
[13:40:59] *** Joins: xiews (~wxie@2409:891e:3540:27e5:b745:894e:cd02:4a20)
[14:15:42] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[14:16:02] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[14:18:01] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:27:03] *** Joins: artchad (~user@public-gprs225103.centertel.pl)
[14:30:17] *** Quits: letto (~letto@86.120.81.105) (Ping timeout: 240 seconds)
[14:31:02] *** Joins: random-nick (~random-ni@87.116.181.150)
[14:38:03] *** Joins: vats (~vats@103.158.91.71)
[14:45:44] *** Joins: letto (~letto@86.120.81.105)
[14:47:36] *** Quits: Algernon69 (~Algernon6@2a04:cec0:10ae:adc1:a4d1:e3e1:6fc6:1c29) (Ping timeout: 268 seconds)
[14:53:34] *** Joins: santiagopim (~user@90.167.95.41)
[14:58:27] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[14:59:48] *** Joins: rain3 (~rain3___@2a02:2f09:d113:6d00:6f23:fba2:d834:1a7)
[15:02:13] *** Joins: rogersm (~rogersm@90.166.180.250)
[15:24:44] *** Quits: artchad (~user@public-gprs225103.centertel.pl) (Read error: Connection reset by peer)
[15:26:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[15:26:57] *** Quits: vats (~vats@103.158.91.71) (Ping timeout: 240 seconds)
[15:33:45] *** Quits: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[15:34:07] *** Quits: johnjaye (~pi@173.209.65.233) (Ping timeout: 256 seconds)
[15:35:07] *** Quits: wheelsucker (~user@2600:8801:8c24:d000::8e14) (Remote host closed the connection)
[15:35:21] *** Joins: wheelsucker (~user@2600:8801:8c24:d000::8e14)
[15:43:12] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:46:09] *** Quits: pyook (~pyook@user/puke) (Remote host closed the connection)
[15:48:12] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:41f6:c43f:4ee1:b9fb) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:48:25] *** Joins: pyook (~pyook@user/puke)
[15:48:37] *** Quits: xiews (~wxie@2409:891e:3540:27e5:b745:894e:cd02:4a20) (Ping timeout: 240 seconds)
[15:49:12] *** Joins: xiews (~wxie@101.93.17.62)
[15:50:46] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[15:57:17] *** Joins: yoonkn (~user@175.197.208.79)
[15:59:27] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[16:03:23] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[16:09:20] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:10:41] *** Joins: occ (~occ@user/occ)
[16:14:32] *** Joins: Algernon69 (~Algernon6@80.215.8.116)
[16:14:38] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[16:16:40] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:17:06] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[16:17:41] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[16:20:50] *** Quits: wheelsucker (~user@2600:8801:8c24:d000::8e14) (Read error: Connection reset by peer)
[16:21:03] *** Joins: wheelsucker (~user@2600:8801:8c24:d000::8e14)
[16:35:00] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[16:36:16] *** Quits: thomasb06 (~thomasb06@leat141.unice.fr) (Quit: Using Circe, the loveliest of all IRC clients)
[16:37:01] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:49:29] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[16:51:22] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:08:32] *** Joins: Ilyu (~quassel@166.215.82.79.rev.sfr.net)
[17:13:43] *** Joins: drewnix (~textual@c-73-118-230-129.hsd1.wa.comcast.net)
[17:22:17] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[17:22:40] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[17:25:36] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[17:26:08] *** Quits: mtreis (~mtreis@ip68-9-89-162.ri.ri.cox.net) (Ping timeout: 250 seconds)
[17:28:10] *** Quits: occ (~occ@user/occ) (Remote host closed the connection)
[17:29:15] *** Joins: occ (~occ@user/occ)
[17:33:07] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[17:35:24] *** Joins: morte_ (~user@190.104.116.153)
[17:39:26] *** Joins: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net)
[17:40:40] *** Quits: LibreGNU (~gnu@vps-93-95-226-254.1984.is) (Remote host closed the connection)
[17:43:53] *** Quits: pyook (~pyook@user/puke) (Ping timeout: 256 seconds)
[17:57:30] *** Quits: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net) (Remote host closed the connection)
[18:01:57] *** Quits: Ilyu (~quassel@166.215.82.79.rev.sfr.net) (Ping timeout: 240 seconds)
[18:02:32] *** Joins: artchad (~user@public-gprs225103.centertel.pl)
[18:02:38] *** Joins: Ilyu (~quassel@gateway/vpn/pia/ilyu)
[18:04:12] *** Quits: morte_ (~user@190.104.116.153) (Remote host closed the connection)
[18:04:54] *** Joins: morte_ (~user@190.104.116.153)
[18:10:24] *** Joins: mtreis (~mtreis@ip68-9-89-162.ri.ri.cox.net)
[18:27:02] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:4860:ab29:df65:d349)
[18:28:49] *** Quits: drewnix (~textual@c-73-118-230-129.hsd1.wa.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[18:35:04] *** Joins: Necktwi_ (~necktwi@49.206.203.103)
[18:37:24] *** Joins: drewnix (~textual@c-73-118-230-129.hsd1.wa.comcast.net)
[18:38:57] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:40:17] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Ping timeout: 240 seconds)
[18:41:37] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[18:43:21] *** Joins: yewscion (~yewscion@ec2-34-234-185-163.compute-1.amazonaws.com)
[18:47:32] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[18:47:55] *** Quits: Ilyu (~quassel@gateway/vpn/pia/ilyu) (Ping timeout: 256 seconds)
[18:48:57] *** Joins: Ilyu (~quassel@gateway/vpn/pia/ilyu)
[18:53:48] *** Quits: xiews (~wxie@101.93.17.62) (Remote host closed the connection)
[18:59:54] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:18:25] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:8f2a:6c48:c345:6afd)
[19:22:37] *** Quits: dld (~davidlowr@2601:197:600:1210:88d:2354:617:54b5) (Ping timeout: 240 seconds)
[19:23:44] *** Joins: dld (~davidlowr@73.61.8.28)
[19:24:26] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[19:24:26] *** Quits: rogersm (~rogersm@90.166.180.250) (Ping timeout: 250 seconds)
[19:24:57] *** Quits: santiagopim (~user@90.167.95.41) (Ping timeout: 256 seconds)
[19:28:43] *** Quits: dld (~davidlowr@73.61.8.28) (Ping timeout: 256 seconds)
[19:29:57] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[19:30:05] *** Joins: dld (~davidlowr@2601:197:600:1210:5064:96c:65f6:1d79)
[19:34:38] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[19:42:29] *** Quits: drewnix (~textual@c-73-118-230-129.hsd1.wa.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[19:43:30] *** Quits: morte_ (~user@190.104.116.153) (Ping timeout: 250 seconds)
[19:45:39] *** Quits: Necktwi_ (~necktwi@49.206.203.103) (Quit: leaving)
[19:46:41] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[19:48:15] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:51:21] *** Quits: yoonkn (~user@175.197.208.79) (Read error: Connection reset by peer)
[19:51:35] *** Joins: yoonkn (~user@175.197.208.79)
[19:54:17] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[19:54:59] *** Quits: yoonkn (~user@175.197.208.79) (Read error: Connection reset by peer)
[19:55:30] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:55:38] *** Joins: lispy (~lispy4@84.69.59.93)
[19:58:40] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:00:09] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:02:00] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[20:04:44] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[20:22:44] *** Joins: gproto23 (~gproto23@user/gproto23)
[20:28:32] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:7565:d4ee:7344:b4a0)
[20:28:32] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:7565:d4ee:7344:b4a0) (Changing host)
[20:28:32] *** Joins: skapata (~Skapata@user/skapata)
[20:29:32] *** Quits: wheelsucker (~user@2600:8801:8c24:d000::8e14) (Read error: Connection reset by peer)
[20:29:45] *** Joins: wheelsucker (~user@2600:8801:8c24:d000::8e14)
[20:32:34] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[20:35:10] *** Quits: lispy (~lispy4@84.69.59.93) (Quit: Leaving)
[20:35:38] *** Joins: lispy (~lispy4@84.69.59.93)
[20:38:02] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[20:49:46] *** Joins: iamFIREc1 (~iamFIREcr@user/iamfirecracker)
[20:50:37] *** Quits: iamFIREcracker (~iamFIREcr@user/iamfirecracker) (Ping timeout: 240 seconds)
[20:59:57] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[21:00:33] *** Joins: AeroNotix (~xeno@185.107.67.252)
[21:04:59] <AeroNotix> hey where did that topic go from freenode which was like (lisp is #(. LISP)) or something, i forget the syntax as I have literally never used it
[21:05:16] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[21:05:58] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[21:06:41] <Alfr> AeroNotix, you might want to join #commonlisp .
[21:07:10] <AeroNotix> Alfr: weird... #lisp is now a general lisp channel? On freenode that wasn't really the case.
[21:07:31] <AeroNotix> I see in the topic this covers all dialects
[21:08:01] <Alfr> Yes.
[21:08:04] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:08:09] <AeroNotix> OK.
[21:08:13] <AeroNotix> Acknowledged.
[21:09:48] <AeroNotix> hopefully there's more opportunity for lisp community drama now that it's a dialect-agnostic channel
[21:11:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Client Quit)
[21:13:24] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[21:15:22] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[21:17:31] *** Quits: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[21:18:34] *** Quits: yewscion (~yewscion@ec2-34-234-185-163.compute-1.amazonaws.com) (Ping timeout: 268 seconds)
[21:19:55] *** Joins: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net)
[21:23:24] *** Joins: shozo (~user@178.74.52.55)
[21:23:35] *** Joins: prussianblue (~ghostpant@101.128.64.26)
[21:24:44] *** Quits: rain3 (~rain3___@2a02:2f09:d113:6d00:6f23:fba2:d834:1a7) (Ping timeout: 268 seconds)
[21:24:46] *** Quits: puke (~puke@user/puke) (Quit: puke)
[21:26:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[21:28:57] *** Parts: prussianblue (~ghostpant@101.128.64.26) ()
[21:30:39] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:4860:ab29:df65:d349) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:31:31] *** Quits: tevo (~tevo@164.163.115.235.yesconnect.net.br) (Ping timeout: 268 seconds)
[21:34:48] *** Quits: pillton (~user@193-116-85-183.tpgi.com.au) (Ping timeout: 260 seconds)
[21:35:12] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10b2:4cc6:61fa:6895:b24:4361)
[21:36:12] *** Joins: jao (~jao@66.63.167.121)
[21:38:39] <drakonis> guile is the scheme equivalent of cl.
[21:38:55] *** Quits: Algernon69 (~Algernon6@80.215.8.116) (Ping timeout: 268 seconds)
[21:39:04] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:39:04] <cyberbanjo> how/why?
[21:39:44] <drakonis> rather
[21:40:01] <drakonis> most scheme implementations are as heavy as baseline cl
[21:40:20] <drakonis> but guile's design is not too distant from what you'd find in SBCL
[21:49:17] *** Joins: tevo (~tevo@164.163.113.251.yesconnect.net.br)
[21:51:32] *** Quits: Ilyu (~quassel@gateway/vpn/pia/ilyu) (Ping timeout: 240 seconds)
[21:52:27] *** Joins: Akiva (~Akiva@user/Akiva)
[21:53:31] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[21:54:57] <drakonis> https://www.gnu.org/software/guile/manual/guile.html
[21:57:16] <drakonis> it does not dictate how to use it
[21:59:19] <mdhughes> I think nobody in CL or Scheme would be happy with that description!
[21:59:54] <drakonis> idk
[22:00:00] <drakonis> its probably a bad one
[22:00:33] <il> lol
[22:02:35] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:02:41] <mfiano> Guile is nice, but GOOPS is no CLOS by a long shot.
[22:04:34] <drakonis> sure.
[22:05:23] <moon-child> r7rs-large will have generic functions but no clos apparently
[22:05:28] <mfiano> arity overloading is very bad for protocol conformance
[22:06:07] <mfiano> r7rs-large, is that vaporware at this point? ;)
[22:06:39] <drakonis> its starting to move faster now
[22:06:43] <moon-child> eh, how long did cl take?  10 years or so from cltl1 to ans?
[22:06:53] <mfiano> and it didn't need a revision
[22:07:07] <drakonis> that will always be debatable.
[22:07:37] *** Joins: elmatraz (~elmatraz@84.241.196.53)
[22:08:03] <qhong> guile is when scheme but call/cc can fail
[22:08:31] <drakonis> idgi
[22:08:50] <mfiano> i couldn't parse that as english
[22:09:34] <mdhughes> Makes sense, but I didn't know it could fail?
[22:09:36] <White_Flame> AeroNotix: https://cliki.net/irc for reference
[22:20:34] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10b2:4cc6:61fa:6895:b24:4361) (Read error: Connection reset by peer)
[22:20:52] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10b2:4cc6:61fa:6895:b24:4361)
[22:22:11] <artchad> What? We common lispers are no longer here to manspread away all the other languages?
[22:23:05] <artchad> That's a smart decision. I thought at the beginning as well that #Lisp was a general channel, before learning that it was more focused on Common Lisp. I'll be hanging around in #commonlisp then. :^D
[22:23:47] <artchad> I mean on freenode it was more common lisp focused. Now it's an actual general Lisp channel.
[22:23:51] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:24:37] <White_Flame> #lisp vs ##lisp wasn't great
[22:25:22] <artchad> agreed
[22:25:30] <White_Flame> and "Oh hey CS student being introduced to scheme, #lisp is for _Common_ Lisp, which is a specific language" got tiring
[22:27:36] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:28:21] <qhong> mdhughes: iirc it fails if there are foreign stack segment. In fact idk if it is even possible to do it correctly in this case, but it's just funny that call/cc can fail
[22:29:26] *** Quits: Necktwi (~necktwi@49.206.203.103) (Quit: leaving)
[22:30:13] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:40:28] <drakonis> i'm just a bit confused as to why CLers are so aggressive about claiming the lisp name
[22:43:28] <White_Flame> it's the direct lineage of the original lisps
[22:47:01] *** Joins: Ilyu (~quassel@166.215.82.79.rev.sfr.net)
[22:49:29] <White_Flame> however, setting up the IRC channel was a long time ago one-time thing that ended up squatting
[22:50:03] <White_Flame> in my experience, CLers are very aggressive about calling it "Common Lisp" and not just "Lisp"
[22:55:02] *** Quits: Ilyu (~quassel@166.215.82.79.rev.sfr.net) (Ping timeout: 240 seconds)
[22:55:14] <drakonis> to be fair, and isnt scheme also in direct lineage?
[22:59:34] <sm2n> technically CL is in scheme's lineage
[23:00:36] *** Joins: puke (~puke@user/puke)
[23:01:50] *** Joins: Ilyu (~quassel@166.215.82.79.rev.sfr.net)
[23:02:33] <Odin-> There's really very little sensible "direct lineage" in any of it.
[23:04:15] <White_Flame> yeah, I guess I should say that's how I perceived it
[23:04:24] <White_Flame> the attitude towards it being "Lisp" that is
[23:04:35] <White_Flame> but as I also said, I think that's in the minority nowadays
[23:04:38] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[23:05:12] <pjb> White_Flame: not anymore. in libera.chat, #commonlisp is for Common Lisp; #lisp is for all lisps.
[23:05:21] <pjb> White_Flame: try: /topic
[23:05:43] <White_Flame> the question was about the general name "Lisp", not the irc channel names
[23:06:03] <pjb> drakonis: they're not, it just was how it was in freenode, for historical reasons. But when we swiched to libera.chat, we set the record straight.
[23:06:08] <pjb> http://cliki.net/IRC
[23:06:26] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:06:32] <pjb> White_Flame: oh, then, well, scheme calls itself scheme, not something lisp something.
[23:06:49] <pjb> or even rape or racket or some other crime…
[23:07:24] <drakonis> scheme isnt a crime lol
[23:07:38] <pjb> A lot of premeditated crimes are backed by a scheme.
[23:07:48] *** Joins: vats (~vats@180.149.226.25)
[23:07:56] <qhong> pjb: racket sucks as much as haskell, there're bunch of lispy schemes around though
[23:07:59] <drakonis> a schematic
[23:08:20] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10b2:4cc6:61fa:6895:b24:4361) (Ping timeout: 268 seconds)
[23:09:23] <drakonis> racket is a pain
[23:11:09] <drakonis> the top-level is hopeless...
[23:14:13] <drakonis> its the most infuriating thing about racket
[23:15:23] <qhong> its haskell with parentheses
[23:16:25] <qhong> why you even want to modify any loaded module, just restart your process lol; why you even need debugger, printing a trace is good enough haskeller live with it
[23:25:13] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[23:27:03] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:37:56] *** Quits: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[23:38:22] *** Quits: shozo (~user@178.74.52.55) (Ping timeout: 250 seconds)
