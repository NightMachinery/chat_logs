[00:03:05] *** Quits: darkstarx (~darkstard@50.39.115.145) (Read error: Connection reset by peer)
[00:03:16] *** Quits: paul424 (~tom@ip-5-172-232-252.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[00:03:26] *** Joins: Simplar (~Simplar@188.163.93.76)
[00:04:47] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[00:05:57] *** Joins: darkstarx (~darkstard@50.39.115.145)
[00:06:53] *** Quits: darkstarx (~darkstard@50.39.115.145) (Remote host closed the connection)
[00:07:20] *** Joins: darkstarx (~darkstard@50.39.115.145)
[00:08:57] <ville> Alipha: copy/move ctors already can have them http://www.eelis.net/c++draft/class.copy.ctor#1.sentence-1
[00:09:09] <ville> but yes it could be a possible direction to go
[00:10:29] <mort> should you be able to assign to a moved-from object
[00:10:47] <ville> i'd exepct so
[00:11:07] <mort> does the standard say anything about it?
[00:11:14] <ville> you only really need to be destructible. or so
[00:11:31] <PJBoy> stdlib moved from types are said to satisfy their class invariants
[00:11:41] <ville> it's different what the standard says in the language rules and then what it says about the standard library types
[00:11:48] <PJBoy> user moved-from types have user-defined semantics
[00:13:09] <ville> but personally i would find the type to be strange if it was not: assignable and destructible. it's fine if you can't call other members
[00:13:49] <PJBoy> I think that would be the minimum for sanity
[00:17:23] *** Joins: RoKenn (~RoKenn@2001:a61:3432:ab01:b8d4:5983:d577:afb4)
[00:17:23] *** Quits: RoKenn (~RoKenn@2001:a61:3432:ab01:b8d4:5983:d577:afb4) (Changing host)
[00:17:23] *** Joins: RoKenn (~RoKenn@user/rokenn)
[00:17:43] <LordKalma> fuck WSL2
[00:19:07] <PJBoy> whyyyyy?
[00:19:55] <LordKalma> because https://github.com/microsoft/WSL/issues/4739
[00:20:10] <LordKalma> Which lead to this: https://github.com/quasarframework/quasar/issues/11636
[00:20:17] *** Quits: supernova (~quassel@2405:9800:ba11:6207:4206:86d1:e39b:31be) (Ping timeout: 252 seconds)
[00:20:41] <LordKalma> no surprise why VSCode guides want you to develop with your files inside the Docker image
[00:20:46] <ashafq> Is there a STL way to "Count leading zeros"?
[00:21:15] <LordKalma> but that doesn't make any sense... what? they expect me to git clone my project in the docker image, work with vscode remote, then push from inside the repo?
[00:21:15] <kalven> ashafq: there is as of c++20: https://en.cppreference.com/w/cpp/header/bit
[00:21:15] <rpav> ashafq: not til like 20 or 23
[00:21:16] <LordKalma> fuck that
[00:21:40] <LordKalma> but leading zeros on a number, or on a numeric string? :p
[00:21:51] <rpav> bit zeros
[00:22:19] <rpav> equivalent of "find first set" and some other name iirc
[00:22:36] <LordKalma> I was asking ashafq to clarify the problem :p
[00:22:44] <LordKalma> I saw header/bit I figured it was about bits :D
[00:22:56] <rpav> i would be very surprised if someone said "count leading zeros" like that and meant string padding, but maybe
[00:23:04] <ashafq> OOO that's awesome :)
[00:23:18] <kalven> I excluded pathological possibilities
[00:23:45] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[00:24:03] <ashafq> Also, what's the difference between template<typename T> vs template <class T>?
[00:24:10] <LordKalma> none
[00:24:23] <rpav> typename is longer, but seems less silly when you use `int`
[00:24:32] <LordKalma> that
[00:24:53] <ashafq> So is "class > typename"
[00:24:58] <LordKalma> no
[00:25:05] <LordKalma> everybody who is sane writes typename
[00:26:03] <ashafq> LordKalma: Why does C++ STL write class according to that cppreference site? (https://en.cppreference.com/w/cpp/header/bit)
[00:26:20] <LordKalma> because you have to be insane to write STL code
[00:26:35] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[00:26:39] <Alipha> again, there's no difference between "typename" and "class" there.
[00:26:47] <PJBoy> stdlib implementations can write typename or class
[00:27:01] <PJBoy> cppreference just likes class for some reason
[00:27:04] <rpav> #define class typename
[00:27:07] <ville> there used to be a difference between what you could use class and typename, so back then class would have been the more universal one
[00:27:40] <LordKalma> anyway, PJBoy, get my complain with WSL2?
[00:27:57] <LordKalma> it's so BS you can't get file notifications... like wtf...
[00:27:59] <PJBoy> it's a long bug thread
[00:28:06] <LordKalma> works in Hyper-V of all things
[00:28:20] <LordKalma> PJBoy, https://github.com/quasarframework/quasar/issues/11636 is enough reading
[00:28:26] <PJBoy> the VS workflow shouldn't need to rely on this
[00:28:28] <Alipha> geordi: --2017 {} template<template<typename> typename T> class foo {};
[00:28:29] <geordi>  
[00:28:32] <Alipha> geordi: --2014 {} template<template<typename> typename T> class foo {};
[00:28:33] <geordi> error: ISO C++ forbids key in template template parameter; use '-std=c++17' or '-std=gnu++17'
[00:28:33] <ashafq> "enum class endian {..." no caps on enum name... I guess you _have_ to be insane to write STL
[00:28:40] <Alipha> geordi: --2014 {} template<template<typename> class T> class foo {};
[00:28:40] <LordKalma> PJBoy, it works around the problem, in a way I call BS
[00:28:40] <geordi>  
[00:28:59] <PJBoy> well it uses rsync when you compile
[00:29:03] <PJBoy> that's pretty fair
[00:29:25] <Alipha> i'm surprised it wasn't until c++17 that `template<typename> typename` was allowed
[00:29:38] <rpav> Alipha: D: same
[00:29:51] <rpav> though it's still incredibly annoying you can't template type-or-value
[00:29:57] <rpav> horrifying even
[00:31:10] *** Quits: Burgundy (~yomon@79.115.213.171) (Remote host closed the connection)
[00:33:02] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[00:33:30] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[00:34:03] <PJBoy> [n4051]
[00:34:03] <npaperbot> N4051: [Evolution] Allow typename in a template template parameter <https://wg21.link/n4051> (by Richard Smith) (2014-05-26) (Related: https://wg21.link/ewg131)
[00:34:37] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[00:34:42] <PJBoy> some proposals are just that simple
[00:35:12] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[00:35:20] <rpav> some are necronomic
[00:35:20] <PJBoy> > 103 hidden items
[00:35:26] <PJBoy> well guess I'm not reading this whole thread
[00:35:47] <rpav> this box apparently needs more ram
[00:37:35] <rpav> -fsanitize=address,undefined is very time and space consuming
[00:40:26] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:42:20] *** Joins: CaCode (~CaCode@user/cacode)
[00:44:02] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Ping timeout: 260 seconds)
[00:51:07] <rpav> `auto* p = new T[1];` is still not valid to free via `delete p;` right
[00:51:24] <kalven> right
[00:51:25] <rpav> i guess it's UB and _maybe_ ubsan can't tell the difference
[00:51:35] <rpav> like just because it doesn't trigger doesn't mean it's not an issue
[00:52:07] <PJBoy> { delete new int[1]; }
[00:52:08] <geordi> warning: 'void operator delete(void*, size_t)' called on pointer returned from a mismatched allocation function
[00:52:16] *** Joins: Burgundy (~yomon@79.115.213.171)
[00:52:23] <PJBoy> >_>
[00:52:26] <rpav> sure, but it won't segfault most days
[00:52:34] *** Joins: CaCode_ (~CaCode@user/cacode)
[00:52:46] <PJBoy> geordi, use -w
[00:52:47] <geordi> error: tried to apply non-array operator delete to pointer returned by new[]. Aborted
[00:52:52] <rpav> but imagine more { std::vector<int> v; v.emplace_back(); delete &v[0]; }
[00:52:55] <PJBoy> I mean it's definitely detectable
[00:53:14] <rpav> obviously it will (probably) crash in ~vector, but ubsan doesn't seem to notice
[00:54:02] *** Quits: shailangsa (~shailangs@host86-161-220-126.range86-161.btcentralplus.com) (Ping timeout: 256 seconds)
[00:54:13] <PJBoy> because of double delete rather than mismatched new/delete
[00:54:39] <PJBoy> but if new/delete were mismatched, it should be detected by *something*
[00:54:42] <rpav> right, or for a nontrivial type probably blowing up because of something else in its ~T but
[00:55:41] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 268 seconds)
[00:55:52] <rpav> https://godbolt.org/z/WaeM6sjWb
[00:56:00] <rpav> change the 1 to 2 and it becomes a new-delete mismatch
[00:56:27] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[00:57:09] <rpav> i mean, it's UB, so it's not at all surprising to have the system treat a `new T[1];` as if it were a `new T;` and save some bytes or whatever
[00:57:57] <rpav> actually
[00:58:16] <rpav> D:
[00:58:33] <rpav> leave the v(1) and change the delete to delete[] and it's alloc-dealloc-mismatch
[00:58:48] <rpav> maybe it's just vector that chooses
[00:59:16] <rpav> yeah must be
[01:00:49] <rpav> (obviously, this is nothing you _should_ be doing, but if you encounter a bug that _happens_ to mis-free the first element of a single-element vector, your tooling may give slightly confusing errors)
[01:13:23] *** Joins: CaCode (~CaCode@user/cacode)
[01:13:52] *** Quits: CaCode_ (~CaCode@user/cacode) (Ping timeout: 256 seconds)
[01:21:09] *** Joins: shailangsa (~shailangs@host86-186-127-128.range86-186.btcentralplus.com)
[01:21:30] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:24:38] *** Quits: robod34 (Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:38:54] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[01:39:19] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:39:22] <cart_man> Is there a way to make a conditional variable just pause until its notified without a condition lambda? So that lets say its in a WHILE(True) {  std::unique_lock<std::mutex> lk(cv_mutex);  cv.wait(lk, []{return true;});  },  It will run through the WHILE once and then just pause and wait for the next notify ? I dont want to have to return some result for it to continue or not BUT I still want it to wait for the next cv.notify_one()
[01:39:27] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:39:27] *** ChanServ sets mode: +v npaperbot
[01:39:37] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[01:40:26] <imMute> cart_man: you have to have some kind of mechanism to check if you really should proceed because CVs can wake up "spuriously", as in on their own without a notify() happening.
[01:40:57] <cart_man> imMute: shit ... That sucks
[01:41:32] <imMute> that being said, there's a wait() overload that doesn't take that predicate
[01:43:08] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[01:50:46] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:a4b4:347c:365d:9ab6)
[01:50:46] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:a4b4:347c:365d:9ab6) (Changing host)
[01:50:46] *** Joins: skapata (~Skapata@user/skapata)
[01:51:00] <cart_man> imMute: Yea but because of the spurious tendancies Id rather build some check into it
[01:54:48] *** Quits: QuaternionsRock (~Quaternio@2601:197:a7f:79d6:5c94:a166:37ee:2bab) (Quit: Client closed)
[01:55:55] <RandomReader> cart_man - late response, but I'd also be wary of the idea of using [u]alarm / signals .. why that approach specifically?
[01:56:31] <cart_man> RandomReader: I just want some app to keep the time asynch from my app WITHOUT me having to create an additional threat
[01:56:43] <cart_man> It doesnt have to be 100 accurate though
[01:56:59] *** Quits: Simplar (~Simplar@188.163.93.76) (Quit: Going offline, see ya! (www.adiirc.com))
[01:57:14] <RandomReader> KombuchaKip - ok, so probably two broad options here .. 1) the callbacks being executed do something that stores thread-local data, and/or 2) pthread/OS is maintaining something that top is picking up
[01:57:43] <RandomReader> could also be some interesting malloc arena patterns I suppose, but then you'd see different behavior if you used tcmalloc, so I assume we can rule that out
[01:57:57] <RandomReader> cart_man - signals aren't async though
[01:58:26] <imMute> RandomReader: they aren't??
[01:58:39] <RandomReader> (well, they sort of are, but on POSIX it's cooperative not arbitrary)
[01:58:41] <cart_man> RandomReader: You are right.. I am still not sure how signals are suppose to work in reference to the main thread its called form
[01:58:43] <cart_man> from`
[01:59:00] <RandomReader> what do you mean by "keep time" though? why can't you just check the time?
[01:59:16] <Hello71> RandomReader: except there are "async signals"
[01:59:52] <RandomReader> Hello71 - what are you referring to specifically?
[02:00:33] <cart_man> RandomReader: Well it needs to run the callback at a certain time
[02:00:38] <cart_man> Interval rather
[02:00:48] <Hello71> https://www.google.com/search?hl=en&q=async%20signal
[02:01:10] <RandomReader> Hello71 - google is contextual, so the results I get are all over the map and I don't know which specific type you're thinking of
[02:01:49] <RandomReader> you could be referring to some of the extensions for signal delivery, the POSIX AIO thing that nobody supports, something non-POSIX, ...
[02:02:51] <Hello71> ok, what does "signals aren't async" mean
[02:02:54] <RandomReader> cart_man - that would usually be modeled as an event loop, and either you have something external fire events (e.g. a timer), or you have the event loop sleep until the next time is due (and if it wakes with no event you know it's time)
[02:03:44] <RandomReader> Hello71 - in the sense cart_man meant, akin to C++ std::async, where it abstractly executes independent of the code currently running
[02:04:04] *** Joins: CaCode_ (~CaCode@user/cacode)
[02:04:14] <RandomReader> but POSIX signals are closer to an event loop, it's just that a lot more functions trigger event checks
[02:04:47] <Hello71> i think you're thinking of thread cancellation
[02:04:52] <RandomReader> (note: not true of C/C++ signals in general, which aren't confined to POSIX mechanics .. just makes the whole thing more confusing)
[02:05:53] <imMute> RandomReader: I thought the kernel would pause userspace and cause it to jump to the signal handler as soon as it need to deliver the signal
[02:06:37] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 252 seconds)
[02:07:49] <cbreak> imMute: it can
[02:08:07] <Hello71> more precisely it pauses the program at some unspecified time, normally very soon after the signal is sent
[02:08:43] <immibis> cart_man: standard advice is don't do stuff in a signal handler if you can avoid it, followed by don't use signals at all if you can avoid it
[02:09:03] <immibis> what is the program waiting for exactly?
[02:09:05] <immibis> a certain time?
[02:11:49] <RandomReader> signals are checked at syscall points, not immediately
[02:12:02] <RandomReader> ...but I'm rechecking what I learned here since it may actually be system specific and not POSIX
[02:12:16] <RandomReader> Linux apparently also checks at thread-rescheduling, so timeslice points
[02:12:25] <Hello71> that's definitely not true on any unix-like platform
[02:12:35] <cbreak> imMute: but often it doesn't pause the program
[02:12:43] <cbreak> but just a single thread in that program (any thread)
[02:13:07] <Hello71> cbreak: unless you've specified otherwise!
[02:13:21] <cbreak> I don't think that's generally supported
[02:14:00] <Hello71> pthread_sigmask is supported by all POSIX-compliant systems
[02:14:28] <Hello71> if you don't have pthread_sigmask then you almost certainly don't have pthreads either
[02:14:43] * Hello71 mumbles something about back in my day, c++ didn't have threads
[02:15:25] <RandomReader> ...same for FreeBSD, kernel/user transition points, which basically means syscalls and timeslice scheduling
[02:15:31] *** Joins: CaCode- (~CaCode@user/cacode)
[02:15:43] <RandomReader> the scheduling piece of that would make it nearly immediate though, so I was wrong there
[02:16:53] *** Quits: Leone (~Leo@69-165-148-197.dsl.teksavvy.com) (Read error: Connection reset by peer)
[02:17:31] <Hello71> i'm almost certain that invoking kill will also schedule the pending signals to be checked on the target process near-immediately. otherwise it would be impossible to, for instance, kill a process in an infinite loop on an isolated cpu
[02:17:59] *** Quits: CaCode_ (~CaCode@user/cacode) (Ping timeout: 252 seconds)
[02:17:59] <cbreak> the kill signal isn't voluntary
[02:18:07] <RandomReader> POSIX doesn't seem to specify delivery
[02:18:14] <cbreak> it doesn't have to be checked / delivered I think
[02:19:03] <RandomReader> it's clear about general concept of a signal being queued and pending until it *is* delivered, but seems silent on when that occurs in the abstract
[02:19:32] <RandomReader> other than sigwait()
[02:21:53] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[02:22:02] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[02:23:00] <Hello71> https://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xsh_chap02.html "Implementations should deliver unblocked signals as soon after they are generated as possible."
[02:26:44] <cart_man> RandomReader: Thanks for the Input though
[02:27:00] <cart_man> Thanks for the help everyone Alipha inc ^^
[02:27:15] *** Quits: cart_man (~rynot@host-78-144-121-71.as13285.net) (Quit: Konversation terminated!)
[02:27:18] <Hello71> it is quite clear that a non-pathological implementation should not wait for a system call before delivering a signal, based on overwhelming historical implementations and the existence of "async signal safety"
[02:29:10] <RandomReader> hm, what's the difference between that section and this one? https://pubs.opengroup.org/onlinepubs/9699919799/functions/V2_chap02.html#tag_15_04_01
[02:29:33] <RandomReader> (aka how does one navigate that site...)
[02:30:20] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[02:30:25] <RandomReader> oh you pulled up the *rationale*, not the formal spec
[02:30:26] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[02:30:33] <RandomReader> good to know that's a thing
[02:31:33] *** Quits: jkaye (~jkaye@2601:281:8300:7530:bc2d:ca62:1f76:4faa) (Ping timeout: 252 seconds)
[02:33:07] <Hello71> https://pubs.opengroup.org/onlinepubs/9699919799/
[02:33:33] <Hello71> blast from the past, framesets
[02:33:55] <Hello71> terrible, but still way better than 100 MB react garbage
[02:34:09] <RandomReader> lol aye
[02:34:58] *** Quits: proller (~p@2a02:6b8:b081:8826::1:17) (Ping timeout: 268 seconds)
[02:39:00] <KombuchaKip> RandomReader: I think it's probably (1). Or possibly memory fragmentation, but I wouldn't know how to test that, or if fragmentation would even appear as a space leak.
[02:42:04] *** Joins: ferdna (~ferdna@user/ferdna)
[02:43:04] <RandomReader> there's very little that's automatically thread-specific though, which is what makes this interesting
[02:43:25] <RandomReader> as in, there's no thread-specific memory space that's automatically cleaned up by the OS, in general
[02:43:42] <RandomReader> (the stack would be one of those things, but not applicable here since those are returning)
[02:46:43] <RandomReader> but there's also the mechanics behind "thread_local"
[02:47:31] <RandomReader> e.g. pthreads should have some API for that
[02:47:34] *** Joins: proller (~p@80.240.216.69)
[02:47:39] <RandomReader> what are your task functions doing, in general?
[02:57:24] *** Quits: RoKenn (~RoKenn@user/rokenn) (Remote host closed the connection)
[02:57:45] *** Joins: RoKenn (~RoKenn@2001:a61:3432:ab01:b8d4:5983:d577:afb4)
[02:57:45] *** Quits: RoKenn (~RoKenn@2001:a61:3432:ab01:b8d4:5983:d577:afb4) (Changing host)
[02:57:45] *** Joins: RoKenn (~RoKenn@user/rokenn)
[03:02:20] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Remote host closed the connection)
[03:09:52] *** Joins: rajkosto (~rajkosto@178-221-103-239.dynamic.isp.telekom.rs)
[03:14:49] *** Joins: chozorho (~chozorho@2601:146:300:c30::137d)
[03:18:43] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[03:21:46] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 260 seconds)
[03:22:10] *** Joins: proller (~p@2a02:6b8:b081:7209::1:35)
[03:31:27] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 250 seconds)
[03:36:32] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[03:38:27] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[03:46:18] *** Quits: teepee (~teepee@openscad/teepee) (Ping timeout: 276 seconds)
[03:49:12] *** Quits: rajkosto (~rajkosto@178-221-103-239.dynamic.isp.telekom.rs) (Quit: Leaving)
[03:49:28] *** Joins: rajkosto (~rajkosto@178-221-103-239.dynamic.isp.telekom.rs)
[03:51:04] *** Joins: CaCode_ (~CaCode@user/cacode)
[03:52:14] *** Quits: rajkosto (~rajkosto@178-221-103-239.dynamic.isp.telekom.rs) (Client Quit)
[03:52:34] *** Joins: rajkosto (~rajkosto@178-221-103-239.dynamic.isp.telekom.rs)
[03:53:41] *** Quits: CaCode- (~CaCode@user/cacode) (Ping timeout: 252 seconds)
[03:54:06] *** Joins: CaCode (~CaCode@user/cacode)
[03:55:30] *** Joins: CaCode- (~CaCode@user/cacode)
[03:55:56] *** Quits: CaCode_ (~CaCode@user/cacode) (Ping timeout: 256 seconds)
[03:58:27] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 252 seconds)
[04:01:47] *** Joins: teepee (~teepee@openscad/teepee)
[04:02:02] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[04:05:35] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[04:06:58] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[04:16:25] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:10dd:2eb1:692e:c180) (Quit: Quit)
[04:18:55] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[04:20:06] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[04:20:48] *** Joins: teepee (~teepee@openscad/teepee)
[04:22:05] *** Joins: nexgen (~nexgen@li614-178.members.linode.com)
[04:25:27] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[04:28:28] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[04:29:27] *** Quits: CaCode- (~CaCode@user/cacode) (Quit: Leaving)
[04:30:30] *** Quits: nexgen (~nexgen@li614-178.members.linode.com) (Read error: Connection reset by peer)
[04:30:43] *** Joins: nexgen (~nexgen@li614-178.members.linode.com)
[04:30:55] *** Quits: nexgen (~nexgen@li614-178.members.linode.com) (Read error: Connection reset by peer)
[04:31:40] *** Joins: nexgen (~nexgen@li614-178.members.linode.com)
[04:32:23] *** Quits: nexgen (~nexgen@li614-178.members.linode.com) (Remote host closed the connection)
[04:32:41] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[04:36:06] *** Joins: nexgen (~nexgen@li614-178.members.linode.com)
[04:36:24] <KombuchaKip> RandomReader: They are doing some calculations for the client and then returning some JSON. But here's the thing, the memory doesn't leak. I did some more digging and added a cin.get() just before the consumer threads are told to exit, and then again right after they are all joined. The bloat is released right after they all exit, so whatever memory is being wasted, it's got to be allocated by the callback functions. But I don't see
[04:36:24] <KombuchaKip>  how though since the callback std::function is set to nullptr, which should in theory clean it all up.
[04:38:04] <immibis> while waiting in the first cin.get call, set a breakpoint on free and operator delete?
[04:38:25] <KombuchaKip> immibis: Good idea. Let me give that a go.
[04:40:02] *** Quits: nexgen (~nexgen@li614-178.members.linode.com) (Remote host closed the connection)
[04:40:50] *** Joins: nexgen (~nexgen@li614-178.members.linode.com)
[04:42:34] *** Joins: troller (~p@80.240.216.69)
[04:45:01] *** Quits: proller (~p@2a02:6b8:b081:7209::1:35) (Ping timeout: 252 seconds)
[04:45:06] *** Quits: nexgen (~nexgen@li614-178.members.linode.com) (Remote host closed the connection)
[04:45:21] *** Joins: nexgen (~nexgen@li614-178.members.linode.com)
[04:47:30] *** Quits: troller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[04:48:03] <KombuchaKip> immibis: How do I break on delete? free gdb found, but `break delete` is telling me it's not defined, but offering to set it if it finds it on a future shared library load.
[04:49:15] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[04:58:48] *** Joins: troller (~p@2a02:6b8:b081:a423::1:13)
[04:59:09] <PJBoy> maybe `break operator delete`
[04:59:58] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[05:03:50] <KombuchaKip> PJBoy: Thanks. Didn't even know there was an operator keyword.
[05:05:47] <Hello71> although if break free didn't work then break operator delete probably won't work either
[05:11:11] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:3903:97c7:b91d:e3ae) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:26:08] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Quit: very_sneaky)
[05:31:23] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[05:39:20] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:39:28] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:39:28] *** ChanServ sets mode: +v npaperbot
[05:45:11] *** Quits: pulse (~pulse@user/pulse) (Quit: Join our gamedev community https://indiedevs.net/)
[05:51:06] *** Quits: troller (~p@2a02:6b8:b081:a423::1:13) (Ping timeout: 260 seconds)
[05:57:05] *** Joins: seninha (~seninha@user/seninha)
[05:59:33] *** Joins: artok (~azo@mobile-access-5d6a99-113.dhcp.inet.fi)
[06:03:35] *** Joins: troller (~p@80.240.216.69)
[06:06:39] *** Joins: frost (~frost@user/frost)
[06:10:44] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[06:13:30] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 260 seconds)
[06:16:29] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:26:30] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[06:27:59] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:44:35] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[07:02:55] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 250 seconds)
[07:09:26] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:31:09] *** Joins: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4)
[07:31:10] <hnOsmium0001[m]> hmm is the matrix bridge broke for only this channel?
[07:31:23] <hnOsmium0001[m]> yep I don' see ^^^ that message in the channel log
[07:32:27] <hnOsmium0001[m]> actually nvm there is just a really big delay
[07:33:05] <hnOsmium0001[m]> and I exited this channel somehow (and the bridge status didn't tell me I exited...)
[07:36:37] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 252 seconds)
[07:40:23] *** Quits: Dragoon (~Dragoon@user/dragoon) (Read error: Connection reset by peer)
[07:53:11] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Ping timeout: 250 seconds)
[07:58:04] *** Joins: Dragoon (~Dragoon@user/dragoon)
[08:00:16] *** Quits: Tokamak (~Tokamak@172.58.191.126) (Read error: Connection reset by peer)
[08:05:22] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[08:05:39] *** Joins: Tokamak (~Tokamak@172.58.191.126)
[08:14:22] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[08:15:01] *** Joins: thad_the_man_2 (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4)
[08:26:47] *** Joins: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com)
[08:53:32] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[08:56:01] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:01:32] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[09:05:19] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95) (Ping timeout: 268 seconds)
[09:07:06] *** Quits: artok (~azo@mobile-access-5d6a99-113.dhcp.inet.fi) (Ping timeout: 260 seconds)
[09:13:13] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:719f:b1db:e5b1:8e4a)
[09:13:29] *** Joins: arandomcomrade (~arandomco@user/arandomcomrade)
[09:26:55] *** Quits: frost (~frost@user/frost) (Remote host closed the connection)
[09:29:22] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:719f:b1db:e5b1:8e4a) (Ping timeout: 268 seconds)
[09:30:14] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:719f:b1db:e5b1:8e4a)
[09:30:52] *** Joins: frost (~frost@user/frost)
[09:31:24] *** Quits: letto (~letto@188.26.158.104) (Quit: Konversation terminated!)
[09:32:04] *** Quits: arandomcomrade (~arandomco@user/arandomcomrade) (Quit: Leaving)
[09:35:34] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:719f:b1db:e5b1:8e4a) (Ping timeout: 260 seconds)
[09:37:43] *** Joins: letto (~letto@188.26.158.104)
[09:39:20] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:39:28] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:39:28] *** ChanServ sets mode: +v npaperbot
[09:47:24] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:719f:b1db:e5b1:8e4a)
[09:50:40] *** Joins: artok (~azo@mobile-access-5672d1-115.dhcp.inet.fi)
[09:52:10] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:719f:b1db:e5b1:8e4a) (Ping timeout: 268 seconds)
[10:03:22] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:719f:b1db:e5b1:8e4a)
[10:05:51] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 252 seconds)
[10:07:41] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:719f:b1db:e5b1:8e4a) (Ping timeout: 252 seconds)
[10:09:11] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[10:09:16] *** Joins: lindylex (~lindylex@pool-100-11-60-12.phlapa.fios.verizon.net)
[10:09:40] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[10:09:57] <lindylex> Using Debian and trying to setup code completion with Netbeans.   Not sure where to point CCLS location.
[10:09:58] *** Joins: m1cl[m] (~m1cl@2001:470:69fc:105::2d57)
[10:09:58] *** Joins: aleko1[m] (~aleko1@2001:470:69fc:105::1:1016)
[10:09:58] *** Joins: scjg (~scjgmatri@2001:470:69fc:105::f5d6)
[10:09:58] *** Joins: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21)
[10:09:58] *** Joins: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76)
[10:09:58] *** Joins: arconte[m] (~arcontema@2001:470:69fc:105::1:2fe4)
[10:09:59] *** Joins: ambasta (~ambasta@2001:470:69fc:105::1:3973)
[10:09:59] *** Joins: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631)
[10:10:19] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[10:15:14] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[10:26:13] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[10:26:52] *** Joins: seninha (~seninha@user/seninha)
[10:28:01] <RandomReader> definitely stick around in case someone knows, but you may need to spread out a bit and try to find a netbeans-centric area to ask, my impression is that it's not very popular (relatively speaking) for C++
[10:28:35] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[10:28:35] <lindylex> Any suggestions on IDE with auot complete for C++ ob Linux?
[10:28:57] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 252 seconds)
[10:29:46] <klys> lindylex, qtcreator
[10:29:48] <RandomReader> a few I see frequently mentioned are CLion, Qt Creator, VS Code
[10:30:30] <lindylex> Thanks
[10:30:40] <RandomReader> (it may not be obvious but Qt Creator the IDE can be used separately from Qt the library)
[10:31:34] <RandomReader> there are also a few vim diehards, but I don't know all the tools they add to actually get autocompletion ec :)
[10:32:02] <lindylex> I never knew this was going to be that challenging.
[10:32:22] <lindylex> I got it to work with Atom easy install.
[10:32:58] *** Quits: letto (~letto@188.26.158.104) (Ping timeout: 260 seconds)
[10:33:22] <RandomReader> the "intelligence" problem for C++ is that it's a complex highly-contextual language, which means nothing short of an actual compiler can understand it
[10:34:08] <lindylex> Thanks for explaining this.
[10:34:16] <RandomReader> so the tooling has ended up based on compilers to provide that sort of information, which means needing to understand your build system, etc
[10:34:33] <RandomReader> which just makes the whole thing a complicated pile, so they're doing the best they can with it all .. doesn't make it super easy though
[10:35:11] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[10:35:26] <lindylex> I needed this explanation as I was unsure why this was so difficult.
[10:36:37] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:719f:b1db:e5b1:8e4a)
[10:37:59] <RandomReader> typically these days there will be something based on clang providing the intelligence, set up as a "language server", and the editor plugs into it
[10:38:22] <RandomReader> that's probably the mechanism the Netbeans CCLS is using, I'm just not familiar with it or what it's looking for exactly
[10:39:33] <RandomReader> the other IDEs at least ship with what they need or tell you how to get it directly, since C++ is a primary focus for them
[10:40:43] <lindylex> There is place it ask for the location under Tools/Options/C/C++/ccls configuration.   I though if I just downloaded it with app and point this to the binary that would take care of thing.  Nothing has changed.
[10:41:45] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:719f:b1db:e5b1:8e4a) (Ping timeout: 250 seconds)
[10:46:03] *** Joins: letto (~letto@188.26.158.104)
[10:51:09] *** Joins: supernova (~quassel@2405:9800:ba11:6207:4cfa:703c:e554:842)
[10:54:47] <johnny> ccls? is that an alternative clangd?
[10:54:51] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:719f:b1db:e5b1:8e4a)
[10:55:06] <lindylex> I believe so.
[10:55:13] <johnny> i sure hope i have some reason to deal with C++ again in the future
[10:56:08] <johnny> lindylex, well your best bet is to ask netbeans folks, since i've never heard anybody here mention using it
[10:56:18] <johnny> maybe they have an irc channel as well
[10:56:51] <lindylex> I am in there channel on this network with no answer.  posted the quest over 24 hours ago.
[10:57:05] <johnny> well i suppose that really shows how not popular it is
[10:57:20] <lindylex> True
[10:58:27] <johnny> lindylex, well it could be that irc isn't their primary async communication channel as well? i know some folks have communitys on slack, matrix, gitter, or discord
[10:58:38] <johnny> i often forget that because i'm so used to irc
[10:59:04] <lindylex> Same here I have not really left IRC since I startedover 22 years ago.
[10:59:19] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:719f:b1db:e5b1:8e4a) (Ping timeout: 250 seconds)
[11:01:10] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[11:03:42] <very_sneaky> lindylex: i found vim reasonably easy to get going. I use the YouCompleteMe plugin - i think another good option is coc, both use clangd as the language server for autocompletion/code following. Pretty sure there's a vscode plugin for clangd as well
[11:05:46] <lindylex> Thanks everyone for the input.  I need to get it together and star using Vim.
[11:05:52] <very_sneaky> looks like coc can also use ccls
[11:07:48] <very_sneaky> vim has pro's and cons. one of the cons is debugging support - termdebug was only introduced recently and only supports gdb. vscode might be a better first step if you aren't prepared for a clunky debugging experience (assuming you don't already know how to use gdb/lldb from the CLI/TUI - if you do then it probably won't feel as clunky)
[11:09:32] <very_sneaky> for interest though: https://ianding.io/2019/07/29/configure-coc-nvim-for-c-c++-development/, https://github.com/ycm-core/YouCompleteMe, https://stackoverflow.com/questions/51885784/how-to-setup-vs-code-for-c-with-clangd-support
[11:10:01] *** Quits: Itaru (~DaSH@ro2.flokinet.is) (Ping timeout: 252 seconds)
[11:11:01] *** Quits: supernova (~quassel@2405:9800:ba11:6207:4cfa:703c:e554:842) (Ping timeout: 250 seconds)
[11:13:58] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Quit: Leaving)
[11:17:41] <ville> lindylex: the preprocessor in c and c++ is one thing that prevents simple understanding of code in the general case. you need to know all the defines that are in effect and preprocess or work on preprocessed code
[11:18:41] <lindylex> ville : I appreciate you taking time to explain this.
[11:22:17] *** Quits: tesuji (~quassel@2a02:908:180:9500:c920:d3a7:8e12:f696) (Ping timeout: 250 seconds)
[11:23:40] <ville> i would expect kdevelop and qtcreator come out with fairly alright c++ envrionments out of the box. with very little to no setup required
[11:23:58] <ville> if you're on windows then visual studio as well, not to be confused with visual studio code
[11:24:19] <lindylex> Currently using visual studio code
[11:25:00] <ville> visual studio code is probably next on the amount of the setup required and then after that comes emacs and vim
[11:25:38] *** Quits: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com) (Quit: Client closed)
[11:26:23] <ville> you can largely get identical functionality out of all of these, the difference would be in the amount of setup you have to do to get there
[11:26:47] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:719f:b1db:e5b1:8e4a)
[11:26:49] <ville> i guess throw in clion in the first group with kdevelop and qtcreator
[11:27:28] <lindylex> Right I am wondering which one to focus one since I am stuying C++ and would like to be prepared for industry at some point.
[11:27:34] <ville> in the end it's not going to matter one bit which you use, it's not going to determine how "well" you program
[11:27:43] <lindylex> True
[11:31:39] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:719f:b1db:e5b1:8e4a) (Ping timeout: 252 seconds)
[11:31:45] <ville> i guess on macos there's xcode to go in the first group with the other IDEs
[11:37:20] <lindylex> Is this the channel individuals ask about C++ coding questions?
[11:40:28] <ville> if it's really a c++ question then #c++, if it's something adjacent then here.
[11:40:57] <ville> a pretty quick self-test is to take a guess whether the c++ standard would have the answer or not
[11:41:16] <lindylex> Thanks for the clarification.
[11:42:35] <ville> so if your phrasing of the question involves the name of a particular tool, operating system, library... then probably for this channel
[11:43:21] *** Joins: CaCode (~CaCode@user/cacode)
[11:43:38] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:719f:b1db:e5b1:8e4a)
[11:48:44] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:719f:b1db:e5b1:8e4a) (Ping timeout: 268 seconds)
[11:49:25] *** lh_cat is now known as lh_mouse
[11:53:04] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[11:53:11] *** Quits: CaCode (~CaCode@user/cacode) (Quit: Leaving)
[11:57:45] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[12:00:13] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:719f:b1db:e5b1:8e4a)
[12:04:31] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:719f:b1db:e5b1:8e4a) (Ping timeout: 250 seconds)
[12:07:21] *** Joins: supernova (~quassel@2405:9800:ba11:6207:5f2a:e2d6:92d1:a12e)
[12:16:17] *** Joins: AmR (~AmREiSa@156.207.199.106)
[12:16:28] *** Quits: lindylex (~lindylex@pool-100-11-60-12.phlapa.fios.verizon.net) (Ping timeout: 268 seconds)
[12:18:25] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:10dd:2eb1:692e:c180)
[12:25:55] *** Joins: robod34 (Username@79.113.195.239)
[12:28:13] *** Joins: meator (~meator@user/meator)
[12:29:10] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Ping timeout: 260 seconds)
[12:30:42] *** Joins: Burgundy (~yomon@79.115.213.171)
[12:30:50] *** Quits: peeps (~peepsalot@openscad/peepsalot) (Remote host closed the connection)
[12:31:15] *** Joins: peeps (~peepsalot@openscad/peepsalot)
[12:35:53] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[12:36:27] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[12:36:46] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[12:39:38] *** Joins: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com)
[12:41:13] *** Joins: Snyp (~Snyp@49.207.209.233)
[12:41:18] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 260 seconds)
[12:41:26] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[12:46:28] *** Joins: kenanmarasli_ (~kenanmara@user/kenanmarasli)
[12:49:26] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[12:49:35] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Ping timeout: 250 seconds)
[12:56:35] *** Quits: rajkosto (~rajkosto@178-221-103-239.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[13:03:20] <ent58> This might be a bit of a dumb exercise, but I want to understand something a bit deeper: https://wandbox.org/permlink/Geg3nCKnOxTo2aUK
[13:03:21] <ent58> Very rough bad code aside, is this something the compiler should warn about?
[13:04:37] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[13:06:19] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[13:06:25] <Stryyker> What are you trying to do?
[13:06:43] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:719f:b1db:e5b1:8e4a)
[13:08:06] <ville> ent58: warn about what? you've gone and used various casts to tell the compiler to shut up
[13:09:24] <ent58> In a safe manner, copy a compiled function to a buffer. I know there's probably no standardese that even tries to elaborate on this, but I wanted to explore what the limitations were. Assume I would know the size of the function by some other means (linker script to grab a symbol representing the length)
[13:09:45] *** Joins: andreasbuhr (~quassel@p549db264.dip0.t-ipconnect.de)
[13:09:45] *** Quits: andreasbuhr (~quassel@p549db264.dip0.t-ipconnect.de) (Client Quit)
[13:10:38] <ville> sure you can copy bytes around and even convince the program to jump to a location and start executing the bytes as instructions
[13:11:18] <ent58> ...are you _sure_? Like, super duper sure?
[13:11:43] <ville> still unclear what the question is
[13:12:08] <ville> what was the compiler supposed to warn you about when you explicitly told it to shut up
[13:12:26] <ent58> I know that I would need to verify a few assumptions first about pointer sizes, but I think what I'm asking is, as long as I detect some things about the target platform, are you saying there's no gamebreaking UB/IDB that would make this brittle?
[13:12:44] <ville> oh it's absolutely ub
[13:12:58] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[13:13:00] <ville> but when you're going for something like this you are past caring about ub
[13:13:16] *** Joins: szutt (~szutt@116.37.2.145)
[13:13:17] <ent58> But if it's UB, that's it right?
[13:13:33] <ville> "that's it"?
[13:14:14] <ville> c++ standard gives you portable promises. then says other stuff is ub. you can get guarantees elsewhere for the ub parts that make it in fact defined on the platforms you care
[13:14:17] *** Quits: thad_the_man_2 (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4) (Quit: Leaving)
[13:14:33] <ent58> I guess what I mean is...it's possible this could not work at all, given a strict compiler?
[13:15:26] <ville> yes changing the compiler, even the version of the same compiler, platform and so on would require you to re-examine the guarantees you derived for one specific environment
[13:16:04] <ville> even just passing different flags to the same compiler. depending how far you went to derive the guarantees in the first place
[13:18:25] *** Joins: ibenn (~benn@2a02:8071:45af:1700:c0d0:7d46:b359:44f)
[13:21:24] *** kenanmarasli_ is now known as kenanmarasli
[13:21:43] <RandomReader> the reinterpret_cast and whether it succeeds is entirely implementation dependent
[13:22:08] <RandomReader> as far as the language standard is concerned, a function is not data, and a pointer-to-function is not equivalent to any other pointer (meaning it may not be possible to convert them)
[13:22:20] <RandomReader> the fact that it compiled is already an implementation extension
[13:22:44] <RandomReader> (in this case, it's partly due to POSIX)
[13:23:09] <ville> vis-a-vis pointer-to-function posix now made that even optional i believe
[13:23:20] <RandomReader> so no not something it should warn about, since you're intentionally using implementation behavior
[13:23:49] <ville> or rather told the compiler to shut up, regardless whether you were or weren't
[13:24:10] <ent58> would the reverse be UB? say I had a buffer that I loaded from a file with instructions already compiled, and (W^X nothwithstanding) allowed a function pointer to point to it. RandomReader: in my searching, that specific void * <-> pfn guarantee came up, and I figured that would help a little in this case.
[13:24:43] <RandomReader> yes, that's what I meant by "function is not data"
[13:25:06] <RandomReader> as far as the language is concerned, it's not something you can store or transport, it exists entirely outside the program .. it's what's running, not what you can manipulate
[13:25:24] <ent58> RandomReader: is that implementation defined or undefined? implementation I can live with because it means it's not going to launch nukes
[13:25:32] <RandomReader> it's formally undefined
[13:25:43] <ent58> mm
[13:25:53] <RandomReader> meaning there is nothing in the C++ standard that will cover its behavior, and no implementation is ever required to support or document it
[13:26:09] <RandomReader> that does NOT mean an implementation can't come along and makes its own guarantees anyway, if it wants to
[13:26:21] <RandomReader> it's just entirely an extension at that point, not part of C++
[13:26:37] <ent58> I would love to try to extend a feature like this as a compiler plugin
[13:26:58] <RandomReader> LLVM probably already covers anything you'd want here
[13:27:06] <RandomReader> given that it supports JIT environments, among other things
[13:27:52] <RandomReader> (so you'd just use it as a library)
[13:28:46] *** Quits: szutt (~szutt@116.37.2.145) (Ping timeout: 256 seconds)
[13:29:12] <ent58> Are you familiar with the type of things LLVM's JIT compiler can do?
[13:29:19] <ville> dlopen()/LoadLibrary()
[13:29:41] <RandomReader> no, I'm aware it's capable but I've never explored it myself
[13:30:29] <RandomReader> I believe cling is one that uses it in practice: https://github.com/vgvassilev/cling
[13:31:06] *** Quits: chozorho (~chozorho@2601:146:300:c30::137d) (Quit: WeeChat 3.0)
[13:31:25] *** Quits: Snyp (~Snyp@49.207.209.233) (Quit: Textual IRC Client: www.textualapp.com)
[13:32:10] *** Joins: szutt (~szutt@116.37.2.145)
[13:33:00] <RandomReader> a couple other things I've apparently bookmarked: https://github.com/jmmartinez/easy-just-in-time   https://eli.thegreenplace.net/2017/adventures-in-jit-compilation-part-3-llvm/
[13:34:22] *** Joins: peeps[zen] (~peepsalot@openscad/peepsalot)
[13:35:35] *** Quits: peeps (~peepsalot@openscad/peepsalot) (Ping timeout: 252 seconds)
[13:37:07] <supernova> folks, is there a way to produce gui without any vendor libraries?
[13:37:28] <RandomReader> ville - I don't have full context for it, but looks like this might be what you were thinking of? https://www.austingroupbugs.net/view.php?id=1439
[13:37:32] <ent58> handwrite X/Wayland/Win32 API calls
[13:37:42] <supernova> i just want to start my education here and make some kind of C++ GUI without popular extensions like QT and others... Please lead me the way
[13:37:50] *** Quits: szutt (~szutt@116.37.2.145) (Ping timeout: 256 seconds)
[13:38:12] <RandomReader> C++ doesn't have any standard support for GUIs, if that's the question
[13:38:34] <RandomReader> you'd just use whatever API(s) are available on your target platform
[13:39:21] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:39:29] <supernova> You mean there is no possibility to build your own GUI?
[13:39:29] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:39:29] *** ChanServ sets mode: +v npaperbot
[13:40:00] <RandomReader> I'm not sure what you're asking, everything about a GUI is specific to a platform, so of course you can do that
[13:40:15] <RandomReader> otherwise something like Qt wouldn't exist...
[13:40:37] <supernova> yes, right!
[13:40:44] <ent58> supernova: what you want to do is only achievable by asking the underlying OS to do it for you, and those popular libraries do exactly that
[13:41:05] <supernova> I still dont get it
[13:41:17] <supernova> if QT exists, why could not i make similar project
[13:41:24] <RandomReader> you can
[13:41:26] <supernova> yes
[13:41:29] <ent58> You can of course
[13:41:34] <RandomReader> so what is the question? :)
[13:41:37] <supernova> how can i start/find clues/books/forums
[13:41:44] <supernova> here ^ :)
[13:41:49] <RandomReader> start by choosing a platform, and then looking for the API documentation for it
[13:42:10] <RandomReader> platform as in OS, windowing environment if it's one that supports several, etc
[13:42:26] <RandomReader> ent58 mentioned a few a moment ago
[13:42:26] <supernova> Linux?
[13:42:34] <ent58> You can't write a GUI that's going to work for every operating system, so you have to pick one
[13:42:50] <supernova> Yeah. Sure
[13:42:51] <ent58> if you're on Linux, you're going to be writing code that targets either the X11 or Wayland display server
[13:43:05] <ent58> (usually)
[13:43:06] <supernova> it gets warmer, right
[13:44:02] <supernova> Where you would advise to start my journey?
[13:44:03] <RandomReader> and you'd start at those project sites to find their official documentation
[13:44:14] <supernova> Wayland and X11?
[13:44:25] <ent58> Yes, determine which one your linux distribution is using
[13:44:25] <RandomReader> whichever one you're targeting, yes
[13:45:08] <supernova> Ubuntu 20.04 LTS
[13:45:35] <ville> supernova: what counts as vendor? these days on user-facing operating systems you're not really granted access to a memory buffer and poke at pixels
[13:45:41] *** Joins: szutt (~szutt@116.37.2.145)
[13:46:49] <comrad> supernova: you could create an abstract api and then implement operating system/widget system specific calls
[13:46:55] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:51e0:bfac:805b:c7c4)
[13:47:02] <ent58> RandomReader: btw, thank you for those links, I think I understand a bit more about what LLVM is capable of here, and if I'm reading this right, I should be able to pass C++ to the JIT as if it were being compiled in the context of the parent program, and that is incredible...there has to be a catch
[13:47:06] <ville> supernova: all-in-all i'd just skip the whole "bring up X connection, a window and deal with events". and just pick something like SDL if you just want to explore implementing some kind of GUI
[13:47:06] *** Quits: artok (~azo@mobile-access-5672d1-115.dhcp.inet.fi) (Ping timeout: 260 seconds)
[13:47:28] <ent58> ville: I think he wants to know how SDL builds a GUI
[13:47:36] <ville> SDL doesn't have gui
[13:47:54] <ent58> err, okay, to be extremely specific
[13:48:04] <ville> SDL is one of the ways to get fast to the part where you have "memory buffer and poke at pixels"
[13:48:04] <ent58> he wants to know how to implement the tools SDL gives you to create a GUI
[13:48:20] <ent58> rather than using SDL/Qt/etc
[13:48:30] <supernova> Yes
[13:48:35] <ville> supernova: you'll waste incredible amount of time chasing down xlib/xcb details that are not documented and only exist in the heads of people who wrote the libraries. don't bother
[13:48:47] <ent58> ville: wait is it actually that bad?
[13:48:53] <ville> yes
[13:49:08] <supernova> im not sure this is impossible race
[13:49:26] <ent58> I guess this is one of the rarer occasions where Windows has a leg up then
[13:49:29] <supernova> if one can do, everyone must be able to do
[13:49:33] <ent58> I know Wayland is supposed to be pretty clean
[13:49:39] *** Joins: artok (~azo@mobile-access-b04815-253.dhcp.inet.fi)
[13:49:52] <ville> supernova: it's not impossible. i am saying it's not worthwhile. everyone has limited amount of time on the planet. as far as we know
[13:50:03] <RandomReader> Wayland's docs already look miles ahead of X11 at first glance, but this is coming from someone who hasn't spent time with either
[13:50:47] <supernova> i just need some clues how does it actually work
[13:50:57] <ent58> So, there's layers
[13:51:00] <supernova> yes
[13:51:08] <supernova> and some virtual sort of things
[13:51:17] <supernova> like photoshop layers
[13:51:18] <ent58> eh, kinda
[13:51:28] <RandomReader> ent58 - re: JIT there's probably some hookup stuff you'll have to do, but LLVM's overall goals include rapid development of tooling, optimizations, and analysis, so they try to make everything relatively easy
[13:51:54] <ville> supernova: if you just want an overview then read some blog posts or whatnot
[13:52:00] <RandomReader> you'll probably find some kind of catch but it's probably not a big one, unless you find something that just flat out haven't created as a feature yet
[13:52:44] <ent58> RandomReader: yeah from what I'm reading, this means I could do what I want and then some. Like runtime replacing functions in-context. That's something I didn't think any modern compiler actually offered, and I'm surprised that's not more common. Being able to self modify is how you get superoptimization
[13:53:12] <ent58> if it starts requiring insane overhead in the running code, like instrumentation, all the benefit is lost...might as well use function pointers
[13:53:24] <supernova> ville, ent58 thanks! starting my research
[13:53:44] <RandomReader> I'd say C++ doesn't get used for JIT much because of the language design, it's designed to produce a fairly monolithic program with the metadata boiled away
[13:54:16] <RandomReader> other languages are much more amenable to JIT in logical pieces, but then LLVM powers some of them too, so
[13:54:48] <ent58> being able to modify a hot loop as if it were compiled that way in the first place is how you get the dynamicism of a scripting language embedded in your application with none of the performance drawbacks
[13:55:09] <RandomReader> e.g. it's pretty common for C++ code to be inlined, it doesn't necessarily *keep* functions in a form that you could rewrite
[13:55:24] <ent58> mm...
[13:55:27] <ent58> yeah
[13:55:50] <ville> supernova: https://wayland-book.com
[13:55:51] <RandomReader> (whereas languages built with JIT in mind tend to keep enough metadata to rewrite and re-inline as needed)
[13:56:06] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[13:56:24] <supernova> ville:wow! Cool
[13:56:24] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[13:56:38] <ent58> I don't mind the compiler doing extra work to achieve this...one approach I had was to compile functions that needed this in their own separate object files and do the loading myself, but this would require compiling many different versions of the same function and then diff'ing the compiled result
[13:56:49] <ent58> and it's painful
[13:56:58] <RandomReader> I say languages but this is really more of a compilation model concern .. there isn't really anything about the C++ standard that prohibits this, the cling project is evidence of that .. it's just not the typical compiler design that everyone knows
[13:57:03] <ville> supernova: but really don't bother with any of it. just don't. go do more useful things with your time
[13:57:31] <ent58> without completely reimplementing a linker in your program, you have to create functions that can't use globals, extern'd anything, etc
[13:57:37] <RandomReader> right
[13:58:16] <RandomReader> so all of that is probably the catch
[13:59:07] <ent58> off to design a complete extension to the language and then drop it on the WG's head
[13:59:12] <RandomReader> lol
[14:00:54] <ent58> having this feature would complete the bottom end of C++ in my book
[14:00:55] *** Joins: peepsalot (~peepsalot@openscad/peepsalot)
[14:01:01] <ent58> sure there's more you might be able to pick out here and there
[14:01:08] *** Quits: peeps[zen] (~peepsalot@openscad/peepsalot) (Ping timeout: 256 seconds)
[14:01:09] <ent58> but having true function-objects
[14:01:29] <ent58> closes the gaping von-neumann shaped hole I think the language has
[14:02:04] <ent58> could even overload the syntax in true C++ fashion
[14:02:12] <ent58> make "mutable" a function attribute
[14:03:22] <RandomReader> I think it'll have to remain a platform-specific thing for a while yet
[14:03:32] <ent58> Oh for certain
[14:03:42] <ent58> locked down non-W^X machines it would just be disabled
[14:03:48] <ent58> feature macro/optional
[14:03:59] <RandomReader> C++ supports a pretty wide range of systems, not all of them could support something like this
[14:04:16] <ent58> I know any major architecture can
[14:04:29] <RandomReader> e.g. Harvard architecture systems running from ROM
[14:04:33] <ent58> surely you're not doing this with car/plane ROMs
[14:04:35] <ent58> yeah
[14:04:36] <ent58> but
[14:04:51] <RandomReader> those aren't minor architectures, they power a significant fraction of the world :)
[14:05:17] <RandomReader> common desktop/server machines powering web-based stuff? it's just a niche in the grand scheme of programmable devices
[14:05:38] <ent58> I'm thinking more along the lines of HPC/Games/VR/AR
[14:06:32] <ent58> there are algorithms that get a not-so-insignificant speedup when the speed of a true write-invalidate is close to the cycle speed of the algorithm when used in practice
[14:06:46] <ent58> superoptimization
[14:07:34] <ent58> if you're using this to actually self modify in the dumb way then it's dreadfully slow
[14:07:49] <ent58> like writing the next instruction with the current one
[14:08:39] <RandomReader> yeah there are certainly uses for this sort of thing
[14:09:34] <RandomReader> one of the reasons for Apple's investment in LLVM (which eventually spawned clang) was effectively JIT for their graphics pipeline
[14:10:05] <RandomReader> not quite on the level you're thinking of, although I have no idea what they're doing currently, I haven't kept up
[14:10:08] <ent58> I know a very common case of JIT is specialization, which is what Apple did there I believe
[14:10:23] <ent58> basically runtime re-write once and then cache
[14:10:34] <ent58> removing flags, removing state checks, etc
[14:10:36] <ent58> where it can be done
[14:10:57] <ent58> instead of "did they want X" it's just "write the instruction that jumps to X"
[14:11:21] <ent58> but yeah that's like phase 1 of what I want
[14:11:39] <ent58> in fact
[14:12:26] *** Quits: artok (~azo@mobile-access-b04815-253.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:13:25] <ent58> I think that use case is so prevalent as the low-hanging-fruit that I kind of associated that with what JIT does
[14:13:43] <ent58> while LLVM's stuff looks amazing I'm not exactly sure yet if it can do what I want
[14:15:02] <smallville7123> does gcc need to parse the file multiple times or only once?
[14:15:05] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[14:15:43] <MaddHatter> I think every compiler now is two-pass, isn't it?
[14:17:36] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[14:19:35] *** Quits: supernova (~quassel@2405:9800:ba11:6207:5f2a:e2d6:92d1:a12e) (Ping timeout: 252 seconds)
[14:32:30] <smallville7123> alright
[14:37:11] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 252 seconds)
[14:37:12] *** Quits: szutt (~szutt@116.37.2.145) (Quit: Ping timeout (120 seconds))
[14:37:25] *** Joins: szutt (~szutt@116.37.2.145)
[14:43:25] *** Quits: meator (~meator@user/meator) (Ping timeout: 252 seconds)
[14:43:57] *** Quits: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com) (Quit: Client closed)
[14:44:14] *** Joins: paul424 (~tom@ip-31-0-124-13.multi.internet.cyfrowypolsat.pl)
[15:01:13] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[15:02:36] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[15:17:37] *** Joins: supernova (~quassel@2405:9800:ba11:6207:ea47:de58:1789:b007)
[15:22:33] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[15:26:02] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[15:37:16] <smallville7123> how does cpp parse line continuation characters?
[15:38:14] <smallville7123> does it first parse all line continuation characters and produce a temporary file, and then parse all preprocessor in the temporary file and produce another temporary file?
[15:38:59] *** Quits: paul424 (~tom@ip-31-0-124-13.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[15:43:36] *** Joins: meator (~meator@user/meator)
[15:44:43] <smallville7123> https://gcc.gnu.org/onlinedocs/gcc-11.2.0/cpp/Initial-processing.html#Initial-processing would this help?
[15:44:51] *** Quits: szutt (~szutt@116.37.2.145) (Quit: Ping timeout (120 seconds))
[15:45:03] *** Joins: szutt (~szutt@116.37.2.145)
[15:45:25] <smallville7123> or is there a more specific section?
[15:52:13] <very_sneaky> does anybody do multiple builds/deployments for each compiler version you support for your applications? wondering if anybody has a good naming convention for build and deploy CI targets - was hoping i could name them the same thing, but alas no
[15:54:33] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[15:57:18] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[15:59:01] *** Quits: AmR (~AmREiSa@156.207.199.106) (Quit: Konversation terminated!)
[15:59:55] *** Quits: meator (~meator@user/meator) (Remote host closed the connection)
[16:01:18] *** Quits: shailangsa (~shailangs@host86-186-127-128.range86-186.btcentralplus.com) ()
[16:10:50] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 260 seconds)
[16:11:22] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[16:15:17] *** Joins: nosystemd (~nosystemd@27.34.47.115)
[16:15:21] <nosystemd> hello guys
[16:15:50] *** Joins: Leone (~Leo@69-165-148-197.dsl.teksavvy.com)
[16:16:08] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[16:16:58] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[16:16:59] <ville> very_sneaky: i do: build/<compiler>-<build_type>/<program>
[16:18:10] <ville> very_sneaky: then for practical purposes i've the build system also update symbolic links in the project root to point to the "last thing built", so during development it's just ./<program> to run what i last built
[16:18:24] <very_sneaky> ville: hmm, okay. What ci tool do you use out of curiosity?
[16:18:27] <nosystemd> do you use auto keyword?
[16:18:33] <ville> nosystemd: yes
[16:18:34] <very_sneaky> nosystemd: yes
[16:19:10] <nosystemd> does auto makes c++ , weakly type language, along with previously strongly typed
[16:19:18] <ville> nosystemd: no
[16:19:24] <very_sneaky> i was doing build/compiler, but in gitlab the compiler version gets truncated in the UI when using clang, so i'm using compiler-version_build atm
[16:19:36] <ville> very_sneaky: it's just a shell script that invokes the build with various settings multiple times. selecting the compiler and build type
[16:19:56] <very_sneaky> ah, gotcha.
[16:20:32] <ville> which you can of course then trigger for various reasons. cron or file changes or whatnot
[16:20:52] <nosystemd> is qt good or glade?
[16:21:14] <comrad> qt is a framework, glade is a gtk gui building tool
[16:21:21] <ville> nosystemd: the are not comparable. they are different things. qt is collection/framework of libraries. glade is a program
[16:21:39] <nosystemd> ok
[16:21:54] <nosystemd> ville comrad very_sneaky, so you guys are c++ professional
[16:22:06] <ville> nosystemd: glade targets gtk+ applications. qt has its own similar tool called qt designer
[16:22:15] <nosystemd> how do you made resume? i mean for c++ jobs
[16:22:29] <nosystemd> except c++ skills, what projects did you had build at that time?
[16:22:30] *** Quits: troller (~p@80.240.216.69) (Ping timeout: 260 seconds)
[16:23:02] <nosystemd> would c++ notepad type would be enough
[16:23:04] <nosystemd> or
[16:23:13] <nosystemd> =L  what
[16:23:44] <ville> it all depends where you apply. probably not what is being looked for if you apply for position to write aerodynamic simulation tools
[16:23:56] *** Joins: Roughy (~mdaw45ns@user/roughy)
[16:25:21] <comrad> i program c++ but i am not a professional. i wonder is bjarne is...
[16:25:25] *** Joins: meator (~meator@user/meator)
[16:25:36] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 268 seconds)
[16:26:16] <very_sneaky> honestly if i was looking to hire someone entry level, the specific topic of the project wouldn't really matter to me - if you have a repo that's well organised, well documented, you have unit tests and a CI/CD pipeline set up, and you can demonstrate some proficiency with modern C++ - use of design patterns, general code quality, then i'd be pretty happy
[16:27:01] <very_sneaky> i wouldn't write my resume in C++ though, if that's what you're asking - i'd probably use latex
[16:27:11] *** Joins: pulse (~pulse@user/pulse)
[16:27:16] <nosystemd> :)
[16:28:17] *** Joins: shailangsa (~shailangs@host86-186-127-128.range86-186.btcentralplus.com)
[16:30:24] <nosystemd> i see alot of distrubance, like rust,
[16:30:25] <nosystemd> when i go to rust , they tell rust will won over c++
[16:30:25] <nosystemd> when come to c++, they tell c++ better
[16:30:35] <nosystemd> but that james gosling also told
[16:30:52] <nosystemd> *"java was made because to avoid c++ pointer bugs"*
[16:30:55] <nosystemd> why ?
[16:34:53] *** Joins: troller (~p@2a02:6b8:b081:7215::1:3a)
[16:37:54] <comrad> because most softwareproblems result from those kind of pointer bugs
[16:38:48] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[16:39:10] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[16:56:34] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[16:56:54] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[16:57:07] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[17:01:03] *** Joins: plastico (~plastico@neomutt/plastico)
[17:01:09] *** Quits: troller (~p@2a02:6b8:b081:7215::1:3a) (Ping timeout: 250 seconds)
[17:01:38] *** Joins: AmR (~AmREiSa@156.207.199.106)
[17:07:26] *** Joins: magla (~gelignite@55d43f19.access.ecotel.net)
[17:12:26] *** magla is now known as geli
[17:12:38] *** Quits: supernova (~quassel@2405:9800:ba11:6207:ea47:de58:1789:b007) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[17:14:02] *** Joins: troller (~p@80.240.216.69)
[17:25:44] *** Joins: xkuru (~xkuru@user/xkuru)
[17:27:07] *** Joins: Burgundy (~yomon@79.115.213.171)
[17:31:16] *** Joins: proller (~p@80.240.216.69)
[17:35:17] *** Joins: teepee_ (~teepee@openscad/teepee)
[17:36:26] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[17:36:26] *** teepee_ is now known as teepee
[17:38:00] *** Joins: Colt (~Colt@user/colt)
[17:38:04] *** Joins: PJBoy (~PJBoy@2a00:23c7:8302:b301:e08b:78e:4d4e:13dc)
[17:38:04] *** Quits: PJBoy (~PJBoy@2a00:23c7:8302:b301:e08b:78e:4d4e:13dc) (Changing host)
[17:38:04] *** Joins: PJBoy (~PJBoy@user/pjboy)
[17:39:21] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:39:29] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:39:29] *** ChanServ sets mode: +v npaperbot
[17:46:22] <LordKalma> !fact
[17:46:23] <nolyc> LordKalma: Associative containers provide fast retrieval of data based on keys.
[17:52:14] <LordKalma> for some definition of fast
[17:56:59] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[17:57:32] *** Joins: Colt (~Colt@user/colt)
[18:00:39] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[18:01:00] *** Joins: Colt (~Colt@user/colt)
[18:02:32] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[18:04:09] *** Joins: Colt (~Colt@user/colt)
[18:04:29] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[18:04:56] *** Joins: Colt (~Colt@user/colt)
[18:05:10] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[18:06:41] *** Quits: nosystemd (~nosystemd@27.34.47.115) (Quit: Client closed)
[18:16:02] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 240 seconds)
[18:16:22] *** Quits: troller (~p@80.240.216.69) (Ping timeout: 260 seconds)
[18:17:28] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[18:19:48] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[18:23:07] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[18:23:28] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[18:24:15] *** Joins: supernova (~quassel@2405:9800:ba11:6207:f808:ab84:3f5d:a175)
[18:26:55] *** Joins: rajkosto (~rajkosto@178-221-103-239.dynamic.isp.telekom.rs)
[18:27:26] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:27:58] <very_sneaky> well. that's satisfying. got auto-deployments set up for 6 different compilers for both stable and experimental channels :)
[18:29:10] <very_sneaky> and also automated documentation deployment
[18:41:23] *** Quits: supernova (~quassel@2405:9800:ba11:6207:f808:ab84:3f5d:a175) (Ping timeout: 252 seconds)
[18:47:31] *** Quits: plastico (~plastico@neomutt/plastico) (Ping timeout: 250 seconds)
[18:48:31] *** Joins: plastico (~plastico@neomutt/plastico)
[18:48:59] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Ping timeout: 265 seconds)
[18:51:15] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[18:52:22] <AmR> I have very Big Q. How I can make wxWidgets beautiful and modern ?
[19:00:52] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[19:01:10] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[19:01:25] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[19:02:09] <PJBoy> I'll respond to your big Q with a small t
[19:03:54] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[19:04:18] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[19:05:11] *** Joins: supernova (~quassel@2405:9800:ba11:6207:7d35:2159:411f:4c85)
[19:05:44] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[19:17:40] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[19:22:00] *** Joins: seninha (~seninha@user/seninha)
[19:25:16] *** Quits: rajkosto (~rajkosto@178-221-103-239.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[19:25:40] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Ping timeout: 268 seconds)
[19:28:15] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[19:31:16] *** Quits: supernova (~quassel@2405:9800:ba11:6207:7d35:2159:411f:4c85) (Quit: No Ping reply in 180 seconds.)
[19:32:23] *** Joins: supernova (~quassel@2405:9800:ba11:6207:9dd0:c8b4:1677:3383)
[19:51:29] *** Quits: supernova (~quassel@2405:9800:ba11:6207:9dd0:c8b4:1677:3383) (Quit: No Ping reply in 180 seconds.)
[19:52:37] *** Joins: supernova (~quassel@2405:9800:ba11:6207:f986:1faa:a6d6:f8a1)
[19:56:59] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[19:57:01] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[20:04:32] *** Quits: ibenn (~benn@2a02:8071:45af:1700:c0d0:7d46:b359:44f) (Quit: Leaving)
[20:06:09] *** Joins: x_kuru (~xkuru@user/xkuru)
[20:08:22] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 260 seconds)
[20:09:57] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[20:11:40] *** Joins: paul424 (~tom@ip-31-0-125-241.multi.internet.cyfrowypolsat.pl)
[20:12:53] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[20:17:55] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[20:24:05] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[20:31:07] *** Joins: cart_man (~rynot@host-78-144-121-71.as13285.net)
[20:32:05] <cart_man> I suppose if a SIGALRM is called from the OS to the app then ALL singal(SIGALRM, Callbacks) Will fire as your app has no way to figure out which timer jsut ran out. IF it was timer bound I mean
[20:33:51] <cart_man> nevermind I just realized there is only one slot on that signal one can have :*(
[20:33:55] <cart_man> so no point
[20:41:53] *** Quits: noarb (~noarb@user/noarb) (Read error: Connection reset by peer)
[20:44:27] <ville> AmR: you look at the documentation for theme support
[20:45:04] *** Joins: noarb (~noarb@user/noarb)
[20:45:14] *** Quits: skapata (~Skapata@user/skapata) (Quit: Ĝis.)
[20:45:57] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 265 seconds)
[20:47:48] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[20:47:48] *** Quits: szutt (~szutt@116.37.2.145) (Quit: Client closed)
[20:48:00] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Client Quit)
[20:48:16] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[20:57:45] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Ping timeout: 250 seconds)
[21:18:05] *** Joins: rajkosto (~rajkosto@178-221-103-239.dynamic.isp.telekom.rs)
[21:18:22] *** Joins: luizfrds (~Luiz@152.250.243.147)
[21:18:58] <immibis> cart_man: you can make a timer queue. make it so the app requests its soonest timer from the OS, then when you receive SIGALRM, request the next timer
[21:19:46] <cart_man> immibis: I built both my procs that need the timer into one function so now they both get serviced. Its just the one only get serviced every third time the timer fires
[21:24:03] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[21:29:02] *** Joins: john99 (~john99@170.246.103.34.bc.googleusercontent.com)
[21:31:55] *** Quits: paul424 (~tom@ip-31-0-125-241.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[21:38:23] <robod34> hello
[21:38:51] <robod34> when i use...  hr = m_pIWICFactory->CreateDecoderFromFilename(szFileName
[21:39:22] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:39:29] <robod34> on a malformed image format or an unsupported image file, WIC causes a crash
[21:39:29] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:39:30] *** ChanServ sets mode: +v npaperbot
[21:40:04] <robod34> is there a way to prevent this crash? I have tried with try { statement } catch {}....
[21:42:02] <AmR> ville: There is no theme support with wxWidgets
[21:42:03] <robod34> hresult should be FAIL, but I do not know why it crashes
[21:42:38] <AmR> It's use the system api and gtk api for linux
[21:44:37] <robod34> never mind; i fixed it
[21:49:11] <ville> AmR: gtk is themable at least
[21:49:50] <ville> but perhaps this would be a good point to consider alternative widgets library
[21:53:02] *** Quits: noarb (~noarb@user/noarb) (Quit: ZNC 1.8.2 - https://znc.in)
[21:53:58] *** Quits: rajkosto (~rajkosto@178-221-103-239.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[21:54:00] <Alipha> robod34: what was the issue?
[21:54:50] <robod34> sheer silliness on my behalf, in my code
[21:55:11] <robod34> i failed somewhere to properly consider the HR
[21:55:24] <robod34> and i was assumer it is OK
[21:55:31] <robod34> *assuming
[21:59:20] *** Joins: noarb (~noarb@user/noarb)
[22:33:23] *** Quits: cart_man (~rynot@host-78-144-121-71.as13285.net) (Quit: Konversation terminated!)
[22:49:38] *** Joins: Guest19100 (~Guest19@2601:647:5280:2a50:7134:94af:76a4:94cb)
[22:50:27] <Guest19100> Hello. Aer there any good tutorial/resources on how to see layout of a simple class? Like I want to see how the member variables, vtable, function pointers etc are laid in memory
[23:02:03] <hnOsmium0001[m]> MSVC has these 2 undocumented compiler flags to print class layouts: /d1reportSingleClassLayout<class name> /d1reportAllClassLayout
[23:02:33] <NyB> Guest19100: you can always print out addresses of different entities, and see what happens. I would not expect functions and non-static member fields to be in the same "neighborhood", though...
[23:03:05] <hnOsmium0001[m]> gcc has -ffdump-class-hierarchy that provides similar informatoin
[23:03:17] <Guest19100> got it, thanks hnOsmium0001[m] and NyB . I found some blogs as well so reading those too
[23:03:27] <hnOsmium0001[m]> sorry `-fdump-class-hierarchy`, clang probably also has it given the goal of compatbility
[23:06:18] <Guest19100> okay
[23:08:14] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:89eb:c803:5da4:bd55)
[23:08:14] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:89eb:c803:5da4:bd55) (Changing host)
[23:08:14] *** Joins: skapata (~Skapata@user/skapata)
[23:09:27] <AmR> What the name for Microsoft package manger ?
[23:11:10] <NyB> Microsoft has a package manager?
[23:11:48] * NyB has not looked at Windows or relevant software for years...
[23:16:26] *** Quits: meator (~meator@user/meator) (Ping timeout: 260 seconds)
[23:17:55] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[23:18:30] <ville> imaginatively called "windows package manager"
[23:19:24] <AmR> NyB: Me too, But yes It has now.
[23:20:32] *** Quits: useful_idiot (~useful_id@gateway/vpn/pia/usefulidiot/x-43226899) (Ping timeout: 240 seconds)
[23:21:33] *** Joins: troller (~p@80.240.216.69)
[23:21:38] *** Joins: proller (~p@80.240.216.69)
[23:22:54] <comrad> AmR: you mean chocolatly or something like that?
[23:23:01] <comrad> or vcpkg?
[23:24:39] <ville> hello is this on?
[23:25:36] <ville> https://en.wikipedia.org/wiki/Windows_Package_Manager
[23:28:11] <supernova> Extract from book, could you clarify for me pls: int b[ 5 ]; // create 5-element int array b; b is a const pointer
[23:28:29] <supernova> does it mean that every time we create built in array, there is default pointer to be created?
[23:29:03] <comrad> it means the compiler saves the start-address of the array and reserves memory for the elements
[23:29:16] <comrad> then you are on your own, because you only get the start pointer returned
[23:29:38] <supernova> so there is *b defalt pointer for adress b[0] ?
[23:29:58] <comrad> jepp
[23:30:04] <supernova> cool, thansk!
[23:30:07] <supernova> thanks*
[23:30:31] <comrad> you also can do b++ then, which would point to b[1] then
[23:31:02] <NyB> and you can also do b+=5, which will then point to who-knows-what :-)
[23:31:36] *** Joins: useful_idiot (~useful_id@gateway/vpn/pia/usefulidiot/x-43226899)
[23:31:39] <comrad> heh
[23:32:04] <comrad> that's where the fun part begins. fun means problems other programms have to fix after you leave the company
[23:32:26] *** Joins: freakazoid343 (~matt@2603-9000-cf0f-80e3-4114-c3a8-f0dd-f3a3.inf6.spectrum.com)
[23:32:57] <comrad> supernova: for real: an array is always described by its start pointer and its length
[23:33:11] <comrad> supernova: better than using that C array would be using std::array<int, 5>
[23:33:24] <comrad> you can pass that around and it knows how long it is
[23:34:06] <supernova> do start pointer know the size?
[23:34:14] <supernova> or it knows only 0 address?
[23:34:31] <NyB> supernova: nope... it's just a pointer, that happens to initially point at offset 0
[23:34:31] <comrad> now, the start pointer only knows one address
[23:34:43] <comrad> -w
[23:34:44] *** Joins: CaCode (~CaCode@user/cacode)
[23:34:46] <supernova> -w
[23:35:15] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:4114:c3a8:f0dd:f3a3) (Ping timeout: 250 seconds)
[23:38:30] <AmR> ville: Vcpkg
[23:39:15] <supernova> is there a difference between bPtr = b and bPtr = &b[0];
[23:39:20] <supernova> ?
[23:39:38] <AmR> How need that sheet  https://en.wikipedia.org/wiki/Windows_Package_Manager
[23:40:57] *** Joins: lindylex (~lindylex@pool-100-11-60-12.phlapa.fios.verizon.net)
[23:41:26] *** Quits: lindylex (~lindylex@pool-100-11-60-12.phlapa.fios.verizon.net) (Client Quit)
[23:47:21] <manuels> cant we use nm to get the symbols value e.g. for a const char*
[23:51:47] <immibis> the value of a symbol is an address
[23:51:54] <immibis> where that variable is stored
[23:52:11] <immibis> you will need a different tool to read the bytes that will be stored at that address
[23:58:42] <Hello71> objcopy can normally do both tasks
[23:59:19] *** Quits: useful_idiot (~useful_id@gateway/vpn/pia/usefulidiot/x-43226899) (Ping timeout: 250 seconds)
