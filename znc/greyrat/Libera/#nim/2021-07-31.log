[00:09:30] <FromDiscord> <RattleyCooper> Is what I'm trying to do even possible?  I'm at the point where I'm just going to give up on the idea.  It's not even really required it would just be cool to have but idk.  I've been trying to figure this out for a couple days now
[00:13:30] *** Quits: supakeen (~user@python/site-packages/supakeen) (Remote host closed the connection)
[00:13:53] *** Joins: supakeen (~user@python/site-packages/supakeen)
[00:26:21] <FromDiscord> <leorize> @RattleyCooper\: you need to convert the nnkProcDef into nnkLambda
[00:26:24] <FromDiscord> <leorize> here you go\: https://play.nim-lang.org/#ix=3uvZ
[00:26:41] <FromDiscord> <RattleyCooper> Oh, odd.  I actually just got it working by using the Ident
[00:26:51] <FromDiscord> <RattleyCooper> sent a code paste, see https://play.nim-lang.org/#ix=3uw0
[00:27:30] <FromDiscord> <leorize> sure, that works as well
[00:27:37] <FromDiscord> <RattleyCooper> I like your solution more tbh
[00:28:26] <FromDiscord> <RattleyCooper> Thank you for the example btw.  I've really been beating my head against this for a few days so I really appreciate it!
[00:28:48] <FromDiscord> <leorize> you're welcome \:)
[00:29:24] <FromDiscord> <dankrad> Alright, thanks again. \: )
[00:36:44] <FromDiscord> <codic> In reply to @TechnoRazor "I don't have a": yeah but I wouldn't write a full fledged case/of macro just for that
[00:43:05] <FromDiscord> <j-james> What is the proper way to deal with nested structs when wrapping C code?
[00:45:55] <FromDiscord> <leorize> just move the definition to an outer object then refer to it
[00:51:01] *** Joins: max22- (~maxime@2a01cb088335980067da68903e910bbd.ipv6.abo.wanadoo.fr)
[00:53:32] <fn> <11ForumUpdaterBot99> New thread by Jocker: C lib binding guide, see https://forum.nim-lang.org/t/8286
[01:45:56] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f) (Ping timeout: 268 seconds)
[02:25:48] *** Quits: supakeen (~user@python/site-packages/supakeen) (Remote host closed the connection)
[02:26:12] *** Joins: supakeen (~user@python/site-packages/supakeen)
[02:26:52] <arkanoid> I have a long enum to list byte commands like icHeader = (0x78AB, "CMDA"). As soon as I receive the 2 bytes I convert them and I'm getting the "warning: conversion to enum with holes is unsafe". I never realised this warning before so it must be something in last stable nim. How would you solve this?
[02:30:03] <FromDiscord> <konsumlamm> what happens if there is no enum variant for the bytes?
[02:32:35] <FromDiscord> <leorize> remember to check them to see if they're in your enum, then cast
[02:32:58] <FromDiscord> <leorize> enumutils have a set constructor that you can use for that
[02:36:20] <arkanoid> it just errors out and exception is grabbed on the edge, I'm just reading that enum with holes is a bad nim design and araq wants to deprecate them
[02:40:42] <FromDiscord> <theangryepicbanana> TIL you can't make a distinct type of a distinct type
[02:40:53] <FromDiscord> <theangryepicbanana> that's 2 hours I'll never get back
[02:41:36] <FromDiscord> <theangryepicbanana> -_-
[02:42:37] <FromDiscord> <konsumlamm> wdym? seems to work for me
[02:43:25] <FromDiscord> <theangryepicbanana> In reply to @konsumlamm "wdym? seems to work": I was hoping that if I had `type A = distinct int, B = distinct A`, then `B.distinctBase` would be `A`, not `int`
[02:43:43] <FromDiscord> <leorize> distinctBase unwraps a bit far
[02:44:00] <FromDiscord> <theangryepicbanana> is there a way to not have it unwrap all the way down?
[02:44:11] <FromDiscord> <leorize> open an issue in nim \:p
[02:44:25] <FromDiscord> <theangryepicbanana> oof ok
[02:48:10] <arkanoid> damn, I shouldn't have used enums in first place, now I'm stuck with an enum with holes that would take hours to transform into a table
[02:48:41] <FromDiscord> <leorize> you can try timothee's enum map
[02:48:54] <FromDiscord> <leorize> @timotheecour ^
[02:49:43] <FromDiscord> <Elegantbeef> Yea you can always get around that using a array of enum -\> holey enum
[02:50:01] <FromDiscord> <Elegantbeef> Or a table holey enum -\> enum
[02:50:20] <FromDiscord> <Elegantbeef> I did it for the sdl inputs using a macro
[02:50:20] <FromDiscord> <Elegantbeef> Cause i'm a lazy git
[02:51:40] *** Quits: Schnouki (~schnouki@user/schnouki) (Quit: WeeChat 3.2)
[02:51:42] *** Joins: Typewriter (~I@94-224-212-146.access.telenet.be)
[02:52:29] <FromDiscord> <timotheecour> In reply to @theangryepicbanana "I was hoping that": see https://github.com/nim-lang/Nim/pull/8531#discussion_r207764878 I wanted it non-recursive but @Araq did not want it to be recursive; but I'd support adding a flag to allow at least making it non-recursive as an option (should be non-controversial, nothing would break)
[02:52:32] *** Quits: sagax (~sagax@213.138.71.146) (Ping timeout: 268 seconds)
[02:52:42] <arkanoid> mmm, thanks
[02:53:02] *** Quits: Typewriter (~I@94-224-212-146.access.telenet.be) (Client Quit)
[02:55:28] <FromDiscord> <timotheecour> In reply to @leorize "you can try timothee's": refs https://github.com/nim-lang/fusion/pull/23‚Üµ@Araq closed this one too; IMO it's very useful
[02:56:21] <FromDiscord> <timotheecour> (edit) "In reply to @leorize "you can try timothee's": refs https://github.com/nim-lang/fusion/pull/23‚Üµ@Araq closed this one too; IMO it's very useful ... " 03added "and should be re-opened"
[02:56:42] <arkanoid> I don't see enummaps available in fusion yet
[02:56:59] <FromDiscord> <leorize> you can make it a nimble package‚Üµ(@timotheecour)
[02:57:04] <FromDiscord> <leorize> not everything has to be in the stdlib
[02:57:24] <FromDiscord> <theangryepicbanana> In reply to @timotheecour "see https://github.com/nim-lang/Nim/pull/8531#discu": yeah a flag would be nice, hopefully that can be changed soon-ish
[02:57:26] <FromDiscord> <leorize> and we should use more packages so there are incentives to work on making nimble reliable
[02:57:43] <arkanoid> ok, it's in your fusion fork
[02:57:45] <FromDiscord> <timotheecour> In reply to @theangryepicbanana "yeah a flag would": please make a PR
[02:58:11] <FromDiscord> <theangryepicbanana> In reply to @timotheecour "please make a PR": can do that soon-ish üëç
[02:59:03] <FromDiscord> <timotheecour> nimble packages also means you can't use it in stdlib, and lots of tiny dependencies makes things more complicated
[02:59:57] <FromDiscord> <Elegantbeef> There are many trade offs both ways, we could be here all day arguing which is better
[02:59:57] <FromDiscord> <leorize> well but usable is always better than not usable
[03:00:20] <FromDiscord> <leorize> the issue with tiny deps is just a nimble issue
[03:01:01] <FromDiscord> <leorize> a good pm should make deps indistinguishable from just using stdlib
[03:12:07] <arkanoid> compiler manual says "--warningAsError[X]:on|off" but how can I enable errors for ALL warnings?
[03:14:05] <FromDiscord> <timotheecour> you can't, I had to disable it here: https://github.com/nim-lang/Nim/pull/18311
[03:14:26] <FromDiscord> <timotheecour> (edit) "you can't, I had to disable it here: https://github.com/nim-lang/Nim/pull/18311 ... " 03added "to avoid a revert of https://github.com/nim-lang/Nim/pull/17852"
[03:16:27] <arkanoid> :-|
[03:19:02] <arkanoid> thanks
[03:27:57] <FromDiscord> <timotheecour> sent a code paste, see https://play.nim-lang.org/#ix=3uwS
[03:28:35] <FromDiscord> <timotheecour> (edit) "https://play.nim-lang.org/#ix=3uwS" => "https://play.nim-lang.org/#ix=3uwT"
[03:29:20] <FromDiscord> <timotheecour> (edit) "https://play.nim-lang.org/#ix=3uwT" => "https://play.nim-lang.org/#ix=3uwU"
[03:34:47] <FromDiscord> <leorize> we can also just make everything a package
[03:35:58] <FromDiscord> <leorize> I don't see why stdlib has to be special other than the parts that have tight coupling with the compiler
[03:42:48] <FromDiscord> <timotheecour> the problem i'm solving is the case where a module (from stdlib/compiler/tools)  needs to depend on a nimble package; the way i proposed will work, and not clash with user installed packages (stdlib or compiler module `foo` needs regex version 1, user has a different version installed); what is your proposed alternative that would make it work in this case?
[03:44:11] <FromDiscord> <leorize> make the compiler and its tools uses a proper nimble manifest
[03:44:32] <arkanoid> well I'm really unsure if I should replace the enum with hole with: 1) a table [uint16, string] 2) a long list of constant uint16 3) a long list of contants tuple[uint16,string]
[03:45:01] <FromDiscord> <leorize> with a proper package manager, what the compiler imports will be constrained to what it declared in its nimble manifest
[03:45:21] <arkanoid> I've tried all the three options but yet the enum with holes seems the cleanest and more idiomatic
[03:45:34] <FromDiscord> <leorize> clashing with user packages is a bug, not a feature
[03:49:51] <FromDiscord> <timotheecour> wait so you would prevent a user from using pkg/regex at version 1.3 if compiler/stdlib needs a locked down dependency at version 0.9 ?
[03:50:08] <FromDiscord> <timotheecour> (edit) "wait so you would prevent a user from using pkg/regex at version 1.3 if compiler/stdlib needs a locked down dependency ... at" 03added "of pkg/regex"
[03:50:26] <FromDiscord> <leorize> why would I do that?
[03:50:54] <FromDiscord> <leorize> if the compiler needs regex 0.9, well that's compiler (the program) business, not mine
[03:51:34] <FromDiscord> <timotheecour> if stdlib module foo requires pkg/regex 0.9
[03:52:27] <FromDiscord> <leorize> then yes, if the user use that module, then they are locked to regex 0.9, or assuming that we adopt MVS and support multi versioning, then stdlib and the user can simultaneously import `0.9` and `1.3`
[03:52:55] <FromDiscord> <leorize> and there's no reason to keep stdlib being a big blob
[03:53:25] <FromDiscord> <leorize> why does it have to be stdlib module `foo` and not package `foo`?
[03:53:54] <FromDiscord> <timotheecour> stdlib will most likely want to locked down every dependency for stability reasons, so this is not hypothetical scenario
[03:53:58] <FromDiscord> <leorize> all stdlib modules that are not part of the core language can easily be put into packages and  evolved outside of the compiler
[03:54:11] <FromDiscord> <leorize> see MVS as described in nimble RFC
[03:54:20] <FromDiscord> <leorize> it's meant exactly for this
[03:57:32] <FromDiscord> <timotheecour> what i propose is a form of MVS and can be built on top of it if it gets implemented, but doesn't require one to adopt MVS: all it does it have stdlib/compiler (arguable an important special case) have its own locked down versions that don't clash with user installed packages.‚Üµ‚Üµwhether the same exact approach can be done outside of stdlib/compiler is possible, but not a requirement
[03:57:58] <FromDiscord> <timotheecour> (edit) "what i propose is a form of MVS and can be built on top of it if it gets implemented, but doesn't require one to adopt MVS: all it does it have stdlib/compiler (arguable an important special case) have its own locked down versions that don't clash with user installed packages.‚Üµ‚Üµwhether the same exact approach can be done outside of stdlib/compiler ... is" 03added "down the line"
[03:58:17] <FromDiscord> <leorize> I would propose to not half-ass the implementation and do it properly
[03:58:21] <FromDiscord> <leorize> and we should, really
[03:58:32] <FromDiscord> <leorize> the language evolves faster than both the compiler and the stdlib
[03:59:42] <FromDiscord> <leorize> we are tying ourselves down trying to ship a stdlib that have to support all of our mistakes
[04:00:08] <FromDiscord> <timotheecour> what's the link to the MVS RFC
[04:01:06] <FromDiscord> <leorize> it's a part of this excellent piece from haxscramper\: https://github.com/nim-lang/RFCs/issues/398
[04:01:45] <FromDiscord> <leorize> search "minimal" if you wanna jump to that part
[04:06:28] <arkanoid> this "take everything out to stdlib" path was taken by haskell in the past, and now we need a parallel repository to know which set of modules are compatible with version X of the compiler
[04:06:48] <FromDiscord> <timotheecour> there is very little discussion about the multiple versions of the same package in that RFC
[04:07:22] <FromDiscord> <leorize> yea, it's left out since hax wanna keep it doable
[04:07:41] <FromDiscord> <timotheecour> right but this is the core of what i'm suggesting for stdlib
[04:07:44] <FromDiscord> <leorize> you can read the full go's description of the algorithm, they also describe multi versioning
[04:10:33] <FromDiscord> <timotheecour> > this "take everything out to stdlib" path was taken by haskell in the past, and now we need a parallel repository to know which set of modules are compatible with version X of the compiler‚Üµthis would not be a problem with locked down dependencies; these would be version controlled in nim repo (much like git submodules btw)
[04:10:58] <FromDiscord> <timotheecour> (edit) "btw)" => "btw); and they would live in a different namespace so wouldn't clash with user installed packages"
[04:11:50] <arkanoid> can I get the name of a const as a string?
[04:12:19] <FromDiscord> <leorize> astToStr is your friend
[04:12:41] <FromDiscord> <leorize> it can turn any piece of ast into string, not just your const \:p
[04:13:56] <arkanoid> yeah! this way the enum with hole -> const list becomes the most efficient and simple one
[04:14:09] <arkanoid> I was not quite happy of the table solution
[04:17:37] <FromDiscord> <Elegantbeef> The table solution is needed for very large holey enums, accidently made a super large array that crashed my pc with the array -\> holey enum
[04:18:39] <arkanoid> I just have a list of 50 uint16 packet heades that I need to case switch
[04:18:48] <FromDiscord> <timotheecour> @ElegantBeef this should be the fastest to deal with enum with holes: https://github.com/nim-lang/Nim/pull/18044
[04:19:20] <FromDiscord> <timotheecour> (edit) "@ElegantBeef this should be the fastest to deal with enum with holes: https://github.com/nim-lang/Nim/pull/18044 ... " 03added "(there is a benchmark too)"
[04:20:17] <arkanoid> problem with const tables is that using it in case switch scenario is not same as with enum holes or list of const
[04:21:38] <FromDiscord> <Elegantbeef> Yea considering my use case here tim dont think the overhead is an overly large concern https://github.com/beef331/truss3d/blob/master/src/truss3D/inputs.nim#L46
[04:22:16] <FromDiscord> <Elegantbeef> I made a new enum to make an enum array for all my interactions, and let SDL use it's own enum with the LUT for my sanity
[04:23:17] <FromDiscord> <Elegantbeef> So all my interactions are cheap and SDL's are expensive üòõ
[04:24:18] <arkanoid> where's the astToStr defined?
[04:24:47] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/system.html#astToStr%2CT
[04:25:55] <arkanoid> straight in system?! whoa, I was expecting it somewhere in macro
[04:26:01] <arkanoid> thanks a lot
[04:26:22] <FromDiscord> <Elegantbeef> Some comment about people viewing the system module being bloated
[04:31:39] <FromDiscord> <timotheecour> `{.nosystem.}` will solve this problem of system bloat without introducing any breaking change
[04:32:26] <FromDiscord> <timotheecour> (edit) "change" => "change, allowing to redefine system module as one that imports a number of `{.nosystem.}` smaller modules"
[04:34:02] <arkanoid> when I test a module I import it on the top of the test file, but this forces me to export some names even if they should stay hidden inside the module
[04:42:42] <FromDiscord> <Elegantbeef> you could always put them inside a `when defined(yourPackageNameTest)`
[04:43:02] <FromDiscord> <r3m> can someone mention my nickname please i'm testing something
[04:43:22] <FromDiscord> <leorize> or... `import {.all.}`, newly introduced in devel
[04:43:53] <FromDiscord> <Elegantbeef> Import all i presume disregards ``?
[04:45:00] <FromDiscord> <leorize> yea
[04:47:45] <arkanoid> Elegantbeef, what do you mean? Do you mean not using * but add all "export name" in myPackageName in a when block?
[04:52:26] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3uxe
[04:54:29] <arkanoid> yeah got it. thanks
[04:54:41] <arkanoid> quite verbose, but probably is the cleanest solution
[04:54:55] <FromDiscord> <Elegantbeef> Well unless in devel like leorize mentioned
[04:55:28] <arkanoid> this compiles "proc foo: Future[string] {.async.} = result = "bar"", this not "proc foo: Future[string] {.async.} = "bar""
[04:56:03] <arkanoid> I don't understand why
[04:58:39] <arkanoid> I mean, the result should be implicit, and the return type is explicit. I see no differences between the two
[05:00:05] <FromDiscord> <timotheecour> that's because of the way the async macro is implemented, feel free to send a PR to fix it
[05:00:54] <arkanoid> I don't have the skills for that (yet), thanks for the answer!
[05:07:28] *** Quits: Onionhammer (~onionhamm@207-153-1-151.fttp.usinternet.com) (Quit: Ping timeout (120 seconds))
[05:07:45] *** Joins: Onionhammer (~onionhamm@207-153-1-151.fttp.usinternet.com)
[05:26:20] <arkanoid> I've just found out that the times.nim module is cursed and has side effects on string format if you import it whole, but not if you import it partially https://play.nim-lang.org/#ix=3uxk
[05:28:03] <arkanoid> is this an issue worth posting on github?
[05:32:53] <FromDiscord> <Elegantbeef> well it prints the time locally so i dont think it's "cursed"
[05:34:13] <arkanoid> Elegantbeef, printing? no, the proc returns string, there's no main, no echo
[05:34:26] <fn> <11ForumUpdaterBot99> New thread by Giaco: '$' on Time can have side effect, but only if you import the whole times module, see https://forum.nim-lang.org/t/8287
[05:34:30] <FromDiscord> <Elegantbeef> I mean it converts it to time local
[05:34:47] <arkanoid> why it should, I'm not even filling it
[05:34:53] <FromDiscord> <Elegantbeef> Without importing the whole module you use the normal object stringify operator
[05:34:57] <FromDiscord> <Elegantbeef> When you import the entire module you get the overriden one which it relies on a global variable
[05:35:12] <FromDiscord> <Elegantbeef> And as such it's not a pure function
[05:35:42] <FromDiscord> <Rika> In reply to @mlokis "yes that's why i": Nim also has {} for indexing
[05:37:17] <arkanoid> so Time is not the right type to store timestamps?
[05:38:57] <FromDiscord> <Elegantbeef> DateTime might be what you want
[05:39:27] <FromDiscord> <Elegantbeef> I dont know much about time truthfully
[05:39:27] <FromDiscord> <Elegantbeef> I dont know much about times truthfully
[05:40:21] <arkanoid> datetime raises same error
[05:40:43] <FromDiscord> <Elegantbeef> I mean you can override side effect analysis
[05:40:51] <FromDiscord> <Elegantbeef> But it's a question of what do you want to echo \:D
[05:41:29] <FromDiscord> <Elegantbeef> I guess i mean it's a question of what do you want the string to be
[05:41:37] <arkanoid> is it really necessary to do side effect to print a time?
[05:41:48] <FromDiscord> <Elegantbeef> Well it converts it to local
[05:41:49] <arkanoid> I mean, to format a time
[05:43:21] <arkanoid> btw, I got the point. It's just the fast the format is implicit that puzzles me
[05:43:26] <arkanoid> s/fast/fact
[05:43:47] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3uxm
[05:43:55] <FromDiscord> <Elegantbeef> Or make your own `$` operator
[05:44:15] <FromDiscord> <Rika> It would be nice to know why it is having side effects
[05:44:36] <FromDiscord> <Elegantbeef> Cause it converts to the local time zone which is done by calling `local` which populates an internal global
[05:45:24] <FromDiscord> <Elegantbeef> Which is the same for datetime, it calls format, which calls local
[05:46:06] <arkanoid> yeah it makes kinda sense, but shouldn't it default to utc?
[05:47:19] <FromDiscord> <Elegantbeef> I'd tell you if i knew
[05:48:41] <arkanoid> while the DateTime init asks you a timezone, the Time init doesn't. https://nim-lang.org/docs/times.html#initTime%2Cint64%2CNanosecondRange 
[05:51:46] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[05:52:02] <arkanoid> let's see if this requires an effect too https://nim-lang.org/docs/times.html#format%2CTime%2Cstring%2CTimezone
[05:54:33] <arkanoid> yes, also mytime.format("yyyy-MM-dd'T'HH:mm:ss", utc()) requires an effect
[05:55:30] <FromDiscord> <Elegantbeef> Yes `utc` and `local` use global variables
[05:56:08] <arkanoid> damn, I've to use noSideEffects escape hatches then
[05:56:29] <FromDiscord> <Elegantbeef> Or you know make your own `$` operator
[05:57:54] <arkanoid> Time attributes are not exported
[06:45:54] <arkanoid> a type made of a deeply nested hierachy of non-ref objects is checked on all hierachy levels with default `==`?
[06:46:36] <FromDiscord> <Rika> i believe so yes
[06:47:35] <arkanoid> thanks
[06:48:01] <arkanoid> to forbid ref types in generic type is proc foo[T not ref](...)?
[06:48:43] <FromDiscord> <Elegantbeef> Should be
[06:48:58] <FromDiscord> <Elegantbeef> well `T: not ref` though dont know if it's just the bridge ruining it
[06:49:44] <arkanoid> no you're right I was missing ':'
[06:50:13] <FromDiscord> <Rika> bridge moment
[06:50:29] <arkanoid> I wonder if this function I just wrote is already in system: func isDefault*[T: not ref](o: T): bool = o != T.default
[06:50:56] <arkanoid> oops I inverted the result, :D yes, is it already in stdlib?
[06:51:38] <FromDiscord> <Elegantbeef> I dont think so, also reference default is `nil` so you dont need that
[06:51:55] <FromDiscord> <Elegantbeef> !eval echo (ref int).default.isNil
[06:51:58] <NimBot> true
[06:52:27] <FromDiscord> <Rika> yeah i dont see a reason when you can just `v == c.typeof.default` i think?
[06:52:35] <FromDiscord> <Rika> v
[06:52:54] <FromDiscord> <Rika> !eval let a = 2; echo a == a.typeof.default
[06:52:55] <FromDiscord> <Rika> lets see
[06:52:57] <NimBot> false
[06:53:01] <FromDiscord> <Rika> yeah
[06:53:44] <arkanoid> isDefault seems a quite important function, isn't it
[06:53:53] <arkanoid> I mean, I find myself using it quite oftem
[06:53:58] <FromDiscord> <Elegantbeef> Well they can always keep the procedure, but a normal generic will be fine
[06:53:58] <FromDiscord> <Elegantbeef> Not really since everything is 0-init'd
[06:54:20] <FromDiscord> <Elegantbeef> I know an unassigned value is default why do i need to check
[06:54:31] <arkanoid> parsers!
[06:54:57] <FromDiscord> <Elegantbeef> Options
[06:55:36] <FromDiscord> <leorize> if you like parsers and you like types, you might like this\: https://github.com/nim-lang/Nim/pull/15212
[06:56:13] <FromDiscord> <Elegantbeef> That's pretty nice
[07:01:14] *** Joins: vicfred_ (~vicfred@user/vicfred)
[07:03:40] *** Quits: vicfred (~vicfred@user/vicfred) (Ping timeout: 256 seconds)
[07:06:45] <arkanoid> what's this, peeping into category theory?
[07:07:38] <FromDiscord> <generic linux user> is looping eraseLine and cursorUp better than eraseScreen?
[07:09:39] <FromDiscord> <Elegantbeef> Well eraseScreen on unix puts `\e[2J` to the buffer which clears it afaik
[07:10:08] <FromDiscord> <Elegantbeef> So it's probably better to just use the terminal emulator commands
[07:10:52] <FromDiscord> <leorize> eraseScreen is better, eraseLine is for deleting a selected portion of a string
[07:10:58] <FromDiscord> <leorize> screen\
[07:11:32] <FromDiscord> <leorize> if you want to do more advanced cli things, checkout illwill
[07:20:32] <FromDiscord> <theangryepicbanana> In reply to @leorize "if you like parsers": that looks cool
[07:21:52] <FromDiscord> <generic linux user> like we print a menu, and then we put "> "
[07:21:58] <FromDiscord> <generic linux user> then we ask for a choice
[07:22:09] <FromDiscord> <generic linux user> if user enters something invalid
[07:22:32] <FromDiscord> <generic linux user> for a in 1..4:‚Üµ  eraseLine()‚Üµ  cirsorUp()
[07:22:40] <FromDiscord> <generic linux user> (edit) "cirsorUp()" => "cursorUp()"
[07:23:06] <FromDiscord> <generic linux user> so instead of clearing that menu , which is supposed to be static,until we exit
[07:23:15] <FromDiscord> <generic linux user> will it be useful tho
[07:23:33] <FromDiscord> <generic linux user> (edit) "1..4:‚Üµ" => "1..2:‚Üµ"
[07:24:41] <FromDiscord> <generic linux user> In reply to @Elegantbeef "Well eraseScreen on unix": do it print out 255 \n s?‚Üµthats what i get on my terminal, it doesnt clear the screen‚Üµit prints out a lot of newlines , and then if on posix, i have to use setcursorpos(0,0) to set it back
[07:24:50] <FromDiscord> <generic linux user> but in wjndows it works ok
[07:25:01] <FromDiscord> <generic linux user> (edit) "do" => "does"
[07:26:12] <FromDiscord> <generic linux user> since it talks to win32 api i think
[07:28:23] <FromDiscord> <generic linux user> yes, using eraseScreen only doesnt do the job
[07:28:40] <FromDiscord> <Elegantbeef> Consider using illwill
[07:29:30] <FromDiscord> <generic linux user> sent a code paste, see https://play.nim-lang.org/#ix=3uxy
[07:29:44] <FromDiscord> <generic linux user> (edit) "https://play.nim-lang.org/#ix=3uxy" => "https://play.nim-lang.org/#ix=3uxz"
[07:31:40] *** Joins: vicfred__ (~vicfred@user/vicfred)
[07:34:09] *** Quits: vicfred_ (~vicfred@user/vicfred) (Ping timeout: 250 seconds)
[08:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:34] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:54:56] <FromDiscord> <Bung> @Araq please consider merge https://github.com/karaxnim/karax/pull/207 or https://github.com/karaxnim/karax/pull/208
[09:08:43] *** Quits: max22- (~maxime@2a01cb088335980067da68903e910bbd.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[10:55:15] *** Quits: thunder (~thunder@user/thunder) (Ping timeout: 276 seconds)
[11:06:00] *** Joins: sagax (~sagax@213.138.71.146)
[11:09:08] *** Joins: thunder (~thunder@user/thunder)
[11:23:03] *** Joins: max22- (~maxime@2a01cb0883359800898769a8351bc988.ipv6.abo.wanadoo.fr)
[11:31:25] *** Quits: vicfred__ (~vicfred@user/vicfred) (Quit: Leaving)
[12:04:44] *** Joins: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f)
[12:27:14] *** Joins: pro (~pro@user/pro)
[13:15:27] *** Quits: thunder (~thunder@user/thunder) (Ping timeout: 258 seconds)
[13:33:06] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f) (Ping timeout: 240 seconds)
[13:40:02] *** Joins: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f)
[13:41:53] <FromDiscord> <dom96> Happy weekend. What‚Äôs everybody up to?
[13:42:48] <FromDiscord> <generic linux user> back on project
[13:45:12] <FromDiscord> <impbox [ftsf]> does nim have a way to output your source without anything that wouldn't be included  according to defines?
[13:46:41] <FromDiscord> <hotdog> In reply to @impbox "does nim have a": Nim source you mean?
[13:46:46] <FromDiscord> <impbox [ftsf]> yep, nim source
[13:46:52] <FromDiscord> <hotdog> That would be cool if it doesn‚Äôt exist already
[13:47:30] <FromDiscord> <hotdog> Don‚Äôt know if it‚Äôs possible atm
[13:50:37] <FromDiscord> <impbox [ftsf]> mmm can't find anything in the compiler guide for it, figured it'd be nice for doing a tutorial series where i gradually add features but you could see the source without any specific features for simplicity
[13:51:38] <FromDiscord> <impbox [ftsf]> but seems like a pretty niche usecase
[14:12:21] <FromDiscord> <rishavs (Rishav Sharan)> sent a code paste, see https://paste.rs/MH0
[14:13:19] <FromDiscord> <impbox [ftsf]> hmm Options already exist in nim?
[14:14:10] <FromDiscord> <impbox [ftsf]> sent a code paste, see https://paste.rs/4lH
[14:14:29] *** Quits: pro (~pro@user/pro) (Ping timeout: 258 seconds)
[14:14:44] <FromDiscord> <impbox [ftsf]> https://nim-lang.org/docs/manual.html#types-enumeration-types you should probably learn about enum types in nim
[14:15:12] *** Joins: pro (~pro@user/pro)
[14:15:37] <FromDiscord> <impbox [ftsf]> each entry in an enum needs to be a value, not a type
[14:16:32] <FromDiscord> <rishavs (Rishav Sharan)> Options are in nim?! o.0‚Üµcan you link m to them. I never knoew!
[14:16:34] <FromDiscord> <impbox [ftsf]> sent a code paste, see https://play.nim-lang.org/#ix=3uyV
[14:16:41] <FromDiscord> <rishavs (Rishav Sharan)> Thanks!
[14:16:52] <FromDiscord> <impbox [ftsf]> https://nim-lang.org/docs/options.html
[14:20:09] <FromDiscord> <impbox [ftsf]> https://play.nim-lang.org/#ix=3uyW
[14:23:41] <FromDiscord> <impbox [ftsf]> if you're having seqs, it doesn't make much sense to use Option, Option = good for one or none, Seq = good for many or none
[14:26:00] <FromDiscord> <impbox [ftsf]> you might also be interested in object variants
[14:26:10] <FromDiscord> <impbox [ftsf]> https://nim-lang.org/docs/manual.html#types-object-variants
[14:28:36] <FromDiscord> <impbox [ftsf]> https://play.nim-lang.org/#ix=3uyY using object variants
[14:41:32] <arkanoid> is this assumption correct? converter toByteSeq*(s: string): seq[byte] = cast[seq[byte]](s)
[14:42:41] <FromDiscord> <impbox [ftsf]> what is `castseq`?
[14:43:13] <arkanoid> I think the bridge us mangling the squared parethesis
[14:43:38] <FromDiscord> <impbox [ftsf]> it shows as toByteSeq(s: string): seq[byte] = castseq[byte]
[14:44:42] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f) (Ping timeout: 272 seconds)
[14:44:48] <arkanoid> here https://play.nim-lang.org/#ix=3uz2
[14:45:23] <FromDiscord> <impbox [ftsf]> ok, what is your assumption that you want confirmed?
[14:46:47] <arkanoid> if that unsafe cast is safe
[14:47:02] <arkanoid> and if that is the most idiomatic way to turn a string into a byte sequence
[14:47:27] <arkanoid> I'm parsing network bytes but streams receives it as string
[14:48:16] <FromDiscord> <impbox [ftsf]> seems to be safe
[14:48:32] <arkanoid> ok thanks
[14:54:30] <FromDiscord> <Rika> It is safe as long as strings are internally the same as seqs (which they are since it is more convenient as of now, but may not in the future)
[14:55:15] <FromDiscord> <Rika> In reply to @impbox "does nim have a": You mean like the preprocessor pass flag in GCC?
[14:55:20] <FromDiscord> <Rika> I don‚Äôt think so
[14:56:19] <FromDiscord> <impbox [ftsf]> @Rika i'm not familiar with it, but i'd like the output to be the same as the input just without anything that fails a when defined test
[14:56:55] <FromDiscord> <Rika> Yeah in GCC they have a flag that only runs the preprocessor and emits the code after
[14:57:17] <FromDiscord> <Rika> So without the defines and the ifdef stuff
[14:57:25] <FromDiscord> <impbox [ftsf]> yeah, that kinda thing would be nice
[14:57:25] <FromDiscord> <Rika> (Though it also does the includes)
[15:08:31] <FromDiscord> <evil> does anyone know what the syntax would be for integer string indices in nimpy?
[15:16:33] *** Quits: pro (~pro@user/pro) (Quit: WeeChat 3.2)
[15:18:17] *** Joins: pro (~pro@user/pro)
[15:53:27] <FromDiscord> <enthus1ast> sent a code paste, see https://play.nim-lang.org/#ix=3uzn
[15:55:15] <FromDiscord> <haxscramper> yes, it should be safe, but if C compiler complains you need to use `struct udev` in `object`
[15:55:17] <FromDiscord> <Rika> No I think that‚Äôs an opaque pointer, I don‚Äôt know how those would convert to Nim
[15:55:28] <FromDiscord> <haxscramper> But you would still have an issue with forward declaration
[15:55:41] <FromDiscord> <enthus1ast> it compiles
[15:55:56] <FromDiscord> <enthus1ast> but does not work \:)   and i do not understand c good enough
[15:56:45] <FromDiscord> <haxscramper> "does not work" .. how exactly?
[15:56:48] <FromDiscord> <haxscramper> segfault/wrong runtime behavior/etc?
[15:57:52] <FromDiscord> <enthus1ast> nope no segfault
[15:58:32] <FromDiscord> <Rika> What‚Äôs the issue then?
[15:58:35] <FromDiscord> <enthus1ast> when i call the‚Üµvar udev = udev\_new()‚Üµi get a pointer un the udev object but i think there is the error because its just an object
[15:58:57] <FromDiscord> <enthus1ast> i think object is not correct here
[15:59:17] <FromDiscord> <enthus1ast> [Edit](https://discord.com/channels/371759389889003530/371759389889003532/870991326261420042): when i call the‚Üµvar udev = udev\_new()‚Üµi get a pointer on the udev object but i think there is the error because its just an object
[15:59:33] <FromDiscord> <Rika> Then find the definition perhaps
[16:01:07] <FromDiscord> <haxscramper> You can wrap forward-declared C types as nim `object`, but that would later introduce issues when you try to wrap actual declaration
[16:01:31] <FromDiscord> <haxscramper> Ideally you would want to either treat `udev` as an opaque pointer always - if C library does not expose the struct itself
[16:01:47] <FromDiscord> <haxscramper> Or, if struct definition is exposed in another header you need to wrap that header
[16:01:55] <FromDiscord> <enthus1ast> so opaque pointer would be just `pointer`
[16:01:57] <FromDiscord> <enthus1ast> ?
[16:02:18] <FromDiscord> <haxscramper> `pointer` is no different from `ptr udev`
[16:02:39] <FromDiscord> <haxscramper> And I'm sure you don't want to wrap things as `udev_unref(p: pointer)` to later get absolutely unexplainable crashes
[16:03:33] <FromDiscord> <haxscramper> And I'm still not sure about the issue
[16:03:34] <FromDiscord> <haxscramper> Like, does it work  or not?
[16:04:00] <FromDiscord> <Rika> Is there an error or do you just think it‚Äôs wrong
[16:04:02] <FromDiscord> <haxscramper> And look at C code btw
[16:04:28] <FromDiscord> <haxscramper> it should make things clearer as to what is going on behind the scenes
[16:04:39] <FromDiscord> <enthus1ast> yes thats a good tip
[16:05:36] <FromDiscord> <enthus1ast> the problem for me is i don't know yet if it does not work because i have a error in my test, or if the wrapping types are not correct.
[16:05:59] <FromDiscord> <enthus1ast> but yes i'll look at the generated c code
[16:28:38] *** Quits: max22- (~maxime@2a01cb0883359800898769a8351bc988.ipv6.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[16:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:33] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:48:49] *** Quits: Mister_Magister (~Mister_Ma@user/mister-magister/x-2636733) (Ping timeout: 250 seconds)
[17:02:01] *** Joins: Mister_Magister (~Mister_Ma@user/mister-magister/x-2636733)
[17:18:25] *** Joins: arkurious (~arkurious@user/arkurious)
[17:21:42] *** Quits: koltrast (efd259d6@h77-53-57-114.cust.a3fiber.se) (Ping timeout: 272 seconds)
[17:33:26] *** Joins: koltrast (4f314f1c@h77-53-57-114.cust.a3fiber.se)
[17:35:43] *** Quits: koltrast (4f314f1c@h77-53-57-114.cust.a3fiber.se) (Read error: Connection reset by peer)
[17:36:21] *** Joins: koltrast (6deda21c@h77-53-57-114.cust.a3fiber.se)
[17:39:52] *** Quits: koltrast (6deda21c@h77-53-57-114.cust.a3fiber.se) (Read error: Connection reset by peer)
[17:46:34] *** Joins: koltrast (5bf540e2@h77-53-57-114.cust.a3fiber.se)
[17:50:41] *** Quits: koltrast (5bf540e2@h77-53-57-114.cust.a3fiber.se) (Client Quit)
[17:51:19] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[17:51:45] *** Joins: max22- (~maxime@2a01cb088335980050ece6116d8d246a.ipv6.abo.wanadoo.fr)
[17:52:09] *** Joins: koltrast (3c985218@h77-53-57-114.cust.a3fiber.se)
[17:52:20] *** Joins: xet7 (~xet7@user/xet7)
[18:21:56] *** Quits: koltrast (3c985218@h77-53-57-114.cust.a3fiber.se) (Ping timeout: 272 seconds)
[19:06:31] <FromDiscord> <fwsgonzo> hey all, is there a way to embed binary data into a nim program?
[19:07:38] <FromDiscord> <haxscramper> `const binaryData = staticRead("dataFile")`
[19:07:48] <FromDiscord> <fwsgonzo> really?
[19:10:11] <FromDiscord> <haxscramper> https://nim-lang.org/docs/system.html#staticRead%2Cstring
[19:10:18] <FromDiscord> <fwsgonzo> sent a code paste, see https://play.nim-lang.org/#ix=3uA8
[19:12:29] <FromDiscord> <Rika> In reply to @haxscramper "`const binaryData = staticRead("dataFile")`": FYI, this just inlines strings into wherever the const is used, i believe with enough uses it will blow your binary up
[19:12:40] <FromDiscord> <Rika> i dont recall how to embed the string once and refer to that via address
[19:13:47] <FromDiscord> <haxscramper> `let tgaFile = static: staticRead("../data/test.tga")` is also possible
[19:14:34] <FromDiscord> <haxscramper> someone asked earlier about embedding const data to ROM to save on RAM
[19:15:30] <FromDiscord> <haxscramper> sent a long message, see http://ix.io/3uA9
[19:16:17] <FromDiscord> <haxscramper> So it might internally take advantage of some optimizations and `let` and cursor inference
[19:16:19] <FromDiscord> <Rika> good point lol
[19:16:25] <FromDiscord> <haxscramper> so look at C codegen
[19:58:20] *** Joins: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se)
[20:21:12] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[20:28:12] *** Joins: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f)
[21:01:45] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[21:12:42] *** federico3_ is now known as federico3
[21:17:54] *** Joins: thunder (~thunder@user/thunder)
[21:32:12] *** Joins: krux02 (~krux02@p4ff8b737.dip0.t-ipconnect.de)
[21:34:30] <FromDiscord> <treeform> In reply to @nixfreak_nim "* So I took": You can do a ton with pixie, if you are ok with CPU only you it can be done.
[21:39:35] <FromDiscord> <timotheecour> sent a code paste, see https://play.nim-lang.org/#ix=3uBg
[21:39:49] <FromDiscord> <timotheecour> (edit) "https://play.nim-lang.org/#ix=3uBg" => "https://play.nim-lang.org/#ix=3uBh"
[21:40:15] <FromDiscord> <timotheecour> (edit) "https://play.nim-lang.org/#ix=3uBh" => "https://play.nim-lang.org/#ix=3uBi"
[21:48:58] *** Quits: max22- (~maxime@2a01cb088335980050ece6116d8d246a.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[21:51:17] *** Quits: thunder (~thunder@user/thunder) (Ping timeout: 265 seconds)
[21:54:15] *** Joins: thunder (~thunder@user/thunder)
[22:40:34] <FromDiscord> <0ffh> Is there a standalone library to parses Nim code?‚ÜµI think I saw an example once that uses Nim's Nim parser, but that didn't work (was probably outdated).
[22:40:42] <FromDiscord> <0ffh> (edit) "parses" => "parse"
[22:41:53] <FromDiscord> <Bung> have you tried compiler package ?
[22:50:52] <FromDiscord> <0ffh> In reply to @Bung "have you tried compiler": Can you point me to some documentation on how to use it? I looked a (longer) while ago and didn't find much apart from the third party example I have mentioned.
[22:51:16] <FromDiscord> <0ffh> (edit) "mentioned." => "mentioned (which didn't work)."
[22:51:37] <FromDiscord> <0ffh> (edit) "In reply to @Bung "have you tried compiler": Can you point me to some documentation on how to use it? I looked a (longer) while ago and didn't find much apart from the third party example I have mentioned ... (which" 03added "above"
[22:52:46] <FromDiscord> <haxscramper> In reply to @haxscramper "Easiest solution would be": Using compiler API
[22:53:06] <FromDiscord> <0ffh> In reply to @Bung "have you tried compiler": I can't find any documentation
[22:53:07] <FromDiscord> <Bung> https://github.com/bung87/rehighlite I only have example project show you
[22:53:08] <fn> <12R2D299> 4GitHub: 7"<No Description>"
[22:53:17] <FromDiscord> <0ffh> In reply to @Bung "https://github.com/bung87/rehighlite I only have": Oh, thanks!
[22:53:18] <fn> <12R2D299> 4GitHub: 7"<No Description>"
[22:53:25] <FromDiscord> <Bung> yeah, It's not well documented.
[22:55:33] <FromDiscord> <0ffh> In reply to @haxscramper "Using compiler API": Thanks, too!
[22:57:34] <FromDiscord> <0ffh> In reply to @haxscramper "Using compiler API": That might actually be the snippedt I tried before.‚Üµcompiler_parser_test.nim(3, 16) Error: cannot open file: compiler/parser
[22:57:52] <FromDiscord> <0ffh> (edit) "snippedt" => "snippet"
[22:58:47] <FromDiscord> <0ffh> No it's not. I see. Need to get the Nim source first.
[23:01:13] <FromDiscord> <haxscramper> Install `compiler` package
[23:01:14] <FromDiscord> <haxscramper> you just need to `nimble install compiler`
[23:01:14] <FromDiscord> <haxscramper> no, you don't
[23:26:30] <FromDiscord> <theangryepicbanana> question: does `create`/`alloc` have to be explicitly freed if one of the gc backends is used (instead of orc/arc)?
[23:28:31] <FromDiscord> <haxscramper> I would assume yes, because GC is only concerned with traced references
[23:28:50] <FromDiscord> <haxscramper> Whatewher happens in your manual allocatinos you need to manage yourself, or wrap in object that can be `=destroy`ed
[23:29:14] <FromDiscord> <theangryepicbanana> hmm ok
[23:30:44] <FromDiscord> <theangryepicbanana> also a possibly related question: are seqs laid out sequentially in memory like a ptr/array, or does it do weird alignment stuff?
[23:31:15] <FromDiscord> <theangryepicbanana> it seems to but I'm not completely sure
[23:32:14] <FromDiscord> <haxscramper> Seq internally uses `T data`
[23:32:15] <FromDiscord> <haxscramper> So it depends on the C compiler being used
[23:32:17] <FromDiscord> <haxscramper> Flags
[23:32:25] <FromDiscord> <theangryepicbanana> ok
[23:32:33] <FromDiscord> <theangryepicbanana> thx
[23:32:38] <FromDiscord> <haxscramper> C and nim pragmas and other implementaiton details
[23:40:29] *** Quits: supakeen (~user@python/site-packages/supakeen) (Remote host closed the connection)
[23:40:53] *** Joins: supakeen (~user@python/site-packages/supakeen)
