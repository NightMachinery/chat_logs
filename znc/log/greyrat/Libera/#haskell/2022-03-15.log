[00:00:33] <Las[m]> thanks
[00:00:55] *** Quits: deadmarshal_ (~deadmarsh@95.38.231.29) (Ping timeout: 256 seconds)
[00:02:58] <[exa]> Guest27: not sure if that's the best solution but you can code a bit of prolog in multiparameter typeclasses to inductively convert the types at both sides to a common supertype
[00:03:27] *** Quits: nexus_ (~nexus@fibhost-67-47-34.fibernet.hu) (Ping timeout: 268 seconds)
[00:03:28] <[exa]> (honestly I guess other folks here might know better ways to do it)
[00:04:14] <geekosaur> acme-php? (no, don't do that)
[00:04:19] <Guest27> Is it easy to integrate Prolog into Haskell? That sounds like a fun solution
[00:04:50] <[exa]> Guest27: if you disable a few safety checks, haskell type system can be used as prolog
[00:05:01] *** Joins: nexus_ (~nexus@84-236-1-101.pool.digikabel.hu)
[00:05:06] <[exa]> geekosaur: that's everything via strings but yeah I thought about that. :D
[00:06:17] <[exa]> Guest27: there's a fun post here https://aphyr.com/posts/342-typing-the-technical-interview
[00:07:02] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 252 seconds)
[00:07:26] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.4)
[00:08:18] *** Quits: jackson99 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[00:08:47] <Guest27> [exa] "The walls smell of Slack DMs and conflict avoidance." lol this is great
[00:09:03] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[00:13:13] *** Joins: immae (~immae@2a01:4f8:141:53e7::)
[00:13:23] *** Joins: acidjnk (~acidjnk@p200300d0c7049f84692835b345d10091.dip0.t-ipconnect.de)
[00:13:51] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[00:14:52] <[exa]> Guest27: anyway, I'm not really sure if this will work for normal (+) from Num, at least not easily. Its interface is pretty strict, and you'd need to hide the subtype information somehow.
[00:18:20] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[00:22:14] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:6945:2980:3f53:dff8)
[00:23:47] *** Quits: sander (~sander@user/sander) (Quit: So long! :))
[00:25:33] *** Joins: sander (~sander@user/sander)
[00:25:50] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:27:19] *** Joins: bahamas (~lucian@84.232.140.52)
[00:31:25] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 240 seconds)
[00:35:57] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:6945:2980:3f53:dff8) (Remote host closed the connection)
[00:36:03] <Guest27> [exa] That article was really cool, thanks for sharing. Now to define BASIC integers as Peano numbers :P
[00:38:17] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Quit: fjmorazan)
[00:38:55] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[00:45:46] *** Quits: kuribas (~user@ptr-25vy0i6vc7g38qqigba.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[00:48:12] *** Joins: x_kuru_ (~xkuru@user/xkuru)
[00:51:01] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[00:51:27] *** Quits: x_kuru (xkuru@user/xkuru) (Ping timeout: 250 seconds)
[00:56:30] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[01:02:07] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[01:10:59] *** Joins: k8yun_ (~k8yun@user/k8yun)
[01:11:24] *** Quits: k8yun (~k8yun@user/k8yun) (Ping timeout: 252 seconds)
[01:12:35] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[01:12:49] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[01:15:26] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[01:19:07] *** Joins: bahamas (~lucian@84.232.140.52)
[01:19:48] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:24:03] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 252 seconds)
[01:27:22] *** Joins: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com)
[01:27:59] *** Quits: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com) (Remote host closed the connection)
[01:28:11] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:6945:2980:3f53:dff8)
[01:29:53] *** Quits: Guest84 (~Guest84@2601:602:87f:4220:c3f4:c3dc:6b1f:b324) (Quit: Client closed)
[01:31:22] *** Quits: kenran (~kenran@200116b82b398800867f448303c43c5e.dip.versatel-1u1.de) (Quit: WeeChat info:version)
[01:32:26] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 250 seconds)
[01:33:44] *** Quits: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com) (Remote host closed the connection)
[01:37:32] *** Joins: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com)
[01:45:38] *** Quits: k8yun_ (~k8yun@user/k8yun) (Quit: Leaving)
[01:48:02] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:6945:2980:3f53:dff8) (Remote host closed the connection)
[01:51:00] *** Quits: cjb (~cjb@user/cjb) (Ping timeout: 260 seconds)
[01:51:12] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:52:51] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[01:58:39] *** Quits: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com) (Remote host closed the connection)
[02:00:41] *** Joins: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com)
[02:02:09] *** Quits: Guest27 (~Guest27@2601:281:d47f:1590::6b90) (Quit: Client closed)
[02:02:23] *** Joins: Guest27 (~Guest27@2601:281:d47f:1590::6b90)
[02:03:06] *** Quits: v0rpun1 (~pvorp@2001:861:3881:c690:4295:9ff7:4e0c:3709) (Quit: bye)
[02:05:31] *** Quits: jao (~jao@45.134.142.199) (Remote host closed the connection)
[02:11:31] *** Joins: machinedgod (~machinedg@24.105.81.50)
[02:11:43] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[02:12:03] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[02:12:43] *** Quits: liz_ (~liz@2a00:23c5:9680:501:b62e:99ff:fee4:47fa) (Remote host closed the connection)
[02:14:40] *** Joins: Topsi (~Tobias@dyndsl-095-033-027-018.ewe-ip-backbone.de)
[02:18:30] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Ping timeout: 272 seconds)
[02:19:03] *** Quits: Topsi (~Tobias@dyndsl-095-033-027-018.ewe-ip-backbone.de) (Client Quit)
[02:20:00] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-0034-44e7-d0a8-40e0.res6.spectrum.com)
[02:23:57] *** Quits: x_kuru_ (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[02:24:37] *** Quits: mvk (~mvk@2607:fea8:5cc3:7e00::45ee) (Ping timeout: 256 seconds)
[02:26:11] *** Quits: stef204 (~stef204@user/stef204) (Quit: WeeChat 3.4)
[02:27:03] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:27:45] *** Parts: TonyStone (~TonyStone@2603-7080-8607-c36a-0034-44e7-d0a8-40e0.res6.spectrum.com) (Leaving)
[02:29:17] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[02:31:58] *** Quits: daemonises (uid545329@id-545329.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[02:33:26] *** Joins: Joaquin (~Joaquin@14.red-83-51-143.dynamicip.rima-tde.net)
[02:35:26] *** Quits: Joaquin (~Joaquin@14.red-83-51-143.dynamicip.rima-tde.net) (Client Quit)
[02:35:57] *** Quits: nexus_ (~nexus@84-236-1-101.pool.digikabel.hu) (Ping timeout: 256 seconds)
[02:35:58] *** Joins: tfeb (~tfb@cpc102388-sgyl38-2-0-cust817.18-2.cable.virginm.net)
[02:36:31] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[02:37:40] *** Joins: nexus_ (~nexus@80-95-70-217.pool.digikabel.hu)
[02:41:11] *** Joins: Joaquin (~Joaquin@14.red-83-51-143.dynamicip.rima-tde.net)
[02:49:13] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 256 seconds)
[02:50:37] *** Quits: Joaquin (~Joaquin@14.red-83-51-143.dynamicip.rima-tde.net) (Quit: Client closed)
[02:50:47] *** Joins: Joaquin (~Joaquin@14.red-83-51-143.dynamicip.rima-tde.net)
[02:56:26] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 252 seconds)
[02:56:27] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 252 seconds)
[02:59:11] *** Quits: acidjnk (~acidjnk@p200300d0c7049f84692835b345d10091.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[02:59:44] *** Joins: lavaman (~lavaman@98.38.249.169)
[03:01:30] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[03:02:15] *** Quits: Joaquin (~Joaquin@14.red-83-51-143.dynamicip.rima-tde.net) (Ping timeout: 256 seconds)
[03:04:09] *** Quits: jgeerds (~jgeerds@55d4548e.access.ecotel.net) (Ping timeout: 252 seconds)
[03:04:42] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi) (Quit: Leaving.)
[03:05:19] *** Quits: michalz (~michalz@185.246.204.93) (Remote host closed the connection)
[03:08:10] *** Quits: tfeb (~tfb@cpc102388-sgyl38-2-0-cust817.18-2.cable.virginm.net) (Quit: died)
[03:09:57] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[03:28:26] *** Joins: jao (~jao@45.134.142.199)
[03:33:00] *** Quits: mrkajetanp (~mrkajetan@2a01:4b00:ea36:6c00:7994:941c:3f5d:2b88) (Ping timeout: 240 seconds)
[03:34:12] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 250 seconds)
[03:35:41] *** Quits: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com) (Ping timeout: 256 seconds)
[03:46:42] *** Joins: machinedgod (~machinedg@24.105.81.50)
[03:49:50] *** Quits: mmhat (~mmh@55d4b6b1.access.ecotel.net) (Quit: WeeChat 3.4)
[03:52:15] *** Joins: gdown (~gavin@h69-11-149-231.kndrid.broadband.dynamic.tds.net)
[03:54:35] *** Joins: the_proffesor (~theproffe@c-24-9-30-127.hsd1.co.comcast.net)
[03:56:05] *** Quits: Guest27 (~Guest27@2601:281:d47f:1590::6b90) (Ping timeout: 256 seconds)
[03:56:25] *** Quits: theproffesor (~theproffe@c-24-9-30-127.hsd1.co.comcast.net) (Ping timeout: 256 seconds)
[03:56:32] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[04:02:06] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[04:03:58] *** Joins: InstX1 (~Liam@2601:6c4:4080:3f80:ac7b:7176:d055:eccc)
[04:06:32] *** Quits: ninioArtillero[m (~ninioarti@2001:470:69fc:105::1:d1ef) (Ping timeout: 240 seconds)
[04:06:32] *** Quits: FernandoChu[m] (~ryunaqmat@2001:470:69fc:105::1:4dc0) (Ping timeout: 240 seconds)
[04:06:35] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 240 seconds)
[04:07:02] *** Quits: Las[m] (~lasmatrix@2001:470:69fc:105::74e) (Ping timeout: 240 seconds)
[04:07:02] *** Quits: schuelermine[m] (~schuelerm@user/schuelermine) (Ping timeout: 240 seconds)
[04:07:02] *** Quits: MosheTeutsch[m] (~moteutsch@2001:470:69fc:105::1:c250) (Ping timeout: 240 seconds)
[04:07:02] *** Quits: bb010g (~bb010g@2001:470:69fc:105::9a5) (Ping timeout: 240 seconds)
[04:07:02] *** Quits: VanceIsM7[m] (~vanceism7@2001:470:69fc:105::3ad) (Ping timeout: 240 seconds)
[04:07:02] *** Quits: pareto-optimal-d (~pareto-op@2001:470:69fc:105::1:b61f) (Ping timeout: 240 seconds)
[04:07:02] *** Quits: zwro[m] (~zwromatri@2001:470:69fc:105::1d4) (Ping timeout: 240 seconds)
[04:07:02] *** Quits: marinelli[m] (~marinelli@2001:470:69fc:105::2d8) (Ping timeout: 240 seconds)
[04:07:02] *** Quits: jinsun_ (~jinsun@user/jinsun) (Ping timeout: 240 seconds)
[04:07:02] *** Quits: mahene[m] (~mahenemat@2001:470:69fc:105::1:6a93) (Ping timeout: 240 seconds)
[04:07:04] *** Joins: ninioArtillero[m (~ninioarti@2001:470:69fc:105::1:d1ef)
[04:07:17] *** Quits: Inst (~Liam@2601:6c4:4080:3f80:dc06:54f2:d0a:6b8c) (Ping timeout: 240 seconds)
[04:09:36] *** Quits: stefan-_ (~cri@42dots.de) (Ping timeout: 252 seconds)
[04:10:35] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[04:13:46] *** Joins: stefan-_ (~cri@42dots.de)
[04:15:21] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[04:15:54] *** Joins: johnw (~johnw@2607:f6f0:3004:1:c8b4:50ff:fef8:6bf0)
[04:20:07] *** Joins: FernandoChu[m] (~ryunaqmat@2001:470:69fc:105::1:4dc0)
[04:20:48] *** Joins: MosheTeutsch[m] (~moteutsch@2001:470:69fc:105::1:c250)
[04:20:57] *** Joins: mahene[m] (~mahenemat@2001:470:69fc:105::1:6a93)
[04:21:03] *** Joins: jinsun_ (~jinsun@user/jinsun)
[04:21:31] *** Joins: pareto-optimal-d (~pareto-op@2001:470:69fc:105::1:b61f)
[04:21:40] *** Joins: Las[m] (~lasmatrix@2001:470:69fc:105::74e)
[04:21:44] *** Joins: marinelli[m] (~marinelli@2001:470:69fc:105::2d8)
[04:23:10] *** Joins: VanceIsM7[m] (~vanceism7@2001:470:69fc:105::3ad)
[04:24:19] *** Joins: bb010g (~bb010g@2001:470:69fc:105::9a5)
[04:24:23] *** Joins: schuelermine[m] (~schuelerm@user/schuelermine)
[04:24:59] *** Joins: zwro[m] (~zwromatri@2001:470:69fc:105::1d4)
[04:29:00] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[04:30:46] *** Joins: Everything (~Everythin@37.115.210.35)
[04:35:14] <neverwas> <Midjak> tried several hie.yaml configuration without succeed </Midjak> Replacing the contents with "cradle:\nstack:\n" worked for me. (Not sure why though. Seems like that'd make it a no-op.)
[04:41:02] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:42:05] *** Quits: tremon (~tremon@83-84-18-241.cable.dynamic.v4.ziggo.nl) (Quit: getting boxed in)
[04:43:02] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:43:19] *** Joins: mrkajetanp (~mrkajetan@2a01:4b00:ea36:6c00:7994:941c:3f5d:2b88)
[04:44:22] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[04:44:33] *** Joins: Guest27 (~Guest27@2601:281:d47f:1590::6b90)
[04:45:16] *** Quits: nexus_ (~nexus@80-95-70-217.pool.digikabel.hu) (Ping timeout: 250 seconds)
[04:46:35] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[04:46:54] *** Joins: nexus_ (~nexus@84-236-60-119.pool.digikabel.hu)
[04:47:09] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:57:11] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[04:59:11] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[05:04:49] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:05:21] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:05:52] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[05:10:19] *** Quits: Guest27 (~Guest27@2601:281:d47f:1590::6b90) (Ping timeout: 256 seconds)
[05:10:21] *** Quits: haskl (~haskl@user/haskl) (Ping timeout: 245 seconds)
[05:10:35] *** Joins: haskl (~haskl@user/haskl)
[05:12:55] *** Joins: ss (~ss@187.83.249.216.dyn.smithville.net)
[05:12:58] *** ss is now known as Guest7560
[05:13:06] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[05:13:30] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[05:13:37] *** Quits: jamestmartin (~james@jtmar.me) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[05:13:45] *** Joins: jtmar (~james@jtmar.me)
[05:13:49] *** Quits: meejah (~meejah@rutas.meejah.ca) (Ping timeout: 240 seconds)
[05:13:56] *** Quits: sm[i] (~user@plaintextaccounting/sm) (Ping timeout: 252 seconds)
[05:14:29] *** Joins: bahamas (~lucian@84.232.140.158)
[05:14:48] *** Joins: meejah (~meejah@rutas.meejah.ca)
[05:15:47] *** Quits: tolt (~weechat-h@li219-154.members.linode.com) (Ping timeout: 250 seconds)
[05:17:31] *** Joins: tolt (~weechat-h@li219-154.members.linode.com)
[05:17:35] *** Quits: Unicorn_Princess (~Unicorn_P@46-54-248-191.static.kate-wing.si) (Remote host closed the connection)
[05:17:54] *** Joins: Unicorn_Princess (~Unicorn_P@46-54-248-191.static.kate-wing.si)
[05:18:20] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:18:20] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:18:20] *** Joins: wroathe (~wroathe@user/wroathe)
[05:18:38] *** Quits: jao (~jao@45.134.142.199) (Ping timeout: 250 seconds)
[05:18:54] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 252 seconds)
[05:19:31] *** Joins: sm[i] (~user@plaintextaccounting/sm)
[05:19:54] <justsomeguy> lol, I just came across this in Data.ByteString https://hackage.haskell.org/package/bytestring-0.11.3.0/docs/src/Data.ByteString.Internal.html#accursedUnutterablePerformIO
[05:20:18] *** Joins: zmt00 (~zmt00@user/zmt00)
[05:20:37] *** Joins: jao (~jao@45.134.142.225)
[05:21:15] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[05:21:37] <Guest7560> so i'm writing a function type signature with a spliced template haskell type, something like f :: $(foo) -> $(bar), where $(foo) is a Q Type splicing in Foo a and $(bar) is a Q Type splicing in Bar b. unfortunately, it seems like this isn't actually equivalent to writing f :: Foo a -> Bar b and doesn't compile, because a and b don't get implicitly
[05:21:37] <Guest7560> forall'd when spliced in. are my options basically writing a Q Type for the full signature or writing the quantifiers manually, or am I missing something?
[05:21:47] <byorgey> justsomeguy: =)
[05:25:00] <davean> justsomeguy: You can't talk about that
[05:25:16] <byorgey> I wonder who wrote that comment originally.
[05:25:22] * byorgey goes digging in the commit history
[05:27:18] <byorgey> ah, it was dcoutts__ =)  https://github.com/haskell/bytestring/commit/80ff4a3018cd8909abb1d4e0c32f012a523883ec
[05:28:27] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[05:28:58] <byorgey> Guest7560: I don't know much about TH, but it would be very strange to me if there was a way to splice in types with type variables like that and have the type variables bound at the outermost level like that.  That is what would happen if you just spliced in those types "as text" but thankfully that's not how TH works, it splices at the level of syntax trees.
[05:29:33] <byorgey> I would think your best bet is to write a single Q Type that generates the entire signature.
[05:30:24] <byorgey> But you could perhaps turn your current 'foo' and 'bar' into functions that accept a type variable as input, so it wouldn't necessarily mean rewriting everything from scratch
[05:31:07] <byorgey> But I'm really just guessing here.
[05:33:33] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 256 seconds)
[05:34:25] <Guest7560> ah i figured as much; thanks! yeah, it's not too bad for me to try to generate the whole signature at once; that might be the best approach then
[05:34:41] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Ping timeout: 256 seconds)
[05:44:18] <Guest7560> it turned out to be as easy as f :: $(quantify [t| $(foo) -> $(bar)|]) where quantify :: Q Type -> Q Type! thanks again
[05:46:41] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-a0f7-4a6c-9396-dfff.res6.spectrum.com)
[05:47:33] *** Quits: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com) (Ping timeout: 268 seconds)
[05:48:23] <Axman6> justsomeguy: I can't believe you would even utter that!
[05:48:57] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:64ad:f021:a34e:c231) (Remote host closed the connection)
[05:50:42] <byorgey> Guest7560: ah, nice!
[05:51:15] <Axman6> justsomeguy: see also: https://github.com/well-typed/cborg/blob/master/.travis/dragon-bureaucrat.sh
[05:51:23] *** Joins: bahamas (~lucian@84.232.140.158)
[05:52:46] <Axman6> note that this bureaucratic dragon can be fooled by adding "git grep" to a comment after you use of the incorrect spelling "serialize"
[05:54:45] *** Joins: AlexNoo_ (~AlexNoo@178.34.161.174)
[05:55:59] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 256 seconds)
[05:56:03] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:64ad:f021:a34e:c231)
[05:57:32] *** Quits: AlexZenon (~alzenon@94.233.240.159) (Ping timeout: 240 seconds)
[05:57:38] *** Quits: Alex_test (~al_test@94.233.240.159) (Ping timeout: 272 seconds)
[05:58:18] <jackdk> Guest7560: That's cool, I didn't know about `quantify`
[05:58:29] *** Quits: AlexNoo (~AlexNoo@94.233.240.159) (Ping timeout: 252 seconds)
[05:59:57] <Guest7560> jackdk I don't think it's a function in a library or anything; i just meant it was easy enough to write out by hand heh
[06:00:33] <Guest7560> oh wait no way https://hackage.haskell.org/package/th-abstraction-0.4.3.0/docs/Language-Haskell-TH-Datatype.html#v:quantifyType
[06:00:50] <jackdk> Guest7560: Oh, right. I think you just hoogled the same thing as I did =)
[06:01:10] *** Joins: Alex_test (~al_test@178.34.161.174)
[06:01:18] *** Joins: AlexZenon (~alzenon@178.34.161.174)
[06:04:50] *** Joins: zmt00 (~zmt00@user/zmt00)
[06:07:21] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[06:08:24] *** Quits: jao (~jao@45.134.142.225) (Ping timeout: 252 seconds)
[06:08:45] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:64ad:f021:a34e:c231) (Remote host closed the connection)
[06:11:56] *** Quits: Guest7560 (~ss@187.83.249.216.dyn.smithville.net) (Quit: Client closed)
[06:13:02] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:64ad:f021:a34e:c231)
[06:15:51] *** Joins: ub (~Thunderbi@p200300ecdf19b70a55005d108b4dd460.dip0.t-ipconnect.de)
[06:16:42] *** Quits: ubert (~Thunderbi@p200300ecdf19b765b1fc5a865b2694ae.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[06:16:42] *** ub is now known as ubert
[06:17:23] *** Joins: Henson (~kvirc@107-179-133-201.cpe.teksavvy.com)
[06:17:31] *** Quits: ubert1 (~Thunderbi@p200300ecdf19b7650b46467200086b86.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[06:19:13] <Henson> what's the paradigm if I'm using Pipes (or Conduit) if I have a stream of paired data (like tuples) and I want to turn the stream of pairs into a pair of streams and feed the elements through two pipelines that handle single items, and then combine them back together later?  Is that something these libraries are designed to do, or there another paradigm I should be using?
[06:19:55] *** Joins: mvk (~mvk@2607:fea8:5cc3:7e00::45ee)
[06:23:41] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:64ad:f021:a34e:c231) (Remote host closed the connection)
[06:29:52] <jackdk> Once you go from stream-of-pairs to pair-of-streams, you still need to process in lockstep otherwise you need to buffer one side of the data that comes in from teh initial stream
[06:30:47] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[06:31:21] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[06:31:29] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[06:32:11] <jackdk> So I would probably push each side of the input stream into a separate bounded queue, then have streams that go Read inQueueA -> process A -> write outQueueA (and similar for B), and then have another stream that reads from outQueue{A,B} and emits the output. And run it all in parallel
[06:32:22] <jackdk> but I haven't done a lot of streaming work so I'm not 100% that this is a good idea
[06:33:42] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 252 seconds)
[06:33:42] <jackdk> Hm, `streaming` (which I'm least unfamiliar with) has a `zip :: Monad m => Stream (Of a) m r -> Stream (Of b) m r -> Stream (Of (a, b)) m r`
[06:34:43] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[06:34:43] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[06:34:43] *** Joins: wroathe (~wroathe@user/wroathe)
[06:34:45] <jackdk> It also has an `unzip` with a curious type, to preserve streaming: https://hackage.haskell.org/package/streaming-0.2.3.1/docs/Streaming-Prelude.html#v:unzip
[06:37:35] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 240 seconds)
[06:39:24] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[06:40:36] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[06:41:33] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[06:42:10] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[06:42:32] *** Joins: mbuf (~Shakthi@27.58.140.82)
[06:46:46] *** Quits: Unicorn_Princess (~Unicorn_P@46-54-248-191.static.kate-wing.si) (Remote host closed the connection)
[06:48:06] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:49:36] *** Quits: yauhsien (~yauhsien@61-231-44-111.dynamic-ip.hinet.net) (Remote host closed the connection)
[06:50:21] *** Joins: yauhsien (~yauhsien@61-231-44-111.dynamic-ip.hinet.net)
[06:55:00] <Henson> jackdk: thank you for the suggestion.
[06:55:42] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:55:43] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[06:55:43] *** finn_elija is now known as FinnElija
[06:55:56] *** Quits: Henson (~kvirc@107-179-133-201.cpe.teksavvy.com) (Quit: goodnight)
[06:56:17] *** Quits: nexus_ (~nexus@84-236-60-119.pool.digikabel.hu) (Ping timeout: 256 seconds)
[06:56:35] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 240 seconds)
[06:58:07] *** Joins: nexus_ (~nexus@178-164-188-12.pool.digikabel.hu)
[07:01:30] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[07:03:54] *** Quits: Chai-T-Rex (~ChaiTRex@user/chaitrex) (Quit: Chai-T-Rex)
[07:04:30] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[07:06:46] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:64ad:f021:a34e:c231)
[07:08:12] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Ping timeout: 240 seconds)
[07:10:24] *** Joins: k8yun (~k8yun@user/k8yun)
[07:12:25] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:12:39] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:14:02] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:14:50] *** Quits: pretty_d1 (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4.1)
[07:15:15] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:17:47] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[07:17:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[07:18:04] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[07:20:05] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:22:28] *** Quits: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo) (Remote host closed the connection)
[07:23:56] *** Quits: mzan (~quassel@mail.asterisell.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[07:25:01] *** Joins: mzan (~quassel@mail.asterisell.com)
[07:25:02] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[07:26:47] *** Joins: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo)
[07:30:45] *** Joins: yauhsien_ (~yauhsien@61-231-44-111.dynamic-ip.hinet.net)
[07:30:45] *** Quits: yauhsien (~yauhsien@61-231-44-111.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[07:33:49] *** Quits: Flow (~none@gentoo/developer/flow) (Ping timeout: 250 seconds)
[07:34:51] *** Joins: Flow (~none@gentoo/developer/flow)
[07:35:07] *** Joins: eggplant_ (~Eggplanta@2600:1700:bef1:5e10:fcf5:76ff:669c:b084)
[07:37:57] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:64ad:f021:a34e:c231) (Ping timeout: 240 seconds)
[07:43:33] *** Quits: boborygmy_ (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 252 seconds)
[07:43:33] *** Quits: boborygmy (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 252 seconds)
[07:50:58] *** Joins: Guest84 (~Guest84@2601:602:87f:4220:c3f4:c3dc:6b1f:b324)
[07:51:33] *** Quits: Guest84 (~Guest84@2601:602:87f:4220:c3f4:c3dc:6b1f:b324) (Client Quit)
[07:54:38] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:a4f7:3458:36c4:ffd7) (Ping timeout: 250 seconds)
[07:55:26] *** Quits: yauhsien_ (~yauhsien@61-231-44-111.dynamic-ip.hinet.net) (Remote host closed the connection)
[07:55:58] *** Joins: yauhsien (~yauhsien@61-231-44-111.dynamic-ip.hinet.net)
[07:56:32] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:e51b:ac6b:af96:5d6c)
[07:59:30] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 252 seconds)
[08:00:42] *** Quits: yauhsien (~yauhsien@61-231-44-111.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[08:01:46] *** Quits: MironZ (~MironZ@nat-infra.ehlab.uk) (Quit: Ping timeout (120 seconds))
[08:01:56] *** Quits: sus (zero@user/zeromomentum) (Quit: Ping timeout (120 seconds))
[08:02:06] *** Joins: MironZ (~MironZ@nat-infra.ehlab.uk)
[08:02:07] *** Joins: sus (zero@user/zeromomentum)
[08:03:55] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[08:07:48] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[08:11:11] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Remote host closed the connection)
[08:11:24] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[08:13:16] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 250 seconds)
[08:15:00] *** Joins: kaph_ (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[08:16:00] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[08:17:39] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 252 seconds)
[08:26:29] *** Joins: xkuru (~xkuru@user/xkuru)
[08:30:10] *** Quits: kaph_ (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 250 seconds)
[08:32:20] *** Quits: russruss (~russruss@my.russellmcc.com) (Quit: The Lounge - https://thelounge.chat)
[08:33:13] *** Quits: Giovanni (~Giovanni@176.55.166.222) (Remote host closed the connection)
[08:37:44] *** Joins: InstX1_ (~Liam@2601:6c4:4080:3f80:51cd:6d8f:20a7:5eaa)
[08:37:54] *** Joins: russruss (~russruss@my.russellmcc.com)
[08:41:17] *** Quits: InstX1 (~Liam@2601:6c4:4080:3f80:ac7b:7176:d055:eccc) (Ping timeout: 240 seconds)
[08:48:37] *** Quits: tomku (~tomku@user/tomku) (Ping timeout: 240 seconds)
[08:51:13] *** Joins: kaph_ (~kaph@151.43.120.248)
[08:52:14] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[08:52:27] *** Quits: nexus_ (~nexus@178-164-188-12.pool.digikabel.hu) (Ping timeout: 256 seconds)
[08:54:08] *** Joins: nexus_ (~nexus@80-95-85-52.pool.digikabel.hu)
[08:54:26] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[08:54:35] *** Joins: gabiruh_ (~gabiruh@vps19177.publiccloud.com.br)
[08:55:18] *** Quits: gabiruh (~gabiruh@vps19177.publiccloud.com.br) (Read error: Connection reset by peer)
[08:58:02] *** Joins: jakalx (~jakalx@base.jakalx.net)
[08:58:15] *** Joins: deadmarshal_ (~deadmarsh@95.38.115.168)
[08:58:26] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[08:59:29] *** Joins: img (~img@user/img)
[08:59:38] *** Quits: mbuf (~Shakthi@27.58.140.82) (Quit: Leaving)
[09:01:02] *** Quits: img (~img@user/img) (Client Quit)
[09:01:18] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 272 seconds)
[09:02:24] *** Joins: img (~img@user/img)
[09:02:36] *** Quits: deadmarshal_ (~deadmarsh@95.38.115.168) (Ping timeout: 240 seconds)
[09:03:33] *** Quits: kaph_ (~kaph@151.43.120.248) (Read error: Connection reset by peer)
[09:04:26] *** Joins: kaph (~kaph@151.43.120.248)
[09:11:44] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[09:16:25] *** Joins: deadmarshal_ (~deadmarsh@95.38.115.168)
[09:16:53] *** Joins: lavaman (~lavaman@98.38.249.169)
[09:19:12] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[09:22:25] *** Joins: yauhsien (~yauhsien@61-231-44-111.dynamic-ip.hinet.net)
[09:24:00] *** Quits: shriekingnoise (~shrieking@201.231.16.156) (Quit: Quit)
[09:25:44] *** Joins: tomku (~tomku@user/tomku)
[09:27:55] *** Quits: kaph (~kaph@151.43.120.248) (Read error: Connection reset by peer)
[09:28:32] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 272 seconds)
[09:32:15] *** Joins: cyphase (~cyphase@user/cyphase)
[09:39:33] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:41:21] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[09:44:06] *** Joins: vglfr (~vglfr@46.96.161.0)
[09:47:45] *** Joins: xkuru (~xkuru@user/xkuru)
[09:55:40] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[10:02:15] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[10:10:05] *** Joins: x_kuru (xkuru@user/xkuru)
[10:13:29] *** Joins: liz (~liz@2a00:23c5:9680:501:b62e:99ff:fee4:47fa)
[10:13:49] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 256 seconds)
[10:14:59] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[10:15:11] *** Quits: k8yun (~k8yun@user/k8yun) (Ping timeout: 256 seconds)
[10:18:06] *** Quits: deadmarshal_ (~deadmarsh@95.38.115.168) (Ping timeout: 252 seconds)
[10:27:04] *** Joins: notzmv (~zmv@user/notzmv)
[10:29:46] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[10:32:44] *** Quits: liz (~liz@2a00:23c5:9680:501:b62e:99ff:fee4:47fa) (Remote host closed the connection)
[10:36:15] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 252 seconds)
[10:38:55] *** Joins: cfricke (~cfricke@user/cfricke)
[10:39:18] *** Quits: tomku (~tomku@user/tomku) (Ping timeout: 250 seconds)
[10:39:38] *** Joins: coot (~coot@213.134.190.95)
[10:40:50] *** Joins: feliix42_ (~felix@gibbs.uberspace.de)
[10:41:13] *** Joins: cyphase (~cyphase@user/cyphase)
[10:41:45] *** Quits: feliix42 (~felix@gibbs.uberspace.de) (Ping timeout: 252 seconds)
[10:48:46] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[10:52:00] *** Joins: Pickchea (~private@user/pickchea)
[10:55:35] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[10:55:49] *** Joins: lavaman (~lavaman@98.38.249.169)
[10:55:57] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[10:58:28] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[10:58:38] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[10:58:50] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[11:00:54] *** Joins: michalz (~michalz@185.246.204.43)
[11:06:29] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Ping timeout: 252 seconds)
[11:10:07] *** Joins: jonathanx (~jonathan@c-5eea3758-74736162.cust.telenor.se)
[11:13:39] *** Quits: nexus_ (~nexus@80-95-85-52.pool.digikabel.hu) (Ping timeout: 252 seconds)
[11:14:50] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 250 seconds)
[11:15:32] *** Joins: nexus_ (~nexus@84-236-55-113.pool.digikabel.hu)
[11:17:41] *** Joins: machinedgod (~machinedg@24.105.81.50)
[11:18:50] *** Quits: yauhsien (~yauhsien@61-231-44-111.dynamic-ip.hinet.net) (Remote host closed the connection)
[11:21:04] *** Joins: yauhsien (~yauhsien@61-231-44-111.dynamic-ip.hinet.net)
[11:22:37] *** Quits: jonathanx (~jonathan@c-5eea3758-74736162.cust.telenor.se) (Ping timeout: 256 seconds)
[11:26:06] *** Quits: yauhsien (~yauhsien@61-231-44-111.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[11:27:18] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:cecd:603d:2da7:a044)
[11:30:58] *** Joins: MarcoBuster (~MarcoBust@37.161.174.126)
[11:31:04] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[11:32:31] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Remote host closed the connection)
[11:33:00] *** Joins: briandaed (~root@109.95.142.93.r.toneticgroup.pl)
[11:34:13] <MarcoBuster> Hi! I'm trying to learn Haskell for my first time. Can someone explain what this expression does?
[11:34:13] <MarcoBuster> λx.(case x of inl(y) -> x, inr(z) -> inl(z))
[11:34:13] <MarcoBuster> Thank you very much 
[11:34:15] *** Quits: mreh (~matthew@host86-172-33-212.range86-172.btcentralplus.com) (Quit: Lost terminal)
[11:41:19] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 256 seconds)
[11:41:41] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:44:20] *** Joins: fendor (~fendor@178.165.206.62.wireless.dyn.drei.com)
[11:46:01] *** Joins: tomku (~tomku@user/tomku)
[11:46:10] *** Joins: alp (~alp@user/alp)
[11:46:27] *** Joins: yauhsien (~yauhsien@61-231-44-111.dynamic-ip.hinet.net)
[11:48:26] *** Joins: acidjnk (~acidjnk@pd9e0b763.dip0.t-ipconnect.de)
[11:51:12] *** Quits: jinsun__ (~jinsun@user/jinsun) ()
[11:55:01] *** Quits: dextaa_ (~dextaa@user/dextaa) (Remote host closed the connection)
[11:56:53] *** Quits: gdown (~gavin@h69-11-149-231.kndrid.broadband.dynamic.tds.net) (Remote host closed the connection)
[11:57:17] *** Quits: MarcoBuster (~MarcoBust@37.161.174.126) (Remote host closed the connection)
[11:57:19] *** Joins: zmt01 (~zmt00@user/zmt00)
[11:57:33] *** Joins: MarcoBuster (~MarcoBust@37.161.174.126)
[11:58:12] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[11:58:55] <jackdk> MarcoBuster: do you have a link to where you saw that expression, because the lower-case `inl` and `inr` would not be valid
[12:00:26] *** Joins: lavaman (~lavaman@98.38.249.169)
[12:03:34] <MarcoBuster> jackdk: in Haskell terms that is \x -> case x of { Left y -> x; Right z -> Left z }
[12:04:27] <jackdk> What parts of this expression do you understand? Specifically, do you understand what a lambda abstraction means, and what a case expression does?
[12:06:20] *** Joins: chele (~chele@user/chele)
[12:06:39] <MarcoBuster> I think I don't really understood what a case expression does
[12:07:58] <MarcoBuster> I'm familiar with the case expression of non-functional programming languages of course but it can't map the concept to the Haskell "case"
[12:08:08] <jackdk> yeah, this is quite different
[12:09:27] *** Quits: vglfr (~vglfr@46.96.161.0) (Read error: Connection reset by peer)
[12:09:54] <jackdk> A case expression means: look at the shape of the expression between `case` and `of` (the "scrutinee"). Working through the list of `pattern -> expression` clauses, in order, seeing if the pattern matches the scrutinee. If it does, assign the variables in the pattern and evaluate the right hand side of the `->`
[12:10:07] <jackdk> that's a lot of words, so let's do an example
[12:10:10] *** Joins: vglfr (~vglfr@46.96.161.0)
[12:10:41] <jackdk> `(\x -> case x of { Left y -> x; Right z -> Left z }) (Right 3)`
[12:11:39] <jackdk> First step: evaluate the lambda, substituting `x`: `case Right 3 of { Left y -> Right 3; Right z -> Left z }`. Does `Right 3` match the pattern `Left y`?
[12:14:27] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[12:15:34] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[12:16:13] *** Quits: sander (~sander@user/sander) (Ping timeout: 240 seconds)
[12:19:21] *** Joins: cheater (~Username@user/cheater)
[12:19:50] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[12:21:10] *** Joins: kuribas (~user@ptr-25vy0i9smgbd9x89015.18120a2.ip6.access.telenet.be)
[12:22:57] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 252 seconds)
[12:22:57] *** Quits: MarcoBuster (~MarcoBust@37.161.174.126) (Read error: Connection reset by peer)
[12:24:12] *** Joins: deadmarshal_ (~deadmarsh@95.38.115.168)
[12:24:20] *** Joins: Guest16 (~Guest16@89-64-88-131.dynamic.chello.pl)
[12:24:28] *** Guest16 is now known as HaskLove
[12:24:36] <dminuoso> Is there a way to delete a package candidate on hackage?
[12:24:51] <dminuoso> I specified an incorrect version, but I want to avoid accidentally ever publishing this in the future.
[12:25:13] *** Joins: InstX1 (~Liam@2601:6c4:4080:3f80:c5d8:5b17:fec2:5fb2)
[12:26:45] <HaskLove> Hello! Does anybody here have experience with time / space profiling? For some reason 52%time of my program is being taken up by the "MAIN <built-in>" cost center and I can't find any documentation that explicitly states what that cost center refers to. Appreciate any inputs!
[12:26:53] <dminuoso> Gah the hackage UX is so bizarre.
[12:27:19] <dminuoso> It's like people without a graphical browser designed it. :>
[12:28:16] *** Quits: HaskLove (~Guest16@89-64-88-131.dynamic.chello.pl) (Client Quit)
[12:28:37] *** Quits: InstX1_ (~Liam@2601:6c4:4080:3f80:51cd:6d8f:20a7:5eaa) (Ping timeout: 240 seconds)
[12:29:54] <jackdk> dminuoso: click into the package candidate -> edit package information -> delete candidate
[12:30:06] *** Quits: vglfr (~vglfr@46.96.161.0) (Ping timeout: 252 seconds)
[12:30:15] *** Quits: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[12:30:21] <dminuoso> jackdk: Ahh!
[12:30:25] <dminuoso> Thanks.
[12:30:38] <jackdk> dminuoso: not that I disagree with your complaint :->
[12:31:10] <[exa]> hackage admin interface isn't on gopher?  ._.
[12:31:34] <jackdk> nah coz gopher's readonly iirc
[12:36:34] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[12:41:32] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[12:42:53] *** alMalsamo is now known as lumberjack13
[12:43:24] <[exa]> jackdk: you can actually smuggle in user data to scripts in the very same way as with old html (there's "search form" support :D )
[12:43:42] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[12:44:00] *** Joins: Guest16 (~Guest16@89-64-88-131.dynamic.chello.pl)
[12:44:09] *** Quits: Guest16 (~Guest16@89-64-88-131.dynamic.chello.pl) (Client Quit)
[12:44:37] *** Joins: rond_ (~rond_@90.254.208.190)
[12:45:14] <dminuoso> `ghcup: make: executeFile: does not exist (No such file or directory)`
[12:45:17] *** Joins: mbuf (~Shakthi@122.174.246.23)
[12:45:23] <dminuoso> Does ghcup require manual installation of its dependencies beforehand?
[12:45:38] <dminuoso> Shouldn't it take care of that? (I really dont know, Im not a ghcup regular user)
[12:45:39] <jackdk> [exa]: oh noooooo
[12:46:03] <jackdk> dminuoso: depends on how you installed it, I would've through the installer script would do that
[12:46:30] <jackdk> (I also do not use it that much, having shed physical form and ascended to the nix plane)
[12:46:46] <merijn> dminuoso: Because it wasn't designed for browsers. There was an API designed, without a frontend and the frontend is mostly hacked on "as needed"
[12:47:46] <dminuoso> merijn: Okay that explains a few things
[12:49:14] *** Joins: nishant (~Nishant@49.37.242.151)
[12:49:17] <merijn> dminuoso: So for awhile you would just sent manual REST requests to it for stuff like deleting candidates until someone hacked in a minimum viable webpage with a button
[12:49:27] *** Quits: nishant (~Nishant@49.37.242.151) (Remote host closed the connection)
[12:49:58] *** Joins: nishant (~Nishant@49.37.242.151)
[12:50:22] *** Joins: lavaman (~lavaman@98.38.249.169)
[12:53:37] <geekosaur> re ghcuup deps, it's impossible to keep up with naming in different distros
[12:54:34] *** Joins: ccntrq (~Thunderbi@2a01:c22:89c9:4f00:38e1:ceae:1fb6:a685)
[12:59:39] *** Joins: Major_Biscuit (~MajorBisc@c-001-021-050.client.tudelft.eduvpn.nl)
[13:01:00] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 240 seconds)
[13:02:10] <tomsmeding> I think the ghcup installer tries to print a list of required package names, but needs you to install them manually still
[13:10:47] <geekosaur> yes
[13:11:21] <geekosaur> and the list is only for the largest distros (I think debian-based,fedora-based, arch-based, otherwise you're on your own last I checked?)
[13:11:38] <maerwald> dminuoso: no
[13:11:50] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 250 seconds)
[13:12:00] <maerwald> invoking sudo, apt-get or any package manager is a declared non-goal
[13:12:20] *** Joins: jonathanx (~jonathan@c-5eea3758-74736162.cust.telenor.se)
[13:13:42] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[13:13:47] <maerwald> `ghcup tool-requirements` can be of some help
[13:15:50] <geekosaur> ghcup aims to be installed by ordinary users,very few systems allow package managers to be run directly by an ordinary user (which is a good thing)
[13:16:36] <merijn> geekosaur: Hard disagree
[13:16:59] <merijn> The fact that linux package managers don't by default support user-specific installs is a terrible misfeature
[13:17:19] <maerwald> they do, but no one uses those
[13:17:31] <merijn> "let's make sure that on our multi-user OS only the admin can actually install stuff! Yeah!"
[13:17:32] <geekosaur> user-*specific* is a much more complicated design than what I'm talking about
[13:17:49] <maerwald> most package managers allow to define chroot targets
[13:17:55] *** Quits: lumberjack13 (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[13:17:57] <geekosaur> it's also largely obsolete these days
[13:18:08] <merijn> maerwald: Only with *a lot* of effort
[13:18:14] <dminuoso> merijn: Makes perfect sense. Thanks
[13:18:17] <dminuoso> Err maerwald!
[13:18:39] <maerwald> XDG spec is not usable for package managers
[13:18:46] *** Quits: jonathanx (~jonathan@c-5eea3758-74736162.cust.telenor.se) (Ping timeout: 250 seconds)
[13:18:54] <maerwald> so it has to be a proper chroot
[13:19:27] <[exa]> kinda wondering how many of the computers in question are actually multiuser
[13:19:31] <merijn> Creating a "proper chroot" is a nightmare task as unprivileged user, though
[13:19:46] <maerwald> merijn: please ask your system administrator xD
[13:19:54] <geekosaur> I'm sorry,but to me this sounds like docker all over again
[13:20:01] <merijn> [exa]: All university clusters, where you most need user installs, because everything is 15 years old
[13:20:04] <tomsmeding> [exa]: I think if a user has no permissions to install system packages, it's likely to be an actual multi-user system
[13:20:18] <merijn> tomsmeding++
[13:20:51] <maerwald> tomsmeding: well... if you don't want users to install system packages, do you want them to be able to install arbitrary toolchains and install binaries?
[13:20:55] <maerwald> I don't think so
[13:21:14] <tomsmeding> well then you can usually only mess up your own user environment
[13:21:16] <maerwald> but that's not my problem :p
[13:21:18] <[exa]> tomsmeding: no like, if the user may just sudo, it's technically single user, there's just a tiny bit of user presence check
[13:21:18] <merijn> maerwald: I mean, that's exactly what people do on university clusters and supercomputers
[13:21:19] <tomsmeding> which is generally the whole point of that permission system
[13:21:28] <[exa]> merijn: valid but these provide at least LMod or something
[13:21:28] <maerwald> merijn: yeah, I consider those misconfigured
[13:21:39] <tomsmeding> [exa]: yes and we're taling about the systems where a user may _not_ just sudo, e.g. university systems
[13:21:40] <merijn> maerwald: They'd be useless in any other configuration
[13:21:57] <merijn> maerwald: wtf use is a cluster machine where you can't install the stuff you need??
[13:22:04] <maerwald> either they should disallow installing any binary or allow installing of system packages in a way that doesn't persist re-login or switching users
[13:22:22] <maerwald> anything in between makes no sense
[13:22:36] <[exa]> tomsmeding: ah so okay
[13:22:40] <tomsmeding> maerwald: "system package that doesn't persist switching users", i.e. user-local packages? :p
[13:22:43] <merijn> maerwald: And you think any admin can setup the latter satisfactory?
[13:22:51] <maerwald> tomsmeding: that can be achieved in a number of ways
[13:22:56] <merijn> tomsmeding: Get outta here with your logic!
[13:22:59] <maerwald> merijn: xD
[13:23:24] <dminuoso> maerwald: It would be nice if ghcup had some basic probing of used binaries. Something along the lines of "Missing `make`. Please install this yourself`
[13:23:25] <maerwald> they might not actually reside in $HOME
[13:23:31] <dminuoso> Would you be opposed of something along these lines?
[13:23:41] <maerwald> dminuoso: that's what the GHC configure script does, basically
[13:23:45] <maerwald> it checks your toolchain
[13:23:48] <dminuoso> [ ghc-make ] ghcup: make: executeFile: does not exist (No such file or directory)
[13:24:07] <[exa]> we had this once tbh
[13:24:08] <maerwald> that would be a bug in the configure script then
[13:24:35] <[exa]> Checking for make presence... no
[13:26:26] <maerwald> dminuoso: https://gitlab.haskell.org/ghc/ghc/-/blob/master/distrib/configure.ac.in
[13:26:47] <[exa]> kinda realizing that all custom packages I've got on the hpc here are autotools and I didn't even notice because all just worked. including the binary distribution of ghc lol
[13:28:02] *** Joins: nunggu (~q@user/nunggu)
[13:29:25] <dminuoso> My autotools-fu is practically non-existent.
[13:29:38] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:2015:9361:6306:3ac4)
[13:29:41] <dminuoso> Im sure there's still a few greybearded GNU wizards that can understand .ac.in files
[13:29:50] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[13:30:12] *** Joins: lumberjack13 (~alMalsamo@gateway/tor-sasl/almalsamo)
[13:31:01] *** Quits: nexus_ (~nexus@84-236-55-113.pool.digikabel.hu) (Ping timeout: 240 seconds)
[13:32:51] *** Joins: kenran (~kenran@ip-037-024-119-190.um08.pools.vodafone-ip.de)
[13:32:54] *** Joins: nexus_ (~nexus@178-164-207-227.pool.digikabel.hu)
[13:33:46] *** Joins: jinsun (~jinsun@user/jinsun)
[13:33:52] <[exa]> nah, it's not that bad
[13:34:08] <maerwald> https://gitlab.haskell.org/ghc/ghc/-/issues/21232
[13:36:23] <dminuoso> Ah interesting, Ill have to check why I couldnt find that issue
[13:37:04] *** Quits: yauhsien (~yauhsien@61-231-44-111.dynamic-ip.hinet.net) (Remote host closed the connection)
[13:38:09] <maerwald> because I just opened it
[13:38:26] <dminuoso> Oh hah
[13:38:39] <dminuoso> I totally read that "Created 2 minutes ago" as "Created 2 years ago"
[13:39:13] *** Joins: lavaman (~lavaman@98.38.249.169)
[13:39:21] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:6945:2980:3f53:dff8)
[13:39:49] * geekosaur is pretty good at .ac.in files actually
[13:39:56] <geekosaur> been doing it for long enough
[13:40:52] <maerwald> I know autotools as well, but I'm not too keen about digging into it and debugging 15k LOC generated shell mess :p
[13:41:09] *** Joins: jonathanx (~jonathan@c-5eea3758-74736162.cust.telenor.se)
[13:41:23] *** Joins: chele_ (~chele@user/chele)
[13:41:55] <maerwald> autotools is the reason for broken network package on windows too
[13:42:04] <maerwald> it's an abomination
[13:42:07] *** Quits: jonathanx (~jonathan@c-5eea3758-74736162.cust.telenor.se) (Remote host closed the connection)
[13:42:18] <geekosaur> vi m4 even
[13:42:31] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:6945:2980:3f53:dff8) (Remote host closed the connection)
[13:42:37] <geekosaur> *via
[13:43:48] *** Quits: chele (~chele@user/chele) (Ping timeout: 252 seconds)
[13:45:49] *** Joins: jonathanx (~jonathan@c-5eea3758-74736162.cust.telenor.se)
[13:46:12] *** Joins: Guest14 (~Guest14@185.249.168.124)
[13:46:37] <dminuoso> geekosaur: So I genuinely think that it's mostly older folks who come from that time that potentially have autotools experience. The younger generations don't even know how to build software anymore, they hand you a snapshot of an entire filesystem instead.
[13:47:06] <geekosaur> yeh. I made a docker comment earlier
[13:47:07] <dminuoso> Not that autotools is a pleasent experience, my previous remark was a bit of a hyperbole, but they are a tried mechanism of somewhat portably building software
[13:47:07] <maerwald> the only thing good about older times is that manpages and HTML documentations were actually useful
[13:47:28] <maerwald> now you just have blog posts and broken readmes
[13:47:51] <dminuoso> maerwald: Back then mostly stable APIs was a thing as well
[13:47:55] <maerwald> yes
[13:48:11] *** Quits: rond_ (~rond_@90.254.208.190) (Quit: Client closed)
[13:48:17] <maerwald> I keep arguing that PVP doesn't help with this, but I think no one understands what I mean
[13:48:48] <dminuoso> I guess PVP/semver is a symptom rather than a solution. The fact that we have to establish these rules in the first place happens because breaking APIs is a common practice.
[13:49:33] <dminuoso> Its a similar story with wayland
[13:49:36] <maerwald> I think it's hard to distinguish cause and effect. Because the early go ecosystem had very bad tooling wrt semver etc and you mostly just encountered stable APIs
[13:49:58] <dminuoso> You can critize X all you want, but it *is* completely standardized. Wayland is just a quickly moving mess
[13:50:14] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[13:50:14] <dminuoso> Whether your wayland app will work 6 months from now, nobody can say
[13:50:37] <maerwald> and because there was no good tooling to break API, people would publish new packages if they make backwards incompatible changes
[13:50:38] *** Joins: InstX1_ (~Liam@2601:6c4:4080:3f80:94f:38ab:47e0:127c)
[13:50:57] <maerwald> and that leads to thinking longer about your changes
[13:51:16] *** Quits: jonathanx (~jonathan@c-5eea3758-74736162.cust.telenor.se) (Read error: Connection reset by peer)
[13:51:32] <maerwald> now, you just bump PVP and ignore the angry users on your github issue tracker
[13:51:34] *** Joins: jonathanx (~jonathan@c-5eea3758-74736162.cust.telenor.se)
[13:52:20] *** Joins: Evan_ (~Evan@185.249.168.124)
[13:52:50] <dminuoso> Perhaps the main issue is that software development has been commercialized and managed to death. If management forces you to push software as fast as possible, and keep development cycles as short as possible, you quickly arrive at the fact that carefully designing things (takes time) and adhering to stable APIs (limits future features).
[13:52:55] <maerwald> Shame is actually a good driver for quality. E.g. bad releases used to be shameful. Now that everything is rolling, you just fix bugs quickly and make yet another release.
[13:53:02] <dminuoso> This trains an entire generation of software developers to work in that mind model
[13:53:38] <dminuoso> Much of old linux was not products of industrial work, but people doing this in their spare time. Things like API stability was just noble intent
[13:53:48] *** Quits: InstX1 (~Liam@2601:6c4:4080:3f80:c5d8:5b17:fec2:5fb2) (Ping timeout: 240 seconds)
[13:54:05] <dminuoso> Oh the previous remark was incomplete
[13:54:25] <dminuoso> ... you quickly arrive at the fact that carefully designing things (takes time) and adhering to stable APIs (limits future features) is incompatible and too expensive.
[13:54:32] <dminuoso> Ship now, worry about breaking later.
[13:55:07] *** Quits: Evan_ (~Evan@185.249.168.124) (Client Quit)
[13:55:26] <dminuoso> Amusingly, go folks work around this problem by pinning dependencies onto github references with commit hashes. Sticking to a particular commit is definitely stable.
[13:55:52] <dminuoso> (In some sense this is what nix ends up doing as well, but at least there exists workflows of easily updating said dependencies)
[13:55:54] <maerwald> The problem is that there are actually real studies out there proving that releasing often improves product quality. I've talked to a researcher who was part of this. There is some truth to it, apparently, but... it's a much more complicated topic to unpack.
[13:56:44] *** Quits: Guest14 (~Guest14@185.249.168.124) (Quit: Client closed)
[13:57:04] <dminuoso> Sure, from a business perspective there may be valid perspectives. Perhaps API stability is just a victim of capitalism in software development.
[13:57:29] <maerwald> Yes, I doubt that the main products they were considering were libraries or stdlibs.
[13:57:47] <maerwald> or kernel userpsace
[13:57:48] <kritzefitz> Releasing often doesn't necessarily imply breaking the API often.
[13:57:58] <maerwald> kritzefitz: exactly
[13:58:11] <merijn> maerwald: Joke's on you, I ignore angry users anyway! :D
[13:58:34] <dminuoso> kritzefitz: There is a direct correlation though. Releasing often makes it much harder to ship long overhauls. Or equivalently, if you need to ship a feature now, you also need to ship dependend APIs wit hit.
[13:58:35] *** Quits: eggplant_ (~Eggplanta@2600:1700:bef1:5e10:fcf5:76ff:669c:b084) (Remote host closed the connection)
[13:58:44] <merijn> "you broke our stuff!" 'oh, well, that sounds inconvenient for you...'
[13:58:48] <dminuoso> That might mean you might ship an incomplete or poorly designed API
[13:59:10] <dminuoso> Releasing often definitely promotes unstable APIs
[13:59:24] <dminuoso> Designing stable APIs with long foresight is hard.
[13:59:24] <merijn> maerwald: Your problem isn't with the PVP, your problem is with people not committing to longterm stability
[13:59:41] <merijn> And most people won't commit to that, PVP or no
[13:59:46] <dminuoso> merijn: Well, perhaps PVP should be tracked in cabal packages.
[13:59:49] <maerwald> merijn: well, PVP promotes unstable APIs as well, although you can use PVP differently
[13:59:53] *** Quits: aplainze1akind (~johndoe@captainludd.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[13:59:55] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[13:59:59] <dminuoso> In the sense that you mark a package as "respectsPVP"
[14:00:11] <kritzefitz> But does taking a long time to design an API really result in a good API? I don't know the actual history, but I bet PAM took a long time to design the API. Nowadays its API is rock solid, but basically good for nothing except UNIX authentication.
[14:00:14] <merijn> maerwald: Which is fine, because in reality, basically all open source APIs *are* unstable
[14:00:23] <maerwald> and the other thing is... no one really backports bugfixes to older PVP releases
[14:00:27] <kritzefitz> I.e. it completely failed at the design goal to become a general authentication framework.
[14:00:44] <maerwald> merijn: well, moreso in Haskell, because of the type system
[14:01:02] <maerwald> I mean, I can't imagine how servant would not break PVP regularly
[14:01:05] <dminuoso> kritzefitz: That argument doesnt quite follow. Im not saying that spending a lot of time leads to good APIs.
[14:01:14] <dminuoso> But spending *little* time likely leads to worse APIs.
[14:01:25] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 250 seconds)
[14:01:28] <dminuoso> Allowing yourself to spend more at least gives you better potential for a good API
[14:01:51] <merijn> maerwald: "nobody backports bugfixes" <- oh, I'm sorry, was I unclear when I licensed my code "as is"? :D
[14:01:56] <dminuoso> Of course we get into management debates now when to recognize that the API is in a good shape, and how to avoid overspending time on it
[14:02:38] <kritzefitz> Ok, yeah. Spending little time on an API probably won't improve it.
[14:03:13] <maerwald> merijn: you should treat the authors of the libraries you use like your enemies: know them well, eat and dine with them, know where they live :p
[14:03:17] <merijn> maerwald: A lot of your critique boils down to "I want people to commit to long-term stable APIs and long-term support of it". Which just will never happen in an open source context, unless you pay for it
[14:03:33] *** Joins: shriekingnoise (~shrieking@201.231.16.156)
[14:03:41] <dminuoso> merijn: Never is a bit too strong, it does happen in open source context.
[14:03:45] <maerwald> merijn: I disagree with that
[14:03:51] <dminuoso> But there's usually no way to know whether the commitment has been done at all.
[14:03:54] <merijn> dminuoso: Mostly in cases where people get paid for it ;)
[14:04:03] <kritzefitz> But I think the actual thing that kills rigid-hard APIs such as PAM isn't their development time, but their rigidness. I don't think it's possible to design a good API without experience of how to use it, which you will necessarily only get in sufficient amounts once the API is done.
[14:04:05] <maerwald> I think it's more of a recent trend to not care, that's promoted by further tooling
[14:04:05] <dminuoso> Perhaps
[14:04:05] <merijn> maerwald: With what?
[14:04:07] <maerwald> an culture
[14:04:24] <maerwald> it wasn't always that way, when all you had is shitty C libraries
[14:04:30] <merijn> maerwald: I don't think so. It's just selection bias
[14:04:34] <kritzefitz> So I'd say practically you have the joist of incrementally improving your APIs and living with breaking changes or forever living with bad but stable APIs.
[14:04:44] <kritzefitz> * choice
[14:04:47] <merijn> maerwald: The only old stuff you remember/that is still around had long term commitment
[14:04:51] <dminuoso> kritzefitz: It's a complex topic, and depends on the subject. But if you start with a semantic model, and shape your API around that semantic model, usually that leads to great results.
[14:05:13] <maerwald> merijn: are you saying the only things that prevail are things that are stable?
[14:05:39] <dminuoso> kritzefitz: This is what X did for example. It's an API around designed semantics. Whether you like the semantics or not, not as long as the semantics allow you to model most windowing problems, its a great fit.
[14:05:51] <merijn> maerwald: Partially, sure
[14:05:55] <dminuoso> It's perhaps somewhat antiquated and has lots of design goals that dont quite fit nowadays problems anymore
[14:06:07] <merijn> maerwald: but "prevailing" is not always a goal when people release code
[14:06:12] <dminuoso> But it is standardized, rock stable, and has a semantic model. You dont need to fear breaking changes. :)
[14:06:20] <maerwald> merijn: what does that tell us about Haskell prevailing? xD
[14:06:47] <maerwald> people think the only way for Haskell to prevail is keep feeding the researchers and their motivation
[14:06:47] <merijn> maerwald: I mean, python is still around
[14:06:53] <kritzefitz> dminuoso: I don't think you can just brush away changing design goals as something you can ignore. The world keeps changing and lots of software that needs to deal with the world needs to follow it.
[14:07:02] <merijn> maerwald: I don't think anybody thinks that
[14:07:09] <maerwald> merijn: many people I talked to think that
[14:07:22] <merijn> maerwald: but most development is being done by 1) academic and 2) well-typed, so those *effectively* control what happens
[14:07:22] *** Joins: InstX1 (~Liam@2601:6c4:4080:3f80:501d:140:cf41:aa43)
[14:07:41] <dminuoso> kritzefitz: Dunno, so Im going to make a claim here. Agile development frequently leads to fragile software.
[14:07:48] <dminuoso> Makes sense since `agile` is in the word `fragile`
[14:07:56] <merijn> maerwald: Well, unless you come up with a way to replace (or outperform) the academic contribution to GHC, they will have a lot of control over where GHC goes
[14:08:16] *** Joins: coot (~coot@213.134.190.95)
[14:08:21] <maerwald> I think competition to GHC would be great
[14:08:25] <dminuoso> kritzefitz: One of the big negative consequences of accepting "regular changes" is that it "regularly changes your product"
[14:08:43] <merijn> maerwald: Sure. But it doesn't exist, for the same reason academics largely shape GHCs development
[14:08:44] <dminuoso> And it leads to spending less time beforehand about what it is you're building
[14:08:49] <merijn> maerwald: Because no one wants to pay for it
[14:08:52] <dminuoso> As in "build now, lets see whether this is what we want later"
[14:08:55] <kritzefitz> dminuoso: Ok, I don't want to argue against that claim. But I also want to make the claim that agile software meets the requirements of its users.
[14:09:02] <dminuoso> Agile development is inherently incompatible with stable APIs.
[14:09:06] <geekosaur> does it?
[14:09:12] <maerwald> merijn: I can employ a compiler engineer for 3 months before I'm broke... will that be enough?
[14:09:20] <dminuoso> kritzefitz: agile software meets the *changing* requirements of its users.
[14:09:24] *** Quits: InstX1_ (~Liam@2601:6c4:4080:3f80:94f:38ab:47e0:127c) (Ping timeout: 240 seconds)
[14:09:28] <merijn> maerwald: No. Which is why GHC isn't going to be what you want anytime soon :)
[14:10:14] <kritzefitz> dminuoso: I don't know a case where someone knew their requirements well enough to cast into unchangeable software before the software was done.
[14:10:31] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[14:11:04] <kritzefitz> But I don't even want to say that adaptability always trumps stability. It seems more like a dilemma to me. How can we have software that is both stable and adaptable?
[14:11:33] <dminuoso> kritzefitz: Well in GHC Haskell we have that situation. It's mostly stable, and we accept that we have shitty parts in the language. Of course we could get rid of `Read` and replace most String with Text. The breakage would be insane.
[14:12:06] <dminuoso> Its not necessarily about predicting the ideal requirements, but sometimes its okay to say "We would like to change the requirements, but that has a cost"
[14:12:31] <maerwald> dminuoso: good news, we're going to get rid of FilePath at some point :D 
[14:12:57] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[14:13:01] <maerwald> like, in 20 years
[14:13:30] <dminuoso> Calendar entry done!
[14:13:46] <dminuoso> If its not there by then, I demand to be paid 10 cookies in damages
[14:14:36] <maerwald> feel free to help reviewing: https://github.com/haskell/filepath/pull/103
[14:14:52] <dminuoso> kritzefitz: And arguably, the linux kernel is a more prominent example. It has *extremely* poor APIs to the point where you think "couldn't you have spend 10 minutes to think about this insanity?" or "who the heck ever agreed to merge this"
[14:14:54] <dminuoso> But its stable.
[14:15:29] <dminuoso> Linux Kernel API is so stable, you can expect ioctl to still exist unchanged 30 years from now.
[14:15:38] <kritzefitz> dminuoso: Yes, changing requirements has a cost, just a depending on unstable software has a cost. So we have tools to reduce either of those costs. The dilemma seem to be unable to reduce both at the same time under a certain level.
[14:15:40] <dminuoso> Despite being the the worst API to have ever entered the kernel
[14:16:52] <maerwald> The main thing I remember about agile is an engineer working for german railway company and telling me in private they've considered leaking information to journalists about the state of the project. xD
[14:16:55] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 256 seconds)
[14:17:56] <dminuoso> And bizarrely I would prefer a bad but stable API over a good but unstable API.
[14:18:14] <dminuoso> Of course a stable good API is ideal, but those are hard to come by
[14:18:15] *** Quits: lumberjack13 (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[14:18:39] <maerwald> Doing bad work in software doesn't have enough legal implications.
[14:18:53] <dminuoso> Yes. There should be liability for software
[14:19:15] <dminuoso> I recommend reintroducing flogging.
[14:19:24] <dminuoso> Breaking PVP gives you 10 lashes.
[14:19:54] <maerwald> lol
[14:20:38] <Hecate> nice, I should do that more often
[14:20:55] <maerwald> ewww xD
[14:21:29] <kritzefitz> Yes, haham I get that it's hyperbole, but seriously? People put up stuff that they made in their free time for free and you want to shame them for doing it in a way they like?
[14:22:54] *** Joins: mreh (~matthew@host86-172-33-212.range86-172.btcentralplus.com)
[14:23:16] <dminuoso> The liability part is not a joke.
[14:23:40] <dminuoso> Ask maerwald about liability in construction, for example with concrete
[14:23:44] <geekosaur> it'll be gamed
[14:24:04] *** Joins: jonathanx_ (~jonathan@dyn-2-sc.cdg.chalmers.se)
[14:24:06] *** Quits: ccntrq (~Thunderbi@2a01:c22:89c9:4f00:38e1:ceae:1fb6:a685) (Remote host closed the connection)
[14:24:10] <kritzefitz> Yes, that's what I'm concerned about. That it's not a joke. If I was liable for software I make for free in my free time, I would stop doing software in my free time. Period.
[14:24:12] *** Joins: gensyst (gensyst@user/gensyst)
[14:24:19] <maerwald> I think  it starts at C30 or C35
[14:24:22] <dminuoso> I dont have a specific recommendation how liability would even work given how distant the author of a library and a resulting product using that library is
[14:24:24] *** Joins: ccntrq (~Thunderbi@2a01:c22:89c9:4f00:38e1:ceae:1fb6:a685)
[14:24:49] <dminuoso> kritzefitz: Okay asked differently"
[14:25:15] <gensyst> My friends, can you help me decipher this time profile? https://paste.centos.org/view/d68cb444 Why is "otherFunc" directly below "someFunc" but with very low percentage figures?
[14:25:23] <dminuoso> I build a plane and that plane runs on casual usual npm hosted software. 
[14:25:27] <maerwald> your software misbehaves and has no tests? => jail
[14:25:29] <gensyst> Is otherFunc an *actual* bottleneck or am I being fooled?
[14:25:41] <dminuoso> kritzefitz: Would you be opposed to that? Have any worries?
[14:26:00] <dminuoso> Who would be responsile if the plane crashes and *why*?
[14:26:01] <mreh> is there a way to express this type relationship? F (AppendSymbol "[]" s) = [F s]
[14:26:11] <dminuoso> kritzefitz: All I ask for is due diligence
[14:26:12] <gensyst> (Also, I even tried refactoring all calls to otherFunc into a separate intermediateFunc, but why does this not cause intermediateFunc to even show up in my profiler?)
[14:26:17] *** Quits: jonathanx (~jonathan@c-5eea3758-74736162.cust.telenor.se) (Ping timeout: 240 seconds)
[14:26:22] <maerwald> dminuoso: tbf... a plane probably *could* run random npm software, given all the redundancy tricks in their architecture :p
[14:26:22] <kritzefitz> dminuoso: Of course I don't want that. But the people building a plane usually don't do it for free.
[14:26:53] <dminuoso> kritzefitz: that due diligence would include, but not be limited to, having tests, automated build processes, have a documented procedure and time table to respond to bug reports.
[14:26:55] <maerwald> I really don't buy this argument that money is what makes the main difference
[14:27:04] <maerwald> I don't apply half of my standards when working for money
[14:27:20] <maerwald> Because the customer/employer wouldn't even want that
[14:27:36] <dminuoso> kritzefitz: If I build electrical tools in my free time, there's tons of regulartions for that as well
[14:27:40] <dminuoso> Why should software be any different?
[14:27:50] <dminuoso> If that software has the potential to cause damages
[14:28:16] <maerwald> if you build a skyscraper for free, because you're a millionare, no one cares... it has to follow law regulations
[14:28:19] <dminuoso> Arguably software can have far wider reaching consequences due to how uniquitious it is
[14:28:49] <dminuoso> A poor wiring in an electric drill can only harm the user. A bug in a software plane can cause hundreds of deaths
[14:29:05] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[14:29:28] <dminuoso> Laws tend to regulate the producer, not the consumer part.
[14:29:29] <tomsmeding> but only because someone who actually works on the plane decided it was a good idea to use that npm package
[14:29:31] <dminuoso> Why would software be any different?
[14:30:04] <tomsmeding> mreh: is F a type family?
[14:30:22] <kritzefitz> I don't think you should put the blame for the crashing plane on the person who wrote the software, but on the people who put the software on a plane without making sure it's demonstratably up to the task.
[14:30:40] <dminuoso> mreh: Mmm I think you have to employ defunctionalization tricks
[14:30:41] <tomsmeding> what I said but then more eloquently
[14:31:02] <maerwald> kritzefitz: that depends. Liability in automotive industry depends on whether you followed the *process*.
[14:31:15] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[14:31:23] <maerwald> The process can described what kind of testing you need to do, how often in the product development, etc
[14:31:31] <maerwald> it doesn't describe the quality of the software itself
[14:31:42] <dminuoso> kritzefitz: as long as you follow due diligence with your software, you would be free of liability of damages resulting from it.
[14:31:49] <dminuoso> for example:
[14:32:22] <dminuoso> say someone reports a security bug to your software, and you have no response whatsoever to that, and as a result someone else takes damage, I think you should be liable to some degree
[14:33:03] <tomsmeding> if you somehow indicate with your software that it's ready to be used by others
[14:33:27] <tomsmeding> if it's some random repo on github with no real documentation, then the liability should IMO be with the person who decided to use that in a product
[14:34:40] <gensyst> BSD license fixes this in my end afaik
[14:34:45] <maerwald> yeah, I think no one is suggesting that you're liable for the *actual* quality of your product
[14:35:02] <maerwald> that's impossible to enforce and not reasonable
[14:35:48] <maerwald> but you have to demonstrate intent
[14:36:05] <kritzefitz> dminuoso: Yes, basically what tomsmeding said. I often am in a situation where I wouldn't be able to respond to a security problem in software I write. So should I keep all software I write for recreation secret, so no one might accidentally use it in their plane without checking it?
[14:36:09] <tomsmeding> "in no event shall the authors or copyright holders be liable for any claim, damages or other liability, whether in an action of contract, tort or otherwise, arising from, out of or in connection with the software or the use or other dealings in the software." -- mit license
[14:36:46] <tomsmeding> so at least currently, there's no liability
[14:37:18] <merijn> People *selling* devices that include software should be liable for the software.
[14:37:32] <dminuoso> merijn: This already exists in Germany at least.
[14:37:36] <tomsmeding> or actively marketing it as suitable for a purpose
[14:37:38] <dminuoso> At least partially
[14:37:48] <merijn> like, if you're Apple, you're liable for software blowing up the phone/exposing people's private info, the same way you're liable for the battery blowing up
[14:37:53] <dminuoso> Not complete liability, but at least obligations to provide security updates for 2 years.
[14:37:54] <kritzefitz> And this is why I think money helps with this problem. If I get paid for something it enables me to reliably make time for it in my day to day live.
[14:37:59] <dminuoso> which is a good first step at least
[14:38:03] <merijn> if you're tesla and your software crashes cars? liable
[14:38:42] <merijn> kritzefitz: Well, that circles back to my initial "aggressively no support" standpoint on open source ;)
[14:39:07] <maerwald> I think money here is really irrelevant
[14:39:15] <merijn> Open source as a "community effort" is great. People being merely consumers using open source, then demanding stuff...not fine
[14:39:54] <maerwald> I'd argue anyone publishing their software on github are *actively adverstising* its use
[14:40:11] <tomsmeding> maerwald: https://github.com/tomsmeding/tomjson/
[14:40:15] <merijn> maerwald: I disagree, the money is very relevant. If nobodies paying, I'm gonna do whatever the hell I want and provide the exact amount of support I want (which should be assumed to be zero)
[14:40:17] <kritzefitz> I think you're musing GitHub then.
[14:40:19] <merijn> maerwald: Hard disagree
[14:40:38] <maerwald> I have my own private gitea server
[14:40:38] <merijn> maerwald: I put my code on github because "someone might find it instructive or useful"
[14:40:40] <kritzefitz> *misusing
[14:40:44] <maerwald> if you pull from there, joke is on you
[14:40:54] * geekosaur certainly hopes nobody else is trying to use his dotfiles that he put on github for multi-machine convenience
[14:41:04] <geekosaur> and that, yes
[14:41:18] <mreh> is this discussion OT?
[14:41:24] <maerwald> I just want to get merijn into jail xD
[14:41:40] <merijn> If you find my stuff on github useful, great! If you don't, well, eh, sucks to be you
[14:41:43] <geekosaur> mreh, not really since it goes back to the question as applied to ghc
[14:42:13] <merijn> Also, I think any discussion on programming practices/engineering are fairly on topic
[14:42:15] <geekosaur> and software on hackage
[14:42:41] * geekosaur would have said something by now if it were off topic
[14:46:27] <kuribas> maerwald: yeah right, as if anyone ever looks at your github repos.
[14:50:08] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[14:50:51] *** Joins: o-90 (~o-90@gateway/tor-sasl/o-90)
[14:52:50] <maerwald[m]> kuribas: xD
[14:53:53] *** Quits: o-90 (~o-90@gateway/tor-sasl/o-90) (Remote host closed the connection)
[14:54:19] <maerwald[m]> We could fix it locally and add a liability clause to hackage :p
[14:55:21] <maerwald[m]> Hackage trustees hire a lawyer and we're good to go
[14:55:46] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[14:55:46] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[14:55:46] *** finn_elija is now known as FinnElija
[14:55:56] <kritzefitz> maerwald[m]: I mean... we could. But I think effectively that would mean that most packages would have to vanish from hackage. I'm not sure that's what you want.
[14:56:51] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:2015:9361:6306:3ac4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:57:59] <maerwald[m]> Maybe I do xD
[14:59:19] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:a016:c70b:1497:f71c)
[14:59:45] *** Joins: lavaman (~lavaman@98.38.249.169)
[15:00:43] <maerwald[m]> I'm pretty sure uncle bob doesn't have high reputation here, but he made a good point once saying "if we don't come up with some rules ourselves, someone else will". And the latter might be worse for us
[15:00:56] *** Quits: gensyst (gensyst@user/gensyst) (Quit: Leaving)
[15:01:01] <tomsmeding> we'd go back to the early days of open source, where stuff is shared between people instead of dumped on a public server first thing
[15:01:04] <mreh> I thought OT meant "on topic", I was assuming good faith :)
[15:01:21] <tomsmeding> same starting letters :p
[15:02:43] <tomsmeding> for sure github would need less disk space in that universe
[15:02:48] <mreh> tomsmeding: yeah, it is a type family
[15:03:24] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:a016:c70b:1497:f71c) (Ping timeout: 240 seconds)
[15:03:40] <[exa]> tomsmeding: hey wanna send me tapes with your haskell :D
[15:03:47] <tomsmeding> :p
[15:04:00] <mreh> just wondering if I can do some boilerplate reduction for the defnitions for polymorphic types
[15:04:20] <tomsmeding> mreh: is this what you're looking for? https://hackage.haskell.org/package/symbols-0.3.0.0/docs/Data-Symbol-Ascii.html
[15:04:23] <kritzefitz> I mean, I wouldn't even be opposed to something like “Hackage Premium” existing, where uploads imply Liability. I just don't think there would be much on it.
[15:04:37] <tomsmeding> there would be almost nothing on it
[15:05:03] <tomsmeding> perhaps only the nasa Copilot stuff
[15:05:12] <mreh> tomsmeding: maybe, looks like you could do some type level parsing of Symbols with this
[15:05:24] <tomsmeding> mreh: yeah that's the idea
[15:05:29] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:2015:9361:6306:3ac4)
[15:05:37] <mreh> I just wanted a simple interface for a caching API and now I'm going down a rabbit hole
[15:05:52] <tomsmeding> also: https://gitlab.haskell.org/ghc/ghc/-/issues/11342
[15:06:58] <mreh> Is there a way to turn a type into a string other than a symbol?
[15:07:16] <maerwald[m]> tomsmeding: I could imagine that having your projects on that platform would quickly become a sign for employers to hire for those devs. Balls of steel and work ethics ^^
[15:07:18] <mreh> a type other than a symbol into a string, rather
[15:08:06] *** Joins: Hemmo (~Hemmo@85-76-79-140-nat.elisa-mobile.fi)
[15:08:23] <Hemmo> Hello! This the proper place to ask newbie haskell questions?
[15:08:37] <[exa]> Hemmo: yes
[15:09:03] <mreh> > show (Proxy :: Proxy Int)
[15:09:05] <lambdabot>  "Proxy"
[15:09:12] <mreh> :|
[15:10:33] <Hemmo> So I have a function that ought to return a "substring" of string 1 and 2 like this -> commonSubstring "XabcdefgY" "abcdefgXY"
[15:10:33] <Hemmo>  = "XY"
[15:11:06] *** Joins: rond_ (~rond_@90.254.208.190)
[15:11:10] <[exa]> Hemmo: why wouldn't it return "abcdefg" instead? (it looks like a better substring to me)
[15:11:15] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 252 seconds)
[15:11:34] <mreh> sounds like homework :P
[15:11:37] *** Joins: jgeerds (~jgeerds@55d4548e.access.ecotel.net)
[15:11:41] <Hemmo> Because this is one of my course exercises! It's a substring which isn't actually one
[15:11:47] <Hemmo> It is ! and I am not asking for answers!
[15:11:52] <Hemmo> I'm just absolutely stumped lol
[15:11:53] <[exa]> ok good :]
[15:11:56] <Hemmo> I'm trying to figure out
[15:11:57] <Hemmo> how to ask this
[15:12:16] <mreh> where are you studying?
[15:13:02] <Hemmo> I'm in Finland
[15:13:26] <Hemmo> And this is sort of a self-study course. There's nothing besides three lectures and a some problem sets
[15:13:31] <mreh> I'm just curious where they're teaching Haskell
[15:13:48] <Hemmo> Yeah this was an optional course for me
[15:13:52] <[exa]> mreh: btw this is probably a bit overkill-ish but at this point you might want to check how Servant does this, they certainly have a way to render the types in the API docs, somehow
[15:14:09] <Hemmo> Seemed interesting and possibly useful at some point ;D
[15:14:21] <mreh> [exa]: Servant can create docs?
[15:14:32] <tomsmeding> mreh: you're not secretly looking for Typeable, are you?
[15:14:49] <[exa]> mreh: many unis have dedicated haskell courses, even surpassing the usual "lets learn recursion lol" from 20 years ago
[15:14:52] <mreh> maybe?!
[15:15:19] <[exa]> yeah +1 for Typeable.
[15:15:23] <Hemmo> But back to my question. I can compare those strings in a "nested loop" kind of way, but I have no idea how to remove the characters I don't need anymore. This is what I have so far. commonSubstring s1 s2 = [x | x <- s1, y <- s2, x == y]
[15:15:38] <tomsmeding> > typeRep (Proxy @Int)
[15:15:39] <Hemmo> So I understand how that works, but
[15:15:39] <lambdabot>  <hint>:1:16: error: parse error on input ‘@’
[15:15:45] <tomsmeding> % typeRep (Proxy @Int)
[15:15:46] <yahb> tomsmeding: Int
[15:15:58] <Hemmo> "The function removes c and all the characters before it in both strings, puts c in the output string, and continues."
[15:16:25] <Hemmo> Any help with how to remove characters at a certain point and before in a string??
[15:17:23] <mreh> tomsmeding: nice
[15:17:34] <[exa]> Hemmo: your code finds all letters of all matching letter pairs between s1 and s2. You might like `dropWhile` or something like that
[15:17:35] <mreh> % typeRep (Proxy @[Int])
[15:17:35] <yahb> mreh: [Int]
[15:17:54] *** Joins: razetime (~quassel@117.193.4.244)
[15:18:04] <tomsmeding> mreh: essentially all monomorphic types have Typeable instances -- with emphasis on monomorphic
[15:18:05] <mreh> is that printing the TypeRep?
[15:18:10] <tomsmeding> % typeRep (Proxy @a)
[15:18:10] <yahb> tomsmeding: ; <interactive>:22:17: error: Not in scope: type variable `a'
[15:18:20] <tomsmeding> mreh: yeah just `show` on the TypeRep
[15:18:33] <mreh> print or show?
[15:18:39] <tomsmeding> :t print
[15:18:40] <lambdabot> Show a => a -> IO ()
[15:18:45] <tomsmeding> print calls show
[15:18:55] <mreh> yes, okay I'm with you
[15:19:18] <mreh> I can use `show` to get my String
[15:19:56] <mreh> I'm indexing the cache table by the type so values can be unserialised later
[15:20:26] <[exa]> Hemmo: if I get the task correctly, you take the first letter if s1, then either discard it and continue if it isn't in s2, or output it, discard the starting part of s2 up until that letter and and continue with the rest of s2, right?
[15:20:46] <mreh> :t putStrLn . show
[15:20:46] <lambdabot> Show a => a -> IO ()
[15:21:56] <Hemmo> That is correct exa! I'm currently looking into dropWhile. Seems promising.
[15:21:57] <[exa]> Hemmo: btw how do you get the `c` in your description?
[15:22:42] <Hemmo> c is just the common character 
[15:22:55] <Hemmo> The actual function def is commonSubstring :: String -> String -> String
[15:23:24] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[15:26:05] <mreh> do you always need a forall a. to bring a into scope when using ScopedTypeVariables?
[15:26:23] <[exa]> Hemmo: how do you find `c` though? you've got 2 strings and there are many possible common characters (or none)
[15:27:00] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[15:28:02] <Hemmo> Right now I'm trying to solve it with this: commonSubstring s1 s2 = [x | x <- s1, y <- s2, x == y], so it takes x into the list if x==y. This is what you asked?
[15:28:59] <Hemmo> My thinking right now is, if x == y, I must drop every character before the common one + the common one as well from S1 and S2
[15:29:06] <tomsmeding> mreh: yes
[15:29:13] <Hemmo> and then run through the function again
[15:29:35] <tomsmeding> mreh: well in an instance declaration, the variables appearing in the instance head are already in scope without an explicit forall
[15:30:39] <[exa]> Hemmo: ah so you basically take the first common character from s1 as `c`, yeah that could work
[15:30:40] <dminuoso> mreh: Mind you this is a quirky historical artifact. If Haskell was designed from scratch, it's conceivable that type variables were brought into scope for sub-bindings automatically.
[15:30:49] <dminuoso> Without an explicit forall.
[15:31:25] <dminuoso> The need for forall is just to maintain backwards compatibility (such that enabling the flag will not break code that previously compiled, e.g. `f :: a ...; f = .. where g :: a ...; g = ...`)
[15:32:44] <[exa]> Hemmo: otoh it might be much cleaner (and easier) to patternmatch a bit. You can for example say that `commonSubstring "" _ = ""`, and then examine the other case, `commonSubstring (c:s1) s2 = if c `elem` s1 then ???? else ????`
[15:33:08] <[exa]> (uh I meant: c `elem` s2)
[15:33:36] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[15:36:48] *** Joins: boborygmy_ (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[15:36:50] *** Joins: boborygmy (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[15:37:12] *** Quits: kenran (~kenran@ip-037-024-119-190.um08.pools.vodafone-ip.de) (Quit: WeeChat info:version)
[15:42:14] *** Quits: boborygmy (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Quit: Leaving)
[15:42:14] *** Quits: boborygmy_ (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Quit: Leaving)
[15:44:11] <mreh> pi types when?
[15:44:24] <mreh> :)
[15:44:43] <geekosaur> some would hope never
[15:47:03] <mreh> who are these people? /s
[15:48:39] <tomsmeding> the day of the Convergence
[15:49:10] <geekosaur> why do we need haskell to be a worse idris?
[15:49:20] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[15:49:45] <hpc> because not enough people use idris
[15:50:48] <mreh> is idris being used much in industry?
[15:51:10] *** Quits: acidjnk (~acidjnk@pd9e0b763.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[15:51:37] <hpc> no clue, but i am not using it so tautologically not enough people are using idris :D
[15:51:56] *** Joins: olle (~olle@c-8a89e455.034-536-6d6c6d4.bbcust.telenor.se)
[15:53:36] *** Quits: rtsn (~nstr@h-98-128-229-174.NA.cust.bahnhof.se) (Remote host closed the connection)
[15:54:33] *** Joins: lavaman (~lavaman@98.38.249.169)
[15:55:33] <mreh> I would like to be able to use Haskell for a living first. TypeScript is the best I can manage.
[15:55:45] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[15:55:45] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[15:57:03] *** Joins: zaquest (~notzaques@5.130.79.72)
[15:57:09] <maerwald[m]> geekosaur: ...
[15:58:58] <maerwald[m]> mreh: anything you use for a living loses its glamour 
[15:59:28] <mreh> true enough
[15:59:32] <maerwald[m]> The best strategy is to only code as a hobby and, I dunno, do something else for a living 
[15:59:32] <Hemmo> [exa]: commonSubstring (c:s1) s2 = if c `elem` s2
[15:59:32] <Hemmo>   then commonSubstring (dropWhile (/=c) s1) (dropWhile (/=c) s2)
[15:59:32] <Hemmo>   else ??
[15:59:47] <Hemmo> Do I need to create another string variable to save something to??
[15:59:55] <mreh> I have to get out the house for a bit, later
[16:00:13] <Hemmo> I don't know if I can return something without another variable?
[16:01:40] <olle> I'm trying to convert the tagless-final use-case to PHP
[16:01:56] <olle> Some notes here: https://old.reddit.com/r/PHP/comments/tdyf78/one_universal_dryrun_mockspy_ast_evaluator_to/
[16:02:20] <olle> Using a builder pattern, or expression builder, to generate an AST, and then you can inject different AST evaluators into the builder.
[16:03:27] <[exa]> Hemmo: you don't need to drop stuff from s1, also you forgot to push the 'c' to the output
[16:04:27] <[exa]> (returning something like this is a common pattern: `c:(commonSubstring ...)` )
[16:04:36] *** Quits: nexus_ (~nexus@178-164-207-227.pool.digikabel.hu) (Ping timeout: 252 seconds)
[16:05:08] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[16:06:33] *** Joins: nexus_ (~nexus@84-236-60-110.pool.digikabel.hu)
[16:06:40] *** Joins: yauhsien (~yauhsien@61-231-44-111.dynamic-ip.hinet.net)
[16:08:08] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[16:10:22] *** Quits: mreh (~matthew@host86-172-33-212.range86-172.btcentralplus.com) (Quit: Lost terminal)
[16:10:26] <Hemmo> [exa]: so it would be; then c : (commonSubstring s1 (dropWhile (/=c) s2))?
[16:11:45] <Hemmo> Oh yes I nearly got it to work
[16:11:51] <[exa]> seems so
[16:12:04] *** Joins: tcard_ (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp)
[16:12:18] <[exa]> I'd say you need to drop 1 extra character there (the c)
[16:12:19] *** Quits: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp) (Read error: Connection reset by peer)
[16:12:50] <[exa]> and the "else" case should be trivial, you just retry with the rest in s1, and don't do anything with s2
[16:14:43] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:15:03] *** Joins: zmt00 (~zmt00@user/zmt00)
[16:17:26] <Hemmo> [exa]: Thanks for the help! It's very difficult not to think in terms of loops just yet so I seem to overcomplicate these functions I make ;D
[16:17:48] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 252 seconds)
[16:18:22] <Hemmo> FP is such a different concept ;s
[16:18:37] *** Joins: forell (~forell@user/forell)
[16:19:12] <merijn> Monthly (bi-weekly?) reminder that if you are physically close to NL, you should register for NL-FP ;)
[16:20:07] *** Quits: forell_ (~forell@host-178-216-90-220.sta.tvknaszapraca.pl) (Ping timeout: 256 seconds)
[16:23:26] *** Quits: rond_ (~rond_@90.254.208.190) (Quit: Client closed)
[16:24:29] <tomsmeding> ( https://wouter-swierstra.github.io/fp-dag/ )
[16:28:23] *** Quits: chele_ (~chele@user/chele) (Ping timeout: 256 seconds)
[16:29:51] *** Joins: chele (~chele@user/chele)
[16:30:20] <[exa]> merijn: does luxembourg count?
[16:30:27] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 252 seconds)
[16:30:40] <earthy> is the program any good this year?
[16:31:32] <earthy> exa: that'd be about a four hour drive...
[16:31:45] *** AlexNoo_ is now known as AlexNoo
[16:32:08] <earthy> (I remember the fp-dag when it was hosted by the royal dutch navy... at a navy compound in amsterdam... that was somewhat fun. :))
[16:32:21] <[exa]> yeah 350km ain't super close
[16:36:12] <maerwald[m]> merijn: when is it
[16:37:14] <[exa]> April 22
[16:39:49] *** Joins: vglfr (~vglfr@88.155.82.72)
[16:40:04] <merijn> earthy: well, there is no program yet :p (since normally it's the first week of january, but it didn't happen last year, for obvious reasons :p)
[16:40:38] <merijn> [exa]: I mean, it depends on your personal definition of close and travelling budget :p
[16:40:59] <merijn> Participation is free anyway
[16:41:14] <[exa]> yeah like, let's check them buses
[16:41:50] <merijn> Should be interesting now that a bunch of the accelerate people moved from Australia to Utrecht :)
[16:42:10] <[exa]> whew
[16:55:42] *** Joins: k8yun (~k8yun@user/k8yun)
[16:56:44] *** Quits: son0p (~ff@181.136.122.143) (Remote host closed the connection)
[16:57:07] <merijn> Man...next time someone says tracking down spaceleaks in Haskell is hard I'm going to whack them with a hammer and ask them to try tracking down a space leak in python >.<
[16:58:16] <merijn> Consider this my annual prayer to the hero who implemented GHC's heap profiling tools >.>
[17:01:24] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[17:05:06] <maerwald> Matthew?
[17:05:38] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[17:06:02] *** Quits: Midjak (~Midjak@82.66.147.146) (Remote host closed the connection)
[17:06:53] <merijn> I don't think so? Pretty sure they predate his involvement
[17:07:20] <merijn> I mean, his speedscope is nice too, but the heap profiling graphs predate that
[17:07:50] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[17:09:15] <kuribas> or that "haskell is slow".
[17:10:32] *** Quits: ccntrq (~Thunderbi@2a01:c22:89c9:4f00:38e1:ceae:1fb6:a685) (Quit: ccntrq)
[17:10:37] *** Joins: ccntrq1 (~Thunderbi@dynamic-077-006-029-074.77.6.pool.telefonica.de)
[17:11:24] <maerwald> naive Haskell is slower than naive C, at least, sometimes by magnitudes. The maximum performance you can achieve with Haskell is almost unlimited though.
[17:12:30] <maerwald> often times that means abandoning idiomatic Haskell, though
[17:12:55] *** ccntrq1 is now known as ccntrq
[17:13:25] <maerwald> I think the xeno parser is a good example for this
[17:13:29] <dminuoso> "Language XYZ is slow" is not a major concern for the vast majority of users.
[17:13:36] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[17:13:52] <kuribas> high level, highly abstract haskell is slower than low level optimized C code.  No kidding.
[17:14:06] <dminuoso> If a billion devices run on (poorly written!) Java just fine, performance is not an issue for most peoplpe.
[17:14:25] <maerwald> kuribas: no, I'm talking about unoptimized C code
[17:14:30] *** Quits: vglfr (~vglfr@88.155.82.72) (Ping timeout: 250 seconds)
[17:14:51] <dminuoso> maerwald: well, of course you have to abandon idiomatic code. Writing fast and performant code in any language means catering to the implementation and hardware.
[17:15:22] <dminuoso> Well there's of course algorithmic complexity, but once that's out of the way, all you end up doing is make sure the compiler and hardware is happy with it
[17:15:33] *** Joins: kaph_ (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[17:15:35] <dminuoso> That applies to any language out there
[17:16:08] <kuribas> dminuoso: "once that is out of the way" <= that would increase most projects performance by tenfold.
[17:16:18] <maerwald> optimized C code is, more or less, idiomatic =)
[17:16:23] <dminuoso> kuribas: And cache awareness can increase performance by a thousand fold.
[17:16:36] <merijn> maerwald[m]: No it's not
[17:16:36] <dminuoso> It's ridiculous how slow memory is.
[17:16:49] <kuribas> dminuoso: if that code is in an inner loop, and that inner loop is significant.
[17:16:54] <merijn> Optimised C looks nothing like what 80-90% of C programmers produce
[17:17:42] <dminuoso> Indeed, optimized C code is usually a bunch of ifdefs, using magical compiler primitives, relying on compiler behavior, assuming particular code generation, assuming particular architectural flaws..
[17:17:54] <dminuoso> Usually near unreadable
[17:18:12] <dminuoso> Sometimes I wonder why the authors dont just write out the assembly by hand
[17:18:13] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 268 seconds)
[17:18:32] <maerwald> anyway, my claim is that you can put a student with half a year of experience with C in front of a computer and their naive implementation will almost always outperform an equivalently naive Haskell implementation
[17:18:40] <maerwald> The C implementation will likely crash a lot more, though
[17:19:03] <dminuoso> And their implementation will take 2-4 times longer to write?
[17:19:03] <merijn> maerwald[m]: Have you worked with lots of students?
[17:19:05] <maerwald> emphasis on *naive* implementation
[17:19:10] <maerwald> merijn: yeah
[17:19:28] <merijn> maerwald[m]: In my experience students with even 1-2 years of C experience can barely produce a program that reliably doesn't crash >.>
[17:19:42] <maerwald> true
[17:19:55] <maerwald> it only works with the pre-defined input from the instructor
[17:19:58] <maerwald> anything else crashes
[17:21:12] *** Joins: Sgeo (~Sgeo@user/sgeo)
[17:21:57] *** Quits: k8yun (~k8yun@user/k8yun) (Read error: Connection reset by peer)
[17:22:02] <maerwald> I wonder how rust "performs" in that settings for students
[17:22:13] <maerwald> my guess is they will abuse 'unsafe'
[17:22:19] <maerwald> or RefCell
[17:24:38] *** Joins: ccntrq1 (~Thunderbi@2a01:c22:89c9:4f00:8f7e:228b:ee69:75c3)
[17:24:46] <Ferdirand> my experience is that they abuse .clone()
[17:24:52] <maerwald> ah
[17:25:19] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[17:26:25] *** Quits: ccntrq (~Thunderbi@dynamic-077-006-029-074.77.6.pool.telefonica.de) (Ping timeout: 256 seconds)
[17:26:25] *** ccntrq1 is now known as ccntrq
[17:29:48] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:31:21] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[17:32:35] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[17:36:14] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[17:38:06] *** Quits: chele (~chele@user/chele) (Ping timeout: 252 seconds)
[17:39:31] *** Quits: troydm (~troydm@host-176-37-124-197.b025.la.net.ua) (Ping timeout: 245 seconds)
[17:39:39] <tomsmeding> performance of idiomatic haskell code also heavily depends on the application
[17:40:10] <tomsmeding> if you're talking about a tree-walking interpreter for a nice functional language, that's going to be super-readable and quite efficient
[17:40:52] <tomsmeding> if you're talking about an imperative bytecode interpreter, even my non-idiomatic version that has mutable unboxed arrays and tries to be somewhat memory-efficient was an order of magnitude slower than the natural C implementation
[17:41:06] <tomsmeding> profiling didn't turn up obvious bottlenecks
[17:41:37] <tomsmeding> (and that was without bounds checks on the array accesses)
[17:44:48] <maerwald> dminuoso: btw... this is relevant to our liability discussion https://github.com/haskellfoundation/stability/issues/7
[17:49:31] <kuribas> tomsmeding: maybe because of lazyness?
[17:50:09] <tomsmeding> kuribas: everything was in IO with unboxed mutable Word8 vectors, so I doubt there was much laziness around, but to be fair I didn't test -XStrict
[17:50:41] <kuribas> tomsmeding: hmm, I would expect this to be slower, but not an order of magnitude.
[17:50:45] <kuribas> Like 2x at most.
[17:50:47] <tomsmeding> precisely
[17:50:58] <kuribas> didi you inspect core?
[17:51:00] <tomsmeding> no
[17:51:01] <kuribas> or the assembly?
[17:51:13] <tomsmeding> probably I'd be able to find the answers there
[17:51:28] <tomsmeding> but that would be a Job :p
[17:51:42] <kuribas> I actually enjoy this :)
[17:51:55] <kuribas> I rarely get a chance to optimize for performance at work.
[17:52:02] *** Joins: son0p (~ff@181.136.122.143)
[17:52:10] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[17:52:35] <tomsmeding> usually I enjoy optimisation too, but this time I wasn't feeling like opening the large bulk of core that it would generate
[17:52:38] <kuribas> I mean aside from the obvious stuff.
[17:53:33] *** Joins: chele (~chele@user/chele)
[17:53:51] * ski . o O ( "Tales of a Former Disassembly Addict" in 2009-10-18 at <https://prog21.dadgum.com/50.html>,"How Did Things Ever Get This Good?" in 2009-11-10 at <https://prog21.dadgum.com/51.html>,"Slow Languages Battle Across Time" in 2009-11-14 at <https://prog21.dadgum.com/52.html>, by James Hague )
[17:55:32] *** Joins: k8yun (~k8yun@user/k8yun)
[17:55:34] <kuribas> tomsmeding: in such case, you could just use the C FFI as well :)
[17:55:48] <kuribas> as long as it's well contained.
[17:55:53] <tomsmeding> yes lol, but the whole point of the exercise was to see if Haskell could be fast as well
[17:56:09] <tomsmeding> and the (preliminary) answer was, not too easily
[17:56:34] *** Quits: chele (~chele@user/chele) (Client Quit)
[17:57:19] *** Joins: timCF (~timCF@200-149-20-81.sta.estpak.ee)
[17:59:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[17:59:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[18:07:53] *** Joins: bahamas (~lucian@86.120.77.115)
[18:08:30] *** Quits: ccntrq (~Thunderbi@2a01:c22:89c9:4f00:8f7e:228b:ee69:75c3) (Remote host closed the connection)
[18:08:48] *** Joins: ccntrq (~Thunderbi@2a01:c22:89c9:4f00:8f7e:228b:ee69:75c3)
[18:09:01] <kuribas> I suppose the C could also use a jump table.
[18:11:17] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:12:48] *** Quits: timCF (~timCF@200-149-20-81.sta.estpak.ee) (Quit: leaving)
[18:13:55] *** Joins: Guest30 (~Guest30@cpc151445-finc21-2-0-cust175.4-2.cable.virginm.net)
[18:15:30] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 252 seconds)
[18:15:30] *** Parts: Guest30 (~Guest30@cpc151445-finc21-2-0-cust175.4-2.cable.virginm.net) ()
[18:15:41] *** Joins: troydm (~troydm@host-176-37-124-197.b025.la.net.ua)
[18:19:10] <tomsmeding> I have no idea why the haskell would not be able to have a jump table when I write a case on a Word8
[18:22:02] <Ferdirand> how useful are jump tables these days ?
[18:22:15] *** Parts: olle (~olle@c-8a89e455.034-536-6d6c6d4.bbcust.telenor.se) ()
[18:22:21] *** Joins: olle (~olle@c-8a89e455.034-536-6d6c6d4.bbcust.telenor.se)
[18:22:36] <Ferdirand> don't indirect jumps ruin branching prediction ?
[18:27:17] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[18:27:23] <merijn> Ferdirand: "It Depends (TM)"
[18:27:49] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[18:27:56] <geekosaur> ghc can compile case-of to jumptables at least under some circumstances
[18:27:57] <merijn> tomsmeding: because Word8 is boxed ;)
[18:28:11] <merijn> But yeah, there's no reason GHC couldn't do that
[18:30:16] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[18:30:46] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[18:31:01] *** Joins: kenran (~kenran@200116b82bb92e0095dde20ed8280a15.dip.versatel-1u1.de)
[18:31:36] <kuribas> maybe because GHC is not optimized for low level byte handling?
[18:31:49] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[18:32:39] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:33:24] *** Joins: thyriaen (~thyriaen@ip5f5af2d7.dynamic.kabel-deutschland.de)
[18:33:25] <geekosaur> until 9.2 a "Word8" was really a machine word
[18:33:44] <geekosaur> (this includes Word8#)
[18:34:02] *** Quits: thyriaen (~thyriaen@ip5f5af2d7.dynamic.kabel-deutschland.de) (Client Quit)
[18:35:46] *** Joins: Giovanni (~Giovanni@176.219.119.243)
[18:39:04] <tomsmeding> geekosaur: right, fair point, but still that's not a reason why making a jump table would be impossible
[18:39:07] <raehik> geekosaur: what has changed in 9.2 regarding that? I'm curious
[18:40:17] <geekosaur> tomsmeding,just makes it seem more likely to me that bthey use the same code for all machine word stuff, which also catches Word8#. so this might now be somelow hanging fruit in the NCG
[18:40:44] *** Quits: yauhsien (~yauhsien@61-231-44-111.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[18:40:57] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[18:41:17] *** Joins: yauhsien (~yauhsien@61-231-44-111.dynamic-ip.hinet.net)
[18:41:42] <geekosaur> raehik, NCG Apple M1 support required support for native sized types, so for example a Word8# is now actually a byte instead of a machine word. this change is still shaking down, as above, and we may see some other improvements in its wake
[18:42:28] <raehik> oh, right, machine words aren't always 1 byte! interesting
[18:42:35] <geekosaur> (for example I think you still can't get a native Word8# vector without resorting to a ByteArray#)
[18:42:45] *** Joins: Unicorn_Princess (~Unicorn_P@46-54-248-191.static.kate-wing.si)
[18:42:48] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Read error: Connection reset by peer)
[18:43:00] <geekosaur> machine word on most platforms these days, specifically including the M1, is 64 bits
[18:43:28] <raehik> oh yeah. I think I had some concepts mixed
[18:43:36] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[18:43:50] <geekosaur> standard machine register size, basically
[18:44:01] <raehik> yes, right
[18:44:23] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[18:53:37] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[18:56:33] <merijn> raehik: machine words are basically never 1 byte? :p
[18:56:58] <geekosaur> 6502, 6809, 8080 :þ
[18:57:05] <raehik> merijn: yeah, I was thinking in Word terms, and forgot the context xd
[18:58:18] <geekosaur> should have said 6800, the 6809 was 8/16 hybrid
[19:02:28] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:85fc:5466:5112:8a92)
[19:04:17] *** Joins: __monty__ (~toonn@user/toonn)
[19:06:53] *** Joins: jao (~jao@45.134.142.199)
[19:07:10] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:85fc:5466:5112:8a92) (Ping timeout: 260 seconds)
[19:09:02] *** Quits: nexus_ (~nexus@84-236-60-110.pool.digikabel.hu) (Ping timeout: 260 seconds)
[19:09:31] *** Quits: jgeerds (~jgeerds@55d4548e.access.ecotel.net) (Ping timeout: 250 seconds)
[19:11:16] *** Quits: nishant (~Nishant@49.37.242.151) (Quit: Leaving)
[19:16:04] *** Joins: nexus_ (~nexus@80-95-86-2.pool.digikabel.hu)
[19:19:13] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Read error: Connection reset by peer)
[19:20:37] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[19:20:45] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[19:20:51] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[19:27:02] *** Quits: Giovanni (~Giovanni@176.219.119.243) (Read error: Connection reset by peer)
[19:28:23] *** xdej_ is now known as xdej
[19:28:52] *** Joins: Giovanni (~Giovanni@176.219.119.243)
[19:30:06] *** Joins: jakalx (~jakalx@base.jakalx.net)
[19:30:07] *** Quits: yauhsien (~yauhsien@61-231-44-111.dynamic-ip.hinet.net) (Remote host closed the connection)
[19:34:25] *** Joins: yauhsien (~yauhsien@61-231-44-111.dynamic-ip.hinet.net)
[19:34:48] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[19:36:21] *** Quits: bahamas (~lucian@86.120.77.115) (Ping timeout: 268 seconds)
[19:41:09] *** Quits: Giovanni (~Giovanni@176.219.119.243) (Read error: Connection reset by peer)
[19:43:35] *** Joins: Giovanni (~Giovanni@176.219.119.243)
[19:44:58] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 260 seconds)
[19:45:05] *** Joins: jonathanx__ (~jonathan@c-5eea3758-74736162.cust.telenor.se)
[19:45:50] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:cecd:603d:2da7:a044) (Quit: WeeChat 2.8)
[19:46:24] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:85fc:5466:5112:8a92)
[19:47:54] *** Quits: jonathanx_ (~jonathan@dyn-2-sc.cdg.chalmers.se) (Ping timeout: 252 seconds)
[19:48:19] *** Quits: Hemmo (~Hemmo@85-76-79-140-nat.elisa-mobile.fi) (Remote host closed the connection)
[19:57:08] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:58:08] *** Quits: benin (~benin@183.82.26.94) (Quit: The Lounge - https://thelounge.chat)
[20:00:15] *** Joins: Midjak (~Midjak@82.66.147.146)
[20:02:37] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[20:04:52] *** Joins: joo-__ (~joo-_@80-62-117-227-mobile.dk.customer.tdc.net)
[20:04:52] *** Quits: joo-__ (~joo-_@80-62-117-227-mobile.dk.customer.tdc.net) (Changing host)
[20:04:52] *** Joins: joo-__ (~joo-_@fsf/member/joo--)
[20:07:00] *** Quits: InstX1 (~Liam@2601:6c4:4080:3f80:501d:140:cf41:aa43) (Ping timeout: 240 seconds)
[20:11:39] *** Quits: raym (~raym@user/raym) (Ping timeout: 256 seconds)
[20:12:42] *** Joins: raym (~raym@user/raym)
[20:13:13] *** Quits: nexus_ (~nexus@80-95-86-2.pool.digikabel.hu) (Ping timeout: 250 seconds)
[20:15:08] *** Joins: bahamas (~lucian@84.232.140.158)
[20:15:09] *** Joins: nexus_ (~nexus@80-95-86-2.pool.digikabel.hu)
[20:16:17] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[20:22:57] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi)
[20:29:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[20:30:52] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:85fc:5466:5112:8a92) (Remote host closed the connection)
[20:30:53] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[20:31:51] *** Quits: razetime (~quassel@117.193.4.244) (Ping timeout: 250 seconds)
[20:32:07] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:85fc:5466:5112:8a92)
[20:32:24] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:32:41] <maerwald> does IsElem not work with NamedRoutes?
[20:39:42] *** Quits: ccntrq (~Thunderbi@2a01:c22:89c9:4f00:8f7e:228b:ee69:75c3) (Remote host closed the connection)
[20:42:30] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 250 seconds)
[20:49:17] *** Quits: yauhsien (~yauhsien@61-231-44-111.dynamic-ip.hinet.net) (Remote host closed the connection)
[20:50:05] *** Joins: yauhsien (~yauhsien@61-231-44-111.dynamic-ip.hinet.net)
[20:50:11] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[20:50:13] <maerwald> how do you print the url of a servant route? The only SO answer I could find doesn't work anymore
[20:51:13] *** Quits: Giovanni (~Giovanni@176.219.119.243) (Remote host closed the connection)
[20:51:38] *** Joins: Giovanni (~Giovanni@176.67.166.45)
[20:54:48] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[20:55:01] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[20:56:35] *** Quits: Major_Biscuit (~MajorBisc@c-001-021-050.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[20:56:51] *** Joins: alp (~alp@user/alp)
[20:58:17] *** Quits: Giovanni (~Giovanni@176.67.166.45) (Ping timeout: 250 seconds)
[20:58:58] *** Joins: Giovanni (~Giovanni@176.219.119.243)
[20:59:39] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[21:00:02] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[21:00:13] *** Quits: kaph_ (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 268 seconds)
[21:01:08] *** Quits: jonathanx__ (~jonathan@c-5eea3758-74736162.cust.telenor.se) (Ping timeout: 250 seconds)
[21:08:45] *** Quits: raym (~raym@user/raym) (Ping timeout: 252 seconds)
[21:11:29] *** Joins: raym (~raym@user/raym)
[21:13:10] *** Quits: kenran (~kenran@200116b82bb92e0095dde20ed8280a15.dip.versatel-1u1.de) (Quit: WeeChat info:version)
[21:15:16] <maerwald> https://hackage.haskell.org/package/servant-0.19/docs/Servant-Links.html#v:linkURI ...with NamedRoutes you also have to make sure to select the correct record after type-level matching. I also had to add a custom `IsElem'` instance.
[21:16:25] *** Joins: econo (uid147250@user/econo)
[21:18:11] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:6945:2980:3f53:dff8)
[21:22:11] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:6945:2980:3f53:dff8) (Remote host closed the connection)
[21:22:21] *** Joins: slaydr (~seriley@75.164.66.230)
[21:23:00] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[21:24:00] *** Joins: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com)
[21:27:38] *** Quits: aeka (~aeka@user/hiruji) (Ping timeout: 260 seconds)
[21:29:31] *** Quits: slaydr (~seriley@75.164.66.230) (Ping timeout: 256 seconds)
[21:32:22] *** Joins: kadenwolff[m] (~kadenwolf@2001:470:69fc:105::1:d97f)
[21:34:22] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Read error: Connection reset by peer)
[21:34:40] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:37:06] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[21:37:27] *** Joins: vglfr (~vglfr@88.155.82.72)
[21:38:50] *** Quits: olle (~olle@c-8a89e455.034-536-6d6c6d4.bbcust.telenor.se) (Ping timeout: 250 seconds)
[21:42:13] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[21:42:40] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[21:43:29] *** Quits: mbuf (~Shakthi@122.174.246.23) (Quit: Leaving)
[21:55:59] *** jjhoo_ is now known as jjhoo
[21:57:51] *** Joins: aeka (~aeka@user/hiruji)
[22:00:18] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[22:00:59] *** Joins: jgeerds (~jgeerds@55d4548e.access.ecotel.net)
[22:02:40] *** Quits: aeka (~aeka@user/hiruji) (Ping timeout: 250 seconds)
[22:03:07] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[22:03:25] *** Joins: aeka (~aeka@user/hiruji)
[22:03:40] *** Joins: zmt00 (~zmt00@user/zmt00)
[22:04:42] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[22:10:54] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 250 seconds)
[22:11:47] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[22:13:17] *** Quits: hyiltiz (~quassel@31.220.5.250) (Ping timeout: 240 seconds)
[22:14:09] *** Joins: Akiva (~Akiva@user/Akiva)
[22:16:41] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 268 seconds)
[22:17:30] *** Quits: nexus_ (~nexus@80-95-86-2.pool.digikabel.hu) (Ping timeout: 252 seconds)
[22:17:59] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[22:18:46] <justsomeguy> Is there a shell meant for interactive use that lets you intermix commands and haskell code, kind of like https://xon.sh does?
[22:19:16] *** Joins: nexus_ (~nexus@178-164-207-111.pool.digikabel.hu)
[22:20:03] *** jackhill_ is now known as jackhill
[22:20:33] *** Joins: hyiltiz (~quassel@31.220.5.250)
[22:24:46] *** Quits: hyiltiz (~quassel@31.220.5.250) (Ping timeout: 250 seconds)
[22:29:02] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[22:30:56] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.4)
[22:33:30] *** Joins: slaydr (~slaydr@75.164.66.230)
[22:34:56] <slaydr> I'm a long time Vim user and am trying to switch to emacs. What packages are you emacs users using?
[22:35:36] <monochrom> I use haskell-mode. Can be installed from melpa.
[22:35:51] <monochrom> Actually I use the melpa-stable version.
[22:36:29] <slaydr> thanks. Any others? I had a vim feature that auto indented keywords like 'when'
[22:36:53] <slaydr> or maybe I missed a setting in haskell-mode?
[22:37:47] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:38:52] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[22:39:23] <monochrom> I don't know and don't use auto-indent.
[22:39:58] *** Joins: lavaman (~lavaman@98.38.249.169)
[22:40:14] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Client Quit)
[22:40:14] <monochrom> I think I know that haskell-mode doesn't do auto-indent.
[22:40:22] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[22:41:25] *** Quits: vglfr (~vglfr@88.155.82.72) (Ping timeout: 240 seconds)
[22:42:02] <monochrom> It does semi-auto. You still have to press the tab key. But you can press it many times to traverse choices.
[22:42:30] <slaydr> thank you
[22:42:32] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 250 seconds)
[22:43:20] <monochrom> And you can press it after you have entered something on the line. Then it takes into account what's already on the line, e.g., if it begins with "where" it is honoured.
[22:46:15] <slaydr> that's good to know
[22:48:08] *** Quits: jlamothe (~jlamothe@198.251.61.229) (Ping timeout: 268 seconds)
[22:48:20] *** Joins: Guest|20 (~Guest|20@tmo-100-189.customers.d1-online.com)
[22:48:20] *** Quits: yauhsien (~yauhsien@61-231-44-111.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[22:48:34] *** Joins: jlamothe (~jlamothe@198.251.61.229)
[22:49:11] *** Joins: yauhsien (~yauhsien@61-231-44-111.dynamic-ip.hinet.net)
[22:49:37] <Guest|20> Hi im totally new in IT and only wrote HTML
[22:49:59] *** Joins: hyiltiz (~quassel@31.220.5.250)
[22:50:27] <Guest|20> How do I use Haskell?
[22:50:59] *** Joins: mastarija (~mastarija@2a05:4f46:e04:6000:6118:54b1:a270:d89b)
[22:51:16] <monochrom> It is a programming language.
[22:51:48] <mastarija> is there a function in base that rounds towards zero?
[22:52:06] <monochrom> I think truncate.
[22:52:07] <mastarija> e.g. for positive numbers it behaves like `floor` and for negative as `ciel`?
[22:52:14] <monochrom> > truncate (-0.9)
[22:52:16] <lambdabot>  0
[22:52:17] <Guest|20> Yes, thank you. That is one of a few things I know☺️
[22:52:32] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[22:52:34] <Guest|20> How can I install haskell?
[22:52:36] <mastarija> monochrom, thx
[22:55:05] <maerwald> Guest|20: did you follow the instructions?
[22:56:50] <Guest|20> I did not figure out yet how to follow them properly
[22:57:20] *** Joins: vglfr (~vglfr@88.155.82.72)
[22:58:03] *** Quits: Guest|20 (~Guest|20@tmo-100-189.customers.d1-online.com) (Quit: Connection closed)
[22:58:36] *** Quits: yauhsien (~yauhsien@61-231-44-111.dynamic-ip.hinet.net) (Remote host closed the connection)
[23:01:37] <janus> maralorn: how can i reach Ellie on the Nix Haskell calendar?
[23:02:15] *** Joins: yauhsien (~yauhsien@61-231-44-111.dynamic-ip.hinet.net)
[23:07:47] <maralorn> janus: We are all in #haskell:nixos.org .
[23:08:05] <maralorn> Oh, wait, you asked that question from irc.^^
[23:08:20] <janus> i can jump on matrix
[23:08:29] <maralorn> Still, the answer holds. You can find us in that Matrix channel.
[23:09:29] *** Quits: kuribas (~user@ptr-25vy0i9smgbd9x89015.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[23:10:07] *** Joins: namkeleser (~namkelese@101.175.155.55)
[23:10:22] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[23:12:14] *** Quits: MironZ (~MironZ@nat-infra.ehlab.uk) (Quit: The Lounge - https://thelounge.chat)
[23:12:26] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 250 seconds)
[23:13:09] *** Joins: MironZ (~MironZ@nat-infra.ehlab.uk)
[23:14:32] *** Quits: MironZ (~MironZ@nat-infra.ehlab.uk) (Client Quit)
[23:14:56] *** Joins: dextaa_ (~dextaa@user/dextaa)
[23:16:28] *** Quits: yauhsien (~yauhsien@61-231-44-111.dynamic-ip.hinet.net) (Remote host closed the connection)
[23:17:16] *** Joins: MironZ (~MironZ@nat-infra.ehlab.uk)
[23:17:37] *** Quits: vglfr (~vglfr@88.155.82.72) (Ping timeout: 240 seconds)
[23:17:38] *** Quits: xff0x (~xff0x@dslb-094-222-029-254.094.222.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[23:18:02] *** Quits: slaydr (~slaydr@75.164.66.230) (Quit: leaving)
[23:18:11] *** Joins: zmt01 (~zmt00@user/zmt00)
[23:21:09] *** Joins: Guest27 (~Guest27@2601:281:d47f:1590::6b90)
[23:23:00] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[23:24:46] <dpratt> I'm rather ignorant of building/linking concerns on linux, so with that in mind, i tried to build some Haskell code in a docker container and run it on the host and it produced: "output/bms-pi: /lib64/libm.so.6: version `GLIBC_2.27' not found (required by output/bms-pi)"; is there an easy way to resolve this error?
[23:26:28] <dpratt> I assume this is related to the fact that "ldd --version" reports "ldd (GNU libc) 2.26" on the host and "ldd (Debian GLIBC 2.28-10) 2.28" in the container
[23:27:57] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 256 seconds)
[23:29:03] <maerwald> yes
[23:29:20] <maerwald> you can either link statically in an alpine container or use an older debian
[23:29:31] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:29:31] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:29:31] *** Joins: wroathe (~wroathe@user/wroathe)
[23:32:01] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 245 seconds)
[23:32:48] <hololeap> anyone know how to parse a natural number from a bytestring in parsec?
[23:33:01] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[23:33:08] *** Joins: yauhsien (~yauhsien@61-231-44-111.dynamic-ip.hinet.net)
[23:34:07] *** Joins: bahamas (~lucian@84.232.140.158)
[23:35:18] *** Joins: Henson (~kvirc@107-179-133-201.cpe.teksavvy.com)
[23:36:40] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:85fc:5466:5112:8a92) (Remote host closed the connection)
[23:37:17] <Henson> is there a way I can use Lens or Optics with a data structure like this [Foo K X] to use a function like Bar :: [X] -> [Y] to generate a [Foo K Y] where Foo contains other data K that should be copied from the input to the output
[23:37:27] <hololeap> muchWow $ many digit
[23:38:36] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 240 seconds)
[23:41:46] <[exa]> Henson: does Foo have lenses?
[23:41:56] <dpratt> maerwald: thanks; for clarification, is it not possibly to statically link on a debian distribution?
[23:42:10] <maerwald> not really with glibc
[23:42:19] <Henson> [exa]: yes
[23:42:43] *** Joins: xff0x (~xff0x@dslb-094-222-029-254.094.222.pools.vodafone-ip.de)
[23:43:06] <[exa]> Henson: is there a single lens that accesses an X-typed element? (or more of them?)
[23:43:09] <Henson> [exa]: it would be easy if I wanted bar :: X -> Y, but I want [X] -> [Y], so it reaches into the ensemble of inputs and manipulates their individual values all at once
[23:43:35] <Henson> [exa]: while copying all the rest of the data that is not related to the manipulation
[23:43:46] <dpratt> maerwald: ah, ok; and static linking is going to be "what will happen" from an alpine image?
[23:43:47] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[23:43:52] <Henson> [exa]: there's a single one
[23:44:04] *** Joins: gentauro (~gentauro@user/gentauro)
[23:44:31] *** Joins: thyriaen (~thyriaen@ip5f5af2d7.dynamic.kabel-deutschland.de)
[23:44:50] <maerwald> dpratt: you pass --ghc-options='-optl-static' to cabal and then yes
[23:45:04] <[exa]> Henson: hm I see. can you model that [X]->[Y] as a fold or an (indexed) traversal or something?
[23:45:10] <dpratt> maerwald: very helpful, thanks!
[23:45:18] *** Joins: nucranium (~nucranium@2a02:8010:6173:0:1518:15e2:d1d7:f9f8)
[23:46:14] <Henson> [exa]: I'll just write a custom function to do what I want.  I thought there might be a way to do it with Lens/Optics using something I'm unfamiliar with.
[23:46:56] <Henson> [exa]: the toList Traversal function gets me part of the way there, but it loses all of the structure and extra data.
[23:47:11] <[exa]> Henson: it should be simple, I guess `traverseOf` does the trick
[23:47:42] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Read error: Connection reset by peer)
[23:48:58] <hololeap> % :t (\f -> sequence . fmap f . sequence) :: Monoid k => ([x] -> [y]) -> [(k,x)] -> [(k,y)] -- Henson
[23:48:59] <yahb> hololeap: Monoid k => ([x] -> [y]) -> [(k, x)] -> [(k, y)]
[23:49:51] <hololeap> hm maybe that wouldn't work
[23:49:56] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:54:09] <[exa]> Henson: for that traverseOf -- you could put in a lazy State that creates the value that you want to know of _all_ elements, and at the same time use that value for deciding what to change. Not sure if there's a lens combinator for doing precisely this though.
[23:55:20] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[23:55:58] <janus> hololeap: have you seen Data.Attoparsec.Text? it has `decimal :: Integral a => Parser a`
[23:56:27] *** Quits: yauhsien (~yauhsien@61-231-44-111.dynamic-ip.hinet.net) (Remote host closed the connection)
[23:58:06] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[23:58:35] *** Quits: jespada (~jespada@cpc121022-nmal24-2-0-cust171.19-2.cable.virginm.net) (Quit: Textual IRC Client: www.textualapp.com)
[23:58:54] <Hecate> yes it's good
