[00:00:16] <rotateq> hm till now I'm not so fit with the extra parameters in the format directives ~d, ~b, ~x, ...
[00:01:23] <rotateq> pjb: do you know from memory how I can print a number as binary with four groups and underscore, namely for example 0110_1110_0000_0110 ? :)
[00:02:44] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[00:03:07] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[00:03:23] <mfiano> Not builtin
[00:03:43] <rotateq> mfiano: oh but wait
[00:03:54] <rotateq> i can call a custom function too, right?
[00:04:09] <mfiano> ~/
[00:04:11] <rotateq> Nilby told much about format magic some months ago.
[00:04:27] <rotateq> haha okay, many will think of UNIX home dir
[00:04:27] <mfiano> an octet vector can be printed similarly on SBCL but is non-standard behavior: (format nil "~b" #(10 122 102 84))
[00:04:53] <rotateq> then better first nothing impl specific
[00:06:09] <pjb> (format nil "~,,'-,4:B" (random (expt 2 32))) #| --> "101-1011-1010-0110-0010-1011-0111-1001" |#
[00:06:13] <pjb> rotateq: ^^
[00:06:43] <rotateq> you should teach all that stuff :)
[00:07:12] <pjb> (format nil "~48,'_,',,4:B" (random (expt 2 32))) #| --> "_________1011,1010,1100,1111,0010,0111,1111,1011" |#
[00:07:25] <pjb> It's just written down in the clhs…
[00:07:27] <rotateq> uii
[00:07:30] <mfiano> Oh I see. Yes, I stand corrected.
[00:07:50] <rotateq> okay where? i was on the examples page
[00:08:07] <rotateq> mfiano: ah don't worry, we're here for exchange
[00:08:10] <pjb> section 22.3.2.* -> 22.3.2.2
[00:08:16] <rotateq> oki
[00:08:19] <mfiano> But what about zero padding?
[00:08:31] <pjb> rotateq: go to format, and follow the link to 22.2
[00:08:44] <pjb> (format nil "~48,'0,',,4:B" (random (expt 2 32))) #| --> "0000000001100,1101,0001,0101,0010,0000,0000,1110" |#
[00:08:50] <pjb> mfiano:  ;-)
[00:09:08] <mfiano> Uhh
[00:10:07] <pjb> (format nil "~{~A~^,~}" (group-by (format nil "~48,'0B" (random (expt 2 32))) 4)) #| --> "0000,0000,0000,0000,1111,0001,1110,0011,1110,1001,1000,0110" |#
[00:10:21] <pjb> with com.informatimago.common-lisp.cesarum.sequence:group-by
[00:10:56] <mfiano> better, but not confined to the DSL
[00:10:59] <pjb> Post an issue to (group-by :from-end t)
[00:11:12] <mfiano> Which is why I thought you couldn't zero pad nibbles with pure FORMAT
[00:11:15] <pjb> mfiano: indeed, format specifier are often limited like that.
[00:11:43] <pjb> and you're right, it's not done for zero-pad, but for padding the field with spaces or * or # etc…
[00:11:53] <mfiano> Yes
[00:12:08] <pjb> For example: (format nil "~10,'0D" -123) #| --> "000000-123" |#  ;-)
[00:12:46] <mfiano> Right. I use it often for rendering purposes
[00:14:10] <mfiano> I would like there to be a generic function protocol for a FORMAT compiler.
[00:14:11] <rotateq> okay thanks again. I'm now about going to sleep :) see you
[00:14:38] <rotateq> mfiano: afaik SICL wants to provide extensibility
[00:15:59] <mfiano> I think it would be nice to build up a string with a series of generic function calls, with each step being a method that could be specialized by the user to change/augment its behavior
[00:16:39] <mfiano> It would no longer be a terse DSL though.
[00:17:09] *** Parts: rotateq (~user@p200300e78715be00fdfeed040e17b750.dip0.t-ipconnect.de) (ERC (IRC client for Emacs 27.2))
[00:18:13] <mfiano> THis is half me wanting to be able to extend FORMAT for cases like the above, and half me never remembering the different directives and their parameters.
[00:18:57] <mfiano> With the latter being a side-effect of me usually not being able to easily understand a format string at a quick glance, with such a compressed DSL
[00:19:18] <mfiano> Would like a more human-readable/extendable solution
[00:19:31] <mfiano> I know I am alone, so end rant.
[00:19:38] *** Quits: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.sdns.net.rogers.com) (Quit: ERC (IRC client for Emacs 27.2))
[00:19:45] <Arcsech> You could always write your own :p
[00:19:46] <Arcsech> https://xkcd.com/927/
[00:20:33] *** Joins: akoana (~ah@user/akoana)
[00:21:34] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[00:22:24] <lisp123> mfiano: I agree with you, format and regexs are so hard to follow at times
[00:24:10] <mfiano> Yes, regex is similar. IIRC there was a simple solution to that in Sussman's recent book
[00:25:40] <mfiano> I guess it's just preference. I often care much more about human-readable code and extensibility, than playing some sadistic form of obfuscated code golf
[00:29:41] <pjb> mfiano: well, either ~/ or indeed, write a format-2.0 and (defpackage … (:use "CL") (:shadowing-import-from "FORMAT-2.0" "FORMAT") …)
[00:30:13] <pjb> mfiano: or take the opportunity to design a more lisp format specifier language.
[00:30:27] <pjb> more lispy and richer.
[00:30:36] *** Quits: ahlk (~user@2600:1700:31c0:3a10::48) (Read error: Connection reset by peer)
[00:30:40] <mfiano> The problem is in the "time" part
[00:30:44] <pjb> (and why not, add localization >:-}~)
[00:30:49] <mfiano> My back burner has back burners
[00:30:50] <pjb> as always.
[00:30:59] <mfiano> Fractasl sotve all the way down
[00:31:01] *** Joins: ahlk (~user@2600:1700:31c0:3a10::48)
[00:31:03] <mfiano> Fractal*
[00:31:08] <mfiano> Ugh I can't type today
[00:41:17] *** Joins: semz (~none@user/semz)
[00:43:46] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:44:36] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 265 seconds)
[00:45:07] *** Lord_of_Life_ is now known as Lord_of_Life
[01:00:22] *** Quits: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu) (Ping timeout: 252 seconds)
[01:03:19] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[01:05:19] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[01:12:43] *** Quits: lisp123 (~lisp123@45.86.202.96) (Remote host closed the connection)
[01:13:29] *** Quits: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte) (Ping timeout: 268 seconds)
[01:16:33] *** Joins: lisp123 (~lisp123@45.86.202.96)
[01:18:55] *** Quits: gaqwas (~john@dynamic-095-117-023-001.95.117.pool.telefonica.de) (Ping timeout: 260 seconds)
[01:21:19] *** Quits: lisp123 (~lisp123@45.86.202.96) (Ping timeout: 252 seconds)
[01:32:02] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[01:35:04] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[01:39:16] *** Joins: santiagopim (~user@90.167.66.93)
[01:40:24] *** Joins: tophullyte (~tophullyt@68.170.104.27)
[01:48:23] *** Joins: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa)
[01:53:51] *** Quits: rgherdt (~rgherdt@95.90.244.86) (Ping timeout: 245 seconds)
[01:55:54] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[01:56:23] *** Joins: lisp123 (~lisp123@45.86.202.96)
[01:57:09] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[01:58:17] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 264 seconds)
[01:58:59] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[02:03:47] *** Joins: igemnace (~ian@user/igemnace)
[02:07:36] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 245 seconds)
[02:08:26] *** Quits: lisp123 (~lisp123@45.86.202.96) (Ping timeout: 245 seconds)
[02:09:50] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[02:18:47] *** Joins: dre (~dre@2001:8003:c932:c301:d44a:8295:7928:835)
[02:26:37] *** Joins: asarch (~asarch@2806:10ae:7:e3f3:9e83:6b01:6a04:bc1e)
[02:30:31] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[02:31:00] *** Joins: hendursaga (~weechat@user/hendursaga)
[02:40:33] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[02:44:40] *** Joins: lisp123 (~lisp123@45.86.202.96)
[02:48:28] *** Joins: igemnace (~ian@user/igemnace)
[02:48:33] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[02:48:51] *** Quits: lisp123 (~lisp123@45.86.202.96) (Ping timeout: 245 seconds)
[02:54:34] *** Quits: tophullyte (~tophullyt@68.170.104.27) (Quit: Leaving)
[03:18:46] *** Joins: tyson2 (~user@cpeb4fbe4e04394-cmf0f249001100.cpe.net.cable.rogers.com)
[03:25:57] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[03:34:16] *** Quits: random-nick (~random-ni@87.116.183.117) (Ping timeout: 245 seconds)
[03:38:32] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[03:38:37] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[03:42:40] *** Quits: CptKirk (~CptKirk@70-57-27-195.hlrn.qwest.net) (Ping timeout: 256 seconds)
[03:43:29] *** Joins: CptKirk (~CptKirk@70-57-27-195.hlrn.qwest.net)
[03:44:09] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Ping timeout: 276 seconds)
[03:44:26] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[03:44:43] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[03:44:48] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[03:45:27] *** Joins: hendursaga (~weechat@user/hendursaga)
[04:04:41] *** Quits: asarch (~asarch@2806:10ae:7:e3f3:9e83:6b01:6a04:bc1e) (Quit: Leaving)
[04:07:08] *** Joins: frgo (~frgo@p200300deef0cee00b0ea14751ba29eda.dip0.t-ipconnect.de)
[04:10:26] *** Joins: mitchconnor (~MitchConn@ptr-dlvr0v1r2s5jwgdrw35.18120a2.ip6.access.telenet.be)
[04:11:20] *** Quits: mitchconnor (~MitchConn@ptr-dlvr0v1r2s5jwgdrw35.18120a2.ip6.access.telenet.be) (Client Quit)
[04:17:29] *** Quits: frgo (~frgo@p200300deef0cee00b0ea14751ba29eda.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[04:37:26] *** Quits: tyson2 (~user@cpeb4fbe4e04394-cmf0f249001100.cpe.net.cable.rogers.com) (Ping timeout: 265 seconds)
[04:42:34] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[04:43:00] *** Joins: srhm (~srhm@user/srhm)
[04:43:55] *** Quits: brettgilio (~brettgili@x-node.gq) (Quit: Leaving...)
[04:44:30] *** Joins: brettgilio (~brettgili@x-node.gq)
[04:48:40] *** Quits: brettgilio (~brettgili@x-node.gq) (Remote host closed the connection)
[04:50:27] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[04:51:45] *** Joins: brettgilio (~brettgili@x-node.gq)
[04:51:55] *** Quits: brettgilio (~brettgili@x-node.gq) (Client Quit)
[04:52:27] *** Joins: brettgilio (~brettgili@x-node.gq)
[04:53:26] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[04:57:52] <paule32> hello
[04:58:14] <paule32> assume i have a class, and/or defun's
[04:58:33] <paule32> now, i would like "extend" the class/defun
[04:59:17] <paule32> with defclass, i can make super class, and derivated class that inherit from its parent
[04:59:26] *** Joins: elderK (uid205007@id-205007.helmsley.irccloud.com)
[04:59:44] <paule32> but i have some defun's that are other than the parent
[04:59:51] <paule32> ehm objects
[05:00:20] <mfiano> you what?
[05:00:20] <paule32> now, i could use (defun (defun (defun ... )))
[05:00:37] <mfiano> That makes no sense?
[05:00:43] <paule32> hello mfiano
[05:00:46] <mfiano> Hi
[05:00:53] <paule32> what
[05:01:18] <mfiano> (defun (defun (defun ...))) is invalid Common Lisp. I have no idea what you are asking.
[05:01:53] <paule32> i mean, i could combine defun's
[05:02:00] <mfiano> What does combine mean?
[05:02:07] <paule32> (a (b (c ...)))
[05:02:16] <paule32> where a is (defun a () )
[05:02:27] <paule32> where b is (defun b () )
[05:02:28] <mason> paule32: What, in plain language, do you want to accomplish?
[05:02:38] <mason> Not in Lisp, in English.
[05:02:46] <mfiano> That isn't combining defun's. That feeding the return value of one function into the input of another.
[05:03:15] <paule32> mfiano: yes, that is what i would like
[05:03:37] <paule32> mason: i thinking over, how to implement a simple test circuite program
[05:03:45] <mfiano> You would like to call a function with the result of another? What is the problem?
[05:04:26] <mason> paule32: If you describe that in more detail that might help. Both "test" and "circuit" aren't wholly clear to me as yet.
[05:04:38] <paule32> mfiano: that not the problem, the problem (or the thinking) is: do i need classes, when i "add" components
[05:05:12] <paule32> mason: a ic can have 2 or more inputs, and outputs
[05:05:16] <mfiano> Classes are for storing state. Just like a closure but more convenient due to generic functions.
[05:05:31] <paule32> these 2 inputs can connect internal with other gates
[05:05:32] <mason> paule32: Are you saying you want to have custom methods based on a subclass?
[05:06:02] <mason> paule32: Like, you have behaviour, and you want custom behaviour based on some criteria, but using the same name, or somesuch?
[05:06:05] <paule32> i can't say it in detail, because i dont know what is better
[05:06:13] <mfiano> Do you want to add components at runtime, or statically in code?
[05:06:46] <paule32> i would like add components dynamically
[05:06:53] <mfiano> Check out the library dynamic-mixins
[05:07:00] <mfiano> I think this might be what you are after
[05:07:19] <mfiano> It assumes familiarity with generic functions (defgeneric/defmethod), so read PCL if you aren't familiar with them.
[05:07:57] <paule32> i am familar with oop at c++, pascal, but in lisp, i am a noob
[05:08:06] <paule32> because lisp is simpler
[05:08:08] <mfiano> paule32: Oh that is your first mistake.
[05:08:18] <mfiano> paule32: I have seen you come here for years, and you haven't yet read PCL?
[05:08:31] <paule32> ehm, no
[05:08:34] <mfiano> That is a huge problem. CLOS is the core of CL.
[05:08:42] <mfiano> minion: tell paule32 about PCL
[05:08:42] <minion> paule32: please look at PCL: pcl-book: "Practical Common Lisp", an introduction to Common Lisp by Peter Seibel, available at http://www.gigamonkeys.com/book/ and in dead-tree form from Apress (as of 11 April 2005).
[05:09:05] <paule32> ah the book
[05:09:07] <paule32> yes
[05:09:11] <paule32> i read it, ago
[05:09:26] <mfiano> Then you know about OOP in Lisp
[05:09:31] <paule32> but i havent time learn lisp in detail, because other projects
[05:09:33] <mfiano> (defmethod, etc)
[05:10:41] <mfiano> Sadly I don't know of any German resources for you if you didn't get enough from that book.
[05:10:53] <paule32> the question tend to oop, but i am not sure, that i need oop
[05:11:19] <paule32> mfiano: i start a project, to translate the LispWorks
[05:11:22] <paule32> months ago
[05:11:38] <mfiano> While CL is multi-paradigm, you can't really use CL without using OOP at least indirectly, since CLOS and the MOP are so intertwined into the language's design.
[05:12:01] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[05:12:07] <mfiano> Everything in CL is an instance of a class.
[05:12:21] <mfiano> Even classes themselves :)
[05:12:31] <paule32> i read all is s-expr
[05:12:47] <paule32> so no read, that oop is the base
[05:12:59] <mfiano> That is the textual representation and similar to the AST, yes. I am talking about runtime objects.
[05:13:44] <paule32> ehm, dont think so, at the moment, please think in bootstrap
[05:13:50] <mfiano> When you type (list 1 2 3), you are instantiating an instance of class LIST.
[05:13:53] <paule32> where all is ground base
[05:14:05] <paule32> ah
[05:14:08] <paule32> yes
[05:14:09] <mfiano> CLOS is built into everything
[05:14:36] <paule32> sorry, i not involved with cl details
[05:14:45] <paule32> for me, list is a function
[05:15:24] <mfiano> It is a function that does what I said
[05:15:26] *** Joins: srhm (~srhm@user/srhm)
[05:15:40] <paule32> that basis knowlegde is know by me
[05:16:13] <paule32> but you can see, that i am twisted all, because i still use other paradigms like new c++
[05:16:21] <paule32> sorry
[05:16:30] <mfiano> If you want to do things at runtime, your best option is utilizing classes with the meta-object protocol.
[05:16:45] <mfiano> This is what mixin libraries like dynamic-mixins, and stealth-mixin do
[05:18:15] <mfiano> Yes, I understand. You don't come around here often. I think your main problem is just not spending enough time here and with the language in general.
[05:18:22] <paule32> yes, but, see: you have a ic with 8 i/o ports, and the internal structure, i would like code it as educative part, so i can't use millions of classes for gates like and|xor ...
[05:18:38] <mfiano> There isn't much reason to submit to C++ if you become familiar with CL.
[05:18:41] <paule32> yes, indeed
[05:19:47] <paule32> with classes, i mean instances
[05:20:07] <paule32> this means, allocate memory, free it, ...
[05:20:37] <mfiano> You can't expect to design and implement a sophisticated piece of software in any language without understanding that language in at least some detail. Otherwise it is going to look like spaghetti and probably not modular/extensible, one of your requirements.
[05:20:43] <paule32> and defun is simple, it run its logic, and then get next part ...
[05:21:17] <paule32> yes
[05:21:55] <mfiano> With the MOP and defclass/defmethod, it's possible to programmatically create classes as needed as your program is running
[05:22:06] <mfiano> and changing existing instances to be of those new classes, etc
[05:22:10] <mfiano> Anything you can imagine.
[05:22:13] <mfiano> Quite easily with CL
[05:22:57] <mfiano> (change-class (make-instance 'some-class) (dynamically-create-new-class))
[05:22:58] <paule32> ehm, yes, but MOP is in my eys simple extended CL, so CL is faster
[05:23:00] <mfiano> For example
[05:23:18] <mfiano> No.
[05:23:27] <mfiano> The MOP isn't CL extended.
[05:23:36] <paule32> hmm
[05:23:37] <mfiano> CL is defined in terms of the MOP, or well, usually is.
[05:23:51] <mfiano> CLOS is written using the MOP. CL is written using CLOS.
[05:24:04] <mfiano> a CL implementation, that is.
[05:24:13] <paule32> ok
[05:24:50] <mfiano> The MOP is how you really get to make CL do what you want, no matter what you are designing.
[05:25:09] <paule32> ic simulation
[05:25:43] <paule32> the thing is not only the design
[05:26:03] <paule32> the second thing is the run behavoir
[05:26:42] <paule32> so, if you look to the electronics design, you come to paralellism
[05:27:05] <paule32> power goes to the lowest barierr
[05:27:11] <mfiano> I fear I am not explaining things clearly enough at this hour, or I am not understanding you well. I might request some help from some on-lookers :)
[05:27:36] <mfiano> Because ic simulation is vague. That can be implemented an infinite number of ways.
[05:27:49] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[05:27:52] <paule32> ok
[05:27:53] <mfiano> I am thinking at a much lower level than you.
[05:28:07] <paule32> then let us begin with a simple class circuit
[05:28:22] <paule32> mfiano: yes, that seems be the problem
[05:29:36] *** Quits: karlosz (~karlosz@47.180.55.252) (Quit: karlosz)
[05:29:47] <mfiano> Ok, that only tells me: (defclass circuit (...) (...))
[05:30:17] <paule32> ok, this class should be the super class of all circuits
[05:30:23] <paule32> we need a name
[05:31:12] <mfiano> Well, you have to ask yourself which state (if any) is different than the parent in the subclasses.
[05:31:20] <mfiano> Is the state different, or only the behavior?
[05:31:38] <paule32> there is no parent
[05:31:40] <paule32> at the moment
[05:31:58] <mfiano> As long as there is a superclass their are children, and this is the parent.
[05:31:59] <paule32> only thinking over, what a circuit can have or do
[05:32:07] <mfiano> there*
[05:32:12] <paule32> ok
[05:32:13] *** Quits: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net) (Remote host closed the connection)
[05:32:50] <mfiano> My main question is why does there need to be subclasses of circuit at all?
[05:33:30] <paule32> each of them have different design, name, functions, ...
[05:33:37] <mfiano> I have this question because you didn't explain anything yet. So no need to answer if you have more explanation
[05:34:27] <mfiano> Let me sketch something out quick
[05:34:36] <paule32> ok
[05:36:33] <mfiano> https://gist.github.com/mfiano/3aed335eed38c3a72b23d2863f44876a
[05:36:39] <mfiano> Do you understand all of this code?
[05:37:27] <paule32> yes
[05:38:13] <mfiano> With this, we don't need more than 1 function per circuit. Only 1 function per BEHAVIOR
[05:38:20] <mfiano> Ok, let's use it as a base for any further implementation details you describe.
[05:38:38] <paule32> thank you
[05:39:16] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 252 seconds)
[05:45:30] <mfiano> I may be slow to respond. I urge you to stay connected to IRC and ask very detailed questions without assuming the reader knows about your problem domain. I for example, know very little of IC aside the basic like logic gates.
[05:46:13] <paule32> ok, no problem
[05:46:28] <paule32> so long we not cry us :)
[05:49:21] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[05:50:13] *** Parts: akoana (~ah@user/akoana) (Leaving)
[05:55:34] *** Quits: jealousmonk (~user@2804:431:e7c5:e827:5c1c:24ea:7fec:c9e5) (Quit: ERC (IRC client for Emacs 27.1))
[05:55:47] <CptKirk> looking for a simple REST library
[05:56:43] <CptKirk> I found drakma, but there seems to be a lot of manual parts that I don't really understand
[06:00:34] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 265 seconds)
[06:00:43] *** Joins: paule32_ (~paule32@user/paule32)
[06:02:39] *** Joins: paule32__ (~paule32@user/paule32)
[06:04:14] *** Quits: paule32 (~paule32@user/paule32) (Ping timeout: 246 seconds)
[06:06:10] *** Quits: paule32_ (~paule32@user/paule32) (Ping timeout: 252 seconds)
[06:06:35] *** Joins: paule32 (~paule32@user/paule32)
[06:08:22] *** Quits: paule32__ (~paule32@user/paule32) (Ping timeout: 252 seconds)
[06:08:55] *** Quits: prxq (~quassel@x4dbdc5f0.dyn.telefonica.de) (Ping timeout: 265 seconds)
[06:09:03] *** Joins: prxq_ (~quassel@x4db53858.dyn.telefonica.de)
[06:09:16] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Ping timeout: 265 seconds)
[06:18:54] *** Joins: karlosz (~karlosz@12.196.174.98)
[06:32:19] <beach> Good morning everyone!
[06:44:54] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[06:52:47] *** Joins: Lycurgus (~juan@98.4.112.204)
[07:00:29] *** Quits: karlosz (~karlosz@12.196.174.98) (Quit: karlosz)
[07:00:45] *** Joins: karlosz (~karlosz@12.196.174.98)
[07:04:09] *** Joins: lisp123 (~lisp123@45.86.202.96)
[07:05:54] *** Joins: selwyn (~selwyn@user/selwyn)
[07:07:20] *** Quits: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[07:09:12] *** Quits: lisp123 (~lisp123@45.86.202.96) (Ping timeout: 265 seconds)
[07:26:24] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[07:33:41] *** Quits: semz (~none@user/semz) (Ping timeout: 264 seconds)
[07:39:49] *** Joins: lisp123 (~lisp123@45.86.202.96)
[07:44:29] *** Quits: lisp123 (~lisp123@45.86.202.96) (Ping timeout: 265 seconds)
[07:46:08] *** Joins: semz (~none@user/semz)
[07:46:23] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[08:04:38] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[08:07:02] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Quit: Leaving...)
[08:09:08] <paule32> hello, what is wrong with this code: https://dpaste.com/5RX8SEKMD
[08:09:17] <paule32> i get debugger error
[08:13:47] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:e473:ba5e:85e3:6828)
[08:25:38] *** Joins: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49)
[08:25:38] <White_Flame> a "debugger error" would indicate that the debugger itself is broken
[08:26:08] <paule32> #<THREAD "main thread" RUNNING {10010B0523}>:
[08:26:09] <paule32>   unknown type specifier: ILLEGAL-FUNCTION-CALL
[08:26:50] <White_Flame> what is it saying is an illegal function call?
[08:27:39] <paule32> line 34 in paste ?
[08:27:53] <White_Flame> oh, huh interesting
[08:28:12] <White_Flame> in any case, you have (handler-case ((  where the double open paren where an expression should be is a syntax error
[08:28:42] <White_Flame> also, you're catching errors during execution of DEFVAR & DEFCLASS, usually not a source of runtime errors
[08:28:54] <White_Flame> but that is handler-casing your double open paren
[08:29:37] <paule32> common lisp sbcl
[08:29:43] <mfiano> I really hope this bad style of how to write expressions is not due to refusal to use Emacs and paredit/smartparens
[08:30:39] <White_Flame> you really don't want defvar/defclass/defanything to be wrapped in handler-cases, just let the compile time environment throw its own error handling at you
[08:31:17] <White_Flame> and if you're just exploring how handler-case work, then use more idiomatic runtime errors, like math on non-numbers or something
[08:31:19] <paule32> these are not user friendly
[08:31:50] <White_Flame> the user is a programmer, and all information suitable for programmer ingestion is there
[08:32:39] <White_Flame> but you're not allowing any stack trace or any additional information to be displayed in this code, so it's less friendly than the default debugger report
[08:33:00] <paule32> however (handler-case ( code ) (condition-type ) )  i expect that is like try except end in delphi
[08:33:22] <White_Flame> roughly speaking, yes
[08:33:42] <White_Flame> and you are legitimately catching your paren error
[08:34:06] <mfiano> ha
[08:34:30] <paule32> i don't know where the mistake is
[08:34:32] <mfiano> Yeah, this is very strange and likely not behaving as you'd expect, or as your users would expect.
[08:34:48] <White_Flame> (handler-case ((
[08:34:52] <White_Flame> double open paren (ignoring comments)
[08:35:13] <mfiano> ((...)) is an invalid function call.
[08:35:25] <White_Flame> your 3 forms are being taken as in (<function> <param> <param1>)
[08:35:32] <mfiano> You can't just wrap multiple forms in an extra level of parentheses like that
[08:35:42] <paule32> in paste line:4 (handler-case (
[08:35:45] <White_Flame> the 3 being defvar/defclass/quit (if I'm reading right)
[08:35:55] <mfiano> line 11 adds another (
[08:36:13] <paule32> yes
[08:36:20] <paule32> this for defvar
[08:36:22] <White_Flame> you are also having DEF* forms as non-toplevel which might yield weird results
[08:36:26] <mfiano> paule32: listen
[08:36:40] <mfiano> line 4 is (handler-case (. line 11 is (....
[08:36:48] <mfiano> combined that is handler-case ((...
[08:36:52] <mfiano> that is invalid code!
[08:37:19] <paule32> so, i can't catch syntax error's
[08:37:22] <paule32> strange
[08:37:25] <White_Flame> a single expression ((defvar ...) (defclass ..) (quit)), where the entire DEFVAR _expression_ is in the function position, and the other 2 expressions are taken as parameters to that mis-specified functino
[08:37:28] <mfiano> not like that
[08:38:19] <White_Flame> if this is supposed to be just for defvar, I have no idea what you're doing
[08:38:22] <mfiano> You said you read PCL already years ago. I would consider reading it again.
[08:38:26] *** Joins: frgo (~frgo@p200300deef0cee00b0ea14751ba29eda.dip0.t-ipconnect.de)
[08:38:36] <White_Flame> syntax errors are for you the programmer to get hit with at compile-time, not to push off to your users at runtime
[08:38:52] <paule32> yes
[08:39:03] <paule32> but this is a simple statement
[08:39:12] <White_Flame> (and technically this is not a syntax error, it parses as a syntactically valid expression, with a semantically invalid function)
[08:39:12] <mfiano> statement?
[08:39:47] <White_Flame> hence the illegal function call error, since the _expression (defvar *app-lang* de) is not a function itself
[08:39:49] <paule32> if you see to javascript - there you can create a promise, and when the interpreter find a problem (syntax, type...) it prompt you why
[08:40:32] <paule32> also i mean, you can customize the output
[08:40:55] <White_Flame> also, why do you have (quit) in there?
[08:41:21] <paule32> that sbcl to get back to the cli prompt
[08:41:23] *** Quits: karlosz (~karlosz@12.196.174.98) (Ping timeout: 252 seconds)
[08:41:35] <White_Flame> so you're not using slime?
[08:41:42] <paule32> no
[08:41:52] <White_Flame> are you using any sort of lisp-aware editor?
[08:42:01] <paule32> no, notepad++
[08:42:06] <White_Flame> why?
[08:42:23] <White_Flame> emacs is a dynamic runtime system.  working with non-integrated editors just makes tons more work for you
[08:42:25] <paule32> lightweight, syntax highlight
[08:42:29] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Ping timeout: 252 seconds)
[08:42:30] <White_Flame> erm, s/emacs/lisp/ :-P
[08:42:39] <White_Flame> but you don't get the lisp environment
[08:42:42] *** Quits: frgo (~frgo@p200300deef0cee00b0ea14751ba29eda.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[08:42:51] <paule32> i have the console
[08:42:57] <paule32> and clisp sbcl
[08:43:29] <White_Flame> and no way to integrate your editing/repl environment together with the running lisp image
[08:44:23] <paule32> sure, but why, i familiar with fast typing the keyboard, not mouse and so on, notepad++ is faster as emacs for me
[08:44:30] <paule32> multiple files open
[08:44:34] <paule32> ...
[08:44:52] <mfiano> paule32: Common Lisp is an interactive language. You can't just write code and compile it.
[08:45:06] <mfiano> You are definitely on the wrong path
[08:45:08] <White_Flame> because you don't get any features, like sldb, jumping to definitions, being able to easily expand stuff from the backtrace, have errors underline in your source code buffers, etc etc just for starters
[08:45:29] <paule32> who says that i need it
[08:45:31] <White_Flame> or even the ability to easily redefinine functions on the fly
[08:45:38] <White_Flame> your debugging environment is crippled
[08:45:46] <White_Flame> you need it to answer the basic questions you're asking here
[08:46:27] <paule32> i using notepad++ for all things c,c++,pascal,php,asm,html,xml,js,lisp ...
[08:50:15] <mfiano> All of those except Lisp are not image-based languages
[08:50:56] <moon-child> js is
[08:50:58] <moon-child> kinda
[08:51:15] <mfiano> I wouldn't say it is
[08:51:23] <White_Flame> the only place you get that is in the browser console, not in the editor
[08:51:27] <Qwnavery> heeloo
[08:51:40] <Qwnavery> howdy all
[08:51:45] <moon-child> White_Flame: only because no one has designed an editor which knows how to speak to the image
[08:52:11] <White_Flame> funny thing is that the javascript dev tools in the browser are probably the vaguely closest modern equivalent to what lisp machines did with live object on the display
[08:52:33] <aeth> XML isn't an image-based language yet?
[08:52:40] <aeth> I thought there was an extension for everything!
[08:52:49] <moon-child> White_Flame: indeed
[08:52:51] <Qwnavery> White_Flame: you give me a terrible idea. write a lisp ide as a web daemon
[08:52:55] <Qwnavery> x_x
[08:52:57] <moon-child> aeth: xml is a data format, you can do whatever you like
[08:52:59] <moon-child> Qwnavery: jscl?
[08:53:14] <Qwnavery> moon-child: good god it's not already a thing is it?
[08:53:15] <aeth> and asm is, well, you can do whatever you want there, too
[08:53:26] <paule32> stop
[08:53:32] <moon-child> aeth: indeed
[08:53:40] <White_Flame> (time (hammer))
[08:53:52] <aeth> CLISP bytecode is an asm language from a certain point of view
[08:53:59] <Qwnavery> moon-child: put that back in it's box or so help me
[08:53:59] <paule32> i would like catch exception, not discuss emacs or so
[08:54:04] <White_Flame> CPUs are just interpreters for a specific bytecode
[08:54:08] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[08:54:17] <White_Flame> *hardware interpreters
[08:54:30] <moon-child> Qwnavery: there's an official w3c lisp that uses xml syntax
[08:54:42] <moon-child> i thought it was a joke.  It is not.  Can't find the link now
[08:54:54] <Qwnavery> moon-child: ._. that's so counter-intuitive
[08:55:20] <Qwnavery> xml syntax..
[08:55:22] * Qwnavery vomits
[08:56:10] <moon-child> as erik naggum tells us: Robbery is not just another way of making a living, rape is not just another way of satisfying basic human needs, torture is not just another way of interrogation.  And XML is not just another way of writing S-exps.  There are some things in life that you do not do if you want to be a moral being
[08:56:45] <mfiano> paule32: I don't think anyone can help you. You clearly do not understand Lisp if you are not using the interactive development features, nor do you understand code vs data given your initial problem. This can only be solved by going back to the fundamentals by reading some books.
[08:56:52] <mfiano> I am giving up now.
[08:57:47] <White_Flame> paule32: you are already handling a condition
[08:58:04] <White_Flame> since your intended handler case was executed & printed your desired error message
[08:59:07] <Qwnavery> moon-child: at least it lives up to the lisp law: if you've thought of it, it's probably already been half-baked by several independent lisp hackers
[08:59:09] <White_Flame> (CL does not call them "exceptions", and they do not work like "exceptions" as they function without unwinding the stack, depending on how you register it)
[08:59:28] <White_Flame> plus there's restarts and other things that exceptions can't do
[09:00:05] *** Quits: seok- (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au) (Read error: Connection reset by peer)
[09:00:18] <White_Flame> but as far as (from what I can tell) catching an error from some broken code you have and printing it manually, you've got it
[09:00:37] <moon-child> White_Flame: phoe implemented the condition system in java
[09:00:52] <White_Flame> sure, turing completeness
[09:01:37] <moon-child> Turing completeness means that, using java, you can devise an interpreter for a language which has conditions.  Not that you can have conditions _in java, as part of the language_
[09:01:51] <White_Flame> ah, cool
[09:02:16] <White_Flame> I haven't used java in a long time, I know they've added a lot of meta functionality in the last 10 or so versions since I've touched it :-P
[09:03:43] <moon-child> guy steele tried to get operator overloading into java 1.0.  Decades later, it's still not there!
[09:04:31] <mfiano> At least it's not "My way or the highway" anymore.
[09:04:37] <mfiano> ref: https://i.lisp.cl/KCpMfx.png
[09:08:00] *** Joins: karlosz (~karlosz@12.196.174.98)
[09:11:46] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 245 seconds)
[09:13:34] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[09:19:16] *** Quits: CptKirk (~CptKirk@70-57-27-195.hlrn.qwest.net) (Ping timeout: 256 seconds)
[09:23:46] <hayley> Bracha's closure proposal seems a lot better than the one we got IMO.
[09:23:51] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 245 seconds)
[09:24:10] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[09:24:39] <moon-child> closure proposal?
[09:25:30] <beach> I was going to ask the same.
[09:27:14] <hayley> This isn't #lispcafe, come to think of it. I'll look it up, but Gilad Bracha had another closure proposal for Java.
[09:28:37] <hayley> http://www.javac.info/closures-v05.html It includes "real" function types like {int, String => Number throws IOException} rather than the current Java closures, which are limited by requiring you to have an appropriate interface type handy.
[09:29:56] <moon-child> ahh.  If one is to use java, it certainly seems like a good idea to have a type for functions
[09:30:21] <moon-child> however also somewhat inconsistent--as there are otherwise no functions which are not methods (of some specific object, or static)
[09:30:49] <moon-child> (I think a worthwhile inconsistency.  No functions is dumb)
[09:34:41] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 245 seconds)
[09:37:41] *** Joins: shka (~herr@109.231.6.176)
[09:37:58] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[09:44:29] <paule32> for month ago, i have learn, that global variables or global constants should be pre, and suffix with a asterisk sign: *foo*
[09:45:04] <paule32> but when i do this now in sbcl, i get error, also: (defvar *foo* 1)  result in error
[09:45:05] <ecraven> this used to be used for *special* global variables, right? not necessarily all global ones?
[09:45:27] <paule32> when i use (defvar foo 1) all well
[09:45:47] <moon-child> ecraven: what non-special global variables are there?  Obviously you should not put earmuffs on global functions
[09:46:09] <ecraven> moon-child: not sure, are all global variables in CL automatically special?
[09:46:14] <mfiano> All global non-constant variables are special.
[09:46:25] <mfiano> However, the standard predates the convention
[09:46:36] <White_Flame> paule32: constants should have +plus-signs+
[09:46:41] <mfiano> So most-positive-fixnum etc are not
[09:46:48] <moon-child> I was about to mention that
[09:46:50] <moon-child> ._.
[09:46:51] <mfiano> or well that's a constant, yeah
[09:47:02] <mfiano> i'm going to bed now before i make anymore fool of myself
[09:47:27] <paule32> mfiano: good dreams, thx for discuss
[09:47:36] <White_Flame> sb-ext:defglobal would be a non-special global, as far as I understand the terminology, I think
[09:47:40] <White_Flame> (obviously not standard)
[09:48:09] <mfiano> White_Flame: Yep, but I would urge you to use global-vars instead
[09:48:25] <paule32> so, global variables = *foo*, and constants +foo+ ?
[09:48:35] <White_Flame> personally, I would love a thread-local-only declaration for performance in most of my usage
[09:48:40] <White_Flame> paule32: yes
[09:48:45] <paule32> thx
[09:48:54] <mfiano> paule32: Yes, though they are only global if you treat them as such
[09:49:02] <mfiano> They introduce a stack of multiple bindings
[09:49:23] <paule32> the stack is limited ?
[09:49:41] <White_Flame> almost every language has a stack of limited size
[09:49:47] <mfiano> Only by your heap
[09:49:49] <White_Flame> or I should say of fixed size
[09:50:07] <paule32> White_Flame: yes, but i thought it is lisp :)
[09:50:18] <White_Flame> oh right, the binding stack.  the call stack is generally always fixed/limited
[09:51:19] <paule32> does lisp use the gmp lib for such huge math number length?
[09:51:45] <mfiano> No, but an implementation might
[09:51:53] <mfiano> (SBCL does in a contrib module)
[09:52:33] <mfiano> A CL implementation might run on a system without libc, so this is not something for the standard to decide on.
[09:52:40] <mfiano> Look at Mezzano
[09:52:45] <paule32> a little homework: given 11 questions, 4 students, what is the smallest class of students that can have a change of 8 right answers ?
[09:52:48] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[09:54:09] <mfiano> Maybe ask in #lispcafe
[09:54:11] <paule32> i don't know, if the formular: n/k = n! / (n - k)!
[09:55:12] <paule32> n := 11
[09:55:16] <paule32> k := 4
[09:55:46] <mfiano> paule32: This is not the right place for such questions.
[09:55:49] <mfiano> Keep it on topic
[09:56:40] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[09:57:52] *** Joins: amb007 (~a_bakic@254.150.22.93.rev.sfr.net)
[09:57:58] <moon-child> mfiano: a CL implementation might compile gmp _to_ lisp and run that way
[09:58:24] <moon-child> :)
[10:01:01] *** Quits: karlosz (~karlosz@12.196.174.98) (Ping timeout: 252 seconds)
[10:01:43] *** Joins: gaqwas (~john@dynamic-095-118-061-019.95.118.pool.telefonica.de)
[10:07:48] <beach> paule32: You really should take your problems to #clschool.  You are generating a lot of irrelevant noise here.
[10:09:03] *** Quits: robin (~robin@user/terpri) (Read error: Connection reset by peer)
[10:09:22] *** Joins: robin (~robin@user/terpri)
[10:15:29] <paule32> https://dpaste.com/FH4CDHXFX
[10:15:35] <beach> paule32: You really should take your problems to #clschool.  You are generating a lot of irrelevant noise here.
[10:25:53] *** Quits: amb007 (~a_bakic@254.150.22.93.rev.sfr.net) (Ping timeout: 252 seconds)
[10:26:11] *** Joins: amb007 (~a_bakic@248.151.22.93.rev.sfr.net)
[10:35:25] *** Joins: frgo (~frgo@p200300deef0cee00384c8c61d9900da9.dip0.t-ipconnect.de)
[10:42:50] *** Quits: amb007 (~a_bakic@248.151.22.93.rev.sfr.net) (Ping timeout: 265 seconds)
[10:43:18] *** Joins: amb007 (~a_bakic@194.149.22.93.rev.sfr.net)
[10:46:15] *** Joins: rotateq (~user@b2b-78-94-235-194.unitymedia.biz)
[10:54:35] *** Quits: amb007 (~a_bakic@194.149.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[10:54:54] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:00:51] *** Joins: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu)
[11:11:30] *** Joins: karlosz (~karlosz@12.196.174.98)
[11:19:21] *** Quits: karlosz (~karlosz@12.196.174.98) (Quit: karlosz)
[11:35:14] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:38:39] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:00:50] *** Quits: elderK (uid205007@id-205007.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[12:10:31] *** Quits: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49) (Ping timeout: 245 seconds)
[12:11:43] *** Joins: cosimone (~user@151.14.38.15)
[12:13:08] *** Quits: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu) (Ping timeout: 252 seconds)
[12:22:26] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[12:28:00] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[12:38:16] *** Quits: dre (~dre@2001:8003:c932:c301:d44a:8295:7928:835) (Quit: Leaving)
[13:31:46] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Ping timeout: 245 seconds)
[13:33:32] *** Joins: random-nick (~random-ni@87.116.165.220)
[13:37:24] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[13:37:36] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 245 seconds)
[13:38:01] *** Joins: amb007 (~a_bakic@242.149.22.93.rev.sfr.net)
[13:38:01] *** Quits: amb007 (~a_bakic@242.149.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[13:38:16] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[13:40:18] <jeosol> Good morning all!
[13:40:39] <jeosol> I have a question and may be someone has a better idea.
[13:42:17] <jeosol> I am trying to do remote functions on a repl using swank-client by calling a function (e.g., function-on-remote) in the other repl session: see this paste for an example code : https://paste.ofcode.org/UYgfqiKavdGihZwbiWehcE
[13:42:36] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 245 seconds)
[13:43:33] *** Joins: amb007 (~a_bakic@242.149.22.93.rev.sfr.net)
[13:43:42] <jeosol> How can I get away with compiling the caller without know function-on-remote? Why I need this, I am trying to reduce coupling between the codes. Not sure if that is clear
[13:45:36] <jeosol> Summary, I have two repls running A and B. I want to send computations to be performed on B where the function above 'function-on-remote is defined.
[13:55:52] <pjb> jeosol: so, without going thru emacs, right?
[13:55:54] *** Quits: amb007 (~a_bakic@242.149.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[13:56:10] <jeosol> No, I am ok using emacs
[13:56:21] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[13:56:32] <pjb> Isn't  swank-client a CL module running in CL to connect to another CL running swank-server?
[13:56:42] <jeosol> I want to be able to build and run A without knowing about that function. For now it works but I have to link in that function
[13:56:55] <jeosol> pjb: yes, that is what it does
[13:57:05] <jeosol> Pardon, if my question was not clear. It is one of reducing coupling
[13:57:33] <jeosol> I want to be able to take a form from A (A has hunchentoot server) and then send that computation to B for evaluation
[13:57:57] <pjb> So, something like (remove-eval *remote-host* expression) ?
[13:58:02] <pjb> s/remove/remote/
[13:58:26] <jeosol> yeah, yes, which the snippet does but it seems A needs to know about function-on-remote which is defined in B
[13:58:52] <pjb> How else could it call it without knowing it?
[13:58:54] <jeosol> I would prefer to keep A small by decoupling it so it's just the server while the other repl B is a large code base
[13:59:07] <jeosol> pjb: good question, I am trying to cheat I guess
[13:59:31] <jeosol> It's a fixed computation that is farmed out to B
[13:59:37] <pjb> The only way would to define a protocol, sending a message, that would end in calling the remote function. But you'd need to have a mapping between messages and functions on the server, and that would still be coupling.
[13:59:46] <pjb> The only question is what you consider the public API.
[13:59:52] <pjb> The function name, or the message name??
[14:00:42] <jeosol> For now, say an HTTP post, i extract the parameters and the pass that to B for evaluation
[14:01:01] <pjb> If you use a remote-eval (kind of RPC), with the advantages linked to it, such as implicit wrapping and forwarding of arguments and results, then defining the API in terms of functions is natural.  You can write API functions on the server if you want to hide the actual implementation function.
[14:01:33] <jeosol> I have dedicated repls say B1, B2, B3, that each evaluate different functions, for a simple example, say B1 evaluates sin(x), and B2 evaluates cos(x) and B3 evaluates tan(x)
[14:01:48] <pjb> There's not much difference between: (remote-eval *server* `(compute-result ,input)) and (send-message *server* `(compute-result ,input))
[14:02:08] <pjb> jeosol: you may define a common API.
[14:02:15] <jeosol> true
[14:02:53] <jeosol> I guess I have to study that more, perhaps it's a better option. I would like to avoid the coupling if there is a way
[14:02:58] <pjb> On each server you have a different function: (defun perform-computation (x) (sin x))  and the client can use this API  (remote-eval *server* `(perform-computation ,input))  and getting different results from different servers.
[14:03:35] <jeosol> yes, that's essentially what I am trying to achieve, works with the snippet so far, but I don't like the coupling
[14:04:06] <pjb> Inside the server, you could code it as (defvar *compute-function*) (defun perform-computation (x) (funcall *compute-function* x))  (setf *compute-function* (function my-compute-function #|sin, cos, whatever|#))
[14:04:12] <jeosol> pjb: thanks for brain storming this, good ideas
[14:04:20] <jeosol> *brainstorming
[14:07:05] <jeosol> above, did you say mean each server above?
[14:07:37] <jeosol> ah I guess that's the different. For now, I am using one that mimicks (not exactly) a load balancer.
[14:08:25] <jeosol> the one server takes all requests and then the farming is done based on the port which is part of the input received from the request
[14:09:04] *** Quits: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de) (Read error: Connection reset by peer)
[14:18:25] *** Quits: frgo (~frgo@p200300deef0cee00384c8c61d9900da9.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:18:35] *** Joins: frgo_ (~frgo@p200300deef0cee00384c8c61d9900da9.dip0.t-ipconnect.de)
[14:19:35] <pjb> jeosol: yes, each server would have a different (setf *compute-function* …) expression.
[14:19:50] <pjb> jeosol: but they would have the common API function perform-computation.
[14:21:28] <jeosol> pbj: thanks.
[14:21:40] <jeosol> pjb: thanks. I see what you meant
[14:22:44] <pjb> jeosol: now if the question is to fork out workers, there are other systems? Perhaps https://github.com/brown/swank-crew or https://cliki.net/distributed
[14:23:06] <jeosol> So what I have now, is a function defined in the single server and then the port is what is different, and by that port, I have a mapping to the different functions but otherwise the arguments are same
[14:23:11] <jeosol> will check the link
[14:23:11] <pjb> jeosol: for example, lfarm based on lparallel.
[14:23:35] *** Joins: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b)
[14:23:45] <pjb> https://github.com/lmj/lfarm
[14:23:50] <pjb> (it's in quicklisp)
[14:24:27] <pjb> jeosol:  don't use only the port to identify the servers. Use the address and the port.  Then you can distribute the server over other computers.
[14:24:56] <jeosol> pjb: sorry, it's both, there is hostname and port
[14:24:58] <pjb> I'm sure you have access to half a dozen computers, between servers, desktops, laptops, raspberri pi, android phones, etc,
[14:25:10] <jeosol> but I am checking the links to see if there is a better name
[14:25:17] <jeosol> I meant host ip address above
[14:25:36] <jeosol> pjb: I was sloppy there, but you are correct
[14:27:13] <jeosol> I am not sure if my original approach makes sence, but essentially, my end goal is that. If one user says to want to perform sin(x) computations, I have a  repl running and decidated for that with my previous approach. Ideally, I want to start this repl like starting a container in AWS or GCP
[14:27:44] <jeosol> and then if I get more sin(x) users, and the load on the one is more, I spin more and the server can distribute the work
[14:28:40] <jeosol> Now, there is probably a better way to do all this. Ideally, I start those repls by hand. I looked into docker a bit, but the computations going into the container appears slow compared to repl (B) running natively
[14:29:04] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[14:29:30] <jeosol> might be an issue with my docker setup, but that is a secondary issue. I want to be able to distribute work with the client not knowing the work being sent out
[14:33:50] <pjb> jeosol: have a look at lfarm.
[14:33:56] <pjb> It seems to match what you want.
[14:33:59] <jeosol> pjb: I'd look into lfarm. I think shka, phoe  or someone recommended it when I describe a similar problem I was having
[14:34:15] <jeosol> pbj: you read my mind. I just read the github page
[14:34:24] <jeosol> I does match what I am trying to achieve
[14:34:32] <pjb> You may have to add management of dynamically allocated server, and adding them to your lfarm.
[14:35:28] <jeosol> it also seems to have a broadcast-task. I have have to use swank-client to execute (ql:quickload :system) on those remote repls to do an update after change code
[14:36:03] <jeosol> pbj: that's something I think I will need. If I am able to achieve that on the CL side, better
[14:36:56] <jeosol> I was testing with port ranges, say 50100-50150 dedicated to sin(x) type requests
[14:37:28] <jeosol> I would prefer not to have these complicated could-based solutions if I can get away with it
[14:38:39] <jeosol> pbj: your help with this is much appreciated. I owe you some beer if you drink, or something else if you don't, perhaps at the next ELS if I can make it
[14:44:27] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[14:44:34] *** Joins: scymtym (~user@ip6-2001-638-504-20d0-1000-0-0-1.VPN.Dyn.CIT-EC.NET)
[14:48:06] *** Joins: selwyn (~selwyn@user/selwyn)
[14:51:12] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[15:06:17] <shka> pjb: sounds like me :P
[15:09:21] *** Joins: santiago` (~user@185.124.31.61)
[15:10:06] *** Joins: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de)
[15:11:42] *** Joins: iamFIREc1 (~iamFIREcr@user/iamfirecracker)
[15:14:28] *** Quits: iamFIREcracker (~iamFIREcr@user/iamfirecracker) (Ping timeout: 265 seconds)
[15:20:06] *** Joins: scymtym_ (~user@ip-94-114-248-79.unity-media.net)
[15:21:16] *** Quits: scymtym (~user@ip6-2001-638-504-20d0-1000-0-0-1.VPN.Dyn.CIT-EC.NET) (Ping timeout: 252 seconds)
[15:23:13] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:30:04] *** Quits: rotateq (~user@b2b-78-94-235-194.unitymedia.biz) (Ping timeout: 252 seconds)
[15:39:23] *** Quits: scymtym_ (~user@ip-94-114-248-79.unity-media.net) (Quit: ERC (IRC client for Emacs 28.0.50))
[15:41:25] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[15:42:02] *** Joins: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net)
[15:52:18] *** Joins: Bike (~Glossina@71.69.170.70)
[15:52:18] *** ChanServ sets mode: +o Bike
[15:53:39] <jeosol> shka: Yeah, I was referring to you
[15:57:11] *** Joins: selwyn (~selwyn@user/selwyn)
[15:57:57] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[15:58:21] *** Joins: selwyn (~selwyn@user/selwyn)
[15:59:54] <pjb> jeosol: I heard the next ELS was in Porto; I might go there. But we'll see the situation then.
[16:00:54] <flip214> pjb: the 2022 one?
[16:01:35] <flip214> Do you have a date for me, so that I can block the relevant days already?
[16:02:09] <Duuqnd> I don't think the details have been announced yet
[16:03:13] <beach> It is co-located with <Programming> so the dates may be announced.
[16:04:10] <beach> March 21-25 for the entire <programming> conference.
[16:04:23] <beach> So maybe 21-22 for ELS, I am guessing.
[16:05:40] <flip214> beach: thanks a lot!
[16:05:47] <beach> Sure.
[16:08:33] <jeosol> pjb: interesting. Never been to that city
[16:11:06] <jackdaniel> mm, sounds like some tasty alcohol :)
[16:13:14] <pjb> jackdaniel: of course, while in Porto, binge on Porto!
[16:13:14] <pjb>  
[16:13:14] <pjb>  
[16:15:01] <pjb> next time you go to Camembert, be sure to binge on Camembert cheese: https://www.google.com/maps/place/La+Maison+du+Camembert/@48.8927537,0.1546184,7016m/data=!3m1!1e3!4m13!1m7!3m6!1s0x47e1e5588ac14a37:0x40c14484fb82040!2s61120+Camembert!3b1!8m2!3d48.893622!4d0.177487!3m4!1s0x47e1eff6b26dbce1:0xa4025c1bd68ad3de!8m2!3d48.8937422!4d0.1774189
[16:15:34] *** Joins: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net)
[16:20:15] *** Joins: Posterdati (~posterdat@host-95-235-15-123.retail.telecomitalia.it)
[16:23:27] <flip214>  ... queue same joke about "Edam"
[16:23:56] *** Quits: cosimone (~user@151.14.38.15) (Remote host closed the connection)
[16:25:11] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[16:27:32] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[16:29:12] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[16:33:24] *** Joins: Lycurgus (~juan@98.4.112.204)
[16:35:51] *** Joins: attila_lendvai (~alendvai@apn-94-44-240-35.vodafone.hu)
[16:37:27] <paule32> hello
[16:40:09] <jackdaniel> hey
[16:44:59] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[17:05:18] <nick3000> Does anyone have any favorite libraries for plotting?
[17:05:31] <nick3000> There are so many I'm trying to narrow it down without trying every single one.
[17:06:37] <beach> nick3000: What kind of plotting?
[17:07:18] <nick3000> Mostly 2D scatter plots
[17:07:33] <beach> So basically dots in 2 dimensions?
[17:07:47] <beach> Then I recommend McCLIM.  It is very nice these days.
[17:08:03] <nick3000> Okay I'll take a look at that.
[17:08:40] <beach> If you fire up the listener, you can just draw dots to *standard-output* using the CLIM DRAW-POINT* function.
[17:14:12] <_death> mcclim comes with scigraph, which can be used to plot.. there are many ways in which it can be improved, but if you just want to show a basic chart it seems to work
[17:14:56] <beach> True.  I forgot about scigraph.
[17:18:46] *** Joins: Josh_2 (~user@37.25.47.130)
[17:21:44] *** Quits: Josh_2 (~user@37.25.47.130) (Remote host closed the connection)
[17:22:02] *** Joins: Josh_2 (~user@37.25.47.130)
[17:22:48] <Josh_2> Hi all
[17:25:47] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[17:26:17] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[17:29:05] *** Joins: pve (~pve@37-33-119-137.bb.dnainternet.fi)
[17:30:56] <Josh_2> I am trying to use the MOP to add a method to a generic function on creation of that class, what method should I be specializing to do this? I have tried putting it in the compute-slots method for my metaclass I need to get the class name of the class being made that is inheriting its behaviour from that metaclass
[17:31:18] <beach> "that class"?
[17:31:47] <Bike> why not initialize-instance?
[17:32:02] <Bike> probably what i'd actually do is define my own defclass method that expands into a method definition, though
[17:32:08] <Bike> defclass macro*
[17:33:13] <Josh_2> Oh yeh that would work
[17:34:16] <Josh_2> if I use my own defclass I can use the defmethod macro rather than add-method
[17:34:31] <Josh_2> although it is pretty sweet just using a normal function to add a method
[17:36:50] *** Joins: jealousmonk (~user@2804:431:e7c5:e827:5c1c:24ea:7fec:c9e5)
[17:38:19] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[17:41:53] <pjb> Josh_2:  it's totally unrelated!
[17:42:08] <pjb> Josh_2:  with the CLOS, methods are attached to generic functions, not to classes.
[17:42:13] <Josh_2> Yes
[17:42:44] <Josh_2> I'm aware, but I'm trying to have the method added automatically when a class which uses my metaclass is created, not when an instance of that class is created
[17:42:50] <pjb> defmethod expands to an add-method call.
[17:42:56] <Josh_2> Yes
[17:43:13] <pjb> In that case, you will want to call add-method in one of the methods of your metaclass.
[17:43:48] <pjb> The point of having add-method/defmethod, is that the function can be called at run-time by other functions (or methods), while defmethod can be used at compilation-time as a toplevel form.
[17:44:05] <pjb> They're really two API to the same functionality.
[17:46:01] <Bike> Josh_2: to be clear, i meant you have (defmethod initialize-instance :after ((object metaclass) ...) (add-method ...)) so it's on class creation, not instance creation
[17:46:11] <Bike> also you might want to think about how redefinition will work
[17:46:17] <Josh_2> Yes I tried that
[17:46:44] <Josh_2> I think I will just go with the defclass wrapper
[17:47:21] <Josh_2> pjb: well I'm trying to have the method added at compilation time, so ima go with the macro with a defclass wrapper
[17:50:45] *** Quits: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net) (Remote host closed the connection)
[17:51:21] *** Quits: attila_lendvai (~alendvai@apn-94-44-240-35.vodafone.hu) (Read error: Connection reset by peer)
[17:52:10] *** Joins: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net)
[17:56:22] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:11:13] <saltrocklamp[m]> out of curiosity, why doesn't the SICL repo use git submodules for the dependencies, instead of cloning them in a script?
[18:11:19] <saltrocklamp[m]> submodules are a lot easier to work with than in the past
[18:12:18] <saltrocklamp[m]> ah, i answered my own question: because they're being installed to the user's quicklisp `local-projects` directory, not to the project local directory
[18:13:49] <beach> Very likely because I have no idea how to use GIT submodules, and my main mission is not to be a GIT expert, but to implement Common Lisp.  But what do you mean by "cloning them in a script"
[18:14:40] *** Quits: santiago` (~user@185.124.31.61) (Quit: ERC (IRC client for Emacs 28.0.50))
[18:15:34] <beach> Oh, you mean the external dependencies?
[18:16:23] *** Joins: santiago` (~user@185.124.31.61)
[18:17:35] <beach> saltrocklamp[m]: I did not do the README nor the script for cloning dependencies.  Someone who wanted SICL to be usable to others did.  But it is not usable to others (yet), so I am not working very hard to make that possible.
[18:18:05] <saltrocklamp[m]> yes, the external dependencies. and fair enough!
[18:18:51] <saltrocklamp[m]> working with submodules does require knowing some trivia about how they work, obviously it's your own project so you should do things as they work best for you, while it's still in "not usable to others" state
[18:19:07] <saltrocklamp[m]> i'd be happy to help w/ the git stuff if you are ever interested
[18:19:21] <beach> I'll keep that in mind.  Thank you.
[18:20:58] <beach> I guess I should set up a "steering committee" of people I know and trust to vote on suggestions like yours.  There are so many suggestions that I myself don't see the consequences of, so I would need a small number of people to help.
[18:26:27] *** Quits: jealousmonk (~user@2804:431:e7c5:e827:5c1c:24ea:7fec:c9e5) (Ping timeout: 240 seconds)
[18:45:32] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[18:46:21] *** Quits: santiago` (~user@185.124.31.61) (Ping timeout: 245 seconds)
[18:48:56] *** Quits: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net) (Read error: Connection reset by peer)
[18:50:18] *** Joins: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net)
[18:52:12] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[18:53:26] *** Joins: santiago` (~user@185.124.31.61)
[18:53:29] *** Joins: jealousmonk (~user@2804:431:e7c4:cbd0:1924:309c:6eaf:8e1b)
[18:57:05] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:02:47] *** Joins: mortemeur (~mortemeur@pool-173-76-107-201.bstnma.fios.verizon.net)
[19:04:16] *** Quits: santiago` (~user@185.124.31.61) (Ping timeout: 245 seconds)
[19:04:58] *** Quits: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net) (Remote host closed the connection)
[19:05:25] *** Joins: santiago` (~user@185.124.31.61)
[19:10:12] *** Quits: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net) (Remote host closed the connection)
[19:12:41] <shka> git submodules are kind of pain
[19:12:50] <shka> but they address a real problem
[19:14:11] <beach> And what problem is that?
[19:17:10] <mortemeur> I am trying to work with a project on windows, and it requires cl+ssl, but I get this error: https://gist.github.com/mortemeur/669ae16bb1a3ca41e3bcefa4fe5ba8dc
[19:17:16] <mortemeur> should I install openssl on windows?
[19:29:53] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[19:35:54] *** Joins: jkordani (~jkordani@c-69-255-2-251.hsd1.md.comcast.net)
[19:38:35] <pjb> shka: indeed.  Perhaps repo helps manage that?
[19:38:50] <pjb> At least, repo has some explicit manifest file.
[19:39:09] <saltrocklamp[m]> it lets you incorporate another git repo into your git repo, pinned to a specific commit. so the outer git repo actually tracks the pinned commits of the inner repos, so if you upgrade one of the inner repos you can commit that upgrade, and you can see the upgrade in the git diff. but you can still cd into the git repo and work on it like a normal git repo, e.g. make local changes and push them to some remote
[19:39:11] <pjb> mortemeur: yes, cl+ssl is a FFI to openssl.
[19:40:47] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 246 seconds)
[19:42:53] <saltrocklamp[m]> so the two main use cases are: 1) pinning vendored/bundled dependencies and distributing them to people who want to build from source, without needing a `get-dependencies.sh` script like sicl has currently, and 2) working on a project with dependencies on other projects, but where you might want to make changes to the dependencies in the process of working on the top-level project
[19:43:04] *** Joins: cosimone` (~user@93-44-184-7.ip98.fastwebnet.it)
[19:44:04] <mortemeur> pjb: thank you
[19:44:06] <beach> saltrocklamp[m]: Thanks for the summary.  Very helpful.
[19:45:06] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 245 seconds)
[19:46:05] *** Joins: khrbt (~znc@user/khrbt)
[19:47:22] *** Joins: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net)
[19:53:53] <etimmons> beach: salt rock lamp : CLPM is another option (shameless self plug)
[19:54:35] <etimmons> adding commits to dependencies is not as smooth as with submodules yet, but it is possible
[19:55:04] <etimmons> Plus you can perform many dep management tasks straight from your REPL :)
[19:56:12] <pjb> repo helps with commits and pushing on all the git repos it pulls.  I've not tried it in this aspect, from the summary doc, it looked like this part  was rather specialized to the needs of google though.
[19:57:12] <etimmons> pjb: That's what they use to manage the Android code base, right?
[19:57:19] <pjb> Yes.
[19:57:25] <saltrocklamp[m]> i haven't heard of repo or clpm
[19:57:26] <pjb> Note that repo can be used for other things.
[19:57:28] <saltrocklamp[m]> got any links?
[19:58:30] <pjb> Some links in this readme: https://github.com/informatimago/ergo
[19:59:16] <etimmons> <https://www.clpm.dev/> with a tutorial in slide form at <https://www.clpm.dev/tutorial/tutorial.html>
[20:02:14] <shka> what mortemeur said
[20:04:45] <saltrocklamp[m]> clpm looks really nice!
[20:05:20] *** Quits: Oladon (~olad@98.43.81.226) (Ping timeout: 250 seconds)
[20:05:38] *** Quits: luis (~luis@lisp/luis) (Ping timeout: 252 seconds)
[20:06:03] <saltrocklamp[m]> does it integrate w/ roswell at all?
[20:06:47] <saltrocklamp[m]> ah i see google repo is for managing a collection of git repos
[20:07:09] <saltrocklamp[m]> also, hey! someone already wrapped libgit2 and i didn't realize https://github.com/russell/cl-git/
[20:07:43] <saltrocklamp[m]> common-lisp-repo is no relation to google repo? they just share a name?
[20:07:52] <etimmons> I don't use roswell, so I honestly don't know what roswell integration would look like.
[20:08:03] <etimmons> But it can use roswell managed implementations
[20:09:33] <etimmons> cl-git is kind of old and has manually generated bindings, so it's out of date wrt current libgit2 versions. That's a major reason I chose to not extend it. (I also didn't like the licensing situation)
[20:10:56] <saltrocklamp[m]> noted. eric made a wrapper using their claw tool, but i don't think they intend to maintain it
[20:11:00] <saltrocklamp[m]> https://github.com/borodust/claw-git2
[20:11:30] <saltrocklamp[m]> > The lispified wrappers are very much in the experimentation phase, so I can't really recommend using it.
[20:11:30] <saltrocklamp[m]> :)
[20:11:40] <saltrocklamp[m]> oops, the :) was my addition
[20:12:44] <etimmons> I think you're mixing up me and borodust. I don't think borodust has any intention to maintain those. I plan to maintain my bindings once I finish the lispified wrappers :)
[20:12:55] <etimmons> (which also use claw)
[20:12:57] <saltrocklamp[m]> oh, sorry! i did mix you up
[20:13:04] *** Joins: luis (~luis@lisp/luis)
[20:13:04] *** ChanServ sets mode: +o luis
[20:13:54] <etimmons> The main reason I'm working on those wrappers is for CLPM, actually.
[20:14:34] <saltrocklamp[m]> wait... i didn't realize who i was talking to :D
[20:14:38] <borodust> saltrocklamp[m] etimmons: yup, exactly, steal it - i don't plan to keep them up to date
[20:14:44] <saltrocklamp[m]> this cold has addled my brain
[20:15:30] <saltrocklamp[m]> in any case, i'm not entirely sure how qlot does it, but the idea is that you can do `qlot exec cmd ...` and it sets things up to use your project-local systems instead of the global/system-wide ones
[20:15:38] <saltrocklamp[m]> it looks like clpm is similar
[20:16:04] <saltrocklamp[m]> i've struggled a bit getting qlot to work reliably so i'm happy to try switching. i am going through the clpm tutorial slides
[20:16:31] <saltrocklamp[m]> i see you have `clpm bundle exec`
[20:17:12] <etimmons> borodust: Thanks :) I'm also planning to steal your method of distributing the compiled lib in a separate project (but probably allow it to be turned off in case someone *really* wants to use their system libgit2 and knows the risks)
[20:17:54] <etimmons> salt rock lamp: yep! that command is equivalent to `qlot exec`
[20:18:23] <borodust> etimmons: no problemo, glad it helps)
[20:18:59] *** Quits: mortemeur (~mortemeur@pool-173-76-107-201.bstnma.fios.verizon.net) (Read error: Connection reset by peer)
[20:19:27] <saltrocklamp[m]> if you are looking to flesh out the repl interface, you might want to look at the julia package manager. my biggest complaint with it is that there's no standalone cli interface, but the repl interface is really interesting/powerful, and supports things like centrally-located "named" environments
[20:19:46] <borodust> etimmons: i saw twitter discussion about static linking - minor note: libc often tightly coupled to kernel api, so it's not always safe to run newer things on oldish systems
[20:20:41] <etimmons> salt rock lamp: I'll take a look at it! CLPM also supports centrally-located named environments (in addition to the project local ones)
[20:21:24] <borodust> smth in like this: https://unix.stackexchange.com/questions/9705/can-new-glibc-versions-be-used-with-an-old-kernel
[20:21:47] <borodust> not sure about musl, like, what are their guarantees about compat with kernels
[20:22:08] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[20:22:46] *** Joins: amb007 (~a_bakic@226.149.22.93.rev.sfr.net)
[20:23:08] <etimmons> borodust: I believe musl works all the way down to 2.6.something
[20:23:09] *** Quits: amb007 (~a_bakic@226.149.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[20:23:19] *** Joins: amb007 (~a_bakic@226.149.22.93.rev.sfr.net)
[20:23:20] *** Quits: amb007 (~a_bakic@226.149.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[20:23:33] *** Joins: amb007 (~a_bakic@226.149.22.93.rev.sfr.net)
[20:23:34] *** Quits: amb007 (~a_bakic@226.149.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[20:24:17] *** Joins: amb007 (~a_bakic@226.149.22.93.rev.sfr.net)
[20:24:22] <etimmons> I think the biggest concern is syscalls changing. It's been pointed out to me that Linux is an anomaly in guaranteeing a stable syscall interface. Darwin and BSDs can apparently change them on a whim
[20:25:11] <borodust> yup, that's why the note is minor - linking statically solves the problem only partially :)
[20:25:13] <etimmons> So I'm only doing static executables for Linux at the moment
[20:26:35] <etimmons> If a BSD user wants to use it, presumably they're comfortable with compiling things themselves :)
[20:27:04] <pjb> etimmons: indeed, there's a movement of developpers targetting the linux syscalls directly instead of the posix libc…
[20:27:25] <pjb> Given that some new useful linux syscalls don't make it into the posix API (or so slowly).
[20:30:03] <etimmons> I can see the attraction of that, but man it must be a pain to implement appropriate fallbacks. Especially when the libc folks have done it already!
[20:32:53] <shka> etimmons: also, this would work only for linux
[20:33:08] <shka> on BSD/OSX system api is not stable
[20:35:10] <etimmons> shka: Yep! I'm only doing static executables on Linux because of that.
[20:35:36] <etimmons> I forget who originally pointed that out to me, but I'm glad they did. Saved me a lot of work and future pain and suffering
[20:37:34] *** Quits: minion (~minion@common-lisp.net) (Remote host closed the connection)
[20:38:12] *** Joins: charles_ (~charles@cpe-76-186-124-165.tx.res.rr.com)
[20:38:48] *** Joins: minion (~minion@common-lisp.net)
[20:38:53] *** Joins: iamFIREcracker (~iamFIREcr@user/iamfirecracker)
[20:40:43] *** Joins: pve_ (~pve@37-33-119-137.bb.dnainternet.fi)
[20:41:34] *** Joins: scymtym_ (~user@ip-94-114-248-79.unity-media.net)
[20:41:34] *** Joins: markasoftware_ (~quassel@107.161.26.124)
[20:42:12] *** Joins: andreyorst_ (~andreyors@2.92.125.242)
[20:46:53] *** Joins: Inline (~Inline@2a02:908:1252:7a80:1feb:c0cd:e428:d19f)
[20:47:36] *** Quits: amb007 (~a_bakic@226.149.22.93.rev.sfr.net) (*.net *.split)
[20:47:36] *** Quits: santiago` (~user@185.124.31.61) (*.net *.split)
[20:47:36] *** Quits: pve (~pve@37-33-119-137.bb.dnainternet.fi) (*.net *.split)
[20:47:36] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (*.net *.split)
[20:47:36] *** Quits: iamFIREc1 (~iamFIREcr@user/iamfirecracker) (*.net *.split)
[20:47:36] *** Quits: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b) (*.net *.split)
[20:47:36] *** Quits: robin (~robin@user/terpri) (*.net *.split)
[20:47:36] *** Quits: shka (~herr@109.231.6.176) (*.net *.split)
[20:47:36] *** Quits: semz (~none@user/semz) (*.net *.split)
[20:47:36] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (*.net *.split)
[20:47:36] *** Quits: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa) (*.net *.split)
[20:47:36] *** Quits: santiagopim (~user@90.167.66.93) (*.net *.split)
[20:47:36] *** Quits: ahlk (~user@2600:1700:31c0:3a10::48) (*.net *.split)
[20:47:36] *** Quits: andreyorst (~andreyors@2.92.125.242) (*.net *.split)
[20:47:37] *** Quits: hirez- (~hirez@2602:ffc5:20::1:512e) (*.net *.split)
[20:47:37] *** Quits: specbot (~specbot@common-lisp.net) (*.net *.split)
[20:47:37] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (*.net *.split)
[20:47:37] *** Quits: markasoftware (~quassel@107.161.26.124) (*.net *.split)
[20:47:37] *** Quits: char (~charles@cpe-76-186-124-165.tx.res.rr.com) (*.net *.split)
[20:47:53] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[20:48:41] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 264 seconds)
[20:51:56] *** Quits: dstein64 (~dstein64@dannyadam.com) (Excess Flood)
[20:52:09] *** Joins: amb007 (~a_bakic@179.148.22.93.rev.sfr.net)
[20:52:09] *** Joins: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b)
[20:52:09] *** Joins: robin (~robin@user/terpri)
[20:52:09] *** Joins: semz (~none@user/semz)
[20:52:09] *** Joins: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa)
[20:52:09] *** Joins: ahlk (~user@2600:1700:31c0:3a10::48)
[20:52:09] *** Joins: hirez- (~hirez@2602:ffc5:20::1:512e)
[20:52:18] *** Joins: specbot (~specbot@common-lisp.net)
[20:52:51] *** Joins: dstein64 (~dstein64@dannyadam.com)
[20:53:32] *** Quits: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net) (Read error: Connection reset by peer)
[20:53:46] *** Quits: gaqwas (~john@dynamic-095-118-061-019.95.118.pool.telefonica.de) (Ping timeout: 265 seconds)
[20:54:06] *** Joins: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it)
[20:54:17] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[20:54:21] <saltrocklamp[m]> do i have this right? `proclaim`: global effect, it's not processed at compile time. `declaim`: global effect, and if it's a top-level form then it's processed at compile time. `declare`: allowed only in certain places of certain forms, local effect.
[20:54:44] *** Joins: gaqwas (~john@dynamic-095-118-061-019.95.118.pool.telefonica.de)
[20:55:03] *** Quits: hendursa1 (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[20:55:54] <Bike> essentially. keep in mind that declare expressions aren't actually forms and can't be evaluated.
[20:55:55] *** Joins: khrbt (~znc@user/khrbt)
[20:59:01] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[20:59:15] *** Joins: paule32_ (~paule32@user/paule32)
[20:59:42] *** Joins: X-Scale` (~ARM@46.50.4.194)
[21:01:30] *** Quits: X-Scale (~ARM@46.50.4.194) (Ping timeout: 265 seconds)
[21:01:30] *** X-Scale` is now known as X-Scale
[21:02:28] *** Quits: paule32 (~paule32@user/paule32) (Ping timeout: 265 seconds)
[21:02:28] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 265 seconds)
[21:02:43] *** Joins: shka (~herr@109.231.6.176)
[21:06:51] *** Joins: hendursaga (~weechat@user/hendursaga)
[21:07:41] *** Joins: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net)
[21:10:11] *** Joins: slyrus_ (~slyrus@192-184-223-165.static.sonic.net)
[21:10:28] <saltrocklamp[m]> ok, makes sense
[21:11:14] *** Quits: scymtym_ (~user@ip-94-114-248-79.unity-media.net) (Ping timeout: 260 seconds)
[21:12:40] *** Joins: flip214_ (~marek@h081217094109.dyn.cm.kabsi.at)
[21:12:45] *** Joins: prxq (~quassel@x4db53858.dyn.telefonica.de)
[21:12:55] *** Joins: childlikempress (~moon-chil@cardinal.elronnd.net)
[21:13:02] *** Joins: sjl_ (~sjl@cpe-66-66-5-59.rochester.res.rr.com)
[21:13:20] *** Joins: jdz_ (~jdz@185.23.160.114)
[21:13:27] *** Joins: bldr_ (~bull@185.117.72.168)
[21:13:27] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[21:13:29] <pjb> saltrocklamp[m]: of course, you can force a proclaim to be processed at compilation time, if  you wrap it in an eval-when like declaim does.
[21:13:47] <saltrocklamp[m]> ah, so that's how declaim works?
[21:13:49] <jeosol> etimmons: I recall you have a tool for making static executabe - , do you have a link handy?
[21:13:51] <pjb> (macroexpand-1 '(declaim (not-inline foo))) #| --> (progn (eval-when (:compile-toplevel) (ccl::compile-time-proclamation '((not-inline foo)) nil)) (eval-when (:load-toplevel :execute) (proclaim '(not-inline foo)))) ; t |#
[21:14:00] *** Joins: SAL9000_ (~SAL9000@shirakumo/sal9000)
[21:14:01] *** Joins: Faed (fade@outrider.deepsky.com)
[21:14:03] <pjb> saltrocklamp[m]: yes.
[21:14:08] *** Joins: andreyorst` (~andreyors@2.92.125.242)
[21:14:17] <saltrocklamp[m]> cool, ty
[21:14:28] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: andreyorst_ (~andreyors@2.92.125.242) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: phadthai (mmondor@user/phadthai) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: SAL9000 (~SAL9000@shirakumo/sal9000) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: moon-child (~moon-chil@cardinal.elronnd.net) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: flip214 (~marek@user/flip214) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: anddam (~anddam@user/anddam) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: bldr (~bull@185.117.72.168) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: Posterdati (~posterdat@host-95-235-15-123.retail.telecomitalia.it) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: prxq_ (~quassel@x4db53858.dyn.telefonica.de) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: Fade (fade@outrider.deepsky.com) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: jdz (~jdz@185.23.160.114) (Read error: Connection reset by peer)
[21:14:30] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: pve_ (~pve@37-33-119-137.bb.dnainternet.fi) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: tux0r (~tux0r@rosaelefanten.org) (Ping timeout: 265 seconds)
[21:14:33] *** Quits: _death (~death@adeht.org) (Ping timeout: 265 seconds)
[21:15:10] *** Joins: pve (~pve@37-33-119-137.bb.dnainternet.fi)
[21:15:26] *** Joins: Posterdati (~posterdat@host-95-235-15-123.retail.telecomitalia.it)
[21:15:38] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[21:16:21] *** Joins: tux0r (~tux0r@2a03:4000:34:5e:281e:e1ff:fe28:c3b5)
[21:17:54] *** SAL9000_ is now known as SAL9000
[21:18:06] *** Joins: adeht (~death@adeht.org)
[21:18:07] *** Quits: amb007 (~a_bakic@179.148.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[21:18:16] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[21:18:47] *** adeht is now known as _death
[21:19:13] *** Joins: akoana (~ah@user/akoana)
[21:20:02] <etimmons> jeosol: https://www.timmons.dev/posts/static-executables-with-sbcl-v2.html
[21:20:15] *** Joins: mortemeur (~mortemeur@pool-173-76-107-201.bstnma.fios.verizon.net)
[21:29:01] *** Joins: karlosz (~karlosz@47.180.55.252)
[21:29:21] *** Joins: anddam (~anddam@user/anddam)
[21:37:23] *** Joins: selwyn (~selwyn@user/selwyn)
[21:37:38] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[21:38:03] *** Joins: selwyn (~selwyn@user/selwyn)
[21:50:10] *** Joins: X-Scale` (~ARM@50.77.166.178.rev.vodafone.pt)
[21:50:34] *** Quits: X-Scale (~ARM@46.50.4.194) (Ping timeout: 252 seconds)
[21:51:59] *** X-Scale` is now known as X-Scale
[21:54:33] *** Joins: tyson2 (~user@bras-vprn-toroon020aw-lp130-30-184-148-172-130.dsl.bell.ca)
[22:03:04] *** Joins: lottaquestions (~nick@2607:fa49:503e:3000:1fb3:85e4:b473:1e4)
[22:07:06] <jeosol> etimmons: thanks
[22:07:06] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 250 seconds)
[22:07:23] *** Joins: X-Scale` (~ARM@46.50.4.85)
[22:07:35] <jeosol> I remember seeing the article before and hence me compiling with the :sb-linkable-runtime option
[22:07:44] <jeosol> so I get the sbcl.o file
[22:09:07] *** X-Scale` is now known as X-Scale
[22:10:00] *** Faed is now known as Fade
[22:10:32] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[22:13:40] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[22:15:01] *** Quits: tyson2 (~user@bras-vprn-toroon020aw-lp130-30-184-148-172-130.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[22:15:49] *** Joins: modula (~defaultxr@99-138-110-241.lightspeed.cicril.sbcglobal.net)
[22:16:54] *** Quits: defaultxr (~defaultxr@99-138-110-241.lightspeed.cicril.sbcglobal.net) (Ping timeout: 265 seconds)
[22:16:54] *** modula is now known as defaultxr
[22:21:59] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[22:22:43] *** Joins: srhm (~srhm@user/srhm)
[22:27:40] *** Quits: paule32_ (~paule32@user/paule32) (Ping timeout: 260 seconds)
[22:33:02] *** Joins: CptKirk (~user@071-085-094-005.biz.spectrum.com)
[22:33:36] <CptKirk> is there a way to use "lisp-mode" any time I open slime? I tried the basic versions I found from a simple search, but none seem to do the trick
[22:34:47] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[22:34:51] <Bike> the mode is per-buffer. usually if you open a file with .lisp extension emacs will put it in the correct mode. what particularly are you having a problem with?
[22:35:21] <CptKirk> I want to have emacs treat my slime buffer as though it were a lisp buffer
[22:35:31] <CptKirk> so that I get newlines and highlighting and paredit, etc
[22:35:55] <CptKirk> atm when I hit return in slime, it evaluates, no matter where my cursor is, and so I can't do newlines correctly
[22:35:59] <Bike> you mean the repl buffer?
[22:36:02] <CptKirk> eys
[22:36:13] <Shinmera> etimmons: I made another big step for Forge https://twitter.com/Shinmera/status/1443652788916039687
[22:36:21] <pve> CptKirk: you'll lose functionality
[22:36:26] <Bike> hm, i don't know how to do that. paren matching gets a little weird with the > prompts and output and stuff
[22:36:59] *** Joins: aeth (~aeth@user/aeth)
[22:37:14] <akater[m]> CptKirk: Consider enabling paredit-mode on its own.
[22:37:30] <CptKirk> well then how do you recommend I configure 'slime-mode so that I can actually use it for more than just evaluating from another buffer?
[22:37:38] <pjb> CptKirk: (add-hook 'lisp-mode 'paredit-mode)
[22:37:54] <CptKirk> but that's in lisp-mode, not in slime mode
[22:38:15] <pjb> CptKirk: you really don't want slime repl buffers to be lisp-mode. You want them to be slime-mode
[22:38:24] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[22:38:26] <CptKirk> no I don't want them to be lisp-mode
[22:38:32] <CptKirk> I want them to share the configuration with lisp-mode
[22:38:46] <pjb> CptKirk: you can activate paredit-mode in slime repl buffers, but it would deactivate itself soon, as soon as a non balanced parenthesis is printed.
[22:38:47] <pve> CptKirk: does enter in the repl window map to slime-repl-return?
[22:38:51] *** Quits: cosimone` (~user@93-44-184-7.ip98.fastwebnet.it) (Ping timeout: 250 seconds)
[22:39:08] <Bike> it's common to do any complicated code in another buffer rather than the repl
[22:39:14] <pjb> (format t "~{~D) Menu Item.~%~}" '(1 2 3))
[22:39:31] <akater[m]> I ended up writing ≈everything in Org blocks with poly-org.  It provides repl-like experience.  Apparently it's underappreciated.
[22:39:36] <mfiano> CptKirk: S-RET
[22:39:41] <pjb> CptKirk: Indeed, and using C-x C-e in the lisp-mode buffer to send the expression to slime.
[22:39:49] *** Joins: hendursaga (~weechat@user/hendursaga)
[22:39:59] <pjb> CptKirk: or even slime-eval-last-expression-in-repl
[22:41:23] <pjb> You can bind it eg. to A-e  (add-hook 'lisp-mode 'my-lisp-key-binding-meat) (defun my-lisp-key-binding-meat() (interactive) (local-set-key (kbd "A-e") 'slime-eval-last-expression-in-repl))
[22:41:37] <pjb> With that, you can send expressions from your lisp source to the repl.
[22:41:42] *** Quits: lottaquestions (~nick@2607:fa49:503e:3000:1fb3:85e4:b473:1e4) (Ping timeout: 268 seconds)
[22:41:47] <copec> I was going to ask if there were a way to scroll through last input in place in the slime repl instead of scrolling the buffer
[22:41:57] * copec looks up slime manual
[22:42:07] <CptKirk> but if I use <S-ret> there's no alignment, etc
[22:42:29] <mfiano> There is if you use aggressive-ident-mode
[22:45:20] <copec> Do you all use the default emacs keybindings?
[22:46:02] <mfiano> No
[22:46:15] <pjb> copec: with a lot of added custom key bindings.
[22:46:26] *** Quits: Skyfire (~pyon@user/pyon) (Ping timeout: 260 seconds)
[22:47:03] <mfiano> copec: C-A-r if IIRC
[22:47:11] <mfiano> and C-A-s for forward
[22:47:49] <mfiano> where A = M I suppose
[22:48:05] <akater[m]> copec: I use a mixture of defaults and xah-fly-keys (with some personal things on top of x-f-k) which is modal but non-vi.  And plenty of personal bindings independent of x-f-k.
[22:48:39] <contrapunctus> copec: I've used Evil, god-mode, and now a mix of Boon and my own hydra keys. I also use the Space key as Ctrl, which would also be helpful to anyone using stock Emacs keys with a keyboard whose modifiers are not under the thumbs.
[22:48:41] *** Quits: CptKirk (~user@071-085-094-005.biz.spectrum.com) (Remote host closed the connection)
[22:50:05] <copec> Apparently I've never used a keyboard where the modifiers are under my thumbs, emacs always makes me play twister with my fingers
[22:51:10] <akater[m]> I have SPC-‹smth› act as C-‹smth› as well… in X, that is.  Such behaviour is non-trivial to implement in Linux console (and I'm mostly in console).
[22:51:24] *** Joins: Skyfire (~pyon@user/pyon)
[22:52:26] <akater[m]> What is also important, I use programmer-dvorak so `(` is within the reach of (the left) index finger, and needs no S-.
[22:52:32] <Josh_2> Why do values in my slots sometimes end up as lists like (nil) and other times they are just nil? This is within my metaclass
[22:52:41] <Josh_2> Kind of annoying
[22:53:19] <Bike> how do you set them
[22:53:28] <akater[m]> And I realised I just never press `)` but I never did anything with this, sadly.
[22:53:52] <Josh_2> Using initargs Bike
[22:54:30] <Josh_2> hmm is it the distinction between initform and initarg?
[22:54:49] <Bike> so you have like, (make-instance class :foo nil :bar nil), but (foo instance) => nil while (bar instance) => (nil)?
[22:55:06] <Bike> it's impossible to answer your question without more detail. the system doesn't just randomly make things into lists
[22:55:43] <Josh_2> no no, in the class definition
[22:55:45] <Josh_2> One sec
[22:57:02] <Josh_2> like (defclas ... (<slots>) (:metaclass <my meta>) (:rate-limited-p nil)) etc
[22:57:34] <Josh_2> Seems that the initform is not a list but if I set it with an initarg then the value becomes a list
[22:57:45] <Bike> what initform?
[22:57:52] <Bike> you didn't write any initforms.
[22:57:52] <mfiano> I don't see an initform
[22:58:05] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:58:06] <Bike> is the problem rate-limited-p being (nil) where you expect it to be nil?
[22:58:24] <Bike> because that's part of the defclass macro, as explaind here http://metamodular.com/CLOS-MOP/the-defclass-macro.html
[22:59:04] <Bike> if you macroexpand the defclass form you'll probably see :rate-limited-p '(nil) in there
[23:00:28] *** Joins: lottaquestions (~nick@2607:fa49:503e:3000:e928:1558:13de:74e5)
[23:00:55] <Josh_2> Okay np
[23:01:23] *** Joins: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49)
[23:02:25] <lisp123> Does anybody have a link to the source code for CLiki? I saw it a while back but for the life of me can't find it again
[23:02:56] <etimmons> Shinmera: Congrats! I have a question, but I'll ask it on Twitter
[23:03:15] <Shinmera> Alright, though here works too :)
[23:04:21] <mfiano> It's a CLF project, so it's on the CL foundation's gitlab site
[23:06:20] <etimmons> Shinmera: ok. You said "The server will then compute the plan and send the necessary steps to the client to execute." But presumably the server can execute some of the steps as well, right?
[23:06:32] <etimmons> Such as compile-file, and then just tell the client to load it ?
[23:06:52] <Shinmera> I mean, it can insofar that it's a Lisp process, too. But that's really not the intended way of functioning.
[23:08:01] <Shinmera> You could theoretically devise an executor that performs any necessary compile-file operations on a different client, if that's a concern.
[23:08:11] <etimmons> Actually, maybe compile-file was a bad example since you want to ensure fasl compatibility
[23:08:46] <etimmons> but I thought steps like downloading files wouldn't be performed by the client
[23:08:56] <etimmons> But maybe you just don't consider that to be part of the plan
[23:09:24] <Shinmera> The plan will require file transfer if the machine the client is on does not have the necessary file to perform the step.
[23:09:52] <Shinmera> So for instance a file-step will have a dependency on an ensure-artefact-step which, well, ensures the file is present on the client's machine.
[23:10:10] <Shinmera> The server has a registry where it tracks what artefacts are present on what machine, and when the client connects it has to specify what machine it resides on.
[23:10:30] <etimmons> ok
[23:10:50] <Shinmera> This also allows it to transfer back a file such as a fasl from a different machine.
[23:11:00] <lisp123> mfiano: Thanks, found it
[23:11:02] <etimmons> and let's say that file needs to be downloaded from the internet. Would the plan tell the client to load an HTTP client and then download it?
[23:11:22] <Shinmera> No, it can't do that.
[23:11:36] <Shinmera> All files need to be trackable by the server.
[23:11:53] <Shinmera> So for instance all source files necessary for the compilation need to reside on the server's machine
[23:12:29] <Shinmera> If a client is then missing a file, the server will send it over.
[23:12:38] <etimmons> and how do you envision those source files getting to the server?
[23:12:50] <Shinmera> I have not thought about that part much.
[23:13:26] <Shinmera> For now the user will put them there in some way. Scanning for projects and such is completely undone and not thought about yet.
[23:13:35] <etimmons> OK. I guess I just jumped straight to that because that's the part that's been on my mind the most :P
[23:13:40] <Shinmera> Right.
[23:13:46] <Shinmera> I'm sure you have some good ideas there
[23:14:32] <Shinmera> What I'm thinking right now is that there might be a hook during the planning process that allows you to get in and intercept when there's an unresolved dependency, provide the sources, and then continue the plan somehow.
[23:15:12] <Shinmera> Though the downloading and such would definitely be a separate module, rather than being part of the core.
[23:15:24] <Shinmera> I imagine that's where you could come in :)
[23:15:36] <etimmons> Still, very cool. I don't know if you're considering this as well, but if you've got this client/server architecture already you may be able to use the server as a remote fasl cache.
[23:15:57] <Shinmera> I have not thought about it much, but sure.
[23:16:22] <Shinmera> There's still a lot of missing pieces
[23:16:34] <etimmons> Yeah, that's what I was thinking about part of the plan being executed server side. I can definitely see myself using this :)
[23:16:46] <Shinmera> I'm not 100% decided yet, but I think my next step is going to be implementing a Lisp module to actually perform some lisp compilation and loading.
[23:17:01] <Shinmera> etimmons: for that you can just spawn a client on the same machine as the server.
[23:17:41] <Shinmera> you could also spawn a client in the same process as the server
[23:18:48] *** Joins: tyson2 (~user@bras-vprn-toroon020aw-lp130-30-184-148-172-130.dsl.bell.ca)
[23:21:19] *** Quits: lottaquestions (~nick@2607:fa49:503e:3000:e928:1558:13de:74e5) (Ping timeout: 252 seconds)
[23:21:27] <etimmons> Ahhhh so a single session may involve more than one client? and those subsidiary clients could be dumb workers (i.e., they never ask the server how to do something, the server just tells them what to do)
[23:21:36] <Shinmera> yes
[23:21:40] <etimmons> very cool
[23:21:51] <etimmons> I missed that aspect of your vision earlier
[23:23:06] <Nilby> Sometime I dream of a quality declaration for compilation like (trust 0) which will compile it in a totally isolated environment, and (trust 3) that will block compile it in the same image with full storage access.
[23:23:13] <Shinmera> One of the primary goals for me is that you can say "load the client, ask it to load a system into my image, then remove the client" so you have a clean setup of that system to work with. This necessarily makes the clients extremely thin (I can't depend on any other libraries, for instance).
[23:23:42] <Nilby> even though I dislike the whole vague quality number thing
[23:24:06] <etimmons> Right, I am 100% onboard with that, which is why I was confused that it seemed like the client executed all steps.
[23:24:09] *** Joins: rotateq (~user@p200300e78715be00fdfeed040e17b750.dip0.t-ipconnect.de)
[23:24:19] <etimmons> But it makes total sense now if there are multiple clients participating in a session
[23:24:31] <Shinmera> potentially, yeah.
[23:24:42] <Shinmera> though I imagine the usual case for Lisp will still be single client.
[23:24:50] <Shinmera> thank god for fast compile times :)
[23:25:04] <etimmons> yeah, presumably single client is enough for most cases
[23:25:45] <Shinmera> Another goal is to allow you to depend on C/++/etc libraries as well, which will make the build happen with Forge as well. And for those you very much do want parallelisation.
[23:27:08] *** Quits: tyson2 (~user@bras-vprn-toroon020aw-lp130-30-184-148-172-130.dsl.bell.ca) (Remote host closed the connection)
[23:27:47] <etimmons> that's music to my ears. I love pure CL solutions, but sometimes you just need to reach for foreign libs. Having that be part of a unified build process would be amazing.
[23:27:56] <Shinmera> Yeah
[23:28:01] <Shinmera> Long way out though.
[23:28:26] *** Quits: Inline (~Inline@2a02:908:1252:7a80:1feb:c0cd:e428:d19f) (Ping timeout: 260 seconds)
[23:28:50] <etimmons> Do you have thoughts on how systems are declared yet?
[23:28:55] <etimmons> Probably not, but figured I'd ask
[23:29:05] <Shinmera> Nope!
[23:29:27] <Shinmera> I'd like a mix of declarative and functional though.
[23:30:00] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[23:30:01] <Shinmera> I think project definition is going to be the last thing I look at.
[23:30:21] <etimmons> So no :defsystem-depends-on causing arbitrary code to be loaded by simply reading the definition?
[23:31:07] *** Quits: minion (~minion@common-lisp.net) (Remote host closed the connection)
[23:31:20] <Nilby> The bane of a tool I was writing was arbitrary code in ".asd"s
[23:32:04] *** Quits: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:32:27] <etimmons> Nilby: same same
[23:33:01] *** Quits: specbot (~specbot@common-lisp.net) (Ping timeout: 245 seconds)
[23:33:32] *** Quits: madnificent_ (~madnifice@static.210.74.63.178.clients.your-server.de) (Ping timeout: 252 seconds)
[23:33:51] <Nilby> But I think it's totally reasonable to have to compute something during build. I just wish it was separated.
[23:34:27] *** Quits: easye (~user@oxi.slack.net) (Ping timeout: 240 seconds)
[23:34:30] *** Quits: okflo (~okflo@lisa.diesenbacher.net) (Ping timeout: 260 seconds)
[23:34:52] *** Quits: Shinmera (~shinmera@shirakumo/shinmera) (Read error: Connection reset by peer)
[23:34:53] *** Quits: sterni (~lukas@user/sterni) (Ping timeout: 264 seconds)
[23:34:58] *** Quits: Colleen (~fermion@supersolid.equilibrium.tymoon.eu) (Ping timeout: 260 seconds)
[23:35:11] *** Joins: Shinmera (~shinmera@shirakumo/shinmera)
[23:35:20] *** Quits: fe[nl]ix (~quassel@2a01:4f8:200:2425::adda) (Ping timeout: 265 seconds)
[23:36:32] *** Joins: specbot (~specbot@common-lisp.net)
[23:36:44] *** Joins: sterni (~lukas@user/sterni)
[23:36:45] <Shinmera> etimmons: that could potentially happen, but it would only be on the server itself.
[23:36:55] *** Joins: minion (~minion@common-lisp.net)
[23:36:57] *** Joins: fe[nl]ix (~quassel@2a01:4f8:200:2425::adda)
[23:36:57] *** ChanServ sets mode: +o fe[nl]ix
[23:37:09] <Shinmera> etimmons: I imagine that projects first define a list of modules they depend on (Lisp, C, whatever), which the server might not always load up front.
[23:37:42] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[23:37:42] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Read error: Connection reset by peer)
[23:37:42] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Read error: Connection reset by peer)
[23:37:56] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[23:37:56] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[23:37:57] *** Joins: okflo (~okflo@lisa.diesenbacher.net)
[23:38:04] *** Joins: madnificent (~madnifice@static.210.74.63.178.clients.your-server.de)
[23:40:50] <etimmons> Fair enough. I'm excited to follow this progress :)
[23:41:33] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[23:41:51] <etimmons> And happy to spitball dependency management ideas whenever it makes sense
[23:42:22] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:43:00] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:43:16] <Shinmera> Yeah
[23:43:27] <Shinmera> I'm still mostly busy with Kandria, so I have this on the backburner right now.
[23:44:12] <Nilby> I'm optimistic that you guys will materialize an awesome new ways of building.
[23:47:43] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[23:50:04] *** Joins: elderK (uid205007@id-205007.helmsley.irccloud.com)
[23:50:51] *** Quits: specbot (~specbot@common-lisp.net) (Remote host closed the connection)
[23:50:51] *** Quits: minion (~minion@common-lisp.net) (Read error: Connection reset by peer)
[23:51:07] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[23:51:56] *** Joins: minion (~minion@common-lisp.net)
[23:52:03] *** Joins: specbot (~specbot@common-lisp.net)
[23:52:04] <Shinmera> I'm materialising some way of building, whether it'll be awesome or not remains to be seen :)
[23:52:09] <etimmons> I'm honestly surprised at how much you've gotten done with Kandria on the front burner.
[23:52:36] <Shinmera> a lot of it was adjacent enough to kandria that I could use some of the time for it.
[23:53:15] <Shinmera> Forge, too, I have the excuse of "this is going to be important for modding" so it's still something I can invest some Kandria time into.
[23:53:24] <Nilby> I'm sure it will be. It won't be hard to be awesomer than asdf.
[23:55:41] <Shinmera> I feel like that's both disingenuous to ASDF's accomplishments and to what we're doing :u
[23:55:42] <etimmons> Speaking of Kandria, that reminds me I need to boot into Windows to give it a try... It's sluggish on my Linux partition and it wouldn't surprise me if my rather esoteric setup is to blame.
[23:56:37] <Shinmera> etimmons: If you hit F10 in the game, does anything obvious jump out from the diagnostics it displays?
[23:58:53] *** Quits: mmk2410 (~mmk2410@user/mmk2410) (Quit: ZNC - https://znc.in)
[23:59:14] <Nilby> Shinmera: You're right. It is much harder than all that. I know asdf's accomplishments because of what a large footprint uiop has to have.
[23:59:20] *** Joins: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net)
[23:59:44] *** Joins: mmk2410 (~mmk2410@user/mmk2410)
