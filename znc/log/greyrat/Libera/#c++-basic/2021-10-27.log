[00:04:45] <Raziel> it's a fun way of writing things. and fast. but if you're coming from OOP it can seem ass-backwards at first
[00:13:22] <FuzzyBottom> It seems like an interesting concept.
[00:14:23] *** Quits: magla (~gelignite@55d4747b.access.ecotel.net) (Quit: Stay safe!)
[00:14:54] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[00:17:31] *** Quits: RoKenn (~RoKenn@user/rokenn) (Remote host closed the connection)
[00:18:24] *** Joins: RoKenn (~RoKenn@2001:a61:3505:d101:c979:1db7:642f:4055)
[00:18:24] *** Quits: RoKenn (~RoKenn@2001:a61:3505:d101:c979:1db7:642f:4055) (Changing host)
[00:18:24] *** Joins: RoKenn (~RoKenn@user/rokenn)
[00:19:26] *** Quits: RoKenn (~RoKenn@user/rokenn) (Client Quit)
[00:19:46] *** Quits: Karyon (~Karyon@user/karyon) (Quit: Good bye)
[00:19:59] *** Joins: Karyon (~Karyon@user/karyon)
[00:27:11] *** Quits: Karyon (~Karyon@user/karyon) (Quit: Good bye)
[00:27:24] *** Joins: Karyon (~Karyon@user/karyon)
[00:28:48] <cow_2001> okay, adding new elements and printing works! oh wait no it doesn't
[00:30:48] <Raziel> oof
[00:35:09] <CodeMouse92> cow_2001: It may feel like stating the obvious, but try to understand *why* it doesn't work before you change anything
[00:35:57] <CodeMouse92> One of your best tools is something called "desk checking". Get a piece of paper out (literal paper and pencil) and read through the code as if you were the computer.
[00:37:14] <CodeMouse92> Write down values on your paper (for memory addresses, which are pointers, just put numbers 1, 2, 3, 4, 5, etc. on your variables/values as you initialize them via "new"
[00:37:19] *** Quits: Karyon (~Karyon@user/karyon) (Quit: Good bye)
[00:37:24] <CodeMouse92> You'll often find the problem that way
[00:37:32] *** Joins: Karyon (~Karyon@user/karyon)
[00:41:05] <cow_2001> CodeMouse92: thank you
[00:42:21] <Raziel> but also, instead of writing things out manually, you might first want to try using a debugger. because you usually won't have all year to find the issue.
[00:44:36] <cow_2001> so a linked list would have (thinking in pythonese) append() and pop(), and maybe a get_value() and a get_next()?
[00:45:22] <cow_2001> i never got the hang of stepping debuggers
[00:45:32] <Raziel> that kind of encapsulation (get_ etc) is questionable design in C++, but yes
[00:45:33] <cow_2001> always did a thousand prints
[00:45:46] <Raziel> it's worth learning how to use a debugger well, it saves A LOT of time
[00:45:52] <Raziel> hint: use breakpoints, not manual steps, when you can
[00:46:20] <FuzzyBottom> cow_2001: I was/am like you, but I am trying to learn debugging more now. It is WAY easier.
[00:46:50] <FuzzyBottom> I must admit though, the print statements are nice for seeing how everything runs :)
[00:48:04] <Raziel> sometimes print statements are very helpful too, but they're not mutually exclusive with using a debugger :p
[01:12:53] <cow_2001> OK just making links and attaching them by hand works. also, ostream operator<< overloading of the link class works and it prints a lovely `List(1, List(2, List(3, Nil)))`
[01:13:19] <cow_2001> maybe i should rename it to cons ;p
[01:13:37] <cow_2001> actually, it makes more sense that way
[01:14:20] <cow_2001> i don't know how to do arbitrary number of positional arguments in function definition, soâ€¦
[01:32:26] <cow_2001> oh no. am i appending stack list links inside he append() method instead of appending heap links?
[01:32:59] <cow_2001> i looked up linked list and malloc came up
[01:33:06] <cow_2001> in the context of C
[01:33:16] *** Quits: Karyon (~Karyon@user/karyon) (Quit: Good bye)
[01:35:06] *** Quits: Cyp (~cyp@213.237.87.7) (Ping timeout: 245 seconds)
[01:35:30] *** Joins: Karyon (~Karyon@user/karyon)
[01:38:39] <cow_2001> WOOHOO
[01:38:47] <cow_2001> new Thing(); will do that!
[01:40:24] *** Joins: Cyp (~cyp@192038135092.mbb.telenor.dk)
[01:44:48] *** Joins: markong (~kvirc@213.146.188.203)
[01:49:07] *** Quits: bobb_ (~bobb_@dslb-092-074-236-095.092.074.pools.vodafone-ip.de) (Quit: Client closed)
[01:50:07] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 260 seconds)
[01:51:27] *** Quits: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz) (Ping timeout: 265 seconds)
[01:53:21] *** Joins: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz)
[01:58:03] *** Quits: Cyp (~cyp@192038135092.mbb.telenor.dk) (Ping timeout: 260 seconds)
[02:03:04] *** Joins: Cyp (~cyp@192038135092.mbb.telenor.dk)
[02:05:22] *** Joins: Tazy (~Tazmainia@197.185.96.172)
[02:11:13] *** Quits: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz) (Remote host closed the connection)
[02:12:05] *** Joins: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz)
[02:14:57] <Alipha> FuzzyBottom: the issue with globals is when you can modify the state of a global from anywhere. You call function foo. Did it modify global bar? You don't know without looking at the code of foo. You don't have that issue with logging (no one cares about the state of the logger), so you don't have that problem. Though the other problem with globals is that there is only one instance of each global, so that
[02:14:59] <Alipha> may not be desirable. Maybe you want different code to log to different files (or different code to access different databases). In which case, you're gambling whether or not you'll ever need to have more than one instance of this thing or if a single global is all that's needed (which a global then would be simpler)
[02:16:31] <Raziel> I think earlier we were referring to globals as namespaces containing functions vs classes containing static functions, not as much to global data
[02:16:51] <Raziel> global data and the state machines it usually forms can be problematic :p
[02:17:30] <Alipha> FuzzyBottom: and a singleton is just a thin wrapper around a global, so you should pretty much just consider a singleton to be a global. However, you may want to use Meyers Singleton for logging or database connections instead of a global because Meyers Singleton will guarantee that the object will be created before its use. Whereas if you use a simple global for logging, you can't do any logging of things
[02:17:32] <Alipha> that are constructed before main runs because you don't know if the logger global will be constructed or not
[02:17:59] *** Quits: Tazy (~Tazmainia@197.185.96.172) (Quit: Leaving)
[02:18:12] <Raziel> well, you can know it's constructed if it's a nice inline that constructs itself
[02:18:31] <cow_2001> man, i really need an API specification for this linked list thing. i think i am winging a lot of it and it's bad.
[02:18:51] <cow_2001> just realised there will be a problem popping from a single element list
[02:19:08] <cow_2001> because the smallest list would still have a single value
[02:19:16] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[02:19:18] <cow_2001> in this design, that is
[02:19:59] <cow_2001> okay, time to sleep.
[02:20:00] <FuzzyBottom> Alipha: That makes sense, thanks. I never thought about the object being created beforehand. 
[02:20:39] <FuzzyBottom> cow_2001: I wing it a lot, and I find that is the best way for me to learn. I might just be weird though :)
[02:21:32] <FuzzyBottom> Alipha: Your thoughts on mutex over meyers for this purpose?
[02:22:03] <FuzzyBottom> I always appreciate you input.
[02:22:54] <Raziel> But if the stuff you're creating doesn't have all its required info at compile-time, yeah, no
[02:26:17] <FuzzyBottom> Raziel: True. I think that when/if I start using threads down the road, I would assume I would know to instantiate everything beforehand, but who knows :). Thank you for your help.
[02:27:38] <Raziel> whether or not you're using threads isn't necessarily relevant to that
[02:27:58] <Raziel> the issue can appear just as easily in something with absolutely no concurrency/parallelism :p
[02:29:06] <FuzzyBottom> True, and I found that out MANY times :). I am at the stage of still forgetting to initialise variables from time to time, and trying to figure out why the program doesn't work right.
[02:29:18] *** Quits: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz) (Remote host closed the connection)
[02:35:46] <Alipha> FuzzyBottom: Meyers. Meyers  already has thread safe creation and is simpler
[02:37:04] <FuzzyBottom> Alipha: Thanks. I thought so, but it's always good to check with people in the know.
[02:39:36] <Alipha> FuzzyBottom: which also means that static local variables are doing their own mutex under the hood (or equivalent), and so that should make you think twice about using static local variables in other cases which don't require thread safety because of all the overhead that static local variables bring
[02:41:16] <FuzzyBottom> Alipha: I never thought of that. Makes sense when you think about it.
[02:45:30] <Alipha> FuzzyBottom: though there wouldn't be the mutex overhead if it's a static local variable with a trivial constructor initialized to a constant. Because then the compiler would just embed its initial value in the executable
[02:46:36] *** Quits: Guest82 (~Guest82@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[02:57:46] <FuzzyBottom> I hope I can remember all of this :)
[03:09:25] <FuzzyBottom> Thank you everyone for your help. I do appreciate it.
[03:11:44] *** Joins: gggpkm (~gggpkm@li2015-124.members.linode.com)
[03:41:47] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:4def:4e95:4385:6486) (Ping timeout: 264 seconds)
[03:43:46] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[03:43:56] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[03:55:11] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[03:55:58] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[04:03:36] *** Quits: DSpider (DSpider@86.127.146.135) (Quit: Leaving)
[04:12:17] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:4def:4e95:4385:6486)
[04:12:18] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 260 seconds)
[04:13:24] *** Joins: ferdna (~ferdna@user/ferdna)
[04:22:50] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[04:24:03] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[04:33:01] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:4def:4e95:4385:6486) (Ping timeout: 245 seconds)
[04:58:46] *** Joins: The_Jag_ (~The_Jag@host-87-11-42-170.retail.telecomitalia.it)
[05:00:55] *** Quits: The_Jag (~The_Jag@host-87-19-40-26.retail.telecomitalia.it) (Ping timeout: 265 seconds)
[05:18:01] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[05:19:35] *** Quits: duude__ (~duude__@user/duude/x-4676560) (Ping timeout: 260 seconds)
[05:20:02] *** Joins: duude__ (~duude__@user/duude/x-4676560)
[05:23:04] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: Life beckons)
[05:27:17] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[05:34:20] *** Joins: lumberluch0 (~lumbermb@191.114.123.121)
[05:37:10] *** Quits: lumbermb (~lumbermb@191.114.114.152) (Ping timeout: 265 seconds)
[05:43:04] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[06:34:25] *** Joins: SPAI2 (~SPAI2@27.62.57.24)
[06:46:31] *** Quits: SPAI2 (~SPAI2@27.62.57.24) (Quit: Logged off)
[06:52:02] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[07:18:16] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:21:26] *** Joins: autoptr (~autoptr@user/autoptr)
[07:22:39] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[08:50:15] *** Quits: gggpkm (~gggpkm@li2015-124.members.linode.com) (Remote host closed the connection)
[08:52:24] *** Joins: gggpkm (~gggpkm@li2015-124.members.linode.com)
[08:57:45] *** Quits: gggpkm (~gggpkm@li2015-124.members.linode.com) (Ping timeout: 265 seconds)
[09:00:36] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[09:04:19] *** Joins: gggpkm (~gggpkm@li2015-124.members.linode.com)
[09:41:48] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:59:07] *** Joins: teut (~teut@182.64.45.94)
[09:59:51] <teut> https://ibb.co/rcWdVTM  isnt there a memory leak in the RemoveAtFront ?
[10:00:03] <teut> its a Linkedlistimplementation
[10:00:14] <teut> LinkedList implementation 
[10:00:43] <teut> https://godbolt.org/z/1133dzsbT
[10:01:46] *** Joins: jemius (~jemius@2a01:4f8:c0c:8564::1)
[10:20:15] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[10:35:42] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[10:57:30] *** Quits: teut (~teut@182.64.45.94) (Quit: Client closed)
[10:59:44] *** Joins: teut (~teut@182.64.45.94)
[11:13:49] *** Quits: gggpkm (~gggpkm@li2015-124.members.linode.com) (Remote host closed the connection)
[11:49:05] *** Joins: PJBoy (~PJBoy@user/pjboy)
[12:25:49] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[12:26:48] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[12:31:19] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 260 seconds)
[12:56:20] *** Joins: DSpider (DSpider@86.127.147.103)
[12:58:54] *** Joins: argonautx (~argonautx@i5E867011.versanet.de)
[13:39:02] *** Joins: Lorra (~lorenzo@2001:a61:b2d:bb01:49b:7e56:5571:af9)
[13:40:55] <Lorra> hi everybody, I am collaborating with a friend and I would like to provide him a static C library with an header file. This C library would be obtained by compiling C++ code into object files and then archiving them (ar rvs file1.o file2.o, I am on Linux).
[13:41:21] <Lorra> I can do this, but then, when the "static" C library is linked to the client program, I still need to link libstdc++
[13:41:28] <Lorra> can linking libstdc++ be avoided?
[13:41:43] <Lorra> The client program is a C program.
[13:42:43] <Lorra> *can linking libstdc++ to the client program be avoided?
[13:54:57] <LangerJan> Lorra: it can be done: http://ptspts.blogspot.com/2010/12/how-to-write-c-program-without-libstdc.html
[13:57:09] <cow_2001> okay, i have a class { int value; List* next; } but that does not make any sense! there is no empty list. i'm thinking maybe have a class List { Link* link = nullptr; } and class Link { int value; Link* next; }. all public functions would be on List.
[13:58:15] <Lorra> LangerJan: thank you for your reply, that's interesting, but the restrictions to do that are too tight for me (cannot use streams).
[13:58:34] <cow_2001> Langer O_O is that your family name?
[13:59:43] <LangerJan> Lorra: well, they are part of the library, as you can tell. Maybe you can provide them otherwise ;)
[14:01:44] <LangerJan> cow_2001: nope. Whats your question? Your linked list cannot represent an empty sequence, right. A nullptr would do that. Or you provide a wrapping class around your recursive data structure
[14:01:49] <Svitkona> cow_2001, in that case the "empty list" would just be nullptr
[14:02:51] <LangerJan> cow_2001: say class linkedlist { List* head }; and put any public API in there
[14:02:52] *** Joins: markong (~kvirc@213.146.188.203)
[14:03:46] <cow_2001> i could also always use List* in all of my functions
[14:04:26] <LangerJan> cow_2001: so regular functions instead of members of List? Sure, you can do that C-style
[14:04:46] <cow_2001> functions or methods
[14:05:19] <cow_2001> if a function, `void append(List* list, int new_value);`
[14:13:37] <LangerJan> sure, you can do that. 
[14:15:07] <cow_2001> so i will always always need to do stuff like `List* a_list = new List(); append(a_list, 1);`
[14:15:18] <cow_2001> only pointers on the stack
[14:16:52] <LangerJan> yes, but again, that would be very C-ish.
[14:17:20] <LangerJan> At least wrap your functions in a namespace
[14:18:08] <cow_2001> `List::List* a_list = List::List(); List::append(a_list, 1)`?
[14:18:44] <cow_2001> i already written a class (and put it in a namespace) when i realised it can't have an empty list ~_~ now i have to rewrite it
[14:19:04] <Lorra> LangerJan: streams are used in my library, but they are not exposed. I was wondering if one could pack the stream support into my library (or whatever C++ feature I am using) and distribute a ".a" library such that the library user does not need to link agains libstdc++.
[14:19:16] <cow_2001> now i am just thinking how to rewrite it.
[14:20:17] <LangerJan> cow_2001: My suggestion stands: Make it two classes
[14:20:34] <cow_2001> one for the link and one for the user visible stuff?
[14:21:24] <cow_2001> i've seen, for example in OpenCV's Mat - it is just a header with metadata linking to data somewhere else
[14:21:25] <LangerJan> class recursive_list { int payload; recursive_list* tail;};    class list { recursive_list* begin; // Follow up with API in this class};
[14:22:08] <cow_2001> so i guess this is the same here
[14:23:58] <LangerJan> Lorra: sure. But this might be a very deep rabbit hole to figure out what you need. Not my area, sorry :)
[14:27:55] <cow_2001> two stupid questions: 1. tabs or spaces? 2. do you indent inside a namespace? like `namespace RecursiveList {\n    class recursive_list {\n        int payload;`
[14:30:40] <LangerJan> cow_2001: 1. Personal choice: Tabs. Tabs are the more accessible way of indentation. Thinking of visually impaired colleagues here, which can work way better with tabs
[14:31:27] <cow_2001> okay, tabs then!
[14:32:06] <LangerJan> cow_2001: 2. you can omit indentation when using namespaces
[14:35:00] <cow_2001> a really stupid question: why do `class Moo\n{` instead of `class Moo {\n`?
[14:42:18] *** Quits: Cyp (~cyp@192038135092.mbb.telenor.dk) (*.net *.split)
[14:42:18] *** Quits: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi) (*.net *.split)
[14:42:18] *** Quits: Alipha (~AliphaX@user/alipha) (*.net *.split)
[14:42:18] *** Quits: segnior (segnior@user/segnior) (*.net *.split)
[14:43:05] *** Quits: autoptr (~autoptr@user/autoptr) (Quit: Leaving)
[14:45:12] <LangerJan> cow_2001: that just a question of style. You can do it anyway you like, and there are tools to re-style your code if needed
[14:45:31] *** Joins: Cyp (~cyp@192038135092.mbb.telenor.dk)
[14:45:31] *** Joins: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi)
[14:45:31] *** Joins: segnior (segnior@user/segnior)
[14:45:31] *** Joins: Alipha (~AliphaX@user/alipha)
[14:53:46] *** Joins: meator (~meator@user/meator)
[15:03:21] <louiz> simple: the first one is cool. The other one is dumb :^)
[15:06:33] <cow_2001> there are some bugs in javascript resulting from the first
[15:06:57] <louiz> then we can add: javascript is dumb
[15:06:58] <cow_2001> if you return\n{ some: object }, i think
[15:07:00] <cow_2001> yeah
[15:07:54] <cow_2001> we're not in kansas anymore, toto
[15:09:50] <cow_2001> which styles are your favourites?
[15:10:44] <louiz> first one, obviously
[15:11:06] <cow_2001> sorry, i wasn't clear. which style guides are your favourite?
[15:11:37] <louiz> I use something close to GNUâ€™s one
[15:12:56] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[15:14:05] *** Joins: argonautx_ (~argonautx@i5E867011.versanet.de)
[15:14:21] *** Joins: Svitkona2 (~Svitkona@157.245.38.135)
[15:15:22] *** Joins: celphi_ (sid97751@user/celphi)
[15:15:24] *** Joins: Trollmann (~Trollmann@user/trollmann)
[15:15:29] *** Joins: Bodger1234__ (sid503511@id-503511.uxbridge.irccloud.com)
[15:15:34] *** Joins: _merlin (~cuavas@hhsrv1.vastheman.com)
[15:17:25] *** Joins: majors (~majors@user/majors)
[15:22:07] *** Quits: cuavas (~cuavas@hhsrv1.vastheman.com) (Killed (NickServ (GHOST command used by _merlin)))
[15:22:07] *** _merlin is now known as cuavas
[15:22:27] *** Quits: argonautx (~argonautx@i5E867011.versanet.de) (*.net *.split)
[15:22:27] *** Quits: Guest3655 (~wasd@100.101.7.51.dyn.plus.net) (*.net *.split)
[15:22:27] *** Quits: night_wulfe__ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (*.net *.split)
[15:22:27] *** Quits: Svitkona (~Svitkona@157.245.38.135) (*.net *.split)
[15:22:27] *** Quits: Trollman- (~Trollmann@user/trollmann) (*.net *.split)
[15:22:27] *** Quits: majors_ (~majors@user/majors) (*.net *.split)
[15:22:27] *** Quits: celphi (sid97751@user/celphi) (*.net *.split)
[15:22:27] *** Quits: Bodger1234_ (sid503511@uxbridge.irccloud.com) (*.net *.split)
[15:22:28] *** Bodger1234__ is now known as Bodger1234_
[15:22:29] *** Svitkona2 is now known as Svitkona
[15:22:33] *** celphi_ is now known as celphi
[15:23:12] *** Joins: wasd (~wasd@100.101.7.51.dyn.plus.net)
[15:23:36] *** wasd is now known as Guest502
[16:00:42] *** Quits: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi) (Ping timeout: 260 seconds)
[16:08:26] *** Joins: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi)
[16:14:44] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[16:26:49] <cow_2001> i have a method `int nth(size_t n);` which returns the nth int element of a list of ints. (i will deal templating when i am comfortable with pointers)
[16:27:18] <cow_2001> when `a.length() == 0`, `a.nth(0)` will fail somehow
[16:27:26] <cow_2001> how do i make it not explode?
[16:27:44] <cow_2001> how do i implement functions that possibly fail?
[16:28:22] <LangerJan> cow_2001: well, fire up that debugger and see what happens in your code :)
[16:28:57] <LangerJan> cow_2001: to your second question, you have a lot of options. Throw an exception for example
[16:29:22] <cow_2001> gdb?
[16:29:30] <cow_2001> spooky.
[16:29:52] <cow_2001> what's a good debugger on debian?
[16:30:16] <LangerJan> cow_2001: or return an std::optional<int>, which only provides an int on valid parameter inputs
[16:30:33] <cow_2001> optional! that i recognise from python
[16:30:53] <cow_2001> i will use an optional. thank you!
[16:30:59] <LangerJan> cow_2001: gdb is good. Do you use an IDE already?
[16:31:22] <cow_2001> thought i'd use a tuple<int, bool> as a return value. someone mocked me for being in golang land
[16:31:43] <cow_2001> LangerJan: just a vanilla nvim
[16:44:30] <LangerJan> cow_2001: thats just an optional with extra steps ^^
[16:45:12] <LangerJan> cow_2001: gdb is fine, really. IDEs like Eclipse come with a nice GUI wrapper around it
[16:45:20] <cow_2001> internally it is a tuple<T, bool>?
[16:45:39] <cow_2001> got a good tutorial for gdb?
[16:45:46] <LangerJan> cow_2001: no idea, but it serves the same purpose for you, right?
[16:45:54] <cow_2001> someone mentioned ddd
[16:46:03] <cow_2001> same purpose yes
[16:46:27] <LangerJan> cow_2001: ddd is okay as well. Bit old. Again, just a gui-wrapper around gdb
[16:46:52] <LangerJan> sorry, no. Got to gdb in university
[16:50:07] *** Joins: gggpkm (~gggpkm@li2015-124.members.linode.com)
[16:53:51] <cow_2001> wow. it is using Motif. ancient widgets.
[16:54:31] <cow_2001> opening gdb or whatever frontend feels like being airdropped into a warzone
[16:54:44] <cow_2001> no briefing
[17:00:42] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[17:00:56] <LangerJan> cow_2001: there is actually only a handful of commands you need
[17:01:13] <LangerJan> cow_2001: gdb ./a.out
[17:01:20] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[17:01:35] <LangerJan> cow_2001: > run <your command line options here>
[17:01:52] <LangerJan> then your application runs until termination or crash
[17:02:35] <LangerJan> cow_2001: in case of a crash, gdb stops and you can have a look at all current threads
[17:03:39] <LangerJan> cow_2001: the faulting thread is focussed. enter "backtrace" to see a full stack trace
[17:03:56] <LangerJan> gdb has a decent online help
[17:04:39] <LangerJan> cow_2001: https://darkdust.net/files/GDB%20Cheat%20Sheet.pdf
[17:06:09] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[17:17:18] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[17:18:24] <CodeMouse92> cow_2001: How goes the linked list today?
[17:18:32] <cow_2001> CodeMouse92: works!
[17:18:36] <CodeMouse92> Woo!!
[17:18:54] <cow_2001> valgrind complains i have lost stuff
[17:19:03] <cow_2001> i haven't written a destructor, maybe?
[17:19:18] <CodeMouse92> cow_2001: Yes, those leaks are important to fix. You probably haven't written your destructors.
[17:19:26] <CodeMouse92> Remember: for every new, you need a delete
[17:19:48] <cow_2001> okay, written a destructor. now 0 lost.
[17:19:54] <CodeMouse92> THERE ya go!
[17:20:02] <cow_2001> (forgot to add one to the wrapping class)
[17:20:06] <CodeMouse92> Have you also written some code to use your linked list?
[17:21:45] <cow_2001> there're `size_t length(); std::optional<int> nth(size_t n); int unchecked_nth(size_t n); void append(int new_value); void pop();`
[17:21:50] <CodeMouse92> When I wrote a circular buffer array (that's a blast), I wrote test functions that added/inserted/removed thousands of elements to put it through its paces.
[17:22:10] <cow_2001> i only have demo functions, not test functions
[17:22:35] <Alipha> cow_2001: have you written a copy constructor and a copy operator=? (and possibly move constructor and move operator=?)
[17:22:46] <CodeMouse92> cow_2001: demo functions are good
[17:22:50] <cow_2001> oh wow. no copy and no operator=
[17:23:02] <teut> https://ibb.co/Mc3HRRm  here  , I couldnt really understand what private LinkList  gave to this  Stack class
[17:23:02] <cow_2001> CodeMouse92: "but"
[17:23:03] <Alipha> !give cow_2001 ruleof3
[17:23:05] <nolyc> cow_2001: If you have one of 1) non-empty destructor 2) copy constructor 3) copy assignment operator then you almost certainly need _all_ three. In C++11, this is optionally extended to the Rule Of Five (by including the move constructor and move assignment operator).
[17:24:01] <teut> why did Stack need to inherit the class, it could just instantiate LinkList   and give it back
[17:25:53] <Alipha> teut: indeed, you could just have a LinkList member instead
[17:26:07] <teut> https://www.bogotobogo.com/cplusplus/private_inheritance.php
[17:26:16] <teut> its very confusing this OOP stuff
[17:26:29] <cow_2001> nolyc: these topics are new to me.
[17:26:30] <nolyc> cow_2001: Error: "these" is not a valid command.
[17:26:34] <cow_2001> oh
[17:26:36] <cow_2001> oops
[17:26:38] <cow_2001> it's a bot ~_~
[17:26:44] <Alipha> !give cow_2001 books
[17:26:46] <nolyc> cow_2001: A nice C++ book guide and list can be found at http://stackoverflow.com/q/388242/1090079
[17:26:47] <cow_2001> Alipha: these topics are new to me
[17:27:24] <teut> are there any cppconf talks on oops in c++?
[17:28:28] <Alipha> cow_2001: we really recommend some kind of structured learning of c++ (ie, books or classes) because c++ is quite complex and has plenty of pitfalls
[17:29:17] <Alipha> cow_2001: as an alternative to std::optional, you could have nth throw an exception if n is invalid
[17:29:20] <cow_2001> very complex yes :|
[17:30:47] <cow_2001> i need structured exercises
[17:33:48] <Alipha> <teut> https://ibb.co/rcWdVTM  isnt there a memory leak in the RemoveAtFront ?.... do you still have this question?
[17:34:05] <teut> yes
[17:34:28] <CodeMouse92> cow_2001: I almost forgot. https://exercism.org/ is pretty good if you like guided practice with real human feedback
[17:35:11] <Alipha> teut: why do you think there's a memory leak? What's leaking?
[17:36:21] <cow_2001> i was going to ask about exercism, butâ€¦
[17:36:23] <teut> actually yes its no leak , I just couldnt understand why it exists
[17:37:00] <teut> its moving head one step and returning the original linked list
[17:37:01] <cow_2001> i just want their exercises and a test
[17:37:11] <teut> before modification
[17:37:43] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:84fb:5024:2605:bd40)
[17:38:22] <Alipha> It's returning a pointer to the LinkListElement that you removed so you can delete it
[17:41:39] *** Quits: meator (~meator@user/meator) (Ping timeout: 260 seconds)
[17:43:12] <cow_2001> oh, it's in-browser now
[18:00:51] <teut> Alipha  , it didnt set  next to null
[18:05:57] <Alipha> teut: didn't set deallocate->next to null?
[18:06:42] <teut> deallocate is inn delete
[18:06:47] <teut> we are in remote
[18:06:52] <teut> remove*
[18:12:01] <CodeMouse92> cow_2001: I mean, it is *sort of* in-browser, but you can still download it to your own IDE.
[18:12:06] <CodeMouse92> Which I strongly recommend if you're going to do it.
[18:12:20] <CodeMouse92> It's best to solve these using the same tools you'd write your production code in.
[18:14:35] <Alipha> So, you have a linked list, A -> B -> C. head points to A. So all RemoveAtFront is doing is making head point to B and returning a pointer to A. From LinkList's perspective, A is no longer part of the list because the list now starts at B because that's where head points to. Yes, A still points to B, and I could see that you may have a desire for A to be completely disconnected from the list, but I'm
[18:14:37] <Alipha> assuming RemoveAtFront is only used inside of DeleteAtFront, in which case, setting A.next to null is rather pointless because you're just going to delete A
[18:19:58] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:84fb:5024:2605:bd40) (Quit: Leaving)
[18:33:35] *** Quits: teut (~teut@182.64.45.94) (Ping timeout: 256 seconds)
[18:40:44] <cow_2001> CodeMouse92: exercism doesn't seem to have a laid out study path / tree, just a set of exercises labelled according to difficulty :|
[18:42:01] <cow_2001> also, i'm not so great a reader. though i've read a rustlang book once, it was fun.
[18:42:26] <cow_2001> so C++ Primer is a bit intimidating
[18:43:13] <CodeMouse92> cow_2001: I disagree w/ some others in this room. Guided study is not necessarily the only good way to learn the language.
[18:43:41] <CodeMouse92> The important thing is to have regular exposure to good practice and idiomatic patterns.
[18:44:07] <CodeMouse92> Especially with live feedback. A class or Exercism can provide that, but so can rooms like this, open source proejcts you help w/, etc.
[18:44:40] <CodeMouse92> I've taught many people C++ with a real project, rather than a course, and they mastered it.
[18:47:14] <cow_2001> what kind of projects?
[18:47:22] <CodeMouse92> cow_2001: mousepawmedia.com actually :)
[18:48:19] <cow_2001> ooh edutainment?
[18:50:20] <cow_2001> okay if i send you a private message, CodeMouse92?
[18:51:08] <CodeMouse92> Go for it
[19:00:08] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[19:03:47] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[19:08:26] *** Joins: Guest91 (~Guest91@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[19:08:38] *** Joins: magla (~gelignite@55d4dc2e.access.ecotel.net)
[19:20:59] *** Joins: teut (~teut@182.64.45.94)
[19:21:08] <teut> Alipha, sorry was away
[19:22:08] <teut> why not Alipha ?
[19:23:35] <teut> from function remove at function , by the name , a user would aspect that the front node is detached and returned / removed
[19:24:03] <teut> remove at function     -> RemoveAtFront  
[19:24:10] <teut> correction
[19:29:41] <Alipha> teut: is this a public function?
[19:30:50] <teut> removeatfront is public, yes
[19:43:55] *** Joins: meator (~meator@user/meator)
[19:48:32] *** Quits: Guest91 (~Guest91@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[19:54:29] *** Quits: Lorra (~lorenzo@2001:a61:b2d:bb01:49b:7e56:5571:af9) (Ping timeout: 258 seconds)
[20:01:21] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 245 seconds)
[20:02:56] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[20:13:25] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:84fb:5024:2605:bd40)
[20:36:21] <Alipha> teut: yeah, it would probably make more sense then to null out next on the removed element to completely disconnect it from the linked list, if this is supposed to be a user-facing function. It seems to me that RemoveAtFront wasn't really meant to be public though--that it should actually be private--and that users aren't supposed to directly use it, but use DeleteAtFront instead. In which case,
[20:36:23] <Alipha> DeleteAtFront doesn't care if next is null or not
[20:37:33] <teut> yes
[20:37:40] <teut> it returns void
[20:38:01] <teut> do you use OOP in production?
[20:39:10] <teut> people say instantiating an object gives all lots of methods on the instance and this OOP is bad
[20:39:16] <teut> give*
[20:39:17] *** Quits: jemius (~jemius@2a01:4f8:c0c:8564::1) (Quit: Leaving)
[20:39:22] <teut> thus*
[20:57:26] *** Joins: X-Scale` (~ARM@50.77.166.178.rev.vodafone.pt)
[20:58:35] *** Quits: X-Scale (~ARM@31.22.167.71) (Ping timeout: 264 seconds)
[20:58:54] <Alipha> Well, my day job is not c++, but java, so yes, I use a lot of OOP in production ;-)
[20:59:39] *** X-Scale` is now known as X-Scale
[21:06:20] *** Quits: Raziel (~Raziel@user/raziel) (Ping timeout: 260 seconds)
[21:21:23] <teut> you do android?
[21:30:30] <Alipha> No, it's an enterprise web application
[21:30:36] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[21:32:03] *** Joins: Deneb (~johnch@86.111.189.80.dyn.plus.net)
[21:33:25] <teut> no react?
[21:33:48] <teut> java is old now, let it RIO
[21:33:52] <teut> RIP *
[21:34:20] <cow_2001> old? C++ is 40 years old
[21:34:28] *** Quits: Deneb (~johnch@86.111.189.80.dyn.plus.net) (Client Quit)
[21:34:31] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 260 seconds)
[21:34:33] <teut> old in the sense of popularity
[21:34:38] <teut> not age
[21:35:32] <cow_2001> okay, I am trying to implement my ruleof3 stuff. not sure about the type signature of copy assignment and copy constructor.
[21:35:58] <teut> https://refactoring.guru/design-patterns/visitor   this is a website which shows writing OOP code, but this kind of code, well who even writes this kind of code??
[21:36:04] <teut> I saw the python version
[21:39:49] *** Joins: kariosfox (~kariosfox@176.221.124.50)
[21:56:32] <kariosfox> hi
[22:01:18] <cow_2001> hihi
[22:27:39] *** Joins: Guest30 (~Guest30@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[22:27:43] *** Quits: Guest30 (~Guest30@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Client Quit)
[22:28:11] *** Joins: Guest21 (~Guest21@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[22:39:51] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[22:42:21] *** Joins: bewees (~bewees@user/bewees)
[22:43:10] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[22:43:54] <bewees> Hi, does `char *a = new char(); a[1] = 'a';` allocate space outside the assigned space, because `new char()` should allocate only one char, and using a[1] will access memory outside of that?
[22:44:33] <LangerJan> bewees: yes, it will. a[0] = 'a'; on the other hand is supposed to work
[22:44:47] <bewees> Perfect, thanks LangerJan 
[22:44:55] <LangerJan> geordi char *a = new char(); a[1] = 'a';
[22:46:43] *** Joins: X-Scale` (~ARM@31.22.203.65)
[22:46:46] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 245 seconds)
[22:48:38] *** X-Scale` is now known as X-Scale
[22:50:26] *** Joins: kylese (~kylese@p5dd8b9e7.dip0.t-ipconnect.de)
[22:50:39] *** Quits: Guest21 (~Guest21@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[22:53:40] *** Quits: magla (~gelignite@55d4dc2e.access.ecotel.net) (Quit: Stay safe!)
[22:59:28] *** Joins: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz)
[23:02:19] *** Quits: teut (~teut@182.64.45.94) (Quit: Client closed)
[23:03:16] *** Joins: Lorra (~lorenzo@2001:a61:b2d:bb01:49b:7e56:5571:af9)
[23:11:05] *** Quits: Lorra (~lorenzo@2001:a61:b2d:bb01:49b:7e56:5571:af9) (Quit: Konversation terminated!)
[23:13:04] *** Quits: argonautx_ (~argonautx@i5E867011.versanet.de) (Quit: Leaving)
[23:26:40] <kariosfox> hi, I'm having trouble checking for specific characters and strings within a string
[23:30:22] <kariosfox> anyone?
[23:33:38] <kariosfox> hre's a link: https://wandbox.org/permlink/yvITjhXf5648EFfn
[23:37:11] <kariosfox> *here's
[23:37:41] <kariosfox> and the link for the txt file, because I'm loading it from a txt file: https://www.mediafire.com/file/mvueqcts5z6jv5i/wzgorze.txt/file
[23:50:23] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[23:51:25] *** Quits: lumberluch0 (~lumbermb@191.114.123.121) (Quit: Leaving)
[23:53:30] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[23:53:45] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[23:56:22] <kariosfox> alright, I realised the link I sent was empty
[23:56:30] <kariosfox> https://ideone.com/NjOJ8P
[23:58:40] <kariosfox> here's the txt file as well https://tinyurl.com/357s836f
[23:59:23] *** Quits: kariosfox (~kariosfox@176.221.124.50) (Remote host closed the connection)
