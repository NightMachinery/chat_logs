[00:29:57] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[00:31:31] *** Joins: struchu (~struchu@staticline-31-183-166-217.toya.net.pl)
[00:32:20] *** Quits: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[00:34:32] *** Quits: schmudde (~schmudde@2001:b07:ae6:7d19:4f50:1a25:7d40:fdca) (Ping timeout: 240 seconds)
[00:49:34] *** Joins: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com)
[00:53:31] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 256 seconds)
[01:08:29] *** Joins: atw (~user@ool-18bf5678.dyn.optonline.net)
[01:15:03] *** Quits: atw (~user@ool-18bf5678.dyn.optonline.net) (Ping timeout: 256 seconds)
[01:15:55] *** Quits: struchu (~struchu@staticline-31-183-166-217.toya.net.pl) (Quit: WeeChat 3.3)
[01:18:59] *** Joins: struchu (~struchu@staticline-31-183-166-217.toya.net.pl)
[01:21:49] *** Quits: struchu (~struchu@staticline-31-183-166-217.toya.net.pl) (Client Quit)
[01:42:40] *** Joins: piotrts (~piotrts@188.146.242.75.nat.umts.dynamic.t-mobile.pl)
[01:47:54] *** Quits: piotrts (~piotrts@188.146.242.75.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 250 seconds)
[02:12:10] *** Quits: joe_colben (~joe____co@185.190.112.211) (Ping timeout: 250 seconds)
[02:17:10] *** Joins: piotrts (~piotrts@188.146.242.75.nat.umts.dynamic.t-mobile.pl)
[02:23:37] *** Quits: piotrts (~piotrts@188.146.242.75.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 256 seconds)
[02:35:02] *** Quits: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com) (Ping timeout: 240 seconds)
[02:37:05] *** Joins: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com)
[02:39:39] *** Joins: piotrts (~piotrts@188.146.242.75.nat.umts.dynamic.t-mobile.pl)
[02:44:57] *** Quits: piotrts (~piotrts@188.146.242.75.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 240 seconds)
[02:58:57] *** Joins: piotrts (~piotrts@188.146.242.75.nat.umts.dynamic.t-mobile.pl)
[03:01:39] *** Joins: AlaskanEmily (~AlaskanEm@user/alaskanemily)
[03:13:42] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 250 seconds)
[03:16:46] *** Quits: piotrts (~piotrts@188.146.242.75.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 268 seconds)
[03:25:50] *** Quits: jespada (~jespada@87.74.36.188) (Ping timeout: 250 seconds)
[03:27:15] *** Joins: jespada (~jespada@87.74.36.188)
[03:28:02] *** Joins: piotrts (~piotrts@188.146.242.75.nat.umts.dynamic.t-mobile.pl)
[03:29:11] *** Joins: molson_ (~molson@2001-48F8-704A-123D-0-0-75F-102C-static.midco.net)
[03:32:02] *** Quits: molson (~molson@2001-48F8-704A-123D-0-0-75F-1029-static.midco.net) (Ping timeout: 240 seconds)
[03:32:45] *** Quits: piotrts (~piotrts@188.146.242.75.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 256 seconds)
[03:44:20] *** Joins: piotrts (~piotrts@188.146.242.75.nat.umts.dynamic.t-mobile.pl)
[03:49:11] *** Quits: piotrts (~piotrts@188.146.242.75.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 256 seconds)
[04:05:37] *** Quits: Vaelatern (~Vaelatern@voidlinux/maintainer/Vaelatern) (Ping timeout: 240 seconds)
[04:06:19] *** Joins: cmiles74 (~miles@172.58.230.243)
[04:07:12] *** Quits: seschwar (~seschwar@user/seschwar) (Quit: :wq)
[04:10:40] *** Joins: Vaelatern (~Vaelatern@cpe-76-183-97-243.tx.res.rr.com)
[04:10:40] *** Quits: Vaelatern (~Vaelatern@cpe-76-183-97-243.tx.res.rr.com) (Changing host)
[04:10:40] *** Joins: Vaelatern (~Vaelatern@voidlinux/maintainer/Vaelatern)
[04:14:03] *** Quits: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com) (Remote host closed the connection)
[04:16:33] *** Joins: piotrts (~piotrts@188.146.242.75.nat.umts.dynamic.t-mobile.pl)
[04:21:18] *** Quits: piotrts (~piotrts@188.146.242.75.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 250 seconds)
[04:26:00] *** Quits: AlaskanEmily (~AlaskanEm@user/alaskanemily) (Read error: Connection reset by peer)
[04:26:15] *** Joins: AlaskanEmily (~AlaskanEm@user/alaskanemily)
[04:46:17] *** Quits: cmiles74 (~miles@172.58.230.243) (Ping timeout: 240 seconds)
[04:48:25] *** Joins: piotrts (~piotrts@188.146.242.75.nat.umts.dynamic.t-mobile.pl)
[04:53:13] *** Quits: piotrts (~piotrts@188.146.242.75.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 256 seconds)
[04:54:04] *** Joins: xsperry (~xs@user/xsperry)
[05:03:04] *** Joins: lispy (~lispy4@84.69.59.93)
[05:05:37] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 240 seconds)
[05:13:06] *** Joins: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com)
[05:13:48] *** Joins: xsperry (~xs@user/xsperry)
[05:21:57] *** Joins: piotrts (~piotrts@188.146.242.75.nat.umts.dynamic.t-mobile.pl)
[05:28:32] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 240 seconds)
[05:41:28] *** Quits: piotrts (~piotrts@188.146.242.75.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 250 seconds)
[05:54:26] *** Joins: xsperry (~xs@user/xsperry)
[06:07:17] *** Quits: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com) (Ping timeout: 240 seconds)
[06:10:37] *** Joins: piotrts (~piotrts@188.146.242.75.nat.umts.dynamic.t-mobile.pl)
[06:15:23] *** Quits: piotrts (~piotrts@188.146.242.75.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 256 seconds)
[06:31:07] *** Joins: atw (~user@ool-18bf5678.dyn.optonline.net)
[06:34:05] *** Joins: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com)
[06:34:37] *** Quits: mwnaylor (~user@2601:5ce:4300:5560::68b3) (Ping timeout: 240 seconds)
[06:43:56] *** Joins: piotrts (~piotrts@188.146.242.75.nat.umts.dynamic.t-mobile.pl)
[06:48:37] *** Quits: piotrts (~piotrts@188.146.242.75.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 240 seconds)
[07:12:20] *** Quits: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com) (Ping timeout: 268 seconds)
[07:12:59] *** Joins: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com)
[07:18:07] *** Joins: piotrts (~piotrts@188.146.242.75.nat.umts.dynamic.t-mobile.pl)
[07:22:37] *** Quits: piotrts (~piotrts@188.146.242.75.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 240 seconds)
[07:51:51] *** Joins: piotrts (~piotrts@188.146.242.75.nat.umts.dynamic.t-mobile.pl)
[07:56:49] *** Quits: piotrts (~piotrts@188.146.242.75.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 256 seconds)
[08:00:42] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:b574:732d:3b12:8f10)
[08:16:05] *** Quits: RendySurvage (~rendysurv@64.72.216.39) (Ping timeout: 256 seconds)
[08:19:55] *** Joins: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw)
[08:27:24] *** Joins: piotrts (~piotrts@188.146.242.75.nat.umts.dynamic.t-mobile.pl)
[08:32:31] *** Quits: piotrts (~piotrts@188.146.242.75.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 256 seconds)
[08:45:37] *** Quits: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com) (Ping timeout: 240 seconds)
[08:48:08] *** Joins: puchka (~marius@172.107.93.165)
[08:51:14] *** Joins: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com)
[08:51:19] *** Joins: RendySurvage (~rendysurv@64.72.216.39)
[09:04:18] *** Joins: piotrts (~piotrts@188.146.242.75.nat.umts.dynamic.t-mobile.pl)
[09:08:57] *** Quits: piotrts (~piotrts@188.146.242.75.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 240 seconds)
[09:17:21] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[09:22:45] *** Joins: piotrts (~piotrts@188.146.242.75.nat.umts.dynamic.t-mobile.pl)
[09:23:58] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[09:26:01] *** Joins: schmudde (~schmudde@2001:b07:ae6:7d19:4b2a:c41b:9a71:64b4)
[09:31:43] *** Joins: oscuroch_ (~oscurochu@097-096-050-227.res.spectrum.com)
[09:34:36] *** Quits: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com) (Ping timeout: 250 seconds)
[09:40:31] *** Quits: piotrts (~piotrts@188.146.242.75.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 256 seconds)
[09:40:50] <v3ga> hola
[09:43:32] *** Quits: puchka (~marius@172.107.93.165) (Ping timeout: 240 seconds)
[09:45:44] *** Joins: puchka (~marius@172.107.93.166)
[10:10:58] *** Joins: piotrts (~piotrts@188.146.242.75.nat.umts.dynamic.t-mobile.pl)
[10:16:06] *** Quits: piotrts (~piotrts@188.146.242.75.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 268 seconds)
[10:20:59] *** Quits: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[10:31:03] *** Quits: lispy (~lispy4@84.69.59.93) (Quit: Leaving)
[10:31:52] *** Joins: piotrts (~piotrts@188.146.242.75.nat.umts.dynamic.t-mobile.pl)
[10:35:21] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[10:39:46] *** Joins: struchu (~struchu@staticline-31-183-182-53.toya.net.pl)
[10:40:45] *** Quits: xsperry (~xs@user/xsperry) (Read error: Connection reset by peer)
[10:45:41] *** Quits: piotrts (~piotrts@188.146.242.75.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 256 seconds)
[10:49:47] *** Joins: mbuf (~Shakthi@122.173.242.184)
[10:51:01] *** Joins: shiranaihito (~textual@219.85.168.174)
[10:57:32] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[10:59:14] *** Joins: piotrts (~piotrts@188.146.242.75.nat.umts.dynamic.t-mobile.pl)
[10:59:17] *** Quits: vats (~vats@180.149.226.242) (Ping timeout: 240 seconds)
[11:04:49] *** Quits: schmudde (~schmudde@2001:b07:ae6:7d19:4b2a:c41b:9a71:64b4) (Ping timeout: 268 seconds)
[11:05:45] *** Joins: xsperry (~xs@user/xsperry)
[11:11:01] *** Quits: xsperry (~xs@user/xsperry) (Read error: Connection reset by peer)
[11:15:06] *** Joins: xsperry (~xs@user/xsperry)
[11:24:45] *** Quits: xsperry (~xs@user/xsperry) (Read error: Connection reset by peer)
[11:24:53] *** Quits: shiranaihito (~textual@219.85.168.174) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[11:33:57] *** Joins: shiranaihito (~textual@2001-b011-4000-109d-64cb-5776-5fd3-a985.dynamic-ip6.hinet.net)
[11:36:22] *** Joins: xsperry (~xs@user/xsperry)
[11:38:35] *** Joins: Major_Biscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[12:08:20] *** Quits: Major_Biscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 268 seconds)
[12:14:17] *** Joins: joe_colben (~joe____co@185.190.112.211)
[12:31:22] *** Joins: Major_Biscuit (~MajorBisc@c-001-019-027.client.tudelft.eduvpn.nl)
[12:36:05] *** Quits: Trieste (T@user/pilgrim) (Ping timeout: 268 seconds)
[13:00:54] <rovanion> hola
[13:03:08] *** Quits: AlaskanEmily (~AlaskanEm@user/alaskanemily) (Remote host closed the connection)
[13:09:24] *** Joins: vats (~vats@180.149.226.242)
[13:12:37] *** Quits: piotrts (~piotrts@188.146.242.75.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 240 seconds)
[13:25:31] *** Joins: piotrts (~piotrts@188.146.242.75.nat.umts.dynamic.t-mobile.pl)
[13:28:40] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:b574:732d:3b12:8f10) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:29:37] *** Quits: piotrts (~piotrts@188.146.242.75.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 240 seconds)
[13:40:40] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[13:41:40] *** Joins: amk (~amk@109.255.169.126)
[13:44:20] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:491:83dc:6241:13db)
[13:48:53] *** Joins: schmudde (~schmudde@2001:b07:ae6:7d19:8b9f:46a8:9bef:ef5a)
[14:05:18] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[14:07:06] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[14:09:31] *** Joins: piotrts (~piotrts@188.146.241.205.nat.umts.dynamic.t-mobile.pl)
[14:13:37] *** Quits: piotrts (~piotrts@188.146.241.205.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 240 seconds)
[14:31:29] * sobel waves
[14:32:06] <sobel> another day, another do-until-done loop
[14:33:43] <yeik-the-spik[m]> buenos dias!
[14:46:09] *** Quits: oscuroch_ (~oscurochu@097-096-050-227.res.spectrum.com) (Remote host closed the connection)
[14:49:29] <schmudde> sobel: seems like an implementation detail. I just use a recursive function called `day` that always returns `(- x 1)`. Ends when `(= x 0)`.
[14:49:40] <schmudde> Of course, I don't know the initial value of `x`. That's out of scope.
[14:50:52] <sobel> out of scope and beyond my pay grade
[14:53:41] <schmudde> life is a pure function.
[14:59:36] *** Quits: puchka (~marius@172.107.93.166) (Ping timeout: 250 seconds)
[15:01:26] *** Joins: puchka (~marius@172.107.93.165)
[15:02:05] <sobel> i can roll with that much better than my old event-driven implementation
[15:02:22] <sobel> which, frankly, was exhausting
[15:02:40] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[15:20:42] *** Joins: oscurochu (~oscurochu@2603:9000:c202:1034:3d68:e938:5362:5275)
[15:34:57] *** Joins: piotrts (~piotrts@188.146.241.205.nat.umts.dynamic.t-mobile.pl)
[16:10:23] <yeik-the-spik[m]> life is a multi-threaded process within a VM.
[16:10:31] <yeik-the-spik[m]> or not, but that one sounds cool enough
[16:21:08] *** Joins: yoonkn (~user@175.197.208.79)
[16:33:28] *** Quits: azureus (uid537957@id-537957.tinside.irccloud.com) ()
[16:33:42] *** Joins: azureus (uid537957@id-537957.tinside.irccloud.com)
[16:37:35] *** Quits: piotrts (~piotrts@188.146.241.205.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 256 seconds)
[16:39:33] *** Joins: piotrts (~piotrts@188.146.241.205.nat.umts.dynamic.t-mobile.pl)
[16:43:47] *** Joins: joe_colben (~joe____co@185.190.112.211)
[16:43:59] *** Quits: piotrts (~piotrts@188.146.241.205.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 268 seconds)
[16:48:32] *** Quits: Major_Biscuit (~MajorBisc@c-001-019-027.client.tudelft.eduvpn.nl) (Ping timeout: 240 seconds)
[16:49:48] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[16:50:57] *** Quits: vats (~vats@180.149.226.242) (Ping timeout: 240 seconds)
[16:54:37] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[16:55:15] *** Joins: Major_Biscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[16:55:53] *** Joins: mwnaylor (~user@2601:5ce:4300:5560::68b3)
[16:56:39] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[17:08:29] *** Quits: mwnaylor (~user@2601:5ce:4300:5560::68b3) (Read error: Connection reset by peer)
[17:09:08] *** Joins: mwnaylor (~user@2601:5ce:4300:5560::68b3)
[17:27:29] *** Joins: analogsalad (~analogsal@user/analogsalad)
[17:34:49] *** Quits: atw (~user@ool-18bf5678.dyn.optonline.net) (Ping timeout: 256 seconds)
[17:35:08] *** Quits: analogsalad (~analogsal@user/analogsalad) (Quit: bye)
[17:36:46] <rovanion> I was about to write: Define done. But seems like you've already gone over that :P
[17:47:25] *** Quits: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net) (Ping timeout: 240 seconds)
[17:48:44] *** Quits: schmudde (~schmudde@2001:b07:ae6:7d19:8b9f:46a8:9bef:ef5a) (Ping timeout: 268 seconds)
[17:48:54] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[17:55:08] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[17:59:51] *** Joins: schmudde (~schmudde@2001:b07:ae6:7d19:8b9f:46a8:9bef:ef5a)
[18:08:23] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[18:30:43] *** Joins: seschwar (~seschwar@user/seschwar)
[18:40:53] *** Quits: struchu (~struchu@staticline-31-183-182-53.toya.net.pl) (Quit: WeeChat 3.3)
[18:42:11] <sobel> (defn done [x] (>= depth 6))
[18:42:24] <sobel> or something
[18:42:50] <sobel> delicious, i can't even pcode. maybe i'll stick to tea today.
[19:08:01] <opqdonut> (declare done) ;; no doubt somebody will define it for us later
[19:13:39] <goodger> https://i.imgur.com/6GiQJaf.mp4
[19:18:58] *** Quits: punnie (~punniemat@2001:470:69fc:105::1193) (Quit: Client limit exceeded: 20000)
[19:35:08] *** Joins: DasBrain (~DasBrain@user/dasbrain)
[19:38:02] *** Quits: DasBrain_ (~DasBrain@user/dasbrain) (Ping timeout: 240 seconds)
[19:38:16] *** Joins: shiranaihito_ (~textual@123-192-192-149.dynamic.kbronet.com.tw)
[19:41:16] *** Quits: shiranaihito (~textual@2001-b011-4000-109d-64cb-5776-5fd3-a985.dynamic-ip6.hinet.net) (Ping timeout: 250 seconds)
[19:51:27] *** Quits: joe_colben (~joe____co@185.190.112.211) (Ping timeout: 268 seconds)
[19:59:02] *** Joins: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net)
[20:13:28] *** Quits: mbuf (~Shakthi@122.173.242.184) (Quit: Leaving)
[20:27:23] *** Joins: zmt00 (~zmt00@user/zmt00)
[20:40:33] *** Quits: yoonkn (~user@175.197.208.79) (Read error: Connection reset by peer)
[21:25:55] *** Joins: tuborgman (~tuborgman@pool-108-16-29-206.phlapa.fios.verizon.net)
[21:26:29] *** Quits: tuborgman (~tuborgman@pool-108-16-29-206.phlapa.fios.verizon.net) (Client Quit)
[21:29:58] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:491:83dc:6241:13db) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:30:16] <rovanion> Do you write tests for your hiccup-returning functions? Do you have a good formula for "I want this to be in there somewhere but I don't care how"? Like I would just use `contains?` on the resulting HTML for very quick sanity checks.
[21:30:17] *** Joins: punnie (~punniemat@2001:470:69fc:105::1193)
[21:30:43] *** Quits: henry40408 (~henry4040@175.181.155.165) (Remote host closed the connection)
[21:31:11] *** Joins: henry40408 (~henry4040@175.181.155.165)
[21:31:34] <sobel> my swag would be flatten+contains?
[21:32:34] *** Joins: tuborgman (~tuborgman@pool-108-16-29-206.phlapa.fios.verizon.net)
[21:32:40] <sobel> grepping the HTML might be a more honest test but then you're testing hiccup along with your generators
[21:33:02] <sobel> i needed to ponder that, apparently :)
[21:33:41] <technomancy> what was the cgrand thing that let you write selectors over HTML?
[21:33:51] <aphyr> Oh, hickory!
[21:38:00] <rovanion> sobel: Thanks, this is just the hand wavy test I wanted to write: (some #{"needle"} (flatten hiccastack))
[21:39:25] <sobel> selectors, that was the word i couldn't conjure in order to say "too exact"
[21:39:39] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[21:39:53] * sobel jots down hickory
[21:40:05] <aphyr> rovanion: you might be able to use clojure.walk for that too
[21:43:18] <lockdown_> technomancy: enlive
[21:44:26] <technomancy> that's the one, yeah
[21:47:04] *** Quits: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22) (K-Lined)
[21:56:21] <rovanion> `contains?` should have been named `has-key?`. Can't be just me who keeps getting confused by what it does.
[21:58:00] <technomancy> rovanion: I think that's pretty much a universally accepted truth among people who aren't Rich Hickey
[22:02:29] <selfsymmetric-mu> In a similar vein, I think there should be an `any?`, which behaves like `some` but turns `nil` to `false`.
[22:03:13] <technomancy> selfsymmetric-mu: that exists! it's called clojure.core/boolean
[22:03:45] <technomancy> oh wait you mean over a collection; nm
[22:04:05] <technomancy> (I misunderstood because `some` is a badly named function)
[22:06:22] <Para> https://clojuredocs.org/clojure.core/any_q :|
[22:06:50] <aphyr> The some/any confusion between collectons and single objects is such a weird part of the clojure API
[22:07:01] <Para> Alternate name for that could very well be `yes`
[22:07:21] <aphyr> any? always returns true. not-any? checks a collection to ensure a predicate fails on every element.
[22:07:54] <technomancy> don't get me started on clojure.core/list?
[22:08:16] <aphyr> `some` checks a collection for truthy values of (f element). `some?` returns true for anything but nil.
[22:08:38] <aphyr> I can *never* keep these straight and wind up just not using them
[22:08:54] <aphyr> oh my god
[22:09:01] <aphyr> when I found out that... what is it, some cons cells are not lists?
[22:09:07] <Para> There's also some-> and some->> (been using these quite a lot lately, in fact)
[22:09:16] <technomancy> aphyr: ಠ_ಠ!!!
[22:09:23] <aphyr> Oh my god right, but not ALWAYS
[22:09:32] <aphyr> (cons 1 nil) is a list, but (cons 1 (cons 2 nil)) is NOT a list
[22:09:41] <aphyr> this fucked up some macros I wrote SO badly
[22:09:58] <logiz> D:
[22:10:00] <technomancy> starts-with-paren-p
[22:10:20] <aphyr> I use seq? now in macros for "looks like code"
[22:10:31] <technomancy> (defn actually-list? [x] (re-find #"\(" (pr-str x))))
[22:10:37] <aphyr> ..........
[22:10:49] <Para> It's always nice when the code itself is mostly just guesses.
[22:10:59] <aphyr> I really wanna write a "Clojure: The Bad Parts" post about this stuff, I've got such a list of these for Scala
[22:11:24] <Para> You could maybe do a sort of phpsadness equivalent
[22:11:26] <technomancy> do iiiiiiit
[22:11:34] <Para> Would be easier to create at least.
[22:11:43] <technomancy> or like https://emacshorrors.com/
[22:13:43] <technomancy> but I mean, most of the complaints here are about the naming of functions, which ... compared to the complaints about most languages, is pretty work-around-able
[22:14:23] <aphyr> I have this text file sitting in my tmp folder waiting to become something: https://gist.github.com/aphyr/52679adef45b9ecb9962ed651db8392b
[22:16:31] <technomancy> wat dot clj
[22:16:33] *** Quits: shiranaihito_ (~textual@123-192-192-149.dynamic.kbronet.com.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:16:35] *** Quits: Frozenlock (~user@modemcable251.64-203-24.mc.videotron.ca) (Remote host closed the connection)
[22:16:54] <Para> Someone at a place I used to work at coined Scala's `args.reduce(_ + _)` as "wide ass operator"
[22:17:07] <technomancy> god the option+null stuff in scala
[22:17:25] <technomancy> way to miss the point in a particularly spectacular way
[22:17:58] <aphyr> The polymorphism of set + element sometimes doing string concat and sometimes doing set conj is just...
[22:18:04] <aphyr> truly incredible
[22:18:24] <Para> Was it so that Scala's Option was always supposed to be flatMapped or something dumb like that?
[22:18:40] <Para> "Sure, type says it's a single thing, but MAYBE it's a collection, you can't know that!"
[22:19:16] <Para> I haven't really looked at Scala since 2014. It was too much of a head ache.
[22:19:33] <technomancy> I guess I better get started on making a wat dot fnl collection
[22:19:33] <aphyr> Yeah, I wrote it professionally in 2011/2012 and never looked back
[22:20:54] <aphyr> The thing that's super weird to me is like... Java already *has* optional types and null checks are fast at the VM level
[22:20:59] *** Quits: Major_Biscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 256 seconds)
[22:21:21] <Para> And a majority of JIT's optimizations are focused on terminating null checks.
[22:21:21] <aphyr> They could have made Option type-level sugar over plain old nullable types
[22:21:30] <technomancy> aphyr: java's optional types are a lot newer than scala tho?
[22:21:37] <aphyr> Naw, I mean x = null
[22:21:48] <technomancy> oh, yeah sure
[22:22:09] <aphyr> Like in Clojure nil punning basically means a lot of functions take Option[x] and do something sensible with it
[22:22:23] <technomancy> fsvo "sensible"
[22:22:35] <aphyr> It mostly works! ;-)
[22:22:49] <aphyr> But in Scala you have to worry about *both* option and null constantly
[22:23:03] <aphyr> at least if there's any place (e.g. another JVM library) where a null could leak into your coce
[22:23:07] <technomancy> you have to worry about option at compile time and null at runtime
[22:23:09] <Para> Kotlin is a lot better with nulls, or so I've been told.
[22:23:21] <technomancy> which sounds like a nightmare
[22:24:01] <aphyr> Right, and like, the compiler isn't smart enough to unbox those options is it? It's actually making an instance of an Option class for every just box?
[22:24:12] <aphyr> So you're paying extra pointer indirection costs
[22:24:22] <technomancy> because of type erasure?
[22:24:31] <aphyr> mmmm, I don't think that's an erasure problem
[22:24:53] <technomancy> ok. my knowledge of scala comes exclusively from people complaining about it on IRC so ...
[22:25:04] <aphyr> Just that like, at runtime if you want to get the value of an option, you have to look up the option address, fetch the option, look up its value address *then* fetch the value
[22:25:17] <Para> Scala has its own serialization format it embed to each generated class file to support...something related to the type system.
[22:26:08] <technomancy> aphyr: I figured the reason they couldn't zap that overhead away at compile time would be because some of the values come from type-erasured libraries?
[22:26:23] <technomancy> I mean, maybe it's difficult for multiple reasons but that seems like a big one?
[22:27:45] <Para> One thing in Scala is that it uses overtly complex class/object structures, which neuter JIT's effectiveness. Or at least used to. JIT can analyze over time stuff like chained and nested calls and their common patterns but only if the same pattern occurs often enough; Scala is (or at least was) such a forest of object trees that the JIT basically throws its hands up because there isn't enough RAM
[22:27:47] <Para> in the universe to keep track of it all.
[22:28:06] <TimMc> Para: wide-ass operator, oh my god
[22:28:40] <Para> In normal world these would be rewritten to simpler form, nullability analysis would remove extra null checks where possible, invokedynamic could do rebinding and all that fun stuff.
[22:29:06] <Para> TimMc: there's several variants of it, all over Scala!
[22:29:58] <TimMc> I can confirm that in Kotlin, nulls are more or less a tamed beast.
[22:31:05] <technomancy> I feel like if you design a type system and it doesn't solve nulls then you really shouldn't have bothered
[22:31:06] <TimMc> The only trouble I run into is that the compiler has (I assume) some combination of nullability knowledge of the stdlib based on annotations and just like... hardcoded lists. Sometimes it's wrong.
[22:31:11] <TimMc> technomancy: amen
[22:31:34] <technomancy> like ... this is literally the most common type error in the world, and you're just gonna be like "sorry you're on your own for this; I'm only going to help with the easy problems"
[22:31:50] <sobel> +1
[22:31:55] *** Joins: lispy (~lispy4@84.69.59.93)
[22:33:31] <TimMc> It was a major revelation for me when I realized that Java had union types, just not the ones I wanted.
[22:34:09] <Para> Ah yeah, Java's generics, the parts people rarely go into. All that effort, and it gets erased...
[22:34:10] *** Quits: Ilyu (~quassel@166.215.82.79.rev.sfr.net) (Ping timeout: 250 seconds)
[22:34:23] *** Joins: Ilyu (~quassel@gateway/vpn/pia/ilyu)
[22:36:11] <aphyr> technomancy: Ah, no, I understand now. Yes, you're right.
[22:43:46] <TimMc> The union types I was thinking of were like... `String` is actually a union of java.lang.String and null.
[22:44:04] <TimMc> and you can't avoid it
[22:44:49] <technomancy> TimMc: it's called convenience! =)
[22:46:32] <rovanion> Whoever thought this logo was a good idea should do a second round with their thinking hat on: https://wiki.freepascal.org/RFC_1123_Time_Format
[22:47:20] <rovanion> I'm stressed out just trying to read the page with that in my periphery.
[22:47:40] <TimMc> oh, I thought you meant the format itself!
[22:47:56] <TimMc> No, yeah, the animation is awful.
[22:48:21] <technomancy> rovanion: "just read this documentation while a predator is running towards you; shouldn't cause any problems, right?"
[22:50:18] <sobel> rovanion: thanks for the laugh, was not expecting that!
[22:50:31] <lispy> I will make sure that all my documentation is that distracting in the future
[22:50:45] <sobel> ;; goals
[22:50:49] <TimMc> periodic jump scares
[22:51:05] <TimMc> Your dwell time metrics will improve!
[22:51:13] <sobel> dark ui w/light theme
[22:51:29] <TimMc> "Look how fast people are closing the page. That must mean they're getting the docs they needed!"
[22:53:37] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 240 seconds)
[22:53:51] *** Quits: Ilyu (~quassel@gateway/vpn/pia/ilyu) (Ping timeout: 256 seconds)
[22:54:10] *** Joins: Ilyu (~quassel@166.215.82.79.rev.sfr.net)
[22:56:20] *** Joins: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[23:00:25] <Para> rovanion: here, put this in console to fix the issue:
[23:00:27] <Para> window.addEventListener('mousemove', function(e){Object.assign(document.getElementsByClassName('mw-wiki-logo')[0].style, {left: e.pageX+"px", top: e.pageY+"px", position: "absolute"});});
[23:00:36] *** Quits: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 250 seconds)
[23:01:51] *** Joins: joe_colben (~joe____co@185.190.112.211)
[23:02:03] <sobel> can we talk about chrome refusing to provide a native cursor trails implementation?
[23:02:39] *** Joins: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[23:06:53] <Para> Sometimes I wish Chrome was the kid eating glue.
[23:07:23] *** Quits: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 252 seconds)
[23:13:37] <TimMc> Para: magnificent
[23:23:48] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[23:32:48] <sobel> Para: that helps me a lot
[23:36:16] <rovanion> Para: Oh, thank you! Now I don't know how I ever could have lived without it xD
[23:42:27] *** Joins: tatsumaru (~tatsumaru@82.147.131.155)
[23:42:59] <tatsumaru> hey guys, in this case here, is everything below 'final-body-parts' the else statement: https://paste.rs/5VR
[23:44:15] <cyberbanjo> yes
[23:44:40] <tatsumaru> thanks
[23:44:56] <jeaye> hiredman: Excited for this https://www.juxt.pro/blog/new-clojure-iteration
[23:45:26] <jeaye> I was just explaining lazy-seq to one of my reports, so we can implement pagination.
[23:51:12] *** Quits: puchka (~marius@172.107.93.165) (Quit: leaving)
[23:54:46] *** Quits: RendySurvage (~rendysurv@64.72.216.39) (Ping timeout: 250 seconds)
