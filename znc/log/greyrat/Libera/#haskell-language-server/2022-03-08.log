[00:10:06] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[00:24:00] <alanz> I am coming back to some haskell work (at last). And I find I can no longer "./cabal-hls-install hls-9.2.1" from source.  What am I missing?
[00:25:42] <alanz> https://gist.github.com/alanz/2385e6bcaefb94c2ebfd4ca362bfb8ad
[00:26:35] <drsooch[m]> I think the installer is deprecated?
[00:28:12] <alanz> what is the "Standard" way to install master from source?  for development
[00:32:21] <maerwald> alanz: `ghcup compile hls -g master -r file:///home/hasufell/git/haskell-language-server --ghc 8.10.7` works
[00:32:57] <alanz> thanks, will give it a try
[00:47:50] <alanz> maerwald, it works for 8.10.7, not for 9.2.1
[00:48:14] <maerwald> yes, for 9.2.1 you need `--project-local cabal-ghc921.project` as well
[00:48:21] <maerwald> oops
[00:48:30] <maerwald> --cabal-project
[00:48:50] <maerwald> so you need two invocations
[00:49:46] <alanz> ok, thanks
[00:50:00] <alanz> is this stuff documented anywhere?
[00:50:15] <maerwald> well https://github.com/haskell/haskell-language-server has 3 cabal.project files
[00:50:28] <maerwald> because we don't have per-ghc conditionals (yet) in cabal
[01:00:26] <alanz> maerwald, finally got it to work, the --cabal-project-local needs a file uri too.
[01:00:40] <alanz> The error message is not great, just complains of a missing colon
[01:01:17] <alanz> `ghcup compile hls -g master -r file:///home/alanz/mysrc/github/alanz/haskell-language-server --cabal-project-local file:///home/alanz/mysrc/github/alanz/haskell-language-server/cabal-ghc921.project --ghc 9.2.1` is doing the job
[01:01:39] <maerwald> alanz: you should use --cabal-project, not --cabal-project-local for that
[01:02:05] <maerwald> --cabal-project accepts relative path (the root is the repo)
[01:02:27] <alanz> ok, will try that.  But first let this finish
[01:05:27] *** Joins: coot (~coot@213.134.190.95)
[01:06:17] <sm> welcome back alanz
[01:06:57] <alanz> sm, thanks.  Been deep diving into weird stuff like common lisp.
[01:07:14] <alanz> But figured its time to swing back into this zone for a bit
[01:07:38] <sm> ah, that explains the green glow of alien technology around you!
[01:08:42] <alanz> something like that :)
[01:09:34] <alanz> Is there a reason the haskell-language-server-wrapper is around 140MB on my machine, but haskell-language-server is only 440k? Dynamic linking for hls, static for the wrapper/
[01:09:35] <alanz> ?
[01:09:47] <maerwald> yes
[01:10:08] <maerwald> https://github.com/haskell/haskell-language-server/pull/2688
[01:10:23] <maerwald> https://github.com/haskell/haskell-language-server/pull/2675
[01:11:18] <alanz> thanks
[01:16:16] <alanz> maerwald, if I invoke it using "      --cabal-project ./cabal-ghc921.project" instead of what I had before, it rebuilds everything from scratch. I find that a bit unexpected.
[01:16:53] <alanz> invoking the prior command twice in a row did a bit of checking then stopped, no actual building
[01:16:58] <maerwald> alanz: likely because previously you mixed two cabal.project files
[01:17:33] <maerwald> you caused cabal to use both cabal.project and cabal-ghc921.project
[01:17:43] <maerwald> that's why I said you should use --cabal-project
[01:17:49] <alanz> but basically the one time it referred to cabal-project-local with a full URL the second to cabal-project, but the same file both times
[01:18:02] <alanz> ok, that makes sense
[01:20:28] <alanz> My impression when I come back to haskell, from rust and common-lisp, is that compilation takes a *long* time.
[01:22:53] <alanz> ghcup is becoming a pretty useful tool
[01:24:19] <sm> +1 to both!
[01:24:20] <shapr> I wish we had someone to make GHC faster, the way that one person spend lots of time on rustc
[01:24:38] <maerwald> shapr: I think it did become faster though?
[01:24:56] <maerwald> https://grafana.gitlab.haskell.org/d/s3PVoM_Mz/ghc-testsuite-performance?orgId=2
[01:26:08] <alanz> nice.  I believe 9.2.2 is faster
[01:28:00] <maerwald> but yeah, we'll never beat go
[01:28:16] <shapr> mind you, go isn't doing much
[01:28:22] <maerwald> exactly
[01:29:06] <shapr> I was recently reading https://nnethercote.github.io/2022/02/25/how-to-speed-up-the-rust-compiler-in-2022.html and wondering if anyone is doing the same thing for GHC
[01:45:40] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[02:24:55] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Remote host closed the connection)
[02:25:08] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[07:12:53] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:14:19] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[09:11:52] *** Joins: coot (~coot@213.134.190.95)
[10:53:11] *** Joins: fendor (~fendor@178.115.53.79.wireless.dyn.drei.com)
[14:06:07] *** Joins: fello123 (~skykanin@213.52.126.34)
[14:07:40] <fello123> So I'm trying to get an HLS binary that supports TH through nix, but building HLS from the offical github repository flake and running the lsp in my haskell projects spits out the error message "LSP :: This HLS binary does not support Template Haskell ..."
[14:16:45] <fello123> This issue seems related: https://github.com/haskell/haskell-language-server/issues/2659
[14:47:52] *** Joins: fendor_ (~fendor@178.165.181.170.wireless.dyn.drei.com)
[14:50:28] *** Quits: fendor (~fendor@178.115.53.79.wireless.dyn.drei.com) (Ping timeout: 256 seconds)
[15:10:51] <mpickering> fello123: You have to build hls with exactly the same version of GHC which you use for your project
[15:10:55] <mpickering> emphasis on exactly
[15:11:04] *** Joins: yauhsien (~Yau-Hsien@61-231-43-120.dynamic-ip.hinet.net)
[15:13:00] <fello123> mpickering: I am using GHC 8.10.7 and building HLS-8107. Note that I'm using the flake from the 1.6.1.0-hackage branch which doesn't have the dynamic flag in the cabal file so I'm gonna try using master instead
[15:13:28] <mpickering> by exactly
[15:13:28] <mpickering> I mean
[15:13:31] <mpickering> exactly the same
[15:13:38] <mpickering> not just the version
[15:13:43] <mpickering> however you get your ghc for your project
[15:13:47] <mpickering> you need to use that ghc to build hls
[15:14:01] <mpickering> I imagine the flake is building hls with a different ghc
[15:14:59] <fello123> ah, right. How do I pass the ghc derivation to the haskell-language-server nix derivation? Do I just override its build inputs?
[15:26:21] <mpickering> I have no idea ha
[15:56:57] <michaelpj> Cc Guillaum who I think actually uses the flake
[16:01:48] <fello123> overriding the build inputs on the flake in the master branch of HLS worked. I no longer get the error about it not supporting TH
[16:18:26] <Guillaum[m]> (Hello, let me read the log ;)
[16:20:01] <Guillaum[m]> fello123: how did you upgraded the build input in the flake?
[16:21:15] <fello123> Guillaum[m]: overrideAttrs on buildInputs and nativeBuildInputs because I don't know which one is correct hehe
[16:21:17] <mpickering> alanz: Why do all the EP data types have Ord instances? Are they supposed to be ordered by SrcSpan?
[16:21:38] <Guillaum[m]> mpickering: why do we need to build with exactly the same version?
[16:21:38] <Guillaum[m]> You can use nix flake `follow` feature for nixpkgs, or you can use the nixpkgs input from `hls` into your project, depending on your preferences. Or you can override the `nixpkgs` from hls using the same nixpkgs as your project using `nix flake --override_input` (or something similar, I really never remember the exact command)
[16:22:04] <mpickering> What is the ordering of a EpaLocation supposed to mean
[16:22:31] <mpickering> Guillaum[m]: Otherwise you end up loading object files compiled with a different version of GHC with a different ABI so you get segfaults
[16:22:44] <Guillaum[m]> It will looks like `inputs.hls.nixpkgs.follows = "nixpkgs"` if you nixpkgs input is called `nixpkgs`.
[16:24:08] <alanz> mpickering: I will take a look when I get a chance, need to refresh my brain. I suspect they may not make sense in some situations 
[16:24:31] <mpickering> thanks
[16:39:42] <terrorjack> building against ghc-9.2.2 fails with some ghcide error
[16:42:15] <drsooch[m]> I built last night saw no issue
[16:43:03] <Guillaum[m]> @fellow123: you overrided the `(native)buildInputs` and changed the GHC version. And you did that for all the hls dependencies / plugins? Whau, I'm impressed.
[16:43:43] <terrorjack> that's strange
[16:46:09] <fello123> Guillaum[m]: no, I only did it for HLS itself, not for its deps
[16:46:13] <drsooch[m]> Donâ€™t forget to use cabal-ghc921.project file
[16:47:44] <terrorjack> yeah i'm using that one exactly
[16:47:48] <terrorjack> with latest master
[16:48:10] <terrorjack> i filed a ticket, but feel free to close if cannot repro
[16:48:19] <fello123> to be clear I'm using niv and depending on the flake, but yeah when I eventuall switch this setup to be flake based I will use `inputs.hls.nixpkgs.follows = ...`
[16:49:05] <drsooch[m]> Just checked again had no issue, strange
[16:50:39] <terrorjack> oh i need to close it...that's actually built with ghc-8.10.7
[16:51:29] <fello123> nvm, it seems that the override was unnecessary. HLS seems to be working fine without it
[17:10:54] *** Quits: fello123 (~skykanin@213.52.126.34) (Quit: WeeChat 3.3)
[17:27:58] *** Quits: July541_ (~July@218.70.255.163) (Remote host closed the connection)
[17:28:22] *** Joins: July541_ (~July@218.70.255.195)
[19:06:40] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[19:07:50] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[20:17:05] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[20:29:44] *** Joins: WhateverRabbit (~rabbit@206.81.18.26)
[20:37:12] <WhateverRabbit> Hi all. Vscode launchs 2-3 instances of Haskell extension when I open my project (and it gives me 3 identical hints). I tested this at another project and everything works well there. I don't understand where may be a problem.
[20:38:43] <WhateverRabbit> link to the project: https://github.com/Player-205/microcaml
[20:39:41] <WhateverRabbit> Btw I use direnv to load environment from nix-shell
[20:51:09] *** Joins: coot (~coot@213.134.190.95)
[21:44:46] <pepeiborra> fendor[m]: mpickering wz1000 did anyone encounter issues with ghcide/HLS getting "stuck" occasionally?
[21:45:32] <fendor[m]> Yes, a ton
[21:45:41] <pepeiborra> WhateverRabbit: it might be due to a lack of cabal.project file? Not sure 
[21:46:11] <fendor[m]> Easily reproducible with the vscode remote extension 
[21:46:23] <pepeiborra> fendor[m]: A repro would be great
[21:46:28] <pepeiborra> Must have been introduced in HLS 1.5 with the hls-graph upgrade.
[21:46:58] <pepeiborra> I'm reviewing all the "masks" and adding logging to collect more data
[21:47:23] <fendor[m]> Matt said it is reproducible on ghc codebase, I didn't manage to reproduce outside of company network 
[21:48:14] <pepeiborra> https://github.com/haskell/haskell-language-server/pull/2768
[21:48:34] <pepeiborra> Won't fix it, but at least will give us some data
[21:49:05] <fendor[m]> Yeah I had trouble obtaining good data points 
[21:49:41] <fendor[m]> I can try to make a repro tomorrow, I am away for the day 
[21:55:22] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[22:38:49] <WhateverRabbit> pepeiborra: I added cabal.project file with "packages: ./*.cabal" line, but it had no effect
[22:39:58] <WhateverRabbit> I readed in hls documentation, that I can use cachix, maybe it can help me
[22:43:23] <WhateverRabbit> no, it can't :(
[22:52:45] *** Joins: coot (~coot@213.134.190.95)
[23:42:15] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
