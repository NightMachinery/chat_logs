[00:01:08] *** Joins: melezhik (~melezhik@c-73-32-143-85.hsd1.tx.comcast.net)
[00:09:18] *** Quits: melezhik (~melezhik@c-73-32-143-85.hsd1.tx.comcast.net) (Quit: Ping timeout (120 seconds))
[00:46:40] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[01:00:19] *** Joins: discord-raku-bot (~RakuIRC@95.90.183.75)
[01:43:01] *** Quits: daxim (~daxim@2a02:b18:c13b:28:42b0:76ff:fe7b:7663) (Ping timeout: 245 seconds)
[01:54:51] <discord-raku-bot> <Nemokosch#9980> but you know it's funny because reading on, it turns out that most JS libraries are stable in return
[01:57:13] <discord-raku-bot> <Nemokosch#9980> unlike PHP where I have no idea what they managed to mess up so much...
[02:04:02] *** Quits: Skarsnik (~Skarsnik@91-170-31-218.subs.proxad.net) (Ping timeout: 240 seconds)
[02:17:42] *** Joins: A26F64 (~A26F64@cpe-74-69-167-143.stny.res.rr.com)
[02:19:17] <tonyo> hasn't been my experience with JS libs..some of the ultra popular ones are very stable _now_ but still have dependency hell
[02:23:58] <discord-raku-bot> <Nemokosch#9980> dependency is not "hell" per se. Javascript doesn't come with a huge runtime like Java or .NET so it's obvious the common things people are using will be more visible
[02:27:01] *** Joins: melezhik (~melezhik@c-73-32-143-85.hsd1.tx.comcast.net)
[02:27:50] <melezhik> .
[02:28:56] <melezhik> I am not sure of how many people have heard of #raku-news channel , but here one can get some new - comments from mybfio related to Raku
[02:28:58] <melezhik> https://logs.liz.nl/raku-news/live.html
[02:29:05] <melezhik> for old entries
[02:29:25] <melezhik> https://logs.liz.nl/raku-news/index.html
[02:30:26] <tonyo> 377 dependencies is significantly buigger than go's 13. it isn't like go has a huge runtime built into it
[02:30:58] <tonyo> and building dependencies for something like raku makes 377 a bear
[02:32:05] <tonyo> though, eventually, i suppose the dependency builder will get merged in with zef and it can async build most of them.  iirc 2018 PTS is when that was built but the async portion wasn't stable enough to precomp everything
[02:32:43] <discord-raku-bot> <Nemokosch#9980> I only know Go as the language that explicitly advocated copypasting tbh
[02:38:58] *** Quits: melezhik (~melezhik@c-73-32-143-85.hsd1.tx.comcast.net) (Quit: Ping timeout (120 seconds))
[02:42:23] <tonyo> it does advocate that for the people who don't want to screw around with generators. there isn't a huge runtime for it, similarly to java or .net.  it's not like js doesn't also promote copy and paste, either
[02:42:41] <tonyo> it'd be easy to generate those numbers for raku
[02:45:04] *** Quits: A26F64 (~A26F64@cpe-74-69-167-143.stny.res.rr.com) (Quit: Connection closed)
[02:46:56] *** Joins: melezhik (~melezhik@c-73-32-143-85.hsd1.tx.comcast.net)
[03:09:19] <tonyo> not sure what method they're using for the percentiles.  raku came out for 10% = 0 depends, mean = 1, 90% = 4.. this could be tweaked to get the right numbers if they're doing something different curl -s 360.zef.pm|jq '.[].depends|length' 2>&1|sort -n|perl -e 'my @x; while (<>) { chomp; push @x, $_; }; my @N = @x[map $_*@x, .1, .5, .9]; printf "10%: %d\n50%: %d\n90%: %d\n\n", @N;'
[03:12:02] *** Quits: melezhik (~melezhik@c-73-32-143-85.hsd1.tx.comcast.net) (Ping timeout: 240 seconds)
[03:14:04] *** Quits: dogbert17 (~dogbert@c83-253-59-194.bredband.tele2.se) (Ping timeout: 244 seconds)
[03:28:11] <discord-raku-bot> <Nemokosch#9980> Well JS nowadays is a lot less minimalistic than Go was designed to be, I don't think it's a bad thing that many things are offered as libraries on top of the language
[03:28:57] <discord-raku-bot> <Nemokosch#9980> I genuinely don't get why someone would use is-array for one but it would be a bit harsh to call this phenomenon "hell" lol
[03:33:32] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Ping timeout: 240 seconds)
[03:34:43] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:35:21] <tonyo> that isn't what i'm referring to as hell. the hell bit is more in reference to how seemingly simple libraries give you a large number of associated dependencies
[03:35:26] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[03:37:48] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[03:40:02] <discord-raku-bot> <Nemokosch#9980> It's all about who manages the dependency. Having the same code as one monolith wouldn't get you further, would it
[03:42:09] <tonyo> for instance, nodejs `curl` looks like it should have no depends but gives you more than 30 modules to install
[03:42:26] <tonyo> there isn't a whole lot of code to wrapping libcurl
[03:42:51] <tonyo> so, while you're right on with your point it's irrelevant
[03:43:48] <tonyo> if you had to have _either_ a monolith _or_ a bunch of small libraries then that'd be true but there are other options
[03:46:29] <discord-raku-bot> <Nemokosch#9980> Actually, most of the dependencies of libcurl come from gyp
[03:46:37] <discord-raku-bot> <Nemokosch#9980> Nothing can be done about that
[03:47:10] <SmokeMachine> .tell whatnext Red::Config was merged!
[03:47:11] <tellable6> SmokeMachine, I'll pass your message to whatnext
[03:48:49] *** Joins: dogbert17 (~dogbert@c83-253-59-194.bredband.tele2.se)
[03:49:39] <discord-raku-bot> <Nemokosch#9980> Besides that, npmlog has 4 dependencies but those seem meaningful to me, much better than come around them with an ad-hoc semi-implementation
[03:51:54] <discord-raku-bot> <Nemokosch#9980> I think if you actually want to cut these dependencies, the reasonable thing is to not add certain random shiny sparkles to the module
[03:52:54] <discord-raku-bot> <Nemokosch#9980> Like does libcurl need a cute ascii loadbar? Not sure.
[03:53:14] <tonyo> i'm not attacking js.  i'm saying that it's dependency hell because js modules make it difficult to see the expanse of what you just installed.  `7 Dependencies` can mean seven or in the case of libcurl it really means 126 dependencies
[03:55:43] <tonyo> gyp is responsible for 96 of those dependencies
[03:56:46] <discord-raku-bot> <Nemokosch#9980> I think that's a different point than whether it's justified to have those dependencies or have as many. Sure thing, it could be more transparent but at the end of the day, this is npm's fault that many including Ryan Dahl himself ended up disliking
[03:57:49] <tonyo> how is it npm's fault?
[03:58:40] <discord-raku-bot> <Nemokosch#9980> It is what doesn't show you the actual cost and doesn't enforce you to even think about it
[04:01:09] <discord-raku-bot> <Nemokosch#9980> If we want to apply the term "module hell" to the language itself, the only meaningful way would be: it was hell to even create a module in JS for a long time :D
[04:01:49] *** Quits: hkdtam (~hkdtam@13.66.204.139) (Quit: Client closed)
[04:02:21] <tonyo> it wasn't that bad, even in the early stages
[04:02:57] <discord-raku-bot> <Nemokosch#9980> There were ad-hoc patterns thrown around
[04:03:02] <tonyo> i'm saying dependency hell because of the transparency for consumer and for the complexity it adds to module building on the package management side
[04:03:30] <tonyo> less to do about a consumer who couldn't care less and just wants to get data from there to here or whatever
[04:03:56] *** Joins: melezhik (~melezhik@c-73-32-143-85.hsd1.tx.comcast.net)
[04:05:08] <discord-raku-bot> <Nemokosch#9980> But that's not actually bound to the language, much more so to the ecosystem and the community
[04:05:18] <tonyo> agreed
[04:05:30] <discord-raku-bot> <Nemokosch#9980> And even then I would say it's rather a certain approach than an anomaly
[04:05:50] <discord-raku-bot> <Nemokosch#9980> At least for the micro-modules
[04:05:50] <tonyo> if it weren't then js wouldn't have the bloated numbers in that paper
[04:06:21] <tonyo> that doesn't make it not hell to determine scope of dependencies or build them in the right order
[04:06:43] <tonyo> particularly in the case of something like raku where precompilation is a concern
[04:09:20] <discord-raku-bot> <Nemokosch#9980> I don't know what implications it would have for raku, I as a casual JS user don't see the problem and actually I don't see it presented in a negative way in that paper either
[04:11:00] <discord-raku-bot> <Nemokosch#9980> The problem was when someone deleted that string padding module and broke half of npm - now that was quite some scandal
[04:12:57] <tonyo> i used to write modules for js, some were popular some weren't. i use go for work and have used perl for work. something that is of concern is associated dependencies.  the more there are the more places you have to trace bugs and if you do anything with PII then the more surface area for vulnerabilities.  that paper mentions the latter part. if you don't code for work or you don't have to deal with PII then 
[04:13:03] <tonyo> it's of no concern
[04:14:56] <discord-raku-bot> <Nemokosch#9980> The paper also mentions that JS modules have notoriously low bug density, let alone when it comes to exploitable bugs
[04:15:08] <discord-raku-bot> <Nemokosch#9980> It's almost on par with Java
[04:15:43] <discord-raku-bot> <Nemokosch#9980> This is also something to wonder about
[04:18:14] <discord-raku-bot> <Nemokosch#9980> And you know, regarding work, I could tell more about the big copypasted C monolith 😅
[04:18:42] <discord-raku-bot> <Nemokosch#9980> Anyways, good universal sleeping time
[04:22:56] <tonyo> 
[04:25:33] *** Quits: melezhik (~melezhik@c-73-32-143-85.hsd1.tx.comcast.net) (Ping timeout: 256 seconds)
[05:05:29] *** Joins: frost (~frost@user/frost)
[05:42:11] *** Joins: TimToady (~TimToady@107-202-146-247.lightspeed.sntcca.sbcglobal.net)
[05:44:19] <TimToady> Hi, I think I accidentally cloned rakudo into Raku.  Anyone know how to undo that?  (I realize "undo" is a strange concept in gitland...)
[05:44:20] <tellable6> 2019-07-24T18:40:12Z #perl6-dev <vrurg> timtoady: could you come up with an idea for a Map operator like those we have for List,Array, and Hash?
[05:45:19] <moon-child> TimToady: you mean this https://github.com/Raku/rakudo ?  Settings -> scroll to the bottom -> 'delete this repository'
[05:45:55] <TimToady> That sounds...dangerous...
[05:46:16] <TimToady> And I wasn't sure if it was there before, and I just did something idemptotent...
[05:46:50] <vrurg> TimToady: no, it wasn't there. It is safe to delete it.
[05:47:03] <TimToady> Thanks!
[05:47:06] <vrurg> I can do it, if you wish.
[05:54:05] * [Coke] waves.
[06:15:38] <japhb> TimToady \o/
[06:42:11] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:42:11] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:43:03] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[06:44:27] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[07:09:19] *** Quits: TimToady (~TimToady@107-202-146-247.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[07:16:29] *** Quits: MasterDuke (~MasterDuk@94.0.188.131) (Quit: Ping timeout (120 seconds))
[07:16:50] *** Joins: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net)
[07:44:44] <tonyo> 3
[07:46:23] <andinus> MasterDuke: ah i see, is it https://github.com/rakudo/rakudo/pull/4634 ? 
[07:46:25] <tellable6> andinus, I'll pass your message to MasterDuke
[08:16:50] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:16:50] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:27:02] *** Quits: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net) (Remote host closed the connection)
[09:05:08] *** bdju_ is now known as bdju
[09:32:57] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:34:00] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[09:58:53] *** Joins: hkdtam (~hkdtam@13.66.204.139)
[10:22:34] *** Quits: Sgeo_ (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[10:22:43] *** Joins: Sgeo (~Sgeo@user/sgeo)
[10:47:27] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:48:11] *** Joins: seednode (~seednode@user/seednode)
[11:16:12] <frost> say DateTime.now
[11:16:18] <frost> m: say DateTime.now
[11:16:18] <camelia> rakudo-moar 09f5069cc: OUTPUT: «2021-11-10T08:46:18.092819+01:00␤»
[11:21:11] *** Joins: ufobat (~martin@dynamic-077-007-108-252.77.7.pool.telefonica.de)
[11:31:23] <andinus> m: run 'uname'
[11:31:23] <camelia> rakudo-moar 09f5069cc: OUTPUT: «Linux␤»
[11:53:01] *** Quits: Oshawott (~archenoth@2604:3d09:681:f00:fd31:5d52:fd09:995d) (Ping timeout: 245 seconds)
[11:55:13] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[12:05:30] *** Quits: ufobat (~martin@dynamic-077-007-108-252.77.7.pool.telefonica.de) (Read error: Connection reset by peer)
[12:05:37] *** Joins: ufobat (~martin@dynamic-077-007-108-252.77.7.pool.telefonica.de)
[12:19:05] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[12:28:15] *** Joins: abraxxa (~ahartmai@smtp.hartmaier.priv.at)
[12:32:53] *** Quits: abraxxa (~ahartmai@smtp.hartmaier.priv.at) (Ping timeout: 256 seconds)
[12:33:35] *** Joins: abraxxa (~ahartmai@tsa-tc-flod-1.t-systems.at)
[12:35:06] *** Joins: dakkar (~dakkar@home.thenautilus.net)
[13:17:49] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[13:34:11] *** Joins: Skarsnik (~Skarsnik@91-170-31-218.subs.proxad.net)
[13:53:22] *** Joins: archenoth (~archenoth@2604:3d09:681:f00:2179:f42f:d06b:5392)
[14:07:02] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[14:09:04] *** Joins: frost (~frost@user/frost)
[14:16:02] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[14:19:30] *** Joins: whatnext (~whatnext@static.120.96.63.178.clients.your-server.de)
[14:22:36] <whatnext> Hello all :)  Another question regarding Red: I am currently getting "remaining connection slots are reserved for non-replication superuser connections" after a series of find/inserts - which makes me wonder if a new db connection is getting created for each database request. Does anyone know (or know where to find) info about how database
[14:22:37] <whatnext> connections are managed with Red? :)
[14:22:38] <tellable6> 2021-11-10T00:17:11Z #raku <SmokeMachine> whatnext Red::Config was merged!
[14:23:41] <whatnext> SmokeMachine: ah yes that reminds me - that fix did indeed work. I forgot to close the issue. Doing that now
[14:25:05] <SmokeMachine> whatnext: it should not create new connections, would you mind to share your code?
[14:26:34] <SmokeMachine> whatnext: but that's something I've being not paying much attention on... so it's very likely to be a bug...
[14:27:49] <SmokeMachine> :(
[14:29:46] <whatnext> SmokeMachine: hang on a sec - preparing a gist
[14:29:52] *** Joins: frost (~frost@user/frost)
[14:46:53] <whatnext> SmokeMachine: gist is here: https://gist.github.com/whatnext/825e0cd9aa814d384cc1786c8b625d5e - i've tried to summarise because it's a fair bit more complicated in reality - so let me know if it doesn't make sense
[14:50:09] <SmokeMachine> whatnext: how is your connection? where is it defined?
[14:53:27] <whatnext> SmokeMachine: in the top level script I have `my $*RED-DB = initdb()` which calls `database ....` and returns the result
[14:53:35] <whatnext> this is only called once
[14:53:38] <SmokeMachine> whatnext: why don't you use a schema instead of your wrapper? you could just do: `my $schema = schema(<Table1 Table2 Table3>)` and then `$schema.Table1` or `$schema.model("Table1")` would be equivalent to your `$.redwrap.set('Table1')`
[14:59:05] <whatnext> SmokeMachine: probably because I don't know what I am doing? '=D  Well, ok I did experiment quite a bit to try and find the most convenient way to organise the schema code. I had some issues setting it up using other methods - but I confess I don't 100% remember the rationale
[15:00:47] <whatnext> do you think it makes a difference re. database connections?
[15:07:04] <SmokeMachine> whatnext: have you tried doing that using "multi level" .^create? something like this: `Table1.^create: :$sheet_id, :$name, :table2{ :num-comps(@comps.elems) }, :comps(@comp.map: -> $name { %(:$sheet_id, :$name, :param{ :$eqn_id }) })` (sorry, I don't know your relationships' names than I just invented some names)
[15:08:05] <SmokeMachine> whatnext: I think it probably does... that's the `database` command that creates the connection...
[15:09:17] <whatnext> SmokeMachine: I'm only calling `database...` once though
[15:09:19] <SmokeMachine> whatnext: here's an example of "multi level" .^create: https://github.com/FCO/Red#create
[15:10:26] <SmokeMachine> here another example: https://fco.github.io/Red/tutorials/cookbook.html
[15:11:15] <whatnext> SmokeMachine: I haven't tried that - but I am wondering if I should have to do that? Shouldn't it work as separate inserts as well?
[15:11:25] <SmokeMachine> whatnext: would you mind to create a small code that could reproduce that bug, please?
[15:11:56] <SmokeMachine> yes, separated inserts inside a transaction...
[15:12:04] <SmokeMachine> yes, separated inserts inside a single transaction...
[15:17:08] *** Quits: whatnext (~whatnext@static.120.96.63.178.clients.your-server.de) (Quit: Ping timeout (120 seconds))
[15:17:39] *** Joins: whatnext (~whatnext@static.120.96.63.178.clients.your-server.de)
[15:18:42] <whatnext> SmokeMachine: to be honest I don't think I am going to have time to do that currently - I am pretty maxed out at the moment
[15:19:47] <SmokeMachine> whatnext: so, can you share the code itself where the bug is happening? or is that something "unsharable"?
[15:20:38] <SmokeMachine> whatnext: anyway, after work I'll test writing some code doing many inserts in loop and I'll see if I can reproduce that bug
[15:20:41] *** Joins: Altai-man (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz)
[15:22:09] <whatnext> SmokeMachine: ok great - let me know if you figure it out :)  right now I will look for a workaround
[15:23:37] <whatnext> it is a proprietary project, so I think I can't really share large amounts of the codebase unfortunately
[15:25:57] <SmokeMachine> whatnext: sure! and please, if you find some time to golf that to something you can share, please let me know
[15:26:32] <SmokeMachine> what driver are you using? Pg os SQLite?
[15:26:44] <SmokeMachine> *or
[15:29:40] <SmokeMachine> whatnext: ^^
[15:30:26] <whatnext> SmokeMachine: Pg
[15:30:33] <SmokeMachine> ok, thanks
[15:33:14] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:39:42] *** Quits: frost (~frost@user/frost) (Ping timeout: 260 seconds)
[15:43:17] *** Quits: hkdtam (~hkdtam@13.66.204.139) (Quit: Client closed)
[15:47:35] *** Quits: Skarsnik (~Skarsnik@91-170-31-218.subs.proxad.net) (Read error: Connection reset by peer)
[15:53:01] *** Joins: sm1 (~sm1@2601:44:8701:9420::76d)
[16:00:20] *** Quits: whatnext (~whatnext@static.120.96.63.178.clients.your-server.de) (Quit: Connection closed)
[16:50:37] *** Quits: dakkar (~dakkar@home.thenautilus.net) (Read error: Connection reset by peer)
[16:51:25] *** Joins: dakkar (~dakkar@home.thenautilus.net)
[18:30:00] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[18:30:00] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[18:31:13] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[18:31:56] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[18:36:13] *** Quits: vrurg (~vrurg@45.74.95.181) (Quit: Leaving...)
[18:37:57] *** Joins: vrurg (~vrurg@45.74.95.181)
[19:00:45] *** Joins: Sgeo (~Sgeo@user/sgeo)
[19:06:52] *** Joins: Sgeo_ (~Sgeo@user/sgeo)
[19:09:14] *** Quits: Sgeo (~Sgeo@user/sgeo) (Ping timeout: 260 seconds)
[19:45:28] *** Joins: thowe (~thowe@66.39.169.133)
[19:58:24] *** Quits: cognominal (~cognomina@lfbn-idf1-1-1362-51.w90-79.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[20:04:07] *** Joins: patrickb (~quassel@55d4487f.access.ecotel.net)
[20:05:31] *** Quits: Kaipi (~Kaiepi@156.34.44.192) (Read error: Connection reset by peer)
[20:05:42] *** Joins: Kaipi (~Kaiepi@156.34.44.192)
[20:31:12] *** Quits: dakkar (~dakkar@home.thenautilus.net) (Remote host closed the connection)
[20:35:16] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[20:45:07] *** Joins: TimToady (~TimToady@107-202-146-247.lightspeed.sntcca.sbcglobal.net)
[20:55:42] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[21:12:51] *** Joins: stanrifkin (~stanrifki@p200300dbcf12db005e62b87406065193.dip0.t-ipconnect.de)
[21:14:31] <stanrifkin> What is the exponentiation algorithm in raku? when I say 2 ** 1000000 it takes a long time. Does it not uses square-and-multiply? Other languages like racket gives a result instantly.
[21:15:32] *** Quits: sm1 (~sm1@2601:44:8701:9420::76d) (Ping timeout: 240 seconds)
[21:15:50] <[Coke]> m: say 2 ** 1000000.0
[21:15:51] <camelia> rakudo-moar 57387455d: OUTPUT: «Inf␤»
[21:16:06] <[Coke]> m: say 2.0 ** 1000000
[21:16:26] <[Coke]> I presume the slowness is related to going to bigrats.
[21:16:28] <camelia> rakudo-moar 57387455d: OUTPUT: «(timeout)»
[21:17:01] <japhb> [Coke]: But he specified Int ** Int, which shouldn't need that.
[21:17:08] <stanrifkin> i didn't use decimals or rats...
[21:17:15] <japhb> m: say 2 ** 1000000
[21:17:37] <camelia> rakudo-moar 57387455d: OUTPUT: «(timeout)»
[21:17:50] <[Coke]> er, bigint?
[21:17:55] <japhb> stanrifkin is correct that that shouldn't be that slow.
[21:18:07] <[Coke]> it's definitely Big. :)
[21:18:48] <[Coke]> running it with a --profile here..
[21:18:56] <japhb> m: my $n = 2 ** 1000000; say now - INIT now
[21:18:57] <camelia> rakudo-moar 57387455d: OUTPUT: «0.000362705␤»
[21:19:11] <japhb> Yeah, it's not the math that's the problem.  It's the stringification.
[21:20:34] <japhb> We've spent some effort on having faster Num <-> Str conversion; I don't recall if anyone looked at our (big) Int <-> Str conversion
[21:22:46] <[Coke]> using 2021.10, 99.94% of time spent in Int.Str, yup
[21:23:41] *** Joins: MasterDuke (~MasterDuk@94.0.188.131)
[21:23:55] <[Coke]> that method is just:         nqp::p6box_s(nqp::tostr_I(self));
[21:29:21] <[Coke]> and that appears to be mainly this moarvm func: https://github.com/MoarVM/MoarVM/blob/9bb1aebcb3c9b30388ee3b2f06120b84f9477dbe/src/math/bigintops.c#L1006
[21:30:45] <[Coke]> japhb: good thinking. got there faster than the --profile. :)
[21:32:53] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[21:34:10] <japhb> [Coke]: I have experience suspecting strings of being slow.  ;-)
[21:35:00] <[Coke]> https://github.com/MoarVM/MoarVM/blob/d11bd7f11aa6661d6c09b3284bee6d3931bb3508/src/strings/ascii.c#L5 maybe
[21:35:27] <MasterDuke> the gmp branch will help with both the exponentiation and the str conversion
[21:35:29] <tellable6> 2021-11-10T04:16:25Z #raku <andinus> MasterDuke: ah i see, is it https://github.com/rakudo/rakudo/pull/4634 ? 
[21:35:38] <[Coke]> MasterDuke++
[21:36:05] <stanrifkin> what someone would normally do in C to convert a byte array into a str?
[21:36:19] <stanrifkin> is gmp also slow?
[21:36:27] *** Quits: Altai-man (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz) (Quit: Leaving)
[21:36:44] <MasterDuke> fwiw, i also have wip moarvm+rakudo branches that provide some minor speedup to integer exponentation https://github.com/rakudo/rakudo/pull/4320 and https://github.com/MoarVM/MoarVM/pull/1470
[21:37:47] <MasterDuke> no, gmp is very fast\
[21:38:16] <stanrifkin> MasterDuke: i don't the code but mpz_get_str should help or?
[21:38:32] <MasterDuke> exactly
[21:38:44] <MasterDuke> https://github.com/MoarVM/MoarVM/pull/1402
[21:39:29] <[Coke]> what was the blocker there, windows?
[21:40:03] <MasterDuke> yeah, still haven't debugged the problem there
[21:40:44] <[Coke]> ok. I have a working windows again, can give it a shot this weekend?
[21:57:04] <MasterDuke> i kind of know where the problem is (uint handling where windows is 32bit for some types compared to everything else being 64bit), and i do have a windows vm, i just haven't had good success yet using the debugger and such
[21:57:55] <MasterDuke> so if you're willing to play around i'd love the help
[21:58:55] <MasterDuke> but i don't really have anything concrete nailed down as far as what to try for a fix
[22:01:09] <[Coke]> ok
[22:12:12] <stanrifkin> MasterDuke: there is an gmp branch on linux already? 
[22:14:04] <MasterDuke> well, sort of. that branch needs a little cleaning up, but it does already build and rakudo passes all spectests (except for one where where we expect something to fail because the current bigint library can't do it, but with gmp it succeeds)
[22:14:26] <MasterDuke> on linux and macos. it's just windows where it doesn't work
[22:15:31] <MasterDuke> if you build your own rakudo you could probably just tell it to use that moarvm branch (i'd have to rebase it up to HEAD of master, but that shouldn't be too difficult)
[22:15:37] *** Joins: A26F64 (~A26F64@cpe-74-69-167-143.stny.res.rr.com)
[22:18:25] <stanrifkin> hm... no. i am just a beginner. good work though. I was just wondering why LibTomMath has not a string conversion function.
[22:20:25] <MasterDuke> it does have one, it's just using a slow algorithm. i actually had a pr open with them to use a much faster one, but it needed a little work and then i realized gmp would be faster for lots of other things as well and switched to working on getting moarvm to use it instead
[22:21:19] <MasterDuke> https://github.com/libtom/libtommath/pull/330
[22:21:29] <stanrifkin> MasterDuke: i am sure perl5 uses gmp on windows. maybe you can copy something there.
[22:24:37] *** Quits: casaca (~casaca@user/casaca) (Read error: Connection timed out)
[22:24:51] <MasterDuke> yeah. we'll figure it out eventually, i just don't find working in windows all that enjoyable so i keep procrastinating
[22:24:59] *** Joins: casaca (~casaca@user/casaca)
[22:31:21] <stanrifkin> MasterDuke: do you use vcpkg?
[22:33:11] <MasterDuke> don't think so
[22:36:47] *** Quits: abraxxa (~ahartmai@tsa-tc-flod-1.t-systems.at) (Remote host closed the connection)
[22:46:44] *** Joins: abraxxa-home (~alex@2a01:100:2000:2500::22)
[22:47:09] *** Quits: casaca (~casaca@user/casaca) (Ping timeout: 256 seconds)
[22:52:23] *** Joins: casaca (~casaca@user/casaca)
[23:18:31] *** Joins: AntonOks (~AntonOks@95.157.3.181)
[23:20:54] *** Quits: AntonOks (~AntonOks@95.157.3.181) (Client Quit)
[23:28:27] <[Coke]> I don't think we have anyone on the project who is windows-first, glad everything seems to stay functioning there so I can use it for work.
[23:35:57] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[23:44:46] <tonyo> isn't ugexe a windows user?
[23:49:00] *** Joins: whatnext (~whatnext@static.120.96.63.178.clients.your-server.de)
[23:51:28] *** Quits: whatnext (~whatnext@static.120.96.63.178.clients.your-server.de) (Client Quit)
[23:53:32] *** Quits: ufobat (~martin@dynamic-077-007-108-252.77.7.pool.telefonica.de) (Ping timeout: 240 seconds)
[23:57:22] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
