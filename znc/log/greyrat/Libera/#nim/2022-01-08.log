[00:04:08] <FromDiscord> <Isofruit> Man, I'm doing easy meta programming and my head still hurts
[00:04:27] <FromDiscord> <Isofruit> I can only imagine the brain-cramps you can give yourself if you actually dive deep into the topic
[00:05:39] <FromDiscord> <leorize> my advise for you would be less spontaneous mutations and more general rewrites
[00:07:11] <FromDiscord> <leorize> the AST structure punishes spontaneous mutation by trapping you in a maze of complexity
[00:07:47] <FromDiscord> <Isofruit> I'm not even dealing with macros, just pragmas whose values I want to access at compile time
[00:07:57] <FromDiscord> <Isofruit> But some of these pragmas are associated with types in Options
[00:07:59] <FromDiscord> <Isofruit> and gnaaaaaa
[00:08:18] <FromDiscord> <leorize> using macros might be better lol
[00:08:48] <FromDiscord> <leorize> the API for non-macro stuff is just sad in my experience
[00:09:14] <FromDiscord> <Isofruit> Before I give myself that type of migraine, mind taking a look at a code-sample and tell me if that's really better done with macros?
[00:09:27] <FromDiscord> <leorize> sure
[00:09:33] <FromDiscord> <Isofruit> You familiar with norm?
[00:10:04] <FromDiscord> <leorize> I'm somewhat familiar
[00:11:21] <FromDiscord> <Isofruit> That already works, because that mean's you're likely familiar that it has the concept of `Model` a `{.tableName.}` pragma and that you can grab a Model's SQL table via the `table()` function
[00:15:58] <FromDiscord> <Isofruit> sent a code paste, see https://play.nim-lang.org/#ix=3Lqb
[00:17:24] <FromDiscord> <Isofruit> Lets call that proc `getRelatedFieldName`‚ÜµIf I go `getRelatedFieldName(B, A)` I want that to output `myA`.‚ÜµMort importantly, I want `getRelatedFieldName(B, Surprise)` to ALSO output `myA`.
[00:18:14] <FromDiscord> <leorize> definitely macros for this
[00:18:29] <FromDiscord> <SirOlaf> Look what you made me do https://media.discordapp.net/attachments/371759389889003532/929114288445083658/Capture.PNG
[00:18:42] <FromDiscord> <Isofruit> I claim innocence
[00:18:50] <FromDiscord> <leorize> but fair warning\: typed macros are the stairways to madness
[00:18:55] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e)
[00:19:02] <FromDiscord> <Isofruit> It's just
[00:19:02] <FromDiscord> <Isofruit> Gnaaa
[00:19:19] <FromDiscord> <SirOlaf> All I needed was someone that knows how generics work
[00:19:51] <FromDiscord> <Isofruit> I have multiple models to the same SQL Tables for simplicity reasons.‚ÜµAnd I just want to get the foreign key field name somewhat dynamically >_>
[00:20:23] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3Lqd
[00:20:29] <FromDiscord> <Isofruit> Oh well, I guess looking into macros or madness
[00:20:48] <FromDiscord> <SirOlaf> I am now in need of an algorithm that pulls out child nodes into branches that are distinct generic types
[00:21:38] <FromDiscord> <Isofruit> What should the code you just posted express Patitotective?
[00:22:54] <FromDiscord> <Patitotective> `PrefsNodeObj` is an object that can have multiple types because I want to create a custom table that supports different value types
[00:23:03] <FromDiscord> <Patitotective> and I want it to be able to store enums
[00:23:37] <FromDiscord> <Patitotective> `PrefsNodeKind` represents the type `PrefsNodeObj` can have
[00:23:56] <FromDiscord> <Patitotective> (edit) "type" => "types"
[00:24:17] <FromDiscord> <Isofruit> You want to define enums at runtime then? Or at compile time?
[00:24:51] <FromDiscord> <leorize> you should try my union\: https://github.com/alaviss/union‚Üµ(@Patitotective)
[00:26:20] <FromDiscord> <Patitotective> In reply to @leorize "you should try my": oh, so i can delete all my code and just make `OrderedTable[string, union(int, string, etc)]`?
[00:27:03] <FromDiscord> <Isofruit> It keeps being true: The best code is the code you don't write yourself. Until it isn't
[00:27:27] <FromDiscord> <Patitotective> In reply to @Isofruit "It keeps being true:": dont say that ;-;
[00:28:11] <FromDiscord> <Isofruit> If I could already have a library that did this generic stuff for me and not have to write it myself?
[00:28:22] <FromDiscord> <Isofruit> I would delete the hundreds of lines of code I already have in a heartbeat!
[00:28:44] <FromDiscord> <leorize> pretty much‚Üµ(@Patitotective)
[00:29:01] <FromDiscord> <leorize> I have like one user atm so I always welcome more \:p
[00:29:49] <FromDiscord> <Patitotective> In reply to @leorize "I have like one": i'll be glad to use someone else's code lmao‚Üµnice package üôÉ
[00:29:51] <FromDiscord> <Patitotective> (edit) "üôÉ" => "üëç"
[00:34:51] <FromDiscord> <Isofruit> Okay, macros seem intimidating
[00:34:59] <FromDiscord> <Isofruit> I'll give generic typing one more try
[00:35:11] <FromDiscord> <leorize> while you try that I'll write you a quick macro
[00:35:31] <FromDiscord> <Isofruit> `when`, come to my aid!
[00:37:17] *** Joins: dithpri (~dithpri@gateway/tor-sasl/dithpri)
[00:37:26] <FromDiscord> <Patitotective> In reply to @leorize "while you try that": seems like _union_ is not published in nimbe (?) should i install from the github repo?
[00:37:31] <FromDiscord> <Patitotective> (edit) "nimbe" => "nimble"
[00:38:16] <FromDiscord> <leorize> yea you should
[00:41:39] <FromDiscord> <Isofruit> I think I can solve this... If I manage to access the type `A`in a `none(A)` case so I can call `A.table()`
[00:42:02] *** Parts: fvs (freevryhei@2600:3c00::f03c:92ff:fe55:ff21) (WeeChat 3.4)
[00:42:03] <FromDiscord> <Isofruit> (edit) "so" => "of `Option[A]`so"
[00:43:13] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Ping timeout: 256 seconds)
[00:43:14] <FromDiscord> <Isofruit> I can already check whether `Option[Whatever]` contains a Model or not, I'm just struggling with accessing the typedesc
[00:43:51] <FromDiscord> <Isofruit> (edit) "I can already check whether ... `Option[Whatever]`the" 03added "in" | "contains a Model" => "the `Whatever` inherits from `Model`"
[00:44:28] <FromDiscord> <SirOlaf> The compiler can now translate `var Table[system.string, DefaultTable[system.string, system.string]]` into `var Table[system.string, Table[system.string, system.string]]` and yet my fix does not work
[00:44:54] <FromDiscord> <SirOlaf> Has Beef resurrected yet
[00:45:34] <FromDiscord> <Isofruit> Is beef the messiah?
[00:46:15] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[00:46:30] <FromDiscord> <SirOlaf> Am hoping this gives him some new ideas, because I'm about to run out of them
[00:47:50] <FromDiscord> <leorize> wdym trouble with accessing the typedesc?‚Üµ(@Isofruit)
[00:50:09] <FromDiscord> <Isofruit> Remember the earlier types.‚Üµ`B.table()` works. If I can access the type B itself (which I assume is called `typedesc` since you do `proc(a: typedesc[T])` when you want to tell a proc the parameter will be the type and not an instance of it), I'm done
[00:50:50] <FromDiscord> <leorize> you mean you wanna access `Whatever` in `Option[Whatever]`?
[00:51:03] <FromDiscord> <Isofruit> Yeah, specifically `Whatever` and not an instance of it
[00:51:15] <FromDiscord> <Isofruit> because the instance can be none
[00:51:17] <FromDiscord> <Isofruit> and none murders me
[00:51:23] <FromDiscord> <leorize> typetraits has the answers what you need
[00:52:59] <FromDiscord> <Isofruit> sent a code paste, see https://play.nim-lang.org/#ix=3Lqp
[00:53:04] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Quit: ZNC - http://znc.in)
[00:53:04] <FromDiscord> <Isofruit> Oh, typetraits
[00:53:11] <FromDiscord> <Isofruit> Hmmmm
[00:53:55] <FromDiscord> <reilly> Looking at the example given for methods in the manual (https://nim-lang.org/docs/manual.html#methods), I don't really see what makes this functionally any different from regular old procs.
[00:55:07] *** Joins: Lord_Nightmare (~Lord_Nigh@user/lord-nightmare/x-3657113)
[00:56:22] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3Lqr
[00:57:13] <FromDiscord> <Patitotective> (edit) "https://play.nim-lang.org/#ix=3Lqr" => "https://play.nim-lang.org/#ix=3Lqs"
[00:58:59] <FromDiscord> <Patitotective (Patitotective)> sent a long message, see http://ix.io/3Lqu
[01:01:00] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[01:01:00] <FromDiscord> <leorize> sent a code paste, see https://paste.rs/NNv
[01:01:03] <FromDiscord> <Patitotective (Patitotective)> sent a code paste, see https://play.nim-lang.org/#ix=3Lqw
[01:02:46] <FromDiscord> <leorize> sent a code paste, see https://play.nim-lang.org/#ix=3Lqx
[01:03:05] <FromDiscord> <leorize> note that `Content` is merely an alias, any other `union(string | int | bool)` is the same as `Content`
[01:04:22] <FromDiscord> <leorize> the best way to see it is to change all `method` -\@reilly)
[01:04:37] <FromDiscord> <ajusa> oh hey union I love that library, used it a few projects of mine
[01:04:47] <FromDiscord> <Isofruit> Found the one user
[01:05:10] <FromDiscord> <leorize> I guess I have more than one users lol
[01:05:21] <FromDiscord> <Isofruit> Now you have
[01:05:23] <FromDiscord> <Isofruit> TWO users
[01:06:21] <FromDiscord> <ajusa> before union: `TypeKind = enum tkString, tkInt, tkFloat`‚Üµafter union:   `VNType = union(int | float | string)`‚ÜµI just wish it had more docs, and some integration with the pattern matching that hax built
[01:07:25] <FromDiscord> <Isofruit> I've read through typetraits now, I can't seem to find anything related to accessing nested types within objects‚ÜµWere you trying to point me towards "stripGenericParams" leorize?
[01:07:47] <FromDiscord> <haxscramper> There is a bug with generics that prevented from using union with pattern matching to the full extent, but in the end it does not require any special interactions
[01:08:24] <FromDiscord> <haxscramper> In reply to @haxscramper "anyway, if remove generics": This one
[01:08:54] <FromDiscord> <leorize> https://nim-lang.github.io/Nim/typetraits#genericParams.t%2Ctypedesc‚Üµ(@Isofruit)
[01:09:27] <FromDiscord> <Isofruit> squints‚ÜµHmmmm I assume that's banking on that Option is an enum
[01:10:29] <FromDiscord> <Isofruit> Ohhhhhh
[01:10:47] <FromDiscord> <Isofruit> When I played around with it I was an idiot and gave it an instance, not a type
[01:17:36] <FromDiscord> <Isofruit> sent a code paste, see https://play.nim-lang.org/#ix=3LqF
[01:17:58] <FromDiscord> <Solitude> .get
[01:18:04] <FromDiscord> <Solitude> .get(0)
[01:28:14] <FromDiscord> <Isofruit> SON OF A HORSESHOE IT WORKS
[01:29:14] <FromDiscord> <leorize> do let me know what docs would you like to see, I'll write some more when I have time‚Üµ(@ajusa)
[01:29:23] <FromDiscord> <Isofruit> sent a code paste, see https://play.nim-lang.org/#ix=3LqI
[01:29:32] <FromDiscord> <Isofruit> If anyone wanted to see the monstrosity I built
[01:30:28] <FromDiscord> <leorize> it's shorter than my macro, so there is that
[01:30:29] <FromDiscord> <haxscramper> I haven't checked it since then
[01:31:05] <FromDiscord> <Isofruit> Macros are one of those things I'm currently still too afraid to touch
[01:31:08] <FromDiscord> <Isofruit> Which is likely silly
[01:31:22] <FromDiscord> <leorize> you should not touch them now
[01:31:29] <FromDiscord> <Isofruit> But I'm already having my hands full comprehending my problems through the lenses of generics and templates
[01:31:33] <FromDiscord> <leorize> like you need a couple library to sanely program them
[01:32:15] <FromDiscord> <Isofruit> I assumed as much. I like templates though
[01:32:37] <FromDiscord> <Isofruit> They are fairly comprehensible, expand code into position X
[01:33:15] <FromDiscord> <Isofruit> Used one to save myself the hassle of doing the same try-except-sendHTTP400Response block over and over again where only the try block chances
[01:33:16] <FromDiscord> <leorize> templates are nice
[01:33:22] <FromDiscord> <Isofruit> (edit) "chances" => "changes"
[01:33:36] <FromDiscord> <leorize> use it in moderation to avoid code bloat, though
[01:34:09] <FromDiscord> <Isofruit> Yeh, I only intend to use the one, I see no usecase for others since I can typically do generics
[01:34:51] <FromDiscord> <Isofruit> My order of attempts pretty much goes:‚Üµnormal procs > generics > templates > macros (neeeeveeeeeer)
[01:35:00] <FromDiscord> <SirOlaf> Something you can't do is borrow generic function from generic types
[01:35:04] <FromDiscord> <SirOlaf> (edit) "function" => "functions"
[01:35:24] <FromDiscord> <leorize> I usually have to use a template in that case‚Üµ(@SirOlaf)
[01:35:37] <FromDiscord> <Isofruit> This sounds like the kind of idea I would only want to have after either copious amounts of coding to the point my brain is in delirium or alcohol
[01:36:02] <FromDiscord> <leorize> you should put macro in a separate branch of the tree lol
[01:36:37] <FromDiscord> <leorize> that stuff is not only more powerful, it doesn't have interop with non-macros
[01:37:03] <FromDiscord> <SirOlaf> In reply to @leorize "I usually have to": I have it fixed as long as the generics aren't nested, which is why I have been looking for assistance
[01:37:14] <FromDiscord> <Isofruit> I read templates are like the nice version of macros, limited but comprehensible.‚ÜµAre macros just massive code generators?
[01:37:50] <FromDiscord> <leorize> macros are code transformers
[01:38:03] <FromDiscord> <Isofruit> So a language over the language
[01:38:15] <FromDiscord> <leorize> sorta
[01:38:37] <FromDiscord> <leorize> I believe [Elegantbeef](https://matrix.to/#/@elegantbeef:matrix.org) got a fix or smt‚Üµ(@SirOlaf)
[01:38:54] <FromDiscord> <SirOlaf> He was helping me yesterday
[01:39:20] <FromDiscord> <SirOlaf> And we actually kinda did get it to work with flat generics, just didn't realize
[01:39:54] <FromDiscord> <leorize> \\o/ that's cool
[01:40:08] <FromDiscord> <SirOlaf> Issue is that nesting completely kills it
[01:40:29] <FromDiscord> <SirOlaf> And I have run out of ideas after converting the distinct type into base didn't work
[01:47:26] <FromDiscord> <Isofruit> If there is one thing I'm wonky on about generics with when statements is: You don't know if you built them wrong until you ensured every path of the when-controlflow has been traversed and not caused the compiler to die
[01:48:20] <FromDiscord> <Isofruit> Just found two bugs in the earlier generic thingy that I did not notice because my code example didn't use my generic function in a way that caused these "when" bits that were badly coded to ever be used
[01:48:43] <FromDiscord> <Isofruit> (edit) "Just found two bugs in the earlier generic thingy that I did not notice because my code example didn't use my generic function in a way that caused these "when" bits that were badly coded to ever be used ... " 03added "(I fixed it in the code sample I posted earlier, but dang)"
[01:51:49] <FromDiscord> <Elegantbeef> Concepts üòõ‚Üµ(@Isofruit)
[01:52:04] <FromDiscord> <SirOlaf> The man is back
[01:52:08] <FromDiscord> <Elegantbeef> Isnt the nesting issue just cause of `val: B`‚Üµ(@SirOlaf)
[01:52:16] <FromDiscord> <SirOlaf> I have created a new error
[01:53:12] <FromDiscord> <SirOlaf> sent a code paste, see https://play.nim-lang.org/#ix=3LqQ
[01:53:28] <FromDiscord> <SirOlaf> Which is strange, because the type is obviously completely different
[01:54:15] <FromDiscord> <SirOlaf> Basically semOverloadedCall (or rather semOverloadedCall) produces nonsense
[01:54:24] <FromDiscord> <SirOlaf> (edit) "semOverloadedCall)" => "semResolvedCall)"
[01:54:39] <FromDiscord> <Isofruit> In reply to @Elegantbeef "Concepts üòõ (<@180601887916163073>)": Sorry, generics + work noodled my brain through, I know you want to express sth. related to when we last chatted with that, but my brain is just not parsing it atm.
[01:54:46] <FromDiscord> <Elegantbeef> What's your searchforborrowproc look like now?
[01:54:48] <FromDiscord> <Elegantbeef> Also how did you reason what to skip and what not to?
[01:55:26] <FromDiscord> <SirOlaf> sent a code paste, see https://play.nim-lang.org/#ix=3LqR
[01:55:43] <FromDiscord> <SirOlaf> Actually quite simple and elegant, but should check more node types
[01:55:47] <FromDiscord> <Elegantbeef> I'm saying using concepts will ensure the stuff works at compile time instead of at instantiation
[01:56:03] <FromDiscord> <Elegantbeef> We dont want to base layered generics afaik
[01:56:31] <FromDiscord> <Isofruit> concepts as in "think this through beforehand and have a concept of it in your head already before you start"?
[01:56:33] <FromDiscord> <Elegantbeef> with what we had yesterday was the issue not just `val: B` was dropped to `Table[string, seq[string]]`?
[01:56:36] <FromDiscord> <SirOlaf> In reply to @Elegantbeef "We dont want to": Well yeah, probably not seeing how my thing doesn't work at all
[01:56:39] <FromDiscord> <Elegantbeef> No the Nim concepts system
[01:56:47] <FromDiscord> <SirOlaf> (edit) "not" => "not,"
[01:56:54] <FromDiscord> <Isofruit> https://tenor.com/view/umm-confused-blinking-okay-white-guy-blinking-gif-7513882
[01:57:13] <FromDiscord> <Isofruit> I shall google that one
[01:57:28] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3LqS
[01:57:37] <FromDiscord> <Isofruit> I have not ever seen that
[01:57:49] <FromDiscord> <Elegantbeef> It user defined duck typing basically
[01:57:50] <FromDiscord> <Isofruit> Not even seen a single line of code with a "concept" thingy in it
[01:58:01] <FromDiscord> <Elegantbeef> Kinda like TS interfaces
[01:58:25] <FromDiscord> <SirOlaf> sent a code paste, see https://play.nim-lang.org/#ix=3LqT
[01:58:42] <FromDiscord> <Isofruit> Wait! I do TS! ... could this have made my thingy easier?‚ÜµI'll need to have a read on that, recover brainmass and then see
[01:58:49] <FromDiscord> <SirOlaf> My thought process when making the basify function was that B is Table but it gets DefaultTable
[01:59:13] <FromDiscord> <Elegantbeef> Concepts are compile time interfaces, you define a Concept and use it as a type class to limit what types can be used
[01:59:31] <FromDiscord> <Elegantbeef> No the issue is the otherway around
[01:59:40] <FromDiscord> <Elegantbeef> B is `DefaultTable` but it gets `Table`
[02:00:04] <FromDiscord> <Elegantbeef> I think we should only skip generics if they dont have `tfFromGeneric` in the type flags
[02:00:12] <FromDiscord> <Elegantbeef> Though that might be wrong
[02:00:19] <FromDiscord> <Elegantbeef> Sorry "only skip types"\
[02:01:24] <FromDiscord> <SirOlaf> Can we verify what B is
[02:02:11] <FromDiscord> <SirOlaf> In reply to @Elegantbeef "I think we should": And in what step would this be done
[02:02:12] <FromDiscord> <Elegantbeef> B in our case is going to be what ever type `val` gets so it should be the B parameter of DefaultTable which in this case is `DefaultTable[string, string]`
[02:02:33] <FromDiscord> <Elegantbeef> When making the call in search for borrow i think
[02:02:34] <FromDiscord> <Elegantbeef> I could be wrong
[02:03:14] <FromDiscord> <Isofruit> > Now I know why I don't know of Concepts!
[02:03:25] <FromDiscord> <Isofruit> I have never even looked at experimental features
[02:03:41] <FromDiscord> <Isofruit> https://nim-lang.org/docs/manual_experimental.html#concepts‚ÜµGood to know there's docs on it though
[02:05:29] <FromDiscord> <Isofruit> Ohhh and that way I could've narrowed down the generic type I use in `getRelatedFieldName` to types that have these characteristics that I need
[02:06:21] <FromDiscord> <Elegantbeef> Well concepts dont need a flag and i've used them a fair bit
[02:06:22] <FromDiscord> <Elegantbeef> The syntax might be a bit confusing, but otherwise they're nice
[02:07:12] <FromDiscord> <Elegantbeef> Yep if you're doing something where you want duck typing but it to be more concrete this is how you get it.
[02:07:16] <FromDiscord> <Isofruit> Which... I don't think would've spared me from writing that logic out in the first place on how to extract a given tablename from either a norm-model-type directly, an fk-pragma or an Option[norm-model-type]... I think I'd have still needed to write that out
[02:07:52] <FromDiscord> <Isofruit> (edit) "Which... I don't think would've spared me from writing that logic out in the first place on how to extract a given tablename from either a norm-model-type directly, an fk-pragma ... or" 03added "on a field of a norm-model-type"
[02:08:21] <FromDiscord> <Isofruit> Would (and still can) narrow down the interface nicely though
[02:08:56] <FromDiscord> <Isofruit> (edit) "interface nicely" => "types you can throw into that function"
[02:09:07] <FromDiscord> <Isofruit> (edit) "Would (and still can) narrow down the types you can throw into that function ... though" 03added "nicely"
[02:09:34] <FromDiscord> <SirOlaf> sent a code paste, see https://paste.rs/4SW
[02:09:44] <FromDiscord> <Elegantbeef> No
[02:09:49] <FromDiscord> <Elegantbeef> I mean inside searchForBorrowProc
[02:09:59] <FromDiscord> <Elegantbeef> Skip over the parameters that come from generic
[02:10:17] <FromDiscord> <Elegantbeef> Since when borrowing anything that's from generic is not going to be the distinct we want
[02:11:02] <FromDiscord> <SirOlaf> Why would basically removing parameters help
[02:11:09] <FromDiscord> <Elegantbeef> We arent removing
[02:11:15] <FromDiscord> <Elegantbeef> We're not skipping over generics
[02:11:51] <FromDiscord> <Elegantbeef> in the example we have `var DefaultTable[string, DefaultTable[...]], key: string, val: DefaultTable[...]`
[02:12:16] <FromDiscord> <Elegantbeef> we're presently making it `Table[string , DefaultTable[...]], key: string, val: Table[...]`
[02:12:27] <FromDiscord> <Elegantbeef> The B of the first does not match the B of the proc, so there is a mismatch
[02:12:38] <FromDiscord> <Elegantbeef> It expects B to be a `DefaultTable`, but got `Table`
[02:12:47] <FromDiscord> <Elegantbeef> `<Table[system.string, DefaultTable[system.string, system.string]], string, Table[system.string, system.string]>`
[02:12:54] <FromDiscord> <Elegantbeef> Look at that error message
[02:13:17] <FromDiscord> <Elegantbeef> The proc def is `proc mgetOrPut[A, B](t: var Table[A, B]; key: A; val: B): var B`
[02:13:35] <FromDiscord> <Elegantbeef> The B in `Table[A, B]` does not match the B of  `val: B`
[02:13:40] <FromDiscord> <SirOlaf> I see that, but whatever you mean by skip does not make sense to me
[02:14:00] <FromDiscord> <Elegantbeef> do not get the distinct base of any thing that comes from generic, just put the type you have there
[02:14:13] <FromDiscord> <Elegantbeef> So instead of writing `Table` in `val` we write `DefaultTable`
[02:15:04] <FromDiscord> <SirOlaf> Do you want the desiredTypes to be changed or something? There is nothing else being used for skipping, is there
[02:15:06] <FromDiscord> <Elegantbeef> The idea being i dont think it makes any sense to implement a generic proc where you want to get the base over any parameter that comes from generic
[02:15:20] <FromDiscord> <Elegantbeef> Inside search for borrow
[02:15:26] <FromDiscord> <Elegantbeef> Presently we do `t.getDistinctBase` or whatever it's called
[02:15:29] <FromDiscord> <Elegantbeef> On all parameters
[02:15:45] <FromDiscord> <Elegantbeef> We should only do it on parameters that arent from generic afaict
[02:16:08] <FromDiscord> <Elegantbeef> I cant give you a line number but it's in the for loop of search for borrow
[02:17:11] <FromDiscord> <SirOlaf> Can't hurt to try I guess
[02:18:19] <FromDiscord> <Isofruit> Leorize, you still reading?
[02:18:46] <FromDiscord> <Elegantbeef> We're on matrix saying our name pings us
[02:19:42] <FromDiscord> <Elegantbeef> Leroize they cant see reactions across the bridge
[02:19:56] <FromDiscord> <leorize> oh yea
[02:20:04] <FromDiscord> <leorize> o/ @Isofruit
[02:20:38] <FromDiscord> <Isofruit> I'm about to make an SO question + answer it myself (regarding the entire "access type within an option generically") so I can have an easier time googling that kind of problem in the future.‚ÜµJust wanted to ask whether you wanted a shoutout in the answer and to whom I should do that
[02:20:44] <FromDiscord> <SirOlaf> In reply to @SirOlaf "Can't hurt to try": What does hurt is that I am still not quite sure what the plan is. x gets set to t.baseOfDistinct, so stopping that makes x a bit questionable
[02:21:05] <FromDiscord> <Elegantbeef> This is what i have right now
[02:21:08] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3LqY
[02:21:08] <FromDiscord> <Isofruit> Since you significantly helped me in that regard
[02:21:12] <FromDiscord> <SirOlaf> In reply to @Elegantbeef "This is what i": And does it work
[02:21:19] <FromDiscord> <leorize> I don't have an SO account unfortunately‚Üµ(@Isofruit)
[02:21:19] <FromDiscord> <Isofruit> ~~Aka pushed me face first towards the solution~~
[02:21:20] <FromDiscord> <Elegantbeef> It does not
[02:21:39] <FromDiscord> <Elegantbeef> It still fails sem overload, but this is the correct thing to do afaict
[02:22:29] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3LqZ
[02:22:30] <FromDiscord> <Elegantbeef> Which is what we want
[02:23:00] <FromDiscord> <Elegantbeef> We now just have the issue that semoverloadedcall doesnt like the types
[02:23:43] <FromDiscord> <Isofruit> In reply to @leorize "I don't have an": Discord name mention in the SO answer it is üòõ
[02:23:46] <FromDiscord> <SirOlaf> It has never liked the types
[02:24:09] <FromDiscord> <Elegantbeef> We finally have the right types though
[02:24:36] <FromDiscord> <Elegantbeef> So now we only have to question "why does sem overload not like us"
[02:26:06] <FromDiscord> <SirOlaf> Culprit is still semResolvedCall
[02:26:30] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Lr1
[02:27:08] <FromDiscord> <SirOlaf> resolveOverloads decides on ` proc (t: var Table[mgetOrPut.A, mgetOrPut.B], key: A, val: B): var B` which should be right
[02:27:13] <FromDiscord> <SirOlaf> (edit) "` proc" => "`proc"
[02:28:36] <FromDiscord> <SirOlaf> Or maybe I'm in the wrong section, but something does decide on that signature
[02:29:15] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3Lr2
[02:31:33] <FromDiscord> <SirOlaf> In reply to @SirOlaf "Or maybe I'm in": I was checking pickBestCandidate, but that just returns good candidates so resolveOverloads does decide on it
[02:31:50] <FromDiscord> <Elegantbeef> Have you tried to start on the macro patito?
[02:32:02] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3Lr5
[02:32:06] <FromDiscord> <Patitotective> In reply to @Elegantbeef "Have you tried to": yes lol
[02:32:31] <FromDiscord> <Patitotective> (edit) "https://play.nim-lang.org/#ix=3Lr5" => "https://play.nim-lang.org/#ix=3Lr6"
[02:32:47] <FromDiscord> <Elegantbeef> content is going to be a `nnkCurly` with `colonExprExpr` as each value
[02:33:27] <FromDiscord> <Patitotective> where is that documented?
[02:33:28] <FromDiscord> <Elegantbeef> So what you'll want to do is iterate over everything in content getting the second element `[1]` and making it `infix(yourExpr[1], "as", ident"PContentTypes")`
[02:33:41] <FromDiscord> <Elegantbeef> do `echo treeRepr content`
[02:33:48] <FromDiscord> <Elegantbeef> It's documented in the AST of Nim
[02:34:04] <FromDiscord> <Elegantbeef> Actually this probably will be a `nnkTableConstr`
[02:34:09] <FromDiscord> <Elegantbeef> Eitherway same thing internally
[02:34:30] <FromDiscord> <Elegantbeef> It'll have a list of `a: b` in AST you want to grab `b` and replace it with `b as PTypeContent`
[02:34:56] <FromDiscord> <Elegantbeef> Then finally you'll do `newCall(bindSym"toOrderedTable", content)`
[02:35:01] <FromDiscord> <Elegantbeef> And that'll do it all for you
[02:35:32] <FromDiscord> <Elegantbeef> `bindSym` is needed if you `import std/tables` in the macro module and want to ensure it calls it regardless where you go if you dont `export tables`
[02:35:33] <FromDiscord> <Patitotective> let me try (btw i wasn't importing `std/macros` lol)
[02:35:35] <FromDiscord> <Patitotective> Thanks
[02:35:37] <FromDiscord> <Patitotective> üôÉ
[02:36:16] <FromDiscord> <leorize> if you'd like to see an auto-union for arrays and KV pairs, please open an issue
[02:36:21] <FromDiscord> <SirOlaf> So, I think this actually does work
[02:36:55] <FromDiscord> <SirOlaf> Comment out the ``result = nil` in the compareTypes branch
[02:36:58] <FromDiscord> <SirOlaf> For testing
[02:37:01] <FromDiscord> <SirOlaf> (edit) "``result" => "`result"
[02:37:50] <FromDiscord> <Patitotective> In reply to @leorize "if you'd like to": i will open a pull request when i solve it hehe
[02:38:49] <FromDiscord> <Elegantbeef> Ah so it perhaps may be my fault
[02:39:56] <FromDiscord> <SirOlaf> Question is why the type check fails even though it can be run
[02:41:37] <FromDiscord> <Elegantbeef> I dont even get what that branch is for
[02:42:05] <FromDiscord> <SirOlaf> Not sure either, but I discovered before that commenting out the result reset makes things work
[02:42:25] <FromDiscord> <SirOlaf> Because resolve does succeed
[02:42:38] <FromDiscord> <SirOlaf> It's probably an extra check in case the candidate is bad
[02:47:36] <FromDiscord> <Patitotective> sent a code paste, see https://paste.rs/21C
[02:48:03] <FromDiscord> <Elegantbeef> I mean you can use return but it's not idiomatic
[02:48:10] <FromDiscord> <Elegantbeef> you need to annotate the macro with `: untyped`
[02:49:08] <FromDiscord> <Patitotective> Yeeey, it worked‚ÜµThanks
[02:49:09] <FromDiscord> <Patitotective> üôÉ
[02:51:45] <FromDiscord> <SirOlaf> So yeah, with this line commented out, the original example from the github issue compiles too
[02:51:57] <FromDiscord> <SirOlaf> In other words, you were 100% right about skipping those types
[02:52:13] <FromDiscord> <SirOlaf> (edit) "So yeah, with this line commented out, the original example from the github issue compiles too ... " 03added "(after adding a []=)"
[02:52:21] <FromDiscord> <Elegantbeef> Dont say that it'll go straight to my head
[02:52:27] <FromDiscord> <Elegantbeef> Why are the types not equal is now the question
[02:52:52] <FromDiscord> <Elegantbeef> Dont add `[]=`
[02:52:58] <FromDiscord> <Elegantbeef> Just do `(nested["key1"]["key2"])` üòÄ
[02:53:07] <FromDiscord> <Elegantbeef> That way you set the var that it returns
[02:53:26] <FromDiscord> <SirOlaf> Imagine choosing the ugly way
[02:54:01] <FromDiscord> <Elegantbeef> Hey it's the entire point of this
[02:54:17] <FromDiscord> <Elegantbeef> Someone didnt realize that `[]=` would need to be defined
[02:54:32] <FromDiscord> <Elegantbeef> Anyway we now need to figure out why compare types fails, the echo'd values were identical
[02:54:35] <FromDiscord> <Elegantbeef> So it's odd
[02:58:07] <FromDiscord> <SirOlaf> This problem never stops giving I guess
[02:59:24] <FromDiscord> <Elegantbeef> Hey you're "adding" a feature
[02:59:30] <FromDiscord> <Elegantbeef> It's complicated
[03:00:02] <FromDiscord> <SirOlaf> Oh no, it's great
[03:00:09] <FromDiscord> <SirOlaf> But it's surprising how deep it goes
[03:01:37] <FromDiscord> <Elegantbeef> Also you'll probably want/need to add that this and the composite type class works in the manual
[03:01:49] <FromDiscord> <Patitotective (Patitotective)> do you mean an issue to nim? lol‚Üµ(@Patitotective)
[03:02:30] <FromDiscord> <SirOlaf> In reply to @Elegantbeef "Also you'll probably want/need": Honestly have no idea what a composite type class is
[03:02:45] <FromDiscord> <SirOlaf> Just keep seeing it in the compiler but ignore it every time
[03:03:35] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Lrh
[03:03:44] <FromDiscord> <Elegantbeef> A composite typeclass is the magic typeclass for all generics of a given type
[03:04:08] <FromDiscord> <SirOlaf> Doesn't that get expanded to A[any]
[03:04:23] <FromDiscord> <Elegantbeef> No it's a composite typeclass
[03:04:27] <FromDiscord> <Elegantbeef> It doesnt expand
[03:04:34] <FromDiscord> <Elegantbeef> It's a `tyCompositeTypeClass` or w/e
[03:05:32] <FromDiscord> <SirOlaf> That works though, and I think I saw it getting expanded internally
[03:06:32] <FromDiscord> <Elegantbeef> Anyway araq said it should be documented and i havent got around to it
[03:06:49] <FromDiscord> <Elegantbeef> So as it's related seems like something you could take the time to do üòõ
[03:07:04] <FromDiscord> <Isofruit> Elegantly delegating beefy documentation
[03:07:08] <FromDiscord> <Isofruit> I see I see
[03:07:16] <FromDiscord> <Isofruit> üòÑ
[03:07:47] *** Joins: cyraxjoe (~joe@189.158.28.101)
[03:07:52] *** Quits: MightyJoe (~joe@201.150.10.60) (Ping timeout: 256 seconds)
[03:07:57] <FromDiscord> <Elegantbeef> Eh i fixed the issue didnt think it needed to be documented
[03:08:02] <FromDiscord> <Elegantbeef> Someone merged it before i could add documentation
[03:08:05] <FromDiscord> <Elegantbeef> It's not my fault!
[03:08:59] <FromDiscord> <Isofruit> Fully fair üòÑ I just saw an opportunity and had to take it
[03:11:52] <FromDiscord> <Isofruit> Alrighty, enough coded for today, solving this damn "get me the related field between two models based on tablenames" issue took like 3h
[03:12:20] <FromDiscord> <Elegantbeef> Code review time?
[03:14:08] <FromDiscord> <Isofruit> Look, I barely managed to code that monstrosity up there, I barely managed to find a single way to write this, I got leorize to see if he couldn't do it via macro rather than try the path of generics.‚ÜµI don't see myself writing a better version of the above until I've gained a lot more experience in the language
[03:14:41] <FromDiscord> <Isofruit> I think my remaining brain cells will just implode
[03:14:51] <FromDiscord> <Elegantbeef> Ok
[03:15:21] <FromDiscord> <Isofruit> unless
[03:15:24] <FromDiscord> <Elegantbeef> Can i atleast see the code?
[03:15:30] <FromDiscord> <Isofruit> I noticed it is an utter pain in the neck to chain when conditions
[03:16:30] <FromDiscord> <Isofruit> sent a code paste, see https://play.nim-lang.org/#ix=3Lrn
[03:17:37] <FromDiscord> <Isofruit> That code tries to find the foreign-key-field of the model that points from Model B to Model A.‚ÜµBut it makes sure to check this based on tablename and not just the model-type
[03:17:40] <FromDiscord> <SirOlaf> sent a code paste, see https://play.nim-lang.org/#ix=3Lro
[03:17:52] <FromDiscord> <Elegantbeef> You can reduce the number of when statements!
[03:18:09] <FromDiscord> <Isofruit> I tried to throw them together with "and" statements, I got compilation issues
[03:18:26] <FromDiscord> <Isofruit> So at some point I just gave up and made one when per expression
[03:20:16] <FromDiscord> <Isofruit> ~~There's only so much you can do before you just submit to the compiler~~
[03:20:59] <FromDiscord> <Elegantbeef> Is it the `var distinct`?‚Üµ(@SirOlaf)
[03:21:25] <FromDiscord> <SirOlaf> Not quite sure yet
[03:21:43] <FromDiscord> <SirOlaf> But possible I guess
[03:22:28] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[03:22:38] <FromDiscord> <SirOlaf> result = sameFlags(a, b)
[03:22:39] <FromDiscord> <SirOlaf> This fails
[03:22:45] <FromDiscord> <SirOlaf> The flags just aren't the same
[03:24:58] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3Lrq
[03:26:46] <FromDiscord> <SirOlaf> One of the two types has the tfVarIsPtr flag
[03:26:51] <FromDiscord> <SirOlaf> Other doesn't
[03:27:03] <FromDiscord> <SirOlaf> What does this flag mean
[03:29:00] <FromDiscord> <Elegantbeef> `# 'var' type is translated like 'ptr' even in C++ mode`
[03:29:25] <FromDiscord> <SirOlaf> Oh, it has documentation
[03:29:34] <FromDiscord> <SirOlaf> Nice
[03:29:44] <FromDiscord> <Elegantbeef> Yea rare Nim compiler comments
[03:30:10] <FromDiscord> <SirOlaf> Next question would be why that flag is there
[03:35:07] <FromDiscord> <Patitotective> In reply to @Patitotective "how did you made": nvm hehe
[03:35:23] <FromDiscord> <SirOlaf> In reply to @SirOlaf "Next question would be": Something inside result has it (searchForBorrowProc)
[03:36:28] <FromDiscord> <Elegantbeef> For generation later
[03:36:30] <FromDiscord> <Elegantbeef> Why that flag matters for type comparison doesnt make sense to me
[03:38:25] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[03:38:56] <FromDiscord> <Elegantbeef> Perhaps it's best to ask inside the internals chat now üòÄ
[03:39:30] <FromDiscord> <SirOlaf> Yeah, but who knows when that tfVarIsPtr was declared essential
[03:39:34] <FromDiscord> <SirOlaf> Could have been a decade ago
[03:41:21] <FromDiscord> <Elegantbeef> Exactly why someone with more knowledge should comment on it
[03:41:47] <FromDiscord> <SirOlaf> It was done 7 years ago according to blame
[03:41:59] <FromDiscord> <SirOlaf> Is the real reason even in memory?
[03:42:12] <FromDiscord> <SirOlaf> But yeah, should ask
[03:45:19] *** Parts: nac (~nac@user/nac) (The Lounge - https://thelounge.chat)
[03:53:37] *** Quits: cyraxjoe (~joe@189.158.28.101) (Ping timeout: 240 seconds)
[03:56:27] *** Joins: cyraxjoe (~joe@2806:109f:13:a48f:aeed:5cff:fe8e:738f)
[04:25:23] *** Quits: krux02_ (~krux02@p200300e81723dd00b48b627b8314596f.dip0.t-ipconnect.de) (Remote host closed the connection)
[04:30:22] <FromDiscord> <Cx> I think I'm gonna suicide
[04:36:27] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[05:09:57] *** Quits: cyraxjoe (~joe@2806:109f:13:a48f:aeed:5cff:fe8e:738f) (Ping timeout: 240 seconds)
[05:10:30] *** Joins: cyraxjoe (~joe@201.150.10.60)
[05:22:35] *** Quits: Figworm (FiggyWitIt@user/figworm) (Ping timeout: 256 seconds)
[05:25:02] *** Joins: Figworm (~inoor@user/figworm)
[05:43:53] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Remote host closed the connection)
[05:59:37] *** Quits: Figworm (~inoor@user/figworm) (Ping timeout: 240 seconds)
[06:00:19] *** Joins: neurocyte09174 (~neurocyte@user/neurocyte)
[06:01:55] *** Quits: perro_ (~perro@072-191-245-069.res.spectrum.com) (Read error: Connection reset by peer)
[06:02:17] *** Quits: neurocyte0917 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[06:02:17] *** neurocyte09174 is now known as neurocyte0917
[06:02:22] *** Joins: Figworm (~inoor@user/figworm)
[06:02:52] *** Quits: Figworm (~inoor@user/figworm) (Client Quit)
[06:29:14] *** Joins: perro (~perro@072-191-245-069.res.spectrum.com)
[06:33:21] <FromDiscord> <Revenant> hi, has anyone noticed problems /regressions in the C FFI in 1.6.2 compared to 1.6.0?
[06:33:36] <FromDiscord> <Elegantbeef> In what way?
[06:33:53] <FromDiscord> <Revenant> one of my projects that wraps a C library that has been working flawlessly for the past few years suddenly throws segfaults with 1.6.2
[06:34:01] <FromDiscord> <Revenant> with 1.6.0 and previous versions, zero issues
[06:34:14] <FromDiscord> <Revenant> happens in Win and Mac as well, and some of my users reported it as well
[06:34:47] <FromDiscord> <Revenant> i can't see anything wrong with the way i'm doing the wrapping, and i tried turning the gc off with `gc:none`, but the issue doesn't go away
[06:34:58] <FromDiscord> <Revenant> so i assume it's not a GC thing but a FFI problem?
[06:36:42] <FromDiscord> <Elegantbeef> I can only suggest trying commits in here https://github.com/nim-lang/Nim/commits/version-1-6
[06:37:53] <FromDiscord> <Shiba> I jusr diacouvered that nim compiles on one core only
[06:39:00] <FromDiscord> <Shiba> (edit) "jusr" => "just"
[06:39:21] <FromDiscord> <Shiba> Biut whatever
[06:39:39] <FromDiscord> <Shiba> (edit) "Biut" => "But"
[06:51:38] <FromDiscord> <ajusa> sent a code paste, see https://play.nim-lang.org/#ix=3Ls7
[06:54:24] <FromDiscord> <leorize> wrong channel? \:p
[06:54:26] <FromDiscord> <Rika> In reply to @Shiba "I just diacouvered that": i do not believe the kind of things the nim compiler does would benefit from multi core compilation
[06:54:44] <FromDiscord> <leorize> there are plenty of things the compiler does that would benefit from MC
[06:55:52] <FromDiscord> <leorize> tokenization, the part where the compiler assign basic meaning to the token, is trivially parallelizable
[06:56:36] <FromDiscord> <leorize> I'd say that sem is also parallelizable, though it is much harder (with the current design)
[06:57:53] <FromDiscord> <Rika> not as of now
[06:57:57] <FromDiscord> <Rika> would be nice to see in 2
[06:58:39] <FromDiscord> <leorize> it depends on whether IC will take off
[07:00:29] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[07:10:31] <nrds> <06Prestige99> I thought 1.6 was planned to have IC
[07:12:28] <FromDiscord> <ajusa> sent a code paste, see https://play.nim-lang.org/#ix=3Lsb
[07:12:39] <FromDiscord> <Rika> Overload it
[07:12:44] <FromDiscord> <Elegantbeef> Make an overload
[07:12:57] <FromDiscord> <Rika> I was first hehe
[07:12:58] <FromDiscord> <ajusa> ah derp I forget the simple stuff, thanks!
[07:13:21] <FromDiscord> <Elegantbeef> Not in matrix!
[07:13:38] <FromDiscord> <Rika> I was where it matters
[07:14:01] <FromDiscord> <that_dude> sent a code paste, see https://play.nim-lang.org/#ix=3Lsc
[07:14:13] <FromDiscord> <that_dude> (edit) "https://play.nim-lang.org/#ix=3Lsc" => "https://play.nim-lang.org/#ix=3Lsd"
[07:14:23] <FromDiscord> <Rika> Remove the last f, you have no return type
[07:14:24] <FromDiscord> <that_dude> mb
[07:14:25] <FromDiscord> <Rika> Okay
[07:14:26] <FromDiscord> <that_dude> (edit) "https://play.nim-lang.org/#ix=3Lsd" => "https://play.nim-lang.org/#ix=3Lse"
[07:14:39] <FromDiscord> <Rika> That‚Äôs not equal in behaviour though
[07:14:41] <FromDiscord> <ajusa> The issue I think I had with that is that it doesn't work on top of a variable assignment
[07:14:41] <FromDiscord> <that_dude> true
[07:14:47] <FromDiscord> <Rika> That also modifies the original value
[07:14:49] <FromDiscord> <that_dude> I'm a little tired lol
[07:15:13] <FromDiscord> <that_dude> Actually I can't think of a way to clean it up
[07:15:21] <FromDiscord> <Rika> There isn‚Äôt afaik
[07:16:17] <FromDiscord> <that_dude> sent a code paste, see https://play.nim-lang.org/#ix=3Lsf
[07:16:21] <FromDiscord> <ajusa> sent a code paste, see https://play.nim-lang.org/#ix=3Lsg
[07:16:57] *** Quits: cyraxjoe (~joe@201.150.10.60) (Ping timeout: 240 seconds)
[07:17:15] <FromDiscord> <ajusa> I get why it is ambiguous, but I'm also not sure what to do here other than just having two different procs
[07:17:23] <FromDiscord> <ajusa> (edit) "different" => "differently named"
[07:17:30] <FromDiscord> <ajusa> (edit) "procs" => "templates"
[07:17:40] <FromDiscord> <Elegantbeef> It's ambiguous cause you have a default
[07:17:55] <FromDiscord> <Rika> Yes but what‚Äôs the solution lol
[07:18:10] <FromDiscord> <Elegantbeef> Remove `[]` from the second one
[07:18:22] <FromDiscord> <that_dude> Can you give varargs a default?
[07:18:23] <FromDiscord> <Rika> Ah true
[07:18:33] <FromDiscord> <Rika> In reply to @that_dude "Can you give varargs": Not that I know of, no
[07:18:51] <FromDiscord> <that_dude> sad
[07:19:07] <FromDiscord> <Elegantbeef> There is no point
[07:19:13] <FromDiscord> <Rika> In reply to @Elegantbeef "Remove `[]` from the": Wait what if you  have a string tuple but no options
[07:19:24] <FromDiscord> <Elegantbeef> Do `openarray[T] = [val]` for a default
[07:19:37] <FromDiscord> <Elegantbeef> Dont follow rika
[07:19:40] <FromDiscord> <ajusa> also removing the default doesn't seem to have helped
[07:19:58] <FromDiscord> <Rika> ah dumb
[07:20:05] <FromDiscord> <Rika> i swapped options and x around
[07:20:21] *** Joins: cyraxjoe (~joe@2806:109f:13:b18d:aeed:5cff:fe8e:738f)
[07:20:26] <FromDiscord> <Rika> what does varargs untyped mean exactly? multiple bodies of code? why do you need suck
[07:20:28] <FromDiscord> <Rika> such\
[07:20:35] <FromDiscord> <ajusa> it's passed directly into karax
[07:20:53] <FromDiscord> <ajusa> which does fancy macro stuff to generate html with those properties
[07:21:52] <FromDiscord> <ajusa> sent a code paste, see https://paste.rs/lV9
[07:21:57] <FromDiscord> <Elegantbeef> untyped varargs means a bunch of things
[07:22:05] <FromDiscord> <Elegantbeef> Well its used for a bunch
[07:22:33] <FromDiscord> <Rika> i knwo
[07:22:35] <FromDiscord> <Rika> but in this case
[07:22:46] <FromDiscord> <Elegantbeef> Removing the defaults from the more elaborate should work afaik
[07:23:24] <FromDiscord> <Rika> In reply to @ajusa "Here's the (intended) usage": also you can use {"US": "United States", ...}  syntax for the options lol
[07:23:58] <FromDiscord> <ajusa> sent a code paste, see https://paste.rs/OeB
[07:24:22] <FromDiscord> <ajusa> In reply to @Rika "also you can use": what syntax is that for? a table?
[07:24:53] <FromDiscord> <Elegantbeef> Just remove all defaults and have 3 templates
[07:24:56] <FromDiscord> <ajusa> (keys can be potentially repeated here without overriding so I stuck to list of tuples)
[07:25:51] <FromDiscord> <Rika> In reply to @ajusa "what syntax is that": no, array of 2-tuples
[07:26:02] <FromDiscord> <ajusa> oh shoot I gotta read docs more then, had no clue that existed
[07:26:56] <FromDiscord> <ajusa> Elegantbeef could you give me the signatures? I can't figure out the third template...‚ÜµAlso even after removing the default from the first select I still get ambiguous error
[07:28:56] <FromDiscord> <ajusa> eh screw it I'll just break it into multiple procs that'll probably be cleaner and make it less likely to run into a Nim bug
[07:29:16] <FromDiscord> <ajusa> Like https://github.com/nim-lang/Nim/issues/14436
[07:33:06] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Lsn
[07:35:50] <FromDiscord> <Elegantbeef> Varargs are funky though
[07:36:33] *** Quits: dithpri (~dithpri@gateway/tor-sasl/dithpri) (Remote host closed the connection)
[07:36:55] *** Joins: dithpri (~dithpri@gateway/tor-sasl/dithpri)
[07:38:13] <FromDiscord> <ajusa> yeah they are
[07:38:28] <FromDiscord> <ajusa> gotcha though, that's a neat pattern
[07:45:11] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[08:04:50] <NimEventer> New thread by Oyster: Bug in strformat?, see https://forum.nim-lang.org/t/8783
[08:17:09] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Remote host closed the connection)
[09:17:09] *** Quits: cyraxjoe (~joe@2806:109f:13:b18d:aeed:5cff:fe8e:738f) (Ping timeout: 268 seconds)
[09:17:26] *** Joins: cyraxjoe (~joe@201.150.10.60)
[09:57:53] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[10:15:26] <nrds> <06Prestige99> How do I compile a static binary?
[10:31:30] <FromDiscord> <Elegantbeef> `--app:staticlib`
[10:31:38] <FromDiscord> <Elegantbeef> Wait "static binary" what's that
[10:31:38] <FromDiscord> <Elegantbeef> The first result that is a tutorial comically is for nim https://scripter.co/nim-deploying-static-binaries/
[10:36:36] *** Quits: dithpri (~dithpri@gateway/tor-sasl/dithpri) (Ping timeout: 276 seconds)
[10:38:15] *** Joins: dithpri (~dithpri@gateway/tor-sasl/dithpri)
[10:52:51] <FromDiscord> <Rika> a binary that only uses static libraries
[11:21:56] <FromDiscord> <Isofruit> Is there a way for me to tell my compile-time proc to throw a better error message if it fails to compile?
[11:23:34] <FromDiscord> <leorize> `{.error.}` is a good one
[11:27:20] <FromDiscord> <Isofruit> Doesn't the error pragma throw a message 100% of the time, even if it does compile?
[11:27:45] <FromDiscord> <Elegantbeef> You put it in the when branch
[11:28:05] <FromDiscord> <Elegantbeef> When branches only are semantically checked when they pass
[11:28:26] <FromDiscord> <Elegantbeef> Assuming this is related to your field issue
[11:28:35] <FromDiscord> <Isofruit> Ohh so I do when branches as guard clauses and if it does not pass the when check the thing in the when branch gets an error pragma
[11:28:59] <FromDiscord> <Isofruit> (edit) "gets" => "has" | "hasan error pragma ... " 03added "and thus throws a message"
[11:29:20] <FromDiscord> <Isofruit> Yeah, I was contemplating on how to give myself in the future meaningful error messages
[11:32:42] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[11:34:30] <FromDiscord> <Isofruit> Oh
[11:34:38] <FromDiscord> <Isofruit> Oh dangit
[11:34:55] <FromDiscord> <Isofruit> I need to have an object type that has a `name` field.
[11:35:20] <FromDiscord> <Isofruit> But I also need to access `A.name` the proc that gives me the type-name as string
[11:36:01] <FromDiscord> <Isofruit> Oh, phew, false alarm, name(A) still does it
[11:41:49] <FromDiscord> <Isofruit> Time for the second round of "get related field names, electric boogaloo, now for many-to-many relationships"
[12:16:19] <FromDiscord> <Isofruit> sent a code paste, see https://play.nim-lang.org/#ix=3Ltl
[12:16:27] <FromDiscord> <Isofruit> (edit) "https://play.nim-lang.org/#ix=3Ltl" => "https://play.nim-lang.org/#ix=3Ltm"
[12:17:48] <FromDiscord> <Isofruit> I already have a way to figure out the field name at compile time, I just need a... wait, if I can figure out the field name at compile time I can also define at compile time to snatch the value and take that
[12:19:11] <FromDiscord> <Elegantbeef> `myASeq.mapit(it.otherModelId`
[12:19:31] <FromDiscord> <Elegantbeef> You can make it more generically solved
[12:20:00] <FromDiscord> <Isofruit> That spares me from defining a second `when` monstrosity
[12:20:16] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/m4g
[12:21:08] <FromDiscord> <Elegantbeef> Guess it might need to be `mapModel[T: Model](mySeq: seq[T], field: untyped)....`
[12:23:05] <FromDiscord> <Elegantbeef> Or does that not work?
[12:24:10] <FromDiscord> <Isofruit> Slow your horses, I'm not that fast, I'm in the middle of implementing üòÑ
[12:24:21] <FromDiscord> <Isofruit> I need to slowly wrap my head around all of this
[12:24:49] <FromDiscord> <Elegantbeef> PS if you dont know `std/sequtils` has `map`
[12:25:22] <FromDiscord> <Isofruit> map I knew of, mapIt I... I think I skimmed over once and then forgot about
[12:35:07] <FromDiscord> <Isofruit> Huh, that works really well, code example incoming
[12:37:11] <FromDiscord> <Isofruit> sent a code paste, see https://play.nim-lang.org/#ix=3LtA
[12:38:35] <FromDiscord> <Elegantbeef> nice
[12:39:52] <FromDiscord> <Isofruit> Is there, for convenience reasons, a way to be able to have `mapModel(myDSeq, "myDA")` work as well?‚ÜµFrom the previous function I get the field name as a string, if I could just use that to get the field name and parse it somehow that it gets recognized as a field instead of a string that would make my life easier
[12:40:09] <FromDiscord> <Isofruit> (edit) "Is there, for convenience reasons, a way to be able to have `mapModel(myDSeq, "myDA")` work as well?‚ÜµFrom the previous function ... I" 03added "yesterday"
[12:40:37] <FromDiscord> <Isofruit> (edit) "field" => "field-identifier"
[12:41:29] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3LtC
[12:44:19] <FromDiscord> <Isofruit> Oh lord, macro world. Here we go
[12:44:35] <FromDiscord> <Isofruit> That one appears to not compile, hmmm
[12:45:17] <FromDiscord> <Elegantbeef> If the compiler could talk i'd think it'd say the issue
[12:45:45] <FromDiscord> <Elegantbeef> Oh replace `seq[untyped` with `untyped`
[12:46:07] <FromDiscord> <Elegantbeef> Someone used untyped oddly which ruined my life
[12:46:27] <FromDiscord> <Isofruit> sent a long message, see http://ix.io/3LtG
[12:46:35] <FromDiscord> <Elegantbeef> Ah right
[12:46:55] <FromDiscord> <Isofruit> sent a code paste, see https://play.nim-lang.org/#ix=3LtH
[12:46:56] <FromDiscord> <stack.> +
[12:46:57] <FromDiscord> <Elegantbeef> `nnkDotExpr.newTree(ident"it", field)`
[12:46:57] <FromDiscord> <Isofruit> just imagine the imports are there, they're further up the scripts
[12:46:59] <FromDiscord> <Isofruit> (edit) "scripts" => "script"
[12:47:14] <FromDiscord> <Elegantbeef> `nnkDotExpr.newTree(ident"it", ident field)` sorry
[12:47:17] <FromDiscord> <Elegantbeef> I'll get it right eventually
[12:47:31] <FromDiscord> <Elegantbeef> Are we incrementing the stack stack?
[12:48:17] <FromDiscord> <Elegantbeef> that code goes in place of `ident field`
[12:48:18] <FromDiscord> <Isofruit> sent a code paste, see https://play.nim-lang.org/#ix=3LtI
[12:48:24] <FromDiscord> <Isofruit> ohh check
[12:48:36] <FromDiscord> <Elegantbeef> `newCall(bindSym"mapIt", mySeq, nnkDotExpr.newTree(ident"it", ident field))`
[12:48:49] <FromDiscord> <Elegantbeef> It's semantically `mapIt(mySeq, it.field)`
[12:49:07] <FromDiscord> <Isofruit> The black magic! It works!
[12:49:24] <FromDiscord> <Elegantbeef> Cmon it's not that dark!
[12:49:35] <FromDiscord> <Isofruit> sent a code paste, see https://play.nim-lang.org/#ix=3LtK
[12:50:24] <FromDiscord> <Isofruit> sent a code paste, see https://play.nim-lang.org/#ix=3LtL
[12:50:57] <FromDiscord> <Isofruit> In reply to @Elegantbeef "Cmon it's not that": It's morning where I am and coding this reduced the daylight!
[12:51:42] <FromDiscord> <Isofruit> Just joking, I'll take a stab at macros and co eventually, just that eventually is still a couple months out
[12:52:00] <FromDiscord> <Elegantbeef> They're quite fun
[12:52:03] <FromDiscord> <Isofruit> ~~maybe longer... most likely longer~~
[12:52:05] <FromDiscord> <Elegantbeef> You play pretend compiler dev
[12:52:32] <FromDiscord> <Isofruit> I am imagining myself as  a baby in the body of an elephant within an antique shop
[12:52:36] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e)
[12:52:44] <FromDiscord> <Elegantbeef> That's... a sentence
[12:53:13] <FromDiscord> <Isofruit> In the scenario of play pretending compiler dev I mean, but man that makes for a great out of context quote+
[12:53:16] <FromDiscord> <Isofruit> (edit) "quote+" => "quote"
[12:54:45] <FromDiscord> <Elegantbeef> Macros are a fantastic answer for many questions though üòÄ
[12:54:55] <FromDiscord> <Elegantbeef> So you'll have a whole new world when you learn them
[12:55:05] <FromDiscord> <Elegantbeef> Though i know some dont overly use them
[13:04:26] <FromDiscord> <SirOlaf> With Araq's answer to the tfVarIsPtr question, it makes sense what went wrong with the generic problem
[13:05:49] <FromDiscord> <Elegantbeef> Do you have a solution?
[13:05:58] <FromDiscord> <Isofruit> sent a long message, see http://ix.io/3LtQ
[13:06:15] <FromDiscord> <Isofruit> (edit) "http://ix.io/3LtQ" => "http://ix.io/3LtS"
[13:07:09] <FromDiscord> <Elegantbeef> `ident`s are not symbols but for the most part sorta
[13:08:18] <FromDiscord> <Isofruit> So for field="la" -->  `nnkDotExpr.newTree(ident"it", ident field)` == `it.la` ?
[13:08:29] <FromDiscord> <Elegantbeef> yep
[13:09:59] <FromDiscord> <Rika> Hello, is this just looking at how the AST works?
[13:10:15] <FromDiscord> <Elegantbeef> Indeed
[13:11:02] <FromDiscord> <Isofruit> I have no idea what this is called, I just wanted to somewhat comprehend the macro ElegantBeef wrote me (thanks for that btw!)
[13:11:30] <FromDiscord> <Elegantbeef> The abstract syntax tree is what  you write when you write code, and it's all the compiler really knows
[13:11:39] <FromDiscord> <Elegantbeef> Macros are ways to programatically make them
[13:11:48] <FromDiscord> <Rika> The AST is the representation of code in terms of data and values
[13:12:00] <FromDiscord> <Elegantbeef> Yea i should say "indirectly write"
[13:12:09] <FromDiscord> <Rika> And a macro is just code that makes those values
[13:12:15] <FromDiscord> <Rika> (Code that makes code)
[13:12:22] <FromDiscord> <Rika> Hence metaprogramming
[13:12:46] <FromDiscord> <Elegantbeef> Macros operate with code at a compiler level pretty much, so you communicate to it with what it noes
[13:12:53] <FromDiscord> <Elegantbeef> knows
[13:12:59] <FromDiscord> <Elegantbeef> Jesus that was a terrible one
[13:13:07] <FromDiscord> <Rika> Nose
[13:13:15] <FromDiscord> <Elegantbeef> no's
[13:18:03] <FromDiscord> <Isofruit> I'll make a stackoverflow question out of this simply because I give myself about 24h to retain this knowledge
[13:18:13] <FromDiscord> <Isofruit> (edit) "I'll make a ... stackoverflow" 03added "self-answered"
[13:18:38] <FromDiscord> <Isofruit> Want a shoutout on it ElegantBeef?
[13:18:49] <FromDiscord> <Isofruit> (edit) "Want a shoutout on it ElegantBeef? ... " 03added "If yes, to a specific account or sth?"
[13:19:05] <FromDiscord> <Elegantbeef> People use stack overflow?
[13:19:42] <FromDiscord> <Isofruit> for nimrod almost nobody does, I like to use it as a sort of wiki for shit I know I solved once but forgot how
[13:20:20] <FromDiscord> <Elegantbeef> Heh you called it nimrod
[13:20:48] <FromDiscord> <Isofruit> it's the only tag available for the language on SO
[13:20:51] <FromDiscord> <Isofruit> Which is painful
[13:21:01] <FromDiscord> <Elegantbeef> It's `nim-lang`
[13:21:28] <FromDiscord> <Isofruit> When tf did that tag jump into existence
[13:21:31] <FromDiscord> <Rika> Lol
[13:21:39] <FromDiscord> <Isofruit> I#ve been looking for a nim tag for ages
[13:21:44] <FromDiscord> <Isofruit> Always only found nimrod
[13:23:31] <NimEventer> New question by Philipp Doerner: Nim - Norm - How to get related fieldnames at compile time, see https://stackoverflow.com/questions/70628212/nim-norm-how-to-get-related-fieldnames-at-compile-time
[13:24:10] <FromDiscord> <Isofruit> ... is that going to happen every time now when I make a question for personal reference?
[13:24:12] <FromDiscord> <Rika> Howdy ho
[13:24:15] <FromDiscord> <Rika> Yes
[13:24:25] <FromDiscord> <Isofruit> ... should I apologize for the spam ahead of time?
[13:24:29] <FromDiscord> <Elegantbeef> It's after all how ... people answer these
[13:24:30] <FromDiscord> <Rika> No need
[13:24:53] <FromDiscord> <Rika> Only apologise if you create horrible incantations of macros
[13:24:57] <FromDiscord> <Elegantbeef> You act like this is an overly active community
[13:25:02] <FromDiscord> <Elegantbeef> there are like 10 active users
[13:25:03] <FromDiscord> <Rika> ‚Ä¶eyes at a certain somebody‚Ä¶
[13:25:11] <FromDiscord> <Elegantbeef> Hey look the other way
[13:25:19] <FromDiscord> <Elegantbeef> They're each wonderful and like a child to me
[13:25:31] <FromDiscord> <Elegantbeef> You havent seen my abuse of closure iterators have oyu
[13:25:39] <FromDiscord> <Rika> Why do you abandon them in record time every time then
[13:25:50] <FromDiscord> <Elegantbeef> I said they're like a child
[13:25:59] <FromDiscord> <Rika> In reply to @Elegantbeef "You havent seen my": That slice library ?
[13:26:09] <FromDiscord> <Isofruit> ElegantBeef creating macros as anime-protagonists with daddy-issues in record time
[13:26:26] <FromDiscord> <Elegantbeef> "slice library" yea, i implemented a `zipiter` which captures the iterators as closures to make it so i can do the stepping
[13:26:34] <FromDiscord> <Elegantbeef> The most atrocious implementation
[13:26:44] <FromDiscord> <Rika> I mean
[13:26:54] <FromDiscord> <Rika> I think I‚Äôve done that before not sure
[13:27:18] <FromDiscord> <Elegantbeef> Not any faster than `zip` but works on N number of iters and is negligably more memory efficient
[13:27:45] <FromDiscord> <Rika> Oh you mean that
[13:27:45] <FromDiscord> <evoalg> For me, if it works, and it's not inefficient then I don't have to know how it works
[13:28:05] <FromDiscord> <Rika> I think I can see how you did it with only your terse description
[13:28:16] <FromDiscord> <Elegantbeef> \It's faster if you need to do `.toSeq` though
[13:28:18] <FromDiscord> <Elegantbeef> I havent used closures much but now that i have a way to capture them easily i might
[13:29:32] <FromDiscord> <Rika> Closures nice
[13:29:35] <FromDiscord> <Elegantbeef> It's just converting inline iterators to closures then iterating over those until any one is empty
[13:30:02] <FromDiscord> <Rika> Yeah I can see
[13:30:10] <FromDiscord> <Elegantbeef> Evo sits in the shadows waiting to compliment slicerator
[13:30:22] <FromDiscord> <Elegantbeef> "It do the thing good i like it"
[13:30:28] <FromDiscord> <evoalg> that's my sole purpose
[13:30:55] <FromDiscord> <Elegantbeef> Change your name to SliceratorFan74
[13:31:29] <FromDiscord> <Elegantbeef> Not that there are 73 other fans just an random dart at your birth year
[13:31:33] <FromDiscord> <evoalg> Slicerator Fan sounds dangerous
[13:31:34] <FromDiscord> <Rika> evoiter
[13:31:58] <FromDiscord> <evoalg> I was born in '68
[13:32:09] <FromDiscord> <Rika> One year off from the funny number
[13:32:11] <FromDiscord> <Rika> That sucks
[13:32:16] <FromDiscord> <Elegantbeef> Hah 67
[13:32:22] <FromDiscord> <evoalg> My bro is funny then
[13:32:37] <FromDiscord> <Elegantbeef> that's a given he's a kiwi
[13:32:40] <FromDiscord> <evoalg> In reply to @Elegantbeef "Hah 67": lol
[13:32:59] <madprops> 19 adds a 1 in gematria. 1 + 9 = 10 = 1 + 0 = 1
[13:33:01] <FromDiscord> <Rika> Didn‚Äôt know your brother was born 67
[13:33:28] <FromDiscord> <Elegantbeef> Any context there madprops?
[13:33:38] <FromDiscord> <Elegantbeef> Am I dumb?
[13:33:41] <madprops> a = 1, b = 2, etc. silly thing
[13:33:45] <FromDiscord> <Elegantbeef> Or did madprops chat in the wrong irc room?
[13:33:52] <madprops> im talking about 1968
[13:34:46] <FromDiscord> <Rika> What does gematria mean
[13:34:50] <FromDiscord> <Elegantbeef> I've never done drugs before, but you're really making me question if i should so i can understand this
[13:35:06] <madprops> it's a thing where you count words by their alphabetical position
[13:35:10] <madprops> abc = 1 + 2 + 3 = 6
[13:35:17] <madprops> also 12 = 1 + 2 = 3
[13:35:34] <FromDiscord> <Rika> So that‚Äôs the word for that huh
[13:35:50] <FromDiscord> <Elegantbeef> Comes from the hebrews apparently
[13:36:14] <FromDiscord> <evoalg> if you watch the movie Pi it has it in that
[13:36:39] <FromDiscord> <Elegantbeef> I'll only watch the Pi2 since that's clearly the better constant
[13:36:45] <FromDiscord> <Rika> Tau
[13:38:09] <FromDiscord> <Elegantbeef> Anywho
[13:38:09] <FromDiscord> <Elegantbeef> Where's all the Nim code
[13:38:55] <FromDiscord> <Rika> Not in your git repos
[13:39:04] <FromDiscord> <Elegantbeef> Damn you got me
[13:39:06] <FromDiscord> <Rika> Get to programming
[13:39:15] <FromDiscord> <Elegantbeef> But bed time
[13:39:26] <FromDiscord> <Rika> Programmers don‚Äôt sleep what the fuck do you mean
[13:39:27] <FromDiscord> <Elegantbeef> Where are all your Nim git repos?!
[13:39:36] <FromDiscord> <Rika> They‚Äôre local
[13:39:56] <FromDiscord> <Rika> (I‚Äôm honest here, most of my repos stay local‚Ä¶)
[13:40:06] <madprops> since github copilot, they could be anywhere now
[13:40:19] <FromDiscord> <Rika> Scary
[13:40:29] <FromDiscord> <Elegantbeef> You win this time
[13:40:55] <FromDiscord> <Elegantbeef> IIRC github copilot doesnt work with Nim
[13:40:56] <nrds> <06Prestige99> Wait, beef sleeps?
[13:40:58] <FromDiscord> <Rika> Cool, how much time do I win then
[13:40:59] <FromDiscord> <Elegantbeef> So checkmate
[13:41:18] <FromDiscord> <Elegantbeef> I've been known to sleep
[13:41:27] <FromDiscord> <Elegantbeef> And i can tell we've got some bridge troubles
[13:41:29] <FromDiscord> <Rika> In incredibly short periods
[13:41:39] <FromDiscord> <Elegantbeef> Nah i'm a long sleeper
[13:41:43] <nrds> <06Prestige99> What bridge troubles
[13:41:52] <FromDiscord> <Elegantbeef> Matrix -\> discord
[13:41:57] <FromDiscord> <Rika> Of course you can, don‚Äôt you remember that time we implanted that BCI in you
[13:42:19] <FromDiscord> <Elegantbeef> Prestige did you get static binaries?
[13:42:35] <nrds> <06Prestige99> nah will try again tomorrow
[13:42:43] <FromDiscord> <Rika> What issues did you get
[13:42:44] <nrds> <06Prestige99> want a static binary for games
[13:43:01] <FromDiscord> <evoalg> In reply to @Elegantbeef "Where's all the Nim": Templates look cool, so could I use them all the time instead of proc's? ... or are they limited?
[13:43:07] <FromDiscord> <Elegantbeef> Do you mean statically linked or static libraries
[13:43:20] <FromDiscord> <Rika> Probably linked
[13:43:32] <FromDiscord> <Rika> In reply to @evoalg "Templates look cool, so": They‚Äôre limited
[13:43:33] <FromDiscord> <Elegantbeef> Templates are callable but they paste code inline so cannot be recursive
[13:43:40] <FromDiscord> <Rika> Use procs as much as possible until you cannot
[13:43:50] <FromDiscord> <Elegantbeef> Templates are not called at runtime, they're expanded at compiel time
[13:43:57] <FromDiscord> <Rika> In reply to @Elegantbeef "Templates are callable but": They can though?
[13:44:51] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Lu3
[13:45:07] <FromDiscord> <Rika> That‚Äôs infinitely recursive, technically a proc would break on that as well
[13:45:23] <FromDiscord> <Rika> Just on runtime
[13:45:54] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Lu4
[13:46:06] <FromDiscord> <Elegantbeef> The point is nested templates will crash if used like procedures
[13:46:09] <FromDiscord> <Rika> Ah I misread
[13:46:14] <FromDiscord> <Elegantbeef> You can do it recursive if it's constrained
[13:46:50] <FromDiscord> <evoalg> ok yea I heard: func's > proc's > template's > macro dark magic ... but if I can use a template that is expanded at compile time then isn't that a good thing? ... ie zero overhead?
[13:47:01] <FromDiscord> <Rika> You can recurse if the ‚Äúlimitation‚Äù can be computed on compile time I guess
[13:47:12] <FromDiscord> <Rika> In reply to @evoalg "ok yea I heard:": No, code size overhead
[13:47:14] <FromDiscord> <Elegantbeef> you can also do `proc() {.inline.}` to get similar to a templatee
[13:47:24] <FromDiscord> <Rika> Might be a downside if you want smaller binaries over faster code
[13:47:39] <FromDiscord> <Elegantbeef> But yes you can use templates where you want code to be 100% inlined
[13:47:46] <FromDiscord> <Elegantbeef> That's actually a very good use of them
[13:48:08] <FromDiscord> <Elegantbeef> In cases you want an abstraction but dont want a chance of proc call indirection you can use templates
[13:48:19] <FromDiscord> <Elegantbeef> Think about a vector library and `.x`  for instance
[13:48:27] <FromDiscord> <Rika> Compile time I guess could be another overhead but I don‚Äôt think it‚Äôs significant
[13:48:44] <FromDiscord> <Rika> In reply to @Elegantbeef "Think about a vector": Twiddling would need a macro though üòâ
[13:48:50] <FromDiscord> <Elegantbeef> Swizzling\
[13:48:57] <FromDiscord> <Rika> I‚Äôm no math person
[13:49:26] <FromDiscord> <evoalg> so if I'm not worried about binary size, there's not good reason to use a proc instead of a template (if I can do it in a template)?
[13:49:36] <NimEventer> New question by Philipp Doerner: Nim - How to map seq[type] to seq[type.field] with a generic fieldname?, see https://stackoverflow.com/questions/70631397/nim-how-to-map-seqtype-to-seqtype-field-with-a-generic-fieldname
[13:49:37] <FromDiscord> <Rika> Eh
[13:49:47] <FromDiscord> <Rika> You might lose optimisations
[13:49:50] <FromDiscord> <Elegantbeef> The cost of a proc call is cheap and only really needed to be avoided in hot paths
[13:49:54] <FromDiscord> <Rika> That the C compiler could prolly do
[13:49:57] <FromDiscord> <Rika> From a proc
[13:50:03] <FromDiscord> <Elegantbeef> It's best to use procedures
[13:50:13] <FromDiscord> <Rika> Unless you know what you‚Äôre truly doing
[13:50:20] <FromDiscord> <evoalg> ok
[13:50:35] <FromDiscord> <Elegantbeef> Templates are either for when you're using them for code substitution or want to certainly avoid performance cost of procs
[13:50:59] <FromDiscord> <Rika> And you know that you‚Äôre not gonna introduce another cost by swapping‚Ä¶
[13:51:10] <FromDiscord> <Rika> (edit) "And ... you" 03added "if"
[13:51:17] <FromDiscord> <Elegantbeef> Like i said you can annotate a procedure with `inline` to do similar to a template
[13:51:23] <FromDiscord> <Rika> Probably better to
[13:51:24] <FromDiscord> <Rika> Too
[13:51:31] <FromDiscord> <Elegantbeef> It's only a compiler suggestion but it'll give a fair bit of performance
[13:51:41] <FromDiscord> <Rika> The compiler probably knows better when it comes to inlining
[13:52:10] <FromDiscord> <Rika> in a naive context
[13:52:13] <FromDiscord> <evoalg> might the compiler in-line even if I don't specify .inline. ?
[13:52:18] <FromDiscord> <Rika> Yes
[13:52:21] <FromDiscord> <Elegantbeef> Yes
[13:52:29] <FromDiscord> <evoalg> Rika wins again
[13:52:33] <FromDiscord> <Rika> No
[13:52:34] <FromDiscord> <Elegantbeef> The compiler is supposed to inline any statement it thinks is beneficial to do so
[13:52:37] <FromDiscord> <Rika> The bridge I assume is slow
[13:52:49] <FromDiscord> <Elegantbeef> Nah you won this time
[13:52:53] <FromDiscord> <Elegantbeef> Fair and square üòÄ
[13:53:05] <FromDiscord> <Rika> Fuck squares can‚Äôt I be a triangle
[13:53:19] <FromDiscord> <Elegantbeef> Worth noting that in `debug` it's not going to inline
[13:53:23] <FromDiscord> <Elegantbeef> Which will reduce compile time down slightly
[13:53:38] <FromDiscord> <Elegantbeef> But with `-d:release` or `-d:danger` it'll be more aggressive
[13:53:45] <FromDiscord> <Rika> Performance is a very tricky thing by the way
[13:53:49] <FromDiscord> <Elegantbeef> Since it flicks switches
[13:54:06] <FromDiscord> <Elegantbeef> We're in the age of "performance is only an issue when it's an issue"
[13:54:22] <FromDiscord> <Elegantbeef> Afterall evo came from python, so why's he worrying?!
[13:54:47] <FromDiscord> <Rika> Lol
[13:54:50] <FromDiscord> <Rika> I mean I did too
[13:54:53] <FromDiscord> <Elegantbeef> Naive Nim is more green than Professional Python
[13:54:53] <FromDiscord> <evoalg> you know how converts are, they're always over-zealous
[13:55:20] <FromDiscord> <Elegantbeef> Cant tell if that's a joke about converters or not
[13:55:35] <FromDiscord> <Rika> Converts expect things from the new place they couldn‚Äôt have ever gotten before
[13:56:12] <FromDiscord> <Elegantbeef> Evo have you profiled any code yet?
[13:56:24] <FromDiscord> <Elegantbeef> It's fun to see what the code is actually sitting in
[13:56:38] <FromDiscord> <evoalg> I haven't really no
[13:57:11] <FromDiscord> <Rika> Honestly don‚Äôt know of any times I‚Äôve been very concerned about my run time other than when using seq utils
[13:57:45] <FromDiscord> <Elegantbeef> Most of when i profile it's for someone else based off an assumption or thing they said
[13:58:26] <FromDiscord> <Elegantbeef> Like that powerpc emulator that popped in here
[13:58:32] <FromDiscord> <Elegantbeef> Profiled it to find like 90% of their program was sitting in a hash function üòÄ
[13:59:19] <FromDiscord> <evoalg> I tried nimprof once ... lots of lines and I didn't really understand it
[13:59:26] <FromDiscord> <evoalg> but I didn't spend a lot of time with it
[13:59:30] <FromDiscord> <Elegantbeef> Yea i dont use nimprof
[13:59:40] <FromDiscord> <Elegantbeef> I use either hottie or callgrind
[13:59:40] <FromDiscord> <Rika> In reply to @evoalg "I tried nimprof once": Nim prof doesn‚Äôt give output that‚Äôs very usable
[13:59:49] <FromDiscord> <Rika> It gives ‚Äúcall counts‚Äù and not ‚Äútime spent‚Äù
[13:59:53] <FromDiscord> <Elegantbeef> You're on mac so i dont know any good profiler to use
[14:00:07] <FromDiscord> <Elegantbeef> Dont think treeform got mac support on hottie
[14:00:10] <FromDiscord> <evoalg> ahh ok ... ahhh yea I can look into it
[14:00:13] <FromDiscord> <Elegantbeef> And dont know if callgrind runs there
[14:00:29] <FromDiscord> <evoalg> hottie ... such a funny name
[14:00:34] <FromDiscord> <Rika> Eh
[14:00:38] <FromDiscord> <Rika> It‚Äôs a name
[14:00:41] <FromDiscord> <Elegantbeef> Finds hot paths
[14:00:50] <FromDiscord> <Rika> Finds hotties in your area
[14:00:58] <FromDiscord> <Elegantbeef> Oh he got mac support it seems
[14:01:01] <FromDiscord> <evoalg> sounds like a dating app
[14:01:11] <FromDiscord> <Rika> In reply to @evoalg "sounds like a dating": It isn‚Äôt???
[14:01:11] <FromDiscord> <Elegantbeef> Wait nvm
[14:03:49] <FromDiscord> <evoalg> "hottie" is difficult to google
[14:04:10] <FromDiscord> <evoalg> my wife might walk in on me at any moment
[14:04:35] <FromDiscord> <Rika> I‚Äôm sure she won‚Äôt mind
[14:05:14] <FromDiscord> <Elegantbeef> If memes are any indication if you were looking for anything like that you'd use bing
[14:05:52] <FromDiscord> <Rika> Is that why DuckDuckGo is so good at finding stuff like that
[14:06:36] <FromDiscord> <Elegantbeef> DDG is good at finding profilers?
[14:07:15] <FromDiscord> <Elegantbeef> But yea evo hottie only supports linux/windows so no luck there
[14:07:26] <FromDiscord> <Elegantbeef> And with that dissapointment i sleep
[14:07:46] <FromDiscord> <evoalg> ok thank you and sleep well
[14:08:11] <FromDiscord> <Rika> Come to the Linux side smh
[14:08:41] <FromDiscord> <evoalg> so Rika you and beef use linux?
[14:09:02] <FromDiscord> <Rika> I do
[14:09:05] <FromDiscord> <Rika> Beef probably does
[14:09:25] <FromDiscord> <Isofruit> ... can you even on windows given antivirus autodeletes your ass away against you will?
[14:09:43] <FromDiscord> <Rika> Lol
[14:09:49] <FromDiscord> <Rika> You can probably disable the fuck out of it
[14:10:02] <FromDiscord> <Rika> Or nuke the shit out of the binaries in rescue mode
[14:10:20] <FromDiscord> <Isofruit> It's windows, I'm never too sure what they allow their users and what they make so obscure it's not worth the hassle figuring out how to do it
[14:10:30] <FromDiscord> <Rika> Why do you think I use Linux lol
[14:11:21] <FromDiscord> <Isofruit> So many reasons
[14:11:23] <FromDiscord> <Isofruit> So many reasons
[14:11:33] <FromDiscord> <Isofruit> I was about to list some of them, then I realized the list was about to get too long to type
[14:11:49] <FromDiscord> <Rika> Pretty much
[14:12:18] <FromDiscord> <Rika> The downsides of Linux don‚Äôt matter too much to me because I can fix them 97.5% of the time so
[14:12:59] <FromDiscord> <Isofruit> With Linux some stuff might feel jank, but I haven't had it feel like it's intentionally getting in my way around doing a specific thing
[14:13:19] <FromDiscord> <Isofruit> With windows, whenever the usecase is slightly off the normal user, you better get your boxing gloves out
[14:13:27] <nrds> <06Prestige99> linux is great for software engineering
[14:13:28] <FromDiscord> <Rika> In reply to @Isofruit "With Linux some stuff": And when it is intentional it‚Äôs not fucking nigh impossible to bypass
[14:13:57] <FromDiscord> <enthus1ast> i fight the os all the time (every os)
[14:14:07] <FromDiscord> <enthus1ast> every os is shit
[14:14:08] <FromDiscord> <Isofruit> Dem's fighting words
[14:14:09] <FromDiscord> <Rika> Of course
[14:14:09] <FromDiscord> <Isofruit> Literally
[14:14:11] <FromDiscord> <Rika> Everyone does
[14:14:16] <FromDiscord> <Rika> It‚Äôs just a matter of how much
[14:15:33] <FromDiscord> <Isofruit> Fun fact sidenote
[14:16:07] <FromDiscord> <Isofruit> The last SO question I made around elegantbeef's solution with macros and templates was the exact 500'th question for the nim-lang tag
[14:16:44] <FromDiscord> <Rika> Congratulations
[14:17:17] <FromDiscord> <evoalg> would be nice if there was a prize
[14:18:47] <FromDiscord> <Rika> Why
[14:19:20] <FromDiscord> <Isofruit> My prize is not having to pay anyone to host stuff for my own wiki
[14:20:03] <FromDiscord> <Isofruit> That has the potential to help others or give me pointers by other people feeling bored and reading the questions
[14:20:13] <FromDiscord> <Isofruit> (edit) "That" => "With the added benefit that it"
[14:20:22] <FromDiscord> <Isofruit> (edit) "bored and" => "bored," | "bored,reading the questions ... " 03added "and commenting"
[14:21:22] <FromDiscord> <enthus1ast> you can always host from home
[14:21:24] <FromDiscord> <Isofruit> But honestly, I don't trust my harddrive and can't organize my way out of a paperbag if it's not a code project
[14:21:34] <FromDiscord> <Isofruit> So a googleable resource is always welcome
[14:22:48] <FromDiscord> <Isofruit> Ah yes, but I am also very lazy, I want to to these questions and then forget I ever wrote them and not have to care about hosting. Same reason my side project isn't self hosted and instead hosted on a potato server from Linode
[14:22:59] <FromDiscord> <Isofruit> (edit) "to" => "do"
[14:23:20] <FromDiscord> <enthus1ast> there also is github.io
[14:23:42] <FromDiscord> <Isofruit> Actually, that one's fair
[14:33:34] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[14:54:00] <NimEventer> New thread by Enthus1ast: Simple event system, see https://forum.nim-lang.org/t/8784
[15:40:17] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[15:40:49] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[16:10:59] <NimEventer> New post on r/nim by richardd08: Nim's while loops 7x slower than Python?, see https://reddit.com/r/nim/comments/ryyz3y/nims_while_loops_7x_slower_than_python/
[16:16:22] <FromDiscord> <Yardanico> Classic
[16:18:05] <FromDiscord> <Patitotective> lol
[16:18:56] <FromDiscord> <Solitude> nim dead and finished, python with types but slow.....
[16:21:10] <FromDiscord> <Yardanico> types slow it down...
[16:22:31] <FromDiscord> <enthus1ast> no no no its slower because it it transpiled
[16:24:53] <FromDiscord> <Isofruit> Man, that good feeling when your nim-prologue webproject was already 3+ times faster than its Django implementation
[16:25:02] <FromDiscord> <Isofruit> And that is before you use -d:release
[16:25:20] <FromDiscord> <enthus1ast> what template engine have you used? \:)
[16:25:39] <FromDiscord> <Isofruit> None, my side project's frontend is with a frontend framework, Angular in this case
[16:25:47] <FromDiscord> <enthus1ast> ah ok
[16:26:01] <FromDiscord> <Isofruit> So nim is pretty much just a REST Api (as is my django backend)
[16:27:17] <FromDiscord> <enthus1ast> i'm asking because i think my nimja template engine can easily beat jinja or django (in terms of speed), but its just a feeling overall
[16:27:20] <FromDiscord> <Isofruit> There's still tons of work to do since I'm building tooling as well (e.g. generic functions to fetch the many-side of a one-to-many relationship in norm, or one of the many-sides in a many-to-many relationship) but this does include the typical login performance drag
[16:28:05] <FromDiscord> <Isofruit> I'm really stocked to be finished with this in a couple months or so
[16:28:10] <FromDiscord> <Isofruit> And then update the backend
[16:28:29] <FromDiscord> <Isofruit> And be like "My pageloads are literally sub 50ms now"... and nobody will notice because they were sub 200 ms already before xD
[16:28:37] <FromDiscord> <Isofruit> (edit) "And be like "My pageloads are literally sub 50ms now"... and nobody will notice because they were sub 200 ms ... already" 03added "most of the time"
[16:29:09] <FromDiscord> <enthus1ast> that means 4 times more users on the same hardware i guess \:)
[16:29:59] <FromDiscord> <Isofruit> Could be, should I ever make it freely accessible. Right now it's a playground for me to do and learn stuff while it also hosts the wiki for my groups dndcampaign
[16:30:12] <FromDiscord> <Isofruit> My userbase is like 8 people
[16:30:31] <FromDiscord> <Isofruit> Maybe more if I ever shell out for more storage space to store all the recorded sessions
[16:32:15] <FromDiscord> <Isofruit> The main reason I locked it all behind a wall is that I allow image upload and I know I don't own 99% of the images on there
[16:42:06] <FromDiscord> <enthus1ast> yeah, imho the fear of legal consequences kill 99.9% of cool toy projects
[16:42:15] <FromDiscord> <enthus1ast> at least to make them publicly available
[16:42:50] <FromDiscord> <enthus1ast> in germany it even starts with a impressum ...
[16:43:08] <FromDiscord> <Isofruit> I'm so happy Impressum shit does not affect me as a very small private side
[16:43:18] <FromDiscord> <Isofruit> (edit) "side" => "site"
[16:43:34] <FromDiscord> <enthus1ast> does it? Know knows \:)
[16:43:41] <FromDiscord> <enthus1ast> who knows
[16:44:42] <FromDiscord> <Isofruit> > Von dieser Regelung ausgeschlossen sind nur Telemedien, die ausschlie√ülich f√ºr private oder famili√§re Zwecke genutzt werden. Wer beispielsweise eine Website betreibt, auf die nur Familienmitglieder und enge Freunde zugreifen k√∂nnen, braucht kein Impressum. Doch Vorsicht: Dies gilt wieder nur, solange der Betreiber auf der Seite keine Werbung schaltet!‚ÜµThis works for me
[16:45:42] <FromDiscord> <enthus1ast> "zugreifen k√∂nnen" (CAN access)
[16:45:58] <FromDiscord> <enthus1ast> so put it behind basic auth ? \:D
[16:46:25] <FromDiscord> <Isofruit> Sort of, yeah you login via Username+PW, in my case the authentication is JWT though
[16:46:47] <FromDiscord> <Isofruit> Writing that middleware was easier than I had anticipated
[16:46:57] <FromDiscord> <enthus1ast> so this means i guess, that you need an impressum when a site is publicy available
[16:47:31] <FromDiscord> <Isofruit> Pretty much, at which point I'd also be a freely available hoster for images I don't own, at which point that's a big NOPE
[17:09:28] <FromDiscord> <baalajimaestro> Hi, I am building a simple script with nim to pull json from a site and convert the html content response into markdown and dump it to a file. I am not sure which library can help me with the conversion part. I did try checking out nim-markdown, but looks like its doing the opposite.
[17:13:03] <FromDiscord> <Isofruit> If you want to go json --> markdown I sadly am not aware of a library.‚ÜµIf you want to go json --> nim object --> markdown I can highly recommend jsony for the conversion step of json --> nim object, though for the step nim object --> markdown I'm out of ideas once more
[17:23:45] <FromDiscord> <baalajimaestro> I want to go from a specific element in json (which is raw html) to md
[17:25:42] <FromDiscord> <Isofruit> So json --> HTML-string --> markdown is what I realistically see here.‚ÜµStep one should be easy enough to do with jsony (or the std json lib), I'm not 100% on HTML to Markdown
[17:28:41] <FromDiscord> <ajusa> In reply to @baalajimaestro "Hi, I am building": I just did html to md for a script, I recommend pandoc (cli tool)
[17:29:46] <FromDiscord> <Isofruit> So json --> HTML string , store as file, have nim call the cli tool to format to markdown?
[17:30:21] <FromDiscord> <Isofruit> (edit) "markdown?" => "markdown, delete now superfluous HTML file?"
[17:33:13] <FromDiscord> <ajusa> Pandoc supports stdin and stdout so I think I used execmdex or something
[17:35:09] <FromDiscord> <Isofruit> On another note, do we have a lib to manage database connection pools?
[17:37:01] <FromDiscord> <ajusa> Gatabase?
[17:38:00] <FromDiscord> <Isofruit> huh, I'll need to have a look on whether that plays nice with norm, which I also use
[17:41:18] <FromDiscord> <xflywind> In reply to @Isofruit "On another note, do": there are, and they only implement basic features
[17:41:21] <FromDiscord> <xflywind> https://github.com/itsumura-h/nim-allographer/tree/master/src/allographer/async
[17:41:31] <FromDiscord> <xflywind> https://github.com/bung87/amysql
[17:41:36] <FromDiscord> <xflywind> https://github.com/cheatfate/asyncpg
[17:41:42] <FromDiscord> <Isofruit> All I need is sth that gives me a DbConn object, norm does my queries
[17:41:52] <FromDiscord> <Isofruit> So that works out fine
[17:42:57] <FromDiscord> <xflywind> (edit) "are," => "are libs supporting connection pools,"
[17:43:31] <FromDiscord> <Isofruit> And oh hey flywind! Thanks for prologue
[17:43:50] <FromDiscord> <xflywind> you are welcome
[17:44:20] <FromDiscord> <dynamite> hello
[17:44:48] <FromDiscord> <Isofruit> cheers
[17:45:59] <FromDiscord> <baalajimaestro> Ah thanks a lot for the suggestion‚Üµ(@ajusa)
[17:55:52] *** Joins: vsantana (~vsantana@fttx-177136149221.usr.predialnet.com.br)
[17:57:11] *** Parts: vsantana (~vsantana@fttx-177136149221.usr.predialnet.com.br) (Leaving)
[17:59:34] <NimEventer> New post on r/nim by Familiar_Ad_8919: how does one split a string into 2 string long pieces, see https://reddit.com/r/nim/comments/rz123o/how_does_one_split_a_string_into_2_string_long/
[18:05:44] *** Joins: pro (~pro@user/pro)
[18:19:06] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e)
[18:25:48] *** Joins: arkurious (~arkurious@user/arkurious)
[18:29:12] <FromDiscord> <jmgomez> Hey guys, how difficult it would be to make nim to output into another lang (a very simple one, like AngelScript) with no interop at all. Just a as compilation target? Are there any resources to look up?
[18:29:44] <FromDiscord> <Rika> good luck, very hard if you dont know what youre doing already id say
[18:30:34] <FromDiscord> <Isofruit> erm... I might be doing a dumb dumb... does jsony expect a specific JSON object type to parse it into an option?
[18:30:45] <FromDiscord> <Shiba> Is there a guid on how to use the nim vm?
[18:30:48] <FromDiscord> <Yardanico> In reply to @jmgomez "Hey guys, how difficult": if you mean a backend - not easy
[18:31:12] <FromDiscord> <Yardanico> but maybe if you only need a few things you can just do string handling yourself
[18:31:27] <FromDiscord> <Yardanico> but if you need nim code compiled into angelscript the only way is to write an angelscript backend, yeah
[18:31:49] <FromDiscord> <Yardanico> any reason why you'd need angelscript target for nim?
[18:33:29] <FromDiscord> <Solitude> In reply to @jmgomez "Hey guys, how difficult": might not be that hard if nim features could easily map onto angelscript features, look at the js backend.
[18:34:38] <FromDiscord> <Rika> In reply to @Shiba "Someone help me, ": whats the issue exactly
[18:35:26] <FromDiscord> <Shiba> I actually don't have any idea on how to use it so?
[18:36:03] <FromDiscord> <Shiba> I can't find any instructions
[18:36:03] <FromDiscord> <Yardanico> you already use it every time you use `const`
[18:36:15] <FromDiscord> <Yardanico> it runs all nim code that is run at compile time (including macros)
[18:36:22] <FromDiscord> <Yardanico> also there's nimscript that allows you to use it separately
[18:36:30] <FromDiscord> <Yardanico> .nims files are nimscript too so they're executed by the nim vm as well
[18:36:52] <FromDiscord> <Yardanico>  https://media.discordapp.net/attachments/371759389889003532/929390708408868914/unknown.png
[18:37:01] <FromDiscord> <Yardanico> https://nim-lang.org/docs/nims.html
[18:37:05] <FromDiscord> <Shiba> Wait what was that
[18:37:11] <FromDiscord> <Yardanico> there's also `nim e`
[18:37:15] <FromDiscord> <Yardanico> to execute nimscript standalone
[18:37:44] <FromDiscord> <Yardanico> there are not that many reasons to use nimscript as standalone, but if you want to use it as the scripting language for your nim program, take a loot at https://github.com/beef331/nimscripter
[18:37:47] <FromDiscord> <Yardanico> (edit) "loot" => "look"
[18:37:53] <FromDiscord> <Shiba> Can i think about like nim version of jar
[18:38:30] <FromDiscord> <Yardanico> ??
[18:38:46] <FromDiscord> <Yardanico> `.jar` is just a zip archive with some java-specific metadata that packs java classes into a single file
[18:40:08] <FromDiscord> <Rika> do you know lua
[18:40:17] <FromDiscord> <Rika> its close but not quite the same thing
[18:40:32] <FromDiscord> <Rika> but the idea is what i mean
[18:40:51] <FromDiscord> <Rika> you have some nim/lua code, you run it with `nim e`/`lua`, and you get results
[18:41:01] <FromDiscord> <Yardanico> without compilation, yeah
[18:41:36] <FromDiscord> <Yardanico> nim vm (together with parts of the nim compiler like parser) is something like cpython - a program that runs code "on the fly" without true "compilation"
[18:41:48] <FromDiscord> <Yardanico> so @Shiba any more concrete questions?
[18:42:43] <FromDiscord> <valerga> `Hint: used config file '/etc/nim/nim.cfg' [Conf]`
[18:42:47] <FromDiscord> <valerga> how to avoid this with .nims ?
[18:42:55] <FromDiscord> <Yardanico> In reply to @valerga "how to avoid this": wdym "avoid"
[18:43:06] <FromDiscord> <Yardanico> this is just a hint by the compiler that tells you that it used this config file for the compilation
[18:43:06] <FromDiscord> <valerga> silence that output
[18:43:12] <FromDiscord> <Yardanico> `--hint[Conf]:off`
[18:43:37] <FromDiscord> <Shiba> In reply to @Rika "do you know lua": Ah thanks,  now i understands
[18:44:22] <FromDiscord> <valerga> @Yardanico what if I use the shebang to run the .nims . passing that flag does nothing
[18:44:32] <FromDiscord> <Yardanico> In reply to @valerga "<@!177365113899057152> what if I": what shebang specifically?
[18:44:35] <FromDiscord> <valerga> oh wait
[18:44:47] <FromDiscord> <Yardanico> also why run .nims file if you can compile-and-run .nim files just as well? :)
[18:45:01] <FromDiscord> <valerga> `#!/usr/bin/env nim`
[18:45:10] <FromDiscord> <Yardanico> yes, but what's the full line
[18:45:17] <FromDiscord> <Yardanico> just `nim` does nothing, you need a subcommand
[18:45:17] <FromDiscord> <valerga> I'm just learning a bit of nimscript so see how it is
[18:45:36] <FromDiscord> <Yardanico> In reply to @valerga "I'm just learning a": you don't need to learn it separately, it's just nim with a few limitations
[18:45:49] <FromDiscord> <valerga> `#!/usr/bin/env -S nim --hints:off`
[18:45:50] <FromDiscord> <valerga> this works
[18:46:49] <FromDiscord> <valerga> so what's the major use case for nimscript?
[18:47:08] <FromDiscord> <valerga> if it was trivial to launch commands i'd use it to replace bash
[18:47:48] <FromDiscord> <Yardanico> In reply to @valerga "so what's the major": embedding it in nim programs as a scripting language
[18:47:59] <FromDiscord> <Yardanico> i don't see any reason to use nimscript instead of nim if you want quick "scripts"
[18:48:03] <FromDiscord> <Yardanico> nim is already fast enough to compile for that
[18:48:08] <FromDiscord> <Yardanico> there was even a tool to make that easier
[18:48:34] <FromDiscord> <Yardanico> and IMO launching shell commands is already easy enough with osproc, but if you really want something even simpler there's https://github.com/Vindaar/shell
[18:49:00] <FromDiscord> <Yardanico> In reply to @Yardanico "there was even a": https://github.com/PMunch/nimcr
[18:49:32] <FromDiscord> <valerga> liking that shell macro
[18:49:46] <FromDiscord> <Solitude> In reply to @Yardanico "https://github.com/PMunch/nimcr": `nim r` kinda supersedes that
[18:51:20] <FromDiscord> <kaddkaka> sent a code paste, see https://play.nim-lang.org/#ix=3LvP
[18:51:57] <FromDiscord> <Rika> probably in a macro and not in that form, prolly in form `unpack(f, arg)`
[18:52:06] <FromDiscord> <Rika> or `unpack(f(arg))`
[18:52:43] <FromDiscord> <Isofruit> Ah man, unpacking and having macros
[18:52:47] <FromDiscord> <Yardanico> In reply to @Rika "or `unpack(f(arg))`": huh?
[18:52:48] <FromDiscord> <Isofruit> Maybe beef wants to have another child again
[18:52:53] <FromDiscord> <Yardanico> In reply to @Isofruit "Maybe beef wants to": https://github.com/technicallyagd/unpack
[18:53:06] <FromDiscord> <Rika> In reply to @Yardanico "huh?": what's "huh" about what i said
[18:53:08] <FromDiscord> <Rika> read his question
[18:53:18] <FromDiscord> <Yardanico> In reply to @Rika "what's "huh" about what": how is `unpack(f(arg))` related
[18:53:23] <FromDiscord> <Yardanico> you're calling f with a tuple and then unpack it ??
[18:53:30] <FromDiscord> <Rika> r e a d  h i s  q u e s t i o n
[18:53:34] <FromDiscord> <Yardanico> i did
[18:53:53] <FromDiscord> <Yardanico> he wants to unpack a tuple to pass its values as separate arguments to a proc
[18:53:58] <FromDiscord> <Rika> i KNOW
[18:53:58] <FromDiscord> <Yardanico> so how would `unpack(f(arg))` work there
[18:54:13] <FromDiscord> <Yardanico> this will call the proc with the tuple, not with the unpacked arguments
[18:54:19] <FromDiscord> <Rika> unpack would take in as untyped and transform f(arg)
[18:54:25] <FromDiscord> <Rika> the fuck
[18:54:30] <FromDiscord> <Rika> did you even read what i said
[18:54:32] <FromDiscord> <Yardanico> eh, you want to go that far
[18:54:41] <FromDiscord> <Solitude> yard is a resident troll, dont feed him
[18:54:53] <FromDiscord> <Yardanico> In reply to @Solitude "yard is a resident": :forsenAngry:
[18:55:47] <FromDiscord> <Isofruit> And thus the birth of another macro was prevented!
[18:55:57] <FromDiscord> <Rika> i dont see how this library helps
[18:56:21] <FromDiscord> <kaddkaka> o.O I didn't mean to start a fight
[18:56:50] <FromDiscord> <Rika> its whatever
[18:56:51] <FromDiscord> <Yardanico> idk, i wasn't trying to start a fight
[18:57:11] <FromDiscord> <Solitude> In reply to @kaddkaka "o.O I didn't mean": he had it coming ü§ú
[18:57:34] <FromDiscord> <Rika> now im wondering if discord thinks one of my messages sent but didnt
[18:57:51] <FromDiscord> <Yardanico> In reply to @Rika "now im wondering if": no, i saw your message but it wasn't clear at all
[18:57:54] <FromDiscord> <Rika> because i cant see how you'd miss what i said other than actually just missing it or discord being a fuck
[18:57:56] <FromDiscord> <Yardanico> who though you were thinking of transforming the whole call
[18:57:57] <FromDiscord> <Rika> okay
[18:58:01] <FromDiscord> <Yardanico> @kaddkaka https://stackoverflow.com/questions/48418386/tuple-to-function-arguments-in-nim
[18:58:12] <FromDiscord> <Solitude> In reply to @Yardanico "who though you were": i thought
[18:58:16] <FromDiscord> <Yardanico> In reply to @Solitude "i thought": you can't
[18:58:18] <FromDiscord> <Solitude> that was immediately obvious
[18:58:21] <FromDiscord> <kaddkaka> sent a code paste, see https://play.nim-lang.org/#ix=3LvQ
[18:58:38] <FromDiscord> <Rika> i thought so too, i dont remember having a macro return a function arg list being valid
[18:58:44] <FromDiscord> <Rika> In reply to @kaddkaka "<@259277943275126785> I'm looking for": yes i know
[19:03:10] <FromDiscord> <Shiba> Also what is the most popular game made purely in nim? Vektor2089
[19:03:43] <FromDiscord> <Yardanico> "purely in nim" - not sure
[19:03:44] <FromDiscord> <Shiba> I really like that game
[19:03:55] <FromDiscord> <Yardanico> also what do you classify as "purely nim"
[19:04:01] <FromDiscord> <Yardanico> does using SDL count as pure nim or not?
[19:04:06] <FromDiscord> <Shiba> In reply to @Yardanico "also what do you": In pure nim
[19:04:12] <FromDiscord> <enthus1ast> the ones made with nico i guess‚Üµ(@Shiba)
[19:04:20] <FromDiscord> <Yardanico> In reply to @Shiba "In pure nim": that's a very ambiguous  definition
[19:04:28] <FromDiscord> <enthus1ast> or this facebook game
[19:04:37] <FromDiscord> <Yardanico> opengl, sdl, a lot of other libraries are not nim
[19:04:53] <FromDiscord> <Shiba> Yes i know that doesn't count
[19:04:54] <FromDiscord> <Yardanico> does using system libraries count or not?
[19:04:56] <FromDiscord> <Yardanico> why?
[19:05:01] <FromDiscord> <Yardanico> why won't sdl count ü§î
[19:05:05] <FromDiscord> <Yardanico> glfw too
[19:06:15] <FromDiscord> <Rika> what doesnt count and what does?
[19:06:28] <FromDiscord> <Yardanico> that's the problem
[19:06:34] <FromDiscord> <Rika> yeah
[19:06:42] <FromDiscord> <Yardanico> so I think it's not a good idea to debate that question since it's ambiguous
[19:06:54] <FromDiscord> <Shiba> I cant think of sdl or open gl made with nim and the majority of game engines/frameworks use wrappers, so to be fair,  graphics/audio libaries doesn't count
[19:07:03] <FromDiscord> <Yardanico> In reply to @Shiba "I cant think of": nico uses sdl
[19:07:12] <FromDiscord> <Shiba> I KNOW
[19:07:20] <FromDiscord> <Yardanico> ??
[19:07:28] <FromDiscord> <Shiba> (edit) "I KNOW" => "Ii know"
[19:07:41] <FromDiscord> <Shiba> Idk how caps was on
[19:07:48] <FromDiscord> <Yardanico> I DONT KNOW
[19:07:58] <FromDiscord> <Rika> ?
[19:08:02] <FromDiscord> <Rika> im so confused now
[19:09:04] <FromDiscord> <Shiba> Simply what is the best or weel known game made with nim
[19:09:11] <FromDiscord> <Shiba> (edit) "weel" => "well"
[19:09:15] <FromDiscord> <Yardanico> In reply to @Shiba "Simply what is the": turing complete
[19:09:18] <FromDiscord> <Yardanico> it's godot + nim
[19:09:39] <FromDiscord> <Solitude> In reply to @Shiba "Simply what is the": door-o-bot, only the real ones know
[19:10:08] <FromDiscord> <Yardanico> In reply to @Solitude "door-o-bot, only the real": wow
[19:10:12] <FromDiscord> <Shiba> In reply to @Yardanico "it's godot + nim": That why i lost 4 dollars on a random godot book
[19:10:17] <FromDiscord> <Yardanico> ?????
[19:10:20] <FromDiscord> <Isofruit> ?
[19:10:27] <FromDiscord> <Shiba> Sorry
[19:10:46] <FromDiscord> <Rika> im even more confused now
[19:10:59] <FromDiscord> <Isofruit> I'm not even part of the convo and even I'm getting confused
[19:12:23] <FromDiscord> <Yardanico> In reply to @Isofruit "I'm not even part": shiba said that he lost 4 dollars because he bought a book about godot (?)
[19:12:30] <FromDiscord> <Isofruit> We've got fizzbuzz implementations, either way the most important game is covered
[19:13:22] <FromDiscord> <Isofruit> (edit) "covered" => "covered‚ÜµNothing else matters"
[19:13:44] <FromDiscord> <Isofruit> In reply to @Yardanico "shiba said that he": I think that was for a different server
[19:13:55] <FromDiscord> <Yardanico> i don't think so, I mentioned godot + nim above so it was probably related
[19:16:24] <FromDiscord> <Isofruit> I'll leave it be, saves me a bit of a headache trying to understand. Those headaches are better used when trying to do something silly myself. ‚Üµ‚ÜµNever heard of door o bot though,
[19:16:43] <FromDiscord> <Isofruit> (edit) "‚Üµ‚ÜµNever" => "‚ÜµOn an unrelated note :‚ÜµNever"
[19:16:49] <FromDiscord> <Isofruit> Got to Google that one
[19:17:07] <FromDiscord> <Isofruit> (edit) 04removed "though,"
[19:17:14] <FromDiscord> <Shiba> Still vektor 2089  has better gameplay
[19:17:46] <FromDiscord> <Yardanico> In reply to @Shiba "Still vektor 2089 ": let's go to #offtopic to discuss games please :)
[19:17:59] <FromDiscord> <Yardanico> the discussion diverged too much to still be in #offtopic
[19:18:01] <FromDiscord> <Yardanico> (edit) "#offtopic" => "#main"
[19:19:45] <FromDiscord> <Isofruit> Fair. I have a json thingy but I'm on mobile now so can't post my code snippet, Dangit. Threats for later I suppose üòÑ
[19:20:04] <FromDiscord> <Isofruit> (edit) "Fair. I have a json thingy but I'm on mobile ... now" 03added "right"
[19:25:38] <FromDiscord> <Isofruit> Hmmm if I wanted to, could I compile sth in nim to work on Android easily (so is it just throwing in a flag into the compiler or are there more things to take into consideration?)
[19:26:29] <FromDiscord> <Isofruit> I only know that it works, not how well. It's not immediately relevant, I'm just toying around with some ideas
[19:26:36] <FromDiscord> <Yardanico> "work on android" as in?
[19:26:40] <FromDiscord> <Yardanico> you can already use nim easily with termux
[19:28:25] <FromDiscord> <Isofruit> Have a clickable icon that opens up a calendar gui or building a frontend client for my backend that I'm currently developing
[19:29:19] <FromDiscord> <Shiba> In reply to @Yardanico "you can already use": Using nim on phone?
[19:29:20] <FromDiscord> <Isofruit> Sth like that, though ternux sounds like something to do a Google of
[19:29:24] <FromDiscord> <Yardanico> In reply to @Shiba "Using nim on phone?": yes
[19:29:33] <FromDiscord> <Shiba> Compiler?
[19:29:35] <FromDiscord> <Yardanico> yes
[19:29:40] <FromDiscord> <Yardanico> https://termux.com/
[19:31:11] <FromDiscord> <Isofruit> Man, that would be massive overkill for my usecase, yet it does have appeal
[19:32:56] <NimEventer> New thread by Enthus1ast: Field 'sym' is not accessible for type 'TNode' using 'kind = nkClosure' [FieldDefect], see https://forum.nim-lang.org/t/8785
[19:38:21] <FromDiscord> <planetis> is it recommended/faster to return lent even for small objects or a copy?
[19:38:41] <FromDiscord> <planetis> especially the array access operator `[]` should it return lent for int32?
[19:39:31] <FromDiscord> <planetis> it seems like it makes a (NI32\)0 temporary with lent
[19:43:19] <FromDiscord> <planetis> sorry that was for var, not sure what it produces for let container
[19:46:39] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[19:47:43] <FromDiscord> <planetis> nah same
[20:21:52] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3Lwm
[20:22:08] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3Lwn
[20:23:24] <FromDiscord> <Patitotective> (edit) "https://play.nim-lang.org/#ix=3Lwn" => "https://play.nim-lang.org/#ix=3Lwo"
[20:23:50] <FromDiscord> <Patitotective> (edit) "https://play.nim-lang.org/#ix=3Lwo" => "https://play.nim-lang.org/#ix=3Lwq"
[20:24:01] *** Quits: crem (~crem@2a02:169:160a:1:9b30:962e:76eb:4bb3) (Quit: WeeChat 3.2)
[20:24:10] <FromDiscord> <Patitotective> How would I access to a `PContent` table's key?
[20:24:18] <FromDiscord> <Rika> you dont have a `[]` for the union?
[20:25:59] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3Lwr
[20:28:02] *** Joins: crem (~crem@2a02:169:160a:1:9b30:962e:76eb:4bb3)
[20:30:42] <FromDiscord> <Patitotective> Because Nim doesn't treat `PContentTypes` of `PContent` as an `OrderedTable[string, PContentTypes]`
[20:30:51] <FromDiscord> <Patitotective> (edit) "Because" => "But why" | "PContentTypes]`" => "PContentTypes]`?"
[20:33:29] <FromDiscord> <Patitotective> Can I convert an union to it's type?
[20:36:03] <FromDiscord> <Yardanico> you need to use `as`
[20:36:16] <FromDiscord> <Yardanico> https://github.com/alaviss/union did you maybe not read the example in readme?
[20:36:46] <FromDiscord> <Yardanico> but it'll look quite ugly in the proc itself i guess
[20:37:32] <FromDiscord> <Patitotective> sent a code paste, see https://paste.rs/lxf
[20:38:27] <FromDiscord> <Yardanico> (content as PContent)[key] might work
[20:38:58] <FromDiscord> <Patitotective> yey
[20:38:59] <FromDiscord> <Patitotective> thanks
[20:39:00] <FromDiscord> <Patitotective> üôÉ
[20:39:02] *** Quits: dv^_^ (~dv@eclipse.oxfordfun.com) (Ping timeout: 252 seconds)
[20:39:21] *** Joins: dv^_^ (~dv@eclipse.oxfordfun.com)
[20:48:15] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3Lwz
[20:48:16] <FromDiscord> <Patitotective> is that possible?
[20:55:54] *** Quits: neurocyte0917 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[20:56:55] *** Joins: neurocyte0917 (~neurocyte@user/neurocyte)
[21:00:21] *** Quits: pro (~pro@user/pro) (Quit: WeeChat 3.4)
[21:03:14] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3LwE
[21:03:15] <FromDiscord> <Patitotective> sent a code paste, see https://paste.rs/Ah0
[21:03:34] <FromDiscord> <Patitotective> (edit) "https://play.nim-lang.org/#ix=3LwE" => "https://play.nim-lang.org/#ix=3LwF"
[21:05:08] <FromDiscord> <Rika> Not var
[21:05:29] <FromDiscord> <Patitotective> what do you mean?
[21:06:07] <FromDiscord> <Rika> The first type you pass in is not var
[21:06:48] <FromDiscord> <Patitotective> `my_prefs["theme"]`?
[21:06:53] *** Joins: Guest55 (~Guest55@8.28.82.56)
[21:07:12] <FromDiscord> <Rika> Yes, [] returns a non var
[21:07:48] <FromDiscord> <Rika> Hopefully someone else continues to help, I need to sleep
[21:07:54] <FromDiscord> <Patitotective> no problem
[21:07:56] <FromDiscord> <Patitotective> thanks anyways
[21:07:57] <FromDiscord> <Patitotective> üôÉ
[21:08:10] <FromDiscord> <Patitotective> should it be a reference? (dont answer, sleep rika)
[21:08:10] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e)
[21:08:30] <FromDiscord> <Solitude> no, change your `[]` to template for easy workaround
[21:08:41] <FromDiscord> <Solitude> or define separate `[]` for var overload
[21:08:48] *** Quits: cyraxjoe (~joe@201.150.10.60) (Quit: I'm out!)
[21:09:28] <FromDiscord> <Patitotective> huh? was it that easy?
[21:09:31] <FromDiscord> <Patitotective> thanks @Solitude
[21:09:32] <FromDiscord> <Patitotective> üôÉ
[21:10:42] *** Joins: cyraxjoe (~joe@201.150.10.60)
[21:11:38] <FromDiscord> <Solitude> In reply to @Patitotective "huh? was it that": it will break apart later, dont relax
[21:11:56] <FromDiscord> <Patitotective> https://c.tenor.com/fJAoBHWymY4AAAAM/do-not-touch-it-programmer.gif
[21:12:02] <FromDiscord> <Patitotective> huh?
[21:12:11] <FromDiscord> <Solitude> no inline gifs for you
[21:12:28] <FromDiscord> <Patitotective> can i have some?...
[21:12:46] <FromDiscord> <Solitude> no, we use imagination here
[21:13:00] <FromDiscord> <Patitotective> (edit) "https://c.tenor.com/fJAoBHWymY4AAAAM/do-not-touch-it-programmer.gif" => "https://c.tenor.com/fJAoBHWymY4AAAAM/do-not-touch-it-programmer.gif‚Üµ."
[21:13:13] <FromDiscord> <Patitotective> In reply to @Solitude "it will break apart": thanks for the reminder
[21:13:27] <FromDiscord> <Patitotective> but templates for now have fixed everything hehe
[21:15:32] <FromDiscord> <Patitotective> is this the official logo? https://raw.githubusercontent.com/nim-lang/assets/master/Art/logo-crown.png
[21:15:46] <FromDiscord> <Patitotective> or this https://forum.nim-lang.org/images/logo.png?
[21:15:47] <FromDiscord> <Patitotective> (edit) "https://forum.nim-lang.org/images/logo.png?" => "https://forum.nim-lang.org/images/logo.png ?"
[21:33:08] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[21:43:39] *** Quits: Guest55 (~Guest55@8.28.82.56) (Quit: Ping timeout (120 seconds))
[21:48:12] <FromDiscord> <valerga> nimagination
[21:48:38] <FromDiscord> <valerga> nim magi nation
[21:52:44] <FromDiscord> <Patitotective> sent a long message, see http://ix.io/3Lx5
[21:54:16] <FromDiscord> <Isofruit> Aren't you pretty likely to use your macros in your procs rather than the other way round? I would have inverted that list with types on top
[21:54:23] <FromDiscord> <haxscramper> sort by logical dependencies
[21:54:48] <FromDiscord> <haxscramper> Maybe types/procs makes sense, but everything else is bound to be intermixed with each other
[21:55:17] <FromDiscord> <haxscramper> but usually "meta" things appear on top, like macros and templates
[21:55:24] <FromDiscord> <haxscramper> and then used later in procs
[21:56:02] <FromDiscord> <Patitotective> sent a long message, see http://ix.io/3Lx7
[21:57:13] <FromDiscord> <haxscramper> types, minor getters/setters/predicates, macros/templates, iterators, procs
[21:57:54] <FromDiscord> <haxscramper> I don't like to put `isEnabled()` or `add()` billion lines away from the type, since it uses nothing and can be used by any piece of code
[21:58:03] <FromDiscord> <haxscramper> same for `items()/pairs()`
[21:58:05] <FromDiscord> <Patitotective> what are those getters, setters and predicates?
[21:58:19] <FromDiscord> <haxscramper> `setValue()`, `getValue()`, `isEnabled()`
[21:58:20] <FromDiscord> <haxscramper> etc.
[21:58:30] <FromDiscord> <Patitotective> ok
[21:58:31] <FromDiscord> <haxscramper> Maybe you don't have them, so it is purely optional
[22:03:29] <NimEventer> New thread by Planetis: Is it correct to return var after casting an address, see https://forum.nim-lang.org/t/8786
[22:17:13] <FromDiscord> <Isofruit> Okay, so I'm definitely being dumb in jsony somewhere
[22:17:31] <NimEventer> New thread by Hobbyman: Non unique / double keys in json, see https://forum.nim-lang.org/t/8787
[22:17:47] <FromDiscord> <Isofruit> sent a code paste, see https://play.nim-lang.org/#ix=3Lxd
[22:18:49] <FromDiscord> <Isofruit> sent a code paste, see https://play.nim-lang.org/#ix=3Lxe
[22:19:17] <FromDiscord> <Isofruit> I thought "Ah, the Option[string] must be fucky then"
[22:19:24] <FromDiscord> <Isofruit> sent a code paste, see https://play.nim-lang.org/#ix=3Lxf
[22:20:24] <FromDiscord> <Isofruit> (edit) "https://play.nim-lang.org/#ix=3Lxe" => "https://play.nim-lang.org/#ix=3Lxg"
[22:22:08] <FromDiscord> <Isofruit> I might make this in issue on the jsony github thingy, I'd just like to double check whether I'm being obviously wrong somewhere and I'm just blind or whether this is actually as confusing as it seems to me
[22:34:09] <FromDiscord> <planetis> there is also https://github.com/planetis-m/eminim using stdlib parsejson. try it and see if it works for you
[22:35:58] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[23:17:36] <FromDiscord> <Patitotective> sent a code paste, see https://paste.rs/5ga
[23:17:43] <FromDiscord> <Patitotective> (edit) "https://play.nim-lang.org/#ix=3LxL" => "https://play.nim-lang.org/#ix=3LxK"
[23:18:26] <FromDiscord> <Patitotective> what it does is that it checks if any of `INVALID_KEY_CHARS` are in `key` string
[23:23:07] <FromDiscord> <Isofruit> Nothing in sequtils that jumps out?
[23:24:06] <FromDiscord> <Isofruit> https://nim-lang.org/docs/sequtils.html#any%2CopenArray%5BT%5D%2Cproc%28T%29‚ÜµHas an any method, you can take your array, call any on it and feed it a lambda expression that evaluates any individual element of the array
[23:24:18] <FromDiscord> <huantian> https://nim-lang.org/docs/sequtils.html#anyIt.t,untyped,untyped‚Üµyou can also use anyIt if you prefer
[23:26:03] <FromDiscord> <Patitotective> Thanks
[23:26:05] <FromDiscord> <Patitotective> üôÉ
[23:27:26] <FromDiscord> <planetis> you do like the upside down emojis
[23:27:51] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3LxN
[23:28:11] <FromDiscord> <Patitotective> In reply to @planetis "you do like the": hehe, is the best
[23:28:36] <FromDiscord> <Patitotective> (edit) "https://play.nim-lang.org/#ix=3LxN" => "https://paste.rs/hyO"
[23:29:28] <FromDiscord> <planetis> you dont, its known at compile time better use proc overloads
[23:30:31] <FromDiscord> <Patitotective> oh yea, you're right, i forgot this was nim and not pyton hehe
[23:30:34] <FromDiscord> <Patitotective> thanks üôÉ
[23:34:23] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[23:39:57] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Remote host closed the connection)
[23:41:21] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[23:41:34] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3LxT
[23:42:39] <FromDiscord> <huantian> yes, len will return the number of keys in the table
[23:42:52] <FromDiscord> <Patitotective> but is there a better wa?
[23:42:53] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[23:42:53] <FromDiscord> <Patitotective> (edit) "wa?" => "way?"
[23:43:11] <FromDiscord> <huantian> probably not
[23:43:19] <FromDiscord> <Patitotective> k thanks
[23:43:26] <FromDiscord> <Patitotective> (edit) "k thanks ... " 03added " upsidedown emoji "
[23:43:28] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[23:45:07] <FromDiscord> <haxscramper> `len() == 0` applies to almost all containers/json/ast/string/seq/set so it is kind of api-by-convention way of checking for empty
[23:49:14] *** Joins: algae (~algernon@170.10.246.117)
[23:54:55] <FromDiscord> <krisppurg> sent a code paste, see https://play.nim-lang.org/#ix=3LxW
[23:57:20] <FromDiscord> <Patitotective> Is there an equivalent to `repr` (from Python) in Nim? because Nim's `repr` seems to include the memory address i only want the object representation (strings with quotes basically)?
[23:57:23] <FromDiscord> <Patitotective> (edit) "basically)?" => "basically)"
