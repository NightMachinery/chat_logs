[00:23:19] *** Joins: random-nick (~random-ni@87.116.165.220)
[00:24:48] <copec> I grew up West of Hill Field Air Force Base in Utah, and have had three F-16's crash within a couple of miles of me within my lifetime
[00:26:48] <copec> Fortunately, the area was 99% fields and wetlands 
[00:28:21] <hayley> https://www.youtube.com/watch?v=PcsumKaIXEs
[00:28:21] -ixelp- Gary Numan (London 1981) [07]. The Aircrash Bureau - YouTube
[00:29:59] <copec> Google Phi commercials make me want to punch something, dunno if they service you upside downers
[00:30:07] <copec> (watching yt link)
[00:30:24] <hayley> Haven't heard of it. Is this SSA as a service (SSAaaS)?
[00:31:53] <hayley> You mean Google Fi? Don't think it services here.
[00:32:17] <copec> yeah Fi
[00:33:27] <selwyn> it is not my editorial policy but imo crashes are worthy of news
[00:33:57] <hayley> https://www.youtube.com/watch?v=FTuVB5-19FE
[00:33:58] -ixelp- Crash - YouTube
[00:35:50] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Ping timeout: 256 seconds)
[00:36:14] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[00:42:01] <Alfr> selwyn, current fighter jets are designed to be aerodynamically unstable allowing them to perform crazy stunts. So why would it be news worthy when one crashes? To the contrary, I'd consider any year without one crashing newsworthy.
[00:42:50] <Alfr> Also the pilot survived, so that wouldn't be news either.
[00:45:37] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 250 seconds)
[00:47:19] *** Joins: aeth (~aeth@user/aeth)
[00:57:39] <selwyn> they may be designed to be aerodynamically unstable but they are not designed to crash
[01:00:24] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:8806:e50e:8484:7f18)
[01:01:59] <copec> ^lol
[01:02:42] <Alfr> selwyn, but because they are unstable, any minor defect in control surfaces or software will crash them. That's why I expect some to crash.
[01:03:22] <selwyn> i see
[01:05:10] <copec> It is splitting hairs, but being aerodynamically unstable is a side-effect of maximizing specific maneuverability
[01:05:36] <copec> One could design plenty of unstable platforms that aren't at all maneuverable 
[01:06:15] <copec> at least controllably
[01:08:39] <Alfr> copec, fair. Reading that again, how I stated it really seems backward.
[01:15:17] <pl> anyway, aerodynamically stable/unstable isn't all that important for crashes
[01:15:42] <hayley> https://kerkour.com/rust-crate-backdoor/ POV: still no object capabilities
[01:15:44] -ixelp- Backdooring Rust crates for fun and profit
[01:15:59] <pl> aerodynamical stability just means that unaugmented, if you release control surfaces, it will achieve some form of "neutrum"
[01:20:27] <pl> F-35 is just shitty in many ways unrelated to aerodynamic stability
[01:20:42] <selwyn> so it is shit?
[01:21:44] <Alfr> pl, not performing a random walk when uncontolled and as a result following gravity certainly helps avoid crashing should something slightly misbehave.
[01:22:46] <pl> Alfr: it's not necessarily a random walk when uncontrolled
[01:23:39] <pl> in fact, a perfectly good design would be totally steady in steady air
[01:23:47] <pl> it's just that /any/ input would move it out
[01:24:34] <pl> also, excessive stability can mean too limited control leading to a crash, too
[01:25:00] <Alfr> pl, perfectly reasonable assumption when flying in Earth's atmosphere?
[01:25:18] <pl> (one of the gliders I flew was infamous for how hard rolls were in it, which made certain ops more dangerous than less stable planes)
[01:26:02] *** Quits: Inline (~Inline@2a02:908:1252:7a80:7839:e0f2:7ca6:b112) (Remote host closed the connection)
[01:32:12] *** Joins: Inline (~Inline@2a02:908:1252:7a80:7839:e0f2:7ca6:b112)
[01:32:26] <copec> Are you a glider pilot pl?
[01:33:44] <pl> lapsed
[01:33:52] <copec> I attempted to train to become one, went up a bunch of times but always got extremely motion sick. This was about a decade ago. I found a couple of other people that had the same problem
[01:34:19] <copec> They went up in small powered planes with friends for a few years until their body/brain got used to it
[01:35:21] <copec> I'm just in a raising kids part of my life, and don't have any flying friends, and nobody wants to be a friend unless you already fly around me. So I figure I'll wait and might get to do it someday
[01:38:17] <pl> a shame
[01:38:39] <pl> it shouldn't be hard to get flights like that :(
[01:39:21] <pl> but gliders are awesome, especially since you get to interact with air at much more intimate level than your typical light private plane
[01:40:42] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[01:41:11] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[01:41:51] <copec> Yeah, although I love so many things about aviation, the only thing i've had a desire to fly myself is gliders
[01:42:28] <selwyn> my school had a cadet program which let you fly with minimal training
[01:42:32] <selwyn> gliders iirc
[01:42:45] <selwyn> though i wisely avoided it
[01:43:24] <selwyn> yeah gliding has a low age limit
[01:44:33] <selwyn> it does sound fun though
[01:46:12] *** Quits: Inline (~Inline@2a02:908:1252:7a80:7839:e0f2:7ca6:b112) (Ping timeout: 265 seconds)
[01:50:21] <hayley> "You deal with C, that's where the problems start" - Henry Baker, ILC 2005
[01:51:05] <selwyn> brave to say that at the i love c conference, 2005
[01:56:16] <aeth> Yesterday in HN... trees aren't real. https://news.ycombinator.com/item?id=29248037
[01:56:17] -ixelp- My favorite example of this is that trees aren’t really a phylogenetic group all... | Hacker News
[01:56:33] <aeth> https://eukaryotewritesblog.com/2021/05/02/theres-no-such-thing-as-a-tree/
[01:56:47] <sham1> Trees are a lie
[01:56:50] <sham1> Like birds
[01:57:00] <aeth> Birds are real, fish aren't
[01:58:31] <selwyn> i like the way languages come up with 'convergent naming' in different ways
[01:58:49] <selwyn> for example, in the english language melon and watermelon are similar, presumably because they are thought to bear a resemblance
[01:58:57] <selwyn> however this is very amusing to speakers of other languages
[01:59:12] <selwyn> who would not think to identify the two terms semantically
[01:59:30] <waleee> which languages would that be?
[01:59:42] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 256 seconds)
[01:59:45] <waleee> the watermelon & melon example
[02:00:06] <selwyn> native turkish speakers seem to find it the most hilarious thing about the english language
[02:00:43] <waleee> honestly it's more hilarious that they would call them something unrelated to each other
[02:01:24] <waleee> since all melons I can come up with both resemble and are closely related to each other
[02:02:34] <aeth> pineapple
[02:11:31] <selwyn> this is true, but melons and watermelons both belong to the category of heavy edible things that grow on vines
[02:11:37] <selwyn> which includes courgettes and pumpkins
[02:13:56] <hayley> Okay when should we attempt to run DEMSOF (defun's egoist maximalist software conference) again
[02:16:50] <pl> copec: where are you btw? Wondering what kind of training gliders around :)
[02:20:07] <aeth> selwyn: right, so many things in nature are categorized based on superficial similarity
[02:20:16] <aeth> selwyn: I was shocked that this included trees of all things, though
[02:20:30] <selwyn> yeah its surprising
[02:20:42] <selwyn> i thought shrubs were a legit taxonomy
[02:20:42] <hayley> Idea: run all 24 hours so that there aren't time zone issues, make the talks longer so there's more time for Q&A
[02:20:43] <aeth> for instance, a maple tree has absolutely no relation to a red-black tree
[02:21:06] <selwyn> lol
[02:21:23] <aeth> apparently wood is just a thing that happens to plants that are supposed to last more than one year
[02:21:34] <aeth> well, usually
[02:21:54] * pl learnt to fly on a glider that disturbing amount of people refer to as killer
[02:22:40] <selwyn> reminds me of a certain harrison ford film
[02:23:17] <selwyn> i hope this glider had a better designed nuclear reactor :)
[02:23:26] <Alfr> aeth, but there are also plants which last more than one year and don't happen to turn in to wood.
[02:23:39] <aeth> Alfr: yeah, but they're the exception, apparently
[02:24:15] <pl> funnily enough, one of the issues was how SZD-50 has much less... forced stability, compared to previous mainstay SZD-9
[02:24:37] <pl> so a lot people tell me SZD-9 was much more forgiving to fly
[02:26:03] <pl> but my only flight in -9 made me think of slow lumbering beast. -50 followed controls eagerly
[02:26:47] <Alfr> aeth, cacti aren't that exceptional. (Though not all of them aren't wooden.)
[02:27:36] <aeth> https://en.wikipedia.org/wiki/Perennial_plant
[02:27:39] <pl> isn't "turn into tree" an evolutionary adaptation that is essentially one bit switch away in many plants?
[02:28:01] <aeth> "The term is also widely used to distinguish plants with little or no woody growth (secondary growth in girth) from trees and shrubs, which are also technically perennials."
[02:28:15] <pl> so for example berry bushes can actually grow into a tree
[02:28:42] <aeth> pl: I think the argument is that a huge branch (heh) of plants had a common ancestor that was a tree/shrub (height is the only distinction?), but quite a few of them lost that
[02:28:48] <aeth> so it's a gene that can be reactivated
[02:28:58] <aeth> but I read the article yesterday
[02:29:31] <pl> aeth: my understanding is that turning into a tree evolved separately many, many times
[02:30:08] <aeth> https://en.wikipedia.org/wiki/Evolutionary_history_of_plants#Tree_form
[02:30:20] <aeth> "True wood is only thought to have evolved once"
[02:30:35] <selwyn> cute convergent evolution of cat and owl
[02:30:39] <aeth> There are other tree-like things that we might classify as trees due to it being such a fuzzy category, though
[02:32:28] <aeth> pl: but if true wood only appeared once, it's more about wood being lost in a lot of the descendant plants, and sometimes even reappearing
[02:36:27] <hayley> Would anyone have much to say on the topics of imperative and maximalist computing? /me doesn't know what topics to run.
[02:37:34] <hayley> Really, anything about handling larger software systems yourself would be relevan.
[02:37:34] <hayley> *relevant
[02:37:51] <Alfr> aeth, how about, some trees aren't trees? https://i.imgur.com/6JGvQOO.jpg
[02:38:44] <aeth> https://eukaryotewritesblog.files.wordpress.com/2021/05/whatareplants-1.jpg
[02:38:47] <selwyn> i kind of want to talk about my experience doing hpc in lisp
[02:38:55] <selwyn> i feel it is somewhat interesting but not interesting enough
[02:38:57] <aeth> Alfr: the problem is that the... tree is very messy
[02:39:13] <selwyn> hayley: unsure if that is what you mean by large systems
[02:39:48] <hayley> selwyn: Sure, that'd be cool.
[02:39:53] <aeth> Trees are https://en.wikipedia.org/wiki/Spermatophyte
[02:39:58] <Alfr> aeth, I've seen that one above; but the picture itself at least depicts a tree (I checked).
[02:39:59] <aeth> But not all spermatophytes are trees
[02:40:36] <selwyn> would have to think of something more profound than 'i used lisp, and of course it was more fun than the alternative'
[02:41:04] <selwyn> feel that heisig does hpc more seriously than i do
[02:42:36] <pl> I wonder how cabbage as tree would look like, or carrot
[02:42:43] <hayley> Well, heisig sounds pretty busy, and there's no need to take the presentation very seriously. 
[02:43:11] <hayley> I was thinking about saying something on minimalism for its own sake (aka most minimalism) versus "the power of simplicity"-type minimalism.
[02:43:25] <aeth> pl: well
[02:43:37] <aeth> pl: with the magic of genetic engineering, hopefully we'll see
[02:43:57] <aeth> pl: someone already did this to one plant (left vs right). https://eukaryotewritesblog.files.wordpress.com/2021/05/woodyaridopsis.png
[02:44:09] <hayley> https://www.youtube.com/watch?v=HRgtc6cz1ow
[02:44:09] -ixelp- Genetic Engineering (312MM Version) - YouTube
[02:44:35] <selwyn> could give a presentation to the effect of 'here is how you outwit the pbs scheduler to give you a repl on a compute node, while others wait like suckers'
[02:44:51] <hayley> lol
[02:45:10] <copec> pl: I'm in the southwest corner of Utah, when I took some lessons I traveled to Truckee near Reno
[02:46:01] <hayley> "Why would you actually do minimalism? Mostly ease of reasoning and implementation. Why would you do modularity? The same thing. So who gives a shit about large systems if they are modular?"
[02:46:12] <aeth> akshully
[02:46:16] <aeth> there are two kinds of minimalism
[02:46:31] <aeth> I think it's in the Worse is Better essay
[02:46:50] <aeth> There's minimalism like C, where it's easy to implement. And then there's minimalism like Scheme, where it's simple and elegant but not easy.
[02:46:54] <hayley> Worse-is-better doesn't count. Mostly because WIB people still think they're doing things that are easy to reason about and implement.
[02:47:34] <aeth> outside of programming, a glass building is probably a good example of hard-to-implement minimalism
[02:47:49] <aeth> How hard could it be? It's just a wall of glass. Well, the larger the glass is, it's actually quite hard. Especially if you have no border.
[02:48:15] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 250 seconds)
[02:49:11] <hayley> Well, yes, minimalism means something different with computers. Using CDE would probably be minimalist, though it looks like crap.
[02:49:12] <hayley> i.e. it's not aesthetic, it's scale.
[02:49:17] <selwyn> hm
[02:49:23] <selwyn> is there a minimalist lisp then?
[02:49:38] <hayley> Anything Paul Graham has made?
[02:52:34] <hayley> But it's still a matter of intentions. Some things are designed to be small for ease of implementation, like LC-3 (which gilberth and I made fun of yesterday). To borrow more irrelevant words from art, I'd call that "reductive minimalism". They are knowingly reducing the capabilities of the user.
[02:52:47] <copec> Paul Graham is all about making things the most concise as possible, which is great for the person using the tool, but I find the style personally difficult to read
[02:53:26] <aeth> he is from the Perl generation of programmers
[02:53:53] <aeth> it's a lost way of thinking
[02:55:09] <hayley> #apl is that way ----->
[02:55:20] <copec> It certainly isn't without merit
[02:57:00] <copec> If your end product is the program and not the source, and you are looking at reaching that end in the most efficient way for each programmer, then it is great
[02:57:30] <hayley> You don't ever touch your code after writing it?
[02:57:59] <copec> I'm just more interested in how the program is written and represented as then the end result, because it is a hobby for me
[02:58:17] <copec> Yeah, I touch my own code a lot, but I don't write P.G. style
[02:58:23] <copec> I just see the merit of it, is my point
[02:58:46] <copec> I see the merit of perl too
[02:59:46] <edgar-rft> I learned from Paul Gramham to think about Lisp code in a different way than I was used to (learning new things is always good), but I haven't used much of his ideas in my own code.
[03:02:59] <selwyn> isn't conciseness valued anymore? i don't get it
[03:05:51] <copec> I mean, yes it is. It just depends on your audience I suppose. I'm not a very linguistic person, everything to me is sort of pseudo visual of how parts interact
[03:06:31] <copec> When it is super-concise, perhaps too many simultaneous ideas are being compressed together than my mental ability
[03:08:06] <copec> I think my own level of how concise is perhaps lower than persons who are excellent programmers
[03:13:43] <edgar-rft> For my taste P.G. in his books is talking too much about details and fails to teach the overall picture.
[03:22:02] *** Joins: clothespin (~awolven@c-73-209-95-92.hsd1.il.comcast.net)
[03:38:22] *** Joins: dra (~dra@2a04:4540:641d:d100:61c7:e8f2:fc82:e4f6)
[03:38:24] <dra> Hello!
[03:39:25] <gilberth> Hallo dra!
[03:40:17] <gilberth> By chance, has anybody any clue why Corona numbers are going through the roof?
[03:41:02] <selwyn> my suspicion is that the vaccines are not as good at preventing spread as we hoped they would be
[03:41:35] <selwyn> not good from a communications perspective that this seems to have been quietly accepted without informing people of the reality
[03:42:47] <gilberth> Hmm. I also guess, that only 70% of the people being vaccinated here, doesn't help. Still, it's way worse than last year, as nobody was vaccinated.
[03:43:50] <gilberth> Or are people also getting careless because they feel safe being vaccinated? I really have no clue.
[03:44:05] <Catie> Here in the United States, definitely
[03:44:10] <White_Flame> there's also a difference between semantic conciseness & syntactic conciseness
[03:44:43] * White_Flame talks to the backlog, and decides to scroll down again
[03:45:47] <gilberth> Well, I am still very paranoid despite being vaccinated.
[03:52:20] <dra> https://media.news.de/resources/images/79/68/94c5aa242d769e458cc0f169ad45.jpg <-- Maybe this is why cases are surging here in Germany.
[03:53:21] <hayley> https://www.youtube.com/watch?v=D8C76KM7xg0
[03:53:21] -ixelp- The Machman - YouTube
[03:53:32] <dra> Wait, wrong image. I meant this one: https://img.welt.de/img/regionales/nrw/mobile235001482/3241620407-ci23x11-w1136/urn-newsml-dpa-com-20090101-211111-99-963335-large-4-3-jpg.jpg
[03:53:44] <gilberth> It's worse in the east and south.
[03:53:49] <edgar-rft> gilberth: you clearly need to be vaccinated against paranoia, too
[03:54:21] <gilberth> dra: Karneval is a thing in the west.
[03:54:24] <hayley> gilberth: Suppose I have some instruction graph, and I do data flow analysis. The results of this analysis suggest that I should do some "inlining" and extend the instruction graph somehow. Should I restart the analysis, or just put the new instructions on the work list and continue from there?
[03:54:54] <Alfr> edgar-rft, it's only called paranoia if no one is gunning for you.
[03:55:00] <hayley> i.e. I transform A->B->C to A->B->C->D->E. Do I just add {D, E} to the worklist and continue?
[03:55:09] <gilberth> edgar-rft: My general health is bust already, I consider myself a high risk patient, would I catch the virus.
[03:55:34] <edgar-rft> we'll all die sooner or later...
[03:56:41] * edgar-rft needs to be vaccinated against death
[03:57:23] <gilberth> hayley: Milady, you're after a fix point.
[03:57:42] <hayley> Yes.
[03:57:44] <gilberth> egdar-rft: Sure, but I prefer to die later rather than sooner.
[03:58:19] <hayley> I think that the transfer function _should_ converge irregardless of iteration order, so it is as if C->D->E was always there, but we just handled it late.
[03:58:32] <gilberth> dra: But yes, it's pretty to celebrate that way, especially at these times.
[03:59:11] <gilberth> hayley: Didn't you just say that you modify the graph?
[03:59:23] <hayley> Yes.
[03:59:32] <hayley> But only to add instructions.
[04:00:08] <hayley> Assuming that we operate in a semi-lattice, this should still work.
[04:00:17] <gilberth> Yes, dear, but those added instructions may join into some existing part, don't they?
[04:00:57] <hayley> Yes, but it would be as if we just handled those instructions last, no?
[04:01:18] <hayley> As JOIN is supposed to be associative and commutative, it shouldn't be a problem.
[04:02:13] <gilberth> Not necessarily commutative, I'd say.
[04:02:50] <hayley> Then it is not a semilattice.
[04:04:47] <gilberth> Milady, I can't say definitely without looking that up. It's been a while. All I remember is, that those GEN and KILL functions could be pretty arbitrary. I just don't remember the precise set of axioms that must hold for those.
[04:05:50] <gilberth> But in general it might work. hayley, what analysis are you doing?
[04:07:06] <hayley> I'm considering doing data flow analysis on our link register, so that I can keep tracing through return instructions.
[04:07:40] <gilberth> I mean in general it works like "We assume property P until we get information to the contrary because another control path joins with contradicting information."
[04:08:17] <gilberth> hayley: Yes, but which data flow analysis?
[04:09:51] <hayley> Yes, but it should be that (TRANSFER a b) = (TRANSFER b a), i.e contradiction happens in either order.
[04:10:23] <hayley> gilberth: I would look at assignments to the link register, and propagate those forward.
[04:11:38] <gilberth> When your transfer function is like that. Not all transfer functions are this way.
[04:13:16] <gilberth> hayley: You want to know, whether the LR is some constant value at a particular instruction?
[04:13:43] <gilberth> Across it being saved and restored from stack?
[04:13:57] <hayley> FWIW I think I figured out the global value numbering stuff. GVN produces a map of variable <--> value number which you can use to eliminate redundant variables.
[04:14:19] <gilberth> Yep.
[04:15:08] <gilberth> It's basically the information variable X is always the same as variable Y here, no matter what.
[04:16:05] <gilberth> I don't use GVN for that. But it's perhaps a convenient approach.
[04:16:18] <moon-child> what do you use?
[04:20:37] <gilberth> I just keep an equivalence relation. This is suffice for my application.
[04:21:20] <gilberth> Perhaps the equivalence classes are what the value numbers are? Hmm.
[04:23:38] <selwyn> can't sleep again
[04:24:04] <hayley> Then AIUI it is a broken transfer function.
[04:24:08] <gilberth> selwyn: Perhaps you're also a nocturnal one?
[04:24:44] *** Quits: dra (~dra@2a04:4540:641d:d100:61c7:e8f2:fc82:e4f6) (Ping timeout: 265 seconds)
[04:24:54] <hayley> gilberth: Yeah, though I could handle having a finite set of possible LRs. And I could as well extend this analysis to memory, as my calling convention stashes link registers in constant places.
[04:25:14] <selwyn> not out of choice
[04:25:31] <selwyn> i became nocturnal when i was not feeling well a few years ago
[04:25:41] <selwyn> and i did not enjoy it
[04:25:44] <gilberth> hayley: No recursion?
[04:26:02] <hayley> It seems easier than trying to kill one variable at a time to me. But, when faced with looping back from two predecessors, I need to associate the new variable with the prior variables.
[04:26:15] <hayley> Kildall doesn't use numbering, but it happens to make representation a bit nicer.
[04:26:16] <gilberth> selwyn: So it was more like that you couldn't sleep although being tired?
[04:26:28] <selwyn> well
[04:26:44] <selwyn> i had a nervous breakdown
[04:26:54] <hayley> https://calhoun.nps.edu/bitstream/handle/10945/42162/Kildall_A_unified_approach_1973.pdf page 6 and onward has an equivalence relation like {a,b|c,d} which means a = b and c = d
[04:27:00] <hayley> ):
[04:27:01] <selwyn> drinking throughout the day a lot of the time, chain smoking
[04:27:07] <selwyn> no regular sleeping pattern
[04:27:15] <hayley> Nope.
[04:27:28] <hayley> You don't need it for a byte^Wwordcode interpreter.
[04:27:55] <gilberth> selwyn: So, your brain was busy thinking and worrying all the time in circles, keeping you from getting rest?
[04:28:09] <selwyn> i suppose thats one way of putting it
[04:28:24] <selwyn> i couldn't concentrate for more than 5min at a time on maths
[04:28:47] <gilberth> selwyn: Yep, sounds familiar.
[04:28:53] <selwyn> happily, it only lasted ~6 months
[04:29:01] <selwyn> don't know if i could have handled longer
[04:29:10] <gilberth> Lucky, you.
[04:31:19] <gilberth> There is a reason I hide here at my cousin's place. It's a life-saver, I could be dead by just two or three years max otherwise.
[04:56:49] * gilberth is bored and shops for more ancient TTL parts.
[04:58:13] <edgar-rft> TTL = Time To Laugh
[04:58:19] <hayley> https://www.youtube.com/watch?v=HgNBbUiAaQo
[04:58:19] -ixelp- Of All The Things We've Made - YouTube
[04:59:12] <hayley> gilberth: The adaptations are a bit like when you reuse tags in your tagged DFAs.
[04:59:23] <hayley> *adaptations between old and new values in GVN
[05:00:00] <hayley> BTW see https://arxiv.org/pdf/1303.1880.pdf for a simple GVN thing.
[05:00:17] <gilberth> hayley: Of course it is.
[05:00:31] *** Quits: Catie (~user@user/catie) (Quit: heading home)
[05:01:28] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 265 seconds)
[05:01:41] <gilberth> The price range is insane, you find '181 for between EUR 0.50 a piece to well over EUR 10.00 a piece. But I am after the AS881, which is very rare.
[05:02:57] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[05:03:37] <hayley> Ah, so Kildall does mention value numbering on pages 11-12.
[05:03:49] <gilberth> hayley: Yes, looks pretty familiar at a first glance.
[05:11:45] <hayley> There is also that ≤ checks if two pools are the same, ignoring the actual value numbers and only watching relations, as you've also done before with SIMILAR.
[05:13:36] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:8806:e50e:8484:7f18) (Remote host closed the connection)
[05:17:29] <gilberth> How many ALUs do I need?
[05:18:48] <gilberth> I find really cheap SMD parts. Perhaps I could manufacture the CADR and become a Lisp Machine vendor. :-)
[05:19:58] <gilberth> hayley: Forget MCUs, we build real machines and get rich.
[05:21:00] * edgar-rft writes "1000 Dollar" in richt text
[05:21:34] <edgar-rft> okay, today 1000 Dollars aren't worth much anymore...
[05:22:06] <gilberth> See, you misspeeled "rich", that's the problem.
[05:23:20] <edgar-rft> oh, I see, so let's get richt instead
[05:24:25] <gilberth> What's "richt"? "-ig" missing?
[05:26:03] <edgar-rft> yes, I'm a Wicht with -ig missing
[05:27:55] <gilberth> Heh.
[05:36:40] <hayley> gilberth: Yes, a TTL lispm will be faster than a microcontroller.
[05:39:11] <gilberth> hayley: What makes you believe so? The microcode cycle time is 200ns. And it's two dozen microcode instructions per macro code instruction. That's not fast at all.
[05:39:27] <hayley> /s
[05:40:10] <gilberth> Though we have 74Fxx chip available, which are a little faster, but not much.
[05:48:17] <hayley> https://www.youtube.com/watch?v=YqVsK2rIL4I
[05:48:17] -ixelp- TheRealXboxNerd's Thomas the Tank Engine YTP Collab - YouTube
[05:57:11] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 250 seconds)
[05:57:35] *** Joins: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se)
[06:28:53] <hayley> aeth: But, w.r.t worse-is-better, "the right thing" is done for ease of reasoning and use. This cannot be said for WIB.
[06:29:26] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 265 seconds)
[06:31:07] *** Joins: aeth (~aeth@user/aeth)
[06:41:48] *** Quits: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[06:44:00] *** Joins: lisp123 (~lisp123@5.30.23.247)
[06:48:19] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[06:49:20] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[06:50:10] <dave0> maw
[06:51:55] <gilberth> Hello dave0!
[06:52:35] <hayley> maw
[06:53:29] <gilberth> dave0: I was shopping for more ALUs and try to convince hayley that we become a Lisp Machine vendor and sell new CADRs. ;)
[06:53:47] <hayley> I thought we would do Smalltalk on a RISC 2
[06:54:19] <gilberth> Smalltalk? No Flavors?
[06:54:26] <hayley> idk
[06:55:10] <dave0> maw gilberth, hayley 
[06:55:51] <gilberth> It's funny to see how they struggled. Flavors work by having the slots as special variables in a dynamic closure.
[06:58:43] <gilberth> dave0: A 16-bit barrel shifter isn't that expensive, so perhaps you could have your shift instructions in a "Pro" version of the machine, when you buy the shifting co-processor board. :-)
[06:59:09] <dave0> lol
[06:59:23] <dave0> extra hardware for a right shift :-)
[07:00:03] <gilberth> Yep. As an extra, so I could make more. And there will be an "Pro+" machine for hayley, when she also invests in the LDB board.
[07:00:33] <gilberth> So that emulation of the LC-3 will be faster.
[07:01:12] <dave0> Pro+ should have a multiply instruction
[07:01:14] <gilberth> dave0: Seriously, a right shift by just one bit is really cheap. And this is all you need for multiplication and division.
[07:01:36] <gilberth> dave0: A multiplier? In HW? In TTL? Are you crazy?
[07:01:48] <dave0> idk!
[07:01:55] <dave0> i thought it was the pro+ version
[07:02:35] <gilberth> But there could be a "serial" multiplier like with old designs, which would do the iterated shifts for you.
[07:03:52] <gilberth> The early design worked that way, if not adding serial, too. The accumulator often was a double-word to keep the result, unless the machine used FP right away.
[07:04:41] <hayley> Litmus test for Lisp implementors: is the in-memory representation of a Lisp object a "S-expression"? If they say yes, they are shit. If not, continue testing.
[07:05:36] <gilberth> I contemplated to use a shift register for my B32 accumulator and then a counter loaded with the shift/rotation count to shift serially those /n/ times under pure HW control. This wouldn't add many chips.
[07:06:22] <gilberth> hayley: ?
[07:07:06] <hayley> gilberth: It seems to be a common mistake with language tourists.
[07:07:28] <gilberth> You could keep your s-expressions as strings. JMC wrote a paragraph or two about that in his original paper.
[07:07:48] <hayley> Q: "do you consider the compiler part of the lisp system?" A: "A lot of my code wouldn't work without it, I guess"
[07:08:34] <gilberth> hayley: I don't quite get you. What do you mean by s-expressions? Aren't conses and atoms s-expressions?
[07:09:10] <hayley> Are they? Are they M-expressions too, given you can write out conses and atoms that way too?
[07:09:24] <hayley> [MS]-expressions are the character representation.
[07:09:52] <gilberth> Ok.
[07:10:17] <hayley> And, unless your implementation diddles strings, they are probably not S-expressions in memory.
[07:10:29] <gilberth> But, as I said, JMC contemplated about using a string representation. :-p
[07:11:09] <gilberth> Remember that the original LISP has no RPLACA, RPLACD, or SETQ.
[07:12:33] <hayley> JMC still mentioned structure sharing from memory.
[07:13:30] <gilberth> Sure, but the interpreter would work with a string representation, too. A cons is never modified and EQ is defined for ATOMs only.
[07:13:49] <hayley> I suppose.
[07:14:27] <gilberth> With the advent of PROG this however is mood.
[07:15:38] <gilberth> Though. Hmm. With no lexical environments, you perhaps still could survive without RPLACA and RPLACD.
[07:15:53] <gilberth> s/environments/closures/
[07:19:00] <gilberth> Now, that would be funny implementation. Keep all as strings. When clever you could at least have [start;end] representation like BASIC (sic!) so that a CAR would not cons a new string.
[07:19:54] <gilberth> c-x c-f most-silly-lisp.c RET
[07:20:04] <gilberth> Oops, wrong window.
[07:20:32] <hayley> No, just look up a guide to implementing a Lisp interpreter (with no QUOTE, CAR, CDR, CONS, etc) in Rust.
[07:21:11] <hayley> Here's the first one on duckduckgo: https://stopa.io/post/222
[07:21:12] -ixelp- Risp (in (Rust) (Lisp))
[07:21:29] <gilberth> In Rust? And no QUOTE? No CAR? No CDR? No CONS? And that is a Lisp?
[07:21:36] <hayley> Apparently.
[07:21:56] <gilberth> Who says that? Can I write a meta-circular interpreter in it?
[07:22:14] <hayley> Worse, our favourite book was ported: https://dev.to/deciduously/rust-your-own-lisp-50an
[07:22:16] -ixelp- Rust Your Own Lisp - DEV Community
[07:22:19] <hayley> gilberth: idk, some Clojure guru said so.
[07:23:34] <gilberth> "List(Vec<RispExp>)" I quit reading further.
[07:24:33] <gilberth> hayley: And that is an authority? A Clo_j_ure guru? That is a "s" or "z" misstyped.
[07:24:50] <hayley> To some.
[07:25:59] <gilberth> Is that article you posted as funny as our favorite book? I have a bad day, am in bad mood and could need something to lighten my mood.
[07:26:05] <hayley> Yes.
[07:26:15] * gilberth reads on.
[07:26:53] <gilberth> hayley: BTW. People should stop abusing the label "Lisp". Can't we register a trademark, so that we could sue?
[07:27:22] * hayley notes that all the stuff from Garry's Mod she GCed is back again on the SSD. Time to get another larger SSD? But she just got this one in early 2020, which is too new.
[07:27:58] <hayley> gilberth: I prefer humiliation rather than trademarking. Hence the review I wrote.
[07:31:45] <hayley> The technique also works for people claiming things you can't trademark. I have a diagram which is a spoof of one by some "humane technology foundation", which is purely bogus. The diagram is called "Pyramids of inhumane technology" and it's more a joke on why we need to aim higher than "human".
[07:37:07] <gilberth> Is the Lisp interpreter of Peter Norvig sound?
[07:37:26] <hayley> It's nothing interesting, but it is okay. Except that there is a shitty parser-lexer thing.
[07:38:05] <hayley> He does some weird parsing hack where every "(" is replaced with " ( " so that the tokenizer just splits on spaces. Makes you wonder why there's the lexer and parser.
[07:38:30] *** Joins: tophullyte (~tophullyt@162.213.177.125)
[07:39:37] <hayley> And I guess symbols are not interned, either.
[07:40:30] <gilberth> Lady, I am still reading. I don't read that fast. Especially not when in pain.
[07:42:59] *** Joins: phossil (tophullyte@gateway/vpn/protonvpn/tophullyte)
[07:43:58] <gilberth> "Note: I depart slightly from Norvig’s implementation, by returning the “next” slice. This lets us recurse and parse nested lists, without mutating the original list." What? A reader does not need to mutate. What should it mutate?
[07:44:51] <hayley> It consumes the token list that way.
[07:45:05] <hayley> Because neither of them can afford...the simpler method of just reading the fucking stream in one pass.
[07:45:34] <gilberth> That would be too obvious, I guess.
[07:45:48] *** Quits: tophullyte (~tophullyt@162.213.177.125) (Ping timeout: 265 seconds)
[07:53:15] <gilberth> This article uses too many exclamation marks! If somebody need to add those after every sentence, he is unsure! And he hopes by putting those punctuation there to give more weight to what they say! This is short of SHOUTING! If what you say has value, you don't need exclamation marks!!! BAM!
[07:53:40] <hayley> I have mentioned this before!
[07:53:53] <gilberth> You did????
[07:54:19] <hayley> "Another dumb question: am I imagining it or do writeups I dislike seem to have more exclamation marks? Like...it's so boring and such a dumb idea that the only way to excite your reader is to do a funny voice! Like! This! [...] gilberth: BYOL suffers from an exclamation mark overdose frequently. The other example is most of all Rust documentation. beach sort of taught me that either your concluding remarks are obviously good, or you need to
[07:54:19] <hayley> spell it out. If the latter, you explained it poorly."
[07:55:22] <gilberth> Yep. So we agree. Good!!!!!eleven1111
[07:55:37] <hayley> "I don't know if READ should return a Lisp value or not, some people said not to." "Who did you ask?" "Rust discord server" "There's ya problem."
[07:56:33] <gilberth> Where is that from? I am at the "if" part.
[07:57:04] <hayley> Where is what from?
[07:57:31] <gilberth> What you just quoted.
[07:58:27] <hayley> It was from #commonlisp actually.
[07:58:45] <gilberth> "viola", "bam", I wonder which term of exclamation nature is next.
[07:59:05] <gilberth> hayley: A dialog happened for real?
[07:59:06] <hayley> IIRC one is graphical, but no spoilers.
[07:59:11] <hayley> Yes, check the logs.
[07:59:29] <hayley> https://irclog.tymoon.eu/libera/%23commonlisp?around=1637209424#1637209424
[08:00:04] <gilberth> Later, I still need to finish that Risp article. And btw isn't that rather a Vecp?
[08:00:24] <hayley> Yes.
[08:01:13] <gilberth> Indeed, no symbols. That's just strings, right?
[08:02:02] <hayley> Yes.
[08:02:14] <hayley> https://www.reddit.com/r/lisp/comments/bk551d/risp_lisp_in_rust/emh32qg/?context=3 POV: you write Clojure
[08:02:16] -ixelp- Risp (Lisp (in (Rust))) : lisp
[08:02:21] <gilberth> "let form_idx = if b { 1 } else { 2 };" That's creative.
[08:02:45] <gilberth> In the implementation of "if".
[08:04:00] <gilberth> "Aand bam, [...]" Say, milady, how old is that guy?
[08:05:14] <gilberth> No closures either?
[08:05:23] <hayley> IIRC there are closures later.
[08:05:49] <hayley> It's only in language...2.0? That's not very semver of you.
[08:10:02] <gilberth> hayley: Didn't work. I am still in bad mood. I should ask for refund for this obviously already used day they gave me.
[08:10:14] <hayley> Oh dear.
[08:10:59] <hayley> There is the Reddit thread, in which merely having lists at compile time is considered Lisp, and that other link on the port of our favourite book.
[08:11:05] <gilberth> Tomorrow I'll get a new day and it will be way better. I guess, I'll crash "early" tonight.
[08:12:27] * hayley still has a load of like 50 somehow from Garry's Mod
[08:17:18] <gilberth> What is that Garry's Mod? And who is Garry?
[08:20:13] <hayley> A video game which is basically HL2 but you can spawn in stuff yourself. And idk who Garry is.
[08:20:22] <hayley> But if I had to guess, he made the game.
[08:21:10] <gilberth> Any new levels?
[08:21:23] <hayley> Yeah, a few.
[08:21:45] <gilberth> And I would need 50GB disk space?
[08:21:50] <hayley> .oO(Apparently if you can embed lists via lambda calculus through your language, you have Lisp. By Church-Turing thus every language is Lisp.)
[08:21:59] <hayley> For all the shit some servers download, yes.
[08:22:25] <gilberth> I can play that online only?
[08:23:26] <hayley> No, but I like to do that.
[08:24:03] *** Quits: semz (~none@user/semz) (Ping timeout: 268 seconds)
[08:24:22] <gilberth> hayley: Well, the fun part with pure lambda calculus is how easily you get pretty far at having sth very much like Lisp. With lazy evaluation you even don't need IF^WCOND. A friend and I once did that for fun.
[08:24:54] <hayley> gilberth: Did you catch that, while the rest of the interpreter copies like crazy, only closure bodies and lambda lists are reference counted?
[08:25:26] <gilberth> No, I didn't.
[08:26:00] <gilberth> But I don't speak a single syllable of Rust.
[08:26:13] <hayley> No explanation as to why, either.
[08:26:51] <hayley> "#[derive(Clone)]" before the enum or struct or whatever means that a method to copy is generated. Rc<blah> means that blah is wrapped with a refcount.
[08:27:00] <gilberth> I mean, that would have been my next question. How to have lexical closures without a GC?
[08:27:33] <gilberth> hayley: Ah ok. I'll skim the code again.
[08:27:48] <hayley> But with no mutation, you can copy and get away with it.
[08:28:10] <gilberth> Yes, but once SETQ is there, you can't anymore.
[08:28:41] <gilberth> hayley: You need to explicitly ask for refcounts in Rust?
[08:28:49] <hayley> Yes.
[08:29:00] <gilberth> You're kidding me.
[08:29:13] <hayley> Else you get the intersection of stack allocation and linear types that everyone complains about.
[08:29:28] <gilberth> I see.
[08:30:13] <gilberth> And that is the best invention since sliced bread?
[08:30:19] <hayley> Apparently.
[08:31:06] <gilberth> Ok. We switch careers then. You grow vegetables, I'll mix cocktails at night.
[08:31:51] <hayley> You can get just linear types and heap allocation, or stack allocation and value copying, but linear AND stack is default. Which is quite strange.
[08:36:56] *** Joins: semz (~none@user/semz)
[08:38:41] <moon-child> 'Hey, you know, MS-DOS has a tree-shaped filesystem that accepts slashes as a path separator, with .. meaning the parent directory and . current.  There is a cd command in cmd.exe, and piping between processes can be done with |.  Hey, MS-DOS is a Unix!'
[08:39:43] <gilberth> MS-DOS wanted to be one.
[08:46:30] <GreaseMonkey> some of its failures to be a UNIX was due to IBM insisting on certain warts that haunt us to this day
[08:46:37] <GreaseMonkey> e.g. path separators and command switch flags
[08:51:26] <moon-child> do those matter?  I don't think those are essential properties of a unix
[08:52:25] <moon-child> vs e.g. processes, fork(), generalised file descriptors
[08:52:29] <hayley> You don't need multi tasking for Unix, just use a resident in memory thingy
[08:52:48] <moon-child> ...and the terrible, terrible things those lead you to, like ioctl and shared memory
[08:53:06] <moon-child> (in dos, all memory is shared memory!)
[09:05:56] <GreaseMonkey> DOS had support for UMA before GPUs did
[09:19:57] <hayley> One of the assessors spotted that half my group did not write development logs for the last assignment. Uh-oh.
[09:20:21] <hayley> If they are clever, they could fudge a commit to say it was written at the right time, and say they forgot to push.
[09:22:07] * hayley still got full marks while writing "Fuck that." in the log after describing how gathering all of the specification seems to work.
[09:38:08] *** Quits: bcasiello__ (~bcasiello@066-189-087-112.biz.spectrum.com) (Ping timeout: 256 seconds)
[09:41:18] <gilberth> MS-DOS always accepted '/' as a path separator. And the post-FCB (DOS 2 IIRC) BDOS calls were file descriptor based. It's only that '/' was the default character for command line options. And that character was configurable.
[09:43:15] <gilberth> And btw MS-DOS has the usual open, read, write, close API, and there even is ioctl.
[09:44:20] <gilberth> I once read, that Microsoft somehow hoped to sell XENIX instead.
[09:46:35] <gilberth> They could have had multitasking, if they wished. I once used a clone called PC-MOS IIRC, which offered proper multitasking for DOS. You could even attach serial terminals to a machine.
[09:47:20] <sham1> Sooo proper processes for DOS. That sounds just weird
[09:48:24] <gilberth> It is. But DOS actually has a concept of processes. It's only that fork() is missing.
[09:49:05] <gilberth> When you read the source you find references to UNIX and at times some regret that DOS isn't quite there yet.
[09:51:44] <dave0> at the time of msdos i had an amiga and i scoffed at dos
[09:52:11] <dave0> amiga had multitasking, case preserving filenames, graphics, gui
[09:52:29] <gilberth> I had a copy of XENIX pretty early.
[09:52:43] <dave0> dos was single tasking, 8.3 monocase filenames, text only
[09:52:52] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Ping timeout: 256 seconds)
[09:53:27] <gilberth> Well, UNIX also has only 14 char filenames.
[09:53:30] <dave0> but dos and pc's had ibm behing them
[09:53:35] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[09:53:57] <dave0> gilberth: amiga had 31 chars
[09:54:34] <gilberth> I believe the fact that there were clones also contributed to the victory of the PC.
[09:54:37] <dave0> it did waste space though.. a file took an entire disk block
[09:54:47] <moon-child> c has 5-char identifiers!
[09:54:49] <moon-child> *had
[09:55:06] <dave0> moon-child: yuck
[09:55:14] <gilberth> As the fastest machines weren't IBM machines.
[09:55:49] <dave0> gilberth: ah do you mean "pc compatible" ?
[09:56:14] <gilberth> Yep.
[09:56:50] <dave0> competition
[09:57:00] <dave0> somethng microsoft doesnt like :-p
[09:58:43] <gilberth> Well, MS hadn't real competition.
[09:59:05] <sham1> Well there was IBM
[09:59:13] <sham1> Even though they also worked together
[09:59:35] <gilberth> IBM sold hardware and MS sold software. Where is the competition?
[09:59:52] <sham1> OS/2
[10:00:15] <gilberth> A joined afford and a bit later than MS-DOS.
[10:01:32] <dave0> i am some way through the anitrust lawsuit of microsoft some time in the 90's
[10:01:45] <dave0> there was DR-DOS which would compete directly with MS-DOS
[10:02:14] <dave0> and microsoft used their monopoly position to destroy DR-DOS, even though DR-DOS was (according to microsoft itself!) better than MS-DOS
[10:02:59] <gilberth> Yes, they some managed to make Windows not working with DR-DOS.
[10:03:12] <sham1> "Even though" wouldn't that be exactly the reason?
[10:05:47] <dave0> gilberth: it was more subtle than that... according to the court docs, windows would put up a message box that said "you are not using msdos, windows is not tested with that" so people might think that bugs in windows is because you're not running msdos
[10:06:10] <dave0> which was completely false
[10:06:18] <dave0> but it put doubt in the users mind
[10:08:00] <dave0> they also illegally bundled windows and msdos... the computer manufacturers would pay more for just windows, and less for msdos+windows ... so if a computer manufacturer wanted to bundle windows and drdos, it would cost more for just windows PLUS they'd have to pay for drdos too
[10:08:29] <dave0> i think the numbers were $30 for windows-only, and $15 for msdos+windows
[10:08:55] <dave0> it's a long document
[10:09:17] <dave0> and i've already downloaded the court findings on netscape.. oy! that's gonna be a long read too
[10:14:48] *** Joins: tophullyte (~tophullyt@162.213.177.125)
[10:15:31] <sham1> Netscape eh
[10:15:43] <sham1> I hope you're reading it with Firefox
[10:16:06] *** Quits: phossil (tophullyte@gateway/vpn/protonvpn/tophullyte) (Ping timeout: 256 seconds)
[10:19:29] *** Joins: phossil (tophullyte@gateway/vpn/protonvpn/tophullyte)
[10:22:20] *** Quits: tophullyte (~tophullyt@162.213.177.125) (Ping timeout: 256 seconds)
[10:23:26] <dave0> haha
[10:31:14] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[10:32:19] *** Joins: tophullyte (~tophullyt@162.213.177.125)
[10:34:14] *** Quits: phossil (tophullyte@gateway/vpn/protonvpn/tophullyte) (Ping timeout: 256 seconds)
[10:35:13] *** Joins: phossil (tophullyte@gateway/vpn/protonvpn/tophullyte)
[10:36:41] *** Quits: tophullyte (~tophullyt@162.213.177.125) (Ping timeout: 250 seconds)
[10:44:58] <pjb> gilberth: also, the default character for command line options was / because some idiot couldn't write his - horizontal, and another idiot couldn't understand that and translated them to /.
[10:45:25] <moon-child> ha!
[10:57:23] *** Joins: ln43 (~ln43@user/ln43)
[10:59:14] *** Quits: ln43 (~ln43@user/ln43) (Client Quit)
[11:39:57] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 250 seconds)
[11:41:40] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 265 seconds)
[11:44:00] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[12:01:33] *** Joins: notzmv (~zmv@user/notzmv)
[12:55:28] <selwyn> gpg4win claims to 'bring crypto to my desktop'
[13:06:58] <selwyn> tfw still no crypto fortune
[13:07:52] <hayley> (ql:quickload :ironclad)
[13:10:13] <sham1> Crypto fortune should just return a random name of a cryptocurrency
[13:10:26] <sham1> A name of a random cryptocurrency even
[13:11:41] <hayley> Ironclad NFT generator 2k21
[13:13:39] <sham1> > 2k21
[13:13:53] <hayley> 2k22
[13:19:15] <selwyn> https://www.youtube.com/watch?v=Pt4mwy9OBNA
[13:19:15] -ixelp- Booting - YouTube
[13:22:07] <hayley> selwyn: quantum NFTs when
[13:22:13] <hayley> get all the buzzwords in
[13:22:24] <selwyn> lot of people ask me about mining crypto with a qc
[13:22:32] <selwyn> irritatingly, it is probably possible somehow
[13:22:51] <hayley> Classical computers are fine at crypto mining.
[13:23:01] <selwyn> well, yes that
[13:23:28] <selwyn> its based around computing hashes, right
[13:23:47] <hayley> Yes.
[14:49:29] <shka> "QC makes possible" is like "Russia denies"
[14:52:57] <semz> breaking the cryptography behind bitcoin et al is probably a better use of QCs than mining with them, lol
[14:54:06] <selwyn> https://en.wikipedia.org/wiki/VVER is this design any good
[14:54:55] <selwyn> seems they actually do have a strong export market
[15:00:29] <shka> selwyn: never heard out of it
[15:00:34] <shka> *off it
[15:00:39] <shka> *about it
[15:03:18] <shka> selwyn: sounds like a bog standard heavy water reactor
[15:08:49] <pl> GreaseMonkey: path separators and option syntax weren't IBM insistence
[15:09:10] <sham1> IIRC it was already CP/M
[15:09:17] <pl> but due to DOS 1.0 being very CP/M clone (if clean-room) including CP/M API compatibility
[15:09:41] <pl> DOS 2.0 by introducing features from Unix (which Microsoft was also selling for PC) killed CP/M
[15:16:55] <selwyn> christ google is terrible
[15:17:09] <selwyn> does anyone know how to check if gccemacs is enabled from inside emacs?
[15:21:15] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[15:24:01] <hayley> Try to compile something and guesstimate if the compile time would allow for aggressive optimisation and native code generation.
[15:24:32] <selwyn> i mean, the startup time is kind of slow
[15:24:37] <selwyn> but perhaps that is because of windoze
[15:24:47] <hayley> I wonder if any JITs run concurrently, by stealing another core while the application is still running interpreted.
[15:27:44] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[15:37:53] *** Joins: phantomics (~phantomic@97-118-231-120.hlrn.qwest.net)
[15:42:55] <selwyn> gccemacs/clasp?
[15:43:03] <selwyn> maybe not clasp
[16:17:38] *** Quits: X-Scale (~ARM@83.223.235.65) (Ping timeout: 256 seconds)
[16:18:10] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[16:19:15] *** X-Scale` is now known as X-Scale
[16:31:14] *** Joins: random-nick (~random-ni@87.116.165.220)
[16:35:12] <dave0> nite all
[16:36:25] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[16:36:50] <ck_> what is a gccemacs
[16:42:20] <selwyn> an emacs that uses gcc to jit compile
[16:46:45] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 250 seconds)
[16:47:06] <selwyn> the compiler often spits out warnings while i am doing other things
[16:47:40] <selwyn> gilberth: worth updating for?
[16:48:25] *** Joins: aeth (~aeth@user/aeth)
[16:50:12] <selwyn> the els paper doesn't mention running it on another core though
[16:54:22] <pl> selwyn: if you have native compilation, you will have the function NATIVE-COMPILE-ASYNC
[16:54:46] <pl> also, you might end up wanting to AOT compile everything
[17:04:43] <pl> for which I recommend running (native-compile-async "path" 'recursive)
[17:05:06] <selwyn> seems i don't have it on windows
[17:06:27] <pl> I do it with Emacs (with pgtk, as much as it pains me) under WSL2
[17:06:45] <pl> Emacs under wayland without pgtk is... painful
[17:07:01] <pl> and WSL2 with WSLg does Wayland
[17:07:19] <selwyn> i spent so much time getting spacemacs to work with this emacs
[17:07:32] <selwyn> now everything works, except for native comp
[17:07:40] <selwyn> can't bear to go through this again
[17:08:46] <shka> windows pains?
[17:09:09] <selwyn> basically
[17:09:52] <selwyn> the thing is that it is not difficult to get things working 80-90% on windows, if you use msys2 and simply act like you are on linux
[17:11:11] <selwyn> but if you want a 100% fully featured emacs that can run without msys2, then it takes a lot more work
[17:11:27] <selwyn> i feel that this has not really been worth it lol
[17:15:19] <pl> I think gccemacs is a bit problematic, normal emacs worked pretty easy for me on windows (biggest issue was one time when emacs was installed by admin)
[17:16:30] <sham1> Emacs on Windows is painful mostly because of Windows
[17:17:09] <sham1> A lot of packages expect Linux or, god forbid, MacOS
[17:18:12] <selwyn> in the end i had to install gnupg for windows
[17:18:24] <selwyn> but that sorted everything out, surprisingly
[17:19:41] <sham1> I just do things via wsl
[17:49:25] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[17:58:22] <gilberth> Good morning #lispcafe!
[18:15:54] <sham1> Good start of an evening
[18:25:16] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c287:4a0:25c3:17d)
[18:34:12] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 256 seconds)
[18:35:29] *** Joins: johnjay (~pi@192.142.100.50)
[18:36:59] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[18:38:28] *** Joins: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se)
[18:41:34] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[18:42:08] *** Quits: phossil (tophullyte@gateway/vpn/protonvpn/tophullyte) (Ping timeout: 256 seconds)
[18:43:24] *** Joins: aeth (~aeth@user/aeth)
[18:45:11] <edgar-rft> I just take it as an unfounded theory.
[18:53:38] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c287:4a0:25c3:17d) (Remote host closed the connection)
[18:53:56] *** Joins: Inline (~Inline@2a02:908:1252:7a80:e2f7:1684:ac3:796d)
[19:09:41] *** Quits: Inline (~Inline@2a02:908:1252:7a80:e2f7:1684:ac3:796d) (Quit: Leaving)
[19:34:15] *** Joins: treflip (~user@95.79.32.99)
[19:50:53] *** Joins: Inline (~Inline@2a02:908:1252:7a80:6adf:f25e:1e5f:74e1)
[19:54:06] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (K-Lined)
[19:54:06] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (K-Lined)
[19:54:08] *** Quits: hayley (~theemacss@user/hayley) (K-Lined)
[19:54:09] *** Quits: sp (~sp@user/susam) (K-Lined)
[19:54:11] *** Quits: sepanko (~sepanko@user/sepanko) (K-Lined)
[19:54:15] *** Quits: zbrown[m] (~zbrownm]@2001:470:69fc:105::1:33db) (K-Lined)
[20:04:55] *** Joins: sepanko (~sepanko@user/sepanko)
[20:05:28] *** Quits: JSharp (sid4580@lymington.irccloud.com) (Ping timeout: 265 seconds)
[20:06:51] *** Quits: elflng (~elflng@5.28.137.182) (Ping timeout: 244 seconds)
[20:07:39] *** Joins: elflng (~elflng@5.28.137.182)
[20:08:15] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[20:08:15] *** Joins: sp (~sp@user/susam)
[20:08:15] *** Joins: zbrown[m] (~zbrownm]@2001:470:69fc:105::1:33db)
[20:08:15] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[20:10:04] *** Quits: sunarch (uid526836@user/sunarch) (Read error: Connection reset by peer)
[20:10:04] *** Quits: pl (sid98063@helmsley.irccloud.com) (Read error: Connection reset by peer)
[20:11:50] *** Joins: sunarch (uid526836@user/sunarch)
[20:14:47] *** Joins: pl (sid98063@helmsley.irccloud.com)
[20:18:52] *** Joins: JSharp (sid4580@lymington.irccloud.com)
[20:30:00] *** Quits: sepanko (~sepanko@user/sepanko) (Quit: Client limit exceeded: 20000)
[20:30:39] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Quit: Client limit exceeded: 20000)
[20:31:47] *** Quits: zbrown[m] (~zbrownm]@2001:470:69fc:105::1:33db) (Quit: Client limit exceeded: 20000)
[20:34:57] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (Quit: Client limit exceeded: 20000)
[20:40:27] *** Joins: Catie (~user@user/catie)
[20:54:10] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 256 seconds)
[20:55:58] <shka> heh, vellum+cl-ds is surprisingly useful when dealing with shitty data 
[20:55:59] *** Joins: sepanko (~sepanko@user/sepanko)
[20:55:59] <shka> https://gist.github.com/sirherrbatka/62bc178f98501c0a44f555bfcda22f87
[20:55:59] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[20:56:00] *** Joins: zbrown[m] (~zbrownm]@2001:470:69fc:105::1:33db)
[20:56:00] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[20:56:00] -ixelp- gist:62bc178f98501c0a44f555bfcda22f87 · GitHub
[20:57:03] <shka> this code splits json into semi-acceptable SQL tables 
[21:05:42] *** Joins: bcasiello__ (~bcasiello@066-189-087-112.biz.spectrum.com)
[21:43:38] <pl> Do you have example input? 
[21:44:41] <shka> pl: it is horrific, you sure you wanna see it?
[21:44:59] <pl> Yes 
[21:49:18] <shka> pl: you have been warned 
[21:49:20] <shka> https://i.imgur.com/nGD3KMn.png
[21:50:17] <shka> a huge json + some 'normal' sql columns
[21:50:18] <pl> Ehhh, seen worse 
[21:50:47] <shka> well, at least naming convention is consistent 
[21:51:00] <shka> so i can use regexs to extra the core name
[21:51:35] <shka> and then it is simply about multiplexing single json into multiple rows, grouping rows by the variable name, and aggregating to table 
[21:51:46] <shka> which can be done swiftly with vellum
[21:52:04] <selwyn> return to sql
[21:52:44] <shka> don't shit talk sql
[21:53:06] <shka> there are good reasons why it has become so popular
[21:53:23] <shka> *became
[21:53:30] <shka> and remains popular to this day
[21:53:54] <selwyn> i like sql
[21:53:56] <shka> the relational data model is just widely applicable
[21:54:26] <shka> but stuff like that is much easier to do outside of the sql
[21:55:14] <shka> honestly, SQL should have been lisp
[21:56:46] <shka> just DSL embedded into lisp, embedded into database
[21:57:00] <shka> ... me thinks about inserting ECL into postgres again
[21:57:25] <shka> with a nice DSL
[21:57:30] <shka> it would be a killer, i tell ya
[21:58:18] <ck_> "it has become" was the correct phrasing. left outer join grammar
[21:58:47] <shka> ck_: thanks, somehow my dyslexia is getting worse
[21:59:00] <shka> i don't trust myself at all
[21:59:08] <selwyn> sql seems like it should have become a 'low code language' for business people and secretaries to use, but didn't
[21:59:13] <selwyn> like a successful cobol
[21:59:28] <shka> it even has cobol syntax
[21:59:33] <selwyn> yeah
[22:01:01] <selwyn> i seem to make more and more grammar mistakes in typing, which is rather depressing
[22:01:17] <selwyn> like wtf am i supposed to do
[22:01:55] <selwyn> anyway, i like coming up with a well crafted sql query
[22:04:02] <pl> shka: have you seen the old-style SQL interaction methods for various languages?
[22:06:09] <pl> selwyn: it remains somewhat common for business people to learn it, still
[22:06:16] <selwyn> oh
[22:08:19] <shka> pl: no
[22:09:13] <shka> i know how C interface for postgres looks like... i would want to tackle it with ECL someday
[22:10:08] <moon-child> make a relational db in lisp!
[22:11:47] <shka> moon-child: postgres was, initially
[22:17:50] <pl> shka: SQL inline in C/COBOL/etc taken by preprocessor and turned into appropriate calls 
[22:18:06] <shka> pl: yeah, we can do that in lisp, but well, better
[22:18:09] <pl> Postgres still has this as an option 
[22:18:19] <pl> Oracle did a lot 
[22:18:28] <pl> I think there's even a standard 
[22:18:47] <selwyn> dune used 18 tons of sand and dust in production
[22:20:31] <shka> pl: well, and ECL running directly on the postgres, with a efficient abstraction layer to database?
[22:20:42] <shka> this would be really cool
[22:21:22] <pl> Do you mean as postgres-internal language? 
[22:21:35] <shka> yup
[22:22:22] <moon-child> hmm, I doubt it.  Lisp would be largely opaque; the query optimizer doesn't know anything about it
[22:22:54] <shka> moon-child: query optimizer works on constructed queries 
[22:23:18] <shka> i think that it does not care how query is constructed
[22:23:43] <moon-child> sure.  I was imagining actually running lisp code as part of the query
[22:23:50] <shka> so yes, PL/CommonLisp would be the stuff imho
[22:24:10] <moon-child> maybe just me, but I don't find 'construct query strings and send them through shmem instead of over the network' a super compelling use case
[22:24:45] <shka> it makes a lot of sense if you think about it
[22:24:55] <pl> It's when you want the query to call the code for something complex 
[22:25:06] <moon-child> pl: sure
[22:25:35] <shka> or, something strictly impossible to do in SQL
[22:26:17] <shka> you could also have stuff like hyperloglog/minhash implemented in database 
[22:26:23] <shka> where it would be much more useful
[22:27:36] <shka> i think that you can also have custom aggregation functions this way
[22:29:03] <shka> i would eventually have part of vellum running as procedural language in postgres
[22:29:31] <pl> Insane people at Citus (I think) implemented paxos in Pl/PgSQL, creating tables synchronized between multiple servers in master/master way 
[22:30:08] *** Quits: treflip (~user@95.79.32.99) (Quit: good night)
[22:30:15] <pl> I think by using functions on triggers 
[22:38:11] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 264 seconds)
[22:40:51] *** Joins: X-Scale (~ARM@46.50.7.119)
[22:44:23] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Quit: later)
[22:44:50] <shka> lol that trailer https://www.youtube.com/watch?v=oZCoCR1A0DA
[22:44:51] -ixelp- Let the Keyboards Hit the Floor trailer - YouTube
[22:45:11] <shka> ZX Spectrum keyboard :D
[22:47:36] *** Joins: tophullyte (~tophullyt@162.213.177.125)
[22:47:40] <selwyn> it looks terrible to use
[22:47:56] <selwyn> imagine using emacs on that :)
[22:49:08] <shka> ZX spectrum keyboard was utter shit
[22:49:39] <shka> Commodore wasn't great either, but in comparison it was like free wifi with tits 
[22:50:01] <selwyn> i like the bbc micro keyboard
[22:50:11] <shka> i think that among home computers zx spectrum could be the worst
[22:50:21] <shka> excluding those with just membranes instead of real keyboards
[22:51:29] *** Joins: phossil (tophullyte@gateway/vpn/protonvpn/tophullyte)
[22:52:59] <shka> selwyn: i mean, it had good keycaps, but apparently it was using wide arrange of switches
[22:53:06] <shka> including cherry MY
[22:53:12] <shka> and fuck cherry MY
[22:54:02] *** Quits: tophullyte (~tophullyt@162.213.177.125) (Ping timeout: 240 seconds)
[22:57:22] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 265 seconds)
[22:58:50] *** Joins: aeth (~aeth@user/aeth)
[23:13:35] <sham1> Never even heard of Cherry MY
[23:17:43] *** Alfr is now known as Guest8572
[23:17:43] *** Quits: Guest8572 (~Alfr@user/alfr) (Killed (calcium.libera.chat (Nickname regained by services)))
[23:17:47] *** Joins: Alfr (~Alfr@user/alfr)
[23:22:41] <shka> sham1: no longer in the production i think, but cherry G81 used to come with those
[23:23:40] <shka> binds as hell, heavy, and very rough 
[23:24:55] <shka> but old G81 had really nice double shot keycaps
