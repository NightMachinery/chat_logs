[00:01:45] <AliceMeows> https://godbolt.org/z/nqKGPPera how about this scenario then? s is moved to z but its already in unspecified state
[00:03:23] <ville> it's still in a valid state
[00:03:35] <ville> so i interpret that as not ub
[00:03:48] <AliceMeows> How stupid
[00:04:10] <Eelis> what would have been the non-stupid design in your opinion?
[00:04:21] <ville> well it has to be valid so it can be at least destructed
[00:04:39] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[00:04:40] <AliceMeows> Not defining it as 'unspecified state' as it currently is in the standard
[00:04:50] <Eelis> what should it be instead?
[00:05:18] <ville> AliceMeows: you can get guarantees for specific things. that's just the catch-all clause
[00:05:21] <Eelis> and also, why do you even care about the value of moved-from objects? you're not supposed to care
[00:05:48] *** Quits: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be) (Ping timeout: 252 seconds)
[00:06:10] <ville> i've not looked at the most recent iteration of the standard how they define these things for various types
[00:06:11] <Eelis> if you think there's a problem with moved-from objects having unspecified value, it suggests you're not thinking correctly about move semantics
[00:06:37] <ville> Eelis: well they could have been a bit more explicit about it
[00:06:53] <AliceMeows> I do know what they are and how they work it was just some specifics I wasn't sure about
[00:06:58] <Eelis> the standard is very explicit. http://eel.is/c++draft/string.cons#3
[00:07:09] <Eelis> "str is left in a valid but unspecified state"
[00:07:26] <ville> Eelis: not it's not very explicit at all.
[00:07:32] <Eelis> o_O
[00:07:43] <ville> it has a ue "unspecified"-sized hole in the definition
[00:07:46] <ville> a huge
[00:07:54] <AliceMeows> Absolutely
[00:07:58] <Eelis> why is that a hole? the whole point is to not specify it
[00:08:06] <Eelis> that's why it uses the word "unspecified"
[00:08:14] *** Joins: hfsoulz (~hfsoulz@user/hfsoulz)
[00:08:20] <Eelis> the value of moved-from objects *should* be unspecified
[00:08:24] <ville> Eelis: yes it is an option to not specify it. re-read what i said. they _could_ have been more explicit
[00:08:32] <Eelis> more explicit about what?
[00:08:33] <AliceMeows> In other words it means "god knows in what state it really is"
[00:08:38] <ville> Eelis: what the state is
[00:08:40] <ville> sheesh
[00:08:53] <Eelis> but it would be stupid to specify the value of moved-from objects
[00:09:04] <Eelis> that would be a needless pessimization
[00:09:09] <Eelis> C++ is supposed to be efficient :)
[00:09:37] <Eelis> leaving it unspecified allows an implementation to do the most efficient thing
[00:09:51] *** Joins: proller (~p@80.240.216.69)
[00:09:59] <Eelis> for example, for std::string implementations that have SSO, the moved-from object could occasionally simply retain its value
[00:10:13] <KAHR-Alpha> and if you specify it, wouldn't it turn into std::swap at this point?
[00:10:28] *** Quits: senoraraton (~senorarat@148-64-109-17.PUBLIC.monkeybrains.net) (Ping timeout: 272 seconds)
[00:10:53] <ville> yes well aware of the costs it would entail. again not what was being argued, but oh well
[00:11:00] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[00:11:39] <Eelis> if you concede that there would be a cost to specifying the value of moved-from objects, then the only motive for paying that cost would be that you want to use the value of moved-from objects. that's a mistake
[00:11:56] <Eelis> you're not supposed to use moved-from objects for anything other than destruction and reassignment
[00:12:00] <ville> and as far as standard library goes at least i never expect to get a performant implementation of anything from it
[00:12:28] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu) (Quit: Leaving)
[00:12:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[00:13:31] *** Joins: artok (~azo@mobile-access-bcee29-102.dhcp.inet.fi)
[00:13:32] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[00:13:50] *** Quits: sobkas (~sobkas@95.175.17.217) (Quit: sobkas)
[00:17:13] *** Quits: sh00p (~z@89-253-71-70.customers.ownit.se) (Ping timeout: 250 seconds)
[00:17:22] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[00:17:38] *** Joins: Mat_42 (~mat_42@2a02:21b0:644f:d96f:602c:3e29:2572:190c)
[00:21:17] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[00:25:17] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 240 seconds)
[00:31:22] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[00:34:12] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 240 seconds)
[00:37:31] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[00:39:33] *** Quits: rond_ (~rond_@90.254.208.190) (Quit: Client closed)
[00:39:54] *** Quits: Mat_42 (~mat_42@2a02:21b0:644f:d96f:602c:3e29:2572:190c) (Remote host closed the connection)
[00:40:27] *** Joins: Mat_42 (~mat_42@2a02:21b0:644f:d96f:602c:3e29:2572:190c)
[00:44:43] *** Quits: Mat_42 (~mat_42@2a02:21b0:644f:d96f:602c:3e29:2572:190c) (Ping timeout: 250 seconds)
[00:46:55] *** Joins: Mat_42 (~mat_42@2a02:21b0:644f:d96f:602c:3e29:2572:190c)
[00:46:56] *** Quits: magla (~gelignite@d536552c.access.ecotel.net) (Quit: Stay safe!)
[00:48:31] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[00:49:33] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[00:49:47] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[00:51:23] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[00:55:33] *** Joins: wakeup (~wakeup@user/wakeup)
[00:55:39] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[00:57:55] *** Quits: zer0bitz_ (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Ping timeout: 256 seconds)
[00:59:22] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[01:06:13] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[01:06:24] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Remote host closed the connection)
[01:15:29] *** Joins: sbrothy (~sbrothy@192038132086.mbb.telenor.dk)
[01:16:37] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 240 seconds)
[01:19:23] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[01:27:03] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[01:30:02] *** Joins: proller (~p@2a02:6b8:b081:b503::1:2e)
[01:32:52] *** Joins: Tangent-Man (~Tang3nt-M@92.40.178.106.threembb.co.uk)
[01:38:03] <Batzy> is there a way to "read an array 1 byte at a time"
[01:38:13] <Batzy> im trying to implement an FNV hash on an array of uint64s
[01:39:50] *** Quits: jsbach (~jsbach@2a01:c23:60ca:b800:c6e7:dc2f:74ea:1ca9) (Ping timeout: 252 seconds)
[01:43:53] <Batzy> rather: does anyone know what the fastest not cryptographic hashing function would be for an array of uint64s?
[01:44:29] <AliceMeows> Batzy: arr[i]?
[01:44:35] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 240 seconds)
[01:44:39] <Batzy> AliceMeows: what?
[01:44:57] <Batzy> AliceMeows: that's 1 word at a time
[01:45:11] <Batzy> arr[i] would be a 64 bit int, not a byte
[01:45:12] <AliceMeows> Oh you mean individual bytes of uint64
[01:45:20] <Batzy> yep
[01:45:28] <Batzy> alternatively if you know a fast non-cryptographic hash
[01:45:37] <Batzy> for a uint64[n]
[01:45:43] <AliceMeows> Yeah it might be ub
[01:46:09] *** Quits: wakeup (~wakeup@user/wakeup) (Quit: Client closed)
[01:46:25] <Batzy> ub?
[01:46:31] *** Quits: proller (~p@2a02:6b8:b081:b503::1:2e) (Ping timeout: 260 seconds)
[01:46:58] <AliceMeows> accessing uint64 as bytes will be ub but you could do the math yourself to access individual bytes
[01:47:55] <Batzy> i mean
[01:47:55] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 260 seconds)
[01:47:57] <Batzy> i dont know what ub is
[01:48:05] <AliceMeows> undefined behavior
[01:48:16] <Batzy> ok well
[01:48:22] <Batzy> i can live with just having a hash function
[01:48:22] <Batzy> to use
[01:50:06] <AliceMeows> Alternatively construct your uint64 array as char array
[01:53:12] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[01:54:05] <kalven> Batzy: const char* bytes = reinterpret_cast<const char*>(your_uint64_array)
[01:54:40] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[01:54:43] <AliceMeows> kalven: that might work on x86 but I have no idea how that'll behave on other archs
[01:54:45] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Read error: Connection reset by peer)
[01:55:54] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[01:56:44] <ville> it's in the works
[01:57:03] <ville> http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1839r4.pdf
[01:57:04] <danieldg> iirc casting to bytes is usually allowed so that memcpy works
[01:57:37] <kalven> aliasing through char has been allowed since forever
[01:57:37] <ville> danieldg: right now it's explained away by memcpy having magic sprinkled on it
[01:57:48] <ville> kalven: yes and no
[01:58:30] <ville> kalven: things in that area have been broken in various ways at various points in time
[01:59:28] <kalven> fair enough, but it looks like that paper is codifying existing behavior
[01:59:51] <ville> yes, trying to return some sanity in that area
[02:00:53] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Read error: Connection reset by peer)
[02:02:14] *** Joins: jsbach (~jsbach@dynamic-078-054-099-032.78.54.pool.telefonica.de)
[02:02:39] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[02:04:48] <Batzy> that's alright ill just use the boost hash function
[02:09:26] *** Joins: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[02:13:03] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:19:20] *** Joins: quartz (~quartz@user/quartz)
[02:25:17] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[02:25:33] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[02:26:10] *** Quits: MasterK (~MK@86.127.26.176) (Remote host closed the connection)
[02:27:53] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Client Quit)
[02:28:06] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[02:29:19] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[02:29:50] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[02:30:56] *** Quits: spikhoff (~spikhoff@8ab7-fe8e-44ff-127b-2180-4880-07d0-2001.sta.estpak.ee) (Read error: Connection reset by peer)
[02:32:37] *** Joins: spikhoff (~spikhoff@8ab7-fe8e-44ff-127b-2180-4880-07d0-2001.sta.estpak.ee)
[02:32:38] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[02:33:24] *** Quits: reaganf (~reaganf@75-163-226-171.clsp.qwest.net) (Quit: Client closed)
[02:33:45] *** Quits: sbrothy (~sbrothy@192038132086.mbb.telenor.dk) (Ping timeout: 252 seconds)
[02:34:15] *** Quits: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[02:34:59] *** Joins: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[02:35:35] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Remote host closed the connection)
[02:35:51] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[02:36:27] <ville> speaking of ub how are you supposed to write an allocator where you've allocation metadata located before the location handed back to the user? trying to get access to the metadata when the user tries to free that allocation part seems to induce ub under current rules no matter what
[02:37:35] *** Quits: mukti (mukti@user/mukti) (Quit: see ya)
[02:37:39] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[02:37:51] *** Joins: mukti (mukti@user/mukti)
[02:38:52] <AliceMeows> Its most likely "works in practice" kind of thing even if its considered UB
[02:39:11] <danieldg> ville: std::launder maybe?
[02:39:25] <ville> yes works in practice. just saying the c++ rules are bit silly and don't reflect what people do in practice
[02:39:36] <AliceMeows> Always has been
[02:41:16] *** Joins: proller (~p@2a02:6b8:b081:b646::1:3c)
[02:41:40] <ville> danieldg: no, don't think that's going to help
[02:41:58] <danieldg> yeah, that function is surprisingly weak
[02:42:01] *** Joins: pulse (~pulse@user/pulse)
[02:42:28] <danieldg> casting to uintptr_t and then turning that into an index from the base of your heap might 'work'
[02:43:09] *** Joins: badone (~badone@209.132.189.152)
[02:43:15] <danieldg> if you assume 'the heap' is an area of memory you own and have valid pointers to
[02:43:22] *** Joins: hashfunc1880 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[02:43:46] <danieldg> in practice you'd get it from system calls, which are outside the spec anyway
[02:43:50] *** Joins: rgrinberg (~textual@177.248.144.104)
[02:44:32] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[02:44:40] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[02:44:40] *** ChanServ sets mode: +v npaperbot
[02:45:34] *** Quits: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[02:46:19] *** Joins: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[02:49:43] *** Quits: Tangent-Man (~Tang3nt-M@92.40.178.106.threembb.co.uk) (Read error: Connection reset by peer)
[02:50:37] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[02:51:08] *** Joins: Tangent-Man (~Tang3nt-M@92.40.178.106.threembb.co.uk)
[02:54:39] *** Quits: Enitin (~Enitin@82.180.145.226) (Ping timeout: 260 seconds)
[02:55:04] *** Joins: Enitin (~Enitin@82.180.145.226)
[02:57:20] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:59:53] *** Quits: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Quit: CodePoint struts into the sunset on the beach.)
[03:04:55] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:05:39] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 252 seconds)
[03:10:39] *** Joins: karakedi (~eAC53C340@user/karakedi)
[03:13:00] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[03:17:05] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[03:17:26] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[03:19:05] *** Joins: seninha (~seninha@user/seninha)
[03:19:50] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:21:51] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[03:22:16] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.5)
[03:24:42] *** Quits: Mat_42 (~mat_42@2a02:21b0:644f:d96f:602c:3e29:2572:190c) (Remote host closed the connection)
[03:25:15] *** Joins: Mat_42 (~mat_42@2a02:21b0:644f:d96f:602c:3e29:2572:190c)
[03:25:24] *** Quits: rgrinberg (~textual@177.248.144.104) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:27:38] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 252 seconds)
[03:28:57] *** Quits: Spirit532 (~Spirit532@user/Spirit532) (Killed (NickServ (GHOST command used by Spirit5326)))
[03:28:58] *** Joins: Spirit532 (~Spirit532@user/Spirit532)
[03:29:24] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[03:29:51] *** Quits: Mat_42 (~mat_42@2a02:21b0:644f:d96f:602c:3e29:2572:190c) (Ping timeout: 252 seconds)
[03:31:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[03:32:09] *** Joins: trumae (~trumae@45.170.74.100)
[03:33:48] *** Joins: pizdets (~pizdets@183.182.115.192)
[03:34:23] *** Quits: pizdets_ (~pizdets@183.182.110.13) (Ping timeout: 265 seconds)
[03:35:33] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:41:04] *** Joins: Mat_42 (~mat_42@2a02:21b0:644f:d96f:602c:3e29:2572:190c)
[03:41:05] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[03:43:40] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[03:45:58] *** Quits: hvitol (~hvitol@218-145-17-89.fiber.hringdu.is) (Quit: WeeChat 3.4)
[03:48:04] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[03:49:35] *** Quits: shailangsa (~shailangs@host86-162-150-212.range86-162.btcentralplus.com) ()
[03:51:50] *** Quits: Tangent-Man (~Tang3nt-M@92.40.178.106.threembb.co.uk) (Remote host closed the connection)
[03:52:11] *** Joins: Tangent-Man (~Tang3nt-M@92.40.178.104.threembb.co.uk)
[03:53:39] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:55:51] *** Quits: llh (~UPP@user/llh) (Quit: :::: ( UPP ) ::::)
[04:00:26] *** Joins: justyb11 (~justyb@64.253.212.72)
[04:02:49] *** Joins: shailangsa (~shailangs@host86-162-150-212.range86-162.btcentralplus.com)
[04:06:34] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[04:09:48] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 240 seconds)
[04:11:08] *** Quits: quartz (~quartz@user/quartz) (Ping timeout: 272 seconds)
[04:19:07] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 260 seconds)
[04:21:19] *** Quits: Tangent-Man (~Tang3nt-M@92.40.178.104.threembb.co.uk) (Read error: Connection reset by peer)
[04:26:43] *** Joins: EekTheCat (~EekTheCat@47.155.62.184)
[04:30:17] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[04:30:42] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[04:30:46] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Ping timeout: 272 seconds)
[04:31:09] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[04:34:13] *** Quits: Soni (~quassel@autistic.space) (Ping timeout: 240 seconds)
[04:36:35] *** Joins: seifeslimene (~seifeslim@102.156.202.190)
[04:36:41] *** Quits: Forsaken87 (~quassel@ip-037-201-193-116.um10.pools.vodafone-ip.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[04:37:34] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[04:37:49] *** Quits: msk (~Thunderbi@89.205.124.19) (Quit: msk)
[04:38:12] *** Joins: msk (~Thunderbi@89.205.124.40)
[04:44:21] *** Quits: Mat_42 (~mat_42@2a02:21b0:644f:d96f:602c:3e29:2572:190c) (Ping timeout: 256 seconds)
[04:45:12] *** Quits: EekTheCat (~EekTheCat@47.155.62.184) (Quit: Leaving)
[04:47:53] *** Joins: pulse (~pulse@user/pulse)
[04:51:36] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[04:56:13] *** Quits: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[05:00:13] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 240 seconds)
[05:02:06] *** Joins: pictour (~pictour@179.96.186.24)
[05:02:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[05:03:40] *** Joins: Mat_42 (~mat_42@2a02:21b0:644f:d96f:602c:3e29:2572:190c)
[05:04:48] *** Quits: pictour (~pictour@179.96.186.24) (Quit: Quit)
[05:08:25] *** Quits: Mat_42 (~mat_42@2a02:21b0:644f:d96f:602c:3e29:2572:190c) (Ping timeout: 268 seconds)
[05:10:05] *** Quits: seifeslimene (~seifeslim@102.156.202.190) (Ping timeout: 256 seconds)
[05:12:08] *** Joins: pottsy (~pottsy@2400:4050:b560:3700:780b:edcd:33e6:5339)
[05:13:00] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[05:16:28] *** Joins: Mat_42 (~mat_42@2a02:21b0:644f:d96f:602c:3e29:2572:190c)
[05:17:26] *** Joins: kaiseisei (~Thunderbi@user/kaiseisei)
[05:17:56] *** Joins: chenqisu1 (~chenqisu1@183.217.201.88)
[05:18:12] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[05:22:40] *** Parts: AliceMeows (~AliceMeow@user/alicemeows) ()
[05:23:07] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[05:24:51] *** Joins: meandrain (~meandrain@2a02:2f0e:f708:1200:ace9:8e52:80af:8a8c)
[05:29:58] *** Quits: kaiseisei (~Thunderbi@user/kaiseisei) (Quit: kaiseisei)
[05:31:19] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:36:07] *** Quits: emerent (~quassel@p200300cd5743c334ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[05:36:38] *** Quits: jose_ (~goose@111.199.80.15) (Ping timeout: 272 seconds)
[05:36:54] *** Joins: emerent (~quassel@p200300cd5743c33bba27ebfffed28a59.dip0.t-ipconnect.de)
[05:43:47] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[05:44:42] *** Joins: malloy (~jimery@116.30.222.122)
[05:51:09] *** Joins: kaiseisei (~Thunderbi@user/kaiseisei)
[05:55:35] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[05:57:15] *** Joins: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca)
[05:58:17] *** Quits: jsbach (~jsbach@dynamic-078-054-099-032.78.54.pool.telefonica.de) (Ping timeout: 240 seconds)
[05:59:35] *** Joins: teepee (~teepee@openscad/teepee)
[06:01:58] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 272 seconds)
[06:02:37] *** Joins: Soni (~quassel@autistic.space)
[06:02:57] *** Quits: reset (~reset@user/reset) (Quit: reset)
[06:03:28] *** Quits: Yruama (~Yruama@2a01:cb15:8128:c100:6c61:6a53:9bf0:64ca) (Remote host closed the connection)
[06:04:11] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[06:10:14] *** Joins: rgrinberg (~textual@177.248.144.104)
[06:13:10] *** Quits: KAHR-Alpha (~Alpha@2a01cb0d024a6600b862d9884a785823.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[06:18:36] *** Quits: Mat_42 (~mat_42@2a02:21b0:644f:d96f:602c:3e29:2572:190c) (Ping timeout: 240 seconds)
[06:20:20] *** Quits: sonic (~sonic@user/sonic) (Quit: WeeChat 3.3)
[06:20:39] *** Quits: rgrinberg (~textual@177.248.144.104) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:23:45] *** Quits: N4buc0- (~N4buc0@189.115.86.130) (Ping timeout: 256 seconds)
[06:25:59] *** Quits: eck (~root@user/eck) (Quit: PIRCH98:WIN 95/98/WIN NT:1.0 (build 1.0.1.1190))
[06:26:35] *** Joins: Inline__ (~Inline@p200300cd47094800372fcc81f701114e.dip0.t-ipconnect.de)
[06:27:04] *** Joins: eck (~root@user/eck)
[06:27:43] *** Quits: slidercrank (~slidercra@user/slidercrank) (Remote host closed the connection)
[06:27:56] *** Quits: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca) (Ping timeout: 272 seconds)
[06:29:19] *** Quits: Inline (~Inline@p200300cd473c9e009f1d7d6dc4a648e3.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[06:32:31] *** Joins: Mat_42 (~mat_42@2a02:21b0:644f:d96f:602c:3e29:2572:190c)
[06:37:13] *** Quits: Mat_42 (~mat_42@2a02:21b0:644f:d96f:602c:3e29:2572:190c) (Ping timeout: 268 seconds)
[06:40:28] *** Quits: spikhoff (~spikhoff@8ab7-fe8e-44ff-127b-2180-4880-07d0-2001.sta.estpak.ee) (Read error: Connection reset by peer)
[06:41:28] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[06:42:05] *** Joins: spikhoff (~spikhoff@8ab7-fe8e-44ff-127b-2180-4880-07d0-2001.sta.estpak.ee)
[06:44:32] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[06:44:40] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[06:44:40] *** ChanServ sets mode: +v npaperbot
[06:49:20] *** Joins: zer0x (~zer0x@1.55.210.186)
[06:50:58] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:53:30] *** Quits: Rayke (rayke@user/rayke) (Quit: WeeChat 3.4)
[06:58:02] *** Joins: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca)
[07:05:56] *** Joins: Mat_42 (~mat_42@2a02:21b0:644f:d96f:602c:3e29:2572:190c)
[07:10:17] *** Quits: Mat_42 (~mat_42@2a02:21b0:644f:d96f:602c:3e29:2572:190c) (Ping timeout: 240 seconds)
[07:14:14] *** Joins: xiongxin (~Thunderbi@2409:8954:3814:5943:4c51:c061:a965:2878)
[07:14:42] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[07:18:30] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[07:18:36] *** Quits: xiongxin (~Thunderbi@2409:8954:3814:5943:4c51:c061:a965:2878) (Ping timeout: 240 seconds)
[07:23:26] *** Joins: Mat_42 (~mat_42@2a02:21b0:644f:d96f:602c:3e29:2572:190c)
[07:23:49] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[07:25:47] *** Quits: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca) (Ping timeout: 260 seconds)
[07:26:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[07:29:53] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[07:30:18] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[07:31:01] *** Joins: EekTheCat (~EekTheCat@47.155.62.184)
[07:35:52] *** Joins: dsrt^ (~dsrt@96-91-136-49-static.hfc.comcastbusiness.net)
[07:38:05] *** Joins: joomla9 (uid543104@id-543104.lymington.irccloud.com)
[07:40:28] *** Quits: trumae (~trumae@45.170.74.100) (Remote host closed the connection)
[07:49:00] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 272 seconds)
[07:50:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[07:58:13] *** Joins: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com)
[08:03:25] *** Quits: hashfunc1880 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 240 seconds)
[08:06:10] *** Joins: ironman (~ironman@2405:201:1010:b051:9f16:af8b:1612:56e5)
[08:08:06] *** Joins: trumae (~trumae@45.170.74.100)
[08:16:59] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[08:17:06] *** Quits: ironman (~ironman@2405:201:1010:b051:9f16:af8b:1612:56e5) (Quit: Leaving)
[08:17:14] *** Joins: sigma_ (~sigma@5.119.71.235)
[08:18:33] *** Quits: sreve (~quassel@p54a70282.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[08:19:04] *** Joins: sreve (~quassel@p549d70fc.dip0.t-ipconnect.de)
[08:21:54] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 252 seconds)
[08:26:55] *** Quits: Mat_42 (~mat_42@2a02:21b0:644f:d96f:602c:3e29:2572:190c) (Ping timeout: 260 seconds)
[08:28:11] *** Joins: gproto23 (~gproto23@user/gproto23)
[08:31:53] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[08:38:45] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[08:41:14] *** Quits: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: ncwbqcfe)
[08:41:30] <Hello71> at least in c, it's perfectly legal to do char *buf = malloc(size); memcpy(buf, mydata, sizeof(mydata)); return buf + sizeof(mydata);
[08:42:50] <Hello71> in general, it surely must be valid to do int f(int *p) { return p[-5]; } int x[100] = {0}; f(x+50);
[08:43:06] <Hello71> otherwise pointer subtraction is useless
[08:45:03] *** Quits: pottsy (~pottsy@2400:4050:b560:3700:780b:edcd:33e6:5339) (Remote host closed the connection)
[08:45:15] *** Joins: ironman (~ironman@2405:201:1010:b051:9f16:af8b:1612:56e5)
[08:50:33] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[08:51:09] *** Joins: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[08:55:30] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 272 seconds)
[08:56:35] *** Joins: Mat_42 (~mat_42@2a02:21b0:644f:d96f:602c:3e29:2572:190c)
[08:58:50] <bpalmer> There are other cases where pointer subtraction comes in handy, but sure, that's all fine.
[08:59:14] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[08:59:40] <bpalmer> your C is only perfectly legal if sizeof(mydata) <= size+1, though
[08:59:46] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[08:59:55] *** Joins: hamburger (~hamburger@user/hamburger)
[09:02:37] *** Joins: sonic (~sonic@user/sonic)
[09:05:45] *** Quits: talisein (~talisein@user/talisein) (*.net *.split)
[09:05:45] *** Quits: biotty (~coien@li35-173.members.linode.com) (*.net *.split)
[09:05:45] *** Quits: upp (~upp@c-71-227-220-185.hsd1.wa.comcast.net) (*.net *.split)
[09:05:48] *** Quits: epony (epony@user/epony) (*.net *.split)
[09:05:49] *** Quits: Stryyker (~stryyke1@about/windows/staff/stryyker) (*.net *.split)
[09:05:49] *** Quits: kaichiuchi (uid547644@user/kaichiuchi) (*.net *.split)
[09:05:49] *** Quits: causative_ (~halberd@user/causative) (*.net *.split)
[09:05:49] *** Quits: mebus (~mebus@2a00:8a60:e019:10de::ac22) (*.net *.split)
[09:05:49] *** Quits: introom (introom@2600:3c01::f03c:92ff:fea3:2cf) (*.net *.split)
[09:05:49] *** Quits: rouji (~rouji@x0.at) (*.net *.split)
[09:05:49] *** Quits: TinoDidriksen (~TinoDidri@tinodidriksen.com) (*.net *.split)
[09:05:49] *** Quits: tayy (~tayy@ns502531.ip-142-4-214.net) (*.net *.split)
[09:05:49] *** Quits: w41_ (~w41@45.76.32.7) (*.net *.split)
[09:05:49] *** Quits: k0 (~kornos@185.47.62.212) (*.net *.split)
[09:05:49] *** Quits: dv2 (~dv2@2a01:4f8:c0c:b9f4::1) (*.net *.split)
[09:05:50] *** Quits: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com) (*.net *.split)
[09:05:50] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (*.net *.split)
[09:05:51] *** Joins: biotty (~coien@li35-173.members.linode.com)
[09:05:57] *** Joins: tayy (~tayy@ns502531.ip-142-4-214.net)
[09:05:57] *** Joins: w41 (~w41@45.76.32.7)
[09:06:01] *** Joins: kaichiuchi (sid547644@user/kaichiuchi)
[09:06:07] *** Quits: hamburger (~hamburger@user/hamburger) (Ping timeout: 260 seconds)
[09:06:08] *** Joins: upp (~upp@c-71-227-220-185.hsd1.wa.comcast.net)
[09:06:12] *** Joins: kornos (~kornos@2a04:ad80:0:fb::3b85)
[09:06:21] *** Joins: mebus (~mebus@2a00:8a60:e019:10de::ac22)
[09:06:26] *** Joins: introom (introom@2600:3c01::f03c:92ff:fea3:2cf)
[09:06:28] *** Joins: TinoDidriksen (~TinoDidri@tinodidriksen.com)
[09:06:41] *** Joins: Stryyker (~stryyke1@about/windows/staff/stryyker)
[09:06:51] *** Joins: talisein (~talisein@user/talisein)
[09:06:55] *** Joins: causative_ (~halberd@user/causative)
[09:09:12] *** Joins: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com)
[09:09:46] *** Joins: Guest6037 (epony@lz2.eu)
[09:10:12] *** Joins: rouji (~rouji@x0.at)
[09:19:46] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[09:20:57] *** Joins: hamburger (~hamburger@user/hamburger)
[09:23:31] *** Quits: _SKiTZO (~SKiTZO@64.89-10-146.nextgentel.com) (Remote host closed the connection)
[09:24:16] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[09:24:31] *** Joins: senoraraton (~senorarat@c-67-160-210-246.hsd1.ca.comcast.net)
[09:25:04] *** Quits: EekTheCat (~EekTheCat@47.155.62.184) (Remote host closed the connection)
[09:29:23] *** Joins: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz)
[09:30:45] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[09:33:05] *** Joins: abode (~abode@2001:8f8:1263:f601:8230:49ff:fe6e:36b5)
[09:33:11] *** Quits: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[09:34:08] *** Quits: hamburger (~hamburger@user/hamburger) (Ping timeout: 272 seconds)
[09:35:02] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[09:35:17] *** Joins: Viewday1152 (~Viewday@user/viewday)
[09:35:27] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[09:36:36] *** Quits: Viewday115 (~Viewday@user/viewday) (Ping timeout: 240 seconds)
[09:36:39] *** Viewday1152 is now known as Viewday115
[09:38:23] *** Joins: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469)
[09:40:33] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[09:40:35] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:42:01] *** Quits: Viewday115 (~Viewday@user/viewday) (Quit: Ping timeout (120 seconds))
[09:42:19] *** Joins: Viewday115 (~Viewday@user/viewday)
[09:42:44] *** Quits: nq_ (~nq@2a02:2f08:e015:a900:541c:4edd:d976:8aa) (Ping timeout: 252 seconds)
[09:44:05] *** Joins: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[09:44:54] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 272 seconds)
[09:45:38] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[09:46:08] *** Quits: joomla9 (uid543104@id-543104.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[09:47:07] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[09:50:57] *** Quits: senoraraton (~senorarat@c-67-160-210-246.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[09:51:14] *** Quits: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 272 seconds)
[09:51:25] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[09:51:37] *** Joins: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[09:53:18] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[09:55:46] *** Quits: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 245 seconds)
[09:56:44] *** Joins: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[09:57:25] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[10:01:07] *** Quits: Mat_42 (~mat_42@2a02:21b0:644f:d96f:602c:3e29:2572:190c) (Ping timeout: 256 seconds)
[10:03:53] *** Quits: trumae (~trumae@45.170.74.100) (Remote host closed the connection)
[10:04:49] *** Joins: Mat_42 (~mat_42@2a02:21b0:644f:d96f:602c:3e29:2572:190c)
[10:14:12] *** Joins: hamburger (~hamburger@user/hamburger)
[10:19:51] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:20:54] *** Quits: sigma_ (~sigma@5.119.71.235) (Quit: Konversation terminated!)
[10:22:11] *** Quits: spikhoff (~spikhoff@8ab7-fe8e-44ff-127b-2180-4880-07d0-2001.sta.estpak.ee) (Ping timeout: 260 seconds)
[10:23:52] *** Quits: Mat_42 (~mat_42@2a02:21b0:644f:d96f:602c:3e29:2572:190c) (Remote host closed the connection)
[10:24:03] *** Joins: Mat_42 (~mat_42@2a02:21b0:644f:d96f:602c:3e29:2572:190c)
[10:27:09] *** Quits: malloy (~jimery@116.30.222.122) (Ping timeout: 265 seconds)
[10:27:41] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[10:29:01] *** Joins: malloy (~jimery@116.30.222.122)
[10:30:00] *** Quits: mukti (mukti@user/mukti) (Quit: see ya)
[10:33:57] *** Quits: Enitin (~Enitin@82.180.145.226) (Ping timeout: 240 seconds)
[10:34:41] *** Joins: Enitin (~Enitin@82.180.145.226)
[10:36:39] *** Quits: zer0x (~zer0x@1.55.210.186) (Ping timeout: 252 seconds)
[10:36:45] *** Quits: Mat_42 (~mat_42@2a02:21b0:644f:d96f:602c:3e29:2572:190c) (Remote host closed the connection)
[10:37:18] *** Joins: Mat_42 (~mat_42@2a02:21b0:644f:d96f:602c:3e29:2572:190c)
[10:41:19] *** Joins: plastico (~plastico@neomutt/plastico)
[10:41:38] *** Quits: Enitin (~Enitin@82.180.145.226) (Ping timeout: 260 seconds)
[10:42:02] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[10:42:12] *** Quits: Mat_42 (~mat_42@2a02:21b0:644f:d96f:602c:3e29:2572:190c) (Ping timeout: 260 seconds)
[10:42:35] *** Quits: mrus (~mrus@gateway/tor-sasl/mrus) (Ping timeout: 240 seconds)
[10:42:36] *** Quits: ironman (~ironman@2405:201:1010:b051:9f16:af8b:1612:56e5) (Quit: Leaving)
[10:44:33] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[10:44:40] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[10:44:40] *** ChanServ sets mode: +v npaperbot
[10:45:02] *** Joins: mrus (~mrus@gateway/tor-sasl/mrus)
[10:47:29] *** Joins: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be)
[10:51:21] *** Quits: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com) (Quit: Client closed)
[10:53:16] *** Joins: hamburger_ (~hamburger@user/hamburger)
[10:53:58] *** Joins: xiongxin (~Thunderbi@117.136.33.130)
[10:54:49] *** Joins: Mat_42 (~mat_42@2a02:21b0:644f:d96f:602c:3e29:2572:190c)
[10:55:50] *** Quits: mrus (~mrus@gateway/tor-sasl/mrus) (Remote host closed the connection)
[10:56:05] *** Joins: mrus (~mrus@gateway/tor-sasl/mrus)
[10:56:12] *** Quits: hamburger (~hamburger@user/hamburger) (Ping timeout: 240 seconds)
[11:00:01] *** Joins: ironman (~ironman@2405:201:1010:b051:9f16:af8b:1612:56e5)
[11:01:34] *** Joins: jsbach (~jsbach@2a01:c22:35df:5200:e30e:9d54:124d:b5be)
[11:02:10] *** Joins: kaiseisei1 (~Thunderbi@user/kaiseisei)
[11:02:47] *** Quits: kaiseisei (~Thunderbi@user/kaiseisei) (Ping timeout: 260 seconds)
[11:02:48] *** kaiseisei1 is now known as kaiseisei
[11:04:33] <hachikuji[m]> <Eelis> "and also, why do you even care..." <- if I wasn't supposed to care, C++ compiler would stop wasting my CPU cycles on destructors that do not need to run...
[11:04:36] *** hamburger_ is now known as hamburger
[11:08:26] <Eelis> hachikuji[m]: wait, your argument is that the value of moved-from strings should be specified rather than left to the implementation, for efficiency reasons?
[11:08:54] <Eelis> it the unspecifiedness that gives the implementation the greatest freedom to be efficient
[11:09:48] <fiesh> "swap" is the move that allows you to specify the moved-from value...
[11:12:15] <hachikuji[m]> Eelis: it is very well defined that string will be empty and coincidentally, that results in most efficient code, would be even more efficient if destructor didn't run on an empty string, though
[11:13:01] <Eelis> hachikuji[m]: did you not see the std link i gave?
[11:13:35] <hachikuji[m]> is it going to tell me something I don't know?
[11:13:49] <Eelis> it directly contradicts what you just said ("it is very well defined that string will be empty")
[11:15:18] <hachikuji[m]> oh yes, sure, SSO case is special, what difference does it make when its destructor will be NOP?
[11:15:49] <hachikuji[m]> for all intents and purposes, string does not need a destructor to run after move, and yet it does
[11:16:02] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[11:17:34] <hachikuji[m]> there's no implementation where a moved from string will contain heap allocated data is my point
[11:17:52] <fiesh> but that's simply a missed compiler optimization?
[11:18:29] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[11:18:31] <hachikuji[m]> I think that's a lot bigger issue than that and one that's hard to fix
[11:18:50] <hachikuji[m]> doesn't make it any less stupid
[11:19:30] *** Joins: Enitin (~Enitin@82.180.145.230)
[11:19:52] <hachikuji[m]> if you're given all this freedom, it possibly means that compiler will never be able to optimize this
[11:19:56] <fiesh> why?  the compiler sees that the moved-from string no longer owns anything heap allocated and could thus prove that its dtor will be a noop
[11:20:28] <hachikuji[m]> not necessarily, it's dtor could log something to a file for example
[11:20:46] <hachikuji[m]> that's why I hate C++ move semantics
[11:20:54] <hachikuji[m]> it's just a bastard copy
[11:20:59] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[11:21:36] <fiesh> std::string's dtor logs something to a file?
[11:21:53] <hachikuji[m]> no but it has freedom to
[11:21:55] *** Quits: Mat_42 (~mat_42@2a02:21b0:644f:d96f:602c:3e29:2572:190c) (Remote host closed the connection)
[11:22:00] *** Quits: ironman (~ironman@2405:201:1010:b051:9f16:af8b:1612:56e5) (Quit: Leaving)
[11:22:07] *** Joins: Mat_42 (~mat_42@2a02:21b0:644f:d96f:602c:3e29:2572:190c)
[11:22:22] <hachikuji[m]> the real problem is that instead of object being moved as it should be
[11:22:27] <hachikuji[m]> only its contents are
[11:22:42] <hachikuji[m]> (maybe, you have freedom not to)
[11:23:15] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 240 seconds)
[11:24:05] <Eelis> of course only the contents can be moved. you can't change the address of an object
[11:24:12] <hachikuji[m]> so destructor always pointlessly runs checking several conditions on a zombie object that has no excuse existing but has to destruct successfully
[11:25:36] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[11:25:43] <hachikuji[m]> Eelis: semantically, it would be better if object changed scope instead of being butchered in its old scope and recreated in the new one, I couldn't care less about adresses, not sure what they have to do with this
[11:27:15] *** Joins: abode_ (~abode@92.99.205.99)
[11:29:51] *** Quits: abode (~abode@2001:8f8:1263:f601:8230:49ff:fe6e:36b5) (Ping timeout: 260 seconds)
[11:31:10] *** Joins: Forsaken87 (~quassel@ip-037-201-193-116.um10.pools.vodafone-ip.de)
[11:32:16] <Eelis> the fact that objects have unique unchangable addresses is why you can only move the contents. the source object cannot become the target object, because the two have different addresses
[11:33:56] <Eelis> some classes don't care about their address, others do. someone once proposed a trait/attribute to mark the former
[11:34:01] <Eelis> https://quuxplusone.github.io/blog/2018/07/18/announcing-trivially-relocatable/
[11:36:33] <hachikuji[m]> address has nothing to do with semantics of a move
[11:37:11] *** Quits: CalamityBloo (~CalamityB@user/CalamityBlue) (Read error: Connection reset by peer)
[11:37:47] <Eelis> if you say so
[11:38:04] <hachikuji[m]> there's plenty of optimizations that wouldn't be possible if addresses of objects mattered at all
[11:38:10] <Eelis> LOL
[11:38:48] <hachikuji[m]> one of them is function inlining
[11:40:31] *** Quits: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Remote host closed the connection)
[11:42:02] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:44:34] *** Joins: hamburger_ (~hamburger@user/hamburger)
[11:47:35] *** Quits: hamburger (~hamburger@user/hamburger) (Ping timeout: 260 seconds)
[11:49:46] *** Quits: aLeSD[m] (~alambicco@2001:470:69fc:105::1:452a) (Quit: Bridge terminating on SIGTERM)
[11:49:46] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Quit: Bridge terminating on SIGTERM)
[11:49:46] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (Quit: Bridge terminating on SIGTERM)
[11:49:46] *** Quits: zygonsisyphus[m] (~zygonsisy@2001:470:69fc:105::482) (Quit: Bridge terminating on SIGTERM)
[11:49:46] *** Quits: bitonic (~bitonic@2001:470:69fc:105::1812) (Quit: Bridge terminating on SIGTERM)
[11:49:46] *** Quits: euphrates[m] (~euphrates@2001:470:69fc:105::fbb5) (Quit: Bridge terminating on SIGTERM)
[11:49:47] *** Quits: Hansuke[m] (~hansukema@2001:470:69fc:105::1:86bb) (Quit: Bridge terminating on SIGTERM)
[11:49:47] *** Quits: DeaDSouL[m] (~deadsoulm@2001:470:69fc:105::1:c0de) (Quit: Bridge terminating on SIGTERM)
[11:49:48] *** Quits: comment_system[m (~commentsy@2001:470:69fc:105::1:ca7a) (Quit: Bridge terminating on SIGTERM)
[11:49:51] *** Quits: avesatanas[m] (~avesatana@2001:470:69fc:105::1:d083) (Quit: Bridge terminating on SIGTERM)
[11:49:51] *** Quits: hachikuji[m] (~hachikuji@2001:470:69fc:105::1:dc1a) (Quit: Bridge terminating on SIGTERM)
[11:49:53] *** Quits: yosef36 (~yosefweis@2001:470:69fc:105::1:e501) (Quit: Bridge terminating on SIGTERM)
[11:49:53] *** Quits: latterly[m] (~latterlym@2001:470:69fc:105::1:922f) (Quit: Bridge terminating on SIGTERM)
[11:49:54] *** Quits: MarcoAlvarez[m] (~surakgnom@2001:470:69fc:105::2dc) (Quit: Bridge terminating on SIGTERM)
[11:49:54] *** Quits: GiorgiGzirishvil (~drnmatrix@2001:470:69fc:105::1:d1e5) (Quit: Bridge terminating on SIGTERM)
[11:49:54] *** Quits: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4) (Quit: Bridge terminating on SIGTERM)
[11:49:58] *** Quits: tenbitcomb[m] (~tenbitcom@2001:470:69fc:105::1:a8da) (Quit: Bridge terminating on SIGTERM)
[11:49:58] *** Quits: sss123next[m] (~sss123nex@2001:470:69fc:105::1:ceac) (Quit: Bridge terminating on SIGTERM)
[11:49:59] *** Quits: MetroWind[m] (~mwdarksai@2001:470:69fc:105::1:e3a7) (Quit: Bridge terminating on SIGTERM)
[11:49:59] *** Quits: yosef[m] (~yosefmxvl@2001:470:69fc:105::1:e4d9) (Quit: Bridge terminating on SIGTERM)
[11:50:50] *** Joins: RazielZ (~Raziel@user/raziel)
[11:51:02] *** Quits: useretail (~useretail@185.132.19.151) (Remote host closed the connection)
[11:51:18] *** Joins: useretail (~useretail@185.132.19.151)
[11:53:03] *** Quits: hamburger_ (~hamburger@user/hamburger) (Read error: Connection reset by peer)
[11:53:40] *** Quits: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[11:54:00] *** Joins: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be)
[11:54:44] *** Quits: Raziel (~Raziel@user/raziel) (Ping timeout: 272 seconds)
[11:55:57] *** Joins: MetroWind[m] (~mwdarksai@2001:470:69fc:105::1:e3a7)
[11:56:40] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[11:58:24] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[12:04:51] *** Joins: kenantu (~kenanmara@user/kenanmarasli)
[12:11:53] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[12:11:53] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[12:11:53] *** Joins: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4)
[12:11:53] *** Joins: zygonsisyphus[m] (~zygonsisy@2001:470:69fc:105::482)
[12:11:53] *** Joins: yosef[m]12 (~yosefmxvl@2001:470:69fc:105::1:e4d9)
[12:11:53] *** Joins: DeaDSouL[m] (~deadsoulm@2001:470:69fc:105::1:c0de)
[12:11:53] *** Joins: bitonic (~bitonic@2001:470:69fc:105::1812)
[12:11:53] *** Joins: euphrates[m] (~euphrates@2001:470:69fc:105::fbb5)
[12:11:53] *** Joins: tenbitcomb[m] (~tenbitcom@2001:470:69fc:105::1:a8da)
[12:11:53] *** Joins: aLeSD[m] (~alambicco@2001:470:69fc:105::1:452a)
[12:11:53] *** Joins: yosef36 (~yosefweis@2001:470:69fc:105::1:e501)
[12:11:53] *** Joins: Hansuke[m] (~hansukema@2001:470:69fc:105::1:86bb)
[12:11:53] *** Joins: avesatanas[m] (~avesatana@2001:470:69fc:105::1:d083)
[12:11:53] *** Joins: GiorgiGzirishvil (~drnmatrix@2001:470:69fc:105::1:d1e5)
[12:11:53] *** Joins: comment_system[m (~commentsy@2001:470:69fc:105::1:ca7a)
[12:11:53] *** Joins: sss[m] (~sss123nex@2001:470:69fc:105::1:ceac)
[12:12:05] *** Joins: hachikuji[m] (~hachikuji@2001:470:69fc:105::1:dc1a)
[12:12:05] *** Joins: MarcoAlvarez[m] (~surakgnom@2001:470:69fc:105::2dc)
[12:12:05] *** Joins: latterly[m] (~latterlym@2001:470:69fc:105::1:922f)
[12:16:06] *** Joins: john99 (~john99@134.238.222.5)
[12:17:21] *** Quits: C-Man (~C-Man@78.31.190.82) (Ping timeout: 256 seconds)
[12:25:18] *** Joins: the_lanetly_052_ (~the_lanet@194.135.154.137)
[12:26:48] *** Joins: PlasmaHH (~PlasamaHH@user/plasmahh)
[12:28:27] *** Joins: jose_ (~goose@111.199.80.15)
[12:32:22] *** Joins: Xardas (~Xardas@149.233.51.127)
[12:32:24] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[12:32:43] <Xardas> What gets evaluated first here ?
[12:32:44] <Xardas> int (*func(int i))[10] { /*...*/ }
[12:33:10] <Xardas> the [ ] operator first then the function call operator ( )
[12:33:13] <Xardas> am I right ?
[12:33:47] *** Quits: Enitin (~Enitin@82.180.145.230) (Ping timeout: 260 seconds)
[12:34:56] <urdh> that looks more like a declaration than an expression, in which case evaluation order is an odd thing to ask about
[12:35:48] <urdh> but if you had something like (*f(5))[10], then the call to f() would be evaluated before the call to operator[], obviously
[12:36:12] <Xardas> Well sorry I mean the precedence
[12:37:02] <Xardas> Do we have to put parentheses around *func(int i)
[12:37:04] <Xardas> ?
[12:38:02] <Xardas> I agree with you
[12:38:02] <urdh> yes
[12:38:07] <urdh> int *func(int i)[10];
[12:38:16] <Xardas> the () and [] have the same precedence
[12:38:18] <urdh> geordi: ^
[12:38:18] <geordi> error: expected constructor, destructor, or type conversion before 'have'
[12:38:26] <urdh> geordi: int *func(int i)[10];
[12:38:26] <geordi> error: 'func' declared as function returning an array
[12:38:33] <Xardas> they are left associative
[12:38:39] <Xardas> so we go from left to right here
[12:38:47] <Xardas> am i right ?
[12:38:47] <urdh> without parantheses, you have a function returning an array of int*
[12:38:58] <urdh> with the parentheses, you have a function returning a pointer to int[10]
[12:39:02] *** Joins: Enitin (~Enitin@82.180.145.228)
[12:39:20] <urdh> i *think*, it's still early in the morning
[12:40:15] <urdh> << TYPE_DESC<int (*(int i))[10]>
[12:40:16] <geordi> function taking an integer and returning a pointer to an array of 10 integers
[12:40:31] <Xardas> yup i got it
[12:40:40] <urdh> (and you can't have a function returning arrays, so the parens are required)
[12:41:01] <Xardas> We can have functions returning references to arrays
[12:41:28] <Xardas> so just like in the pointer to array declaration the parentheses are necessary
[12:42:03] <Xardas> Hey thx !
[12:44:08] *** Joins: ivii (~ivan@user/ivii)
[12:45:31] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[12:45:57] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[12:51:56] *** Joins: rendar (~rendar@user/rendar)
[12:53:38] *** Joins: hamburger (~hamburger@user/hamburger)
[12:56:36] *** gentooclimax is now known as climax
[13:01:18] *** Quits: Cyp (~cyp@213.237.85.100) (Read error: Connection reset by peer)
[13:03:03] *** Joins: Cyp (~cyp@213.237.84.236)
[13:03:41] *** climax is now known as gentooclimax
[13:07:39] *** Joins: hamburger_ (~hamburger@user/hamburger)
[13:07:43] *** Joins: xiongxin1 (~Thunderbi@2409:8954:2e14:36fc:f177:e967:2de3:80eb)
[13:10:29] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[13:10:43] *** Quits: xiongxin (~Thunderbi@117.136.33.130) (Ping timeout: 246 seconds)
[13:11:23] *** Joins: xiongxin (~Thunderbi@2409:8954:2e14:155:24cb:e9df:d924:87eb)
[13:11:33] *** Quits: hamburger (~hamburger@user/hamburger) (Ping timeout: 260 seconds)
[13:12:13] *** Quits: xiongxin1 (~Thunderbi@2409:8954:2e14:36fc:f177:e967:2de3:80eb) (Ping timeout: 250 seconds)
[13:14:27] *** Quits: hamburger_ (~hamburger@user/hamburger) (Ping timeout: 260 seconds)
[13:15:22] *** Joins: MajorBiscuit (~MajorBisc@86.88.79.148)
[13:16:50] *** Joins: hamburger (~hamburger@user/hamburger)
[13:20:36] *** Quits: xiongxin (~Thunderbi@2409:8954:2e14:155:24cb:e9df:d924:87eb) (Ping timeout: 240 seconds)
[13:20:51] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[13:21:35] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[13:26:04] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[13:27:18] *** Joins: nostoi (~nostoi@254.red-83-60-236.dynamicip.rima-tde.net)
[13:27:42] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 252 seconds)
[13:27:55] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 260 seconds)
[13:28:51] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[13:30:08] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:33:18] *** Joins: hamburger_ (~hamburger@user/hamburger)
[13:33:19] *** Joins: wakeup (~wakeup@user/wakeup)
[13:33:23] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[13:33:44] *** Quits: hamburger (~hamburger@user/hamburger) (Ping timeout: 252 seconds)
[13:35:48] *** Quits: Viewday115 (~Viewday@user/viewday) (Quit: Ping timeout (120 seconds))
[13:36:05] *** Joins: Viewday115 (~Viewday@user/viewday)
[13:36:36] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:37:01] *** Quits: nostoi (~nostoi@254.red-83-60-236.dynamicip.rima-tde.net) (Read error: No route to host)
[13:37:15] *** Quits: Enitin (~Enitin@82.180.145.228) (Ping timeout: 260 seconds)
[13:38:56] *** Quits: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz) (Quit: My computer has nodded off...)
[13:39:45] *** gentooclimax is now known as climax
[13:40:22] *** Quits: chenqisu1 (~chenqisu1@183.217.201.88) (Remote host closed the connection)
[13:41:20] *** Quits: Mat_42 (~mat_42@2a02:21b0:644f:d96f:602c:3e29:2572:190c) (Remote host closed the connection)
[13:44:59] *** Joins: xiongxin (~Thunderbi@117.136.40.172)
[13:52:59] *** Joins: Guest6959 (~Guest69@ip72-199-239-162.sd.sd.cox.net)
[13:54:42] *** Joins: Mat_42 (~mat_42@2a02:21b0:644f:d96f:602c:3e29:2572:190c)
[13:55:24] *** Quits: Furai (~Furai@furai.pl) (Remote host closed the connection)
[13:55:52] *** Joins: Furai (~Furai@furai.pl)
[13:55:57] *** Quits: climax (~gentoocli@81-64-65-213.rev.numericable.fr) (Remote host closed the connection)
[13:56:01] *** Quits: Mat_42 (~mat_42@2a02:21b0:644f:d96f:602c:3e29:2572:190c) (Remote host closed the connection)
[13:56:22] *** Joins: climax (~gentoocli@81-64-65-213.rev.numericable.fr)
[13:57:26] *** hamburger_ is now known as hamburger
[13:58:27] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[13:58:58] <hamburger> hey all
[13:59:02] <hamburger> you like c++ ?
[13:59:02] *** Joins: jellie (~luv_panda@user/jellie)
[13:59:09] <hamburger> you choose the right one guys
[13:59:14] <hamburger> don't code in c anymore
[13:59:16] <hamburger> is stupid
[13:59:21] <zz> your mom is stupid
[13:59:36] <hamburger> instead of choosing c and other compiling language
[13:59:43] <hamburger> use python instead
[14:03:50] *** Quits: rg (~r-g@51-15-187-53.rev.poneytelecom.eu) (Read error: Connection reset by peer)
[14:05:19] <ville> yeah, that's just basic science. hard to argue with facts
[14:05:40] *** Quits: the_lanetly_052_ (~the_lanet@194.135.154.137) (Ping timeout: 246 seconds)
[14:05:55] *** Quits: c4017 (~c4017@2604:3d08:747f:7c90:71df:e182:e7d8:25a7) (Quit: Leaving)
[14:08:57] *** Joins: CFP- (~CFP-@2a02:c7f:180d:e500:84a6:1d07:1d35:a842)
[14:11:21] *** Joins: irf21k (~irf21k@2401:4900:33d1:18a6:2:1:a502:e94e)
[14:12:08] *** Joins: slidercrank (~slidercra@user/slidercrank)
[14:13:53] *** Quits: Flannel (~flannel@cpe-76-175-193-181.socal.res.rr.com) (Ping timeout: 252 seconds)
[14:13:54] <hamburger> n
[14:14:15] *** Joins: Flannel (~flannel@cpe-76-175-193-181.socal.res.rr.com)
[14:15:15] *** Joins: Atque (~Atque@user/atque)
[14:16:14] *** Quits: samuelbernardo (~samuelber@nata01.lip.pt) (Quit: ZNC 1.8.2 - https://znc.in)
[14:20:39] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 260 seconds)
[14:20:55] *** Quits: Atque (~Atque@user/atque) (Ping timeout: 240 seconds)
[14:25:15] *** Joins: Atque (~Atque@user/atque)
[14:28:12] *** Joins: xiongxin1 (~Thunderbi@2409:8954:2e14:21e7:3c97:3b7b:5477:b92)
[14:29:49] *** Joins: Mat_42 (~mat_42@2a02:21b0:644f:d96f:602c:3e29:2572:190c)
[14:30:38] *** Quits: kenantu (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[14:30:56] *** Quits: Guest6037 (epony@lz2.eu) (Quit: QUIT)
[14:31:51] *** Quits: xiongxin (~Thunderbi@117.136.40.172) (Ping timeout: 260 seconds)
[14:32:41] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[14:34:59] *** Quits: xiongxin1 (~Thunderbi@2409:8954:2e14:21e7:3c97:3b7b:5477:b92) (Ping timeout: 250 seconds)
[14:38:13] *** Joins: c4017 (~c4017@2604:3d08:747f:7c90:f136:f9d6:17ab:1405)
[14:39:15] *** Joins: C-Man (~C-Man@78.31.190.82)
[14:41:11] <hamburger> m
[14:41:22] <Svitkona> indeed
[14:41:39] *** Joins: onizu (uid373383@id-373383.uxbridge.irccloud.com)
[14:42:02] *** Joins: sigma_ (~sigma@5.119.71.235)
[14:42:14] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[14:42:31] *** Joins: bindu (~bindu@user/bindu)
[14:43:54] *** Joins: hamburger_ (~hamburger@user/hamburger)
[14:44:33] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[14:44:41] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[14:44:41] *** ChanServ sets mode: +v npaperbot
[14:45:09] *** Joins: epony (epony@user/epony)
[14:47:47] *** Quits: hamburger (~hamburger@user/hamburger) (Ping timeout: 250 seconds)
[14:49:15] *** Quits: epony (epony@user/epony) (Max SendQ exceeded)
[14:50:09] *** Joins: cursey (~cursey@user/cursey)
[14:50:26] *** Joins: epony (epony@user/epony)
[14:53:56] *** Quits: sigma_ (~sigma@5.119.71.235) (Quit: Konversation terminated!)
[14:54:36] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[14:57:53] *** Joins: SR-71 (~user@user/SR-71)
[14:58:59] *** Joins: xiongxin (~Thunderbi@117.136.40.176)
[15:02:15] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[15:02:16] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[15:02:22] *** Quits: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[15:03:45] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[15:04:41] *** Joins: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[15:06:00] *** Quits: kaiseisei (~Thunderbi@user/kaiseisei) (Ping timeout: 272 seconds)
[15:06:39] *** Joins: unknow (~i.am@user/marlboro)
[15:08:39] *** Joins: xiongxin1 (~Thunderbi@2409:8954:2e14:238c:7f88:ea0:54ea:d5a)
[15:08:47] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Ping timeout: 260 seconds)
[15:12:03] *** Quits: xiongxin (~Thunderbi@117.136.40.176) (Ping timeout: 250 seconds)
[15:12:03] *** xiongxin1 is now known as xiongxin
[15:13:23] *** Joins: seninha (~seninha@user/seninha)
[15:15:54] *** Joins: Guest53 (~Guest53@155.190.35.5)
[15:16:05] <Guest53> Hi All,
[15:16:21] <Guest53> could help me fixing the following slicing problem:
[15:16:22] <Guest53> https://wandbox.org/permlink/BcuWjlrRAPWAT8TF
[15:16:43] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[15:17:07] <Guest53> i am trying to find a work around for the line 32, where there is a pass by value
[15:17:24] <Guest53> which is causing the slicing
[15:17:33] <Guest53> however didn't succeed
[15:17:56] *** Joins: zeenk (~zeenk@2a02:2f04:a110:7d00:2011:cfed:bad7:3c94)
[15:18:01] *** Joins: Enitin (~Enitin@82.180.145.223)
[15:19:48] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[15:23:07] <ville> pass a pointer or reference
[15:27:27] *** Quits: Enitin (~Enitin@82.180.145.223) (Ping timeout: 260 seconds)
[15:28:31] *** Joins: xkuru (~xkuru@user/xkuru)
[15:28:33] *** Joins: Administrator__ (~hamburger@user/hamburger)
[15:28:37] *** Joins: Enitin (~Enitin@82.180.145.226)
[15:29:53] *** Joins: JohnMS_WORK (~kvirc@194.110.240.100)
[15:30:51] <Guest53> yes tried to pass a const reference but didn't work
[15:31:08] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[15:31:15] *** Joins: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be)
[15:31:23] <ville> also don't use wandbox for pastes anymore. it's broken
[15:31:33] *** Quits: xiongxin (~Thunderbi@2409:8954:2e14:238c:7f88:ea0:54ea:d5a) (Ping timeout: 260 seconds)
[15:31:34] <Guest53> not that the object "Base<T> b = T();" has to contructed inside the calss itself
[15:32:00] *** Quits: Guest4782 (~martiert_@2001:420:44c1:2617:d151:e9c4:bc77:95e1) (Ping timeout: 252 seconds)
[15:32:04] <Guest53> *note
[15:32:16] <ville> i can't see the paste. wandbox is broken
[15:32:43] *** Quits: hamburger_ (~hamburger@user/hamburger) (Ping timeout: 260 seconds)
[15:33:11] <Svitkona> are you running noscript or do you have JS disabled?
[15:35:01] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Quit: User was banned)
[15:35:03] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (Quit: User was banned)
[15:35:03] *** Quits: bitonic (~bitonic@2001:470:69fc:105::1812) (Quit: User was banned)
[15:35:11] *** Quits: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4) (Quit: User was banned)
[15:35:12] *** Quits: zygonsisyphus[m] (~zygonsisy@2001:470:69fc:105::482) (Quit: User was banned)
[15:35:14] *** Quits: avesatanas[m] (~avesatana@2001:470:69fc:105::1:d083) (Quit: User was banned)
[15:35:16] *** Quits: DeaDSouL[m] (~deadsoulm@2001:470:69fc:105::1:c0de) (Quit: User was banned)
[15:35:18] *** Quits: sss[m] (~sss123nex@2001:470:69fc:105::1:ceac) (Quit: User was banned)
[15:35:21] *** Joins: Guest4782 (~martiert_@2001:420:44c1:2617:a6ae:11ff:fe11:bb70)
[15:35:32] *** Quits: comment_system[m (~commentsy@2001:470:69fc:105::1:ca7a) (Quit: User was banned)
[15:35:39] *** Quits: euphrates[m] (~euphrates@2001:470:69fc:105::fbb5) (Quit: User was banned)
[15:35:41] *** Quits: MetroWind[m] (~mwdarksai@2001:470:69fc:105::1:e3a7) (Quit: User was banned)
[15:35:45] *** Quits: Hansuke[m] (~hansukema@2001:470:69fc:105::1:86bb) (Quit: User was banned)
[15:35:47] *** Quits: yosef36 (~yosefweis@2001:470:69fc:105::1:e501) (Quit: User was banned)
[15:35:55] *** Quits: GiorgiGzirishvil (~drnmatrix@2001:470:69fc:105::1:d1e5) (Quit: User was banned)
[15:35:58] *** Quits: aLeSD[m] (~alambicco@2001:470:69fc:105::1:452a) (Quit: User was banned)
[15:35:58] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[15:37:11] *** Quits: yosef[m]12 (~yosefmxvl@2001:470:69fc:105::1:e4d9) (Quit: User was banned)
[15:37:39] <PJBoy> other JS pastes are fine so...
[15:37:45] *** Quits: tenbitcomb[m] (~tenbitcom@2001:470:69fc:105::1:a8da) (Quit: User was banned)
[15:37:48] *** Quits: hachikuji[m] (~hachikuji@2001:470:69fc:105::1:dc1a) (Quit: User was banned)
[15:37:48] *** Quits: MarcoAlvarez[m] (~surakgnom@2001:470:69fc:105::2dc) (Quit: User was banned)
[15:37:48] *** Quits: latterly[m] (~latterlym@2001:470:69fc:105::1:922f) (Quit: User was banned)
[15:38:16] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[15:38:29] *** Joins: MarcoAlvarez[m] (~surakgnom@2001:470:69fc:105::2dc)
[15:38:43] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[15:38:55] *** Joins: zygonsisyphus[m] (~zygonsisy@2001:470:69fc:105::482)
[15:39:07] *** Joins: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4)
[15:39:19] *** Joins: hachikuji[m] (~hachikuji@2001:470:69fc:105::1:dc1a)
[15:39:33] *** Joins: bitonic (~bitonic@2001:470:69fc:105::1812)
[15:39:46] *** Joins: yosef[m] (~yosefmxvl@2001:470:69fc:105::1:e4d9)
[15:39:53] <Guest53> ville: have a look https://godbolt.org/z/hf9fWqxfW
[15:39:58] *** Joins: latterly[m] (~latterlym@2001:470:69fc:105::1:922f)
[15:40:10] *** Joins: DeaDSouL[m] (~deadsoulm@2001:470:69fc:105::1:c0de)
[15:40:10] *** Joins: euphrates[m] (~euphrates@2001:470:69fc:105::fbb5)
[15:40:22] *** Joins: tenbitcomb[m] (~tenbitcom@2001:470:69fc:105::1:a8da)
[15:40:23] *** Joins: sss[m] (~sss123nex@2001:470:69fc:105::1:ceac)
[15:40:38] *** Joins: aLeSD[m] (~alambicco@2001:470:69fc:105::1:452a)
[15:40:52] *** Joins: yosef36 (~yosefweis@2001:470:69fc:105::1:e501)
[15:40:52] *** Joins: Hansuke[m] (~hansukema@2001:470:69fc:105::1:86bb)
[15:41:04] *** Joins: GiorgiGzirishvil (~drnmatrix@2001:470:69fc:105::1:d1e5)
[15:41:04] *** Joins: avesatanas[m] (~avesatana@2001:470:69fc:105::1:d083)
[15:41:16] *** Joins: comment_system[m (~commentsy@2001:470:69fc:105::1:ca7a)
[15:42:39] <PJBoy> why make a Base<T> instead of a T?
[15:42:52] *** Joins: MetroWind[m] (~mwdarksai@2001:470:69fc:105::1:e3a7)
[15:44:19] <ville> Guest53: line 31 is always going to slice it. the idea with crtp is that you handle things only through pointer/reference and then your casts work out
[15:44:58] <PJBoy> not if you make a `T b = T();` :/
[15:45:45] <PJBoy> I don't see any reason for Executor to be aware of the CRTP design choice
[15:46:32] <Guest53> because i need to call serialize line 34
[15:46:51] <PJBoy> and?
[15:47:19] <PJBoy> anything that works on the sliced base object will work on the unsliced derived object https://godbolt.org/z/zffdn6qTE
[15:47:39] *** Joins: andreasbuhr (~quassel@p549db996.dip0.t-ipconnect.de)
[15:47:39] *** Quits: andreasbuhr (~quassel@p549db996.dip0.t-ipconnect.de) (Client Quit)
[15:47:49] *** Parts: MetroWind[m] (~mwdarksai@2001:470:69fc:105::1:e3a7) ()
[15:48:21] *** Joins: xiongxin (~Thunderbi@117.136.33.131)
[15:49:13] *** Joins: epony (epony@user/epony)
[15:52:29] *** Joins: Guest94 (~Guest94@2a02:fe0:c140:6061:948a:8e3d:dbc9:7591)
[15:52:31] <Guest53> PJBoy: do i  need also a static_cast on top of that ? https://godbolt.org/z/n5ends9cj
[15:53:59] <Administrator__> what is that ?
[15:54:04] <Administrator__> PJBoy
[15:54:23] <Administrator__> what is cout guys ?
[15:55:22] <vaasu> an object used to send strings to standard output
[15:55:52] *** Joins: gareppa (~gareppa@user/gareppa)
[15:56:27] <Guest94> I have somewhat of a weird question about how to best structure code c++ code. I have a project where data about a location is encoded in a uint64_t. I do bit twiddling to extract the information that is wanted. Right now I've just defined a type alias like `using X = uint64_t;` and I've added a bunch of functions to operate on it. But these
[15:56:27] <Guest94> functions are just in the normal namespace of my application, so it's starting to get a bit ugly. There are two approaches I've thought about so far. The first is to rewrite X into a proper class, with only a single datamember. Then I can create static methods on that class and now the functions will be scoped nicely. Like X::Level and X::Height.
[15:57:10] <Guest94> The second is to use a namespace and continue using just inline functions, but then the code gets a bit early whenever i need to use the type as a parameter. (X::X as an example)
[15:57:45] <PJBoy> Guest53, why would you possibly need that?
[15:58:01] *** Quits: gareppa (~gareppa@user/gareppa) (Remote host closed the connection)
[15:58:05] <Guest94> The first approach seems more clean, but I don't really know how that will effect how effective it is to pass into functions and so forth. Will the compilers be smart enough to just realize that it's just a single uint64_t that is being operated on and just inline everything or would there be a hit?
[15:58:05] <Guest53> I see
[15:58:17] *** Quits: CFP- (~CFP-@2a02:c7f:180d:e500:84a6:1d07:1d35:a842) (Quit: Client closed)
[15:58:48] <ville> Guest94: some abi can't pass objects of user-defined types in registers
[15:59:31] *** Quits: Administrator__ (~hamburger@user/hamburger) (Ping timeout: 245 seconds)
[15:59:48] <urdh> i don't see why the first approach would be cleaner tbh
[16:00:11] <ville> Guest94: so yes you can find examples where there could possibly be a performance hit, but as always if you care about performance then you're required to measure it before you are allowed to make any claims
[16:00:14] <urdh> a class with only static member functions is just a namespace with a stupid name
[16:00:38] <Guest94> That is fair urdh, I guess they don't need to be static
[16:00:58] *** Joins: hamburger (~hamburger@user/hamburger)
[16:00:59] <urdh> if they're not static and the class doesn't have member variables, that's even worse!
[16:01:18] <Guest94> And that is also very true ville, this is less an exercise in optimizing this than in trying to understand if there are any good approaches in C++ for this sort of stuff
[16:01:28] <Guest94> It would have a single member variable, which would just be a uint64_t
[16:01:30] <ville> urdh: it'd have the uint as member: "proper class, with only a single datamember"
[16:01:59] <urdh> ville: I understood it as having only the *typedef* as a member?
[16:02:26] <ville> heh ok. guess you dropped the data in "datamember"
[16:02:56] <Guest94> Then I expresseed myself poorly, I meant with a single uint64_t as a member variable 😅
[16:03:21] <urdh> well in that case i don't see how a namespace could be a solution at all?
[16:04:03] *** Joins: zer0x (~zer0x@1.55.210.186)
[16:04:12] <Guest94> namespace X { using X = uint64_t; inline int Level(X id) { ...} }
[16:04:17] <ville> urdh: namespace all the related functions. so you call them: nn::f(x); just use it as an organizational tool
[16:04:19] *** Joins: jplejacq (~jplejacq@24.224.90.176)
[16:04:28] <ville> urdh: your other stuff mightbe in mm::
[16:04:30] <urdh> ville: so much text, i only skimmed it, must've skipped that part yeah
[16:05:13] <urdh> sure but it's either a thing of which you can have many (class) or it's a collection of related but independent functions (namespace)
[16:05:25] <ville> Guest94: there's a 3rd(?) option of: namespace nn { struct aa{}; void f(aa); }, then let adl pick up the functions
[16:06:02] <Guest94> I'm quite new to c++, so I'm afraid I don't know what that means ville
[16:06:04] <ville> Guest94: you can then call it: nn::aa x{}; f(x); adl will find nn::f()
[16:06:15] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:950:287b:c4be:ac00)
[16:06:20] <ville> !adl
[16:06:21] <nolyc> Argument Dependent Lookup used to be referred to as Koenig lookup . http://en.wikipedia.org/wiki/Argument_dependent_name_lookup
[16:06:39] *** Quits: proller (~p@2a02:6b8:b081:b646::1:3c) (Ping timeout: 252 seconds)
[16:06:42] <urdh> in this case i'd probably lean toward a class, just because you get stronger typing
[16:06:44] <Guest94> Ah ok! But won't that still leave the functions in the global namespace?
[16:06:58] <urdh> or perhaps free functions operating on a struct instead of a typedef
[16:07:06] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[16:07:08] <ville> Guest94: no. like i showed f() was in a namespace called nn
[16:07:14] <Guest94> Yeah, I'm leaning there too urdh, because it would give stronger typing, but wanted to check the implications
[16:08:04] <Guest94> To me that seems even more confusing ville, as I would have to know of all the function names?
[16:08:05] <hamburger> guys
[16:08:09] <hamburger> what is variable ?
[16:08:23] <ville> Guest94: https://godbolt.org/z/YMd14zzz3
[16:08:40] <ville> Guest94: i don't know what that means
[16:09:13] <ville> hamburger: your programming book will answer that
[16:09:27] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:f9b9:c2d3:ad62:759d) (Ping timeout: 250 seconds)
[16:09:28] <Guest94> Ahh ok! I get it now, so F would still be free to be a global function. This seems nice, but I dislike that it eliminates discovrability alot
[16:09:40] <Guest94> But I didn't know about that, thanks so much for making an example!
[16:09:54] <ville> you can still call it as nn::f(x)
[16:10:10] <Guest94> This is related to why some functions have `using std::swap` in the beginning of them?
[16:10:49] <Guest94> Bad phrasing. Is this related to*
[16:11:00] <ville> yes, that is used to aid adl
[16:11:18] *** Quits: xiongxin (~Thunderbi@117.136.33.131) (Read error: Connection reset by peer)
[16:12:03] <Guest94> Ok, thanks a bunch! It's not really an option to rewrite anything at this point, but in the future I'll use a class instead, and measure
[16:12:58] <ville> well if you make no claim about performance and just admit it's a stylistic choice then no need to measure
[16:15:07] <Guest94> When you said before that some ABI's don't allow passing user-defined types in registers, then I'm not sure I understand what an ABI is. I thought an ABI was something that OSes like linux and windows decided, which was how you interacted with their code, but the C++ compiler was free to do whatever it wanted with code it controlled
[16:15:29] <Guest94> Does the C++ standard define an ABI then?
[16:15:58] <ville> no it doesn't.
[16:17:06] <hamburger> ah i see
[16:17:09] <ville> https://itanium-cxx-abi.github.io/cxx-abi/abi.html is an example of what are all the kinds of things abi defines
[16:17:12] <hamburger> if you don't know variable
[16:17:18] <hamburger> how you code in c++ ?
[16:17:26] <hamburger> so elite one lah
[16:17:34] <hamburger> From The Most High
[16:17:53] <ville> hamburger: learn by siging up for a course or perhaps get a book and follow its advice
[16:18:15] *** Quits: abode_ (~abode@92.99.205.99) (Remote host closed the connection)
[16:19:16] *** Quits: Guest53 (~Guest53@155.190.35.5) (Quit: Client closed)
[16:19:45] <Guest94> This might be offtopic here, so stop me at any time, but does that mean that GCC and CLang both define their own ABIs? If so, does that mean it's impossible to compile half a project with clang and the rest with gcc?
[16:20:52] <ville> the platform defines it that they are compiling for
[16:21:04] <ville> and yes starting to be on-topic for...
[16:21:05] <ville> !general
[16:21:07] <nolyc> #C++-general for algorithms, libraries, practices, projects, tools etc.
[16:21:45] <Guest94> Ah sorry, I see this whole convo has been offtopic then. I'll remember that next time, thanks ;)
[16:22:12] *** Joins: bebyx (~Thunderbi@user/bebyx)
[16:22:52] *** Quits: hamburger (~hamburger@user/hamburger) (Ping timeout: 260 seconds)
[16:23:55] <ville> but even so there's enough wiggle room for them to not be necessarily compatible: https://old.reddit.com/r/cpp/comments/slfugx/clang_with_gcc_abi_compatibility_with_stdc17/
[16:26:48] *** Quits: climax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[16:30:40] *** Joins: xiongxin (~Thunderbi@2409:8954:2e14:133b:d7a1:eab5:64b4:5441)
[16:32:35] <urdh> so, using direct initialization (with parens) for literally every declaration is apparently a thing some people do
[16:33:39] <urdh> that and all the iso646 keywords makes for an unpleasant cognitive load right now :<
[16:36:48] *** Quits: Guest6959 (~Guest69@ip72-199-239-162.sd.sd.cox.net) (Quit: Connection closed)
[16:38:50] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[16:41:00] *** Quits: FergusL (~freenode4@user/fergusl) (Read error: Connection reset by peer)
[16:41:03] *** Joins: FergusL2 (~freenode4@23.247.118.78.rev.sfr.net)
[16:42:14] *** Joins: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3)
[16:44:38] *** Joins: samuelbernardo (~samuelber@nata01.lip.pt)
[16:44:40] *** tonitch_ is now known as tonitch
[16:47:15] *** Quits: sujeet (sujeet@freeboson.org) (Quit: bye)
[16:49:11] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:49:51] *** Joins: sujeet (sujeet@freeboson.org)
[16:50:33] <PJBoy> I do that
[16:50:37] <PJBoy> the direct init thing
[16:51:08] <PJBoy> I'd argue it reduces cognitive load though
[16:53:53] <PJBoy> well I also use a lot of value initialisation
[16:55:14] *** Joins: Prof_Dumbledore (~Prof_Dumb@2409:4042:4e1b:d529:679f:4301:9f7b:549e)
[16:56:38] *** Joins: seninha (~seninha@user/seninha)
[16:56:51] <urdh> i dunno, with parens i find it difficult to distinguish variable declarations from all the other parens in the code (function decls, function calls, ...)
[16:57:37] *** Quits: xiongxin (~Thunderbi@2409:8954:2e14:133b:d7a1:eab5:64b4:5441) (Ping timeout: 256 seconds)
[16:59:36] *** Joins: N4buc0- (~N4buc0@2804:7f4:348b:29b4:5011:9510:72e2:3e9d)
[17:01:45] <PJBoy> but it's consistent with other declarations that use parentheses
[17:02:03] <PJBoy> which is most of them unless you use braces
[17:02:47] *** Quits: yano (~yano@ircpuzzles/staff/yano) (Quit: WeeChat, the better IRC client, https://weechat.org/)
[17:03:58] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[17:04:11] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[17:05:15] *** Joins: yano (~yano@ircpuzzles/staff/yano)
[17:06:48] <urdh> hm, i don't get it
[17:07:57] <PJBoy> like most of the time you're doing `std::vector<A> a(size);` and `std::string str(size, fill_char);` and whatnot
[17:08:18] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[17:08:20] <urdh> i just see something like `uint32_t sector(address / sectorSize())` and my mind pauses for a second before going "oh, you mean `uint32_t sector = address / sectorSize()`!"
[17:08:28] <PJBoy> and so to me it seems like `T obj(arg);` makes perfect sense
[17:08:41] <ville> sticking {} there makes it visually more distinct
[17:09:07] <urdh> then again, i would do `auto x = std::string(size, fill_char)` in your example
[17:09:09] <ville> and possibly requires living in ignorance and not aknowledging std::initializer_list exists
[17:09:30] *** PJBoy is now known as Guest9198
[17:09:30] *** Quits: Guest9198 (~PJBoy@user/pjboy) (Killed (strontium.libera.chat (Nickname regained by services)))
[17:09:32] *** Joins: PJBoy (~PJBoy@user/pjboy)
[17:09:40] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[17:09:48] <urdh> i pretty much only do direct init for things like `std::unique_lock lck{mutex}`
[17:09:56] <urdh> which i realize is horribly inconsistent
[17:10:48] <PJBoy> a problem with = for even single arg ctors is that it requires a converting ctor
[17:11:23] *** Quits: kevr (~kevr@user/kevr) (Remote host closed the connection)
[17:11:44] *** Joins: kevr (~kevr@user/kevr)
[17:11:53] *** Quits: Enitin (~Enitin@82.180.145.226) (Ping timeout: 260 seconds)
[17:12:02] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 272 seconds)
[17:12:15] *** Joins: Enitin (~Enitin@82.102.22.84)
[17:12:48] <PJBoy> that presents a nuance of `auto obj = a(args...);` I haven't thought of before
[17:13:01] <PJBoy> you can't tell if `a` is a function or type without help
[17:16:03] <furrymcgee> no?
[17:16:50] <urdh> that's fair i guess
[17:17:07] *** Quits: dsrt^ (~dsrt@96-91-136-49-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[17:17:19] *** Quits: sss[m] (~sss123nex@2001:470:69fc:105::1:ceac) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: bitonic (~bitonic@2001:470:69fc:105::1812) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: euphrates[m] (~euphrates@2001:470:69fc:105::fbb5) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: MarcoAlvarez[m] (~surakgnom@2001:470:69fc:105::2dc) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: zygonsisyphus[m] (~zygonsisy@2001:470:69fc:105::482) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: tenbitcomb[m] (~tenbitcom@2001:470:69fc:105::1:a8da) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: avesatanas[m] (~avesatana@2001:470:69fc:105::1:d083) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: DeaDSouL[m] (~deadsoulm@2001:470:69fc:105::1:c0de) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: yosef36 (~yosefweis@2001:470:69fc:105::1:e501) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: comment_system[m (~commentsy@2001:470:69fc:105::1:ca7a) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: hachikuji[m] (~hachikuji@2001:470:69fc:105::1:dc1a) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: latterly[m] (~latterlym@2001:470:69fc:105::1:922f) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: Hansuke[m] (~hansukema@2001:470:69fc:105::1:86bb) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: yosef[m] (~yosefmxvl@2001:470:69fc:105::1:e4d9) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: aLeSD[m] (~alambicco@2001:470:69fc:105::1:452a) (Quit: Bridge terminating on SIGTERM)
[17:17:19] *** Quits: GiorgiGzirishvil (~drnmatrix@2001:470:69fc:105::1:d1e5) (Quit: Bridge terminating on SIGTERM)
[17:17:57] <PJBoy> the argument for using `T obj = expr;` is that it's familiar with other languages
[17:18:20] <PJBoy> which is my argument for left side const :)
[17:19:51] *** Joins: zibolo (~quassel@global-deiInside018.dei.polimi.it)
[17:20:48] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[17:20:58] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[17:22:29] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 250 seconds)
[17:22:29] <urdh> i mean, i see the argument for direct-init (declarations will always look the same/similar), but i dislike the trade-off (declarations will look like everything else)
[17:22:43] <urdh> the iso646 keywords, though...
[17:22:44] *** Joins: MarcoAlvarez[m] (~surakgnom@2001:470:69fc:105::2dc)
[17:22:44] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[17:22:44] *** Joins: zygonsisyphus[m] (~zygonsisy@2001:470:69fc:105::482)
[17:22:44] *** Joins: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4)
[17:22:56] *** Joins: hachikuji[m] (~hachikuji@2001:470:69fc:105::1:dc1a)
[17:22:56] *** Joins: bitonic (~bitonic@2001:470:69fc:105::1812)
[17:23:08] *** Joins: yosef[m]1 (~yosefmxvl@2001:470:69fc:105::1:e4d9)
[17:23:20] *** Joins: latterly[m] (~latterlym@2001:470:69fc:105::1:922f)
[17:23:20] *** Joins: DeaDSouL[m] (~deadsoulm@2001:470:69fc:105::1:c0de)
[17:23:21] *** Joins: euphrates[m] (~euphrates@2001:470:69fc:105::fbb5)
[17:23:42] *** Joins: tenbitcomb[m] (~tenbitcom@2001:470:69fc:105::1:a8da)
[17:23:44] *** Joins: sss[m] (~sss123nex@2001:470:69fc:105::1:ceac)
[17:23:45] *** Joins: aLeSD[m] (~alambicco@2001:470:69fc:105::1:452a)
[17:23:45] *** Joins: yosef36 (~yosefweis@2001:470:69fc:105::1:e501)
[17:23:45] *** Joins: Hansuke[m] (~hansukema@2001:470:69fc:105::1:86bb)
[17:23:45] *** Joins: GiorgiGzirishvil (~drnmatrix@2001:470:69fc:105::1:d1e5)
[17:23:45] *** Joins: avesatanas[m] (~avesatana@2001:470:69fc:105::1:d083)
[17:23:45] *** Joins: comment_system[m (~commentsy@2001:470:69fc:105::1:ca7a)
[17:24:18] <PJBoy> yeah I don't like 'em
[17:26:59] <rpav> left const is also more prominent (this goes both ways... easier to see if you _forgot_ to specify it), and can be universal with e.g. `ptr<T>`
[17:27:23] <rpav> vaguely analogous to how we generally avoid multiple declarations on a line, probably avoid multiple difficult-to-parse const-placements on a line
[17:28:53] <rpav> though this is really tangential... my thought is it's too bad it's as much line-noise and work to make something const as it is
[17:29:23] *** Joins: MasterK (~MK@188.26.11.19)
[17:29:44] <rpav> K<int> x; // 🤔
[17:30:19] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[17:30:42] <furrymcgee> var x = expr;
[17:31:43] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.5)
[17:31:52] *** Joins: Guest53 (~Guest53@155.190.35.5)
[17:32:31] <Guest53> Hi All
[17:32:38] <Guest53> https://wandbox.org/permlink/hcf67L751Wk8oOXG
[17:33:23] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[17:34:14] <rpav> furrymcgee: i've contemplated that but it requires writing a full value class and i've been lazy .. but the benefit of va[lr]<T>/ptr<T>/ref<T> specifying exactly what you'd get are probably worth it
[17:35:22] *** Quits: hirish (~hirish@ip85.ip-137-74-20.eu) (Quit: ZNC - https://znc.in)
[17:35:51] <rpav> Guest53: is that a question?
[17:36:26] <rpav> CRTP is nice, just watch out using static_cast<Derived>(this) in Base's ctor
[17:36:35] <Guest53> Hi Alipha: line 22, 23, 24... do you know if these lines are necessary to make that CRTP safer ?
[17:36:56] <Guest53> question for all, and you rpav
[17:37:09] <rpav> static_cast<Der*> will fail if it is not derived
[17:37:51] *** Quits: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3) (Ping timeout: 245 seconds)
[17:38:26] <Guest53> but this failure will be detected by the compiler, so fine
[17:38:43] *** Joins: Rayke (rayke@user/rayke)
[17:39:37] <rpav> oh also instantiating it will fail if the derived implementation is private
[17:39:48] <rpav> my screen cut that off a bit
[17:41:07] *** Joins: hirish (~hirish@ip85.ip-137-74-20.eu)
[17:43:23] *** Joins: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca)
[17:43:31] *** Quits: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca) (Remote host closed the connection)
[17:43:53] <Guest53> i think that the above solution, ie: https://wandbox.org/permlink/hcf67L751Wk8oOXG gives solution when derived class hides method of the base class
[17:45:26] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[17:49:00] *** Quits: N4buc0- (~N4buc0@2804:7f4:348b:29b4:5011:9510:72e2:3e9d) (Remote host closed the connection)
[17:49:05] *** Joins: N4buc0_ (~N4buc0@189.115.86.130)
[17:49:58] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[17:53:39] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[17:53:53] *** Quits: MajorBiscuit (~MajorBisc@86.88.79.148) (Ping timeout: 260 seconds)
[17:53:53] <rpav> Guest53: did you try it without?
[17:54:14] *** Joins: proller (~p@2a02:6b8:b081:6402::1:6)
[17:54:27] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[17:54:58] *** Quits: zibolo (~quassel@global-deiInside018.dei.polimi.it) (Ping timeout: 260 seconds)
[17:56:26] <rpav> e.g. `<I> struct B { void f() { static_cast<I*>(this)->impl(); } }; struct D : B<D> { protected: void impl(); }; /* error when f() called */`
[18:01:48] *** Quits: Prof_Dumbledore (~Prof_Dumb@2409:4042:4e1b:d529:679f:4301:9f7b:549e) (Ping timeout: 240 seconds)
[18:01:55] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[18:02:46] <Guest94> Hey! I have a question about evaluation order of smart pointers. I have a `unique_ptr<BASE> tn` which I have to check if contains a pointer to specific subclass. I've done this by using `tn.get()` and `dynamic_cast`. This is all fine, as I'm not storing the result of `tn.get()` anywhere, but I have a function which takes in a const reference to the
[18:02:46] <Guest94> subclass, and produces a `uniqe_ptr<SomeOtherSubclass>`. If `tnd` is the result of the dynamic cast, is it safe to do `tn = createNewSub(*tnd)` or will the old value of `tn` be invalidated first, then `createNewSub` called, and then the assignment be made?
[18:03:24] <Guest94> Or is this up to the compiler, and I should split it to two lines: `auto newTn = createNewSub(*tnd); tn = std::move(newTn)`?
[18:05:12] <rpav> think about it mechanically .. the move ctor of unique_ptr is what frees the old value and assigns the new value; this is run once and its execution is not "split" midway through the function for some reason
[18:05:59] <rpav> thus the new value must be fully initialized, and any prior value would have remained until the call
[18:06:02] *** Joins: xiongxin (~Thunderbi@117.136.40.175)
[18:06:08] *** Quits: zer0x (~zer0x@1.55.210.186) (Ping timeout: 260 seconds)
[18:06:36] <rpav> that said it seems a bit dubious to take one unique_ptr<T> and copy/assign a new instance to it
[18:06:52] <rpav> based directly on the old one; are you just trying to reconfigure the object?
[18:07:33] <Guest94> No, the new type of subobject is initialized by the old one. It's a node structure, where I'm going from a datanode to a composite node
[18:07:52] *** Quits: zeenk (~zeenk@2a02:2f04:a110:7d00:2011:cfed:bad7:3c94) (Ping timeout: 260 seconds)
[18:08:12] <Guest94> (and thanks for the answer to the above question, that makes a lot of sense)
[18:08:30] <rpav> ah
[18:08:57] <rpav> (i suppose it would also make sense in context of things like a linked list to insert a node with the old one being the new node's next or somesuch)
[18:10:05] *** Quits: Mat_42 (~mat_42@2a02:21b0:644f:d96f:602c:3e29:2572:190c) (Remote host closed the connection)
[18:10:39] *** Joins: Mat_42 (~mat_42@2a02:21b0:644f:d96f:cc9b:fd51:bab3:7103)
[18:13:05] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[18:13:20] <Guest53> rpav: do you have an idea what line 5 emans ?
[18:13:29] <Guest53> *means
[18:13:49] *** Joins: bindu (~bindu@user/bindu)
[18:15:28] *** Quits: Mat_42 (~mat_42@2a02:21b0:644f:d96f:cc9b:fd51:bab3:7103) (Ping timeout: 260 seconds)
[18:15:53] *** Joins: xiongxin1 (~Thunderbi@117.136.39.222)
[18:16:00] *** Joins: Mat_42 (~mat_42@2a02:21b0:644f:d96f:cc9b:fd51:bab3:7103)
[18:16:25] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[18:18:09] *** Joins: slidercrank (~slidercra@user/slidercrank)
[18:18:29] <rpav> it looks like it's extracting the class from a class member function pointer
[18:18:31] <rpav> well
[18:18:35] *** Quits: Mat_42 (~mat_42@2a02:21b0:644f:d96f:cc9b:fd51:bab3:7103) (Remote host closed the connection)
[18:18:47] *** Joins: Mat_42 (~mat_42@2a02:21b0:644f:d96f:602c:3e29:2572:190c)
[18:19:11] *** Quits: xiongxin (~Thunderbi@117.136.40.175) (Ping timeout: 252 seconds)
[18:19:11] *** xiongxin1 is now known as xiongxin
[18:19:20] <rpav> i think it might mean non-constexpr not non-const but i'm not sure
[18:21:10] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[18:22:23] <rpav> oh sorry i'm half asleep
[18:22:52] <rpav> it's the default fallback if you _don't_ pass it a member function pointer
[18:24:19] <rpav> (or the type of one, to be 100% accurate ... e.g. get_class<decltype(&C::mem)> is what it wants, but if you pass like get_class<C> it will fall back to the default and error .. probably the class ought to have a better name and better error ;)
[18:25:10] *** Joins: the_lanetly_052_ (~the_lanet@185.30.90.65)
[18:27:39] *** Joins: Payam59 (~Payam@138.106.57.131)
[18:27:40] <Guest53> good... but what's the need of sizeof over here
[18:28:00] <Guest53> we can put false directly right ?
[18:28:20] <Guest53> line static_assert(sizeof(MemFun) && false, "get_class was not passed a non-const member function");
[18:28:29] <Guest53> could be
[18:28:38] <Guest53> static_assert(false, "get_class was not passed a non-const member function");
[18:28:51] <Guest53> or ?
[18:29:02] *** Quits: Tempesta (~Tempesta@user/tempesta) (Ping timeout: 265 seconds)
[18:31:21] *** Joins: spikhoff (~spikhoff@38-73-219-213.sta.estpak.ee)
[18:34:38] <Alipha> Guest53: had you had lines 22-24 from https://wandbox.org/permlink/hcf67L751Wk8oOXG in your https://godbolt.org/z/hf9fWqxfW paste, then you would have gotten a compile error, so yes, it's safer.
[18:36:28] *** Quits: JohnMS_WORK (~kvirc@194.110.240.100) (Ping timeout: 260 seconds)
[18:39:35] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Ping timeout: 240 seconds)
[18:40:04] *** Quits: spikhoff (~spikhoff@38-73-219-213.sta.estpak.ee) (Quit: Leaving)
[18:40:20] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[18:41:52] *** Joins: lalitmee (~lalitmee@180.94.33.235)
[18:42:26] *** Joins: zy (~cc@user/zy)
[18:43:07] *** Joins: cube1 (~cube1@89-160-183-39.du.xdsl.is)
[18:43:26] <Alipha> Guest53: the `sizeof(T) &&` nonsense is needed. If you remove it, you'll get a compile error. (I call it "nonsense" because I think it's a dumb rule in c++ which makes it required.) See, the compiler will evaluate static_assert conditions as soon as possible, and so `static_assert(false);` will get evaluated immediately on the first pass through the file, before T is known, and will always produce a compile
[18:43:28] <Alipha> error because false is false. And so, `static_assert(sizeof(T) && false);` is making the condition dependent upon T, which will delay the static_assert evaluation until T is known. But then that static_assert will never get evaluated (when get_class is used properly) because the template specialization (line 9)will end up matching instead
[18:44:34] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[18:44:41] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[18:44:41] *** ChanServ sets mode: +v npaperbot
[18:46:12] <Alipha> <Guest53> i think that the above solution, ie: https://wandbox.org/permlink/hcf67L751Wk8oOXG gives solution when derived class hides method of the base class -- yes, line 27 (along with lines 3-11) detect/prevent hiding. Lines 22-24 prevent slicing.
[18:47:46] *** Quits: xiongxin (~Thunderbi@117.136.39.222) (Read error: Connection reset by peer)
[18:49:03] *** Joins: zeenk (~zeenk@2a02:2f04:a312:5400:bab:b48f:4ed5:7407)
[18:49:33] <cube1> Why are the terrorists (the C++ language designers) introducing yet more special syntax ('deducing this') to fix an issue with other special syntax (member functions), when an attribute on the function would have sufficed that would mark the first parameter as the 'this' param?
[18:50:10] <cube1> Compare: "void foo(this X const& self)" vs [[this]] void foo(X const& self)"
[18:50:35] *** Joins: reset (~reset@user/reset)
[18:51:14] <Oxyd> Well, what rationale is given by the papers proposing that syntax?
[18:51:39] *** Quits: Green_ (~Green-@h-85-24-185-116.A189.priv.bahnhof.se) (Ping timeout: 252 seconds)
[18:53:30] *** Joins: zeenk2 (~zeenk@2a02:2f04:a313:b800:d260:40a8:2db3:e9ec)
[18:53:50] *** Quits: zeenk (~zeenk@2a02:2f04:a312:5400:bab:b48f:4ed5:7407) (Ping timeout: 252 seconds)
[18:55:05] *** Joins: Green_ (~Green-@h-85-24-185-116.A189.priv.bahnhof.se)
[18:56:09] <PJBoy> attributes are ignorable
[18:56:17] <PJBoy> so they should never be used for any meaningful change
[18:56:20] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Quit: Leaving)
[18:56:58] *** Joins: gooooose (~goose@111.199.80.15)
[18:57:07] *** Quits: lalitmee (~lalitmee@180.94.33.235) (Quit: Leaving)
[18:57:20] <PJBoy> I don't see why the attribute version would be any better anyway
[18:57:24] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[18:57:42] <urdh> annotating the function rather than the argument seems like it would be worse
[18:57:56] *** Joins: zeenk (~zeenk@2a02:2f04:a204:c800:8271:db23:e63b:d87a)
[18:58:19] *** Quits: zeenk2 (~zeenk@2a02:2f04:a313:b800:d260:40a8:2db3:e9ec) (Ping timeout: 256 seconds)
[18:58:41] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[18:58:45] <urdh> separates the attribute ("this is `this`") from the thing it applies to (the argument)
[18:59:19] *** Quits: jose_ (~goose@111.199.80.15) (Ping timeout: 246 seconds)
[18:59:36] <cube1> Yep attributes are indeed ignorable. And that seems like a problem to me. I'd still go with an ignorable attribute that's rushed through compilers
[19:01:15] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Client Quit)
[19:02:31] *** Quits: Guest94 (~Guest94@2a02:fe0:c140:6061:948a:8e3d:dbc9:7591) (Quit: Client closed)
[19:02:35] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 240 seconds)
[19:04:57] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[19:06:20] <ville> PJBoy: possible mechanism for open types allowing x.f() syntax for all functions
[19:06:58] *** Joins: jose_ (~goose@111.199.80.15)
[19:07:06] <PJBoy> what is?
[19:07:11] <PJBoy> attributes?
[19:07:24] <ville> PJBoy: an attribute that dirtied the function has being a "member"
[19:07:45] <ville> err as
[19:07:53] <PJBoy> you wouldn't want an attribute for that
[19:08:05] <Guest53> Alipha: Excellent
[19:08:11] <ville> PJBoy: it would be doable
[19:08:20] <PJBoy> it'd be silly though
[19:08:31] *** Quits: zeenk (~zeenk@2a02:2f04:a204:c800:8271:db23:e63b:d87a) (Ping timeout: 256 seconds)
[19:08:40] <ville> you're now just being silly and not realizing that you would then change attributes not to be ignorable
[19:08:42] <PJBoy> like your code may or may not compile, but either way you get a bad error message
[19:08:59] <PJBoy> the whole point of attributes is to be ignorable
[19:09:07] <ville> doesn' have to be
[19:09:27] <PJBoy> if you don't want it to be ignorable, don't use an attribute
[19:09:30] <cube1> But if the whole point is to be ignorable, then you lack a language feature to alter semantics without syntax change.
[19:09:42] *** Quits: gooooose (~goose@111.199.80.15) (Ping timeout: 260 seconds)
[19:09:46] <cube1> So every little flag to the compiler needs new syntax then
[19:09:47] <PJBoy> why would you want to take away the defining feature of a language feature
[19:09:50] <ville> PJBoy: dunno why you're so hung up on the current definition
[19:10:09] <PJBoy> I just understand the purpose of the feature
[19:10:13] *** Joins: Enitin (~Enitin@82.180.145.228)
[19:10:24] <PJBoy> like why don't we propose that int declares a floating point type?
[19:10:31] <PJBoy> because the whole point of an int is to declare an integer
[19:10:52] <PJBoy> you don't just randomly change the entire reason for a feature to exist
[19:10:56] <cube1> I don't mind the 'this' if the lack of it means a static function. All member functions would have 'this' and all fields accessed through a regular parameter, so no special lookup rules. This would be very pretty imo.
[19:12:13] <PJBoy> why would you want to alter semantics without syntax change?
[19:13:10] <cube1> Well for example, how would we get truly inline functions? Functions with no addresses. Really needed. We don't want to rely on the optimizer removing std::move. We'd want an attribute on the function, instead of yet more new syntax
[19:13:33] <PJBoy> by making a true_inline keyword for example
[19:14:03] <urdh> force_inline, you mean
[19:14:03] *** Joins: zeenk (~zeenk@79.115.191.105)
[19:14:04] <PJBoy> or possibly a `static_assert(std::is_inline())` type feature
[19:14:07] <cube1> But why? That takes learning way more than [[true_inline]]
[19:14:18] <PJBoy> because attributes are ignorable
[19:14:26] <PJBoy> also what?
[19:14:31] <cube1> Well then first introduce a non-ignorable attribute syntax
[19:14:37] <PJBoy> how does not having the [[]] make it easier to learn?
[19:14:41] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Quit: For the Red Army!)
[19:14:43] <PJBoy> *harder
[19:14:57] <urdh>  cube1: we have that, it's called keywords
[19:15:10] <urdh> see virtual, final, override, const, ...
[19:15:50] <fiesh> does force_inline even make sense?  it would seem to me the compiler is already free to *introduce* functions calls and new functions as it likes under the as-if rule, so there really isn't even the concept of something being inline or not at an assembly level?
[19:15:58] *** Joins: gooooose (~goose@111.199.80.15)
[19:16:18] <urdh> meh, people like to think they can out-smart the compiler
[19:16:26] <cube1> OH NO not this again
[19:16:30] <cube1> yes we can outsmart the bloody compiler
[19:16:36] <ville> urdh: and that's not working out very well. these days if you decorate a function "maximally" it just becomes keyword salad
[19:17:01] <PJBoy> adding square brackets doesn't reduce the salady nature of function decoration
[19:17:11] <urdh> ville: sure you can discuss whether the current defaults are sensible, but it doesn't become less salad with attributes
[19:17:23] <cube1> it is a serious issue that we introduce tons and tons of tiny function calls that need to be undone. That's just utterly stupid. std::move should not be a non-inline function.
[19:17:27] <PJBoy> just look at [[nodiscard]]
[19:17:44] <ville> yes, they should have made the attributes nonignorable and stuck the keywords there
[19:18:03] <ville> then you've nice way of sticking the attribute list on one line and that sort of thing
[19:18:13] <PJBoy> why would they need to make attributes non ignorable if nodiscard was a keyword?
[19:18:14] <ville> it scales better. it looks like less of a salad
[19:18:29] <urdh> sort of a fair point, but you can do that with keywords as well, no?
[19:18:29] <PJBoy> you can already stick your keywords on a one line
[19:18:39] <ville> even the java @attribute syntax is better in that regard
[19:18:40] *** Inline__ is now known as Inline
[19:18:42] *** Quits: jose_ (~goose@111.199.80.15) (Ping timeout: 272 seconds)
[19:18:46] <imMute> cube1: std::move() is just a cast.  if your compiler puts an actual function call in for that, even without optimizations disabled.... well, you might need a better compiler
[19:18:54] <PJBoy> none of these arguments are proposing adding double square brackets very well
[19:19:13] <imMute> s/without/with/
[19:19:27] <ville> PJBoy: you can't. the cv qualifiers on this and say static are pretty hard to dig out so they are not on the same line as rest of the function delcaration
[19:19:41] <ville> PJBoy: whilst being on single line them selves
[19:19:52] <PJBoy> what are you talking about
[19:20:06] <ville> static void f() const;
[19:20:08] <PJBoy> newlines and other whitespace are converted into single spaces by the preprocessor
[19:20:08] *** Joins: zer0x (~zer0x@1.55.210.186)
[19:20:18] <PJBoy> so you can put in newlines wherever you want
[19:20:30] <ville> you can't currently dig out the "static" and "const" into a line of their own
[19:20:40] <PJBoy> that wouldn't change with attributes
[19:20:46] <imMute> ville: const no, but that static can bee on it's own line.  I do that all the time
[19:20:49] <ville> of course it would
[19:21:03] <urdh> cube1: also, std::move is a constexpr function template, so it _is_ inline (implicitly)
[19:21:16] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[19:21:27] <PJBoy> [[static, void]] f() [[const]] has just as many valid permutations of whitespace
[19:21:27] <ville> PJBoy: whatever the attribute syntax would be: @static, this const \n void f();
[19:21:33] *** Joins: useful_idiot7 (~useful_id@gateway/vpn/pia/usefulidiot/x-43226899)
[19:21:34] *** Joins: CalamityBlue (~CalamityB@user/CalamityBlue)
[19:21:35] <cube1> imMute: std::move is a full fledged function (or template resulting in functions) and that's a problem. Maybe the compiler bakes in special knowledge for this function, but it won't for others that you know need to be always inlined.
[19:21:45] <ville> PJBoy: you're just too limited with your imagination once again
[19:21:50] <cube1> this is a serious problem
[19:22:17] <imMute> cube1: lmao. std::move() is a real function that dumb compilers can't inline and that's a *serious* problem.
[19:22:18] <PJBoy> ville, my imagination says that there's a textual transformation from whatever you're thinking of to the same thing without square brackets
[19:22:52] <PJBoy> which would keep the integrity of attributes
[19:23:31] *** Quits: useful_idiot (~useful_id@gateway/vpn/pia/usefulidiot/x-43226899) (Ping timeout: 260 seconds)
[19:23:32] *** useful_idiot7 is now known as useful_idiot
[19:25:09] *** Joins: Tempesta (~Tempesta@user/tempesta)
[19:26:07] <PJBoy> anyways, it's fine for std::move to be declared [[force_inline]] or whatever
[19:26:18] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[19:26:22] <cube1> imMute: lmao. The reason for(auto& v: V) has overhead is due to .begin(), .end() being function calls
[19:26:29] <PJBoy> then you're telling the compiler how you want codegen to be affected, but it doesn't affect the language semantics, so that's completely fine
[19:27:09] <PJBoy> if you were to ignore [[deduced_this]] then your program would not compile, so that's terrible
[19:28:18] <cube1> imMute: There's no reason the range loop should have any overhead compared to the equivalent C code. Yet it does. Even for the best compilers. And that's a SERIOUS design mistake by the C++ spec designers, not even repeated by amateur language designers that are making new languages today.
[19:28:33] *** Joins: useful_idiot4 (~useful_id@gateway/vpn/pia/usefulidiot/x-43226899)
[19:28:35] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[19:28:44] <PJBoy> range-for doesn't have any overhead
[19:28:49] <cube1> It has serious overhead
[19:29:00] <Oxyd> Why is everybody feeding the obvious troll?
[19:29:04] <cube1> unless properly optimized out, and there's no guarantee
[19:29:07] <imMute> cube1: [[citation_needed]]
[19:29:09] <PJBoy> prove it
[19:29:10] *** Quits: heiner (~Thunderbi@2a00:6020:b006:a900:d250:99ff:fe34:8fd2) (Quit: heiner)
[19:29:11] <cube1> LOL there's C++ papers out there discussing this problem
[19:29:16] <PJBoy> name one
[19:29:20] <cube1> about needing a proper inline function for this very reason
[19:29:36] <cube1> Amateur language designers don't make this mistake, me included
[19:29:39] *** Quits: boreas (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2) (Read error: Connection reset by peer)
[19:29:45] <cube1> You guys are way too used to the crappy C++ lands
[19:29:49] <Guest53> Alipha and Guys: please take a look at this final code (hope i would be final)
[19:29:50] <Guest53> https://wandbox.org/permlink/4WxnHELBzUSOiDVX
[19:29:50] <Guest53> lines 24+25 provide shelter from Danger scenario 1
[19:29:51] <Guest53> Danger scenario 2 should be escaped thanks to line 29
[19:29:51] <Guest53> for Danger scenario (3 + 4) I added line 16, 17, 31
[19:29:52] <Guest53> What is your opinion toward the solution i gave thru line 16, 17, 31 ? bad, good, ???
[19:29:53] <ville> cube1: people are usually quit happy to read wg21 papers, so provide a link
[19:30:01] <cube1> ville: once I find it
[19:30:44] *** Quits: useful_idiot (~useful_id@gateway/vpn/pia/usefulidiot/x-43226899) (Ping timeout: 272 seconds)
[19:30:45] *** useful_idiot4 is now known as useful_idiot
[19:31:14] <urdh> i'm half-expecting some blog post building everything with -O0 at this point
[19:31:17] *** Quits: Mat_42 (~mat_42@2a02:21b0:644f:d96f:602c:3e29:2572:190c) (Remote host closed the connection)
[19:31:19] <cube1> and there's higher mental overhead to seeing a new keyword vs a new attribute
[19:31:28] <urdh> wat
[19:31:31] <cube1> so you'd want some things to be in attribute form
[19:31:49] *** Joins: Mat_42 (~mat_42@2a02:21b0:644f:d96f:cc9b:fd51:bab3:7103)
[19:32:00] *** Quits: Enitin (~Enitin@82.180.145.228) (Ping timeout: 272 seconds)
[19:32:02] <urdh> `void foo() new_thing` has higher mental overhead than `void foo() [[new_thing]]`?
[19:32:10] <ville> not sure where that follows, especially if attributes would become nonignorable. they would then effectively be keyowrds just with slightly different syntax location
[19:32:14] <cube1> urdh: yes
[19:32:31] <urdh> how?
[19:32:37] <imMute> urdh: because he's a troll
[19:32:39] <cube1> well you immediately understand the parsing rules for any new attribute. It's just an attribute
[19:32:53] <cube1> I'm done with this place. Find the paper on your own, keep up with C++ discussions.
[19:33:02] <imMute> cube1: the rules which include "you can ignore this thing and nothing will change with the behavior of the program" ?
[19:33:04] <ville> cube1: and once you make it nonignorable it becomes effectively a keyword
[19:36:17] *** Quits: Mat_42 (~mat_42@2a02:21b0:644f:d96f:cc9b:fd51:bab3:7103) (Ping timeout: 256 seconds)
[19:37:19] *** Joins: boreas (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[19:37:24] *** Joins: heiner (~Thunderbi@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[19:38:10] *** Quits: zy (~cc@user/zy) (Ping timeout: 246 seconds)
[19:38:34] *** Joins: pulse (~pulse@user/pulse)
[19:39:09] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Quit: Konversation terminated!)
[19:39:35] *** Quits: hirish (~hirish@ip85.ip-137-74-20.eu) (Remote host closed the connection)
[19:40:41] *** Joins: Mat_42 (~mat_42@2a02:21b0:644f:d96f:cc9b:fd51:bab3:7103)
[19:43:07] *** Joins: rgrinberg (~textual@177.248.148.38)
[19:44:55] *** Joins: hirish (~hirish@ip85.ip-137-74-20.eu)
[19:44:56] *** Quits: Mat_42 (~mat_42@2a02:21b0:644f:d96f:cc9b:fd51:bab3:7103) (Ping timeout: 245 seconds)
[19:45:30] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[19:47:37] *** Joins: Mat_42 (~mat_42@2a02:21b0:644f:d96f:cc9b:fd51:bab3:7103)
[19:50:01] *** Joins: zy (~cc@user/zy)
[19:51:12] <rpav> Alipha: at least the sizeof(T) thing works i guess
[19:51:17] *** Joins: kenantu (~kenanmara@user/kenanmarasli)
[19:52:10] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 246 seconds)
[19:53:14] <rpav> template<typename T> constexpr auto delayed_false = false; // seems to work in gcc
[19:53:30] <rpav> probably anything dependent on T
[19:54:16] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 246 seconds)
[19:54:53] *** Quits: zy (~cc@user/zy) (Ping timeout: 252 seconds)
[19:59:30] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[20:00:12] *** Quits: Guest53 (~Guest53@155.190.35.5) (Quit: Client closed)
[20:01:12] *** Quits: Payam59 (~Payam@138.106.57.131) (Quit: Client closed)
[20:02:10] <PJBoy> either way is UB though >_>
[20:05:46] <rpav> oh is it
[20:06:23] <rpav> how does that work? anything that i can think would cause the expression to be evaluated "early" would be an optimization
[20:08:00] <rpav> you could definitely make a "more dependent" delayed_false that couldn't be evaluated until T was known in any case
[20:08:52] <rpav> at some point it can't be UB, or you'd be required to specify that any use of static_assert which evaluates to false is UB
[20:10:49] *** Quits: zer0x (~zer0x@1.55.210.186) (Ping timeout: 250 seconds)
[20:13:45] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[20:15:41] <rpav> https://godbolt.org/z/edf9EEqfx
[20:16:38] <rpav> originally i had `struct never {};` as private but arguably the compiler could deduce that it's never accessible as no members use it.. but i'm not sure the rationale for any of the prior being UB so shrug
[20:16:55] *** Quits: imMute (~immute@user/immute) (Quit: Im betting i wasnt supposed to be pulling on that wire)
[20:17:59] *** Quits: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be) (Ping timeout: 252 seconds)
[20:18:03] <PJBoy> it's UB to make a function that would always fail to compile
[20:18:36] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[20:18:48] *** Joins: Enitin (~Enitin@82.180.145.223)
[20:19:09] <rpav> ah well even better, it wouldn't technically always fail to compile, just in every possible case ;)
[20:20:09] <rpav> i'm curious about the exact wording of this as it's probably an impossible requirement
[20:20:39] <PJBoy> hm, I had in mind a different usage
[20:21:15] *** Joins: dsrt^ (~dsrt@96-91-136-49-static.hfc.comcastbusiness.net)
[20:22:31] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[20:23:34] *** Joins: xiongxin (~Thunderbi@117.136.40.183)
[20:24:17] *** Joins: imMute (~immute@user/immute)
[20:24:43] <rpav> simpler `constexpr auto value = std::is_same_v<T,delayed_false_s<T>>;` but i'm not sure what the compiler is allowed to deduce
[20:25:04] *** Quits: xiongxin (~Thunderbi@117.136.40.183) (Read error: Connection reset by peer)
[20:25:43] *** Joins: xiongxin (~Thunderbi@2409:8954:2e14:1922:b0bb:f21:d408:d79e)
[20:26:29] *** Joins: mixfix41 (~homefame@user/mixfix41)
[20:26:32] *** Joins: Tangent-Man (~Tang3nt-M@213.205.240.3)
[20:27:04] *** Quits: Mat_42 (~mat_42@2a02:21b0:644f:d96f:cc9b:fd51:bab3:7103) (Remote host closed the connection)
[20:27:24] <Alipha> rpav: why not: template<typename T> constexpr static auto delayed_false = sizeof(T) && false;
[20:27:29] *** Quits: Tangent-Man (~Tang3nt-M@213.205.240.3) (Remote host closed the connection)
[20:27:36] *** Joins: Mat_42 (~mat_42@2a02:21b0:644f:d96f:cc9b:fd51:bab3:7103)
[20:27:51] *** Joins: Tangent-Man (~Tang3nt-M@213.205.240.3)
[20:27:59] <PJBoy> I guess what I had in mind only applies to constexpr functions
[20:28:27] <PJBoy> and what I had in mind was https://timsong-cpp.github.io/cppwp/n4868/dcl.constexpr#7.sentence-2
[20:28:33] *** Joins: Maaaanu (~manuel@ip5b429007.dynamic.kabel-deutschland.de)
[20:29:22] <rpav> Alipha: or that but trying to avoid the sizeof(T) because sortof it's ick, and maybe-hypothetically the compiler can deduce that the expression is still always false
[20:29:58] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[20:30:05] *** Quits: bitonic (~bitonic@2001:470:69fc:105::1812) (Quit: You have been kicked for being idle)
[20:31:21] <rpav> PJBoy: reading just that sentence i would 100% think that, but i think in context that only applies to not-possibly-constexpr classes having constexpr functions
[20:31:25] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[20:31:25] <PJBoy> compiler's always gonna hypothetically deduce that the expression is always false
[20:32:08] <rpav> well not in the first case .. it can't tell that you're _not_ going to use `never`
[20:32:33] <PJBoy> it could collect every type mentioned in a TU and substitute them all and see what the results are
[20:32:58] <PJBoy> well I guess that's not enough
[20:33:09] <PJBoy> could always allow the dependent false to be true in some non-sense case
[20:33:41] *** Quits: Mat_42 (~mat_42@2a02:21b0:644f:d96f:cc9b:fd51:bab3:7103) (Ping timeout: 245 seconds)
[20:33:43] <rpav> yeah i'm just not sure if it's _allowed_ to deduce things
[20:33:48] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[20:33:48] <rpav> or how much if so
[20:34:50] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[20:35:37] *** Joins: Brainium (~brainium@user/brainium)
[20:37:14] <PJBoy> how about? https://timsong-cpp.github.io/cppwp/n4868/temp.res.general#8.1
[20:37:37] <PJBoy> > program is IFNDR is no valid specialization can be generated for a template
[20:38:02] <rpav> _that_ can't apply because there _are_ valid specializations
[20:38:39] <PJBoy> right yeah, I was thinking of a different case again
[20:39:16] <rpav> presumably though `<T> struct S { S() { static_assert(delayed_false<T>); };` with no other S specialization is ifndr though
[20:39:34] <PJBoy> that's what I had in mind, yeah
[20:39:59] <rpav> but, doesn't that mean `<T> struct S;` is IFNDR if one never defines the template
[20:40:02] <PJBoy> or similar anyway
[20:41:35] <PJBoy> I need to bookmark that whole point, there's a bunch of IFNDR cases that come up
[20:42:21] <PJBoy> > Exactly when these errors are diagnosed is a quality of implementation issue
[20:42:23] <PJBoy> sassy
[20:42:27] <rpav> reading this i wonder if some common things are bad but i dnno
[20:42:44] <rpav> all of these ought to have examples
[20:43:36] <rpav> though maybe 8.5 / 8.5.* are all followups to 8.4?
[20:43:55] <PJBoy> it does seem like the silly case you mentioned could actually indeed be IFNDR
[20:44:31] *** Quits: xiongxin (~Thunderbi@2409:8954:2e14:1922:b0bb:f21:d408:d79e) (Ping timeout: 245 seconds)
[20:44:53] <PJBoy> but unsure
[20:45:16] *** Quits: john99 (~john99@134.238.222.5) (Quit: Client closed)
[20:45:37] <PJBoy> I've exhausted my standard reading quota for the day
[20:46:39] <rpav> "every valid specialization of a variadic template requires an empty template parameter pack" this one makes me chuckle for some reason
[20:47:00] *** Joins: Tempesta (~Tempesta@user/tempesta)
[20:47:50] *** Joins: rawley (~rawley@142.99.241.242)
[20:49:48] *** Joins: Mat_42 (~mat_42@2a02:21b0:644f:d96f:cc9b:fd51:bab3:7103)
[20:50:39] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[20:52:33] *** Joins: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be)
[20:54:34] *** Quits: MasterK (~MK@188.26.11.19) (Remote host closed the connection)
[20:55:12] *** Joins: sbrothy (~sbrothy@192038130202.mbb.telenor.dk)
[21:01:03] *** Quits: Enitin (~Enitin@82.180.145.223) (Ping timeout: 260 seconds)
[21:02:34] *** Joins: Enitin (~Enitin@82.180.145.223)
[21:04:15] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:04:15] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[21:05:36] *** Joins: abode (~abode@2001:8f8:1263:f601:8230:49ff:fe6e:36b5)
[21:05:53] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:06:17] *** Quits: Mat_42 (~mat_42@2a02:21b0:644f:d96f:cc9b:fd51:bab3:7103) (Remote host closed the connection)
[21:06:29] *** Joins: Mat_42 (~mat_42@2a02:21b0:644f:d96f:cc9b:fd51:bab3:7103)
[21:06:33] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[21:07:39] *** Quits: abode (~abode@2001:8f8:1263:f601:8230:49ff:fe6e:36b5) (Remote host closed the connection)
[21:07:51] *** Joins: zy (~cc@user/zy)
[21:08:15] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:08:28] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[21:11:26] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[21:15:12] *** Quits: nortoh (~nortoh@user/nortoh) (Quit: this is not importent)
[21:15:18] *** Quits: wakeup (~wakeup@user/wakeup) (Quit: Client closed)
[21:15:31] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[21:15:48] *** Joins: nortoh (~nortoh@bishop.xerrero.com)
[21:15:49] *** Quits: nortoh (~nortoh@bishop.xerrero.com) (Changing host)
[21:15:49] *** Joins: nortoh (~nortoh@user/nortoh)
[21:16:47] *** Quits: Mat_42 (~mat_42@2a02:21b0:644f:d96f:cc9b:fd51:bab3:7103) (Remote host closed the connection)
[21:17:19] *** Joins: Mat_42 (~mat_42@2a02:21b0:644f:d96f:cc9b:fd51:bab3:7103)
[21:19:42] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[21:20:54] <Alipha> cube1: looks like ranged-for is more efficient for some reason, actually: https://godbolt.org/z/Pv77zYYcb
[21:21:47] *** Quits: Mat_42 (~mat_42@2a02:21b0:644f:d96f:cc9b:fd51:bab3:7103) (Ping timeout: 252 seconds)
[21:21:56] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[21:22:08] <Alipha> i'm curious what the extra code in the traditional for loop is doing
[21:22:10] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[21:23:15] *** Quits: mgaunard (~mgaunard@ec2-52-210-158-23.eu-west-1.compute.amazonaws.com) (Remote host closed the connection)
[21:23:27] *** Quits: noarb (~noarb@user/noarb) (Quit: ZNC 1.8.2 - https://znc.in)
[21:24:15] *** Joins: noarb (~noarb@user/noarb)
[21:24:32] <Alipha> clang does some crazy vectorization stuff
[21:25:27] *** Quits: Tempesta (~Tempesta@user/tempesta) (Ping timeout: 265 seconds)
[21:27:56] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[21:31:55] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 246 seconds)
[21:32:33] *** gentooclimax is now known as climax
[21:33:28] *** Quits: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[21:33:34] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) ()
[21:33:50] *** Joins: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be)
[21:34:56] *** Joins: SaltHilStroller_ (~SaltHillS@206.223.160.26)
[21:35:33] *** Joins: Mat_42 (~mat_42@2a02:21b0:644f:d96f:cc9b:fd51:bab3:7103)
[21:36:06] <Alipha> i guess it seems that gcc doesn't trust that the internal T* pointers are aligned properly for T, which is interesting
[21:36:33] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[21:36:55] *** Joins: Tempesta (~Tempesta@user/tempesta)
[21:37:47] *** Quits: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca) (Ping timeout: 256 seconds)
[21:38:16] <cube1> You're looking at the output after heuristic based algorithms have luckily inlined code. That's not the correct approach for operator[], begin(), end(), move, etc for a systems programming language. We need a lot more stability than that. No heuristics involved, please.
[21:38:20] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[21:39:43] *** Joins: Xardas (~Xardas@149.233.51.127)
[21:40:00] <cube1> I was unable to find the paper that I had in my mind. It was something fairly recent. Maybe it wasn't yet a submitted paper
[21:40:12] *** Quits: Mat_42 (~mat_42@2a02:21b0:644f:d96f:cc9b:fd51:bab3:7103) (Ping timeout: 260 seconds)
[21:40:32] <Alipha> cube1: if you don't trust your compiler to optimize well, then code in assembly
[21:41:13] <cube1> Alipha: You want those heuristic based algorithms to work on optimizing code that should be optimized based on heuristics. So give them a clean view of the code base, not littered with nonsense that should have been eliminated by the front end.
[21:42:15] *** Quits: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be) (Ping timeout: 250 seconds)
[21:43:02] <cube1> Alipha: The semantics are just wrong. operator[] should not be a function with an address. It should be an operation described in code, to be inserted where operator[] is called
[21:43:21] <imMute> like an inlined function?
[21:43:27] <cube1> yeah
[21:43:31] <imMute> taht's what it is.
[21:43:34] <cube1> nope
[21:43:38] <imMute> or can be.
[21:45:03] <cube1> You should never enter these functions in the debugger, as they should not exist. It'll make debugging much better, too. Not to mention more performant.
[21:45:28] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:b8d6:aaba:d42d:fbd1)
[21:45:28] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:b8d6:aaba:d42d:fbd1) (Changing host)
[21:45:28] *** Joins: skapata (~Skapata@user/skapata)
[21:45:28] <imMute> lmao
[21:46:14] <cube1> imMute: What? I'm curious
[21:46:35] <cube1> Like I'm not the best at writing, I'm sure I sound like a 3 year old. But if you have a real critique I'm curious
[21:46:55] <imMute> just go write assembly or something else and leave us alone.
[21:47:52] *** Quits: sbrothy (~sbrothy@192038130202.mbb.telenor.dk) (Quit: leaving)
[21:50:28] *** Joins: Mat_42 (~mat_42@2a02:21b0:644f:d96f:cc9b:fd51:bab3:7103)
[21:52:14] <cube1> imMute: What is your opinion of altering the linking model like so: Instead of needing to resolve symbol 'X', with no more knowledge or requirement, the linker instead needs to resolve symbol 'X' from place 'Y'? The current linking model is a consequence of not knowing where symbols come from due to textual inclusion. And the assembly model before that. But now we can have modules, for instance. Such as in C++ and my language.
[21:52:53] <cube1> Thus we could have a more advanced linking model that rids us of needing symbol mangling. And would make it easier to have multiple versions of libraries in a single executable.
[21:53:22] *** Joins: sbrothy (~sbrothy@192038130202.mbb.telenor.dk)
[21:53:30] *** Quits: letto (~letto@188.27.114.171) (Quit: Konversation terminated!)
[21:53:41] <cube1> imMute: It's alright though. I'll just improve on everything without your help.
[21:54:41] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[21:55:07] <imMute> good luck.
[21:55:25] <cube1> This should probably improve performance and robustness as well
[21:56:06] *** Joins: letto (~letto@188.27.114.171)
[21:56:25] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:d73:e6b7:30e6:fe45)
[21:58:50] *** Joins: rg (~r-g@51-15-187-53.rev.poneytelecom.eu)
[21:59:34] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[22:00:11] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[22:00:32] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[22:03:16] *** Joins: Techcable (~Techcable@user/Techcable)
[22:04:11] *** Quits: zeenk (~zeenk@79.115.191.105) (Quit: Konversation terminated!)
[22:04:35] *** climax is now known as gentooclimax
[22:04:47] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:d73:e6b7:30e6:fe45) (Ping timeout: 250 seconds)
[22:05:12] <cube1> Alpiha: HOLD ON. Why were you using optimization flags?
[22:05:19] <cube1> What about when you're debugging your code?
[22:05:41] <Alipha> cube1: your code doesn't need to run fast when you're debugging
[22:05:49] <cube1> yes it very much does
[22:06:15] <cube1> good luck getting to the state you need, for instance in a video game, running at 3 fps
[22:06:28] <cube1> this is the whole problem
[22:06:42] <fiesh> fps shouldn't alter the in-game time...
[22:06:47] <PJBoy> there's degrees of debug/optimisational tradeoff
[22:06:54] <cube1> good luck playing the game, to get to the state you need, when it's running at 3 fps
[22:07:37] <cube1> PJBoy: Right. And the performance of indexing arrays and iterating arrays should stay constant, no matter the debug/optimization tradeoff you've chosen. Because it's just... indexing and iteration
[22:07:47] <cube1> My entire point right there
[22:07:58] <cube1> Why would you accept crapping performance of indexing an array? Makes no sense
[22:08:01] <cube1> crappy*
[22:08:01] <PJBoy> you've stated your point, but you haven't reasoned why you believe that
[22:08:22] <PJBoy> I can certainly think of cases where I'm willing to lose performance of array indexing to improve my debugging capability
[22:08:25] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:cf7:8430:63f0:eabe)
[22:08:46] <cube1> But you're not getting better debugging from getting slower indexing. There's no information you're losing. It's just indexing...
[22:08:56] <PJBoy> that's not true
[22:09:00] <Alipha> You may want to put a breakpoint inside operator[], for instance
[22:09:11] <PJBoy> for example, an out of bounds check
[22:09:17] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[22:09:31] <PJBoy> or a profiling of which indices are used the most
[22:10:20] <Alipha> cube1: if you're not releasing c++ code with optimizations turned on, then god help you to get any kind of performance
[22:10:30] <PJBoy> if you want optimised code, enable optimisatios
[22:10:39] <cube1> yeah no shit
[22:10:53] <PJBoy> then we're agreed
[22:11:00] <fiesh> wait the whole argument is that -O0 sucks for performance?  lmao
[22:11:28] <cube1> and indexing arrays is an arithmetic operation, not a function call operation involving placing values in the correct registers, saving other registers, etc
[22:11:43] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[22:11:44] <Oxyd> Come on, why is everybody still feeding the troll?
[22:12:26] <cube1> Like you realize you're about to get built in matrices and operations on them? And you still want indexing to be a function call?
[22:12:32] <PJBoy> morbid curiosity
[22:12:38] <cube1> Clang already supports built in matrices, so too does my language
[22:13:03] <cube1> matrix matrix multiplication - built in. No weird template metaprogramming optimization bullshit
[22:13:09] <cube1> That's Clang, TODAY
[22:13:18] <PJBoy> I want the option for indexing to be done with no overhead
[22:13:24] <cube1> But LOL you still want indexing to be function call based??
[22:13:28] <cube1> and iteration too!
[22:13:34] <fiesh> is it neogfx by any chance and will destroy Qt?!?
[22:13:37] <cube1> The 90s called
[22:14:04] <PJBoy> because indexing without function calls was invented in the 21st century?
[22:14:13] <cube1> apparently, look at you guys
[22:14:23] <PJBoy> what about us?
[22:15:05] <Alipha> PJBoy: we use -O2 :-)
[22:15:08] <PJBoy> what's your followup?
[22:15:12] <causative_> the 20th century didn't end with the 90s, the year 2000 was the last year of it
[22:15:35] *** Quits: Mat_42 (~mat_42@2a02:21b0:644f:d96f:cc9b:fd51:bab3:7103) (Remote host closed the connection)
[22:15:36] <PJBoy> true
[22:15:38] *** RazielZ is now known as Raziel
[22:15:47] <PJBoy> because years are 1 based >_>
[22:16:08] *** Joins: Mat_42 (~mat_42@2a02:21b0:644f:d96f:cc9b:fd51:bab3:7103)
[22:16:29] <cube1> You can't just pass in -O2 to get better inlining if you're trying to debug with maximum info. You need to make a distinction between primitive functions that shouldn't be functions, and the rest.
[22:17:05] <cube1> primitive operations* that shouldn't be functions, I should say
[22:17:07] <fiesh> there's -Og, a very good flag
[22:17:12] *** Quits: Mat_42 (~mat_42@2a02:21b0:644f:d96f:cc9b:fd51:bab3:7103) (Remote host closed the connection)
[22:17:24] *** Joins: Mat_42 (~mat_42@2a02:21b0:644f:d96f:cc9b:fd51:bab3:7103)
[22:18:29] *** Parts: bpalmer (~user@user/bpalmer) (ERC (IRC client for Emacs 27.2))
[22:18:32] <Alipha> You could also compile part of your code with optimizations and the part you want to debug without optimizations
[22:19:39] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[22:20:02] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[22:24:26] *** Quits: drbeco (~beco@user/beco) (Quit: Leaving)
[22:25:19] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[22:25:40] <cube1> auto vectorization is another example of this broken thought process. Represent things wrong and then hope and pray the compiler does something. I'm not going to start another argument but I just want to make this point..
[22:25:57] <cube1> You don't want to depend on auto vectorization because it could leave you at any time. A small change could mean you get no vectorization
[22:26:19] <cube1> Instead you want your code represented a little differently, like you do with ISPC
[22:26:51] <cube1> With ISPC code you get guaranteed vectorization. With auto vectorization you get it based on heuristics. Not good.
[22:27:23] *** Quits: Mat_42 (~mat_42@2a02:21b0:644f:d96f:cc9b:fd51:bab3:7103) (Remote host closed the connection)
[22:27:57] *** Joins: Mat_42 (~mat_42@2a02:21b0:644f:d96f:cc9b:fd51:bab3:7103)
[22:29:04] <Alipha> cube1: non-optimized c/c++ code is pretty horrible even without "expensive function calls": https://godbolt.org/z/K7xsWW5rf
[22:31:37] *** Joins: MasterK (~MK@86.126.33.146)
[22:32:42] *** Quits: Mat_42 (~mat_42@2a02:21b0:644f:d96f:cc9b:fd51:bab3:7103) (Ping timeout: 260 seconds)
[22:32:49] *** Joins: llh (~UPP@user/llh)
[22:33:58] <Alipha> it seems cube1 really just wants to use -Og. it seems to inline trivial functions but then still supposedly gives a good debugging experience
[22:35:30] *** Quits: Leone (~Leo@216.154.12.122) (Read error: Connection reset by peer)
[22:36:03] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[22:37:33] *** Joins: Mat_42 (~mat_42@2a02:21b0:644f:d96f:cc9b:fd51:bab3:7103)
[22:42:55] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[22:44:34] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[22:44:43] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[22:44:43] *** ChanServ sets mode: +v npaperbot
[22:46:44] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[22:49:06] *** Quits: irf21k (~irf21k@2401:4900:33d1:18a6:2:1:a502:e94e) (Remote host closed the connection)
[22:50:11] *** Joins: v4mp (~v4mp@user/v4mp)
[22:51:01] *** Quits: proller (~p@2a02:6b8:b081:6402::1:6) (Ping timeout: 240 seconds)
[22:52:14] <rpav> non-optimized c++ does not produce practically usable code
[22:52:18] *** Joins: tronwizard (~tronwizar@static-74-109-121-138.phlapa.fios.verizon.net)
[22:52:29] *** Parts: tronwizard (~tronwizar@static-74-109-121-138.phlapa.fios.verizon.net) ()
[22:53:29] *** Joins: xq (~xq@user/xq)
[22:54:55] <rpav> but probably it'd be a lot nicer if we could be very specific about vector quantities and not rely on some dubious and unspecified heuristics... probably the bigger problem is most people want to just write a simple for loop and get magical speedup
[22:55:27] *** Quits: sbrothy (~sbrothy@192038130202.mbb.telenor.dk) (Ping timeout: 260 seconds)
[22:56:08] <welder> Is there a "rev16" function/builtin in gcc/clang? a function that takes 'aa bb cc dd ee ff gg hh' and would return each pair swapped, like 'bb aa dd cc ff ee hh gg'?
[22:57:13] <welder> i am looking for equivalent of "rev16" assembly instruction in C (without manually coding the bitmasks and shifts etc)
[22:57:28] <Alipha> welder: is 'aa bb cc dd ee ff gg hh' supposed to be like, `char x[] = {01, 23, 45, 67, 89, 10, 23, 34};` ?
[22:57:44] <Alipha> or what datatype is 'aa bb cc dd ee ff gg hh' supposed to be?
[22:58:29] <welder> right, i meant 8 bytes
[22:59:12] <welder> an unsigned long long
[22:59:30] <Alipha> i'm not aware of anything, sorry
[22:59:54] <welder> i'll just mask out the even bytes, shift, mask odd, shift, combine
[23:00:40] *** Joins: gareppa (~gareppa@user/gareppa)
[23:01:21] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[23:02:07] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[23:02:23] *** Joins: proller (~p@2a02:6b8:b081:b70d::1:e)
[23:02:30] <Hello71> bswap
[23:02:43] <Hello71> gcc has it builtin: https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html
[23:03:13] <PJBoy> don't think any of them do the desired byte swap though
[23:05:22] *** Quits: zy (~cc@user/zy) (Ping timeout: 246 seconds)
[23:05:23] <Alipha> { uint64_t x = 0x1122334455667788; x = ((x & 0x00ff00ff00ff00ffu) << 8) | ((x & 0xff00ff00ff00ff00u) >> 8); cout << hex << x; }
[23:05:24] <geordi> 2211443366558877
[23:06:10] <PJBoy> seems to me the desired operation is this one https://github.com/gcc-mirror/gcc/blob/master/gcc/testsuite/gcc.target/arm/rev16.c
[23:06:14] <PJBoy> except 64 bit
[23:06:21] <PJBoy> and probably for x86
[23:07:11] <welder> yes PJBoy i coded it same way, except twice os much FF00 for 8 byte type. Sadly clang nor gcc do not recognize it as rev16 ;p
[23:07:15] <PJBoy> I'm fairly sure gcc has nothing for this
[23:07:26] <PJBoy> welder, you made sure to specify your march right?
[23:08:06] <welder> hmm i did. clang recignozes the 32 bit version
[23:08:06] <Alipha> neither gcc nor clang seem to know of any magic: https://godbolt.org/z/9arxWbeKW
[23:08:28] <PJBoy> ah :(
[23:08:43] *** Quits: gareppa (~gareppa@user/gareppa) (Quit: Leaving)
[23:09:31] <welder> https://godbolt.org/z/e5qnjqWxT
[23:09:42] <welder> i think there is no suck instruction on x86
[23:09:45] <welder> such*
[23:10:06] <welder> strange that clang does not pick up the 8 byte version, it's rev16 x0, x0 ;p
[23:10:38] <PJBoy> ah it was an ARM problem
[23:11:12] *** Joins: drbeco (~beco@user/beco)
[23:12:01] *** Joins: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca)
[23:13:16] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:cf7:8430:63f0:eabe) (Ping timeout: 245 seconds)
[23:13:17] *** Joins: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:f0cf:f5b0:60ea:907f)
[23:13:49] *** Joins: vicfred (~vicfred@user/vicfred)
[23:14:56] *** Quits: mixfix41 (~homefame@user/mixfix41) (Ping timeout: 272 seconds)
[23:16:36] <zz> welder: there is psrlw and psrll
[23:16:37] *** Quits: malloy (~jimery@116.30.222.122) (Ping timeout: 265 seconds)
[23:16:52] <Alipha> welder: __asm("rev16 x0, x0");  // ? :-)
[23:17:42] <zz> welder: https://godbolt.org/z/37Mofrsej
[23:18:18] <Hello71> UB though
[23:18:24] *** Joins: malloy (~jimery@116.30.222.122)
[23:19:03] <PJBoy> looks like GCC is supposed to recognise that bitshift+mask pattern
[23:19:28] *** Joins: mixfix41 (~homefame@user/mixfix41)
[23:19:44] <Alipha> you would think google and apple would invest in improving ARM GCC/clang since phones are all ARM
[23:19:53] <PJBoy> based on this comment https://github.com/gcc-mirror/gcc/blob/f7d5cf8df3193f8f6e62501def08e4b0b1baadbc/gcc/config/arm/aarch-common.c#L237
[23:20:24] <Hello71> they do, although almost entirely llvm
[23:22:26] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[23:24:15] <PJBoy> (doesn't work even with the order of operations in the comment https://godbolt.org/z/ecEeYoxxG )
[23:30:28] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 260 seconds)
[23:30:53] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[23:31:15] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[23:31:45] *** Joins: magla (~gelignite@d53668d6.access.ecotel.net)
[23:32:15] *** Quits: the_lanetly_052_ (~the_lanet@185.30.90.65) (Ping timeout: 260 seconds)
[23:37:45] *** Quits: rawley (~rawley@142.99.241.242) (Ping timeout: 272 seconds)
[23:40:06] *** Quits: v4mp (~v4mp@user/v4mp) ()
[23:41:01] *** Quits: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469) (Remote host closed the connection)
[23:42:24] *** Tobbi__ is now known as Tobbi
[23:44:00] *** Quits: Mat_42 (~mat_42@2a02:21b0:644f:d96f:cc9b:fd51:bab3:7103) (Remote host closed the connection)
[23:45:05] <xisop> what does the syntax `new(this) A` mean in this example? https://en.cppreference.com/w/cpp/utility/launder
[23:45:29] *** Joins: Mat_42 (~mat_42@2a02:21b0:644f:d96f:cc9b:fd51:bab3:7103)
[23:46:23] <rpav> xisop: placement new, https://en.cppreference.com/w/cpp/language/new#Placement_new
[23:47:12] <xisop> i see
[23:48:51] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[23:50:18] *** Quits: Mat_42 (~mat_42@2a02:21b0:644f:d96f:cc9b:fd51:bab3:7103) (Ping timeout: 260 seconds)
[23:50:28] *** Quits: duds- (~duds-@user/duds) (Ping timeout: 260 seconds)
[23:50:59] *** Quits: cube1 (~cube1@89-160-183-39.du.xdsl.is) (Quit: Leaving)
[23:52:47] *** Quits: jsbach (~jsbach@2a01:c22:35df:5200:e30e:9d54:124d:b5be) (Ping timeout: 260 seconds)
[23:53:01] *** Joins: sobkas (~sobkas@95.175.17.217)
[23:54:57] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:8138:d022:eb69:4daf)
[23:54:57] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:8138:d022:eb69:4daf) (Changing host)
[23:54:57] *** Joins: RoKenn (~RoKenn@user/rokenn)
[23:55:44] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[23:56:06] *** Quits: lpotter (~quassel@180-150-104-92.b49668.bne.static.aussiebb.net) (Ping timeout: 272 seconds)
[23:57:48] *** Joins: lpotter (~quassel@180-150-104-92.b49668.bne.static.aussiebb.net)
