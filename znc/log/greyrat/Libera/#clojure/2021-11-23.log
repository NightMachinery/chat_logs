[00:03:27] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[00:10:57] <shiranaihito> pseudonymous i can't tell what's going on there, but if you're unfamiliar with how databases are generally accessed through Java, it might be worthwhile to read a bit about it: https://docs.oracle.com/javase/tutorial/jdbc/basics/index.html
[00:11:28] <shiranaihito> whatever hugsql and clojure-jdbc are doing is most likely based on that API
[00:14:39] <shiranaihito> for example, i'm not sure what passing along a transaction might mean.. but a JDBC/database transaction is committed by calling .commit() on a JDBC Connection object - maybe "tx" refers to a wrapper around one of those? but then it would seem unnecessary to pass it to 'clojure.java.jdbc/get-connection' (when that looks like a function that would return a Connection)
[00:21:51] <ridcully> i'd not say it's annoying, but it is a trap.  the map is unordered... but it is ordered by implementation detail for a very small range.  happy little accident ordered
[00:24:12] *** Quits: shiranaihito (~textual@2001-b011-4000-3c66-e00a-14f3-9f1f-7ec9.dynamic-ip6.hinet.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[00:34:47] *** Quits: Inoperable (~PLAYER_1@fancydata.science) (Excess Flood)
[00:39:44] *** Joins: Inoperable (~PLAYER_1@fancydata.science)
[00:50:43] *** Quits: uncleyear (~ian@pppoe.178-66-158-226.dynamic.avangarddsl.ru) (Remote host closed the connection)
[00:52:57] *** Joins: uncleyear (~ian@pppoe.178-66-158-226.dynamic.avangarddsl.ru)
[00:53:47] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[00:54:10] *** Joins: matty_matt (~matt@2601:140:c006:b40:2cee:e3fc:21ad:9d98)
[00:56:28] *** Quits: uncleyear (~ian@pppoe.178-66-158-226.dynamic.avangarddsl.ru) (Remote host closed the connection)
[01:00:57] *** Joins: uncleyear (~ian@pppoe.178-66-158-226.dynamic.avangarddsl.ru)
[01:03:14] *** Quits: uncleyear (~ian@pppoe.178-66-158-226.dynamic.avangarddsl.ru) (Client Quit)
[01:07:32] *** Joins: uncleyear (~ian@pppoe.178-66-158-226.dynamic.avangarddsl.ru)
[01:13:04] *** Joins: schmudde (~schmudde@93-35-167-62.ip55.fastwebnet.it)
[01:13:58] *** Quits: laman2 (~laman@rego.ai) (Quit: WeeChat 3.2.1)
[01:15:03] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[01:16:51] *** Quits: X-Scale (~ARM@31.22.202.54) (Ping timeout: 250 seconds)
[01:18:24] *** X-Scale` is now known as X-Scale
[01:22:45] *** Quits: to-hu (~Thunderbi@p200300e9af1a11002c2d46af59e8d445.dip0.t-ipconnect.de) (Remote host closed the connection)
[01:23:12] <jeaye> ridcully: It can be annoying if you're building up a map and using (keys m) on it happily until it gets big enough that things get scrambled.
[01:28:36] <ridcully> at least some of the pprinters sort the keys again.  so this removes annoyance... but might add even more confusion (it looks good, but it does not work in the tests)
[01:29:51] <ridcully> e.g. my code above "looks" fine in rebel-readline
[01:37:01] <manicennui> Sussman is giving one of the keynotes at re:Clojure
[01:39:57] <ridcully> ... and Wolfram and Grand.  for something to download if it manifests somewhere...
[01:41:07] <technomancy> isn't wolfram kinda like ... delusional? IIRC he claimed to have invented cons cells or something?
[01:42:01] <ridcully> we will see what delusions will be offered
[01:42:25] <technomancy> A New Kind of Cons Cell
[01:42:35] <technomancy> you can call cbr on it, not just car and cdr
[01:42:41] <technomancy> revolutionary
[01:44:51] *** Quits: yewscion (~yewscion@72-21-196-67.amazon.com) (Ping timeout: 264 seconds)
[01:47:44] <goodger> it's his insistence on naming everything after himself that gets me
[01:50:43] *** Quits: op2 (~op@user/op2) (Remote host closed the connection)
[02:00:41] *** Quits: schmudde (~schmudde@93-35-167-62.ip55.fastwebnet.it) (Ping timeout: 268 seconds)
[02:03:07] *** Joins: schmudde (~schmudde@93-35-167-62.ip55.fastwebnet.it)
[02:04:40] *** Quits: uncleyear (~ian@pppoe.178-66-158-226.dynamic.avangarddsl.ru) (Remote host closed the connection)
[02:14:51] *** Quits: matty_matt (~matt@2601:140:c006:b40:2cee:e3fc:21ad:9d98) (Ping timeout: 264 seconds)
[02:16:05] *** Joins: matty_matt (~matt@2601:140:c006:b40:2cee:e3fc:21ad:9d98)
[02:33:16] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 245 seconds)
[02:37:08] <AnnArcana> technomancy: Wolfram's current deal is claiming to have reinvented physics and discovered the theory of everything via cellular automata
[02:39:12] <manicennui> His new book is about combinators.
[02:40:45] <manicennui> I guess his physics book was last year.
[02:41:13] <manicennui> One would hope that he would talk about combinators at a Clojure conference.
[02:44:00] <goodger> alzheimer's manifests in strange ways sometimes
[02:46:44] *** Quits: seschwar (~seschwar@user/seschwar) (Quit: :wq)
[03:01:11] *** Quits: matty_matt (~matt@2601:140:c006:b40:2cee:e3fc:21ad:9d98) (Ping timeout: 245 seconds)
[03:02:04] *** Quits: schmudde (~schmudde@93-35-167-62.ip55.fastwebnet.it) (Quit: WeeChat 3.2)
[03:02:27] *** Joins: libertyprime (~libertypr@118-92-79-43.dsl.dyn.ihug.co.nz)
[03:04:49] *** Joins: matty_matt (~matt@2601:140:c006:b40:2cee:e3fc:21ad:9d98)
[03:07:23] *** Joins: uncleyear (~ian@pppoe.178-66-158-226.dynamic.avangarddsl.ru)
[03:26:20] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[03:33:35] *** Quits: xulfer (uid452788@id-452788.ilkley.irccloud.com) ()
[03:33:54] *** Joins: xulfer (uid452788@id-452788.ilkley.irccloud.com)
[03:53:41] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 245 seconds)
[04:05:28] *** Quits: uncleyear (~ian@pppoe.178-66-158-226.dynamic.avangarddsl.ru) (Remote host closed the connection)
[04:06:27] *** Quits: dadinn (~dadinn@cpc87065-finc18-2-0-cust67.4-2.cable.virginm.net) (Ping timeout: 264 seconds)
[04:11:53] *** Joins: uncleyear (~ian@pppoe.178-66-158-226.dynamic.avangarddsl.ru)
[04:16:55] *** Quits: DasBrain (~DasBrain@user/dasbrain) (Killed (NickServ (GHOST command used by DasBrain_)))
[04:17:01] *** Joins: DasBrain_ (~DasBrain@user/dasbrain)
[04:24:02] *** Joins: v3gajerusalem (~v3ga@2600:1702:ad0:3b90::40)
[04:29:14] <v3gajerusalem> ping
[04:33:02] <jeaye> pong
[04:36:59] *** Joins: Guest64 (~Guest64@pool-71-185-233-51.phlapa.fios.verizon.net)
[04:38:33] *** Quits: matty_matt (~matt@2601:140:c006:b40:2cee:e3fc:21ad:9d98) (Ping timeout: 268 seconds)
[04:38:49] *** Quits: Guest64 (~Guest64@pool-71-185-233-51.phlapa.fios.verizon.net) (Quit: Client closed)
[04:40:39] *** Quits: uncleyear (~ian@pppoe.178-66-158-226.dynamic.avangarddsl.ru) (Remote host closed the connection)
[04:44:50] *** Joins: matty_matt (~matt@2601:140:c006:b40:2cee:e3fc:21ad:9d98)
[04:55:46] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[04:59:40] *** Joins: AlaskanEmily (~AlaskanEm@user/alaskanemily)
[04:59:52] *** Joins: uncleyear (~ian@pppoe.178-66-158-226.dynamic.avangarddsl.ru)
[05:21:27] *** Quits: uncleyear (~ian@pppoe.178-66-158-226.dynamic.avangarddsl.ru) (Ping timeout: 264 seconds)
[05:38:22] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Ping timeout: 268 seconds)
[05:39:31] *** Quits: aphyr (~kyle@aphyr.com) (Ping timeout: 245 seconds)
[05:39:55] *** Joins: aphyr (~kyle@aphyr.com)
[05:46:28] *** Quits: learner-monad (~ehanneken@user/learner-monad) (Quit: WeeChat 3.3)
[06:12:57] *** Parts: ServerStatsDisco (~serversta@2001:470:69fc:105::1a) ()
[06:19:19] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[06:54:38] *** Joins: mbuf (~Shakthi@27.58.141.80)
[06:57:44] *** Quits: xulfer (uid452788@id-452788.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[06:58:39] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Ping timeout: 264 seconds)
[07:35:16] *** Quits: Tolstoy (~textual@97-120-40-166.ptld.qwest.net) (Read error: Connection reset by peer)
[07:35:21] *** Quits: nighcoder (~ciumbi@206.176.143.59) (Read error: Connection reset by peer)
[07:35:38] *** Joins: nighcoder (~ciumbi@206.176.143.59)
[07:35:38] *** Joins: Tolstoy (~textual@97-120-40-166.ptld.qwest.net)
[07:47:28] *** Quits: matty_matt (~matt@2601:140:c006:b40:2cee:e3fc:21ad:9d98) (Ping timeout: 260 seconds)
[07:51:52] *** Joins: matty_matt (~matt@2601:140:c006:b40:2cee:e3fc:21ad:9d98)
[08:25:39] *** Quits: matty_matt (~matt@2601:140:c006:b40:2cee:e3fc:21ad:9d98) (Ping timeout: 264 seconds)
[08:32:45] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[09:50:58] *** Quits: dale (dale@user/dale) (Read error: Connection reset by peer)
[09:51:07] *** Joins: dale (dale@user/dale)
[09:51:12] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 268 seconds)
[09:51:59] *** Joins: lagash (lagash@lagash.shelltalk.net)
[09:52:26] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Ping timeout: 268 seconds)
[10:11:10] *** Quits: Munto (~Munto@120.51.3.93.rev.sfr.net) (Quit: Leaving)
[10:23:55] *** Joins: shiranaihito (~textual@2001-b011-4000-3c66-e00a-14f3-9f1f-7ec9.dynamic-ip6.hinet.net)
[10:30:49] *** Quits: libertyprime (~libertypr@118-92-79-43.dsl.dyn.ihug.co.nz) (Quit: leaving)
[10:38:36] *** Joins: matty_matt (~matt@2601:140:c006:b40:2cee:e3fc:21ad:9d98)
[10:42:56] *** Quits: matty_matt (~matt@2601:140:c006:b40:2cee:e3fc:21ad:9d98) (Ping timeout: 260 seconds)
[11:10:09] *** Quits: shiranaihito (~textual@2001-b011-4000-3c66-e00a-14f3-9f1f-7ec9.dynamic-ip6.hinet.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[11:29:58] *** Joins: libertyprime (~libertypr@203.211.73.21)
[11:32:51] *** Joins: shiranaihito (~textual@219.85.169.212)
[11:38:51] *** Quits: theruran_ (uid11305@hampstead.irccloud.com) (Ping timeout: 264 seconds)
[11:41:01] *** Joins: theruran_ (uid11305@id-11305.hampstead.irccloud.com)
[11:41:15] *** Quits: IUSR (sid348938@hampstead.irccloud.com) (Ping timeout: 264 seconds)
[11:43:03] *** Quits: cespare (sid330206@hampstead.irccloud.com) (Ping timeout: 264 seconds)
[11:44:36] *** Joins: IUSR (sid348938@id-348938.hampstead.irccloud.com)
[11:44:41] *** Joins: cespare (sid330206@id-330206.hampstead.irccloud.com)
[11:47:58] *** Joins: op2 (~op@user/op2)
[12:14:48] *** Quits: shiranaihito (~textual@219.85.169.212) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:19:56] *** Quits: op2 (~op@user/op2) (Remote host closed the connection)
[12:37:40] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[12:39:57] *** Joins: shiranaihito (~textual@2001-b011-4000-3c66-0c49-5c9f-8e86-4265.dynamic-ip6.hinet.net)
[12:56:11] *** Quits: IUSR (sid348938@id-348938.hampstead.irccloud.com) (Ping timeout: 245 seconds)
[12:57:48] *** Joins: IUSR (sid348938@id-348938.hampstead.irccloud.com)
[13:00:14] *** Quits: AlaskanEmily (~AlaskanEm@user/alaskanemily) (Remote host closed the connection)
[13:01:36] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Ping timeout: 245 seconds)
[13:05:12] *** Joins: dadinn (~dadinn@cpc87065-finc18-2-0-cust67.4-2.cable.virginm.net)
[13:49:29] *** Joins: to-hu (~Thunderbi@p548a67f8.dip0.t-ipconnect.de)
[14:06:23] *** Joins: to-hu1 (~Thunderbi@p200300e9af1a1100c1ccaabd8107bcef.dip0.t-ipconnect.de)
[14:06:51] *** Quits: to-hu (~Thunderbi@p548a67f8.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[14:06:51] *** to-hu1 is now known as to-hu
[14:38:34] *** Quits: runejuhl (~runejuhl@user/runejuhl) (Ping timeout: 268 seconds)
[14:42:25] *** Joins: runejuhl (~runejuhl@user/runejuhl)
[14:52:11] *** Quits: runejuhl (~runejuhl@user/runejuhl) (Ping timeout: 256 seconds)
[14:54:12] *** Joins: runejuhl (~runejuhl@user/runejuhl)
[15:00:46] *** Quits: libertyprime (~libertypr@203.211.73.21) (Ping timeout: 245 seconds)
[15:01:39] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 264 seconds)
[15:09:01] *** Joins: libertyprime (~libertypr@118-92-79-43.dsl.dyn.ihug.co.nz)
[15:17:34] <yeik-the-spik[m]> Could anyone recommend good resources or share some ideas on integration testing asynch programs? I am peppering Thread/sleep in my code, which feels very cheap.
[15:21:05] <yeik-the-spik[m]> It also yields problems like tests passing on my laptop and not on my ci machine, the latter needing more time.
[15:21:26] <opqdonut> it's a hard problem in general
[15:21:38] <opqdonut> you need timeouts to catch failures where the thing you wanted to happen didn't happen
[15:21:52] <opqdonut> if your timeouts are too long, a failing test suite will take too long
[15:22:02] <opqdonut> if your timeouts are too short, you'll get false failures
[15:22:52] <opqdonut> when I've needed to test concurrent (thread-like) code, I've used lots of Java CyclicBarriers to synchronize my test code with the various threads I'm testing
[15:23:08] <yeik-the-spik[m]> <yeik-the-spik[m]> "Could anyone recommend good..." <- I am sleeping the test code, just to be clear
[15:23:20] <opqdonut> you can do things like "wait for thread A to be in state B, thread C to be in state D, then check X"
[15:23:27] <shiranaihito> yeik-the-spik[m] maybe you can check test results in a callback that's run after some async stuff completes
[15:25:25] <shiranaihito> i guess it depends on what kind of async tools you're using
[15:26:52] <opqdonut> even then you need a timeout
[15:27:15] <opqdonut> but yeah it's better to do something like a poll on a queue with a timeout
[15:27:18] <opqdonut> or a wait on a future with a timeout
[15:27:21] <opqdonut> instead of just a sleep
[15:27:37] <opqdonut> it's a bit more intentional, and the success path is quicker
[15:27:57] <Para> If possible, I sometimes inject a lock/semaphore/counter at the end of process for this purpose alone.
[15:28:19] <opqdonut> yeah the CyclicBarriers I mentioned are great for that
[15:28:21] <Para> Then I can just create that in test code, pass it to the async monster and block on the lock/whatever until it releases.
[15:28:40] <yeik-the-spik[m]> <shiranaihito> "yeik-the-spik maybe you can..." <- Yeah, I thought about that one. It feels a lot cleaner. But I am not sure I like adding a callback just for testing purposes. It feels like polluting the core logic 
[15:28:57] <opqdonut> testability is a feature
[15:29:13] <Para> Of course one could architecturally build eg. core.async functions so that they always return a response channel, which makes pipelining and composing maybe not easier but simpler, and in tests you could reuse those return channels directly to obtain results.
[15:29:15] <opqdonut> you need to intentionally build code to be testable, especially concurrent/async code
[15:30:51] <Para> once again I'll link this here, although not directly related but I still think this is a very good overview of core.async and it related to what I mentioned :) https://medium.com/@loganpowell/cljs-core-async-101-f6522faf536d
[15:31:32] <Para> I haven't had the joy to do a lot of core.async yet so I don't have a general code example to share, at least nothing serious, but to me it seems the idea of explicit return channels keep at least core.async the most testable.
[15:31:36] <shiranaihito> yeik-the-spik[m] "But I am not sure I like adding a callback just for testing purposes. It feels like polluting the core logic" <-- well, i'm not sure it's actually a dirty thing :). and you probably need "something extra" for testing async stuff anyway, just because async
[15:34:07] <yeik-the-spik[m]> opqdonut: Testability as a feature. That makes sense. I feel lightly enlightened.
[15:34:47] <yeik-the-spik[m]> shiranaihito: Yeah, and its definitely cleaner than what I have now. But I was wondering alternatives
[15:36:26] <yeik-the-spik[m]> I will check CyclicBarriers and Para 's post. Is there a Clojure alternative to CyclicBarriers? I would rather not use interop
[15:37:46] <shiranaihito> yeik-the-spik[m] right, but there's going to be some unwieldiness anyway. But it doesn't have to be "dirty". For example, if you were using Futures for doing things asynchronously, you could theoretically return a Future (or a chain of them etc) from your API to the test code and wait for it to complete before checking results
[15:42:18] <yeik-the-spik[m]> <Para> "Of course one could architectura..." <- Most of my async is really simple. Just `future`ing db writes, so I can send a return to the client before the data is actually inserted. For that case, that implementation would be really easy. I guess in the vein of what shiranaihito is saying. I have a websocket and a little more involved async process that  might need some refactoring.
[15:43:16] <yeik-the-spik[m]> Well, you all have been most helpful. Thank you very much for your knowledge!
[15:44:00] <shiranaihito> btw, are you sure you even need to Future your DB writes? :)
[15:44:13] <yeik-the-spik[m]> I am not sure of anything
[15:44:18] <shiranaihito> :)
[15:44:40] <shiranaihito> if you're writing a reasonably normal web app, you probably don't need to make DB writes asynchronously anyway
[15:46:28] <shiranaihito> yeik-the-spik[m] "I can send a return to the client before the data is actually inserted" <-- this sounds like you're trying to make things "responsive", but how much data would you need to write before the user would perceive any unresponsiveness even with everything happening synchronously?
[15:46:55] <yeik-the-spik[m]> Ok, I was going to ask you to ask me that question
[15:47:01] <shiranaihito> :)
[15:47:20] <yeik-the-spik[m]> Cause I did not know what question I needed to ask.
[15:47:25] <shiranaihito> so if you're not doing something rather unusual, you probably don't need to worry about asyncness
[15:49:26] <yeik-the-spik[m]> I implementing a spec that dictates a couple of async processes. Those are not negotiable
[15:50:07] <yeik-the-spik[m]> But I was under the impression that having async writtes would just yield better performance of the app.
[15:50:17] <yeik-the-spik[m]> s/writtes/writes/
[15:50:56] <yeik-the-spik[m]> But now I know the questions I need to ask to figure out whether that is the case
[15:51:19] <yeik-the-spik[m]> * I'm implementing
[15:52:35] <yeik-the-spik[m]> thanks!
[15:52:48] <shiranaihito> yeik-the-spik[m] "I was under the impression that having async writes would just yield better performance of the app" <-- that's a common conception, but afaik it's rare that you can actually improve performance by making things async. It depends on Stuff, and i'm not an expert, but in general people just have this notion without really understanding why
[15:53:29] *** Quits: penguwin (~penguwin@fribbledom.com) (Quit: NO CARRIER)
[15:53:33] <yeik-the-spik[m]> I was just told to do things that way by a senior architect a couple of years ago
[15:53:53] <shiranaihito> but if your client-side javascript makes a request that needs to write 100 000 rows into the DB, then yeah, you'd probably want to involve some asyncness to make the app seem more responsive :)
[15:54:16] <yeik-the-spik[m]> I was working with python then, so I did not follow that advice 100% of the time. Since making stuff async is so easy with Clojure, I did here
[15:55:03] <shiranaihito> obviously 100k rows is an exaggeration, and i have no idea where the practical limit might actually be, but it should be pretty safe to make say, even 10 writes to the DB in one request, and things would still be responsive
[15:55:55] *** Joins: penguwin (~penguwin@fribbledom.com)
[15:56:03] <shiranaihito> yep, maybe the senior architect guy just had adopted the idea from "everyone else", without considering it too deeply
[15:56:14] <shiranaihito> the whole world is using Kubernetes too, for no good reason
[15:56:32] <shiranaihito> (and Docker, and so many other pointless/harmful fads)
[16:30:24] <yeik-the-spik[m]> Yeah. We were using Docker. I have mixed feelings about that one. But we did not had proper developers for a while (I am a statistician, there was an engineer more senior than me, and my junior taught him git), so we were creating all kind of havoc, and likely misusing the tool. I can see the potential if you have a large organization with 100's of devs tho.
[16:36:45] *** Joins: yewscion (~yewscion@72-21-196-64.amazon.com)
[16:38:42] *** Joins: egli (~user@nehebkau01.sbs.ch)
[16:42:43] <shiranaihito> yeik-the-spik[m] afaict, people started using Docker because "isolating" things like that was meant to shield them from explosions caused by missing/conflicting dependencies etc
[16:43:15] <shiranaihito> but how serious a problem was it really? .. and now everyone and their neighbour's dog are using Docker (and Kube) because everyone else is
[16:43:40] <shiranaihito> people were doing just fine with virtual machines
[16:44:21] <yeik-the-spik[m]> yeah, about that. I managed to write a microservice that would bring the whole system down
[16:44:32] <shiranaihito> :)
[16:45:10] <shiranaihito> how did it happen then
[16:45:42] <yeik-the-spik[m]> and it was the stupidest of services. just flask, with a single get method. It would get the body, make a call to an outside service, and just respond with the response of the other service
[16:48:00] <yeik-the-spik[m]> I had 5 or 6 like that one. I dont know why I would be tasked to write such a service. I dont know how it would cause any trouble, it just accepted an http request and made a http request. it had almost no computing.
[16:48:25] <shiranaihito> ok, and how would Docker have helped?
[16:48:33] <yeik-the-spik[m]> and it worked fine on both my laptop and the dev server.
[16:48:41] <yeik-the-spik[m]> I dont know, docker was required
[16:49:26] <shiranaihito> :)
[16:49:30] <shiranaihito> weird
[16:49:31] <yeik-the-spik[m]> the service ran on docker, and the whole system was with docker compose I think. If that particular docker image was running, everything would break
[16:49:50] <yeik-the-spik[m]> I never understood why
[16:49:54] <shiranaihito> alrighty, well then, it sounds like that just supports my anti-Docker sentiments :)
[16:50:21] <yeik-the-spik[m]> only half
[16:51:03] <shiranaihito> but it's just annoying and crazy how new tech is adopted and then spreads everywhere.. first people are just running after shiny toys and playing with them, and if the toy is shiny enough, more and more people will want to adopt it, until it's everywhere and "The Standard"
[16:51:10] <yeik-the-spik[m]> I would say that it was as much fault of my incompetence as docker's
[16:51:17] <yeik-the-spik[m]> docker just made it impossible to debug the issue
[16:51:23] <shiranaihito> ok
[16:51:43] <yeik-the-spik[m]> I see your point tho
[16:52:10] <shiranaihito> and as Rich Hickey pointed out in some presentation, people see the (perceived) value of everything, but the cost of nothing
[16:53:10] <shiranaihito> and so, everyone is using Kubernetes for even the smallest apps, supposedly preparing for scaling their app to whatever number of users..  and 99.9(9?9?)% of them will never scale that far anyway
[16:53:41] <shiranaihito> and on the other hand, Stack Overflow scaled worldwide on a handful of dedicated servers
[16:54:06] <shiranaihito> so even if you do reach "massive scale", you can still manage fine without K8S
[16:57:26] *** Quits: cespare (sid330206@id-330206.hampstead.irccloud.com) (Ping timeout: 245 seconds)
[17:00:37] *** Joins: cespare (sid330206@id-330206.hampstead.irccloud.com)
[17:06:18] <yeik-the-spik[m]> For me the positive side of docker was: while applying to new positions, on take home technical assignments, just make it run on docker. Easiest way to get points.
[17:07:39] <shiranaihito> :)
[17:11:15] *** Quits: libertyprime (~libertypr@118-92-79-43.dsl.dyn.ihug.co.nz) (Ping timeout: 264 seconds)
[17:17:55] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[17:22:00] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[17:25:07] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[17:28:21] *** Joins: schmudde (~schmudde@2001:b07:ae6:7d19:3f80:969a:ace8:f045)
[17:30:50] *** Quits: Ilyu_ (~quassel@166.215.82.79.rev.sfr.net) (Read error: Connection reset by peer)
[17:54:42] *** Joins: op2 (~op@user/op2)
[17:55:43] *** Quits: pseudonymous (~pseud@78.143.68.142.static.fibianet.dk) (Quit: Leaving)
[18:02:01] *** Quits: atw (~user@cst2-164-145.cust.vodafone.cz) (Ping timeout: 245 seconds)
[18:15:36] *** Quits: schmudde (~schmudde@2001:b07:ae6:7d19:3f80:969a:ace8:f045) (Ping timeout: 260 seconds)
[18:18:24] *** Joins: schmudde (~schmudde@2001:b07:ae6:7d19:3f80:969a:ace8:f045)
[18:20:59] *** Joins: lagash (lagash@lagash.shelltalk.net)
[18:46:11] *** Joins: shiranaihito_ (~textual@123-192-192-149.dynamic.kbronet.com.tw)
[18:47:48] *** Quits: shiranaihito (~textual@2001-b011-4000-3c66-0c49-5c9f-8e86-4265.dynamic-ip6.hinet.net) (Ping timeout: 260 seconds)
[19:15:19] <sobel> i really like distributing my dev environment as containers
[19:30:11] *** Quits: croeso[m] (~croesovep@2001:470:69fc:105::1:aaa) (Quit: You have been kicked for being idle)
[19:30:56] <shem> for clojure dev i only use docker for postgres and pgadmin. for my workflow the other dependencies are trivial and can be run on the host
[19:31:08] *** Joins: croeso[m] (~croesovep@2001:470:69fc:105::1:aaa)
[19:34:44] *** Quits: bbz (sid62109@id-62109.ilkley.irccloud.com) (Read error: Connection reset by peer)
[19:35:15] *** Quits: davdunc (sid93271@ilkley.irccloud.com) (Ping timeout: 264 seconds)
[19:36:42] *** Joins: davdunc (sid93271@id-93271.ilkley.irccloud.com)
[19:37:40] *** Joins: bbz (sid62109@id-62109.ilkley.irccloud.com)
[19:48:56] *** Quits: to-hu (~Thunderbi@p200300e9af1a1100c1ccaabd8107bcef.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[19:53:23] *** Quits: Ingvix (~Ingvix@user/ingvix) (Remote host closed the connection)
[19:53:50] *** Quits: schmudde (~schmudde@2001:b07:ae6:7d19:3f80:969a:ace8:f045) (Ping timeout: 260 seconds)
[19:57:45] *** Joins: Ingvix (~Ingvix@user/ingvix)
[19:59:07] *** Joins: seschwar (~seschwar@user/seschwar)
[20:06:31] *** Joins: schmudde (~schmudde@2001:b07:ae6:7d19:c96e:efbe:a5c8:bf59)
[20:14:47] *** Quits: egli (~user@nehebkau01.sbs.ch) (Quit: ERC (IRC client for Emacs 27.1))
[20:16:53] *** Quits: runejuhl (~runejuhl@user/runejuhl) (Ping timeout: 256 seconds)
[20:27:52] *** Joins: runejuhl (~runejuhl@user/runejuhl)
[20:29:31] *** Joins: uncleyear (~ian@pppoe.178-66-157-3.dynamic.avangarddsl.ru)
[20:34:46] <sobel> i have to host React contractors who just want a turnkey backend, docker hits the mark
[20:50:41] *** Joins: uncleyea1 (~ian@pppoe.178-66-156-72.dynamic.avangarddsl.ru)
[20:53:15] *** Quits: uncleyear (~ian@pppoe.178-66-157-3.dynamic.avangarddsl.ru) (Ping timeout: 264 seconds)
[21:04:39] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 264 seconds)
[21:12:23] <selfsymmetric-mu> yeik-the-spik[m]: That's good advice! I'm about to start applying myself, I may use this tip.
[21:14:37] *** Joins: X-Scale` (~ARM@92.250.97.112)
[21:14:56] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 245 seconds)
[21:15:56] <technomancy> docker makes a lot more sense when you come to it from a language/runtime that doesn't have uberjars
[21:16:16] <technomancy> I wish they could have just fixed the damn languages instead of inflicting the workaround on everyone
[21:16:41] <shiranaihito_> technomancy indeed.. "everything" depends on five hundred other things.. it's very sad
[21:17:06] *** Joins: Guest13 (~Guest13@ip5f5ac0c1.dynamic.kabel-deutschland.de)
[21:17:12] <shiranaihito_> remember when NPM went down because some Goofy McGooferson removed his "left-pad" library from there? :D
[21:17:18] <selfsymmetric-mu> technomancy: A true point. Flexibility is inflicted on us by the imperfections of the universe.
[21:17:27] <technomancy> like, I get it. you hate bundler. me too dude. but don't drag me into this.
[21:17:42] *** X-Scale` is now known as X-Scale
[21:17:44] <shiranaihito_> :P
[21:18:08] *** Joins: matty_matt (~matt@135.129.244.70)
[21:18:08] <selfsymmetric-mu> I can sell myself with my experience with kubernetes, Docker, Nix, vendoring, and static linking, without getting to evangelical about any of it (I hope!).
[21:18:15] <shiranaihito_> what's wrong? you don't hate pointless crap yourself, and therefore aren't interested in complaining about it with me? :)
[21:18:55] <selfsymmetric-mu> shiranaihito_: I'm down to complain. 
[21:19:02] <shiranaihito_> anyhow, the software world has gone quite crazy in many ways
[21:19:28] <shiranaihito_> selfsymmetric-mu thanks :) but i should be doing other stuff now
[21:19:43] <selfsymmetric-mu> I think in an older time I'd be quite happy to sit on a bench with hot coffee while criticizing passersby. Now I can do it remotely.
[21:19:47] <shiranaihito_> (the real world has gone super crazy too)
[21:20:03] <shiranaihito_> (with govts fucking up the world in their quest for power)
[21:20:10] <selfsymmetric-mu> Gotta ride the hurricane.
[21:20:41] *** Quits: Guest13 (~Guest13@ip5f5ac0c1.dynamic.kabel-deutschland.de) (Client Quit)
[21:21:39] <shiranaihito_> selfsymmetric-mu yeah, we're all inclined to be judgmental about various things
[21:22:42] <selfsymmetric-mu> Judge not lest ye be judged. But if someone judges you first you judge them right back.
[21:30:12] *** Quits: mbuf (~Shakthi@27.58.141.80) (Quit: Leaving)
[21:35:31] *** Joins: mwnaylor (~user@2601:5ce:4300:5560::68b3)
[21:59:52] *** Joins: andreyorst_erc (~user@176.59.42.207)
[22:05:46] *** Quits: yewscion (~yewscion@72-21-196-64.amazon.com) (Ping timeout: 245 seconds)
[22:11:09] <v3gajerusalem> hmm judge not lest ye be judged means  to only judge people by the rules in which you're judged. in which you judge yourself.
[22:12:18] <technomancy> yeah it's not a very good aphorism. lacks clarity.
[22:14:00] <wink> technomancy: re: uberjar. not a bad take, but (and here I simply don't know enough), isn't Java preeetty big on reimplementing everything? other languages are always on c-bindings plus underlying lib. I remember python, PEX is like an uberjar, but still the problem of c deps
[22:14:22] <v3gajerusalem> It's there...it's clear enough. But like all humans...and religion we require 'wiggle room'"Oh the old testament has been thrown out... GOD saw where he f'd up and decided to give us a bit more freedom" lol
[22:14:34] <wink> so the real question: do people simply not depend o nanythin in C via Java or can you package c libs into uberjars?
[22:14:56] <v3gajerusalem> but I digress. I don't want to offend anyone or even go into that here. wrong place =P 
[22:15:11] <technomancy> wink: you can package C libraries into uberjars but using C code on the JVM is almost always a nightmare for other unrelated reasons
[22:15:23] <wink> technomancy: yeah, then you kinda have your reasoning :P
[22:15:25] <manicennui> technomancy: Has that changed with the new FFI?
[22:15:44] <manicennui> https://github.com/IGJoshua/coffi
[22:15:45] <technomancy> manicennui: oh, good point. I have no idea; I don't keep up with post-8 jvm stuff.
[22:16:10] <wink> I think it would work under 2 premises. a) language ecosystem is big enough to have "everything sorted natively", esp. crypto etc. and b) it is fast enough.
[22:16:22] <v3gajerusalem> hmmm, while you guys are on FFI do you see people using rust and java/clojure in unison in the future?
[22:16:28] <technomancy> wink: or just like "don't suck at static linking" right?
[22:16:29] <ridcully> you can put .so files into jars.  so i'd assume you can put them into an uberjar
[22:16:53] <wink> technomancy: ok, bonus question, as it was your idea. is there a thing for the lua ecosystem that does this? :D have you invented uberjars for fennel yet?
[22:17:09] <wink> I need to read up on that, thanks
[22:17:18] <technomancy> wink: yeah of course; you can use --compile-binary with C libraries, as long as you can build the C libraries for static linking
[22:17:42] <technomancy> some C libs just have goddamn miserable builds which make static linking difficult but that's a bug in the library not a problem with the approach
[22:17:57] <technomancy> we have the technology
[22:17:58] <wink> s/some/too many/
[22:18:01] <wink> but you're not wrong
[22:18:13] <wink> I think static linking was unpopular for too long
[22:18:27] <wink> queue: blame distros for their upgradability story :P
[22:18:34] <wink> I only see an uptake since golang
[22:18:52] <technomancy> I mean it's not a good fit for everything, like ... programs for end users and stuff
[22:19:00] <technomancy> but it's a great docker replacement =)
[22:19:06] <wink> yeah
[22:19:33] <technomancy> people ooh and ahhh over how golang makes it easy to build a single self-contained executable and it's like ... how is this a super advanced feature?
[22:19:39] <wink> on the other hand, take postgres for example
[22:19:40] *** Joins: logiz (~otter@pool-100-2-192-142.nycmny.fios.verizon.net)
[22:19:59] <technomancy> how did we get to the point where "build a thing which contains all its dependencies" is considered arcane magic
[22:20:00] <wink> just a static build doesn't give you the "file system layout" of all files and dirs, which a container gives you
[22:20:15] <wink> so to be fair, in that case that would only solve half the issues
[22:20:29] <technomancy> I'm not sure I understand the problem
[22:20:40] <wink> assume a fat postgres binary
[22:20:52] <wink> it will still need like 5 config files and some data dir
[22:20:59] <wink> (very muich simplified)
[22:21:09] <wink> in a container you can abstract that away a little easier
[22:21:17] <wink> than having to run your binary with 50 flags
[22:21:36] <technomancy> but if the data dir lives in the container then it's ephemeral; you need that to exist outside anyway right?
[22:21:55] <wink> yes of course, if you want it persistent
[22:21:58] <technomancy> or are you talking about stuff that's specifically meant to be throwaway data during development?
[22:22:02] <wink> but ephemeral use is a valid use case
[22:22:02] <technomancy> just ... use /tm?
[22:22:07] <technomancy> I mean /tmp?
[22:22:21] <wink> I'm just saying the uberjar thing does not solve everything. only most things
[22:22:47] <technomancy> having a hard time seeing a nontrivial problem there
[22:22:59] <wink> maybe you're an optimist and I'm a pessimist? :P
[22:23:45] <wink> but with mostly agreeing I shouldn't be your target audience to convince me any further
[22:24:06] <wink> I'm trying to think about a few languages right now and how this fits
[22:24:08] <wink> PHP
[22:24:16] <wink> 's phar kinda works like that
[22:24:23] <wink> except, again, for some of the library stuff
[22:24:38] <ridcully> by using docker i have removed my problem of having to have different version of things in my os and sooner or later cluttering everything up
[22:25:24] <wink> ridcully: yeah, I kinda also sometimes do that but I think there could be a better interface than having to remember in which folder your docker-compose file is.
[22:25:30] <ridcully> if it's not a productivity tool like git or vim it won't be installed.  if it's not in sdkman - dito.  i run it via docker to not have to bother with stuff
[22:25:36] <wink> or how the container to start is called
[22:25:43] <ridcully> that of course is my developer opinion
[22:26:05] <wink> oh, we found an sdkman user in the wild!
[22:26:18] <wink> you don't happen to use lein via sdkman or do you? :D
[22:26:29] <ridcully> wink: sure i do
[22:27:07] <technomancy> I used to think it made sense to ensure everyone was using the same postgres version but then again, postgres has extraordinarily good backwards compatibility
[22:27:44] <wink> ridcully: awesome. if you notice any breakage just shout :) without stats and not using I never know if the releases work.
[22:28:01] <wink> (I messed up one and we got a report, but still...)
[22:29:12] *** Quits: dadinn (~dadinn@cpc87065-finc18-2-0-cust67.4-2.cable.virginm.net) (Quit: leaving)
[22:29:42] <ridcully> wink: i reported some time ago that the "new version" as not the newest one and `sdk ug ...` wanted to actually downgrade.  but i made the error to report it in the main repo and got told, that it's easy to write a migration somewhere... i closed the ticket
[22:30:06] <ridcully> so assuming you fixed that... so my heartfelt thanks for maintaining that
[22:30:18] <technomancy> wait the command for upgrade is actually "ug"?
[22:30:34] <technomancy> that's ... I love it. this reflects my feelings accurately.
[22:30:40] <ridcully> it's upgrade and you can shorten the names to something that is unique
[22:30:45] <technomancy> I'm going to add it to my shell aliases
[22:30:50] <ridcully> or maybe they just have some shortcuts
[22:31:33] <ridcully> since the help shows all aliases i think it's just that
[22:31:41] <wink> ridcully: hm, thanks. I'll try to have a look :P at least I don't remember
[22:32:03] <ridcully> wink: it got solved and it could as well be the problem you described
[22:33:02] <wink> or it was the day after the release and I was too slow. :P
[22:33:40] <wink> I did use nix for a few of those "isntall extra versions of tools" but never sdkman
[22:33:50] <ridcully> no that was a problem over a longer time.  i'd not report such a problem just because it did not work a day after release
[22:35:27] <ridcully> i basically only use the newest versions except for jdks - there i have 3-4 versions i opt in
[22:40:39] *** Quits: mwnaylor (~user@2601:5ce:4300:5560::68b3) (Ping timeout: 264 seconds)
[22:41:25] *** Quits: andreyorst_erc (~user@176.59.42.207) (Ping timeout: 268 seconds)
[22:44:15] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[22:46:36] *** Quits: schmudde (~schmudde@2001:b07:ae6:7d19:c96e:efbe:a5c8:bf59) (Ping timeout: 245 seconds)
[22:53:51] *** Quits: matty_matt (~matt@135.129.244.70) (Ping timeout: 264 seconds)
[23:06:59] *** Joins: matty_matt (~matt@135.129.244.70)
[23:10:31] *** Quits: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net) (Remote host closed the connection)
[23:11:32] *** Joins: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net)
[23:11:45] *** Quits: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net) (Remote host closed the connection)
[23:12:20] *** Joins: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net)
[23:12:45] *** Quits: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net) (Remote host closed the connection)
[23:13:21] *** Joins: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net)
[23:20:00] *** Quits: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net) (Remote host closed the connection)
[23:25:23] *** Joins: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net)
[23:26:52] *** Quits: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net) (Remote host closed the connection)
[23:27:32] *** Joins: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net)
[23:27:48] *** Quits: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net) (Remote host closed the connection)
[23:28:34] *** Joins: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net)
[23:32:09] *** Joins: schmudde (~schmudde@2001:b07:ae6:7d19:300:4cd1:71e1:62a)
[23:33:27] *** Quits: matty_matt (~matt@135.129.244.70) (Ping timeout: 264 seconds)
[23:57:16] *** Joins: Pixel_Outlaw (~ryan@2600-6c67-5e3f-ed1c-d431-5182-96e9-191d.res6.spectrum.com)
