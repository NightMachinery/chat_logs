[00:30:30] *** Joins: statisfiable6 (~sta-able@ns306169.ip-94-23-219.eu)
[00:31:19] *** Quits: bisectable6 (~bis-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[00:32:34] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[00:33:08] *** Joins: benchable6 (ben-able@2001:41d0:2:5eb5::)
[00:33:43] *** Joins: squashable6 (~squ-able@ns306169.ip-94-23-219.eu)
[00:33:59] *** Joins: unicodable6 (~uni-able@ns306169.ip-94-23-219.eu)
[00:34:01] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[00:34:04] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[00:34:13] *** Quits: squashable6 (~squ-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[00:34:13] *** Quits: statisfiable6 (~sta-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[00:34:13] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[00:34:13] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[00:34:13] *** Quits: coverable6 (~cov-able@ns306169.ip-94-23-219.eu) (Read error: Connection reset by peer)
[00:34:13] *** Quits: quotable6 (~quo-able@ns306169.ip-94-23-219.eu) (Read error: Connection reset by peer)
[00:34:13] *** Quits: bloatable6 (~blo-able@ns306169.ip-94-23-219.eu) (Read error: Connection reset by peer)
[00:34:13] *** Quits: notable6 (not-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[00:34:13] *** Quits: unicodable6 (~uni-able@ns306169.ip-94-23-219.eu) (Read error: Connection reset by peer)
[00:34:13] *** Quits: sourceable6 (~sou-able@ns306169.ip-94-23-219.eu) (Read error: Connection reset by peer)
[00:34:13] *** Quits: nativecallable6 (~nat-able@ns306169.ip-94-23-219.eu) (Read error: Connection reset by peer)
[00:34:13] *** Quits: reportable6 (~rep-able@ns306169.ip-94-23-219.eu) (Read error: Connection reset by peer)
[00:34:13] *** Quits: benchable6 (ben-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[00:34:13] *** Quits: committable6 (~com-able@ns306169.ip-94-23-219.eu) (Read error: Connection reset by peer)
[00:34:13] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[00:34:37] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[00:34:47] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[00:34:57] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[00:34:59] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[00:34:59] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[00:35:38] *** Joins: statisfiable6 (~sta-able@ns306169.ip-94-23-219.eu)
[00:35:38] *** Joins: shareable6 (~sha-able@ns306169.ip-94-23-219.eu)
[00:35:42] *** Joins: notable6 (~not-able@ns306169.ip-94-23-219.eu)
[00:35:48] *** Joins: coverable6 (~cov-able@ns306169.ip-94-23-219.eu)
[00:35:50] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[00:36:04] *** Joins: committable6 (com-able@2001:41d0:2:5eb5::)
[00:36:06] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[00:36:31] *** Joins: nativecallable6 (~nat-able@ns306169.ip-94-23-219.eu)
[00:36:37] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[00:37:02] *** Joins: quotable6 (~quo-able@ns306169.ip-94-23-219.eu)
[00:37:03] *** Joins: bloatable6 (~blo-able@ns306169.ip-94-23-219.eu)
[00:37:13] *** Joins: benchable6 (ben-able@2001:41d0:2:5eb5::)
[00:37:25] *** Joins: releasable6 (~rel-able@ns306169.ip-94-23-219.eu)
[00:37:25] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[01:21:31] <lucs> Hmm... Took me a while to figure out:
[01:21:34] <lucs> for ^42 { foo(); bar(); } # foo() is evaluated in sink context, but bar() is not, not sure why...
[01:28:47] <discord-raku-bot> <Nemokosch#9980> is it the last statement of your function?
[01:28:48] <discord-raku-bot> <Nemokosch#9980> idk how exactly it works but bar() is not in sink context probably because it's the last statement in some scope
[01:28:48] <discord-raku-bot> <Nemokosch#9980> therefore its return value is propagated
[01:29:54] <lucs> Yeah, that's kind of what I suspected, but I'm not sure where exactly the value is propagated to.
[01:30:57] *** Joins: melezhik (~igloo@c-98-198-217-77.hsd1.tx.comcast.net)
[01:31:11] <lucs> (It doesn't sink when it's the last statement in the block here.)
[01:32:12] *** Quits: melezhik (~igloo@c-98-198-217-77.hsd1.tx.comcast.net) (Remote host closed the connection)
[01:32:20] *** Joins: melezhik (~melezhik@c-98-198-217-77.hsd1.tx.comcast.net)
[01:33:12] <melezhik> patrickb I've created a prototype for sparkyci - http://sparrowhub.io:2222 so you can check it out and see the idea - please let me know if you have any thoughts ...
[01:33:46] <melezhik> I think what else besides test coverage would be interesting to add as CI part for a regular Raku project?
[01:34:17] <melezhik> maybe license checks? not sure ü§î if it fits opensource projects requirements ...
[01:35:19] <melezhik> another though - check pod syntax linter , but maybe not everyone uses pod now, many docs - just markdown ...
[01:35:59] <melezhik> code security vulnerabilities checks?
[01:43:50] *** Quits: melezhik (~melezhik@c-98-198-217-77.hsd1.tx.comcast.net) (Quit: Connection closed)
[01:47:05] <lucs> Yucky, but I can make sure bar() gets evaluated in sink context (because it may generate a Failure whose exception I want to be thrown) by doing:
[01:47:10] <lucs> for ^42 { foo(); bar(); next; }
[01:47:30] <guifa> you can also force sink context by just prefixing with sink
[01:47:41] <guifa>  for ^42 { foo(); sink bar(); }
[01:47:59] <lucs> Aha! I knew there must have been a better way :)
[01:48:03] <lucs> Thanks.
[01:53:11] *** Quits: lichtkind (~lichtkind@p200300feb70872683012c991af4ac9dc.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[02:03:25] <patrickb> melezhik: This looks really nice.
[02:03:51] <patrickb> melezhik: I'd focus on usability.
[02:04:08] <patrickb> Getting it up and running as simple as possible.
[02:04:32] <patrickb> GitHub / GitLab / SourceHut integration.
[02:04:51] <patrickb> Simple configuration
[02:04:59] * patrickb is off to bed now.
[02:06:51] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[02:10:40] *** Joins: melezhik (~igloo@c-98-198-217-77.hsd1.tx.comcast.net)
[02:15:16] *** Quits: melezhik (~igloo@c-98-198-217-77.hsd1.tx.comcast.net) (Remote host closed the connection)
[02:40:39] *** Quits: n1to (~n1to@user/n1to) (Ping timeout: 256 seconds)
[02:58:43] *** Joins: zacts (~zacts@user/zacts)
[03:04:35] *** Quits: tejr (~tejr@user/tejr) (Ping timeout: 240 seconds)
[03:06:24] *** Joins: jgaz (~jgaz@2600:8805:d980:16e::9e0)
[03:06:43] *** Joins: tejr (~tejr@user/tejr)
[03:08:25] *** Quits: discord-raku-bot (~RakuIRC@ip5f5ab729.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[03:08:31] *** Joins: discord-raku-bot (~RakuIRC@ip5f5ab720.dynamic.kabel-deutschland.de)
[03:08:57] *** Quits: gfldex (~dex@ip5f5ab729.dynamic.kabel-deutschland.de) (Ping timeout: 240 seconds)
[03:11:04] *** Joins: gfldex (~dex@ip5f5ab747.dynamic.kabel-deutschland.de)
[03:14:59] *** Quits: discord-raku-bot (~RakuIRC@ip5f5ab720.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[03:15:00] <gfldex> m: my $result = do for ^1 { 42 }; dd $result;
[03:15:00] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´List $result = $(42,)‚ê§¬ª
[03:15:05] *** Joins: discord-raku-bot (~RakuIRC@ip5f5ab747.dynamic.kabel-deutschland.de)
[03:25:07] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[03:31:47] *** Quits: morte_ (~user@190.104.116.153) (Remote host closed the connection)
[03:35:44] *** Quits: jgaz (~jgaz@2600:8805:d980:16e::9e0) (Quit: Leaving)
[03:56:11] *** Joins: epony (epony@user/epony)
[04:12:59] *** Joins: melezhik (~igloo@c-98-198-217-77.hsd1.tx.comcast.net)
[04:14:52] *** Quits: melezhik (~igloo@c-98-198-217-77.hsd1.tx.comcast.net) (Remote host closed the connection)
[04:20:59] <lucs> gfldex: Ah, gotcha, thanks.
[04:21:56] <moon-child> m: my $x = gather for ^1 { take 42 }; dd $x
[04:21:56] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´Seq $x = $((42,).Seq)‚ê§¬ª
[04:22:20] <moon-child> m: my $x = eager gather for ^1 { take 42 }; dd $x
[04:22:21] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´List $x = $(42,)‚ê§¬ª
[04:30:19] *** Joins: monkey_ (~user@190.104.116.153)
[04:37:22] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:38:39] *** Quits: guifa (~guifa@2604:cb00:c0c:5200:acc8:a402:f894:32d5) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[04:39:53] *** Joins: reportable6 (~rep-able@ns306169.ip-94-23-219.eu)
[04:53:13] *** Quits: monkey_ (~user@190.104.116.153) (Ping timeout: 260 seconds)
[04:59:07] <SmokeMachine> Is there a way to get the where condition from a subset? I‚Äôm thinking on a way of doing something like this: let‚Äôs say User is a Red model, then I‚Äôd like to be able to do something like this: subset Admin of User where *.role == ‚Äúadmin‚Äù; and that would work as usual and also, when you do Admin.^all, it would be equivalent of doing: User.^all.grep(*.role == ‚Äúadmin‚Äù); any idea if that‚Äôs possible?
[05:02:28] <SmokeMachine> (I know that .^all wouldn‚Äôt even work on that case because it‚Äôs using Metamodel::SubsetHOW instead of MetamodelX::Red::Model
[05:10:12] *** Quits: [Coke] (~coke@172.58.239.70) (Ping timeout: 272 seconds)
[05:10:51] *** Joins: [Coke] (~coke@172.56.35.62)
[05:54:13] *** Quits: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi) (Ping timeout: 246 seconds)
[06:03:13] *** Quits: avar (~avar@vm.nix.is) (Quit: Lost terminal)
[06:04:13] *** Joins: avar (avar@vm.nix.is)
[06:07:24] *** Joins: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi)
[06:37:51] *** Quits: euandreh (~euandreh@191.181.59.160) (Ping timeout: 256 seconds)
[06:40:50] *** Quits: [Coke] (~coke@172.56.35.62) (Ping timeout: 252 seconds)
[06:46:01] *** Joins: [Coke] (~coke@172.58.239.51)
[06:53:32] <Voldenet> SmokeMachine: Admin.^refinement gets you WhateverCode which isn't too useful ‚Äì in the simplest cases something like http://ix.io/3TYF could work
[07:03:30] <Voldenet> ‚Ä¶afterwards I read the rest of the question only asking for `^refinement`
[07:04:08] *** Quits: amenonsen (~amenonsen@pitta.toroid.org) (Remote host closed the connection)
[07:05:33] *** Joins: amenonsen (~amenonsen@pitta.toroid.org)
[07:10:25] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:ac31:7ac1:bab2:710d)
[07:20:01] *** Quits: xinming (~xinming@115.219.39.250) (Ping timeout: 256 seconds)
[07:32:12] *** Joins: frost (~frost@user/frost)
[07:57:35] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[08:03:26] *** Joins: guifa (~guifa@2604:cb00:c0c:5200:acc8:a402:f894:32d5)
[08:10:38] *** Quits: guifa (~guifa@2604:cb00:c0c:5200:acc8:a402:f894:32d5) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[08:15:59] *** Joins: stanrifkin_ (~stanrifki@p200300dbcf192600332458e092323e5c.dip0.t-ipconnect.de)
[08:18:35] *** Quits: stanrifkin (~stanrifki@p200300dbcf1c290038dd9207c8236d4c.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[08:52:41] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Quit: neshpion)
[09:10:23] *** Joins: zacts (~zacts@user/zacts)
[09:50:14] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[09:55:12] *** Quits: ggoebel (~ggoebel@107-134-157-130.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 272 seconds)
[09:59:47] *** Joins: zacts (~zacts@user/zacts)
[10:02:42] *** Quits: zacts (~zacts@user/zacts) (Client Quit)
[10:11:43] *** Quits: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi) (Ping timeout: 260 seconds)
[10:38:50] *** Quits: reportable6 (~rep-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[10:39:19] *** Joins: reportable6 (~rep-able@ns306169.ip-94-23-219.eu)
[10:41:33] *** Joins: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi)
[10:42:14] *** Joins: mexen (uid495612@user/mexen)
[10:46:30] *** Quits: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi) (Ping timeout: 272 seconds)
[10:57:54] *** Joins: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi)
[11:21:09] *** Joins: abraxxa-home (~alex@2a01:100:2000:2500::22)
[11:23:49] *** Quits: abraxxa-home (~alex@2a01:100:2000:2500::22) (Remote host closed the connection)
[11:25:05] *** Joins: abraxxa-home (~alex@2a01:100:2000:2500::22)
[11:58:16] <p6steve> lichtkind: I found this https://github.com/lichtkind/Chart - 46.8k lines so i am not going to ask "please rebuild as raku" ;-)
[11:58:51] *** Quits: nebuchadnezzar (~dad@82-65-17-178.subs.proxad.net) (Read error: Connection reset by peer)
[11:59:54] <p6steve> All: is there any general f/back on direction of travel for raku plotting ... my default is Inline::Python matplotlib or ggplot ... but maybe a shim on Inline::Perl5 Chart better?
[12:02:34] *** Joins: xinming (~xinming@115.219.37.168)
[12:12:23] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[12:45:15] *** Quits: tejr (~tejr@user/tejr) (Ping timeout: 240 seconds)
[12:46:40] *** Joins: tejr (~tejr@user/tejr)
[13:13:32] <MasterDuke> there are a couple raku plotting modules, but i don't think any are quite as feature-filled as matplotlib, etc
[13:46:41] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[13:46:41] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[13:47:23] *** Joins: linkable6 (~lin-able@ns306169.ip-94-23-219.eu)
[13:49:45] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[14:04:06] *** Quits: qorg11 (~lain@user/qorg) (Ping timeout: 245 seconds)
[14:06:37] *** Joins: qorg11 (~lain@user/qorg)
[14:33:47] <p6steve> MasterDuke: my bad too lazy to look at raku.land(!) ... SVG::Plot (while a bit neglected) has some good prior art on the raku API needed for plot (and even has plot examples with Grammars!)
[14:36:23] <p6steve> MasterDuke: so I will probably launch off that (may need to extend) for the pure raku side (then Inline::Python ```import matplotlib.pyplot as plt``` for backward compatibility and full features)
[14:40:01] *** Joins: ggoebel (~ggoebel@107-134-157-130.lightspeed.tukrga.sbcglobal.net)
[14:55:24] *** Quits: stanrifkin_ (~stanrifki@p200300dbcf192600332458e092323e5c.dip0.t-ipconnect.de) (Quit: Leaving)
[14:58:37] *** Joins: wingfold (~wingfold@173.38.117.65)
[15:00:23] *** Quits: ggoebel (~ggoebel@107-134-157-130.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 260 seconds)
[15:04:42] *** Joins: Altai-man (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz)
[15:29:18] *** Joins: Xliff (~XliffDroi@pool-71-255-227-73.washdc.east.verizon.net)
[15:29:22] <Xliff> \o
[15:29:37] <Xliff> What's the best way to get the maximum value for a num64?
[15:42:59] <MasterDuke> the max value is infinity, so not sure what you mean?
[15:48:05] <discord-raku-bot> <Nemokosch#9980> then the max finite value I guess
[15:48:05] <discord-raku-bot> <Nemokosch#9980> I'm rather curious about what num64 is
[15:50:46] <MasterDuke> it's a sized native num, though Num is just a wrapper around them and there really isn't much of a difference
[15:51:22] <MasterDuke> it's just a double under the hood
[16:14:38] <Xliff> MasterDuke: A google search gave that value to be something like 7976931348623157e308
[16:15:00] <Xliff> That's actually: 1.7976931348623157e308
[16:15:47] *** Quits: MasterDuke (~MasterDuk@94.2.240.25) (Quit: Connection closed)
[16:15:50] *** Quits: linkable6 (~lin-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[16:18:40] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[16:18:40] *** Joins: melezhik (~igloo@c-98-198-217-77.hsd1.tx.comcast.net)
[16:19:02] <melezhik> .
[16:19:05] <discord-raku-bot> <Nemokosch#9980> How does the $! variable work exactly? It reminds me of IOResult in Turbo Pascal
[16:19:27] <discord-raku-bot> <Nemokosch#9980> I had a process that failed. When I logged $! right after the try clause, things went on as usual. When I tried to postpone it after other calls, I failed
[16:19:45] <discord-raku-bot> <Nemokosch#9980> other calls NOT inside the try clause, that is
[16:19:51] *** Quits: melezhik (~igloo@c-98-198-217-77.hsd1.tx.comcast.net) (Remote host closed the connection)
[16:21:35] *** Joins: MasterDuke (~MasterDuk@94.2.240.25)
[16:23:14] <discord-raku-bot> <Nemokosch#9980> or is run implicitly async?
[16:23:19] <discord-raku-bot> <Nemokosch#9980> something is off here
[16:29:38] *** Quits: frost (~frost@user/frost) (Quit: Client closed)
[16:30:02] *** Joins: frost (~frost@user/frost)
[16:31:34] <moritz> there are two ways to handle errors: one is a CATCH block, where the error object is available as $_. Note that you don't need any 'try' for that, because the presence of a CATCH block already marks it as an error handler
[16:32:28] <moritz> the second is to use `try`, which catches all errors, and sets $!. $! shouldn't be reset unless by another (or this) try block
[16:37:42] *** Quits: reportable6 (~rep-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[16:38:26] *** Joins: reportable6 (~rep-able@ns306169.ip-94-23-219.eu)
[16:38:38] *** Quits: p6steve (~stephenro@host81-141-53-40.range81-141.btcentralplus.com) (Ping timeout: 272 seconds)
[16:50:52] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00)
[16:55:36] *** Joins: melezhik (~igloo@c-98-198-217-77.hsd1.tx.comcast.net)
[17:00:17] *** Quits: melezhik (~igloo@c-98-198-217-77.hsd1.tx.comcast.net) (Ping timeout: 256 seconds)
[17:03:17] <discord-raku-bot> <Nemokosch#9980> I think I'm facing some async issue with `run`.
[17:09:03] <discord-raku-bot> <Nemokosch#9980> from what I see, the clever thing is to not run `run` itself in sunk context
[17:10:11] <moritz> or use Proc::Async, which is, like, async by itself :D
[17:14:54] <discord-raku-bot> <Nemokosch#9980> The reason people choose `run` over Proc::Async is that Proc::Async is overkill for certain tasks
[17:26:12] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[17:33:03] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00)
[17:36:50] *** Quits: frost (~frost@user/frost) (Ping timeout: 250 seconds)
[17:37:03] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00) (Client Quit)
[17:38:54] *** Joins: jgaz (~jgaz@2600:8805:d980:16e::9e0)
[17:41:50] *** Joins: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[17:46:50] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[17:47:10] *** Joins: tejr (~tejr@user/tejr)
[17:50:42] <ugexe> sinking a failure raises an exception
[17:52:26] <[Coke]> I am close to writing a wrapper for Proc::Async because I use it a lot in my scripts for work.
[17:55:05] <jgaz> [Coke]: You use Raku in production? Very cool.
[17:59:22] <[Coke]> mm. I am not sure how much help a wrapper would be. I tend to have a list of things to process, run them all async collecting the output (so in a hash, with a lock), and then process the resulting output. Not sure how much of that is helpfully abstracted, and how much cleaner I can make the syntax.
[18:00:20] <[Coke]> (and if I did have a wrapper, doing anything other than that particular approach then becomes harder. Might be better to just writeup a sample explaining the usage.)
[18:00:38] <[Coke]> (which itself is cribbed together from poking people on this channel.)
[18:47:11] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[18:47:11] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[18:47:21] *** Joins: linkable6 (~lin-able@ns306169.ip-94-23-219.eu)
[18:48:32] *** Joins: evalable6 (~eva-able@ns306169.ip-94-23-219.eu)
[19:12:25] * nine has been using Raku in production for years
[19:13:06] <nine> It's the reason for the drive towards 0 segfaults in the same time span
[19:16:42] *** Joins: holyghost (~holyghost@109.136.39.83)
[19:16:47] <holyghost> re
[19:17:45] <holyghost> Gremlin Scheme (old racul) now can store variables of the form "(define x 5)" at runtime, it's at 2100+ lines and available here : https://sourceforge.net/projects/gremlin-scheme/files/
[19:18:17] <holyghost> Later on I will pull it towards a Scheme for raku extension, just as guile for GNU software
[19:18:34] <holyghost> See for the gremlinscm_dispatch_symbol method
[19:18:59] <holyghost> The system will have a bootstrappable library for talking Scheme with the runtime
[19:19:19] <holyghost> There is an API now for symbols and the theorem prover
[19:19:43] <holyghost> Instead of using BNF or something, it uses an inference/rule system to parse for the Scheme system
[19:20:00] <holyghost> Be patient, and I'll be too :-)
[19:23:26] *** Quits: jgaz (~jgaz@2600:8805:d980:16e::9e0) (Quit: Leaving)
[19:37:00] *** Joins: Sgeo (~Sgeo@user/sgeo)
[19:40:54] *** Quits: discord-raku-bot (~RakuIRC@ip5f5ab747.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[19:41:08] *** Joins: discord-raku-bot (~RakuIRC@ip5f5ab747.dynamic.kabel-deutschland.de)
[19:53:05] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00)
[20:21:43] *** Quits: Altai-man (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz) (Quit: Leaving)
[20:23:58] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[20:24:56] <ugexe> run is a wrapper for Proc::Async
[20:25:11] <ugexe> a generalized wrapper anyway
[20:25:56] <ugexe> although it sounds like you are talking more about a Process Manager than a wrapper
[20:30:59] *** Joins: p6steve (~stephenro@host81-141-53-40.range81-141.btcentralplus.com)
[20:40:48] *** Joins: guifa (~guifa@2604:cb00:c0c:5200:acc8:a402:f894:32d5)
[21:05:52] *** Quits: epony (epony@user/epony) (Read error: Connection reset by peer)
[21:06:50] *** Joins: epony (epony@user/epony)
[21:14:41] *** Joins: lichtkind (~lichtkind@p200300feb7087243b5dcdb2cc3a00e17.dip0.t-ipconnect.de)
[21:19:01] *** Joins: monkey_ (~user@181.114.17.106)
[21:19:18] <Voldenet> p6steve: I've used Chart::Gnuplot and despite some minor pains it worked relatively well
[21:32:26] <p6steve> Voldenet: tx!
[21:33:55] <Voldenet> iirc by default it didn't support pngcairo though
[21:34:23] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[21:34:44] <Voldenet> so i had to remove package maintainer-provided gnuplot and use the one from debian's repo
[21:49:17] *** Quits: monkey_ (~user@181.114.17.106) (Ping timeout: 256 seconds)
[22:02:58] *** Quits: Xliff (~XliffDroi@pool-71-255-227-73.washdc.east.verizon.net) (Quit: Leaving)
[22:36:22] *** Quits: reportable6 (~rep-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[22:37:13] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[22:38:13] *** Quits: sena_kun (~koto@94.142.239.45) (Remote host closed the connection)
[22:41:18] *** Quits: wingfold (~wingfold@173.38.117.65) (Ping timeout: 260 seconds)
[22:44:16] *** Joins: sena_kun (~koto@94.142.239.45)
[22:45:06] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00)
[22:48:50] *** Quits: holyghost (~holyghost@109.136.39.83) (Quit: bbl)
[22:49:30] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00) (Client Quit)
[23:39:05] *** Joins: ggoebel (~ggoebel@107-134-157-130.lightspeed.tukrga.sbcglobal.net)
[23:50:25] *** Joins: Xliff (~XliffDroi@pool-71-255-227-73.washdc.east.verizon.net)
[23:50:31] <Xliff> \o
[23:50:46] <Xliff> Does Num have a  wau of getting its floating point portion?
[23:52:48] <Xliff> sub a ($f) { $f - $f.floor}; say 19.3333.&a
[23:52:49] <evalable6> Xliff, rakudo-moar c917f32c1: OUTPUT: ¬´0.3333‚ê§¬ª
[23:52:58] <Xliff> Eh. That's not so bad.
[23:53:31] <Voldenet> actually
[23:53:38] <Voldenet> m: sub a ($f) { $f - $f.floor}; say -19.3333.&a
[23:53:39] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´-0.3333‚ê§¬ª
[23:55:11] <Voldenet> uh what?!
[23:55:25] <Voldenet> m: sub a (Num $f) { $f - $f.floor }; say -19.3333.&a
[23:55:25] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´Type check failed in binding to parameter '$f'; expected Num but got Rat (19.3333)‚ê§  in sub a at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[23:55:28] <Voldenet> m: sub a (Num $f) { $f - $f.floor }; say -19.3333.Num.&a
[23:55:28] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´-0.33330000000000126‚ê§¬ª
[23:55:54] <Voldenet> m: sub a (Num $f) { $f.floor }; say -19.3333.Num.&a
[23:55:55] <camelia> rakudo-moar 530e17848: OUTPUT: ¬´-19‚ê§¬ª
[23:56:29] <Voldenet> Why does floor do truncation?
[23:56:44] <Xliff> Coz .floor is a truncation?
[23:57:34] <Voldenet> Nope, floor and ceiling are very well-defined
[23:58:12] <Xliff> OK, then. I thought floor gave only the integer part of ther number. Effectively cutting off the floating point value.
[23:58:25] <Voldenet> in fact, I wonder why the output is -19 in this specific case, it's weird
[23:58:52] <drakonis> can nativecall be extended for usage with other languages?
[23:58:52] <Xliff> Um. Would floor of -19.333 be -20?
[23:59:14] <Voldenet> Yes, for -19.333: floor = -20, ceil = -19, trunc = -19
[23:59:14] <Xliff> drakonis: As long as that language can output to the system-level shared library format, I think so.
[23:59:22] <drakonis> i see
[23:59:26] <drakonis> should be fine then
[23:59:36] <Xliff> Voldenet, Um.... bug?
