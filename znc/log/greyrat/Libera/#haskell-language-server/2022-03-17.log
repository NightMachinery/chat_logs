[00:31:46] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[02:20:55] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Remote host closed the connection)
[02:21:08] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[02:24:34] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[02:24:55] *** Joins: hololeap (~hololeap@user/hololeap)
[04:16:47] *** Joins: libertyprime (~libertypr@118-92-82-225.dsl.dyn.ihug.co.nz)
[08:14:32] *** Quits: yauhsien (~Yau-Hsien@61-231-56-96.dynamic-ip.hinet.net) (Quit: Leaving)
[08:25:02] *** Joins: coot (~coot@213.134.190.95)
[12:17:15] *** Joins: fendor (~fendor@91.141.73.245.wireless.dyn.drei.com)
[13:07:25] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[13:29:32] *** Joins: brandonh (brandonh@gateway/vpn/protonvpn/brandonh)
[14:04:41] *** Joins: coot (~coot@213.134.190.95)
[14:37:43] *** Quits: brandonh (brandonh@gateway/vpn/protonvpn/brandonh) (Quit: brandonh)
[15:09:40] *** Joins: karim (~karim@41.34.205.183)
[15:15:44] *** Quits: karim (~karim@41.34.205.183) (Quit: karim)
[15:52:28] *** Joins: karim (~karim@41.34.205.183)
[16:11:33] <drsooch[m]> Working on an extension for a previous plugin. Need access to the logic for adding new Language Extension. I'd prefer not having to maintain the logic that the Pragmas plugin already does to find the last Pragma Location (which is built on ghcide logic). 
[16:11:33] <drsooch[m]> Are there any suggestions? My first thought was to pull this logic out into its own Rule, or perhaps just pull out the logic as a separate function somewhere.
[16:45:02] *** Quits: karim (~karim@41.34.205.183) (Ping timeout: 240 seconds)
[16:47:28] *** Joins: karim (~karim@41.34.205.183)
[16:48:06] *** Quits: karim (~karim@41.34.205.183) (Remote host closed the connection)
[16:48:28] *** Joins: karim (~karim@41.34.205.183)
[16:52:21] *** Joins: yauhsien (~Yau-Hsien@61-231-56-96.dynamic-ip.hinet.net)
[16:59:23] *** Quits: karim (~karim@41.34.205.183) (Ping timeout: 252 seconds)
[17:20:07] <fendor[m]> maerwald, I think even when we use a fallback HLS, we should use the latest wrapper
[17:20:40] <maerwald> ghcup doesn't support that currently
[17:20:40] <fendor[m]> because the old wrappers come with a bad HLS version
[17:21:13] <fendor[m]> ok
[17:22:33] <fendor[m]> I believe, we should split the wrapper (more specifically the HLS selection), and the setup that the wrapper performs to launch HLS
[17:23:41] <fendor[m]> we probably have like three places where we figure out the ghc version to use, all relying on hie-bios in some way, but also come with their own custom logic
[17:25:23] <fendor[m]> anyway, do you think it would be sensible to add support to ghcup for determining the latest HLS version that supports a given ghc  version?
[17:26:25] <maerwald> I don't know yet
[17:27:55] <fendor[m]> I think I like that idea, other clients can then easily provide basically the same features as vscode if desired
[17:28:32] *** Joins: karim (~karim@41.238.145.0)
[17:28:44] <wz1000> fendor[m], maerwald: do you think the extension is close to a good enough state for an HLS release?
[17:29:10] <maerwald> yeah, just release
[17:29:20] <fendor[m]> I believe so, we should be able to release it soon
[17:29:38] <wz1000> OK, we want https://github.com/haskell/vscode-haskell/pull/543 this to be merged, right?
[17:29:38] <fendor[m]> ok, I would like to add some more docs, but yeah, it is pretty much ready to go, ready for the bug reports
[17:30:05] <wz1000> or do we want to merge that later on?
[17:30:56] <fendor[m]> we want that to be merged
[17:31:33] <wz1000> alright, thanks for all the hard work!
[17:39:44] <fendor[m]> maerwald, serverExecutablePath overrides all other configurationsÃŸ
[17:39:49] <fendor[m]> s/configurationsÃŸ/configurations?/
[17:40:11] <fendor[m]> or only if PATH is set?
[17:40:48] <maerwald> https://github.com/haskell/vscode-haskell/pull/543/files#diff-6300b29e042762267f15748c5c6136cbedf8135e07a1881609a478404e1661baR217
[17:41:23] <fendor[m]> ok, the former
[17:42:08] <fendor[m]> I can't press merge... When I press it, github UI just doesn't do it
[17:42:13] <maerwald> lol
[17:42:28] <maerwald> a sign from the gods?
[17:43:56] <fendor[m]> what else can it be?
[17:44:01] <fendor[m]> it must be
[17:44:03] <maerwald> github sucking arse?
[17:44:12] <maerwald> I prefer merging via cli anyway
[17:44:19] <maerwald> I dislike github merge commits with bogus gpg key
[17:44:56] <fendor[m]> I think we have protected the branches, s.t. you can't merge with anything else but github ui
[17:45:06] <maerwald> revert that then
[17:46:05] <fendor[m]> I feel like github just gave up on life at the moment, not sure anything works anymore
[17:46:37] <maerwald> github is broken yeah
[17:46:44] <maerwald> merge via cli
[17:47:10] *** Joins: july541 (~july541@218.70.255.104)
[17:48:08] <fendor[m]> internal server error
[17:48:13] <fendor[m]> github is down, I believe
[17:48:33] <fendor[m]> https://www.githubstatus.com/
[17:48:56] <fendor[m]> welp
[17:48:57] <maerwald> amateurs!
[17:49:08] <maerwald> did you break github by pressing that button?
[17:50:02] <fendor[m]> that would be really impressive, wouldn't it? 
[17:50:23] <fendor[m]> so, yeah, I wish
[17:51:38] <maerwald> did you disable branch protection?
[17:53:55] <fendor[m]> I don't think so
[17:53:58] <fendor[m]> anyway, it is merged now
[17:54:56] <maerwald> and then push a tag, I guess
[17:58:37] <maerwald> 2.0.0 I guess
[17:58:41] <maerwald> signalling we broke everything
[17:58:58] <fendor[m]> One thing left to do is adding an explanation what the different values a user can pick actually mean for them
[17:59:14] <maerwald> that's already there in the config
[17:59:28] <maerwald> https://github.com/haskell/vscode-haskell/blob/950e02f0411e588c4819a697e3844f5350a78245/package.json#L160-L174
[18:00:50] <fendor[m]> I know, but I don't think that's discoverable for new users, I would expect they do the following: Install the extension -> Select recommended setup upon asking -> maybe read the extension documentation
[18:01:26] <maerwald> of course it's discovarable, it shows up in the settings
[18:02:19] <fendor[m]> I dont believe that's the first place new people look
[18:02:31] <maerwald> https://imgur.com/E5EFG6s.png
[18:02:58] <maerwald> I think that's exactly the place where I expect users to look for settings :D
[18:03:55] <maerwald> README also has lengthy explanations: https://github.com/haskell/vscode-haskell#downloaded-binaries
[18:04:13] <fendor[m]> I know, but new users will have to make a decision before having an opportunity to read the settings. Additionally, they won't easily understand immediately why they should care about this setting afterwards
[18:04:36] <fendor[m]> yeah, I would like to slightly change this lengthy explanation
[18:04:39] <maerwald> I don't really understand what you're proposing
[18:04:41] <fendor[m]> that's all I want ðŸ˜€
[18:05:27] <fendor[m]> I want to turn this lengthy explanation into a list, sketching out the implications for users
[18:06:11] <fendor[m]> Maybe move it more to the top so people see it immediately in the extension overview
[18:06:18] <maerwald> sure
[18:08:44] <fendor[m]> ðŸ™‚ Then a changelog, then a release, then a reddit announcement, then a discourse announcement
[18:09:43] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[18:15:22] <maerwald> and then count the cash from all the donations
[18:25:12] *** Quits: karim (~karim@41.238.145.0) (Ping timeout: 252 seconds)
[18:30:21] *** Quits: yauhsien (~Yau-Hsien@61-231-56-96.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[18:33:11] *** Quits: july541 (~july541@218.70.255.104) ()
[18:35:35] *** Joins: coot (~coot@213.134.190.95)
[18:53:45] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[18:54:50] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[19:54:10] <maerwald> is there a tool that automatically vendors all dependencies of a project? That would be a workaround for the missing "jump to definition" for dependencies
[19:58:55] <maerwald> fendor[m]: hm... I'm thinking to just implement https://github.com/haskell/vscode-haskell/issues/540
[19:59:09] <maerwald> that would also fix https://github.com/haskell/haskell-language-server/issues/236
[20:03:01] <fendor[m]> I am not sure how we should implement tool management... However, other IDEs do it as well... 
[20:03:43] <maerwald> it's rather trivial now
[20:06:09] <fendor[m]> I mean, how it should behave 
[20:07:33] <maerwald> it installs missing tools :D
[20:17:46] <fendor[m]> Yeah, and then you can use it on the cli? No right? 
[20:21:00] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[20:38:42] *** Joins: coot (~coot@213.134.190.95)
[21:28:35] <maerwald> fendor[m]: I also found a bug
[21:28:49] <fendor[m]> a cool one?
[21:30:37] <maerwald> https://github.com/haskell/vscode-haskell/blob/950e02f0411e588c4819a697e3844f5350a78245/src/hlsBinaries.ts#L552
[21:30:55] <maerwald> that's in multiple places, pretty hard to debug lol
[21:31:28] <maerwald> `ghcup list` doesn't guarantee that there's only one whitespaces
[21:37:08] <fendor[m]> oh yeah, true, I added example output once, but I don't think I commited it...
[21:48:45] <maerwald> oh god, now I found a bug in ghcup :D
[21:49:13] <sm> impossible!
[21:59:44] <fendor[m]> One minor issue I have encountered, when you manage to click away the initial dialog pop up, then the extension just gets stuck with no user feedback and no way to restart it. Should we maybe set a default to work around this?
[22:00:02] <fendor[m]> (The default being, `internal-ghcup`)
[22:00:38] <maerwald> I don't understand this bug lol
[22:00:53] <maerwald> fendor[m]: no, if you have a default, then there's no popup ever
[22:01:20] <maerwald> you just restart vscode and the popup will re-appear
[22:01:21] <fendor[m]> You can set the default if the user somehow manages to skip the pop up
[22:01:39] <fendor[m]> yeah, I am not sure I like that
[22:01:55] <fendor[m]> however, in this case, we can defer to end-users, if they complain about it
[22:01:58] <maerwald> I don't know what a sensible default is here. Probably PATH
[22:02:20] <maerwald> I'd get really annoyed if a tool starts downloading random crap unless I asked it to :p
[22:03:05] <maerwald> I tink I have some operator precedence error here
[22:03:45] <maerwald> https://gitlab.haskell.org/haskell/ghcup-hs/-/blob/master/app/ghcup/GHCup/OptParse/List.hs#L113-142
[22:04:08] <maerwald> it only prints 'cabal' with no version :D
[22:04:53] <fendor[m]> I admit, I hate the auto-download as well, but it was the previous behaviour, and our first thought should (IMO) be to make it as easy as possible for newcomers to get started. Expert users like you and me can disable that behaviour in the settings
[22:05:27] <maerwald> I think it is easy enough, there is a popup asking the user. If the click it away, the README will explain how to configure it
[22:05:42] <maerwald> Don't see any expertise required here
[22:06:39] <fendor[m]> you have to restart it, which is one step more than I would like to get at least something out
[22:06:48] <maerwald> ah, the padding is broken
[22:07:08] <maerwald> then default to PATH
[22:07:40] <fendor[m]> I don't think that's the best default, I think internal-ghcup is a better default
[22:07:46] <maerwald> I disagree
[22:08:24] <maerwald> 1. it starts downloading, although no one asked for it, 2. it's hard to figure out where that ends up
[22:08:57] <fendor[m]> that's in line with the previous behaviour, and I don't think I have seen many complaints about that
[22:09:32] <fendor[m]> rust-analyser does it, too (which I guess is not exactly a good argument)
[22:09:46] <maerwald> I think that's a major argument against using VSCode :p
[22:10:16] <maerwald> https://gitlab.haskell.org/haskell/ghcup-hs/-/blob/master/app/ghcup/GHCup/OptParse/List.hs#L145-148
[22:10:20] <maerwald> I have no idea what this does
[22:10:30] <maerwald> and it's broken
[22:11:00] <maerwald> prolly zipWith since it stops at the smalles length
[22:12:08] <fendor[m]> yeah I can see that a lot of people don't want that, but I think we also need to admit that a solid amount of developers do want similar behaviour.
[22:12:38] <maerwald> do they?
[22:13:30] <fendor[m]> I claim that, yeah
[22:13:39] <fendor[m]> honestly, this piece of code breaks my mind immediately ðŸ˜€
[22:13:48] <maerwald> yes
[22:13:59] <maerwald> I must have been drunk
[22:14:35] <fendor[m]> or on another level. So maybe high?
[22:14:51] <maerwald> no, those make me paranoid
[22:16:08] <fendor[m]> but drunk makes you productive? ðŸ˜€
[22:16:37] <maerwald> no, but helps with the chronic pain (or at least used to)
[22:18:31] <fendor[m]> ouch, sorry to hear that. Chronic pain is a bitch
[22:19:00] <maerwald> if it was just that :D
[22:19:18] <maerwald> so row is [[[Char]]]
[22:19:27] <maerwald> I'm not making progress lol
[22:20:04] <Guillaum[m]> `[[[Char]]]`, looks like the most performant data structure for the task ;)
[22:29:05] <maerwald> that's a great interview question
[22:29:19] <maerwald> extracting column list from row list
[22:29:44] <fendor[m]> maerwald, I propose to change the initial popup to this: 
[22:29:45] * fendor[m] uploaded an image: (52KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/trYJkjgBgoRwNKAayJENPTTi/image.png >
[22:30:13] <maerwald> EXPERT MODE
[22:30:33] <maerwald> "CHOOSE YOUR DIFFICULTY LEVEL"
[22:30:49] <fendor[m]> tranpose the matrix and then (!! column)? ðŸ˜€
[22:31:12] <fendor[m]> hehe, yeah, you might be right, it is over the top
[22:31:50] <fendor[m]> however, I worry that some users don't know what `PATH` is. Those users should naturally not use it, but you shouldn't give a dialog if users don't understand the choices
[22:32:10] <maerwald> don't push a release now
[22:32:20] <maerwald> it's not ready
[22:32:28] <fendor[m]> I don't, I am just creating the changelog, etc..
[22:33:24] * maerwald is panicking
[22:35:11] <fendor[m]> ah, it will be fine
[22:36:09] <maerwald> this might have to wait for a ghcup bugfix release
[22:36:54] <maerwald> https://gitlab.haskell.org/haskell/ghcup-hs/-/commit/0c70feb09c54bf06ee9ceddfaf808b2ca1027688
[22:38:09] <maerwald> and my toolchain management PR is ready
[22:38:17] <fendor[m]> oh yeah, it probably has to. Ah, so you had more columns than rows and so we lost stuff?
[22:38:59] <maerwald> i mean if we introduce large changes, I'd introduce them all at once
[22:40:29] <maerwald> it works great
[22:40:49] <maerwald> so the idea is: 1. bootstrap a toolchain with sensible defaults just so we can run `hls-wrappor --project-ghc`
[22:41:02] <maerwald> then once we have project ghc, we install the project-specific toolchain
[22:41:46] <fendor[m]> how does that work? We don't get a project ghc until we were able to figure out the cradle
[22:41:54] <fendor[m]> and the cradle needs the toolchain already
[22:42:20] <maerwald> exactly
[22:42:37] <maerwald> amazing
[22:44:00] <fendor[m]> really? how?
[22:45:40] <maerwald> https://github.com/haskell/vscode-haskell/pull/547
[22:50:55] <fendor[m]> ah, so we do install just everything and then can work it out
[22:52:29] <maerwald> so the test is: rm -rf ~/.ghcup and start the extension
[22:55:14] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[22:56:40] <maerwald> except you need a patched ghcup now
[22:56:52] <fendor[m]> I am a bit worried, we get then often the question, "how to open a ghci session", or "how to run this project from cli". But ill admit, it will make it even simpler to get from 0 to 100
[22:56:52] *** Joins: coot (~coot@2a02:a310:e241:1b00:ec1a:e9df:79ac:66ba)
[22:57:31] <maerwald> fendor[m]: that's a non-issue
[22:57:45] <maerwald> because the extension *does not* install ghcup
[22:58:48] <maerwald> that's why I think the "internal ghcup" should actually be a hidden option and PATH the default 
[22:58:57] <maerwald> because PATH works even if there is no ghcup
[22:59:01] <fendor[m]> in internal mode, it does, right? Then it can load projects you can't build in the cli
[22:59:07] <maerwald> no, it does not
[22:59:40] <maerwald> you cannot correctly install ghcup on windows via the extension, unless we start also dealing with the powershell script that installs msys2... and I'd rather not
[23:00:16] <maerwald> I mean, you can run ghc/ghcup/etc. without msys2 entirely
[23:00:27] <maerwald> but the user will be *pretty* lost once they hit issues
[23:01:22] <maerwald> and... the bootstrap scripts give some introduction to the user (e.g. explain how to run ghci)
[23:02:11] <maerwald> so the options should be: "How do you want to manage Haskell toolchain?" - 1. "automatically via ghcup", 2. "manually via PATH"
[23:03:35] <fendor[m]> that requires a finished ghcup installation, right?
[23:03:42] <maerwald> option 1 yes
[23:04:49] <fendor[m]> ok, but no completely automatic, here, get hls without pre-requirements
[23:05:03] <fendor[m]> I guess that's fine
[23:05:39] <maerwald> I think it's good to force them to the download page
[23:05:42] <fendor[m]> since you always need to install stuff  such as cabal/stack/ghc anyway
[23:06:02] <maerwald> that means they have some exposure to the options etc. outside of vscode and know where to read up on issues
[23:06:23] <maerwald> (and they will see the donate button)
[23:06:23] <fendor[m]> yeah, makes sense to me
[23:06:27] <maerwald> xD
[23:06:50] <fendor[m]> haha ðŸ˜€ 
[23:10:17] <fendor[m]> I think it would be a good idea to ask for some user feedback for the proposed changes. Firstly, to inform users about the incoming changes, and to get some feedback whether we are overlooking something
[23:11:08] <fendor[m]> e.g. my personal beef with the "install stuff for me" is that I never want to use stack instead of cabal, which sometimes happens if there is a `stack.yaml` but no `cabal.project`.
[23:11:21] *** Quits: coot (~coot@2a02:a310:e241:1b00:ec1a:e9df:79ac:66ba) (Quit: coot)
[23:11:49] <maerwald> another option?
[23:12:47] <fendor[m]> yeah I'd be fine with that
[23:12:49] <maerwald> we can add 3 (hidden) options: manageGHC, manageCabal, manageStack. When they are disabled, ghcup will just install hls and rely on PATH
[23:13:17] <fendor[m]> mhm, yeah seems sensible
[23:13:36] <maerwald> that's easy to implement, since `ghcup run` allows specifying every single tool
[23:14:11] <fendor[m]> yeah true, point being, we might be overlooking something
[23:14:18] <maerwald> what more?
[23:14:21] <fendor[m]> (although, I doubt it, at the moment)
[23:14:47] <maerwald> but those additionaly options I'd rather add on-demand when people complain?
[23:14:56] <fendor[m]> hehe, I complained now ðŸ˜› 
[23:15:00] <maerwald> just got rid of a number of settings
[23:15:05] <maerwald> the idea was to reduce them
[23:15:21] <fendor[m]> I know, but to be fair, you are adding features
[23:15:28] <maerwald> but simplifying configurations
[23:15:47] <maerwald> so... the right option for you might simply be PATH then
[23:15:59] <fendor[m]> true, it probably is
[23:16:22] <maerwald> it's not like it's inherently broken... the only thing you miss is the automatic downgrade
[23:16:39] <maerwald> which I don't think is useful for power users... they'd just add the ghc version via `ghcup compile hls...`
[23:16:51] <fendor[m]> ok, then one full on batteries-included approach, and one, where you are completely on your own
[23:17:22] <maerwald> yeah, stack vs cabal basically
[23:17:56] <maerwald> those have always been the natural two options: control and convenience
[23:18:00] <fendor[m]> I just read today, someone wrote, we should not keep bringing this up ;D 
[23:18:07] <maerwald> lol
[23:18:54] <maerwald> Idk... the amount of "omg haskell is dying" is starting to get annoying. Yeah, duncan and others are busy with blockchain, facebook and whatnot
[23:19:25] <fendor[m]> Awesome, this looks like a good solution to me: New Users only have to install ghcup, but then everything works on the fly (modulo restarting stuff), expert users have all the control they ever need
[23:19:43] <maerwald> yeah, the restarting may be somewhat annoying
[23:20:01] <fendor[m]> I don't even get why you would start a post about it? If it is too dead for you, don't use it... otherwise...
[23:20:53] <fendor[m]> and then naturally the conversation derailed immediately, with the OP seeming full of Schadenfreude they caused a discussion
[23:21:21] <maerwald> imperative programming always had a larger community than FP... so ofc you cannot compete with rust, which is starting to gather folks from C, C++, go, zig, zack, etc.
[23:22:21] <maerwald> here's the patched ghcup for testing https://gitlab.haskell.org/haskell/ghcup-hs/-/jobs/981725/artifacts/browse/out/
[23:23:49] <maerwald> you can observe the work in ~/.config/Code/User/globalStorage/haskell.haskell where you should now see funny directories
[23:29:57] <fendor[m]> Ah yes: `hls-1.6.1.0_ghc-8.10.7-cabal-3.6.2.0-stack-2.7.5`
[23:30:32] <maerwald> yep, we want them predictable and persistent in case someone launches multiple vscode etc.
[23:31:55] <fendor[m]> that's foresighted
[23:32:08] * maerwald jumps around erratically
[23:33:01] <fendor[m]> I think there is a bug, though: https://paste.tomsmeding.com/ub7aZq7L
[23:33:12] <maerwald> IMPOSSIBLE
[23:33:28] <fendor[m]> `hls-1.6.1.0_ghc-8.10.7_cabal-3.6.2.0-stack-2.7.5` vs `hls-1.6.1.0_ghc-8.10.7-cabal-3.6.2.0-stack-2.7.5`
[23:33:37] <fendor[m]> one more `_` between ghc and cabal tool
[23:34:29] <maerwald> yeah, found it
