[00:00:19] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[00:00:39] *** Quits: RoKenn (~RoKenn@user/rokenn) (Remote host closed the connection)
[00:01:00] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:6676:40a5:de27:d553)
[00:01:00] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:6676:40a5:de27:d553) (Changing host)
[00:01:00] *** Joins: RoKenn (~RoKenn@user/rokenn)
[00:03:47] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Quit: Client closed)
[00:04:04] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[00:21:30] <rpav> `inline case` when
[00:23:13] *** Quits: Guest7489 (~Guest@181.91.157.216) (Remote host closed the connection)
[00:26:59] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[00:28:01] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[00:28:35] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[00:30:16] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:c0e1:a2a7:15ca:ca0)
[00:30:16] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:c0e1:a2a7:15ca:ca0) (Changing host)
[00:30:16] *** Joins: RoKenn (~RoKenn@user/rokenn)
[00:30:38] *** Quits: FLHerne (flh@flherne.uk) (Quit: There's a real world out here!)
[00:31:49] *** Joins: FLHerne (flh@flherne.uk)
[00:33:34] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[00:37:38] *** Quits: paul424 (~tom@ip-5-172-236-134.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[00:43:01] *** Quits: DrMax (~DrMax@node-1w7jra94757fytxmmfxmtk8zw.ipv6.telus.net) (Remote host closed the connection)
[00:44:59] *** Joins: DrMax (~DrMax@node-1w7jra94757g2d7prpws7r2yc.ipv6.telus.net)
[00:48:52] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Quit: Leaving)
[00:50:51] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:f1bf:1f04:24b4:80f3) (Quit: Konversation terminated!)
[00:56:00] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[00:56:18] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 252 seconds)
[00:56:57] *** Joins: c4017w__ (~c4017@209.52.68.8)
[00:57:02] *** Quits: DSpider (~DSpider@82.79.237.2) (Quit: Leaving)
[00:59:41] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[01:00:26] *** Quits: pepperoni (~pepperoni@172.58.99.238) (Read error: Connection reset by peer)
[01:00:43] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[01:00:46] *** Joins: pepperoni (~pepperoni@172.58.99.238)
[01:01:57] *** Joins: xkuru (~xkuru@user/xkuru)
[01:01:58] *** Quits: t3nj1n (~t3nj1n@pool-173-52-219-149.nycmny.fios.verizon.net) (Read error: Connection reset by peer)
[01:02:59] <cq-work> https://godbolt.org/z/W11cf8csP
[01:03:00] <cq-work> :(
[01:06:17] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:06:47] <cq-work> Dang, even with -Wall and -Wextra that doesn't warn. Clang warns on that by default.
[01:09:37] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[01:09:57] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Client Quit)
[01:11:03] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Quit: Client closed)
[01:11:17] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[01:16:01] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[01:17:56] *** Joins: jokoon (~eio@2a01:e0a:542:e160:7c08:5456:3d12:f423)
[01:21:54] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[01:24:12] *** Quits: robod34 (~Username@79.113.243.73) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:24:30] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[01:26:13] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[01:28:48] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[01:29:15] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.4)
[01:29:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[01:30:21] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[01:38:09] *** Quits: immibis (~hexchat@62.156.144.218) (Remote host closed the connection)
[01:38:50] *** Joins: immibis (~hexchat@62.156.144.218)
[01:43:43] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:43:50] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:43:50] *** ChanServ sets mode: +v npaperbot
[01:49:55] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Ping timeout: 240 seconds)
[01:55:27] *** Quits: Uswald (Uswald@user/Uswald) (Ping timeout: 256 seconds)
[01:57:40] *** Joins: c4017w_ (~c4017@209.52.68.8)
[02:00:05] *** Joins: Miyu (~hackkitte@94.31.104.136)
[02:00:16] *** Joins: scoobydoob (~scooby@user/scoobydoo)
[02:00:26] *** Joins: pulse_ (~pulse@user/pulse)
[02:00:37] *** Joins: ashafq_ (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[02:00:56] *** Joins: immibis_ (~hexchat@62.156.144.218)
[02:01:30] *** Joins: manuels6 (~manuel@80.211.205.88)
[02:02:22] *** Joins: mgot_ (~mgot@vps-35cddd71.vps.ovh.net)
[02:02:35] *** Joins: cursey_ (~cursey@user/cursey)
[02:02:37] *** Quits: jokoon (~eio@2a01:e0a:542:e160:7c08:5456:3d12:f423) (Quit: Leaving)
[02:03:01] *** Joins: DarkDonno (~donno@58.84.206.182)
[02:03:10] *** Joins: VShell (~shell@user/shell)
[02:03:36] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[02:05:06] *** Joins: rdrg109_ (~rdrg109@user/rdrg109)
[02:05:25] *** Joins: zinc_ (~zinc@163.ip-51-254-203.eu)
[02:05:25] *** Joins: syrius_ (syrius@titan.stormtek.net)
[02:08:07] *** Quits: AmR (~AmREiSa@156.199.236.198) (Quit: Konversation terminated!)
[02:09:44] *** Quits: immibis (~hexchat@62.156.144.218) (*.net *.split)
[02:09:44] *** Quits: xkuru (~xkuru@user/xkuru) (*.net *.split)
[02:09:44] *** Quits: pepperoni (~pepperoni@172.58.99.238) (*.net *.split)
[02:09:44] *** Quits: c4017w__ (~c4017@209.52.68.8) (*.net *.split)
[02:09:44] *** Quits: pulse (~pulse@user/pulse) (*.net *.split)
[02:09:44] *** Quits: rg (~r-g@51-159-55-86.rev.poneytelecom.eu) (*.net *.split)
[02:09:44] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (*.net *.split)
[02:09:44] *** Quits: Donno (~donno@58.84.206.182) (*.net *.split)
[02:09:44] *** Quits: baltazar (~baltazar@178-164-184-5.pool.digikabel.hu) (*.net *.split)
[02:09:44] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (*.net *.split)
[02:09:45] *** Quits: BluesBoy (~bboy@user/bluesboy) (*.net *.split)
[02:09:45] *** Quits: talisein (~talisein@user/talisein) (*.net *.split)
[02:09:45] *** Quits: obiwahn (~heini@user/obiwahn) (*.net *.split)
[02:09:45] *** Quits: rb (~augh@alogs.space) (*.net *.split)
[02:09:45] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (*.net *.split)
[02:09:45] *** Quits: Praise (~Fat@user/praise) (*.net *.split)
[02:09:45] *** Quits: foul_owl (~kerry@23.82.193.89) (*.net *.split)
[02:09:45] *** Quits: ivan (~ivan@user/ivan) (*.net *.split)
[02:09:45] *** Quits: cursey (~cursey@user/cursey) (*.net *.split)
[02:09:45] *** Quits: flynn (~mcbloch@user/flynn) (*.net *.split)
[02:09:45] *** Quits: hackkitten (~hackkitte@94.31.104.136) (*.net *.split)
[02:09:45] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (*.net *.split)
[02:09:45] *** Quits: mgot (~mgot@vps-35cddd71.vps.ovh.net) (*.net *.split)
[02:09:45] *** Quits: scoobydoo (~scooby@user/scoobydoo) (*.net *.split)
[02:09:45] *** Quits: Guest8100 (~tinloaf@virt-no01.mrvm.net) (*.net *.split)
[02:09:45] *** Quits: syrius (~syrius@titan.stormtek.net) (*.net *.split)
[02:09:45] *** Quits: Shell (~shell@user/shell) (*.net *.split)
[02:09:45] *** Quits: manuels (~manuel@80.211.205.88) (*.net *.split)
[02:09:45] *** Quits: zinc (~zinc@163.ip-51-254-203.eu) (*.net *.split)
[02:09:45] *** manuels6 is now known as manuels
[02:09:50] *** scoobydoob is now known as scoobydoo
[02:10:02] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[02:10:04] *** pulse_ is now known as pulse
[02:10:06] *** Quits: ashafq_ (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Quit: Leaving)
[02:10:15] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[02:10:53] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[02:11:00] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[02:11:33] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[02:11:57] *** Miyu is now known as hackkitten
[02:13:53] *** Quits: c4017w_ (~c4017@209.52.68.8) (Remote host closed the connection)
[02:14:16] *** Joins: c4017w_ (~c4017@209.52.68.8)
[02:14:24] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[02:15:26] *** Joins: xkuru (~xkuru@user/xkuru)
[02:15:26] *** Joins: pepperoni (~pepperoni@172.58.99.238)
[02:15:26] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[02:15:26] *** Joins: baltazar (~baltazar@178-164-184-5.pool.digikabel.hu)
[02:15:26] *** Joins: BluesBoy (~bboy@user/bluesboy)
[02:15:26] *** Joins: talisein (~talisein@user/talisein)
[02:15:26] *** Joins: obiwahn (~heini@user/obiwahn)
[02:15:26] *** Joins: rb (~augh@alogs.space)
[02:15:26] *** Joins: Praise (~Fat@user/praise)
[02:15:26] *** Joins: foul_owl (~kerry@23.82.193.89)
[02:15:26] *** Joins: ivan (~ivan@user/ivan)
[02:15:26] *** Joins: flynn (~mcbloch@user/flynn)
[02:16:07] *** Quits: foul_owl (~kerry@23.82.193.89) (Max SendQ exceeded)
[02:16:07] *** Quits: flynn (~mcbloch@user/flynn) (Max SendQ exceeded)
[02:16:23] *** Joins: flynn (~mcbloch@user/flynn)
[02:16:45] *** Quits: Artea- (~Lufia@artea.com.pt) (Quit: ZNC 1.6.2 - http://znc.in)
[02:17:12] *** Joins: Guest8100 (~tinloaf@2a03:94e0:163c:57e:bc51:5c66:86e7:1)
[02:18:00] *** Quits: c4017w_ (~c4017@209.52.68.8) (Read error: Connection reset by peer)
[02:18:03] *** Joins: foul_owl (~kerry@23.82.193.89)
[02:18:21] *** Joins: c4017w_ (~c4017@209.52.68.8)
[02:21:03] *** Joins: Guest54 (~Guest54@2620:10d:c092:400::4:26d6)
[02:21:42] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[02:23:34] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[02:23:46] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[02:28:33] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[02:28:56] *** Quits: andreasbuhr (~quassel@p549db66c.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:32:00] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 252 seconds)
[02:38:01] *** Joins: Uswald (Uswald@looking.for-some.fun)
[02:44:19] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[02:55:28] <Guest54> hey guys, I have a sql question about 1-Many schema. I have a healthcheck which can map to many tags. I want to find all healtchecks which do not map to any of the specified tags. I have this http://sqlfiddle.com/#!9/23263a1/3 The output I want is (1, "foo), (1, "bar") and (1, "baz"). Currently, only the first two appear. The baz doesn't apprear
[02:55:28] <Guest54> because there is tag mapping to it, so it's left out
[02:55:56] <Guest54> not quite sure how to tweak to get the output I want - I'd love a pointer in the right direction
[03:00:04] *** Quits: RoKenn (~RoKenn@user/rokenn) (Ping timeout: 250 seconds)
[03:13:53] <RandomReader> I don't get it, why do you want all 3 healthcheck results?
[03:14:33] <RandomReader> the description makes it sound like only (3, baz) is the correct result
[03:15:23] <RandomReader> also where would the "1" come from in the last two results?
[03:16:16] *** Joins: Guest8534 (~Guest@host181.190-137-39.telecom.net.ar)
[03:19:02] *** Joins: c4017w__ (~c4017@209.52.68.8)
[03:19:50] <Guest54> totally messed up, really sorry :(
[03:20:12] <Guest54> I'm so f'in stupid sigh
[03:20:16] *** Parts: Guest54 (~Guest54@2620:10d:c092:400::4:26d6) ()
[03:22:03] <RandomReader> hm, that was not the response I was expecting
[03:22:36] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[03:23:18] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[03:25:17] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[03:25:59] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[03:26:15] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[03:28:54] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:608a:bc50:94ed:983e) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:29:14] <cq-work> An accidental self-confidence crushing if you will.
[03:39:53] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[03:46:30] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 256 seconds)
[03:51:49] *** Joins: Figworm (FiggyWitIt@user/figworm)
[03:55:21] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[04:02:42] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[04:08:36] *** Quits: ARoxdale (~ARoxdale@ip-84-203-29-247.broadband.digiweb.ie) (Ping timeout: 240 seconds)
[04:14:01] *** Joins: jsbach (~jsbach@81-223-39-134.static.upcbusiness.at)
[04:19:43] *** Joins: c4017w_ (~c4017@209.52.68.8)
[04:22:04] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Quit: Client closed)
[04:22:20] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[04:23:18] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[04:30:57] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[04:36:44] *** Quits: Guest8534 (~Guest@host181.190-137-39.telecom.net.ar) (Remote host closed the connection)
[04:43:08] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[04:55:36] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 272 seconds)
[04:56:28] *** Joins: artok_ (~azo@mobile-access-bcee54-113.dhcp.inet.fi)
[04:56:45] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[04:57:44] *** Quits: proller (~p@2a02:6b8:b081:b481::1:0) (Ping timeout: 252 seconds)
[04:58:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[04:59:24] *** Quits: artok (~azo@mobile-access-b04863-82.dhcp.inet.fi) (Ping timeout: 252 seconds)
[05:05:33] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Quit: Client closed)
[05:05:51] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[05:14:16] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:6666:45c9:615b:ded8:9d14) (Remote host closed the connection)
[05:14:27] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:ad4e:3a0a:e234:5531) (Quit: Quit)
[05:14:35] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[05:15:10] *** Joins: p-i- (~Ohmu@2403:6200:8978:6666:6854:4a24:c875:3886)
[05:18:44] *** Quits: sh00p (~z@89-253-71-70.customers.ownit.se) ()
[05:20:25] *** Joins: c4017w__ (~c4017@209.52.68.8)
[05:23:03] *** Joins: darkbit (~db@136.158.8.67)
[05:23:41] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 245 seconds)
[05:27:26] *** Quits: jsbach (~jsbach@81-223-39-134.static.upcbusiness.at) (Ping timeout: 245 seconds)
[05:30:15] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Remote host closed the connection)
[05:43:43] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:43:53] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:43:53] *** ChanServ sets mode: +v npaperbot
[05:49:00] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[05:54:21] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[06:03:04] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:13:27] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[06:15:30] *** Joins: Inline__ (~Inline@p200300cd472d8600a7f83f236a05ec56.dip0.t-ipconnect.de)
[06:17:57] *** Quits: Inline (~Inline@p200300cd470c47009a06da4df68ae634.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[06:21:04] *** Joins: c4017w_ (~c4017@209.52.68.8)
[06:24:38] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[06:25:14] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[06:29:57] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[06:31:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[06:42:02] *** VShell is now known as Shell
[06:49:24] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[07:07:20] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[07:09:14] *** Quits: unixpro1970 (~unixpro19@c-67-168-187-106.hsd1.wa.comcast.net) (Remote host closed the connection)
[07:10:32] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 250 seconds)
[07:13:53] *** Joins: unixpro1970 (~unixpro19@c-67-168-187-106.hsd1.wa.comcast.net)
[07:15:14] *** Quits: darkbit (~db@136.158.8.67) (Ping timeout: 252 seconds)
[07:16:13] *** Joins: adeliktas4 (~adeliktas@i59F4D539.versanet.de)
[07:18:33] *** Quits: adeliktas (~adeliktas@i59F52E53.versanet.de) (Ping timeout: 252 seconds)
[07:18:33] *** adeliktas4 is now known as adeliktas
[07:18:58] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[07:21:49] *** Joins: c4017w__ (~c4017@209.52.68.8)
[07:25:24] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[07:25:42] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[07:32:32] *** Quits: unyu (~pyon@user/pyon) (Quit: brb)
[07:34:26] *** nwulfe is now known as night_wulfe
[07:40:25] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:6666:3919:344e:a842:29ca)
[07:43:24] *** Quits: p-i- (~Ohmu@2403:6200:8978:6666:6854:4a24:c875:3886) (Ping timeout: 240 seconds)
[07:44:27] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:44:39] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[07:44:52] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:45:00] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[07:45:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[07:48:40] *** Joins: JeffH (~JeffH@71-218-38-65.hlrn.qwest.net)
[07:51:09] *** Quits: JeffH (~JeffH@71-218-38-65.hlrn.qwest.net) (Remote host closed the connection)
[07:51:30] *** Joins: JeffH (~JeffH@71-218-38-65.hlrn.qwest.net)
[07:59:45] *** Quits: JeffH (~JeffH@71-218-38-65.hlrn.qwest.net) (Remote host closed the connection)
[08:00:09] *** Joins: JeffH (~JeffH@71-218-38-65.hlrn.qwest.net)
[08:02:29] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:6666:3919:344e:a842:29ca) (Remote host closed the connection)
[08:03:03] *** Joins: p-i- (~Ohmu@2403:6200:8978:6666:78a7:12ab:c91c:e77)
[08:07:23] *** Quits: JeffH (~JeffH@71-218-38-65.hlrn.qwest.net) (Remote host closed the connection)
[08:07:31] *** Joins: JeffH (~JeffH@71-218-38-65.hlrn.qwest.net)
[08:09:47] *** Quits: JeffH (~JeffH@71-218-38-65.hlrn.qwest.net) (Remote host closed the connection)
[08:15:44] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca) (Quit: ZNC 1.8.2 - https://znc.in)
[08:16:11] *** Quits: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl) (Read error: Connection reset by peer)
[08:18:18] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Read error: Connection reset by peer)
[08:18:52] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca)
[08:22:32] *** Joins: c4017w_ (~c4017@209.52.68.8)
[08:25:08] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[08:25:48] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[08:26:12] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[08:26:39] *** Joins: ymwm (~yingmanwu@110.85.121.119)
[08:30:39] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[08:35:22] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[08:40:57] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[08:44:06] *** Quits: Hobbyboy (Hobbyboy@hobbyboy.co.uk) (Quit: The BNC has broken!)
[08:49:05] *** Quits: adeliktas (~adeliktas@i59F4D539.versanet.de) (Quit: Ping timeout (120 seconds))
[08:49:16] *** Joins: adeliktas (~adeliktas@i59F4D539.versanet.de)
[08:49:46] *** Quits: Bodger1234_ (sid503511@id-503511.uxbridge.irccloud.com) (Ping timeout: 250 seconds)
[08:50:03] *** Quits: Uswald (Uswald@looking.for-some.fun) (Quit: fBNC - https://bnc4free.com)
[08:50:07] *** Quits: greyblue9 (sid500829@id-500829.ilkley.irccloud.com) (Write error: Connection reset by peer)
[08:50:08] *** Quits: buhman (sid411355@user/buhman) (Read error: Connection reset by peer)
[08:50:24] *** Joins: Uswald (Uswald@looking.for-some.fun)
[08:50:27] *** Joins: buhman (sid411355@user/buhman)
[08:50:30] *** Joins: Bodger1234_ (sid503511@id-503511.uxbridge.irccloud.com)
[08:50:30] *** Joins: greyblue9 (sid500829@id-500829.ilkley.irccloud.com)
[08:51:10] *** Quits: c4017w_ (~c4017@209.52.68.8) (Remote host closed the connection)
[08:51:31] *** Joins: c4017w_ (~c4017@209.52.68.8)
[08:51:56] *** Quits: m42e (~m42e@pb42.de) (Ping timeout: 250 seconds)
[08:52:53] *** Joins: m42e (~m42e@pb42.de)
[09:10:47] *** Joins: ravan (~ravan@user/ravan)
[09:15:37] *** Joins: unyu (~pyon@user/pyon)
[09:18:29] *** Joins: Hobbyboy (Hobbyboy@hobbyboy.co.uk)
[09:28:50] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[09:41:53] *** Quits: dasrael (~rabbit@user/dasrael) (Quit: And away we go!)
[09:43:42] *** Joins: dasrael (~rabbit@user/dasrael)
[09:43:44] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:43:52] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:43:52] *** ChanServ sets mode: +v npaperbot
[09:45:27] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[09:50:40] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[09:52:16] *** Joins: c4017w__ (~c4017@209.52.68.8)
[09:56:26] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[10:02:04] *** Quits: zmt00 (~zmt00@user/zmt00) (Read error: Connection reset by peer)
[10:05:20] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[10:06:56] *** Joins: zmt00 (~zmt00@user/zmt00)
[10:26:57] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[10:27:00] *** Quits: shailangsa (~shailangs@host86-186-133-59.range86-186.btcentralplus.com) (Ping timeout: 240 seconds)
[10:29:15] *** Joins: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl)
[10:31:55] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[10:33:34] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[10:42:44] *** Joins: paul424 (~tom@ip-5-172-235-198.multi.internet.cyfrowypolsat.pl)
[10:43:28] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:6666:3919:344e:a842:29ca)
[10:46:12] *** Quits: p-i- (~Ohmu@2403:6200:8978:6666:78a7:12ab:c91c:e77) (Ping timeout: 240 seconds)
[10:52:24] *** Quits: emerent (~quassel@p200300cd5743c364ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[10:52:30] *** Joins: emerent_ (~quassel@p200300cd5743c3f6ba27ebfffed28a59.dip0.t-ipconnect.de)
[10:52:30] *** emerent_ is now known as emerent
[10:52:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[10:56:16] *** Joins: shailangsa (~shailangs@host165-120-169-51.range165-120.btcentralplus.com)
[10:56:36] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[11:01:46] <xkoncek> should by build scripts depend on pkg-config? in cases when the dependency is not packaged (like some mingw versions of it) it makes the scripts more difficult
[11:14:25] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[11:15:38] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[11:18:12] *** Quits: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::43) (Ping timeout: 240 seconds)
[11:25:58] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[11:29:18] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[11:29:35] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[11:38:46] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:d9af:8eb3:1109:8cbb)
[11:46:09] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Ping timeout: 256 seconds)
[11:46:17] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[11:46:17] *** ChanServ sets mode: +v npaperbot
[11:46:33] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[11:51:01] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[11:53:14] *** Joins: c4017w__ (~c4017@209.52.68.8)
[11:57:24] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[12:03:03] *** Joins: manjaro-user (~manjaro-u@199-7-159-1.eng.wind.ca)
[12:17:22] *** Quits: nq (~nq@82.78.21.171) (Quit: Leaving)
[12:18:45] *** Joins: robod34 (~Username@79.113.243.73)
[12:24:19] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 268 seconds)
[12:25:42] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[12:28:00] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[12:32:37] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[12:39:02] <manjaro-user> Okay does it make sense to first, have a member pointer, second, to delete it, and third, to set its value to nullptr?
[12:44:12] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 250 seconds)
[12:44:25] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[12:49:11] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[12:50:23] <johnny> manjaro-user, why wouldn't it make sense to ahve a member pointer?
[12:53:38] *** Joins: c4017w_ (~c4017@209.52.68.8)
[12:54:19] <manjaro-user> johnny: Well that part seems fine. I am just a bit fuzzy on what happens when you delete a pointer.
[12:55:23] <manjaro-user> like, `int *n(nullptr); n = new int(500); delete n; n = nullptr;`
[12:55:46] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[12:56:15] <johnny> personally i rarely use new , so i dont really think about that
[12:56:27] <johnny> smart pointers (almost) all the way
[12:56:28] <manjaro-user> that makes two of us.
[12:56:42] <johnny> is this a school thing then?
[12:57:19] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[12:57:26] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[12:57:47] <manjaro-user> No. Building a class called, "QWebChannelObject", which is for interfacing with javascript.
[12:58:05] <johnny> so why are you using raw ointers with it instead of smart pointers?
[12:58:29] <johnny> i never played with qt's web thingy. i guess it could be useful
[12:58:52] <manjaro-user> johnny: because I can't use templates with QObject, and so I had to build a class that just has one of every usable type in javascript;
[12:59:09] <johnny> ah.. indeed, but have you considered QPointer
[12:59:19] <manjaro-user> I don't need it in this case.
[12:59:33] <johnny> sorry, i'm not that familiar with qt.. i only removed it from a project.. i've never actually written much of it
[12:59:52] <manjaro-user> I'm not doing anything shared or anything like that. The only reason I am using raw pointers is because I need a nullptr value.
[13:00:22] <DarkDonno> QPointer isn't shared, for shared that would be QSharedPointer.
[13:00:23] <manjaro-user> lol, well this has nothing to do with qt. You were just asking for the context.
[13:00:27] <manjaro-user> ^
[13:00:42] <johnny> i meant in regards to not just using QPointer .. like in general
[13:00:42] <manjaro-user> yes thats right. Anyway its neither her nor there
[13:01:09] <johnny> ok, so deleting apointer is fine? what concern do you have with it?
[13:01:18] <manjaro-user> I don't think I need it in this case. The values are temporary.
[13:01:33] <johnny> is it about pointers generally? or the things your'e acutally doing with the thing its pointing to?
[13:01:49] <manjaro-user> yeah its about pointer generally.
[13:02:02] <manjaro-user> Kind of embarrassing that I am asking considering how long Ive been programming.
[13:02:08] <johnny> well deleting the pointer.. deletes it. it's no problem
[13:02:23] <johnny> that's why i don't understand why're asking about it?
[13:02:40] <DarkDonno> If you allocate memory with new, then you can free that memory with delete. Likewise if you allocate it with malloc you free it with free().
[13:03:05] <manjaro-user> When you free it, does the value of the pointer, become "nullptr"?
[13:03:50] *** Joins: gzd (~gzd@83-215-123-219.lhau.dyn.salzburg-online.at)
[13:03:57] <manjaro-user> ie,  `int *n(nullptr); n = new int(500); delete n; n = nullptr; n = new int(600);` is the statement, "n = nullptr" redundant?
[13:04:02] <DarkDonno> No, the pointer does not automatically change to nullptr. The delete operator takes a pointer to something, it doesn't take a pointer to a pointer so its unable to change it.
[13:04:36] <manjaro-user> ahhhhh
[13:04:40] <manjaro-user> ah okay
[13:04:42] <johnny> manjaro-user, it's pretty easy to prove though. just delete and then show it. it won't be nulltr
[13:05:09] <DarkDonno> However, with your original question, what you need to be more concerned about is this: { int x = 5; int* x_ptr = &x; delete x_ptr; }
[13:05:21] <manjaro-user> johnny: Thats true, but I ask because I am not sure if that is a compiler dependent behaviour.
[13:05:38] *** Joins: ivii (~ivan@user/ivii)
[13:05:53] <manjaro-user> DarkDonno: Thats not an issue with this class. The pointers arent being shared.
[13:05:58] <johnny> did you read this manjaro-user ? https://en.cppreference.com/w/cpp/language/delete
[13:06:08] <johnny> that wouldn't be compiler dependent
[13:06:51] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:06:58] <johnny> no DR since C++98..
[13:07:18] <manjaro-user> Yeah I guess rtfm is applicable here :/ I always prefer asking because of how dry documentation can be. Sorry lol
[13:07:40] <johnny> i do wonder why C and C++ standards are still 2 digit..
[13:08:18] <manjaro-user> And deleting also just frees the memory. It doesnt actually 0 it, right?
[13:11:32] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[13:14:03] <manjaro-user> Maybe I am just a brainlet, but when it comes to cpp documentation...
[13:14:05] <manjaro-user> "For the first (non-array) form, expression must be a pointer to an object type or a class type contextually implicitly convertible to such pointer, and its value must be either null or pointer to a non-array object created by a new-expression, or a pointer to a base subobject of a non-array object created by a new-expression. "
[13:14:35] <manjaro-user> I can make sense of it, but not without making my head spin, and kind of losing the point of what its trying to say.
[13:18:50] <DarkDonno> The created by a new-expression is the part that I was trying to bring to your attention earlier but you dismissed it with the comment that "The pointers arent being shared."
[13:19:47] <DarkDonno> The part about null, is essentially saying that the following is fine: {int* number = nullptr; delete number; }
[13:22:49] *** Quits: ivii (~ivan@user/ivii) (Ping timeout: 256 seconds)
[13:22:51] *** Quits: shailangsa (~shailangs@host165-120-169-51.range165-120.btcentralplus.com) (Remote host closed the connection)
[13:25:36] *** Joins: ivii (~ivan@user/ivii)
[13:26:27] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 256 seconds)
[13:38:44] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[13:40:09] <DarkDonno> So if you have a member pointer, it doesn't make sense to delete it. The key question you need to ask yourself is what allocated the object that the pointer is pointing to? was it a new-expression? I suspect you dealing with: &YourClass::your_member which does not involve new-expression.
[13:43:44] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:43:52] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:43:52] *** ChanServ sets mode: +v npaperbot
[13:50:42] *** Quits: DarkDonno (~donno@58.84.206.182) (Ping timeout: 252 seconds)
[13:51:25] *** Joins: shailangsa (~shailangs@host165-120-169-51.range165-120.btcentralplus.com)
[13:53:56] *** Joins: c4017w__ (~c4017@209.52.68.8)
[13:57:44] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[13:58:37] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[14:13:08] <RandomReader> johnny - they're not, formally, that's just colloquial naming .. e.g. the full standard name is ISO/IEC 14882:2020 for C++20, and the previous revision (ISO/IEC 14882:2017) has been withdrawn and is no longer available
[14:13:43] <johnny> formally doesn't count if you still pass 20 to the tooling
[14:14:23] <RandomReader> that's entirely about the tooling, there's no formal reason they need such a switch at all
[14:14:47] <RandomReader> no greenfield reason either, for that matter -- write a new compiler for the standard today, no switches needed
[14:15:05] <RandomReader> it's just pure legacy compatibility, because it turns out people want to choose revisions
[14:15:11] <johnny> i want to choose revisions!
[14:15:53] <johnny> but i've yet to see c++2020 mentioned as the argument to use
[14:16:19] <johnny> or even papered over by cmake
[14:16:46] <johnny> one should be able to use c++2003, c++2011, etc..
[14:16:57] <RandomReader> seems to just be a convention established way back when
[14:17:06] <johnny> as if y2k never happened
[14:17:34] <johnny> seems like he folks establishing c++03 should have thought about it
[14:17:36] <RandomReader> it's fairly common, at least in my area of the world, to use sub-century digits only
[14:17:52] <RandomReader> in general I mean, not specifically in computers or programming
[14:17:52] <johnny> sure, colloquially
[14:18:53] <johnny> folks be tryin to compile code in 2103 with c++03
[14:19:25] <RandomReader> that would be surprising, just because I don't believe any of the compiler maintainers have that kind of attention span :D
[14:19:48] <manjaro-user> DarkDonno: Looks like you nipped out; sorry didnt see your reply, but it was created by a new epression.
[14:19:50] <johnny> what's another 80 years.. i mean C++ has been around 30 years already or whatever
[14:20:28] <RandomReader> C++ existing wouldn't surprise me, but any support whatsoever for C++03 would
[14:20:42] <RandomReader> especially given current trends, where it's "containers forever!!!111"
[14:21:00] <johnny> well we got folks here still using c++98
[14:21:57] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[14:22:16] <RandomReader> yeah, but that's only 24 years ago
[14:22:32] <johnny> 300 years later.. did they mean 2003, 2103, 2203???
[14:22:40] <RandomReader> I don't think any of the current compilers support the pre-standard revisions anymore
[14:22:56] <PJBoy> C++ versions are good for 300 years
[14:23:05] <PJBoy> there's not gonna be a 2103
[14:23:13] <PJBoy> it'll be 2102 and 2105
[14:23:19] <johnny> hah
[14:23:32] <RandomReader> manjaro-user - how did you get a *member* pointer from a new-expression?
[14:23:39] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[14:25:37] <PJBoy> probably meaning a pointer that's a member rather than a pointer-to-member
[14:25:46] <RandomReader> to be more precise, that kind of phrasing makes people think you're talking about an object of type  pointer-to-data-member or pointer-to-member-function
[14:27:58] <RandomReader> if you just mean a plain pointer-to-object that happens to be stored as a member of some other type, that would make more sense
[14:30:23] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[14:30:56] <johnny> that's how i read it
[14:31:12] <johnny> RandomReader sees trees
[14:31:21] <johnny> too expert
[14:33:10] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[14:33:12] <manjaro-user> RandomReader: uhh maybe my verbiage is off. I just mean that my class has a member, which is a pointer. You can set its value using a setter function:
[14:33:39] <manjaro-user> `void QWebChannelObject::setByteArray( QByteArray byteArray ) {if ( m_byteArray != nullptr ) { delete m_byteArray; m_byteArray = nullptr; } m_byteArray = new QByteArray(byteArray); emit byteArrayChanged (); }`
[14:33:52] *** gentooclimax is now known as climax
[14:34:02] *** climax is now known as gentooclimax
[14:34:55] *** Joins: rg (~r-g@gateway/tor-sasl/r-g)
[14:35:32] <manjaro-user> What happens if you derefence a nullptr in a release environment? Is that undefined or will it segfault like it does in the debug builds?
[14:35:56] *** Joins: blackout69 (~blackout6@37.183.230.121)
[14:36:06] <RandomReader> it's always undefined
[14:36:35] <RandomReader> as for the setter, that pattern looks correct
[14:36:49] <manjaro-user> RandomReader: Good to know. Thanks.
[14:37:38] <RandomReader> in particular, you generally do want to set nullptr after deleting like that, if there's a chance that you will reuse the pointer variable like you do there
[14:38:09] <manjaro-user> That is good to know.
[14:38:13] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[14:38:28] <RandomReader> new could throw an exception, and if something catches it, the QWebChannelObject may need to be destroyed .. which will call its destructor, which presumably tries to delete m_byteArray
[14:38:43] <RandomReader> that's fine if it's nullptr, would be bad if it were still the old value you already deleted
[14:39:20] <RandomReader> so the "set to nullptr immediately" pattern helps guard against mistakes like that, for the scenarios you may not remember
[14:40:20] <RandomReader> all that said, I do question why you're dynamically allocating a QByteArray, since it looks like it's a vector-like container and normally you wouldn't new such a thing
[14:41:52] <RandomReader> the docs imply it does copy-on-write sharing behind the scenes, which would make straight copies fairly efficient, for most uses anyway
[14:42:13] <RandomReader> I'm only basing this on a skim of the docs though, I don't work with Qt
[14:42:48] <johnny> that was my understanding of it
[14:43:35] <johnny> i'm having fun with jlink and gdb on embedded whoo
[14:46:43] <RandomReader> that was hardware I never got to play with
[14:49:09] <johnny> well i don't have real jlink.. only the one you get with the nordic dev kit
[14:49:14] <johnny> the real jlink is much more expensive
[14:49:20] <manjaro-user> RandomReader: I don't need to do it this way frankly, but it seemed more proper. Basically I need a "generic" class, but I can't use templates, as this requires a qobject macro which wont support it.
[14:50:29] <manjaro-user> And so instead of a template, I just made a class that has every single type in it. In order to save memory though, I made its members pointers, and they are only allocated when called upon If that makes sense.
[14:54:28] *** Joins: c4017w_ (~c4017@209.52.68.8)
[14:58:32] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[14:58:41] *** Parts: blackout69 (~blackout6@37.183.230.121) ()
[15:02:47] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[15:03:41] *** Joins: ARoxdale (~ARoxdale@ip-84-203-29-247.broadband.digiweb.ie)
[15:16:38] <PJBoy> !give manjaro-user variant
[15:16:39] <nolyc> manjaro-user: https://en.cppreference.com/w/cpp/utility/variant
[15:17:59] <Raziel> so you're saying, if you use Qt you have to pretend a big part of cpp doesn't exist? that sounds rather sucky
[15:23:41] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 245 seconds)
[15:25:21] *** gentooclimax is now known as climax
[15:26:04] *** Quits: paul424 (~tom@ip-5-172-235-198.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[15:27:10] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[15:30:17] *** Joins: proller (~p@80.240.216.69)
[15:38:17] *** Joins: evangeline (~Eleanor@178.79.105.181)
[15:38:41] *** Joins: AmR (~AmREiSa@156.199.236.198)
[15:40:30] <mort> https://p.mort.coffee/3TI.png huh
[15:40:41] <mort> why would clangd think Bounds is private there
[15:41:17] *** Quits: manjaro-user (~manjaro-u@199-7-159-1.eng.wind.ca) (Ping timeout: 240 seconds)
[15:43:01] *** climax is now known as gentooclimax
[15:44:47] <PJBoy> huh indeed
[15:44:49] *** Joins: plastico (~plastico@neomutt/plastico)
[15:45:24] <mort> it does work, when compiling with clang
[15:45:28] <mort> no compiler errors or even warnings
[15:45:55] <PJBoy> that cast on line 32 looks redundant >_>
[15:46:18] <mort> it does indeed
[15:46:36] <mort> and the .get()
[15:46:39] <PJBoy> use of get() -- yeah
[15:46:55] <mort> well
[15:47:00] <mort> without the cast it's an implicit upcast
[15:47:07] <mort> no
[15:47:09] <mort> implicit downcast
[15:47:55] <mort> afaik you can't implicitly downcast, right? So I think it's necessary
[15:48:08] <PJBoy> I don't see any down or up
[15:48:15] <PJBoy> I just see cast from T* to T*
[15:48:25] <mort> children is a vector<unique_ptr<SGNode>>
[15:48:31] <mort> T is some class which inherits from SGNode
[15:48:58] <mort> there's an implicit upcast in the push_back
[15:49:04] <PJBoy> oh ok
[15:50:23] <PJBoy> I see
[15:50:54] <PJBoy> I'd probably still write `return (T&)*children.back();` I guess
[15:51:01] <mort> yeah, that's fair
[15:51:10] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[15:53:35] <mort> OH
[15:53:45] <mort> SGContainer inherits privately from SGNode
[15:54:04] <PJBoy> I'd also be tempted by `auto* child = new T(args...); children.push_back(unique_ptr<SGNode>(child)); return *child;`
[15:54:21] <mort> still no clue why clangd errored and clang didn't but clangd is happy when SGContainer publicly inherits
[15:54:33] <PJBoy> or `children.emplace_back(child);` instead of that push_back
[15:54:47] *** Joins: c4017w__ (~c4017@209.52.68.8)
[15:54:49] <AmR> Did Linux have function like this https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-getfirmwareenvironmentvariablea ?
[15:54:50] <PJBoy> oh man, I always forget about private inheritance
[15:55:54] <mort> I feel like everything that's private by default should be public by default
[15:56:00] <PJBoy> firmware environment variables are a thing?
[15:56:28] <mort> all my classes start with `public:` because the public interface should be in focus as the first thing you see when you read the class
[15:56:36] <PJBoy> I think class is just a bad keyword
[15:56:41] *** Quits: gzd (~gzd@83-215-123-219.lhau.dyn.salzburg-online.at) (Quit: Leaving)
[15:56:54] <mort> all my inheritance is `public` because the main thing I use inheritance for is adhering to some interface
[15:56:59] *** Joins: gzd (~gzd@83-215-123-219.lhau.dyn.salzburg-online.at)
[15:57:04] *** Joins: gzd_ (~gzd@83-215-123-219.lhau.dyn.salzburg-online.at)
[15:57:17] <PJBoy> yeah private inheritance doesn't come up much
[15:57:31] <mort> only if you use inheritance as a mechanism for code sharing
[15:57:37] <mort> and, like, we have other mechanisms for code sharing
[15:58:03] *** Quits: gzd (~gzd@83-215-123-219.lhau.dyn.salzburg-online.at) (Remote host closed the connection)
[15:58:03] *** Quits: gzd_ (~gzd@83-215-123-219.lhau.dyn.salzburg-online.at) (Remote host closed the connection)
[15:58:18] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[15:58:33] <mort> I do kind of like differentiating between class and struct, where classes are mainly about stateful behavior while structs are mainly just values
[15:58:55] <PJBoy> that's where it would be cool if `aggregate` was a keyword
[15:59:10] <mort> I think it would be really interesting to make class and struct have the same visibility defaults, but make classes move-only by default
[15:59:31] <PJBoy> now that sounds bizarre to me
[15:59:40] <mort> I think every single type I've wanted to implicitly copy in my code has been a struct
[15:59:48] <mort> I don't think I've ever made a class which I ever want to copy
[15:59:49] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[16:00:01] <mort> except for maybe datastructures, where copy should be explicit and not implicit
[16:00:18] <mort> types I want to copy around are like 2D vectors and maybe 3D matrices
[16:00:54] <mort> I don't know that it would be good, but it would be interesting to have a language based on that idea
[16:01:09] <PJBoy> I make my types copyable where non-ridiculous
[16:01:18] <mort> I think maybe C# has something like that? Like classes are reference types (like objects in java/python/JS/whatever) and structs are value types (like structs and classes in C++)
[16:01:33] <PJBoy> one thing you lose out on with no copies is using initializer_list
[16:01:46] <PJBoy> yeah C# does something crazy like that
[16:01:57] <mort> initializer_list should've been designed with an emphasis on moving values out of the list rather than copying values out
[16:01:57] <PJBoy> and value types inherit from Object, which is a reference type
[16:02:01] <mort> imo
[16:02:05] <PJBoy> so everything's secretly a reference type
[16:02:14] <mort> wait wat
[16:03:19] <mort> I don't know enough C# to know if it's good or not, it's probably really weird and its origins as a Microsoft Java must guarantee it to be less than ideal at least, but the idea of clear
[16:03:29] <mort> *clear distinction between value types and class types makes sense to me
[16:03:47] <PJBoy> https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/structs#1541-general
[16:03:51] <PJBoy> All struct types implicitly inherit from the class System.ValueType
[16:04:01] <PJBoy> being a class, ValueType is a reference type
[16:04:08] <PJBoy> so all structs are reference types
[16:04:13] <PJBoy> as well as being value types
[16:04:21] <mort> weird
[16:04:29] <PJBoy> yeah I don't get it
[16:04:43] <mort> maybe that was the best way they could bolt the concept of a value type onto the CLR object model which probably doesn't have a concept of value types
[16:04:51] <PJBoy> and System.ValueType inherits from the class object ofc
[16:05:19] <PJBoy> so I'm really not sure what values and reference semantics are in C#
[16:05:35] <PJBoy> you also have the ref keyword for variables
[16:05:46] <PJBoy> C# is complex
[16:06:32] <mort> swift also seems to differentiate between value types and ref types, with struct used to specify a value type and class used to specify a reference type
[16:06:53] <mort> swift is probably more reasonably designed than C#
[16:07:08] <PJBoy> it's still confusing
[16:07:14] *** Quits: shailangsa (~shailangs@host165-120-169-51.range165-120.btcentralplus.com) ()
[16:07:15] <PJBoy> values and references make perfect sense in C++
[16:07:33] <PJBoy> and in other languages, I dunno
[16:07:41] <PJBoy> they seem to be conflated
[16:11:08] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[16:13:16] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 245 seconds)
[16:13:25] *** Joins: Roughy (~mdaw45ns@user/roughy)
[16:35:20] *** Joins: ymwm_ (~yingmanwu@27.153.166.227)
[16:35:39] *** Joins: shailangsa (~shailangs@host165-120-169-51.range165-120.btcentralplus.com)
[16:37:32] *** Quits: ymwm (~yingmanwu@110.85.121.119) (Ping timeout: 240 seconds)
[16:39:37] <xkoncek> is there a specific name for the address, port pair on the transport layer?
[16:39:46] <xkoncek> {address, port} pair
[16:39:47] <geordi> error: two or more data types in declaration of 'main'
[16:40:46] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[16:41:25] <xkoncek> endpoint?
[16:54:17] *** Quits: lru (~lru@240.ip-51-79-50.net) (Quit: .)
[16:55:11] *** Joins: c4017w_ (~c4017@209.52.68.8)
[16:57:30] *** Joins: pulse (~pulse@user/pulse)
[16:58:52] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[17:05:43] <LordKalma> https://en.cppreference.com/w/Special:Contributions/61.2.194.101
[17:05:49] <LordKalma> wtf happened on cppreference yesterday?
[17:12:56] *** Joins: callq (~callq@2409:4062:2d00:5aa3:6c50:3c9f:aacc:f7d9)
[17:15:29] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[17:18:26] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Quit: Client closed)
[17:18:43] *** Joins: foobaz21215 (~foobaz212@213.205.198.102)
[17:18:53] *** Quits: foobaz21215 (~foobaz212@213.205.198.102) (Write error: Broken pipe)
[17:19:24] *** Joins: foobaz21215 (~foobaz212@213.205.198.102)
[17:19:49] *** Quits: foobaz21215 (~foobaz212@213.205.198.102) (Client Quit)
[17:31:42] *** Joins: undephin3d (~undephin3@158.181.75.102)
[17:32:10] *** Joins: lru (~lru@240.ip-51-79-50.net)
[17:32:23] <Raziel> "QAs who just boss around the puny little devs"
[17:32:49] <Raziel> most unrealistic complaint 2022
[17:37:45] <xkoncek> whatever happens to Networking TS, can we at least get sockets and addresses into standard C++?
[17:38:30] <Raziel> hopefully? v:
[17:38:41] *** Quits: dld (~davidlowr@2601:197:600:1210:4c4:32b6:46a8:f2ee) (Ping timeout: 245 seconds)
[17:39:03] <Alipha> So, if class defaults to private and struct defaults to public, we need a new keyword for creating types where the members and bases default to protected :-)
[17:41:05] <xkoncek> caste
[17:43:45] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:43:52] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:43:52] *** ChanServ sets mode: +v npaperbot
[17:45:13] *** Joins: saohh (~saohh@ip-78-45-142-108.net.upcbroadband.cz)
[17:46:33] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[17:47:14] *** Quits: saohh (~saohh@ip-78-45-142-108.net.upcbroadband.cz) (Client Quit)
[17:48:25] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:4deb:db1a:1e48:ef58)
[17:48:25] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:4deb:db1a:1e48:ef58) (Changing host)
[17:48:25] *** Joins: skapata (~Skapata@user/skapata)
[17:49:32] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 272 seconds)
[17:51:30] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:e196:6345:d265:9a7)
[17:51:57] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[17:55:52] *** Joins: c4017w__ (~c4017@209.52.68.8)
[17:56:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[17:59:14] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[18:13:17] *** Joins: jokoon (~eio@2a01:e0a:542:e160:7c08:5456:3d12:f423)
[18:13:50] <PJBoy> LordKalma, some insanely boring vandal
[18:15:09] <PJBoy> god damn must they be a boring bastard
[18:21:22] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 268 seconds)
[18:21:26] *** Joins: darkbit (~db@136.158.8.67)
[18:23:17] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[18:26:53] <mort> LordKalma: starting at the bottom and reading up is quite interesting
[18:26:58] *** Quits: undephin3d (~undephin3@158.181.75.102) (Ping timeout: 250 seconds)
[18:28:13] <mort> it's reading out like someone's personal journey of discovering that they can edit pages, at first apparently by accident, then realizing what power they have, questioning why they have that power, then they slowly start just abusing it
[18:28:49] *** Quits: toulene (~toulene@user/toulene) (Ping timeout: 272 seconds)
[18:28:49] <Raziel> they must've been high af
[18:30:26] <mort> it's a pretty weird concept though, that anyone can edit a page and the change goes live without moderator approval, it's like an old version of the web built on trust and respect rather than mechanically enforced authority
[18:30:32] *** Joins: toulene (~toulene@user/toulene)
[18:35:11] *** Joins: blackout69 (~blackout6@37.183.230.121)
[18:36:02] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:36:08] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 252 seconds)
[18:37:14] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[18:37:43] *** Quits: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl) (Remote host closed the connection)
[18:38:17] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[18:38:57] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[18:40:38] *** Joins: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl)
[18:43:00] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[18:44:46] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[18:46:04] <LordKalma> mort, yeah, I read in that direction
[18:46:56] *** Quits: BluesBoy (~bboy@user/bluesboy) (Ping timeout: 256 seconds)
[18:56:10] *** Joins: c4017w_ (~c4017@209.52.68.8)
[18:59:28] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[19:05:45] <PJBoy> wikis are as old as the internet itself and they've always been that way
[19:05:54] <PJBoy> this guy's just tremendously boring
[19:06:13] <PJBoy> record breaking levels of boring
[19:07:59] <PJBoy> his personality is probably summarised as "twitch stream commenter"
[19:09:49] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[19:11:48] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:12:53] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[19:13:55] *** Joins: zmt01 (~zmt00@user/zmt00)
[19:16:17] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[19:18:35] *** Joins: gzd (~gzd@83-215-123-219.lhau.dyn.salzburg-online.at)
[19:23:17] *** Quits: ymwm_ (~yingmanwu@27.153.166.227) (Ping timeout: 272 seconds)
[19:24:43] <ashafq> LordKalma: https://gist.github.com/ashafq/c12f4a9f88a772cbb9c7870918578535 is this a dumb design?
[19:25:30] <ashafq> Every time I write a sleep in multi-threaded program, I think I am doing something wrong.
[19:26:32] <ashafq> Maybe I should use std::chrono::duration with the proper template parameters too for time.
[19:27:12] *** Quits: pa (~pah@user/pah) (Ping timeout: 250 seconds)
[19:28:36] *** Joins: filename (~kilitary@188.242.105.134)
[19:28:51] *** Joins: pah (~pah@user/pah)
[19:31:04] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:6666:3919:344e:a842:29ca) (Remote host closed the connection)
[19:32:58] *** Joins: ymwm_ (~yingmanwu@27.153.166.227)
[19:34:08] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 250 seconds)
[19:34:39] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:e196:6345:d265:9a7) (Quit: Quit)
[19:37:46] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[19:40:22] *** Joins: paul424 (~tom@ip-5-172-236-117.multi.internet.cyfrowypolsat.pl)
[19:44:59] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:46:40] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[19:46:58] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[19:47:03] *** Joins: proller (~p@2a02:6b8:b081:b65a::1:2b)
[19:47:07] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[19:48:40] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[19:51:47] *** Quits: darkbit (~db@136.158.8.67) (Ping timeout: 272 seconds)
[19:56:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[19:56:51] *** Joins: c4017w__ (~c4017@209.52.68.8)
[19:59:45] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[20:00:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[20:01:31] *** immibis_ is now known as immibis
[20:02:32] <cbreak> ashafq: that sleep is quite a dumb design
[20:03:30] <cbreak> use proper mutexes with conditional variables.
[20:03:41] *** Joins: ferdna (~ferdna@user/ferdna)
[20:04:03] <ashafq> regular enqueue and dequeue is atomic and meant for lock-free context
[20:04:36] <cbreak> so?
[20:04:50] <cbreak> this one clearly wants blocking / waiting
[20:05:20] <ashafq> yes, but I don't want to lock the other thread for reading.
[20:05:26] <cbreak> why not?
[20:05:51] <cbreak> you don't seem to care about efficiency
[20:05:58] <ashafq> Because that's the audio thread and if that waits there will be pops in the audio
[20:06:26] <ashafq> But with the file IO thread, that can wait... but how do I do this efficiently is what I am learning about.
[20:07:02] <cbreak> you don't have to wait
[20:07:05] <cbreak> you have to lock
[20:07:26] <ashafq> won't the audio thread be locked too then?
[20:07:32] <cbreak> yes, and?
[20:07:40] <cbreak> what do you think atomic operations do?
[20:07:47] <ashafq> they lock too
[20:07:50] <cbreak> you can't run them in two threads at the same time either
[20:07:56] <cbreak> they're atomic.
[20:08:30] <cbreak> lock free and wait free are separate things
[20:08:40] *** Quits: callq (~callq@2409:4062:2d00:5aa3:6c50:3c9f:aacc:f7d9) (Quit: callq)
[20:08:45] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[20:08:55] <cbreak> you clearly want to wait. So use a mutex and a cv for this.
[20:09:08] <cbreak> it'll likely be more efficient than the sleepy mess you have now
[20:09:33] <ashafq> cv?
[20:09:39] <cbreak> conditional variable
[20:09:45] <ashafq> I see
[20:09:46] <cbreak> and on the other side, you can use try_lock
[20:09:51] <cbreak> that will be wait free
[20:10:29] <ashafq> I see... thanks a lot
[20:10:38] <cbreak> but really, unless you work with low level audio, there's no need for this
[20:10:50] <cbreak> you can just push in buffers of audio in some callback thread
[20:11:01] <cbreak> low level or real time audio is harder
[20:11:28] <cbreak> but for actual low latency, you wouldn't use a data structure like this I think
[20:12:01] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[20:12:12] <ashafq> I used ping-pong buffers in embedded space, but having a non real-time OS is a lot more confusing IMO
[20:12:37] <ashafq> Fortunately CPUs are fast nowadays
[20:12:57] <cbreak> if I'd have to do something with actual low latency requirements, I'd probably have very few very small buffers, or a small ring buffer without any blocking
[20:15:17] <ashafq> Also, low level audio programming doesn't have to deal with files and system calls either 😊
[20:15:18] <cbreak> when you use mutexes correctly, try to keep the "area" of what they protect small, to keep the duration they are locked small
[20:15:26] <cbreak> ashafq: oh, they often do
[20:15:43] <cbreak> at least if you have a system for system calls...
[20:16:29] <ashafq> yea, things gets harder with system calls
[20:16:58] <cbreak> there are syscalls hidden inside mutex, conditional variables, thread sleeping, thread yielding
[20:17:20] <cbreak> basically most thread interactions I think
[20:17:30] *** Joins: angelacrust (~angelacru@182.64.84.36)
[20:21:59] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[20:22:16] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[20:24:30] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 252 seconds)
[20:30:38] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:e196:6345:d265:9a7)
[20:30:44] *** Quits: angelacrust (~angelacru@182.64.84.36) (Quit: Client closed)
[20:30:46] *** filename is now known as leizes
[20:33:48] *** Quits: ymwm_ (~yingmanwu@27.153.166.227) (Ping timeout: 240 seconds)
[20:34:38] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[20:34:55] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[20:38:16] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[20:39:49] *** Joins: ivii (~ivan@user/ivii)
[20:40:31] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[20:47:51] *** Quits: gzd (~gzd@83-215-123-219.lhau.dyn.salzburg-online.at) (Quit: Leaving)
[20:49:13] *** Joins: xkuru (~xkuru@user/xkuru)
[20:49:15] *** Joins: kaph_ (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[20:49:26] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[20:52:52] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[20:52:54] <great_taste> is there a specific designation to template functions that don't have an argument with the template type? e.g. `template<typename T> void foo();`
[20:55:06] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[20:55:16] *** Joins: Kakurady (~nekoyasha@2607:f2c0:eac8:3297:cb96:b32:1603:38b0)
[20:55:54] <Alipha> great_taste: we don't have a word for that, no. T won't be able to be deduced though
[20:56:33] <great_taste> can a function of that sort be specialized?
[20:56:37] <Alipha> So closest term would be like, T is an non-deducable template argument
[20:57:00] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 272 seconds)
[20:57:06] *** Joins: c4017w_ (~c4017@209.52.68.8)
[20:59:09] <Alipha> { f<int>(); f<double>(); } template<typename T> void f() { cout << "Gen "; } template<> void f<int>() { cout << "int "; }
[20:59:10] <geordi> int Gen
[20:59:11] *** Quits: jokoon (~eio@2a01:e0a:542:e160:7c08:5456:3d12:f423) (Quit: Leaving)
[20:59:37] <great_taste> ah that's how you do it
[20:59:45] <Alipha> Note that function templates cannot be partially specialized
[20:59:56] <great_taste> what's the reason behind that?
[21:00:48] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[21:00:59] <Alipha> great_taste: I think because it causes too much ambiguity or complication with the fact that functions can also be overloaded
[21:01:52] <Alipha> And that in most cases, you can overload instead of partially specialize
[21:05:17] <PJBoy> function templates just don't need it
[21:06:28] <PJBoy> in fact class template partial specialisations are converted to function template overloads in a sense when resolving which specialisation to choose
[21:07:28] *** Quits: pepperoni (~pepperoni@172.58.99.238) (*.net *.split)
[21:07:28] *** Quits: baltazar (~baltazar@178-164-184-5.pool.digikabel.hu) (*.net *.split)
[21:07:28] *** Quits: talisein (~talisein@user/talisein) (*.net *.split)
[21:07:28] *** Quits: obiwahn (~heini@user/obiwahn) (*.net *.split)
[21:07:28] *** Quits: rb (~augh@alogs.space) (*.net *.split)
[21:07:28] *** Quits: Praise (~Fat@user/praise) (*.net *.split)
[21:07:28] *** Quits: ivan (~ivan@user/ivan) (*.net *.split)
[21:10:32] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[21:11:00] <Alipha> If you really need partially specialized functions, you can just call a partially specialized class's member function, eg, template<typename T> void f() { f_impl<T>::f(); }
[21:11:31] *** Quits: Kakurady (~nekoyasha@2607:f2c0:eac8:3297:cb96:b32:1603:38b0) (Quit: Konversation terminated!)
[21:12:56] *** Joins: pepperoni (~pepperoni@172.58.99.238)
[21:12:56] *** Joins: baltazar (~baltazar@178-164-184-5.pool.digikabel.hu)
[21:12:56] *** Joins: talisein (~talisein@user/talisein)
[21:12:56] *** Joins: obiwahn (~heini@user/obiwahn)
[21:12:56] *** Joins: rb (~augh@alogs.space)
[21:12:56] *** Joins: Praise (~Fat@user/praise)
[21:12:56] *** Joins: ivan (~ivan@user/ivan)
[21:14:36] <Alipha> But overload resolution is typically fine instead, where the template parameters are deduced and not explicitly specified, eg, template<typename T> void f(std::vector<T> v) {} template<typename T> void f(T t) {}
[21:17:11] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[21:18:40] *** pah is now known as pa
[21:21:53] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[21:27:24] *** leizes is now known as filename
[21:35:32] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[21:38:15] *** Quits: filename (~kilitary@188.242.105.134) (Quit: --fast)
[21:40:07] *** Joins: filename (~kilitary@188.242.105.134)
[21:43:45] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:43:53] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:43:53] *** ChanServ sets mode: +v npaperbot
[21:46:10] *** Joins: zmt00 (~zmt00@user/zmt00)
[21:46:27] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 252 seconds)
[21:57:41] *** Joins: c4017w__ (~c4017@209.52.68.8)
[22:01:19] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[22:10:53] *** Quits: filename (~kilitary@188.242.105.134) (Remote host closed the connection)
[22:16:07] *** Joins: p-i- (~Ohmu@2403:6200:8978:9086:1030:27f5:3084:25d2)
[22:18:33] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[22:18:46] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[22:20:12] *** Quits: p-i- (~Ohmu@2403:6200:8978:9086:1030:27f5:3084:25d2) (Ping timeout: 240 seconds)
[22:25:55] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[22:31:51] <ik> Is it common style to explicitly write (void) for functions that take no arguments, or is the arguments list normally just left empty?
[22:32:44] <cbreak> no
[22:32:49] <cbreak> not common style.
[22:32:52] <cbreak> it's C style
[22:33:14] <cbreak> in C, argument lists are advisorial only, and empty argument lists are equivalent to (...)
[22:33:21] <cbreak> (although that might have changed since C89...)
[22:33:58] <antto> i recently saw there's an upcoming thing to allow for the func(void) syntax to be omitted
[22:34:01] <antto> i think
[22:36:24] <PJBoy> they're removing the K&R fake function declaration
[22:36:44] <PJBoy> so the (void) parameter would be strictly redundant
[22:41:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[22:43:19] *** Joins: zmt01 (~zmt00@user/zmt00)
[22:43:57] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[22:47:10] *** Joins: zmt00 (~zmt00@user/zmt00)
[22:47:57] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[22:48:33] *** Joins: Giovanni (~Giovanni@176.55.170.26)
[22:51:31] *** Joins: nafen (~nafen@gateway/tor-sasl/nafen)
[22:53:02] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 250 seconds)
[22:53:34] *** Joins: zmt01 (~zmt00@user/zmt00)
[22:53:57] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[22:55:39] <m_ben> there's also a proposal to add lambdas to C. guess what they look like :)
[22:55:51] *** Joins: filename (~kilitary@kilitary.xyz)
[22:56:03] *** Joins: nafen_ (~nafen@gateway/tor-sasl/nafen)
[22:56:37] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[22:58:02] *** Joins: c4017w_ (~c4017@209.52.68.8)
[22:59:35] *** Quits: nafen (~nafen@gateway/tor-sasl/nafen) (Ping timeout: 240 seconds)
[23:01:08] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[23:01:46] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[23:03:03] *** Joins: magla (~gelignite@d5366f7c.access.ecotel.net)
[23:05:17] *** Joins: andreasbuhr (~quassel@p5dcf991b.dip0.t-ipconnect.de)
[23:08:13] *** Quits: nafen_ (~nafen@gateway/tor-sasl/nafen) (Remote host closed the connection)
[23:08:34] *** Joins: nafen_ (~nafen@gateway/tor-sasl/nafen)
[23:09:28] *** Quits: nafen_ (~nafen@gateway/tor-sasl/nafen) (Remote host closed the connection)
[23:09:49] *** Joins: nafen_ (~nafen@gateway/tor-sasl/nafen)
[23:13:48] *** Joins: v4mp (~v4mp@user/v4mp)
[23:16:16] *** Quits: nafen_ (~nafen@gateway/tor-sasl/nafen) (Remote host closed the connection)
[23:16:20] *** Quits: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian) (Ping timeout: 272 seconds)
[23:16:35] *** Joins: nafen_ (~nafen@gateway/tor-sasl/nafen)
[23:16:50] *** Joins: GunqqerFriithian (~gunqqer@198.254.26.2)
[23:18:27] *** Quits: nafen_ (~nafen@gateway/tor-sasl/nafen) (Remote host closed the connection)
[23:18:36] *** Joins: nafen_ (~nafen@gateway/tor-sasl/nafen)
[23:20:03] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[23:20:17] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[23:24:54] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[23:25:59] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[23:27:39] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 252 seconds)
[23:31:32] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 272 seconds)
[23:32:27] *** Joins: pulse (~pulse@user/pulse)
[23:32:36] *** Quits: Terminus (~null@user/terminus) (Ping timeout: 240 seconds)
[23:37:40] *** Quits: GunqqerFriithian (~gunqqer@198.254.26.2) (Ping timeout: 250 seconds)
[23:39:14] *** Joins: Terminus (~null@user/terminus)
[23:58:35] *** Joins: c4017w__ (~c4017@209.52.68.8)
