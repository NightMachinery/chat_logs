[00:18:59] *** Joins: mimmy (~mimmy@146.70.75.156)
[00:28:30] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:31:34] <dminuoso> Yes.
[00:37:58] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[00:41:32] *** Quits: jespada (~jespada@252-155-231-201.fibertel.com.ar) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:02:51] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[01:08:52] *** Joins: Pickchea (~private@user/pickchea)
[01:26:23] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 250 seconds)
[01:41:07] *** Quits: mimmy (~mimmy@146.70.75.156) (Ping timeout: 250 seconds)
[01:49:34] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[01:50:12] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[02:02:47] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 250 seconds)
[02:06:06] *** Joins: mimmy (~mimmy@146.70.75.156)
[02:18:41] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[02:27:08] *** Quits: Pickchea (~private@user/pickchea) (Remote host closed the connection)
[02:50:58] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:8de2:1993:a832:eced) (Quit: gone to sleep. ZZZzzz…)
[02:52:07] *** Joins: Pickchea (~private@user/pickchea)
[02:56:25] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:8de2:1993:a832:eced)
[02:57:44] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Read error: No route to host)
[02:58:51] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:10:19] *** Joins: pfurla_ (~pfurla@16.191.255.173.client.dyn.strong-mf37.as54203.net)
[03:11:54] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:8de2:1993:a832:eced) (Ping timeout: 265 seconds)
[03:15:35] *** Quits: pfurla_ (~pfurla@16.191.255.173.client.dyn.strong-mf37.as54203.net) (Ping timeout: 250 seconds)
[03:17:38] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[03:20:36] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:a029:e568:3465:8d9f)
[03:32:55] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[03:38:03] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[03:51:59] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 250 seconds)
[04:28:26] *** Joins: mvk (~mvk@2607:fea8:5cc3:e900::df92)
[04:41:52] *** Quits: alx741 (~alx741@181.196.68.87) (Ping timeout: 256 seconds)
[04:56:11] *** Joins: alx741 (~alx741@181.196.69.19)
[05:10:53] *** Joins: mimmy_ (~mimmy@72.142.88.18)
[05:13:36] *** Quits: mimmy (~mimmy@146.70.75.156) (Ping timeout: 256 seconds)
[05:29:30] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[05:38:06] *** Quits: alx741 (~alx741@181.196.69.19) (Quit: alx741)
[05:43:31] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[05:44:55] *** Joins: zaquest (~notzaques@5.130.79.72)
[06:04:02] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[06:45:24] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:a029:e568:3465:8d9f) (Quit: gone to sleep. ZZZzzz…)
[06:46:02] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:a029:e568:3465:8d9f)
[07:01:26] *** Quits: mimmy_ (~mimmy@72.142.88.18) (Quit: WeeChat 3.3)
[07:29:31] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:a029:e568:3465:8d9f) (Quit: gone to sleep. ZZZzzz…)
[08:02:06] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:03:47] *** Quits: mvk (~mvk@2607:fea8:5cc3:e900::df92) (Ping timeout: 268 seconds)
[08:34:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[08:54:01] *** Quits: segfaultfizzbuzz (~segfaultf@135-180-0-138.static.sonic.net) (Ping timeout: 250 seconds)
[09:55:26] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[09:55:50] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[10:19:02] *** Quits: teehemkay (sid14792@lymington.irccloud.com) (Ping timeout: 256 seconds)
[10:22:26] *** Joins: teehemkay_ (sid14792@lymington.irccloud.com)
[10:30:41] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:05:05] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[11:37:17] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[11:38:43] *** Joins: hololeap (~hololeap@user/hololeap)
[11:58:40] *** Quits: hololeap (~hololeap@user/hololeap) (Read error: Connection reset by peer)
[11:59:59] *** Joins: hololeap (~hololeap@user/hololeap)
[12:24:21] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:46:59] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Read error: Connection reset by peer)
[12:47:32] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[12:56:11] *** Quits: libertyprime (~libertypr@118-92-79-220.dsl.dyn.ihug.co.nz) (Ping timeout: 264 seconds)
[13:24:33] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[13:28:09] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[13:29:02] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[13:30:35] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[13:30:44] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[13:32:17] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[13:32:25] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[13:35:45] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[13:35:53] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[13:37:13] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[13:37:21] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[13:37:40] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[13:37:47] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[13:37:50] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[13:38:02] *** Joins: libertyprime (~libertypr@203.211.73.21)
[13:38:04] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[13:40:12] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Remote host closed the connection)
[13:40:20] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[13:48:42] *** Quits: awpr (uid446117@lymington.irccloud.com) (Ping timeout: 256 seconds)
[13:49:07] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Quit: Leaving.)
[13:49:14] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[13:49:41] *** Joins: awpr (uid446117@lymington.irccloud.com)
[13:52:04] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[13:52:12] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[13:53:17] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[13:53:27] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[13:56:35] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[13:56:42] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[14:00:17] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[14:00:41] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[14:02:46] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[14:02:57] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[14:03:11] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[14:03:24] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[14:03:44] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[14:03:58] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[14:04:01] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[14:09:07] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[14:09:21] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[14:28:11] *** Joins: pfurla (~pfurla@177.142.247.67)
[14:30:35] *** Joins: alx741 (~alx741@181.196.69.19)
[14:45:02] *** Joins: pfurla_ (~pfurla@2804:14d:5c81:4104:99ae:703b:b7dc:fe53)
[14:48:52] *** Quits: pfurla (~pfurla@177.142.247.67) (Ping timeout: 265 seconds)
[14:54:11] *** Quits: libertyprime (~libertypr@203.211.73.21) (Ping timeout: 265 seconds)
[14:55:15] *** Joins: libertyprime (~libertypr@203.211.73.21)
[15:03:46] *** Quits: libertyprime (~libertypr@203.211.73.21) (Ping timeout: 260 seconds)
[15:16:42] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[15:19:52] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[15:41:28] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:42:25] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:47:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[15:48:04] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:53:29] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[15:53:38] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:55:32] *** Joins: stef204 (~stef204@user/stef204)
[15:57:23] *** Joins: jespada (~jespada@252-155-231-201.fibertel.com.ar)
[16:09:51] *** Joins: libertyprime (~libertypr@118-92-79-220.dsl.dyn.ihug.co.nz)
[16:22:01] *** Quits: pfurla_ (~pfurla@2804:14d:5c81:4104:99ae:703b:b7dc:fe53) (Quit: gone to sleep. ZZZzzz…)
[16:22:49] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:99ae:703b:b7dc:fe53)
[16:42:22] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:99ae:703b:b7dc:fe53) (Quit: gone to sleep. ZZZzzz…)
[16:44:30] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:99ae:703b:b7dc:fe53)
[17:24:57] <perryprog> What's the best way to convert a Char to a [Char] in order to read it?
[17:25:19] <dminuoso> Why do you want to "read it"?
[17:26:08] <perryprog> Okay, better question—what's the best way to convert an Integer into a list of its digits :>
[17:26:29] <geekosaur> right, read would not actually help there
[17:26:42] <geekosaur> > read "foo" :: String
[17:26:43] <lambdabot>  "*Exception: Prelude.read: no parse
[17:26:52] <geekosaur> > read "\"foo\" :: String
[17:26:54] <dminuoso> Use div/mod/divmod + recursion
[17:26:54] <lambdabot>  <hint>:1:24: error:
[17:26:54] <lambdabot>      lexical error in string/character literal at end of input
[17:26:57] <geekosaur> whoops
[17:27:01] <geekosaur> > read "\"foo\"" :: String
[17:27:03] <lambdabot>  "foo"
[17:27:34] <perryprog> I thought about that, dminuoso, but it seems like... a bit much
[17:27:52] <dminuoso> What is a bit too much about it?
[17:27:54] <dminuoso> It's a two liner
[17:28:39] <perryprog> I mean, in my head the thing that made the most sense was to go [Char] -> String -> [Char] -> [String] -> [Integer]
[17:28:48] <perryprog> although now that I say that aloud that also sounds a bit "much" :P
[17:29:17] <perryprog> ack, I mean um
[17:29:32] <dminuoso> div/mod + recursion is really the simplest and most effective method
[17:29:49] <dminuoso> Perhaps its just awkward because you're not used to this programming style?
[17:29:57] <perryprog> Most likely :P
[17:30:13] <perryprog> Integer -> [Char] -> [Integer] is what I meant, FWIW
[17:30:20] * perryprog is still waking up
[17:30:57] <yushyin> or use a lib? e.g. digits
[17:31:15] <dminuoso> A library for a 2 liner is massive overkill
[17:31:27] <perryprog> ^^
[17:31:38] <yushyin> (to c&p the implementation! :D)
[17:31:40] <perryprog> I don't want to add is-even as a deb for this :D
[17:31:43] <perryprog> dep*
[17:31:54] <perryprog> well, I'd rather learn how to write the implementation myself
[17:32:07] <yushyin> that's good
[17:32:07] <dminuoso> Sounds worthwhile doing to me
[17:32:30] <dminuoso> To me it seems like a very trivial task, so if its a challenge to you, you ought to do it yourself as an excercise.
[17:33:17] <perryprog> Right
[17:47:49] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[17:48:24] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:99ae:703b:b7dc:fe53) (Quit: gone to sleep. ZZZzzz…)
[17:48:33] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[17:48:47] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[17:48:55] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[17:50:21] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[17:52:40] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[17:52:48] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[17:52:48] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[17:53:00] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[17:53:59] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[17:54:14] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[17:57:11] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[18:02:54] *** Quits: dibblego (~dibblego@haskell/developer/dibblego) (Ping timeout: 260 seconds)
[18:14:28] <perryprog> So, working through this—the obvious order of construction would be something like https://paste.tomsmeding.com/KHGKNjmI
[18:15:21] <perryprog> But I know a /few/ things about Haskell, and that has an inefficiency smell to me—it's going to be constructing this in a bad order
[18:17:23] <perryprog> something like [0] ++ [1] ++ [2] ++ [3] expanded, I think, and that seems quite bad
[18:17:47] <perryprog> so if this is correct, is it better to build it in reverse order, and then `reverse` it when done?
[18:18:29] *** Joins: dibblego (~dibblego@122-199-1-30.ip4.superloop.com)
[18:18:29] *** Quits: dibblego (~dibblego@122-199-1-30.ip4.superloop.com) (Changing host)
[18:18:29] *** Joins: dibblego (~dibblego@haskell/developer/dibblego)
[18:19:51] <merijn> The best approach would be the DList approach
[18:20:11] <merijn> perryprog: See: http://h2.jaguarpaw.co.uk/posts/demystifying-dlist/
[18:20:56] <merijn> You'd probably wanna move the logic into a local helper function with the DList approach, though
[18:22:23] <merijn> Actually, not entirely sure the current version is even that bad
[18:22:27] <perryprog> so that's a right-to-left implementation of list, basically?
[18:22:53] <geekosaur> unless you're building 100-digit numbers, even the "inefficient" one will be fine
[18:22:55] <perryprog> well, I suspect that my implementation isn't /too/ bad since I'm only going to be dealing with ≈ 300 digits which is potatoes
[18:23:02] <perryprog> but it's nice to know how to do it righta
[18:23:04] <perryprog> right*
[18:24:20] *** Joins: pfurla (~pfurla@201.17.118.230)
[18:30:17] <perryprog> o... digitToInt exists
[18:30:29] <perryprog> still, I'm show show-reading is slower than this
[18:33:58] <perryprog> 94 chars versus 33 chars in length comparison when using read/digitToInt versus div/mod recursion :(
[18:34:09] <perryprog> Well, everyone knows golf length is more important than efficiency
[18:35:08] *** Quits: dibblego (~dibblego@haskell/developer/dibblego) (Excess Flood)
[18:35:45] *** Joins: dibblego (~dibblego@122-199-1-30.ip4.superloop.com)
[18:35:45] *** Quits: dibblego (~dibblego@122-199-1-30.ip4.superloop.com) (Changing host)
[18:35:45] *** Joins: dibblego (~dibblego@haskell/developer/dibblego)
[19:00:17] *** Quits: libertyprime (~libertypr@118-92-79-220.dsl.dyn.ihug.co.nz) (Quit: Lost terminal)
[19:23:13] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[19:36:00] *** Quits: jespada (~jespada@252-155-231-201.fibertel.com.ar) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:46:25] *** Joins: segfaultfizzbuzz (~segfaultf@135-180-0-138.static.sonic.net)
[19:51:06] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:55:43] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[20:00:11] <segfaultfizzbuzz> it seems like in order to write code i need to know some assembly
[20:00:24] <segfaultfizzbuzz> but assembly seems like an infinite, arbitrarily complex topic
[20:00:53] <segfaultfizzbuzz> how do i identify a reasonable minimum and a reasonable standard
[20:01:03] <geekosaur> you only need to know assembly if you are trying to write the fastest code possible. this isn't usually necessary
[20:01:05] <segfaultfizzbuzz> i started reading the riscv documentation and i think i can understand the basic riscv instructions
[20:01:27] <segfaultfizzbuzz> but going much beyond a few of these things makes my eyes cross
[20:13:12] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[20:14:56] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[20:26:42] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:33:13] *** Quits: pfurla (~pfurla@201.17.118.230) (Quit: gone to sleep. ZZZzzz…)
[20:36:58] <dminuoso> segfaultfizzbuzz: I think it's a red herring, you dont need any knowledge to write code or even good code.
[20:37:41] <dminuoso> While I would consider it knowledge that is certainly useful for expert competency, it's definitely not necessary
[20:38:55] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:99ae:703b:b7dc:fe53)
[20:39:07] <dminuoso> perryprog: Note that your solution has a bug.
[20:39:18] <dminuoso> % readDigits 0 = [0]; readDigits n = readDigits (n `div` 10) ++ [n `mod` 10]
[20:39:18] <yahb> dminuoso:
[20:39:28] <dminuoso> % readDigits 1
[20:39:28] <yahb> dminuoso: [0,1]
[20:39:29] <perryprog> Sorry, I don't write bugs
[20:40:00] <perryprog> yeah, I'm aware of the extra zero—it doesn't affect what I do with the list next, so I was lazy and didn't fix it
[20:40:29] <dminuoso> Also keep in mind that you can do it reverse, which avoids the list concatenation
[20:41:11] <geekosaur> segfaultfizzbuzz, one of the reasons we use compiled languages is we want the compiler to deal with assembly language so we don't have to
[20:41:29] <dminuoso> % digits 0 = [0]; digits x = go x where go 0 = []; go x = x `mod` 10 : go (x `div` 10) -- perryprog
[20:41:30] <yahb> dminuoso:
[20:41:52] <dminuoso> % digits 100
[20:41:52] <yahb> dminuoso: [0,0,1]
[20:42:08] <geekosaur> heck, we really prefer not to have to deal with intermediate representations either (such as ghc Core or LLVM IR) unless we must
[20:43:01] <geekosaur> it can, as I said, be helpful if we're trying to squeeze every last bit of performance out of the machine. but we rarely need that; there is a "fast enough"
[20:43:29] <geekosaur> otherwise we'd all be writing in hand-tuned C, not Haskell, not C++, certainly not Java or JS, etc.
[20:57:22] *** Quits: dibblego (~dibblego@haskell/developer/dibblego) (Excess Flood)
[20:57:48] *** Joins: dibblego (~dibblego@122-199-1-30.ip4.superloop.com)
[20:57:48] *** Quits: dibblego (~dibblego@122-199-1-30.ip4.superloop.com) (Changing host)
[20:57:48] *** Joins: dibblego (~dibblego@haskell/developer/dibblego)
[20:59:00] <perryprog> dminuoso, yes, I figured building in reverse order could be faster
[21:01:02] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[21:33:11] *** Joins: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[21:37:46] *** Quits: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 265 seconds)
[21:49:26] <segfaultfizzbuzz> dminuso: well you say this but to understand the haskell abstract machine i apparently need to speak assembly (STGM paper)...
[21:49:53] <geekosaur> I feel like you are doing something wrong.
[21:49:55] <segfaultfizzbuzz> dminuso: your attitude "no assembly needed" has been my own attitude for a long time, but i'm exploring whether i am wrong about this
[21:50:25] <geekosaur> stg paper is admittedly more about low level implementation details, but that's because it's about how to do a faster graph reduction machine
[21:50:50] <geekosaur> the conceptual part you shouldn't even need to know that stg is what ghc's is called; you want to learn about graph reduction
[21:52:01] <awpr> the 1990s SPJ book about implementing lazy functional languages is pretty good for getting a low-level base intuition, if that's what you're interested in
[21:54:08] <awpr> it focuses on Miranda rather than Haskell, and obviously a lot has changed in 20+ years, but for the general concepts of how functional languages work under the hood without all the gritty details of new Haskell features, it seems pretty useful
[21:54:20] <segfaultfizzbuzz> ok
[21:55:06] <awpr> lol 1987 in fact: https://www.microsoft.com/en-us/research/wp-content/uploads/1987/01/slpj-book-1987-small.pdf
[22:01:53] <segfaultfizzbuzz> saw the phrase "aimed at developing understanding rather than at formal rigor" -- ok i like this
[22:02:08] *** Joins: jespada (~jespada@252-155-231-201.fibertel.com.ar)
[22:07:11] <segfaultfizzbuzz> "a functional program has a natural representation as a tree (or more generally, as a graph)" -- uh, big difference? which is it
[22:08:12] <perryprog> Anyone know why emacs is giving me this error in my Main.hs whenever I add a function to Lib.hs and use it in my main? It compiles and runs totally fine. "[cradle] ghcide compiled by GHC 8.10 failed to load packages: <command line>: cannot satisfy -package pe-0.1.0.0"
[22:08:54] <perryprog> Restarting lsp doesn't seem to fix it either
[22:09:20] <geekosaur> that might be a good question for #haskell-language-server ?
[22:09:43] <awpr> choosing a tree representation rather than a graph means you might have to duplicate some subexpressions: e.g. `let x = 5 + 6 in x + x` as a graph would have each reference to `x` pointing to the same `5 + 6` node, while flattening it to a tree would give two separate instances of the subexpression that defines `x`
[22:09:54] <perryprog> Thanks geekosaur!
[22:10:15] <awpr> (note, that's not a _syntax_ tree, because the syntax of a let-expression can be a tree without losing anything)
[22:11:27] <geekosaur> trees are easier and I think slightly faster, graphs give more sharing but are harder to deal with
[22:12:14] <geekosaur> hence emphasis on things like stg which can handle actual graphs well
[22:12:38] <awpr> not sure about faster -- you can get exponential blowup turning a DAG into a tree, by just nesting `let x = y in x + x` N times
[22:12:51] <geekosaur> yeh
[22:13:30] <awpr> actually the tree representation might not even be finite, like in `let x = 1 : x in x`, which has a tiny graph representation but is infinite when unrolled to a tree
[22:13:46] <geekosaur> well, they're "faster" in the sense that there is overhead to handling a graph without getting caught in an infinite loop
[22:13:51] <geekosaur> like that, yes
[22:13:54] <awpr> ah, yeah
[22:14:09] <segfaultfizzbuzz> yeah i was going to say, it seems like graphs are useful for representing "infinite" expressions/expressions best suited to laziness
[22:14:49] <awpr> kinda depends on how you define the question -- if you look at the same program in tree form and graph form, the tree form won't necessarily be faster; but if you limit yourself to tree programs and graph programs of comparable sizes, then the trees should be faster
[22:14:54] <geekosaur> right, but you can be functional without handling such expressions. lisp is a tree and handles graphs poorly, for example
[22:15:21] <geekosaur> but yes, you want a graph if you want to go the whole way
[22:16:17] <awpr> so I like to think about it as "mostly an expression tree, but there can be shared subexpressions or even cycles"
[22:30:39] <segfaultfizzbuzz> so please forgive the "impractical" distraction here but my current attitude is shaped by the concept that "more abstract is better"
[22:30:55] <segfaultfizzbuzz> i don't think i have any hope of understanding computer hardware, much less programming languages
[22:31:15] <segfaultfizzbuzz> so all i am left with is the question of what abstraction is the most abstract and useful
[22:31:27] <segfaultfizzbuzz> or maybe that question is meaningless
[22:37:51] <awpr> I'm not sure about more or less abstract, but the tree form could be seen as more restrictive in a way that forces it to do evaluation less efficiently
[22:38:10] <segfaultfizzbuzz> right,... you can theoretically spot cycles and clip them for instance
[22:39:26] <awpr> ultimately this is all about beta reduction: consider `(\x -> x + x) (5 + 6)` -- under a tree model, beta-reducing that (lazily) by substitution gives you `(5 + 6) + (5 + 6)`
[22:40:01] <awpr> but with a graph, you can keep just one `5 + 6` node, and have two pointers to it after beta reduction
[22:41:36] <awpr> so, when beta-reduction results in a node being referenced multiple times, the graph model is more efficient in that it doesn't have to _actually_ duplicate the subexpression, it can just remember that the two "subexpressions" are the same thing, and only evaluate that once
[22:47:45] <segfaultfizzbuzz> sounds like there's an additional assumption here that the equality there can't be decided except at runtime
[22:50:12] <awpr> there isn't even a runtime / compile-time distinction in this: it's just about how you represent the result of beta-reduction (which could happen in a language runtime or in a compiler optimizer)
[22:54:26] <awpr> it might be presented differently in a runtime vs. in an optimizer, e.g. with a single thunk/closure and multiple machine pointers to it in a runtime, vs. by giving a name to a single subexpression and referencing it by name multiple times in an optimizer; but the concept of sharing subterms instead of copying them is the same in either case
[22:57:22] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:22:20] *** Joins: Pickchea (~private@user/pickchea)
[23:31:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[23:40:45] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[23:51:44] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
