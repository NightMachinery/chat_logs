[00:21:55] *** Joins: amb007 (~a_bakic@116.144.204.77.rev.sfr.net)
[00:22:46] *** Quits: tyson2 (~user@70.54.112.49) (Quit: ERC (IRC client for Emacs 27.2))
[00:27:07] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 258 seconds)
[00:28:59] *** Joins: gaqwas (~john@dynamic-077-004-049-139.77.4.pool.telefonica.de)
[00:34:00] *** Quits: cage (~cage@dynamic-adsl-78-15-46-179.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:34:16] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Remote host closed the connection)
[00:34:39] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[00:37:41] *** Joins: zacts9 (~zacts@user/zacts)
[00:39:41] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 246 seconds)
[00:41:20] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Ping timeout: 245 seconds)
[00:41:26] *** zacts9 is now known as zacts
[00:43:56] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[00:57:12] *** Quits: amb007 (~a_bakic@116.144.204.77.rev.sfr.net) (Ping timeout: 268 seconds)
[00:57:18] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[00:57:25] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[00:57:53] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 246 seconds)
[01:02:47] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 246 seconds)
[01:02:48] *** Joins: tyson2 (~user@toroon12-3096782363.sdsl.bell.ca)
[01:12:07] *** Quits: Duuqnd (~duuqnd@89-253-114-156.customers.ownit.se) (Remote host closed the connection)
[01:16:25] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:26:04] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 255 seconds)
[01:39:44] *** Quits: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu) (Ping timeout: 265 seconds)
[01:44:15] *** Joins: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de)
[01:45:04] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 240 seconds)
[01:49:11] *** Joins: pjb (~pjb@user/pjb)
[01:58:52] *** Quits: cuz (~user@38.140.58.234) (Ping timeout: 268 seconds)
[01:59:45] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:6811:93df:76a2:f686) (Remote host closed the connection)
[02:10:01] *** Joins: cuz (~user@38.140.58.234)
[02:15:30] *** Quits: cuz (~user@38.140.58.234) (Ping timeout: 265 seconds)
[02:20:15] *** Quits: gaqwas (~john@dynamic-077-004-049-139.77.4.pool.telefonica.de) (Ping timeout: 255 seconds)
[02:28:22] <jmercouris> Is there a version of map car that runs concurrently ?
[02:28:48] <jmercouris> I.e. utilizing multiple threads
[02:29:42] <pjb> jmercouris: in lparallel IIRC.
[02:29:52] *** Quits: tyson2 (~user@toroon12-3096782363.sdsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[02:30:19] <pjb> https://quickref.common-lisp.net/lparallel.html#go-to-the-LPARALLEL_2024COGNATE_2236_2236PMAP-function
[02:30:38] <mfiano> check out the cognates section of the manual
[02:30:58] <mfiano> there are a lot of cognates iirc
[02:31:03] <jmercouris> I see
[02:31:07] <jmercouris> That’s perfect
[02:31:09] <jmercouris> Thanks
[02:31:28] <jmercouris> I’ll have to do some benchmarking to see when it actually makes sense to spawn new threads
[02:31:52] <pjb> Indeed. Lots of surprises.
[02:31:57] * mfiano wouldn't take benchmarks alone into consideration
[02:32:35] <jmercouris> Ok so what about thread pooling
[02:32:44] <jmercouris> Does lparallel do this for you?
[02:32:52] <pjb> more synchronization, more slowness.
[02:32:53] <pjb> Yes.
[02:32:57] <mfiano> lparallel will manage that for you, based on the number of workers you supply
[02:32:58] <jmercouris> Or will it be creating and killing threads every time I do some parallel operation
[02:33:04] <jmercouris> Ok good
[02:33:13] <mfiano> You can use cl-cpus to set the thread pool worker count to the number of logical cores if you wish
[02:33:24] <jmercouris> mfiano: I also planned on doing some manual testing for feeling
[02:33:41] <jmercouris> mfiano: is that always the best number though?
[02:33:48] <jmercouris> What about virtual cores?
[02:34:08] <jmercouris> I know too little about CPUs
[02:34:16] <mfiano> Well such testing could have wildly different results on different hardware. What you think is better than no parallelism could be worse across hardware / environment line
[02:34:20] <pjb> jmercouris: See make-kernel.
[02:34:28] <pjb> jmercouris: just read the f* manual.
[02:34:31] <jmercouris> Right, I remember make kernel
[02:34:41] <jmercouris> Well, I have read it, a long time ago
[02:34:50] <jmercouris> Since we moved to calispel, I can’t remember
[02:34:57] <jmercouris> Also we used it for a much different purpose
[02:35:00] *** Quits: frgo (~frgo@p200300deef181d00e071b07f093d0062.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:35:11] <jmercouris> mfiano: perhaps leave it as a user tunable then?
[02:35:24] <jmercouris> Since we cannot possibly know what will perform best on what hardware
[02:35:28] *** Joins: frgo (~frgo@p200300deef181d003c3efe8a0799d48f.dip0.t-ipconnect.de)
[02:35:35] <jmercouris> And have it default to the number of cores?
[02:36:15] <mfiano> So if this is for code to be consumed by others, I suggest you use use reasoning of how computers work over the numbers you see at one time on one piece of hardware running one OS on one implementation
[02:36:51] <jmercouris> That just seems so specific though
[02:36:56] <jmercouris> Well, I’ll give it a try
[02:37:02] <jmercouris> Thanks for the inspiration
[02:37:26] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-4-119.prtc.net)
[02:37:39] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-4-119.prtc.net) (Client Quit)
[02:43:07] <mfiano> Just try to keep jobs doing work, basically
[02:43:20] <mfiano> Instead of the overhead of switching contexts or tearing up/down jobs
[02:44:03] <mfiano> For example, if you were decoding a large image, instead of spawning a worker for each pixel, or for each row...figure how many "bands" you will need to allocate 1 band to each worker in your pool
[02:45:14] <mfiano> or columns, depending on the aspect ratio i suppose
[02:47:10] *** Quits: pve (~pve@188-67-182-130.bb.dnainternet.fi) (Quit: leaving)
[02:55:18] *** Joins: ajmrch (~asarch@2806:10ae:7:e1:da06:3f53:fc11:16e9)
[02:55:56] *** ajmrch is now known as asarch
[02:56:25] *** Quits: asarch (~asarch@2806:10ae:7:e1:da06:3f53:fc11:16e9) (Quit: Leaving)
[02:58:37] *** Joins: tyson2 (~user@70.54.112.49)
[02:59:55] *** Joins: asarch (~asarch@2806:10ae:7:e1:da06:3f53:fc11:16e9)
[03:02:06] *** Joins: djuber (~user@65.79.128.64)
[03:03:15] <lotuseater> pjb: this article by Kent Pitman you linked me yesterday was really interesting, thx
[03:03:40] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[03:04:06] *** Joins: torbo (~user@72.15.63.17)
[03:06:37] <pjb> lotuseater: indeed.
[03:07:20] <lotuseater> How old is he now?
[03:11:41] <lotuseater> I asked DeepL what "lisp machine style rubout handling" would be in German. It says "Lisp-Maschinenstil-Rubbelbearbeitung". :D
[03:14:39] <eta> seems unlikely
[03:15:30] *** Quits: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de) (Remote host closed the connection)
[03:16:56] *** Quits: lotuseater (~user@p200300e787091b003889257b48e44f36.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[03:22:31] *** Quits: asarch (~asarch@2806:10ae:7:e1:da06:3f53:fc11:16e9) (Quit: Leaving)
[03:24:52] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Ping timeout: 256 seconds)
[03:26:21] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[03:27:36] *** Joins: zacts (~zacts@user/zacts)
[03:31:41] *** Quits: Simponic (~Simponic@144.39.236.169) (Ping timeout: 252 seconds)
[03:32:10] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 245 seconds)
[03:34:15] *** Quits: taiju (~taiju@240b:253:ec40:2400:4582:f12e:efff:b6a0) (Read error: Connection reset by peer)
[03:36:25] *** Joins: lotuseater (~user@p200300e787091b00387e7f8a32e5e786.dip0.t-ipconnect.de)
[03:37:53] <lotuseater> sry my computer went to sleep :)
[03:38:23] *** Joins: taiju (~taiju@240b:253:ec40:2400:4582:f12e:efff:b6a0)
[03:38:41] <lotuseater> eta: why do you mean unlikely? but yes the translation is just funny and not very useful :D
[03:38:52] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 246 seconds)
[03:41:49] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Remote host closed the connection)
[03:41:49] *** Joins: cjb (~cjb@user/cjb)
[03:42:02] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[03:46:06] *** Joins: zacts (~zacts@user/zacts)
[03:47:37] *** Quits: zacts (~zacts@user/zacts) (Client Quit)
[03:50:19] *** Joins: zacts (~zacts@user/zacts)
[03:50:54] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[03:53:12] *** Quits: zacts (~zacts@user/zacts) (Client Quit)
[03:55:03] *** Quits: AnimalClatter (~AnimalCla@208.66.176.26) (Ping timeout: 265 seconds)
[03:57:09] *** Joins: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de)
[04:35:57] *** Parts: akoana (~ah@user/akoana) ()
[04:36:46] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[04:37:19] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 252 seconds)
[04:48:48] *** Quits: lotuseater (~user@p200300e787091b00387e7f8a32e5e786.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[04:52:23] *** Joins: zacts (~zacts@user/zacts)
[04:59:03] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[05:09:31] *** Joins: atgreen (~green@bras-base-toroon0628w-grc-44-142-112-151-129.dsl.bell.ca)
[05:11:26] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[05:13:01] *** Joins: green__ (~green@bras-base-toroon0628w-grc-44-142-112-151-129.dsl.bell.ca)
[05:15:33] *** Quits: atgreen (~green@bras-base-toroon0628w-grc-44-142-112-151-129.dsl.bell.ca) (Ping timeout: 255 seconds)
[05:18:05] *** Joins: atgreen (~green@bras-base-toroon0628w-grc-44-142-112-151-129.dsl.bell.ca)
[05:19:38] *** Quits: green__ (~green@bras-base-toroon0628w-grc-44-142-112-151-129.dsl.bell.ca) (Ping timeout: 265 seconds)
[05:20:32] *** Joins: green__ (~green@bras-base-toroon0628w-grc-44-142-112-151-129.dsl.bell.ca)
[05:23:00] *** Joins: lisp123 (~lisp123@5.30.23.247)
[05:23:01] *** Quits: atgreen (~green@bras-base-toroon0628w-grc-44-142-112-151-129.dsl.bell.ca) (Ping timeout: 265 seconds)
[05:24:23] *** Joins: atgreen (~green@bras-base-toroon0628w-grc-44-142-112-151-129.dsl.bell.ca)
[05:26:20] *** Quits: green__ (~green@bras-base-toroon0628w-grc-44-142-112-151-129.dsl.bell.ca) (Ping timeout: 268 seconds)
[05:28:20] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[05:30:10] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 246 seconds)
[05:33:01] *** Joins: green__ (~green@bras-base-toroon0628w-grc-44-142-112-151-129.dsl.bell.ca)
[05:35:35] *** Quits: atgreen (~green@bras-base-toroon0628w-grc-44-142-112-151-129.dsl.bell.ca) (Ping timeout: 268 seconds)
[05:38:00] *** Joins: atgreen (~green@bras-base-toroon0628w-grc-44-142-112-151-129.dsl.bell.ca)
[05:39:24] *** Quits: green__ (~green@bras-base-toroon0628w-grc-44-142-112-151-129.dsl.bell.ca) (Ping timeout: 255 seconds)
[05:45:32] *** Joins: green__ (~green@bras-base-toroon0628w-grc-44-142-112-151-129.dsl.bell.ca)
[05:47:21] <jcowan> "Rubout handling" has to do with unparsing in reverse as you remove characters from the input stream, as older Lisp systems did
[05:48:16] *** Quits: atgreen (~green@bras-base-toroon0628w-grc-44-142-112-151-129.dsl.bell.ca) (Ping timeout: 268 seconds)
[05:50:38] *** Quits: green__ (~green@bras-base-toroon0628w-grc-44-142-112-151-129.dsl.bell.ca) (Ping timeout: 258 seconds)
[05:59:32] <moon-child> oh my
[06:03:05] *** Quits: tyson2 (~user@70.54.112.49) (Remote host closed the connection)
[06:04:07] *** Joins: dsk (~dsk@user/dsk)
[06:04:28] *** Joins: zacts (~zacts@user/zacts)
[06:15:19] *** Joins: asarch (~asarch@2806:10ae:7:e1:da06:3f53:fc11:16e9)
[06:42:16] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 246 seconds)
[06:45:25] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 246 seconds)
[07:13:53] *** Joins: zacts (~zacts@user/zacts)
[07:18:26] *** Joins: prxq (~quassel@dynamic-077-012-093-241.77.12.pool.telefonica.de)
[07:22:24] *** Quits: prxq_ (~quassel@x4dbd2995.dyn.telefonica.de) (Ping timeout: 265 seconds)
[07:24:28] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:29:40] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[07:31:44] <beach> Good morning everyone!
[07:42:55] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[07:47:11] *** Quits: torbo (~user@72.15.63.17) (Remote host closed the connection)
[07:50:28] *** Joins: raeda (~raeda@72.49.219.33)
[07:50:40] *** Joins: Bike (~Bike@71.69.170.70)
[07:50:40] *** ChanServ sets mode: +o Bike
[07:51:42] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[08:01:01] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 246 seconds)
[08:04:39] *** Quits: amk (~amk@176.61.106.150) (Ping timeout: 240 seconds)
[08:06:22] *** Joins: amk (~amk@176.61.106.150)
[08:08:31] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Ping timeout: 268 seconds)
[08:11:03] *** Quits: taiju (~taiju@240b:253:ec40:2400:4582:f12e:efff:b6a0) (Ping timeout: 255 seconds)
[08:16:54] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 255 seconds)
[08:17:52] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[08:34:26] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[08:34:26] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Read error: Connection reset by peer)
[08:46:19] *** Quits: caz (~caz@2001:470:69fc:105::b9fc) (Killed (copper.libera.chat (Nickname regained by services)))
[08:46:34] *** Joins: Guest356 (~caz@2001:470:69fc:105::b9fc)
[08:57:24] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 28.0.50)
[08:59:47] <asarch> How could you create the kernel on a system without any Lisp at all?
[09:00:02] *** Joins: pjb (~pjb@user/pjb)
[09:00:37] <beach> "kernel"?
[09:00:54] <beach> asarch: I think you need to be more precise about the context.
[09:10:30] *** Joins: cjb (~cjb@user/cjb)
[09:14:27] *** Joins: zacts (~zacts@user/zacts)
[09:15:14] <beach> asarch: Are you still there?
[09:18:20] <asarch> Yes, I am
[09:18:34] <beach> Can you give some more context please?
[09:19:41] <asarch> Ok. You get a new job and in the company's server there is no any Lisp (CLisp, SBCL, etc) at all. How would you compile the source code of SBCL in that situation?
[09:20:10] <beach> You install a binary first.
[09:21:05] <asarch> Is there a way to do a cross-compile for the kernel? (Maybe you at your home with your PC...)?
[09:21:30] <beach> What is this "kernel" that you talk about?
[09:21:30] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[09:21:43] <beach> And why would you cross compile rather than install a binary?
[09:22:23] <asarch> Kernel, the image you load when you do sbcl at prompt?
[09:22:46] <beach> Strange use of the word, but OK.
[09:22:55] <beach> The simplest thing is to install a binary.
[09:23:05] <moon-child> beach: cross compiling and installing a binary don't seem mutually exclusive to me.  Any binary you install will have been compiled at some point; maybe by a cross compiler, maybe by a native one
[09:23:35] <pjb> The second simpliest thing, is to compile clisp, then compile sbcl with clisp.
[09:25:19] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:27:05] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[09:28:46] <moon-child> pjb: sbcl can be bootstrapped; I seem to recall hearing (maybe from beach?) that lispworks and allegro cannot be meaningfully bootstrapped in such a fashion.  Which does make it an interesting question (if not a practical one, since lw and acl are not open source)
[09:29:55] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[09:30:04] <asarch> I mean, the image not the kernel (From Common Lisp Recipes, 16. Developing and Debugging: The main idea of developing in C OMMON L ISP is that the whole system is one “image” that you continuously modify until it fits your needs.)
[09:30:10] <moon-child> yeah, from the els paper: 'Rhodes claims that Allegro, Lispworks, [...] are only possible to build using older versions of the same system, and only using image-based techniques'
[09:31:25] <moon-child> asarch: many lisp compilers have the ability to save the in-memory image to a standalone binary.  This is what sb-ext:save-lisp-and-die does in sbcl, for instance
[09:33:07] <asarch> Is this image cross platform?
[09:33:44] <moon-child> no
[09:34:20] <asarch> I see
[09:37:42] *** Quits: zacts (~zacts@user/zacts) (Quit: zacts)
[09:43:26] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 28.0.50)
[09:43:53] <beach> moon-child: The scenario asarch describes doesn't seem to involve generating an executable file for a new architecture.  It sounds to me like asarch just needs a Common Lisp system on a machine that currently has none installed.
[09:44:29] <beach> If the scenario is that there are no binaries available for the particular architecture of that server, then the problem is greater, of course.
[09:46:02] <beach> asarch: An image contains instructions for a particular processor and a particular operating system (for system calls etc).  That's why it is not cross platform.
[09:46:54] <beach> asarch: Am I describing your scenario correctly?
[09:48:12] <beach> asarch: Or, perhaps you are just interested in how the SBCL maintainers generate those binaries the first time?
[09:51:08] <asarch> I thought it was something a la Squeak images
[09:51:39] <asarch> I was reading that chapter of the book and I thought it was something like that
[09:52:25] <asarch> (I was planning to build an image from my Debian 10 Buster for AMD64 to use it with CL-REPL on my Android-based cellphone)
[09:53:24] <asarch> And then I wondered about how the image is built for the first time
[09:53:39] <beach> That's totally different from what you first described.
[09:53:47] <beach> asarch: An executable file is just a sequence of bytes, so you can create it on any operating system using any language.
[09:54:13] <beach> asarch: You just have to instruct the cross compiler about the architecture you are building for.
[09:54:22] *** Quits: Guest356 (~caz@2001:470:69fc:105::b9fc) (Quit: Reconnecting)
[09:54:35] *** Joins: Guest356 (~caz@2001:470:69fc:105::b9fc)
[09:55:42] <asarch> Then I thought "what about with WebAssembly?"
[09:58:08] <moon-child> webassembly is a particular architecture that can be targeted as easily as any other
[09:58:20] <moon-child> (though I don't know of any extant common lisp compilers targeting it; one would have to be written)
[10:00:12] <asarch> A full environment of SBCL compiled to run from a web browser
[10:02:05] <moon-child> as I recall, some sbcl developers attempted to influence the design of webassembly to make it more amenable to running lisp (something to do with multiple values, maybe?), but their input was not heeded
[10:02:36] <moon-child> (something similar happened with .net and apl about 20 years ago)
[10:06:13] *** Joins: zacts (~zacts@user/zacts)
[10:21:41] <asarch> The good news is that the new Linux distro, Windows 11, will support Android apps out of the box (they say) so you could use CL-REPL with no problem at all
[10:22:10] <zacts> is Windows 11 based on Linux?
[10:23:52] <asarch> Didn't know it?
[10:24:01] <zacts> nope
[10:24:12] <asarch> Well, not Linux at all, Android
[10:24:22] <zacts> interesting
[10:24:54] <asarch> Isn't, it?
[10:27:14] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[10:31:11] *** Joins: shka (~herr@109.231.62.239)
[10:31:19] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:32:09] *** Quits: zacts (~zacts@user/zacts) (Quit: zacts)
[10:33:36] *** Joins: gaqwas (~john@dynamic-077-002-070-022.77.2.pool.telefonica.de)
[10:41:48] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[10:44:22] *** Joins: domovod (~domovod@89.113.143.221)
[10:45:05] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[10:45:53] *** Quits: silasfox (~sbv@165.56.186.101) (Ping timeout: 265 seconds)
[10:49:27] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 255 seconds)
[10:49:46] *** Joins: amb007 (~a_bakic@193.245.204.77.rev.sfr.net)
[10:54:47] *** Quits: domovod (~domovod@89.113.143.221) (Ping timeout: 256 seconds)
[10:56:12] *** Joins: cmack (~charlie@2600:1700:5d51:26ff:4525:a010:ee84:6516)
[11:02:49] *** Quits: svillemot (~sebastien@rama.villemot.name) (Quit: WeeChat 3.0)
[11:04:27] *** Joins: svillemot (~sebastien@rama.villemot.name)
[11:06:28] *** Joins: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu)
[11:14:00] <pjb> asarch: Android as as much a linux system as GNU.
[11:16:29] <pjb> asarch: the CL language doesn't really impose image-based development.  It's not even offering any guarantee to help supporting it. (eg. no source (sexp) tracking utility, function-lambda-expression and documentation can return NIL at any time, etc).  Even writing the required tools would require to go metalinguistic (have a look at ibcl).  But foremost, ecl. (ecl is not image based, its compiler produces elf object files).
[11:17:03] <pjb> (and other implementations, such as clicc, mocl, etc (lispworks for ios/android))…
[11:26:29] *** Quits: amb007 (~a_bakic@193.245.204.77.rev.sfr.net) (Ping timeout: 265 seconds)
[11:27:22] *** Joins: amb007 (~a_bakic@254.245.204.77.rev.sfr.net)
[11:32:22] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 250 seconds)
[11:34:12] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[11:36:03] *** Quits: amb007 (~a_bakic@254.245.204.77.rev.sfr.net) (Ping timeout: 252 seconds)
[11:36:24] *** Joins: amb007 (~a_bakic@72.146.204.77.rev.sfr.net)
[11:38:31] *** Quits: gaqwas (~john@dynamic-077-002-070-022.77.2.pool.telefonica.de) (Ping timeout: 268 seconds)
[11:40:38] *** Quits: amb007 (~a_bakic@72.146.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[11:40:45] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:42:50] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[11:43:03] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:49:32] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[11:49:45] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:53:48] *** Quits: theBlackDragon (~dragon@fvwm/admin) (Ping timeout: 255 seconds)
[11:54:02] *** Joins: theBlackDragon (~dragon@fvwm/admin)
[11:59:03] *** Joins: rt (~robin@user/terpri)
[11:59:03] *** rt is now known as robin
[11:59:17] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[12:00:39] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 240 seconds)
[12:02:27] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[12:05:05] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[12:07:58] *** Joins: Duuqnd (~duuqnd@89-253-114-156.customers.ownit.se)
[12:11:55] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:12:07] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Quit: WeeChat 3.1)
[12:18:55] *** Joins: domovod (~domovod@89.113.143.221)
[12:20:20] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[12:20:32] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:29:48] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Ping timeout: 265 seconds)
[12:29:50] *** Joins: OlCe (~user@lfbn-nic-1-123-149.w2-15.abo.wanadoo.fr)
[12:33:20] *** Joins: Tomte (~th@p200300db9f0f0f000077e3218755497d.dip0.t-ipconnect.de)
[12:35:46] *** Joins: pve (~pve@188-67-169-112.bb.dnainternet.fi)
[12:36:39] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:40:04] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:41:57] *** Quits: cmack (~charlie@2600:1700:5d51:26ff:4525:a010:ee84:6516) (Ping timeout: 255 seconds)
[12:43:18] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[12:46:27] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[12:49:53] *** Joins: Th30n (~Th30n@cpe-188-252-159-93.zg5.cable.xnet.hr)
[12:55:47] *** Quits: asarch (~asarch@2806:10ae:7:e1:da06:3f53:fc11:16e9) (Quit: Leaving)
[12:59:32] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:00:01] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[13:00:12] *** Quits: gpiero (~quassel@193.182.16.91) (Quit: Quitting...)
[13:00:44] *** Lord_of_Life_ is now known as Lord_of_Life
[13:04:21] *** Joins: selwyn (~selwyn@user/selwyn)
[13:07:45] *** Joins: silasfox (~sbv@41.223.117.46)
[13:11:29] *** Joins: gpiero (~quassel@camale.rm-rf.it)
[13:12:23] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:13:03] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:14:43] *** Quits: silasfox (~sbv@41.223.117.46) (Ping timeout: 268 seconds)
[13:17:30] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 255 seconds)
[13:25:11] *** Joins: lotuseater (~user@p200300e787091b00387e7f8a32e5e786.dip0.t-ipconnect.de)
[13:25:54] <lotuseater> good morning everyone :)
[13:27:15] <beach> Hello lotuseater.
[13:29:11] <lotuseater> Hi beach nice that you're writing. :) Don't worry I have no silly questions atm. ^^
[13:29:54] <beach> Whew! :)
[13:34:47] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[13:38:12] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 255 seconds)
[13:48:53] <lotuseater> I thought about constructing a LET-like macro named ILET for defining lexical immutable symbols by looking at the macro body if there are none of '(DECF INCF SETQ SETF) in the body paired with the symbol name. okay actually I did that some weeks ago
[13:50:40] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:50:46] <lotuseater> Was about two years ago around 2 months I stumbled into the CL world that i wrote a macro HLET* where it wasn't needed that the dependent symbols are given in linear order. It looked for references of symbols and sorted this topologically and that worked. :)
[13:52:44] <beach> It is not enough to look at the body code for those operators.
[13:53:05] <moon-child> (let ((x 5) (nx 'x)) (set nx 6))
[13:53:35] <beach> clhs set
[13:53:35] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_set.htm
[13:53:53] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[13:53:57] <moon-child> better: (let ((x 5)) (set (read) 6))
[13:54:04] <beach> moon-child: I don't think that will work.
[13:54:22] <lotuseater> beach: yes good point, I also thought about if that's enough :/
[13:54:50] <moon-child> beach: whyn't?
[13:55:24] <lotuseater> oh SET is deprecated, that's why I never saw it before in real code :D
[13:55:36] <beach> moon-child: Wouldn't it refer to the special X?
[13:56:04] <lotuseater> is it for backwards compatibility in the standard?
[13:56:21] <beach> lotuseater: You could have (let ((x ...)) (f x)) where F is a macro that expands to (setf x ...).
[13:57:44] <beach> moon-child: You can't create references to lexical variables dynamically that way.
[13:58:22] <beach> lotuseater: You would need a code walker for that to work.
[13:58:35] <moon-child> beach: well--sure,  (defvar x) (let ((x 5)) (set 'x 7))
[13:58:44] <lotuseater> ha yes of course, and looking on the endexpansion would be too late
[13:58:44] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Ping timeout: 265 seconds)
[13:59:03] <moon-child> I suppose you could make ILET refuse to bind anything dynamic
[14:01:15] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[14:03:30] <moon-child> lotuseater: and on the topic of macros, it's possible that a macro expansion could generate code like  (when nil (setf x ...)),  which _is_ ok, but which it's not possible in the general case to reject statically
[14:04:30] <beach> Catching situations like that requires solving the halting problem.
[14:04:41] <moon-child> yes
[14:04:56] <beach> So usually, you go with the conservative approximation.
[14:05:56] <moon-child> if you would like a high-quality conservative implementation of immutability, haskell is probably a better choice than cl
[14:06:09] <moon-child> (or perhaps coalton)
[14:06:46] *** Quits: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b) (Ping timeout: 246 seconds)
[14:08:40] *** Joins: atgreen (~green@bras-base-toroon0628w-grc-44-142-112-151-129.dsl.bell.ca)
[14:08:49] <moon-child> imo, 'gradual typing' has largely proven itself to be a failure
[14:09:34] <lotuseater> oh damn, the Halting Problem o_O so wait to when quantum computers ship out in hobby editions
[14:10:06] <lotuseater> moon-child: try to guess where both macro ideas come from
[14:10:42] <beach> As I recall, quantum computing doesn't pretend any additional computational power over Turning machines.
[14:11:19] <lotuseater> yes static typing locks one out I learned, not even in prototyping, but could of course by powerful with a good mathematical based type system (so there is no void type)
[14:11:53] <lotuseater> beach: yes and no, in a sense, but as always I can be wrong. We'll see.
[14:12:48] <moon-child> yes; quantum computers are algorithmically faster than traditional computers at certain, but there's nothing they _can_ do that an ordinary turing machine can't
[14:13:04] <beach> Right.
[14:13:11] <moon-child> and the strong form of the church-turing hypothesis says that hypercomputation can't be realised
[14:14:01] <lotuseater> nice
[14:14:58] <lotuseater> even quantum mechanics must follow the rules of logic and mathematics (mostly)
[14:15:03] *** Joins: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b)
[14:16:05] <kakuhen> what's wrong with gradual typing
[14:16:19] *** Quits: Duuqnd (~duuqnd@89-253-114-156.customers.ownit.se) (Read error: Connection reset by peer)
[14:16:35] <kakuhen> i come from a mathematics background so i'm not too acquainted with the wisdom in computer stuff
[14:16:36] <lotuseater> kakuhen: I think he meant not wrong in general, but sometimes a barrier :)
[14:16:37] *** Joins: Duuqnd (~duuqnd@89-253-114-156.customers.ownit.se)
[14:17:18] *** Quits: OlCe (~user@lfbn-nic-1-123-149.w2-15.abo.wanadoo.fr) (Remote host closed the connection)
[14:17:18] <lotuseater> I have a similar background or such intrinsic in other things
[14:17:24] <moon-child> kakuhen: I'm going to bed now, so not going to stick around and chat, but: it devolves into dynamic typing
[14:17:41] <kakuhen> that's a useful summary anyway, thanks!
[14:17:49] <lotuseater> sleep well moon-child, see you
[14:17:57] <moon-child> night
[14:19:18] <lotuseater> are there also some video conferences the next weeks? I saw videos from the Common Lisp study group, they do much topics of interests.
[14:34:00] *** Quits: frgo (~frgo@p200300deef181d003c3efe8a0799d48f.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:34:27] *** Joins: frgo (~frgo@p200300deef181d003c3efe8a0799d48f.dip0.t-ipconnect.de)
[14:44:49] *** Joins: ahc (~ahc@2404:4404:1f5a:f800:68e0:44af:a1fa:2144)
[14:45:09] *** Quits: ahc (~ahc@2404:4404:1f5a:f800:68e0:44af:a1fa:2144) (Quit: Client closed)
[14:48:17] *** Joins: OlCe (~user@lfbn-nic-1-123-149.w2-15.abo.wanadoo.fr)
[14:53:00] *** Joins: tyson2 (~user@70.54.112.49)
[14:57:17] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[15:03:56] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[15:06:28] *** Joins: silasfox (~sbv@165.56.184.21)
[15:07:00] *** Joins: derelict (~derelict@user/derelict)
[15:11:03] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 240 seconds)
[15:20:31] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 268 seconds)
[15:20:39] *** Joins: amb007 (~a_bakic@120.146.204.77.rev.sfr.net)
[15:20:54] *** Quits: silasfox (~sbv@165.56.184.21) (Ping timeout: 265 seconds)
[15:24:58] *** Joins: green__ (~green@bras-base-toroon0628w-grc-44-142-112-151-129.dsl.bell.ca)
[15:27:55] *** Quits: atgreen (~green@bras-base-toroon0628w-grc-44-142-112-151-129.dsl.bell.ca) (Ping timeout: 268 seconds)
[15:31:16] *** Quits: amb007 (~a_bakic@120.146.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[15:32:12] *** Joins: amb007 (~a_bakic@120.146.204.77.rev.sfr.net)
[15:33:04] *** Quits: amb007 (~a_bakic@120.146.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[15:33:24] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:39:04] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[15:42:14] *** Joins: random-nick (~random-ni@87.116.179.136)
[15:43:31] *** Joins: duuqnd_ (~duuqnd@89-253-114-156.customers.ownit.se)
[15:46:07] *** Quits: Duuqnd (~duuqnd@89-253-114-156.customers.ownit.se) (Ping timeout: 240 seconds)
[15:50:57] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[15:51:48] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[16:00:24] *** Quits: duuqnd_ (~duuqnd@89-253-114-156.customers.ownit.se) (Ping timeout: 252 seconds)
[16:00:35] *** Quits: green__ (~green@bras-base-toroon0628w-grc-44-142-112-151-129.dsl.bell.ca) (Ping timeout: 255 seconds)
[16:09:07] *** Joins: Duuqnd (~duuqnd@89-253-114-156.customers.ownit.se)
[16:34:02] *** Joins: lisp123 (~lisp123@5.30.23.247)
[16:37:03] *** Quits: lotuseater (~user@p200300e787091b00387e7f8a32e5e786.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[16:41:07] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 246 seconds)
[16:42:35] *** Quits: tyson2 (~user@70.54.112.49) (Quit: ERC (IRC client for Emacs 27.2))
[16:57:54] *** Joins: Bike (~Glossina@71.69.170.70)
[16:57:55] *** ChanServ sets mode: +o Bike
[17:07:17] *** Joins: green__ (~green@142.112.151.129)
[17:10:40] *** Joins: atgreen (~green@bras-base-toroon0628w-grc-44-142-112-151-129.dsl.bell.ca)
[17:11:54] *** Quits: green__ (~green@142.112.151.129) (Ping timeout: 252 seconds)
[17:13:32] *** Joins: silasfox (~sbv@165.56.184.236)
[17:14:39] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:18:03] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[17:18:43] *** Joins: dsk (~dsk@user/dsk)
[17:19:31] *** Quits: silasfox (~sbv@165.56.184.236) (Remote host closed the connection)
[17:19:53] *** Joins: silasfox (~sbv@165.56.184.236)
[17:22:40] *** Joins: derelict (~derelict@user/derelict)
[17:23:56] *** Quits: atgreen (~green@bras-base-toroon0628w-grc-44-142-112-151-129.dsl.bell.ca) (Ping timeout: 252 seconds)
[17:25:48] *** Quits: silasfox (~sbv@165.56.184.236) (Remote host closed the connection)
[17:26:11] *** Joins: silasfox (~sbv@165.56.184.236)
[17:27:14] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[17:39:36] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:40:01] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:42:04] *** Joins: sixtyfour (~user@2405:201:6:a04c:eaed:c77b:60e8:20a5)
[17:42:52] <sixtyfour> Greetings, I'm having trouble loading cl-png through quicklisp
[17:43:19] <sixtyfour> it says "Symbol "%ARRAY-DATA-VECTOR" not found in the SB-KERNEL package."
[17:43:55] <jackdaniel> sixtyfour: perhaps your sbcl is outdated? (or quicklisp distribution)
[17:44:34] <sixtyfour> jackdaniel: I'm on the latest version of SBCL and quicklisp
[17:44:50] <_death> it uses sbcl internals, which have changed.. so you can (i) work to fix it (ii) switch to a different library (maybe one that doesn't make use of FFI)
[17:44:52] <xach> cl-png needs to be updated. there's an open issue.
[17:46:03] <sixtyfour> Ah I see, I'll try to see if I can hack something together
[17:46:27] <sixtyfour> I wanted to try Anders Hoff's weir library, but it depends on cl-png
[17:49:41] <_death> it looks like it uses cl-png for 16-bpp images and zpng for 8-bpp
[17:51:50] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 240 seconds)
[17:57:06] *** Joins: dsk (~dsk@user/dsk)
[17:57:24] *** Quits: sixtyfour (~user@2405:201:6:a04c:eaed:c77b:60e8:20a5) (Ping timeout: 255 seconds)
[17:57:27] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:09:02] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[18:10:59] *** Quits: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu) (Ping timeout: 268 seconds)
[18:13:57] *** Joins: AnimalClatter (~AnimalCla@208.66.176.26)
[18:14:06] *** Quits: AnimalClatter (~AnimalCla@208.66.176.26) (Client Quit)
[18:14:22] *** Joins: AnimalClatter (~AnimalCla@208.66.176.26)
[18:16:44] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[18:21:05] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[18:22:56] *** Joins: PuercoPop (~user@190.237.88.161)
[18:23:28] *** Joins: francogrex (~user@2a02:a03f:60a9:fd00:ada3:2176:331d:d57c)
[18:24:26] <francogrex> Hi, for learning, I am trying to "optimize" this (and it's not high level optimization), only at the declarations level: https://benchmarksgame-team.pages.debian.net/benchmarksgame/program/pidigits-sbcl-3.html
[18:27:07] <francogrex> a lot of unable to do inline fixnum arithmetic, because of the integer/fixnum thing there
[18:34:02] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[18:35:56] *** Joins: aeth (~aeth@user/aeth)
[18:36:38] <jackdaniel> that only means, that a certain optimization can't happen
[18:36:52] <jackdaniel> if your type is required to be integer then you can't do anything about it
[18:37:15] <jackdaniel> sbcl tells you that if /you could/ guarantee that these integers are fixnums, then it would be able to apply a certain optimization
[18:37:19] <jackdaniel> francogrex: ^
[18:37:58] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:42:24] *** Quits: lisp123 (~lisp123@5.30.23.247) (Client Quit)
[18:45:56] <francogrex> jackdaniel: ok, i am sure i cannot guarantee that the output of the arithmetic operations will be fixnum (actually i can guarantee that they will not be :( )
[18:48:04] <francogrex> i though there would be a way for optimized integer operations without using fixnums
[18:49:57] <jackdaniel> they are optimized
[18:50:07] <jackdaniel> the compiler complains that it can't optimize them *more*
[18:50:49] <aeth> (locally (declare #+sbcl (sb-ext:muffle-conditions sb-ext:compiler-note)) ...)
[18:51:07] <francogrex> ok.
[18:51:18] <aeth> some notes are inherently unfixable, but you probably still want optimized code to be optimized so you can just hide the remaining notes in a LOCALLY
[18:51:21] <francogrex> aeth: isn't that like burying head in the sand?
[18:51:37] <aeth> well, no, sometimes SBCL complains that the problem isn't... an easier to optimize problem
[18:52:04] <aeth> Especially when there's division. Like, thanks, if I was solving a different problem, it would really work out.
[18:52:16] <aeth> (I guess that sort of thing is in hopes that you can factor it by hand or something)
[18:52:41] <aeth> Other times it's because there's a slow path in the code
[18:53:12] <aeth> You could experiment with TYPECASE and having a fast path and a slow path, but the slow path will then always complain (unless moved to a separate function entirely)
[18:56:14] <francogrex> ok i see
[18:59:00] *** Quits: MichaelRaskin (~MichaelRa@ipb21b6221.dynamic.kabel-deutschland.de) (Read error: Connection reset by peer)
[19:02:26] *** Joins: MichaelRaskin (~MichaelRa@ipb21b6221.dynamic.kabel-deutschland.de)
[19:02:26] *** ChanServ sets mode: +o MichaelRaskin
[19:06:24] *** Joins: cage (~cage@dynamic-adsl-78-15-46-179.clienti.tiscali.it)
[19:07:38] <aeth> That being said, depending on the problem, you could make your own "bignum" out of a fixed-size array of numbers that are all known to be of a fixed size and thus fully optimizable. Definitely doable for simpler things (especially if you just want the bits of an integer, or just want to add). Probably not doable if you want to use all of the features of a bignum (writing your own EXPT, division, etc., is
[19:07:44] <aeth> not easy and will be slow)
[19:08:07] <aeth> so it probably doesn't fit that program
[19:08:30] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[19:15:02] *** Joins: zacts (~zacts@user/zacts)
[19:16:30] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:22:53] *** Quits: domovod (~domovod@89.113.143.221) (Ping timeout: 255 seconds)
[19:27:23] *** Quits: francogrex (~user@2a02:a03f:60a9:fd00:ada3:2176:331d:d57c) (Ping timeout: 255 seconds)
[19:30:32] *** Quits: zacts (~zacts@user/zacts) (Quit: zacts)
[19:38:51] <lisp123> I assume I can't have generic functions & functions named by the same symbol in the same package?
[19:39:42] <Bike> a symbol can be bound to at most one global function, if that's what you mean
[19:42:05] <beach> lisp123: What would that mean?  How would the system know which one you refer to when you say (NAME ...)?
[19:43:01] <lisp123> beach: Yeah that's what I was thinking. Was hoping for the system to try the global function after exhausting all generic function options
[19:43:18] <beach> Just define a default method then.
[19:44:06] <beach> ... i.e. a method that does not specialize to any of its parameters.
[19:45:35] <lisp123> So what I have is, an accessor function for a CLOS slot (which from reading online is a generic function), say object-slot-name --> I want to then write a function called object-slow-name to generate the value to populate this slot
[19:46:19] <lisp123> Thanks for your suggestion, that could be very helpful :D (glad I asked)
[19:47:16] <jackdaniel> if you just want to "fix" unbound slots, then define a method slot-unbound
[19:49:33] *** Joins: jhi (sid81469@id-81469.tooting.irccloud.com)
[19:50:28] <lisp123> jackdaniel: thanks, looks useful
[19:52:46] *** Quits: Tomte (~th@p200300db9f0f0f000077e3218755497d.dip0.t-ipconnect.de) (Quit: Leaving)
[19:56:19] <jcowan> pjb: That's why I want to get the Common Lisp in Medley updated to the ANS, so that all those tools *will* be vaailable.  "Develop in Medley, deploy in SBCL!"  Only you can't quite, yet.
[20:11:19] *** Quits: Th30n (~Th30n@cpe-188-252-159-93.zg5.cable.xnet.hr) (Quit: WeeChat 3.2)
[20:18:33] <beach> jcowan: Medley looks like a nice project.  How far along is it?
[20:20:24] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 258 seconds)
[20:24:49] *** Joins: notzmv (~zmv@user/notzmv)
[20:28:36] *** Joins: selwyn (~selwyn@user/selwyn)
[20:32:23] *** Quits: mingus (~jan-magnu@ti0135a400-2471.bb.online.no) (Ping timeout: 255 seconds)
[20:33:04] <beach> jcowan: And, how do you separate the Interlisp and the Common Lisp environments?
[20:35:06] *** Joins: mingus (~jan-magnu@ti0135a400-2471.bb.online.no)
[20:35:32] *** Quits: silasfox (~sbv@165.56.184.236) (Ping timeout: 255 seconds)
[20:43:37] *** Joins: silasfox (~sbv@165.56.184.236)
[20:52:09] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[20:52:45] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[20:56:56] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 255 seconds)
[20:57:10] *** Joins: amb007 (~a_bakic@72.146.204.77.rev.sfr.net)
[20:58:41] <jcowan> Interlisp is in the (slightly magic) IL: package from a CL standpoint.
[20:59:01] <beach> I see.
[21:00:09] <jcowan> e.g. IL: is case-sensitive but all standard symbols are uppercase (you need your CAPS LOCK key)
[21:01:13] <jcowan> Medley will boot and run file, and you can start either a CL or IL REPL.  The main problem with CL is that it is basically CLtL1.  Some work (nobody yet knows how much) was done to add CLtL2 facilities.
[21:01:44] <beach> Ouch.  Yes, I see.  So you might use PCL for CLOS.
[21:01:50] <jcowan> Indeed.
[21:03:24] <jcowan> CL has NLAMBDA (elsewhere known as FEXPR) pseudo-functions, which look like macros to CL; I'm not sure if the reverse is true.  But IL isn't that big a language: the Interlisp teams in the past worked on tooling, not on embiggening the library.
[21:04:22] <beach> I see, so getting full ANSI Common Lisp is a bigger problem than getting the Interlisp environment to work.
[21:05:57] <_death> jcowan: eh, I don't remember needing to upcase when typing e.g., (il:logout)
[21:07:14] <_death> jcowan: ah, I'm guessing it was calling interlisp stuff from CL mode
[21:09:52] *** Quits: silasfox (~sbv@165.56.184.236) (Ping timeout: 252 seconds)
[21:11:54] *** Joins: citizenajb (~citizenaj@216.13.217.230)
[21:23:07] <cheers> beach: How close is SICL to being completed? totally fine if you don’t have an exact estimate
[21:23:29] <cheers> (or an estimate at all, really)
[21:29:43] <cheers> asking because i recall you discouraging someone from using it yet
[21:32:10] *** Joins: silasfox (~sbv@165.56.184.236)
[21:34:46] *** Quits: Posterdati (~posterdat@host-82-49-175-12.retail.telecomitalia.it) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[21:41:59] *** Joins: Posterdati (~posterdat@host-82-49-175-12.retail.telecomitalia.it)
[21:52:14] <jcowan> _death: Yes, in the CL Exec (REPL) you are using the CL readtable instead of the IL readtable.  If you start an IL Exec then nil should not work but NIL will.
[21:59:39] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[22:01:10] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:03:16] *** Quits: amb007 (~a_bakic@72.146.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[22:05:36] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[22:05:41] *** Quits: Colleen (~fermion@supersolid.equilibrium.tymoon.eu) (Excess Flood)
[22:05:55] *** Joins: Colleen (~fermion@supersolid.equilibrium.tymoon.eu)
[22:07:05] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[22:09:21] *** Quits: silasfox (~sbv@165.56.184.236) (Ping timeout: 268 seconds)
[22:11:35] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:14:15] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[22:18:26] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[22:23:27] *** Joins: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu)
[22:45:50] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:46:54] *** Quits: OlCe (~user@lfbn-nic-1-123-149.w2-15.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[22:47:34] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[22:47:49] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[22:49:26] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 240 seconds)
[22:56:33] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[23:30:11] *** Joins: gaqwas (~john@dynamic-077-002-070-022.77.2.pool.telefonica.de)
[23:33:01] <Posterdati> hi
[23:33:25] <Posterdati> please help, how is it possible to simulate a button click on a webpage using drakma?
[23:40:47] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[23:53:07] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[23:53:22] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[23:55:16] *** Joins: nirved (~nirved@gateway/tor-sasl/nirved)
[23:57:03] *** Quits: nirved (~nirved@gateway/tor-sasl/nirved) (Client Quit)
