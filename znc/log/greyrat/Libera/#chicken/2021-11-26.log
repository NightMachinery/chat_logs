[00:01:36] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 245 seconds)
[01:53:26] *** Quits: fantazo (~fantazo@192-164-154-92.hdsl.highway.telekom.at) (Ping timeout: 260 seconds)
[02:08:05] *** Joins: mononote (~mononote@user/mononote)
[03:28:38] *** Joins: s-liao (~s-liao@101.86.101.64)
[03:32:06] *** Quits: clacke (88d96f2df3@knopi.disroot.org) (Remote host closed the connection)
[04:15:30] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[04:26:56] *** Joins: rgherdt_ (~rgherdt@2a02:8109:86c0:d8d:bf:e3eb:91c1:3d71)
[04:31:02] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:b451:65f7:f961:6c1a) (Ping timeout: 240 seconds)
[05:06:10] *** Joins: s-liao (~s-liao@101.86.101.64)
[05:19:14] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 260 seconds)
[05:32:43] *** Joins: skapata (~Skapata@user/skapata)
[06:26:47] *** Quits: ublx (~ublx@user/ublx) (Quit: ublx)
[07:44:36] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[07:49:30] *** Joins: s-liao (~s-liao@101.86.101.64)
[08:03:39] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[08:03:52] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[08:09:52] *** Joins: s-liao (~s-liao@101.86.101.64)
[08:15:23] *** Quits: siiky (~siiky@2001:8a0:ff58:400:2548:4e50:2f92:e5cb) (Ping timeout: 264 seconds)
[08:17:02] *** Joins: siiky (~siiky@2001:8a0:ff7d:dd00:1f5d:a8bd:3bdc:60a8)
[08:18:01] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:39a3:7ca3:e6e3:c6e9)
[08:18:01] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:39a3:7ca3:e6e3:c6e9) (Changing host)
[08:18:01] *** Joins: skapata (~Skapata@user/skapata)
[08:40:48] *** Joins: clacke (88d96f2df3@knopi.disroot.org)
[09:12:39] <littleme[m]> ðŸ™Šyes it does, but it depends on how to use it. it should not to bother u, there is some guys use the clojure (lisp at jvm) to create 3d game.
[09:17:30] <Zipheir> "lisp at jvm"  Not the only JVM Lisp; there's also Kawa Scheme.
[09:22:02] <littleme[m]> yes, but i haven't try it, acutally i'm working on clojure (origin Java project)ðŸ‘» 
[09:35:06] *** Joins: shawnw (~shawn_w@c-73-83-220-73.hsd1.wa.comcast.net)
[09:56:04] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[10:15:41] *** Joins: fantazo (~fantazo@192-164-154-92.hdsl.highway.telekom.at)
[10:42:59] *** Joins: jobol (~jobol@2a01:e34:ee5c:ee50:d6be:d9ff:fea3:db03)
[10:47:17] *** Joins: s-liao (~s-liao@101.86.101.64)
[10:56:20] <vandusen> "freee" pasted "freeeeee" http://paste.call-cc.org/paste?id=abd1c5117bdd740078c33ecdc1548d3731854b08
[10:56:20] <judybot> vandusen: spam abd1c5117bdd740078c33ecdc1548d3731854b08
[10:56:20] <vandusen> judybot: I have deleted 1 paste(s) with hash abd1c5117bdd740078c33ecdc1548d3731854b08 successfully.
[11:03:30] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[11:09:43] *** Joins: s-liao (~s-liao@101.86.101.64)
[11:53:56] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[11:57:39] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 250 seconds)
[11:58:29] <vandusen> "freee" pasted "freeeee" http://paste.call-cc.org/paste?id=ae038776504b3893ee84596fc048d3544ca437f0
[11:58:29] <judybot> vandusen: spam ae038776504b3893ee84596fc048d3544ca437f0
[11:58:30] <vandusen> judybot: I have deleted 1 paste(s) with hash ae038776504b3893ee84596fc048d3544ca437f0 successfully.
[12:10:02] *** Joins: s-liao (~s-liao@101.86.101.83)
[12:23:24] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[12:30:15] *** Quits: s-liao (~s-liao@101.86.101.83) (Quit: Client closed)
[12:30:47] *** Joins: s-liao (~s-liao@101.86.101.83)
[12:40:51] <amazigh> lassi around?
[12:41:06] <amazigh> there is a convo about R7RS large process on #scheme..
[13:17:42] <wasamasa> sjamaan: the last ticket has overlap: https://bugs.call-cc.org/ticket/1736
[13:22:41] <sjamaan> wasamasa: Ah, thanks for pointing that out
[13:23:51] <wasamasa> I did the minimum of digging
[13:26:37] <wasamasa> ah, srfi-46 is in (features)
[13:26:49] <sjamaan> yup, it should be fully supported
[13:26:55] <sjamaan> So it's an actual bug
[13:26:56] <wasamasa> then, yes, some adjustment of the code processing alexpander output would be needed
[13:27:11] <sjamaan> We're not using alexpander
[13:27:14] <wasamasa> huh
[13:27:32] <wasamasa> I must have misunderstood the scheme implementations talk then
[13:27:35] <sjamaan> We use a hacked up copy of syntax-rules we stole from scheme48, IIRC
[13:29:42] <mario-goulart> mangol: ^ (amazigh)
[13:33:17] *** Joins: mononote (~mononote@user/mononote)
[13:37:00] *** Quits: mononote (~mononote@user/mononote) (Remote host closed the connection)
[13:38:56] *** Joins: mononote (~mononote@user/mononote)
[13:41:46] <Bunny351> can someone advise me on free project hosting solutions?
[13:42:08] <Bunny351> sourcehut costs money, and github is not my thing
[13:42:22] <sjamaan> What about gitlab?
[13:42:37] <sjamaan> Or call-cc git hosting
[13:42:37] <Bunny351> is it free and do they require partgicular licenses?
[13:42:58] <sjamaan> Not sure about the licenses, but it is free
[13:43:07] <Bunny351> call-cc? do you think they are open to another project? (fleng)
[13:43:34] <sjamaan> You can always ask on -hackers :)
[13:44:11] <wasamasa> you could use tcc's host
[13:44:21] <wasamasa> tcc-git that is
[13:44:38] <wasamasa> repo.or.cz
[13:46:42] <wasamasa> it has been around forever
[13:48:16] <sjamaan> Or you could self-host with cgit or something
[13:48:21] <sjamaan> It depends on what you need really
[13:48:30] <wasamasa> that reminds me some people want me to document depp, lol
[13:48:41] <sjamaan> :)
[13:49:01] <wasamasa> mind you, it doesn't support configurable default branches
[13:49:10] <wasamasa> it always assumes master
[13:49:28] <wasamasa> doesn't expose branches either
[13:50:14] <Bunny351> oh, I don't need much. mailing list or a forum or something is fine.
[13:50:53] <sjamaan> Those aren't really offered by git hosters, like the "forges" of old
[13:50:56] <Bunny351> but I'll check out repo.or.cz and gitlab, thanks!
[13:51:45] <Bunny351> I tried savannah, but they are bickering ("We require that packages give our work due credit")
[13:51:59] <Bunny351> we never had that with chicken, funnily enough.
[13:52:11] <sjamaan> We just got there early enough I guess
[13:52:14] <mario-goulart> Mailing list hosts can be hard to find.
[13:52:18] <sjamaan> I noticed the other day that gna is no longer
[13:58:14] <Bunny351> anybody tried codeberg?
[13:59:13] * mario-goulart had never heard of that
[13:59:51] <fantazo> Bunny351: some people I know played with codeberg, seems to be "good enough"
[14:00:43] *** Quits: s-liao (~s-liao@101.86.101.83) (Quit: Ping timeout (120 seconds))
[14:00:54] *** Joins: s-liao (~s-liao@101.86.101.83)
[14:01:02] <Bunny351> either mailing list or issue tracker, just something to collaborate and give people a chance to report bugs
[14:15:10] *** Quits: s-liao (~s-liao@101.86.101.83) (Quit: Client closed)
[14:22:15] *** Joins: s-liao (~s-liao@101.86.101.83)
[14:37:42] *** Quits: s-liao (~s-liao@101.86.101.83) (Ping timeout: 256 seconds)
[14:38:34] *** Joins: s-liao (~s-liao@101.86.101.83)
[14:53:00] *** Quits: s-liao (~s-liao@101.86.101.83) (Ping timeout: 256 seconds)
[15:18:28] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[15:18:48] *** Joins: greyrat_ (~greyrat@ip202.ip-51-178-215.eu)
[15:19:11] *** Joins: Techcable_ (~Techcable@168.235.93.147)
[15:20:16] *** Server sets mode: +nt 
[15:20:52] *** Joins: dstolfa_ (~ds815@13.92.227.3)
[15:20:59] *** Joins: Zipheir_ (~wcm@98.4.178.27)
[15:21:09] *** Joins: Nilium_ (~sid200856@p01.sfo2.do.x.spiff.io)
[15:21:11] *** Joins: gahr_ (~gahr@user/gahr)
[15:21:19] *** Joins: pie__ (~pie_bnc@user/pie/x-2818909)
[15:25:59] *** Quits: Lulu (~meow@vyos/developer/Lulu) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: dstolfa (~ds815@13.92.227.3) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: vandusen (~nobody@static.131.93.47.78.clients.your-server.de) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: clacke (88d96f2df3@knopi.disroot.org) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: Zipheir (~wcm@98.4.178.27) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: brettgilio (~brettgili@x-node.gq) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: mario-goulart (~user@chicken/developer/mario-goulart) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: gahr (~gahr@user/gahr) (Ping timeout: 260 seconds)
[15:26:01] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 260 seconds)
[15:26:01] *** Quits: micro (~micro@user/micro) (Ping timeout: 260 seconds)
[15:26:01] *** Quits: Nilium (~sid200856@p01.sfo2.do.x.spiff.io) (Ping timeout: 260 seconds)
[15:26:01] *** Quits: pie_ (~pie_bnc@user/pie/x-2818909) (Ping timeout: 260 seconds)
[15:26:01] *** brettgilio3 is now known as brettgilio
[15:26:02] *** Nilium_ is now known as Nilium
[15:26:17] *** Joins: micro (~micro@user/micro)
[15:33:37] *** gahr_ is now known as gahr
[15:51:05] *** Quits: Corbin (~Corbin@c-73-67-140-116.hsd1.or.comcast.net) (Ping timeout: 268 seconds)
[16:48:11] *** Joins: s-liao (~s-liao@101.86.101.83)
[16:50:24] *** Joins: ublx (~ublx@user/ublx)
[17:02:05] *** Quits: s-liao (~s-liao@101.86.101.83) (Quit: Ping timeout (120 seconds))
[17:02:16] *** Joins: s-liao (~s-liao@101.86.101.83)
[17:58:52] *** Quits: s-liao (~s-liao@101.86.101.83) (Ping timeout: 256 seconds)
[18:04:46] *** Joins: s-liao (~s-liao@101.86.101.83)
[18:17:42] *** Quits: s-liao (~s-liao@101.86.101.83) (Quit: Client closed)
[18:33:38] *** dstolfa_ is now known as dstolfa
[18:44:27] *** Quits: mdhughes (~mdhughes@user/mdhughes) (Quit: Returning to Simulacron-1)
[18:46:44] *** Joins: mdhughes (~mdhughes@user/mdhughes)
[19:32:04] *** Joins: Corbin (~Corbin@c-73-67-140-116.hsd1.or.comcast.net)
[20:12:25] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:cd5:9ac7:cfa0:7cce)
[20:12:25] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:cd5:9ac7:cfa0:7cce) (Changing host)
[20:12:25] *** Joins: skapata (~Skapata@user/skapata)
[20:38:51] <mangol> amazigh: thanks for the R7RS tip. i'm catching up at the end of http://gmw.xen.prgmr.com/irc-logs/%23scheme.log -- good comments
[20:47:55] <mangol> IMHO it's obvious that Scheme needs both a set-in-stone standard (for core stuff) and a living standard (for non-core stuff)
[20:48:34] <mangol> the word "standard" in "living standard" should be interpreted very loosely
[20:50:34] <mangol> i agree with the RnRS comments made on #scheme today; have suggested detailed improvements to RnRS process (which were denied); and continue to suggest the fledgling Scheme Live for the living standard
[20:55:32] <mangol> AFAICT the fundamental reason why R7RS-large process is the way it is right now, is democracy (implemented by voting). as long as the process keeps its democratic foundation, we'll keep getting results like we're now getting
[20:56:31] <mangol> crucially, the scope of the standard is also to be decided by voting
[20:57:14] <mangol> not only the specific ways in which the features-in-scope are done
[20:58:17] *** Zipheir_ is now known as Zipheir
[20:59:11] <mangol> that means 10 voters can have 10 different ideas about what's in scope for RnRS, and the scope of the finalized standard will be some perturbation of that set of opinions
[21:02:04] <Zipheir> It may be hard to implement a bazaar when we're talking about a standard, but then, cathedrals like R6RS made some people unhappy.
[21:03:30] <mangol> R5RS was the last RnRS that stuck to programming-in-the-small. that means it can be like a jewel. R6RS and R7RS also address programming-in-the-large, and it's not possible to tackle that kind of scope without making some people unhappy
[21:04:36] <mangol> IMHO the bazaar mentality is a perfect fit for a living standard, and a living standard is a perfect fit for non-core stuff
[21:04:58] <mangol> RnRS made by cathedral mentality is a good fit for core stuff
[21:06:34] <mangol> RnRS = core = implementers' playground; living standard = non-core = users' playground
[21:07:21] <Bunny351> "living" standards are no standards at all
[21:07:39] <mangol> IMHO a standard is anything lots of people use
[21:08:13] <Bunny351> a standard is a baseline, something to rely on
[21:08:41] <Zipheir> ^
[21:09:01] <mangol> well, we can stop calling the living standard a standard if that makes it easier to communicate :)
[21:09:16] <mangol> AFAIK no-one has proposed turning RnRS itself into a living standard
[21:09:30] <Bunny351> thank god
[21:10:36] <Bunny351> provide a non-core-stuff library that is so good that every implementation uses it, and you have what you want
[21:11:05] <mangol> that's exactly what i proposed we'd try to make with Scheme Live
[21:11:09] <Bunny351> you don't need a "standard" or something that "lives", just provide quality and portability and everybody will join in
[21:11:15] <mangol> yes
[21:11:27] <Bunny351> cool, then... make it ;-)
[21:11:44] <mangol> and RnRS should be something conservative that provides enough stuff to make it easy for the user community to write the portable stuff
[21:11:50] <mangol> but not much more
[21:12:36] <amazigh> my thoughts, Bunny351 comments included.
[21:12:41] <Bunny351> it tries to.
[21:13:03] <Bunny351> the problem is that all attempts at comprehensive portable scheme libs die at some stage
[21:13:20] <Bunny351> just declaring them a "standard" doesn't change anything.
[21:13:59] <mangol> ok, using the word "standard" for those libs clearly confuses everybody
[21:14:05] <mangol> so let's excise it :p
[21:14:15] <amazigh> agreed
[21:14:27] <mangol> i agree that the whole problem is to get an initial group of people together
[21:14:37] <mangol> writing code is not the problem
[21:14:37] <Bunny351> schemers are bitchy, they will complain all the time, so it is too unrewarding
[21:14:42] <mangol> yep
[21:14:44] <Bunny351> oh, it is.
[21:14:57] <Bunny351> portable, efficient, it's terribly hard
[21:15:03] <mangol> 5 schemers have at least 6 opinions on how to do any given thing :)
[21:15:09] <Bunny351> while all the time people will nag and complain
[21:15:09] <amazigh> (on my side, regarding scheme-live, outside the problem of actually coding, the problem is I wonder whether kernel lang is not better than scheme)
[21:15:26] <Bunny351> vandusen: AAAAAHHHH!
[21:15:36] <amazigh> ?
[21:15:45] <mangol> is Kernel the one with first class macros?
[21:15:51] <amazigh> yes
[21:15:56] <Bunny351> kernel is funky, really interesting.
[21:15:59] <amazigh> they are also called f-exprs
[21:16:14] <Bunny351> but it is probably the ugliest lisp that exists
[21:16:25] <amazigh> Many things were AFAIU taken from kernel, like continuation attachements.
[21:16:33] <amazigh> Bunny351: why ugly it is?
[21:16:50] <Bunny351> syntax, mostly
[21:16:53] <mangol> "portable, efficient, it's terribly hard" --> we have good code already: there are about 5-10 library collections that are basically subsets of the proposed Scheme Live, but all of them written by 1 person who lost interest
[21:17:02] <amazigh> I mean continuation attachement are also in kernel, I did not fact check the origin of the idea.
[21:17:08] <Bunny351> and the unfamiliar terminology doesn't help
[21:17:42] <Bunny351> too much abstract hocus pocus for concepts that are (partially) very old and well known in Lisp
[21:17:42] <amazigh> yes about the terminology. Tho, that is superficial, those are new concepts, hence requires new wording.
[21:17:54] <amazigh> you'd prefer to call those f-expr?
[21:18:03] <Bunny351> not fexprs, I'd say. LISP 1.5 had them
[21:18:40] <amazigh> I wonder why they write static scoping, instead of lexical scoping :thinking-face:
[21:19:18] <amazigh> mangol: what would be the purpose of the SRFI process, if scheme live reach some users?
[21:19:54] <amazigh> I mean, let's say scheme live is a living set of stable libraries that are fast and portable; what would be SRFI?
[21:20:27] <Bunny351> well, I wish you good luck, anyway
[21:20:41] <amazigh> ^^'
[21:20:57] <amazigh> In the first place, what is the purpose or goal of portable code?
[21:21:06] <Zipheir> amazigh: What would Scheme Live be with the SRFI process that's been in place for 20+ years?
[21:21:16] <amazigh> yes
[21:21:20] <Zipheir> One of these things is established already.
[21:22:13] <mangol> it's clear that SRFI is too rigorous for most stuff
[21:22:22] <mangol> not tolerant enough of mistakes
[21:22:23] <amazigh> Like I said, previously, we should amend the SRFI process to require programmtic tests, CI, and at 3 scheme running it.
[21:22:31] <mangol> and SRFI isn't a good medium for sketching
[21:22:56] <Zipheir> No, it's not.  But then, why is a process needed for sketching?
[21:23:33] <mangol> the word "sketching" inherently implies a process. i claim that a 3- or 5-person process is often better than a 1-person process
[21:23:36] <Zipheir> We have public repositories.  That's pretty much all the infrastructure one needs for making libraries.
[21:24:07] <mangol> the key is how to get people's attention
[21:24:14] <Zipheir> Make good libraries?
[21:24:54] <mangol> SRFI is great at that, and people do good sketching on the SRFI lists. but the process takes too much time for SRFI (which are supposed to be finalized in 90 days)
[21:25:05] <Zipheir> Part of the challenge with getting people's attention is that Scheme is obscure, at the moment.  So "people" will be a small set, in any case.
[21:25:24] <mangol> obscurity is not as much of a problem as trust IMHO
[21:25:37] <amazigh> how so?
[21:25:40] <Zipheir> Trust?
[21:26:04] <mangol> one way or another, the Scheme community has got itself into a state where no-one trusts any code, document, or process that isn't already established
[21:26:13] <Zipheir> Citation needed!
[21:26:32] <amazigh> well, see the various scheme repo here and there that are ghost towns.
[21:26:34] <mangol> by distrust, i don't mean hostility, but something closer to apathy or discouragement
[21:26:39] <Zipheir> I can't say that's been my experience with Schemers.
[21:27:04] <amazigh> I never received contributions on ruse (except bug report)
[21:27:11] <mangol> we probably define trust differently. i measure it by commitment.
[21:27:12] <amazigh> (and only one)
[21:27:13] <Zipheir> Because there's not a lot going on with the language right now, I guess.
[21:27:32] <mangol> there is, but schemers are individualistic explorers
[21:27:40] <Zipheir> And that.
[21:27:52] <amazigh> I too agree with that.
[21:28:04] <Zipheir> The curse of lisp strikes.
[21:28:08] <mangol> haskell people are also explorers, but they don't seem particularly individualistic
[21:28:28] <amazigh> (or and one contrib on srfi-167)
[21:28:53] <mangol> ^ that's exactly what i mean. no-one commits to work on other people's projects
[21:28:54] <Zipheir> The "rest of the functional world" (in which I include the Racket community) is overall more concerted in their view, for better or worse, I think.
[21:29:05] <amazigh> concerted?
[21:29:12] <amazigh> like they gather to discuss stuff?
[21:29:30] <Zipheir> "thinking in the same directions"
[21:29:54] <mangol> yep. disagreement is basically a sport in the Scheme community :p
[21:30:40] <Zipheir> Certain things happened in the FP community to unify their positions in some ways, I guess.  Lispers never had a moment like that.
[21:30:45] <amazigh> What would be the goal of any agreement?
[21:30:56] <Zipheir> To be able to work together productively.
[21:30:58] <mangol> lots of people using and improving the same codebase
[21:31:06] <amazigh> Haskell and Racket have a different situation both software wise, and economical wise.
[21:31:29] <mangol> yep. money solves some problems, and causes other problems
[21:31:30] <amazigh> e.g. more people on SRFI discussion?
[21:31:59] <mangol> yes. but a SRFI should be finalized in 90 days. we're massively abusing the process
[21:32:19] <mangol> and that's one reason everyone is so tired
[21:32:47] <amazigh> til
[21:33:08] <amazigh> MNW could have waited to send massive SRFI at once.
[21:33:11] <Zipheir> And those with energy/time exert a lot of influence on the SRFIs that are finished...
[21:33:35] <amazigh> what does that mean?
[21:33:55] <mangol> the fundamental problem is that consistently doing good work within the SRFI process constraints is inhumanly difficult
[21:34:03] <amazigh> what do they do to SRFIs that are finished? Use them?
[21:34:07] <mangol> that's not solved by adding or removing people, or inviting different people
[21:34:39] <Zipheir> amazigh: I mean, since there aren't a lot of contributors, someone like MNW who has strong opinions and usually voices them has a lot of sway.
[21:34:55] <mangol> SRFI should mainly be used to put the finishing touches on designs that have already been implemented *and* used for some time
[21:35:02] <Zipheir> (I absolutely appreciate his input, to be clear.)
[21:35:13] <amazigh> (me too)
[21:35:29] <amazigh> (but maybe it is too much to have 3 or 4 SRFIs at once)
[21:35:48] <Zipheir> There were 6 or 7 going at once earlier this year.
[21:35:51] <mangol> Marc contribute to SRFI because it's the process we have, not necessarily because it's the best process
[21:36:02] <mangol> same with RnRS
[21:36:25] <mangol> the way SRFI works is that people send email on proposals which are then finalized, so that's what he does
[21:36:53] <amazigh> did you ask MNW to work on scheme live?
[21:37:27] <mangol> IIRC i did, but he doesn't have time to work on it, at least not before other people get it going
[21:37:36] <amazigh> ok
[21:37:57] <mangol> he does a lot of design around core stuff like macro systems, which are a better fit for RnRS and SRFI than Scheme Live
[21:38:03] <Zipheir> mangol: Here's a different kind of question.  What kind of libraries do you imagine in Scheme Live?
[21:38:06] <amazigh> #true
[21:39:08] <mangol> Zipheir: data structures (the kind that are now going into R7RS-large), file formats, network protocols, FFI wrappers, ...
[21:39:26] <Zipheir> mangol: I mean, one or two very concrete examples.
[21:39:31] <mangol> basically anything that isn't core, and isn't clearly part of some application
[21:40:01] <mangol> well, XML, TCP, TLS, HTTP, IRC
[21:40:20] <mangol> base64, SHA hashes, zip/gzip/bzip/xz
[21:40:42] <Zipheir> Got it.
[21:40:56] <Zipheir> Much like CHICKEN's eggs.
[21:41:00] <mangol> yes
[21:41:27] <mangol> i already copied some code from eggs into it IIRC
[21:42:08] <Zipheir> Great.  Then it's moving.
[21:42:52] <mangol> i believe making Scheme Live succeed is a realistic goal if we have on average 5 people per month committing code
[21:43:10] <amazigh> what about the versioning ? Is there still a library like (live 2021 my-lib) thing?
[21:43:22] <mangol> yes, that's the plan
[21:45:56] <mangol> i still can't think of a better way to balance API stability with the ability to fix design mistakes later
[21:46:29] <mangol> SRFI has perfect API stability, but no way to fix mistakes (apart from writing a whole new SRFI)
[21:47:18] <mangol> that's why we keep having 100-message email threads where we try to anticipate every use case (and usually fail)
[21:47:22] <amazigh> what is the point of having a yearly namespace? instead of branches?
[21:47:40] <mangol> Scheme library names don't have branching
[21:48:05] <mangol> one should be able to write stuff like (import (live 2021 strings) (live 2022 lists))
[21:48:32] <mangol> i.e. mix and match different years' APIs in the same application
[21:49:24] <mangol> if you have to switch all Live libraries to the next year's version at once, people will have to rewrite a lot of working code -- often for no good reason (to them)
[21:49:55] <amazigh> got it. That is a good reason.
[21:50:16] <mangol> yearly versioning is why core stuff like macro systems should not go into Live. changing core Scheme every year (or mixing different years' versions of core language constructs) causes headachdes
[21:50:51] <amazigh> is there a `testing`, and `unstable` namespace?
[21:51:13] <mangol> yes, there should be an `unstable` namespace which the Live contributors use for bleeding-edge stuff
[21:51:34] <mangol> not sure a separate `testing` namespace adds value. Debian has that, but Debian has 100s of contributors
[21:52:31] <mangol> the R7RS (and R6RS) library system also lets you write stuff like (import (live 2021 strings) (live unstable lists))
[21:52:54] <mangol> or even (import (except (live 2021 strings) foo) (only (live unstable strings) bar))
[21:53:39] <amazigh> what is the channel for scheme live?
[21:53:49] <mangol> so people who write applications and scripts can combine things from different years' APIs with a lot of flexibility
[21:54:02] <mangol> thanks to the good design that went into Scheme's library system
[21:54:15] <mangol> there used to be #scheme-live but it became a ghost town
[21:55:49] <mangol> getting two schemers to work on the same thing is hard :)
[21:56:35] <amazigh> I joined #scheme-live and added it to auto-join.
[21:57:51] <mangol> ok, let's see if we can get more traction this time around :)
[21:59:21] <mangol> IMHO something like Live would also be very valuable for informing the future direction of RnRS. if some part of Live is painful to write, that's where RnRS can probably help
[22:01:02] *** rgherdt_ is now known as rgherdt
[22:04:19] *** mario-go` is now known as mario-goulart
[22:05:24] *** Quits: mario-goulart (~user@static.172.139.76.144.clients.your-server.de) (Changing host)
[22:05:24] *** Joins: mario-goulart (~user@chicken/developer/mario-goulart)
[22:09:33] *** Joins: vandusen (~nobody@static.131.93.47.78.clients.your-server.de)
[22:11:28] <mario-goulart> Am I using a dead Scheme?
[22:13:03] * mario-goulart doesn't know what Scheme Live is and at this point is afraid to ask
[22:15:10] <mangol> mario-goulart: it's yet another Scheme vaporware project :p
[22:15:29] <mangol> we're trying to resurrect it
[22:16:10] <mario-goulart> Is it a Scheme implementation?
[22:16:11] <mangol> "world domination through vaporware" or "portable library collection" is a close-enough elevator pitch
[22:16:37] <mangol> no, only Scheme code and FFI glue
[22:17:16] <mangol> basically like Chicken eggs, but all eggs in one basket (can't resist the pun) and eventually portable
[22:17:21] <mario-goulart> We tried the vapor approach to a a book. The best achievement so far has been the fact that it has stuck to its guns on being vapor.
[22:17:31] <mangol> lol
[22:17:54] <mangol> you can say a lot of trees are saved
[22:18:05] <mario-goulart> That's a good point too.
[22:18:49] <mangol> too modest and environmentally conscious to publish my groundbreaking ideas
[22:19:01] <mario-goulart> Oh, it's an EGG!
[22:19:05] <Zipheir> How can FFI stuff be even remotely portable?
[22:22:10] <amazigh> in the case of chicken, the ffi bits could be eggs
[22:22:28] <amazigh> chicken-install does compile stuff, doesn't it?
[22:23:10] <mario-goulart> Depends on how you see it.  It calls csc, but it's mostly an extension manager.
[22:24:03] <wasamasa> textual FFI
[22:24:10] <wasamasa> very portable
[22:25:06] <rgherdt> wasamasa: what do you mean with textual FFI?
[22:25:16] <Zipheir> wasamasa: You mean a specification?
[22:25:25] <amazigh> There is two kinds of ffi, there is those that require a c compiler (gambit, chicken, cyclone, chibi), and those that do not require a c compiler (chez, guile, ...)
[22:25:45] <amazigh> IDK about ironscheme ffi tho
[22:26:29] <rgherdt> for the latter kind there is some prior work, like the r6rs-ffi project
[22:27:27] <rgherdt> an chicken has lazy-ffi, which as I understand provides a similar interface
[22:28:05] <wasamasa> no, I mean what gtk-server is doing
[22:28:09] <rgherdt> s/r6rs-ffi/r6rs-pffi
[22:29:04] <Zipheir> wasamasa: Can you elaborate?
[22:30:31] <wasamasa> https://depp.brause.cc/gtk-server/examples/demo-stdin.scm
[22:30:58] <mangol> Zipheir: "How can FFI stuff be even remotely portable?" --> cond-expand, and separate egg/package/... wrappers or build scripts for different Scheme implementations
[22:31:07] <wasamasa> you send the name of a foreign procedure and plain old data to a process translating those to FFI calls
[22:31:07] <Zipheir> wasamasa: I don't find that self-explanatory, sorry.
[22:31:25] <Zipheir> Ah.
[22:31:33] <mangol> everything that can be (efficiently) portable code should be. for the rest, just special-case for each implementation, exporting the same API everywhere
[22:31:54] <Zipheir> wasamasa: Yes, I think that's perhaps the only sane approach to FFI that I've yet seen.
[22:31:55] <mangol> brute force solves a lot of problems
[22:32:09] <mangol> that are hard (or slow) to solve otherwise
[22:32:10] <Zipheir> i.e. the client-server model.
[22:32:15] <wasamasa> someone implemented a poc of that for emacs, before the current module FFI was a thing
[22:32:27] <wasamasa> https://github.com/skeeto/elisp-ffi
[22:33:45] <wasamasa> the helper process can use whatever is available on the platform it's running on
[22:33:49] <wasamasa> be it libffi, dyncall, ...
[22:34:04] <wasamasa> gtk-server has plenty of code and examples demonstrating how that can be done
[22:34:13] <wasamasa> that is, the upstream project, not my egg :D
[22:36:04] <Zipheir> I wonder how that could be used as a general strategy for providing access to foreign libraries.  A server for every library?
[22:36:43] <Zipheir> That also creates process management issues which traditional (ugly) library-wrapping FFI doesn't.
[22:37:07] <wasamasa> gtk-server has an extra layer for that
[22:37:41] <wasamasa> you point it to a config file which loads up a library and defines how the library calls map to plain old data types
[22:37:51] <Zipheir> I mean, one could imagine a scheme-foreignd which wraps any and all libraries you've set up for it...
[22:38:10] <Zipheir> Right.
[22:38:18] <wasamasa> it's typically used for gtk, but there's other examples
[22:38:26] <wasamasa> like using cairo or poppler or webkitgtk
[22:39:27] <Zipheir> wasamasa: What would you think of a general form like (foreign-call LIBRARY PROC ARG1 ...) ?
[22:39:29] <wasamasa> this has the benefit that the crashy part is delegated to the config writer
[22:39:52] <wasamasa> and that config can be shipped and shared with other people
[22:40:03] <Zipheir> Also good, IMO.
[22:40:24] <Zipheir> I'm just thinking of how this would look as a generalized Scheme protocol.
[22:41:45] <wasamasa> I think they chose the subprocess/network process solution because pretty much any programming language can interface with that
[22:42:11] <Zipheir> Yes.
[22:42:23] <wasamasa> most of their examples are for bash/ksh
[22:42:33] <Zipheir> It's obviously a cleaner model for interfacing with foreign libraries.
[22:43:35] <wasamasa> the downside is that it's not as fast as an in-process solution
[22:43:40] <wasamasa> but for GUI, who cares
[22:44:28] <Zipheir> It's also something that can be clearly specified as a protocol, without the brain-melting semantic issues of foreign-lambda stuff.
[23:14:59] *** Quits: chicken_m (~chickenru@node-1w7jr9pm4jqalnj5aq2lunyf5.ipv6.telus.net) (Quit: Konversation terminated!)
[23:17:36] *** Joins: chicken_m (~chickenru@node-1w7jr9pm4jqalnj5aq2lunyf5.ipv6.telus.net)
[23:30:40] <mangol> wasamasa: jcowan and i have some ideas for subprocess-based FFI, there has been some discussion of that on #s-expressions
[23:32:03] <mangol> https://elm-lang.org/ also has something that's similar in spirit to subprocess-based FFI, but it's Elm<->JavaScript. they use something they call "ports" (quite similar to Scheme ports) to pass values back and forth
[23:32:34] <mangol> Elm had a direct, non-port-based JS FFI, but they removed it because it caused problems
[23:41:24] <Bunny351> mangol: re. subprocess-based FFI - interesting, are there any details yet?
[23:50:44] <mangol> yes, but mainly in my head
[23:51:02] <Bunny351> I think that is an underappreciated approach
[23:51:19] <mangol> combine "binary S-expressions" and "ML type system" and "unix pipes" and you're not too far off :Ãp
[23:51:27] <mangol> totally agreed!
[23:51:56] <Bunny351> s-expressions are very fast to parse and platform independent! no need for binary, most of the time
[23:52:06] <Bunny351> also endian-neutral
[23:52:10] <mario-goulart> But does it work on Windows?
[23:52:12] * mario-goulart runs
[23:52:19] <mangol> Windows has pipes
[23:52:19] <Bunny351> nothing works on windows
[23:53:33] <mario-goulart> :-D
[23:56:17] <jjhoo> some sort of subprocess can be started with python on windows
[23:56:33] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 250 seconds)
[23:57:21] <Bunny351> yes, chicken.process has something similar
[23:58:26] <mangol> someone should do an equivalent of https://github.com/mTvare6/hello-world.rs for a Hadoop cluster. why limit yourself to only one subprocess?
