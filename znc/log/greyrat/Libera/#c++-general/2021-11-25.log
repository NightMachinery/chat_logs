[00:00:32] *** Joins: CoderCharmander (~CoderChar@20014C4C1256300085DECD4F21A717FC.catv.pool.telekom.hu)
[00:06:44] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Quit: Leaving)
[00:12:53] *** Joins: ahlk (~user@2600:1700:31c0:3a10::43)
[00:13:32] *** Quits: CoderCharmander (~CoderChar@20014C4C1256300085DECD4F21A717FC.catv.pool.telekom.hu) (Remote host closed the connection)
[00:13:40] *** Quits: proller (~p@2a02:6b8:b081:8832::1:f) (Ping timeout: 260 seconds)
[00:15:20] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[00:15:33] *** Joins: CoderCharmander (~CoderChar@20014C4C1256300085DECD4F21A717FC.catv.pool.telekom.hu)
[00:16:14] *** Quits: CoderCharmander (~CoderChar@20014C4C1256300085DECD4F21A717FC.catv.pool.telekom.hu) (Remote host closed the connection)
[00:20:54] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Remote host closed the connection)
[00:22:34] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[00:27:25] *** Joins: proller (~p@2a02:6b8:b081:1207::1:7)
[00:29:30] *** Quits: DrMax_ (~DrMax@132.215.96.36) (Remote host closed the connection)
[00:30:03] *** Joins: DrMax_ (~DrMax@132.215.96.36)
[00:31:00] *** Joins: CoderCharmander (~CoderChar@20014C4C1256300085DECD4F21A717FC.catv.pool.telekom.hu)
[00:31:52] *** Quits: CoderCharmander (~CoderChar@20014C4C1256300085DECD4F21A717FC.catv.pool.telekom.hu) (Remote host closed the connection)
[00:33:15] *** Joins: jkaye (~jkaye@2601:281:8300:7530:2d14:c2ec:d957:4121)
[00:34:12] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 260 seconds)
[00:35:13] *** Quits: SuperNintendoSUX (~sjw@69.206.48.64) (Remote host closed the connection)
[00:36:25] *** Joins: SuperNintendoSUX (~sjw@69.206.48.64)
[00:38:09] <rpav> LordKalma: GammaRay was definitely useful
[00:38:18] <LordKalma> glad you enjoyed it
[00:38:20] <LordKalma> what dd you try?
[00:38:21] <rpav> well
[00:38:36] <rpav> it's .. rough, but useful ;)
[00:38:40] <LordKalma> yeah
[00:39:31] <rpav> but it did "where the hell is this widget coming from" and viewing the hierarchy .. also its "Problems" thing might be useful
[00:39:57] <rpav> i haven't dug into it, but it seems like it might at a glance
[00:40:11] *** Quits: paul424 (~tom@ip-37-248-155-99.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[00:40:30] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[00:41:01] <rpav> but yeah thanks for pointing that out, it wasn't obvious at a glance that it did the things
[00:41:41] <LordKalma> how much of a pita was it to build?
[00:41:52] *** Joins: badone (~badone@209.132.189.136)
[00:42:17] <rpav> i built it the other day and i don't recall having any issues, and it worked when i ran it, so probably not much
[00:43:52] <rpav> here's a Q i would have never thought to ask, but surely this is UB right: `struct S { virtual void f() {} }; struct T : S { virtual void f() = 0; };`
[00:44:06] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:44:45] <rpav> oh wait it's not even virtual wtf
[00:46:01] *** Joins: CoderCharmander (~CoderChar@20014C4C1256300085DECD4F21A717FC.catv.pool.telekom.hu)
[00:46:01] <rpav> struct S { void f() { .. } };   struct T : S { virtual void f() = 0; };
[00:46:40] <rpav> probably not UB, but
[00:47:25] <Alipha> geordi: struct S { void f() {} };   struct T : S { virtual void f() = 0; };
[00:47:25] <geordi> Success
[00:47:43] *** Quits: Tokamak (~Tokamak@172.58.191.55) (Read error: Connection reset by peer)
[00:49:18] <PJBoy> I don't think that would be UB
[00:49:27] <Alipha> rpav: i assume that's well-defined and if you have a S*, then s->f(); will call S::f and no dynamic dispatch is performed. if you have a T* or anything derived from T, then dynamic dispatch is performed with t->f()
[00:49:29] <PJBoy> the derived f hides the base f
[00:49:35] <Alipha> yeah
[00:49:55] <rpav> that, yeah
[00:49:58] <PJBoy> the first example looks sketchy, but also looks like it wouldn't compile
[00:50:12] <PJBoy> geordi: struct S { virtual void f() {} };   struct T : S { virtual void f() = 0; };
[00:50:13] <geordi> Success
[00:50:13] <rpav> it does D:
[00:50:16] <PJBoy> huh
[00:50:27] <PJBoy> geordi: struct S { virtual void f() {} };   struct T : S { void f() override = 0; };
[00:50:28] <geordi> Success
[00:50:31] <PJBoy> TIO
[00:50:34] <PJBoy> *TIL
[00:51:14] <rpav> though it's not like you can validly make an abstract subclass anymore than a base class ðŸ¤”
[00:51:44] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[00:52:06] <rpav> i.e. you can never make an `S* s = &some_t;` _anyway_ .. but i don't think about inheritance things a lot so i'm not sure what other weird cases there might be
[00:53:04] *** Joins: Tokamak (~Tokamak@172.58.191.55)
[00:54:47] *** Quits: CoderCharmander (~CoderChar@20014C4C1256300085DECD4F21A717FC.catv.pool.telekom.hu) (Remote host closed the connection)
[00:58:00] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:01:11] *** Joins: CoderCharmander (~CoderChar@20014C4C1256300085DECD4F21A717FC.catv.pool.telekom.hu)
[01:06:32] *** Quits: CoderCharmander (~CoderChar@20014C4C1256300085DECD4F21A717FC.catv.pool.telekom.hu) (Remote host closed the connection)
[01:09:17] <antto> !rq
[01:09:18] <nolyc> antto: <xkoncek> so basically CSV is the Json of SQL?
[01:09:27] <SuperNintendoSUX> nice one
[01:12:30] *** xShad0w is now known as shad0w
[01:14:14] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[01:16:12] *** Joins: CoderCharmander (~CoderChar@20014C4C1256300085DECD4F21A717FC.catv.pool.telekom.hu)
[01:17:12] <PJBoy> the digital ocean website is garbage
[01:18:22] <PJBoy> two of the three signup forms I tried didn't work
[01:18:49] <PJBoy> clicking things doesn't load new pages, so my clicking of "back" takes me out of the website entirely
[01:20:33] <PJBoy> their forms uses non standard UI, so I can't navigate their dropdowns using the keyboard
[01:20:48] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[01:23:52] <PJBoy> (still better than AWS though)
[01:29:25] *** Quits: magla (~gelignite@55d4df7d.access.ecotel.net) (Quit: Stay safe!)
[01:29:25] *** Joins: mvo (~kvirc@213.146.188.203)
[01:31:30] *** Quits: robod34 (Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:32:29] *** Quits: spaceangel (~spaceange@ip-62-245-71-160.net.upcbroadband.cz) (Read error: Connection reset by peer)
[01:32:47] *** Joins: spaceangel (~spaceange@ip-62-245-71-160.net.upcbroadband.cz)
[01:35:00] *** Quits: spaceangel (~spaceange@ip-62-245-71-160.net.upcbroadband.cz) (Remote host closed the connection)
[01:35:22] *** Joins: spaceangel (~spaceange@ip-62-245-71-160.net.upcbroadband.cz)
[01:36:29] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:36:59] *** Quits: spaceangel (~spaceange@ip-62-245-71-160.net.upcbroadband.cz) (Remote host closed the connection)
[01:37:17] *** Joins: spaceangel (~spaceange@ip-62-245-71-160.net.upcbroadband.cz)
[01:38:32] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:38:41] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:38:41] *** ChanServ sets mode: +v npaperbot
[01:38:59] *** Quits: spaceangel (~spaceange@ip-62-245-71-160.net.upcbroadband.cz) (Read error: Connection reset by peer)
[01:39:17] *** Joins: spaceangel (~spaceange@ip-62-245-71-160.net.upcbroadband.cz)
[01:45:29] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[01:46:20] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 268 seconds)
[01:47:32] <antto> PJBoy, if you're failing to login sometimes things get fixed when you erase some cookies related to the website
[01:48:15] <antto> but you probably knew this
[02:06:30] *** Quits: spaceangel (~spaceange@ip-62-245-71-160.net.upcbroadband.cz) (Remote host closed the connection)
[02:06:47] *** Joins: spaceangel (~spaceange@ip-62-245-71-160.net.upcbroadband.cz)
[02:08:15] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[02:17:48] *** Quits: CoderCharmander (~CoderChar@20014C4C1256300085DECD4F21A717FC.catv.pool.telekom.hu) (Ping timeout: 260 seconds)
[02:18:04] *** Joins: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu)
[02:25:15] *** Quits: spaceangel (~spaceange@ip-62-245-71-160.net.upcbroadband.cz) (Remote host closed the connection)
[02:25:16] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[02:30:21] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[02:36:58] <yolo> just dust off my 8 year old samsung 8GB laptop and updated to win10, slow but usable, run `wsl --install` and it kicks off, wait and see how well integrated with ubuntu it is
[02:37:59] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[02:38:11] <yolo> then install msvc c++ with cmake on window side, along with cloud macos, seems a cross-platform c++ dev env is ready :0
[02:40:26] <yolo> upgrade to 16GB and ssd should speed it up
[02:40:57] <InPhase> Linux host with qemu for the others might give a speedier and more trustworthy base.
[02:41:33] <yolo> i still code in linux, this is set up for parallel build on windows, will use macincloud for macos build
[02:42:45] <yolo> wsl2 might bring me back to windows sometime, at least it's no longer hopelessly useless, but i need try wsl2 more
[02:47:28] *** Joins: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[02:51:45] <PJBoy> antto, it was a failure to sign up rather than log in
[02:55:34] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[02:56:41] *** Quits: jkaye (~jkaye@2601:281:8300:7530:2d14:c2ec:d957:4121) (Ping timeout: 250 seconds)
[02:57:58] <Raziel> yolo, no ssd nowadays is really painful, so yeah, definitely do that
[03:00:43] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:04:03] *** Quits: HvszrStykp (~X@81.171.62.87) (Ping timeout: 264 seconds)
[03:11:38] *** Quits: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu) (Remote host closed the connection)
[03:13:12] <c4017w_> I have a static volatile variable in a class. If I read the variable directly, it is read from memory as expected. But if I try to read it via a simple getter function, it all gets optimized out. static volatile member functions don't exist for some reason, so how can I get around this?
[03:16:41] *** Quits: pa (~pah@user/pah) (Ping timeout: 256 seconds)
[03:18:04] *** Joins: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu)
[03:19:44] <Raziel> why exactly do you want to get around that? :thonk:
[03:19:50] *** Joins: pah (~pah@user/pah)
[03:20:51] <yolo> CMAKE_CXX_STANDARD 17 means gnu++17 on linux, what about windows/macos?
[03:21:34] *** Quits: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Read error: Connection reset by peer)
[03:21:38] <yolo> not abvious at https://cmake.org/cmake/help/latest/manual/cmake-compile-features.7.html
[03:21:52] *** Joins: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[03:22:02] <c4017w_> By optimized out I mean any calls to the functions are straight up removed, I guess because the compiler thinks it always returns the same value
[03:22:04] <Raziel> yolo, well on msvc it should mean /std:c++17 and on clang I imagine it means either -std=c++17 or gnu++17
[03:22:14] <Raziel> it seems odd that it would default to extensions on though v:
[03:23:46] <Raziel> c4017w_, have you actually tested that between modifications of said value to see if it does return the same value or not?
[03:24:28] <c4017w_> Raziel, yes, I verified the value is updated by an interrupt routine
[03:24:51] <yolo> also try disable -O flags or just -Og and see if changes
[03:25:18] <c4017w_> I'm sure it works without optimization, but I need to leave it on
[03:25:21] <Raziel> yolo, on msvc, ms' extensions do default to on regardless of C++ std, and there's a different flag, /Za, to turn them off
[03:25:22] <yolo> to prove if it's optimization related
[03:27:15] <c4017w_> yolo, unfortunately I run out of code space if I turn off optimizations, so can't test that
[03:29:04] <yolo> __attribute__((optimize("O0")))  -- put this on that specific method, to only turn off optimization for it
[03:29:56] <yolo> #pragma GCC push_options  #pragma GCC optimize ("O0")  your method code, then: #pragma GCC pop_options
[03:29:58] <yolo> might also help
[03:30:22] <c4017w_> good idea
[03:30:51] <yolo> nomrally read from a register should not be in critical path anyways, so turning off optimization there should not hurt much if anything
[03:31:43] <yolo> void __attribute__((optimize("O0"))) foo(unsigned char data) {}
[03:35:21] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[03:35:45] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:1c81:fe4:5f02:4108) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[03:36:57] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[03:37:21] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[03:37:38] <c4017w_> wtf now I can't even reproduce it... I just rebuilt and it's no longer being optimized out
[03:37:39] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[03:39:37] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[03:39:38] *** Quits: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Read error: Connection reset by peer)
[03:39:56] *** Joins: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[03:45:34] <Alipha> c4017w_: indeed, the compiler shouldn't be optimizing it out, so i was skeptical of your claim that it was. though if you're invoking UB around where the call to the getter is, then it's possible the UB could cause the compiler to perform some unexpected optimizations
[03:45:38] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:74e4:7444:277a:aa09)
[03:46:27] <c4017w_> I think I know what happened
[03:46:37] <c4017w_> not sure how/why it happened though
[03:47:21] <Raziel> errr, is there any way to check if a std::function does indeed point to a specific function? if(myCallback == MyCallbackFunction) does not seem to work
[03:47:47] <c4017w_> so originally the variable was not volatile. Then I changed to to volatile and did a build, but this did not rbuild files which used the getter function for some reason
[03:48:07] <c4017w_> so it was still optimized out in those files (as it wasn't volatile originally)
[03:48:27] <yolo> sounds like a make dependency issue?
[03:48:54] <c4017w_> Maybe because my getter function in inline in the header? idk
[03:49:35] <c4017w_> I'm using cmake. idk what I could change to cause a dependancy issue
[03:50:47] <Raziel> in fact cppreference does say == on a std::function can only compare with nullptr, but, that doesn't help my current usecase...
[03:51:55] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:74e4:7444:277a:aa09) (Quit: Leaving)
[03:53:08] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:f554:579b:6bae:f8f1)
[03:54:00] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:f554:579b:6bae:f8f1) (Client Quit)
[03:54:16] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:f554:579b:6bae:f8f1)
[03:56:25] <Raziel> welp, guess an extra bool in my state machine is in order
[03:56:40] <Raziel> would be nice to be able to do that with a std::function in the future
[03:56:46] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:57:41] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 268 seconds)
[04:00:23] *** Quits: Guest37_ (~textual@124.168.255.30) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[04:04:43] *** Quits: mvo (~kvirc@213.146.188.203) (Ping timeout: 250 seconds)
[04:05:27] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:f554:579b:6bae:f8f1) (Quit: Leaving)
[04:06:40] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:f554:579b:6bae:f8f1)
[04:08:29] *** Joins: Guest37_ (~textual@124.168.255.30)
[04:08:30] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:f554:579b:6bae:f8f1) (Client Quit)
[04:09:46] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:f554:579b:6bae:f8f1)
[04:13:09] *** Joins: skgorg (~skgorg@bras-base-toroon0628w-grc-56-174-95-83-229.dsl.bell.ca)
[04:13:09] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:17:28] *** Quits: Guest37_ (~textual@124.168.255.30) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[04:24:45] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[04:25:27] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[04:27:38] *** Quits: TheSchaf (~TheSchaf@pd95f12cf.dip0.t-ipconnect.de) ()
[04:30:01] <yolo> after mingw64 builds on windows, when I run the program, does it using libraries from mingw64 or windows's native libraries?
[04:31:12] *** Joins: JeffH (~JeffH@174-16-133-53.hlrn.qwest.net)
[04:32:37] <Stryyker> or both!
[04:32:52] *** Quits: m_tadeu (~quassel@bl5-182-86.dsl.telepac.pt) (Ping timeout: 265 seconds)
[04:33:33] *** Joins: m_tadeu (~quassel@bl5-182-86.dsl.telepac.pt)
[04:33:55] <yolo> so the user will have to install mingw64 before run the program, not nice
[04:34:19] <yolo> all gcc-to-windows use really old gcc version, except for msys2
[04:34:58] <yolo> i will just use msvc then, ignore all these linux-window-hybrid tools
[04:35:31] <yolo> used to work with embedded linux and careless about win/mac, now suddenly i need all 3, what a change
[04:36:42] <Raziel> yolo, mingw probably uses static libs? so people won't actually have to install mingw to run a binary
[04:37:35] <yolo> Raziel: most likely yes, i.e. mingw specific code is linked in statically, while using windows dll for native libraries need
[04:38:15] <yolo> also likely WLS2 will render these hybrid tool/packages less important
[04:38:20] *** Quits: JeffH (~JeffH@174-16-133-53.hlrn.qwest.net) (Remote host closed the connection)
[04:38:22] <Raziel> either way, if you do want to treat windows as a first-class citizen rather than an afterthought, yes, use msvc :p
[04:42:42] <yolo> for c++ I actually have clion license, clion probably can use both win/macos's native libraries and compilers.
[04:43:51] <Raziel> it does, yes
[04:44:01] <Raziel> it can use the msvc toolset on windows
[04:44:14] <yolo> yes, reading that
[04:44:23] <yolo> also going to read how does that pane out on macos
[04:44:55] <Raziel> you obviously still need to be on windows and have an msvc toolset installed, but :p
[04:45:01] <yolo> though i use vim 99% of the time as embedded stuff does not really need much IDE, now I think I need change
[04:45:23] <Raziel> for embedded stuff that's fair, yeah, the IDE niceties don't help as much there
[04:45:48] <yolo> idea is to develop on linux, but build/test on macos/windows in parallel, so yes I need IDE set up on win/macos before my helloworld is written
[04:46:19] *** Joins: ferdna (~ferdna@user/ferdna)
[04:46:33] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[04:46:42] *** Joins: JeffH (~JeffH@174-16-133-53.hlrn.qwest.net)
[04:46:46] <Raziel> well if you've got clion you can use that on all platforms for a nice mostly-identical workflow at least
[04:47:52] <yolo> was a makefile guy now cmake becomes essential :)
[04:49:01] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[04:49:02] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 240 seconds)
[04:49:14] <Raziel> cmake is far from perfect but at least you can get it to work in an actual multiplatform way without wanting to hammer your own nuts, so yeah
[04:49:25] *** Quits: JeffH (~JeffH@174-16-133-53.hlrn.qwest.net) (Remote host closed the connection)
[04:50:34] *** Quits: AmR| (~AmREiSa@102.47.62.197) (Quit: Konversation terminated!)
[04:50:51] *** Joins: JeffH (~JeffH@174-16-133-53.hlrn.qwest.net)
[04:51:17] *** Quits: JeffH (~JeffH@174-16-133-53.hlrn.qwest.net) (Remote host closed the connection)
[04:52:03] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[04:52:52] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:f554:579b:6bae:f8f1) (Quit: Leaving)
[04:58:10] <Raziel> and as an aside, I don't consider the "linux-shit-on-windows" an *actual* multiplatform way of getting your shit to run on windows, much as I don't consider wine or proton an *actual* multiplatform way of getting your shit to run on linux
[04:58:48] <Raziel> but people refuse to write actual multiplatform code, so here we are :p
[04:59:18] <yolo> msys2 has like 2400 pkgs, e.g. gimp to run on windows, yes it's ugly but still useful when you just need download and use
[04:59:21] *** Quits: BucetaPeluda (~istupy@2620:0:1003:206:b703:2de6:ec2c:37bf) (Ping timeout: 268 seconds)
[05:01:00] <Raziel> it's definitely useful, yes, but I'd rather people coded multiplatform shit properly rather than using msys/mingw as an excuse for "eh my linux shit will run anyway I dun need to do jack". same for the similar situation of especially game devs only writing for windows and relying on wine/proton on linux
[05:03:41] *** Quits: skgorg (~skgorg@bras-base-toroon0628w-grc-56-174-95-83-229.dsl.bell.ca) (Quit: WeeChat 3.3)
[05:04:55] <yolo> that's exactly what I'm trying to avoid, and it's not that easy, e.g I need set up 3 OSes' build env, also  there are quite a lot details on the os-compatible-layer code I foresee
[05:05:35] <yolo> then I need 3 GUIs(windows,macos, gtk) for the 3 OSes, no wonder electron is popular
[05:05:36] <Raziel> it's definitely not that easy. for most things there are good multiplatform libs to use, but the initial setup for building/testing can be a pain, yeah
[05:06:54] <Raziel> the multiplat gui situation is quite shitty, overall, unfortunately. you get the web-based shit, you get Qt, and... that's about it for serious stuff. I hope microsoft actually gets a good multiplatform gui going v:
[05:07:32] *** Joins: Guest37_ (~textual@124.168.255.30)
[05:07:38] <Raziel> obviously you *can* code different guis using the native stuff for each platform, but who has time for that?
[05:09:22] *** Joins: HvszrStykp (~X@81.171.62.87)
[05:09:30] <Raziel> I can't blame people for using electron if that's apparently the only alternative
[05:10:21] <yolo> i see 3 approaches for cross-platform GUIs(without using Qt/gtkmm the framework): 1. a cross-platform c++ libraries with GUI from 3 OSes on top, native looking, but time consuming plus you need be familiar with 3 OSes/IDEs/etc.  2. electron or the alike  3. a daemon(c++) with http interface then you use browser to interact with it, it's kind in the middle of electron(smaller size) and approache 1(easier
[05:10:23] *** Joins: BucetaPeluda (~istupy@2620:0:1003:206:9819:cc89:d061:6815)
[05:10:27] <yolo> GUI, as browser is truly cross platform for UI)
[05:11:05] <Raziel> right, since when you're talking true multiplatform nowadays, a lot of apps have to also deal with mobile and browser, not just desktop
[05:11:43] *** Quits: Tokamak (~Tokamak@172.58.191.55) (Ping timeout: 256 seconds)
[05:12:35] <Raziel> browser alone does run on any platform in theory, but it is really shitty for any serious desktop use, generally.
[05:12:42] <yolo> exactly, in that case we have ionic, reactive native, etc, each one needs time to get good at. but option 3 will work for them: a simple c++ library wrapped in ios/android apps, once installed you have a local port for your browser to interact with, with PWA it's not that bad actually
[05:13:45] <yolo> i would say browser can handle 95% of the UI use cases unless it's really professional class and complicated
[05:14:06] *** Joins: Tokamak (~Tokamak@172.58.191.55)
[05:14:08] <Raziel> if you only do the ui in browser then yeah, it can work for most things
[05:14:23] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[05:15:38] <yolo> if your html/css/js UI does not need lots of the modern features, ideally a light-weight browser can serve as UI as well, to avoid chrome/firefox the big guns
[05:15:56] <yolo> even w3m/lynx might do actually
[05:17:09] <yolo> i might as well just use the browser as UI as I don't think I have time to play with windows and macos UI coding anyways, but I do know js
[05:17:55] *** Joins: Miyu (~hackkitte@94.31.103.136)
[05:20:00] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[05:21:23] *** Quits: hackkitten (~hackkitte@158-139-100-005.ip-addr.inexio.net) (Ping timeout: 264 seconds)
[05:24:10] *** Quits: Tokamak (~Tokamak@172.58.191.55) (Read error: Connection reset by peer)
[05:25:38] *** Joins: Tokamak (~Tokamak@172.58.191.55)
[05:30:23] *** Quits: taiyu (~taiyu@user/taiyu) (Ping timeout: 264 seconds)
[05:38:16] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[05:38:33] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:38:41] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:38:41] *** ChanServ sets mode: +v npaperbot
[05:40:37] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[05:41:58] <kalven> there's https://tauri.studio/en/ as a lighter weight alternative to electron
[05:46:14] <yolo> kalven: checked it before and just checked it again, 1. it's rust, and it will take a while to master, in my brain rust and c++ together cause overflow, so I will stick to c++. 2. it uses libwebkit2gtk on linux, which is actually quite heavy when running, close to chrome per my previous tests
[05:47:21] *** Quits: Guest37_ (~textual@124.168.255.30) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[05:47:50] <yolo> option3 above is basically use browser directly instead of embedding it into my application, most users need browser open anyways, the cost is just a tab
[05:48:37] <yolo> not as pretty as electron's "everything-included", but it's cheap and quick to make
[05:48:54] <kalven> cheap how?
[05:49:39] <yolo> cheap means resource-light, and easy to make(js for the browser, backend in c++), and due to browser, truly cross-platform for UI
[05:50:35] <yolo> i'm right now building a mvp in openssl/json-rpc/c++ with a simple js frontend, will test them in 3 OSes and see how quick I can get it to run
[05:51:20] <kalven> why would that tab be cheaper than any of the other web views? :)
[05:51:22] <yolo> using cpp-httplib and json-rpc-cxx from github
[05:52:39] <yolo> a tab is about 100MB, on top of your already running chrome/firefox. libwebkit spawns a few child processes to render any html/js, in my test, that library will take the whole RAM etc just like a chrome, around 1GB per my previous test
[05:53:43] <yolo> write a hellowork with libwebkit I saw it eats big chunk of memory, it's pretty much the blink monster called webkit
[05:55:24] *** Quits: jehelset (~jeh@ti0005q162-7332.bb.online.no) (Remote host closed the connection)
[05:58:41] *** Joins: jehelset (~jeh@ti0005q162-7332.bb.online.no)
[05:59:11] *** Quits: Skyfire (~pyon@user/pyon) (Ping timeout: 268 seconds)
[06:00:18] <kalven> actually 1GB rss?
[06:03:17] <Raziel> yolo, an imgui on top of bgfx (on top of native window with hardware accelerated renderer) hello world is also about 100MB of ram
[06:03:48] *** Quits: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:6a36) (Quit: Leaving)
[06:08:51] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[06:10:21] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 245 seconds)
[06:15:26] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:75d7:a8c0:f564:f87f)
[06:16:11] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:75d7:a8c0:f564:f87f) (Read error: Connection reset by peer)
[06:17:45] *** Quits: barometz (~dvanb@i117058.upc-i.chello.nl) (Ping timeout: 250 seconds)
[06:18:05] *** Joins: barometz (~dvanb@i117058.upc-i.chello.nl)
[06:19:30] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:3825:d1dd:c46a:f6ce)
[06:21:12] *** Joins: Guest37_ (~textual@124.168.255.30)
[06:35:43] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:3825:d1dd:c46a:f6ce) (Quit: Leaving)
[06:36:11] <yolo> wsl is not fun after all ,just terminal programs, or you need run xming the x-server on windows for GUI, can not compare to virtualbox, not even close to docker in my (quick) testing
[06:37:35] <yolo> what's all the fuzz about it, strange
[06:37:52] <Raziel> https://github.com/microsoft/wslg
[06:38:44] <yolo> Raziel: thanks, nice to know, win11 only, my poor 8-year-old laptop is win10 only, failed win11 check
[06:39:18] <Raziel> you can proooobably bypass the checks and do win11 anyway, but eh
[06:41:24] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:1cad:3c5:761:9a41)
[06:42:48] <Hello72> just install linux
[06:42:56] <Raziel> I'm still waiting for them to add basic features back into their new and feature-regressed taskbar before I get win11 >_
[06:48:10] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[06:50:46] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:1cad:3c5:761:9a41) (Quit: Leaving)
[06:50:46] *** Joins: paule32_ (~paule32@user/paule32)
[06:52:46] *** Joins: paule32__ (~paule32@user/paule32)
[06:53:36] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[06:54:06] *** Quits: paule32 (~paule32@user/paule32) (Ping timeout: 245 seconds)
[06:56:06] *** Quits: paule32_ (~paule32@user/paule32) (Ping timeout: 265 seconds)
[06:57:13] *** Joins: paule32 (~paule32@user/paule32)
[06:59:06] *** Quits: paule32__ (~paule32@user/paule32) (Ping timeout: 245 seconds)
[06:59:18] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:688f:a4b1:37fe:b64b)
[07:08:37] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:09:10] *** Quits: badone (~badone@209.132.189.136) (Quit: ZNC 1.7.5 - https://znc.in)
[07:11:11] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[07:12:47] <yolo> kalven: rss is not, I use ps_mem to get a private(rss) + shared(porition of shared lib)
[07:13:21] <yolo> can't access win10 remotely from ubuntu, krdc will die in 10 seconds, let me switch to linux channel
[07:24:58] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[07:25:26] <yolo> now i can run visual c++ in windows 10 via vnc now, nice.
[07:30:56] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[07:33:15] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[07:37:11] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[07:39:27] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:41:02] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 260 seconds)
[07:43:46] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[07:46:38] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[07:52:00] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:05:23] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[08:08:31] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[08:11:08] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 268 seconds)
[08:14:56] *** Quits: luizfrds (~Luiz@152.250.243.147) (Ping timeout: 245 seconds)
[08:39:00] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[08:41:30] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[08:44:10] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:688f:a4b1:37fe:b64b) (Read error: Connection reset by peer)
[08:44:31] *** Joins: gehn1 (~gehn@user/gehn)
[08:46:37] *** Quits: gehn1 (~gehn@user/gehn) (Client Quit)
[08:47:19] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:c1c0:f189:ed83:fd77)
[08:49:21] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:c1c0:f189:ed83:fd77) (Read error: Connection reset by peer)
[08:50:20] *** Quits: malloy (~jimery@116.30.222.115) (Ping timeout: 250 seconds)
[08:50:58] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 260 seconds)
[08:51:36] <kalven> yolo: seems odd that a basic libwebkit view would use a GB of actual memory. I could see it making a bunch of large virtual memory mappings, but that's not actually used memory.
[08:52:18] *** Joins: malloy (~jimery@116.30.222.115)
[08:54:22] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a49b:5696:fee6:78c0)
[08:54:59] <hnOsmium0001[m]> I spent 30 minutes trying to figure out why my fps is dropping like crazy (60 to ~10) when it hits a specific codepath that's just a few if
[08:55:08] <hnOsmium0001[m]> commenting out one line at the time
[08:55:20] <hnOsmium0001[m]> and then I realized it's because there is a Log Message Breakpoint on one of the statements
[08:59:20] <yolo> it's so painful to get into windows after so many years, in fact I never developed in windows for anything
[08:59:46] <yolo> took me one hour still could not figure out how to use openssl, trying vcpkg install openssl now
[08:59:50] <yolo> what a mess
[09:01:32] <yolo> need quit this shit and back to my little embedded linux corner
[09:01:45] *** Quits: Guest37_ (~textual@124.168.255.30) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[09:02:25] <yolo> thanks windows for giving me so much trouble, in thanksgiving holiday
[09:03:20] *** Joins: reumeth (~reumeth@user/reumeth)
[09:09:06] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 245 seconds)
[09:09:17] *** Joins: JeffH (~JeffH@174-16-133-53.hlrn.qwest.net)
[09:09:39] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[09:10:32] *** Quits: JeffH (~JeffH@174-16-133-53.hlrn.qwest.net) (Remote host closed the connection)
[09:10:42] *** Quits: malloy (~jimery@116.30.222.115) (Ping timeout: 250 seconds)
[09:11:04] *** Joins: JeffH (~JeffH@174-16-133-53.hlrn.qwest.net)
[09:12:07] *** Quits: JeffH (~JeffH@174-16-133-53.hlrn.qwest.net) (Remote host closed the connection)
[09:12:38] *** Joins: malloy (~jimery@116.30.222.115)
[09:12:48] *** Joins: Skyfire (~pyon@user/pyon)
[09:22:45] *** Quits: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu) (Ping timeout: 256 seconds)
[09:24:00] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[09:27:13] *** Joins: CoderCharmander (~CoderChar@2A001110022743270000003A8580AC01.mobile.pool.telekom.hu)
[09:28:03] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a49b:5696:fee6:78c0) (Read error: Connection reset by peer)
[09:31:34] *** Quits: CoderCharmander (~CoderChar@2A001110022743270000003A8580AC01.mobile.pool.telekom.hu) (Read error: Connection reset by peer)
[09:32:38] *** Joins: CoderCharmander (~CoderChar@2A001110022743270000003A8580AC01.mobile.pool.telekom.hu)
[09:38:33] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:38:44] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:38:44] *** ChanServ sets mode: +v npaperbot
[09:56:11] *** Quits: CoderCharmander (~CoderChar@2A001110022743270000003A8580AC01.mobile.pool.telekom.hu) (Ping timeout: 245 seconds)
[09:57:04] *** Joins: CoderCharmander (~CoderChar@2A00111002226815000000615AA81601.mobile.pool.telekom.hu)
[10:04:46] *** Quits: jzsinatra (~jzsinatra@88-114-238-31.elisa-laajakaista.fi) (Ping timeout: 260 seconds)
[10:05:01] *** Joins: jzsinatra (~jzsinatra@88-114-238-31.elisa-laajakaista.fi)
[10:08:26] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a8e6:868c:6185:3f2c)
[10:11:24] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a8e6:868c:6185:3f2c) (Read error: Connection reset by peer)
[10:27:48] <ville> ...because everything just works out of the box on linux side
[10:31:58] <comrad> ville: no i guess what yolo wants to say is, that the linux tool chains does not tend to get into your way like the microsoft tools does
[10:32:21] <comrad> just including "windows.h" the wrong way can cost you some hours in trying to fix that
[10:35:18] <ville> i'll hypotise this that in any and all systems there exists same amount of problems but the problems may be different. selection bias then determines the users of each system based on what kind of problems they tolerate
[10:35:40] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:36:03] <ville> the makers of the systems need to reach that acceptable level of problems to get users. but are then not incentivised to do any better
[10:36:50] <ville> so what i am really saying is that it's all garbage
[10:37:26] <comrad> heh
[10:38:04] <comrad> i had to dig into ELF and PE32 file format and after that i was really astonished of how everything still works
[10:38:19] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[10:40:37] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[10:42:51] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 245 seconds)
[10:44:21] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[10:46:25] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:50:07] *** Quits: chozorho (~chozorho@2601:146:300:c30::7991) (Quit: WeeChat 3.0)
[10:56:22] *** Quits: kapil_ (~kapil@2a01:4f9:c010:c9c3::1) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[10:56:52] *** Joins: kapil (~kapil@o-k.website)
[11:02:48] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:b505:6b04:3c7d:ed6c)
[11:08:59] *** Joins: Guest37_ (~textual@124.168.255.30)
[11:10:10] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[11:14:32] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[11:16:32] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[11:20:35] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:b505:6b04:3c7d:ed6c) (Read error: Connection reset by peer)
[11:23:57] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[11:24:47] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 268 seconds)
[11:28:52] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[11:29:09] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:208a:4e08:1f28:2ca1)
[11:35:45] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[11:38:08] <Alipha> Raziel: can you just use function pointers instead of std::function if you want to use ==? To have == work for std::function, I think that means that any functors you put in it would need to have == implemented, which seems burdensome
[11:39:18] *** Joins: frost (~frost@user/frost)
[11:39:38] <Raziel> Alipha, I probably could, but that sounds like more of a pain than just tracking that within my state stuff instead
[11:41:11] <Raziel> since raw function pointers are really bleh to deal with as far as I've seen
[11:42:59] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Ping timeout: 264 seconds)
[11:48:55] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[11:56:19] <Raziel> Alipha, apparently it can be done with std::function::target
[11:56:20] <Raziel> https://wandbox.org/permlink/pNMyCLZBibY9xRvA
[11:57:19] *** Joins: paul424 (~tom@ip-37-248-157-146.multi.internet.cyfrowypolsat.pl)
[11:57:20] <Raziel> also, that invoke was meant to be on f, but whatever :p
[12:00:46] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 245 seconds)
[12:02:37] *** Joins: andreasbuhr (~quassel@p549db531.dip0.t-ipconnect.de)
[12:02:40] *** Quits: andreasbuhr (~quassel@p549db531.dip0.t-ipconnect.de) (Client Quit)
[12:05:59] <Raziel> and, it would be nice if that was more straightforward too. I understand function pointers must be strongly typed on all sides but, surely there would be ways to just compare functions that would make sense
[12:06:23] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[12:06:40] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:dd19:17d3:b6e0:9c0f)
[12:11:59] <RandomReader> there is, function pointers :P
[12:12:24] <Raziel> one that doesn't suck. :p
[12:12:28] <RandomReader> std::function handles *callables*, not *functions*
[12:12:44] <Raziel> like, surely .target *should* be able to deduce the types, because they must be the types the std::function was created with, no?
[12:12:50] <RandomReader> see the invocables list: https://en.cppreference.com/w/cpp/named_req/Callable
[12:13:05] <RandomReader> no, std::function is type-erased
[12:13:10] <Raziel> well cock.
[12:13:53] <LordKalma> mooorning
[12:13:54] <RandomReader> e.g. it'd never be useful for a closure type since there is no existing object to compare with
[12:14:10] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[12:14:14] <Raziel> then lemme store types dammit. :p
[12:14:17] <RandomReader> that's the entire reason std::function exists
[12:14:25] <RandomReader> why do you need to?
[12:15:03] *** Joins: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:6b66)
[12:15:06] <RandomReader> what's the scenario you're in where it makes sense to both use std::function *and* do equality comparisons?
[12:15:53] <Raziel> certain entities checking if entities ahead of them have had their callback changed to a certain callback, at a certain time, somewhat asynchronously because different things happen at different times over different frames
[12:16:02] <Raziel> >_>
[12:16:21] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[12:16:36] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 245 seconds)
[12:17:00] <RandomReader> that makes zero sense for callbacks in general
[12:17:29] <RandomReader> since the purpose of using std::function is to erase them so you don't know what they are .. like the lambda scenario I just mentioned
[12:17:55] <Raziel> so you're saying I shouldn't use std::function for callbacks? :thonk:
[12:17:56] <DSpider> I've only used std::function for recursive lambdas
[12:17:58] <RandomReader> so if comparison is a requirement, then you have to be dealing with a very restricted subset, like plain function pointers .. why use std::function?
[12:18:15] <RandomReader> no, I'm saying the entire sense of "certain callback" makes no sense
[12:18:35] <RandomReader> what you described is something much more restricted than that
[12:18:53] <Raziel> well, yes, in this particular case it's definitely much more restricted
[12:19:21] *** Miyu is now known as hackkitten
[12:20:01] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 250 seconds)
[12:21:51] <RandomReader> so use something more appropriate instead of something generic :P
[12:22:10] <Raziel> is there anything more appropriate that isn't a function pointer? :p
[12:22:23] <RandomReader> what's wrong with a function pointer?
[12:24:02] <Raziel> other than just about everything? I suppose these entities can, in other cases, also have lambdas as callbacks, so I'm still kinda stuck with std::function...
[12:25:51] <RandomReader> what do you mean everything? function pointers are simple
[12:26:24] <RandomReader> trivial objects, similar enough to object pointers to be familiar
[12:26:47] <RandomReader> lambdas would not be equality comparable, so "certain callback" would not be an option
[12:27:23] <Raziel> right, I just mean this type of entity could. not in this specific case, but in other places in which I use this same type of entity, I do use lambdas. in those cases I do not have a need for equality comparison :p
[12:28:42] <Raziel> I suppose I could compose the callback type in as either std::function or function pointer depending on the use case, but that's quite a bit of extra bs just so I can equality compare in a couple places
[12:28:43] <fiesh> DSpider: you can also pass the lambda as its own argument, eliminating the need for std::function (and probably its downsides)
[12:29:25] *** Quits: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Quit: Going offline, see ya! (www.adiirc.com))
[12:30:00] <Raziel> especially considering that you can, as it turns out, equality compare with std::function. even if it isn't the prettiest thing ever.
[12:30:56] *** Joins: robod34 (Username@79.113.195.239)
[12:31:25] <DSpider> yeah, I've seen the syntax for recursive lambdas... and they suck
[12:31:25] <RandomReader> if what's stored inside it is comparable and you know that type, then yes
[12:31:35] <DSpider> I find them very difficult to read
[12:31:39] <RandomReader> this still strikes me as an odd-sounding scenario though
[12:31:58] <RandomReader> and I still don't understand what you have against function pointers
[12:32:04] <Raziel> yeah, in my specific and very much restricted cases so far, I'd be comparing with a specific well-defined function, so it's doable
[12:35:08] *** Quits: SuperNintendoSUX (~sjw@69.206.48.64) (Remote host closed the connection)
[12:35:53] *** Quits: paul424 (~tom@ip-37-248-157-146.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[12:36:20] *** Joins: SuperNintendoSUX (~sjw@69.206.48.64)
[12:40:35] <Raziel> RandomReader, I prolly shoulda stuck with some nice polite OOP, these weird-ass hybrid paradigms I'm making up as I go aren't always nice to implement :p
[12:41:21] <RandomReader> eh, not sure that would have been much better, if you're working in the area I think you are
[12:41:46] <RandomReader> not a space I've spent time in, but as an entirely opinionated outside viewpoint based purely on shallow examination .. it all looks overcomplicated :P
[12:42:06] <Raziel> which space are you thinking of? :p
[12:42:34] <RandomReader> whatever you call the space that generalized game engines land in
[12:42:42] <RandomReader> I can't think of the right term at the moment, it's not limited to that
[12:43:04] <Raziel> I guess gamedev would be the most broad term that would work, yeah
[12:43:51] *** Quits: CoderCharmander (~CoderChar@2A00111002226815000000615AA81601.mobile.pool.telekom.hu) (Ping timeout: 250 seconds)
[12:44:28] <Raziel> anyway, I think I can just drop the need for different callbacks in that bit of logic anyway, if I conditionally do it all in one callback instead of switching callbacks around. might be better overall.
[12:44:55] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[12:47:54] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[12:51:05] *** pah is now known as pa
[12:54:36] *** Joins: PJBoy (~PJBoy@user/pjboy)
[12:56:53] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[13:14:55] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[13:16:56] *** Joins: plastico (~plastico@neomutt/plastico)
[13:17:26] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 260 seconds)
[13:27:02] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Quit: SureVoIP: http://www.surevoip.co.uk)
[13:30:42] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[13:34:51] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[13:38:34] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:38:42] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:38:42] *** ChanServ sets mode: +v npaperbot
[13:39:46] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[13:39:57] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 250 seconds)
[13:47:11] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:51:41] *** Joins: Simplar (~Simplar@188.163.92.225)
[13:58:02] <PJBoy> wtf digital ocean managed to sign me up with the wrong email???
[13:58:07] <PJBoy> how's that even possible
[13:59:30] <PJBoy> bro this error doesn't make any god damn sense https://puu.sh/Irono/227d0d4605.png
[13:59:47] <PJBoy> this website is on drugs
[14:00:21] <LordKalma> amazing
[14:00:22] <LordKalma> hahaha
[14:00:24] <LordKalma> use hostens :p
[14:00:45] <PJBoy> damn it
[14:00:52] <PJBoy> now I'm back to none of the sign up forms working
[14:01:02] <PJBoy> dude this website hates business
[14:03:33] <LordKalma> Phone them. Raise shit on twitter
[14:03:43] <PJBoy> what am I, a boomer or zoomer?
[14:04:15] <LordKalma> Use the contact form then
[14:04:22] <PJBoy> I was gonna do that, but it requires logging in
[14:04:48] <LordKalma> Facebook messaging companies sometimes does work cool
[14:06:46] <LordKalma> DO is cool in the sense they offer lots of services
[14:06:50] <LordKalma> like droplets or soemthing
[14:06:55] <LordKalma> but I've been happy with my VPS
[14:07:25] <PJBoy> yeah I'll have to try my other browsers
[14:08:06] <PJBoy> ironic that browsers are a strong cross platform option
[14:08:18] <PJBoy> and yet there are several incompatibilities across the browsers themselves
[14:08:29] <LordKalma> I have to move out of firefox for some shit to work yeah
[14:23:37] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 268 seconds)
[14:28:17] *** Quits: Simplar (~Simplar@188.163.92.225) (Quit: Going offline, see ya! (www.adiirc.com))
[14:28:49] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[14:30:49] <PJBoy> argh
[14:31:05] <PJBoy> this code has a "debugbreak()" type function
[14:31:12] <PJBoy> and its method of crashing is `*(volatile frost_uint8 *)0;`
[14:31:29] <LordKalma> system exit wasn't enough?
[14:31:36] <PJBoy> that seems a bit unreliable to me...
[14:31:50] <PJBoy> well I guess the idea is to trigger a debugger break if one's active
[14:32:24] <PJBoy> this is where I'd normally write `asm("int3")`
[14:33:11] <PJBoy> { asm("int3"); } // fyi
[14:33:12] <geordi> Trace/breakpoint trap
[14:34:11] <LordKalma> why is that a breakpoint trap?
[14:34:29] <PJBoy> by definition of the int 3 x86 instruction
[14:35:08] <ville> interrupt 3 is a trap https://en.wikipedia.org/wiki/INT_(x86_instruction)#INT3
[14:35:30] <PJBoy> in old school debuggers, breakpoints would literally replace the instruction being broken on and write down the old instruction somewhere
[14:35:59] <PJBoy> idk if they still do
[14:58:38] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[15:03:36] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 260 seconds)
[15:04:47] <cbreak> I'd doubt it
[15:07:08] <PJBoy> there's probably some virtual memory thing now
[15:07:47] <PJBoy> c
[15:12:12] <cbreak> there's dtrace :)
[15:12:18] <cbreak> and probably other debug APIs
[15:13:07] <PJBoy> wtf
[15:13:28] <PJBoy> pasting this text into nano didn't work with LFs
[15:13:34] <PJBoy> it had to be CRLFs
[15:13:50] <PJBoy> is nano the new notepad?
[15:16:49] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[15:19:17] <TinoDidriksen> Is the file CRLF otherwise?
[15:19:35] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[15:20:24] <PJBoy> I was making a new file with nano
[15:20:32] <PJBoy> so I'm not entirely sure
[15:20:50] <PJBoy> still I'd expect the paste operation to work
[15:21:09] <PJBoy> this was through putty, could be relevant
[15:21:52] <cbreak> define "didn't work"
[15:21:59] <PJBoy> the newlines didn't appear
[15:22:05] <cbreak> so all on one line?
[15:22:08] <PJBoy> it concatenated every line into a single one
[15:22:10] <PJBoy> yeah
[15:22:14] <cbreak> maybe putty does CRLF -> LF translation
[15:22:26] <cbreak> (might be an option somewhere)
[15:22:35] <PJBoy> and LF -> [nothing] translation? >_>
[15:22:42] <cbreak> possibly
[15:23:11] <PJBoy> I wouldn't rule it out either
[15:23:24] <PJBoy> newlines are hard
[15:23:39] <TinoDidriksen> I haven't had issues pasting lines to nano via PuTTy.
[15:24:28] <TinoDidriksen> Just tested a fresh file and LF - still worked.
[15:24:47] <PJBoy> hm
[15:24:53] <PJBoy> these are my putty newline options https://puu.sh/Irp0X/e9001a9b1e.png
[15:26:44] <PJBoy> hmmm
[15:26:51] <PJBoy> a putty message comes up say "can now unjustify"
[15:27:16] <PJBoy> this doesn't happen on my other VM's nano
[15:27:23] <PJBoy> maybe it's an old nano bug
[15:27:58] <PJBoy> this is nano 2.5.3 that has the bad newline behaviour
[15:30:52] *** Joins: CoderCharmander (~CoderChar@2001:738:80c:5af3:85de:cd4f:21a7:17fc)
[15:32:56] <very_sneaky> vim has weird behaviour pasting if you don't put it in paste mode
[15:32:59] <very_sneaky> maybe nano has something similar
[15:33:42] <LordKalma> nah, nano is kids play
[15:33:52] <LordKalma> and yueah, I use nano via putty on my vps too with success
[15:33:54] <cbreak> paste mode?
[15:33:58] <LordKalma> never had problems
[15:34:03] <very_sneaky> `:set paste`
[15:34:13] <cbreak> I only use insert and move mode, and visual mode
[15:34:15] <cbreak> hmm...
[15:34:59] <very_sneaky> different kind of mode? Is there another more appropriate term for it?
[15:35:05] <ville> vim lacks quit mode
[15:35:25] <very_sneaky> ville: it's the first thing `vimtutor` teaches you :P
[15:35:39] <cbreak> ville: it's :!killall -KILL vim
[15:36:03] <PJBoy> I'm putting it down to old nano bug
[15:36:04] *** Quits: CoderCharmander (~CoderChar@2001:738:80c:5af3:85de:cd4f:21a7:17fc) (Remote host closed the connection)
[15:36:12] <ville> doesn't help when you get put into vi or vim on system where EDITOR is not set to something else. then it's getting another shell and killing the process
[15:36:19] <PJBoy> something triggers justify operations somehow
[15:37:15] <PJBoy> you can always ctrl+z out of vi
[15:37:29] <very_sneaky> or just remember :q for quit
[15:37:40] *** Quits: proller (~p@2a02:6b8:b081:1207::1:7) (Ping timeout: 260 seconds)
[15:37:43] <cbreak> according to :help paste in nvim, some terminals support "bracketed paste mode"
[15:38:08] <PJBoy> what if you're not in a mode that allows for typing commands
[15:38:19] <very_sneaky> esc, :q
[15:38:31] <PJBoy> what if my escape key is broken
[15:38:51] <very_sneaky> yeah then you're borked
[15:38:58] <PJBoy> or I'm using the newest model of mac that removes every key except the letters and numbers
[15:39:10] <PJBoy> replacing it all with an touch sensitive emoji strip
[15:39:22] <very_sneaky> they've actually removed that from the latest models i think
[15:39:32] <PJBoy> even escape?
[15:39:37] <PJBoy> I know they removed all the F keys
[15:39:52] <very_sneaky> no, i mean they've put the function keys back
[15:39:54] <very_sneaky> no more touch bar
[15:39:57] <PJBoy> oh right
[15:40:03] <PJBoy> the touch bar's actually cool
[15:40:13] <PJBoy> it'd be a shame if they removed it
[15:40:43] <PJBoy> that said I do like my F keys
[15:41:18] <very_sneaky> yeah: https://www.apple.com/v/macbook-pro-14-and-16/b/images/overview/camera/spatial_audio__dipr8iji32uu_large.jpg
[15:41:27] <very_sneaky> that's the 2021 model
[15:41:46] <very_sneaky> okay so they kept the touch id button on the top right
[15:42:11] <very_sneaky> they brought back all of the io as well
[15:42:25] <very_sneaky> sdxc, tb4, hdmi, magsafe, 3.5mm
[15:43:13] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[15:45:53] *** Joins: CoderCharmander (~CoderChar@2001:738:80c:5af3:85de:cd4f:21a7:17fc)
[15:46:30] *** Quits: CoderCharmander (~CoderChar@2001:738:80c:5af3:85de:cd4f:21a7:17fc) (Read error: Connection reset by peer)
[15:46:43] *** Joins: CoderCharmander (~CoderChar@2001:738:80c:5af3:85de:cd4f:21a7:17fc)
[15:49:13] *** Quits: CoderCharmander (~CoderChar@2001:738:80c:5af3:85de:cd4f:21a7:17fc) (Read error: Connection reset by peer)
[15:49:25] *** Joins: CoderCharmander (~CoderChar@195.199.248.88)
[15:49:47] *** Joins: markong (~kvirc@213.146.188.203)
[15:50:18] *** Joins: Simplar (~Simplar@188.163.92.225)
[15:50:52] <PJBoy> that's better
[15:51:28] <PJBoy> it's missing home/end/pgup/pgdn and insert
[15:51:32] <PJBoy> all of which I use fairly regularly
[15:51:56] <very_sneaky> yeah. i had a rude shock trying to scroll up in tmux when i used it as a laptop for the first time and not just connected to kbm/monitors
[15:53:05] <PJBoy> I always have to look up how to scroll in tmux/screen >_>
[15:53:44] <PJBoy> c
[15:54:16] *** Quits: CoderCharmander (~CoderChar@195.199.248.88) (Ping timeout: 268 seconds)
[15:54:56] *** Joins: CoderCharmander (~CoderChar@2A001110020C93040000006659F51D01.mobile.pool.telekom.hu)
[15:56:25] <smallville7123> https://gist.github.com/mgood7123/245e3867dce2c8ffb4b68db15db78836 im not sure how i can better encapsulate this into a state that can easily be created and destroyed
[15:58:54] <very_sneaky> becomes natural after a while
[15:58:57] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[16:02:26] *** Quits: CoderCharmander (~CoderChar@2A001110020C93040000006659F51D01.mobile.pool.telekom.hu) (Read error: Connection reset by peer)
[16:03:51] *** Joins: CoderCharmander (~CoderChar@2A001110020C93040000006659F51D01.mobile.pool.telekom.hu)
[16:10:53] *** Joins: Colt (~Colt@user/colt)
[16:14:35] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[16:17:01] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 245 seconds)
[16:17:03] *** Joins: luizfrds (~Luiz@152.250.243.147)
[16:18:18] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 268 seconds)
[16:23:04] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:208a:4e08:1f28:2ca1) (Remote host closed the connection)
[16:25:55] *** Joins: AmR (~AmREiSa@102.47.62.197)
[16:26:12] *** Quits: CoderCharmander (~CoderChar@2A001110020C93040000006659F51D01.mobile.pool.telekom.hu) (Ping timeout: 260 seconds)
[16:26:40] *** Joins: CoderCharmander (~CoderChar@2A001110022E4DDD000000467A370901.mobile.pool.telekom.hu)
[16:27:29] *** Quits: CoderCharmander (~CoderChar@2A001110022E4DDD000000467A370901.mobile.pool.telekom.hu) (Remote host closed the connection)
[16:30:11] *** Joins: proller (~p@2a02:6b8:0:40c:3798:4c02:3d64:9098)
[16:30:40] <PJBoy> argh
[16:31:42] <PJBoy> `sudo apt install mono-runtime` => "The following packages have unmet dependencies. mono-runtime : Depends: mono-runtime-sgen (= 6.12.0.122-0xamarin1+ubuntu1804b1) but it is not going to be installed"
[16:33:06] <PJBoy> mono-runtime-sgen -> mono-runtime-common -> mono-gac -> mono-4.0-gac -> libmono-corlib4.5-cil -> mono-runtime
[16:33:11] <PJBoy> where -> is "depends on"
[16:33:20] <PJBoy> what hell man, why is there a circular dependency
[16:34:42] <ville> very_sneaky: that already requires one to hit whatever it takes to get to the part where you can write commands
[16:35:31] *** Joins: taiyu (~taiyu@user/taiyu)
[16:36:10] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:37:22] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[16:38:54] *** Quits: Guest37_ (~textual@124.168.255.30) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[16:40:10] <smallvil_> if i have some state, is it best to associate/bind objects to this state if there can be multiple state's ?
[16:40:31] <smallvil_> if i have some state, is it best to associate/bind newly created objects to this state if there can be multiple state's ? *
[16:40:53] *** Joins: xShad0w (~shad0w@user/xshadow)
[16:41:47] <very_sneaky> ville: meh. hit escape a few times first. you start in normal mode, which you can enter commands from
[16:43:42] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) ()
[16:43:55] *** Quits: shad0w (~shad0w@user/xshadow) (Ping timeout: 250 seconds)
[16:44:15] <ville> very_sneaky: you don't seem to get it. the discoverability of that is zero
[16:45:09] <TinoDidriksen> vi/vim is definitely a hostile environment to have as a default.
[16:49:29] <fiesh> PJBoy: ctrl+[ works as escape
[16:49:47] <PJBoy> for tmux, yeah
[16:49:53] <PJBoy> oh for vi too
[16:49:55] <PJBoy> ok
[16:50:01] <very_sneaky> i'm not arguing that it's intuitive lol
[16:50:21] <very_sneaky> once you get stuck once, you learn the solution and either switch your editors or just remember esc, :q!
[16:50:23] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[16:51:06] *** Joins: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290)
[16:53:30] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[16:55:45] <PJBoy> I'm just surprised anyone ever decides to learn vim after experiencing that
[16:56:49] <fiesh> that's like being surprised anyone wants to learn C++ after finding out the language just lets you create dangling references
[16:58:14] <PJBoy> that's not your first experience with C++ though
[16:58:49] <PJBoy> both things are overcomable, but vim leaves a bad first impression
[16:58:55] <LordKalma> PJBoy, wtf?
[16:59:03] <LordKalma> (the circular dependency)
[16:59:08] <PJBoy> yeah I dunno
[16:59:14] <PJBoy> I'm reinstalling my VM as we speak
[16:59:20] <very_sneaky> i feel like the first experience in vim is the text editor equivalent to a windows user trying to set up linux for the first time
[16:59:33] <very_sneaky> exhibit A: latest linus tech tips video
[16:59:53] *** Quits: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:6b66) (Quit: Leaving)
[16:59:54] <LordKalma> fuck linus
[16:59:57] <LordKalma> what a dumb fuck
[17:00:01] *** Quits: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290) (Remote host closed the connection)
[17:00:05] <PJBoy> the linus tech tips linus?
[17:00:12] <LordKalma> stopped watching long ago. It's 13 yo clickbait since years now
[17:00:12] <PJBoy> everyone loves that guy
[17:00:15] <LordKalma> PJBoy, yes
[17:00:21] <LordKalma> nah fuck that
[17:00:45] <very_sneaky> he's okay some times. i did find it amusing that he nuked his DE when trying to install steam on popos, lol
[17:00:58] <LordKalma> that dumbed down shit with clickbait titles that he promised already two times to not do  and dumbed down content
[17:01:05] <LordKalma> very_sneaky, apparently it was a bug that lasted like two hour
[17:01:08] <LordKalma> hours*
[17:01:10] <LordKalma> talk about timing
[17:01:16] <very_sneaky> i think it was 4 days, but yeah bad timing
[17:01:31] <LordKalma> 4 days it was the downloadaable iso
[17:01:44] <LordKalma> the bug was quickly fixed but the images weren't remade
[17:02:12] <very_sneaky> it's a bit of a ridiculous review though, it's like.. a windows power user picking up linux and complaining that he isn't a linux power user straight away
[17:02:22] <LordKalma> PJBoy, if you're out of the loop, the steam package for PopOs! basically told linus it would completely remove gnome
[17:02:31] <LordKalma> and "are you really sure to continue?"
[17:02:34] <LordKalma> linus say yes
[17:02:37] <LordKalma> linus complains
[17:03:07] <LordKalma> fuck you linus learn to read you console-ignorant
[17:03:20] <LordKalma> anyway yueah, like he wanted to be versed in linux as windows in 2 hours?
[17:03:41] <LordKalma> and thing is linus knows shit about linux
[17:03:46] <very_sneaky> he's certainly failed to appreciate that the two operating systems have very different philosophies/paradigms
[17:03:50] <LordKalma> even their internal servers/NAS use windows
[17:04:00] <LordKalma> because, and I QUOTE "I prefer the GUI"
[17:04:04] <very_sneaky> i think his nas uses unraid
[17:04:10] *** Quits: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl) (Remote host closed the connection)
[17:04:13] <LordKalma> only recently they have the video about "lets do it properly"
[17:04:27] <PJBoy> I dunno I'm starting to like the sound of this guy
[17:04:28] <very_sneaky> lol, it sounds like you watch a lot of his videos for someone who hates him :P
[17:04:33] <PJBoy> linux sucks to use
[17:04:43] <PJBoy> and this guy provides video evidence of that
[17:04:48] <very_sneaky> as a developer, linux is phenomenal
[17:04:50] <LordKalma> very_sneaky, his thumbnails are always in my youtube feed
[17:05:00] <PJBoy> linux is awful to use for development
[17:05:01] <LordKalma> and I used to watch a lot of it
[17:05:03] <LordKalma> daily and all
[17:05:04] <very_sneaky> as a gamer, it's okay
[17:05:11] <LordKalma> I hate it because it's shit now
[17:05:24] <LordKalma> i'd rather hear tech jesus rumble about minor shit for 20 minutes
[17:05:29] <LordKalma> (gamer's nexus)
[17:05:39] <PJBoy> like if someone of above average technical prowess struggles to use linux, then it's clear that it's never going to be popular
[17:05:44] <very_sneaky> yeah, i mean, i don't really blame him that much - he's doing what he's incentivised to do. it's big tech that's the problem here
[17:05:53] <very_sneaky> the algorithm rewards clickbait
[17:05:57] <LordKalma> indeed
[17:06:03] <LordKalma> he's just a business man doing business
[17:06:04] <PJBoy> and there's absolutely no one out there trying to make linux more usable in this regard
[17:06:08] <LordKalma> I just don't like the content too
[17:06:20] <LordKalma> because it has shifted away from any tech interesting thing
[17:06:35] <very_sneaky> PJBoy: they have different philosophies - "average technical prowess" means shit all if you expect everything to be a certain way and get frustrated that it isnt
[17:06:47] <LordKalma> PJBoy, that's all fair criticism. but Linus is a tech consumer
[17:06:54] <LordKalma> he knows how to put ram in the slot
[17:07:04] <LordKalma> he knows shit about operating systems
[17:07:08] <LordKalma> even if they like to pretend they do
[17:07:18] <LordKalma> also, PopOS! is really trying to make linux usable
[17:07:19] <PJBoy> yeah I see where you're coming from
[17:07:31] <PJBoy> you do need at the very least an open mind when using linux
[17:07:36] <PJBoy> +need
[17:07:41] <LordKalma> it's just the typical omg technoman who reviews phones
[17:07:59] <LordKalma> anyway, rant aside
[17:08:04] <PJBoy> also mono was easily installed on this fresh VM
[17:08:08] <LordKalma> they choose PopOS! and the other one was manjaro
[17:08:16] <very_sneaky> LordKalma: in fairness, I think luke is a lot more balanced - i guess because he used to daily drive ubuntu it's not as much nails on a chalkboard for him
[17:08:37] <LordKalma> Manjaro is so popular despite it has some weird weird crap in some places
[17:08:48] *** Joins: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl)
[17:08:51] <LordKalma> someone once linked me an update script on their gitlab repo
[17:08:53] <LordKalma> sub par quality
[17:09:04] <LordKalma> and that's being nice
[17:09:23] <LordKalma> manjaro is popualr because "OMG ARCH" but with an installer
[17:09:47] <very_sneaky> eh, it's popular because it has access the the aur as well - that's pretty convenient
[17:09:48] <LordKalma> For me, I've found the best experience to be OpenSUSE, even though it's not much talked about... I really like it!
[17:10:08] <LordKalma> it has nvidia support on par with ubuntu
[17:10:11] <LordKalma> and it's really cool
[17:10:32] *** Joins: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290)
[17:10:40] <LordKalma> OpenSUSE's main problem imho is that the installer ISO doesn't have a live desktop and vice versa
[17:10:41] <comrad> openSUSE ftw!
[17:10:46] <LordKalma> dunno why that decision
[17:10:52] <LordKalma> but it hinders discoverability
[17:11:13] <LordKalma> (and it makes it so that it can't be my "always in the thumbdrive" distro)
[17:11:16] <very_sneaky> suse and fedora share a forked kernel don't they?
[17:11:48] <comrad> no
[17:12:00] <comrad> the vanilla kernel is not intended for distributions
[17:12:43] <LordKalma> if you want AUR, https://garudalinux.org/
[17:12:51] <LordKalma> it's a beast of a distro
[17:13:10] <LordKalma> https://endeavouros.com/ is something I hav to try some day
[17:13:29] <very_sneaky> eh, i've found i don't have the patience for distro hopping
[17:14:14] <very_sneaky> i spend too much time putting out fires in all the other services i have running :\
[17:14:17] <LordKalma> and if you're a developer on intel platforms: https://clearlinux.org/developer
[17:14:30] <very_sneaky> still haven't been able to get gitlab pages working on my self hosted instance
[17:14:36] <LordKalma> hahaha I use windows :p
[17:14:41] <LordKalma> very_sneaky, docker, man, docker
[17:14:50] <LordKalma> forget having 500 services coliding with each other
[17:14:56] <LordKalma> configs you can't undo because you fucked up too much
[17:14:58] <LordKalma> DOCKER
[17:15:05] <LordKalma> docker is like the whole grail I love docker
[17:15:18] <LordKalma> if I fuck up too much I can just remove the image
[17:15:22] <LordKalma> and everything's fine again
[17:15:40] <very_sneaky> i mean the problem _shouldn't_ be hard. i do have it in a VM, something is screwy with a reverse proxy or dns entry somewhere i think
[17:17:09] <very_sneaky> yeah i'm coming around to docker. I've liked it for web deployments with kubernetes in the past, but i'm about to start looking at it for CI builds on a bunch of compilers
[17:17:21] <LordKalma> I'm a sucker for docker, really, came to really enjoy it
[17:17:24] <very_sneaky> really good move by jfrog to make their conan platform tool set opensource
[17:17:29] <LordKalma> very_sneaky, jenkins can use docker!
[17:17:31] <LordKalma> it's really cool
[17:17:41] <LordKalma> It took a while to setup
[17:17:48] <very_sneaky> yeah, that will be the next CI i evaluate - trying to get a feel for gitlab ci atm
[17:17:49] <LordKalma> too many guides were about docker-in-docker which sucks balls
[17:17:57] <LordKalma> but after I managed it
[17:17:59] <LordKalma> pretty decent
[17:18:07] <LordKalma> and again, dockerize the hell of it
[17:18:13] <LordKalma> so you can jst delete and redo when you fuck up
[17:18:19] <very_sneaky> i need to move away from freenas
[17:18:19] <LordKalma> does artifactory CE have a docker image?
[17:18:21] <LordKalma> it should
[17:18:45] <very_sneaky> it can't host docker images natively - would have to spin up a debian vm or something as a docker host
[17:18:54] <LordKalma> https://www.jfrog.com/confluence/display/RTF6X/Installing+with+Docker
[17:19:02] <LordKalma> bah that's shitty
[17:20:03] <very_sneaky> cbreak cover your ears :P
[17:20:50] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[17:23:32] *** Quits: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290) (Ping timeout: 240 seconds)
[17:23:59] <PJBoy> what's the idea of kubernetes anyway?
[17:24:04] *** Joins: jwillikers_ (~jwilliker@ics141-1.icsincorporated.com)
[17:24:18] <PJBoy> every time I've tried to look it up, I get physically ill from reading buzzword marketing bullshit
[17:25:11] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[17:26:57] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 268 seconds)
[17:29:01] <LordKalma> I don't understand it either
[17:29:07] <LordKalma> what does it do vs docker?
[17:32:26] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:e83a:ac:3e7a:ae8d)
[17:34:21] <comrad> its not versus
[17:34:38] <comrad> if you use docker you soon end up with a zoo of container images you have to manage
[17:34:52] <comrad> kubernetes is a management tool for docker and its dependencies within each other
[17:34:57] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[17:38:05] *** Quits: jwillikers_ (~jwilliker@ics141-1.icsincorporated.com) (Remote host closed the connection)
[17:38:34] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:38:42] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:38:43] *** ChanServ sets mode: +v npaperbot
[17:38:43] <cbreak> comrad: just merge the images.
[17:38:59] <comrad> i dont use kubernetes, hell no
[17:39:19] <comrad> we use podman (rootless docker) for gameservers to avoid polluting our server
[17:39:27] <comrad> but thats the end of it
[17:40:43] *** Joins: reumeth (~reumeth@user/reumeth)
[17:42:09] <PJBoy> ah ok
[17:43:08] *** Joins: r-g (~r-g@163.172.58.132)
[17:44:32] *** Quits: joilerv (~joilerv@host86-191-93-41.range86-191.btcentralplus.com) (Ping timeout: 240 seconds)
[17:46:42] *** Joins: joilerv (~joilerv@host86-191-93-41.range86-191.btcentralplus.com)
[17:48:32] *** Joins: Guest17 (~Guest17@68.171.185.81.rev.sfr.net)
[17:53:54] *** Quits: msk_ (~msk@185.124.240.174) (Ping timeout: 256 seconds)
[17:56:51] *** Joins: paul424 (~tom@apn-46-77-171-107.dynamic.gprs.plus.pl)
[17:57:20] <LordKalma> docker-compose? cough
[17:58:02] <paul424> IS it only me that has the feeling that, c++ exceotions are only costly addon not worth the effort to confusion they bring in entire language ?
[17:58:23] <PJBoy> > Makefile:1: *** Too many open files.  Stop.
[17:58:27] <PJBoy> what the fuck
[17:58:44] *** Joins: ferdna (~ferdna@user/ferdna)
[17:58:48] <LordKalma> https://github.com/microsoft/vscode/issues/137885
[17:58:58] <LordKalma> if anybody wants to "upvote" my feature request
[17:59:10] <PJBoy> I need a soundproof scream room at home
[17:59:12] <PJBoy> this is insane
[17:59:18] <paul424> For example in OpenDungeons they are used only to notify about errors , there is no try - catch in entier code except the main program loop
[17:59:55] <paul424> c++ exceptions*
[18:00:06] <comrad> we use them alot
[18:00:28] <comrad> its sad that you dont HAVE to catch them
[18:00:28] <LordKalma> c++ exceptions make sense when they make sense
[18:00:29] <PJBoy> it's a hell of a lot better than checking every single function call for errors
[18:00:38] <PJBoy> and not allowing the use of operators
[18:00:40] <PJBoy> or constructors
[18:00:57] <paul424> hmmm yeah
[18:01:28] <LordKalma> typedef error_code int; error_code bananas_add(banana b1, banana b2); // every C function, ever
[18:01:38] <LordKalma> oh wait
[18:01:46] <comrad> you need an output banana ^^
[18:01:50] <LordKalma> typedef error_code int; error_code bananas_add(banana *b1, banana *b2, banana *result); // every C function, ever
[18:01:52] <comrad> the returncode is only for errors
[18:02:03] <LordKalma> yes
[18:02:27] <comrad> you could make the first two const, to make the intend clear which one of them is for writing
[18:02:32] *** Joins: rewq (~pc@102.184.117.46)
[18:02:35] <comrad> but that would probably confuse every hardcore c programmer
[18:02:40] <LordKalma> hahahaha as if C programmers did const correctness
[18:02:57] *** Quits: rewq (~pc@102.184.117.46) (Remote host closed the connection)
[18:03:01] *** Quits: Guest17 (~Guest17@68.171.185.81.rev.sfr.net) (Quit: Client closed)
[18:04:55] *** Joins: cart_man (~rynot@host-78-144-121-71.as13285.net)
[18:06:25] *** Joins: Atlas667 (~Atlas667@193.27.12.10)
[18:07:39] <barix> yeah the intent is clear, doesn't stop the compiler from implicitly (!) casting const whatever* to whatever*
[18:09:37] <mort> well, it would be a warning with any semi-reasonable warning flags
[18:10:00] <mort> anyone writing C without at least -Wall is doing malpractice
[18:12:10] <LordKalma> writing C is a malpractice
[18:12:15] <mort> nah
[18:12:17] <sonOfRa> -Wall -Wextra -pedantic -Werror gang!
[18:12:26] <mort> there are contexts where C is totally appropriate
[18:13:25] <mort> -Werror shouldn't be a thing
[18:13:36] <mort> other than for like CI
[18:14:00] <mort> or, I suppose, in corporate environments where corporate policy ensures that every team member uses the exact same version of the same compiler
[18:14:05] <mort> on the same platform
[18:14:12] <mort> and you only target one platform
[18:14:27] *** Joins: magla (~gelignite@55d4b9e2.access.ecotel.net)
[18:16:11] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 245 seconds)
[18:16:39] *** Joins: jkaye (~jkaye@2601:281:8300:7530:1dd5:12e8:f7a8:958d)
[18:18:29] <paul424> mort, what are you talking about , that is , c++ doesn't have a binary format standard either ...
[18:19:35] <mort> binary format standard? What?
[18:20:17] <paul424> binary interface for functions ...
[18:20:23] <mort> what about that
[18:20:34] <paul424> c++ doesn't have one
[18:20:47] <mort> I know
[18:21:03] <mort> is this meant as a reply to someone else maybe?
[18:22:02] <paul424> no , no , I mean when it comes to portability C is in the same exact situation as C++ , am I right or wrong here  ?
[18:22:18] <mort> yes
[18:22:33] <mort> you're right
[18:23:03] <PJBoy> fuck newlines in linux, god fucking damn it
[18:23:16] <mort> I won't ask
[18:23:23] <PJBoy> > E: Unable to locate package curl
[18:23:32] <PJBoy> that's the most god damn unhelpful error message I've ever seen
[18:23:48] <mort> seems pretty clear, it was unable to locate the package called curl
[18:23:48] <PJBoy> god damn I spent so long googling this issue
[18:24:03] <rpav> PJBoy: what were you doing that produced the error? =P
[18:24:05] <PJBoy> yeah and then you type in `sudo apt install curl` and it works
[18:24:17] <TinoDidriksen> So was it looking for curl\r ?
[18:24:19] <PJBoy> I had `sudo apt install curl` in a shell script
[18:24:21] <PJBoy> yeah
[18:24:33] <mort> why would you try to sudo apt install curl\r
[18:24:46] <PJBoy> I don't think about line endings
[18:24:48] <PJBoy> that
[18:24:51] <rpav> not writing shell scripts in notepad would probably be a start heh
[18:24:51] <mort> don't put garbage bytes in your text files and you're good...
[18:24:56] <PJBoy> that's the kind of thing I don't assume is gonna be an issue
[18:25:01] <mort> why wouldn't you
[18:25:05] <mort> a newline is \n
[18:25:11] <PJBoy> because I'm not a newline nazi
[18:25:14] <mort> you had garbage at the end of your line before your newline
[18:25:15] <PJBoy> like come on
[18:25:27] <mort> this is literally just pebcak
[18:25:30] <PJBoy> only linux makes the newline character an issue
[18:25:35] <rpav> what were you using that _even produced_ DOS newlines, because no linux editor is going to by default
[18:25:36] <mort> no?
[18:25:45] <mort> linux doesn't make newlines an issue, linux deals with newlines very well
[18:25:49] <PJBoy> it could at least report the \r character in the error message
[18:25:51] <mort> \n is a newline
[18:26:02] <mort> I agree the error message could probably have been better
[18:26:10] <mort> they probably didn't expect you to put unprintable ascii at the end of your line
[18:26:41] <mort> this is like putting `sudo apt install curl<ascii code for end of text>\n` in your file, it probably wouldn't handle that very well either
[18:26:44] <PJBoy> no concept of the robustness principle
[18:26:50] <mort> it's plenty robust
[18:26:57] <mort> just don't put garbage unprintable bytes in your text file
[18:27:00] <mort> we've been through this before
[18:27:05] <PJBoy> look up the robustness principle
[18:27:06] <rpav> like "i wrote this .bat file and i didn't think the fact it was EBCDIC was going to be an issue" -> well how did you even write it, because writing something in windows isn't going to _be ebcdic by default_
[18:27:07] <mort> Linux isn't Windows
[18:27:30] <PJBoy> it states that a tool should be able to accept input leniently and produce output strictly
[18:27:31] <rpav> "i did this dumb thing and it's someone else's fault it didn't work" whine whine
[18:27:36] <mort> if some random OS started using end-of-text as their newline character, would you get angry at windows for not dealing with end-of-text-terminated lines very well
[18:27:59] <PJBoy> and newlines I would say should fall under the category is "extremely easy to handle and extremely hard to notice"
[18:28:05] <mort> if some random OS started using end-of-text as their newline character, would you get angry at windows for not dealing with end-of-text-terminated lines very well
[18:28:15] <mort> I'm genuinely curious about your answer
[18:28:19] <mort> and your rationalization for your answer
[18:28:27] <PJBoy> this isn't an OS thing, it's a specific tool thing
[18:28:38] <PJBoy> in this case I'm annoyed at apt
[18:28:39] <rpav> and the _suspicious ongoing lack of explanation_ about how said file was produced in the first place
[18:28:43] *** Quits: paul424 (~tom@apn-46-77-171-107.dynamic.gprs.plus.pl) (Quit: Leaving)
[18:28:53] <PJBoy> or possible at sh
[18:29:10] <PJBoy> probably sh in fact
[18:29:21] <mort> so if you started using a text editor which produces end-of-line-terminated lines, would you get angry at powershell for not interpreting those end-of-line characters as newlines
[18:29:28] <mort> end-of-text characters*
[18:29:29] <PJBoy> I'm annoyed that it doesn't open the text file in text mode, thus handling the issue of newline conversion
[18:29:31] *** Joins: markong (~kvirc@213.146.188.203)
[18:29:41] <PJBoy> this is basic stuff
[18:29:52] <TinoDidriksen> Text mode is an abomination and no OS other than Windows has it.
[18:29:55] <PJBoy> in fact text mode is the default mode
[18:29:59] <mort> if you started using a text editor which produces end-of-line-terminated lines, would you get angry at powershell for not interpreting those end-of-line characters as newlines
[18:30:09] <PJBoy> so those devs go out of their way to make carriage returns break their software
[18:30:11] <mort> end-of-text characters* damn
[18:30:25] <rpav> text editors _do_ handle newlines, mostly-automatically, though they will (for the most part) write in the same format they read, because they assume the user is not an idiot and wants to write a file for the same platform it was read _by default_
[18:30:39] <TinoDidriksen> They don't go out of their way. Text mode does not exist outside Windows.
[18:30:52] <rpav> the ones that i know of also offer to change the newline format, and let you rewrite the file with new-newlines
[18:31:04] <mort> I bet shell just uses the posix functions rather than the stdio functions and windows's posix implementation doesn't do the crlf->lf thing
[18:31:17] <mort> that'd be my guess at least
[18:31:36] <mort> blame windows's garbage posix support if anything
[18:31:57] <TinoDidriksen> Posix forbids text mode, as it should.
[18:32:13] <PJBoy> these claims are all weird
[18:32:19] <mort> how so
[18:32:25] <PJBoy> fopen(filepath, "r") isn't forbidden
[18:32:27] <PJBoy> and it works
[18:32:31] <PJBoy> and it's text mode
[18:32:35] <TinoDidriksen> That opens in binary mode on Posix.
[18:32:49] <PJBoy> so it's what, not C conforming?
[18:33:01] <TinoDidriksen> Only Windows has text mode. All other platforms only have binary mode.
[18:33:07] <PJBoy> that's non sense
[18:33:09] <mort> tino might be saying that posix forbids operating systems from messing with the data when reading? I don't know
[18:33:13] <mort> I don't really get their point either
[18:33:32] <mort> stdio on windows doesn't claim to be a posix-compliant stdio anyways afaik?
[18:33:50] <mort> stdio is specified by the C standard, not posix, I don't know if posix has additional requirements on how stdio works but I would actually guess not
[18:34:37] <mort> TinoDidriksen: if it's too much work, that's fine, but if you don't mind, I'd really like you to quote the part of the posix spec where it prohibits stdio from doing the crlf->lf transformation
[18:34:54] <barix> it does, posix for example specifies a function fdopen() which creates a FILE* on an fd. windows doesn't have that (but it has a similar function for win32 HANDLEs)
[18:35:15] <TinoDidriksen> https://pubs.opengroup.org/onlinepubs/9699919799/functions/fopen.html - "The character 'b' shall have no effect"
[18:35:29] *** Joins: chozorho (~chozorho@2601:146:300:c30::8dd5)
[18:35:30] <mort> barix: but fdopen isn't stdio?
[18:35:52] <mort> TinoDidriksen: interesting
[18:35:53] <barix> fdopen has to be in stdio according to posix
[18:36:01] <TinoDidriksen> So it's formally inverse from what I said, but same effect. Posix doesn't distinguish text/binary mode - there's only 1 open mode, and it's non-destructive.
[18:36:10] <mort> so technically, you're allowed to do the crlf->lf conversion, but if you do that, you can't have a separate concept of binary mode
[18:37:02] <mort> barix: but it's not specified as part of the C standard is what I meant
[18:37:07] <rpav> eating random bytes in a file would be pretty bad
[18:37:39] <barix> it's not part of the c standard but this is one of the additional requirements posix has on how stdio works
[18:37:44] <mort> I didn't know posix prohibited the C standard IO functions from implementing a separate binary mode, TIL
[18:38:27] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:e83a:ac:3e7a:ae8d) (Remote host closed the connection)
[18:38:28] <PJBoy> bah
[18:38:29] <mort> I'm not clear on how relevant this diversion is though
[18:38:40] <PJBoy> I guess linux really doesn't convert CRLF
[18:38:51] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:79f8:8470:8aa2:c43a)
[18:38:52] <TinoDidriksen> Well, PJBoy wants automatic conversion, and Posix effectively prohibits this.
[18:38:57] <mort> for unix tools, \n is the line terminator
[18:39:13] <mort> PJBoy wants automatic conversion _in windows_ though, not in some unix system
[18:39:22] <PJBoy> no
[18:39:26] <TinoDidriksen> Only Windows does this conversion, and it's awful.
[18:39:33] <mort> or are you doing this on a unix system?
[18:39:36] <PJBoy> I want conversion absolutely everywhere
[18:39:41] <mort> why the fuck
[18:39:42] <yolo> use electron for desktop UI cross-platform, unless you have special requirements in that case use Qt/native-GUI-on-each/whatever
[18:39:43] <PJBoy> newlines shouldn't be a thing I have to consider
[18:39:47] <mort> good
[18:39:48] <PJBoy> in any context
[18:39:50] <mort> you don't have to consider it
[18:39:51] <mort> just use \n
[18:39:59] <mort> use the newline character and you're good
[18:39:59] <PJBoy> that's a consideration
[18:40:02] <TinoDidriksen> Microsoft is moving away from it, slowly. Most of their tools now allow selecting which newline mode you want to use.
[18:40:31] <mort> if you're running these tools on a linux system, why the fuck would you expect them to automatically convert \r\n to \n
[18:40:33] <yolo> use c/c++ for system coding on each OSes, use golang/rust for true cross-platform(non-GUI), that build once run on all, truly, you never need visual-studio or x-code
[18:40:34] <TinoDidriksen> I use \n on Windows as well. It's 99% fine these days.
[18:40:42] *** Joins: JeffH (~JeffH@174-16-133-53.hlrn.qwest.net)
[18:40:42] <PJBoy> anyways if various tools want to demand the \n newline, that's fine
[18:40:45] <mort> even if it was allowed by posix, why would you expect linux to implement \r\n -> \n in its stdio
[18:40:56] <PJBoy> I just want an appropriate error message
[18:41:04] <PJBoy> or for the tool to not make that an error
[18:41:07] <mort> it could have printed non-printable garbage as hex
[18:41:25] <TinoDidriksen> Just be happy we're past the macOS days where they used only \r as newline.
[18:41:29] *** Quits: JeffH (~JeffH@174-16-133-53.hlrn.qwest.net) (Remote host closed the connection)
[18:41:35] <mort> if you end up with a random start of transmission character in your command that should probably be printed as hex too
[18:41:44] *** Joins: JeffH (~JeffH@174-16-133-53.hlrn.qwest.net)
[18:41:53] <mort> but this isn't a special consideration for newlines, just for helping people who end up with garbage in their files somehow
[18:42:27] <rpav> unix - "newlines; \n right?" .. macos "unix uses \n, let's use \r instead" .. dos "\r? \n? let's use both!"
[18:42:51] <mort> nah macos has been using \n since 2001 when they switched to unix
[18:42:57] <PJBoy> \n and \r\n make sense in their own special ways
[18:43:06] <PJBoy> \r is quite an embarrassment
[18:43:25] <LordKalma> is it EOL tuesday?
[18:43:32] <rpav> but yeah fortunately these days it's all \n except windows; but really never an issue because why would you create a file on windows that gets used directly on linux
[18:43:32] <PJBoy> today is Thursday
[18:43:37] <LordKalma> Thursday *
[18:43:47] <rpav> one of the days ending in Y
[18:43:56] <LordKalma> rpav, actually that happened to me recently
[18:44:09] <rpav> LordKalma: but how
[18:44:14] <PJBoy> dude carriage returns come up a lot
[18:44:20] <LordKalma> I have some files I had to put in LF because I had a docker mounted volume on windows machine
[18:44:25] <LordKalma> on a linux image
[18:44:26] <PJBoy> a simple copy+paste from the internet will have carriage returns
[18:44:28] *** Parts: garo (~garo@ptr-1pln5puxqxmejxq9kws.18120a2.ip6.access.telenet.be) ()
[18:44:57] <PJBoy> or almost any file that I consume and don't write myself
[18:44:59] <TinoDidriksen> And then there was 0x85 for NEL, which has caused me many issues because that's also the ellipsis character in 1252.
[18:45:00] <rpav> weird .. but generally windows things can read \n too
[18:45:10] *** Quits: JeffH (~JeffH@174-16-133-53.hlrn.qwest.net) (Remote host closed the connection)
[18:45:22] *** Joins: JeffH (~JeffH@174-16-133-53.hlrn.qwest.net)
[18:45:36] <PJBoy> you can't ignore the existence of \r\n
[18:45:45] <mort> generally, text editors just fix your newlines on save
[18:45:46] <TinoDidriksen> You almost can. I do.
[18:45:48] <PJBoy> I mean you can on windows generally speaking
[18:45:54] <PJBoy> but on linux you have to remember to deal with that
[18:46:00] <mort> on unix, text editors fix your newlines by replacing them with \n
[18:46:07] <PJBoy> and that's not been drilled into my mind yet
[18:46:11] <mort> on windows, text editors probably fix your newlines by replacing them with \r\n
[18:46:24] <yolo> try 'git diff' you will see lots of ^M when your git is committed by someone using windows, it sucks
[18:46:28] <mort> PJBoy: you know, you're having this problem because Windows is your main system and sometimes you have to use Linux
[18:46:35] <rpav> i haven't had to care about or deal specifically with newlines in decades, and i do a fair bit of win/lin interop
[18:46:46] <yolo> i just do `find all source files | xargs dos2unix `
[18:46:51] <mort> I've had this problem the other way around, where I have a Linux-style file and open it in a Windows text editor and there are no newlines
[18:46:52] <PJBoy> mort, yes and no
[18:47:02] <mort> open any unix-style file in notepad
[18:47:03] <LordKalma> yolo, git for windows can be set to "checkout as-is, commit unix-style"
[18:47:08] <rpav> even manually converting like dos2unix / unix2dos is a thing of the past
[18:47:10] <PJBoy> my main system is Windows, but almost all my work is Linux
[18:47:15] <LordKalma> notepad.exe is shit
[18:47:18] <LordKalma> notepad++ ftw
[18:47:23] <yolo> LordKalma: yes i knew, but it's by someone else who probably does not do unix at all
[18:47:27] <mort> notepad.exe is the official plain text editor for windows
[18:47:42] <PJBoy> notepad.exe supports LFs now >_>
[18:47:50] <mort> right, a few years ago then
[18:47:53] *** Quits: Hello72 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[18:48:02] <JeffH> We have lots of developers that prefer editing files on windows so weâ€™re constantly dealing with this issue.
[18:48:05] <PJBoy> and frankly it was an embarrassment
[18:48:07] *** Joins: Hello72 (~Hello71@wireguard/contributor/hello71)
[18:48:14] <mort> well, it's reasonable enough
[18:48:19] <mort> the files didn't have line terminators
[18:48:19] <PJBoy> quite possibly the only tool on windows that cares about line endings
[18:48:31] <LordKalma> https://i.gyazo.com/904f83508b6d19230ac4e5fa4548486b.png
[18:48:35] <TinoDidriksen> You can tell git/svn to force LF. And there's .editorconfig to force LF.
[18:48:36] <LordKalma> I had to do this to make it work :)
[18:48:49] <yolo> i was in a 6-hour-happy-moment thinking is windows usable, how great is WSL2, turns out, it's still shit to me
[18:48:58] <PJBoy> yeah we have our SVN configured to handle line endings
[18:48:58] <mort> but the unix world is definitely winning, windows is slowly adopting \n as a valid line terminator
[18:49:13] <TinoDidriksen> First line of all my .gitattributes is always: * text eol=lf
[18:49:15] <LordKalma> Vue.js's LSP server forces LF on all vue files
[18:49:22] <PJBoy> like Tino says, windows almost entirely supports LF as a line ending
[18:49:32] <PJBoy> it also almost entirely supports CRLF
[18:49:32] *** Quits: johnny (~johnny@user/johnny) (Ping timeout: 240 seconds)
[18:49:33] <yolo> i mean, i could not get a head-only-https compiled, installing openssl is a pain, using winsocks' own ssl is brand new
[18:49:41] <PJBoy> that's the ideal world
[18:49:50] <mort> no, that's a terrible world
[18:49:54] <mort> the ideal world is everything supports LF
[18:50:01] <mort> and all files end in LF
[18:50:11] *** Quits: JeffH (~JeffH@174-16-133-53.hlrn.qwest.net) (Remote host closed the connection)
[18:50:14] <PJBoy> that doesn't mean breaking CRLF
[18:50:15] <LordKalma> CRLF is the only true to typewritters
[18:50:19] <LordKalma> meaning it's the BEST
[18:50:29] <PJBoy> why would you *want* CRLF to be an error
[18:50:32] *** Quits: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4) (Remote host closed the connection)
[18:50:33] <PJBoy> how does that benefit anyone
[18:50:39] <LordKalma> you carriage return that mofo with a big slap, then turn that wheel
[18:50:43] <yolo> will only do c++ under linux as before, for the rest 'cross-platform', back to golang
[18:51:01] <rpav> wrong question; let's turn that around: why would you want "text file" to be a separate thing
[18:51:02] <mort> why would you want two competing line ending standards
[18:51:08] <rpav> it's nothing but a cause of pain and error
[18:51:16] <PJBoy> like now that I know that text mode in linux doesn't do newline conversion like I thought it did
[18:51:23] <rpav> thus why would you want CRLF to randomly be mangled
[18:51:26] <PJBoy> I'm suddenly a lot more forgiving that these tools don't accept CRLF
[18:51:29] <LordKalma> <xkcd_15_standards.jpeg>
[18:51:38] <mort> why would you think linux automatically breaks your files for you
[18:51:47] *** Joins: meator (~meator@user/meator)
[18:51:55] <rpav> text editors will entirely support line ending conversion; git will support line ending conversion; etc
[18:51:56] <mort> linux gives you the bytes in your file, nothing more, nothing less
[18:52:50] <PJBoy> not sure why you think that kind of purity is a feature and not a limitation
[18:52:52] <rpav> would you expect all windows-encoded files to work if something expected unicode?
[18:52:56] <yolo> i feel crlf is nothing when you need get unicode working reliably on all OSes, which remains to be a mystery for me
[18:53:08] <rpav> do you expect encodings to magically be understood regardless of context?
[18:53:09] <PJBoy> it's not like CRLF is a completely random garbage character sequence
[18:53:17] <PJBoy> it's an extremely well known and ubiquitous one
[18:53:17] <mort> you're not sure why it's a feature to get the bytes you ask for.....?
[18:53:24] <mort> it's a feature because you get the bytes you ask for
[18:53:30] <rpav> this is just a descent into whiny "it broke and i didn't know this thing"
[18:53:31] <mort> there's a file with some bytes
[18:53:38] <mort> you get those bytes when you ask for them
[18:53:42] <mort> that's how a file works
[18:53:51] <LordKalma> python works with whatever on whatever platform
[18:53:55] <PJBoy> yeah I get that you have a weird purist view
[18:53:56] <LordKalma> therefore python is the best
[18:54:04] <PJBoy> I don't get why you think that view has any benefit to a human
[18:54:05] <mort> this isn't purism, this is just how a computer works
[18:54:16] <mort> there are files, files have content, you get the content in the file
[18:54:17] <PJBoy> you realise computers can in fact convert newlines
[18:54:19] <rpav> anyway, does anyone knows a reliable source of US electronics components? besides like mouser
[18:54:23] <mort> computers can do anything
[18:54:33] <mort> computers can replace every escape character with a 0x77 in case you want that
[18:54:33] <rpav> PJBoy: they can not
[18:54:35] <yolo> "multi-byte char matters", no more "single-byte ascii privilege" :)
[18:55:01] <PJBoy> like I want newlines to be converted because that makes my life as a dev a bit easier
[18:55:03] <rpav> you can't hand a computer a random input stream and have it reliably determine whether it should consider CRLF to be a newline, or LF
[18:55:05] <mort> personally, I like that when I ask for the bytes in a file, I get the bytes in a file
[18:55:13] <PJBoy> you want CRLFs to break tools because???
[18:55:40] <rpav> because they're already broken by nature
[18:55:48] <mort> for the same reason I want a random end-of-text character or a random start-of-transmission character to break tools?
[18:55:53] <mort> I can't expect tools to work with garbage input
[18:55:54] <rpav> the fact you use a broken OS and/or don't know about newlines does not make them not-broken
[18:56:01] <PJBoy> don't be so naive
[18:56:07] <PJBoy> CRLF isn't a random garbage sequence
[18:56:12] <rpav> yes it is
[18:56:18] <mort> well, it has a particular meaning
[18:56:21] <mort> it's a CR byte and an LF byte
[18:56:39] <mort> CRLF by itself is a line which consists of a CR byte and is then terminated
[18:56:45] <PJBoy> I mean I'm not gonna be able to convince you that CRLF is a commonly used line terminator
[18:56:53] <PJBoy> but uh
[18:56:53] <rpav> let's turn this around; why does _windows_ randomly break binary files when they're opened a particular way?
[18:56:55] <mort> I'm not disputing that, I know Windows uses CRLF
[18:56:56] <PJBoy> it's true god damn it
[18:57:05] <mort> unix doesn't use CRLF and that's also fine
[18:57:11] <rpav> like it randomly corrupts files because it seems CRLF and discards a byte
[18:57:22] <rpav> this is broken; why would you want your OS to corrupt files automatically?
[18:57:24] <PJBoy> what do you mean it corrupts files?
[18:57:32] <PJBoy> reading a file isn't the same as corrupting one
[18:57:39] <mort> well, you get corrupt data
[18:57:40] <rpav> you have to make a _special API call_ and set a _special flag_ to not corrupt files in windows
[18:57:57] <PJBoy> interpreting a CRLF as a newline when reading a text file is never going to break anything
[18:58:03] <mort> what do you even do if you have a file with, say, a 4-byte binary length header and then that number of bytes as text
[18:58:14] <mort> can you read the first 4 bytes in binary mode and then switch to text mode for the rest
[18:58:30] <mort> there's no such thing as "binary files" and "text files", there's only files
[18:58:31] <rpav> for some files it doesn't matter, but why doesn't windows _automatically_ handle files and not automatically corrupt them by default?
[18:58:40] <PJBoy> there are such things as text files
[18:58:43] <mort> no
[18:58:47] <PJBoy> you just have to be a human to realise that
[18:58:50] <mort> there's such a thing as a file
[18:58:54] <PJBoy> I'm sorry you couldn't pass the turing test
[18:58:56] <rpav> if i read a file's bytes, i should get a file's bytes; not get a corrupted stream
[18:59:03] <mort> and, in Windows, there's such a thing as asking the system to convert CRLF to LF for you as you read it
[18:59:21] <mort> the file doesn't become a text file because you ask the system to do some search and replace automatically for you
[18:59:46] <rpav> windows breaks this _by default_ and it's pretty dumb
[18:59:49] <PJBoy> a text file is a file that you semantically treat as containing text
[18:59:54] <PJBoy> this isn't rocket science
[19:00:00] <mort> that's actually incorrect
[19:00:08] <mort> a text file is your name for a file that you treat as containing _only_ text
[19:00:12] <mort> what do you do with mixed files
[19:00:27] <PJBoy> I'll consider mixed files on a case by case basis
[19:00:41] <rpav> what is text? utf-8? ascii? ebcdic? codepage 1252? 437?
[19:00:41] <mort> you have to open them as binary files, but then you read a "text file" as a binary file and your tools break again
[19:00:45] <PJBoy> I admit I don't really have much of an opinion there as it hasn't come up
[19:00:52] <rpav> naivete abounds; but it's not the OS that's naive here
[19:00:55] <mort> length prefixing is very common
[19:01:07] <PJBoy> rpav, yeah
[19:01:10] <PJBoy> any of those
[19:01:21] <rpav> ðŸ“œ
[19:01:23] <mort> anyways, just use \n and you're good
[19:01:36] <mort> we've had this discussion before, and it remains equally true this time
[19:01:40] <mort> I have things to do, bye
[19:08:31] <mort> one last thing: something you will encounter a lot in the world of unix is that it's just not Windows, and a lot of the tools are designed in a world where Windows wasn't even a thing, so as you ask things like "why wouldn't they design this to be more compatible with Windows?" the answer is probably that; it might have made sense, today, to make a
[19:08:31] <mort> system where \r\n is somehow treated specially with special errors for the sake of Windows users, but that literally wasn't a thing when it was made
[19:09:35] <mort> it's not incorrect, in the abstract, for a system to decide that the only line terminator is \n and to pay no attention to any other sequence, it only becomes potentially problematic when you put such a system in a world where the most popular consumer operating system uses a different sequence and the two systems have to interact
[19:09:51] <mort> that's not meant as an argument in either direction, just as a different perspective
[19:21:51] *** Quits: pac1 (~pac1@pool-72-74-61-158.bstnma.fios.verizon.net) (Remote host closed the connection)
[19:21:53] <PJBoy> eh idk about that perspective
[19:22:12] <PJBoy> the C standard is decades old too and it accounted for the possibility of accounting for newlines
[19:22:34] <PJBoy> although unfortunately didn't mandate accounting for newlines
[19:22:41] *** Quits: jkaye (~jkaye@2601:281:8300:7530:1dd5:12e8:f7a8:958d) (Ping timeout: 268 seconds)
[19:22:45] <PJBoy> as I have learnt today
[19:24:00] <mort> unix is 50 years old
[19:24:20] <PJBoy> and updated regularly
[19:25:00] <mort> Windows wasn't even a thing for the first decade and a half of the life of unix
[19:25:23] <mort> unix was probably 2-2.5 old by the time windows took over the world
[19:25:45] <PJBoy> I guess DOS would have been the introduction of \r\n
[19:25:53] <PJBoy> and the inspiration for C to consider newlines
[19:26:11] <mort> unix was a decade old by the time dos came around
[19:26:56] <PJBoy> so windows came out 5 years after DOS?
[19:27:10] <PJBoy> I'm surprised by that
[19:27:12] <mort> wikipedia says so
[19:27:47] <mort> windows 1.0 came out late 1985
[19:27:52] <PJBoy> how many of the linux tools that we use today predate C/DOS though
[19:28:27] <Haohmaru> ls ?
[19:28:48] <mort> yea there's probably a ton of tools which were made during the first decade of posix
[19:29:00] <PJBoy> ls is part of gnu, which isn't so old
[19:29:08] <mort> ls is wayyy older than gnu
[19:29:19] <PJBoy> on my system it's part of gnu
[19:29:21] <PJBoy> <_<
[19:29:28] <Haohmaru> maybe it's a gnu fork of ls
[19:29:42] <mort> the ls implementation most linux system uses today is from gnu, but gnu implements its own version of the old unix utilities
[19:29:51] <PJBoy> yeah
[19:30:21] <PJBoy> so they potentially had the perspective of handling CRLF newlines
[19:30:35] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[19:30:37] <PJBoy> and either chose to not handle them, or didn't tap into that potential
[19:30:48] <mort> I'm not sure what potential you see
[19:30:59] <mort> GNU's priorities were absolutely not to be compatible with windows
[19:31:04] <PJBoy> the potential of having the perspective that newlines could be handled
[19:31:14] <PJBoy> you know
[19:31:21] <mort> they had the unix perspective of how newlines could be handled: \n is a line terminator
[19:31:26] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[19:31:26] <PJBoy> why introduce an error when you can gracefully accept another common form of newline
[19:31:58] <PJBoy> not to reignite the argument
[19:32:09] <PJBoy> but that's what I meant by the potential perspective
[19:32:11] <mort> windows has one way of handling newlines with its own advantages and disadvantages, there's no reason for gnu to have chosen to be incompatible with unix in order to be compatible with windows?
[19:32:26] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[19:32:32] <mort> my point isn't that the gnu people didn't have any way of knowing that windows-style crlf handling was even an alternative
[19:32:48] <PJBoy> gnu doesn't predate windows does it?
[19:32:50] <mort> my point was that unix is old, and modern unix-like systems follow the unix traditions, not the dos traditions
[19:33:01] <PJBoy> the copyright date on this ls program in the man page is 2018
[19:33:08] <PJBoy> that's certainly well after windows took off
[19:33:20] *** Quits: grep_xtrange (~x@ac255238.ppp.asahi-net.or.jp) (Ping timeout: 260 seconds)
[19:33:26] <mort> the copyright date is updated when the source code is updated
[19:33:33] <mort> apparently gnu is from the early 80s, before windows but after dos
[19:33:48] <PJBoy> ok
[19:33:51] <mort> but my point doesn't rest on whether or not gnu is after windows
[19:34:27] <PJBoy> I personally don't see the issue in handling both kinds of newline
[19:34:28] <mort> my point is that modern unix systems follow the unix model in a lot of ways, while the modern windows follows the windows/dos model
[19:34:38] <PJBoy> it's never been a problem in tools that do allow that
[19:34:41] <mort> windows handling both kinds of newline is a very recent development
[19:34:49] <PJBoy> or at worst, make a flag for strict newlines
[19:35:09] <PJBoy> for no other reason that to make people like me happy
[19:35:11] <mort> do you know what adding text mode to linux would entail
[19:35:12] <PJBoy> *than
[19:35:43] <PJBoy> ok maybe linux has doubled down on its text vs binary mode unification thing
[19:35:47] <mort> it would break a whole bunch of programs, it would slow everything down significantly by adding a new parser and generator inbetween everything which passes text around, it would be fundamentally incompatible with basic assumptions of what you can do in a linux system
[19:35:51] <PJBoy> but the tools can still choose to handle this
[19:36:12] <mort> do you know how much code is out there in all the different implementations of all the unix tools
[19:36:27] <mort> most of which are different projects by different organizations
[19:36:31] <cbreak> any program that handles LF correctly also reads CRLF as newlines
[19:36:38] <PJBoy> there's a lot of unix tool implementations
[19:36:45] <cbreak> it just also has some stray CR in there it doesn't know what to do with
[19:36:49] <PJBoy> are you arguing that no unix tool can ever be improved because of this?
[19:36:54] <mort> adding universal crlf support across the unix landscape would be a decades-long effort, and have no advantages
[19:37:12] <mort> individual unix tools can be improved
[19:37:17] <cbreak> this useless CR doesn't give any information beyond what the LF already does
[19:37:25] <mort> making a fundamental change in the unix ecosystem as a whole is a big undertaking
[19:37:42] <PJBoy> I'm not asking for the entire unix ecosystem to change
[19:37:47] <mort> what are you asking for then
[19:37:50] <PJBoy> this is really a complaint on a tool by tool basis
[19:37:59] <mort> which tool are you complaining about
[19:38:04] <PJBoy> if notepad didn't handle CRLFs or LFs, I'd complain about it
[19:38:05] <mort> sh? If so, which sh implementation
[19:38:14] <PJBoy> yeah sh is an example
[19:38:31] <PJBoy> specifically dash
[19:38:35] <mort> dash? bash? zsh? osh?
[19:38:39] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[19:38:43] <mort> ok nice
[19:38:49] <mort> now you have a script which works on debian but not on arch
[19:38:55] <mort> because debian uses dash and arch uses bash
[19:38:57] <PJBoy> I see your point
[19:39:08] <PJBoy> but script incompatibilities are nothing new
[19:39:24] <PJBoy> bash has comparison operators that dash doesn't support
[19:39:49] <mort> but you'd be equally annoyed for the same reasons if you tried to run a script on an arch system and it gave you the same error
[19:39:55] <mort> or if you tried to run the script with 'bash myscript.sh'
[19:40:02] <mort> or changed the shebang to #!/bin/bash because you needed a bash feature
[19:40:53] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[19:41:04] <mort> then you'd write a makefile and be annoyed that GNU make doesn't handle it
[19:41:10] <mort> so you'd get it fixed in GNU make
[19:41:22] <mort> but then you try to run the makefile in BSD make and get equally annoyed again
[19:41:27] <PJBoy> yeah indeed
[19:41:35] <PJBoy> I don't disagree with any of that
[19:41:40] <Haohmaru> << "wub\ndub";
[19:41:41] <geordi> wub [+ 1 discarded line]
[19:41:42] <mort> seems easier to just accept that, on unix, lines are terminated by \n
[19:41:43] <PJBoy> that's the price you pay for adding a feature to a tool
[19:42:04] <mort> because, on unix, lines are terminated by \n
[19:42:06] <PJBoy> and yeah sure, maybe the cost doesn't outweigh the benefit
[19:42:16] <Haohmaru> << "wub\0x0Adub";
[19:42:16] <PJBoy> that would be a reasonable place to disagree
[19:42:17] <geordi> wub
[19:42:52] <TinoDidriksen> \0x is just \0 followed by a literal x. \x is separate.
[19:43:09] <Haohmaru> what was the syntax then
[19:43:14] <Haohmaru> \x0A ?
[19:43:17] <TinoDidriksen> Yes
[19:43:23] <Haohmaru> << "wub\x0Adub";
[19:43:23] <geordi> wubï¿½ub
[19:43:28] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:3190:4531:7023:e50c)
[19:43:28] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:3190:4531:7023:e50c) (Changing host)
[19:43:29] *** Joins: skapata (~Skapata@user/skapata)
[19:43:35] <PJBoy> anyways I'll try and remember to sort out my newlines on linux, I exactly have a choice
[19:43:40] <PJBoy> *don't exactly
[19:43:55] <TinoDidriksen> And because \x reads all hex nibbles, that d is part of it.
[19:44:07] <PJBoy> but god damn, newline issues are hard to find
[19:44:09] <Haohmaru> uh
[19:44:35] <PJBoy> and I think it's a shame that they come up
[19:44:36] <TinoDidriksen> << "wub\xa" "dub"
[19:44:37] <geordi> wub [+ 1 discarded line]
[19:45:03] <Haohmaru> << "wub" "\x0D" "dub";
[19:45:04] <geordi> wub[\r]dub
[19:46:03] <Haohmaru> std::dubstep
[19:46:34] <LordKalma> what font do I use on windows to see <geordi> wubï¿½ub
[19:47:53] <PJBoy> you mean what character set has a ADh character
[19:48:21] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[19:48:23] <mort> the thing I agree with is that tools could, in general, be better about syntax errors involving non-printable or otherwise invisible characters
[19:48:53] <mort> pass error strings through a thing which adds hex escapes for that stuff
[19:49:09] <PJBoy> yeah
[19:49:24] <mort> ...I should make my own language do that
[19:49:26] <PJBoy> and error handling *is* a thing that can be done on individual tools without worrying about other implementations of that tool
[19:49:35] <mort> yea
[19:49:49] <Haohmaru> LordKalma what irc client are you using there?
[19:49:54] <LordKalma> hex chat
[19:50:03] <PJBoy> I'll completely admit that CRLF is dumb
[19:50:05] <Haohmaru> coz mIRC shows it despite me using a bitmap font which lacks that glyph
[19:50:20] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[19:50:21] <LordKalma> hexchat has alternate font settings
[19:50:21] <PJBoy> although I guess occasionally useful ish
[19:50:24] <LordKalma> but I dunn o which one to use
[19:50:30] <Haohmaru> LordKalma which font are you using now?
[19:50:52] <PJBoy> 'cause on linux you can make \r and \n act like "to start of line" and "move cursor down" separately
[19:50:53] <Haohmaru> maybe try something like liberation mono
[19:50:53] <TinoDidriksen> 0xAD (U+00AD) is not a printable character. It's a soft-hyphen.
[19:51:48] <Haohmaru> i see it as a diamond with a questionmark in it
[19:51:48] <PJBoy> but windows that uses CRLF doesn't have LF as a "move cursor down" ever, so the CRLF is dumb there
[19:52:02] <Haohmaru> i mean a rhomb
[19:52:46] <LordKalma> Haohmaru, Consolas, with alternative "Segoe UI Emoji,Lucida Console,Segoe UI Symbol"
[19:53:10] <Haohmaru> x_x no idea then, i only use hexchat on the debian
[19:53:16] <TinoDidriksen> Standardizing on either LF or CRLF made sense at the time. Standardizing CR did not, and I wonder how that even came to be.
[19:53:50] <PJBoy> yeah same here
[19:54:07] <LordKalma> because the internet does everything fucking different
[19:54:40] <PJBoy> internet is irrelevant to the LF CRLF CR thing
[19:54:42] <Haohmaru> gotta have little incompatibilities everywhere so that IT folks have what to do
[19:55:08] <TinoDidriksen> Internet uses CRLF.
[19:55:21] <TinoDidriksen> Many RFCs require CRLF, but most tools handle LF.
[19:55:24] <mort> I think the argument in favour of crlf is fairly strong fwiw
[19:55:50] <LordKalma> it's the only one that behaves like a type writter
[19:55:59] <mort>  terminals, in "cooked" mode, will do the lf-> crlf translation themselves
[19:56:06] <Haohmaru> LordKalma LFCR would too, no?
[19:56:16] <LordKalma> you CR first
[19:56:21] <PJBoy> I lean more towards LF being better
[19:56:38] <mort>  the fact that there are multiple modes means that sometimes, your terminal is in the wrong mode and the line feed happens but the cursor doesn't go back to the start of the line
[19:56:45] <LordKalma> anyway, for example, the console/terminal thing: print("\r") does a literal carriage return in python
[19:56:49] <LordKalma> aka rewrites the current line
[19:57:00] <mort> it's not that uncommon to just randomly encounter that bug in various contexts on a Linux system
[19:57:04] <PJBoy> I think if you really wanted to move down without moving left, you should have to use an ASCII command
[19:57:11] <LordKalma> hahaha line feed without return... RealTerm has that "bug"
[19:57:14] <PJBoy> yeah I get that bug from GDB all the time
[19:57:46] <LordKalma> imagine connecting this output to an actual teletyper
[19:57:51] <LordKalma> and just watch the text go diagonally
[19:57:58] <mort> it happens with systemd's output during boot and shutdown sometimes
[19:58:07] <LordKalma> yeah indeed
[19:58:49] <mort> really, Windows and unix only differ in where in the stack they choose to do the lf -> crlf conversion
[19:58:55] <LordKalma> Rust drama
[19:58:56] <LordKalma> https://blog.rust-lang.org/inside-rust/2021/11/25/in-response-to-the-moderation-team-resignation.html
[19:59:44] <mort> ooo
[19:59:49] <mort> I was waiting for this
[20:00:05] <LordKalma> https://www.theregister.com/2021/11/23/rust_moderation_team_quits/
[20:00:22] <TinoDidriksen> Rust? #C++-social
[20:00:27] <LordKalma> hahah sorry :)
[20:00:40] <Haohmaru> !rust
[20:00:42] <nolyc> Rust is composed of iron oxides. In colloquial usage, the term is applied to red oxides, formed by the reaction of iron and oxygen in the presence of water or air moisture.
[20:01:04] <Haohmaru> ##metalurgy
[20:01:17] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Remote host closed the connection)
[20:01:52] <mort> oh it's a non-update
[20:02:12] <mort> you'd sure hope the core team is committed to the long term health of the project
[20:04:00] <LordKalma> We need #c++-others-but-not-social-politics-and-asshats
[20:05:20] <Haohmaru> a templated version of this channel which accepts all kinds of T
[20:06:16] *** Joins: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[20:07:03] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[20:07:47] <yolo> is there a channel for macos, just found out brew actually has a linux version
[20:08:19] <mort> macosx is a channel
[20:08:59] <yolo> i was new to macos and had various problems until I realized its make/bash are like 5 years old by default
[20:09:09] <mort> yea
[20:09:16] <mort> the last GPLv2 version
[20:09:34] <LordKalma> default apple-clang is also old af iirc
[20:09:36] <yolo> so without brew macos is pretty much junk, i was surprised nowhere stated that with bold fonts and it took me days to realize that
[20:09:59] <LordKalma> developing on a mac involved having brew
[20:10:01] <LordKalma> that's for sure
[20:10:04] <LordKalma> *involves
[20:10:17] <mort> brew is annoyingly slow, but yeah it's necessary
[20:10:32] *** Quits: cart_man (~rynot@host-78-144-121-71.as13285.net) (Quit: Konversation terminated!)
[20:10:42] <mort> at least they're on zsh by default for their interactive shell now, not on ancient bash
[20:10:57] <TinoDidriksen> ##macdev exists.
[20:11:16] *** xShad0w is now known as shad0w
[20:11:24] <mort> oh I was looking for something like that
[20:11:28] <TinoDidriksen> I still prefer MacPorts.
[20:11:51] <mort> ##macdev has 2 people tho
[20:12:11] <TinoDidriksen> Oh, guess it didn't survive the move.
[20:12:11] <mort> you mean #macdev
[20:12:41] <mort> namespacing in libera is weird
[20:12:58] <Haohmaru> most ## channels from freenode don't need to be ## here
[20:13:10] <LordKalma> many channels, as the C++ ones took the liberty of not including the ##
[20:13:13] <Haohmaru> just like this one ;P~
[20:13:14] <LordKalma> since that's not enforced here
[20:13:26] <TinoDidriksen> I usually test if there's a /topic and #macdev didn't have one but ## did.
[20:13:50] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[20:15:35] <TinoDidriksen> # vs. ## is enforced here for registered channels, but there's different criteria.
[20:16:41] *** Joins: great_taste (~great_tas@190.32.235.20)
[20:16:56] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[20:17:16] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[20:22:20] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 260 seconds)
[20:23:32] *** Quits: proller (~p@2a02:6b8:0:40c:3798:4c02:3d64:9098) (Ping timeout: 240 seconds)
[20:26:09] <yolo> maybe in the future all the distros should only including the very minimum packages on a root-only root filesystem and let python/ruby/go/etc all reside under $HOME, or via a docker
[20:26:48] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[20:26:57] <yolo> i found myself using go/python/even-the-newest-gcc all under $HOME or via docker these days
[20:27:47] <yolo> adding snap/flatpak/appimage then yes it is an even larger mess
[20:29:14] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[20:29:25] <yolo> multiply it with macos/linux/windows/android/ios, then vcpkg/conan/choco/apt/yum/pkg/opkg/...
[20:30:05] <yolo> no wonder we need more software developers
[20:30:12] <barix> you're basically describing nixos
[20:31:28] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[20:32:10] <yolo> so yet another dimension
[20:34:19] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Quit: WeeChat 3.1)
[20:36:16] *** Joins: reumeth (~reumeth@user/reumeth)
[20:39:16] <mort> TIL: Windows doesn't support 64-bit files....
[20:39:26] <LordKalma> wdym 64 bit files?
[20:39:26] <mort> all the stdio functions deal in 32-bit offsets and sizes
[20:39:35] <mort> sorry, >4GiB files
[20:39:37] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[20:39:38] <yolo> nixos for macos and linux "only", docker for macos/linux/windows
[20:39:41] <LordKalma> yes it does?!
[20:39:44] <mort> no
[20:39:46] <LordKalma> FAT32 doesn't
[20:39:49] <mort> ftell for example returns a long
[20:39:53] <mort> that's 32-bit on windows
[20:39:53] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:39:56] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 245 seconds)
[20:40:25] <yolo> i think there is a long file offset to bypass 32-bit? unless your filesystem(FAT32) limits it
[20:40:27] <barix> doesn't windows have fseeko() for 64 bit offsets?
[20:40:56] <mort> fseek takes a long at least, so fseek also doesn't support >4GiB files
[20:41:05] <LordKalma> well, I've deffo used files that big
[20:41:15] <mort> it seems like Windows consistently uses 32-bit types for all the stdio functions, so a C program which uses stdio only works with <4GiB files
[20:41:22] <mort> or, well, 2GiB because signed
[20:41:42] <mort> in my eyes, that's a system which doesn't support >2GiB files
[20:41:47] <yolo> does not seem right
[20:41:50] <cbreak> damn signed...
[20:42:00] <barix> ok i searched for it, windows has _fseeki64() which is basically their version of fseeko()
[20:42:04] <LordKalma> https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/ftell-ftelli64?view=msvc-170
[20:42:09] <yolo> on ntfs you should be able to go beyond 2GB/4GB with ansi-c
[20:42:11] <LordKalma> ftell, _ftelli64
[20:42:21] <mort> there's a reason I keep specifying stdio functions
[20:42:33] <LordKalma> https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/ftell-ftelli64?view=msvc-170#requirements
[20:42:38] <LordKalma> _ftelli64 	<stdio.h>
[20:42:42] <mort> a standard C program which uses C's standard I/O functions will only work with 2GiB files
[20:42:48] <LordKalma> hum, fair fair
[20:42:57] <mort> I'm not talking about Windows's stdio.h, I'm talking about the C standard I/O library stdio
[20:43:33] <cbreak> that's probably a combination of windows having stupid named keyword types
[20:43:36] *** Quits: magla (~gelignite@55d4b9e2.access.ecotel.net) (Quit: Stay safe!)
[20:43:36] <mort> maybe it's wrong to call that stdio, if so my bad
[20:43:43] <PJBoy> your claim was that Windows doesn't support 64-bit files
[20:43:44] <cbreak> and C having a crappy FS API
[20:43:46] <PJBoy> but it does
[20:44:00] <cbreak> that uses said keyword types
[20:44:07] <cbreak> instead of proper special-purpose ones
[20:44:09] <yolo> mort: which func exactly is limited to 32bit int?
[20:44:18] <mort> in my eyes, a system whose C library's standard I/O functions doesn't support >2GiB files is a system which doesn't support >2GiB files
[20:44:27] <cbreak> yolo: https://en.cppreference.com/w/cpp/io/c/fseek only uses long
[20:44:40] <cbreak> it should at least use size_t, or better a file size specific type
[20:44:41] <PJBoy> that seems inaccurate to me
[20:44:52] <LordKalma> <mort> TIL: Windows doesn't support 64-bit files.... // Then you meant "standard C on MSVC uses a small type for file IO"
[20:44:54] <mort> off_t probably
[20:45:00] <mort> LordKalma: no, I meant the system
[20:45:01] <PJBoy> if you said the Microsoft C runtime doesn't support 64-bit file access, maybe
[20:45:06] <mort> 18:14 <mort> in my eyes, a system whose C library's standard I/O functions doesn't support >2GiB files is a system which doesn't support >2GiB files
[20:45:16] <mort> any C program written against the C standard will not support files >2GiB
[20:45:21] <cbreak> mort: linux doesn't support more than 32 bit file sizes either
[20:45:25] <cbreak> unless you use 64 bit linux
[20:45:26] <mort> cbreak: it does..?
[20:45:28] <mort> right
[20:45:34] *** Quits: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 256 seconds)
[20:45:35] <barix> mort: that depends on whether long is a 32-bit type, which the standard is indifferent about
[20:45:43] <mort> cbreak: yes, the same criticism could be made against 32-bit linux
[20:45:51] <mort> barix: windows defines long as 32-bit
[20:46:00] <barix> yeah but the c standard doesn't
[20:46:03] <mort> so?
[20:46:05] <PJBoy> anyways, does fseek only supporting long actually imply that the FILE's internal file position is only long?
[20:46:09] <PJBoy> I don't think so
[20:46:16] <barix> 'any C program written against the C standard will not support files >2GiB' is not correct
[20:46:17] <PJBoy> fpos_t is implementation defined IIRC
[20:46:25] <mort> barix: ... in Windows
[20:46:37] <mort> any C program written against the C standard will not support files >2GiB when ran on Windows
[20:46:44] <PJBoy> you might have to use fseek in a loop to seek where you need to go
[20:46:48] <PJBoy> but it's still possible
[20:46:53] <cbreak> https://en.cppreference.com/w/cpp/io/c/ftell also returns long
[20:46:55] <mort> you still can't ftell
[20:47:00] <PJBoy> yeah I guess
[20:47:04] <PJBoy> you can fgetpos though
[20:47:31] <LordKalma> I've used python on Windows and read and wrote files with 10gbs with it
[20:47:37] <LordKalma> So idk how that's done
[20:47:45] <LordKalma> But python on Windows is build with msvc
[20:47:49] <LordKalma> Perhaps not standard C
[20:48:13] <barix> python probably uses platform specific apis instead of ftell/fseek
[20:48:20] <cbreak> I don't think any sane windows program would use C stdlib
[20:48:32] <mort> there are definitely APIs in Windows which can deal with files >2GiB
[20:49:18] <cbreak> does windows even support C99 nowadays?
[20:49:20] <mort> just like there are APIs for dealing with paths >235 or whatever characters, but I'd still be comfortable claiming Windows doesn't support paths >235 or whatever characters
[20:49:42] <PJBoy> MSVC doesn't do complex numbers still
[20:49:49] <LordKalma> cbreak, it's C11 and C18 compliant
[20:49:51] <PJBoy> or was it just imaginaries
[20:49:53] <PJBoy> either way
[20:49:54] <LordKalma> not C99 because complex.h
[20:49:55] <mort> afaik, windows didn't support C99 due to VLAs, and it supports C11 because VLAs were made optional there
[20:50:03] <mort> not supporting VLAs is probably a reasonable choice
[20:50:03] <LordKalma> yap
[20:50:08] <mort> not supporting complex numbers seems weird
[20:50:19] <cbreak> there's <complex>
[20:50:21] <LordKalma> also, that's why I don't respect the C standard
[20:50:23] <PJBoy> I believe it does support VLAs now(?)
[20:50:24] <cbreak> so no point on the C thing
[20:50:41] <mort> you can't use <complex> from C
[20:50:45] <PJBoy> I can't bring myself to check
[20:50:46] <LordKalma> any standard that makes big language features OPTIONAL after 12 years deserves no respect
[20:50:49] <mort> which means there's a point in <complex.h>
[20:50:54] <yolo> there is complex in C99 i think
[20:51:03] <LordKalma> <complex.h> has *some* stuff on msvc
[20:51:06] <LordKalma> but it's pretty shit
[20:51:16] <LordKalma> yolo, it was made optional retroactively
[20:51:18] <mort> MS just doesn't care about standards
[20:51:27] <LordKalma> so by the C11 standard you don't have to have <complex>
[20:51:52] <yolo> for math, use fortran
[20:51:57] <LordKalma> hahahaha
[20:51:57] <LordKalma> no
[20:52:04] <PJBoy> according to https://www.gnu.org/software/libc/manual/html_node/Portable-Positioning.html fpos_t is what you would use on 32-bit linux to do 64-bit file offset handling
[20:52:20] <PJBoy> that probably holds on windows too
[20:52:27] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Remote host closed the connection)
[20:52:46] <mort> man, Windows mostly doesn't support files >2GiB, Windows mostly doesn't support paths >260 characters
[20:52:51] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[20:52:52] <LordKalma> https://devblogs.microsoft.com/cppblog/c11-and-c17-standard-support-arriving-in-msvc/
[20:52:55] <mort> what is this, a system which hasn't evolved since the 80s?
[20:53:00] <PJBoy> that path limit was lifted with windows 10
[20:53:04] <mort> no?
[20:53:05] <barix> no, on linux you use the POSIX function fseeko()/ftello() (which are not portable... to windows). fpos_t is an opaque struct so you can't use it for anything except passing it to fsetpos
[20:53:08] <LordKalma> paths >260 characters is an opt-out option
[20:53:10] <yolo> maybe in the future all should be specifying uint32, int64, uint8, be specific
[20:53:13] <PJBoy> bro my path is way longer than 260 chars
[20:53:14] <LordKalma> you need to set something
[20:53:17] <LordKalma> I do have it set
[20:53:33] <yolo> int, long are too platform-dependent, especially 'long', which should be avoided at all costs
[20:53:34] <mort> there are APIs to deal with paths >260 chars, but the old APIs still don't work with that
[20:53:41] <LordKalma> PJBoy, a single file path, not $PATH
[20:53:49] <mort> does even explorer.exe work with long paths yet
[20:53:56] <PJBoy> oh you mean MAX_PATH
[20:54:03] <yolo> 'long' is like, i can be 32bit or 64bit, catch me if you can
[20:54:03] <mort> the 260 character limit yes
[20:54:05] <LordKalma> but yeah, there are some $PATH bs limitations that some software complains about
[20:54:17] <PJBoy> MAX_PATH and PATH_MAX are weird variables
[20:54:17] <mort> "some software", such as explorer.exe
[20:54:23] <PJBoy> they're ont reliable
[20:54:27] <PJBoy> *not
[20:54:31] <LordKalma> mort, no I mean the search path
[20:54:35] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:79f8:8470:8aa2:c43a) (Ping timeout: 268 seconds)
[20:54:37] <mort> ah
[20:54:39] <LordKalma> there are some installers that can't append to PATH if it's too big
[20:54:47] <LordKalma> also, let me shill: https://developercommunity.visualstudio.com/t/Support-for-C99-Complex-numbers/1409049
[20:54:50] <PJBoy> see https://insanecoding.blogspot.com/2007/11/pathmax-simply-isnt.html
[20:54:56] <cbreak> why would installers want to append to PATH?
[20:55:07] <cbreak> they should just install their crap into the right place
[20:55:12] <LordKalma> hahahaha
[20:55:15] <mort> so Windows doesn't support deep directory hierarchies, Windows doesn't support long $PATH variables, Windows doesn't support files >2GiB
[20:55:15] <LordKalma> thats not how windows works
[20:55:24] <LordKalma> (re cbreak )
[20:55:25] <mort> all unless you use weird new non-standard APIs which lots of software doesn't use
[20:55:42] <PJBoy> nothing new or non standard about fsetpos and fgetpos
[20:55:59] <PJBoy> and yeah the $PATH length limit got lifted
[20:56:05] <yolo> i hope rust fixed the sign/unsigned char, long/int ambiguous problem, at least golang did for the most part
[20:56:14] <LordKalma> https://i.gyazo.com/3c5be9e5c7a5d5187d55e40c211bc724.png
[20:56:17] <LordKalma> this is my $PATH
[20:56:22] <mort> when you say the limit "got lifted"
[20:56:35] <mort> do you mean a new API was introduced which won't ever really get full adoption and the old API still has the limit
[20:56:43] <mort> as is the case with file sizes and the length of a file path
[20:56:48] <PJBoy> $PATH doesn't need an API
[20:56:55] <PJBoy> it's just an environment variable
[20:57:16] <mort> they might have a length-limited API to set or get the length of an env var for all I know
[20:57:24] <mort> MS seems to love arbitrary hard-coded very small length limits
[20:57:25] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Ping timeout: 250 seconds)
[20:57:32] <yolo> LordKalma: seems like a windows PATH that is full of non-Windows stuff
[20:57:36] <PJBoy> I mean that's a fair consideration
[20:57:46] <LordKalma> yolo, so?
[20:57:58] <LordKalma> apt install firefox; # firefox is in path?
[20:58:28] <cbreak> mort: I don't think that's unique to MS :(
[20:58:38] <LordKalma> https://github.com/pothosware/PothosSDR/wiki/Tutorial#download-and-install
[20:58:41] <mort> linux mostly avoids it
[20:58:42] <LordKalma> Warning! PATH too long installer unable to modify PATH!
[20:58:49] <PJBoy> https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-getenvironmentvariable specifies a max length of 32767
[20:58:51] <LordKalma> "There is a known issue with the NSIS installer where it cannot modify the PATH environment variable over a certain length. "
[20:58:53] <mort> I think the file path limit for linux is like 2k or 4k chars
[20:59:09] <LordKalma> it seems to be a problem with the NSIS package in this case
[20:59:14] <PJBoy> and that's ancient API
[20:59:36] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[20:59:41] <PJBoy> linux file path limits vary
[20:59:46] <PJBoy> but yeah 4k sounds about right
[20:59:59] <PJBoy> mac OS X is 1k
[20:59:59] <cbreak> mort: the max name length in ZFS is 256 I think
[21:00:16] <mort> right
[21:00:25] <mort> wait on ZFS? I read NFS
[21:00:34] <xq> fgetpos on windows will still return a 32bit int, right?
[21:00:35] <LordKalma> I once had an ntfs drive I was sharing between windows and linux
[21:00:37] <mort> ZFS almost certainly has a limit bigger than 256, maybe that's the max length of a single file?
[21:00:52] <LordKalma> and the name linux puts on saved screenshots is sooo long I couldn't open/delete the file from windows
[21:01:06] <PJBoy> xq, fgetpos doesn't return an int
[21:01:16] <PJBoy> it returns an fpos_t, which is an opaque struct
[21:01:23] <PJBoy> implementation defined
[21:01:32] <xq> https://en.cppreference.com/w/cpp/io/c/fgetpos
[21:01:34] <xq> says int
[21:01:36] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Ping timeout: 245 seconds)
[21:01:43] <PJBoy> that's the error code
[21:01:46] <PJBoy> C is fun
[21:01:57] <xq> oh, I see
[21:01:57] <LordKalma> pos 	- 	pointer to a fpos_t object to store the file position indicator to
[21:02:04] <PJBoy> not even error code, a bool indicating that errno is set
[21:02:06] <mort> https://doc.owncloud.com/server/next/admin_manual/troubleshooting/path_filename_length.html this claims zfs has a file length limit of 255 but no path length limit
[21:02:10] <LordKalma> remember my bananas comment from earlier
[21:02:35] <LordKalma> typedef error_code int; error_code bananas_add(banana *b1, banana *b2, banana *result);
[21:02:43] <LordKalma> that's how C works
[21:02:45] <PJBoy> nah even that API is too sane
[21:03:30] <PJBoy> C API is `typedef BOOL int /* to support C89 */; BOOL banans_add(banana *b1, banana *b2, banana *result);`
[21:03:34] <PJBoy> with the error stored to errno
[21:03:52] <PJBoy> and I got the typedef backwards, whatever
[21:03:59] <LordKalma> void bananas_get_last_error(int* output);
[21:04:06] <PJBoy> yeah haha
[21:04:08] <LordKalma> Sometimes they don't even return ints  haahah
[21:04:15] <xq> this would  be funny if it wasnt so real
[21:04:33] <LordKalma> void foo(int* outarg) is just SO FUCKING STUPID
[21:04:52] <PJBoy> maybe outarg is optional
[21:05:03] <mort> y'all are wrong
[21:05:14] <LordKalma> you wouldn't call bananas_get_last_error if you didn't care?
[21:05:32] <mort> void foo(), BOOL check_error(), see error in errno
[21:05:32] *** Quits: r-g (~r-g@163.172.58.132) (Quit: r-g)
[21:05:58] <mort> maybe check_error returns -1 if check_error itself fails
[21:06:05] <PJBoy> ahahaha
[21:06:08] <LordKalma> now THAT's pro API design
[21:06:46] <LordKalma> One of the worst APIs I've used from the C world was the SDRPlay API
[21:06:53] <LordKalma> it's an API for a series of hardware devices
[21:06:56] <LordKalma> and it's just insane
[21:07:06] <LordKalma> it's a very very very very nested struct with all kinds of settings
[21:07:21] <LordKalma> and some implicit settings that you have to know (aka reading the tables)
[21:07:23] <mort> hardware people are literally insane
[21:07:33] <PJBoy> yup
[21:07:36] <cbreak> LordKalma: have you looked at FFMPEG?
[21:07:40] <LordKalma> like one option only accepts 0-4 if another option is set, else 0-9
[21:07:50] <mort> I've worked with the libav* libs
[21:07:52] <mort> they're not nice
[21:07:54] <LordKalma> and hyou have to basically copy the tables into code
[21:07:55] <mort> better than libjpeg tho
[21:08:11] <mort> the default behavior of libjpeg is to abort() on decode error
[21:08:17] <mort> you can override that behavior by passing in an error function pointer
[21:08:23] <mort> that error function pointer can't return
[21:08:37] <LordKalma> also the SDRPlay API supoorts different models of devices. But is the API self describing?
[21:08:37] <mort> you have to somehow make sure it doesn't return because the calling code expects it to act like abort()
[21:08:40] <LordKalma> fuck no, you have to guess
[21:08:44] <LordKalma> why? because fuck me that's why
[21:08:46] <mort> the common solution is to longjmp out of the error handling function
[21:08:55] <LordKalma> and some options that are equivalent between models are on different places
[21:09:10] <cbreak> mort: throw an exception
[21:09:35] <mort> I don't know if you want to throw an exception through C code, but if that works, then yea that's an option
[21:09:41] <mort> not when you're using it as a C library from C tho
[21:09:43] <cbreak> just compile it as C++
[21:09:51] <barix> throwing an exception through a C library sounds unsafe
[21:10:01] <mort> probably won't work, all C ever relies on void* implicitly casting to whatever*
[21:10:04] <cbreak> barix: a C library that calls abort IS unsafe to begin with
[21:10:09] <barix> true
[21:10:17] <mort> have y'all looked at the rules for longjmp btw
[21:10:18] <cbreak> it probably leaks like a sieve if you try to continue execution after that
[21:10:33] <mort> no, it's documented that you can do that and can get it to clean up its resources
[21:10:36] <barix> thankfully, i'm a longjmp virgin
[21:10:55] <barix> i know what it does and that's enough for me to never touch it
[21:10:55] <LordKalma> !grab barix
[21:10:56] <nolyc> LordKalma: The operation succeeded.
[21:10:59] <LordKalma> ah shit
[21:11:02] <PJBoy> yeah I've seen longjmp rules
[21:11:09] <mort> with longjmp, if there are variables which have been modified after the first time setjmp() returns and the second time setjmp() returns, and those variables aren't volatile, doing anything with them after the second setjmp return is UB
[21:11:33] <mort> after the first time setjmp returns and before the second time setjmp returns()
[21:11:39] <mort> *
[21:12:46] *** Joins: proller (~p@2a02:6b8:0:40c:633f:6fd0:cb7a:fa1a)
[21:12:50] <PJBoy> doing anything meaning reading their value
[21:12:56] <PJBoy> you're allowed to set them of course
[21:13:10] <mort> I can't recall, maybe writing is allowed
[21:13:12] <mort> reading certainly is UB
[21:13:18] <PJBoy> they get indeterminate values
[21:13:26] <PJBoy> so any UB is a result of that
[21:13:41] <mort> I'd bet most code which longjmps out of the libjpeg error handler and then tells libjpeg to free its resources does UB
[21:14:00] <PJBoy> and that's so that setjmp doesn't massively pessimise functions
[21:14:04] <mort> I bet it usually happens to work thanks to insufficiently smart compilers and the dynamic library boundary
[21:14:18] <mort> yeah it makes sense why the rules are how they are
[21:14:22] <mort> you have to keep variables in registers
[21:14:50] <PJBoy> or globals or something
[21:15:03] <PJBoy> oh you mean in terms of the reasoning
[21:15:05] <PJBoy> yeah
[21:15:06] <mort> yeah
[21:15:15] <LordKalma> this is the API I was talking about
[21:15:16] <LordKalma> https://gist.github.com/ruilvo/3da702b9abba151bfddcd52fccb7b4f5
[21:15:48] <LordKalma> to do anything you have to change a global struct and then call the CORRECT update function with the *reason* you're updating...
[21:15:53] <barix> the version number is a float, so we're off to a good start
[21:15:58] <mort> hahaha
[21:16:03] <LordKalma> then we haave shit like this:
[21:16:04] <LordKalma> https://gist.github.com/ruilvo/3da702b9abba151bfddcd52fccb7b4f5#file-sdrplay_api_rspdx-h-L6
[21:16:13] <LordKalma> that you hasve to implement in big switched with tables
[21:16:24] <LordKalma> if frequency in between something bla bla bla
[21:17:02] <PJBoy> huh
[21:17:12] <PJBoy> I didn't know C had a `noreturn` keyword
[21:17:15] *** Quits: Svitkona (~Svitkona@157.245.38.135) (Quit: Ping timeout (120 seconds))
[21:17:17] <PJBoy> pseudo-keyword
[21:17:26] *** Joins: Svitkona (~Svitkona@157.245.38.135)
[21:17:51] <mort> I like the naming convention
[21:17:57] <mort> both sdrplay_api_ReasonForUpdateExtension1T and sdrplay_api_DbgLvl_t
[21:18:06] <mort> for type names
[21:18:18] <LordKalma> https://gist.github.com/ruilvo/3da702b9abba151bfddcd52fccb7b4f5#file-sdrplay_api-h-L154
[21:18:23] <LordKalma> this is the struct that nests like all hell
[21:18:25] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[21:18:38] <LordKalma> and that you have to call update after with a ReasonForUpdate
[21:18:41] <PJBoy> and wow, I didn't know true and false were of type int
[21:18:53] <PJBoy> ...until C23
[21:19:08] <mort> aren't they _Bool?
[21:19:15] <PJBoy> that's what I thought
[21:19:17] <PJBoy> but nope
[21:19:20] <PJBoy> not until C23
[21:19:24] <mort> huh
[21:19:32] *** Quits: Simplar (~Simplar@188.163.92.225) (Quit: Going offline, see ya! (www.adiirc.com))
[21:19:38] <LordKalma> probably because backwards compat?
[21:19:49] <PJBoy> beats me
[21:20:04] <LordKalma> anyway
[21:20:06] <LordKalma> this API is hell
[21:20:12] <LordKalma> to use I mean
[21:20:25] <LordKalma> to get a GUI going for this device I basically had to implement what the API should have had:
[21:20:32] <mort> tfw checking if you're on a particular API version generates a warning
[21:20:35] <LordKalma> discover what model it is, what buttons it support for the user to push
[21:20:56] <LordKalma> typedef sdrplay_api_ErrT        (*sdrplay_api_ApiVersion_t)(float *apiVer);    ?
[21:21:13] <mort> yea
[21:21:14] <mort> I mean
[21:21:22] *** Joins: magla (~gelignite@55d4b9e2.access.ecotel.net)
[21:21:34] <mort> "// Application code should check that it is compiled against the same API version"
[21:21:37] <LordKalma> it's C, you can't return a float hahaha
[21:21:49] <mort> ouch I didn't even notice that
[21:21:55] <mort> I suppose it might error... in getting the API version?
[21:21:57] <barix> pretty sure you can
[21:22:02] <barix> but the version shouldn't be a float
[21:22:15] <barix> and why can the get version call even return an error? this makes zero sense
[21:22:15] <mort> you can't return a float if you also want to return an api_ErrT :p
[21:22:21] <barix> oh yeah
[21:22:22] <LordKalma> what? you're saying semVer can't be done with floats? :D
[21:22:37] <barix> you can, if you use complex.h
[21:22:40] <PJBoy> maybe the version is a float precisely because `int get_version(int*)` looks like it might return the version rather than an error code
[21:23:26] <mort> `float version; if (sdrplay_api_ApiVersion(&version) != OK_OR_WHATEVER) { error(); } if (version != SDRPLAY_API_VERSION) { error(); }`
[21:23:37] <mort> that `version != SDRPLAY_API_VERSION` check should probably be a warning
[21:23:42] <mort> given reasonable compiler warnings
[21:24:07] <PJBoy> if we only had enum floats, that check wouldn't be so bad
[21:24:19] <LordKalma> PJBoy, it's a float because 3.08 is literally v 3.8
[21:24:26] *** Joins: Simplar (~quassel@188.163.92.225)
[21:24:39] <mort> what do they do when they reach 3.10
[21:24:47] <PJBoy> :o
[21:24:53] <mort> oh
[21:24:56] <mort> that's why they have the 0
[21:24:57] <LordKalma> 3.99 you mean
[21:25:06] <mort> ...clever workaround to a very very stupid problem
[21:25:24] <mort> I don't think you could reliably get the minor version from this library
[21:25:31] <mort> you would have to do something like
[21:25:37] <mort> (version - floor(version)) * 100
[21:25:40] <LordKalma> https://0.30000000000000004.com/
[21:25:43] <mort> or rather
[21:25:44] <LordKalma> ^remember this
[21:25:53] <mort> (int)((version - floor(version)) * 100)
[21:26:08] <mort> but that rounds down and if your 0.99 is actually 0.9899999999997 it'll be 98
[21:26:37] <mort> ok I think I got it maybe
[21:26:40] <PJBoy> I've never seen that website before
[21:26:44] <PJBoy> but nice
[21:26:47] <mort> (int)((version - floor(version)) * 100 + 0.001)
[21:26:55] <mort> that should be the most reliable way to get the minor version
[21:27:31] <PJBoy> just bit_cast it to a char array and inspect the bits
[21:27:34] <LordKalma> https://0.30000000000000004.com/ if the kind of shit you're get on https://theuselessweb.com/
[21:27:55] <PJBoy> nah it's not useless
[21:28:01] <PJBoy> it's actually very demonstrative
[21:28:04] <LordKalma> indeed
[21:28:10] <LordKalma> examples in many languages
[21:28:16] <LordKalma> also, went to the useless web
[21:28:17] <LordKalma> https://longdogechallenge.com/
[21:28:20] <PJBoy> yeah, full respect to that website
[21:33:12] <yolo> in 30 minutes i have a https binary on macos/win/linux, built them all from linux, bye c++ for cross-platform, i will still love you, but solely on linux
[21:33:34] <LordKalma> bah screw golang
[21:33:44] <yolo> no openssl cross build and install and vcpkg, no brew, screw them all
[21:35:32] <mort> there is a lot to like about golang
[21:36:17] <yolo> i just need swap my left-right brain for its syntax, i will take this poison pill
[21:38:35] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:38:43] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:38:43] *** ChanServ sets mode: +v npaperbot
[21:44:00] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 260 seconds)
[21:48:58] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[21:57:13] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[21:58:16] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[22:01:57] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:09:31] *** Quits: proller (~p@2a02:6b8:0:40c:633f:6fd0:cb7a:fa1a) (Ping timeout: 245 seconds)
[22:12:43] <ville> gc => non-starter
[22:13:28] *** Joins: riksu-raksu (riksteri@gateway/vpn/airvpn/riksteri)
[22:13:32] <InPhase> ville: Before I know what the rest of the topic is, yes.  :)
[22:14:48] <PJBoy> I agree
[22:15:37] <InPhase> I've never seen a system that fully captures the benefits of scope-based resource management while using garbage collection.  I have thought about it more than a healthy amount and I think it's probably impossible without some radical other changes.
[22:16:11] <PJBoy> python
[22:16:18] <PJBoy> with its with statements
[22:16:36] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Ping timeout: 268 seconds)
[22:16:47] <InPhase> That's more of an example of manual resource management.
[22:17:06] <PJBoy> the resource is managed by the with scope
[22:17:07] <InPhase> You often need to restructure the code to hammer it into a with structure.
[22:17:59] <PJBoy> like I don't need to close a file opened with a with statement in all paths out of that with scope
[22:18:04] <InPhase> You're thus writing around the clean-up plan.  This works okay when you have one thing to manage.  It doesn't let you have a large number of resources managed automatically in complex ways, even if they're in containers and such.
[22:18:26] <PJBoy> you could though
[22:18:51] <PJBoy> you could write a container context manager
[22:18:55] <InPhase> The full benefits are all about scaling up.  Like many things in Python, "with" works great at a lower complexity scale.
[22:19:00] <PJBoy> that performs content management on its elements
[22:19:10] <PJBoy> *context
[22:19:36] <PJBoy> it's just that when you're using python, all that scope bound resource management stuff doesn't really matter too often
[22:20:04] <InPhase> This is still resource-based scoping.  It's different and much less flexible.  :)
[22:20:56] <PJBoy> does golang not have a scope bound thing then?
[22:21:17] <PJBoy> tsk tsk if so
[22:22:14] *** Joins: xkuru (~xkuru@user/xkuru)
[22:22:14] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[22:22:27] <InPhase> I would say resource-based scoping vs scope-based resource management is like the difference between having functions, and having first-class functions.
[22:25:25] <InPhase> And fortunately C++ does the latter well now too for whenever it's needed.
[22:27:13] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[22:28:19] *** Quits: X-Scale (~ARM@31.22.167.95) (Ping timeout: 268 seconds)
[22:29:26] *** X-Scale` is now known as X-Scale
[22:30:26] *** Joins: RoKenn (~RoKenn@2001:a61:34f1:ae01:d376:ce81:be7b:52bf)
[22:30:26] *** Quits: RoKenn (~RoKenn@2001:a61:34f1:ae01:d376:ce81:be7b:52bf) (Changing host)
[22:30:26] *** Joins: RoKenn (~RoKenn@user/rokenn)
[22:35:00] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:c51e:fedd:8daa:83eb)
[22:44:13] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[22:53:08] *** Joins: spaceangel (~spaceange@ip-62-245-71-160.net.upcbroadband.cz)
[23:00:02] <ville> InPhase: golang
[23:00:37] *** Joins: spaceangel_ (~spaceange@ip-62-245-71-160.net.upcbroadband.cz)
[23:02:14] *** Quits: spaceangel (~spaceange@ip-62-245-71-160.net.upcbroadband.cz) (Ping timeout: 260 seconds)
[23:04:47] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[23:05:00] *** Quits: spaceangel_ (~spaceange@ip-62-245-71-160.net.upcbroadband.cz) (Ping timeout: 256 seconds)
[23:05:07] *** Joins: sysctl (~sysctl@88.215.77.255)
[23:05:19] <sysctl> quit
[23:05:26] *** Quits: sysctl (~sysctl@88.215.77.255) (Client Quit)
[23:05:38] *** Quits: riksu-raksu (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksu-raksu)
[23:05:39] *** Joins: sysctl (~sysctl@88.215.77.255)
[23:10:28] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Read error: Connection reset by peer)
[23:10:47] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[23:12:06] *** Quits: rnsanchez (~rnsanchez@179.233.246.221) (Ping timeout: 268 seconds)
[23:15:08] *** Joins: JeffH (~harrisja@174-16-133-53.hlrn.qwest.net)
[23:17:23] <JeffH> I've created a templetized class "Telemetry<T>".  In main() I specify "Telemetry<uint32_t>". Telemetry.cpp and main.cpp compile successfully.  When I link I'm told 'Undefined reference to 'Telemetry<unsigned int>'. What am I missing?
[23:18:33] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Remote host closed the connection)
[23:19:29] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[23:20:41] <LordKalma> Re golang: Python can't have scope bound resource management anyway because for i in range(1): pass leaks the last value of i
[23:21:13] <kalven> JeffH: I'm guessing you put definitions of the member functions in Telemetry.cpp, you typically don't want to do that.
[23:21:41] <JeffH> kalven, yeah.. that's exactly what I did.
[23:21:59] <JeffH> So template classes have to be inline?
[23:23:38] <JeffH> I see I can also explicitly instantiate in the implementation file.
[23:25:17] <LordKalma> yes they have
[23:25:20] <LordKalma> unless you do that yes
[23:26:24] *** Joins: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[23:26:31] *** Joins: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[23:27:54] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 260 seconds)
[23:29:36] *** Joins: proller (~p@2a02:6b8:b081:7205::1:2d)
[23:30:58] *** Quits: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Read error: Connection reset by peer)
[23:31:15] *** Joins: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[23:43:08] *** Joins: cart_man (~rynot@host-78-144-121-71.as13285.net)
[23:44:01] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:c51e:fedd:8daa:83eb) (Remote host closed the connection)
[23:44:25] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:79f8:8470:8aa2:c43a)
[23:45:36] *** Joins: andreasbuhr (~quassel@p549db531.dip0.t-ipconnect.de)
[23:45:36] *** Quits: andreasbuhr (~quassel@p549db531.dip0.t-ipconnect.de) (Client Quit)
[23:55:42] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
