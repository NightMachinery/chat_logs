[00:55:16] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[01:49:07] *** Joins: ahmedelgabri (~ahmedelga@196.132.115.92)
[02:13:16] *** Quits: karakedi (~eAC53C340@user/karakedi) (Read error: Connection reset by peer)
[02:17:55] *** Quits: ahmedelgabri (~ahmedelga@196.132.115.92) (Read error: Connection reset by peer)
[03:19:16] *** Quits: getivan (~getivan@047-032-214-100.res.spectrum.com) (Quit: Client closed)
[03:19:27] *** Joins: NeoCron (~NeoCron@p200300c4cf4f9c00198c896a0feeb747.dip0.t-ipconnect.de)
[03:27:48] *** Quits: NeoCron (~NeoCron@p200300c4cf4f9c00198c896a0feeb747.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:54:31] *** Quits: r3m (~launch@user/r3m) (Quit: WeeChat 3.3-dev)
[04:17:42] *** Quits: blddk (~admin@185.233.252.229) (Quit: ZNC 1.8.2 - https://znc.in)
[04:19:29] *** Joins: blddk (~admin@185.233.252.229)
[04:26:14] *** Quits: sh4rk (~lemonade@sharkdrip.com) (Changing host)
[04:26:14] *** Joins: sh4rk (~lemonade@user/sh4rk)
[04:43:04] *** Quits: ttys000 (~ttys000@user/ttys000) (Read error: Connection reset by peer)
[04:50:25] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 252 seconds)
[05:16:55] *** Joins: re101-squid-14 (~re101-squ@2409:8a1e:c63d:d820:6807:1370:6d46:125b)
[05:17:48] *** Quits: re101-squid-14 (~re101-squ@2409:8a1e:c63d:d820:6807:1370:6d46:125b) (Client Quit)
[05:20:17] *** Quits: normsaa (~normsaa@101.175.64.73) (Quit: Client closed)
[05:30:05] *** Quits: vaasa (~vaasa@user/vaasa) (Quit: Be excellent to each other.)
[05:31:05] *** Joins: vaasa (~vaasa@user/vaasa)
[05:31:42] *** Quits: maetthew (~maetthew@user/maetthew) (Quit: ZNC 1.8.2 - https://znc.in)
[05:37:39] *** Joins: maetthew (~maetthew@c188-150-100-85.bredband.tele2.se)
[05:37:39] *** Quits: maetthew (~maetthew@c188-150-100-85.bredband.tele2.se) (Changing host)
[05:37:39] *** Joins: maetthew (~maetthew@user/maetthew)
[05:47:43] *** Quits: joo (~joo@fsf/member/joo--) (Ping timeout: 252 seconds)
[05:54:42] *** Joins: re101-tapir-44 (~re101-tap@120.188.81.252)
[05:54:53] *** Quits: re101-tapir-44 (~re101-tap@120.188.81.252) (Client Quit)
[06:00:47] *** Joins: joo (~joo@87-49-44-44-mobile.dk.customer.tdc.net)
[06:00:47] *** Quits: joo (~joo@87-49-44-44-mobile.dk.customer.tdc.net) (Changing host)
[06:00:47] *** Joins: joo (~joo@fsf/member/joo--)
[06:14:45] *** Joins: vlm (~vlm@user/vlm)
[06:25:18] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[06:41:21] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 265 seconds)
[07:19:37] *** Quits: oprypin (~irc@pryp.in) (Ping timeout: 245 seconds)
[07:23:19] *** Quits: bin101 (~bin101@user/bin101) (Ping timeout: 252 seconds)
[07:26:58] *** Joins: bin101 (~bin101@user/bin101)
[07:27:38] *** Quits: eb0t (~eb0t@90.209.54.144) (Quit: WeeChat 2.3)
[07:35:14] *** Joins: r3m (~launch@user/r3m)
[07:38:41] *** Joins: defjam (~eb0t@90.209.54.144)
[07:39:07] *** defjam is now known as eblip
[07:41:04] *** Joins: oprypin (~irc@pryp.in)
[07:45:38] *** Quits: davido (~daobrien@2402:a040:26b:f600:b5c4:b735:5621:65d9) (Ping timeout: 260 seconds)
[07:47:44] *** Joins: davido (~daobrien@2402:a040:26b:f600:b5c4:b735:5621:65d9)
[08:24:30] *** Quits: MagentaRV (~ShoeMaker@cpe-172-101-5-82.maine.res.rr.com) (Ping timeout: 260 seconds)
[08:27:10] *** Quits: re (~re@user/re) (Ping timeout: 260 seconds)
[08:33:51] *** Joins: re (~re@user/re)
[08:36:03] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[08:37:30] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[08:39:21] *** Server sets mode: +npt 
[08:40:31] *** Joins: lkhn (~lkhn@user/lkhn)
[08:49:16] *** Quits: shailangsa (~shailangs@host86-186-132-44.range86-186.btcentralplus.com) (*.net *.split)
[08:49:16] *** Quits: Vol[m] (~notvolmat@2001:470:69fc:105::c79b) (*.net *.split)
[08:49:17] *** Quits: mtj (~mtj@2400:8902::f03c:91ff:fe93:b7f1) (*.net *.split)
[08:49:17] *** Quits: Friithian (gunqqer@friithian.dev) (*.net *.split)
[08:49:17] *** Quits: Andrio (Andrio@questers-rest.andriocelos.net) (*.net *.split)
[08:49:17] *** Quits: ekaj (~ekaj@user/ekaj) (*.net *.split)
[08:49:17] *** Quits: nullheroes (~nullheroe@168.235.66.22) (*.net *.split)
[08:49:17] *** Quits: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it) (*.net *.split)
[08:49:28] *** Joins: Friithia1 (gunqqer@friithian.dev)
[08:49:32] *** Joins: ekaj (~ekaj@40.ip-192-99-166.net)
[08:49:58] *** Joins: mtj (~mtj@2400:8902::f03c:91ff:fe93:b7f1)
[08:50:02] *** Friithia1 is now known as Friithian
[08:50:11] *** Joins: Andrio (Andrio@questers-rest.andriocelos.net)
[08:50:15] *** ChanServ sets mode: +v Andrio
[08:50:22] *** Friithian is now known as GunqqerFriithian
[08:50:42] *** GunqqerFriithian is now known as Friithian
[08:50:51] *** Joins: nullheroes (~nullheroe@168.235.66.22)
[08:50:55] *** Joins: Ekho (~Ekho@user/ekho)
[08:54:13] *** Joins: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it)
[08:58:19] *** Joins: Vol[m] (~notvolmat@2001:470:69fc:105::c79b)
[09:08:09] *** Joins: shailangsa (~shailangs@host86-186-132-44.range86-186.btcentralplus.com)
[09:10:11] *** Joins: Firecatmon (~firecatmo@89.187.163.193)
[09:25:32] *** Joins: Firecatmon_ (~firecatmo@pa49-181-223-191.pa.nsw.optusnet.com.au)
[09:25:52] *** Quits: Firecatmon (~firecatmo@89.187.163.193) (Ping timeout: 260 seconds)
[09:34:50] *** Quits: r3m (~launch@user/r3m) (Quit: WeeChat 3.3-dev)
[09:46:58] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[09:49:15] <shan> hi, i need a way to match an expression in {{ }} but only if it isn't preceded by a backslash. I can't use lookbehind because safari doesn't support that yet.
[09:49:30] <shan> I'm using JavaScript.
[09:50:15] <JohnDoe2> what's preceded by a backslash?
[09:50:33] <shan> the expression in braces
[09:50:45] <JohnDoe2> so {{\no}} {{yes}} ?
[09:50:56] <shan> \{{ test }} should be ignored, {{ test2 }} should not
[09:51:16] <JohnDoe2> [^\\]{{2}[^}]+}{2}
[09:51:55] <JohnDoe2> well maybe (?:^|[^\\]){{2}[^}]+}{2} if you have the stuff at the beginning of a line
[09:52:49] <shan> no specific line type thing
[09:53:23] <JohnDoe2> assumption is that you don't have } inside the {{ .... }}
[09:53:29] <shan> right
[09:54:05] <shan> i actually am going to be putting a specific string inside in a loop it'll look something like {{ test }}
[09:55:09] <JohnDoe2> ü§∑‚Äç‚ôÇÔ∏è
[09:56:00] <JohnDoe2> [^}] will plow through everything including newlines and other such things. It won't stop until it meets another }. So broken syntax, ram abuse, long time to return a match.
[10:06:33] <shan> hey JohnDoe2 what if i need it to exclude the character before { if it's not a slash
[10:07:19] <JohnDoe2> capture after [^\\] aka wrap in ( ) and use match[1]
[10:08:07] <shan> i'm trying to replace though
[10:08:59] <shan> so like {{ foo }} should be replaced by whatever arbitrary string but that one char left behind
[10:10:13] <JohnDoe2> sound like a poor man's moustache wannabee
[10:10:46] <JohnDoe2> capture the [^\\] then, an place it before your arbitrary string
[10:11:15] <shan> it is a poor man's mustache wannabe
[10:12:10] <JohnDoe2> awesome
[10:12:11] <JohnDoe2> "some{{test}}".replace(/([^\\]){{2}[^}]+}{2}/, '$1 poor man\'s moustache replacement')
[10:16:00] <JohnDoe2> https://lh3.googleusercontent.com/proxy/FW6yutHBvmY0Jnfm_mzahzVj3oAUP2H01w0fVuvPUOMIC1MHCV3pibgRpRJrkcgdUi3gRl7ea5E2-4JIINk2McaTO8B1_gpjc-4u9SnPubhQ7UU_L-84RUlF_qnGIuDytz9qQiFfPHDMhWPbXkVUug_ZaTNYusHeU2iVBGtwDA
[10:25:56] <shan> JohnDoe2: https://i.imgur.com/ZaaaU1B.png wahoooooo
[10:25:57] <shan> thank you <3
[10:27:34] <JohnDoe2> cool üëç
[10:27:45] <Me-me> JohnDoe2++
[10:33:27] *** Joins: getivan (~getivan@047-032-214-100.res.spectrum.com)
[10:34:05] *** Quits: getivan (~getivan@047-032-214-100.res.spectrum.com) (Client Quit)
[10:53:14] *** Joins: r3m (~launch@user/r3m)
[10:53:51] *** Quits: r3m (~launch@user/r3m) (Client Quit)
[10:54:33] *** Joins: r3m (~launch@user/r3m)
[11:04:55] <digitok> psh
[11:05:46] *** Joins: getivan (~getivan@047-032-214-100.res.spectrum.com)
[11:07:08] *** Joins: palasso (~palasso@user/palasso)
[11:09:46] *** Joins: lavaball (felix@31.204.155.215)
[11:12:06] *** Joins: getivanllc (~getivan@047-032-214-100.res.spectrum.com)
[11:13:16] *** Quits: getivan (~getivan@047-032-214-100.res.spectrum.com) (Quit: Client closed)
[11:13:43] *** Quits: getivanllc (~getivan@047-032-214-100.res.spectrum.com) (Client Quit)
[11:14:03] *** Quits: txtsd (~txtsd@user/txtsd) (Quit: WeeChat 3.2)
[11:19:31] *** Joins: txtsd (~txtsd@user/txtsd)
[11:30:05] *** Joins: getivanllc (~getivan@047-032-214-100.res.spectrum.com)
[11:35:45] *** Quits: unluckyshrubbery (~unluckysh@45-19-33-188.lightspeed.livnmi.sbcglobal.net) (Quit: ZNC 1.8.2 - https://znc.in)
[11:36:19] *** Joins: getivan (~getivan@047-032-214-100.res.spectrum.com)
[11:37:39] *** Quits: getivan (~getivan@047-032-214-100.res.spectrum.com) (Client Quit)
[11:39:34] *** Quits: getivanllc (~getivan@047-032-214-100.res.spectrum.com) (Quit: Leaving)
[11:41:49] *** Joins: getivan (~getivan@047-032-214-100.res.spectrum.com)
[11:50:08] *** Joins: I-M (~id@78.183.96.140)
[11:50:59] *** Joins: army (~aL@user/army)
[12:11:06] *** Joins: karakedi (~eAC53C340@user/karakedi)
[12:16:39] *** Joins: re101-civet-20 (~re101-civ@149.202.98.184)
[12:18:32] <re101-civet-20> match a number starts with 2, 4, 6 and ends with a letter, it should contain 2 $ signs, and no @ and a length 10
[12:29:05] *** Quits: re101-civet-20 (~re101-civ@149.202.98.184) (Quit: Client closed)
[12:30:05] *** Joins: re101-civet-20 (~re101-civ@149.202.98.184)
[12:41:12] <getivan> Hey, I worked with digitok all last night on this: https://regex101.com/r/D6HGL8/11 --- Works great, but my problem is that my program freezes after about 7k urls... so it's not gonna work... LoL ... I'm looking to simplify it, now... thanks! 
[12:53:05] *** Quits: re101-civet-20 (~re101-civ@149.202.98.184) (Quit: Client closed)
[13:00:24] *** Quits: I-M (~id@78.183.96.140) (Read error: Connection reset by peer)
[13:06:04] *** Quits: jrofd (~test@185.217.117.147) (Ping timeout: 252 seconds)
[13:18:22] *** Joins: jrofd (~test@185.217.117.157)
[13:19:57] *** Joins: Tobbi_ (~Thunderbi@62.214.69.130)
[13:24:09] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[13:26:37] *** Quits: shailangsa (~shailangs@host86-186-132-44.range86-186.btcentralplus.com) ()
[13:30:10] *** Quits: anikolov (~anikolov@80.72.92.226.coresnet.bg) (Remote host closed the connection)
[13:30:26] *** Joins: anikolov (~anikolov@80.72.92.226.coresnet.bg)
[13:41:30] *** Joins: unluckyshrubbery (~unluckysh@45-19-33-188.lightspeed.livnmi.sbcglobal.net)
[13:43:03] *** Firecatmon_ is now known as Firecatmon
[13:45:39] *** Joins: shailangsa (~shailangs@host86-186-132-44.range86-186.btcentralplus.com)
[14:25:42] *** Quits: bin101 (~bin101@user/bin101) (Quit: goodbye)
[14:28:11] *** Joins: bin101 (~bin101@user/bin101)
[14:30:30] *** Joins: MagentaRV (~ShoeMaker@cpe-172-101-5-82.maine.res.rr.com)
[14:41:40] *** Quits: txtsd (~txtsd@user/txtsd) (Ping timeout: 240 seconds)
[15:09:16] *** Quits: oprypin (~irc@pryp.in) (Ping timeout: 252 seconds)
[15:17:07] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[15:35:35] *** mozgalom is now known as bomb-on
[15:37:08] *** Quits: bomb-on (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Quit: Textual IRC Client: www.textualapp.com)
[15:37:31] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[16:06:29] *** Joins: armyy (~aL@46.198.178.58)
[16:06:37] *** Joins: re101-pug-69 (~re101-pug@62.159.242.114)
[16:07:17] <re101-pug-69> Hi all
[16:07:21] <re101-pug-69> how can I change this to find only matching ^XA...^XZ blocks?
[16:07:26] <re101-pug-69> https://regex101.com/r/WShz9R/1
[16:08:38] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 268 seconds)
[16:09:08] <digitok> where are you using it
[16:09:20] <re101-pug-69> why?
[16:09:28] *** Quits: army (~aL@user/army) (Ping timeout: 268 seconds)
[16:09:29] <digitok> why not
[16:09:36] *** armyy is now known as army
[16:09:37] <re101-pug-69> this would be a zpl parser
[16:09:45] <digitok> which type of regex does it use
[16:10:06] <re101-pug-69> ah ok... in powershell :D
[16:10:06] *** Joins: re101-bird-88 (~re101-bir@0x573e65d9.static.cust.fastspeed.dk)
[16:10:19] <digitok> cool
[16:10:39] <re101-pug-69> do you know the solution ?
[16:10:50] <digitok> of course
[16:11:03] <digitok> will that number you're looking for always come after ^FX?
[16:11:03] <re101-pug-69> can you please send me? :)
[16:11:16] <re101-pug-69> yes
[16:11:28] <re101-pug-69> but I would like to have a universal soulition
[16:11:35] <digitok> oh actually it's not even after ^FX lol
[16:12:04] <re101-pug-69> ok basically there are ^XA^XZ blocks
[16:12:16] <re101-pug-69> and inside these blocks there are some uniqe string
[16:12:36] <re101-pug-69> I want to get the ^XA^XZ block as result where these strings are
[16:12:42] <digitok> can you include FD in your search term?
[16:12:53] <re101-pug-69> yes
[16:12:55] <digitok> or do you not want to have to do that
[16:12:56] <digitok> ok
[16:13:29] <re101-pug-69> n change
[16:13:34] <re101-pug-69> no change
[16:13:45] <re101-pug-69> do you have a working example?
[16:13:56] <digitok> that question was for my benefit
[16:13:57] <digitok> gimme as ec
[16:14:00] <digitok> gimme a sec*
[16:14:04] <re101-pug-69> ok
[16:15:33] <re101-pug-69> https://regex101.com/r/DZ9965/1
[16:15:43] <re101-pug-69> this would work but it is really slow in big files
[16:15:52] <re101-pug-69> because of the lot of .* .*? .*?
[16:15:54] <digitok> i was just about to ask if you cared about efficiency
[16:15:55] <digitok> lol
[16:16:11] <re101-pug-69> im sure there must be a fast solution :D
[16:16:48] <re101-pug-69> yeah unfortunately speed matters this case
[16:16:48] <re101-pug-69> :)
[16:19:57] <re101-pug-69> any idea?
[16:20:47] <digitok> https://regex101.com/r/WShz9R/2
[16:21:20] <digitok> https://regex101.com/r/WShz9R/3
[16:21:22] <digitok> better
[16:21:55] <anikolov> yup - adding atomic capture groups helps most of the time
[16:22:30] <anikolov> I think at least - there must be more to this as well
[16:23:03] *** Quits: re101-bird-88 (~re101-bir@0x573e65d9.static.cust.fastspeed.dk) (Quit: Client closed)
[16:23:16] <anikolov> like replacing the dot with something else more concrete - this looks like to be too
[16:24:08] <re101-pug-69> looks promising
[16:24:19] <re101-pug-69> i will study it! :D
[16:24:23] <re101-pug-69> thank you!
[16:25:30] <digitok> https://regex101.com/r/WShz9R/4
[16:25:33] <digitok> better
[16:25:38] <digitok> and yw
[16:27:07] <re101-pug-69> many thx! great communitiy!
[16:27:14] <digitok> :)
[16:30:10] *** Joins: oprypin (~irc@pryp.in)
[16:38:31] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[16:44:00] *** Quits: jrofd (~test@185.217.117.157) (Ping timeout: 268 seconds)
[16:50:36] *** Joins: d1cor (~diego@179.63.242.111)
[17:06:57] *** Joins: X-Scale (~ARM@46.50.5.253)
[17:07:17] *** Joins: Floflobel_ (~Floflobel@cosium-fo-152-18.fib.nerim.net)
[17:33:44] *** Quits: oprypin (~irc@pryp.in) (Ping timeout: 268 seconds)
[17:45:39] *** Joins: oprypin (~irc@pryp.in)
[18:03:04] *** Joins: dmaislin (~dmaislin@047-233-046-055.res.spectrum.com)
[18:03:17] <dmaislin> I have a difficult one that I am stuck on: https://regex101.com/r/3hoXVE/3
[18:03:32] <dmaislin> I described what I am trying to do at the top.
[18:05:28] <Me-me> Alright, let's take a look.
[18:06:03] <Me-me> What is it doing wrong?
[18:06:26] <digitok> are you using es6?
[18:06:31] <dmaislin> Yes
[18:07:18] <dmaislin> I put the description at the top.  I am unsure how to capture every key value below each section head like Creator Subject, and prepend them to the subordinate fields.
[18:07:55] <Me-me> What do you mean by "subordinate fields"?
[18:08:36] <digitok> will the top level field name always be 2 words though
[18:08:47] <digitok> actually we can get around that if needed
[18:08:53] <Me-me> And do we have a consistent number of the key values
[18:09:08] <digitok> that won't matter
[18:09:10] <dmaislin> Unsure on both counts
[18:09:20] <digitok> k
[18:09:32] <Me-me> Watch out he's gonna use vw lookbehinds.
[18:09:35] <dmaislin> I convert the spaces using a .replace function later in my functions, outside the regex
[18:09:36] <Me-me> Vwlbs.
[18:09:44] <dmaislin> I convert them to _
[18:10:13] <digitok> ah, great
[18:10:18] <digitok> you did specify that, heh
[18:10:30] <digitok> https://regex101.com/r/3hoXVE/4
[18:10:44] *** Quits: oprypin (~irc@pryp.in) (Ping timeout: 268 seconds)
[18:11:00] <digitok> this makes the assumption that all of the fields are preceded by tab
[18:11:05] <digitok> and that nothing else is
[18:11:05] <digitok> :D
[18:11:12] <Me-me> Pfffhahaha
[18:11:25] <Me-me> It's that last one that's the main problem, I fear. But hey, maybe!
[18:11:28] <digitok> it isn't that funny
[18:13:23] <dmaislin> That's cool so far, how can you tweak it such that there are two capture groups?  KEY and VALUE?
[18:14:27] <digitok> what are you planning to do with those
[18:15:50] <dmaislin> Just trying to solve for what a customer asked for.  I just need the keys and values.  Working in Cribl LogStream
[18:16:24] <digitok> so you don't actually need the replacement?
[18:16:36] <digitok> you just want the matches?
[18:17:15] <dmaislin> Right, I need the keys and values.
[18:17:38] <digitok> and top level, i assume..
[18:17:55] <dmaislin> Yes, TL_KEY and VALUE
[18:18:31] <digitok> no, i mean TOP_LEVEL, KEY, VALUE?
[18:19:10] *** Quits: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[18:19:34] <dmaislin> I need the top level name combined with the key name so, TL_KN and the value
[18:20:04] <digitok> yea, you can't do that
[18:20:10] <digitok> you'll have to join them yourself
[18:20:19] <digitok> all i can do is get both in every match
[18:20:51] <dmaislin> Show me what you have?
[18:21:05] <digitok> i have it all
[18:21:15] <digitok> but one sec
[18:21:25] <digitok> https://regex101.com/r/3hoXVE/5
[18:22:09] <dmaislin> That should work for now.  I will break up the message field into 3 sections to make it easier
[18:22:15] <dmaislin> Thank you
[18:22:19] <digitok> yw
[18:24:53] *** Joins: Firecatmon_ (~firecatmo@180.149.228.174)
[18:25:36] *** Quits: Firecatmon (~firecatmo@pa49-181-223-191.pa.nsw.optusnet.com.au) (Ping timeout: 260 seconds)
[18:27:53] *** Joins: oprypin (~irc@pryp.in)
[18:30:13] *** Joins: Firecatmon (~firecatmo@89.187.163.193)
[18:30:42] *** Quits: Firecatmon_ (~firecatmo@180.149.228.174) (Ping timeout: 260 seconds)
[18:48:47] *** Quits: MrNato_Home (MrNato_Hom@61.29.44.88) (Ping timeout: 265 seconds)
[18:49:28] *** Joins: MrNato_Home (MrNato_Hom@61.29.44.88)
[18:49:53] *** Joins: Tester12 (~Tester12@2607:fea8:2cdf:fe50:e979:3be4:d807:2b7a)
[18:50:49] *** Quits: oprypin (~irc@pryp.in) (Ping timeout: 268 seconds)
[18:52:20] <Tester12> Why can't I save my Regex
[18:53:01] *** Joins: re101-somali-41 (~re101-som@165.225.122.228)
[18:54:25] <re101-somali-41> https://regex101.com/r/kwOBLR/1
[18:54:44] <re101-somali-41> i need help to convert work this in golang
[18:54:57] <re101-somali-41> test string is :this or \"that or\" or 'this or that'
[18:55:49] <NiLon> um that nick :D
[18:56:03] <re101-somali-41> Thanks for responding
[18:56:18] <re101-somali-41> can u help me with this
[18:56:34] <NiLon> I don't know
[18:56:43] <re101-somali-41> ok
[18:56:54] *** Quits: ekaj (~ekaj@40.ip-192-99-166.net) (Changing host)
[18:56:54] *** Joins: ekaj (~ekaj@user/ekaj)
[18:57:09] *** ekaj is now known as a1
[18:57:21] <re101-somali-41> can any one help
[18:57:36] <re101-somali-41> to convert this in golang
[18:59:07] <testuser[m]> perhaps
[18:59:39] <NiLon> so problem is that goland doesn't have lookahead it seems
[18:59:44] <re101-somali-41> yes
[18:59:56] <re101-somali-41> so is there anyway we can do this
[18:59:57] <re101-somali-41> ?
[19:01:18] <NiLon> I would go with 2 passes, get all strings inside quotes, then do a substitution for those
[19:02:01] <re101-somali-41> ok..and how do u do that ..can u send me any regex which does that
[19:02:30] *** Joins: oprypin (~irc@pryp.in)
[19:03:48] <NiLon> is this one-off thing or some feature you need constantly?
[19:04:02] <re101-somali-41> one-off thing
[19:04:18] <NiLon> then if you already have javascript version working, why not use javascript?
[19:04:31] <re101-somali-41> we have to use golang
[19:04:38] <re101-somali-41> cant do in other language
[19:04:46] <re101-somali-41> i mean code is in golang
[19:04:46] <NiLon> ah so it's a school project
[19:04:51] <re101-somali-41> yes
[19:05:31] <NiLon> did they say use regex or use goland
[19:05:34] <NiLon> lang*
[19:05:59] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[19:06:08] <re101-somali-41> no our language is golang, we are thinking to manipulate this tring using regex
[19:06:23] <re101-somali-41> other ways are there like traversing the string
[19:06:29] <re101-somali-41> and then manipulating
[19:07:00] <NiLon> well I mean if the point is to learn golang then using regex is bit cheating
[19:07:32] <re101-somali-41> its not aout learning , we have to submit project
[19:07:45] <re101-somali-41> we cant switch programming language
[19:07:53] <re101-somali-41> all the codes are in golang
[19:08:01] <re101-somali-41> otherwise we would have switch 
[19:08:14] <re101-somali-41> and there are many string manipulations which we did using regex
[19:08:33] <NiLon> you kind of missed my point
[19:09:03] <NiLon> what I'm talking is implementing this with golang rather than regex
[19:09:25] <NiLon> to me that seems to be point of the exercise
[19:09:32] <re101-somali-41> that would be the last thing i would do,first we have to try with regex
[19:09:55] <re101-somali-41> see basically we have sql query where we have to put this string
[19:10:08] <re101-somali-41> and that sql qyuery has to go in golang
[19:11:11] <re101-somali-41> something like we have to replace 'id'  in this string "where id="abcdid" AND id=\"asdisdid\""
[19:11:33] <re101-somali-41> and this where condition will be plugged in where clause of sql query
[19:11:53] <re101-somali-41> now this id have to be replaced with vs.id
[19:11:59] <re101-somali-41> vs is alias of table
[19:12:27] <NiLon> I see so you are looking forwards of refactoring queriers
[19:12:35] <re101-somali-41> yes
[19:14:08] <NiLon> and by hand this takes what 10 minutes?
[19:14:31] <re101-somali-41> with hand we have to write code for it
[19:14:36] <re101-somali-41> which we dont want
[19:14:43] <re101-somali-41> if its possible with regex
[19:15:28] <NiLon> lesson here is that sometimes it's not worth doing automatically when it takes more time to engineer that solution rather than just do it by hand and be done with it
[19:16:13] <re101-somali-41> okies
[19:16:21] <re101-somali-41> can u provide me regex
[19:16:30] <re101-somali-41> if no then we will write code
[19:16:31] <re101-somali-41> for that
[19:17:03] *** Joins: nvmd (~nvmd@user/nvmd)
[19:17:28] *** Quits: re101-pug-69 (~re101-pug@62.159.242.114) (Quit: Client closed)
[19:17:40] <NiLon> now that would be cheating
[19:17:44] <re101-somali-41> cool
[19:17:48] *** Quits: re101-somali-41 (~re101-som@165.225.122.228) (Quit: Client closed)
[19:18:19] <NiLon> there are no shortcuts for learning
[19:20:38] *** Quits: oprypin (~irc@pryp.in) (Ping timeout: 268 seconds)
[19:31:52] *** Joins: oprypin (~irc@pryp.in)
[19:39:19] *** Quits: Tester12 (~Tester12@2607:fea8:2cdf:fe50:e979:3be4:d807:2b7a) (Quit: Client closed)
[19:43:14] *** Quits: anikolov (~anikolov@80.72.92.226.coresnet.bg) (Ping timeout: 268 seconds)
[19:49:55] <dmaislin> I think I have a very stupid question.  Maybe it is Monday: https://regex101.com/r/3hoXVE/9
[19:50:16] <dmaislin> How do I create a capture group for all spaces before the colons :
[19:53:42] <dmaislin> Nevermind, got it
[19:54:23] <dmaislin> Nope, didnt
[20:02:21] *** Quits: d1cor (~diego@179.63.242.111) (Ping timeout: 268 seconds)
[20:09:20] *** Quits: dmaislin (~dmaislin@047-233-046-055.res.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[20:09:41] *** Joins: dmaislin (~dmaislin@047-233-046-055.res.spectrum.com)
[20:15:18] *** Quits: oprypin (~irc@pryp.in) (Ping timeout: 268 seconds)
[20:16:44] *** Joins: anikolov (~anikolov@80.72.92.226.coresnet.bg)
[20:18:18] <dmaislin> How can I capture all spaces before a :
[20:18:20] <dmaislin> 	Process Command Line:
[20:18:41] <dmaislin> The two spaces between Process Command Line
[20:18:51] <dmaislin> 	Process Command Line:	xcopy  /y patch-lists ..\..\Patch\
[20:18:57] <dmaislin> But nothing after the :
[20:20:47] *** Quits: anikolov (~anikolov@80.72.92.226.coresnet.bg) (Remote host closed the connection)
[20:21:04] *** Joins: anikolov (~anikolov@80.72.92.226.coresnet.bg)
[20:25:34] *** Joins: oprypin (~irc@pryp.in)
[20:25:57] <purplex> dmaislin: https://regex101.com/r/uMZTRA/1 but why?
[20:30:29] <dmaislin> Cleaning field names up with spaces in Cribl LogStream
[20:48:20] <purplex> That's it then?
[21:00:36] <OnlineCop> ` (?=[^\n:]*:)`
[21:13:38] *** Joins: txtsd (~txtsd@user/txtsd)
[21:33:37] *** Quits: blddk (~admin@185.233.252.229) (Ping timeout: 252 seconds)
[21:34:00] *** Joins: blddk (~admin@185.233.252.229)
[21:53:40] *** Quits: Floflobel_ (~Floflobel@cosium-fo-152-18.fib.nerim.net) (Remote host closed the connection)
[22:00:36] *** Quits: oprypin (~irc@pryp.in) (Read error: Connection reset by peer)
[22:00:38] *** Joins: oprypin_ (~irc@pryp.in)
[22:02:49] *** Joins: d1cor (~diego@179.63.242.111)
[22:10:35] *** Quits: oprypin_ (~irc@pryp.in) (Quit: Bye)
[22:10:56] *** Joins: oprypin (~irc@pryp.in)
[22:17:03] *** Joins: re101-zorse-55 (~re101-zor@49.206.39.126)
[22:17:16] <re101-zorse-55> Hi
[22:18:46] <re101-zorse-55> I need a pattern for validation in JavaScript 
[22:19:33] *** Joins: Guest678 (~Guest6@49.206.39.126)
[22:24:12] <dmaislin> Thanks purplex and OnlineCop
[22:24:19] <Guest678> form input start& end not to start with space
[22:24:39] <OnlineCop> Guest678: I don't understand your question.
[22:24:41] <Guest678> Allowing ony one space bw words
[22:24:56] <Guest678> I need a pattern validation in regex
[22:24:57] <OnlineCop> `^\w+(?:\s\w+)*$`
[22:26:40] <Guest678> Not working buddy 
[22:26:42] <dmaislin> Is something like this supported where I use the capture as the name of my group?  (?<$1>testing)123
[22:26:53] <dmaislin> where $1 = testing
[22:27:15] <Guest678> Wt
[22:27:18] <OnlineCop> As long as you inject '$1' into a regex, then build it.
[22:27:38] <OnlineCop> But if you're just trying to do it inline, then no: that's not valid.
[22:27:45] <dmaislin> ok :(
[22:28:16] <Guest678> Oh
[22:28:48] <OnlineCop> Guest678: `^` matches only at the beginning of the line. `\w+` will start matching "word" characters (so leading whitespace is invalid). Then the `(?:...)*` group will match a single whitespace followed by "word" characters (0 or more times) and then `$` will only assert true at the end of the line.
[22:30:32] *** Quits: re101-zorse-55 (~re101-zor@49.206.39.126) (Quit: Client closed)
[22:30:32] *** Quits: Guest678 (~Guest6@49.206.39.126) (Quit: Client closed)
[22:33:42] *** Quits: blddk (~admin@185.233.252.229) (Ping timeout: 260 seconds)
[22:34:25] <dmaislin> https://regex101.com/r/3hoXVE/11 was working great until they added The Logon Type:      3 as an example.
[22:34:48] <OnlineCop> Which line is that?
[22:34:59] <dmaislin> 13
[22:36:36] <dmaislin> And I had all things nice and clean, but even if I extract this, I have to rethink how I was doing things.  I was basically making Creator_Subject_Security_ID fields from the top level and subordinate field, but now they throw one line in there and I have to think about what I am going to do with the event.
[22:37:05] <OnlineCop> This regex is saying that the look-behind expects the start-of-line to be immediately followed by `\S` (non-whitespace)?
[22:37:59] <OnlineCop> I usually handle an optional line/group with a non-capturing group that surrounds a capture group: `(?:(?<LOGIN>...))?`
[22:38:00] *** Joins: blddk (~admin@185.233.252.229)
[22:38:34] <OnlineCop> That way, if it matches, then the group exists, and if that line isn't found, then it won't break the other lines that are missing it.
[22:40:53] *** Quits: pocketprotector (~pocketpro@32.64.148.146.bc.googleusercontent.com) (Quit: ZNC 1.6.1 - http://znc.in)
[22:41:09] *** Quits: [diablo] (~diablo]@user/diablo/x-9068044) (Quit: The Lounge - https://thelounge.chat)
[22:41:54] *** Joins: pocketprotector (~pocketpro@32.64.148.146.bc.googleusercontent.com)
[22:41:56] <OnlineCop> Your text is going to have some text that ends in a ':'. Then there will be 1 or more newlines, and then you'll have [tab] followed by key name, a colon, a [tab], and then more text?
[22:42:29] *** Quits: pocketprotector (~pocketpro@32.64.148.146.bc.googleusercontent.com) (Remote host closed the connection)
[22:43:10] *** Quits: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot) (Ping timeout: 240 seconds)
[22:43:28] *** Quits: simcop2387 (~simcop238@perlbot/patrician/simcop2387) (Ping timeout: 252 seconds)
[22:43:35] *** Joins: pocketprotector (~pocketpro@32.64.148.146.bc.googleusercontent.com)
[22:46:18] <dmaislin> Yeah, until now the top level fields like Creator Subject, Target Subject, and Process Information made sense, then the customer sent me the event that had the Logon Type: 3
[22:48:35] <OnlineCop> Does it all need to be done in Javascript?
[22:49:41] <dmaislin> ECMAScript, yes
[22:50:24] <dmaislin> Well the product does support GROK, so I could try it, if you have something in PCRE
[22:50:40] <dmaislin> Actually nevermind that last statement
[22:50:52] <OnlineCop> What would the new Logon Type: 3 change?
[22:51:01] <OnlineCop> Should it _not_ match certain conditions?
[22:51:37] *** Quits: pocketprotector (~pocketpro@32.64.148.146.bc.googleusercontent.com) (Quit: ZNC 1.6.1 - http://znc.in)
[22:54:30] <dmaislin> It should always just match to a KEY and VALUE
[22:54:50] <OnlineCop> So... is it working? Not working?
[22:55:25] <dmaislin> It does not capture that at all
[22:55:29] <dmaislin> Currently
[22:56:38] <dmaislin> Also, why are the TOP LEVEL fields captured on the right, but they are not highlighted on the left?
[22:58:08] <dmaislin> Oh yeah, positive look behind
[23:00:22] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[23:01:11] *** Quits: anikolov (~anikolov@80.72.92.226.coresnet.bg) (Ping timeout: 268 seconds)
[23:03:02] <OnlineCop> Oh; you were discussing version /12. I was looking at /11.
[23:03:22] <dmaislin> Sorry about the confusion
[23:03:42] <OnlineCop> That "Logon Type" doesn't have a leading tab. I believe it's looking for that before (?<KEY>)
[23:05:04] <OnlineCop> What can TOP_LEVEL contain? Some whitespace (spaces) but not others (tabs, newlines)? A single colon at the end of the line?
[23:05:16] *** Joins: anikolov (~anikolov@80.72.92.226.coresnet.bg)
[23:05:43] *** Quits: rapha (~jrs@46.4.31.69) (Changing host)
[23:05:43] *** Joins: rapha (~jrs@user/rapha)
[23:05:47] <dmaislin> I know, it totally screwed up all things I had working
[23:06:09] <OnlineCop> Well, if "Logon Type:" should be the 1st character (no leading tab), you could just do an exception for that one.
[23:06:18] <dmaislin> And I can't just make the \t optional before the KEY because then it would belong to the Subject above.
[23:06:48] <OnlineCop> Doesn't the presence of the ':' mean that you can filter that away from the Subject?
[23:07:38] <OnlineCop> https://regex101.com/r/3hoXVE/13
[23:08:22] <dmaislin> I am unsure, let me check one more time
[23:09:15] <OnlineCop> With version /13, Match 20 contains 'Logon Type'
[23:09:26] <dmaislin> Yeah
[23:09:48] <OnlineCop> If there could be 0-or-more tabs, `^\t?` => `^\t*` could also work there.
[23:10:52] <dmaislin> It might be a day before I get confirmation on it.  but he did reply stating that it is top level in his data.  
[23:10:56] <dmaislin> Seems weird to me
[23:10:58] <OnlineCop> Looks like there's a bit of a time difference between `(?:.*[\n\r])*?` and `(?:.*[\n\r]+)*?` (adding a '+' after [\n\r])
[23:11:34] <OnlineCop> Should "Logon Type" have a TOP_LEVEL of "Subject" ?
[23:11:49] <dmaislin> He said it was a top level field, that is why I was frustrated.
[23:12:05] <OnlineCop> "Logon Type" should be its own top-level field?
[23:12:11] <dmaislin> Supposedly, yes
[23:12:23] <OnlineCop> It has no nested key:value pairs: it is a key:value pair itself.
[23:12:28] <dmaislin> yes
[23:12:58] <OnlineCop> Okay, so /13 is incorrect because "Logon Type" should be the TOP_LEVEL. What should be they KEY value, and what should be the VALUE value?
[23:14:07] <OnlineCop> Otherwise, you should just do an OR pipe and then say `^(?<TOP_LEVEL2>[^\n\r:]+):\t+(?<VALUE2>.*)` or similar.
[23:14:44] *** Joins: [diablo] (~diablo]@user/diablo/x-9068044)
[23:15:22] <OnlineCop> Kind of like this: https://regex101.com/r/3hoXVE/14
[23:17:27] <dmaislin> And EMCA no branch reset groups right?
[23:17:45] *** Quits: [diablo] (~diablo]@user/diablo/x-9068044) (Client Quit)
[23:17:45] <dmaislin> Where I can duplicate the capture group name?
[23:18:15] <OnlineCop> ECMA doesn't allow branch reset groups, no.
[23:18:33] <dmaislin> :(
[23:19:01] <OnlineCop> It appears to be case-sensitive, though.
[23:19:18] <OnlineCop> TOP_LEVEL for the first stuff and Top_Level or top_level for the alternate stuff.
[23:19:42] <OnlineCop> But you still need to determine whether you want it to be KEY:VALUE pairs, or TOP_LEVEL:VALUE, or some other convention.
[23:20:34] *** Joins: [diablo] (~diablo]@user/diablo/x-9068044)
[23:20:51] *** Quits: [diablo] (~diablo]@user/diablo/x-9068044) (Client Quit)
[23:21:05] <dmaislin> My goal is TOP_LEVEL prefixed to KEY (TOP_LEVEL_KEY) = (VALUE) and I guess (TOP_LEVEL) and (VALUE)
[23:24:59] <dmaislin> OnlineCop, I sent a DM with an image
[23:25:27] <OnlineCop> Was that using PCRE or ECMAscript?
[23:25:43] <dmaislin> ECMA
[23:25:49] <dmaislin> From version 12
[23:26:05] <dmaislin> I use a MASK function to transform the names
[23:27:31] <dmaislin> Sent another DM so you can see how that works
[23:29:19] <dmaislin> Cribl LogStream is built on NodeJS, so ECMA is the default.
[23:32:50] <dmaislin> OnlineCop Regarding this:  Looks like there's a bit of a time difference between `(?:.*[\n\r])*?` and `(?:.*[\n\r]+)*?` (adding a '+' after [\n\r])
[23:33:15] <OnlineCop> I'm just looking to see what will take the smallest amount of time.
[23:33:54] <dmaislin> Is the + needed there?
[23:34:39] <dmaislin> Oh hmmm, I think I have it
[23:34:48] <dmaislin> Nevermind
[23:35:06] <OnlineCop> https://regex101.com/r/3hoXVE/15
[23:35:37] <OnlineCop> I believe Match 23, line 45.
[23:36:26] <OnlineCop> Hrm. That fails for Match 5, line 13.
[23:36:47] <dmaislin> 23 should be Top_Level = Logon Type and Value = 3
[23:38:25] <dmaislin> Since I don't need a capture group name: https://regex101.com/r/3hoXVE/16
[23:39:45] <OnlineCop> Looking at https://regex101.com/r/3hoXVE/17. Didn't see your /16.
[23:41:11] <OnlineCop> Version /17 still fails match 20.
[23:42:28] <OnlineCop> If you can simply check the existence of groups 4 and 5, that would definitely be a simpler solution.
[23:45:56] <dmaislin> Any scenario where if you don't have 3 capture groups you have an empty placeholder such that there are always three, even if one is empty?
[23:46:07] *** Joins: [diablo] (~diablo]@user/diablo/x-9068044)
[23:46:53] *** Quits: [diablo] (~diablo]@user/diablo/x-9068044) (Client Quit)
[23:47:27] <OnlineCop> You can do optional capture groups in 2 ways: `(?:(...))?` where the outer group is optional, or `(...)?` where the captured group itself is optional.
[23:47:59] <OnlineCop> I believe when those are not found, the groups simply don't exist (are null).
[23:48:22] <OnlineCop> However, if your capture group allows 0+ inside it, such as `(.*)` then it will be a 0-length match.
[23:51:04] <OnlineCop> Does https://regex101.com/r/3hoXVE/18 seem to work?
[23:51:33] <dmaislin> lemme look
[23:57:24] <OnlineCop> As far as your substitution goes, "Logon Type" will have a problem if you use the same "$1_$2: $3" (see https://regex101.com/r/3hoXVE/19)
[23:57:38] <OnlineCop> It'll give you "Logon Type:Logon Type_:3"
[23:57:44] *** Joins: [diablo] (~diablo]@user/diablo/x-9068044)
[23:58:34] *** Quits: [diablo] (~diablo]@user/diablo/x-9068044) (Client Quit)
[23:58:42] <OnlineCop> Actually, no. The original header, "Logon Type:" will remain there. Then without adding a newline, it will be "Logon Type_" as the key and "3" as the value.
[23:59:19] *** Joins: [diablo] (~diablo]@user/diablo/x-9068044)
[23:59:41] <dmaislin> So 3 capture groups?
