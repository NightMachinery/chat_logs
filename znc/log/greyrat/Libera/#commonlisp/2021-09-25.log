[00:12:02] *** Quits: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net) (Ping timeout: 252 seconds)
[00:15:36] *** Quits: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b) (Remote host closed the connection)
[00:24:28] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[00:24:56] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[00:25:20] *** Joins: eddof13 (~textual@189.178.0.178)
[00:29:42] *** Quits: attila_lendvai (~alendvai@2a02:ab88:370d:c380:4c15:c040:7494:7502) (Ping timeout: 260 seconds)
[00:31:19] *** Joins: attila_lendvai (~alendvai@2a02:ab88:370d:c380:4c15:c040:7494:7502)
[00:31:30] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[00:38:00] *** Joins: attila_lendvai_ (~alendvai@2a02:ab88:370d:c381:9e28:c26e:63e0:b887)
[00:38:05] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[00:38:49] *** Quits: attila_lendvai (~alendvai@2a02:ab88:370d:c380:4c15:c040:7494:7502) (Remote host closed the connection)
[00:39:16] *** Joins: alendvai__ (~alendvai@2a02:ab88:370d:c380:4c15:c040:7494:7502)
[00:39:23] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:39:46] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[00:40:38] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[00:41:33] *** Joins: rotateq (~user@p200300e787056600fdfeed040e17b750.dip0.t-ipconnect.de)
[00:42:08] *** Lord_of_Life_ is now known as Lord_of_Life
[00:42:46] *** Quits: attila_lendvai_ (~alendvai@2a02:ab88:370d:c381:9e28:c26e:63e0:b887) (Ping timeout: 260 seconds)
[00:43:52] *** Quits: alendvai__ (~alendvai@2a02:ab88:370d:c380:4c15:c040:7494:7502) (Ping timeout: 252 seconds)
[00:49:48] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[00:51:36] *** Quits: jkordani (~Guest17@c-69-255-2-251.hsd1.md.comcast.net) (Quit: Client closed)
[01:05:26] *** Quits: eddof13 (~textual@189.178.0.178) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[01:08:21] *** Quits: random-nick (~random-ni@87.116.178.231) (Quit: quit)
[01:09:42] *** Joins: random-nick (~random-ni@87.116.178.231)
[01:15:55] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[01:29:51] <phoe> etimmons: :D
[01:30:13] <phoe> glad that I could be of (indirect) service
[01:30:37] *** Parts: didi (~user@user/didi) (O bella ciao bella ciao bella ciao, ciao, ciao.)
[01:35:33] <lotuseater> ohai phoe :)
[01:37:00] *** Joins: Oladon (~olad@98.43.81.226)
[02:09:23] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[02:09:36] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[02:21:54] *** Joins: terrorjack (~terrorjac@ec2-35-181-134-114.eu-west-3.compute.amazonaws.com)
[02:22:11] *** Quits: terrorjack (~terrorjac@ec2-35-181-134-114.eu-west-3.compute.amazonaws.com) (Client Quit)
[02:25:04] *** Quits: frgo (~frgo@p200300deef0cee00a1e1a53ca91ae2c8.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:25:32] *** Joins: frgo (~frgo@p200300deef0cee00a1e1a53ca91ae2c8.dip0.t-ipconnect.de)
[02:29:28] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 252 seconds)
[02:30:16] *** Joins: karlosz (~karlosz@47.180.55.252)
[02:38:53] *** Joins: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49)
[02:40:16] *** Joins: terrorjack (~terrorjac@ec2-35-181-134-114.eu-west-3.compute.amazonaws.com)
[02:44:51] *** Quits: pve (~pve@87-93-185-174.bb.dnainternet.fi) (Quit: leaving)
[02:45:21] *** Joins: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net)
[02:54:10] *** Quits: nature_ (~nature@mail.blazebone.com) (Ping timeout: 252 seconds)
[02:58:37] *** Quits: random-nick (~random-ni@87.116.178.231) (Ping timeout: 265 seconds)
[03:08:34] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[03:11:43] <Josh_2> pjb: gonna catch it with handler-case and throw it straight in the trash
[03:20:15] * semz wonders how reliable the condition system could be in low memory situations
[03:20:44] <semz> Is it legal to preallocate a single storage-condition for this situation and just reuse it every time?
[03:21:13] <White_Flame> the system should at least leave space for creating/handling out of memory conditions, I don't think it's a problem for you to do the same
[03:22:18] <White_Flame> however, it's not just the condition object.  Any consing, including during printing, can still be problematic
[03:22:36] <hayley> I believe it is...
[03:22:37] <hayley> clhs storage-condition
[03:22:38] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/e_storag.htm
[03:23:38] <hayley> Apparently not, the notes are just about what can signal STORAGE-CONDITION (tl/dr everything).
[03:26:04] *** Quits: taiju (~taiju@m014013236064.v4.enabler.ne.jp) (Ping timeout: 252 seconds)
[03:27:29] <semz> clhs 9.1.4.1.1
[03:27:29] <specbot> Resignaling a Condition: http://www.lispworks.com/reference/HyperSpec/Body/09_adaa.htm
[03:27:33] <saturn2> it should be legal to preallocate a storage-condition and then make a new one after it's been handled and there's room again
[03:27:49] <semz> I guess it's debatable whether OOMs at different times are "the same situation"
[03:30:11] <saturn2> maybe it doesn't matter since this rule only applies "during the dynamic extent of the signaling process"
[03:30:43] *** Quits: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net) (Read error: Connection reset by peer)
[03:31:03] *** Joins: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net)
[03:32:04] <saturn2> and running out of memory again while handling a storage-condition just means the world ends anyway
[03:32:09] <semz> Are conditions themselves guaranteed to survive the signalling process? If they don't, one could reuse the space. Doesn't deal with OOM during the OOM handler but arguably this is a major user fuckup.
[03:32:18] <semz> If they aren't*
[03:38:04] <Nilby> IIRC some lisp machines had a memory reserve for handling out of memory conditions, and also the firmware could save a restartable image if things got really bad
[03:40:10] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[04:30:15] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[04:35:29] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 252 seconds)
[04:37:23] *** Joins: taiju (~taiju@m014013236064.v4.enabler.ne.jp)
[04:39:37] *** Quits: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net) (Remote host closed the connection)
[04:39:56] *** Joins: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net)
[04:44:28] *** Joins: icer (~eric@2600:1700:f9b0:7060:dac:a165:a2d7:1050)
[04:45:12] *** Quits: icer (~eric@2600:1700:f9b0:7060:dac:a165:a2d7:1050) (Client Quit)
[04:46:57] *** Quits: lottaquestions (~nick@2607:fa49:503e:3000:dd05:5816:a203:9234) (Ping timeout: 250 seconds)
[04:48:43] *** Joins: icer (eric@gateway/vpn/protonvpn/icer)
[04:53:39] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.2.1)
[05:19:28] *** Quits: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net) (Remote host closed the connection)
[05:21:10] *** Quits: karlosz (~karlosz@47.180.55.252) (Quit: karlosz)
[05:24:25] *** Quits: ggoes (~gregf@fsf/staff/ggoes) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[05:28:18] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[05:33:38] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[05:35:19] *** Quits: taiju (~taiju@m014013236064.v4.enabler.ne.jp) (Read error: Connection reset by peer)
[05:36:09] *** Joins: taiju (~taiju@240b:253:ec40:2400:e069:cea0:b66b:350c)
[05:41:59] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[05:42:10] *** Joins: john__ (~john@dynamic-095-115-142-224.95.115.pool.telefonica.de)
[05:42:29] *** Joins: srhm (~srhm@user/srhm)
[05:44:53] *** Quits: gaqwas (~john@dynamic-077-002-034-127.77.2.pool.telefonica.de) (Ping timeout: 265 seconds)
[05:45:27] *** Joins: ggoes (~gregf@fsf/staff/ggoes)
[05:47:26] *** Quits: Skyfire (~pyon@user/pyon) (Quit: brb)
[05:58:57] *** Joins: Oladon (~olad@98.43.81.226)
[06:01:42] *** Joins: karlosz (~karlosz@12.196.174.98)
[06:05:44] *** Joins: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b)
[06:06:05] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[06:13:49] *** Quits: prxq (~quassel@x4dbd3860.dyn.telefonica.de) (Ping timeout: 252 seconds)
[06:14:06] *** Quits: taiju (~taiju@240b:253:ec40:2400:e069:cea0:b66b:350c) (Ping timeout: 260 seconds)
[06:14:12] *** Joins: prxq (~quassel@x4db4ad07.dyn.telefonica.de)
[06:21:38] *** Quits: karlosz (~karlosz@12.196.174.98) (Ping timeout: 252 seconds)
[06:24:50] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[06:32:35] <beach> Good morning everyone!
[06:45:59] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[06:49:10] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 265 seconds)
[06:54:12] *** Joins: elderK (uid205007@id-205007.helmsley.irccloud.com)
[06:55:07] *** Quits: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[07:01:07] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[07:08:19] *** Quits: semz (~none@user/semz) (Ping timeout: 252 seconds)
[07:08:30] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[07:10:32] *** Quits: lotuseater (~user@p200300e7870566004b01295534bb48e2.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[07:13:20] <bitspook[m]> Good morning!
[07:13:51] *** Joins: dre (~dre@2001:8003:c932:c301:91f3:44d0:e7a2:4247)
[07:18:48] <beach> Hello bitspook[m].
[07:21:32] *** Joins: semz (~none@user/semz)
[07:34:07] *** Joins: igemnace (~ian@user/igemnace)
[07:59:49] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.2.1)
[08:02:29] *** Quits: jealousmonk (~user@2804:431:e7c4:4247:75cd:c27b:296a:fb0f) (Quit: ERC (IRC client for Emacs 27.1))
[08:02:59] *** Quits: icer (eric@gateway/vpn/protonvpn/icer) (Quit: WeeChat 2.8)
[08:06:37] *** Joins: igemnace (~ian@user/igemnace)
[08:15:13] *** Joins: wilfred (uid159@id-159.uxbridge.irccloud.com)
[08:18:44] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[08:40:18] *** Joins: taiju (~taiju@m014013236064.v4.enabler.ne.jp)
[08:44:48] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.2.1)
[08:54:23] *** Joins: igemnace (~ian@user/igemnace)
[09:02:06] *** Quits: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49) (Ping timeout: 260 seconds)
[09:13:18] *** Quits: elderK (uid205007@id-205007.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[09:15:14] *** Quits: taiju (~taiju@m014013236064.v4.enabler.ne.jp) (Read error: Connection reset by peer)
[09:16:45] *** Joins: taiju (~taiju@240b:253:ec40:2400:e069:cea0:b66b:350c)
[09:30:13] *** Joins: karlosz (~karlosz@12.196.174.98)
[09:36:11] *** Joins: pve (~pve@87-93-135-144.bb.dnainternet.fi)
[09:53:09] <pjb> semz: good question (reuse of conditions).  1- we can signal the same condition several times. 2- most condition classes in the standard don't have slot writers (therefore in a new situation, there's no standard API to mutate it, but nothing prevents an implementation to have and do it). 3- usually, conditions are not collected, ie. if a condition was mutated, this would have no consequence, because nobody keeps references to old conditions.
[09:55:00] <pjb> semz: so in the spirit of the standard, it would be best if the condition was pre-allocated, but not reused.  It could be allocated when the garbage collector can free enough memory for it.  But it would be preferable to allocate a new one each time it's signaled.
[09:55:59] <pjb> while conditions are not usually collected, this is something that is perfectly conceivable: you could keep reference to old conditions in an object-oriented logging system.
[10:10:48] <Alfr> clhs 9.1.4.1.1
[10:10:48] <specbot> Resignaling a Condition: http://www.lispworks.com/reference/HyperSpec/Body/09_adaa.htm
[10:10:56] <Alfr> pjb, ^ might be relevant.
[10:12:46] * Alfr thinks hes shouldn't read in reverse order.
[10:30:26] <pjb> Alfr: thank you.  Indeed. The problem is that the code that signals a condition cannot know when the handling of the condition is finished. It's definitely not when we're out of a handler-bind, but even not when we're out of a handler-case.  For example, the handler could store the condition (with the situation that led to its signaling embedded in it), and process it later.
[10:30:54] <pjb> So indeed, conditions can be pre-allocated, but they should be used for a single situation.
[10:31:05] <pjb> semz: ^
[10:42:11] <pjb> semz: note that when a storage-condition occurs, the condition object is not the only object that needs to be allocated. We may also need to allocate some string (error message), some bignum (memory size, etc), and some other temporary object.  Therefore it's probably best managed by reserving some memory zone where to allocate those objects, at the level of the memory manager.
[10:42:33] <pjb> the handler of the condition will also need some memory to work.
[11:02:29] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[11:02:40] *** Quits: karlosz (~karlosz@12.196.174.98) (Quit: karlosz)
[11:02:50] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[11:03:58] <greyrat> I am trying to write a one-off "macro" without using an actual macro. But `eval' seems to evaluate its input in the global scope. How do I do this idiomatically?
[11:04:01] <greyrat> (let* ((year "1400") (month "12"))
[11:04:01] <greyrat>            (loop for s in '(year month day)
[11:04:01] <greyrat>                  do
[11:04:01] <greyrat>                  `(setq ,s (or (ignore-errors (parse-integer ,s)) 0)))
[11:04:03] <greyrat>            (= 1400 year))
[11:05:01] <beach> greyrat: Please use a paste site for more than one line of code.
[11:06:14] <moon-child> greyrat: 'macrolet', perhaps
[11:06:48] <CodeBitCookie[m]> greyrat: you could use http://ix.io
[11:06:54] <beach> greyrat: You can't really do that.  You can't turn a name into a lexical variable.
[11:07:51] <beach> greyrat: And that's for good reasons.
[11:08:31] <greyrat> I didn't use a pastebin because it takes two seconds for the site to load for me, so I really don't like opening webpages when I don't have to. I'll use pastebins in the future.
[11:09:02] <moon-child> you should be able to configure your text editor to automatically post some region to a paste site
[11:11:02] <greyrat> moon-child: indeed, emacs suggested using a paste site to me. :D
[11:12:00] <greyrat> beach: What are the good reasons?
[11:12:26] <moon-child> performance
[11:13:07] <moon-child> the compiler is less constrained if it is not required to be able to dynamically materialise a location for a given variable
[11:13:20] <beach> greyrat: What moon-child said.  If that were possible, the compiler could not apply certain optimizations, such as eliminating dead variables.
[11:15:04] <moon-child> eliminating dead variables doesn't matter _that_ much--just a bit of extra stack space.  But any sort of constant propagation or type analysis would be completely killed
[11:18:19] <beach> Sort of.  If the variable is in a register, it may have to be spilled if it is considered live.
[11:20:13] <moon-child> sure.  But that's still minimal compared with the other costs
[11:20:19] <beach> Indeed.
[11:20:42] <beach> Just pointing out that it is more than "just a bit of extra stack space".
[11:21:01] <moon-child> fair enough
[11:22:32] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[11:35:20] <hayley> One trick I've done (which I think is a bit famous for happening frequently in SBCL sources) is to write a form like (macrolet ((frob-it () code-generation-stuff-here)) (frob-it)).
[11:36:57] <hayley> I recall one person wrote a macro for this pattern, and called it ETOUQ (backwards QUOTE).
[11:39:15] <greyrat> Okay, I wrote a macro. Is there any way to "map" the macro on a list? Sth like `(mapcar #'to-int '(year month day))' where `to-int' is a macro.
[11:40:01] <moon-child> put the mapping in your macro
[11:40:27] <moon-child> (macrolet ((stuff () `(progn ,@(loop for ... in ... collect `(setf...))))))
[11:41:38] <moon-child> (could make it a parameter.  (defmacro stuff (&rest vars) ... iterate over vars) (stuff year month day)
[11:42:19] *** Joins: gxt_ (~gxt@gateway/tor-sasl/gxt)
[11:44:01] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[11:48:16] <greyrat> moon-child: Thanks. This seems awfully redundant and non-composable though. Why can't there be a general way to iterate a macro over symbols? 
[11:48:50] <beach> greyrat: There is, but it will just return a list of forms.
[11:49:10] *** Joins: X-Scale` (~ARM@50.77.166.178.rev.vodafone.pt)
[11:49:34] <moon-child> greyrat: we've already established that this is 'one-off'.  Why should it need to compose?
[11:49:41] <moon-child> (And, I don't see why it is redundant)
[11:50:13] <moon-child> (in fact, I don't entirely see why it composes much worse than any other solution.  But.)
[11:50:25] *** Quits: X-Scale (~ARM@31.22.200.105) (Ping timeout: 252 seconds)
[11:50:28] <greyrat> moon-child: I would need to repeat the boilerplate for iterating over multiple arguments in ALL my oneoff macros, which is a lot of repetition.
[11:51:08] *** X-Scale` is now known as X-Scale
[11:51:40] <moon-child> you can easily write a macro for writing one-off macros.  Beyond that, it seems likely to me there is an alternate organization that would work better, but without looking at the code I cannot supply it
[11:53:03] <greyrat> moon-child: Can I write a macro that expands `(macro-iter some-macro a b c)' to `(progn (some-macro a) (some-macro b) ...)'? I guess this should be doable, and will resolve my problems.
[11:54:06] <moon-child> sure
[11:54:37] <moon-child> (defmacro ctmap (m &rest args) `(progn ,@(loop for arg in args collect `(m ,arg)))) or some such
[11:54:48] <moon-child> err, `(,m ,arg)
[11:55:51] <moon-child> (the irony of a parameter named 'args' is not lost on me :)
[11:58:30] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[11:59:46] *** Joins: selwyn (~selwyn@user/selwyn)
[12:08:45] <greyrat> moon-child: Is it possible to add optional keyword arguments to the macro, while taking all other args into a list? Sth like this:
[12:09:43] <greyrat> https://paste.gnugen.ch/paste/VRtm
[12:10:11] <pve> I decided to see if Eclector could be used to provide a shorthand way of accessing instance slots. Here's what I got:
[12:10:17] <pve> https://github.com/pve1/eclector-access/blob/master/examples/slots-and-accessors-test.lisp
[12:10:47] <pve> I remember being a bit annoyed at the verbosity of accessing slots when I started lisping. I don't really feel that way anymore, but it was a nice exercise nonetheless.
[12:11:44] <lukego> Hey does anyone know the backstory on CLML? https://github.com/mmaul/clml. It's a machine learning library for Common Lisp that looks surprisingly (?) nice?
[12:13:40] <hayley> .oO(BANNED from the Common Lisp Object System gang)
[12:16:08] *** Joins: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it)
[12:17:02] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 268 seconds)
[12:17:45] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[12:21:17] *** Joins: cosimone` (~user@93-47-228-87.ip115.fastwebnet.it)
[12:22:22] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 252 seconds)
[12:22:57] <lukego> pve: WITH-SLOTS is my coping mechanism
[12:23:59] <beach> Even better is to ignore slots and use WITH-ACCESSORS.
[12:24:01] <lukego> pve: oh, that syntax looks super duper interesting
[12:24:46] <lukego> pve: I would totally use that if it can be added to an SBCL program without weird side effects like messing up debug info (I have no idea if that's a thing, just not sure how invasive switching readers is)
[12:26:53] <lukego> being a dweeb I would be tempted to introduce new unicode characters for backwards compatibility
[12:27:17] <pve> lukego: to be honest, I don't know how invasive it is either
[12:28:15] <lukego> seems like there's a lot of interest in using eclector in applications, and a lot of uncertainty about what the implications might be
[12:29:02] <pve> lukego: when you say "debug info", what do you mean specifically?
[12:30:45] <lukego> I don't mean to be specific :) I am mostly just wondering if there are surprising consequences of switching the reader out or not. but okay SBCL has a lot of "source location" machinery for mapping machine code back to a path through the program e.g. to make 'v' work in the SLIME debugger
[12:31:18] <lukego> and I wonder if some of the machinery to make that work is in the standard SBCL reader and if so whether swapping it out would break stuff
[12:32:46] <pve> lukego: ok, but I should point out that in my example the reader is only changed on a per-file basis. So it is not an all-in situtation.
[12:34:59] <lukego> still, I'm looking at this imagining using it pervasively in all my application code :)
[12:37:27] *** Joins: Skyfire (~pyon@user/pyon)
[12:37:40] <beach> lukego: Yes, I think source information will be lost since it is specific to the SBCL reader.  Eclector uses a different (better) system called Concrete Syntax Tree, but that's optional, and incompatible with the SBCL evaluator.
[12:38:19] <beach> ... unless scymtym implemented an SBCL-specific option for that, of course.
[12:38:34] <lukego> good to know, thanks!
[12:38:41] <beach> Sure.
[12:39:47] <beach> Of course, there is no longer any particular reason for a Common Lisp implementation to use an implementations-specific reader, so perhaps you can convince the SBCL maintainers to use Eclector instead. :)
[12:41:44] <pve> lukego: At least I'm able to jump to location from the debugger, and M-. to functions, so I don't know if much has changed.
[12:41:44] * beach makes another futile attempt to cut the collective maintenance burden of maintainers of Common Lisp implementations. 
[12:42:13] <hayley> beach: You miss every shot you don't make!
[12:42:31] <beach> Oh, maybe SBCL patches the raw S-expressions from the file position.
[12:42:44] <beach> In which case, the source information is NOT lost.
[12:43:01] <beach> hayley: True.
[12:45:04] <beach> Well, no, it can't really do that for nested expressions can it?
[12:45:10] <lukego> beach: well you have people wanting your stuff now, it just might takes us a while to figure out how to use it :)
[12:46:00] <beach> lukego: Yes, that's a good start.  Though, I insist that Eclector is no longer part of "my stuff".  It is almost entirely the creation of scymtym.
[12:46:32] <beach> ... which is probably a good thing because he writes better code than I do.
[12:47:40] <pjb> greyrat: you cannot access the lexical scope with a macrolet as you envision.  The problem is that macros are expanded at compilation-time, but your loop is evaluated at run-time.
[12:47:55] <pjb> greyrat: you need to put the loop inside the macrolet.
[12:48:07] <beach> pve: So thanks for exposing your interesting experiments to the general public!!!
[12:48:21] <greyrat> pjb: Thanks!
[12:48:43] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[12:48:54] <pve> beach: hehe, no problem, it's been fun trying it out
[12:49:15] <beach> I can very well imagine.  Eclector is a great program.
[12:49:29] <beach> I have had a lot of fun with it myself.
[12:49:59] <pve> beach: I think you're right regarding nested expressions, btw
[12:50:12] <greyrat> How do I loop on a list of lists? In the ith iteration, I want to have a list of all the ith elements.
[12:50:18] <beach> pve: Yeah, I thought so.
[12:50:19] <pjb> greyrat: https://termbin.com/d0gr
[12:50:20] <pve> it only wants to jump to the top-level form
[12:50:43] <beach> Makes sense.
[12:51:44] *** Joins: amb007 (~a_bakic@179.151.22.93.rev.sfr.net)
[12:52:13] <beach> At the very least, we should try to convince the SBCL maintainers to allow the use of Eclector as an optional reader for things like COMPILE-FILE.
[12:53:21] <pjb> greyrat: if the number of lists is less than call-arguments-limit (minimum = 50) - 1 then:  https://termbin.com/t8nd
[12:54:31] <greyrat> pjb: thanks. What if it's bigger than that? Should I iterate on the index itself manually?
[12:55:11] <pjb> greyrat: otherwise: https://termbin.com/1pob
[12:55:38] <pjb> greyrat: certainly not on the index, since that would automatically multiply the complexity by n!
[12:56:49] <pjb> greyrat: you can replace some by every if you want to stop on the shortest list, instead of the longuest.  mapcar and the other map functions in CL stop on the shortest.
[12:58:37] <greyrat> :thumbs-up:
[12:58:58] *** Joins: Krystof (~user@81.174.155.115)
[13:00:55] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.2.1)
[13:01:18] *** Joins: igemnace (~ian@user/igemnace)
[13:04:58] *** Quits: wilfred (uid159@id-159.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[13:09:49] *** Joins: attila_lendvai (~alendvai@2a02:ab88:370d:c380:4c15:c040:7494:7502)
[13:15:51] *** Joins: lottaquestions (~nick@2607:fa49:503e:3000:b2cd:bffd:9b60:82b9)
[13:23:01] *** Joins: lotuseater (~user@p200300e7870566004b01295534bb48e2.dip0.t-ipconnect.de)
[13:26:47] *** Quits: amb007 (~a_bakic@179.151.22.93.rev.sfr.net) (Ping timeout: 252 seconds)
[13:27:17] *** Joins: amb007 (~a_bakic@252.39.22.93.rev.sfr.net)
[13:39:23] <greyrat> Using sly, how do I see the stdout of the evaluation? `sly-eval-print-last-expression' inserts them in the current buffer, but I want to see them in a new buffer. (Of course, I can write my own wrapper around sly, just asking to see if there is already a ready solution.)
[13:56:06] *** Joins: tfeb (~tfb@88.98.95.237)
[14:03:16] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[14:14:49] *** Quits: terrorjack (~terrorjac@ec2-35-181-134-114.eu-west-3.compute.amazonaws.com) (Quit: The Lounge - https://thelounge.chat)
[14:16:46] *** Joins: terrorjack (~terrorjac@ec2-35-181-134-114.eu-west-3.compute.amazonaws.com)
[14:23:04] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[14:40:10] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:42:03] *** Joins: random-nick (~random-ni@87.116.183.216)
[14:50:47] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[15:00:43] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Ping timeout: 265 seconds)
[15:03:28] <greyrat> How do I get an optional variable that can also be `nil'?
[15:04:15] <rotateq> you mean in the lambda list of a function?
[15:04:27] <rotateq> or please specify :)
[15:05:13] <greyrat> I think i found the answer: (defun foo (mandatory &optional (optional1 nil optional1-supplied-p)) ...)
[15:05:50] <rotateq> yes but the initial value and the predicate are also optional ;)
[15:06:25] <rotateq> if you don't need the predicate, then (defun foo (x &optional y) ...) is totally good
[15:07:08] <rotateq> but sometimes you want the intention when y stays being a list, so (defun foo (x &optional (y '())) ...)
[15:07:34] <rotateq> or a list values are pushed to or whatever
[15:09:18] <greyrat> Yeah, cl is quite good. Now I wonder if this works in elisp, too. :))
[15:09:46] <rotateq> i won't count on it
[15:10:51] <rotateq> some days ago someone in #clojure said, in elisp the else clause for IF has implicit progn and concerned that a `cool feature` but it's not good at all and inconsistent
[15:11:48] <lisp123> rotateq: It may look strange but there's nothing bad about it, saves a user from having to write out the progn for it
[15:12:36] <rotateq> of course it is, such an inconsistency even with this elementar operator is bad
[15:13:01] <lisp123> There are inconsistencies in most languages
[15:13:12] <rotateq> but after all, it's mostly for programming your emacs, so
[15:13:26] <rotateq> and this justifies more?
[15:14:29] <lisp123> Well it saves the progn, its just that we are used to the symmetry on the CL side (which I think is better)
[15:15:08] <lisp123> After all RMS did write the GNU compiler so I don't want to throw stones at elisp too much :)
[15:15:59] <rotateq> after all they can't be thrown in the same pot anyway
[15:16:47] *** Quits: cosimone` (~user@93-47-228-87.ip115.fastwebnet.it) (Ping timeout: 252 seconds)
[15:17:16] <lisp123> Yes, but one can equally say its too strong to say its "not good at all"
[15:17:19] <lisp123> Its different
[15:17:19] <rotateq> and symmetry breaks might be good in nature and physics, to have some matter be left over
[15:18:00] <rotateq> i said the "design" of the IF is not good at all and not all of it in general
[15:18:37] <lisp123> I'm referring to the IF statement - some may like it
[15:18:57] <rotateq> is ok for me
[15:19:07] <lisp123> +1
[15:19:16] <rotateq> you mean 1+ :P
[15:19:22] <lisp123> :P
[15:22:09] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[15:23:30] *** john__ is now known as gaqwas
[15:32:16] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[15:35:29] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Ping timeout: 252 seconds)
[15:37:33] *** Joins: Qwnavery (~Qwnavery@193-116-127-113.tpgi.com.au)
[15:37:36] *** Quits: Qwnavery (~Qwnavery@193-116-127-113.tpgi.com.au) (Client Quit)
[15:43:17] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Ping timeout: 264 seconds)
[15:46:34] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[15:48:12] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Client Quit)
[15:52:58] *** Quits: amb007 (~a_bakic@252.39.22.93.rev.sfr.net) (Ping timeout: 252 seconds)
[15:53:46] *** Joins: amb007 (~a_bakic@16.36.22.93.rev.sfr.net)
[15:56:52] *** Quits: dre (~dre@2001:8003:c932:c301:91f3:44d0:e7a2:4247) (Ping timeout: 252 seconds)
[15:58:43] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:17:36] *** Joins: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net)
[16:21:29] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[16:28:30] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[16:34:25] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:55:07] *** Quits: Posterdati (~posterdat@host-95-235-15-123.retail.telecomitalia.it) (Read error: Connection reset by peer)
[17:00:15] <pve> Is eql the default test for set-difference?
[17:05:42] <semz> pjb: Good point with the logging system. Keeping a bit of memory around specifically for these situations is starting to seem like the only real solution...
[17:05:50] <semz> at least it's a rather simple one at that
[17:08:04] *** Quits: Josh_2 (~user@37.25.47.130) (Remote host closed the connection)
[17:11:18] *** Joins: Lycurgus (~juan@98.4.112.204)
[17:12:13] <pve> lukego: It occurs to me that if we relax the readtable that "forwards" to eclector a bit, then jumping to location ("v") from the debugger will take me to the correct (nested) form.
[17:12:37] <pve> https://github.com/pve1/eclector-access/blob/master/examples/slots-and-accessors-test.lisp
[17:12:57] <pve> see the :character-set initarg
[17:14:25] <pve> so we basically let sbcl read lists "natively", but let eclector read the atoms
[17:19:28] <yitzi> pve: Are you trying to let SBCL handle source code tracking?
[17:20:02] <pve> yitzi: yes, othewise it will only jump to the top-level form
[17:20:09] <rotateq> pve: better provide an explicit test that fits your situation
[17:21:19] <pve> rotateq: the page for intersection says that EQL is the default, but set-difference says nothing, that's why I was wondering
[17:21:52] <yitzi> pve: What are you trying to accomplish by using Eclector in this way? Just curious.
[17:21:54] <rotateq> yes, I've checked for myself the latter
[17:22:46] <pve> yitzi: just checking it out at the moment, to see what kind of fun stuff can be done
[17:22:48] <rotateq> pve: and now more explicit what I asked myself, for what the heck :test-not was by hysterical raisin
[17:22:48] <beach> rotateq: How did you check it?
[17:23:16] <rotateq> beach: I meant I just "checked" the site, meant reading it. Nothing more.
[17:23:25] <beach> OK.
[17:23:41] *** Quits: semz (~none@user/semz) (Remote host closed the connection)
[17:23:43] *** Quits: amb007 (~a_bakic@16.36.22.93.rev.sfr.net) (Ping timeout: 252 seconds)
[17:24:06] *** Joins: amb007 (~a_bakic@157.38.22.93.rev.sfr.net)
[17:24:26] *** Joins: semz (~none@user/semz)
[17:24:26] <yitzi> pve: I use it in common-lisp-jupyter if you are curious to do code inspection, code completion, code reading & compilation in clasp, and recreating source code maps for sbcl, cmucl, ecl and ccl.
[17:25:04] <beach> pve: The information is in meaning of "satisfying the test".
[17:25:11] <beach> clhs 17.2.1
[17:25:11] <specbot> Satisfying a Two-Argument Test: http://www.lispworks.com/reference/HyperSpec/Body/17_ba.htm
[17:25:17] <pve> I seem to remember that some page somewhere said that unless otherwise stated, a test defaults to eql, but I could have been dreaming
[17:25:37] <pve> beach: :) that's the one
[17:26:27] <rotateq> beach: Do you know how the :test-not worked? (as it is said being deprecated)
[17:26:53] <pve> yitzi: that sounds pretty cool
[17:27:03] <beach> rotateq: It is widely accepted these days that all those "deprecated" instances should be ignored.
[17:27:11] <rotateq> OK.
[17:27:27] <beach> So :test-not is just the negation of :test.
[17:27:43] <rotateq> I see, now it makes more sense to me.
[17:27:53] <beach> Great!
[17:28:38] <rotateq> pve: And I had to recall that under EQL the comparing of two strings gives NIL, even if they have the same content.
[17:29:48] <beach> rotateq: Not always.  The compiler can sometimes optimize so that two strings become one.
[17:30:06] <pve> yitzi: so you can read *everything* with eclector, and still jump to location works for nested expressions?
[17:30:29] <rotateq> Okay, so that's would be good, but I wouldn't count on it in the first place.
[17:30:31] <pve> rotateq: that's already ingrained in me by now :)
[17:30:55] <rotateq> good, I try to stick up ^^
[17:31:17] <rotateq> beach: How does SICL do it?
[17:31:52] <pve> yitzi: or I guess I'm asking if that is what "recreating source code maps" means
[17:32:17] <beach> rotateq: Strings?  I don't remember.  I suspect we don't coalesce at the momennt.
[17:32:37] <beach> *moment
[17:33:45] <yitzi> pve: There are several areas where Eclector is being used and some parts where the implementation reader is used. I'll give you a basic explanation...
[17:34:28] <rotateq> Ok not important, assuming they aren't equal in memory would be fine.
[17:34:47] <beach> Yes, never assume that.
[17:34:58] <beach> ... unless you are sure, of course.
[17:37:13] <rotateq> Like using SCHAR rather than CHAR when it's clearly of type SIMPLE-STRING and the index given isn't out of bounds.
[17:37:36] <rotateq> Or CHAR over AREF.
[17:37:42] <yitzi> pve: reading and evaluation uses the implementation's reader and compiler. Implementations vary on what they report as the "source code location" though. I need line and column references to make the debugger work. For clasp I use an enhanced gray-stream under their eclector  reader. For SBCL, CMUCL, ECL and CCL I use eclector to recreate a map from the implementation's source references to line/column if needed. For code inspection/completion I
[17:37:42] <yitzi> use eclector with a custom client that does not intern symbols and keeps the package names separate so I can do inpection and completion on those also.
[17:40:56] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[17:42:17] <pjb> greyrat: I don't know about sly, but in slime, C-u prefix will make slime-eval-last-expression insert the result in the current buffer.
[17:43:09] <pve> yitzi: thanks for the explanation, that sounds really interesting
[17:43:15] <pve> also super complicated
[17:43:28] <pjb> greyrat: emacs lisp is somewhat different, and indeed, on &key and &optional
[17:43:53] <pve> complicated as in hard, I mean
[17:44:08] <pjb> greyrat: but there's (require 'cl) and defun* that behaves more closely to cl:defun.
[17:44:45] <yitzi> pve: no problem. And yes, it is kind of mess but having a debugger in Jupyter makes it so.
[17:46:29] <pjb> rotateq: emacs lisp being to program emacs is not a reason why emacs couldn't include a full fleshed Common Lisp; ancien lisp machines contained several different lisps.  and there is a Common Lisp implementation in emacs lisp that worked before (ironicallyh) lexical binding was introduced to emacs lisp (emacs-cl); lexical
[17:47:13] <pjb> this could be revived, or another CL implementation could be ported to emacs lisp; perhaps sicl?  Or we could also integrate ecl as an emacs lisp plugin, now that they exist.
[17:48:53] <beach> pve: For the SICL reader, we do the same thing as yitzi with the Gray streams.  We have Eclector configured to create concrete syntax trees, and that's what the first pass of the compiler accepts.
[17:49:09] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[17:50:07] <beach> pve: And for the purpose of bootstrapping, we may have to configure Eclector so that it does not intern symbols in the host package system.
[17:53:12] <yitzi> clasp does essentially the same thing and as a result writing REPL that preserved source references for Jupyter was very easy compared to the other implementations. Looking forward to SICL!
[17:53:32] <beach> Heh, thanks.
[17:54:10] <beach> You are already using parts of if, since Eclector is definitely a SICL-related project.
[17:54:46] <beach> I mean, it started life as the SICL reader, and was then extracted and greatly improved by scymtym.
[17:55:19] <rotateq> pjb: definitely. Green Spuns rule applies :)
[17:55:36] <pve> beach: ok, and concrete syntax trees contain the source code location data?
[17:55:49] <beach> Yes.
[17:56:09] <beach> It wraps S-expressions in standard objects that contain source information.
[17:57:53] <yitzi> beach: Well, that is true. And trust me, that is a big deal because there is a lot of tasks in common-lisp-jupyter that would be very difficult without eclector.
[17:58:07] <pve> beach: ok, I'm still a little unsure what part Gray streams play in all this
[17:58:19] <beach> yitzi: I can very well imagine.
[17:58:42] <beach> pve: They supply the source information in a way that the client wants.
[17:59:17] <beach> pve: For example, in SICL, the source information is a quadruple: start line, start column, end line, end column.
[18:00:20] <beach> Eclector queries the stream for source information.  By default the FILE-POSITION is used, but with a Gray stream, the client can choose the format.
[18:01:27] <beach> Client code defines a Gray stream class, and method on the relevant Eclector method that queries for source information, specialized to that Gray stream class.
[18:01:30] *** Joins: selwyn (~selwyn@user/selwyn)
[18:01:45] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[18:02:10] *** Joins: selwyn (~selwyn@user/selwyn)
[18:03:01] <yitzi> pve: Eclector's source query is from the `eclector.base:source-position` method. You can see use of it here if you want. https://github.com/yitzchak/common-lisp-jupyter/blob/c5531f60da0ec288a187a55ba699e38548233819/src/cl-jupyter/utils.lisp#L224
[18:03:21] <beach> pve: https://github.com/robert-strandh/SICL/blob/master/Code/Source-tracking/stream.lisp
[18:04:42] <beach> Actually, SICL is even more special.  It reads the entire file contents into memory first, and then characters are read from the memory representation.
[18:04:57] <pve> beach: ok, I need to check those out in a bit, thanks!
[18:05:31] <beach> It does this so that the source code of the compilation unit is associated with the compiled code, in the form of a vector of strings.
[18:05:47] *** Joins: Oladon (~olad@98.43.81.226)
[18:05:50] <pve> thanks yitzi too
[18:06:09] <beach> That way, the file can go away, and we still have source location in the backtrace inspector.
[18:06:54] <beach> Unlike SBCL, where the directory belonging to Krystof can not be found on my machine.
[18:07:09] *** Joins: jealousmonk (~user@2804:431:e7c4:4247:75cd:c27b:296a:fb0f)
[18:08:15] *** Joins: X-Scale` (~ARM@83.223.233.176)
[18:09:13] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 265 seconds)
[18:10:38] *** X-Scale` is now known as X-Scale
[18:22:15] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[18:27:14] *** Quits: lottaquestions (~nick@2607:fa49:503e:3000:b2cd:bffd:9b60:82b9) (Ping timeout: 260 seconds)
[18:29:42] *** Joins: Josh_2 (~user@37.25.47.130)
[18:30:46] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:43:05] *** Quits: terrorjack (~terrorjac@ec2-35-181-134-114.eu-west-3.compute.amazonaws.com) (Quit: The Lounge - https://thelounge.chat)
[18:44:39] *** Joins: terrorjack (~terrorjac@ec2-35-181-134-114.eu-west-3.compute.amazonaws.com)
[18:44:41] *** Quits: amb007 (~a_bakic@157.38.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[18:44:54] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[18:45:25] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[18:46:28] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:50:01] *** Joins: nick3000 (~user@2001:558:6040:1b:80cd:f8bf:5142:2cb0)
[18:50:55] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[18:52:04] *** Quits: terrorjack (~terrorjac@ec2-35-181-134-114.eu-west-3.compute.amazonaws.com) (Quit: The Lounge - https://thelounge.chat)
[18:53:20] *** Joins: terrorjack (~terrorjac@ec2-35-181-134-114.eu-west-3.compute.amazonaws.com)
[18:53:40] *** Quits: terrorjack (~terrorjac@ec2-35-181-134-114.eu-west-3.compute.amazonaws.com) (Client Quit)
[19:02:53] *** Joins: terrorjack (~terrorjac@ec2-35-181-134-114.eu-west-3.compute.amazonaws.com)
[19:03:09] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[19:03:42] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:05:54] <scymtym> that's strange. references to SBCL sources are stored with logical pathnames. i thought there was no mapping to physical pathnames unless SB-EXT:SET-SBCL-SOURCE-LOCATION is called
[19:06:36] *** Joins: shka (~herr@109.231.62.239)
[19:06:36] *** Quits: shka (~herr@109.231.62.239) (Client Quit)
[19:06:41] <beach> I am sure I have seen this pathname reference, but I can't remember the situation now.
[19:06:42] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[19:06:50] *** Joins: shka (~herr@109.231.62.239)
[19:07:15] <scymtym> maybe something went wrong with a release
[19:08:04] <beach> That's possible.
[19:09:09] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[19:10:15] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[19:17:23] <lukego> pve: oh wow, is that example the whole implementation? I assumed the eclector extension was in another file but maybe that's it there near the top?
[19:18:43] *** Quits: terrorjack (~terrorjac@ec2-35-181-134-114.eu-west-3.compute.amazonaws.com) (Quit: The Lounge - https://thelounge.chat)
[19:20:23] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[19:22:14] <pve> lukego: yeah, the implementation is in another castle, but I think I could package the examples up into something easily loadable (and useable)
[19:23:26] *** Joins: dra (~dra@2a04:4540:640c:f100:8881:b96:6405:a162)
[19:24:13] <pve> lukego: the slots-and-accessors-test example depends on the eclector-access system (which in turn depends on eclector) and also the files symbol-patterns.lisp and slots-and-accessors.lisp in the examples dir
[19:25:04] *** Quits: dra (~dra@2a04:4540:640c:f100:8881:b96:6405:a162) (Client Quit)
[19:25:14] *** Joins: dra (~dra@2a04:4540:640c:f100:8881:b96:6405:a162)
[19:39:01] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:45:38] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 260 seconds)
[19:46:02] *** Joins: amb007 (~a_bakic@157.38.22.93.rev.sfr.net)
[19:48:32] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[19:48:44] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:16:27] *** Quits: amb007 (~a_bakic@157.38.22.93.rev.sfr.net) (Ping timeout: 250 seconds)
[20:18:04] *** Quits: char (~charles@cpe-76-186-124-165.tx.res.rr.com) (Ping timeout: 252 seconds)
[20:20:00] *** Joins: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte)
[20:29:10] *** Joins: nature_ (~nature@mail.blazebone.com)
[20:29:42] *** Quits: nature_ (~nature@mail.blazebone.com) (Client Quit)
[20:31:36] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[20:31:55] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[20:57:37] *** Joins: akoana (~ah@user/akoana)
[20:58:33] *** Joins: amb007 (~a_bakic@170.105.204.77.rev.sfr.net)
[21:00:48] *** Joins: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49)
[21:03:00] *** Joins: molson_ (~molson@2001-48F8-704A-CA1-0-0-75F-104D-static.midco.net)
[21:03:47] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[21:05:58] *** Quits: molson__ (~molson@2001-48F8-704A-CA1-0-0-75F-104A-static.midco.net) (Ping timeout: 252 seconds)
[21:06:18] *** Quits: mariari (~mariari@user/mariari) (Quit: WeeChat 3.2.1)
[21:09:05] *** Joins: mariari (~mariari@user/mariari)
[21:10:36] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[21:14:18] *** Quits: yewscion (~yewscion@2604:ca00:120:9922::1260:59b) (Ping timeout: 260 seconds)
[21:18:02] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 260 seconds)
[21:31:23] *** Joins: selwyn (~selwyn@user/selwyn)
[21:32:53] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[21:33:36] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:38:29] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[22:06:20] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[22:07:52] *** Joins: char (~charles@108-234-22-190.lightspeed.rcsntx.sbcglobal.net)
[22:09:25] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:09:59] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[22:10:12] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:11:42] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[22:26:24] *** Parts: lisp123 (~lisp123@5.30.23.247) (Leaving...)
[22:27:23] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[22:27:56] *** Quits: brettgilio (~brettgili@x-node.gq) (Quit: Leaving...)
[22:29:07] *** Joins: brettgilio (~brettgili@x-node.gq)
[22:32:30] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[22:37:28] *** Quits: amb007 (~a_bakic@170.105.204.77.rev.sfr.net) (Ping timeout: 265 seconds)
[22:39:27] <Krystof> beach: what, you deleted it!?
[22:40:58] <jackdaniel> :)
[22:47:36] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[22:48:34] *** Joins: amb007 (~a_bakic@107.144.204.77.rev.sfr.net)
[22:57:58] *** Quits: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net) (Remote host closed the connection)
[23:00:12] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[23:20:44] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[23:21:05] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[23:21:14] *** Quits: amb007 (~a_bakic@107.144.204.77.rev.sfr.net) (Ping timeout: 260 seconds)
[23:23:24] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[23:28:58] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 252 seconds)
[23:44:03] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[23:59:37] *** Quits: attila_lendvai (~alendvai@2a02:ab88:370d:c380:4c15:c040:7494:7502) (Ping timeout: 250 seconds)
