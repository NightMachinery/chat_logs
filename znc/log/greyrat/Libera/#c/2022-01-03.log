[00:00:17] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Remote host closed the connection)
[00:00:23] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[00:00:39] *** Quits: malina (~malina@user/malina) (Ping timeout: 256 seconds)
[00:00:46] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[00:01:41] *** Joins: koo5_ (~quassel@51.140.155.227)
[00:01:58] *** Xgc_ is now known as Xgc
[00:02:18] *** Joins: magicalegg[m] (~magicaleg@2001:470:69fc:105::1:52e9)
[00:02:41] *** Joins: mphojele (~mphojelem@2001:470:69fc:105::35ab)
[00:03:18] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[00:03:21] *** Joins: gproto23 (~gproto23@user/gproto23)
[00:03:32] *** Joins: w41 (~w41@45.76.32.7)
[00:03:34] *** Quits: gproto_23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[00:03:54] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[00:04:45] *** Joins: off^ (~off@207.5.21.20)
[00:05:06] *** Joins: CoderCharmander (~CoderChar@20014C4C12563000C96363670EDAE354.catv.pool.telekom.hu)
[00:05:12] *** Joins: trafficjam (~trafficja@119.17.42.59)
[00:05:53] *** Quits: g2anj (~v@58.228.230.4) (Ping timeout: 252 seconds)
[00:07:41] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[00:07:41] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[00:07:41] *** Joins: wroathe (~wroathe@user/wroathe)
[00:08:26] *** Joins: monkey_ (~user@190.104.116.153)
[00:08:31] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[00:11:49] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[00:12:13] *** Quits: cart_man (~rynot@host-78-144-125-216.as13285.net) (Quit: Konversation terminated!)
[00:13:19] *** Joins: esselfe (~steph@user/esselfe)
[00:13:58] *** Quits: leah2 (~leah@vuxu.org) (Quit: trotz alledem!)
[00:14:06] *** Joins: leah2 (~leah@vuxu.org)
[00:14:12] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[00:14:47] *** Joins: strajder (~strajder@user/strajder)
[00:17:59] *** Cyp_ is now known as Cyp
[00:18:14] *** Cyp is now known as Cyp_
[00:18:33] *** Cyp_ is now known as Cyp
[00:20:30] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[00:21:12] *** Quits: rgrinberg (~textual@2806:101e:7:33a5:9825:bd3b:45be:5a0f) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[00:21:18] *** Joins: jellyknight (~gelignite@55d4e4de.access.ecotel.net)
[00:21:53] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[00:22:17] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[00:24:03] *** Quits: Deepspeed (~yep@164.sub-174-215-134.myvzw.com) (Remote host closed the connection)
[00:24:09] *** Quits: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) (Ping timeout: 268 seconds)
[00:25:23] *** Joins: Deepspeed (~yep@164.sub-174-215-134.myvzw.com)
[00:26:25] *** Quits: trisk (~trisk@2601:196:4700:712:8:20ff:fe3e:890e) (Read error: Connection reset by peer)
[00:26:36] *** Joins: Triskelios (~trisk@2601:196:4700:712:8:20ff:fe3e:890e)
[00:28:06] *** Joins: g2anj (~v@58.228.230.4)
[00:28:15] *** Joins: blaub (~blaub@194-208-201-025.tele.net)
[00:29:43] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[00:30:07] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 256 seconds)
[00:30:47] *** Joins: Torr (~Torr@user/torr)
[00:31:36] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[00:31:58] *** Quits: dan_pena (~dan_pena@86.228.71.37.rev.sfr.net) (Quit: Lost terminal)
[00:32:01] *** Joins: atulu (~atulum]@2001:470:69fc:105::d50c)
[00:32:47] *** Joins: surgeon[m] (~surge9nma@2001:470:69fc:105::f585)
[00:33:41] *** Joins: reset (~reset@user/reset)
[00:34:05] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:34:40] *** Joins: explosion-mental (~explosion@2001:470:69fc:105::dac2)
[00:34:43] *** Joins: malkrister[m] (~malkriste@2001:470:69fc:105::1:44f3)
[00:34:46] *** Joins: dalz (~dalz@2001:470:69fc:105::2ea)
[00:35:02] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 240 seconds)
[00:36:47] *** Joins: simplyjimin[m] (~simplyjim@2001:470:69fc:105::1:4793)
[00:36:48] *** Joins: Neui[m] (~neuimatri@2001:470:69fc:105::745)
[00:37:25] *** Joins: go4godvin (~go4godvin@user/go4godvin)
[00:37:59] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[00:38:13] *** Joins: Torr (~Torr@user/torr)
[00:38:47] *** Joins: gproto23 (~gproto23@user/gproto23)
[00:38:51] *** Quits: zer0bitz__ (~zer0bitz@196.244.192.57) (Read error: Connection reset by peer)
[00:41:57] *** Quits: gry_ (~quassel@botters/gry) (Ping timeout: 240 seconds)
[00:47:17] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[00:48:35] *** Joins: Everything (~Everythin@37.115.210.35)
[00:50:10] *** Joins: Jeaton (~hybrid@user/Jeaton)
[00:51:00] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[00:54:09] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[00:54:17] *** EtherNet_ is now known as EtherNet
[00:54:38] *** Joins: duuude (~user@user/duuude)
[00:54:45] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[00:57:46] *** Parts: anddam (~anddam@user/anddam) (WeeChat 3.3)
[00:59:11] *** Quits: The_Jag (~The_Jag@host-79-33-196-10.retail.telecomitalia.it) (Quit: The_Jag)
[00:59:21] *** Joins: archdark[m] (~ryonagana@2001:470:69fc:105::fd27)
[01:00:08] *** Joins: Bazsalanszky[m] (~bazsalans@2001:470:69fc:105::6fe)
[01:01:22] *** Joins: jaavv[m] (~jaavvmatr@2001:470:69fc:105::1:37b1)
[01:02:26] *** Joins: Sohaib[m] (~smalinux@2001:470:69fc:105::31b5)
[01:02:38] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[01:04:13] *** Quits: jellyknight (~gelignite@55d4e4de.access.ecotel.net) (Quit: Stay safe!)
[01:04:16] *** Quits: random-nick (~random-ni@87.116.167.125) (Quit: quit)
[01:06:17] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 240 seconds)
[01:08:19] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[01:08:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[01:09:51] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[01:10:04] *** Parts: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) ()
[01:10:52] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Quit: Lost terminal)
[01:11:13] *** Akuli is now known as Akuli[testing]
[01:11:15] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[01:11:18] *** Akuli[testing] is now known as Akuli
[01:11:29] *** Quits: mahmutov (~mahmutov@5.176.40.51) (Ping timeout: 256 seconds)
[01:14:31] *** Quits: ReimuHakurei (~Reimu@raphi.vserver.alexingram.net) (Ping timeout: 245 seconds)
[01:15:20] *** Quits: hanzo_ (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[01:15:27] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[01:16:07] *** pr-asadi_ is now known as pr-asadi
[01:16:17] *** Quits: terminalpusher (~terminalp@2a01:586:8db1:1:5f76:20cc:55c7:b3a0) (Remote host closed the connection)
[01:18:45] *** Joins: random-nick (~random-ni@87.116.180.98)
[01:18:54] *** Quits: Neui[m] (~neuimatri@2001:470:69fc:105::745) (Read error: Connection reset by peer)
[01:18:54] *** Quits: malkrister[m] (~malkriste@2001:470:69fc:105::1:44f3) (Read error: Connection reset by peer)
[01:18:55] *** Quits: jaavv[m] (~jaavvmatr@2001:470:69fc:105::1:37b1) (Read error: Connection reset by peer)
[01:18:55] *** Quits: archdark[m] (~ryonagana@2001:470:69fc:105::fd27) (Read error: Connection reset by peer)
[01:18:55] *** Quits: Bazsalanszky[m] (~bazsalans@2001:470:69fc:105::6fe) (Write error: Connection reset by peer)
[01:18:55] *** Quits: Daniel[m] (~danielbau@2001:470:69fc:105::1:1a5d) (Read error: Connection reset by peer)
[01:18:55] *** Quits: Sohaib[m] (~smalinux@2001:470:69fc:105::31b5) (Write error: Connection reset by peer)
[01:18:55] *** Quits: M101donutman[m] (~M101donut@2001:470:69fc:105::d51) (Read error: Connection reset by peer)
[01:18:56] *** Quits: TheDcoder[m] (~thedcoder@user/thedcoder) (Write error: Connection reset by peer)
[01:18:57] *** Quits: go4godvin (~go4godvin@user/go4godvin) (Read error: Connection reset by peer)
[01:18:58] *** Quits: explosion-mental (~explosion@2001:470:69fc:105::dac2) (Read error: Connection reset by peer)
[01:18:58] *** Quits: dalz (~dalz@2001:470:69fc:105::2ea) (Read error: Connection reset by peer)
[01:18:58] *** Quits: mphojele (~mphojelem@2001:470:69fc:105::35ab) (Write error: Connection reset by peer)
[01:18:59] *** Quits: simplyjimin[m] (~simplyjim@2001:470:69fc:105::1:4793) (Read error: Connection reset by peer)
[01:18:59] *** Quits: surgeon[m] (~surge9nma@2001:470:69fc:105::f585) (Read error: Connection reset by peer)
[01:18:59] *** Quits: atulu (~atulum]@2001:470:69fc:105::d50c) (Read error: Connection reset by peer)
[01:18:59] *** Quits: magicalegg[m] (~magicaleg@2001:470:69fc:105::1:52e9) (Read error: Connection reset by peer)
[01:19:18] *** Quits: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net) (Quit: It's just that easy)
[01:19:26] *** Joins: ReimuHakurei (~Reimu@raphi.vserver.alexingram.net)
[01:19:45] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[01:20:03] *** Quits: Deepspeed (~yep@164.sub-174-215-134.myvzw.com) (Remote host closed the connection)
[01:20:17] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[01:21:23] *** Joins: Irvise (~irvise@2001:470:69fc:105::84c)
[01:21:37] *** Joins: Deepspeed (~yep@164.sub-174-215-134.myvzw.com)
[01:21:45] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[01:23:35] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[01:24:41] *** kzootick is now known as kzootock
[01:24:46] *** kzootock is now known as kzootech
[01:25:06] *** Joins: mahmutov (~mahmutov@5.176.45.237)
[01:26:32] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[01:26:33] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[01:26:33] *** Joins: wroathe (~wroathe@user/wroathe)
[01:27:44] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[01:28:11] *** Parts: blaub (~blaub@194-208-201-025.tele.net) (WeeChat 3.4)
[01:28:21] *** Quits: trafficjam (~trafficja@119.17.42.59) (Quit: Client closed)
[01:30:02] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 260 seconds)
[01:33:37] *** Joins: trafficjam (~trafficja@119.17.42.59)
[01:34:43] *** Joins: monkey_ (~user@190.104.116.153)
[01:35:20] *** Quits: Torr (~Torr@user/torr) (Remote host closed the connection)
[01:37:22] *** Joins: seninha (~seninha@user/seninha)
[01:37:27] *** Quits: Akuli (~Akuli@85-76-42-63-nat.elisa-mobile.fi) (Quit: Akuli)
[01:38:26] *** Joins: Torr (~Torr@user/torr)
[01:39:49] *** Joins: highrate (~presonic@111-22-237-24.gci.net)
[01:42:03] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[01:42:21] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[01:43:01] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[01:43:43] *** Quits: Irvise (~irvise@2001:470:69fc:105::84c) (Quit: Client limit exceeded: 20000)
[01:45:25] *** Joins: archdark[m] (~ryonagana@2001:470:69fc:105::fd27)
[01:45:25] *** Joins: skyeto[m] (~skyetosky@2001:470:69fc:105::c2fe)
[01:45:25] *** Joins: aura[m] (~aurabindo@2001:470:69fc:105::4204)
[01:45:25] *** Joins: enick_397 (~mercvrivs@2001:470:69fc:105::2ee6)
[01:45:25] *** Joins: dalz (~dalz@2001:470:69fc:105::2ea)
[01:45:25] *** Joins: hussam (~hussam@user/hussam)
[01:45:25] *** Joins: NRK[m] (~nrkmatrix@2001:470:69fc:105::4e30)
[01:45:25] *** Joins: psydroid (~psydroid@user/psydroid)
[01:45:25] *** Joins: Neui[m] (~neuimatri@2001:470:69fc:105::745)
[01:45:26] *** Joins: atulu (~atulum]@2001:470:69fc:105::d50c)
[01:45:26] *** Joins: ormaaj2 (~ormaaj@user/ormaaj)
[01:45:26] *** Joins: randy408[m] (~randy408m@2001:470:69fc:105::2f5e)
[01:45:26] *** Joins: mattmurr[m] (~mattmurrm@2001:470:69fc:105::1:5ea0)
[01:45:26] *** Joins: dlozeve[m] (~dlozevema@2001:470:69fc:105::1:1c58)
[01:45:26] *** Joins: TheDcoder[m] (~thedcoder@user/thedcoder)
[01:45:26] *** Joins: surgeon[m] (~surge9nma@2001:470:69fc:105::f585)
[01:45:26] *** Joins: jkssodhxu[m] (~barzarian@2001:470:69fc:105::1:3a12)
[01:45:26] *** Joins: jinsun_ (~jinsun@user/jinsun)
[01:45:26] *** Joins: Daniel[m] (~danielbau@2001:470:69fc:105::1:1a5d)
[01:45:26] *** Joins: magicalegg[m] (~magicaleg@2001:470:69fc:105::1:52e9)
[01:45:26] *** Joins: nomagno (~nomagno@2001:470:69fc:105::c1f0)
[01:45:26] *** Joins: blakesmith[m] (~blakesmit@2001:470:69fc:105::1:4093)
[01:45:26] *** Joins: asmwfi[m] (~repmovsb@2001:470:69fc:105::1:274e)
[01:45:26] *** Joins: not_a_robot[m] (~notarobot@2001:470:69fc:105::dd37)
[01:45:26] *** Joins: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631)
[01:45:26] *** Joins: M101donutman[m] (~M101donut@2001:470:69fc:105::d51)
[01:45:27] *** Joins: nmat[m] (~nmatm]@2001:470:69fc:105::1:5553)
[01:45:27] *** Joins: flashd[m] (~flashdmat@2001:470:69fc:105::1:3d0b)
[01:45:27] *** Joins: Akawama[m] (~akawama@user/akawama)
[01:45:27] *** Joins: mphojele (~mphojelem@2001:470:69fc:105::35ab)
[01:45:27] *** Joins: go4godvin (~go4godvin@user/go4godvin)
[01:45:38] *** Joins: explosion-mental (~explosion@2001:470:69fc:105::dac2)
[01:45:38] *** Joins: Bazsalanszky[m] (~bazsalans@2001:470:69fc:105::6fe)
[01:45:38] *** Joins: alessandro_megli (~alessandr@2001:470:69fc:105::6d3f)
[01:45:38] *** Joins: jaavv[m] (~jaavvmatr@2001:470:69fc:105::1:37b1)
[01:45:38] *** Joins: Sohaib[m] (~smalinux@2001:470:69fc:105::31b5)
[01:45:38] *** Joins: malkrister[m] (~malkriste@2001:470:69fc:105::1:44f3)
[01:45:39] *** Joins: simplyjimin[m] (~simplyjim@2001:470:69fc:105::1:4793)
[01:45:39] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[01:45:52] *** Quits: Daniel[m] (~danielbau@2001:470:69fc:105::1:1a5d) (Quit: Client limit exceeded: 20000)
[01:46:29] *** Quits: aura[m] (~aurabindo@2001:470:69fc:105::4204) (Quit: Client limit exceeded: 20000)
[01:46:43] *** Quits: jinsun_ (~jinsun@user/jinsun) (Quit: Client limit exceeded: 20000)
[01:46:46] *** Quits: TheDcoder[m] (~thedcoder@user/thedcoder) (Quit: Client limit exceeded: 20000)
[01:46:46] *** Quits: skyeto[m] (~skyetosky@2001:470:69fc:105::c2fe) (Quit: Client limit exceeded: 20000)
[01:46:54] *** Quits: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631) (Quit: Client limit exceeded: 20000)
[01:46:54] *** Quits: jkssodhxu[m] (~barzarian@2001:470:69fc:105::1:3a12) (Quit: Client limit exceeded: 20000)
[01:46:58] *** Quits: Neui[m] (~neuimatri@2001:470:69fc:105::745) (Quit: Client limit exceeded: 20000)
[01:47:13] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:b9ca:7580:971f:87f4) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[01:48:04] *** Quits: go4godvin (~go4godvin@user/go4godvin) (Quit: Client limit exceeded: 20000)
[01:48:23] *** Quits: dlozeve[m] (~dlozevema@2001:470:69fc:105::1:1c58) (Quit: Client limit exceeded: 20000)
[01:48:24] *** Quits: asmwfi[m] (~repmovsb@2001:470:69fc:105::1:274e) (Quit: Client limit exceeded: 20000)
[01:48:39] *** Quits: blakesmith[m] (~blakesmit@2001:470:69fc:105::1:4093) (Quit: Client limit exceeded: 20000)
[01:48:41] *** Quits: mattmurr[m] (~mattmurrm@2001:470:69fc:105::1:5ea0) (Quit: Client limit exceeded: 20000)
[01:49:10] *** Quits: NRK[m] (~nrkmatrix@2001:470:69fc:105::4e30) (Quit: Client limit exceeded: 20000)
[01:49:34] *** Quits: magicalegg[m] (~magicaleg@2001:470:69fc:105::1:52e9) (Quit: Client limit exceeded: 20000)
[01:49:39] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cd30:5759:3f90:149b)
[01:50:29] *** Joins: hanzo_ (uid532183@id-532183.hampstead.irccloud.com)
[01:50:52] *** hanzo_ is now known as hanzo
[01:51:03] *** Quits: hanzo (uid532183@id-532183.hampstead.irccloud.com) (Changing host)
[01:51:03] *** Joins: hanzo (uid532183@user/hanzo)
[01:58:39] *** Quits: duuude (~user@user/duuude) (Ping timeout: 256 seconds)
[02:00:00] *** Joins: charadon_ (~Charadon@155.138.164.183)
[02:02:43] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[02:03:42] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[02:07:08] *** Joins: duuude (~user@user/duuude)
[02:14:19] *** Quits: ndorf_ (~nd@ob.noxio.us) (Quit: leaving)
[02:14:27] *** Joins: ndorf (~nd@ob.noxio.us)
[02:16:43] *** Quits: synbiose (~synbiose@coxa.pt) (Changing host)
[02:16:43] *** Joins: synbiose (~synbiose@user/synbiose)
[02:18:03] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[02:18:50] *** Joins: rapier (~rapier@user/rapier)
[02:19:23] <rapier> guys, has anyone a tip for how to copy files in C without APIs?
[02:19:24] *** Joins: Irvise (~irvise@2001:470:69fc:105::84c)
[02:19:37] *** Joins: skyeto[m] (~skyetosky@2001:470:69fc:105::c2fe)
[02:19:37] *** Joins: aura[m] (~aurabindo@2001:470:69fc:105::4204)
[02:19:46] <Everything> rapier: you should use some OS API anyway
[02:19:56] <Everything> But the standard C functions are fopen/open
[02:19:57] *** Joins: NRK[m] (~nrkmatrix@2001:470:69fc:105::4e30)
[02:20:09] *** Joins: Neui[m] (~neuimatri@2001:470:69fc:105::745)
[02:20:09] *** Joins: dlozeve[m] (~dlozevema@2001:470:69fc:105::1:1c58)
[02:20:10] *** Joins: mattmurr[m] (~mattmurrm@2001:470:69fc:105::1:5ea0)
[02:20:10] *** Joins: TheDcoder[m] (~thedcoder@user/thedcoder)
[02:20:10] *** Joins: jinsun_ (~jinsun@user/jinsun)
[02:20:38] *** Joins: Daniel[m]1234522 (~danielbau@2001:470:69fc:105::1:1a5d)
[02:20:38] *** Joins: magicalegg[m] (~magicaleg@2001:470:69fc:105::1:52e9)
[02:20:39] *** Joins: jkssodhxu[m] (~barzarian@2001:470:69fc:105::1:3a12)
[02:20:39] *** Joins: asmwfi[m] (~repmovsb@2001:470:69fc:105::1:274e)
[02:20:39] *** Joins: blakesmith[m] (~blakesmit@2001:470:69fc:105::1:4093)
[02:20:39] *** Joins: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631)
[02:20:39] *** Joins: go4godvin (~go4godvin@user/go4godvin)
[02:20:48] <rapier> i'd like to learn the basics concepts to copy files... like headers, position in hard drive, the all good stuff from 70's and 80's
[02:20:57] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[02:21:27] *** ormaaj2 is now known as oormaaj
[02:21:46] <Everything> rapier: You wouldn't need this today. Otherwise, learn MS-DOS or read this: https://wiki.osdev.org/Expanded_Main_Page
[02:21:49] *** oormaaj is now known as ormaaj
[02:22:19] <rapier> the world is getting boring...
[02:22:22] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[02:22:32] <Everything> It's not. Take Arduino...
[02:22:42] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[02:22:53] <Everything> Go for retrocomputing
[02:22:55] <rapier> arduino? why did you say that?
[02:23:02] <rapier> ah ok
[02:23:11] *** Quits: Deepspeed (~yep@164.sub-174-215-134.myvzw.com) (Read error: Connection reset by peer)
[02:23:14] <Everything> rapier: Because it's low-level enough to learn all the basics from ground up
[02:23:33] <rapier> oh... Everything, now you're talking
[02:25:16] <rapier> thank you for the wikipedia page
[02:26:28] *** Joins: constxd (~brad@142.134.38.68)
[02:27:59] <twkm> Everything: fyi, open isn't standard c.
[02:28:08] <Everything> twkm: OK, fopen
[02:28:40] <twkm> yes, that's standard.
[02:29:37] *** Quits: thickrocks (e46ff6ac16@2604:bf00:561:2000::13d) (Remote host closed the connection)
[02:30:14] *** Joins: Macuser (~Macuser@2600:1003:b46e:747e:c053:f977:a2d4:e642)
[02:30:57] *** Quits: Jeaton (~hybrid@user/Jeaton) (Ping timeout: 256 seconds)
[02:32:37] *** Quits: pizdets (~pizdets@183.182.110.125) (Ping timeout: 240 seconds)
[02:32:54] *** Joins: Moonspell_ (~moon@140.238.223.164)
[02:33:26] *** Quits: Moonspell_ (~moon@140.238.223.164) (Client Quit)
[02:34:06] *** Joins: pizdets (~pizdets@183.182.110.139)
[02:37:58] *** Joins: bolovanos__ (~bolovanos@user/bolovanos)
[02:38:08] *** Joins: EdFletcher (~PKD@user/edfletcher)
[02:39:20] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Quit: btc donations: bc1qt3chy4rqtzjny2h7qt47cy7nmu6th9sr66wa02)
[02:40:21] *** tm512`` is now known as tm512
[02:40:47] <rapier> one question: even in these days, key stroke is converted in the corresponding ascii code, why is it converted in unicode?
[02:40:55] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cd30:5759:3f90:149b) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[02:40:55] <rapier> why isn't*
[02:42:09] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 256 seconds)
[02:42:27] <shiroyasha> rapier: Which Unicode version? :^)
[02:42:50] *** Quits: alch_ (~alch@151.34.178.233) (Ping timeout: 260 seconds)
[02:43:13] <rapier> the last one, 13 ie
[02:43:41] *** Quits: pi3 (~pi@154.6.152.74) (Ping timeout: 245 seconds)
[02:44:03] *** Joins: pi3 (~pi@154.6.152.74)
[02:44:22] *** Joins: alch (~alch@151.68.210.233)
[02:45:27] <constxd> rapier: what do you mean
[02:45:45] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[02:46:17] <constxd> every ASCII character has the same value in ASCII as it does in Unicode
[02:46:31] <constxd> a is 97 in ASCII and in Unicode
[02:46:36] <rapier> unicode and ascii is way to map keys by codes, right?
[02:46:46] <constxd> no
[02:46:51] *** Joins: scoobydoo_ (~scooby@user/scoobydoo)
[02:46:54] <constxd> they have nothing to do with keys
[02:47:23] <rapier> i mean the letter on the key
[02:47:31] <constxd> ok
[02:47:38] <constxd> characters <=> numbers
[02:47:38] <rapier> each letter has its own code, right?
[02:47:41] <constxd> yes
[02:47:50] <constxd> the number is the same in unicode and ascii
[02:48:00] <constxd> so i don't understand your question
[02:48:33] <rapier> why do we use unicode only?
[02:49:11] <rapier> why is still ascii used in these days?
[02:49:20] <constxd> what does it mean to use ascii?
[02:49:57] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 240 seconds)
[02:50:02] *** scoobydoo_ is now known as scoobydoo
[02:50:25] <constxd> unicode is a superset of ascii. lots of strings happen to consist only of ASCII characters, but that's just a coincidence
[02:50:33] <rapier> ascii: american standard code for information interchange, is a character encoding standard for electronic communication
[02:51:55] <rapier> ascii table is so small when you compare to unicode table
[02:52:00] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[02:52:27] <constxd> idk what your question is
[02:52:40] *** Joins: paulo (paulo@user/paulo/x-9032687)
[02:53:04] <rapier> an example, why does BIOS use ascii instead of unicode?
[02:53:45] <constxd> not sure about BIOS specifically but Unicode is bloated
[02:54:23] <constxd> comparing strings, converting from uppercase to lowercase, determining how to render text, etc. are all very involved
[02:55:05] <rapier>  i see
[02:55:09] <constxd> there are lots of special rules you have to account for
[02:55:19] <constxd> ascii text is trivial to work with
[02:55:57] <rapier> thank you
[02:56:12] <constxd> np
[02:56:13] *** Quits: mahmutov (~mahmutov@5.176.45.237) (Ping timeout: 240 seconds)
[02:58:04] *** Joins: pflanze (~pflanze@5-168-208-80.dyn.fiber.qlnet.ch)
[02:59:26] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:02:02] *** Joins: slidercrank (~slidercra@user/slidercrank)
[03:03:02] <pflanze> Is there some trick (using GCC/Clang extensions or so) to implement subtyping relationships and verify them statically?
[03:03:17] <pflanze> (i.e. verify upcasting statically.)
[03:03:30] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:03:54] <nitrix> A keyboard key press event normally tells you the scancode (the physical uniquely identifying key location on the device relative to a standard QWERTY keyboard) and a keycode which is mapped to a language by your operating system based on your configured locale.
[03:04:25] <nitrix> pflanze, Yes, a union.
[03:04:27] <pflanze> Hmm, it should even be possible via the preprocessor if I can map types to integers.
[03:04:49] <pflanze> nitrix, hmm, good point.
[03:06:00] *** Quits: bebyx (~Thunderbi@user/bebyx) (Remote host closed the connection)
[03:06:37] *** Quits: duuude (~user@user/duuude) (Ping timeout: 240 seconds)
[03:07:36] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[03:08:00] <rapier> i see
[03:09:32] <nitrix> pflanze, It'll guarantee the field is one of the supported subtypes, but you're still left with the responsibility of knowing at runtime what instance you've got. A tag becomes necessary and that cannot be verified statically.
[03:09:50] <pflanze> Sure
[03:10:28] <nitrix> pflanze, (What in other languages would be pattern matching). Maybe if you're creative enough you can get something to work for you with just _Generic but I doubt it.
[03:10:34] <pflanze> I mean I'll always have to do downcasting at runtime; as long as upcasting is checked statically I'm happy.
[03:10:47] *** Joins: JanC (~janc@user/janc)
[03:11:33] <pflanze> I'll have to study _Generic
[03:12:56] <nitrix> I propose you do non of that and trust the user to get the API right.
[03:13:27] <nitrix> The more abstraction shenanigans you create, the easier it'll be to use it wrong.
[03:14:20] <nitrix> A void * or a union, with an enum tag to tell you what you're looking at is pretty hard to mess up.
[03:15:23] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[03:19:05] *** Quits: inlight (~inlight@user/inlight) (Remote host closed the connection)
[03:22:11] *** Joins: vysn (~vysn@user/vysn)
[03:23:37] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 268 seconds)
[03:24:13] *** Joins: Enitin (~Enitin@37.80.148.79)
[03:24:30] *** Quits: Enitin (~Enitin@37.80.148.79) (Remote host closed the connection)
[03:24:47] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[03:25:41] *** Quits: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[03:26:16] *** Joins: loganlee (~Thunderbi@user/loganlee)
[03:30:13] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[03:30:37] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[03:31:27] *** Quits: orthoplex64 (~crm@70.120.0.94) (Ping timeout: 256 seconds)
[03:31:44] *** Joins: orthoplex64 (~crm@70.120.0.94)
[03:34:37] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[03:36:13] *** Joins: crm (~crm@70.120.0.94)
[03:36:45] *** Quits: pucara (~i@181.91.29.65) (Quit: Lost terminal)
[03:38:02] *** Quits: Soni (~quassel@autistic.space) (Ping timeout: 240 seconds)
[03:38:15] *** Quits: orthoplex64 (~crm@70.120.0.94) (Ping timeout: 256 seconds)
[03:38:46] *** Joins: Whatshisface (~jon@catv-178-48-246-132.catv.broadband.hu)
[03:39:14] *** Joins: Viewday11 (~Viewday@user/viewday)
[03:40:05] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[03:40:31] *** Quits: pi3 (~pi@154.6.152.74) (Ping timeout: 256 seconds)
[03:40:34] *** Joins: rgrinberg (~textual@2806:265:5401:8cd:b45e:99aa:a7d7:ba92)
[03:41:35] *** Joins: pi3 (~pi@154.6.152.74)
[03:42:21] *** Joins: gco (~gco@2601:647:4c80:2424:adcf:788d:2425:1357)
[03:44:53] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[03:46:53] *** Quits: random-nick (~random-ni@87.116.180.98) (Ping timeout: 256 seconds)
[03:47:34] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[03:47:50] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[03:47:50] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[03:47:50] *** Joins: wroathe (~wroathe@user/wroathe)
[03:48:06] *** Joins: Soni (~quassel@autistic.space)
[03:49:16] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[03:52:33] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[03:53:43] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[03:54:11] *** Joins: Deepspeed (~yep@164.sub-174-215-134.myvzw.com)
[03:55:17] *** Quits: foul_owl (~kerry@97-126-11-68.tukw.qwest.net) (Ping timeout: 240 seconds)
[03:58:18] *** Quits: rgrinberg (~textual@2806:265:5401:8cd:b45e:99aa:a7d7:ba92) (Read error: Connection reset by peer)
[03:58:26] *** Joins: oxfuxxx (~oxfuxxx@89.40.183.139)
[03:58:37] *** ouestbillie is now known as desproges
[03:59:02] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[03:59:11] *** Joins: mateus (~mateus@2804:7efc:320:e900:4219:3cd3:1bd3:1ffc)
[03:59:32] *** Quits: mateus (~mateus@2804:7efc:320:e900:4219:3cd3:1bd3:1ffc) (Client Quit)
[03:59:38] *** Joins: rgrinberg (~textual@2806:265:5401:8cd:b45e:99aa:a7d7:ba92)
[04:01:54] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[04:02:16] *** Quits: desproges (~gallup@192-222-138-215.qc.cable.ebox.net) (Quit: leaving)
[04:02:36] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[04:05:37] *** Quits: bolovanos__ (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[04:07:43] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 256 seconds)
[04:08:34] *** Joins: shivesh (~shivesh@user/shivesh)
[04:08:35] *** Joins: pnbeast (~pnbeast@2601:140:4280:6ce0::1)
[04:09:14] *** Joins: Wulf (~Wulf@user/wulf)
[04:09:43] *** Joins: foul_owl (~kerry@94.140.8.107)
[04:12:16] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[04:13:20] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[04:13:57] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[04:14:08] <nomagno> I have been following a coding style that seeks to eliminate memory allocations completely, basically just provide all necessary memory to functions as pointer arguments. However, I've ran into a bit of an issue. How can I architecture an interface with the following characteristics to require no allocation? https://termbin.com/u5et
[04:14:41] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 250 seconds)
[04:15:27] <nomagno> Basically, I guess I can split this into two parts? One function to get the required width and height, and another to get the pixbuf copied once the required memory has been supplied
[04:16:49] <nomagno> I know my proposition is slightly questionable in the first placed, but eh
[04:17:50] *** Joins: Viewday110 (~Viewday@user/viewday)
[04:18:48] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[04:18:48] *** Viewday110 is now known as Viewday11
[04:20:03] <nitrix> It's reasonable for user code to ask a library to calculate the size of a buffer, you create the buffer, then hand it back to the library.
[04:21:06] <nitrix> Another approach is for the library to let you register allocation/deallocation callbacks, and what you connect to it is whatever fancy arena/pool allocator of your choice.
[04:21:43] <nomagno> The first sounds more in line with my code, so I'll go for it
[04:22:40] *** Joins: treble (~treble@user/treble)
[04:23:25] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 240 seconds)
[04:23:34] <nitrix> It's usually more common for drivers. OpenGL for example will tell you there's an error, you then ask for the length of the error, allocate a suitable buffer, then ask again to write the error your buffer.
[04:23:44] *** Joins: Moonspell_ (~moon@140.238.223.164)
[04:23:45] *** Quits: Moonspell_ (~moon@140.238.223.164) (Remote host closed the connection)
[04:25:02] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[04:25:17] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 240 seconds)
[04:25:22] <tk> with opengl you just call glGetError() in a loop until it returns GL_NO_ERROR at the end of your program and then enjoy your time spent debugging
[04:25:41] *** Joins: Viewday113 (~Viewday@user/viewday)
[04:27:10] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[04:27:10] *** Viewday113 is now known as Viewday11
[04:28:37] *** Quits: constxd (~brad@142.134.38.68) (Ping timeout: 240 seconds)
[04:29:10] <nomagno> nitrix: I'm essentially writing one big driver that abstracts over other drivers in a dead simple manner, so I definitely picked a sensible approach
[04:30:19] <nomagno> Essentially it allows you to play sounds by name, get input, initialize the display, set the display through blitting, and get sprites by name
[04:32:13] <nomagno> A perfect(ly plain and tedious) abstraction
[04:34:20] <nitrix> In the context of gamedev, I learned over time that those are impractical. You end up duplicating all the concepts that the thing you're abstracting provides, like the enums for formats, RGBA8888, the keycodes, GLFW_A, etc.
[04:35:17] *** Joins: Viewday115 (~Viewday@user/viewday)
[04:35:22] <nitrix> To the point where if you were to change technology/library, the entire abstraction would have to be rewritten. Yes you protected the codebase, but the codebase is usually tied locally only once to the abstraction (a window module, or some renderer module).
[04:36:10] <nomagno> Well, it seems to me like the abstraction at least allows software rendering itself to go undisturbed
[04:36:21] *** Quits: freepp (~freepppp@62.1.245.43.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[04:36:26] <nomagno> Which might make for less code duplication, or might not
[04:36:29] <nomagno> Shrug
[04:36:45] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[04:36:45] *** Viewday115 is now known as Viewday11
[04:37:57] *** Quits: Macuser (~Macuser@2600:1003:b46e:747e:c053:f977:a2d4:e642) (Ping timeout: 240 seconds)
[04:38:37] *** Quits: oxfuxxx (~oxfuxxx@89.40.183.139) (Ping timeout: 240 seconds)
[04:41:17] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[04:41:55] *** Joins: kish` (~aqua@user/aqua)
[04:43:20] *** stonkey2 is now known as stonkey
[04:43:22] *** Quits: stonkey (~stonkey@user/stonkey) (Quit: Leaving)
[04:43:37] *** Joins: stonkey (~stonkey@user/stonkey)
[04:44:38] *** Joins: Macuser (~Macuser@2600:1003:b451:8e4a:98b8:e5ae:6160:1cad)
[04:47:18] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[04:48:54] *** Joins: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[04:48:55] *** Quits: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Remote host closed the connection)
[04:51:55] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[04:54:45] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[04:54:55] *** Joins: smoke (~smoke@user/smoke)
[04:55:10] *** Quits: smoke (~smoke@user/smoke) (Max SendQ exceeded)
[04:55:13] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:55:13] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:55:13] *** Joins: wroathe (~wroathe@user/wroathe)
[04:55:28] *** Joins: smoke (~smoke@user/smoke)
[04:56:13] *** Quits: treble (~treble@user/treble) (Ping timeout: 240 seconds)
[04:58:16] <pony> duplication duplication
[04:58:33] *** Joins: Viewday117 (~Viewday@user/viewday)
[04:59:01] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Remote host closed the connection)
[04:59:32] *** Joins: treble (~treble@user/treble)
[05:00:02] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[05:00:02] *** Viewday117 is now known as Viewday11
[05:03:25] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a gamedev community @ https://indiedevs.net/)
[05:07:56] *** Quits: smoke (~smoke@user/smoke) (Quit: Leaving)
[05:09:06] *** Joins: Valeria (~Valeria@user/valeria)
[05:13:27] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[05:13:52] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[05:14:15] *** Joins: tejr (~tejr@user/tejr)
[05:19:37] *** Quits: rgrinberg (~textual@2806:265:5401:8cd:b45e:99aa:a7d7:ba92) (Read error: Connection reset by peer)
[05:20:01] *** Quits: treble (~treble@user/treble) (Quit: WeeChat 3.4)
[05:21:00] *** Joins: rgrinberg (~textual@177.246.216.2)
[05:27:04] *** Joins: pulse (~pulse@user/pulse)
[05:27:49] *** Joins: Xardas (~Xardas@149.233.48.28)
[05:27:59] <Xardas> while (begin != end)
[05:27:59] <Xardas> Â *out++ = *begin++;
[05:28:12] <Xardas> Do we dereference first and the increment the out ?
[05:28:40] <Xardas> I'd like to know the order of operators in this bit of code
[05:30:09] <pony> ,paren *p++
[05:30:09] <candide> pony: *(p++)
[05:30:15] <pony> Xardas: ^
[05:30:25] <pony> Xardas: https://man.openbsd.org/operator too
[05:30:27] <candide> Title of pony's link: operator(7) - OpenBSD manual pages
[05:30:49] *** Joins: travankor (travankor@user/travankor)
[05:32:35] <Xardas> From what I see in the link, we increament the out first then we dereference it .
[05:32:44] <Xardas> I hope i'm not wrong
[05:32:47] <Xardas> Thanks guys
[05:32:48] <pony> right to left
[05:33:01] <pony> but yes
[05:34:12] <pony> but remember p++ evaluates to the "old" value of p
[05:35:06] <Xardas> Yup
[05:35:20] <Xardas> We evaluate it then we increment
[05:35:21] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[05:35:27] <Xardas> ?
[05:35:40] <Xardas> Haha, that sounds like an exception
[05:35:51] <Xardas> didn't you say from right to left ?
[05:35:55] <pony> you're dereferencing the value of p before the incrementation
[05:36:34] <pony> right to left means *p++ is *(p++)
[05:36:35] <Xardas> Are you talking about p++ ?
[05:40:56] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:b58d:d8c9:2199:bc86)
[05:43:57] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[05:45:28] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[05:49:51] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 256 seconds)
[05:51:24] *** Quits: Teckla (~Teckla@user/teckla) (Quit: leaving)
[05:55:27] *** Joins: Teckla (~Teckla@user/teckla)
[05:58:17] *** Quits: Macuser (~Macuser@2600:1003:b451:8e4a:98b8:e5ae:6160:1cad) (Quit: Textual IRC Client: www.textualapp.com)
[05:58:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[06:01:20] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[06:05:25] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Ping timeout: 240 seconds)
[06:06:19] *** Quits: Brainium (~brainium@user/brainium) (Quit: -a- IRC for Android 2.1.59)
[06:07:48] *** Joins: mugen (~mugen@gateway/tor-sasl/mugen)
[06:10:42] *** Quits: mug3n_ (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 276 seconds)
[06:11:53] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[06:13:26] *** Quits: acerbic (~acerbic@cs-xdata-50-86-52-59.cspire.com) (Read error: Connection reset by peer)
[06:15:04] <pony> Xardas: what I mean is you're just dereferencing the value of p++, which is the value of p prior to the incrementation
[06:17:42] <rsjw> pre-increment ++p increments p before the value to be used is taken from p. post-increment p++ increments p after the value to be used is taken from p.
[06:21:50] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[06:23:06] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[06:25:48] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[06:30:06] *** Joins: Lazenca (Lazenca@user/lazenca)
[06:31:19] *** Joins: acerbic (~acerbic@cs-xdata-50-86-52-59.cspire.com)
[06:33:21] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 256 seconds)
[06:33:50] *** Quits: banc- (banc@gateway/vpn/airvpn/banc) (Ping timeout: 260 seconds)
[06:36:28] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[06:38:54] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[06:40:14] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Quit: leaving)
[06:41:40] *** Quits: alch (~alch@151.68.210.233) (Read error: Connection reset by peer)
[06:44:46] *** Joins: alch (~alch@151.68.180.212)
[06:46:11] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[06:46:32] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[06:46:59] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:d903:d876:1354:7b4c) (Ping timeout: 250 seconds)
[06:48:04] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:df45:34e6:a5aa:758)
[06:52:19] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:53:56] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[06:56:15] *** Joins: Jong (~Jong@2620:10d:c090:400::5:f0a6)
[06:57:32] *** Joins: oxfuxxx (~oxfuxxx@89.40.183.139)
[07:00:19] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[07:00:23] *** Joins: orthoplex64 (~crm@70.120.0.94)
[07:01:03] *** Quits: oxfuxxx (~oxfuxxx@89.40.183.139) (Client Quit)
[07:01:41] *** Quits: crm (~crm@70.120.0.94) (Ping timeout: 256 seconds)
[07:03:20] *** Quits: rgrinberg (~textual@177.246.216.2) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[07:06:33] *** Joins: crm (~crm@70.120.0.94)
[07:07:55] *** Quits: orthoplex64 (~crm@70.120.0.94) (Ping timeout: 256 seconds)
[07:10:29] *** Joins: fe23 (~fe23@2409:8a34:464:4990:6569:123c:45b7:c36f)
[07:13:10] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[07:13:57] *** Joins: rgrinberg (~textual@2806:265:5401:8cd:b45e:99aa:a7d7:ba92)
[07:16:37] *** Joins: mov_eax (~mov_eax@user/mov-eax/x-5035058)
[07:20:54] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:b58d:d8c9:2199:bc86) (Quit: Quit)
[07:21:26] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Remote host closed the connection)
[07:21:39] *** Quits: charadon_ (~Charadon@155.138.164.183) (Ping timeout: 256 seconds)
[07:22:33] *** Joins: perrierjouet (~perrier-j@185.128.26.174)
[07:22:39] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 256 seconds)
[07:25:07] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:bad0:8910:44c9:da61)
[07:26:42] *** Joins: pucara (~i@181.91.29.65)
[07:27:22] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[07:27:39] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[07:28:35] *** Joins: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net)
[07:30:09] *** Quits: perrierjouet (~perrier-j@185.128.26.174) (Ping timeout: 256 seconds)
[07:32:17] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:07] *** Joins: aac (~AAC@2001:8a0:6cc5:7e01:d02f:f137:e0df:8b42)
[07:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:37:30] <aac> hey. Is it possible to have a buffer that is equal to a string? im creating a custojm string, within a cycle , like "ab" , "ab" ,"ab", each turn and get back "ababab". Im using strcat. The problem is , how can i get the buffer size correctly?? or there is only one possibility, to create a buffer bigger than the string
[07:37:44] <aac> do i need malloc ?
[07:41:56] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[07:42:34] *** Quits: surgeon[m] (~surge9nma@2001:470:69fc:105::f585) (Quit: Client limit exceeded: 20000)
[07:45:19] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[07:49:59] *** Norkle_ is now known as Norkle
[07:53:39] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:53:39] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:53:40] *** Joins: wroathe (~wroathe@user/wroathe)
[07:53:50] *** Quits: Xardas (~Xardas@149.233.48.28) (Quit: Client closed)
[07:56:26] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:b58d:d8c9:2199:bc86)
[07:56:39] *** Quits: ns12 (~ns12@user/ns12) (Ping timeout: 256 seconds)
[07:58:29] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[07:59:17] *** Quits: pucara (~i@181.91.29.65) (Ping timeout: 240 seconds)
[08:00:24] *** Joins: hinata (~hinata@2409:4042:2188:4e77:a846:b45d:ca68:e9ff)
[08:03:04] <rcf> aac: malloc is probably the best approach, yes.
[08:03:04] *** Joins: surgeon[m] (~surge9nma@2001:470:69fc:105::f585)
[08:04:55] <aac> what is there is a random number of chars?
[08:05:01] <aac> how can the buffer do?
[08:05:08] <rcf> You will need to know how many there are.
[08:05:24] <aac> k
[08:05:32] <aac> thks
[08:06:28] <oldlaptop> Depending on what, exactly, you're doing, you may need to make a guess first, and then realloc() (or similar) if it turns out your guess was too low.
[08:07:41] <rcf> If you keep track of the allocated size of the buffer and the end of the actual string, this is probably the more efficient approach anyway, especially for large strings or many operations.
[08:08:41] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:bad0:8910:44c9:da61)
[08:08:50] <oldlaptop> A good strategy can be to start with a size that "should" fit "most" inputs, and reallocate with double the space whenever it fills up.
[08:10:03] *** Quits: Deepspeed (~yep@164.sub-174-215-134.myvzw.com) (Remote host closed the connection)
[08:10:27] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:b58d:d8c9:2199:bc86) (Quit: Quit)
[08:10:46] *** Joins: Deepspeed (~yep@164.sub-174-215-134.myvzw.com)
[08:11:07] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[08:15:43] <aac> double ?? ok thks
[08:16:06] <aac> i guess that's why are buffer overflows :))
[08:17:55] <oldlaptop> No, "buffer overflows" happen when you try to access memory that's outside your buffer.
[08:18:38] <aac> yeah, because the buffer is small
[08:18:40] <aac> :)
[08:18:42] <aac> heehehhe
[08:19:24] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[08:19:39] <oldlaptop> No, because you didn't correctly keep track of it. (I would guess one of the most common kinds is accidentally reading or writing to the location one past the end of a buffer.
[08:20:16] *** Parts: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) (Closing Window)
[08:20:38] <aac> ok...hmm anyway another doubt.. im creating a custom string, inside a loop, like "abc" , "abcabc" , "abcabcÃ£bc", and im trying to use __asm__(string); but it says that it needs to be a string literal...how can i change normal string to string literal?
[08:21:07] <oldlaptop> The only reason to double the size of the allocation when you want to grow it to match your input size, instead of doing something else, is to keep the number of reallocations (which are usually costly) down.
[08:21:31] <aac> yeah, but i guess that values are tested right?
[08:22:43] *** Quits: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu) (Ping timeout: 256 seconds)
[08:23:01] <oldlaptop> "String literal" means a string that's directly in your source code, "like this". I would assume your compiler's inline-assembly extension does *not* support building assembly at runtime and dynamically assembling and executing it.
[08:23:28] <oldlaptop> I don't know what you mean by "values are tested".
[08:23:49] <aac> the double, how did you get this value?
[08:23:57] <aac> like its a known value or... ?=
[08:24:19] <aac> perhaps many benchmarking :)
[08:24:38] <aac> ok..so ill just print the string on console, and thne copy paste to the source code :)
[08:24:42] <oldlaptop> Doubling allocation sizes when you want to grow them is a common strategy, yes. (I believe offhand that the implementations of things like Python's lists generally use such a strategy.)
[08:25:22] <oldlaptop> Exactly what will work best may depend on the kinds of inputs your program will deal with, and whether you care more about wasting memory, or wasting time.
[08:26:14] <aac> but like doubling space seems a bit excessive, to small aditions
[08:26:26] <oldlaptop> At one extreme, growing a buffer by one position at a time won't (necessarily!) waste any memory, but it could waste a horrific amount of time performing reallocations.
[08:26:45] <aac> btw, how does the compile knows its a string literal?
[08:26:56] <oldlaptop> Doubling it whenever you want to grow it will cause some memory to be "wasted" at any given time, but it will also make reallocations very infrequent.
[08:27:02] <aac> ah its the preprocessor
[08:27:03] <aac> i guess
[08:27:30] <oldlaptop> The compiler knows string literals because they follow "the syntax for string literals, like this".
[08:27:35] <aac> k
[08:28:04] <aac> is there a way to convert dynamic char to string literal?
[08:28:39] <aac> like if i add some "" ?
[08:28:40] <aac> :)
[08:28:54] <aac> to the dynamic char
[08:28:54] <oldlaptop> No. A string literal is, by definition, present in the source code, at compile time.
[08:28:55] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[08:28:59] <aac> ok
[08:29:15] <aac> ah ok the cycle occurs at runtime...i see...thks
[08:29:19] <aac> :)
[08:29:42] <oldlaptop> The preprocessor can do stuff with string literals, but that still turns into normal string literals that are present at compile time.
[08:31:32] *** Joins: frost (~frost@user/frost)
[08:34:33] *** Quits: Deepspeed (~yep@164.sub-174-215-134.myvzw.com) (Read error: Connection reset by peer)
[08:35:50] *** Joins: Deepspeed (~yep@164.sub-174-215-134.myvzw.com)
[08:35:55] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[08:36:08] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[08:36:09] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[08:36:09] *** Joins: wroathe (~wroathe@user/wroathe)
[08:38:18] *** Quits: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net) (Quit: b1101)
[08:39:41] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:bad0:8910:44c9:da61)
[08:40:08] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[08:40:59] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[08:44:30] *** Quits: earnest (~earnest@user/earnestly) (Ping timeout: 260 seconds)
[08:46:57] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[08:50:16] <aac> later dudes...thks for the help! :)
[08:50:17] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[08:50:20] *** Quits: aac (~AAC@2001:8a0:6cc5:7e01:d02f:f137:e0df:8b42) (Quit: aac)
[08:56:37] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 240 seconds)
[08:56:42] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[08:57:35] *** Quits: rsjw (~quassel@user/rsjw) (Quit: rsjw)
[08:58:39] *** Quits: Pentode (~Pentode@mobile-166-171-57-43.mycingular.net) (Ping timeout: 265 seconds)
[09:01:39] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 276 seconds)
[09:02:50] *** Joins: constxd (~brad@142.134.38.68)
[09:03:00] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[09:03:41] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[09:04:01] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[09:15:38] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[09:17:15] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 276 seconds)
[09:18:24] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[09:19:02] *** Joins: karakedi (~eAC53C340@user/karakedi)
[09:19:25] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000C96363670EDAE354.catv.pool.telekom.hu) (Ping timeout: 240 seconds)
[09:19:54] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[09:21:56] *** Joins: oxfuxxx (~oxfuxxx@89.40.183.139)
[09:22:12] *** Quits: reset (~reset@user/reset) (Quit: reset)
[09:27:36] *** Joins: CoderCharmander (~CoderChar@254C16C5.nat.pool.telekom.hu)
[09:27:39] *** Quits: CoderCharmander (~CoderChar@254C16C5.nat.pool.telekom.hu) (Remote host closed the connection)
[09:27:45] *** Quits: davros (~davros@host86-185-99-134.range86-185.btcentralplus.com) (Ping timeout: 250 seconds)
[09:29:40] *** Joins: davros (~davros@host86-185-99-134.range86-185.btcentralplus.com)
[09:32:44] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[09:34:26] *** Joins: CoderCharmander (~CoderChar@254C5E64.nat.pool.telekom.hu)
[09:38:37] *** Quits: CoderCharmander (~CoderChar@254C5E64.nat.pool.telekom.hu) (Ping timeout: 240 seconds)
[09:39:19] *** Joins: CoderCharmander (~CoderChar@2A001110020322CF0000004F2F62E401.mobile.pool.telekom.hu)
[09:43:22] *** Quits: gco (~gco@2601:647:4c80:2424:adcf:788d:2425:1357) (Quit: ZZZzzzâ€¦)
[09:44:03] *** Quits: Deepspeed (~yep@164.sub-174-215-134.myvzw.com) (Remote host closed the connection)
[09:45:21] *** Joins: Deepspeed (~yep@164.sub-174-215-134.myvzw.com)
[09:46:11] *** Quits: mov_eax (~mov_eax@user/mov-eax/x-5035058) (Ping timeout: 245 seconds)
[09:56:03] *** Joins: beneth (~beneth@2001:41d0:c:a71:1000:25::)
[09:56:11] *** Quits: CoderCharmander (~CoderChar@2A001110020322CF0000004F2F62E401.mobile.pool.telekom.hu) (Ping timeout: 245 seconds)
[09:56:55] *** Joins: CoderCharmander (~CoderChar@2A0011100227F7D7000000153FA9D301.mobile.pool.telekom.hu)
[09:57:14] *** Joins: etolier_ (~somewhere@202-144-174-137.ip4.superloop.com)
[09:57:16] *** Quits: CoderCharmander (~CoderChar@2A0011100227F7D7000000153FA9D301.mobile.pool.telekom.hu) (Client Quit)
[09:57:17] *** Quits: Deepspeed (~yep@164.sub-174-215-134.myvzw.com) (Ping timeout: 240 seconds)
[09:59:03] *** Quits: etolier (~somewhere@116-255-9-224.ip4.superloop.com) (Ping timeout: 256 seconds)
[10:02:21] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[10:05:27] *** Joins: slidercrank (~slidercra@user/slidercrank)
[10:09:17] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[10:10:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[10:13:36] *** Quits: off^ (~off@207.5.21.20) (Remote host closed the connection)
[10:16:33] *** Quits: rgrinberg (~textual@2806:265:5401:8cd:b45e:99aa:a7d7:ba92) (Read error: Connection reset by peer)
[10:17:24] *** Joins: rgrinberg (~textual@177.246.216.125)
[10:18:29] *** Quits: rgrinberg (~textual@177.246.216.125) (Read error: Connection reset by peer)
[10:18:59] *** kashyaprushi is now known as ironman
[10:19:05] *** Joins: rgrinberg (~textual@177.246.216.125)
[10:20:05] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[10:25:07] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[10:25:20] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[10:28:07] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[10:29:13] *** Quits: constxd (~brad@142.134.38.68) (Ping timeout: 256 seconds)
[10:31:19] *** Quits: soapsudsxx (~soapsudsx@209.221.40.151) (Remote host closed the connection)
[10:35:13] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[10:38:12] *** Mindiell_ is now known as Mindiell
[10:38:33] *** Joins: teut (~teut@2401:4900:1c68:ebe9:406e:a6ef:775b:b5e7)
[10:38:42] *** Joins: freep (~freepppp@62.1.245.43.dsl.dyn.forthnet.gr)
[10:41:41] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[10:42:15] *** Quits: alch (~alch@151.68.180.212) (Read error: Connection reset by peer)
[10:43:25] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[10:43:40] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[10:44:05] *** Joins: alch (~alch@151.34.161.31)
[10:49:38] *** Quits: DPA- (~DPA@2a05:41c0:0:8104::a3c:10d) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[10:50:13] *** Joins: DPA (~DPA@2a05:41c0:0:8104::a3c:10d)
[10:50:57] *** Quits: pi3 (~pi@154.6.152.74) (Ping timeout: 240 seconds)
[10:52:41] *** Quits: pnbeast (~pnbeast@2601:140:4280:6ce0::1) (Quit: WeeChat 2.7.1)
[10:53:02] *** Joins: pi3 (~pi@154.6.152.74)
[10:54:01] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[10:55:57] *** Joins: v__ (~v@194.226.32.200)
[10:57:27] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 250 seconds)
[11:00:56] *** Quits: v__ (~v@194.226.32.200) ()
[11:07:03] *** Joins: dsrt^ (~dsrt@207.5.21.20)
[11:12:21] *** Joins: Akiva (~Akiva@user/Akiva)
[11:16:34] *** Joins: Mentor (~Ionut@92.86.217.127)
[11:17:23] *** Quits: oxfuxxx (~oxfuxxx@89.40.183.139) (Ping timeout: 256 seconds)
[11:22:23] *** Quits: inomoz (~inomoz@176.59.118.12) (Remote host closed the connection)
[11:22:34] *** Quits: Hazza (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[11:24:46] *** Joins: inomoz (~inomoz@176.59.118.12)
[11:28:36] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[11:29:05] *** Joins: nostar (~nostar@107.174.17.132)
[11:29:17] *** Quits: ironman (~kashyapru@2405:201:1010:b033:bad0:8910:44c9:da61) (Ping timeout: 240 seconds)
[11:34:24] *** Quits: de-facto (~de-facto@user/de-facto) (Ping timeout: 276 seconds)
[11:37:44] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Leaving)
[11:37:47] *** Joins: maharshipatel (~maharship@43.250.157.181)
[11:39:55] *** Quits: xa0s (~xa0s@mab.sdf.org) (Quit: leaving)
[11:44:13] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 240 seconds)
[11:45:49] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Ping timeout: 240 seconds)
[11:46:29] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[11:48:10] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[11:48:54] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:b58d:d8c9:2199:bc86)
[11:49:38] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[11:49:57] *** Quits: fe23 (~fe23@2409:8a34:464:4990:6569:123c:45b7:c36f) (Ping timeout: 240 seconds)
[11:52:17] *** Quits: teut (~teut@2401:4900:1c68:ebe9:406e:a6ef:775b:b5e7) (Quit: Client closed)
[11:54:55] *** Joins: Rounin (~david@84.212.130.215)
[12:01:28] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[12:02:05] *** Joins: bolovanos__ (~bolovanos@user/bolovanos)
[12:02:43] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Read error: Connection reset by peer)
[12:02:59] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[12:04:37] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[12:05:01] *** Joins: loganlee (~Thunderbi@user/loganlee)
[12:09:28] *** Parts: _mikey (~mikey@user/mikey/x-4335048) (WeeChat 3.4)
[12:09:37] *** Quits: bolovanos__ (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[12:15:11] *** Quits: maharshipatel (~maharship@43.250.157.181) (Quit: Client closed)
[12:15:14] *** Quits: hinata (~hinata@2409:4042:2188:4e77:a846:b45d:ca68:e9ff) (Quit: Leaving)
[12:17:27] *** Joins: mrig (~mrig@user/mrig)
[12:23:11] *** Joins: oxfuxxx (~oxfuxxx@89.40.183.139)
[12:26:38] *** Quits: Thedarkb (~Thedarkb@cpc84095-pool16-2-0-cust190.15-1.cable.virginm.net) (Ping timeout: 260 seconds)
[12:27:51] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[12:28:30] *** Quits: digilink (~digilink@user/digilink) (Ping timeout: 260 seconds)
[12:30:34] *** Joins: slidercrank (~slidercra@user/slidercrank)
[12:30:50] *** Quits: moose (~moose@user/moose) (Ping timeout: 260 seconds)
[12:36:54] *** Quits: vysn (~vysn@user/vysn) (Remote host closed the connection)
[12:39:41] *** Joins: agonhajdari (~textual@user/agonhajdari)
[12:42:44] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[12:49:23] *** Joins: aradesh (~aradesh@user/aradesh)
[12:50:55] *** Joins: varaindemian (uid73404@id-73404.ilkley.irccloud.com)
[12:52:15] *** Joins: mrig (~mrig@user/mrig)
[12:52:21] *** Joins: pucara (~i@181.91.29.65)
[12:54:30] *** Joins: sysc4ll (~sysc4ll@37.172.198.11)
[12:59:47] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[13:00:29] *** Quits: Betal_ (~Betal@user/betal) (Quit: WeeChat 3.4)
[13:01:09] *** Joins: SpringSprocket (~srv@hobby.esselfe.ca)
[13:01:42] *** Joins: PaulePanter (~paul@mail.gw90.de)
[13:02:37] *** Joins: clamiax (~claudio@net-93-144-125-193.cust.dsl.teletu.it)
[13:03:34] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[13:03:54] <PaulePanter> Hi. What is the correct (for 32-bit and 64-bit) length modifier for x * size_of(char *), where x is declared as an integer (`int x`).
[13:04:35] <PaulePanter> Using %ld it works for 32-bit, but not 64-bit.
[13:05:08] *** Quits: rgrinberg (~textual@177.246.216.125) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[13:05:27] *** Joins: V-T60 (~v@gateway/tor-sasl/v-t60)
[13:05:47] <dave0> oh multiplying by sizeof(something) maks it a size_t .. try   %zu
[13:05:52] *** Quits: oxfuxxx (~oxfuxxx@89.40.183.139) (Quit: Raccoon's not another IRC transgenre wannabe who can't fap at the dead american dream, fhackerz)
[13:06:05] <dave0> i prefer to cast to int but that's me
[13:06:42] <dave0> ,cc int x=5; printf("%ld ", x*sizeof(char*));
[13:06:44] <candide> dave0: 40
[13:06:53] <dave0> oh it didn't complain!
[13:06:58] <dave0> ,cc int x=5; printf("%zu ", x*sizeof(char*));
[13:07:00] <candide> dave0: 40
[13:07:16] <dave0> didn't complain about that either.. i probably forgot a switch to the compiler
[13:07:18] <NRK[m]> i prefer not doing `sizeof(type)`
[13:08:02] <PaulePanter> NRK[m]: What alternatives are there?
[13:08:13] <NRK[m]> `sizeof(obj)`
[13:08:34] <PaulePanter> Itâ€™s about: https://review.coreboot.org/c/coreboot/+/59055
[13:08:55] <NRK[m]> ,cc char *s; printf("%zu", sizeof(s));
[13:08:57] <candide> NRK[m]: 8
[13:09:04] *** Joins: fe23 (~fe23@2409:8a34:464:4990:ac00:ae21:4f94:304c)
[13:09:43] <veltas> I also cast to int
[13:10:15] <NRK[m]> PaulePanter: use %zu since `sizeof` returns size_t
[13:10:46] *** Joins: hinata (~hinata@2409:4042:2188:4e77:c1aa:ff18:d36d:f8ea)
[13:10:50] <NRK[m]> could also cast...
[13:11:21] <PaulePanter> https://review.coreboot.org/plugins/gitiles/coreboot/+/refs/tags/4.15/src/drivers/ipmi/ipmi_ops.h#114
[13:11:23] <candide> Title of PaulePanter's link: src/drivers/ipmi/ipmi_ops.h - coreboot - Gitiles
[13:11:41] <PaulePanter> Is where the struct member is defined.
[13:12:00] <PaulePanter> I am going to use size_t. Thanks.
[13:13:07] <nitrix> sizeof yields, it doesn't return.
[13:14:33] <V-T60> Hi. Should I sort double variables and then strings (by strlen() for instance)? "Can you do 1. A merge sort (with recursion) ... on arrays with *sort keys* such as double or string to your liking".
[13:15:05] * V-T60 is just trying to figure out what sort key is
[13:15:19] <NRK[m]> nitrix: yes, thanks for the -Wpedantic warning :)
[13:15:44] *** Joins: plastico (~plastico@neomutt/plastico)
[13:16:01] <NRK[m]> PaulePanter: look up "integral promotion" in C if you're not familiar with it.
[13:17:45] <PaulePanter> NRK[m]: Thank you.
[13:20:01] <dave0> V-T60: usually when sorting, you provide a comparison function which compares 2 elements of your array, and returns -1 for less than, 0 for the same, +1 for greater than ... you comparison function is free to do whatever it likes and return one of those values
[13:20:19] *** Quits: sysc4ll (~sysc4ll@37.172.198.11) (Quit: Leaving)
[13:20:44] *** Joins: The_Jag (~The_Jag@host-79-52-45-220.retail.telecomitalia.it)
[13:21:18] <The_Jag> Hi, is it possible to restrict a typedef enum to uint16_t :10 values?
[13:21:29] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[13:21:55] <dave0> The_Jag: example?
[13:22:18] *** wyre_ is now known as wyre
[13:22:55] *** Joins: ns12 (~ns12@user/ns12)
[13:23:19] <The_Jag> I'd like to create an enum for pages indexes. but I already know the number of pages wont be over 1k so I'd like to create an enum wich is only uint16_t :10 in size
[13:23:39] <The_Jag> *its members are uint16_t :10
[13:23:46] <sham1> Not possible
[13:23:58] <sham1> BItfields don't make sense outside of structs anyway
[13:24:06] <The_Jag> ok
[13:24:16] <The_Jag> may I make it uint16_t at least?
[13:24:33] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:24:33] <dave0> The_Jag: the "elements" of enums are just numbers.. you can stuff them into a bitfield if you like
[13:24:45] *** Quits: haniaF (~haniaF@83.24.213.141.ipv4.supernova.orange.pl) (Ping timeout: 256 seconds)
[13:25:22] <sham1> No, can't even make it uint16_t
[13:25:23] <dave0> i've never seen syntax like     enum page { one, two, three }; struct x { enum page flag:10; };
[13:25:35] <The_Jag> dave0 yes. what I'd like to know is: How can I make the memory footprint of an enum of 1k values the smallest possible
[13:25:36] <dave0> ,cc enum page { one, two, three }; struct x { enum page flag:10; };
[13:25:39] <candide> dave0: Success (no output).
[13:25:50] <dave0> huh the compiler accepted it
[13:25:57] <dave0> paint me tickled pink
[13:26:18] <sham1> ,cc enum page { one, two, three}; struct x { enum page flag : 10; }; struct x x = { .page = one, };
[13:26:19] <candide> sham1: error: 'struct x' has no member named 'page'
[13:26:28] <sham1> ,cc enum page { one, two, three}; struct x { enum page flag : 10; }; struct x x = { .flag = one, };
[13:26:30] <candide> sham1: no output: two = two; three = three; one = one; x = {flag = one}
[13:26:37] <sham1> Apparently works
[13:26:44] <dave0> seems so
[13:26:46] <dave0> TIL
[13:26:49] <sham1> Can't tell if that's UB or actually something that could be usable
[13:27:00] <dave0> The_Jag: it looks like you can :-)
[13:27:26] <The_Jag> wait
[13:27:34] <sham1> ,cc enum foo { zero, one, two, three, four }; struct x { enum foo foo : 2; };
[13:27:36] <candide> sham1: [warning: 'foo' is narrower than values of its type]  Success (no output).
[13:27:46] <sham1> Mmhm
[13:27:49] *** Joins: haniaF (~haniaF@83.24.197.161.ipv4.supernova.orange.pl)
[13:27:53] <The_Jag> enum page { one, two, three} <- what size is it?
[13:27:56] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[13:28:05] <The_Jag> isn't it int?
[13:28:16] <dave0> The_Jag: they are usually int, but gcc has an option to make them as small as possible
[13:28:30] <The_Jag> so it's a compiler thing
[13:28:34] <The_Jag> not a language thing
[13:28:40] <dave0> yep
[13:28:45] <The_Jag> :(
[13:28:56] <dave0> but the bitfield stuff works
[13:29:04] <sham1> ,c11 6.7.2.2p2
[13:29:05] <candide> http://www.iso-9899.info/n1570.html#6.7.2.2p2 [Enumeration specifiers] The expression that defines the value of an enumeration constant shall be an integer constant expression that has a value representable as an iâ€‹nt.
[13:29:09] <dave0> so you can adjust the size for your app
[13:29:09] *** Joins: lleo (~leo@188-206-107-96.mobile.kpn.net)
[13:29:56] <The_Jag> ok then
[13:30:12] <The_Jag> i'll use bit field
[13:30:16] <The_Jag> in the struct
[13:30:17] <sham1> Do note that bitfields are most often a bad idea, but yeah
[13:30:28] <NRK[m]> The_Jag: won't work, there will be padding
[13:30:56] <The_Jag> right
[13:30:57] <The_Jag> :(
[13:30:59] <NRK[m]> ,cc struct bit { int a : 10; }; printf("%zu", sizeof(struct bit));
[13:31:02] <candide> NRK[m]: 4
[13:31:23] <dave0> The_Jag: are you making billions of them?
[13:31:28] <The_Jag> no
[13:31:49] <dave0> The_Jag: is it for an embedded system?
[13:31:57] <The_Jag> it's yes
[13:32:02] <dave0> ah okay
[13:32:12] <The_Jag> that's why I'd like to keep them as small as possible
[13:32:18] <dave0> well you can pack three 10-bit numbers into one 32-bit number
[13:32:35] <The_Jag> yes, in the struct
[13:33:07] <The_Jag> I was only afraid that each enum value would be mapped to a int
[13:33:17] <The_Jag> when I typedef it
[13:33:29] * rindolf 'd like "int x[100]: 1;" an array of bits
[13:33:47] <The_Jag> or is it enum values not allocated?
[13:33:58] <sham1> Enum calues are just integer constants
[13:34:08] <NRK[m]> might be wrong, but i don't think sizeof an enum is defined
[13:34:36] *** Joins: inlight (~inlight@157.35.70.148)
[13:34:36] *** Quits: inlight (~inlight@157.35.70.148) (Changing host)
[13:34:36] *** Joins: inlight (~inlight@user/inlight)
[13:34:46] <NRK[m]> so compiler is free to pick any as long as all the enumurators fit
[13:34:49] <The_Jag> sham1 so if I create, say an enum of 1billions values, but not use it, the footprint is 0?
[13:34:56] <sham1> INdeed
[13:35:12] <sham1> I mean, where would the enum be stored
[13:35:13] <dave0> The_Jag: i can't think of any reason for you to not use bitfields in a struct
[13:35:30] <sham1> Unportable, but if it's an embedded MCU then it's going to be that anyway so go to town
[13:35:34] <The_Jag> dave0 I already use them
[13:35:41] *** Quits: lleo (~leo@188-206-107-96.mobile.kpn.net) (Quit: beyond time space in laws)
[13:35:58] <The_Jag> sham1 that clears me of fears
[13:36:05] <dave0> The_Jag: i trust the robot when it doesn't complain :-) so your original question seems to be a "yes"
[13:36:26] <The_Jag> :D
[13:37:00] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[13:38:22] <NRK[m]> you could store something else worth 6bits in the struct as well.
[13:38:28] <NRK[m]> ,cc struct bit { unsigned short u : 10; unsigned char c : 6; }; printf("%zu", sizeof(struct bit));
[13:38:30] <candide> NRK[m]: 2
[13:38:47] <The_Jag> NRK[m] yep
[13:39:12] <sham1> ,cc struct bit { uint16_t u : 10; uint16_t c : 6; }; printf("%zu", sizeof(struct bit));
[13:39:14] <candide> sham1: 2
[13:39:34] <The_Jag> I was afraid that by just typedeffing an enum, the values would be mapped in memory as int regardless
[13:40:17] <The_Jag> thanks
[13:44:21] *** Quits: mrig (~mrig@user/mrig) (Remote host closed the connection)
[13:48:17] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 240 seconds)
[13:51:45] *** Joins: Darkcoal (~user@2001:16a2:7a92:bc00:1f6a:511c:8c43:ad3e)
[13:52:33] *** Joins: mjbatty (~mjbatty@82.2.17.205)
[13:53:28] *** Joins: neuro_sys_ (~user@84.20.147.33)
[13:55:36] *** Quits: Pokey (~pokey@spikeyCactus/hoosky) (Quit: Hecc! My server must have died!)
[13:55:55] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 256 seconds)
[13:56:36] *** Joins: Pokey (~pokey@spikeyCactus/hoosky)
[13:56:45] *** Quits: mjbatty (~mjbatty@82.2.17.205) (Client Quit)
[13:57:57] *** Quits: Darkcoal (~user@2001:16a2:7a92:bc00:1f6a:511c:8c43:ad3e) (Ping timeout: 240 seconds)
[13:58:14] *** Joins: Darkcoal (~user@2001:16a2:7a92:bc00:1f6a:511c:8c43:ad3e)
[14:00:13] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:01:14] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 268 seconds)
[14:01:30] *** Lord_of_Life_ is now known as Lord_of_Life
[14:03:48] *** Joins: sdfgsdfgsdfgsfsd (~sdfgsdfg@user/sdfgsdfg)
[14:03:51] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Ping timeout: 256 seconds)
[14:03:55] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[14:04:51] *** Joins: flynn (~mcbloch@user/flynn)
[14:05:48] *** Quits: Techcable (~Techcable@168.235.93.147) (Remote host closed the connection)
[14:05:56] *** Joins: Techcable (~Techcable@168.235.93.147)
[14:09:06] *** Joins: ko (~i.am@user/marlboro)
[14:09:45] *** Quits: V-T60 (~v@gateway/tor-sasl/v-t60) (Ping timeout: 276 seconds)
[14:13:14] *** Quits: Techcable (~Techcable@168.235.93.147) (Remote host closed the connection)
[14:13:22] *** Joins: Techcable (~Techcable@168.235.93.147)
[14:13:38] *** Joins: bkhl (~bkhl@user/bkhl)
[14:14:44] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::414b)
[14:15:20] *** Quits: Techcable (~Techcable@168.235.93.147) (Remote host closed the connection)
[14:15:27] *** Joins: Techcable (~Techcable@168.235.93.147)
[14:16:54] *** Quits: winning-luser (~wl@2601:8c1:80:70d0::414b) (Client Quit)
[14:18:12] *** Quits: Techcable (~Techcable@168.235.93.147) (Remote host closed the connection)
[14:18:20] *** Joins: Techcable (~Techcable@168.235.93.147)
[14:18:40] *** Quits: Techcable (~Techcable@168.235.93.147) (Remote host closed the connection)
[14:21:35] *** Quits: Pokey (~pokey@spikeyCactus/hoosky) (Quit: Hecc! My server must have died!)
[14:22:26] *** Joins: Pokey (~pokey@spikeyCactus/hoosky)
[14:26:07] *** Quits: Darkcoal (~user@2001:16a2:7a92:bc00:1f6a:511c:8c43:ad3e) (Ping timeout: 250 seconds)
[14:26:23] *** Joins: Darkcoal (~user@2001:16a2:7a92:bc00:1f6a:511c:8c43:ad3e)
[14:29:03] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Remote host closed the connection)
[14:30:12] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:30:18] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cd30:5759:3f90:149b)
[14:30:58] *** Joins: csrf (~csrf@user/csrf)
[14:32:37] *** Quits: cursey_ (~cursey@user/cursey) (Quit: bye)
[14:34:31] *** Quits: pucara (~i@181.91.29.65) (Quit: Lost terminal)
[14:36:21] *** Quits: mixfix41 (~homefame@user/mixfix41) (Read error: Connection reset by peer)
[14:38:34] *** Joins: kurahaupo_ (~kurahaupo@pa49-182-120-117.pa.qld.optusnet.com.au)
[14:40:32] *** Joins: mixfix41 (~homefame@user/mixfix41)
[14:40:49] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[14:41:30] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[14:41:53] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[14:42:17] *** Quits: alch (~alch@151.34.161.31) (Ping timeout: 240 seconds)
[14:42:58] *** Joins: V-T60 (~v@gateway/tor-sasl/v-t60)
[14:43:41] *** sdfgsdfgsdfgsfsd is now known as dikhed
[14:44:09] *** dikhed is now known as dfghfgdh
[14:44:23] *** Joins: alch (~alch@151.34.209.145)
[14:45:33] *** Joins: cursey (~cursey@user/cursey)
[14:46:52] <sokan> when do I use void on main and functions?
[14:47:02] *** Quits: Darkcoal (~user@2001:16a2:7a92:bc00:1f6a:511c:8c43:ad3e) (Ping timeout: 240 seconds)
[14:47:55] *** ko is now known as unknow
[14:48:25] <V-T60> sokan: as far as i know, when your function isn't meant to return value
[14:48:36] <sokan> so printf is NOT void
[14:48:43] <sokan> so if I use printf*
[14:48:44] *** Joins: Darkcoal (~user@167.86.150.114)
[14:48:44] <sham1> Well, you don't want to use void as a return type of main, but you can use it as the parameter list to indicate that you don't care about the argument vector
[14:49:24] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[14:50:14] <dave0> sokan: main is a special case, there's a whole thing on it on the c-faq   http://www.c-faq.com/ansi/maindecl.html
[14:50:43] <dave0> sokan: TL;DR just use   int main(int argc, char **argv)   or    int main(void)
[14:51:24] <sokan> main _until I get to be good at C_ I'll leave as int. what about other functions?
[14:51:55] <sham1> Well it's not about being good at C, because main has to return int. As for other functions, you just return what you need to return
[14:52:04] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:52:09] <sham1> If you need more than one return, you can also use pointers to create "output parameters"
[14:52:24] <sham1> And when doing that style, you can have the function return a status or whatever
[14:53:37] <dave0> sokan: it's not really about what it returns and parameters, but keeping your functions simple .. use what you need to keep your functions small and managable
[14:53:42] <sokan> so when it returns a printf that can be used as void?
[14:54:59] <sokan> Also, from what I understand, a pointer is that * symbol that "points" to a specific variable that has a dedicated place in memory?
[14:55:07] <dave0> sokan: you are allowed to ignore return values.. printf does return the number of characters output, or if an error occurs, but very little real code checks
[14:55:38] <sham1> Technically you are supposed to check that printf returns what you think it should return, but yeah. As said, real code seldom checks it
[14:56:45] <dave0> sokan: hopefully you are learning with a book, and the book gently introduces you to pointers
[14:57:50] <sokan> dave0: I'll end up checking out King's book on pointers... Profs' slides are completely useless
[14:57:53] <sham1> I just tend to check the return value on snprintf although often I just create my own asprintf equivalent so I don't need to allocate buffers
[14:58:04] <sham1> Manually
[14:58:42] <sokan> I wish I had the time to read it from the first paragraph and do exersises etc... But I was careless and started with that Schmidt's book (which people here told me to avoid)
[15:01:28] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:01:40] <sokan> Schieldt or whatevre his name
[15:02:56] <dave0> sokan: https://www.google.com/search?q=bull+schildt
[15:03:22] *** Joins: earnest (~earnest@user/earnestly)
[15:03:53] <dave0> oh no space is better   https://www.google.com/search?q=bullschildt
[15:04:05] <NRK[m]> i liked K&R better than king's
[15:04:23] <NRK[m]> more concise and to the point
[15:05:14] <NRK[m]> there's also this: https://github.com/ragtux/cnility K&R rewrite in rust
[15:05:20] <NRK[m]> i meant LaTeX
[15:05:54] <sham1> I don't think people would like it if K&R was rewritten in Rust
[15:06:34] <NRK[m]> it has a couple example errors though, so i'd still keep the original around. but the print/pdf quality is much better.
[15:08:32] *** Joins: Everything (~Everythin@37.115.210.35)
[15:11:31] <sokan> I shouldn't feel bad for reading specific paragraphs of the book and not the whole thing eh? :P
[15:12:47] <NRK[m]> which one? K&R is pretty short so i don't see much point in skipping stuff.
[15:13:16] *** Quits: echoSMILE (uid504326@user/echosmile) (Quit: Connection closed for inactivity)
[15:13:38] <sham1> Speaking of K&R, I should probably buy it already because it's a classic. A bit antiquated but still, a classic
[15:14:01] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:b58d:d8c9:2199:bc86) (Quit: Quit)
[15:14:19] <sokan> King's C programming a modern aproach
[15:14:24] <sokan> approach*
[15:16:35] *** Joins: gproto23 (~gproto23@user/gproto23)
[15:21:17] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:b58d:d8c9:2199:bc86)
[15:21:41] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[15:23:08] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[15:23:28] *** Joins: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[15:23:38] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[15:25:10] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[15:26:02] *** Quits: trafficjam (~trafficja@119.17.42.59) (Ping timeout: 256 seconds)
[15:27:31] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzzâ€¦)
[15:30:41] *** Joins: trafficjam (~trafficja@119.17.42.59)
[15:32:18] *** Joins: Iarfen (~quassel@181.43.57.45)
[15:32:50] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[15:35:47] *** Joins: mrig (~mrig@user/mrig)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:30] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:42:26] *** Quits: myon98 (~myon98@user/myon98) (Ping timeout: 250 seconds)
[15:44:11] *** Joins: vysn (~vysn@user/vysn)
[15:45:57] *** Joins: seninha (~seninha@user/seninha)
[15:49:46] *** Joins: malina (~malina@user/malina)
[15:50:30] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[15:52:27] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 276 seconds)
[15:52:36] *** Joins: aqua (~aqua@user/aqua)
[15:53:40] *** Joins: bebyx (~Thunderbi@user/bebyx)
[15:55:31] *** Joins: stonkey (~stonkey@user/stonkey)
[15:55:54] *** Joins: hmm (~hmm@c-24-126-74-244.hsd1.md.comcast.net)
[15:56:21] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[15:56:32] *** Quits: etolier_ (~somewhere@202-144-174-137.ip4.superloop.com) (Quit: No Ping reply in 180 seconds.)
[15:57:55] *** Joins: etolier (~somewhere@202-144-174-137.ip4.superloop.com)
[15:59:52] *** Joins: john99 (~johnny@138.62.221.87.dynamic.jazztel.es)
[16:01:08] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[16:02:32] *** Quits: hmm (~hmm@c-24-126-74-244.hsd1.md.comcast.net) (Quit: Connection closed)
[16:04:37] *** Joins: constxd (~brad@142.134.38.68)
[16:05:46] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[16:06:47] *** Joins: Haxxa (~Haxxa@202-144-174-197.ip4.superloop.com)
[16:07:04] <Everything> https://yurichev.com/writings/C-notes-en.pdf
[16:08:35] <constxd> what is this
[16:12:35] <nitrix> I picked 3 sentences and all three are incredibly dangerously wrong.
[16:16:07] *** Quits: Lazenca (Lazenca@user/lazenca) (Remote host closed the connection)
[16:16:30] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[16:16:55] *** Joins: random-nick (~random-ni@87.116.180.98)
[16:17:44] <EtherNet> Everything: taking a look at it
[16:19:37] <nitrix> int array[10]; f(&array[-1]); // passing a pointer to the one int element before array
[16:19:46] <nitrix> That's UB. There's so much crap in there, gosh.
[16:20:06] <pony> omg
[16:20:10] *** Joins: Klinda (~superleag@user/klinda)
[16:22:10] <nitrix> I can nitpick almost any sentence.
[16:22:25] <nitrix> "In the C99 standard, new type bool", it's not a type, it's a macro. The type is named _Bool. etc.
[16:24:03] <novns> that's why this "book" is not popular at all, no one recommends it anywhere
[16:24:52] *** Joins: palindrome (~jhonny@93.107.6.121)
[16:24:57] <novns> and the author has removed it's sources from github
[16:25:11] <novns> too many issues I guess
[16:25:42] <EtherNet> yep
[16:25:55] <EtherNet> there's nothing better than K&R yet. I think.
[16:26:09] <EtherNet> a bit outdated? may be... but still the best to catch C's concepts.
[16:26:11] <nitrix> There is. https://nostarch.com/Effective_C
[16:26:20] *** Joins: agonhajdari (~textual@user/agonhajdari)
[16:26:25] <EtherNet> nitrix: lemme check that one
[16:26:34] <novns> there's Modern C
[16:26:36] <novns> https://gustedt.gitlabpages.inria.fr/modern-c/
[16:26:59] <nitrix> But it's a bit of a dry read and requires some programming experience. The terminology matches exactly that of the Standard, it's written by a committee member.
[16:27:54] <nitrix> It's well explained though. Everything gets introduced, right terminology, straight to the point, gotcha are mentioned. It's a great book.
[16:28:05] <sokan> From what I understand *p means that p is pointing ton something (an object). &i is a pointer to i, (it is an object). In a way *p is the base of a arrow and &i is the tip of the arrow.
[16:28:07] <sokan> right?
[16:28:42] <NRK[m]> EtherNet: i don't consider it outdated for learning purposes
[16:29:18] <nitrix> sokan, int x = 42; // `x` is an object of type `int` initialized with the value `42`.
[16:29:31] <NRK[m]> the are more parts of C which remain same compared to which changed
[16:29:49] <nitrix> sokan, int *p = &x; // `p` is an object of type `int *`, initialized with the value `&x`, which is the address of `x`.
[16:30:36] <nitrix> sokan, Both `p` and `x` are objects, the difference is that for pointers, the value that they store is the address of other objects.
[16:32:43] <sokan> I get it.
[16:32:53] <sokan> adresses can have different values
[16:33:01] <sokan> but the address itself remains the same
[16:33:05] *** aqua is now known as kish^
[16:33:07] *** kish^ is now known as kish`
[16:33:08] <nitrix> sokan, If you dereference that, `*p`, then you end up working with the object that the pointer is pointing at, aka `x`, so the expression evaluates to the value `42`.
[16:33:12] <NRK[m]> `a[1]=...; // first element` wtf
[16:33:18] <dave0> sokan: correct, c doesn't move things around
[16:33:24] <nitrix> Addresses don't have different values, addresses ARE values.
[16:33:40] <sokan> fair enough
[16:34:03] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[16:34:04] <sokan> nitrix: good reference to 42 btw :P
[16:34:14] <nitrix> Objects have an address and they store a value.
[16:35:15] <nitrix> Depending on the type of the object, that object can be a pointer, which means the value it will store is the address of another object.
[16:35:57] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cd30:5759:3f90:149b) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[16:36:19] <nitrix> Therefore, the & operator (the address-of operator) produces an address, something you'll store in a pointer.
[16:36:36] <sokan> and int * is the pointer
[16:36:55] <sokan> int * p rather
[16:37:20] <nitrix> `p` is the pointer object. It has type `int *`.
[16:38:36] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:38:41] <sokan> int p is an object of int type, if I `int p` and it a pointer object if I declare it as `int *p` right?
[16:39:40] <nitrix> Yes. `int foo;`, then `foo` is an `int`. Adding the asterisk `int *foo;`, now `foo` is an `int *`.
[16:40:09] <nitrix> Coincidently, how you're supposed to read it, `*foo` is also an `int`.
[16:40:40] <NRK[m]> it is very important to put the * before the pointer name!
[16:40:46] <novns> it's not polite to point, btw
[16:40:57] *** Quits: kurahaupo_ (~kurahaupo@pa49-182-120-117.pa.qld.optusnet.com.au) (Ping timeout: 256 seconds)
[16:41:07] <NRK[m]> `int* p; // wrong!` `int *p; // elegant!`
[16:41:41] <novns> NRK[m], some people prefer the first one
[16:41:48] * dave0 dereferences
[16:42:00] <NRK[m]> their preference is wrong!
[16:42:02] <nitrix> The asterisk goes directly in front of the identifier. Declarations are meant to follow usage.
[16:42:08] *** Joins: digilink (~digilink@user/digilink)
[16:42:08] <sham1> NRK[m]: int * p; // How about this?
[16:42:13] <NRK[m]> K&R knows the best
[16:42:36] <NRK[m]> heresy
[16:42:42] <novns> sham1, it's ok, but too much spaces wasted
[16:43:00] <nitrix> No one writes `* x [  4  ]` in an expression, you just write `*x[4]`. Same goes with declarations.
[16:44:10] <novns> the best solution is to use some   #define POINTER *
[16:44:13] <nitrix> (Except they're of course prefixed by the resulting type of the expression, to make it a proper declaration).
[16:44:38] <nitrix> novns, Can we not troll while there are beginners around asking questions?
[16:44:52] <novns> sure
[16:45:05] <sokan> so int * p, int* p and int *p is the same thing in the end, but for reason of heresy we typ int *p
[16:45:09] <novns> I'm sorry, don't point at me
[16:45:31] <sokan> int *novns
[16:46:19] <nitrix> sokan, Indeed. We can discuss why that's a more sane choice later on. Spoiler: it's not just stylistic choice.
[16:46:35] <NRK[m]> sokan: serious answer, "declaration follows usage." the C declaration is a mess, but if you're going to learn/use it, you'll have a much easier time if you understand why things are the way they are.
[16:46:49] <dave0> maybe the right example is   int* a,* b;
[16:47:00] <NRK[m]> for example, `int* a, b` what do you think this declares, sokan?
[16:47:17] <NRK[m]> dave0: beat me to it
[16:47:32] <nitrix> It gets more fun with function pointers, but this is good too.
[16:48:11] <sham1> I personally am not that big a fan of "declaration follows use" but since that's what we have to live with, `int *a` makes more sense than `int* a`, although the former might be better if the syntax was better
[16:48:21] <sham1> Err, latter
[16:48:21] <novns> I still cannot understand why I used spaces so weird when I was 11
[16:48:27] <novns> but there was some logic
[16:48:30] <NRK[m]> oh it gets funnier with functions which take pointer to specfic types and return pointer back to specific types :)
[16:48:35] <novns> https://gist.github.com/novns/890e96d2ed37b01c979694fb1401c252
[16:48:36] <candide> Title of novns's link: The early spirograph program in Modula-2 from 1987 Â· GitHub
[16:49:15] <sham1> Pointers to functions that return pointers to functions. Especially fun if you want to make the type recursive, which is not something one can do
[16:49:15] <NRK[m]> even more when you have a function pointer to a function that deals with fucntion pointer :p
[16:49:54] <nitrix> Here's one for whoever wants it. What do you think the types of 0, '0' and "0" are?
[16:50:13] <sham1> Do you want the answer here?
[16:50:32] <nitrix> Myeah. Maybe wait a bit if you're confident.
[16:50:37] <sham1> int, int, const char *
[16:50:41] <NRK[m]> the last one is a string literal :)
[16:50:59] <nitrix> sham1, Close. I'm surprised you got '0' correct.
[16:51:07] <sham1> Is the last one char [2]
[16:51:13] <nitrix> Yep.
[16:51:17] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:df45:34e6:a5aa:758) (Ping timeout: 240 seconds)
[16:51:20] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[16:51:40] <sham1> It's like, I know that character literals are a mess
[16:51:42] <sham1> 'this'
[16:51:48] <NRK[m]> the last one is static and const too though.
[16:51:49] <nitrix> ,cc ptype("0")
[16:51:52] <candide> nitrix:  "0" = char [2]
[16:51:56] <nitrix> It's only const in C++.
[16:52:09] <sham1> ,cc ptype('this')
[16:52:10] <nitrix> String literals aren't const for C.
[16:52:11] <candide> sham1:  No symbol "this" in current context.
[16:52:16] <sham1> Hmrm
[16:52:18] <NRK[m]> modifying a string literal isn't allowed though
[16:52:26] <nitrix> It's allowed but it's UB.
[16:52:30] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:fd9c:24e7:5ea:6f47)
[16:52:38] <NRK[m]> ah.
[16:52:40] <sham1> And thus implementations place them into .rodata or equivalent
[16:52:48] <sham1> Because it's UB, so they are allowed to make the OS go "no"
[16:53:01] <sham1> Or the hardware even with memory protection
[16:53:11] <NRK[m]> i've started using `-Wwrite-strings` recently after going though the gcc manpage of warnings
[16:53:14] <nitrix> ,c11 6.4.5p7
[16:53:14] <candide> http://www.iso-9899.info/n1570.html#6.4.5p7 [String literals] It is unspecified whether these arrays are distinct provided their elements have the appropriate values. If the program attempts to modify such an array, the behavior is undefined.
[16:53:14] <NRK[m]> quite handy
[16:53:41] <sham1> Although of course, if one tries to modify a character literal for some reason, they're evil
[16:53:46] <nitrix> And yeah, two "foo"s may or may not be distinct, it's unspecified.
[16:54:12] <sham1> And if you want to do modifiable buffers with a default content, just do `char buf[] = "foo";`
[16:54:42] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:b58d:d8c9:2199:bc86) (Quit: Quit)
[16:56:12] *** Joins: kurahaupo (~kurahaupo@pa49-182-120-117.pa.qld.optusnet.com.au)
[16:56:51] <nitrix> sham1, If it was `const char *` you wouldn't be able to use sizeof on them by the way.
[16:57:32] <NRK[m]> good point
[16:57:36] <cehteh> while '0' being int is just some historic fuckup
[16:57:59] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[16:58:02] <NRK[m]> ,cc printf("%d", '0');
[16:58:04] <candide> NRK[m]: 48
[16:58:07] <nitrix> I think it's important for wide characters, or whatever that stuff is.
[16:58:14] <NRK[m]> LGTM
[16:58:23] <cehteh> there is wchar_t
[16:59:20] <cehteh> int may be not enough to represent a wchar anyway
[16:59:47] <nitrix> The promotion rules to int are kinda dumb too. char x, y; char z = x + y; // I believe they both get promoted to int, then truncated back to char.
[17:00:16] <nitrix> And getchar returning int instead of char.
[17:00:23] <sham1> Well getchar also returns EOF
[17:00:23] <nitrix> Lots of silliness.
[17:00:25] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:b440:1fdb:a9a9:c6fa)
[17:00:25] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:b440:1fdb:a9a9:c6fa) (Changing host)
[17:00:25] *** Joins: skapata (~Skapata@user/skapata)
[17:00:38] <nitrix> sham1, Ah! Well maybe char should be signed after all!
[17:01:09] *** Quits: hinata (~hinata@2409:4042:2188:4e77:c1aa:ff18:d36d:f8ea) (Quit: Leaving)
[17:01:31] <sham1> Yeah. Signed chars and -1 as your EOF because 0xFF is not a valid byte in a UTF-8 string anyway
[17:01:33] *** Quits: atulu (~atulum]@2001:470:69fc:105::d50c) (Quit: Client limit exceeded: 20000)
[17:01:42] <sham1> So you know that you're done
[17:01:56] *** Joins: atulu (~atulum]@2001:470:69fc:105::d50c)
[17:02:24] <sokan> NRK[m]: int* a, b is int* a and int* b from what I undestand
[17:02:40] <sokan> even though.... it should be int *a and int b
[17:02:47] <sham1> It's the latter, yes
[17:02:48] <NRK[m]> ,english int* a, b;
[17:02:50] <candide> NRK[m]: Declare `a` as a pointer to iâ€‹nt. Declare `b` as an iâ€‹nt.
[17:03:10] <sokan> but the way it was written I came up with the wrong idea I guess
[17:03:18] <nitrix> It's a lot more obvious when you write it properly. int *a, b, *c;
[17:03:24] <NRK[m]> this is one more reason why `int *p` is the RIGHT way for declaring pointers.
[17:03:24] <sham1> Indeed. And  that's why it's done `int *a, b`
[17:03:58] <nitrix> int x[3], y[5], (*z)(void);
[17:04:00] <sham1> It follows from "declaration follows usage" since, well, if you dereference `a`, you get an int
[17:04:14] <sham1> (an int l-value but w/e)
[17:04:49] <nitrix> Mhm. `a` is `int *`. `*a` is `int`. It's dual.
[17:04:55] <sokan> I wish I had /j #c from the start of this course... I'd know much better C by now
[17:05:45] <sham1> Yeah. Being pedantic is useful with this stuff and we can do that quite well here
[17:07:50] <nitrix> Being pedant [...] / A pedantic [...]
[17:08:18] <sham1> Q.E.D.
[17:10:29] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:18:59] *** Quits: john99 (~johnny@138.62.221.87.dynamic.jazztel.es) (Remote host closed the connection)
[17:21:39] *** Joins: pulse (~pulse@user/pulse)
[17:23:34] *** Joins: soapsudsxx (~soapsudsx@209.221.40.151)
[17:25:28] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[17:28:59] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 256 seconds)
[17:29:11] *** Joins: stonkey (~stonkey@user/stonkey)
[17:32:15] <nomagno> can I use size_t by only including stdint.h?
[17:32:33] <sham1> No. You need street.
[17:32:40] <sham1> stddef.h
[17:32:52] *** Joins: stonkey2 (~stonkey@user/stonkey)
[17:33:05] <sham1> Autocorrect correcting correct words into typos, how nice
[17:33:17] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::414b)
[17:34:13] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 256 seconds)
[17:34:58] <nomagno> I managed to finish off basically all of the backend without a single dependency on hosted libc
[17:35:08] <nomagno> Wohoo!
[17:35:30] <nomagno> (Save for the physics engine, but this one is just a matter of being careful with math)
[17:35:47] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[17:36:12] <nomagno> And in fully portable, defined C99 too
[17:36:34] <nomagno> Can I find a system that doesn't define uint8_t and/or uint16_t?
[17:36:50] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[17:37:09] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[17:38:11] *** Quits: Iarfen (~quassel@181.43.57.45) (Ping timeout: 256 seconds)
[17:38:27] <sham1> Yes. Systems that don't have the smallest addressable unit being an octet and whose words aren't multiples of 8 bits. As to what hardware one would have as an example? I dunno
[17:39:09] <sham1> Every machine I've seen is either a byte machine or something I don't care enough to know if it's a byte machine
[17:39:57] *** Quits: trafficjam (~trafficja@119.17.42.59) (Quit: Client closed)
[17:40:24] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cd30:5759:3f90:149b)
[17:41:15] <sham1> For maximum portability you'd use uint_least{8,16}_t or uint_fast{8,16}_t and then do any masking and such if you're sending or receiving any data from and to anywhere
[17:42:09] <nomagno> Issue is I do depend on 8 and 16 bit unsigned wrap-around
[17:42:19] <sham1> Of course I'll wager that any platform of interest to you is either POSIX or Windows and both mandate 8-bit bytes
[17:43:25] <nomagno> sham1: I do care about absolute maximum portability beyond POSIX and Win32
[17:43:34] <nomagno> But I am willing to make this one concession
[17:43:36] <sham1> As for that, you can do slightly ugly code, like (X + 1) & 0xFFFF or whatever. Any platform where uint_least16_t or whatever is the same as uint16_t that's gonna be a no-op
[17:43:38] <nomagno> I'll just document it
[17:44:14] <dave0> gcc /does/ use word and doubleword fetches for & 0xffff and & 0xffffffff
[17:44:16] *** Joins: cart_man (~rynot@host-78-144-125-216.as13285.net)
[17:44:35] *** Quits: cart_man (~rynot@host-78-144-125-216.as13285.net) (Client Quit)
[17:44:52] <dave0> at least on x86
[17:44:54] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[17:44:56] <sham1> Well it shouldn't and that sounds like a bug
[17:45:33] <dave0> i mean instead of doing the and, it uses movzx for those masks
[17:45:34] <sham1> It *should* just compile to a single ADD or INC
[17:46:18] <dave0> ehh i don't think it does..  not 100% sure on that
[17:46:29] <sham1> Since that's just the same as mod 2^16 on a machine where x would be a 16 bit unsigned thing
[17:46:46] <sham1> Maybe it doesn't, but I'm saying that it ought to really
[17:47:03] <sham1> Can you godbolt? I can't because it doesn't play nicely with mobile
[17:47:20] <dave0> i'll try
[17:49:48] <nomagno> For the moment I'll add a preprocessor-time error if uint8/uint16 constants aren't defined
[17:49:59] <sham1> You can do that, yes
[17:50:35] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cd30:5759:3f90:149b) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[17:51:17] *** Quits: soapsudsxx (~soapsudsx@209.221.40.151) (Remote host closed the connection)
[17:52:54] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[17:52:59] <sham1> But yeah. If the code I pasted for the wraparound doesn't get optimized then I'll certainly be disappointed. Portable code shouldn't put you to a slower track ideally, although in practice? Yeah
[17:53:43] <dave0> https://termbin.com/rrmg
[17:54:05] <dave0> with  gcc 11.something -O3
[17:54:12] <dave0> it doesn't even mask at all
[17:54:39] <sham1> Well it doesn't need. Now do it with uint_least16_t and uint_fast16_t
[17:55:11] <sham1> The latter would be quite interesting because on AMD64 uint_fast16_t is the same as uint64_t
[17:55:29] <sham1> It probably zero-extends
[17:56:39] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[17:57:41] <dave0> https://termbin.com/pr2t9
[17:59:02] <dave0> oh how i wish int was 64 bit on amd64
[17:59:56] <dave0> masking is not expensive
[18:00:09] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 256 seconds)
[18:01:17] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Ping timeout: 240 seconds)
[18:01:20] <nomagno> Yup, added a very explicit requirement header, if I find new requirements for compilation I'll add them here
[18:02:13] <nomagno> Ideally it serves as self-documentation, the moment you compile on a platform that lacks certain basic features, you know very clearly where to implement them if need be
[18:02:26] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[18:03:02] <nomagno> For instance, I'm probably going to require systems that provide millisecond-level timing function
[18:03:34] <dave0> nomagno: there's nothing wrong with having extra requirements, it just means you have a less portable program, which is perfectly fine
[18:03:37] <sokan> https://bpa.st/7Q3Q <--- in this example, max and min are pointing to the object which is the address of the the first element of the array a. When a[i] is larger than the previous one max (pointer) points to the address of the new array element. Same goes for *min. Right?
[18:04:07] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:04:08] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:04:08] *** Joins: wroathe (~wroathe@user/wroathe)
[18:04:18] <nomagno> dave0: Well maximizing portability is an explicit goal
[18:04:42] <nomagno> So yes, formally specifying non-C99-mandated features is a good idea
[18:07:20] <sham1> sokan: at a quick look that seems correct
[18:08:38] <sham1> nomagno: I wish more people cared about portability like this. Often people just assume that things will work without even documenting the assumptions
[18:08:47] *** Quits: dfghfgdh (~sdfgsdfg@user/sdfgsdfg) (Ping timeout: 256 seconds)
[18:09:48] *** Quits: Torr (~Torr@user/torr) ()
[18:09:55] *** Quits: constxd (~brad@142.134.38.68) (Ping timeout: 256 seconds)
[18:10:43] <kurahaupo> sham1: documenting "posix" takes only one word
[18:10:59] <sham1> And that is one word too many for some
[18:11:10] <sham1> And they don't subsequently add it
[18:11:14] *** Joins: Torr (~Torr@user/torr)
[18:12:03] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 256 seconds)
[18:12:13] <sham1> And of course, I am also lambasting myself here because I also haven't done that properly in many cases
[18:12:34] *** Quits: Mentor (~Ionut@92.86.217.127) (Quit: Leaving)
[18:13:27] *** Quits: acerbic (~acerbic@cs-xdata-50-86-52-59.cspire.com) (Read error: Connection reset by peer)
[18:14:30] *** Joins: Torr_ (~Torr@user/torr)
[18:15:04] <nomagno> sham1: My game is on track to being the first game ever reuploaded to suckless repos, maybe :P
[18:15:36] *** Quits: Torr_ (~Torr@user/torr) (Client Quit)
[18:15:38] *** Joins: mrig (~mrig@user/mrig)
[18:15:55] <wroathe> Who decides what goes into suckless repos?
[18:16:07] <wroathe> Who decides what doesn't suck, for that matter?
[18:16:08] <nomagno> No idea
[18:16:47] <nomagno> Everything sucks, my game just sucks less, hence I won't submit it to suckless but it would be a good fit, hence the joke
[18:18:29] *** Joins: bebyx (~Thunderbi@user/bebyx)
[18:19:58] *** Joins: nbits (~nbits@user/nbits)
[18:20:37] *** Quits: stonkey2 (~stonkey@user/stonkey) (Remote host closed the connection)
[18:20:56] <sham1> Yeah, not sure if being on Suckless would be an accolade worth pursuing. But getting nicer game stuff is always neat
[18:24:15] *** Joins: ChoHag_ (~mking@81.187.183.71)
[18:25:17] <EtherNet> talking about C books, this one really likes me: https://beej.us/guide/bgc/html/
[18:25:18] <candide> Title of EtherNet's link: Beej's Guide to C Programming
[18:25:32] <ChoHag_> How would you find out the size max_align_t would be on compilers which don't provide it?
[18:26:24] <sham1> You wouldn't, because they don't provide it
[18:26:31] <dave0> heh
[18:26:33] <ChoHag_> "would be"
[18:27:08] <dave0> ChoHag_: ive seen sizeof a union
[18:27:17] <dave0> don't know how reliable it is
[18:27:37] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[18:28:03] <dave0> ,cc union x { double a; int b; char *c; }; printf("%d ", (int)sizeof(x));
[18:28:04] <candide> dave0: error: 'x' undeclared
[18:28:10] <dave0> ,cc union x { double a; int b; char *c; }; printf("%d ", (int)sizeof(union x));
[18:28:13] <candide> dave0: 8
[18:28:20] <sham1> Why are you casting it to an int
[18:28:27] <sham1> There's no reason to
[18:28:27] <Learath2> mh, afaik max_align_t was standard since C11, do you really need to be concerned with this?
[18:28:42] <ChoHag_> Learath2: If I didn't, why would I ask the question?
[18:28:47] <dave0> but even that's wrong if your implementation uses xmm registers for memcpy (which freebsd does)
[18:28:54] <sham1> Could always be an XY question
[18:29:09] <sham1> Learath2: maybe ChoHag_ is targeting a platform that only has a C99 compiler
[18:29:12] <ChoHag_> Then that's my problem, I should come up with ebtter questions.
[18:29:12] <sham1> In which case, go fix that
[18:29:30] <sham1> dave0: and glibc
[18:29:42] <sham1> Well, glibc uses SSE, but yeah
[18:29:43] <dave0> ChoHag_: you could work it out exactly on your target and hard code it
[18:29:44] <ChoHag_> And there are some compilers in use which do not support C11.
[18:29:55] <dave0> sham1: oh right yeah it's one of those simd things
[18:30:18] <sham1> ,cc printf("%zu", alignof(max_align_t)); // Just ouf ot curiosity
[18:30:20] <candide> sham1: 16
[18:30:41] <sham1> Makes sense. SIMD does like 16 byte boundaries
[18:30:43] *** Joins: acerbic (~acerbic@cs-xdata-50-86-52-59.cspire.com)
[18:30:53] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 256 seconds)
[18:31:03] <sokan> *p = 0 is wrong, while i = 0 && p = &i is correct. Why? :S
[18:31:13] <Learath2> sham1: that's why I asked, if he is targeting such a platform okay, but if all his target platforms support C11 there is no need to be concerned
[18:31:22] <sokan> I don't get the *p = 0 part
[18:31:30] <ChoHag_> And what if I'm not concerned at all, just interested/
[18:31:33] <Learath2> a lot of people get carried away with trying to make things very portable :P
[18:31:41] *** Joins: ADHD (~xxx@user/ADHD)
[18:31:56] <dave0> c will already align things for you in a struct
[18:32:08] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Quit: Client closed)
[18:32:24] <sham1> According to the maximum required alignments of the contents, so you'd have to still find the type with the strictest alignment
[18:32:28] <ChoHag_> In fact I don't even need to align anything I was just poking around since I'll need to eventually.
[18:32:32] <sham1> ChoHag_: but yeah. TLDR, there's no way
[18:32:36] *** Joins: wovixo (~wovixo@128.104.205.49)
[18:32:48] <sham1> At least programmatically
[18:33:07] <ChoHag_> Right. There's always the build system.
[18:33:18] <sham1> If you need that info, you'd look at the build system or the ABI documents
[18:33:35] <Learath2> Anyway, the closest hack I know of is to indeed just put things into an union and take the max alignment for that
[18:33:46] <Learath2> s/for/thru/
[18:33:49] <NRK[m]> sokan: wdym `*p = 0` is wrong?
[18:33:56] <ChoHag_> Learath2: In fact I like to write code which is not necessarily portable, but is easy to make so.
[18:34:02] <NRK[m]> what's wrong about it?
[18:34:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:34:48] <Learath2> sokan: requesting more context :P
[18:34:53] <ChoHag_> So now I know that I should not depend on having max_align_t, or do so in a way that the code can be fooled into it with a -D or similar.
[18:35:19] <ChoHag_> ie. All the world is not openbsd on x86-64, that's just what I've got.
[18:35:25] *** Quits: malina (~malina@user/malina) (Ping timeout: 256 seconds)
[18:36:01] <Learath2> Actually, ChoHag_ how were you thinking of using max_align_t? There is no alignof or alignas before C11 anyway
[18:36:20] <Learath2> I guess you could always put it in a union with the type you actually want to align as a trick
[18:38:01] <ChoHag_> Basically in the type definitions semi-copy-pasta I had put '#define ALIGN_BYTES sizeof (max_align_t)' since at some point I'll need to return aligned pointers (ALIGN_BYTES is unused) then in a moment of downtime I started wondering about that symbol's availability.
[18:39:24] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[18:40:21] <Learath2> Hm, you should probably be doing alignof max_align_t anyway since I don't think it's size is guaranteed to be anything meaningful
[18:41:51] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:41:51] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:41:51] *** Joins: wroathe (~wroathe@user/wroathe)
[18:42:37] *** Quits: alch (~alch@151.34.209.145) (Ping timeout: 240 seconds)
[18:43:57] *** Joins: Macuser (~Macuser@2600:1003:b447:e8e:ecb6:a4e5:40a1:d1ff)
[18:44:50] *** Joins: alch (~alch@151.82.163.229)
[18:45:40] *** Joins: Torr (~Torr@user/torr)
[18:46:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:46:53] *** Joins: inlight (~inlight@157.35.64.91)
[18:46:53] *** Quits: inlight (~inlight@157.35.64.91) (Changing host)
[18:46:53] *** Joins: inlight (~inlight@user/inlight)
[18:52:24] <sokan> hmmm
[18:52:33] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[18:52:55] *** Joins: mrig (~mrig@user/mrig)
[18:53:41] <sokan> I'll ask something else instead. int a; int *p, *q; Why is p = *&q correct?
[18:53:45] <sokan> or rather legal
[18:54:38] <kurahaupo> sokan: it follows logically from the definitions of the two operators
[18:54:48] <caze> Because * and & cancel each other out.
[18:55:11] <NRK[m]> & is the `address of` operator
[18:55:37] <NRK[m]> and * dereferences the pointer
[18:55:48] <NRK[m]> so they're canceling each other out like caze said
[18:55:54] <kurahaupo> sokan: Let's put it another way: why should it be forbidden?
[18:56:04] <caze> It might make more sense if you think of & as the "pointer to" operator.
[18:56:30] <NRK[m]> ,cc int a = 5; printf("%d", (&(*(&b)))[0]);
[18:56:31] <candide> NRK[m]: error: 'b' undeclared
[18:56:35] <caze> When you write &q, that means, in english, "pointer to q".
[18:56:47] <NRK[m]> ,cc int a = 5; printf("%d", (&(*(&a)))[0]);
[18:56:49] <candide> NRK[m]: 5
[18:56:58] <sokan> p is a point to an integer. q is also a pointer to an integer. &q is a pointer to q which is a poitner to integer. I'm not sure what * does here
[18:57:07] *** Joins: Terlisimo (~Terlisimo@outofband.ozna.net)
[18:57:17] <NRK[m]> ,english (&(*(&a)))[0]
[18:57:19] <candide> NRK[m]: The 1st element of the expression (the address of (the dereference of (the address of `a`))).
[18:57:37] <caze> And the *x means, "The thing that x points to."
[18:57:43] <nic> sokan * gets the value that the address points to.
[18:57:47] <kurahaupo> sokan: *p gives you the object that p points to
[18:57:50] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:58:00] <caze> sokan: What does &q point to?
[18:58:04] <kurahaupo> nic: strictly, the object not just the value
[18:58:13] <nic> kurahaupo: right.
[18:58:31] <sokan> caze: to the interget that q points to.
[18:58:32] <kurahaupo> mumble L-value
[18:58:35] <nomagno> Is doing pointer arithmetic on function pointers different than on data pointers, as far as the standard is concerned?
[18:58:41] <caze> sokan: That is not correct.
[18:58:45] <sokan> T_T
[18:59:08] <caze> sokan: <caze> It might make more sense if you think of & as the "pointer to" operator. <caze> When you write &q, that means, in english, "pointer to q".
[18:59:09] <NRK[m]> nomagno: void and function pointers are treated differently
[18:59:28] <sokan> caze: so &q is the pointer to q.
[18:59:34] <caze> sokan: Yes.
[18:59:36] <kurahaupo> sokan: correct
[18:59:40] <sokan> so &q points q
[18:59:52] <NRK[m]> yes
[18:59:56] <caze> sokan: <caze> And the *x means, "The thing that x points to."
[19:00:09] <caze> sokan: And when you put * and & together, you get...
[19:00:14] <kurahaupo> sokan: and *(&q) is the object that the expression &q points to
[19:00:17] <NRK[m]> and the `*` accesses what the pointer points to.
[19:01:03] <sokan> *&q is "the thing that &q points to, and &q points to q". So *&q is q :P
[19:01:08] <caze> "The thing that (pointer to q) points to."
[19:01:27] <nomagno> Is casting to and from an array of char guaranteed not to alter the data?
[19:01:37] <sham1> Can you even do pointer arithmetic on pointers to functions
[19:01:55] <caze> Pointer arithmetic is not defined for function pointers.
[19:02:04] <caze> nomagno: Casting doesn't alter data period.
[19:02:11] <NRK[m]> on void pointers, it's UB afaik. not sure about fucntion.
[19:02:44] *** nic is now known as nicode
[19:03:07] <sokan> man... pointers are a complete mess until you get to understand them.
[19:03:37] <NRK[m]> actually since standard only defines pointer arithmetic on array object type, function pointer arithmetic should be UB as well.
[19:04:44] <fizzie> You can't cast to/from an array either.
[19:04:51] <fizzie> (Pointer to an array, sure.)
[19:05:25] <fizzie> C11 6.5.4p2: "-- the type name [in a cast expression] shall specify -- scalar type, and the operand shall have scalar type." Arrays are not scalar types.
[19:05:34] *** Quits: nbits (~nbits@user/nbits) (Quit: Leaving)
[19:06:02] <nomagno> NRK: Well if function non-pointers were a thing it would technically be defined
[19:06:24] *** Joins: hanzo (uid532183@user/hanzo)
[19:06:26] <nomagno> But it would destroy any hopes of that code working on Harvard arch machines
[19:06:32] <Learath2> I don't seem to get what trips up people when it comes to pointers, they are named pretty appropriately too
[19:07:04] <Learath2> A memory address isn't that different in concept from a normal physical map address either
[19:07:23] <NRK[m]> it's just the lack of grasp on how memory works imo.
[19:07:32] <ChoHag_> I think because they equate pointer arithmetic with integer arithmetic.
[19:07:47] <NRK[m]> pointers are quite self explanatory otherwise.
[19:08:04] <sham1> <caze> nomagno: Casting doesn't alter data period.
[19:08:05] <sham1> Yes it does
[19:08:15] <sham1> float a = 0.5; int b = (int) a;
[19:08:19] <nomagno> I didn't really understand pointers until I created a kind of shell script to generate animations of pointer arithmeric
[19:08:25] *** Joins: mov_eax (~mov_eax@user/mov-eax/x-5035058)
[19:08:28] <NRK[m]> the rules of pointer arithmetic also becomes quite self explanatory if you think in terms of memory
[19:08:35] <fizzie> "Function non-pointers" (aka, "functions") _are_ a thing, they just don't have a size. And them _having_ a size wouldn't automatically define pointer arithmetic on function poiters: the definition of `+` and `-` explicitly requires that (for the pointer-involving cases) "one operand shall be a pointer to a complete object type" (6.5.6p2).
[19:09:10] <sham1> What would a function having a size even mean, considering that different functions would have different sizes
[19:09:24] <caze> sham1: What data is that altering?
[19:09:29] <NRK[m]> kek
[19:09:33] <nomagno> Thought so
[19:09:35] <sham1> caze: 0.5 becomes 0
[19:09:49] <Learath2> Oh no, sham1 has been bamboozled
[19:09:57] <ChoHag_> Casting from a function pointer to void* then to anything other than that function pointer is illegal isn't it?
[19:09:59] <caze> ,cc float a = 0.5; int b = (int) a; printf("%f", a);
[19:10:02] <candide> caze: 0.500000
[19:10:07] <caze> sham1: It does not.
[19:10:17] <ChoHag_> Or undefined probably.
[19:10:22] <fizzie> ChoHag_: Casting from a function pointer to `void *` is already illegal, no matter what you do after that.
[19:10:27] <NRK[m]> nomagno: c99 has some weird rules about aliasing
[19:10:28] <sham1> ,cc float a= 0.5; int b = (int) a; printf("%f", b);
[19:10:29] <nomagno> sham1: a none functions pointer is the function declaration
[19:10:30] <candide> sham1: [warning: format '%f' expects argument of type 'double', but argument 2 has type 'iâ€‹nt' [-Wformat=]] 0.000000
[19:10:53] <sokan> https://bpa.st/DN6Q <-- why don't I get any printed number?
[19:11:07] <ChoHag_> Sorry old school. s/void*/intptr_t/
[19:11:25] <sham1> caze: unless you meant that the original variable doesn't get changed in which case duh, but also your phrasing was ambiguous
[19:11:32] <Learath2> sokan: that 3rd argument looks useless, why are you passing it?
[19:11:39] <caze> sham1: Maybe you didn't see the question I was answering?
[19:11:42] <fizzie> ChoHag_: Casting from a function pointer to `intptr_t` gives an implementation-defined result, and casting it back to the function pointer is not guaranteed to give back the original pointer.
[19:11:51] <sokan> Learath2: to be able to print a number
[19:11:55] <ChoHag_> Not even within the same implementation?
[19:12:01] <fizzie> sokan: Because %ls is not a reasonable format for `int *`.
[19:12:15] <ChoHag_> Otherwise what would be the point?
[19:12:29] <Learath2> You are also not initializing your i and j to anything, so your code as is is just swapping garbage around
[19:12:38] <fizzie> ChoHag_: Not even within the same implementation. The special property of `intptr_t` is only for `void *` values and doesn't extend to function pointers.
[19:12:40] <NRK[m]> sokan: i and j are not initialized
[19:12:47] <nomagno> Learath2: You can't swap the values of two memory cells through assignment without a third cell
[19:12:53] <nomagno> You can use XOR swapping
[19:12:54] <caze> %ls lol
[19:13:04] <nomagno> In which case the third argument would not be needed
[19:13:16] <fizzie> The chapter (C11 7.20.1.4) is even called "integer types capable of holding *object* pointers", emphasis added.
[19:13:23] <Learath2> nomagno: Well why pass the 3rd cell? It should just be a local variable in the scope of swap
[19:13:29] <caze> sokan: Why did you choose 5 for the third argument?
[19:13:47] *** Joins: constxd (~brad@142.134.38.68)
[19:13:57] <nomagno> Ah, yeah it's actually weir
[19:13:59] <nomagno> https://en.wikipedia.org/wiki/XOR_swap_algorithm
[19:14:03] <fizzie> (Full quote, 7.20.1.4p1: "The following type designates a signed integer type with the property that any valid pointer to `void` can be converted to this type, then converted back to pointer to `void`, and the result will compare equal to the original pointer: `intptr_t`.")
[19:14:07] *** Joins: malina (~malina@user/malina)
[19:14:08] <nomagno> I'd use this ^
[19:14:19] <NRK[m]> xor swap is a meme.
[19:14:22] <sokan> I did it! Now I need to figure out what I did exactly lol
[19:14:29] <NRK[m]> i like it though :p
[19:14:30] <sokan> caze: it was completely useless.
[19:14:37] <sham1> Is there actually a point to intptr_t? When is it needed to be signed
[19:15:03] <Learath2> Also doesn't need to be XOR either, you can do + - too
[19:15:05] <caze> When you need to be able to have negative values.
[19:15:08] <sokan> https://bpa.st/53KA <--- updated
[19:15:26] <caze> As the result of e.g., subtraction.
[19:15:38] <NRK[m]> Learath2: + - can overflow
[19:15:38] <Learath2> sokan: looks good now, 1000% improvement :D
[19:16:01] *** Joins: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com)
[19:16:05] <sokan> hehe. My question is now is *p = num is the same thing as num = *p
[19:16:13] <Learath2> NRK[m]:heh, hadn't thought of it
[19:16:18] <sham1> caze: but surely ptrdiff_t is the more natural type for subtraction between pointers
[19:16:33] *** Joins: hiovoltage (~hiovoltag@176.88.83.200)
[19:16:36] <Learath2> sokan: it most definitely is not the same thing
[19:16:41] <sokan> and the answer is no. But why
[19:16:50] <caze> sham1: But you're not subtracting pointers, you're subtrating integers.
[19:16:58] <Learath2> sokan: Why would it be?
[19:17:16] <fizzie> sham1: `intptr_t` (and `uintptr_t`) are (optional) integer types for holding (converted) _pointers_, not the result of pointer subtractin.
[19:17:26] <sham1> I know
[19:17:32] <sham1> That's why I'm asking about the subtraction
[19:17:42] <Learath2> First one is "assign the value of num to the object pointed to by p", second one is "assign the value of the object pointed to by p to num", it's literally opposite :D
[19:17:46] <ChoHag_> object pointers, it seems.
[19:18:04] <sokan> Learath2: *p = num means that p points to num. num = *p: the value of num is assign to what p points to. ISn't that the same? :S
[19:18:06] <nomagno> NRK: I mean, it shouldn't be really slower than temp storage swap, it trades maybe 1-3 cycles on a bad CPU for one byte of space
[19:18:08] <sham1> When you have two converted pointers in objects of type uintptr_t, their difference would naturally fall into ptrdiff_t
[19:18:15] *** Joins: magla (~gelignite@55d4d852.access.ecotel.net)
[19:18:23] <sokan> Learath2: I'm so confused today with all these things... T_T
[19:18:24] <sham1> It's the difference between the two converted pointers
[19:18:40] <nomagno> :P
[19:18:41] <nomagno> Think of all the 16-byte calculators out there!
[19:18:44] <caze> sham1: That difference would be different than the difference between pointers.
[19:18:51] <fizzie> The result of subtracting two `uintptr_t` objects need not have _anything_ to do with the result of subtracting the represented pointers.
[19:18:52] <Learath2> sokan: *p = num  doesn't mean p points to num, that's where you are going wrong
[19:18:54] <sokan> Learath2: sorry, I didn't see what you types.
[19:19:00] <Learath2> That's be p = &num
[19:19:04] <Learath2> That'd be*
[19:19:08] <sham1> I suppose
[19:19:38] <fizzie> sham1: Anyway, one borderline reasonable usecase for (u)intptr_t is when you have just one parameter, and want to leave it to the caller to decide whether they want to use that for an integer or a pointer. Having `intptr_t` means that field can be signed, if you think it's more likely they'll want a signed integer type when they want it to be an integer.
[19:20:04] <fizzie> Think `void *userdata` except with the ability to pass integer values without allocating extra objects for them.
[19:20:12] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[19:20:17] <sham1> Hmm, that's an interesting usecase
[19:20:23] <sokan> Learath2: OOOH! Now I understand.
[19:20:54] <sham1> Eh, fair enough
[19:21:06] <sokan> in *p = num I must have an assigned valued on num in the first place.
[19:21:16] <sokan> s/valued/value
[19:21:33] <fizzie> Although personally I think a union type is nicer if you do want to offer that sort of thing. `union { intmax_t num; uintmax_t word; double f; void *ptr; void (*func)(void); }` covers most of the bases, though not the most esoteric things like `long double` or complex types.
[19:21:47] <fizzie> (And most APIs just go with the `void *` and assume pointers are good enough.)
[19:22:02] <fizzie> (...and then people start casting arbitrary integer types to pointers.)
[19:22:17] <Learath2> Um, I'm a bit scared of the conclusion you've come to. It's not really the fact that num must have an assigned value that is the difference there or the lesson you should be getting to :D
[19:24:14] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[19:25:42] *** Joins: alioui (~medeva293@197.244.194.23)
[19:26:05] <kurahaupo> sokan: Apart from the missing final newline in the output from your program, there doesn't appear to be anything wrong with it.
[19:26:25] *** Quits: mov_eax (~mov_eax@user/mov-eax/x-5035058) (Ping timeout: 256 seconds)
[19:27:04] <sokan> Learath2: After I write this other exersise I really need to take a break.
[19:27:07] <sokan> XD
[19:28:01] *** Joins: bolovanos__ (~bolovanos@user/bolovanos)
[19:29:54] *** Joins: mrig (~mrig@user/mrig)
[19:33:36] *** Joins: de-facto (~de-facto@user/de-facto)
[19:33:37] <ChoHag_> If you use unions people start type punning.
[19:33:40] <ChoHag_> There is no way to win.
[19:34:01] *** Joins: rsjw (~quassel@user/rsjw)
[19:35:59] <nomagno> A type system needs to recognize its limits, and step aside when the big pro programmers with sunglasses come along
[19:35:59] <nomagno> - Sun Tzu, The Art of Unix Programming
[19:36:55] <nomagno> Oh sorry wrong author :D
[19:37:46] *** Joins: FluffyMask (~masque@user/fluffymask)
[19:38:55] *** Joins: Deepspeed (~yep@164.sub-174-215-134.myvzw.com)
[19:40:27] *** Quits: alioui (~medeva293@197.244.194.23) (Read error: Connection reset by peer)
[19:42:09] *** Quits: constxd (~brad@142.134.38.68) (Ping timeout: 256 seconds)
[19:44:19] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[19:44:46] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[19:45:02] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[19:50:05] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[19:50:31] *** Joins: constxd (~brad@142.134.38.68)
[19:54:50] *** Quits: sokan (~sokan@athedsl-4548509.home.otenet.gr) (Quit: Reality.is.a.lie)
[19:55:02] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Ping timeout: 240 seconds)
[19:55:36] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Remote host closed the connection)
[19:57:45] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[19:58:02] *** crm is now known as orthoplex64
[19:58:09] *** Joins: xa0s (~xa0s@mab.sdf.org)
[19:59:20] *** Joins: pulse (~pulse@user/pulse)
[20:00:09] *** Joins: meator (~meator@user/meator)
[20:00:13] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[20:01:23] <NRK[m]> this but unironically
[20:04:32] *** Quits: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8) (Ping timeout: 240 seconds)
[20:05:03] *** Quits: inomoz (~inomoz@176.59.118.12) (Read error: Connection reset by peer)
[20:06:28] *** Joins: WAR10CK (~WAR10CK@14.223.183.246)
[20:07:20] *** Joins: davidlowryduda (~davidlowr@2601:197:600:1210:31ff:a804:81e3:5196)
[20:08:06] *** davidlowryduda is now known as dld
[20:08:47] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 256 seconds)
[20:09:20] *** Quits: Macuser (~Macuser@2600:1003:b447:e8e:ecb6:a4e5:40a1:d1ff) (Quit: Textual IRC Client: www.textualapp.com)
[20:11:35] *** Joins: inomoz (~inomoz@176.59.121.54)
[20:12:37] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 240 seconds)
[20:13:09] *** Joins: inlight (~inlight@157.42.219.134)
[20:13:10] *** Quits: inlight (~inlight@157.42.219.134) (Changing host)
[20:13:10] *** Joins: inlight (~inlight@user/inlight)
[20:14:45] *** Joins: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8)
[20:15:29] *** Joins: ckdCreations (~ckdCreati@147.55.130.38)
[20:15:37] *** Quits: constxd (~brad@142.134.38.68) (Ping timeout: 240 seconds)
[20:15:51] *** Quits: neuro_sys_ (~user@84.20.147.33) (Remote host closed the connection)
[20:16:22] *** Quits: nostar (~nostar@107.174.17.132) (Quit: Leaving)
[20:17:00] *** Joins: nostar (~nostar@68.51.221.108)
[20:17:47] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[20:19:42] *** Joins: DepthDeluxe (~DepthDelu@2601:647:4700:1e3c:f8cc:9720:6794:bfc7)
[20:19:59] *** Joins: zer0bitz (~zer0bitz@196.244.192.60)
[20:20:37] *** Joins: spidermonkey54 (uid527699@id-527699.uxbridge.irccloud.com)
[20:21:30] *** Joins: reset (~reset@user/reset)
[20:23:09] *** Quits: Deepspeed (~yep@164.sub-174-215-134.myvzw.com) (Quit: Leaving)
[20:23:10] <spidermonkey54> This page says "A functionâ€™s name can also be used to get functionsâ€™ address.": https://www.geeksforgeeks.org/function-pointer-in-c/
[20:23:22] <spidermonkey54> so can we say function names are pointers?
[20:23:58] <sham1> You can indeed say so, yes
[20:24:35] <fizzie> Though it'd be a _little_ like saying names that denote arrays "are pointers". It's the same kind of conversion that's happening.
[20:24:59] <sham1> For example, say there is a function `void foo(int)`. You can now do `void (*bar)(int) = foo;`, as in, you don't need to take the address of the function, it happens automagically. And another thing is that you can do something like this, `(*foo)(1)
[20:24:59] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzzâ€¦)
[20:25:02] <sham1> `
[20:25:16] <fizzie> They're even described in consecutive paragraphs of the standard (C11 6.3.2.1p3 and p4).
[20:25:23] <sham1> Or even `(**********foo)(1);`
[20:25:28] <caze> *****************************************************bar(1);
[20:25:42] <spidermonkey54> makes sense. Can we also say a functions name is also a `function pointer`? or that's going too far
[20:25:47] *** Quits: hiovoltage (~hiovoltag@176.88.83.200) (Quit: Client closed)
[20:26:24] <fizzie> "A /function designator/ is an expression that has function type. Except when it is the operand of the `sizeof` operator, -- or the unary `&` operator, a function designator with type 'function returning /type/' is converted to an expression that has type 'pointer to function returning /type/'."
[20:26:30] <sham1> If the function name is used in a place that expects a function pointer, you will get the address of the function implicitly
[20:27:03] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 256 seconds)
[20:27:10] <spidermonkey54> so we can say a functions name is a pointer and more specially it's function pointer?
[20:27:40] <caze> Sometimes.
[20:27:40] <fizzie> I wouldn't say that it _is_ one, it just gets converted to one. But if you want to take a shortcut...
[20:28:48] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[20:28:53] <spidermonkey54> going back to your array example, `int a[] = {1,2,3};` , a is a pointer to the arrays first element. but we don't really say `a` is a pointer, it just get deduced to a pointer, correct?
[20:29:10] <spidermonkey54> or can it lso be acalled a pointer
[20:29:22] <fizzie> Well, depending on who you talk to. I'm sure there's people who say it "is" a pointer.
[20:29:30] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[20:30:21] <fizzie> It's just... slightly inaccurate. You can't assign to it, for example. And it's not a pointer when it's used as the operand of the `&` operator.
[20:30:42] <spidermonkey54> thanks for clarifying.
[20:30:48] *** Quits: malina (~malina@user/malina) (Remote host closed the connection)
[20:31:16] *** Joins: Torr (~Torr@user/torr)
[20:31:22] *** Joins: seninha (~seninha@user/seninha)
[20:31:48] *** Joins: stonkey (~stonkey@user/stonkey)
[20:31:55] <sham1> Also `a` of course has a different size than `&a[0]` would
[20:32:30] *** Joins: malina (~malina@user/malina)
[20:33:00] <spidermonkey54> ture
[20:33:04] <spidermonkey54> true *
[20:33:26] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[20:34:24] *** Joins: moose (~moose@user/moose)
[20:34:32] *** Quits: fe23 (~fe23@2409:8a34:464:4990:ac00:ae21:4f94:304c) (Quit: fe23)
[20:34:57] <fizzie> And for the `void foo(int);` case, `sizeof foo` is illegal (well, except for GNU C, where it's just 1...) while `sizeof &foo` is the same as `sizeof (void (*)(int))`.
[20:35:33] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 256 seconds)
[20:35:54] <fizzie> ,cc void foo(int x) {} printf("%zu %zu %zu", sizeof foo, sizeof &foo, sizeof (void (*)(int)));
[20:35:57] <candide> fizzie: [warning: invalid application of 'sizeof' to a function type [-Wpointer-arith]] 1 8 8
[20:36:07] <caze> The concept is that the object itself has its own type, but when the object's identifier is used in an expression, the type as it appears in the expression may be different from that of the object itself.
[20:36:28] <caze> That doesn't mean that the object's type has changed.
[20:37:24] <caze> So if you're asking "What is the type of a?", really the question needs more context. Are you asking about the type of the object a, or do you have an expression containing just `a`, and you are asking about the type of that expression?
[20:37:57] *** Quits: malina (~malina@user/malina) (Ping timeout: 240 seconds)
[20:38:27] <caze> I mean, if you wrote, "What is the type of a + 0?" that would not be ambiguous at all.
[20:39:31] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Ping timeout: 256 seconds)
[20:40:17] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 240 seconds)
[20:40:39] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 256 seconds)
[20:41:01] *** Joins: inlight (~inlight@157.42.219.134)
[20:41:01] *** Quits: inlight (~inlight@157.42.219.134) (Changing host)
[20:41:01] *** Joins: inlight (~inlight@user/inlight)
[20:42:22] *** Joins: mrig (~mrig@user/mrig)
[20:42:23] *** Joins: Akiva (~Akiva@user/Akiva)
[20:46:00] <NRK[m]> can someone explain how this works? https://github.com/bminor/glibc/blob/a51faeee6ae68da63e65eb0a1eb6c9ec2ce2148b/string/strlen.c#L75
[20:46:19] <NRK[m]> how do they know it's okay to read 4 bytes?
[20:46:50] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[20:47:18] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[20:49:27] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[20:52:42] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:53:12] *** Joins: opsecfail (~opsecfail@user/opsecfail)
[20:53:29] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[20:56:24] *** Joins: mahmutov (~mahmutov@5.176.45.237)
[20:56:32] <fizzie> By making an implementation-specific assumption that the boundaries between readable and non-readable memory are always aligned by more than 4 bytes, and ensuring (lines 36-42) that the pointer to read from is aligned by at least as much too.
[20:57:08] *** Joins: agonhajdari (~textual@user/agonhajdari)
[20:57:20] <earnest> NRK[m]: if (((longword - lomagic) & ~longword & himagic) != 0)
[20:58:45] <sham1> And that 4 byte boundary assumption would indeed be correct because most if not all memory protection systems nowadays work with at least 4KiB granuality pages
[20:58:53] <fizzie> That part, on the other hand, is just a clever little bit trick to test "are any of the four bytes of `longword` zero", and doesn't really relate to why "it's okay to read 4 bytes".
[20:58:59] <earnest> The question is "how does it know"
[20:59:02] <earnest> That check is how it knows
[20:59:35] <earnest> It only needs to return to byte-by-byte if a nul is present
[20:59:50] <fizzie> Well, no, that check is how it knows whether there was a '\0' byte present in the 4 bytes it read. It doesn't explain how it knows it's okay to read 4 bytes even though that may read past the end of the '\0'.
[20:59:55] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Ping timeout: 256 seconds)
[21:00:34] *** Joins: opac (~weijunli@91.80.27.116)
[21:01:00] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[21:01:12] <earnest> It doesn't read past the end of \0
[21:01:15] <fizzie> It does.
[21:01:22] <earnest> Where?
[21:01:32] <fizzie> When it reads the `longword`, and the '\0' is not the last byte of it.
[21:01:39] <fizzie> It can read up to 3 bytes past the '\0'.
[21:01:54] <fizzie> That's the part that needs the platform-specific assumption that it's safe when aligned.
[21:02:31] <earnest> I don't see where it reads past this \0 as it checks every byte in the result of the if
[21:02:49] <fizzie> It already did read past the '\0' when it did `longword = *longword_ptr++` on line 75.
[21:02:57] <fizzie> The whole point of the test is to check all bytes of the word.
[21:03:02] <sham1> If the '\0' is on the first byte of the longword, it will read 3 bytes ahead of it
[21:03:08] <earnest> fizzie: I see what you mean then
[21:03:09] <sham1> Err, past it
[21:03:57] *** Quits: meator (~meator@user/meator) (Ping timeout: 240 seconds)
[21:04:27] *** Quits: heftig_ (heftig@archlinux/developer/heftig) (Quit: heftig_)
[21:04:58] <earnest> fizzie: The thing is, even though it doesn't matter if there are junk values, how does this relate to UB and uninitialised variables?
[21:05:30] <earnest> (Or does it at all?)
[21:07:05] *** Joins: heftig (heftig@archlinux/developer/heftig)
[21:07:16] <sham1> Of course, IMO clarity beats performance so... `size_t strlen(const char *s) { const char *p = s; while (*p != '\0') { p++; } return p - s; }
[21:07:17] <sham1> `
[21:07:32] <sham1> Clever tricks vs totally standards compliant. Hmm
[21:08:16] <earnest> sham1: That last is more or less what K&R does
[21:08:52] <NRK[m]> earnest: i don't think that protects against buffer overrun.
[21:09:03] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cd30:5759:3f90:149b)
[21:09:27] <fizzie> Well, it also makes more unstated assumptions, like that an `unsigned long int` has no padding bits, and has a representation where every 8 consecutive bits of the value represent a single `char` of the object representation.
[21:09:46] <NRK[m]> anyways, i found my answer
[21:09:49] <fizzie> (Though in an arbitrary order.)
[21:09:50] <NRK[m]> it doesn't know
[21:10:14] <sham1> It doesn't know, it just assumes
[21:10:25] <earnest> Depends on how much concern you place on longword having uninitialised data
[21:10:29] <NRK[m]> running that code with -fsanitize=address detects the overrun
[21:10:30] <sham1> And it's fine because GNU controls glibc and the kind of environment it is in
[21:11:15] *** Quits: opac (~weijunli@91.80.27.116) (Ping timeout: 256 seconds)
[21:11:41] *** Joins: cart_man (~rynot@host-78-144-125-216.as13285.net)
[21:11:48] <earnest> It's slightly surprising to me that strlen would be the target for such optimisation (x86 has a strlen instruction too).  Anyone dealing with strings needing high performance is probably not going to use nul termination
[21:12:08] <NRK[m]> i spent a good couple mins trying to figure what weird magic they're doing to avoid buffer overrun!
[21:12:13] *** Quits: bolovanos__ (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[21:12:19] <sham1> GNU likes to overcomplicate. But yeah, you'd often just want to store the length separately
[21:12:22] <fizzie> There's of course an x86-specific version in glibc as well.
[21:12:24] *** Joins: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com)
[21:12:44] <sham1> Yeah, that one uses SSE
[21:12:51] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[21:13:44] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[21:13:50] <fizzie> And as far as places go, the C library does seem like a relatively good place for clever tricks for speed. As long as they provide the promised semantics, they're out of sight of the code people generally need to read.
[21:14:01] <earnest> For sure
[21:14:13] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[21:14:15] <sham1> It's just a darn shame if you ever have to read the codde
[21:14:19] *** Quits: Matt|home (~matt@adsl-74-233-58-81.mia.bellsouth.net) (Quit: Leaving)
[21:14:20] <earnest> Well idk
[21:14:29] <earnest> musl does some nice things, it's not that terrible
[21:15:06] <earnest> The question is more about sacrificing standards for marginal gains in a domain where it may not make a lot of sense, to me
[21:15:29] <sham1> While I'm not the biggest fan of ddevfault: https://drewdevault.com/2020/09/25/A-story-of-two-libcs.html
[21:15:35] <sham1> That's a relevant post
[21:16:00] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[21:16:27] <NRK[m]> that was a disappointing ending. was expecting to learn some secret memory tactic.
[21:16:54] *** Quits: LucaTM (~LucaTM@user/lucatm) (Read error: Connection reset by peer)
[21:17:01] <sham1> Nope. Just some good old abuse of undefined behaviour for speed
[21:17:16] <earnest> I recall it being a problem with this assumption in an old project someone was working on but forget the details
[21:17:17] *** Quits: DepthDeluxe (~DepthDelu@2601:647:4700:1e3c:f8cc:9720:6794:bfc7) (Ping timeout: 240 seconds)
[21:20:55] *** Quits: beastie (~lcu@user/thebeastie) (Ping timeout: 268 seconds)
[21:23:14] *** Joins: beastie (~lcu@user/thebeastie)
[21:23:18] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[21:25:59] <pragma-> it's about drive! it's about power!
[21:26:02] *** Joins: Narrat (~omnius@p200300df5f0aab1406ea56fffe2e7cdc.dip0.t-ipconnect.de)
[21:27:30] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:27:30] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:27:31] *** Joins: wroathe (~wroathe@user/wroathe)
[21:28:57] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Ping timeout: 240 seconds)
[21:29:01] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[21:33:03] *** Joins: weijunli (~weijunli@mob-31-158-68-82.net.vodafone.it)
[21:33:21] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[21:35:16] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[21:35:37] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[21:41:32] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:41:32] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:41:32] *** Joins: wroathe (~wroathe@user/wroathe)
[21:42:08] *** Joins: Brainium (~brainium@user/brainium)
[21:42:52] *** Joins: Torr (~Torr@user/torr)
[21:44:46] *** Joins: treble (~treble@user/treble)
[21:45:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[21:46:28] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cd30:5759:3f90:149b) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[21:46:40] *** Joins: rgrinberg (~textual@2806:101e:7:33a5:693b:2444:ee3f:bdac)
[21:46:54] *** Quits: freep (~freepppp@62.1.245.43.dsl.dyn.forthnet.gr) (Quit: Leaving)
[21:48:06] *** Quits: bebyx (~Thunderbi@user/bebyx) (Remote host closed the connection)
[21:48:38] *** Joins: mrig (~mrig@user/mrig)
[21:49:22] *** Joins: DepthDeluxe (~DepthDelu@c-24-4-6-248.hsd1.ca.comcast.net)
[21:54:12] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cd30:5759:3f90:149b)
[21:55:37] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[21:55:59] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Quit: alefir)
[21:58:46] *** Quits: pi3 (~pi@154.6.152.74) (Quit: WeeChat 3.3)
[21:58:58] *** Joins: johnjaye (~pi@154.6.152.74)
[21:59:15] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[22:00:02] *** Joins: meator (~meator@user/meator)
[22:01:59] *** Quits: rgrinberg (~textual@2806:101e:7:33a5:693b:2444:ee3f:bdac) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[22:03:05] *** Joins: rgrinberg (~textual@2806:101e:7:33a5:693b:2444:ee3f:bdac)
[22:06:22] *** Quits: Terlisimo (~Terlisimo@outofband.ozna.net) (Quit: Connection reset by beer)
[22:08:02] *** Quits: mad_enz (~mad_enz@lnsm3-torontoxn-142-116-106-108.internet.virginmobile.ca) (Ping timeout: 240 seconds)
[22:12:45] *** Joins: vysn (~vysn@user/vysn)
[22:14:13] *** Joins: freep (~freepppp@62.1.245.43.dsl.dyn.forthnet.gr)
[22:15:54] *** Joins: Terlisimo (~Terlisimo@outofband.ozna.net)
[22:16:43] *** Joins: kuber (~kuber@97-126-25-4.tukw.qwest.net)
[22:18:23] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[22:18:23] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[22:18:23] *** Joins: wroathe (~wroathe@user/wroathe)
[22:20:19] *** Joins: masterbuilder (~user@user/masterbuilder)
[22:21:50] *** Joins: Akuli (~Akuli@213.216.210.130)
[22:23:45] *** Joins: Viewday111 (~Viewday@user/viewday)
[22:24:57] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Ping timeout: 240 seconds)
[22:25:20] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[22:25:20] *** Viewday111 is now known as Viewday11
[22:26:03] *** Quits: meator (~meator@user/meator) (Ping timeout: 256 seconds)
[22:27:09] *** Quits: rgrinberg (~textual@2806:101e:7:33a5:693b:2444:ee3f:bdac) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[22:27:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[22:27:58] *** Joins: dmgk_ (~dmgk@user/dmgk)
[22:33:07] *** Joins: u1_ (~u1@95.54.110.156)
[22:33:18] *** Joins: meator (~meator@user/meator)
[22:33:18] <u1_>  I got this error 127, it didn't happen last time I installed netbeans. https://pastebin.com/SLuvcx8B
[22:34:25] *** Quits: dmgk_ (~dmgk@user/dmgk) (Ping timeout: 256 seconds)
[22:35:39] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[22:35:39] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[22:35:39] *** Joins: wroathe (~wroathe@user/wroathe)
[22:36:37] *** Quits: DepthDeluxe (~DepthDelu@c-24-4-6-248.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[22:37:29] *** Joins: dmgk_ (~dmgk@user/dmgk)
[22:38:10] *** Quits: dmgk (~dmgk@user/dmgk) (Quit: ZNC - https://znc.in)
[22:38:10] *** dmgk_ is now known as dmgk
[22:39:17] *** Quits: dmgk (~dmgk@user/dmgk) (Client Quit)
[22:39:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[22:40:05] *** Joins: dmgk (~dmgk@user/dmgk)
[22:41:51] *** Joins: LucaTM (~LucaTM@user/lucatm)
[22:41:57] *** Quits: alch (~alch@151.82.163.229) (Ping timeout: 240 seconds)
[22:42:54] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[22:43:49] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[22:44:14] *** Joins: alch (~alch@pa-18-186-216.service.infuturo.it)
[22:44:20] *** Joins: rgrinberg (~textual@187.223.75.25)
[22:45:05] *** Quits: rgrinberg (~textual@187.223.75.25) (Client Quit)
[22:45:08] *** Quits: Haxxa (~Haxxa@202-144-174-197.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:46:02] *** Joins: Haxxa (~Haxxa@202-144-174-197.ip4.superloop.com)
[22:46:34] *** Joins: craekz (~craekz@user/craekz)
[22:47:25] *** Joins: slact[m] (~slact@2001:470:69fc:105::1:5ee3)
[22:48:11] *** Quits: ckdCreations (~ckdCreati@147.55.130.38) (Read error: Connection reset by peer)
[22:50:39] *** Joins: ckdCreations (~ckdCreati@147.55.130.38)
[22:56:32] *** Quits: opsecfail (~opsecfail@user/opsecfail) (Remote host closed the connection)
[22:57:17] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[22:57:38] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[22:58:19] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[22:58:52] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[22:59:54] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[23:00:13] *** Quits: ckdCreations (~ckdCreati@147.55.130.38) (Read error: Connection reset by peer)
[23:00:36] *** Joins: ckdCreations (~ckdCreati@2607:fb90:8342:dbc7:3c0c:7f29:54c7:3625)
[23:00:37] *** Quits: varaindemian (uid73404@id-73404.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[23:01:17] *** Joins: etchi (~etchi@195.198.128.15)
[23:02:42] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[23:08:57] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cd30:5759:3f90:149b) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[23:09:19] *** Quits: Darkcoal (~user@167.86.150.114) (Quit: Darkcoal)
[23:11:32] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cd30:5759:3f90:149b)
[23:13:23] *** Joins: malina (~malina@user/malina)
[23:16:44] *** Joins: mad_enz (~mad_enz@lnsm3-torontoxn-142-116-106-108.internet.virginmobile.ca)
[23:21:50] *** Joins: john99 (~john99@199.246.103.34.bc.googleusercontent.com)
[23:23:56] *** Joins: strajder (~strajder@user/strajder)
[23:24:57] *** Quits: ckdCreations (~ckdCreati@2607:fb90:8342:dbc7:3c0c:7f29:54c7:3625) (Ping timeout: 240 seconds)
[23:25:24] *** Joins: ckdCreations (~ckdCreati@147.55.133.140)
[23:25:49] *** Joins: Techcable (~Techcable@168.235.93.147)
[23:34:58] *** Parts: _mikey (~mikey@user/mikey/x-4335048) (WeeChat 3.4)
[23:36:46] *** Quits: Kit (~u0_a391@cpe-76-190-178-139.neo.res.rr.com) (Ping timeout: 260 seconds)
[23:37:09] *** Joins: varaindemian (uid73404@id-73404.ilkley.irccloud.com)
[23:37:15] *** Joins: Kit (~u0_a391@2603-6010-a141-6fa3-b8ac-26e7-b3fc-05ab.res6.spectrum.com)
[23:37:32] *** Quits: varaindemian (uid73404@id-73404.ilkley.irccloud.com) (Client Quit)
[23:37:47] *** Joins: varaindemian (uid73404@id-73404.ilkley.irccloud.com)
[23:37:57] *** Joins: bolovanos__ (~bolovanos@user/bolovanos)
[23:41:06] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[23:41:58] *** dexter0_ is now known as dexter0
[23:42:01] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[23:44:51] *** Joins: nbits (~nbits@user/nbits)
[23:46:55] <Akuli> how should i make a hash function that takes in two integers that are both divisibile by 8?
[23:47:28] <Akuli> i tried (a/8)^(b/8) which gave a really bad distribution in my hash table, now i have (a/8*17)^(b/8*27) which seems to be a little bit better
[23:47:46] <Akuli> (my hash table size is always a power of 2)
[23:48:04] *** Quits: nbits (~nbits@user/nbits) (Client Quit)
[23:51:36] *** Joins: carrot98[m] (~carrot98m@2001:470:69fc:105::1:5fcc)
[23:58:27] *** MrChristmas is now known as MrC
[23:59:01] *** Quits: YellowSuB (~YellowSuB@user/yellowsub) (Quit: WeeChat 3.3)
[23:59:57] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
