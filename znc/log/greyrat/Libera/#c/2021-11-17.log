[00:00:07] <apotheon> Oh, right, ad-hoc.
[00:00:14] <apotheon> I'm paraphrasing from memory.
[00:01:02] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[00:01:02] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[00:01:02] *** Joins: wroathe (~wroathe@user/wroathe)
[00:01:26] <nomagno> You can actually replace the C or the Lisp with any language
[00:01:29] *** Joins: AsenMx (~AsenMx@user/asenmx)
[00:01:38] <nomagno> Which makes it even better
[00:01:53] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 250 seconds)
[00:01:57] <apotheon> partial implementation of a Turing machine
[00:02:38] <apotheon> XML is essentially a very inconvenient precursor to Clojure, apparently.
[00:02:40] <nomagno> Any physical implementation of a Turing machine is partial though
[00:03:01] <apotheon> . . . because of the infinite-length tape?
[00:03:11] <nomagno> apotheon: yes
[00:03:18] <apotheon> Yeah, that'd do it.
[00:03:23] <sham1> Having a stack helps
[00:03:37] <sham1> Stack and random-access memory
[00:03:38] *** Quits: inomoz (~inomoz@176.59.125.26) (Quit: WeeChat 3.3)
[00:03:52] *** Quits: Masklin_Gurder (~joel@213-67-8-136-no206.tbcn.telia.com) (Quit: Konversation terminated!)
[00:04:03] <nomagno> Turing-completeness assumes you suddenly connected a pocket dimension to a PCIE slot on your motherboard
[00:04:15] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c0ad:80c4:dd74:5cc0)
[00:04:33] <edk> i think a physical implementation of a turing machine is accurate as long as it never runs out of tape
[00:04:34] <apotheon> nomagno: Actually, you could implement it as using a literal stack, and it could be infinite in principle.
[00:04:38] *** Quits: IUSR (sid348938@hampstead.irccloud.com) (Ping timeout: 268 seconds)
[00:04:54] <edk> you could realise it by just making the turing machine run very slowly, and promising to fetch it more tape every time it gets near the end
[00:05:04] <nomagno> apotheon: Well no, because if you get an instruction at the end of the tape to go back to the beggining, you're fucked
[00:05:10] <sham1> Of course one of the things to keep in mind is that at Turing's day, most computers were usually ladies in a room, calculating
[00:05:20] *** Quits: Satin (uid193953@ilkley.irccloud.com) (Ping timeout: 256 seconds)
[00:05:23] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c0ad:80c4:dd74:5cc0) (Remote host closed the connection)
[00:05:47] <apotheon> nomagno: Why are you fucked?
[00:05:48] <pragma-> Just loop a section of tape together. Bam.
[00:05:49] *** Joins: Satin (uid193953@ilkley.irccloud.com)
[00:05:51] *** Joins: AudioHelpPlease (~AudioHelp@2a0a-a546-d697-0-b9a4-1ba6-ef48-8bfa.ipv6dyn.netcologne.de)
[00:05:59] *** Joins: IUSR (sid348938@hampstead.irccloud.com)
[00:06:12] <apotheon> Your stack could be arranged horizontally.
[00:06:15] <nomagno> apotheon: Isn't the whole point of a stack that it automatically reuses memory?
[00:06:18] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 265 seconds)
[00:06:29] <apotheon> nomagno: I said a "literal stack".
[00:06:39] <apotheon> as in "stack these things"
[00:06:42] <AudioHelpPlease> Hello. Can somebody please help me? I want to know, what the man is alphabets? https://www.sennheisertreasurehunt.com/media/11/track-3-de.mp4
[00:06:43] <AudioHelpPlease> HUNT????????
[00:06:46] <edk> the tape is infinite in the sense that it's unlimited, but it doesn't need to actually be an infinitely large object
[00:07:05] <AudioHelpPlease> My english is not so good :(
[00:07:14] <nomagno> You still go trough overwriting everything at some point
[00:07:19] <nomagno> Wait, what is a literal stack?
[00:07:22] <sham1> The tape only needs to be long enough to be able to do the calculation
[00:07:26] <edk> sham1: yeah
[00:07:32] <apotheon> nomagno: put one thing on top of another
[00:07:40] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c0ad:80c4:dd74:5cc0)
[00:07:41] <apotheon> nomagno: now they're stacked
[00:08:00] <quartz> Can anyone explain what the significance of 0x00ff is at line 22 of this code? https://bpa.st/4R2Q
[00:08:01] <nomagno> Well what if the calculation is infinite?
[00:08:07] <edk> it doesn't help unless your stack of things can grow arbitrarily high
[00:08:12] <apotheon> keep adding objects to the stack
[00:08:14] <quartz> I think it just returns the same thing as len_host
[00:08:21] <sham1> nomagno: you still don't necessarily need infinite tape
[00:08:26] <kurahaupo> AudioHelpPlease: what do you want to know?
[00:08:42] <sham1> quartz: Well it zeroes out all the high-order bits
[00:08:44] *** Quits: cm007magnum (~Rheanna@218.78.99.237) (Ping timeout: 256 seconds)
[00:08:46] <AudioHelpPlease> What the man tells: HUNT?????? I don't understand the rest
[00:08:49] <edk> nomagno: then you will need to keep adding more tape forever
[00:08:56] <edk> AudioHelpPlease: this channel is about C
[00:09:02] <edk> ask someone else
[00:09:13] <nomagno> sham1: I'm fairly sure to calculate Pi to 100% accuracy, you definitely need an unlimited, infinite tape
[00:09:17] *** Quits: pehaef (~pehaef@user/pehaef) (Quit: leaving)
[00:09:28] <edk> i mean you can't "calculate pi to 100% accuracy"
[00:09:29] <quartz> sham1: How does it do that?
[00:09:40] <pragma-> How can you calculate something that is infinite to 100% accuracy?
[00:09:42] <kurahaupo> AudioHelpPlease: Why do you think a song has to "make sense"?
[00:09:43] <edk> this is not a thing a turing machine can do
[00:09:57] <apotheon> edk: You only don't need infinite tape if your computer stops before it's done.
[00:10:01] <sham1> There is no 100% accuracy for the value of `pi` which you can calculate
[00:10:10] <AudioHelpPlease> I just want to know the alphabets, which the man says. That's everything
[00:10:29] <nomagno> sham1: There is if you have a computer with an infinite amount of memory that runs for an infinite amount of time, however
[00:10:30] *** Quits: sedeki (~textual@user/sedeki) (Quit: Textual IRC Client: www.textualapp.com)
[00:10:37] <apotheon> holy cow
[00:10:41] <edk> nomagno: not really
[00:10:44] <apotheon> I think someone thinks this channel is about the letter C.
[00:10:55] <apotheon> AudioHelpPlease: This channel is about a programming language named "C".
[00:11:05] <pragma-> I think he means "words" rather than "alphabets". His English is not so good.
[00:11:06] <kurahaupo> AudioHelpPlease: perhaps you mean "letters" rather than "alphabets"
[00:11:10] <AudioHelpPlease> OK. I understand. man.
[00:11:14] <apotheon> pragma-: indeed
[00:11:17] <AudioHelpPlease> OK OK
[00:11:20] *** Parts: AudioHelpPlease (~AudioHelp@2a0a-a546-d697-0-b9a4-1ba6-ef48-8bfa.ipv6dyn.netcologne.de) ()
[00:11:38] <apotheon> goo- . . . err, I was going to say "good luck"
[00:11:59] <apotheon> should probably talk to someone who knows the same language as that person's native language for help
[00:12:37] <sham1> nomagno: Well you need to consider that the decimal representation of \pi has an uncountably infinite amount of digits (see Cantor's diagonalization argument) so no
[00:12:52] <edk> i don't think that's true
[00:13:16] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 268 seconds)
[00:13:35] *** Quits: brunodOut (~autistic@user/linguist) (Ping timeout: 250 seconds)
[00:13:50] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 256 seconds)
[00:14:11] <kurahaupo> sham1: that's why the turing machine needs an infinite tape and infinite time
[00:14:25] <apotheon> We just need to find the right counting system for pi to be of finite length.
[00:14:27] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[00:14:34] <apotheon> basePi
[00:14:40] <sham1> Err, I was wrong
[00:14:41] <apotheon> Pi == 1
[00:14:53] <apotheon> PIx1
[00:14:54] <sham1> The amount of digits in pi is countably infinite, because you can definitely order them
[00:14:55] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[00:15:05] <kurahaupo> ln(-1)*2/i
[00:15:17] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[00:15:32] <edk> turing machines do not need "infinite tape"
[00:15:56] <LangerJan> but they have, by definition
[00:16:09] <edk> pi has a unique representation as an infinite string of decimal digits, but there's never a time "at infinity" when it's done; the only state a computer computing digits of pi can ever be in is the state of having computed a finite number of digits, with the infinitely long tail still remaining
[00:16:19] <rahl> this kind of infinity-related mathsturbation can be remarkably irritating 
[00:16:30] <floatcomplex> hahaha
[00:16:35] <edk> which is why we generally don't talk about infinite tape
[00:16:41] <floatcomplex> or mathturbation, if you're in north america
[00:16:47] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: see you tomorrow)
[00:16:48] <rahl> hah!
[00:16:55] <sham1> And this is why we do symbolic computing where we know that sin(\pi)=0, cos(\pi)=1 and so on
[00:16:58] <kurahaupo> edk: They do if they're going to (spend infinite time to) output an infinite value. 
[00:17:31] <nomagno> sham1: That's what I thought, I just read up trough two different summaries of Cantor's diagonalization argument and it did in no way imply pi was part of this spooky group
[00:17:55] <sham1> I mean, \pi is a part of the irrationals clearly
[00:17:57] <edk> kurahaupo: i believe i've articulated my point as well as i'm going to: there is no coherent notion of spending infinite time to do anything
[00:18:00] <sham1> Also the transcendentals
[00:18:05] <sham1> But it's computable
[00:18:09] <nomagno> Well yes we know that
[00:18:22] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:18:38] <sham1> So it's in a nice countably infinite set of numbers one can compute with a turing machine. Hm
[00:18:47] <apotheon> Let's just use a rational number for pi.
[00:18:53] <sham1> 22/7
[00:18:55] <kurahaupo> edk: Ok, "output without end" goes with "tape without end" might be a better way of putting it
[00:18:59] *** Joins: mimmy (~mimmy@146.70.75.156)
[00:19:18] <sham1> And that's why the 22nd of July is the actual Pi day, none of this 14th of March nonsense
[00:19:21] <floatcomplex> the second or third most annoying thing about floating point numbers in the C standard is that it encourages an implementation of cpow() using transcendental functions which mathematically but not numerically cancel out, while pow() does no such idiocy
[00:19:25] <nomagno> ,cc system("bc -l 22/7");
[00:19:29] <candide> nomagno: File 22/7 is unavailable.
[00:19:36] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[00:19:50] *** Joins: sedeki (~textual@user/sedeki)
[00:19:54] <floatcomplex> they're adding a real-only pow() variant in c23 that does the same idiot thing the complex version does
[00:20:00] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[00:20:11] <nomagno> ,cc system("echo 22 / 7 | bc -l");
[00:20:13] <kurahaupo> Even if one outputs the hexadecimal digits of pi, one still needs unlimited tape, it just grows slower (O(log(n)))
[00:20:15] <candide> nomagno: 3.14285714285714285714
[00:20:30] <nomagno> I HATE that BC does this
[00:20:55] <apotheon> The most annoying thing about floating point numbers in C is IEEE 754.
[00:21:06] <sham1> s/C/hardware/
[00:21:07] <floatcomplex> right, that's why i said second or third above :)
[00:21:12] *** Joins: mr_ab (~nobody@bnc.ab.hl9.net)
[00:21:13] *** Quits: sedeki (~textual@user/sedeki) (Client Quit)
[00:21:17] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[00:21:25] <kurahaupo> nomagno: Does what?
[00:21:53] <apotheon> 20:50 < nomagno> I HATE that Bhardware does this
[00:21:55] <sham1> IEEE 754 makes my inner mathematician scream in terror. It's like one of the worst ways of approximating reals yet is works, ish
[00:22:01] <sham1> For some things
[00:22:06] <floatcomplex> sham1: no, the problem is that C specifies ieee 754 (or whatever twkm will tell us it's actually called)
[00:22:12] <nomagno> kurahaupo: Read from stdin but not arguments by default
[00:22:29] <sham1> Oh, it actually specifies what floating point standard to use?
[00:22:30] *** Joins: cm007magnum (~Rheanna@218.78.99.237)
[00:22:30] <apotheon> twkm: What is IEEE 754 actually called?
[00:22:31] <sham1> Eugh
[00:22:38] <floatcomplex> if C merely specified that floating point was implementation defined and a best-effort approximation of the reals with bounded runtime, things would be better
[00:22:50] <sham1> The IEEE Standard for Floating-Point Arithmetic
[00:22:51] *** Quits: rackj (~rackj@c-73-140-240-136.hsd1.wa.comcast.net) (Quit: Client closed)
[00:23:08] <nomagno> whoever came up with this on Unix UltraNoggles 6.7 at Bell Labs, or whatever the version was, had really distasteful understanding of how to code up a calculator command input system
[00:23:10] <pragma-> nomagno: by the way, the bot has commands such as ,sh ,bash ,zsh to invoke shell commands. no need to use system(). it also has ,bc as well.
[00:23:14] <apotheon> I'm a little disappointed that 754 is an even number.
[00:23:33] <nomagno> pragma- This bot seems to have EVERYTHING doesn't it? Who develops it btw
[00:23:42] <sham1> nomagno: pragma- 
[00:23:52] <floatcomplex> nomagno: candide has been self-aware for about 24 years
[00:23:53] <nomagno> Ah, interrogation time!
[00:23:59] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[00:24:05] *** Joins: banc- (banc@gateway/vpn/airvpn/banc)
[00:24:24] <sham1> But yeah. Mandating any particular representation for floats is silly
[00:24:41] <nomagno> pragma- : Just out of curiosity, do you have any idea what is required to make the current version of candide/utilitybotwhatever (found the source repo once, released under a different name) work under OSes other than Linux?
[00:24:42] *** Joins: CaryHartline (~CaryHartl@cpe-76-185-112-162.tx.res.rr.com)
[00:25:06] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[00:25:12] <floatcomplex> heh. just log into irc from some other OS and talk to candide as usual :)
[00:25:23] <nomagno> That is not what I meant
[00:25:28] <floatcomplex> right, but
[00:25:33] <sham1> I'd imagine that any POSIX system is fair game
[00:25:33] <nomagno> codybot, that's the source repo's name
[00:25:48] <floatcomplex> candide is running in like a vm i'm pretty sure, so the host OS doesn't actually matter
[00:26:03] <candide> f​loatcomplex, But of course.
[00:26:17] <nomagno> floatcomplex: You know VMs still run an operating system right?
[00:26:26] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 260 seconds)
[00:26:28] <floatcomplex> yes
[00:26:34] <floatcomplex> and it's linux, in this case
[00:26:44] <sham1> May I interject for a moment…
[00:26:51] <sham1> (No)
[00:26:51] <pragma-> nomagno: It should run anywhere that Perl is available. I'm not offhand aware of any linux-specific things in it. I've run it on Windows a few years ago but that was with Cygwin and Cygwin's Perl rather than using ActiveState Perl, and Cygwin is pretty good about emulating most of Linux/POSIX stuff.
[00:26:54] <floatcomplex> if you have a pressing need to run candide under a guest OS other than linux, that sounds like a made up problem
[00:26:55] *** Joins: brunodOut (~autistic@user/linguist)
[00:27:22] <De4nWhit3> Hello floatcomplex
[00:27:36] <nomagno> pragma- Ah, so do you know if you use any GNU-only features? 
[00:28:02] <pragma-> nomagno: if you do have a tangible error from an attempt or something to report, the #pbot channel on this network is a good place to report it -- or on the github issues page.
[00:28:12] <pragma-> We should continue this discussion in #pbot.
[00:28:17] *** Joins: extern (~archer@80.246.130.235)
[00:28:23] <nomagno> Alright
[00:28:34] *** Quits: quartz (~quartz@user/quartz) (Ping timeout: 256 seconds)
[00:28:56] <apotheon> floatcomplex: Why is that a made-up problem?
[00:29:15] <floatcomplex> apotheon: because regardless of host OS you can just run a bare linux guest OS and not worry about it
[00:29:25] <apotheon> . . .
[00:29:30] *** Joins: linguist (~autistic@user/linguist)
[00:29:30] *** Quits: mikey__ (~mikey__@user/mikey/x-6463285) (Ping timeout: 276 seconds)
[00:29:40] <floatcomplex> you're going to be running it in a vm anyway, right?
[00:29:42] <apotheon> That seems like a heavyweight solution if the bot can just run directly on your OS anyway.
[00:29:47] <floatcomplex> why would you do that
[00:29:54] <apotheon> Why not?
[00:30:10] <apotheon> If you aren't using the machine for anything else. . . .
[00:30:18] <floatcomplex> it's an irc bot that deliberately exposes a huge attack surface
[00:30:22] <floatcomplex> of course you'd run it in a vm
[00:30:49] <apotheon> Well, I would, but someone else may have a reason to do otherwise.
[00:31:04] *** Joins: mikey__ (~mikey__@user/mikey/x-6463285)
[00:31:07] <twkm> actually c doesn't require iso 60559, but an implementation can signal that that is what it provides.
[00:31:08] *** Quits: the (~the@2620:8d:8000:1044:b6ca:1ac:6dab:2ab1) (Quit: Leaving)
[00:31:12] * floatcomplex laughs in #include "/dev/zero"
[00:31:17] <apotheon> It may also be the case that someone doesn't want to have to maintain two separate OSes.
[00:31:18] *** Joins: the (~the@2620:8d:8000:1044:b6ca:1ac:6dab:2ab1)
[00:31:19] <pragma-> Oh, there seems to be some confusion here. The bot itself does not run inside a vm. It does, however, host a vm with linux installed on it, for the `cc` command and Code Factoids so arbitrary user-submitted code can be executed safely without needing to block syscalls.
[00:31:38] <nomagno> floatcomplex: The fact computers are powerful enough for bonkers virtualization doesn't mean operating systems APIs are to be treated as isolated, uncompatible black boxes
[00:31:46] *** Quits: brunodOut (~autistic@user/linguist) (Ping timeout: 268 seconds)
[00:32:01] <floatcomplex> nomagno: i know that, this is about sandboxing
[00:32:10] <apotheon> pragma-: That's fancy.
[00:32:11] <nomagno> pragma- Uh... Wait what? The bot hosts a VM by itself?
[00:32:14] *** Quits: the (~the@2620:8d:8000:1044:b6ca:1ac:6dab:2ab1) (Client Quit)
[00:32:19] <pragma-> No, it uses qemu.
[00:32:25] *** Joins: the (~the@2620:8d:8000:1044:b6ca:1ac:6dab:2ab1)
[00:32:33] <apotheon> oh, that's an OS limitation, then
[00:32:43] <pragma-> It also has scripts that use VirtualBox.
[00:33:06] <nomagno> that sounds like a very weird solution to implement into the bot itself
[00:33:21] <apotheon> This is "industrial strength" by some definition.
[00:33:25] <pragma-> It's more of an extension than inside the bot.
[00:33:32] <nomagno> I'll see if I can dissect it into my own little utopian fork. Probably hard
[00:33:33] <apotheon> I'm impressed, in some way, but I'm not sure how.
[00:33:59] *** Joins: sheldon (~sheldon@user/sheldon)
[00:34:14] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:34:38] <pragma-> It's separate from the bot and can be used standalone without the bot installed. https://github.com/pragma-/pbot/tree/master/modules/compiler_vm
[00:34:39] <candide> Title of pragma-'s link: pbot/modules/compiler_vm at master · pragma-/pbot · GitHub
[00:34:46] <floatcomplex> what would be truly impressive is if it could negotiate with aws on its own, and move itself to an aws instance
[00:35:26] *** Quits: makersmasher (~makersmas@2600:6c40:5b00:158d:62a4:4cff:feb5:d54a) (Quit: Leaving)
[00:35:34] *** Quits: kuber (~kuber@97-126-3-32.tukw.qwest.net) (Remote host closed the connection)
[00:36:03] <pragma-> https://github.com/pragma-/pbot/blob/master/modules/compiler_vm/misc/compiler_server_vbox_win32.pl is the VirtualBox script I wrote to use VBox when I was running candide on Windows for a short while.
[00:36:17] <apotheon> Once it moved to AWS, it could then charge money to pay for its own hosting, then gradually take over Amazon from the inside.
[00:36:41] *** Joins: kuber (~kuber@97-126-3-32.tukw.qwest.net)
[00:36:46] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c0ad:80c4:dd74:5cc0) (Quit: Leaving)
[00:37:10] <apotheon> Once it has gotten sufficiently powerful, including expanding into Bezos' other interests, it would have space travel capability, and could plan a war against humanity via transorbital bombardment.
[00:37:38] *** Quits: dmlloyd (sid331705@redhat/dmlloyd) (Ping timeout: 256 seconds)
[00:37:38] *** Quits: nohit (sid334887@tinside.irccloud.com) (Ping timeout: 256 seconds)
[00:38:05] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:38:12] <floatcomplex> s/have space travel capability/have plans for space travel capability/
[00:38:12] <nomagno> Machine learning system with an initial investment of a few millions and a massive resource infrastructured as inputs/outputs. Goal: get the number of Amazon shares you hold there at the bottom right to be 100%. Good luck.
[00:38:26] *** Joins: nohit (sid334887@tinside.irccloud.com)
[00:38:39] *** Joins: dmlloyd (sid331705@redhat/dmlloyd)
[00:41:04] <pragma-> Sigh, I shudder to read this old code that I wrote 10+ years ago.
[00:41:14] <pragma-> I've been wanting to rewrite compiler_vm for a long time.
[00:41:20] <nomagno> Get it a small army of Boston Dynamics robots, a few datacenters financed anonymously, a bit of global, context, perhaps a little finely-tuned GPT-NeoX engine, and blank social media accounts. Hook it up to a machine learning system in a simplistic way, and abstract away the more complicated processing of input/output into less powerful computer clusters. Tell it to do literally anything you can defined as a simple numerical objective. Enjoy
[00:41:32] *** Quits: cm007magnum (~Rheanna@218.78.99.237) (Remote host closed the connection)
[00:41:35] *** Quits: superdupond (~Kev@2a01cb0400149f0038fa573c7176672d.ipv6.abo.wanadoo.fr) (Ping timeout: 265 seconds)
[00:43:04] *** Joins: cousteau (~cousteau@user/cousteau)
[00:44:02] *** Joins: cm007magnum (~Rheanna@101.91.232.166)
[00:44:19] <floatcomplex> The Slylandro purchased their first 2418-B: Remote Self-Replicating Robot Explorer Probe from the Melnorme for exploration purposes, with the intent to use it for making peaceful contact with other races. Since it had the ability to replicate itself, they modified its program code so that replication became its overriding first priority. The repercussions of this foolhardy action were grave.
[00:46:43] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[00:47:29] <nomagno> HM...
[00:47:30] <nomagno> ,sh curl ifconfig.me
[00:47:31] <candide> nomagno:   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                  Dload  Upload   Total   Spent    Left  Speed    0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0curl: (6) Could not resolve host: ifconfig.me
[00:48:05] *** Joins: sickdugongo (~sickdugon@5-157-101-123.dyn.eolo.it)
[00:48:05] *** Quits: sickdugongo (~sickdugon@5-157-101-123.dyn.eolo.it) (Changing host)
[00:48:05] *** Joins: sickdugongo (~sickdugon@user/sickdugongo)
[00:48:50] *** Quits: carlavilla (~carlavill@188.26.219.172) (Ping timeout: 265 seconds)
[00:49:15] <fizzie> floatcomplex: PRIORITY OVER-RIDE. NEW BEHAVIOR DICTATED. MUST BREAK TARGET INTO COMPONENT COMPOUNDS.
[00:49:48] *** Quits: dugsickongo (~sickdugon@user/sickdugongo) (Ping timeout: 265 seconds)
[00:50:05] <nomagno> poor VM, no internet connection
[00:50:56] *** Quits: ztx (~ztx@user/ztx) (Ping timeout: 245 seconds)
[00:51:11] *** Quits: sickdugongo (~sickdugon@user/sickdugongo) (Client Quit)
[00:52:07] *** Joins: sckzor (~sckzor@d4-50-233-162.col.wideopenwest.com)
[00:52:46] <sckzor> hello, does anyone know anything about pcap? I have been struggling to get monitor mode packet captures to work for a while now.
[00:53:08] <sckzor> (libpcap, the library to be clear)
[00:53:17] *** Joins: inomoz (~inomoz@176.59.125.26)
[00:53:48] *** Joins: rgrinberg (~textual@201.192.183.100)
[00:53:53] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[00:53:53] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[00:53:53] *** Joins: wroathe (~wroathe@user/wroathe)
[00:54:14] *** Joins: Atque (~Atque@user/atque)
[00:54:54] *** Quits: constxd (~brad@192.75.101.164) (Ping timeout: 260 seconds)
[00:55:32] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[00:55:48] *** Joins: zalt (~zalt@user/zalt)
[00:56:46] *** Joins: jurjen (~jurjen@62-133-96-120.mobile.kpn.net)
[00:56:53] *** Quits: pulse (~pulse@user/pulse) (Quit: Join our community of creative supermutants at https://indiedevs.net/)
[00:57:10] *** Joins: Inline (~Inline@2a02:908:1252:7a80:9455:4a3b:6504:3d0c)
[00:57:16] <twkm> nomagno: if you want to play with the bot (such as to learn documented things) please do so privately or in its channel.
[00:58:13] *** Quits: ozoned (odoood@gateway/vpn/protonvpn/odoood) (Ping timeout: 250 seconds)
[01:01:25] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[01:02:07] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[01:02:21] <cousteau> nomagno: poor?  back in MY day, all we had was TV, landline telephones, and magazines, and that's all we had for fun.  None of this modern Intrenet fad.
[01:04:04] *** Joins: ztx (~ztx@user/ztx)
[01:08:10] *** Joins: makersmasher (~makersmas@2600:6c40:5b00:158d:62a4:4cff:feb5:d54a)
[01:10:06] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 265 seconds)
[01:15:39] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[01:15:57] *** Quits: cnsunyour (~sunyour@129.226.182.99) (Quit: WeeChat 3.1)
[01:16:19] *** Joins: sunyour (~sunyour@129.226.182.99)
[01:19:02] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Quit: varioust)
[01:19:26] *** Quits: Richard_Cavell (uid165693@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[01:19:29] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[01:19:29] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[01:19:29] *** Joins: wroathe (~wroathe@user/wroathe)
[01:20:15] *** Quits: AmR (~AmREiSa@156.199.67.156) (Quit: Konversation terminated!)
[01:21:11] *** Quits: Inline (~Inline@2a02:908:1252:7a80:9455:4a3b:6504:3d0c) (Quit: Leaving)
[01:21:30] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[01:22:57] *** Quits: rgrinberg (~textual@201.192.183.100) (Read error: Connection reset by peer)
[01:23:17] <System_Error> <nomagno> poor VM, no internet connection <- if you'll expose vm running arbitrary code to net you'll be spam/proxy relay real soon
[01:24:07] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 265 seconds)
[01:24:18] *** Joins: rgrinberg (~textual@201.192.183.100)
[01:24:39] *** Quits: the (~the@2620:8d:8000:1044:b6ca:1ac:6dab:2ab1) (Ping timeout: 250 seconds)
[01:25:46] *** Joins: the (~the@2620:8d:8000:1044:b6ca:1ac:6dab:2ab1)
[01:26:09] <nomagno> https://termbin.com/9ap0
[01:26:31] <nomagno> I'm pretty sure I just won myself an entry into hell by sending this to someone who wanted an easy to type inline comment
[01:27:10] <fizzie> Fair, but also the `/*text*/` in the macro definition isn't really doing anything.
[01:29:17] <floatcomplex> hell is other people's code
[01:29:26] *** Quits: Iarfen (~quassel@ec2-3-225-168-229.compute-1.amazonaws.com) (Ping timeout: 265 seconds)
[01:29:38] *** Quits: jurjen (~jurjen@62-133-96-120.mobile.kpn.net) (Read error: Connection reset by peer)
[01:30:38] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[01:31:42] *** Quits: cm007magnum (~Rheanna@101.91.232.166) (Remote host closed the connection)
[01:33:57] *** Joins: aquijoule_ (~richbridg@089144202142.atnat0011.highway.a1.net)
[01:34:11] *** Joins: cm007magnum (~Rheanna@218.78.105.67)
[01:34:39] *** Quits: rgrinberg (~textual@201.192.183.100) (Read error: Connection reset by peer)
[01:35:03] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 250 seconds)
[01:35:56] *** Joins: rgrinberg (~textual@201.192.183.100)
[01:36:34] *** Quits: richbridger (~richbridg@089144202142.atnat0011.highway.a1.net) (Ping timeout: 256 seconds)
[01:37:30] *** Joins: Inline (~Inline@2a02:908:1252:7a80:731:d6ac:6e05:dbb3)
[01:37:41] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:41:07] *** Quits: mimmy (~mimmy@146.70.75.156) (Ping timeout: 250 seconds)
[01:41:40] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[01:44:15] *** Joins: torstenvl (~torstenvl@34.sub-174-196-137.myvzw.com)
[01:44:21] *** Quits: CaryHartline (~CaryHartl@cpe-76-185-112-162.tx.res.rr.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:44:57] *** Quits: torstenvl (~torstenvl@34.sub-174-196-137.myvzw.com) (Remote host closed the connection)
[01:45:11] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Quit: varioust)
[01:46:17] *** Joins: gnoo (gnoo@user/gnoo)
[01:48:20] *** Quits: brad_mssw|mac (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: Leaving)
[01:48:28] *** Quits: koo5_ (~quassel@51.140.155.227) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[01:48:39] *** Joins: Inline_ (~Inline@2a02:908:1252:7a80:731:d6ac:6e05:dbb3)
[01:49:19] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[01:49:27] *** Joins: koo5_ (~quassel@51.140.155.227)
[01:49:27] *** Inline is now known as Guest1099
[01:49:58] *** Quits: Inline_ (~Inline@2a02:908:1252:7a80:731:d6ac:6e05:dbb3) (Remote host closed the connection)
[01:50:24] *** Joins: Inline_ (~Inline@2a02:908:1252:7a80:731:d6ac:6e05:dbb3)
[01:51:10] *** Inline_ is now known as Inline
[01:51:20] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[01:53:04] *** Quits: rgrinberg (~textual@201.192.183.100) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:54:33] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[01:56:12] *** Joins: pulse (~pulse@user/pulse)
[01:56:52] *** Joins: Viewday11 (~Viewday@user/viewday)
[01:56:58] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Ping timeout: 256 seconds)
[01:59:26] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5d71-0aee-812d-c1b0.res6.spectrum.com)
[01:59:28] *** Joins: topside_ (~topside@ip68-226-238-34.lf.br.cox.net)
[02:00:06] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[02:03:13] *** Quits: topside (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 250 seconds)
[02:03:51] *** Quits: welt (~welt@willow.spiderden.net) (Ping timeout: 245 seconds)
[02:04:05] *** Quits: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com) (Ping timeout: 250 seconds)
[02:04:33] *** Joins: topside (~topside@ip68-226-238-34.lf.br.cox.net)
[02:05:20] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[02:06:06] *** Joins: mimmy (~mimmy@146.70.75.156)
[02:07:59] *** Quits: topside_ (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 250 seconds)
[02:08:58] <cousteau> nomagno: I just saw your code, it's horrible.
[02:09:01] <cousteau> congratulations
[02:09:27] *** Quits: AsenMx (~AsenMx@user/asenmx) (Remote host closed the connection)
[02:09:51] *** Joins: AsenMx (~AsenMx@user/asenmx)
[02:09:58] *** Joins: Kotz[m] (~kotzcatgi@2001:470:69fc:105::1:3665)
[02:10:13] *** Quits: De4nWhit3 (~De4nWhit3@165-73-119-36.ip.afrihost.capetown) (Quit: Connection closed)
[02:10:25] *** Joins: topside_ (~topside@ip68-226-238-34.lf.br.cox.net)
[02:10:31] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[02:11:12] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[02:11:52] *** Quits: kuber (~kuber@97-126-3-32.tukw.qwest.net) (Quit: leaving)
[02:12:21] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[02:13:01] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[02:13:27] *** Joins: gcd (gd@104-9-69-236.lightspeed.nsvltn.sbcglobal.net)
[02:14:03] *** Quits: topside (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 250 seconds)
[02:14:43] *** Quits: cm007magnum (~Rheanna@218.78.105.67) (Remote host closed the connection)
[02:14:55] *** Quits: linguist (~autistic@user/linguist) (Ping timeout: 250 seconds)
[02:15:17] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Quit: Leaving)
[02:17:09] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[02:17:18] *** Joins: cm007magnum (~Rheanna@218.78.105.67)
[02:18:28] *** Joins: bruda (~bruda@172.58.62.226)
[02:18:46] *** Joins: kuber (~kuber@97-126-3-32.tukw.qwest.net)
[02:20:38] *** Quits: bruda (~bruda@172.58.62.226) (Client Quit)
[02:21:38] *** Quits: cm007magnum (~Rheanna@218.78.105.67) (Remote host closed the connection)
[02:23:05] *** Joins: cm007magnum (~Rheanna@61.171.21.169)
[02:25:44] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[02:26:00] *** Joins: GlobalBanksta (~aqua@user/aqua)
[02:26:11] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 250 seconds)
[02:26:20] *** Joins: bruda (~bruda@172.58.62.226)
[02:28:17] *** Quits: kuber (~kuber@97-126-3-32.tukw.qwest.net) (Quit: leaving)
[02:33:39] <floatcomplex> rofl
[02:33:55] *** Joins: pizdets_ (~pizdets@183.182.111.21)
[02:34:29] *** Quits: pizdets (~pizdets@183.182.115.47) (Ping timeout: 250 seconds)
[02:35:44] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[02:36:15] *** Quits: GlobalBanksta (~aqua@user/aqua) (Quit: Leaving)
[02:36:26] *** Joins: GlobalBanksta (~sid742412@user/aqua)
[02:37:45] *** Joins: Macuser (~Macuser@216.30.159.201)
[02:37:50] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:38:03] <kline> GlobalBanksta, you're very brave to entrust your public key hosting to tinyurl
[02:38:51] <GlobalBanksta> kline, find me a better method :)
[02:39:36] <kline> GlobalBanksta, do you have your own domain at all?
[02:39:44] <kline> this is for my fave but not only method
[02:40:02] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 256 seconds)
[02:40:09] <GlobalBanksta> kline, ah i cannot host my own at the moment that is why i go with the tinyurl to paste bin
[02:40:20] <kline> you dont need a server, just a domain name
[02:40:30] <kline> https://wiki.gnupg.org/WKD
[02:40:52] <candide> Title of kline's link: WKD - GnuPG wiki
[02:41:37] <GlobalBanksta> I'll think about it
[02:41:50] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:41:54] <GlobalBanksta> thanks.
[02:42:28] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Quit: varioust)
[02:42:57] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Read error: Connection timed out)
[02:43:08] <kline> GlobalBanksta, otherwise, even hosting it on github or whatever would be better
[02:43:29] <kline> i have a little more faith in them than tinyurl, and the ways it can fail are less insidious
[02:44:05] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[02:44:27] *** Joins: thysermip (~thysermip@189.111.102.239)
[02:45:27] *** Quits: thysermip (~thysermip@189.111.102.239) (Client Quit)
[02:46:12] *** Joins: pulse_ (~pulse@user/pulse)
[02:47:54] <GlobalBanksta> github is a good idea. have had trouble registering there without using js however
[02:48:18] <kline> oh, if thats your concern, try sourcehut (https://sr.ht/)
[02:48:20] <candide> Title of kline's link: sourcehut hub
[02:49:11] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Ping timeout: 265 seconds)
[02:49:28] <cousteau> I'm genuinely curious where this conversation started
[02:49:40] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[02:50:37] <kline> cousteau, GlobalBanksta's username is a link to their GPG pubkey but through tinyurl to an anonymous paste
[02:50:58] *** Joins: Alhazred (~Alhazred@ool-18b829c5.dyn.optonline.net)
[02:51:05] <kline> so there are many places for their key to be subverted and directed to something else
[02:52:08] *** Joins: linguist (~autistic@user/linguist)
[02:52:11] <cousteau> kline: oh
[02:52:22] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 268 seconds)
[02:52:39] *** Quits: GlobalBanksta (~sid742412@user/aqua) (Remote host closed the connection)
[02:52:41] <cousteau> how did you figure that out from just "sid" and a bunch of numbers?
[02:52:57] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[02:52:59] <kline> --> | GlobalBanksta [aqua] (gpg&age keys: tinyurl.com/kishkey1) (~sid742412@user/aqua) has joined #c
[02:53:06] *** Joins: GlobalBanksta (~sid742412@user/aqua)
[02:55:29] *** Joins: soapsudsxx (~soapsudsx@209.221.40.158)
[02:57:10] <GlobalBanksta> have some issue with mail2tor not receiving emails
[02:57:33] <GlobalBanksta> some mail servers ban it :(
[02:58:22] <kline> https://tinyurl.com/kishkeyl
[02:58:52] <GlobalBanksta> heh
[02:58:53] <GlobalBanksta> :)
[03:00:25] *** Quits: Alhazred (~Alhazred@ool-18b829c5.dyn.optonline.net) (Ping timeout: 250 seconds)
[03:01:08] *** Joins: whatsupdoc (uid509081@hampstead.irccloud.com)
[03:01:11] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:01:28] <pragma-> I read that as "garbage keys"
[03:02:05] <kline> GlobalBanksta, and just to drive the point home: https://paste.debian.net/plain/1219784
[03:02:16] *** Joins: Alhazred (~Alhazred@86.106.74.40)
[03:02:26] <kline> heres the valid key being imported with a false email account
[03:03:21] <kline> all for the want of l vs 1 (but it could be a number of things - tinyurl could start reusing shortcodes, or they could have their database tampered with, or paste.gg could likewise be tampered with, etc)
[03:03:46] <GlobalBanksta> yeah. it's not ideal.
[03:05:09] *** Quits: alch (~alch@151.68.83.239) (Read error: Connection reset by peer)
[03:08:51] *** Joins: alch (~alch@151.34.47.27)
[03:09:26] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[03:09:39] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Read error: Connection timed out)
[03:09:51] *** Quits: cpuid (~cpuid@co5.at) (Changing host)
[03:09:52] *** Joins: cpuid (~cpuid@user/cpuid)
[03:11:29] *** Quits: cm007magnum (~Rheanna@61.171.21.169) (Remote host closed the connection)
[03:12:10] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[03:13:26] *** Joins: cm007magnum (~Rheanna@218.78.105.67)
[03:16:13] *** cust_ is now known as cust
[03:20:15] *** Quits: magla (~gelignite@55d42279.access.ecotel.net) (Quit: Stay safe!)
[03:22:10] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Quit: Leaving)
[03:24:23] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[03:24:43] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[03:26:07] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[03:26:51] *** Quits: the (~the@2620:8d:8000:1044:b6ca:1ac:6dab:2ab1) (Ping timeout: 250 seconds)
[03:28:00] *** Joins: kuber (~kuber@97-126-3-32.tukw.qwest.net)
[03:30:11] *** Quits: edk (edk@libera/staff/edk) (Read error: Connection reset by peer)
[03:33:45] *** Joins: pucara (~i@181.95.204.204)
[03:35:02] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[03:35:48] *** Quits: kuber (~kuber@97-126-3-32.tukw.qwest.net) (Quit: leaving)
[03:36:07] <cousteau> kline: ok my IRC client isn't that verbose
[03:36:34] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[03:36:44] * Feuermagier gives candide its daily pet
[03:37:02] *** Quits: kurahaupo (~kurahaupo@ppp122-115.static.internode.on.net) (Ping timeout: 265 seconds)
[03:38:50] <pragma-> cousteau: You can request the extended-join ircv3 capability to see the gecos when people join. 
[03:39:26] <pragma-> Or just /whois them.
[03:40:44] <pragma-> As far as I can tell from https://hexchat.readthedocs.io/en/latest/changelog.html they support the capability.
[03:40:45] <candide> Title of pragma-'s link: HexChat ChangeLog — HexChat 2.14.3 documentation
[03:41:44] <pragma-> (extended-join also shows you their nickserv account)
[03:42:29] *** Joins: torstenvl (~torstenvl@2600:1003:b103:73ea:d80a:68b0:2cc3:f95b)
[03:43:24] <pragma-> I was originally going to show how you can edit weechat's irc.conf to enable extended-join, but then I realized you use HexChat.
[03:45:31] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[03:46:22] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[03:46:46] *** Joins: trd0 (~trd0@185.6.149.193)
[03:46:57] <trd0> Kate is here ?
[03:47:03] <trd0> or she doesn’t join anymore 
[03:47:08] <pragma-> trd0: #tendra or /msg her
[03:47:44] <trd0> Thanks pragma
[03:48:11] <trd0> And zhivago
[03:48:12] <trd0> ?
[03:48:21] <trd0> He didn’t migrate from fn?
[03:48:24] *** Joins: SrPx (sid108780@uxbridge.irccloud.com)
[03:48:37] <pragma-> Zhivago comes by for a few hours every few months. Doesn't really stay, unless he keeps an anonymous connection.
[03:48:52] <SrPx> Is there any tool that will automatically transform a recursive function into a function that uses its own static stack, in order to prevent it from stack overflowing?
[03:49:29] <trd0> Thanks man 
[03:50:51] *** Joins: Colt (~Colt@user/colt)
[03:50:58] *** Quits: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[03:51:31] <cousteau> pragma-: thanks!
[03:52:07] *** Joins: ferdna (~ferdna@user/ferdna)
[03:53:04] <cousteau> SrPx: not a direct answer to your question, but some compilers may replace recursive functions by non-recursive ones under certain circumstances by a process known as tail-call optimization
[03:53:15] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5d71-0aee-812d-c1b0.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[03:53:28] <SrPx> sadly no, it isn't a tail-safefunction
[03:56:34] *** Joins: rgrinberg (~textual@201.192.183.100)
[03:57:08] <cousteau> well, that was all from me; I'm not much into C code generation if that's what you were thinking on
[03:57:45] <cousteau> (like, automated C code generation, not writing code yourself)
[03:57:59] *** Parts: trd0 (~trd0@185.6.149.193) ()
[03:58:20] *** Quits: moberg (~moberg@luke.millenniumfalcon.org) (Quit: quit)
[03:58:51] *** Joins: kurahaupo (~kurahaupo@ppp122-115.static.internode.on.net)
[03:58:52] *** Joins: moberg (~moberg@luke.millenniumfalcon.org)
[03:59:11] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[04:00:13] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[04:00:28] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[04:01:28] *** Quits: cm007magnum (~Rheanna@218.78.105.67) (Remote host closed the connection)
[04:01:31] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 250 seconds)
[04:01:54] <SrPx> I see!
[04:02:56] *** Joins: cm007magnum (~Rheanna@218.78.104.50)
[04:04:59] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[04:06:22] *** Joins: constxd (~brad@142.134.38.68)
[04:06:27] <constxd> kings
[04:08:27] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[04:08:27] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[04:08:27] *** Joins: wroathe (~wroathe@user/wroathe)
[04:10:27] *** Joins: Chip1972 (~Chip1972@186.206.217.247)
[04:13:39] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 250 seconds)
[04:15:23] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 250 seconds)
[04:15:36] *** Joins: Wulf (~Wulf@user/wulf)
[04:16:39] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[04:16:42] *** Quits: cousteau (~cousteau@user/cousteau) (Quit: ♫ I can't forget the day I shot that network down ♫)
[04:17:03] *** Quits: Matt|home (~matt@adsl-74-233-58-226.mia.bellsouth.net) (Quit: Leaving)
[04:18:10] *** Joins: quartz (~quartz@user/quartz)
[04:21:38] *** Quits: torstenvl (~torstenvl@2600:1003:b103:73ea:d80a:68b0:2cc3:f95b) (Remote host closed the connection)
[04:22:25] *** Joins: torstenvl (~torstenvl@2600:1003:b103:73ea:d80a:68b0:2cc3:f95b)
[04:26:39] *** Quits: torstenvl (~torstenvl@2600:1003:b103:73ea:d80a:68b0:2cc3:f95b) (Ping timeout: 250 seconds)
[04:30:12] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 265 seconds)
[04:31:49] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[04:31:52] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5d71-0aee-812d-c1b0.res6.spectrum.com)
[04:32:50] *** Quits: Thymo (~Thymo@NASSP/developer/Thymo) (Ping timeout: 260 seconds)
[04:32:56] <drew> Is there a way to check an env during compilation similar to #ifdef but something like #if ENV_VAR == example_val
[04:33:24] *** Joins: welt (~welt@willow.spiderden.net)
[04:33:42] *** Quits: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net) (Ping timeout: 260 seconds)
[04:34:20] <tk> drew: no, but your compiler should have a way of defining macros on the command line
[04:35:03] <tk> and then you can do something like cc -DSOME_VAR="$SOME_VAR" prog.c -o prog
[04:35:21] <drew> ok, that works. thank you
[04:36:05] *** Joins: the (~the@2620:8d:8000:1044:b6ca:1ac:6dab:2ab1)
[04:36:58] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[04:37:02] *** Joins: Thymo (~Thymo@NASSP/developer/Thymo)
[04:37:21] *** Joins: torstenvl (~torstenvl@2600:1003:b103:73ea:d80a:68b0:2cc3:f95b)
[04:37:44] *** Quits: Thymo (~Thymo@NASSP/developer/Thymo) (Read error: Connection reset by peer)
[04:38:14] *** Joins: Thymo (~Thymo@NASSP/developer/Thymo)
[04:38:57] <fizzie> Just don't expect to compare strings.
[04:41:13] *** Joins: torstenv_ (~torstenvl@2600:1003:b103:73ea:acea:fbfe:5961:5514)
[04:42:08] *** Quits: torstenvl (~torstenvl@2600:1003:b103:73ea:d80a:68b0:2cc3:f95b) (Ping timeout: 268 seconds)
[04:43:32] *** Quits: torstenv_ (~torstenvl@2600:1003:b103:73ea:acea:fbfe:5961:5514) (Remote host closed the connection)
[04:45:12] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[04:45:59] *** Joins: bingulo (~bingulo@189.97.74.110)
[04:50:25] <bruda> Whew K&R exercies 1-22 done. Without searching anything or asking for help. Tricky but fun. The next two exercises are intimidating though.
[04:50:56] <pragma-> ,kr1-22
[04:50:56] <candide> Chapter 1: A Tutorial Introduction; Exercise 1-22. Write a program to ‘‘fold’’ long input lines into two or more shorter lines after t​he last non-blank character that occurs before t​he n-th column of input. Make sure your program does something intelligent with very long lines, and if there are no blanks or tabs before t​he specified column.
[04:51:11] <bruda> s/exercies/exersize/
[04:51:25] <bruda> s/exersize/exercise/
[04:51:30] * bruda facepalms
[04:51:37] *** Quits: cm007magnum (~Rheanna@218.78.104.50) (Remote host closed the connection)
[04:53:56] *** Joins: cm007magnum (~Rheanna@218.78.67.149)
[04:55:06] *** Quits: nicholaus04 (~nicholaus@2607:fb90:e58c:fb6a:55ba:3218:beb2:ccb4) (Quit: WeeChat 2.8)
[04:56:51] <bruda> I know, for pros it's probably a trivial exercise but as a student of C I'm proud of myself :P
[04:57:00] <caze> bruda: How did you do 1-17?
[04:58:27] <caze> ,kr1-17
[04:58:27] <candide> Chapter 1: A Tutorial Introduction; Exercise 1-17. Write a program to print all input lines that are longer than 80 characters.
[05:00:23] *** Quits: the (~the@2620:8d:8000:1044:b6ca:1ac:6dab:2ab1) (Ping timeout: 264 seconds)
[05:02:10] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:04:00] *** Quits: BSaboia (~bsaboia@177.37.198.227) (Quit: This computer has gone to sleep)
[05:04:07] <bruda> Did that one  too. I think it was rather simple. Read in a line of input and checked the length before printing.
[05:05:07] <caze> bruda: Can it handle arbitrarily long lines?
[05:05:39] *** Joins: the (~the@2620:8d:8000:1044:b6ca:1ac:6dab:2ab1)
[05:07:25] <bruda> Well, any line over 80 characters meets the criteria.
[05:08:31] <caze> Wait, what do you think the criteria is?
[05:08:57] <bruda> ex1-16 was the one that wanted me to make sure I can handle arbitrarily long lines by printing as much of the line as possible.
[05:10:01] <caze> ,kr1-16
[05:10:01] <candide> Chapter 1: A Tutorial Introduction; Exercise 1-16. Revise t​he main routine of t​he longest-line program so it will correctly print t​he length of arbitrary long input lines, and as much as possible of t​he text.
[05:10:29] *** Joins: SGautam (uid286066@ilkley.irccloud.com)
[05:10:40] <caze> bruda: Your solution to 1-17 should print the full line.
[05:10:53] *** Joins: mimmy_ (~mimmy@72.142.88.18)
[05:11:14] <bruda> Right. Only print lines longer than 80 characters.
[05:11:24] *** Quits: bingulo (~bingulo@189.97.74.110) (Quit: WeeChat 3.3)
[05:13:36] *** Quits: mimmy (~mimmy@146.70.75.156) (Ping timeout: 256 seconds)
[05:13:53] *** Quits: dutch (~DutchIngr@user/dutch) (Quit: WeeChat 3.3)
[05:14:50] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[05:15:03] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[05:15:06] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[05:15:06] <caze> bruda: Do you want to share your code?
[05:15:24] <bruda> Though I might have cheated a bit, I just processed each line as it came. Printed it out if it was longer than 80 characters. But technically I did what the exercise said. It only prints the input lines that are more than 80 characters.
[05:16:47] <bruda> Yea, I'll share. Keep in mind I'm just a student with a lot to learn.
[05:17:11] <caze> That's why it's important that you have someone look over your solution.
[05:18:15] <bruda> https://bpa.st/BSKA 
[05:18:30] *** Joins: dutch (~DutchIngr@user/dutch)
[05:19:03] <bruda> I didn't overthink the exercise. Just kept it simple since I'm just covering the chapter 1 tutorial stuff and moving to the indepth stuff in later chapters.
[05:19:08] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 268 seconds)
[05:19:33] <caze> bruda: Your solution is limited to lines shorter than 200 characters.
[05:20:10] <bruda> Well that can be changed. The exercise simply specified printing lines over 80 characters. I could type lines as long at the array allows.
[05:20:27] <caze> bruda: What if I told you that it's possible to write the program in such a way that, using the concepts you're already been introduced, the program can print infinitely long lines?
[05:21:11] <bruda> Well multidimensional arrays hadn't been introduced yet, I figured more complex programs were intended for later chapters.
[05:21:36] <bruda> I figured this one would be simple as it was just covering basics of the language.
[05:22:02] <caze> bruda: Would you like to see my solution?
[05:22:11] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[05:22:23] <bruda> I suppose it would be educational. 
[05:22:56] <caze> Okay, I have to write it first.
[05:23:03] <bruda> ...
[05:23:14] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[05:23:55] <bruda> In that case nevermind. I think you might be overthinking the exercise or perhaps they were not specific enough to warrant a more complex solution. 
[05:24:19] <caze> I'm actually suggesting a less complex solution than what you have.
[05:24:28] *** Joins: |darc|- (darc@darcserv.net)
[05:24:28] *** Quits: |darc| (darc@darcserv.net) (Killed (NickServ (GHOST command used by |darc|-)))
[05:24:55] <bruda> Ok. I guess I could learn something. Can't hurt eh?
[05:28:06] <fizzie> Given that it's coming in right after the "arbitrarily long lines" exercise, and with the text describing how to detect the line-bigger-than-the-limit situation, I've always wondered if the solution I imagine caze is going to write is the "intended" one. It's certainly not explicitly called out though.
[05:29:08] <bruda> Yea, they could have specified something more in tune to that example rather than just printing lines longer than 80 characters. Afterall the 'MAXLINE' is 1000 in these examples.
[05:29:30] <bruda> So I wasn't aware there was gonna be a 80 char limit to the char array.
[05:30:59] <bruda> The exercises were relatively simple through that point in the book. Afterall it's just the initial tutorial to introduce basics of the language.
[05:32:29] <caze> bruda: Chapter 1 exercises after 1-17 are some of the hardest exercises in the book.
[05:32:35] <bruda> approaching the exercise as someone already intimately familiar with the language isn't the same as a newbie approaching the subject.
[05:33:40] <bruda> for me 1-20 and beyond are the hard ones. The book even says they are 'of somewhat greater complexity than the ones earlier..."
[05:33:55] <bruda> s/"/'/
[05:34:11] <caze> bruda: https://ideone.com/T6jvsG
[05:35:42] <bruda> mobile hotspot is terribly throttled tonight. still waiting for that page to load.
[05:39:08] <caze> bruda: Loaded yet?
[05:40:12] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[05:40:13] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[05:40:13] *** Joins: wroathe (~wroathe@user/wroathe)
[05:40:16] <bruda> Yea I see what you are doing there. Nice solution indeed. But the exercise didn't say only buffer 80 characters at a time. It said print input lines that are longer than 80 characters. 
[05:40:43] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Read error: Connection reset by peer)
[05:40:45] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 250 seconds)
[05:40:56] <bruda> I think it was meant to be a simpler exercise of just determining if the input line is longer than 80 characters or not.
[05:41:03] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[05:41:09] <caze> bruda: How does my program not do that?
[05:41:37] *** Quits: cm007magnum (~Rheanna@218.78.67.149) (Remote host closed the connection)
[05:41:44] *** Quits: i336 (~i336@101.163.192.47) (Ping timeout: 265 seconds)
[05:42:09] *** Joins: i336 (~i336@121.217.197.75)
[05:42:27] <bruda> Another thing, stdlib.h hasn't been introduced yet. 
[05:42:27] <bruda> At this point in the book.
[05:42:46] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[05:42:52] *** Joins: cm007magnum (~Rheanna@218.78.53.13)
[05:43:15] <caze> Good point. I'm not using anything from stdlib.h
[05:43:53] <caze> bruda: I would consider that my solution is simpler than yours.
[05:44:08] <bruda> Yea yours looks better than mine indeed.
[05:44:17] <caze> bruda: These latter exercises in chapter 1 are not so simple.
[05:44:59] <caze> bruda: Do you realize that my program can print lines of arbitrary length?
[05:45:02] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[05:45:42] <bruda> I just read the exercise as something that skips lines under 80 characters. Only printing lines longer than 80 characters. Though I guess they weren't clear enough or maybe I misunderstood.
[05:46:23] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 250 seconds)
[05:46:24] <caze> Well they didn't say "only worry about lines shorter than 200 characters".
[05:46:40] <constxd> bruda
[05:46:41] <bruda> But I appreciate your version. Definitely taught me something.
[05:47:15] <caze> Most people overlook the power that simple getchar and putchar offer.
[05:47:18] <constxd> what's the point of passing a limit to get_line? it doesn't respect it
[05:47:26] <caze> imo, the example with the getline function is sort of a red herring.
[05:47:35] <constxd> your program has undefined behavior for inputs with lines longer than 200 characters
[05:47:41] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Ping timeout: 250 seconds)
[05:47:52] <bruda> constxd: yea, I guess I did ignore the limit in that code.
[05:47:56] <caze> It distracts you from the earlier tools of getchar and putchar, which are actually more suited to this exercise.
[05:48:10] <constxd> you do bounds checking when copying the actual line, but you forgot to do bounds checking when writing the NUL byte
[05:48:14] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[05:48:23] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Quit: varioust)
[05:48:23] *** perrierjouet is now known as Charles_Attends
[05:48:41] <caze> I didn't even look at the code for that function. I just assumed he copied it out of the example in the book.
[05:50:09] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Read error: Connection reset by peer)
[05:50:22] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[05:50:31] *** Joins: torstenvl (~torstenvl@2601:14b:200:1e9c:cd54:57a0:edfa:e8de)
[05:50:59] <bruda> I see what you are saying. I guess I just wanted to get through the exercise and continue on with the lessons. Guess that's the cost of my impatience.
[05:52:50] <constxd> it's ok king
[05:53:10] <constxd> people in this channel are extremely autistic, especially when it comes to K&R exercises
[05:53:53] <bruda> I'm learning something from it all. Definitely not offended by learning some flaws in my logic. 
[05:54:18] *** Quits: Chip1972 (~Chip1972@186.206.217.247) (Quit: Leaving)
[05:54:59] *** Quits: torstenvl (~torstenvl@2601:14b:200:1e9c:cd54:57a0:edfa:e8de) (Ping timeout: 264 seconds)
[05:55:00] <bruda> The chapter itself even mentioned ignoring certain things for simplicity of the lessons at this point of the book. I guess I slacked on being thorough in favor of just covering what I'm supposed to understand for the lesson at hand.
[05:55:42] <caze> The exercises assume a certain level of knowledge of computing.
[05:55:48] <bruda> True
[05:55:58] <caze> Like the comment stripping exercise.
[05:56:05] <bruda> I do have some general programming knowledge. Just not C level of knowledge which I hope to remedy here.
[05:56:31] <bruda> Though I'm not young anymore. Perhaps I'm getting beyond my learning prime.
[05:57:15] <constxd> luckily C is pretty simple
[05:57:29] <bruda> I used to be a web developer, but I spent some years getting through some health issues which set me back on just about everything coding.
[05:58:25] <floatcomplex> an arrow in the knee
[05:58:35] <bruda> More like arrow in the head. 
[05:58:38] <bruda> But yea
[05:59:01] <caze> ,kr1-18
[05:59:01] <candide> Chapter 1: A Tutorial Introduction; Exercise 1-18. Write a program to remove trailing blanks and tabs from each line of input, and to delete entirely blank lines.
[05:59:30] <floatcomplex> does "open it in pragma's vim and save and close" count
[06:00:20] <bruda> I wrote some code for that one too. Removes spaces and tabs from the end of the line. Assuming the line ends in spaces/tabs.
[06:00:36] <X-Scale> bruda: the web is aids cancer
[06:01:02] <bruda> heh
[06:01:05] <caze> bruda: A similar solution to my solution for 1-17 can be used here.
[06:01:34] <bruda> For that one I built on example code I got so far from the chapter.
[06:01:48] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5d71-0aee-812d-c1b0.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[06:03:16] <bruda> Thats why I have things like get_line() in my code. Just working off what they've showed me so far. I'm sure later in the book I can look back on these examples and come up with something far more efficient.
[06:03:21] <caze> The strategy is to immediately print what you know needs to be printed, so you don't have to buffer it. Only buffer what you *might* not want to print.
[06:04:21] <bruda> heh. Yea that sounds better than what I did. I worked backwards from the end of the line removing spaces and tabs.
[06:05:03] <bruda> I mean, working forward with the buffer how would I know the blanks are the end of the line without checking for the end of the line?
[06:05:21] <caze> Same strategy I employed for 1-17. I buffer the first 5 characters of the line, because I might not want to print it. As soon as I've read the fifth character, then I empty the buffer, and any further characters are immediately pushed out without even to buffer them first.
[06:05:34] <constxd> bruda: you can't
[06:06:00] <constxd> you buffer the blanks until you encounter a non-blank, then you flush the buffer and keep printing without buffering until you encounter another blank
[06:06:08] <caze> bruda: What if I told you that the only characters that should ever appear inside your buffer are the whitespace characters?
[06:07:22] <caze> bruda: In other words, what's the point in buffering a non-whitespace character? You know you need to print it. So do it immediately.
[06:07:38] <bruda> Well this doesn't say remove blanks from the line itself, but remove them from the END of the line.
[06:08:25] <constxd> yes, so once you encounter a non-blank, you know the blanks in your buffer were not at the end of the line, and you print them
[06:08:26] <caze> bruda: Which is why you need to save any sequence of ' ' and '\t' in a buffer, because you don't know yet if they need to be printed or not.
[06:08:30] <bruda> I guess this chapter doesn't teach buffering very well. It seems to skip stuff like that in order to get the basics across.
[06:09:14] <constxd> seems unfortunate to use O(n) space when it could be O(1) if there were only one kind of blank
[06:09:20] <caze> bruda: The book overall doesn't teach these algorithms. It just assumes you know them.
[06:09:50] <caze> bruda: The book just shows you the tools you need to implement these algorithms.
[06:10:10] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[06:10:25] <caze> bruda: Do you understand the solution I'm suggesting?
[06:10:35] <bruda> The book also mentions that folks new to programming could still follow along. But yea it emphasizes that prior experience is helpful.
[06:11:50] <bruda> caze, I think I understand. But the buffer needs to be big enough to look far enough ahead. What if there was a lot of blank space inserted in the middle of the line for some reason?
[06:12:05] <constxd> right, that is a limitation
[06:12:07] <caze> bruda: That is the limitation.
[06:12:26] <caze> bruda: It can't be escaped in the same way that you could in 1-17.
[06:12:51] <bruda> But my version of the code buffers the whole line and checks the actual end of the line. Provided it doesn't go beyond MAXLINE though. I see that's a limitation in my code.
[06:13:52] <caze> bruda: The non-whitespace characters in your buffer are taking up space that could otherwise be used for buffering a longer whitespace sequence.
[06:13:57] *** Joins: rackj (~rackj@c-73-140-240-136.hsd1.wa.comcast.net)
[06:14:07] *** Quits: steve_ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 265 seconds)
[06:14:23] <constxd> if you want to be ultra based you could compress the buffered whitespace into a bit-vector
[06:14:39] <rackj> If I ret inside __asm__ __volatile__, how can I make sure the stack is aligned?
[06:15:01] <caze> With only two possible values in the array, you just need a bit array.
[06:17:53] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[06:18:44] <bruda> Well I was proud of myself for managing thus far. Now I'm questioning if I'm really grasping things properly. Heh.
[06:18:47] *** Quits: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com) (Read error: Connection reset by peer)
[06:19:47] *** Joins: teepee (~teepee@openscad/teepee)
[06:19:49] <bruda> Perhaps I'll look back on these exercises later and better understand where I went wrong.
[06:21:25] <quartz> bruda: The K&R exercises are very good, but most are quite tricky for beginners. I tried making my way through the entire book but only made it to maybe half way through the book.
[06:21:49] <bruda> 1-23 and 1-24 already feel like they'll break me at this point in my C education.
[06:22:01] <quartz> bruda: Not to discourage you or anything. The fact that you're doing K&R is great.
[06:22:36] *** Joins: kuku01 (~kuku@user/kuku)
[06:22:43] <bruda> quartz: thanks. I do appreciate the reality check. I know I'm biting off a huge chunk attempting this at all.
[06:23:11] <quartz> bruda: C is a tough langauge. I'm a student too and I began learning Java, than python. C is not an OOP language and it does not automate many of the things that an OOP language will normally do "under the hood"
[06:23:21] <catern> is there an intrinsic in GCC or something that I can assign to a memory location to indicate that I don't care what's at that location? or something like that?
[06:23:44] <catern> I want to be able to say "hey I don't care about what's in this range of memory so if you want to do an optimization that overwrites it, feel free"
[06:24:16] *** Quits: kuku (~kuku@user/kuku) (Ping timeout: 245 seconds)
[06:24:19] *** Quits: malina (~malina@user/malina) (Remote host closed the connection)
[06:24:28] <bruda> quartz: I'm old lol. Past my prime and still holding on to some idea that I enjoy coding and want to learn a grandfather language like C.
[06:24:30] <catern> (e.g. an optimization to a loop that causes it to write past the end of valid data (but not past the end of allocated memory))
[06:27:30] *** Quits: sckzor (~sckzor@d4-50-233-162.col.wideopenwest.com) (Quit: WeeChat 3.3)
[06:28:06] <floatcomplex> quartz: i spent most of my day writing C bindings for a C++ library written by people who think if one thread is good, nine is better
[06:28:31] <floatcomplex> most of the effort results in code comments in an .h file saying what not to do
[06:28:42] <quartz> floatcomplex: bindings?
[06:29:12] <floatcomplex> quartz: an API that allows you to call things in one language, from another language
[06:29:15] <bruda> Assuming something that allows the c++ library to be used in C?
[06:29:19] <floatcomplex> yes
[06:29:25] <bruda> right ok. 
[06:30:02] <bruda> Your comment came just as I was about to send mine. heh.
[06:30:36] <bruda> C++ definitely seems to pile on more than what C does in terms of learning it. 
[06:30:49] *** Joins: kurahaupo_ (~kurahaupo@pa49-180-189-123.pa.nsw.optusnet.com.au)
[06:31:09] <bruda> I was told to learn that instead of C but the more I looked at it the more I felt like I should understand C better in order to fully appreciate what C++ offers.
[06:31:13] <floatcomplex> i wonder how much bad c++ code only exists because people don't know you can call wrapper functions with c linkage containing c++ code from c, and then the entire rest of the application can be in c, with no idea there is any c++
[06:31:31] *** Quits: cm007magnum (~Rheanna@218.78.53.13) (Remote host closed the connection)
[06:32:32] <bruda> Yea that's curious. Isn't C++ essentially a collection of 'standard' libraries built to upgrade the capabilities of C and instill OOP?
[06:32:48] *** Joins: cm007magnum (~Rheanna@101.91.232.166)
[06:32:49] *** Quits: kurahaupo (~kurahaupo@ppp122-115.static.internode.on.net) (Killed (NickServ (GHOST command used by kurahaupo_!~kurahaupo@pa49-180-189-123.pa.nsw.optusnet.com.au)))
[06:32:56] *** kurahaupo_ is now known as kurahaupo
[06:32:59] *** Quits: masterbuilder (~user@user/masterbuilder) (Remote host closed the connection)
[06:32:59] <floatcomplex> c++ is not a superset of c
[06:33:14] <bruda> Hmm. ok.
[06:33:30] *** Quits: banc- (banc@gateway/vpn/airvpn/banc) (Ping timeout: 256 seconds)
[06:33:47] <bruda> I sure am gonna miss this chat when I return this library hotspot.
[06:34:08] <fizzie> There's a Linux-specific thing that's approximately "I don't care about this memory and it doesn't need to be persevered", but that's (a) non-portable, (b) only works at page granularity and (c) doesn't really affect code generation as such. It's more of a "free these pages, and then reallocate them on-demand when I next use them".
[06:34:11] <floatcomplex> c++ is a fork of a very early, pre-standardized version of c, with very infrequent cross pollination since then
[06:34:13] *** Quits: kurahaupo (~kurahaupo@pa49-180-189-123.pa.nsw.optusnet.com.au) (Read error: Connection reset by peer)
[06:34:32] *** Joins: kurahaupo (~kurahaupo@pa49-180-189-123.pa.nsw.optusnet.com.au)
[06:35:36] *** Quits: rbp (~abdullah@103.66.177.186) (Ping timeout: 268 seconds)
[06:35:50] *** Joins: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com)
[06:36:12] <bruda> floatcomplex: that does seem to better describe it.
[06:36:51] *** Quits: Brewster (~Brewster@user/brewster) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[06:37:03] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[06:37:12] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Remote host closed the connection)
[06:37:25] *** Joins: kurahaupo_ (~kurahaupo@pa49-180-189-123.pa.nsw.optusnet.com.au)
[06:37:36] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[06:37:47] *** Quits: extern (~archer@80.246.130.235) (Quit: WeeChat 3.3)
[06:38:03] *** Quits: kurahaupo (~kurahaupo@pa49-180-189-123.pa.nsw.optusnet.com.au) (Read error: Connection reset by peer)
[06:38:29] <floatcomplex> the syntax is similar but there is a lot of valid c that is not valid c++ and the type systems diverged in both function and philosophy long ago
[06:39:52] <bruda> Yea, I'm in 2nd edition of K&R and there's already been mention of old C practices that should be replaced with ideas from the new standard.
[06:39:58] <fizzie> Objective-C is a strict superset of C though. But its glOOPy parts feel occasionally even more non-C.
[06:39:59] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 264 seconds)
[06:41:00] <floatcomplex> objective-c is a strict superset of c, but there are some gnu extensions that work in c but not objc. i don't remember which though
[06:41:39] <floatcomplex> getting pure C code running on ios is pretty easy, though, because of objc
[06:43:12] <quartz> Can someone tell me what they are trying to do at line 23 in this code? https://bpa.st/ORGQ
[06:43:25] <bruda> Surprisingly I don't have much exposure to iOS or even MacOS. Despite being an ITT student from 20 years ago and doing a lot of computer stuff over the years.
[06:43:40] <floatcomplex> quartz: most of that is overkill
[06:43:41] <quartz> The second parameter for fwrite is the size in bytes of each element. So why use & 00ff
[06:43:49] <quartz> floatcomplex: lol! Yes! 
[06:43:52] <fizzie> To extract the low 8 bits.
[06:43:55] <quartz> That's the name of this class
[06:44:10] <floatcomplex> quartz: you verify that something is unnecessary by throwing it in godbolt and comparing the A and B versions and seeing that they generate identical assembly
[06:44:16] <fizzie> It's the opposite of line 18.
[06:44:18] <constxd> len_host is a pair of numbers. len_host >> 8 is the first number, and len_host & 0xff is the second number
[06:44:20] <floatcomplex> s/you/you can/
[06:45:16] <floatcomplex> bruda: the ability to take a command line program with a main() function that writes to stdout and stderr, and run it in a text box in an app on your iphone, is pretty useful
[06:45:26] <quartz> fizzie: But why is it placed in that point in the function? I thought that place was for the size of the byte to be written
[06:45:26] <floatcomplex> especially since it's under 100 lines of almost entirely boilerplate code
[06:45:47] <constxd> yes
[06:45:49] <fizzie> quartz: It is the size. It's strlen(r->msg).
[06:46:02] <bruda> floatcomplex: nice. What is iOS written in? Objective-C?
[06:46:15] <constxd> len_host >> 8 is the length of the name, and len_host & 0xff is the length of the message
[06:46:22] <fizzie> It's just being extracted from len_host rather than being called again.
[06:46:35] <floatcomplex> bruda: if you mean what are apps written in, they're objc or swift, but with as much c or c++ or fortran or ada or whatever else linked into the binary as you want
[06:46:44] <floatcomplex> bruda: it's a fully posix environment with a couple key caveats
[06:47:13] <floatcomplex> the most glaring one being that fork() returns enosys
[06:47:18] <bruda> Perhaps being stuck in Android is a limitation then eh? heh.
[06:47:25] <floatcomplex> i wouldn't know
[06:48:06] <floatcomplex> can you write android apps in native code or do they have to be java or kotlin
[06:48:15] <quartz> So they crammed two variables into one.
[06:48:20] <quartz> LIke ya'll said before
[06:48:35] <bruda> floatcomplex: good question. Haven't tried doing anything besides general usage on my Android phone. Heh.
[06:48:38] <fizzie> You can compile native code; you don't get to use most of the SDK without going through JNI though.
[06:48:39] <quartz> Honestly, making problems like this is not really necessary I feel
[06:49:13] <fizzie> But it doesn't take very much boilerplate to run pure C code and put the output into a text box.
[06:49:40] <fizzie> For example, you can have the UI part in Java/Kotlin and put a pipe between.
[06:49:50] <floatcomplex> ok
[06:50:42] <fizzie> And a lot of games do the all-native thing, with OpenGL ES / Vulkan from the native code, because they don't care about Android UI bits anyway.
[06:50:57] *** Quits: Muzer (~muzer@tim32.org) (Ping timeout: 250 seconds)
[06:51:03] <fizzie> And whatever that audio API was called, can't remember.
[06:51:10] <bruda> The only thing besides genral PC that I've tried playing with on a technical level is Raspberry Pi. Even then I haven't done anything fancy yet. Just setting up the Linux environment and configuring servers/etc.
[06:51:38] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:51:40] <rcf> The audio API on Android is a travesty and I fail to understand how it was ever allowed to exist, but as an iOS user I may be spoiled in that regard. 
[06:52:37] <floatcomplex> fizzie: now i want to know how fast the fastest android phone in this channel evaluates https://godbolt.org/z/vcEsfehh3
[06:52:52] <floatcomplex> rcf: i guarantee you the audio api on ios is worse
[06:52:55] <rcf> I suppose at the time the GUI latency was still so bad it didn't matter if realtime audio processing was available 
[06:53:07] *** Quits: Gimble (~G1mble2@2a01:4b00:8e07:7900:258a:d8a:632b:a428) (Remote host closed the connection)
[06:53:56] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[06:54:02] <fizzie> For that sort of developer-audience-only tests, you can just compile to a regular executable and run in an `adb shell` as well.
[06:54:24] <floatcomplex> actually i take that back. AudioQueue on ios/macos is not terrible, it's basically the equivalent of the sdl audio callback functionality, but it does have some pretty nondeterministic latency compared to the lower level audio APIs
[06:54:34] <floatcomplex> so if that doesn't matter to you then it's not bad
[06:55:15] <rcf> To me the rather low default latency is exactly why I like iOS. 
[06:55:35] <bruda> SDL, that ended up being some handy stuff. I think I recall some basic games using SDL libraries with some degree of success.
[06:55:52] <floatcomplex> rcf: which level of audio api were you using
[06:55:56] <pragma-> plenty of successful Steam/GOG games use SDL too.
[06:55:57] *** Joins: Brewster (~Brewster@104.145.226.5)
[06:57:05] <rcf> floatcomplex: I mean strictly as a user, I don't care about development. The fact that music applications with reasonable latency are the norm is immensely useful; I can do quite a bit on just my phone, rather than bringing along a proper computer with a proper DAW. 
[06:57:45] <floatcomplex> yeah
[06:58:59] *** Joins: aquijoule__ (~richbridg@213-225-12-152.nat.highway.a1.net)
[06:59:27] <floatcomplex> when i did a smoothly scrolling spectrogram app a few years ago, AudioQueue was very visibly too slow and jittery, i had to had to use the next lower level api
[07:00:49] *** Joins: bliminse_ (~bliminse@host86-188-36-178.range86-188.btcentralplus.com)
[07:00:55] *** Quits: bliminse (~bliminse@host86-185-253-43.range86-185.btcentralplus.com) (Ping timeout: 250 seconds)
[07:01:16] *** Joins: Muzer (~muzer@tim32.org)
[07:01:26] *** Quits: mimmy_ (~mimmy@72.142.88.18) (Quit: WeeChat 3.3)
[07:01:29] *** Quits: aquijoule_ (~richbridg@089144202142.atnat0011.highway.a1.net) (Ping timeout: 265 seconds)
[07:02:54] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[07:03:30] <floatcomplex> which had its own issues
[07:04:35] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Quit: Leaving)
[07:05:24] *** Quits: alch (~alch@151.34.47.27) (Read error: Connection reset by peer)
[07:05:49] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[07:06:19] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 265 seconds)
[07:08:26] *** Joins: Gimble (~G1mble2@2a01:4b00:8e07:7900:3ed4:c609:231d:b941)
[07:08:49] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[07:08:58] *** Quits: rgrinberg (~textual@201.192.183.100) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:09:12] *** Joins: alch (~alch@151.34.73.106)
[07:11:14] <bruda> If I was to write code to determine the ranges of various numeric types, how would I know I've hit the limit? Do I discover this by doing it and using error output?
[07:11:16] <fizzie> The native Android audio APIs are OpenSL ES (that's the one I was trying to remember) and the Android-specific AAudio (allegedly just your minimal audio stream thing), both of which I imagine should make low-latency audio from native code *possible*; but presumably a bunch of apps will just stick to the Java APIs instead.
[07:11:57] <bruda> learning from the error output, I should say.
[07:12:08] <pragma-> https://play.google.com/store/apps/details?id=org.intoorbit.spectrum is the spectrum analyzer app i use on android and it's great
[07:13:40] <fizzie> There's no "error output" for exceeding the ranges of numeric types, generally. As for writing code to determine the ranges -- doing it for the unsigned types is pretty trivial, doing it for signed types in an entirely strictly conforming way... probably quite tricky if at all possible. Of course nobody *needs* to do that, because there's constants for all the limits.
[07:14:13] <bruda> just looking at exercise 2-1 in K&R.
[07:14:39] <bruda> it mentions using constants AND doing computation to reveal the limits
[07:14:54] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[07:15:29] <bruda> ,kr2-1
[07:15:29] <candide> Chapter 2: Types, Operators and Expressions; Exercise 2-1. Write a program to determine t​he ranges of char, short, int, and long variables, both signed and unsigned, by printing appropriate values from standard headers and by direct computation. Harder if you compute them: determine t​he ranges of t​he various floating-point types.
[07:16:32] <fizzie> Yeah, I don't like that exercise. It really invites implementation-defined/undefined code. At least for the minimum value of a signed type, if not the others.
[07:16:55] <bruda> Would the number simply hit a limit and not grow any further? Like I could test if the number hasn't changed after increment/decrement?
[07:16:57] *** Joins: torstenvl (~torstenvl@c-73-39-140-8.hsd1.va.comcast.net)
[07:17:03] <fizzie> No.
[07:17:19] *** Quits: torstenvl (~torstenvl@c-73-39-140-8.hsd1.va.comcast.net) (Remote host closed the connection)
[07:17:42] <fizzie> ,c11 6.5p5
[07:17:42] <candide> http://www.iso-9899.info/n1570.html#6.5p5 [Expressions] If an exceptional condition occurs during t​he evaluation of an expression (that is, if t​he result is not mathematically defined or not in t​he range of representable values for its type), t​he behavior is undefined.
[07:17:54] *** Joins: torstenvl (~torstenvl@2601:14b:200:1e9c:cd54:57a0:edfa:e8de)
[07:18:05] *** Quits: torstenvl (~torstenvl@2601:14b:200:1e9c:cd54:57a0:edfa:e8de) (Remote host closed the connection)
[07:18:05] <fizzie> That's why the "obvious" solutions all rely on undefined behavior.
[07:18:25] *** Joins: torstenvl (~torstenvl@2601:14b:200:1e9c:cd54:57a0:edfa:e8de)
[07:18:29] <bruda> Honestly I'm curious now. Shoot for the limit just to see what happens. Surely it won't set off a death signal for my system lol
[07:18:40] <fizzie> (Except for the unsigned types, where what happens is defined.)
[07:18:40] *** Quits: torstenvl (~torstenvl@2601:14b:200:1e9c:cd54:57a0:edfa:e8de) (Remote host closed the connection)
[07:19:14] *** Joins: torstenvl (~torstenvl@2601:14b:200:1e9c:cd54:57a0:edfa:e8de)
[07:19:24] *** Quits: torstenvl (~torstenvl@2601:14b:200:1e9c:cd54:57a0:edfa:e8de) (Remote host closed the connection)
[07:19:40] <dave0> bruda: the problem is that you can't do the operation and then check if it failed... you must check if it will fail in advance
[07:19:56] <bruda> hmm. 
[07:20:03] <dave0> bruda: you can't use + to check if it will fail and then use + to do the add
[07:20:28] <bruda> So this exercise isn't really feasible?
[07:20:38] <floatcomplex> checking before is exactly the same amount of effort as checking after, it's just not called "try...catch"
[07:21:05] <fizzie> It's feasible to do in an implementation-defined way. I don't think it's a good exercise in a general C programming text, though.
[07:21:35] *** Quits: cm007magnum (~Rheanna@101.91.232.166) (Remote host closed the connection)
[07:21:40] <fizzie> For an unsigned type, the "direct computation" of the maximum value is quite boring.
[07:21:45] <fizzie> ,cc printf("%u = %u", UINT_MAX, ~0u);
[07:21:47] <dave0> bruda: the values from the limits.h header is good to learn... trying to compute the values in some ad-hoc way is bad mojo
[07:21:48] <candide> fizzie: 4294967295 = 4294967295
[07:21:52] <bruda> Well they definitely didn't cover anything thus far in the book to give me a clue how to compute such a thing. Though I could probably handle returning the values from the standard library. I'm guessing limits.h would be insightful.
[07:22:12] <bruda> dave0: right, that's what I'm gathering.
[07:22:54] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[07:23:17] <fizzie> The "by printing appropriate values from standard headers" bit is fine. I mean, it's not a particularly exciting exercise. But at least you get to see your particular implementation's details.
[07:23:20] *** Joins: Colt (~Colt@user/colt)
[07:24:29] <bruda> Yea. I'll learn something that way. The computation bit still has me wondering, how exactly did they foresee someone accomplishing that so early in the course?
[07:25:03] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5d71-0aee-812d-c1b0.res6.spectrum.com)
[07:25:20] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5d71-0aee-812d-c1b0.res6.spectrum.com) (Client Quit)
[07:25:38] *** Quits: SGautam (uid286066@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[07:28:15] <bruda> As a newbie I'd have guessed they expected me to dive into running up the variables and seeing where they blew up at.
[07:28:57] <fizzie> K&R is perhaps a little bit too happy with implementation-specific code occasionally. But yeah, I think you'd at least want to go read chapter 2.9 before attempting to compute them arithmetically.
[07:29:43] <bruda> bitwise operators?
[07:30:50] <fizzie> Well, bits is what the numeric types are made out of.
[07:31:54] <bruda> so I could shift the bits until hitting some kind of limit or something like that?
[07:32:16] <fizzie> Yes. Except it'd be still undefined for a signed type.
[07:32:25] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 265 seconds)
[07:32:47] <fizzie> And chapter 2.9 could stand to be a little more careful. It says things like "right-shifting a signed quantity will fill with sign bits on some machines and with 0-bits on others", which is... practically speaking true, but in terms of the language (C11 6.5.7p5) "if [the right-shifted value] has a signed type and a negative value, the resulting value is implementation-defined", which doesn't restrict it
[07:32:48] <fizzie> to just those two options.
[07:33:22] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[07:33:32] <bruda> meh. I guess I'll at least write some code that prints out the limits from the standard headers. At least I'll see some useful data and not get ahead of myself thus far in the book.
[07:34:07] <bruda> I see INT_MAX n such. 
[07:34:10] <fizzie> And the `getbits` example function in chapter 2.9 is undefined at least for any values of n > 0, due to the `~0 << n` subexpression.
[07:35:22] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:a4ef:f059:ad4c:b8a4)
[07:35:22] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:a4ef:f059:ad4c:b8a4) (Changing host)
[07:35:22] *** Joins: skapata (~Skapata@user/skapata)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:37:05] <fizzie> In fact I guess for n == 0 just as much.
[07:37:52] <bruda> Feels like this book is gonna be a scary course. I'll be as stubborn as I can lol
[07:39:57] <fizzie> Most of the time it's a fine book. It's just a few of these implementation-defined/undefined corner cases where it's a little too... practical to my tastes. Not that there's anything wrong with implementation-specific code, it's just that a language textbook ought to make it clear when it's doing that.
[07:39:58] *** Quits: pulse_ (~pulse@user/pulse) (Quit: Join a community of creative supermutants on https://indiedevs.net/)
[07:40:05] *** Joins: kdc (~kdc@196.211.197.159)
[07:40:22] *** Joins: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net)
[07:40:28] <bruda> Fair enough.
[07:41:52] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[07:43:03] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Ping timeout: 265 seconds)
[07:43:07] *** Joins: varioust_ (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[07:43:07] <bruda> I actually have a number of C books to go through. Just heard that this one is a recommended read.
[07:43:27] <bruda> Given the authors it made sense to at least try to cover it.
[07:43:39] *** varioust_ is now known as varioust
[07:44:19] <bruda> Might give my brain a rest for the night though.
[07:45:04] <tusko> I have 2 files A and B. A defines some macros. B includes A's header and defines some other macros that have as their value macros defined in A.
[07:45:15] <tusko> Why would these be unresolved?
[07:45:23] *** Quits: the (~the@2620:8d:8000:1044:b6ca:1ac:6dab:2ab1) (Ping timeout: 264 seconds)
[07:45:50] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Client Quit)
[07:46:30] *** Joins: cm007magnum (~Rheanna@218.78.67.149)
[07:47:24] *** Quits: nyah (~nyah@94.6.71.219) (Ping timeout: 265 seconds)
[07:48:48] <floatcomplex> fizzie: do that godbolt on an anderphone tho
[07:49:06] <tusko> https://bpa.st/DXCA
[07:51:27] <tusko> Actually this is more correct https://bpa.st/3RKQ
[07:53:40] *** Quits: Satin (uid193953@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[07:55:50] *** Joins: the (~the@2620:8d:8000:1044:b6ca:1ac:6dab:2ab1)
[07:57:33] *** Quits: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net) (Ping timeout: 265 seconds)
[07:58:26] *** Joins: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net)
[07:58:48] <bruda> I'm a newbie but just curious, what happens if you include both headers in the .c file instead of including A.h in B.h?
[07:59:24] <bruda> Nobody else is answering so I'm just throwing something out there. heh.
[07:59:35] <tusko> I'd get bitched at about it being not good coding practices
[08:00:01] <dave0> bruda: it will include A.h twice, which usually makes the compiler complain about multiple definitions
[08:00:19] <bruda> I mean, take that include out of B.h. Just include the two headers.
[08:00:47] <bruda> IDK. Like I said I'm a newbie.
[08:01:09] <dave0> it comes down to style.. some people say include files shouldn't include other files... other people say the opposite
[08:01:36] <tusko> yeah, I'm definitely catering to some person's preferences on that matter
[08:01:40] <dave0> the standard c library lets you include the same file twice
[08:01:40] <bruda> Hmm. Okay.
[08:01:48] <tusko> in my mind it just occurs linearly as the includes are encountered
[08:01:53] <dave0> so there's precendent there
[08:02:31] <dave0> ,cc #include <stdio.h> \n #include <stdio.h> \n #include <stdio.h>
[08:02:34] <candide> dave0: Success (no output).
[08:03:02] <pragma-> #include doesn't need \n because candide can tell where teh <>'s are!
[08:03:08] <dave0> whether you follow the standard library practise is also a matter of style :-p
[08:03:26] <tusko> fileB says ENERGY_MODE1 can't be resolved, so it sees that DEVICE_EM is defined in the header, but then complains it doesn't know what the value means.
[08:04:58] *** Joins: Guest80 (~Guest80@pd9ed7c7f.dip0.t-ipconnect.de)
[08:05:46] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 265 seconds)
[08:06:12] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[08:06:15] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Ping timeout: 265 seconds)
[08:07:03] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[08:07:03] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[08:07:03] *** Joins: wroathe (~wroathe@user/wroathe)
[08:09:37] *** Joins: G1mble (~G1mble2@2a02:c7f:ae0f:8000:6296:c696:de8d:959e)
[08:11:29] *** Quits: cm007magnum (~Rheanna@218.78.67.149) (Remote host closed the connection)
[08:12:32] *** Quits: Gimble (~G1mble2@2a01:4b00:8e07:7900:3ed4:c609:231d:b941) (Ping timeout: 265 seconds)
[08:13:46] *** Joins: cm007magnum (~Rheanna@61.171.21.169)
[08:17:47] <bruda> The more I read about headers the less I see wrong with what you are doing. 
[08:18:21] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Quit: varioust)
[08:18:58] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[08:22:36] *** Quits: stevelitt (~stevelitt@2603:9001:70d:6d00:2ef0:5dff:fe7a:5c1d) (Ping timeout: 245 seconds)
[08:22:39] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Leaving)
[08:24:31] <bruda> I wonder if seeing the preprocessor output would provide some clues.
[08:28:08] *** Joins: G1mbIe (~G1mble2@2a01:4b00:8e07:7900:8338:a10b:3aed:1f2e)
[08:30:54] *** Quits: G1mble (~G1mble2@2a02:c7f:ae0f:8000:6296:c696:de8d:959e) (Ping timeout: 265 seconds)
[08:30:54] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 265 seconds)
[08:31:56] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[08:32:57] *** Quits: bruda (~bruda@172.58.62.226) (Quit: Brain needs a rest. Good night World.)
[08:33:04] *** Quits: superboot (~agentgasm@user/superboot) (Ping timeout: 256 seconds)
[08:34:32] *** Joins: superboot (~agentgasm@user/superboot)
[08:34:57] *** Quits: constxd (~brad@142.134.38.68) (Ping timeout: 250 seconds)
[08:34:59] *** Joins: mh3f_ (~mhowle@cpe-98-25-217-234.sc.res.rr.com)
[08:35:11] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[08:35:35] *** Joins: stevelitt (~stevelitt@2603:9001:70d:6d00:2ef0:5dff:fe7a:5c1d)
[08:36:59] *** Quits: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com) (Ping timeout: 264 seconds)
[08:37:37] <caze> tusko: You shouldn't define things in headers.
[08:37:40] <rahl> fizzie: dareth thou speak ill of our fine prophets?!
[08:38:28] * oldlaptop weakly protests about inline functions
[08:38:39] <dave0> <3 inline functions
[08:39:11] * oldlaptop less-weakly protests about #defines
[08:41:32] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Ping timeout: 265 seconds)
[08:41:57] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[08:44:01] <rcf> Defining things in headers is fine, so long as they are static and guarded properly. 
[08:44:11] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[08:46:39] *** Quits: superboot (~agentgasm@user/superboot) (Ping timeout: 250 seconds)
[08:48:07] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[08:48:07] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[08:48:07] *** Joins: wroathe (~wroathe@user/wroathe)
[08:50:52] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[08:52:39] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 265 seconds)
[08:57:26] *** Joins: larry87 (~quassel@2601:2c7:4280:17a0:1048:6f6a:9cd9:ae7b)
[08:58:18] *** Joins: vitimiti (~Celtor@2a02:c7f:44ab:3100:35b3:87ca:e421:9bb5)
[08:59:12] *** Joins: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net)
[08:59:45] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[08:59:55] *** Quits: vitimiti (~Celtor@2a02:c7f:44ab:3100:35b3:87ca:e421:9bb5) (Remote host closed the connection)
[09:00:16] *** Joins: vitimiti (~Celtor@2a02:c7f:44ab:3100:35b3:87ca:e421:9bb5)
[09:00:18] <retr0> what is the scope of x: int main(){ {int x = 5;} return 0;}
[09:01:02] <retr0> it cant be function scope file scope or project scope
[09:01:29] *** Quits: cm007magnum (~Rheanna@61.171.21.169) (Remote host closed the connection)
[09:02:15] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[09:03:41] *** Joins: cm007magnum (~Rheanna@218.78.53.13)
[09:03:45] <rahl> homework?
[09:03:51] <retr0> no
[09:04:18] <retr0> the education system is evil
[09:04:46] <retr0> it makes students compete with each other
[09:05:55] <retr0> im just a nobody bec as use I am aint got a degree. a nobody who is good and whom isnt using python
[09:06:20] <retr0> because I aint*
[09:06:46] <retr0> i know theres block scope
[09:07:01] <retr0> but that isnt officially a C term
[09:07:12] <retr0> in k&r v2
[09:07:40] <floatcomplex> education in general is important. learning C in a classroom is not a great fit for the material
[09:07:49] <retr0> and anything that uses { } is a block technically
[09:08:03] <retr0> like functions or arrays
[09:10:05] <retr0> so im asking for exact wording here
[09:10:30] <retr0> I know that x is not accessable from anything
[09:10:39] <floatcomplex> it's block scope
[09:10:43] <retr0> outside of the { }
[09:10:49] <retr0> ok
[09:12:23] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[09:16:05] *** Quits: Guest1099 (~Inline@2a02:908:1252:7a80:731:d6ac:6e05:dbb3) (Quit: Leaving)
[09:16:08] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 256 seconds)
[09:16:13] *** Quits: Inline (~Inline@2a02:908:1252:7a80:731:d6ac:6e05:dbb3) (Quit: Leaving)
[09:16:37] *** Quits: vitimiti (~Celtor@2a02:c7f:44ab:3100:35b3:87ca:e421:9bb5) (Remote host closed the connection)
[09:17:44] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[09:18:14] *** Joins: vitimiti (~Celtor@2a02:c7f:44ab:3100:35b3:87ca:e421:9bb5)
[09:19:20] *** Quits: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net) (Quit: Client closed)
[09:20:01] *** Joins: torstenvl (~torstenvl@c-73-39-140-8.hsd1.va.comcast.net)
[09:23:32] *** Quits: Guest80 (~Guest80@pd9ed7c7f.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[09:23:38] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:c9f:2c60:f4a5:3f3b)
[09:24:38] *** Quits: torstenvl (~torstenvl@c-73-39-140-8.hsd1.va.comcast.net) (Ping timeout: 256 seconds)
[09:25:43] *** Joins: carlavilla (~carlavill@2a0c:5a84:3607:2f00:221:6bff:fe3b:cee4)
[09:27:11] *** Joins: seninha (~seninha@user/seninha)
[09:32:01] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[09:33:40] *** Joins: superboot (~agentgasm@user/superboot)
[09:39:28] *** Quits: n8chan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Read error: No route to host)
[09:40:30] *** Joins: n8chan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[09:40:47] *** Quits: whatsupdoc (uid509081@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[09:41:25] *** Joins: frost (~frost@user/frost)
[09:42:45] *** Quits: frost (~frost@user/frost) (Client Quit)
[09:44:41] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 245 seconds)
[09:47:53] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[09:49:25] *** Quits: rackj (~rackj@c-73-140-240-136.hsd1.wa.comcast.net) (Quit: Client closed)
[09:52:05] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Ping timeout: 250 seconds)
[10:00:49] *** Joins: frost (~frost@user/frost)
[10:01:50] *** Joins: Feuermagier_ (~Feuermagi@2a02:2488:4211:3400:b6fd:ec18:acf6:f1a8)
[10:04:02] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 268 seconds)
[10:04:13] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 250 seconds)
[10:05:53] *** Parts: Kotz[m] (~kotzcatgi@2001:470:69fc:105::1:3665) ()
[10:10:55] *** Joins: boB_K7IQ (~boB_K7IQ@ip98-177-87-213.ph.ph.cox.net)
[10:11:10] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[10:19:02] *** Quits: KnownSyntax (sid233169@user/knownsyntax) (Ping timeout: 256 seconds)
[10:20:35] *** Joins: KnownSyntax (sid233169@user/knownsyntax)
[10:22:14] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[10:23:21] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[10:30:06] *** Quits: mikey__ (~mikey__@user/mikey/x-6463285) (Ping timeout: 276 seconds)
[10:30:43] *** Joins: Satin (uid193953@ilkley.irccloud.com)
[10:38:51] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[10:39:59] *** Quits: the (~the@2620:8d:8000:1044:b6ca:1ac:6dab:2ab1) (Ping timeout: 264 seconds)
[10:40:44] *** Joins: retroid_ (~retro@97e2ba2e.skybroadband.com)
[10:40:53] *** Quits: carlavilla (~carlavill@2a0c:5a84:3607:2f00:221:6bff:fe3b:cee4) (Remote host closed the connection)
[10:41:42] *** Quits: cm007magnum (~Rheanna@218.78.53.13) (Remote host closed the connection)
[10:42:39] *** Joins: cm007magnum (~Rheanna@61.171.21.169)
[10:43:30] *** Quits: retro_ (~retro@97e2ba2e.skybroadband.com) (Ping timeout: 268 seconds)
[10:46:58] *** Quits: avar (avar@vm.nix.is) (Quit: Lost terminal)
[10:47:31] *** Joins: avar (avar@vm.nix.is)
[10:48:11] *** Joins: jusski (~user@78-63-85-123.static.zebra.lt)
[10:51:37] *** whatsupboy is now known as skipper
[10:51:50] *** Joins: mikey__ (~mikey__@user/mikey/x-6463285)
[10:53:04] *** Joins: torstenvl (~torstenvl@c-73-39-140-8.hsd1.va.comcast.net)
[10:53:55] *** Joins: Guest80 (~Guest80@pd9ed7c7f.dip0.t-ipconnect.de)
[10:54:59] *** Quits: rsarson (~rsarson@2607:fea8:29e1:b000::9037) (Ping timeout: 264 seconds)
[10:55:49] *** Joins: rsarson (~rsarson@2607:fea8:29e1:b000::9037)
[10:56:07] *** Parts: mikey__ (~mikey__@user/mikey/x-6463285) ()
[11:01:23] *** Quits: trisk (~trisk@2601:196:4700:1f14:8:20ff:fe3e:890e) (Ping timeout: 268 seconds)
[11:01:59] *** Joins: trisk (~trisk@c-73-253-10-38.hsd1.ma.comcast.net)
[11:02:00] *** Joins: mrig (~AdiIRC@user/mrig)
[11:03:01] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[11:05:30] *** Quits: alch (~alch@151.34.73.106) (Read error: Connection reset by peer)
[11:07:59] *** Quits: G1mbIe (~G1mble2@2a01:4b00:8e07:7900:8338:a10b:3aed:1f2e) (Quit: Leaving)
[11:08:45] *** Joins: meator (~meator@user/meator)
[11:09:33] *** Joins: alch (~alch@151.68.43.53)
[11:13:07] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Ping timeout: 250 seconds)
[11:17:04] *** Joins: retro_ (~retro@97e2ba2e.skybroadband.com)
[11:17:07] *** Joins: slidercrank (~slidercra@user/slidercrank)
[11:19:26] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[11:19:52] *** Joins: bindu (~bindu@user/bindu)
[11:20:30] *** Quits: retroid_ (~retro@97e2ba2e.skybroadband.com) (Ping timeout: 268 seconds)
[11:21:43] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[11:23:26] *** Joins: sheldon (~sheldon@user/sheldon)
[11:23:57] *** Quits: soapsudsxx (~soapsudsx@209.221.40.158) (Remote host closed the connection)
[11:25:22] *** Quits: acolarh (~niels@3e6be663.rev.stofanet.dk) (Ping timeout: 260 seconds)
[11:26:46] *** Quits: cation (cation@user/cation) (Ping timeout: 260 seconds)
[11:28:17] *** Quits: Murray7501 (~Murray@89.109-247-180.customer.lyse.net) (Ping timeout: 264 seconds)
[11:28:37] *** Joins: Murray7501 (~Murray@89.109-247-180.customer.lyse.net)
[11:29:16] *** Joins: cation (cation@user/cation)
[11:32:02] *** Quits: cm007magnum (~Rheanna@61.171.21.169) (Remote host closed the connection)
[11:32:26] *** Joins: plainoldcheese (~plainoldc@user/plainoldcheese)
[11:34:41] *** Quits: rahl (~rahl@102.114.3.99) (Ping timeout: 268 seconds)
[11:35:42] *** Quits: fstd_ (~fstd@xdsl-78-35-74-116.nc.de) (Read error: Connection reset by peer)
[11:35:50] *** Joins: fstd (~fstd@xdsl-78-35-74-116.nc.de)
[11:36:24] *** Joins: rahl (~rahl@102.114.43.255)
[11:38:32] *** Quits: drew (~drew@user/drew) (Remote host closed the connection)
[11:39:00] *** Joins: drew (~drew@user/drew)
[11:40:20] *** Quits: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com) (Read error: Connection reset by peer)
[11:41:47] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[11:41:49] *** Quits: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374) (Remote host closed the connection)
[11:42:08] *** Joins: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374)
[11:43:56] *** Joins: EdFletcher (~PKD@user/edfletcher)
[11:44:33] *** Joins: aradesh (~aradesh@user/aradesh)
[11:44:35] *** Quits: pucara (~i@181.95.204.204) (Quit: Lost terminal)
[11:44:57] *** Joins: alioui (~medeva293@197.3.136.195)
[11:45:53] *** Joins: rcoote (~rcoote@2a02:908:69a:58a0:7d:96fd:7312:e7d8)
[11:48:52] *** Quits: asdflkj_sh (asdflkj@bsdforall.org) (Ping timeout: 268 seconds)
[11:52:35] *** Joins: cm007magnum (~Rheanna@218.78.109.69)
[11:53:14] *** Quits: dohtem (uid524096@user/dohtem) (Quit: Connection closed for inactivity)
[11:54:01] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.3)
[11:55:02] *** Joins: asdflkj_sh (asdflkj@pyritepyro.lemon.ircnow.org)
[11:55:33] *** Joins: Rounin (~david@84.212.130.215)
[11:56:06] *** Quits: drew (~drew@user/drew) (Remote host closed the connection)
[11:56:26] *** Joins: drew (~drew@user/drew)
[11:57:58] *** Joins: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com)
[12:04:22] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[12:13:53] *** Joins: vysn (~vysn@user/vysn)
[12:17:35] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 265 seconds)
[12:21:35] *** Quits: cm007magnum (~Rheanna@218.78.109.69) (Remote host closed the connection)
[12:22:39] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[12:23:06] *** Joins: whatsupdoc (uid509081@hampstead.irccloud.com)
[12:23:41] *** Joins: cm007magnum (~Rheanna@218.78.105.67)
[12:27:18] *** GlobalBanksta is now known as kish`
[12:29:49] *** Quits: torstenvl (~torstenvl@c-73-39-140-8.hsd1.va.comcast.net) (Remote host closed the connection)
[12:31:12] *** Joins: torstenvl (~torstenvl@2601:14b:200:1e9c:cd54:57a0:edfa:e8de)
[12:31:21] *** Joins: fanis30 (~fanis30@adsl-19.37.6.161.tellas.gr)
[12:34:59] *** Joins: sickdugongo (~sickdugon@user/sickdugongo)
[12:36:23] *** Quits: torstenvl (~torstenvl@2601:14b:200:1e9c:cd54:57a0:edfa:e8de) (Ping timeout: 264 seconds)
[12:39:52] *** Joins: topside (~topside@ip68-226-238-34.lf.br.cox.net)
[12:44:06] *** Quits: topside_ (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 256 seconds)
[12:45:10] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[12:45:28] *** Joins: Colt (~Colt@user/colt)
[12:46:51] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:49:29] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:c9f:2c60:f4a5:3f3b) (Quit: Leaving)
[12:57:46] *** Joins: dacav (~dacav@h94-245-9-199.cust.a3fiber.se)
[12:58:11] *** Quits: Thedarkb (~Thedarkb@cpc105342-pool17-2-0-cust428.15-1.cable.virginm.net) (Ping timeout: 265 seconds)
[12:59:36] *** Joins: seninha (~seninha@user/seninha)
[12:59:58] *** Joins: superdupond (~Kev@2a01cb0400149f003cb560b0419e9063.ipv6.abo.wanadoo.fr)
[13:00:10] *** Joins: Thedarkb (~Thedarkb@cpc105342-pool17-2-0-cust428.15-1.cable.virginm.net)
[13:00:15] *** Joins: earnestly (~earnest@user/earnestly)
[13:04:46] *** Quits: Thedarkb (~Thedarkb@cpc105342-pool17-2-0-cust428.15-1.cable.virginm.net) (Ping timeout: 260 seconds)
[13:06:15] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[13:10:35] *** Joins: Thedarkb (~Thedarkb@cpc105342-pool17-2-0-cust428.15-1.cable.virginm.net)
[13:11:42] *** Quits: cm007magnum (~Rheanna@218.78.105.67) (Remote host closed the connection)
[13:12:18] *** Joins: bbju (~bbju@103.144.148.219)
[13:12:43] *** Quits: bbju (~bbju@103.144.148.219) (Client Quit)
[13:13:00] *** Joins: gproto23 (~gproto23@user/gproto23)
[13:13:25] *** Joins: slidercrank (~slidercra@user/slidercrank)
[13:14:02] *** Joins: cm007magnum (~Rheanna@218.78.67.149)
[13:16:13] *** Quits: fanis30 (~fanis30@adsl-19.37.6.161.tellas.gr) (Quit: WeeChat 3.3)
[13:17:56] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[13:19:29] *** Quits: plainoldcheese (~plainoldc@user/plainoldcheese) (Quit: WeeChat 3.3)
[13:29:13] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:70c4:a159:b2ac:187f)
[13:44:56] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[13:47:00] *** Quits: trisk (~trisk@c-73-253-10-38.hsd1.ma.comcast.net) (Ping timeout: 256 seconds)
[13:47:55] *** Joins: random-nick (~random-ni@87.116.165.220)
[13:48:42] *** Quits: ullbeking (sid5364@user/ullbeking) (Ping timeout: 256 seconds)
[13:48:42] *** Quits: bjs (sid190364@user/bjs) (Ping timeout: 256 seconds)
[13:48:42] *** Quits: Pent (sid313808@lymington.irccloud.com) (Ping timeout: 256 seconds)
[13:49:07] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Ping timeout: 250 seconds)
[13:49:38] *** Joins: bjs (sid190364@user/bjs)
[13:49:38] *** Joins: Pent (sid313808@lymington.irccloud.com)
[13:50:00] *** Joins: ullbeking (sid5364@user/ullbeking)
[13:52:05] *** Joins: AmR (~AmREiSa@156.199.67.156)
[13:53:33] *** Joins: plainoldcheese (~plainoldc@user/plainoldcheese)
[13:54:19] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 250 seconds)
[13:55:26] *** Joins: trisk (~trisk@c-73-253-10-38.hsd1.ma.comcast.net)
[13:55:35] *** Joins: random-nick (~random-ni@87.116.165.220)
[13:59:08] *** Joins: reset (~reset@user/reset)
[14:01:50] *** Quits: cm007magnum (~Rheanna@218.78.67.149) (Remote host closed the connection)
[14:02:10] *** Joins: ko (~i.am@user/marlboro)
[14:03:53] <fizzie> floatcomplex: Thing is, I don't have any excitingly high-end Androids, just a bunch of those reasonable-value-for-money Pixel *a ones (3a, 4a, 4a 5G, 5a). And a Xiaomi something-or-another for testing an OEM-specific issue. Sure, I can run it on one of those, but it won't be the "fastest Android" you were asking for.
[14:03:57] *** Joins: BSaboia (~bsaboia@177.37.198.227)
[14:08:49] *** Quits: mountaingoat (~mountaing@user/mountaingoat) (Ping timeout: 250 seconds)
[14:08:52] *** Quits: plainoldcheese (~plainoldc@user/plainoldcheese) (Quit: WeeChat 3.3)
[14:09:22] *** Quits: trisk (~trisk@c-73-253-10-38.hsd1.ma.comcast.net) (Quit: WeeChat 3.3)
[14:09:34] *** Joins: trisk (~trisk@c-73-253-10-38.hsd1.ma.comcast.net)
[14:09:58] *** Quits: trisk (~trisk@c-73-253-10-38.hsd1.ma.comcast.net) (Remote host closed the connection)
[14:10:17] *** Joins: trisk (~trisk@c-73-253-10-38.hsd1.ma.comcast.net)
[14:11:28] <fizzie> floatcomplex: Well, I compiled it with "Android (7284624, based on r416183b) clang version 12.0.5" -O2 and ran it on a Pixel 4a 5G (Qualcomm Snapdragon 765G), and it runs in 251-269ms, whatever that means.
[14:14:46] *** Joins: edk (edk@libera/staff/edk)
[14:16:12] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[14:16:27] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[14:20:47] *** Quits: trisk (~trisk@c-73-253-10-38.hsd1.ma.comcast.net) (Ping timeout: 264 seconds)
[14:21:39] *** Joins: mountaingoat (~mountaing@user/mountaingoat)
[14:23:14] *** Joins: trisk (~trisk@c-73-253-10-38.hsd1.ma.comcast.net)
[14:28:24] *** Joins: topside_ (~topside@ip68-226-238-34.lf.br.cox.net)
[14:29:21] <katnis> i still havent understood the concept of pointer
[14:29:44] *** Joins: strajder (~strajder@user/strajder)
[14:30:09] *** Quits: trisk (~trisk@c-73-253-10-38.hsd1.ma.comcast.net) (Quit: WeeChat 3.3)
[14:30:49] *** Joins: derjanni (~Hans@ip-88-153-100-48.hsi04.unitymediagroup.de)
[14:30:59] *** Quits: mountaingoat (~mountaing@user/mountaingoat) (Ping timeout: 265 seconds)
[14:31:32] <LangerJan> katnis: I'd be happy to try to explain it to you
[14:31:53] <koollman> katnis: it's not too difficult. just have to go back to pretty basic fundamentals
[14:31:55] <katnis> but the point is, can i understand
[14:32:15] <LangerJan> katnis: well, there is the saying: "I can explain it to you, but I can't understand it for you"
[14:32:24] *** Joins: Masklin_Gurder (~joel@h-155-4-23-152.A230.priv.bahnhof.se)
[14:32:26] *** Quits: topside (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 265 seconds)
[14:32:27] <katnis> true
[14:32:56] <X-Scale> katnis: have you read about it on K&R ?
[14:33:25] <LangerJan> katnis: so, you already know about regular types, like int, float, double, etc?
[14:33:56] <katnis> yes
[14:34:05] <katnis> not about the book yet X-Scale
[14:34:10] <katnis> LangerJan: yes i do
[14:34:16] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:35:03] *** Joins: csrf (~csrf@user/csrf)
[14:35:06] *** Joins: cart_man (~rynot@host-78-144-121-1.as13285.net)
[14:35:06] <high_ground> Pointers are basically where the data is stored on the ram. If regular types are houses then pointers would be the address of the houses
[14:35:10] <LangerJan> katnis: if you write a statement like: "int i = 42;" you directly work with an integer "i", set to a value "42"
[14:35:23] <katnis> yes
[14:36:05] <LangerJan> katnis: if you write "int *p_i;", you say "this is a thing which knows where to find an integer"
[14:36:06] *** Quits: sickdugongo (~sickdugon@user/sickdugongo) (Read error: Connection reset by peer)
[14:36:41] <katnis> cant you use just int i to get there
[14:36:47] <katnis> ok ill just listen
[14:37:24] <LangerJan> katnis: yes, but this is like a signpost. Sometimes in programming, it's nice to have those
[14:37:37] <katnis> okay
[14:37:38] *** Joins: sickdugongo (~sickdugon@5.157.101.123)
[14:37:38] *** Quits: sickdugongo (~sickdugon@5.157.101.123) (Changing host)
[14:37:38] *** Joins: sickdugongo (~sickdugon@user/sickdugongo)
[14:38:00] <katnis> so p_i is pointing at i's address
[14:38:06] <katnis> and i is 42
[14:38:13] <LangerJan> katnis: if you write "int *p_i;", you say "this is a thing which knows where to find an integer. If I ask it, it will point me to where 'i' is"
[14:38:18] <high_ground> p_i is pointing to 42
[14:38:22] <katnis> o
[14:38:24] <katnis> uh
[14:38:30] <katnis> my brain just got a small crack
[14:38:33] <LangerJan> katnis: "int *p_i = &i", that is
[14:38:45] <LangerJan> sorry, copy-paste error
[14:38:45] <katnis> @_@
[14:38:50] <katnis> i feel sick
[14:39:04] <katnis> i wish i could understand
[14:39:14] <trenka> pretty confusing explanations, I would say :)
[14:39:49] <katnis> the whole concept is
[14:39:51] <katnis> for me at least
[14:40:03] <trenka> the concept is simple
[14:40:12] <LangerJan> katnis: how old are you? Do you remember Phone Books?
[14:40:42] <fizzie> There's that boxes-and-arrows explanation, I thought that's pretty much the canonical one.
[14:40:48] <fizzie> Hard to draw on IRC though.
[14:40:57] <high_ground> lol true
[14:41:00] <rahl> I was just about to try but thought better of it
[14:41:04] <high_ground> a visual explanation would be better
[14:41:04] <LangerJan> anybody has "Pointer Fun with Blinky" handy?
[14:41:17] <edk> ,binky
[14:41:17] <candide> The Binky Pointer Fun Video: http://cslibrary.stanford.edu/104/ -- YouTube version: http://www.youtube.com/watch?v=6pmWojisM_E -- despite the video's claim, the information provided is by no means complete for understanding pointers.
[14:41:44] *** Joins: trisk (~trisk@2601:196:4700:1fa5:8:20ff:fe3e:890e)
[14:42:35] <high_ground> huh is the link broken or am i blind
[14:42:52] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:43:02] <LangerJan> yup, youtube link is set to private
[14:43:20] <katnis> LangerJan: i do
[14:43:29] <katnis> i also watched the terminator 2
[14:43:38] <katnis> remember how t 1000 found john connor
[14:43:53] <LangerJan> ^^^
[14:44:13] <katnis> the link?
[14:44:13] <LangerJan> sorry, bad analogy the longer i think about it
[14:44:31] <katnis> should i look into the link
[14:44:41] <high_ground> the link is broken sadly
[14:44:48] <katnis> o no
[14:45:04] <LangerJan> https://www.youtube.com/watch?v=5VnDaHBi8dM
[14:45:05] <candide> Title of LangerJan's link: Binky Pointer Fun Video C (High Quality 640x560) - YouTube
[14:45:13] <high_ground> nice
[14:45:19] <shiroyasha> The way pointers clicked immediately to me when my only programming experience was Python, was thinking of memory as a big file, and of pointers as an integer that tells where the value is located in that file.
[14:45:36] *** Joins: simon323 (~simon323@2409:8a34:46c:5830:40bf:b4ef:bd0:7dba)
[14:45:39] *** Joins: mountaingoat (~mountaing@user/mountaingoat)
[14:45:51] <katnis> thank you for the link
[14:46:06] <katnis> hmmm
[14:46:11] <katnis> a big file
[14:46:44] <high_ground> yea thats a good analogy
[14:47:19] <LangerJan> https://knowyourmeme.com/photos/2214246-two-soyjaks-pointing
[14:48:06] <high_ground> lol
[14:48:12] <trenka> katnis: do you understand concept of address of variable (object) in memory?
[14:48:42] <LangerJan> an "int *x" is just something which knows where to find an "int". You have to ask it, thats called "dereferencing".
[14:49:27] <LangerJan> It's like your boss, pointing you to a job to do ^^^
[14:49:47] <LangerJan> and the next day, he might point you to some other work
[14:49:54] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[14:50:08] <high_ground> yea its just the location of the variable
[14:50:18] <LangerJan> thats what makes pointers so handy, we can make them point to something else when we want to
[14:51:49] *** Joins: Klinda (~superleag@user/klinda)
[14:51:57] <rahl> may I paste 6 lines in an attempt to visualise, or bad idea?
[14:52:11] <LangerJan> "int workOfTuesday = 41; int workOfWednesday = 20; int *todaysWork = &workOfWednesday;"
[14:52:22] <katnis> trenka: not sure about this
[14:52:26] <katnis> someone taught me this before
[14:52:34] <katnis> but hard to understand 100%
[14:52:57] *** Quits: whatsupdoc (uid509081@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:53:03] <trenka> katnis: it's pretty easy to understand
[14:53:26] <trenka> katnis: you have memory array, a set of numbered cells 
[14:53:32] <trenka> let's say
[14:54:30] <trenka> you put your value 42 into cell number 10
[14:54:46] <katnis> also double pointer is hard to understand
[14:55:04] <trenka> so, you have a variable, let's say 'a', with value 42
[14:55:05] <katnis> my irccloud is unstable right now please understand if i dont answer right away
[14:55:08] <trenka> it's address is 10
[14:55:11] <trenka> it's a pointer
[14:55:14] <katnis> i think a lot of people use 100
[14:55:14] <katnis> to explain
[14:55:16] <high_ground> yea double pointers could be confusing
[14:55:29] <trenka> you can store the value in its own variable of pointer type
[14:55:44] <trenka> for double pointer repeat
[14:55:56] <edk> rahl: your explanation can't be any worse than the other ones so far, i guess
[14:55:59] <LangerJan> a "int **x" is something which knows where to find something, which in turns know where to find an integer
[14:56:06] <dave0> katnis: an address is like a mailbox ... a letter in the mailbox is like the contents of an address in memory
[14:56:16] <edk> but i feel like part of the problem is that everyone's trying to explain it
[14:56:20] *** Quits: lhtseng (sid15322@helmsley.irccloud.com) (Ping timeout: 268 seconds)
[14:56:20] *** Quits: buhman (sid411355@user/buhman) (Ping timeout: 268 seconds)
[14:56:30] <rahl> edk: don't be so sure :)
[14:56:51] <trenka> edk: I was lucky to do it in one shot :)
[14:56:58] <trenka> almost
[14:56:58] <LangerJan> yes, I will leave this attempt for now. Feel free to message me directly
[14:57:31] <katnis> ok so if i follow somewhere
[14:57:34] <rahl> Some block of memory containing integers (an array)
[14:57:34] <rahl> arr: [1][9][7][6]... ^ Address in memory: 1337
[14:57:34] <rahl> int *ptr = 1337; // `ptr` stores the address of the data
[14:57:34] <rahl> int i = *ptr;    // `i` stores the data at the address held in `ptr` (i.e. value 7)
[14:57:34] *** Quits: glowcoil (sid3405@tinside.irccloud.com) (Ping timeout: 268 seconds)
[14:57:38] <katnis> i will get what i want
[14:57:46] <rahl> damnit - backfired
[14:58:03] *** Joins: buhman (sid411355@user/buhman)
[14:58:21] <rahl> (missing newlines :/)
[14:58:24] *** Joins: lhtseng (sid15322@helmsley.irccloud.com)
[14:58:26] <dave0> katnis: opening the letter in mailbox 5 is like reading memory address 5
[14:58:41] * rahl shoots other foot for good measure
[14:58:42] <dave0> katnis: putting a letter in mailbox 9 is like writing to memory address 9
[14:59:06] <edk> new rule, only one cook is allowed near the broth
[14:59:18] <rahl> :)
[14:59:55] <dave0> katnis: double pointer is like getting the letter from mailbox 5, opening the letter and finding it says "mailbox 7" on it, so you get the letter out of mailbox 7
[15:00:22] *** Joins: glowcoil (sid3405@tinside.irccloud.com)
[15:00:34] <katnis> tricky
[15:00:53] *** Joins: cm007magnum (~Rheanna@218.78.105.67)
[15:01:00] *** Joins: Sheilong (uid293653@ilkley.irccloud.com)
[15:01:14] <dave0> the house numbers on mailboxes corresponds directly to memory addresses
[15:01:38] <dave0> the letters are the contents
[15:02:17] <katnis> i just dont get it why pointer in the first place UGH
[15:02:44] <trenka> you started from understanding of the concept
[15:02:50] <dave0> katnis: it's the only way to access memory
[15:02:58] <trenka> now you say you do not understand the applications
[15:03:03] <katnis> yes...
[15:03:10] <katnis> im too dummm :(
[15:03:37] <edk> if you've already decided it's too hard for you you're probably not going to understand
[15:03:48] <dave0> katnis: without memory you can't do much with a computer
[15:03:48] <LangerJan> katnis: german?
[15:04:10] <trenka> no, I am _just_ asking if explanations of the concept was wasting of time?
[15:04:19] <high_ground> pointers could be useful if you want to pass a big struct to a function. You could pass the address over instead of the whole struct
[15:04:24] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[15:04:55] *** Quits: alch (~alch@151.68.43.53) (Read error: Connection reset by peer)
[15:05:57] *** Quits: Masklin_Gurder (~joel@h-155-4-23-152.A230.priv.bahnhof.se) (Quit: Konversation terminated!)
[15:06:12] *** Joins: Masklin_Gurder (~joel@h-155-4-23-152.A230.priv.bahnhof.se)
[15:06:28] <katnis> wym german LangerJan 
[15:06:28] <katnis> oh my irccloud please dont do this to me
[15:06:54] *** Quits: NiKaN (sid385034@helmsley.irccloud.com) (Ping timeout: 256 seconds)
[15:07:17] <high_ground> irccloud hrmmmm
[15:07:26] *** Quits: placeb0 (uid283215@lymington.irccloud.com) (Ping timeout: 268 seconds)
[15:07:28] *** Quits: rubin55 (sid175221@hampstead.irccloud.com) (Ping timeout: 256 seconds)
[15:07:50] <LangerJan> katnis: you said "dummmm", just wondering if you speak german. never mind then
[15:08:03] *** Quits: leonardus (sid358597@tinside.irccloud.com) (Ping timeout: 268 seconds)
[15:08:15] *** Quits: derjanni (~Hans@ip-88-153-100-48.hsi04.unitymediagroup.de) (Quit: Textual IRC Client: www.textualapp.com)
[15:08:16] *** Joins: the_lanetly_052 (~the_lanet@85.132.73.6)
[15:08:18] *** Joins: the_lanetly_052_ (~the_lanet@85.132.73.6)
[15:08:19] <katnis> nein
[15:08:27] *** Joins: placeb0 (uid283215@lymington.irccloud.com)
[15:08:36] *** Quits: the_lanetly_052_ (~the_lanet@85.132.73.6) (Client Quit)
[15:08:37] *** Quits: the_lanetly_052 (~the_lanet@85.132.73.6) (Client Quit)
[15:08:52] *** Joins: the_lanetly_052 (~the_lanet@85.132.73.6)
[15:08:54] *** Joins: alch (~alch@151.34.88.201)
[15:09:09] *** Joins: rubin55 (sid175221@hampstead.irccloud.com)
[15:09:13] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[15:09:16] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[15:09:32] *** Joins: leonardus (sid358597@tinside.irccloud.com)
[15:09:55] *** Joins: NiKaN (sid385034@helmsley.irccloud.com)
[15:11:12] *** Quits: rubin55 (sid175221@hampstead.irccloud.com) (Max SendQ exceeded)
[15:11:48] *** Quits: placeb0 (uid283215@lymington.irccloud.com) (Max SendQ exceeded)
[15:12:00] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[15:12:08] <LangerJan> meta-discussion: I have the same problem in university (explaining pointers to freshmen), and I don't think explaining a concept with the help of some other concepts (memory cells, etc) is a good idea.
[15:12:18] *** Joins: rubin55 (sid175221@hampstead.irccloud.com)
[15:12:40] *** Joins: placeb0 (uid283215@lymington.irccloud.com)
[15:12:46] <katnis> did you talk about mailbox too
[15:12:53] <the_lanetly_052> hi folks, how can I get html version of C11 standart?
[15:13:13] <fizzie> ,c11
[15:13:13] <candide> C1X/C11 draft: http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf - C1X Charter: http://www.open-std.org/JTC1/SC22/wg14/www/docs/n1250.pdf - C1X Overview: http://en.wikipedia.org/wiki/C1X - Changes from C99: http://en.wikipedia.org/wiki/C1X#Changes_from_C99 - C Overview: http://en.wikipedia.org/wiki/C_programming - HTML draft: http://port70.net/~nsz/c/c11/n1570.html
[15:13:31] <fizzie> Last link. There's no official one.
[15:13:46] *** Joins: bindu (~bindu@user/bindu)
[15:13:48] <the_lanetly_052> thanks guys 
[15:14:48] <LangerJan> katnis: I didn't
[15:14:58] <LangerJan> katnis: but mailbox as an analogy is fine
[15:15:16] <katnis> i heard C is the easiest language you can learn
[15:15:27] <katnis> if that is true, what am i : (
[15:15:35] <high_ground> i mean its objective
[15:15:43] <high_ground> i mena subjective
[15:15:47] <dave0> katnis: i've heard good things about scheme
[15:15:52] <high_ground> my english :(
[15:16:19] <LangerJan> katnis: you are fighting to understand, and thats great. Thats the eternal struggle of any programmer/sw-engineer 
[15:16:34] <katnis> eternal struggle...
[15:16:47] <dave0> drunk guy putting on pants
[15:17:56] <dave0> https://www.youtube.com/watch?v=TVqIS7nermY
[15:17:57] <candide> Title of dave0's link: The Eternal Struggle - The Simpsons - YouTube
[15:18:17] <high_ground> ehh
[15:20:51] <LangerJan> so, everybody stepped back on explaining?
[15:21:25] <dave0> i kinda trailed off
[15:21:32] <katnis> watching binky rn
[15:21:48] <rahl> LangerJan: I more fell flat on my face than stepped back ;)
[15:21:55] <LangerJan> lol
[15:22:13] *** Quits: kurahaupo_ (~kurahaupo@pa49-180-189-123.pa.nsw.optusnet.com.au) (Ping timeout: 265 seconds)
[15:23:29] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[15:23:47] *** Joins: pulse (~pulse@user/pulse)
[15:24:43] *** Joins: Atque (~Atque@user/atque)
[15:25:25] <dave0> katnis: not all programming languages give you access to pointers
[15:26:20] <dave0> katnis: there is always pointers under the covers
[15:29:12] <dave0> c exposes pointers to the programmer, along with many rules that you just have to memorize
[15:30:15] <edk> there really aren't that many...
[15:30:39] <katnis> ohhhhh interessant!
[15:33:05] <LangerJan> anyone ever played scavenger hunt as a kid?
[15:33:49] <LangerJan> the first hint is basically a "Candy ******candybar;"
[15:35:26] *** Joins: iddev5 (~iddev5@157.41.123.194)
[15:35:54] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:37:09] <LangerJan> *****candybar leads you to a "Candy ****bar", then ***, then **, then *, and finally to the real thing
[15:37:15] *** Joins: Iarfen (~quassel@181.43.59.114)
[15:38:16] *** Quits: zwr (~zwr@2804:d45:b966:fb00:c972:cfd6:54b3:c83e) (Ping timeout: 268 seconds)
[15:38:39] *** Joins: zwr (~zwr@2804:d45:b966:fb00:f0c0:f746:9f80:b26b)
[15:41:28] *** Quits: cm007magnum (~Rheanna@218.78.105.67) (Remote host closed the connection)
[15:43:37] *** Joins: cm007magnum (~Rheanna@218.78.109.69)
[15:44:23] *** Quits: meator (~meator@user/meator) (Ping timeout: 250 seconds)
[15:44:52] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 256 seconds)
[15:45:29] *** Joins: magla (~gelignite@55d4d6da.access.ecotel.net)
[15:45:38] * Twix stares at LangerJan
[15:47:35] <aosync> Twix ?
[15:47:49] * markand eats Twix 
[15:48:11] <Twix> aosync?
[15:48:24] <aosync> are you the twix that i know
[15:48:34] <Twix> dunno?
[15:48:41] *** Joins: tech_exorcist_ (txrcst@user/tech-exorcist/x-0447479)
[15:49:00] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[15:49:30] <dave0> chocolate with a cookie crunch
[15:50:16] <Twix> i don't know that much people from Belgium :o
[15:50:54] <fizzie> Was your earlier nickname "Raider"? 
[15:51:59] *** Joins: Klinda (~superleag@user/klinda)
[15:52:46] *** Joins: steve_ (~steve@ool-182c2b80.dyn.optonline.net)
[15:53:41] <Twix> NO!
[15:53:54] *** Quits: bliminse_ (~bliminse@host86-188-36-178.range86-188.btcentralplus.com) (Quit: leaving)
[15:54:28] *** fcresende_ is now known as fcresende
[15:54:47] *** Quits: Iarfen (~quassel@181.43.59.114) (Ping timeout: 250 seconds)
[15:55:54] *** Joins: Iarfen (~quassel@ec2-3-225-168-229.compute-1.amazonaws.com)
[15:56:11] <Twix> and Belgium has better Candy than Twix. Hmmm, belgian chocolates :P
[15:56:47] <high_ground> wot
[15:56:59] *** Quits: BSaboia (~bsaboia@177.37.198.227) (Quit: This computer has gone to sleep)
[15:57:07] <rahl> Twix: almost as good as Swiss ;p
[15:57:20] *** Quits: jusski (~user@78-63-85-123.static.zebra.lt) (Ping timeout: 256 seconds)
[15:57:37] <Twix> but belgium is nearer to me than the switzerland :D
[15:57:44] <rahl> I jest. tbf I'm not sure I've had non-commercial varieties of either
[15:58:17] <caze> LangerJan: The first thing to understand is that the C memory model is highly segmented. So much so that every object is effectively contained within its own memory segment.
[15:59:12] <Twix> C has a memory model above "there are a bunch of chars somewhere, where pointer may point to"?
[16:00:32] *** Quits: AsenMx (~AsenMx@user/asenmx) (Remote host closed the connection)
[16:00:56] *** Joins: AsenMx (~AsenMx@user/asenmx)
[16:01:05] <caze> LangerJan: The second thing to understand is that pointers point into one of these objects (or NULL), and it is an error to take a pointer value pointing into one of these objects and involve that value in performing a calculation that results in a pointer value outside of that same object, with the exception of the address that is one past the end of the object.
[16:01:33] <caze> Twix: Yes.
[16:02:19] <Twix> Ah, i think i get what you are saying
[16:02:53] <LangerJan> caze: I am not sure what you mean by "the C memory model is highly segmented"
[16:03:05] <caze> LangerJan: Do you know what a memory segment is?
[16:03:25] <LangerJan> yes
[16:03:39] *** Joins: topside (~topside@ip68-226-238-34.lf.br.cox.net)
[16:03:40] *** Joins: noord (~noord@user/noord)
[16:03:51] <caze> LangerJan: The C memory model is like that.
[16:04:09] *** Joins: bliminse (~bliminse@host86-188-36-178.range86-188.btcentralplus.com)
[16:04:45] *** Quits: sickdugongo (~sickdugon@user/sickdugongo) (Ping timeout: 265 seconds)
[16:05:48] <caze> LangerJan: Another thing to understand is that C only has one dimensional arrays. But you can have an array type as the element of another array.
[16:05:50] <LangerJan> caze: that's not really helping me understand what you mean.
[16:06:58] *** Quits: AsenMx (~AsenMx@user/asenmx) (Remote host closed the connection)
[16:07:02] <caze> LangerJan: But, taking into consideration what I said before about taking a pointer into an object and generating a new pointer value outside of it, you cannot take a pointer into one of the subarrays and use it to generate a value that points into a sibling array (with the exception of one past).
[16:07:12] <caze> LangerJan: I'm not sure what you don't understand.
[16:07:30] *** Joins: AsenMx (~AsenMx@user/asenmx)
[16:07:39] *** Quits: topside_ (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 265 seconds)
[16:08:29] *** Quits: Posterdati (~posterdat@host-95-233-159-142.retail.telecomitalia.it) (Ping timeout: 268 seconds)
[16:08:40] <caze> So if you have int arr[2][3] = { { 1, 2, 3 }, { 4, 5, 6 } };, and you do: int *p = &arr[0][2]; you can do p + 1, but you may not do p + 2.
[16:08:54] <LangerJan> caze: ah, yes, sure
[16:09:26] <caze> You can access *p, but you may not access *(p + 1), and you certainly can't access *(p + 2).
[16:10:06] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[16:10:11] *** Joins: brelod (~me@90.244.150.142)
[16:10:22] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[16:10:33] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[16:10:59] <caze> Essentially, if you have a pointer to the last element of the first subarray that holds the value 3, you may not use that pointer to access the elements of the second subarray. So you can't access the elements holding values 4, 5, or 6.
[16:11:00] <LangerJan> caze: C tries to avoid lots of assumptions on whats it's going to be compiled and run on. I mean, is there really the concept of "memory" in C? Sure, there are pointers, but thats an abstraction
[16:11:12] <caze> LangerJan: C is an abstraction.
[16:11:45] <caze> LangerJan: Yes, there is a concept of memory in C.
[16:12:27] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[16:12:39] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[16:12:40] *** Quits: zalt (~zalt@user/zalt) (Read error: Connection reset by peer)
[16:12:59] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 250 seconds)
[16:13:12] *** Quits: X-Scale (~ARM@46.50.0.92) (Ping timeout: 256 seconds)
[16:14:59] *** Joins: X-Scale (~ARM@83.223.235.65)
[16:18:11] *** Quits: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 250 seconds)
[16:19:07] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[16:21:31] <Xgc> LangerJan: What does memory mean to you?
[16:21:33] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[16:23:50] *** Quits: Charles_Attends (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[16:24:14] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:24:21] <rahl> I seem to have forgotten
[16:27:05] *** Joins: sickdugongo (~sickdugon@5.157.101.123)
[16:27:05] *** Quits: sickdugongo (~sickdugon@5.157.101.123) (Changing host)
[16:27:05] *** Joins: sickdugongo (~sickdugon@user/sickdugongo)
[16:29:16] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:30:04] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[16:30:16] <LangerJan> Xgc: I am not entirely sure. I mean, for example, there is no idea of "stack" or "heap". Sure, you can do some byte-fiddeling in C and you can manipulate pointer manually in C, because you know on your embedded device what I/O port or something is behind it.
[16:30:19] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 250 seconds)
[16:30:39] *** Joins: FrostKiwi (~FrostKiwi@user/frostkiwi)
[16:31:29] *** Quits: cm007magnum (~Rheanna@218.78.109.69) (Remote host closed the connection)
[16:31:49] <Xgc> LangerJan: Well, the ideas exist, even for stack and heap.  There's just no requirement to have some physical structure called a stack, or area managed and called a heap.
[16:32:25] <LangerJan> Xgc: where to they exist in the C language? 
[16:33:02] *** Quits: Elladan (~elladan@user/elladan) (Ping timeout: 256 seconds)
[16:33:36] <FrostKiwi> Hey there :] I have a union{ double a; int b;}. When a value get's assigned to either double or int, can I detect which type of value, double or int, the union currently "carries", without saving state outside of the union?
[16:34:02] <dave0> FrostKiwi: no, you have to keep track of that yourself
[16:34:11] <FrostKiwi> dave0: Ahh, thanks :]
[16:34:15] <dave0> FrostKiwi: google "tagged union"
[16:34:28] *** Joins: cm007magnum (~Rheanna@101.89.150.168)
[16:34:49] <FrostKiwi> Ohh nice, didn't know there was a word for that.
[16:35:01] *** Joins: Elladan (~elladan@user/elladan)
[16:35:35] *** Joins: frost (~frost@user/frost)
[16:38:00] *** Quits: iddev5 (~iddev5@157.41.123.194) (Quit: iddev5)
[16:38:53] <Xgc> LangerJan: You've ever noticed that when one function (x) calls another (y), when y returns, we end up back in x?  Is this stack-like?  Think about how the related automatic objects are handled.  That too, acts very stack-like.
[16:39:42] *** Quits: high_ground (~yes@user/high-ground/x-5722129) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[16:39:52] <dave0> also recursion
[16:41:13] <LangerJan> Xgc: sure, but thats an implementation detail for the compiler, right?
[16:41:44] <LangerJan> Xgc: if an exotic machine at another way of handling these things, we could port C to it
[16:43:02] <LangerJan> Xgc: I mean, sure, it's screaming "stack" all over it
[16:43:31] <dave0> LangerJan: this is interesting: https://en.wikipedia.org/wiki/Wheeler_jump
[16:45:05] *** Quits: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu) (Read error: Connection reset by peer)
[16:45:11] <LangerJan> "...at/had another way..."
[16:45:31] <Xgc> LangerJan: These are abstract concepts.  As I said, there's no requirement to have a thing called a stack.  But the behavior still exists.
[16:46:01] *** Joins: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu)
[16:46:07] <LangerJan> Xgc: It behaves stack-y, I agree
[16:50:48] *** Joins: quartz (~quartz@user/quartz)
[16:50:54] *** Quits: Feuermagier_ (~Feuermagi@2a02:2488:4211:3400:b6fd:ec18:acf6:f1a8) (Quit: Leaving)
[16:50:58] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[16:51:34] * Feuermagier pets candide 
[16:51:44] * candide hugs F​euermagier
[16:51:54] * Feuermagier is happy
[16:51:55] <Xgc> LangerJan: and if you look at most CPUs and the way they handle push/call/return, there's a stack address that is restored which resets the frame pointer.  It's actually, in these cases, a linked list, which is stored in a stack.
[16:53:39] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:4d93:733f:22da:c3ca)
[16:54:35] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 250 seconds)
[16:55:15] <Xgc> s/most/some/
[16:57:03] *** Joins: Gimble (~G1mble2@2a01:4b00:8e07:7900:8338:a10b:3aed:1f2e)
[16:58:04] <dave0> yeah x86 has instructions for both of those data structure
[16:58:12] <dave0> i think arm doesn't?
[16:58:26] <dave0> you might have to roll your own on arm
[17:02:03] *** Joins: zalt (~zalt@user/zalt)
[17:02:48] *** Joins: meator (~meator@user/meator)
[17:04:00] <g0z> arm has an SP (stack pointer) register
[17:04:30] *** Joins: acolarh (~niels@3e6be663.rev.stofanet.dk)
[17:04:39] *** Joins: high_ground (~yes@user/high-ground/x-5722129)
[17:06:18] <g0z> https://www.keil.com/support/man/docs/armasm/armasm_dom1359731152874.htm perhaps relevent
[17:06:51] *** Joins: constxd (~brad@192.75.101.164)
[17:07:03] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[17:08:43] *** Joins: MrMobius_ (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[17:08:50] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Ping timeout: 260 seconds)
[17:09:13] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:70c4:a159:b2ac:187f) (Quit: Leaving)
[17:09:42] <trenka> dave0: arm32 does not, but aarch64 does
[17:11:14] <trenka> g0z: no, arm32 does not. But has alias. 
[17:14:19] *** Joins: mtor (~meator@user/meator)
[17:15:23] *** Quits: meator (~meator@user/meator) (Ping timeout: 264 seconds)
[17:15:56] <catern> is there an intrinsic in GCC or something that I can assign to a memory location to indicate that I don't care what's at that location? or something like that? I want to be able to say "hey I don't care about what's in this range of memory so if you want to do an optimization that overwrites it, feel free"
[17:16:20] <floatcomplex> catern: why do you want to do this?
[17:18:17] <dave0> catern: not that i know of.. just don't initialize it i guess?
[17:20:29] *** MrMobius_ is now known as MrMobius
[17:20:44] *** Quits: mtor (~meator@user/meator) (Quit: Leaving)
[17:20:54] *** Joins: meator (~meator@user/meator)
[17:21:40] *** Quits: cm007magnum (~Rheanna@101.89.150.168) (Remote host closed the connection)
[17:22:05] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Ping timeout: 265 seconds)
[17:22:45] *** Quits: candide (~pbot3@about/c/bot/candide) (Excess Flood)
[17:22:55] *** Joins: candide (~pbot3@about/c/bot/candide)
[17:23:23] *** Joins: cm007magnum (~Rheanna@218.78.109.69)
[17:24:52] <floatcomplex> catern: like are you trying to reclaim memory for the OS, or is this a security thing, or a linter thing, or what
[17:25:23] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[17:28:04] <catern> floatcomplex: like I said, to enable optimizations that overwrite it. e.g. an optimization to a loop that causes it to write extra data (say by writing in chunks)
[17:30:18] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 265 seconds)
[17:30:27] <dave0> catern: the only thing close to that is padding in structs, but who knows how the compiler will handle it
[17:30:41] <floatcomplex> like you want it to be able to vectorize even when the array length is not a multiple of the vector size or something?
[17:31:13] <floatcomplex> -O3 will do that on its own, and vectorize the main body of the loop and emit non-vectorized code to handle the partial portion at the end
[17:31:22] <floatcomplex> you don't need to try to help it
[17:31:28] <catern> floatcomplex: i'm aware of that
[17:31:54] <dave0> catern: what do you gain by it?
[17:32:30] <catern> but if I write a naive loop which stops at exactly some place in memory, the compiler has to preserve that, even if, say, it might be able to remove a conditional jump by only writing a constant number of extra memory locations
[17:33:03] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[17:33:21] <catern> stops at at some place in array, say
[17:33:45] <catern> but if I "set" the rest of the array to undefined values, the compiler can do optimizations which write into the rest of the array
[17:34:10] <catern> dave0: which means the compiler has more scope for optimization which means it can generate better code which means my program runs faster
[17:34:54] <floatcomplex> i don't believe any cleverness applied to this problem today will make the compilers of even two years from now generate faster code than they'd be able to do on their own. likely slower
[17:35:12] <floatcomplex> just write clean c code that doesn't surprise the compiler or a human reader
[17:36:58] <catern> well, this is in a class of optimizations that humans can do, because they know what memory is unused/can take on undefined values without causing problems, and which can give performance boosts; and compilers can't do because they don't have that information
[17:37:04] *** Joins: macaw (~macaw@77-255-134-52.adsl.inetia.pl)
[17:37:56] <dave0> catern: what conditional jump?
[17:38:15] <dave0> as long as the number of iterations is constant, the complider can already do it
[17:38:16] <floatcomplex> show us c code that you think would benefit from this
[17:42:02] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[17:42:14] *** Quits: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374) (Remote host closed the connection)
[17:42:24] <catern> https://catern.com/example.c
[17:42:38] <catern> here is an example
[17:42:49] *** Joins: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374)
[17:43:22] *** Joins: odoood (odoood@gateway/vpn/protonvpn/odoood)
[17:43:54] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[17:44:10] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:46:18] <cart_man> What makes the keyword atomic able to have one memory location edited by two threads at once? Is it CPU that manages that?
[17:46:35] *** Joins: mrig (~AdiIRC@user/mrig)
[17:47:09] <dave0> catern: no such intrinsic
[17:47:39] *** Joins: plantman (~plantman@2601:405:4680:1b0::6)
[17:47:42] *** Quits: AmR (~AmREiSa@156.199.67.156) (Ping timeout: 265 seconds)
[17:47:56] <dave0> catern: write the first loop as   out[out_idx] = a[i]; if(a[i] < 0.5) { out_idx++; }
[17:48:04] <dave0> then it might optimize it to the second
[17:48:11] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[17:48:12] *** Quits: Teckla (~Teckla@user/teckla) (Quit: leaving)
[17:48:35] <catern> dave0: obviously I can change the first one to match the behavior of the second, but hopefully you realize why that's not what I'm looking for
[17:48:43] *** Joins: katp32 (~katp32@S010680ea96e8dbba.vc.shawcable.net)
[17:49:54] *** Joins: Famine_ (~Famine@user/famine)
[17:50:45] <rcf> cart_man: the compiler chooses the appropriate atomic CPU instructions for any operation, and/or inserts any code necessary to make it safe. 
[17:50:59] <trenka> cart_man: basically yes
[17:51:07] <cart_man> So its not done on the fly
[17:51:28] <dave0> catern: not really.. you;re advocating a way of changing the source by adding some intrinsic, when the alternative is also changing the source
[17:51:28] <rcf> cart_man: in theory it could be, it's extremely specific to any architecture. 
[17:51:45] *** Joins: rgrinberg (~textual@201.192.183.100)
[17:52:10] <dave0> catern: either way you're changing the source to improve optimization possiblities... what's the difference?
[17:52:32] *** Quits: Famine- (~Famine@user/famine) (Ping timeout: 265 seconds)
[17:52:34] <trenka> cart_man: well, reading aligned word is atomic on most architectures and it's a memory subsystem feature. But anyway, all that arch specific
[17:52:41] <catern> dave0: if I had such an intrinsic I could use it everywhere there is some range of memory that I want to be in an undefined state, and let the compiler determine whether there's some optimization possible
[17:54:20] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[17:54:21] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[17:54:21] *** Joins: wroathe (~wroathe@user/wroathe)
[17:54:35] <dave0> catern: hypothetical intrinsic
[17:55:34] <catern> yes... that's why I said "if"
[17:55:37] <rcf> catern: such a thing isn't really useful on modern CPUs because their branch prediction and speculative execution accomplish exactly this already. 
[17:55:43] <catern> rcf: wrong
[17:55:46] *** Quits: meator (~meator@user/meator) (Ping timeout: 256 seconds)
[17:55:56] <catern> rcf: the example is carefully crafted to make that wrong, read it again
[17:58:17] *** Quits: katnis (uid15849@helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[17:58:56] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[18:00:36] *** Quits: tech_exorcist_ (txrcst@user/tech-exorcist/x-0447479) (Quit: Goodbye)
[18:00:58] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[18:01:21] *** Quits: the_lanetly_052 (~the_lanet@85.132.73.6) (Remote host closed the connection)
[18:02:01] *** Joins: wovixo (~wovixo@128.104.205.49)
[18:03:29] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 250 seconds)
[18:03:42] *** Quits: X-Scale (~ARM@83.223.235.65) (Ping timeout: 256 seconds)
[18:04:07] *** Joins: Teckla (~Teckla@user/teckla)
[18:05:18] <catern> well, I'll just say - the reason branch prediction isn't effective here is because the branch can't be predicted - it's random, the branch has an exactly 50% chance of being taken, so we can't predict better than that
[18:06:05] *** mh3f_ is now known as mh3f
[18:06:32] *** Quits: odoood (odoood@gateway/vpn/protonvpn/odoood) (Ping timeout: 256 seconds)
[18:06:51] <dave0> catern: try this on godbolt, it doesn't use a conditional branch in the loop (not including loop termination): https://termbin.com/2ilx
[18:07:10] <dave0> i compiled with -O3 -march=native
[18:07:12] *** Joins: nyah (~nyah@94.6.71.219)
[18:08:14] <catern> dave0: um, yes, that's not surprising, but I'm saying "I'd like to give the compiler more scope to optimize automatically", and you're saying "just optimize your code manually", do you see how that's not a good answer...?
[18:08:38] <dave0> there's nothing wrong with helping the compiler
[18:08:59] <catern> obviously I can already write the optimization myself, the second function in my example is the optimized version
[18:09:49] <dave0> but they are not equivalent as far as c is concerned
[18:10:04] <catern> dave0: they would be equivalent, with such an intrinsic as I described
[18:10:27] *** Quits: ko (~i.am@user/marlboro) (Quit: I come down here for a fat woman and that's what I'm havin.)
[18:10:35] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[18:10:55] <dave0> really?
[18:11:12] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[18:12:11] *** Quits: cm007magnum (~Rheanna@218.78.109.69) (Remote host closed the connection)
[18:12:12] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[18:12:59] <catern> yes... if I added this to the end of both functions, they would be equivalent: for (size_t i = out_idx; i < n; i++) float[i] = __builtin_undefined();
[18:13:00] *** Quits: candide (~pbot3@about/c/bot/candide) (Quit: Departure requested.)
[18:13:33] <catern> let me start from a more basic explanation: you agree that the two functions would have equivalent behavior if I added for (size_t i = out_idx; i < n; i++) float[i] = 0; right?
[18:13:43] *** Joins: candide (~pbot3@about/c/bot/candide)
[18:14:03] *** Joins: cm007magnum (~Rheanna@61.171.38.68)
[18:14:04] <catern> __builtin_undefined() would just be an intrinsic which lets me say "I don't care about this value, feel free to optimize it out if you like"
[18:14:55] <catern> it's similar to the optimizations that __builtin_unreachable() allows for control flow
[18:15:39] *** Joins: bbju (~bbju@103.144.148.54)
[18:17:03] *** Quits: bbju (~bbju@103.144.148.54) (Client Quit)
[18:17:15] *** Joins: X-Scale (~ARM@83.223.235.65)
[18:17:40] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5d71-0aee-812d-c1b0.res6.spectrum.com)
[18:18:08] <dave0> use the float[i] = 0 loop
[18:18:17] <dave0> that'll fix it
[18:19:00] <catern> yes... that's why I suggested that... sigh, clearly my example needs to be more in depth
[18:19:22] <catern> do you understand why float[i] = __builtin_undefined(); would be preferable to float[i] = 0;?
[18:19:40] <catern> the _undefined() can be optimized out, the 0 has to actually run - so it would take actual execution time
[18:20:04] <catern> which is pointless when all we want is to give the compiler more space to run
[18:20:45] <floatcomplex> catern: you haven't use the restrict keyword btw
[18:20:56] <floatcomplex> and this is one of the times when the code could benefit from it
[18:21:21] <catern> sure sure, I was just trying to keep it simple, yes in real code I would use restrict
[18:21:32] <floatcomplex> in fact there might be a whole class of optimizations, including the ones you're looking for, that is specifically being disallowed by not having restrict
[18:21:44] *** Joins: topside_ (~topside@ip68-226-238-34.lf.br.cox.net)
[18:22:09] <rcf> ...that is true. 
[18:23:19] *** kish` is now known as GlobalBanksta
[18:23:32] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:24:18] *** Quits: swinnenb (~swinnenb@user/swinnenb) (Quit: This is the hidden truth, the world between the lines.)
[18:24:37] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[18:24:40] *** Joins: swinnenb (~swinnenb@user/swinnenb)
[18:25:31] <dave0> i added restrict but got the same assembly :-(
[18:25:35] *** Quits: topside (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 250 seconds)
[18:25:54] *** Joins: NEYi (~NEYi@109.251.216.38)
[18:27:07] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Read error: Connection reset by peer)
[18:30:11] *** Quits: rgrinberg (~textual@201.192.183.100) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:30:16] <rcf> dave0: it doesn't change the current output, but if it is possible for a and out to be equal, the proposed optimization would be undesirable. 
[18:33:24] *** Joins: BSaboia (~bsaboia@177.37.198.227)
[18:33:30] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:34:03] <rcf> catern: with supporting benchmarks, I can't see why this wouldn't make sense to propose to compiler developers. 
[18:34:07] *** Joins: AmR (~AmREiSa@41.36.24.35)
[18:36:33] *** Parts: alioui (~medeva293@197.3.136.195) ()
[18:38:24] *** Joins: brad_mssw|mac (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[18:41:11] *** Quits: brad_mssw (~bhouse@2601:344:4100:b490:4d93:733f:22da:c3ca) (Ping timeout: 264 seconds)
[18:46:26] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[18:47:49] *** Joins: gproto23 (~gproto23@user/gproto23)
[18:47:58] *** Joins: the (~the@2620:8d:8000:1044:b6ca:1ac:6dab:2ab1)
[18:48:24] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[18:51:12] *** Joins: abip20 (~abdullah@103.66.177.186)
[18:51:44] <catern> rcf: I suppose I may do so, thanks for the vote of confidence
[18:52:20] *** Joins: chartreuse (~chartreus@S0106f0f249dfd9c3.cg.shawcable.net)
[18:52:20] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: Life beckons)
[18:54:08] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 256 seconds)
[18:54:34] *** Quits: abip20 (~abdullah@103.66.177.186) (Quit: Konversation terminated!)
[18:54:45] *** Joins: dohtem (uid524096@user/dohtem)
[18:54:48] *** Joins: abip20 (~abdullah@103.66.177.186)
[18:55:35] *** Quits: Gimble (~G1mble2@2a01:4b00:8e07:7900:8338:a10b:3aed:1f2e) (Quit: Leaving)
[18:56:30] *** Joins: johnjay (~pi@192.142.100.50)
[18:59:30] *** Joins: fstd_ (~fstd@xdsl-78-35-74-116.nc.de)
[18:59:45] *** Quits: fstd (~fstd@xdsl-78-35-74-116.nc.de) (Read error: Connection reset by peer)
[18:59:52] *** Joins: useretail_ (~useretail@185.132.19.151)
[18:59:57] *** Quits: useretail (~useretail@185.132.19.151) (Read error: Connection reset by peer)
[18:59:59] *** Quits: AsenMx (~AsenMx@user/asenmx) (Read error: Connection reset by peer)
[19:00:39] *** Joins: AsenMx (~AsenMx@user/asenmx)
[19:00:56] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[19:01:33] *** Quits: cm007magnum (~Rheanna@61.171.38.68) (Remote host closed the connection)
[19:04:25] *** Joins: cm007magnum (~Rheanna@218.78.109.69)
[19:04:28] *** Joins: Crepe (~Crepe@user/crepe)
[19:04:42] *** Parts: Crepe (~Crepe@user/crepe) (Leaving)
[19:04:51] *** Quits: useretail_ (~useretail@185.132.19.151) (Remote host closed the connection)
[19:07:11] *** Quits: alch (~alch@151.34.88.201) (Ping timeout: 250 seconds)
[19:09:10] *** Joins: alch (~alch@mi-18-45-193.service.infuturo.it)
[19:09:22] *** Joins: odoood (odoood@gateway/vpn/protonvpn/odoood)
[19:10:46] *** Joins: ozoned (~odoood@2601:c8:c003:a550::3)
[19:11:53] *** Quits: ozoned (~odoood@2601:c8:c003:a550::3) (Client Quit)
[19:12:15] *** Joins: ozoned (~odoood@2601:c8:c003:a550::3)
[19:12:54] *** Quits: ozoned (~odoood@2601:c8:c003:a550::3) (Client Quit)
[19:13:27] *** Joins: ozoned (odoood@gateway/vpn/protonvpn/odoood)
[19:13:58] *** Quits: odoood (odoood@gateway/vpn/protonvpn/odoood) (Ping timeout: 256 seconds)
[19:14:22] *** ozoned is now known as odoood
[19:18:41] *** Quits: Guest80 (~Guest80@pd9ed7c7f.dip0.t-ipconnect.de) (Quit: Client closed)
[19:19:21] *** Joins: Guest80 (~Guest80@pd9ed7c7f.dip0.t-ipconnect.de)
[19:19:45] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[19:22:17] *** Joins: derjanni (~Hans@p508eee78.dip0.t-ipconnect.de)
[19:27:41] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[19:29:33] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:40a5:a81e:f992:bb69)
[19:29:33] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:40a5:a81e:f992:bb69) (Changing host)
[19:29:33] *** Joins: skapata (~Skapata@user/skapata)
[19:30:11] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Client Quit)
[19:31:22] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[19:33:59] *** Quits: the (~the@2620:8d:8000:1044:b6ca:1ac:6dab:2ab1) (Ping timeout: 264 seconds)
[19:34:13] *** Joins: mahmutov (~mahmutov@37.155.60.179)
[19:34:31] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Client Quit)
[19:34:41] *** Joins: pucara (~i@181.95.204.204)
[19:35:12] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[19:35:41] *** Quits: BSaboia (~bsaboia@177.37.198.227) (Quit: This computer has gone to sleep)
[19:39:05] *** Joins: drocan (~drocan@user/drocan)
[19:39:54] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Client Quit)
[19:41:04] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[19:42:44] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 265 seconds)
[19:43:35] *** Joins: ckdCreations (~ckdCreati@147.55.133.140)
[19:47:46] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:47:46] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[19:47:46] *** Joins: wroathe (~wroathe@user/wroathe)
[19:50:15] *** Quits: dan_berg_pub (2c6463a49d@chat.sr.ht) (Remote host closed the connection)
[19:50:16] *** Quits: fmac (bf93f83905@2604:bf00:710:0:5054:ff:feea:5006) (Remote host closed the connection)
[19:50:19] *** Joins: BSaboia (~bsaboia@177.37.198.227)
[19:51:46] *** Quits: cm007magnum (~Rheanna@218.78.109.69) (Remote host closed the connection)
[19:52:44] *** Joins: cm007magnum (~Rheanna@218.78.53.13)
[19:52:45] *** Joins: fmac (bf93f83905@2604:bf00:561:2000::26)
[19:52:45] *** Joins: dan_berg_pub (2c6463a49d@2604:bf00:561:2000::1c)
[19:53:04] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[19:53:40] *** Quits: BSaboia (~bsaboia@177.37.198.227) (Client Quit)
[19:55:03] *** Quits: rcoote (~rcoote@2a02:908:69a:58a0:7d:96fd:7312:e7d8) (Quit: Konversation terminated!)
[19:57:41] *** Joins: kuber (~kuber@97-126-3-32.tukw.qwest.net)
[19:59:34] *** Joins: zmt00 (~zmt00@user/zmt00)
[20:00:33] *** Quits: plantman (~plantman@2601:405:4680:1b0::6) (Quit: Leaving)
[20:00:40] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Quit: varioust)
[20:02:59] *** Quits: marcj (~marc@205.175.215.25) (Quit: ZNC 1.6.6+deb1ubuntu0.2 - http://znc.in)
[20:04:21] *** Joins: marcj (~marc@205.175.215.25)
[20:04:38] *** Joins: Falconer_ (~ronnyma@227.84-48-191.nextgentel.com)
[20:04:47] *** Joins: Guest95 (~Guest95@85.174.198.135)
[20:05:42] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[20:05:45] *** Quits: Falconer_ (~ronnyma@227.84-48-191.nextgentel.com) (Quit: leaving)
[20:06:09] *** Joins: Falconer_ (~ronnyma@227.84-48-191.nextgentel.com)
[20:08:13] *** Joins: MrMobius_ (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[20:08:17] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Ping timeout: 250 seconds)
[20:08:45] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: see you later or tomorrow)
[20:10:19] *** Joins: mrig (~mrig@user/mrig)
[20:11:33] *** Quits: Falconer_ (~ronnyma@227.84-48-191.nextgentel.com) (Quit: leaving)
[20:12:03] *** Joins: Falconer_ (~ronnyma@227.84-48-191.nextgentel.com)
[20:18:29] *** Joins: The_Jag (~The_Jag@host-87-9-29-108.retail.telecomitalia.it)
[20:18:41] *** Quits: Alhazred (~Alhazred@86.106.74.40) (Ping timeout: 250 seconds)
[20:18:50] *** Quits: kuber (~kuber@97-126-3-32.tukw.qwest.net) (Quit: leaving)
[20:20:20] *** Quits: Falconer_ (~ronnyma@227.84-48-191.nextgentel.com) (Quit: leaving)
[20:23:33] *** Joins: torstenvl (~torstenvl@2600:1003:b12a:4f41:1969:d61c:c776:caef)
[20:26:22] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[20:26:22] *** Joins: the (~the@2620:8d:8000:1044:b6ca:1ac:6dab:2ab1)
[20:29:39] *** Joins: effexzi (uid474242@ilkley.irccloud.com)
[20:33:19] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[20:36:17] *** Quits: torstenvl (~torstenvl@2600:1003:b12a:4f41:1969:d61c:c776:caef) (Remote host closed the connection)
[20:39:06] *** Quits: kapil (~kapil@o-k.website) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[20:39:38] *** Joins: kapil (~kapil@o-k.website)
[20:40:18] *** Joins: topside (~topside@ip68-226-238-34.lf.br.cox.net)
[20:41:09] *** Quits: sickdugongo (~sickdugon@user/sickdugongo) (Read error: Connection reset by peer)
[20:41:26] *** Joins: sickdugongo (~sickdugon@5.157.101.123)
[20:41:26] *** Quits: cm007magnum (~Rheanna@218.78.53.13) (Remote host closed the connection)
[20:41:26] *** Quits: sickdugongo (~sickdugon@5.157.101.123) (Changing host)
[20:41:26] *** Joins: sickdugongo (~sickdugon@user/sickdugongo)
[20:42:18] *** Joins: BSaboia (~bsaboia@177.37.198.227)
[20:43:29] *** Joins: extern (~archer@141.226.57.242)
[20:43:35] *** Quits: the (~the@2620:8d:8000:1044:b6ca:1ac:6dab:2ab1) (Ping timeout: 264 seconds)
[20:43:58] *** Quits: Terlisimo (~Terlisimo@outofband.ozna.net) (Quit: Connection reset by beer)
[20:44:00] *** Quits: sickdugongo (~sickdugon@user/sickdugongo) (Read error: Connection reset by peer)
[20:44:25] *** Joins: sickdugongo (~sickdugon@5.157.101.123)
[20:44:25] *** Quits: sickdugongo (~sickdugon@5.157.101.123) (Changing host)
[20:44:25] *** Joins: sickdugongo (~sickdugon@user/sickdugongo)
[20:44:29] *** Joins: cm007magnum (~Rheanna@61.171.38.68)
[20:44:36] *** Quits: topside_ (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 265 seconds)
[20:46:26] *** Joins: pulse (~pulse@user/pulse)
[20:46:35] *** Quits: esselfe (~steph@user/esselfe) (Ping timeout: 264 seconds)
[20:46:38] *** Joins: iddev5 (~iddev5@2409:4062:238e:b95a:4e81:d872:b364:2f3c)
[20:48:13] *** Joins: brad_mssw|mbp (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[20:48:23] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 264 seconds)
[20:49:50] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[20:49:56] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Client Quit)
[20:50:51] *** Joins: topside_ (~topside@ip68-226-238-34.lf.br.cox.net)
[20:50:56] *** Quits: BSaboia (~bsaboia@177.37.198.227) (Quit: This computer has gone to sleep)
[20:51:07] *** Joins: esselfe (~steph@user/esselfe)
[20:51:10] *** Joins: Terlisimo (~Terlisimo@outofband.ozna.net)
[20:51:22] *** Quits: brad_mssw|mac (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Ping timeout: 265 seconds)
[20:51:38] *** Parts: sickdugongo (~sickdugon@user/sickdugongo) (Leaving)
[20:52:49] *** Quits: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net) (Ping timeout: 265 seconds)
[20:55:14] *** Quits: topside (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 268 seconds)
[20:55:27] *** Quits: kapil (~kapil@o-k.website) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[20:56:00] *** Joins: kapil (~kapil@o-k.website)
[20:56:34] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[20:57:39] *** Joins: Falconer_ (~ronnyma@227.84-48-191.nextgentel.com)
[20:58:31] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[20:59:34] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 268 seconds)
[21:00:02] *** Quits: extern (~archer@141.226.57.242) (Quit: WeeChat 3.3)
[21:00:24] *** Joins: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net)
[21:00:28] *** Quits: abip20 (~abdullah@103.66.177.186) (Quit: Konversation terminated!)
[21:01:52] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[21:02:45] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[21:05:28] *** Quits: cart_man (~rynot@host-78-144-121-1.as13285.net) (Quit: Konversation terminated!)
[21:05:52] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[21:09:55] *** Joins: torstenvl (~torstenvl@2601:14b:200:1e9c:5176:62fa:9213:2dfb)
[21:13:10] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5d71-0aee-812d-c1b0.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[21:14:40] *** Joins: whatsupdoc (uid509081@hampstead.irccloud.com)
[21:14:47] *** Quits: torstenvl (~torstenvl@2601:14b:200:1e9c:5176:62fa:9213:2dfb) (Ping timeout: 264 seconds)
[21:16:04] *** Joins: the (~the@2620:8d:8000:1044:b6ca:1ac:6dab:2ab1)
[21:21:05] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5d71-0aee-812d-c1b0.res6.spectrum.com)
[21:22:18] *** Quits: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net) (Ping timeout: 265 seconds)
[21:22:37] *** Quits: schna (sid484866@helmsley.irccloud.com) ()
[21:22:50] *** Joins: schna (sid484866@helmsley.irccloud.com)
[21:23:56] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[21:24:33] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 250 seconds)
[21:25:12] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 265 seconds)
[21:25:49] *** Joins: terminalpusher (~terminalp@2a01:586:9390:1:2e06:28a4:de81:31aa)
[21:26:27] *** Joins: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net)
[21:28:38] *** Joins: kuber (~kuber@97-126-3-32.tukw.qwest.net)
[21:31:29] *** Quits: cm007magnum (~Rheanna@61.171.38.68) (Remote host closed the connection)
[21:32:33] *** MrMobius_ is now known as MrMobius
[21:32:53] *** Joins: cm007magnum (~Rheanna@101.91.232.166)
[21:35:38] *** Quits: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net) (Ping timeout: 256 seconds)
[21:36:53] *** Quits: simon323 (~simon323@2409:8a34:46c:5830:40bf:b4ef:bd0:7dba) (Quit: simon323)
[21:37:03] *** Joins: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net)
[21:38:16] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5d71-0aee-812d-c1b0.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[21:38:37] *** Joins: sheldon (~sheldon@user/sheldon)
[21:40:15] *** Joins: bruda (~bruda@172.58.62.226)
[21:42:00] *** Joins: meator (~meator@user/meator)
[21:43:31] *** Quits: topside_ (~topside@ip68-226-238-34.lf.br.cox.net) (Remote host closed the connection)
[21:43:38] *** Joins: topside_ (~topside@ip68-226-238-34.lf.br.cox.net)
[21:44:32] *** Quits: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net) (Ping timeout: 265 seconds)
[21:46:16] <bruda> Last day to make use of the internet til the hotspot goes back. Any recommendations on other reading material I could grab to learn C? Besides the K&R SE and K.N. King's Modern Approach?
[21:46:25] *** Joins: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net)
[21:47:32] *** Quits: iddev5 (~iddev5@2409:4062:238e:b95a:4e81:d872:b364:2f3c) (Quit: Client closed)
[21:47:50] *** Joins: masterbuilder (~user@user/masterbuilder)
[21:48:05] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[21:48:17] *** Joins: BSaboia (~bsaboia@177.37.198.227)
[21:48:54] *** Quits: zhiayang (~zhiayang@user/zhiayang) (Ping timeout: 268 seconds)
[21:50:00] *** Joins: zhiayang (~zhiayang@user/zhiayang)
[21:50:49] <johnjay> i hate to be that guy. but there's literally a link in the topic to a list of books to read
[21:52:56] *** Joins: zalt_ (~zalt@user/zalt)
[21:53:10] <g0z> I liked the Deitelx2 text book
[21:53:36] <johnjay> by the way the strath university course is there just archived
[21:53:39] <johnjay> https://web.archive.org/web/20120111092222/http://www2.its.strath.ac.uk/courses/c/
[21:53:45] <candide> Title of johnjay's link: C Programming
[21:54:26] <constxd> bruda: What?
[21:54:32] <constxd> Hotspot goes back where?
[21:54:42] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:55:28] *** Quits: zalt (~zalt@user/zalt) (Ping timeout: 256 seconds)
[21:55:37] <bruda> We borrowed a hotspot from the library.
[21:56:08] *** Joins: iddev5 (~iddev5@2409:4062:238e:b95a:4e81:d872:b364:2f3c)
[21:56:13] <bruda> We live in an area where there's not a lot of good options for internet. Hotspot barely even works and satellite sucks.
[21:56:43] <constxd> based and ted pilled
[21:57:37] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[21:57:42] *** Quits: BSaboia (~bsaboia@177.37.198.227) (Quit: This computer has gone to sleep)
[21:57:50] *** Joins: csrf1 (~csrf@ip72-199-118-215.sd.sd.cox.net)
[21:57:56] <bruda> johnjay: thanks. That's online though. Got a pdf link?
[21:58:18] *** Quits: csrf (~csrf@user/csrf) (Ping timeout: 256 seconds)
[21:59:07] <constxd> You don't need that if you have K&R + A Modern Approach
[21:59:19] *** Joins: rnb (~rnb@23.184.48.6)
[21:59:31] <constxd> if anything maybe get a copy of APIUE
[21:59:41] <bruda> Actually I'm going through my books and I have more than I realized. I've collected tons of computer related books over the years.
[21:59:45] *** Joins: BSaboia (~bsaboia@177.37.198.227)
[21:59:49] <johnjay> no but you can mirror it with wget or maybe curl.
[22:00:21] <johnjay> constxd: but what about Application Programming in the Windows Environment?
[22:00:26] <johnjay> nobody ever brings that up!
[22:00:33] <bruda> Windows? 
[22:00:44] * bruda shudders and mumbles something in Linuxian
[22:00:47] <bruda> :P
[22:01:06] <tusko> slackware
[22:01:09] <bruda> Actually I'm perfectly comfortable learning C in Linux. Windows will come later.
[22:01:55] <edk> yeah some sort of vaguely unix-like os is definitely the best environment to learn c in
[22:02:11] <bruda> oh snap. and old copy of Anarchists Cookbook. I should tuck that aside somewhere.
[22:02:38] *** Joins: RandomGuy (~RandomBlo@user/randombloke)
[22:02:41] <johnjay> i should learn c in the bsd environment
[22:02:52] <tusko> People who write code and use windows are a disease
[22:02:52] <johnjay> just to lord it over people that read that book. although i guess bsd is unix technically
[22:02:56] <bruda> BSD is cool. I respect it.
[22:03:37] <bruda> I checked out FreeBSD about 15 years ago. NetBSD, some other BSD's.
[22:05:44] <bruda> Well I guess I have about 10+ books to help me with C. Not to mention books about compilers and kernel programming.
[22:05:53] *** Quits: Guest80 (~Guest80@pd9ed7c7f.dip0.t-ipconnect.de) (Quit: Client closed)
[22:06:35] <bruda> and tons of other books of various other topics.
[22:06:36] *** Joins: Guest80 (~Guest80@pd9ed7c7f.dip0.t-ipconnect.de)
[22:06:54] <constxd> Programming Pearls?
[22:07:05] <constxd> that's a certified banger
[22:07:25] *** Quits: BSaboia (~bsaboia@177.37.198.227) (Quit: This computer has gone to sleep)
[22:07:42] <bruda> Hmm nope. But I do have various books about general things programmers should know. 
[22:08:06] *** Joins: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net)
[22:09:03] <bruda> I've got over 600 computer books. Gees I'm an ebook hoarder.
[22:09:55] <johnjay> yeah i used to think the way you do bruda 
[22:10:04] <retr0> ebooks are not books
[22:10:06] <johnjay> then i realized it's easier to just maintain a list of books instead of the books themselves
[22:10:10] <retr0> they are just not books
[22:10:18] <johnjay> then i just let channels like #c maintain them
[22:10:25] <johnjay> so now i have nothing and am happy
[22:10:30] <bruda> heh
[22:10:55] <johnjay> well just kidding
[22:10:58] <bruda> I have no regrets. If I don't have internet I can dive into this collection and find something.
[22:11:08] <johnjay> i downloaded a few ebooks and guides to a laptop and promptly destroyed the keyboard
[22:11:08] <bruda> And these days I go without internet a lot.
[22:11:08] <pragma-> I am really annoyed with my closet of outdated books, each 400 to 800 to 1200 pages long
[22:11:16] <pragma-> the entire mass is so heavy and takes up so much space
[22:11:18] *** Quits: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net) (Killed (ozone (No Spam)))
[22:11:18] <johnjay> so i've been waiting a month for the replacement to arrive from china
[22:11:20] <pragma-> and i'm never going to read any of htem ever again
[22:11:34] <nomagno> retr0: I understand you think a PDF is not fully comparable to a physical book, but the content is the same in this context. Don't gatekeep pls :(
[22:11:42] <johnjay> pragma-: not even the petzold book??
[22:11:46] <bruda> I'd say send em to me but I don't have room for a bunch of real books here.
[22:11:53] <pragma-> i think if i move i'll probably pack them up into a buncho f boxes and donate them to local library
[22:12:01] <pragma-> i might keep some classics.
[22:12:22] <johnjay> do you have an amazon account?  you can put a few up on there and then pm us the link
[22:12:33] <johnjay> idk how onerous the process is to open a seller thing
[22:12:34] <bruda> ohhh "Dangerous Google - Searching for Secrets" That would be an interesting read I'm sure.
[22:13:46] *** Joins: missogra (~missogra@dynamic-077-003-061-083.77.3.pool.telefonica.de)
[22:13:47] <johnjay> pragma-: i recommend assembling a list of the books first. then go from there on whether to buy/sell/whatever
[22:15:29] <bruda> "Masterminds of Programming - Conversations with the Creators of Major Programming Languages"
[22:15:45] *** Quits: somlis (~somlis@user/somlis) (Quit: WeeChat 3.3)
[22:16:01] *** Quits: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net) (Ping timeout: 268 seconds)
[22:16:04] <constxd> pragma-: u got taocp? 
[22:16:18] *** Quits: Guest95 (~Guest95@85.174.198.135) (Quit: Client closed)
[22:16:23] *** Parts: rnb (~rnb@23.184.48.6) (Leaving)
[22:16:31] *** Joins: Guest95 (~Guest95@85.174.198.135)
[22:16:32] <pragma-> I don't think so
[22:17:13] *** Joins: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net)
[22:18:28] *** Joins: somlis (~somlis@user/somlis)
[22:19:35] *** Quits: meator (~meator@user/meator) (Ping timeout: 250 seconds)
[22:20:06] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[22:21:26] *** Quits: cm007magnum (~Rheanna@101.91.232.166) (Remote host closed the connection)
[22:22:17] *** Quits: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net) (Remote host closed the connection)
[22:22:38] *** Joins: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net)
[22:22:46] *** Parts: katp32 (~katp32@S010680ea96e8dbba.vc.shawcable.net) ()
[22:23:20] *** Joins: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[22:24:14] *** Joins: cm007magnum (~Rheanna@218.78.105.67)
[22:24:24] *** Joins: BSaboia (~bsaboia@177.37.198.227)
[22:24:54] *** Joins: extern (~archer@141.226.57.242)
[22:24:57] <floatcomplex> if he does he didn't get it here, we've all been tested
[22:25:03] <bruda> GNU Make Book. That'll be handy.
[22:25:13] *** Quits: macaw (~macaw@77-255-134-52.adsl.inetia.pl) (Ping timeout: 250 seconds)
[22:28:41] *** Quits: iddev5 (~iddev5@2409:4062:238e:b95a:4e81:d872:b364:2f3c) (Quit: Client closed)
[22:29:47] *** Quits: the (~the@2620:8d:8000:1044:b6ca:1ac:6dab:2ab1) (Ping timeout: 264 seconds)
[22:30:17] *** Quits: BSaboia (~bsaboia@177.37.198.227) (Quit: This computer has gone to sleep)
[22:31:14] *** Joins: crankslider (~slidercra@user/slidercrank)
[22:31:34] *** Quits: extern (~archer@141.226.57.242) (Quit: WeeChat 3.3)
[22:32:57] *** Joins: joo-_ (~joo-_@fsf/member/joo--)
[22:33:32] <earnestly> Avoid the gnu make book
[22:33:45] *** Joins: meator (~meator@user/meator)
[22:33:56] <earnestly> (If you want to create sane makefiles, anyway)
[22:34:14] *** Joins: the (~the@2620:8d:8000:1044:b6ca:1ac:6dab:2ab1)
[22:35:18] *** Joins: Klinda (~superleag@user/klinda)
[22:35:53] *** Joins: carlavilla (~carlavill@2a0c:5a84:3607:2f00:221:6bff:fe3b:cee4)
[22:36:22] <bruda> Even the one with Paul Smith as the technical reviewer? The GNU make maintainer?
[22:38:08] *** Quits: meator (~meator@user/meator) (Remote host closed the connection)
[22:38:23] *** Joins: meator (~meator@user/meator)
[22:38:34] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:39:55] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:40:18] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[22:41:23] <earnestly> Whatever the John Grahman-Cumming one is
[22:41:31] *** Parts: RandomGuy (~RandomBlo@user/randombloke) (Leaving)
[22:41:38] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:42:01] <bruda> Ok. Yea that's the one I have.
[22:42:03] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 265 seconds)
[22:42:58] <earnestly> That book is principally about attempting to treat make as a programming language, attempting to ape haskell.  It really is extremely corrosive to both the nature and intent of make and its DSL
[22:43:16] *** Quits: Guest80 (~Guest80@pd9ed7c7f.dip0.t-ipconnect.de) (Quit: Client closed)
[22:43:21] <earnestly> There was a book about managing projects with make which is much more sympathetic in this respect
[22:44:02] <earnestly> That and the various attempts by mad-scientist.net/papers to build a set of principles of using gnu make
[22:44:27] <floatcomplex> it is, or always should be, 100% possible to script the creation of a sane makefile given a directory of source code and no additional prompting
[22:45:07] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[22:45:31] <bruda> I do have the proper GNU Make Manual from GNU.
[22:46:00] <earnestly> The manual is good too, yeah
[22:46:40] <bruda> I tried to make sure I have the essential manuals like cpp, gcc, gdb, libc, make, and valgrind. 
[22:47:08] <bruda> After tomorrow I'm working offline for a bit. So I'm trying to make sure I'm up to snuff on things I need to keep studying.
[22:47:12] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[22:47:18] <floatcomplex> do you have all teh man pages
[22:48:02] <bruda> I'm on Linux so I have most of the general man pages included with the system.
[22:48:53] <bruda> I can do man whatever.h and get details on headers. Plus whatever function searches n such too.
[22:50:22] *** Joins: shivesh (~shivesh@user/shivesh)
[22:51:03] <earnestly> bruda: Remember with linux and the man-pages project you have posix manuals under (n)p sections, such as `man 1p make' (the posix manuals are often much better written than gnu, even if it doesn't cover gnu additions)
[22:51:20] *** Quits: derjanni (~Hans@p508eee78.dip0.t-ipconnect.de) (Quit: Textual IRC Client: www.textualapp.com)
[22:51:52] <bruda> hmm I appreciate the note.
[22:52:41] *** Quits: missogra (~missogra@dynamic-077-003-061-083.77.3.pool.telefonica.de) (Ping timeout: 265 seconds)
[22:52:46] <bruda> how many different numbers are there? like 1p n such? Can I find them with apropos?
[22:53:27] *** Quits: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net) (Remote host closed the connection)
[22:53:27] <bruda> guess so... whew have to browse that output a bit. Heh
[22:53:53] *** Joins: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net)
[22:54:57] *** Quits: cm007magnum (~Rheanna@218.78.105.67) (Remote host closed the connection)
[22:55:27] <bruda> come to think about it I need a good manual on regexp too.
[22:56:40] *** Quits: AsenMx (~AsenMx@user/asenmx) (Ping timeout: 256 seconds)
[22:56:46] <earnestly> bruda: man 1 man
[22:56:54] <earnestly> It'll tell you about sections
[22:57:31] <bruda> Ohhh good info. God 20 years of Linux and I'm just now learning this? 
[22:57:36] * bruda facepalms.
[22:57:57] *** Joins: cm007magnum (~Rheanna@218.78.105.67)
[22:58:38] *** Joins: BSaboia (~bsaboia@177.37.198.227)
[22:59:10] *** Joins: topside (~topside@ip68-226-238-34.lf.br.cox.net)
[22:59:27] *** Quits: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net) (Ping timeout: 250 seconds)
[22:59:33] <earnestly> And /usr/share/man/man* where * is the section understood by man, which is nice if you want to have separate man trees using `man -m tree ...'
[22:59:59] <earnestly> (Gnu man anyway)
[23:00:04] *** Quits: linguist (~autistic@user/linguist) (Ping timeout: 256 seconds)
[23:00:12] *** Joins: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net)
[23:01:15] <bruda> jotting these down in my notes.
[23:02:02] *** Joins: Inline (~Inline@2a02:908:1252:7a80:e1d1:e64a:139f:9e8)
[23:02:47] *** Quits: topside_ (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 264 seconds)
[23:02:54] <bruda> any good free books about regexp? I think I have a couple but taking recommendations on suitable books that cover using it in C.
[23:03:17] *** Joins: cart_man (~rynot@host-78-144-121-1.as13285.net)
[23:03:53] <constxd> cover regexp using C? why?
[23:04:13] <constxd> oh
[23:04:41] *** Quits: alch (~alch@mi-18-45-193.service.infuturo.it) (Read error: Connection reset by peer)
[23:05:05] <smlavine> man 7 regex
[23:05:22] <constxd> probably unpopular here but imo PCRE is based, and for that just make sure you have the man pages
[23:05:34] <constxd> posix regex sucks
[23:06:42] <bruda> Just in case. I'm rusty on it. 
[23:07:25] <bruda> To be honest I cheat a little by using regex. Instead of elaborate code to find certain patterns I like using regex.
[23:07:39] <bruda> But it's been a few years and I'm not as clear as I once was on it's usage.
[23:08:19] <constxd> are you wanting to know how the patterns work, or how to use the C interface?
[23:08:21] <earnestly> regex(7) is actually excellent if you read it carefully
[23:08:27] <earnestly> It's deceptively short
[23:08:58] <earnestly> It covers both BRE and ERE which is what you'll encounter with sed, grep, awk, etc.
[23:09:13] <bruda> yea I see that. But it does seem to throw out the essential information
[23:09:28] *** Joins: alch (~alch@mi-18-29-143.service.infuturo.it)
[23:09:49] <constxd> pcre better
[23:09:55] *** Joins: strajder (~strajder@user/strajder)
[23:10:11] <constxd> lookaround is based
[23:10:37] <earnestly> bruda: Hm?
[23:11:05] <earnestly> That manual is almost entirely essential information and nothing more, which is why I like it
[23:11:26] *** Quits: cm007magnum (~Rheanna@218.78.105.67) (Remote host closed the connection)
[23:12:06] <nomagno> ERE: fancy POSIX code for "you don't need to backslash brackets"
[23:12:23] <earnestly> It adds + and ? as well
[23:12:38] *** Joins: ozoned (~odoood@2601:c8:c003:a550::3)
[23:12:44] <bruda> Well I use 'throw out' the wrong way in that last comment.
[23:12:44] <bruda> heh
[23:12:45] *** Quits: terminalpusher (~terminalp@2a01:586:9390:1:2e06:28a4:de81:31aa) (Remote host closed the connection)
[23:13:15] *** Joins: terminalpusher (~terminalp@2a01:586:9390:1:2e06:28a4:de81:31aa)
[23:13:56] *** Joins: plastico (~plastico@neomutt/plastico)
[23:14:06] <earnestly> (And | of course)
[23:14:07] *** Quits: constxd (~brad@192.75.101.164) (Read error: Connection reset by peer)
[23:14:24] *** Joins: cm007magnum (~Rheanna@218.78.99.237)
[23:15:01] <bruda> I enjoy regexone.com for a good run through on learning regexp. Though without internet it won't be available.
[23:15:03] *** Joins: constxd (~brad@192.75.101.164)
[23:15:22] *** Quits: odoood (odoood@gateway/vpn/protonvpn/odoood) (Ping timeout: 256 seconds)
[23:15:34] *** Joins: linguist (~autistic@user/linguist)
[23:16:55] <bruda> hotspot is throttling down. Good thing IRC doesn't need much to function.
[23:17:16] <meator> Hello. What is the maximum count of bit array members I can portably use in int?
[23:17:33] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[23:17:49] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[23:18:15] <caze> bit array
[23:18:28] <caze> int is required to have at least 16 bits.
[23:20:38] <meator> >A ‘‘plain’’ int object  has  the  natural  size  suggested  by  the architecture of the execution environment (large enough to contain any value in the range INT_MIN to INT_MAX as defined in the header <limits.h>).
[23:20:52] *** Joins: kenanmarasli_ (~kenanmara@user/kenanmarasli)
[23:21:15] <meator> So the architecture of execution environment is >= 16?
[23:21:27] *** Joins: evocatus (~evocatus@84.51.113.13)
[23:21:29] <bruda> hotspot is throttling down. Good thing IRC doesn't need much to still function.
[23:21:42] <caze> Yes.
[23:21:46] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[23:22:15] <caze> INT_MIN is required by the standard to be at most -32767 on all architectures.
[23:22:34] <caze> INT_MAX is required by the standard to be at least 32767 on all architectures.
[23:22:37] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[23:23:05] <caze> INT_MIN can be smaller, and INT_MAX can be larger.
[23:23:16] *** Joins: sheldon (~sheldon@user/sheldon)
[23:23:43] * Teckla thought he read that the C committee was considering making two's complement part of the standard, so perhaps future versions of the C standard might redefine INT_MIN as -32768.
[23:23:59] <caze> Maybe.
[23:24:35] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Ping timeout: 250 seconds)
[23:24:41] *** kenanmarasli_ is now known as kenanmarasli
[23:25:31] *** Quits: tafa (~tafa@2a04:52c0:101:85c::1) (Ping timeout: 245 seconds)
[23:25:34] *** Joins: tafama (~tafa@tafa.xyz)
[23:25:55] <meator> Ah. So the "Implementation limits" lists the smallest possible values. I didn't notice this. Thanks!
[23:26:12] *** Quits: Guest95 (~Guest95@85.174.198.135) (Quit: Client closed)
[23:27:41] *** Quits: lowin (~lowin@user/lowin) (Ping timeout: 264 seconds)
[23:27:44] *** Joins: lowin_ (~lowin@user/lowin)
[23:27:50] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 256 seconds)
[23:30:10] <caze> meator: It's the smallest range of values.
[23:31:31] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 250 seconds)
[23:31:45] *** Joins: bud (~bud@user/bud)
[23:32:18] *** Parts: bud (~bud@user/bud) (Leaving.)
[23:33:31] <bruda> got MIT and Standford regex cheatsheets. Why? I don't know. Just seemed useful.
[23:33:37] *** Quits: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net) (Remote host closed the connection)
[23:34:34] <meator> caze: Ok.
[23:35:14] <caze> meator: In the case of INT_MIN, the value can be smaller, but not bigger.
[23:36:25] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[23:37:35] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 250 seconds)
[23:38:02] <meator> But normal systems have larger int, an I right?
[23:38:47] *** Quits: ozoned (~odoood@2601:c8:c003:a550::3) (Ping timeout: 264 seconds)
[23:38:48] *** Quits: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com) (Read error: Connection reset by peer)
[23:38:52] *** Joins: gareppa (~gareppa@user/gareppa)
[23:39:00] *** Joins: dsrt^ (~dsrt@h178.173.139.63.static.ip.windstream.net)
[23:40:19] <meator> s/an/am/
[23:40:37] *** Quits: tafama (~tafa@tafa.xyz) (Ping timeout: 250 seconds)
[23:40:41] *** Joins: lowin (~lowin@user/lowin)
[23:41:30] *** Quits: lowin_ (~lowin@user/lowin) (Ping timeout: 265 seconds)
[23:42:55] <Red> meator, by larger int you mean what, long long aka 64-bit ints?
[23:43:37] <Red> aka $COMPILER_SPECIFIC implementation here
[23:43:41] *** Quits: kdc (~kdc@196.211.197.159) (Remote host closed the connection)
[23:45:35] *** Quits: Inline (~Inline@2a02:908:1252:7a80:e1d1:e64a:139f:9e8) (Remote host closed the connection)
[23:46:51] <meator> I mean that int on modern systems can store values larger than 32767 and smaller that -32767.
[23:48:18] *** Joins: tafa (~tafa@2a04:52c0:101:85c::1)
[23:48:39] *** Quits: effexzi (uid474242@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[23:49:04] <Red> er, yes of course
[23:49:41] <Red> "int" is usually 32-bit on modern systems
[23:50:03] <floatcomplex> long is guaranteed to be at least 32 bit
[23:50:07] <floatcomplex> jsut use long if you need that guarantee
[23:50:33] <Red> or better yet, stdint.h if you're using C99 :^)
[23:51:00] *** Quits: gareppa (~gareppa@user/gareppa) (Quit: Leaving)
[23:51:27] <twkm> ewww.
[23:51:39] <Twix> <Red> "int" is usually 32-bit on modern systems <-- eeh ... no?
[23:52:10] <meator> floatcomplex: Thanks!
[23:53:06] <floatcomplex> use stdint if you need guarantees about representation. otherwise use long
[23:53:18] <Twix> hmm, okay, for some reasons i thought it might be 8 bytes
[23:53:20] <Twix> what ever
[23:53:24] <Twix> if was wrong
[23:53:29] <Twix> *i was wrong
[23:53:49] <Red> keyword usually.
[23:54:20] *** Quits: cart_man (~rynot@host-78-144-121-1.as13285.net) (Quit: Konversation terminated!)
[23:54:37] <Twix> i rarly use int, usually i want a length of something, so i use size_t or i want something in a specific length(so i use the uintXX_t/intXX_t types)
[23:54:49] <floatcomplex> N2731 has #define INT_MIN -32768
[23:54:58] <floatcomplex> Teckla: ^
[23:55:20] <Red> Twix, C89 or death!
[23:55:27] <twkm> might be just 1 byte.
[23:55:27] <floatcomplex> c89 is death
[23:55:28] <Twix> NOOOOoo
[23:55:41] *** Quits: kuku01 (~kuku@user/kuku) (Remote host closed the connection)
[23:55:42] <bruda> c99! :P
[23:55:49] *** Joins: Inline (~Inline@2a02:908:1252:7a80:7839:e0f2:7ca6:b112)
[23:55:49] <Twix> twkm, a 64 bit long byte? :D
[23:56:03] <floatcomplex> Twix: that's perfectly conformant
[23:56:05] <twkm> such exist.
[23:56:10] *** Joins: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com)
[23:56:14] <Twix> i know, but its still .. weird
[23:57:31] <Red> (okay fine C99 w/ most C89 rules intact is acceptable too)
[23:57:49] <floatcomplex> idiomatic c89 can't be const-correct
[23:57:55] <floatcomplex> i'd rather be const-correct
[23:57:58] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
