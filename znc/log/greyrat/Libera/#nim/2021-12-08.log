[00:29:00] *** Joins: vicfred (~vicfred@user/vicfred)
[01:03:14] *** Quits: terminalpusher (~terminalp@2a01:586:a4a5:1:e003:e11d:22df:b459) (Remote host closed the connection)
[01:29:48] <FromDiscord> <retkid> Out of memory defects originate from a failed allocation, right?
[01:42:11] <FromDiscord> <konsumlamm> In reply to @arkanoid "I know it's silly,": nothing should raise an internal error, ever
[01:42:18] <FromDiscord> <konsumlamm> an internal error is always a bug
[01:42:39] <FromDiscord> <konsumlamm> arkanoid: i suggest you open an issue for that
[02:06:37] <FromDiscord> <IsaacPaul> Shouldn't it be `from module import whatever` or just `import module`
[02:07:01] <FromDiscord> <ynfle (ynfle)> As apposed to what?
[02:07:16] <FromDiscord> <IsaacPaul> `import std/sequtils; sequtils` mentioned above
[02:08:16] <FromDiscord> <ynfle (ynfle)> The `;` is the equivalent (in many cases) of a newline in nim code
[02:08:41] <FromDiscord> <ynfle (ynfle)> the `import std/sequtils` is import the `sequtils` module from the standard library
[02:09:34] <FromDiscord> <IsaacPaul> ah I think he probably meant to do `std/sequtils as sequtils`
[02:11:07] <FromDiscord> <ynfle (ynfle)> There's no reason for that. It's imported as sequtils. The `std/` is just qualifying it as the standard library version
[02:19:12] <FromDiscord> <ynfle (ynfle)> @arkanoid what were you trying to do with that?
[02:23:52] <FromDiscord> <Rika> Probably just stumbled upon it
[02:24:30] <FromDiscord> <retkid> In reply to @PMunch "Nothing says speed like": same
[02:47:39] *** Quits: krux02 (~krux02@p200300e817365e0034cc1bc883b75341.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:22:21] *** Quits: jjido (~Denis@90.213.58.125) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[03:36:05] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3Hju
[03:37:13] <FromDiscord> <retkid> (edit) "https://play.nim-lang.org/#ix=3Hju" => "https://play.nim-lang.org/#ix=3Hjv"
[03:37:33] <FromDiscord> <retkid> this is strange
[03:57:03] <arkanoid> as Rika says, I just stepped on this by accident. I know it's something that has no sense really, but internal error is unexpected anyways
[04:03:15] <FromDiscord> <Elegantbeef> It's a simple bug afaict, sem's the expression `sequtils` which is a module so when it attempts to generate it, it errors with the expr generation error
[04:03:58] <FromDiscord> <Elegantbeef> Any expression returning a module should almost certainly error
[04:05:18] <FromDiscord> <Elegantbeef> error in semantic analysis not in code gen 😀
[04:06:45] <FromDiscord> <Rika> you did say sem and not codegen
[04:06:51] <FromDiscord> <Rika> who are you correcting
[04:06:56] <arkanoid> sure it is a stupid error, but it is. I've just opened the issue
[04:07:57] <FromDiscord> <Elegantbeef> well it errors in code gen presently
[04:08:01] <FromDiscord> <Elegantbeef> I was just saying where it should error
[04:10:42] <arkanoid> I'm not into compiler internals. I need a good book that can introduce me to the parsing world, better if the one use in nim. Actually I'd be really interested in acquiring this skill
[04:11:03] <FromDiscord> <Elegantbeef> This is actually unrelated to parsing
[04:11:17] <FromDiscord> <Elegantbeef> I spend most my time in semantic analysis, which is basically macros but in the compiler
[04:11:44] <FromDiscord> <Elegantbeef> The issue here is that presently `semExpr` doesnt error when `n.kind == skModule` though it should
[04:13:03] <FromDiscord> <Elegantbeef> https://github.com/nim-lang/Nim/blob/f91867aa31f3ae2c4f28d24547d62603daaa6d0c/compiler/semexprs.nim#L2793-L2810 right here to be accurate
[04:13:24] <FromDiscord> <Elegantbeef> Notice there is no checking of `skModule`
[04:15:44] <FromDiscord> <Elegantbeef> Though i could be wrong with the idea that modules shouldnt be usable in expressions
[04:16:12] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3HjA
[04:17:45] <arkanoid> well, it might be useful for a plugin system
[04:18:28] <FromDiscord> <Elegantbeef> Yep which makes this more complicated 😀
[04:20:07] *** Quits: src (~src@user/src) (Quit: Leaving)
[04:20:12] <FromDiscord> <Elegantbeef> So now we have to look at the flags that `semExpr` has and see if we can use those to reason out of this problem 😀
[04:22:09] <arkanoid> would be interesting hear a gentle introduction to nim compiler internals
[04:23:22] <FromDiscord> <Elegantbeef> Well actually that isnt even valid code in the above
[04:23:53] <FromDiscord> <Elegantbeef> `/usercode/in.nim(2, 49) Error: in expression 'math.sum': identifier expected, but found 'sum'` Lol
[04:25:41] <FromDiscord> <Elegantbeef> I'd say you have 3 phases of compilation. Parsing, semantic analysis, and code generation
[04:27:34] <FromDiscord> <Elegantbeef> Parsing is taking the code and turning it into the AST. Semantic analysis is taking that AST and checking it's soundness and generating types, code generation takes that AST then outputs the selected backend's compatible code, changing it as it needs to to fit with the semantics of the selected backend
[04:28:43] <FromDiscord> <Elegantbeef> Semantic analysis is the most complex stage as it's really where the language lives
[04:31:45] <NimEventer> New thread by Treeform: Show Nim: Forematics is a Metamath verifier written in Nim., see https://forum.nim-lang.org/t/8691
[04:32:15] <arkanoid> does Nim have an advantage over other languages?
[04:32:35] <arkanoid> I mean, talking about compiler structure
[04:32:53] <FromDiscord> <Elegantbeef> Well it's self hosted  unlike to Zig/Odin
[04:33:00] <FromDiscord> <Elegantbeef> Zig uses a packed AST which is faster
[04:33:23] <FromDiscord> <Elegantbeef> Nim uses a reference based AST which is slower for obvious reasons but is easier to directly reason about
[04:35:07] <arkanoid> is it a parsing advantage or we're into semantic analysis step?
[04:35:31] <FromDiscord> <Elegantbeef> The performance advantage is in cache locality for the repetitive looping in semantic analysis/code gen
[04:35:44] <FromDiscord> <Elegantbeef> Cause that's all the compiler really is, a tree of data it loops over and reasons on
[04:35:58] <FromDiscord> <Elegantbeef> Take a look at `var a = 300`
[04:36:39] <FromDiscord> <Elegantbeef> It's a simple thing, but the way the compiler sees it is `varsection -> identdefs -> (a: nkEmpty = nkIntLit(300))`
[04:37:38] <FromDiscord> <Elegantbeef> So it first says "Sem this varsection" which then goes through each ident def and checks "Ok so we have type nkEmpty and an nkIntLit, does this fit, yes? Ok so we can type this to nkInt instead of nkEmpty"
[04:37:48] <FromDiscord> <Elegantbeef> well i guess it'd be `tyInt` in reality
[04:39:02] <FromDiscord> <Elegantbeef> After seming that we now have a symbol `a` of type `tyInt`, so in any other statements that come after we will find this symbol and know it's type when we do `a`
[04:39:58] <FromDiscord> <Elegantbeef> That pretty much is all the compiler does in semantic analysis
[04:40:12] <FromDiscord> <Elegantbeef> Hopefully i explained it well enough
[04:41:22] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:41:28] <FromDiscord> <Elegantbeef> Feel free to ask if you have any questions, i'm not the best compiler dev but i know how stuff works 😛
[04:42:59] <FromDiscord> <Elegantbeef> Personally i've never read anything about compiler development i've just looked at small bugs like this one and face to grindstone until i reasoned why/how to fix it
[04:43:10] <FromDiscord> <Elegantbeef> So if you want to touch the compiler i'd suggest the same
[04:43:28] <FromDiscord> <Elegantbeef> Look for simple bugs and find why they dont work and soon you'll be a better compiler dev than I 🙂
[04:45:01] <arkanoid> you've my gratitude for this intro and for the confidence booster pill
[04:46:03] <FromDiscord> <Elegantbeef> Given what i've told you you probably can make a PR to the compiler for fixing this module issue
[04:46:43] <FromDiscord> <Elegantbeef> You have the exact line number and a flag for when the error should be emitted, so just need to emit the error and make some tests
[04:48:10] <FromDiscord> <Elegantbeef> One of the harder things is thinking of examples on where this might break or what might break
[04:48:27] <FromDiscord> <Elegantbeef> You want tests that properly attempt to break the code not just tests that show it working
[04:50:14] <FromDiscord> <Elegantbeef> It is a shame there arent more people with knowledge of the Nim compiler actively talking about compiler developing encouraging others though
[04:51:38] <arkanoid> yes, but it feels something hard to grasp
[04:52:02] <FromDiscord> <Elegantbeef> It first seems that way, but if you're in semantic analysis, it's just slightly lower level macros
[04:52:32] <FromDiscord> <Elegantbeef> Like that was the big thing that i needed to understand to really understand to reason how to work with the compiler
[05:01:32] <arkanoid> a visualization like this? :P https://cscircles.cemc.uwaterloo.ca/visualize#mode=display
[05:02:16] <FromDiscord> <Elegantbeef> I do not know
[05:02:27] <FromDiscord> <Professor Actual Factual> Does anyone know if the std/deques implementation is threadsafe? Im looking into the source code and to me it does not look like it is https://github.com/nim-lang/Nim/blob/version-1-6/lib/pure/collections/deques.nim#L369
[05:02:35] <FromDiscord> <Elegantbeef> Ah actually certainly not like that
[05:02:40] <FromDiscord> <Elegantbeef> That's showing a running program
[05:03:08] <FromDiscord> <Elegantbeef> I guess it's like the Global frame alone
[05:03:22] <FromDiscord> <Elegantbeef> Where it looks at the global symbols and says "These exist and take X"
[06:07:03] <nrds> <06Prestige99> Has anyone used coz-profiler, or has anyone tried using it with Nim? It looks interesting
[06:20:13] *** Joins: bigmanbird (~Thrawn@119-12-221-1.dynamic.ipstaraus.com)
[06:20:21] <bigmanbird> any word on the progress of this PR https://github.com/nim-lang/Nim/pull/16356 ? 
[06:21:02] <FromDiscord> <Elegantbeef> Uhh i'm a dumb dumb that doesnt like what i've done
[06:22:26] <bigmanbird> oh, I thought it looked nice
[06:24:01] <nrds> <06Prestige99> I was also looking forward to it :P
[06:25:24] <FromDiscord> <Elegantbeef> Well it's going to just turn into anything inside `'a'` is coloured so not overly useful imo
[06:25:42] <nrds> <06Prestige99> Agreed
[06:26:15] <FromDiscord> <Elegantbeef> Colouring all the errors is tedious and requires something like nkerror to be used fully
[06:26:42] <nrds> <06Prestige99> nkerror not being used everywhere there's an error thrown?
[06:28:02] <FromDiscord> <Elegantbeef> Atleast in my view yes
[06:28:50] <FromDiscord> <Rika> i think in general there should be a nicer internal api for errors in the compiler, it just feels like an afterthought
[06:29:01] <FromDiscord> <Elegantbeef> I think the nk errors give that
[06:29:08] <FromDiscord> <Rika> true
[06:29:38] <FromDiscord> <Rika> i assume also that nkerrors can have nodes in them as well
[06:30:03] <FromDiscord> <Elegantbeef> In saem's nimskull impl nkerrors hold the AST that erroed
[06:30:10] <FromDiscord> <Rika> nice
[06:30:25] <FromDiscord> <Rika> and also structured error text should be a part i feel
[06:31:01] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[06:31:10] <FromDiscord> <Elegantbeef> Yep hax is wanting that aswell
[06:47:27] <FromDiscord> <Casey.McMahon> anyone with experience with arraymancer know how I can get a list of coordinates of the neigbourhood around a point?  like if I choose the point `[1,1]`, get a list like `[[0,0],[0,1],[0,2],[1,0],[1,2],[2,0],[2,1],[2,2]]` ?
[06:58:49] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:09:21] *** Joins: tiorock (~rc@192.12.114.197)
[07:09:21] *** Quits: tiorock (~rc@192.12.114.197) (Changing host)
[07:09:21] *** Joins: tiorock (~rc@user/rockcavera)
[07:09:21] *** rockcavera is now known as Guest3185
[07:09:21] *** tiorock is now known as rockcavera
[07:12:13] *** Quits: Guest3185 (~rc@user/rockcavera) (Ping timeout: 240 seconds)
[07:14:14] *** Quits: bigmanbird (~Thrawn@119-12-221-1.dynamic.ipstaraus.com) (Read error: Connection reset by peer)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:05:47] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[08:06:49] *** Joins: xet7 (~xet7@user/xet7)
[08:34:41] *** Joins: u0_a185 (~u0_a185@2001:ce8:131:5f61:3dc5:4e8c:b9a0:f08e)
[09:24:34] <FromDiscord> <haxscramper> https://github.com/nim-works/nimskull/pull/94↵(@Rika)
[09:26:16] <FromDiscord> <Rika> Maybe I should pull the trigger and start looking deeper
[09:26:22] <FromDiscord> <haxscramper> I doubt main nim ever agrees to a refactor like that, so
[09:26:49] <FromDiscord> <haxscramper> Araq thinks error message are good enough, and he probably wouldn't like changes that aggressive
[09:27:00] <FromDiscord> <haxscramper> Bit this literally is everywhere
[09:27:22] <FromDiscord> <haxscramper> Absolutely every single damn module of the compiler generates ad-hoc copypasta of strings
[09:27:57] <FromDiscord> <haxscramper> https://github.com/nim-works/nimskull/discussions/60#discussioncomment-1674521
[09:47:40] <FromDiscord> <Sabena Sema> where's the github repo of work on a new os library that had an os string/program string distinction
[09:52:32] *** Joins: vicfred (~vicfred@user/vicfred)
[10:17:39] <FromDiscord> <haxscramper> The only thing that can qualify as a "new os library" is probably this https://github.com/alaviss/nim-sys
[10:17:55] <FromDiscord> <haxscramper> But I'm not sure if it has the distinction you are talking about
[10:18:01] <FromDiscord> <leorize> it doesn't
[10:18:27] <FromDiscord> <leorize> it only has string/nulless distinction
[10:46:25] *** Quits: u0_a185 (~u0_a185@2001:ce8:131:5f61:3dc5:4e8c:b9a0:f08e) (Read error: Connection reset by peer)
[10:46:43] *** Joins: u0_a185 (~u0_a185@121-80-249-103f1.kyt1.eonet.ne.jp)
[10:58:15] <FromDiscord> <konsumlamm> In reply to @Professor Actual Factual "Does anyone know if": i'm pretty sure none of the stdlib collections are thread-safe (except the ones that have "shared" in their name, but those are all deprecated now)
[11:00:01] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[11:00:21] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Read error: Connection reset by peer)
[11:00:51] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[11:24:47] <FromDiscord> <hieu.nt> guys can i do something like this in nim
[11:25:02] <FromDiscord> <hieu.nt> if define MACOS
[11:25:08] <FromDiscord> <hieu.nt> import A
[11:25:21] <FromDiscord> <hieu.nt> else if define Windows
[11:25:23] <FromDiscord> <hieu.nt> import B
[11:25:29] <FromDiscord> <leorize> yes you can
[11:25:55] <FromDiscord> <leorize> sent a code paste, see https://play.nim-lang.org/#ix=3Hky
[11:30:26] <Amun-Ra> you can have your own defines: https://play.nim-lang.org/#ix=3HkB
[11:39:07] *** Joins: PMunch (~PMunch@user/pmunch)
[11:52:46] <PMunch> Does nimsuggest support go to definition on modules? Ref. https://github.com/PMunch/nimlsp/issues/102
[12:28:39] *** Joins: pro (~pro@user/pro)
[12:43:22] *** Quits: xet7 (~xet7@user/xet7) (Quit: Leaving)
[13:07:38] <FromDiscord> <valerga> sent a code paste, see https://play.nim-lang.org/#ix=3HkS
[13:07:39] <FromDiscord> <valerga> for some reason that doesn't work
[13:07:50] <FromDiscord> <valerga> "type mismatch: got <void> ... "
[13:08:37] <PMunch> You need else statements I believe
[13:09:27] <PMunch> Oh never mind
[13:26:16] *** Quits: pro (~pro@user/pro) (Quit: WeeChat 3.3)
[13:27:09] *** Joins: pro (~pro@user/pro)
[13:42:52] <FromDiscord> <Sabena Sema> In reply to @haxscramper "The only thing that": thank you, that's what I was looking for
[13:43:11] <FromDiscord> <Sabena Sema> also: I note that std/packedsets has a note "Currently the assignment operator = for PackedSet[A] performs some rather meaningless shallow copy. Since Nim currently does not allow the assignment operator to be overloaded, use the assign proc to get a deep copy."
[13:43:45] <FromDiscord> <Sabena Sema> it seems like `=copy` exists in nim 1.6, has nobody gotten around to adding support for it in packedset or is it lacking due to not wanting to break code
[13:45:01] <FromDiscord> <Rika> Likely the former, since you could just leave the assign proc
[13:45:17] <FromDiscord> <Sabena Sema> yeah but it would break anyone relying on the old shallow copy
[13:45:25] <FromDiscord> <Sabena Sema> although most of that code is just buggy 😄
[13:45:33] <FromDiscord> <Sabena Sema> so really you are probably fixing more bugs than you're creating
[13:46:19] <FromDiscord> <Rika> Every bug fix can be considered as a breaking change but there is a limit to sanity
[13:46:59] <FromDiscord> <MrOkram> Nimble directory down ? https://media.discordapp.net/attachments/371759389889003532/918083728033607730/unknown.png
[13:47:16] <FromDiscord> <Rika> Who was it again who maintained that
[13:47:23] <FromDiscord> <Rika> @federico3
[13:48:01] <FromDiscord> <Sabena Sema> hmm maybe it's because they are experimental by virtue of being type-bound
[13:48:41] <FromDiscord> <Elegantbeef> The type bound operations are not experimental
[13:49:28] <FromDiscord> <Sabena Sema> just `=deepCopy`?
[13:50:27] <FromDiscord> <Elegantbeef> What do you mean?
[14:01:07] <FromDiscord> <Zoom> What's up with nimble.directory? Gives me 502
[14:01:47] <FromDiscord> <MrOkram> Looks like it's down
[14:16:15] <NimEventer> New question by Katlyn: Nim: Find index of element in seq based on predicate, see https://stackoverflow.com/questions/70273671/nim-find-index-of-element-in-seq-based-on-predicate
[14:16:35] <FromDiscord> <inv> Anyone has laptop with amd 5800u?
[14:27:39] <FromDiscord> <valerga> what's the nice way to do:
[14:27:47] <FromDiscord> <valerga> sent a code paste, see https://play.nim-lang.org/#ix=3Hla
[14:29:22] <FromDiscord> <Rika> Use either zero functional (3rd party) or sequtils (has overhead)
[14:29:47] <FromDiscord> <valerga> which sequtils method?
[14:29:59] <FromDiscord> <Rika> mapIt
[14:30:06] <FromDiscord> <Rika> Ah wait
[14:30:07] <FromDiscord> <Solitude> foldl
[14:30:08] <FromDiscord> <inv> @valerga foldr(a+a)   or import math and sum()
[14:30:11] <FromDiscord> <Rika> Yeah map and folds
[14:30:46] <FromDiscord> <inv> sent a code paste, see https://play.nim-lang.org/#ix=3Hld
[14:30:50] <FromDiscord> <valerga> i thought about those but wouldn't they require an already filled array?
[14:30:56] <FromDiscord> <Rika> lines.mapIt(parseInt(calculate(it)).sum or so
[14:31:05] <FromDiscord> <Rika> Is lines not a filled array
[14:31:19] <FromDiscord> <Solitude> toSeq(lines("1.txt")).foldr(a+b.parseInt, 0)
[14:31:29] <FromDiscord> <Rika> In reply to @Solitude "toSeq(lines("1.txt")).foldr(a+b.parseInt, 0)": True
[14:31:35] <FromDiscord> <valerga> yeah lines is, I thought about the calculate items
[14:31:37] <FromDiscord> <Rika> Do your parse and calculate on b in that case
[14:31:45] <FromDiscord> <valerga> i'll try that
[14:33:08] <FromDiscord> <valerga> sent a code paste, see https://play.nim-lang.org/#ix=3HkS
[14:33:09] <FromDiscord> <valerga> also don't know what's missing there
[14:33:19] <FromDiscord> <valerga> "missing parameter: body"
[14:34:07] <FromDiscord> <Rika> I do not see an issue there
[14:34:31] <FromDiscord> <valerga> "Error: type mismatch: got <void>↵but expected one of: ↵macro collect(ini"
[14:35:13] <FromDiscord> <valerga> i imported std/sugar
[14:35:32] <FromDiscord> <Solitude> can you give selfcontained snippet?
[14:35:36] <FromDiscord> <Rika> Yeah I don’t think there’s an issue
[14:41:58] <FromDiscord> <Solitude> sent a code paste, see https://play.nim-lang.org/#ix=3Hli
[14:42:09] <FromDiscord> <valerga> im working on it, just a moment
[14:44:46] *** Joins: jjido (~Denis@90.213.58.125)
[14:45:15] <FromDiscord> <valerga> ok this weird
[14:45:16] <FromDiscord> <valerga> https://play.nim-lang.org/#ix=3Hll
[14:45:19] <FromDiscord> <valerga> it works there
[14:45:21] <FromDiscord> <valerga> but not locally
[14:45:30] <FromDiscord> <valerga> my compiler is 1.4.8
[14:46:08] <FromDiscord> <valerga> if you select 1.4.8 in the playground it throws the error
[14:48:06] <FromDiscord> <valerga> so I guess i can just update the compiler
[14:48:15] <FromDiscord> <valerga> though my distro still has 1.4.8 in the repos
[15:11:26] *** Quits: jjido (~Denis@90.213.58.125) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[15:12:29] <PMunch> Aha, collect on 1.4.8 only had the version with the init and body
[15:14:02] <FromDiscord> <valerga> oh, I checked the docs to see how collect worked, I guess it was updated recently
[15:14:58] <FromDiscord> <valerga> should have used `collect(newSeq):`
[15:27:47] <NimEventer> New thread by Freeflow: More nim newbie woes, this time echo fmt Possible AOC2021 spoiler, see https://forum.nim-lang.org/t/8692
[15:33:45] <FromDiscord> <valerga> sent a code paste, see https://play.nim-lang.org/#ix=3Hlx
[15:33:53] <FromDiscord> <valerga> how could I do that, break, but return the previous value?
[15:34:06] <FromDiscord> <valerga> add k.intToStr
[15:34:49] <FromDiscord> <valerga> in the collect
[15:34:55] <FromDiscord> <Rika> So you only want one value?
[15:35:03] <FromDiscord> <valerga> no, because there are two fors
[15:35:25] <FromDiscord> <Rika> Don’t think it’s possible no
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:46:19] *** Joins: jjido (~Denis@90.213.58.125)
[15:47:14] <PMunch> Updated the logo on the Nim subreddit, Snoo now has a crown! https://www.reddit.com/r/nim/
[15:55:05] <FromDiscord> <satoro.tadziri> sent a code paste, see https://play.nim-lang.org/#ix=3HlB
[15:55:17] <FromDiscord> <satoro.tadziri> (edit) "https://play.nim-lang.org/#ix=3HlB" => "https://play.nim-lang.org/#ix=3HlC"
[16:01:39] *** Joins: xet7 (~xet7@user/xet7)
[16:01:44] <FromDiscord> <narimiran> In reply to @satoro.tadziri "Hi guys  I": https://github.com/technicallyagd/unpack
[16:01:53] <FromDiscord> <narimiran> (edit) "https://github.com/technicallyagd/unpack" => "https://github.com/technicallyagd/unpack#rest-operator-for-unpacking-sequences"
[16:17:42] *** Quits: oddish (~oddish@2a01:4f8:1c1c:a9da::1) (Quit: nyaa~)
[16:31:08] <FromDiscord> <Solitude> sent a code paste, see https://play.nim-lang.org/#ix=3HlO
[16:46:15] <FromDiscord> <Zoom> Anyone uses supersnappy? It's kinda weird it's API is built around strings. How can I construct a `string` or a `seq[byte]` from raw parts? I have an `openArray`
[16:49:50] *** Joins: src (~src@user/src)
[16:55:39] <PMunch> Define raw parts
[16:56:26] <FromDiscord> <Zoom> I dunno, seq is magic \:D. Probably, a ptr, a len and capacity.
[16:57:34] <FromDiscord> <Zoom> I'm used to `from_raw_parts` in Rust, couldn't find anything like this in std. There constructors for openArrays, but not for seqs
[17:01:12] <PMunch> Well seqs are GC'd, which means that the memory they contain must be possible for the GC to free
[17:01:44] <PMunch> This typically means you need to copy data into the seq in order for it to work
[17:10:14] <FromDiscord> <Zoom> Well,  that's weird to say the least. It means I can't compress without copying the source?
[17:10:56] <FromDiscord> <Zoom> @guzba\: could you help with this ☝️
[17:12:54] <FromDiscord> <Rika> you can cast string to seq byte """safely"""
[17:13:22] <FromDiscord> <Solitude> he has openArray
[17:13:30] <FromDiscord> <Zoom> That's irrelevant and actually what supersnappy does for taking seqs (yep, not the other way!)
[17:14:09] <NimEventer> New thread by Archnim: Nim script file extension, see https://forum.nim-lang.org/t/8693
[17:28:57] *** Quits: jjido (~Denis@90.213.58.125) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:30:09] *** Joins: jjido (~Denis@90.213.58.125)
[17:30:52] *** Quits: jjido (~Denis@90.213.58.125) (Client Quit)
[17:36:14] *** Quits: Schnouki (e7aa4cfb39@user/schnouki) (Remote host closed the connection)
[17:36:35] *** Joins: Schnouki (e7aa4cfb39@user/schnouki)
[17:47:49] <FromDiscord> <dom96> PMunch: consider updating it for old.reddit.com as well
[17:48:15] <PMunch> I use old reddit and it is updated for me
[17:49:33] <PMunch> In fact it only shows up on old reddit
[17:49:47] <PMunch> New reddit seems to have some styling done to it already
[17:49:53] <FromDiscord> <dom96> huh, I don't see it
[17:50:01] <FromDiscord> <dom96> maybe I have custom reddit styles disabled
[17:50:30] <FromDiscord> <dom96> yeah, I do
[17:50:40] <FromDiscord> <dom96> looks good! Very subtle
[17:51:10] <PMunch> Thanks, that was the goal :)
[17:52:04] <FromDiscord> <valerga> i only use old.reddit
[18:27:04] *** Joins: oddish (~oddish@2a01:4f8:1c1c:a9da::1)
[18:31:35] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: Leaving)
[18:43:31] *** Quits: pro (~pro@user/pro) (Quit: WeeChat 3.3)
[19:24:23] <FromDiscord> <ni-max> Hey Nim's forum Mods will you please verify my account (`nimax`)
[19:30:34] <FromDiscord> <Vindaar> @ni-max you should be good now
[19:30:36] <NimEventer> New thread by Archnim: Improve forum, see https://forum.nim-lang.org/t/8694
[19:49:10] <FromDiscord> <Professor Actual Factual> Currently writing my own allocaters and deallocators for a ptr object, is there a way to check memory safety at compile time?
[19:53:07] <FromDiscord> <dom96> nope, `ptr` is inherently unsafe
[19:59:15] <FromDiscord> <Vindaar> In reply to @dom96 "nope, `ptr` is inherently": well, it's more complicated than that:↵- if you use are willing to wrap the `ptr` thing in an object, you can clean up automatically using `=destroy`↵- you could maybe wrap it in some dummy object that makes use of some `static int` to track certain usages, but that will probably result in not-so-nice to write code in general↵and there's probably other things I'm not thinking of
[20:05:58] <FromDiscord> <Pralkarz> Is there sequence unpacking similar to Python in Nim?
[20:09:33] <FromDiscord> <Vindaar> sent a code paste, see https://play.nim-lang.org/#ix=3Hnl
[20:16:54] *** Joins: arkurious (~arkurious@user/arkurious)
[20:17:23] <FromDiscord> <Professor Actual Factual> Oh i know these things are unsafe, and obviously i dont expect GC.↵I was just wondering if there was a compile flag or something that would spit out warnings about detecting ptr objects that are not deallocated. Just a sanity check really.
[20:19:56] <FromDiscord> <Professor Actual Factual> In reply to @Pralkarz "Is there sequence unpacking": Sequences or arrays cant be unpacked in nim. Try looking into varargs to see if they fit your needs
[20:20:19] <FromDiscord> <Pralkarz> Will do, thanks!
[20:23:46] *** Joins: PMunch (~PMunch@user/pmunch)
[20:24:36] <FromDiscord> <Xzight> Hi so I am trying out Nim today and following the "Nim Basics" tutorial but I'm running into a problem. My terminal is telling me `The term 'nim' is not recognized` but I have double checked and it is in my Windows PATH and I also restarted my PC. Anyone else ran into this or have any ideas to fix it?
[20:26:01] <FromDiscord> <Xzight> It only works if I open Powershell as Administrator but its in my user PATH so I'm confused.
[20:27:21] <FromDiscord> <sdmcallister> How did you install Nim?
[20:28:05] <FromDiscord> <Xzight> I downloaded the zip and ran the `finish.exe` file
[20:30:59] <FromDiscord> <sdmcallister> Assuming 1.6
[20:31:20] <FromDiscord> <Xzight> Yes
[20:31:58] <FromDiscord> <Xzight> VSC is also saying this https://media.discordapp.net/attachments/371759389889003532/918185643086053466/unknown.png
[20:32:53] <FromDiscord> <Xzight> This is in my PATH though https://media.discordapp.net/attachments/371759389889003532/918185875551174696/unknown.png
[20:33:42] <FromDiscord> <el__maco> do you see that if you open cmd.exe and say "path"
[20:34:46] <FromDiscord> <Xzight> no it's not there...
[20:34:58] <FromDiscord> <el__maco> then maybe its not in the path
[20:35:27] <FromDiscord> <Xzight> weird because the `finish` program is telling me it is...I think i'm going to try restarting again idk what else to do haha
[20:35:39] <FromDiscord> <Xzight> or maybe I will just use powershell as administrator since its working that way
[20:35:41] <FromDiscord> <sdmcallister>  https://media.discordapp.net/attachments/371759389889003532/918186581012123668/unknown.png
[20:36:17] <FromDiscord> <Xzight> The yellow `Path` is the one I was clicked on for my screenshot
[20:37:07] <FromDiscord> <el__maco> you should have multiple paths in there 🤔
[20:37:26] <FromDiscord> <Xzight> yeah I do I just didnt show the full thing because it has my name in it lol
[20:37:55] <FromDiscord> <Xzight> i have these there as well https://media.discordapp.net/attachments/371759389889003532/918187142562328656/unknown.png
[20:39:37] <FromDiscord> <sdmcallister> does it work in cmd.exe as admin?
[20:40:52] <FromDiscord> <Xzight> yeah I just tried it and I typed `path` as admin and it showed up
[20:40:54] <FromDiscord> <Xzight> so weird
[20:42:15] <FromDiscord> <el__maco> there's two panels in the environment variable dialog, you have "user variables" and "system variables". Both have "path" in them
[20:42:31] <FromDiscord> <Xzight> I'm looking at user
[20:42:35] <FromDiscord> <Xzight> Does it need to be in system instead?
[20:42:44] <FromDiscord> <el__maco> I think user should work
[20:43:07] <FromDiscord> <el__maco> ofc you could try the other one too
[20:43:29] <FromDiscord> <el__maco> maybe you have some weird permission thing going, though I don't know what that might be
[20:44:20] <FromDiscord> <sdmcallister> If your pc is a corporate one I could see that. I have some weird issues to from time to time
[20:44:29] <FromDiscord> <dom96> In reply to @Vindaar "well, it's more complicated": Those are ways that you can make `ptr` safer, but it doesn't change the fact that any use of `ptr` should be looked at with suspicion. Similar to how `unsafe` blocks are in Rust
[20:44:56] <FromDiscord> <dom96> Same for `addr` and `cast` and (probably a few others)
[20:45:07] <PMunch> Advent of Code, day 8 streaming live right now: https://www.twitch.tv/pmunche
[20:46:00] <FromDiscord> <Xzight> I guess it took 2 restarts lol problem solved though 😄
[20:46:34] <FromDiscord> <Xzight> maybe its becaue my PC did some updates the first time so it didn't go through
[20:46:45] <FromDiscord> <Xzight> (edit) "becaue" => "because"
[20:46:48] <FromDiscord> <$(Scott)> Is there a plugin for Nim's syntax & LSP written in lua for neovim?
[20:47:05] <FromDiscord> <$(Scott)> (edit) "Is there a plugin for Nim's syntax ... &" 03added "hl"
[20:47:58] <FromDiscord> <Vindaar> In reply to @dom96 "Those are ways that": but that's a reductive way of looking at the problem. Every garbage collector uses something like alloc / dealloc under the hood. Does that mean the GC is unsafe? Of course not. So as long as you can build a thin abstraction around `ptr` you might be able to build something CT safe on top of it. One doesn't use raw `ptr` for fun after all
[21:02:16] <FromDiscord> <dom96> In reply to @Vindaar "but that's a reductive": No, it doesn't mean the GC is unsafe. It means its code can be considered "unsafe" though and as such should be audited carefully.
[21:04:50] <FromDiscord> <Vindaar> but that's a statement that's orthogonal to what @Professor Actual Factual asked
[21:08:14] <FromDiscord> <dom96> I interpreted it as "is there any way to check whether a `ptr` is safe at compile-time?"
[21:08:28] <FromDiscord> <dom96> To that I don't think my statement was orthogonal 🙂
[21:09:58] <FromDiscord> <Vindaar> No, your initial statement wasn't. But it was too strict, because depending on the constraints you can build something around `ptr` that provides the benefits, but gives you CT safety. Of course, the code that implements this will fall under the category you mention, but that's not a useful piece of information if the end result gives you the opposite answer to what you said
[21:13:23] <FromDiscord> <dom96> Okay, well I guess we are misunderstanding each other a bit:↵↵ I thought you were disagreeing with me on `ptr` being inherently unsafe↵ You think that I am disagreeing with you that `ptr` can be wrapped to be made safe
[21:14:06] <arkanoid> PMunch: I've just found out 2 things: only the nim based vscode extension is not reading the .cache/nil folder, the javascript based does (https://github.com/saem/vscode-nim/issues/65). Second: I've found out the compiling two times solves the posix symbol issue (I've updated the issue) 
[21:14:13] <FromDiscord> <dom96> If @Professor Actual Factual is looking for a way to wrap their use of `ptr` in an API that is safe then definitely your advice is welcome
[21:15:26] <FromDiscord> <Professor Actual Factual> I just want a flag or warning that pops up when im compiling that says hey you forgot to deallocate this object to avoid shooting myself in the foot. Lol sorry for the confusion
[21:16:26] <FromDiscord> <Vindaar> In reply to @dom96 "Okay, well I guess": yeah, I suppose
[21:16:53] <FromDiscord> <Vindaar> In reply to @Professor Actual Factual "I just want a": so yeah, the answer to that is, no there isn't. But depending on why you use `ptr` you may be able to build your own safety net
[21:17:26] <FromDiscord> <Professor Actual Factual> Ah ok ty everyone
[21:18:02] <FromDiscord> <Professor Actual Factual> Id really love to avoid using ptrs but sharing memory across threads is impossible in nim otherwise.
[21:18:31] <FromDiscord> <Professor Actual Factual> Oh well 🙃
[21:19:10] <FromDiscord> <Yardanico> In reply to @Professor Actual Factual "Id really love to": but it is possible 🙂
[21:19:23] <FromDiscord> <Yardanico> with arc/orc
[21:19:49] <FromDiscord> <Professor Actual Factual> What? I thought only boehm allowed for this..?
[21:20:02] <FromDiscord> <Yardanico> arc/orc have a shared heap too
[21:20:14] <FromDiscord> <Professor Actual Factual> Wow, that is good news to me
[21:21:29] <FromDiscord> <Professor Actual Factual> Thank you, i will look into this later tonight. Was banging my ahead against the wall for hours yesterday learning about nims isolated thread memory. I guess orc arc are awesome
[21:21:31] <FromDiscord> <Yardanico> see https://nim-lang.org/blog/2020/10/15/introduction-to-arc-orc-in-nim.html, https://nim-lang.org/blog/2020/12/08/introducing-orc.html, https://nim-lang.org/docs/destructors.html
[21:21:33] <FromDiscord> <dom96> arc/orc's shared heap is still `ptr`-based, no?
[21:21:56] <FromDiscord> <Yardanico> In reply to @dom96 "arc/orc's shared heap is": you can have a global GC'd object with arc/orc, but of course you need to be careful to avoid race conditions so you need to use locks if you want to write to it from multiple threads
[21:22:14] <FromDiscord> <Yardanico> because with --threads:on all memory in arc/orc is shared by default
[21:23:49] <FromDiscord> <dom96> It's way past time I play with this
[21:24:07] <FromDiscord> <dom96> I have a hunch that it's not that simple due to arc/orc not doing atomic ref-counts
[21:24:29] <FromDiscord> <Yardanico> for globals refcounts aren't really a problem
[21:25:01] <FromDiscord> <Yardanico> but you still need to do locks or something similar if you want to mutate the global variable from multiple threads
[21:25:26] <FromDiscord> <dom96> sure, but then you'd also have no problem with allocating shared memory yourself if it's global (since you don't have to worry about deallocating it)
[21:26:13] <FromDiscord> <Yardanico> yes, but using seqs or similar is still a bit better than using manually alloc'd memory :)
[21:26:41] <FromDiscord> <Yardanico> also there's https://github.com/nim-lang/threading
[21:27:08] <FromDiscord> <dom96> maybe a little bit, but then I'd be concerned about Nim's arc/orc decrementing/incrementing the ref count outside my lock implicitly
[21:27:32] <FromDiscord> <dom96> but I dunno, I'm effectively spreading FUD here, I need to try this out finally
[21:29:09] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[21:35:32] <FromDiscord> <guzba> sent a long message, see http://ix.io/3HnH
[21:36:09] <FromDiscord> <guzba> (edit) "http://ix.io/3HnH" => "http://ix.io/3HnI"
[21:40:27] <FromDiscord> <Professor Actual Factual> sent a code paste, see https://play.nim-lang.org/#ix=3HnJ
[21:40:42] <FromDiscord> <Yardanico> uhh, i meant a global variable though
[21:40:43] <FromDiscord> <Yardanico> not a local one
[21:41:08] <FromDiscord> <Solitude> In reply to @guzba "currently supersnappy expects to": openarray is ptr + len. the point is with openarray user can pass any of the types mention or even view into them without copying. you literally arent sacrificiing anything.
[21:42:21] <FromDiscord> <Professor Actual Factual> (edit) "https://play.nim-lang.org/#ix=3HnJ" => "https://play.nim-lang.org/#ix=3HnK"
[21:52:32] <FromDiscord> <guzba> In reply to @Solitude "openarray is ptr +": sure, that looks true if im going to add ptr+len anyway. no harm in them wrapping it i guess. i'll still need to turn it back into ptr + len to hold it anywhere (eg bitstream in zippy) but supersnappy is simple enough to avoid that.
[21:58:25] *** Joins: jjido (~Denis@90.213.58.125)
[22:05:10] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[22:30:25] *** Quits: jjido (~Denis@90.213.58.125) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:32:48] *** Quits: u0_a185 (~u0_a185@121-80-249-103f1.kyt1.eonet.ne.jp) (Ping timeout: 250 seconds)
[22:52:43] *** Joins: jjido (~Denis@90.213.58.125)
[22:58:30] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[22:59:32] *** Joins: xet7 (~xet7@user/xet7)
[23:00:23] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[23:22:49] *** Joins: krux02 (~krux02@p200300e817365e0034cc1bc883b75341.dip0.t-ipconnect.de)
[23:28:22] <FromDiscord> <Michal58> What is the difference between `import math` and `import std/math`? I've always only used the former.
[23:33:40] <FromDiscord> <konsumlamm> they do the same, but the latter is preferred
[23:34:01] <FromDiscord> <konsumlamm> `std/` searches specifically in the stdlib
[23:34:29] <FromDiscord> <konsumlamm> if you had your own local module called `math`, it may conflict otherwise
[23:35:24] <FromDiscord> <konsumlamm> also some stdlib modules require the `std/` prefix (it may actually become mandatory for all stdlib modules in the future)
[23:42:49] *** Quits: pch_ (~pch@66.49.131.33) (Ping timeout: 265 seconds)
[23:45:48] <FromDiscord> <Michal58> ok, thanks
[23:47:59] <nrds> <06Prestige99> PMunch if you're here, #nimdow should be bridged to libera if you want to just talk over the bridge
[23:55:51] *** Joins: u0_a185 (~u0_a185@121-80-249-103f1.kyt1.eonet.ne.jp)
[23:57:14] <FromDiscord> <Sabena Sema> can you import std to make it search for all of them?
[23:58:14] <FromDiscord> <Sabena Sema> also: `using` is impossible to implement in the library without using term rewriting macros right?
[23:59:20] *** Joins: pch (~pch@66.49.131.33)
