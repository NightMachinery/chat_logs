[08:07:49] *** Joins: libertyprime (~libertypr@118-92-72-229.dsl.dyn.ihug.co.nz)
[13:50:17] *** Quits: infinity0 (~infinity0@occupy.ecodis.net) (Ping timeout: 240 seconds)
[13:52:26] *** Joins: infinity0 (~infinity0@occupy.ecodis.net)
[19:00:14] *** Quits: tolt (~weechat-h@li219-154.members.linode.com) (*.net *.split)
[19:00:15] *** Quits: dminuoso (~dminuoso@user/dminuoso) (*.net *.split)
[19:00:15] *** Quits: arkeet (~arkeet@moriya.ca) (*.net *.split)
[19:00:16] *** Quits: libertyprime (~libertypr@118-92-72-229.dsl.dyn.ihug.co.nz) (*.net *.split)
[19:00:16] *** Quits: fryguybob (~fryguybob@cpe-74-67-169-145.rochester.res.rr.com) (*.net *.split)
[19:00:16] *** Quits: lambdabot (~lambdabot@haskell/bot/lambdabot) (*.net *.split)
[19:00:17] *** Quits: mmaruseacph2 (~mihai@198.199.100.72) (*.net *.split)
[19:00:17] *** Quits: davean (~davean@davean.sciesnet.net) (*.net *.split)
[19:00:18] *** Quits: xplat (sid136671@id-136671.hampstead.irccloud.com) (*.net *.split)
[19:00:18] *** Quits: edwardk (sid47016@haskell/developer/edwardk) (*.net *.split)
[19:00:18] *** Quits: idnar (sid12240@debian/mithrandi) (*.net *.split)
[19:00:18] *** Quits: jackdk (sid373013@cssa/jackdk) (*.net *.split)
[19:00:18] *** Quits: c_wraith (~c_wraith@adjoint.us) (*.net *.split)
[19:00:19] *** Quits: gdd (~gdd@129.199.146.230) (*.net *.split)
[19:00:21] *** Quits: dibblego (~dibblego@haskell/developer/dibblego) (*.net *.split)
[19:00:22] *** Quits: SanchayanMaity (sid478177@id-478177.hampstead.irccloud.com) (*.net *.split)
[19:00:24] *** Quits: polux (~polux@51.15.169.172) (*.net *.split)
[19:00:24] *** Quits: shachaf (~shachaf@user/shachaf) (*.net *.split)
[19:00:26] *** Quits: Taneb (~Taneb@2001:41c8:51:10d:aaaa:0:aaaa:0) (*.net *.split)
[19:01:11] *** Joins: tolt (~weechat-h@li219-154.members.linode.com)
[19:01:57] *** Joins: SanchayanMaity (sid478177@id-478177.hampstead.irccloud.com)
[19:01:57] *** Joins: polux (~polux@51.15.169.172)
[19:01:57] *** Joins: shachaf (~shachaf@user/shachaf)
[19:02:07] *** Joins: dibblego (~dibblego@haskell/developer/dibblego)
[19:02:19] *** Joins: gdd (~gdd@129.199.146.230)
[19:02:26] *** Joins: dminuoso (~dminuoso@user/dminuoso)
[19:02:26] *** Joins: arkeet (~arkeet@moriya.ca)
[19:02:48] *** Joins: davean (~davean@davean.sciesnet.net)
[19:02:48] *** Joins: xplat (sid136671@id-136671.hampstead.irccloud.com)
[19:02:48] *** Joins: edwardk (sid47016@haskell/developer/edwardk)
[19:02:48] *** Joins: idnar (sid12240@debian/mithrandi)
[19:02:48] *** Joins: jackdk (sid373013@cssa/jackdk)
[19:02:48] *** Joins: c_wraith (~c_wraith@adjoint.us)
[19:03:04] *** Joins: Taneb (~Taneb@2001:41c8:51:10d:aaaa:0:aaaa:0)
[19:03:08] *** Joins: libertyprime (~libertypr@118-92-72-229.dsl.dyn.ihug.co.nz)
[19:03:08] *** Joins: fryguybob (~fryguybob@cpe-74-67-169-145.rochester.res.rr.com)
[19:03:08] *** Joins: lambdabot (~lambdabot@haskell/bot/lambdabot)
[19:03:08] *** Joins: mmaruseacph2 (~mihai@198.199.100.72)
[19:05:43] *** Joins: absence (torgeihe@hildring.pvv.ntnu.no)
[19:14:19] <absence> is there a simple way to copy a "field" from one value to another? something like "set lens1 (srcval ^. lens1) . set lens2 (srcval ^. lens2) ..... $ dstval" quickly becomes verbose
[19:19:03] <xplat> i think you can write that pattern down ... but you have to give it either a fancy RankNTypes type signature or use cloning
[19:20:43] <xplat> an alternative would be to group those fields all together
[19:21:20] <xplat> ClassyLens style instead of Field style
[19:45:15] <absence> xplat: extracting the pattern is certainly the easiest way out, and does help a bit, but there's still some repetition, e.g. "copy lens1 srcval . copy lens2 srcval ....". does grouping the fields involve using different lenses? they're unfortunately from an external library and outside my control
[19:46:47] <absence> something similar to "copy (lens1, lens2, ...) srcval" would be great, but if that's outside the happy path of the lens library, it may not be worth doing, even if it is possible...
[19:49:52] <xplat> you could also abstract the pattern (f srcval . g srcval)
[19:50:20] <xplat> @pl \srcval -> f srcval . g srcval
[19:50:20] <lambdabot> liftM2 (.) f g
[19:53:15] <xplat> so 'let (<.>) = liftA2 (.) in (copy lens1 <.> copy lens2 <.> copy lens3 <.> ...) srcval dstval'
[20:08:10] <absence> thanks, that's getting close
[20:24:39] <xplat> also if you're not using type changing then `foldr1 (liftA2 (.)) [copy lens1, copy lens2, copy lens3, ...] srcval dstval` might work
