[00:03:59] <michaelpj[m]> I think there's already a PR for that
[00:04:13] <michaelpj[m]> https://github.com/haskell/haskell-language-server/pull/2581
[01:20:13] <jneira[m]> oh, yeah the pr is only testing wingman for ghc-9.0.1 but the changes needed in ghcide does not compile for ghc-9.2.1
[01:31:41] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[01:33:17] <isovector1> yeah
[01:33:20] <isovector1> not sure what to do about this
[01:33:34] <isovector1> im happy to just get 9.0 working
[02:32:28] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[02:45:18] *** Quits: shapr (~user@2601:7c0:c37c:46d0:e770:81ff:40e0:b008) (Remote host closed the connection)
[02:45:31] *** Joins: shapr (~user@2601:7c0:c37c:46d0:e770:81ff:40e0:b008)
[04:43:03] *** Quits: isovector1 (~isovector@172.103.216.166) (Ping timeout: 256 seconds)
[04:51:10] <anton-latukha[m]> Yes. Taking the 9.0.1 update was hard for everyone.
[04:51:10] <anton-latukha[m]>  ... Interesting, I've thought `wingman` uses some TH incantations. ... Wow, HLS also does not uses `template-haskell`.
[04:58:12] <anton-latukha[m]> Useful note on GHC & TH: there exists a `deriving-compat` that besides its compat agenda - also extends GHC to naturally derive `ReadN, ShowN, EqN, OrdN`: https://hackage.haskell.org/package/deriving-compat.
[04:59:21] <anton-latukha[m]> https://github.com/haskell-compat/deriving-compat/issues/35
[06:26:55] *** Joins: isovector1 (~isovector@172.103.216.166)
[06:44:59] *** Quits: shapr (~user@2601:7c0:c37c:46d0:e770:81ff:40e0:b008) (Remote host closed the connection)
[06:45:12] *** Joins: shapr (~user@2601:7c0:c37c:46d0:e770:81ff:40e0:b008)
[09:52:08] *** Quits: isovector1 (~isovector@172.103.216.166) (Quit: Leaving)
[11:00:37] *** Quits: shapr (~user@2601:7c0:c37c:46d0:e770:81ff:40e0:b008) (Ping timeout: 240 seconds)
[11:46:07] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[12:30:09] *** Quits: boxscape (~boxscape@user/boxscape) (Quit: You have been kicked for being idle)
[13:01:22] <pepeiborra> We are seeing that most HLS plugin contributors find it difficult to provide continued support for their plugins shortly after donating them to the HLS Team.
[13:01:22] <pepeiborra> Maintaining HLS/ghcide is hard work, adding all the contributed plugins to that is a bit much. We will have to figure out a better model going forward. 
[13:01:22] <pepeiborra> I don't know if it's more summer projects/bounties, a semi-official social contract like Stackage does, or a technological solution based on dynamic code loading, but we should probably start figuring it out.
[13:09:41] <michaelpj[m]> I think the onerous part is mostly these GHC upgrades, right? I think people have been more engaged with bug fixing. It's unfortunate that almost all plugins have high exposure to the GHC API
[13:10:18] <michaelpj[m]> One option would be to stop adopting them! And just ask people to post them to hackage under their own aegis and then we can depend on them conditionally
[14:44:26] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[14:45:23] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[15:07:08] <pepeiborra> We should definitely consider that option too. Having all the plugins in the same repo as HLS does have real benefits, but I suspect that the ownership costs are too high in the long term. 
[15:13:58] <jneira[m]> <michaelpj[m]> "I think the onerous part is..." <- maybe we could use more extensively hie-compat and break that direct dep in plugins
[15:14:13] <jneira[m]> so the work in hie-compat would be leveraged in all the codebase
[15:14:58] <michaelpj[m]> maybe, but we already lost that battle even further with the 9.2 changes, which ended up quite spread out
[15:15:29] <michaelpj[m]> pie-in-the-sky idea: what if we asked the HF to fund someone who knows the GHC API very well (e.g. someone from WT) to do compatibility work for us?
[15:33:58] <jneira[m]> üëçÔ∏è
[15:36:06] <jneira[m]> hmm in the last meeting hie-compat was mentioned, no? pepeiborra opened https://github.com/haskell/haskell-language-server/issues/2454
[15:36:32] <jneira[m]> but it is about make it generic, no help us in use it in our own codebase :-) 
[15:37:02] <pepeiborra> I'm not sure how hie-compat is related to this. You mean ghc-compat ?
[16:07:11] *** Joins: arrowd (~arr@2.94.236.140)
[16:56:15] <anton-latukha[m]> > Maintaining HLS/ghcide is hard work, adding all the contributed plugins to that is a bit much. We will have to figure out a better model going forward.... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/9793faf517b48e111f8e780f18f046f5d8c2b604)
[16:58:09] <jneira[m]> plugins should be loaded at runtime on user demand
[16:58:38] <jneira[m]> as everyone is doing out of there
[16:59:08] <jneira[m]> but load runtime code with ghc is hard (it seems)
[17:02:59] <anton-latukha[m]> The `git` repo always can be abstracted with history preservation. I both successfully (with preservation of all git history) decoupled the projects into subprojects, and even extracted mixed parts from the repo, formed & refined the newly formed project & then merged its results into other projects (was deploying automation suite & CI). Git has plasticity of that - preservation of history is a fair & respected way to
[17:02:59] <anton-latukha[m]> do this, form each plugin into its own repository & then give the rights to the authors. That creates a distributive federalized system of human effort, specialization and attention focus.
[17:03:56] <anton-latukha[m]> But, yes, first the build time / runtime decoupling.
[17:04:28] <anton-latukha[m]> HLS in time can have ~100 plugins, it is how the thing must be thought about.
[17:16:45] <michaelpj[m]> I don't think loading things at runtime gets is to a meaningfully better place than just moving things out to separately maintained packages. Even if HLS depends on all the plugins we can do what we do today with flags and just disable plugins that don't work.
[17:16:45] <michaelpj[m]> The integration work is then just: does plugin X build? If not, turn it off, ping the maintainer, and let them turn it on when it's fixed
[17:17:06] <michaelpj[m]> Runtime code loading is a massive rabbit hole, I really don't think we should go there unless there are really clear benefits
[17:19:00] <michaelpj[m]> (also having an open set of plugins would be a nightmare downstream. How would the vscode extension know what options to offer?)
[17:33:19] <anton-latukha[m]> Yes, decoupling, generally means turning two-way dependency, into one-way dependency.
[17:33:19] <anton-latukha[m]> Would notice that because of two-way dependency, the stractural strain extends even beyound plugins - as they depende on packages they are using. Example: how desigion in`brittany` to support new GHC only while also drop old `aeson` version - suddently put the strain of consequences (essentially, structurally, implied inability of HLS package set to be build on new GHCs) & so on the HLS & its maintainers, who would
[17:33:19] <anton-latukha[m]> notice/know/arrive & update all plugins to `aeson 2.0` to sync everything with `brittany` dependency requirement. All plugin maintainers would not know, or it would be an ugly action to explicitly call all plugin authors/maintainers to divert their attention that `brittany` did it & thefore everyone else must support `aeson 2.0 asap`, that puts `brittany` maintained into a heated stop, while that should not happen, the
[17:33:19] <anton-latukha[m]> structure simply should allow for the system to be flexible.
[17:34:11] <anton-latukha[m]> s/Would notice that because of two-way dependency, the stractural strain extends even beyound plugins - as they depende on packages they are using. Example: how desigion in`brittany` to support new GHC only while also drop old `aeson` version - suddently put the strain of consequences (essentially,... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/d053a2cf4d7cfccbff8e1f600337790ce216c8a5)
[17:34:43] <anton-latukha[m]> s/Would notice that because of two-way dependency, the stractural strain extends even beyound plugins - as they depende on packages they are using. Example: how desigion in`brittany` to support new GHC only while also drop old `aeson` version - suddently put the strain of consequences (essentially,... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/ca4449219cd031e637be7e0d16999c1b79a426f7)
[17:35:01] <michaelpj[m]> I care less about the fact that we have to do compatibility work than about that work being shared over a larger group of people
[17:35:31] <anton-latukha[m]> s/Would notice that because of two-way dependency, the stractural strain extends even beyound plugins - as they depende on packages they are using. Example: how desigion in`brittany` to support new GHC only while also drop old `aeson` version - suddently put the strain of consequences (essentially,... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/725635d71fd9802c2c23774dec738d016dbc1946)
[17:36:20] <michaelpj[m]> (not to mention that if we did runtime code-loading of haskell code, then we'd have to make sure everything was compiled with consistent versions of dependencies anyway!)
[17:48:30] <anton-latukha[m]> Redistribution of plugins into packages would also have a good positive impact, that currently most useful plugins would recieve an extended set of trusted people & would live in `haskell` group.
[17:48:30] <anton-latukha[m]> I'm talking that that essentially eliminates situations when everyone in Haskell waits on 1 person to come around to merge the code into a repo.
[17:48:30] <anton-latukha[m]> That pretty much in a practical way solves a big structural problem of having many projects - when Haskell community is waiting on some particular one person with access to do particular actions & release them, probability that someone from several people merges the code, an someone of several people releases it - it essentially solves that structural boundary crossing.
[17:49:08] <anton-latukha[m]> s/I'm talking that that essentially eliminates situations when everyone in Haskell waits on 1 person to come around to merge the code into a repo.//
[17:53:50] <michaelpj[m]> to be clear, they *are* packages. They just aren't in different repositories. Splitting them up is largely a social move: rather than automatically looking like all the existing maintainers of HLS will look after your plugin, it's more obviously "yours"
[17:54:13] <michaelpj[m]> maybe we could achieve the same with more explicit assignation of maintainers in Hackage, CODEOWNERS etc in the HLS repo
[18:01:14] <anton-latukha[m]> It is even can be sane way to solve the further situations of any of it, allowing some additional small preferences/abilities in HLS processes (for example, HLS testing the plugin subsets & notifying on problems) - but with requirement for plugin to be transferred into `haskell` group, that would give practical encouragement for plugin author to transfer their project into `haskell` group & so the group admins would be
[18:01:14] <anton-latukha[m]> able to access plugins if the need arise. But I'm thinking long term strategically here. Just a great way to compensate 3 things  side effects combine by combining them (allowing complete distribution of effort, yet preserving redundancy, & have a pact of monitoring the plugin state & reacting, but not to all plugins, only ones that under `haskell` collaborative group, to encourage join the efforts).
[18:01:44] <jneira[m]> well having the packages in the same repo has some latent work and cost, including the hackage upload (although it is semiautomated)
[18:02:43] <anton-latukha[m]> s/It is even can be sane way to solve the further situations of any of it, allowing some additional small preferences/abilities in HLS processes (for example, HLS testing the plugin subsets & notifying on problems) - but with requirement for plugin to be transferred into `haskell` group, that would... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/5b269416bf5e9c3aa33aec16db64fdb65a6290c8)
[18:03:00] <anton-latukha[m]> s/It is even can be sane way to solve the further situations of any of it, allowing some additional small preferences/abilities in HLS processes (for example, HLS testing the plugin subsets & notifying on problems) - but with requirement for plugin to be transferred into `haskell` group, that would give practical encouragement for plugin author to transfer their project into `haskell` group & so the group admins would
[18:03:00] <anton-latukha[m]> be able to access plugins if the need arise. But I'm thinking long term strategically here. Just a great way to compensate 3 things  side effects combine by combining them (allowing complete distribution of effort, yet preserving redundancy, & have a pact of monitoring the plugin state & reacting, but not to all plugins, only ones that under `haskell` collaborative group, to encourage join the efforts)./It is even can
[18:03:00] <anton-latukha[m]> be sane way to solve the further situations of any of it, allowing some additional small preferences/abilities in HLS processes (for example, HLS testing the plugin subsets & notifying on problems) - but with requirement for plugin to be transferred into `haskell` group, that would give practical encouragement for plugin author to transfer their project into `haskell` group & so the group admins would be able to access
[18:03:00] <anton-latukha[m]> plugins if the need arise. But I'm thinking long term strategically here. Just a great way to compensate side effects of 3 things by combining them, so they compensate each other weaknesses (allowing complete distribution of effort, yet preserving redundancy, & have a pact of monitoring the plugin state & reacting, but not to all plugins, only ones that under `haskell` collaborative group, to encourage joint efforts)./
[18:03:34] <jneira[m]> but separating them not only reduces the work upstream (hls) but add the integration cost, and I think the idea is that would be in charge of downstream packages
[18:04:11] <jneira[m]> so more sense of ownership but more work in exchange for plugin maintainers
[18:05:01] <jneira[m]> not sure if that would make get more work on plugins overall
[18:05:04] <michaelpj[m]> yeah, so basically as a "plugin maintainer" you would be on the hook for all the compatibility and update work that we currently do
[18:05:08] <michaelpj[m]> yeah
[18:05:10] <michaelpj[m]> might put people off
[18:05:12] <michaelpj[m]> maybe that's not bad?
[18:05:18] <anton-latukha[m]> s/It is even can be sane way to solve the further situations of any of it, allowing some additional small preferences/abilities in HLS processes (for example, HLS testing the plugin subsets & notifying on problems) - but with requirement for plugin to be transferred into `haskell` group, that would... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/ce8eb24398c575a2a8627032aa18c1aaf341856c)
[18:05:31] <anton-latukha[m]> s/It is even can be sane way to solve the further situations of any of it, allowing some additional small preferences/abilities in HLS processes (for example, HLS testing the plugin subsets & notifying on problems) - but with requirement for plugin to be transferred into `haskell` group, that would give practical encouragement for plugin author to transfer their project into `haskell` group & so the group admins would
[18:05:31] <anton-latukha[m]> be able to access plugins if the need arise. But I'm thinking long term strategically here. Just a great way to compensate 3 things  side effects combine by combining them (allowing complete distribution of effort, yet preserving redundancy, & have a pact of monitoring the plugin state & reacting, but not to all plugins, only ones that under `haskell` collaborative group, to encourage join the efforts)./It is even can
[18:05:31] <anton-latukha[m]> be sane way to solve the further situations of any of it, allowing some additional small preferences/abilities in HLS processes (for example, HLS testing the plugin subsets & notifying on problems) - but with requirement for plugin to be transferred into `haskell` group, that would give practical encouragement for plugin author to transfer their project into `haskell` group & so the group admins would be able to access
[18:05:31] <anton-latukha[m]> plugins if the need arise. But I'm thinking long term strategically here. Just a great way to compensate side effects of 3 things by combining them, so they compensate each other weaknesses (allowing complete distribution of effort, yet preserving redundancy, & have a pact of monitoring the plugin state & reacting, but not to all plugins, only ones that under `haskell` collaborative group, to encourage joint efforts)./
[18:05:36] <michaelpj[m]> since lots of contributions that disproportionately add maintenance burden isn't sustainable :(
[18:05:40] <michaelpj[m]> IDK
[18:05:48] <michaelpj[m]> ideally it would just not be such a pain to maintain these things!
[18:06:07] <jneira[m]> I mean we all own hls as a whole and his ricks, no? üò¨
[18:07:46] <jneira[m]> would like to know @isovector thoughts on this üôÇ
[18:15:12] <jneira[m]> separation would make the plugins codebase more irregular and inconsistent, so more chances to make them less reliable
[18:15:53] *** Joins: emad (~emad@102.42.146.250)
[18:16:08] <jneira[m]> and reliability is the main pain point of hls with difference imo
[18:16:59] <michaelpj[m]> I think if we had a much larger set of core contributors where we could meaningfully impose quality control on contributed plugins and keep them up to date, that would be plausible
[18:17:06] <michaelpj[m]> but I'm not sure that's really true
[18:17:30] <jneira[m]> how many times I ve read "hls is sweet when you get it to work" or "I would use hls if it works for me"
[18:18:04] <michaelpj[m]> I think that's relatively rarely issues with plugins
[18:18:21] <michaelpj[m]> like 90% of the time it's the cradle setup or resource usage
[18:19:53] <michaelpj[m]> I would much rather Pepe was working on performance stuff than GHC compatibility, I have to say :D
[18:20:02] <pepeiborra> It's not just ghc api changes, there's also behaviour changes. For example:
[18:20:02] <pepeiborra> - the rename plugin builds with 9.2 but doesn't work because the representation of src locations has changed. 
[18:20:02] <pepeiborra> - the exact print changes in 9.2 required a rewrite of the ghcide code actions.
[18:20:57] <pepeiborra> Maybe we should move this to a GitHub discussion, as I can't read the chat backlog right now but might be able to participate during the weekend
[18:21:35] <michaelpj[m]> +1
[18:26:21] <pepeiborra> Maybe someone who has been following the discussion can open a new discussion in Github and summarise what has been said?
[18:27:26] <michaelpj[m]> I'm happy to do that
[18:37:57] *** Joins: shapr (~user@2601:7c0:c37c:46d0:c5e9:5422:b6fa:e10b)
[18:47:02] <michaelpj[m]> https://github.com/haskell/haskell-language-server/discussions/2588
[19:30:11] *** Quits: hjulle[m] (~hjullemat@2001:470:69fc:105::1dd) (Quit: You have been kicked for being idle)
[20:13:47] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[21:12:16] <shapr> more devs gotten from more tutorials?
[21:35:25] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[22:08:29] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[22:23:57] <anton-latukha[m]> I removed my mention from "argued that we really should move towards runtime code loading" since I did not meant that.
[22:23:57] <anton-latukha[m]> I meant that HLS <-> Plugins <-> all Plugin dependencies tree - has two-way coupling. Two-way coupling is a notorious characteristic in architectural design, because it is example of strict rigidity of the system which additionally known to propagate the strain not only through itself, but also around itself. I showed that HLS build depends on the builds of pluding dependencies. HLS build strictly depends on `.project`,
[22:23:57] <anton-latukha[m]> which depends on build of every plugin, build of every plugin depends on its tree of dependencies (including HLS as a dependency & we see - the two-way coupling right here). & so the change in `brittaly` - suddenly, through its plugin - prevents updating the HLS building on 9.0.1 - the infrastructure strain goes upward (from plugin to HLS) instead of downstream.
[22:24:38] <anton-latukha[m]> This is what I was mentioning.
[22:30:54] <anton-latukha[m]>  * I removed my mention from "argued that we really should move towards runtime code loading" since I did not meant that.... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/68533f49592433e49999150068b07ca6e15a81f3)
[22:31:28] <anton-latukha[m]>  * I removed my mention from "argued that we really should move towards runtime code loading" since I did not meant that.... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/adc4ccc285ebbb2581fd33549ca4300c63809450)
[22:32:28] <anton-latukha[m]>  * I removed my mention from "argued that we really should move towards runtime code loading" since I did not meant that.... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/69f63182ce362721e696f7f09ddcccb8d44aa014)
[22:33:49] <anton-latukha[m]>  * I removed my mention from "argued that we really should move towards runtime code loading" since I did not meant that.... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/d2701bf50f7309517478cbe627a7fe45752aac9a)
[22:34:13] <anton-latukha[m]>  * I removed my mention from "argued that we really should move towards runtime code loading" since I did not meant that.... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/a1d8026ed5cbf313d79a19880c8f181603b5f9f0)
[22:35:39] <anton-latukha[m]>  * I removed my mention from "argued that we really should move towards runtime code loading" since I did not meant that.... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/0bbf2085da5cab62b6f6ccb8e9a4f9448eea3ee9)
[22:40:46] <anton-latukha[m]>  * I removed my mention from "argued that we really should move towards runtime code loading" since I did not meant that.... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/9f651497b77a630f4356ebc5d6bd61203403ee60)
[22:45:18] <anton-latukha[m]>  * I removed mention of my name from "argued that we really should move towards runtime code loading" since I did not meant that.... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/67b8756cd8709c25fadf19236f34021d8ca27dd5)
[22:53:19] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[22:53:53] <anton-latukha[m]>  * I removed mention of my name from "argued that we really should move towards runtime code loading" since I did not meant that.... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/e822826a5c0aeca459b67e4d5459885b3a3b216f)
[22:54:09] <anton-latukha[m]>  * I removed mention of my name from "argued that we really should move towards runtime code loading" since I did not meant that.... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/49e6efcd411808480569572a4d8033e86533ae36)
[22:57:14] <anton-latukha[m]>  * I removed mention of my name from "argued that we really should move towards runtime code loading" since I did not meant that.... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/ec328370b51f60202afb88bd252de6daa44c42bb)
[22:58:13] <anton-latukha[m]>  * I removed mention of my name from "argued that we really should move towards runtime code loading" since I did not meant that.... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/61ee6cf04e70e6e8046158bf95a4337fc56bb642)
[23:00:05] <anton-latukha[m]>  * I removed mention of my name from "argued that we really should move towards runtime code loading" since I did not meant that.... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/fb3b43abff3c84ae6523ac34f59366fb3a6ea16f)
[23:02:00] <anton-latukha[m]>  * I removed mention of my name from "argued that we really should move towards runtime code loading" since I did not meant that.... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/9c4564dabc374e6ef160dfe5c3b53ab71a57cc81)
[23:03:52] <anton-latukha[m]>  * I removed mention of my name from "argued that we really should move towards runtime code loading" since I did not meant that.... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/d62adc36ba492f3cae7f9b253104ac31d03c938d)
[23:13:50] <anton-latukha[m]>  * I removed mention of my name from "argued that we really should move towards runtime code loading" since I did not meant that.... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/cc260e42bfac0ca05f8cf49dfd2de5c3c84014dd)
[23:15:16] <anton-latukha[m]>  * I removed mention of my name from "argued that we really should move towards runtime code loading" since I did not meant that.... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/9bf5d736996a0e931f52e6955b06fd1810a0d808)
[23:15:33] <anton-latukha[m]>  * I removed mention of my name from "argued that we really should move towards runtime code loading" since I did not meant that.... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/36dd7e57c9e0e2bd89d8cda97929988237f4bbb5)
[23:16:08] <anton-latukha[m]>  * I removed mention of my name from "argued that we really should move towards runtime code loading" since I did not meant that.... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/405aeeab5c152dacaaf8ea4f12f9d65b3caf6fee)
[23:16:41] <anton-latukha[m]>  * I removed mention of my name from "argued that we really should move towards runtime code loading" since I did not meant that.... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/adc4e5bd5c2e4052a0a545fb23700607646ea9b5)
[23:17:15] <anton-latukha[m]>  * I removed mention of my name from "argued that we really should move towards runtime code loading" since I did not meant that.... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/22711779db3716ef43cd45b5bba0e5a28ef86c72)
[23:20:22] <anton-latukha[m]>  * I removed mention of my name from "argued that we really should move towards runtime code loading" since I did not meant that.... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/405ced48c315c403901c257c990e5e25c90da96d)
[23:25:44] <anton-latukha[m]> I state that `brittany` was in the scope of `9.0.1`, because I was trying it in: https://github.com/haskell/haskell-language-server/pull/2473
[23:25:44] <anton-latukha[m]> And we can observe the two-way coupling in: https://github.com/haskell/haskell-language-server/pull/2473#issuecomment-991903224
[23:26:07] <anton-latukha[m]>  * I state that `brittany` was in the scope of `9.0.1`, because I was trying it in, and we can observe the two-way coupling in this comment: https://github.com/haskell/haskell-language-server/pull/2473#issuecomment-991903224
[23:29:21] <anton-latukha[m]> Where the fake dependency, `brittany` clashed with the real dependency, `lsp-types`.
[23:29:55] <anton-latukha[m]> s/`/`,/
[23:31:16] <anton-latukha[m]> s/Where the fake dependency, `brittany` clashed with the real dependency, `lsp-types`./Where the fake (superficial) project dependency, `brittany`, clashed with the real dependency `lsp-types`./
[23:33:05] <anton-latukha[m]>  * I removed mention of my name from "argued that we really should move towards runtime code loading" since I did not meant that.... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/e8519d0146f1d92d2ab948f4413e3ae1c93cfe07)
[23:33:57] <anton-latukha[m]>  * I state that `brittany` was in the scope of `9.0.1`, because I was trying it in that scope, and we can observe the two-way coupling in this comment: https://github.com/haskell/haskell-language-server/pull/2473#issuecomment-991903224. That started the chain of events.
[23:34:05] <anton-latukha[m]>  * I state that `brittany` was in the scope of `9.0.1`, because I was trying it in that scope, and we can observe the two-way coupling in this comment: https://github.com/haskell/haskell-language-server/pull/2473#issuecomment-991903224.
[23:35:05] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 256 seconds)
[23:37:50] *** Joins: juhp (~juhp@128.106.188.82)
[23:45:17] <anton-latukha[m]> Also, because all plugins are currently coupled with HLS - there the support of `aeson 2.0` meant for all plugins to start/be able to support `aeson 2.0` and in current project design/conditions that means that `jneira` is aware of that & plugin authors may forgot they used `aeson` in plugin at all, or do not know about the processes in HLS, or not remember about it, may wait for community to help & know that
[23:45:17] <anton-latukha[m]> maintainers either would work on it, or notify about the need.
[23:46:23] <anton-latukha[m]> It is all because of that two-way coupling & bunding plugins with HLS.
