[00:00:17] <mfiano> The speed improvement is the use of an array over inlined struct field functions. There is (or was) a large difference
[00:01:06] <mfiano> This was many years ago. I have no idea if this produces a hairy data vector these days or not (on SBCL)
[00:02:19] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 244 seconds)
[00:03:22] * mfiano used to (foolishly) use structs _everywhere_ and coded Lisp more like C than I should be admitting.
[00:04:03] *** Joins: notzmv (~zmv@user/notzmv)
[00:06:02] *** Quits: sander (~sander@user/sander) (Ping timeout: 256 seconds)
[00:06:04] <White_Flame> once I started doing a lot more heterogeneous language programming, as well as distributed systems, I ended up doing far fewer classes and just used simpler native data structures
[00:06:36] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[00:07:04] *** Joins: hendursaga (~weechat@user/hendursaga)
[00:07:36] <lotuseater> mfiano: so good it's now different :)
[00:08:18] <mfiano> Yes, I value good protocol architecture over performance any day. Preferably one that allows for additive programming.
[00:08:24] *** Joins: sander (~sander@user/sander)
[00:08:31] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[00:08:40] <mfiano> By additive, I mean adding features with minimal if any changes to existing codes.
[00:08:48] <mfiano> As well as interactive coding.
[00:08:59] <mfiano> Structs are not very good at that at all :)
[00:10:39] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:11:41] *** Quits: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:11:54] <lotuseater> how is the slot option :read-only translated to a slot in a clos class? just with the :READER option?
[00:13:42] <mfiano> Do you mean :read-only for struct slots?
[00:14:14] <pjb> lotuseater: yes.
[00:15:00] <lotuseater> yes i meant that
[00:15:02] <mfiano> By default 2 functions are defined for accessing a slot. Their names are FOO and (SETF FOO). :read-only prevents the latter from being defined.
[00:15:16] <mfiano> Assuming an empty conc-name that is
[00:15:25] <lotuseater> ok
[00:15:33] <pjb> well, for defstruct it's not specified how the accessors are implemented.
[00:15:56] <pjb> The writer could just be an entry in a table used by setf.
[00:15:59] <lotuseater> i realized a short time ago a defstruct takes multiple :constructor declarations
[00:16:12] <mfiano> Yes
[00:16:16] <pjb> (funcall '(setf foo) new-value foo-structure) is not conforming.
[00:16:36] *** Quits: lisp-newbie (~lisp-newb@192.117.240.42) (Quit: This computer has gone to sleep)
[00:16:45] <pjb> lotuseater: which with boa constructors or with &aux let you do some funny stuff.
[00:17:20] <lotuseater> oh hm
[00:17:28] <lotuseater> so much possibilities
[00:17:37] <pjb> (defstruct (rect (:constructor rect (w h)) (:constructor square (s &aux (w s) (h s)))) w h) (square 3) #| --> #S(rect :w 3 :h 3) |#
[00:17:41] *** Parts: nij- (~jin@2001-48F8-9021-806-0-0-0-3436-dynamic.midco.net) (#commonlisp)
[00:18:21] <lotuseater> ahh, useful
[00:19:13] <mfiano> I usually prefer external constructor (regulat) functions that call an internal struct constructor.
[00:19:19] <mfiano> But Lisp is flexible in every way
[00:33:10] *** Quits: silasfox (~sbv@2a0a-a540-533f-0-bad8-6c2f-3a71-f612.ipv6dyn.netcologne.de) (Ping timeout: 240 seconds)
[00:34:56] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 256 seconds)
[00:36:33] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[00:36:34] *** Joins: cuz (~user@38.140.58.234)
[00:41:10] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[00:46:16] *** Joins: dra (~dra@2a04:4540:640d:4100:e036:78b4:b4f:34bf)
[00:49:10] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Remote host closed the connection)
[00:49:55] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:53:59] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[00:54:12] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 245 seconds)
[01:02:07] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Ping timeout: 245 seconds)
[01:02:07] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[01:02:38] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[01:03:02] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[01:03:37] *** Quits: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se) (Ping timeout: 248 seconds)
[01:10:32] *** Joins: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se)
[01:11:32] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:11:53] *** Quits: Danishman (~Allan@2-104-144-110-cable.dk.customer.tdc.net) (Quit: Leaving)
[01:13:32] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:13:45] *** Joins: PinealGlandOptic (~PinealGla@37.115.210.35)
[01:15:53] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[01:17:14] *** Joins: amb007 (~a_bakic@178-222-1-68.dynamic.isp.telekom.rs)
[01:21:03] *** Quits: cuz (~user@38.140.58.234) (Remote host closed the connection)
[01:23:40] *** Quits: amb007 (~a_bakic@178-222-1-68.dynamic.isp.telekom.rs) (Ping timeout: 240 seconds)
[01:24:16] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[01:32:32] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 245 seconds)
[01:36:10] *** Quits: Fare (~fare@2601:184:4a7f:995c:e8f9:7f16:4246:effa) (Ping timeout: 240 seconds)
[01:36:42] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[01:37:45] *** Joins: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs)
[01:37:54] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[01:45:26] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:46:35] *** Quits: kulernil (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[01:46:56] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[02:05:08] *** Joins: Fare (~fare@2601:184:4a7f:995c:8f89:8775:5177:72e8)
[02:06:39] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[02:10:47] *** Quits: retropikzel (~retropikz@2001:999:200:4ae7:ecfe:ddd3:50a6:ff37) (Quit: Leaving)
[02:20:47] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[02:22:09] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[02:22:11] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Quit: ZNC - https://znc.in)
[02:31:40] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 240 seconds)
[02:38:08] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[02:40:27] *** Quits: pve_ (~pve@176-93-64-110.bb.dnainternet.fi) (Quit: leaving)
[02:44:59] *** Quits: gaqwas (~john@dynamic-095-118-023-212.95.118.pool.telefonica.de) (Ping timeout: 258 seconds)
[02:50:33] *** Joins: akoana (~ah@user/akoana)
[03:03:09] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[03:06:03] *** Quits: frgo (~frgo@p200300deef0cee00a99c244b7f2873f6.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:06:32] *** Joins: frgo (~frgo@p200300deef0cee00b82a697515333831.dip0.t-ipconnect.de)
[03:07:48] <char> What do you think of the opinion that throwing exceptions will go the way of goto
[03:08:07] <hayley> It won't.
[03:08:23] <char> care to elaborate?
[03:09:09] <hayley> "No." But goto didn't exactly go the way of goto, merely it got dynamic extent. The same can be said for exceptions^Wconditions.
[03:11:05] <hayley> And, in my opinion, any other option for condition handling makes the decision on what conditions can be recovered from too early, and/or shifts the conceptual "blame" to the handler when looking at a debugger.
[03:11:54] *** Joins: cjb (~cjb@user/cjb)
[03:12:18] <jasom> I really like the ability to run a condition handler before unwinding the stack.  It's so obviously better that I don't understand why so few other languages have adopted it.
[03:12:43] <char> jasom: I really like that feature too.
[03:19:37] <char> another time it makes sense if for a long running function like a server?
[03:20:45] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[03:21:12] <mfiano> Note that some attempts to get rid exceptions, such as Rust's exhaustive pattern matching, are much more computationally expensive.
[03:22:21] <moon-child> the overhead
[03:22:29] <moon-child>  is unlikely to be _very_ great in either case
[03:23:00] <hayley> Using monads for error handling also means you have to choose if (and how) results are wrapped, or if the thread should crash instead.
[03:23:06] <moon-child> imo, both rust-style error handling and condition-style error handling are prone to confusion over who is responsible for an error, and there is not really a semantic-level solution for that
[03:23:33] <mfiano> *
[03:23:39] <mfiano> err ^
[03:24:08] <hayley> So, now, for example, they are working on introducing constructors which can fail allocation, as currently threads crash if they can't allocate. Though what I recall might be out of date.
[03:24:54] <mfiano> Rust is trying to solve a lot of design mistakes, both in-language, and community conventions.
[03:25:49] <moon-child> my understanding is that haskell (exceptions are for exceptional behaviour; otherwise, errors are generally prevented by construction) style works well, but I have not used haskell in any serious capacity
[03:25:51] <mfiano> Such as freeing large heap objects being too slow, so they spawn a thread to do it in the background. Only to have the borrow-checker bite them harder much later (if it can even catch all the threading nonsense)
[03:26:04] <hayley> haha gencgc goes brr
[03:27:35] <mfiano> Oh yeah, and the most hilarious thing that is catching on in the Rust community as of late, is combating the large compile times by making more use of dynamic dispatch. I find that funny as hell, I don't know why.
[03:28:23] <moon-child> oh myy
[03:29:40] *** Quits: Fare (~fare@2601:184:4a7f:995c:8f89:8775:5177:72e8) (Ping timeout: 240 seconds)
[03:33:28] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[03:35:27] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[03:40:55] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[03:41:52] <pjb> char: signaling condition is a kind of come-from, not go-to.
[03:42:44] <char> pjb: I know it isn't the same, but some people compare it to goto as a not-so-great software engineering practice.
[03:46:13] <pjb> gotos are not so bad.  What's bad is the global scope of variables, and not having a clear view of the data flow going thru them.  When all the modules access all the global variables, you have a big mess.
[03:46:41] <mfiano> tagbody/go is very useful for efficient state machines
[03:47:54] <hayley> Right, I recall someone tried to generate Rust code from a DFA and got stuck with no goto. So there may be a chance that Lisp code generation and goto lead to another fastest regex engine.
[03:48:00] <pjb> That said, good night!
[03:49:08] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[03:49:15] *** Joins: blihp (~phil@c-68-43-233-92.hsd1.mi.comcast.net)
[03:52:37] <hayley> "Gotos aren't damnable to begin with. If you aren't smart enough to distinguish what's bad about some gotos from all gotos, goto hell." — Erik Naggum
[03:56:40] *** Quits: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs) (Ping timeout: 240 seconds)
[03:56:49] *** Quits: dra (~dra@2a04:4540:640d:4100:e036:78b4:b4f:34bf) (Remote host closed the connection)
[04:00:27] *** Quits: karlosz (~karlosz@93-164-35-250-static.dk.customer.tdc.net) (Ping timeout: 245 seconds)
[04:01:57] *** Quits: kulernil (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[04:02:24] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[04:03:57] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[04:04:11] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[04:06:21] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[04:13:47] *** Joins: pillton (~user@2405:b000:703:2::35:28)
[04:18:01] *** Quits: Josh_2 (~user@37.25.47.130) (Quit: ERC (IRC client for Emacs 27.1))
[04:18:10] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[04:19:38] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[04:21:10] *** Quits: taiju (~taiju@240b:253:ec40:2400:e1d1:588c:bc3f:1887) (Ping timeout: 240 seconds)
[04:25:06] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[04:31:13] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[04:33:34] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[04:47:37] *** Quits: random-nick (~random-ni@87.116.182.198) (Ping timeout: 248 seconds)
[04:50:57] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[05:02:47] *** Joins: pillton` (~user@140.253.50.23)
[05:05:33] *** Joins: pillton`` (~user@140.253.50.25)
[05:06:05] *** Quits: pillton (~user@2405:b000:703:2::35:28) (Ping timeout: 256 seconds)
[05:08:01] *** Quits: pillton`` (~user@140.253.50.25) (Remote host closed the connection)
[05:08:23] *** Joins: pillton`` (~user@140.253.50.25)
[05:08:55] *** Quits: pillton` (~user@140.253.50.23) (Ping timeout: 256 seconds)
[05:15:09] *** Quits: pillton`` (~user@140.253.50.25) (Ping timeout: 256 seconds)
[05:16:27] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[05:27:37] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[05:49:48] *** Joins: Fare (~fare@2601:184:4a7f:995c:175b:f49:18dd:c9a7)
[05:52:03] *** Joins: Josh_2 (~user@37.25.47.130)
[05:52:52] <Josh_2> Hi
[05:53:09] <Josh_2> What should I use to generate an atom and RSS feed for a website?
[05:57:18] <mfiano> I use...what was it...
[05:57:43] <jcowan> My general rule of thumb is that alists/plists make sense up to about 30 key/value pairs, and then hash tables kick in.
[05:57:56] <mfiano> xml-emitter
[05:59:11] <Josh_2> Thanks mfiano  :)
[06:00:53] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[06:14:31] <hayley> I thought I had observed a crossover of 7 elements with SICL's alist "hash table" and its linear probing hash table. But that would also include SBCL's generic function overhead.
[06:29:17] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[06:53:40] *** Joins: beach` (~user@2a01:cb19:150:3400:76ec:360e:ff97:8eae)
[06:58:10] *** Quits: beach (~user@2a01:cb19:150:3400:2606:4cb6:32f2:ab73) (Ping timeout: 272 seconds)
[07:00:18] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[07:11:51] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[07:17:17] *** beach` is now known as beach
[07:17:17] *** Joins: prxq (~quassel@x4dbda165.dyn.telefonica.de)
[07:17:29] *** ChanServ sets mode: +o beach
[07:21:13] *** Quits: prxq_ (~quassel@x4db60df5.dyn.telefonica.de) (Ping timeout: 248 seconds)
[07:23:11] *** beach sets mode: -o beach
[07:24:24] *** Joins: djuber (~user@65.79.128.64)
[07:31:06] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[07:31:19] <beach> Good morning everyone!
[07:31:26] <Qwnavery> afternoon.
[07:34:31] <beach> char: If I understand things right, throwing exceptions in C++ in particular does not work right because of their manual memory management, so it seems that the only safe way in C++ is to return error codes, which has a disastrous effect on modularity.
[07:34:33] <beach> But languages with automatic memory management don't have that problem
[07:35:40] <beach> char: Also, as phoe points out in his book, non-local control transfer is the very basis of a sane condition system, so there are your super gotos that are absolutely necessary as well.
[07:37:23] <beach> It is amazing how much misconception there is in this area.  Pascal had non-local gotos and that was the only mechanism Pascal could use for error handling.  Turbo Pascal eliminated those, thereby making generations of programmers use error codes instead.
[07:38:40] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 240 seconds)
[07:39:07] *** Joins: pillton (~user@2405:b000:703:2::35:28)
[07:41:12] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[07:47:19] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[07:48:08] *** Quits: djuber (~user@65.79.128.64) (Ping timeout: 268 seconds)
[07:48:21] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[07:50:04] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-3436-dynamic.midco.net)
[07:50:18] *** Joins: notzmv (~zmv@user/notzmv)
[07:57:47] <Bike> that is _one_ reason throwing exceptions in C++ does not work right
[07:58:02] <beach> What are some others?
[08:03:40] <aeth> If CL had to use error codes, there are multiple language features that make them less painful than "normal" languages. Lots of fun ways to do it. Multiple return values? Special/dynamic variables? Probably some cleverer ways than that, too.
[08:03:45] <aeth> But it doesn't, unless it's working with FFI
[08:04:28] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[08:04:52] <hayley> GETHASH and COMPILE use multiple values, but the former doesn't use multiple values for erroneous situations, and the latter ends up producing a function object anyway.
[08:04:56] <Bike> another one comes up with how catching works. like pretty much any exception handling thing, the exception handling clauses discriminate on the dynamic type of the exception. however, c++ is generally statically typed, so the type associated with the exception is whatever the static type of the object is
[08:05:57] <beach> I guess special variables could work, but otherwise, the main problem with error codes is that all functions between the function indicating the error and the function knowing what to do with it must also be aware of the error code.  So you end up with a program with most of its code doing error handling.
[08:06:21] <aeth> well, with multiple values, if it had become an idiom, there would be a macro for it
[08:06:43] <Bike> which means if you have a catch block like "catch (ExcType1& e) { ... throw e; }", and the exception "is" some subtype of ExcType1, that information is lost by the rethrow, so catch handlers for that subtype won't fire
[08:06:59] <Bike> so C++ has to compensate for this with a special rethrowing mechanism
[08:07:24] <beach> Bike: I see.  That language truly is a disaster.
[08:11:39] <Bike> i think it's fairly unique in this respect though. even languages as similar as java lack these issues as far as i know
[08:11:46] <beach> It is very interesting to me to see how one single design decision can have such dire consequences to the rest of the language; in this case lack of automatic memory management.
[08:13:12] <hayley> I remember that in Java, generic types "erase" the type parameters, so you can't throw or catch an exception of type Blah<String>. But you don't usually do that.
[08:13:43] <beach> I mean, making such a decision is fine in a relatively simple language like C.  But then, trying to create a language for application programming based on such a decision is just a recipe for disaster.
[08:16:32] <lotuseater> It's this overfocusing on performance.
[08:18:02] <hayley> lotuseater: Once someone said that not having bignums in some language was a tradeoff, and they focused on performance. The trouble is that taking non-zero time to produce a garbage value isn't very performant at all.
[08:19:02] <lotuseater> okay
[08:20:27] <hayley> So it is a weird definition of "performance".
[08:23:28] <moon-child> floating point is also imprecise
[08:23:38] <moon-child> it is very difficult to avoid such imprecision short of something like mathematica
[08:23:57] <moon-child> in many domains you can know what your bounds are, such that fixed-size integers are acceptable
[08:24:19] <moon-child> (indices are an excellent example--you will run out of memory far before you ever overflow a 64-bit array index!)
[08:24:57] <moon-child> (on the flip side, more people should be using arb)
[08:30:43] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[08:32:16] <beach> lotuseater: But, as I often point out, it is impossible to write a large-ish C++ program that is both fast and modular.  For modularity, something like smart pointers or reference counters is needed, or you need to copy every object.  And in either case, you take a factor 10-100 performance penalty.
[08:32:50] <beach> lotuseater: So if they were really focused on performance, they would have used uniform reference semantics the way Common Lisp does.
[08:33:47] <moon-child> beach: the modularity is also sometimes derived by implementing the logic in a 'dynamic' language such as lua.  Why the whole program could not be written in such a language, it is never explained!
[08:34:26] <hayley> "have u used lua it is too slow, I use C++ and Lua and thus get best of both worlds!1!!one"
[08:34:31] <beach> lotuseater: I think that's the real tragedy here.  C++ programmers firmly believe that they have chosen a good language for performance, because "everybody knows that the C++ compiler generates fast code", but since they don't compare with different languages, they don't know that their code is slow.
[08:34:51] <beach> moon-child: Hmm, yes I see.
[08:35:00] <hayley> Hm, last time I had a "discussion" with a C++ programmer, they proceeded to uncritically shove some benchmark list in my face.
[08:35:35] <lotuseater> beach: So it's kind of a ont-point statistic. :)
[08:35:43] <hayley> I use the adjective "uncritically" because, upon reading the benchmarks, most are a matter of who knows the best SIMD instructions.
[08:35:54] <beach> hayley: And all those benchmarks were for real applications like the size of a web browser or a music engraver, I guess, right?
[08:36:22] <hayley> beach: Oh, of course not. Stuff like drawing Mandelbrot sets and searching strings.
[08:36:35] <beach> Yes, I was being sarcastic.
[08:36:53] <hayley> Sure. I wasn't sure whether I should join in too.
[08:37:12] <hayley> "Of course, Mandelbrot sets and string searching are the basically the same thing!"
[08:38:00] <hayley> s/are the/are/
[08:38:37] <lotuseater> It's more about using the right algorithms and data structures for a specific problem.
[08:39:06] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: sleep)
[08:40:32] *** Quits: jans (~Thunderbi@185.213.154.242) (Ping timeout: 268 seconds)
[08:40:51] *** Quits: pillton (~user@2405:b000:703:2::35:28) (Ping timeout: 256 seconds)
[08:40:54] <beach> lotuseater: That is often the case.  However, even for relatively simple systems, like say, information systems, that manipulate objects that represent nontrivial real-word concepts, there is this choice of using references or not.
[08:40:55] <lotuseater> "Oh, we use the school method for multiplying numbers with over 100 digits."
[08:41:34] <beach> lotuseater: And if you are forced to copy objects or use reference counters to avoid pointer problems, then you take this performance penalty that C++ programmers conveniently seem to ignore.
[08:41:49] *** Joins: pegaso (~reis-r@131.72.121.3)
[08:42:05] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[08:42:10] <lotuseater> okay
[08:43:24] <lotuseater> I'm not so deep into that.
[08:45:06] <beach> Word processors, web browsers, music engravers, etc. fall into the same category.
[08:46:10] <moon-child> web browsers typically seem to be implemented with about as much javascript as c++
[08:46:14] <moon-child> whether this is an improvement, I don't know
[08:53:24] <lotuseater> I like this Mandelbrot program by Edi Weitz, runs good in wine.
[08:53:39] <lotuseater> s/good/well
[08:54:52] <lotuseater> It would be nice to see how he wrote that, or the other programs.
[08:55:39] <lotuseater> But this is also great: https://erleuchtet.org/2010/07/ridiculously-large-buddhabrot.html
[09:08:51] *** Quits: char (~charles@cpe-76-186-124-165.tx.res.rr.com) (Remote host closed the connection)
[09:09:40] *** Joins: char (~charles@cpe-76-186-124-165.tx.res.rr.com)
[09:10:13] <char> lotuseater: I downloaded the full size buddhabrot and opening it crashed Xorg
[09:11:33] *** Quits: char (~charles@cpe-76-186-124-165.tx.res.rr.com) (Remote host closed the connection)
[09:12:52] <lotuseater> char: Okay so the warning just states that for browsers. :) So a "Use at your own risk."
[09:14:07] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[09:15:41] *** Joins: hexology (~hexology@user/hexology)
[09:15:51] <lotuseater> But you can inspect the source for it.
[09:16:04] *** Joins: char (~charles@cpe-76-186-124-165.tx.res.rr.com)
[09:18:49] <lotuseater> Once a former friend of mine who I got temporarily into Lisp asked "How do those loosy parentheses terms even can become something executable?"
[09:20:45] *** Joins: jans (~Thunderbi@185.213.154.242)
[09:21:03] <beach> Wow.
[09:21:13] <beach> With emphasis on "former". :)
[09:22:02] <lotuseater> Yes, but that came because of other reasons.
[09:22:05] <beach> char: So now do you see the importance of both a sane condition system and goto (especially the "super" non-local) goto?
[09:22:32] *** Joins: pillton (~user@2405:b000:703:2::34:248)
[09:22:41] <beach> lotuseater: It is very hard to combat ignorance, especially if it is self chosen.
[09:22:57] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 245 seconds)
[09:24:49] <hayley> Once I met some people who were still testing a program after some months (apparently). I said I had "whacked out most of it in a weekend", and eventually we exchanged code.
[09:24:58] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[09:24:59] <beach> char: Or did you just mention the thing about exceptions to start a debate?
[09:25:14] <hayley> "Dude, why did you write it in Lisp? XD" "Well, some of us are still testing their software months later..."
[09:25:45] <char> I understood goto already. As for the exceptions, I wrote a little example (gone now due to buddhabrot) one with exceptions and one with multiple return values indicating erros. I found the one with exceptions to be more readable, more flexable, and more concise.
[09:25:51] <hayley> (What I had whacked out was a pretty identical program otherwise.)
[09:26:06] <beach> hayley: How did the people react?
[09:26:14] *** Joins: taiju (~taiju@240b:253:ec40:2400:e1d1:588c:bc3f:1887)
[09:26:24] <hayley> beach: I don't recall getting a response.
[09:26:33] <beach> Sounds typical.
[09:27:06] <lotuseater> How do you tell people of friends or family what you're doing?
[09:28:10] <char> beach: I think function programming is usually a good thing. I was watching some video that mentioned scala's error handling with the Either monad. I don't think one way or another is more FP, but I just wanted to talk about it with some sane people.
[09:28:18] <beach> char: Yes, but if you are going to compare the opinions of others, your personal experience is not enough.  That is why I put forward the argument about "intermediate functions".
[09:28:42] <hayley> I just say I work on a compiler. "What's a compiler?" "It is a program which translates a program into something a processor can directly execute."
[09:28:58] *** Quits: blihp (~phil@c-68-43-233-92.hsd1.mi.comcast.net) (Read error: Connection reset by peer)
[09:29:14] <beach> I was once consulting for a company and I was given a medium-sized C program to evaluate.  It was written by someone who didn't know about setjmp/longjmp, so more than half of the code was about managing exceptional situations.
[09:29:24] <lotuseater> hayley: sounds good.
[09:30:21] *** Joins: blihp (~phil@c-68-43-233-92.hsd1.mi.comcast.net)
[09:30:28] <hayley> I'm not sure what is the question is trying to ask. Do they need to know about Common Lisp? Most of the time the follow up question is about the purpose of what I am programming.
[09:31:43] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[09:32:02] <beach> hayley: That's an easy one.  It is to make an attempt to make software production more efficient, and the resulting code more safe.
[09:34:14] <hayley> Maybe "purpose" is the wrong word. Rather what I am producing at the moment, such as "a register allocator" or "a fix to some part of HIR-to-MIR".
[09:34:33] <hayley> Though I've only been further questioned about three times.
[09:34:36] <beach> That's much harder to explain.
[09:35:33] <beach> I try to answer the daily question from my (admittedly small) family "what are you working on today", and it is not easy to come up with an answer.
[09:36:23] <beach> "Well, you see, when I load Eclector into environment E5, the reader macro for backquote stops working, so I am trying to find out why".
[09:38:58] <lotuseater> Could also be a strategy to stop the questioning. :)
[09:39:23] <blihp> "the same thing I do every day... try to take over the world!"
[09:40:14] <lotuseater> indeed. "Brain, what are we doing tonight?"
[09:41:26] <blihp> lol... I figured someone would get the reference
[09:43:41] <lotuseater> blihp: Oh nice, then an early little success for me today. :)
[09:45:32] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[09:45:32] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[09:45:45] *** Joins: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs)
[09:57:27] *** Joins: gaqwas (~john@dynamic-077-002-010-251.77.2.pool.telefonica.de)
[09:59:04] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[09:59:59] *** Quits: jans (~Thunderbi@185.213.154.242) (Quit: jans)
[10:10:38] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[10:31:06] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[10:34:32] *** Joins: makomo (~makomo@user/makomo)
[10:40:17] <pjb> aeth: of course, the first thing you do when you work with a FFI, is to write a wrapper macro to signal conditions when the foreign functions return an error code.
[10:41:22] <pjb> hayley: note that in CL we have conditions, not only errors.  We can also signal "normal" conditions. Is it an error for a hash-table not to contain an entry?  It could be a condition.
[10:43:15] *** Quits: cjb (~cjb@user/cjb) (Ping timeout: 256 seconds)
[10:45:27] <pjb> beach: note that garbage collection is as much out of the scope of the language definition in C than in CL.  The glossary for "G" starts at "general", and for "C" goes directly from "coerce" to "colon".
[10:46:16] <pjb> beach: hence C + libgc, etc.  C++ too could be used with a GC.  But some people are more stubborn than others…
[10:47:40] <moon-child> as I recall, a gc interface is specified for c++, but no one implements it
[10:48:13] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[10:56:31] *** Joins: Cymew (~ante@host-217-213-111-174.mobileonline.telia.com)
[11:00:19] <pjb> beach: at least in your case, she'll understand what you're explaining ;-)
[11:06:44] *** Joins: shka (~herr@109.231.62.239)
[11:09:26] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:13:48] <beach> pjb: Good points.
[11:14:30] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[11:25:57] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[11:31:07] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3707:bb00:5ee0:c5ff:feb2:29e2)
[11:32:50] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[11:32:57] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-3436-dynamic.midco.net) (Ping timeout: 245 seconds)
[11:33:22] *** Quits: gaqwas (~john@dynamic-077-002-010-251.77.2.pool.telefonica.de) (Ping timeout: 245 seconds)
[11:33:24] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[11:34:02] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:35:27] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 245 seconds)
[11:35:31] *** Lord_of_Life_ is now known as Lord_of_Life
[11:52:57] *** Quits: lad (~lad@user/lad) (Ping timeout: 245 seconds)
[11:59:08] *** Joins: pve (~pve@178-55-253-164.bb.dnainternet.fi)
[12:00:29] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[12:09:12] *** Joins: Th30n (~Th30n@cpe-94-253-167-251.zg.cable.xnet.hr)
[12:15:23] *** Quits: ryanbw (~ryanbw@mab.sdf.org) (Ping timeout: 258 seconds)
[12:16:14] *** Joins: ryanbw (~ryanbw@mab.sdf.org)
[12:17:42] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[12:18:36] *** Quits: pillton (~user@2405:b000:703:2::34:248) (Quit: ERC (IRC client for Emacs 27.2))
[12:22:32] *** Quits: hendursaga (~weechat@user/hendursaga) (Quit: hendursaga)
[12:23:00] *** Joins: hendursaga (~weechat@user/hendursaga)
[12:34:25] *** Joins: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net)
[12:36:01] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:37:31] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[12:38:12] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:38:13] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:43:21] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 248 seconds)
[12:44:40] *** Quits: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs) (Ping timeout: 240 seconds)
[12:46:16] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[12:46:59] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[12:47:36] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:51:39] *** Joins: tfeb (~tfb@88.98.95.237)
[12:52:08] *** Joins: attila_lendvai_ (~alendvai@catv-176-63-30-104.catv.broadband.hu)
[12:53:10] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3707:bb00:5ee0:c5ff:feb2:29e2) (Ping timeout: 240 seconds)
[13:04:18] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[13:05:08] *** Quits: attila_lendvai_ (~alendvai@catv-176-63-30-104.catv.broadband.hu) (Quit: Leaving)
[13:13:24] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[13:13:43] *** Joins: amb007 (~a_bakic@93.87.81.25)
[13:18:43] *** Joins: NeoCron (~NeoCron@p200300c4cf4a8400dde9c021b1b0ad3f.dip0.t-ipconnect.de)
[13:18:48] *** Quits: amb007 (~a_bakic@93.87.81.25) (Read error: Connection reset by peer)
[13:19:30] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[13:19:37] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[13:30:23] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[13:37:25] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[13:38:10] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[13:41:41] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[13:44:04] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-6557-dynamic.midco.net)
[13:46:55] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[13:49:46] *** Joins: selwyn (~selwyn@user/selwyn)
[13:50:19] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[13:50:39] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[13:52:35] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[13:53:13] *** Joins: amb007 (~a_bakic@93.87.81.25)
[13:55:17] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[13:55:46] *** Joins: hendursaga (~weechat@user/hendursaga)
[13:56:24] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-6557-dynamic.midco.net) (Quit: Using Circe, the loveliest of all IRC clients)
[13:56:32] *** Joins: lisp123_ (~lisp123@45.130.83.200)
[14:00:01] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Remote host closed the connection)
[14:00:02] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 258 seconds)
[14:02:50] *** Quits: amb007 (~a_bakic@93.87.81.25) (Read error: Connection reset by peer)
[14:03:22] *** Quits: Th30n (~Th30n@cpe-94-253-167-251.zg.cable.xnet.hr) (Ping timeout: 245 seconds)
[14:04:55] *** Joins: amb007 (~a_bakic@93.87.81.25)
[14:05:29] *** Joins: Th30n (~Th30n@cpe-188-252-157-163.zg5.cable.xnet.hr)
[14:08:10] *** Quits: blihp (~phil@c-68-43-233-92.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[14:09:10] *** Quits: amb007 (~a_bakic@93.87.81.25) (Ping timeout: 240 seconds)
[14:09:53] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[14:12:07] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[14:12:50] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[14:12:51] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[14:13:03] *** Joins: amb007 (~a_bakic@87.116.175.34)
[14:13:16] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[14:18:47] *** Quits: amb007 (~a_bakic@87.116.175.34) (Ping timeout: 245 seconds)
[14:19:34] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[14:22:20] *** Quits: lisp123_ (~lisp123@45.130.83.200) (Remote host closed the connection)
[14:22:53] *** Joins: lisp123 (~lisp123@45.130.83.200)
[14:26:17] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[14:26:40] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[14:27:10] *** Quits: lisp123 (~lisp123@45.130.83.200) (Ping timeout: 240 seconds)
[14:29:40] *** Quits: Cymew (~ante@host-217-213-111-174.mobileonline.telia.com) (Ping timeout: 240 seconds)
[14:31:10] *** Quits: Fare (~fare@2601:184:4a7f:995c:175b:f49:18dd:c9a7) (Ping timeout: 240 seconds)
[14:33:13] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[14:33:22] *** Joins: amb007 (~a_bakic@93.87.81.114)
[14:37:25] *** Quits: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net) (Quit: This computer has gone to sleep)
[14:37:39] *** Joins: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net)
[14:37:46] *** Quits: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net) (Remote host closed the connection)
[14:37:54] *** Joins: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net)
[14:38:02] *** Quits: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net) (Remote host closed the connection)
[14:41:51] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[14:43:12] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798)
[14:51:57] *** Joins: random-nick (~random-ni@87.116.179.39)
[14:55:11] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[14:56:40] *** Quits: amb007 (~a_bakic@93.87.81.114) (Ping timeout: 240 seconds)
[14:56:53] *** Joins: amb007 (~a_bakic@87.116.175.34)
[14:58:43] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[14:59:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[15:01:10] *** Quits: amb007 (~a_bakic@87.116.175.34) (Ping timeout: 240 seconds)
[15:02:01] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[15:03:37] *** Joins: lisp123 (~lisp123@45.130.83.200)
[15:03:58] <shka> hi all
[15:04:23] <shka> does cl-flatbuffers for exist?
[15:05:08] *** Quits: frgo (~frgo@p200300deef0cee00b82a697515333831.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:05:35] *** Joins: frgo (~frgo@p200300deef0cee00b82a697515333831.dip0.t-ipconnect.de)
[15:10:07] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[15:10:49] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[15:13:10] *** Quits: lisp123 (~lisp123@45.130.83.200) (Ping timeout: 240 seconds)
[15:14:53] *** Quits: Posterdati (~posterdat@host-82-49-175-12.retail.telecomitalia.it) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[15:14:55] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[15:16:52] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[15:17:06] *** Joins: Posterdati (~posterdat@host-82-49-175-12.retail.telecomitalia.it)
[15:17:20] *** Joins: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net)
[15:30:56] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Quit: ZNC - http://znc.in)
[15:37:25] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[15:37:48] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[15:39:13] *** Joins: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs)
[15:42:49] *** Joins: lisp123 (~lisp123@45.130.83.200)
[15:45:28] *** Quits: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net) (Quit: This computer has gone to sleep)
[15:45:45] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[15:48:33] *** Joins: treflip (~user@95.79.32.99)
[15:52:10] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[15:54:58] *** Joins: treflip` (~user@test.vniicentr.ru)
[15:56:10] *** Joins: abrantesasf (~abrantesa@189.50.14.58)
[15:56:25] *** Quits: treflip (~user@95.79.32.99) (Ping timeout: 248 seconds)
[15:57:46] *** Joins: Cymew (~ante@host-78-79-172-205.mobileonline.telia.com)
[16:02:30] *** Joins: sabra (~sabra@99-105-192-94.lightspeed.livnmi.sbcglobal.net)
[16:02:56] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[16:05:10] <pjb> shka: if it doesn't you should create it.
[16:05:33] <pjb> After all those circular buffers and other round data structures, something flat will be welcome.
[16:05:41] <shka> perhaps i will, but i have a tight schedule right now
[16:06:06] <pjb> (we do have "flat lists", but as you know in lisp, lists are just some degenerate tree, so not flat at all).
[16:06:07] <shka> but yeah, flatbuffers look like a useful tool
[16:06:19] <shka> pjb: flatbuffer is an serialization format btw
[16:06:57] <pjb> No, it's just the first step of Flat Earthers conquest of the world! :-)
[16:07:00] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[16:08:40] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[16:09:50] *** Quits: treflip` (~user@test.vniicentr.ru) (Remote host closed the connection)
[16:10:02] *** Quits: lisp123 (~lisp123@45.130.83.200) (Ping timeout: 245 seconds)
[16:12:05] <gin> is there a search function that can search multiple strings in a string and return the first index of match? example - (multi-search '("foo" "bar" "baz") "hello bar foo world")) => 6
[16:12:44] <shka> pjb: you can't conquer the world if you can't read the map :P
[16:13:22] <lisp123_> gin: Do you have another example?
[16:14:09] <gin> (multi-search '("foo" "bar" "baz") "bar foo baz world")) => 0
[16:14:17] <shka> gin: not to my knowledge, but it is easy to implement
[16:14:21] <shka> namely
[16:14:32] <MichaelRaskin> I would look what string-case package has
[16:14:37] <gin> an extra ) in my previous examples. please ignore that.
[16:15:03] <gin> thanks shka
[16:15:25] <shka> (position-if (rcurry #'member set :test test :key key) input_set)
[16:15:28] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-3CCB-dynamic.midco.net)
[16:16:00] <shka> gin: if you would implement this function, you most likely would want to add some feedback on which variant was hit
[16:16:03] <nij-> In this Lisp meme (https://www.youtube.com/watch?v=QTiAWZ1YfzI), it talks about how Lisp has resolved some modern issues in the 50s. I wonder if it's just a joke or if it's true.
[16:16:06] <shka> anyway, one line
[16:16:19] <nij-> (Btw it's a great meme.)
[16:16:34] *** Joins: karlosz (~karlosz@93-164-35-250-static.dk.customer.tdc.net)
[16:16:48] <hayley> It is true.
[16:17:03] <hayley> See the previous discussion about C and automatic memory management.
[16:17:28] <nij-> So rust is also a joke?
[16:17:43] <hayley> Taken way too far, yes.
[16:18:09] <MichaelRaskin> Rust takes different balance on many things
[16:18:15] <nij-> :-O If someone wants to manage memory (as finely as in C) in lisp, is it possible?
[16:18:30] <MichaelRaskin> (some of these options do not work without modern computing speeds)
[16:18:33] <shka> nij-: yes and no
[16:19:15] <hayley> Using CFFI, technically yes. But then you find out what it's like to crash (c.f. <https://www.youtube.com/watch?v=3L0HlL7hwQI>).
[16:19:16] <random-nick> memory management in C isn't very fine either (unless you're writing a kernel in C)
[16:19:43] <shka> nij-: yes because you can do what hayley said, or use mmaped buffer
[16:19:54] <shka> no because it is hardly language supported
[16:20:11] <shka> yes because it is lisp, and it supports whatever you can macro
[16:20:19] <random-nick> but yeah CFFI even stack allocates on some implementations
[16:20:25] <shka> no because it is not completely portable
[16:20:30] <shka> so it is complicated
[16:21:33] <nij-> lol I have to admit I don't really understand. But coool that it's not just a joke.
[16:22:55] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[16:26:19] *** Joins: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net)
[16:30:11] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[16:38:36] *** Quits: pegaso (~reis-r@131.72.121.3) (Quit: Konversation terminated!)
[16:40:41] *** Joins: dra (~dra@2a04:4540:640a:fc00:b0bf:71b:152a:a215)
[16:41:18] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[16:41:29] *** edgar-rft is now known as world
[16:41:46] *** world is now known as edgar-rft
[16:45:29] <pjb> gin: (cl-ppcre:scan "foo|bar|baz" "quux bar foo baz world") #| --> 5 ; 8 ; #() ; #() |#
[16:46:42] <pjb> gin: you can even know easily which one matched: (cl-ppcre:scan "(foo)|(bar)|(baz)" "quux bar foo baz world") #| --> 5 ; 8 ; #(nil 5 nil) ; #(nil 8 nil) |#
[16:46:43] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Quit: Leaving...)
[16:49:31] *** Joins: attila_lendvai (~alendvai@catv-176-63-30-104.catv.broadband.hu)
[16:51:00] *** Joins: vats (~vats@180.149.226.8)
[16:55:48] *** Quits: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net) (Quit: This computer has gone to sleep)
[16:57:31] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[16:58:27] *** Joins: lisp-newbie (~lisp-newb@192.117.240.42)
[17:04:44] *** Joins: notzmv (~zmv@user/notzmv)
[17:12:34] * jcowan catches up on the scrool
[17:13:32] <jcowan> hayley, beach: both white-box and black-box testing are important: black-box for conformance to the spec, white-box for things like coverage and performance issues.
[17:13:35] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[17:13:59] <jcowan> :: is how you do white-box testing
[17:13:59] <Colleen> Unknown command. Possible matches: 8, time, set, say, mop, get, tell, roll, help, deny,
[17:14:07] <hayley> I agree, that is what I do.
[17:15:03] <jcowan> Because the Lisp I am writing these days is basically sample implementations, I don't focus on performance that much (though I don't totally ignore it either)
[17:16:21] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[17:16:24] <jcowan> I put a continuable exception into my code for the first time yesterday, but I am seriously considering replacing it with a function argument instead.  The code is highly recursive, so I need to be able to escape from the context and say "What now, boss?"
[17:17:17] <jcowan> and then return to it with the answer.  But conditions work best when crossing abstraction boundaries, and there is no boundary between a function and itself.
[17:17:57] *** Quits: Th30n (~Th30n@cpe-188-252-157-163.zg5.cable.xnet.hr) (Quit: WeeChat 3.2)
[17:20:02] <flip214> If HANDLER-BIND and IGNORE-ERRORS around a form isn't enough to ignore an (ERROR ...) form, what's wrong?
[17:20:18] *** Parts: nij- (~jin@2001-48F8-9021-806-0-0-0-3CCB-dynamic.midco.net) (#commonlisp)
[17:22:18] <jackdaniel> flip214: could you show the code? (ignore-errors (error "HI")) works here
[17:22:40] <beach> jcowan: I didn't know you were using Common Lisp for programming.  I thought you were using mainly Scheme.  No?
[17:23:27] *** Joins: Bike (~Glossina@71.69.170.70)
[17:23:27] *** ChanServ sets mode: +o Bike
[17:23:48] <jcowan> I'm talking about a scheme program, yes, but the condition system (and therefore the issues) are exactly the same, except that Scheme doesn't (yet) make restartts standard, though there is a library for them.
[17:24:08] <beach> I see.
[17:24:40] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[17:26:24] <flip214> jackdaniel: I'm asking SBCL to return the code segments of a function, and sb-disassem:seg-virtual-location errors out  #<SIMPLE-ERROR "Source path no longer exists." {101A6FA653}>
[17:27:32] <flip214> jackdaniel: https://paste.debian.net/hidden/8ffa018a/
[17:33:11] *** Quits: lisp-newbie (~lisp-newb@192.117.240.42) (Quit: This computer has gone to sleep)
[17:34:48] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:6130:9c4b:a486:51be)
[17:38:27] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:43:17] *** Quits: cognemo (~cognemo@cpe-46-164-31-76.dynamic.amis.net) (Quit: ZNC 1.8.2 - https://znc.in)
[17:44:05] *** Joins: cognemo (~cognemo@cpe-46-164-31-76.dynamic.amis.net)
[17:44:56] *** Joins: Fare (~fare@2601:184:4a7f:995c:d285:437c:df04:4076)
[17:47:31] *** Quits: Bike (~Glossina@71.69.170.70) (Ping timeout: 268 seconds)
[17:50:43] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[17:51:15] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:56:10] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[17:56:42] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:59:03] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[18:00:08] *** Quits: notzmv (~zmv@user/notzmv) (Read error: Connection reset by peer)
[18:01:38] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[18:02:59] *** Joins: Bike (~Glossina@71.69.170.70)
[18:02:59] *** ChanServ sets mode: +o Bike
[18:09:57] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:11:34] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[18:16:37] *** Quits: MichaelRaskin (~MichaelRa@ipb21b6221.dynamic.kabel-deutschland.de) (Quit: MichaelRaskin)
[18:19:28] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-3CCB-dynamic.midco.net)
[18:30:34] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[18:37:59] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:45:37] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-3CCB-dynamic.midco.net) (Ping timeout: 258 seconds)
[18:47:27] *** Joins: nij- (~jin@2001-48F8-9021-806-AA5A-32-E995-CFC6-dynamic.midco.net)
[18:47:32] *** Quits: nij- (~jin@2001-48F8-9021-806-AA5A-32-E995-CFC6-dynamic.midco.net) (Client Quit)
[18:47:52] *** Joins: nij- (~jin@2001-48F8-9021-806-AA5A-32-E995-CFC6-dynamic.midco.net)
[18:52:20] *** Joins: lisp-newbie (~lisp-newb@192.117.240.42)
[18:56:43] *** Joins: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it)
[18:57:33] *** Joins: silasfox (~silasfox@xdsl-78-35-71-64.nc.de)
[18:59:07] *** Quits: abrantesasf (~abrantesa@189.50.14.58) (Quit: Leaving)
[19:12:44] *** Joins: lad (~lad@user/lad)
[19:13:29] <rain3> https://termbin.com/6ztl  how to send a string to an xclip subprocess to get it into the clipboard?
[19:14:10] *** Quits: Fare (~fare@2601:184:4a7f:995c:d285:437c:df04:4076) (Ping timeout: 240 seconds)
[19:14:29] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[19:15:43] *** Quits: Cymew (~ante@host-78-79-172-205.mobileonline.telia.com) (Ping timeout: 268 seconds)
[19:16:08] <flip214> rain3: I guess that the thread waits on the child process and so won't send any data to its stdin.
[19:16:21] <flip214> try cmd&
[19:20:15] <lisp123> Does anybody know if there was a particular reason for CLOS slots to be unbound unless there is an :initform, instead of being bound to nil to begin with (which can be overridden with an :initform value)
[19:21:47] <rain3> flip214: that worked. thanks ! cmd would also send data to the stdin and the clipboard would get affected but the thread would keep waiting on the child process forever
[19:21:48] <flip214> so that "unknown" can be different from "no"?
[19:22:29] <flip214> rain3: you'll need to check whether it works for input > 4KB, ie. multiple stream buffers
[19:22:52] <lisp123> flip214: Perhaps (that is the most likely conclusion)
[19:25:41] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:26:02] *** Joins: Cymew (~ante@host-78-79-172-205.mobileonline.telia.com)
[19:29:40] <rain3> flip214: like this? https://termbin.com/esb5 it seems to work
[19:30:57] *** Quits: attila_lendvai (~alendvai@catv-176-63-30-104.catv.broadband.hu) (Quit: Leaving)
[19:35:37] *** Joins: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b)
[19:37:49] *** Parts: nij- (~jin@2001-48F8-9021-806-AA5A-32-E995-CFC6-dynamic.midco.net) (#commonlisp)
[19:39:16] *** Quits: silasfox (~silasfox@xdsl-78-35-71-64.nc.de) (Quit: Connection closed)
[19:40:28] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[19:40:54] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:42:31] *** Quits: lisp-newbie (~lisp-newb@192.117.240.42) (Quit: This computer has gone to sleep)
[19:42:45] *** Joins: lisp-newbie (~lisp-newb@192.117.240.42)
[19:43:09] *** Quits: lisp-newbie (~lisp-newb@192.117.240.42) (Remote host closed the connection)
[19:43:15] *** Joins: lisp-newbie (~lisp-newb@192.117.240.42)
[19:43:30] *** Quits: lisp-newbie (~lisp-newb@192.117.240.42) (Remote host closed the connection)
[19:43:36] *** Joins: lisp-newbie (~lisp-newb@192.117.240.42)
[19:43:52] *** Quits: lisp-newbie (~lisp-newb@192.117.240.42) (Remote host closed the connection)
[19:43:59] *** Joins: lisp-newbie (~lisp-newb@192.117.240.42)
[19:44:01] *** Quits: lisp-newbie (~lisp-newb@192.117.240.42) (Client Quit)
[19:44:20] *** Joins: lisp-newbie (~lisp-newb@192.117.240.42)
[19:44:23] *** Quits: lisp-newbie (~lisp-newb@192.117.240.42) (Client Quit)
[19:45:02] *** Quits: dra (~dra@2a04:4540:640a:fc00:b0bf:71b:152a:a215) (Ping timeout: 245 seconds)
[19:45:25] *** Joins: lisp-newbie (~lisp-newb@192.117.240.42)
[19:45:40] *** Quits: lisp-newbie (~lisp-newb@192.117.240.42) (Remote host closed the connection)
[19:48:40] *** Quits: Cymew (~ante@host-78-79-172-205.mobileonline.telia.com) (Ping timeout: 240 seconds)
[19:50:40] *** Quits: taiju (~taiju@240b:253:ec40:2400:e1d1:588c:bc3f:1887) (Ping timeout: 240 seconds)
[19:53:29] *** Joins: attila_lendvai (~alendvai@catv-176-63-30-104.catv.broadband.hu)
[19:56:28] *** Joins: taiju (~taiju@240b:253:ec40:2400:e1d1:588c:bc3f:1887)
[19:57:22] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[19:57:39] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[19:59:26] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[20:13:35] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[20:13:52] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:15:18] *** Quits: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs) (Read error: Connection reset by peer)
[20:16:23] *** Joins: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs)
[20:16:37] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:19:35] *** Joins: MichaelRaskin (~MichaelRa@ipb21b6221.dynamic.kabel-deutschland.de)
[20:19:35] *** ChanServ sets mode: +o MichaelRaskin
[20:20:16] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[20:20:41] *** Quits: Posterdati (~posterdat@host-82-49-175-12.retail.telecomitalia.it) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[20:20:52] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:21:29] *** Quits: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs) (Ping timeout: 248 seconds)
[20:21:48] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[20:23:03] *** Joins: Posterdati (~posterdat@host-82-49-175-12.retail.telecomitalia.it)
[20:23:45] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[20:30:43] *** Joins: blihp (~phil@c-68-43-233-92.hsd1.mi.comcast.net)
[20:32:31] *** Joins: lisp-newbie (~lisp-newb@192.117.240.42)
[20:45:41] *** Joins: ahlk (~user@2600:1700:31c0:3a10::48)
[20:45:56] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[20:49:33] *** Quits: kulernil (~kulernil@gateway/tor-sasl/kuler) (Ping timeout: 244 seconds)
[20:52:00] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[20:53:31] *** Joins: pve_ (~pve@188-67-148-90.bb.dnainternet.fi)
[20:54:17] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[20:54:55] *** Joins: jans (~Thunderbi@185.213.154.242)
[20:56:17] *** Quits: pve (~pve@178-55-253-164.bb.dnainternet.fi) (Ping timeout: 245 seconds)
[21:03:15] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:08:15] *** Quits: lisp-newbie (~lisp-newb@192.117.240.42) (Quit: This computer has gone to sleep)
[21:08:26] *** Joins: lisp-newbie (~lisp-newb@192.117.240.42)
[21:08:42] *** Quits: lisp-newbie (~lisp-newb@192.117.240.42) (Remote host closed the connection)
[21:08:51] *** Joins: lisp-newbie (~lisp-newb@192.117.240.42)
[21:09:12] *** Quits: lisp-newbie (~lisp-newb@192.117.240.42) (Remote host closed the connection)
[21:11:54] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[21:16:55] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[21:17:23] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[21:22:02] *** Joins: Fare (~fare@172.58.223.118)
[21:24:21] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[21:25:07] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:30:10] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[21:30:22] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[21:35:21] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:41:35] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:47:57] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[21:48:29] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:51:09] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[21:51:22] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:58:40] *** Quits: Fare (~fare@172.58.223.118) (Ping timeout: 240 seconds)
[22:02:04] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[22:04:03] *** Joins: tfeb (~tfb@88.98.95.237)
[22:08:05] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[22:13:30] *** Joins: silasfox (~sbv@2a0a-a540-533f-0-bad8-6c2f-3a71-f612.ipv6dyn.netcologne.de)
[22:22:01] *** Joins: Fare (~fare@c-73-119-28-185.hsd1.ma.comcast.net)
[22:23:44] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[22:24:06] *** Quits: PinealGlandOptic (~PinealGla@37.115.210.35) (Quit: leaving)
[22:26:40] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[22:27:23] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[22:31:20] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[22:31:34] *** Joins: amb007 (~a_bakic@178-221-45-159.dynamic.isp.telekom.rs)
[22:33:50] *** Joins: gaqwas (~john@dynamic-077-002-010-251.77.2.pool.telefonica.de)
[22:36:39] <jeosol> Good morning all
[22:37:36] <jeosol> Is anyone aware of a CL library with tree-based algorithms, e.g., 2-d tree/quadtree for doing things like range searching, nearest neighbor search, etc
[22:37:40] <lotuseater> hi jeosol :)
[22:37:50] <jeosol> hi lotuseater, how are you
[22:38:20] <jeosol> I am doing okay. Still exploring algorithms (Sedgewick's) course
[22:38:29] <lotuseater> Ah I'm fine atm I think, we could query some time again.
[22:38:43] <jeosol> yeah, definitely, good conversation last time
[22:45:30] *** Joins: lisp-newbie (~lisp-newb@192.117.240.42)
[22:50:09] <mfiano> jeosol: I have a quadtree library, but it hasnt been tested
[22:50:24] <jeosol> mfiano: interesting
[22:50:34] <mfiano> https://github.com/mfiano/algae/blob/master/src/data-structures/quad-tree.lisp
[22:50:48] <jeosol> is the library decomposable, or generic, e.g., 2d, 3d, or 4d trees
[22:50:56] <jeosol> ok, i will check the link
[22:51:55] <mfiano> a 3d quadtree is an octree, and it is much more complex to implement, with a lot of tradeoffs to make. I ported some Rust code that I am not happy with but it is not public.
[22:52:38] <jeosol> mfiano: very nice, I see you also have other related code in the binary-search-trees
[22:53:17] <jeosol> mfiano: no, above, I didn't mean octree just 3d-tree
[22:53:18] <mfiano> Yeah that's my "pile of junk" repo that I found useful once or twice but hasn't been extracted/polished into a separate library
[22:53:34] <jeosol> I think there could be some utility to optimize and improve this
[22:53:43] <jeosol> mfiano: good work btw
[22:53:49] <mfiano> I'm not sure what you mean by 3d tree. That is exactly what an octree is
[22:54:03] <White_Flame> a cube splits down into 8 subcubes
[22:54:16] *** Joins: yitzi_ (~yitzi@173-27-106-188.client.mchsi.com)
[22:54:22] <White_Flame> given a 1/2 split on each dimension
[22:56:10] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Ping timeout: 240 seconds)
[22:56:29] <jeosol> mfiano: never mind
[22:56:56] <jeosol> are you still working on the project or left it for now
[22:57:28] <mfiano> I work on all my projects when I need to :)
[22:58:15] <jeosol> I am not sure if there exists, a tree-focused algorithms library somewhere but it could be worthwhile to have - assuming there are people doing search that needs to be to efficient (in games dev, etc)
[22:58:23] <jeosol> mfiano: that's coold :-)
[22:58:27] <jeosol> *cool
[22:58:56] *** Quits: amb007 (~a_bakic@178-221-45-159.dynamic.isp.telekom.rs) (Ping timeout: 268 seconds)
[22:59:07] <mfiano> For gamedev I only really use spatial hashing for collision detection, rather than spatial trees.
[22:59:12] *** Quits: yitzi_ (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[22:59:22] <mfiano> I use avl trees much more in gamedev, but for other purposes.
[22:59:52] <mfiano> which should be in that repo, as well as maybe a RB tree, i forget
[23:00:04] <jeosol> Yeah I did see the avl-trees file
[23:00:15] <jeosol> rb-trees, not sure, but will check
[23:01:07] <jeosol> rb-trees with the rotation (right or left) is tricky. But the tree-based techniques are efficient
[23:02:11] <lotuseater> jeosol: do you also know this book on purely functional data structures by okasaki?
[23:02:29] <mfiano> ah no, the rb tree is not.
[23:02:34] <mfiano> it is in one of my game engines
[23:02:36] <mfiano> https://github.com/mfiano/zed/blob/master/src/util-red-black-tree.lisp
[23:02:42] <mfiano> should be standalone if you need it
[23:02:52] <jeosol> lotuseater: no I am not, but I will search for it
[23:03:58] <jeosol> mfiano: very nice on the rb-tree
[23:04:05] <mfiano> it's literally just translated pseudo-code from CLRS, nothing special
[23:04:19] <jeosol> Oh i see,
[23:04:57] <jeosol> do I have a copy of CLRS here, good book
[23:05:01] <mfiano> CLRS is "Introduction to Algorithms", aka the the big freakin book of algorithms used in a lot of universities.
[23:05:32] <jeosol> I mean I have a copy of CLRS here, I am aware of the book
[23:05:37] <mfiano> ok
[23:06:33] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[23:06:42] *** Quits: lisp-newbie (~lisp-newb@192.117.240.42) (Quit: This computer has gone to sleep)
[23:06:51] *** Joins: lisp-newbie (~lisp-newb@192.117.240.42)
[23:07:04] *** Quits: lisp-newbie (~lisp-newb@192.117.240.42) (Remote host closed the connection)
[23:07:29] <mfiano> speaking of functional data structures and trees, i recall seeing a library, i think called functional-trees, that integrates with FSet.
[23:07:38] <mfiano> I haven't evaluated it in any way though
[23:08:24] <mfiano> I would probably write something using split/join generalization to support any type of balanced tree, with HAMT's for persistence
[23:08:30] <mfiano> But...time
[23:09:49] <phantomics> Hey, quick question. Does anyone know how to wipe out any cached compiled code for a given system? I've erased all .fasl files for something but it's not working. I've made significant changes to a system and now things that depend on it are broken because they seem to be invoking the new functions on old compiled code.
[23:10:28] <White_Flame> if you have function objects that are stored somewhere on the heap, they won't be recompiled by a reload.
[23:10:37] <White_Flame> have you restarted your image to flush everything out?
[23:11:28] <phantomics> Yes, that doesn't help
[23:12:10] <White_Flame> asdf stores its fasls in ~/.cache/common-lisp/
[23:12:12] <phantomics> I've manually recompiled some components which helped
[23:13:08] <White_Flame> and there's a :force t option in some of the asdf/ql stuff that forces recompilation
[23:14:21] <phantomics> I'll try erasing those
[23:15:19] <White_Flame> rm -rf ~/.cache/common-lisp/ is the easy nuclear solution to fasl issues
[23:15:40] <dieggsy> Is there an easy way to list files by modification time ?
[23:15:44] <dieggsy> uiop:directory-files has no such options
[23:16:40] <phantomics> dieggsy: probably best to use (uiop:run-program "ls ...
[23:16:56] <dieggsy> fair
[23:17:02] <dieggsy> thanks
[23:17:38] <phantomics> White_Flame: tried it, didn't work, and I lost the progress I made with manually recompiling stuff to work
[23:18:01] <White_Flame> I think I'd need more details about what specifically is going wrong
[23:18:03] *** Joins: mr_rob0t (~user@2603-6011-2303-6613-4ccd-e9be-a07b-c3c2.res6.spectrum.com)
[23:18:05] <mr_rob0t> hey
[23:18:09] <jeosol> mfiano: ok, I will do a search for the functional-trees lib
[23:18:39] <mr_rob0t> anyone read the book Land of Lisp?
[23:19:38] <phantomics> White_Flame: it's complicated, I have a bunch of systems that contain demos for the April compiler. I've made changes to April and now many of the demos are broken because they were compiled when the implementation was different. When I manually recompile functions they work. But the files containg the demo code are still compiling wrong, even when I delete the .fasls in their directories and the .cache .fasls
[23:19:58] <White_Flame> does your code write any of its own files?
[23:20:06] <phantomics> No
[23:20:09] *** Quits: blihp (~phil@c-68-43-233-92.hsd1.mi.comcast.net) (Quit: Leaving)
[23:20:38] <phantomics> I do automatically create software packages that aren't dependencies of the package definitions or the ASDF systems
[23:20:51] <White_Flame> I wonder if you have duplicate definitions of some things.  So in file A, it creates the working thing, file B creates the broken thing, and your state is left there after compilation.  Recompiling file A would fix it
[23:20:53] <phantomics> Is it possible those packages could have their .fasls stored in some other place?
[23:21:48] <White_Flame> C-c C-k by default creates the .fasl next to your .lisp iirc, but that shouldn't be relevant for asdf loads
[23:22:09] <White_Flame> and since you blew away cache/common-lisp, I don't think it's a .fasl issue
[23:22:21] <phantomics> Well I'll try deleting that whole folder
[23:23:37] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[23:23:40] <White_Flame> I had some serious load ordering issues in the past, with compile-time effects happening in macro expansions.  Loading from source would not yield the same system as loading from fasl, as the latter doesn't retain the compile-time dynamic state of the system
[23:23:47] *** Joins: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs)
[23:23:59] <White_Flame> since you're doing a sublanguage, that class of error could very well be likely
[23:25:58] <phantomics> Erased the whole folder and the problem persists
[23:26:25] <White_Flame> right
[23:26:48] *** Joins: seraphim_ (~seraphim@122.175.143.21)
[23:26:54] <phantomics> It shouldn't be anything that complicated, like in one of the demo files I have a little string being compiled that has a bug due to some of the changes
[23:27:00] <White_Flame> redefinition/reinitialization & compile-time side effects would be culprits to look for
[23:27:26] <White_Flame> can you be more specific about that?
[23:27:29] <phantomics> That string should have been recompiled, I've recompiled the file with it many times
[23:28:47] <White_Flame> so you're saying the older compiled version exists when you load your system, and manually recompiling the file brings in the new compiled version?
[23:29:07] <phantomics> To be specific, this string: (is "⌊10000×polar⍉↑ ¯1 0 1∘.,1 0 ¯1" -its output-) causes a bug, the ∘. part is exactly where it's going wrong, that's one example
[23:29:25] <phantomics> Yes, when I manually recompile one of the APL functions, it then works in the test system
[23:29:46] <White_Flame> it really smells like a duplicate definition problem dependent on load order tome
[23:29:48] <White_Flame> *to me
[23:30:06] <phantomics> Yeah just wondering how to purge that other definition
[23:30:17] *** Quits: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs) (Ping timeout: 248 seconds)
[23:30:25] <phantomics> I don't know if there's another version of April cached that compiles it in the old way
[23:30:28] <White_Flame> it would be elsewhere in your source code, loaded after your correct function
[23:30:45] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[23:30:50] <dieggsy> Are relative logical pathnames a thing? e.g. something like "./my/path" would be ";my;path" ? ..this doesn't seem to work for me
[23:30:56] <phantomics> It would make sense if the files were somehow calling the old version of April
[23:31:08] <White_Flame> dieggsy: "my/path" is relative
[23:31:14] <White_Flame> whereas "/my/path" is absolute
[23:31:32] *** Joins: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs)
[23:31:39] <dieggsy> White_Flame: ah, sure, but i mean the semicolon version
[23:31:54] <phantomics> The macroexpansions shouldn't be causing any side effects that cause other versions of code to be saved somewhere
[23:32:24] <White_Flame> phantomics: on your clean load, test that suspect function directly
[23:32:25] <dieggsy> White_Flame: ./my/path and my/path are the same though. but i mean this format: https://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node209.html#SECTION002715100000000000000
[23:32:33] <White_Flame> see if its behavior matches the source code that works when you reload
[23:32:59] <phantomics> I can look at what it outputs
[23:33:11] <phantomics> I'll also try cloning the repo on another system
[23:33:22] <phantomics> I've done my latest work in another branch, not sure if that could be related to the problem
[23:33:38] <White_Flame> oh, also do M-. on the function name to bring up its definition.  If it's being redefined somewhere, that would point to the current/other/broken copy of it
[23:34:13] <White_Flame> if you wiped the fasl cache, that shouldn't be an issue
[23:34:28] <White_Flame> but obviously any repo weirdness is outside the scope of lisp :L-P
[23:34:31] <White_Flame> :-P
[23:35:34] <Alfr> phantomics, does (asdf:system-source-file (asdf:find-system "YOUR-SYSTEM")) give you the expected path?
[23:37:06] <White_Flame> ah yeah that could be another issue.  ensure quicklisp/local-projects/ is up to date
[23:37:18] <phantomics> Alfr: yes, gives correct path
[23:37:37] <Alfr> Ah ... worth a shot, phantomics.
[23:38:40] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798) (Ping timeout: 240 seconds)
[23:38:49] <phantomics> Just tried erasing and restoring the local-projects symlink
[23:39:52] *** Joins: clos-encounters (~user@167-248-4-131.oa01.lnk01.ne.dynamic.allophone.net)
[23:42:11] <phantomics> That didn't work
[23:45:17] *** Quits: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:45:47] <White_Flame> I still do suspect that the dynamic state of your code is being affected during load, and recompiling that particular file/function re-tramples the state back to where you expect it to be
