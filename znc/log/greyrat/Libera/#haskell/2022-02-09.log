[00:00:04] * geekosaur still hasn't gotten used to fistbumps and now we got those elbow bumps, what next?
[00:00:21] <monochrom> eye winks
[00:00:24] * monochrom winks
[00:00:28] <EvanR> non-euclidean geometry bumps
[00:00:30] <safinaskar> kuribas: "Not about "I have to use singletons"." well, yesterday i presented this code here: https://paste.debian.net/1230075/ . i tried to use GADTs in them. and i understood that i need to use singletons to use GADTs in this code. the only other way is not to use GADTs, but then there is no advantages over rust
[00:00:32] * geekosaur blinks
[00:01:11] <EvanR> rust = haskell - GADTs huh
[00:01:13] <sshine> geekosaur, emojis with unicode zero-width joiners
[00:01:40] <monochrom> Oh, you could also consider saying "elbow bump" orally, as opposed to doing it...
[00:01:54] <int-e> monochrom: Hmm, what could NFTs be... Non-euclidean F? Tentacles
[00:03:25] <monochrom> Oh, you could also dab, for old time's sake. "old time". :)
[00:04:19] <janus> @package old-time was last revised by herbert in 2017
[00:04:19] <lambdabot> https://hackage.haskell.org/package/old-time was last revised by herbert in 2017
[00:05:39] <safinaskar> (by "singleton" i meant hackage package "singleton", of course)
[00:06:03] <sshine> when will Haskell get NFDTs? non-fungible data structures.
[00:06:24] <sshine> this is the post-ICO era, after all.
[00:06:32] <EvanR> this is weak sauce, I need the full list of terrible stuff in haskell. singletons is a dead horse 
[00:07:16] <EvanR> sshine, linear types?
[00:07:24] <janus> EvanR: acid-state, unmaintained stack, partial functions in base, monad of no return still not implemented, mtl 2.3 dragging on for years
[00:07:49] <safinaskar> monochrom: "A week ago we had a discussion on how much we need global variables" - in rust (using crate "crossbeam"'s scoped threads) you don't need global variables even for synchronizing threads. You simply have local variables and access them from scoped threads (and rust forces you to use proper locking)
[00:07:57] <sshine> 💪-bump
[00:08:49] <EvanR> proper locking sounds relative to the developer
[00:09:09] <EvanR> an audio developer will see "proper locking" and exclaim improperness
[00:09:13] <hololeap> safinaskar: you do realize that a lot of haskell developers also use and enjoy rust, right? what are you trying to prove here?
[00:09:44] <[exa]> is there #haskell-rust ?
[00:10:31] <monochrom> is there #harsuksetll so haskell and rust blend together? >:)
[00:10:54] <janus> [exa]: there is https://github.com/koka-lang/koka/discussions
[00:11:14] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[00:11:33] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[00:11:54] *** Quits: Inst (~delicacie@2601:6c4:4080:3f80:a48f:8f89:30fa:5637) (Ping timeout: 260 seconds)
[00:11:54] *** Joins: xff0x (~xff0x@2001:1a81:533f:ea00:4e49:abcb:9c05:c4b8)
[00:12:06] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[00:13:07] *** Joins: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk)
[00:13:30] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:13:55] <ski> safinaskar : `read :: forall a. String -> Avro a; read @CString x = ...' -- huh ?
[00:15:00] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:16:02] <[exa]> janus: ok wow. :]
[00:16:59] <janus> i dunno if that is what you thought of when you said haskell-rust, but i would think it appeals to both since it has fancy typing but also in-place computation?
[00:17:47] <[exa]> no I was reacting to the other discussion there, but I had no idea koka exists and it looks pretty cool
[00:18:01] <[exa]> so yeah you hit it. :D
[00:18:12] <EvanR> functional reactive discussing
[00:19:27] *** Quits: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk) (Ping timeout: 250 seconds)
[00:19:37] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[00:19:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[00:20:39] <dminuoso> Also, "locking" for concorrent access is synchronization.
[00:21:52] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:22:56] <dminuoso> Ah I misinterpreted perhaps.
[00:24:20] <dminuoso> safinaskar: Also, you dont *need* global variables indeed. The actor model gets away without it, and is the predominant synchronization mechanism in most Erlang/OTP architectures
[00:24:56] <dminuoso> That way you can avoid the need of locking entirely
[00:28:20] <EvanR> software transactional memory is cool
[00:29:28] <dolio> You can just reject the entire premise that leads to 'needing' global variables in that argument.
[00:30:11] <safinaskar> ski: "read @CString x = ...' -- huh" - i tried to pattern match on "a" (note that "a :: Typ")
[00:30:11] <dolio> That the GPU is some kind of separate global resource that a program needs to manage manually in a stateful way.
[00:30:30] <ski> safinaskar : that's not how parametric polymorphism works
[00:30:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[00:31:04] <ski> if you want to use GADTs to get around such problems, you must match on a GADT *input*
[00:32:40] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:33:01] <ski> (perhaps that input could be a defunctionalized continuation corresponding to `Avro a -> ...'. or perhaps it would just be some kind of selector describing which `a' you want to look for)
[00:33:05] *** Joins: zebrag (~chris@user/zebrag)
[00:33:29] <ski> (or else, you could simply let `read' try to parse all the possible inputs, and compute the appropriate `a' (in result type) for each case)
[00:34:30] <safinaskar> EvanR: this article http://joeduffyblog.com/2010/01/03/a-brief-retrospective-on-transactional-memory/ proves that STM is bad thing (compared to usual mutexes, at least in imperative languages)
[00:34:46] <EvanR> interesting
[00:35:30] <EvanR> I'll have to see why it's wrong later
[00:35:46] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dd3b:3d16:5046:6705)
[00:36:10] <dibblego> over-confident, ill-informed opinions are why I fly aeroplanes
[00:36:11] <dolio> The author wasn't using Haskell.
[00:37:25] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 256 seconds)
[00:38:20] *** Quits: foul_owl (~kerry@94.140.8.51) (Read error: Connection reset by peer)
[00:38:26] <safinaskar> dolio: yes. but he is aware about haskell. in this article http://joeduffyblog.com/2016/11/30/15-years-of-concurrency/ he says he have read simon jones article on haskell foundatations multiple times
[00:38:46] *** Joins: Inst (~delicacie@2601:6c4:4080:3f80:6cf2:b906:2bc7:1ff9)
[00:38:50] <[exa]> I read "let's break stm atomics by doing precisely the first thing the stm atomics are not meant to do"
[00:38:51] <geekosaur> you can read something many times and still not understand it
[00:39:20] <[exa]> +1 ^, can confirm on myself. :D :D
[00:39:49] <safinaskar> why nobody argues about my rant?     https://zerobin.net/?4ae40c2bc3cd95df#xogo0KqhD5e8oXCCSGvF0CeyijPjWWN3L824v4LzGFQ=
[00:40:47] <Inst> because people either agree with it or treat it as irrelevant
[00:40:57] <Inst> agree with particular points, i mean
[00:41:40] *** ChanServ sets mode: +o geekosaur
[00:41:42] <yushyin> #haskell is one of my channels with the most users on my ignore list, grows almost daily :)
[00:41:43] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:30a6:9d4e:5fe4:7e50)
[00:41:49] <Inst> :(
[00:42:41] *** Joins: natechan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[00:43:28] * ski 's never used `/ignore'
[00:43:40] * geekosaur doesn't either
[00:44:14] *** Joins: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk)
[00:45:02] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 250 seconds)
[00:46:39] <Franciman> safinaskar: i suggest you rephrase your rant's title as: why rust is more useful for me than haskell
[00:46:55] <Franciman> because othersmay have different needs than yours
[00:47:13] <Franciman> for example i personally never use cabal, nor stack
[00:47:16] <geekosaur> safinaskar has been openy confrontational every time they've come here. I'm quite certain a non-confrontational title is not acceptable
[00:47:27] <Franciman> so your point about cabal stack dicotomy doesn't stand for me
[00:47:57] <Franciman> second point, all the times i used cabal, i could use it with every package
[00:48:04] <Franciman> so again, the dicotomy has no issue for me
[00:48:20] <janus> it's not worth arguing about when anybody is smart enough to know how they're cutting corners in their arguments.
[00:48:30] <Inst> it's a troll
[00:48:34] <Franciman> regarding «i don't need types, so they are not useful»
[00:48:39] <Franciman> i don't need haskell types either
[00:48:41] <Inst> don't feed the troll, if you want to entertain safinaskar, query him
[00:48:42] <Franciman> but rust types are worse
[00:48:48] * sclv encourages people to not feed the troll
[00:48:49] <Franciman> i usually need idris or agda grade types
[00:48:50] <dolio> We don't need responses to this "rant".
[00:48:57] * sclv encourages people to talk about interesting things instead
[00:49:14] <dolio> Just like we don't need the rant.
[00:49:47] <[exa]> a nice ACM-formatted conference rant would do though
[00:50:46] <dsal> "proves that STM is a bad thing" is pretty bold as someone who relies on it in production for code that'd be *really* hard to write with "usual mutexes"
[00:51:09] <ph88> is there a GHC extension of library that allows sum types to be open for extension ? or something that mimics this behaviour ?
[00:51:27] <Inst> how about I troll safinaskar back?
[00:51:35] <geekosaur> notin channel
[00:51:36] <Inst> Rust is just C/C++ with better functional programming support
[00:51:39] <Inst> oh okay
[00:51:42] <ski> how about you don't
[00:52:13] *** Quits: emf (~emf@2620:10d:c090:400::5:57ea) (Quit: emf)
[00:52:24] <sclv> ph88 there's a lot of libs for open sum tpes
[00:52:39] <Inst> i queried him, and he's not responding :(
[00:52:42] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:52:49] <sclv> https://hackage.haskell.org/package/fastsum
[00:54:25] *** Quits: `2jt (~jtomas@130.red-88-22-46.staticip.rima-tde.net) (Ping timeout: 256 seconds)
[00:54:28] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[00:54:33] <sclv> ph88: I recommend reading data types a la carte for the basic idea https://webspace.science.uu.nl/~swier004/publications/2008-jfp.pdf
[00:54:45] *** Quits: michalz (~michalz@185.246.204.75) (Remote host closed the connection)
[00:54:59] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[00:55:03] *** Joins: foul_owl (~kerry@23.82.194.73)
[00:55:28] *** Quits: bliminse (~bliminse@host86-188-36-166.range86-188.btcentralplus.com) (Quit: leaving)
[00:55:50] <ph88> thanks sclv 
[00:55:51] *** Joins: myShoggoth (~myShoggot@75.164.32.244)
[00:55:59] *** Quits: wavemode (~wavemode@2601:241:0:fc90:1186:8dd8:ad8a:69e2) (Quit: Client closed)
[00:56:10] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[00:56:59] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[00:57:15] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[00:58:27] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Quit: quit)
[00:58:56] *** Joins: k8yun (~k8yun@user/k8yun)
[00:59:41] *** Joins: wavemode (~wavemode@2601:241:0:fc90:1186:8dd8:ad8a:69e2)
[01:01:36] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[01:01:42] *** Joins: sektor|3 (~kvirc@94.155.193.66)
[01:01:59] *** Joins: bliminse (~bliminse@host86-188-36-166.range86-188.btcentralplus.com)
[01:03:25] *** Quits: mmhat (~mmh@55d4a370.access.ecotel.net) (Ping timeout: 250 seconds)
[01:04:12] <Inst> why is Safinaskar not arguing with me about my counterrant?
[01:04:30] <dolio> We don't need updates about this, either.
[01:04:57] *** Quits: sektor|2 (~kvirc@87.227.175.182) (Ping timeout: 256 seconds)
[01:05:01] <Inst> in reality he's extremely reasonable about it, and I explained to him, "very few people really know Haskell, and most people go through the same process you do, then eventually they learn more Haskell and figure out their complaint was misplaced"
[01:07:11] *** Quits: slack5035 (~slack1256@191.126.99.83) (Remote host closed the connection)
[01:07:21] <geekosaur> Inst, please take this elsewhere
[01:07:46] <Inst> k, done
[01:09:29] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[01:10:16] <Franciman> i can understand people being annoyed to answer to imprecise critiques to haskell
[01:10:28] <Franciman> but i don't understand why actiely repeating: we don't need to answer
[01:10:39] <Franciman> do you prefer messages to be either:
[01:10:52] <Franciman> - technical questions about haskell
[01:10:57] <Franciman> - love messages on haskell
[01:11:00] <Franciman> ?
[01:11:12] <geekosaur> polite discussion is encouraged. responding to someone who's being actively confrontational is not
[01:11:13] <Franciman> asking to align
[01:12:02] <geekosaur> attitude has a lot to do with how what you say will be received
[01:12:12] <Franciman> say is the keyword :D
[01:12:17] <geekosaur> and it's not as if everyone here thinks haskell is flawless
[01:12:36] <Franciman> we write, don't say
[01:12:39] <Franciman> but ok, I understand
[01:15:26] <int-e> safinaskar: Lovely. "All these snags led to the realization that we direly needed a memory model for TM." (But basically they tried to do much more than what Haskell's STM offers... and mostly failed, so it can't be taken as evidence that Haskell's flavor of STM fails.)
[01:16:02] <[exa]> Franciman: cf. https://gist.github.com/quchen/5280339  :]
[01:16:02] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Remote host closed the connection)
[01:16:11] <int-e> (AFAICS most of the failures can be blamed on those extensions)
[01:16:15] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[01:16:58] *** Joins: mmhat (~mmh@55d4b3be.access.ecotel.net)
[01:18:09] <Franciman> lol
[01:18:45] <safinaskar> int-e: ok, possibly. i just shared a link
[01:22:14] *** Joins: pgib (~textual@173.38.117.82)
[01:24:08] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Remote host closed the connection)
[01:24:34] <dsal> STM is bad in most languages that aren't Haskell that have tried it because you can't express a way to do it that's remotely sensible in those languages.  e.g., rust has an STM implementation with a big list of things you have to do to use it safely.  Few of those unsafe things will compile in Haskell code.
[01:24:54] <EvanR> myth, STM is awesome. We tried to build STM and failed. Myth busted
[01:25:09] *** Joins: Pickchea (~private@user/pickchea)
[01:25:16] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:25:22] <Franciman> what about clojure's implementation, dsal ?
[01:25:53] <dsal> I've not sampled everything… just the few where it might have been relevant to me.
[01:26:02] <dsal> I have no idea what clojure's looks like.  It might be OK.
[01:26:14] <dolio> Almost everything is going to have the same problems.
[01:26:28] <dsal> https://github.com/Marthog/rust-stm#stm-safety
[01:26:30] <dolio> Because the problems are caused by not being pure.
[01:27:20] <dolio> Or some analogous notion. I was serious when I said the problem was that the author of the article wasn't using Haskell.
[01:27:49] <dolio> It's not enough to be aware of Haskell if almost every language lacks a fundamental aspect that makes STM viable.
[01:28:19] <dsal> rust fails to allow the library author to build code that can be used safely.  In haskell, STM is great.  In a language like rust, it requires you to think a lot harder and might not be better than just doing a simple thing.
[01:28:30] <monochrom> janus: I had been too lazy to take a look at algebraic effects. Koka looks like a very nice and concrete gateway drug. Thanks! Maybe one day I could also teach this approach in a "principles of programming languages" course.
[01:28:53] <dibblego> I teach people who are "aware of haskell" — they are the hardest. I also teach people who are "aware of how an aeroplane works because MSFS" — also the hardest
[01:30:02] <dolio> Being aware of Java doesn't make it easier to not write memory leaks in C.
[01:30:27] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Ping timeout: 256 seconds)
[01:30:35] <Franciman> i mean, haskell is not pure either
[01:30:56] <Franciman> so the real problem, to me, seems how confortable it is to write pure code in the language
[01:31:25] <EvanR> "no true pure language"
[01:31:38] <geekosaur> haskell prevents you from mixing impure code into pure code
[01:31:44] <Franciman> :t unsafePerformIO
[01:31:45] <lambdabot> error: Variable not in scope: unsafePerformIO
[01:31:49] <Franciman> rip
[01:31:56] <EvanR> what is this unsafePerformIO you speak of
[01:31:58] <geekosaur> which right away chops out several of the things that can go wrong with rust-stm
[01:32:17] <monochrom> What is the point of all these arguments and why it hasn't ended after all these hours?
[01:32:33] <Franciman> for example, i don't see why standard ML could have a nice STM implementation
[01:32:36] <geekosaur> everyone is bored?
[01:33:01] <Franciman> you just have to take care and not use ref functions
[01:33:08] <monochrom> During which I have already watched a favourite 1-hour TV show and started looking at Koka.
[01:33:15] <geekosaur> but the type system should be taking care for you
[01:33:23] <monochrom> And I am not even a fast learner or coder.
[01:33:37] <geekosaur> which is the point of Haskell's STM, the typesystem prevents all the gotchas
[01:33:44] <yushyin> monochrom: it's usually always the same discussions here anyway, with mostly the same people involved :)
[01:33:51] <monochrom> Imagine what you could have accompllished given that all of you read books and write code twice as fast as I can.
[01:34:06] <geekosaur> you *can't* mix impure code into your pure code. you *can't* nest `atomically`s. etc.
[01:34:15] <EvanR> but clearly STM has no utility because there's an unsafeSTMtoIO function
[01:34:20] <EvanR> literally all bets are off ever
[01:34:34] <Franciman> EvanR: this is an oversimplification
[01:34:48] <Franciman> i just said that it's not about purity, but how comfortable it is to write pure functional code
[01:34:54] <EvanR> haskell is equal to malbolge, or something
[01:34:57] <Franciman> ok
[01:35:13] <Franciman> i don't know what i did wrong this time
[01:35:18] <Franciman> and why you are making fun of me
[01:35:23] <EvanR> well I found it comfortable to write pure code in javascript, that just isn't enough though
[01:35:33] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[01:35:39] <EvanR> nothing you interact with agrees to, or could
[01:35:57] <EvanR> so it's not entirely about the language 
[01:36:26] <Franciman> so you think that me being wrong means i can be made fun of
[01:36:28] <Franciman> i understand
[01:36:33] <geekosaur> nobody's making fun of you, Franciman. you're acting like you have a guilty conscience and reacting to things not aimed at you
[01:36:45] <Franciman> i think EvanR is aiming at me
[01:36:47] <Franciman> being sarcastic
[01:37:01] <geekosaur> apparently we're not allowed to talk around you because you might decide we're laughing behind your back, or something
[01:37:18] <safinaskar> monochrom: you may also like this language: https://www.unisonweb.org/ . it also has particular way of dealing with effects
[01:37:19] *** Joins: machinedgod (~machinedg@24.105.81.50)
[01:37:41] <Franciman> geekosaur: i mean he was being sarcastic at me
[01:37:46] <Franciman> not beyond me
[01:38:39] <EvanR> I'm serious about javascript though
[01:38:42] <Franciman> tell me how i should behave
[01:38:44] <Franciman> and i will
[01:38:48] <Franciman> i want to be part of the community
[01:38:53] <Franciman> i don't know what else to say
[01:39:20] <geekosaur> just don't ascribe things to yourself that aren'taimed at you. you've done that pretty much every time you've been in here.
[01:39:34] <Franciman> EvanR: so you weren't being sarcastic with me?
[01:40:02] <geekosaur> if it'snot obviously aimed at you, just assume it's not and keep quiet.(if it *is* aimed at you, either someone will step in or you can pop into #haskell-ops; that behavior is not tolerated here) 
[01:40:06] <EvanR> regardless of personal discipline writing your own js, it's like boiling the ocean since no framework exists to respect purity among different developers
[01:40:15] *** Quits: cosimone (~user@93-47-228-151.ip115.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[01:40:46] *** Quits: jao (~jao@211.68.17.95.dynamic.jazztel.es) (Remote host closed the connection)
[01:41:01] <Franciman> ok
[01:41:21] <geekosaur> and you're hosed if some function you thought was [pure turns out not to be, or changes in its next release
[01:41:30] <ProfSimm> Can I make a type that mimics both a scalar an a list of values where the first item is the scalar, so everyone can see what they expect to see.
[01:41:37] <geekosaur> which is another thing the type system will catch for you
[01:42:11] <geekosaur> ProfSimm, no. that's pretty much the antithesis of Haskell types
[01:42:19] <geekosaur> that's a Perl type
[01:42:32] <ProfSimm> geekosaur: well is it tho. It's two typeclasses supported by one type
[01:42:46] <monochrom> Wait, does Perl actually convert a list to its head in scalar contexts?
[01:42:56] <geekosaur> depends on context
[01:43:01] <monochrom> Yikes.
[01:43:08] <geekosaur> and you can look at context and control what happens thereby
[01:43:13] <monochrom> My recollection is that the scalar is the length of the list...
[01:43:16] <ProfSimm> Wait so it does that?
[01:43:19] <dolio> What is the value of the "well actually ..." in response to my explanation to why STM works in Haskell and almost nowhere else? It makes me just not want to offer any explanations at all, because they're not going to be thought about without answering a bunch of language pedantry.
[01:43:25] <geekosaur> usually a list is converted to its length, but sometimes to the first element or other things
[01:43:27] <ProfSimm> Oh Perl, yes
[01:43:41] <monochrom> If Haskell did that, I would leave Haskell.
[01:43:47] *** Quits: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10) (Read error: Connection reset by peer)
[01:43:48] <geekosaur> and you can always look at wantarray
[01:44:09] <ProfSimm> I'm thinking more like jQuery. Everything is a list, when you want to work with one item you have a jQuery object with 1 item
[01:44:10] <monochrom> This is why I am against "unconditionally get more people to adopt Haskell".
[01:44:17] *** Joins: nek0 (~nek0@nek0.eu)
[01:44:31] *** Quits: wavemode (~wavemode@2601:241:0:fc90:1186:8dd8:ad8a:69e2) (Quit: Client closed)
[01:44:56] <monochrom> Not to say that "exclusively get same-minded people into Haskell" is healthy either. I know that.
[01:45:10] <Franciman> lol
[01:45:38] <geekosaur> I'm fine with comparative language discussion. but first know what the hell you're talking about
[01:46:01] *** Joins: sektor|2 (~kvirc@87.227.175.182)
[01:46:03] *** Joins: alp (~alp@user/alp)
[01:46:03] <ProfSimm> Well I'm thinking reality is a bit like that. We see just 3D projectsions of an 248 dimensional lattice E8
[01:46:16] <monochrom> Uh that's pretty useless, geekosaur. Everyone thinks they know what they're talking about. :)
[01:46:19] <ProfSimm> If you wanna see 3D you get 3D. If you want to see all 248 dimensions, you might
[01:48:18] *** Joins: jao (~jao@211.68.17.95.dynamic.jazztel.es)
[01:48:32] *** Parts: safinaskar (~quassel@109.252.91.116) ()
[01:49:29] *** Quits: sektor|3 (~kvirc@94.155.193.66) (Ping timeout: 256 seconds)
[01:50:51] <Franciman> ok dolio i'll take care
[01:50:54] <Franciman> thanks for the tip
[01:51:45] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[01:52:26] <Franciman> i was reading the comments under the HVM post on hacker news and a person said: well but you are comparing GHC using a single thread to HVM using parallelism
[01:52:30] <Franciman> so it's unfair
[01:52:48] <Franciman> but i think it is VERY fair, because one of the promises of functional languages is to better adapt to multicores, i think
[01:52:55] <Franciman> so if my runtime can automatically take care of it
[01:53:03] <Franciman> much better than GHC which requires the user intervention
[01:53:08] <Franciman> it is a big step forward
[01:53:25] <monochrom> I would not read Hacker News at all.
[01:53:32] <Franciman> thanks oracle
[01:53:50] <monochrom> Indeed, I don't.
[01:54:33] <Franciman> the idea of automatic parallelism is very intriguing
[01:54:44] <Franciman> haskell failed to get it, but i don't quite understand why
[01:55:08] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[01:55:32] <Franciman> i remember somebody mentioning that one could not determine what the correct granularity of parallelism would be
[01:56:04] <Franciman> but somehow you can still have a form of automation, aided by human annotations
[01:57:21] <ski> @type Control.Parallel.par
[01:57:22] <lambdabot> a -> b -> b
[01:57:55] <Franciman> ski: how does this manage to be pure?
[01:58:18] <ski> it just adds a spark for a computation
[01:58:29] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[01:58:37] <ski> @where PCPH
[01:58:37] <lambdabot> "Parallel and Concurrent Programming in Haskell" by Simon Marlow in 2013 at <http://community.haskell.org/~simonmar/pcph/>,<http://chimera.labs.oreilly.com/books/1230000000929/>,<https://web.archive.
[01:58:37] <lambdabot> org/web/20180117194842/http://chimera.labs.oreilly.com/books/1230000000929>,<https://www.oreilly.com/library/view/parallel-and-concurrent/9781449335939/>
[01:58:42] <hololeap> if it's obvious some operation will work well in parallel, you can basically get automatic parallelism using the parallel package
[01:58:45] <ski> see above ^
[01:59:11] <Franciman> thanks
[01:59:58] <Franciman> i'd like to learn sml and adapt its semantics to these use cases
[02:00:09] <Franciman> it feels very much like scheme
[02:00:12] <Franciman> while haskell is pure bloat
[02:00:22] <Franciman> for a prototype
[02:00:23] <ski> SML is neat
[02:00:31] <Franciman> i could never write an haskell compiler
[02:00:40] <Franciman> and haskell also lacks formal semantics
[02:00:45] <Franciman> so i should learn about core, etc
[02:00:51] <dsal> I doubt any person could write a haskell compiler.
[02:01:03] * ski . o O ( JHC )
[02:01:07] <Franciman> agree ski 
[02:01:13] <Franciman> sml is pretty cool
[02:01:17] *** Quits: deadmarshal (~deadmarsh@95.38.117.237) (Ping timeout: 240 seconds)
[02:01:18] <dolio> Franciman: Here's my question: how did HVM solve the problem that previous researchers on this ran into?
[02:01:40] <dolio> I don't see an explanation in the repo.
[02:01:51] <monochrom> SML and Scheme are both pretty fat languages too.
[02:02:02] *** Joins: wavemode (~wavemode@2601:241:0:fc90:1186:8dd8:ad8a:69e2)
[02:02:27] <monochrom> If you think SML is small, you're forgetting its parametrized module system and the eqtype thing.
[02:02:49] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[02:02:49] <Franciman> monochrom: is it larger than haskell?
[02:03:01] <monochrom> If you think Scheme is small, you're forgetting its macro system, or call/cc, or shift/reset, or a plural of them.
[02:03:08] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[02:03:09] *** Joins: safinaskar (~safinaska@109.252.91.116)
[02:03:20] <Franciman> the cool thing of sml, imho, is that it's nicely defined in pieces
[02:03:22] <Franciman> so you can define subsets
[02:03:28] <Franciman> like you usually do when twekaing with scheme
[02:03:30] <safinaskar> wow! Koka has true total functions! https://koka-lang.github.io/koka/doc/book.html
[02:03:31] <dolio> It has parallel benchmarks, but I don't see any explanation for how it's parallelized.
[02:03:33] <Franciman> so it's a pretty cool first language to implement
[02:03:45] <Franciman> dolio: sorry, but i don't know
[02:03:50] <safinaskar> fun sqr    : (int) -> total int       // total: mathematical total function
[02:04:15] <dolio> And the parallelism section in the "HOW.mc" is "[TODO]".
[02:04:19] <Franciman> :)
[02:04:19] <wavemode> are ints in koka arbitrary precision?
[02:04:25] <Franciman> SrPx may know more
[02:04:28] <Franciman> they are the author
[02:04:48] <safinaskar> Franciman: "so it's a pretty cool first language to implement" - well, first i would recommend implementing BASIC interpreter. i think it is most simple thing to do
[02:04:57] <Franciman> dolio: i was asking what the previous issues researches found 
[02:05:01] <Franciman> i don't know about them
[02:05:03] <monochrom> If you're subsetting then subsetting Haskell is just as easy/difficult. See codeworld.
[02:05:17] <safinaskar> Franciman: then scheme interpreter. this is harder, because scheme has lambdas. but it is untyped, to there is no messing with type system
[02:05:25] <safinaskar> Franciman: then you can implement ML
[02:05:29] <dolio> It's what you mentioned. Parallelism has overhead that isn't always worth it.
[02:05:44] <safinaskar> personally i implemented scheme interpreter
[02:05:46] <Franciman> i think HVM has a «dirty trick»
[02:05:49] <safinaskar> (small)
[02:05:51] <dolio> You can parallelise `(1 + 2) + (3 + 4)`, but it's faster to just add them all up.
[02:06:02] <Franciman> they run HVM on specific examples which vastly scale
[02:06:03] *** Parts: safinaskar (~safinaska@109.252.91.116) ()
[02:06:27] <Franciman> i read from the HOW.md that laziness fails to «commute» with lambdas
[02:06:34] <Franciman> monochrom: sure sure sure sure
[02:06:41] <Franciman> haskell is just as easy
[02:06:46] <dolio> That's a separate issue.
[02:06:54] <Franciman> i know
[02:06:59] <Franciman> i'm trying to say that
[02:07:03] <Franciman> it works so well
[02:07:05] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[02:07:07] <Franciman> because of that reason
[02:07:13] <Franciman> probably not because of massive parallelsim
[02:07:49] <Franciman> monochrom: given that it's just as easy, sml has the advantage of having a formal semantics fully specified and the bare language is pretty small
[02:07:52] <Franciman> haskell lacks that
[02:07:55] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[02:08:08] <Franciman> so this helps implementing a compiler, imho
[02:08:13] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[02:08:20] <monochrom> I'm done with this moving goalpost.
[02:08:33] <Franciman> you are the n1 haskell fanperson ^^
[02:08:35] <Franciman> it's ok
[02:08:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[02:09:24] <Franciman> my goal is: it's easier to use sml as a framework for implementing a toy functional language that you can reason about carefully
[02:09:27] <Franciman> rather than haskell
[02:09:37] <Franciman> it's moving faaaaaaaaast
[02:09:49] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 240 seconds)
[02:09:59] <monochrom> I may agree about the formal semantics part on those days when I'm anal, but this "bare language" is clearly a moving goalpost, maliciously defined so that "bare SML exists but bare Haskell doesn't".
[02:10:09] <Franciman> monochrom: pardon me
[02:10:14] <Franciman> but bare sml is defined in the standard (revised)
[02:13:31] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[02:13:37] *** Joins: mikail (~mikail@94.3.253.161)
[02:14:19] *** Quits: foul_owl (~kerry@23.82.194.73) (Ping timeout: 256 seconds)
[02:14:59] *** Joins: lbseale_ (~ep1ctetus@user/ep1ctetus)
[02:16:07] <Franciman> this is exactly what i am referring to, when i say that it is easier to split sml in pieces, because they already did so in the standard
[02:16:17] <Franciman> with precise semantics
[02:16:40] <dsal> It sort of reads like you're speaking from imagined experience.
[02:16:41] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[02:16:41] *** Joins: deadmarshal (~deadmarsh@95.38.116.14)
[02:18:37] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Ping timeout: 256 seconds)
[02:20:20] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:20:34] *** Joins: vysn (~vysn@user/vysn)
[02:20:38] <Franciman> thanks dsal 
[02:21:47] <dsal> i.e., it sounds like you're talking about which one of two things you're not doing would be easier.  If you were actually going to do something, I'd expect putting effort into doing it would be more productive than telling other people why it's probably hard to do it using tools they are using.
[02:22:03] <Franciman> after being told i maliciously define entities, now i also know that i am a delusional person
[02:22:45] <dsal> Everyone imagines things.  That doesn't make us delusional.
[02:23:01] <Franciman> the quasi-structuralist quote «you only know yourself through others» is now more true than ever
[02:23:07] <Franciman> is more true than ever*
[02:23:08] <dsal> There's just no practicality to your argument.  You don't seem to actually want to do the things you're imagining.
[02:23:37] <Franciman> dsal: i am learning the sml standard, and I'm having vastly easier time than learning the haskell language report, which btw isn't really the haskell most people use
[02:23:48] <Franciman> and i'm going to implement it in zig
[02:27:14] *** Quits: deadmarshal (~deadmarsh@95.38.116.14) (Ping timeout: 260 seconds)
[02:29:46] *** Joins: emf (~emf@2620:10d:c090:400::5:c6d7)
[02:29:52] <dsal> OK.  I guess I still don't quite understand what you're arguing here, but that might just be because I'm working and not paying that much attention.  I write Haskell code for money, but I don't write Haskell compilers, so I guess I just don't see the issue.
[02:30:06] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[02:30:24] <dsal> I certainly wouldn't mind a better haskell compiler, but that's so far down the list of my pain points right now.  Everything unpleasant for me is caused by other people writing code.
[02:30:58] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[02:31:16] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.4)
[02:31:49] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[02:32:26] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[02:33:52] *** Joins: deadmarshal (~deadmarsh@95.38.116.14)
[02:34:44] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Quit: WeeChat 2.2-dev)
[02:35:58] *** Joins: foul_owl (~kerry@23.82.194.73)
[02:39:11] *** Quits: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi) (Quit: Leaving.)
[02:39:13] *** Joins: lottaquestions_ (~nick@2607:fa49:5041:a200:78c8:bb9f:f5b1:85aa)
[02:40:25] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:4100:dd4:ee5e:72a7)
[02:44:06] *** Quits: AlexisTP (~AlexisTP3@92.57.44.63) (Ping timeout: 245 seconds)
[02:45:12] *** Quits: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk) (Remote host closed the connection)
[02:46:17] *** Quits: jao (~jao@211.68.17.95.dynamic.jazztel.es) (Ping timeout: 240 seconds)
[02:47:12] *** Quits: mikail (~mikail@94.3.253.161) (Quit: Leaving)
[02:48:28] *** Joins: jao (~jao@static-68-235-44-10.cust.tzulo.com)
[02:49:09] *** Quits: deadmarshal (~deadmarsh@95.38.116.14) (Ping timeout: 250 seconds)
[02:49:13] *** Quits: k8yun (~k8yun@user/k8yun) (Read error: Connection reset by peer)
[02:58:30] *** Joins: cynomys (~cynomys@user/cynomys)
[03:00:13] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:00:39] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[03:00:55] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[03:02:22] *** Joins: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk)
[03:04:16] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dd3b:3d16:5046:6705) (Remote host closed the connection)
[03:04:30] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[03:04:39] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[03:05:25] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[03:08:47] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[03:08:57] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 240 seconds)
[03:09:03] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[03:09:48] *** Joins: machinedgod (~machinedg@24.105.81.50)
[03:11:03] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[03:11:18] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[03:14:18] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[03:14:38] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Remote host closed the connection)
[03:15:25] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[03:15:51] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[03:16:47] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Client Quit)
[03:17:13] *** Quits: foul_owl (~kerry@23.82.194.73) (Ping timeout: 256 seconds)
[03:17:33] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[03:18:51] <EvanR> Franciman, long ago I used jquery, and a straightforward way to do what you said is to just use [a] everywhere. It even has handy Monad support
[03:19:07] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[03:19:28] <EvanR> it even looks like other languages in some cases: the character 'c' is expressed as "c" (list of 1 char)
[03:20:10] <EvanR> if you mix in NonEmpty with your [ ]s, you also get some static guarantees about inhabitedness of your list
[03:20:17] *** Quits: myShoggoth (~myShoggot@75.164.32.244) (Ping timeout: 240 seconds)
[03:20:17] *** Quits: MatthiasG2 (~matthias@i6DFA026C.versanet.de) (Quit: leaving)
[03:20:17] *** Joins: Guest67 (~Guest67@host86-130-58-7.range86-130.btcentralplus.com)
[03:21:20] <EvanR> enough of this and it may even become apparent how silly it is out of js context
[03:21:49] <EvanR> (or not, and be the best thing ever)
[03:25:15] <monochrom> That sounds like being trapped in the ListT IO monad. :)
[03:26:30] *** Joins: ober (~ober@c-73-68-74-41.hsd1.ma.comcast.net)
[03:28:52] *** Joins: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com)
[03:30:58] *** Joins: Clatters (~Clatters@host86-130-58-7.range86-130.btcentralplus.com)
[03:31:29] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 256 seconds)
[03:32:13] *** Joins: foul_owl (~kerry@217.114.38.61)
[03:32:13] <EvanR> "jQuery is a monad"
[03:32:17] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 240 seconds)
[03:32:26] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[03:35:06] *** Quits: Guest67 (~Guest67@host86-130-58-7.range86-130.btcentralplus.com) (Quit: Client closed)
[03:35:12] *** Quits: Clatters (~Clatters@host86-130-58-7.range86-130.btcentralplus.com) (Client Quit)
[03:36:07] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[03:37:07] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[03:39:12] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[03:39:26] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[03:40:02] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 260 seconds)
[03:42:58] *** Joins: Majiir (~majiir@pool-96-237-149-35.bstnma.fios.verizon.net)
[03:44:29] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[03:46:40] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dd3b:3d16:5046:6705)
[03:52:12] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[03:52:12] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[03:52:12] *** Joins: wroathe (~wroathe@user/wroathe)
[03:55:54] *** Quits: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr) (Remote host closed the connection)
[03:56:06] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[03:56:57] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[03:57:02] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[03:59:53] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[04:01:16] *** Joins: deadmarshal (~deadmarsh@95.38.116.14)
[04:03:27] *** Quits: jgeerds (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 256 seconds)
[04:04:41] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:05:17] *** Quits: deadmarshal (~deadmarsh@95.38.116.14) (Ping timeout: 240 seconds)
[04:06:10] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[04:09:41] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[04:11:54] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[04:14:54] *** Joins: mvk (~mvk@2607:fea8:5cdc:bf00::5483)
[04:16:59] *** Quits: mmhat (~mmh@55d4b3be.access.ecotel.net) (Quit: WeeChat 3.4)
[04:18:26] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[04:18:41] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:18:48] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[04:23:55] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:30a6:9d4e:5fe4:7e50) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:34:42] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Ping timeout: 250 seconds)
[04:39:12] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[04:39:33] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[04:40:35] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:41:17] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:42:47] *** Quits: jlamothe (~jlamothe@198.251.61.229) (Ping timeout: 256 seconds)
[04:43:28] *** Quits: lbseale_ (~ep1ctetus@user/ep1ctetus) (Quit: Leaving)
[04:44:33] *** Joins: d34df00d (~d34df00d@2600:1700:8c60:3a10::48)
[04:44:37] <d34df00d> Hi!
[04:44:58] <d34df00d> What's up with pattern synonyms and coverage checker?
[04:45:57] <d34df00d> To be more precise, I had a `data Definition = Function Ty Arg | ...`, and I figured I want to refactor this into `data FunDef = FunDef Ty Arg; data Definition = Function FunDef | ...`
[04:47:05] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 256 seconds)
[04:47:20] <d34df00d> There's a lot of code that pattern-matches on Definition, so I thought adding `pattern Function ty arg <- Function (FunDef ty arg) where Function ty arg = Function (FunDef ty arg)` would help.
[04:47:23] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:48:00] <d34df00d> But now ghc complains pattern-matches are not exhaustive.
[04:48:04] <d34df00d> (ergh, replace one of the Function's with a different name to avoid clashes, but the idea is the same)
[04:48:20] <d34df00d> So, anyway, is there a way to convince ghc the matches are exhaustive?
[04:48:22] <monochrom> I haven't checked, but I wouldn't name-clash "Function" so many times.
[04:48:58] <d34df00d> Yep, let's assume Function as in the definition ctor is named differently.
[04:49:04] <d34df00d> In the real code the names are a lot uglier.
[04:49:54] <monochrom> And I would write like "pattern F ty arg = Function (FunDef ty arg)" for this obviously bidirectional pattern.
[04:51:15] <d34df00d> Well, it's still non-exhaustive.
[04:51:23] <d34df00d> But it's much nicer this way, thanks!
[04:51:58] <geekosaur> what ghc version? the coverage checker gets better with each version although there may be regressions in 9.2.1 which will hopefully be fixed in 9.2.2
[04:52:12] <jackdk> also {-# COMPLETE #-} annotations are a thing
[04:52:25] <d34df00d> 8.10, sadly.
[04:53:18] *** Quits: alp (~alp@user/alp) (Ping timeout: 260 seconds)
[04:57:04] <d34df00d> jackdk: thanks, {-# COMPLETE #-} does the trick! Ideally the compiler'd see the completeness itself, so let's hope I could remove this pragma when I will be able to upgrade to newer ghc versions.
[05:00:21] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[05:00:49] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:00:51] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dd3b:3d16:5046:6705) (Remote host closed the connection)
[05:08:55] *** Quits: x_kuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[05:08:59] *** Joins: cynomys (~cynomys@user/cynomys)
[05:10:11] *** Quits: Majiir (~majiir@pool-96-237-149-35.bstnma.fios.verizon.net) (Quit: Lost terminal)
[05:17:55] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 256 seconds)
[05:18:06] *** Joins: ensyde (~ensyde@2600:1700:2050:1040::48)
[05:19:17] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[05:26:33] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[05:30:37] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[05:31:23] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:34:41] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[05:36:03] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[05:36:09] *** Quits: xff0x (~xff0x@2001:1a81:533f:ea00:4e49:abcb:9c05:c4b8) (Ping timeout: 256 seconds)
[05:36:32] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dd3b:3d16:5046:6705)
[05:38:06] *** Joins: xff0x (~xff0x@2001:1a81:537c:5300:675b:21ba:4e49:e802)
[05:38:37] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[05:41:29] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[05:43:59] *** Joins: califax- (~califax@user/califx)
[05:47:09] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:47:09] *** califax- is now known as califax
[05:50:19] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[05:52:35] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[06:00:08] *** Joins: fef (~thedawn@user/thedawn)
[06:02:51] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[06:12:23] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 250 seconds)
[06:20:07] *** Quits: ober (~ober@c-73-68-74-41.hsd1.ma.comcast.net) (Remote host closed the connection)
[06:21:13] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[06:26:34] *** Joins: mbuf (~Shakthi@171.61.235.32)
[06:31:00] *** Joins: k8yun (~k8yun@user/k8yun)
[06:32:17] *** Quits: xff0x (~xff0x@2001:1a81:537c:5300:675b:21ba:4e49:e802) (Ping timeout: 240 seconds)
[06:34:17] *** Joins: xff0x (~xff0x@2001:1a81:5384:400:cf7c:5041:a517:d608)
[06:36:32] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[06:37:01] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[06:37:30] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[06:42:29] *** Quits: jao (~jao@static-68-235-44-10.cust.tzulo.com) (Remote host closed the connection)
[06:44:43] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[06:46:18] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[06:48:56] *** Joins: jao (~jao@static-68-235-44-10.cust.tzulo.com)
[06:56:37] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 256 seconds)
[06:57:42] *** Joins: cynomys (~cynomys@user/cynomys)
[06:58:12] *** Joins: wavemode30 (~wavemode@2601:241:0:fc90:ed74:bac6:9a73:6e1a)
[06:58:52] *** Quits: wavemode30 (~wavemode@2601:241:0:fc90:ed74:bac6:9a73:6e1a) (Client Quit)
[06:59:06] *** Quits: wavemode (~wavemode@2601:241:0:fc90:1186:8dd8:ad8a:69e2) (Quit: Client closed)
[07:00:33] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[07:10:00] *** Joins: wavemode (~wavemode@2601:241:0:fc90:ed74:bac6:9a73:6e1a)
[07:12:28] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:13:30] *** Joins: k8yun_ (~k8yun@user/k8yun)
[07:13:40] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:15:49] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[07:17:14] *** Quits: k8yun (~k8yun@user/k8yun) (Ping timeout: 252 seconds)
[07:17:15] *** Quits: td_ (~td@muedsl-82-207-238-149.citykom.de) (Ping timeout: 256 seconds)
[07:18:42] *** Joins: td_ (~td@94.134.91.16)
[07:28:27] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[07:29:52] *** Quits: ystael (~ystael@user/ystael) (Quit: Lost terminal)
[07:30:01] *** Quits: haasn (~nand@haasn.dev) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[07:31:56] *** Joins: haasn (~nand@haasn.dev)
[07:33:25] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[07:36:01] *** Quits: ensyde (~ensyde@2600:1700:2050:1040::48) (Ping timeout: 250 seconds)
[07:38:18] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[07:44:54] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[07:45:24] *** Quits: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk) (Remote host closed the connection)
[07:45:56] *** Joins: burnsidesLlama (~burnsides@client-8-95.eduroam.oxuni.org.uk)
[07:50:07] *** Quits: burnsidesLlama (~burnsides@client-8-95.eduroam.oxuni.org.uk) (Ping timeout: 256 seconds)
[07:51:07] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:52:04] *** Joins: dajoer (~david@user/gvx)
[07:55:47] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[07:56:00] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[07:56:28] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[07:57:50] *** Joins: caubert_ (~caubert@136.244.111.235)
[07:58:16] *** Joins: deadmarshal (~deadmarsh@95.38.116.14)
[07:58:57] *** Quits: caubert (~caubert@136.244.111.235) (Ping timeout: 240 seconds)
[08:02:04] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[08:04:00] *** Quits: k8yun_ (~k8yun@user/k8yun) (Ping timeout: 250 seconds)
[08:04:34] *** Quits: modnar (~modnar@shell.sonic.net) (Quit: No Ping reply in 180 seconds.)
[08:06:05] *** Joins: lavaman (~lavaman@98.38.249.169)
[08:07:16] *** Joins: modnar (~modnar@shell.sonic.net)
[08:16:03] *** Joins: sebastiandb (~sebastian@2620:0:5301:2101:1fb2:b569:b87b:10e9)
[08:32:03] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 256 seconds)
[08:36:03] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 250 seconds)
[08:37:51] *** Quits: wavemode (~wavemode@2601:241:0:fc90:ed74:bac6:9a73:6e1a) (Quit: Client closed)
[08:38:21] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[08:44:10] *** Joins: wavemode (~wavemode@2601:241:0:fc90:2892:d0:a7ec:bc11)
[08:49:01] *** Joins: ksqsf (~user@134.209.106.31)
[08:49:22] <ksqsf> Is there a stack command that prints the resolver of the current project?
[08:51:02] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[08:52:13] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[08:54:20] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[08:54:32] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[08:58:27] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[09:01:50] <dsal> The resolver can be a file path or URL.  I don't know if there's a commandline way to do it offhand, but it might be confusing.
[09:03:06] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[09:03:06] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[09:03:06] *** Joins: wroathe (~wroathe@user/wroathe)
[09:03:47] *** Quits: deadmarshal (~deadmarsh@95.38.116.14) (Ping timeout: 256 seconds)
[09:07:25] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[09:07:27] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[09:08:34] *** Quits: sebastiandb (~sebastian@2620:0:5301:2101:1fb2:b569:b87b:10e9) (Ping timeout: 260 seconds)
[09:10:55] *** Quits: jao (~jao@static-68-235-44-10.cust.tzulo.com) (Ping timeout: 256 seconds)
[09:14:30] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[09:17:40] <koala_man> hey I'm looking at the "infinite loops" section at the bottom of https://wiki.haskell.org/Debugging but I can't reproduce it. Does anyone know if this still works?
[09:18:26] <koala_man> or any other convenient way to track down an infinite loop
[09:19:02] <jackdk> call smaller and smaller parts of your program - if the small part doesn't infinitely loop, the loop is in the part you left our
[09:19:05] <jackdk> out*
[09:19:59] <Axman6> Debug.Trace can be useful too, if you have: loop some args = ..., you can do loop some args | trace ("loop",some,args) False = undefined; | otherwise = ...
[09:20:35] <koala_man> jackdk: due to laziness this is not the case
[09:21:44] <modnar> ksqsf:  perhaps?    grep -A2 "^resolver:" stack.yaml
[09:23:39] <ephemient> might not be on the same line since it's yaml. `python -c 'import yaml;print(yaml.load(open("stack.yaml"))["resolver"])' would reliably get the right stanza but as mentioned above, it could be a name or a path or a url...
[09:30:08] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[09:39:08] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[09:43:24] *** Quits: HotblackDesiato (~HotblackD@gateway/tor-sasl/hotblackdesiato) (Remote host closed the connection)
[09:43:46] *** Joins: HotblackDesiato (~HotblackD@gateway/tor-sasl/hotblackdesiato)
[09:44:30] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[09:45:27] <koala_man> I build my executable with profiling, but I'm not getting any results when I ctrl-c it. Is there anything I can do about that?
[09:46:13] <Axman6> what have you actually done?
[09:46:43] <koala_man> `cabal build -p` followed by `myexe +RTS -p`
[09:46:56] <Axman6> but what have you done to your code
[09:46:58] <koala_man> also --enable-profiling
[09:47:26] <Axman6> Keep in mind that that page you liked to is from the GHC 6 era, and a lot of it is probably pretty useless
[09:47:40] <koala_man> not sure what you mean. I've made extensive modifications to it?
[09:48:14] <Axman6> I suggested you make sone changes to your code to make it easier to see what's going on, did you try that?
[09:48:40] <koala_man> I'm very familiar with trace debugging, I'm just tired of doing it every time
[09:53:24] <ephemient> compile with ghc -prof -fprof-auto for some default {-# SCC #-} everywhere, run with +RTS -xc to include stack traces… should work but I always had a better time breaking things down into smaller testable components then using quickcheck or Debug.Trace
[10:01:43] <koala_man> ephemient: I'm not getting a stack trace, but Ctrl-C only kills it the second time so maybe the handler gets stuck
[10:03:31] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[10:03:31] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[10:03:31] *** Joins: wroathe (~wroathe@user/wroathe)
[10:03:31] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[10:03:49] *** Joins: gentauro (~gentauro@user/gentauro)
[10:04:17] *** Quits: Inst (~delicacie@2601:6c4:4080:3f80:6cf2:b906:2bc7:1ff9) (Ping timeout: 240 seconds)
[10:05:33] *** Quits: yauhsien (~yauhsien@61-231-29-69.dynamic-ip.hinet.net) (Remote host closed the connection)
[10:06:18] *** Joins: yauhsien (~yauhsien@61-231-29-69.dynamic-ip.hinet.net)
[10:07:15] *** Quits: bliminse (~bliminse@host86-188-36-166.range86-188.btcentralplus.com) (Ping timeout: 256 seconds)
[10:07:26] *** Quits: yauhsien (~yauhsien@61-231-29-69.dynamic-ip.hinet.net) (Remote host closed the connection)
[10:07:39] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[10:08:06] *** Joins: yauhsien (~yauhsien@61-231-29-69.dynamic-ip.hinet.net)
[10:08:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[10:08:50] *** Joins: bliminse (~bliminse@host86-158-241-239.range86-158.btcentralplus.com)
[10:11:36] *** Joins: Inst (~delicacie@2601:6c4:4080:3f80:1d81:9f23:5ac8:407a)
[10:11:46] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[10:13:09] *** Quits: yauhsien (~yauhsien@61-231-29-69.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[10:23:26] *** Quits: echoreply (~echoreply@45.32.163.16) (Quit: WeeChat 2.8)
[10:24:44] *** Joins: echoreply (~echoreply@2001:19f0:9002:1f3b:5400:ff:fe6f:8b8d)
[10:29:12] <koala_man> ephemient: hah, I started the operation in a forkIO and killed the thread after a delay. it showed a stack trace that was at least close
[10:32:04] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:c1b4:4e62:c0e4:304a) (Remote host closed the connection)
[10:32:21] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[10:32:25] *** Quits: superbil (~superbil@1-34-176-171.hinet-ip.hinet.net) (Ping timeout: 256 seconds)
[10:34:38] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[10:34:52] *** Joins: lavaman (~lavaman@98.38.249.169)
[10:35:00] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[10:35:16] *** Joins: superbil (~superbil@1-34-176-171.hinet-ip.hinet.net)
[10:35:32] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[10:35:45] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[10:40:50] *** Joins: michalz (~michalz@185.246.204.93)
[10:41:14] *** Joins: yauhsien (~yauhsien@61-231-29-69.dynamic-ip.hinet.net)
[10:42:32] *** Quits: yauhsien (~yauhsien@61-231-29-69.dynamic-ip.hinet.net) (Remote host closed the connection)
[10:43:22] *** Joins: yauhsien (~yauhsien@61-231-29-69.dynamic-ip.hinet.net)
[10:44:02] *** Joins: alp (~alp@user/alp)
[10:46:41] *** Joins: dschrempf (~dominik@mobiledyn-62-240-134-126.mrsn.at)
[10:48:14] *** Quits: yauhsien (~yauhsien@61-231-29-69.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[10:48:34] *** Joins: phma_ (~phma@2001:5b0:211f:d758:6f18:ab28:6bcc:58fd)
[10:48:34] *** Quits: phma (phma@2001:5b0:211f:7e68:f18f:96de:b488:61b7) (Read error: Connection reset by peer)
[10:49:03] *** Joins: deadmarshal (~deadmarsh@95.38.116.14)
[10:49:11] *** Quits: dschrempf (~dominik@mobiledyn-62-240-134-126.mrsn.at) (Client Quit)
[10:52:07] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:dc0:c5aa:294f:7621)
[10:55:11] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 256 seconds)
[10:57:05] *** Joins: cosimone (~user@93-34-133-254.ip49.fastwebnet.it)
[10:59:06] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[11:00:02] *** Joins: yauhsien (~yauhsien@61-231-29-69.dynamic-ip.hinet.net)
[11:01:33] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[11:02:14] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[11:02:45] <dminuoso> koala_man: Last I checked it worked, yes.
[11:02:58] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[11:04:04] *** phma_ is now known as phma
[11:04:08] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[11:05:32] *** Joins: lavaman (~lavaman@98.38.249.169)
[11:06:52] *** Joins: zaquest (~notzaques@5.130.79.72)
[11:09:49] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[11:09:49] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[11:14:39] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 250 seconds)
[11:14:55] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[11:15:55] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[11:16:04] *** Joins: MajorBiscuit (~MajorBisc@c-001-013-035.client.tudelft.eduvpn.nl)
[11:17:25] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:18:41] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:24:12] *** Joins: chele (~chele@user/chele)
[11:24:53] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 256 seconds)
[11:25:11] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[11:25:24] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[11:25:40] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[11:26:13] *** Joins: sektor|3 (~kvirc@94.155.193.66)
[11:27:54] *** Joins: max22- (~maxime@2a01cb088335980044f7b68859555b87.ipv6.abo.wanadoo.fr)
[11:28:09] *** Joins: vysn (~vysn@user/vysn)
[11:28:52] *** Joins: cfricke (~cfricke@user/cfricke)
[11:29:25] *** Quits: sektor|2 (~kvirc@87.227.175.182) (Ping timeout: 256 seconds)
[11:30:13] *** Quits: michalz (~michalz@185.246.204.93) (Remote host closed the connection)
[11:30:37] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 240 seconds)
[11:32:58] *** Joins: ksqsf (~user@134.209.106.31)
[11:35:20] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[11:36:47] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:cb78:26c4:6167:fc4)
[11:37:27] *** Joins: elkcl (~elkcl@broadband-37-110-156-162.ip.moscow.rt.ru)
[11:37:29] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[11:38:03] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[11:40:08] *** Joins: AlexisTP (~AlexisTP3@92.57.44.63)
[11:41:24] *** Quits: AlexisTP (~AlexisTP3@92.57.44.63) (Client Quit)
[11:41:45] *** Joins: AlexisTP (~AlexisTP3@92.57.44.63)
[11:42:27] *** Quits: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com) (Ping timeout: 256 seconds)
[11:42:37] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 240 seconds)
[11:43:01] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[11:43:53] *** Quits: AlexisTP (~AlexisTP3@92.57.44.63) (Client Quit)
[11:44:11] *** Joins: AlexisTP (~AlexisTP3@92.57.44.63)
[11:45:40] *** Quits: AlexisTP (~AlexisTP3@92.57.44.63) (Client Quit)
[11:46:03] *** Joins: AlexisTP (~AlexisTP@92.57.44.63)
[11:46:44] *** Joins: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com)
[11:47:36] *** Joins: ksqsf (~user@134.209.106.31)
[11:47:59] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dd3b:3d16:5046:6705) (Remote host closed the connection)
[11:49:02] *** Joins: michalz (~michalz@185.246.204.65)
[11:52:07] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 250 seconds)
[11:52:11] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:54:57] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[11:55:32] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[11:55:44] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[11:58:51] *** Joins: Erutuon (~Erutuon@user/erutuon)
[12:01:20] *** Joins: ksqsf (~user@134.209.106.31)
[12:03:25] *** Quits: foul_owl (~kerry@217.114.38.61) (Ping timeout: 256 seconds)
[12:04:17] *** Joins: wroathe (~wroathe@user/wroathe)
[12:04:29] *** Joins: Pickchea (~private@user/pickchea)
[12:07:20] <elkcl> hi! I recently saw someone implement a function that checks if a list is a palindrome like this:
[12:07:20] <elkcl> isPalindrome = (==) <*> reverse
[12:07:20] <elkcl> I was trying to figure out how it works and after fooling around with type signatures it appears that (a ->) gets substituted in (Applicative f). My question is: how the hell does this work? I always thought -> was some special syntax, but here it works like a parametric type or something? Sorry if it's an absolute beginner question, but I could find any info
[12:07:38] <elkcl> *couldn't find any info about this
[12:09:16] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi)
[12:09:16] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[12:11:17] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[12:13:43] <[exa]> elkcl: you're right, this is a result of `instance Applicative ((->) r)`
[12:15:04] <[exa]> anyway it's not an absolute beginner question, I'll need to have a look at how this actually decomposes too :D
[12:15:32] <[exa]> did you work with some other applicatives
[12:15:45] <[exa]> ...for example this:
[12:15:54] <[exa]> > (+) <$> Just 3 <*> Just 5
[12:15:55] <lambdabot>  Just 8
[12:16:11] *** Joins: RFV (~Thunderbi@243.red-88-5-247.dynamicip.rima-tde.net)
[12:17:01] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:17:25] <elkcl> Yeah, I more or less understand how applicatives work in general, what confused me was (->) behaving like a parametric type
[12:17:40] <[exa]> yeah, well, it is. :D
[12:19:02] <[exa]> the instance is here: https://hackage.haskell.org/package/base-4.16.0.0/docs/src/GHC.Base.html#line-1007
[12:19:44] <[exa]> in short, (p ->) forms a proper functor, you may imagine it as a "box for a result that requires a parameter of type `p` to get a result"
[12:21:07] <[exa]> > (+1) 3    -- example: (+1) is a box for a result, and we get the result by giving it the parameter
[12:21:08] <lambdabot>  4
[12:21:43] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[12:21:45] <[exa]> > ((*2) <$> (+1)) 3   -- example 2: we multiply whatever is in the box by 2, then get it out of a box (and pretend the 3 was there even before :D )
[12:21:46] <lambdabot>  8
[12:22:31] <[exa]> applicative in this works similarly, you combine the boxes as with other applicative "containers", and when you finally supply the parameter, it gets sent to all boxes
[12:23:03] <[exa]> (if you worked with combinators, you might notice from the definition that <*> is perfectly equivalent to S combinator)
[12:23:31] <[exa]> so let's make a bit of an allegory with simpler applicatives:
[12:23:49] <[exa]> > (+) <$> Just 3 <*> Just 7
[12:23:50] <lambdabot>  Just 10
[12:23:59] *** Joins: cynomys (~cynomys@user/cynomys)
[12:24:07] <[exa]> :t (+) <$> (+3) <*> (+7)
[12:24:08] <lambdabot> Num b => b -> b
[12:24:21] <[exa]> > (  (+) <$> (+3) <*> (+7)  ) 1
[12:24:23] <lambdabot>  12
[12:24:37] *** Quits: AlexisTP (~AlexisTP@92.57.44.63) (Ping timeout: 250 seconds)
[12:24:48] *** Quits: shriekingnoise (~shrieking@201.231.16.156) (Quit: Quit)
[12:25:09] *** Joins: kuribas (~user@ptr-25vy0i7qdirbfvrk27x.18120a2.ip6.access.telenet.be)
[12:25:17] <[exa]> (basically rewrites to `(+) ((+3) 1) ((+7) 1)`  )
[12:25:56] <[exa]> in your case, the parameter "broadcasting" works the same way, although the parameter is not explicitly there
[12:27:03] <[exa]> `isPalindrome p = ((==) <*> reverse) p` is basically equivalent to `p` getting sent to all boxes in the applicative expression, in this case: `isPalindrome p = ((==) p) (reverse p)`
[12:29:01] *** Joins: cfricke (~cfricke@user/cfricke)
[12:30:37] *** Quits: ishutin (~ishutin@80-95-86-56.pool.digikabel.hu) (Ping timeout: 256 seconds)
[12:31:43] <elkcl> woah, thanks, I think I get it now
[12:31:43] <elkcl> Does that also mean that all type signatures are just "applications" of parametric types then? I thought -> was special, but looks like the only special thing about it is being an infix operator
[12:31:43] <elkcl> Can I define my own "infix types" by the way?
[12:32:04] <[exa]> anyway, this allows a really nice form of passing "global parameters" to whole computations, people usually call it "Reader style", there's whole Reader monad for that purpose, which does roughly the same thing. Might be a nice intuition to have a look at it
[12:32:25] *** Joins: ishutin (~ishutin@193-110-63-21.cable-modem.hdsnet.hu)
[12:32:59] <Axman6> % type a ~~> b = (a,a) -> (b,b)
[12:33:00] <yahb> Axman6: 
[12:33:37] <Axman6> % both :: a -> b -> (a ~~> b); both f (x,y) = (f x, f y)
[12:33:37] <yahb> Axman6: ; <interactive>:2:45: error:; * Couldn't match type: (b0, b0); with: (a, a) -> (b, b); Expected: a ~~> b; Actual: (b0, b0); * In the expression: (f x, f y); In an equation for `both': both f (x, y) = (f x, f y); * Relevant bindings include; f :: a (bound at <interactive>:2:35); both :: a -> b -> a ~~> b (bound at <interactive>:2:30)
[12:33:53] <Axman6> % both :: (a -> b) -> (a ~~> b); both f (x,y) = (f x, f y)
[12:33:53] <yahb> Axman6: 
[12:34:02] <Axman6> % both show (1,2)
[12:34:02] <yahb> Axman6: ("1","2")
[12:34:26] <[exa]> elkcl: technically (->) is not special at all, just a normal type with 2 parameters and sligtly complicated representation at runtime
[12:34:45] <lortabac> (->) is special because it's built-in
[12:34:58] <[exa]> infix types are AFAIK possible but you need to prefix them with `:` or something, not sure
[12:35:19] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[12:35:32] <lortabac> infix types are possible but you have to enable TypeOperators
[12:36:09] <lortabac> and yes, prefix them with (:)
[12:36:27] <[exa]> wow, TypeOperators doesn't even need the : prefix
[12:36:39] <ski> they used to
[12:36:48] <[exa]> still it's a very useful distinction to keep.
[12:37:02] <lortabac> oh I didn't know, I thought only type families were allowed without :
[12:37:49] <lortabac> data constructors still require the :, right?
[12:38:10] <[exa]> yes, seems so
[12:38:17] <[exa]> (phew..!)
[12:38:40] <ski> % data (f <+> g) a = Left1 (f a) | Right1 (g a)
[12:38:40] <yahb> ski: 
[12:39:17] *** Joins: ardell (~ardell@user/ardell)
[12:39:29] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[12:41:17] <ski> you used to be able to say `graph :: Arrow (~>) => (a ~ b) -> (a ~> (a,b)); graph f = arr id &&& f; cograph :: ArrowChoice (~>) => (a ~> b) -> (Either a b ~> b); cograph f = f ||| arr id'
[12:41:56] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[12:42:53] *** Joins: jco (~jco@90-228-194-139-no542.tbcn.telia.com)
[12:43:57] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 240 seconds)
[12:44:18] <ski> (`(~>)' there being a type variable .. just like you can say `on :: (b -> b -> c) -> (a -> b) -> (a -> a -> c); ((+) `on` f) x y = f x + f y', where `(+)' is a variable)
[12:44:42] *** Quits: RFV (~Thunderbi@243.red-88-5-247.dynamicip.rima-tde.net) (Quit: RFV)
[12:45:26] <jco> I'm using Emacs, LSP, and company-mode. Is there a way to disable the feature that when autocompleting, the arguments to a function are also completed (i.e. their types are added after the function name). I'd only want the function name itself to be inserted as a result of selecting the completion candidate.
[12:47:25] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[12:48:31] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[12:48:57] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[12:49:16] *** Joins: xsperry (~xs@user/xsperry)
[12:53:27] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 250 seconds)
[12:55:11] <elkcl> ah, so it's possible with a ghc extension, cool
[12:55:11] <elkcl> ok, thanks everyone
[12:55:14] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[12:55:26] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[12:55:49] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:2df2:1ec5:8dd3:29f0)
[12:56:13] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[12:57:53] *** Joins: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[12:58:08] <InternetCitizen> any ideas why llvm-hs is stuck on 9.0?
[12:58:40] <InternetCitizen> even at upstream all I could find was an llvm-12 dev branch, and last release was in 2019
[13:00:14] <InternetCitizen> is the C API extension proving too costly to maintain? or is there very little interest in building LLVM-backed compilers in Haskell
[13:03:04] <[exa]> maintenance ain't easy I'd say
[13:04:59] <merijn> LLVM is a nightmare beast of Lovecraftian horror :p
[13:05:26] <InternetCitizen> I just find it odd since the OCaml bindings are up to date and I always imagined the Haskell community to be bigger
[13:05:54] <[exa]> related: https://github.com/llvm-hs/llvm-hs/issues/364
[13:06:50] <merijn> So, the answer is: the ocaml bindings aren't up to date either :p
[13:09:09] <InternetCitizen> ? apparently they're part of the llvm project
[13:09:31] <InternetCitizen> "Our FFI layer directly provides bindings to things that the C API doesn't expose, in addition to wrapping the C API for other things, so we have a decently large maintenance burden when something changes."
[13:09:42] *** Joins: `2jt (~jtomas@130.red-88-22-46.staticip.rima-tde.net)
[13:09:57] <[exa]> that's one way to make maintenance hard, yes.
[13:09:58] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[13:10:13] <merijn> InternetCitizen: Yeah, but that llvm-hs issue mentions that Ocaml only supports the C interface and thus not all of LLVM's functionality
[13:10:31] <[exa]> isn't there some kind of simpler project that would just c2hs the whole thing?
[13:10:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[13:10:42] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[13:11:00] <InternetCitizen> merijn: ah yes of course, but that's standard practice in llvm bindings, most languages only wrap the C API
[13:11:18] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[13:11:25] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[13:11:43] <InternetCitizen> llvm-hs is unique in this regard and  the reason I was interested in it
[13:12:20] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:13:30] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Remote host closed the connection)
[13:13:37] *** Quits: cynomys (~cynomys@user/cynomys) (Quit: Lost terminal)
[13:13:47] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[13:13:56] <merijn> Right, but that alone would explain why llvm-hs is so much more work to maintain :)
[13:14:00] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[13:14:04] *** Joins: AlexisTP (~AlexisTP@92.57.44.63)
[13:14:20] <merijn> Wrapping C APIs in haskell? Easy peasy! Barely an inconvenience!
[13:14:36] <merijn> Wrapping C++ APIs in anything (including Haskell)? Please just kill me now
[13:15:09] <merijn> I would 100% rather stab myself in the leg than wrap C++ code in another language
[13:15:17] <merijn> At least the pain of stabs is temporary...
[13:19:02] * [exa] mixes in some random macros and templates
[13:20:07] *** Joins: wroathe (~wroathe@user/wroathe)
[13:20:44] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[13:22:04] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[13:23:01] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Max SendQ exceeded)
[13:23:28] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[13:23:55] *** Joins: lavaman (~lavaman@98.38.249.169)
[13:25:15] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[13:25:19] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[13:25:38] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[13:25:45] <tomsmeding> I wonder if it wouldn't be better for llvm-hs (if only for publicity) if they would just release now, even without full support
[13:26:22] <tomsmeding> at least then you have a higher chance of people using it, running into limitations (perhaps, if at all), and having a bit of time to help completing functionality (perhaps)
[13:26:23] <[exa]> reflecting on whether "full support" of LLVM is even achievable in the long term could help, yes
[13:26:40] <tomsmeding> rather, whether full support is necessary to even cut a first release
[13:27:49] <kuribas> merijn: wrap it in C, then wrap the C in haskell?
[13:27:57] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[13:28:16] *** Joins: ubert (~Thunderbi@p200300ecdf0994700e1bfcbc5fe04b55.dip0.t-ipconnect.de)
[13:29:58] *** Joins: samtoth (~igloo@90.208.227.189)
[13:30:20] <tomsmeding> InternetCitizen: just for completeness' sake, that llvm-12 dev branch is working perfectly well, it just doesn't have full support for all the new stuff introduced in llvm 12
[13:34:35] *** Joins: marinelli (~marinelli@gateway/tor-sasl/marinelli)
[13:35:39] *** Quits: marinelli (~marinelli@gateway/tor-sasl/marinelli) (Client Quit)
[13:36:13] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[13:38:57] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 256 seconds)
[13:40:52] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:adf2:7fd4:5ba2:8512)
[13:43:09] *** Quits: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 256 seconds)
[13:45:33] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[13:48:41] *** Joins: akegalj (~akegalj@141-136-168-212.dsl.iskon.hr)
[13:50:52] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[13:50:52] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[13:50:52] *** Joins: wroathe (~wroathe@user/wroathe)
[13:51:25] *** Quits: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi) (Ping timeout: 240 seconds)
[13:54:44] *** Joins: fvr (uid503686@id-503686.uxbridge.irccloud.com)
[13:55:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[13:57:30] *** Joins: rusrushal13 (~rusrushal@2405:201:7003:8952:a27c:c592:8e19:8656)
[13:59:25] *** Quits: samtoth (~igloo@90.208.227.189) (Ping timeout: 240 seconds)
[14:00:03] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[14:00:05] *** Joins: jamesmartinez (~pepsi@2a02:4780:1:1::1:a856)
[14:01:32] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[14:01:36] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[14:01:53] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Client Quit)
[14:03:12] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[14:04:55] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi)
[14:06:05] *** Joins: xkuru (~xkuru@user/xkuru)
[14:10:05] *** Parts: jamesmartinez (~pepsi@2a02:4780:1:1::1:a856) (WeeChat 1.9.1)
[14:10:45] *** Joins: Gurkenglas_ (~Guest22@dslb-188-096-121-068.188.096.pools.vodafone-ip.de)
[14:11:43] *** Quits: akegalj (~akegalj@141-136-168-212.dsl.iskon.hr) (Ping timeout: 256 seconds)
[14:11:53] <Gurkenglas_> Can GADTs be seen as merely sugar for a transformation like this one? https://gist.github.com/Gurkenglas/137914f5790f0e0390c631f9678832da because it looks more powerful than GADTs are
[14:12:01] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 245 seconds)
[14:12:17] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Ping timeout: 240 seconds)
[14:12:42] *** Joins: safinaskar (~quassel@109.252.91.116)
[14:14:08] <Gurkenglas_> (edited in fits and bursts a little just now, reload if it doesn't look like it'd compile.)
[14:14:10] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[14:15:32] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[14:16:03] <Gurkenglas_> Also, is there a library that provides as-close-as-we-can-get-to type-level lambdas?
[14:17:03] <lortabac> @hackage first-class-families
[14:17:03] <lambdabot> https://hackage.haskell.org/package/first-class-families
[14:17:19] <lortabac> or if you are brave enough, singletons
[14:17:28] <lortabac> @hackage singletons
[14:17:28] <lambdabot> https://hackage.haskell.org/package/singletons
[14:18:11] <Gurkenglas_> Thanks! This must've been what value-level lambdas must have looked like 40 years ago :3
[14:18:12] <kuribas> Gurkenglas_: no, that looks weird.
[14:18:28] <kuribas> Gurkenglas_: what is `f`?
[14:18:46] *** Parts: safinaskar (~quassel@109.252.91.116) ()
[14:18:49] *** Quits: tiferrei (~tiferrei@user/tiferrei) (Remote host closed the connection)
[14:18:55] <Gurkenglas_> kuribas, universally quantified!
[14:19:37] <lortabac> Gurkenglas_: http://code.slipthrough.net/2016/08/10/approximating-gadts-in-purescript/
[14:19:43] <Gurkenglas_> kuribas, you mean, "GADTs can't been seen as merely sugar for that because that looks weird"?
[14:20:16] <lortabac> Gurkenglas_: your encoding looks very similar to the one described in the post
[14:20:22] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:20:34] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[14:21:40] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[14:21:40] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[14:21:40] *** Joins: wroathe (~wroathe@user/wroathe)
[14:22:39] <kuribas> Gurkenglas_: I mean, what do you plug in that `f`?
[14:22:43] <kuribas> Identity?
[14:24:10] *** Quits: kilolympus (~kilolympu@31.205.200.235) (Quit: Quitting IRC :()
[14:25:19] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[14:25:25] <Gurkenglas_> kuribas, whatever you need at the time. to get the string out of Foo2 (\bar baz -> baz "asd"), I suppose you could do runIdentity $ runFoo (\bar baz -> baz "asd") error Identity
[14:25:48] <Gurkenglas_> -error+undefined
[14:26:28] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[14:26:47] <kuribas> Gurkenglas_: what if it is just a phantom variable?
[14:26:55] <kuribas> phantom type...
[14:27:43] <Gurkenglas_> kuribas, then you won't have much luck passing anything to the output of runFoo!
[14:28:09] <kuribas> indeed, but phantom types are supported by GADTs.
[14:29:01] <Gurkenglas_> maybe i misunderstood? give me something that GADTs can do with this that my thing can't.
[14:29:30] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:30:06] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[14:30:42] <Gurkenglas_> *googles around* i guessed phantom type means, type without values. if it just means, f a is the same as f b, then there's no problem
[14:30:50] *** Lord_of_Life_ is now known as Lord_of_Life
[14:31:42] <Gurkenglas_> 'runConst $ runFoo (\bar baz -> baz "asd") undefined Const' will also get the string out.
[14:31:43] <merijn> Gurkenglas_: A phantom type is one without a body (i.e. it only exists in the type, not in the value)
[14:32:12] <merijn> As in "data Const a b = Const a" 'b' is a phantom type, 'cos no "body" (value)
[14:33:22] <Gurkenglas_> Okay. So kuribas, what do you mean by f being phantom? it's not appears-left-but-not-right, it's appears-right-but-not-left.
[14:33:36] <kuribas> yes
[14:34:34] <Gurkenglas_> You're going to have to give me more than yes! :D
[14:34:45] <kuribas> I'll have a look later...
[14:34:58] <kuribas> I have work to do.
[14:36:02] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[14:36:16] *** Joins: califax (~califax@user/califx)
[14:41:29] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Excess Flood)
[14:41:43] *** Joins: jgeerds (~jgeerds@55d4a547.access.ecotel.net)
[14:41:53] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:47:36] <Gurkenglas_> lortabac, that post does something quite different from me, i think - i don't expect any type equality problems. '(\foo2 -> runIdentity $ runFoo2 foo2 Identity Identity) :: Foo2 a -> a' works fine
[14:47:54] <lottaquestions_> Hi all new guy here
[14:48:09] <lottaquestions_> How does one create a cabal sandbox?
[14:48:43] <geekosaur> you don't any more, modern cabal automatically sandboxes
[14:49:20] <Gurkenglas_> I fear thinking about cabal directly indicates something unusual already? I would install https://docs.haskellstack.org/en/stable/README/
[14:50:05] <byorgey> There's nothing wrong with using cabal directly.  stack is nice too.  It depends on the use case.
[14:50:43] <maerwald> geekosaur: no it doesn't
[14:50:45] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[14:50:48] <lottaquestions_> I am new to this whole thing and my mentor suggested Doom Emacs and nixos
[14:50:59] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[14:51:05] <lottaquestions_> But I want to get to the coding part of the language quickly
[14:51:06] <maerwald> to emulate sandboxes you have to run: cabal --store-dir=$(pwd)/.sandbox build
[14:51:09] <maerwald> for example
[14:51:16] <lottaquestions_> with minimal setup
[14:51:22] <Gurkenglas_> lortabac, singletons only if brave because it's powerful-but-more-scary in its... likelihood to throw me hard-to-interpret errors?
[14:52:10] <Gurkenglas_> lottaquestions_, do you use some sort of IDE, like VSCode, or more something like notepad
[14:52:11] *** Joins: foul_owl (~kerry@23.82.193.78)
[14:52:24] <lottaquestions_> I am an emacs guy
[14:52:39] <lottaquestions_> coming from a CL background
[14:52:58] <lottaquestions_> so was thinking something along the lines of Emacs+Slime but for Haskell
[14:53:01] <yushyin> lottaquestions_: https://cabal.readthedocs.io/en/3.6/getting-started.html
[14:53:24] <Gurkenglas_> Common Lisp? Command Line?
[14:53:33] <lottaquestions_> Common Lisp
[14:55:27] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:adf2:7fd4:5ba2:8512) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:56:01] <Gurkenglas_> uhhh maybe this https://github.com/emacs-lsp/lsp-haskell for the "make emacs a haskell ide"
[14:56:26] <lottaquestions_> yushyin: Thanks. 
[14:56:42] <lottaquestions_> Gurkenglas_: Thanks
[14:57:38] <Gurkenglas_> In singletons, why is Demote Nat Natural rather than Nat?
[15:02:03] *** Joins: jalil (~jalil@pop.92-184-110-73.mobile.abo.orange.fr)
[15:06:27] *** Quits: foul_owl (~kerry@23.82.193.78) (Ping timeout: 256 seconds)
[15:06:27] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[15:06:36] *** Quits: jalil (~jalil@pop.92-184-110-73.mobile.abo.orange.fr) (Ping timeout: 245 seconds)
[15:12:36] <lortabac> Gurkenglas_: because Nat used to be a different type, not very useful at runtime
[15:13:01] <lortabac> but, since base 4.15, type Nat = Natural
[15:13:39] <Gurkenglas_> phew
[15:14:49] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[15:14:52] *** Joins: cynomys (~cynomys@user/cynomys)
[15:15:10] <Gurkenglas_> https://richarde.dev/papers/2012/singletons/paper.pdf <- "Any is an analogue of⊥at the type level" <- huh. I would have identified Any not by "this is in each kind" but by "this is the union of all elements of its kind". does "a is less defined than b" correspond, not to a->b, but to b->a ?
[15:15:43] <dminuoso> Can you delete a package candidate from hackage?
[15:16:16] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[15:16:16] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[15:16:16] *** Joins: wroathe (~wroathe@user/wroathe)
[15:18:02] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[15:18:19] <Gurkenglas_> ...the meaning of "singleton" is coming to me now - this is just for building types with just one element, right? By type-level lambdas, I was looking more for something like being able to say \b a -> b instead of Const b a
[15:18:58] <neverwas> lottaquestions_: re slime, etc. development on haskell-mode seems to be pretty sleepy these days. I've been using this fella's fork, which favors comint for all interactive REPLing: https://github.com/tonyday567/haskell-mode.git (if you're into that sort of thing)
[15:19:17] <dminuoso> Gurkenglas_: Right. The idea of singletons is that if a type has just one value, then you can demote/promote between them.
[15:19:42] <dminuoso> So values can be treated as types and vice-versa
[15:20:18] <dminuoso> In combination with GADTs, pattern matching and some universal quantification you can pull of some fancy tricks with that
[15:20:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[15:21:36] <Gurkenglas_> So if I have (forall f. f a), how would I apply Const b to that to get out b, by using a type-level lambda instead of Const?
[15:21:54] *** Quits: jco (~jco@90-228-194-139-no542.tbcn.telia.com) (Quit: leaving)
[15:22:21] <Gurkenglas_> or perhaps by promoting const to the type level
[15:22:26] <lortabac> Gurkenglas_: with singletons, you can write normal lambdas and the TH magic will generate the appropriate type families and defunctionalized definitions
[15:22:39] <dminuoso> Ah you mean you're looking for the type level isomorphism  `Const B T ~~~ B`?
[15:23:33] <Gurkenglas_> lortabac, oh, i should have noticed that my eyes had passed over enough documentation words to deduce that
[15:23:34] <dminuoso> I dont quite understand the question
[15:25:23] <Gurkenglas_> dminuoso, the question was merely how to construct, say, foo :: (forall f. f a) -> b without the boilerplate of a custom data type. Where Const counts as custom enough ^^
[15:26:04] <Gurkenglas_> You could imagine that the f required for a particular usecase is significantly more complex than Const b. Like half the things edward kmett does
[15:26:05] <dminuoso> Sorry I gotta pass. I cant quite parse the intent from that
[15:26:26] <Gurkenglas_> Fair enough, it's answered.
[15:26:48] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:29:56] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[15:31:19] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[15:31:37] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 240 seconds)
[15:33:13] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[15:37:36] <Gurkenglas_> Oh no, singletons-th can't promote (repeat 2)! i suppose one can promote (2:) and then use its fixed point. Does that solve the entire infinities problem?
[15:38:43] *** Joins: vysn (~vysn@user/vysn)
[15:44:20] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:adf2:7fd4:5ba2:8512)
[15:52:09] *** Quits: yauhsien (~yauhsien@61-231-29-69.dynamic-ip.hinet.net) (Remote host closed the connection)
[15:53:22] *** Joins: yauhsien (~yauhsien@61-231-29-69.dynamic-ip.hinet.net)
[15:58:16] *** Quits: yauhsien (~yauhsien@61-231-29-69.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[16:14:30] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[16:22:42] *** Joins: jalil (~jalil@lstlambert-656-1-270-247.w90-63.abo.wanadoo.fr)
[16:25:57] *** Joins: lavaman (~lavaman@98.38.249.169)
[16:27:44] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[16:27:49] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Quit: Leaving)
[16:28:27] *** Quits: jalil (~jalil@lstlambert-656-1-270-247.w90-63.abo.wanadoo.fr) (Quit: jalil)
[16:28:46] *** Joins: jalil (~jalil@lstlambert-656-1-270-247.w90-63.abo.wanadoo.fr)
[16:28:59] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[16:29:36] *** Joins: jlamothe (~jlamothe@198.251.61.229)
[16:29:49] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:30:26] *** Joins: hololeap (~hololeap@user/hololeap)
[16:34:30] <merijn> Gurkenglas_: <clippy>It looks you're trying to write dependent types, have you considered using Idris? :D </clippy>
[16:35:19] *** Joins: slack1256 (~slack1256@191.125.227.212)
[16:36:49] <Gurkenglas_> merijn, all I wanted was for code to say the likes of "\f d c -> (f d -> c)" instead of "Costar"!
[16:37:49] *** Quits: mvk (~mvk@2607:fea8:5cdc:bf00::5483) (Ping timeout: 240 seconds)
[16:42:17] *** Joins: yauhsien (~yauhsien@61-231-29-69.dynamic-ip.hinet.net)
[16:42:27] *** Quits: Flow (~none@gentoo/developer/flow) (Ping timeout: 250 seconds)
[16:45:02] <geekosaur> "all I wanted was…" is how you end up on the road to hell
[16:48:41] *** Quits: max22- (~maxime@2a01cb088335980044f7b68859555b87.ipv6.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[16:48:54] *** Quits: aforemny (~aforemny@static.248.158.34.188.clients.your-server.de) (Quit: ZNC 1.8.2 - https://znc.in)
[16:51:11] <dminuoso> Okay, so because you dont like Costar, you're now throwing template haskell to generate absurd singletons code at it instead?
[16:51:16] * dminuoso ponders about that
[16:51:27] *** Joins: aforemny (~aforemny@static.248.158.34.188.clients.your-server.de)
[16:54:27] *** Quits: fvr (uid503686@id-503686.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[17:01:17] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[17:02:01] *** Joins: dschrempf (~dominik@mobiledyn-62-240-134-126.mrsn.at)
[17:15:56] *** Joins: max22- (~maxime@2a01cb0883359800886894252541f01e.ipv6.abo.wanadoo.fr)
[17:16:38] <Gurkenglas_> Not Costar in particular. Would you rather see \a b c -> a b c or a named function with that definition?
[17:17:58] *** Joins: o-90 (~o-90@gateway/tor-sasl/o-90)
[17:26:06] *** Joins: Flow (~none@gentoo/developer/flow)
[17:26:20] <lortabac> Gurkenglas_: this has been discussed recently on this channel, apparently what you are looking for is possible in Idris
[17:27:18] <lortabac> however I don't know what the implications are in terms of inference, of code readability etc.
[17:28:49] <lortabac> in Haskell it requires insane complexity, certainly more than Costar or whatever you are trying to avoid
[17:30:27] *** Quits: o-90 (~o-90@gateway/tor-sasl/o-90) (Ping timeout: 276 seconds)
[17:30:45] *** Quits: hughjfchen (~hughjfche@vmi556545.contaboserver.net) (Quit: WeeChat 2.8)
[17:31:34] <lortabac> incidentally, the unsaturated type-families proposal has been accepted, I'm curious to see what will come out of it
[17:32:15] <Gurkenglas_> i can do Stream to, surely this construction has a name https://gist.github.com/Gurkenglas/137914f5790f0e0390c631f9678832da
[17:32:19] <Gurkenglas_> *too
[17:33:08] *** Joins: Guest35 (~Guest35@node-126p.pool-125-24.dynamic.totinternet.net)
[17:35:07] *** Joins: hughjfchen (~hughjfche@vmi556545.contaboserver.net)
[17:35:34] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[17:36:01] *** Joins: slac36430 (~slack1256@186.11.25.57)
[17:36:43] *** Quits: dschrempf (~dominik@mobiledyn-62-240-134-126.mrsn.at) (Quit: WeeChat 3.3)
[17:36:55] *** Joins: hololeap (~hololeap@user/hololeap)
[17:37:57] *** Quits: slack1256 (~slack1256@191.125.227.212) (Ping timeout: 240 seconds)
[17:39:02] <Gurkenglas_> huh, it doesn't fit for "newtype CoStream a = CoStream {runCoStream :: forall f. (f a -> a) -> (f a -> f a) -> f a}" though.
[17:39:15] *** Joins: neverfindme (~hayden@158.123.160.43)
[17:39:20] *** Quits: neverfindme (~hayden@158.123.160.43) (Remote host closed the connection)
[17:44:24] *** Joins: shriekingnoise (~shrieking@201.231.16.156)
[17:44:42] <Guest35> Any help with where to start?? Newbie here..
[17:44:43] <Guest35> Fill in the definition of the following function, using fst and snd:
[17:44:43] <Guest35> f :: (a, b) -> (c, d) -> ((b, d), (a, c))
[17:44:44] <Guest35> f = undefined
[17:46:55] <Gurkenglas_> Guest35, are you able to write any definition of any function?
[17:50:45] <Guest35> yes. basics
[17:51:05] <Guest35> for example. last exercise.
[17:51:06] <Guest35> isPalindrome :: String->IO()
[17:51:06] <Guest35> isPalindrome x =
[17:51:07] <Guest35>     if goodness
[17:51:07] <Guest35>         then print "yes"
[17:51:08] <Guest35>     else
[17:51:08] <Guest35>         print "no"
[17:51:09] <Guest35>     where goodness =
[17:51:09] <Guest35>             x == reverse x
[17:51:11] <Andrew> Don't paste here
[17:51:14] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:2df2:1ec5:8dd3:29f0) (Ping timeout: 260 seconds)
[17:51:15] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[17:51:24] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[17:51:36] <Andrew> Guest35: That's not a function
[17:51:41] <Andrew> It's an IO Monad
[17:51:49] <Gurkenglas_> yes it's a function
[17:52:03] <Andrew> Oh, my bad.
[17:52:10] <Andrew> lol silly me
[17:52:16] <Andrew>  
[17:52:30] <Gurkenglas_> And "an IO Monad" is, uh, not how those words are used :D
[17:52:40] <Andrew> f (a, b) (c, d) = ((b, d), (a, c))?
[17:52:49] <Andrew> It returns an IO monad
[17:52:54] <Andrew> Or, it evaluates to one
[17:52:56] <Andrew> Better
[17:53:03] *** Quits: rusrushal13 (~rusrushal@2405:201:7003:8952:a27c:c592:8e19:8656) (Ping timeout: 256 seconds)
[17:53:07] <xsperry> not sure if types were included in the excercise, but I'd make isPalindrome `String -> Bool' instead
[17:53:50] <Gurkenglas_> IO is a monad, IO isn't an adjective about monads.
[17:53:56] *** Joins: Erutuon (~Erutuon@user/erutuon)
[17:54:01] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[17:54:17] <Guest35> ok.
[17:54:23] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[17:54:26] <Guest35> any help on where to start
[17:54:41] <Guest35> and if i dont paste here, then where
[17:54:58] <Gurkenglas_> Guest35, do you know what the type signature "f :: (a, b) -> (c, d) -> ((b, d), (a, c))" is supposed to tell you?
[17:55:42] <Guest35> takes a tuple and a tuple and maps it to a tuple?
[17:56:10] <Gurkenglas_> Sure. Can you write a definition for "g :: a -> b -> (b,a)"?
[17:56:45] *** Joins: ystael (~ystael@user/ystael)
[17:57:23] *** Joins: Ariakenom (~Ariakenom@h-82-196-111-63.NA.cust.bahnhof.se)
[17:57:50] *** Joins: akegalj (~akegalj@141-136-168-212.dsl.iskon.hr)
[17:58:37] *** Quits: yauhsien (~yauhsien@61-231-29-69.dynamic-ip.hinet.net) (Remote host closed the connection)
[17:58:53] <merijn> Gurkenglas_: Here, save yourself the trouble trying to articulate the thing you're trying to articulate: https://blog.jle.im/entry/io-monad-considered-harmful.html
[17:59:06] <merijn> Andrew: See above ;)
[17:59:28] *** Joins: yauhsien (~yauhsien@61-231-29-69.dynamic-ip.hinet.net)
[17:59:49] *** Quits: slac36430 (~slack1256@186.11.25.57) (Ping timeout: 250 seconds)
[18:00:11] *** Joins: slack1256 (~slack1256@191.125.227.212)
[18:00:22] <Andrew> :(
[18:00:33] <Andrew> I use them a lot
[18:00:43] *** Joins: haskell_ (~haskell@65-102-32-32.ptld.qwest.net)
[18:01:01] <Andrew> Gurkenglas_: Yeah? IO is an monad, so I call it a IO monad
[18:01:04] *** Quits: haskell_ (~haskell@65-102-32-32.ptld.qwest.net) (Remote host closed the connection)
[18:01:05] <Andrew> Whatever, English
[18:01:22] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:01:22] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:01:22] *** Joins: wroathe (~wroathe@user/wroathe)
[18:01:23] <merijn> Andrew: That blog posts clarifies why that's not great usage
[18:01:37] <Andrew> sure
[18:01:50] <geekosaur> imo it misleads people into thinking the Monad is what makes IO special, when IO is special because it is IO
[18:01:58] <geekosaur> all the Monad part does is enforce sequencing
[18:02:15] <Andrew> Well, yeah
[18:02:36] <Guest35> g (a,b) = (b,a)?
[18:02:36] <Gurkenglas_> merijn, not what I meant - i wouldn't have complained if he said that it has something to do with the IO monad, but using "an IO monad" to refer to a value of type `IO ()` confuses the fact that the thing that's supposed to have something to do with the word "monad" there is the one, the only, "IO"
[18:03:05] <geekosaur> Guest35, almost but not quite.
[18:03:18] <Gurkenglas_> Guest35, almost. That's (a,b) -> (b,a)
[18:03:40] <Andrew> g a b = (b,a)
[18:03:44] <Gurkenglas_> as in, an implementation of g :: (a,b) -> (b,a)
[18:04:02] *** Quits: yauhsien (~yauhsien@61-231-29-69.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[18:04:18] <Andrew> Guest35: (Fake) multiple parameters aren't tuples
[18:04:43] <Gurkenglas_> Andrew, don't spoil the puzzle :D  though it's not much of a puzzle, Guest isn't supposed to have to guess the *syntax* of the language.
[18:04:53] <Andrew> ... If you put them in tuple-like things that's gonna look weird once you have currying.
[18:05:19] <Andrew> My fault :D
[18:05:29] <Guest35> hmmm.
[18:06:07] <Guest35> so i have no coding experience. just starting reading and trying out exercises the last 3 days.
[18:06:16] <Guest35> dont get too far ahead of me
[18:06:47] <Andrew> Guest35: It's okay :)
[18:07:00] <merijn> Gurkenglas_: That's literally what the blog is about, though ;)
[18:07:10] <Andrew> Guest35: it's also good to have Haskell as a first language, because you won't be brainwashed by the imperative stuff lol
[18:07:16] <geekosaur> this is a place where you'reliableto make mistakes because Haskell is unlike most other languages in this regard
[18:07:18] <Gurkenglas_> Guest35, the implementation of "f :: (a, b) -> (c, d) -> ((b, d), (a, c))" is going to start with "f ab cd = " this time, and you are supposed to use the functions "fst :: (x,y) -> x" and "snd :: (x,y) -> y". Can you assemble the part of f's implementation to the right of =?
[18:07:25] <Andrew> (Haskell is a functional language)
[18:08:01] <Andrew> Oh, silly me, I didn't use fst and stuff
[18:08:05] <Andrew> I always use pattern matching
[18:09:13] <Guest35> Gurkenglas_:  ill try. so what is the f ab cd telling me? same as "f (a,b) (c,d)" just short notation?
[18:09:20] <Gurkenglas_> Me too, let's hope the exercises he's doing won't instill the habit not to pattern-match in him.
[18:09:46] *** Quits: Erutuon (~Erutuon@user/erutuon) (Quit: WeeChat 2.8)
[18:10:38] <Gurkenglas_> Guest35, "f ab cd = " makes it so that instead of having values of type a and b to work with, you only have a value ab of type (a,b). This is worse, since you plan to use a and b for other things. So you'll have to use fst and snd to get them out of the ab.
[18:10:45] <Guest35> im working from the text. Haskell Programming From First Principles
[18:10:45] <Guest35> by Christopher Allen https://www.goodreads.com/en/book/show/25587599-haskell-programming-from-first-principles
[18:11:17] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[18:11:34] <Andrew> I think that book is a good one
[18:13:33] <Gurkenglas_> merijn, I disagree! The blog tells people not to mention the word monad to newbies, my nitpick was that the usage of the term monad was technically incorrect.
[18:14:44] * Andrew agrees with Gurkenglas_ on this point
[18:19:36] <Guest35> ok just showing my thinking. i know this is wrong. but i want to type.  g :: (a,b) -> (b,a)     g ab = snd g, fst g
[18:19:52] <ski> you're almost there
[18:19:53] <Andrew> tuples?
[18:19:58] <Andrew> They need (parens)
[18:20:13] <Andrew> g a b = (snd g, fst g)
[18:20:40] <Gurkenglas_> Andrew, typos.
[18:20:44] <ski> what is `g' in `snd g' ?
[18:21:18] <Andrew> xD
[18:21:35] <Andrew> Wasn't paying attentions
[18:21:47] <Andrew> ~~you might do that with lisp macros~~
[18:21:52] *** Joins: jao (~jao@66.63.167.168)
[18:22:06] *** Joins: fef (~thedawn@user/thedawn)
[18:22:13] * ski looks at Guest35
[18:23:47] <Guest35> ab?
[18:25:06] <ski> what is `ab' ?
[18:26:21] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[18:26:52] *** Joins: slack1135 (~slack1256@186.11.25.57)
[18:27:15] <Guest35> the parameters of g?
[18:27:27] <akhesacaro> Gurkenglas_: With my student I use the word "Chainable" instead of Monad :p
[18:27:36] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[18:27:51] *** Joins: pavonia (~user@user/siracusa)
[18:28:41] <Gurkenglas_> akhesacaro, you misunderstand. I would also complain if someone called "print 12" "an IO Chainable"
[18:28:59] <janus> i think ab is a value of type (a,b) that Gurkenglas_ describes
[18:29:19] *** Quits: akegalj (~akegalj@141-136-168-212.dsl.iskon.hr) (Quit: leaving)
[18:29:20] *** Quits: slack1256 (~slack1256@191.125.227.212) (Ping timeout: 252 seconds)
[18:30:58] <Gurkenglas_> Maybe it would have been prudent not to use exactly the same names for a variable and its type ._.
[18:30:59] <ski> Guest35 : that's what `ab' is, in the context of `g ab'. it's what rôle it fills, in this context. it's not what it is, in itself
[18:31:03] <merijn> akhesacaro: The thing is that "being a Monad" is a property of a type (like 'IO') it doesn't say anything useful about *values*
[18:31:40] <merijn> akhesacaro: getLine is "an IO action" monads play no role there
[18:31:45] <ski> Guest35 : `ab' is a pair
[18:31:50] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:34:06] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:34:16] <Gurkenglas_> merijn, IO isn't a type, types are that which has kind * :P. IO has kind *->*
[18:34:39] * ski glances around nervously
[18:34:46] <Guest35> let me ask the original q again. i think maybe my goal isnt obvious anymore.
[18:34:46] <Guest35> Fill in the definition of the following function, using fst and snd:
[18:34:47] <Guest35> f :: (a, b) -> (c, d) -> ((b, d), (a, c))
[18:34:47] <Guest35> f =
[18:35:24] <ski> so, what is *your* question, at the moment ?
[18:35:49] <Gurkenglas_> Guest35, Note that you are also supposed to write something to the left of that =
[18:35:52] <Guest35> any hints without giving it away lol
[18:36:00] * ski also agrees with `IO' being a type
[18:36:14] <ski> Guest35 : which was your latest attempt ?
[18:36:44] <Guest35> f :: (a,b)->(c,d)->((b,d),(a,c))
[18:36:45] <Guest35> f (a, b) (c, d) = ((b, d), (a, c))
[18:36:50] <Guest35> but this doesnt use fst or snd
[18:36:53] <ski> yea
[18:37:12] <ski> i didn't see you finish the `g :: (a,b) -> (b,a)' one
[18:37:17] <ski> did you ?
[18:37:28] <Gurkenglas_> Huh, I didn't know people disagree that * is the kind of types. I suppose it's good to have a name for the union of those kinds.
[18:37:43] <Gurkenglas_> ski, are constraints also types?
[18:38:14] *** Quits: jao (~jao@66.63.167.168) (Remote host closed the connection)
[18:38:24] <akhesacaro> Guest35, you've deconstructed the tuple too much
[18:38:38] <ski> Gurkenglas_ : sure, at least with `ConstraintKinds'
[18:38:42] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[18:38:43] <geekosaur> the problem with * being the kind of types is that it takes away * as a type operator, so people prefer Type these days
[18:39:07] *** Joins: jao (~jao@66.63.167.168)
[18:39:34] <Gurkenglas_> geekosaur, uh. Does Type contain IO?
[18:39:38] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[18:39:52] <geekosaur> no,IO is Type -> Type
[18:39:56] <merijn> Gurkenglas_: Hard disagree
[18:40:00] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:40:00] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:40:00] *** Joins: wroathe (~wroathe@user/wroathe)
[18:40:04] <merijn> Gurkenglas_: IO very much is a type
[18:40:04] <ski> Gurkenglas_ : anyway, people used to say that `Either String' is not a type, but a type constructor. hence `Functor' is not a type class, but a constructor class. however, i think it's more useful to regard it as a type (and i use "type constructor" to not include `Either String')
[18:40:15] <Guest35> no.
[18:40:28] <merijn> I don't acknowledge Type as a thing anyway, because TypeInType is lunacy
[18:40:29] <geekosaur> guess there's still terminology disagreement
[18:40:31] <Guest35> bc im stuck lol
[18:40:31] *** Joins: slack1256 (~slack1256@191.125.227.212)
[18:41:04] <ski> Guest35 : it might help you if you finish this `g' first
[18:41:09] <ski> last i saw was
[18:41:17] <ski> <Guest35> ok just showing my thinking. i know this is wrong. but i want to type.  g :: (a,b) -> (b,a)     g ab = snd g, fst g
[18:41:28] <ski> which is close but no chocolate yet
[18:41:45] <Guest35> but i want chocolate
[18:41:50] * ski smile
[18:42:11] <ski> <ski> what is `g' in `snd g' ?
[18:42:21] <ski> Guest35 : what about this question ^ ?
[18:42:24] <Guest35> i need a where statement?  where g =
[18:42:36] <ski> no, you don't need that here
[18:42:41] <akhesacaro> Guest35 no need a where here :p
[18:42:44] <merijn> Gurkenglas_: Consider this: Would you argue that 'f' (with "f :: Foo -> Bar") is not a value, because 'bar' (with 'bar :: Bar') is a value?
[18:42:55] *** Quits: slack1135 (~slack1256@186.11.25.57) (Ping timeout: 256 seconds)
[18:43:07] <Gurkenglas_> I'm willing to accept that we call IO a type, I'd also be willing to say Type instead of *, but both of those doesn't work, there needs to be some name for * is
[18:43:20] <Gurkenglas_> -is
[18:43:35] * ski tends to call it "concrete type" .. but some people don't like that term
[18:43:41] <merijn> Like me ;)
[18:43:44] * ski smiles
[18:44:18] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:44:22] <merijn> tbh, I dislike the use of Type and find the lack of * as type level operator acceptable, so I will just be a Luddite and stick to *
[18:44:44] <ski> o/
[18:45:10] <merijn> And much like Luddites are portrayed as "backwards" while really having pretty sensible ideas/motivations for their behaviour, so do I ;)
[18:45:33] <Gurkenglas_> just like presheaves
[18:45:48] * ski looks at Guest35
[18:45:54] <akhesacaro> Guest35, if the functions _fst_ and _snd_ take a tuple as parameter, you need to not deconstruct it and put it into a variable to pass it to your functions.
[18:46:47] <Guest35> what would it look like in my terminal. g "high" 5  would return (5, "high")
[18:47:05] <ski>   g ("high,5)  -- rather
[18:47:36] <Guest35> g("high",5)?
[18:47:39] <Ariakenom> I don't care about using up * as an operator. I think * is a bad name though.
[18:48:08] <ski> i prefer it with a space, `g ("high",5)' . you're not passing two parameters to `g', you're passing a single one, which happens to be a pair
[18:48:22] <ski> so, for that call, `ab' would become the pair `("high",5)'
[18:48:30] <merijn> Ariakenom: Why? Most of the literature uses it
[18:48:50] <Gurkenglas_> Ariakenom, what pair of names do you suggest for * and the thing that both Int and IO are?
[18:49:18] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:49:34] <ski> Gurkenglas_ : now, for `g ab = snd g, fst g', if `ab' becomes `("high",5)', how could the result (which you've written as `snd g, fst g') become the pair `(5,"high")' ?
[18:49:39] <ski> er, Guest35 ^
[18:50:40] * Gurkenglas_ .oO(type-level value)
[18:51:10] <merijn> Gurkenglas_: IO isn't *, though :p It's * -> * :p
[18:51:14] *** Joins: k8yun (~k8yun@user/k8yun)
[18:51:32] <Gurkenglas_> merijn, I didn't claim otherwise, i asked for a pair of names for those two separate concepts
[18:52:15] <Ariakenom> I just don't like that it isn't alphanumerical. Star would be fine by me. 
[18:52:19] <merijn> If you wanna solve the hierarchy problem, you should just go the stratification solution from Extended CoC (like Coq and (I think?) Agda use)
[18:52:34] <merijn> TypeInType is a stupid shortcut that confuses human brains
[18:52:40] <merijn> At least mine :p
[18:53:07] * geekosaur wonders how Ωmega solves this
[18:53:08] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[18:53:24] <Ariakenom> alphanumerical isn't quite right but you get the point. not what would be an operator on the value level
[18:53:33] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:30cc:b923:a3cb:c39c)
[18:53:36] <merijn> Easy, unicode star :p
[18:53:53] <Ariakenom> -.-
[18:54:02] * ski uses a five-pointed star, in hand-writing
[18:54:41] <Gurkenglas_> use x >:D
[18:54:59] <Ariakenom> I don't dislike type in type. Can I get an example for when it's terrible?
[18:55:15] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:55:46] <merijn> Ariakenom: It makes reading type level stuff very confusing because it ends up all being Type
[18:55:54] <Gurkenglas_> Ariakenom, the basic argument against is russel's paradox
[18:56:15] <merijn> Ariakenom: The "proper" solution is to (instead of collapsing everything into types) is to have an infinite hierarchy of types
[18:56:36] *** Joins: yauhsien (~yauhsien@61-231-29-69.dynamic-ip.hinet.net)
[18:57:37] * ski idly wonders how Guest35 is faring with the problem
[18:57:38] <merijn> Ariakenom: So values have types, the "type" of Type_0, then an Type_1 is "all of Type_0 *plus* things that include Type_0 itself)
[18:57:39] <Gurkenglas_> (i'd guess you can also prevent russel's paradox by not letting people define subtypes via predicates)
[18:57:49] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:30cc:b923:a3cb:c39c) (Ping timeout: 240 seconds)
[18:57:55] <merijn> and Type_2 is Type_1 *plus* all things using Type_1 itself
[18:58:09] <Gurkenglas_> merijn, why plus instead of making them all disjoint?
[18:58:11] <Ariakenom> example pls
[18:58:52] <merijn> Ariakenom: ok, so suppose we have "data Foo (f :: * -> *) = ..."
[18:59:01] <ski> well, one might want to be able to say things like `Integer -> Type_0'
[18:59:15] <merijn> Now, say we use Type_0 instead of *
[18:59:35] <merijn> so "data Foo (f :: Type_0 -> Type_0)"
[18:59:43] <merijn> With "Int :: Type_0"
[19:00:38] <merijn> So "Foo :: (Type_0 -> Type_0) -> Type_0"
[19:00:57] <merijn> But "(Type_0 -> Type_0) -> Type_0 :: Type_1"
[19:01:19] <merijn> Gurkenglas_: What ski said, yes
[19:01:35] <janus> will haskell get a universe hierarchy too?
[19:02:01] <Gurkenglas_> ski, then you should work with a surjection Type_1 -> Type_0, right? To forget the Type_1 structure of Tupe_0 so you can let it play in the Type_0 pool with Integer
[19:03:07] <ski> i don't see how that surjection would work
[19:03:10] <merijn> janus: No
[19:03:11] <Gurkenglas_> rather than an injection Type_0 -> Type_1
[19:03:23] <ski> what would that surjection, applied to `Type_0', yield ?
[19:03:33] <ski> yea, that's better, then
[19:03:38] <janus> merijn: what you're talking about, is a universe hierarchy, right? why would haskell not get one if it gets DT?
[19:04:19] <ski> Gurkenglas_ : so one can either use such implicit injections, or use cumulative hierarchy
[19:04:19] <merijn> janus: Because GHC currently has TypeInType instead of universe hierarchy
[19:04:24] <merijn> janus: aka the hacky solution
[19:04:36] <janus> ah, but if it's hacky, surely they will get rid of it
[19:04:38] <merijn> janus: And it makes no sense to build that if you plan to do it properly later
[19:04:44] <janus> oh my
[19:04:57] <Gurkenglas_> ski, it would yield the type_0 of type_0s, which has all the objects in it and none of the functions
[19:04:59] <merijn> janus: Doubt it, it's not like the universe approach is a new solution
[19:05:05] <geekosaur> thing also is, ghc used to do it properly
[19:05:07] <merijn> janus: Also, depends on how you view "Haskell"
[19:05:16] <geekosaur> kinds were a thing but not conflated with types
[19:05:18] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:a89e:b347:cccb:c7e5)
[19:05:21] <janus> merijn: haskell is coq, but different
[19:05:23] <merijn> janus: The odds of *Haskell* getting dependent types are near 0
[19:05:28] <geekosaur> and sorts were at least conceptually a thing
[19:05:39] <Gurkenglas_> (or am i wrongly imagining the analogy Type_0 vs. Set as Type_1 vs. Cat?)
[19:05:40] <ski> Gurkenglas_ : i don't follow what that means
[19:05:42] <merijn> janus: GHC *may* get Dependent Types (although it's debatable whether that's a good thing)
[19:05:44] <geekosaur> (they kept changing though)
[19:05:51] <ski> (are you still talking about the surjection ?)
[19:06:03] <geekosaur> at one point there was BOX
[19:06:07] *** Quits: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com) (Remote host closed the connection)
[19:06:09] <merijn> janus: GHC uses to have types :: kinds, kinds :: sort (but only one sort BOX)
[19:06:28] <merijn> janus: TypeInType was introduced to eliminate that to make room for various dependent Haskell experiments
[19:07:03] <janus> but maybe the experiements will fail and they will decide the universe hierarchy is the best way to go?
[19:07:23] <Gurkenglas_> geekosaur, why should ghc treat types differently from kinds at all? of course one needs to track which one one currently is looking at to prevent paradox, but shouldnt one be able to use all the same code in each case
[19:07:49] <geekosaur> "track which one one currently is looking at"
[19:08:17] <geekosaur> ghc even conflates to some extent values with types by not requiring ticks on promoted DataKinda
[19:08:21] <geekosaur> *DataKinds
[19:08:40] <geekosaur> it's *really* confusing for someone trying to keep track of what level each thing is
[19:08:56] <Ariakenom> hm was the example finished?
[19:08:58] <Gurkenglas_> for tracking, i'd think all you need to do is have an integer attached that says what level of the hierarchy this is
[19:09:05] *** Quits: Guest35 (~Guest35@node-126p.pool-125-24.dynamic.totinternet.net) (Quit: Client closed)
[19:09:37] <janus> geekosaur: there is -Wunticked-promoted-constructors and it is part of -Wall
[19:09:48] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[19:09:58] <geekosaur> we had someone in here yesterday who got caught by this, they were working with a promoted type but kept trying to treat its promoted type constructors as data constructors and couldn't understand ghc's error messages
[19:10:08] <merijn> Gurkenglas_: Yes, which is exactly what the *right* solution is, in a mathematical sense
[19:10:14] <merijn> Gurkenglas_: But that's not what GHC does
[19:11:46] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:11:52] *** Joins: sleblanc (~sleblanc@user/sleblanc)
[19:12:34] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:13:16] <Gurkenglas_> and then there's the language Haskell_o for every ordinal number o, and GHC_{o+1} can't compile itself but can compile GHC_o. And then eventually we run out of descent, and someone panics and tries to use that it works for all the ordinals anyway, and then we're back to inconsistency
[19:13:48] *** Joins: tdammers (~tdammers@77.109.72.177.res.static.edpnet.net)
[19:15:47] <Gurkenglas_> ski, Type_0 would presumably be mapped to a Type_0 that contains such values as String, Int, [a] for every element, and so on
[19:17:03] *** Joins: mvk (~mvk@2607:fea8:5cdc:bf00::5483)
[19:17:53] <Gurkenglas_> Ohh, you presumably want to then use the outputs of Integer -> Type_0 as types. Yeah, that'll need the injection.
[19:19:12] <Gurkenglas_> merijn, sounds easy to go from TypeInType to that *right* solution, so we should promote TypeInType at the expense of all the code duplication, right?
[19:19:39] <Gurkenglas_> And then eventually someone adds ordinals with a 7-line patch
[19:20:56] *** Joins: shapr` (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[19:22:17] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[19:22:53] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[19:25:03] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:25:18] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:25:24] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:25:38] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:25:46] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:26:02] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:26:08] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:26:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[19:26:23] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:26:30] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:26:44] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:26:52] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:27:07] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:27:13] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:27:27] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:27:35] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:27:48] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:27:56] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:28:11] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:28:18] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:28:32] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:28:39] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:28:54] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:29:02] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:29:17] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:29:24] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:29:38] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:29:46] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:30:01] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:30:08] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:30:24] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:30:31] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:30:45] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:30:52] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:31:06] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:31:14] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:31:30] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:31:36] <[exa]> lavaman: your connection seems to be breaking
[19:31:37] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:31:52] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:32:00] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:32:01] *** Joins: __monty__ (~toonn@user/toonn)
[19:32:01] *** ChanServ sets mode: +o geekosaur
[19:32:11] *** Joins: cstml (~cstml@user/cstml)
[19:32:15] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:32:18] *** geekosaur sets mode: +b *!*@98.38.249.169
[19:32:22] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:33:51] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[19:34:41] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:cb78:26c4:6167:fc4) (Quit: WeeChat 2.8)
[19:35:01] *** Joins: wroathe (~wroathe@user/wroathe)
[19:36:01] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:39:27] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[19:39:50] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[19:44:08] *** Quits: xff0x (~xff0x@2001:1a81:5384:400:cf7c:5041:a517:d608) (Ping timeout: 252 seconds)
[19:44:51] *** Joins: xff0x (~xff0x@2001:1a81:5384:400:77b6:98fb:61ba:7d90)
[19:47:24] *** ChanServ sets mode: +o litharge
[19:47:25] *** litharge sets mode: -bo *!*@98.38.249.169 litharge
[19:47:57] *** Quits: AlexisTP (~AlexisTP@92.57.44.63) (Ping timeout: 240 seconds)
[19:49:19] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[19:50:34] *** Quits: mbuf (~Shakthi@171.61.235.32) (Quit: Leaving)
[19:51:03] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[19:55:27] *** Quits: jgeerds (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 256 seconds)
[19:58:45] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[20:01:03] *** Quits: biberu (~biberu@user/biberu) (Read error: Connection reset by peer)
[20:01:16] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:04:51] *** Quits: caubert_ (~caubert@136.244.111.235) (Quit: WeeChat 3.4)
[20:05:00] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:30cc:b923:a3cb:c39c)
[20:05:05] *** Joins: caubert (~caubert@136.244.111.235)
[20:05:30] *** Quits: son0p (~ff@181.136.122.143) (Remote host closed the connection)
[20:14:11] *** Joins: jinsun__ (~quassel@user/jinsun)
[20:14:43] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 256 seconds)
[20:17:14] *** Joins: slac66959 (~slack1256@186.11.25.249)
[20:18:09] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[20:19:10] *** Quits: ph88 (~ph88@2a02:8109:9e00:71d0:713a:ad1d:dd0:bdcc) (Remote host closed the connection)
[20:19:17] *** Quits: slack1256 (~slack1256@191.125.227.212) (Ping timeout: 240 seconds)
[20:19:28] *** Joins: ph88 (~ph88@2a02:8109:9e00:71d0:980:dccb:621a:6731)
[20:19:32] *** Joins: zebrag (~chris@user/zebrag)
[20:19:56] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 245 seconds)
[20:22:42] *** Joins: Akiva (~Akiva@user/Akiva)
[20:26:04] *** Joins: safinaskar (~quassel@109.252.91.116)
[20:26:44] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[20:27:39] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:30cc:b923:a3cb:c39c) (Remote host closed the connection)
[20:27:42] <justsomeguy> What's an easy way to pretty print a list?
[20:28:11] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[20:28:31] <safinaskar> is there some tool in wide use for sharing reproducible environments? i. e. i want to write some code snippet, share it on IRC or some bug report and be sure that receiver will run this code in the same environment with same tools installed. Theoretically, I can use docker for this. I. e. write dockerfile, paste it to pastebin and share in irc. But it seems nobody does this. Why? People use some other tool?
[20:28:52] <safinaskar> justsomeguy: "show"?
[20:29:07] <c_wraith> safinaskar: in theory, nix does that
[20:30:20] <[exa]> justsomeguy: how much pretty do you want it? `pretty` package does it nice, there's even generics support so that you don't need to instance everything
[20:30:35] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[20:30:36] *** Joins: biberu (~biberu@user/biberu)
[20:31:08] <[exa]> safinaskar: most code snippets are either sufficiently reproducible by itself, or fixed when the person tries to create the reproducible environment.
[20:31:48] <justsomeguy> It will be nice if I can control the layout a little - like setting the max width so it fits in my terminal emulator, and if the list elements can be aligned. I'm looking at the docs for pretty now...
[20:31:55] <geekosaur> there are online environments like repl.it
[20:32:14] <DigitalKiwi> doesn't repl.it use nix or am i thinking of something else
[20:32:31] * DigitalKiwi saw a tweet a few days ago
[20:32:46] <geekosaur> or godbolt.org
[20:32:58] <geekosaur> they generally require accounts though
[20:33:08] <safinaskar> ok, thanks
[20:34:19] <DigitalKiwi> https://gist.github.com/Kiwi/ffc08bffb15798dc4b1ec2a1c47c6191#file-program-cabal-hs
[20:34:22] <geekosaur> docker's really heavyweight for this kind of thing. a nix expression would probably work
[20:34:44] <DigitalKiwi> this can be modified to use a specific channel or pinned
[20:36:11] <DigitalKiwi> https://gist.github.com/Kiwi/92415b46d58bfce34f7773944b6dcc67 early version of my paste client when it was only one file lol
[20:37:31] *** Quits: jalil (~jalil@lstlambert-656-1-270-247.w90-63.abo.wanadoo.fr) (Quit: jalil)
[20:37:51] *** Quits: jinsun__ (~quassel@user/jinsun) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:38:42] <DigitalKiwi> https://mostlyabsurd.com/files/snake_ToTitle
[20:39:09] <DigitalKiwi> https://dpaste.com/3CZMFPQH7
[20:41:17] *** Joins: jinsun (~quassel@user/jinsun)
[20:43:16] *** Joins: zopsi (~zopsi@104-237-136-227.ip.linodeusercontent.com)
[20:44:15] *** Quits: MajorBiscuit (~MajorBisc@c-001-013-035.client.tudelft.eduvpn.nl) (Ping timeout: 250 seconds)
[20:47:37] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 240 seconds)
[20:47:48] *** Joins: whound (~dust@2409:4071:d13:8d27:350a:4519:8215:43f8)
[20:51:09] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[20:53:30] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[20:55:07] *** Joins: jgeerds (~jgeerds@55d4a547.access.ecotel.net)
[20:59:14] *** Quits: dajoer (~david@user/gvx) (Quit: leaving)
[21:01:01] *** Joins: reactormonk[m] (~reactormo@2001:470:69fc:105::3c24)
[21:02:26] <reactormonk[m]> I have a pretty standard query `select ( id, data, terms ) from config where id = ?` I run via postgresql-simple, where id is a uuid - however, when I try to extract the data, I get Incompatible {errSQLType = "record", errSQLTableOid = Nothing, errSQLField = "row", errHaskellType = "Text", errMessage = "types incompatible"}
[21:03:57] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[21:04:01] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Ping timeout: 256 seconds)
[21:04:29] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:89bd:bcbb:df15:8e9a)
[21:04:35] *** Joins: Nendi (~Nendi@195.224.166.74)
[21:04:36] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[21:04:48] *** Joins: jalil (~jalil@2a01:e0a:277:4100:df65:87a3:4ed7:bb61)
[21:05:19] <safinaskar> how to make singletons work with "String"s?
[21:05:44] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[21:05:45] <safinaskar> i do "singletons [d|data X = Y String]" and it doesn't work
[21:05:59] *** Joins: econo (uid147250@user/econo)
[21:06:48] <Nendi> https://stackoverflow.com/questions/31875/is-there-a-simple-elegant-way-to-define-singletons check this one should solve your problem
[21:09:43] <safinaskar> Nendi: ?!?!?!? you give me link about python
[21:09:57] <safinaskar> Nendi: my question is about haskell. and about haskell's lib "singletons"
[21:10:24] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:68f0:cbbd:5b77:19e4)
[21:10:30] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[21:12:51] *** Quits: alp (~alp@user/alp) (Ping timeout: 250 seconds)
[21:13:04] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[21:14:35] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:14:35] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:14:35] *** Joins: wroathe (~wroathe@user/wroathe)
[21:14:57] *** Joins: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[21:16:48] *** Parts: chir4gm (~chirag@user/chir4gm) (WeeChat 3.4)
[21:18:25] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[21:19:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[21:19:25] *** Joins: Topsi (~Tobias@dyndsl-091-249-082-173.ewe-ip-backbone.de)
[21:19:31] <janus> justsomeguy: there are multiple prettyprinter libraries
[21:19:34] <janus> @package pretty
[21:19:34] <lambdabot> https://hackage.haskell.org/package/pretty
[21:20:00] <Cheery> are there examples of implementing larger subsets of haskell?
[21:20:05] <janus> justsomeguy: that package is the 'official' one, i guess
[21:20:20] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:dc0:c5aa:294f:7621) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:20:26] <janus> but more people are using
[21:20:27] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 256 seconds)
[21:20:32] <janus> @package prettyprinter
[21:20:32] <lambdabot> https://hackage.haskell.org/package/prettyprinter
[21:20:40] <Cheery> I find difficulties with just data/codata.
[21:21:28] <awpr> ooh someone asked about pretty-printing?  I second prettyprinter as a nicer rendering engine, but I have my own entry for the typeclass carrying pretty-printability-as-Haskell-syntax: https://hackage.haskell.org/package/portray
[21:21:29] <tomsmeding> Cheery: not sure if this is what you're looking for, but this exists https://github.com/Helium4Haskell/helium
[21:23:32] *** Quits: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 256 seconds)
[21:23:41] <awpr> (I'm not sure `pretty` is "official", but it is older and more venerable, and I think bundled with GHC.  but that doesn't necessarily mean it's the one true package, just that GHC uses it)
[21:24:32] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[21:24:33] <janus> but it is in the official haskell org on github
[21:24:50] <geekosaur> that's because ghc usesit
[21:25:03] <janus> would be weird if https://github.com/haskell is official but the projects within are not
[21:25:06] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[21:25:17] <awpr> well, what does it mean for a package to be "official"?
[21:26:22] <Cheery> tomsmeding: I feel I'd need a paper that describes how to implement things. :)
[21:26:44] *** Quits: kuribas (~user@ptr-25vy0i7qdirbfvrk27x.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
[21:26:51] <geekosaur> parsec's mirrored there too, I think, because of cabal. but attoparsec and megaparsec get more use
[21:26:56] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:30cc:b923:a3cb:c39c)
[21:26:57] <Cheery> for instance, operational semantics for CHR were real useful.
[21:27:20] <janus> geekosaur: attoparsec is in there too https://github.com/haskell/attoparsec
[21:27:59] <awpr> being in the Haskell org certainly does give it some level of trustworthiness, but I don't think that constitutes an official stance by the Haskell org that it should be preferred over alternatives
[21:28:33] <janus> what is 'the Haskell org'?
[21:28:37] <sclv> libraries in the github haskell organization are those that have been passed over to general maintainership by their authors
[21:29:02] <sclv> its status is that it hosts github repos for widely used packages whose maintainers want to share ownership broadly
[21:29:27] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[21:29:37] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[21:29:42] <janus> but why was tasty made instead of getting updated at https://github.com/haskell/test-framework then?
[21:29:45] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:68f0:cbbd:5b77:19e4) (Remote host closed the connection)
[21:31:57] <geekosaur> [09 17:54:33] <janus> but it is in the official haskell org on github
[21:32:03] <geekosaur> [09 17:58:33] <janus> what is 'the Haskell org'?
[21:32:06] <geekosaur> make up your mind
[21:32:56] <janus> those are not the same 'org', the first usage of org is in the context of github. the second reference was not made by me and doesn't seem like it referred to github
[21:33:26] <awpr> right, I meant whoever owns that GitHub org.  I don't actually know, perhaps the HF or the GHC maintainers
[21:33:48] <EvanR> the haskell shadow council
[21:34:46] *** Quits: Gurkenglas_ (~Guest22@dslb-188-096-121-068.188.096.pools.vodafone-ip.de) (Quit: Client closed)
[21:37:58] <awpr> anyway this is kind of going off course, so let's re-center: `pretty` and `prettyprinter` both exist, `pretty` is older, used by GHC, and maintained in the GH Haskell org; `prettyprinter` is newer, a bit different, also widely used, and has coloring support
[21:39:16] <sclv> tasty was made because someone thought they could do better than test-framework
[21:39:37] *** Quits: Nendi (~Nendi@195.224.166.74) (Remote host closed the connection)
[21:40:05] <sclv> also i believe test-framework was transferred to the github org just for maintenance purposes well after tasty was made
[21:41:54] <janus> but who maintains test-framework? because the latest release had 8 revisions. if somebody maintained it, surely it wouldn't get so many revisions, but would get a new version.
[21:42:11] <janus> it says libraries list, but is that really true?
[21:42:25] <awpr> revisions /= unmaintained
[21:43:17] <awpr> if a package just needs a version bounds bump, it needs a revision and not a new version.  package maintainers can and do make metadata revisions to their own packages
[21:44:19] <janus> but also PRs like this sit unreviewed: https://github.com/haskell/test-framework/pull/51
[21:44:57] <awpr> ah, that does seem like a maintainership question
[21:45:01] <sm> it's dead (sleeping) I think
[21:49:17] *** Quits: whound (~dust@2409:4071:d13:8d27:350a:4519:8215:43f8) (Quit: Konversation terminated!)
[21:49:22] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[21:51:23] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:a85e:5217:60c2:bcc7) (Ping timeout: 256 seconds)
[21:55:45] *** Joins: f-a (f2a@f2a.jujube.ircnow.org)
[21:57:47] *** Parts: safinaskar (~quassel@109.252.91.116) ()
[21:59:04] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:511a:5eb2:c96:106b)
[21:59:14] *** Joins: haskellberryfinn (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[22:00:03] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.4)
[22:04:30] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[22:09:37] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:511a:5eb2:c96:106b) (Ping timeout: 240 seconds)
[22:10:57] *** Joins: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net)
[22:12:28] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:13:48] *** Joins: emf_ (~emf@2620:10d:c090:400::5:c6d7)
[22:14:20] <Unicorn_Princess> i need to brush up on my haskell, stack/build system and all. what's the currently most up-to-date/recommended resource for that?
[22:14:32] *** Quits: cstml (~cstml@user/cstml) (Ping timeout: 256 seconds)
[22:14:50] <maerwald> resource for?
[22:14:52] <Unicorn_Princess> (don't need to do anything fancy with the build system, just basic usage)
[22:15:01] <Unicorn_Princess> for learning that :)
[22:15:09] <maerwald> learning stack?
[22:15:17] *** Quits: emf (~emf@2620:10d:c090:400::5:c6d7) (Ping timeout: 240 seconds)
[22:15:35] <Unicorn_Princess> if stack is still the recommended way to set up a project, then yes
[22:15:41] <EvanR> have you heard the good news about cabal
[22:15:56] <EvanR> come to the dark side
[22:16:07] <Unicorn_Princess> but i'm scared
[22:17:39] <f-a> https://cabal.readthedocs.io/en/latest/getting-started.html ← a good quickstart for cabal
[22:17:47] <carbolymer> Unicorn_Princess: http://dev.stephendiehl.com/hask/
[22:17:59] <carbolymer> Unicorn_Princess: good tl;dr
[22:18:33] *** Quits: haskellberryfinn (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Remote host closed the connection)
[22:18:39] <f-a> I am getting this error     clip-ariis: /home/f/francesco/progetti/ariisit/./syncSite.sh: rawSystem: posix_spawnp: invalid argument (Exec format error)
[22:18:48] <f-a> on this line       rawSystem "/home/f/francesco/progetti/ariisit/./syncSite.sh" [] >>
[22:19:07] <f-a> why does rawSystem like it no more?
[22:19:32] <Unicorn_Princess> thanks y'all
[22:20:04] *** Joins: vandito (~vandito@131.0.224.113)
[22:22:03] <maerwald> f-a: posix_spawnp expects a filename
[22:22:16] *** Quits: vandito (~vandito@131.0.224.113) (Client Quit)
[22:22:23] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:511a:5eb2:c96:106b)
[22:22:41] <maerwald> rawSystem "sh" ["-c", "/home/f..."]
[22:24:16] <f-a> thanks
[22:24:40] *** Joins: safinaskar (~quassel@109.252.91.116)
[22:25:41] *** Quits: cosimone (~user@93-34-133-254.ip49.fastwebnet.it) (Remote host closed the connection)
[22:26:02] *** Joins: vicfred (~vicfred@user/vicfred)
[22:26:54] <safinaskar> is there some programming language with prover with these properties: 1) the language is practical, i. e. it has some minimal set of packages useful in practice, at very least some general purpose parser lib and json parser and printer, 2) the prover is sound, i. e. termination checker should be included and there should no be type-in-type
[22:28:09] <EvanR> UrWeb maybe
[22:28:56] *** Joins: slack1256 (~slack1256@191.126.227.212)
[22:29:01] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[22:30:05] <d34df00d> idris sounds kinda related.
[22:31:17] *** Quits: slac66959 (~slack1256@186.11.25.249) (Ping timeout: 250 seconds)
[22:31:36] <janus> Unicorn_Princess: you should use ghcup to get ghc and cabal
[22:32:43] <janus> d34df00d: idris still has type-in-type though, i think
[22:32:44] <Unicorn_Princess> i thought stack was the more easy to use one
[22:32:52] <Unicorn_Princess> why would i wanna use cabal instead
[22:32:55] <janus> Unicorn_Princess: it is easy but it is unmaintained, so better not invest in it
[22:33:30] <EvanR> I'm skeptical that you don't need to know cabal at all to use stack
[22:33:34] <Unicorn_Princess> oh really? darn
[22:33:41] <d34df00d> janus: nope. They have Type (which is equialent to Type 1) : Type 2 : Type 3 ...
[22:33:54] <d34df00d> Or it might starting from 0, I don't remember, but the idea is the same.
[22:34:01] <EvanR> (I thought Type : Type 1)
[22:34:12] <awpr> last I looked, Idris had cumulative universes and not TypeInType, but that was before Idris 2, so I'm not sure what it does today.  it does (did) have `trust_me` and termination-checker escape hatches, though, so there are compromises to practicality
[22:34:43] <janus> Unicorn_Princess: cabal has a solver which stack hasn't. so it helps you to find a working set of dependencies. stack will ask you to add extra-deps that won't actually build with your snapshot
[22:34:49] <EvanR> safinaskar probably knows about idris that's why I didn't go into it
[22:34:56] <d34df00d> I hope it'll eventually have something like agda's {-# OPTIONS --safe #-} which forbids that.
[22:35:16] <janus> oh yeah i am not talking to safinaskar, since they are malicious
[22:35:46] <janus> but still wanted to reply to d34df00d. good to know it has the hierarchy, i wasn't aware
[22:36:50] <d34df00d> EvanR: you very well might be right about Type : Type 1 — last time I touched idris was about 1.5 years ago. Mostly agda that's never intended to run since then.
[22:36:56] <janus> Unicorn_Princess: it's not that much harder to use cabal and it's gonna save you a headache when you avoid a bug in stack
[22:37:25] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[22:38:03] <janus> and the remote freeze files are slated for addition, which should bring the package sets you may miss
[22:38:49] *** Quits: jalil (~jalil@2a01:e0a:277:4100:df65:87a3:4ed7:bb61) (Quit: jalil)
[22:39:11] *** Joins: jalil (~jalil@2a01:e0a:277:4100:df65:87a3:4ed7:bb61)
[22:39:12] <Unicorn_Princess> i guess i'll bite the bullet then
[22:39:13] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[22:39:40] <janus> yes, eat all of the u238
[22:40:02] <Unicorn_Princess> surely a bullet would be depleted, not enriched!
[22:40:05] *** Joins: Erutuon (~Erutuon@user/erutuon)
[22:40:30] <janus> u238 is depleted afaik
[22:40:34] <EvanR> u238 is the garbage isotope
[22:40:38] <Unicorn_Princess> oh, wait, how embarassing, i confused u238 for u235 :(
[22:40:45] * Unicorn_Princess runs away in shame
[22:40:51] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[22:40:56] <EvanR> turn in your factorio license and weapon now
[22:41:06] <awpr> is stack actually unmaintained?  or is this sort of a sensationalized headline about people being unsatisfied with how active it is?
[22:41:15] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:41:37] <maerwald> awpr: Snoyman put out a call for maintainers, because he's not developing it anymore
[22:42:05] <maerwald> and most of the PRs there are just ignored
[22:42:18] <janus> awpr: "none of the maintainers are spending a significant amount of time on it." https://www.snoyman.com/blog/babies-oss-maintenance/
[22:42:33] <EvanR> is it just "done" then
[22:42:46] <EvanR> software that is done
[22:43:33] <awpr> interesting, I hadn't heard that.  I guess I'll file away "port builds to cabal v2-*" as a thing I might need to do in the medium term if it breaks
[22:43:47] *** Quits: wavemode (~wavemode@2601:241:0:fc90:2892:d0:a7ec:bc11) (Quit: Client closed)
[22:44:13] <d34df00d> Or software maintainers that are done with the software.
[22:44:39] <EvanR> that's automatic when software is done
[22:44:42] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[22:44:56] <EvanR> you don't hear about done software too much but it's possible in principle
[22:45:36] <maerwald> one of the arguments was that Cabal (the library) is going too fast, without coordination with stack maintainers
[22:46:22] <sclv> it is a silly argument. there are features Cabal the library released four years ago that are still not supported
[22:46:35] *** Joins: slac27834 (~slack1256@186.11.25.249)
[22:46:38] <sclv> no maintainer did the work to support them. They just weren't interested in keeping up!
[22:46:53] <EvanR> I retract that theory then
[22:47:11] <d34df00d> I'd say things like `cp` or `more` are more or less done, modulo occasional bitrot avoidance.
[22:47:18] <safinaskar> EvanR: thanks for mentioning UrWeb. cool project. i slightly have read the manual, and i think UrWeb doesn't include prover. it seems its type system is less powerful (not more powerful) than current ghc's type system. it seems there is no dependent types
[22:47:28] <d34df00d> But that's boring, and you can rewrite that in ~~rust~~ haskell anyway.
[22:47:37] <maerwald> sclv: I dunno... I think they even refused to talk to Cabal maintainers? So the argument is weird anyway :)
[22:47:39] <EvanR> full dependent types really is a tall order
[22:47:46] <sclv> also i would argue that build software in particular can't stay "done". the systems change out from underneath it, and they need to update based on that. There's a lot of churn from windows changing APIs, mac changing security policies, and now architectures.
[22:47:48] <safinaskar> d34df00d: as well as i understand in idris 2 we have type in type, right?
[22:47:58] <EvanR> it's not clear at all that "practical" requires full dependent types
[22:48:17] <sclv> Higher level libraries that give data structures and the like can stay "done" much more effectively than anything that needs to make even elementary syscalls
[22:48:19] <sm> the blog post suggests that more communication/collaboration between projects would have helped. But of course that is hard
[22:48:25] <d34df00d> safinaskar: I think they'll eventually have a proper hierarchy. Idris 2 is still in its 0.x years.
[22:48:37] <maerwald> sm: there were offers, but they declined (to my knowledge)
[22:48:51] *** Quits: slack1256 (~slack1256@191.126.227.212) (Ping timeout: 256 seconds)
[22:48:55] <d34df00d> Dang sounds like I should learn cabal finally.
[22:49:01] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:68f0:cbbd:5b77:19e4)
[22:49:34] <maerwald> and they also declined to collaborate with ghcup, although stack was added to ghcup as per their request, basically
[22:50:13] *** Joins: slack1256 (~slack1256@191.125.227.197)
[22:50:23] *** Quits: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com) (Remote host closed the connection)
[22:50:27] <sm> at bottom line, changes in the foundations of haskell tools (GHC, Cabal) are indeed a constant treadmill, so it's got be costly / fatiguing to keep up
[22:50:51] <sm> and dude has a job and new babies
[22:51:11] <Unicorn_Princess> sounds like a case of misplaced priorities...
[22:51:20] <sm> i know right
[22:51:26] <ski> Unicorn_Princess : did you see <https://gist.github.com/merijn/8152d561fb8b011f9313c48d876ceb07> ?
[22:51:30] <sm> :-)
[22:51:57] <Unicorn_Princess> babies come and go, but haskell build systems are forever
[22:52:07] <maerwald> sm: I find it hard to believe that they find time to argue about Haskell installers for half a year, but then don't have time to communicate with either cabal or ghcup teams... and that because of babies
[22:52:14] <EvanR> I vaguely understand that stack was created in an environment where cabal kind of sucked, long ago
[22:52:30] *** Quits: slac27834 (~slack1256@186.11.25.249) (Ping timeout: 256 seconds)
[22:52:31] <EvanR> environment changed?
[22:52:38] <Unicorn_Princess> ski, maybe, long ago. probably a good idea i read it again, thanks :)
[22:52:43] <sclv> basically its a lot easier to greenfield something that solves _some_ problems than to maintain something that solves a _lot_ of problems
[22:52:52] <ski> np :)
[22:53:26] <janus> Unicorn_Princess: that document was last modified in 2019. so it was written before the baby
[22:53:29] <sm> maerwald: you always complain about this, but I don't hear much empathy so it doesn't really carry that much weight 
[22:53:43] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[22:53:47] <maerwald> sm: huh?
[22:53:48] <sclv> i mean empathy or blame or whatever is besides the point. the situation is what it is.
[22:54:13] <sclv> people should make choices based on how things actually are, whatever reasons in the past there may be
[22:54:47] <sm> bery true
[22:54:50] <EvanR> safinaskar, but you're right UrWeb does look cool. Not sure if it even works though
[22:55:23] <maerwald> sm: I don't understand what you mean by that
[22:56:33] *** Joins: Erutuon (~Erutuon@user/erutuon)
[22:56:34] * ski idly wonders if Smerdyakov is even on Libera
[22:56:56] *** Joins: alp (~alp@user/alp)
[22:56:56] <ski> (well, there's a new user, who grabbed that nickname, in any case)
[22:57:24] <sm> maerwald: I mean no offense. Just that you never miss a chance to remind us how stack/snoyman didn't respond to your PR or whatever, and therefore (implied) they suck.. but I'm sure there was a reason. Ultimately noone has unlimited time for communication and argument with all parties
[22:57:36] <ski> (hm .. or maybe they dropped it, now ?)
[22:57:47] <maerwald> sm: I'm not implying that at all
[22:57:53] <EvanR> their ears were burning
[22:58:00] <maerwald> sm: but I'm pretty confident it is *not* lack of time
[22:58:00] <sm> simple fatigue/burnout/other priorities I expect
[22:58:05] <sm> I can't even keep up with my own one project
[22:58:47] <maerwald> asking for maintainers and then not caring when people fix your code doesn't align
[22:58:53] *** Joins: slac52342 (~slack1256@186.11.25.249)
[22:59:09] <EvanR> wait isn't that consistent AF
[22:59:11] <sm> I think that's oversimplifying
[22:59:14] *** Joins: cynomys (~cynomys@user/cynomys)
[23:00:08] <sm> but you could be right, and he is inconsistent and screwed up in this case. I don't know everybody's motivations. I try to assume the best.
[23:00:23] <sm> based on my own failings :)
[23:00:41] <janus> d34df00d: where did you read about Type 0 : Type 1? my idris2 repl says 'Type : Type'
[23:01:07] <EvanR> mine said Type : Type 1 back in the day (idris 1)
[23:01:07] <maerwald> sm: I just get annoyed when people paint him as a victim, while others did considerable work to support stack
[23:01:18] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[23:01:31] <awpr> https://idris2.readthedocs.io/en/latest/tutorial/miscellany.html#cumulativity seems to give a definitive answer: cumulativity is how they want it to work, but Idris 2 doesn't have it yet
[23:01:43] <EvanR> also I never ran into a case where this hierarchy of types, real or imagined, actually mattered
[23:01:53] *** Quits: slack1256 (~slack1256@191.125.227.197) (Ping timeout: 256 seconds)
[23:02:15] <janus> awpr: oh ok thanks, that explains it
[23:02:58] <janus> EvanR: but would you necessarily realize if you relied on an invalid proof? you may just have been lucky
[23:03:22] <EvanR> no it's apparently very hard to stumble upon something that exploits type in type
[23:05:45] <EvanR> "a simplification of girard's paradox" https://www.cs.cmu.edu/~kw/research/hurkens95tlca.elf xD
[23:06:45] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[23:06:47] *** Quits: jgeerds (~jgeerds@55d4a547.access.ecotel.net) (Remote host closed the connection)
[23:07:19] <dolio> The assumptions of Girard's paradox are weaker than type-in-type, so it might be easier to exploit the latter.
[23:07:25] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[23:08:03] *** Quits: max22- (~maxime@2a01cb0883359800886894252541f01e.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[23:08:11] *** Joins: mmhat (~mmh@55d4f954.access.ecotel.net)
[23:09:13] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[23:10:59] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[23:11:31] *** Quits: jalil (~jalil@2a01:e0a:277:4100:df65:87a3:4ed7:bb61) (Quit: jalil)
[23:13:20] *** Joins: max22- (~maxime@2a01cb088335980012c6117e30bee14c.ipv6.abo.wanadoo.fr)
[23:13:53] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[23:15:20] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 252 seconds)
[23:16:41] *** Joins: cosimone (~user@93-34-133-254.ip49.fastwebnet.it)
[23:18:38] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:89bd:bcbb:df15:8e9a) (Ping timeout: 252 seconds)
[23:20:03] *** Quits: ubert (~Thunderbi@p200300ecdf0994700e1bfcbc5fe04b55.dip0.t-ipconnect.de) (Remote host closed the connection)
[23:26:13] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:26:13] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:26:13] *** Joins: wroathe (~wroathe@user/wroathe)
[23:28:48] *** Joins: jalil (~jalil@2a01:e0a:277:4100:8718:f702:59d2:5fba)
[23:29:34] *** shapr` is now known as shapr
[23:30:47] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[23:31:07] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[23:32:49] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[23:34:22] *** Quits: Inst (~delicacie@2601:6c4:4080:3f80:1d81:9f23:5ac8:407a) (Ping timeout: 250 seconds)
[23:34:59] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[23:35:02] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 240 seconds)
[23:36:06] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.4)
[23:36:35] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Quit: mikoto-chan)
[23:36:48] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[23:36:58] *** Joins: juhp (~juhp@128.106.188.82)
[23:37:12] *** Joins: notzmv (~zmv@user/notzmv)
[23:37:55] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[23:39:45] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[23:40:38] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:30cc:b923:a3cb:c39c) (Remote host closed the connection)
[23:40:52] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[23:45:00] *** Quits: jalil (~jalil@2a01:e0a:277:4100:8718:f702:59d2:5fba) (Quit: jalil)
[23:45:31] *** Quits: jao (~jao@66.63.167.168) (Ping timeout: 256 seconds)
[23:45:53] *** Joins: Hildegunst (~luc@80.248.12.109.rev.sfr.net)
[23:46:01] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Remote host closed the connection)
[23:47:07] *** Joins: ehammarstrom (~ehammarst@62-20-203-39-no182.tbcn.telia.com)
[23:47:08] *** Quits: ehammarstrom (~ehammarst@62-20-203-39-no182.tbcn.telia.com) (Client Quit)
[23:47:53] <monochrom> janus: BTW even in Coq, the notation "Type : Type" is just shorthand for the anti-climatic "Type n : Type (n+1) but since the indexes are clear from the context we will omit them".
[23:48:57] *** Joins: ehammarstrom (~ehammarst@62-20-203-39-no182.tbcn.telia.com)
[23:56:02] <ehammarstrom> Is there something like `cargo watch` for haskell? I'd like to get immediate type feedback after each file save in a separate terminal window
[23:56:18] <monochrom> ghcid
[23:56:55] <monochrom> https://hackage.haskell.org/package/ghcid
[23:57:20] <byorgey> ehammarstrom: also  `stack build --file-watch`
[23:57:54] <EvanR> stack is dead, long live stack
[23:58:19] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[23:58:30] <ehammarstrom> EvanR: byorgey: i was told not to use stack, so i only use cabal :)
[23:59:41] <ehammarstrom> monochrom: thanks, works great
