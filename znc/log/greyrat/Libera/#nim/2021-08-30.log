[00:10:57] <NimEventer> New Nimble package! watch_for_files - cross-platform file watcher with database, see https://github.com/hamidb80/watch_for_files
[00:11:00] <nrds> <12R2D299> 4GitHub: 7"a cross-platform file watcher with database"
[01:21:30] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:75d9:8ee9:c723:ca70) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:22:14] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:75d9:8ee9:c723:ca70)
[01:45:11] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:75d9:8ee9:c723:ca70) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:58:33] <FromDiscord> <Varriount> Anyone know how I would go about calling the Nim compiler as a library?
[02:04:35] <arkanoid> What does export `[]` do?
[02:06:11] <FromDiscord> <Varriount> sent a code paste, see https://play.nim-lang.org/#ix=3xn3
[02:16:15] <arkanoid> Varriount yes
[02:19:31] <FromDiscord> <Varriount> arkanoid: https://nim-lang.org/docs/manual.html#modules-export-statement , for the `[]` procedure (usually invoked via `somevariable[n]`)
[02:22:01] <arkanoid> Varriount: but here there is no proc [] https://github.com/nim-lang/irc/blob/master/src/irc.nim
[02:30:40] *** Quits: max22- (~maxime@2a01cb0883359800468c3975aa62b651.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[02:32:54] <FromDiscord> <dom96> In reply to @Varriount "Anyone know how I": What's your use case?
[02:33:15] <FromDiscord> <dom96> arkanoid: it's exporting tables.`[]` IIRC
[02:44:24] <arkanoid> OK. Thanks
[02:57:44] <FromDiscord> <Varriount> In reply to @dom96 "What's your use case?": Using AFL-Fuzz on the Nim compiler. But I think I got it now. It looks like it would be too complex to do effectively at the moment.
[02:59:22] <FromDiscord> <Varriount> One would need to write something to take AFL-Fuzz's input, and split it into multiple modules (possibly based on some pattern).
[03:11:40] <FromDiscord> <leorize> you can direct the fuzzer input into Nim's parser
[03:11:46] <FromDiscord> <leorize> s/in/out/
[03:12:29] <FromDiscord> <leorize> should let it train on some actual nim programs first though so it doesn't spam the parser with inputs that does nothing
[03:14:18] <FromDiscord> <Varriount> leorize: But the parser will only get one "module" that way.
[03:15:14] <FromDiscord> <Varriount> For fuzzing a compiler, you ideally want to have the compiler handle multiple modules, to find bugs related to symbol handling and such.
[03:15:30] <FromDiscord> <leorize> for those I think PBT is better
[03:15:35] <FromDiscord> <Varriount> PBT?
[03:15:44] <FromDiscord> <leorize> property-based testing
[03:16:06] <FromDiscord> <leorize> [saem](https://matrix.to/#/@saem:matrix.org) is very knowledgeable in that subject
[03:16:21] <FromDiscord> <leorize> I'd say that to start, you just need to fuzz the parser
[03:16:23] <FromDiscord> <Varriount> In my case specifically, I'd like to find bugs related to incremental compilation.
[03:16:26] <FromDiscord> <leorize> you don't even need to start sem
[03:17:12] <FromDiscord> <leorize> if you wanna fuzz IC you gotta get through the #1 bug that is IC doesn't work \:p
[03:17:31] <FromDiscord> <Varriount> Oh. I thought it was "finished"?
[03:17:56] <FromDiscord> <leorize> looks like there are some phase ordering issues, it's not compatible with arc/orc destructors
[03:18:23] <FromDiscord> <Varriount> I know Araq did some work on it, so I had assumed that it was working now (or, well, supposed to work)
[03:18:53] <FromDiscord> <leorize> it is supposed to work
[03:18:55] <FromDiscord> <leorize> it just doesn't
[03:19:40] *** Quits: redj (~quassel@bras-base-bchmpq5707w-grc-24-76-69-197-62.dsl.bell.ca) (Ping timeout: 240 seconds)
[03:19:40] *** Quits: nisstyre (~wes@user/nisstyre) (Ping timeout: 240 seconds)
[03:20:47] <FromDiscord> <Elegantbeef> Wait are you talking about me or IC?
[03:20:53] *** Joins: redj (~quassel@76.69.197.62)
[03:21:41] <FromDiscord> <Varriount> Just society in general
[03:23:18] <FromDiscord> <Varriount> zevv: Just so you know, NPeg appears to be handling a translated version of PostgreSQL's 8000 line-long grammer fairly well.
[03:30:21] <NimEventer> New thread by Lotzz: Doc2tex, see https://forum.nim-lang.org/t/8381
[03:33:02] *** Joins: nisstyre (~wes@user/nisstyre)
[03:36:19] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[03:36:32] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[03:52:27] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[03:59:37] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Ping timeout: 245 seconds)
[04:03:50] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[04:08:57] <madprops> hmm so the doc generator for tables looks messed up
[04:09:08] <madprops> it displays: (-173515851481370370, 45, "-....-")
[04:09:16] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[04:09:22] <madprops> when it should be like 'K': "-.-" etc
[04:09:55] <madprops> might as well make the table private since it looks terrible
[04:10:22] *** Joins: flynn (~mcbloch@user/flynn)
[04:15:55] <madprops> a solution is to make the keys a string too
[04:16:27] <FromDiscord> <Elegantbeef> You could always just use a char array
[04:16:37] <FromDiscord> <Elegantbeef> char indexed array
[04:18:15] <madprops> actually making them strings didn't help  .. going to try that char array
[04:21:32] <madprops> this is the table https://play.nim-lang.org/#ix=3xnL
[04:22:08] <madprops> idk if the keys are supposed to have a certain order, for they to work as an array
[04:22:21] <madprops> `Error: invalid order in array constructor`
[04:22:35] <FromDiscord> <Elegantbeef> Yea they have to be in the ordinal order
[04:24:11] <FromDiscord> <Elegantbeef> So yea this wont be the most ideal for an array, but you could
[04:36:11] <FromDiscord> <impbox [ftsf]> sent a code paste, see https://play.nim-lang.org/#ix=3xnQ
[04:36:35] <FromDiscord> <retkid> does nim come with a server tulity
[04:36:37] <FromDiscord> <retkid> (edit) "tulity" => "utility"
[04:36:45] <FromDiscord> <impbox [ftsf]> what does a server utility do?
[04:37:00] <FromDiscord> <retkid> not utility sorry my vocab sucks
[04:37:04] <FromDiscord> <retkid> uh
[04:37:19] <FromDiscord> <retkid> a library which can listen to ports and send and recieve data
[04:37:23] <FromDiscord> <retkid> (edit) "recieve" => "receive"
[04:37:38] <FromDiscord> <Elegantbeef> `std/net`
[04:37:40] <FromDiscord> <impbox [ftsf]> sent a code paste, see https://play.nim-lang.org/#ix=3xnR
[04:38:05] <FromDiscord> <retkid> thank you, time to read docs <3
[04:38:10] <FromDiscord> <impbox [ftsf]> https://nim-lang.org/docs/net.html
[04:38:47] <FromDiscord> <impbox [ftsf]> @ElegantBeef what's with the std vs no std?
[04:39:17] <FromDiscord> <Elegantbeef> New modules are hidden in a `std` path so you need it for some, so best to encourage it
[04:39:47] <FromDiscord> <impbox [ftsf]> hmm, any docs about it?
[04:40:03] <FromDiscord> <impbox [ftsf]> https://nim-lang.org/docs/lib.html i see a couple have std/ prefix but most don't
[04:40:16] <FromDiscord> <retkid> that is a very useful link
[04:40:17] <FromDiscord> <impbox [ftsf]> should std import be used for all std library libs?
[04:40:20] <FromDiscord> <retkid> i will keep that one
[04:40:30] <FromDiscord> <Elegantbeef> Yes it should be
[04:40:49] <FromDiscord> <Elegantbeef> Old libraries are grandfathered in, but all new ones will require it
[04:41:22] <FromDiscord> <Elegantbeef> So like `setutils` in devel requires `std`
[04:41:35] <FromDiscord> <impbox [ftsf]> https://nim-lang.org/docs/manual.html#modules-pseudo-importslashinclude-paths aha found the docs on it
[04:42:01] <FromDiscord> <Elegantbeef> And as such the devel docs https://nim-lang.github.io/Nim/strutils.html have it now
[04:42:15] <FromDiscord> <impbox [ftsf]> cool
[04:42:42] <FromDiscord> <Rika> ~~same could be said with `pkg` and `.` prefixes~~
[04:42:47] <FromDiscord> <Elegantbeef> Though dont know how the new atlas tooling will play
[04:43:11] <FromDiscord> <impbox [ftsf]> atlas tooling?
[04:43:45] <FromDiscord> <Rika> atlas should not interfere with normal user code that doesnt have anything to do with the compiler
[04:43:45] <FromDiscord> <Elegantbeef> Atlas is for stdlib management, allowing  version selection of the stdlib(or modules in it)
[04:44:02] <FromDiscord> <impbox [ftsf]> ahh
[04:44:07] <FromDiscord> <Rika> In reply to @Rika "atlas should not interfere": i mean this in terms of imports
[04:44:32] <FromDiscord> <Rika> like i dont see how it would change anything
[04:44:48] <FromDiscord> <Rika> there arent any new modules that dont require std after all as you said
[04:44:56] <FromDiscord> <Elegantbeef> Well lik i said "I dont know" 😀
[04:45:08] <FromDiscord> <Elegantbeef> Damn my E key isnt playing nice
[04:45:34] <FromDiscord> <Rika> did you mean "nic"
[04:49:26] <FromDiscord> <retkid> fuck
[04:49:31] <FromDiscord> <retkid> my attention span is non-existant today
[04:49:35] <FromDiscord> <retkid> (edit) "non-existant" => "non-existent"
[04:49:36] <FromDiscord> <retkid> im dying
[04:51:32] <FromDiscord> <impbox [ftsf]> D:
[04:51:37] <FromDiscord> <impbox [ftsf]> don't die plz
[04:52:32] <madprops> why would a case say not all cases are covered if I have an else ..
[04:52:44] <FromDiscord> <Rika> code?
[04:52:47] <FromDiscord> <impbox [ftsf]> it shouldn't .. show plz?
[04:53:11] <madprops> https://play.nim-lang.org/#ix=3xnU
[04:53:48] <FromDiscord> <impbox [ftsf]> remove the commas
[04:54:03] <madprops> oh haha
[04:54:16] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[04:54:17] <madprops> this was after turning a table to a case
[04:54:20] <FromDiscord> <impbox [ftsf]> and escape the `'` correctly
[04:54:28] <FromDiscord> <impbox [ftsf]> `'\''`
[04:54:55] <madprops> yeah
[04:56:04] <madprops> still don't think this should be a case anyway
[04:56:11] <madprops> since I used the keys with the table
[04:56:17] <madprops> for k in Morse.keys:
[04:56:57] <FromDiscord> <impbox [ftsf]> https://play.nim-lang.org/#ix=3xnW
[04:58:16] <FromDiscord> <impbox [ftsf]> array would make more sense to me than table, just some empty entries but who cares
[04:58:44] <FromDiscord> <impbox [ftsf]> but you can populate the lookup array from the func
[04:59:34] <madprops> i think table makes sense,
[04:59:39] <madprops> it's just that it looks ugly in docs
[04:59:59] <madprops> since it uses the compiled version
[05:24:01] <FromDiscord> <Elegantbeef> array + set is the best combination
[05:28:00] <FromDiscord> <impbox [ftsf]> i'm sure there's a way to populate an array from a proc at compile time but i can never remember how
[05:31:33] <FromDiscord> <Elegantbeef> Here you go imp https://play.nim-lang.org/#ix=3xo5
[05:32:48] <FromDiscord> <impbox [ftsf]> rad
[05:32:50] <FromDiscord> <impbox [ftsf]> thanks
[05:33:18] <FromDiscord> <Elegantbeef> Ideally you'd limit the range of the array to the lowest/highest character so `array[lowest..highest, string]`
[05:33:28] <FromDiscord> <Elegantbeef> But i couldnt be arsed to figure out which those were
[05:40:27] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 250 seconds)
[05:42:02] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[05:42:06] <madprops> oh cool
[05:42:48] *** Quits: krux02 (~krux02@p4ff8b737.dip0.t-ipconnect.de) (Remote host closed the connection)
[05:48:45] *** Joins: neurocyte2 (~neurocyte@212.232.88.4)
[05:48:45] *** Quits: neurocyte2 (~neurocyte@212.232.88.4) (Changing host)
[05:48:45] *** Joins: neurocyte2 (~neurocyte@user/neurocyte)
[05:50:51] *** Quits: neurocyte (~neurocyte@user/neurocyte) (Ping timeout: 250 seconds)
[05:50:51] *** neurocyte2 is now known as neurocyte
[05:57:06] <FromDiscord> <Rika> its unnecessarily expensive to use a table for a char LUT
[05:58:39] <FromDiscord> <Elegantbeef> Indeed, reminds me of the powerPC emulator that was using an enum table and just by changing it to an array instead gave them all the performance
[05:59:21] <FromDiscord> <Elegantbeef> The important note is not all `O(1)` are equal 😛
[06:00:19] <FromDiscord> <Elegantbeef> Then there is also the memory consumption
[06:01:02] <FromDiscord> <Rika> big o notation only shows shape
[06:01:20] <FromDiscord> <Rika> and there is time complexity versus space complexity
[06:01:22] <FromDiscord> <Rika> as you say
[06:20:25] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Ping timeout: 248 seconds)
[06:45:27] <FromDiscord> <Rika> what the heck?
[06:45:44] <FromDiscord> <Rika> `import pkg/xxx` doesnt work if you have done `nimble develop xxx`
[06:50:12] <nrds> <06Prestige99> is that a recent bug? I'm pretty sure I've done that
[06:52:18] <FromDiscord> <Rika> not sure
[07:14:07] <FromDiscord> <retkid> does anyone have any memory on "out of memory"
[07:15:39] <FromDiscord> <Rika> ?
[07:15:41] <FromDiscord> <Rika> what?
[07:17:03] <FromDiscord> <retkid> ah i see the error i think
[07:19:10] <FromDiscord> <retkid> yea no i dont
[07:19:39] <FromDiscord> <retkid> so, i have a server, but when i call a proc to send data to it, it it quits with "out of memory"
[07:20:24] <FromDiscord> <retkid> lemme try some workarounds
[07:22:49] *** Quits: notchris (sid181145@stonehaven.irccloud.com) (Ping timeout: 248 seconds)
[07:23:52] <FromDiscord> <retkid> so the issue is that java sucks
[07:24:23] <FromDiscord> <Elegantbeef> What do you mean?
[07:24:45] <FromDiscord> <retkid> im just working with java socket stuff and got confused
[07:24:46] <FromDiscord> <retkid> dont worry
[07:26:01] *** Joins: notchris (sid181145@id-181145.stonehaven.irccloud.com)
[07:38:39] *** Joins: rockcavera (~rc@192.12.113.206)
[07:38:39] *** Quits: rockcavera (~rc@192.12.113.206) (Changing host)
[07:38:39] *** Joins: rockcavera (~rc@user/rockcavera)
[07:49:56] <madprops> so what is it actually ok to use a table? o_O
[07:50:08] <madprops> when*
[07:50:31] <FromDiscord> <Rika> when the key type is not ordinal
[07:51:51] <madprops> that morse code table was only partly ordinal
[07:52:13] <FromDiscord> <Rika> why>
[07:52:17] <FromDiscord> <Rika> i mean the key type
[07:52:24] <FromDiscord> <Rika> char is ordinal
[07:52:30] <madprops> oh
[07:52:41] <FromDiscord> <impbox [ftsf]> Tables are also good for very sparse data
[08:01:15] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[08:03:37] <FromDiscord> <retkid> tables are an effective way of handeling data
[08:03:40] <FromDiscord> <retkid> (edit) "handeling" => "handling"
[08:04:34] <FromDiscord> <retkid> i'm having a lot of trouble getting nim to get packets from java, and its not nim's fault, its 100% java's fault and i don't know what its doing
[08:05:21] <FromDiscord> <Arathanis> I've always thought you should use what is the most readable or makes the most sense to you. If performance ultimately becomes an issue you can come back and optimize later, but I think readability and "sense" trumps chasing performance every time unless you can demonstrate the performance is insufficient.
[08:06:05] <FromDiscord> <retkid> what if im building something big and want to be able to scale it
[08:06:24] <FromDiscord> <Arathanis> in which cause, the right time to use tables is whenever it makes sense.
[08:06:59] <FromDiscord> <Arathanis> i still think you should stick to this philosophy when building something big
[08:08:29] <FromDiscord> <Arathanis> 99% of the time your performance bottleneck is going to be a single function, maybe two. You can profile and optimize the slow parts if its too slow when everything comes together and you try to scale.↵↵I'm not saying that you shouldn't design for scalability if you know you need it, only that you shouldn't chase performance in everything you do. Readability really does count. Dev time is expensive, computational power less so.
[08:09:01] <FromDiscord> <retkid> well, im not making money and i'm not taking off work so dev time is worthless
[08:09:06] <FromDiscord> <retkid> and i want this stuff to run on a potato
[08:09:20] <FromDiscord> <Arathanis> Don't say that, your time is never worthless. Money or not. :]
[08:10:06] <FromDiscord> <Rika> In reply to @Arathanis "Don't say that, your": ~~this is very true, esp if youre in uni loooool~
[08:10:07] <FromDiscord> <Rika> (edit) "loooool~" => "loooool~~"
[08:10:28] <FromDiscord> <Arathanis> I also find it easier to make things run on a potato if I just make it worse with good, readable, elegant code. And if it ultimately fails to run on the potatoes, then you can find out what is bottlenecking your nightshades and make them faster!
[08:10:42] <FromDiscord> <Arathanis> (edit) "worse" => "work"
[08:10:43] <FromDiscord> <retkid> I'm doing some really dubious stuff with my current project. Dunno if it will increase performance or not, and once its finished it'll be nearly impossibly to practically know
[08:10:47] <FromDiscord> <retkid> but
[08:10:49] <FromDiscord> <Arathanis> edited: worse -> work
[08:10:51] <FromDiscord> <retkid> im taking it as a learning thing\
[08:10:52] <FromDiscord> <retkid> (edit) "thing\" => "thing"
[08:11:00] <FromDiscord> <retkid> (edit) "thing" => "thing, even if it doesn't matter"
[08:11:04] <FromDiscord> <retkid> im still learning stuff so eh
[08:11:44] <FromDiscord> <Arathanis> sure, learning is always good and it never hearts to learn how to optimize! but if you plan to take this into industry, i really think you will benefit a lot from the approach I outlined above
[08:11:48] <FromDiscord> <Rika> In reply to @retkid "I'm doing some really": you can just profile the code tho
[08:11:48] <FromDiscord> <Arathanis> In reply to @Rika "~~this is very true,": ha
[08:12:06] <FromDiscord> <retkid> its a tad more complicated than that
[08:12:08] <FromDiscord> <Rika> me when i entered uni: 😄↵me after a year in uni: 😐
[08:12:09] <FromDiscord> <Arathanis> In reply to @Rika "you can just profile": yeah, write it in an elegant readable way tahts easy to maintain and extend
[08:12:21] <FromDiscord> <Arathanis> if its too slow you can make it hideous, but fast, monstrosity later
[08:12:29] <FromDiscord> <Arathanis> (edit) "if its too slow you can make it ... hideous," 03added "a"
[08:12:32] <FromDiscord> <Rika> you can make elegant fast code
[08:12:45] <FromDiscord> <Rika> it just takes much more time than either choice proposed before
[08:12:46] <FromDiscord> <Arathanis> not always but i agree with you 99% of the time
[08:12:48] <FromDiscord> <Arathanis> maybe more than 99%
[08:12:58] <FromDiscord> <Arathanis> there are always edge cases
[08:13:01] <FromDiscord> <retkid> nim makes it pretty easy to write fast code
[08:13:06] <FromDiscord> <Arathanis> yeah its nice for that
[08:13:09] <FromDiscord> <retkid> its kinda built to make fast elegent code
[08:13:09] <FromDiscord> <Rika> In reply to @Arathanis "not always but i": id say 90%
[08:13:11] <FromDiscord> <retkid> (edit) "elegent" => "elegant"
[08:13:17] <FromDiscord> <retkid> if you write fast code in python it looks like php
[08:13:28] <FromDiscord> <Arathanis> love me some python
[08:13:34] <FromDiscord> <Rika> if you write python may god help you
[08:13:44] <FromDiscord> <Arathanis> python is actually my favorite language :P
[08:14:04] <FromDiscord> <Rika> its the language i abandoned due to a lot of things i dont like about it
[08:14:09] <FromDiscord> <retkid> Python is easy provided you have no performance goals
[08:14:23] <FromDiscord> <Arathanis> python is pretty performant if you know what you are doing
[08:14:32] <FromDiscord> <Rika> well my issue with it was not performance
[08:14:50] <FromDiscord> <retkid> I dunno, python's design goal is very simple
[08:14:58] <FromDiscord> <retkid> be like English ((or dutch))
[08:15:12] <FromDiscord> <retkid> if you don't like that, c'est la vie
[08:15:17] <FromDiscord> <Arathanis> pseudo code that runs!
[08:15:21] <FromDiscord> <Arathanis> i actually love it
[08:15:25] <FromDiscord> <Arathanis> easily my favorite language.
[08:15:40] <FromDiscord> <Arathanis> i started looking into nim because it based its syntax so clearly on python
[08:15:53] <FromDiscord> <retkid> thats surface level
[08:15:58] <FromDiscord> <retkid> skin deep
[08:15:58] <FromDiscord> <Rika> there are things i am fine with wrt. python
[08:16:07] <FromDiscord> <Rika> i just really do not like dynamic typing
[08:16:13] <FromDiscord> <retkid> under the hood, nim is closer to pascal
[08:16:36] <FromDiscord> <Rika> In reply to @Rika "i just really do": and the lack of CTEs too i guess
[08:16:43] <FromDiscord> <Arathanis> i like dynamic typing
[08:16:49] <FromDiscord> <Arathanis> i like that i can use static typing when i want it
[08:17:02] <FromDiscord> <Arathanis> and when i want a quick dirty script for some one off i dont have to fight a type system
[08:17:17] <FromDiscord> <Arathanis> but when im doing anything bigger i can get my typing
[08:17:20] <FromDiscord> <Rika> those scenarios are rare to me
[08:17:30] <FromDiscord> <Rika> i dont remember the last time i had to fight the type system
[08:17:30] <FromDiscord> <Arathanis> they are common enough for me to appreciate it
[08:17:34] <FromDiscord> <retkid> the only time typing has been annoying for me
[08:17:38] <FromDiscord> <retkid> is anything involving java
[08:17:51] <FromDiscord> <Rika> java typing is inelegant
[08:18:01] <FromDiscord> <Arathanis> well now we have 40in widescreen monitors
[08:18:12] <FromDiscord> <Arathanis> so you might be able to display a java class name on a single line now
[08:18:31] <FromDiscord> <retkid>  https://media.discordapp.net/attachments/371759389889003532/881747183433551902/unknown.png
[08:18:57] <FromDiscord> <retkid> kotlin writes and look a lot better than java
[08:19:04] <FromDiscord> <retkid> however still has the haulmarks of its bad typing stuff
[08:19:11] <FromDiscord> <retkid> (edit) "however still has the haulmarks of its bad typing stuff ... " 03added "as it intergrates with java"
[08:19:13] <FromDiscord> <retkid> (edit) "intergrates" => "integrates"
[08:19:35] <FromDiscord> <Arathanis> yeah, i agree
[08:19:38] <FromDiscord> <retkid> i write code like a maniac i know
[08:19:42] <FromDiscord> <retkid> (edit) "know" => "know, lemm be"
[08:19:44] <FromDiscord> <retkid> (edit) "lemm" => "lemme"
[08:20:14] <FromDiscord> <Arathanis> but yes my favorite language is python and i looked into nim for the syntactical similarities
[08:20:28] <FromDiscord> <retkid> yea
[08:20:29] <FromDiscord> <Arathanis> i hate "character noise"
[08:20:32] <FromDiscord> <retkid> still dont see that one
[08:20:34] <FromDiscord> <Rika> how fun that people who both hate and love python look to nim
[08:20:38] <FromDiscord> <Arathanis> and nim does a good job of managing that
[08:20:48] <FromDiscord> <Arathanis> i dont really hate any language
[08:20:58] <FromDiscord> <retkid> Rika, its because nim is very different than python but looks like it
[08:21:02] <FromDiscord> <Arathanis> except maybe JS for breaking boolean algebra u_u
[08:21:14] <FromDiscord> <Arathanis> and PHP for being... you know
[08:21:20] <FromDiscord> <retkid> don't like java
[08:21:25] <FromDiscord> <retkid> never have to program JS because nim
[08:21:27] <FromDiscord> <retkid> so im golden
[08:21:44] <FromDiscord> <Rika> hate is a strong word, i just use it as it is the inverse immediately thought of when thinking of love
[08:21:51] <FromDiscord> <Arathanis> yeah i dont really hate anything
[08:21:57] <FromDiscord> <Arathanis> java's verbosity really turns me off
[08:22:01] <FromDiscord> <retkid> yea no java makes furious
[08:22:04] <FromDiscord> <retkid> like genuinely
[08:22:06] <FromDiscord> <Arathanis> maybe APL for being a "write only" language lmao
[08:22:18] <FromDiscord> <retkid> even after learning a lot of java
[08:22:24] <FromDiscord> <retkid> writing it is like molasiss
[08:22:27] <FromDiscord> <retkid> (edit) "molasiss" => "molasses"
[08:22:30] <FromDiscord> <Rika> In reply to @Arathanis "and PHP for being...": you remind me of the php project i have to set up and maintain (but have been putting it off for months)
[08:22:38] <FromDiscord> <Arathanis>  https://media.discordapp.net/attachments/371759389889003532/881748215114924052/unknown.png
[08:22:49] <FromDiscord> <Arathanis> Conway's Game of Life written in APL
[08:22:53] <FromDiscord> <Arathanis> write only language im telling you
[08:23:08] <FromDiscord> <retkid> well
[08:23:10] <FromDiscord> <impbox [ftsf]> I loved python until I used it for a long time, mostly due to the lack of typing and it's standard library.
[08:23:27] <FromDiscord> <retkid> py's standard library is infuriating
[08:23:28] <FromDiscord> <Arathanis> In reply to @impbox "I loved python until": ive been using python for so long, still love it
[08:23:30] <FromDiscord> <retkid> almost as bad as java
[08:23:45] <FromDiscord> <retkid> dunno what they're thinking with it
[08:23:52] <FromDiscord> <Arathanis> you dont liek the standard library? huh, color me surprisefd
[08:23:53] <FromDiscord> <Arathanis> (edit) "surprisefd" => "surprised"
[08:23:55] <FromDiscord> <impbox [ftsf]> Nim has the bits of python i like without the bits I don't so it's great
[08:24:16] <FromDiscord> <retkid> nim is kinda like a language blender
[08:24:19] <FromDiscord> <retkid> with some new ideas thrown in
[08:24:26] <FromDiscord> <Rika> In reply to @Arathanis "you dont liek the": its gained a lot of cruft and inconsistencies over the years
[08:24:35] <FromDiscord> <Rika> its not really annoying to me though
[08:24:46] <FromDiscord> <impbox [ftsf]> Oh also distributing python apps is a massive pain
[08:24:51] <FromDiscord> <impbox [ftsf]> Nim is easy
[08:24:59] <FromDiscord> <retkid> i think, when i want to do simple tasks, i have to go on PIP
[08:25:02] <FromDiscord> <retkid> thats a bad sign
[08:25:14] <FromDiscord> <retkid> and i do the same thing for java except its a pain in the ass to get dependencies to work with Maven
[08:25:19] <FromDiscord> <retkid> so i end up just fucking using it anyway
[08:25:20] <FromDiscord> <Arathanis> oh ive never had issue with distributing python apps I use either PyInstaller or Nuitka if im feeling spicy.
[08:25:36] <FromDiscord> <retkid> i just leave the scripts out there and tell them to figure it out
[08:25:37] <FromDiscord> <retkid> 😎
[08:28:39] <FromDiscord> <retkid> yea so sometimes on the server recieve
[08:28:48] <FromDiscord> <retkid> random characters get thrown into the strings i recieve
[08:28:53] <FromDiscord> <retkid> (edit) "recieve" => "receive"
[08:29:09] <FromDiscord> <retkid> and other times it doesn't send, for no reason
[08:32:46] <FromDiscord> <Arathanis> sounds like an encoding problem?
[08:33:03] <FromDiscord> <Arathanis> you got something sending utf-8 and something expecting to receive ascii or vice versa?
[08:33:55] <FromDiscord> <retkid>  https://media.discordapp.net/attachments/371759389889003532/881751061600276550/unknown.png
[08:34:06] <FromDiscord> <retkid> so yea it seems that
[08:34:36] <FromDiscord> <retkid> after the default length it spits out a character
[08:34:41] <FromDiscord> <retkid> on some overflow issue or something
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:07] <FromDiscord> <retkid>  https://media.discordapp.net/attachments/371759389889003532/881751611351891999/unknown.png
[08:36:20] <FromDiscord> <retkid> only happens at the start
[08:36:24] <FromDiscord> <retkid> (edit) "only happens at the start ... " 03added "1 time"
[08:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:36:33] <FromDiscord> <retkid> (edit) "time" => "time, i could filter that out probably"
[08:38:24] <FromDiscord> <garett> In C, it is possible to define an enum type with no constants.  Is there a way to do that in Nim?  Maybe if I use `discard` in the body of the enum type declaration?
[08:39:35] <FromDiscord> <Yardanico> In reply to @garett "In C, it is": I don't think it's possible, besides, what would you use it for?
[08:39:48] <FromDiscord> <Yardanico> I mean what do you actually want to do with an empty enum?
[08:40:17] <FromDiscord> <garett> declare a set type with no valid flags, because this is something that appears in vulkan API
[08:40:51] <FromDiscord> <garett> The reason it appears is because future versions of the API may add some flags
[08:41:06] <FromDiscord> <garett> I will just use a `distinct uint32` to approximate it
[08:42:07] <FromDiscord> <Yardanico> oh okay then, your way should work I think
[08:42:18] <FromDiscord> <garett> I confirmed in nim playground that you can't put `discard` in the body of an enum declaration
[08:42:32] <FromDiscord> <Yardanico> i know :)
[08:42:37] <FromDiscord> <garett> Thanks Yardanico 🙂
[08:42:58] <FromDiscord> <Yardanico> `discard` in type declarations can only be placed when you have some branching with e.g. `case` or `when`
[08:43:00] <FromDiscord> <Yardanico> iirc
[08:43:11] <FromDiscord> <Yardanico> you don't need it to create an empty object for example
[08:43:14] <FromDiscord> <Yardanico> `type EmptyObj = object`
[08:43:21] <FromDiscord> <Yardanico> that's all what's needed, no discard
[08:44:01] <FromDiscord> <garett> I was playing with NimGL's vulkan.nim, and found it awkward to deal with flags.  I refactored it to use sets, which makes the code pretty nice, but I must have messed up something somewhere because it breaks the example program 😄
[08:44:25] <FromDiscord> <Yardanico> there's also a few other vulkan binding repos for nim
[08:44:39] <FromDiscord> <garett> I was surprised that an empty enum can't be declared similar to an empty object, but I don't find it unreasonable.
[08:44:46] <FromDiscord> <Yardanico> https://github.com/nimious/vulkan
[08:44:47] <FromDiscord> <Yardanico> https://github.com/Clyybber/vulkanim
[08:44:48] <nrds> <12R2D299> 4GitHub: 7"Nim bindings for Vulkan, the API for access to graphics and compute on GPUs."
[08:44:49] <nrds> <12R2D299> 4GitHub: 7"Vulkan bindings for nim"
[08:48:21] <FromDiscord> <garett> both interesting, thanks for the links.  Neither is quite as idiomatic as I would like, but I may be able to take inspiration from all three to cobble something nice together
[08:49:44] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[08:49:44] <FromDiscord> <garett> Nim `set` is really ideal for all of the bit flag fields in the vulkan API, makes the code much nicer to read and write, without all the int-casting and bitops
[08:50:53] <FromDiscord> <garett> I'll probably end up doing what I did for D3D11, and just manually translating the headers to Nim 😛
[08:51:07] <madprops> what's the idea behind toUpperAscii ?
[08:51:13] <madprops> instead of using toUpper all the time
[08:51:21] <madprops> performance gains?
[08:51:37] <FromDiscord> <garett> I think it indicates that it doesn't support uppercasing Unicode letters
[08:51:43] <FromDiscord> <garett> outside the ASCII range
[08:52:28] <FromDiscord> <garett> like converting a lowercase a with umlauts over it into an uppercase A with umlauts over it
[08:54:11] <FromDiscord> <garett> sent a code paste, see https://play.nim-lang.org/#ix=3xoA
[08:54:58] <FromDiscord> <garett> Uppercasing arbitrary Unicode glyphs requires a lot of tables to figure out whether there is an uppercase equivalent and what it is.
[08:55:19] <madprops> I see
[08:55:19] <FromDiscord> <garett> Uppercasing ASCII characters is just an `if` and an add
[08:55:30] <FromDiscord> <retkid> alright
[08:56:04] <FromDiscord> <garett> So, I think your initial inclination is correct, `isUpperAscii` should be faster, but only operates on a subset of possible text
[08:56:23] <FromDiscord> <Yardanico> In reply to @garett "I think it indicates": yes, exactly
[08:56:31] <FromDiscord> <impbox [ftsf]> toUpperAscii also might break unicode characters
[08:56:32] <FromDiscord> <retkid> there is some base 16 in here↵@['\x00', '\x0F', 'H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd', '!']
[08:56:40] <FromDiscord> <Yardanico> wdym? that's not base 16
[08:56:41] <FromDiscord> <impbox [ftsf]> if you pass it unicode text
[08:57:06] <FromDiscord> <retkid> yep
[08:57:07] <FromDiscord> <impbox [ftsf]> if you're using ascii functions you want to be sure you're passing them ascii
[08:57:15] <FromDiscord> <retkid> thats just a non printable character
[08:57:35] <FromDiscord> <retkid> i saw \x0F and went... 0x0000F???
[08:58:01] <FromDiscord> <garett> I think for unicode characters it would be `"\u00000000"`
[08:58:15] <FromDiscord> <retkid> I have a solution, but do you know where these are coming from
[08:58:22] <FromDiscord> <retkid> the second one is seemingly rtandom
[08:58:25] <FromDiscord> <retkid> (edit) "rtandom" => "random"
[08:58:29] <FromDiscord> <Yardanico> then something's wrong with your code
[08:58:31] <FromDiscord> <retkid> is it the sum of the characters
[08:58:37] <FromDiscord> <Yardanico> are you doing FFI or what?
[08:58:42] <FromDiscord> <Yardanico> and what are you interfacing with?
[08:58:48] <FromDiscord> <retkid> server stuff
[08:59:06] <FromDiscord> <retkid> sending a packet
[08:59:09] <FromDiscord> <retkid> might be an encoding thing
[08:59:18] <FromDiscord> <retkid> lemme see if i can change the encoding to UTF in nim
[08:59:23] <FromDiscord> <garett> `'\x0F'` is the ASCII control sequence `SI`
[08:59:36] <FromDiscord> <Yardanico> In reply to @retkid "sending a packet": well, maybe you're sending/receiving it incorrectly :P
[08:59:51] <FromDiscord> <garett> (edit) "`'\x0F'` is the ASCII control sequence `SI` ... " 03added "(shift in)"
[09:00:21] <FromDiscord> <retkid> In reply to @garett "`'\x0F'` is the ASCII": well, that one is made from the following characters
[09:00:23] <FromDiscord> <Yardanico> having a null terminator at the start of your string isn't a good sign
[09:00:59] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3wYC
[09:01:20] <FromDiscord> <Yardanico> yes, exactly, \x00 at the start signifies that something's wrong
[09:01:30] <FromDiscord> <Yardanico> you shouldn't have a null character at the start of your string
[09:01:48] <FromDiscord> <retkid> it would be cool if i could see it without converting it to a C  string tho
[09:01:55] <FromDiscord> <Yardanico> ?
[09:02:13] <FromDiscord> <retkid> so, i only looked at this because i was doing string checks and it didn't work
[09:02:32] <FromDiscord> <Yardanico> you can use `repr`
[09:02:43] <FromDiscord> <Yardanico> !eval echo repr "\x00abc"
[09:02:48] <NimBot> 0x55e15e6f6870"\0abc"
[09:02:53] <FromDiscord> <Yardanico> see the \0 at the start
[09:03:11] <FromDiscord> <retkid> yea
[09:03:20] <FromDiscord> <retkid> repr might be more insightful
[09:04:12] <FromDiscord> <retkid> ahhh
[09:04:17] <FromDiscord> <retkid> repr just shows the full thing
[09:04:18] <FromDiscord> <retkid> thanks
[09:05:49] <FromDiscord> <retkid> well, the origin of this null origin is somewhere in java as this isn't a problem with python or any other lang on this server
[09:10:59] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (*.net *.split)
[09:10:59] *** Quits: ecs (ecs@user/ecs) (*.net *.split)
[09:11:00] *** Quits: Amun-Ra (~amun-ra@retro.rocks) (*.net *.split)
[09:11:00] *** Quits: Onionhammer (~onionhamm@207-153-1-151.fttp.usinternet.com) (*.net *.split)
[09:11:00] *** Quits: crem (~crem@2a02:169:160a:1:9b30:962e:76eb:4bb3) (*.net *.split)
[09:11:17] *** Joins: crem (~crem@2a02:169:160a:1:9b30:962e:76eb:4bb3)
[09:11:18] *** Joins: Onionhammer (~onionhamm@207-153-1-151.fttp.usinternet.com)
[09:11:44] *** Joins: Amun-Ra (~amun-ra@retro.rocks)
[09:12:32] *** Joins: ecs (ecs@user/ecs)
[09:15:08] *** Quits: dom96 (~dom@mail.nim-lang.org) (*.net *.split)
[09:15:08] *** Quits: federico3 (~quassel@debian/federico) (*.net *.split)
[09:15:08] *** Quits: ormiret (sid314108@tooting.irccloud.com) (*.net *.split)
[09:15:08] *** Quits: NimEventer (~NimBot@static.224.140.47.78.clients.your-server.de) (*.net *.split)
[09:15:08] *** Quits: clemens3 (~clemens@225.40.150.83.ftth.as8758.net) (*.net *.split)
[09:15:08] *** Quits: drewr (~drew@user/drewr) (*.net *.split)
[09:15:08] *** Quits: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se) (*.net *.split)
[09:15:29] *** Joins: ormiret (sid314108@id-314108.tooting.irccloud.com)
[09:15:55] *** Joins: NimEventer (~NimBot@static.224.140.47.78.clients.your-server.de)
[09:16:34] *** Joins: drewr (~drew@user/drewr)
[09:16:47] *** Joins: clemens3 (~clemens@225.40.150.83.ftth.as8758.net)
[09:16:52] *** Joins: dom96 (~dom@mail.nim-lang.org)
[09:16:54] *** Joins: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se)
[09:16:58] *** Joins: federico3 (~quassel@debian/federico)
[09:39:26] <arkanoid> When I should use cint and when not? c2nim generates code with ctypes, but offer I see the opposite, like in https://github.com/zevv/nimcoro/blob/master/ucontext.nim
[09:39:48] <arkanoid> s/offer/often/
[09:41:52] <FromDiscord> <impbox [ftsf]> use cint when you want an int in c
[09:42:20] <FromDiscord> <impbox [ftsf]> if you're calling a c function that takes an int argument, it should take a cint in nim
[09:43:44] <FromDiscord> <impbox [ftsf]> sent a code paste, see https://play.nim-lang.org/#ix=3xoK
[09:56:37] <FromDiscord> <retkid> yea c interop seems annoying
[09:56:49] <FromDiscord> <retkid> im only dealing with c interop on one side which is much more pleasent
[09:57:07] <FromDiscord> <impbox [ftsf]> it's a bit annoying, nicer than i've experienced in other languages though
[09:57:29] <FromDiscord> <retkid> currently my kotlin/java interop is going very nice and running at full speed
[09:57:57] <FromDiscord> <retkid> with communicate over servers
[09:58:37] <FromDiscord> <impbox [ftsf]> JRE calling C functions?
[10:00:30] <arkanoid> Impbox, thanks. But in the linked example he used nim ints for imported struct attributes. Is cint to be used for function arguments only?
[10:00:42] <FromDiscord> <retkid> In reply to @impbox "JRE calling C functions?": YEP
[10:00:43] <FromDiscord> <retkid> (edit) "YEP" => "Yep"
[10:00:44] <FromDiscord> <impbox [ftsf]> arkanoid, anywhere where you'd use int in c
[10:01:25] <FromDiscord> <impbox [ftsf]> so, yes for structs as well, if the struct has an int field in c, use cint in nim
[10:01:56] <FromDiscord> <retkid> cint =/=
[10:02:21] <FromDiscord> <retkid> (edit) "cint =/= ... " 03added "int"
[10:02:28] <FromDiscord> <retkid> anywhere c is grabbing an int you want to pass ints
[10:02:36] <FromDiscord> <retkid> (edit) "ints" => "cints"
[10:03:12] <FromDiscord> <impbox [ftsf]> cint in nim = int in c↵int in nim != int in c
[10:04:10] <FromDiscord> <impbox [ftsf]> (but depending on platform/compiler int in nim might == int in c so it might look like it works, but if you move to another platform or architecture it might break)
[10:04:24] <FromDiscord> <cabboose> Anyone know if chronos async works with dynamic dispatch? I'm encountering some strange behaviour
[10:04:41] <FromDiscord> <retkid> on linux
[10:04:50] <FromDiscord> <retkid> int and cint work
[10:04:57] <FromDiscord> <retkid> cstrings are still character array's tho
[10:05:07] <FromDiscord> <retkid> (edit) "array's" => "array"
[10:06:10] <FromDiscord> <impbox [ftsf]> i haven't looked but i'd guess they become `char`
[10:06:55] <FromDiscord> <retkid> pretty sure nim just stitches them back into strings and then puts them back in arrays
[10:11:03] <NimEventer> New post on r/nim by Ether-naut: How to get the type of an instance of a subclass, see https://reddit.com/r/nim/comments/pebwxi/how_to_get_the_type_of_an_instance_of_a_subclass/
[10:27:27] <FromDiscord> <cabboose> Man i'm stupid; I forgot to import chronos on the module that had the base methods with async -.-
[10:37:52] <FromDiscord> <linux user> -
[10:38:01] <FromDiscord> <linux user> (edit) "-" => "-_-"
[11:11:06] *** Joins: PMunch (~PMunch@vpn.dualog.com)
[11:18:29] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[11:19:36] *** Joins: flynn (~mcbloch@user/flynn)
[11:30:04] <FromDiscord> <fae> idk if i'm doing something wrong in nim or xcode but i can't seem to get a simple proc call working
[11:30:43] <FromDiscord> <fae> sent a code paste, see https://play.nim-lang.org/#ix=3xp8
[11:32:01] <FromDiscord> <Rika> ?
[11:32:03] <FromDiscord> <Rika> whats the issue?
[11:32:17] <FromDiscord> <Rika> in what way does it not work
[11:32:30] <FromDiscord> <fae> and build it with `nim c -c --os:ios --noMain:on factorial.nim`  and copy the resulting C files into my xcode project, I get a linker error saying `ld: 1 duplicate symbol for architecture arm64`
[11:32:42] <FromDiscord> <fae> `duplicate symbol '_factorial' in:`
[11:33:38] <FromDiscord> <fae> pretty sure i'm not configuring xcode correctly
[11:35:57] <FromDiscord> <Elegantbeef> May want to add `cdecl` to that proc definition
[11:37:17] <FromDiscord> <enthus1ast> Also asyncnet and asyncdispatch↵(@retkid)
[11:37:54] <FromDiscord> <retkid> In reply to @enthus1ast "Also asyncnet and asyncdispatch": I’m long since been down the net rabbithole
[11:38:03] <FromDiscord> <enthus1ast> I ser
[11:38:09] <FromDiscord> <retkid> How is asyncnet different
[11:38:54] <FromDiscord> <fae> In reply to @Elegantbeef "May want to add": hmm tried that but still same linker issue
[11:39:05] <FromDiscord> <enthus1ast> They contain Async sockets
[11:39:47] <FromDiscord> <retkid> In what usecase are asynchronous sockets be useful
[11:40:59] <FromDiscord> <impbox [ftsf]> when you want to do other stuff while you wait for sockets to do their thing
[11:41:08] <FromDiscord> <enthus1ast> The netcode i usually write is async.↵You can easily handle multiple clients, states etc without threads and non blocking sockets etc
[11:41:35] <FromDiscord> <Elegantbeef> One of the major use cases of async is to avoid blocking io
[11:41:36] <FromDiscord> <Elegantbeef> Sockets are io
[11:41:40] <FromDiscord> <retkid> Well, my usecase is completely local
[11:41:47] <FromDiscord> <retkid> Only 1 client
[11:42:24] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[11:42:24] <FromDiscord> <retkid> The only thing asynchronous might be useful for is handeling multiple commands Being sent in
[11:42:27] <FromDiscord> <impbox [ftsf]> but maybe you want to process the last request while you make another request for example
[11:43:07] <FromDiscord> <impbox [ftsf]> they're useful in a lot of cases, but for very simple cases you might not need them
[11:43:18] <FromDiscord> <retkid> Thinking about it
[11:43:26] *** Joins: xet7 (~xet7@user/xet7)
[11:43:34] <FromDiscord> <retkid> Yea the nim sever might be getting pinged like 60 times a second
[11:44:46] <FromDiscord> <enthus1ast> The good thing is that they're quite similar, in fact there even is a multisync pragma so that you can use your code in async or non async fashion↵(@retkid)
[11:45:59] <FromDiscord> <enthus1ast> So quite easy to switch to async later when you need it
[11:47:00] <FromDiscord> <retkid> I’ll switch over to asynchronous sockets tomorrow. Problem is no matter what with a high volume of sends, I’ll be bottlenecked by Java
[11:47:36] <FromDiscord> <retkid> Unless I do some fancy Java parallelism which might not be a thing
[11:48:40] <FromDiscord> <impbox [ftsf]> what are you making?
[11:49:11] <FromDiscord> <retkid> Nim server for maths and atmospherics and physics
[11:49:17] <FromDiscord> <retkid> (edit) "Nim server for maths and atmospherics and ... physics" 03added "partial"
[11:49:35] <FromDiscord> <retkid> Java for applying the outcomes
[11:50:14] <FromDiscord> <retkid> This frees me to make things as detailed as I want without worrying about performance, practically
[12:00:00] <PMunch> Congrats @exelotl on the Goodboy Galaxy Kickstarter!
[12:00:24] <FromDiscord> <impbox [ftsf]> oh yeah! i need to add my fund that!
[12:06:53] <PMunch> Ah damn, the demo doesn't seem to run under Wine..
[12:07:36] <PMunch> I just get an error from wTextCtrl.nim(993) init: Error: unhandled exception: cannot wrap this textctrl. [wError]
[12:17:11] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[12:18:33] *** Joins: xet7 (~xet7@user/xet7)
[12:19:03] *** Quits: xet7 (~xet7@user/xet7) (Read error: Connection reset by peer)
[12:20:10] *** Joins: xet7 (~xet7@user/xet7)
[12:28:42] <FromDiscord> <fae>  https://media.discordapp.net/attachments/371759389889003532/881810143766020116/image0.png
[12:28:50] <FromDiscord> <fae> Yay I got it working on iOS
[12:29:19] <FromDiscord> <fae> Time for Android 😅
[12:29:55] <PMunch> Oh nice
[12:30:10] <PMunch> What is it that you're running?
[12:31:02] <FromDiscord> <fae> just trying to compile nim procs to c and call them from swift
[12:32:06] <FromDiscord> <fae> is there a way to generate header only files with the c compiler? I needed to manually add my function declarations to the `Bridging-Header.h` file
[12:33:30] *** Joins: max22- (~maxime@2a01cb0883359800e8f3a18d7241b1b5.ipv6.abo.wanadoo.fr)
[12:34:36] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:75d9:8ee9:c723:ca70)
[12:35:53] <FromDiscord> <haxscramper> `--header` is deprecated, so currently the only "official" way to do this is to write things manually
[12:36:37] <PMunch> Wait, is `--header` deprecated?
[12:36:43] <PMunch> That's a shame
[12:37:16] <FromDiscord> <haxscramper> But if you want I suppose you can use `--header`, since it was deprecated because of https://github.com/nim-lang/Nim/commit/279df834bae8b6972af6cbcbdd57c1d53e1df9c7
[12:37:50] *** Joins: Vladar (~Vladar@46.162.2.53)
[12:38:37] <FromDiscord> <fae> ahh. Well considering I only plan on having one entry point it’s not really a big deal
[12:39:00] <FromDiscord> <haxscramper> It is still even in devel docs https://nim-lang.github.io/Nim/backends.html#interfacing-backend-code-calling-nim
[12:39:22] <FromDiscord> <haxscramper> > ↵> The Nim compiler can generate a C interface header through the --header command-line switch. The generated header will contain all the exported symbols and the NimMain proc which you need to call before any other Nim code.↵>
[12:40:03] <FromDiscord> <haxscramper> So I suppose you can use it, just be aware that it is "kind of not recommended to do so"
[12:40:16] <FromDiscord> <fae> Gotcha, ty for the reference
[12:40:34] <FromDiscord> <xflywind> PR is welcome to remove the docs.
[12:41:30] <FromDiscord> <haxscramper> I'm the wrong person to do so, if anything I'd prefer to have `--header` or something similar to this
[12:42:18] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[12:43:05] <FromDiscord> <xflywind> I see, I'll make an issue
[12:43:57] *** Joins: xet7 (~xet7@user/xet7)
[12:44:32] <FromDiscord> <haxscramper> Maybe there is no need to push so hard for this to be completely eradicated?
[12:45:58] <FromDiscord> <fae> It could be helpful to people like myself who aren’t very familiar with native compilation
[12:47:21] <FromDiscord> <xflywind> ok
[12:47:22] <FromDiscord> <haxscramper> I suppose something like `--header` is deprecated, please write your 120 exported procs by hand in C
[12:47:22] <FromDiscord> <haxscramper> Would be more appropriate for now
[12:47:43] <FromDiscord> <haxscramper> Util it is completely removed from the compiler
[12:48:03] <FromDiscord> <Elegantbeef> I do have to ask hax, did it need much/any manual touch up?
[12:48:35] <FromDiscord> <dom96> I wish it wasn’t deprecated :/
[12:48:37] <FromDiscord> <dom96> I use it
[12:48:45] <FromDiscord> <haxscramper> `--header`?
[12:48:45] <FromDiscord> <xflywind> It has been removed from command helps though
[12:48:45] <FromDiscord> <Elegantbeef> The output file
[12:48:47] <FromDiscord> <haxscramper> No, I don't recall doing any manual modifications to it
[12:49:14] <FromDiscord> <dom96> If it’s really deprecated though. The compiler should output a warning when it’s used
[12:49:24] <FromDiscord> <Rika> It is a shame it was removed, but is there anyone to maintain it?
[12:49:25] <FromDiscord> <Elegantbeef> I mean it's clearly a beneficial feature to have
[12:50:05] <FromDiscord> <haxscramper> If we could `{.push` custom macros it would mostly solve the problem I think
[12:50:06] <FromDiscord> <haxscramper> https://github.com/nim-lang/Nim/commit/279df834bae8b6972af6cbcbdd57c1d53e1df9c7#commitcomment-53179688
[12:50:47] <FromDiscord> <linux user> repost
[12:52:31] <FromDiscord> <fae> i feel i brought up a touchy subject lol
[12:52:57] <FromDiscord> <Rika> Doesn’t seem to be touchy
[12:53:35] <PMunch> Everyone seems to agree that we want the feature, just no-one wants to maintain it :P
[12:53:40] <FromDiscord> <fae> it didnt until i read the comments on the commit
[12:53:46] <FromDiscord> <impbox [ftsf]> seems like a useful feature to have, but sounds like it's a pain to implement
[12:53:47] <FromDiscord> <fae> from at least one individual
[12:53:48] <FromDiscord> <dom96> Could we reimplement it with macros? 😄
[12:54:36] <PMunch> Hmm, I guess some of it could be done by a macro
[12:54:49] <PMunch> But it might be hard to get totally right
[12:54:52] <FromDiscord> <dom96> I’m wondering where the complexity is
[12:55:01] <FromDiscord> <dom96> I did just wake up though
[12:55:17] <PMunch> Well it requires you to turn Nim AST into C signatures, something the compiler already knows how to do..
[12:55:40] <FromDiscord> <Elegantbeef> I mean you'd do the same work the compiler did
[12:56:02] <PMunch> And then you'd need to figure out how this all should be written to a file, something which sounds easy until you start considering imports, ordering, etc.
[12:56:02] <FromDiscord> <Elegantbeef> You'd be rewriting cgen inside the nim vm basically
[12:56:18] <PMunch> Exactly, so it's definitely beneficial for the compiler to handle it
[12:56:50] <PMunch> I mean it is already generating the C code, so it's just a matter of not generating the code, but just the signatures.
[12:57:06] <FromDiscord> <Elegantbeef> There is also a possible issue of naming of types/fields but idk about that one
[12:57:23] <FromDiscord> <haxscramper> In reply to @dom96 "Could we reimplement it": we can, just make something like `.exportcWithHeader.` and then call compile-time `writeHeaders()`
[12:57:33] <FromDiscord> <dom96> Hm. Could it be restricted in such a way that it makes generation easier? For example: only C types allowed (cstring etc)
[12:57:40] <FromDiscord> <haxscramper> `const headerDir {.strdefine.} = <get nimcache directory>`
[12:57:46] <FromDiscord> <Elegantbeef> when a programmer uses the word "just" be cautious 😛
[12:57:48] <FromDiscord> <dom96> In reply to @haxscramper "we can, just make": Yeah. That’s what I have in mind.
[12:58:21] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:75d9:8ee9:c723:ca70) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:59:02] <PMunch> You'd still need to get Nims C mangling rules right
[12:59:07] <FromDiscord> <haxscramper> No
[12:59:12] <PMunch> Which might actually be impossible to do from a macro
[12:59:21] <FromDiscord> <fae> I dont really understand C very well but it looks like the compiler already kind of generates headers inside of the generated `.c.` files even without the `--headers` flag
[12:59:25] <FromDiscord> <haxscramper> When nim generates headers it generates regular names
[12:59:36] <FromDiscord> <impbox [ftsf]> for exportc procs they should be the same right?
[12:59:41] <FromDiscord> <impbox [ftsf]> not mangled
[12:59:43] <FromDiscord> <haxscramper> I have `.exportc.` already, so I don't  have to deal with `sdjf;klasjdfklasjd` sighashes
[12:59:46] <FromDiscord> <fae> sent a code paste, see https://play.nim-lang.org/#ix=3xpF
[12:59:49] <FromDiscord> <Elegantbeef> Seems the idea is you search the nim output dir to get the signtures
[12:59:55] <FromDiscord> <fae> and then the definition is bleow
[13:00:24] <FromDiscord> <fae> (edit) "`.c.`" => "`.c`"
[13:00:54] <FromDiscord> <haxscramper> In reply to @Elegantbeef "Seems the idea is": No, signatures have nothing to do with anything, we want to generate usable header, which means there is no signatures involved as I have all procs already annotated with `.exportc`
[13:00:54] <FromDiscord> <Elegantbeef> Those are forward declared
[13:00:57] <FromDiscord> <haxscramper> That does not mangle names
[13:01:14] <FromDiscord> <Elegantbeef> But parameters names can be no?
[13:01:22] <FromDiscord> <Elegantbeef> say you take a `seq[byte]`
[13:01:45] <FromDiscord> <haxscramper> Well, the moment I find out how to sanely interface between C and nim generics I will let you know
[13:02:13] <FromDiscord> <haxscramper> and `seq[byte]` details is an impl. detail
[13:02:17] <FromDiscord> <Elegantbeef> Can you exportc an alias?
[13:03:01] <FromDiscord> <dom96> Usually you’d avoid exporting Nim procs that take Nim types.
[13:03:18] <FromDiscord> <dom96> So I think it’s fair to not bother supporting those
[13:04:01] <FromDiscord> <haxscramper> For `seq[int]` `--header` generates `N_LIB_PRIVATE N_NIMCALL(tySequenceqwqHTkRvwhrRyENtudHQ7g, aa)(void);`
[13:04:13] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3xpH
[13:04:16] <FromDiscord> <Elegantbeef> Ah you can export aliases
[13:04:17] <FromDiscord> <haxscramper> You can't get around it
[13:04:54] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3xpJ
[13:05:04] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3xpK
[13:05:13] <FromDiscord> <haxscramper> But that's just `{.exportc.}` everything just as I said
[13:05:23] <FromDiscord> <haxscramper> but still
[13:05:54] <FromDiscord> <haxscramper> So in the end it can be just done via simple name-based translation
[13:06:23] <FromDiscord> <Elegantbeef> Yea i was just curious if you could get a usable C type name for generics
[13:10:23] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3xpL
[13:10:51] <FromDiscord> <haxscramper> `exHeader` implementation is left as an exercise for the reader
[13:10:52] <FromDiscord> <Elegantbeef> Could just link the cgen directory for that 😜
[13:11:18] <FromDiscord> <haxscramper> Well, maybe I will implement something like that in hmisc
[13:30:11] *** Joins: krux02 (~krux02@p4ff8b737.dip0.t-ipconnect.de)
[13:30:11] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:75d9:8ee9:c723:ca70)
[13:45:09] *** Joins: razzlom (~razzlom@176.59.57.159)
[13:57:14] *** Quits: razzlom (~razzlom@176.59.57.159) (Quit: Quit)
[13:58:55] *** Joins: razzlom (~razzlom@176.59.57.159)
[14:00:04] <emery> can anyone see anything oviously wrong with this type? I'm losing a layer of the generic typing with the sets https://play.nim-lang.org/#ix=3xq3
[14:06:16] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:75d9:8ee9:c723:ca70) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:07:23] <FromDiscord> <KnorrFG> Hey, is anyone aware of a "bidirectional table" for nim?
[14:10:24] <FromDiscord> <impbox [ftsf]> not that i know of, but it seems like it'd be trivial to make
[14:11:53] *** Joins: zargot (~zargot@84.211.51.147)
[14:22:39] <FromDiscord> <impbox [ftsf]> @KnorrFG https://play.nim-lang.org/#ix=3xqn
[14:23:24] <emery> my bad type, but simpler https://play.nim-lang.org/#ix=3xqp
[14:23:36] *** Quits: razzlom (~razzlom@176.59.57.159) (Remote host closed the connection)
[14:24:31] <FromDiscord> <impbox [ftsf]> @KnorrFG though this implementation won't work if your key and value are the same type since the calls will be ambigious
[14:40:12] <FromDiscord> <KnorrFG> thanks for the answer. Yeah I know, its not that hard superficially, but I foggily remember that just wrapping 2 tableswasnt a good idea for some reason. Also I didnt want to reimplement all the methods 😛
[14:40:30] <FromDiscord> <impbox [ftsf]> just implement the ones you need =)
[14:41:47] <FromDiscord> <impbox [ftsf]> i guess there's probably less memory heavy ways where you'd only store the data once and then use indices or something, but depends if that's a bottleneck
[14:54:05] *** Joins: arkurious (~arkurious@user/arkurious)
[15:02:55] <FromDiscord> <Rika> In reply to @impbox "<@!689821975463460892> https://play.nim-lang.org/#i": If the types are the same you can just use the same table
[15:03:03] <FromDiscord> <Rika> Rather a single table
[15:15:50] <FromDiscord> <impbox [ftsf]> not necessarily
[15:16:34] <FromDiscord> <Rika> I don’t see why
[15:16:38] <FromDiscord> <Rika> Not
[15:16:39] <FromDiscord> <impbox [ftsf]> both types might be strings, but A"foo" -> B"bar" but A"bar" -> B"baz"
[15:17:07] <FromDiscord> <Rika> I thought the invariant was that the value points to the key and the key points to the value
[15:18:39] <FromDiscord> <impbox [ftsf]> Key"foo"  -> Value"bar"↵Key"bar" -> Value"baz"↵but to get the reverse you need a separate table that maps Value"bar"->Key"foo"
[15:19:41] <FromDiscord> <Rika> Well how would you access the bar that points to baz?
[15:20:07] <FromDiscord> <Rika> Are there two procs for “key index” and “value index”?
[15:20:34] <FromDiscord> <impbox [ftsf]> that's what I was saying, that implementation wouldn't work because it'd be ambiguous
[15:20:43] <FromDiscord> <impbox [ftsf]> but you could use distinct types
[15:21:08] <FromDiscord> <impbox [ftsf]> or add a reverse lookup proc
[15:21:10] <FromDiscord> <haxscramper> For bidirectional `Set[Key] -> Value` I had to do https://haxscramper.github.io/hmisc/hmisc/types/rev_set_table.html
[15:21:26] <FromDiscord> <haxscramper> Which has explicit reverse lookup procs
[15:22:00] <FromDiscord> <haxscramper> If I drop `Value -> Set[Key]` getters, I still need to have two bidirectional checks
[15:22:56] <FromDiscord> <Rika> Okay I get it
[15:23:07] <FromDiscord> <haxscramper> And double all API parts, like `hasKey()`, `hasValue()`, `getKey(V)`, `getValue(K)`
[15:29:29] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[15:34:44] <FromDiscord> <enthus1ast> Or have 3 tables one with the data, one with one relation, one with the other, then lookup In relation table and get the data in a second lookup
[15:35:25] <FromDiscord> <enthus1ast> Have build a "database" this way
[15:43:12] <FromDiscord> <Rika> In reply to @enthus1ast "Have build a "database"": So a graph database
[15:45:12] <FromDiscord> <haxscramper> How do I debug 'generic instantiation is too nested', especially when it seems like everything is working as expected? I did `static: echo` for instantiated types, and it does not show any weird loops or anything of that sort
[15:45:20] <FromDiscord> <haxscramper> I do have relatively deep instantiation though
[15:48:49] <FromDiscord> <exelotl> Thanks PMunch and @impbox [ftsf] <3
[15:49:30] <PMunch> It looks awesome as always!
[15:49:39] <PMunch> But I can't run the emulated version under Wine (:
[15:49:41] <PMunch> :(*
[15:50:42] <FromDiscord> <exelotl> Oh, the PC download doesn't work in Wine due to something going wrong in wNim I think
[15:51:00] <PMunch> Yeah I got an error from wNim
[15:52:10] <PMunch> wTextCtrl.nim(993) init: Error: unhandled exception: cannot wrap this textctrl. [wError]
[15:52:10] <FromDiscord> <exelotl> It's strange, just some winapi function returning null when it shouldn't, but I didn't have time to figure it out :(
[15:53:06] <FromDiscord> <exelotl> But you can always install mGBA or another emulator of your choice and run the game in there ^^
[15:55:20] <FromDiscord> <exelotl> Also we added more physical copies to the KS page, these are the "regular" First Press editions, but will be unlimited hopefully! :D
[16:11:20] <PMunch> Oh nice, unfortunately I'm so old that I only have a GBC..
[16:16:13] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:75d9:8ee9:c723:ca70)
[16:32:50] <PMunch> Is there a way to get the names of built-in stuff?
[16:33:09] <PMunch> Or should I just used declared or whatever it's called to avoid collisions with existing names?
[16:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:16] <PMunch> Hmm "declared" doesn't work for e.g. "else"
[16:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:36:30] <PMunch> I just want to check if something would be a valid type name or if it would collide with anything
[16:37:30] <PMunch> I guess I could manually copy this list.. https://nim-lang.org/docs/manual.html#lexical-analysis-identifiers-amp-keywords
[16:38:09] <FromDiscord> <Rika> I’m interested in why you need this haha
[16:39:00] <FromDiscord> <impbox [ftsf]> maybe there's a isValidIdentifier function in nim somewhere
[16:39:22] <FromDiscord> <impbox [ftsf]> https://github.com/nim-lang/Nim/blob/8ccde68f132be4dba330eb6ec50f4679e564efac/doc/keywords.txt
[16:40:37] <FromDiscord> <haxscramper> `std/strutils.validIdentifier`
[16:40:55] <FromDiscord> <haxscramper> PMunch\: do you need this for your clang bindings?
[16:41:23] <FromDiscord> <impbox [ftsf]> https://github.com/nim-lang/Nim/blob/version-1-4/lib/pure/strutils.nim#L2389 doesn't look like that checks against keywords
[16:41:37] <PMunch> @Rika, I'm using libclang to automatically create Nim bindings for C libraries
[16:41:40] <FromDiscord> <haxscramper> https://haxscramper.github.io/hmisc/hmisc/algo/namegen.html#isReservedNimWord%2Cstring
[16:42:41] <PMunch> Oh cool, that'll be helpful
[16:42:50] <FromDiscord> <haxscramper> ffs, nim "--PrOJeCt" is randomly breaks source links. Anyway, full list is https://github.com/haxscramper/hmisc/blob/master/src/hmisc/algo/namegen.nim#L147
[16:43:37] <FromDiscord> <whisperdev> Hmm how does one zip a single file with this library? https://github.com/guzba/zippy
[16:43:40] <nrds> <12R2D299> 4GitHub: 7"Pure Nim implementation of deflate, zlib, gzip and zip."
[16:44:09] <FromDiscord> <haxscramper> `readFile().compress()`?
[16:44:25] <FromDiscord> <haxscramper> `writeFile("out", "in".readFile().compress())`
[16:45:01] <FromDiscord> <whisperdev> aha
[16:46:01] <FromDiscord> <whisperdev> Thanks!
[16:51:11] *** Quits: xet7 (~xet7@user/xet7) (Read error: Connection reset by peer)
[16:51:32] *** Joins: xet7 (~xet7@user/xet7)
[16:53:19] <PMunch> Uhm, that would read the entire file into memory though
[16:53:20] <PMunch> So beware
[16:56:38] <FromDiscord> <whisperdev> It seems I cant just unzip the file afterwards in Windows
[16:56:58] <FromDiscord> <impbox [ftsf]> it's probably not a zip
[16:57:10] <FromDiscord> <impbox [ftsf]> just a compressed file
[16:57:24] <FromDiscord> <impbox [ftsf]> rather than an archive of multiple files
[16:58:25] <FromDiscord> <Rika> In reply to @PMunch "<@259277943275126785>, I'm using libclang": Ooh I see
[16:58:29] <FromDiscord> <impbox [ftsf]> https://github.com/guzba/zippy/blob/master/examples/ziparchive_compose.nim#L5
[16:58:37] <FromDiscord> <impbox [ftsf]> @whisperdev try this
[16:58:56] <FromDiscord> <whisperdev> I was looking at it before
[16:58:59] <FromDiscord> <whisperdev> now it makes sense
[17:10:15] *** Joins: rockcavera (~rc@192.12.113.206)
[17:10:15] *** Quits: rockcavera (~rc@192.12.113.206) (Changing host)
[17:10:15] *** Joins: rockcavera (~rc@user/rockcavera)
[17:18:07] *** Quits: max22- (~maxime@2a01cb0883359800e8f3a18d7241b1b5.ipv6.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[17:21:37] <FromDiscord> <Cark> how can I get an openarray from a bunch of bytes at some pointer address (i have the length too)
[17:22:41] <FromDiscord> <Cark> (edit) "how can I get an openarray from a bunch of bytes at some pointer address (i have the length too) ... " 03added "?"
[17:23:10] <PMunch> @Cark, probably this: https://nim-lang.github.io/Nim/system.html#toOpenArray%2Cptr.UncheckedArray%5BT%5D%2Cint%2Cint
[17:23:33] <FromDiscord> <Cark> mhh worth a try, thanks !
[17:25:04] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[17:26:11] *** Joins: flynn (~mcbloch@user/flynn)
[17:26:51] <FromDiscord> <Neko~Neko~ni> sent a long message, see http://ix.io/3xr6
[17:31:22] <FromDiscord> <impbox [ftsf]> nim doesn't create the executable, the C linker does, so it's up to that to support it
[17:31:32] <FromDiscord> <impbox [ftsf]> you can pass arguments to the linker to specify the icon
[17:32:07] <FromDiscord> <Neko~Neko~ni> i know that but aren't there option in gcc for adding icons
[17:32:27] *** Joins: kayabaNerve_ (~kayabaNer@user/kayabanerve)
[17:32:42] <FromDiscord> <impbox [ftsf]> --passL:"icon.res"
[17:33:16] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Killed (NickServ (GHOST command used by kayabaNerve_)))
[17:33:20] <FromDiscord> <Neko~Neko~ni> i see.how do i pass arguments to the linker?
[17:33:20] *** kayabaNerve_ is now known as kayabaNerve
[17:33:29] <FromDiscord> <impbox [ftsf]> with --passL
[17:33:46] <FromDiscord> <impbox [ftsf]> `--passL:"this is an argument to the linker"`
[17:33:58] <FromDiscord> <impbox [ftsf]> https://nim-lang.org/docs/nimc.html
[17:33:59] <FromDiscord> <Neko~Neko~ni> gottcha👍
[17:37:48] <FromDiscord> <whisperdev> @impbox [ftsf] That worked great.
[17:38:31] <FromDiscord> <whisperdev> How would I overwrite the the compression method parameters when calling the writeZipArchive method?
[17:38:39] <FromDiscord> <whisperdev> Or would I just make my own declaration with what I want?
[17:42:50] <FromDiscord> <impbox [ftsf]> i'm not sure sorry
[17:44:02] <FromDiscord> <whisperdev> Not a question for you and in regard to zippy just in general 😄
[18:14:36] *** Quits: PMunch (~PMunch@vpn.dualog.com) (Quit: Leaving)
[18:41:36] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:75d9:8ee9:c723:ca70) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[18:52:26] *** Quits: krux02 (~krux02@p4ff8b737.dip0.t-ipconnect.de) (Quit: Leaving)
[19:25:00] <FromDiscord> <Cark> ok so I think I'm missing some declarations in winuser.h, which i guess is the one in my mingw64 distribution. I'm on windows, my guess is that nim uses the mingw64 which is in the path
[19:25:32] <FromDiscord> <Cark> that version is quite outdated on my computer, and i see the current mingw64 has that declaration
[19:25:56] <FromDiscord> <Cark> can i just replace the content of that folder with the updated version ?
[19:27:50] <FromDiscord> <Cark> btw i've been trying clang-cl and vcc, but so many warnings =)
[19:28:48] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[19:29:30] <FromDiscord> <Yardanico> In reply to @Cark "btw i've been trying": that's not really an issue, nim silences them usually, if it doesn't then something's wrong :P
[19:29:33] <FromDiscord> <Yardanico> In reply to @Cark "can i just replace": yes
[19:29:49] <FromDiscord> <Cark> @Yardanico thanks !
[19:29:55] *** Joins: flynn (~mcbloch@user/flynn)
[19:30:04] <FromDiscord> <Cark> doesn't silence them on my computer though ...maybe something wrong here
[19:32:36] <FromDiscord> <Cark> ah i now can declare the missing function, and it actually works, thanks again
[19:40:08] *** Joins: max22- (~maxime@2a01cb08833598003c11741276acc8d8.ipv6.abo.wanadoo.fr)
[19:49:33] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:75d9:8ee9:c723:ca70)
[20:10:20] *** Joins: beshr (~beshr@user/beshr)
[20:18:50] <FromDiscord> <dauuricus (haywhnk)> i'm searching for info about how to build Nim compiler on termux ...
[20:35:38] *** pch_ is now known as pch
[20:49:19] <NimEventer> New thread by JohnLuck: Any way to avoid the SQL bugs and execute raw strings?, see https://forum.nim-lang.org/t/8382
[21:04:48] *** Quits: zargot (~zargot@84.211.51.147) (Quit: leaving)
[21:44:10] *** Joins: pro (~pro@user/pro)
[21:54:29] <FromDiscord> <Goat> Anyone here know of a good Emacs .org parser for nim?
[22:02:55] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[22:10:54] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[22:12:01] *** Joins: flynn (~mcbloch@user/flynn)
[22:19:15] <FromDiscord> <haxscramper> Good/working - no, but I'm finally (after N months of delays) got back to https://github.com/haxscramper/haxorg and I want to finish it
[22:19:18] <nrds> <12R2D299> 4GitHub: 7"<No Description>"
[22:21:16] <FromDiscord> <haxscramper> Right now I got implementation of the main lexer logic, some parsing, tree pretty-printing for parsed tree, AST spec for untyped and WIP spec for semchecked AST
[22:46:59] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:75d9:8ee9:c723:ca70) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:54:17] *** Quits: flynn (~mcbloch@user/flynn) (Remote host closed the connection)
[22:55:20] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:75d9:8ee9:c723:ca70)
[22:55:24] *** Joins: flynn (~mcbloch@user/flynn)
[23:14:07] *** Quits: pro (~pro@user/pro) (Quit: WeeChat 3.2)
[23:33:42] <FromDiscord> <RattleyCooper> I compiled nim 1.4.8 on my rapsberry pi 4 but for some reason it really doesn't like this line from `netty`:  `r.rand(high(uint32).int).uint32` .  For some reason it doesn't want to convert an `int` to an `int32` (or maybe it's the other way around).
[23:35:23] <FromDiscord> <RattleyCooper> The `netty` script is the same on both my windows machines and the raspberry pi machine and it still throws an error when I try to use it on the rpi
