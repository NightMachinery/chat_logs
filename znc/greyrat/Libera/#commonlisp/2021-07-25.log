[00:01:27] <nij-> jackdaniel: you're right. Here's how stumpwm create a modeline - https://github.com/stumpwm/stumpwm/blob/7fe59c00810b35843139194525db444a2c26aa72/mode-line.lisp#L214
[00:05:58] <nij-> However, modeline isn't interactive. On the other hand, it seems that stumpwm uses dark magic (NOT by create-window) to create an interactive menu - the deepest thing I got is here. https://github.com/stumpwm/stumpwm/blob/a5ab063398cbea2dbfe711cacd5623b0c5779bf4/input.lisp#L424 I got lost in the abstraction and failed to see how it uses CLX to create a top-level interactive window.
[00:20:23] *** Joins: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com)
[00:21:49] <MichaelRaskin> There is always trace…
[00:21:53] <jeosol> _death: No I haven't. I will check it out
[00:23:27] <jeosol> Just wondering if there are folks where working with deep-learning related project but using python libraries (pytorch or tensorflow) -- With some effort we can consolidate some of the related cl libraries (clml and those from gabor melis)
[00:27:06] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 240 seconds)
[00:27:43] <jeosol> _death: thanks
[00:39:42] <nij-> MichaelRaskin: Thanks! Im reading CLX's manual to find out. Need more familiarity with it. :)
[00:41:16] *** Joins: kpoeck (~kpoeck@87.140.194.0)
[00:41:59] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 265 seconds)
[00:42:50] <MichaelRaskin> nij-: radical approacj: enumerate exported symbols from CLX, trace all of them
[00:44:02] *** Joins: silasfox (~sbv@165.56.186.128)
[00:44:53] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 255 seconds)
[00:45:13] <_death> jeosol: there was also https://github.com/chunsj/TH
[00:49:52] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[00:57:46] <jeosol> _death: nice, thanks for the links and the updates are recent too. I will reach out to the author later
[00:57:57] <jeosol> *fairly recent
[01:07:03] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[01:07:26] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[01:07:34] <jeosol> _death: his development is much further along. I sent him a message. Barring any licensing issues, I explore the library further once I hear back from him. Perhaps we can coalesce around a library and some development effort to it
[01:10:15] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[01:11:19] <_death> jeosol: cool.. personally I'm not doing "deep learning" nowadays (except for small stuff like translating swedish subtitles to english, but py4cl2 is sufficient there :) but good to keep up to date with Lisp libraries
[01:13:22] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 240 seconds)
[01:17:42] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-EC96-dynamic.midco.net) (Remote host closed the connection)
[01:23:30] <jeosol> _death: you are swedish?
[01:23:55] <jeosol> _death: so you call python/tensorflow/torch libraries from the cl side to do related work?
[01:25:19] <jeosol> It will take lots of efforts to get close to related libraries in python land. I don't think that's the goal except we get an army of developers - maybe get some of the core nets in CL. But again, people will say, if you can access the libraries from python, what's the point
[01:26:55] <_death> jeosol: not swedish, just watching some series.. in that case I do call python, yes.. with a library like "nlu" it's even easy
[01:27:20] <jeosol> _death: you are doing real time translation?
[01:27:46] <_death> jeosol: calling out to python would be more painful if the task were more complex
[01:27:48] <jeosol> that's how I use the libraries for now too, I write python, them call it from the CL side
[01:28:01] <jeosol> _death: yes, I agree.
[01:28:37] <_death> jeosol: no.. and in fact it takes a long time (minutes) to translate, since nlu uses the CPU.. but the results are pretty good
[01:28:47] <jeosol> tensorflow is awkward in a sense, I them learned that it was because of the underlying C++ implementation
[01:29:18] <jeosol> hahaha - not real time. But you are getting good results. I should look into that library
[01:29:59] <jeosol> The computations are expensive for sure
[01:30:19] <_death> it uses pyspark.. in some cases there may be a way to use the GPU, but I think it's not supported with the versions I used
[01:30:31] *** Quits: pve (~pve@87-93-254-155.bb.dnainternet.fi) (Quit: leaving)
[01:30:52] <_death> and anyway, it was an inference task with an existing model, so no big deal
[01:30:53] <jeosol> I see. I was planning to buy a GPU at some point but hoping also it will help my related CL programs.
[01:30:57] *** Joins: selwyn (~selwyn@user/selwyn)
[01:31:24] <jeosol> that's good at least it's working for you - calling an existing model. I think that's now most of the models are used anyway
[01:31:31] *** Joins: hafat (~hafat@95.70.168.45)
[01:32:11] <jeosol> They have lots of parameters, and have been trained on larger corpus of words. Same in the vision/object recognition space
[01:32:15] <lisp123_> on this topic, is SBCL the best for numeric computations?
[01:32:19] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[01:32:26] <_death> for trying existing models I also used OpenCV's DNN support (I wrote some opencv bindings).. there's the onnx zoo where some models are usable
[01:32:43] <jeosol> lisp123_: my projects are mostly computational,- sbcl gives good performance
[01:33:14] <lisp123_> jeosol: thanks, that's what I heard also (hence I'm sticking to SBCL currently)
[01:33:21] <jeosol> by computational - i mean number crunching
[01:33:25] <_death> and also there was some experiment using zeromq to communicate with javascript code which used some tensorflow..
[01:33:49] <_death> so there are many ways to utilize non-Lisp code while staying with Lisp
[01:34:00] <jeosol> lisp123_: you won't go wrong with that. I have only used SBCL for several years and code will probably break with CCL
[01:34:34] <jeosol> _death: I guess that's why most won't see the need. One can already access these libraries from CL side
[01:35:34] <jeosol> I remember hearing about cl-cuda library but interested to see what kind of speed up I'd get with a GPU
[01:35:47] <jeosol> _death: you have any metrics in this regard?
[01:36:16] <_death> jeosol: possibly.. I do have pure CL libraries for machine learning tasks, but they're not "deep learning" ones
[01:36:25] <jeosol> For now I am trying to invest time in parallel build to get my application to build fast, looking into Fare's poiu
[01:37:19] <jeosol> stylewarning: not sure he is here, but he does use SBCL for computational and matrix related work
[01:37:39] <stylewarning> it’s true
[01:37:44] <lisp123_> jeosol: thanks. I wish we weren't heading towards everything is tested on SBCL and may not work on other implementations
[01:37:51] <jeosol> I have gotten good performance with SBCL but I have not done much benchmarking with other languages
[01:37:52] <_death> jeosol: it depends on the task, implementation, and hardware.. it could easily go from the order of hours to minutes
[01:38:13] <stylewarning> lisp123_: it takes a lot of work to do high performance testing and porting to other compilers
[01:38:45] <lisp123_> stylewarning: I can imagine :-)
[01:39:03] <stylewarning> lisp123_: we ported our stuff to ccl, allegro, and ecl; no doubt they’ve bit rotted, and allegro requires a long exchange with Franz engineers and never quite resolving the problems
[01:39:20] *** Quits: Devon (~user@c-24-2-157-5.hsd1.ma.comcast.net) (Ping timeout: 255 seconds)
[01:39:32] <stylewarning> LispWorks refused to implement complex double float arrays IIRC :(
[01:39:33] <jeosol> _death: interesting ... I do simulation work (fluid mechanics + numerical differentiation) . I was running a model that took 60 minutes, a friend said he used GPU and was able to get it to 400 seconds.
[01:40:35] <_death> jeosol: sounds plausible.. I think in my last job I've also seen some x10 speedup for some cpu->gpu task
[01:40:49] <jeosol> lisp123_: yeah, I think shinmera maintains a page that shows tests with several CL libraries: I think the SBCL column is mostly green all the way down, maybe followed by CCL
[01:40:52] <lisp123_> stylewarning: nice :-) that's a lot of effort
[01:41:09] <jeosol> lisp123_: you don't like SBCL?
[01:41:40] <Shinmera> jeosol: https://portability.cl
[01:41:45] <jeosol> _death: thanks for that metric. I thought my friend was BSing me. I don't have a gpu to test
[01:41:56] <jeosol> shinmera: to the rescue, thanks buddy
[01:42:33] <lisp123_> jeosol: I do, I just also like that there is diversity since new ideas come from that - but all that said, its not like I would make that much effort to make my code portable (behind the basic stuff) so hopefully my comment isn't taken the wrong way :-)
[01:42:42] <Shinmera> unfortunately creating that page did not have the intended effect of pushing people to increase coverage.
[01:42:43] <Shinmera> Oh well.
[01:43:10] <jeosol> Shinmera: great work. It will be nice if they do. I see you have a column for SICL already
[01:45:16] <jeosol> lisp123_: I see what you mean. I think SBCL and CCL are the big free implementations. Early when I started, I once looked into Franz, but there was a timing limit and some limit what you could do. Then CMUCL, then just SBCL since.
[01:46:49] <moon-child> Shinmera: I see some cells are marked with an asterisk, but there's no mention of its meaning?
[01:47:18] <Shinmera> if you hover you'll see popups for version requirements
[01:47:22] <Shinmera> (either library or implementation)
[01:47:43] <Shinmera> if you activate the long list view with the button in the top right you can see more detailed explanations.
[01:54:34] *** Joins: svillemot (~sebastien@rama.villemot.name)
[02:04:09] *** Joins: Devon (~user@c-24-2-157-5.hsd1.ma.comcast.net)
[02:04:53] *** Quits: lisp123_ (~lisp123@45.86.201.13) (Read error: Connection reset by peer)
[02:06:12] *** Devon is now known as Devon7
[02:06:22] *** Devon7 is now known as Devon
[02:27:17] *** Quits: silasfox (~sbv@165.56.186.128) (Ping timeout: 258 seconds)
[02:31:05] *** Quits: frgo_ (~frgo@p200300deef181d0041b2662f828e694c.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:31:32] *** Joins: frgo (~frgo@p200300deef181d0041b2662f828e694c.dip0.t-ipconnect.de)
[02:38:42] *** Joins: dsk (~dsk@user/dsk)
[02:55:58] *** Joins: Oladon (~olad@98.43.81.226)
[03:02:45] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[03:10:34] <Oladon> Why does emacs highlight any function that starts with "check-" in red? Is there some convention there I don't know about?
[03:12:10] *** Quits: gaqwas (~john@dynamic-095-118-078-069.95.118.pool.telefonica.de) (Ping timeout: 240 seconds)
[03:13:28] *** Joins: blihp (~blihp@c-68-43-233-92.hsd1.mi.comcast.net)
[03:14:21] <aeth> and with- in blue.
[03:14:43] <aeth> and define- in blue
[03:15:00] <Oladon> I'd consider with- to be a sortof convention
[03:15:05] <aeth> Those are actual conventions though, while I haven't seen any check- other than the built-in cl:check-type, though
[03:15:33] <Oladon> Hrm, interesting
[03:19:08] *** Quits: hafat (~hafat@95.70.168.45) (Quit: Leaving)
[03:22:52] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 258 seconds)
[03:22:59] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[03:27:26] *** Joins: zacts (~zacts@user/zacts)
[03:27:46] *** Quits: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net) (Ping timeout: 265 seconds)
[03:53:03] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[03:53:36] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[03:54:09] *** Joins: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net)
[03:57:07] <edgar-rft> Oladon: red highlight is probably because of CL:CHECK-TYPE -> http://www.lispworks.com/documentation/lw50/CLHS/Body/m_check_.htm
[04:07:22] *** Quits: zacts (~zacts@user/zacts) (Quit: zacts)
[04:19:39] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[04:25:34] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[04:27:18] *** Joins: beach` (~user@2a01:cb19:150:3400:741:ed06:84e2:cb5f)
[04:27:27] <_death> same with assert.. but indeed I changed the color to be less eye-popping
[04:29:46] *** Quits: akoana (~ah@user/akoana) (Remote host closed the connection)
[04:31:16] *** Quits: beach (~user@2a01:cb19:150:3400:fa26:a7f0:7f85:2f3f) (Ping timeout: 246 seconds)
[04:39:46] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 256 seconds)
[04:45:03] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[04:46:05] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 244 seconds)
[04:55:06] *** Joins: peterhil (~peterhil@mobile-access-b04801-219.dhcp.inet.fi)
[05:13:47] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (Quit: WeeChat 2.2-dev)
[05:28:18] *** Joins: akoana (~ah@user/akoana)
[05:35:57] *** Joins: taiju (~taiju@61.127.163.30)
[05:36:39] *** Quits: random-nick (~random-ni@87.116.182.181) (Ping timeout: 258 seconds)
[05:40:29] *** Quits: taiju (~taiju@61.127.163.30) (Ping timeout: 258 seconds)
[05:56:01] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[06:00:58] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[06:05:47] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Remote host closed the connection)
[06:32:34] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[06:36:55] *** Joins: zacts (~zacts@user/zacts)
[07:01:51] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[07:12:52] *** Joins: prxq (~quassel@x4db5f6fb.dyn.telefonica.de)
[07:14:27] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[07:16:34] *** Quits: prxq_ (~quassel@x4db3f526.dyn.telefonica.de) (Ping timeout: 240 seconds)
[07:16:42] *** Quits: peterhil (~peterhil@mobile-access-b04801-219.dhcp.inet.fi) (Ping timeout: 240 seconds)
[07:18:16] *** Joins: igemnace (~ian@user/igemnace)
[07:18:32] *** Joins: merazi (~merazi@190.92.33.230)
[07:36:45] *** Quits: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net) (Remote host closed the connection)
[07:38:23] *** beach` is now known as beach
[07:38:33] *** ChanServ sets mode: +o beach
[07:39:11] <beach> Good morning everyone!
[07:40:35] *** beach sets mode: -o beach
[07:45:24] <merazi> It's 21:15 here! Good night :)
[07:47:23] <beach> merazi: http://www.total-knowledge.com/~ilya/mips/ugt.html#:~:text=UGT%20%28abbr.%29%3A%20Universal%20Greeting%20Time.%20UGT%20is%20convention,time%20of%20any%20member%20of%20channel%20is%20irrelevant.
[07:48:03] <merazi> beach: Ooh! I didn't knew about that convention :P
[07:48:11] <merazi> Then... Good morning!
[07:48:28] <beach> merazi: Are you new here?  I don't recognize your nick.
[07:48:46] <merazi> Yes, I'm fairly new
[07:49:05] <beach> Welcome to #commonlisp.  What brings you here?
[07:50:00] <merazi> I'm learning Scheme, a lisp implementation (I know it's not the same as Common Lisp), and I wanted to be part of the lisp community.
[07:50:14] <beach> Great!
[07:50:27] <beach> What made you choose Scheme over Common Lisp?
[07:50:34] <merazi> SICP
[07:50:40] <merazi> A friend sent me the book
[07:50:58] <beach> I see.
[07:52:35] <merazi> Yeah
[07:52:43] <merazi> That's my story, nice to meet you! :)
[07:53:42] <beach> You too.  So have you done any programming before in any other languages?
[07:56:05] <merazi> Yes, but just Java, C and Python
[07:56:26] <beach> That's not bad.
[07:57:34] <merazi> I'm not a professional programmer but I have some experience with those languages
[07:57:52] <beach> I see.
[08:01:14] <beach> merazi: I should tell you, usually #commonlisp is fairly lively, but this is Sunday morning in Europe, and many people here are Europeans with families, so it is a bit slow during the weekend.
[08:02:30] <merazi> That's completely understandable, I won't be here 24/7 but I'll hang out occasionally.
[08:02:43] <beach> Sure.
[08:28:11] <jcowan> merazi: Not to steal you away or anything, but there is a #scheme channel as well as the #lisp channel, which is about all the Lisps.
[08:29:13] <merazi> I'm already in the #scheme channel and... *click* Now I am in the #lisp channel as well :)
[08:32:05] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[08:32:50] *** Joins: asarch (~asarch@2806:10ae:7:ea36:8b01:efac:f019:c887)
[08:33:54] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 240 seconds)
[08:35:49] <beach> clhs import
[08:35:49] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_import.htm
[08:35:55] <beach> That dictionary entry says how a conflict should be resolved when an imported symbol conflicts with an existing inherited symbol, and when it conflicts with a symbol that is present.
[08:35:59] <beach> But what about this scenario: A new symbol conflicts with a symbol that is present, but the present symbol is a shadowing symbol, and there are external symbols in the used packages that would conflict if it weren't for the fact that the present symbol is a shadowing symbol.
[08:36:00] <beach> So here is my question: Should a conflict be reported that contains also the inherited symbols?  If not, what happens if the user uninterns the present symbol?  Should the new symbol also be a shadowing symbol right away, or should a new conflict be reported?
[08:39:18] <beach> I am leaning toward not including inherited symbols in the conflict report and to make it shadowing if the present symbol is a shadowing symbol.
[08:49:40] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[08:59:58] *** Joins: torbo (~user@72.15.63.17)
[09:03:11] *** Quits: merazi (~merazi@190.92.33.230) (Quit: merazi)
[09:04:36] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 272 seconds)
[09:05:00] *** Joins: Mandus (~aasmundo@85.112.154.250)
[09:05:15] *** Quits: asarch (~asarch@2806:10ae:7:ea36:8b01:efac:f019:c887) (Quit: Leaving)
[09:07:59] *** Quits: torbo (~user@72.15.63.17) (Remote host closed the connection)
[09:10:51] *** Quits: ggoes (~gregf@user/ggoes) (Quit: WeeChat 2.3)
[09:13:01] *** Joins: ggoes (~gregf@user/ggoes)
[09:16:18] *** Quits: Mandus (~aasmundo@85.112.154.250) (Ping timeout: 256 seconds)
[09:18:19] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[10:00:44] *** Joins: gaqwas (~john@dynamic-077-007-087-014.77.7.pool.telefonica.de)
[10:01:48] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Remote host closed the connection)
[10:01:58] *** Joins: bpanthi977 (~Thunderbi@103.152.144.53)
[10:03:01] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[10:07:58] *** Quits: kpoeck (~kpoeck@87.140.194.0) (Ping timeout: 246 seconds)
[10:27:48] *** Joins: derelict (~derelict@user/derelict)
[10:29:31] *** Quits: PinealGlandOptic (~PinealGla@37.115.210.35) (Quit: leaving)
[10:47:12] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 272 seconds)
[10:47:33] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[11:02:04] *** Joins: selwyn (~selwyn@user/selwyn)
[11:02:18] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 240 seconds)
[11:04:51] *** Quits: d4ryus (~d4ryus@ppp-188-174-58-62.dynamic.mnet-online.de) (Quit: WeeChat 3.2)
[11:12:14] *** Joins: d4ryus (~d4ryus@ppp-188-174-58-62.dynamic.mnet-online.de)
[11:17:44] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 252 seconds)
[11:28:06] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[11:39:11] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 255 seconds)
[11:40:20] *** Joins: pve (~pve@188-67-199-248.bb.dnainternet.fi)
[11:48:14] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[11:57:41] *** Joins: Alfr (~Alfr@user/alfr)
[12:08:50] *** Joins: shka (~herr@109.231.62.239)
[12:33:09] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 244 seconds)
[12:36:02] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[12:36:06] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:38:50] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:58:44] *** Quits: bpanthi977 (~Thunderbi@103.152.144.53) (Quit: bpanthi977)
[13:04:41] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 255 seconds)
[13:05:03] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[13:27:20] <beach> We are accumulating "issues" for WSCL: https://github.com/s-expressionists/wscl/tree/main/wscl-issues/proposed which is good.  But we could use some help from people who have easy access to implementations other than SBCL.
[13:27:25] <beach> Many issues have a line "TODO: check other implementations." where the behavior of other implementations should go.
[13:28:22] <beach> Also please indicate whether you are in favor of the issue in question.
[13:29:01] <moon-child> doesn't everybody have easy access to the free implementations?
[13:29:32] <beach> They do, which is why I think it is easy to help out here.
[13:30:00] <beach> But we are also interested in the commercial implementations of course.
[13:33:33] <moon-child> hahha, how did I miss prog2-return-value
[13:33:35] <moon-child> this is great
[13:38:20] <beach> Some of the issues have been transferred from (I think) Cliki to WSCL.  This one was transferred by Bike.
[13:38:59] <beach> The PROG2 copy-paste error is quite well known.
[13:39:02] <moon-child> yeah, I saw it was dated to 2004, which was why I was surprised I had never heard about it
[13:39:21] <beach> Yes, I see.
[13:42:16] <shka> what? prog1 and prog2 are identical? :D
[13:42:59] <beach> shka: yes, maybe you prefer to make an "issue" that PROG2 should be deprecated since there is an operator doing the same thing. :)
[13:43:30] <shka> i have no idea, i am yet to process this mistake :D
[13:46:55] *** Quits: blihp (~blihp@c-68-43-233-92.hsd1.mi.comcast.net) (Ping timeout: 265 seconds)
[13:47:51] *** Joins: Guest39 (~Guest39@194.110.112.10)
[13:54:48] <Alfr> PROG2 shouldn't be deprecated, as its second form is mandatory thus not redundant to prog1. But fixing the description of result-2 (under Arguments and Values) for consistency could be considered.
[13:55:34] <beach> I was making a joke about deprecating it, as the smiley indicates.
[13:56:06] <Alfr> I know.
[13:58:00] <Alfr> I was thinking about the following fixup: result-2---the primary value resulting from the evaluation of first-form.
[13:59:27] <beach> Adding return values would be a major change to the standard.
[13:59:51] <beach> That's why implementations are not allowed to add specific return values.
[14:02:40] <Alfr> beach, what do you mean? clhs already uses the name result-2 for the only value of prog2.
[14:02:58] <beach> Oh, I guess I misunderstood.
[14:03:33] *** Joins: scymtym (~user@p200300c09f028531d73acc6b0027f62b.dip0.t-ipconnect.de)
[14:05:34] <beach> Alfr: So you are suggesting making PROG2 identical to PROG1?
[14:06:08] <Alfr> Except that its second argument would be mandatory.
[14:06:13] *** Joins: lotuseater (~user@p200300e7871b3f0020d699d6af37853a.dip0.t-ipconnect.de)
[14:06:35] <Alfr> Going for the least amount of change there, i.e. keep the Description intact. ;)
[14:07:07] <Alfr> It isn't a serious proposal anyways apart from keeping prog2 alive. I think there is a know better fix for that.
[14:31:03] *** Quits: frgo (~frgo@p200300deef181d0041b2662f828e694c.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:31:31] *** Joins: frgo (~frgo@p200300deef181d0041b2662f828e694c.dip0.t-ipconnect.de)
[14:48:42] <pjb> beach: there are arguments to deprecate prog2. For example, there's no multiple-value-prog2, only a multiple-value-prog1 :-)
[14:54:51] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-EC96-dynamic.midco.net)
[14:55:05] *** Joins: waaron (~aaron@194.110.112.10)
[14:56:24] *** Joins: Guest63 (~Guest63@202.47.45.215)
[14:58:45] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[15:01:05] *** Joins: random-nick (~random-ni@87.116.165.220)
[15:02:27] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 276 seconds)
[15:05:48] *** Quits: Guest63 (~Guest63@202.47.45.215) (Quit: Client closed)
[15:09:45] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[15:20:52] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Remote host closed the connection)
[15:21:38] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[15:33:54] *** Joins: cage (~cage@dynamic-adsl-78-15-46-179.clienti.tiscali.it)
[15:34:44] *** Joins: kenanb (~user@2407:7000:9bbb:3a00:c832:631a:c93b:fc36)
[15:42:04] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[15:43:14] *** Joins: domovod (~domovod@176.196.122.197)
[15:45:16] <scymtym> deprecate all three and generalize to MULTIPLE-VALUE-PROG-NTH N FORM* where N is evaluated. i'm sure there will be no negative impact in terms of ergonomics or performance
[15:51:23] <nij-> What are some pros and cons between McCLIM vs cl-cffi-gtk?
[16:02:09] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[16:04:38] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[16:04:49] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 250 seconds)
[16:07:18] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[16:07:32] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[16:09:51] *** Parts: kenanb (~user@2407:7000:9bbb:3a00:c832:631a:c93b:fc36) (ERC (IRC client for Emacs 27.2))
[16:10:33] <scymtym> that's hard to answer in general. GTK has gpu acceleration, more complete text and font support, more supported platforms and probably looks more appealing to many users. McCLIM works without foreign libraries, has the presentation and command sub-systems, is easy to extend due to the stratified design and has a specification. but again, advantages and disadvantages will depend on the use-case
[16:11:37] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[16:19:38] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 268 seconds)
[16:20:08] *** Joins: amb007 (~a_bakic@183.245.204.77.rev.sfr.net)
[16:24:29] *** Quits: amb007 (~a_bakic@183.245.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[16:25:52] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[16:32:12] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 245 seconds)
[16:34:14] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[16:40:45] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[16:43:58] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 256 seconds)
[16:46:18] *** Quits: scymtym (~user@p200300c09f028531d73acc6b0027f62b.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[16:46:45] <lotuseater> a friend of mine said McCLIM looks old but I more tend to use the term "baroque"
[16:46:55] *** Joins: scymtym_ (~user@p200300c09f028569b1ea43edacc35d27.dip0.t-ipconnect.de)
[16:55:32] <beach> lotuseater: So here is what bugs me.  People would rather spend a lot of time and energy debugging FFI solutions that serve only their own projects, and complain about the looks of McCLIM, rather than spending a small amount of time making McCLIM look the way they would like it to, thereby providing a better solution for the entire community.
[17:08:02] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 245 seconds)
[17:08:33] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[17:12:04] *** Quits: domovod (~domovod@176.196.122.197) (Quit: WeeChat 3.2)
[17:13:59] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[17:20:02] <contrapunctus> lotuseater: there's been some lovely art from the Baroque era, is that a compliment? 😏
[17:29:06] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[17:30:08] *** Joins: jans (~Thunderbi@119.51-174-216.customer.lyse.net)
[17:31:19] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Client Quit)
[17:41:12] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 256 seconds)
[17:41:35] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[17:49:17] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 245 seconds)
[17:51:12] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[18:05:14] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[18:08:18] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 240 seconds)
[18:09:12] *** Joins: ming (~ming@2601:547:a00:7720::88e8)
[18:15:03] *** Joins: peterhil (~peterhil@mobile-access-5d6af6-209.dhcp.inet.fi)
[18:18:26] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:18:54] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:22:50] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[18:29:39] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:35:38] <jmercouris> I talked to jackdaniel about improving the appearance of McCLIM at some point
[18:36:04] <jmercouris> It seems a lot of the appearance is hardcoded
[18:36:35] <jmercouris> IE it is not enough for a designer to come up with some new bitmaps
[18:36:43] <jmercouris> Things must be programmed to make it look good
[18:49:07] *** Quits: srji (~srji@static.43.141.203.116.clients.your-server.de) (Quit: leaving)
[18:52:33] *** Joins: srji (~srji@static.43.141.203.116.clients.your-server.de)
[18:57:19] <beach> Yeah, we wouldn't want anybody to write any code, now would we?
[18:58:05] <shka> beach: are you being sarcastic or sincere?
[18:58:13] <beach> The former.
[18:58:41] <beach> The grammatical structure of the sentence makes that clear to a native speaker.  Sorry about that shka.
[18:59:02] <shka> well, arguably, styling of application should be at least semi code independent
[18:59:18] <beach> So, there is some coding to be done to make that happen.
[18:59:38] <shka> heh, it seems to be always the case
[19:00:50] <beach> I am not sure what the message is here.  The initial creators of McCLIM didn't take into account the necessity for everything to be just bitmaps, so therefore, since coding is required to make it look the way we want, we should all give up and use gtk instead?
[19:01:32] * beach is clearly in a rotten mood today.
[19:02:08] <shka> beach: we should consider
[19:02:45] <shka> how to retrofit mcclim to fulfill the new requirements
[19:03:05] <shka> if at all possible
[19:03:53] <pjb> Also, it's an impossible task. Apple is not in the computing business, it's in the fashion business.  The look WILL change every year!  If you try to follow, you are only wasting resources that would be better spent elsewhere.
[19:04:08] <pjb> I'd just use garnet…
[19:04:19] <beach> Or gtk.
[19:04:30] <pjb> It's already a lot of works to follow the changes in X…
[19:04:42] <shka> uh, i would rather not use GTK
[19:04:45] <pjb> beach: or indeed, defer the work to some other team.
[19:04:47] <beach> I should be quiet.  I am afraid I will say something I will later regret.
[19:05:34] <pjb> The more bland the look anyways, the faster and the better. We can compete on other things, such as ergonomics and smarts.
[19:06:39] <lisp123> is it possible to build a bridge between any Lisp GUI system and the default GUI tools of each OS?
[19:06:56] <lisp123> I think CAPI works directly with Cocoa for example?
[19:07:23] <shka> lisp123: high effort required for maintenance
[19:07:43] <shka> also, anything C is not exactly standard in lisp
[19:07:57] <shka> so technically possible, but not realistic
[19:08:08] <shka> or practical
[19:09:26] <shka> anyway, i think that right here, right now, CLIM is the best option to write GUI
[19:09:26] <lisp123> shka: thanks, I guess its too time consuming so hasn't really happened. Its very hard to go up against Apple (in particular) due the amount of money & time they spend on design - and anything that doesn't follow the native look on MacOS will look off to some degree
[19:09:35] <beach> lisp123: There are great advantages to a GUI toolkit written entirely in Common Lisp.
[19:09:51] <lisp123> but as pjb said, UI design is fashion, so will _alawys_ change each year
[19:09:51] <shka> and CLIM is quite fun to use
[19:10:04] <_death> you don't need to use gadgets.. you can draw everything by yourself
[19:10:24] <beach> McCLIM is a great library.  That's why complaints make me in such a rotten mood.
[19:10:46] <lisp123> beach: I was more thinking if its possible to keep everything but using the end visual components of a native system
[19:12:00] <beach> lisp123: In order to avoid FFI, you would then only be able to reuse the bitmaps.
[19:12:21] <beach> lisp123: And jmercouris told us that McCLIM is not structured that way.
[19:12:54] <lisp123> beach: oh I see, I misread his comment as I thought it mean its not enough to only reuse bitmaps, but required more
[19:13:10] *** Quits: cage (~cage@dynamic-adsl-78-15-46-179.clienti.tiscali.it) (Ping timeout: 265 seconds)
[19:13:16] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[19:13:35] <beach> Exactly, you can't just plug in new bitmaps into McCLIM the way it is now structured.
[19:13:54] <lisp123> fair enough
[19:14:08] <beach> So, in order to reuse the native look without FFI, all you can do is copy their bitmaps, but that's not currently enough.
[19:14:39] <_death> that's only the look.. the bigger issue is the feel
[19:15:11] <beach> I think the people complaining about McCLIM looks haven't really seen the great advantages that presentations and a dynamic programming language give in a toolkit.
[19:15:37] <lisp123> (p.s. not complaining :-) ) - out of curiousity, why not just go down the FFI route
[19:15:41] <beach> I will take those advantages any day over the latest visual fads.
[19:16:16] <beach> lisp123: Because it always results in a debugging nightmare, as you can see from the numerous cries for help here, when people are lost.
[19:16:36] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 258 seconds)
[19:16:45] <shka> beach: the problem is that no matter how cool is to program applications using McCLIM, there is distinction between nerd software and normal people software
[19:16:48] <lisp123> beach: ah thanks, understood
[19:17:07] <shka> looks are not important for programming tools
[19:17:21] <beach> shka: Yes, I understand.
[19:17:45] <shka> but they are of significant importance for commercial, mass software
[19:18:10] <beach> Oh, and commercial mass software is what all the #commonlisp participants who complain about McCLIM are into?
[19:18:23] * beach really should be quiet. 
[19:18:34] <shka> please, some of us have bills to pay
[19:19:09] <beach> But Common Lisp is totally useless for commercial software anyway, as I understand it.  So I don't see the problem.
[19:19:30] <beach> Just use the native GUI toolkit with the language it was meant for.
[19:19:36] *** Joins: lisp123_ (~lisp123@45.86.201.13)
[19:19:55] <shka> why is CL useless for commercial software?
[19:20:30] <beach> I should be quiet.  It was another sarcastic remark.
[19:20:37] <shka> right
[19:21:48] <shka> well, that's how it is, i can write prototype in McClim, and it will be fun, but there is no way in hell that boss would allow it go to the user with the company logo slapped on
[19:22:17] <shka> as silly, as it sounds...
[19:22:32] <beach> I am not getting my message across here I think.
[19:22:50] <shka> i guess
[19:23:08] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 255 seconds)
[19:23:30] <beach> My message is that there is A LOT of collective energy spent in debugging FFI solutions.  I think the effort to make McCLIM look like the native toolkit would be WAY LESS than the collective wasted effort we witness here on a regular basis.
[19:23:51] <shka> oh, totally agreed
[19:24:17] *** Joins: lisp123 (~lisp123@45.130.83.200)
[19:24:22] <beach> Yet, people choose FFI all the time, complain about McCLIM, and then come here and cry because they can't  figure out the FFI stuff, thereby wasting other people's time too.
[19:24:31] <shka> however, what about being able to style it independently of the host toolkit?
[19:24:50] <beach> What about it?
[19:25:41] <shka> well, from my point of view, making mcclim look and feel exactly like native toolkit is not exactly required
[19:25:55] <_death> it's a simple matter of programming
[19:26:02] <beach> Excatly.
[19:26:06] <beach> Exactly.
[19:26:08] <beach> SO SOME PROGRAMMING MIGHT BE NEEDED.  JUST F*ING DO IT!
[19:26:26] <beach> shka: Not directed to you personally.
[19:26:34] <shka> i don't have anything to add at this time
[19:27:36] <beach> shka: Let me make that very clear.  I was not addressing you here.  I don't consider you one of the complainers.
[19:28:03] <shka> ok
[19:28:20] *** Quits: lisp123_ (~lisp123@45.86.201.13) (Ping timeout: 268 seconds)
[19:32:26] *** Joins: derelict (~derelict@user/derelict)
[19:35:38] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-EC96-dynamic.midco.net) (Quit: Using Circe, the loveliest of all IRC clients)
[19:39:51] *** Quits: mariari (~mariari@user/mariari) (Quit: WeeChat 3.2)
[19:41:06] <beach> So how do you use bitmaps to draw things with varying size like scroll bars?
[19:42:34] <beach> I suspect I am the one responsible for the initial McCLIM scroll bars, and if so, I very likely used code to draw it, as a function of the size.
[19:42:57] *** Joins: mariari (~mariari@user/mariari)
[19:43:20] <beach> So how does a typical GUI toolkit with themes draw scroll bars?
[19:43:44] <_death> they can use small bitmaps representing the corners and such
[19:44:03] <beach> I see, and something repeating for the middle?
[19:44:08] <_death> yes
[19:44:14] <beach> Makes sense.
[19:44:52] * eta played around with the clim-listener once and found the experience generally quite janky
[19:44:56] <eta> perhaps due to xwayland issues?
[19:45:05] <_death> in DOS days everyone wrote their own GUI libraries.. you'd deal with the myriad of drivers or VESA etc.. each would have different look and feel, kind of like today's websites
[19:45:32] <eta> I also suspect it's an acquired taste, as in you have to familiarize yourself with the paradigm (which isn't what your OS GUI looks or feels like either)
[19:45:46] <pjb> But nowdays, they'll use vertorial images for the various resolutions. Possibly shadowed by "optimized" bitmaps for the most common resolutions.
[19:46:12] <_death> many great tools from that era had look and feel tuned to match the tool's functionality
[19:47:29] <beach> eta: Part of the problem with the listener is the input editor, which is DREI and which was extracted from (first) Climacs.  We are (slowly) working on Second Climacs that we hope will be much better.
[19:48:10] <beach> On the other hand, I suspect gtk doesn't have a Common Lisp listener at all.
[19:48:33] <eta> point is, I think it's entirely reasonable to want to write a GTK+ app
[19:48:46] <eta> (like, actually GTK+, not something themed to look like GTK+)
[19:49:02] <shka> nah, gtk is horrible nowadays
[19:49:13] <beach> eta: For its excellent listener?
[19:49:14] * eta quite likes it
[19:49:34] <eta> beach, no, having a listener isn't important to me
[19:49:40] <eta> none of the apps that I use daily work that way :p
[19:49:46] <beach> eta: Oh, I thought that's why you brought it up.
[19:50:03] <_death> the listener could've been more extensible, so that people could independently write their own command tables and they could all be used by the listener's user without much effort
[19:50:16] <eta> beach, I'm trying to provide a bit more nuance to your opinions on the GTK+ "complainers" being terrible and no good :p
[19:50:30] <beach> I see.
[19:52:48] <_death> eta: when you get used to a listener pane being available, you find more and more uses for it.. essentially it gives you the best of both worlds (GUI and command line)
[19:53:30] <eta> _death, sure, I've been meaning to play with CLIM for a while :)
[19:53:52] *** Joins: cage (~cage@dynamic-adsl-78-15-50-110.clienti.tiscali.it)
[19:54:28] <_death> I wouldn't use clim for everything, of course, but it seems more underused than overused
[19:54:43] <shka> clim is fun
[19:54:54] <shka> highly recommended
[19:55:42] <shka> is is tailored for lisp and it shows
[19:57:06] *** Quits: shka (~herr@109.231.62.239) (Quit: Konversation terminated!)
[20:00:46] <lisp123> would it be difficult to embed a McClim screen into an Emacs buffer?
[20:00:49] *** Joins: shka (~herr@109.231.62.239)
[20:00:54] <lisp123> since they both use lisps of various forms
[20:02:33] <beach> lisp123: lukego did something like that.
[20:03:37] <lisp123> beach: nice, I will search for it (the main reason I ask is context switching, the dream is to have everything in one window and Emacs does that a lot but cannot handle GUI well)
[20:04:29] <beach> lisp123: My plan is to make Second Climacs so much better than Emacs for editing Common Lisp code that it will be irresistible to Common Lisp programmers.
[20:06:13] <lisp123> Nice :D A good text editor is very important IMO - there's a lot of applications for text manipulation, now I'm using a lot of Emacs APIs to do some funky stuff
[20:06:39] <beach> Right, Emacs has lots of packages and modes for many things.
[20:06:55] <beach> But it's Common Lisp capabilities are mediocre, despite SLIME.
[20:07:44] <lisp123> But (to play devils advocate), is that a limitation of Emacs or of features not in SLIME?
[20:07:59] <lisp123> Since its not too hard to pass data between Emacs & the CL image
[20:08:50] <lisp123> unless all the global variables and how Emacs does things, makes it too cumbersome to control it via slime
[20:08:52] <beach> Oh, sure, you can accomplish anything you want, but the fact that everything has to be encoded in a wire protocol makes it very hard to write and maintain such a thing.
[20:09:37] <lisp123> Ok, fair enough - I see from that perspective. Plus its a very large dependency one would *ideally* avoid in a pure CL environment
[20:09:44] <_death> with a more sophisticated clim listener you could easily do Bret Victorish things
[20:11:10] *** Quits: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net) (Ping timeout: 265 seconds)
[20:11:53] <lisp123> _death: whats 'bret victorish'? google came up with a school board trustee's home page, so probably something else :D
[20:13:01] <_death> lisp123: http://worrydream.com/
[20:13:14] <_death> lisp123: see for example explorable explanations section
[20:14:49] <lisp123> _very_ cool
[20:15:58] <_death> a while ago I looked into using cells with clim.. it basically worked, but all I remember now is that it needs further exploration
[20:21:23] <beach> Don't tell the author of cells that.
[20:22:20] <shka> hmmm, cells + clim
[20:22:27] <shka> this... has some potential
[20:24:14] <_death> I think CLIM gadgets had some missing (or unexposed) interfaces for doing things
[20:26:32] <_death> e.g., when you move a slider you don't necessarily get notified until mouse button up (iirc).. also, clim needs a sensible way to do debouncing
[20:26:57] <beach> What is "debouncing"?
[20:28:26] <_death> beach: it basically means setting a timer to do the action, rather than doing it immediately, and readjusting if necessary (the user is not yet idle)
[20:28:53] <beach> I see.  Thanks.
[20:28:55] <_death> beach: this could alleviate obvious problems like "jumpy" highlighting because of nested presentations
[20:29:12] <beach> OK.
[20:35:04] <jmercouris> beach: my plan is to make Nyxt an irresistible editor
[20:35:10] <jmercouris> So you have some competition :-)
[20:35:57] <lisp123> jmercouris: can't wait for nyxt to take over the world :-)
[20:35:58] <beach> jmercouris: So I understand.  I applaud multiple efforts.
[20:36:07] <lisp123> Need a working Mac version soon though
[20:37:21] <lisp123> I instaleld it on a linux within a VM, but the rendering of fonts by the VM wasn't good enough (since I have a largish screen), then tried Macports & Home brew, but wasn't so easy
[20:37:59] <lisp123> Best would be App Store, but I'm sure many have mentioned that already :-) I think you will find a lot of love from the MacOS community
[20:44:11] *** Quits: cage (~cage@dynamic-adsl-78-15-50-110.clienti.tiscali.it) (Read error: Connection reset by peer)
[20:49:45] *** Joins: cage (~cage@dynamic-adsl-78-15-50-110.clienti.tiscali.it)
[20:51:19] <jmercouris> I know, I was a macOS user myself, it’s just so frustrating dealing with the APIs
[20:56:19] <lisp123> Yeah its annoying how macOS is similar to linux but still the gap is far and many things don't port over nicely
[20:58:10] *** Joins: dsk (~dsk@user/dsk)
[20:58:19] *** Joins: silasfox (~sbv@165.56.186.128)
[21:02:30] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 252 seconds)
[21:09:46] *** Quits: scymtym_ (~user@p200300c09f028569b1ea43edacc35d27.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[21:13:55] <lotuseater> beach: yes
[21:14:05] <lotuseater> contrapunctus: of course it's a compliment :)
[21:14:21] <lotuseater> looks isn't everything (but what sells)
[21:16:02] <lotuseater> or "aren't"
[21:16:48] *** Quits: silasfox (~sbv@165.56.186.128) (Ping timeout: 252 seconds)
[21:18:42] *** Quits: ming (~ming@2601:547:a00:7720::88e8) (Ping timeout: 240 seconds)
[21:18:50] <lotuseater> jmercouris: are there plans for also bringing nyxt to ARM (I mean eg raspberry pi)? and I can imagine it has a smaller footprint in memory than firefox or chromium
[21:19:11] *** Joins: ming (~ming@2601:547:a00:7720::88e8)
[21:19:29] <jmercouris> lotuseater: if there is demand, we will do it
[21:20:22] <lotuseater> hehe, I just thought about what I would need
[21:20:52] <lotuseater> but this is one excellent example for me how to deploy such a big application to various platforms
[21:22:05] <lotuseater> the thing is the SBCL on pi is just vesion 1.4.6 or so o_O even in apt, but I installed nix package manager so this oldish debian pkgs is not my problem where i need newer software releases
[21:31:23] *** Joins: blihp (~blihp@c-68-43-233-92.hsd1.mi.comcast.net)
[21:31:54] *** Joins: silasfox (~sbv@165.56.186.128)
[21:43:38] *** Joins: dsk (~dsk@user/dsk)
[21:43:45] <lotuseater> jmercouris: is there some need for more contributors?
[21:45:15] <jmercouris> lotuseater: indeed there is
[21:45:34] <jmercouris> You can join us on #nyxt and we can talk about it there
[21:58:00] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[22:06:56] *** Quits: ming (~ming@2601:547:a00:7720::88e8) (Remote host closed the connection)
[22:07:11] *** Joins: jans1 (~Thunderbi@141.98.255.151)
[22:09:06] *** Quits: jans (~Thunderbi@119.51-174-216.customer.lyse.net) (Ping timeout: 265 seconds)
[22:09:06] *** jans1 is now known as jans
[22:18:40] *** Joins: zacts (~zacts@user/zacts)
[22:31:23] <ecraven> hm.. I remember looking at an article that talked about how to implement compile-time unit (as in m, s, m/s, ...) checking in Common Lisp, but can't find it any longer :-/ does anyone happen to know it?
[22:31:58] *** Joins: jans1 (~Thunderbi@119.51-174-216.customer.lyse.net)
[22:32:49] *** Quits: zacts (~zacts@user/zacts) (Quit: zacts)
[22:33:57] *** Quits: jans (~Thunderbi@141.98.255.151) (Ping timeout: 268 seconds)
[22:33:57] *** jans1 is now known as jans
[22:34:00] <_death> possibly https://medium.com/@MartinCracauer/a-gentle-introduction-to-compile-time-computing-part-3-scientific-units-8e41d8a727ca
[22:42:51] *** Joins: zacts (~zacts@user/zacts)
[22:44:15] *** Quits: cage (~cage@dynamic-adsl-78-15-50-110.clienti.tiscali.it) (Ping timeout: 252 seconds)
[22:44:58] *** Quits: ahc (~ahc@121.98.229.241) (Quit: Client closed)
[22:50:20] <ecraven> _death thanks a lot, that was it!
[23:03:26] *** Joins: lad (~lad@user/lad)
[23:05:50] *** Joins: selwyn (~selwyn@user/selwyn)
[23:06:31] *** Joins: tyson2 (~user@cpe688f2e2e2473-cm688f2e2e2470.sdns.net.rogers.com)
[23:11:47] *** Quits: Posterdati (~posterdat@host-82-49-175-12.retail.telecomitalia.it) (Ping timeout: 245 seconds)
[23:17:41] *** Quits: peterhil (~peterhil@mobile-access-5d6af6-209.dhcp.inet.fi) (Ping timeout: 252 seconds)
[23:18:09] <lotuseater> oh that's a nice article series
[23:18:40] *** Joins: cage (~cage@dynamic-adsl-78-15-35-191.clienti.tiscali.it)
[23:25:21] *** Joins: Posterdati (~posterdat@host-82-49-175-12.retail.telecomitalia.it)
[23:34:03] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[23:39:47] *** Joins: JeromeLon (~JeromeLon@2a00:23c7:99da:6600:e5f1:e540:5d25:17d8)
[23:40:23] *** Quits: cage (~cage@dynamic-adsl-78-15-35-191.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:42:27] <JeromeLon> I have a (declaim (optimize ...)) at the top of each file in my asdf system. This is suboptimal, I would like a shared directive (in package.lisp for example). I couldn't find what the compile-time semantics are for declaim when using multiple files: declaim stuff should be global, but the compiler focuses on a single file that is not even loaded. What is the right way to share a declaim between multiple files?
[23:43:26] <lotuseater> JeromeLon: wouldn't it work with that around-compile option in the asd file?
[23:49:32] <JeromeLon> lotuseater: that sounds perfect! the doc for around-compile even mentions "proclaiming consistent optimization settings"
[23:50:12] <lotuseater> :)
[23:50:21] <JeromeLon> lotuseater: thanks!
[23:50:38] *** Quits: tyson2 (~user@cpe688f2e2e2473-cm688f2e2e2470.sdns.net.rogers.com) (Quit: ERC (IRC client for Emacs 27.2))
[23:50:45] <pjb> JeromeLon: you should not declare optimization in library (or published application) code.
[23:50:53] <pjb> JeromeLon: let the user set his own optimization.
[23:51:03] <lotuseater> but have a look on how it is on the implementation you use
[23:51:41] <pjb> Doing that is treacherous and make make the user lose days in debugging!
[23:54:52] <JeromeLon> pjb: so, what is the right way to do it? declaim something and then call load-system? will my declaim be used (assuming nobody did what you are guarding me against)?
[23:56:43] <aeth> ime, what I'd want to do is optimize specific functions
[23:57:04] <aeth> there's plenty of times where that would make sense with math libraries
[23:58:12] <pjb> JeromeLon: put your optimization declaration in your rc file.  Change it depending on what you want to do (eg. if you want to generate a fast executable, you can rais speed, by default, you will be debugging).
[23:58:44] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[23:59:14] <aeth> imo... if what you're doing isn't math, you probably don't want to optimize it at all; if it is math, I'd optimize per-function (perhaps with a macro to automate it)
[23:59:22] <pjb> bugs can occur in any function, so don't put optimization in the source files.
[23:59:26] <aeth> Optimizations can also make a difference with CASE stuff...
[23:59:50] <aeth> pjb: It's not a universal, though. There are cases where you absolutely want to have optimizations in the source files, directly. But essentially only for math libraries.
