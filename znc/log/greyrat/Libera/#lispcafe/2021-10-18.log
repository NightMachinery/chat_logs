[00:00:29] <gilberth> As I said: I have no job. Don't need to work, luckily.
[00:01:57] <Qwnavery> Oh, I thought you said you don't work for pay. Do you mean you just do whatever you do?
[00:03:01] *** Quits: rogersm (~rogersm@90.166.177.48) (Remote host closed the connection)
[00:03:17] <gilberth> Yep, I do what every I'd like to do. Like hacking this useless CADR emulator.
[00:03:58] <Qwnavery> o_O
[00:04:44] <gilberth> Qwnavery: You're funny. You hope that Climacs provides you with an IDE, while not having tried an Emacs, which behaves together with SLIME.
[00:05:07] <Qwnavery> I use Emacs. I hate it.
[00:05:39] <gilberth> What makes you believe that you would like Climacs better?
[00:06:27] <Qwnavery> I want something fast (machine code), lightweight and dynamic. I've talked with beach about what I plan to do and he agrees with me.
[00:06:58] <Qwnavery> http://www.lambdaspace.xyz/climacs-daemon.png
[00:07:38] <gilberth> Emacs is fast enough for me. And you're hangs are not normal. Have you tried a regular build?
[00:08:17] <Qwnavery> I can't be bothered learning emacs commands. I really like Vi/ViM bindings.
[00:08:18] <Alfr> Qwnavery, that "synced" part in the diagram will be really troublesome.
[00:09:18] <gilberth> Qwnavery: So you rather implement vim commands for Climacs? And there are vim bindings for Emacs, I heard.
[00:09:28] <Qwnavery> Alfr: yeah, by suggestion from another to avoid lockstep, I'll be implementing Conflict-free Replicated Data Tables. I want to facilitate real-time collaborative editing.
[00:09:39] <Alfr> Qwnavery, for that to reasonably work you'd have to come up with some consensus scheme where everyone talks to everyone, etc.
[00:09:51] <gilberth> Sorry, this does not sound like a plan to get productive quick.
[00:10:27] <Qwnavery> gilberth: I'm using evil-mode already. I like it but it feels clunky.
[00:10:55] <Qwnavery> Alfr: precisely
[00:11:06] <gilberth> And you rather implement your very own key bindings for Climacs than for Emacs?
[00:11:21] <Qwnavery> I don't have elisp-fu
[00:13:13] <selwyn> made well over a gallon of juice
[00:13:38] <Alfr> Qwnavery, and also think about fault tolerance. How will you handle some clients, being unreachable or even disagreeing on what happened/the current state is?
[00:16:22] <Qwnavery> TCP handles most of that, if a TCP packet fails to get a response the control loop can move to handle it.
[00:17:03] <Qwnavery> CRDTs handle the disagreements.
[00:17:30] <gilberth> Qwnavery: Am I stalled, when your network link is stalled?
[00:17:48] <Qwnavery> If a device disconnects from another, and the two buffers are modified seperately, on reconnection a diff window will open up and merge conflicts can manually be sorted.
[00:18:18] <Qwnavery> gilberth: ._. good point.
[00:19:19] <Qwnavery> Wait no, what? Of course not. The daemon is seperate from the editor. Because of CRDTs you hold a copy on your device anyway that you can continue to modify even if disconnected.
[00:19:48] <Alfr> Qwnavery, how would it handle N people disconnecting and modifying a buffer in N different ways?
[00:20:19] <gilberth> Do I get a diff with every keystroke? I am not talking about outright broken, but say a >100ms latency. Would that slow me down?
[00:20:27] <Qwnavery> Multiple Diff Windows?
[00:21:08] <Qwnavery> Diff will only occur when you've disconnected and modification have occured to both buffers. If the connection is active and all diffs are resolved, CRDTs will take over and handle that for you.
[00:23:41] *** Joins: icer (eric@gateway/vpn/protonvpn/icer)
[00:24:01] <Alfr> Qwnavery, for the sake of argument, let's say we have 26 people looking at an empty buffer. The network breaks down and everyone inserts a random letter from the alphabet. How will this be resolved? And who would be tasked to do it?
[00:25:26] <Qwnavery> CRDTs resolve it to my knowledge. I have yet to read the paper, but I do understand what you mean.
[00:27:00] <Qwnavery> I'm not quite designing it for 26 people might I add. It's intended for home use. Though I'm sure some group might see it fit to use it on a collaborative project in such a manner.
[00:27:14] <Qwnavery> So it is important to resolve.
[00:56:24] <hayley> No conflict resolution? I don't think it could pick which letters to insert otherwise, but I could be wrong.
[00:57:01] <Qwnavery> Hm. Morning hayley 
[00:57:04] <MichaelRaskin> I would expect CRDT to eventually converge to all letters inserted in some effectively random order
[00:57:56] * gilberth got a 37% increase in speed just by picking those low hanging fruits.
[00:58:22] <selwyn> high hanging fruit is the best..
[01:00:41] <gilberth> selwyn: Have you tried our apple pie? It costed me a pair of scissors and Alfr an experiment.
[01:01:11] * hayley wonders if she can feed temporal logic to ACL2, but has no point for such an experiment.
[01:03:32] <hayley> Based on benchmark results, we need a term to describe over-optimizing for one machine. "Mechanical obsession?"
[01:05:36] <hayley> I remember when I made the 42nd at Threadmill poster, and half of crab Twitter decided to repost it, thinking that I had a CHT in Rust, and that I wasn't mocking a CHT in Rust.
[01:07:47] <Qwnavery> https://www.youtube.com/watch?v=gARa8Jwljvo
[01:07:48] -ixelp- Good People - YouTube
[01:07:53] * hayley uploaded an image: (13KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/ZhCnCaiqFinOjdspcVjtXnct/graph.svg >
[01:08:10] <hayley> Luckless considered good enough?
[01:24:54] * selwyn tries the apple pie
[01:27:17] <selwyn> very nice
[01:33:34] <selwyn> https://cdn.discordapp.com/attachments/872369447590035536/899416148079181864/DSC_0521.JPG
[01:35:55] * hayley adds some zeroes to the key count in luckless test
[01:36:22] <hayley> I think 40000000 is too many zeroes.
[01:37:58] <selwyn> got 2 gallons in the end
[01:38:27] <hayley> Apparently we are also picking our own encryption algorithms for the last programming assignment.
[01:38:43] <hayley> "Double unsmiley. :-( :-("
[01:39:25] <gilberth> selwyn: Do you make cider from that?
[01:39:26] <selwyn> hayley: return to rot13
[01:39:33] <selwyn> gilberth: that's the plan
[01:39:51] <hayley> "Double-unsmiley.   :-(   :-("
[01:39:56] * hayley spelled it wrong
[01:40:43] <selwyn> i think shinmera got contacted by the guy who invented the smiley at some point
[01:41:12] <hayley> Cliff Click invented the double-unsmiley.
[01:41:25] * hayley loses at Luckless tests, because she can't get the hash function for EQUALP portably.
[01:41:35] *** Quits: icer (eric@gateway/vpn/protonvpn/icer) (Remote host closed the connection)
[01:41:37] <gilberth> Hmm, according to my measurements the CADR takes 30 micro instructions for one macro instructions. That is way more than I expected.
[01:41:38] <selwyn> https://www.cs.cmu.edu/~sef/sefSmiley.htm
[01:41:40] -ixelp- Smiley Lore :-)
[01:41:50] <selwyn> :-( was originally meant to denote that the message should be taken seriously
[01:42:43] <gilberth> That is 6us per macro instruction. That's slow.
[01:44:20] * Qwnavery looks suspiciously at the pears mingling among the apples.
[01:45:36] <selwyn> lol
[01:46:10] <selwyn> all of the apples (and pears) in this picture have gone to apple (or pear) heaven by now
[01:46:25] * gilberth says (defpackage :-) so that he could later say (-:foo :-)
[01:46:30] * hayley runs tests and it gets stuck. Good start.
[01:49:04] <Qwnavery> Alright, I have to go now, last week til exam block and I'm not prepared\
[01:49:27] <selwyn> o/
[01:50:00] <hayley> Problem: SB-IMPL::EQL-HASH is IDENTITY for fixnums.
[01:50:04] <Qwnavery> \o Good day to you all, I hope that apple pie is good. :)
[01:50:16] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[01:51:03] <hayley> That said, it is supposed to probe 128 elements and not just one group, so it should limp through this test.
[02:03:39] <hayley> Seems I did (mod ... groups) rather than (mod ... length), which is pretty shit.
[02:17:55] <hayley> *someone says something about exokernels on a GPU* "Yes, I never wanted recursion anyway"
[02:18:25] *** Quits: random-nick (~random-ni@87.116.183.117) (Ping timeout: 265 seconds)
[02:20:39] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[02:22:18] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[02:33:35] *** Joins: dra (~dra@2a04:4540:641d:1a00:bd3f:ca8:b71b:287)
[02:33:37] <dra> Hello!
[02:43:28] <hayley> Hello dra.
[02:51:29] *** Quits: dra (~dra@2a04:4540:641d:1a00:bd3f:ca8:b71b:287) (Ping timeout: 268 seconds)
[02:51:30] *** Joins: clothespin (~awolven@c-73-209-95-92.hsd1.il.comcast.net)
[02:54:24] *** Joins: dra (~dra@2a04:4540:6409:4e00:bd3f:ca8:b71b:287)
[03:03:39] *** Quits: dra (~dra@2a04:4540:6409:4e00:bd3f:ca8:b71b:287) (Quit: Leaving)
[03:27:56] <hayley> selwyn: https://www.youtube.com/watch?v=zzmHP-Rw1_o
[03:27:57] -ixelp- Hammond's Hate on Genesis Compilation - YouTube
[03:51:18] *** Quits: molson (~molson@2001-48F8-704A-CA1-0-0-75F-102A-static.midco.net) (Ping timeout: 268 seconds)
[04:04:08] *** Joins: rogersm (~rogersm@90.166.177.48)
[04:09:23] *** Quits: rogersm (~rogersm@90.166.177.48) (Ping timeout: 264 seconds)
[05:10:14] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 268 seconds)
[05:25:37] *** Quits: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se) (Ping timeout: 265 seconds)
[05:50:32] <selwyn> lol
[05:56:17] * hayley struggles to find endermen or blazes, but has everything else to complete Minecraft
[05:57:52] <selwyn> i never did complete minecraft
[06:02:02] <hayley> I've done it twice, but it's not happening on this server for some reason.
[06:05:09] *** Joins: rogersm (~rogersm@90.166.177.48)
[06:09:52] *** Quits: rogersm (~rogersm@90.166.177.48) (Ping timeout: 252 seconds)
[06:14:33] * hayley finally found a blaze spawner.
[06:21:14] *** Joins: LispyLights (~LispyLigh@user/lispylights)
[06:21:27] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Killed (NickServ (GHOST command used by LispyLights)))
[06:21:37] *** LispyLights is now known as Aurora_v_kosmose
[06:23:45] <Mondenkind> https://0x0.st/-knt.txt  lol
[06:27:27] <semz> lmao, instant classic
[06:33:41] <selwyn> lol
[06:38:26] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 245 seconds)
[06:38:29] <selwyn> https://0x0.st/-knt.txt
[06:39:13] <selwyn> can't sleep :/
[07:22:51] <gilberth> selwyn: Oh dear!
[07:23:36] <gilberth> About sleep, I am screwed now as I took a nap. Time for coffee and pie made from very tasty apples.
[07:25:04] <gilberth> It would be nice, if C would allow me to declare a value as being of type "unsigned integer of n bits".
[07:26:08] <Mondenkind> they are adding that, finally, next year
[07:26:13] <Mondenkind> _ExtInt or so
[07:26:40] <Mondenkind> 'coffee and pie' nicee
[07:26:58] <gilberth> Will I also get a warning? And while we are at it, could I also say "an integer in the range 42 to 100"? Like Pascal?
[07:27:26] <gilberth> Or CL for that matter.
[07:30:13] *** Quits: semz (~none@user/semz) (Ping timeout: 252 seconds)
[07:33:34] <gilberth> And why not borrow the bit field syntax? Like extern unsigned foo (unsigned byte:8, unsigned count:12):1; That would be nice. And perhaps finally bit vector like int bv[100]:1;
[07:34:20] *** Quits: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de) (Quit: MichaelRaskin)
[07:43:21] <selwyn> coffee and pie very american
[07:43:51] *** Joins: semz (~none@user/semz)
[07:44:17] <gilberth> Brad Parker is a bit lazy about signed versus unsigned and this is untypical code as it emulates an exact hardware. Also I about to say u?int32_t where needed, unfortunately my compiler has no int24_t
[07:44:36] <gilberth> selwyn: Ooops!
[07:45:33] <gilberth> But I can at least say uint_least24_t.
[07:46:14] <selwyn> i am surprised that they would be that convenient
[07:46:37] <gilberth> convenient?
[07:46:56] <selwyn> i can't think of anything i would use it for
[07:47:28] <gilberth> Those types? For a CPU emulator, perhaps?
[07:47:41] <selwyn> fair enough
[07:49:42] <gilberth> Well in general I grew the habit to say int32_t when I mean that. And stdint.h came way too late, IMHO. I still remember a time at which int was either 16 bit or 32 bit. And it still could be any size larger than 16 (IIRC) bits. Better be explicit.
[07:50:59] <gilberth> 'int' was once defined to match the word size, with the weak implication that a pointer would be an 'int' too. Is an 'int' 64-bit on AMD64? No! Why? See.
[07:52:17] <selwyn> if i have time i would like to learn lisp and hack trial-vr over christmas
[07:52:19] <gilberth> In C you always have some limited size. Good C code is code, that also uses size_t, off_t, etc.
[07:52:26] <selwyn> but suspect i will not have time sigh
[07:53:11] <gilberth> You still have to learn Lisp? I am surprised.
[07:53:22] <selwyn> well
[07:53:44] <gilberth> You're here for coffee like dave0, right?
[07:54:01] <selwyn> i don't know the mop, i don't even know how to use all of clos
[07:54:09] <selwyn> yes, i am at #lispcafe for the fun times
[07:54:49] <selwyn> happily i feel that i basically understand the condition system
[07:55:08] <gilberth> I hardly ever used the MOP. It's a tactical nuclear missile, you better never have to use. ;)
[07:55:41] <selwyn> i guess i am setting some high standards for knowledge
[07:56:05] <mfiano> Morning
[07:56:10] <selwyn> morning
[07:56:17] <gilberth> Which is fine. I also like to do my homework unless it's for school.
[07:56:32] <gilberth> mfiano: Hi there! /me waves.
[07:56:35] <mfiano> It's to CLOS as macros are to s-expressions.
[07:56:46] <mfiano> Very useful. It bends the language to your needs
[07:58:33] <gilberth> Yep, but I personally rarely saw the need. And the MOP has one major flaw: When a class is of a certain meta class, each subclass must repeat that fact. Therefore I can't have my CLIM objects being of a different meta class, which would be very useful.
[07:59:44] <gilberth> Also for CLOS, I miss anonymous classes.
[08:00:03] <selwyn> miss them from where? java?
[08:00:25] <gilberth> CLOS. Each class must have a name.
[08:01:20] <gilberth> Thus classes are only first class objects by 99%.
[08:04:04] <selwyn> i see
[08:04:09] <Mondenkind> gensym?
[08:05:29] <mfiano> What?
[08:05:39] <mfiano> You can make an anonymous class
[08:05:49] <gilberth> Sure, but you'd be surprised when you create a FOO-PANE and it turns out as #:G4711. It'd rather would like to have the name being (FOO-PANE MIRRORED).
[08:07:05] <Mondenkind> #:FOO-PANE-MIRRORED436  seems not so bad
[08:07:13] <gilberth> But this is a major CLIM flaw, really. As there are mirrored and un-mirrored sheets, and this is specified by a mixin class mirrored-sheet-mixin. Yet it's not the application programmer to decide, but the backend, whether a sheet is mirrored or not.
[08:07:42] <mfiano> gilberth: I don't see why you say 99% and classes must have a name
[08:07:45] <gilberth> Mondenkind: Which is what I do, indeed.
[08:08:51] <gilberth> mfiano: Classes must have a name, which is a symbol, and that name has to be mapped to the class by means of FIND-CLASS. You can't have a class, that is not registered with FIND-CLASS.
[08:09:27] <hayley> I'm starting to think that turning the DFA into tables is going to make for a bulky and branch-heavy thing to interpret. But then, a more traditional "byte"code also is branch heavy ):
[08:09:37] <gilberth> It's like you only could have new functions (SETF FDEFINITION) only.
[08:09:37] <hayley> gilberth: I thought naming NIL gave you an anonymous class.
[08:10:02] <Mondenkind> sbcl says that 'NIL is not a legal class name'
[08:10:06] <hayley> http://metamodular.com/CLOS-MOP/class-name.html "Returns the name of class.  This value can be any Lisp object, but is usually a symbol, or nil if the class has no name"
[08:10:07] -ixelp- class-name
[08:10:22] <mfiano> https://i.lisp.cl/bEyrwu.png
[08:10:24] <hayley> Mondenkind: Try (make-instance 'standard-class :name nil)
[08:10:39] <gilberth> hayley: Now tell me how to craft a class not named.
[08:10:55] <hayley> (make-instance 'standard-class :name nil)
[08:10:57] <mfiano> hayley: :name nil is redundant
[08:12:07] <Mondenkind> hayley: ah, I see
[08:12:11] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[08:12:12] <hayley> (make-instance 'standard-class :name "They say of God, names name me not. And this is true of me too...")
[08:12:24] <Mondenkind> apparently you can defclass and then change its name to nil
[08:12:24] <gilberth> Hmm, (make-instance (make-instance 'standard-class :name nil)) gives me an error.
[08:12:45] <dave0> maw
[08:12:53] <hayley> Works here. But check if there are direct slots in the class.
[08:12:54] <mfiano> CL-USER> (make-instance (make-instance 'standard-class))
[08:12:56] <mfiano> #<#<STANDARD-CLASS COMMON-LISP:NIL {10074FF913}> {10074FFD43}>
[08:13:42] <gilberth> Does not work here. A bug? I'll look into that when I feel like it.
[08:13:49] <hayley> Clozure really wants you to provide :DIRECT-SUPERCLASSES apparently.
[08:14:00] <Mondenkind> gilberth: try this: (defclass foo () ()) (let ((n (find-class 'foo))) (setf (class-name n) nil) (make-instance n))
[08:14:07] <hayley> ? (make-instance (make-instance 'standard-class :name nil :direct-superclasses '())) ⇒ #<An instance of #<STANDARD-CLASS NIL> #x3020009B522D>
[08:14:52] <kakuhen> hmm
[08:14:56] <kakuhen> (make-instance 'standard-class :name 'etc) works for me
[08:15:02] <kakuhen> I use it in a unit test in fact to make an anonymous class
[08:15:18] <hayley> Due to damn gilberth's infernal grep[] machine, I can't really just write EXPECT #\a as an instruction; it has to jump somewhere appropriate.
[08:15:20] <gilberth> hayley: Ok. I stand corrected.
[08:16:04] <kakuhen> what version of CCL are you using hayley
[08:16:11] <kakuhen> seems like older versions want direct-superclasses supplied directly
[08:16:15] <kakuhen> but newer ones are fine with what I did
[08:16:17] <hayley> 1.11.5
[08:16:28] <kakuhen> try it on 1.12 (or 1.12.1) if you can
[08:16:36] <kakuhen> or maybe i'll dl a binary for 1.11.5 right now
[08:16:46] <gilberth> 1.12 can't
[08:17:16] <mfiano> hayley: The MOP mandates that standard-class be the superclass of itself. If Clozure isn't doing that, then I would file a bug, or use closer-mop which probably fixes that.
[08:17:17] <hayley> Same error on 1.12.
[08:17:56] <mfiano> err standard-object should be the superclass\
[08:18:22] <mfiano> SBCL does this. I am betting Clozure does not, which would explain why make-instance does not work
[08:18:46] <gilberth> I tried (make-instance (make-instance 'standard-class :name nil :direct-superclasses (list (find-class 'ccl:fundamental-binary-stream)))), which is fine.
[08:18:50] <mfiano> closer-mop should be used to wrap things like this for broken implementations
[08:18:53] <hayley> Surely I could cheat and have one opcode vector and one data vector.
[08:19:07] <kakuhen> ok yeah i see the same error on 1.12.1 i see the difference now
[08:19:33] <kakuhen> I get an #<error printing CONS #x302001368143> and that makes the 2nd make-instance upset
[08:20:04] <gilberth> hayley: Why have separate vectors? And stop blaming me for showing you how to match REs with DFAs.
[08:20:23] <hayley> gilberth: Saves on instruction decoding.
[08:20:26] <mfiano> "The class standard-object is the default direct superclass of the class standard-class. When an instance of the class standard-class is created, and no direct superclasses are explicitly specified, it defaults to the class standard-object"
[08:20:27] <hayley> gilberth: And who else do I blame?
[08:20:40] <mfiano> So this is a bug in CCL
[08:20:44] * gilberth looks around.
[08:21:01] <White_Flame> canada
[08:21:02] <gilberth> Nobody there, all hide. /me shrugs.
[08:22:10] <dave0> russia? china?
[08:22:32] <kakuhen> canada
[08:23:05] <kakuhen> i honestly dont understand CCL internals
[08:23:20] <gilberth> kakuhen: Even ccl 1.7 is fine, once you have :direct-superclasses, which you would have anyway.
[08:23:21] <kakuhen> I can jump to definition on a seemingly simple macro then there's an nx1 thing that's defined in terms of itself and it's not clear what it eve des
[08:23:22] <kakuhen> does*
[08:23:47] <gilberth> Magic?
[08:24:24] <gilberth> It's a meta-circular definition and the compiler is so damn smart and does what you mean. :-)
[08:26:00] <kakuhen> wow, clozure cl is a lot like math then i guess
[08:26:14] <kakuhen> at some point, you go so low level that you just put blind faith in some axioms
[08:26:32] <kakuhen> "countless people learned and verified this for years so it's likely not inconsistent..."
[08:27:02] <gilberth> "not inconsistent" lol
[08:27:29] <kakuhen> im friends with this guy who give the most insane reasons for why he suspects ZF is not a strong enough model for set theory, and it may be inconsistent 
[08:28:04] <kakuhen> with that said, lisp implementations are literal magic
[08:28:53] <kakuhen> like just look at defnx1 in ccl sources
[08:29:04] <kakuhen> defnx1 is used to define almost every single macro that defines defnx1
[08:29:07] <kakuhen> what the hell
[08:29:34] <contrapunctus> wat
[08:30:03] <kakuhen> well take cons for instance
[08:30:07] <kakuhen> that takes you to nx1-binop
[08:30:24] <hayley> https://www.youtube.com/watch?v=BI9gOtRMogY
[08:30:25] -ixelp- This Town Ain't Big Enough For Both Of Us - YouTube
[08:30:47] <kakuhen> or the IF macro
[08:30:50] <mfiano> kakuhen: Look at CDR in SBCL internals: https://github.com/sbcl/sbcl/blob/master/src/code/list.lisp#L31-L33
[08:30:51] -ixelp- sbcl/list.lisp at master · sbcl/sbcl · GitHub
[08:31:04] <gilberth> M-. cons leads me to define-x8664-vinsn cons ...)
[08:31:10] <mfiano> This is a compiler theory technique that only really makes sense if you understand compiler theory
[08:31:23] <kakuhen> gilberth: I get three options
[08:31:33] <kakuhen> compiler-macro, the thing you mentioned, and ccl::nx1-binop
[08:31:37] <gilberth> Ah, CMUCL. Yes, it always is that way, the compiler knows about those primitives.
[08:31:59] <hayley> ";; NSUBLIS is >400 lines of assembly. How is it helpful to inline?"
[08:32:03] <hayley> haha inlining goes brrrrr
[08:32:27] <kakuhen> compilers are too complicated -- i'll bash my head over algebraic geometry instead.
[08:32:33] <gilberth> kakuhen: My SLIME misses the nx1-binop. But I use an old version.
[08:33:21] <hayley> That said, I can't really have byte instructions, as SBCL is dumb and decides to keep array indices boxed, thus having to shift all the time to read from byte arrays.
[08:34:51] <gilberth> That's poor.
[08:35:21] <hayley> mfiano: A compiler is just a monoid in the category of endofunctors, what's the problem?
[08:35:31] <mfiano> pfft
[08:35:44] <hayley> I guess the table would be simpler to dispatch on?
[08:35:54] <kakuhen> if you want to go full smug
[08:36:03] <kakuhen> a monad is just a right kan extension of a right adjoint along itself
[08:36:03] <hayley> My bet is that the whole DFA fits in L1 anyway, and so it's not like we have to prefetch or do anything to make it cache-friendly.
[08:36:16] <kakuhen> dually, comonads are left kan extensions of left adjoints along themselves
[08:37:17] <kakuhen> it's actually a really neat way to densely pack the data of the triangle identities + the extra compatibility relations that give you a monoid over the target (or source) category of your left (or right) adjoint
[08:38:48] <kakuhen> oh and you can also express adjoints as kan extensions along some identity functor
[08:39:19] * White_Flame adjusts his turbo encabulator
[08:40:05] <kakuhen> i guess it's not as funny to define monads (or even adjoints) this way because it's actually meaningful once you get into higher homotopy and higher categories
[08:40:11] <mfiano> https://www.youtube.com/watch?v=aW2LvQUcwqc
[08:40:11] -ixelp- Technical Jargon Overload - YouTube
[08:40:24] <kakuhen> whereas the "monoid over this category of endofunctors" is hilarious because it's useless the moment you move to even a 2-category
[08:40:38] <kakuhen> obfuscates + useless generalization
[08:42:27] *** Quits: notzmv (~zmv@user/notzmv) (Remote host closed the connection)
[08:43:44] *** Joins: notzmv (~zmv@user/notzmv)
[08:45:04] <gilberth> hayley: Well, my experience is that keeping the constants right in the stream of instructions is faster.
[08:46:29] <hayley> Table does that too. But, given that either fits in cache, and we don't have more indirections, they should be the same.
[08:51:22] *** Quits: notzmv (~zmv@user/notzmv) (Read error: Connection reset by peer)
[08:54:14] *** Joins: notzmv (~zmv@user/notzmv)
[08:55:34] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[08:58:38] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[08:58:58] <hayley> But so far my poll just says people want SIMD/BMH optimisations, which rids us of grep[] and a lot of states and variables, leading to a faster compiler anyway.
[09:02:05] <Qwnavery> it is the big wet.
[09:02:17] <gilberth> Which doesn't help me with a scanner. So people want a faster grep for a constant string, and not faster parsers. Well then, everything is a string.
[09:04:52] <hayley> Yes, we haven't nailed semantic representations of human text yet.
[09:05:51] <Qwnavery> 2 weeks til cyclone season, because 2021 couldn't get any worse
[09:08:53] <Mondenkind> CAR and CDR are obvious, but I am surprised that they implemented the rest of the C*R specially.  Instead of spelling out the intermediate steps and inlining
[09:09:35] <hayley> https://www.youtube.com/watch?v=3kdefBY9-PU
[09:09:36] -ixelp- Replicas (Remastered) - YouTube
[09:11:56] <Mondenkind> they also order the c*r very strangely, in a way that makes it difficult to see their correctness
[09:18:54] <hayley> (defun cr (x) x)
[09:22:25] <selwyn> lol
[09:22:45] <gilberth> Oh, my CADR trashed the [emulated] disk.
[09:23:22] <gilberth> I should implement copy-on-write.
[09:28:05] * hayley wonders if the ancient debris in Minecraft is ancient poop.
[09:28:20] <hayley> Though, if you can get sheets from cooking it, musn't be a good diet.
[09:28:57] <hayley> https://static.wikia.nocookie.net/minecraft_gamepedia/images/4/4c/Ancient_Debris_JE1_BE1.png/revision/latest/ also the lava looks like beans.
[09:33:14] <White_Flame> do you bed-mine or sideways-mine?
[09:42:06] <hayley> Beds.
[09:43:15] *** Joins: amirouche (~amirouche@user/amirouche)
[09:45:50] <hayley> I got a lot of wool after dismembering a pillager outpost, and got 4 netherite ingots so far.
[09:47:01] <amirouche> hayley: there is someone interested in CL p2p thingy, what is one URL of your project?
[09:47:04] <amirouche> on #lisp
[09:47:11] <hayley> Seems I still have too much iron, and not enough diamonds.
[09:48:00] <hayley> https://zenodo.org/record/4712699 ELS paper https://gitlab.com/cal-coop/netfarm/ code
[09:48:01] -ixelp- A replicated object system | Zenodo
[09:48:40] <hayley> Note that distributed object systems are not distributed (e.g. E, Spritely, Erlang sorta) - objects only exist on one node at a time, and any other occurences are mere proxies.
[09:50:39] <hayley> So I found myself inventing the term "replicated object system" to make a distinction, even though the names don't match up with anything.
[10:06:29] *** Joins: rogersm (~rogersm@90.166.177.48)
[10:09:52] <hayley> Okay, diamond problem has been handled, I just remembered I had a fortune pickaxe.
[10:10:15] <hayley> Guess I make a netherite pick now.
[10:11:11] *** Quits: rogersm (~rogersm@90.166.177.48) (Ping timeout: 264 seconds)
[10:12:54] *** Joins: rogersm (~rogersm@90.166.177.48)
[10:17:58] *** Joins: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se)
[10:18:18] *** Joins: pjb (~pjb@user/pjb)
[10:22:52] * hayley uploaded an image: (27KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/QGWrdMVEbzeTgwxlbbKahhqL/Screenshot_2021-10-18_17-59-41.png >
[10:24:45] <White_Flame> fortune 2?  need more nasebohren and get that up to 3
[10:25:53] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 258 seconds)
[10:26:30] <hayley> Someone suggested to me to pray to Billy Mays to get Dream RNG for piglin trades. Hasn't worked yet ):
[10:28:06] <dave0> hayley: do you have 26 potatos?
[10:28:13] <hayley> That's bread.
[10:28:22] <dave0> ah
[10:29:35] <hayley> It seems I still have too many seeds from the wheat farm though, and I overwhelm the composter^WGC. But I wouldn't know how to make it parallel really.
[10:29:48] <hayley> ...other than to use two processing paths, which works but is clunky.
[10:40:32] <gilberth> Go is no longer supported with GCC? Hugh.
[10:41:03] <gilberth> Perhaps I need to get that separately. nvm
[10:45:35] *** Joins: holycow (~holycow@2a0f:e586:f:f::147)
[10:45:38] <hayley> But why?
[10:45:55] <holycow> hi guys
[10:46:03] <hayley> Hello.
[10:46:23] <holycow> i was told people here created the netfarm suite.  can someone explain to me what it does?  i'm a bit too slow to really understand it.
[10:46:26] <holycow> hi hayley
[10:46:38] <hayley> Myself and Gnuxie would have done that.
[10:46:47] <holycow> oh! 
[10:47:03] <holycow> looks neat. the idea is a proof of concept i guess?
[10:47:31] <hayley> Netfarm provides an "object system" running atop a distributed hash table. The object system lets you define methods which run to perform eventually consistent, commutative side effects.
[10:47:49] <holycow> okay got it.
[10:48:08] <hayley> Some parts are proofs of concept (I am starting to think I don't like the particular CRDT I specified), but others are the closest to the real deal.
[10:48:37] <holycow> may i ask a few more questions?  i don't want to bother people if they are about to end their break or something.
[10:48:40] <hayley> Oh, and the "server" needs to be more space efficient, but I need to redo the server for that.
[10:48:49] <hayley> Sure!
[10:49:06] <hayley> That said, I don't really work on it, as I have no target audience. Until now?
[10:49:14] <holycow> ha!
[10:49:15] *** Joins: pjb (~pjb@user/pjb)
[10:49:28] <holycow> i learned about the project from amirouche in #lisp
[10:49:41] <hayley> Right, he asked me about it.
[10:49:50] <holycow> i wrote up a bit of a project description here: https://pastecode.io/s/rvydjpqz
[10:49:51] -ixelp- Untitled in plain_text (rvydjpqz) - PasteCode.io
[10:49:52] <holycow> right!
[10:50:23] <holycow> well every time i dare ask something in a lisp channel, someone kind of knows everything and i have like 14 hours of reading to do 
[10:50:29] <hayley> Well, I can replicate documents with S-expression markup. Think there's a demo of that somewhere...
[10:50:35] <holycow> whoa
[10:50:39] <holycow> really?
[10:51:07] <hayley> Versioning and encryption seems messy to me though, as we have to "lift" applying the CRDT effects into the client library, rather than in Netfarm.
[10:51:32] <holycow> let me know when you are done reading, i don't want to interrupt
[10:51:37] <holycow> i really appreciate your time
[10:52:01] <hayley> https://youtu.be/iXov5ukVVWI?t=1548 has a mock "forum" which I used to demo the collaborative filtering system. But there are documents, and the prototype client in CLIM can render S-expression documents.
[10:52:02] -ixelp- Techniques and Utilities for Farming Objects On The Net - Online Lisp Meeting #7, 26.08.2020 - YouTube
[10:52:35] <holycow> well, ideally i want everything in clim
[10:52:37] <holycow> but 
[10:52:42] <hayley> An open problem (at least for me) would be associating encrypted objects without leaking metadata, though.
[10:52:52] <holycow> the target audience and platforms and other things are an issue
[10:53:20] <hayley> Sure. It's all portable enough though.
[10:53:29] <holycow> honestly, i could strip away from that writeup a bunch
[10:53:46] *** pjb is now known as Guest4556
[10:54:25] <hayley> I mean, I want a solution to that problem, since it also allows for E2EE messaging too. Having another application being able to use such a mechanism is just better.
[10:54:59] <holycow> watching video.  let me know when i can jump in and ask questions
[10:55:08] <holycow> thanks for the link
[10:55:31] <hayley> Ask whenever, I'm not busy.
[10:56:00] <holycow> okay.  so i'm a sysadmin not a programmer.  i dabble and write scripts, i do a bit of django and such.
[10:56:56] *** Quits: Guest4556 (~pjb@user/pjb) (Ping timeout: 258 seconds)
[10:57:21] *** Joins: pjb (~pjb@user/pjb)
[10:57:24] <hayley> Fair enough. The demo shows off some low-level stuff that you only need to touch once.
[10:57:28] <holycow> the lotus notes / domino example is my reference point for something like: if i could give users one binary that they can use subscribe to document oriented applications it means we could publish our content without having the intermediary dns infrastructure and control it imposes
[10:57:40] <holycow> i'm not stuck on any technology
[10:57:48] <holycow> i'm in love with lisp and s-expressions
[10:58:27] <holycow> i was thinking that if i wanted to create a book with a hierarchical menu, and have people subscibe to the book as i create pages what might that look like
[10:59:00] <holycow> my non programmer eyes kind of want everything in a lisp environment so developers that want to build on top of it have a live working environment to work with
[10:59:31] <holycow> and ideall, it's really weird to hear you say mcclim .. because ultimately that is what i would like the final client rendering to be done in
[11:00:21] <holycow> i sort of thought, what is the minimm amount of work that needs to be done here and i thought okay: lisp for the language, clog for the application server and offload the client rendering to the browser people, encryption to the encryption libraries, databse to the sqlite people and so forth
[11:00:43] <holycow> my minimum mvp application is basically wikipedia with a hierarchical menu.
[11:01:08] *** pjb is now known as Guest1819
[11:01:26] <holycow> so document oriented, using some kind of markup perhaps a dsl created in lisp  if we wanted to get fancy
[11:01:40] <holycow> and have clog spit out the html
[11:02:00] <hayley> Right, yes.
[11:02:01] <holycow> and write an extension for the framework to provide 'replication' tasks
[11:02:11] *** Quits: Guest1819 (~pjb@user/pjb) (Ping timeout: 245 seconds)
[11:02:30] <holycow> that way my thought on what might be the minimum possible work that would need to be done to create an mvp
[11:02:49] *** Joins: pjb (~pjb@user/pjb)
[11:02:52] <holycow> if i were to ask you to create a wikipedia style mvp with the ability for each page to have a category / uncategorized
[11:03:02] <holycow> absolutely bare bones, no fancy features
[11:03:11] <holycow> no javascript drag and drop or whatever in mcclim
[11:03:21] <holycow> how might you visualize building it?
[11:03:26] <holycow> using whatever tools you want
[11:03:33] <holycow> oh by the way hayley
[11:03:39] <holycow> i'm asking you consulting style questions right now
[11:03:52] <holycow> if you like track your time and i will pay for your time
[11:04:29] <hayley> It's no problem. I'm not in a position to be billing anyway :)
[11:04:58] <holycow> I appreciate it, I hate imposing, the option is always there, just ask
[11:05:00] <Qwnavery> hayley: does cal-coop have an XMPP bridge?
[11:05:26] <hayley> Qwnavery: Nope, unfortunately. Only #netfarm is bridged to Libera currently.
[11:05:54] <Qwnavery> ah ok, what's on #netfarm?
[11:06:12] <Qwnavery> *derp* ignore that.
[11:07:23] <hayley> Well, I would define classes for book, category, page, and figure out how to get links between them all. Assuming that categories in a book and pages in a category are unordered and are never removed (perhaps a dumb assumption), it suffices to tell Netfarm to add categories and pages to their respective sets when it sees them.
[11:07:35] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 264 seconds)
[11:07:56] <hayley> Else, we use a proper versioning scheme, and I have a simple one already implemented.
[11:09:08] <holycow> does each subscriber get a local copy of the data so they can read the book locally?
[11:09:15] <hayley> Then there are two options for presentation. We could use the interactor program (from the demo video) and specify methods to render all those objects, or we could write a proper client in CLIM.
[11:09:58] <hayley> Objects are already replicated into memory; it wouldn't be too hard to save them to disk too.
[11:11:18] <hayley> The only problem I see is that, would we add encryption, we either leak a crapton of metadata (e.g. the general "shape" of a book, who digitally signed the book), or use less efficient replicated data structures.
[11:11:52] <holycow> to start with, no encryption. the encrypted part was just to desribe the benefits of a fully featured solution
[11:12:19] <hayley> Okay, but as I don't have an answer for that, you could be designing yourself into a corner.
[11:12:33] <holycow> i was thinking lisp + clog + sqlie and bolt on a replicator for the simple reason that once you can replicate each document out you can come back to it later and add encryption
[11:13:46] <holycow> yeah, well, anything in this line of thinking would be setting money on fire anyway
[11:14:04] <holycow> so let me ask you this.  you have a server and client component to your solution.  its really cool.
[11:14:24] <holycow> you created the client in clim which is ultimately the right solution
[11:14:53] <holycow> the client gets the subscribed object info in a native s-expression i presume
[11:15:06] <holycow> what if you needed to publish to a different output, say html?
[11:15:36] <hayley> Actually, the signing part could be done. Sign the book with one key, and then reference the actual author in the encrypted book, with a signature of the unencrypted key by the author.
[11:15:56] <holycow> ah, right.  yes true.
[11:16:02] <hayley> The client receives an instance of a class, which is either as "native" as it gets if you have the class defined, else it creates a class on the fly.
[11:16:05] <Qwnavery> hayley: do you have any reccomendations for a linux matrix client
[11:16:46] <hayley> What happens in the inspector demo is that an object has a "present" method which spits out an S-expression for a Markdown-ish document. Then you can render it to CLIM, HTML, etc.
[11:16:56] <hayley> Qwnavery: I am lazy and use the element.io web client.
[11:17:47] <holycow> oh interesting
[11:18:05] <holycow> so, technically, one could create an app on your framework that even spits out static html.
[11:18:35] <holycow> you manage the "cms" locally, generate the html and the rest is just deploying to web server
[11:18:45] <hayley> https://gitlab.com/cal-coop/netfarm/netfarm-interactor/-/blob/master/Code/CLIM/translate-presentation.lisp#L30-72
[11:18:47] -ixelp- Code/CLIM/translate-presentation.lisp · master · Cooperative of Applied Language / The Netfarm Suite / Netfarm Interacto [...]
[11:18:56] <hayley> Yes, right.
[11:19:14] <holycow> that is so interesting.
[11:19:58] <hayley> I've also had very ironic ideas to archive objects on HTTP servers (and worse). It's easy to read objects off any server, but not so much write without any dynamic logic, so it'd just be an archive. But a neat idea to me.
[11:20:06] <holycow> how much of what you created ovelaps clog?  https://github.com/rabbibotton/clog
[11:20:07] -ixelp- GitHub - rabbibotton/clog: CLOG - The Common Lisp Omnificent GUI
[11:20:37] <hayley> I'd wager there's no overlap. This would all be "backend" stuff.
[11:20:53] <holycow> that is what i was thinking
[11:20:59] <hayley> If you've been on those olde forums, the S-expression document format would be like storing BBcode.
[11:21:08] <holycow> right!
[11:21:48] <holycow> would it be fair for me to visualize that clog would use netfarm for the storage / transit parts if the wiki was created in clog?
[11:22:04] <holycow> just trying to visualize what the stack might look like
[11:22:11] <hayley> Quite likely.
[11:22:17] <holycow> huh
[11:22:52] <holycow> note: not stuck on clog, it just fits nicely into a category
[11:23:14] <holycow> lisp coders kind of handwave and drop all kinds of code that spans categories and its hard for normies like me to understand
[11:23:54] <holycow> do you mind me asking, why you creating netfarm?  its as seriously cool as clog coneptually.
[11:24:05] <holycow> or hunchentoot or whatnot
[11:24:32] <hayley> Because no one else takes distributed moderation and protocol design seriously.
[11:25:41] <holycow> let me pm you
[11:25:46] <hayley> Sure.
[11:28:29] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[11:29:02] <kakuhen> hayley do you remember the link to the thing about rust being able to nearly brick hardware b-but that's ok because hey no GC :)
[11:29:08] <kakuhen> i lost it and i cant find it, and i swore you posted itbefore
[11:29:09] <kakuhen> it before*
[11:29:20] <kakuhen> sorry for the sudden request, it's just really relevant in a convo im having with a friend rn
[11:29:32] <hayley> The closest thing I can think of is how they needed memory protection on a Rust unikernel still.
[11:29:41] <kakuhen> it was a reddit post if that helps
[11:30:12] <kakuhen> yeah i think this is it, thanks
[11:31:24] <hayley> https://www.ssrg.ece.vt.edu/papers/vee20-mpk.pdf
[11:33:26] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 245 seconds)
[11:35:50] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:35:53] *** Joins: notzmv (~zmv@user/notzmv)
[11:35:57] <gilberth> I am root and may not scribble in /usr? That's it! I AM DONE.
[11:36:42] <kakuhen> >the absence of a garbage collector allows Rust to avoid much runtime overheads
[11:37:01] <kakuhen> ah yes, thanks to the absence of a GC, we can break the kernel really fast :)
[11:38:14] <gilberth> I have a better idea: Don't check for integer or buffer overflows, they only cost cycles and thus are bad for the climate.
[11:38:36] <Mondenkind> gilberth: chattr -i?
[11:38:41] *** Joins: pjb (~pjb@user/pjb)
[11:39:21] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:39:21] <gilberth> chattr: Command not found
[11:40:41] <hayley> gilberth: Yes, you need to go into safe mode and disable some protection for it.
[11:41:36] <gilberth> Really? Have I installed Windows, or what? Reboot to fix /usr? Seriously?
[11:41:57] <hayley> Yes.
[11:42:14] <hayley> No, wait, it was recovery mode. Whack open a terminal and type some random shit command I forgot.
[11:42:47] <hayley> https://www.macworld.co.uk/how-to/how-turn-off-mac-os-x-system-integrity-protection-rootless-3638975/
[11:43:09] <kakuhen> oh also do you have the paper about the concurrent GC that SICL is planning to use
[11:43:12] <gilberth> I'll upgrade from 10.14 to 10.10 and then leave it at that.
[11:43:56] <Mondenkind> kakuhen: http://metamodular.com/SICL/sliding-gc.pdf ?
[11:44:00] <kakuhen> Thanks
[11:44:09] <gilberth> I knew it was an error to install anything newer in the first place.
[11:44:39] <gilberth> And I don't have the patience for this kind of bullshit.
[11:44:48] <hayley> FWIW that GC is stop the world, but it's used for thread-local nurseries.
[11:45:04] <hayley> The concurrent global GC is more like https://xavierleroy.org/bibrefs/Doligez-Leroy-gc.html
[11:46:28] <Qwnavery> hayley: apparently the server is down or I don't have perms :<
[11:46:43] <hayley> It works for me ):
[11:46:53] <Qwnavery> oh sorry, I mean the matrix server
[11:47:04] <Qwnavery> x_x
[11:47:20] <pjb> gilberth: Apple considers that /usr is theirs!
[11:47:25] <pjb> gilberth: use /opt/usr
[11:47:49] <gilberth> Can't.
[11:48:01] <gilberth> So this machine is not mine anymore.
[11:48:02] <pjb> that's a general problem with unix distributions: they sell you canned sysadministration.
[11:48:13] <pjb> You're not the sysadmin anymore indeed.
[11:48:22] <hayley> Well, element.io works here too.
[11:48:42] <kakuhen> gilberth: regarding integer overflows, it's kinda funny
[11:48:51] <gilberth> pjb: Oh dear.
[11:49:08] <kakuhen> a lot of the recent exploits in XNU kernel and some Mac OS frameworks boil down to C's god awful numeric tower
[11:49:30] <gilberth> You call that a tower?
[11:49:36] <kakuhen> find a part of the system where some brilliant C programmer decided "bounds checking is bloat, we need speed!"
[11:49:37] <pjb> :-)
[11:50:46] <hayley> The Leaning Tower of Pisa 2: 90° boogaloo
[11:51:13] <hayley> kakuhen: I'll give you $5 if you can do the same thing on some OS written in Rust.
[11:51:42] <gilberth> kakuhen: Yes, and security measure are just panic. I can't charge by phone anymore without unlocking it, for security reasons, I read. Could be that some of those electrons are a Trojan horse or something.
[11:53:09] <dave0> i wrote some c code that actually checks for signed integer overflow for + - * and the check code is 10x longer than the actual operation
[11:53:29] <Qwnavery> le C in a nutshell
[11:54:10] <pjb> dave0: obviously…
[11:54:58] <pjb> When you think that the processor may have traps to deal with that automatically!
[11:56:57] <pjb> It would cost nothing to generate: ADD D0,D1 ; TRAPV ;  with pipelined processors, the test for overflow is entirely done in parallel!
[11:57:25] <dave0> i spy m68k assembly :-)
[11:57:44] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[11:58:28] <gilberth> dave0: Yes, and it's not trivial to do. It should be the reverse: It should be hard to convince the compiler that it is safe to skip the checking.
[11:58:44] <Mondenkind> pjb: arithmetic + jo is not fused on modern x86s, so it does take up btb space.  Still not an excuse for avoiding it, though
[11:58:46] <hayley> kakuhen: Okay, I'll raise that to $10.
[11:58:58] <kakuhen> "OS written in Rust"
[11:59:05] <kakuhen> ok ill find it 10-20 years from now
[11:59:06] <kakuhen> :3c 
[11:59:13] <hayley> Let me help: redox-os.org
[11:59:28] <kakuhen> >Unix-like operating system
[11:59:39] <kakuhen> Haha we are safely reimplementing a bad idea, isn't this such a great idea, guys!!
[12:00:32] <kakuhen> ok maybe in 5 years i can find something funny in this OS, but that assumes i constantly look for things in it
[12:00:55] <hayley> https://github.com/redox-os/kernel last commit: "Workaround race conditions when cloning from multiple threads"
[12:00:56] -ixelp- GitHub - redox-os/kernel: Mirror of https://gitlab.redox-os.org/redox-os/kernel
[12:01:09] <hayley> Sorry, I think I only need to pay you $10 for this one.
[12:09:03] <contrapunctus> hayley: I have need of your knowledge of memology. What's that 'I go to <place>' meme from? Couldn't find it on KYM, nor elsewhere...I think the actor in it is Sacha Baron Cohen...
[12:09:17] <hayley> Doesn't ring a bell.
[12:10:27] <contrapunctus> https://www.youtube.com/watch?v=d4KSBpcZ0S0
[12:10:28] -ixelp- Borat 2 Traveling to USA to meet Trump Scene | HD clip - YouTube
[12:11:07] <contrapunctus> Ah, in accordance with the law of IRC, I have a brainwave (that of checking on YouTube) as soon as I ask someone 😏
[12:11:31] * hayley has an email with a business-to-business marketing pitch.
[12:11:42] <hayley> "How's it going, fellow business?"
[12:12:09] <contrapunctus> lol
[12:12:18] <contrapunctus> Seems legit.
[12:20:39] <kakuhen> dude search engine optimization lmao
[12:22:51] <gilberth> ?
[12:28:19] *** Parts: holycow (~holycow@2a0f:e586:f:f::147) ()
[12:30:39] <kakuhen> oh btw i decided to look up hexstream
[12:30:45] <kakuhen> wow that's a ton of drama to read about
[12:31:16] <gilberth> Are you bored?
[12:31:24] <kakuhen> yes, i am distracting myself from tough math homework
[12:31:24] <kakuhen> x.x
[12:51:24] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[13:13:33] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[13:20:11] <mfiano> Mondenkind: I finally understand container semantics and the 'lexical pad'
[13:20:29] <mfiano> and by extension binding with :=
[13:21:02] <mfiano> The docs are really great. Should have ignored that poorly written book from the start.
[13:23:57] <Mondenkind> nice
[13:26:53] <mfiano> Unrelated: I would highly recommend reading the docs page on signature objects if you haven't.
[13:27:08] <mfiano> The amount of thought that went into function signatures is amazing.
[13:31:02] <Mondenkind> yeah, signatures are pretty great.  Once I made a type which was satisfied by classes parameterized according to n types (for some n), which involved looking at the signature of some method
[13:32:43] <mfiano> Yeah they can do pretty cool things like creating N aliases for named parameters and all sorts of stuff.
[13:33:20] <mfiano> I don't know if I've seen a more featureful signature in a language before. The signature docs are pretty immense
[13:37:54] <Mondenkind> there was a really great SO answer that abused signatures horribly...I cannot find it now
[13:39:35] <mfiano> ah i believe it
[13:42:31] <mfiano> The only thing that is bugging me still is the reliance on having methods be part of a class. Having an alternative to inheritance with mixins doesn't solve the problems that imposes, if Crystal lang taught me anything
[13:43:10] <mfiano> But I haven't actually tried to design anything complex yet to know
[13:45:01] <mfiano> Currently reading the OOP docs and I think it is overly complicated all because of this fundamental decision
[13:45:07] <mfiano> Like the whole `trusts` system
[13:49:31] <Mondenkind> I get what they were going for, which is message-passing.  But yeah, I don't think it was ultimately the way to go
[13:51:39] <mfiano> Mondenkind: I was doing some reading and it seems that adding a lot of types is actually bad for performance. I would like to see your benchmarking code you did against CLOS sometime...and also probably retest that against the upcoming VM release that makes dispatch a lot faster
[13:52:18] <mfiano> s/CLOS/SBCL CLOS/
[13:53:18] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[14:25:24] *** Quits: nckx (~nckx@tobias.gr) (Quit: ♪ It's the most wonderful time of the year 🎃)
[14:40:34] *** Joins: nckx (~nckx@tobias.gr)
[14:40:40] *** Joins: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com)
[15:42:27] *** Quits: hendursa1 (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[15:42:56] *** Joins: hendursa1 (~weechat@user/hendursaga)
[15:45:17] *** Joins: random-nick (~random-ni@87.116.178.206)
[15:46:52] <dave0> nite all
[15:47:37] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[15:56:32] <hayley> ❌ virtual rms package auditing thing ✔️ virtual robert strandh linter
[16:04:27] *** Quits: random-nick (~random-ni@87.116.178.206) (Read error: Connection reset by peer)
[16:04:33] *** Joins: random-nickname (~random-ni@87.116.178.206)
[16:07:26] *** Quits: random-nickname (~random-ni@87.116.178.206) (Client Quit)
[16:08:59] *** Joins: random-nick (~random-ni@87.116.178.206)
[16:12:38] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:59a6:cb38:6d37:7205)
[16:21:27] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[16:23:13] <selwyn> common lisp linter?
[16:25:00] <hayley> "You wrote (when x (cdr x)) absolutely horrific"
[16:28:17] <selwyn> (if x (cr x) (cdr x))
[16:28:32] <selwyn> uh
[16:28:55] <selwyn> fucked that lol
[16:29:31] * hayley uploaded an image: (79KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/RGYUrKkuXfylbHfVanOyRSiL/IMG_20211018_004245.jpg >
[17:00:39] *** Joins: raeda (~raeda@72.49.219.33)
[17:19:38] *** Joins: icer (eric@gateway/vpn/protonvpn/icer)
[17:25:14] <pjb> selwyn: (cdr x)
[17:36:11] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[17:37:08] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[17:48:18] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[17:49:40] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[17:57:04] <selwyn> yes
[18:29:41] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[18:50:30] <shka> hi all
[18:51:59] *** Quits: icer (eric@gateway/vpn/protonvpn/icer) (Ping timeout: 264 seconds)
[19:31:07] *** Joins: domovod_ (~domovod@176.196.122.197)
[19:32:49] *** Quits: emacsomancer (~emacsoman@136.60.128.68) (Quit: WeeChat 3.3)
[19:33:34] *** Joins: emacsomancer (~emacsoman@136.60.128.68)
[19:34:35] <selwyn> o/
[19:34:37] <selwyn> long time no see
[19:34:41] *** Quits: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com) (Ping timeout: 245 seconds)
[19:36:49] <shka> yeah
[19:44:13] <selwyn> hope you are well
[19:48:35] <shka> i am fine, i was on vacations
[19:51:27] <selwyn> great
[19:51:43] <shka> been jogging in the forest
[19:51:53] <shka> ran into military camp
[19:52:01] <shka> #easterpoland
[19:54:09] *** Quits: domovod_ (~domovod@176.196.122.197) (Quit: WeeChat 3.3)
[19:54:52] <shka> oh, and i bought myself a bike finally 
[19:58:01] <contrapunctus> shka: lovely
[20:03:24] <selwyn> https://www.youtube.com/watch?v=FPMXt9Me_Fo
[20:03:25] -ixelp- Pink Floyd - "Bike" - YouTube
[20:03:52] <selwyn> what happened in the camp
[20:04:35] <shka> nothing, just guys chilling out off duty 
[20:04:42] <shka> near the border 
[20:11:00] <shka> selwyn: btw, how about the UK health care?
[20:11:08] <shka> got better after leaving the EU? :D
[20:12:44] <selwyn> glad i am not ill these days
[20:12:48] <selwyn> lets put it that way
[20:13:12] <selwyn> apparently ports are turning some containers away
[20:13:21] <selwyn> but my aliexpress order already made it into the country
[20:14:55] <shka> oh, so you have your files now?
[20:15:05] <selwyn> i didn't get it delivered to my door yet
[20:17:44] <shka> oh, right
[20:17:51] <shka> this is actually not as easy 
[20:17:58] <shka> because it has to get trucked
[20:19:06] <shka> other news, i just discovered that somafm has some new station
[20:19:10] <shka> including this one https://somafm.com/synphaera/
[20:19:12] -ixelp- SomaFM: Synphaera Radio: Featuring the music from an independent record label focused on modern electronic ambient and s [...]
[20:20:32] <mfiano> Oh nice
[20:20:48] <mfiano> I listen to defcon while coding usually. Will check this out
[20:25:53] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[20:27:53] *** Joins: robin (~robin@user/terpri)
[21:04:11] <selwyn>  shka: uk announced that it will go hard into smrs
[21:11:01] <shka> RR was supposedly working on it
[21:11:15] <shka> so it is even domestic tech
[21:11:56] <shka> anyway, makes sense, you can't go solar, and wind can't scale up to infinity 
[21:13:32] <selwyn> fun fact is that the queen can collect royalties from offshore wind
[21:15:42] <selwyn> i heard that rr is supposedly not taking it that seriously
[21:15:47] <selwyn> it is a funding vehicle
[21:20:41] <shka> well, the can reevaluate their approach since new perspective has opened 
[21:21:36] <shka> selwyn: regardless, it makes sense imho
[21:21:59] <selwyn> yeah
[21:22:03] <selwyn> i don't like wind that much
[21:22:37] <shka> wind is ok, but it has no capability for this kind of scale 
[21:23:19] <selwyn> there's no way to recycle the turbines, which have a 30 year life expectancy
[21:26:16] <shka> i mean, no cost effective way anyway
[21:26:38] <shka> you could do that if you would have abundance of power
[21:28:24] <selwyn> i suppose
[21:30:59] <shka> which you don't have 
[21:31:04] <shka> because XXI century 
[21:31:24] <shka> and if you would have, carbon capture is a better idea most likely
[21:32:00] <selwyn> a lot of quantum computing people claim carbon capture as a potential application of qc
[21:32:02] <pjb> or: https://phys.org/news/2021-10-liquid-metal-proven-cheap-efficient.html
[21:32:21] <selwyn> which is a big claim imo, but we have to try
[21:32:24] <selwyn> it could work
[21:35:30] <selwyn> is uranium extraction from seawater actually viable?
[21:35:43] <shka> selwyn: yes
[21:35:49] <selwyn> i read some commodities pieces about the uranium supply and no-one mentioned it
[21:36:05] <shka> 5 times more expensive then mining 
[21:36:15] <shka> which is to be said, pretty cheap
[21:36:19] <selwyn> only 5 times
[21:36:21] <selwyn> right
[21:36:58] <shka> uranium cost is a very small fraction of the total operational cost of the nuclear power plant anyway
[21:37:41] <selwyn> extracting it from seawater seems as close as you can get to green mineral extraction anyway
[21:39:02] <shka> i don't know about the "green" part but it can be done
[21:39:26] <shka> and France for instance is very likely to take a look at this in the future
[21:39:43] <shka> because they get most of the Uranium from Africa
[21:40:19] <shka> and currently Putin's Special is going on in their sphere of influence 
[21:42:13] <shka> https://www.bbc.com/news/world-africa-58751423
[21:42:41] <shka> they also produce anti-French movies which are distributed trough the nation
[21:42:54] <selwyn> well
[21:43:11] <shka> officially not-existing armed forces? checked
[21:43:29] <shka> propaganda media? checked
[21:43:42] <selwyn> africans have many reasons to not like france anyway
[21:43:50] <selwyn> including, incidentally, nuclear testing in the sahara
[21:44:14] <selwyn> that said, last i heard was that french support in mali was popular there
[21:44:23] <shka> ask Kazahs about the moral virtues of the Russia :P
[21:45:20] <shka> besides, Russia is not like China
[21:45:30] <shka> they are not going in with investments and money
[21:45:38] <shka> they go in with guns
[21:46:37] <shka> and at least, if France is taking something, chances are they are at least paying for it
[21:47:24] <shka> while those Russian mercenaries have a questionable loyalties 
[21:48:51] <shka> also, apparently military prowess of those guys is not the best 
[21:49:00] <selwyn> idk
[21:49:21] <shka> while, on the other hand
[21:49:31] <shka> you have the Foreign Legion
[21:49:45] <shka> and Foreign Legion does not mess around
[21:50:21] <selwyn> french ex colonies had to deposit part of their foreign currency reserves in france
[21:50:28] <selwyn> that's what france gets out of africa
[21:51:27] <pjb> Only if they wanted to use the CFA Francs.
[21:51:28] <selwyn> admittedly, i agree that france probably can fight, in contrast to the uk/usa who couldn't rack up any victories recently
[21:51:28] <shka> honestly, it is not even that bad of any idea 
[21:51:50] <shka> at least France is stable country 
[21:51:50] <selwyn> some suspect (me included) that the usa is discarding uk in favour of france as a partner
[21:52:04] <shka> lol
[21:52:06] <shka> no
[21:52:06] <pjb> This doesn't look like it from Franec.
[21:52:30] <selwyn> because of the failure of the british army to impress in iraq and afghanistan
[21:52:42] <shka> France is famously zealously independent in the military department
[21:52:47] <selwyn> well, yeah
[21:52:47] <shka> they even left the NATO
[21:52:52] <shka> and then rejoined it
[21:52:55] <selwyn> whether france will accept such a thing, is a different question
[21:52:59] <pjb> shka: we should leave it for good again.
[21:53:05] <pjb> But we're not independent anymore. 
[21:54:23] <shka> selwyn: UK standing with USA became much worse after leaving EU 
[21:54:37] <selwyn> and the ireland stuff
[21:54:45] <shka> because now you guys can't lobby for USA in the EU
[21:55:09] <shka> and, besides, you don't have much alternative to the USA at the moment
[21:55:20] <selwyn> yeah
[21:55:22] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[21:55:29] <shka> so it is like me
[21:55:29] <selwyn> no strategic direction at all (not that there was before)
[21:55:52] <shka> lonely, thirsty, and desperate :P 
[21:57:03] *** Joins: aeth (~aeth@user/aeth)
[21:57:09] <selwyn> there is a divergence between how the uk and usa see the world
[21:57:19] <selwyn> which doesn't get talked about often enough
[21:57:25] <selwyn> might cause problems eventually
[21:58:50] <selwyn> looks like poland is standing up for 'state's rights' in the eu
[21:58:53] <selwyn> civil war when
[21:59:40] <shka> oh, don't piss me off 
[22:00:45] <shka> this, along with the border crisis is source of the unquenchable anger for me
[22:06:41] <selwyn> bit of a long shot but i have a maths question
[22:07:01] <selwyn> if i complete the square on a quadratic x^2 + ax + b = (x+c)^2 + d
[22:07:24] <selwyn> does 'c' have a name?
[22:07:47] <shka> yes
[22:07:51] <shka> it is called 
[22:07:54] <selwyn> maybe 'displacement' but i can't find anyone calling it anything
[22:07:54] <shka> 'c'
[22:07:56] <shka> ;-)
[22:08:06] <selwyn> 👏👏👏
[22:09:56] <White_Flame> isn't there a missing term on there?  e*(x+c)^2 + d
[22:10:13] <White_Flame> otherwise, you're only translating the unit parabola around
[22:11:08] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:13:14] <selwyn> i am fine with considering the unit parabola in this case
[22:13:42] <White_Flame> ok, I'd simply call c and e as x & y offsets to the parabola
[22:13:46] <White_Flame> erm, c and e
[22:14:07] <White_Flame> or probably more geometrically appropriate, as translations
[22:14:25] <selwyn> x=-c is the turning point, but that does not tell us what c can be called
[22:16:45] <selwyn> anyway, i can avoid calling it anything at least for now
[22:16:51] <White_Flame> the point on the graph is called the vertex of the parabola
[22:16:58] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Quit: Konversation terminated!)
[22:17:03] <selwyn> really?
[22:17:11] <White_Flame> but that doesn't specifically name the x-coord of it
[22:20:05] <copec> I wish instead of everybody making a new language (I mean who doesn't want to be the benevolent dictator of a language everybody uses), they would just advocate or implement changes to existing languages
[22:20:29] <copec> I would suppose in academia there is much more of that
[22:21:06] <copec> of course, you can't just do that in most languages, because they haven't reached the lisp-like threshold, so you would have to compile from the DSL to the respective language 
[22:21:27] <White_Flame> at least CL allows you to pretty much build far more stuff consistent with the rest of the language, without changing the language implementation itself
[22:21:29] <White_Flame> yeah
[22:21:29] <copec> So again, I work out why that is that is, but this time I actually pushed enter on my comments
[22:21:36] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[22:23:48] <pjb> x^2 + ax + b = (x+c)^2 + d <=> ax+b=2cx+c²+d <=> (2c-a)x=c²+d-b <=> x=(c²+d-b)/(2c-a) if a≠2c
[22:24:04] <pjb> selwyn: what quadratic???
[22:24:35] <selwyn> pjb: lol nice
[22:24:46] <selwyn> very cute
[22:25:58] <copec> My own language wouldn't really be a language, more like a full LLVM type stack that is lisp oriented called AVA or Λ∀Λ a lambda for all the lambda
[22:26:37] <copec> ^Get on that hayley
[22:27:05] <selwyn> copec: i suspect that the temptation is to make something new rather than be boring and contribute to existing efforts
[22:30:12] <lisp123> selwyn: Yes, I think that's a strong motivator
[22:31:21] <selwyn> which is fine
[22:31:28] <selwyn> but regrettable when applied to proglangs
[22:31:52] <copec> I think it is true that it is (far) less work to understand the solution to most problems as encoded than to create it again yourself. At least for average folk like myself
[22:32:37] <copec> And not necessarily because of NIH
[22:35:08] <copec> It was because of the intelligence of much lisp programming as I taught myself CS, that made me stop and go "It's worth it to understand how this solves the problem," because it struck as being far beyond what I would think of
[22:35:43] <White_Flame> lisp also is the lowest friction back-end on which to implement a compiled language
[22:37:34] <Alfr> White_Flame, https://xkcd.com/669/ ?
[22:37:54] <selwyn> lol
[22:38:00] <copec> ^Is that the "there are now 14 standards" one?
[22:38:34] <copec> nope, but that's great
[22:39:09] <selwyn> unironically celebrating having a 'benevolent dictator for life' and then ending up with arbitrary decisions that ruin the language
[22:39:13] <selwyn> will always be funny to me
[22:40:00] <shka> stop making fun of python!
[22:40:01] <selwyn> turns out that leaving everything down to one person is sometimes sub-optimal! who could have guessed
[22:41:06] <Alfr> selwyn, maybe there's some limit to the amount of time a benevolent dictator can stay sane and make beneficial decisions?
[22:41:34] <selwyn> i am inclined to agree with that 
[22:43:20] <selwyn> i suppose the original dictator for life had a good run
[22:43:26] <selwyn> but caesar died young anyway
[22:43:57] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[22:44:51] <shka> hmm
[22:44:57] *** Joins: mzan (~quassel@mail.asterisell.com)
[22:45:13] <shka> before ceasar there was Sula
[22:45:44] <selwyn> ok, good point
[22:46:18] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[22:46:50] <Mondenkind> I would use a language benevolently dictated by guy steele
[22:46:50] *** Joins: hendursaga (~weechat@user/hendursaga)
[22:50:13] <shka> you can
[22:50:34] <shka> https://en.wikipedia.org/wiki/Fortress_(programming_language)
[22:51:43] <Mondenkind> Fortress is dead no?
[22:52:06] <Mondenkind> Means the dictator has abdicated :)
[22:52:35] <selwyn> the dictator is asleep in the mountain
[22:52:42] <selwyn> he will return in the time of need
[22:53:03] <lisp123> What's been curious to me, is a lot of the Common Lisp OGs have largely left the scene
[22:53:14] <shka> unless you eat the flesh of the Son of Man and drink his blood, you have no life in you
[22:53:23] <lisp123> Kent Pitman seemed to stay longer, but even he's more focused on political blogs these days
[22:53:26] <selwyn> lisp123: i have wondered about that too
[22:54:04] <lisp123> Paul Graham rather create new languages than fund Common Lisp's ecosystems :-/ Richard Gabriel does poetry (IIRC?)
[22:54:11] <selwyn> perhaps if you are a lisp og things are not as exciting and dynamic as they used to be back in the day?
[22:54:18] <lisp123> David Moon seemed to do some work in his own language
[22:54:20] <selwyn> pg doesn't like common lisp anyway
[22:54:40] <lisp123> Dan Weinreb was big, may he rest in peace (I found his blog and he did a lot there)
[22:55:07] <lisp123> selwyn: At some point he must have, given he wrote two books plus made his initial millions from CL
[22:55:25] <lisp123> (in fact he has arguably the most successful commercial lisp project to date, excluding ACL Maxima etc)
[22:55:33] <selwyn> one of his books switches to a scheme dialect 2/3 of the way through
[22:56:16] <selwyn> i read his essays/books as evangelising 'lisp' in general
[22:56:41] <lisp123> On Lisp? He does in both Scheme & CL, but that's because some of the concepts are easily explained in Scheme first. Unless you are referring to something else
[22:56:52] <selwyn> i am referring to 'on lisp'
[22:58:01] <selwyn> i agree that some of the concepts are more easily explained in terms of scheme, like e.g. continuations
[22:58:02] <lisp123> Mark Kantrowitz is mostly about student financial aid (for those who may not know, he maintained much of the CMU website on Lisp, which made a lot of resources easily available)
[22:58:13] <selwyn> but that is because he made the decision to include that material
[22:58:32] <selwyn> more to the point: if he was a common lisp fan i don't think he would have gone down that route
[22:58:57] <lisp123> Fair point, although I think his view shifted over time
[22:59:04] <selwyn> me too
[22:59:28] <lisp123> Gregor Kizales (of MOP) fame is actually active on Reddit I saw, but again, mostly doing things outside of Lisp
[23:00:12] <selwyn> it's quite possible that he got put off by the weaknesses of common lisp while doing viaweb, which is fair enough
[23:00:42] <lisp123> I don't think he's a great programmer anymore, http://www.paulgraham.com/vwfaq.html
[23:01:52] <lisp123> I think he's a great writer for sure. But as a huge supporter before, I've moved away and don't really listen to his advice these days --> They didn't even use a Lisp HTTP server, so I'm not sure what they did
[23:02:59] <selwyn> hard to believe they used clisp
[23:03:10] <selwyn> it was really performant at the time right?
[23:04:13] <lisp123> My guess (I'm really just guessing, someone more knowledge can advise) would be that CLISP was free and easier to build vs. CMUCL
[23:04:37] <lisp123> I read somewhere SBCL started initially to make CMUCL easier to build / portable
[23:05:11] <shka> yes
[23:05:15] <selwyn> sbcl doesn't need sbcl to build it
[23:05:16] <shka> that's how it was
[23:05:35] <shka> selwyn: more importantly, sbcl does not need PDP to build it :P
[23:05:58] <selwyn> right lol
[23:06:31] <copec> pg has always been about the really concise lisp
[23:06:39] <shka> and yes, at some point, to bootstrap CMUCL you actually needed PDP
[23:06:43] <shka> which was not ideal
[23:06:56] <copec> I believe he does all his own stuff in his own dialect "arc"
[23:07:13] <selwyn> he has another dialect now 'bel'
[23:07:45] <lisp123> like, I like that even with billions, he's still into lisp programming - that's pretty cool
[23:08:09] <gilberth> Well, CMUCL isn't actually too hard to build and SBCL still needs some Common Lisp to build.
[23:08:28] <shka> gilberth: sure
[23:08:32] <semz> What does PDP stand for here? Surely not PDP as in PDP-11, right?
[23:08:47] <shka> semz: well, yes PDP-11
[23:08:51] <semz> ow
[23:09:06] <shka> dunno if it was 11 to be specific
[23:09:13] <gilberth> My first CMUCL build even was a cross build from FreeBSD to Linux.
[23:09:15] <shka> but something from the PDP series
[23:09:26] <copec> I get his (pg) preferences for dialect and style, and he is an order of magnitude more trained and prolific as myself, but I find it more like a concise tool if you are the one writing, then for people in general to read
[23:09:38] <gilberth> shka: That wasn't an issue when SBCL spun off.
[23:21:16] <selwyn> shka: this is a nice radio station
[23:21:49] <selwyn> fits the balance of being nice to listen to and you can actually concentrate at the same time
[23:23:46] <shka> yeah, it is cool
[23:43:00] <White_Flame> lisp123: the industry sucks hard, it's not uncommon for people to move to other saner pastures in general
[23:43:29] <White_Flame> (for those who left computing, not just lisp)
[23:44:20] <selwyn> trying to work out how cold my house is likely to be in winter
[23:44:39] <selwyn> 15c is really really cold right? like at that point you would just turn the heating up
[23:44:51] <lisp123> White_Flame: I think so too
[23:45:25] <lisp123> selwyn: Very cold to me. 21.5 is where I find it time to turn off the A/C or put on more clothes
[23:45:47] <selwyn> hm
[23:56:41] *** Quits: rogersm (~rogersm@90.166.177.48) (Quit: Leaving...)
