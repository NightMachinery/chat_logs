[00:01:44] * GumbyPAN CPAN Upload: Graphics-Libplot-2.2.3 by ETJ https://metacpan.org/release/ETJ/Graphics-Libplot-2.2.3
[00:16:25] <Grinnz> /ServerName example.com/,/</VirtualHost>/ except i don't know how you deal with the / in there
[00:16:47] <Grinnz> perl's scalar .. flipflop was based on this
[00:17:57] <choroba> Does it work with ack?
[00:18:11] <Grinnz> oh sorry, i read that as awk
[00:18:20] <choroba> :-)
[00:18:40] <choroba> but it could make a nice feature request for ack
[00:18:42] <mst> https://twitter.com/NYinLA2121/status/1448365642256502787
[00:18:43] <Paperbot> YS (@NYinLA2121) 1d2h ago: The first rule of Passive-Aggressive Club- you know what. Nevermind.
[00:21:47] * GumbyPAN CPAN Upload: local-lib-2.000027 by HAARG https://metacpan.org/release/HAARG/local-lib-2.000027
[00:23:20] *** Joins: tdaeayusr^^ (~tdaeayusr@70.166.66.234)
[00:26:47] * GumbyPAN CPAN Upload: PDL-DSP-Fir-0.006 by ETJ https://metacpan.org/release/ETJ/PDL-DSP-Fir-0.006
[00:34:13] *** Quits: proller (~p@2a02:6b8:b081:9::1:1c) (Ping timeout: 268 seconds)
[00:41:49] * GumbyPAN CPAN Upload: DBIx-Class-Schema-ResultSetNames-1.03 by GEEKRUTH https://metacpan.org/release/GEEKRUTH/DBIx-Class-Schema-ResultSetNames-1.03
[00:45:37] *** Joins: whynot (~whynot@46.96.163.28)
[00:46:59] *** Joins: proller (~p@2002:50f0:d845:10:4a51:b7ff:fe43:6e30)
[00:57:36] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 245 seconds)
[01:01:11] *** Joins: krismatrix (~krismatri@38.80.149.51)
[01:04:35] *** Quits: Su-Shee (~Susanne@p4ffc7be0.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[01:06:08] *** Joins: Su-Shee (~Susanne@p4ffc7318.dip0.t-ipconnect.de)
[01:15:07] *** freshmaker666 is now known as greeb
[01:22:48] *** Quits: krismatrix (~krismatri@38.80.149.51) (Quit: Leaving)
[01:23:54] <ether> https://www.linkedin.com/jobs/view/software-development-engineer-at-amazon-2750122957
[01:23:55] <Paperbot> Link title(s): [ Amazon hiring Software Development Engineer in East Palo Alto, California, United States | LinkedIn ]
[01:23:57] <ether> see the description
[01:37:40] <xenu> for those who don't have a linkedin account
[01:37:42] <xenu> https://web.archive.org/web/20211014200658/https://www.amazon.jobs/en/jobs/1773420/software-development-engineer
[01:37:43] <Paperbot> Link title(s): [ Software Development Engineer - Job ID: 1773420 | Amazon.jobs ]
[01:39:31] <thowe_> whose butt are we talking about?  probably would effect my interest
[01:46:37] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Remote host closed the connection)
[01:46:56] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[01:49:59] <gloin> I always forget which Net::?SSH module is deprecated and should not be used. Is it Net::SSH or Net::OpenSSH?
[01:50:00] <jaytee80> tr/AWS/my butt/ lol
[01:50:21] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Ping timeout: 265 seconds)
[01:50:42] * gloin boggles at the idea of software development happening in EPA. Times have changed.
[01:50:49] <jaytee80> Net::SSH2 is what I use
[01:51:28] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[01:53:56] <gloin> looks like I'm limited to ssh or openssh
[01:54:09] <gloin> unless I want to fatpack or cpan2rpm, which I don't
[01:54:20] <gloin> especially since this is a really simple "can I login" test
[01:54:57] * gloin goes with openssh since no deps
[01:55:28] *** Quits: GEttR (~GEttR@user/gettr) (Remote host closed the connection)
[01:57:38] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[02:04:42] *** Joins: GEttR (~GEttR@user/gettr)
[02:08:35] <Grinnz> gloin: neither of those are deprecated but Net::OpenSSH is better. Net::SSH2 is not a ssh wrapper but links to libssh2, so useful for different things
[02:09:30] <Grinnz> i mean Net::SSH is effectively unmaintained so it's deprecated in that way
[02:10:31] <gloin> fair nough
[02:13:26] *** Quits: gast0n (~g4570n@user/gast0n) (Ping timeout: 245 seconds)
[02:19:21] *** Quits: choroba (~E_Choroba@89-101-243-80.cust.centrio.cz) (Quit: Leaving)
[02:19:56] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[02:25:36] <elcaro>  
[02:27:58] *** Quits: hudo__ (~hudo@62.68.20.210) (Ping timeout: 252 seconds)
[02:32:44] <gloin> Fun backtick puzzle: this always dies with "Died at scriptname line N" even though executing the backticked command exits 0: my $reload_iptables = `systemctl reload iptables.service` or die "$!";
[02:33:16] <gloin> it shouldn't be dying, it doesn't return any stdout or stderr
[02:33:40] *** Joins: pizdets_ (~pizdets@183.182.114.178)
[02:33:51] *** Quits: pizdets (~pizdets@183.182.111.108) (Ping timeout: 245 seconds)
[02:34:54] <gloin> (obviously I do want it to die if something goes wrong
[02:35:15] *** Joins: aquanite (~aquanight@174-126-159-166.cpe.sparklight.net)
[02:35:35] *** Quits: aquanite (~aquanight@174-126-159-166.cpe.sparklight.net) (Client Quit)
[02:35:45] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Remote host closed the connection)
[02:36:12] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[02:37:15] <Grinnz> that's not the correct error checking
[02:37:22] <aquanight> gloin: what exactly do you think `` returns then?
[02:37:42] <aquanight> because if it's not producing anything on stdout, `` will return "" ... which is false
[02:38:10] <aquanight> if you're expecting command success/failure, you want to use system() and check $?
[02:38:22] <Grinnz> you don't have to use system, but you do have to check $?
[02:38:37] *** Quits: haj (~haj@95.91.235.66) (Quit: Leaving.)
[02:38:50] <aquanight> I'd personally suggest system just for the sake of avoiding this exact trap
[02:39:16] <Grinnz> it doesn't really avoid anything, you still have to know how to check the same things, but yeah
[02:39:21] <aquanight> it actually helps that the system() operator itself returns what goes into $?
[02:39:38] <Grinnz> use IPC::System::Simple 'systemx' or 'capturex' if you don't want to have to know what to do
[02:40:05] <Grinnz> systemx 'systemctl', 'reload', 'iptables.service';
[02:40:08] <Grinnz> no error checking needed
[02:40:25] <aquanight> but for simple success/fail you could use system("systemctl ...") or die
[02:40:35] <Grinnz> no you can't
[02:40:38] <aquanight> there's even use autodie if you're into that
[02:40:50] <Grinnz> remember it returns -1 on exec failure
[02:41:07] <aquanight> system("systemctl ...") and die actually would be more correct
[02:41:41] <Grinnz> if ($? == -1) { die "command failed: $!\n"; } elsif ($?) { my $exit = $? >> 8; die "command exited with nonzero status $exit\n"; }
[02:42:01] <leont> autodie doesn't affect system by default, though it can use IPC::System::Simple if you ask it to
[02:42:02] <Grinnz> this is the correct way to error check core system or readpipe (backticks)
[02:42:02] <aquanight> I think you can basically count on $?/system() == 0 on command success
[02:42:24] <aquanight> if you care about nothing but that, it's the simplest way to do it
[02:42:25] <Grinnz> aquanight: yes, but you have to report the error differently depending how it fails
[02:42:34] <aquanight> Grinnz: only if you care to do so
[02:42:45] <leont> autocroak does handle it (but it's currently still in a bit of a 0.001 state)
[02:42:47] <Grinnz> if you don't care now, you will the first time it fails
[02:42:59] <aquanight> or you could just slap $? in the error string and decipher it then
[02:43:08] <Grinnz> $? does not contain the error if exec failed
[02:44:11] <Grinnz> actually it doesn't contain the error in either case, so unless you want to bitshift things while debugging it's not very helpful raw
[02:44:16] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 245 seconds)
[02:44:37] <aquanight> about the only other reason you might want to look at the exit status is if you want to propogate SIGINT/SIGQUIT
[02:46:12] *** Joins: radu242407 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net)
[02:46:21] <aquanight> I find it weird that $?/wait puts the exit status in the upper bits and the signal number in the lower bits
[02:46:31] <aquanight> you'd think it would be the reverse
[02:46:43] *** Quits: proller (~p@2002:50f0:d845:10:4a51:b7ff:fe43:6e30) (Ping timeout: 252 seconds)
[02:47:22] <aquanight> hell why does it even need a 16-bit value
[02:47:38] <aquanight> exit values are only 7 bits, just use the same 7 for exit or signal
[02:48:00] <Grinnz> feel free to redesign POSIX at any time
[02:48:22] <aquanight> eh
[02:48:32] <aquanight> it doesn't help that linux went and did more weird stuff with it
[02:49:46] <Grinnz> personally, i prefer shifting the wait status every time i want the exit status over having to use some POSIX function to check whether it's a signal or exit status
[02:50:13] <Grinnz> also, when it exits due to signal it still has a nonzero exit status
[02:53:18] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[02:53:21] <gloin> lordy, that feeling when you ask a question, get distracted by a kid who needs homework, and return to find a debate over which approach is best
[02:54:05] <gloin> so really I could do `stuff in shell`; if ($?) { die "ermagerd"; } easily enough
[02:54:10] <gloin> correct?
[02:54:25] <Grinnz> yes, if you don't want any information about why it fails
[02:54:50] <aquanight> I still advise system() if only so your stdout is not swallowed
[02:54:53] <gloin> In this case I wouldn't - it'll be an automated script that runs periodically and if iptables fails to reload I jut want it to bark
[02:54:58] <aquanight> but I don't think systemctl complains on stdout anyway
[02:55:22] * gloin complains on stdout, stderr, and unstdeverything about systemctl and its reason for being
[02:55:43] <Grinnz> IPC::System::Simple is really the easiest way to do any of this
[02:55:58] <Grinnz> when you consider any nonzero exit a failure
[02:56:05] <Grinnz> and even when you only consider some of them
[02:56:46] <gloin> gah! I'm going to have to install two whole entire modules for this project! Can't locate IPC/System/Simple.pm in @INC 
[02:57:02] <aquanight> yeah I have to wonder that
[02:57:27] <Grinnz> up to you if it's worth the trouble to have sensible behvaior without having to think :P
[02:58:03] <gloin> it's kind of a running joke with me - how many hoops am I willing to jump through and stay with core modules? The answer is a lot.
[02:58:13] <aquanight> I mean
[02:58:21] <gloin> to wit: my $ip = inet_ntoa(inet_aton($dc))
[02:58:52] <aquanight> I've said it already. If all you need is success/fail and you don't even need to care about the output, the easy way is system("command") == 0 or die "whatever";
[02:59:13] * pragma- squints at inet_ntoa(inet_aton(x))
[02:59:15] <aquanight> if you really want, slip $? and $! in your error message if you get to the "pulling hair out trying to figure out why it doesn't work"
[02:59:17] <pragma-> seems... redundant.
[02:59:26] <Grinnz> pragma-: verifies that it's a valid IP
[02:59:32] <pragma-> Ah
[02:59:34] <aquanight> pragma-: I believe the point is it'll validate/resolve the address
[03:00:11] *** Joins: proller (~p@2a02:6b8:b081:6405::1:12)
[03:00:17] <gloin> right, and I don't want to go trying to firewall out invalid IP addresses, rather die at the resolving stage
[03:00:18] <aquanight> as *in* theory inet_aton is decoumented to provide rather super-basic DNS handling though I could've sworn it only goes as far as /etc/hosts
[03:00:27] <Grinnz> in fact the fast method Data::Validate::IP uses is just seeing if inet_pton works
[03:00:41] <Grinnz> after a sanity check
[03:01:45] * gloin points at that other noncore (probably) module and grins
[03:02:46] <aquanight> IPC::System::Simple is good if you want to be like make and report on why the command failed (not found, nonzero exit, etc)
[03:02:57] <Grinnz> aquanight: true, that's why you actually want to use inet_pton (gloin should probably switch)
[03:04:09] <aquanight> but it sounds like you're using a known command, known to exist, known to be runnable, so exec failure shouldn't happen (presumably you are $< == 0 so resource starvation shouldn't happen or else the solution is reboot -f)
[03:04:15] <Grinnz> sweval: use Socket qw(inet_aton inet_pton AF_INET); [inet_aton('google.com'), inet_pton(AF_INET, 'google.com')]
[03:04:22] <perlbot> Grinnz: [undef,undef]
[03:04:43] <Grinnz> aquanight: everything known until it isn't :P
[03:04:44] <aquanight> as for nonzero exit, systemctl's pretty good about squawking on stderr and into journal when it fails, so you have that option
[03:05:00] <aquanight> Grinnz: if that fouls up, he's got bigger problems than debugging a script
[03:05:04] <gloin> yeah
[03:05:07] <aquanight> like the fact that either systemd straight up disappeared
[03:05:12] <gloin> if iptables isn't reloading things are screwed pretty hard
[03:05:19] <aquanight> or the system is so hosed that, again, the answer is reboot -f
[03:05:20] <Grinnz> bigger problems that would be easier to solve by knowing what $! is
[03:05:36] <aquanight> regardless of what $! is
[03:05:41] <gloin> We'll get a bunch of crap from the syslog server in the event.
[03:05:54] <Grinnz> gloin: we're talking about when the systemctl command doesn't even work
[03:05:58] <Grinnz> i.e. $? is -1
[03:06:03] <gloin> oof
[03:06:35] <aquanight> like I said, that means either systemd straight up disappeared in which case have fun reinstalling your OS
[03:06:38] <gloin> That would trigger several other alerts - as aquanight says we'll have much bigger problems and be chasing them.
[03:06:44] <aquanight> or you're so resource hosed you can't execute anything
[03:06:45] <Grinnz> shrug
[03:06:49] <gloin> yeah
[03:06:49] *** Joins: pucara (~i@host15.181-14-156.telecom.net.ar)
[03:06:54] <Grinnz> don't complain to me when you wish you knew what $! was :P
[03:06:58] <gloin> I won't :D
[03:07:02] <gloin> duly warned etc
[03:07:19] <aquanight> I'm looking at the errno list of execve. The ones that could theoretically occur spontaneously are a very small set.
[03:07:43] <gloin> all this thing is doing is firewalling itself off from the domain controllers and trying to login against the sssd cache to prove it's working (then reloading iptables to clear those rules
[03:07:45] <gloin> )
[03:07:49] <aquanight> EACCES -> you're root or something fucked with /sbin permissions. You'd learn that from perl itself failing to run
[03:07:57] <gloin> lol
[03:08:09] <aquanight> EFAULT -> memory's fucked. reboot
[03:08:23] <Grinnz> why would perl fail to run if you're not root?
[03:08:24] * gloin once believed incorrectly that he was still in the chroot and did "rm -rf /usr" - things were learned
[03:08:25] <aquanight> EIO -> your disk is fucked. Good luck with the reinstall.
[03:08:36] <aquanight> Grinnz: /(s)bin getting -x'd
[03:08:49] <aquanight> or / getting mounted noexec
[03:08:53] <Grinnz> that's hardly the only reason you'd get EACCES
[03:08:55] <ether> https://twitter.com/danluu/status/1448761401636372491
[03:08:55] <Paperbot> Dan Luu (@danluu) 2h15m ago: Accidental uses of the "cloud to butt" chrome extension and similar:  https://web.archive.org/web/20211014210934/https://www.linkedin.com/jobs/view/software-development-engineer-at-amazon-2750122957  https://web.archive.org/web/20180308000043/https://www.nytimes.com/2018/03/06/us/politics/07dc-tradefacts.html  https://web.archive.org/web/20211014200658/https://www.amazon.jobs/en/jobs/1773420/software-developm...
[03:09:32] <gloin> ahahaha
[03:09:55] <Jonno_FTW> is there a way to get more detailed error messages out of template toolkit? I get this very helpful message: [ERROR] Catalyst.View.TT Couldn't render template "default.tt: plugin error - DateTime plugin failed: ""
[03:10:19] <Grinnz> btw, perlbot only returned [undef, undef] because it doesn't have dns resolving permissions
[03:10:39] <Grinnz> a local machine confirmed that inet_aton will resolve 'google.com' but inet_pton won't
[03:11:11] <gloin> again, if I can't resolve on this host I've got bigger problems and will be seeing alerts
[03:11:18] <gloin> ether: https://findwords.info/term/medireview
[03:11:18] <Paperbot> Link title(s): [ What does medireview mean - Definition of medireview - Word finder ]
[03:11:20] <Grinnz> that's not the point
[03:11:37] <Grinnz> if you're using inet_aton to validate IP addresses, you're going to have a surprise when it works for things which are not IP addresses
[03:12:34] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Ping timeout: 252 seconds)
[03:12:35] <Grinnz> inet_pton is just as easily available, and you just have to pass Socket::AF_INET as the first argument to get the same behavior for IP addresses
[03:12:47] <gloin> trying to imagine the case where it would occur though
[03:13:02] <gloin> ether: reason: http://news.bbc.co.uk/2/hi/science/nature/2138014.stm special case of the Scunthorpe Problem
[03:13:03] <Paperbot> Link title(s): [ BBC NEWS | Science/Nature | Yahoo admits mangling e-mail <http://news.bbc.co.uk/1/hi/sci/tech/2138014.stm> ]
[03:13:03] <Grinnz> why imagine, when you can just not have to care
[03:13:12] <gloin> Grinnz: point
[03:13:24] <gloin> it's just run aground against my curiosity
[03:13:54] <Grinnz> (inet_pton also is trivially usable for ipv6 by passing Socket::AF_INET6 instead, as well)
[03:15:30] *** Joins: gast0n (~g4570n@user/gast0n)
[03:16:22] <gloin> lol
[03:16:28] <gloin> unless you're on a really ancient box
[03:16:30] <gloin> "inet_pton," is not exported by the Socket module
[03:16:55] <v`> https://mspoweruser.com/microsoft-updates-a-large-number-of-sysinternals-tools-and-introduce-desktops/
[03:16:55] <Paperbot> Link title(s): [ Microsoft updates a large number of Sysinternals tools and introduce Desktops - MSPoweruser ]
[03:16:59] <gloin> # perl -mSocket -le 'print $Socket::VERSION'; 2.010
[03:17:02] <Grinnz> oh god, what version of perl are you on
[03:17:19] <gloin> 5.16.3 
[03:17:29] <Grinnz> wow, surprised that one doesn't have it
[03:17:32] <gloin> which is Centos 7 as current as it gets
[03:17:53] <Grinnz> anyway you do have the option of installing a newer Socket from cpan
[03:18:01] *** Quits: Pali (~pali@user/pali) (Ping timeout: 245 seconds)
[03:18:25] <gloin> or just deciding aton good enough and if I start seeing failures I'll consider adding that tech debt to these hosts
[03:19:28] <gloin> actually if I start seeing failures in this case I'm going to have an interesting conversation with the guy who runs the domain controllers
[03:19:39] <gloin> "What did you do??!"
[03:20:09] <Grinnz> maybe he was just testing your validation :D
[03:20:23] <gloin> lol
[03:20:36] <gloin> he'd be testing the patience of a lot of people hahaha
[03:23:53] *** Quits: Smedles (~quassel@61-245-148-167.3df594.adl.nbn.aussiebb.net) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[03:24:15] *** Joins: Smedles (~quassel@2403-5800-5100-f00-aaa1-59ff-fe53-1a69.ip6.aussiebb.net)
[03:25:23] *** Joins: TonyStone (TonyStone@gateway/vpn/airvpn/tonystone)
[03:30:53] *** Quits: gast0n (~g4570n@user/gast0n) (Ping timeout: 265 seconds)
[03:31:32] <Jonno_FTW> for some reason templatetoolkit datetime plugin fails on parsing "2021-10-10" in %y-%m-%d format
[03:33:53] *** Quits: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net) (Quit: Konversation terminated!)
[03:37:31] <Grinnz> you probably wanted %Y-%m-%d
[03:37:51] <Jonno_FTW> Grinnz: date string comes in like this 2021-10-11T00:00:00
[03:37:57] <Jonno_FTW> I will try that
[03:38:31] <Grinnz> i don't know what that plugin does, but %Y is the 4 digit year strftime formatter
[03:39:45] <Grinnz> also, strptimes may vary on whether they consider an incomplete parse an error
[03:39:46] *** Quits: whynot (~whynot@46.96.163.28) (Quit: leaving)
[03:41:15] <Grinnz> curious, what's giving you an ISO8601 format but without the Z?
[03:42:02] <Jonno_FTW> no idea
[03:42:19] <Grinnz> you don't know where your strings come from? lol
[03:42:36] <Jonno_FTW> I'm merely maintaining this thing
[03:43:34] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) ()
[03:45:01] *** Quits: R2robot (~R2robot@user/r2robot) (Quit: Pull the lever, Kronk.  Wrong leverrrrrrr!)
[03:48:32] *** Joins: R2robot (~R2robot@user/r2robot)
[03:51:30] <The_Blode> Good morning all. What ungodly hour is this?
[03:51:36] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[03:51:40] <The_Blode> I was dreaming you Perlites.
[03:52:21] <The_Blode> I had a dilemma recently...regarding a guy has been using Perl for 20 years and I've beenusing it for 4 years and he was trying to school me in a non productive way on Perl.
[03:54:56] <Jonno_FTW> Grinnz: so turns out the bad date was "1"
[03:55:03] <Grinnz> lol
[03:56:13] <The_Blode> Also, kudos to the guys who told me about File::Copy worked a treat for me.
[03:58:43] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 252 seconds)
[04:01:32] *** Joins: gast0n (~g4570n@user/gast0n)
[04:10:16] <xenu> perlbot: utf8  ﷽
[04:10:17] <perlbot> xenu: U+FDFD (ef b7 bd): ARABIC LIGATURE BISMILLAH AR-RAHMAN AR-RAHEEM [﷽] 
[04:11:02] *** Joins: semeion (~semeion@user/semeion)
[04:11:38] <Grinnz> https://twitter.com/GovParsonMO/status/1448697768311132160 wherein a governor discovers that HTML is publicly accessible and... digs the hole deeper
[04:11:38] <Paperbot> Governor Mike Parson (@GovParsonMO) 7h31m ago: Through a multi-step process, an individual took the records of at least three educators, decoded the HTML source code, and viewed the SSN of those specific educators.  We notified the Cole County prosecutor and the Highway Patrol’s Digital Forensic Unit will investigate.
[04:13:26] <Jonno_FTW> viewing data sent to all users = hacking
[04:14:35] <zgu> eval: join(':', (localtime)[2,1,0])
[04:14:37] <perlbot> zgu: 9:44:36
[04:14:47] <zgu> The_Blode: ^ the ungodly hour :)
[04:15:06] <zgu> ah i guess that needs sprintf with leading zeros to actually work right :/
[04:15:13] *** Quits: TonyStone (TonyStone@gateway/vpn/airvpn/tonystone) (Ping timeout: 252 seconds)
[04:15:24] <Grinnz> zgu: just use strftime
[04:15:43] <Grinnz> sweval: Time::Moment->now->strftime('%H:%M:%S')
[04:15:44] <perlbot> Grinnz: ERROR: Can't locate object method "now" via package "Time::Moment" (perhaps you forgot to load "Time::Moment"?) at (IRC) line 1. 
[04:15:51] <Grinnz> sweval: use Time::Moment; Time::Moment->now->strftime('%H:%M:%S')
[04:15:52] <perlbot> Grinnz: 09:45:51
[04:16:06] <Grinnz> sweval: use Time::Piece; localtime->strftime('%H:%M:%S')
[04:16:08] <perlbot> Grinnz: 09:46:07
[04:16:09] *** Joins: tybalt89 (~rick@2600:8800:8d00:8100:2e0:4cff:fe68:617)
[04:16:12] <zgu> wasn't sure which time modules he had
[04:16:18] <daemon> BinGOs, mst, Grinnz: I tried to highlight an issue to dngor a day ago, I think he is not very active on IRC anymore do any of you have an alternative communication method to him?
[04:16:21] <Grinnz> Time::Piece is core, and Time::Moment is very good
[04:16:49] <Grinnz> but i don't think any question was about the time of day
[04:17:07] <daemon> or alternatively access to poe.perl.org's source
[04:17:16] <Grinnz> daemon: no to either
[04:17:40] <daemon> ok dokey
[04:20:12] <zgu> i still have a bunch of DateTime-based crap somewhere with gobs of timezone/duration calculations
[04:20:40] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 265 seconds)
[04:21:00] *** Joins: voidnoir0_ (uid343973@id-343973.tinside.irccloud.com)
[04:22:24] <Grinnz> DateTime is slow but useful for any non-system-timezone based calculation or if you really need to include leap seconds
[04:28:24] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[04:31:08] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[04:31:20] *** Joins: trillp (~trillp@69.233.98.238)
[04:33:47] *** Joins: semeion (~semeion@user/semeion)
[04:50:20] *** Quits: pucara (~i@host15.181-14-156.telecom.net.ar) (Quit: Lost terminal)
[04:57:01] *** Quits: Su-Shee (~Susanne@p4ffc7318.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[04:58:56] *** Joins: Su-Shee (~Susanne@p508944d2.dip0.t-ipconnect.de)
[05:06:24] <daemon> hmm weird I have an application bailing out due to an unresolved call to inet_ntoa, though I am doing 'use Socket'
[05:06:31] <daemon> something I missed
[05:06:59] <daemon> ah I did not hit save
[05:08:04] *** Joins: _73 (~user@pool-96-233-64-53.bstnma.fios.verizon.net)
[05:10:13] *** Quits: trillp (~trillp@69.233.98.238) (Ping timeout: 252 seconds)
[05:17:14] *** Joins: trillp (~trillp@69.233.98.238)
[05:45:39] *** Quits: trillp (~trillp@69.233.98.238) (Quit: nyaa~)
[05:49:36] <simcop2387> alright, new fun tls certs are being issued!
[05:53:13] <simcop2387> daemon: can you check if https://perl.bot/ https://l.perl.bot/ and https://perlbot.pl/ all work for you?
[05:53:14] <Paperbot> Link title(s): [ Perlbot Pastebin ] [ Perlbot Pastebin ] [ Perlbot Pastebin ]
[05:53:25] <simcop2387> or Grinnz or zgu
[05:54:06] <simcop2387> i'll get the rest of my domains setup later but that looks good for the problem ones
[05:57:29] <aquanight> simcop2387: looks clear here
[05:58:55] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[06:02:35] <simcop2387> aquanight: cool.  i'm now using acme.sh for getting the certs, along with dns verification.  a few more domains to do still but the end result will be that i need fewer certs and can also setup certs for internal local services too
[06:04:03] <simcop2387> it's run by a raspberry pi that can throw the certs around over ssh :)
[06:08:19] <aquanight> ah but how do you verify the ssh
[06:08:42] <aquanight> I always found it odd that for all this TLS cert nonsense we do, SSH is just host keys
[06:12:32] <simcop2387> in this case i've got a user that only has access to the certs, and uses an ed25519 key to do the push
[06:12:52] <aquanight> hmm
[06:12:57] <simcop2387> aquanight: you can actually do CA stuff for ssh keys (client and server).  it's just not commonly done
[06:13:07] <aquanight> and that's *weird*
[06:13:12] <simcop2387> https://www.lorier.net/docs/ssh-ca.html
[06:13:13] <Paperbot> Link title(s): [ Using a CA with SSH ]
[06:13:57] <simcop2387> it's really useful for managing fleets of things actually, you can combine with ldap users for auth and setting up users that can log in to machines that way without passwords ever being a thing on systems
[06:14:13] <simcop2387> or some other user service like radius/kerberos/whatever
[06:14:24] <aquanight> someday maybe we can get rid of passwords
[06:14:28] <aquanight> I don't think it'll ever happen though
[06:14:42] <simcop2387> i just hope we stop this fingerprint bullshit
[06:15:16] <aquanight> I'd settle for people finally understanding https://xkcd.com/936
[06:15:17] <Paperbot> Link title(s): [ xkcd: Password Strength ]
[06:15:38] <aquanight> hmm
[06:15:47] <aquanight> what's wrong with fingerprints, out of curiosity?
[06:16:38] <simcop2387> a few things 1) you can't change them, so you have 10 to use at most 2) they're incredibly easy to copy and fool sensors 3) you can (in the US) be legally compelled to provide your fingerprint to unlock things
[06:16:51] <simcop2387> they're at best similar to a username, not a password
[06:17:29] <aquanight> depending on the sensor you might have 20
[06:18:05] <simcop2387> aquanight: 22.  gotta count the extra toes too
[06:18:30] <aquanight> and I'm sure we can get creative with other parts of the body, if it has the right structure
[06:18:34] <MikeGeorge[m]> Also you leave your fingerprints behind on everything you touch, which is generally a bad thing for passwords.
[06:18:47] <aquanight> MikeGeorge[m]: see #2
[06:19:15] <MikeGeorge[m]> Right, not just to copy, but to obtain in the first place.
[06:19:27] <aquanight> I remember watching mythbusters break a fingerprint sensor with a just putting an ink printout of the finger print on paper
[06:19:39] <aquanight> well I mean
[06:19:43] <aquanight> you have to obtain it to copy it
[06:19:43] <simcop2387> they've gotten a little better since then but not much really
[06:20:07] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 252 seconds)
[06:20:29] <aquanight> as for #3... that's probably something that needs to be fixed.
[06:20:34] <MikeGeorge[m]> Right, my point being that not only is the copying an easy technical feat once you have one, but also the obtaining part is distressingly easy.
[06:21:14] <simcop2387> aquanight: still going nuts through the courts between states and federal circuits.  likely it'll end up at the supreme court level or a federal law eventually.  i don't expect it to go in favor of the citizens though
[06:21:29] <aquanight> I mean... I don't think there's anything *unique* about fingerprints that enable that, but more a society being "lax" about enforcing the 5th amendment
[06:22:06] <aquanight> on the other hand, there's the argument they could punch you out and start guessing fingers
[06:22:10] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:22:20] <aquanight> so they don't necessarily need you to willingly cooperate to unlock the phone :)
[06:22:34] <simcop2387> aquanight: there's been some arguments about it violating the 4th too but it's all still being argued around
[06:22:48] <MikeGeorge[m]> OT, are there any "gotchas" to look out for when testing a list assignment, a la `if (my ($foo) = /^(.*) onna stick/)`?
[06:23:07] <simcop2387> that's not off-topic
[06:23:14] <aquanight> simcop2387: yeah... honestly I'm not going to dive too deep into the politics. I'll stick to the technical aspects for now...
[06:23:25] <MikeGeorge[m]> Ah, I meant on topic.
[06:23:30] <MikeGeorge[m]> Same initials.
[06:23:37] <aquanight> MikeGeorge[m]: that looks reasonable to me
[06:24:10] <aquanight> MikeGeorge[m]: I think you would only need to worry in situations where the capturing group is "optional"
[06:24:13] <simcop2387> MikeGeorge[m]: can't think of any issues you'd hit with that, at least since it's anchored.  otherwise you might get only the first result when you're expecting more.  and i can't remember if you need/want /g on it
[06:24:15] <MikeGeorge[m]> Since it's a list, I don't need to worry if $foo itself evaluates as false or anything like that, right?
[06:24:46] <aquanight> MikeGeorge[m]: the value of $foo does not effect the "result" of list assignment
[06:25:01] <aquanight> sweval: scalar(my ($x) = (1..5))
[06:25:03] <perlbot> aquanight: 5
[06:25:08] *** Quits: furrymcgee (~devuan@cgn-89-1-209-32.nc.de) (Ping timeout: 246 seconds)
[06:25:18] <MikeGeorge[m]> Okay, cool.
[06:25:21] <simcop2387> eval: $f = "0 onna stick"; ($foo) = $f=~/^(.*) onna stick/ ? "true" : "false"
[06:25:23] <perlbot> simcop2387: 1
[06:25:23] <aquanight> the "value" of a list assignment is the count of right-hand values, no matter how many variables they end up in
[06:25:29] <simcop2387> bah screw you
[06:25:35] <simcop2387> eval: $f = "0 onna stick"; (($foo) = $f=~/^(.*) onna stick/) ? "true" : "false"
[06:25:36] <perlbot> simcop2387: true
[06:26:01] <simcop2387> oh fuck it's 11pm? no wonder i'm tired
[06:26:10] <aquanight> in the case of the regex, that means it'll be 1 if the regex succeeded (since the capture group cannot fail in a successful match) or 0 if it did not
[06:26:25] * GumbyPAN CPAN Upload: Text-ANSI-Fold-2.12 by UTASHIRO https://metacpan.org/release/UTASHIRO/Text-ANSI-Fold-2.12
[06:26:29] <aquanight> MikeGeorge[m]: as previously said, you would only need to worry if you entered a situation where the capture group is skippable
[06:26:36] <aquanight> though I think even then it captures 'undef'
[06:27:47] <aquanight> sweval: scalar(my ($foo) = " onna stick" =~ /^(.+)? onna stick/)
[06:27:49] <perlbot> aquanight: 1
[06:27:54] <aquanight> hmm
[06:27:55] <aquanight> so it does
[06:28:12] <MikeGeorge[m]> Cool, I thought it was safe to test on a regex capture, but wanted to double check.
[06:28:27] <aquanight> yeah it's fine
[06:28:36] <aquanight> it better be fine because I'm pretty sure that's a common pattern
[06:29:25] <aquanight> fun fact: mixing capture extraction with m//g iteration is a trickier subject
[06:29:28] <MikeGeorge[m]> I thought it was, but after staring at a few of them I was doing, I wanted to double check.
[06:29:40] *** Quits: voidnoir0_ (uid343973@id-343973.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[06:29:41] <aquanight> my ($foo) = /^(.*) onna stick/g won't do what you think it does :)
[06:29:47] <MikeGeorge[m]> Some common patterns end up being terrible choices.
[06:29:51] <aquanight> or maybe it will, depending on what you think it does
[06:30:48] <aquanight> heh. Some of the older patterns when people still used perl as a superbash
[06:30:59] <aquanight> to be fair, some people still do
[06:31:06] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.3)
[06:31:13] <MikeGeorge[m]> I still kinda do.
[06:31:21] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 245 seconds)
[06:31:22] <MikeGeorge[m]> :/
[06:31:24] <aquanight> I think my most recent perling did precisely that
[06:31:30] <aquanight> sorta
[06:32:05] <aquanight> I also went down the deep end that is the awfulness that is the Win32 DeviceIoControl and trying to use it in perl in a halfway-sane manner
[06:32:36] <aquanight> but if I had to take that dive, I'd rather do it in perl than in powershell.
[06:33:38] <aquanight> and by "powershell" I mean "actually basically C# so why are we even bothering with a script langauge at this point"
[06:46:28] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 252 seconds)
[06:53:01] *** Quits: Martchus_ (~martchus@2a01:c23:c0b4:2700:d250:99ff:fe49:3cce) (Ping timeout: 245 seconds)
[06:53:19] *** Joins: Martchus (~martchus@dynamic-077-004-139-056.77.4.pool.telefonica.de)
[07:11:26] *** Quits: proller (~p@2a02:6b8:b081:6405::1:12) (Ping timeout: 265 seconds)
[07:12:54] *** Quits: tybalt89 (~rick@2600:8800:8d00:8100:2e0:4cff:fe68:617) (Quit: Leaving)
[07:15:31] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 245 seconds)
[07:22:55] *** Quits: humky (~humky@user/humky) (Remote host closed the connection)
[07:23:14] *** Joins: humky (~humky@user/humky)
[07:23:23] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[07:31:25] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! 👋)
[07:59:37] *** Quits: splatt990 (4b25e29db1@198.108.77.17) (Ping timeout: 265 seconds)
[08:24:50] *** Joins: hudo__ (~hudo@62.68.20.210)
[08:25:45] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 268 seconds)
[08:29:50] *** Joins: mattil (~mattil@airio.portalify.com)
[08:36:10] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:38:33] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Hasta la vista.)
[08:41:40] *** Quits: mattil (~mattil@airio.portalify.com) (Ping timeout: 265 seconds)
[08:44:10] *** Quits: hudo__ (~hudo@62.68.20.210) (Ping timeout: 252 seconds)
[08:45:35] *** Joins: furrymcgee (~devuan@cgn-89-1-209-32.nc.de)
[09:10:08] *** Joins: jplesnik (~jplesnik@83.240.62.176)
[09:17:36] *** Quits: willthechill (~willthech@2600:1700:8c61:3ed0:8c74:4865:a7b9:cabe) (Ping timeout: 245 seconds)
[09:21:51] *** Joins: akaWolf (~akaWolf@akawolf.org)
[09:22:56] *** Joins: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de)
[09:23:39] *** Joins: mattil (~mattil@airio.portalify.com)
[09:36:56] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 246 seconds)
[09:49:57] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[09:55:10] *** Quits: mattil (~mattil@airio.portalify.com) (Ping timeout: 252 seconds)
[09:55:37] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 265 seconds)
[09:57:00] *** Joins: andrzejku_ (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[10:02:00] *** Joins: gloin_ (~gloin@user/gloin)
[10:02:02] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[10:02:41] *** Joins: nuclightq_ (~quasselxp@broadband-77-37-180-193.ip.moscow.rt.ru)
[10:02:50] *** Quits: ranguard__ (sid496095@lymington.irccloud.com) (Ping timeout: 245 seconds)
[10:02:57] *** Joins: ranguard__ (sid496095@id-496095.lymington.irccloud.com)
[10:03:16] *** Joins: justHaunt1 (~justache@user/justache)
[10:03:47] *** Joins: a3r0__ (~aero@61.100.184.210)
[10:04:54] *** Quits: a3r0_ (~aero@61.100.184.210) (Ping timeout: 245 seconds)
[10:04:54] *** Quits: ndorf (~nd@ob.noxio.us) (Ping timeout: 245 seconds)
[10:04:54] *** Quits: nuclightq (~quasselxp@broadband-77-37-180-193.ip.moscow.rt.ru) (Ping timeout: 245 seconds)
[10:04:54] *** Quits: kolcon (~kolcon@v.kolouch.org) (Ping timeout: 245 seconds)
[10:04:54] *** Quits: gloin (~gloin@user/gloin) (Ping timeout: 245 seconds)
[10:04:54] *** Quits: justHaunt (~justache@user/justache) (Ping timeout: 245 seconds)
[10:04:56] *** justHaunt1 is now known as justHaunt
[10:05:17] *** Joins: kolcon (~kolcon@v.kolouch.org)
[10:05:26] *** Joins: ndorf (~nd@ob.noxio.us)
[10:15:57] *** Joins: akaWolf (~akaWolf@akawolf.org)
[10:16:49] *** Joins: mattil (~mattil@airio.portalify.com)
[10:24:46] *** Quits: mattil (~mattil@airio.portalify.com) (Ping timeout: 268 seconds)
[10:29:10] *** Joins: tobybl (~tobybl@38.247.200.146.dyn.plus.net)
[10:41:53] * GumbyPAN CPAN Upload: Authen-Credential-1.2 by LCONS https://metacpan.org/release/LCONS/Authen-Credential-1.2
[10:41:53] * GumbyPAN CPAN Upload: Config-Generator-1.1 by LCONS https://metacpan.org/release/LCONS/Config-Generator-1.1
[10:41:56] * GumbyPAN CPAN Upload: Config-Validator-1.4 by LCONS https://metacpan.org/release/LCONS/Config-Validator-1.4
[10:42:02] * GumbyPAN CPAN Upload: No-Worries-1.7 by LCONS https://metacpan.org/release/LCONS/No-Worries-1.7
[10:44:03] *** Joins: mattil (~mattil@airio.portalify.com)
[10:51:54] * GumbyPAN CPAN Upload: Device-RAID-Poller-0.2.0 by VVELOX https://metacpan.org/release/VVELOX/Device-RAID-Poller-0.2.0
[10:55:08] *** Quits: andrzejku_ (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[10:58:49] <quesker> I know you can't expect any order from keys hash but did something change in the last few years to make that more true?  like did things mostly stay in a certain order until some change?
[11:03:12] <Grinnz> no, but before 5.18 it was less random
[11:04:30] <quesker> ok.  can I use sort with each somehow or do I just need to change this to use keys
[11:05:42] <quesker> definitely feels more random in later perls but I am not sure why exactly.  could just be in my head
[11:11:58] *** Joins: choroba (~E.Choroba@89-101-243-80.cust.centrio.cz)
[11:18:26] *** Quits: Smedles (~quassel@2403-5800-5100-f00-aaa1-59ff-fe53-1a69.ip6.aussiebb.net) (Ping timeout: 245 seconds)
[11:18:26] *** Joins: Smedles_ (~quassel@2403:580d:7:0:aaa1:59ff:fe53:1a69)
[11:19:44] *** Joins: andrzejku_ (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[11:23:34] <quesker> I put sort in front of every keys and changed all the each to keys.  we will see how it goes
[11:25:53] *** Joins: silug (~silug@068-188-018-154.biz.spectrum.com)
[11:25:55] *** Quits: silug1 (~silug@068-188-018-154.biz.spectrum.com) (Ping timeout: 252 seconds)
[11:26:47] <quesker> oh ok    use JSON     that is still random order
[11:27:31] *** Quits: tdaeayusr^^ (~tdaeayusr@70.166.66.234) (Ping timeout: 252 seconds)
[11:28:25] <quesker> maybe this canonical thing will sort it
[11:35:26] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[11:36:28] <pj> if you're looking for sorted keys in your JSON encoding then yes, canonical is the way to go.
[11:36:53] <pj> but if you just want to loop through sorted keys, then you just do: sort keys %hashname
[11:37:42] <quesker> yes and yes.  now trying to figure out how to use canonical since I used to_json and not the oo way
[11:38:33] <pj> Grinnz: don't you mean before 5.8.1?
[11:38:51] <pj> ahhhh, I think you have to use it the OO way.
[11:40:23] <quesker> I converted it to this and it seems to work, I think    my $encoder = JSON->new; $encoder->canonical(); my $json = $encoder->encode($jsonref);
[11:44:11] <quesker> this is nice.  no more thousands of git changes every time I build
[11:54:50] <Richlv> Trying to use https://metacpan.org/pod/Selenium::Chrome, fails with "unknown error: DevToolsActivePort file doesn't exist".
[11:54:53] <Paperbot> Link title(s): [ Selenium::Chrome - Use ChromeDriver without a Selenium server - metacpan.org ]
[11:54:53] <Richlv> Adding '--verbose' in "custom_args" and enabling logging revealed the error - "Unable to open X display". Apparently, chromedriver does not pass '--headless' to chrome. How could that be done from Selenium::Chrome?
[11:57:38] <pj> quesker: yeah, you can shorten that to: my $encoder = JSON->new()->canonical(); if you want.
[11:59:26] *** Smedles_ is now known as Smedles
[11:59:38] <pj> speaking of JSON, how can I doecode a JS object that uses barewords for the keys?  I thought JSON had an option to allow that but I can't find it now.
[12:05:59] <choroba> I've never seen that in a JSON
[12:07:16] <pj> choroba: it's technically not valid JSON, but it's valid as a javascript object representation which is close to json.
[12:08:04] <pj> in other words, you can do: var myObj = {foo: "bar"} in javascript, but in JSON it must be represented as: {"foo": "bar"}
[12:08:39] <pj> In this particular case I need to be able to decode the javascript object which has bareword keys.
[12:35:30] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[12:35:43] <choroba> smells like you need a parser
[12:36:17] <Altreus> pj: you might be able to get away with a naive replacement of bareword: with "bareword":
[12:36:33] <Altreus> kind of surprised JSON::XS doesn't have a JS mode
[12:38:17] <Altreus> maybe you can get Node to read it in and dump it as JSON
[12:38:28] *** Quits: mattil (~mattil@airio.portalify.com) (Ping timeout: 252 seconds)
[12:41:37] *** Joins: Pali (~pali@user/pali)
[12:43:51] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Ping timeout: 245 seconds)
[12:43:55] <huf> JSON::MaybeXS documents something for this
[12:44:06] <huf> allow_barekey
[12:45:06] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 245 seconds)
[12:51:47] <choroba> huf: does it? I only see it in Cpanel::JSON::XS and JSON::PP, but not in MaybeXS
[12:54:37] <huf> yeah yeah
[12:54:39] <huf> anyway
[12:54:56] *** Joins: akaWolf (~akaWolf@akawolf.org)
[12:58:33] <pj> huf: oh, that's great, I'll check it out.
[13:00:50] <pj> looks like that's actually part of Cpanel::JSON::XS
[13:01:43] <choroba> it's the best JSON module to use, anyway
[13:02:27] <haarg> i wish JSON::MaybeXS would never use JSON::XS
[13:02:34] <Altreus> aren't they all backed by the same C library?
[13:02:50] <haarg> no
[13:03:06] <Altreus> ah, that explains my confusion
[13:04:12] <Altreus> well not confusion per se, so much as active indifference to a minor issue
[13:08:05] <veesh> curious, do any of the JSON modules promise to keep keys in order?
[13:08:10] <veesh> like alphabetical order
[13:09:13] <veesh> lol, just read scrollback, good to know this is literally what we're discussing
[13:09:52] *** Quits: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com) (Ping timeout: 252 seconds)
[13:11:10] <choroba> JSON::PP also has sort_by so you can sort the keys by a custom code
[13:11:37] *** andrzejku_ is now known as andrzejku
[13:11:48] <veesh> i see that Mojo::JSON uses canonical when using Cpanel::JSON::XS, so I'm good
[13:11:50] <veesh> hurrah!
[13:12:18] <pj> hrmmmmm, not sure how to enable alow_barekey in JSON::MaybeXS (or Cpanel::JSON::XS)...
[13:12:52] <haarg> ->new->allow_barekey
[13:13:33] <pj> yeah, that works with JSON::PP but not the others from what I can tell
[13:13:42] <haarg> it works with all of them
[13:13:45] <pj> maybe I have a too old version of Cpanel::JSON::XS
[13:14:00] <haarg> that could do it
[13:14:30] <pj> yeah, I have 3.01, not sure what version it picked up allow_barekey in
[13:14:44] <pj> but it works with JSON::PP
[13:14:49] <haarg> 3.0206
[13:15:19] <pj> $ perl -Mstrict -Mwarnings -MCpanel::JSON::XS= -MData::Dumper -ne 'my $j = Cpanel::JSON::XS->new()->allow_barekey(); print Dumper $j->decode($_)' <<<'{foo: "bar"}'
[13:15:19] <pj> Can't locate object method "allow_barekey" via package "Cpanel::JSON::XS" at -e line 1, <> line 1.
[13:15:34] <pj> yeah, 3.01 is the version in EPEL 7
[13:15:42] *** Joins: mattil (~mattil@helsinki.portalify.com)
[13:15:58] <choroba> 7? time to upgrade.
[13:16:31] <pj> nah, still three years left in it.
[13:16:52] <pj> If I wait I can skip 8 and go straight to 9.
[13:16:57] <Richlv> Uh. Eventually the following worked. No clue how it could be gleaned from the docs.   extra_capabilities => { 'goog:chromeOptions' => {args => [
[13:30:16] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[13:31:02] *** Joins: csrf (~csrf@user/csrf)
[13:32:52] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[13:45:54] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[13:51:44] *** Quits: vague (~vague@irssi/staff/vague) (Read error: Connection reset by peer)
[13:55:50] *** Joins: diskin (~diskin@87.117.53.90)
[14:07:15] *** Joins: xenial-user10 (~androirc@20014C4C17E1D20071A86FDA7A344641.catv.pool.telekom.hu)
[14:10:28] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[14:17:41] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[14:18:34] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 252 seconds)
[14:24:19] *** Joins: Shells (~michelle@2407:8800:bc20:200a:8c72:d5f1:5518:3936)
[14:24:44] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[14:25:06] *** Joins: jdltouraine (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03)
[14:25:23] *** Joins: mattil (~mattil@airio.portalify.com)
[14:26:43] *** Quits: Michelle (~michelle@203.206.128.220) (Ping timeout: 268 seconds)
[14:28:52] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[14:29:15] *** Quits: _73 (~user@pool-96-233-64-53.bstnma.fios.verizon.net) (Remote host closed the connection)
[14:31:16] *** Quits: xenial-user10 (~androirc@20014C4C17E1D20071A86FDA7A344641.catv.pool.telekom.hu) (Ping timeout: 265 seconds)
[14:37:51] *** Joins: diskin_ (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com)
[14:37:51] *** Quits: diskin (~diskin@87.117.53.90) (Killed (platinum.libera.chat (Nickname regained by services)))
[14:37:51] *** diskin_ is now known as diskin
[14:40:54] *** Quits: jdltouraine (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03) (Ping timeout: 268 seconds)
[14:49:17] *** Quits: diskin (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com) (Ping timeout: 264 seconds)
[14:53:57] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[15:08:45] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Ping timeout: 276 seconds)
[15:24:57] *** Joins: semeion (~semeion@user/semeion)
[15:31:25] * GumbyPAN CPAN Upload: Prima-Image-Magick-0.08 by KARASIK https://metacpan.org/release/KARASIK/Prima-Image-Magick-0.08
[15:37:15] *** Quits: rorx (~rorx@cpe-65-24-160-111.columbus.res.rr.com) (Ping timeout: 260 seconds)
[15:51:53] *** Quits: buu (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net) (Ping timeout: 250 seconds)
[15:56:33] *** Joins: buu (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net)
[15:57:30] *** Joins: proller (~p@2a02:6b8:0:40c:2b01:d04c:21ab:2a14)
[16:01:37] *** Joins: rorx (~rorx@cpe-65-24-160-111.columbus.res.rr.com)
[16:02:57] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 265 seconds)
[16:06:36] *** Quits: proller (~p@2a02:6b8:0:40c:2b01:d04c:21ab:2a14) (Remote host closed the connection)
[16:09:02] *** Joins: proller (~p@2a02:6b8:0:40c:137:95c4:2be5:5dd)
[16:15:53] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:18:41] *** Joins: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt)
[16:28:45] *** Quits: jplesnik (~jplesnik@83.240.62.176) (Quit: Leaving)
[16:29:04] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[16:30:05] *** Quits: mattil (~mattil@airio.portalify.com) (Remote host closed the connection)
[16:41:03] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Ping timeout: 276 seconds)
[16:41:25] *** Shells is now known as Michelle
[16:42:59] *** Joins: mnemonic (~semeion@user/semeion)
[16:44:22] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 252 seconds)
[16:46:26] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[16:54:21] *** Joins: jabberwok (~wlindley@75.105.20.104)
[17:02:09] *** Joins: pucara (~i@181.90.255.235)
[17:02:23] <simcop2387> there we go, all my ssl certs are worked.
[17:03:22] <genio> \o/
[17:04:43] <simcop2387> dns verification instead of otherwise
[17:09:43] <genio> yea, that's a pain. I have to do that with a few things we use. It's a pain to go and edit text records every 90-ish days
[17:10:41] *** Joins: diskin (~diskin@46.61.89.85)
[17:10:46] *** Quits: Smedles (~quassel@2403:580d:7:0:aaa1:59ff:fe53:1a69) (Ping timeout: 252 seconds)
[17:11:06] *** Joins: Smedles (~quassel@61-245-148-167.3df594.adl.nbn.aussiebb.net)
[17:11:36] * GumbyPAN CPAN Upload: PPIx-Regexp-0.080_01 by WYANT https://metacpan.org/release/WYANT/PPIx-Regexp-0.080_01
[17:11:36] * GumbyPAN CPAN Upload: PPIx-QuoteLike-0.017_01 by WYANT https://metacpan.org/release/WYANT/PPIx-QuoteLike-0.017_01
[17:15:41] *** Joins: diskin_ (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com)
[17:15:41] *** Quits: diskin (~diskin@46.61.89.85) (Killed (calcium.libera.chat (Nickname regained by services)))
[17:15:41] *** diskin_ is now known as diskin
[17:23:42] *** Quits: Furai (~Furai@cookiehoster.furai.pl) (Ping timeout: 268 seconds)
[17:26:56] *** Joins: magla (~gelignite@55d44e8b.access.ecotel.net)
[17:34:17] <simcop2387> genio: mine's automated now.  acme.sh and cloudflare
[17:34:50] *** Joins: Furai (~Furai@cookiehoster.furai.pl)
[17:35:22] *** Joins: Darkcoal (~user@51.158.144.31)
[17:35:29] <genio> I could probably pretty easily automate the Route53 changes, but I'm too lazy to work on it when it's not time to renew and I'm too busy to work on it when it is :)
[17:36:21] <simcop2387> looks like there's something for it right now already, https://github.com/acmesh-official/acme.sh/issues/65
[17:36:23] <Paperbot> Link title(s): [ Support for AWS Route 53? · Issue #65 · acmesh-official/acme.sh · GitHub ]
[17:36:30] <simcop2387> though not officially merged
[17:36:48] <simcop2387> oh no i missed it, it is merged
[17:36:52] <simcop2387> https://github.com/acmesh-official/acme.sh/pull/407
[17:36:52] <Paperbot> Link title(s): [ Support AWS Route53 domain API by Neilpang · Pull Request #407 · acmesh-official/acme.sh · GitHub ]
[17:38:09] <genio> oooh. I can continue to be lazy and also be efficient when next renewal time rolls around
[17:38:09] <simcop2387> looks like it just needs the iam access keys, https://github.com/acmesh-official/acme.sh/blob/master/dnsapi/dns_aws.sh
[17:38:10] <Paperbot> Link title(s): [ acme.sh/dns_aws.sh at master · acmesh-official/acme.sh · GitHub ]
[17:38:14] <genio> simcop2387++
[17:39:02] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[17:39:18] <simcop2387> and it was merpaderp that pointed me at acme.sh when i was complaining about my old certbot setup (certbot also works, but my setup was years old and complicated because it was before all the modern automation)
[17:39:27] <simcop2387> merpaderp++
[17:41:07] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: AdiIRC is updating to v4.2 Beta Build (2021/10/13 UTC) 64 Bit)
[17:43:04] <merpaderp> merpaderp at service reports
[17:43:31] <mst> :D
[17:43:52] <Kobaz> soooooo
[17:43:56] <Kobaz> perly stuff
[17:44:18] <Kobaz> if i want to check if main::NOTICE is defined, without using it as a symbol... what's a good way to do that?
[17:44:29] <mst> why
[17:44:47] <Kobaz> because if it's not defined it's a parse error
[17:44:53] <Kobaz> and it might not be..
[17:44:54] <mst> untrue
[17:44:58] <mst> actually, why not just if (main->can('NOTICE')) {
[17:45:03] <Kobaz> Bareword "main::NOTICE" not allowed while "strict subs" in use at /usr/local/library/perl/SimpleSPI.pm line 44.
[17:45:04] <Kobaz> ooh
[17:45:05] <Kobaz> that works
[17:45:09] <Kobaz> well
[17:45:14] <Kobaz> actually it wouldn't
[17:45:27] <mst> what didn't you tell me?
[17:45:28] <Kobaz> because i need to use it, if it can()
[17:45:32] <mst> ... and?
[17:45:39] <Kobaz> then it's a parse error if it doesn't
[17:45:42] <Kobaz> ..exist
[17:45:44] <Kobaz> hang on lemme paste
[17:45:45] <mst> actually, why not just if (my $notice = main->can('NOTICE')) { $notice->(@args) }
[17:45:49] <mst> stop making up problems :P
[17:46:12] <Kobaz> https://dpaste.com/8MFXU8F4V
[17:46:13] <Paperbot> Link title(s): [ dpaste: 8MFXU8F4V ]
[17:46:17] <Kobaz> oooh
[17:46:29] <Kobaz> yes that works.. i didn't know ->can() returned the ref
[17:46:55] <ilmari> main::NOTICE(@args) if defined &main::NOTICE;
[17:47:12] <mst> right, w/parens it won't complain if it isn't there
[17:47:22] <Kobaz> ah
[17:47:56] <mst> I would honestly tend to use the ->can form just out of habit
[17:48:01] <mst> but ilmari's version is entirely valid too
[17:48:03] <mst> also
[17:48:07] <Kobaz> basically... this library might or might not be being used from inside a pl/perl postgres function, that might have a main::NOTICE
[17:48:12] <mst> $_->(@args) for grep defined, main->can('NOTICE');
[17:49:38] <ilmari> Kobaz: surely in that case main::elog() won't exist either..
[17:49:43] <Kobaz> right
[17:49:45] <Kobaz> yeah i'm fixing
[17:49:49] <ilmari> but just put parens on it to make it parse as a function call
[17:50:10] <ilmari> even better, give it a logging callback 
[17:50:20] <Kobaz> true
[17:50:23] <Kobaz> i typically do
[17:50:25] <ilmari> and pass in an appropriate one depending on how it's used
[17:50:28] <Kobaz> right
[17:50:46] * mst must play with pl/perlu again at some point
[17:50:47] <Kobaz> this was a quick and dirty fix because i'm in the middle of refactoring
[17:50:52] <ilmari> e.g. sub { elog(NOTICE, @_) } in pl/perl, sub { warn @_ } elsewhere
[17:50:54] <Kobaz> mst: oh, it's amazing
[17:50:56] <ilmari> or whatever
[17:51:13] <mst> Kobaz: I fatpacked explain.depesz.com into a stored procedure so you could run 'SELECT explain_server(3000);'
[17:51:26] <Kobaz> right i remember that
[17:51:36] <mst> not necessarily a wise idea, but it was fucking funny
[17:52:11] *** Quits: Darkcoal (~user@51.158.144.31) (Ping timeout: 265 seconds)
[17:52:14] <Grinnz> Altreus: it's cute that you think there's a complete and reliable json c library
[17:52:41] <Kobaz> haha
[17:53:07] <Kobaz> https://dpaste.com/5MCWYMJVA -- for now
[17:53:07] <Paperbot> Link title(s): [ dpaste: 5MCWYMJVA ]
[17:53:24] <Grinnz> simcop2387: https://github.com/Perl/perl5/pull/18925 was just merged \o/
[17:53:27] <Paperbot> Link title(s): [ Multiple-alias syntax for foreach by nwc10 · Pull Request #18925 · Perl/perl5 · GitHub ]
[17:53:38] *** Joins: Darkcoal (~user@2001:16a2:77bb:7100:f3d4:c101:538f:2746)
[17:53:52] <simcop2387> Grinnz: i'll get it rebuilding in a few minutes then
[17:54:10] <Kobaz> Grinnz: json is next for me.. i'm adding a JSON() function to Asterisk
[17:54:30] <Kobaz> using the inboard Asterisk JOSN 'engine'
[17:54:31] *** Joins: Tempesta (~Tempesta@user/tempesta)
[17:54:32] <Grinnz> Kobaz: have fun, and remember: at least you're not trying to parse yaml
[17:54:33] <Kobaz> we'll see how that goes
[17:55:07] <Kobaz> someone suggested jq
[17:55:16] <simcop2387> jq can do a lot of fun stuff
[17:55:19] <Kobaz> but then i'll need to get that approved from legal
[17:55:26] <simcop2387> Grinnz: rebuild started, will be a few hours
[17:55:34] <Kobaz> which should be fine, it's very BSD'ish licensed
[17:55:48] <mst> when I write another query executor, I'm going to make it work in pl/perlu as well as with DBI
[17:56:02] <Kobaz> yeah you should
[17:56:22] <simcop2387> eval: my %hash=(1..10); for my ($key, $value) (%hash) {...}
[17:56:25] <perlbot> simcop2387: ERROR: Missing $ on loop variable at (IRC) line 1. 
[17:56:28] <simcop2387> just to compare with later
[17:56:47] <Kobaz> it would be nice if emacs did realtime perl syntax validation
[17:57:04] <Kobaz> i wind up having an extra } or not enough } somewhere.. would be nice to know before running teh perls
[17:57:31] <simcop2387> Kobaz: there's some start to being able to do that with the tree-sitter parser for perl being developed
[17:57:39] <haj> Kobaz: I guess you're aware of flymake / flycheck?
[17:57:47] <Kobaz> erm, nope
[17:57:55] <simcop2387> in JS but once it's ready it's easyish to translate to other langs, https://github.com/ganezdragon/tree-sitter-perl
[17:57:56] <Paperbot> Link title(s): [ GitHub - ganezdragon/tree-sitter-perl: a perl parser for javascript ]
[17:58:01] <Kobaz> oh, well would you look at that
[17:58:09] <Kobaz> Flymake mode is a minor mode that performs on-the-fly syntax checking for many programming and markup languages, including C, C++, Perl, HTML, and TeX/LaTeX
[17:58:12] <Kobaz> just look at it!
[17:58:15] <mst> Kobaz: I just use showmatch in vi, I presume emacs has an equivalent
[17:58:18] <haj> They both run 'perl -wc' in the background, with all the hazards it brings
[17:58:28] <Kobaz> hah fun
[17:59:17] <Kobaz> https://imgur.com/a/ZcNUtQq
[17:59:17] <Paperbot> Link title(s): [ Imgur: The magic of the Internet ]
[18:01:26] <haj> Also, as mst presumed, emacs has an equivalent to showmatch, it is called "show-paren-mode"
[18:01:44] <Kobaz> oh yeah
[18:01:45] <simcop2387> eval: $^X
[18:01:48] <Kobaz> i match parens, it's nice
[18:01:49] <perlbot> simcop2387: $PERLS/blead-2021-10-15/bin/perl5.35.5
[18:02:00] <simcop2387> ok it needs modules still
[18:02:03] <simcop2387> eval: my %hash=(1..10); for my ($key, $value) (%hash) {...}
[18:02:05] <perlbot> simcop2387: for my (...) is experimental at (IRC) line 1. ERROR: Unimplemented at (IRC) line 1. 
[18:02:05] <Kobaz> no i'm talking about the "you're-an-idiot-hilight-in-red-you're-missing-something" type of checking
[18:02:07] <mst> Kobaz: configuring that to handle {} solves my 'missing a }' problem usually
[18:02:22] <xenu> perlbot: eval: %hash = (pe => 'nis'); for my($k,$v) { say $k$v }
[18:02:24] <perlbot> xenu: ERROR: Missing $ on loop variable at (IRC) line 1. 
[18:02:24] <simcop2387> eval: my %hash=(1..10); for my ($key, $value) (%hash) {say $key}
[18:02:27] <perlbot> simcop2387: for my (...) is experimental at (IRC) line 1. 9 7 3 1 5 
[18:02:43] <Kobaz> no warnings 'experimental';
[18:02:52] <xenu> perlbot: eval: %hash = (pe => 'nis'); for my($k,$v) { say "$k$v" }
[18:02:54] <perlbot> xenu: ERROR: Missing $ on loop variable at (IRC) line 1. 
[18:02:56] <xenu> what
[18:03:08] <xenu> perlbot: eval: %hash = (pe => 'nis'); for my ($k,$v) { say "$k$v" }
[18:03:11] <perlbot> xenu: for my (...) is experimental at (IRC) line 1. ERROR: syntax error at (IRC) line 1, near ") {" 
[18:03:13] <LeoNerd> Need two sets of ()
[18:03:22] <xenu> ah
[18:03:25] <xenu> i'm an idiot
[18:03:31] *** Joins: krismatrix (~krismatri@38.80.149.51)
[18:03:32] <xenu> perlbot: eval: %hash = (pe => 'nis'); for my($k,$v) (%hash) { say "$k$v" }
[18:03:35] <LeoNerd> I didn't like to point that out, but.. yes ;)
[18:03:35] <perlbot> xenu: ERROR: Missing $ on loop variable at (IRC) line 1. 
[18:03:46] <simcop2387> and does still need the space apparently
[18:03:47] <xenu> now what?
[18:03:48] <krismatrix> can I create an array of size 50 but all empty?
[18:03:58] <LeoNerd> krismatrix: "empty" ?
[18:04:00] <simcop2387> xenu: my ( not my)
[18:04:02] <simcop2387> er my (
[18:04:03] <simcop2387> bah
[18:04:03] <krismatrix> yes empty
[18:04:07] <LeoNerd> You can   my @arr = (undef) x 50;
[18:04:10] <LeoNerd> What does "empty" mean here?
[18:04:14] <xenu> simcop2387: that sounds like a bug
[18:04:21] <simcop2387> xenu: agreed
[18:04:22] <xenu> there's no reason why it should require a space
[18:04:25] *** Quits: Pali (~pali@user/pali) (Remote host closed the connection)
[18:04:39] <LeoNerd> Knowing Nick/Rik I highly doubt that is intentional. I suspect it's a bug
[18:05:09] <krismatrix> As an exercise (for a class) I am implement a datastructure. I just want exactly 50 array elements, but will populate them later. So until I populate them, I want them essentially empty.
[18:05:33] <krismatrix> If I print $arr[0] I should get nothing... 
[18:05:55] <LeoNerd> What perl value would you like to see?
[18:06:05] <LeoNerd> undef is a value. empty string "" is a value. The number 0 is a value
[18:06:10] <LeoNerd> Perhaps one of these would suffice
[18:06:22] <mst> my @array = (undef) x 50;
[18:06:59] <mst> olol LeoNerd already said that
[18:07:05] <krismatrix> empty string "" would work for me.
[18:07:12] <mst> my @array = ('') x 50;
[18:07:26] <krismatrix> ok...so how come push(@array, ''); is wrong?
[18:07:41] <mst> what do you mean wrong
[18:07:57] <mst> http://trout.me.uk/vaguecat.jpg
[18:07:57] <zgu> define "essentially empty"
[18:08:04] <krismatrix> Use of uninitialized value in numeric lt (<) at implementing_hash_tables.pl line 13.
[18:08:14] <krismatrix> ah...sorry
[18:08:17] <krismatrix> wrong copy paste
[18:08:22] <krismatrix> Experimental push on scalar is now forbidden at implementing_hash_tables.pl line 14, near """)"
[18:08:32] <mst> then you fucked something up
[18:08:36] <mst> in code you haven't shown
[18:08:43] <krismatrix> right.
[18:08:45] <mst> eval: my @array; push(@array, ''); \@array
[18:08:49] <perlbot> mst: [""]
[18:08:53] <mst> because the push you showed me works perfectly
[18:09:34] <krismatrix> hmmm
[18:09:38] <mst> it's a good idea to assume that if you don't understand what the problem is, you probably also don't understand *where* the problem is
[18:09:50] <mst> that's pretty much always true for -me- ;)
[18:09:54] <simcop2387> xenu: LeoNerd: reported, https://github.com/Perl/perl5/issues/19192
[18:09:55] <Paperbot> Link title(s): [ Parsing issue with Mutlivariable for loops · Issue #19192 · Perl/perl5 · GitHub ]
[18:10:03] <LeoNerd> :)
[18:10:09] <mst> simcop2387: and blocked? :D
[18:10:11] <LeoNerd> Typo in bug title ;)
[18:10:21] <krismatrix> sure sure.
[18:10:30] * LeoNerd muses on Mutley Variable foreach loops
[18:10:35] <krismatrix> what is the pastebin i should use ?
[18:10:36] <xenu> also you didn't write what is the expected behaviour! the whole ticket is ruined
[18:11:02] <mst> krismatrix: but it makes questions like "so how come push(@array, ''); is wrong?" intensely annoying because it clearly means you didn't even bother to test that bit of perl before asking :P
[18:11:08] <simcop2387> mst: now i'm just waiting on the cpanm install script for it
[18:11:11] <mst> krismatrix: what's wrong with the one in /topic
[18:11:50] <mst> krismatrix: this channel's topic starts: No pasting, paste to https://l.perl.bot/#perl
[18:11:50] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[18:12:01] <simcop2387> if you get any ssl/tls errors let me know i just redid those last night
[18:12:16] <mst> krismatrix: like, there's a reason we put that there, it's so you don't need to ask which pastebin because we already told you :D
[18:12:32] <mst> LeoNerd: shshm fshm mshm gshm
[18:12:35] <alh> Based on near """)" your have a silly syntax error in your code
[18:12:56] <alh> Ah, but no, push($x, "") will totes throw that
[18:13:00] <mst> probably but I'm not even going to bother trying until he stops making stupid guesses and de-vaguecat's the question
[18:13:11] <krismatrix> https://l.perl.bot/p/njhi67
[18:13:11] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[18:13:11] *** Quits: jaytee80 (~jaytee80@fw.bmd.cpii.com) (Quit: Client closed)
[18:13:11] <alh> So likely you're push($array, "") instead of push(@array, "")
[18:13:21] <zgu> you can't push to a scalar
[18:13:23] <simcop2387> or @$array if it's a ref
[18:13:32] <mst> $self->{data} = ('') x $args->{size};
[18:13:36] <mst> is not what we said at all.
[18:13:38] <zgu> eval: my $a; push($a, "")
[18:13:41] <perlbot> zgu: ERROR: Experimental push on scalar is now forbidden at (IRC) line 1, near """)" 
[18:13:43] <mst> $self->{data} = [ ('') x $args->{size} [;
[18:13:53] <zgu> wait what? experimental? NOW forbidden?
[18:14:02] <xenu> zgu: it used to work for a while
[18:14:09] <mst> length($self->{data}); is also wrong
[18:14:10] <xenu> until everyone realized that it was a mistake
[18:14:10] <LeoNerd> It was experimental autoderef
[18:14:13] <simcop2387> zgu: yea it was allowed for a while after 5.10 i think, and then forbidden around 5.18 or so?
[18:14:15] <zgu> what did it even do?
[18:14:15] <mst> length(@{$self->{data}})
[18:14:16] <zgu> oh
[18:14:34] <zgu> like $a = [1,2,3]; push $a, 4 ?
[18:14:34] *** Quits: Darkcoal (~user@2001:16a2:77bb:7100:f3d4:c101:538f:2746) (Ping timeout: 252 seconds)
[18:14:37] <mst> krismatrix: also, HashTable->new, 'new HashTable' is wrong.
[18:14:49] <LeoNerd> It was the observation that in Most[*] situations, perl can guess what dereffing operation to perform, so forcing the user to write  push @$aref, ...  is silly when push $aref, ...  would be just as fine
[18:14:51] <mst> krismatrix: variable should be called $my_hash_table, you're not writing java
[18:14:53] *** Quits: Su-Shee (~Susanne@p508944d2.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[18:15:04] <mst> zgu: mostly it made bunny cry.
[18:15:06] <zgu> right that kind of makes sense
[18:15:12] <LeoNerd> ... except.. that it combined with a bunch of other new features in the same release in a terrible way, and was horrible, so something had to be taken out again
[18:15:19] <LeoNerd> This feature drew the short straw
[18:15:26] <mst> it was always terminally broken
[18:15:35] <mst> if you had an object with an arrayref and a hashref overload it was fucked
[18:15:45] <mst> it never worked, even without any other feature
[18:16:07] *** Joins: Su-Shee (~Susanne@p4ffc76f1.dip0.t-ipconnect.de)
[18:16:12] <mst> it didn't draw the short straw, it was broken by design
[18:16:13] *** Joins: Darkcoal (~user@2001:16a2:77bb:7100:f3d4:c101:538f:2746)
[18:16:50] <mst> fortunately I noticed this and banned anybody I was working with from using it so its deletion mostly just gave us our syntax errors back :D
[18:19:40] <krismatrix> why is length($self->{data}) wrong?
[18:19:50] <simcop2387> also, quick reminder the current eval is slightly broken since it's missing modules.  they're installing and will be available shortly i just needed to have that features available asap
[18:20:04] <mst> krismatrix: because $self->{data} isn't a string?
[18:20:06] <simcop2387> perlbot: search each
[18:20:13] <LeoNerd> length() counts the number of characters in a string
[18:20:14] <perlbot> simcop2387: [bijection is a mapping that is both one-to-one (an injection) and onto (a surjection), i.e. a function which relates each member of a set S (the domain) to a separate and distinct member of another set T (the range), where each member in T also has a corresponding member in S.] [each is each was designed to provide a perl level access to the built... [Output truncated. Use `more` to read more]
[18:20:15] <mst> krismatrix: my $length = @{$self->{data}};
[18:20:23] <simcop2387> hrm the pastbin code there isn't working
[18:20:25] <mst> krismatrix: don't use completely the wrong function? :D
[18:20:27] <simcop2387> evalpb: 1
[18:20:30] <perlbot> simcop2387: Couldn't pastebin output
[18:20:33] <simcop2387> huh
[18:20:43] <krismatrix> oh..sorry..tha was there because of some other logical thought...and I didn't correct it.
[18:20:45] <simcop2387> sounds like a routing issue i'll look at it later
[18:20:48] <mst> krismatrix: you can't use substr() on an array reference either :D
[18:21:22] <LeoNerd> .oO( O RLY?! )
[18:21:30] <mst> LeoNerd: bad leonerd, no cookie.
[18:21:34] <krismatrix> I am not using substr() on an array ref. It is on a string.
[18:21:40] <mst> krismatrix: ... what
[18:21:55] <mst> krismatrix: I was giving an example to explain why length($self->{data}) was wrong
[18:22:09] <LeoNerd> mst: You've seen mauke's lvalue subs module, yes? The one that lets you square a number by setting  my $x; sqrt($x) = 4;  # now $x == 16
[18:22:10] * mst passes krismatrix the coffe pot, you clearly need it
[18:22:12] <krismatrix> right right...but not a mistake i made on substr() in my coe.
[18:22:18] <mst> never said you did
[18:22:25] <krismatrix> misunderstood you.
[18:22:46] <mst> LeoNerd: ... don't make me get the spray bottle.
[18:22:49] <simcop2387> LeoNerd: i've not seen that but it certainly does seem like something he'd do
[18:22:53] <krismatrix> sorry...trying to implement basic DS, with perl OOP which I never use.
[18:23:11] <simcop2387> LeoNerd: what happens if you do sqrt($x) = -1
[18:23:23] *** Joins: gast0n (~g4570n@user/gast0n)
[18:23:25] <mst> simcop2387: I can't possibly imagine
[18:23:27] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[18:23:58] <simcop2387> mst: it is a bit of a made up problem to be sure
[18:24:03] <LeoNerd> *groan*
[18:24:37] *** Quits: furrymcgee (~devuan@cgn-89-1-209-32.nc.de) (Remote host closed the connection)
[18:24:41] <mst> simcop2387: I guess it depends how complex the implementation is
[18:24:51] <simcop2387> LeoNerd: it's just a phase.  Let's go get the euler changed in the car and pick up some pie
[18:25:14] <simcop2387> that one was quite the stretch to transform the joke though
[18:25:28] <mst> I'm sure you were positively radiant when you came up with it
[18:26:00] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[18:26:05] <LeoNerd> You'll hear no argument from me
[18:26:17] *** Joins: willthechill (~willthech@2600:1700:8c61:3ed0:24b5:8c4e:85fb:14d8)
[18:26:19] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[18:27:10] <zgu> that humor is too complex for some people
[18:27:51] <simcop2387> i wanted to make one more about rotations but i just couldn't seem to find it
[18:28:19] *** Joins: ingy (~ingy@143.244.187.20)
[18:29:04] *** Quits: gast0n (~g4570n@user/gast0n) (Ping timeout: 265 seconds)
[18:29:06] <mst> zgu: sometimes you just gotta keep it real
[18:29:44] <depesz> mst: you did WHAT?!
[18:29:59] <depesz> mst:  you can run explain.depesz.com site from within sql?
[18:30:17] <mst> depesz: sure :D
[18:30:36] <depesz> I would assume that it keeps transaction/function open for the whole duration of the site being up?
[18:30:36] <simcop2387> yay, looks like modules on non-threaded blead are done
[18:31:02] <simcop2387> depesz: or at least per request i'd imagine
[18:31:17] <mst> depesz: IIRC what I actually did was bolted Pg::Explain into a Web::Simple app since I didn't need the rest of it, but it was, like, half of your site's code bundled as a Plack app
[18:31:27] <mst> depesz: so it's simpler to just credit you for the whole thing
[18:31:35] *** Joins: gast0n (~g4570n@user/gast0n)
[18:31:36] <mst> depesz: and, yes, while the server's running it ties up that postmaster child
[18:31:43] <depesz> damn. you're madman
[18:32:21] <mst> depesz: but being able to paste a query in and have it do the EXPLAIN ANALYZE directly in the server was pretty handy
[18:33:48] <mst> I should do a more production grade version using the Mojo codebase one of these years
[18:34:09] *** Joins: vague (~vague@irssi/staff/vague)
[18:37:53] *** Joins: thrig (~thrig@65.113.153.50)
[18:38:44] *** Joins: gizmomathboy (~gizmomath@206.127.53.107)
[18:40:49] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[18:41:09] *** Joins: PapaChub (~PapaChub@vzw-54.parabon.com)
[18:41:29] *** Quits: Darkcoal (~user@2001:16a2:77bb:7100:f3d4:c101:538f:2746) (Ping timeout: 264 seconds)
[18:41:47] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Client Quit)
[18:42:34] <zgu> speaking of mojo
[18:42:36] <zgu> Plugin "PODRenderer" missing, maybe you need to install it?
[18:43:06] <zgu> just did OS update including perl to 5.34
[18:43:17] *** Joins: Darkcoal (~user@2001:16a2:77bb:7100:f3d4:c101:538f:2746)
[18:43:25] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[18:44:18] <thrig> a great way to bork modules for 5.32 or whatever prior
[18:44:58] * zgu comments out the "plugin 'PODRenderer';" line that was apparently autogenerated
[18:46:01] <zgu> also updated Mojolicious from 8.58 to 9.19, maybe that got removed
[18:46:18] <thrig> mojo is known for making breaking changes
[18:47:34] *** Quits: Darkcoal (~user@2001:16a2:77bb:7100:f3d4:c101:538f:2746) (Ping timeout: 252 seconds)
[18:48:11] *** Quits: vrurg (~vrurg@45.74.95.181) (Quit: Leaving...)
[18:48:38] <mst> zgu: I think that plugin may have moved into the site codebase rather than being part of the dist
[18:49:35] *** Joins: Darkcoal (~user@139.64.60.27)
[18:50:36] *** Joins: hudo__ (~hudo@62.68.20.210)
[18:53:35] <Grinnz> yes, though if you weren't using the /perldoc routes it added, it was rather pointless to use anyway
[19:00:57] <zgu> yeah i wasn't doing anything with it
[19:03:13] *** Quits: vague (~vague@irssi/staff/vague) (Quit: Client closed)
[19:13:35] *** Joins: KnoP (~KnoP@p57b21ac7.dip0.t-ipconnect.de)
[19:15:07] *** Quits: markgrady (~markgrady@2a02:c7f:f72b:b200:5ced:2104:689c:c250) (Ping timeout: 240 seconds)
[19:15:07] *** Quits: tobybl (~tobybl@38.247.200.146.dyn.plus.net) (Remote host closed the connection)
[19:17:39] *** Joins: markgrady (~markgrady@2a02:c7f:f72b:b200:5c45:a1cd:cebc:f01c)
[19:18:12] *** Quits: markgrady (~markgrady@2a02:c7f:f72b:b200:5c45:a1cd:cebc:f01c) (Client Quit)
[19:31:21] <krismatrix> man...perl gets really complicated when you want to deal with complex DS.
[19:33:19] <mst> I disagree
[19:33:38] <mst> but learning how to do it simply takes practice
[19:34:11] <thrig> don't throw me into that patch of data structures, complained Br'er Rabbit
[19:34:48] <LeoNerd> "DS"?
[19:34:57] <krismatrix> well...I think the fact that I have to constantly deref stuff...makes it complicated for me. I can use Data dumper to make it a little easier.
[19:35:06] <krismatrix> But I want to not depend on Data Dumper
[19:35:11] <krismatrix> DS = Data Structures.
[19:35:57] <mst> Data::Dumper is a standard debugging tool
[19:36:02] *** Quits: treefrob (~treefrob@p2e54293e.dip0.t-ipconnect.de) (Remote host closed the connection)
[19:36:10] <mst> if you aren't constantly depending on it, you're doing something wrong
[19:36:27] *** Joins: treefrob (~treefrob@p2e54293e.dip0.t-ipconnect.de)
[19:37:15] *** Quits: jaggz (~jaggz@user/jaggz) (Quit: I saith goodbye)
[19:37:37] <krismatrix> I don't mean for debugging. I just want to be able to return contents of an array or hash sometimes..and have to constantly remember when I need to deref vs not. I don't have that memorized in my head. I sort of have to really really think it through.
[19:37:59] <mst> ah, yeah, that takes practice
[19:38:10] <LeoNerd> How about "always" :)
[19:38:29] <LeoNerd> Whenever you care about *the things in the box*, deref it so you're talking about "the things in the box"
[19:38:36] <LeoNerd> Only when you want to talk about the box itself, do you not
[19:40:02] <huf> reminds me of that movie where two detectives keep trying to find out how to dereference
[19:40:11] <krismatrix> For example, if I want to pass two arrays (or hashes..) into a sub routine... i need to pass them as a reference, then de-ref within sub, then manipulate them, and then if I want to return two arrays, then I need to return references.
[19:40:27] <thrig> what's the de-ref for?
[19:40:54] <krismatrix> so that I get the arrays again?
[19:40:59] <LeoNerd> Your wording explains it
[19:41:07] <thrig> nope. you can just operate on the refs, if you want
[19:41:12] <LeoNerd> "want to return two arrays" - yes. So it's the boxes -themeslves- that are interesting, not the contents of them
[19:41:18] <LeoNerd> arrays and hashes are boxes.
[19:41:32] <LeoNerd> Sometimes the contents of the box are what is important. Sometimes it's the box itself
[19:41:46] <LeoNerd> This is just as true in Perl as any other language with aggregate data structures (i.e. justabout all of them)
[19:42:20] <krismatrix> I don't think I have to constantly ref and deref in python/JS.
[19:42:46] <LeoNerd> Then you're not looking hard enough
[19:42:55] <LeoNerd> It happens just as often, just in different situations
[19:43:06] <krismatrix> I mean...i get that these languages do it for you but in the background it is there.
[19:43:37] <krismatrix> ok.
[19:44:46] <krismatrix> hmm..
[19:44:56] <LeoNerd> For example if you have two arrays and you want to call a function passing the entire combined list of every element from both of them
[19:45:13] <LeoNerd> in perl that's just  func(@x, @y)  whereas in a lot of other langauges you have to play odd tricks to make a new "array" formed of the entire contents of both
[19:45:49] <krismatrix> I think you jsut do a join(@x, @y) equivalent in other languages.
[19:45:52] <LeoNerd> E.g. in Python isn't it something like   func([*x, *y])  ?
[19:46:03] <LeoNerd> join is a string thing in Python
[19:46:12] <mst> and func ([...x, ...y]) in JS
[19:46:19] <LeoNerd> Ahyes the "splat" operator in JS
[19:46:27] <krismatrix> splat or spread?
[19:46:41] <LeoNerd> Python and JS have syntax for "make the contents of these arrays spill out", whereas in Perl that's the native behavour of an array in list context
[19:46:55] <LeoNerd> So to make up for that, Perl has an operator for talking about "the array itself" where you dont' spill it
[19:47:46] <krismatrix> ok
[19:48:10] <LeoNerd> The particularly hideous one I find in python is the -hugely- subtle difference between   for x in arr:  and   for x in arr,:
[19:48:41] <LeoNerd> Once you know what  for x in 1,2,3:  and  for x in 1,2:  do, you believe you know what  for x in 1:  will do but NOPE. You're wrong. ;)
[19:49:32] * mst cries
[19:49:49] <mst> it's "for x in 'foo':" that really hurts
[19:49:54] <LeoNerd> Ohgodyes
[19:50:21] <krismatrix> hmm
[19:50:54] *** Joins: vague (~vague@irssi/staff/vague)
[19:51:01] <LeoNerd> Butyes in summary: Perl doesn't really have any *more* rules than other languages, or a set of rules that are any more complex, they just happen to be perhaps somewhat different to the rules you might be familar with from other languages
[19:51:05] *** Quits: bn_work (uid268505@id-268505.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[19:51:08] <huf> strings being both strings and arrays is always going to produce weird shit
[19:51:10] <LeoNerd> But that's fine - different langauges can be different. That's what makes them different
[19:51:32] <Grinnz> huf: luckily in C they're only arrays!
[19:51:37] <huf> yeah
[19:52:03] <krismatrix> ok...if I have an array reference...what would be a simple way for me to prints the contents?
[19:52:08] <huf> 'foo'['hats'] is a fun one in php
[19:52:12] <thrig> say "@$ref"
[19:52:12] <Grinnz> print "@$foo"
[19:52:26] <Grinnz> or say for @$foo
[19:52:30] <mst> say join ', ', @$foo;
[19:53:09] <LeoNerd> In many ways you can treat perl's @ there like a prefix operator equivalent of Python's * or JS's ...
[19:53:27] <LeoNerd> The "spill" operator that gives you a list of the contents of a reference to a box
[19:54:45] *** Quits: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de) (Quit: Leaving.)
[19:55:22] <krismatrix> right...but these methods/mechanisms won't deref other references within them.
[19:55:41] <mst> that's not what you asked
[19:55:43] <LeoNerd> Ah, for recursive stuff.. I usually use Data::Dump 'pp'
[19:56:01] <thrig> PUDD $ref (where PUDD is an ab for something involving dumping)
[19:56:02] <mst> or Data::Dumper
[19:56:44] <mst> or you could write your own subroutine if you wanted
[19:56:58] * mst wrote Data::Dumper::Compact because it provides nicer output
[19:57:09] <krismatrix> right...Data::Dumper works, but it adds those $VAR1.
[19:57:38] <krismatrix> ah...ok.
[19:58:00] <krismatrix> I guess this is what you guys use to simplify that effort.
[19:58:03] <LeoNerd> Data::Dump also has the filter mechanism, allowing certain values to be printed differently. I use that in a few places too
[19:58:12] <mst> it only adds $VAR1 if you leave it configured to do that
[19:58:13] *** Joins: monkey_ (~user@168.194.72.201)
[19:58:35] <mst> Data::Dumper::Concise is a pre-configured Data::Dumper for example
[19:58:41] <mst> also Data::Dumper has documentation :P
[19:58:52] <Grinnz> Data::Dumper::Concise and Mojo::Util::dumper are similar Data::Dumper wrappers that make the output concise
[19:58:59] *** Joins: aindilis_ (~aindilis@152-44-40-72.us-chi1.upcloud.host)
[19:59:35] <aindilis_> hey, is there a lightweight Perl waybackmachine-like system that targets to git?
[19:59:51] <krismatrix> yeeesh...that's a lot.
[20:00:00] <mst> what's a lot?
[20:00:14] <krismatrix> all those modules.
[20:00:31] <krismatrix> *Sorry...i need to step away. Be back in a bit.*
[20:00:33] <vague> Data::Dumper::Dump($ref, ['some title']) too, if VAR1 has to be renamed
[20:00:49] <Grinnz> you only need one of them, there's just different options
[20:01:43] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Ping timeout: 265 seconds)
[20:02:08] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[20:02:09] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[20:02:29] *** Quits: proller (~p@2a02:6b8:0:40c:137:95c4:2be5:5dd) (Ping timeout: 264 seconds)
[20:02:31] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[20:03:12] *** Quits: magla (~gelignite@55d44e8b.access.ecotel.net) (Quit: Stay safe!)
[20:05:34] <Ovid> We need two *senior* devs. The sort of devs who aren't afraid of both working with legacy codebases, but architecting strong solutions in the face of them. If anyone here is looking for remote contract work (full time for a minimum of six months, probably longer), send me a private message.
[20:09:18] *** Quits: KnoP (~KnoP@p57b21ac7.dip0.t-ipconnect.de) (Quit: ChatZilla 0.9.99 [SeaMonkey 2.53.9.1/20210921115122])
[20:09:59] *** Joins: KnoP (~KnoP@p57b21ac7.dip0.t-ipconnect.de)
[20:10:19] *** Quits: KnoP (~KnoP@p57b21ac7.dip0.t-ipconnect.de) (Client Quit)
[20:15:54] <krismatrix> This is weird: $Data::Dumper::Terse = 1;        # don't output names where feasible . How come the $ in the beginning ?
[20:16:04] <mst> krismatrix: um
[20:16:13] <rindolf> Ovid: good luck finding them. \o/
[20:16:14] <mst> krismatrix: because it's a variable?
[20:16:28] <mst> krismatrix: 'my $foo;' also has a $ in the beginning
[20:16:42] <krismatrix> yes...but it has that module/object syntax. seems odd.
[20:16:51] <ilmari> krismatrix: it's fully qualified package variable
[20:16:55] * GumbyPAN CPAN Upload: CatalystX-Errors-0.001005 by JJNAPIORK https://metacpan.org/release/JJNAPIORK/CatalystX-Errors-0.001005
[20:17:02] <mst> krismatrix: it's a variable inside the Data::Dumper package
[20:17:07] <ilmari> just like Foo::Bar::Baz() is a fully qualified function call
[20:17:07] <Ovid> Thank you, rindolf. We've had no problems so far, but we have so many working for us that sooner or later I worry we might run out :)
[20:17:11] <thrig> how legacy is the codebase? like, is it for Miskatonic University?
[20:17:11] <mst> krismatrix: this isn't odd at all.
[20:18:03] <LeoNerd> scalar variables start with $. Always. The full name just tells you where to find it
[20:18:13] <krismatrix> I really need to go back and review my OOP conway book.
[20:18:30] <LeoNerd> That's nothing to do with OO
[20:18:38] <Grinnz> i mean, we should expect people don't know what package variables are anymore
[20:18:41] <mst> and fixing the massive security holes and incompetently written SQL Ovid's team leaves behind has been highly profitable for shadowcat
[20:18:45] <Grinnz> and it's good because they suck
[20:19:08] <Ovid> thrig: if that was meant for me, that's a hard question to answer. It's not in the "bunch 'o CGI scripts without strict" category. But it's also not in the "coherent architecture with tech debt" category. It's huge, but the new management of the company is focused on hiring people who care about good code.
[20:19:10] <LeoNerd> Mmmm, I find them handy for occasional configuation settings
[20:20:14] <LeoNerd> But they should be rare.
[20:23:58] *** Quits: Darkcoal (~user@139.64.60.27) (Quit: Darkcoal)
[20:24:08] *** Joins: Darkcoal (~user@2001:16a2:77bb:7100:f3d4:c101:538f:2746)
[20:26:04] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[20:28:07] *** Quits: Darkcoal (~user@2001:16a2:77bb:7100:f3d4:c101:538f:2746) (Client Quit)
[20:28:15] *** Joins: Darkcoal (~user@2001:16a2:77bb:7100:f3d4:c101:538f:2746)
[20:28:33] <Ovid> I'll not respond to mst's trolling other than to say  “leftovers are better reheated.”
[20:29:13] <thrig> I've heard that revenge should be served cold
[20:30:36] <mst> oh, I'm sorry, I thought I was still on /ignore from the last time you were enough of a dick to multiple people that *I* noticed and then threw a tantrum when I pointed it out
[20:30:52] <Kobaz> okay so
[20:31:18] <Kobaz> the return value of main->can('NOTICE') is a coderef... but main::NOTICE just by itself is an integer 18
[20:31:19] <mst> I will note for the record that I've known a number of highly competent people who worked for ovid and quite enjoyed the experience
[20:31:42] <LeoNerd> Yes; ->can returns you a coderef to the function. It doesn't call the function
[20:31:49] <mst> apparently I've yet to get to see any of the codebases those people worked on though
[20:31:55] <Kobaz> oh so then you need to call it to get the value
[20:32:00] <Grinnz> yes
[20:32:00] <LeoNerd> Yup
[20:32:15] <LeoNerd> Though in this case with a literal, why not just call   main->NOTICE  ?
[20:32:23] <Kobaz> oh
[20:32:27] <Grinnz> main->can('NOTICE') is similar to \&main::NOTICE, but follows inheritance
[20:32:32] <Kobaz> i was doing main::NOTICE and getting a syntax error
[20:32:43] <Kobaz> since when using this pm, it might or might not exist
[20:32:53] <Kobaz> so main->NOTICE would be okay? lemme see
[20:32:54] <Grinnz> main::NOTICE()
[20:33:01] <Kobaz> k
[20:33:03] <Grinnz> this will defer the check to runtime
[20:33:08] <Kobaz> yeah was gonna try that
[20:33:11] <LeoNerd> Ahyes; so..  package->method  is late-bound at runtime.   package::function()  would also be fine
[20:33:26] <LeoNerd> But unadorned with parens, as a bareword  package::function  some early checking happens
[20:33:27] <Grinnz> the method call is different in the case where you care about args
[20:33:34] <Kobaz> k cool
[20:34:48] <mst> Kobaz: we told you about () earlier
[20:34:56] <Kobaz> yeah
[20:34:59] *** Joins: Pali (~pali@user/pali)
[20:35:00] <mst> but I still don't see what the problem is with the complete working code I already gave you
[20:35:01] <Kobaz> sorry, heh, was side tracked
[20:35:09] <Kobaz> mmm lemme re-read that
[20:35:14] <thrig> use less 'sidequests'
[20:36:00] <mst> if (my $notice = main->can('NOTICE')) { $notice->(@args) }
[20:36:02] <mst> will work fine
[20:36:07] <mst> not sure what this 18 is
[20:37:09] <Kobaz> yeah works fine
[20:37:22] <Kobaz> 18 is just the value of NOTICE
[20:37:29] <Kobaz> provided by postgres pl/perl
[20:37:50] <Kobaz> NOTICE is not a function, natively
[20:38:02] <Kobaz> it's a constant
[20:38:25] <LeoNerd> `use constant` creates functions
[20:38:26] *** Quits: Darkcoal (~user@2001:16a2:77bb:7100:f3d4:c101:538f:2746) (Ping timeout: 245 seconds)
[20:38:31] <Kobaz> oooh
[20:38:35] <Kobaz> haha fun
[20:38:37] <mst> Kobaz: there might be a $NOTICE as well?
[20:38:38] <Kobaz> good to know the internals
[20:38:50] <choroba> does it? Someone told me it doesn't anymore
[20:38:52] <LeoNerd> Prettysure that's not "internals", that's "how it is documented to work"
[20:38:59] <choroba> ah ok\
[20:39:27] <LeoNerd> Oh hrmm... actually, .. it doesn't really say it in as many words
[20:40:07] <mst> choroba: there's an optimisation where a scalar ref in the symbol table can be used to represent a constant function
[20:40:16] <ilmari> unless you actually call it as a function it's just scalarref in the symbol table
[20:40:35] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 260 seconds)
[20:40:55] <ilmari> s/call/reference/
[20:41:21] *** Joins: Darkcoal (~user@2001:16a2:77bb:7100:f3d4:c101:538f:2746)
[20:41:35] <choroba> I see
[20:43:08] <ilmari> sweval: package Foo { use constant BAR => 42, BAZ => 37 }; [ Foo::BAR, Foo->BAZ; \%Foo:: ]
[20:43:10] <perlbot> ilmari: ERROR: syntax error at (IRC) line 1, near "->BAZ;" syntax error at (IRC) line 1, near "%Foo:: ]" 
[20:43:14] <ilmari> sweval: package Foo { use constant BAR => 42, BAZ => 37 }; [ Foo::BAR, Foo->BAZ, \%Foo:: ]
[20:43:16] <perlbot> ilmari: ERROR: Can't locate object method "BAZ" via package "Foo" at (IRC) line 1. 
[20:43:32] <LeoNerd> more {}s
[20:43:34] *** Quits: gast0n (~g4570n@user/gast0n) (Ping timeout: 252 seconds)
[20:44:03] <ilmari> sweval: package Foo { use constant { BAR => 42, BAZ => 37 }; } [ Foo::BAR, Foo->BAZ, \%Foo:: ]
[20:44:05] <perlbot> ilmari: [42,37,{BEGIN => *Foo::BEGIN,BAZ => *Foo::BAZ,BAR => \42}]
[20:44:46] <ilmari> BAZ got upgraded to a full-blown glob with a code slot, while BAR is still just a scalarref
[20:45:15] <ilmari> \&Foo::BAZ and Foo->can('BAZ') would have had the same effect, because they all need to reify it as an actual function
[20:45:36] <LeoNerd> Ahyes, the "CVs in the symbol table" optimisation
[20:48:01] *** Quits: Pali (~pali@user/pali) (Ping timeout: 245 seconds)
[20:48:10] <choroba> neat
[20:52:47] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[21:00:41] *** Quits: monkey_ (~user@168.194.72.201) (Ping timeout: 264 seconds)
[21:02:24] *** Quits: Darkcoal (~user@2001:16a2:77bb:7100:f3d4:c101:538f:2746) (Ping timeout: 268 seconds)
[21:04:04] *** Joins: Darkcoal (~user@139.64.60.27)
[21:07:11] <mst> thinking about it, whatever personal disagreements I may have with Ovid, bringing our professional lives into the conversation was inappropriate, and I would like anybody who was around for that mistake to consider the statement retracted
[21:08:22] *** Quits: Darkcoal (~user@139.64.60.27) (Ping timeout: 252 seconds)
[21:09:12] *** Joins: monkey_ (~user@168.194.72.201)
[21:12:21] <Ovid> Thank you, mst.
[21:14:39] *** Joins: magla (~gelignite@55d44e8b.access.ecotel.net)
[21:15:37] *** Joins: proller (~p@2a02:6b8:0:40c:d29c:901e:a90a:f1ad)
[21:37:05] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Ping timeout: 265 seconds)
[21:41:29] *** Joins: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de)
[21:47:21] <xenu> https://www.ebay.ie/itm/132345592821
[21:47:22] <Paperbot> Link title(s): [ SCO Xinuos UnixWare 7 Definitive 2018 - SCO Unix - New Base License - Perpetual | eBay ]
[21:47:37] <xenu> >Perpetual License until 2038, Includes support for up to 500-users and 64GB RAM.
[21:47:49] <xenu> lmao
[21:47:51] *** Joins: drevil (~igor@pool-173-54-17-110.nwrknj.fios.verizon.net)
[21:48:03] *** Quits: thrig (~thrig@65.113.153.50) (Quit: leaving)
[21:48:04] <xenu> the OS won't work after 2038 so they limited their "perpetual" license to that year
[21:48:26] *** Joins: thrig (~thrig@65.113.153.50)
[21:48:52] *** Quits: Furai (~Furai@cookiehoster.furai.pl) (Ping timeout: 268 seconds)
[21:50:52] <zgu> it will keep working until the end of (32-bit) time
[21:52:18] *** Quits: drevil (~igor@pool-173-54-17-110.nwrknj.fios.verizon.net) (Quit: leaving)
[21:52:48] *** Joins: drevil (~igor@pool-173-54-17-110.nwrknj.fios.verizon.net)
[21:53:37] <thrig> (unix 32-bit) time
[21:56:06] <drevil> Hello everyone and good time of day. I have what is probably a trivial issue. I have a variable $var. I am unpacking 16 bytes from var: $unpc = unpack("x[32]A[16]", $var); However, later, when I do "length($unpc)" it occassionally says "15" instead of 16. What gives?
[21:56:50] <drevil> $var is actually much bigger than 48 bytes
[21:57:31] <thrig> use Devel::Peek; Dump $_ for $var, $unpc
[21:58:10] *** Quits: ugjka (~ugjka@ugjka.net) (Quit: Rabooting the server https://ugjka.net)
[21:58:45] *** Joins: ugjka (~ugjka@ugjka.net)
[22:02:23] <xenu> drevil: A strips trailing whitespace and nulls
[22:02:53] <drevil> thrig - thanks, will try
[22:03:12] <genio> am I the only one that has to look at the docs every single damn time he uses (?:un)?pack 
[22:03:41] <drevil> xenu - what would be an alternate way to get ASCII out without stripping?
[22:03:56] <drevil> genio - I guess it depends how often one uses it :)
[22:05:09] *** Quits: PapaChub (~PapaChub@vzw-54.parabon.com) (Quit: Leaving)
[22:06:40] <xenu> drevil: Z if you want perl to respect null termination
[22:06:47] <xenu> "a" if you don't
[22:07:23] <xenu> if you know that the string is always 16 characters long then probably you want the latter
[22:07:38] <xenu> if you don't then the former
[22:08:11] <mst> genio: I have to look at the docs, try, fail, then cry in here until somebody takes pity on me
[22:08:48] <drevil> mst - I am in the grief stage
[22:09:34] <vanfanel64> <ilmari> just like Foo::Bar::Baz() is a fully qualified function call
[22:09:46] <vanfanel64> Is there such a thing as a partially qualified call/variable/etc ?
[22:10:15] <vanfanel64> Like relative to a namespace
[22:10:42] <mst> vanfanel64: 'baz()' is relative to your current package
[22:10:43] <vanfanel64> Does any language have that sort of thing?
[22:11:11] <thrig> eval: $partial = 42; [ $main::partial, $partial ]
[22:11:13] <perlbot> thrig: [42,42]
[22:11:36] <vanfanel64> mst, I mean in package Foo, you have ::Bar::Baz() becomes Foo::Bar::Baz()
[22:12:05] <vanfanel64> Or something of the sort
[22:12:18] <vanfanel64> Maybe not :: as that usually means main if I remember right
[22:12:44] <vanfanel64> I mean if the left side start with ::
[22:12:52] <thrig> TCL has relative namespaces, see namespaces(n)
[22:13:37] <vanfanel64> Maybe .::Bar::Baz(), where . is current namespace, sort of like in filesystems where . is current dir
[22:14:05] <xenu> no, your choice is between "fully qualified" and "in the current namespace"
[22:14:12] <thrig> could also be a rich source of security bugs, just like putting '.' into @INC or $PATH does
[22:14:15] <xenu> ::Foo::Bar means main::Foo::Bar
[22:14:29] <xenu> (it's a special case)
[22:14:48] <vanfanel64> thrig, why would it, it would just be syntax sugar
[22:15:02] <vanfanel64> xenu, yes I had caught that, see above
[22:15:12] <vanfanel64> You explained it better though
[22:18:36] <mst> IIRC I once figured out how to do it specifically for barewords at compile time
[22:19:29] <mst> but it involved aliasing global packages to each other temporarily and overriding require() so they didn't bleed out into modules the current file was loading and I decided letting that escape into the world would be a bad plan
[22:20:45] *** choroba is now known as choroba_
[22:21:09] *** Joins: choroba (~E_Choroba@89-101-243-80.cust.centrio.cz)
[22:21:19] *** Quits: choroba_ (~E.Choroba@89-101-243-80.cust.centrio.cz) (Quit: Leaving)
[22:28:11] <gordonfish> sweval: sub Foo::Bar::Baz { 123 } package Foo { no strict qw(refs); *{__PACKAGE__."::Bar::Baz"}->(); }
[22:28:12] <perlbot> gordonfish: 123
[22:28:50] *** Quits: krismatrix (~krismatri@38.80.149.51) (Remote host closed the connection)
[22:29:35] <Grinnz> https://metacpan.org/pod/aliased is a non-hacky way to get some of the benefits
[22:29:36] <Paperbot> Link title(s): [ aliased - Use shorter versions of class names. - metacpan.org ]
[22:29:52] <Grinnz> abusing how subroutines are also barewords
[22:31:40] <gordonfish> sweval: sub Foo::Bar::Baz { 123 } package Foo { use Symbol; ${qualify_to_ref(__PACKAGE__. '::Bar::Baz')}->() }
[22:31:42] <perlbot> gordonfish: 123
[22:32:01] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[22:32:09] * GumbyPAN CPAN Upload: Catalyst-TraitFor-Request-StructuredParameters-0.003 by JJNAPIORK https://metacpan.org/release/JJNAPIORK/Catalyst-TraitFor-Request-StructuredParameters-0.003
[22:32:50] *** Joins: Furai (~Furai@cookiehoster.furai.pl)
[22:33:50] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[22:37:09] * GumbyPAN CPAN Upload: Catalyst-TraitFor-Request-StructuredParameters-0.004 by JJNAPIORK https://metacpan.org/release/JJNAPIORK/Catalyst-TraitFor-Request-StructuredParameters-0.004
[22:37:20] *** Quits: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[22:41:02] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Remote host closed the connection)
[22:42:35] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:45:09] *** gloin_ is now known as gloin
[22:45:59] *** Joins: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[22:46:23] *** Quits: Furai (~Furai@cookiehoster.furai.pl) (Quit: WeeChat 3.3)
[22:47:10] * GumbyPAN CPAN Upload: Catalyst-TraitFor-Request-StrongParameters-0.003 by JJNAPIORK https://metacpan.org/release/JJNAPIORK/Catalyst-TraitFor-Request-StrongParameters-0.003
[22:50:40] <gordonfish> Grinnz: aliased looks nice, though I can't quite seem to get it to work (could be a bot/eveal thing)
[22:50:48] <gordonfish> sweval: BEGIN{$INC{'Foo.pm'}=__FILE__} sub Foo::Bar::Baz { 123 } package Foo { use aliased __PACKAGE__, '_PARENT_'; _PARENT_::Bar::Baz(); }
[22:50:49] <perlbot> gordonfish: ERROR: Undefined subroutine &_PARENT_::Bar::Baz called at (IRC) line 1. 
[22:50:59] <Grinnz> it doesn't work like that
[22:51:11] <gordonfish> I tried other ways too and keep running into the same wall
[22:51:12] <Grinnz> it's for aliasing class names which you call methods on
[22:51:29] <gordonfish> Yeah seems like a shallow alias
[22:51:36] <Grinnz> you can't stick a subroutine in a random part of a fully qualified name
[22:52:25] <_73> is there a module that provides a function like `confess` that also dumps all variables local to the current subroutine?
[22:52:59] <gordonfish> sweval: BEGIN{$INC{'Foo/Bar.pm'}=__FILE__} sub Foo::Bar::Baz { 123 } package Foo { use aliased __PACKAGE__. '::Bar', 'Bar'; Bar::Baz(); }
[22:53:00] <perlbot> gordonfish: ERROR: Undefined subroutine &Bar::Baz called at (IRC) line 1. 
[22:53:03] <gordonfish> sweval: BEGIN{$INC{'Foo/Bar.pm'}=__FILE__} sub Foo::Bar::Baz { 123 } package Foo { use aliased __PACKAGE__. '::Bar', 'Bar'; Bar->Baz(); }
[22:53:04] <perlbot> gordonfish: 123
[22:53:48] <Grinnz> _73: nothing can see lexicals other than e.g. PadWalker or Devel::Gladiator
[22:54:02] <gordonfish> sweval: sub Foo::Bar::Baz { 123 } package Foo { (__PACKAGE__.'::Bar')->can('Baz')->() }
[22:54:03] <perlbot> gordonfish: 123
[22:54:18] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[22:54:21] <_73> Grinnz: ill look into these thanks
[22:55:02] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[22:55:16] *** Joins: gast0n (~g4570n@user/gast0n)
[22:58:24] *** Joins: Furai (~Furai@cookiehoster.furai.pl)
[23:06:23] *** Quits: proller (~p@2a02:6b8:0:40c:d29c:901e:a90a:f1ad) (Ping timeout: 264 seconds)
[23:10:56] *** Quits: pucara (~i@181.90.255.235) (Quit: Lost terminal)
[23:11:24] *** Quits: EvanCarroll (~ecarroll@c-73-32-86-244.hsd1.tx.comcast.net) (Read error: Connection reset by peer)
[23:12:13] * GumbyPAN CPAN Upload: CatalystX-Errors-0.001006 by JJNAPIORK https://metacpan.org/release/JJNAPIORK/CatalystX-Errors-0.001006
[23:12:13] * GumbyPAN CPAN Upload: Catalyst-TraitFor-Request-StructuredParameters-0.005 by JJNAPIORK https://metacpan.org/release/JJNAPIORK/Catalyst-TraitFor-Request-StructuredParameters-0.005
[23:12:23] *** Quits: monkey_ (~user@168.194.72.201) (Ping timeout: 264 seconds)
[23:12:26] *** Quits: Furai (~Furai@cookiehoster.furai.pl) (Quit: WeeChat 3.3)
[23:14:36] *** Joins: EvanCarroll (~ecarroll@c-73-32-86-244.hsd1.tx.comcast.net)
[23:15:21] *** Joins: Furai (~Furai@cookiehoster.furai.pl)
[23:23:54] *** Quits: Su-Shee (~Susanne@p4ffc76f1.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[23:25:11] *** Joins: Su-Shee (~Susanne@p4ffc72ec.dip0.t-ipconnect.de)
[23:31:44] *** Joins: jaggz (~jaggz@user/jaggz)
[23:32:37] <jaggz> https://paste.debian.net/1215585/  why net::whois fail 2 install
[23:32:38] <Paperbot> Link title(s): [ debian Pastezone ]
[23:33:38] <jaggz> Use of uninitialized value $t in substitution (s///) at Whois.pm line 288.
[23:36:06] *** Joins: KnoP (~KnoP@p57b21ac7.dip0.t-ipconnect.de)
[23:36:26] *** Joins: vrurg (~vrurg@45.74.95.181)
[23:39:55] <_73> jaggz: I dont know but it doesn't build for me either with cpanminus but I get a different error `Can't locate Whois.pm in @INC (you may need to install the Whois module)` http://dpaste.com/7K5AL4ZYJ
[23:39:57] <Paperbot> Link title(s): [ dpaste: . ]
[23:41:51] <jaggz> _73, thanks for testing.  isn't that a weird error you got?  hmm
[23:42:54] <Grinnz> jaggz: that's a warning, the error is "No match for hudes.org at test.pl line 12."
[23:43:01] <Grinnz> it seems that dist's custom test script is broken
[23:43:16] <Grinnz> considering it's from 1999, that's not surprising
[23:43:36] <Grinnz> and _73's error is also because the test script is broken and relies on . in @INC
[23:44:09] <Grinnz> the test script isn't even TAP so it's not going to work
[23:44:42] <Grinnz> you could try installing with --notest so it doesn't try to run that abomination
[23:45:00] <jaggz> installed
[23:45:02] <jaggz> thanks :)
[23:45:06] <jaggz> not est
[23:45:16] <jaggz> maybe it doesn't install because i'm in pacific time
[23:45:21] <jaggz> anyway, thanks :)
[23:46:15] <Grinnz> i also lol'd at "Entering Net-Whois-1.9     I'm not sure I like this"
[23:48:01] <gordonfish> _73: You can set PERL_USE_UNSAFE_INC=1 before building (or as PERL_USE_UNSAFE_INC=1 cpanm ... if you're using a unix-like command line) to deal with those pesky modules that still expect . in @INC.
[23:48:12] <jaggz> thanks.. heh.  I actually said "(Ignore the "I'm not sure I like this comment")" the first time I asked in here, but my irc bouncer was disconnected from irc at the time :)
[23:48:20] *** Quits: gizmomathboy (~gizmomath@206.127.53.107) (Quit: Leaving)
[23:48:45] <jaggz> (I didn't want anyone looking through cpanm code trying to find that line)
[23:49:21] <_73> gordonfish: ill add that to my checklist for next time something doesn't install
[23:50:06] *** Quits: dansan (~daniel@75.81.148.51) (Remote host closed the connection)
[23:50:51] <gordonfish> _73: If you're building manually/using --look, you can do PERL_USE_UNSAFE_INC=1 perl <Makefile|Build>.PL
[23:58:32] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[23:58:32] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Client Quit)
