[00:02:08] *** Quits: auxym (~francis@modemcable027.118-81-70.mc.videotron.ca) (Ping timeout: 258 seconds)
[01:04:57] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[01:15:39] <FromDiscord> <top level await> how do I use _ in a type?
[01:15:43] <FromDiscord> <top level await> I have a thing called `_id`
[01:15:53] <FromDiscord> <top level await> sent a code paste, see https://paste.rs/XWY
[01:16:08] <FromDiscord> <top level await> (edit) "https://play.nim-lang.org/#ix=3vp6" => "https://paste.rs/iNS"
[01:17:12] <FromDiscord> <Elegantbeef> Nim identifiers cannot start with `_`, even if stropped
[01:18:31] <FromDiscord> <top level await> But i'm pulling this from a websocket
[01:18:38] <FromDiscord> <top level await> so I MUST use `_id`
[01:19:35] <FromDiscord> <Elegantbeef> It looks like you're using json?
[01:19:44] <federico3> how to set the path for nimdoc.css for "nim doc"?
[01:21:37] <FromDiscord> <Elegantbeef> If you're using json you can make your own json hooks for the object so then you can write/read id as `_id`
[01:21:44] <FromDiscord> <top level await> In reply to @Elegantbeef "It looks like you're": I am!
[01:21:53] <FromDiscord> <top level await> In reply to @Elegantbeef "If you're using json": Hmm, how?
[01:21:58] <FromDiscord> <Elegantbeef> Atleast i think that's what https://nim-lang.org/docs/jsonutils.html enables
[01:22:42] <FromDiscord> <Elegantbeef> Though i do swear there was a json library that allowed giving a string name to the fields
[01:24:36] <FromDiscord> <Elegantbeef> Ah this one seems to support it https://github.com/status-im/nim-json-serialization
[01:24:39] <nrds> <12R2D299> 4GitHub: 7"Flexible JSON serialization not relying on run-time type information"
[01:25:19] <FromDiscord> <top level await> i was playing stardust
[01:25:20] <FromDiscord> <top level await> sorry
[01:25:45] <FromDiscord> <top level await> In reply to @Elegantbeef "Ah this one seems": hmm
[01:25:48] <FromDiscord> <top level await> doesn't seem tow ork
[01:25:57] <FromDiscord> <top level await> no place where it's changed
[01:26:02] <FromDiscord> <top level await> where like i can change it to multiple words
[01:26:05] <FromDiscord> <top level await> it's only one rename?
[01:32:59] <FromDiscord> <Elegantbeef> What?
[01:36:05] <FromDiscord> <top level await> In reply to @Elegantbeef "What?": i can't rename it to multiple words\
[01:36:09] <FromDiscord> <top level await> if i rename it it'll change
[01:36:11] <FromDiscord> <top level await> won it?
[01:37:34] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3vpc
[01:46:26] <FromDiscord> <top level await> elegantbeef
[01:46:29] <FromDiscord> <top level await> that has a issue
[01:46:30] <FromDiscord> <top level await> the libary
[01:46:31] <FromDiscord> <Elegantbeef> Me!
[01:46:38] <FromDiscord> <top level await> it uses `chronos`
[01:46:44] <FromDiscord> <top level await> which has its own `asyncloop`
[01:46:50] <FromDiscord> <top level await> and i dont need that
[01:46:54] *** Joins: xet7 (~xet7@user/xet7)
[01:46:56] <FromDiscord> <top level await> cause i need `asycdispatch.async`
[01:47:00] <FromDiscord> <top level await> and now i have aproblem
[01:47:12] <FromDiscord> <top level await> sent a code paste, see https://play.nim-lang.org/#ix=3vpe
[01:47:18] <FromDiscord> <top level await> (edit) "https://play.nim-lang.org/#ix=3vpe" => "https://play.nim-lang.org/#ix=3vpf"
[01:47:19] <FromDiscord> <top level await> `ambiguous call; both asyncloop.async(prc: untyped) [declared in C:\Users\luke\.nimble\pkgs\chronos-3.0.6\chronos\asyncmacro2.nim(391, 7)] and asyncdispatch.async(prc: untyped) [declared in D:\tools\Nim\lib\pure\asyncmacro.nim(289, 7)] match for: ()`
[01:47:50] <FromDiscord> <Elegantbeef> Well then time to use json hooks
[01:52:19] <FromDiscord> <top level await> how do I access a user object's ID?
[01:52:32] <FromDiscord> <top level await> (edit) "ID?" => "ELEMENT?"
[01:52:37] <FromDiscord> <top level await> (edit) "user object's ELEMENT?" => "objets element?"
[01:52:41] <FromDiscord> <top level await> (edit) "objets" => "objects"
[01:55:38] *** Quits: Vladar (~Vladar@46.162.2.53) (Remote host closed the connection)
[01:58:30] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[02:00:43] <FromDiscord> <Elegantbeef> Here is an impl https://play.nim-lang.org/#ix=3vpn
[02:03:25] <FromDiscord> <top level await> elegantbeef
[02:03:26] <FromDiscord> <top level await> imsuing it
[02:03:27] <FromDiscord> <top level await> here
[02:03:30] <FromDiscord> <top level await> `        user = to(packet{"u"}, User)`
[02:03:35] <FromDiscord> <top level await> to convert a packet to a user
[02:03:56] <FromDiscord> <top level await> `        users = to(packet{"ppl"}, seq[User])` im also using it here
[02:04:03] <FromDiscord> <top level await> to convert players to a sequence
[02:13:59] <FromDiscord> <Alea> @dom96 it was a tough test but I did it! And the httpclient / json modules worked great!
[02:15:17] <FromDiscord> <Alea> Using a language I barely know for an interview was a ballsy move, but it payed off well ðŸ˜‚
[02:39:23] *** Quits: max22- (~maxime@2a01cb088335980057b47d4a6ae0872c.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[02:40:42] *** Joins: max22- (~maxime@2a01cb08833598008165fcf1bfcd9627.ipv6.abo.wanadoo.fr)
[02:41:17] *** Joins: auxym (~francis@modemcable027.118-81-70.mc.videotron.ca)
[02:46:16] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Quit: Ping timeout (120 seconds))
[02:47:15] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[02:48:51] <FromDiscord> <ynfle (ynfle)> Is there a way to get at value of a tuple with a string?
[02:49:50] <FromDiscord> <ynfle (ynfle)> Like `tupleVar["tupleKeyName"]`
[02:52:05] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[02:52:06] *** Quits: auxym (~francis@modemcable027.118-81-70.mc.videotron.ca) (Ping timeout: 272 seconds)
[02:52:42] <FromDiscord> <undersquire> afaik u can only do that with tables
[02:53:13] *** Joins: flynn (~mcbloch@user/flynn)
[02:54:10] *** Joins: auxym (~francis@modemcable027.118-81-70.mc.videotron.ca)
[02:54:48] <FromDiscord> <Elegantbeef> I mean there is a way but if you want to do it with a runtime string there isnt really without an object variant to hold onto it
[02:55:05] <FromDiscord> <ynfle (ynfle)> I'm happy to do untyped
[02:58:51] <FromDiscord> <âƒŸâƒŸ> how to make a un named function
[02:59:52] <FromDiscord> <Elegantbeef> `let a = proc() = echo "here"`
[03:00:13] <FromDiscord> <Elegantbeef> A macro might be the only way to do this ynfle
[03:00:50] <FromDiscord> <j-james> What is the difference between `pointer` and `ptr`?
[03:03:42] <FromDiscord> <Elegantbeef> 0 type information stored on `pointer`
[03:06:43] <FromDiscord> <ynfle (ynfle)> sent a code paste, see https://play.nim-lang.org/#ix=3vpu
[03:06:58] <FromDiscord> <ynfle (ynfle)> But I get Error\: expression 't.a' is of type 'int' and has to be used (or discarded)
[03:07:04] <FromDiscord> <ynfle (ynfle)> `Error: expression 't.a' is of type 'int' and has to be used (or discarded)`
[03:07:17] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3vpv
[03:07:58] <FromDiscord> <ynfle (ynfle)> Didn't know it needs a return type
[03:08:00] <FromDiscord> <ynfle (ynfle)> Why?
[03:08:09] <FromDiscord> <ynfle (ynfle)> Why wouldn't it just return an error?
[03:08:31] <FromDiscord> <Elegantbeef> You're calling a template and returning a value internally, so to use that value it needs to know the called item returns
[03:08:40] <FromDiscord> <Elegantbeef> Atleast that's what i reason
[03:09:31] *** Quits: auxym (~francis@modemcable027.118-81-70.mc.videotron.ca) (Ping timeout: 250 seconds)
[03:10:38] <FromDiscord> <ynfle (ynfle)> A more helpful error message would be helpful
[03:10:52] <FromDiscord> <Elegantbeef> Well go add it
[03:11:03] <FromDiscord> <ynfle (ynfle)> Where?
[03:11:32] <FromDiscord> <ynfle (ynfle)> ie, where is the error emitted?
[03:12:38] <FromDiscord> <Elegantbeef> I dont know
[03:13:22] <FromDiscord> <ynfle (ynfle)> How would I figure that out?
[03:13:38] <FromDiscord> <Elegantbeef> Using a nim compiler with stacktraces
[03:13:47] <FromDiscord> <Elegantbeef> so `./koch temp` from the cloned repo
[03:13:57] <FromDiscord> <Elegantbeef> `/compiler/semstmts.nim(151)` is the location of the error
[03:14:06] <FromDiscord> <Elegantbeef> Which is checking that the `t.key` is unhandled
[03:14:25] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3vpw
[03:16:58] <FromDiscord> <ynfle (ynfle)> Thanks I'll take a look
[03:17:33] <FromDiscord> <top level await> is there a `if OR` in nim?
[03:17:44] <FromDiscord> <Elegantbeef> what do you mean an `ifor`
[03:18:13] <FromDiscord> <top level await> like in javascript
[03:18:32] <FromDiscord> <top level await> if("lol" == "hi" && "bruh" == "bruh") // won't be ran
[03:18:39] <FromDiscord> <Elegantbeef> you mean boolean or?
[03:18:41] <FromDiscord> <top level await> yes
[03:18:54] <FromDiscord> <Elegantbeef> Would be a very annoying language without boolean or
[03:19:00] <FromDiscord> <top level await> Yes.
[03:19:07] <FromDiscord> <Elegantbeef> `or` and `and` are the boolean operators
[03:19:13] <FromDiscord> <top level await> Ah..
[03:19:14] <FromDiscord> <top level await> Python style.
[03:19:24] <FromDiscord> <top level await> Not python though (REMEMBER THAT)
[03:20:06] <FromDiscord> <j-james> Yup
[03:20:49] <FromDiscord> <j-james> `mod` and `div` instead of `%` and `//` as well
[03:20:56] <FromDiscord> <Elegantbeef> ynfle i dont think the error message can be changed without changing the discard check logic as it doesnt have the the node calling it
[03:21:51] <FromDiscord> <Elegantbeef> So you cannot check if it's a template to say "Undiscardable value in templateName, if wanting to return a value annotated with a return type"
[03:24:04] <FromDiscord> <ynfle (ynfle)> OH ok thanks
[03:25:15] *** Quits: nrds (~NimBot@ns501209.ip-142-4-210.net) (Remote host closed the connection)
[03:26:46] *** Joins: nrds (~NimBot@ns501209.ip-142-4-210.net)
[03:30:26] *** Quits: max22- (~maxime@2a01cb08833598008165fcf1bfcd9627.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:36:00] *** Joins: xet7 (~xet7@user/xet7)
[03:36:12] *** Joins: max22- (~maxime@2a01cb0883359800396b458657bf3bb7.ipv6.abo.wanadoo.fr)
[03:41:10] <FromDiscord> <top level await> is there a nim eval()?
[03:42:28] <FromDiscord> <top level await> parseStmt
[03:42:45] <FromDiscord> <j-james> Not in the way Python has one
[03:42:53] <FromDiscord> <j-james> That's probably your best bet
[03:43:45] <FromDiscord> <top level await> yup
[03:43:47] <FromDiscord> <top level await> uh
[03:43:52] <FromDiscord> <top level await> is threre a .shift()
[03:43:55] <FromDiscord> <top level await> like array.shift()
[03:46:02] *** Joins: auxym (~francis@modemcable027.118-81-70.mc.videotron.ca)
[03:46:27] <FromDiscord> <top level await> shift is pretty much
[03:46:35] <FromDiscord> <top level await> dropping the first element and then echoing the first element
[03:49:33] <FromDiscord> <j-james> `pop`, maybe?
[03:49:40] <FromDiscord> <j-james> No you want the opposite
[03:50:05] *** Quits: max22- (~maxime@2a01cb0883359800396b458657bf3bb7.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:50:29] <FromDiscord> <top level await> yes
[03:50:39] <FromDiscord> <top level await> i can get the first element by [0]
[03:50:41] <FromDiscord> <top level await> removing it though..
[03:53:44] <FromDiscord> <top level await> figured it out
[03:53:46] <FromDiscord> <top level await> .remove(0)
[03:53:55] <FromDiscord> <top level await> .delete(0)
[04:23:04] <FromDiscord> <@bracketmaster-5a708063d73408ce4> in Nim, are string slices passed by reference to functions?
[04:28:27] *** Quits: auxym (~francis@modemcable027.118-81-70.mc.videotron.ca) (Ping timeout: 245 seconds)
[04:52:03] *** Joins: auxym (~francis@modemcable027.118-81-70.mc.videotron.ca)
[05:02:40] *** Quits: auxym (~francis@modemcable027.118-81-70.mc.videotron.ca) (Ping timeout: 258 seconds)
[05:07:28] <FromDiscord> <Elegantbeef> Afaik no, to pass as reference use `toOpenArray`
[05:29:57] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[05:31:05] *** Joins: flynn (~mcbloch@user/flynn)
[05:51:15] *** Joins: auxym (~francis@modemcable027.118-81-70.mc.videotron.ca)
[06:04:04] <FromDiscord> <@bracketmaster-5a708063d73408ce4> so do s.toOpenArray?
[06:04:22] <FromDiscord> <Elegantbeef> well openArray is a non copy afaik
[06:04:23] <FromDiscord> <@bracketmaster-5a708063d73408ce4> you mean to tell me strings are usually copied?
[06:04:33] <FromDiscord> <Elegantbeef> Well slicing is a copying operation
[06:04:44] <FromDiscord> <Elegantbeef> Atleast i think atleast
[06:05:18] <FromDiscord> <@bracketmaster-5a708063d73408ce4> Is there a way to tell?
[06:06:29] *** Quits: rockcavera (~rc@user/rockcavera) (Read error: Connection reset by peer)
[06:07:17] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3vq5
[06:07:36] <FromDiscord> <Elegantbeef> If the address of a character is the same it means it borrowed memory instead of copying of course
[06:08:01] *** Joins: rockcavera (~rc@192.12.115.200)
[06:08:01] *** Quits: rockcavera (~rc@192.12.115.200) (Changing host)
[06:08:01] *** Joins: rockcavera (~rc@user/rockcavera)
[06:09:42] *** Quits: auxym (~francis@modemcable027.118-81-70.mc.videotron.ca) (Ping timeout: 272 seconds)
[06:10:06] <FromDiscord> <Elegantbeef> Due to  a normal string slice returning a mutable string, it's a copy, but openArray is a borrow
[06:18:28] <FromDiscord> <@bracketmaster-5a708063d73408ce4> what if the original string is const?
[06:24:35] <FromDiscord> <Elegantbeef> Same thing
[06:24:52] <FromDiscord> <Elegantbeef> You use `toOpenArray` for borrowed slices
[06:26:29] <FromDiscord> <@bracketmaster-5a708063d73408ce4> well a const string would be immutable, so I'm imagining its slices should be too?
[06:26:49] <FromDiscord> <@bracketmaster-5a708063d73408ce4> Anyways, this doesn't seem reasonable performance wise. Slices should be default immutable
[06:26:56] <FromDiscord> <Elegantbeef> The string slice is still returning a string
[06:27:40] <FromDiscord> <Elegantbeef> There is much in stable nim to do borrowed memory safely
[06:28:05] <FromDiscord> <@bracketmaster-5a708063d73408ce4> but slices of strings aren't borrowed, they're copied
[06:28:35] <FromDiscord> <Elegantbeef> Refer back to my last statement for why
[06:28:55] <FromDiscord> <Elegantbeef> If you want to have borrwed slices use openarray
[06:29:08] <FromDiscord> <@bracketmaster-5a708063d73408ce4> well - strings should be immutable by default
[06:32:35] <FromDiscord> <Elegantbeef> I think Araq is of that thought aswell, but they're presently mutable and copied, so you work with them as such
[06:33:05] <FromDiscord> <Elegantbeef> You can always make a template for a ergonomic slice and make life easier
[06:33:16] <FromDiscord> <@bracketmaster-5a708063d73408ce4> I wrote a lexer that does passes around slices of a file and now I've got to rewrite it
[06:33:27] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3vqf
[06:33:32] <FromDiscord> <@bracketmaster-5a708063d73408ce4> cuz passing slices copies almost the entire file file every time
[06:34:15] <FromDiscord> <@bracketmaster-5a708063d73408ce4> I'm curious to hear Araq's reasoning about default mutable string
[06:34:27] <FromDiscord> <@bracketmaster-5a708063d73408ce4> I'm not seeing the advantages here
[06:35:46] <FromDiscord> <@bracketmaster-5a708063d73408ce4> thanks for that example, that's a good place to start
[06:37:20] <FromDiscord> <Elegantbeef> The advantages are they're much more efficient to write to
[06:38:17] <FromDiscord> <Elegantbeef> You can do concatenation cheaper due to the string already having allocated
[06:40:48] <FromDiscord> <Elegantbeef> Worth noting you can do immutable references assuming they arent slices
[06:41:05] <FromDiscord> <InventorMatt> if nim had another type for immutable strings then we'd be able have an option for both
[06:41:40] <FromDiscord> <Elegantbeef> Well time for someone to make a package \:D
[07:10:53] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:19:57] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[07:21:57] <FromDiscord> <undersquire> shouldnt a const string be an immutable string?
[07:29:20] <nrds> <06Prestige99> Yes
[07:32:27] <FromDiscord> <undersquire> what about let?
[07:35:34] <FromDiscord> <Elegantbeef> Well they're immutable but generally speaking when people talk about immutable strings they're talking about ones that dont mutate the data at the pointer instead change where the pointer points
[07:49:57] <FromDiscord> <undersquire> yes thats what I mean
[07:50:36] <FromDiscord> <undersquire> are `const` and `let` strings fully immutable? (aka they dont mutate, pointer changes)
[07:52:27] <FromDiscord> <Elegantbeef> `const` is but `let` is only a compiler protection you can easily get around it
[07:52:32] <FromDiscord> <undersquire> ah ok
[07:53:04] <FromDiscord> <undersquire> also I just noticed you can compile nim programs without linking libc lol
[07:53:45] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3vqt
[07:54:14] <FromDiscord> <Elegantbeef> Useless cast is useless
[07:54:32] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3vqu
[07:57:05] <FromDiscord> <Elegantbeef> You cannot do the same with const since const is actually constant \:D
[07:59:59] <FromDiscord> <@bracketmaster-5a708063d73408ce4> i'm not liking this
[08:00:25] <FromDiscord> <Elegantbeef> Liking what?
[08:01:06] <FromDiscord> <@bracketmaster-5a708063d73408ce4> that a can be mutated that way
[08:01:31] <FromDiscord> <Elegantbeef> Well it's a systems language that values the programmer being right
[08:02:49] <FromDiscord> <undersquire> In reply to @@bracketmaster-5a708063d73408ce4 "that a can be": just dont mutate them then ðŸ˜‰
[08:03:46] <FromDiscord> <@bracketmaster-5a708063d73408ce4> I'm not - I'm slicing...
[08:03:54] <FromDiscord> <@bracketmaster-5a708063d73408ce4> anyways - no circular arguments needed
[08:03:57] <FromDiscord> <@bracketmaster-5a708063d73408ce4> I know what I have to do
[08:04:03] <FromDiscord> <Elegantbeef> Is the code open?
[08:04:20] <FromDiscord> <@bracketmaster-5a708063d73408ce4> as in open source?
[08:04:20] <FromDiscord> <undersquire> https://tenor.com/view/kyloren-sad-star-wars-i-know-what-i-have-to-do-adam-driver-gif-11159545
[08:04:25] <FromDiscord> <Elegantbeef> Yes
[08:04:37] <FromDiscord> <@bracketmaster-5a708063d73408ce4> yes - one moment
[08:04:54] <FromDiscord> <@bracketmaster-5a708063d73408ce4> need to clean up and then push
[08:11:26] <FromDiscord> <@bracketmaster-5a708063d73408ce4> https://gitlab.com/BracketMaster/rtlilcompiler/-/tree/master/
[08:12:39] <FromDiscord> <@bracketmaster-5a708063d73408ce4> I believe here is the first place slicing gets called\: https://gitlab.com/BracketMaster/rtlilcompiler/-/blob/master/src/rtlilCompiler.nim#L50
[08:13:18] <FromDiscord> <@bracketmaster-5a708063d73408ce4> slicing also happens regularly in each automata\: https://gitlab.com/BracketMaster/rtlilcompiler/-/blob/master/src/rtlilCompiler/lexer/automata/attribute_automaton.nim#L18
[08:13:31] <FromDiscord> <@bracketmaster-5a708063d73408ce4> I mean really, its slicing galore
[08:13:35] <FromDiscord> <@bracketmaster-5a708063d73408ce4> But no modifications
[08:13:35] <FromDiscord> <Elegantbeef> That's not slicing
[08:14:07] <FromDiscord> <Elegantbeef> Indexing is a different operation to slicing \:D
[08:14:17] <FromDiscord> <@bracketmaster-5a708063d73408ce4> ok - well the first one is definitely slicing
[08:14:22] <FromDiscord> <Elegantbeef> yea
[08:14:50] <FromDiscord> <Elegantbeef> the alternative it to pass the string in as a parameter and pass start,end
[08:15:36] <FromDiscord> <Elegantbeef> Though the open array works as well assuming you dont use many things from strutils
[08:17:54] <FromDiscord> <@bracketmaster-5a708063d73408ce4> presumably, indexing doesn't copy - although, even if it did, indexing a character is pretty inexpensive
[08:18:02] <FromDiscord> <undersquire> what is rtlil?
[08:18:12] <FromDiscord> <@bracketmaster-5a708063d73408ce4> indexing a character -\> copying a character
[08:18:34] <FromDiscord> <Elegantbeef> Well there is no heap needed for copying a character so it's fine
[08:18:35] <FromDiscord> <@bracketmaster-5a708063d73408ce4> Register Transfer Logic Intermediate Language
[08:18:41] <FromDiscord> <undersquire> ah
[08:19:12] <FromDiscord> <@bracketmaster-5a708063d73408ce4> Its a nearly semantically unambiguous description format for digital logic circuits that the the open source circuit synthesizer yosys uses
[08:20:01] <FromDiscord> <undersquire> yeah
[08:22:20] <FromDiscord> <@bracketmaster-5a708063d73408ce4> @\_discord\_372553949733060620\:t2bot.io , are you familiar with digital logic at all?
[08:24:40] <FromDiscord> <@bracketmaster-5a708063d73408ce4> yeah, @elegantbeef\:matrix.org , just timed the time spent lexing the first 5 tokens and got 200us, could be better
[08:24:46] <FromDiscord> <@bracketmaster-5a708063d73408ce4> will see how openarray does
[08:25:04] <FromDiscord> <@bracketmaster-5a708063d73408ce4> I did d\:release
[08:27:32] <FromDiscord> <@bracketmaster-5a708063d73408ce4> I've often heard, build first, optimize last... But I've often discovered that making code go faster while maintaining elegance requires massive restructures. So I've adopted, build a bit of the initial infrastructure, then see if things are too slow and consider optimizing... Especially with nim.
[08:27:57] <FromDiscord> <Elegantbeef> Suggest using a typeclass of `type StringLike = string or openArray[char]`
[08:29:26] <FromDiscord> <@bracketmaster-5a708063d73408ce4> ok
[08:29:32] <FromDiscord> <@bracketmaster-5a708063d73408ce4> well going to bed now, will try tomorrow
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[09:01:53] <FromDiscord> <brainproxy> sent a long message, see http://ix.io/3vqG
[09:02:12] <FromDiscord> <brainproxy> (edit) "http://ix.io/3vqG" => "http://ix.io/3vqH"
[09:07:11] *** Joins: pyautogui (~pyautogui@cpe-76-176-12-47.san.res.rr.com)
[09:16:50] <pyautogui> Is there a really quick Nim implementation of the Chudnovsky algorithm for finding pi? 
[09:17:51] *** Quits: pyautogui (~pyautogui@cpe-76-176-12-47.san.res.rr.com) (Quit: Connection closed)
[09:18:06] *** Joins: pyautogui (~pyautogui@cpe-76-176-12-47.san.res.rr.com)
[09:21:05] <pyautogui> The rosetta-code version is a bit slow.
[09:28:50] *** Quits: ozzz (~oz@46.49.41.80) (*.net *.split)
[09:28:51] *** Quits: Jjp137 (~Jjp137@2603-8000-2a01-3406-92fb-a6ff-fee2-6861.res6.spectrum.com) (*.net *.split)
[09:28:51] *** Quits: Mister_Magister (~Mister_Ma@user/mister-magister/x-2636733) (*.net *.split)
[09:28:51] *** Quits: emery (~quassel@2a03:3b40:fe:ab::1) (*.net *.split)
[09:28:51] *** Quits: oprypin (~irc@pryp.in) (*.net *.split)
[09:29:07] *** Joins: ozzz (~oz@46.49.41.80)
[09:29:07] *** Joins: Jjp137 (~Jjp137@2603-8000-2a01-3406-92fb-a6ff-fee2-6861.res6.spectrum.com)
[09:29:07] *** Joins: Mister_Magister (~Mister_Ma@user/mister-magister/x-2636733)
[09:29:07] *** Joins: emery (~quassel@2a03:3b40:fe:ab::1)
[09:29:07] *** Joins: oprypin (~irc@pryp.in)
[09:31:02] *** Joins: mst_ (~matthewt@vps-6c71e929.vps.ovh.net)
[09:31:04] *** Quits: mst (~matthewt@vps-6c71e929.vps.ovh.net) (*.net *.split)
[09:31:04] *** Quits: def- (~def-@static.238.114.9.176.clients.your-server.de) (*.net *.split)
[09:31:06] *** Joins: def-- (~def-@static.238.114.9.176.clients.your-server.de)
[09:31:29] *** def-- is now known as def-
[09:32:34] *** Quits: nixfreak_nim[m] (~reversem3@2001:470:69fc:105::33d1) (Ping timeout: 240 seconds)
[09:32:35] *** Quits: Helios (~dwaglemat@2001:470:69fc:105::5f8) (Ping timeout: 250 seconds)
[09:33:04] *** Quits: happycorsair[m] (~happycors@2001:470:69fc:105::205) (Ping timeout: 276 seconds)
[09:34:50] *** Quits: greyrat_ (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[09:36:39] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[09:38:18] *** Server sets mode: +nt 
[09:49:53] *** Joins: Ekho (~Ekho@user/ekho)
[09:51:42] *** Joins: pyautogui (~pyautogui@cpe-76-176-12-47.san.res.rr.com)
[09:57:27] *** Joins: Vladar (~Vladar@46.162.2.53)
[10:09:58] <FromDiscord> <Rika> the main bottleneck of the rosetta code version is the bigint library
[10:11:24] <pyautogui> Is there a better bigint lib then?
[10:15:29] <FromDiscord> <Rika> https://github.com/ykoba1994/bignumber.nim or https://github.com/SciNim/megalo maybe?
[10:15:32] <nrds> <04prestigebot99> 4GitHub: 7"An implementation of arbitrary precision integers and floating point numbers for Nim."
[10:15:57] <pyautogui> Thanks
[10:23:24] *** Joins: happycorsair[m] (~happycors@2001:470:69fc:105::205)
[10:32:37] *** Joins: Helios (~dwaglemat@2001:470:69fc:105::5f8)
[10:33:21] <FromDiscord> <arnetheduck> In reply to @top level await "it uses `chronos`": this is an optional dependency - the serialization library doesn't require chronos but can integrate with it
[11:02:21] *** Joins: nixfreak_nim[m] (~reversem3@2001:470:69fc:105::33d1)
[11:19:19] *** Joins: max22- (~maxime@2a01cb0883359800a44fc8906143ec33.ipv6.abo.wanadoo.fr)
[11:23:09] *** Joins: PMunch (~PMunch@vpn.dualog.com)
[11:24:04] <PMunch> Good morning everyone :)
[11:24:29] <max22-> 'morning PMunch
[11:24:55] <FromDiscord> <Elegantbeef> Hello pmunch
[11:26:05] <PMunch> Just got back from vacation, anything big happened while I was gone?
[11:26:40] <FromDiscord> <Elegantbeef> How long was your vacation like 3 months? ðŸ˜€
[11:27:26] <PMunch> Haha, more like three weeks
[11:27:30] <pyautogui> Reply to self: https://github.com/FedeOmoto/bignum is very fast is great.
[11:27:33] <nrds> <04prestigebot99> 4GitHub: 7"GMP wrapper for the Nim language"
[11:27:58] <FromDiscord> <Rika> In reply to @pyautogui "Reply to self: https://github.com/FedeOmoto/bignum": Does not work
[11:27:59] <FromDiscord> <Rika> Old
[11:28:04] <FromDiscord> <Rika> Use the ones I sent
[11:28:12] <pyautogui> Just used it with devel
[11:35:44] <FromDiscord> <Elegantbeef> Well overridable enums got merged into devel
[11:36:02] <FromDiscord> <Elegantbeef> So that's cool, nothing big though
[11:48:16] *** Quits: pyautogui (~pyautogui@cpe-76-176-12-47.san.res.rr.com) (Quit: Connection closed)
[11:53:08] <PMunch> Overridable enums?
[11:55:12] <FromDiscord> <Elegantbeef> https://github.com/nim-lang/Nim/blob/be39ab79902f0cf876be59bd84d050431e68d4d7/tests/enum/toverloadable_enums.nim
[11:55:36] <FromDiscord> <Elegantbeef> No longer need to specify where an enum comes from if it's not ambiguous and there is overlap
[11:56:13] <PMunch> Ooh nice
[11:56:17] <PMunch> I've been wanting that
[11:57:33] <PMunch> Still miss pure enums though..
[11:59:13] <FromDiscord> <Elegantbeef> What's wrong with nim's pure?
[12:00:30] *** Joins: pro (~pro@user/pro)
[12:00:43] <PMunch> They got removed
[12:01:55] *** Quits: pro (~pro@user/pro) (Client Quit)
[12:01:59] <FromDiscord> <Elegantbeef> they did?
[12:02:35] <PMunch> Yeah, ages ago :P
[12:03:25] <FromDiscord> <Elegantbeef> how did they differ from the pure pragma?
[12:04:49] <FromDiscord> <Rika> the pure pragma started to do nothing
[12:05:25] <FromDiscord> <Elegantbeef> Well it's needed for overlap
[12:05:58] <PMunch> Yeah it was the pure pragma, which currently doesn't do anything afaik
[12:06:29] <PMunch> It used to mean that you had to fully qualify access to them, so you could use short names that would otherwise be susceptible to overlap with other things
[12:07:31] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3vrf it does something, enables overlap
[12:07:31] <FromDiscord> <Elegantbeef> The way pure enums work now is you dont have to fully qualify them unless there is overlap
[12:08:24] <PMunch> Ah true, they still do something
[12:08:46] <FromDiscord> <Elegantbeef> Mentioned in it here https://nim-lang.org/docs/manual.html#types-enumeration-types
[12:08:51] <PMunch> It used to be that you always had to qualify them, even without overlap
[12:10:24] <PMunch> "However, it is then not ordinal anymore, so it is not possible to use these enums as an index type for arrays."
[12:10:30] <FromDiscord> <Elegantbeef> Yea the pure pragma's docs wasnt updated along side that change apparently
[12:11:00] <PMunch> Maybe it should be mentioned that normal ordinal enums can be used as array indices before we mention that holey enums can't`
[12:18:38] <FromDiscord> <Rika> In reply to @pyautogui "Just used it with": i am also on devel and am unable to compile
[12:24:33] <PMunch> Hmm, are there anyone here who uses NimLSP on Windows and would like to help out with bugs on the Windows platform?
[12:37:32] <FromDiscord> <generic bsd user> i dont know if this is smg that is only to me . but i cant compile koch bcz it cant find std/private/gitutils
[12:37:57] <FromDiscord> <generic bsd user> it was the same in termux . but in ignored as i thought i was the problem of the environtment
[12:38:01] <FromDiscord> <generic bsd user> but now in widnwos too?
[12:38:20] <PMunch> That's an impressive typo for the word Windows :P
[12:38:48] <FromDiscord> <generic bsd user> i didnt do on purpose
[12:38:49] <PMunch> How are you trying to compile koch? And is this a stable version like 1.4.8 or just the latest devel branch?
[12:38:59] <FromDiscord> <generic bsd user> stable 1.4.8
[12:39:06] <FromDiscord> <generic bsd user> i cant get devel compiled
[12:39:14] <PMunch> Haha, I assumed it wasn't on purpose, just interesting to see it that jumbled up :P
[12:39:29] <FromDiscord> <generic bsd user> ohyes
[12:39:34] <PMunch> Well apparently you can't get this compiled either..
[12:39:54] <PMunch> But let's stick to 1.4.8, it should be possible to compile at least
[12:40:02] <PMunch> devel can sometimes be broken
[12:40:10] <FromDiscord> <generic bsd user> now . i can clone the 1.4.8 and compile it though
[12:40:17] <FromDiscord> <generic bsd user> and any other version
[12:40:26] <PMunch> Wait, so what's the issue then?
[12:40:27] <FromDiscord> <generic bsd user> but not devel
[12:41:45] <FromDiscord> <generic bsd user> sent a code paste, see https://play.nim-lang.org/#ix=3vro
[12:41:59] <PMunch> Oh, so it works fine with 1.4.8, but on devel you can't build koch?
[12:42:04] <FromDiscord> <generic bsd user> when  i do copy koch.nim to lib
[12:42:11] <FromDiscord> <generic bsd user> In reply to @PMunch "Oh, so it works": i am on 1.4.8
[12:42:17] <FromDiscord> <generic bsd user> i ahave not compiled devel
[12:42:31] <PMunch> Well, according to those hints you are on 1.4.6..
[12:42:45] <FromDiscord> <generic bsd user> wat
[12:42:46] <FromDiscord> <generic bsd user> ohyes
[12:42:51] <PMunch> "Hint: used config file 'C:\tools\Nim\nim-1.4.6\config\nim.cfg' [Conf]"
[12:42:51] <FromDiscord> <generic bsd user> ðŸ˜”
[12:42:55] <FromDiscord> <generic bsd user> choco is bad
[12:43:10] <PMunch> Oh yeah, I wouldn't install Nim via choco
[12:43:19] <FromDiscord> <generic bsd user> sorry and thonks
[12:43:33] <PMunch> Better grab choosenim if you don't need to build Nim from sources for some other reason
[12:43:57] <FromDiscord> <generic bsd user> i forgor choosenim as i was in phone all thses times
[12:44:12] <PMunch> But if you want to build from sources and it doesn't work you should try to build from the C sources instead of your current compiler. Those should always be able to build
[12:44:33] <FromDiscord> <generic bsd user> ðŸ‘Œ.
[13:35:31] *** Joins: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f)
[14:24:16] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f) (Read error: Connection reset by peer)
[14:59:06] *** Joins: auxym (~francis@modemcable027.118-81-70.mc.videotron.ca)
[15:09:52] *** Quits: auxym (~francis@modemcable027.118-81-70.mc.videotron.ca) (Ping timeout: 272 seconds)
[15:27:57] *** Quits: max22- (~maxime@2a01cb0883359800a44fc8906143ec33.ipv6.abo.wanadoo.fr) (Ping timeout: 276 seconds)
[15:34:19] *** Joins: auxym (~francis@modemcable027.118-81-70.mc.videotron.ca)
[15:57:55] *** Joins: rockcavera (~rc@192.12.113.214)
[15:57:56] *** Quits: rockcavera (~rc@192.12.113.214) (Changing host)
[15:57:56] *** Joins: rockcavera (~rc@user/rockcavera)
[16:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:40:52] <FromDiscord> <zetashift> In reply to @PMunch "Hmm, are there anyone": Ah just removed my dual boot setup haha, I can spin it up again, np
[16:41:01] <FromDiscord> <zetashift> (edit) "again, np" => "again"
[16:42:06] <PMunch> I mean I could test it in a VM or something, but I kinda wanted to find someone who actively uses it
[16:42:29] <FromDiscord> <top level await> Rat tye
[16:42:30] <FromDiscord> <top level await> (edit) "tye" => "type"
[16:42:35] <FromDiscord> <top level await> https://bigrat.monster
[16:43:46] <PMunch> What?
[16:49:12] <FromDiscord> <zetashift> In reply to @PMunch "I mean I could": ah I get that, lemme know if you need any help though, I don't use windows that much except gaming
[16:54:24] *** Quits: auxym (~francis@modemcable027.118-81-70.mc.videotron.ca) (Ping timeout: 276 seconds)
[16:58:19] *** mst_ is now known as mst
[17:08:39] <FromDiscord> <hiros> What's the best profiler for nim?
[17:10:41] <PMunch> Depends on what you want to profile
[17:11:26] <FromDiscord> <hiros> Examples?
[17:12:07] <PMunch> Do you want to profile for speed, memory leaks, something else?
[17:23:53] *** Joins: max22- (~maxime@2a01cb0883359800dd51ec6cdbc95b6f.ipv6.abo.wanadoo.fr)
[17:31:59] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Read error: Connection reset by peer)
[17:32:12] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[17:40:14] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[17:43:33] *** Joins: arkurious (~arkurious@user/arkurious)
[17:52:49] *** Joins: auxym (~francis@modemcable027.118-81-70.mc.videotron.ca)
[18:01:02] *** Quits: auxym (~francis@modemcable027.118-81-70.mc.videotron.ca) (Read error: No route to host)
[18:01:15] *** Joins: auxym (~francis@modemcable027.118-81-70.mc.videotron.ca)
[18:08:41] *** Quits: auxym (~francis@modemcable027.118-81-70.mc.videotron.ca) (Ping timeout: 248 seconds)
[18:17:42] <FromDiscord> <TurtleP> sent a code paste, see https://play.nim-lang.org/#ix=3vsD
[18:18:26] <FromDiscord> <enthus1ast> for truely stand alone linux binaries have a look at musl
[18:20:43] <FromDiscord> <enthus1ast> for example one of my projects uses this line to build cross linux builds\:â†µ`nim --gcc.exe:musl-gcc --gcc.linkerexe:musl-gcc --passL:-static --passL:-s c -d:release --os:linux --opt:speed ./src/nimPepper/pepperslave`the binary then evens runs on ancient redhats and suse
[18:21:01] <FromDiscord> <TurtleP> mmm
[18:21:08] <FromDiscord> <TurtleP> I'm compiling through `nimble`
[18:21:19] <FromDiscord> <enthus1ast> yes me too
[18:21:53] <FromDiscord> <enthus1ast> https://github.com/enthus1ast/nimPepper/blob/7e6c83e165390c47f90d9447bcef9a31215b8b21/nimPepper.nimble#L35
[18:22:12] <FromDiscord> <Mr Axilus> is there something similar to Go's interfaces in Nim?
[18:22:30] <FromDiscord> <TurtleP> I feel like I can just pass `--passL:-static` and that would solve it, no
[18:22:32] <FromDiscord> <TurtleP> (edit) "no" => "no?"
[18:22:37] <FromDiscord> <TurtleP> In reply to @mraxilus "is there something similar": there's iface
[18:22:46] <FromDiscord> <TurtleP> <https://github.com/yglukhov/iface>
[18:22:55] <FromDiscord> <enthus1ast> i dont know if the glib is then statically linked
[18:23:09] <FromDiscord> <Mr Axilus> In reply to @TurtleP "there's iface": awesome, thanks
[18:28:30] <FromDiscord> <TurtleP> In reply to @enthus1ast "i dont know if": adding that line it does build, just need to see if it works
[18:28:41] *** Quits: PMunch (~PMunch@vpn.dualog.com) (Quit: Leaving)
[18:29:07] <FromDiscord> <exelotl> I could've sworn there used to be an implementation of go-style interfaces that didn't require `ref` types
[18:29:48] <FromDiscord> <exelotl> but I haven't been able to find it
[18:30:37] <FromDiscord> <xflywind> In reply to @exelotl "I could've sworn there": I think you mean this one https://forum.nim-lang.org/t/2422
[18:33:04] <FromDiscord> <Mr Axilus> Wait, I noticed there's also "concepts" in exeprimental features, does that accomplish the same thing?
[18:34:30] <FromDiscord> <Rika> not on runtime
[18:35:33] <FromDiscord> <exelotl> In reply to @flywind "I think you mean": oh yeah that's the one, thanks
[18:35:47] <FromDiscord> <xflywind> np
[18:43:05] <FromDiscord> <Mr Axilus> In reply to @Rika "not on runtime": So what are concepts used for in that case?
[18:43:20] <FromDiscord> <Rika> "static duck typing"
[18:43:32] <FromDiscord> <Rika> or "compile time type constraints" i guess is another name
[18:47:59] <FromDiscord> <sheerluck> In reply to @mraxilus "So what are concepts": https://www.youtube.com/watch?v=iPVoCTgvi8M
[18:48:52] <FromDiscord> <TurtleP> one other thing: I do get errors if I remove use of `passC:"-fcommon"` and was wondering why, could someone point me in the right direction? The error is `multiple definition of tab_typesZctr_143'`
[18:48:58] <FromDiscord> <TurtleP> (edit) "tab_typesZctr_143'`" => "'tab_typesZctr_143'`"
[19:59:26] <FromDiscord> <@bracketmaster-5a708063d73408ce4> I would think this would work\:â†µlet a = "Hello world"â†µvar b = a.toOpenArray(3,5)â†µecho b.type
[20:03:49] <FromDiscord> <@bracketmaster-5a708063d73408ce4> Or let me ask this, can I convert a const string to an array?
[20:18:07] <nrds> <06Prestige99> maybe with sequtils you can do myString.items.toSeq() ?
[20:18:38] <nrds> <06Prestige99> !eval import sequtils; echo repr "foo".items.teSeq()
[20:18:42] <nrds> <04prestigebot99> /usercode/in.nim(1, 33) Error: undeclared field: 'items' for type system.string [declared in /playground/nim/lib/system.nim(34, 3)] 
[20:18:42] <NimBot> Compile failed: /usercode/in.nim(1, 33) Error: undeclared field: 'items' for type system.string [declared in /playground/nim/lib/system.nim(34, 3)] 
[20:18:51] <nrds> <06Prestige99> oh nvm
[20:19:13] <FromDiscord> <xflywind> In reply to @@bracketmaster-5a708063d73408ce4 "Or let me ask": no builtin method
[20:19:44] <FromDiscord> <xflywind> known issue: https://github.com/nim-lang/Nim/issues/14810
[20:20:15] <FromDiscord> <xflywind> use https://github.com/Clonkk/bytesequtils or nim-stew
[20:20:18] <nrds> <04prestigebot99> 4GitHub: 7"Some utility function to manipulate buffers as string or seq[byte]"
[20:20:55] <nrds> <06Prestige99> do they want a byte array or a char array?
[20:21:02] <FromDiscord> <xflywind> In reply to @flywind "use https://github.com/Clonkk/bytesequtils or nim-s": https://github.com/status-im/nim-stew/blob/master/stew/byteutils.nim
[20:21:05] <nrds> <04prestigebot99> 4GitHub: 7"Some utility function to manipulate buffers as string or seq[byte]"
[20:26:33] <FromDiscord> <@bracketmaster-5a708063d73408ce4> > > â†µ> > why do they want a byte array or a char array?â†µ> > because i need to slice stings without copying everytimeâ†µ>
[20:26:50] <FromDiscord> <@bracketmaster-5a708063d73408ce4> i'm writing a lexer which regularly slices from index to end of file
[20:34:15] <FromDiscord> <JonasL> Why do we have to specify the "sink" annotation and not make it the default like in rust?
[20:35:01] <FromDiscord> <JonasL> (edit) "default like in rust?" => "default?"
[20:36:14] <FromDiscord> <haxscramper> Because this would mean copying on call
[20:36:29] <FromDiscord> <haxscramper> Or rather it would mean this in more scenarios
[20:37:11] <FromDiscord> <haxscramper> Right now nim does not copy when passing arguments, but if you make it `sink` this might require copying data if it is used after the call
[20:37:38] <FromDiscord> <haxscramper> https://nim-lang.org/docs/destructors.html#rewrite-rules
[20:37:57] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3vtE
[20:39:23] <FromDiscord> <JonasL> Ok I see
[20:40:18] <FromDiscord> <JonasL> So nim takes a reference by default to avoid coping?
[20:40:34] *** Joins: auxym (~francis@modemcable027.118-81-70.mc.videotron.ca)
[20:48:09] *** Quits: auxym (~francis@modemcable027.118-81-70.mc.videotron.ca) (Ping timeout: 248 seconds)
[20:48:30] <FromDiscord> <dom96> In reply to @TurtleP "hey, so apparently when": you can either statically link glibs (or musl) or build on an older Ubuntu (that has an older glibc)
[20:48:49] <FromDiscord> <dom96> there is also another solution, that I cannot remember how to find right now ðŸ™‚
[20:48:51] <FromDiscord> <TurtleP> Yeah I got it to statically link
[20:48:59] <FromDiscord> <TurtleP> It works ðŸ™‚
[20:49:06] <FromDiscord> <enthus1ast> to musl or glibc?
[20:49:15] <FromDiscord> <TurtleP> glibc, I guess?
[20:49:24] <FromDiscord> <TurtleP> Whatever the default is
[20:52:05] <FromDiscord> <dom96> huh, didn't realise it's that easy to statically link glibc
[20:52:30] <FromDiscord> <enthus1ast> dont know there are dragons i guess
[20:52:52] <FromDiscord> <enthus1ast> maybe @TurtleP should look with strace if it still loads glibc
[21:05:28] <FromDiscord> <haxscramper> How does `from X import Y as Z` work exactly? I need to do `from fusion/matching import hasKind as fusionHasKind`, and it says `Error: identifier expected, but found 'hasKind as fusionHasKind'`
[21:07:10] <FromDiscord> <haxscramper> Alternatively, how do I `bindSym` specific proc from imported module
[21:07:20] <FromDiscord> <haxscramper> like `matching.hasKind`
[21:17:56] *** Quits: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se) (Ping timeout: 252 seconds)
[21:21:06] *** Joins: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se)
[21:33:20] <FromDiscord> <planetis> i think matching.hasKind is the way to go. at least i havent seen any other vaiable way.
[21:34:04] <FromDiscord> <haxscramper> No, that does not work `bindSym("matching.hasKind")` `Error: undeclared identifier: 'matching.hasKind'`
[21:34:40] <FromDiscord> <planetis> relevant is https://github.com/nim-lang/RFCs/issues/380
[21:35:05] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3vtP
[21:35:08] <FromDiscord> <planetis> oh no idea then
[21:35:22] <FromDiscord> <planetis> you usually do mixin not bind
[21:35:34] <FromDiscord> <haxscramper> But they are different?
[21:35:42] <FromDiscord> <haxscramper> And I need to bind hasKind to closed symbol
[21:35:55] <FromDiscord> <planetis> yes ofc bind is the default
[21:37:04] <FromDiscord> <haxscramper> You mean wrapper template does not have to do it? Right
[21:37:21] <FromDiscord> <haxscramper> I'm just still in the `quote do/newCall/bindSym` mode so I got confused for a second here
[21:37:42] <FromDiscord> <planetis> wait are you writing a macro? so bindSym is needed
[21:38:05] <FromDiscord> <haxscramper> I'm writing a macro that has to call the template that wraps around imported proc
[21:38:19] <FromDiscord> <haxscramper> In macro I do `bindSym("fusionHasKind")`
[21:38:32] <FromDiscord> <haxscramper> I just wanted to avoid this extra layer of glue around imports
[21:38:46] <FromDiscord> <planetis> yea havent thought about it but its the opposite than generics/templates
[21:58:37] *** Quits: nrds (~NimBot@ns501209.ip-142-4-210.net) (Remote host closed the connection)
[21:58:54] *** Joins: nrds (~NimBot@ns501209.ip-142-4-210.net)
[22:37:31] *** Joins: drewr (~drew@user/drewr)
[22:38:37] *** Joins: auxym (~francis@modemcable027.118-81-70.mc.videotron.ca)
[23:04:45] *** Quits: max22- (~maxime@2a01cb0883359800dd51ec6cdbc95b6f.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[23:05:32] <FromDiscord> <PsychoClay> should i flushFile after every time i write some data or is this very slow?
[23:06:27] *** Quits: supakeen (~user@python/site-packages/supakeen) (Remote host closed the connection)
[23:06:51] *** Joins: supakeen (~user@python/site-packages/supakeen)
[23:26:46] <FromDiscord> <leorize> you shouldn't, it's very slow
[23:30:17] *** Quits: auxym (~francis@modemcable027.118-81-70.mc.videotron.ca) (Ping timeout: 248 seconds)
[23:39:16] *** Joins: max22- (~maxime@2a01cb08833598003780bb4e32542ba3.ipv6.abo.wanadoo.fr)
[23:58:51] <FromDiscord> <TechnoRazor> I'm currently messing around with Nim's move semantics & `=destroy` to see how they work, and I'm a little confused by something.â†µI have a proc, `myProc(obj : sink MyType)`, which takes ownership of any objects passed to it. So how come, even though `myProc` takes ownership of an object, and `=destroy` is called on it, `=destroy` is called again for the original object when it goes out of scope?
