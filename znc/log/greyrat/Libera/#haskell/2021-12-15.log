[00:03:46] *** Joins: Erutuon (~Erutuon@user/erutuon)
[00:06:16] *** Quits: puke (~puke@user/puke) (Remote host closed the connection)
[00:06:31] *** Joins: puke (~puke@user/puke)
[00:08:45] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[00:09:02] *** Quits: thevishy (~Nishant@2405:201:f005:c007:d93e:9746:14f0:2f69) (Read error: Connection reset by peer)
[00:09:16] *** Joins: alx741 (~alx741@157.100.93.160)
[00:09:46] *** Joins: y04nn (~y04nn@92.223.89.196)
[00:09:50] *** Joins: thevishy (~Nishant@2405:201:f005:c007:49c7:f8b1:7727:93e)
[00:10:41] *** Quits: Athas (athas@2a01:7c8:aaac:1cf:fd6:8489:d8da:43d) (Quit: ZNC 1.8.2 - https://znc.in)
[00:10:44] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:10:50] *** Joins: Athas (athas@sigkill.dk)
[00:11:54] *** Quits: ft (~ft@shell.chaostreff-dortmund.de) (Quit: leaving)
[00:12:07] *** Joins: ft (~ft@shell.chaostreff-dortmund.de)
[00:14:41] *** Joins: gentauro (~gentauro@user/gentauro)
[00:15:07] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 252 seconds)
[00:18:02] *** Quits: Whatever009 (~fuzzypixe@ensi-libre-service-019.ensimag.fr) (Ping timeout: 240 seconds)
[00:18:17] *** Joins: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk)
[00:20:16] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[00:21:53] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[00:23:00] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[00:26:24] <energizer> (fmap (*3) (+100)) 1 gives 303. is there a function that i can replace fmap with to get 103?
[00:28:09] <EvanR> (+103)
[00:28:24] <EvanR> (+302)
[00:28:43] <merijn> (.)? :p
[00:28:49] <merijn> oh, wait, no
[00:28:53] <merijn> flip (.) :p
[00:28:54] <EvanR> (*303)
[00:32:13] <sprout> merijn: https://github.com/egel-lang/aoc-2021/blob/main/day14/task2.eg <- just adapt this? if it runs fast in egel it is certainly bound to run fast in haskell
[00:32:22] *** Quits: MoC (~moc@user/moc) (Quit: Konversation terminated!)
[00:32:41] *** Quits: _ht_ (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:33:03] <sprout> but I get the sentiment.  I don't look at spoilers,  fix a solution,  throw it over the hedge.  cannot be buggered to rewrite either
[00:34:07] *** Quits: andreas303 (andreas303@ip227.orange.bnc4free.com) (Ping timeout: 265 seconds)
[00:34:11] *** Quits: xacktm (xacktm@user/xacktm) (Ping timeout: 252 seconds)
[00:34:12] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[00:34:29] <sprout> happened to me yesterday,  some posted a really nice solution in haskell
[00:34:53] <EvanR> on some days you get your star and move on, on others you get nerd sniped
[00:35:31] <geekosaur> energizer: flip fmap
[00:35:34] <geekosaur> ?
[00:37:29] <energizer> not sure if that's what i mean. i'm reading a blog post that says "This gives us the intuition that fmap over functions is just composition." so i'm guessing there's some opposite of functor that has an opposite of fmap?
[00:38:13] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 250 seconds)
[00:38:23] *** Joins: alx741 (~alx741@157.100.93.160)
[00:39:14] <dibblego> @type (<&>)
[00:39:15] <lambdabot> Functor f => f a -> (a -> b) -> f b
[00:39:16] <energizer> the blog post in question https://blog.ssanj.net/posts/2018-03-05-functor-applicative-and-monad-instances-for-reader.html
[00:39:31] <EvanR> gotta love law of trichotomy using floats https://paste.tomsmeding.com/ZSsda7Zn
[00:39:39] <dibblego> @type contramap
[00:39:40] <lambdabot> Contravariant f => (a -> b) -> f b -> f a
[00:40:19] *** Joins: pfurla_ (~pfurla@172.58.160.35)
[00:40:31] <EvanR> I hate it when people say don't use == on floats xD
[00:41:11] *** Quits: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[00:43:01] *** Joins: MrNobody_0000000 (~MrNobody@user/mrnobody-0000000/x-9129771)
[00:43:02] *** Quits: pfurla (~pfurla@177.79.125.203) (Ping timeout: 240 seconds)
[00:43:29] *** Joins: prrxddq[m] (~prrxddqma@2001:470:69fc:105::1:4f72)
[00:43:33] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[00:44:08] *** Joins: kjak_ (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[00:44:09] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[00:44:17] *** Quits: kjak_ (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Client Quit)
[00:44:17] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Client Quit)
[00:44:38] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[00:47:20] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[00:51:25] *** Joins: acidjnk (~acidjnk@p200300d0c7271e736483cc3bf5018c54.dip0.t-ipconnect.de)
[00:53:01] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[00:53:23] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:f0cf:5664:8ee5:8e87) (Ping timeout: 250 seconds)
[00:56:49] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[00:57:35] <energizer> isn't it a bad idea to use == on floats?
[00:59:48] *** Joins: raghavgururajan (9fd51d1ea8@user/raghavgururajan)
[01:00:19] <dolio> Yeah.
[01:01:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[01:01:04] *** Joins: xacktm (xacktm@user/xacktm)
[01:03:15] <EvanR> lol
[01:03:28] *** Joins: yuyua32 (~yuyua32@wireless-student-pt3-247-143.lut.ac.uk)
[01:03:46] *** Quits: MrNobody_0000000 (~MrNobody@user/mrnobody-0000000/x-9129771) (Quit: MrNobody_0000000)
[01:04:24] <yuyua32> how do haskell functions resemble mathmetical functions? I was reading about Haskell and read that its good for abstract algebra/mathemeticians could someone explain this
[01:04:35] <EvanR> I'll just ship a game that says if x < y do this, x > y do that, that's all xD
[01:04:42] <EvanR> should work most of the time
[01:04:52] <janus> EvanR: just write that snippet with "case comparing a b of` instead, then the compiler will make sure you won't have to write the 'otherwise' case ;)
[01:05:01] <EvanR> lol
[01:05:17] <EvanR> wth happens when you compare ...
[01:05:32] <dolio> Covering x<y and x>y isn't actually all the cases, right?
[01:05:44] <janus> > compare (0/0) (0/0)
[01:05:45] <lambdabot>  GT
[01:05:48] <EvanR> yeah they can be equal
[01:05:51] <EvanR> hence the == test
[01:05:54] <janus> (0/0) > (0/0)
[01:05:56] <janus> > (0/0) > (0/0)
[01:05:57] <dolio> Even that isn't all of them.
[01:05:58] <lambdabot>  False
[01:06:32] <EvanR> why do I even bother pasting anything lol
[01:06:51] <EvanR> I posted a "law of trichotomy" with 4 cases
[01:07:25] <EvanR> one of which is supposedly "a bad idea"
[01:07:39] <dolio> Yeah, it is a bad idea.
[01:07:43] <EvanR> k, removed xD
[01:09:45] <zero> > 0/0
[01:09:47] <lambdabot>  NaN
[01:09:48] *** Joins: alx741 (~alx741@157.100.93.160)
[01:10:05] <zero> > compare NaN NaN
[01:10:07] <lambdabot>  error: Data constructor not in scope: NaNerror: Data constructor not in scop...
[01:10:13] <EvanR> GT
[01:10:16] <EvanR> apparently
[01:10:43] <zero> > flip compare (0/0) (0/0)
[01:10:44] <lambdabot>  GT
[01:10:49] <zero> :/
[01:10:52] <EvanR> it's GT itself
[01:11:05] <dolio> The reason that people give that advice is that some of the cases where x<y and x>y return True should actually be considered x==y cases, because they might arise from calculating x and y with different associativities and such.
[01:11:32] <tomsmeding> background: https://hackage.haskell.org/package/ghc-prim-0.6.1/docs/src/GHC.Classes.html#line-458
[01:11:32] <zero> and rounding errors
[01:11:36] <EvanR> yes it seems people think all equality tests should be closeness tests
[01:11:51] <tomsmeding> _usually_ they should be, not always
[01:12:09] <EvanR> still have never run into a case where that would be correct
[01:12:14] <tomsmeding> closeness?
[01:12:38] <EvanR> like, it would move the weird test case over by delta, ime
[01:12:47] <zero> ?
[01:12:47] <tomsmeding> quite true
[01:12:48] *** Joins: andreas303 (andreas303@ip227.orange.bnc4free.com)
[01:13:25] *** Quits: cosimone (~user@93-47-231-203.ip115.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[01:14:35] <tomsmeding> most of those "don't use X" rules are more accurately written as "if you use X, be sure to have argument why it is better than the alternatives, because this may be non-intuitive"
[01:15:02] *** Quits: alx741 (~alx741@157.100.93.160) (Ping timeout: 240 seconds)
[01:15:44] <janus> yeah. if you use Ord you better remember to write which instances your algorithm won't work with. ;)
[01:16:33] *** Joins: zyzzyxdonta (~zyzzyxdon@2a02:3036:7:5279:ff4:1db4:c08b:ca7d)
[01:17:00] *** Quits: zyzzyxdonta (~zyzzyxdon@2a02:3036:7:5279:ff4:1db4:c08b:ca7d) (Client Quit)
[01:17:07] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[01:17:07] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[01:17:07] *** Joins: wroathe (~wroathe@user/wroathe)
[01:17:42] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-169.elisa-laajakaista.fi)
[01:19:00] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:158b:cfc1:e7b3:d4ac)
[01:20:34] <energizer> `data ITree a = Leaf (Int -> a) | Node [ITree a]` is this a data structure i might recognize as having some name?
[01:27:46] *** Joins: alx741 (~alx741@181.199.42.79)
[01:27:59] <energizer> am i right in thinking "functor" means something different in haskell than in math? fmap seems like a functor, not the "Functor" `f` that implements `fmap`. what is the reason for this naming convention?
[01:28:35] <monochrom> Yes and no.
[01:28:48] <nosewings> The term "Functor" in Haskell comes from math, but it basically just means "anything that has a map function"
[01:29:33] <energizer> yeah seems confusing
[01:29:54] <dsal> Functor means "that datastructure functs"
[01:30:04] <nosewings> I honestly have no idea where the use of "functor" to mean "first-class function" comes from
[01:30:25] <janus> dsal: functs is german for 'works' right?
[01:30:27] <monochrom> The standard library type class Functor is better known in math as endofunctor. Moreover, the notation is a bit different: Whereas the object map is still called Maybe or [] for example, the morphism map is called "fmap" regardless of whether it's Maybe or [] or other examples.
[01:31:28] <monochrom> Moreover you can further argue that the Functor type class is only for endofunctors on one single hardcoded category: the objects are Haskell types, the morphisms are Haskell functions.
[01:32:17] <monochrom> OTOH you can counter-argue that since that's an example of functor, the name is not wrong either.
[01:32:34] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:33:12] <monochrom> At the end you just have to meditate on the wisdom behind "Tuesday: it's like Monday, but different" 
[01:33:26] <monochrom> http://www.vex.net/~trebla/humour/tautologies.html
[01:33:59] *** Joins: ph88 (~ph88@2a02:8109:9e00:71d0:943d:5b05:e9f7:79b5)
[01:34:06] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[01:34:17] <ph88> I want to keep tracked of which pieces of data have been synced with a server. Would it be better to put a sync field into the item record or better to use a type like data Sync a = Unsynced a | Synced a ?
[01:37:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[01:37:17] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:41:06] *** Joins: codolio (~dolio@130.44.130.54)
[01:42:16] *** Quits: dolio (~dolio@130.44.130.54) (Read error: Connection reset by peer)
[01:42:24] *** codolio is now known as dolio
[01:44:54] *** Joins: zincy_ (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[01:47:43] <dsal> ph88: too many depends.  Just do one and then later realize the other was better. :)
[01:48:05] <monochrom> hehe, the other pasture is always greener
[01:48:23] <monochrom> I was also thinking "do both".
[01:48:38] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[01:48:59] *** Quits: emf_ (~emf@2620:10d:c091:480::1:3f40) (Ping timeout: 252 seconds)
[01:49:03] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[01:49:37] <monochrom> Do you want to know a 3rd way that is more painful?
[01:49:46] *** Quits: zincy_ (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Remote host closed the connection)
[01:50:01] *** Quits: yuyua32 (~yuyua32@wireless-student-pt3-247-143.lut.ac.uk) (Quit: Client closed)
[01:51:00] <monochrom> Consider turning on DataKinds and define "data Sync = Unsynced | Synced" but use it as a kind so define your actual data type as "data D (s :: Sync) = Ctor ..." so "x :: D Synced" is synced and "y :: D Unsynced" is unsynced.
[01:53:28] *** Quits: michalz (~michalz@185.246.204.109) (Remote host closed the connection)
[01:54:29] *** Joins: emf (~emf@2603-6080-9403-11bf-0000-0000-0000-0009.res6.spectrum.com)
[01:55:07] *** Quits: pfurla_ (~pfurla@172.58.160.35) (Quit: gone to sleep. ZZZzzzâ€¦)
[01:56:18] *** Quits: takuan_dozo (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:58:25] *** Joins: emf_ (~emf@2620:10d:c091:480::1:9cd9)
[01:58:53] *** Quits: emf (~emf@2603-6080-9403-11bf-0000-0000-0000-0009.res6.spectrum.com) (Ping timeout: 252 seconds)
[02:00:32] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:158b:cfc1:e7b3:d4ac) (Remote host closed the connection)
[02:03:49] <ph88> Cool idea =)
[02:06:32] <dsal> I've never used DataKinds.  It's one of those things i try to use now and then and then realize it's not actually helping.
[02:07:02] *** Joins: tripa[m] (~tripamatr@2001:470:69fc:105::1:4f7e)
[02:11:03] <janus> dsal: you don't like servant?
[02:11:32] *** Joins: pfurla (~pfurla@172.58.176.86)
[02:11:53] <dsal> janus: I've never used it on purpose.
[02:12:37] <dsal> I do most little web stuff with Scotty.
[02:12:49] <dsal> It seems like a lot less work.
[02:13:25] <janus> it doesn't give you the same level of safety though
[02:14:05] <janus> the 'less work' depends on what you're doing
[02:14:17] *** Quits: arahael (~arahael@27-32-144-20.tpgi.com.au) (Ping timeout: 252 seconds)
[02:15:10] <monochrom> The most advanced (least elementary) type-level technique I have ever used is phantom-typed GADTs, e.g., "data Expr a where IntLit :: Int -> Expr Int; GT :: Expr a -> Expr a -> Expr Bool"
[02:16:41] <monochrom> But yeah, this is more about reflecting what I use Haskell for.
[02:17:11] <monochrom> Or what safety I care about in my Haskell code.
[02:18:12] <janus> i know of a cryptographic multi-signature protocol where there is an intermediate nonce which can't be used twice, or the private key is inferrable
[02:18:27] <janus> i thought this would be a nice application of linearTypes but Cale once said that it should be doable with ST also
[02:18:36] <janus> what would you use in a situation like that?
[02:19:34] <monochrom> This one I think linear typing is more direct.
[02:20:06] <monochrom> I don't think ST can express it, but I may be wrong, but if I'm wrong, I still think the solution is indirect.
[02:20:54] <janus> well the ST-like context could keep track of whether operations that could potentially leak the nonce are executed more than once
[02:21:01] <monochrom> Right? Linear typing has "%1" staring right into your face. :)
[02:21:46] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:158b:cfc1:e7b3:d4ac)
[02:21:47] <janus> if the ST-like context doesn't allow for extracting the nonce out, the API should be safe then
[02:22:01] <janus> i agree that linear typing seems more direct, but it is also a newer and more unstable feature
[02:22:21] <janus> you can't have 'let' in a linear do block iirc
[02:23:27] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 252 seconds)
[02:23:38] <jackdk> but you could use the nonce within an st-like block twice by accident still?
[02:24:22] <janus> jackdk: no because the 'executor' of this ST-like type would keep track of which operations 'use' the nonce
[02:25:00] <janus> jackdk: then it could just count, and if it sees more than one use, it crashes and says PC LOAD LETTER :P
[02:25:41] <janus> don't really know if this i should call it 'ST-like' since it wouldn't really have need the impredicative forall or anything, hmm
[02:25:52] <jackdk> Right, but unless you're doing typelevel indexed monad-ish stuff you're looking at runtime crashes instead of compile errors?
[02:26:11] <janus> yeah i guess so, so that is a real disadvantage
[02:26:24] <jackdk> or if you can get away without a monad, a free applicative would let you inspect the computation before you try to run it
[02:26:43] <jackdk> still runtime crashes, though
[02:26:58] *** Joins: pfurla_ (~pfurla@2804:18:5854:5897:8ac:66e0:c04d:6ee5)
[02:27:32] <janus> i wonder if it is even doable with linear typing. because presumably you'd need to have it in a monad transformer stack such that the intermediate nonces could be sent across the network. and that shouldn't be part of the cryptographic api itself
[02:28:15] <janus> i guess it should work since they would just be pure linear functions that could be used in any context
[02:30:32] *** Quits: pfurla (~pfurla@172.58.176.86) (Ping timeout: 240 seconds)
[02:32:01] *** Quits: kuribas (~user@ptr-25vy0i8khbpxjegyagx.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
[02:32:03] *** Joins: pfurla (~pfurla@172.58.110.204)
[02:32:46] *** Joins: arahael (~arahael@203.158.51.1)
[02:34:13] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[02:34:33] *** Quits: Katarushisu (~Katarushi@cpc147334-finc20-2-0-cust27.4-2.cable.virginm.net) (Quit: The Lounge - https://thelounge.chat)
[02:35:03] <janus> what happens if a Haskell process forks while linear bindings are alive? it would break safety in this case :O
[02:35:10] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:158b:cfc1:e7b3:d4ac) (Remote host closed the connection)
[02:35:11] *** Quits: pfurla_ (~pfurla@2804:18:5854:5897:8ac:66e0:c04d:6ee5) (Ping timeout: 252 seconds)
[02:35:33] *** Quits: y04nn (~y04nn@92.223.89.196) (Ping timeout: 252 seconds)
[02:35:39] *** Joins: Katarushisu (~Katarushi@cpc147334-finc20-2-0-cust27.4-2.cable.virginm.net)
[02:35:42] *** Quits: ub (~Thunderbi@p200300ecdf1abbee153a2c4097e8e97e.dip0.t-ipconnect.de) (Quit: ub)
[02:36:05] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[02:36:10] <geekosaur> I would expect both forkIO and forkProcess to be unsafe in a linear context
[02:36:15] *** Joins: mikail (~mikail@2a02:c7f:bc1f:4a00:fc9:3da5:3e1e:8303)
[02:36:25] <monochrom> Yeah I don't know of the interaction between linear typing and IO and forking. I have only heard that the IO exception system is a backdoor. I haven't bothered to ask for an example.
[02:36:52] <monochrom> And too lazy to study one. :)
[02:37:05] <monochrom> Category theory is so much easier!
[02:37:06] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:158b:cfc1:e7b3:d4ac)
[02:38:37] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Client Quit)
[02:39:11] *** Joins: pfurla_ (~pfurla@2804:18:5854:5897:49e8:d425:47ba:a206)
[02:41:13] *** Quits: mikail (~mikail@2a02:c7f:bc1f:4a00:fc9:3da5:3e1e:8303) (Quit: Leaving)
[02:42:27] *** Quits: pfurla (~pfurla@172.58.110.204) (Ping timeout: 256 seconds)
[02:42:30] *** Quits: Katarushisu (~Katarushi@cpc147334-finc20-2-0-cust27.4-2.cable.virginm.net) (Quit: The Lounge - https://thelounge.chat)
[02:43:35] *** Joins: Katarushisu (~Katarushi@cpc147334-finc20-2-0-cust27.4-2.cable.virginm.net)
[02:43:38] <Axman6> why would forkIO be unsafe in a linear context? You can still track whether something linear is used ones in the forked action or the forking action, and as long as it's not used in both you're ok. Rust does exacrtly this right?
[02:44:27] <monochrom> Rust allows multiple readers. %1 doesn't.
[02:44:59] <geekosaur> and I doubt linear haskell actually knows that forkIO or forkOS or forkProcess is "special"
[02:45:04] <Axman6> so the check is even simpler for Haskell right?
[02:45:04] <monochrom> Rust's system also aims at tracking "can I free() now?", which is quite a bit different.
[02:45:50] <geekosaur> or any other of the variants that essentially dupliucate an execution context
[02:47:32] <geekosaur> we already have the problem that nothing in ghc/rts knows that in the child of a forkProcess all threads have ceased to exist
[02:47:42] *** Quits: jespada (~jespada@87.74.33.157) (Quit: Textual IRC Client: www.textualapp.com)
[02:48:04] <geekosaur> (well, the rts knows to recreate its own threads, but knows nothing about the state of any user program threads after a forkProcess)
[02:48:06] *** Joins: pfurla (~pfurla@185.81.136.19)
[02:49:17] *** Quits: pfurla_ (~pfurla@2804:18:5854:5897:49e8:d425:47ba:a206) (Ping timeout: 250 seconds)
[02:52:26] <[itchyjunk]> I have a question. If i wanted to learn say `datastructure and algorithms`, is haskell still a good choice for me? I am a bit intimidated by this prospect. my alternative would be java i think..
[02:53:07] <[itchyjunk]> I would like to learn things like trees and graphs and "depth first" type stuff
[02:53:15] <geekosaur> depends on how you want to learn them, I think; the two have different focuses
[02:53:15] *** Quits: pfurla (~pfurla@185.81.136.19) (Read error: No route to host)
[02:53:38] <nosewings> Haskell is good at stuff like trees and graphs, but if you don't know Haskell, it might be a challenge to learn both at the same time
[02:53:41] *** Joins: pfurla (~pfurla@185.81.136.19)
[02:54:02] <[itchyjunk]> Right, i don't know Haskell (and much programming in general).
[02:54:15] <monochrom> Learn programming first? :)
[02:54:49] <[itchyjunk]> i think people pick up `algo and datascructure` in their journey to learn programming
[02:54:49] *** Quits: pfurla (~pfurla@185.81.136.19) (Read error: Connection reset by peer)
[02:54:51] <monochrom> In universities, data structure and algorithms are usually considered at least 2nd-year course(s), and even multiple courses.
[02:55:07] <[itchyjunk]> well, if i was in uni, it would be my next course.
[02:55:21] <[itchyjunk]> I just got done with the `Accelerated intro to OOP`
[02:55:27] <monochrom> This means it requires the student to have spent 1 year on imperative and/or functional programming at the beginner level.
[02:55:44] <[itchyjunk]> but i won't be taking the `data structure and algo` course but wanted to dabble with it a bit at least
[02:56:37] <monochrom> Well if you have completed OOP-based beginner programming, you're ready for a data structure and algorithm course that presents imperative data structures and algorithms.
[02:56:49] *** Joins: snake (~snake@user/snake)
[02:56:54] <monochrom> which means not Haskell.
[02:57:00] <[itchyjunk]> ah
[02:57:09] <[itchyjunk]> So I should go with Java or maybe python?
[02:57:13] *** Joins: pfurla (~pfurla@2804:18:5854:5897:2c6f:9eef:289e:85ce)
[02:57:19] <snake> i just realized that whatever you print from an IO() function is also the value of that function when used in an assignment expression
[02:57:34] <nosewings> Yeah, the other thing is that the structures/algorithms commonly used in Haskell are sometimes different from wht you might see in other languages
[02:57:39] <snake> what if you wanted to print debug messages in between tho
[02:57:40] <monochrom> Haskell is a good choice for a functional data structure and algorithm course, but only if you have already trained with Haskell or SML or Scheme or...
[02:58:12] <[itchyjunk]> I thought maybe i could kill infinitely many birds at once by doing this in haskell
[02:58:30] <[itchyjunk]> How would you learn haskell without dabbeling with these though?
[02:58:37] <snake> itchyjunk i recommend either java or python
[02:58:41] <[itchyjunk]> How do you first learn programming then come back to it
[02:58:43] <geekosaur> snake: what? the result is by definition ()
[02:58:47] <snake> i dislike haskell (but here i am)
[02:58:49] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[02:58:53] <[itchyjunk]> Maybe i should get my python going on then.
[02:58:58] *** Quits: teo (~teo@user/teo) (Ping timeout: 260 seconds)
[02:59:00] <snake> geekosaur, huh, well its working check it out: 
[02:59:02] <monochrom> The human brain is weaker than the computer. The human brain blocks at information overload where the computer can productively interleave and manage.
[02:59:14] <geekosaur> % let x = putStrLn "hello, world"; print x
[02:59:14] <snake> let x = getNumbers "input-day-6.txt"
[02:59:14] <yahb> geekosaur: ; <interactive>:125:41: error: parse error (possibly incorrect indentation or mismatched brackets)
[02:59:22] <nosewings> Python's a good language to know, even it it's completely unprincipled
[02:59:34] <geekosaur> % let x = putStrLn "hello, world" in print x
[02:59:35] <yahb> geekosaur: ; <interactive>:126:36: error:; * No instance for (Show (IO ())) arising from a use of `print'; * In the expression: print x; In the expression: let x = putStrLn "hello, world" in print x; In an equation for `it': it = let x = putStrLn "hello, world" in print x
[02:59:43] <monochrom> Don't use your brain to build multiple dependencies just because cabal can.
[02:59:45] <snake> stahp
[02:59:50] *** Joins: AlexNoo_ (~AlexNoo@178.34.151.66)
[02:59:57] <geekosaur> the second one is correct, x is a value of type IO ()
[02:59:58] <snake> geekosaur, i did it in ghci actually
[03:00:08] <geekosaur> if I unwrap it by using do, it's a value of type ()
[03:00:09] <snake> let me try with --make
[03:00:16] <dibblego> that's ghci evaluating the IO value
[03:00:19] <nosewings> ghci automatically runs IO actions
[03:00:20] <geekosaur> the % invokes yahb, which is ghci
[03:00:27] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 276 seconds)
[03:00:49] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[03:01:33] <geekosaur> % putStrLn "hello, world" >>= print
[03:01:33] <yahb> geekosaur: hello, world; ()
[03:01:43] *** Quits: Alex_test (~al_test@178.34.163.33) (Ping timeout: 256 seconds)
[03:01:53] <geekosaur> the () is from the `print`
[03:02:51] *** Quits: AlexZenon (~alzenon@178.34.163.33) (Ping timeout: 256 seconds)
[03:03:38] *** Quits: AlexNoo (~AlexNoo@178.34.163.33) (Ping timeout: 260 seconds)
[03:04:17] <snake> yeah it doesn't work with --make at all
[03:04:23] <snake> so what should i do to return a value
[03:04:32] <snake> from a file
[03:04:48] <geekosaur> you'd have to show us some context but probably `pure`
[03:04:55] <snake> sure
[03:05:06] <janus> % readFile "/proc/self/cmdline"
[03:05:06] <yahb> janus: "/srv/sandbox/root/usr/lib/ghc-9.0.1/bin/ghc\NUL-B/srv/sandbox/root/usr/lib/ghc-9.0.1\NUL--interactive\NUL-v0\NUL-ghci-script\NUL/srv/sandbox/root/usr/lib/run/ghci-init\NUL-tmpdir\NUL/srv/sandbox/root/data/tmp/\NUL-odir\NUL/srv/sandbox/root/data/tmp/\NUL-hidir\NUL/srv/sandbox/root/data/tmp/\NUL-ignore-dot-ghci\NUL-package\NULghc\NUL+RTS\NUL-M200M\NUL-V0\NUL-C0\NUL-K100M\NUL"
[03:05:45] <snake> https://dpaste.com/DLVAHS92Q
[03:06:13] <snake> janus, oh
[03:06:17] <janus> it would be easier just to read it all at once if it fits in memory...
[03:06:22] <janus> it's a tradeoff, i guess
[03:06:22] <snake> yeah
[03:06:31] <snake> no i didnt see that in any tutorials
[03:06:31] <geekosaur> yeh, you want pure
[03:06:45] <geekosaur> specifically `pure nums`
[03:07:06] *** Joins: YehoshuaPesachWa (~yehoshuap@2001:470:69fc:105::a5f)
[03:07:43] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[03:07:49] *** Joins: Alex_test (~al_test@178.34.151.66)
[03:08:03] *** Joins: AlexZenon (~alzenon@178.34.151.66)
[03:08:21] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:158b:cfc1:e7b3:d4ac) (Remote host closed the connection)
[03:08:22] <glguy> YehoshuaPesachWa: welcome
[03:08:42] <YehoshuaPesachWa> Thanks!
[03:09:44] <snake> geekosaur, wat
[03:09:55] <snake> i am trying to google for an example of pure and getting a lot of philosophy
[03:10:19] <nosewings> snake, what are you actually trying to do on line 20?
[03:10:26] <snake> *shrug*
[03:10:30] <snake> dunno
[03:10:42] <snake> oh
[03:10:42] <janus> snake: do you know what type classes are?
[03:10:51] <snake> nosewings, i want an [Int] or something like that
[03:10:56] *** Joins: pfurla_ (~pfurla@177.79.126.48)
[03:11:05] <snake> janus, sorta, derek banas mentioned that in his youtube tutorial for haskell
[03:11:08] <nosewings> oh, so you want to return that from getNumbers
[03:11:12] <snake> like Show
[03:11:17] <snake> nosewings, yeah
[03:11:21] *** Joins: jespada (~jespada@87.74.33.157)
[03:11:30] <nosewings> so you need to change the type to getNumbers :: String -> IO [Int]
[03:11:52] <nosewings> and then at the end of the function put "return nums" or "pure nums" (same thing)
[03:12:07] <janus> snake: you should read a proper book explaining these concepts from the start. they usually will explain the Applicative type class which is what pure is contained in
[03:12:52] <snake> what proper book
[03:13:12] <janus> @where books
[03:13:12] <lambdabot> https://www.extrema.is/articles/haskell-books, see also @where LYAH, RWH, YAHT, SOE, HR, PIH, TFwH, wikibook, PCPH, HPFFP, HTAC, TwT, FoP, PFAD, WYAH, non-haskell-books
[03:13:50] <geekosaur> http://www.vex.net/~trebla/haskell/IO.xhtml
[03:14:25] *** Quits: pfurla (~pfurla@2804:18:5854:5897:2c6f:9eef:289e:85ce) (Ping timeout: 252 seconds)
[03:14:57] <snake>     This book will help you learn HASKELL very easily. In this book, you will learn HASKELL from scratch and discover the FULL BLUEPRINT ON HOW TO MOVE from a beginner to an expert in HASKELL, how to avoid most mistakes that most people make in HASKELL, how to become a PRO in HASKELL, and how to avoid most errors in HASKELL.
[03:15:03] <snake> nice
[03:16:03] <janus> snake:  i would go for one that isn't self-published...
[03:16:45] *** Joins: yuyua32 (~yuyua32@wireless-student-pt3-247-143.lut.ac.uk)
[03:17:02] *** Quits: Jing (~hedgehog@2604:a840:3::10c8) (Remote host closed the connection)
[03:17:26] <snake> o
[03:17:39] *** Joins: Jing (~hedgehog@2604:a840:3::10c8)
[03:17:47] <snake> yeah it seemed like a sales pitch
[03:19:32] *** Quits: jgeerds (~jgeerds@55d4ac73.access.ecotel.net) (Ping timeout: 240 seconds)
[03:19:59] <snake> you guys must read a lot
[03:20:03] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[03:20:53] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[03:24:23] <janus> most of these books contain similar content, i don't think most people have read more than one or two
[03:24:55] <nosewings> I mostly just read blogs
[03:25:27] <geekosaur> I haven't read any of them, I used the so-called Gentle Introduction (which commonly is not considered very gentle at all)
[03:25:42] *** Quits: yuyua32 (~yuyua32@wireless-student-pt3-247-143.lut.ac.uk) (Quit: Client closed)
[03:26:04] <geekosaur> but I have quite a lot of programming experience, including with other functional languages
[03:26:14] *** Joins: yuyua32 (~yuyua32@wireless-student-pt3-247-143.lut.ac.uk)
[03:26:28] <yuyua32> Im trying to write a function which finds the index of a value in haskell
[03:26:33] <yuyua32> returns *
[03:26:40] <yuyua32> so if I have
[03:26:45] *** Joins: kranius_ (~kranius@222.186.245.213.rev.sfr.net)
[03:26:47] <yuyua32> Index n (x:xs)
[03:28:02] <yuyua32> Â  | n == x = ?
[03:28:27] <snake> 0
[03:28:35] <yuyua32> but how does that return the index
[03:28:45] <hpc> it returns the index of n in that particular list
[03:28:46] <snake> if its the first character (x) then the index is 0
[03:28:52] <EvanR> if the first thing in the list is the thing you want, it's zero by definition
[03:28:56] <yuyua32> oh right thats true
[03:28:59] <yuyua32> but I also have
[03:29:02] <hpc> when n == x, n is definitely at the start of (x:xs)
[03:29:04] <snake> otherwise = Index (xs)
[03:29:07] <snake> er 1 +
[03:29:08] <yuyua32> Â  | otherwise = index (xs y)
[03:29:19] <yuyua32> sorry yeahÂ  Â | otherwise = 1 + index (xs y)
[03:29:22] <hpc> snake: suppose you have a list, xs
[03:29:25] <snake> yup you got it
[03:29:27] <hpc> and n is at index i in xs
[03:29:33] <hpc> where is n in (x:xs)?
[03:29:40] <hpc> ah, yep
[03:29:57] <hpc> the parens are wrong though
[03:30:02] <yuyua32> so which part of the code returns the index?
[03:30:19] <snake> yuyua32, if its not in the list tho then you will get the length of the string which is wrong
[03:30:26] <snake> i did this yesterday trying to look for commas
[03:30:32] <hpc> there's no "returning", the entire right hand expression is the index
[03:30:42] *** Quits: max22- (~maxime@2a01cb088335980077ae04132abb6848.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:30:59] <hpc> index n xs = the actual index, as whatever computation it happens to be
[03:31:23] <hpc> ^ is how all functions are written
[03:31:47] <yuyua32> oh right yeah thats right]
[03:31:54] <snake> i dont mean to brag but i have a huge ego, i got a 20/20 on my recursion quiz the other day
[03:31:58] <yuyua32> jheez
[03:32:04] <yuyua32> so you'll be handy for this question
[03:32:06] <yuyua32> xp
[03:32:12] <snake> im trying
[03:32:55] <yuyua32> index n (x:xs)
[03:32:56] <yuyua32> Â  | n == x = 0
[03:32:56] <yuyua32> Â  | otherwise = 1 + index (n xs)
[03:33:07] <hpc> no parens around (n xs)
[03:33:08] <yuyua32> thats not right but what would go instead of the 0
[03:33:14] <yuyua32> oh right
[03:33:25] <snake> that's right
[03:33:30] <snake> besides the parens
[03:33:35] <yuyua32> why is there a 1 +?
[03:33:41] <yuyua32> because of 0 start?
[03:33:43] <snake> each recursion adds 1
[03:33:59] <snake> if it wasn't at zero it might be +1 from 0 (relatively)
[03:34:11] <hpc> yuyua32: if 'b' is at index 1 in "abc", it's at index 2 in "*abc" no matter what '*' is
[03:34:32] <yuyua32> ah got it
[03:34:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:35:01] <hpc> you can pop that definition into ghci and try it out
[03:35:03] <hpc> :{
[03:35:04] <hpc> paste code
[03:35:05] <snake> recursion is basically: "let's check if the first character matches, and if it doesn't, well we'll ask someone else to look for it. oh look this function does that, lets call it" and it's the same function you're in
[03:35:05] <hpc> :}
[03:35:09] <yuyua32> yep just about to try it
[03:35:29] <snake> when the recursion unwinds it just adds 1 each stack frame that gets freed
[03:36:09] <yuyua32> oh shit beautiful
[03:36:21] <EvanR> haskell lets you use equational reasoning to see why a function works: given your code above you can be sure that e.g. index 4 [4,6,7,8] = index 4 (4:6:7:8:[]) = 0
[03:36:34] *** Quits: emf_ (~emf@2620:10d:c091:480::1:9cd9) (Read error: Connection reset by peer)
[03:36:37] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[03:36:47] *** Joins: emf (~emf@2603-6080-9403-11bf-0000-0000-0000-0009.res6.spectrum.com)
[03:36:52] <yuyua32> haskell is so elegant
[03:36:55] <EvanR> and index 6 (4:6:7:8:[]) = 1 + index 6 (6:7:8:[]) = 1 + 0 = 1
[03:37:07] <hpc> there's one possibility that's missing from your code though, unless i missed it
[03:37:09] <snake> is it really?
[03:37:41] <yuyua32> @hpc if the element isnt in the list?
[03:37:41] <lambdabot> Maybe you meant: src rc pl ghc
[03:37:45] <hpc> yep
[03:38:05] <yuyua32> would that just be y `notElem xs =
[03:38:08] <EvanR> if you squint, you can also see how your function will perform kind of bad on a long list
[03:38:18] <hpc> try stepping through index '*' "abc" in your head
[03:38:31] <EvanR> index 99 [0..99] = 1+1+1+1+...+0
[03:38:34] <yuyua32> whats '*' ?
[03:38:40] <hpc> just the character *
[03:38:44] <hpc> > '*'
[03:38:46] <lambdabot>  '*'
[03:38:46] <hpc> > 'a'
[03:38:48] <lambdabot>  'a'
[03:38:48] <yuyua32> ah right
[03:39:06] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:158b:cfc1:e7b3:d4ac)
[03:39:07] <snake> > '\x41'
[03:39:08] <lambdabot>  'A'
[03:39:15] <snake> sorry showing off
[03:39:42] <yuyua32> hpc what do you mean stepping through * in abc?
[03:40:07] *** Quits: pfurla_ (~pfurla@177.79.126.48) (Read error: No route to host)
[03:40:11] <hpc> just take the expression (index '*' "abc") and think through what it would calculate without actually putting it in your computer
[03:40:13] <snake> yuyua32, he meant search for the index of * in the string "abc"
[03:40:49] <hpc> it's a good exercise, and this is a perfect problem to try it out on
[03:40:50] <snake> i think the function should throw an exception
[03:41:05] <yuyua32> yeah
[03:41:06] <EvanR> index '*' ('a':'b':'c':[])
[03:41:10] <EvanR> =
[03:41:11] <yuyua32> thats it
[03:41:12] <EvanR> ?
[03:41:14] <snake> it's an exceptional circumstance, the star isn't in the list
[03:41:28] <yuyua32> so some error will be thrown
[03:41:39] <snake> yup just crash when that happens
[03:41:42] *** Joins: pfurla (~pfurla@185.81.136.21)
[03:41:47] <yuyua32> I was thinking to fix that I could just do y `notElemen` xs
[03:42:12] <EvanR> that's not the whole story
[03:42:29] <snake> yup programmers will never use your function before checking if y is an element of the list so you can be sure it will never crash when used properly
[03:42:37] <hpc> what error does it produce, and what line does it happen on?
[03:43:03] <yuyua32> Non-exhaustive patterns in function index
[03:43:19] <EvanR> if the list is very long or infinite, then sticking a containment test in front is kind of silly
[03:43:28] <yuyua32> its not gonna be long
[03:43:32] <EvanR> in the infinite case, it's just wrong
[03:43:41] <yuyua32> im guessing it happends at 1 + index n xs
[03:43:43] <yuyua32> when xs is empty
[03:43:49] <yuyua32> so
[03:43:54] <snake> maybe you can return a tuple (Bool, index)
[03:43:56] <yuyua32> | index n [] = 0
[03:44:01] <yuyua32> would that work?
[03:44:11] <snake> idk
[03:44:15] <snake> gonna shut up now
[03:44:22] <EvanR> 0 sounds like a false positive
[03:44:32] <yuyua32> shit true
[03:44:35] <nosewings> Probably not, because then you wouldn't be able to tell the difference between an element at the front and one not in it at all
[03:44:39] <nosewings> You could return -1
[03:44:44] <yuyua32> got it
[03:44:45] <hpc> depends on what you want index to return - maybe you decide that if (index n xs) > length xs, that means "not found"
[03:44:49] <EvanR> -1, classic
[03:44:55] <hpc> FILE_NOT_FOUND
[03:44:56] <snake> yeah good ol -1
[03:44:57] <nosewings> The "real" solution is to use Maybe
[03:45:02] *** Quits: kranius_ (~kranius@222.186.245.213.rev.sfr.net) (Ping timeout: 265 seconds)
[03:45:03] <geekosaur> ^
[03:45:09] <hpc> but yeah, Maybe is the way here
[03:45:21] <snake> is Maybe like Some or std::optional ?
[03:45:25] <hpc> yes
[03:45:27] <hpc> @src Maybe
[03:45:28] <lambdabot> data Maybe a = Nothing | Just a
[03:45:35] <yuyua32> as in maybe its there maybe its notÂ XD
[03:45:43] <nosewings> Maybe is exactly std::optional
[03:46:05] <nosewings> (or, rather, std::optional is Maybe)
[03:46:21] *** Joins: machinedgod (~machinedg@24.105.81.50)
[03:46:33] <hpc> your index function gets a bit uglier, when you recursively call index you don't get a simple number anymore
[03:46:51] <yuyua32> im gonna be calling this index in another recursive function
[03:46:58] <hpc> but maybe there are some other nice functions in scope that could make that easier
[03:46:59] <yuyua32> so index is gonna be called multiple times til the end
[03:47:37] <yuyua32> so I cant return -1
[03:47:39] <geekosaur> had you given any thought to how that function deals with "not found"?
[03:47:59] <EvanR> ah that's a great reason to not use -1
[03:48:00] <hpc> geekosaur: that's what we're currently discussing :P
[03:48:06] <yuyua32> ye
[03:48:11] <glguy> is the answer "set errno"?
[03:48:29] <EvanR> do whatever division by zero does
[03:48:32] <EvanR> (don't do that)
[03:48:37] *** Joins: jkaye (~jkaye@2601:281:8300:7530:e7c5:c36d:91ad:b90f)
[03:48:38] <yuyua32> funnny
[03:48:53] <yuyua32> i might just return the length of the list
[03:49:04] <hpc> drop down to pointer manipulation, make the list how /you/ want it!
[03:49:13] <hpc> mutate the immutable
[03:49:16] <glguy> hpc: it adds the element to the end of the list
[03:49:19] <hpc> maximum evil
[03:49:23] <glguy> found it!
[03:49:27] <EvanR> lol
[03:49:35] <EvanR> very convenient
[03:50:26] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[03:50:29] <hpc> this is how you end up with acme-php's "notElem x xs = elem (not x) xs"
[03:50:33] <snake> glguy, lmao
[03:50:40] <snake> oh man you guys are funny
[03:51:06] <EvanR> use principle of most surprise
[03:52:21] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 250 seconds)
[03:56:10] <yuyua32> this is just for testing
[03:56:14] <yuyua32> but whats wrong this
[03:56:16] <yuyua32> with*
[03:56:17] <yuyua32> nsplit xs x
[03:56:18] <yuyua32> Â  | x `notElem` xs = [length xs]
[03:56:18] <yuyua32> Â  | otherwise = index xs x
[03:56:25] <yuyua32> the last line
[03:56:26] *** Quits: emf (~emf@2603-6080-9403-11bf-0000-0000-0000-0009.res6.spectrum.com) (Quit: emf)
[03:56:32] <yuyua32> giving me some sort of error
[03:57:35] <hpc> what's the type of nsplit?
[03:57:40] <geekosaur> try putting a type signature on the definition of nsplit
[03:58:18] <yuyua32> list -> int -> int
[03:58:22] <yuyua32> ohh
[03:58:23] <yuyua32> I see
[03:59:10] <snake> ooh i got it
[03:59:22] *** Quits: Tuplanolla (~Tuplanoll@91-159-68-169.elisa-laajakaista.fi) (Quit: Leaving.)
[04:01:00] <yuyua32> i swear if I stay here any longer ill get too good and be employed by some haskell company
[04:01:25] <snake> follow your dreams
[04:01:45] <snake> not sure why you'd dream of writing haskell but you do you
[04:02:24] <hpc> i mostly just dream of falling asleep
[04:02:27] <hpc> recursion is dangerous, folks
[04:02:36] <snake> hahaha
[04:03:19] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[04:03:25] <monochrom> My dream is to retire from some haskell company!
[04:03:34] *** Quits: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk) (Remote host closed the connection)
[04:03:53] <EvanR> you have a problem with our company?
[04:04:07] *** Joins: burnsidesLlama (~burnsides@client-8-91.eduroam.oxuni.org.uk)
[04:04:25] <hpc> it sounds like he has a solution for our company
[04:04:42] <monochrom> No, I just mean dreaming for enjoying retirement life and pension etc.
[04:04:46] <hpc> :P
[04:05:37] <monochrom> Aim high. Dream lazy. Don't just dream of employment. Dream of all the benefit after!
[04:06:51] <hpc> it's an inspiring tale
[04:07:04] <hpc> if you work very hard, someday you too might be able to life the good life in weak head normal form
[04:07:24] <monochrom> haha
[04:07:32] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[04:08:35] *** Quits: burnsidesLlama (~burnsides@client-8-91.eduroam.oxuni.org.uk) (Ping timeout: 256 seconds)
[04:09:37] *** Joins: pfurla_ (~pfurla@2804:18:5804:c94c:6161:1466:1870:aecb)
[04:09:56] *** Joins: emf (~emf@2603-6080-9403-11bf-0000-0000-0000-0009.res6.spectrum.com)
[04:10:53] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 252 seconds)
[04:11:10] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:297c:42b:53ca:ec88)
[04:12:21] *** Joins: notzmv (~zmv@user/notzmv)
[04:13:02] *** Quits: pfurla (~pfurla@185.81.136.21) (Ping timeout: 240 seconds)
[04:13:51] *** Joins: emf_ (~emf@2620:10d:c091:480::1:305b)
[04:15:08] *** Quits: emf (~emf@2603-6080-9403-11bf-0000-0000-0000-0009.res6.spectrum.com) (Ping timeout: 268 seconds)
[04:16:01] <yuyua32> ive developed my function a bit more
[04:16:02] <yuyua32> index (x:xs) n
[04:16:03] <yuyua32> Â  | n == x = 0
[04:16:03] <yuyua32> Â  | otherwise = 1 + index xs n
[04:16:04] <yuyua32> -- nsplit [] _ = ([1],[2])
[04:16:04] <yuyua32> nsplit xs x
[04:16:05] <yuyua32> Â  | x `notElem` xs = 1
[04:16:05] <yuyua32> Â  | otherwise = length (fst(splitAt (index xs x) xs)) :
[04:16:27] <yuyua32> so basically it finds a certain character and splits everything before it and returns the length of before list
[04:17:08] <yuyua32> but I want it to keep going to next n in the list if it exists and find the length i.e
[04:17:31] <yuyua32> Â [1,2,3,3,4,2,4,5] 0
[04:17:44] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[04:17:55] <yuyua32> Â [1,2,3,3,4,2,4,5] 2 would return [1,3,2]
[04:18:54] <yuyua32> so how should I access the after of splitAt so I can recurse through it
[04:18:56] <yuyua32> if that makes sense?
[04:18:58] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::9788)
[04:19:13] *** Quits: megaTherion (~therion@unix.io) (Quit: ZNC 1.8.2 - https://znc.in)
[04:19:13] <yuyua32> so snd splitAt?
[04:19:38] <yuyua32> but that wouldnt work either
[04:23:08] *** Quits: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net) (Remote host closed the connection)
[04:23:37] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[04:24:38] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[04:27:10] *** Quits: acidjnk (~acidjnk@p200300d0c7271e736483cc3bf5018c54.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[04:28:55] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[04:29:00] <snake> yuyua32, i dont understand any of that possibly because im sleep deprived for a few weeks now, cicadian rhythm is out of whack but im ok. anyways do you want to see how i did it?
[04:29:02] <snake> https://dpaste.com/H2V2P3M75
[04:29:22] <EvanR> is this like, a computer class that you're both in
[04:29:39] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[04:29:41] <snake> no if this was a class i'd hate my life
[04:29:48] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[04:29:56] <snake> how will i get to japan if i needed to get a good grade on this
[04:30:44] *** Joins: Guest19 (~Guest19@n110-33-34-202.hum1.act.optusnet.com.au)
[04:30:48] <yuyua32> I wrote it
[04:30:57] <yuyua32> but its the ugliest code ive ever seen
[04:31:08] <yuyua32> and has about 20 flaws
[04:31:36] <yuyua32> EvanR its not a class just excersices to learn haskell
[04:31:57] <snake> EvanR, did you see my commented out code? idk what was wrong with it but the compiler complaint
[04:32:18] <snake> i probably jsut need to crack open one of those books, "learn you a haskell for great good" has nice pictures
[04:33:25] <EvanR> if I don't feel like I understand some code, I go back and see if I can break it down into more functions, smaller functions that make sense in isolation
[04:33:47] <snake> oop i forgot the pretty print function, it basically just did if isJust then print else print none
[04:33:54] <EvanR> and then test those functions for sanity check
[04:34:00] <snake> EvanR, ah
[04:34:16] <EvanR> then I can start to put the pieces together into something more grandiose
[04:36:10] *** Quits: Jing (~hedgehog@2604:a840:3::10c8) (Remote host closed the connection)
[04:36:30] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Ping timeout: 260 seconds)
[04:36:45] *** Joins: Jing (~hedgehog@2604:a840:3::10c8)
[04:36:46] <snake> yeah i've been a bit distracted from aoc2021 because im just wanting to understand haskell, it's so different
[04:36:57] *** Quits: yuyua32 (~yuyua32@wireless-student-pt3-247-143.lut.ac.uk) (Quit: Client closed)
[04:36:58] <snake> i guess aoc2021 is more grandiose than i'm ready for
[04:37:09] <snake> (at least in haskell)
[04:37:23] <EvanR> as long as you can read a file you can do the first few AoCs
[04:37:54] <EvanR> and if you can't, you paste in their example data in string literals
[04:38:05] <EvanR> you can*
[04:38:37] <EvanR> I heard some people paste the test data into their code somehow and skip reading a file
[04:39:00] <snake> its just a lot, that's all, not just getting to the object of the problem, but instead ok, how does do differ from let while in etc
[04:39:06] <snake> why is whitespace syntax etc
[04:39:19] <snake> who's idea was this, etc
[04:39:29] <snake> what is a monad
[04:39:32] <EvanR> python made whitespace syntax normative, haskell's not weird anymore
[04:39:38] <snake> haha yeah i suppose
[04:40:24] <monochrom> If you ban "do" and use >>= directly, it is very clear why it is not "let" or "where".
[04:40:36] <monochrom> Especially after respecting the type of >>=
[04:40:44] <snake> what is >>=
[04:41:07] <monochrom> As opposed to using "intuition" to ignore the exact type and handwave your way around.
[04:41:07] <EvanR> the operator do syntax is sugar for
[04:41:12] <snake> i was just dropping a bunch of haskell-babble i didnt think that line actually made sense
[04:41:35] <snake> oh ok
[04:41:41] <EvanR> [1,2,3] is sugar right, so is do syntax
[04:41:44] <monochrom> geekosaur linked you to my tutorial so you should study it. Here it is again: http://www.vex.net/~trebla/haskell/IO.xhtml
[04:41:49] <nosewings> "m1 >>= \x -> m2" is the same thing as "do x <- m1; m2"
[04:42:12] <snake> ok thanks, not sure if i should start there or perhaps the learn you a haskell book
[04:42:43] <monochrom> When I teach Haskell I teach >>=, no "do". It works great.
[04:42:53] <EvanR> a gentle introduction is great, I don't care what anyone says https://www.haskell.org/tutorial/goodies.html
[04:43:32] <EvanR> if it had modern css maybe people would not have forgotten about it
[04:43:42] <monochrom> And this is not out of a one-sided bias. I once taught "do". Flopped. Students and TAs commented "yeah if you omit 'do' it's much better".
[04:44:16] <monochrom> And yeah I learned from the Gentle Introduction too.
[04:44:19] *** Joins: yuyua32 (~yuyua32@wireless-student-pt3-247-143.lut.ac.uk)
[04:45:16] <yuyua32> EvanR how would you make this functio work on strings as well
[04:45:18] <yuyua32> index (x:xs) n
[04:45:19] <yuyua32> Â  | n == x = 0
[04:45:19] <yuyua32> Â  | otherwise = 1 + index xs n
[04:45:20] <yuyua32> -- nsplit [] _ = ([1],[2])
[04:45:20] <yuyua32> nsplit xs x
[04:45:21] <yuyua32> Â  | x `notElem` xs = [1]
[04:45:21] <yuyua32> Â  | (length (fst (splitAt (index xs x) xs))) == 0 = nsplit (tail (snd(splitAt (index xs x) xs))) x
[04:45:22] <yuyua32> Â  | otherwise = length (fst(splitAt (index xs x) xs)) : nsplit (tail (snd(splitAt (index xs x) xs))) x
[04:45:24] <int-e> bind, hmm. You've got to learn the ropes (bind?) before getting your hands dirty with do-ing stuff with monads
[04:45:34] <int-e> @where paste
[04:45:34] <lambdabot> Help us help you: please paste full code, input and/or output at e.g. https://paste.tomsmeding.com
[04:45:38] <EvanR> aaaaaaah use a paste site
[04:45:46] <yuyua32> sorry will do
[04:46:01] <yuyua32> https://paste.tomsmeding.com/wvb51sup
[04:46:02] <yuyua32> here
[04:46:07] <EvanR> strings are actually lists
[04:46:11] <EvanR> so it should work?
[04:46:22] <yuyua32> gives me this error
[04:46:23] <yuyua32> 2:18: error: Variable not in scope: a :: Char
[04:46:29] <int-e> I *do* like the syntactic sugar. But it's a bit too magical for beginners.
[04:46:30] <snake> are String list or do you mean [Char]
[04:46:39] <yuyua32> I mean "aabbaa" "a"
[04:46:44] <EvanR> String = [Char]
[04:46:49] <snake> oh
[04:46:54] <yuyua32> sorry this was the error
[04:46:55] <yuyua32> Couldn't match expected type â€˜Charâ€™ with actual type â€˜[Char]â€™
[04:47:06] <EvanR> 'c' is a char, "c" is a string
[04:47:14] <EvanR> see if that is the problem
[04:47:31] <yuyua32> that was it
[04:47:36] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Quit: ChaiTRex)
[04:47:36] <yuyua32> amazin
[04:47:38] <yuyua32> thanks
[04:48:07] <int-e> :t span
[04:48:08] <lambdabot> (a -> Bool) -> [a] -> ([a], [a])
[04:48:17] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[04:48:32] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:297c:42b:53ca:ec88) (Ping timeout: 240 seconds)
[04:48:50] <int-e> > span (/= ',') "abc,def,ghi"
[04:48:51] <lambdabot>  ("abc",",def,ghi")
[04:49:40] *** Quits: bjobjo (~bjobjo@user/bjobjo) (Ping timeout: 268 seconds)
[04:50:18] *** Quits: Jing (~hedgehog@2604:a840:3::10c8) (Remote host closed the connection)
[04:50:50] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[04:50:56] *** Joins: Jing (~hedgehog@2604:a840:3::10c8)
[04:53:39] *** Quits: yuyua32 (~yuyua32@wireless-student-pt3-247-143.lut.ac.uk) (Quit: Client closed)
[04:55:32] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[04:55:32] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[04:55:32] *** Joins: wroathe (~wroathe@user/wroathe)
[04:55:34] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[04:56:30] *** Quits: acidsys (~LSD@2.lsd.systems) (Excess Flood)
[04:56:33] *** Joins: yuyua32 (~yuyua32@wireless-student-pt3-247-143.lut.ac.uk)
[04:57:02] *** Joins: acidsys (~LSD@2.lsd.systems)
[04:57:27] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 252 seconds)
[04:59:37] <Cale> janus, monochrom, jackdk: my idea about using ST/some monad there is just to set something up where you can't refer to the linear thing directly at all, and all the linear things either turn into operations that secretly update a reference, or something which is implicitly carried around by the monad.
[05:02:04] *** Quits: Guest19 (~Guest19@n110-33-34-202.hum1.act.optusnet.com.au) (Quit: Client closed)
[05:02:53] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:80ee:faa6:7302:e610)
[05:03:38] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:08:05] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 256 seconds)
[05:20:28] *** Quits: yuyua32 (~yuyua32@wireless-student-pt3-247-143.lut.ac.uk) (Quit: Client closed)
[05:26:39] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Quit: Leaving)
[05:31:06] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 260 seconds)
[05:31:36] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[05:32:56] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[05:34:13] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[05:34:16] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:34:50] *** Quits: xff0x (~xff0x@2001:1a81:5283:7b00:fc6:4766:ca7:9337) (Ping timeout: 260 seconds)
[05:35:01] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[05:35:40] *** Joins: img (~img@user/img)
[05:36:20] *** Joins: xff0x (~xff0x@2001:1a81:52c4:9100:e535:171:40b4:8c54)
[05:37:20] *** Quits: pfurla_ (~pfurla@2804:18:5804:c94c:6161:1466:1870:aecb) (Quit: gone to sleep. ZZZzzzâ€¦)
[05:38:18] *** Quits: nvmd (~nvmd@user/nvmd) (Quit: Later, nerds.)
[05:39:36] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[05:39:38] *** Quits: Megant_ (megant@user/megant) (Ping timeout: 268 seconds)
[05:40:49] *** Joins: Megant (megant@user/megant)
[05:49:46] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 260 seconds)
[05:49:59] *** Quits: mmhat (~mmh@55d46318.access.ecotel.net) (Ping timeout: 250 seconds)
[05:50:59] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:f5a3:3a61:fbe9:f021) (Ping timeout: 252 seconds)
[05:53:12] *** Joins: Guest64873 (~bot@172-220-180-248.res.spectrum.com)
[05:54:37] *** Quits: Guest64873 (~bot@172-220-180-248.res.spectrum.com) (Read error: Connection reset by peer)
[05:56:32] <snake> "There are a few exceptions: a few things in the library perform lazy I/O. But I have not covered them, and I will not cover them. They are very hard to explain and understand correctly. They are also rarely used in practice, since they are hard to use correctly. You are not missing out. But their names are readFile, getContents, hGetContents, and interact."'
[05:56:34] <snake> oop
[05:56:58] <snake> thanks dr. monochrom that was a good read
[05:57:08] <snake> i think i understand IO a little more now
[05:57:12] <nosewings> There's nothing wrong with getContents for toy projects and experiments, imo
[05:58:14] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[05:59:09] <snake> someone mentioned readFile earlier it looked ez
[06:00:06] <snake> % readFile "/etc/passwd"
[06:00:07] <yahb> snake: *** Exception: /etc/passwd: openFile: does not exist (No such file or directory)
[06:00:42] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Quit: Leaving)
[06:01:02] <snake> % readFile "/etc/fstab"
[06:01:02] <yahb> snake: *** Exception: /etc/fstab: openFile: does not exist (No such file or directory)
[06:01:57] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[06:03:56] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:04:32] <snake> is withFile preferable?
[06:04:47] *** Joins: ubert1 (~Thunderbi@p200300ecdf1abb0650b4610a52e3eab2.dip0.t-ipconnect.de)
[06:05:02] *** Quits: ubert (~Thunderbi@p200300ecdf1abbee60b6487a781d8af1.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[06:05:02] *** ubert1 is now known as ubert
[06:05:50] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[06:05:51] <snake> oh no that uses hHetContents
[06:06:42] *** Joins: aliosablack (~chomwitt@94.66.63.187)
[06:08:14] <EvanR> so * has precedence 7 and + has precedence 6. So there's no way to make an operator between them xD
[06:08:23] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[06:08:37] *** Quits: chomwitt (~chomwitt@2a02:587:dc0d:3700:12c3:7bff:fe6d:d374) (Ping timeout: 250 seconds)
[06:08:50] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[06:09:58] <snake> let 7 = 8
[06:10:03] <snake> BOOM
[06:10:06] <snake> saved your life
[06:10:53] <EvanR> > let 7 = 8 in 7
[06:10:54] <lambdabot>  7
[06:10:59] <EvanR> didn't work
[06:11:19] <EvanR> equational reasoning is a lie
[06:11:29] <oats> https://github.com/oatberry/aoc2021-haskell/blob/main/src/Day9.hs
[06:11:33] <oats> I've fallen into doing AoC in spurts
[06:11:46] <oats> I'm ok with this ðŸ˜Š
[06:15:56] <oats> I got to explore indexed optics, that was fun
[06:18:17] <oats> EvanR, oh, and Optics By Example uses good ol' lens
[06:18:23] <EvanR> i see
[06:19:12] *** Joins: yuyua32 (~yuyua32@wireless-student-pt3-247-143.lut.ac.uk)
[06:19:31] <yuyua32> throughOut :: Int -> Int -> String
[06:19:32] <yuyua32> throughOut n 0 = ""
[06:19:33] <yuyua32> with this function
[06:19:39] <yuyua32> how would you add an if statement like
[06:19:47] <yuyua32> | m == 0 = ""
[06:19:53] <yuyua32> but without guards? is that possible
[06:20:15] <snake> oats, nice i can read about 20% of that code, looks good tho
[06:20:25] <snake> (guesstimating)
[06:20:39] <oats> uh, is that an indictment of my code or of you lol
[06:20:55] *** Quits: yuyua32 (~yuyua32@wireless-student-pt3-247-143.lut.ac.uk) (Client Quit)
[06:21:02] <EvanR> yuyua32, there's no if statement, but there's an if expression of the form
[06:21:07] <EvanR> if _ then _ else _
[06:21:12] <oats> they gone
[06:21:18] <EvanR> blast
[06:21:38] <snake> oats, im a newbie
[06:21:43] <oats> oh haha
[06:21:58] <oats> if you have any specific questions I'd love to try and answer them :P
[06:22:28] <snake> how did you get printf
[06:22:37] *** Quits: nosewings (~ngpc@2603-8081-3e05-e2d0-f324-1a41-5d30-c2c5.res6.spectrum.com) (Remote host closed the connection)
[06:22:38] <oats> hmm?
[06:22:49] <snake> https://github.com/oatberry/aoc2021-haskell/blob/main/src/Common.hs#L70
[06:23:06] <oats> snake, line 25
[06:23:06] <snake> oh its imported
[06:25:05] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[06:27:19] <dsal> oats: what's this sum/map stuff?  sumOf folded to succ
[06:28:04] <oats> which line?
[06:28:14] <dsal> part1
[06:28:28] <dsal> If you're going to use lens, obscure harder!
[06:28:55] <oats> hmm yes may as well
[06:29:05] <oats> :P
[06:29:10] <dsal> Oh, there's a _2 in there.  I'm on a phone
[06:30:05] <snake> oats, is the C.readFile the best way to read a file, i heard that readFile is rarely used
[06:30:16] <snake> and getCOntents etc
[06:30:49] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Quit: Leaving)
[06:30:55] <oats> I used readFile because it was easy Â¯\_(ãƒ„)_/Â¯
[06:30:59] <dsal> > sumOf (folded . _2 . to succ) [('a', 3), ('b', 4)]
[06:31:01] <oats> there may be good reasons to use something else
[06:31:01] <lambdabot>  9
[06:31:07] <dsal> Wow, first try
[06:31:15] <oats> TIL of `to`
[06:32:09] <dsal> It makes it easy for your code to succ
[06:32:17] <oats> I was just giggling about "to succ"
[06:32:27] *** Quits: xff0x (~xff0x@2001:1a81:52c4:9100:e535:171:40b4:8c54) (Ping timeout: 250 seconds)
[06:34:32] *** Joins: xff0x (~xff0x@2001:1a81:52ce:1300:ffd2:54e0:463d:d772)
[06:34:56] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[06:35:29] *** Joins: sleblanc (~sleblanc@user/sleblanc)
[06:38:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[06:40:02] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:40:53] <EvanR> I used readFile for each day so far
[06:40:56] <EvanR> works
[06:41:04] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[06:42:45] *** Quits: nunggu (~q@gateway/tor-sasl/nunggu) (Ping timeout: 276 seconds)
[06:43:30] <sleblanc> EvanR, aoc?
[06:43:37] <EvanR> yeah
[06:43:53] <sleblanc> have you heard of the Big Boyâ„¢ inputs?
[06:43:57] <EvanR> yeah
[06:44:06] <EvanR> I made a few myself for stress testing
[06:44:31] <sleblanc> ok
[06:44:38] <sleblanc> i'm way behind
[06:44:45] <sleblanc> still on day4
[06:45:04] <EvanR> oof
[06:45:13] <EvanR> well, I'm still on day 2 in any previous year
[06:45:35] <sleblanc> I don't think those count
[06:45:42] <EvanR> lol
[06:45:49] <sleblanc> I did a bunch in the previous years
[06:46:39] <sleblanc> 2020 from 1 to 9
[06:46:48] <sleblanc> oh, actually 1-14
[06:47:34] <sleblanc> it really made me learn about monadic parsers
[06:48:48] <sleblanc> can we define data constructors in lambdabot?
[06:49:23] <EvanR> so far I only used a basic split function lol
[06:49:36] <sleblanc> > data Direction = Forward | Up | Down
[06:49:38] <lambdabot>  <hint>:1:1: error: parse error on input â€˜dataâ€™
[06:49:55] <EvanR> @let data Direction = Forward | Up | Down deriving Show
[06:49:56] <lambdabot>  Defined.
[06:50:02] <sleblanc> o
[06:50:03] <EvanR> :t Up
[06:50:05] <lambdabot> Direction
[06:50:41] <sleblanc> @let data Move = Move Direction Int
[06:50:42] <lambdabot>  Defined.
[06:50:55] <sleblanc> @let instance Default Move where def = Forward
[06:50:56] <lambdabot>  .L.hs:166:10: error:
[06:50:56] <lambdabot>      Not in scope: type constructor or class â€˜Defaultâ€™
[06:50:56] <lambdabot>      |
[06:51:07] <sleblanc> @let import Data.Default (Default)
[06:51:08] <lambdabot>  Defined.
[06:51:11] <sleblanc> @let instance Default Move where def = Forward
[06:51:12] <EvanR> Default...
[06:51:12] <lambdabot>  .L.hs:168:9: error:
[06:51:12] <lambdabot>      â€˜defâ€™ is not a (visible) method of class â€˜Defaultâ€™
[06:51:12] <lambdabot>      |
[06:51:22] <sleblanc> @let import Data.Default (Default(def))
[06:51:24] <lambdabot>  Defined.
[06:51:26] <sleblanc> @let instance Default Move where def = Forward
[06:51:27] <lambdabot>  .L.hs:169:15: error:
[06:51:27] <lambdabot>      â€¢ Couldn't match expected type â€˜Moveâ€™ with actual type â€˜Directionâ€™
[06:51:27] <lambdabot>      â€¢ In the expression: Forward
[06:51:40] <sleblanc> @let instance Default Direction where def = Forward
[06:51:41] <lambdabot>  Defined.
[06:51:42] <EvanR> the thrust to weight ratio of Default is not great
[06:51:54] <sleblanc> :t (Move <$>)
[06:51:55] <lambdabot> error:
[06:51:55] <lambdabot>     Data constructor not in scope: Move :: a -> b
[06:52:00] <oats> sleblanc, if you do much more we're gonna ask you to spin up your own ghci repl :)
[06:52:28] <sleblanc> Sorry about the noise, I'm trying to set it up for something that I found interesting
[06:52:33] <pragma-> you can /msg it.
[06:52:36] <sleblanc> ohhh
[06:53:59] <sleblanc> is it sharing the same environment when I privmsg lambdabot? I can't find the definitions I just created
[06:55:29] *** Quits: td__ (~td@muedsl-82-207-238-255.citykom.de) (Ping timeout: 268 seconds)
[06:56:11] <EvanR> maybe someone undefined everything out of spite
[06:56:17] <sleblanc> I wrote ":t (Move <$>)" in my GHCi and it said "f Direction -> f (Integer -> Move)" as I expected, but then I typed ":t flip (Move <$>)" and I don't understand the type signature
[06:56:47] *** Joins: td_ (~td@94.134.91.159)
[06:56:47] <sleblanc> flip (Move <$>) :: b -> (b -> Direction) -> Integer -> Move
[06:56:47] <EvanR> :t (Identity <*>)
[06:56:48] <lambdabot> error:
[06:56:48] <lambdabot>     Data constructor not in scope: Identity :: f (a -> b)
[06:56:52] <sleblanc> the Functor has disappeared
[06:56:59] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::9788) (Ping timeout: 252 seconds)
[06:56:59] *** Quits: jkaye (~jkaye@2601:281:8300:7530:e7c5:c36d:91ad:b90f) (Ping timeout: 252 seconds)
[06:57:05] <EvanR> :t (Identity <$>)
[06:57:06] <lambdabot> error:
[06:57:06] <lambdabot>     Data constructor not in scope: Identity :: a -> b
[06:57:27] <EvanR> suffering from a lack of Identity
[06:57:57] <sleblanc> identity theft
[07:06:24] <monochrom> identity theft: fmap id = id
[07:07:13] <monochrom> I guess that's fmap theft.
[07:08:02] <monochrom> identity theft take 2: s <> mempty = s.  s stole the identity!
[07:08:27] <dsal> On HDK, Identity steals you.
[07:08:35] <monochrom> haha
[07:08:38] <dsal> Damnit, I spelled HKD wrong
[07:09:05] <dsal> And in.  My phone should know what dumb thing I was trying to say.
[07:10:11] <dsal> sleblanc: Data.Default is quite out of fashion
[07:10:49] <byorgey> sleblanc: since flip expects a two-argument function, the only way to make   f Direction -> f (Integer -> Move)  into a 2-argument function is to instantiate f to  (b ->)
[07:11:03] <dsal> Closest I get in code is mempty
[07:11:51] <byorgey> f Direction -> f (Integer -> Move)    becomes    (b -> Direction) -> b -> Integer -> Move
[07:12:19] *** Quits: Jing (~hedgehog@2604:a840:3::10c8) (Remote host closed the connection)
[07:13:09] *** Joins: Jing (~hedgehog@2604:a840:3::10c8)
[07:13:46] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[07:14:37] <dsal> I wonder if Move could be a monoid.  You'd need to model it as a more general transformation, I'd think.
[07:27:35] <EvanR> Integer -> Integer monoid
[07:30:15] <dsal> Yeah, but in two dimensions.
[07:30:28] <dsal> I really liked the paper folding thing.
[07:30:49] <dsal> :t foldl1 (.) . reverse
[07:30:50] <lambdabot> [a -> a] -> a -> a
[07:35:38] <EvanR> product of two monoids monoid
[07:36:53] <sleblanc> Thanks byorgey, it makes a lot of sense
[07:37:05] <int-e> @let import qualified Data.Default
[07:37:06] <lambdabot>  Defined.
[07:37:08] <int-e> meh
[07:37:11] <int-e> @undef
[07:37:11] <lambdabot> Undefined.
[07:39:45] *** Quits: lambdabot (~lambdabot@haskell/bot/lambdabot) (Remote host closed the connection)
[07:41:38] *** Joins: lambdabot (~lambdabot@haskell/bot/lambdabot)
[07:41:39] *** Quits: lambdabot (~lambdabot@haskell/bot/lambdabot) (Remote host closed the connection)
[07:41:46] <int-e> oops, that was terrible timing.
[07:41:54] *** Joins: lambdabot (~lambdabot@silicon.int-e.eu)
[07:41:54] *** Quits: lambdabot (~lambdabot@silicon.int-e.eu) (Changing host)
[07:41:54] *** Joins: lambdabot (~lambdabot@haskell/bot/lambdabot)
[07:43:34] <int-e> @let import Data.Default
[07:43:34] <lambdabot>  .L.hs:85:1: error:
[07:43:34] <lambdabot>      Could not find module â€˜Data.Defaultâ€™
[07:43:35] <lambdabot>      Use -v (or `:set -v` in ghci) to see a list of the files searched for.
[07:43:58] <int-e> Okay. Better; before this, the @let would work but > would then fail.
[07:45:22] <int-e> (because these were done in two different package environments)
[07:51:12] *** Joins: pavonia (~user@user/siracusa)
[07:54:38] <int-e> if you're curious what exactly lambdabot has and what not, https://silicon.int-e.eu/lambdabot/State/packages.txt should be accurate
[07:56:05] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[07:57:27] <int-e> And I can add packages. I'm just not eager to :-P But the situation is nicer than the previous "whatever lambdabot happens to depend on plus a couple others" which looked like  https://silicon.int-e.eu/lambdabot/tmp/packages-host.txt
[07:58:39] <int-e> (don't ask me why stuff like wai is in there... maybe hoogle drags that in?)
[07:59:37] <int-e> *checks* yeah it does
[08:00:55] *** Quits: bliminse (~bliminse@host86-162-147-196.range86-162.btcentralplus.com) (Ping timeout: 256 seconds)
[08:02:23] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Ping timeout: 250 seconds)
[08:02:25] *** Quits: darkstarx (~darkstard@50.39.115.145) (Read error: Connection reset by peer)
[08:02:46] *** Joins: bliminse (~bliminse@host86-186-4-210.range86-186.btcentralplus.com)
[08:03:25] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[08:07:18] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[08:08:33] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[08:08:57] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[08:13:22] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Read error: Connection reset by peer)
[08:17:11] <Axman6> We don;t have some sort of efficient type for an array of Maybe's right? I'm surrently using a smallarray of Maybe but it would be nice if we had a maybeArray which had a bit vector of positions which contained values
[08:18:55] <Axman6> really what I want is an array of.... promises or something? I'm going to write to each position exactly once
[08:19:47] <EvanR> an array of IVars heh
[08:19:59] <EvanR> or, the array of reading a bunch of IVars
[08:21:22] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[08:22:58] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[08:26:11] <int-e> EvanR: maybe an array of thunks works? (aka knot-tying)
[08:27:42] <energizer> is there a name for a type that's like an enum but open to extension?
[08:27:44] <EvanR> yeah
[08:27:53] <EvanR> (int-e)
[08:28:01] <EvanR> energizer, extensible variant?
[08:28:48] <EvanR> I have a paper on it around here somewhere, explaining how polymorphism works
[08:29:18] <energizer> EvanR: papers please
[08:29:24] <int-e> ... cue half an hour of deafening silence
[08:29:30] <EvanR> yeah, AoC
[08:31:28] <Axman6> int-e: it would if I didn't need to fill the contents of the array in a PrimMonad
[08:34:42] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:41:58] *** Quits: mstksg (~jle`@cpe-23-240-75-236.socal.res.rr.com) (Quit: WeeChat 3.3)
[08:42:10] *** Joins: jle` (~jle`@cpe-23-240-75-236.socal.res.rr.com)
[08:42:29] <EvanR> energizer, https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/scopedlabels.pdf this paper has a section on extensible variants
[08:42:44] <energizer> thanks EvanR 
[08:52:43] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[08:52:46] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[08:53:36] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[08:54:01] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[08:54:44] *** Joins: jz99 (~jz99@150.203.2.53)
[08:57:01] *** Quits: deadmarshal (~deadmarsh@95.38.230.166) (Ping timeout: 256 seconds)
[08:59:14] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:59:29] *** Joins: deadmarshal (~deadmarsh@95.38.231.95)
[09:03:05] *** Joins: mbuf (~Shakthi@122.178.199.206)
[09:03:16] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[09:03:33] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Ping timeout: 265 seconds)
[09:04:05] *** Quits: Jing (~hedgehog@2604:a840:3::10c8) (Remote host closed the connection)
[09:04:43] *** Joins: Jing (~hedgehog@2604:a840:3::10c8)
[09:08:55] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[09:10:42] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[09:16:58] <dsal> This is another "Gets the right answer for the sample but wrong answer for my own input" problem.
[09:17:02] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[09:17:47] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[09:19:13] <int-e> dsal: me too
[09:23:46] *** Quits: earendel (uid498179@user/earendel) (Quit: Connection closed for inactivity)
[09:24:22] *** Joins: kayvank (~user@52-119-115-185.PUBLIC.monkeybrains.net)
[09:24:32] *** Quits: kayvank (~user@52-119-115-185.PUBLIC.monkeybrains.net) (Remote host closed the connection)
[09:26:00] <int-e> dsal: But it's by design, so I expect that *all* the inputs have that property so it's fair.
[09:27:55] *** Joins: altern (~Sergii@altern.corbina.com.ua)
[09:32:52] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Quit: mikoto-chan)
[09:34:24] *** Quits: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[09:34:43] *** Joins: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[09:37:55] *** Quits: johnjay (~pi@154.6.152.74) (Ping timeout: 250 seconds)
[09:38:50] *** Quits: Erutuon (~Erutuon@user/erutuon) (Quit: WeeChat 2.8)
[09:50:48] *** Joins: johnjay (~pi@154.6.152.74)
[09:53:30] *** Joins: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net)
[09:53:53] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:54:03] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[09:54:22] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[09:59:04] <int-e> >  unwords $ map (\x -> printf "%.2f" (195-x/30)) [5759,5744,5688,5606,5580,5527,5481,5458,5419,5407] -- the missing star is counted as rank 195
[09:59:06] <lambdabot>  "3.03 3.53 5.40 8.13 9.00 10.77 12.30 13.07 14.37 14.77"
[09:59:08] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[09:59:55] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[10:00:19] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[10:00:33] <EvanR> this is why I never test the example 
[10:00:41] <EvanR> just kidding
[10:02:27] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[10:07:10] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:158b:cfc1:e7b3:d4ac) (Remote host closed the connection)
[10:14:58] <EvanR> what's the significance of 3.03, 14.77 etc
[10:15:57] <int-e> it's average ranks so far on glguy's list
[10:16:24] <EvanR> 195 is people on the list, what's 30
[10:16:51] <int-e> number of parts so far. (also the 195 is number of people plus 1)
[10:17:16] <int-e> (because with 194 people, rank 1 gives 195 points)
[10:17:21] <int-e> err
[10:17:27] <int-e> 194 points, ugh
[10:17:30] <g> I should probably prune again, but doing so can mess with standings
[10:17:46] <g> So... I've been putting it off
[10:17:48] <EvanR> lol g
[10:17:55] <c_wraith> did you optimize your username for coding speed?
[10:18:04] <int-e> pruning the people with no stars won't affect the order
[10:18:16] <int-e> it'll just make the numbers smaller
[10:18:30] <g> Oh, good point
[10:18:48] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[10:18:50] <g> Removes the same number of points from everyone
[10:20:07] *** Joins: zaquest (~notzaques@5.130.79.72)
[10:20:54] <int-e> but it can affect old leaderboards where those people may have participated, if you care about that
[10:21:17] *** Quits: glebg (~user@85-192-130-19.dsl.esoo.ru) (Quit: ERC (IRC client for Emacs 27.2))
[10:21:32] *** Joins: Erutuon (~Erutuon@user/erutuon)
[10:21:57] <g> Last time I pruned I only took people off who hadn't participated in a couple years
[10:22:13] <g> I forget how far back I looked but maybe 3 years
[10:25:25] <g> c_wraith: yeah, I need every advantage I can get. I'm getting old
[10:25:35] <c_wraith> fancy tricks!
[10:26:10] *** EvanR is now known as e
[10:26:11] *** e is now known as Guest4358
[10:26:18] <Guest4358> :sunglasses:
[10:26:22] <Guest4358> drat
[10:26:28] *** Guest4358 is now known as EvanR
[10:26:39] <c_wraith> someone else got there before you
[10:27:15] <g> He was the first one on the network
[10:28:04] <glguy> so that would be a hard race to win :3
[10:31:13] *** Joins: bjobjo (~bjobjo@user/bjobjo)
[10:31:22] <EvanR> I bet no one has registered empty string yet
[10:33:01] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:158b:cfc1:e7b3:d4ac)
[10:36:02] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[10:40:01] <int-e> glguy: Oh wait, what I said isn't quite true: for people who don't have all stars, removing people without stars makes things easier.
[10:41:20] <glguy> well, if we get a few more to join I'll clean 10 off
[10:42:04] <int-e> is there a size limit for private lists?
[10:42:10] <glguy> 200
[10:42:28] <int-e> I see. Yeah we're close to that.
[10:45:31] *** Joins: chele (~chele@user/chele)
[10:46:06] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 260 seconds)
[10:47:29] *** Joins: whatif (~whatif@2400:8902::f03c:92ff:fe60:98d8)
[10:48:32] *** Joins: topbloke (~textual@27-33-31-40.tpgi.com.au)
[10:48:53] *** Quits: topbloke (~textual@27-33-31-40.tpgi.com.au) (Client Quit)
[10:49:29] *** Joins: michalz (~michalz@185.246.204.121)
[10:50:21] *** Quits: deadmarshal (~deadmarsh@95.38.231.95) (Ping timeout: 256 seconds)
[10:53:57] *** Joins: deadmarshal (~deadmarsh@95.38.231.95)
[10:57:12] *** Joins: topbloke (~textual@27-33-31-40.tpgi.com.au)
[10:58:04] <int-e> Of course if you really want to you can do a far more detailed analysis of the JSON file: https://int-e.eu/~bf3/tmp/aoc_haskell.txt
[10:58:34] <xerox> 11 :(
[10:58:44] *** Joins: fr33domlover (~fr33@2.55.142.29)
[10:59:53] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Read error: Connection reset by peer)
[11:01:02] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[11:05:07] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[11:05:20] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:05:59] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[11:06:46] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[11:08:09] <g> Is there existing work for ranking something like this in a sensible way?
[11:11:10] *** Joins: Bob_Esponja (~Bob_Espon@240.red-176-83-54.dynamicip.rima-tde.net)
[11:11:30] *** Joins: pfurla (~pfurla@2804:18:5804:c94c:6161:1466:1870:aecb)
[11:11:35] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Read error: Connection reset by peer)
[11:11:52] *** Quits: topbloke (~textual@27-33-31-40.tpgi.com.au) (Quit: Textual IRC Client: www.textualapp.com)
[11:12:34] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[11:15:36] *** Quits: Bob_Esponja (~Bob_Espon@240.red-176-83-54.dynamicip.rima-tde.net) (Read error: Connection reset by peer)
[11:18:07] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Ping timeout: 256 seconds)
[11:18:15] *** Quits: dfg (~dfg@user/dfg) (Ping timeout: 250 seconds)
[11:18:31] *** Joins: dfg (dfg@2600:3c00::f03c:92ff:feb4:be75)
[11:18:31] *** Quits: dfg (dfg@2600:3c00::f03c:92ff:feb4:be75) (Changing host)
[11:18:31] *** Joins: dfg (dfg@user/dfg)
[11:18:41] *** Quits: Clint (~Clint@user/clint) (Ping timeout: 250 seconds)
[11:19:50] *** Joins: Bob_Esponja (~Bob_Espon@240.red-176-83-54.dynamicip.rima-tde.net)
[11:20:28] *** Joins: Clint (~Clint@user/clint)
[11:22:04] *** Quits: Bob_Esponja (~Bob_Espon@240.red-176-83-54.dynamicip.rima-tde.net) (Read error: Connection reset by peer)
[11:22:50] *** Joins: Bob_Esponja (~Bob_Espon@240.red-176-83-54.dynamicip.rima-tde.net)
[11:23:36] *** Quits: Bob_Esponja (~Bob_Espon@240.red-176-83-54.dynamicip.rima-tde.net) (Read error: Connection reset by peer)
[11:26:11] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[11:26:26] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:30:30] *** Joins: Bob_Esponja (~Bob_Espon@240.red-176-83-54.dynamicip.rima-tde.net)
[11:34:16] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[11:34:52] *** Joins: chele_ (~chele@user/chele)
[11:35:02] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 240 seconds)
[11:35:07] *** Quits: chele (~chele@user/chele) (Ping timeout: 256 seconds)
[11:35:28] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:1b1:ff3c:2e88:391a)
[11:35:54] *** Quits: hololeap_ (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[11:36:06] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:158b:cfc1:e7b3:d4ac) (Remote host closed the connection)
[11:36:07] *** Quits: Bob_Esponja (~Bob_Espon@240.red-176-83-54.dynamicip.rima-tde.net) (Read error: Connection reset by peer)
[11:36:20] *** Joins: hololeap_ (~hololeap@user/hololeap)
[11:36:30] *** Quits: altern (~Sergii@altern.corbina.com.ua) (Ping timeout: 260 seconds)
[11:36:50] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:39:34] *** Joins: enyc (~enyc@user/enyc)
[11:39:40] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[11:46:35] *** chele_ is now known as chele
[11:47:43] <int-e> c_wraith: final octopodes update: https://gist.github.com/int-e/27962eb9a9d1980cc5b4ba8baad59a42#file-flash-cc-L22-L44
[11:48:19] <c_wraith> those are both quite large numbers
[11:48:38] <int-e> imagine going for 66 steps and then entering a 2 million step cycle
[11:49:38] <int-e> I find the length of those cycles mind-boggling even if they're rare (average cycle length is about 72.3 for the 53.9% of configurations that do not synchronize)
[11:50:29] <int-e> c_wraith: I didn't track how many configurations I tested; I think it's about 20 billion.
[11:52:05] *** Joins: bahamas (~lucian@86.120.77.115)
[11:52:25] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Remote host closed the connection)
[11:52:33] <bahamas> hello! how do I convert a string/text that represents a number into the corresponding number?
[11:52:50] <c_wraith> > read "123" :: Int
[11:52:52] <lambdabot>  123
[11:53:02] <c_wraith> assuming that's what you mean by "represents"
[11:53:44] <bahamas> c_wraith: that's what I mean. is there a different meaning (just curious)?
[11:54:16] <c_wraith> sure.  Maybe you mean the english phrase corresponding to a number, such that f "twenty-three" = 23
[11:54:28] <c_wraith> Or any number of other representations :)
[11:54:36] <bahamas> c_wraith: ah, I see :)
[11:55:59] <int-e> c_wraith: The strange thing is... I'd expect the trails towards a cycle to be about half as long as the cycle for a random function. So this... feels decicively non-random.
[11:57:08] <c_wraith> well, the problem had a lot of structure.  I'd agree it's non-random. :)
[11:58:27] <int-e> but then how can there be long cycles at all? it's a mystery :)
[11:58:38] <dminuoso> bahamas: You should really use `readMaybe` though.
[11:58:49] <dminuoso> `read` is one of those things I wish we didn't have.
[11:59:18] <dminuoso> It must be the number #1 source of bottoms causing crashes and misbehaviors, usually even from some transitive dependency..
[11:59:23] <bahamas> dminuoso: yeah. I was about to ask how I handle the exception
[11:59:39] <int-e> c_wraith: this is the kind of thing that one can /easily/ put a thesis' equivalent of work into without getting any benefit at all :)
[12:00:24] <c_wraith> Ok, but what function do you use when you've already validated the characters are numeric and don't want to do a lot of Maybe wrapping and unwrapping?
[12:00:42] <c_wraith> That's the majority of cases I use read
[12:01:48] *** Joins: Bob_Esponja (~Bob_Espon@240.red-176-83-54.dynamicip.rima-tde.net)
[12:02:48] <c_wraith> wow, my part 2 today is shockingly slow.  Is PSQueue doing some sort of O(n) crap?
[12:03:12] <kritzefitz> I guess that is a valid use case for `read`. But I am a bit surprised. I usually use `readMaybe` to determine if something is numeric in the first place. Why bother checking beforehand if you're gonna need the result of `read` anyway?
[12:03:27] <kritzefitz> *need the result of "readMaybe" anway
[12:03:34] *** Joins: cfricke (~cfricke@user/cfricke)
[12:04:03] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:04:04] *** Quits: Bob_Esponja (~Bob_Espon@240.red-176-83-54.dynamicip.rima-tde.net) (Read error: Connection reset by peer)
[12:04:05] <c_wraith> because I write a lot of parsers where it's really easy to say    read <$> some (satisfy isDigit)
[12:04:10] <int-e> c_wraith: I did wonder about that, but I guess 500x500 is not exactly small
[12:05:03] <kritzefitz> Makes sense. I guess I don't write parsers that often.
[12:05:05] *** Joins: max22- (~maxime@2a01cb08833598009a038ff51315adf9.ipv6.abo.wanadoo.fr)
[12:06:21] *** Quits: ph88 (~ph88@2a02:8109:9e00:71d0:943d:5b05:e9f7:79b5) (Ping timeout: 250 seconds)
[12:06:26] <int-e> c_wraith: that said, I didn't use psqueue (maybe I should try...) so I can't really answer that question.
[12:07:40] <c_wraith> I'm seeing 4 seconds on my system.  That's shockingly slow for only a quarter of a million nodes with at most 4 edges from them
[12:07:53] *** Quits: jz99 (~jz99@150.203.2.53) (Ping timeout: 256 seconds)
[12:08:39] <int-e> do you track visited nodes in a Data.Set or differently?
[12:08:57] <c_wraith> in the keys of a separate Data.Map
[12:09:07] <c_wraith> so basically the same
[12:10:09] <c_wraith> ok, it's not doing anything O(n), at least.
[12:10:18] <c_wraith> I just have high constant factors around here.
[12:13:24] <c_wraith> ugh.  less than 50% productivity.  that'd be the problem.
[12:15:27] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:20:03] <int-e> Hmm. So psqueue performs worse for me than the S.Set (p, k) that I used as an alternative.
[12:21:15] <int-e> Unless I'm missing a better alternative to  P.insertWith min k p psq  to insert or update the priority of a key.
[12:22:43] *** Joins: jgeerds (~jgeerds@55d4ac73.access.ecotel.net)
[12:24:26] <int-e> (not *much* slower; PSQueue is at 2.3 seconds; Set is at 1.5)
[12:24:30] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[12:27:11] <c_wraith> Oh, mine is somewhat slower because I'm doing a lot more work than necessary for just this problem.  Actually, come to think of it, I could find a much more efficient solution for one part.
[12:27:19] *** Joins: earendel (uid498179@user/earendel)
[12:28:38] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[12:29:05] <int-e> And that's despite the fact that using a PSQueue reduces the number of items taken from the queue from 916486 to 586012
[12:29:45] <int-e> > 916486/586012
[12:29:46] <lambdabot>  1.5639372572575305
[12:30:12] *** Joins: teo (~teo@user/teo)
[12:30:14] *** Quits: whatif (~whatif@2400:8902::f03c:92ff:fe60:98d8) (Quit: Client closed)
[12:30:15] <c_wraith> I never understood the data structure it uses anyway...
[12:30:22] <int-e> > 916486/586012 * 2.3/1.4 -- PSQueue overhead peroperation?
[12:30:23] <lambdabot>  2.569325494065943
[12:30:24] *** Quits: teo (~teo@user/teo) (Read error: Connection reset by peer)
[12:31:00] <int-e> (the 2.3/1.4 is to be taken with a huge grain of salt; I'm dividing total runtimes here)
[12:32:22] <int-e> and of course the `containers` library has seen an insane amount of effort put into optimization
[12:33:10] <int-e> c_wraith: in any case, the times are close enough that I don't think PSQueue is doing anything bad in terms of asymptotic behavior
[12:33:29] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[12:33:38] <int-e> Oh, hmm. Maybe I should check how big these things grow
[12:33:39] *** Joins: YoungFrog (~youngfrog@39.129-180-91.adsl-dyn.isp.belgacom.be)
[12:34:04] *** Joins: acidjnk (~acidjnk@p200300d0c7271e736483cc3bf5018c54.dip0.t-ipconnect.de)
[12:34:09] <c_wraith> yeah, I came to the conclusion that bad asymptotics would perform way worse
[12:34:16] <peddie> https://hackage.haskell.org/package/psqueues looks like a faster implementation in their microbenchmarks
[12:35:19] <c_wraith> that's a good find
[12:36:39] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:158b:cfc1:e7b3:d4ac)
[12:36:58] <int-e> set grows to 3356 elements, the PSQueue grows to 1951 elements (plus a few because I'm accounting where it's convenient, rather where it's the most accurate)
[12:38:04] <c_wraith> though...  I see some oddities in that API.  Like.  Its version of "alter" is actually "alterF" but specialized to ((,) a), and providing no real alterF or alter without that overhead...
[12:38:28] *** Quits: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net) (Remote host closed the connection)
[12:41:22] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:158b:cfc1:e7b3:d4ac) (Ping timeout: 260 seconds)
[12:42:33] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[12:42:37] *** Joins: cheater1__ (~Username@user/cheater)
[12:42:40] *** cheater1__ is now known as cheater
[12:43:44] *** Joins: gensyst (gensyst@user/gensyst)
[12:44:00] <gensyst> data MyType :: [Nat] -> * -> * where
[12:44:14] <gensyst> How can I change that so that it's not [Nat] but [1 + Nat] ?
[12:44:27] <gensyst> (Only positive integers allowed at the type level.)
[12:45:06] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[12:46:12] *** Joins: notzmv (~zmv@user/notzmv)
[12:46:27] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[12:47:40] <dminuoso> Mmm, is there even a difference between nat and nat-sans-zero?
[12:47:53] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:53] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:56] *** allbery_b is now known as geekosaur
[12:47:57] <int-e> c_wraith: hmm, in my adaptation it's slower than PSQueue. It looks awful too:  insert m (k, p) = snd $ P.alter (maybe ((), Just (p, ())) (\(q, _) -> ((), Just (min p q, ())))) k m
[12:48:41] <int-e> (that's for OrdPSQ)
[12:49:15] <int-e> Oh, HashPSQ is actually faster
[12:49:44] *** Joins: jgeerds_ (~jgeerds@55d4ac73.access.ecotel.net)
[12:50:05] <int-e> (on part with Data.Set in this case)
[12:52:00] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[12:52:27] <int-e> So maybe "for priority search queues use HashPSQ from psqueues unless you deal with adverserial input" is the right conclusion here.
[12:52:39] *** Quits: jgeerds (~jgeerds@55d4ac73.access.ecotel.net) (Ping timeout: 265 seconds)
[12:52:40] *** Joins: mncheck (~mncheck@193.224.205.254)
[12:53:00] <int-e> It's a pity that there's no easier way to decrease-key-or-insert though.
[12:53:17] <int-e> s/key/priority/
[12:54:03] <YoungFrog> I'm new to Haskell, and wanted to try Debug.Hood.Observe but  "cabal install hood" fails (with [__2] rejecting: FPretty-1.1 (conflict: base==4.14.3.0/installed-4.14.3.0, FPretty => base>=4.5 && <4.11)) -- I also tried intalling Hoed instead, but that fails while compiling Text.PrettyPrint.FPretty (Ambiguous occurrence â€˜<>â€™). am I doing something wrong ?
[12:54:09] <c_wraith> I don't really understand why that isn't alterF with a separate alter function
[12:54:14] <int-e> (well, it is easy enough, it's just ugly because of the extra associated values and the extra result from `alter`)
[12:55:01] *** Quits: bahamas (~lucian@86.120.77.115) (Ping timeout: 256 seconds)
[12:55:17] <int-e> Did we do that in 2014?
[12:57:06] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[12:57:16] <gensyst> dminuoso, well Nat can include 0 as you may know
[12:57:41] <int-e> (That's when the package was first uploaded to hackage, and the API has only changed minimally since then; new functions are: deleteMin, atMostView, unsafeMapMonotonic)
[12:58:07] <dminuoso> gensyst: out of curiosity, what's the goal?
[12:58:24] <int-e> But I honestly don't know when alterF was first seriously proposed and discussed (in the context of containers).
[12:58:47] *** Quits: Erutuon (~Erutuon@user/erutuon) (Quit: WeeChat 2.8)
[12:58:57] *** Joins: Erutuon (~Erutuon@user/erutuon)
[12:59:30] <gensyst> dminuoso, I have a function that processes the data type's numbers one by one, and some functions there assume that the integer in question is positive (example: doStuff: forall n. (KnownNat n) => Vector (n + 1) Int -> String)
[13:00:06] <gensyst> and that function call doesn't compile because at that point, that one (from "one by one") number is at that point not known to be positive as expected.
[13:02:48] <lortabac> gensyst: in general you can use (n + 1) or Succ (if you have an inductive type) for this invariant
[13:03:32] *** Quits: darchitect (~darchitec@2a00:23c6:3584:df00:7dec:bf13:8fa:748c) (Ping timeout: 240 seconds)
[13:03:53] <lortabac> (n + 1) is guaranteed to be positive
[13:03:55] *** Joins: xsperry (~xs@user/xsperry)
[13:04:28] *** Joins: off^ (~off@wsip-98-188-240-142.mc.at.cox.net)
[13:05:14] <gensyst> lortabac, yes and i have it on "doStuff". the question is, how to get it into the MyType ?
[13:12:13] <gensyst> I think I found a way.. i had to put the KnownNat and "+1" stuff into the data *constructors*.
[13:13:02] <gensyst> in any case this is getting kind of pity because my data type is now very specific. i wonder if haskell's type system can even generalize it at all. (so the same type can be used for both positive cases and non-negative cases)
[13:17:34] <lortabac> gensyst: you need to define a GADT that is indexed by the same nat you gave it as a constructor argument
[13:17:41] <lortabac> in other words, a singleton
[13:18:50] <lortabac> but at this point things start getting really complex, and probably not worth it
[13:19:03] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[13:20:59] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[13:22:04] <gensyst> lortabac, thanks! cool to know it's possible, but yeah, i'll keep the types specific for now and get back to those after i have read "Thinking with Types" book!
[13:22:10] <gensyst> any other books/resources you recommend?
[13:24:06] <lortabac> gensyst: I'll be honest, after spending a considerable amount of time on these problems, my advice is "don't"
[13:24:31] <lortabac> use Idris or Agda
[13:24:43] <gensyst> why? what happened :)
[13:25:00] <lortabac> or even better, just accept that you can't encode every possible invariant in the types
[13:25:45] <lortabac> gensyst: it gets **extremely complex** very quickly
[13:26:01] <gensyst> It stays less complex with Idris/Agda?
[13:26:26] <gensyst> Is this a limitation in Haskell that's here to stay on Haskell?
[13:26:36] <int-e> The type checker should be helping you, not vice versa.
[13:27:15] <dminuoso> gensyst: The limitation in Haskell is that type level programming is rather an artifact than a feature.
[13:27:34] <dminuoso> It just so happens that, after enabling a bunch of bolted-on extensions, you can do a bit of type level programming.
[13:27:59] <lortabac> do you know the "fraction of our power" meme? that describes the problem well :)
[13:28:14] <int-e> In the same spirit, types should be dependable, not dependent. (There may be /some/ overlap.)
[13:29:25] *** Quits: Jing (~hedgehog@2604:a840:3::10c8) (Remote host closed the connection)
[13:29:31] <gensyst> Are there any plans to remedy this in Haskell, with some breaking changes?
[13:29:40] <gensyst> Otherwise I fear Haskell will be left in the dust :(
[13:29:47] <gensyst> by more powerful langs
[13:30:04] *** Joins: Jing (~hedgehog@2604:a840:3::10c8)
[13:30:16] <int-e> gensyst: Are you sure?
[13:30:25] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[13:30:35] <gensyst> int-e, no :)
[13:30:52] <gensyst> lortabac, didn't know the meme until now, thanks
[13:30:53] <lortabac> gensyst: https://imgflip.com/i/5xyend :)
[13:31:05] <int-e> Anyway, there are plans for dependent types in Haskell and the struggle is to make them *not* break things (except in exceptional cases)
[13:31:36] <gensyst> This is sad :( Haskell is already the past :(
[13:31:41] <merijn> Man...had an epiphany how to speed up yesterday's AOC right as I went to bed and then spend like an hour lying awake focussed on that >.>
[13:31:50] <gensyst> but it has libraries and probably some good optimizations
[13:31:56] <merijn> I'm not convinced Dependent Types are the future, tbh
[13:32:06] <merijn> So not sure why you'd say Haskell is in the past
[13:32:19] <int-e> Me neither. They make for good papers though.
[13:32:33] <gensyst> compared to everything else i've used haskell is in the future lol. everything else seems useless in comparison
[13:33:00] <dminuoso> gensyst: My favourite example of how "bolted on this is", is the typing the technical interview blog post. :)
[13:33:00] *** Joins: cosimone (~user@93-47-228-203.ip115.fastwebnet.it)
[13:33:08] *** Joins: Bob_Esponja (~Bob_Espon@240.red-176-83-54.dynamicip.rima-tde.net)
[13:33:48] <int-e> (In a paper you can make up a whole world to your liking. In practice, you want to use libraries and their authors will inevitably have different ideas about which properties they'd like to track in types... so when you combine those... hmm, well, I'm speculating that it's a mess)
[13:33:49] *** Quits: alx741 (~alx741@181.199.42.79) (Read error: Connection reset by peer)
[13:35:23] <gensyst> int-e. so maybe with Haskell, we've found the right balance!
[13:35:29] <gensyst> for the next 2 decades.
[13:35:30] *** Quits: Bob_Esponja (~Bob_Espon@240.red-176-83-54.dynamicip.rima-tde.net) (Read error: Connection reset by peer)
[13:35:44] <oak-> Can't you already get quite close to dependently typed programming by enabling various language extensions, such as DataKinds?
[13:36:41] <merijn> oak-: Sure, if you like suffering
[13:38:35] <oak-> I have anyway got the idea that it might not be always reasonable to do type level programming everywhere, but there are special cases where there are benefits
[13:39:28] *** Joins: tom_ (~tom@2a00:23c8:970c:4801:f5c6:93c3:2f5e:e0)
[13:40:18] *** Joins: darchitect (~darchitec@82-132-214-28.dab.02.net)
[13:40:44] <oak-> Somehow I find Haskell's type-level programming comparable to LISP macros (although there is also Template Haskell), you don't use them everywhere but in situations where you want to create your own DSL to solve the problem
[13:41:25] *** Quits: zincy (~tom@2a00:23c8:970c:4801:2c67:e51d:1302:54d3) (Ping timeout: 252 seconds)
[13:41:40] <int-e> . o O ( Oh, while I'm quipping: Those who give up type inference for stronger type systems deserve neither. )
[13:43:06] <int-e> gensyst: I think that's too subjective to meaningfully confirm or deny.
[13:44:52] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:45:35] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[13:46:26] *** Joins: Bob_Esponja (~Bob_Espon@240.red-176-83-54.dynamicip.rima-tde.net)
[13:47:07] *** Quits: Bob_Esponja (~Bob_Espon@240.red-176-83-54.dynamicip.rima-tde.net) (Read error: Connection reset by peer)
[13:47:37] *** Lord_of_Life_ is now known as Lord_of_Life
[13:49:28] <gensyst> well i'm betting on haskell
[13:49:31] <dminuoso> oak-: More often than not, a simple `when badCondition (throwIO MyException)` can do wonders.
[13:49:44] <dminuoso> It's so much easier to read and follow, and maintain, than crazy type level programming to assert something
[13:50:47] <oak-> This reminds me that I actually bought the "Thinking with types" -book but haven't read it :D
[13:50:59] *** Joins: alx741 (~alx741@157.100.93.160)
[13:51:23] <dminuoso> Another important thing with type level trickery is that it greatly reduces the amount of people capable or willing to help maintain your package.
[13:51:51] <dminuoso> When you have to enable 10 extensions and be a GHC wizard to work with some given code, you essentialy ensure you're doing this all by yourself.
[13:53:39] <int-e> Yeah maybe we could rank those extensions by how much they *help* with writing correct code. GADTs would be my number 1, I think.
[13:54:32] <int-e> TypeInType would be near the bottom
[13:54:57] <dminuoso> int-e: Amusingly TypeInType is implicitly enabled anyway.
[13:55:04] <dminuoso> You cant not have it.
[13:56:08] *** Joins: kuribas (~user@ip-188-118-57-242.reverse.destiny.be)
[13:56:25] <gensyst> all i want to do is mandate equal sizes for certain vectors and it's *already* painful lol
[13:56:34] <gensyst> i guess that's as far as i can push it
[13:56:39] <gensyst> s/can/should
[13:56:52] <int-e> dminuoso: It does have the advantage of not getting in the way, but I don't really have a use for the freedoms it offers.
[13:57:38] <int-e> Also I still have ghc-8.0.2 around if needed ;)
[14:05:03] <merijn> bleh, there's no efficient data structure for lookups with 2 different keys, I guess
[14:10:00] <int-e> Like a 2D array?
[14:10:19] <merijn> no, that'd just be 1 key that's a tuple
[14:10:35] <int-e> Okay. I don't understand what you mean then.
[14:11:49] <merijn> int-e: I have a bunch of values that have 2 independent keys, both identifying the same value and I want to look up with either. Now I'm just using 2 maps, but that's rather a PITA to keep in sync
[14:11:52] <geekosaur> like a database table with two indexed fields?
[14:12:04] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[14:12:37] <merijn> Essentially
[14:13:19] <geekosaur> would consider replicating that: stick values in a vector and have both maps provide the index into the vector. still a pain to keep in sync though]
[14:13:31] *** Joins: pfurla[m] (uid345156@id-345156.tinside.irccloud.com)
[14:13:39] <geekosaur> always will be, you're just looking for someone else to have dealt with the pain :)
[14:14:35] *** Joins: ph88 (~ph88@2a02:8109:9e00:71d0:943d:5b05:e9f7:79b5)
[14:14:38] *** Joins: yuyua32 (~yuyua32@wireless-student-pt3-240-10.lut.ac.uk)
[14:20:14] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[14:21:07] *** Quits: mbuf (~Shakthi@122.178.199.206) (Ping timeout: 250 seconds)
[14:23:05] *** Joins: mbuf (~Shakthi@171.61.229.99)
[14:24:11] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[14:25:07] *** Quits: pfurla (~pfurla@2804:18:5804:c94c:6161:1466:1870:aecb) (Quit: gone to sleep. ZZZzzzâ€¦)
[14:25:15] *** Quits: yuyua32 (~yuyua32@wireless-student-pt3-240-10.lut.ac.uk) (Quit: Client closed)
[14:28:20] *** Joins: benin (~benin@183.82.204.250)
[14:28:31] *** Quits: mbuf (~Shakthi@171.61.229.99) (Ping timeout: 256 seconds)
[14:28:40] *** Joins: mbuf (~Shakthi@122.178.230.23)
[14:29:13] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[14:30:42] *** Joins: DNH (~DNH@8.43.122.49)
[14:31:35] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[14:32:02] *** Quits: benin (~benin@183.82.204.250) (Client Quit)
[14:33:22] *** Quits: ubert (~Thunderbi@p200300ecdf1abb0650b4610a52e3eab2.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[14:34:24] *** Joins: ubert (~Thunderbi@p200300ecdf1abb061518ea9ba8d342d1.dip0.t-ipconnect.de)
[14:34:30] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[14:36:56] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[14:36:56] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:37:33] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[14:37:50] *** Joins: benin (~benin@183.82.204.250)
[14:38:47] *** cyphase_eviltwin is now known as cyphase
[14:44:11] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[14:46:39] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[14:49:02] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[14:49:55] *** Joins: alx741 (~alx741@157.100.93.160)
[14:50:43] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Ping timeout: 252 seconds)
[14:51:33] *** Joins: y04nn (~y04nn@92.223.89.196)
[14:53:44] *** Joins: lavaman (~lavaman@98.38.249.169)
[14:54:49] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[14:55:34] *** Joins: mmhat (~mmh@55d47819.access.ecotel.net)
[14:57:15] *** AlexNoo_ is now known as AlexNoo
[14:59:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 265 seconds)
[15:02:37] *** Quits: koz (~koz@121.99.240.58) (Ping timeout: 240 seconds)
[15:03:54] *** Quits: hololeap_ (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[15:04:03] *** Joins: koz (~koz@121.99.240.58)
[15:04:05] *** Joins: hololeap_ (~hololeap@user/hololeap)
[15:05:11] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[15:09:12] *** Joins: jz99 (~jz99@n110-33-34-202.hum1.act.optusnet.com.au)
[15:10:14] *** Joins: __monty__ (~toonn@user/toonn)
[15:10:15] *** Quits: jz99 (~jz99@n110-33-34-202.hum1.act.optusnet.com.au) (Client Quit)
[15:14:20] *** Quits: gensyst (gensyst@user/gensyst) (Quit: Leaving)
[15:15:17] *** Quits: rembo10 (~rembo10@remulis.com) (Quit: ZNC 1.8.2 - https://znc.in)
[15:15:33] *** Joins: ph88^ (~ph88@95.90.240.104)
[15:16:03] *** Quits: y04nn (~y04nn@92.223.89.196) (Remote host closed the connection)
[15:16:26] *** Joins: rembo10 (~rembo10@remulis.com)
[15:18:38] *** Quits: acidjnk (~acidjnk@p200300d0c7271e736483cc3bf5018c54.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[15:21:26] *** Joins: jakalx (~jakalx@base.jakalx.net)
[15:22:14] *** Joins: alx741 (~alx741@157.100.93.160)
[15:23:59] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[15:25:18] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[15:27:25] *** Quits: yaroot (~yaroot@175.0.30.125.dy.iij4u.or.jp) (Ping timeout: 240 seconds)
[15:27:39] *** Joins: yaroot (~yaroot@2409:12:ac0:2300:680e:dbff:fe1e:4953)
[15:28:43] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[15:33:33] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[15:33:47] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[15:34:17] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[15:35:25] *** Joins: altern (~Sergii@altern.corbina.com.ua)
[15:38:53] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[15:39:10] *** Quits: jgeerds_ (~jgeerds@55d4ac73.access.ecotel.net) (Ping timeout: 260 seconds)
[15:39:55] *** Quits: altern (~Sergii@altern.corbina.com.ua) (Ping timeout: 256 seconds)
[15:40:27] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:45:42] *** Quits: jle` (~jle`@cpe-23-240-75-236.socal.res.rr.com) (Ping timeout: 260 seconds)
[15:45:43] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[15:46:30] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:47:26] *** Joins: jle` (~jle`@cpe-23-240-75-236.socal.res.rr.com)
[15:47:44] *** Quits: cfricke (~cfricke@user/cfricke) (Ping timeout: 252 seconds)
[15:48:45] *** Quits: hololeap_ (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[15:48:53] *** Joins: Achylles (~Achylles_@2804:431:d725:5f74:726:267b:60a8:3cf6)
[15:49:33] *** Quits: nfd (~nfd@user/nfd) (Ping timeout: 256 seconds)
[15:49:52] *** Joins: acidjnk (~acidjnk@p200300d0c7271e736483cc3bf5018c54.dip0.t-ipconnect.de)
[15:49:55] *** Joins: hololeap_ (~hololeap@user/hololeap)
[15:50:13] *** Joins: alx741 (~alx741@157.100.93.160)
[15:51:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:52:17] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:59:42] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:02:46] *** Joins: yhsiveht (~Nishant@2405:201:f005:c007:5dca:71f9:c326:6e3b)
[16:03:04] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[16:03:54] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[16:04:03] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:06:11] *** Quits: thevishy (~Nishant@2405:201:f005:c007:49c7:f8b1:7727:93e) (Ping timeout: 250 seconds)
[16:06:47] *** Quits: Achylles (~Achylles_@2804:431:d725:5f74:726:267b:60a8:3cf6) (Remote host closed the connection)
[16:09:13] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[16:10:01] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:13:03] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[16:13:38] *** Joins: Vajb (~Vajb@2001:999:62:f3d1:4390:fbed:1f9b:9d03)
[16:15:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[16:15:52] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:20:06] *** Joins: jippiedoe (~david@2a02-a44c-e14e-1-f6c0-f1a6-a625-ead4.fixed6.kpn.net)
[16:20:07] *** Quits: Vajb (~Vajb@2001:999:62:f3d1:4390:fbed:1f9b:9d03) (Read error: Connection reset by peer)
[16:20:52] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[16:21:10] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Remote host closed the connection)
[16:21:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[16:21:32] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[16:21:38] *** Joins: alx741 (~alx741@157.100.93.160)
[16:21:41] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:22:37] <dminuoso> int-e: Regarding GADTs, I find that somewhat surprising. I have not yet really encountered the need or usecase to write more-correect-code with them.
[16:22:40] *** Quits: pfurla[m] (uid345156@id-345156.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[16:22:51] <dminuoso> But maybe I'm missing out on some common patterns with them
[16:24:23] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[16:24:24] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[16:25:09] *** Joins: Vajb (~Vajb@2001:999:62:f3d1:4390:fbed:1f9b:9d03)
[16:26:57] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[16:27:29] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:27:44] *** Joins: noctux2 (~noctux@p5b2cc15e.dip0.t-ipconnect.de)
[16:28:38] *** Quits: noctux2 (~noctux@p5b2cc15e.dip0.t-ipconnect.de) (Client Quit)
[16:30:01] *** Quits: max22- (~maxime@2a01cb08833598009a038ff51315adf9.ipv6.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[16:33:13] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Remote host closed the connection)
[16:33:34] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[16:34:05] *** Quits: darchitect (~darchitec@82-132-214-28.dab.02.net) (Read error: Connection reset by peer)
[16:34:05] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[16:37:22] *** Joins: gensyst (gensyst@user/gensyst)
[16:37:47] <gensyst> foo @Int a b    is working but  a `foo @Int` b   is not
[16:37:53] <gensyst> How to apply types to section operators?
[16:38:13] <merijn> gensyst: You can't apply anything within `` it only works on single variables
[16:39:11] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[16:39:49] <jippiedoe> flip (foo @Int) b
[16:40:28] <dminuoso> let f = foo @Int in l `f` r
[16:41:26] <gensyst> ok thank you
[16:41:39] <gensyst> not the prettiest to have those intermediate vars though, but ok
[16:43:59] <geekosaur> the parser gets ugly if you allow more than just an identifier in ``
[16:44:12] <geekosaur> especially whenb you try to nest them :)
[16:45:04] <dminuoso> geekosaur: Well you can of course just write `foo @Int b a`
[16:45:10] <dminuoso> Oh. gensyst
[16:45:16] *** Quits: benin (~benin@183.82.204.250) (Quit: The Lounge - https://thelounge.chat)
[16:45:21] *** Joins: pfurla (~pfurla@177.25.184.15)
[16:45:32] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[16:45:41] *** Joins: bahamas (~lucian@84.232.140.13)
[16:46:45] <geekosaur> problem there is you get "cleverly" named things like `notFollowedBy` that expect to be written infix and look bass-ackwards when written prefix
[16:48:13] *** Joins: benin (~benin@183.82.204.250)
[16:48:14] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Ping timeout: 260 seconds)
[16:48:38] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:51:23] <dminuoso> Fair, I tend to use isSuffixOf/isInfixOf/isPrefixOf in infix notation exclusively
[16:52:07] *** Joins: alx741 (~alx741@157.100.93.160)
[16:58:11] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 250 seconds)
[16:58:36] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[17:00:32] *** Joins: Ainoretho (~ypw@huji-132-64-244-88.xt.huji.ac.il)
[17:01:35] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[17:02:30] <gensyst> thanks guys
[17:02:33] *** Quits: gensyst (gensyst@user/gensyst) (Quit: Leaving)
[17:03:30] *** Quits: benin (~benin@183.82.204.250) (Quit: The Lounge - https://thelounge.chat)
[17:03:47] *** Joins: benin (~benin@183.82.204.250)
[17:06:37] *** Quits: bahamas (~lucian@84.232.140.13) (Ping timeout: 256 seconds)
[17:16:32] *** Joins: max22- (~maxime@2a01cb0883359800f72e75eb3cbff1a0.ipv6.abo.wanadoo.fr)
[17:16:42] *** Joins: alx741 (~alx741@157.100.93.160)
[17:21:39] *** Joins: jkaye (~jkaye@2601:281:8300:7530:323:f5e4:2678:9ded)
[17:29:29] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[17:30:58] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[17:32:09] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[17:32:22] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[17:32:36] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:1b1:ff3c:2e88:391a) (Quit: WeeChat 2.8)
[17:34:18] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[17:34:35] <iphy> is there a parser generator for trees? like happy is for token streams. I want to re-parse the tree after parsing a token stream into a tree. something like pattern matching but more concise. basically I'd like to first parse a more general language and then identify patterns on it
[17:34:39] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[17:36:38] <dminuoso> iphy: Is that not simply an algebra on the tree?
[17:37:40] <geekosaur> that's more or less what I'm wondering. I mean, the whole point of parsing into a tree representation is to enable such analysis
[17:38:02] <iphy> for example, I'd parse a C file into a list of top level declarations (comments, includes, functions, defines, #ifdef/#endif, etc.) and then re-parse the list of declarations into "includes first, defines and functions next, and everything should be wrapped in a header guard"
[17:38:24] <dminuoso> That does not sound like "parsing"
[17:38:29] <dminuoso> That sounds like a simple tree transformation.
[17:38:36] <dminuoso> i.e. `transform :: Tree -> Tree`
[17:38:41] <iphy> sort of, yes
[17:38:51] <iphy> except the output tree might be a different type, but sure, it could be the same type
[17:38:58] <iphy> and yes, it's a simple tree transformation
[17:39:05] <iphy> is there a "tree transformation" generator?
[17:39:17] <dminuoso> You mean a function?
[17:39:29] <dminuoso> I'm really unsure what you are looking for, that isn't covered by a simple function with pattern matching.
[17:40:05] <iphy> header ::= ifndef ID define ID include+ decl+ endif
[17:40:17] <iphy> that's what I want to express
[17:40:46] <iphy> header ::= ifndef ID define ID include+ decl+ endif { Header $2 $5 $6 }
[17:41:15] <iphy> or, maybe in haskell pattern matching syntax:
[17:41:16] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:158b:cfc1:e7b3:d4ac)
[17:42:16] <dminuoso> By the way, changing the order of macros in a C program can alter its meaning.
[17:42:47] <iphy> header = \case (Ifndef guard) (Define _) incs@[Include...] decls@[Decl...] Endif -> Header guard incs decls
[17:42:50] <iphy> (pseudo-haskell)
[17:43:26] <iphy> I'm not changing C programs, I'm parsing them
[17:43:33] <geekosaur> you'd have specific AST nodes for those which you can match against
[17:43:48] <iphy> yes, I have AST nodes for Include, Decl, etc.
[17:43:48] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[17:44:12] <iphy> I want to match a list of nodes against this pattern
[17:45:38] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:158b:cfc1:e7b3:d4ac) (Ping timeout: 260 seconds)
[17:46:11] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Ping timeout: 245 seconds)
[17:46:17] <iphy> if there's a library for expressing this pattern, that's cool too
[17:49:09] *** Quits: yhsiveht (~Nishant@2405:201:f005:c007:5dca:71f9:c326:6e3b) (Quit: Leaving)
[17:54:40] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:59:19] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[18:01:13] <geekosaur> I was thinking hoopl but that's for dataflow analysis
[18:02:12] *** Joins: alx741 (~alx741@157.100.93.160)
[18:02:32] <geekosaur> but tbh if I know a header is going to have that pattern I build it into the parser rules and the resulting AST will have your Header node
[18:03:29] <iphy> right, that's an option
[18:03:54] <iphy> but I was hoping to be able to do more pattern matching and analysis that way more easily
[18:04:06] <dminuoso> I would simply do this in haskell code.
[18:04:25] <dminuoso> Once you have your AST, you can transform it, and if the resulting data type changes, make it a simple `f :: AST1 -> AST2`
[18:04:32] <iphy> https://gist.github.com/iphydf/766056c412aa360946a57612b2537daa
[18:04:43] <iphy> does this snippet make sense? what I'd like to express?
[18:04:56] <dminuoso> No
[18:05:01] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:05:01] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:05:01] *** Joins: wroathe (~wroathe@user/wroathe)
[18:05:14] <dminuoso> Or maybe
[18:07:31] <jippiedoe> I don't completely know what you want, but maybe attribute grammars provide something similar?
[18:09:05] *** Quits: sleblanc (~sleblanc@user/sleblanc) (Ping timeout: 252 seconds)
[18:09:52] <iphy> https://gist.github.com/iphydf/b1fc840ae314b9e89b9f3bbaf2def78e
[18:09:55] <iphy> more or less
[18:10:09] <iphy> probably monadic and with Alternative instead
[18:10:21] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[18:11:47] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Client Quit)
[18:12:00] <iphy> so line 2 turns into the function on line 6
[18:12:52] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[18:13:21] <dminuoso> I think I have a broad understanding what you are trying to do here.
[18:13:36] <dminuoso> And it seems you should simply write this into your happy grammar.
[18:14:20] <dminuoso> Or potentially a separate pass, much in line with how macro expansion is implemented in C compielrs
[18:14:31] *** Joins: featurebug (~featurebu@49.205.122.91)
[18:14:53] <dminuoso> i.e. first parse the macro language into a MacroAst of course, and then parse the C bits and pieces separately
[18:15:35] <iphy> hmm
[18:15:58] *** Joins: benin1 (benin@gateway/vpn/protonvpn/benin)
[18:16:11] <iphy> maybe I can turn ast nodes into the token type of a second happy parser
[18:16:32] <iphy> but I'd like to make many smaller parsers like this, used for various analyses
[18:16:58] <iphy> making many happy parsers seems a bit heavy
[18:17:02] <dminuoso> Something like `data MacroAst = Define T.Text T.Text | If T.Text MacroAst | C T.Text
[18:17:17] <dminuoso> And then `C T.Text` would be the raw C chunks
[18:17:50] <iphy> right, but that would be specific to one use case
[18:17:53] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[18:18:02] *** Quits: benin (~benin@183.82.204.250) (Ping timeout: 240 seconds)
[18:18:44] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[18:18:52] *** Joins: benin (~benin@183.82.204.250)
[18:20:50] *** Quits: benin (~benin@183.82.204.250) (Client Quit)
[18:20:51] *** Quits: benin1 (benin@gateway/vpn/protonvpn/benin) (Ping timeout: 256 seconds)
[18:21:12] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[18:21:14] *** Joins: PVPANTHONY (~The_viole@203.77.49.232)
[18:21:53] *** Quits: jlamothe_ (~jlamothe@198.251.61.229) (Quit: leaving)
[18:27:05] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[18:27:22] *** Quits: joeyh (joeyh@kitenet.net) (Ping timeout: 268 seconds)
[18:27:59] *** Joins: joeyh (~joeyh@kitenet.net)
[18:27:59] *** Quits: nshepperd (nshepperd@2600:3c03::f03c:92ff:fe28:92c9) (Ping timeout: 268 seconds)
[18:28:02] *** Quits: landonf (landonf@mac68k.info) (Ping timeout: 240 seconds)
[18:28:36] *** Quits: hays (rootvegeta@fsf/member/hays) (Ping timeout: 268 seconds)
[18:28:45] *** Joins: h_ (~rootveget@fsf/member/hays)
[18:28:47] <featurebug> Hi all, I am trying to build haskell on wsl but getting this error - https://pastebin.com/Qjcxm33d . Any idea what is the problem?
[18:29:33] <merijn> featurebug: Any specific reason you're trying to build GHC from source?
[18:29:48] *** Joins: nshepperd (~nshepperd@li364-218.members.linode.com)
[18:30:31] *** Joins: nvmd (~nvmd@user/nvmd)
[18:31:46] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[18:31:49] <featurebug> yes I was trying to run the external-stg-interpreter, following these instructions - https://github.com/grin-compiler/ghc-whole-program-compiler-project#usage
[18:32:06] <featurebug> part of that was building ghc. not entirely sure why that is necessary
[18:32:23] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[18:33:09] *** Joins: landonf (landonf@mac68k.info)
[18:33:13] *** Joins: jlamothe (~jlamothe@198.251.61.229)
[18:33:21] <merijn> ah, because he forked GHC
[18:34:51] <merijn> Looks like there's *something* broken with his GHC fork under WSL, but no clue what
[18:35:11] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:35:11] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:35:11] *** Joins: wroathe (~wroathe@user/wroathe)
[18:35:34] <featurebug> ok ok, is it generally possible to build ghc in wsl? 
[18:35:42] <merijn> no clue, tbh
[18:35:59] <iphy> should be
[18:36:06] <iphy> "error: variable â€˜stg_exports_GHCziDataziFastStringâ€™ has initializer but incomplete type"
[18:36:13] *** Joins: xkuru (~xkuru@user/xkuru)
[18:36:21] <iphy> that doesn't sound like an OS specific issue
[18:39:53] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[18:41:44] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[18:44:45] *** Joins: alx741 (~alx741@157.100.93.160)
[18:48:54] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Quit: Reconnecting)
[18:49:06] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[18:49:21] *** Quits: fr33domlover (~fr33@2.55.142.29) (Remote host closed the connection)
[18:50:00] <geekosaur> that looks to me like a missing or incomplete include file defining ForeignExportsList
[18:50:28] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:54:30] *** Joins: tdmm (1c9b9145fc@2604:bf00:561:2000::1c8)
[18:58:17] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[18:59:46] *** Quits: PVPANTHONY (~The_viole@203.77.49.232) (Quit: Leaving)
[19:00:16] *** Joins: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk)
[19:00:19] *** Quits: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk) (Remote host closed the connection)
[19:00:26] *** Joins: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk)
[19:01:23] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Quit: Leaving)
[19:01:36] *** Quits: pfurla (~pfurla@177.25.184.15) (Quit: gone to sleep. ZZZzzzâ€¦)
[19:02:33] <geekosaur> hm, conceivably that's a platform issue if whatever include file is supposed to define that is generated and the generation went wrong somehow because of platform
[19:02:55] <geekosaur> but I'd expect ForeignExportsList to not be platform specific tbh
[19:03:50] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[19:07:45] *** Quits: ldlework (~hexeme@user/hexeme) (Ping timeout: 250 seconds)
[19:10:23] *** Quits: DNH (~DNH@8.43.122.49) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[19:10:51] <janus> Cale: when you say "linear things [..] secretly update a reference" do you mean they update a counter? so we're talking about run-time errors if you use it wrong? 
[19:11:25] *** Quits: eco (~ubuntu@ec2-54-201-230-197.us-west-2.compute.amazonaws.com) (Ping timeout: 252 seconds)
[19:15:01] *** Joins: alx741 (~alx741@157.100.93.160)
[19:17:34] *** Joins: bahamas (~lucian@84.232.140.13)
[19:18:30] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[19:19:02] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[19:19:52] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[19:22:21] *** Joins: hexeme (~hexeme@user/hexeme)
[19:22:33] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[19:22:45] *** Joins: eco (~ubuntu@ec2-54-201-230-197.us-west-2.compute.amazonaws.com)
[19:23:38] *** Joins: vincenz (~poucet@104.134.21.7)
[19:26:47] *** Joins: Guest57 (~Guest57@82.47.22.49)
[19:28:41] *** Quits: Guest57 (~Guest57@82.47.22.49) (Client Quit)
[19:29:38] <merijn> Whoo!
[19:29:53] <merijn> New solution to Day14 takes 0.01 for part 1&2, down from 40s!
[19:29:54] <geekosaur> moo?
[19:30:06] *** Quits: chizil[m] (~chizilmat@2001:470:69fc:105::1:34ab) (Quit: You have been kicked for being idle)
[19:31:27] <Taneb> merijn: nice!
[19:33:25] <merijn> I realised my initial version was just a very dumb specific hack that can be trivially generalised :p
[19:33:34] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[19:33:48] <merijn> Of course, this only occurred to me as I hit the bed and then spent 40 minutes lying awake thinking it through, so my sleep was ruined...
[19:34:31] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 252 seconds)
[19:37:33] *** Joins: alx741 (~alx741@157.100.93.160)
[19:40:10] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[19:41:13] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[19:42:25] *** Joins: DNH (~DNH@8.43.122.49)
[19:42:25] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[19:43:02] *** Joins: alx741 (~alx741@157.100.93.160)
[19:47:27] *** Joins: DavSanchez (~DavSanche@73.red-83-34-157.dynamicip.rima-tde.net)
[19:49:32] <jippiedoe> Did you solve it in a similar way to day6?
[19:50:53] <merijn> Not at all :p
[19:52:01] <merijn> Day6 has a fairly easy iterative solution
[19:52:08] <merijn> Day14 not so much
[19:52:10] *** Quits: DavSanchez (~DavSanche@73.red-83-34-157.dynamicip.rima-tde.net) (Remote host closed the connection)
[19:52:20] <c_wraith> Day 14 has a solution almost identical to day 6
[19:52:40] *** Joins: DavSanch_ (~davsanche@73.red-83-34-157.dynamicip.rima-tde.net)
[19:53:19] <merijn> c_wraith: Not identical to my day 6 solution :p
[19:53:32] <merijn> c_wraith: https://github.com/merijn/AdventOfCode/blob/master/Day6.hs#L42-L51
[19:54:11] <merijn> I don't see how I'd apply that approach to Day14
[19:54:18] <c_wraith> nope, it's basically the same.  The only difference is that you're working over a mildly larger state space.
[19:55:05] <merijn> c_wraith: This is my Day14 solution: https://github.com/merijn/AdventOfCode/blob/master/Day14.hs#L71-L115
[19:58:13] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[20:01:43] *** Quits: bahamas (~lucian@84.232.140.13) (Ping timeout: 250 seconds)
[20:01:55] *** Joins: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net)
[20:05:22] *** Joins: Nolrai2 (~Nolrai2@73.240.1.39)
[20:05:50] *** Quits: off^ (~off@wsip-98-188-240-142.mc.at.cox.net) (Remote host closed the connection)
[20:06:57] <DavSanch_> Good day everyone, I have a question about cabal.project files that include several packages (for example, a lib, a cli and a gui). Is there any way to make the packages defined there visible to the others?
[20:07:33] <DavSanch_> I mean, is it possible for example that the "gui" package could import a library defined in the "lib" package, provided it hasn't been installed nor uploaded to hackage
[20:07:55] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[20:08:03] *** Quits: biberu (~biberu@user/biberu) (Read error: Connection reset by peer)
[20:08:28] <jippiedoe> merijn: How is that so fast?! I thought that the final string would have been way too large to store
[20:08:36] <Nolrai2> Is there a reason mapAccum is in Data.Conduit.List and doesn't have a renamed version in Data.Conduit.Combinators?
[20:09:03] <merijn> jippiedoe: Who says anything about storing final strings? :)
[20:10:41] <merijn> jippiedoe: You can check the solution at the link above :)
[20:11:38] <jippiedoe> Ah, I read through it too fast: 'polymerInsertion' itself looks like the naive algorithm, but I have to look at fastScore a bit more
[20:11:50] <merijn> jippiedoe: Yeah, that was is my initial simple expansion
[20:12:13] <merijn> jippiedoe: Which works perfectly fine lazily, constant memory for 40 minutes chugging along the part 2 solution :p
[20:12:24] <merijn> But probably won't finish before the heat death of the universe :p
[20:14:37] <Nolrai2> DavSanch_: short answer is "yes". https://docs.haskellstack.org/en/stable/yaml_configuration/ describes how for the stack build tool, iiuc your question.
[20:15:16] *** Quits: ph88^ (~ph88@95.90.240.104) (Quit: Leaving)
[20:15:16] <merijn> DavSanch_: ah, wait, I only now see the plural "cabal.project file*s*"
[20:15:24] <merijn> DavSanch_: Why is that plural? Because that sounds wrong
[20:15:34] *** Joins: ph88^ (~ph88@ip5f5af068.dynamic.kabel-deutschland.de)
[20:15:44] *** Quits: ph88^ (~ph88@ip5f5af068.dynamic.kabel-deutschland.de) (Client Quit)
[20:15:47] <DavSanch_> You're right, I was talking about a single cabal.project file :)
[20:15:58] *** Quits: ph88 (~ph88@2a02:8109:9e00:71d0:943d:5b05:e9f7:79b5) (Quit: Leaving)
[20:16:15] *** Joins: ph88 (~ph88@ip5f5af068.dynamic.kabel-deutschland.de)
[20:16:28] *** Joins: alx741 (~alx741@157.100.93.160)
[20:16:31] <merijn> DavSanch_: If you list all the package in the cabal.project packages it should "just work"?
[20:16:59] <merijn> DavSanch_: see https://github.com/merijn/broadcast-chan/blob/master/cabal.project#L1
[20:17:30] <jippiedoe> merijn: Alright, I get it now, that's very neat! The solution I had / c_wraith was mentioning, is just like Day6, except you count all possible pairs
[20:17:55] <DavSanch_> Thanks guys, most probably I have something wrong around because I'm finding errors. I'll take a look
[20:17:57] <merijn> c_wraith already whispered me about that solution :)
[20:18:02] *** Quits: lechner (~lechner@debian/lechner) (Ping timeout: 240 seconds)
[20:18:14] <merijn> DavSanch_: helps to pastebin the errors (and/or link to repo)
[20:19:22] <DavSanch_> It's for this one: https://github.com/DavSanchez/hematria
[20:19:41] <DavSanch_> latest changes (i.e. the GUI importing the lib) are not up yet
[20:20:27] *** Joins: lechner (~lechner@debian/lechner)
[20:21:22] <merijn> What are the errors?
[20:22:41] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[20:23:14] <DavSanch_> Could not find module 'x' It is not a module in the current program, or in any known package 
[20:23:14] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[20:23:19] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:158b:cfc1:e7b3:d4ac)
[20:24:33] <DavSanch_> Ahh solved, just copied/pasted the exported lib from the library folder and it worked, had a typo somewhere
[20:25:05] <merijn> :p
[20:25:09] <DavSanch_> Thanks @merijin @Nolrai2
[20:25:34] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[20:25:57] *** Quits: srk (~sorki@user/srk) (Remote host closed the connection)
[20:26:18] *** Joins: srk (~sorki@user/srk)
[20:26:32] *** Quits: jippiedoe (~david@2a02-a44c-e14e-1-f6c0-f1a6-a625-ead4.fixed6.kpn.net) (Remote host closed the connection)
[20:28:38] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[20:29:32] *** Joins: econo (uid147250@user/econo)
[20:30:28] *** Joins: Akiva (~Akiva@user/Akiva)
[20:31:18] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[20:32:14] *** Quits: jackhill (~jackhill@kalessin.dragonsnail.net) (Remote host closed the connection)
[20:34:20] *** Joins: biberu (~biberu@user/biberu)
[20:34:46] *** Quits: biberu (~biberu@user/biberu) (Remote host closed the connection)
[20:35:33] *** Joins: jakalx (~jakalx@base.jakalx.net)
[20:36:04] *** Joins: lambdalove-sadvi (~user@2804:d51:47f5:ac00:9bf5:fb5f:29:c009)
[20:40:01] *** Joins: biberu (~biberu@user/biberu)
[20:40:53] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 252 seconds)
[20:41:02] *** Joins: alx741 (~alx741@157.100.93.160)
[20:42:47] *** Joins: xkuru (~xkuru@user/xkuru)
[20:43:12] *** Joins: Guest47 (~Guest47@2a02:8109:b63f:ed22:a45d:5f40:3bfd:dbd3)
[20:43:46] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[20:43:52] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Quit: Leaving)
[20:45:02] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[20:45:31] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::9788)
[20:45:31] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[20:46:25] *** Joins: bahamas (~lucian@84.232.140.13)
[20:52:48] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[20:53:49] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[20:54:23] *** Joins: Neuromancer (~Neuromanc@user/neuromancer)
[20:56:30] *** Quits: lupulo (~lupulo_@128.red-83-35-42.dynamicip.rima-tde.net) (Ping timeout: 260 seconds)
[20:56:58] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[20:59:19] *** Quits: DavSanch_ (~davsanche@73.red-83-34-157.dynamicip.rima-tde.net) ()
[21:02:02] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[21:02:15] *** Quits: Guest47 (~Guest47@2a02:8109:b63f:ed22:a45d:5f40:3bfd:dbd3) (Quit: Client closed)
[21:03:34] *** Joins: alx741 (~alx741@157.100.93.160)
[21:03:43] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:05:38] *** Quits: acidjnk (~acidjnk@p200300d0c7271e736483cc3bf5018c54.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[21:07:25] *** Quits: ph88 (~ph88@ip5f5af068.dynamic.kabel-deutschland.de) (Quit: Leaving)
[21:08:38] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[21:10:55] *** Quits: DNH (~DNH@8.43.122.49) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:10:55] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[21:12:07] <cigsender> :q
[21:12:24] *** Quits: cigsender (~cigsender@74.124.58.162) (Quit: leaving)
[21:13:10] *** Quits: mbuf (~Shakthi@122.178.230.23) (Quit: Leaving)
[21:13:33] *** Joins: jackhill (~jackhill@kalessin.dragonsnail.net)
[21:13:45] *** Quits: puke (~puke@user/puke) (Remote host closed the connection)
[21:14:00] *** Joins: puke (~puke@user/puke)
[21:19:57] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[21:20:29] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Ping timeout: 256 seconds)
[21:22:26] *** Quits: aliosablack (~chomwitt@94.66.63.187) (Quit: Leaving)
[21:22:40] *** Joins: aliosablack (~chomwitt@2a02:587:dc19:a500:12c3:7bff:fe6d:d374)
[21:22:40] *** Quits: aliosablack (~chomwitt@2a02:587:dc19:a500:12c3:7bff:fe6d:d374) (Remote host closed the connection)
[21:22:59] *** Joins: chomwitt (~chomwitt@2a02:587:dc19:a500:12c3:7bff:fe6d:d374)
[21:23:04] *** Quits: kuribas (~user@ip-188-118-57-242.reverse.destiny.be) (Quit: ERC (IRC client for Emacs 26.3))
[21:23:58] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[21:24:34] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[21:28:48] *** hexeme is now known as ldlework
[21:29:03] *** Joins: alx741 (~alx741@157.100.93.160)
[21:31:22] <EvanR> hmm is there a slick ADT which is a list of alternating a and b
[21:31:23] *** Quits: Vajb (~Vajb@2001:999:62:f3d1:4390:fbed:1f9b:9d03) (Read error: Connection reset by peer)
[21:31:35] <EvanR> first element could be a or b
[21:32:19] *** Quits: jinsun (~quassel@user/jinsun) (Read error: Connection reset by peer)
[21:33:04] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[21:33:59] *** jackhill is now known as KM4MBG
[21:34:12] <EvanR> data NodeA a b = NodeA a (NodeB a b)
[21:34:12] *** KM4MBG is now known as jackhill
[21:34:23] <EvanR> data NodeB a b = NodeB b (NodeA a b)
[21:34:29] <geekosaur> % data AB a = ANil | ACons a (BA a); data BA a = BNil | BCons a (AB a)
[21:34:29] <yahb> geekosaur: 
[21:34:52] <xerox> or [Either a b] with smart constructors / view patterns
[21:34:56] <EvanR> BCons holds no b
[21:35:14] <monochrom> That's probably a typo
[21:35:16] <EvanR> yeah
[21:35:20] <geekosaur> oh, sorry, missed that part, just had alternating as
[21:35:39] <EvanR> so this is slick ... then what is the type of something that takes one xD
[21:35:51] <EvanR> Either (AB a b) (BA a b) ...
[21:35:52] *** Joins: jinsun (~quassel@user/jinsun)
[21:36:02] <EvanR> not as slick
[21:36:07] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[21:36:20] *** Joins: zebrag (~chris@user/zebrag)
[21:36:23] <geekosaur> % data AB a b = ANil | ACons a (BA a b)' data BA a b = BNil | BCons b (AB a b)
[21:36:23] <yahb> geekosaur: ; <interactive>:143:40: error: parse error on input `data'
[21:36:31] <geekosaur> % data AB a b = ANil | ACons a (BA a b); data BA a b = BNil | BCons b (AB a b)
[21:36:31] <yahb> geekosaur: 
[21:37:07] <geekosaur> what you'd do with it, besides possibly building an inefficient rbtree, I dunno
[21:37:33] <EvanR> if that is what the data looks like... then it expresses that in types
[21:38:21] <EvanR> i guess it needs a 3rd type to act as a container so it could start on A or B
[21:38:34] *** Joins: pfurla (~pfurla@201.17.118.230)
[21:38:36] *** Quits: aforemny (~aforemny@static.248.158.34.188.clients.your-server.de) (Quit: ZNC 1.8.2 - https://znc.in)
[21:39:01] <EvanR> i looked at GADT that uses a toggling Bool phantom and realized where I was headed
[21:39:09] *** Joins: aforemny (~aforemny@static.248.158.34.188.clients.your-server.de)
[21:39:18] *** Joins: akegalj (~akegalj@141-136-187-255.dsl.iskon.hr)
[21:39:30] <monochrom> Heh inefficient rbtree.
[21:40:59] <EvanR> if values are like music, types are the notation that gives a partial picture of what the composer wants
[21:42:04] <akegalj> why `(+x) 1` is valid and equal to `1+x` while `(-x) 1` is invalid?
[21:42:26] <EvanR> which makes dynamic types death metal or something
[21:42:41] <geekosaur> akegalj, because of a syntactic oddity
[21:43:03] <geekosaur> (-x) is (negate x)
[21:43:05] <monochrom> Consider (subtract x)
[21:43:19] <geekosaur> becuase unary minus is special cased
[21:43:35] <monochrom> But an exception was made.
[21:43:39] <geekosaur> (but see the LexicalNegation extension)
[21:43:42] <EvanR> :t (x -)
[21:43:43] <lambdabot> Expr -> Expr
[21:43:50] <EvanR> :t (x +)
[21:43:51] <lambdabot> Expr -> Expr
[21:44:03] <EvanR> I'm being bamboozled
[21:44:14] <geekosaur> simple-reflect strikes again
[21:44:20] <monochrom> Syntax decisions are social constructs.
[21:44:28] <EvanR> :t (\x -> -(x -))
[21:44:29] <lambdabot> (Num a, Num (a -> a)) => a -> a -> a
[21:44:35] <EvanR> >:D
[21:44:46] <EvanR> wait
[21:44:47] <akegalj> monochrom: subtract is ok, thanks!
[21:44:51] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 250 seconds)
[21:45:12] <EvanR> @pl (\x -> negate . (x -))
[21:45:13] <lambdabot> (negate .) . (-)
[21:47:27] *** Joins: DNH (~DNH@8.44.0.72)
[21:51:29] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[21:53:29] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:54:32] *** Joins: alx741 (~alx741@157.100.93.160)
[21:57:53] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 252 seconds)
[21:59:23] *** Quits: pfurla (~pfurla@201.17.118.230) (Quit: gone to sleep. ZZZzzzâ€¦)
[21:59:24] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[21:59:38] *** Joins: kranius (~kranius@222.186.245.213.rev.sfr.net)
[22:00:46] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[22:05:11] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[22:05:32] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[22:05:34] *** Quits: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net) (Ping timeout: 260 seconds)
[22:05:37] *** Quits: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com) (Quit: Konversation terminated!)
[22:06:23] *** Quits: kranius (~kranius@222.186.245.213.rev.sfr.net) (Ping timeout: 256 seconds)
[22:06:42] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:07:09] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:158b:cfc1:e7b3:d4ac) (Remote host closed the connection)
[22:07:10] *** Joins: Jing_ (~hedgehog@2604:a840:3::103e)
[22:09:59] *** Quits: Jing (~hedgehog@2604:a840:3::10c8) (Ping timeout: 252 seconds)
[22:11:51] *** Joins: waleee-cl (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:11:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Read error: Connection reset by peer)
[22:12:28] *** Quits: waleee-cl (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Client Quit)
[22:12:32] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 240 seconds)
[22:13:17] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:13:17] *** Quits: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk) (Remote host closed the connection)
[22:16:40] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:158b:cfc1:e7b3:d4ac)
[22:17:04] *** Joins: alx741 (~alx741@157.100.93.160)
[22:18:54] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[22:21:19] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[22:22:19] <Cale> janus: No, they do whatever we would have done with the thing that was supposed to be linearly accessed
[22:23:33] <Cale> janus: It's just that if you don't let anyone see what the thing actually is, and you destroy the thing after each use, replacing it with the result of the operation, then you can be sure that it's accessed once.
[22:23:34] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[22:24:08] <Cale> (well, at most once, anyway -- the "at least once" part is perhaps a bit trickier)
[22:25:48] *** Quits: hololeap_ (~hololeap@user/hololeap) (Read error: Connection reset by peer)
[22:27:11] *** Joins: hololeap_ (~hololeap@user/hololeap)
[22:30:59] *** Quits: bahamas (~lucian@84.232.140.13) (Ping timeout: 250 seconds)
[22:35:02] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.3)
[22:35:52] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[22:36:05] *** Joins: nfd (~nfd@user/nfd)
[22:40:03] *** Joins: alx741 (~alx741@157.100.93.160)
[22:40:07] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Quit: Leaving)
[22:42:01] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[22:42:04] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[22:42:59] *** Quits: xff0x (~xff0x@2001:1a81:52ce:1300:ffd2:54e0:463d:d772) (Ping timeout: 252 seconds)
[22:43:59] *** Joins: xff0x (~xff0x@2001:1a81:52ce:1300:b1bd:3a1d:cfef:d772)
[22:44:06] *** Joins: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net)
[22:44:51] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[22:45:42] *** Quits: max22- (~maxime@2a01cb0883359800f72e75eb3cbff1a0.ipv6.abo.wanadoo.fr) (Ping timeout: 265 seconds)
[22:46:54] *** Joins: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk)
[22:50:58] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[22:53:26] *** Quits: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk) (Ping timeout: 252 seconds)
[22:54:07] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[23:00:40] *** Quits: notzmv (~zmv@user/notzmv) (Read error: Connection reset by peer)
[23:02:35] *** Joins: alx741 (~alx741@157.100.93.160)
[23:03:34] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[23:05:55] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:08:22] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[23:09:43] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[23:10:29] *** Joins: jakalx (~jakalx@base.jakalx.net)
[23:10:43] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[23:10:47] *** Joins: k (~user@152.1.137.158)
[23:10:54] *** k is now known as Guest6770
[23:11:19] *** Quits: DNH (~DNH@8.44.0.72) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[23:11:48] <Guest6770> Is there a way to force the evaluation of statically known arguments (especially dictionaries) while still allowing a function to be inlined?
[23:12:52] <Guest6770> I currently switch on a case statement of a `Maybe Dict`, which should be evaluated at compile time to `Just Dict` or `Nothing`.
[23:13:15] <Guest6770> But the case statement is hanging around in the compiled core.
[23:14:03] *** Joins: DNH (~DNH@8.43.122.49)
[23:19:31] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Quit: Leaving)
[23:21:17] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[23:24:07] *** Joins: bahamas (~lucian@84.232.140.13)
[23:24:08] *** Joins: neurocyte0132889 (~neurocyte@IP-212232092128.dynamic.medianet-world.de)
[23:24:08] *** Quits: neurocyte0132889 (~neurocyte@IP-212232092128.dynamic.medianet-world.de) (Changing host)
[23:24:08] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[23:24:39] *** Joins: alx741 (~alx741@157.100.93.160)
[23:24:57] <Guest6770> Looks like applying `inline` to the dictionary does the trick.
[23:25:38] *** Joins: max22- (~maxime@2a01cb0883359800cb0bc7c67be4bc8f.ipv6.abo.wanadoo.fr)
[23:28:01] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[23:28:19] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[23:28:33] *** Quits: bahamas (~lucian@84.232.140.13) (Ping timeout: 256 seconds)
[23:29:27] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[23:32:30] *** Joins: Akiva (~Akiva@user/Akiva)
[23:32:54] *** Joins: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net)
[23:34:47] *** Quits: hololeap_ (~hololeap@user/hololeap) (Read error: Connection reset by peer)
[23:34:57] <janus> Cale: even if you disallow serialization of something, i understand that it couldn't be e.g. written to disk. but i still don't understand what type-level feature can prevent something from being used more than once?
[23:35:07] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 250 seconds)
[23:35:27] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[23:35:42] <Cale> janus: You can take away direct access to the thing altogether though.
[23:36:05] <janus> ah, so the linear variables shouldn't even have names, and they should implicitly exist in the context of the monad
[23:36:06] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Ping timeout: 276 seconds)
[23:36:10] <Cale> yeah
[23:36:42] <janus> then it becomes even harder to mix it with networking
[23:36:55] *** Joins: lavaman (~lavaman@98.38.249.169)
[23:37:32] *** Joins: juhp (~juhp@128.106.188.82)
[23:37:34] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[23:37:37] <janus> or maybe not, i guess it could provide MonadIO independently of this..
[23:38:02] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[23:38:28] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[23:38:42] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 276 seconds)
[23:38:52] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[23:38:54] *** Joins: zaquest (~notzaques@5.130.79.72)
[23:38:58] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[23:39:03] <Cale> The way I would have done it is to generalise Arrow and split it up so that we'd have a way of supporting all the different types of substructural things, and we wouldn't even really need anything more in the type system
[23:39:08] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[23:39:21] <Cale> If we split it up so that not all the structural components were always available, you could take out the operations that let you duplicate and drop things, and then the corresponding generalisation of proc/do notation would give us back the ability to name things
[23:40:16] <Cale> If you take that kind of idea far enough, you end up with Conal's constrained categories thing.
[23:41:17] *** Quits: jkaye (~jkaye@2601:281:8300:7530:323:f5e4:2678:9ded) (Ping timeout: 252 seconds)
[23:41:54] *** Joins: hololeap_ (~hololeap@user/hololeap)
[23:42:11] *** Joins: ub (~Thunderbi@p200300ecdf1abb06cc2914e8ae945344.dip0.t-ipconnect.de)
[23:42:36] *** Joins: jgeerds_ (~jgeerds@55d4ac73.access.ecotel.net)
[23:42:51] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[23:43:49] *** Joins: Guest19 (~Guest19@static.14.118.201.195.clients.your-server.de)
[23:43:51] *** Quits: Guest19 (~Guest19@static.14.118.201.195.clients.your-server.de) (Client Quit)
[23:44:35] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[23:44:48] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[23:45:35] *** Joins: alx741 (~alx741@157.100.93.160)
[23:46:24] *** Quits: hololeap_ (~hololeap@user/hololeap) (Read error: Connection reset by peer)
[23:50:07] *** Quits: jgeerds_ (~jgeerds@55d4ac73.access.ecotel.net) (Quit: Leaving)
[23:50:16] *** Joins: jgeerds (~jgeerds@55d4ac73.access.ecotel.net)
[23:50:53] *** Joins: zmt01 (~zmt00@user/zmt00)
[23:51:55] *** Quits: xff0x (~xff0x@2001:1a81:52ce:1300:b1bd:3a1d:cfef:d772) (Ping timeout: 265 seconds)
[23:52:25] *** Joins: xff0x (~xff0x@2001:1a81:52ce:1300:b0c:6219:b31e:3167)
[23:53:39] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[23:54:14] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[23:54:49] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 265 seconds)
[23:56:24] *** Joins: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk)
[23:56:46] *** Quits: DNH (~DNH@8.43.122.49) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[23:57:33] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[23:59:10] *** Joins: bahamas (~lucian@84.232.140.13)
[23:59:39] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[23:59:59] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
