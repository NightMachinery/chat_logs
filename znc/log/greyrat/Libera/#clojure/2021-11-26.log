[00:12:38] *** Quits: dadinn (~dadinn@cpc87065-finc18-2-0-cust67.4-2.cable.virginm.net) (Ping timeout: 260 seconds)
[00:31:18] *** Joins: dadinn (~dadinn@cpc87065-finc18-2-0-cust67.4-2.cable.virginm.net)
[00:31:18] *** Quits: dadinn (~dadinn@cpc87065-finc18-2-0-cust67.4-2.cable.virginm.net) (Client Quit)
[00:31:54] *** Joins: dadinn (~dadinn@cpc87065-finc18-2-0-cust67.4-2.cable.virginm.net)
[00:48:02] *** Quits: poselyqualityles (poselyqual@user/poselyqualityles) (Ping timeout: 240 seconds)
[01:20:10] *** Joins: AlaskanEmily (~AlaskanEm@user/alaskanemily)
[01:24:40] *** Joins: narendraj9 (~user@2a02:8109:b63f:ff7c::57b2)
[01:41:02] *** Quits: narendraj9 (~user@2a02:8109:b63f:ff7c::57b2) (Remote host closed the connection)
[01:45:39] *** Quits: shiranaihito_ (~textual@123-192-192-149.dynamic.kbronet.com.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:56:49] *** Joins: matty_ma1 (~matt@135.129.244.70)
[02:01:41] *** Quits: matty_ma1 (~matt@135.129.244.70) (Ping timeout: 268 seconds)
[02:25:17] *** Joins: schmudde (~schmudde@2001:b07:ae6:7d19:77d9:9b8c:594f:f874)
[02:33:25] *** Quits: Skyfire (~pyon@user/pyon) (Quit: WeeChat 3.3)
[02:37:02] *** Quits: seschwar (~seschwar@user/seschwar) (Quit: :wq)
[02:40:05] *** Joins: Skyfire (~pyon@user/pyon)
[02:47:41] *** Quits: Skyfire (~pyon@user/pyon) (Quit: brb)
[02:52:45] *** Quits: schmudde (~schmudde@2001:b07:ae6:7d19:77d9:9b8c:594f:f874) (Ping timeout: 250 seconds)
[02:53:00] *** Joins: lunik12 (~lunik1@37.205.14.203)
[02:53:40] *** Quits: lunik1 (~lunik1@37.205.14.203) (Read error: Connection reset by peer)
[02:53:40] *** lunik12 is now known as lunik1
[02:59:45] *** Quits: lunik1 (~lunik1@37.205.14.203) (Read error: Connection reset by peer)
[03:00:09] *** Joins: lunik1 (~lunik1@37.205.14.203)
[03:05:07] *** Joins: drbobbeaty (~drbob@c-24-14-127-107.hsd1.il.comcast.net)
[03:07:32] *** Quits: lunik1 (~lunik1@37.205.14.203) (Ping timeout: 256 seconds)
[03:15:41] *** Joins: lunik1 (~lunik1@37.205.14.203)
[03:16:22] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[03:19:09] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[03:20:56] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 260 seconds)
[03:21:57] *** Joins: X-Scale` (~ARM@31.22.203.240)
[03:23:31] *** X-Scale` is now known as X-Scale
[03:27:35] *** Joins: sunarch (uid526836@user/sunarch)
[03:40:22] *** Quits: Trieste (T@user/pilgrim) (Ping timeout: 260 seconds)
[03:52:33] *** Joins: Trieste (T@user/pilgrim)
[04:07:02] *** Joins: libertyprime (~libertypr@203.211.73.21)
[04:08:00] *** Joins: Skyfire (~pyon@user/pyon)
[05:01:11] *** Quits: libertyprime (~libertypr@203.211.73.21) (Quit: leaving)
[05:13:51] *** Joins: AKEmily (~AlaskanEm@user/alaskanemily)
[05:14:03] *** Quits: AlaskanEmily (~AlaskanEm@user/alaskanemily) (Read error: Connection reset by peer)
[05:28:35] *** Joins: Pixel_Outlaw (~ryan@2600-6c67-5e3f-ed1c-3d07-ddf4-6df7-8656.res6.spectrum.com)
[05:51:41] *** Joins: matty_ma1 (~matt@135.129.244.70)
[06:34:02] *** Joins: poselyqualityles (poselyqual@user/poselyqualityles)
[06:42:19] *** Joins: libertyprime (~libertypr@118-92-79-43.dsl.dyn.ihug.co.nz)
[06:49:39] *** Quits: poselyqualityles (poselyqual@user/poselyqualityles) (Ping timeout: 268 seconds)
[07:04:56] *** Joins: mbuf (~Shakthi@171.61.241.63)
[07:41:22] *** Joins: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net)
[08:11:35] *** Quits: Pixel_Outlaw (~ryan@2600-6c67-5e3f-ed1c-3d07-ddf4-6df7-8656.res6.spectrum.com) (Quit: Leaving)
[08:43:55] *** Joins: N-Angulator (~Kevin@12.172.77.234)
[08:47:08] *** Quits: to-hu (~Thunderbi@p200300e9af32e7002a12129259b32336.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[08:49:14] *** Quits: libertyprime (~libertypr@118-92-79-43.dsl.dyn.ihug.co.nz) (Ping timeout: 260 seconds)
[08:51:19] *** AKEmily is now known as AlaskanEmily
[09:04:32] *** Joins: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw)
[09:15:59] *** Joins: libertyprime (~libertypr@203.211.73.21)
[09:38:41] *** Quits: son0p (~ff@181.136.122.143) (Ping timeout: 245 seconds)
[09:49:35] *** Quits: N-Angulator (~Kevin@12.172.77.234) (Read error: Connection reset by peer)
[11:08:49] *** Joins: derpadmin (~Anonymous@homebase.200013.net)
[11:09:59] *** Quits: derpadmin (~Anonymous@homebase.200013.net) (Client Quit)
[11:41:21] *** Quits: nighcoder_ (~ciumbi@206.176.143.59) (Remote host closed the connection)
[11:41:40] *** Joins: nighcoder_ (~ciumbi@206.176.143.59)
[12:16:05] *** Quits: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:27:33] *** Joins: shiranaihito (~textual@27.105.51.183)
[13:05:04] *** Quits: AlaskanEmily (~AlaskanEm@user/alaskanemily) (Remote host closed the connection)
[14:01:46] *** Quits: shiranaihito (~textual@27.105.51.183) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:11:32] *** Joins: shiranaihito (~textual@2001-b011-4000-3841-6551-5f4d-f98e-2240.dynamic-ip6.hinet.net)
[14:22:13] *** Joins: to-hu (~Thunderbi@p57b5aa80.dip0.t-ipconnect.de)
[14:48:55] *** Joins: op2 (~op@host-87-1-78-199.retail.telecomitalia.it)
[14:49:19] *** op2 is now known as Guest4982
[14:55:10] *** Quits: Guest4982 (~op@host-87-1-78-199.retail.telecomitalia.it) (Quit: ZNC 1.8.2 - https://znc.in)
[14:55:27] *** Joins: op2 (~op@host-87-1-78-199.retail.telecomitalia.it)
[14:55:51] *** op2 is now known as Guest9794
[15:01:29] *** Joins: shiranaihito_ (~textual@123-192-192-149.dynamic.kbronet.com.tw)
[15:03:33] *** Quits: shiranaihito (~textual@2001-b011-4000-3841-6551-5f4d-f98e-2240.dynamic-ip6.hinet.net) (Ping timeout: 250 seconds)
[15:10:27] *** Quits: Guest9794 (~op@host-87-1-78-199.retail.telecomitalia.it) (Quit: ZNC 1.8.2 - https://znc.in)
[15:12:12] *** Joins: op2 (~op@host-87-1-78-199.retail.telecomitalia.it)
[15:12:36] *** op2 is now known as Guest2461
[15:14:16] *** Quits: Guest2461 (~op@host-87-1-78-199.retail.telecomitalia.it) (Client Quit)
[15:14:32] *** Joins: op2 (~op@host-87-1-78-199.retail.telecomitalia.it)
[15:14:56] *** op2 is now known as Guest4797
[15:18:28] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[15:18:48] *** Joins: greyrat_ (~greyrat@ip202.ip-51-178-215.eu)
[15:18:48] *** Joins: Spec` (~spec@user/spec)
[15:19:11] *** Joins: Techcable_ (~Techcable@168.235.93.147)
[15:19:21] *** Quits: spec (~spec@user/spec) (Killed (NickServ (GHOST command used by Spec`)))
[15:19:25] *** Spec` is now known as spec
[15:19:49] *** Joins: Trieste_ (T@user/pilgrim)
[15:20:15] *** Joins: penguwin7 (~penguwin@fribbledom.com)
[15:20:20] *** Joins: glider_ (~glider@user/glider)
[15:20:20] *** Server sets mode: +nt 
[15:20:45] *** Joins: dadinn_ (~dadinn@cpc87065-finc18-2-0-cust67.4-2.cable.virginm.net)
[15:21:09] *** Joins: lockdown (~lockdown@ec2-3-236-147-4.compute-1.amazonaws.com)
[15:21:14] *** Joins: madscientist_ (tpalohei@kapsi.fi)
[15:21:43] *** Joins: wht (~wht@havoc.proulx.com)
[15:22:45] *** Joins: cache (~cache@user/cacheyourdreams)
[15:24:10] *** Joins: etiago- (~etiago@cpc120220-heme13-2-0-cust103.9-1.cable.virginm.net)
[15:25:21] *** Joins: dustinm- (~dustinm@static.38.6.217.95.clients.your-server.de)
[15:25:58] *** Joins: uncleyear (~ian@pppoe.178-66-156-72.dynamic.avangarddsl.ru)
[15:25:59] *** Quits: Inoperable (~PLAYER_1@fancydata.science) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: Lulu (~meow@vyos/developer/Lulu) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: cacheyourdreams (~cache@user/cacheyourdreams) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: dadinn (~dadinn@cpc87065-finc18-2-0-cust67.4-2.cable.virginm.net) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: mala (~mala@user/malaclyps) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: Trieste (T@user/pilgrim) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: X-Scale (~ARM@31.22.203.240) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: lockdown_ (~lockdown@ec2-3-236-147-4.compute-1.amazonaws.com) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: uncleyea1 (~ian@pppoe.178-66-156-72.dynamic.avangarddsl.ru) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: glider (~glider@user/glider) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: dustinm (~dustinm@static.38.6.217.95.clients.your-server.de) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: madscientist` (tpalohei@kapsi.fi) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: jsn- (~jason@scw.ice-9.eu) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: mbuf (~Shakthi@171.61.241.63) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: wht_ (~wht@havoc.proulx.com) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: Ingvix (~Ingvix@user/ingvix) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: flynn (~mcbloch@user/flynn) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: penguwin (~penguwin@fribbledom.com) (Ping timeout: 260 seconds)
[15:26:01] *** Quits: etiago (~etiago@user/etiago) (Ping timeout: 260 seconds)
[15:26:01] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 260 seconds)
[15:26:01] *** Quits: wink (fhtagn@user/wink) (Ping timeout: 260 seconds)
[15:26:01] *** Quits: yason (~yason@kapsi.fi) (Ping timeout: 260 seconds)
[15:26:01] *** Quits: i7c (~i7c@user/i7c) (Ping timeout: 260 seconds)
[15:26:01] *** Joins: mbuf (~Shakthi@171.61.241.63)
[15:26:01] *** Ischwitch is now known as Ingvix
[15:26:01] *** flynn8 is now known as flynn
[15:26:01] *** penguwin7 is now known as penguwin
[15:26:02] *** Trieste_ is now known as Trieste
[15:26:06] *** X-Scale` is now known as X-Scale
[15:26:32] *** Joins: yason (yason@kapsi.fi)
[15:29:51] *** Joins: In0perable (~PLAYER_1@fancydata.science)
[15:31:19] *** wink_ is now known as wink
[15:32:29] *** Joins: i7c (~i7c@user/i7c)
[15:58:09] *** Quits: matty_ma1 (~matt@135.129.244.70) (Ping timeout: 250 seconds)
[16:09:48] *** Joins: schmudde (~schmudde@public.toolboxoffice.it)
[16:13:35] *** Joins: matty_ma1 (~matt@135.129.244.70)
[16:27:35] *** Quits: libertyprime (~libertypr@203.211.73.21) (Quit: leaving)
[16:39:41] *** Joins: narendra (~user@2a02:8109:b63f:ff7c::56c2)
[16:54:37] *** Quits: schmudde (~schmudde@public.toolboxoffice.it) (Ping timeout: 268 seconds)
[17:03:00] *** Quits: matty_ma1 (~matt@135.129.244.70) (Quit: WeeChat 3.2)
[17:05:53] *** Joins: schmudde (~schmudde@public.toolboxoffice.it)
[17:33:32] *** Joins: nadeshiko (~nadeshiko@host-87-1-78-199.retail.telecomitalia.it)
[17:33:55] *** Quits: nadeshiko (~nadeshiko@host-87-1-78-199.retail.telecomitalia.it) (Client Quit)
[17:34:11] *** Joins: nadeshiko (~nadeshiko@host-87-1-78-199.retail.telecomitalia.it)
[17:34:15] *** Quits: nadeshiko (~nadeshiko@host-87-1-78-199.retail.telecomitalia.it) (Client Quit)
[17:35:16] *** Joins: nadeshiko (~op2@host-87-1-78-199.retail.telecomitalia.it)
[17:35:28] *** Quits: nadeshiko (~op2@host-87-1-78-199.retail.telecomitalia.it) (Client Quit)
[17:35:48] *** Joins: op2 (~op2@user/op2)
[17:37:02] *** Quits: op2 (~op2@user/op2) (Client Quit)
[17:37:48] *** Joins: op2 (~op2@user/op2)
[17:52:59] *** Quits: op2 (~op2@user/op2) (Quit: connection reset by purr)
[17:53:22] *** Joins: op2 (~op2@user/op2)
[17:57:49] *** Quits: justache (~justache@user/justache) (Read error: Connection reset by peer)
[17:59:25] *** Joins: justache (~justache@user/justache)
[18:33:16] *** Quits: drbobbeaty (~drbob@c-24-14-127-107.hsd1.il.comcast.net) (Ping timeout: 245 seconds)
[18:42:02] *** Quits: narendra (~user@2a02:8109:b63f:ff7c::56c2) (Ping timeout: 240 seconds)
[18:43:29] *** Joins: narendra (~user@2a02:8109:b63f:ff7c::56c2)
[18:47:28] *** Joins: drbobbeaty (~drbob@c-24-14-127-107.hsd1.il.comcast.net)
[18:47:52] *** Joins: xulfer (uid452788@id-452788.ilkley.irccloud.com)
[18:58:32] *** Quits: narendra (~user@2a02:8109:b63f:ff7c::56c2) (Ping timeout: 240 seconds)
[19:23:30] *** Joins: seschwar (~seschwar@user/seschwar)
[20:10:03] *** Joins: matty_matt (~matt@135.129.244.70)
[20:29:39] *** Quits: to-hu (~Thunderbi@p57b5aa80.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[20:29:57] *** Joins: to-hu (~Thunderbi@p57b5aa80.dip0.t-ipconnect.de)
[20:34:11] *** Quits: to-hu (~Thunderbi@p57b5aa80.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[20:35:32] *** Quits: mbuf (~Shakthi@171.61.241.63) (Quit: Leaving)
[20:37:10] *** Quits: drbobbeaty (~drbob@c-24-14-127-107.hsd1.il.comcast.net) (Ping timeout: 260 seconds)
[20:37:49] *** Joins: drbobbeaty (~drbob@c-24-14-127-107.hsd1.il.comcast.net)
[20:41:34] *** Joins: cmiles74_ (~miles@172.58.235.118)
[20:48:16] *** Quits: drbobbeaty (~drbob@c-24-14-127-107.hsd1.il.comcast.net) (Ping timeout: 245 seconds)
[20:48:55] *** Joins: drbobbeaty (~drbob@c-24-14-127-107.hsd1.il.comcast.net)
[21:01:47] *** Joins: andreyorst_erc (~user@176.59.43.93)
[21:06:07] *** Joins: dorolice (~dorolice@107.155.239.29)
[21:07:35] *** Quits: schmudde (~schmudde@public.toolboxoffice.it) (Ping timeout: 265 seconds)
[21:17:00] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[21:17:38] *** Joins: Colt (~Colt@user/colt)
[21:17:59] *** Joins: jackdaniel (~jack@user/jackdaniel)
[21:18:01] *** Parts: jackdaniel (~jack@user/jackdaniel) ()
[21:20:33] *** Quits: andreyorst_erc (~user@176.59.43.93) (Ping timeout: 250 seconds)
[21:25:04] *** Joins: andreyorst_erc (~user@176.59.43.93)
[21:26:00] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[21:29:31] *** Joins: Colt (~Colt@user/colt)
[21:37:37] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[21:37:59] *** Joins: Colt (~Colt@user/colt)
[21:38:03] *** Joins: Pixel_Outlaw (~ryan@2600-6c67-5e3f-ed1c-1c51-0d5b-5290-c381.res6.spectrum.com)
[21:40:32] *** Quits: cmiles74_ (~miles@172.58.235.118) (Ping timeout: 240 seconds)
[21:42:53] *** Quits: andreyorst_erc (~user@176.59.43.93) (Remote host closed the connection)
[22:03:59] *** Quits: dorolice (~dorolice@107.155.239.29) ()
[22:08:29] *** Joins: schmudde (~schmudde@public.toolboxoffice.it)
[22:40:33] *** Quits: xsperry (~xs@user/xsperry) ()
[22:41:23] <mwnaylor> I tend to favor using let blocks within a defn to capture intermediate steps with meaninful names versus defn bodies that are complicated one liners. Looking for opinions on this practice.
[22:43:21] <shiranaihito_> mwnaylor sounds good :)
[22:43:52] <ridcully> mwnaylor: that is sound
[22:44:09] <shiranaihito_> i mean, you're making it clearer what's going on, and that's always a good thing
[22:45:08] <ridcully> mwnaylor: unless of course you are just stacking to much things in one place.  if the things in a let lend themself for extracting into more functions, then do that
[22:46:21] *** Joins: xsperry (~xs@user/xsperry)
[22:46:36] *** Quits: matty_matt (~matt@135.129.244.70) (Ping timeout: 245 seconds)
[22:48:13] <shiranaihito_> mwnaylor personally, i tend to be kind of unhappy with passing anonymous functions to map calls etc.. somehow it just looks confusing/messy. So sometimes i'll write a separate little helper function so that i'll have a neat little map call with a reference to my helper fn and the collection being mapped over
[22:50:43] <logiz> that makes it easier to test too
[22:51:01] *** Parts: Pixel_Outlaw (~ryan@2600-6c67-5e3f-ed1c-1c51-0d5b-5290-c381.res6.spectrum.com) (Leaving)
[22:58:36] *** Joins: andreyorst_erc (~user@176.59.43.93)
[23:03:32] *** Quits: schmudde (~schmudde@public.toolboxoffice.it) (Quit: WeeChat 3.2)
[23:03:59] <mwnaylor> shiranaihito_: I'm ok with simple lambdas to map/reduce etc. But when it comes to doing one-liners on deep collections, I can't keep the model in my mind. Also, complex one-liners are a PITA to read and understand.
[23:04:47] <mwnaylor> logiz: testing via debugger?
[23:05:01] <shiranaihito_> mwnaylor yeah, i'm alright with very simple lambdas too, but it doesn't seem to take much before a lambda starts feeling unwieldy
[23:06:29] <shiranaihito_> at least for me, imperative code is generally easier to read, because stuff just happens in order from top to bottom..  but with Clojure, you may be looking at a considerable chunk of code that all boils down to one value, and it's much more difficult to see what happens
[23:08:43] *** Quits: xsperry (~xs@user/xsperry) ()
[23:10:26] <ridcully> for me its just the opposite.  imperative code make you read all the things... and declarative code make it easier to understand the whole thing.  using the tools you have and expect the consumer to know them as well makes very clear code.  it might leave some folks out... but they'll have to learn...
[23:11:04] <logiz> mwnaylor: I meant in terms of writing deftests since you can directly test the function for the map, vs testing an entire collection, which you can do too
[23:11:11] *** Joins: narendraj9 (~user@2a02:8109:b63f:ff7c::57b2)
[23:11:43] *** Joins: matty_matt (~matt@135.129.244.70)
[23:13:55] <mwnaylor> logiz: I see. defests are a pass/fail. Sometimes I need to debug the defn by stepping through it to see 𝘸𝘩𝘺 it failed.
[23:15:04] <logiz> that's truth too :)
[23:15:35] <mwnaylor> 👍
[23:21:11] *** Quits: matty_matt (~matt@135.129.244.70) (Ping timeout: 260 seconds)
[23:22:07] *** Joins: poselyqualityles (poselyqual@user/poselyqualityles)
[23:22:50] *** Quits: uncleyear (~ian@pppoe.178-66-156-72.dynamic.avangarddsl.ru) (Remote host closed the connection)
[23:23:18] <shiranaihito_> ridcully it varies from person to person, but Clojure encourages writing concise code, often with very small (even one letter) variable names, and that gets obtuse pretty fast
[23:23:21] *** Quits: poselyqualityles (poselyqual@user/poselyqualityles) (Remote host closed the connection)
[23:23:39] *** Joins: poselyqualityles (poselyqual@user/poselyqualityles)
[23:25:39] <mwnaylor> Dealing with Java interop makes me appreciate those that put in the effort to create libraries like clojure.java.iio
[23:25:40] *** Joins: uncleyear (~ian@pppoe.178-66-156-72.dynamic.avangarddsl.ru)
[23:27:18] *** Quits: narendraj9 (~user@2a02:8109:b63f:ff7c::57b2) (Remote host closed the connection)
[23:29:12] <shiranaihito_> i'm so used to Java that i have no problem doing interop stuff when needed
[23:29:17] *** Joins: son0p (~ff@181.136.122.143)
[23:29:19] *** Joins: matty_matt (~matt@135.129.244.70)
[23:29:26] <ridcully> shiranaihito_: if the function is generic i am happy to name args generic (e.g. xs for some seq).  the more un-generic it gets the more un-generic the names usually become.  but in the end: naming is one of the big unsolved problems in it ;)
[23:30:30] <shiranaihito_> ridcully yeah, but naming is very important for readability/understandability, and it's a factor even with Clojure code
[23:31:09] <ridcully> its a factor to whatever code
[23:31:22] <shiranaihito_> having to use ugly, long names for things in lets or fn parameters just to keep things somewhat readable kind of bugs me.. but it can't be helped :)
[23:31:26] <shiranaihito_> yep
[23:32:03] <shiranaihito_> i mean.. it would be nice if we could just write everything with 1 - 4 letter variables neatly aligned with each other.. :P  but it's just not a very good idea
[23:33:36] <ridcully> if your problem demands complicated names, this is fine.  name your domain problems so your peers can understand it.  but don't give the code the same slack.  make it as snappy as possible
[23:34:10] <shiranaihito_> snappy?
[23:35:20] <ridcully> short/idiomatic/succinct
[23:36:33] <manicennui> I think those things are usually the wrong thing to focus on and lead to code golf more often than not.
[23:36:54] <manicennui> When your code is at the proper level of abstraction, a lot of these problems go away.
[23:37:24] <manicennui> If you are writing large functions that do too much, then people are tempted to "fix" things by making code more terse. 
[23:37:27] *** Joins: AlaskanEmily (~AlaskanEm@user/alaskanemily)
[23:37:53] <manicennui> A lot of tiny functions that do too little can also be a problem.
[23:38:02] <manicennui> As with anything, there is no easy answer.
[23:39:10] <ridcully> no there is not.  but _not_ using the succinct function just in the hope it makes things more understandable for the odd junior out there is wrong too
[23:39:31] <manicennui> I don't think it has anything to do with junior vs senior.
[23:39:43] <ridcully> there is golfing to the grade of "abusing what is there to save a char" and there is "using the proper tools"
[23:39:45] <manicennui> We all think our code is super clear when we are writing it because we are intimately familiar with it.
[23:41:32] <shiranaihito_> yep, it's not just for some random junior's sake - it's for your own too. We generally don't remember much from code we wrote several months ago
[23:42:21] <logiz> months ago? a good night's sleep sometimes washes it away
[23:46:12] <ridcully> things like juxt or reductions are not "tricks of the seniors" - they are tools that make more succinct code
[23:46:53] <ridcully> if you name your stuff right and write some tests no one cares even if you understand your code anymore tomorrow.  there is prove it does what is is supposed to do
[23:49:06] <mwnaylor> There's more than one kind of junior. There's the just out of school junior, who doesn't have a clue to the wide range of tools/techiques, and is unaware of ignorance. Then there's the mile wide and inch deep junior: doesn't have years of experience with anything, but knows a little about several languages and development modes (imperative, object-oriented, functional…)
[23:51:04] <mwnaylor> After taking a break form Clojure for a while, I started rereading some of my Clojure books. Never understood juxt before. Now starting to grok it. 
[23:52:02] <mwnaylor> Not grokking juxt, I would have mapped an anonymous function over a collection of functions.
[23:52:26] *** Quits: andreyorst_erc (~user@176.59.43.93) (Ping timeout: 245 seconds)
[23:52:35] <mwnaylor> (map #(% 10 3) [+ - * /])
[23:54:21] <mwnaylor> more idiomatically: ((juxt + - * /) 10 3)
[23:55:46] *** Quits: poselyqualityles (poselyqual@user/poselyqualityles) (Ping timeout: 245 seconds)
[23:57:04] <shiranaihito_> ridcully "there is proof it does what is is supposed to do" <-- the test may be inscrutable too. Sometimes people do need to understand what some area of code does and why, and having a test may not help at all.
[23:57:32] <shiranaihito_> so, good naming matters, and comments may be even more important
[23:57:41] <shiranaihito_> anyhow, off to bed now
[23:57:47] *** Quits: shiranaihito_ (~textual@123-192-192-149.dynamic.kbronet.com.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[23:58:12] <mwnaylor> shiranaihito_: Yes. Since tests are code, badly coded test can break the process.
[23:59:15] *** Joins: energizer (~energizer@user/energizer)
