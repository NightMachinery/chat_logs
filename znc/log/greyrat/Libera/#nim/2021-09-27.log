[00:04:32] <FromDiscord> <deech> Yeah I'm having to `const_cast` all over the place. If this is CPP I recommend compiling with `clang` as well because it will error if you don't have those casts and there's no way to turn that off.
[00:06:07] <PMunch> const_cast?
[00:07:31] <FromDiscord> <deech> It removes `const`ness so that it used with non-`const` functions. https://en.cppreference.com/w/cpp/language/const_cast
[00:08:41] <FromDiscord> <deech> (edit) "It removes `const`ness so that it ... used" 03added "can be"
[00:15:03] <FromDiscord> <treeform> In reply to @nrds "<Prestige> brute force method,": I wrote a script that replaces one var to let at a time and compiles the project
[00:15:17] <FromDiscord> <treeform> if it works it keeps it, otherwise it reverts and moves onto the next let
[00:16:31] <nrds> <06Prestige99> Neat
[00:17:54] <nrds> <06Prestige99> A more complicated version could bisect it, maybe
[00:18:06] <nrds> <06Prestige99> replace half of them, see if it compiles, continue with the next half
[00:21:17] <FromDiscord> <treeform> its fast enough to do it one at a time
[00:21:30] <FromDiscord> <treeform> issue is that it replaces var in comments ... because let in comments works
[00:21:47] <FromDiscord> <treeform> as well as in templates that re not used (they don't compile)
[00:21:57] <FromDiscord> <treeform> so its a bit manual still
[00:24:05] <FromDiscord> <treeform> I kind of feel like let p = someref object should make it immutable...  but it only applies to the pointer address.
[00:46:08] <kinkinkijkin> getting really tempted to completely ditch glfw in my game engine since it doesn't have user-defined controller config
[00:46:17] <kinkinkijkin> but then i have to rewrite windowing
[00:47:45] <kinkinkijkin> ugh
[00:48:07] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[00:49:21] <kinkinkijkin> alternate path would be to keep glfw just for windowing and use sdl for input, but i dont want to have dep bloat
[01:04:17] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:c922:9c5f:802e:695a) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:06:04] *** Quits: PMunch (~PMunch@c01F28BC3.dhcp.as2116.net) (Quit: leaving)
[01:09:26] <FromDiscord> <Gumber> Sokol?
[01:10:22] *** Joins: KainAlive (~KainAlive@2a02:8109:bd40:4cc4:cb7:65e:1ab8:85d0)
[01:10:48] *** Parts: KainAlive (~KainAlive@2a02:8109:bd40:4cc4:cb7:65e:1ab8:85d0) ()
[01:12:32] <FromDiscord> <Gumber> In reply to @treeform "I kind of feel": Yeah but I mean that's pretty much equivalent to a const ref  or ptr in c plus plus
[01:12:44] <FromDiscord> <Gumber> And if you made the underlying memory immutable that the pointer points to that would break semantics for a lot of people
[01:13:16] <FromDiscord> <Gumber> And I mean you're assigning a pointer to a variable there so it really doesn't make sense to impose any constraints on the underlying memory through that assignment operation
[01:13:34] <FromDiscord> <Gumber> That would be a pretty nasty implicit side effect
[01:14:12] <kinkinkijkin> gumber, I can't see anything input-related in sokol
[01:14:27] <FromDiscord> <Gumber> It definitely handles input I don't know about custom controller config I don't really know what you're trying to do either
[01:14:41] <FromDiscord> <Gumber> I just know it's an alternative input windowing and eventing library and that it's written in C and it's a single header
[01:14:53] <NimEventer> New thread by Niminem: Hot Code Reloading viability for Jupyter-Notebook like Nim IDE, see https://forum.nim-lang.org/t/8462
[01:14:54] <FromDiscord> <Gumber> I don't know of too many real alternatives to GLFW and SDL2 and I definitely wouldn't use them in combination I don't think that makes much sense at all
[01:15:44] <FromDiscord> <treeform> In reply to @Gumber "Yeah but I mean": I just feel like mutable/inimitable semantics could have been more useful then current var/let ... but its too late in the language to change. It's not a huge issue.
[01:16:08] <kinkinkijkin> I need to support input on x86_{32,64}-pc linux and windows, armv{7,8} linux, and haiku, and I'm just trying to make a relatively platform-agnostic input system for games in a game engine
[01:17:00] <kinkinkijkin> the goal will be to eventually support riscv64G linux too
[01:17:09] <FromDiscord> <acek7> whats up
[01:18:02] <kinkinkijkin> glfw doesn't support haiku so I've been thinking of ditching glfw anyways, I just don't know if I want to do that work yet
[01:18:29] <FromDiscord> <Gumber> Yeah I mean I don't think sokol what support haiku either
[01:18:56] <FromDiscord> <Gumber> Every one of those operating systems is going to have like a different API for handling input so like I don't even think there's going to be a library out there that's going to able to provide all of that for you
[01:19:26] <kinkinkijkin> currently SDL2 provides input and graphics for all listed platforms
[01:19:31] <FromDiscord> <Gumber> If you're trying to hit that many platforms SDL2 would probably be your best bet because it's been around for the longest but I'd still be surprised if you'd be able to Target all of those operating systems and CPU architectures with it
[01:19:42] <FromDiscord> <Gumber> Well then I think that's your best bet I mean replacing STL2 with GLFW shouldn't even be that big of a deal
[01:19:50] <FromDiscord> <Gumber> SDL2 sorry I'm using text to speech on my phone
[01:20:33] <FromDiscord> <Gumber> Anyway I got to run Good luck I'll be around later if you have any more questions and I might be able to help with and sorry for not being able to give you a more definitive answer but when it comes to cross-platform windowing and eventing and input the options are pretty much right your own or use one of the libraries that I've mentioned
[01:29:41] <FromDiscord> <acek7> what editor do you guys use to code nim
[01:32:59] <FromDiscord> <Mr Axilus> Good old vim
[01:33:12] <kinkinkijkin> vscodium currently
[01:34:25] <FromDiscord> <acek7> whats the gui status for nim currently?
[01:38:19] <kinkinkijkin> what exactly do you mean?
[01:38:25] <FromDiscord> <auxym> Don't have any personal experience, but there are wrappers for GTK, WX, and QML, as well as native nim libraries such as nimx
[01:40:30] <FromDiscord> <acek7> i remember there was a figma plugin that converted that into a UI
[01:41:11] <FromDiscord> <acek7> are the GUI frameworks up to snuff with the comparison of like python or C family etc.
[01:41:54] <FromDiscord> <auxym> yeah fidget
[01:42:32] <FromDiscord> <acek7> did it get any better?
[01:50:16] <FromDiscord> <timotheecour> In reply to @PMunch "Is there a good": https://github.com/timotheecour/Nim/issues/524 has links to plausible implementations
[02:14:30] <kinkinkijkin> ive forgotten how to turn an uncheckedarray into a seq
[02:16:47] <FromDiscord> <acek7> What IRC client are you using
[02:19:47] <madprops> i use hexchat
[02:23:03] <FromDiscord> <Dylan> Sublime↵(@acek7)
[02:25:34] <FromDiscord> <acek7> I could see that kite program and the Microsoft intellicode programs work with nim. Similar to the way they work with python.
[02:51:30] *** Quits: max22- (~maxime@2a01cb0883359800493cb2ff7652c33a.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:51:20] <FromDiscord> <ynfle (ynfle)> Vim & sometimes VSCode
[04:35:14] <NimEventer> New thread by Alexeypetrushin: Funny bug when list.map(fn) and list.map((v) => v.fn) would produce different results, see https://forum.nim-lang.org/t/8463
[04:40:40] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[05:18:47] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[05:24:59] *** Joins: neurocyte01324 (~neurocyte@user/neurocyte)
[05:26:52] *** Quits: neurocyte0132 (~neurocyte@user/neurocyte) (Ping timeout: 252 seconds)
[05:26:52] *** neurocyte01324 is now known as neurocyte0132
[06:14:27] <FromDiscord> <NullCode> In reply to @acek7 "what editor do you": notepad++ and a nim syntax highlighting plugin
[06:19:01] <FromDiscord> <Gumber> In reply to @kinkinkijkin "ive forgotten how to": I think it's just `toSeq`
[06:20:00] <FromDiscord> <Gumber> https://nim-lang.org/docs/sequtils.html#toSeq.t%2Cuntyped
[06:20:30] <FromDiscord> <Gumber> In reply to @acek7 "what editor do you": if you already know vim or emacs or something I'd use that with nim language server protocol
[06:20:41] <FromDiscord> <Gumber> if you don't know any modal editors, I'd use VSCode or Sublime or Atom or something else
[06:21:11] <FromDiscord> <Gumber> as far as the GUI stuff goes - it really depends whether you want a retained or immediate mode solution and what you're trying to do
[06:21:31] <FromDiscord> <Gumber> I have very different GUI requirements and expectations from a cross platform GUI than others do
[06:21:51] <FromDiscord> <Gumber> so it's kind of a case by case basis - but the situation has definitely improved over time in terms of available options
[06:22:31] *** Joins: rockcavera (~rc@192.12.113.78)
[06:22:32] *** Quits: rockcavera (~rc@192.12.113.78) (Changing host)
[06:22:32] *** Joins: rockcavera (~rc@user/rockcavera)
[06:23:03] <FromDiscord> <cabboose> Tree form is in the process of making a pure nim framework. It’ll be like fidget; due to the nature of this endeavour fidget is basically sidelined. Packages like pixie etc were created for this new framework in mind↵(@acek7)
[06:28:24] <FromDiscord> <Gumber> yeah treeform's lib is nice but like for me it just doesn't fit the bill
[06:29:06] <FromDiscord> <Gumber> I also have questions regarding the feasibility of maintaining so many projects, but only time will tell how that plays out, there's a lot of bus factor going on...
[06:29:38] <FromDiscord> <Gumber> but either way, as far as engineering quality goes and unique ideas, I think treeform does a really great job with his stuff, and it's very impressive
[06:30:32] <FromDiscord> <cabboose> I think the gui library will attract maintainers
[06:30:38] <FromDiscord> <Gumber> I also think there's a lot of power and solid reasoning in just making your own bindings to C/C++ libs and pinning versions rather than reaching for pure Nim implementations
[06:30:56] <FromDiscord> <Gumber> I don't disagree but there are a lot of other projects out there that are being built on top of
[06:31:26] <FromDiscord> <Gumber> it's just like a case of spreading oneself too thin I think is what I'm getting at - but I mean if the libs are good enough than the community should step in to maintain
[06:31:29] <FromDiscord> <Gumber> it's just never a guarantee that it happens
[06:32:11] <FromDiscord> <Gumber> but I'm hopeful my doubts are erased in the future and that Nim's ecosystem and x-plat UI situation keeps improving
[06:32:56] <FromDiscord> <Gumber> I'm just somewhat of a skeptic by default I guess given my life experience thus far - hopefully that can change and turn into a more optimistic outlook with time 🙂
[06:49:28] <FromDiscord> <acek7> I'm a UI Designer and I've been wanting to use it to make something and I love GUI design. And nim seems like this great tool that can do it all it seems and I'm just excited about the tools other are building with it
[06:58:49] <FromDiscord> <cabboose> nimqml is my go-to atm because it leverages the most stable ui system in my eyes
[06:58:53] <FromDiscord> <cabboose> but then thats not really gui in nim
[06:58:55] <FromDiscord> <cabboose> thats just
[06:58:56] <FromDiscord> <cabboose> backend
[06:59:01] <FromDiscord> <cabboose> and then having qml as front end
[06:59:03] <FromDiscord> <cabboose> eh
[07:02:03] <FromDiscord> <Gumber> heh
[07:02:13] <FromDiscord> <Gumber> well I mean if that's your goal
[07:02:45] <FromDiscord> <Gumber> I guess fidget would probably be your best bet - but as cabboose mentioned it's kind of dead in the water atm due to all the other work going on to support it and other projects
[07:03:14] <FromDiscord> <Gumber> I don't know of any other retained mode GUI libraries that really give you the flexibility to do a lot of GUI design unless you want to dip your toes into electron and stuff like that
[07:03:22] <FromDiscord> <Gumber> which is  possible with Nim
[07:04:01] <FromDiscord> <Gumber> you could also build something using https://github.com/bung87/crowngui
[07:04:03] <nrds> <12R2D299> 4GitHub: 7"[WIP]Web Technologies based Crossplatform GUI Framework "
[07:04:42] <FromDiscord> <Gumber> and then I guess this thing came around the other day but I mean... https://github.com/Ethosa/nodesnim
[07:04:44] <nrds> <12R2D299> 4GitHub: 7"The Nim GUI/2D framework, based on OpenGL and SDL2."
[07:05:02] <FromDiscord> <Gumber> It's not really what I'd be looking for at all personally, but some folks seem to be excited about it
[07:05:15] <FromDiscord> <Gumber> I just haven't and don't intend on using it so I can't really speak to it or recommend it
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:44:13] <FromDiscord> <cabboose> I have more experience with qt for styling than I do with html/css (which is 0)
[07:44:28] <FromDiscord> <cabboose> so I never see the appeal in doing web technology based gui things
[07:45:15] <FromDiscord> <cabboose> I'm sure thats dumb and naive but whateva
[07:51:06] <FromDiscord> <Rika> I wouldn’t say that
[07:51:32] <FromDiscord> <Rika> Just like I wouldn’t say it’s dumb using tech that you’re already used to
[08:00:30] *** Quits: bkay (~beshr@78-72-246-187-no2006.tbcn.telia.com) (Read error: Connection reset by peer)
[08:13:08] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[09:18:34] *** Quits: Zevv (~Zevvvvv@185.238.131.12) (*.net *.split)
[09:18:46] *** Joins: Zevv (~Zevvvvv@185.238.131.12)
[09:21:53] *** Joins: max22- (~maxime@2a01cb0883359800e72b80574f347e03.ipv6.abo.wanadoo.fr)
[09:24:41] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (*.net *.split)
[09:24:42] *** Quits: jkl (~jkl@user/jkl) (*.net *.split)
[09:24:42] *** Quits: NimEventer (~NimBot@static.224.140.47.78.clients.your-server.de) (*.net *.split)
[09:24:42] *** Quits: ormiret (sid314108@id-314108.lymington.irccloud.com) (*.net *.split)
[09:24:42] *** Quits: dom96 (~dom@mail.nim-lang.org) (*.net *.split)
[09:24:42] *** Quits: drewr (~drew@user/drewr) (*.net *.split)
[09:24:43] *** Quits: jfinkhaeuser (~jfinkhaeu@user/jfinkhaeuser) (*.net *.split)
[09:25:21] *** Joins: NimEventer (~NimBot@static.224.140.47.78.clients.your-server.de)
[09:25:53] *** Joins: ormiret (sid314108@id-314108.lymington.irccloud.com)
[09:26:11] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[09:26:23] *** Joins: dom96 (~dom@mail.nim-lang.org)
[09:26:35] *** Joins: jkl (~jkl@user/jkl)
[09:29:56] *** Joins: jfinkhaeuser (~jfinkhaeu@user/jfinkhaeuser)
[09:54:11] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:c922:9c5f:802e:695a)
[09:59:55] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[10:00:58] *** Joins: xet7 (~xet7@user/xet7)
[10:17:38] <FromDiscord> <macaroni> What would you guys use to unzip a bzip2 file? Unfortunately Nimarchive is broken right now and I'd like a platform-independent solution, so no execCmd shenanigans
[10:20:11] <FromDiscord> <NullCode> https://github.com/guzba/zippy/ does this have what you're looking for
[10:20:14] <nrds> <12R2D299> 4GitHub: 7"Pure Nim implementation of deflate, zlib, gzip and zip."
[10:21:12] <FromDiscord> <Rika> That can do bzip?
[10:25:22] <FromDiscord> <NullCode> i don't see any matches for bzip
[10:25:36] *** Joins: PMunch (~PMunch@c01F28BC3.dhcp.as2116.net)
[10:26:00] <FromDiscord> <NullCode> https://github.com/yglukhov/bzip2
[10:26:03] <nrds> <12R2D299> 4GitHub: 7"libbz2 nim wrapper"
[10:26:04] <FromDiscord> <NullCode> ?
[10:26:29] <FromDiscord> <macaroni> unfortunately it doesn't look like zippy handles bzip2. It gives an error when using the extractAll proc
[10:26:44] <FromDiscord> <NullCode> i see
[10:26:50] <FromDiscord> <NullCode> (edit) "?" => "this?"
[10:52:56] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:c922:9c5f:802e:695a) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[11:06:53] *** Joins: meowray (~MaskRay@user/meowray)
[11:13:44] *** Quits: nrds (~NimBot@ns501209.ip-142-4-210.net) (Ping timeout: 265 seconds)
[12:24:13] <FromDiscord> <treeform> Zippy does not handle bzip2
[13:48:32] <FromDiscord> <haxscramper> Is it possible to use `{.define` with set value? Like `{.define(wave_path="asfd").}`↵\`
[13:53:28] *** Quits: crem (~crem@2a02:169:160a:1:9b30:962e:76eb:4bb3) (Ping timeout: 268 seconds)
[13:55:11] *** Joins: crem (~crem@2a02:169:160a:1:9b30:962e:76eb:4bb3)
[14:02:55] *** Joins: Vladar (~Vladar@46.162.2.53)
[14:41:30] <FromDiscord> <Goel> How to use the keyword `yield`? Reading it seem it only work for iterators, but that means must be uset with `iterator` or can also be used with a `for` loop?
[14:42:49] <FromDiscord> <Rika> Must be in iterator
[15:19:40] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[15:20:34] *** Joins: xet7 (~xet7@user/xet7)
[15:30:50] <FromDiscord> <hmmm> boyz how do I delete a temp file I don't need anymore
[15:31:28] <FromDiscord> <Rika> ?
[15:31:39] <FromDiscord> <hmmm> yo rika
[15:31:43] <FromDiscord> <Rika> You don’t need to?
[15:31:50] <FromDiscord> <NullCode> In reply to @hmmm "boyz how do I": what
[15:31:51] <FromDiscord> <hmmm> I don't want to leave junk around
[15:32:08] <FromDiscord> <Rika> The OS will take care of it if you put it in the temp directory
[15:32:12] <FromDiscord> <hmmm> oh
[15:32:16] <FromDiscord> <hmmm> this makes sense
[15:32:20] <FromDiscord> <NullCode> removeFile(file)
[15:32:26] <FromDiscord> <hmmm> this is even better
[15:32:28] <FromDiscord> <NullCode> if it's not in temp dir
[15:32:30] <FromDiscord> <Rika> You can do that if you really want to
[15:32:34] <FromDiscord> <hmmm> I want to
[15:32:39] <FromDiscord> <hmmm> I'll try it now
[15:32:44] <FromDiscord> <NullCode> (edit) "removeFile(file)" => "sent a code paste, see https://play.nim-lang.org/#ix=3A80"
[15:32:55] <FromDiscord> <NullCode> note that therell be an exception if no file to delete
[15:33:11] <FromDiscord> <hmmm> ty my bro ❤️
[15:33:21] <FromDiscord> <NullCode> np I'm a noob myself XD
[15:33:27] <FromDiscord> <Rika> In reply to @NullCode "note that therell be": Or if you can’t delete it
[15:33:46] <FromDiscord> <NullCode> yes
[15:34:51] <FromDiscord> <impbox [ftsf]> In reply to @Rika "The OS will take": Windows doesn't afaik
[15:34:57] <FromDiscord> <NullCode> it does
[15:35:01] <FromDiscord> <Rika> Is it possible to determine (without reading the definition of every single proc used within) if a Defect is raised
[15:35:15] <FromDiscord> <NullCode> (edit) "does" => "does↵albeit once a week or sth"
[15:35:31] <FromDiscord> <NullCode> why not just read the definition of every proc
[15:35:48] <FromDiscord> <NullCode> (just kidding I know it's tedious)
[15:35:49] <FromDiscord> <Rika> Try that when you’re calling a massive proc I dare you
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:23] <FromDiscord> <impbox [ftsf]> Apparently since windows 10 it might delete it at some point
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:41] <FromDiscord> <haxscramper> No, IIRC defects are not tracked
[15:37:01] <FromDiscord> <Rika> Time to raise (ref Defect)(nil) then
[15:37:15] <FromDiscord> <haxscramper> well, maybe at some point they will be removed
[15:37:33] <FromDiscord> <haxscramper> hopefully
[15:38:04] <FromDiscord> <Rika> I feel like they are useful just easy to abuse
[15:38:42] <FromDiscord> <haxscramper> How they are useful
[15:38:46] <FromDiscord> <Rika> Like in this message pack library I’m using it seems like they made a parsing error a defect? What the hell?
[15:39:04] <FromDiscord> <haxscramper> I literally don't understand how raising defect is better than raising exceptin in any scenario
[15:39:13] <FromDiscord> <Rika> I don’t know when something truly cannot be recovered from (maybe because of C library things?)
[15:39:41] <FromDiscord> <Rika> Crypto scenario I don’t know
[15:39:42] <FromDiscord> <haxscramper> Then why have separate language concept for it? If this cannot be recovered is what
[15:39:46] <FromDiscord> <haxscramper> `quit()`
[15:39:47] <FromDiscord> <haxscramper> `abort()`
[15:39:50] <FromDiscord> <haxscramper> `fuck you()`
[15:40:02] <FromDiscord> <haxscramper> The game ends when we reach "unrocoverable" state
[15:40:18] <FromDiscord> <haxscramper> We can't catch defects/quits, so we just abort the execution
[15:40:31] <FromDiscord> <haxscramper> If we can, like nim defect by default, they make no sense
[15:40:44] <FromDiscord> <haxscramper> if we can't they make no sense as well, at least as a separate language concept
[15:40:50] <FromDiscord> <Rika> In reply to @haxscramper "If we *can*, like": Then I guess defects should have never been catchable at all
[15:40:58] <FromDiscord> <haxscramper> this is just an overcomplicated wrapper for `quit()`
[15:41:02] <FromDiscord> <Rika> That is true
[15:41:04] <FromDiscord> <NullCode> since defect is a program error
[15:41:05] <FromDiscord> <Rika> Makes sense
[15:41:10] <FromDiscord> <NullCode> the program should just quit
[15:41:20] <FromDiscord> <haxscramper> well, write `quit()` in your library on errors, and see what people tell you about it
[15:41:29] <FromDiscord> <haxscramper> Pretty sure the first message would be like
[15:41:33] <FromDiscord> <haxscramper> "Are you ok?"
[15:41:40] <FromDiscord> <haxscramper> "I can totally recover from that"
[15:41:44] <FromDiscord> <haxscramper> "why not raise exception"
[15:42:04] <FromDiscord> <haxscramper> "do you think you know better than me what is recoverable and not, when I'm the end system architect?"
[15:42:18] <FromDiscord> <haxscramper> `quit()` in libraries makes no sense,
[15:42:33] <FromDiscord> <haxscramper> And apps can call `quit()` any time they want
[15:43:35] <FromDiscord> <haxscramper> Like crypto scenario
[16:03:00] *** Joins: rockcavera (~rc@192.12.113.65)
[16:03:00] *** Quits: rockcavera (~rc@192.12.113.65) (Changing host)
[16:03:00] *** Joins: rockcavera (~rc@user/rockcavera)
[16:14:01] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[16:16:20] <FromDiscord> <cabboose> Gotta make some memes out of these golden quotes
[16:16:26] <FromDiscord> <cabboose> I’ll save these for later
[16:16:34] *** Quits: max22- (~maxime@2a01cb0883359800e72b80574f347e03.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[16:17:09] <FromDiscord> <cabboose> Speaking of which haxscramper did you ever see the Easter egg in the loony repo?
[16:17:22] <FromDiscord> <cabboose> I put it specifically for you
[16:18:19] <FromDiscord> <haxscramper> https://github.com/nim-works/loony/blob/a6effbcce31b8683e950bf4d3d3dd5fd3518744e/loony.nim#L11
[16:18:31] <FromDiscord> <cabboose> 🤣🤌
[16:33:07] *** Joins: arkurious (~arkurious@user/arkurious)
[16:35:57] <FromDiscord> <isd> Hi, has anyone ever heard of a nim executable being unable to run on Windows because it is detected as being a 16 bit application?
[16:36:08] <FromDiscord> <Yardanico> no, that's really weird
[16:36:09] <FromDiscord> <Rika> That’s strange
[16:36:12] <FromDiscord> <Yardanico> maybe it's your antivirus acting up?
[16:36:18] <FromDiscord> <Rika> That sounds impossible
[16:36:30] <FromDiscord> <Yardanico> or maybe you're on a 32-bit windows and trying to launch a 64-bit binary? idk how the error would look like in this case
[16:36:32] <FromDiscord> <isd> I have a colleague who got this recently after an OS update. I am wondering, or wtf'ing, about how that could be
[16:36:46] *** Joins: max22- (~maxime@lfbn-ren-1-539-224.w81-53.abo.wanadoo.fr)
[16:37:16] <FromDiscord> <isd> Maybe I will just rebuild it in the latest version of Nim and ask if it works again.
[16:41:50] <FromDiscord> <isd> I suspect corporate antivirus gremlins
[16:51:40] *** Quits: max22- (~maxime@lfbn-ren-1-539-224.w81-53.abo.wanadoo.fr) (Remote host closed the connection)
[17:01:03] *** Joins: pro (~pro@user/pro)
[17:01:07] *** Quits: pro (~pro@user/pro) (Client Quit)
[17:01:24] *** Joins: pro (~pro@user/pro)
[17:07:58] <FromDiscord> <NullCode> In reply to @isd "I suspect corporate antivirus": +1
[17:12:32] <FromDiscord> <NullCode> can nimble install packages without `git`?
[17:12:52] <FromDiscord> <NullCode> I'm writing up ez guide for installing nim
[17:14:55] <PMunch> ez guide for installing Nim is just grab choosenim..
[17:15:04] <FromDiscord> <NullCode> yes
[17:15:29] <FromDiscord> <NullCode> well i wanted to serve an alternate to choosenim because "2020 latest release"
[17:15:35] <FromDiscord> <NullCode> "outdated!!!!!!!"
[17:15:47] <PMunch> Huh?
[17:16:05] <PMunch> Choosenim is just a utility to install Nim. It will install the latest Nim version
[17:16:06] <FromDiscord> <NullCode>  https://media.discordapp.net/attachments/371759389889003532/892044425298063440/unknown.png
[17:16:32] <FromDiscord> <NullCode> i see
[17:16:34] <PMunch> Yeah not a whole lot to fix in choosenim itself, it's a fairly simple utility
[17:16:47] <FromDiscord> <NullCode> In reply to @NullCode "can nimble install packages": what about this tho
[17:16:47] <PMunch> You can even use it to install nightlies
[17:16:58] <FromDiscord> <NullCode> I'm gonna install choosenim myself then
[17:17:11] <PMunch> It can't do it automatically afaik
[17:17:43] <PMunch> But you can always grab the zip from github, and then manually install packages with `nimble install` within that folder
[17:18:58] <FromDiscord> <NullCode> In reply to @PMunch "It can't do it": i see thanks a bunch
[17:19:06] <FromDiscord> <NullCode> In reply to @PMunch "But you can always": yeah
[17:25:14] *** Joins: nrds (~NimBot@ns501209.ip-142-4-210.net)
[17:28:32] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[17:34:58] *** Quits: pro (~pro@user/pro) (Quit: WeeChat 3.2.1)
[17:37:35] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[17:42:13] *** Joins: hexology (~hexology@user/hexology)
[17:43:19] <FromDiscord> <Squatting Monk> sent a long message, see http://ix.io/3A8J
[17:49:28] <NimEventer> New thread by Mantielero: Issue with passL, see https://forum.nim-lang.org/t/8464
[17:50:43] <FromDiscord> <haxscramper> If there is no explicit support for customization I would assume it is the only way to do so↵(@Squatting Monk)
[17:51:03] <FromDiscord> <haxscramper> You might try to make it less copy-pasta using `import {.all.}` when 1.6 comes out
[18:03:25] <PMunch> Damn Futhark just works so well. This is the third project since I wrote it where I can just import C header files directly without any wrapper issues
[18:03:49] <PMunch> Only thing I need to fix is some kind of support for macros
[18:04:28] <PMunch> Every `#define SOMETHING 5` has do be done manually. And at least those simple ones wouldn't be any trouble porting to Nim
[18:04:29] <nrds> <06Prestige99> That's awesome
[18:05:26] <PMunch> I was also thinking of spitting out some static assertions to check that the size of the generated structures are the same size as the C ones
[18:26:14] <FromDiscord> <haxscramper> just don't cheer too loudly or araq will have trouble sleeping
[18:26:56] <FromDiscord> <haxscramper> knowing that c2nim alternative exists and works much better without people having to "know" how to configure it properly for all the macros and whatnot
[18:30:39] <FromDiscord> <Goel> In reply to @haxscramper "knowing that c2nim alternative": this message has been removed by a moderator
[18:31:11] <FromDiscord> <haxscramper> the moderator was removed by the message
[18:31:31] <FromDiscord> <haxscramper> well, I'm just super annoyed at this nim forum thread
[18:31:48] <FromDiscord> <haxscramper> there is no "best" way to wrap C, because every single one has it's shortcomings
[18:31:59] <PMunch> Yeah not sure why some people really opposed it..
[18:32:08] <FromDiscord> <haxscramper> and furthark is a good solution
[18:32:10] <PMunch> I guess there might be some misunderstanding somewhere..
[18:32:43] <PMunch> To put it this way, Futhark is the only solution I've tried that just allows me to import C headers to compile against and not have any trouble with wrapping
[18:32:47] <FromDiscord> <haxscramper> And also
[18:32:49] <FromDiscord> <haxscramper> > ↵> c2nim supports that with a config.c2nim configuration file.↵>
[18:33:22] <FromDiscord> <haxscramper> This was a TIL moment
[18:33:33] <FromDiscord> <haxscramper> for a six year old commit that added feature with no docs https://github.com/nim-lang/c2nim/commit/ec04170e343806ec7983168b9b51a279d3cb89d0
[18:34:26] <nrds> <06Prestige99> love undocumented features
[18:34:55] <FromDiscord> <haxscramper> and "the best" way conceptually is to throw a nuclera weapons at C (and especially C++ interop)
[18:35:07] <FromDiscord> <haxscramper> and not create another ad-hoc handwritten C parser
[18:35:20] <FromDiscord> <haxscramper> "thousands of lines of C++ code"
[18:35:30] <FromDiscord> <haxscramper> well, there are millions of lines of C++ code
[18:35:36] <FromDiscord> <haxscramper> clang C++ api is
[18:35:38] <FromDiscord> <haxscramper> 380K lines
[18:35:41] <FromDiscord> <haxscramper> headers
[18:35:43] <PMunch> I spent three days trying to wrap a C header in Nim to create a dynamic library for some other project. Ended up writing all the definitions by hand. Took me 30 seconds with Futhark to achieve the same result *shrugs*
[18:36:28] <PMunch> Oh well, gotta go pick something up at the post office
[18:36:35] <PMunch> Probably going to come back on later
[18:36:36] *** Quits: PMunch (~PMunch@c01F28BC3.dhcp.as2116.net) (Quit: leaving)
[18:36:49] <FromDiscord> <haxscramper> [Edit](https://discord.com/channels/371759389889003530/371759389889003532/892064265744310313): and "the best" way conceptually is to throw a nuclear weapons at C (and especially C++ interop)
[18:46:18] <FromDiscord> <Goel> sent a code paste, see https://play.nim-lang.org/#ix=3A9y
[18:48:25] <FromDiscord> <Tanguy> sent a code paste, see https://play.nim-lang.org/#ix=3A9A
[18:49:12] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3A9B
[18:49:49] <FromDiscord> <Tanguy> Ah yes, even better
[18:50:02] <FromDiscord> <haxscramper> I just didn't notice return was `int|string`
[18:50:16] <FromDiscord> <haxscramper> So at first I thought just `|` in params would be enough
[18:50:17] <FromDiscord> <Tanguy> (edit) "https://play.nim-lang.org/#ix=3A9A" => "https://play.nim-lang.org/#ix=3A9C"
[18:52:20] <FromDiscord> <Goel> Why you used `when` instead of if? Does it make any difference or is just for style?
[18:52:36] <FromDiscord> <Tanguy> `when` is compile time, `if` is runtime
[18:54:04] <FromDiscord> <Tanguy> sent a code paste, see https://play.nim-lang.org/#ix=3A9L
[18:54:10] <FromDiscord> <Tanguy> (edit) "https://play.nim-lang.org/#ix=3A9L" => "https://play.nim-lang.org/#ix=3A9M"
[18:54:30] <NimEventer> New question by std124_lf: How do ref objects work in Nim and difference between new and common constructor, see https://stackoverflow.com/questions/69349202/how-do-ref-objects-work-in-nim-and-difference-between-new-and-common-constructor
[19:00:19] <FromDiscord> <@hjarausch_gitlab-5fa43a7bd73408> sent a code paste, see https://play.nim-lang.org/#ix=3A9X
[19:01:26] <FromDiscord> <xflywind> The code block looks terrible in discord
[19:01:36] <FromDiscord> <xflywind> (edit) "in" => "on"
[19:01:44] <FromDiscord> <xflywind>  https://media.discordapp.net/attachments/371759389889003532/892071010101260288/unknown.png
[19:03:53] <FromDiscord> <Rika> yeah its the bridge's fault
[19:05:50] <FromDiscord> <Gumber> uhhh
[19:05:53] <FromDiscord> <Gumber> isn't a const seq just an array lol?
[19:06:26] <FromDiscord> <Gumber> Nim's const btw does not == const in other languages like C/C++
[19:06:33] <FromDiscord> <Gumber> Nim's const is equiavlent to static const in those languages
[19:06:58] <FromDiscord> <Gumber> but I mean - if you know the size of the collection you want to store data in at compile time, you should use a static array and not a dynamic one (aka seq for Nim)
[19:07:23] <FromDiscord> <Gumber> also I'm very curious why you're storing all that text in there and not just the numbers
[19:07:34] <FromDiscord> <Gumber> but... I'm not really going to dig into your use case requirements unless you want me to 😄
[19:08:07] <FromDiscord> <haxscramper (haxscramper)> @HJarausch\_gitlab you can try to generated `int data[] = { ...  }` via `{.emit.}`
[19:08:08] <FromDiscord> <haxscramper (haxscramper)> And then `importc` this data in-place
[19:12:54] <FromDiscord> <haxscramper (haxscramper)> sent a code paste, see https://play.nim-lang.org/#ix=3Aa0
[19:15:07] <FromDiscord> <cabboose> Are they all 3 apart?!
[19:15:20] <FromDiscord> <cabboose> 🤣 but that 17 bra
[19:15:40] <FromDiscord> <cabboose> I am so curious as to what you need all of those numbers in a seq for
[19:16:23] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Ping timeout: 252 seconds)
[19:17:06] <FromDiscord> <@hjarausch_gitlab-5fa43a7bd73408> @haxscramper Many thanks, that's perfect!↵Helmut
[19:17:55] <FromDiscord> <haxscramper> Not related, but why say "Helmut" in each message
[19:19:32] <FromDiscord> <@hjarausch_gitlab-5fa43a7bd73408> @cabboose The data comprises a matrix which contains height corrections of the WGS84 geoid.
[19:19:39] <NimEventer> New thread by Mantielero: FFI - std::string, see https://forum.nim-lang.org/t/8465
[19:20:41] <FromDiscord> <haxscramper> ^ this one is fun
[19:21:13] <FromDiscord> <Gumber> I feel like a `reinterpret_cast` is in this person's near future 🙂
[19:21:20] <FromDiscord> <Gumber> if you can even do that with std::string and Nim's strings
[19:21:42] <FromDiscord> <Gumber> Nim and C++ interop is always a breath of fresh air xD
[19:22:00] <FromDiscord> <cabboose> Why do you have to hold all of that in memory though
[19:23:30] <FromDiscord> <cabboose> Are they all just incr of 3?
[19:23:40] <FromDiscord> <haxscramper> In reply to @Gumber "I feel like a": you can't reinterpret cast a `std::string` into things, because it is an objects (at least if I remember correctly you can't cast just `struct/class`)
[19:23:44] <FromDiscord> <haxscramper> they must be a pointers
[19:23:57] <FromDiscord> <haxscramper> But interfacing with std strings is slow since you need to construct them each time
[19:24:10] <FromDiscord> <Gumber> makes sense
[19:24:10] <FromDiscord> <haxscramper> Alternative solution would be to wrap things as `cstring` a
[19:24:12] <FromDiscord> <Gumber> yeah
[19:24:21] <FromDiscord> <haxscramper> and take advantage for implicit type conversion
[19:24:40] <FromDiscord> <haxscramper> So nim generates code for `<cstring-expression>` and then C++ invokes `st::string(const char)` constructor
[19:24:46] <FromDiscord> <haxscramper> but it is extremely wasteful
[19:24:55] <FromDiscord> <Gumber> yeah that def makes all the sense in the world
[19:24:57] <FromDiscord> <Gumber> I'm so glad we have you hax lol
[19:25:03] <FromDiscord> <Gumber> we'd be totally lost without you on the C++ front tbh
[19:25:10] <FromDiscord> <haxscramper> proper solution would be to make usage of std::string in nim easier
[19:25:24] <FromDiscord> <haxscramper> you work with std strings most of the time
[19:25:32] <FromDiscord> <haxscramper> if you use C++ libraries
[19:25:36] <FromDiscord> <Gumber> right
[19:25:37] <FromDiscord> <haxscramper> alright, not most of the tim
[19:25:46] <FromDiscord> <haxscramper> they have like trillion XXXString
[19:25:50] <FromDiscord> <haxscramper> classes
[19:25:51] <FromDiscord> <Gumber> well I think it's becoming more of a thing though as the stdlib for C++ is improving
[19:25:58] <FromDiscord> <Gumber> like everyone in game dev used to dodge it like the plague
[19:26:09] <FromDiscord> <Gumber> but now you see more and more folks depending on its containers and other data structures / algos
[19:26:25] <FromDiscord> <haxscramper> so ideally concepts would be a good solution for that, because you can write nim code in a way that works for all of these strings
[19:26:29] <FromDiscord> <Gumber> right
[19:26:31] <FromDiscord> <haxscramper> instead of having to convert them
[19:26:33] <FromDiscord> <haxscramper> I think
[20:15:52] *** Joins: beshr (~beshr@user/beshr)
[20:22:13] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[20:35:06] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Ping timeout: 245 seconds)
[20:40:28] <nixfreak_nim[m]> If a project is written in typescript , I should be able to create that same project in nim correct ?
[20:43:55] <FromDiscord> <haxscramper> technically yes, in reality there might be some implementation details that rely on typescript features
[20:44:02] <FromDiscord> <haxscramper> so you would have work around them
[20:44:22] <FromDiscord> <haxscramper> like intersection types, type-bound functions, `string | null`
[20:44:39] <FromDiscord> <haxscramper> Other feautres of type system and generally more relaxed type handling
[20:44:50] <FromDiscord> <haxscramper> Probably something else, but my TS experience is limited
[21:09:08] <FromDiscord> <zentoad> I signed up to the forums but never received an email to verify so I can't ask questions
[21:15:03] *** Joins: Mister_Magister (~Mister_Ma@user/mister-magister/x-2636733)
[21:15:23] <Mister_Magister> https://nim-lang.org/docs/net.html do you have more elaborate example on the server?
[21:17:15] <FromDiscord> <Kiloneie> type↵  Table[Key, Value] = object↵↵What is this ? where can i find the documentation ? I found it under Generics -> Is operator
[21:21:57] <FromDiscord> <haxscramper> https://nim-lang.org/docs/tables.html#Table ?
[21:22:34] <FromDiscord> <Kiloneie> Oh i get it now, thanks.
[21:29:24] <FromDiscord> <dom96> In reply to @zentoad "I signed up to": nickname?
[21:34:41] *** Joins: rockcavera (~rc@192.12.112.100)
[21:34:41] *** Quits: rockcavera (~rc@192.12.112.100) (Changing host)
[21:34:41] *** Joins: rockcavera (~rc@user/rockcavera)
[21:48:50] *** Joins: PMunch (~PMunch@c01F28BC3.dhcp.as2116.net)
[21:54:35] <FromDiscord> <JSONBash> can a parameter to a thread be `lent`? or only return vals?
[21:54:43] <FromDiscord> <JSONBash> maybe i don't even know what I am asking
[22:10:31] <Mister_Magister> about the walkFiles https://nim-lang.org/docs/os.html#walkFiles.i%2Cstring what are possible patterns? can i match multiple extensions?
[22:12:48] <FromDiscord> <haxscramper> no, regular posix globs don't support multiple extension/alternative patterns
[22:13:12] <FromDiscord> <haxscramper> extended glob supports it via `.(ext1|ext2)`, but I'm pretty sure `walkFiles` does not use that
[22:13:46] <Mister_Magister> fek
[22:16:11] <FromDiscord> <haxscramper> You can check for extension using `splitFile().ext in ["ext1", "ext2", "ext3"]`
[22:27:08] <naquad> is there some syntax sugar package that can do something like https://nim-by-example.github.io/macros/ class definition? i understand i can copy-paste it, but it would be interesting to see to what extent Nim's metaprogramming can go
[22:29:27] <Mister_Magister> @haxscramper i used walkDir and then in loop adding to sequence only elements i want
[22:32:23] <FromDiscord> <haxscramper> In reply to @naquad "is there some syntax": https://github.com/jjv360/nim-classes https://github.com/Glasses-Neo/OOlib
[22:32:26] <nrds> <12R2D299> 4GitHub: 7"Adds class support to Nim."
[22:33:34] <FromDiscord> <Goel> So `name: var openArray` can only be used inside a proc? Can't be used as return type for that same proc?
[22:33:47] <FromDiscord> <Goel> (edit) "openArray`" => "openArray[T]`"
[22:47:24] <naquad> haxscramper, looks interesting, thank you
[23:17:09] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Remote host closed the connection)
[23:35:21] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[23:36:44] *** Joins: max22- (~maxime@2a01cb0883359800761b1c69d9198b7f.ipv6.abo.wanadoo.fr)
