[00:01:15] <rond_> I don't see how the statement above and your two previous "withouth NRVO... with NRVO..." play together
[00:03:01] <Alipha> rond_: well, what you wrote would be what it would look like for NRVO at an assembly level, i guess. if NRVO didn't happen, then it would be more like `void bar(const VeryHeavyStruct& vhs, VeryHeavyStruct& returnValue);` and then `return newVhs;` would be kind of like `returnValue = std::move(newVhs);`
[00:04:45] <Alipha> rond_: from a performance standpoint, bar2 and bar3 is probably a wash. moving std::unique_ptrs is probably faster than moving VeryHeavyStruct, but that would be offset by the cost of dynamic allocation and the extra dereference. And from a code readability/maintainability standpoint, using std::unique_ptr there is way worse
[00:05:38] <rond_> btw, rpav jkaye see? Alipha managed to grasp the core of my questions, without telling me about XY and why I pose wrong questions (or without me providing the full context...). just a note, I still appreciate you being helpful
[00:08:21] <jkaye> The purpose of bringing up the XY problem is that it makes it more difficult and time consuming to answer the question, not impossible :)
[00:08:26] <jkaye> Glad you got what you were after
[00:08:33] <rond_> Alipha I see. Thank you so much! Summing up, 3rd is the way to go
[00:08:43] <Alipha> rond_: yeah
[00:09:11] <rond_> jkaye sometimes it's good to believe that a person asking question really does want to ask that question
[00:09:21] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:11e6:1e31:8844:c85f)
[00:11:11] *** Quits: Mooncairn (~mooncairn@user/mooncairn) (Quit: Quitting)
[00:11:49] <Alipha> rond_: it's hard answering an abstract scenario because your answer may depend upon things that the asker doesn't think is relevent. for instance, i asked if moving VeryHeavyStruct was cheap and asked if creating newVhs would benefit from stealing resources from vhs or is purely making observations of vhs
[00:12:07] <Alipha> questions that i wouldn't have to ask if the scenario was more concrete
[00:13:44] <rond_> In my opinion these were fair questions, not suggesting XY problem but just getting a bit more of data to see the full picture.
[00:14:07] <rond_> Anyway, thank you all! Enjoy your evenings (or other times of day)!
[00:14:45] *** Joins: Mooncairn (~mooncairn@user/mooncairn)
[00:17:29] *** Quits: sysctl (~sysctl@88.215.77.255) (Quit: leaving)
[00:21:49] *** Quits: jkaye (~jkaye@2601:281:8300:7530:8275:c2bd:871b:678c) (Ping timeout: 252 seconds)
[00:25:21] *** Quits: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438) (Quit: Client closed)
[00:29:48] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[00:30:28] *** Joins: mtt (~mtt@3e6bd1ca.rev.stofanet.dk)
[00:34:15] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.3)
[00:34:30] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[00:36:23] *** Quits: dld (~davidlowr@2620:6e:6000:2900:5db6:6f5a:3b6e:25f9) (Ping timeout: 264 seconds)
[00:37:43] *** Quits: evocatus (~evocatus@84.51.113.13) (Quit: Leaving)
[00:37:47] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[00:40:13] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[00:41:11] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 264 seconds)
[00:52:59] *** Quits: magla (~gelignite@55d4ee8d.access.ecotel.net) (Quit: Stay safe!)
[00:56:02] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[00:57:07] *** Quits: paulmcquad (~gamer@78.17.229.141) (Quit: Konversation terminated!)
[00:57:52] <zen_coder> is it good practice to have one io_context per thread?
[00:58:08] <zen_coder> I mean the io_context from asio
[01:01:25] *** Quits: mattf (~mattf@li908-138.members.linode.com) (*.net *.split)
[01:01:25] *** Quits: Youmu (uid129469@user/condy) (*.net *.split)
[01:01:25] *** Quits: greyblue9 (sid500829@ilkley.irccloud.com) (*.net *.split)
[01:01:25] *** Quits: computerquip (sid423484@user/computerquip) (*.net *.split)
[01:01:25] *** Quits: bjs (sid190364@user/bjs) (*.net *.split)
[01:01:25] *** Quits: NiKaN (sid385034@helmsley.irccloud.com) (*.net *.split)
[01:01:26] *** Quits: useful_idiot (~useful_id@154.3.40.151) (*.net *.split)
[01:01:26] *** Quits: Brewster (~Brewster@185.145.156.241) (*.net *.split)
[01:01:26] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (*.net *.split)
[01:01:26] *** Quits: jiffe (~jiffe@mail.nsab.us) (*.net *.split)
[01:01:26] *** Quits: notEVIL (~notevil@user/notevil) (*.net *.split)
[01:01:26] *** Quits: amosbird (~amosbird@13.75.119.182) (*.net *.split)
[01:01:26] *** Quits: malinus (~malinus@172.245.158.16) (*.net *.split)
[01:01:26] *** Quits: Alipha (~AliphaX@user/alipha) (*.net *.split)
[01:01:26] *** Quits: Oxyd (~oxyd@user/oxyd) (*.net *.split)
[01:01:26] *** Quits: Sevalecan (~sevalecan@user/sevalecan) (*.net *.split)
[01:01:26] *** Quits: bv (~bv@user/bv) (*.net *.split)
[01:01:26] *** Quits: WeblordPepe (~pepe@104.248.83.14) (*.net *.split)
[01:01:26] *** Quits: Cyp (~cyp@213.237.87.7) (*.net *.split)
[01:01:26] *** Quits: mabi (~m42e@pb42.de) (*.net *.split)
[01:01:41] *** Joins: mattf (~mattf@li908-138.members.linode.com)
[01:01:44] *** Joins: rdrg109 (~rdrg109@51.195.232.80)
[01:01:53] *** Joins: Youmu (uid129469@user/condy)
[01:01:54] *** Joins: notevil (~notevil@user/notevil)
[01:01:54] *** Joins: Alipha (~AliphaX@75-168-47-62.mpls.qwest.net)
[01:02:02] <cbreak> zen_coder: normally no
[01:02:04] *** Joins: mabi (~m42e@pb42.de)
[01:02:07] *** Joins: bv (~bv@sobrieti.bot.nu)
[01:02:16] *** Joins: greyblue9 (sid500829@id-500829.ilkley.irccloud.com)
[01:02:27] *** Joins: bjs (sid190364@id-190364.helmsley.irccloud.com)
[01:02:31] *** Quits: Alipha (~AliphaX@75-168-47-62.mpls.qwest.net) (Changing host)
[01:02:31] *** Joins: Alipha (~AliphaX@user/alipha)
[01:02:32] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[01:02:37] *** Quits: bv (~bv@sobrieti.bot.nu) (Changing host)
[01:02:37] *** Joins: bv (~bv@user/bv)
[01:02:42] *** Quits: bjs (sid190364@id-190364.helmsley.irccloud.com) (Changing host)
[01:02:42] *** Joins: bjs (sid190364@user/bjs)
[01:02:52] *** Joins: computerquip (sid423484@id-423484.lymington.irccloud.com)
[01:03:00] *** Quits: computerquip (sid423484@id-423484.lymington.irccloud.com) (Changing host)
[01:03:00] *** Joins: computerquip (sid423484@user/computerquip)
[01:03:00] *** Joins: NiKaN (sid385034@id-385034.helmsley.irccloud.com)
[01:03:21] *** Joins: Sevalecan (~sevalecan@user/sevalecan)
[01:03:27] *** Joins: Oxyd (~oxyd@user/oxyd)
[01:03:32] *** Joins: Cyp (~cyp@213.237.87.7)
[01:03:35] *** Joins: jiffe (~jiffe@mail.nsab.us)
[01:03:44] *** Joins: amosbird (~amosbird@13.75.119.182)
[01:05:22] *** Joins: paule32 (~paule32@user/paule32)
[01:06:35] *** Joins: WeblordPepe (~pepe@104.248.83.14)
[01:08:42] *** Joins: malinus (~malinus@172.245.158.16)
[01:11:03] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[01:17:30] <cq-work> zen_coder, normally, you would have one io_context and then pass that io_context to each thread (likely in thread initialization), then call io_context.run() in those threads.
[01:18:02] <cq-work> Using that single io_context, you can then schedule work among all of those threads. If you use multiple io_contexts, you don't really get those benefits.
[01:18:20] <cq-work> er, io_contexts per thread, there are reasons to use more than one io_contexts.
[01:21:56] *** Quits: Mooncairn (~mooncairn@user/mooncairn) (Quit: Quitting)
[01:22:33] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Ping timeout: 276 seconds)
[01:24:59] *** Joins: Brewster (~Brewster@185.145.156.241)
[01:34:24] *** Joins: reumeth (~reumeth@user/reumeth)
[01:36:56] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:37:04] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:37:04] *** ChanServ sets mode: +v npaperbot
[01:40:51] *** Joins: bobb_ (~bobb_@dslb-088-065-178-228.088.065.pools.vodafone-ip.de)
[01:46:12] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:48:35] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 260 seconds)
[01:52:59] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[01:59:45] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[02:02:45] *** Quits: chris64 (~chris@user/chris64) (Quit: leaving)
[02:04:12] *** vinleod is now known as vdamewood
[02:06:56] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 258 seconds)
[02:07:26] <cq-work> I just realized Boost Outcome doesn't have monadic functions. Neither do std::expected...
[02:07:35] <cq-work> Neither does*
[02:09:15] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[02:17:08] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:205d:b36:d1bc:fd5e)
[02:20:27] *** Quits: bobb_ (~bobb_@dslb-088-065-178-228.088.065.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[02:24:30] *** Joins: emerent_ (~quassel@p200300cd574855daba27ebfffed28a59.dip0.t-ipconnect.de)
[02:24:30] *** emerent is now known as Guest7256
[02:24:30] *** emerent_ is now known as emerent
[02:24:34] *** Quits: Guest7256 (~quassel@p200300cd574855c8ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[02:25:56] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Ping timeout: 245 seconds)
[02:26:49] *** Joins: Mooncairn (~mooncairn@user/mooncairn)
[02:45:55] *** Quits: nshire (~Neal@user/nshire) (Ping timeout: 252 seconds)
[02:48:16] *** Quits: ravan (~ravan@user/ravan) (Remote host closed the connection)
[02:48:35] *** Joins: ravan (~ravan@user/ravan)
[02:53:48] *** Joins: nshire (~Neal@user/nshire)
[03:00:18] *** Joins: euouae (~euouae@user/euouae)
[03:01:41] <euouae> I'm trying to derive from std::stringstream, but I get this error when using << https://wandbox.org/permlink/m2tWwN6VQ5JoUvLd
[03:01:53] <euouae> Does that mean I can't do this?
[03:01:57] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[03:04:02] <johnny> what are you even doing with std::stringstream? :)
[03:04:27] <johnny> what's the purpose exactly?
[03:04:33] <euouae> I'm trying to replace a serializing class with it
[03:04:38] <euouae> without removing the class itself
[03:04:57] <johnny> how extend rather than compose?
[03:05:10] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[03:05:14] <johnny> or maybe privately inherit from std::stringstream
[03:05:15] <euouae> is stringstream not a class?
[03:05:21] <johnny> it is
[03:06:08] <johnny> but seriously, i'd suggest never inheriting from C++ stdlibs if you can avoid it and rather compose an object in which stringstream is a member
[03:06:24] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[03:06:34] <johnny> uggh i dislike C++ streams so much.. luckily i can i just use fmtlib most of the time
[03:06:57] <euouae> It looks like I can fix it by `class Foo : public std::stringstream { ... }`
[03:07:16] <euouae> Why not inherit from a std class? Why don't you like streams?
[03:07:23] <ville> euouae: classes created with the class keyword default to private access specifier
[03:07:29] <johnny> because they don't tend to have virtual destructors
[03:07:30] <ville> ah nevermind
[03:07:48] <johnny> so you run into object slicing issues if you're not careful
[03:07:56] <ville> johnny: ...and guess what streams have?
[03:08:09] <johnny> even so, composing is still better
[03:08:17] <ville> johnny: by what metric?
[03:09:03] <johnny> because composition is a nicer pattern
[03:09:14] <euouae> what is composition ?
[03:09:17] <ville> nicer by what metric?
[03:09:20] <johnny> no "metric" other than polluting your hierarchy
[03:09:31] <johnny> you do you ville
[03:09:35] <johnny> just keep being you
[03:09:51] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:11e6:1e31:8844:c85f) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:10:02] <ville> it's different to make a claim: "it's better" or to make a statement: "i like it better"
[03:10:02] <johnny> euouae, rather than always suclassing, you can make the string stream a member
[03:10:32] <johnny> if you don't know why composition tends to be preferred over inheritance i'm not gonna explain it to you
[03:10:44] <euouae> no need to be snarky, I didn't ask
[03:10:55] <johnny> that wasn't to you
[03:11:05] <euouae> oops ok
[03:11:20] <johnny> although in the case of C++, it probably doens't matter that much since multiple inheritance is a thing
[03:11:25] <johnny> as much*
[03:12:13] <johnny> euouae, i don't like streams because they assume text , even at the most base level, rather than the most base stream dealing with bytes only and any text related stuff being on top
[03:12:24] <euouae> should I write a serializer overloading << and >> or objects
[03:12:30] <euouae> or is it better to use read() and write() methods?
[03:12:33] <johnny> and also the formatting methods are weird, like having to do << std::hex << value
[03:12:51] <ville> euouae: makes no real difference
[03:13:01] <johnny> yeah it won't make much of a difference
[03:13:10] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:f56e:630b:ae2e:6e55) (Ping timeout: 260 seconds)
[03:13:11] <johnny> i prefer the explicit methods, but that's just indeed a preference
[03:13:40] <johnny> i still use << with cout, because i generally want to avoid direct cout in my program, so it's a refactoring signal
[03:13:57] <johnny> euouae, what exactly are you serializing though?
[03:14:07] <euouae> I'm refactoring a projects code
[03:14:09] <euouae> that saves stuff in text
[03:14:24] <johnny> ok? so what makes it serialization ?
[03:14:32] <johnny> i mean.. other than just saving it
[03:15:42] <johnny> oh.. it's about to be dinner time..
[03:15:47] <johnny> bbiab
[03:15:53] <euouae> enjoy! They're serializing objects
[03:17:01] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.2)
[03:18:32] *** Joins: plastico (~plastico@neomutt/plastico)
[03:19:03] *** Quits: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz) (Remote host closed the connection)
[03:22:46] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 260 seconds)
[03:24:39] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[03:28:57] <euouae> Can I write bytes into a stringstream object?
[03:29:05] <euouae> Or only file streams?
[03:31:41] *** Joins: nshire_ (~Neal@47.150.248.17)
[03:31:51] <euouae> Can I write bytes into a stringstream object with write()?
[03:32:10] <ville> euouae: https://en.cppreference.com/w/
[03:32:25] <ville> bookmark that website
[03:32:59] *** Joins: euouae_ (~euouae@user/euouae)
[03:33:16] <euouae_> Can I write bytes into a stringstream object with write()? https://wandbox.org/permlink/ooBCzYgZ0VJmeCTz doesn't print 'b' as I expected
[03:35:25] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[03:35:29] *** Quits: nshire (~Neal@user/nshire) (Ping timeout: 258 seconds)
[03:36:15] *** Quits: euouae (~euouae@user/euouae) (Ping timeout: 258 seconds)
[03:37:04] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae) (Ping timeout: 252 seconds)
[03:38:57] <euouae_> oh I can. Okay, I'm getting the handle of it
[03:45:54] *** Joins: ferdna (~ferdna@user/ferdna)
[03:46:15] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:50:24] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5d6e:87c6:1a95:cc2d)
[03:53:47] *** Quits: Inst_ (~Inst@2601:6c4:4080:3f80:e9cf:d82f:5daa:fcc1) (Ping timeout: 264 seconds)
[03:54:09] *** Quits: DSpider (DSpider@86.127.147.218) (Quit: Leaving)
[03:54:59] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5d6e:87c6:1a95:cc2d) (Ping timeout: 264 seconds)
[03:55:05] <RandomReader> euouae_ - .str() is the backing store, not the natural result of stream operations .. it still behaves as a stream with stream rules
[03:55:32] *** Joins: chozorho (~chozorho@2601:146:300:c30::2f9d)
[03:55:57] <euouae_> Can I use it for binary serialization RandomReader ?
[03:56:09] <euouae_> e.g. foo { len = 4, bar=binary stuff }
[03:57:49] <RandomReader> so as a stream, first you insert two words, then you extract two words, which consumes the entire stream and leaves it in eof state, unable to handle any more stream operations
[03:58:44] <RandomReader> I don't know what you mean by binary serialization, but you can use it as a stream just fine
[03:58:51] <RandomReader> I'm reminding you that it does in fact behave like a stream :P
[03:59:06] <euouae_> After I extract the words, str() still shows them though
[03:59:18] <euouae_> so is str() independent of << and >> semantics?
[03:59:25] <RandomReader> yes, like I said it's the backing store, the underlying buffer, *not* the result of stream operations
[03:59:26] <euouae_> I mean, extraction semantics
[03:59:49] <RandomReader> maybe taking a step back here, what is it you want to do with this? in terms of use
[03:59:56] <euouae_> What I mean by binary serialization is that I'm looking at code that has .write(void*, size_t) and write(T)
[04:00:11] <euouae_> and I want to replace the class with a stringstream (already has .write()) and << overloaded on T
[04:00:36] <euouae_> classes above will use a mixture of << and write() to create hybrid serializations
[04:00:48] <euouae_> such as foo { int len = 4; char *bar = "\0\0\0\0"; }
[04:01:03] <euouae_> ^ the entire string of what I wrote above could be one such serialization
[04:01:45] <euouae_> There's also a `.getData()` which is replaced by stringstream's `.str()`
[04:02:25] <RandomReader> why replace the existing one?
[04:02:44] <Alipha> I think composition is way more appropriate than inheritance
[04:04:49] <euouae_> OK I'm going with composition then
[04:04:55] <RandomReader> and I mean that question in the sense that from the description so far, it's a custom serialization, but not a stream .. so I'm not clear how stringstream relates to it
[04:05:13] <euouae_> The custom serialization has memory leaks and stuff
[04:05:18] <RandomReader> so "why replace" in the sense of what are you trying to add / what's wrong with the existing one
[04:05:47] <euouae_> It has memory leaks and uses GString even though it is not for any particular purpose
[04:06:09] <euouae_> it's also a lot of files that can be replaced, because there's a custom class for Hex serialization, another for Binary, another for text etc
[04:06:18] <euouae_> stringstreams provide all these features
[04:06:26] <RandomReader> is it possible to just have it use a vector or something internally, and be ok?
[04:06:44] <RandomReader> does it though?
[04:06:56] <euouae_> It has hex, binary, text yeah
[04:06:58] <RandomReader> iostreams have some formatting for numeric values, but not arbitrary data
[04:07:14] <RandomReader> e.g. you can't get that out of .write(), if it's meant to just generate a string of hex values
[04:07:52] <euouae_> I don't follow you, I can write 0x41 for 'A'
[04:08:05] <euouae_> e.g. out << hex_thing << 'A' will write 0x41
[04:08:10] <euouae_> or 41 or something to that effect
[04:08:20] <RandomReader> << std::hex << 'A';
[04:08:20] <geordi> A
[04:08:30] <RandomReader> no it won't, and neither will .write()
[04:08:38] <euouae_> << std::hex << 16;
[04:08:39] <geordi> 10
[04:08:45] <RandomReader> yes, an integer only
[04:09:02] <RandomReader> do all the uses of this class that expect hex serialization feed it integers and only integers?
[04:09:16] <euouae_> I can rewrite the uses of the class if I need to
[04:09:30] <RandomReader> I think one of us is still missing the point here
[04:09:52] *** Joins: proller (~p@80.240.216.69)
[04:09:56] <RandomReader> when you describe a serializer that has multiple formats, this is what I envision: I can write any data to the serializer, but ask it to put *all* of its output in a specific format
[04:10:13] <RandomReader> so I can get raw bytes out of it, or I can get a string with hex values, or json, or whatever the heck it supports
[04:10:18] <RandomReader> that is not even remotely like an iostream
[04:10:29] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: what if I am turning narcissist? pretentious, asocial, inpromptu squabbles, easily become childishness from the slightest emotional distress.. i feel like I've only truly grown up on the outside, and it's painful to remain this way, but it's far from the)
[04:10:34] <euouae_> ok nevertheless, I don't need 5 classes
[04:10:48] <euouae_> I could have a single serializer class.
[04:10:52] <RandomReader> this sounds like something you can refactor sure
[04:11:18] <euouae_> with an underlying stringstream object, is what I thought. of course vector will definitely work, but it sounds like it's missing more features
[04:11:23] <RandomReader> but so far it sounds like it'd be appropriate to fix its leaky storage first, and then keep iterating from there .. it doesn't sound like stringstream is appropriate
[04:11:24] <euouae_> whereas stringstream has some of what I already need
[04:12:12] <euouae_> One of the issues of this project is that it is somewhat old, and uses OO heavily which results in a lot of files
[04:12:30] <euouae_> and then people added stuff on top, which means duplication of features etc. It's hard to manage
[04:12:40] <euouae_> so it would be a good thing if I could remove files from the project
[04:13:21] <euouae_> Yeah I could just fix the memory leak but I really just want to replace it entirely :P
[04:13:38] <RandomReader> then I'd start from its concepts, what it represents
[04:13:49] <RandomReader> I would not start by trying to retrofit an iostream into it .. I'd consider that worse
[04:13:59] <euouae_> what I see here is that they are using a serializer class as base
[04:14:09] *** Joins: Inst_ (~Inst@2601:6c4:4080:3f80:5872:8a70:85c4:9bd4)
[04:14:10] <euouae_> other objects inherit from it and add their own serialization routines on top
[04:14:35] <euouae_> so Foo : Bar, and Bar : Serialize. When foo serializes, it uses Bar's serializations
[04:14:57] <RandomReader> are Foo and Bar only about serialization, or are they the data being serialized?
[04:15:05] <euouae_> print "Foo", serialize Bar, print "Foo end"
[04:15:15] <euouae_> They're the data being serialized
[04:15:17] <RandomReader> ok
[04:15:29] <euouae_> Foo and Bar are things like media for example
[04:17:43] <euouae_> I guess the idea of deriving from serialize itself is not so good. I don't know why Foo needs a .write() method. It would be better to do s.write(Foo)
[04:17:53] <euouae_> instead of Foo.write(s)
[04:17:53] <RandomReader> what's the current flow when it's time to serialize Foo?
[04:18:08] <euouae_> It's Foo.write(out); and Foo.read(in);
[04:18:41] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[04:18:57] <RandomReader> well, either way, only Foo is going to know what its insides look like .. where "write" lives isn't terribly important
[04:19:45] <RandomReader> for an example of a non-inherited interface, you could look at something like Cereal: https://uscilab.github.io/cereal/
[04:21:59] <RandomReader> if nothing is currently checking collections of things like Foo asking if they can be casted to SerializerBase, then the inheritance probably isn't doing much
[04:22:29] <RandomReader> but since there's already a hierarchy with things like Foo and Bar, it doesn't really change much
[04:23:13] <RandomReader> what determines the format though?
[04:23:20] <RandomReader> in the current code I mean
[04:23:30] <euouae_> It depends on which class you inherit from
[04:23:36] <euouae_> If you inherit from the Hex class, you get hex stuff
[04:23:43] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5d6e:87c6:1a95:cc2d)
[04:24:02] <RandomReader> oh, hmm
[04:24:25] <RandomReader> where does this serialization eventually end up? e.g. does the project just dump everything to a single file regardless of format, or?
[04:24:42] <euouae_> the serialization is in memory and then written to a file
[04:25:27] <euouae_> I actually don't know what happens to it after it's serialized in memory, I haven't read the code writing to the file(s)
[04:25:43] <euouae_> cereal has a cool interface
[04:26:00] <RandomReader> that would be useful to know, especially if there's a structured file format or how it handles data, particularly if there are mixed formats .. like why the format choice at all if it's all going in one file, etc
[04:26:21] *** Joins: KombuchaKip (~kip@192.252.230.5)
[04:26:34] <RandomReader> if the existing formats aren't relevant, then it might be an option to just switch wholesale to a library like Cereal or one of the others, if it helps at all
[04:26:44] <euouae_> hmmm yeah. I see what you mean
[04:27:55] <euouae_> Those are good points, thanks. I will fix the memory leak, and then investigate to see what happens after serialization, as you suggested
[04:28:06] <euouae_> holding off any larger edits for later
[04:28:14] <RandomReader> ok cool, welcome
[04:29:30] <RandomReader> and yeah, I often have the same reaction when I see an interface that looks silly and buggy, want to just replace it entirely .. but it's always important to do some archeology first to figure out how/why they got here, so you can accurately replace not just the code but the original rationale too
[04:30:33] <RandomReader> I've sometimes been most of the way through a refactor and then discover some critical hidden logic about why they did what they did originally, and my entire approach doesn't work anymore
[04:31:16] <RandomReader> which sucks in terms of wasted time, but I usually learn something, so
[04:31:43] <euouae_> heheh
[04:39:14] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[04:39:29] *** Quits: Mooncairn (~mooncairn@user/mooncairn) (Quit: Quitting)
[04:50:46] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5d6e:87c6:1a95:cc2d) (Ping timeout: 252 seconds)
[04:59:20] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 260 seconds)
[05:01:35] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[05:02:47] *** Joins: The_Jag (~The_Jag@host-87-17-20-218.retail.telecomitalia.it)
[05:05:10] *** Quits: The_Jag_ (~The_Jag@host-80-182-37-74.retail.telecomitalia.it) (Ping timeout: 260 seconds)
[05:12:15] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5d6e:87c6:1a95:cc2d)
[05:18:30] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[05:36:57] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:37:06] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:37:06] *** ChanServ sets mode: +v npaperbot
[05:38:44] *** Quits: euouae_ (~euouae@user/euouae) (Quit:  )
[05:43:14] *** Quits: causative (~halberd@user/causative) (Remote host closed the connection)
[05:44:15] *** Joins: causative (~halberd@user/causative)
[05:48:53] *** Quits: NiKaN (sid385034@id-385034.helmsley.irccloud.com) (Ping timeout: 258 seconds)
[05:49:30] *** Quits: greyblue9 (sid500829@id-500829.ilkley.irccloud.com) (Ping timeout: 260 seconds)
[05:49:39] *** Quits: bjs (sid190364@user/bjs) (Read error: Connection reset by peer)
[05:50:25] *** Quits: Youmu (uid129469@user/condy) (Ping timeout: 258 seconds)
[05:51:04] *** Quits: psb (sid500598@user/psb) (Read error: Connection reset by peer)
[05:51:09] *** Joins: bjs (sid190364@user/bjs)
[05:51:30] *** Joins: NiKaN (sid385034@helmsley.irccloud.com)
[05:52:30] *** Joins: greyblue9 (sid500829@id-500829.ilkley.irccloud.com)
[05:53:14] *** Joins: psb (sid500598@user/psb)
[05:53:38] *** Joins: Youmu (uid129469@user/condy)
[06:01:32] *** Quits: psb (sid500598@user/psb) (Ping timeout: 258 seconds)
[06:01:55] *** Quits: greyblue9 (sid500829@id-500829.ilkley.irccloud.com) (Ping timeout: 258 seconds)
[06:02:11] *** Quits: Youmu (uid129469@user/condy) (Ping timeout: 264 seconds)
[06:02:18] *** Quits: computerquip (sid423484@user/computerquip) (Ping timeout: 258 seconds)
[06:03:04] *** Joins: Youmu (uid129469@user/condy)
[06:03:38] *** Joins: computerquip (sid423484@user/computerquip)
[06:04:11] *** Joins: greyblue9 (sid500829@ilkley.irccloud.com)
[06:04:13] *** Joins: psb (sid500598@user/psb)
[06:13:37] *** Quits: nshire_ (~Neal@47.150.248.17) (Quit: Leaving)
[06:13:52] *** Joins: nshire (~Neal@user/nshire)
[06:14:34] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 258 seconds)
[06:28:57] *** Inst_ is now known as Inst
[06:40:00] *** Quits: ShiftyLogic (~shiftylog@104.200.132.217) (Remote host closed the connection)
[07:08:50] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 260 seconds)
[07:22:10] *** Joins: damicesello (~cesello@host-188-13-240-8.business.telecomitalia.it)
[07:22:10] *** Quits: cesello (~cesello@user/cesello) (Read error: Connection reset by peer)
[07:22:58] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[07:34:30] *** Joins: nshire_ (~Neal@47.150.248.17)
[07:36:15] *** Quits: nshire (~Neal@user/nshire) (Ping timeout: 260 seconds)
[07:49:40] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 260 seconds)
[07:50:24] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[07:57:42] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[08:09:15] <very_sneaky> hey all, i'm implementing a pub/sub messaging system atm, but i've noticed that I have a need for a unicast capability so that entities can make specific requests and have the responses go only back to the requestor. Does anybody know of any good discussion/patterns that unify the broadcast capabilities of the pub/sub pattern with unicast?
[08:16:27] <very_sneaky> I've tried to shoehorn unicast in by creating a bespoke channel for each subscriber, but I'm having trouble with that because the way subscribers currently work out what to do when they've received a message is trigger a callback based on the topic the message was published to - this is fine for the broadcast case where a topic might be "BuyOrder" as an example, and the "BuyOrder" callback is
[08:16:30] <very_sneaky> executed, but in the unicast case, the only topic should be the subscribers unique channel. If the only topic is the subscriber id, the subscriber still won't know what to do with the message because it has no context for what it is or how it should be processed
[08:17:02] <very_sneaky> hmm. maybe this is just the fragility of using topics as the descriptor of the message, perhaps the message should contain metadata about what it contains independently of where it's been published
[08:17:11] *** Quits: lumbermb (~lumbermb@191.114.121.99) (Ping timeout: 264 seconds)
[08:42:07] *** Quits: Leone (~Leo@216.154.21.17) (Read error: Connection reset by peer)
[08:51:30] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[08:58:25] *** Joins: segnior (segnior@user/segnior)
[09:12:18] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[09:18:08] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[09:30:41] <johnny> ok.. so *i think* i wanna use std::variant. i'm reading all sorts of examples about it, but i still don't quite get it
[09:31:18] <johnny> so there's a whole set of types that share the same interface, but they definitely don't share a base type
[09:34:01] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 252 seconds)
[09:35:19] *** Quits: ravan (~ravan@user/ravan) (Quit: Leaving)
[09:35:51] <RandomReader> std::variant is just a typesafe union, so you can put a value of any one of N types in the same storage
[09:36:38] <RandomReader> or: it's a sum type, that represents the total of all values the list of types can express
[09:36:57] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:37:07] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:37:07] *** ChanServ sets mode: +v npaperbot
[09:37:52] <RandomReader> if you wanted to represent, say, the value of a json member which could be a number or a string, then variant<double, string> might be suitable
[09:38:07] <johnny> the problem isnt understanding what it does necessarily
[09:38:55] <johnny> for me, it's usually about 2 things  some form of runtime polymorphism, or just some of the static and compile time stuff really clicking
[09:39:08] <RandomReader> very_sneaky - not sure those really mesh, aren't the concepts completely different? usually the goal with pub/sub is to separate knowledge, so neither has to know about the other .. but a dedicated channel is more like direct request/response and each side knows the other by nature
[09:39:25] <johnny> oh.. and just understanding how to express things i already know how to do, but in C++
[09:40:28] <johnny> like i understand lots of concepts, but i don't always grasp how it's expressed in C++
[09:41:01] <RandomReader> johnny - not sure I follow
[09:41:14] <RandomReader> maybe: it's a dynamically typed object, where the set of possible types is known in advance?
[09:41:27] <johnny> the set of possible types is indeed known in advance
[09:41:45] <RandomReader> I wouldn't consider it polymorphism, although you can dispatch from it in a polymorphic way with std::visit
[09:42:13] <johnny> i could not grasp std::visit , it seemed like waaay too much for so little i guess
[09:42:28] <johnny> although i was just reading about a make_visitor
[09:42:56] <RandomReader> https://en.cppreference.com/w/cpp/utility/variant/visit   scroll down to the example tagged 4
[09:43:11] <RandomReader> it turns a function overload set into a switch-like thing, based on the type currently active in the variant
[09:43:27] <johnny> yeah.. i saw that
[09:43:29] <RandomReader> so instead of case statements, you have matching parameters (overloads)
[09:43:34] <RandomReader> that's basically it
[09:44:08] *** Joins: reumeth (~reumeth@user/reumeth)
[09:44:17] <RandomReader> you could do the equivalent with a bunch of if/else on variant.index or std::holds_alternative
[09:44:36] <johnny> seems like one shouldn't have to write out anything if you're just simply returning the the held value
[09:44:53] <RandomReader> the advantage to std::visit's model is because the list of types is known statically, and it turns the conditional into function calls, the compiler then *requires* that all the types be handled by matching functions
[09:45:12] <RandomReader> which is useful if you want to ensure all cases are handled .. not something you can do with a plain switch
[09:45:35] <RandomReader> what do you mean by "returning the held value"?
[09:47:13] *** Quits: chozorho (~chozorho@2601:146:300:c30::2f9d) (Ping timeout: 252 seconds)
[09:47:49] <very_sneaky> RandomReader: yeah, they are. However, they both have different strengths and weaknesses so there's a use case in which features of both are useful. Example: I have a service monitoring for new stock market data. As it becomes available, it sends a broadcast out to all subscribers. This is a good use of pub/sub. One of the subscribers is doing analysis and wants a specific range of historical
[09:47:52] <very_sneaky> data - it wants to make a request and receive a response. The response shouldn't be broadcast out to all subscribers, so this is where the more traditional client/server or unicast communication is more useful
[09:48:31] <RandomReader> right, I'm basically questioning whether these should be under the same mechanism at all
[09:48:46] <RandomReader> I'd think of those as two entirely separate communication mechanisms, not the same
[09:49:12] <RandomReader> maybe you optimize for network I/O by multiplexing them on the same connection, but I wouldn't consider them the same API (to start with)
[09:49:31] <very_sneaky> currently i'm trying to achieve this through the use of unique topic id's, but the other way to approach it might be to advertise services through the broker, which would still allow for the abstraction of the end points away from the message themselves, but i'm struggling to get the details right
[09:49:47] <johnny> ah.. #2 doesn't atually use pass anything to std::visit() and also returns
[09:50:02] <johnny> oh wait
[09:50:25] <johnny> ok, it doesn't have the overloaded operators
[09:51:00] <johnny> #4 is how everybody everywhere was writing it, and it's kinda making my head spin
[09:51:24] <very_sneaky> RandomReader: i haven't tackled socket connections yet - this is all in-memory message passing currently.
[09:51:43] <very_sneaky> ideally i'd be able to abstract those details from the clients and servers though
[09:53:18] <RandomReader> johnny - #4's "overloaded" is just a wrapper so you can use lambdas, what it ultimately creates is just:   struct Visitor { operator()(double arg) { ... }  operator()(const std::string& arg) { ... }  };  std::visit( Visitor{}, v );
[09:53:38] <johnny> yes, i saw that written out in some stuff i was reding
[09:53:54] <RandomReader> std::visit wants an object that can be called with every possible type, so we create an object with an operator() for every type
[09:53:54] <johnny> almost exactly tat
[09:53:56] *** Joins: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net)
[09:54:09] <RandomReader> (or an operator() template, which is what the generic/auto lambdas are doing)
[09:54:31] <ville> the overload bit is not really variant-/visit-specific. it solves a general problem in c++: functions are not first class by means of more boilerplate
[09:54:53] <ville> which is how you solve everything in c++: more boilerplate
[09:55:08] <johnny> eah.. the boilerplate is the problem
[09:55:34] <johnny> thus this make_visitor i was reading about
[09:55:59] <ville> the overload is one of the less-boilerplate-y solutions around, but boilerplate none the less
[09:57:18] <johnny> in a lot of cases it just seems like recreational typing, and that's a thing a programming language should focus on preventing
[09:57:57] <ville> there were bunch of "overload" papers up at one point but i expect all of them are dead by now. haven't reen a revision of them in years
[09:57:57] <RandomReader> very_sneaky - I don't get what would be abstracted here, since they need to know about each other to begin with
[09:58:08] <ville> err seen
[09:58:12] <RandomReader> I mean, the communication medium I understand abstracting, but not beyond that
[09:58:17] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 244 seconds)
[10:00:24] <johnny> imagine when they figure out how to do githb copilot for C++..
[10:00:29] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[10:01:41] <very_sneaky> i mean, they only need to know about whatever the message broker tells them is available. if everything is querying the message broker for info, then messages just need to go to the message broker. In that sense, from a socket perspective, it will probably all be unicast from publisher -> message broker, and then broadcast from message broker -> subscriber. In that sense, I guess the clients
[10:01:44] <very_sneaky> may be able to be abstracted away from the communication mechanism because that's all handled by the message broker
[10:02:35] <RandomReader> so you're turning the broker into a message router? why is this intermediary necessary?
[10:02:52] <RandomReader> (I mean it might be, but it's complexity, so part of the design decision here)
[10:04:09] <RandomReader> to put this in perspective, pretend the broadcast side doesn't exist at all, and this is only about unicast: does it still make sense?
[10:04:11] <very_sneaky> i'm not sure i understand the question - the broker is a message router and my understanding is that it's one of the integral elements of most pub/sub implementations
[10:04:26] <very_sneaky> so, it's there for all the reasons one would choose pub/sub as a messaging architecture
[10:04:40] <RandomReader> but pub/sub is chosen because the messaging is *not* unicast
[10:04:55] <RandomReader> so if your only purpose is unicast (for this thought exercise), what would make sense as an interface?
[10:04:56] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[10:05:34] <very_sneaky> i have utility for broadcast, my point is that publishers don't know about that - that's the abstraction that a message broker provides
[10:05:58] <very_sneaky> subscribers don't know about it either
[10:06:12] <RandomReader> yes, for broadcast/multicast
[10:06:24] <RandomReader> but that's not what you're trying to implement at the moment, you're trying to implement unicast, which is fundamentally different
[10:06:34] <RandomReader> so pretend you *don't* already have something existing, and you're creating a unicast flow from scratch
[10:07:04] <very_sneaky> if unicast was my only requirement, something like the HTTP model makes sense - client/server
[10:07:37] <RandomReader> ok, so now stick something in the middle for no good reason (at the moment): this is a message router pretending to be a message broker or whatever
[10:07:45] *** Joins: teepee (~teepee@openscad/teepee)
[10:07:55] <RandomReader> there are consequences to this: it's in the way, it adds overhead, complexity, etc
[10:08:11] <RandomReader> client can't talk directly to a server, it has to go through this thing first -- why? what benefit does this bring? etc
[10:08:12] <very_sneaky> it does strike me though, that the many-many multiplicity associated with pub/sub is basically just a superset of one-one, so it's not _fundamentally_ different (i agree that it is different though)
[10:08:59] <RandomReader> and then for this object itself, you have to add identifiers and routing functionality that isn't used at all for pub/sub
[10:09:36] <RandomReader> e.g. what you came up with originally, the sub id, which then has to be passed to the publisher, etc
[10:10:02] <very_sneaky> does it add complexity? My thought is that by having a single messaging interface that it would simplify things from a maintainability perspective - all routing code would be in one place, all messaging uses the same machanism for dispatch/receipt - easier to understand/debug/maintain?
[10:10:38] <very_sneaky> means the clients don't have to care about who it's actually communicating with
[10:10:40] <RandomReader> that's what I'm raising .. I wouldn't consider it simple because it's trying to shoehorn unicast into something that was designed for blind/blind multicast
[10:11:01] <RandomReader> the models don't fit, which is going to make the API awkward -- why does the publisher need an ID sometimes? etc
[10:11:01] <very_sneaky> i guess what i'm wondering is, is there a good way to do blind/blind unicast
[10:11:23] <RandomReader> that's fundamentally impossible, since unicast requires an identity
[10:12:04] <RandomReader> so this is about weighing whether this kind of abstract complexity, model mismatch, is worth the single communication point from e.g. an I/O or code perspective
[10:12:21] <very_sneaky> does it? in the same way that a message broker has visibility over all publishers and subscribers, presumably you could have a similar system for services and responses
[10:12:21] <RandomReader> I wouldn't call it simpler, but it may be more optimal in some way
[10:12:51] <very_sneaky> or, query/response proxying and forwarding
[10:13:28] <RandomReader> you're getting at it exactly with "proxying": why would someone put a proxy in place, since it now becomes a single bottleneck?
[10:13:32] <RandomReader> the proxy needs to add some value
[10:13:39] <RandomReader> what value is being added here?
[10:14:06] *** Quits: nshire_ (~Neal@47.150.248.17) (Quit: Leaving)
[10:14:21] *** Joins: nshire (~Neal@user/nshire)
[10:15:13] <RandomReader> one way to look at pub/sub at a high level is deduplicating identifiers: publisher says it has data for X, subscribers want data for X, X is a stable and semi-persistent identifier but doesn't need to be repeated all the time (in individual unicast communications)
[10:15:40] <RandomReader> but unicast is the opposite from that perspective: it's a temporary, non-stable, one-time identifier for a specific communication (request/response)
[10:15:54] <RandomReader> so even just in terms of tracking that, the data structures are often different, because the scale is different
[10:16:16] <very_sneaky> the value it adds is the blind/blind component. If I want to move to a distributed microservice model going forward, having a server/message broker handle service discovery/client registration is useful. It does add a single point of failure, but this is a criticism of pub/sub without having unicast
[10:17:10] <RandomReader> there isn't anything blind about it, since there's nothing for it to deduplicate: the lookup for a request target is the same regardless, and the requestor's identifier is always required to know where to send a response
[10:17:53] <RandomReader> a network server listens on an IP address, you find it with DNS .. finding it in this message broker is the same process
[10:18:10] <very_sneaky> right, i guess i feel like consolidating that identifier resolution to the message broker simplifies the concerns of the publishers and subscribers
[10:18:26] <RandomReader> whereas with pub/sub, you're not finding any specific source, because 1 to any number of sources simply add to the data at will
[10:18:53] <RandomReader> simplifies how? the process is the same whether it occurs in the message broker or not
[10:19:23] <RandomReader> e.g. the client has to express "I want data from $DataSource" either way
[10:19:38] <RandomReader> well, no, that's not quite accurate
[10:19:40] <very_sneaky> not necessarily
[10:19:50] <RandomReader> it has to express "I want to make a request of $DataSource"
[10:19:58] <very_sneaky> it could express "I want this type of data", message broker does resolution for an appropriate data source
[10:20:13] <RandomReader> "I want this type of data" is just subscribing though, it's not a request
[10:20:31] <very_sneaky> except where the request is made independently of an event driven system
[10:20:35] <RandomReader> this isn't subscribing, it's explicitly communicating
[10:20:38] <very_sneaky> or, it's a subscriber triggered event
[10:21:21] <RandomReader> that's the same thing as request/response though, however it's expressed
[10:21:52] <RandomReader> so for this to have value, you need a use case where the message broker doing resolution is somehow better than alternatives
[10:22:12] <RandomReader> (which literally might just be "more convenient because this connection is open and I'm writing only one client library damnit", the point is just to articulate that)
[10:23:35] *** Quits: letto (~letto@86.120.85.133) (Remote host closed the connection)
[10:23:56] <RandomReader> but personally, I wouldn't start with that, I'd start with two discrete communication channels .. one being pub/sub, where the API is "-> [un]subscribe" and "<- published_data", and the other being request/response where the API is "-> request(foo) from $bar" and "<- response"
[10:24:23] *** Joins: letto (~letto@86.120.85.133)
[10:24:47] <RandomReader> and if the implementation of the server end of that just happens to let you share some code, cool, but I'd get there iteratively rather than trying to make the models match initially
[10:25:06] *** Quits: letto (~letto@86.120.85.133) (Client Quit)
[10:25:22] *** Quits: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net) (Remote host closed the connection)
[10:25:35] *** Joins: letto (~letto@86.120.85.133)
[10:25:45] <RandomReader> otherwise you'll have to start adding things like "-> one_time_subscription_because_this_is_really_a_request" and so on
[10:26:29] <very_sneaky> hmm
[10:26:43] <very_sneaky> yeah, at the moment i have each subscriber subscribing to a channel for it's own id
[10:27:11] <johnny> what designs did you look at for pub sub as examplse?
[10:27:28] <johnny> i remember having fun with a pubsub service built in ninx as a module once
[10:28:06] <johnny> i mostly relied on http post for pub, and server sent events for sub
[10:28:29] <johnny> server sent events are underated in http
[10:29:01] <very_sneaky> i actually don't remember - i wrote this a fair while ago now. I think I just found a number of examples from googling and used those as inspiration to write my own. One of my goals was to make this agnostic to whether the subscriber had access to shared memory or if it was across a socket connection
[10:31:18] <johnny> well how you do that isn't relevant to the model
[10:31:47] *** Joins: toverna (~uni@95-30-2-84.broadband.corbina.ru)
[10:37:30] <very_sneaky> RandomReader: to clarify, are you suggesting that I bypass the message broker for unicast messages, or just adding an additional request/response API that's a bit more semantically meaningful?
[10:38:33] <RandomReader> sort of both, depending on what that looks like .. the API side I think is more important, because that's what you'll be expressing everything in
[10:39:07] <RandomReader> but by "bypass the message broker" I mean it in the sense of not using the pub/sub implementation underneath (at least not until you actually run into reusable code)
[10:39:25] <RandomReader> not necessarily "separate connection / memory channel"
[10:39:51] *** Quits: toverna (~uni@95-30-2-84.broadband.corbina.ru) (Quit: Konversation terminated!)
[10:40:23] <very_sneaky> ah, i see. If i'm not using `publish()` and introduce another API mechanism, then I wouldn't be re-using the pub/sub message capabilities. The broker would still be proxying requests and forwarding responses though without a large re-architecting
[10:41:05] <very_sneaky> the challenge being that the requestor would somehow have to obtain a handle to the server they're making a request of for shared-memory messaging
[10:41:15] <RandomReader> ok, then yeah .. as for proxy or not, I think that's actually a separate decision from the model one, and I'd lean on practical reasons for it
[10:41:42] <RandomReader> so different shared-memory channels is probably irrelevant, but separate network connections implies the publishers all need to be servers and not just talk to the broker, etc
[10:41:57] <RandomReader> and that may be messy, too complex in a different way, etc
[10:42:17] <RandomReader> (I mean, it's all well known, but in terms of what you're trying to do here and how much code you're wanting to write)
[10:42:46] <RandomReader> oh I typed over your message, yeah, you get the idea
[10:43:06] <very_sneaky> yeah. I'm trying not to think too hard about the networking side of things right now because i'm still feeling my way through how each of these entities engage with each other
[10:43:44] *** Joins: andreasbuhr (~quassel@p548dd64d.dip0.t-ipconnect.de)
[10:43:47] *** Quits: andreasbuhr (~quassel@p548dd64d.dip0.t-ipconnect.de) (Client Quit)
[10:43:48] <RandomReader> since it sounds like the request/response stuff is sort of an add-on to the pub/sub stuff, like it's semi-related and clients make these requests based on what they see, and the requests aren't high-traffic or large objects .. then proxying makes more sense
[10:44:04] <very_sneaky> there will be other complexities associated with that. At the moment each publisher and subscriber just holds a pointer to the message broker, which isn't feasible when the message broker is moved to a different process
[10:44:38] <very_sneaky> well, it will need a client and server implementation of it's own i guess.
[10:46:22] <RandomReader> as long as you keep the API boundaries clean, you can generally split that fairly easily when it's time
[10:46:45] <RandomReader> the pointer becomes a unique ID you get during a connection "hello", etc
[10:47:00] <ville> are these buildtime or compile time-known things?
[10:47:43] <very_sneaky> no, this is forming the base of a simulation engine - the exact configuration of a simulation will be configured through data files most likely at run time
[10:48:16] <ville> ...and i managed to write the "same" thing twice. yeah build time or runtime
[10:49:02] <ville> how often do these relations change? are the relations established once at startup and then remain static?
[10:50:21] <very_sneaky> yeah I think so. at least initially. There might be cause to modify some relations during run time, but I haven't evaluated that seriously yet
[10:51:37] <ville> and last is the set of all known publishers buildtime or runtime?
[10:53:38] <very_sneaky> hmmm - whether an entity is capable of publishing will be known at build time (it has to inherit the publisher interface), but i guess the same answer as above - it's possible that publishers may join/leave during runtime at some point in the future
[10:54:10] <ville> at any rate it shouldn't matter really to a subscriber whether a publisher is remote or not. i'd put the "remote-ness" inside the publisher thing
[10:54:22] <very_sneaky> these are really only concerns when I get to actually implementing this in a distributed manner
[10:56:34] <ville> it could be acceptable that clients must be configured with all the remote publishers, and on startup the client creates an appropriate "publisher" instance. which just happens to be a rather dumb relay shuffling messages to the remote host and back.
[10:57:34] <very_sneaky> so, one of the challenges that I've identified here is that some entities will have logic that means it lends itself to parallelisation, and some that are basically restricted to serial operations. In thinking about whether I want to horizontally or vertically scale a simulation to do more at once, I've realised that the best way to utilise resources might be some combination of clusters of
[10:57:37] <very_sneaky> entities all running on the same machine within the same process, and others in their own process, so I'm trying to make the interface completely agnostic to whether the message is being sent through shared memory or if it's over a network, and there may be combinations of both within a sim
[10:59:15] <ville> also if you're serious about this, trying to get good performance out of highly heterogenous setups, then it could be reasonable to start looking at solutions that are out there already. presumably done that?
[10:59:17] <very_sneaky> i have a feeling if i want to do that, the remoteness would need to be handled by both the server and client interfaces of the message broker, no?
[11:00:07] *** Joins: DSpider (~DSpider@82.79.237.143)
[11:00:16] <ville> very_sneaky: quickly thinking nothing after the creation of a publisher should mater what type of publisher it is?
[11:00:23] <very_sneaky> yeah i've had a look at existing messaging libraries, and I may switch to one - this project is partly an educational exercise to learn more about modelling and simulation architectures though, so there's a lot of value in self implementation
[11:00:54] <very_sneaky> ville: i'm not sure what you mean
[11:02:04] <very_sneaky> can you elaborate?
[11:02:16] <ville> hpx comes to mind: https://en.wikipedia.org/wiki/HPX
[11:03:12] <ville> so anyways, the way i would imagine doing this, and all plans fall apart once they come in contact with reality, is that the client process on startup would read a configuration file
[11:04:14] <ville> in the file the details of a remote machine could be listed. so the client then creates an instance of a remote end point that connects to the remote host.
[11:04:16] <very_sneaky> yep cool, that looks like it could be useful
[11:04:37] *** Joins: meator (~meator@user/meator)
[11:05:12] <ville> to ask the end-point to do a computation afterwards shouldn't be any different from asking to do the computation locally?
[11:07:44] <very_sneaky> yeah correct. I think you could think of each node as either (a) A message broker (server) or (b) A message broker (client) + n * computational models, so the connections you're describing are both (1) The address of the message broker server and (2) Which computational models connect to which other computational models
[11:08:27] <very_sneaky> with some valid combinations of configurations and validity checks to go along with that
[11:08:37] <ville> the address thing should matter only when the object is being brought up
[11:09:05] <very_sneaky> yep
[11:09:13] <ville> after that you can stick them in a list of "things" that are capable of doing a computation
[11:09:29] <very_sneaky> yep
[11:10:22] *** Quits: letto (~letto@86.120.85.133) (Ping timeout: 260 seconds)
[11:11:24] <ville> are you asking computation to be done on specific thing, or just a computation be done and whomever is free can do it?
[11:13:34] <very_sneaky> specific things
[11:15:19] <very_sneaky> some of those specific things are computationally intensive and parallelisable, others are not and need to be done before or after another node has completed it's task, and all of them need to be synchronised across time steps
[11:16:08] <ville> ok that doesn't necessarily mean it has to be asking a specific thing
[11:17:14] <very_sneaky> do you mean asking a specific thing from a publisher?
[11:17:39] <ville> yeah. just stick them in a "queue" and let whomever is free do it?
[11:18:16] <ville> each timestep you build a list of computations that need to be done. you can make the computations have a way to express a dependency. computation A requires computation B.
[11:18:32] <ville> so that then forms a dag
[11:18:45] <very_sneaky> yep, that's basically what I've got
[11:19:21] <very_sneaky> currently relying on order of operations to enforce dependencies - messages aren't emitted until the requisite computation has been completed
[11:19:27] <ville> you build that. stick it in a "queue" and call run().
[11:19:44] <very_sneaky> but yeah the dag might be a good idea if it gets more complicated
[11:19:48] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[11:21:20] <ville> now sticking the dag into a "queue" does not yet really put anything anywhere directly. you go through the dag and see which ones have 0 requires dependencies and then you've internally queues for each service providing computation
[11:22:50] <ville> once a service completes a computation, sends back a message indicating as such, you go through the dag once more and decrease the requires/dependency count on things that required the this computation. any such computation that reaches 0 count gets added to one of the internal work queues
[11:24:21] <ville> and now you've made your self a "thread pool", except sometimes a job may be sent to a remote machine for computation
[11:24:51] <ville> and then you can add work stealing so computing resources which are faster don't get starved
[11:26:12] <ville> this is a rather simplistic model and i guess is limited to a model where you've one "master" which does the composing of the dag for each timestep
[11:26:31] <very_sneaky> yep, i like it. It's not clear to me how many things will require more than one piece of computation to be completed before it can be initialised though, so I'm not sure it's necessary to do that right away
[11:27:45] <very_sneaky> the biggest challenge that I'm having is determining whether the time step has concluded and it's safe to tick the clock forward to the next event
[11:28:26] <ville> you can make your run() just not return before, or it does and you "poll" on a result
[11:28:32] <very_sneaky> currently I'm just querying each unit of computation to see if it's still running and when all of them have stopped i assume it's safe to go
[11:29:08] <very_sneaky> but i have a feeling that could get expensive when moving to network ops
[11:29:18] <very_sneaky> or a decentralised model
[11:29:29] <very_sneaky> distributed model* not decentralised
[11:30:13] <very_sneaky> waiting for `run()` to return would break down when I introduce multiple threads/processes wouldn't it?
[11:30:29] <ville> well you know how big your dag was, so once all of the computations in it have received a "done" message it's done
[11:31:13] <ville> umm no. the threads, processes, remote machines are all hidden behind this "sheduler"/"executor" if you want to call it that
[11:32:06] <very_sneaky> hmmm - at the moment i don't have a dag, and units of computation are created when their dependencies finish. It might be that i do know everything that needs to be done for a given timestep at the beginning though .. i'll need to think about that
[11:32:52] <very_sneaky> yeah, sure. so the checking for whether things are done would still have to happen within the `run` method
[11:33:08] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[11:33:08] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[11:33:12] <ville> yes if you go with the model where the run() blocks
[11:33:14] <very_sneaky> as in, it returns when the dag is size 0
[11:33:20] <ville> right
[11:34:02] <very_sneaky> thanks for the discussion, that's given me some stuff to think about
[11:34:14] <ville> the above really is just a thread pool
[11:34:53] <ville> a thread represents a resource that can do computation, but so does a lot of other things. local processes, remote processes, gpu...
[11:35:46] <ville> you can generate more work items as you receive results for previous computations and add them into the system
[11:37:41] <ville> but your dag processing could also be set up in a way that if A required B to finish, then A will get B's result
[11:44:22] <ville> anyways if you're doing this for profit, then i'd give something like hpx a go, and hope they've solved lot of the details and give you the nice interface to distribute the computing
[11:46:45] <ville> also forgot to say that the nodes of the dag you compose can be decomposed to several internal work items internally to distribute the work better
[11:48:26] <ville> so if a dag mode suggests "integrate 10000 objects" the scheduler could internally look at this and decide to synthesize batches of 100 and stick those in the work queues
[12:02:29] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[12:06:22] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 260 seconds)
[12:08:17] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[12:08:17] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[12:14:21] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[12:16:07] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.3)
[12:16:37] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[12:18:48] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[12:19:32] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[12:23:44] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:f56e:630b:ae2e:6e55)
[12:28:24] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[12:30:12] *** Joins: bobb_ (~bobb_@dslb-092-074-226-150.092.074.pools.vodafone-ip.de)
[12:31:27] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[12:33:00] *** Joins: eka (~eka@user/eka)
[12:39:05] *** Quits: nips (~nips@abv84.internetdsl.tpnet.pl) (Remote host closed the connection)
[12:39:22] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[12:44:52] *** Quits: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi) (Ping timeout: 252 seconds)
[12:46:45] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[13:15:56] *** Joins: letto (~letto@86.120.85.133)
[13:18:59] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[13:26:00] *** Joins: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi)
[13:27:44] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Quit: ZNC - https://znc.in)
[13:29:57] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[13:31:14] *** Joins: ShiftyLo_ (~shiftylog@104.200.132.217)
[13:31:18] *** Quits: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi) (Ping timeout: 260 seconds)
[13:32:44] *** Joins: chris64 (~chris@user/chris64)
[13:35:16] *** Quits: ShiftyLo_ (~shiftylog@104.200.132.217) (Ping timeout: 244 seconds)
[13:35:37] *** Quits: thad_the_man_2 (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4) (Remote host closed the connection)
[13:35:37] *** Quits: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4) (Remote host closed the connection)
[13:36:58] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[13:36:58] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:37:05] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:37:05] *** ChanServ sets mode: +v npaperbot
[13:41:14] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[13:46:19] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[13:51:50] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:f413:894:cbd8:9458)
[13:54:47] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[13:58:18] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:59:45] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:59:46] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[13:59:47] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5d6e:87c6:1a95:cc2d) (Ping timeout: 264 seconds)
[14:03:49] *** Joins: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4)
[14:06:49] *** Quits: ac_slater (~ac_slater@c-73-221-75-91.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[14:07:32] *** Joins: markong (~kvirc@213.146.188.203)
[14:08:08] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5d6e:87c6:1a95:cc2d)
[14:08:40] *** Joins: ac_slater (~ac_slater@c-73-221-75-91.hsd1.wa.comcast.net)
[14:08:56] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[14:15:06] *** Joins: ambasta (~ambasta@89.46.62.147)
[14:15:20] <ambasta> Why is the concept not satisfied here? https://wandbox.org/permlink/2BmkFTskHEvQceWI
[14:15:28] *** Quits: reumeth (~reumeth@user/reumeth) (Quit: reumeth)
[14:17:00] <PJBoy> you noted the note about same_as, right?
[14:18:12] <ambasta> Yes, it seems to think that Base16Encoder is incomplete
[14:18:34] <PJBoy> it is
[14:18:42] <PJBoy> at the point that you invoke the concept constraint
[14:18:43] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[14:19:13] <ambasta> RIght, but the same would work if I use typename T in BaseEncoder (instead of EncoderConcept)
[14:19:53] <PJBoy> yeah if you don't invoke the concept, then nothing goes wrong
[14:20:12] <ville> there are various places/reasons in templates whre you have to make things "depend" on something to delay the evaluation
[14:20:22] <PJBoy> you can static_assert the concept to be true later
[14:20:38] <PJBoy> like in the body of the ctor for example
[14:22:07] <PJBoy> ah, well
[14:22:11] <PJBoy> it's not being used as an object
[14:22:21] <PJBoy> but you can put it in any used member functions
[14:22:55] *** Quits: ville (~ville@178-75-128-81.bb.dnainternet.fi) (Quit: kernel)
[14:23:48] *** Joins: pulse (~pulse@user/pulse)
[14:24:08] <ambasta> What are the possible ways (outside of static_assert) to delay concept evaluation?
[14:24:28] <PJBoy> (static_assert approach https://wandbox.org/permlink/rqi71v8UkaDpvGUd )
[14:24:29] *** Joins: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz)
[14:24:37] <ambasta> Yes, did that already :) https://wandbox.org/permlink/hILcj678U2tedY3l
[14:24:46] <PJBoy> haha damn, took way too long
[14:25:11] <PJBoy> how come it worked for you with the const
[14:25:25] <PJBoy> oh it doesn't work
[14:25:55] <ambasta> wdym, I see the output 10
[14:25:56] *** Joins: ville (~ville@178-75-128-81.bb.dnainternet.fi)
[14:26:13] <PJBoy> your concept doesn't get checked
[14:26:21] <ambasta> Ah!
[14:26:23] <PJBoy> or maybe it does, but it doesn't reject anything
[14:27:00] <PJBoy> your concept uses a requires expression, mine doesn't
[14:27:29] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[14:27:37] <PJBoy> yeah requires statements don't require all the conditions listed in it to be true
[14:27:42] <PJBoy> they have to be valid
[14:27:57] <PJBoy> that same_as expression being false is still valid
[14:28:22] <PJBoy> if you want to demand it to be true, it should be how I wrote it
[14:28:23] <ambasta> It *is* checking for the concept :)
[14:28:29] <PJBoy> yeah
[14:28:44] <ambasta> https://wandbox.org/permlink/AdLUB3wqL8dYgawz
[14:29:22] <PJBoy> but you'll notice here that it doesn't reject things it should https://wandbox.org/permlink/tdlNpsMm5jjeAtpc
[14:29:44] <PJBoy> that T::alphabet is a const char* const, not a std::string_view
[14:30:06] <ambasta> But it is convertible to string_view?
[14:30:16] <PJBoy> it is
[14:30:19] <PJBoy> same_as doesn't check that
[14:30:19] <ambasta> Maybe I should have used std::convertible_to
[14:30:23] <PJBoy> yeah
[14:30:26] <ambasta> Yeah, I see what you mean
[14:30:38] *** Joins: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi)
[14:30:40] <PJBoy> I didn't realise you would find a conversion acceptible
[14:31:14] <PJBoy> especially as that .find method is required to exist
[14:31:24] *** Joins: plastico (~plastico@neomutt/plastico)
[14:31:40] <PJBoy> anyways the moral of the story is that the same_as expression belongs outside the requires statement
[14:31:54] <ambasta> Noted
[14:32:03] <PJBoy> (or convertible_to)
[14:32:26] <ambasta> Additionally, alternate ways to delay concept evaluation outside of static_assert in ctor/method?
[14:32:39] <PJBoy> not that I know of
[14:32:45] <PJBoy> and I'm quite sure there isn't
[14:33:06] <ambasta> Aight, thank you PJBoy, ville
[14:33:14] <cbreak> enable_if ftw
[14:33:25] <cbreak> it'll be invalid when given false
[14:34:02] <PJBoy> no one likes an enable_if sympathiser
[14:37:56] <johnny> harsh
[14:40:22] *** Quits: X-Scale (~ARM@83.223.233.104) (Ping timeout: 260 seconds)
[14:41:28] <johnny> so i've done a proper factory setup for my importers and exporters, and i'm happy with that
[14:43:10] <johnny> but now... i'm trying to work on the charset encoding and decoding.  this api takes the encoders like transcode("string", zstd::text::utf8_compat, ztd::text::shift_jis, ...)
[14:43:32] <johnny> so source and target encoding
[14:44:06] *** Joins: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438)
[14:44:08] *** Quits: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi) (Quit: leaving)
[14:44:18] *** Joins: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi)
[14:45:08] <johnny> the codebase is currently using TextCodec* codec = QTextCodec::codecForName(someStringVar); like that
[14:46:25] <johnny> i wonder how i can more easily go from a string to these codec objects and achieve the same thing
[14:46:25] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[14:48:57] <johnny> people be having fun in this C++ discord talking about how cmake minimum version is a lie
[14:51:54] <PJBoy> I've been unable to build cmake projects because I haven't met the minimum version
[14:52:08] <PJBoy> so there's an element of truth in there
[14:55:02] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[14:56:48] <johnny> well they were mostly talking about the opposite in that it won't stop you from using stuff from newer versions
[14:57:08] <PJBoy> yeah it's a minimum requirement, not a maximum
[14:57:34] *** Joins: proller (~p@80.240.216.69)
[14:58:11] <johnny> hmm.. the way i'd parse that is if you use functions above the minimum version then it should warn you
[14:58:28] <johnny> but i guess i avoid cmake so i dun have to think about it :)
[15:00:24] <PJBoy> a warning would be nice, yeah
[15:00:27] <ambasta> Btw, why does C++ have such long cycles for feature additions?
[15:00:36] <cbreak> it's a standard
[15:00:48] <cbreak> releasing new versions of the standard takes time
[15:01:00] <cbreak> compilers / stdlibs implementing the new standard takes even more time
[15:01:07] <cbreak> and some parts might never be implemented
[15:01:18] <ambasta> The last bit I get, but why wait every 3 years to freeze a large set of features
[15:01:30] <johnny> ambasta, what that means is that a bunch of folks from individual contributors to stakeholders at large companies all have to decide what accept
[15:01:31] <ambasta> Instead of freezing a smaller set on a shorter cycle?
[15:01:34] <johnny> it's worldwide
[15:01:53] <PJBoy> we already have to ask people if they use C++11/14/17/20
[15:01:53] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[15:01:55] <johnny> i don't think it'd help too much in the case of C+ ambasta
[15:02:00] <johnny> C++*
[15:02:03] <PJBoy> do you really want to granularise that? :D
[15:02:17] <johnny> PJBoy, well i would.. i just don't think it's socially feasible
[15:02:18] <ambasta> Heh, fair enough
[15:02:38] <ambasta> Its just annoying to have a lot of features you'd want to show up in the spec
[15:02:39] <PJBoy> there's a paper that justifies the 3 year release cycle IIRC
[15:02:44] <ambasta> views::enumerate for example
[15:02:57] <johnny> i don't evne need to read the paper to think of reasons
[15:02:58] <PJBoy> library stuff isn't so important to get soon
[15:03:12] <johnny> well that'd be easier to say if C++ had a package managre
[15:03:19] <PJBoy> it has conan and vcpkg
[15:03:19] <johnny> a standardish one
[15:03:36] <ambasta> Isn't the tooling group trying to decide for a package manager?
[15:03:46] <PJBoy> I don't think there's a tooling group
[15:03:48] <johnny> how do they both handle multiple versions of the lib available at the same time anyways?
[15:03:53] <johnny> isn't there?
[15:03:53] <cbreak> you can always use boost, which might have an alternative to the stdlib additions
[15:04:05] <johnny> i coulda swore i read that there was a tooling group
[15:04:19] <PJBoy> I could be wrong, but I've never seen anything like that
[15:04:23] <cbreak> or you can use some pre-release stdlib version, if your toolchain offers it
[15:04:58] <johnny> ambasta, what cbreak said is indeed a solution, but gcc/clang offer it a bit more granularly than what you get from msvc
[15:05:23] <PJBoy> yeah msvc is kinda struggling to handle its C++ revisions properly
[15:05:34] <johnny> ambasta, i've seen a rangesnext repo that includes stuff that's supposed to be in C++23
[15:05:41] <cbreak> ambasta: c++ doesn't really need a package manager
[15:05:52] <johnny> hard hard disagree
[15:05:53] <ambasta> johnny I am using ranges-v3 among other things
[15:05:56] <cbreak> it's a language, not a programming environment
[15:06:04] <johnny> uhmm
[15:06:04] <ambasta> But it basically means a ton of 3rd party deps
[15:06:18] <ambasta> there is format, howardhinnant dates etc etc
[15:06:20] <PJBoy> don't automatically assume anything in ranges v3 will get into C++23
[15:06:21] <cbreak> if you develop arduino programs, then your requirements are vastly different than writing c++ programs for android
[15:06:32] <PJBoy> enumerate's not even in yet
[15:06:40] <johnny> cbreak,so what? let the arduino folks have their own package manager if they need it
[15:06:45] <johnny> or just let em all in
[15:06:45] <ambasta> PJBoy, it was P1 in C++23 status report iirc
[15:06:51] <cbreak> and then, if you write Qt c++ programs for MacOS, your requirements are again different from developing c++ kernel extensions
[15:06:59] <cbreak> johnny: exactly what I said.
[15:07:03] <johnny> i don't see how any of that makes a difference cbreak
[15:07:10] <cbreak> package managers are not a property of c++ the language
[15:07:20] <cbreak> they are bound to an environment
[15:07:26] <cbreak> c++ already has package managers
[15:07:32] <cbreak> for example, on ubuntu, you have apt
[15:07:32] <johnny> i don't see the argugment considering rust
[15:07:41] <johnny> no freakin way.. i will never use distro packages
[15:07:55] <johnny> been there , done that
[15:07:56] <cbreak> it's reliable. it works.
[15:08:01] <PJBoy> ambasta, looks like it hasn't been touched since last revision https://github.com/cplusplus/papers/issues/875
[15:08:02] <johnny> but it doesn't have theversions you need
[15:08:08] <cbreak> on MacOS you can use homebrew
[15:08:12] <johnny> or rather, it never has what i need
[15:08:19] <johnny> and it shouldn't be OS specific
[15:08:21] <johnny> that's ridic
[15:08:27] <cbreak> of course it should be OS specific
[15:08:29] <PJBoy> I'm pretty sure enumerate will get into C++23, but yeah
[15:08:30] <johnny> no.. it shouldn't
[15:08:41] <johnny> rust doesn't need it
[15:08:43] <cbreak> because every OS has its own APIs for most things anyway
[15:08:44] <johnny> why should C++
[15:08:46] <ambasta> PJBoy was referring to this http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2214r0.html
[15:08:48] <johnny> so what?
[15:08:57] <PJBoy> oh that paper
[15:09:19] <johnny> if there is metadata for the package saying it's intended usage, you can like.. not use it
[15:09:29] <PJBoy> ambasta, ambitious :o
[15:09:31] <cbreak> rust probably leads to incredible bloat
[15:09:33] <johnny> if it says something like platform: 'windows32'
[15:09:37] <johnny> err 'win32'
[15:09:42] <cbreak> since you copy everything that's already on the OS again
[15:09:51] <cbreak> or reinvent every library all over
[15:09:55] <johnny> except the OS only has the versions for the OS
[15:10:01] <johnny> not the versions you want to compile for necessarily
[15:10:08] <johnny> so you're already going to be copying
[15:10:27] <cbreak> I want to compile for the version on the OS
[15:10:27] <johnny> i've used linux and package managers for 20 years and the whole thing is garbage for dev
[15:10:35] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[15:10:48] <very_sneaky> ville: cheers. I'll definitely look more closely at HPX once i've got a handle on the final form of this engine. One of the problems I'm discovering with efficiently simulating time-dependent phenomena is that the nature of computation is such that each unit of time is relatively easy to compute, but is sequential by nature and there is only limited opportunity for parallelisation/horizontal
[15:10:49] <johnny> that's why i won't use it
[15:10:51] <very_sneaky> scaling. Often higher fidelity comes from smaller granularity in time, which is what causes the compute burden, as more time steps are added for the same time frame - especially in discrete time simulations. Anyway, this is one of the things i'm trying to explore so I guess we'll see if this is actually a real problem
[15:11:16] <johnny> i almost always want to compile for systems i'm not on
[15:11:29] <PJBoy> conan
[15:11:43] <johnny> maybe it will become the accepted standard in the end
[15:11:53] <PJBoy> de facto maybe
[15:11:57] <cbreak> cross compiling is a pain in the ass
[15:12:06] <johnny> it doesn't have to be
[15:12:09] <cbreak> it works for toolchains that are set up that way, like android or arduinos
[15:12:25] <cbreak> but developing for windows on non-windows, or developing for macos on non-macos is annoying
[15:12:25] <johnny> i can cross compile for windows with mingw pretty easily
[15:12:35] <johnny> it's like 5 lines in my build
[15:12:35] <cbreak> especially if you want to have testing too
[15:12:45] <johnny> well we got CI for that
[15:13:04] <PJBoy> doesn't using mingw make your skin crawl though?
[15:13:08] <johnny> a bit
[15:13:17] <johnny> i did fine a docker with a etup for msvc and wine
[15:13:21] <johnny> i haven't tried it yet though
[15:13:33] <johnny> i am just relying on CI because i'm using stuff newer than what's in mingw atm
[15:13:35] <johnny> in this project
[15:13:38] <cbreak> I read mingw had broken random
[15:13:38] <very_sneaky> conan works for multiple operating systems - has a pretty trivial dependency on python which is on most platforms
[15:13:56] <johnny> yeah my build systme already requires python, so that's not a problem
[15:14:16] <johnny> i wasn't arguing against using conan specifically
[15:14:58] <johnny> PJBoy, defacto is fine.. i mean that's the case with PHP afterall and almost everybody adopted composer anyway
[15:15:10] <very_sneaky> i think you should try it johnny :P this conversation has come up enough in the past month to stop wondering lol
[15:15:11] <johnny> it would have happened faster if they shipped it with php though
[15:15:20] <PJBoy> I think conan can reach de facto status
[15:15:22] <johnny> very_sneaky, did i say i wasn't using it?
[15:15:47] <very_sneaky> last time we talked i think you mentioned that you hadn't given it a try yet because you didn't think you had enough deps to warrant it
[15:16:28] <johnny> yeah that's true on this particular project, because i'm trying not to mak ethings too complicated all at once for a native windows user, AND i already have a primite package system seutp already via my build system
[15:16:28] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[15:16:38] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[15:16:39] <johnny> i just got it working with git hashes
[15:16:43] <very_sneaky> yikes
[15:16:57] <johnny> why is that yikes?
[15:17:04] <johnny> you should have seen what it was before.. actually bundled sources
[15:17:17] <johnny> i split that out to use upstream
[15:17:27] <cbreak> johnny: so reinventing git submodules? :)
[15:17:32] <very_sneaky> we use git for dep management at work atm and it's painful
[15:17:44] <johnny> oh.. yeah i wouldnt use submodules because submodules are a pain
[15:17:52] <cbreak> they work very nicely
[15:17:58] <cbreak> IF you want very strong binding to other git repos
[15:18:03] <very_sneaky> not for dependency resolution they don't lol
[15:18:04] <cbreak> but that's the only thing they're good for
[15:18:07] *** Quits: ambasta (~ambasta@89.46.62.147) (Remote host closed the connection)
[15:18:15] <cbreak> there's no dependency resolution
[15:18:17] <cbreak> just hard-coding
[15:18:18] <johnny> the goal isn't to stay with hashes htough. 'll probalby move to tarballs
[15:18:25] <very_sneaky> yes, that's what i mean :P
[15:18:28] <johnny> i do have dependency resolution .. ubt not version resolution
[15:18:41] <johnny> the build system handles the dependency resolution fine
[15:18:59] <cbreak> I've used submodules with some success. They work fine for hard dependencies. But it really is glued together then
[15:19:51] <johnny> i can easily switch to the tarballs/zipballs if i want though. it's just temporarily more convenient this way
[15:20:05] <johnny> once my dude comes back and adjusts, maybe i'll get him on conan
[15:20:13] <very_sneaky> idk, using git to me feels a lot like duct taping the project together. it's a step above copy and pasting third party source in your repo
[15:20:30] <cbreak> very_sneaky: because that's what it is
[15:20:38] <johnny> very_sneaky, eh.. it's the same as if they were installed by the package manager into /usr/local/lib
[15:20:44] <johnny> i don't see it any differnt han that
[15:20:56] <johnny> because i manage them the exact same way in the build systme as if they weren't there
[15:20:58] <very_sneaky> it's substantially different to that
[15:21:03] <johnny> in what way?
[15:21:06] <johnny> heck
[15:21:09] <very_sneaky> at least the system package manager does dependency resolution
[15:21:17] <johnny> my build systme does that, i mentioned that
[15:21:18] <very_sneaky> i.e, libs a, b and c are all co-compatible
[15:21:35] <johnny> to me.. the real concern is being able to do something like
[15:21:41] <very_sneaky> i don't see how it possibly could if they have co-dependencies and you have no version resolution
[15:21:55] <very_sneaky> except to say "i have this dependency, now i can proceed with building"
[15:21:56] <johnny> my_sources = [..., 'bundledcode/stuff']
[15:22:11] <johnny> to me that's the real concern with this setup
[15:22:12] <cbreak> at work, we have to rely on existing dependencies for many libraries
[15:22:16] <johnny> BUT..
[15:22:21] <cbreak> it would simply not work to bundle our own
[15:22:23] <johnny> my build system says doing that is a sandbox violation
[15:22:30] <johnny> so i can't do that either
[15:22:34] <cbreak> so external package managers won't work at all
[15:22:50] <very_sneaky> cbreak: what do you mean?
[15:22:57] <cbreak> the way to get work done is to use cmake or similar to find those dependencies, and complain when they're not there
[15:23:14] <cbreak> very_sneaky: I can't just bundle my own version of library X, or use conan or similar to bundle library X
[15:23:24] <cbreak> I have to use which ever version of library X that is already there
[15:23:36] <cbreak> or my new library / plugin will not be compatible with the rest
[15:23:41] <very_sneaky> what introduces that requirement?
[15:23:45] <cbreak> which would obviously lead to crashes or worse
[15:23:51] <cbreak> the existing environment
[15:23:52] <johnny> very_sneaky, so.. taking spdlog for example.. i have spdlog_dep = dependency('spdlog', version: ">whatever")  and it'll use the version in the systme if it eists and is the appropraite version
[15:24:02] <johnny> if not, it'll use my version
[15:24:22] <cbreak> like, if my library is loaded into an application that has a different version of library X, then ... best case I just get bloat
[15:24:24] <johnny> same for format
[15:24:31] <cbreak> but more likely, I get weird crashes, or worse
[15:24:33] <johnny> but, the rest of the deps aren't in the package manager
[15:25:14] <johnny> spdlog i can use dynamic or static, others are static though
[15:26:33] <very_sneaky> i actually haven't done a deployment with conan before where the target is an application, so I'm not sure how that will work - something to test out. For libraries, you can ship it as a static lib with your dep tree compiled in, or as a shared lib with the same requirements as your target environment
[15:27:21] <very_sneaky> johnny: right, but in that aren't you offloading your dependency resolution to your system package manager?
[15:27:53] <very_sneaky> because you're relying on your system package manager to ensure you have the right co-compatible versions of everything
[15:28:20] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:9536:84ea:4440:882)
[15:28:20] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:9536:84ea:4440:882) (Changing host)
[15:28:20] *** Joins: skapata (~Skapata@user/skapata)
[15:28:35] <johnny> the other oens aren't in the sytem package manager
[15:28:41] *** Quits: eka (~eka@user/eka) (Quit: Leaving)
[15:28:53] <very_sneaky> did you write this yourself?
[15:28:58] <johnny> no
[15:29:18] <cbreak> what I normally do is to require dependencies to be installed (and find them via cmake). That way, my software can be built in which ever environment needed. For some dependencies I might bundle via submodules, but I don't hard-code a package manager
[15:29:31] <cbreak> since the users will have their own weirdo-environment that I have to deal with
[15:29:43] <cbreak> for testing, I try to rebuild said weirdo environment in docker.
[15:29:44] <johnny> very_sneaky, why did you think i wrote it msyelf?
[15:30:11] <very_sneaky> okay, i mean if it works for you, great - i've just noticed this conversation has come up a bunch of times. Giving it a go to see if it satisfies your needs beyond any immediate requirement could be worthwhile
[15:30:35] <johnny> very_sneaky, the argument is never from me about using apckage managers.. only that C++ should have one
[15:30:59] <johnny> and some people thinking C++ shouldn't have one
[15:31:04] <very_sneaky> johnny: i didn't have any assumptions, i just haven't heard of too many package managers doing dependency management, i haven't looked into it too far though
[15:31:42] <very_sneaky> yeah, we're on the same page there. i'm very much in favour of a package manager for c++
[15:31:44] <johnny> the build system only has very minimal package management.  wouldn' call it a real package manager, itjust does enough to be useful
[15:31:55] <very_sneaky> i'm interested to give vcpkg a go now that i've got some familiarity with conan
[15:32:17] <very_sneaky> and spack
[15:32:18] <johnny> very_sneaky, it really exists to ship build files for packages that don't use the build systme for the most part
[15:32:56] <johnny> particularly lots of code hat uses autools or plain makefiles
[15:33:14] <johnny> it can handle cmake build projects beause they provide enough useful metadata most of the time
[15:33:39] <johnny> autotools and plain make of course do not
[15:35:15] <very_sneaky> fair enough
[15:35:15] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[15:36:12] *** Joins: TheSchaf (~TheSchaf@p54833e1e.dip0.t-ipconnect.de)
[15:36:20] <johnny> like if i wanna use a cmake project i can just do cmake.project('name')  and have afile in subprojects called name.wrap which lets me set a tarball or git repo
[15:36:50] <johnny> and it'll go fetch it for me when i run the setup command
[15:37:42] <johnny> and i can use the result of cmake.project() directly as a dependency on my executable or library
[15:38:06] <rond_> I have a header file Globals.hpp that has a namespace `LibraryName` and a bunch of code (constants and a bunch of using type = some_tyme statements) in it. I'd like "include' this namespace from this particular file in my top_level. so in the end, I'd like to access Globals.hpp's LibraryName content without the need of "LibraryName::`. Is it
[15:38:07] <rond_> doable? (I don't want to discuss whether it's a good practice at the moment)
[15:38:39] <very_sneaky> `using LibraryName`
[15:39:01] <rond_> but LibraryName is huge. I'm only interested in what's defined in Globals.hpp
[15:39:20] <very_sneaky> only #include Globals.hpp?
[15:39:23] <rond_> i don't wan to include the whole namespace of the whole LibraryName, only from Globals.hp
[15:39:32] <rond_> ohh, right.
[15:39:34] <rond_> thanks!
[15:40:55] <rond_> #include <Globals.hpp>; using LibraryName; #include< SomeOtherLibraryHeaders.hpp>   [now I need LibraryName:: to access contents of SomeOtherLibraryHeaders.hpp]    is it correct?
[15:40:58] <johnny> guess i can't use this csv library easily
[15:41:13] <cbreak> no
[15:41:18] <very_sneaky> oh, no.
[15:41:38] <cbreak> rond_: the name of the file and the name of any namespaces defined inside it are independent
[15:41:39] <very_sneaky> it sounds like you might want a more granular namespace for Gloabls.hpp
[15:41:43] <johnny> it only works with the C++ streams, and it has no way to specifically choose which writes to write
[15:41:49] <johnny> which rows to write*
[15:41:54] <very_sneaky> LibraryName::Globals
[15:41:57] <rond_> very_sneaky it's a 3rd_party lib :(
[15:42:06] <rond_> I don't want to fork it and make my changes
[15:42:50] <rond_> I tried "using typee = LibraryName::typee" but it turned out that it resolved to "using typee = using typee = someType;" and that doesn't work either
[15:44:10] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[15:44:51] <rond_> so the solution is to always prepend with LibraryName:: and to live with it... hmm :(
[15:46:42] <very_sneaky> you should be able to use `using LibraryName::typee` shouldn't you? and then `typee(...);`
[15:47:25] <johnny> C++ streams are killin me again
[15:47:41] <very_sneaky> rond_: https://godbolt.org/z/4Wch5fzWc
[15:48:33] <very_sneaky> rond_: or this https://godbolt.org/z/b1P4G367j to show that not all of the std namespace is aliased
[15:51:14] <rond_> it turns out... that `index` is being declared in `strings.h` and hence I cannot declare it without a custom namespace :O
[15:51:14] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[15:52:31] <rond_> Okay, So I think I need to wrap my whole library in some kind of a namespace
[15:52:37] <rond_> it'll solve this last remaining issue
[15:52:45] <rond_> thank you very_sneaky for the hint with `using` :)
[15:53:48] <rond_> BTW, can a namespace and a class have the same name?  Wouldn't it end up with `NAME::` being ambiguous?
[15:54:00] <rond_> (if the class happened to be outside the namespace) ?
[15:54:44] <very_sneaky> i don't think i've actually tried it but yeah i'd imagine there would be a conflict
[15:55:53] <very_sneaky> yep: https://godbolt.org/z/j8eYbqc6v
[15:59:42] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[16:12:30] *** Joins: paul_ (~paul@2.24.23.175)
[16:12:30] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[16:15:56] *** paul_ is now known as lovelace
[16:16:01] <ville> rond_: a reasonable no-thinking approach is to stick everything you ever write in a namespace, possibly derived from the project name, and also any macros you ever write prefix with a similarly: namespace nn {} #define NN_MACRO
[16:17:47] <ville> rond_: a variation of that is a low-thinking approach where you have a namespace and then in that a "private" namespace. you stick everything by default into the "private" namespace and then only lift them to the "public" namespace if truly needed
[16:20:03] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[16:21:15] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[16:23:35] *** Joins: AmR (~AmREiSa@156.199.106.121)
[16:25:00] <AmR> Any one work with cmake and know ExternalProject_Add ?
[16:26:00] <AmR> I need CONFIGURE the project but I can't I try CONFIGURE_COMMAND but it's not working with me?
[16:28:02] *** Joins: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt)
[16:29:04] *** Quits: lovelace (~paul@2.24.23.175) (Quit: Konversation terminated!)
[16:32:19] <cbreak> AmR: it works in two ways: for projects that are cmake based, and others that aren't
[16:33:16] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Quit:  HydraIRC -> http://www.hydrairc.com <- Nine out of ten l33t h4x0rz prefer it)
[16:33:33] <cbreak> I haven't used it in a long time, but I think for the cmake based external projects it was quite simple
[16:34:48] <rond_> thanks ville
[16:35:48] <AmR> cbreak: It's CMake based project.
[16:37:37] <cbreak> then you shouldn't neccessarily need to change CONFIGURE_COMMAND I think
[16:38:12] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[16:39:43] <AmR> OK, But How I config the project ? my code https://pastebin.com/NRkjhT7S
[16:40:05] <AmR> cbreak: If you have some time to help me.
[16:40:25] <cbreak> it's automatic
[16:40:34] *** Joins: lovelace (~paul@2.24.23.175)
[16:41:13] <AmR> But I need to set some ON OFF :(.
[16:41:25] <AmR> sqlite3 example https://gist.github.com/redboltz/073d33f4de19c319352e
[16:41:39] <cbreak> you can do that via flags
[16:42:02] <AmR> I don't need for tests and mysql and some other lib's
[16:42:14] <cbreak> https://cmake.org/cmake/help/latest/module/ExternalProject.html, take a look at CMAKE_ARGS and CMAKE_CACHE_ARGS
[16:42:26] <ville> rond_: to emphasize these are just reasonable first choices. actual situation may require a different approach, but deal with that when it comes around
[16:43:52] <rond_> sure, understood
[16:45:22] <rond_> is `#pragma once`  safe to use
[16:45:23] <rond_> ?
[16:46:26] <cbreak> sometimes
[16:46:39] <cbreak> it shouldn't hurt, if you also use include guards
[16:47:02] <cbreak> but it might hide problems with the include guards
[16:47:42] <LiaoTao> Call me a stickler, but include guards should be used until modules can be used
[16:47:52] <PJBoy> stickler
[16:47:56] <LiaoTao> :(
[16:48:19] <PJBoy> include guards or pragma onces still have a place in a modules world
[16:48:32] <very_sneaky> there's only one or two very constrained cases where #pragma once isn't acceptable, right?
[16:48:36] <PJBoy> unless you've run out of macros
[16:50:13] *** Joins: Mooncairn (~mooncairn@user/mooncairn)
[16:50:17] <rond_> when compiling I have en error with " multiple definition of ..." and IDE points to exactly the same file. I use #pragma once in all my headers... hence the question
[16:50:26] <rond_> same file and line
[16:50:26] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[16:54:01] <cbreak> rond_: maybe it's not the same file from the compiler's point of view
[16:54:13] <cbreak> for example, it might find the file via different paths, relative to different include paths
[16:54:23] <cbreak> or it might find it via different symlinks, or even different hardlinks
[16:54:27] <rond_> I think it might be the case
[16:54:37] <rond_> how to investigate and potentially fix it? I'm a bit lost
[16:54:56] <cbreak> but any of these cases means someone fucked up the include paths
[16:55:04] <cbreak> so... it's not that normal
[16:55:48] <cbreak> you can try compiling the file with -E, to see exactly what's preprocessing. You'd have to find out the exact compile command line normally used though
[16:55:57] <rond_> hmm it happens when I try to build tests. one path points to the desired location in my project, the second one points to "CMakeFiles/test_...." hmmm
[16:56:00] <cbreak> if you have access to that, you might also want to just read with include paths are set
[16:56:05] <AmR> cbreak: I try "  " list( APPEND CMAKE_ARGS "-DSOCI_CXX11=ON -DSOCI_TESTS=OFF" ) message( STATUS "CMAKE_ARGS : ${CMAKE_ARGS}." ) add_definitions( -DSOCI_CXX11=ON -DSOCI_TESTS=OFF )
[16:56:14] <AmR> But not working
[16:56:26] <cbreak> AmR: yeah, of course not
[16:56:38] <cbreak> CMAKE_ARGS is not a list
[16:57:31] <cbreak> it works like ExternalProject_Add(... CMAKE_ARGS blah blah blah CMAKE_CACHE_ARGS blah=blub ... )
[16:59:20] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[16:59:41] <rond_> Okay, I need a brake and to investigate it thoroughly
[17:02:01] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 258 seconds)
[17:19:57] *** Quits: bobb_ (~bobb_@dslb-092-074-226-150.092.074.pools.vodafone-ip.de) (Quit: Client closed)
[17:19:58] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[17:23:43] <AmR> cbreak: Sory for all of that but CMAKE_ARGS -DSOCI_CXX11=ON -DSOCI_TESTS=OFF -DSOCI_SHARED=OFF I think was right but not work as will
[17:24:34] *** Joins: lumbermb (~lumbermb@191.114.121.99)
[17:27:50] <AmR> CMAKE_ARGS -DSOCI_CXX11=ON -DSOCI_TESTS=OFF -DSOCI_SHARED=OFF     CMAKE_CACHE_ARGS -DSOCI_CXX11=ON -DSOCI_TESTS=OFF -DSOCI_SHARED=OFF
[17:27:55] <AmR> The same
[17:28:23] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[17:29:33] *** Joins: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de)
[17:34:27] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:205d:b36:d1bc:fd5e) (Quit: Quit)
[17:35:46] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[17:36:58] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:37:09] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:37:09] *** ChanServ sets mode: +v npaperbot
[17:39:33] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[17:39:33] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[17:48:27] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[17:48:29] <cbreak> AmR: show code
[17:53:19] <AmR> https://pastebin.com/1sRst88U
[17:53:20] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[17:53:33] <AmR> sqlite3 example https://gist.github.com/redboltz/073d33f4de19c319352e
[17:54:52] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[17:56:01] <cbreak> AmR: you're still messing around
[17:56:17] <cbreak> as I said some time ago, you don't need to overwrite CONFIGURE_COMMAND
[17:56:26] <cbreak> currently you overwrite it with "do nothing at all"
[17:56:46] <cbreak> I'm not surprised at all that as a consequence of that it will not do anything at all
[18:00:27] *** Joins: chozorho (~chozorho@2601:146:300:c30::778)
[18:02:31] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[18:13:50] *** Quits: mtt (~mtt@3e6bd1ca.rev.stofanet.dk) (Read error: Connection reset by peer)
[18:14:50] *** Joins: Xe4roX (~Xe4roX@31-10-144-26.cgn.dynamic.upc.ch)
[18:14:51] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[18:15:45] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[18:16:02] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[18:18:28] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[18:19:40] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[18:23:03] <AmR> cbreak: I remove lines 79 80 84 85, And sell the same config no changes.
[18:33:41] *** Joins: Leone (~Leo@216.154.21.17)
[18:36:46] <rond_> for an in-library includes, should I prefer <> or ""?
[18:36:46] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[18:38:52] <urdh> rond_: I tend to prefer "" for 'same module' headers, <> for other headers
[18:39:11] <urdh> where I use 'module' in the generic sense, not in the C++20 module sense
[18:39:15] *** Joins: great_taste (~great_tas@190.32.235.20)
[18:39:25] <urdh> (and module ~= CMake target)
[18:40:03] <urdh> other people use "" for all headers they write and <> for everything that is third-party
[18:40:23] <rond_> also; let's say I have A.hpp B.hpp, C.hpp;   inside B.hpp I've got #include <A.hpp>         should I include both A.hpp and B.hpp inside C.hpp  even if it's obvious that B.cpp MUST include A.cpp (because it doesn't make sense without A.hpp)?
[18:40:34] <urdh> and some use "" only if the path really is a relative path, never for things found with an -I flag
[18:40:44] <urdh> just pick one of these and stick with it tbh
[18:42:08] <rond_> urdh i'd be fine with using <> everywhere though, right?
[18:42:37] <urdh> sure, if you have -I flags set up so everything gets found correctly
[18:43:57] <urdh> for your other question, include what you use and don't include what you don't use
[18:44:44] <rond_> urdh okay, so it means "you should include both in this case"
[18:45:07] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[18:45:12] <urdh> sort of, I guess
[18:46:09] *** Quits: chris64 (~chris@user/chris64) (Quit: leaving)
[18:47:31] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:47:57] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[18:49:01] *** Quits: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de) (Read error: Connection reset by peer)
[18:52:02] *** Joins: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de)
[18:58:39] <cbreak> AmR: did you also delete the directory?
[18:58:53] <cbreak> I'm not sure how much cmake caches
[19:00:59] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:02:13] *** Quits: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de) (Quit: Leaving)
[19:02:18] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[19:06:34] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 252 seconds)
[19:08:31] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 244 seconds)
[19:11:32] *** Joins: ferdna (~ferdna@user/ferdna)
[19:11:32] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[19:15:24] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[19:16:00] *** Joins: jkaye (~jkaye@2601:281:8300:7530:30bc:26a4:e2b8:8034)
[19:16:12] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[19:20:10] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[19:26:16] <AmR> yes, many times
[19:27:17] <AmR> cbreak: I trying set new project to test that, Can I upload it for take look ?
[19:28:01] *** Joins: manjaro-user (~manjaro-u@208.98.223.114)
[19:28:45] <cbreak> sure
[19:29:50] <cbreak> AmR: I recommend you leave the whole macro nonsense away
[19:30:30] <cbreak> all you need is the external project add thing
[19:30:30] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[19:30:42] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[19:30:57] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[19:35:08] <AmR> yes But I don't need soci_mysql and son on
[19:35:55] <AmR> And I need it in static build too
[19:37:17] <AmR> cbreak: https://files.fm/u/2g2dfxp8c
[19:37:54] <cbreak> AmR: doesn't matter
[19:38:00] <cbreak> the whole macro doesn't seem useful
[19:38:11] <cbreak> you can do everything you should need in a single ExternalProject_Add
[19:38:36] <cbreak> can't you upload that to a pastebin or something?
[19:39:30] *** Quits: manjaro-user (~manjaro-u@208.98.223.114) (Ping timeout: 260 seconds)
[19:39:30] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[19:39:43] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[19:40:18] <AmR> I do,  https://pastebin.com/edSybVPN
[19:40:42] <AmR> I add soci git to file and main.cpp that's all
[19:40:50] <AmR> @ 7z file
[19:40:54] <cbreak> you should really read what I try to tell you
[19:40:58] <cbreak> remove the CONFIGURE_COMMAND
[19:41:04] <AmR> I do
[19:41:06] <cbreak> and the BUILD_COMMAND
[19:41:10] <cbreak> they're all still in your code
[19:41:11] <AmR> and it's the same
[19:41:41] <AmR> I copy it from old template code I made for save copy that's all
[19:42:24] <AmR> And paseebin is old cmake I post it to You
[19:44:17] *** Joins: bobb_ (~bobb_@dslb-092-074-226-150.092.074.pools.vodafone-ip.de)
[19:45:24] <cbreak> AmR: works for me
[19:45:24] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[19:45:28] <cbreak> more or less
[19:45:35] <cbreak> what you have to do:
[19:45:44] <cbreak> rename the soci download cmake to CMakeLists.txt
[19:45:58] <cbreak> delete the soci.cmake
[19:46:04] <cbreak> delete the main.cpp
[19:46:19] <cbreak> then, fix all the bugs in the new CMakeLists.txt
[19:46:24] <cbreak> then configuring works just fine
[19:46:28] <cbreak> and building also works
[19:46:39] <cbreak> installing obviously fails since you can't write to /usr/local
[19:46:47] <cbreak> but you can easily fix that by customizing install location
[19:49:01] <cbreak> AmR: see https://cmake.org/cmake/help/latest/module/ExternalProject.html for details on how to do that
[19:51:16] *** Joins: pulse (~pulse@user/pulse)
[19:52:54] <artok> ...or do build with user and install target with sudo
[19:53:19] <rond_> If I have a .hpp file with definitions, not only declarations, should I build/compile/do other things differently?
[19:53:47] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[19:54:50] <computerquip> No, not if your header was made well.
[19:54:52] <cbreak> rond_: you should fix your .hpp file
[19:55:12] <rond_> should I specify such functions as "inline" or something?
[19:55:16] <cbreak> depending on what you define in headers, it's no longer a usable header
[19:55:40] <cbreak> if you define functions in headers, mark them inline, yse
[19:55:46] <lumbermb> yeah
[19:56:16] <lumbermb> enums or classes is no problem, templates neither, functions is inline, and for variables you use the reference to singleton pattern
[19:56:25] <AmR> cbreak: https://pastebin.com/LwuCLa2h
[19:56:49] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:f56e:630b:ae2e:6e55) (Ping timeout: 258 seconds)
[19:56:50] <computerquip> No, singletons don't have much to do with headers.
[19:56:58] <computerquip> They're a separate pattern.
[19:57:28] <lumbermb> no, I mean the specific pattern, ie : Foo& function () { static Foo foo; return foo; }
[19:57:55] <lumbermb> I don't know if that has any other name tbh. "Reference to static" sounds too plain?
[19:58:26] <rond_> basically I have "utils.hpp" which has a few very simple functions and a few very basic variables. I thought that I would skip .cpp file because these functions/variables are basically oneliners and code is better than any comment in this case
[19:58:27] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[19:58:35] <lumbermb> oh and starting with C++17 variables can *also* be inline in headers!
[19:58:37] <rond_> is this a good approach?
[19:58:46] <cbreak> AmR: https://pastebin.com/LcSixpK5
[19:58:52] <rond_> should I inline both the functions and the variables?
[19:58:57] <cbreak> AmR: as I said a few times: the whole macro isn't needed
[19:59:12] <AmR> OK
[19:59:14] <computerquip> rond_, I'd usually avoid random variables being in a header if you can help it.
[19:59:26] <rond_> OMG inlininig helped me to compile
[19:59:30] <computerquip> Sometimes it just makes sense. It often does.
[19:59:37] <computerquip> er, it often doesn't*
[19:59:38] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Quit: RabidToaster)
[19:59:46] <rond_> and I thought that i Include things badly or have wrong build scripts or....
[19:59:47] <lumbermb> And if you can't help it (like, it *has* to be in a header), set up a separate cpp for them as well just in case
[19:59:57] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[20:00:01] <rond_> I understand the compiler message NOW but it was SOO confusing :(  !
[20:00:21] <lumbermb> I write header-only libraries and so far I haven't had issues with variables in headers, but I'm being very specific about what I do and I count myself lucky
[20:00:32] <lumbermb> rond_, lemme see, GCC? :p
[20:01:02] *** Quits: UmarJ (~username@user/umarj) (Quit: UmarJ)
[20:01:11] <rond_> lumbermb I *think* clang but I'm not sure - I'm using CLion and I'm not sure whether I defined a compiler here
[20:01:23] <rond_> specified*
[20:03:10] <rond_> lumbermb My usecase:   "utils.hpp" containing simple, one-two liner functions and a few convenient variables (such as "maximum element of a given type")   (I cannot provide this element in a better place because I define it for a 3rd party library's type
[20:03:42] <rond_> (and I don't want to maintain a fork...)
[20:04:40] <rond_> in such a case, is inlining both function definitions AND variables a good solution?
[20:04:54] <lumbermb> ...how is the 3rd party lib knowing your variables?
[20:04:56] *** Joins: UmarJ (~username@user/umarj)
[20:05:03] <rond_> it's not
[20:05:21] <lumbermb> rond_, for that use case, inlining functions is good; inlining variables is as well but that's limited to C++17 onward, just so you know
[20:06:41] <rond_> I'm defining `inline Third_Party::T maximum{nullptr, nullptr, std::numeric_limits<SomeThirdPartyAliasForDouble>::max()}`
[20:07:24] <rond_> lumbermb cool, I'd aim at C++20 if it had appropriate support for modules
[20:07:31] <lumbermb> (personally I just define the variables that need to in headers in headers and just let the linker do its work after, they have dead code removal / deduplication options or can even do it full auto these days)
[20:07:51] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[20:08:16] <rond_> lumbermb so my solution is valid, with inlining this `ThirdParty::T maximum` variable?
[20:08:47] <lumbermb> ouch re: modules. I usually always wait one major Standard before approaching new shiny things, so the issues are ironed out
[20:09:11] *** Quits: bobb_ (~bobb_@dslb-092-074-226-150.092.074.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[20:09:30] <lumbermb> rond_, yes, inline those variables and your users will be happy
[20:09:38] <rond_> one question:  `ThirdParty::T maximum` is put in "utils.hpp". Would each #include "utils.hpp" generate a new instance of ``ThirdParty::T maximum` ?
[20:10:37] <rond_> I guess so...?
[20:12:01] <lumbermb> Don't quote me but I think the tl;dr is to the code they look like they are different variables but after compiling / linking they shall refer to the same entity
[20:12:26] <lumbermb> so long as you don't eg.: take the address of one such inline variable (ie.: so long as you only use them as values) you should be fine?
[20:13:05] *** Joins: damiano (~cesello@host-188-13-240-8.business.telecomitalia.it)
[20:13:06] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[20:13:08] *** Quits: damicesello (~cesello@host-188-13-240-8.business.telecomitalia.it) (Read error: Connection reset by peer)
[20:13:45] <rond_> ... I DO take its address
[20:14:06] <lumbermb> why would you even do that ;_;
[20:16:17] *** Joins: RoKenn (~RoKenn@2001:a61:3505:d101:cc73:2f58:dd83:ab96)
[20:16:17] *** Quits: RoKenn (~RoKenn@2001:a61:3505:d101:cc73:2f58:dd83:ab96) (Changing host)
[20:16:17] *** Joins: RoKenn (~RoKenn@user/rokenn)
[20:16:49] <rond_> :D
[20:17:28] <jkaye> Are you trying to make a global or not?
[20:18:18] <rond_> well I need to rethink the approach altogether
[20:18:35] <rond_> the good thing is that it finally compiles
[20:18:35] <rond_> :)
[20:21:53] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[20:25:49] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[20:29:01] *** Quits: emerent (~quassel@p200300cd574855daba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[20:29:40] *** Joins: emerent (~quassel@p200300cd5748559eba27ebfffed28a59.dip0.t-ipconnect.de)
[20:30:31] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[20:30:50] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[20:32:45] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 244 seconds)
[20:40:00] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[20:45:43] <rond_> any idea how to specify paths from repo in a GTest?
[20:45:53] <rond_> path from project?
[20:46:15] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[20:46:40] *** Quits: plastico (~plastico@neomutt/plastico) (Ping timeout: 260 seconds)
[20:46:45] *** Joins: RoKenn (~RoKenn@2001:a61:3505:d101:cc73:2f58:dd83:ab96)
[20:46:45] *** Quits: RoKenn (~RoKenn@2001:a61:3505:d101:cc73:2f58:dd83:ab96) (Changing host)
[20:46:45] *** Joins: RoKenn (~RoKenn@user/rokenn)
[21:04:20] *** Joins: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104)
[21:04:40] *** Quits: Mooncairn (~mooncairn@user/mooncairn) (Ping timeout: 258 seconds)
[21:04:40] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[21:04:51] *** Joins: plastico (~plastico@neomutt/plastico)
[21:06:20] *** Quits: AmR (~AmREiSa@156.199.106.121) (Read error: Connection reset by peer)
[21:08:37] *** Joins: AmR (~AmREiSa@156.199.106.121)
[21:11:56] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[21:13:30] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[21:19:45] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 244 seconds)
[21:25:58] *** Joins: manjaro-user (~manjaro-u@208.98.223.114)
[21:30:19] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[21:30:27] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:31:14] *** Quits: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438) (Quit: Client closed)
[21:31:14] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[21:31:55] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:34:09] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[21:34:09] *** Quits: ville (~ville@178-75-128-81.bb.dnainternet.fi) (Read error: Connection reset by peer)
[21:35:33] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:36:59] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:37:08] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:37:08] *** ChanServ sets mode: +v npaperbot
[21:39:34] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[21:41:40] *** Quits: chozorho (~chozorho@2601:146:300:c30::778) (Ping timeout: 252 seconds)
[21:42:26] *** Joins: ville (~ville@178-75-128-81.bb.dnainternet.fi)
[21:42:34] *** Joins: skapate (~Skapata@2804:14c:87b0:a6f9:c1a4:be0a:1fc2:e600)
[21:42:34] *** Quits: skapate (~Skapata@2804:14c:87b0:a6f9:c1a4:be0a:1fc2:e600) (Changing host)
[21:42:34] *** Joins: skapate (~Skapata@user/skapata)
[21:42:59] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 264 seconds)
[21:45:40] *** Quits: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104) (Quit: Connection closed)
[21:45:43] *** Quits: Xe4roX (~Xe4roX@31-10-144-26.cgn.dynamic.upc.ch) (Remote host closed the connection)
[21:48:24] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[21:59:08] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.3)
[22:04:16] *** Quits: jkaye (~jkaye@2601:281:8300:7530:30bc:26a4:e2b8:8034) (Ping timeout: 245 seconds)
[22:16:37] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[22:17:45] *** Joins: TheGuestMovie (~TheGuestM@173.231.114.74)
[22:20:30] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Ping timeout: 260 seconds)
[22:41:16] *** Joins: jkaye (~jkaye@2601:281:8300:7530:5bae:6a75:284d:ff5)
[22:45:59] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[22:57:13] *** Joins: ferdna (~ferdna@user/ferdna)
[22:58:52] *** Quits: manjaro-user (~manjaro-u@208.98.223.114) (Ping timeout: 265 seconds)
[23:16:17] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[23:21:36] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[23:22:19] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[23:24:41] *** Gustavo6046_ is now known as Gustavo6046
[23:25:19] *** Joins: Mooncairn (~mooncairn@user/mooncairn)
[23:27:55] <Brewster> Hey I'm getting an odd error that google really isn't helping me with. "Fatal error: glibc detected an invalid stdio handle". It happens on the curl_easy_perform line and I'm not sure what to do. https://pastebin.com/kpUXnUxq
[23:29:07] <Brewster> Sorry for not using wandbox. Everything works just fine without the curl stuff so I was hoping someone could just point out if I was doing something wonky.
[23:34:16] *** Joins: lumberluch0 (~lumbermb@191.114.114.152)
[23:34:25] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 252 seconds)
[23:35:48] <RandomReader> since that code doesn't even compile without the curl stuff, it's a bit hard to take on face value that it's correct without curl
[23:36:00] *** Joins: anyone (~filler@a4.inai.de)
[23:37:02] *** Quits: lumbermb (~lumbermb@191.114.121.99) (Ping timeout: 260 seconds)
[23:37:35] <RandomReader> the error typically means something wasn't initialized correctly, or was corrupted by a failure elsewhere
[23:39:07] <RandomReader> so I would start with attempting to verify the code: make sure you're compiling with warnings on, use the static analysis tools you might have available, build with sanitizer(s) to see what might trigger at runtime, step through with a debugger to make sure it's flowing the way you expect
[23:39:26] *** Joins: magla (~gelignite@55d43ee1.access.ecotel.net)
[23:39:27] <Brewster> RandomReader: You can simply take my word for the fact that without the curl_easy commands it works just fine. What do you think the value is in saying something like that? Obviously as I said I tried it without the curl_easy* commands.
[23:39:50] <RandomReader> because as I said, this kind of error can be caused by corruption *elsewhere*
[23:40:12] <RandomReader> and since I can't even look at "elsewhere" in this case (you've changed this code from what it actually is), I have nothing to go on, and the problem might very well be there and not with curl
[23:40:13] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[23:40:25] <RandomReader> this is basic debugging, not me being a dick
[23:40:44] <Brewster> I commented out 57-62 and it works just fine
[23:41:03] <Brewster> it just doesn't make http calls
[23:49:18] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[23:49:39] <RandomReader> that CURLOPT_WRITEDATA line on its own doesn't look correct: https://curl.se/libcurl/c/CURLOPT_WRITEDATA.html
[23:50:37] <urdh> it can't work fine with just those lines commented out
[23:50:42] <urdh> it doesn't even build
[23:53:02] *** Quits: TheGuestMovie (~TheGuestM@173.231.114.74) (Quit: Client closed)
[23:53:11] <Brewster> it isn't
[23:53:22] <urdh> but yeah CURLOPT_WRITEDATA quite clearly says to pass a FILE* unless you are also using CURLOPT_WIRTEFUNCTION
[23:53:24] <Brewster> the nice folks in #c actually pointed me in the right direction
[23:54:01] <Brewster> yeah I actually was using an example from a git gist
[23:55:08] <urdh> use the examples from the libcurl docs instead: https://curl.se/libcurl/c/example.html
[23:55:08] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[23:55:20] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[23:55:27] <Brewster> the error I saw just caused the program to stop and when I googled it, I kinda gathered that the error happens when you do something weird with memory, but in c++, that could be literally anything
[23:58:24] <RandomReader> and there are a few questionable points in the surrounding code already, which is why the *real* code is so important
[23:58:46] <RandomReader> that's exactly what I was talking about in terms of debugging approach, and why I suggested all the tooling instead of doing much analysis myself
[23:59:36] <RandomReader> ("appears to work" is not success)
