[00:06:34] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[00:08:03] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[00:09:15] *** Quits: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:10:12] *** Joins: ramenbytes (~vir@071-009-124-057.res.spectrum.com)
[00:11:52] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:13:10] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[00:14:25] <shka> i suspect that you could also try cross compilation with clasp
[00:14:32] *** Lord_of_Life_ is now known as Lord_of_Life
[00:14:53] <shka> and get good result
[00:19:22] *** Joins: notzmv (~zmv@user/notzmv)
[00:24:08] *** Parts: ramenbytes (~vir@071-009-124-057.res.spectrum.com) ( )
[00:49:45] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[00:49:58] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[00:50:45] *** Quits: xlei (znc@pool-68-129-84-118.nycmny.fios.verizon.net) (Read error: Connection reset by peer)
[00:52:02] *** Joins: Krystof (~user@81.174.155.115)
[00:59:04] *** Joins: Bike (~Bike@71.69.170.70)
[00:59:04] *** ChanServ sets mode: +o Bike
[01:00:50] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[01:01:42] *** Joins: xlei (znc@pool-68-129-84-118.nycmny.fios.verizon.net)
[01:04:50] <Josh_2> lisp123: if you want access to the lexical variables then you could use a closure
[01:05:47] <lisp123> Josh_2: I would still need to pass that data to a logging function if its outside of the main function, correct?
[01:06:34] <Josh_2> sure, you could just pass the variables
[01:06:44] <Josh_2> ofcourse I have no clue what your system is like
[01:06:50] <lisp123> Yeah, that's the problem (not that its a big problem)
[01:07:16] <lisp123> I am stuck with lines within the main function thats doing the logging (either directly or calling a logging function)
[01:07:37] <lisp123> So if I want to turn off logging, I am still stuck with traces of logging code in the functions
[01:08:19] <lisp123> I was hoping to do something independent, with some global switches to turn logging on and off, but I'm stuck with passing the lexical data to the logging functions
[01:08:59] <lisp123> CLOS :before & :after don't have access to it, and :around processes the primary method at the end (unless there are some sort of hacks around method combinations)
[01:09:28] <lisp123> I wonder if a Macro could help
[01:10:18] <Josh_2> can you show the code?
[01:10:34] <Josh_2> yes there are hacks in method combinations, you can make your own!
[01:10:58] <lisp123> Code is too messy and convoluted (400 lines)
[01:11:07] <lisp123> Let me whip up an example
[01:11:18] <Josh_2> alrighty
[01:15:56] <lisp123> https://pastebin.com/F8FHZGaA
[01:16:30] <lisp123> So I want to have access to all bindings within a function, and then call the logging function after the function returns (or just before it does, shouldn't matter too much)
[01:16:52] <lisp123> I say all the bindings, because I want something very general that I can use across any function that I want to log
[01:17:20] <lisp123> But I want to remove the line within the main function that calls the logging function, and control logging on/off by some other switch
[01:18:56] <lisp123> Only solution I can really think of is creating a macro, which makes the variables dynamic, and then inserting the logging function at the end
[01:20:19] <lisp123> (Alternatively, I could put everything in a macro and not have a defun within the macro, but then I can't funcall / apply on the main function)
[01:21:05] <Josh_2> what is wrong with just sending the values of a and b?
[01:21:23] <lisp123> Josh_2: its fine, just messy. That's what I am doing now
[01:21:41] <Josh_2> oh I see
[01:22:02] <lisp123> I guess its not too bad
[01:22:14] <Josh_2> well if you want to make it more generic you could use a rest and your logger could just loop over the values printing both the symbol and the value
[01:22:37] <Josh_2> and you can just disable logging in the logger with a global variable
[01:23:12] <Josh_2> also I know thats just example code but let* exists to let you reference other variables bound within the let form
[01:24:44] <lisp123> Yeah I just did that to drive the point I need all the values, not just in one let
[01:24:53] <Josh_2> alrighty
[01:25:01] <lisp123> I'm trying to parse your earlier comment
[01:25:17] <lisp123> How would it work?
[01:31:00] <Josh_2> Yeh I was wrong. But still you could do something like (defun generic-logger (stream &rest args) (format stream "~{~A~%~}" args)) (let ((a 1) (b 2)) (generic-logger t `(a ,a) `(b ,b)))
[01:31:44] *** Joins: clemens3 (~clemens@225.40.150.83.ftth.as8758.net)
[01:31:57] <Josh_2> Tbf you could write your own version of let that composed the generic-logger form automatically
[01:32:25] <lisp123> Thats a pretty good idea
[01:32:33] <lisp123> it could capture any variable defined in the let
[01:32:43] <lisp123> and log it
[01:33:25] <Josh_2> Yes I think thats the best bet, and you can just make a call out to a function where you can disable/enable with a special var or a global var
[01:34:14] <lisp123> I think so, that would be quite helpful. At least get default logging on all let variables, and the rest just deal with - doesn't solve everything, but from a quality of life perspective, not bad at all
[01:34:21] <lisp123> Thanks Josh_2!
[01:34:28] *** Quits: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de) (Ping timeout: 250 seconds)
[01:37:13] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (Quit: WeeChat 2.2-dev)
[01:37:56] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 250 seconds)
[01:39:41] <Josh_2> I did it
[01:40:04] *** Joins: akoana (~ah@user/akoana)
[01:40:37] *** Joins: akoana_ (~ah@user/akoana)
[01:40:50] <Josh_2> https://plaster.tymoon.eu/view/2603#2603 look at that if you want the macro, dont if you want to figure it out yourself
[01:40:50] *** Joins: akoana__ (~ah@user/akoana)
[01:42:04] <lisp123> I will try it first, I'm very bad at macros so need all the practice I can get
[01:43:49] <Josh_2> Good stuff
[01:45:24] *** Quits: paulman (~kulernil@gateway/tor-sasl/kuler) (Ping timeout: 244 seconds)
[01:52:50] *** Joins: IPmonger (~IPmonger@172.58.203.182)
[01:53:04] *** Quits: IPmonger (~IPmonger@172.58.203.182) (Remote host closed the connection)
[01:58:09] <pjb> lisp123: if you're unsatisfied with CLOS standard method combinations (primary around before after), then just define your own! define-method-combination is there fore you!
[01:58:41] <Josh_2> Or you can use the non standard methods like progn, +, append etc
[01:58:45] <Josh_2> I find append very useful
[01:58:47] <pjb> lisp123: perhaps you would just want to use cl-stepper?
[01:59:55] <lisp123> pjb: I am using cl-stepper in certain places, esp for debugging. This is more for data problems, so what I am doing is logging the entire process, and then extracting into a special format (e.g. xml) to quickly jump between parts
[02:00:13] <lisp123> cl-stepper is great, thanks for sharing :)
[02:00:13] *** Quits: amb007 (~a_bakic@net158-33-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[02:00:15] *** Joins: z147_ (~z147@gateway/tor-sasl/z147)
[02:00:16] <pjb> lisp123: https://termbin.com/h39m7
[02:00:23] *** Joins: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs)
[02:00:27] <pjb> lisp123: you can see all the bindings there ;-)
[02:01:16] <lisp123> its _very_ useful :)
[02:01:26] *** Quits: z147_ (~z147@gateway/tor-sasl/z147) (Client Quit)
[02:02:58] *** Quits: z147 (~z147@gateway/tor-sasl/z147) (Ping timeout: 244 seconds)
[02:06:58] *** Quits: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs) (Ping timeout: 250 seconds)
[02:07:17] *** Joins: amb007 (~a_bakic@net158-33-245-109.mbb.telenor.rs)
[02:11:23] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[02:11:34] *** Quits: akoana__ (~ah@user/akoana) (Quit: leaving)
[02:11:48] *** Quits: akoana_ (~ah@user/akoana) (Quit: leaving)
[02:14:55] *** Joins: akoana (~ah@user/akoana)
[02:17:42] *** Joins: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com)
[02:23:35] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[02:25:58] *** Quits: amb007 (~a_bakic@net158-33-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[02:26:28] *** Joins: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs)
[02:30:22] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 250 seconds)
[02:42:41] *** Joins: cosimone` (~user@93-34-132-136.ip49.fastwebnet.it)
[02:42:43] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Read error: Connection reset by peer)
[02:46:49] *** Quits: Alfr (~Alfr@user/alfr) (Killed (tungsten.libera.chat (Nickname regained by services)))
[02:46:54] *** Joins: Alfr (~Alfr@user/alfr)
[02:48:00] *** Quits: cosimone` (~user@93-34-132-136.ip49.fastwebnet.it) (Ping timeout: 268 seconds)
[02:48:42] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[02:49:17] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:53:46] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[03:00:05] *** Quits: frgo (~frgo@p200300deef0cee00fdda01e4d1e8bae4.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:00:32] *** Joins: frgo (~frgo@p200300deef0cee00fdda01e4d1e8bae4.dip0.t-ipconnect.de)
[03:06:17] *** Joins: lisp123 (~lisp123@5.30.23.247)
[03:06:39] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[03:09:36] *** Joins: derelict (~derelict@user/derelict)
[03:10:55] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[03:13:07] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[03:13:39] *** Joins: lisp123 (~lisp123@5.30.23.247)
[03:14:25] *** Joins: taiju (~taiju@m014013236064.v4.enabler.ne.jp)
[03:14:46] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[03:18:10] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[03:20:00] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[03:29:44] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 250 seconds)
[03:31:45] *** Joins: Bike (~Bike@71.69.170.70)
[03:31:45] *** ChanServ sets mode: +o Bike
[03:34:30] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[03:34:54] *** Joins: Alfr (~Alfr@user/alfr)
[03:42:30] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[03:42:41] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[03:42:54] *** Joins: Alfr (~Alfr@user/alfr)
[03:46:00] *** Quits: akoana (~ah@user/akoana) (Read error: Connection reset by peer)
[03:47:04] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:cb9:2d96:4da8:aca7) (Ping timeout: 250 seconds)
[03:50:25] *** Quits: Alfr (~Alfr@user/alfr) (Ping timeout: 252 seconds)
[03:52:30] *** Quits: xlei (znc@pool-68-129-84-118.nycmny.fios.verizon.net) (Quit: ZNC - https://znc.in)
[03:52:56] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[03:54:08] *** Joins: lisp123 (~lisp123@5.30.23.247)
[03:55:42] *** Joins: derelict (~derelict@user/derelict)
[03:59:07] *** Joins: xlei (znc@pool-68-129-84-118.nycmny.fios.verizon.net)
[03:59:30] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[03:59:50] *** Joins: livoreno (~livoreno@user/notzmv)
[04:02:46] *** Joins: Alfr (~Alfr@user/alfr)
[04:04:20] *** Joins: Guest94 (~Guest94@2601:5c0:c200:27c7:10aa:91ed:8eb7:afcf)
[04:05:16] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[04:05:22] *** Joins: [deleted] (~livoreno@user/notzmv)
[04:05:41] *** Quits: [deleted] (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[04:06:00] *** Joins: livoreno (~livoreno@user/notzmv)
[04:06:33] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 248 seconds)
[04:06:45] *** Quits: Guest94 (~Guest94@2601:5c0:c200:27c7:10aa:91ed:8eb7:afcf) (Client Quit)
[04:08:55] *** Joins: [deleted] (~livoreno@user/notzmv)
[04:09:01] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[04:09:16] *** Quits: [deleted] (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[04:09:35] *** Joins: livoreno (~livoreno@user/notzmv)
[04:15:39] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[04:16:25] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[04:16:34] *** Joins: livoreno (~livoreno@user/notzmv)
[04:16:56] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[04:17:16] *** Joins: livoreno (~livoreno@user/notzmv)
[04:19:56] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[04:20:11] *** Joins: livoreno (~livoreno@user/notzmv)
[04:23:16] <akater[m]> A macroexpansion `(prog1 (defclass a ..) (defmethod ..) ..)` triggers style-warnings “Cannot find type for specializer A when executing …” (at least with SBCL).  If I evaluate the first form and a progn of the rest forms separately, style-warnings are not there.  How do I write a macroexpansion that would not trigger style-warnings?
[04:23:34] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[04:23:40] *** Joins: [deleted] (~livoreno@user/notzmv)
[04:25:28] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[04:26:04] *** Quits: gaqwas (~john@dynamic-095-117-050-142.95.117.pool.telefonica.de) (Ping timeout: 250 seconds)
[04:26:35] <lotuseater> hm setting all in a PROGN instead of PROG1 ?
[04:30:29] *** Quits: [deleted] (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[04:31:40] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 240 seconds)
[04:34:09] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[04:34:45] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[04:36:31] *** Joins: lisp123 (~lisp123@5.30.23.247)
[04:43:47] *** Joins: livoreno (~livoreno@user/notzmv)
[04:45:19] *** Alfr is now known as Guest2662
[04:45:24] *** Joins: Alfr (~Alfr@user/alfr)
[04:46:33] *** Quits: Alfr (~Alfr@user/alfr) (Read error: Connection reset by peer)
[04:47:44] *** Quits: Guest2662 (~Alfr@user/alfr) (Ping timeout: 250 seconds)
[04:47:44] *** Quits: random-nick (~random-ni@87.116.176.45) (Ping timeout: 250 seconds)
[04:47:53] *** Joins: Alfr (~Alfr@user/alfr)
[04:47:56] *** Joins: Bike (~Bike@71.69.170.70)
[04:47:56] *** ChanServ sets mode: +o Bike
[04:51:30] *** Joins: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421)
[04:52:13] *** Quits: Alfr (~Alfr@user/alfr) (Read error: Connection reset by peer)
[04:52:34] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 268 seconds)
[04:53:23] *** Joins: Alfr (~Alfr@user/alfr)
[04:57:09] <akater[m]> lotuseater: 1. Why does it work?  2. Obviously, I want to return the class.
[04:58:45] <lotuseater> I'm just used to using normal PROGN when writing a macro that spits out multiple forms
[04:58:58] <lotuseater> ah yr
[04:59:03] <lotuseater> ah yes okay i see
[05:02:01] <Bike> the style warning appears to be emitted when a defmethod form is compiled and some of the specializers are not known to be classes
[05:02:34] <Bike> if you compile (progn (defclass ...) (defmethod ...)), the defclass is at top level, so the compiler processes it and notes that there will be a class by that name, so when compiling the defmethod it doesn't emit the style warning
[05:02:52] <Bike> with prog1 the forms aren't at top level, so that doesn't happen, so the style warning is emitted
[05:03:00] <Bike> make sense?
[05:03:31] <Bike> cheap solution: expand to (progn (defclass whatever ...) (defmethod ...) ... (find-class 'whatever))
[05:03:36] <lotuseater> i would say the intention to use PROG1 (in functions) is for specifying in advance which value should be given back, not forms
[05:03:56] <Bike> Huh?
[05:04:01] <lotuseater> huh.
[05:04:07] *** Quits: Alfr (~Alfr@user/alfr) (Read error: Connection reset by peer)
[05:05:22] *** Joins: Alfr (~Alfr@user/alfr)
[05:05:30] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[05:07:07] <akater[m]> Bike: Thank you.  Is there a reason `prog1` does not have the same “toplevel” properties as `progn`?
[05:07:58] *** Quits: taiju (~taiju@m014013236064.v4.enabler.ne.jp) (Ping timeout: 252 seconds)
[05:09:36] <semz> probably because there is no reason to use prog1 over progn at the toplevel
[05:09:50] <semz> the returned value is discarded anyway
[05:10:48] <lotuseater> PROG1 opens up a lexical scope with LET
[05:11:27] <Bike> akater[m]: I don't know, although at top level prog1 and prog1 are equivalent anyway, since to be toplevel the value of the form has to be discarded.
[05:11:42] <Bike> prog1 usually expanding to let would be the practical reason
[05:11:55] <akater[m]> Oh, prog1 is a macro.  I thought it was a special operator.  No questions then.
[05:12:51] <lotuseater> beside PROGN also PROGV is one of the special operators
[05:15:30] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[05:15:53] *** Joins: Alfr (~Alfr@user/alfr)
[05:17:25] *** Quits: Alfr (~Alfr@user/alfr) (Read error: Connection reset by peer)
[05:18:53] *** Joins: Alfr (~Alfr@user/alfr)
[05:19:02] <edgar-rft> there is something mentioned in the CLHS that only PROGN preserves top-level-ity but stupidly I don't know where exactly
[05:19:33] <Bike> clhs 3.2.3.1
[05:19:33] <specbot> Processing of Top Level Forms: http://www.lispworks.com/reference/HyperSpec/Body/03_bca.htm
[05:20:29] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[05:22:36] <edgar-rft> Bike: thanx, how much do you want when I hire you as my clhs bot? :-)
[05:23:38] <Bike> now i'm wondering if you could get an expert system to answer questions about technical standards
[05:24:49] <Bike> multiple-value-prog1 is a special operator but doesn't preserve toplevelness. I suppose the reasons are probably just that (a) compilers would have to treat it slightly differently to process it as top level and (b) toplevel m-v-prog1 or prog1 are pretty unusual anyway
[05:29:39] *** Joins: paulman (~kulernil@gateway/tor-sasl/kuler)
[05:34:25] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[05:34:58] *** Quits: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 250 seconds)
[05:40:00] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[05:40:22] *** Joins: Alfr (~Alfr@user/alfr)
[05:41:19] *** Quits: paulman (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[05:41:45] *** Joins: paulman (~kulernil@gateway/tor-sasl/kuler)
[05:43:14] *** Joins: taiju (~taiju@m014013236064.v4.enabler.ne.jp)
[05:46:24] <akater[m]> I'd expect “a macro defining a class, maybe with some standard methods for it” to be quite common.
[05:46:56] <Bike> maybe, but you don't usually care about the return value
[05:47:14] <Bike> i don't know about you but i'm not sure i've ever used the return value of defclass, except maybe in the repl occasionally
[05:47:26] <Bike> and if you do want it to return the class you can just use find-class, so it's not too much of an issue
[05:48:45] <akater[m]> Yes, I went with `find-class`.
[05:52:13] <akater[m]> 1. In Elisp, `(add-to-list 'some-hook (defun f ..))` is not uncommon; any def- is similar  2. `defclass` returns the class; it's better to be consistent.
[06:03:55] <Bike> i don't disagree with doing it. i just mean it doesn't come up much, for me at least
[06:04:10] *** Quits: Alfr (~Alfr@user/alfr) (Read error: Connection reset by peer)
[06:04:23] *** Joins: Alfr (~Alfr@user/alfr)
[06:04:33] <semz> I'd have to check when the stuff about toplevel forms was added, but it might be that defclass came afterwards. Afaik it's the only case where a def- form returns the actual object rather than its just-established name.
[06:05:46] *** Quits: Alfr (~Alfr@user/alfr) (Read error: Connection reset by peer)
[06:05:57] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Remote host closed the connection)
[06:06:53] *** Joins: Alfr (~Alfr@user/alfr)
[06:07:10] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[06:07:23] <mfiano> Have you never used generic functions?
[06:07:35] <mfiano> or their methods?
[06:07:47] <semz> generic functions and methods came together with defclass
[06:08:53] <mfiano> Well I _know_ you've used packages.
[06:09:27] <semz> never at the repl :-) but you got me
[06:10:00] <semz> it's a mystery then
[06:11:10] *** Quits: Alfr (~Alfr@user/alfr) (Read error: Connection reset by peer)
[06:12:24] *** Joins: Alfr (~Alfr@user/alfr)
[06:32:40] *** Quits: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs) (Ping timeout: 240 seconds)
[06:34:58] *** Joins: amb007 (~a_bakic@net158-33-245-109.mbb.telenor.rs)
[06:51:43] *** Quits: xlei (znc@pool-68-129-84-118.nycmny.fios.verizon.net) (Quit: ZNC - https://znc.in)
[06:53:28] *** Quits: Alfr (~Alfr@user/alfr) (Read error: Connection reset by peer)
[06:54:24] *** Joins: Alfr (~Alfr@user/alfr)
[06:54:27] *** Joins: xlei (znc@pool-68-129-84-118.nycmny.fios.verizon.net)
[06:56:16] *** Joins: akoana (~ah@user/akoana)
[06:59:21] *** Quits: amb007 (~a_bakic@net158-33-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[06:59:36] *** Joins: amb007 (~a_bakic@194.24.248.254)
[07:04:40] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 250 seconds)
[07:10:18] *** Quits: amb007 (~a_bakic@194.24.248.254) (Ping timeout: 250 seconds)
[07:11:28] *** Joins: prxq_ (~quassel@x4dbea817.dyn.telefonica.de)
[07:15:21] *** Quits: prxq (~quassel@x4db44d01.dyn.telefonica.de) (Ping timeout: 248 seconds)
[07:17:02] *** Joins: wilfred (uid159@id-159.highgate.irccloud.com)
[07:18:50] <susam> Has anyone else seen this difference in the behaviour of M-q while re-indenting a long docstring: https://plaster.tymoon.eu/view/2604 ?
[07:24:08] <susam> Is that difference in re-indenting docstring expected behaviour?
[07:24:30] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[07:28:39] *** Joins: livoreno (~livoreno@user/notzmv)
[07:31:29] <akater[m]> susam: You probably better ask in Emacs rooms.  Also, this paste website tries to hcaptcha me.  I think this is the first time I see a webpaste doing a captcha check.  JFYI.
[07:31:41] <beach> Good morning everyone!
[07:32:17] <susam> beach: Good morning!
[07:33:54] <susam> akater[m]: Thanks! Will ask in #emacs too. By the way, I was not aware the tymoon pastebin does a captcha check. I have seen plaster.tymoon.eu links posted here often and this is the first time I learnt that it has a captcha.
[07:35:59] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Read error: Connection reset by peer)
[07:36:53] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[07:37:35] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[07:38:03] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Read error: Connection reset by peer)
[07:38:13] *** Joins: livoreno (~livoreno@user/notzmv)
[07:38:23] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[07:40:18] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Read error: Connection reset by peer)
[07:40:38] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[07:50:01] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Ping timeout: 248 seconds)
[07:54:30] *** Quits: semz (~none@user/semz) (Ping timeout: 250 seconds)
[08:05:12] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[08:07:18] *** Joins: semz (~none@user/semz)
[08:08:10] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 240 seconds)
[08:34:08] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[08:35:12] *** Quits: paulman (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[08:37:40] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[08:40:14] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[08:40:52] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 250 seconds)
[08:43:28] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 250 seconds)
[08:51:14] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.2)
[08:52:56] *** Joins: amb007 (~a_bakic@80.149.170.8)
[09:03:34] *** Joins: paulman (~kulernil@gateway/tor-sasl/kuler)
[09:04:48] *** Quits: kulernil (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[09:11:42] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[09:14:55] *** Quits: amb007 (~a_bakic@80.149.170.8) (Ping timeout: 252 seconds)
[09:14:55] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[09:15:15] *** Joins: amb007 (~a_bakic@80.149.170.8)
[09:19:26] *** Quits: etiago (~etiago@user/etiago) (Ping timeout: 250 seconds)
[09:21:23] *** Joins: etiago (~etiago@user/etiago)
[09:21:36] *** Quits: amb007 (~a_bakic@80.149.170.8) (Ping timeout: 250 seconds)
[09:21:51] *** Joins: amb007 (~a_bakic@80.149.170.8)
[09:26:43] *** Quits: wilfred (uid159@id-159.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[09:31:25] *** Quits: amb007 (~a_bakic@80.149.170.8) (Ping timeout: 252 seconds)
[09:33:40] *** Joins: amb007 (~a_bakic@80.149.170.8)
[09:34:13] *** Quits: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b) (Remote host closed the connection)
[09:37:15] *** Joins: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b)
[09:43:25] *** Quits: amb007 (~a_bakic@80.149.170.8) (Read error: Connection reset by peer)
[09:43:40] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[09:43:44] *** Joins: amb007 (~a_bakic@80.149.170.8)
[09:46:44] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 250 seconds)
[09:54:08] <loke[m]> <susam> "Is that difference in re-..." <- The first case doesn't have a docstring though.
[10:00:19] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[10:02:46] *** Quits: taiju (~taiju@m014013236064.v4.enabler.ne.jp) (Ping timeout: 252 seconds)
[10:03:00] *** Joins: taiju (~taiju@240b:253:ec40:2400:e1d1:588c:bc3f:1887)
[10:03:58] *** Joins: retropikzel (~retropikz@2001:999:200:4ae7:b0ea:7db1:dd14:5ec6)
[10:05:00] *** Quits: aeth (~aeth@user/aeth) (Read error: Connection reset by peer)
[10:05:19] *** Joins: aeth (~aeth@user/aeth)
[10:05:48] *** Joins: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f)
[10:19:32] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[10:19:43] *** Quits: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f) (Quit: Leaving)
[10:20:53] *** Joins: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f)
[10:23:15] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Quit: ZNC - https://znc.in)
[10:23:34] *** Quits: amb007 (~a_bakic@80.149.170.8) (Ping timeout: 250 seconds)
[10:23:37] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[10:26:20] *** Quits: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f) (Quit: Leaving)
[10:27:29] *** Joins: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f)
[10:29:17] *** Quits: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f) (Client Quit)
[10:29:36] *** Joins: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f)
[10:30:52] *** Quits: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f) (Client Quit)
[10:31:15] *** Joins: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f)
[10:42:36] *** Joins: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49)
[10:45:09] *** Joins: amb007 (~a_bakic@88.128.88.48)
[11:04:01] <lisp123> Good morning Beach. Which timezone are you in?
[11:04:49] <beach> UTC+2 currently.
[11:06:10] <lisp123> Nice
[11:06:29] *** Joins: shka (~herr@109.231.62.239)
[11:07:09] <beach> No Bordeaux. :)
[11:07:39] <lisp123> It means, you wake up early (once I did enough of the maths) :)
[11:08:47] <beach> It's a genetic defect in my family.  We can't help it.  My parents were so bored at 4am that they got second jobs distributing newspapers.
[11:10:09] <lisp123> Wow, that is early. Must be cold in the mornings!
[11:10:51] <beach> Not really.
[11:10:56] <lisp123> I used to try and wake up by 6, should try to get into that habit again.
[11:20:02] *** Quits: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f) (Quit: Leaving)
[11:21:23] *** Joins: hafat (~hafat@159.146.87.68)
[11:31:15] *** Quits: hafat (~hafat@159.146.87.68) (Remote host closed the connection)
[11:33:08] *** Joins: hafat (~hafat@159.146.87.68)
[11:48:22] *** Quits: amb007 (~a_bakic@88.128.88.48) (Ping timeout: 252 seconds)
[11:51:34] *** Joins: amb007 (~a_bakic@87.174.185.81.rev.sfr.net)
[12:07:48] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798)
[12:10:40] *** Quits: amb007 (~a_bakic@87.174.185.81.rev.sfr.net) (Ping timeout: 240 seconds)
[12:25:56] <pjb> the most I can wake at 6 is to press the snooze button on the alarm, but most of the time, I can't even be bothered to do that. I've got half a dozen alarms until it's to late to wak up anyways.
[12:26:17] <hayley> Sometimes I wake up, then regret it.
[12:33:09] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:cb9:2d96:4da8:aca7)
[12:35:13] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:37:57] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:52:24] *** Joins: nij- (~jin@209.122.210.131)
[12:53:11] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[12:54:28] *** Quits: frgo (~frgo@p200300deef0cee00fdda01e4d1e8bae4.dip0.t-ipconnect.de) (Remote host closed the connection)
[12:54:37] *** Joins: frgo (~frgo@p200300deef0cee00fdda01e4d1e8bae4.dip0.t-ipconnect.de)
[12:56:10] *** Quits: retropikzel (~retropikz@2001:999:200:4ae7:b0ea:7db1:dd14:5ec6) (Ping timeout: 258 seconds)
[12:59:19] *** Quits: nij- (~jin@209.122.210.131) (Read error: Connection reset by peer)
[13:00:03] *** Joins: cosimone (~user@93-44-186-135.ip98.fastwebnet.it)
[13:01:31] *** Quits: frgo (~frgo@p200300deef0cee00fdda01e4d1e8bae4.dip0.t-ipconnect.de) (Remote host closed the connection)
[13:01:43] *** Joins: frgo (~frgo@p200300deef0cee00fdda01e4d1e8bae4.dip0.t-ipconnect.de)
[13:04:34] *** Quits: frgo (~frgo@p200300deef0cee00fdda01e4d1e8bae4.dip0.t-ipconnect.de) (Remote host closed the connection)
[13:05:22] *** Joins: frgo (~frgo@p200300deef0cee00fdda01e4d1e8bae4.dip0.t-ipconnect.de)
[13:05:40] *** Quits: frgo (~frgo@p200300deef0cee00fdda01e4d1e8bae4.dip0.t-ipconnect.de) (Client Quit)
[13:16:11] *** Joins: amb007 (~a_bakic@136.13.23.93.rev.sfr.net)
[13:20:54] *** Joins: nij- (~jin@209.122.210.131)
[13:22:31] *** Joins: pve (~pve@87-93-237-124.bb.dnainternet.fi)
[13:26:39] *** Joins: retropikzel (~retropikz@83-245-241-179-nat-p.elisa-mobile.fi)
[13:26:39] *** Quits: nij- (~jin@209.122.210.131) (Read error: Connection reset by peer)
[13:39:52] *** Quits: cosimone (~user@93-44-186-135.ip98.fastwebnet.it) (Ping timeout: 250 seconds)
[13:42:22] *** Joins: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it)
[14:05:39] *** Quits: hafat (~hafat@159.146.87.68) (Quit: Leaving)
[14:06:28] *** Joins: gaqwas (~john@dynamic-095-118-102-130.95.118.pool.telefonica.de)
[14:10:03] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[14:17:59] *** Joins: hafat (~hafat@159.146.87.68)
[14:27:16] *** Quits: hafat (~hafat@159.146.87.68) (Remote host closed the connection)
[14:35:52] <pjb> https://youtu.be/lzHshvfddC0?list=TLPQMjIwODIwMjH_OScC_XRs4w&t=291
[14:36:11] <pjb> Well, https://youtu.be/lzHshvfddC0&t=291
[14:42:57] *** Joins: makomo (~makomo@user/makomo)
[14:45:04] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[14:45:37] *** Quits: retropikzel (~retropikz@83-245-241-179-nat-p.elisa-mobile.fi) (Read error: Connection reset by peer)
[14:45:54] *** Joins: retropikzel (~retropikz@83-245-241-179-nat-p.elisa-mobile.fi)
[14:51:48] *** Joins: VincentVega (~user@212.241.16.131)
[14:53:12] *** Quits: mingus (~jan-magnu@ti0135a400-2471.bb.online.no) (Ping timeout: 268 seconds)
[14:53:33] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[14:55:16] *** Joins: mingus (~jan-magnu@ti0135a400-2471.bb.online.no)
[14:56:32] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:24:05] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 252 seconds)
[15:26:21] *** Joins: khrbt (~znc@user/khrbt)
[15:28:22] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:32:45] *** Joins: random-nick (~random-ni@87.116.179.117)
[15:34:17] <lisp123> pjb: lol
[15:37:16] *** Joins: nij- (~jin@209.122.210.131)
[15:39:02] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[15:43:25] *** Quits: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49) (Remote host closed the connection)
[15:43:25] *** Quits: nij- (~jin@209.122.210.131) (Read error: Connection reset by peer)
[15:43:26] *** Quits: amb007 (~a_bakic@136.13.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[15:44:38] *** Joins: amb007 (~a_bakic@136.13.23.93.rev.sfr.net)
[15:45:10] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[15:46:32] *** Quits: paulman (~kulernil@gateway/tor-sasl/kuler) (Ping timeout: 244 seconds)
[16:02:05] *** Joins: skn (~znc@2001:19f0:5:701:5400:ff:fe7c:4e5c)
[16:15:17] *** Joins: nij- (~jin@209.122.210.131)
[16:15:36] *** Parts: nij- (~jin@209.122.210.131) ()
[16:15:48] *** Joins: nij- (~jin@209.122.210.131)
[16:19:46] *** Quits: amb007 (~a_bakic@136.13.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[16:20:26] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[16:21:18] *** Quits: nij- (~jin@209.122.210.131) (Read error: Connection reset by peer)
[16:25:01] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[16:25:15] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[16:25:36] *** Joins: selwyn (~selwyn@user/selwyn)
[16:48:05] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[17:06:37] *** Quits: kulernil (~kulernil@gateway/tor-sasl/kuler) (Ping timeout: 244 seconds)
[17:14:07] *** Quits: retropikzel (~retropikz@83-245-241-179-nat-p.elisa-mobile.fi) (Quit: Leaving)
[17:16:44] *** Joins: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de)
[17:30:40] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[17:36:14] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[17:37:39] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[17:47:45] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[18:05:14] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[18:06:04] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[18:14:58] *** Joins: nij- (~jin@209.122.210.131)
[18:19:37] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[18:20:22] *** Alfr is now known as Guest9643
[18:20:22] *** Quits: nij- (~jin@209.122.210.131) (Read error: Connection reset by peer)
[18:20:26] *** Joins: Alfr (~Alfr@user/alfr)
[18:22:43] *** Quits: Guest9643 (~Alfr@user/alfr) (Ping timeout: 252 seconds)
[18:22:46] *** Quits: taiju (~taiju@240b:253:ec40:2400:e1d1:588c:bc3f:1887) (Ping timeout: 258 seconds)
[18:23:05] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[18:23:24] *** Joins: taiju (~taiju@240b:253:ec40:2400:e1d1:588c:bc3f:1887)
[18:28:28] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[18:33:03] *** Joins: Guest33 (~Guest33@2406:3400:41a:abc1:7996:1b2c:2a48:ed73)
[18:35:10] *** Quits: taiju (~taiju@240b:253:ec40:2400:e1d1:588c:bc3f:1887) (Ping timeout: 240 seconds)
[18:35:54] *** Joins: taiju (~taiju@m014013236064.v4.enabler.ne.jp)
[18:40:40] *** Joins: lisp123 (~lisp123@45.86.202.65)
[18:41:12] *** Joins: selwyn (~selwyn@user/selwyn)
[18:44:10] *** Quits: Posterdati (~posterdat@host-82-49-175-12.retail.telecomitalia.it) (Ping timeout: 240 seconds)
[18:52:22] *** Quits: Guest33 (~Guest33@2406:3400:41a:abc1:7996:1b2c:2a48:ed73) (Quit: Client closed)
[18:54:51] *** Quits: dilated_dinosaur (~dino@cpc1-bexl9-2-0-cust231.2-3.cable.virginm.net) (Quit: Leaving)
[18:57:55] *** Joins: Posterdati (~posterdat@host-82-49-175-12.retail.telecomitalia.it)
[19:08:54] *** Joins: Bike (~Bike@204.84.244.11)
[19:08:54] *** ChanServ sets mode: +o Bike
[19:22:18] *** Joins: cosimone (~user@93-44-186-135.ip98.fastwebnet.it)
[19:23:59] *** Joins: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca)
[19:31:10] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 240 seconds)
[19:41:39] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[19:44:27] *** Joins: ln43 (~ln43@user/ln43)
[19:45:13] *** Quits: lisp123 (~lisp123@45.86.202.65) (Ping timeout: 248 seconds)
[19:59:14] *** Quits: Bike (~Bike@204.84.244.11) (Quit: Connection closed)
[20:01:28] *** Joins: livoreno (~livoreno@user/notzmv)
[20:08:04] *** Joins: Guest29 (~Guest29@72.71.222.77)
[20:09:09] *** Joins: Bike (~Bike@204.84.244.11)
[20:09:09] *** ChanServ sets mode: +o Bike
[20:19:52] *** Quits: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca) (Ping timeout: 252 seconds)
[20:31:55] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[20:36:56] <borodust> hmm, is it possible to pin simple arrays in lispworks? i know i can do that for statically allocated arrays (that's clear from docs), but i've got error saying arrays must be "Statically allocated or pinned"
[20:37:00] <borodust> which got me curious
[20:37:21] <borodust> if there's a way to pin usual simple array instead of a statically allocated one
[20:49:28] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[20:50:29] *** Quits: pranavats (3fba1d1b34@jabberfr.org) (Remote host closed the connection)
[20:50:29] *** Quits: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) (Read error: Connection reset by peer)
[21:01:40] *** Joins: yitzi_ (~yitzi@173-27-106-188.client.mchsi.com)
[21:03:37] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Ping timeout: 248 seconds)
[21:14:18] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[21:15:25] *** Quits: yitzi_ (~yitzi@173-27-106-188.client.mchsi.com) (Ping timeout: 252 seconds)
[21:19:47] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[21:26:57] *** Joins: lisp123 (~lisp123@45.86.202.65)
[21:30:16] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[21:35:38] *** Joins: selwyn (~selwyn@user/selwyn)
[21:36:36] *** Quits: ln43 (~ln43@user/ln43) (Quit: Connection closed)
[21:45:43] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[21:57:09] *** Joins: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca)
[22:01:17] <jcowan> pjb: I make sure that the alarm is out of reach of the bed.
[22:11:14] *** Joins: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net)
[22:12:14] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[22:18:59] *** Joins: dilated_dinosaur (~dino@cpc1-bexl9-2-0-cust231.2-3.cable.virginm.net)
[22:19:00] *** Quits: VincentVega (~user@212.241.16.131) (Ping timeout: 250 seconds)
[22:19:49] *** Quits: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[22:23:55] <rain3> is it normal that compute-effective-slot-definition :around  is called when a method specialized on a superclass of the obj is invoked with the obj as the parameter ?
[22:27:50] <Guest29> Next time I'm feeling like lisp has been forgotten, I'll have to remind myself of REXX.  Searcing for some materials just now, most of the web sites are obsolete, and is not available in (relatively current) standard fedora repos.
[22:28:41] <Guest29> (I had a notion that it would be fun to write a lisp macro for rexx style 'PARSE ARG' constructs)
[22:30:20] *** Joins: Oladon (~olad@98.43.81.226)
[22:34:36] <Bike> rain3: not sure i follow what you're asking, but any around method applicable to the arguments is going to be run before any primary methods
[22:37:00] *** Quits: Bike (~Bike@204.84.244.11) (Quit: Connection closed)
[22:48:50] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[22:52:10] *** Quits: lisp123 (~lisp123@45.86.202.65) (Ping timeout: 240 seconds)
[22:52:35] <rain3> Bike: https://termbin.com/1v3s
[22:53:59] <rain3> I am doing some work with some meta classes but I don't understand why a normal method like m1 in that snippet, would make it call compute-slots which calls  compute-effective-slot-definition :around
[22:54:44] <rain3> why does it want to call UPDATE-CLASS
[23:05:11] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (Ping timeout: 244 seconds)
[23:14:18] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[23:18:40] *** Joins: Bike (~Bike@71.69.170.70)
[23:18:40] *** ChanServ sets mode: +o Bike
[23:20:33] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Quit: Leaving...)
[23:22:28] *** Quits: cosimone (~user@93-44-186-135.ip98.fastwebnet.it) (Ping timeout: 252 seconds)
[23:23:11] <rain3> Bike: https://termbin.com/  I don't understand why a normal method like m1 in snippet, would make it call update-class which calls compute-slots which calls  compute-effective-slot-definition :around
[23:23:17] <rain3> https://termbin.com/1v3s
[23:23:32] *** Joins: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f)
[23:25:42] <pjb> rain3: I don't know much about CLOS, but when you use metaclasses, don't you have to implement a method to make it possible/compatible with the superclass metaclass?
[23:29:37] <rain3> good question. I don't know. I only implemented compute-effective-slot-definition :around for the subclass' metaclass
[23:29:51] <lotuseater> something like (defclass metaclass1 (standard-class) ...) and (defmethod closer-mop:validate-superclass ((class metaclass1) (superclass standard-class)) t)
[23:30:34] <rain3> I have this one yes
[23:30:39] <lotuseater> good :)
[23:30:56] <rain3> it usually signals an error if it is not there
[23:31:17] <lotuseater> right
[23:31:53] <lotuseater> hm do you do anywhere a CHANGE-CLASS ?
[23:32:34] <rain3> no, that's the thing.. I only call a dumb m1 specialied on the superclass and it attempts to UPDATE-CLASS
[23:32:48] <rain3> no idea why
[23:34:10] <lotuseater> how do metaclass1 and metaclass2 look like?
[23:34:37] <Bike> wait, you mean _calling_ m1 results in this update-class? not _defining_ m1?
[23:34:53] <mfiano> What is the recommended lambda list parsing library?
[23:35:07] <rain3> calling it, ye
[23:35:09] <rain3> yes
[23:35:20] <rain3> metaclass2 is mm-metaclass from here https://github.com/danlentz/manardb/blob/master/src/mop.lisp
[23:36:19] <mfiano> rain3: are you danlentz on GitHub?
[23:36:23] <rain3> I am not
[23:36:25] <Bike> and you're actually doing (m1 *obj1*)? Not (m1 (make-instance ...))?
[23:36:31] <mfiano> Oh ok. I have been trying to contact them
[23:36:32] <pjb> mfiano: I use my own com.informatimago.common-lisp.lisp-sexp.source-form:parse-lambda-list ; but recently sicl got its very own implemented.
[23:36:49] <mfiano> pjb: Is that a module, and by what name if so?
[23:36:53] <rain3> I think I've come across this bug few years ago too . Now I am trying to make manardb more friendly , to allow inheritance of non-persistent slots from other classes , so that one can have both persistent and non-persistent
[23:37:17] <Bike> because calling make-instance can make all kinds of exciting things happen
[23:37:43] <rain3> as it is right now it doesn't easily mix with mixins . It kinda works, I've achieved what I wanted, except for this error
[23:38:41] <Bike> make-instance calls could definitely result in classes being "updated"
[23:38:50] *** Quits: Alfr (~Alfr@user/alfr) (Killed (sodium.libera.chat (Nickname regained by services)))
[23:38:54] *** Joins: Alfr (~Alfr@user/alfr)
[23:40:05] <rain3> *both persistent and non-persistent classes and slots mixed as we need
[23:41:14] <pjb> mfiano: clone http://github.com/informatimago/lisp in your favorite quicklisp or asdf place and then load the system  com.informatimago.common-lisp.lisp-sexp or com.informatimago.common-lisp or even com.informatimago
[23:41:32] <mfiano> pjb: I was asking about the name of the SICL module
[23:41:50] <pjb> I didn't fetch yet, so I don't know. Ask beach or in #sicl.
[23:41:52] <rain3> Bike: it's the method that does the nasty thing. not make-instance , make-instance is called beforehand and it works fine
[23:41:58] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:42:31] <Bike> That's kind of surprising. It looks like the class is being initialized
[23:42:43] <Bike> @mfiano: there's one in CST. I don't know if SICL is using that or its own right now https://github.com/s-expressionists/Concrete-Syntax-Tree
[23:42:56] <mfiano> Thanks
[23:43:14] <rain3> Bike: metaclass1 is something like an abstract class which doesn't do much initialization
[23:43:36] <rain3> and perhaps when it calls the method on that object it attempts to also initialize the instances of metaclass1
[23:44:09] <rain3> (just a random guess)
[23:44:18] <Bike> @mfiano: might be the old one in sicl https://github.com/robert-strandh/SICL/blob/master/Code/Cleavir/Code-utilities/lambda-list.lisp
[23:44:46] <mfiano> From the commits it is looking like the new lambda list parser is embedded into SICL as of current
[23:45:28] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[23:45:55] *** Joins: hendursaga (~weechat@user/hendursaga)
[23:46:41] <Bike> @rain3: this might be something specific to manardb's clos stuff. what the backtrace looks like it's doing is it's trying to figure out if the m1 method on number, which doesn't seem to be in your paste, is applicable. and that's going screwy somehow.
[23:47:53] <rain3> m1 is applicable to c1 . *obj* is an instance of c2 (a subclass of c1), so m1 is applicable to *obj*
[23:48:18] <Bike> no i mean somewhere else you have (defmethod m1 ((o number)) ...)
[23:48:31] <rain3> you are right, yes I have such a method
[23:48:55] <Bike> and it's trying to figure out if c1 is a subclass of number.
[23:49:04] <rain3> I don't think it is
[23:49:48] <rain3> it most probably (almost sure), isn't
[23:49:58] <Bike> isn't a subclass of number? i'm sure it isn't.
[23:50:18] <rain3> yeah
[23:50:43] <rain3> that number method is just for me to mock objects using simple numbers, we can ignore it
[23:51:17] <Bike> okay, wait, i think i get it, calling m1 means sbcl needs to finalize c1 in order to get c1's class precedence list in order to do dispatch
[23:51:28] <Bike> does m2 have any other methods on it?
[23:51:46] *** Quits: Alfr (~Alfr@user/alfr) (Read error: Connection reset by peer)
[23:51:53] <rain3> no, it doesn't
[23:52:26] <Bike> Okay, so then sbcl might be doing something simpler to dispatch it that doesn't need to know class precedence lists
[23:52:41] <Bike> although i guess since you're making an instance it should really be finalized... mmm....
[23:53:12] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[23:53:23] *** Joins: Alfr (~Alfr@user/alfr)
[23:53:32] <rain3> hmm maybe it isn't finalized, maybe I should test that
[23:53:59] <Bike> I guess this is just proximate cause anyway. The direct cause is that compute-effective-slot-definition is signaling an error.
[23:54:21] <rain3> well, it's messing the object up
[23:54:36] <Bike> What do you mean by that?
[23:54:48] <rain3> because that compute-effective-slot-definition is defined for metaclass2 not for metaclass1
[23:55:07] <rain3> and when it is invoked as if for metaclass1 , it will now know about some slots reader and writer functions
[23:55:30] <rain3> and the result is that the readers and writers for the slots in the object will be messed up
[23:55:33] <rain3> unbound
[23:55:34] <Bike> is metaclass2 not a subclass of metaclass1?
[23:55:47] *** Quits: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:55:57] <rain3> it is not, because metaclass2 is persistent to the disk and metaclass1 isn't
[23:56:40] <rain3> but metaclass1 means that if you inherit from it and you're of type instance-of-metaclass2, then all those slots that you inherited will be persistent .
[23:56:55] <rain3> (only those slots inherited from instances of instances of metaclass1)
[23:57:33] <Bike> and metaclass1 isn't a subclass of metaclass2?
[23:57:39] <rain3> it is not
[23:59:16] <Bike> wait, but c2 _is_ a metaclass2. so the metaclass2 method being invoked on it is normal.
[23:59:18] <Bike> right?
