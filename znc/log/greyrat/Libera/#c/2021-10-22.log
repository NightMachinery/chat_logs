[00:01:12] <razor[m]> Vs
[00:01:56] <razor[m]> Visooal stooodeo
[00:02:48] *** Quits: tiotags (~tiotags@user/tiotags) (Quit: Leaving)
[00:04:38] <fizzie> LTCD: Not anywhere in the macro definition, no. The one at the call site is sufficient.
[00:08:41] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 258 seconds)
[00:08:42] <fizzie> There's of course other alternatives too. For example, you can have a `#define DBG(x) (x)` instead, and then use it like `DBG(printf("foo\n"))`, that way it can be used for one-line conditionals that do something else than `printf` too.
[00:09:15] <LTCD> Wow, amazing, thanks so much man.
[00:10:35] <fizzie> (Or you could just arrange for DEBUG to be defined as either 0 or 1, and use `if (DEBUG) do_something();`, and rely on the compiler to completely rely any statements when that expands to `if (0) do_stuff();`.)
[00:11:08] *** Joins: rgrinberg (~textual@201.182.226.118)
[00:17:32] *** Quits: smlavine (~smlavine@sourcehut/user/smlavine) (Quit: nyaa~)
[00:17:35] *** Quits: V-T60 (~v@91.203.24.166) (Quit: Leaving.)
[00:17:52] *** Quits: hentai (~hentai@user/hentai) (Read error: Connection reset by peer)
[00:18:09] *** Joins: hentai (~hentai@2a01:e0a:a5c:a070:bf4b:d0ec:1d9e:8893)
[00:18:09] *** Quits: hentai (~hentai@2a01:e0a:a5c:a070:bf4b:d0ec:1d9e:8893) (Changing host)
[00:18:09] *** Joins: hentai (~hentai@user/hentai)
[00:19:36] *** Quits: jkl1337 (~jkl@user/jkl) (Quit: Gone.)
[00:20:37] *** Quits: mikoto-chan (~mikoto-ch@185.237.102.126) (Read error: Connection reset by peer)
[00:20:52] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[00:20:53] *** Quits: magla (~gelignite@55d47f25.access.ecotel.net) (Quit: Stay safe!)
[00:20:57] *** Joins: jkl (~jkl@user/jkl)
[00:23:30] *** Quits: LTCD (~LTCD@2a02:c7f:dd1c:b600:9d57:cb99:96bb:6b1) (Quit: Client closed)
[00:24:55] *** Joins: BSaboia (~bsaboia@187.19.138.198)
[00:26:05] *** Quits: Crescendo (~Crescendo@user/crescendo) (Read error: Connection reset by peer)
[00:27:01] *** Joins: ozoned (odoood@gateway/vpn/protonvpn/odoood)
[00:27:05] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Ping timeout: 258 seconds)
[00:27:05] *** Joins: Crescendo (~Crescendo@user/crescendo)
[00:27:39] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:29:11] *** Quits: odoood (~odoood@2601:c8:c003:a550::3) (Ping timeout: 264 seconds)
[00:29:26] *** Quits: serbest (~serbest@user/serbest) (Quit: Leaving)
[00:31:27] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[00:33:59] *** Quits: sysRPN (~sysRPN@097-101-210-085.res.spectrum.com) (Ping timeout: 258 seconds)
[00:35:18] *** Joins: subdelusional (~user@188.249.169.186)
[00:36:19] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 265 seconds)
[00:38:21] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::2612) (Quit: Konversation terminated!)
[00:40:57] <NRK[m]> hi, how does this check fix overflow? `size_t n = strlen(s) + 1; if (n && sizeof(char) > (size_t)-1/n)`
[00:41:32] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-848c-99f6-3ab2-978a.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:42:09] *** Quits: domve (~dom@user/domve) (Quit: ZNC - https://znc.in)
[00:42:19] *** Joins: domve (~dom@2605:6400:30:f922:1337::)
[00:42:19] *** Quits: domve (~dom@2605:6400:30:f922:1337::) (Changing host)
[00:42:19] *** Joins: domve (~dom@user/domve)
[00:47:37] *** Quits: ormaaj2 (~ormaaj2@user/ormaaj) (Ping timeout: 256 seconds)
[00:47:50] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[00:48:26] *** Joins: highrate (~presonic@111-22-237-24.gci.net)
[00:55:03] <fizzie> Sounds pretty bizarre. I don't think `n && sizeof(char) > (size_t)-1/n` does anything else than `n != 0`. Because `sizeof (char)` is by definition 1, so the right side of the && is just equivalent to `SIZE_MAX/n < 1`.
[00:55:21] *** Quits: zwr (~zwr@2804:d45:b966:fb00:ecc0:34ba:7ca0:1eda) (Remote host closed the connection)
[00:57:10] <NRK[m]> yeah, idk either.
[00:57:12] *** Joins: Crescendo (~Crescendo@user/crescendo)
[00:57:33] *** Quits: Akuli (~Akuli@87-94-108-97.bb.dnainternet.fi) (Quit: Leaving)
[00:57:47] *** Joins: pony (~ed@smol/hors)
[00:58:28] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[00:58:37] <NRK[m]> ,cc size_t n = SIZE_MAX + 1; if (n && 1 > SIZE_MAX/n) puts("overflow?");
[00:58:39] *** Joins: sysRPN (~sysRPN@097-101-210-085.res.spectrum.com)
[00:58:40] <candide> NRK[m]: no output: n = 0
[00:58:57] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Client Quit)
[00:59:17] <fizzie> SIZE_MAX + 1 is just 0. That's what SIZE_MAX is: the largest representable `size_t` value.
[00:59:17] <twkm> you are worried that strlen(s) == SIZE_MAX?
[00:59:33] <NRK[m]> oh, my bad
[00:59:42] <NRK[m]> ,cc size_t n = SIZE_MAX + 2; if (n && 1 > SIZE_MAX/n) puts("overflow?");
[00:59:43] <twkm> damn long string if so, even on the smallest of (conforming) systems.
[00:59:44] <candide> NRK[m]: no output: n = 1
[01:00:01] *** Quits: rgrinberg (~textual@201.182.226.118) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:00:03] <NRK[m]> twkm: im not. but someone is.
[01:00:19] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[01:00:24] <NRK[m]> was just curious how this is supposed to fix overflow
[01:00:30] <NRK[m]> cus i don't understand it
[01:00:59] *** Joins: Rounin (~david@84.212.130.215)
[01:01:03] <fizzie> I mean, fair enough, `n != 0` *is* a valid check for whether the `strlen(s) + 1` did "overflow" (strictly speaking wrapping around isn't called called overflow for unsigned types). But it's unlikely to be possible in practice, and the entire `sizeof(char) > (size_t)-1/n` side sounds like nonsense.
[01:01:58] <NRK[m]> yes, i think same. was wondering if there's some weird stuff going on that im not aware of
[01:03:34] *** Quits: ozoned (odoood@gateway/vpn/protonvpn/odoood) (Ping timeout: 260 seconds)
[01:04:01] *** Joins: Laurenceb (~Laurenceb@56.184.147.147.dyn.plus.net)
[01:06:25] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[01:06:49] <fizzie> I guess it makes *some* amount of sense if you substitute something like `wchar_t` and `wcslen` for `char` and `strlen`.
[01:07:33] <fizzie> Is that `if` statement by any chance followed by something that involves `n * sizeof (char)`? 
[01:08:20] *** Joins: Macuser (~Macuser@216.30.159.201)
[01:09:09] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[01:09:15] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 260 seconds)
[01:09:26] <NRK[m]> n is used for malloc(n)
[01:09:45] <fizzie> Not multiplied by `sizeof (char)`? That's surprising.
[01:10:09] <fizzie> Maybe it had one originally, and someone came along and removed it.
[01:11:05] <NRK[m]> why would that matter btw? `n * sizeof (char)` should just be n
[01:11:27] <fizzie> Yes, but I'm speculating on why they might have originally written that whole thing.
[01:12:05] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-848c-99f6-3ab2-978a.res6.spectrum.com)
[01:12:06] <NRK[m]> fizzie: opposite actually, the person who added the check also changed malloc(n) to malloc(sizeof(char) * n)
[01:12:18] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-848c-99f6-3ab2-978a.res6.spectrum.com) (Client Quit)
[01:12:29] <fizzie> Well, right, that makes sense if you're under the mistaken impression that `sizeof (char)` might be > 1.
[01:12:47] <fizzie> Because for the general case of some type T, it is more reasonable. The `sizeof (T) > SIZE_MAX/n` is then a check to ensure that a subsequent `malloc(n * sizeof (T))` will not overflow in the multiplication.
[01:13:50] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 260 seconds)
[01:13:59] <fizzie> (Add or remove a `not` from that sentence as appropriate, I don't want to think it all the way through.)
[01:14:06] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:14:16] *** Quits: AmR (~AmREiSa@156.199.106.121) (Quit: Konversation terminated!)
[01:14:40] <NRK[m]> aye, i see. but char will always be 1, so that makes no sense.
[01:15:06] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[01:16:19] *** Joins: Crescendo (~Crescendo@user/crescendo)
[01:17:03] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[01:17:11] *** Quits: larry87 (~quassel@2601:2c7:4280:17a0::b85e) (Ping timeout: 264 seconds)
[01:19:10] <sham1> Could be similar to using the malloc idiom with allocating char arrays, even though it's not necessarily needed. Makes stuff look more consistent
[01:24:40] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-848c-99f6-3ab2-978a.res6.spectrum.com)
[01:26:26] *** Joins: Darkcoal (~user@139.64.63.46)
[01:29:16] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[01:29:47] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[01:33:15] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[01:33:33] *** Quits: cheakoirccloud (uid293319@id-293319.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[01:35:30] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[01:41:34] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[01:41:50] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[01:45:26] *** Quits: plainoldcheese (~plainoldc@user/plainoldcheese) (Ping timeout: 265 seconds)
[01:47:34] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-848c-99f6-3ab2-978a.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:48:30] *** Joins: gafawww (~gafawww@92.40.203.113.threembb.co.uk)
[01:49:18] *** Quits: nyah (~nyah@bcdcb6e3.skybroadband.com) (Ping timeout: 260 seconds)
[01:50:08] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[01:50:21] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[01:52:11] *** Joins: chickfilla (~lastc@modemcable058.200-162-184.mc.videotron.ca)
[01:54:26] *** Quits: brelod (~me@90.244.150.142) (Quit: leaving)
[01:55:14] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[01:55:29] *** Quits: Laurenceb (~Laurenceb@56.184.147.147.dyn.plus.net) (Quit: Client closed)
[01:57:19] *** Quits: Darkcoal (~user@139.64.63.46) (Quit: Darkcoal)
[01:57:27] *** Joins: Darkcoal (~user@2001:16a2:7737:4e00:14d2:edff:fe09:c98f)
[01:57:35] *** Joins: smlavine (~smlavine@sourcehut/user/smlavine)
[02:00:00] *** Quits: alch (~alch@151.82.187.18) (Ping timeout: 260 seconds)
[02:01:48] *** Joins: alch (~alch@bo-18-131-144.service.infuturo.it)
[02:02:50] *** Quits: Yaknoti5 (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 260 seconds)
[02:04:05] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 260 seconds)
[02:05:19] *** Quits: pony (~ed@smol/hors) (Quit: WeeChat 3.0.1)
[02:14:22] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:14:47] *** Quits: sysRPN (~sysRPN@097-101-210-085.res.spectrum.com) (Ping timeout: 264 seconds)
[02:16:35] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.2)
[02:21:03] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-848c-99f6-3ab2-978a.res6.spectrum.com)
[02:22:18] *** Joins: sysRPN (~sysRPN@097-101-210-085.res.spectrum.com)
[02:22:51] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[02:24:30] *** Quits: Darkcoal (~user@2001:16a2:7737:4e00:14d2:edff:fe09:c98f) (Ping timeout: 260 seconds)
[02:24:33] *** Parts: ahlk (~user@2600:1700:31c0:3a10::43) (ERC (IRC client for Emacs 27.2))
[02:26:14] *** Joins: Darkcoal (~user@139.64.63.46)
[02:27:44] *** Joins: wroathe (~wroathe@173-160-115-161-Minnesota.hfc.comcastbusiness.net)
[02:27:44] *** Quits: wroathe (~wroathe@173-160-115-161-Minnesota.hfc.comcastbusiness.net) (Changing host)
[02:27:44] *** Joins: wroathe (~wroathe@user/wroathe)
[02:29:14] *** Joins: FlipFlop (~FlipFlop@user/fl1pfl0p)
[02:29:24] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[02:30:23] *** Joins: Macuser (~Macuser@216.30.159.201)
[02:30:26] *** Quits: hentai (~hentai@user/hentai) (Read error: Connection reset by peer)
[02:30:45] *** Joins: hentai (~hentai@2a01:e0a:a5c:a070:bf4b:d0ec:1d9e:8893)
[02:30:45] *** Quits: hentai (~hentai@2a01:e0a:a5c:a070:bf4b:d0ec:1d9e:8893) (Changing host)
[02:30:45] *** Joins: hentai (~hentai@user/hentai)
[02:33:49] *** Joins: pizdets (~pizdets@183.182.115.246)
[02:34:02] *** Quits: pizdets_ (~pizdets@183.182.114.214) (Ping timeout: 250 seconds)
[02:34:25] *** Quits: fcresende (~quassel@2804:431:cfc6:7dda:59ef:466c:27dd:1d0d) (Ping timeout: 260 seconds)
[02:34:49] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[02:35:37] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[02:37:37] *** Joins: fcresende (~quassel@2804:431:cfc6:7dda:59ef:466c:27dd:1d0d)
[02:39:43] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[02:43:10] *** Quits: kurahaupo_ (~kurahaupo@pa49-181-187-56.pa.nsw.optusnet.com.au) (Ping timeout: 260 seconds)
[02:52:22] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 258 seconds)
[02:53:04] *** Joins: Crescendo (~Crescendo@user/crescendo)
[02:56:00] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 260 seconds)
[02:56:28] *** Quits: The_Jag_ (~The_Jag@host-82-55-23-104.retail.telecomitalia.it) (Read error: Connection reset by peer)
[02:57:00] *** Joins: The_Jag (~The_Jag@host-82-55-23-104.retail.telecomitalia.it)
[02:57:19] *** Joins: Wulf (~Wulf@user/wulf)
[02:57:54] *** Joins: Laurenceb (~Laurenceb@56.184.147.147.dyn.plus.net)
[03:06:41] *** Quits: The_Jag (~The_Jag@host-82-55-23-104.retail.telecomitalia.it) (Read error: Connection reset by peer)
[03:07:05] *** Joins: The_Jag (~The_Jag@host-82-55-23-104.retail.telecomitalia.it)
[03:08:38] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 260 seconds)
[03:10:43] *** Quits: Crescendo (~Crescendo@user/crescendo) (Read error: Connection reset by peer)
[03:11:26] *** Joins: Crescendo (~Crescendo@user/crescendo)
[03:13:37] *** Joins: natechan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[03:13:56] *** Joins: phao (~phao@2804:d45:8e7a:de00:151a:3b36:fee5:e1d1)
[03:14:05] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[03:14:50] *** Quits: Lyude (~lyudess@pool-96-230-249-157.bstnma.fios.verizon.net) (Quit: WeeChat 3.2)
[03:15:04] *** Joins: Lyude (~lyudess@pool-96-230-249-157.bstnma.fios.verizon.net)
[03:17:48] *** Quits: brad_mssw|mac (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: Leaving)
[03:21:40] *** Quits: Darkcoal (~user@139.64.63.46) (Ping timeout: 260 seconds)
[03:22:50] *** Quits: The_Jag (~The_Jag@host-82-55-23-104.retail.telecomitalia.it) (Ping timeout: 260 seconds)
[03:23:43] *** Joins: Darkcoal (~user@51.15.187.53)
[03:23:59] *** Quits: coruja (~coruja@user/coruja) (Quit: ZNC 1.8.2 - https://znc.in)
[03:25:20] *** Joins: coruja (~coruja@user/coruja)
[03:28:19] *** Quits: hentai (~hentai@user/hentai) (Quit: Leaving)
[03:28:43] *** Joins: hentai (~hentai@2a01:e0a:a5c:a070:bf4b:d0ec:1d9e:8893)
[03:28:43] *** Quits: hentai (~hentai@2a01:e0a:a5c:a070:bf4b:d0ec:1d9e:8893) (Changing host)
[03:28:43] *** Joins: hentai (~hentai@user/hentai)
[03:30:30] *** Joins: HaMsTeRs (~Thunderbi@14-0-228-136.static.pccw-hkt.com)
[03:30:52] *** Joins: seninha (~seninha@user/seninha)
[03:31:27] *** Quits: hentai (~hentai@user/hentai) (Read error: Connection reset by peer)
[03:32:03] *** Quits: Laurenceb (~Laurenceb@56.184.147.147.dyn.plus.net) (Quit: Client closed)
[03:34:38] *** Joins: The_Jag (~The_Jag@host-87-16-43-28.retail.telecomitalia.it)
[03:35:11] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:35:42] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:36:27] *** Quits: boB_K7IQ (~boB_K7IQ@152.44.147.180) (Ping timeout: 258 seconds)
[03:37:35] *** Joins: hentai (~hentai@2a01:e0a:a5c:a070:bf4b:d0ec:1d9e:8893)
[03:37:35] *** Quits: hentai (~hentai@2a01:e0a:a5c:a070:bf4b:d0ec:1d9e:8893) (Changing host)
[03:37:35] *** Joins: hentai (~hentai@user/hentai)
[03:39:36] *** Quits: hentai (~hentai@user/hentai) (Read error: Connection reset by peer)
[03:39:43] *** Joins: juliopcrj (~juliopcrj@177.44.227.40)
[03:39:53] *** Joins: hentai (~hentai@2a01:e0a:a5c:a070:bf4b:d0ec:1d9e:8893)
[03:39:53] *** Quits: hentai (~hentai@2a01:e0a:a5c:a070:bf4b:d0ec:1d9e:8893) (Changing host)
[03:39:53] *** Joins: hentai (~hentai@user/hentai)
[03:40:12] *** Joins: rgrinberg (~textual@ip11-246-50-179.ct.co.cr)
[03:40:54] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: AA TOO NEE ZUBARALHADEEEEEEEEEEEED)
[03:43:56] *** Joins: jetchisel (jetchisel@user/jetchisel)
[03:45:09] *** Joins: Senicar0 (~Senicar@gateway/tor-sasl/senicar)
[03:45:17] *** Quits: juliopcrj (~juliopcrj@177.44.227.40) (Quit: Leaving)
[03:45:28] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[03:45:59] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 264 seconds)
[03:46:45] *** Lord_of_Life_ is now known as Lord_of_Life
[03:47:45] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[03:47:45] *** Quits: Senicar (~Senicar@gateway/tor-sasl/senicar) (Ping timeout: 276 seconds)
[03:47:46] *** Senicar0 is now known as Senicar
[03:47:55] *** Joins: aqua (~aqua@user/aqua)
[03:49:14] *** Quits: phao (~phao@2804:d45:8e7a:de00:151a:3b36:fee5:e1d1) (Quit: Leaving)
[03:49:26] *** Joins: Macuser (~Macuser@216.30.159.201)
[03:50:06] *** aqua is now known as kish`
[03:52:33] *** Quits: sysRPN (~sysRPN@097-101-210-085.res.spectrum.com) (Ping timeout: 258 seconds)
[03:53:13] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[03:56:56] *** Quits: Darkcoal (~user@51.15.187.53) (Read error: Connection reset by peer)
[03:57:23] *** Joins: chenqisu12 (~peiycae@183.217.203.91)
[03:58:56] <superboot> Does anyone have a good overview article explaining the relationships between the preprocessor, the compiler, the assembler, and the linker?
[03:59:56] <Feuermagier> Will fgets clear the entire stdin?
[04:00:01] *** Joins: Darkcoal (~user@139.64.63.46)
[04:00:56] <Feuermagier> superboot, that's multiple lectures and not an article
[04:01:38] <Feuermagier> preprocessor: prepares code before compilation
[04:01:49] <Feuermagier> compiler: translates code into machine language
[04:02:05] <Feuermagier> well, an executable format
[04:02:41] <Feuermagier> linker is responsible for adding libraries (so writes where the libraries you use in your project can be found)
[04:03:22] <Feuermagier> an assembler is like a compiler
[04:03:36] <Feuermagier> but instead of a high level language it takes assembly code
[04:04:09] <superboot> Ah, I see. Thanks for the over view. Very helpful.
[04:11:35] *** Quits: gafawww (~gafawww@92.40.203.113.threembb.co.uk) (Read error: Connection reset by peer)
[04:12:38] *** Quits: coruja (~coruja@user/coruja) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[04:12:45] <seninha> Is it acceptable if I comment my data structures more verbosely than I comment procedures?
[04:13:57] *** Joins: coruja (~coruja@user/coruja)
[04:16:15] <dave0> seninha: of course
[04:20:24] *** Quits: fcresende (~quassel@2804:431:cfc6:7dda:59ef:466c:27dd:1d0d) (Read error: Connection reset by peer)
[04:23:34] *** Quits: coruja (~coruja@user/coruja) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[04:24:14] *** Quits: random-nick (~random-ni@87.116.183.63) (Ping timeout: 260 seconds)
[04:28:45] *** Quits: anon16_ (~anon16_@user/anon16) (Ping timeout: 260 seconds)
[04:31:07] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[04:32:21] *** Joins: Quacc (~youbuntoe@user/quacc)
[04:32:22] *** Joins: siwica (~user@173-184-142-46.pool.kielnet.net)
[04:33:00] <siwica> In the readelf symbol table there are a bunch of symbols with no name. What is the meaning of those?
[04:36:34] *** Joins: coruja (~coruja@user/coruja)
[04:40:41] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[04:42:49] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[04:42:58] *** Quits: Quacc (~youbuntoe@user/quacc) (Quit: WeeChat 3.3)
[04:44:47] <fizzie> The one at index 0 is reserved but still exists physically for some reason; wouldn't know about others (my random executable doesn't have "a bunch", though there is a second one).
[04:48:00] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 260 seconds)
[04:51:01] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[04:54:06] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 260 seconds)
[04:55:23] *** Joins: ferdna (~ferdna@user/ferdna)
[04:59:06] <Feuermagier> \list
[05:01:26] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[05:02:46] *** Joins: zwr (~zwr@2804:d45:b966:fb00:c559:3de9:7a37:317a)
[05:03:54] *** Joins: The_Jag_ (~The_Jag@host-80-182-37-74.retail.telecomitalia.it)
[05:04:16] *** Quits: HaMsTeRs (~Thunderbi@14-0-228-136.static.pccw-hkt.com) (Quit: HaMsTeRs)
[05:06:40] *** Quits: The_Jag (~The_Jag@host-87-16-43-28.retail.telecomitalia.it) (Ping timeout: 260 seconds)
[05:06:54] *** Joins: semeion (~semeion@user/semeion)
[05:13:35] *** Quits: FlipFlop (~FlipFlop@user/fl1pfl0p) (Ping timeout: 264 seconds)
[05:17:18] *** Joins: sebag (~guest@91.245.82.2)
[05:21:10] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[05:23:14] *** Quits: b1101 (~b1101@pool-100-37-115-53.nycmny.fios.verizon.net) (Quit: b1101)
[05:24:45] *** Quits: Darkcoal (~user@139.64.63.46) (Ping timeout: 260 seconds)
[05:25:40] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[05:26:22] *** Joins: Darkcoal (~user@51.15.9.205)
[05:30:03] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[05:30:12] *** Quits: chickfilla (~lastc@modemcable058.200-162-184.mc.videotron.ca) (Remote host closed the connection)
[05:34:40] *** Quits: deavmi_ (~tbk@user/deavmi) (Ping timeout: 260 seconds)
[05:34:40] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 260 seconds)
[05:34:55] *** Joins: jetchisel (jetchisel@user/jetchisel)
[05:35:17] *** Joins: fcresende (~quassel@vps35015.publiccloud.com.br)
[05:36:40] *** Joins: deavmi (~tbk@user/deavmi)
[05:40:00] *** Quits: superboot (~agentgasm@user/superboot) (Quit: leaving)
[05:41:23] *** Joins: smeso (~smeso@user/smeso)
[05:43:57] *** Quits: Darkcoal (~user@51.15.9.205) (Read error: Connection reset by peer)
[05:46:55] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 260 seconds)
[05:49:17] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[05:49:22] *** Joins: pony (~ed@smol/hors)
[05:50:06] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 260 seconds)
[05:54:18] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[05:55:14] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 260 seconds)
[05:56:47] *** Quits: Bou (sid274843@user/bou) (Ping timeout: 264 seconds)
[05:56:52] *** Quits: kristjansson_ (sid126207@id-126207.tinside.irccloud.com) (Ping timeout: 252 seconds)
[05:58:31] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (Ping timeout: 252 seconds)
[05:58:31] *** Quits: KnownSyntax (sid233169@user/knownsyntax) (Ping timeout: 252 seconds)
[05:58:35] *** Quits: subvisor (sid502026@id-502026.helmsley.irccloud.com) (Ping timeout: 264 seconds)
[05:58:35] *** Quits: buhman (sid411355@user/buhman) (Ping timeout: 260 seconds)
[05:59:08] *** Joins: subvisor (sid502026@helmsley.irccloud.com)
[05:59:11] *** Joins: KnownSyntax (sid233169@user/knownsyntax)
[05:59:41] *** Joins: buhman (sid411355@user/buhman)
[05:59:45] *** Joins: kristjansson_ (sid126207@tinside.irccloud.com)
[05:59:48] *** Joins: sa (sid1055@tinside.irccloud.com)
[06:00:14] *** Joins: goepsilongo (~goepsilon@2603-7000-ab00-62ed-d88f-6b90-d971-4130.res6.spectrum.com)
[06:00:38] *** Quits: alch (~alch@bo-18-131-144.service.infuturo.it) (Ping timeout: 265 seconds)
[06:02:12] *** Joins: alch (~alch@151.82.183.89)
[06:07:35] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 264 seconds)
[06:08:22] *** Joins: dmaroo (~dhruv@2409:4070:460b:9408:8e30:2acf:1083:9872)
[06:08:53] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[06:12:26] *** Joins: Bou (sid274843@user/bou)
[06:14:42] *** Joins: mahmutov (~mahmutov@37.155.16.166)
[06:19:00] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 260 seconds)
[06:25:40] *** Quits: BSaboia (~bsaboia@187.19.138.198) (Quit: This computer has gone to sleep)
[06:33:12] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[06:33:57] *** Joins: kish` (~aqua@user/aqua)
[06:34:43] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[06:36:12] *** Quits: pony (~ed@smol/hors) (Quit: WeeChat 3.0.1)
[06:36:24] *** Joins: Viewday3 (~Viewday@user/viewday)
[06:37:47] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[06:37:47] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[06:37:47] *** Joins: wroathe (~wroathe@user/wroathe)
[06:38:09] *** Quits: Viewday (~Viewday@user/viewday) (Ping timeout: 258 seconds)
[06:38:09] *** Viewday3 is now known as Viewday
[06:40:09] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[06:41:02] *** Joins: pony (~ed@smol/hors)
[06:41:34] *** Quits: pony (~ed@smol/hors) (Client Quit)
[06:46:28] *** Joins: pnbeast (~pnbeast@2601:140:4280:3c90::1)
[06:47:24] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[06:50:29] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-848c-99f6-3ab2-978a.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[06:50:30] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 260 seconds)
[06:51:18] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:30a3:dea5:4d51:a903)
[07:00:38] *** Quits: vaio (~gary@user/ghost) (Remote host closed the connection)
[07:01:05] *** Joins: vaio (~gary@user/ghost)
[07:03:21] *** Joins: mrkz_c (uid503554@user/mrkz-c/x-7247691)
[07:03:56] *** Joins: pony (~ed@smol/hors)
[07:04:34] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[07:08:00] *** Quits: mahmutov (~mahmutov@37.155.16.166) (Ping timeout: 260 seconds)
[07:11:52] *** Joins: pucara (~i@host77.181-14-159.telecom.net.ar)
[07:11:53] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[07:16:50] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b015:11a3:960e:c4d4:600a)
[07:19:44] *** Quits: goepsilongo (~goepsilon@2603-7000-ab00-62ed-d88f-6b90-d971-4130.res6.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[07:24:28] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[07:26:01] *** Quits: davros (~davros@host86-185-99-252.range86-185.btcentralplus.com) (Remote host closed the connection)
[07:27:58] *** Joins: jmiehe1 (~Thunderbi@user/jmiehe)
[07:29:35] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Ping timeout: 260 seconds)
[07:29:35] *** jmiehe1 is now known as jmiehe
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:41:15] *** Quits: reset (~reset@user/reset) (Quit: reset)
[07:42:57] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[07:43:55] *** Joins: Sadale (~Sadale@user/sadale)
[07:47:32] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[07:51:10] *** Quits: brad_mssw (~bhouse@2601:344:4100:b490:30a3:dea5:4d51:a903) (Quit: This computer has gone to sleep)
[07:55:51] *** Joins: no-n (~ed@smol/hors)
[07:56:23] *** Quits: pony (~ed@smol/hors) (Quit: WeeChat 3.3)
[07:58:02] *** Joins: jbauer (~jbauer@146.71.11.98)
[08:02:03] *** Joins: pony (~ed@smol/hors)
[08:03:10] *** Quits: no-n (~ed@smol/hors) (Quit: WeeChat 3.0.1)
[08:04:20] *** Joins: reumeth (~reumeth@user/reumeth)
[08:04:53] *** Quits: puke (~puke@user/puke) (Quit: puke)
[08:06:34] *** Joins: mikoto-chan (~mikoto-ch@185.237.102.125)
[08:10:25] *** Quits: ntwk (~ntwk@user/ntwk) (Ping timeout: 260 seconds)
[08:10:31] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 252 seconds)
[08:14:13] *** Joins: ntwk (~ntwk@user/ntwk)
[08:18:40] *** Quits: stilbruch1 (~stilbruch@157.245.122.124) (Quit: goodbye)
[08:19:30] *** Joins: puke (~brrrrrrr@user/puke)
[08:19:34] *** Joins: stilbruch (~stilbruch@157.245.122.124)
[08:19:47] *** Quits: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net) (Quit: Leaving)
[08:20:19] *** Joins: BSaboia (~bsaboia@187.19.138.198)
[08:22:36] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[08:22:54] *** Quits: BSaboia (~bsaboia@187.19.138.198) (Client Quit)
[08:23:08] *** Quits: stilbruch (~stilbruch@157.245.122.124) (Client Quit)
[08:23:10] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[08:23:32] *** Joins: stilbruch (~stilbruch@157.245.122.124)
[08:24:09] *** Joins: BSaboia (~bsaboia@187.19.138.198)
[08:24:22] *** Joins: lompik (~lompik@user/lompik)
[08:24:29] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.3)
[08:25:48] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[08:26:13] *** Quits: chenqisu12 (~peiycae@183.217.203.91) (Quit: Leaving)
[08:26:22] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:26:58] *** Joins: V-T60 (~v@91.203.24.166)
[08:30:10] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Ping timeout: 260 seconds)
[08:31:56] *** Quits: smlavine (~smlavine@sourcehut/user/smlavine) (Quit: nyaa~)
[08:32:02] *** Quits: segnior (segnior@user/segnior) (Ping timeout: 260 seconds)
[08:32:27] *** Quits: stilbruch (~stilbruch@157.245.122.124) (Quit: goodbye)
[08:36:16] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[08:36:42] *** Joins: sysRPN (~sysRPN@097-101-210-085.res.spectrum.com)
[08:36:47] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[08:39:53] *** Joins: wroathe (~wroathe@user/wroathe)
[08:44:38] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[08:45:46] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[08:48:00] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:48:46] *** Quits: V-T60 (~v@91.203.24.166) (Quit: Leaving.)
[08:49:30] *** Joins: larry87 (~quassel@98.40.245.193)
[08:49:50] *** Joins: cfel (~cfel@104.167.156.180)
[08:53:41] *** Joins: plainoldcheese (~plainoldc@user/plainoldcheese)
[08:55:57] *** Quits: BSaboia (~bsaboia@187.19.138.198) (Quit: This computer has gone to sleep)
[08:57:36] *** Joins: imp (~imp@192-141-191-231.alternativaip.net.br)
[08:59:07] *** Quits: plainoldcheese (~plainoldc@user/plainoldcheese) (Quit: WeeChat 3.3)
[08:59:58] *** Quits: uniquepointer (~uniquepoi@190.218.240.164) (Remote host closed the connection)
[09:04:03] *** Quits: sysRPN (~sysRPN@097-101-210-085.res.spectrum.com) (Remote host closed the connection)
[09:04:22] *** Quits: larry87 (~quassel@98.40.245.193) (Remote host closed the connection)
[09:06:15] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 276 seconds)
[09:07:35] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 264 seconds)
[09:08:08] *** Quits: cfel (~cfel@104.167.156.180) (Quit: Lost terminal)
[09:08:14] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[09:11:27] *** Quits: gxt_ (~gxt@gateway/tor-sasl/gxt) (Ping timeout: 276 seconds)
[09:12:47] *** Joins: gxt_ (~gxt@gateway/tor-sasl/gxt)
[09:15:30] *** Quits: mikoto-chan (~mikoto-ch@185.237.102.125) (Quit: mikoto-chan)
[09:16:20] *** Joins: gatty (~gatty@2404:4408:4429:bf00:9461:d416:6c64:892a)
[09:20:52] *** Joins: uniquepointer (~uniquepoi@190.218.240.164)
[09:21:52] *** Quits: rgrinberg (~textual@ip11-246-50-179.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:22:30] *** Quits: gxt_ (~gxt@gateway/tor-sasl/gxt) (Ping timeout: 276 seconds)
[09:23:06] *** Joins: gxt_ (~gxt@gateway/tor-sasl/gxt)
[09:24:20] *** Quits: ckdCreations (~ckdCreati@147.55.133.137) (Read error: Connection reset by peer)
[09:24:41] *** Joins: ckdCreations (~ckdCreati@147.55.133.138)
[09:29:54] *** Quits: blinky42 (~quassel@user/blinky42) (Ping timeout: 260 seconds)
[09:31:15] *** Joins: blinky42 (~quassel@jabber.blinkylight.net)
[09:31:15] *** Quits: blinky42 (~quassel@jabber.blinkylight.net) (Changing host)
[09:31:15] *** Joins: blinky42 (~quassel@user/blinky42)
[09:36:09] *** Quits: gxt_ (~gxt@gateway/tor-sasl/gxt) (Ping timeout: 276 seconds)
[09:36:10] *** Quits: fossforus (~stan@99-173-128-32.lightspeed.rlghnc.sbcglobal.net) (Ping timeout: 260 seconds)
[09:37:44] *** Joins: rgrinberg (~textual@ip152-195-159-186.ct.co.cr)
[09:39:11] *** Joins: gxt_ (~gxt@gateway/tor-sasl/gxt)
[09:41:01] *** Joins: Rounin (~david@84.212.130.215)
[09:42:43] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[09:45:44] *** Joins: serbest (~serbest@user/serbest)
[09:52:05] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:57:05] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[09:57:28] *** Quits: alch (~alch@151.82.183.89) (Read error: Connection reset by peer)
[09:57:56] *** Joins: larry87 (~quassel@98.40.245.193)
[09:58:15] *** Joins: larry87_ (~quassel@98.40.245.193)
[09:58:23] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[09:58:35] *** Quits: larry87_ (~quassel@98.40.245.193) (Client Quit)
[09:58:46] *** Quits: larry87 (~quassel@98.40.245.193) (Client Quit)
[09:59:18] *** Joins: larry87 (~quassel@98.40.245.193)
[09:59:24] *** Quits: serbest (~serbest@user/serbest) (Quit: Leaving)
[09:59:59] *** Joins: ckeshav (~keshavcha@103.66.50.47)
[10:00:54] *** Quits: larry87 (~quassel@98.40.245.193) (Client Quit)
[10:01:09] *** Quits: soapsudsxx (~soapsudsx@209.221.40.137) (Remote host closed the connection)
[10:01:19] *** Joins: larry87 (~quassel@98.40.245.193)
[10:01:35] *** Joins: larry87_ (~quassel@98.40.245.193)
[10:02:21] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[10:02:37] *** Joins: alch (~alch@bo-18-148-237.service.infuturo.it)
[10:02:44] *** Joins: de-facto (~de-facto@user/de-facto)
[10:03:03] *** Quits: mrkz_c (uid503554@user/mrkz-c/x-7247691) (Quit: Connection closed for inactivity)
[10:04:07] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:04:16] *** Quits: malloy (~jimery@116.30.223.211) (Ping timeout: 250 seconds)
[10:04:34] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:04:46] <razor[m]> why does this happen ^^^^^
[10:06:30] *** Joins: malloy (~jimery@116.30.223.211)
[10:11:00] *** ckeshav is now known as ckeshav_
[10:12:04] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[10:12:39] *** ckeshav_ is now known as ckeshav__
[10:13:10] *** Quits: larry87_ (~quassel@98.40.245.193) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[10:13:46] *** ckeshav__ is now known as ckeshav
[10:14:14] <pnbeast> ckeshav, do you have any more nicks?
[10:16:11] *** Quits: ckeshav (~keshavcha@103.66.50.47) (Changing host)
[10:16:11] *** Joins: ckeshav (~keshavcha@user/ckeshav)
[10:22:16] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[10:23:34] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 260 seconds)
[10:24:51] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[10:27:30] *** Quits: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 260 seconds)
[10:29:24] *** Quits: ckeshav (~keshavcha@user/ckeshav) (Quit: Leaving)
[10:29:50] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 260 seconds)
[10:30:27] *** Joins: ckeshav (~keshavcha@103.66.50.47)
[10:31:08] *** Quits: ckeshav (~keshavcha@103.66.50.47) (Changing host)
[10:31:08] *** Joins: ckeshav (~keshavcha@user/ckeshav)
[10:31:11] *** Joins: mrkz_c (uid503554@user/mrkz-c/x-7247691)
[10:32:14] *** Quits: ckeshav (~keshavcha@user/ckeshav) (Client Quit)
[10:33:35] *** Joins: ckeshav (~keshavcha@103.66.50.47)
[10:33:47] *** Quits: rgrinberg (~textual@ip152-195-159-186.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:39:33] *** Quits: ckeshav (~keshavcha@103.66.50.47) (Quit: Leaving)
[10:40:15] *** Joins: ckeshav (~keshavcha@103.66.50.47)
[10:41:20] *** Joins: V-T60 (~v@host-86-111-90-227.566f.la.net.ua)
[10:43:09] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[10:43:26] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[10:43:58] *** Parts: mrkz_c (uid503554@user/mrkz-c/x-7247691) ()
[10:44:29] *** Quits: ckeshav (~keshavcha@103.66.50.47) (Changing host)
[10:44:29] *** Joins: ckeshav (~keshavcha@user/ckeshav)
[10:47:45] *** Parts: ckeshav (~keshavcha@user/ckeshav) (Leaving)
[10:49:38] *** Joins: arinov (~arinov@213.194.126.155)
[10:51:29] *** Joins: plainoldcheese (~plainoldc@user/plainoldcheese)
[10:53:04] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[10:53:23] *** Joins: larry87_ (~quassel@98.40.245.193)
[10:53:37] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Client Quit)
[10:54:46] *** Joins: ckeshav (~keshavcha@103.66.50.47)
[10:56:16] *** Quits: ckeshav (~keshavcha@103.66.50.47) (Changing host)
[10:56:16] *** Joins: ckeshav (~keshavcha@user/ckeshav)
[11:01:44] *** Quits: pnbeast (~pnbeast@2601:140:4280:3c90::1) (Quit: WeeChat 2.7.1)
[11:02:44] *** Joins: larry87__ (~quassel@98.40.245.193)
[11:03:16] *** Joins: larry87___ (~quassel@98.40.245.193)
[11:03:35] *** Joins: dOhtem (uid524096@id-524096.tinside.irccloud.com)
[11:04:12] *** Joins: mrig (~AdiIRC@user/mrig)
[11:04:57] *** Quits: dOhtem (uid524096@id-524096.tinside.irccloud.com) (Changing host)
[11:04:57] *** Joins: dOhtem (uid524096@user/dohtem)
[11:07:15] *** Quits: larry87_ (~quassel@98.40.245.193) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[11:07:43] *** Parts: go4godvin (~go4godvin@user/go4godvin) ()
[11:12:16] *** Quits: pucara (~i@host77.181-14-159.telecom.net.ar) (Quit: Lost terminal)
[11:13:24] *** Quits: ckeshav (~keshavcha@user/ckeshav) (Quit: Leaving)
[11:13:49] *** Joins: slidercrank (~slidercra@user/slidercrank)
[11:14:50] *** Joins: brelod (~me@90.244.150.142)
[11:15:36] *** Joins: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104)
[11:15:59] *** Joins: larry87_ (~quassel@98.40.245.193)
[11:16:56] *** Joins: varaindemian (uid73404@id-73404.ilkley.irccloud.com)
[11:17:40] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Ping timeout: 260 seconds)
[11:21:54] *** Quits: larry87_ (~quassel@98.40.245.193) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[11:22:20] *** Quits: m4v (~znc@ubuntu/member/m4v) (Ping timeout: 260 seconds)
[11:23:25] *** Quits: Redfoxmoon (~Red@97.109-247-81.customer.lyse.net) (Read error: No route to host)
[11:23:40] *** Joins: aradesh (~aradesh@user/aradesh)
[11:25:27] *** Quits: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104) (Quit: Connection closed)
[11:26:00] *** Joins: m4v (~znc@ubuntu/member/m4v)
[11:28:36] *** Joins: Red (~Red@97.109-247-81.customer.lyse.net)
[11:32:45] *** Joins: _gabriele (~gabriele@user/gabriele)
[11:42:27] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[11:43:02] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Client Quit)
[11:44:24] *** Quits: gatty (~gatty@2404:4408:4429:bf00:9461:d416:6c64:892a) (Quit: Client closed)
[11:47:56] *** Joins: LucaTM (~LucaTM@user/lucatm)
[11:49:36] *** Quits: larry87 (~quassel@98.40.245.193) (Remote host closed the connection)
[11:49:36] *** Quits: larry87___ (~quassel@98.40.245.193) (Remote host closed the connection)
[11:49:36] *** Quits: larry87__ (~quassel@98.40.245.193) (Remote host closed the connection)
[11:51:10] *** Quits: V-T60 (~v@host-86-111-90-227.566f.la.net.ua) (Quit: Leaving.)
[11:55:03] *** Joins: earnestly (~earnest@user/earnestly)
[11:55:40] *** Joins: Yaknoti5 (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[11:56:17] *** Quits: Raguile (~Raguile@user/raguile) (Ping timeout: 260 seconds)
[11:56:26] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 260 seconds)
[12:00:06] *** Quits: _gabriele (~gabriele@user/gabriele) (Quit: Leaving)
[12:03:50] *** Joins: op0x0f05 (uid512716@id-512716.tinside.irccloud.com)
[12:05:39] *** Joins: plastico (~plastico@neomutt/plastico)
[12:14:34] *** Quits: baltazar (~baltazar@178-164-254-238.pool.digikabel.hu) (Ping timeout: 268 seconds)
[12:16:19] *** Joins: baltazar (~baltazar@84-236-16-46.pool.digikabel.hu)
[12:19:09] *** Joins: de-facto_ (~de-facto@user/de-facto)
[12:19:30] *** Joins: nehsou^ (~nehsou@wsip-68-227-92-38.mc.at.cox.net)
[12:19:57] *** Quits: de-facto (~de-facto@user/de-facto) (Ping timeout: 276 seconds)
[12:19:58] *** Joins: V-T60 (~v@host-86-111-90-227.566f.la.net.ua)
[12:22:03] *** de-facto_ is now known as de-facto
[12:25:34] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b015:11a3:960e:c4d4:600a) (Quit: Leaving)
[12:30:46] *** Quits: V-T60 (~v@host-86-111-90-227.566f.la.net.ua) (Quit: Leaving.)
[12:31:10] *** Quits: BUSY (~BUSY@user/busy) (Ping timeout: 265 seconds)
[12:32:08] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[12:32:43] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Client Quit)
[12:38:50] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[12:39:12] *** Joins: NEYi (~NEYi@109.251.216.38)
[12:40:00] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[12:40:17] *** Joins: slidercrank (~slidercra@user/slidercrank)
[12:40:23] *** Joins: nick86 (~nick@host-37-191-190-173.lynet.no)
[12:41:27] <nick86> hello. i am trying to build a program that uses likely(...), but it complains: undefined reference to likely. i can't find much information about this, but it seems like it is usually a macro that is used to optimize branching
[12:41:35] *** Joins: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:3c0f:41c:39e8:ecdc)
[12:41:36] <nick86> any idea where i should be looking for this?
[12:45:12] <HisShadow> nick86: pretty sure they are linux kernel specific macros
[12:45:17] <DPA> https://stackoverflow.com/questions/30130930/is-there-a-compiler-hint-for-gcc-to-force-branch-prediction-to-always-go-a-certa
[12:45:18] <DPA> It looks libe C++20 should have an attribute for it [[likely]], c23 also got some such attributes, but seamingly not this one.
[12:45:48] <nick86> i found the macro in include/linux/compiler.h
[12:45:58] <grawity> it's indeed usually a macro around __builtin_expect that each project just copypastes
[12:46:09] <grawity> e.g. https://github.com/systemd/systemd/blob/main/src/fundamental/macro-fundamental.h#L19-L20
[12:48:21] *** Joins: karakedi (~eAC53C340@user/karakedi)
[12:50:32] *** Joins: clamiax (~clamiax@net-93-149-158-199.cust.vodafonedsl.it)
[12:50:36] <clamiax> hi
[12:50:41] <markand> would be handy if attributes got into C before noreturn
[12:50:49] <markand> C++ has [[noreturn]] but C has _Noreturn
[12:50:50] <markand> ¯\_(ツ)_/¯
[12:53:04] <DPA> C has noreturn, it's defined in stdnoreturn.h which defines noreturn as _Noreturn
[12:54:26] <nick86> grawity: aah, okay, so it must have gotten lost somewhere along the way in this project
[12:56:07] <grawity> doesn't look like there is a "standard" one, but the exact name 'likely' could've been brought in from e.g. procps.h if the project ever used that, or something similar https://paste.rs/j6Y
[12:56:22] <grawity> s/brought in/leaked into your project from/
[12:57:05] *** Joins: sysctl (~sysctl@88.215.77.255)
[12:57:19] <DPA> There is never a situation where likely is absolutely necessary. Removing it is always safe. I didn't have to bother with it yet, and that's been fine.
[12:58:28] <grawity> yeah apparently gcc agrees with that https://github.com/isc-projects/bind9/commit/e603983ec9f9809a6d4b446f84c50f29b9355e2c
[12:58:30] <candide> Title of grawity's link: Stop providing branch prediction information · isc-projects/bind9@e603983 · GitHub
[12:58:42] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[12:59:02] *** Joins: tejr (~tejr@user/tejr)
[12:59:17] <nick86> grawity: it seems like everything in need is in include/linux/compiler.h, but i need to figure out how to include that
[13:00:31] <grawity> usually you don't – although it's distributed as part of linux-headers, that's only for building kernel modules, not userspace code, so it's not in the usual include paths nor does it have a .pc or anything
[13:01:18] <nick86> aaah, alright. thank you... hmm
[13:01:55] <grawity> just copypaste the two macros, every project does that
[13:02:35] <nick86> i tried that, but then it complains that i have undefined reference to __branch_check
[13:02:56] <nick86> so i guess i should copy that as well
[13:03:21] <grawity> you're copying the unnecessarily complex one from ftrace
[13:03:39] <grawity> the normal one is a bit lower, under #else
[13:04:44] *** Joins: V-T60 (~v@host-86-111-90-227.566f.la.net.ua)
[13:05:09] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[13:05:09] <grawity> (sorry, by "unnecessarily complex" I mean that it's a specialized version for kernel's ftrace subsystem – you want the "plain" one)
[13:05:22] <nick86> grawity: ooh, i see it now. thanks a lot
[13:09:13] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[13:17:13] *** Quits: subdelusional (~user@188.249.169.186) (Quit: ERC (IRC client for Emacs 27.2))
[13:18:24] *** Quits: plainoldcheese (~plainoldc@user/plainoldcheese) (Quit: WeeChat 3.3)
[13:20:16] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[13:23:14] *** Quits: puke (~brrrrrrr@user/puke) ()
[13:24:33] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:29:06] <clamiax> What's the best way to add SSL/TLS support to my application, leaving optional clear-text support available? I'm overwhelmed by too much informations abouth OpenSSL, GNU TLS, etc.
[13:30:16] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[13:31:01] *** Joins: csrf (~csrf@user/csrf)
[13:33:50] *** Joins: Arthuria (~Arthuria@user/arthuria)
[13:37:54] *** Quits: malloy (~jimery@116.30.223.211) (Ping timeout: 250 seconds)
[13:38:26] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b015:11a3:960e:c4d4:600a)
[13:39:21] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[13:40:51] *** Joins: malloy (~jimery@116.30.223.211)
[13:43:55] <clarity> clamiax: There's no best
[13:44:32] <slidercrank> clamiax, are you German? Germans like writing "informations" while this word is uncountable in English
[13:44:39] *** Joins: ckeshav (~keshavcha@user/ckeshav)
[13:45:33] *** Joins: random-nick (~random-ni@87.116.183.63)
[13:46:19] <slidercrank> ah, Italian. In Italian it can also be countable - informazioni
[13:49:02] <HisShadow> clamiax: what's the clear-text protocol?
[13:50:30] *** Joins: puke (~puke@user/puke)
[13:50:39] <Bou> "information (n.); A statement of criminal activity brought before a judge or magistrate", do that more than once and you have several informations
[13:51:07] *** Quits: V-T60 (~v@host-86-111-90-227.566f.la.net.ua) (Remote host closed the connection)
[13:51:17] *** Quits: nick86 (~nick@host-37-191-190-173.lynet.no) (Quit: Client closed)
[13:51:33] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::2612)
[13:53:57] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[13:56:31] <clamiax> clarity: Well, the simplest then
[13:56:39] *** Joins: xa0s (xa0s@sdf.org)
[13:57:17] <clamiax> slidercrank: good to know, thanks. I'm not German anyway.
[13:57:33] *** Quits: alch (~alch@bo-18-148-237.service.infuturo.it) (Read error: Connection reset by peer)
[13:57:45] <clamiax> HisShadow: I mean unencrypted data transfer
[13:58:04] <slidercrank> clamiax, are you writing an IRC bot?
[13:59:25] <clamiax> slidercrank: no, I need to make HTTPS requests. I will eventually add TLS support to my IRC client.
[14:00:06] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 265 seconds)
[14:01:14] <HisShadow> clamiax: if you need to make https requests from C, you should probably use libcurl
[14:01:16] <clamiax> slidercrank: yes, we have plural form for information
[14:01:47] <clamiax> HisShadow: I'm aware of it but it's so simple to make an HTTP request which I don't really want to include whole libcurl.
[14:01:58] *** Joins: alch (~alch@ca-18-203-240.service.infuturo.it)
[14:02:46] <clamiax> The problem raised with the need to use SSL
[14:03:21] <slidercrank> clamiax, I'm writing an IRC bot and I'm also thinking what to use: tls or openssl :)
[14:04:40] <clamiax> slidercrank: libssl are not perfect but easy to use. The issue is when you want to support both clear text and encrypted transfers.
[14:05:00] *** Joins: segnior (~segnior@user/segnior)
[14:06:06] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[14:06:17] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Client Quit)
[14:06:45] *** Joins: nitro_ (~nitro@c-73-165-183-88.hsd1.pa.comcast.net)
[14:09:10] *** Quits: nitro__ (~nitro@c-73-165-183-88.hsd1.pa.comcast.net) (Ping timeout: 260 seconds)
[14:09:45] *** Quits: segnior (~segnior@user/segnior) (Ping timeout: 260 seconds)
[14:10:10] *** Joins: X-Scale` (~ARM@50.77.166.178.rev.vodafone.pt)
[14:11:15] *** Quits: X-Scale (~ARM@46.50.2.19) (Ping timeout: 258 seconds)
[14:12:02] <sham1> I'd use a wrapper API for sending and receiving data, and then you wouldn't need to worry if it's internally using TLS or not, or even if it's upgrading the connection to be TLS
[14:12:06] *** Quits: imp (~imp@192-141-191-231.alternativaip.net.br) (Quit: imp)
[14:12:22] *** X-Scale` is now known as X-Scale
[14:12:29] <sham1> Instead of working with bare sockets or OpenSSL buffer objects or whatever
[14:14:50] <sham1> TLS is weird, at least if you want to be non-blocking, since TLS might want to read from a socket when you want to write and write when you want to read, because you could get a TLS re-negotiation at any time
[14:15:02] *** Joins: battousai (~i.am@177.156.122.167)
[14:15:13] *** Joins: subdelusional (~user@188.249.169.186)
[14:16:25] <subdelusional> hello, can someone review my code? I'm a complete beginner that just started learning the C programming language
[14:17:31] <subdelusional> this is a simple implementation of cat https://bpa.st/OX5A
[14:18:13] <subdelusional> and this is a simple implementation of ls https://bpa.st/4L5A
[14:19:19] <clarity> clamiax: Simplest is probably to use a library or external program that does it all for you and your application knows nothing about ssl
[14:19:35] <clamiax> sham1: I agree, in fact I think that's a library I will going to write.
[14:21:11] <trenka> subdelusional: so you first use argv[1] and then check it for NULL
[14:22:51] <clamiax> clarity: that's only matter to use SSL_read()/SSL_write() instead of read()/write() for a TLS-enabled socket. Then I can just write a wrapped_send() and wrapped_recv() myself and I'm done.
[14:23:29] <grawity> hmm technically would OpenSSL allow you to use the same SSL_read() on a non-TLS-enabled "BIO_socket" or whatever it calls that?
[14:24:10] <clamiax> grawity: I don't think so because it handle TLS handshake, may also call TLS_connect() if needed, and many more.
[14:24:13] <slidercrank> trenka, and it's not wrong.
[14:24:24] <Bou> backwards as it is, that could work if the `if (argv[1]==NULL)` block had a return in it
[14:26:56] *** Quits: malloy (~jimery@116.30.223.211) (Quit: WeeChat 3.0)
[14:30:18] *** Quits: Elladan (~elladan@user/elladan) (Quit: ZNC - http://znc.in)
[14:30:24] *** Joins: das (~das@user/das)
[14:30:42] <das> hello, i'm wondering why i'm getting DT_UNKNOWN when doing readdir() on a loop device/mounted ISO? for both files and folders
[14:31:10] *** Joins: serbest (~serbest@user/serbest)
[14:32:17] *** Joins: Elladan (~elladan@user/elladan)
[14:33:28] <omegatron> man 3 readdir   might help
[14:35:18] <das> it does state that some FS do not support it, what's the alternative if 0 is returned? lstat?
[14:35:39] <omegatron> what are you trying to do?
[14:35:48] *** Joins: semeion (~semeion@user/semeion)
[14:36:53] <slidercrank> subdelusional, the code works but it's written a bit unexpectedly. Normally you first check the number of arguments (argc). if it's "1" then you read from stdin, otherwise you open a file (argv[1]) and on success you read from it. you can make it faster by reading by lines instead of one character at a time. You can further improve the code by using common code for reading a source. After all the only 
[14:36:53] <slidercrank> difference is the source stdin or file (you can assing f_ptr = stdin if there is no file. Thus the code will be the same   while ((c = fgetc(f_ptr)) != EOF)   putchar(c);   (or fgets or getline)
[14:37:24] <das> omegatron: parsing a filesystem file by file, https://github.com/gquere/ngp2/blob/master/src/search.c#L159
[14:38:38] *** Joins: X-Scale` (~ARM@83.223.233.104)
[14:38:40] <omegatron> ah yes, parsing a filesystem, so much I could assume ... I mean, what kind of information do you need at some point for what? perhaps it's simply not available
[14:39:33] <das> well if it's a folder then recursively call self, if it's a file then open/read
[14:40:13] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 265 seconds)
[14:40:44] <das> based on readdir()'s return; so I'm assuming that's it's normal that I get 0 for some filesystems and have to handle this case some other way, possibly with lstat instead of readdir
[14:41:11] <omegatron> ok, so you have two options: either you completely ignore filesystem entries which yield DT_UNKNOWN or you treat those which yield DT_DIR as directory and everything else as a file (= non-recursing path)
[14:41:23] *** X-Scale` is now known as X-Scale
[14:41:51] <das> can't do first, as this currently creates false negatives in my tool
[14:42:23] *** Joins: cadmio (~cadmio@151.25.149.251)
[14:42:27] <cadmio> Hello
[14:42:31] <cadmio> there's something wrong with this function https://paste.gnome.org/p1djkqfmd I cannot remove tags
[14:42:41] <das> also i don't get DT_DIR for directories on the loop device
[14:43:07] <das> I'll try using lstat if readdir "fails"
[14:43:26] *** Quits: op0x0f05 (uid512716@id-512716.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[14:44:59] *** Quits: dld (~davidlowr@2601:197:600:1210:5c78:4bcc:82fe:593c) (Ping timeout: 258 seconds)
[14:46:11] *** Joins: seninha (~seninha@user/seninha)
[14:46:26] <omegatron> das: you might check the source code of VLC for example, which is capable to read mounted iso images which are dvd copies, how they iterate over a loop device
[14:46:36] <omegatron> (or any other software which does similar things)
[14:47:49] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[14:50:25] *** Joins: pulse (~pulse@user/pulse)
[14:50:51] <dave0> das: filling in d_type is up to the filesystem and not all of them do it... i believe msdos filesystem on linux doesn't fill it in
[14:51:01] *** Parts: cadmio (~cadmio@151.25.149.251) (WeeChat 3.0)
[14:51:24] <dave0> das: i use  lstat()  is d_type == DT_UNKNOWN
[14:51:41] <das> yup, did that and that works
[14:51:54] <das> guess I'll just ditch the readdir()
[14:51:58] <das> thanks omegatron dave0 
[14:52:12] <dave0> das: if you're looking for directories...   if(d_type == DT_DIR) { ...it's definately a directory... } else if(d_type == DT_UNKNOWN) { ...use lstat } else { ... definately not a directory... }
[14:52:52] <markand> d_type isn't POSIX, be aware of that
[14:52:54] <dave0> das: that relies on short-circuit if it is DT_DIR because it is a large speedup (or lstat is very slow depending on your perspective)
[14:53:32] <das> guess I could bench it and see if it makes a difference
[14:53:44] <dave0> yeah you can wrap it in an   #ifdef DT_UNKNOWN
[14:54:01] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[14:54:06] <dave0> das: if d_type exists and it's filled in correctly, it is a massive speedup
[14:54:51] <das> because there's no need to open(2) ?
[14:55:07] <dave0> oh i meant compared to stat
[14:55:19] <markand> one could use open + fdopendir + fstatat as well
[14:55:25] <markand> that is more portable 
[14:56:29] *** Joins: BSaboia (~bsaboia@187.19.138.198)
[15:00:19] *** Joins: Laurenceb (~Laurenceb@56.184.147.147.dyn.plus.net)
[15:01:12] <das> temporary fix: https://github.com/gquere/ngp2/commit/0bda11fec63a261db5b360366c6146e62156dd86
[15:01:13] <candide> Title of das's link: [fix] Handle "uncommon" filesystems · gquere/ngp2@0bda11f · GitHub
[15:01:37] <das> thanks for the tips, will come back to this problem some time in the future when I have more time to address it properly
[15:02:27] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[15:06:05] <sham1> das: you should probably have a license file within your repo
[15:08:21] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[15:09:57] <Bou> but, this opens all the DT_UNKNOWN entries without closing them... theres (l)stat that takes a pathname directly
[15:11:15] <markand> instead of computing a path using dir_entry_path you could use fdopendir + openat
[15:17:55] *** Quits: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu) (Ping timeout: 265 seconds)
[15:19:05] *** Quits: dmaroo (~dhruv@2409:4070:460b:9408:8e30:2acf:1083:9872) (Quit: Konversation terminated!)
[15:19:11] <dave0> https://termbin.com/qf3fl
[15:19:30] <dave0> it falls back on lstat
[15:19:35] *** Quits: ckeshav (~keshavcha@user/ckeshav) (Ping timeout: 264 seconds)
[15:19:48] *** Joins: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu)
[15:19:57] <sham1> dave0: that only works if the process' CWD is in the directly in question
[15:20:00] <dave0> i only ever used that, markand is probably a better fallback
[15:20:17] <sham1> But yeah, I'd also probably use fdopendir + openat + fstat
[15:20:43] <markand> :-)
[15:21:00] <markand> at least you don't end up using d_type which is not portable at all (not POSIX)
[15:21:20] <dave0> yeah it's not portable but it is a real nice feature if you have it
[15:21:32] <dave0> 3x speedup is not unusual
[15:21:53] <sham1> Well it's portable in the sense that most POSIX systems ended up having it. But yeah, one would want to have some kind of a test for it in autoconf/meson/whatever and then do something like #ifdef HAVE_DIR_D_TYPE #endif
[15:21:54] <dave0> i did profile it once but that was long ago
[15:22:23] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[15:22:32] <markand> is fstat really slow call?
[15:22:42] <markand> I mean fstatat
[15:23:12] *** Quits: serbest (~serbest@user/serbest) (Quit: Leaving)
[15:23:20] <sham1> Well it'd probably have to go to the inode structure or whatever from the directory entry and that does take time. It also has to populate the entire stat struct
[15:23:21] <dave0> yes
[15:23:42] <dave0> either the stat or the open is gonna slow it down
[15:23:51] <dave0> and if it's a symbolic link add more time
[15:23:59] <subdelusional> slidercrank: how would you write that?
[15:24:18] <subdelusional> I found the only convenient way is to loop through every character
[15:24:23] <subdelusional> how does fgets work?
[15:24:27] *** Quits: krissmaster (~kriss@213.239.83.90) (Quit: Lost terminal)
[15:28:20] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:55df:fbfa:f55f:9ac3)
[15:28:20] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:55df:fbfa:f55f:9ac3) (Changing host)
[15:28:20] *** Joins: skapata (~Skapata@user/skapata)
[15:29:19] *** Joins: krissmaster (~kriss@213.239.83.90)
[15:29:32] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[15:30:13] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[15:30:27] *** Quits: BSaboia (~bsaboia@187.19.138.198) (Quit: This computer has gone to sleep)
[15:32:00] *** Joins: BSaboia (~bsaboia@187.19.138.198)
[15:32:37] <rcf> What about fgets is confusing? 
[15:33:48] *** Joins: nyah (~nyah@bcdcb6e3.skybroadband.com)
[15:33:56] *** Joins: TommyC (~TommyC@user/tommyc)
[15:34:14] <slidercrank> subdelusional, something like #define BUF_SIZE 128  char buf[BUF_SIZE]; while (fgets(buf, sizeof(buf), f_ptr) != NULL) fprintf(stdout, "%s", buf);
[15:34:58] <subdelusional> it wants to know the size of the line it's reading, in the case of me not knowing the size of the line (since I'm looping through several lines in a file and reading them) how would I use it?
[15:35:51] *** Joins: Famine_ (~Famine@user/famine)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:45] <dave0> subdelusional: if you don't know the maximum length of your line in advance, there is   getline()   which dynamically allocates space
[15:37:03] <slidercrank> subdelusional, it doesn't matter. Just read a line into the buffer (it's ok if the line doesn't fit in the buffer. The code will still work)
[15:37:20] <slidercrank> your line will be split into chunks )
[15:38:00] <slidercrank> your buffer won't be overrun. In the next call to fgets you'll read the next part of your line. Until the whole line is read
[15:38:30] <sham1> Could also probably utilise memory mapping of files
[15:38:43] <sham1> Assuming it's a file and not a pipe or something silly like that
[15:39:00] *** Quits: Famine- (~Famine@user/famine) (Ping timeout: 260 seconds)
[15:39:18] <slidercrank> subdelusional, https://paste.ofcode.org/kR7gTWV9tUX9wJ8xKJQBkx
[15:39:49] <markand> there if BUFSIZ which is standardized in stdio.h
[15:40:03] *** Joins: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de)
[15:40:05] <markand> which is usually linked to the kernel optimal IO
[15:40:58] <subdelusional> is this better now? https://bpa.st/AMOA 
[15:41:21] <slidercrank> you don't need to flush your input stream
[15:41:43] <slidercrank> why are you doing fflush()?
[15:41:51] <sham1> Isn't that UB?
[15:41:55] <slidercrank> it won't hurt but it's useless
[15:42:08] <sham1> Oh, it just does nothing
[15:42:11] <markand> you can simplify your code using f_ptr = argc >= 2 ? fopen(argv[1]) : stdin;
[15:42:13] <subdelusional> a guy on the internet told me it's better to flush the input stream
[15:42:16] <markand> and then use f_ptr only
[15:42:17] *** Joins: Guest67 (~Guest67@62.210.34.104)
[15:42:25] <sham1> The guy on the Internet was wrong
[15:42:35] <markand> anf use BUFSIZ from stdio.h
[15:43:02] <markand> and the error line 18 is wrong, there are more errors than ENOENT
[15:43:07] <dave0> subdelusional: are you sure it was a guy? :-p
[15:43:19] <subdelusional> yes?
[15:43:26] <subdelusional> does that matter?
[15:44:32] <slidercrank> subdelusional, just read 3 fflush: For  input streams associated with seekable files (e.g., disk files, but not pipes or terminals), fflush() discards any buffered data that has been fetched from the underlying file, but has not been consumed by the application. But you read the whole file. So there is no buffered data. 
[15:44:50] <slidercrank> you consume the input file completely
[15:45:39] <slidercrank> anyway even if you exit prematurely (before finishing reading the file), nothing bad will happen
[15:48:32] <subdelusional> well isn't it just a good practice?
[15:49:06] *** Joins: Betal (~Betal@user/betal)
[15:49:13] *** Joins: jiehuan (~jiehuan@39.190.193.76)
[15:49:30] *** Quits: ravan (~ravan@user/ravan) (Quit: Leaving)
[15:50:56] <subdelusional> also what's better about using fprintf to standard output than just using printf? slidercrank 
[15:53:04] <markand> as told above, you can switch using stdin or your custom FILE * using fopen so you can use the same code logic 
[15:54:27] <Guest67> Subject : A readline in a readline 
[15:55:01] <Guest67> How to ctrl-c the first readline and be back on the second ?
[15:55:20] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Read error: Connection reset by peer)
[15:55:22] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 260 seconds)
[15:55:39] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[15:55:41] <Guest67> Like the minishelle with here document
[16:05:38] *** Joins: dmaroo (~dhruv@2409:4070:2395:bc00:f1aa:73d4:cf59:6f32)
[16:06:06] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 260 seconds)
[16:06:47] *** Joins: burakcank (burakcank@has.arrived.and.is.ready-to.party)
[16:07:28] *** Joins: constxd (~brad@192.75.101.164)
[16:07:35] *** Quits: rahl (~rahl@102.114.132.246) (Ping timeout: 264 seconds)
[16:08:15] *** Joins: whup_dup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:09:07] *** Joins: rahl (~rahl@102.114.190.3)
[16:11:14] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Ping timeout: 260 seconds)
[16:11:23] *** whup_dup is now known as whupdup
[16:11:34] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[16:12:30] *** Joins: dld (~davidlowr@2620:6e:6000:2900:5db6:6f5a:3b6e:25f9)
[16:14:07] *** Joins: strajder (~strajder@user/strajder)
[16:14:36] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[16:16:10] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Read error: Connection reset by peer)
[16:16:30] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[16:20:18] *** Joins: semeion (~semeion@user/semeion)
[16:21:15] *** Quits: dmaroo (~dhruv@2409:4070:2395:bc00:f1aa:73d4:cf59:6f32) (Quit: Konversation terminated!)
[16:21:58] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 260 seconds)
[16:23:02] *** Joins: Crescendo (~Crescendo@user/crescendo)
[16:24:34] *** Joins: reumeth (~reumeth@user/reumeth)
[16:25:36] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[16:27:30] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Read error: Connection reset by peer)
[16:27:50] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[16:27:57] <markand> I can't believe there is no alternatives to gettext
[16:30:25] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Read error: Connection reset by peer)
[16:30:45] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[16:31:52] *** Joins: V-T60 (~v@91.203.24.166)
[16:33:27] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Read error: Connection reset by peer)
[16:33:36] *** Quits: varaindemian (uid73404@id-73404.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[16:33:45] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[16:34:15] *** Joins: luizfrds (~Luiz@152.250.243.147)
[16:36:15] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[16:36:24] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Read error: Connection reset by peer)
[16:42:23] *** Quits: clamiax (~clamiax@net-93-149-158-199.cust.vodafonedsl.it) (Ping timeout: 264 seconds)
[16:43:01] <sham1> markand: well considering that there are many implementations of gettext, I don't know if it's that bad. Having it as a pseudo-standard is helpful
[16:43:31] <markand> yup, but it requires files on a specific directory to work which is a PITA for me
[16:43:56] <sham1> Ah yeah, that's annoying yes
[16:46:21] *** Joins: meator (~meator@user/meator)
[16:46:32] *** Quits: Inline (~Inline@2a02:908:1252:7a80:89dc:6a58:9f2a:ff3d) (Quit: Leaving)
[16:50:44] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca)
[16:53:39] *** Quits: Guest67 (~Guest67@62.210.34.104) (Quit: Client closed)
[16:57:29] *** Joins: Inline (~Inline@2a02:908:1252:7a80:89dc:6a58:9f2a:ff3d)
[16:57:38] *** battousai is now known as pixies
[16:57:39] *** Quits: pixies (~i.am@177.156.122.167) (Changing host)
[16:57:39] *** Joins: pixies (~i.am@user/marlboro)
[17:02:40] *** Joins: juliopcrj (~juliopcrj@177.44.227.40)
[17:06:39] *** Quits: mad_enz (~mad_enz@cpe00508b114c3e-cm788df7e75290.cpe.net.fido.ca) (Remote host closed the connection)
[17:08:02] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[17:08:20] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b015:11a3:960e:c4d4:600a) (Quit: Leaving)
[17:08:50] *** Quits: jiehuan (~jiehuan@39.190.193.76) (Ping timeout: 260 seconds)
[17:12:18] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-848c-99f6-3ab2-978a.res6.spectrum.com)
[17:15:53] *** Quits: sham1 (~sham1@212-146-44-107.aboa.net) (Quit: ZNC 1.8.2 - https://znc.in)
[17:16:04] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) ()
[17:17:39] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Ping timeout: 276 seconds)
[17:18:04] *** Joins: sham1 (~sham1@212-146-44-107.aboa.net)
[17:18:10] *** Joins: siwica` (~user@p200300f6170bca00fe3370c3d3f4e0b3.dip0.t-ipconnect.de)
[17:18:23] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[17:18:40] *** Joins: astronaut (~annada@103.160.128.31)
[17:18:45] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 260 seconds)
[17:18:45] *** Quits: segfault (~annada@103.160.128.31) (Ping timeout: 260 seconds)
[17:18:47] *** Joins: quartz (~quartz@user/quartz)
[17:20:18] *** Quits: siwica (~user@173-184-142-46.pool.kielnet.net) (Ping timeout: 260 seconds)
[17:22:55] *** Quits: puke (~puke@user/puke) (Remote host closed the connection)
[17:23:55] *** Joins: puke (~puke@user/puke)
[17:25:36] *** Joins: BUSY (~BUSY@user/busy)
[17:26:53] *** Joins: pulse (~pulse@user/pulse)
[17:28:58] *** Quits: soul-d (~uknown@user/soul-d) (Read error: Connection reset by peer)
[17:29:36] *** Joins: mad_enz (~mad_enz@cpe00508b114c3e-cm788df7e75290.cpe.net.fido.ca)
[17:32:45] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[17:32:54] *** Quits: V-T60 (~v@91.203.24.166) (Ping timeout: 260 seconds)
[17:33:37] *** Joins: superboot (~agentgasm@user/superboot)
[17:34:15] *** Joins: LTCD (~LTCD@2a02:c7f:dd1c:b600:b8e9:c63e:7dad:840f)
[17:34:22] *** Parts: LTCD (~LTCD@2a02:c7f:dd1c:b600:b8e9:c63e:7dad:840f) ()
[17:35:26] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[17:35:40] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: This computer has gone to sleep)
[17:37:00] <superboot> Hi all. What does the star do in: char *myFunc() { int i; for (i=0, i < 10, i++) { printf("%d", i); };   I've seen function pointers, but the ones I've seen are declarations, not definitions. How is myFun a pointer if it has contents? What am I missing?
[17:38:28] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:f56d:3455:f283:1655)
[17:38:36] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[17:38:37] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[17:38:37] *** Joins: wroathe (~wroathe@user/wroathe)
[17:38:49] <fizzie> It *returns* a pointer.
[17:38:59] <fizzie> ,english char *myFunc(void);
[17:39:00] <candide> fizzie: Declare `myFunc` as a function taking no arguments and returning pointer to char.
[17:39:40] <fizzie> Well, it's declared to return a pointer, anyway -- your snippet doesn't actually show it returning anything.
[17:39:46] <superboot> fizzie: Oh! That makes sense. Thank you!
[17:40:22] <superboot> fizzie: Yeah, it was invented code to ask the question, so under my new understanding I see it is invalid in that way. 
[17:41:29] <slidercrank> ,german char *myFunc(void);
[17:41:29] <candide> [#c-offtopic] char *myFunc(void);: Zu zu.
[17:42:28] *** Quits: Yaknoti5 (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 258 seconds)
[17:45:34] *** Joins: soul-d (~uknown@user/soul-d)
[17:46:45] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[17:49:10] *** PublicWifi is now known as McDonaldsWiFi
[17:49:24] *** McDonaldsWiFi is now known as MaccasWiFi
[17:49:31] *** Joins: fossforus (~stan@99-173-128-32.lightspeed.rlghnc.sbcglobal.net)
[17:51:34] *** Quits: random-nick (~random-ni@87.116.183.63) (Ping timeout: 260 seconds)
[17:51:57] *** Joins: krux02 (~krux02@p200300e817076e005ebbf251e029334f.dip0.t-ipconnect.de)
[17:52:15] *** Joins: sztanpet (sztanpet@user/sztanpet)
[17:52:27] *** Parts: sztanpet (sztanpet@user/sztanpet) ()
[17:52:40] <krux02> How much does a C optimizer reuse memory on the stack when stacke variables are still in scope, not not used anymore?
[17:53:13] <floatcomplex> fully
[17:53:21] <floatcomplex> they don't exist anywhere
[17:53:23] <floatcomplex> never did
[17:53:23] <krux02> int arg1 = 321; foo(arg1, ...); int myVar = 123
[17:53:35] <krux02> is it possible that myVar occupies the same memory as arg1?
[17:53:42] *** MaccasWiFi is now known as PublicWiFi
[17:53:42] <fizzie> Most of the time there's never been any memory for `arg1` in a context like that.
[17:53:46] <floatcomplex> possible but also irrelevant
[17:53:55] <deadk> yes, but of course if you take the address of each this will stop being true since you can now refer to both of them
[17:54:02] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[17:54:07] <krux02> or does it require to write a block for it?
[17:54:07] <deadk> and yeah, if it can the compiler will try to put those in registers
[17:54:08] <floatcomplex> krux02: most likely arg1 was only ever in a register
[17:54:25] <fizzie> Most likely arg1 was only ever in the register used for passing it as the first argument, even.
[17:54:34] <krux02> I am asking, because I am writing a compiler that compiles to C
[17:55:00] <deadk> but assuming this was an example that meant to allude to something a bit more complicated, it will almost certainly reuse registers and/or stack space
[17:55:00] <floatcomplex> make it write the most readable code and let the C compiler optimize it
[17:55:40] <floatcomplex> but also maybe do the opposite thing. write a C compiler in bash or perl or awk
[17:55:50] <deadk> it's a fairly fundamental transformation in optimising C to rewrite each local assignment to create a new variable, and then analyse the lifetime of each
[17:55:58] <krux02> and when I generate argument variables, I would like to know if I should put effort into generating scopes, so that variables get cleaned up properly
[17:56:17] <deadk> you shouldn't need to
[17:56:23] <floatcomplex> krux02: you don't need to other than for hunan readers
[17:57:26] <krux02> well generating for human readability is a bit tough.
[17:57:54] <fizzie> You might also want to if you want to give them names like `arg1` that always refer to the position in the call they're going to be used in, since you can't have two declarations of `arg1` in the same scope.
[17:58:13] <krux02> fizzie, that is true
[17:58:32] <fizzie> (Of course you can just use a single per-function numbering instead.)
[17:58:38] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:58:52] <krux02> the problem is when things get nested
[17:59:11] <DPA> If you write a c compiler, any optimisation that isn't detectable is fair game. Even some stuff beyond that. You can never know how an unknown compiler may do it, but if the code is correct, it shouldn't matter.
[17:59:13] <fizzie> Not sure if human readability should be *that* big a factor for generated code, as long as you pick the readable choice when it's more or less as easy as not to.
[17:59:41] <deadk> making it easy (or at least not too hard) to debug may be a factor, though
[17:59:57] <krux02> I want to keep my optimizations to an absolute minimum
[18:00:35] <krux02> optimizations introduce arbitrary complexity, might be wrong, might be extremely hard to debug, The C compiler already does them.
[18:00:45] *** Quits: alch (~alch@ca-18-203-240.service.infuturo.it) (Ping timeout: 260 seconds)
[18:00:47] <floatcomplex> krux02: play around with godbolt to learn what a reasonable c compiler is likely to do with reasonable c code
[18:01:02] <krux02> and of course compile time matters (to me)
[18:01:19] <krux02> floatcomplex, yes I've already done that a lot.
[18:02:19] *** Joins: alch (~alch@151.82.137.67)
[18:03:12] <krux02> I am currently trying to find a good algorithm to compile the following expressions to C, maybe you might have an insightful idea
[18:03:50] <krux02> I use C style pseudo syntax
[18:04:48] <krux02> if (foo() && {MyType tmp; bar(&tmp); hasValue(&tmp)} ) { puts("ok") }
[18:05:16] <sham1> Oh, is that a statement expression kinda?
[18:05:22] <krux02> yes
[18:05:39] <krux02> kinda like the comma operator in c
[18:05:54] <floatcomplex> arw you compiling to iso c or to gcc/clang
[18:05:55] <krux02> but the comma operator is weiry syntax wise
[18:06:06] <krux02> gcc/clang
[18:06:09] <krux02> for now
[18:06:22] <krux02> if there is an extension that I can exploit, I am not ashamed to do it.
[18:06:30] <sham1> Well in that case you can just wrap the curly braces in parentheses and it'll work
[18:06:56] <markand> n2853
[18:06:57] <krux02> sham1: do I need to activate an extension?
[18:07:05] <markand> that's silly
[18:07:09] <sham1> I don't think you need to do anything specific for that, I think it should just work
[18:07:13] <krux02> compiler flag?
[18:07:19] <floatcomplex> nope
[18:07:26] <krux02> let me try
[18:07:31] <floatcomplex> absence of a compiler flag
[18:08:41] <sham1> If it were for ISO C, you'd need to remember that a short-circuiting AND has the following property: a && b <=> if (a) { b } else { false } assuming of course that you were to have if-expressions, which you don't, so you'd use a ternary operation in some cases.
[18:10:26] <sham1> markand: the void which-binds?
[18:10:47] <DPA> Regarding how a compiler may handle variables, ssa and how nir used to do it may be interesting: http://www.jlekstrand.net/jason/projects/mesa/nir-notes/
[18:11:13] <krux02> scratch.c:25:55: error: expected ';' before '}' token
[18:11:39] <krux02> what is wrong? (foo() && ({MyType tmp; bar(&tmp); hasValue(&tmp)}) )
[18:11:43] <sham1> Yeah, you need a semicolon
[18:12:07] <DPA> ,cc (foo() && ({MyType tmp; bar(&tmp); hasValue(&tmp);}) )
[18:12:09] <candide> DPA: warning: implicit declaration of function 'foo' [-Wimplicit-function-declaration]  error: unknown type name 'MyType'
[18:12:45] <krux02> that makes my job a LOT easier
[18:12:59] <krux02> thanks a lot, I really did not know that it is possible.
[18:13:07] <Bou> weird... we discussed this same gcc extension 2 days ago, I never saw it before and now twice in 2 days.
[18:13:58] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[18:14:37] *** Quits: esselfe (~steph@user/esselfe) (Quit: brb)
[18:14:51] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[18:16:05] <sham1> Anyway, if we want to talk about weird WG14 proposals, N2859 annoys me. We already have prior art of using "break label;" for breaking from nested loops, why invent this new stacked "break break break" thing
[18:16:45] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 265 seconds)
[18:18:13] <Bou> all because of the "goto is bad" mantra
[18:18:49] <clarity> "A value would suggest that break statement could have dynamic target.  Multiple breaks is clearly not dynamic."
[18:18:53] <clarity> I'd love dynamic breaks and gotos
[18:19:15] <sham1> I understand people being reluctant about goto, but something like `foo: while(...) { while(...) { /*...*/ continue foo; } }` just feels better
[18:19:16] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[18:20:14] <krux02> I think a break with an argument that explicitly refereces the loop by name/tag (not a thing yet) would also be a nice idea
[18:20:21] <sham1> But no, instead it's `while(...) { while(...) { /*...*/ continue continue; } }` which just seems silly
[18:21:02] <krux02> outer: for () { inner: for() { if (...) break outer; } }
[18:21:08] <ioxzev1z> ,cc while(1) { while(1) { /*...*/ continue continue; } }
[18:21:09] <candide> ioxzev1z: error: expected ';' before 'continue'
[18:21:21] <sham1> It's just a proposal for now
[18:21:21] <DPA> In JS, I can alos break a block statement.  x: { break x; }
[18:21:24] *** Joins: Sadale (~Sadale@user/sadale)
[18:21:51] <krux02> DPA, also makes sense
[18:22:00] <sham1> Yeah. There's enough prior art from languages like Java, Javascript, D, Rust and so on that this kind of "different for the sake of different" is annoyingly silly
[18:22:04] <krux02> but effectively it is jumping behind the block.
[18:22:55] <sham1> Like yeah, we have gotos for this, but maybe it's just me, but `while(...) { while(...) { /*...*/ goto outer; } outer: ; }` is weird looking
[18:23:22] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[18:25:48] <sham1> Another similarly weird proposal is N2855. It introduces tail calls, which is great. But, it's done with `return goto foo(/* args */);` and I understand the rationale that is given within the proposal, but still
[18:29:55] <ioxzev1z> sham1, so in that, "return goto" is a new usage of those?
[18:30:16] <sham1> In N2855, return goto makes the function call into a tail call
[18:33:48] <DPA> Something I would like to see is lists across cmpilation units. Something like "list mylist; mylist int a;" "list mylist; mylist int b;" "list mylist; int main(){for(int* it=mylist.start; it<mylist.end; it++) printf("%d\n", *it); }"
[18:33:48] <DPA> I currently do something like this using attribute constructor and linked lists, or using attribute section and an array.
[18:33:59] <fizzie> Why doesn't the discussion part of N2859 even *mention* using a label in the `break` / `continue` statement? That's just odd.
[18:34:41] <sham1> fizzie: your guess is as good as mine
[18:35:10] <sham1> And if there were a fear that break labels and goto labels would get mixed up, just have them in different namespaces
[18:35:32] <Atque> Something has always bothered me... if libc called libc because of C?
[18:35:51] <sham1> Yes
[18:36:06] <sham1> Because it is the C standard library + some other stuff usually
[18:38:35] <fizzie> FTR, PHP uses a multi-level break where you put in a number (as in, `break 2;`) of levels. But that's the only one I know of that does it that way, rather than with a label.
[18:43:16] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Quit: Leaving)
[18:43:43] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[18:47:57] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[18:48:47] <floatcomplex> it's only a multi level break if it's from the b'reak region of southern france. otherwise it's just sparkling goto
[18:54:31] <DPA> something like "break label" is pretty easy to implement with a macro: https://bpa.st/BXBQ
[18:55:20] <sham1> Less trivial with continue though
[18:55:42] *** Quits: NotIndonesian (znc@Indonesians.are.sick.bnc.HUNTERS.thats.bad.mn) (Remote host closed the connection)
[18:57:23] <sham1> Although speaking of loops and break, one thing that would be funny would be adding else to for
[18:59:26] <floatcomplex> never debugging your code
[18:59:38] *** Joins: zmt00 (~zmt00@user/zmt00)
[18:59:54] *** Quits: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:3c0f:41c:39e8:ecdc) (Ping timeout: 258 seconds)
[19:00:20] *** Joins: kuber (~kuber@97-113-79-225.tukw.qwest.net)
[19:00:24] *** Quits: Thedarkb1 (~Thedarkb@2001:bb6:b403:e042:b812:bb3f:25c8:9173) (Ping timeout: 265 seconds)
[19:00:32] <fizzie> There's at least two mutually incompatible definitions of an `else` branch to iteration statements.
[19:00:41] <fizzie> (In other languages.)
[19:01:25] <floatcomplex> whereas, shockingly, else means the same thing in c and forth
[19:01:29] <floatcomplex> which never happens
[19:01:53] <fizzie> There's one that you see a lot in templating systems and some languages, where an `else` branch of an iteration statement is executed if and only if the body of the iterration statement was never executed (because the controlling expression was false the first time it was evaluated).
[19:02:04] <fizzie> And then there's the weird Python one that I can never remember that's different.
[19:02:45] <floatcomplex> one could argue that the ternary conditional is a more or less verbatim intrusion of forth syntax into c
[19:02:58] *** Joins: napalm (~zer0-days@user/napalm)
[19:03:14] <fizzie> Right, the Python one is the one where the `else` branch is executed when the loop statement terminates by the condition becoming false, but not if the for loop is terminated by a `break`.
[19:03:19] *** napalm is now known as Napalm
[19:03:31] *** Joins: rgrinberg (~textual@ip11-246-50-179.ct.co.cr)
[19:03:39] <floatcomplex> that's...not obvious
[19:03:43] <LeoNerd> The python one is interesting but they should have found a new keyword for it, rather than abusing `else`
[19:04:40] <fizzie> It's intended for code like `for (/* iterate over something */) { if (/* test */) { puts("yay, found a good one); break; } } else { puts("oh no, didn't find anything"); }`
[19:05:03] *** Joins: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:3c0f:41c:39e8:ecdc)
[19:05:29] *** Joins: Thedarkb (~Thedarkb@2001:bb6:b403:e042:b812:bb3f:25c8:9173)
[19:05:41] <LeoNerd> Yes it's a valid use-case. I just dislike using the word "else" to encode it
[19:05:45] <LeoNerd> A different word would have been nicer
[19:06:16] <LeoNerd> Perhaps "otherwise", or somesuch
[19:07:10] <floatcomplex> foreach (stuff) { /* do things to stuff */ } ohshit { /* do things if ohshit */ }
[19:07:42] <fizzie> While the other sort of else is arguably useful for generating output where you have a placeholder if there are no elements, like `for (int i = 0; i < N; i++) printf("%d: %s", i, table[i]); else puts("nobody here but us chickens");`
[19:08:26] <floatcomplex> fizzie: it's more common for me to want to do something special if a loop exited early, even if it did iterate a nonzero number of times
[19:08:38] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[19:08:41] *** Quits: Laurenceb (~Laurenceb@56.184.147.147.dyn.plus.net) (Quit: Client closed)
[19:09:13] <floatcomplex> and it does result in some loops looking like out-of-place c89 loops in code that is otherwise c99
[19:11:46] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[19:12:33] *** Quits: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca) (Remote host closed the connection)
[19:12:46] *** Quits: kuber (~kuber@97-113-79-225.tukw.qwest.net) (Quit: leaving)
[19:14:08] *** Joins: DeepComa (~PhoenixCo@user/alien-fx-fiend/x-2328408)
[19:18:45] *** Joins: stilbruch (~stilbruch@157.245.122.124)
[19:20:01] *** Joins: plainoldcheese (~plainoldc@user/plainoldcheese)
[19:22:31] <DPA> Now I got continue too. And it looks a lot nicer: https://bpa.st/H3FA
[19:23:27] <floatcomplex> we are never ever ever going to debug your code again
[19:24:24] *** Joins: LTCD (~LTCD@2a02:c7f:dd1c:b600:b8e9:c63e:7dad:840f)
[19:24:27] <LTCD> Hey, I am using URLDownloadToFile() to download a file. In the past I used to get errors when I tried to do something to the downloaded file on the next line after URLDownloadToFile(). I recall the solution was to flush the file to disk, or something, does anyone know?
[19:26:21] <fizzie> Hmm, I feel like that's a technical violation of 7.1.2p4 ("-- program shall not have any macros with names lexically identical to keywords currently defined prior to the inclusion of the header or when any macro defined in the header is expanded --"), because the paragraph does not make a distinction between object-like and function-like macros, even if there's no plausible scenario where a token
[19:26:23] <fizzie> sequence that looked like an invocation of a function-like macro called `break` or `continue` was legal.
[19:26:36] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Quit: jmiehe)
[19:27:05] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-848c-99f6-3ab2-978a.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[19:27:35] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-848c-99f6-3ab2-978a.res6.spectrum.com)
[19:31:12] <DPA> I made a mistake earlier. Now this version should be correct: https://bpa.st/HMJA
[19:44:07] *** Joins: odoood (~odoood@2601:c8:c003:a550::3)
[19:44:15] *** Quits: odoood (~odoood@2601:c8:c003:a550::3) (Remote host closed the connection)
[19:44:35] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[19:44:51] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[19:48:23] <sham1> The preprocessor is both wonderful and terrifying at the same time
[19:48:40] *** Parts: Napalm (~zer0-days@user/napalm) ()
[19:50:19] <ioxzev1z> DPA, submit for next C standard
[19:50:37] <floatcomplex> 😱
[19:50:45] <floatcomplex> stop trying to make C worse
[19:51:00] <ioxzev1z> floatcomplex, learn to love the pre-processor.
[19:51:02] <ioxzev1z> Love it
[19:51:07] <Bou> N2861: `comefrom`
[19:52:34] *** Quits: das (~das@user/das) (Remote host closed the connection)
[19:54:31] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 252 seconds)
[19:55:49] <DPA> I think I could get rid of 1 label if I change the if(1) to if(0)
[19:57:20] <fizzie> Here's a fun suggestion I don't think I've ever seen anyone advocate: `goto` with an argument (like `return`), that you can receive over on the other side by having a label attached directly to a variable declaration (illegal at the moment). The value would then be used as an initializer for the variable, replacing whatever (if anything) in the declaration.
[19:57:31] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-848c-99f6-3ab2-978a.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[19:58:15] <fizzie> See, I'm concerned people are writing programs that are too structured. Putting argument-passing into `goto` should go some way at bringing back the purity of spaghetti code.
[19:59:32] *** Quits: slidercrank (~slidercra@user/slidercrank) (Quit: Why not ask me about Sevastopol's safety protocols?)
[20:00:09] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[20:00:13] <fizzie> Combine it with GCC's computed goto extension, and there should be no need to write more than one function ever.
[20:00:25] *** Quits: kish` (~aqua@user/aqua) (Quit: Leaving)
[20:00:59] <ioxzev1z> fizzie, you don't currently write 10K SLOC main()s as the only function?
[20:02:04] <Atque> fizzie: I miss C89. Functions in functions in code blocks in code blocks were so easy to QA
[20:03:12] *** Joins: Macuser (~Macuser@216.30.159.201)
[20:04:42] *** Joins: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca)
[20:04:54] *** Quits: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca) (Changing host)
[20:04:54] *** Joins: aportnoy (~aportnoy@user/aportnoy)
[20:08:54] *** Quits: DrNick42 (~DrNick42@bastion.spikeyfishtech.uk) (Ping timeout: 258 seconds)
[20:11:06] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[20:14:31] <floatcomplex> i wish computed goto were standard although i also hate it
[20:14:43] <floatcomplex> it is the fastest way to do some things, by a small margin
[20:14:54] *** Joins: kish` (~aqua@user/aqua)
[20:15:08] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[20:15:23] <floatcomplex> putting effort into optimizing the other ways to do it is probably a better idea
[20:15:33] *** Joins: kish` (~aqua@user/aqua)
[20:20:23] *** Quits: fbiagent__ (~fbiagent@user/fbiagent) (Remote host closed the connection)
[20:20:45] *** Quits: aa (~douglasco@200.146.85.128.static.gvt.net.br) (Quit: Leaving)
[20:21:36] *** Joins: ravan (~ravan@user/ravan)
[20:25:25] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[20:26:08] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[20:27:07] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[20:27:17] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[20:28:38] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[20:29:00] *** Quits: The_Blode_ (~Blode@user/the-blode/x-7164444) (Read error: Connection reset by peer)
[20:29:24] *** Quits: DeepComa (~PhoenixCo@user/alien-fx-fiend/x-2328408) (Quit: .oO (bbl tc folks~!))
[20:32:37] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[20:38:33] *** Quits: cisco87 (~quassel@static.128.104.12.49.clients.your-server.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:38:49] *** Joins: cisco87 (~quassel@static.128.104.12.49.clients.your-server.de)
[20:41:42] <DPA> I'm trying to come up with some way to let "for(X)" expand to "for(X)", but "for(X)(Y)" to "for(X) other Y thing " or "for(Y) other X thing ", but I can't quiet come up with something. If only I could define X and define X() at the same time...
[20:42:11] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[20:43:09] <DPA> Worst case I'll have to call it different. What would be better for_, or FOR, or For?
[20:44:37] *** Joins: magla (~gelignite@55d4ee8d.access.ecotel.net)
[20:46:24] <omegatron> try to avoid preprocessor magic and just write sane code ... if that involves writing some functions more (maybe mark them as inline), so be it
[20:46:30] <NRK[m]> myFor
[20:46:36] <Bou> Is this for the for-else madness? forif?
[20:47:20] <omegatron> obviously, it's to obfuscate the code, so that noone, including the author can read it anymore (without using -E)
[20:47:33] <NRK[m]> omegatron: it's quite fun though, you have to admit
[20:47:57] <omegatron> sure, but if you want real fun:  https://github.com/izabera/zeromaps
[20:47:58] <candide> Title of omegatron's link: GitHub - izabera/zeromaps: A "living" Linux process with no memory
[20:49:50] *** Joins: cust_ (amaama@blackbox.amaama.org)
[20:50:55] <floatcomplex> wtf
[20:51:04] *** Quits: cust (amaama@blackbox.amaama.org) (Ping timeout: 258 seconds)
[20:51:24] <floatcomplex> how about instead of that, a process that is implemented entirely in memory and uses no cpu
[20:51:56] <floatcomplex> (and then implement a c compiler in it)
[20:55:07] <omegatron> you have to admit, there is some beauty there ..
[20:55:09] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[20:59:15] *** Quits: Sadale (~Sadale@user/sadale) (Ping timeout: 260 seconds)
[21:02:11] *** Quits: astronaut (~annada@103.160.128.31) (Ping timeout: 258 seconds)
[21:02:30] *** Joins: astronaut (~annada@103.160.128.31)
[21:03:50] *** Quits: sysctl (~sysctl@88.215.77.255) (Ping timeout: 260 seconds)
[21:04:09] <HisShadow> floatcomplex: it is possible to run programs on x86 without actual code
[21:04:16] *** Joins: sysctl (~sysctl@88.215.77.255)
[21:04:27] *** Joins: pucara (~i@host77.181-14-159.telecom.net.ar)
[21:04:45] <HisShadow> floatcomplex: turns out page fault stuff is turing complete lol
[21:05:05] *** Quits: Arthuria (~Arthuria@user/arthuria) (Ping timeout: 260 seconds)
[21:05:13] <floatcomplex> yeah but x86 is boring
[21:05:31] <floatcomplex> pretty sure dma is turing complete on many arm chips
[21:05:55] <floatcomplex> can put the cpu to sleep entirely and keep doing things
[21:06:40] <ntwk> it's dreaming.
[21:06:48] *** Quits: aportnoy (~aportnoy@user/aportnoy) (Read error: Connection reset by peer)
[21:07:07] *** Joins: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca)
[21:07:25] <floatcomplex> does the brain actually use less power when dreaming, or more
[21:07:41] <omegatron> less
[21:07:43] *** Joins: rsarson (~rsarson@2607:fea8:29e1:b000::b67c)
[21:07:55] <floatcomplex> i would not be surprised if brain activity is at a minimum when nominally awake but in a twams
[21:08:00] <floatcomplex> teams meeting
[21:08:03] <omegatron> sleep is an active process, but it's still less "work to do"
[21:08:28] <ntwk> I think I remember recently hearing that sleep burns only marginally fewer calories than being awake and at rest.
[21:08:37] <ntwk> In others, it's still quite active.
[21:08:44] <ntwk> *other words
[21:09:02] <rsarson> before i get down voted & mocked on stackoverflow, i thought i'd ask a really picky question about a footnote in the standard... is there anyone here willing to humour me?
[21:09:30] <omegatron> on the other hand, you are dead if you don't sleep for more than 6-8 days
[21:09:54] <omegatron> rsarson: just ask
[21:10:49] <ntwk> I've looked into "will sleep deprivation kill you?" and I seem to get complicting answers.
[21:10:53] <ntwk> *conflicting
[21:10:55] *** Quits: hentai (~hentai@user/hentai) (Ping timeout: 260 seconds)
[21:12:16] <omegatron> while sleeping, the "coating" of the neurons is "regenerated" (and other stuff of course) - if that doesn't happen for a continuous time, you are braindead soon
[21:14:58] <rsarson> in c99 6.7.1 paragraph 4, footnote 103, it says "Thus, the only operator that can be applied to an array declared with storage-class specifier register is sizeof."  so, register int b[10]; printf("%p\n", (void *)&b); is rejected by the compiler.  my question is this: why does register int b; printf("%p\n", (void *)&b); ie, b is not an array, also get rejected?  (i said it was picky, lol)
[21:15:35] *** Joins: Psybur (~Psybur@mobile-166-170-29-82.mycingular.net)
[21:18:41] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-848c-99f6-3ab2-978a.res6.spectrum.com)
[21:20:49] <omegatron> i don't see 'sizeof' in your example code ..
[21:22:08] <omegatron> second, why use 'register' at all? in 99.9% of all cases not required - if you want to make your code "run faster", that's the wrong approach ..
[21:22:37] <omegatron> third, which compiler do you use (software-version) ? and what's the error message ?
[21:23:20] *** Joins: esselfe (~steph@user/esselfe)
[21:24:13] *** Joins: davros (~davros@host86-185-99-252.range86-185.btcentralplus.com)
[21:24:22] *** Quits: ckdCreations (~ckdCreati@147.55.133.138) (Read error: Connection reset by peer)
[21:24:48] *** Joins: ckdCreations (~ckdCreati@147.55.130.37)
[21:25:44] *** Joins: arinov (~arinov@31.142.50.8)
[21:28:49] <rsarson> omegatron: yes, i omitted it here.  the sizeof line in my code works as expected.  i'm trying to show how the unary & is rejected (gcc error: address of register variable 'b' requested).  i'm just hung up on the specific use of the word 'array' in the footnote.  why doesn't it say "to an variable (or object) declared..."?  also, i don't intend to use register... i'm just going through k&r2 appendix a and just looking at every little thing in 
[21:28:49] *** Quits: subdelusional (~user@188.249.169.186) (Quit: ERC (IRC client for Emacs 27.2))
[21:28:50] <rsarson> detail to get a firm grasp on the standard :)
[21:31:02] *** Quits: LTCD (~LTCD@2a02:c7f:dd1c:b600:b8e9:c63e:7dad:840f) (Quit: Client closed)
[21:33:01] <sham1> I don't think the K&R is all that good for when you want to understand the standard specifically
[21:35:20] <ioxzev1z> sham1, I usually recommend "Modern C"
[21:35:45] <sham1> Yeah
[21:36:00] <ioxzev1z> Not for learning the standard, but C in general
[21:36:26] <rsarson> sham1:  i don't disagree.  i'm just getting through k&r2 for the sake of completeness at this point.  if it wasn't for the internet, i'd be pretty lost reading k&r2 on it's own.
[21:37:07] *** Joins: Sadale (~Sadale@user/sadale)
[21:37:09] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[21:37:37] *** Joins: Sadale (~Sadale@user/sadale)
[21:37:40] <sham1> Yeah, K&R2 is part of the C lore
[21:38:12] <ntwk> A rite of passage, but certainly not the only one.
[21:38:30] *** Quits: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca) (Remote host closed the connection)
[21:38:45] *** Joins: Akuli (~Akuli@87-94-110-25.bb.dnainternet.fi)
[21:38:47] *** Joins: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca)
[21:39:29] <rsarson> so, about my question... am i just being picky or is their a distinction between register int b[10]; and register int b; in this context?
[21:41:47] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-848c-99f6-3ab2-978a.res6.spectrum.com) (Ping timeout: 264 seconds)
[21:44:08] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[21:44:37] <ioxzev1z> rsarson, there are some peculiarities about register variables
[21:45:16] <ioxzev1z> ,std rsarson 
[21:45:16] <candide> Standard C has no notion of 'r​sarson', so you must be talking about some specific OS, library, tool, implementation, architecture, et cetera. These are beyond the scope of this channel, which focuses on Standard C.
[21:45:22] <ioxzev1z> Sry
[21:45:29] <ioxzev1z> Thought it would link to standard
[21:45:44] <ioxzev1z> Anyway it should be in that
[21:47:35] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[21:48:27] *** Joins: mrig (~mrig@user/mrig)
[21:48:59] *** Joins: meator (~meator@user/meator)
[21:50:20] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[21:50:45] *** Quits: rgrinberg (~textual@ip11-246-50-179.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:52:01] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Killed (tungsten.libera.chat (Nickname regained by services)))
[21:52:01] *** vinleod is now known as vdamewood
[21:53:24] *** Joins: reset (~reset@user/reset)
[21:53:59] *** Joins: quartz (~quartz@user/quartz)
[21:54:39] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[21:55:49] <Bou> if your int b fully lives in a register, never goes to memory, what do you want &b to be?
[21:56:30] <ioxzev1z> iirc register is only a hint for the compiler
[21:57:33] <fossforus> both register and inline can be ignored by the compiler
[21:58:16] *** Quits: alch (~alch@151.82.137.67) (Read error: Connection reset by peer)
[21:58:26] <ioxzev1z> was actually thinking of inline, thanks
[21:59:08] <Inline> sounds like he wants todo inline assembly rather
[21:59:11] <Inline> lol
[21:59:39] <omegatron> or mix it up with 'volatile' maybe?
[22:00:08] *** Joins: humky (~humky@user/humky)
[22:02:28] *** Quits: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca) (Ping timeout: 265 seconds)
[22:02:41] *** Joins: alch (~alch@151.46.45.246)
[22:02:47] *** Joins: Sadale_ (~Sadale@user/sadale)
[22:03:21] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:03:57] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[22:04:00] *** Quits: Sadale (~Sadale@user/sadale) (Ping timeout: 260 seconds)
[22:04:14] <Bou> if register is only a hint, why make `register int a; int *b = &a;` an error? the compiler can see you need a pointer, and ignore `register` and put "a" in memory
[22:04:30] <floatcomplex> it's an error of intent, at least
[22:05:00] <floatcomplex> -What-do-you-want-from-me
[22:06:15] <sham1> -fdo-what-i-mea
[22:06:17] <sham1> -fdo-what-i-mean
[22:07:29] <HisShadow> and -vomit-frame-pointer
[22:08:14] *** Quits: Sadale_ (~Sadale@user/sadale) (Ping timeout: 260 seconds)
[22:09:31] *** Joins: Sadale (~Sadale@user/sadale)
[22:09:55] *** Quits: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de) (Quit: Konversation terminated!)
[22:13:10] *** Joins: hentai (~hentai@2a01:e0a:a5c:a070:c31a:f7c3:f498:d9a7)
[22:13:10] *** Quits: hentai (~hentai@2a01:e0a:a5c:a070:c31a:f7c3:f498:d9a7) (Changing host)
[22:13:10] *** Joins: hentai (~hentai@user/hentai)
[22:13:51] *** Joins: marcello42 (~mp@p5dedb36a.dip0.t-ipconnect.de)
[22:14:17] <ioxzev1z> Bou, because it's ambiguous. Either the variable is in a register and cannot have an address, or it's not and therefore can. The compiler can't just say "sure, on this compile its this, another its that"
[22:14:35] <ioxzev1z> Leads to UB braw.
[22:14:37] *** Quits: hentai (~hentai@user/hentai) (Read error: Connection reset by peer)
[22:14:53] *** Joins: hentai (~hentai@2a01:e0a:a5c:a070:c31a:f7c3:f498:d9a7)
[22:14:53] *** Quits: hentai (~hentai@2a01:e0a:a5c:a070:c31a:f7c3:f498:d9a7) (Changing host)
[22:14:53] *** Joins: hentai (~hentai@user/hentai)
[22:15:05] *** Quits: marcello42 (~mp@p5dedb36a.dip0.t-ipconnect.de) (Client Quit)
[22:16:21] *** Joins: mahmutov (~mahmutov@37.155.0.45)
[22:16:34] <ioxzev1z> Though not too sure what the criteria for the compiler deciding is
[22:17:19] *** Joins: marcello42 (~mp@p5dedb36a.dip0.t-ipconnect.de)
[22:20:01] *** Joins: slidercrank (~slidercra@user/slidercrank)
[22:20:41] *** Quits: lompik (~lompik@user/lompik) (Quit: WeeChat 3.3)
[22:22:33] <Bou> So it's not a hint
[22:23:10] *** Quits: arinov (~arinov@31.142.50.8) (Ping timeout: 260 seconds)
[22:23:11] <Bou> The idea of a hint is that it doesn't change the semantics of your program
[22:24:17] *** Joins: random-nick (~random-ni@87.116.183.63)
[22:28:29] <fizzie> rsarson: The point of the paragraph is, you can apply *other* operators (than the unary &) to a variable declared with `register`, so that `register int b; b + 1;` is just fine. But for an *array* declared with `register`, the usual conversion from an array to pointer that happens with an almost every operator amounts to an attempt to take its address, which means it's disallowed. `int b[10]; b + 1;` is
[22:28:31] <fizzie> not legal.
[22:29:48] <rsarson> fizzie: thank you :)
[22:31:15] *** Joins: makersmasher (~makersmas@097-092-244-194.res.spectrum.com)
[22:31:25] *** Joins: shivesh (~shivesh@user/shivesh)
[22:31:33] <DPA> I've now implemented the for-else thing. It's not perfect though, the macro requires no 2 loops are on the same line. (that includes macros containing multiple loops, that won't work.): https://bpa.st/CWNQ
[22:31:34] *** Quits: pucara (~i@host77.181-14-159.telecom.net.ar) (Ping timeout: 260 seconds)
[22:32:16] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[22:33:04] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[22:33:32] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.3)
[22:34:38] *** Parts: Hash (~weechat@protect.yourself.with.hashsecurity.org) (WeeChat 3.3)
[22:34:53] *** Joins: supajerm_ (~supajerm@gateway/vpn/pia/supajerm)
[22:37:28] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[22:37:54] *** Joins: Sadale (~Sadale@user/sadale)
[22:38:25] *** Quits: supajerm (~supajerm@gateway/vpn/pia/supajerm) (Ping timeout: 260 seconds)
[22:39:11] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[22:40:37] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[22:43:18] *** Quits: tinyweasel (~weasel@gateway/tor-sasl/tinyweasel) (Ping timeout: 276 seconds)
[22:43:43] *** Joins: tinyweasel (~weasel@gateway/tor-sasl/tinyweasel)
[22:44:31] *** Quits: tomboy64 (~tomboy64@user/tomboy64) (Remote host closed the connection)
[22:44:56] *** Quits: marcello42 (~mp@p5dedb36a.dip0.t-ipconnect.de) (Remote host closed the connection)
[22:46:20] <DPA> Improved version. This one doesn't have the limitation. But it may still warn about variable shadowing in that case: https://bpa.st/GUMQ
[22:46:55] *** Joins: tomboy64 (~tomboy64@user/tomboy64)
[22:47:04] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[22:47:07] *** Joins: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de)
[22:50:23] *** Joins: Sadale (~Sadale@user/sadale)
[22:51:19] <johnjay> i just realized printf has no single precision float specifier
[22:51:26] <floatcomplex> yup
[22:51:37] <johnjay> Are we simply made to suffer?
[22:51:40] <floatcomplex> yup
[22:51:56] <johnjay> At least i have chicken.
[22:52:45] <floatcomplex> i'm about to have sushi
[22:53:16] <floatcomplex> not every day can be carribean pork roast sandwich day
[22:53:45] *** Joins: arinov (~arinov@213.194.126.155)
[22:54:25] <mcf> float arguments to variadic functions like printf get promoted to double by default argument promotions
[22:54:37] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[22:54:46] <floatcomplex> yeah and that's bad
[22:55:08] <mcf> why?
[22:55:15] *** Guest2330 is now known as luca0N
[22:55:15] *** Quits: BSaboia (~bsaboia@187.19.138.198) (Quit: This computer has gone to sleep)
[22:55:28] *** Quits: quartz (~quartz@user/quartz) (Ping timeout: 252 seconds)
[22:56:08] <floatcomplex> plenty of hw has hw single floats but software doubles and is motivated to avoid doubles in any given application
[22:56:28] <mcf> ah
[22:56:28] <floatcomplex> those promotions could be the only trapping math
[22:56:37] *** Joins: quartz (~quartz@user/quartz)
[22:56:45] *** Joins: Sadale (~Sadale@user/sadale)
[22:57:42] <mcf> johnjay: not sure if that is what you were concerned with, but you can safely pass a float argument to printf with the %f specifier. the compiler will convert it to double
[22:57:58] <Feuermagier> will "scanf("%s", buf);" read/write indefinitely?
[22:58:01] *** Joins: Darkcoal (~user@2001:16a2:7737:4e00:5ccf:3fff:fea6:2111)
[22:59:18] <fizzie> It will match up to the next white-space character, and it's your responsibility to ensure `buf` is large enough, which is basically impossible.
[23:01:16] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[23:01:55] <fizzie> (After first reading and discarding any leading whitespace, same as all the other conversions except [, c and n.)
[23:01:58] <floatcomplex> tl dr: scanf is bad actually
[23:02:29] <sham1> Yeah. With scanf, just don't
[23:02:37] <sham1> It's like gets
[23:05:29] *** Joins: Laurenceb (~Laurenceb@56.184.147.147.dyn.plus.net)
[23:10:30] *** Quits: pixies (~i.am@user/marlboro) (Quit: I come down here for a fat woman and that's what I'm havin.)
[23:10:38] *** Quits: xa0s (xa0s@sdf.org) (Quit: leaving)
[23:11:44] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[23:11:55] <rsarson> thanks for the replies everyone, i think i'm slowly getting this.  do people on this channel post code to a website to be looked at?  if so, link me and i'll upload the little program i just wrote showing my understanding of the "register" storage-class specifier, if any one is interested in critiquing me
[23:13:35] *** Quits: Darkcoal (~user@2001:16a2:7737:4e00:5ccf:3fff:fea6:2111) (Ping timeout: 264 seconds)
[23:15:03] *** Joins: DrNick42 (~DrNick42@bastion.spikeyfishtech.uk)
[23:15:28] *** Joins: Darkcoal (~user@139.64.63.46)
[23:17:48] <ioxzev1z> rsarson, https://bpa.st/
[23:18:27] <Feuermagier> Is there a library function that spawns a shell?
[23:19:16] <DPA> system
[23:21:44] <DPA> ,cc system("echo $SHELL")
[23:21:49] <candide> DPA: /bin/bash
[23:24:24] *** Joins: wwilly (~wwilly@217.140.106.13)
[23:28:20] *** Joins: rgrinberg (~textual@ip11-246-50-179.ct.co.cr)
[23:30:16] <sham1> Do keep in mind that `system` is blocking. If you want non-blocking you need to find some other library other than the standard C one
[23:31:37] <DPA> Or start a c11 thread.
[23:31:59] <NRK[m]> you probably want to use `/bin/sh` instead of $SHELL though
[23:32:03] <Feuermagier> in the binary I'm trying to exploit stdlib.h is imported, but system() is never used - so no entry if I search for it with objdump. Any way I can access it despite that?
[23:33:48] *** Quits: brad_mssw (~bhouse@2601:344:4100:b490:f56d:3455:f283:1655) (Quit: Leaving)
[23:34:25] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 260 seconds)
[23:35:59] *** Joins: evocatus (~evocatus@84.51.113.13)
[23:39:40] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[23:41:10] <fizzie> Assuming it's a dynamically linked executable, the implementation will still be there together with all other library functions. Finding its address is another thing, though, and might involve understanding how library calls are made on your implementation (is a PLT involved?), which is quite implementation-specific.
[23:44:07] *** Joins: DepthDeluxe (~DepthDelu@2601:647:4700:d39:9569:26bf:ee64:8153)
[23:44:53] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[23:45:20] <nitrix> fizzie, For generic data structures, which approach do you personally take? (1) Effective types with void * (2) Templated headers with #define before the #include (3) Intrusive in the parent data structure / re-implemented in-situ (4) Type-safe macro hackery?
[23:45:32] *** Quits: DepthDeluxe (~DepthDelu@2601:647:4700:d39:9569:26bf:ee64:8153) (Client Quit)
[23:47:36] <nitrix> Also, does your choice differ on the complexity of the data structure? Maybe dynamic arrays are improvised in-situ, arenas are with effective types and hashmaps are macros or something.
[23:53:14] *** Quits: random-nick (~random-ni@87.116.183.63) (Ping timeout: 260 seconds)
[23:55:30] *** Joins: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca)
[23:55:47] <fizzie> I feel like I probably go with 3 for "basic" data structures and 1 for "complicated" ones (graphs or whatever), but I don't exactly have reasons for that choice.
[23:55:52] <fizzie> (I think I have at least one abortive attempt at 4 in such a way that it'd not generate duplicated identical code for different types of the same size, though I might be confusing that with some nonsense with C++ templates with integer parameters, where it sounds more easily doable; it's not like the preprocessor could really incorporate type sizes in identifiers without at least some help.)
[23:56:25] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[23:58:34] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
