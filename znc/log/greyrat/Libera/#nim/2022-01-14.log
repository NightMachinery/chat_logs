[00:02:39] <FromDiscord> <iffy (Matt Haggard)> Why is libpcre not listed as a dynamic library when I compile a program using it. https://play.nim-lang.org/#ix=3M6w If I pass `--passL:-lpcre`, then it is listed. But the program runs anyway -- what's going on?
[00:03:41] <FromDiscord> <exelotl> if you're doing anything advanced you still have to internalise all the "stringly typed" nonsense, the pitfalls like how redeclaring a class will just overwrite the old one, all the ridiculous function names, the only good debugger is a 3rd-party extension that crashes all the time, the major libraries are OOP monstrosities, the only good tooling is jetbrain's commercial stuff... I could go on üòÖ
[00:04:11] <FromDiscord> <exelotl> (edit) "jetbrain's" => "jetbrains'"
[00:04:24] <FromDiscord> <Yardanico> In reply to @iffy (Matt Haggard) "Why is libpcre not": because Nim doesn't link to dynamic libraries at the C stage
[00:04:35] <FromDiscord> <Yardanico> if you use `dynlib` (which pcre module does) it loads the dynamic library at runtime
[00:11:48] <FromDiscord> <iffy (Matt Haggard)> Oh, okay. That makes sense. I'm trying to cross-compile from macos to linux and use libpcre. It compiles fine, but running it on the linux machine I get `could not load: libpcre.so(.3|.1|)` even though `ldconfig -p | grep libpcre` shows that it's installed. How does Nim know what directory to look for dynlibs?
[00:12:34] <FromDiscord> <Yardanico> In reply to @iffy (Matt Haggard) "Oh, okay. That makes": it uses normal OS paths
[00:12:42] <FromDiscord> <Yardanico> what linux distro are you checking it on?
[00:14:27] <FromDiscord> <iffy (Matt Haggard)> docker ubuntu.. whatever version that gives me
[00:14:27] <FromDiscord> <iffy (Matt Haggard)> When I compile with `-d:nimDebugDlOpen` as the error message suggests, I then get\: `Dynamic loading not supported‚Üµcould not load: libpcre.so(.3|.1|)`
[00:15:02] <FromDiscord> <Yardanico> so you're compiling statically
[00:15:09] <FromDiscord> <Yardanico> if you compile statically you can't use dynamic libraries
[00:16:21] <FromDiscord> <Yardanico> if you want to statically link pcre you can do --dynlibOverride:pcre --passL:"-lpcre"
[00:16:22] <FromDiscord> <Yardanico> i think
[00:16:43] <FromDiscord> <Yardanico> dynlibOverride tells Nim that you don't want to load that dynlib library from runtime and will instead link it yourself
[00:17:02] <FromDiscord> <iffy (Matt Haggard)> I'm not doing anything special to say "be static." If I compile for macOS on macOS, it works fine and I don't do anything to say "be dynamic"
[00:17:54] <FromDiscord> <iffy (Matt Haggard)> I'll try that to see if it works. I'd rather dynamically link if that's possible. How do I tell it to dynamically link?
[00:18:15] <FromDiscord> <hmmm> jeez the guy is still going, at this point we should just find a 10 lines rust lib, wrap it, and make him happy
[00:18:49] <FromDiscord> <iffy (Matt Haggard)> "link it yourself" statically or dynamically?
[00:19:45] <FromDiscord> <Yardanico> so basically, the error tells you that you compiled your nim binary statically
[00:19:59] <FromDiscord> <Yardanico> if you compile a binary statically you can't load dynamic libraries, so you also have to compile pcre statically
[00:20:21] <FromDiscord> <Yardanico> not sure why it's compiled statically, that's quite weird, maybe the toolchain you're doing does that?
[00:20:24] <FromDiscord> <leorize> depends on the linker flags
[00:20:30] <FromDiscord> <Yardanico> can you show how you're crosscompiling from macos to linux?
[00:20:30] <FromDiscord> <leorize> default is dynamic
[00:20:41] <FromDiscord> <Yardanico> maybe the toolchain you're using statically links the binaries with musl
[00:20:45] <FromDiscord> <iffy (Matt Haggard)> Yeah, but don't run away\:
[00:21:40] <FromDiscord> <iffy (Matt Haggard)> https://github.com/iffy/nimxc/ then `nimxc c --target linux-amd64 -f --verbosity:3 samp.nim`
[00:22:27] <FromDiscord> <iffy (Matt Haggard)> I don't think it's using musl unless I specify a musl target, but I could be wrong
[00:23:34] <FromDiscord> <Yardanico> just `cat binary | grep "musl"` ?
[00:23:59] <FromDiscord> <iffy (Matt Haggard)> Nothing
[00:24:19] <FromDiscord> <iffy (Matt Haggard)> Does `-ldl` mean dynamic linking? I see that in the `clang` command when compiling macos-\>macos
[00:24:56] <FromDiscord> <iffy (Matt Haggard)> Ah nevermind, I see that in the macos-\>linux output, too
[00:27:38] <FromDiscord> <iffy (Matt Haggard)> Adding `--passC:-v --passL:-v` shows more of the commands being run and I do indeed see `"/Users/matt/zig/zig" -cc1 -triple x86_64-unknown-linux-musl`
[00:27:48] <FromDiscord> <Yardanico> yep, so as I said
[00:27:57] <FromDiscord> <Yardanico> if you want glibc you'll have to specifically mention that to zig cc
[00:28:18] <FromDiscord> <Yardanico> https://github.com/Yardanico/ircord/blob/master/zig-compile-vps.sh this is for the nim vps that runs nimbot and ircord
[00:28:28] <FromDiscord> <Yardanico> it's ubuntu 16.04 so i compile for glibc 2.24
[00:30:52] <FromDiscord> <iffy (Matt Haggard)> oh, nice! Okay, let me try some things. Thank you Yardanico!
[00:33:42] <FromDiscord> <iffy (Matt Haggard)> Success! Thank you!
[00:36:24] *** Joins: adigitoleo_ (~adigitole@139.168.64.98)
[00:37:19] *** Quits: adigitoleo (~adigitole@2001:8003:1d19:4500:9535:ae81:77e9:3952) (Ping timeout: 250 seconds)
[00:38:01] <FromDiscord> <Yardanico> also @iffy you need to put -fno-sanitize=undefined too
[00:38:11] <FromDiscord> <Yardanico> if you compile with -d:release or -d:danger zig by default has UBSAN enabled
[00:38:25] <FromDiscord> <Yardanico> and UBSAN really doesn't like refc or some other nim stuff so your programs can crash at runtime
[00:38:34] <FromDiscord> <iffy (Matt Haggard)> Oh, lame
[00:38:47] <FromDiscord> <iffy (Matt Haggard)> Would that apply to macOS and Windows as well, or just Linux targets?
[00:38:56] <FromDiscord> <Yardanico> https://github.com/ziglang/zig/wiki/FAQ#why-do-i-get-illegal-instruction-when-using-with-zig-cc-to-build-c-code
[00:39:05] <FromDiscord> <Yardanico> In reply to @iffy (Matt Haggard) "Would that apply to": i think for all targets
[00:39:24] <FromDiscord> <Yardanico> so `-fno-sanitize=undefined` to make it not do that
[00:42:58] *** Quits: ehmry (~quassel@2a03:3b40:fe:ab::1) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:44:04] *** Joins: ehmry (~quassel@2a03:3b40:fe:ab::1)
[00:46:49] *** Quits: ehmry (~quassel@2a03:3b40:fe:ab::1) (Client Quit)
[00:47:26] *** Joins: ehmry (~quassel@2a03:3b40:fe:ab::1)
[00:54:30] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[01:36:44] <FromDiscord> <Elegantbeef> @hmmm\: did the writeup help any?
[01:38:21] <FromDiscord> <Elegantbeef> Nim's non ref inheritance for some reason relies on runtime information on conversion so often errors when it should convert‚Üµ(@Patitotective)
[01:44:31] <NimEventer> New thread by Evoalg: Profiler for mac?, see https://forum.nim-lang.org/t/8802
[01:50:15] <FromDiscord> <Elegantbeef> It seems callgrind works on mac @evoalg use it with https://profilingviewer.com/ and you've got a good profiler
[01:50:36] <FromDiscord> <evoalg> ohhh!
[01:51:56] <FromDiscord> <evoalg> $42.99 for the viewer
[01:52:05] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[01:52:49] <FromDiscord> <Elegantbeef> Lol
[01:52:49] <FromDiscord> <Elegantbeef> uhh
[01:53:09] <nrds> <06Prestige99> kcachegrind on linux
[01:53:24] <FromDiscord> <Elegantbeef> You could also get qchachegrind
[01:53:35] <FromDiscord> <Elegantbeef> it's in brew
[01:54:28] <FromDiscord> <evoalg> ahhh good because "brew install valgrind" says "valgrind: Linux is required for this software." (and I'm on a mac) ... I'll try qchachegrind
[01:54:44] <FromDiscord> <Elegantbeef> qcachegrind even
[01:54:55] <FromDiscord> <Elegantbeef> Wait valgrind doesnt work on mac
[01:55:00] <FromDiscord> <Elegantbeef> Jeez life sucks there
[01:55:01] <nrds> <06Prestige99> rip really?
[01:55:43] <FromDiscord> <evoalg> well that's what it says, and I've never used a  profiler before
[01:55:52] <FromDiscord> <Elegantbeef> Evoalg when do you move to elementary OS so you can atleast pretend you're running mac, but have good dev tools üòõ
[01:56:10] <FromDiscord> <evoalg> üòâ
[01:56:29] <FromDiscord> <Elegantbeef> It seems there is a valgrind port of questionable quality
[01:56:38] <FromDiscord> <Elegantbeef> https://github.com/LouisBrunner/valgrind-macos/ for instance
[01:56:40] <nrds> <06Prestige99> sad apple noises
[01:58:28] <FromDiscord> <Elegantbeef> If you add that repository it seems you can get valgrind running there
[02:01:52] <FromDiscord> <hmmm> In reply to @Elegantbeef "<@887269570765791243>\: did the writeup": yo welcome back beef. I'm still not done with it, but I'm solidly on top of dumptree, quote do new, newvarstmt and result.repr. I've grokked the general sense of the if case but I'm missing many details and not even started on the construction üëç
[02:02:24] <FromDiscord> <hmmm> constructor lol
[02:03:35] <arkanoid> quick question, how to include a string of nim code at compile time or a file from custom path?
[02:09:15] <arkanoid> otherwise, is the cache folder supposed to be in path by default?
[02:10:28] <FromDiscord> <Elegantbeef> `const a = staticRead("path")`
[02:10:42] <FromDiscord> <Elegantbeef> If i get what you mean right
[02:10:54] <FromDiscord> <Elegantbeef> Oh you mean like that
[02:11:05] <FromDiscord> <Elegantbeef> I dont think the cache is supposed to be in path, i could be wrong
[02:16:03] <FromDiscord> <hmmm> oh noes araq locked the rust wrapper forum thread, it was so enjoyable üò©
[02:18:31] <arkanoid> Elegantbeef, sure that's how to read a file into stirng, but I want to import that nim code
[02:18:57] *** hexeme is now known as ldlework
[02:18:58] <arkanoid> I mean, I want to "include constAbsolutePath"
[02:21:13] <FromDiscord> <planetis> Damn I missed all the fun
[02:24:45] <FromDiscord> <planetis> Reminded me of the RS raylib wrapper
[02:24:50] <FromDiscord> <planetis> Omg so safe
[02:25:06] <FromDiscord> <planetis> üí©
[02:30:52] <FromDiscord> <planetis> Let's all wrap our pointer ops in unsafe blocks because then we will have a safer Nim
[02:31:02] <nrds> <06Prestige99> hm can an iterator not recurse?
[02:33:28] <nrds> <06Prestige99> e.g. https://play.nim-lang.org/#ix=3M6Y the error here
[02:33:36] <nrds> <06Prestige99> I may be missing something obvious
[02:38:12] <FromDiscord> <Elegantbeef> Inline iterators are templates
[02:38:20] <FromDiscord> <planetis> No they don't google it
[02:38:27] <FromDiscord> <Elegantbeef> Recursive iterators would never end
[02:38:39] <nrds> <06Prestige99> ah they're templates? Damn
[02:39:14] <nrds> <06Prestige99> @planetis haven't found anything useful
[02:43:56] <nrds> <06Prestige99> @Elegantbeef are closure iterators as well? Seems to have the same issue
[02:44:05] <nrds> <06Prestige99> would suck if I couldn't do this, lol
[02:47:27] <FromDiscord> <planetis> https://forum.nim-lang.org/t/7156
[02:48:08] <FromDiscord> <planetis> You can easily create a for loop macro
[02:48:17] <nrds> <06Prestige99> cool, thanks
[02:48:59] <FromDiscord> <planetis> It was funny at first but that troll is so repetitive, it became boring
[02:50:29] <FromDiscord> <planetis> Like all rust fanboys there complete idiots writing dogmatic comments on HN and reddit all day
[02:50:54] <FromDiscord> <planetis> As if Mozilla pays them
[02:51:29] <FromDiscord> <Yardanico> In reply to @planetis "It was funny at":  https://media.discordapp.net/attachments/371759389889003532/931327121777913936/unknown.png
[02:53:27] <FromDiscord> <Yardanico>  https://media.discordapp.net/attachments/371759389889003532/931327613438402590/unknown.png
[03:06:08] <FromDiscord> <Yardanico> is this some advanced form of SEO optimization for rust maybe
[03:08:01] <arkanoid> what's the meaning of "MyType[T; X: static T]"?
[03:09:40] <FromDiscord> <Elegantbeef> `X` is a value constrained to type `T`
[03:10:04] <FromDiscord> <Elegantbeef> `static T` in Nim means "generic delimited by value"
[03:11:06] <FromDiscord> <Elegantbeef> Think about `array[10, int]`
[03:11:32] <FromDiscord> <Elegantbeef> the first parameter of that is a static value that changes the type `assert array[10, int] isnot array[9, int]`
[03:12:04] <FromDiscord> <evoalg> In reply to @Elegantbeef "If you add that": When I install that valgrind port, is says it's only supported on older versions on mac os ... I have the latest mac os version
[03:12:50] <FromDiscord> <Elegantbeef> Ah that sucks
[03:13:01] <FromDiscord> <evoalg> (so is says that and bails on the install)
[03:13:21] <FromDiscord> <evoalg> Maybe Rika is right, I should install linux
[03:13:25] <arkanoid> Elegantbeef, ok! so X is a value of type T, not a type. This makes sense
[03:13:27] <arkanoid> thanks
[03:13:28] <FromDiscord> <Yardanico> doesn't macOS have profilers in xcode
[03:13:40] <FromDiscord> <Yardanico> In reply to @Yardanico "doesn't macOS have profilers": they should be decent enough
[03:15:04] <FromDiscord> <Yardanico> https://stackoverflow.com/questions/13554995/profiling-c-program-in-xcode for example
[03:15:23] <FromDiscord> <Yardanico> https://gist.github.com/loderunner/36724cc9ee8db66db305
[03:15:25] <FromDiscord> <evoalg> In reply to @Yardanico "doesn't macOS have profilers": There's "Instruments" ... it's used for all sort of things like iphone apps ... I looked at it but I guess I just don't know enough as I couldn't get it going, but I can take another look
[03:17:47] <FromDiscord> <Elegantbeef> Just making sure you built the program with `--debugger:native`
[03:17:49] <FromDiscord> <evoalg> Thanks for the links Yards
[03:18:00] <FromDiscord> <evoalg> ahhh true thanks beefy
[03:19:38] <FromDiscord> <planetis> > is this some advanced form of SEO optimization for rust maybe‚Üµhe can copy paste, we know he's not a plant
[03:19:49] <FromDiscord> <planetis> Turing complete reference
[03:20:16] <FromDiscord> <Yardanico> In reply to @planetis "> is this some": markov chain
[03:20:31] <FromDiscord> <ajusa> Was that rust guy really suggesting that Nim users add the entire rust toolchain to use a Nim library?
[03:21:05] <FromDiscord> <Yardanico> yes
[03:21:14] <FromDiscord> <Yardanico> i think his main question was something like "why no one writes nim wrappers for rust libraries?"
[03:21:15] <FromDiscord> <Yardanico> i sure wonder why
[03:23:15] <FromDiscord> <planetis> All this made me want to ask for a -keepBody switch for nbindgen
[03:24:36] <FromDiscord> <planetis> c2nim spoils me
[03:25:37] *** Quits: vicfred (~vicfred@user/vicfred) (Ping timeout: 240 seconds)
[03:31:48] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[03:31:49] <arkanoid> nimpy is great for python, futhark is great for C, should I consider nbindgen on same level?
[03:32:14] <arkanoid> I've never used rust in my life, just tutorial to understand what kind of beast it is
[03:32:38] <arkanoid> I'm interested in some scientific libraries written in it
[03:36:42] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[03:41:52] <noeontheend> From this whole conversation, I guess I'm the oddball--I deeply enjoy writing both Nim and Rust.
[03:48:46] <nrds> <06Prestige99> hm this blows that closure iterators can't recurse
[03:48:50] <arkanoid> fighting the borrow checker and the ugly syntax is keeping my away from rust, but apart from that, I do understand the revolution it brings
[03:56:44] <nrds> <06Prestige99> Couldn't get any of the macros working for my use case, for some reason
[03:57:15] <FromDiscord> <Elegantbeef> What are you trying to do?‚Üµ(<@709044657232936960_nrds=5b=49=52=43=5d>)
[03:57:28] <FromDiscord> <Elegantbeef> Oh right that reply was silly üòÄ
[04:00:33] <FromDiscord> <evoalg> In reply to @noeontheend "From this whole conversation,": What do you like about Nim (as compared to Rust)?
[04:00:49] <FromDiscord> <Elegantbeef> Prestige what're you doing!
[04:01:00] <nrds> <06Prestige99> https://play.nim-lang.org/#ix=3M6Y 
[04:01:06] <FromDiscord> <Elegantbeef> Attempting a recursive iteration over a binary tree?
[04:01:12] <nrds> <06Prestige99> yep
[04:01:18] <nrds> <06Prestige99> for postorder iteration
[04:05:34] <FromDiscord> <Elegantbeef> Why didnt the for loop macro not work
[04:05:46] <FromDiscord> <Elegantbeef> Or that without a double negative
[04:07:32] <noeontheend> evoalg: It's hard for me to pin down why, but I always tell people Nim fills me with joy. I think a big part is actually the syntactic flexibility--I feel like I can write in whatever style I want to whenever I want to. Another big plus is the stdlib. sequtils and sugar in particular make life very pleasant.
[04:08:08] <nrds> <06Prestige99> I tried a few and they failed for different reasons beef, I can try pulling them in again and making a playground
[04:08:38] <nrds> <06Prestige99> https://play.nim-lang.org/#ix=3M7b
[04:09:29] <FromDiscord> <evoalg> In reply to @noeontheend "<@900872397224280125>: It's hard for": interesting thank you, and what do you like about Rust (as compared to Nim)?
[04:16:29] <noeontheend> evoalg: Again, I'm struggling to articulate it because I think it's mostly matters of taste. I like how explicit (most) things are in Rust. Without going full Rust-evangelist, it is nice to have memory safety and no GC (don't throw things, I <3 Nim). Then Rust has enough modern features (ADTs, a reasonably powerful type system, various functional niceties, etc.) that I feel like it fits my style well.
[04:16:59] <FromDiscord> <Elegantbeef> well the only thing to throw is that `arc/orc` arent a conventional GC\: P
[04:17:03] <FromDiscord> <Sabena Sema> I find nim way more ergonomic in almost every way than rust
[04:17:25] <noeontheend> I will say that I didn't fully grok the borrow checker for a *long* time. Like, I thought I did, but I only recently realized I didn't. My last few projects in Rust have been much better because I'm finally understanding why things that I thought should work weren't working.
[04:17:44] <FromDiscord> <Elegantbeef> Prestige this is doable without recursion just requires a big ol' think
[04:18:48] <noeontheend> Elegantbeef: Touch√©, ARC/ORC are really nifty.
[04:18:56] <FromDiscord> <evoalg> In reply to @noeontheend "I will say that": Thank you!
[04:19:15] <FromDiscord> <Sabena Sema> you don't really save much memory with a non-recursive tree visitation
[04:19:25] <FromDiscord> <Sabena Sema> but can save some I guess
[04:19:33] <FromDiscord> <Elegantbeef> Well the issue prestige wants it in an iterator
[04:19:42] <FromDiscord> <Sabena Sema> oh, yeah
[04:19:48] <FromDiscord> <Sabena Sema> in that case make the stack explicit
[04:20:00] <nrds> <06Prestige99> oh
[04:20:07] <FromDiscord> <Elegantbeef> Sabena can probably help you make this work better than i
[04:20:52] <FromDiscord> <Sabena Sema> you basically just make a stack, push the root on, then write `while !stack.empty() ...`
[04:21:19] <FromDiscord> <Sabena Sema> visiting the current node is a pop followed by an operation
[04:22:04] <FromDiscord> <Sabena Sema> traversing to the next node is a peek followed by pushing the node then continuing
[04:22:05] <FromDiscord> <Sabena Sema> etc
[04:23:11] <FromDiscord> <Rika> I sleep and the rust thread gains 25 replies
[04:23:13] <FromDiscord> <Rika> Jesus
[04:23:31] <FromDiscord> <Elegantbeef> I slept and it was made and locked with 25 replies üòÄ
[04:23:52] <FromDiscord> <Rika> I‚Äôll backread the channel wait
[04:25:45] <FromDiscord> <Sabena Sema> There's almost no reliable evidence that any language reduces overall number of bugs (I think C vs writing assembly has some compelling evidence)
[04:26:32] <FromDiscord> <Sabena Sema> it's plausible that it does, but it's hard to study effectively, most people who do study it don't do very good experimental design, and results so far have not shown much
[04:26:55] <FromDiscord> <Elegantbeef> hey `set[T]` can easily reduce bugs caused by bitwise operations üòõ
[04:27:54] <nrds> <06Prestige99> Sabena: so I'd basically build the stack until I reach a leaf node, then yeild the leaves in left, right order?
[04:28:00] <nrds> <06Prestige99> That may work..
[04:28:59] <FromDiscord> <Sabena Sema> yeah you probably want "peak always, then pushes for children (with continue) then yield, then pop"
[04:29:20] <FromDiscord> <Sabena Sema> In reply to @Elegantbeef "hey `set[T]` can easily": it might, it might not
[04:29:33] <FromDiscord> <Sabena Sema> it's plausible that it does
[04:30:00] <FromDiscord> <Elegantbeef> I was mostly joking
[04:31:13] <FromDiscord> <Sabena Sema> it ends up being the same amount of memory basically, but it's heap memory, so you tend to be able to use a lot more
[04:31:35] <FromDiscord> <Sabena Sema> and it's in reality slightly less memory because you don't have to store the return address or frame pointers or whatnot
[04:33:32] <FromDiscord> <Sabena Sema> I do like Araq's quote about round wheels, you can't get a round wheel via incremental improvements
[04:34:13] <FromDiscord> <Sabena Sema> Anyway wrapping rust has the same problem as C++, the abi isn't usually stable
[04:34:22] <FromDiscord> <Sabena Sema> for rust it's worse because the language abi itself is unstable
[04:34:52] <FromDiscord> <Sabena Sema> also: I _hate_ that rust doesn't have any implicit widening conversions
[04:35:14] <FromDiscord> <Sabena Sema> it's like someone saw C's integral promotions (which are _different_) and just decided all widening was bad
[04:35:43] <FromDiscord> <Sabena Sema> imho Rust's standard library _is_ extremely good
[04:38:14] <FromDiscord> <Patitotective> In reply to @Patitotective "Hey <@!392962235737047041>, I'm having": i think i've got the answer, make three different rules, the start of the sequence, the content and the end, so it starts saving the elements in the content until the end
[05:20:59] *** adigitoleo_ is now known as adigitoleo
[05:32:27] <FromDiscord> <Patitotective> I have an object and I want the `seqRef` field to be a reference to a sequence so if I change that field the sequence changes, but I'm not sure how to set that field to something‚Üµ`ref mySeqVar`??‚Üµhttps://play.nim-lang.org/#ix=3M7u
[05:33:29] <FromDiscord> <Elegantbeef> To have what you want you need to make the seq a reference aswell
[05:34:18] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3M7y
[05:34:33] <FromDiscord> <Patitotective> Oh, that makes sense
[05:34:34] <FromDiscord> <Patitotective> Thanks
[05:34:36] <FromDiscord> <Patitotective> üôÉ
[05:35:27] <nrds> <06Prestige99> hmm, @Sabena Sema working on postorder for a binary tree, the only solution I can think of is building the entire stack _first_, then iterating over it and yielding each element. Do you know if there's a way I could do that without this?
[05:35:35] <nrds> <06Prestige99> maybe if I had a do while
[05:36:36] <FromDiscord> <dumbmahreeo> Hey, is someone else having trouble cross compiling to ARM64 from x86\_64?‚Üµ‚ÜµThe compilation doesn't fail but the produced binary is still a x86\_64
[05:37:07] <FromDiscord> <Elegantbeef> how are you attempting to compile it?
[05:39:49] <FromDiscord> <dumbmahreeo> immagine.png https://media.discordapp.net/attachments/371759389889003532/931369484386713660/immagine.png
[05:42:22] <FromDiscord> <Elegantbeef> You did read https://nim-lang.org/docs/nimc.html#crossminuscompilation ?
[05:42:30] <FromDiscord> <dumbmahreeo> yep
[05:44:19] <FromDiscord> <Elegantbeef> compile with `--verbosity:2` to see the command it calls
[05:44:35] <FromDiscord> <Elegantbeef> I swear there is a way to get it to echo the C compiler command but i dont recall
[05:44:37] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[05:44:46] <FromDiscord> <Elegantbeef> it might be `--listCmd`
[05:45:04] <FromDiscord> <dumbmahreeo> It's quite the output, gonna put it on pastebin
[05:45:13] <FromDiscord> <Elegantbeef> Ah yes `--listCmd` does
[05:45:53] <FromDiscord> <dumbmahreeo> https://pastebin.com/Ay0QwZrE‚Üµ‚ÜµThis is --verbosity\:2 output, gonna try --listCmd now
[05:45:56] <FromDiscord> <Bung> In reply to @PMunch "That is still a": I dont know since it changes main branch,  I can assuming my first PR will be merged , then create PRs base on that, If the first PR can
[05:46:20] <FromDiscord> <dumbmahreeo> immagine.png https://media.discordapp.net/attachments/371759389889003532/931371126205055066/immagine.png
[05:46:21] <FromDiscord> <Elegantbeef> I just tried `--arm64` it compiled with no issue but `--arm` threw an error
[05:46:30] <FromDiscord> <Bung> (edit) "can" => "can't not be merged, I just waste of my time."
[05:47:15] <FromDiscord> <dumbmahreeo> Yardanico on the telegram group is telling me that I need a separate C compiler to cross compile
[05:47:31] <FromDiscord> <dumbmahreeo> I've never attempted C or C++ cross compilation so I know nothing about them
[05:47:39] <FromDiscord> <dumbmahreeo> Only time I've tried cross compilation was with Rust and Go
[05:47:48] <FromDiscord> <dumbmahreeo> [Edit](https://discord.com/channels/371759389889003530/371759389889003532/931371419365945355): I've never attempted C or C++ cross compilation so I know nothing about this
[05:47:51] <FromDiscord> <Elegantbeef> Yea you need to get the arm tool chain
[05:47:52] <FromDiscord> <Elegantbeef> It might be in your package manager
[05:48:15] <FromDiscord> <Elegantbeef> Like when i try with `--cpu:arm` i get `/bin/sh: 1: arm-linux-gnueabihf-gcc: not found`
[05:51:03] <FromDiscord> <auxym> hey beef, in your tusb stuff, why are you using `codegendecl: "$1 $2$3"` a lot, instead of say `{.cdecl.}`?
[05:51:29] <FromDiscord> <Elegantbeef> Cant recall atm
[05:51:38] <FromDiscord> <dumbmahreeo> Perhaps the package aarch64-linux-gnu-gcc will do
[05:51:40] <FromDiscord> <Elegantbeef> Think it was related to what they expected
[05:51:41] <FromDiscord> <Elegantbeef> especially `const`
[05:51:49] <FromDiscord> <auxym> k
[05:56:16] *** Joins: neurocyte091709 (~neurocyte@user/neurocyte)
[05:57:54] *** Quits: neurocyte09170 (~neurocyte@user/neurocyte) (Ping timeout: 250 seconds)
[05:57:54] *** neurocyte091709 is now known as neurocyte09170
[05:58:17] <FromDiscord> <dumbmahreeo> Nope, absolutely nothing changed after installing the package along with all its dependencies (glibc, headers, etc...)
[05:59:22] <FromDiscord> <Elegantbeef> Given that `arm64` doesnt error and produces a binary that runs on amd64 i think there is a misconfiguration with the c compiler
[05:59:24] <FromDiscord> <Elegantbeef> I could be wrong
[06:01:50] <FromDiscord> <auxym> https://nim-lang.org/docs/nimc.html#crossminuscompilation
[06:02:04] <FromDiscord> <Elegantbeef> If only someone didnt link it before!
[06:02:41] <FromDiscord> <dumbmahreeo> I already read it before asking \:D‚Üµ(@auxym)
[06:02:52] <FromDiscord> <auxym> oh
[06:03:03] <FromDiscord> <auxym> did you set the `aarch64.linux.gcc...` options in your nim.cfg?
[06:05:02] <FromDiscord> <auxym> in case it helps: see here the options I pass for arm cortex mcus (`arm-none-eabi-gcc`): https://github.com/auxym/nim-on-samd21/blob/master/config.nims#L13
[06:05:10] <FromDiscord> <dumbmahreeo> sent a code paste, see https://play.nim-lang.org/#ix=3M7z
[06:06:36] <FromDiscord> <auxym> not sure, I set them myself in config to get it to work. See above link, combined with cli args `--os:any --cpu:arm`
[06:07:47] <FromDiscord> <auxym> https://github.com/nim-lang/Nim/blob/devel/config/nim.cfg#L23
[06:07:51] <FromDiscord> <Elegantbeef> I think for crosscompilation they dont have a consistent name which is why it's something you have to set
[06:08:37] <FromDiscord> <auxym> That's the default config, it calls `arm-linux-gnueabihf-gcc` for `--cpu:arm`, which is the cross toolchain for 32bit arm
[06:09:09] <FromDiscord> <Elegantbeef> Oddly `--cpu:arm64` calls your default gcc
[06:09:52] <FromDiscord> <dumbmahreeo> Wait, I solved
[06:09:56] <FromDiscord> <auxym> no idea, it might fall back on the default if there's nothing in the config?
[06:10:06] <FromDiscord> <Elegantbeef> Perhaps
[06:10:09] <FromDiscord> <dumbmahreeo> immagine.png https://media.discordapp.net/attachments/371759389889003532/931377117114023986/immagine.png
[06:10:24] <FromDiscord> <dumbmahreeo> Yardanico told me to simply point to the aarch64 compiler trough those flags
[06:10:32] <FromDiscord> <Elegantbeef> no make a `config.nims` with those
[06:10:35] <FromDiscord> <Elegantbeef> now\
[06:10:37] <FromDiscord> <Elegantbeef> And you're holden
[06:10:40] <FromDiscord> <Elegantbeef> golden even
[06:10:42] <FromDiscord> <dumbmahreeo> Which I guess is what auxym was telling me to do
[06:10:43] <FromDiscord> <auxym> yeah that's the equivalent of setting those in the config
[06:10:51] <FromDiscord> <dumbmahreeo> Yeah, that's what I'll
[06:11:00] <FromDiscord> <dumbmahreeo> Yeah, that's what I'll do. This was just a test though
[06:11:19] <FromDiscord> <auxym> I thing you can define an arbitrary string for the cpu? Like you could call it arm64 or aarch64?
[06:11:22] <FromDiscord> <Elegantbeef> Yea we were all pointing to manually setting those üòÄ
[06:11:26] <FromDiscord> <Elegantbeef> So cheers, we have it!
[06:11:35] <FromDiscord> <auxym> If you want to differentiate from eabihf (332bit arm)
[06:11:38] <FromDiscord> <Elegantbeef> nah if you dont pass one of the valiid cpu flags iterrors
[06:11:45] <FromDiscord> <auxym> ah
[06:11:48] <FromDiscord> <Elegantbeef> it errors\
[06:11:57] <FromDiscord> <dumbmahreeo> Now time to try statically linking with musl while crosscompiling
[06:12:12] <FromDiscord> <Elegantbeef> like i tried `nim --cpu:dinglebop` to see and it errored with a list of valid CPUs
[06:12:38] <FromDiscord> <Elegantbeef> You can do `-d:arm64` which is used by your `config.nims`
[06:13:14] <FromDiscord> <auxym> arm64 is in there, that's probably what you should use for `--cpu` @DumbMahreeo
[06:13:34] <FromDiscord> <auxym> combined with `arm64.gcc...` options in nim.cfg
[06:13:39] <FromDiscord> <dumbmahreeo> That's what I use for --cpu, aarch is just how the compiler toolchain is called‚Üµ(@auxym)
[06:13:40] <FromDiscord> <Elegantbeef> Yep
[06:13:48] <FromDiscord> <auxym> all good
[06:13:57] <FromDiscord> <Elegantbeef> that's why it compiles with system
[06:14:05] <FromDiscord> <Elegantbeef> It doesnt have a default and falls through system gcc
[06:14:19] <FromDiscord> <Elegantbeef> Wonder if a PR should be made for this
[06:14:27] <FromDiscord> <auxym> yeah. someone should probably put in a pr
[06:14:37] <FromDiscord> <Elegantbeef> I'm a numpty so i dont know üòÄ
[06:15:38] <FromDiscord> <Elegantbeef> I wonder how many fun conversations i miss from telegram
[06:15:43] <FromDiscord> <Elegantbeef> I know they despised when they got bridged here üòÄ
[06:22:59] <FromDiscord> <evoalg> what's this telegram channel you speak of?
[06:23:32] <FromDiscord> <Elegantbeef> There is a nim chat on telegram
[06:24:02] <FromDiscord> <evoalg> I have telegram ... dunno if it's worth checking out tho
[06:24:14] <FromDiscord> <Elegantbeef> Probably a few people that dont come here there
[06:24:43] <FromDiscord> <Elegantbeef> It's 100% less me so clearly superior
[06:24:54] <FromDiscord> <dumbmahreeo> I just realized I'm also on the Discord after receiving the ping both on Matrix and on Discord
[06:24:54] <FromDiscord> <evoalg> ... not to sound like a stalker, but I'll stick to where you are beefy
[06:25:19] <FromDiscord> <Elegantbeef> I think i'll stay where i am aswell though
[06:25:50] <FromDiscord> <evoalg> Then I'll do nothing ... I'm good at that (just ask my boss)
[06:25:51] <FromDiscord> <dumbmahreeo> Btw I think eventually I'm gonna create something like Rust's cross. Containers to have seamless crosscompilation
[06:26:16] <FromDiscord> <Elegantbeef> When i was searching for the flags i diid stumble on https://github.com/iffy/nimxc
[06:26:24] <FromDiscord> <Elegantbeef> Might be up your alley
[06:26:58] <FromDiscord> <Elegantbeef> Evo you capable of profiling yet?
[06:27:23] <FromDiscord> <evoalg> no ... I'm going to use something to time proc's myself
[06:28:02] <FromDiscord> <Elegantbeef> Hey it's template time!
[06:28:12] <FromDiscord> <Elegantbeef> PS use `std/monotimes`
[06:28:48] <FromDiscord> <evoalg> ok thanks ... I think in my notes I have an example of monotimes .. .maybe it was one of your eg's
[06:28:58] <FromDiscord> <Elegantbeef> Perhaps
[06:29:00] <FromDiscord> <evoalg> it's not a template tho
[06:29:40] <FromDiscord> <evoalg> I was just going to do it horribly and update some global vars instead the proc
[06:30:32] <FromDiscord> <evoalg> I was even thinking of writing a bash script to copy nim code and substitute it in ... see what I mean by horrible?
[06:31:22] <FromDiscord> <evoalg> I mean take nim source file and substitute it into a 2nd nim source file ... in case there are lots of procs
[06:31:40] <FromDiscord> <dumbmahreeo> Everything works like a charm, aarch64 cross compilation + musl static linking. Thanks everyone for the help
[06:31:42] <FromDiscord> <Elegantbeef> templates you're describing templates üòÄ
[06:31:54] <FromDiscord> <Elegantbeef> Or macros
[06:32:15] <FromDiscord> <evoalg> so with templates, I'd just do a call at the beginning of the proc and the end?
[06:34:29] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3M7F
[06:34:48] <FromDiscord> <evoalg> oh!!
[06:35:52] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/WXq
[06:36:25] <FromDiscord> <evoalg> ahhh ok as it doesn't care what the body is
[06:37:51] <FromDiscord> <evoalg> that's cunning, and simple!
[06:40:51] <FromDiscord> <evoalg> that 2nd code times the calling of the two procs, but both of those proc's are timed too ... so I get total and breakdown ... amazing
[06:43:06] <FromDiscord> <evoalg> `static string` because the template it in-lined at compile time, ok I see
[06:43:23] <FromDiscord> <Elegantbeef> the calls for monotime and echo have some cost, nah the static is just so you dont do silly stuff üòõ
[06:44:25] <FromDiscord> <evoalg> so if it was just `string` instead of `static string` what silliness could I do?
[06:45:14] <FromDiscord> <Elegantbeef> Pass in runtime strings basically is it
[06:45:18] <FromDiscord> <Elegantbeef> So concatenated funky stuff
[06:51:15] <FromDiscord> <evoalg> sent a code paste, see https://play.nim-lang.org/#ix=3M7H
[06:51:31] <FromDiscord> <Rika> The time code has overhead
[06:51:33] <FromDiscord> <Elegantbeef> echoing takes time
[06:51:43] <FromDiscord> <Rika> That as well
[06:53:44] <FromDiscord> <Elegantbeef> Really the time it should be used to time overall operations and not procedures do to the overhead
[06:54:52] <FromDiscord> <evoalg> ahh ok ... I was hoping to extend this to update the total times a proc is called (adding to a variable for the proc each time it's called) so at the end I can have total times for each proc ... and maybe the number of times they are called ... just to get a sense of which proc is using most of the time etc. I guess I can use a table
[07:04:25] <FromDiscord> <evoalg> Can the template get the name of the proc it's inside? .. or is that asking a bit much from it?
[07:04:43] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:05:40] <FromDiscord> <Elegantbeef> It can with a hack
[07:05:40] <FromDiscord> <Elegantbeef> But as is it cannot
[07:06:15] <FromDiscord> <evoalg> that's fine ... I'll keep it simple and in a way I can understand ... it's a great little temple, thank you beefy!
[07:10:31] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3M7J
[07:13:38] <FromDiscord> <evoalg> oh!
[07:13:49] <FromDiscord> <Elegantbeef> Evo's like "Well cool but i dont know what's going on, send help"
[07:13:59] <FromDiscord> <evoalg> lol
[07:13:59] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[07:14:11] <FromDiscord> <Elegantbeef> Oh guess we dont need the static string parameter anymore
[07:15:56] <FromDiscord> <evoalg> that feeling a bliss but confusion at the same time ... it's like you're giving me drugs
[07:16:14] <FromDiscord> <Elegantbeef> Drugs are cool dont got to school kids
[07:16:29] <FromDiscord> <Elegantbeef> I think that's what we're supposed to say
[07:16:53] <FromDiscord> <evoalg> that's what all the dealers say ... even the dealer kids
[07:18:02] <FromDiscord> <evoalg> I'm sure before long I'll be back for more
[07:18:22] <FromDiscord> <Elegantbeef> It'll give you a small amount of enjoyment but just more want for knowledge
[07:18:24] <FromDiscord> <Elegantbeef> Is learning a drug
[07:31:01] <FromDiscord> <evoalg> sent a code paste, see https://play.nim-lang.org/#ix=3M7P
[07:36:07] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3M7Q
[07:37:28] <FromDiscord> <evoalg> magic!
[07:38:39] <FromDiscord> <evoalg> @hmmm take a look at this!
[07:38:48] <FromDiscord> <Elegantbeef> Of course you can make an overload that takes a string you can put in place of `getProcName(start)` like it was doing so you can have named blocks
[07:39:35] <FromDiscord> <evoalg> Right
[07:42:18] <FromDiscord> <evoalg> I'm tempted to just stay with the template
[08:00:00] <FromDiscord> <huantian> Just to make sure I‚Äôm C-ing correctly, a Window is the same as a ptr UncheckedArray[ptr Window] right
[08:00:40] <FromDiscord> <Elegantbeef> Sounds right
[08:01:42] <FromDiscord> <huantian> Then I have still 0 idea why XQueryTree is only filling the first element of the array
[08:06:13] <FromDiscord> <Elegantbeef> Can i see the code again?
[08:07:26] <FromDiscord> <huantian> Yeah sure, just 1 dev
[08:07:29] <FromDiscord> <huantian> Sec
[08:17:10] <FromDiscord> <mratsim> In reply to @leorize "btw <@570268431522201601>, are you": My time has been blackholed by being a father ¬Ø\_(„ÉÑ)_/¬Ø
[08:17:37] <FromDiscord> <huantian> sent a code paste, see https://play.nim-lang.org/#ix=3M7Y
[08:18:46] <FromDiscord> <congusbongus> In reply to @mratsim "My time has been": then your children must inherit your duties, for the good of the kingdom
[08:23:58] <FromDiscord> <mratsim> In reply to @congusbongus "then your children must": they certainly cry for food efficiently enough. With O(1) complexity
[08:24:39] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/hil
[08:24:43] <FromDiscord> <Elegantbeef> I dont get why it returns an incorrect length but it does
[08:29:49] <FromDiscord> <huantian> It doesn't make sense that there's only one child window though
[08:30:16] <FromDiscord> <huantian> thanks for the help tho
[09:15:15] <FromDiscord> <evoalg> In reply to @mratsim "My time has been": Congrats!
[09:54:18] <NimEventer> New thread by Bj0: Cannot instantiate: 'T' with importcpp generic, see https://forum.nim-lang.org/t/8803
[10:20:17] *** Quits: anadahz (~user@gateway/tor-sasl/anadahz) (Remote host closed the connection)
[10:20:38] *** Joins: anadahz (~user@gateway/tor-sasl/anadahz)
[10:41:40] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849)
[10:42:25] <NimEventer> New thread by Ethernaut: Variable prints out its type correctly, but can't access members and I can't figure out why, see https://forum.nim-lang.org/t/8804
[10:51:26] <FromDiscord> <evoalg> sent a code paste, see https://play.nim-lang.org/#ix=3M8f
[10:52:16] <FromDiscord> <evoalg> https://termbin.com/jjlo
[10:52:51] <FromDiscord> <evoalg> (since play is down)
[10:53:56] <FromDiscord> <Elegantbeef> `sortedByIt` exists btw
[10:54:26] <FromDiscord> <Elegantbeef> Oh wait that's a table
[10:55:45] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3M8g
[10:57:20] <FromDiscord> <Elegantbeef> tinge cleaner even
[10:57:24] <FromDiscord> <evoalg> "tingle" <-- I like that word .... yea I sort of remembered that was hasKeyOrPut but then I sort of remembered it was slow or something (but I'm probably misremembering)
[10:57:38] <FromDiscord> <evoalg> no I'm sticking with tingle
[10:57:48] <FromDiscord> <Elegantbeef> It's not slow it just lacks lazy evaluation
[10:58:02] <FromDiscord> <Elegantbeef> So `(1, delta)` is created regardless of if it has the key
[10:58:47] <FromDiscord> <evoalg> ok nice thank you!
[10:59:00] <FromDiscord> <Elegantbeef> The issue is when that's a function call or something costly
[10:59:54] <FromDiscord> <evoalg> a function call to create the key?
[11:00:10] <FromDiscord> <Elegantbeef> A function to create the new entry
[11:00:35] <FromDiscord> <Elegantbeef> Say you do `calltimes.hasKeyOrPut(name, aCostlyCalc())`
[11:01:01] <FromDiscord> <evoalg> ahhhh right!
[11:01:21] <FromDiscord> <evoalg> In reply to @Elegantbeef "So `(1, delta)` is": that's why you said this ... I understand now!
[11:01:31] <FromDiscord> <Elegantbeef> With lazy evaluation that you get from a template you can only do that when you add a key
[11:02:50] <FromDiscord> <evoalg> now I'm confused again by your last sentence üòâ
[11:04:03] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/Nru
[11:04:40] <FromDiscord> <Elegantbeef> Unlike if a function `newVal` will get moved into a conditional statement and only get called if it's met
[11:05:19] <FromDiscord> <Elegantbeef> This gives us lazy evaluation like behaviour, we can pass `aCostlyCalc()` to a call, but it only is evaluated under a specific scenario
[11:06:28] <FromDiscord> <Elegantbeef> Versus a function call which is eagerly evaluated, when we call the present `hasKeyOrPut` all arguments are called if they're a function then it calls the procedure
[11:08:28] <FromDiscord> <Elegantbeef> This just comes down to templates being code substitution and as such dont call function arguments, they just take them as is and paste them at the call site
[11:09:50] <FromDiscord> <evoalg> I think I may be falling in love with templates
[11:10:00] <FromDiscord> <Elegantbeef> They're quite nice tools
[11:10:26] <FromDiscord> <Elegantbeef> They give you flexibility and reduce redundancy
[11:11:03] <FromDiscord> <Elegantbeef> The half joke i say is i hate coding so i use metaprogramming to make me not code as much
[11:12:02] <FromDiscord> <evoalg> hehehe gotcha ... but ... but with macros, it's like learning a whole new languages by the looks
[11:12:34] <FromDiscord> <Elegantbeef> And i mean like your first reaction to do what you're doing was to use an external tool to generated code, which ime is what languages without templates/macros force you to do
[11:12:48] <FromDiscord> <Elegantbeef> It's not a whole knew language as much as learning what this language does under the hood
[11:12:56] <FromDiscord> <Elegantbeef> You learn the languages semantics at a lower level
[11:13:26] <FromDiscord> <evoalg> You got me there
[11:13:41] <FromDiscord> <evoalg> guilty as charged
[11:14:04] <FromDiscord> <Elegantbeef> Macros really arent that complex once you realize you're a manual macro writer
[11:15:33] <FromDiscord> <Elegantbeef> Like for the getting proc name stuff the code that's written goes up the owner and looks for a `proc`, which is basically what you'd do when looking for the proc name
[11:15:55] <FromDiscord> <Elegantbeef> You'd look until you find the first `proc name` and then copy that name to where you want
[11:16:06] <FromDiscord> <Elegantbeef> Owners in nim are a bit more complicated but you can just think of them as any named scope
[11:16:40] <FromDiscord> <evoalg> ok
[11:17:27] <FromDiscord> <evoalg> thank you btw for letting me start to get comfy with templates first ... starting to, but a long way to go üòâ
[11:17:54] <FromDiscord> <evoalg> and that template you gave me sold it
[11:17:55] <FromDiscord> <Elegantbeef> The thing that tickles my brain is that it's technically possible to have an entire compiler written in macros üòÄ
[11:18:10] <FromDiscord> <evoalg> LOL!
[11:18:25] <FromDiscord> <Elegantbeef> You'd have to be a masochist todo it, but it's technically possible, since macros can represent any code
[11:18:53] *** Joins: PMunch (~PMunch@user/pmunch)
[11:20:17] <FromDiscord> <Elegantbeef> Once you use macros and templates you're corrupted and will miss them where you dont have them
[11:20:18] <FromDiscord> <evoalg> it is possible to write a nim-non-macro-to-macro converter?
[11:20:38] <FromDiscord> <Elegantbeef> You mean take nim code and generate a macro from it?
[11:20:58] <FromDiscord> <evoalg> yea ... like, it takes a whole program and automatically converts it to macros but it does the same thing
[11:21:08] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/macros.html#dumpAstGen.m%2Cuntyped
[11:21:18] <FromDiscord> <evoalg> ohhhhhhh
[11:22:04] <FromDiscord> <Elegantbeef> Not that it'd be very useful or pointful, it's probably possible
[11:22:30] <FromDiscord> <evoalg> yea true I dunno why I was wondering about that
[11:23:17] <FromDiscord> <evoalg> I must be a tingle tired
[11:23:32] <FromDiscord> <Elegantbeef> lol
[11:24:09] <PMunch> I mean you can wrap your entire codebase in a macro call, that would turn it into a macro :P
[11:24:24] <FromDiscord> <evoalg> hehe true
[11:24:26] <FromDiscord> <Elegantbeef> In the loosest sense
[11:24:52] <FromDiscord> <Elegantbeef> All code needs to be  making nodes or it doesnt count!
[11:26:02] <FromDiscord> <evoalg> "code with nodes"
[11:27:07] <FromDiscord> <Elegantbeef> Stuff like this though is what just makes me love templates https://github.com/beef331/nimscripter/blob/master/tests/example/first.nims#L48-L71
[11:27:16] <FromDiscord> <Elegantbeef> Plays right into my i dont like writing code üòõ
[11:28:33] <FromDiscord> <evoalg> hang on ... what does that do?
[11:29:01] <FromDiscord> <Elegantbeef> Emits a bunch of procedures named `getType` so for `uint16` emits `getunit16`
[11:29:08] <FromDiscord> <Elegantbeef> `uint16`\
[11:29:36] <FromDiscord> <Elegantbeef> Templates have a symbol joining feature where you can abuse the acc quote to join a symbol
[11:30:05] <FromDiscord> <evoalg> "acc"?
[11:30:18] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/3dB
[11:30:27] <FromDiscord> <Elegantbeef> accent i think, dont recall
[11:31:12] <FromDiscord> <evoalg> ohhhh
[11:31:28] <FromDiscord> <Elegantbeef> It's just any identifier that surrounded by backticks
[11:31:54] <FromDiscord> <evoalg> so `makeNumTest(char)` is expanded into what?
[11:32:09] <FromDiscord> <evoalg> (it's still hurting my brain)
[11:32:24] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/xUt
[11:32:47] <FromDiscord> <Elegantbeef> it's pointless everywhere but this test
[11:33:00] <FromDiscord> <Elegantbeef> I need to ensure that a char going in matches a char coming out
[11:33:09] <FromDiscord> <evoalg> ohhhhh ... ohhh right ... and so you cunning made the "getchar" through abuse
[11:33:19] <FromDiscord> <evoalg> ahhhh
[11:34:33] <FromDiscord> <Elegantbeef> I know pmunch also uses it a fair bit, think he's the one that showed me
[11:34:56] <FromDiscord> <evoalg> the abuse?
[11:35:03] <PMunch> Uses what?
[11:35:25] <FromDiscord> <Elegantbeef> backticks to join a template paramter with a identifer
[11:35:37] <PMunch> Ah right, yes that I use from time to time :)
[11:35:39] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[11:35:42] <PMunch> Nifty little feature
[11:36:07] <FromDiscord> <Elegantbeef> Oh i know it put me prestige and saem in a loop of "where the fuck does this function exist"
[11:36:29] <FromDiscord> <evoalg> that's not possible with a proc right?
[11:36:41] <FromDiscord> <Elegantbeef> Think prestige was working on nimlsp and we stared for like 10 minutes just confused, then one of us remembered the joining stuff
[11:37:31] <FromDiscord> <Elegantbeef> Also pmunch what's with the playground?
[11:37:38] <FromDiscord> <Elegantbeef> Shit broke
[11:37:41] <PMunch> Anything wrong with it?
[11:37:48] <FromDiscord> <Elegantbeef> Cant access it
[11:38:05] <PMunch> Huh, that's not great
[11:39:29] <PMunch> I think Docker might've filled up the hard-disk again..
[11:41:03] <FromDiscord> <Elegantbeef> I'll try not to make too many examples this time
[11:41:33] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849)
[11:42:03] <FromDiscord> <Elegantbeef> Well i mean you can use accquoted identifiers anywhere just templates allow you to paste the  arguments inside them which then expands‚Üµ(@evoalg)
[11:42:28] <FromDiscord> <Elegantbeef> It doesnt make sense with a proc since they're not expanding and cannot inject ast
[11:44:29] <FromDiscord> <evoalg> ahhh I meant: is it something that templates can do that proc's can't ... I wasn't challenging you to create a proc that does it ... it seemed to me that it wouldn't make sense for a proc because ... I dunno actually!
[11:46:37] <FromDiscord> <Elegantbeef> Well even if a proc code it'd be a case of well yes you can do it, but it's pointless cause you cannot call it
[11:46:57] <PMunch> @Elegantbeef, problem is that for every example docker leaves a tiny little bit of data behind that doesn't get cleaned out
[11:47:41] <FromDiscord> <evoalg> cron a bash script to delete?
[11:47:54] <FromDiscord> <Elegantbeef> Yea i figured which is why i jokingly said i'd make fewer examples cause i do make a lot
[11:50:42] <FromDiscord> <evoalg> is a new docker fired up for each example??
[11:51:15] <PMunch> @evoalg, you're not supposed to delete these files manually, so they can trip up docker and break stuff (once I even had to completely reinstall docker)
[11:51:23] <PMunch> So I can't really put it in a cron job..
[11:51:33] <FromDiscord> <evoalg> ahhh true
[12:11:26] <FromDiscord> <mratsim> In reply to @evoalg "that's not possible with": It is, if the proc is in a template üòâ
[12:11:53] <FromDiscord> <evoalg> hehe ok üôÇ
[12:14:05] <FromDiscord> <retkid> how can i create a thread and add it to an array of threads
[12:14:14] <FromDiscord> <retkid> ie
[12:14:53] <PMunch> @retkid, have you seen the threading example in the manual?
[12:14:56] <PMunch> It does exactly that
[12:15:06] <FromDiscord> <retkid> sent a code paste, see https://paste.rs/QJe
[12:15:13] <FromDiscord> <retkid> believe it not, I come here usually as a last resort
[12:15:17] <FromDiscord> <retkid> I tend to try and read the docs
[12:15:39] <FromDiscord> <Rika> That‚Äôs not really how you make a thread
[12:15:52] <FromDiscord> <retkid> createThread runs a thread
[12:15:59] <FromDiscord> <retkid> unless im wrong
[12:16:03] <FromDiscord> <retkid> and it only does sometimes
[12:16:14] <FromDiscord> <Rika> Well you must use that to create a thread properly
[12:17:46] <FromDiscord> <retkid> oh wait i should have looked at my example code
[12:17:56] <FromDiscord> <retkid> (edit) 04removed "example"
[12:18:09] <FromDiscord> <retkid> thats kinda strange behaviour
[12:18:12] <FromDiscord> <retkid> (edit) "behaviour" => "behavior"
[12:18:40] <FromDiscord> <Rika> Why so
[12:18:51] <FromDiscord> <retkid> createThread kinda casts data onto a Thread type, like jsonutils.fromJson
[12:19:01] <FromDiscord> <retkid> correct?
[12:19:34] <FromDiscord> <Rika> I don‚Äôt know, I never bothered to read the source for threads
[12:19:53] <FromDiscord> <retkid> probably best you dont
[12:20:03] <FromDiscord> <Rika> Why do you need to create a thread without running it?
[12:20:23] <FromDiscord> <retkid> i dont quite know thats just how i wanna organize it
[12:20:24] <FromDiscord> <retkid> but i cant
[12:23:15] <FromDiscord> <mratsim> organization is good but what do you want to do? Organization serves and end goal.
[12:24:05] <FromDiscord> <retkid> there is no end goal, i just wanted my code to flow where you make the threads, runs, clears, make the threads, runs, clears
[12:24:10] <szahid> When i should use let and when const?
[12:24:28] <FromDiscord> <retkid> const is compiler defined, non-static immovable, code-imprinted data
[12:24:35] <FromDiscord> <retkid> (edit) "non-static" => ""
[12:24:40] <FromDiscord> <retkid> (edit) 04removed ""
[12:24:52] <FromDiscord> <retkid> so like lets say you wanted to have a file that you read in your program
[12:25:26] <PMunch> @evoalg, @Elegantbeef, welp dockers fucked again..
[12:26:15] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3M8x
[12:26:32] <FromDiscord> <retkid> b is defined at compile time, a is defined on execution
[12:29:08] <FromDiscord> <retkid> i use const for distributing stuff for testing on different systems, because i dont have to manage directories
[12:29:27] <FromDiscord> <retkid> otherwise i prefer the flexibility of let
[12:29:45] <FromDiscord> <retkid> (edit) "directories" => "directories, or things being out of date-sync"
[12:29:55] <FromDiscord> <retkid> god sorry for editing its bad habbit
[12:38:54] <PMunch> Think I've got it now, just need to rebuild all the images (should take a couple hours I believe)
[12:43:45] <PMunch> I should really reverse the install order in that script, it starts with the oldest version :P
[12:45:28] <PMunch> If you want you can now have a blast from the past and run your examples on 0.13.0
[12:52:08] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[12:55:21] <FromDiscord> <mratsim> In reply to @retkid "there is no end": you should use a threadpool instead. Thread creation and destruction takes a loooong time.
[12:56:45] <FromDiscord> <mratsim> 1. A thread must be started with a proc.‚Üµ2. So either you have a very-long running task (think minutes) or you give a job to wait for new tasks in a loop (threadpool)
[12:57:57] <FromDiscord> <retkid> In reply to @mratsim "you should use a": threadpool has a lot of problems
[12:58:07] <FromDiscord> <retkid> its basically abandoned
[12:58:26] <FromDiscord> <retkid> last time i tried to use 'em they had weird performance issues, things
[12:58:28] <FromDiscord> <mratsim> you can write one.
[12:58:43] <FromDiscord> <retkid> Y'know what. With enough time, I could write one
[12:58:48] <FromDiscord> <retkid> is that time worth it? no
[12:59:03] <FromDiscord> <retkid> it would be worse than the already existing one shaha
[12:59:07] <FromDiscord> <mratsim> but the main question is, why do you want threads?
[12:59:15] <FromDiscord> <retkid> math takes long
[12:59:25] <FromDiscord> <mratsim> here is one I wrote: https://forum.nim-lang.org/t/8791
[12:59:29] <FromDiscord> <retkid> im not smart enough to write the equation in asm
[12:59:39] <FromDiscord> <mratsim> what kind of math?
[12:59:53] <FromDiscord> <retkid> median deviation of like 400 numbers
[13:00:03] <FromDiscord> <retkid> more specifically, colors
[13:00:08] <FromDiscord> <mratsim> that's not worth parallelizing.
[13:00:09] <FromDiscord> <retkid> so like 1200 numbers
[13:00:12] <FromDiscord> <retkid> but over uhh
[13:00:18] <FromDiscord> <retkid> theres around 96000 of them
[13:00:25] <FromDiscord> <retkid> so its like 12009600
[13:00:33] <FromDiscord> <retkid> 120096000
[13:00:41] <FromDiscord> <retkid> (edit) "120096000" => "1200   96000"
[13:01:19] <FromDiscord> <mratsim> In reply to @retkid "1200 *  96000": https://github.com/mratsim/Arraymancer/blob/master/src/arraymancer/tensor/aggregate.nim#L114-L156
[13:01:43] <FromDiscord> <retkid> then its adding it to a db, its taking a pretty long time
[13:02:15] <FromDiscord> <mratsim> you want to add just the stddev to the db or all numbers as well?
[13:03:05] <FromDiscord> <mratsim> threads won't solve DB access, they will make it worse due to synchronization issues.
[13:03:48] <FromDiscord> <retkid> its that or channel it and save it to a json, but i need to read it manually so into a db it goes
[13:04:06] <FromDiscord> <retkid> eh fuck it'll serial write it and channel it
[13:04:17] <FromDiscord> <mratsim> channel?
[13:04:24] <FromDiscord> <retkid> Channel[type]
[13:04:59] <FromDiscord> <mratsim> What I'm saying is that you're adding threading problems where it's not an issue
[13:05:18] <FromDiscord> <retkid> lol
[13:05:26] <FromDiscord> <retkid> its almost certainly an issue what
[13:05:49] <FromDiscord> <retkid> you're telling me im watching something max out a thread and its not an issue?
[13:06:21] <FromDiscord> <mratsim> sure, if you're using the wrong algorithm or data structures with O(n¬≤) complexity it is.
[13:06:36] <FromDiscord> <mratsim> it is your algorithm the issue.
[13:09:08] <FromDiscord> <retkid> im loosing some efficiency to db locking but the algorithm is literally just adding numbers to a sequence then getting a mean then writing it to a db
[13:11:01] <FromDiscord> <retkid> running 30 at a time right now and its averaging about 3 seconds each
[13:11:23] <FromDiscord> <retkid> while using around 16 gm of ram
[13:11:48] <FromDiscord> <retkid> a big performance loss in half of that being swap
[13:12:11] <FromDiscord> <retkid> im going to destroy this nvme ssd....
[13:13:21] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[13:15:13] <FromDiscord> <mratsim> In reply to @retkid "running 30 at a":  https://media.discordapp.net/attachments/371759389889003532/931484087334625290/unknown.png
[13:15:37] <FromDiscord> <mratsim> this is single-threaded
[13:16:19] <FromDiscord> <retkid> its more like‚Üµcompare every number to every number in that range using Distance() from chroma
[13:16:33] <FromDiscord> <mratsim> with openmp https://media.discordapp.net/attachments/371759389889003532/931484420265885736/unknown.png
[13:16:51] <FromDiscord> <mratsim> mmmh pairwise distance is a bit of a memory and CPU hog.
[13:17:29] <FromDiscord> <retkid> ¬Ø\_(„ÉÑ)_/¬Ø
[13:17:34] <FromDiscord> <mratsim> it's n¬≤, I wonder if we could reduce that to O(n log n) using something similar to FFT for polynomial multiplication
[13:18:18] <FromDiscord> <retkid> its more like this
[13:23:42] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3M8M
[13:23:50] <FromDiscord> <retkid> turns out discord is not a good ide
[13:24:34] <FromDiscord> <retkid> thats not valid code, and distance.add() should be indented
[13:26:53] <FromDiscord> <mratsim> so many sqrt and exponetial in distance
[13:27:38] <FromDiscord> <retkid> thats why its annoying to implement in asm
[13:27:55] <FromDiscord> <mratsim> let's see if I can parallelize this
[13:29:01] <FromDiscord> <retkid> i did it just by running the calcs at the same time
[13:29:16] <FromDiscord> <retkid> so instead of doing 1000, it does 1000/30
[13:33:26] <FromDiscord> <mratsim> do you need float64 btw?
[13:33:43] <FromDiscord> <retkid> not really i dont think
[13:34:48] <FromDiscord> <retkid> this isn't the most accurate, some have more numbers than others, etc
[13:35:07] <FromDiscord> <mratsim> also why are you parseHex within a loop?
[13:35:12] <FromDiscord> <eyecon> sent a code paste, see https://play.nim-lang.org/#ix=3M8Q
[13:35:23] <FromDiscord> <mratsim> string processing is very slow
[13:35:44] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3M8R
[13:35:44] <FromDiscord> <retkid> i didn't know taht
[13:35:49] <FromDiscord> <retkid> (edit) "taht" => "that"
[13:35:53] <FromDiscord> <eyecon> No, it's just a number
[13:36:02] <FromDiscord> <eyecon> 255 is 0xFF
[13:36:38] <FromDiscord> <retkid> i dont think that would work because it could be like‚Üµ05, 255, 96
[13:37:02] <FromDiscord> <retkid> lemme look at this lol
[13:38:40] <FromDiscord> <retkid> nimplayground down
[13:38:50] <FromDiscord> <eyecon> In reply to @retkid "nimplayground down": Yep, just saw that
[13:39:34] <FromDiscord> <retkid> https://replit.com/languages/nim
[13:40:06] <FromDiscord> <eyecon> In reply to @retkid "https://replit.com/languages/nim": This uses 1.2.0 but better than nothing I suppose
[13:40:56] <FromDiscord> <retkid> i guess it does work.
[13:41:05] <FromDiscord> <retkid> kinda hard for me to think of colors as an increasing number
[13:41:11] <FromDiscord> <retkid> idk why i didnt think of that
[13:41:12] <FromDiscord> <mratsim> In reply to @retkid "rand outputs hex?":  https://media.discordapp.net/attachments/371759389889003532/931490629039583232/unknown.png
[13:41:30] <FromDiscord> <mratsim> sent a code paste, see https://play.nim-lang.org/#ix=3M8T
[13:41:38] <FromDiscord> <mratsim> (edit) 
[13:42:21] <FromDiscord> <retkid> rand 1.0"
[13:42:27] <FromDiscord> <mratsim> are there only 25 colors in the real app?
[13:42:33] <FromDiscord> <retkid> no
[13:42:48] <FromDiscord> <mratsim> the x 0 ..1000 is just for benchmarking right?
[13:42:53] <FromDiscord> <retkid> yes
[13:43:59] <FromDiscord> <retkid> well the data is already in strings
[13:44:07] <FromDiscord> <retkid> so i kinda do have to process them
[13:45:03] <szahid> Im looking for dict replacment in nim. is there something like this?
[13:45:08] <FromDiscord> <retkid> though i guess that is my fault for shooting myself in the foot when i compiled the data
[13:45:17] <FromDiscord> <mratsim> In reply to @szahid "Im looking for dict": std/tables
[13:48:17] <szahid> mratsim i need something like this: var x = {"key":"value"} \ echo x["key"]
[13:48:34] <FromDiscord> <retkid> yea
[13:49:18] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3M8V
[13:49:23] <FromDiscord> <retkid> might need tables import
[13:52:04] <szahid> {}.toTable works fine
[14:10:16] <FromDiscord> <eyecon> I didn't know about futhark until recently, any reason why it's not in the curated packages list?
[14:13:23] <FromDiscord> <eyecon> And isn't the package "cascade" listed there basically std/with?
[14:13:37] <FromDiscord> <mratsim> In reply to @retkid "though i guess that":  https://media.discordapp.net/attachments/371759389889003532/931498783395688479/message.txt
[14:13:56] <FromDiscord> <mratsim>  https://media.discordapp.net/attachments/371759389889003532/931498860512182312/unknown.png
[14:14:03] <FromDiscord> <mratsim> on an 8 core machine
[14:14:31] <FromDiscord> <mratsim> sent a code paste, see https://play.nim-lang.org/#ix=3M91
[14:15:10] <FromDiscord> <retkid> this is very interesting code
[14:15:31] <FromDiscord> <retkid> some of this stuff is above my head ahaha
[14:16:10] <FromDiscord> <mratsim> the casting to ptr UncheckedArray is because passing seq to threads is annoying
[14:16:22] <FromDiscord> <eyecon> sent a code paste, see https://play.nim-lang.org/#ix=3M92
[14:16:28] <FromDiscord> <mratsim> in the code it's both
[14:16:49] <FromDiscord> <mratsim> there is a distance coming from the chroma library, and there is a seq of distances
[14:17:02] <FromDiscord> <eyecon> That's... I dunno... Isn't it confusing
[14:17:15] <FromDiscord> <mratsim> that's on @retkid
[14:17:31] <FromDiscord> <eyecon> Yeah
[14:17:48] <FromDiscord> <retkid> hey in the smaller code it works
[14:17:51] <FromDiscord> <retkid> in that it doesn't
[14:18:32] <FromDiscord> <mratsim> anyway, you have an example on parallelizing your code using Weave. can't spend more time on this today unfortunately
[14:19:13] <FromDiscord> <retkid> Weave?
[14:19:18] <FromDiscord> <retkid> what is weave
[14:21:33] <FromDiscord> <mratsim> my multithreading runtime.
[14:21:41] <FromDiscord> <mratsim> added an issue for UI improvement: https://github.com/mratsim/weave/issues/179
[14:22:10] <FromDiscord> <mratsim> it's an implementation of this RFC: https://github.com/nim-lang/RFCs/issues/160
[14:22:53] <FromDiscord> <mratsim> I also did this threadpool https://github.com/status-im/nim-taskpools‚Üµ‚ÜµBut weave is particularly tuned for parallel for loops and scientific computing in general
[14:26:15] <FromDiscord> <eyecon> In reply to @eyecon "I didn't know about": Also honeycomb which is a very nice to use PEG
[14:40:04] <szahid> Guys. How i  should declare Table [string, string] ?
[14:40:41] <szahid> just table?
[14:41:22] <NimEventer> New thread by Rforcen: Llvm wrap, see https://forum.nim-lang.org/t/8805
[14:43:05] <PMunch> szahid, what do you mean?
[14:43:24] <PMunch> `Table[string, string]` is how you would do that
[14:44:46] <szahid> Visual studio code mark this as error.
[14:45:04] <PMunch> What is the error?
[14:45:12] <PMunch> Might be something else you're doing wrong
[14:46:13] <szahid> type mismatch. But app run correctly.
[14:53:21] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849)
[14:57:38] <PMunch> Then it's probably an error with nimsuggest
[14:58:06] <PMunch> Might be related to this https://github.com/nim-lang/Nim/issues/19371
[15:31:06] <FromDiscord> <ynfle (ynfle)> Anyone know of a library that converts a jsonschema to a nim type or something like that?
[15:31:35] <PMunch> std/json?
[15:31:58] <PMunch> Oh, you have a scheme in some format and want to have a Nim type that represents it?
[15:32:07] <PMunch> My jsonschema package does something similar
[15:32:07] <FromDiscord> <ynfle (ynfle)> Ya
[15:32:17] <PMunch> I use it for NimLSP
[15:32:33] <FromDiscord> <ynfle (ynfle)> I know. It's really cool, but it doesn't read in a json schema file
[15:32:35] <PMunch> It's actually caught multiple poorly implemented clients :P
[15:32:45] <FromDiscord> <ynfle (ynfle)> Nice
[15:33:00] <PMunch> There is no specified format for json schema though is there?
[15:34:01] <FromDiscord> <ynfle (ynfle)> json schema specifies the format if that's what you're saying. And you can build schemas on other schemas which specify the format of the schema
[15:36:47] <PMunch> I know what a schema is, but you're asking for a package that reads schema definitions. But there is no standard for these, so how would you write a package for it?
[16:01:58] <FromDiscord> <xx_ns> ynfle: you mean like https://json-schema.org/draft/2020-12/schema ?
[16:16:14] *** Joins: rockcavera (~rc@192.12.112.107)
[16:16:14] *** Quits: rockcavera (~rc@192.12.112.107) (Changing host)
[16:16:14] *** Joins: rockcavera (~rc@user/rockcavera)
[16:43:21] <FromDiscord> <xx_ns> @treeform haha I didn't realise you were in here
[16:43:42] <FromDiscord> <xx_ns> you can merge the pixie PR if you want, i put the asserts in the test file itself
[17:10:57] <FromDiscord> <Isofruit> sent a code paste, see https://paste.rs/HN4
[17:13:09] <FromDiscord> <Isofruit> In the sqlite lib it'd then use DbConn alias specifically for PSqlite, in the postgress lib it'd use the DbConn alias for PPGConn etc.‚ÜµSplitting it into a separate module to avoid code duplication just feels like it'll start coupling these modules and makes the code more complex (because I now need to handle allowing various DbConn types), while the other way round feels bad because code duplication and unnecessary work.
[17:14:55] <FromDiscord> <Isofruit> Hmm you know what, I'll first start writing the generic variation of this (without concepts for now, I don't want to force the maintainer of norm to adopt a still experimental feature) and see how that goes
[17:30:34] <FromDiscord> <Isofruit> Yeah, I was being silly, I had to write separate tests for them either way, but I could just make a central model that is imported and exported by the other two
[18:07:29] *** Joins: arkurious (~arkurious@user/arkurious)
[18:13:15] <nrds> <06Prestige99> Hey @PMunch
[18:30:31] <PMunch> Hello Prestige
[18:30:34] <PMunch> What's up?
[18:34:08] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[18:41:08] <FromDiscord> <Bung> @ElegantBeef  `intr.invoke(fancyStuff, 10) # Calls `fancyStuff(10)` in vm`  where is fancyStuff symbol ?
[19:05:05] <FromDiscord> <baalajimaestro> https://paste.baalajimaestro.me/MDvGXU‚Üµ‚Üµcan someone guide me on how to convert the input to output with nim. I tried with regex patterns but i am not able to achieve it. Is there any other logical approach to doing this
[19:08:23] <FromDiscord> <geekrelief> In reply to @baalajimaestro "https://paste.baalajimaestro.me/MDvGXU  can someone": Have you looked at strscans?
[19:08:49] <FromDiscord> <geekrelief> actually, nevermind not sure that would work cause you need to ignore stuff
[19:09:18] <FromDiscord> <Bung> you need parseHtml and xmltree
[19:09:20] <FromDiscord> <geekrelief> you might have to use a parsing library
[19:12:44] <FromDiscord> <Bung> I think u can find what u need here https://github.com/nim-lang/fusion/tree/master/src/fusion/htmlparser
[19:18:16] <FromDiscord> <baalajimaestro> fine with even if there is an option to remove the entire \<img\@geekrelief)
[19:19:00] <FromDiscord> <baalajimaestro> lemme check, im pretty new to nim so gotta figure out how to use this‚Üµ(@Bung)
[19:20:01] <FromDiscord> <auxym> old but classic SO: https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags
[19:22:16] <FromDiscord> <baalajimaestro> hmmmmm, so gotta figure out how to use a parser. any docs other than the code as such?
[19:23:26] <FromDiscord> <baalajimaestro> i dont understand much from the example provided here https://github.com/nim-lang/fusion/blob/master/src/fusion/htmlparser.nim
[19:25:27] <FromDiscord> <baalajimaestro> got it never mind
[19:35:26] <FromDiscord> <auxym> you could also try xmlparser in the stdlib. Though you might need to add a "root" element that wraps you "img" element in order for it to be considered strictly valid xml. Not sure if xmlparser is tolerant of that. https://nim-lang.org/docs/parsexml.html
[19:35:54] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[19:50:33] <FromDiscord> <baalajimaestro> https://nim-lang.org/docs/htmlparser.html‚Üµ‚ÜµI found this, will try it out tomorrow
[19:52:23] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Ping timeout: 256 seconds)
[20:00:18] <NimEventer> New thread by Geekrelief: How can I implement a conditional access operator?, see https://forum.nim-lang.org/t/8806
[20:13:57] <FromDiscord> <Patitotective> Is there a way I could find where a procedure has been called from? to debug
[20:15:39] <FromDiscord> <Tanguy> echo getStackTrace()
[20:17:12] <FromDiscord> <Patitotective> Thanks üôÉ
[20:17:37] <FromDiscord> <treeform> In reply to @xx_ns "<@!107140179025735680> haha I didn't": I merged your PR, thanks!
[20:28:42] *** Joins: vicfred (~vicfred@user/vicfred)
[21:17:43] *** Quits: Lord_Nightmare (~Lord_Nigh@user/lord-nightmare/x-3657113) (Read error: Connection reset by peer)
[21:19:31] *** Joins: Lord_Nightmare (~Lord_Nigh@user/lord-nightmare/x-3657113)
[21:35:31] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[21:56:37] <NimEventer> New thread by Sixte: Nim 1.6.2 : silent program rejection, see https://forum.nim-lang.org/t/8807
[22:24:46] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[23:06:03] <nrds> <06Prestige99> @PMunch not much. Been having a painful nim editing experience because of nimsuggest lol
[23:38:16] <FromDiscord> <hmmm> nimsuggest is evil turn it off ü§î
[23:41:28] <nrds> <06Prestige99> Yeah it's been broken since 1.6.0 it seems
[23:50:07] <FromDiscord> <QueenFuckingAdrielle> What's everyone working on with nim? Anybody doing any interesting projects?
[23:53:14] <FromDiscord> <hmmm> there is "This month in nim" on the official blog if you hadn't read with plenty of nifty stuff
[23:55:55] *** Parts: fvs (freevryhei@2600:3c00::f03c:92ff:fe55:ff21) (WeeChat 3.4)
[23:57:12] <FromDiscord> <Isofruit> Has anyone here successfully used "nimcrypto" to compute hashes?
[23:57:23] <FromDiscord> <Isofruit> (edit) "hashes?" => "hashes (in my case of passwords)?"
