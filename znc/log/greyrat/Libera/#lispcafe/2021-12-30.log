[00:03:32] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 252 seconds)
[00:04:18] <MichaelRaskin> Come on, as if they wouldn't another reason for unreliability of numbers
[00:04:59] <gilberth> Like what? Little testing for variants?
[00:05:37] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[00:05:40] <MichaelRaskin> I think from time to time I see just a couple of days of data going missing for a handful of days (and acknowledged as such, after a day…)
[00:07:05] <gilberth> As I said.
[00:07:47] <GreaseMonkey> i'm mostly hopeful that we can purge delta before omicron arrives
[00:08:37] <GreaseMonkey> and also that it doesn't somehow get worse
[00:08:46] <gilberth> Huh? Omicron will just replace Delta.
[00:08:47] <GreaseMonkey> erm, doesn't somehow get worse
[00:09:01] <GreaseMonkey> yeah but there's a transition period
[00:09:38] <gilberth> Doesn't matter Omicron so many times more infectious that this will be quick.
[00:09:50] <GreaseMonkey> i'm also hopeful that omicron is actually notably less bad than delta
[00:10:41] <GreaseMonkey> because sure, there's the general trend of viruses becoming more contagious and less deadly, but there's also politicians powered by wishful thinking
[00:10:42] <gilberth> Doesn't matter either, if way more people are infected.
[00:11:38] <GreaseMonkey> in that case the ideal would be if omicron had a habit of hospitalising the rich
[00:12:18] <gilberth> Aha, what would that change?
[00:12:38] <GreaseMonkey> they'd stop banging on about "but the economy" and "i'm not doing another lockdown"
[00:13:40] <gilberth> The rich, you say? Isn't that a bit bias? It's the 30% idiots that just don't want to get vaccinated. I doubt that they are all rich.
[00:14:22] <GreaseMonkey> it's not just the antivaxxers who refuse to do another lockdown
[00:15:34] <gilberth> Sure, but they are causing a lot of deaths. And it's not only tha antivaxxers that die, which is the problem.
[00:16:23] <gilberth> And btw, why would a rich person be concerned about a lockdown, anyway?
[00:16:27] <GreaseMonkey> yeah i did say ideal and i should have made it clear that it was a completely unrealistic ideal
[00:16:37] <GreaseMonkey> and maybe i should have said politicians
[00:17:19] <gilberth> Someone voted those politicians into office.
[00:17:38] <GreaseMonkey> and someone got their ideas from those politicians
[00:17:48] <GreaseMonkey> so someone can get new ideas from them
[00:18:02] <GreaseMonkey> when they suddenly realise it's not "just a flu"
[00:18:04] <gilberth> There is a body part called a "brain".
[00:18:28] <gilberth> And antivaxxers didn't get their ideas from politicians.
[00:18:58] <sm2n> pl: does the kernel support that?
[00:19:23] <selwyn> corporate lobbying is responsible for e.g. the cdc cutting quarantine time
[00:19:46] <GreaseMonkey> actually now i realise it, a few talk show hosts who were antivaxxers died from covid over the past year, but is that enough to make cognitive dissonance do the right thing?
[00:19:50] <gilberth> Not here, sorry.
[00:20:02] <selwyn> gilberth: not every problem is caused by 'idiots'
[00:20:24] <gilberth> selwyn: At times it seems like that.
[00:20:25] <pl> sm2n: no, linux kernel usually isn't updated in flight on high assurance conditions 
[00:20:38] <GreaseMonkey> some problems are caused by 'arseholes'
[00:20:53] <sm2n> as expected
[00:21:11] <GreaseMonkey> and this i'm wondering, are the hospitalisation rates for Omicron actually low enough in light of a country with a roughly 90% vaccination rate for it to be not a problem?
[00:21:30] <sm2n> the thing is, I don't even think it'd be possible to add support for that kind of thing without a major rearchitecting of the thing
[00:21:30] <gilberth> GreaseMonkey: Isn't that a synonym? In the broadest sense?
[00:21:53] <GreaseMonkey> eh, idiots aren't intentionally trying to screw things up
[00:22:08] <GreaseMonkey> or if they are, it's because they believe it's the right thing to do
[00:22:52] <gilberth> GreaseMonkey: We face a 70% vaccination rate only here. And: When the health system is at its limits, it not only COVID causing a problem. There is a hidden triage going on all the time already. As e.g. cancer surgery postponed, causing additional death not labeled with Covid.
[00:23:15] <GreaseMonkey> good point, it's pretty easy to forget that there's other stuff going on
[00:24:29] <GreaseMonkey> our hospital capacity is pretty screwed at the moment, and part of that is because the upper management of our hospitals are arseholes which makes working there highly unattractive
[00:25:00] <selwyn> which country?
[00:25:05] <GreaseMonkey> New Zealand
[00:25:31] <GreaseMonkey> hospitals are constantly understaffed and staff are constantly overworked
[00:25:41] <GreaseMonkey> "yeah, remember sleep? yeah, those were good times"
[00:26:11] <gilberth> Many people acting like arseholes aren't intentionally causing harm. They just believe in win/lose situations. Then there the outright stupid people, who cause lose/lose situations. They harm themselfs and others. Like antivaxxers.
[00:39:57] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[00:42:09] *** Joins: aeth (~aeth@user/aeth)
[00:48:03] <hayley> Good morning everyone!
[00:48:13] <selwyn> good morning
[00:48:43] <hayley> Well, stassats said 4× slower sounds like a dependency problem.
[00:49:06] <hayley> Had my fun playing around with block placement, still.
[00:51:05] <moon-child> that is, instruction scheduling?
[00:52:09] <hayley> Which order i lay out basic blocks.
[00:52:44] <hayley> https://gcc.gnu.org/bugzilla/show_bug.cgi?id=95644#c4 "The customer has nuclear weapons. They do not do "bounty"."
[00:52:46] -ixelp- 95644 – [F2018] IEEE_FMA is missing from the IEEE_ARITHMETIC module
[00:52:55] <moon-child> oh, still?
[00:53:59] <hayley> If I picked blocks that keep us in a loop first, while continuing to do a depth first traversal, I'd go a whole 1.5% faster on cl-bench.
[00:54:40] <moon-child> I meant--the dependency problem comes from poor instruction scheduling?
[00:55:44] <hayley> But perf says I got an IPC of 1 + ε so it could be.
[00:56:10] <hayley> Wait, no, I don't have any evidence of that.
[01:07:29] <hayley> Block positioning was just a guess, as GCC makes pretty neat-looking code, and my IPC with SBCL was crap.
[01:09:36] <gilberth> hayley: Scheduling could well be a problem. See e.g. <http://clim.rocks/gilbert/bench2.txt> That's a disassembly of what CCL produces and what SBCL together with the results and the source. With CCL the hot loop is straight, while in SBCL it isn't. CCL is at 582MC/s while the latter is at 975MC/s.
[01:10:36] <gilberth> The other way round. CCL with the straight loop is at 965MC/s and SBCL at 582GC/s. Sorry.
[01:11:28] <hayley> I worked out how to get somewhat better scheduling, but it wasn't that much faster.
[01:12:20] <gilberth> Well, I don't know what is going on. I just wanted to share my findings.
[01:12:36] <hayley> Best I got out of SBCL is https://plaster.tymoon.eu/view/2805# and that was only 20% faster.
[01:13:12] <gilberth> What I learned though is that loop unrolling really helps a lot.
[01:14:12] <gilberth> I spot a forward jump to L2.
[01:15:56] <hayley> GCC doesn't unroll still.
[01:16:13] <hayley> It somehow manages to remove a lot of code, on the contrary.
[01:20:16] <gilberth> Your test looks odd. Its CMP EAX, 116 ; JL L2 ; L2: CMP EAX, 96 ; JL L1  Compare that with what I get. Look at the disassembly. The CCL disassembly is nicely comment with the source. My test tests for less than 48, then loop. greater than 57, then loop. Yours somehow is different.
[01:22:15] <gilberth> Ah! I pulled the (INCF P) to before the dispatch.
[01:24:22] <hayley> Should that matter that much?
[01:26:01] <gilberth> Well, you get smaller code unless you can do with more branches.
[01:26:31] <hayley> There aren't that many increments still.
[01:26:55] <gilberth> Before each branch to the next state?
[01:27:54] <hayley> You "only" have 416 bytes from SBCL and I recall similar savings when I made the DFA do one search, rather than calling a continuation with each match as I do now.
[01:28:31] <hayley> ...though I may have designed myself into a corner, as I expect transition assignments to happen before incrementing the position.
[01:28:33] <gilberth> Milady, with your disassembly. Suppose the ADD ECX, 1 at L1 would be gone.
[01:29:01] <hayley> Hm.
[01:29:12] <gilberth> You then could invert the "JL L2" and go to L0 straight.
[01:29:18] <hayley> Yes, SBCL would recognise the stupid double jump.
[01:31:01] <gilberth> Maybe gcc is clever enough to pull the (INCF P) to before the dispatch on its own?
[01:31:25] <hayley> Maybe I misread, but your DFA generates R.2 one too high -- and then decrements it on a match, sure. Not a bad idea actually.
[01:31:57] * hayley wonders when she'll just have CLEX2 but using a pattern matcher.
[01:32:17] <gilberth> How many LoC to go?
[01:32:47] <hayley> Up to 1900 LOC with ISUM-CASE.
[01:33:26] <gilberth> Ok. Wake me, when you're done.
[01:33:38] <hayley> Still 98% smaller than Rust regex(tm)
[01:33:56] <gilberth> 98%? Puh!
[01:34:37] <gilberth> What the heck are they doing?
[01:35:30] <hayley> Having to write in Rust, and like 3 virtual machines, as well as 2 prefix scanners?
[01:35:51] <gilberth> Yeah, right.
[01:36:12] * hayley awaits code review of https://github.com/rust-lang/regex
[01:37:08] <gilberth> You do? What would you do with that review?
[01:37:27] <hayley> Same as any review in #lispcafe, probably laugh along with it.
[01:38:02] <gilberth> Ah, is that the reason why people do code reviews?
[01:38:14] <hayley> lol, the guy who wrote that LC-3 implementation tutorial found my repository.
[01:38:15] <hayley> Must be.
[01:41:20] <hayley> That is a nice trick that I didn't think of somehow, to allow the registers to be off by +1 but then decrement when we find a match.
[01:42:49] <gilberth> The registers won't mind, would they?
[01:43:34] <hayley> Well, they're lucky to inhabit CPU registers, rather than an interpreter object.
[01:44:44] <gilberth> In Rust they live on a stack. Poor registers, we should save them.
[01:45:40] * gilberth paints poster "Free the registers!"
[01:51:11] <hayley> https://www.youtube.com/watch?v=IyKjBnZNVdA
[01:51:12] -ixelp- Believer (Live 1981) - YouTube
[01:53:59] <hayley> gilberth: Whoever wrote the Rust book must have been stuck on Go 1.11, as they only figured out how to compile with function arguments in registers fairly recently.
[01:54:46] <gilberth> You're kidding me. Passing arguments in registers is part of the standard ABI for AMD64.
[01:55:08] <hayley> I'm not.
[01:55:15] <gilberth> As well as for ARM since it exists.
[01:55:20] <hayley> https://go.googlesource.com/proposal/+/refs/changes/78/248178/1/design/40724-register-calling.md
[01:55:21] -ixelp- Proposal: Register-based Go calling convention
[01:55:30] <hayley> Note the "last updated" date.
[01:55:48] <pl> gilberth: Go ABI is based on Plan9 ABI, which explicitly went for simpler portable solution 
[01:56:36] <gilberth> hayley: You say, that the Rust book is correct stating that arguments are passed on the stack always?
[01:56:51] <pl> Remember that it's only since Go 1.5 or so that Go isn't hauling half of Plan9 C runtime with itself 
[01:56:57] <hayley> gilberth: Yes, if you're looking at the wrong language.
[01:57:01] <pl> (because they rewrote it in Go) 
[01:57:30] <gilberth> Yes, but I would assume that a compiler writer would be accustomed with standard ABIs.
[01:57:59] <pl> gilberth: it was on purpose, yes. The standard ABIs show up in FFI, just like with compiling lisps 
[01:58:21] <pl> Go is an alien to Unix 
[01:58:29] <sham1> From Plan9 land
[01:58:32] <pl> From a completely different direction than Lisp 
[01:59:00] <hayley> https://www.youtube.com/watch?v=3bOeZ2m8MOU
[01:59:00] -ixelp- Flummywister's "YTP: Billy Mays Sells the Gopher in an Extremely Pissed Off Mood" (re-upload) - YouTube
[01:59:38] <gilberth> Sure, you could chose what ever ABI seems fit for your language. And I would expect some reasoning in choosing an ABI. I mean Rust doesn't even have APPLY, for which it would make some sense to use the stack always.
[01:59:56] <sham1> Or variadic procedures
[02:00:16] * hayley been there, done that with generating code for argument parsing.
[02:00:32] <hayley> SICL spills registers to the stack if and only if you want to parse &rest.
[02:02:06] <gilberth> Yep. stdarg.h with adm64 does essentially the same. Pretty expensive, but works.
[02:03:13] <gilberth> It's more expensive with C because of potential floating point arguments passed in different registers.
[02:05:55] <hayley> I suggested we could also unroll the parsing machine, so that we'd have a "state" per register argument, but that'd lead to larger code.
[02:06:28] <gilberth> The caller should parse. I say that since decades.
[02:06:58] <hayley> Apparently the "this is like Smalltalk!!!" comment I made fun of was a joke that I didn't spot. Seems to happen frequently enough.
[02:07:00] *** Joins: Darzen (~Darzen@2600:6c5e:2b7f:a3cd:d49a:2ede:47f4:9c39)
[02:07:14] <Darzen> I'm back boys
[02:07:19] <hayley> Mostly because the Smalltalk way of doing things is to put the program on the VM, not to put another VM in the program.
[02:07:46] <hayley> https://twitter.com/nodefunallowed/status/1475949666202050562 for context
[02:08:25] <hayley> Though I've been mentioning abstraction inversion for a year at least. The ELS judges wanted a definition of "abstraction inversion" in my paper. 
[02:09:28] <hayley> Instead I wrote it would be awkward, and referenced phoe implementing tagbody using a condition^Wexception system.
[02:10:22] <Darzen> gilberth: You have any preference for food?
[02:10:51] <gilberth> Yep, give me either TAGBODY/GO or CATCH/THROW and I implement one in terms of the other. Which one is the primitive now?
[02:11:30] <gilberth> Darzen: kale, we have winter time.
[02:11:44] <hayley> https://i.redd.it/3secwt3l41p71.png
[02:11:45] <Darzen> ok
[02:14:37] <gilberth> Darzen: Meat! Red meat!
[02:15:05] <Darzen> gilberth: I'm cooking some rice with chicken and Thai chili sauce
[02:15:15] <Darzen> Pardon me, pork ribs not chicken
[02:16:00] <Alfr> Darzen, what do those taste like?
[02:16:05] <gilberth> Pork is something I avoid.
[02:17:17] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[02:17:37] *** Joins: robin (~robin@user/terpri)
[02:17:58] <Darzen> Alfr, it tastes like slightly sweet/salty (VERY SLIGHTLY) meat, with the texture of a a smooth beef steak.
[02:18:55] <Alfr> Hm ... gross. Chicken that turns out to be pork, which tastes like beef steak?
[02:20:09] <Alfr> I don't dislike any of the above, but all of them in one thing is a little bit too much, imo.
[02:24:17] <Darzen> Alfr, pork can be excellent, a wonderful dish when prepared by the right hands. If not cooked just so, it will be dry and in some cases will make me sick to my stomach.
[02:24:42] <hayley> https://www.youtube.com/watch?v=T5XWOOOCg-U
[02:24:42] -ixelp- Heart of the Sunrise (2008 Remaster) - YouTube
[02:30:47] *** Joins: mrmr (~mrmr@user/mrmr)
[02:40:29] <hayley> gilberth: It's a fair bit better when I move (INCF POSITION) out of the COND clause, but SBCL is still stupid about what should fall through or not.
[02:41:13] <hayley> I mean, we should be betting that we remain in the loop and don't go out of bounds, but SBCL puts the out of bounds handler as fall through code.
[02:42:15] <gilberth> Yep, I noticed. And didn't you say that you taught SBCL the trick?
[02:42:17] * hayley pulls out her src/compiler/control.lisp hack and the disassembly is very nice now.
[02:42:44] <hayley> Yes.
[02:42:57] <hayley> https://pastebin.com/H7DM50KL
[02:42:57] -ixelp- ; 580: L0: 4D8D5106 LEA R10, [R9+6]; 584: 4939F2 CMP - Pastebin.com
[02:43:04] <hayley> Beautiful.
[02:43:34] <gilberth> Indeed. Does it pay off?
[02:44:23] <hayley> From 68µs to 55µs; still not GCC level yet, but better.
[02:44:33] <moon-child> woo
[02:44:43] <gilberth> If you now could get rid of SHL and teach SBCL the (<= a x b) trick, it would be perfect.
[02:45:15] <hayley> I tried to write a VOP but couldn't figure out what to write in order to get immediates supplied by the caller.
[02:45:38] <hayley> FWIW it's a remarkably simple hack: https://github.com/no-defun-allowed/swcl/commit/59d73ce26b3f61e639a5529c592354625e1dedc6
[02:45:38] -ixelp- Sort blocks so that we fall into blocks that are in the same loop. · no-defun-allowed/swcl@59d73ce · GitHub
[02:46:43] <gilberth> I remember that someone put such a trick into SBCL for me with my previous work on CLEX1.
[02:47:19] <gilberth> hayley: What happens if you use the 32-bit version?
[02:47:32] <hayley> One second, writing up a comment...
[02:48:42] <gilberth> That is a tiny patch. Congratulation!
[02:50:02] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 268 seconds)
[02:51:03] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[02:53:28] <hayley> "Value of 'NIL in (- 'NIL 1) is NIL, not a NUMBER." Shit, I did something wrong.
[02:53:48] <hayley> I need a test suite at some point.
[02:53:52] <hayley> ...ideally now.
[02:59:40] <hayley> What is the schedutil CPU governor? That's a new name to me.
[03:00:29] <moon-child> dynamic scaling, maybe?
[03:00:45] <hayley> "Scheduler-driven CPU frequency selection"
[03:01:12] <hayley> Yeah, but ondemand also does scaling. The Arch wiki says schedutil is better for newer CPUs apparently.
[03:04:03] <amazigh> I finished my beer (goudal)
[03:04:11] <amazigh> time for going mad!
[03:06:11] <gilberth> amazigh: You misspelled "mead"?
[03:07:26] *** Quits: rotateq (~user@185.66.193.48) (Ping timeout: 245 seconds)
[03:08:46] <amazigh> If I spend too much time here, I will become a poet of some sort
[03:08:59] * hayley sees IPC of 1.87 now.
[03:09:18] <amazigh> see you around people!
[03:09:51] <hayley> Huh, I've tied Rust regex now with SWCL + hoisting (INCF POSITION) out of COND?
[03:10:06] <hayley> I mean, I should be killing it by a long shot, with a compiler, but I'll take that.
[03:11:27] <hayley> ...OTOH I execute 16.8e9 instructions in this test, whereas Rust executes 28.3e9 instructions, so it's better for the climate.
[03:13:33] <Alfr> Are all tests equally expensive, hayley?
[03:13:47] <hayley> I haven't checked.
[03:15:00] <gilberth> hayley: Unroll your loop.
[03:15:56] <moon-child> running up against memory speeds?
[03:16:33] <hayley> Not even close.
[03:16:59] <hayley> I still recall GCC could do 1.5Gchar/s or so, whereas I'm just up to 650Mchar/s right now.
[03:18:04] <hayley> Actually...
[03:18:38] <hayley> if I just look for a first match, as the C code does, I'm up to 920Mchar/s. Does my string still fit in cache? How the hell does that matter though?
[03:19:20] *** Quits: Darzen (~Darzen@2600:6c5e:2b7f:a3cd:d49a:2ede:47f4:9c39) (Ping timeout: 252 seconds)
[03:20:39] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 250 seconds)
[03:24:33] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 268 seconds)
[03:26:39] <gilberth> hayley: I doubt that the string fitting the cache would matter much.
[03:29:53] <gilberth> With the code I posted and manual fourfold loop unrolling can easily get 1.3GC/s. With SBCL.
[03:34:28] <hayley> What is odd then is that FIRST-MATCH has higher throughput than ALL-STRING-MATCHES. And FWIW most time is still in the DFA and not any overhead creating strings per SB-SPROF.
[03:36:16] <hayley> But an apples-to-apples comparison is probably for the better. Sure.
[03:43:38] <hayley> Apparently OMRN has only 57% the throughput with arbitrary-order-depth-first traversal, compared to loop-prioritising-depth-first.
[03:44:08] <hayley> Alternately, loop prioritising gives 75% more throughput. Not bad at all.
[03:53:03] <gilberth> I am surprise that nobody bothered with SBCL. I mean, consider how old the Python compiler is.
[03:58:43] <gilberth> I wonder how Lispworks does fare.
[04:00:31] <moon-child> I hear it does not generate such good code as sbcl
[04:00:42] <moon-child> but that was a general observation; it might do better in this instance
[04:01:29] <gilberth> I ask because Lispworks is CMUCL repackaged.
[04:01:53] <moon-child> ah, I did not know that
[04:02:15] <gilberth> But as their evaluation version does not offer a CLI interface, I am too lazy to check.
[04:03:35] <gilberth> moon-child: Yep, but I have no idea when it was "forked".
[04:05:15] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 268 seconds)
[04:06:39] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[04:14:06] * hayley asks in #sbcl if someone wants to try her patch. It makes that one DFA 75% faster, and it makes cl-bench like 1.5% faster on average (no error margins though).
[04:25:27] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[04:30:21] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[04:32:05] *** Joins: aeth (~aeth@user/aeth)
[05:36:03] <kakuhen> ok I found a bug with the GTK-3 bindings
[05:36:41] <kakuhen> CCL tries to dereference a null pointer if you use the Quartz backend of GTK 3. SBCL will somehow make your main function return sooner than GTK can clean up and quit, so closing the window will make it freeze
[05:36:51] <kakuhen> But both SBCL and CCL work just fine if you use the X11 backend for GTK 3
[05:37:43] <kakuhen> I finally understand why beach is visibly irritated when people attempt using FFI stuff for graphical programs instead of McCLIM
[05:38:03] <kakuhen> I tried to find out what was causing the nullptr dereference and it was too deep of a rabbithole for me to care about
[05:47:25] <moon-child> visibly irritated?
[05:47:38] <moon-child> have you planted cameras in his house?
[05:47:42] <moon-child> shall I call the police?
[06:07:15] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[06:13:54] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[06:17:49] <hayley> gilberth: Well, GCC doesn't unroll though, so I am curious to see what the problem is. Only thing is that SBCL emits a spurious boxing shift.
[06:18:27] <hayley> https://twitter.com/imogenbadger/status/1476233034621853697
[06:22:49] <Catie> God I wish my bedroom looked anything like that
[06:23:46] * hayley has two synthesizer stands but in a back room "studio". Probably for the better.
[06:24:23] <Catie> I have uhhh bristol
[06:24:36] <Catie> And a keyboard with a MIDI interface
[06:24:39] <hayley> Classic
[06:24:49] <Catie> I'll get there! I'll get there
[06:24:53] <hayley> I have synthv1 mostly and a Mellotron soundfont
[06:25:26] <hayley> ...and an olde Roland RS-09 that I got for """cheap""" and a MS2000
[06:26:07] <Catie> What I'm getting from this is that you're living the dream
[06:26:27] <hayley> ...and also an octave "fuzz" circuit I made with some op amps and an Arduino playing back a ring buffer twice as fast, which I used once and then found it sounded dreadful.
[06:26:44] <Catie> Color me shocked
[06:27:12] <hayley> ...and also a burnt PCB due to a shit soldering iron, and some components for voltage controlled oscillators.
[06:27:45] <hayley> https://soundcloud.com/user-308419292/the-lieutenant-in-lieu-of-a-tenant 2:00 and onward
[06:27:45] -ixelp- Stream The Lieutenant / in Lieu of a Tenant by theemacsshibe | Listen online for free on SoundCloud
[06:33:38] <kakuhen> moon-child: well I am referring to the time he snapped when someone was talking about GTK or whatever and he was encouraging the person to work on improving McCLIM
[06:33:52] <kakuhen> no cameras needed, besides the IRC logging bot
[06:34:15] <kakuhen> i just know it's first time i saw him swear in the channel
[06:34:32] <kakuhen> this was a few months ago so it'd probably be hard to find in the logs now
[06:34:48] <hayley> I've seen him say shit, crap, fuck (more like f**k) over a few years.
[06:35:56] <kakuhen> but yes i understand his frustration now when people refuse to use McCLIM and then a million cryptic FFI errors happen
[06:36:23] <hayley> https://irclog.tymoon.eu/libera/%23commonlisp?from=2020-12-29T22%3A06%3A02&to=2021-12-30T10%3A06%3A02&search=crap&by=beach
[06:36:24] <kakuhen> so turns out the bug that makes CCL fall into LDB is also present on SBCL, but SBCL is able to recover from the error -- it just outputs a very scary message on your REPL 
[06:36:33] <kakuhen> and it only happens when you run the program within emacs
[06:36:57] <moon-child> I see many craps, only one shit
[06:37:04] <moon-child> no fucks (nor f**ks) given though
[06:37:21] <kakuhen> >WARNING: Error calling finalizer #<FUNCTION (LAMBDA () :IN GIR::OBJECT-SETUP-GC) {10062EED7B}>: #<SB-SYS:MEMORY-FAULT-ERROR {1001854703}>
[06:37:24] <hayley> I think f**k was #sicl.
[06:37:34] <kakuhen> if anyone can figure out what this even means, feel free to explain it to me like I'm 5 years old
[06:37:42] <hayley> In which finalizers don't.
[06:37:44] <kakuhen> but I assume it's related to the bug that makes CCL drop into LDB
[06:38:13] <hayley> Have I ever mentioned why I don't like eazy-opencl using finalizers?
[06:38:26] <kakuhen> I don't think so
[06:38:32] <moon-child> I was grepping everything.  But I may not have been in #sicl at the time
[06:38:32] <hayley> Well.
[06:38:35] <moon-child> spotted another shit though
[06:38:56] <hayley> You run OpenCL code on the GPU, and it's fairly likely you block until you get a result. In any case, you're not working on the CPU too much, and thus not consing.
[06:39:13] <hayley> So there's no memory pressure, thus the GC doesn't run, thus finalizers don't run, thus you leak GPU memory.
[06:39:48] <kakuhen> what happens when GPU memory runs out
[06:40:00] <kakuhen> drivers crash or screen acts funny?
[06:40:27] <hayley> You just can't allocate any more. Nothing lethal but nothing good.
[06:40:54] <kakuhen> I see
[06:42:12] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[06:46:01] <kakuhen> ok it looks like this GIR library thing just likes to cause memory faults everywhere
[06:46:24] <kakuhen> i wonder if I can convince my friend to use McCLIM instead
[06:47:53] <kakuhen> gtk with x11 backend looks almost the same as McCLIM does with X/Motif on a Mac, so it's not a visual downgrade for me, and I only see benefits to it (namely, no mysterious memory errors)
[06:52:40] *** Alfr is now known as Guest3054
[06:52:40] *** Quits: Guest3054 (~Alfr@user/alfr) (Killed (strontium.libera.chat (Nickname regained by services)))
[06:52:45] *** Joins: Alfr (~Alfr@user/alfr)
[06:52:49] * hayley uploaded an image: (145KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/SvYIywquefcPlUKhjMCRXIGY/siclos.png >
[06:53:07] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[06:55:28] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[07:02:31] <selwyn> hayley: lol
[07:06:53] <hayley> Cool, the old parliament house in Australia is on fire.
[07:08:12] <selwyn> https://www.youtube.com/watch?v=4JQK4bH0J-o
[07:08:13] -ixelp- Mr Prime Minister the simpsons - YouTube
[07:08:26] <selwyn> i hope they saved the prime minister and his pool
[07:08:49] <hayley> The old one, not the current one.
[07:09:43] <Catie> What were they using it for? Was it just there for fun?
[07:10:58] <selwyn> https://www.youtube.com/watch?v=mSckdiTOvUo
[07:10:58] -ixelp- Bart getting into more trouble in Australia - YouTube
[07:11:13] <selwyn> > the weak and nerdy are admired for their computer programming abilities
[07:11:34] <hayley> Catie: Pretty much.
[07:11:45] <Catie> No huge loss then
[07:12:34] <drakonis> https://spwhitton.name/tech/code/consfigurator/ well this is neat.
[07:12:34] -ixelp- consfigurator
[07:17:49] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[07:27:17] <selwyn> > One witness told Melbourne radio station 3AW that he heard protesters chanting “let it burn.”
[07:47:30] *** Quits: semz (~none@user/semz) (Ping timeout: 260 seconds)
[08:00:05] *** Joins: semz (~none@user/semz)
[08:28:55] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[08:29:21] <dave0> maw
[08:29:33] <hayley> maw
[08:30:04] <dave0> hi hayley 
[08:30:09] <dave0> sup?
[08:31:29] <hayley> Trying to figure out if I've written a compiler optimisation that only ever makes one regular expression faster. You?
[08:32:44] <dave0> i just got home from my walk
[08:32:56] <dave0> i had a burger :-)
[08:44:42] *** Joins: notzmv (~zmv@user/notzmv)
[08:45:47] <hayley> Well, my block positioning is geomean 0.7% faster than standard SBCL today on cl-bench.
[08:56:24] <hayley> At least FFT seems to love my optimisation, in no small part cause it is also written as a big PROG form.
[09:15:02] <hayley> ...or not. Too much noise to be sure. ):
[11:34:51] * moon-child goes looking for information on a topic, eventually stumbles across a 2003 forum post which is 10x more interesting, useful, and informative than all the blogspam he had to wade through to get there
[11:34:55] <moon-child> remember when the internet didn't suck?
[11:44:37] <hayley> I wonder if Jim Newton's type RE library is on Quicklisp.
[11:45:21] <hayley> (ql:quickload :rte)
[11:51:19] <hayley> RTE is also faster, with about 70% more throughput too.
[11:51:44] <hayley> n.b. it also generates DFAs using TAGBODY from derivatives.
[11:53:39] <sm2n> moon-child: don't necro. banned.
[11:57:54] <epony> yep, the internet still does not suck, it's just random people that do since about 2004 and much more since 2008
[11:58:38] *** Joins: random-nick (~random-ni@87.116.167.125)
[12:00:44] <epony> blame it on the proliferation of opiates and narcotics and street gangs.. capitalism and autism
[12:01:50] <epony> this makes these IRC networks post retardation facilities too ;-) reap the rewards
[12:05:05] * ck_ .oO( i beat the internet! the end guy is hard )
[12:09:15] *** Joins: cranium (~cranium@user/cranium)
[12:40:25] <kakuhen> epony: your last comment reminded me of a insult I hear towards young people who dislike IRC
[12:40:34] <kakuhen> it's something along the lines of "I like IRC because it filters your generation"
[12:52:15] <ck_> sounds like al bundy's basement, with a tv you have to get up to change channels on
[12:52:58] <ck_> don't know the english line, but it's a similar sentiment -- "defense against offspring" maybe
[12:56:48] <dave0> al "hand in your pants" bundy?
[12:58:17] <dave0> https://youtu.be/47qqz2zes8Q
[12:58:18] -ixelp- Home Improvement and Married with Children - The Simpsons - YouTube
[13:00:25] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[13:02:02] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[13:10:14] <ck_> did anyone pursue some happiness today?
[13:19:25] *** Joins: treflip (~user@user/treflip)
[13:23:33] <dave0> i called my friend, if that counts?
[13:31:32] * hayley writing an email to sbcl-devel
[13:38:02] <hayley> Does SourceForge think I'm spam, do I not know how to use the mailing list, or do I just need to wait? Hm.
[13:42:03] <hayley> The first two, I need to subscribe from my nice-looking email address too.
[13:46:56] <epony> kakuhen, mailing lists filter your generation ;-)
[13:47:23] <kakuhen> jokes on you, i am switching to notmuch so it's easier-than-ever to stay subscribed to various MLs within emacs
[13:47:33] <kakuhen> switching to notmuch from mu4e that is
[13:48:14] <kakuhen> my generation is perhaps filtered by usenet ;) 
[13:48:25] <kakuhen> can't handle the lovely personalities that roam the newsgroups
[13:48:31] <epony> usenet is officially defunct in 1995
[13:48:58] * hayley is back from being told to blow out her brains on Garry's Mod. "Well, now that you mention it, I'm motivated _not_ to!"
[13:48:58] <epony> it was going out in the early 90ies
[13:49:56] <ck_> do you have a favourite troll on comp.lang.lisp, kakuhen ?
[13:49:59] <hayley> Still no idea if I've actually sent an email to the mailing list.
[13:50:08] <ck_> please ... accept the mystery
[13:50:25] <kakuhen> ck_: yes, but i don't think they are active anymore
[13:50:50] <kakuhen> and I also think he was singlehandedly responsible from driving away everybody from learning common lisp in the early 2000s
[13:50:51] <epony> there are mail to news gateways for "faster" reading than email clients
[13:51:01] <hayley> https://www.youtube.com/watch?v=sM7odiEO1k8
[13:51:02] -ixelp- We Take Mystery (To Bed) - YouTube
[13:51:36] <kakuhen> i have several favorite personalities from CLL
[13:51:43] <kakuhen> i'm afraid to name names because they might be in here, too
[13:52:03] <hayley> lol, it came through twice, since I sent one before subscribing.
[13:52:14] <epony> kids
[13:58:34] <ck_> kakuhen: I understand, maybe we can just make references. In MatzLisp (Ruby): puts "I understand".inspect
[14:30:36] *** Joins: clintm (~user@h118.153.91.75.dynamic.ip.windstream.net)
[14:37:53] <pl> kakuhen: sounds like two particular individuals 
[14:38:21] <pl> One being rather abrasive, and another being gavino 
[14:56:19] <hayley> Apparently my phone knows the name Gnutella, but can't spell shit.
[14:58:51] <moon-child> the only good phone keyboard I ever used was made by microsoft, and they discontinued it
[14:59:05] <moon-child> I kept using that shit for years after everybody else forgot about it
[14:59:15] <moon-child> eventually os upgrade borked it.  And I don't like rces sooo
[15:01:37] <dave0> nite all
[15:01:47] <moon-child> night
[15:01:53] <dave0> byes moon-child 
[15:02:04] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[15:10:32] * moon-child tempted to write 'apl by the pound'
[15:13:24] <hayley> Oh God oh fuck
[15:13:31] <hayley> What happened?
[15:43:11] *** Quits: Alfr (~Alfr@user/alfr) (Killed (zirconium.libera.chat (Nickname regained by services)))
[15:43:15] *** Joins: Alfr (~Alfr@user/alfr)
[16:10:50] <treflip> "...has quit: Killed" <<< IRC is spooky
[16:15:15] <selwyn> i showed my friends comp.lang.lisp and they asked me 'why are you learning a racist programming language'
[16:15:31] <ck_> D: that italian guy
[16:15:45] <selwyn> i just went on for the first time in a while
[16:15:57] <ck_> yeah, it's insane, I don't know when that started either
[16:15:58] <selwyn> some new (troll) faces
[16:19:33] <selwyn> https://arxiv.org/abs/2112.13905
[16:22:16] <ck_> first time I've seen the phrase "inverse engineering"
[16:24:22] <ck_> on page 6, right column third paragraph, shouldn't one of those t=Ts be t=0?
[16:25:40] <selwyn> uh
[16:25:42] <selwyn> good catch
[16:27:18] <selwyn> thanks!
[16:31:11] <ck_> https://www.youtube.com/watch?v=S65ZzffW-Cw
[16:31:12] -ixelp- Dr. Zoidberg - Hooray, I'm Useful - YouTube
[16:32:54] <selwyn> ghislaine maxwell used to code on a wang
[16:33:56] <ck_> wang - a part of a plough?
[16:34:04] <selwyn> https://en.wikipedia.org/wiki/Wang_2200
[16:34:32] <ck_> adorable device
[16:39:29] <selwyn> > equivalent to $43,141 in 2020
[17:10:08] *** Quits: treflip (~user@user/treflip) (Quit: bye!)
[17:15:06] *** Quits: pjb (~pjb@user/pjb) (Read error: Connection reset by peer)
[17:16:07] <ck_> I guess being a member of the jet set also means membership in some other sets
[17:32:34] *** Joins: pjb (~pjb@user/pjb)
[17:35:56] <ck_> what are you usually doing for new year's?
[17:41:10] <selwyn> usually a house party
[17:57:55] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:06:39] <gilberth> Ok. With a few tricks I can get my SBCL to match at 1.3GC/s. It's not so bad actually. gcc-11.1: 1.57GB/s, gcc-4.9: 1.15GB/s, clang-6.0: 425GB/s. Note that without the tricks, CCL already is at 1.1GC/s, while SBCL is only at 598GC/s. So CCL is twice as fast as clang!!!!eleven
[18:08:43] <gilberth> When I unroll, I get 2GC/s.
[18:12:52] <gilberth> Or put otherwise: Only gcc-11.1 is faster than CCL, without using tricks to help SBCL. The poor performance of clang surprises me.
[18:13:42] <ck_> you're mentioning "a few tricks" for sbcl. How many tricks do you bestow upon clang in this comparison?
[18:15:07] <gilberth> ck_: The trick is to turn (<= 48 ch 57) into (< ch (logand (1- (expt 2 64)) (- ch 48)) 9) essentially.
[18:16:04] <gilberth> This does two things: Force SBCL to keep CH unboxed and (2) to have one conditional jump only for (<= a ch b). The latter is a transformation that gcc applies automatically.
[18:17:35] <gilberth> And the former is meaningless for C.
[18:17:59] <ck_> I see, thanks for expanding on that
[18:18:19] <ck_> have you compared on an assembly level?
[18:18:22] *** Joins: cranium (~cranium@user/cranium)
[18:19:06] <gilberth> Yep, I do that all the time.
[18:19:37] <ck_> what's the reason for clangs slowness?
[18:21:49] <gilberth> Bad luck, I'd say.
[18:22:17] <ck_> fair enough
[18:22:36] <ck_> on #2 of ycombinator news right now: https://github.com/liaoxiong3x/DeepCreamPy
[18:22:37] -ixelp- GitHub - liaoxiong3x/DeepCreamPy
[18:22:41] <ck_> what a world..
[18:22:50] <gilberth> It somehow misses the (<= a ch b) trick and schedules a bit odd. The latter is the main reason for SBCL slowness, that hayley spotted, too. And I don't use her patch yet.
[18:24:01] <gilberth> In general I made the experience that gcc-11 often outpaces clang.
[18:36:19] <selwyn> ck: lol
[18:38:58] <gilberth> Unpatched SBCL is particular unlucky. Would it keep the basic blocks in just the very same order as they appear in the big PROG that I generate, it would have been faster.
[18:40:09] <selwyn> its still not as horny as the elisp sex toy controller
[18:40:53] <gilberth> Is there an RFC for sex toys as there is for coffee makers?
[18:40:56] *** Joins: humasect (~humasect@2001:1970:57e0:4100::9e43)
[18:41:41] <ck_> there's probably sexting over avian carrier, for centuries maybe before the spec was even written
[18:42:17] <ck_> "what arst thou wearing" and so on, I don't know, can't really speak old english
[18:44:28] <gilberth> Maybe writing was invented for just that? Who knows.
[18:44:37] <ck_> what I'd really like is a frontal lobe stimulant, like giving your conscience a megaphone on demand
[18:44:37] <selwyn> iirc the gunpowder plot was planned by dead drops of substitution cipher encoded messages in barrels
[18:47:16] <humasect> ck_: what do you mean ?
[18:47:31] <humasect> selwyn: V for Vendetta ?
[18:47:38] <ck_> humasect: by the stimulant? by frontal lobe?
[18:47:43] <humasect> ck_: yeah
[18:47:47] <selwyn> the gunpowder plot is indeed in that film
[18:48:02] <selwyn> however, it seems i was thinking of this https://en.wikipedia.org/wiki/Babington_Plot
[18:48:03] <ck_> what specifically do you mean, I meant what I said
[18:48:24] <selwyn> there were lots of conspiracies at that time to try to make england catholic again
[18:48:36] <ck_> haha, you know, putting it into that phrasing
[18:48:46] <ck_> it sounds like a bunch of people running around in red hats
[18:49:08] <humasect> ck_: wait. are you asking what i mean by asking what you mean... ?
[18:50:34] <ck_> I don't know what you'd like me to clarify. "I'd like a frontal lobe stimulant" means I would very much wish for a way to boost or enable or stimulate the frontal lobe, that is the lobe of the brain in the front, in order to benefit from its activity in the form of increased critical faculties
[18:54:08] <humasect> why conscience a megaphone? can't hear it?
[18:55:32] <ck_> megaphone as a metaphor for boosting, increasing, emboldening or enhancing
[19:04:16] <humasect> forget i asked. i was just curious
[19:05:53] <ck_> I'm trying to answer, and can't tell what the misunderstanding is
[19:06:09] <ck_> selwyn: https://imgur.com/a/H5n468F
[19:06:10] -ixelp- Imgur: The magic of the Internet
[19:10:40] <ck_> humasect: I'm not displaying join or part events. when did you join the channel (how much context to that line you were asking about have you seen) ? maybe that's the issue
[19:18:25] *** Joins: Inline (~Inline@2a02:908:1252:7a80::47)
[19:34:49] <gilberth> Skipping the bounds check still can give me quite an improvement. This is no news and for scanning I place a sentinel at the end of my buffer which would be subject to the per character dispatch. In a scanner the initial dispatch usually is huge anyway, so including a case for seeing the sentinel is almost free.
[19:35:49] <gilberth> Once we leave the initial dispatch for e.g. an initial digit, we look for [0-9]*. The sentinel will make this [0-9]* loop exit as any other [^0-9]. At this point the scanner does not care that it actually hit the end of the input, [0-9]* was matched and thus a token was found. It's only the initial dispatch again, which would need to be concerned with EOF.
[19:38:47] <gilberth> For a greper this is different. It would need to wade through lots of haystack looking for the head of a needle. Dispatching on, say, [0-9] and EOF is as expensive as doing a bounds check. The extra EOF becomes cheap with a scanner, as it looks for a dozen different classes anyway.
[19:40:32] <gilberth> Hence, supposing that the API would allow for placing a sentinel at the end of input, the sentinel should look like the needle head on the grounds that hay is expected to be abundant while needles are scarce.
[19:41:29] *** Joins: treflip (~user@user/treflip)
[19:42:23] <gilberth> [Just thinking aloud, for hayley to read, or who ever might be interested.]
[19:43:41] <gilberth> Before someone asks: My dispatch is O(log n), n being the cases to handle.
[20:00:05] *** Quits: Inline (~Inline@2a02:908:1252:7a80::47) (Remote host closed the connection)
[20:02:13] *** Quits: humasect (~humasect@2001:1970:57e0:4100::9e43) (Quit: Leaving...)
[20:07:57] *** Joins: Inline (~Inline@2a02:908:1252:7a80::47)
[20:13:54] <gilberth> The actual implementation is a bit more complicated though. My sentinel is an end-of-buffer sentinel. With a scanner hitting it would always take me to the jam state, as no rule matches the sentinel. In that jam state I invoke the underflow discipline and jump back to where I came from, would there be more input for it being a false jam.
[20:14:36] *** Quits: pjb (~pjb@user/pjb) (Read error: Connection reset by peer)
[20:26:38] *** Quits: Inline (~Inline@2a02:908:1252:7a80::47) (Remote host closed the connection)
[20:27:59] *** Joins: Inline (~Inline@2a02:908:1252:7a80::47)
[20:28:35] *** Quits: Inline (~Inline@2a02:908:1252:7a80::47) (Remote host closed the connection)
[21:01:49] <gilberth> Ok. SBCL is not eager to invert conditional jumps to get a better scheduling. That is a (if (< x y) (go L1) (go L2)) is not turned into a (if (> x y) (go L2) (go L1)), even when that would give me way better basic block placement. And: For #'= when I try to flip an (IF (= x y) ...) into a (IF (/= x y) ...), SBCL flips it back. It doesn't do so with #'< and #'> it seems.
[21:16:26] <semz> #'< and #'> aren't complements
[21:18:01] <gilberth> Sure, I am off my one. But that is not the issue here.
[22:08:05] <gilberth> Ok. When I carefully tweak my code generator to generate what SBCL turns into better basic block placement and do unrolling on self-looping states, I am at 1.8GC/s with bounds checks, at at 2.5GC/s without.
[22:25:59] *** Quits: treflip (~user@user/treflip) (Quit: good night!)
[22:28:13] <gilberth> My code does (SETQ CH (AREF BUF P)) (INCF P) (DECF CH 48) (IF (< CH 10) ...). When I transpose those two INCFs and cross my fingers that SBCL doesn't do silly things like LEA RAX, [RBX+2] : MOV RBX, RAX instead of just ADD RBX, 2 for no reason, I peak at 2.7GC/s and I am out of options for further improvements.
[22:32:46] <gilberth> Actually I could see improvements as I don't need to increment P in an unrolled loop, but SBCL can't move a delta in (aref buf (+ p delta)) into the delta of the load instruction.
[22:33:51] <gilberth> offset, rather.
[22:39:45] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[22:40:10] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[23:10:01] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[23:49:57] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[23:59:06] *** Quits: euandreh (~euandreh@191.181.59.160) (Ping timeout: 245 seconds)
