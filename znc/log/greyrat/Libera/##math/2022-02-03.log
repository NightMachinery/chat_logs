[00:00:35] <qbt> I think the identifications that would correspond to the relation z~z^(pi*i) of the square in your link would yield almost the same figure as in my link, but then the orientation of one of the 1-simplices is messed up and idk if that would still be a representation of the projective plane then
[00:00:41] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[00:00:56] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[00:01:24] <greenbagels> the projective plane hinges on the identification of opposite edges
[00:01:33] <greenbagels> if you remove that you jsut get a square
[00:02:24] <Franciman> can you prove that the square is homeomorphic to the circle?
[00:02:31] <Franciman> then you have an easy proof that
[00:02:42] <Franciman> there is an identification from the circle (by identifying the two semiarcs)
[00:02:47] <Franciman> to the projective plane
[00:03:14] <Franciman> identifying via the antipodal map, sorry
[00:03:32] <Franciman> in fact, i am a proponent of the projective plane theory
[00:03:38] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[00:03:38] <Franciman> flat eathers should consider it
[00:03:41] <qbt> Franciman: I am familiar with this anipodal mapping, yes
[00:03:43] <qbt> haha
[00:03:54] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[00:04:07] <Franciman> qbt: how do you build the projective plane?
[00:04:13] <qbt> I am just not sure I uderstand how we get from that to the delta simplex
[00:04:24] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[00:06:43] <qbt> I want to take the quotient of the unit disk D with antipodal points identified, so z~z^(pi*i) for every z on the boundary of D
[00:07:49] *** Joins: audiobirb (~audio@user/audio)
[00:07:54] *** Joins: Pickchea (~private@user/pickchea)
[00:08:38] <Franciman> wait what is the delta simplex?
[00:08:49] <qbt> so if I start then with a delta-structure for the unit disk, then the relation would allow me to make some identifications of simplices, and thus land me in the usual delta-complex of the projective plane
[00:09:15] <qbt> question is what does the initial complex for D look like
[00:09:31] <qbt> here is the one I consider for the projective plane: https://math.stackexchange.com/questions/3532343/delta-complex-structure-of-mathbb-r-pn
[00:09:31] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[00:09:41] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 250 seconds)
[00:09:51] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[00:11:19] *** Quits: marlboro (~i.am@user/marlboro) (Quit: a pentium 100 "running" windows 11 trying to play Last of Us II at ps4emu... that's my brain trying understand 0->R->R->R/2R->0)
[00:11:24] <johnkeats7> qbt, a single triangle with no identifications is a unit disk
[00:11:40] <johnkeats7> topologically
[00:12:52] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[00:15:01] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:15:15] <qbt> johnkeats7: how so?
[00:15:51] *** Joins: zacts (~zacts@user/zacts)
[00:15:57] *** Joins: Pseudocrat (~sudo@user/pseudocrat)
[00:16:02] <johnkeats7> well, it is so
[00:16:11] <johnkeats7> just round the corners
[00:16:41] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[00:17:10] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[00:18:30] *** Quits: Maturion (~Maturion@p200300ede70deb00e34c133d0d5a0012.dip0.t-ipconnect.de) (Remote host closed the connection)
[00:18:47] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[00:18:50] *** Joins: ssiyad (~ssiyad@user/ssiyad)
[00:18:53] *** Quits: cul8r (~cul8r@2601:8c3:4000:b0d0::e65c) (Remote host closed the connection)
[00:18:58] *** Quits: MatSharrow (~matthew@36.115.9.51.dyn.plus.net) (Quit: Konversation terminated!)
[00:19:30] *** Joins: Maturion (~Maturion@p200300ede70deb00e34c133d0d5a0012.dip0.t-ipconnect.de)
[00:19:40] <qbt> alright, but for purposes of constructing a delta-simplex for the projective plane it seems more natural to maybe start from a square. Would I then construct a square from the triangle by adding another 1-simplex and "splitting" one of the edges?
[00:20:33] *** Quits: Pseudocrat (~sudo@user/pseudocrat) (Ping timeout: 256 seconds)
[00:20:36] <qbt> in that case the orientation is indeed the same as in greenbagels' link, I think
[00:21:36] *** Quits: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca) (Remote host closed the connection)
[00:22:08] *** Joins: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca)
[00:27:22] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[00:27:31] *** Joins: pluri (~pluri@user/pluri)
[00:28:48] <johnkeats7> well you didn't say you want the projective plane
[00:29:12] <johnkeats7> then yeah divide a square along the diagonal and identify the sides switching the orientations
[00:30:40] *** Quits: tiferrei (~tiferrei@user/tiferrei) (Remote host closed the connection)
[00:30:58] *** Joins: tiferrei (~tiferrei@user/tiferrei)
[00:31:01] <qbt> johnkeats7: I'm not sure why I need to switch the orientations - like if I consider the torus then it's intuitively clear what the orientations should be, but for the projective plane I can't see how it follows from the equivalence relation
[00:41:32] *** Quits: Boarders_ (sid425905@id-425905.lymington.irccloud.com) (*.net *.split)
[00:41:32] *** Quits: lericson (~lericson@user/lericson) (*.net *.split)
[00:41:32] *** Quits: meltingwax (sid429936@id-429936.hampstead.irccloud.com) (*.net *.split)
[00:41:32] *** Quits: Fangs (sid141280@id-141280.hampstead.irccloud.com) (*.net *.split)
[00:41:32] *** Quits: elichai2 (sid212594@id-212594.hampstead.irccloud.com) (*.net *.split)
[00:41:32] *** Quits: pdg (sid395042@id-395042.lymington.irccloud.com) (*.net *.split)
[00:41:32] *** Quits: leonardus (sid358597@id-358597.tinside.irccloud.com) (*.net *.split)
[00:41:32] *** Quits: bjs (sid190364@user/bjs) (*.net *.split)
[00:41:32] *** Quits: MizMahem (sid296354@user/mizmahem) (*.net *.split)
[00:41:32] *** Quits: cloudcell (sid48145@id-48145.tinside.irccloud.com) (*.net *.split)
[00:41:32] *** Quits: Etienne (~Etienne@esimon.eu) (*.net *.split)
[00:41:32] *** Quits: mbarbar (~mbarbar@oak.xen.prgmr.com) (*.net *.split)
[00:41:32] *** Quits: ffs (uid158779@ilkley.irccloud.com) (*.net *.split)
[00:41:32] *** Quits: specing (~specing@user/specing) (*.net *.split)
[00:41:32] *** Quits: whatsupdoc (uid509081@hampstead.irccloud.com) (*.net *.split)
[00:41:32] *** Quits: kurfen_ (~kurfen@213.152.188.7) (*.net *.split)
[00:41:32] *** Quits: michele (~eraser@user/michele) (*.net *.split)
[00:41:32] *** Quits: Trigo (~NeedMathH@64.201.115.44) (*.net *.split)
[00:41:32] *** Quits: econo (uid147250@user/econo) (*.net *.split)
[00:41:32] *** Quits: qbt (~qbt@user/edun) (*.net *.split)
[00:41:32] *** Quits: qeed (~qeed@072-190-106-143.res.spectrum.com) (*.net *.split)
[00:41:32] *** Quits: SGautam (uid286066@ilkley.irccloud.com) (*.net *.split)
[00:41:32] *** Quits: cheater (~Username@user/cheater) (*.net *.split)
[00:41:32] *** Quits: a0z1 (~a0z1@cpc158779-hari22-2-0-cust168.20-2.cable.virginm.net) (*.net *.split)
[00:41:32] *** Quits: orthoplex64 (~crm@70.120.0.94) (*.net *.split)
[00:41:32] *** Quits: nullcone (uid11626@helmsley.irccloud.com) (*.net *.split)
[00:41:32] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (*.net *.split)
[00:41:32] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (*.net *.split)
[00:41:32] *** Quits: redlegion (sid429547@ilkley.irccloud.com) (*.net *.split)
[00:41:32] *** Quits: Sheilong (uid293653@ilkley.irccloud.com) (*.net *.split)
[00:41:32] *** Quits: macaw (~macaw@87-205-47-92.adsl.inetia.pl) (*.net *.split)
[00:41:32] *** Quits: seninha (~seninha@user/seninha) (*.net *.split)
[00:41:32] *** Quits: resistfascism (~jthancoc@c-73-179-2-115.hsd1.fl.comcast.net) (*.net *.split)
[00:41:32] *** Quits: millido (~millido@84.210.150.128) (*.net *.split)
[00:41:32] *** Quits: NEYi (~NEYi@109.251.216.38) (*.net *.split)
[00:41:32] *** Quits: nickel8448 (~rahulwadh@147.80.76.34.bc.googleusercontent.com) (*.net *.split)
[00:41:32] *** Quits: Klinda (~superleag@user/klinda) (*.net *.split)
[00:41:33] *** Quits: xkuru (~xkuru@user/xkuru) (*.net *.split)
[00:41:33] *** Quits: Trashlord (~trash@user/trashlord) (*.net *.split)
[00:41:33] *** Quits: Oni^ (oni@kapsi.fi) (*.net *.split)
[00:41:33] *** Quits: X-Scale (~ARM@218.92.108.93.rev.vodafone.pt) (*.net *.split)
[00:41:33] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (*.net *.split)
[00:41:33] *** Quits: `join_subline (~join_subl@135-23-248-130.cpe.pppoe.ca) (*.net *.split)
[00:41:33] *** Quits: hyiltiz (~quassel@31.220.5.250) (*.net *.split)
[00:41:33] *** Quits: APic (~apic@apic.name) (*.net *.split)
[00:41:33] *** Quits: FragmentedCurve (~FC@pool-100-2-232-17.nycmny.fios.verizon.net) (*.net *.split)
[00:41:33] *** Quits: rtsn (~nstr@user/rtsn) (*.net *.split)
[00:41:33] *** Quits: Hafydd (~Hafydd@user/hafydd) (*.net *.split)
[00:41:33] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (*.net *.split)
[00:41:33] *** Quits: towel (~towel@user/towel) (*.net *.split)
[00:41:33] *** Quits: Duckle (~Duckle@user/duckle) (*.net *.split)
[00:41:33] *** Quits: Leonarbro (~Leonet@user/leonarbro) (*.net *.split)
[00:41:33] *** Quits: biberao (~Unknown@user/biberao) (*.net *.split)
[00:41:33] *** Quits: mawk (~mawk@wireguard/contributor/mawk) (*.net *.split)
[00:41:33] *** Quits: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net) (*.net *.split)
[00:41:33] *** Quits: alphamul2 (~nibbles@205.185.116.30) (*.net *.split)
[00:41:33] *** Quits: swistak (~swistak@185.21.216.141) (*.net *.split)
[00:41:33] *** Quits: davros (~davros@host86-185-61-1.range86-185.btcentralplus.com) (*.net *.split)
[00:41:33] *** Quits: Nitrousoxide (~msdos@user/nitrousoxide) (*.net *.split)
[00:41:33] *** Quits: Dotz0cat (~Dotz0cat@h55.84.187.173.dynamic.ip.windstream.net) (*.net *.split)
[00:41:33] *** Quits: wz1000 (~zubin@static.11.113.47.78.clients.your-server.de) (*.net *.split)
[00:41:33] *** Quits: Pollion (~bombar@crans/pollion) (*.net *.split)
[00:41:33] *** Quits: dskull (~dskull@user/dskull) (*.net *.split)
[00:41:33] *** Quits: fbiagent (~fbiagent@user/fbiagent) (*.net *.split)
[00:41:33] *** Quits: justGhost (~justache@user/justache) (*.net *.split)
[00:41:33] *** Quits: bgs (~bgs@cpe-212-85-160-171.cable.telemach.net) (*.net *.split)
[00:41:33] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (*.net *.split)
[00:41:33] *** Quits: Bobathan (~admin@cpe-65-29-248-157.wi.res.rr.com) (*.net *.split)
[00:41:33] *** Quits: Z-module (~user@aero-astro-estates.mit.edu) (*.net *.split)
[00:41:33] *** Quits: Zairex (~Teekoo@178.62.135.229) (*.net *.split)
[00:41:33] *** Quits: webstran- (~webstrand@user/webstrand) (*.net *.split)
[00:41:34] *** Quits: llorllale (~llorllale@198.98.119.85) (*.net *.split)
[00:41:34] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (*.net *.split)
[00:41:34] *** Quits: jkovac1 (~jkovac1@user/jkovac1) (*.net *.split)
[00:41:34] *** Quits: AviKav (~AviKav@pool-71-191-176-243.washdc.fios.verizon.net) (*.net *.split)
[00:41:34] *** Quits: nejimban (~ben@user/nejimban) (*.net *.split)
[00:41:34] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (*.net *.split)
[00:41:34] *** Quits: grindhold (~quassel@mail.skarphed.org) (*.net *.split)
[00:41:34] *** Quits: juri_ (~juri@178.63.35.222) (*.net *.split)
[00:41:34] *** Quits: voiceofreason (~voiceofre@207.148.10.181) (*.net *.split)
[00:41:34] *** Quits: DefiantN (~DefiantN@user/defiantn) (*.net *.split)
[00:41:34] *** Quits: drdo (~drdo@roach0.drdo.eu) (*.net *.split)
[00:41:34] *** Quits: sek (~sek@user/sek) (*.net *.split)
[00:41:34] *** Quits: carter (sid14827@helmsley.irccloud.com) (*.net *.split)
[00:41:34] *** Quits: mh_le (~mads@user/mh-le/x-4465771) (*.net *.split)
[00:41:34] *** Quits: yawkat (~yawkat@cats.coffee) (*.net *.split)
[00:41:34] *** Quits: flynn (~mcbloch@user/flynn) (*.net *.split)
[00:41:34] *** Quits: spirit (~spirit@233.ip-144-217-92.net) (*.net *.split)
[00:41:34] *** Quits: alan1 (~alan@user/Nucleos) (*.net *.split)
[00:41:34] *** Quits: fweht (uid404746@lymington.irccloud.com) (*.net *.split)
[00:41:34] *** Quits: csmiga (~Thunderbi@ec2-52-207-160-196.compute-1.amazonaws.com) (*.net *.split)
[00:41:34] *** Quits: robin (~robin@user/terpri) (*.net *.split)
[00:41:34] *** Quits: emf (~emf@2620:10d:c090:400::5:b0fe) (*.net *.split)
[00:41:34] *** Quits: kilobyte_ch (~kbch@77.109.171.85) (*.net *.split)
[00:41:34] *** Quits: gateway2000 (~gateway20@2603-7081-5505-a2ef-b813-f894-7c21-9b70.res6.spectrum.com) (*.net *.split)
[00:41:34] *** Quits: loadedanvils (uid128751@uxbridge.irccloud.com) (*.net *.split)
[00:41:34] *** Quits: son0p (~ff@181.136.122.143) (*.net *.split)
[00:41:34] *** Quits: freep (~freepppp@46.246.189.172.dsl.dyn.forthnet.gr) (*.net *.split)
[00:41:34] *** Quits: slidercrank (~slidercra@user/slidercrank) (*.net *.split)
[00:41:34] *** Quits: Plazma (~Plazma@user/plazma) (*.net *.split)
[00:41:34] *** Quits: Hazey_Dream (~user@cpe5c7d7dbd2142-cm5c7d7dbd2140.cpe.net.cable.rogers.com) (*.net *.split)
[00:41:34] *** Quits: emerent (~quassel@p200300cd5704438cba27ebfffed28a59.dip0.t-ipconnect.de) (*.net *.split)
[00:41:34] *** Quits: maroon (tinycrypt@user/maroon) (*.net *.split)
[00:41:34] *** Quits: NllPtr (~NllPtr@186-78-241-153.baf.movistar.cl) (*.net *.split)
[00:41:35] *** Quits: kmh_ (~kmh@94.31.106.215) (*.net *.split)
[00:41:35] *** Quits: Isthmusi (~Isthmus@user/isveni) (*.net *.split)
[00:41:35] *** Quits: aeplus (~steve@2603-8000-cf42-7ec1-162f-1996-0ae2-d7da.res6.spectrum.com) (*.net *.split)
[00:41:35] *** Quits: susam (~susam@user/susam) (*.net *.split)
[00:41:35] *** Quits: msch (sid28472@id-28472.tinside.irccloud.com) (*.net *.split)
[00:41:35] *** Quits: Duns_Scrotus__ (sid262565@id-262565.tinside.irccloud.com) (*.net *.split)
[00:41:35] *** Quits: sveit_ (~sveit@2001:19f0:ac01:247:5400:ff:fe5c:689f) (*.net *.split)
[00:41:35] *** Quits: meingtsla (retrograde@user/meingtsla) (*.net *.split)
[00:41:35] *** Quits: Panther (Lord@2601:18a:c000:5290:4cbe:f5f5:da11:6c2) (*.net *.split)
[00:41:35] *** Quits: dan__ (~omnisip@2601:280:5880:1b50:ae16:2dff:fe78:44b4) (*.net *.split)
[00:41:35] *** Quits: Furai (~Furai@furai.pl) (*.net *.split)
[00:41:35] *** Quits: DrMax (~DrMax@node-1w7jra94757g0kdpr9wjqf80y.ipv6.telus.net) (*.net *.split)
[00:41:35] *** Quits: jwpapi (sid502614@id-502614.uxbridge.irccloud.com) (*.net *.split)
[00:41:35] *** Quits: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8) (*.net *.split)
[00:41:35] *** Quits: |smlckz| (~smlckz@user/smlckz) (*.net *.split)
[00:41:35] *** Quits: qwedfg_ (~qwedfg@user/qwedfg) (*.net *.split)
[00:41:35] *** Quits: tmyklebu (~tmyklebu@ns542847.ip-158-69-248.net) (*.net *.split)
[00:41:35] *** Quits: ckie (~ckie@user/cookie) (*.net *.split)
[00:41:35] *** Quits: Matt|home (~matt@adsl-74-233-58-56.mia.bellsouth.net) (*.net *.split)
[00:41:35] *** Quits: lawt (~lawt@2601:200:8101:f140:dea6:32ff:fea1:adf9) (*.net *.split)
[00:41:35] *** Quits: bambams (~bambams@user/bambams) (*.net *.split)
[00:41:35] *** Quits: avoidr (~avoidr@user/avoidr) (*.net *.split)
[00:41:35] *** Quits: int-e (~noone@int-e.eu) (*.net *.split)
[00:41:35] *** Quits: geonic (~geonic@user/geonic) (*.net *.split)
[00:41:35] *** Quits: cynicalcats (~cynicalca@user/cynicalcats) (*.net *.split)
[00:41:35] *** Quits: Kol (~Kol@75.157.122.186) (*.net *.split)
[00:41:36] *** Quits: AMG (ghebo@user/amg) (*.net *.split)
[00:41:36] *** Quits: mixfix41 (~homefame@user/mixfix41) (*.net *.split)
[00:41:36] *** Quits: OverCoder (~OverCoder@user/overcoder) (*.net *.split)
[00:41:36] *** Quits: djinni (~djinni@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[00:41:36] *** Quits: tafa (~tafa@user/tafa) (*.net *.split)
[00:41:36] *** Quits: lagash (lagash@lagash.shelltalk.net) (*.net *.split)
[00:41:36] *** Quits: haasn (~nand@haasn.dev) (*.net *.split)
[00:41:36] *** Quits: bildramer (~bildramer@athedsl-150020.home.otenet.gr) (*.net *.split)
[00:41:36] *** Quits: ryzenda (~ryzenda@pool-74-109-246-70.pitbpa.fios.verizon.net) (*.net *.split)
[00:41:36] *** Quits: Galois (djao@efnet.math.uwaterloo.ca) (*.net *.split)
[00:41:36] *** Quits: sm2n (ae95cb1267@user/sm2n) (*.net *.split)
[00:41:36] *** Quits: Hummer12007 (061e0434dc@2604:bf00:561:2000::16) (*.net *.split)
[00:41:36] *** Quits: riv (river@tilde.team/user/river) (*.net *.split)
[00:41:36] *** Quits: fxrh (~fxrh@user/fxrh) (*.net *.split)
[00:41:36] *** Quits: FLHerne (flh@flherne.uk) (*.net *.split)
[00:41:36] *** Quits: pikapika (~pikapika_@pika.powered.by.lunarbnc.net) (*.net *.split)
[00:41:36] *** Quits: Macuser (Macuser@here.for-the.chat) (*.net *.split)
[00:41:36] *** Quits: jyc (sid40911@id-40911.ilkley.irccloud.com) (*.net *.split)
[00:41:36] *** Quits: ra4king (~ra4king@roiatalla.com) (*.net *.split)
[00:41:36] *** Quits: udevd (~kaetzchen@user/udevd) (*.net *.split)
[00:41:36] *** Quits: Arsen (arsen@managarm/dev/Arsen) (*.net *.split)
[00:41:36] *** Quits: Ox5cfb (~jun@maillard.blue) (*.net *.split)
[00:41:36] *** Quits: catbeard (~noise@user/catbeard) (*.net *.split)
[00:41:36] *** Quits: Robbin- (~Robbin@user/robbin) (*.net *.split)
[00:41:36] *** Quits: mare (sid522462@id-522462.helmsley.irccloud.com) (*.net *.split)
[00:41:36] *** Quits: HalfCent (~m-tfhzbh@ip133.ip-66-70-231.net) (*.net *.split)
[00:41:36] *** Quits: ColdKeyboard (~ColdKeybo@user/coldkeyboard) (*.net *.split)
[00:41:36] *** Quits: Guest4960 (~moses_@user/moses/x-1166525) (*.net *.split)
[00:41:36] *** Quits: olspookishmagus (~pookie@snf-137798.vm.okeanos.grnet.gr) (*.net *.split)
[00:41:36] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (*.net *.split)
[00:41:36] *** Quits: Pickchea (~private@user/pickchea) (*.net *.split)
[00:41:36] *** Quits: audiobirb (~audio@user/audio) (*.net *.split)
[00:41:36] *** Quits: acd (~acd@2600:1700:99f3:250::40) (*.net *.split)
[00:41:36] *** Quits: ssiyad (~ssiyad@user/ssiyad) (*.net *.split)
[00:41:36] *** Quits: esther (~esther@24-155-112-236.dyn.grandenetworks.net) (*.net *.split)
[00:41:37] *** Quits: dstein64 (~dstein64@dannyadam.com) (*.net *.split)
[00:41:37] *** Quits: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de) (*.net *.split)
[00:41:37] *** Quits: plankster (~plankster@user/plankers) (*.net *.split)
[00:41:37] *** Quits: deltab (~deltab@user/deltab) (*.net *.split)
[00:41:37] *** Quits: stuebinm (~stuebinm@user/stuebinm) (*.net *.split)
[00:41:37] *** Quits: hfsoulz (~hfsoulz@user/hfsoulz) (*.net *.split)
[00:41:37] *** Quits: MadLamb (~fabio@p50892adf.dip0.t-ipconnect.de) (*.net *.split)
[00:41:37] *** Quits: peeps[win] (~peepsalot@openscad/peepsalot) (*.net *.split)
[00:41:37] *** Quits: gauge (~gauge@user/gauge) (*.net *.split)
[00:41:37] *** Quits: causative (~halberd@user/causative) (*.net *.split)
[00:41:37] *** Quits: Bayes (~Bayes@user/bayes) (*.net *.split)
[00:41:37] *** Quits: Svitkona (~Svitkona@157.245.38.135) (*.net *.split)
[00:41:37] *** Quits: learner36 (~learner36@cpef81d0fa12c13-cmf81d0fa12c10.cpe.net.cable.rogers.com) (*.net *.split)
[00:41:37] *** Quits: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com) (*.net *.split)
[00:41:37] *** Quits: simon816 (~simon816@ec2-35-178-246-72.eu-west-2.compute.amazonaws.com) (*.net *.split)
[00:41:37] *** Quits: buster (~user@dsl-multi-static-81-140-129-201.in-addr.broadbandscope.com) (*.net *.split)
[00:41:37] *** Quits: koro (koro@efnet.math.uwaterloo.ca) (*.net *.split)
[00:41:37] *** Quits: Bluefoxicy (~Bluefoxic@c-73-132-244-30.hsd1.md.comcast.net) (*.net *.split)
[00:41:37] *** Quits: BinaryWave (~binarywav@ip68-2-121-39.ph.ph.cox.net) (*.net *.split)
[00:41:37] *** Quits: aindilis (~aindilis@152-44-40-72.us-chi1.upcloud.host) (*.net *.split)
[00:41:37] *** Quits: mrdata (~mrdata@user/mrdata) (*.net *.split)
[00:41:37] *** Quits: rawgreaze (~rawgreaze@user/rawgreaze) (*.net *.split)
[00:41:37] *** Quits: Cyp (~cyp@213.237.88.120) (*.net *.split)
[00:41:37] *** Quits: shugo (~shugo@user/shugo) (*.net *.split)
[00:41:37] *** Quits: calcmandan (~quassel@user/calcmandan) (*.net *.split)
[00:41:37] *** Quits: Decker (~d3x0r@user/d3x0r) (*.net *.split)
[00:41:37] *** Quits: eck (~root@user/eck) (*.net *.split)
[00:41:37] *** Quits: steam (~steam@user/steam) (*.net *.split)
[00:41:37] *** Quits: minto (~mintograd@47.201.5.61) (*.net *.split)
[00:41:37] *** Quits: phantomcircuit (~phantomci@192.241.205.97) (*.net *.split)
[00:41:37] *** Quits: ldunn (~ldunn@user/ldunn) (*.net *.split)
[00:41:37] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (*.net *.split)
[00:41:37] *** Quits: em (~em@user/emnode) (*.net *.split)
[00:41:37] *** Quits: dumptruckman (~dumptruck@45-79-173-88.ip.linodeusercontent.com) (*.net *.split)
[00:41:37] *** Quits: BUSY (~BUSY@user/busy) (*.net *.split)
[00:41:37] *** Quits: kaichiuchu (~mike@user/kaichiuchu) (*.net *.split)
[00:41:37] *** Quits: YoungFrog (~youngfrog@39.129-180-91.adsl-dyn.isp.belgacom.be) (*.net *.split)
[00:41:37] *** Quits: pluri (~pluri@user/pluri) (*.net *.split)
[00:41:37] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (*.net *.split)
[00:41:37] *** Quits: tiferrei (~tiferrei@user/tiferrei) (*.net *.split)
[00:41:37] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (*.net *.split)
[00:41:37] *** Quits: madage (~madage@user/madage) (*.net *.split)
[00:41:37] *** Quits: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani) (*.net *.split)
[00:41:37] *** Quits: mickey8 (~user@user/mickey) (*.net *.split)
[00:41:37] *** Quits: tusko (~yeurt@copyfree/advocate/tusko) (*.net *.split)
[00:41:37] *** Quits: CombatVet (~c4@user/combatvet) (*.net *.split)
[00:41:37] *** Quits: mornfall (~mornfall@user/mornfall) (*.net *.split)
[00:41:37] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (*.net *.split)
[00:41:37] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (*.net *.split)
[00:41:37] *** Quits: noteness (~noteness@user/noteness) (*.net *.split)
[00:41:37] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (*.net *.split)
[00:41:37] *** Quits: therufuser (~therufuse@p5b02e22b.dip0.t-ipconnect.de) (*.net *.split)
[00:41:37] *** Quits: bowlofeggs (~bowlofegg@fedora/bowlofeggs) (*.net *.split)
[00:41:37] *** Quits: coolshaurya (~coolshaur@2001:470:69fc:105::fac0) (*.net *.split)
[00:41:37] *** Quits: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631) (*.net *.split)
[00:41:37] *** Quits: Hansuke[m] (~hansukema@2001:470:69fc:105::1:86bb) (*.net *.split)
[00:41:38] *** Quits: jinsun_ (~jinsun@user/jinsun) (*.net *.split)
[00:41:38] *** Quits: W (~w@user/w) (*.net *.split)
[00:41:38] *** Quits: tom__ (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684) (*.net *.split)
[00:41:38] *** Quits: relipse (sid16131@id-16131.tinside.irccloud.com) (*.net *.split)
[00:41:38] *** Quits: isekaijin (~isekaijin@user/isekaijin) (*.net *.split)
[00:41:38] *** Quits: lieven (~mal@ns2.wyrd.be) (*.net *.split)
[00:41:38] *** Quits: oj (oj@user/oj) (*.net *.split)
[00:41:38] *** Quits: GomJabbar_ (gomjabbar@2607:f8f8:790:5::1:1) (*.net *.split)
[00:41:38] *** Quits: xihr (sid524153@id-524153.lymington.irccloud.com) (*.net *.split)
[00:41:38] *** Quits: Fleck (~fleck@user/fleck) (*.net *.split)
[00:41:38] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (*.net *.split)
[00:41:38] *** Quits: traxex (traxex@user/traxex) (*.net *.split)
[00:41:38] *** Quits: koolazer (~koo@user/koolazer) (*.net *.split)
[00:41:38] *** Quits: bollu (~bollu@159.65.151.13) (*.net *.split)
[00:41:38] *** Quits: xbatora1 (xbatora1@lounge.fi.muni.cz) (*.net *.split)
[00:41:38] *** Quits: iibewegung (~iibewegun@114.70.12.205) (*.net *.split)
[00:41:38] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (*.net *.split)
[00:41:38] *** Quits: haskal (~haskal@tilde.town) (*.net *.split)
[00:41:38] *** Quits: gothicserpent (~gothicser@2604:a880:4:1d0::176:6000) (*.net *.split)
[00:41:38] *** Quits: firewyre (~firewyre@pool-71-184-153-62.bstnma.fios.verizon.net) (*.net *.split)
[00:41:38] *** Quits: kstar (~kstar@user/kstar) (*.net *.split)
[00:41:38] *** Quits: Vesryn (~vesryn@user/vesryn) (*.net *.split)
[00:41:38] *** Quits: bleb (~cm@user/bleb) (*.net *.split)
[00:41:38] *** Quits: thumbs (1000@apache/committer/thumbs) (*.net *.split)
[00:41:38] *** Quits: xacktm (xacktm@user/xacktm) (*.net *.split)
[00:41:38] *** Quits: berndj (~berndj@ns2.linksynergy.co.za) (*.net *.split)
[00:41:38] *** Quits: pierrot (~pi@user/pierrot) (*.net *.split)
[00:41:38] *** Quits: zups (~meow@2a01:4f9:c010:6036::1) (*.net *.split)
[00:41:39] *** Quits: BillyZane2 (~BillyZane@185.202.221.34) (*.net *.split)
[00:41:39] *** Quits: xff0x (~xff0x@2001:1a81:53ac:4a00:25b:5701:e54d:ee3e) (*.net *.split)
[00:41:39] *** Quits: temp_user_2022 (~amit@2601:445:447f:a2f6:c0a2:d41c:2ddb:9e2e) (*.net *.split)
[00:41:39] *** Quits: kadoban (~kadoban@user/kadoban) (*.net *.split)
[00:41:39] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (*.net *.split)
[00:41:39] *** Quits: zibolo (~quassel@global-deiInside018.dei.polimi.it) (*.net *.split)
[00:41:39] *** Quits: kusanagi_ (~kusanagi@user/kusanagi) (*.net *.split)
[00:41:39] *** Quits: Batzy (~quassel@user/batzy) (*.net *.split)
[00:41:39] *** Quits: remedan (~remedan@octo.cafe) (*.net *.split)
[00:41:39] *** Quits: nicoty (~nicoty@user/nicoty) (*.net *.split)
[00:41:39] *** Quits: ormaaj (~ormaaj@user/ormaaj) (*.net *.split)
[00:41:39] *** Quits: begui (~begui@2600:1700:1950:5fa0:7cea:97b8:d0ce:8979) (*.net *.split)
[00:41:39] *** Quits: PollionH (~pollion@2001:bc8:47ac:2017::1) (*.net *.split)
[00:41:39] *** Quits: kristjansson (sid126207@id-126207.tinside.irccloud.com) (*.net *.split)
[00:41:39] *** Quits: shikhin (~shikhin@offtopia/offtopian) (*.net *.split)
[00:41:39] *** Quits: _0x1d3 (sid43116@id-43116.tinside.irccloud.com) (*.net *.split)
[00:41:39] *** Quits: Vermont (sid262764@wikimedia/vermont) (*.net *.split)
[00:41:39] *** Quits: Echoz (~chris@user/echoz) (*.net *.split)
[00:41:39] *** Quits: cpuid (~cpuid@user/cpuid) (*.net *.split)
[00:41:39] *** Quits: RadSurfer (~RadSurfer@user/radsurfer) (*.net *.split)
[00:41:39] *** Quits: mattroelle (~Matt_Roel@funbox.mattroelle.com) (*.net *.split)
[00:41:39] *** Quits: raekye (~raekye@creatifcubed.com) (*.net *.split)
[00:41:39] *** Quits: somiaj (~somiaj@fvwm/admin) (*.net *.split)
[00:41:39] *** Quits: jmnbtslsQE (~000@2604:880:50:5f:2f90:a3ff:f0:f8) (*.net *.split)
[00:41:39] *** Quits: amosbird (~amosbird@13.75.119.182) (*.net *.split)
[00:41:39] *** Quits: energizer (~energizer@user/energizer) (*.net *.split)
[00:41:39] *** Quits: Yamakaja (~yamakaja@user/yamakaja) (*.net *.split)
[00:41:39] *** Quits: gaken (~gaken@user/galen) (*.net *.split)
[00:41:39] *** Quits: Patater (~patater@104.248.173.85) (*.net *.split)
[00:41:40] *** Quits: Learath2 (~learath2@user/learath2) (*.net *.split)
[00:41:40] *** Quits: Ara (~Ara@user/ara) (*.net *.split)
[00:41:40] *** Quits: ksft (~k@pool-173-76-14-211.bstnma.fios.verizon.net) (*.net *.split)
[00:41:40] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (*.net *.split)
[00:41:40] *** Quits: vicfred (~vicfred@user/vicfred) (*.net *.split)
[00:41:40] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca) (*.net *.split)
[00:41:40] *** Quits: The_Blod- (~Blode@user/the-blode/x-7164444) (*.net *.split)
[00:41:40] *** Quits: off^ (~off@128-092-174-141.biz.spectrum.com) (*.net *.split)
[00:41:40] *** Quits: magla (~gelignite@55d436fa.access.ecotel.net) (*.net *.split)
[00:41:40] *** Quits: trace987 (~trace@ip5b42976d.dynamic.kabel-deutschland.de) (*.net *.split)
[00:41:40] *** Quits: Simplar (~Simplar@188.163.93.241) (*.net *.split)
[00:41:40] *** Quits: anderson (~ande@user/anderson) (*.net *.split)
[00:41:40] *** Quits: glider (~glider@user/glider) (*.net *.split)
[00:41:40] *** Quits: bluray (~bluray@user/zapdos) (*.net *.split)
[00:41:40] *** Quits: defn (~n0b0dy@user/defn) (*.net *.split)
[00:41:40] *** Quits: Fairy97 (~Fairy@ti0004a400-6144.bb.online.no) (*.net *.split)
[00:41:40] *** Quits: bliminse (~bliminse@host86-188-36-166.range86-188.btcentralplus.com) (*.net *.split)
[00:41:40] *** Quits: dTal (~quassel@dragonbox/wizzard/dtal) (*.net *.split)
[00:41:40] *** Quits: m5zs7k (aquares@web10.mydevil.net) (*.net *.split)
[00:41:40] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (*.net *.split)
[00:41:40] *** Quits: PJBoy (~PJBoy@user/pjboy) (*.net *.split)
[00:41:40] *** Quits: palasso (~palasso@user/palasso) (*.net *.split)
[00:41:40] *** Quits: darkapex (~darkapex@user/darkapex) (*.net *.split)
[00:41:40] *** Quits: jellydonut (~quassel@cBC66BF51.dhcp.as2116.net) (*.net *.split)
[00:41:40] *** Quits: Azem (~haise01@user/haise01) (*.net *.split)
[00:41:40] *** Quits: Vohveli (vohveli@user/vohveli) (*.net *.split)
[00:41:40] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (*.net *.split)
[00:41:40] *** Quits: moose (~moose@user/moose) (*.net *.split)
[00:41:40] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (*.net *.split)
[00:41:40] *** Quits: jj5 (~jj5@211-26-131-173.dyn.dodo.net.au) (*.net *.split)
[00:41:40] *** Quits: rak (~rak@debian/rak) (*.net *.split)
[00:41:40] *** Quits: Raz- (~razor@libera/sponsor/razor) (*.net *.split)
[00:41:40] *** Quits: tomaw (tom@libera/staff/tomaw) (*.net *.split)
[00:41:40] *** Quits: Jong (~Jong@163.114.132.5) (*.net *.split)
[00:41:40] *** Quits: blackfield (~blackfiel@85.255.4.218) (*.net *.split)
[00:41:40] *** Quits: Ekho (~Ekho@user/ekho) (*.net *.split)
[00:41:40] *** Quits: mncheckm (~mncheck@193.224.205.254) (*.net *.split)
[00:41:40] *** Quits: niston (~gridrun@user/niston) (*.net *.split)
[00:41:40] *** Quits: molt (~molt@178-222-245-206.static.isp.telekom.rs) (*.net *.split)
[00:41:40] *** Quits: Me-me (~me-me@user/me-me) (*.net *.split)
[00:41:40] *** Quits: CalimeroTeknik (~calimero@user/calimeroteknik) (*.net *.split)
[00:41:40] *** Quits: sheepduck_ (~sheepduck@user/sheepduck) (*.net *.split)
[00:41:40] *** Quits: AimHere (~David@92.238.16.159) (*.net *.split)
[00:41:40] *** Quits: dka (~code-is-a@ns3059207.ip-193-70-33.eu) (*.net *.split)
[00:41:40] *** Quits: ski (~ski@remote12.chalmers.se) (*.net *.split)
[00:41:40] *** Quits: taeaad (~taeaad@user/taeaad) (*.net *.split)
[00:41:40] *** Quits: njd (~njd@159.65.3.79) (*.net *.split)
[00:41:40] *** Quits: caramel (~caramel@user/caramel) (*.net *.split)
[00:41:40] *** Quits: DrMax_ (~DrMax@132.215.96.30) (*.net *.split)
[00:41:40] *** Quits: tsandstr (~user@nat-130-132-173-4.central.yale.edu) (*.net *.split)
[00:41:40] *** Quits: dextaa (~DV@user/dextaa) (*.net *.split)
[00:41:40] *** Quits: moon-child (~moon-chil@cardinal.elronnd.net) (*.net *.split)
[00:41:40] *** Quits: enthdegree (~user@167.172.147.125) (*.net *.split)
[00:41:40] *** Quits: marcel (~marcel@user/marcel) (*.net *.split)
[00:41:40] *** Quits: b3z (~b3z@user/b3z) (*.net *.split)
[00:41:40] *** Quits: sander (~sander@user/sander) (*.net *.split)
[00:41:40] *** Quits: tkr (tkr@pi.ip.fi) (*.net *.split)
[00:41:40] *** Quits: dante443 (~dante443@99-88-166-99.lightspeed.milwwi.sbcglobal.net) (*.net *.split)
[00:41:40] *** Quits: CloudEvil (~quassel@133.129.239.35.bc.googleusercontent.com) (*.net *.split)
[00:41:40] *** Quits: mniip (mniip@libera/staff/mniip) (*.net *.split)
[00:41:40] *** Quits: cluelessperson (~cluelessp@user/cluelessperson) (*.net *.split)
[00:41:40] *** Quits: alip (~alip@exherbo/developer/alip) (*.net *.split)
[00:41:40] *** Quits: Pajus (~Pajus@user/pajus) (*.net *.split)
[00:41:40] *** Quits: DaPinkOne (~Dap@user/dap) (*.net *.split)
[00:41:40] *** Quits: noam (~noam@104.232.42.247) (*.net *.split)
[00:41:40] *** Quits: woky (~woky@li1651-31.members.linode.com) (*.net *.split)
[00:41:40] *** Quits: Teacup (~teacup@user/teacup) (*.net *.split)
[00:41:40] *** Quits: madnight_ (~madnight@static.59.103.201.195.clients.your-server.de) (*.net *.split)
[00:41:40] *** Quits: markasoftware (~quassel@107.161.26.124) (*.net *.split)
[00:41:40] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (*.net *.split)
[00:41:41] *** Quits: Oli (~Unknown@user/oli) (*.net *.split)
[00:41:41] *** Quits: XV8 (~XV8@2601:5cb:c001:50:b02a:1289:ddb1:fbc8) (*.net *.split)
[00:41:41] *** Quits: eldritch_ (~eldritch@user/eldritch/x-9272577) (*.net *.split)
[00:41:41] *** Quits: dld (~davidlowr@2601:197:600:1210:942a:4683:ce04:8328) (*.net *.split)
[00:41:41] *** Quits: bpmedley (~bpmedley@2600:1700:e2c:8410:a87b:a586:9470:a9e3) (*.net *.split)
[00:41:41] *** Quits: berber3 (~berber@v2202101107577140883.nicesrv.de) (*.net *.split)
[00:41:41] *** Quits: xiaguan (~parsley@2604:180:f1::173) (*.net *.split)
[00:41:41] *** Quits: lupin592[m] (~lupin592m@2001:470:69fc:105::1:6718) (*.net *.split)
[00:41:41] *** Quits: smitop[m] (~smitopkde@2001:470:69fc:105::1:117) (*.net *.split)
[00:41:41] *** Quits: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407) (*.net *.split)
[00:41:41] *** Quits: etolier (~somewhere@122-199-44-127.ip4.superloop.com) (*.net *.split)
[00:41:41] *** Quits: tct (~tct@user/tct) (*.net *.split)
[00:41:41] *** Quits: ua__ (~ua@public-gprs226401.centertel.pl) (*.net *.split)
[00:41:41] *** Quits: acegallagher (~Ace@174-16-184-112.hlrn.qwest.net) (*.net *.split)
[00:41:41] *** Quits: thiccdaddy (~o_O@user/thiccdaddy) (*.net *.split)
[00:41:41] *** Quits: hsv (~unknown@user/hsv) (*.net *.split)
[00:41:41] *** Quits: dzz007 (~dzz007@user/dzz007) (*.net *.split)
[00:41:41] *** Quits: PlanckWalk (~Planck@user/planckwalk) (*.net *.split)
[00:41:41] *** Quits: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3) (*.net *.split)
[00:41:41] *** Quits: placeb0 (uid283215@id-283215.lymington.irccloud.com) (*.net *.split)
[00:41:41] *** Quits: s1b1 (~s1b1@user/s1b1) (*.net *.split)
[00:41:41] *** Quits: Jmtrix (~qed@user/jmtrix) (*.net *.split)
[00:41:41] *** Quits: cacheyourdreams (~cache@user/cacheyourdreams) (*.net *.split)
[00:41:41] *** Quits: Capso (~Capso@wopr.sciops.net) (*.net *.split)
[00:41:41] *** Quits: krator44 (~krator44@user/krator44) (*.net *.split)
[00:41:41] *** Quits: spynxic (~spynxic@spynxic.powered.by.lunarbnc.net) (*.net *.split)
[00:41:41] *** Quits: lockywolf (~lockywolf@public.lockywolf.net) (*.net *.split)
[00:41:41] *** Quits: _sol_ (sid282649@id-282649.hampstead.irccloud.com) (*.net *.split)
[00:41:42] *** Quits: echoline (sid144196@id-144196.helmsley.irccloud.com) (*.net *.split)
[00:41:42] *** Quits: mrus (~mrus@2001:19f0:5:1535:5400:3ff:fe7d:10ae) (*.net *.split)
[00:41:42] *** Quits: cosine (~cosine@vpn.mashio.net) (*.net *.split)
[00:41:42] *** Quits: kaizen_ (sid60510@id-60510.tinside.irccloud.com) (*.net *.split)
[00:41:42] *** Quits: fructose (~fructose@user/fructose) (*.net *.split)
[00:41:42] *** Quits: tolarz (bfa39a78db@ircbox.informatik.uni-erlangen.de) (*.net *.split)
[00:41:42] *** Quits: thebes_ (~thebes@userwer.net) (*.net *.split)
[00:41:42] *** Quits: fds (franki@triton.blinkenshell.org) (*.net *.split)
[00:41:42] *** Quits: Franciman (~Franciman@mx1.fracta.dev) (*.net *.split)
[00:41:42] *** Quits: Maturion (~Maturion@p200300ede70deb00e34c133d0d5a0012.dip0.t-ipconnect.de) (*.net *.split)
[00:41:42] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (*.net *.split)
[00:41:42] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (*.net *.split)
[00:41:42] *** Quits: xelxebar (~xelxebar@aj175037.dynamic.ppp.asahi-net.or.jp) (*.net *.split)
[00:41:42] *** Quits: Ennea (~Ennea@user/ennea) (*.net *.split)
[00:41:42] *** Quits: KotH (~attila@erica.kinali.ch) (*.net *.split)
[00:41:42] *** Quits: ayjay_t (~ajp@ajpikul.com) (*.net *.split)
[00:41:42] *** Quits: nortoh (~nortoh@user/nortoh) (*.net *.split)
[00:41:42] *** Quits: sybariten (~jake@157.90.217.120) (*.net *.split)
[00:41:42] *** Quits: mycroftiv (~glen@207.148.14.54) (*.net *.split)
[00:41:42] *** Quits: Henry151 (~bishop@user/henry151) (*.net *.split)
[00:41:42] *** Quits: paperManu_ (~paperManu@138.197.128.151) (*.net *.split)
[00:41:42] *** Quits: Dragoon (~Dragoon@user/dragoon) (*.net *.split)
[00:41:42] *** Quits: simoneb_ (~simone@static.39.20.203.116.clients.your-server.de) (*.net *.split)
[00:41:42] *** Quits: sqrt2_ (~ben@80-108-18-7.cable.dynamic.surfer.at) (*.net *.split)
[00:41:42] *** Quits: petaflot (~root@lutolf.vserver.nimag.net) (*.net *.split)
[00:41:42] *** Quits: vancz (~vancz@user/vancz) (*.net *.split)
[00:41:42] *** Quits: _________ (~nobody@user/noodly) (*.net *.split)
[00:41:42] *** Quits: foxtrot (~foxtrot@user/foxtrot) (*.net *.split)
[00:41:42] *** Quits: kolexar (~kolexar@user/kolexar) (*.net *.split)
[00:41:42] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (*.net *.split)
[00:41:42] *** Quits: BitPuffin (~bitpuffin@2001:470:69fc:105::c9c5) (*.net *.split)
[00:41:42] *** Quits: atx (~atx@2001:470:69fc:105::923) (*.net *.split)
[00:41:42] *** Quits: aplund (~aplundmat@2001:470:69fc:105::4146) (*.net *.split)
[00:41:42] *** Quits: DerlgM (~lucifargu@2001:470:69fc:105::2faa) (*.net *.split)
[00:41:43] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (*.net *.split)
[00:41:43] *** Quits: ecs (~ecs@user/ecs) (*.net *.split)
[00:41:43] *** Quits: SrPx (sid108780@id-108780.uxbridge.irccloud.com) (*.net *.split)
[00:41:43] *** Quits: br1ck (~br1ck@150.140.193.82) (*.net *.split)
[00:41:43] *** Quits: cebor (~cebor@user/cebor) (*.net *.split)
[00:41:43] *** Quits: kamil (~kxkamil@134.191.220.83) (*.net *.split)
[00:41:43] *** Quits: twrk (~user@user/twrk) (*.net *.split)
[00:41:43] *** Quits: kadobanana (~mud@user/kadoban) (*.net *.split)
[00:41:43] *** Quits: zwisch (~zwisch@135-23-67-207.cpe.pppoe.ca) (*.net *.split)
[00:41:43] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (*.net *.split)
[00:41:43] *** Quits: V (~v@anomalous.eu) (*.net *.split)
[00:41:43] *** Quits: ninjabanjo (~ninjabanj@107.150.45.163) (*.net *.split)
[00:41:43] *** Quits: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net) (*.net *.split)
[00:41:43] *** Quits: HisShadow (~HisShadow@user/hisshadow) (*.net *.split)
[00:41:43] *** Quits: jinsun__ (~quassel@user/jinsun) (*.net *.split)
[00:41:43] *** Quits: coolchris (sid536654@id-536654.lymington.irccloud.com) (*.net *.split)
[00:41:43] *** Quits: vaporatorius (~vaporator@user/vaporatorius) (*.net *.split)
[00:41:43] *** Quits: confuzeus (~h_m@186-149-117-154.bitcointernet.co.za) (*.net *.split)
[00:41:43] *** Quits: Pent (sid313808@id-313808.lymington.irccloud.com) (*.net *.split)
[00:41:43] *** Quits: joel135 (sid136450@id-136450.hampstead.irccloud.com) (*.net *.split)
[00:41:43] *** Quits: akrv (sid245241@id-245241.hampstead.irccloud.com) (*.net *.split)
[00:41:43] *** Quits: cln (sid336875@id-336875.ilkley.irccloud.com) (*.net *.split)
[00:41:43] *** Quits: tk (~tk@ircpuzzles/staff/tk) (*.net *.split)
[00:41:43] *** Quits: user282069 (~user@li1512-248.members.linode.com) (*.net *.split)
[00:41:43] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (*.net *.split)
[00:41:43] *** Quits: Donitz (~Donitz@88-115-149-215.elisa-laajakaista.fi) (*.net *.split)
[00:41:43] *** Quits: gdd (~gdd@129.199.146.230) (*.net *.split)
[00:41:43] *** Quits: fstd_ (~fstd@xdsl-89-1-56-234.nc.de) (*.net *.split)
[00:41:43] *** Quits: chir4gm (~chirag@user/chir4gm) (*.net *.split)
[00:41:43] *** Quits: brettgilio (~brettgili@x-node.gq) (*.net *.split)
[00:41:43] *** Quits: sword_smith (sword_smit@bitcoinfundamentals.org) (*.net *.split)
[00:41:43] *** Quits: vgtw (~vgtw@user/vgtw) (*.net *.split)
[00:41:43] *** Quits: nisstyre (~wes@user/nisstyre) (*.net *.split)
[00:41:43] *** Quits: stux|away (~stux@82.192.81.143) (*.net *.split)
[00:41:43] *** Quits: FlannelKing (~flannel@cpe-76-175-193-181.socal.res.rr.com) (*.net *.split)
[00:41:43] *** Quits: extor (~xtor@192.99.217.240) (*.net *.split)
[00:41:43] *** Quits: CuriousErnestBro (~CuriousEr@user/curiousernestbro) (*.net *.split)
[00:41:43] *** Quits: mnhrdt (~Enric@fsf/member/mnhrdt) (*.net *.split)
[00:41:43] *** Quits: mjacob (~mjacob@adrastea.uberspace.de) (*.net *.split)
[00:41:43] *** Quits: Moyst_ (~moyst@user/moyst) (*.net *.split)
[00:41:43] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[00:41:43] *** Quits: jcay (~jcay@vps3435.vpsunit.com) (*.net *.split)
[00:41:43] *** Quits: johnkeats7 (~johnkeats@2804:14c:32:a0cc:c1ad:5567:c947:cef7) (*.net *.split)
[00:41:43] *** Quits: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de) (*.net *.split)
[00:41:43] *** Quits: pax_os__ (uid535114@ilkley.irccloud.com) (*.net *.split)
[00:41:43] *** Quits: rex (~rex@2a02:8071:22c9:d320:3285:a9ff:fe3a:67fa) (*.net *.split)
[00:41:43] *** Quits: LucaTM (~LucaTM@user/lucatm) (*.net *.split)
[00:41:43] *** Quits: notzmv (~zmv@user/notzmv) (*.net *.split)
[00:41:43] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (*.net *.split)
[00:41:43] *** Quits: jpaa (~jpaa@161.97.129.36) (*.net *.split)
[00:41:43] *** Quits: duude__ (~duude__@user/duude/x-4676560) (*.net *.split)
[00:41:44] *** Quits: Tisoxin (~ikosit@user/ikosit) (*.net *.split)
[00:41:44] *** Quits: davidk156305 (~davidk156@2001:470:69fc:105::1:484e) (*.net *.split)
[00:41:44] *** Quits: sn_fk_n (~snufkin@2.221.192.124) (*.net *.split)
[00:41:44] *** Quits: synthmeat (~synthmeat@user/synthmeat) (*.net *.split)
[00:41:44] *** Quits: Fusl (fusl@1.0.0.127.in-addr.arpa.li) (*.net *.split)
[00:41:44] *** Quits: xaltsc (~xaltsc@user/xaltsc) (*.net *.split)
[00:41:44] *** Quits: rooferdave (~rooferdav@rrcs-24-97-76-202.nys.biz.rr.com) (*.net *.split)
[00:41:44] *** Quits: YellowSuB (~YellowSuB@user/yellowsub) (*.net *.split)
[00:41:44] *** Quits: orcus (~orcus@user/brprice) (*.net *.split)
[00:41:44] *** Quits: dispater (~dispater@user/brprice) (*.net *.split)
[00:41:44] *** Quits: anzu (~anzu@melkki.cs.helsinki.fi) (*.net *.split)
[00:41:44] *** Quits: xeno (~xeno@user/xeno) (*.net *.split)
[00:41:44] *** Quits: gthm (~gthm@134.122.53.95) (*.net *.split)
[00:41:44] *** Quits: gdarko (~me@dg.mk) (*.net *.split)
[00:41:44] *** Quits: egy (egy@tilde.team) (*.net *.split)
[00:41:44] *** Quits: SanchayanMaity (sid478177@id-478177.hampstead.irccloud.com) (*.net *.split)
[00:41:44] *** Quits: nkaretnikov (sid190676@id-190676.tinside.irccloud.com) (*.net *.split)
[00:41:44] *** Quits: pikhq (sid394595@user/pikhq) (*.net *.split)
[00:41:44] *** Quits: deego (~user@69.90.132.173) (*.net *.split)
[00:41:44] *** Quits: gshumway (~gshumway@user/gshumway) (*.net *.split)
[00:41:44] *** Quits: sujeet (sujeet@freeboson.org) (*.net *.split)
[00:41:44] *** Quits: strudl (~strudl@user/strudl) (*.net *.split)
[00:41:44] *** Quits: madprops (hj8oijo@user/madprops) (*.net *.split)
[00:41:44] *** Quits: parazyd (~parazyd@devuan/developer/parazyd) (*.net *.split)
[00:41:44] *** Quits: cuppajoeman (sid521943@id-521943.hampstead.irccloud.com) (*.net *.split)
[00:41:44] *** Quits: con3 (~con3@143.198.53.32) (*.net *.split)
[00:41:44] *** Quits: shachaf (~shachaf@user/shachaf) (*.net *.split)
[00:41:44] *** Quits: Boniche (~Boniche@ivysaur.umbreon.net) (*.net *.split)
[00:41:44] *** Quits: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca) (*.net *.split)
[00:41:44] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (*.net *.split)
[00:41:44] *** Quits: tomboy64 (~tomboy64@user/tomboy64) (*.net *.split)
[00:41:44] *** Quits: lilgopher (~textual@2601:241:8000:38f0:9c23:cd6f:d63b:6080) (*.net *.split)
[00:41:44] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-801c-a6a4-997f-0730.res6.spectrum.com) (*.net *.split)
[00:41:44] *** Quits: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63) (*.net *.split)
[00:41:44] *** Quits: ac (~aloiscoch@2001:470:69fc:105::65) (*.net *.split)
[00:41:44] *** Quits: niedzejkob[m] (~niedzejko@2001:470:69fc:105::1:1c02) (*.net *.split)
[00:41:44] *** Quits: BrownJenkin (~falconsti@2001:470:69fc:105::36d) (*.net *.split)
[00:41:45] *** Quits: evidlo (~evidlo@2001:470:69fc:105::7fc) (*.net *.split)
[00:41:45] *** Quits: dotz0cat[m] (~dotz0catm@2001:470:69fc:105::91b) (*.net *.split)
[00:41:45] *** Quits: Nic0[m] (~nic0nic0n@2001:470:69fc:105::1:8497) (*.net *.split)
[00:41:45] *** Quits: BinarySavior (~BinarySav@idlerpg/player/BinarySavior) (*.net *.split)
[00:41:45] *** Quits: LuKaRo (~LuKaRo@p4fc3264a.dip0.t-ipconnect.de) (*.net *.split)
[00:41:45] *** Quits: nf (~n@monade.li) (*.net *.split)
[00:41:45] *** Quits: kronicma1 (user73386@neotame.csclub.uwaterloo.ca) (*.net *.split)
[00:41:45] *** Quits: derelict (~derelict@user/derelict) (*.net *.split)
[00:41:45] *** Quits: Henry_The_Longsh (~Henry@46.101.4.181) (*.net *.split)
[00:41:45] *** Quits: andi_ (~andi@user/andi/x-3467420) (*.net *.split)
[00:41:45] *** Quits: dalcde (dec41@pip.srcf.societies.cam.ac.uk) (*.net *.split)
[00:41:45] *** Quits: micronnn (~micronn@user/micronn) (*.net *.split)
[00:41:45] *** Quits: prime (~prime@user/prime) (*.net *.split)
[00:41:45] *** Quits: kfv (~kfv@mail.kfv.io) (*.net *.split)
[00:41:45] *** Quits: nrr___ (sid20938@id-20938.lymington.irccloud.com) (*.net *.split)
[00:41:45] *** Quits: crackerjack (~crackerja@pear.bnc4free.com) (*.net *.split)
[00:41:45] *** Quits: pounce (~pounce@facebook/engineering/pounce) (*.net *.split)
[00:41:45] *** Quits: BytesAndCoffee (~libera@bytes.coffee) (*.net *.split)
[00:41:45] *** Quits: ross (sid305269@user/ross) (*.net *.split)
[00:41:45] *** Quits: merpnderp (sid16744@id-16744.hampstead.irccloud.com) (*.net *.split)
[00:41:45] *** Quits: jakesyl__ (sid56879@id-56879.hampstead.irccloud.com) (*.net *.split)
[00:41:45] *** Quits: cawfee_ (~root@2406:3003:2077:2758::babe) (*.net *.split)
[00:41:45] *** Quits: PotatoGim (sid99505@id-99505.lymington.irccloud.com) (*.net *.split)
[00:41:45] *** Quits: Bowserinator (Bowserinat@hellomouse/dev/bowserinator) (*.net *.split)
[00:41:45] *** Quits: jimbzy (~gem@user/jimbzy) (*.net *.split)
[00:41:45] *** Quits: Firedancer (sid336191@id-336191.hampstead.irccloud.com) (*.net *.split)
[00:41:45] *** Quits: astra (sid289983@user/amish) (*.net *.split)
[00:41:45] *** Quits: LarchOye (nonmoose@spaceweed.spacetechnology.net) (*.net *.split)
[00:41:45] *** Quits: megamus_prime (~megamus_p@46.101.47.16) (*.net *.split)
[00:41:45] *** Quits: SoF (~skius@user/skius) (*.net *.split)
[00:41:45] *** Quits: SJrX (~sjr@S0106302303dfb018.vf.shawcable.net) (*.net *.split)
[00:41:45] *** Quits: overra (sid16036@id-16036.lymington.irccloud.com) (*.net *.split)
[00:41:45] *** Quits: sunny93 (~sunny93@wireguard/tunneler/sunny93) (*.net *.split)
[00:41:45] *** Quits: RockyTV (~alex@user/xinayder) (*.net *.split)
[00:41:45] *** Quits: itok (sid418430@id-418430.ilkley.irccloud.com) (*.net *.split)
[00:41:45] *** Quits: ScRamble (~S@na.altplay.net) (*.net *.split)
[00:41:45] *** Quits: greenbagels (~gb@user/greenbagels) (*.net *.split)
[00:41:45] *** Quits: haritz (~hrtz@user/haritz) (*.net *.split)
[00:41:45] *** Quits: mra90 (~Martin@134.191.221.84) (*.net *.split)
[00:41:45] *** Quits: jole (~jole@2a05:f480:2000:1624:5400:3ff:fe9c:b8a8) (*.net *.split)
[00:41:45] *** Quits: zalt (~zalt@user/zalt) (*.net *.split)
[00:41:45] *** Quits: Oxyd (~oxyd@user/oxyd) (*.net *.split)
[00:41:46] *** Quits: enyc (~enyc@user/enyc) (*.net *.split)
[00:41:46] *** Quits: _tjr_ (~tjr@233.ip-144-217-92.net) (*.net *.split)
[00:41:46] *** Quits: leah2 (~leah@vuxu.org) (*.net *.split)
[00:44:13] *** Joins: flynn (~mcbloch@user/flynn)
[00:44:13] *** Joins: yawkat (~yawkat@cats.coffee)
[00:44:13] *** Joins: carter (sid14827@helmsley.irccloud.com)
[00:44:13] *** Joins: sek (~sek@user/sek)
[00:44:13] *** Joins: drdo (~drdo@roach0.drdo.eu)
[00:44:13] *** Joins: DefiantN (~DefiantN@user/defiantn)
[00:44:13] *** Joins: voiceofreason (~voiceofre@207.148.10.181)
[00:44:13] *** Joins: juri_ (~juri@178.63.35.222)
[00:44:13] *** Joins: grindhold (~quassel@mail.skarphed.org)
[00:44:13] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[00:44:13] *** Joins: nejimban (~ben@user/nejimban)
[00:44:13] *** Joins: AviKav (~AviKav@pool-71-191-176-243.washdc.fios.verizon.net)
[00:44:13] *** Joins: jkovac1 (~jkovac1@user/jkovac1)
[00:44:13] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[00:44:13] *** Joins: llorllale (~llorllale@198.98.119.85)
[00:44:13] *** Joins: webstran- (~webstrand@user/webstrand)
[00:44:13] *** Joins: Zairex (~Teekoo@178.62.135.229)
[00:44:13] *** Joins: Z-module (~user@aero-astro-estates.mit.edu)
[00:44:13] *** Joins: Bobathan (~admin@cpe-65-29-248-157.wi.res.rr.com)
[00:44:13] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[00:44:13] *** Joins: bgs (~bgs@cpe-212-85-160-171.cable.telemach.net)
[00:44:13] *** Joins: justGhost (~justache@user/justache)
[00:44:13] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[00:44:13] *** Joins: dskull (~dskull@user/dskull)
[00:44:13] *** Joins: Pollion (~bombar@crans/pollion)
[00:44:13] *** Joins: wz1000 (~zubin@static.11.113.47.78.clients.your-server.de)
[00:44:13] *** Joins: Dotz0cat (~Dotz0cat@h55.84.187.173.dynamic.ip.windstream.net)
[00:44:13] *** Joins: Nitrousoxide (~msdos@user/nitrousoxide)
[00:44:13] *** Joins: davros (~davros@host86-185-61-1.range86-185.btcentralplus.com)
[00:44:13] *** Joins: swistak (~swistak@185.21.216.141)
[00:44:13] *** Joins: alphamul2 (~nibbles@205.185.116.30)
[00:44:13] *** Joins: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net)
[00:44:13] *** Joins: mawk (~mawk@wireguard/contributor/mawk)
[00:44:13] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[00:44:13] *** Joins: Duckle (~Duckle@user/duckle)
[00:44:13] *** Joins: towel (~towel@user/towel)
[00:44:13] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[00:44:13] *** Joins: Hafydd (~Hafydd@user/hafydd)
[00:44:13] *** Joins: rtsn (~nstr@user/rtsn)
[00:44:13] *** Joins: FragmentedCurve (~FC@pool-100-2-232-17.nycmny.fios.verizon.net)
[00:44:13] *** Joins: APic (~apic@apic.name)
[00:44:13] *** Joins: biberao (~Unknown@user/biberao)
[00:44:13] *** Joins: hyiltiz (~quassel@31.220.5.250)
[00:44:13] *** Joins: `join_subline (~join_subl@135-23-248-130.cpe.pppoe.ca)
[00:44:13] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[00:44:13] *** Joins: X-Scale (~ARM@218.92.108.93.rev.vodafone.pt)
[00:44:13] *** Joins: Oni^ (oni@kapsi.fi)
[00:44:13] *** Joins: Trashlord (~trash@user/trashlord)
[00:44:13] *** Joins: xkuru (~xkuru@user/xkuru)
[00:44:13] *** Joins: Klinda (~superleag@user/klinda)
[00:44:13] *** Joins: nickel8448 (~rahulwadh@147.80.76.34.bc.googleusercontent.com)
[00:44:13] *** Joins: NEYi (~NEYi@109.251.216.38)
[00:44:13] *** Joins: millido (~millido@84.210.150.128)
[00:44:13] *** Joins: resistfascism (~jthancoc@c-73-179-2-115.hsd1.fl.comcast.net)
[00:44:13] *** Joins: seninha (~seninha@user/seninha)
[00:44:13] *** Joins: macaw (~macaw@87-205-47-92.adsl.inetia.pl)
[00:44:13] *** Joins: Sheilong (uid293653@ilkley.irccloud.com)
[00:44:13] *** Joins: redlegion (sid429547@ilkley.irccloud.com)
[00:44:13] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[00:44:13] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[00:44:13] *** Joins: nullcone (uid11626@helmsley.irccloud.com)
[00:44:13] *** Joins: orthoplex64 (~crm@70.120.0.94)
[00:44:13] *** Joins: a0z1 (~a0z1@cpc158779-hari22-2-0-cust168.20-2.cable.virginm.net)
[00:44:13] *** Joins: cheater (~Username@user/cheater)
[00:44:13] *** Joins: SGautam (uid286066@ilkley.irccloud.com)
[00:44:13] *** Joins: qeed (~qeed@072-190-106-143.res.spectrum.com)
[00:44:13] *** Joins: qbt (~qbt@user/edun)
[00:44:13] *** Joins: econo (uid147250@user/econo)
[00:44:13] *** Joins: Trigo (~NeedMathH@64.201.115.44)
[00:44:13] *** Joins: michele (~eraser@user/michele)
[00:44:13] *** Joins: kurfen_ (~kurfen@213.152.188.7)
[00:44:13] *** Joins: whatsupdoc (uid509081@hampstead.irccloud.com)
[00:44:13] *** Joins: specing (~specing@user/specing)
[00:44:13] *** Joins: ffs (uid158779@ilkley.irccloud.com)
[00:44:13] *** Joins: pierrot (~pi@user/pierrot)
[00:44:13] *** Joins: berndj (~berndj@ns2.linksynergy.co.za)
[00:44:13] *** Joins: xacktm (xacktm@user/xacktm)
[00:44:13] *** Joins: bleb (~cm@user/bleb)
[00:44:13] *** Joins: Vesryn (~vesryn@user/vesryn)
[00:44:13] *** Joins: kstar (~kstar@user/kstar)
[00:44:13] *** Joins: firewyre (~firewyre@pool-71-184-153-62.bstnma.fios.verizon.net)
[00:44:13] *** Joins: gothicserpent (~gothicser@2604:a880:4:1d0::176:6000)
[00:44:13] *** Joins: haskal (~haskal@tilde.town)
[00:44:13] *** Joins: thumbs (1000@apache/committer/thumbs)
[00:44:13] *** Joins: zups (~meow@2a01:4f9:c010:6036::1)
[00:44:13] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[00:44:13] *** Joins: iibewegung (~iibewegun@114.70.12.205)
[00:44:13] *** Joins: xbatora1 (xbatora1@lounge.fi.muni.cz)
[00:44:13] *** Joins: bollu (~bollu@159.65.151.13)
[00:44:13] *** Joins: koolazer (~koo@user/koolazer)
[00:44:13] *** Joins: traxex (traxex@user/traxex)
[00:44:13] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[00:44:13] *** Joins: Fleck (~fleck@user/fleck)
[00:44:13] *** Joins: xihr (sid524153@id-524153.lymington.irccloud.com)
[00:44:13] *** Joins: GomJabbar_ (gomjabbar@2607:f8f8:790:5::1:1)
[00:44:13] *** Joins: lieven (~mal@ns2.wyrd.be)
[00:44:13] *** Joins: isekaijin (~isekaijin@user/isekaijin)
[00:44:13] *** Joins: relipse (sid16131@id-16131.tinside.irccloud.com)
[00:44:13] *** Joins: tom__ (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684)
[00:44:13] *** Joins: W (~w@user/w)
[00:44:13] *** Joins: Hansuke[m] (~hansukema@2001:470:69fc:105::1:86bb)
[00:44:13] *** Joins: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631)
[00:44:13] *** Joins: coolshaurya (~coolshaur@2001:470:69fc:105::fac0)
[00:44:13] *** Joins: bowlofeggs (~bowlofegg@fedora/bowlofeggs)
[00:44:13] *** Joins: therufuser (~therufuse@p5b02e22b.dip0.t-ipconnect.de)
[00:44:13] *** Joins: leah2 (~leah@vuxu.org)
[00:44:13] *** Joins: _tjr_ (~tjr@233.ip-144-217-92.net)
[00:44:13] *** Joins: enyc (~enyc@user/enyc)
[00:44:13] *** Joins: Oxyd (~oxyd@user/oxyd)
[00:44:13] *** Joins: jole (~jole@2a05:f480:2000:1624:5400:3ff:fe9c:b8a8)
[00:44:13] *** Joins: mra90 (~Martin@134.191.221.84)
[00:44:13] *** Joins: haritz (~hrtz@user/haritz)
[00:44:13] *** Joins: greenbagels (~gb@user/greenbagels)
[00:44:13] *** Joins: ScRamble (~S@na.altplay.net)
[00:44:13] *** Joins: itok (sid418430@id-418430.ilkley.irccloud.com)
[00:44:13] *** Joins: RockyTV (~alex@user/xinayder)
[00:44:13] *** Joins: sunny93 (~sunny93@wireguard/tunneler/sunny93)
[00:44:13] *** Joins: overra (sid16036@id-16036.lymington.irccloud.com)
[00:44:13] *** Joins: SJrX (~sjr@S0106302303dfb018.vf.shawcable.net)
[00:44:13] *** Joins: SoF (~skius@user/skius)
[00:44:13] *** Joins: megamus_prime (~megamus_p@46.101.47.16)
[00:44:13] *** Joins: LarchOye (nonmoose@spaceweed.spacetechnology.net)
[00:44:13] *** Joins: astra (sid289983@user/amish)
[00:44:13] *** Joins: Firedancer (sid336191@id-336191.hampstead.irccloud.com)
[00:44:13] *** Joins: jimbzy (~gem@user/jimbzy)
[00:44:13] *** Joins: Bowserinator (Bowserinat@hellomouse/dev/bowserinator)
[00:44:13] *** Joins: cawfee_ (~root@2406:3003:2077:2758::babe)
[00:44:13] *** Joins: merpnderp (sid16744@id-16744.hampstead.irccloud.com)
[00:44:13] *** Joins: pounce (~pounce@facebook/engineering/pounce)
[00:44:13] *** Joins: BytesAndCoffee (~libera@bytes.coffee)
[00:44:13] *** Joins: PotatoGim (sid99505@id-99505.lymington.irccloud.com)
[00:44:13] *** Joins: crackerjack (~crackerja@pear.bnc4free.com)
[00:44:13] *** Joins: jakesyl__ (sid56879@id-56879.hampstead.irccloud.com)
[00:44:13] *** Joins: kfv (~kfv@mail.kfv.io)
[00:44:13] *** Joins: nrr___ (sid20938@id-20938.lymington.irccloud.com)
[00:44:13] *** Joins: prime (~prime@user/prime)
[00:44:13] *** Joins: micronnn (~micronn@user/micronn)
[00:44:13] *** Joins: dalcde (dec41@pip.srcf.societies.cam.ac.uk)
[00:44:13] *** Joins: andi_ (~andi@user/andi/x-3467420)
[00:44:13] *** Joins: Henry_The_Longsh (~Henry@46.101.4.181)
[00:44:13] *** Joins: derelict (~derelict@user/derelict)
[00:44:13] *** Joins: zalt (~zalt@user/zalt)
[00:44:13] *** Joins: kronicma1 (user73386@neotame.csclub.uwaterloo.ca)
[00:44:13] *** Joins: nf (~n@monade.li)
[00:44:13] *** Joins: ross (sid305269@user/ross)
[00:44:13] *** Joins: LuKaRo (~LuKaRo@p4fc3264a.dip0.t-ipconnect.de)
[00:44:13] *** Joins: BinarySavior (~BinarySav@idlerpg/player/BinarySavior)
[00:44:13] *** Joins: Nic0[m] (~nic0nic0n@2001:470:69fc:105::1:8497)
[00:44:13] *** Joins: dotz0cat[m] (~dotz0catm@2001:470:69fc:105::91b)
[00:44:13] *** Joins: evidlo (~evidlo@2001:470:69fc:105::7fc)
[00:44:13] *** Joins: niedzejkob[m] (~niedzejko@2001:470:69fc:105::1:1c02)
[00:44:13] *** Joins: BrownJenkin (~falconsti@2001:470:69fc:105::36d)
[00:44:13] *** Joins: ac (~aloiscoch@2001:470:69fc:105::65)
[00:44:13] *** Joins: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63)
[00:44:13] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-801c-a6a4-997f-0730.res6.spectrum.com)
[00:44:13] *** Joins: lilgopher (~textual@2601:241:8000:38f0:9c23:cd6f:d63b:6080)
[00:44:13] *** Joins: tomboy64 (~tomboy64@user/tomboy64)
[00:44:13] *** Joins: fds (franki@triton.blinkenshell.org)
[00:44:13] *** Joins: thebes_ (~thebes@userwer.net)
[00:44:13] *** Joins: tolarz (bfa39a78db@ircbox.informatik.uni-erlangen.de)
[00:44:13] *** Joins: fructose (~fructose@user/fructose)
[00:44:13] *** Joins: cosine (~cosine@vpn.mashio.net)
[00:44:13] *** Joins: mrus (~mrus@2001:19f0:5:1535:5400:3ff:fe7d:10ae)
[00:44:13] *** Joins: echoline (sid144196@id-144196.helmsley.irccloud.com)
[00:44:13] *** Joins: _sol_ (sid282649@id-282649.hampstead.irccloud.com)
[00:44:13] *** Joins: lockywolf (~lockywolf@public.lockywolf.net)
[00:44:13] *** Joins: spynxic (~spynxic@spynxic.powered.by.lunarbnc.net)
[00:44:13] *** Joins: krator44 (~krator44@user/krator44)
[00:44:13] *** Joins: Capso (~Capso@wopr.sciops.net)
[00:44:13] *** Joins: cacheyourdreams (~cache@user/cacheyourdreams)
[00:44:13] *** Joins: Jmtrix (~qed@user/jmtrix)
[00:44:13] *** Joins: s1b1 (~s1b1@user/s1b1)
[00:44:13] *** Joins: placeb0 (uid283215@id-283215.lymington.irccloud.com)
[00:44:13] *** Joins: kaizen_ (sid60510@id-60510.tinside.irccloud.com)
[00:44:13] *** Joins: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3)
[00:44:13] *** Joins: PlanckWalk (~Planck@user/planckwalk)
[00:44:13] *** Joins: dzz007 (~dzz007@user/dzz007)
[00:44:13] *** Joins: hsv (~unknown@user/hsv)
[00:44:13] *** Joins: thiccdaddy (~o_O@user/thiccdaddy)
[00:44:13] *** Joins: acegallagher (~Ace@174-16-184-112.hlrn.qwest.net)
[00:44:13] *** Joins: Franciman (~Franciman@mx1.fracta.dev)
[00:44:13] *** Joins: ua__ (~ua@public-gprs226401.centertel.pl)
[00:44:13] *** Joins: tct (~tct@user/tct)
[00:44:13] *** Joins: etolier (~somewhere@122-199-44-127.ip4.superloop.com)
[00:44:13] *** Joins: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407)
[00:44:13] *** Joins: smitop[m] (~smitopkde@2001:470:69fc:105::1:117)
[00:44:13] *** Joins: lupin592[m] (~lupin592m@2001:470:69fc:105::1:6718)
[00:44:13] *** Joins: xiaguan (~parsley@2604:180:f1::173)
[00:44:13] *** Joins: berber3 (~berber@v2202101107577140883.nicesrv.de)
[00:44:13] *** Joins: bpmedley (~bpmedley@2600:1700:e2c:8410:a87b:a586:9470:a9e3)
[00:44:13] *** Joins: dld (~davidlowr@2601:197:600:1210:942a:4683:ce04:8328)
[00:44:13] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[00:44:13] *** Joins: XV8 (~XV8@2601:5cb:c001:50:b02a:1289:ddb1:fbc8)
[00:44:13] *** Joins: Oli (~Unknown@user/oli)
[00:44:13] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[00:44:13] *** Joins: off^ (~off@128-092-174-141.biz.spectrum.com)
[00:44:13] *** Joins: YoungFrog (~youngfrog@39.129-180-91.adsl-dyn.isp.belgacom.be)
[00:44:13] *** Joins: kaichiuchu (~mike@user/kaichiuchu)
[00:44:13] *** Joins: BUSY (~BUSY@user/busy)
[00:44:13] *** Joins: dumptruckman (~dumptruck@45-79-173-88.ip.linodeusercontent.com)
[00:44:13] *** Joins: em (~em@user/emnode)
[00:44:13] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[00:44:13] *** Joins: ldunn (~ldunn@user/ldunn)
[00:44:13] *** Joins: phantomcircuit (~phantomci@192.241.205.97)
[00:44:13] *** Joins: minto (~mintograd@47.201.5.61)
[00:44:13] *** Joins: steam (~steam@user/steam)
[00:44:13] *** Joins: eck (~root@user/eck)
[00:44:13] *** Joins: Decker (~d3x0r@user/d3x0r)
[00:44:13] *** Joins: calcmandan (~quassel@user/calcmandan)
[00:44:13] *** Joins: Cyp (~cyp@213.237.88.120)
[00:44:13] *** Joins: rawgreaze (~rawgreaze@user/rawgreaze)
[00:44:13] *** Joins: mrdata (~mrdata@user/mrdata)
[00:44:13] *** Joins: aindilis (~aindilis@152-44-40-72.us-chi1.upcloud.host)
[00:44:13] *** Joins: BinaryWave (~binarywav@ip68-2-121-39.ph.ph.cox.net)
[00:44:13] *** Joins: Bluefoxicy (~Bluefoxic@c-73-132-244-30.hsd1.md.comcast.net)
[00:44:13] *** Joins: koro (koro@efnet.math.uwaterloo.ca)
[00:44:13] *** Joins: buster (~user@dsl-multi-static-81-140-129-201.in-addr.broadbandscope.com)
[00:44:13] *** Joins: simon816 (~simon816@ec2-35-178-246-72.eu-west-2.compute.amazonaws.com)
[00:44:13] *** Joins: learner36 (~learner36@cpef81d0fa12c13-cmf81d0fa12c10.cpe.net.cable.rogers.com)
[00:44:13] *** Joins: Svitkona (~Svitkona@157.245.38.135)
[00:44:13] *** Joins: Bayes (~Bayes@user/bayes)
[00:44:13] *** Joins: gauge (~gauge@user/gauge)
[00:44:13] *** Joins: causative (~halberd@user/causative)
[00:44:13] *** Joins: peeps[win] (~peepsalot@openscad/peepsalot)
[00:44:13] *** Joins: MadLamb (~fabio@p50892adf.dip0.t-ipconnect.de)
[00:44:13] *** Joins: deltab (~deltab@user/deltab)
[00:44:13] *** Joins: stuebinm (~stuebinm@user/stuebinm)
[00:44:13] *** Joins: plankster (~plankster@user/plankers)
[00:44:13] *** Joins: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de)
[00:44:13] *** Joins: dstein64 (~dstein64@dannyadam.com)
[00:44:13] *** Joins: esther (~esther@24-155-112-236.dyn.grandenetworks.net)
[00:44:13] *** Joins: shugo (~shugo@user/shugo)
[00:44:13] *** Joins: acd (~acd@2600:1700:99f3:250::40)
[00:44:13] *** Joins: audiobirb (~audio@user/audio)
[00:44:13] *** Joins: Pickchea (~private@user/pickchea)
[00:44:13] *** Joins: ssiyad (~ssiyad@user/ssiyad)
[00:44:13] *** Joins: Boniche (~Boniche@ivysaur.umbreon.net)
[00:44:13] *** Joins: shachaf (~shachaf@user/shachaf)
[00:44:13] *** Joins: con3 (~con3@143.198.53.32)
[00:44:13] *** Joins: cuppajoeman (sid521943@id-521943.hampstead.irccloud.com)
[00:44:13] *** Joins: parazyd (~parazyd@devuan/developer/parazyd)
[00:44:13] *** Joins: madprops (hj8oijo@user/madprops)
[00:44:13] *** Joins: strudl (~strudl@user/strudl)
[00:44:13] *** Joins: sujeet (sujeet@freeboson.org)
[00:44:13] *** Joins: gshumway (~gshumway@user/gshumway)
[00:44:13] *** Joins: pikhq (sid394595@user/pikhq)
[00:44:13] *** Joins: nkaretnikov (sid190676@id-190676.tinside.irccloud.com)
[00:44:13] *** Joins: SanchayanMaity (sid478177@id-478177.hampstead.irccloud.com)
[00:44:13] *** Joins: deego (~user@69.90.132.173)
[00:44:13] *** Joins: egy (egy@tilde.team)
[00:44:13] *** Joins: gdarko (~me@dg.mk)
[00:44:13] *** Joins: gthm (~gthm@134.122.53.95)
[00:44:13] *** Joins: xeno (~xeno@user/xeno)
[00:44:13] *** Joins: anzu (~anzu@melkki.cs.helsinki.fi)
[00:44:13] *** Joins: dispater (~dispater@user/brprice)
[00:44:13] *** Joins: orcus (~orcus@user/brprice)
[00:44:13] *** Joins: YellowSuB (~YellowSuB@user/yellowsub)
[00:44:13] *** Joins: rooferdave (~rooferdav@rrcs-24-97-76-202.nys.biz.rr.com)
[00:44:13] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[00:44:13] *** Joins: Fusl (fusl@1.0.0.127.in-addr.arpa.li)
[00:44:13] *** Joins: synthmeat (~synthmeat@user/synthmeat)
[00:44:13] *** Joins: sn_fk_n (~snufkin@2.221.192.124)
[00:44:13] *** Joins: davidk156305 (~davidk156@2001:470:69fc:105::1:484e)
[00:44:13] *** Joins: Tisoxin (~ikosit@user/ikosit)
[00:44:13] *** Joins: duude__ (~duude__@user/duude/x-4676560)
[00:44:13] *** Joins: jpaa (~jpaa@161.97.129.36)
[00:44:13] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[00:44:13] *** Joins: notzmv (~zmv@user/notzmv)
[00:44:13] *** Joins: LucaTM (~LucaTM@user/lucatm)
[00:44:13] *** Joins: rex (~rex@2a02:8071:22c9:d320:3285:a9ff:fe3a:67fa)
[00:44:13] *** Joins: pax_os__ (uid535114@ilkley.irccloud.com)
[00:44:13] *** Joins: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de)
[00:44:13] *** Joins: johnkeats7 (~johnkeats@2804:14c:32:a0cc:c1ad:5567:c947:cef7)
[00:44:13] *** Joins: foxtrot (~foxtrot@user/foxtrot)
[00:44:13] *** Joins: _________ (~nobody@user/noodly)
[00:44:13] *** Joins: vancz (~vancz@user/vancz)
[00:44:13] *** Joins: sqrt2_ (~ben@80-108-18-7.cable.dynamic.surfer.at)
[00:44:13] *** Joins: simoneb_ (~simone@static.39.20.203.116.clients.your-server.de)
[00:44:13] *** Joins: Dragoon (~Dragoon@user/dragoon)
[00:44:13] *** Joins: paperManu_ (~paperManu@138.197.128.151)
[00:44:13] *** Joins: Henry151 (~bishop@user/henry151)
[00:44:13] *** Joins: sybariten (~jake@157.90.217.120)
[00:44:13] *** Joins: mycroftiv (~glen@207.148.14.54)
[00:44:13] *** Joins: petaflot (~root@lutolf.vserver.nimag.net)
[00:44:13] *** Joins: nortoh (~nortoh@user/nortoh)
[00:44:13] *** Joins: ayjay_t (~ajp@ajpikul.com)
[00:44:13] *** Joins: KotH (~attila@erica.kinali.ch)
[00:44:13] *** Joins: Ennea (~Ennea@user/ennea)
[00:44:13] *** Joins: xelxebar (~xelxebar@aj175037.dynamic.ppp.asahi-net.or.jp)
[00:44:13] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[00:44:13] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[00:44:13] *** Joins: Maturion (~Maturion@p200300ede70deb00e34c133d0d5a0012.dip0.t-ipconnect.de)
[00:44:13] *** Joins: szkl (uid110435@uxbridge.irccloud.com)
[00:44:13] *** Joins: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com)
[00:44:13] *** Joins: markasoftware (~quassel@107.161.26.124)
[00:44:13] *** Joins: madnight_ (~madnight@static.59.103.201.195.clients.your-server.de)
[00:44:13] *** Joins: Teacup (~teacup@user/teacup)
[00:44:13] *** Joins: DaPinkOne (~Dap@user/dap)
[00:44:13] *** Joins: alip (~alip@exherbo/developer/alip)
[00:44:13] *** Joins: mniip (mniip@libera/staff/mniip)
[00:44:13] *** Joins: noam (~noam@104.232.42.247)
[00:44:13] *** Joins: CloudEvil (~quassel@133.129.239.35.bc.googleusercontent.com)
[00:44:13] *** Joins: dante443 (~dante443@99-88-166-99.lightspeed.milwwi.sbcglobal.net)
[00:44:13] *** Joins: tkr (tkr@pi.ip.fi)
[00:44:13] *** Joins: sander (~sander@user/sander)
[00:44:13] *** Joins: b3z (~b3z@user/b3z)
[00:44:13] *** Joins: marcel (~marcel@user/marcel)
[00:44:13] *** Joins: enthdegree (~user@167.172.147.125)
[00:44:13] *** Joins: moon-child (~moon-chil@cardinal.elronnd.net)
[00:44:13] *** Joins: dextaa (~DV@user/dextaa)
[00:44:13] *** Joins: cluelessperson (~cluelessp@user/cluelessperson)
[00:44:13] *** Joins: tsandstr (~user@nat-130-132-173-4.central.yale.edu)
[00:44:13] *** Joins: DrMax_ (~DrMax@132.215.96.30)
[00:44:13] *** Joins: caramel (~caramel@user/caramel)
[00:44:13] *** Joins: njd (~njd@159.65.3.79)
[00:44:13] *** Joins: taeaad (~taeaad@user/taeaad)
[00:44:13] *** Joins: ski (~ski@remote12.chalmers.se)
[00:44:13] *** Joins: dka (~code-is-a@ns3059207.ip-193-70-33.eu)
[00:44:13] *** Joins: AimHere (~David@92.238.16.159)
[00:44:13] *** Joins: sheepduck_ (~sheepduck@user/sheepduck)
[00:44:13] *** Joins: CalimeroTeknik (~calimero@user/calimeroteknik)
[00:44:13] *** Joins: Me-me (~me-me@user/me-me)
[00:44:13] *** Joins: molt (~molt@178-222-245-206.static.isp.telekom.rs)
[00:44:13] *** Joins: niston (~gridrun@user/niston)
[00:44:13] *** Joins: mncheckm (~mncheck@193.224.205.254)
[00:44:13] *** Joins: blackfield (~blackfiel@85.255.4.218)
[00:44:13] *** Joins: Ekho (~Ekho@user/ekho)
[00:44:13] *** Joins: Pajus (~Pajus@user/pajus)
[00:44:13] *** Joins: Jong (~Jong@163.114.132.5)
[00:44:13] *** Joins: tomaw (tom@libera/staff/tomaw)
[00:44:13] *** Joins: Raz- (~razor@libera/sponsor/razor)
[00:44:13] *** Joins: rak (~rak@debian/rak)
[00:44:13] *** Joins: jj5 (~jj5@211-26-131-173.dyn.dodo.net.au)
[00:44:13] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[00:44:13] *** Joins: moose (~moose@user/moose)
[00:44:13] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[00:44:13] *** Joins: Vohveli (vohveli@user/vohveli)
[00:44:13] *** Joins: Azem (~haise01@user/haise01)
[00:44:13] *** Joins: jellydonut (~quassel@cBC66BF51.dhcp.as2116.net)
[00:44:13] *** Joins: darkapex (~darkapex@user/darkapex)
[00:44:13] *** Joins: palasso (~palasso@user/palasso)
[00:44:13] *** Joins: PJBoy (~PJBoy@user/pjboy)
[00:44:13] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[00:44:13] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[00:44:13] *** Joins: dTal (~quassel@dragonbox/wizzard/dtal)
[00:44:13] *** Joins: bliminse (~bliminse@host86-188-36-166.range86-188.btcentralplus.com)
[00:44:13] *** Joins: Fairy97 (~Fairy@ti0004a400-6144.bb.online.no)
[00:44:13] *** Joins: defn (~n0b0dy@user/defn)
[00:44:13] *** Joins: bluray (~bluray@user/zapdos)
[00:44:13] *** Joins: glider (~glider@user/glider)
[00:44:13] *** Joins: anderson (~ande@user/anderson)
[00:44:13] *** Joins: Simplar (~Simplar@188.163.93.241)
[00:44:13] *** Joins: trace987 (~trace@ip5b42976d.dynamic.kabel-deutschland.de)
[00:44:13] *** Joins: magla (~gelignite@55d436fa.access.ecotel.net)
[00:44:13] *** Joins: The_Blod- (~Blode@user/the-blode/x-7164444)
[00:44:13] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca)
[00:44:13] *** Joins: vicfred (~vicfred@user/vicfred)
[00:44:13] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[00:44:13] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[00:44:14] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Max SendQ exceeded)
[00:44:14] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (Max SendQ exceeded)
[00:44:29] *** Joins: viva_the_honk (~tacegory@user/tacegory)
[00:44:29] *** Joins: spirit (~spirit@233.ip-144-217-92.net)
[00:44:29] *** Joins: alan1 (~alan@user/Nucleos)
[00:44:29] *** Joins: fweht (uid404746@lymington.irccloud.com)
[00:44:29] *** Joins: csmiga (~Thunderbi@ec2-52-207-160-196.compute-1.amazonaws.com)
[00:44:29] *** Joins: robin (~robin@user/terpri)
[00:44:29] *** Joins: emf (~emf@2620:10d:c090:400::5:b0fe)
[00:44:29] *** Joins: kilobyte_ch (~kbch@77.109.171.85)
[00:44:29] *** Joins: gateway2000 (~gateway20@2603-7081-5505-a2ef-b813-f894-7c21-9b70.res6.spectrum.com)
[00:44:29] *** Joins: loadedanvils (uid128751@uxbridge.irccloud.com)
[00:44:29] *** Joins: son0p (~ff@181.136.122.143)
[00:44:29] *** Joins: freep (~freepppp@46.246.189.172.dsl.dyn.forthnet.gr)
[00:44:29] *** Joins: slidercrank (~slidercra@user/slidercrank)
[00:44:29] *** Joins: Plazma (~Plazma@user/plazma)
[00:44:29] *** Joins: Hazey_Dream (~user@cpe5c7d7dbd2142-cm5c7d7dbd2140.cpe.net.cable.rogers.com)
[00:44:29] *** Joins: emerent (~quassel@p200300cd5704438cba27ebfffed28a59.dip0.t-ipconnect.de)
[00:44:29] *** Joins: maroon (tinycrypt@user/maroon)
[00:44:29] *** Joins: NllPtr (~NllPtr@186-78-241-153.baf.movistar.cl)
[00:44:29] *** Joins: kmh_ (~kmh@94.31.106.215)
[00:44:29] *** Joins: mixfix41 (~homefame@user/mixfix41)
[00:44:29] *** Joins: Isthmusi (~Isthmus@user/isveni)
[00:44:29] *** Joins: aeplus (~steve@2603-8000-cf42-7ec1-162f-1996-0ae2-d7da.res6.spectrum.com)
[00:44:29] *** Joins: susam (~susam@user/susam)
[00:44:29] *** Joins: sveit_ (~sveit@2001:19f0:ac01:247:5400:ff:fe5c:689f)
[00:44:29] *** Joins: msch (sid28472@id-28472.tinside.irccloud.com)
[00:44:29] *** Joins: Duns_Scrotus__ (sid262565@id-262565.tinside.irccloud.com)
[00:44:29] *** Joins: meingtsla (retrograde@user/meingtsla)
[00:44:29] *** Joins: Panther (Lord@2601:18a:c000:5290:4cbe:f5f5:da11:6c2)
[00:44:29] *** Joins: dan__ (~omnisip@2601:280:5880:1b50:ae16:2dff:fe78:44b4)
[00:44:29] *** Joins: Furai (~Furai@furai.pl)
[00:44:29] *** Joins: DrMax (~DrMax@node-1w7jra94757g0kdpr9wjqf80y.ipv6.telus.net)
[00:44:29] *** Joins: jwpapi (sid502614@id-502614.uxbridge.irccloud.com)
[00:44:29] *** Joins: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8)
[00:44:29] *** Joins: |smlckz| (~smlckz@user/smlckz)
[00:44:29] *** Joins: qwedfg_ (~qwedfg@user/qwedfg)
[00:44:29] *** Joins: tmyklebu (~tmyklebu@ns542847.ip-158-69-248.net)
[00:44:29] *** Joins: ckie (~ckie@user/cookie)
[00:44:29] *** Joins: Matt|home (~matt@adsl-74-233-58-56.mia.bellsouth.net)
[00:44:29] *** Joins: lawt (~lawt@2601:200:8101:f140:dea6:32ff:fea1:adf9)
[00:44:29] *** Joins: bambams (~bambams@user/bambams)
[00:44:29] *** Joins: avoidr (~avoidr@user/avoidr)
[00:44:29] *** Joins: int-e (~noone@int-e.eu)
[00:44:29] *** Joins: geonic (~geonic@user/geonic)
[00:44:29] *** Joins: cynicalcats (~cynicalca@user/cynicalcats)
[00:44:29] *** Joins: Kol (~Kol@75.157.122.186)
[00:44:29] *** Joins: riv (river@tilde.team/user/river)
[00:44:29] *** Joins: AMG (ghebo@user/amg)
[00:44:29] *** Joins: OverCoder (~OverCoder@user/overcoder)
[00:44:29] *** Joins: djinni (~djinni@static.38.6.217.95.clients.your-server.de)
[00:44:29] *** Joins: tafa (~tafa@user/tafa)
[00:44:29] *** Joins: lagash (lagash@lagash.shelltalk.net)
[00:44:29] *** Joins: haasn (~nand@haasn.dev)
[00:44:29] *** Joins: bildramer (~bildramer@athedsl-150020.home.otenet.gr)
[00:44:29] *** Joins: ryzenda (~ryzenda@pool-74-109-246-70.pitbpa.fios.verizon.net)
[00:44:29] *** Joins: Galois (djao@efnet.math.uwaterloo.ca)
[00:44:29] *** Joins: sm2n (ae95cb1267@user/sm2n)
[00:44:29] *** Joins: Hummer12007 (061e0434dc@2604:bf00:561:2000::16)
[00:44:29] *** Joins: fxrh (~fxrh@user/fxrh)
[00:44:29] *** Joins: FLHerne (flh@flherne.uk)
[00:44:29] *** Joins: pikapika (~pikapika_@pika.powered.by.lunarbnc.net)
[00:44:29] *** Joins: Macuser (Macuser@here.for-the.chat)
[00:44:29] *** Joins: jyc (sid40911@id-40911.ilkley.irccloud.com)
[00:44:29] *** Joins: ra4king (~ra4king@roiatalla.com)
[00:44:29] *** Joins: udevd (~kaetzchen@user/udevd)
[00:44:29] *** Joins: Arsen (arsen@managarm/dev/Arsen)
[00:44:29] *** Joins: Ox5cfb (~jun@maillard.blue)
[00:44:29] *** Joins: catbeard (~noise@user/catbeard)
[00:44:29] *** Joins: Robbin- (~Robbin@user/robbin)
[00:44:29] *** Joins: mare (sid522462@id-522462.helmsley.irccloud.com)
[00:44:29] *** Joins: HalfCent (~m-tfhzbh@ip133.ip-66-70-231.net)
[00:44:29] *** Joins: ColdKeyboard (~ColdKeybo@user/coldkeyboard)
[00:44:29] *** Joins: Guest4960 (~moses_@user/moses/x-1166525)
[00:44:29] *** Joins: olspookishmagus (~pookie@snf-137798.vm.okeanos.grnet.gr)
[00:44:29] *** Joins: mbarbar (~mbarbar@oak.xen.prgmr.com)
[00:44:29] *** Quits: Hansuke[m] (~hansukema@2001:470:69fc:105::1:86bb) (Max SendQ exceeded)
[00:44:37] *** Quits: niedzejkob[m] (~niedzejko@2001:470:69fc:105::1:1c02) (Ping timeout: 240 seconds)
[00:44:39] *** Joins: dostoyevsky2 (~sck@static.251.39.47.78.clients.your-server.de)
[00:44:40] *** Quits: mixfix41 (~homefame@user/mixfix41) (Max SendQ exceeded)
[00:44:40] *** Parts: viva_the_honk (~tacegory@user/tacegory) ()
[00:44:49] *** Joins: priestly (~sonnius@zen-c6-rtp1g3.rtp.zs.ncren.net)
[00:44:49] *** Joins: BillyZane2 (~BillyZane@185.202.221.34)
[00:44:49] *** Joins: xff0x (~xff0x@2001:1a81:53ac:4a00:25b:5701:e54d:ee3e)
[00:44:49] *** Joins: temp_user_2022 (~amit@2601:445:447f:a2f6:c0a2:d41c:2ddb:9e2e)
[00:44:49] *** Joins: kadoban (~kadoban@user/kadoban)
[00:44:49] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[00:44:49] *** Joins: zibolo (~quassel@global-deiInside018.dei.polimi.it)
[00:44:49] *** Joins: kusanagi_ (~kusanagi@user/kusanagi)
[00:44:49] *** Joins: Batzy (~quassel@user/batzy)
[00:44:49] *** Joins: remedan (~remedan@octo.cafe)
[00:44:49] *** Joins: nicoty (~nicoty@user/nicoty)
[00:44:49] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[00:44:49] *** Joins: begui (~begui@2600:1700:1950:5fa0:7cea:97b8:d0ce:8979)
[00:44:49] *** Joins: PollionH (~pollion@2001:bc8:47ac:2017::1)
[00:44:49] *** Joins: Vermont (sid262764@wikimedia/vermont)
[00:44:49] *** Joins: kristjansson (sid126207@id-126207.tinside.irccloud.com)
[00:44:49] *** Joins: _0x1d3 (sid43116@id-43116.tinside.irccloud.com)
[00:44:49] *** Joins: shikhin (~shikhin@offtopia/offtopian)
[00:44:49] *** Joins: Echoz (~chris@user/echoz)
[00:44:49] *** Joins: cpuid (~cpuid@user/cpuid)
[00:44:49] *** Joins: RadSurfer (~RadSurfer@user/radsurfer)
[00:44:49] *** Joins: mattroelle (~Matt_Roel@funbox.mattroelle.com)
[00:44:49] *** Joins: raekye (~raekye@creatifcubed.com)
[00:44:49] *** Joins: somiaj (~somiaj@fvwm/admin)
[00:44:49] *** Joins: jmnbtslsQE (~000@2604:880:50:5f:2f90:a3ff:f0:f8)
[00:44:49] *** Joins: amosbird (~amosbird@13.75.119.182)
[00:44:49] *** Joins: energizer (~energizer@user/energizer)
[00:44:49] *** Joins: Yamakaja (~yamakaja@user/yamakaja)
[00:44:49] *** Joins: gaken (~gaken@user/galen)
[00:44:49] *** Joins: Patater (~patater@104.248.173.85)
[00:44:49] *** Joins: Learath2 (~learath2@user/learath2)
[00:44:49] *** Joins: Ara (~Ara@user/ara)
[00:44:49] *** Joins: ksft (~k@pool-173-76-14-211.bstnma.fios.verizon.net)
[00:44:50] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Max SendQ exceeded)
[00:44:56] *** Quits: kadoban (~kadoban@user/kadoban) (Max SendQ exceeded)
[00:45:01] *** Joins: tiferrei (~tiferrei@user/tiferrei)
[00:45:01] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[00:45:01] *** Joins: madage (~madage@user/madage)
[00:45:01] *** Joins: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani)
[00:45:01] *** Joins: mickey8 (~user@user/mickey)
[00:45:01] *** Joins: tusko (~yeurt@copyfree/advocate/tusko)
[00:45:01] *** Joins: CombatVet (~c4@user/combatvet)
[00:45:01] *** Joins: mornfall (~mornfall@user/mornfall)
[00:45:01] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[00:45:01] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[00:45:01] *** Joins: noteness (~noteness@user/noteness)
[00:45:01] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[00:45:01] *** Quits: davidk156305 (~davidk156@2001:470:69fc:105::1:484e) (Ping timeout: 250 seconds)
[00:45:01] *** Joins: kolexar (~kolexar@user/kolexar)
[00:45:01] *** Joins: rdrg109 (~rdrg109@user/rdrg109)
[00:45:01] *** Joins: Boarders_ (sid425905@id-425905.lymington.irccloud.com)
[00:45:01] *** Joins: lericson (~lericson@user/lericson)
[00:45:01] *** Joins: meltingwax (sid429936@id-429936.hampstead.irccloud.com)
[00:45:01] *** Joins: Fangs (sid141280@id-141280.hampstead.irccloud.com)
[00:45:01] *** Joins: elichai2 (sid212594@id-212594.hampstead.irccloud.com)
[00:45:01] *** Joins: pdg (sid395042@id-395042.lymington.irccloud.com)
[00:45:01] *** Joins: leonardus (sid358597@id-358597.tinside.irccloud.com)
[00:45:01] *** Joins: bjs (sid190364@user/bjs)
[00:45:01] *** Joins: MizMahem (sid296354@user/mizmahem)
[00:45:01] *** Joins: cloudcell (sid48145@id-48145.tinside.irccloud.com)
[00:45:01] *** Joins: Etienne (~Etienne@esimon.eu)
[00:45:02] *** Quits: dunpeal (~dunpeal@2001:470:69fc:105::3e80) (Ping timeout: 240 seconds)
[00:45:02] *** Quits: quantum (~quantum@user/quantum/x-8556232) (Ping timeout: 240 seconds)
[00:45:02] *** Quits: sp (~sp@user/susam) (Ping timeout: 240 seconds)
[00:45:02] *** Quits: evidlo (~evidlo@2001:470:69fc:105::7fc) (Ping timeout: 240 seconds)
[00:45:02] *** Quits: dotz0cat[m] (~dotz0catm@2001:470:69fc:105::91b) (Ping timeout: 240 seconds)
[00:45:02] *** Quits: Nic0[m] (~nic0nic0n@2001:470:69fc:105::1:8497) (Ping timeout: 240 seconds)
[00:45:08] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (Max SendQ exceeded)
[00:45:18] *** Joins: BitPuffin (~bitpuffin@2001:470:69fc:105::c9c5)
[00:45:18] *** Joins: DerlgM (~lucifargu@2001:470:69fc:105::2faa)
[00:45:18] *** Joins: aplund (~aplundmat@2001:470:69fc:105::4146)
[00:45:18] *** Joins: atx (~atx@2001:470:69fc:105::923)
[00:45:18] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[00:45:18] *** Joins: ecs (~ecs@user/ecs)
[00:45:18] *** Joins: SrPx (sid108780@id-108780.uxbridge.irccloud.com)
[00:45:18] *** Joins: br1ck (~br1ck@150.140.193.82)
[00:45:18] *** Joins: cebor (~cebor@user/cebor)
[00:45:18] *** Joins: kamil (~kxkamil@134.191.220.83)
[00:45:18] *** Joins: twrk (~user@user/twrk)
[00:45:18] *** Joins: kadobanana (~mud@user/kadoban)
[00:45:18] *** Joins: zwisch (~zwisch@135-23-67-207.cpe.pppoe.ca)
[00:45:18] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[00:45:18] *** Joins: V (~v@anomalous.eu)
[00:45:18] *** Joins: ninjabanjo (~ninjabanj@107.150.45.163)
[00:45:18] *** Joins: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net)
[00:45:18] *** Joins: HisShadow (~HisShadow@user/hisshadow)
[00:45:18] *** Joins: jinsun__ (~quassel@user/jinsun)
[00:45:18] *** Joins: coolchris (sid536654@id-536654.lymington.irccloud.com)
[00:45:18] *** Joins: vaporatorius (~vaporator@user/vaporatorius)
[00:45:18] *** Joins: confuzeus (~h_m@186-149-117-154.bitcointernet.co.za)
[00:45:18] *** Joins: Pent (sid313808@id-313808.lymington.irccloud.com)
[00:45:18] *** Joins: joel135 (sid136450@id-136450.hampstead.irccloud.com)
[00:45:18] *** Joins: akrv (sid245241@id-245241.hampstead.irccloud.com)
[00:45:18] *** Joins: cln (sid336875@id-336875.ilkley.irccloud.com)
[00:45:18] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[00:45:18] *** Joins: user282069 (~user@li1512-248.members.linode.com)
[00:45:18] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[00:45:18] *** Joins: Donitz (~Donitz@88-115-149-215.elisa-laajakaista.fi)
[00:45:18] *** Joins: gdd (~gdd@129.199.146.230)
[00:45:18] *** Joins: fstd_ (~fstd@xdsl-89-1-56-234.nc.de)
[00:45:18] *** Joins: chir4gm (~chirag@user/chir4gm)
[00:45:18] *** Joins: sword_smith (sword_smit@bitcoinfundamentals.org)
[00:45:18] *** Joins: brettgilio (~brettgili@x-node.gq)
[00:45:18] *** Joins: vgtw (~vgtw@user/vgtw)
[00:45:18] *** Joins: nisstyre (~wes@user/nisstyre)
[00:45:18] *** Joins: stux|away (~stux@82.192.81.143)
[00:45:18] *** Joins: FlannelKing (~flannel@cpe-76-175-193-181.socal.res.rr.com)
[00:45:18] *** Joins: extor (~xtor@192.99.217.240)
[00:45:18] *** Joins: CuriousErnestBro (~CuriousEr@user/curiousernestbro)
[00:45:18] *** Joins: mnhrdt (~Enric@fsf/member/mnhrdt)
[00:45:18] *** Joins: mjacob (~mjacob@adrastea.uberspace.de)
[00:45:18] *** Joins: Moyst_ (~moyst@user/moyst)
[00:45:18] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[00:45:18] *** Joins: jcay (~jcay@vps3435.vpsunit.com)
[00:45:18] *** Quits: gdd (~gdd@129.199.146.230) (Max SendQ exceeded)
[00:45:19] *** Quits: atx (~atx@2001:470:69fc:105::923) (Ping timeout: 245 seconds)
[00:45:25] *** Quits: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63) (Ping timeout: 240 seconds)
[00:45:25] *** Quits: ac (~aloiscoch@2001:470:69fc:105::65) (Ping timeout: 240 seconds)
[00:45:25] *** Quits: BrownJenkin (~falconsti@2001:470:69fc:105::36d) (Ping timeout: 240 seconds)
[00:45:38] *** Quits: coolshaurya (~coolshaur@2001:470:69fc:105::fac0) (Ping timeout: 260 seconds)
[00:45:38] *** Quits: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631) (Ping timeout: 260 seconds)
[00:45:46] *** Quits: nicoty (~nicoty@user/nicoty) (Ping timeout: 245 seconds)
[00:45:51] *** Quits: Tisoxin (~ikosit@user/ikosit) (Ping timeout: 250 seconds)
[00:46:14] *** Quits: lupin592[m] (~lupin592m@2001:470:69fc:105::1:6718) (Ping timeout: 252 seconds)
[00:46:14] *** Quits: smitop[m] (~smitopkde@2001:470:69fc:105::1:117) (Ping timeout: 252 seconds)
[00:46:15] *** Quits: BitPuffin (~bitpuffin@2001:470:69fc:105::c9c5) (Ping timeout: 268 seconds)
[00:46:15] *** Quits: aplund (~aplundmat@2001:470:69fc:105::4146) (Ping timeout: 268 seconds)
[00:46:15] *** Quits: DerlgM (~lucifargu@2001:470:69fc:105::2faa) (Ping timeout: 268 seconds)
[00:46:15] *** Quits: szkl (uid110435@uxbridge.irccloud.com) (Client Quit)
[00:47:13] *** Quits: dostoyevsky2 (~sck@static.251.39.47.78.clients.your-server.de) (Client Quit)
[00:47:26] *** Quits: kristjansson (sid126207@id-126207.tinside.irccloud.com) (Ping timeout: 245 seconds)
[00:47:27] *** Joins: dostoyevsky2 (~sck@static.251.39.47.78.clients.your-server.de)
[00:47:29] *** Quits: Pent (sid313808@id-313808.lymington.irccloud.com) (Ping timeout: 254 seconds)
[00:47:29] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Ping timeout: 254 seconds)
[00:47:31] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[00:47:49] *** Quits: itok (sid418430@id-418430.ilkley.irccloud.com) (Ping timeout: 240 seconds)
[00:47:54] *** Joins: szkl (uid110435@uxbridge.irccloud.com)
[00:48:04] *** Quits: dostoyevsky2 (~sck@static.251.39.47.78.clients.your-server.de) (Client Quit)
[00:48:22] *** Joins: dostoyevsky2 (~sck@static.251.39.47.78.clients.your-server.de)
[00:48:57] *** Joins: Pent (sid313808@lymington.irccloud.com)
[00:49:44] *** Joins: kristjansson (sid126207@tinside.irccloud.com)
[00:51:02] *** Joins: itok (sid418430@ilkley.irccloud.com)
[00:52:11] *** Quits: magla (~gelignite@55d436fa.access.ecotel.net) (Quit: Stay safe!)
[00:53:33] *** Quits: szkl (uid110435@uxbridge.irccloud.com) ()
[00:54:06] *** Quits: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com) (Quit: Leaving)
[00:54:22] *** Joins: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com)
[00:54:53] *** Joins: jero98772 (~jero98772@2800:484:1d80:d8ce:3490:26c5:1782:da8c)
[00:55:33] *** Quits: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com) (Client Quit)
[00:55:47] *** Joins: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com)
[00:55:58] *** Quits: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com) (Remote host closed the connection)
[00:56:11] *** Joins: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com)
[00:57:39] <tusko> How would one usually deal with something like \int_{0}^{D} |1/D x + 1|^2 dx?
[00:57:47] <tusko> Can I just drop the absolute value bars?
[00:58:18] <tusko> Feels like I'm not supposed to do that
[00:58:28] *** Joins: oj (oj@2a01:7e01::f03c:92ff:fea3:38a3)
[00:59:03] <moon-child> tusko: since you are squaring it, ignoring the absolute value should be fine
[00:59:35] <tusko> I see, ok. So then I should just consider (1/D x +1)^2
[00:59:46] <tusko> glad I'm not losing my mind
[00:59:49] <moon-child> yeah
[00:59:53] <moon-child> in general, though, you would have to find the points where the thing you're absing changes sign, and integrate separately
[01:01:57] *** Joins: pluri (~pluri@user/pluri)
[01:02:02] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[01:02:02] *** Joins: woky (~woky@li1651-31.members.linode.com)
[01:02:03] *** Joins: dunpeal (~dunpeal@2001:470:69fc:105::3e80)
[01:02:12] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[01:02:13] *** Quits: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com) (Quit: Leaving)
[01:02:24] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:02:30] *** Joins: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com)
[01:03:29] *** Quits: dostoyevsky2 (~sck@static.251.39.47.78.clients.your-server.de) (Quit: leaving)
[01:03:32] *** Joins: hfsoulz (~hfsoulz@user/hfsoulz)
[01:03:37] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[01:03:41] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[01:04:12] *** Joins: mnl (~mnl@user/mnl)
[01:04:21] *** Joins: mh_le (~mads@li1492-12.members.linode.com)
[01:04:21] *** Quits: mh_le (~mads@li1492-12.members.linode.com) (Changing host)
[01:04:21] *** Joins: mh_le (~mads@user/mh-le/x-4465771)
[01:06:02] *** Joins: rdrg109 (~rdrg109@user/rdrg109)
[01:06:47] *** Joins: gdd (~gdd@129.199.146.230)
[01:06:48] *** Joins: Pseudocrat (~sudo@user/pseudocrat)
[01:09:14] <PlanckWalk> tusko: The sign is everywhere positive in that interval anyway, so it wouldn't matter whether squaring or not.
[01:11:13] *** Quits: Pseudocrat (~sudo@user/pseudocrat) (Ping timeout: 250 seconds)
[01:12:36] *** Quits: oj (oj@2a01:7e01::f03c:92ff:fea3:38a3) (Quit: No Ping reply in 180 seconds.)
[01:14:16] <dude12312414> so that absolute value sign is doubly redundant
[01:16:26] *** Joins: oj (oj@user/oj)
[01:17:02] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[01:17:44] <tusko> lol nice
[01:19:38] *** Joins: sp (~sp@user/susam)
[01:19:55] *** Joins: kadoban (~kadoban@user/kadoban)
[01:21:51] *** Quits: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net) (Remote host closed the connection)
[01:22:09] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[01:24:49] *** Joins: phantomcircuit_ (~phantomci@2604:a880:1:20::f2:c001)
[01:27:17] *** Quits: phantomcircuit (~phantomci@192.241.205.97) (Ping timeout: 240 seconds)
[01:27:22] *** Joins: niedzejkob[m] (~niedzejko@2001:470:69fc:105::1:1c02)
[01:29:09] *** Joins: dotz0cat[m] (~dotz0catm@2001:470:69fc:105::91b)
[01:31:07] *** Quits: Trigo (~NeedMathH@64.201.115.44) (Quit: Quit)
[01:34:03] *** Joins: davidk156305 (~davidk156@2001:470:69fc:105::1:484e)
[01:35:08] *** Joins: evidlo (~evidlo@2001:470:69fc:105::7fc)
[01:38:57] *** Parts: catbeard (~noise@user/catbeard) (Bye!)
[01:42:03] *** Joins: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net)
[01:42:05] *** Joins: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631)
[01:43:06] *** Joins: coolshaurya (~coolshaur@2001:470:69fc:105::fac0)
[01:43:18] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 250 seconds)
[01:44:34] *** Joins: jinsun_ (~jinsun@user/jinsun)
[01:44:35] *** Joins: horseface (~horseface@user/horseface)
[01:44:55] *** Joins: Hansuke[m] (~hansukema@2001:470:69fc:105::1:86bb)
[01:44:58] *** Joins: BrownJenkin (~falconsti@2001:470:69fc:105::36d)
[01:45:01] *** Joins: ac (~aloiscoch@2001:470:69fc:105::65)
[01:45:04] *** Joins: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63)
[01:45:07] *** Quits: horseface (~horseface@user/horseface) (Remote host closed the connection)
[01:45:25] *** Joins: Tisoxin (~ikosit@user/ikosit)
[01:45:31] *** Joins: nicoty (~nicoty@user/nicoty)
[01:45:40] *** Joins: DerlgM (~lucifargu@2001:470:69fc:105::2faa)
[01:46:32] *** Joins: lupin592[m] (~lupin592m@2001:470:69fc:105::1:6718)
[01:46:34] *** Joins: smitop[m] (~smitopkde@2001:470:69fc:105::1:117)
[01:50:37] *** Joins: atx (~atx@2001:470:69fc:105::923)
[01:52:19] *** Quits: ffs (uid158779@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[01:54:37] *** Joins: bosspotato (~bosspotat@lnsm5-montreal02-142-118-105-142.internet.virginmobile.ca)
[01:54:37] *** Quits: bosspotato (~bosspotat@lnsm5-montreal02-142-118-105-142.internet.virginmobile.ca) (Changing host)
[01:54:37] *** Joins: bosspotato (~bosspotat@user/bosspotato)
[01:55:25] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[01:56:10] *** Joins: BitPuffin (~bitpuffin@2001:470:69fc:105::c9c5)
[01:56:12] *** Joins: aplund (~aplundmat@2001:470:69fc:105::4146)
[01:56:16] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[01:56:48] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[01:56:53] *** Joins: quantum (~quantum@user/quantum/x-8556232)
[01:57:35] *** Joins: Pseudocrat (~sudo@user/pseudocrat)
[01:59:20] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[02:01:43] *** Quits: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net) (Remote host closed the connection)
[02:02:27] <RadSurfer> >>> You have {1,3,5,7,9,11,13,15}, you use 3 of them to obtain 15 :: how is this done! (not that difficult!)
[02:03:06] *** Quits: Pseudocrat (~sudo@user/pseudocrat) (Max SendQ exceeded)
[02:03:58] *** Joins: Guts71 (~Guts71@41.109.39.210)
[02:04:15] *** Joins: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net)
[02:05:16] *** Joins: vrp2zqL7 (~v8XhLN3K@74.5.157.96)
[02:10:45] *** Joins: Nic0[m] (~nic0nic0n@2001:470:69fc:105::1:8497)
[02:12:32] <Z-module> obtain in what way?
[02:12:54] <Z-module> like adding?  1 + 5 + 9 = 15
[02:15:01] <[itchyjunk]> 1 + 3 + 11
[02:15:23] <[itchyjunk]> 3 + 5 + 7 ?
[02:20:02] <Z-module> pretty boring problem, we would have to say
[02:20:20] * tusko obtains
[02:22:47] *** Quits: mnl (~mnl@user/mnl) (Quit: cya~)
[02:25:50] *** Joins: Josep (~Josep333@185.104.244.25)
[02:26:40] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[02:29:52] <Josep> how do I login>?
[02:29:58] <Josep> rather auto login
[02:30:13] *** Quits: APic (~apic@apic.name) (Ping timeout: 256 seconds)
[02:31:42] *** Joins: APic (apic@apic.name)
[02:32:03] *** Joins: Arcorann (~A@user/arcorann)
[02:34:26] <greenbagels> Josep: that is up to your irc client
[02:34:54] <Josep> I am using hexchat
[02:34:56] *** Joins: Pseudocrat (~sudo@user/pseudocrat)
[02:35:03] <Josep> but dont know what is the command to login
[02:35:13] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[02:35:14] <Josep> cause everytime I close and open it up I have to login again
[02:35:18] <greenbagels> do you mean to identify with nickserv or to connect to this channel?
[02:35:27] <Josep> identify
[02:35:30] <Josep> with nickserver
[02:35:39] *** Quits: Fairy97 (~Fairy@ti0004a400-6144.bb.online.no) (Ping timeout: 256 seconds)
[02:35:52] <greenbagels> ok; this is kind of the wrong channel to ask this kind of stuff; i imagine in the official libera support channel, they might be able to point you to some resources
[02:36:08] <greenbagels> or you can look up hexchat auto identify or something
[02:36:40] <Josep> whats the official libera channel name
[02:36:45] <Josep> #libera?
[02:37:25] *** Quits: palasso (~palasso@user/palasso) (Quit: I am not a quitter!)
[02:37:47] <Josep> btw are you good at statistics?
[02:37:55] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[02:38:24] *** Quits: pluri (~pluri@user/pluri) (Quit: Textual IRC Client: www.textualapp.com)
[02:38:57] *** Quits: Pseudocrat (~sudo@user/pseudocrat) (Ping timeout: 240 seconds)
[02:41:29] *** Quits: SGautam (uid286066@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[02:42:42] <Josep> ok I managed to get the command from the libera website it was such a hastle since my client is so bad I can hardly see anything
[02:42:52] <Josep> ill set up ssl now for auto login
[02:43:10] <Josep> sasl * or whatever its called
[02:43:12] *** Joins: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca)
[02:44:58] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-801c-a6a4-997f-0730.res6.spectrum.com) (Read error: Connection reset by peer)
[02:45:10] <greenbagels> im good at basic statistics but i am not a statistician
[02:45:17] <greenbagels> ##statistics will have statisticians
[02:45:39] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[02:45:46] *** Quits: Simplar (~Simplar@188.163.93.241) (Quit: Going offline, see ya! (www.adiirc.com))
[02:47:00] <Josep> oh I couldn't chat in statistics since I didn't login but now I can so I will ask my question there and I will also ask it here  maybe you can help its a basic question
[02:47:14] <Josep> why can't ratio data be negative?
[02:47:24] <Josep> suppose I am doing a research about how much money people have
[02:47:32] <Josep>  people could be in debt thus have negative amount
[02:47:49] <Josep> ratio is a quatitative datatype
[02:49:42] <greenbagels> Josep: a ratio as in a/b ?
[02:49:45] <greenbagels> a ratio of two numbers?
[02:50:43] <Josep> a ratio not as a ratio in math
[02:50:48] <Josep> but as in statistics
[02:50:50] <Josep> https://www.chi2innovations.com/blog/discover-data-blog-series/ratio-data/
[02:51:34] *** Joins: soapsudsxx (~soapsudsx@209.221.40.152)
[02:51:44] <Josep> check this
[02:53:40] *** Joins: Josep_2 (~Josep333@185.104.244.26)
[02:55:00] <ProfSimm> How would you encode efficiently a stream of values, where some of them may have a label (associative) and many many not?Decker:
[02:55:10] <ProfSimm> Decker: oops accidentally tagged you
[02:55:21] <Josep_2> are you answering my question"?
[02:55:25] <Josep_2> or is it someone else
[02:55:28] <Decker> hoffman something? :)
[02:55:39] <Josep_2> oh you are asking a question sorry
[02:56:17] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 240 seconds)
[02:57:11] *** Quits: Josep (~Josep333@185.104.244.25) (Ping timeout: 256 seconds)
[02:57:49] *** Quits: lilgopher (~textual@2601:241:8000:38f0:9c23:cd6f:d63b:6080) (Ping timeout: 240 seconds)
[02:58:45] *** Quits: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[02:59:04] *** Joins: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de)
[02:59:05] <mornfall> ProfSimm: does the next thing have a label is one bit; if compact is all you care about, that'd work
[03:01:01] <mornfall> you can do better than that, but it means fiddling with the encoding of values (arithmetic coding, or as suggested, huffman coding)
[03:02:17] *** Joins: lilgopher (~textual@2601:241:8000:38f0:b4e0:9656:29c6:d783)
[03:04:10] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[03:04:13] *** Quits: xelxebar (~xelxebar@aj175037.dynamic.ppp.asahi-net.or.jp) (Quit: WeeChat 3.4)
[03:04:52] <ProfSimm> mornfall: well, there's no such thing as one bit in a list of values :)
[03:05:13] <mornfall> ProfSimm: there is such a thing in a bit stream
[03:06:13] <mornfall> but perhaps by 'encode' you mean something other than into bits?
[03:07:39] <mornfall> if you have some other constraints (like alignment of said values on byte/word/… boundaries), it'd be worth mentioning
[03:07:52] *** Quits: Josep_2 (~Josep333@185.104.244.26) (Quit: Leaving)
[03:08:08] *** Joins: Josep (~Josep333@185.104.244.26)
[03:08:15] <ProfSimm> mornfall: one approach is everything is pairs of label/value. Another is an escape value, where you need to double it to mean itself, and without that it can encode metadata such as "next two vals are label/value pair". It can be a list of values, and then separately pairs of label index for the labeled ones
[03:08:27] <ProfSimm> mornfall: many ways to do it, but they all suck in various ways
[03:09:14] <[itchyjunk]> Josep, this is a new term for me.
[03:09:16] <buster> Decker, Huffman?
[03:09:23] <[itchyjunk]> Even reading the definition doesn't quite clarify it for me.
[03:09:29] <Josep> [itchyjunk] why did I get banned lol?
[03:09:31] <mornfall> or you know, you can put a bool in front of each value… as long as bools are efficient in your stream encoding
[03:09:50] <Josep> from the article you meant?
[03:09:53] <[itchyjunk]> But the definition says that its same as "interval data" but with a definative 0 and non negative ratios
[03:10:04] <[itchyjunk]> so it can't be negative pretty much because of the definitoin
[03:10:21] <[itchyjunk]> Josep, bot bans you if you paste more than 5 lines in less than 3 seconds there
[03:10:21] <Josep> yeah I understood the definition except that I didnt understand why they cant be negative lol
[03:10:32] <[itchyjunk]> https://www.questionpro.com/blog/ratio-data
[03:10:34] <Josep> I didn't paste anything tho I was just typing lol
[03:10:43] <[itchyjunk]> I was reading that
[03:10:50] <mornfall> (that's a bit like asking why positive numbers can't be negative?)
[03:10:55] <[itchyjunk]> but i've seen come across these terms before so i have no idea
[03:11:11] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[03:11:15] <[itchyjunk]> Josep, yeah i don't really know why it can't be negative
[03:11:31] <[itchyjunk]> the "fixed zero" probably has something to do with it
[03:11:48] <Josep> yeah I suppose
[03:11:55] <[itchyjunk]> since that is how Ratio data seems to differ from Interval data
[03:12:07] <Josep> yeah meaning there is a natural 0
[03:12:13] <Josep> and things can be multiple of others
[03:12:19] <Josep> this is what I understood from this one https://www.chi2innovations.com/blog/discover-data-blog-series/ratio-data/
[03:12:42] <Josep> so for a clock at 6:00 pm you can't say that its the double of 3:00pm
[03:13:06] <Josep> but I am honestly not getting the part why ratio cant be negative so for the money example
[03:13:06] <[itchyjunk]> right, you need ordering and absolute minimum and what not
[03:13:12] <Josep> people could have negative amount
[03:13:36] <Josep> money data is ratio  not interval I suppose
[03:13:39] <[itchyjunk]> not for this
[03:13:50] <[itchyjunk]> if you have negative amounts, what's your absolute zero?
[03:13:56] <[itchyjunk]> whats the minimum?
[03:14:06] <[itchyjunk]> [0,inf) has 0 as minimum
[03:14:18] <[itchyjunk]> (-inf,inf) seems to ahve no miminum
[03:14:45] *** Joins: Josep_2 (~Josep333@185.104.244.26)
[03:15:03] <Josep_2> sorry got disconnected
[03:15:28] <[itchyjunk]> i said, not for this Ratio data thing.
[03:15:36] <[itchyjunk]> yuo need to have absolute zero, it says.
[03:15:42] <Josep_2> yeah
[03:15:44] <mornfall> Josep: with money, it doesn't make sense to ask 'how many times more money X has than Y' if Y's money is negative
[03:15:47] <[itchyjunk]> if you have negative values, you can't have a minimum
[03:15:48] <Josep_2> so I can't be lower than 0?
[03:15:54] <[itchyjunk]> [0,inf) has 0 minimum
[03:16:00] <Josep_2> ah so the question is how much money you have
[03:16:00] <[itchyjunk]> (-inf,inf) doesn't.
[03:16:09] <Josep_2> if you are in debt we suppose you dont have any money
[03:16:16] <Josep_2> and if he doesnt have any money its 0
[03:16:26] <Josep_2> that makes sense
[03:16:29] <[itchyjunk]> you pick an absolute 0
[03:16:33] <[itchyjunk]> so you can have -
[03:16:34] <Josep_2> yeah you are right
[03:16:35] <[itchyjunk]> maybe
[03:16:48] <Josep_2> absolute 0 I cant have negatives
[03:16:49] <[itchyjunk]> say you can take out $100 most out of a card
[03:16:57] <[itchyjunk]> so -100 would be the absolute 0 or something
[03:17:02] <[itchyjunk]> hmm
[03:17:02] <Josep_2> yep
[03:17:16] <Josep_2> the absolute 0 would just be 0$
[03:17:19] <Josep_2> you cant go below it
[03:17:35] <[itchyjunk]> right
[03:17:37] *** Quits: Josep (~Josep333@185.104.244.26) (Ping timeout: 240 seconds)
[03:17:40] <mornfall> Josep_2: the point of ratios is that you can meaningfully divide or multiply them… like above, 'twice the money X has' doesn't really make sense if X has negative money
[03:17:45] <[itchyjunk]> looks like if you have negatives, you want Interval data
[03:17:55] <Josep_2> so if I am asking people how much money they have if they are in debt I dont care about that so their answers can only be poisittie or -
[03:17:59] <[itchyjunk]> and if you have data where you have absolute 0 and some other condition
[03:18:04] <[itchyjunk]> you can use Ratio data
[03:18:17] <[itchyjunk]> mornfall, this has nothing to do with dividing two numbers
[03:18:19] <mornfall> Josep_2: but that just means that ratio is not a good fit for your question
[03:18:23] <mornfall> [itchyjunk]: yes it does
[03:18:31] <[itchyjunk]> `Ratio data` is a specific term.
[03:18:35] <[itchyjunk]> with specific definition.
[03:18:47] <mornfall> [itchyjunk]: that's what ratio is; interval + division & multiplication
[03:18:54] <Josep_2> or 0*
[03:18:59] <[itchyjunk]> You can have negative ratios.
[03:19:04] <[itchyjunk]> -2/4.
[03:19:16] <mornfall> [itchyjunk]: i'm talking about the stat thing
[03:20:00] <mornfall> with intervals, it makes sense to say X is 100 more than Y, but not X is twice Y
[03:20:12] <mornfall> with ratio, that makes sense too
[03:20:18] <Josep_2> mornfall: but cant we say that -4 is double -2 usd?
[03:20:19] <[itchyjunk]> oh i see
[03:20:22] *** Quits: off^ (~off@128-092-174-141.biz.spectrum.com) (Remote host closed the connection)
[03:20:50] <Josep_2> I get the point
[03:20:53] <mornfall> i mean, sure, -400 is twice -200, but that's not what you mean when you say that
[03:21:19] <Josep_2> its just positve depending on the question since we cant say having 4 usd is double having -4 usd its either the question how much moneyu you have or how much debt you have
[03:21:19] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[03:21:21] <[itchyjunk]> Josep_2, yeah i might have thought so too but doubling negatives makes it smaller
[03:21:24] <[itchyjunk]> instead of bigger
[03:21:35] <Josep_2> yeah
[03:21:39] *** Joins: pavonia (~user@user/siracusa)
[03:21:42] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:21:45] <[itchyjunk]> is -4 twice -2 or is -2 twice -4 ?
[03:21:57] <Josep_2> -4 twice -2
[03:22:20] <Josep_2> I actually get the point now
[03:22:21] <Josep_2> thanks guys
[03:22:23] <mornfall> it comes down to 'twice as much money'…
[03:22:28] <Josep_2> yeah
[03:22:31] <[itchyjunk]> i guess if i am in -2 debt and you in -4, i could say i am twice in debt than you
[03:22:33] <mornfall> you don't expect that to come out as less money
[03:22:54] <[itchyjunk]> this seems more like a language thing, which i dont like
[03:22:59] <Josep_2> exactly
[03:23:08] <mornfall> it's about presenting data
[03:23:11] <Josep_2> anyways I dont think it will matter much I was just a bit confused
[03:23:14] <Josep_2> yes
[03:23:47] *** Quits: jj5 (~jj5@211-26-131-173.dyn.dodo.net.au) (Quit: Konversation terminated!)
[03:23:57] <Josep_2> but my point is if what have -4/2 = -2 is -4 double 2 here? clearly noty
[03:24:05] <Josep_2> thats why its an interval not a ratio data
[03:24:08] <Josep_2> I suppose
[03:24:13] <mornfall> it's good to know that using terms as 'inflation doubled since last year' will be confusing if deflation is a thing
[03:25:01] <mornfall> inflation has doubled! it's now even less than it was before (huh?)
[03:25:17] <Josep_2> thats a language thing lol
[03:25:43] <Josep_2> how can inflation double and be less lol
[03:25:48] *** Joins: Pseudocrat (~sudo@user/pseudocrat)
[03:26:09] *** Quits: Maturion (~Maturion@p200300ede70deb00e34c133d0d5a0012.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:26:31] *** Joins: jj5 (~jj5@211-26-131-173.dyn.dodo.net.au)
[03:26:48] <mornfall> well, it's a language thing that the ratio captures; it's type of data where this kind of comparison (using things like 'foo doubled') is safe
[03:26:50] <[itchyjunk]> yeah i guess coloqually its more confusing
[03:27:29] <Josep_2> alright thanks for the help
[03:27:50] <Josep_2> its kinda cool to talk to someone because I gain better understanding
[03:28:53] *** Quits: Josep_2 (~Josep333@185.104.244.26) (Quit: Leaving)
[03:30:23] *** Quits: Pseudocrat (~sudo@user/pseudocrat) (Ping timeout: 256 seconds)
[03:31:20] *** Joins: wakeup (~wakeup@user/wakeup)
[03:31:53] <wakeup> p(a, b | c, d) = p(a | b, c, d) p(b | c, d)
[03:31:55] <wakeup> right?
[03:33:29] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[03:33:57] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[03:45:35] *** Quits: freep (~freepppp@46.246.189.172.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[03:48:06] *** Quits: emerent (~quassel@p200300cd5704438cba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[03:48:24] *** Joins: emerent (~quassel@p200300cd5704437cba27ebfffed28a59.dip0.t-ipconnect.de)
[03:49:03] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Ping timeout: 276 seconds)
[03:49:29] *** Joins: wakeup27 (~wakeup@user/wakeup)
[03:49:40] *** Quits: wakeup27 (~wakeup@user/wakeup) (Client Quit)
[03:49:52] *** Joins: wakeup80 (~wakeup@user/wakeup)
[03:49:53] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[03:49:57] *** Joins: noboruma (~noboruma@202-189-221-251.tokyo.fdn.vectant.ne.jp)
[03:50:42] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[03:52:09] *** Quits: wakeup (~wakeup@user/wakeup) (Ping timeout: 256 seconds)
[03:55:26] *** Quits: Oli (~Unknown@user/oli) (Ping timeout: 252 seconds)
[03:56:41] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[04:02:55] *** Quits: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca) (Ping timeout: 256 seconds)
[04:03:08] *** Quits: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3) (Ping timeout: 252 seconds)
[04:05:25] *** Quits: wakeup80 (~wakeup@user/wakeup) (Quit: Client closed)
[04:05:46] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[04:06:16] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:07:27] *** Quits: AimHere (~David@92.238.16.159) (Ping timeout: 256 seconds)
[04:09:51] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Ping timeout: 276 seconds)
[04:13:45] *** Joins: Pseudocrat (~sudo@user/pseudocrat)
[04:17:57] *** Quits: Pseudocrat (~sudo@user/pseudocrat) (Ping timeout: 240 seconds)
[04:18:36] *** Joins: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca)
[04:19:42] *** Joins: AimHere (~David@vpn-fn-227.net.ed.ac.uk)
[04:22:31] *** Quits: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[04:23:49] *** Joins: src (~src@user/src)
[04:23:54] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[04:24:17] *** Joins: audio (~audio@user/audio)
[04:24:31] <audio> what do two pipes mean? || x ||
[04:26:36] *** Joins: lainon (~lainon@2601:7c0:c500:4d20::ae8)
[04:26:59] <Z-module> typically the length of vector x
[04:27:08] <Z-module> or whatever norm is being used, in a normed space
[04:27:45] <Z-module> so for example if x = (a,b,c) in R^3, then ||x|| = sqrt(a^2 + b^2 + c^2)
[04:28:06] <Z-module> most of the time, anyhow
[04:29:04] <[itchyjunk]> sometimes x is where treasure is hidden
[04:29:26] <Z-module> You know the famous "find x" cartoon, right?
[04:29:37] <[itchyjunk]> "here it is" ?
[04:29:39] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[04:29:40] <Z-module> yeah
[04:29:43] <[itchyjunk]> yeah
[04:31:32] *** Quits: meltingwax (sid429936@id-429936.hampstead.irccloud.com) (Excess Flood)
[04:33:00] *** Joins: meltingwax (sid429936@hampstead.irccloud.com)
[04:39:37] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[04:39:45] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[04:40:19] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 256 seconds)
[04:41:28] *** Joins: horseface (~horseface@user/horseface)
[04:42:47] *** Quits: lilgopher (~textual@2601:241:8000:38f0:b4e0:9656:29c6:d783) (Quit: Textual IRC Client: www.textualapp.com)
[04:43:40] *** Joins: lilgopher (~textual@2601:241:8000:38f0:e066:45e5:41b6:82b6)
[04:43:59] *** Joins: laurus (~laurus@user/laurus)
[04:44:51] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[04:46:01] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[04:46:23] <laurus> I have a question about a proof of a preliminary lemma to Zorn's lemma: https://i.uguu.se/qhdYVcVo.png
[04:47:07] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Client Quit)
[04:48:11] *** Joins: Pseudocrat (~sudo@user/pseudocrat)
[04:52:14] <Z-module> checking
[04:52:17] *** Quits: Pseudocrat (~sudo@user/pseudocrat) (Ping timeout: 240 seconds)
[04:52:53] <Z-module> This is more complicated than I remember Zorn really needing.
[04:53:13] <Z-module> but anyway, what's the question?
[04:54:15] <laurus> Z-module: Hi
[04:54:18] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[04:54:38] *** Quits: audio (~audio@user/audio) (Quit: Client closed)
[04:54:45] <laurus> Z-module: I tried making a non-empty linearly ordered subset of D, and tried to show the supremum of that was in D. But I couldn't get it to work
[04:55:34] <laurus> I called it E, with sup E = e. I said okay, either b is an upper bound of E or it isn't. If b is an upper bound of E, then e <= b.
[04:55:48] <laurus> But if b isn't an upper bound of E, I couldn't figure out how to get f(b) <= e.
[04:58:27] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[05:00:08] *** Joins: kish` (~aqua@user/aqua)
[05:00:22] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[05:02:25] *** Quits: Guts71 (~Guts71@41.109.39.210) (Ping timeout: 256 seconds)
[05:06:15] *** phantomcircuit_ is now known as phantomcircuit
[05:07:54] *** Quits: GomJabbar_ (gomjabbar@2607:f8f8:790:5::1:1) (Ping timeout: 260 seconds)
[05:11:15] *** Quits: horseface (~horseface@user/horseface) (Ping timeout: 256 seconds)
[05:11:17] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 240 seconds)
[05:12:30] <PlanckWalk> laurus: I'm not sure what you are actually doing.
[05:12:38] <laurus> PlanckWalk: What do you mean?
[05:13:05] <laurus> PlanckWalk: So yesterday I figured out that the part of the proof that uses "C" is basically wrong
[05:13:18] <laurus> But I was able to circumvent that with my own approach that works, so I tried to use that approach again here for D
[05:13:24] *** Quits: qeed (~qeed@072-190-106-143.res.spectrum.com) (Ping timeout: 256 seconds)
[05:13:37] <laurus> (this is to show that (c) holds for D)
[05:13:45] <PlanckWalk> Oh, is this image your proof, not a textbook proof?
[05:13:49] <laurus> i.e. that for any arbitrary non-empty linearly ordered subset of D, the supremum of that set is in D
[05:13:54] <laurus> PlanckWalk: no it's a book but it has mistakes in it :(
[05:14:03] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[05:14:05] <PlanckWalk> Ah, that sucks.
[05:14:15] <laurus> Indeed it does, but I can't find another book on this topic that covers what I want, seemingly
[05:14:21] <laurus> Perhaps you could help with that actually
[05:14:36] <PlanckWalk> Haha no, I utterly suck at book recommendations
[05:14:42] <laurus> Okay ;)
[05:14:48] <laurus> So, does what I'm doing make sense now?
[05:14:56] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[05:15:18] <PlanckWalk> Yes, the context helps :)
[05:15:52] <laurus> So I'm trying to show that sup E is in D. But it's tricky because if b isn't an upper bound of E, I can't see how to get f(b) <= e.
[05:16:13] <laurus> It seems like we could still have f(b) being >= e.
[05:16:14] *** Quits: lainon (~lainon@2601:7c0:c500:4d20::ae8) (Remote host closed the connection)
[05:17:08] *** Joins: off^ (~off@128-092-174-141.biz.spectrum.com)
[05:18:57] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 240 seconds)
[05:19:00] *** Quits: off^ (~off@128-092-174-141.biz.spectrum.com) (Remote host closed the connection)
[05:19:12] <laurus> PlanckWalk: do you think I should just dump this book?
[05:19:13] *** Joins: frelleck (~frelleck@user/frelleck)
[05:19:15] <PlanckWalk> Could be, I'm still reading through and checking the definitions
[05:19:20] <laurus> this is the second day I've sunk a bunch of time into this
[05:19:36] <laurus> Thank you!!
[05:20:32] <PlanckWalk> Ugh, what's b is the definition of D?
[05:20:37] * PlanckWalk reads back again ...
[05:20:46] <laurus> PlanckWalk: It is an arbitrary b.
[05:20:47] <isekaijin> What's the smallest topology on Q such that the embeddings Q -> Q_p (for every prime p) and Q -> R are all continuous?
[05:21:07] <PlanckWalk> Oh, so there's a whole family of D's, on for every b in B for any B
[05:21:13] <laurus> PlanckWalk: Yes.
[05:21:22] <PlanckWalk> Oh wait, there's only one B
[05:21:38] <laurus> Well, yes, only one B
[05:21:42] <isekaijin> I feel that, in some sense, this is the most natural topology on Q. One that is not biased towards the embedding in R.
[05:21:43] <PlanckWalk> So it's just a D_b for each element of it
[05:21:48] <laurus> PlanckWalk: Yes :) Exactly.
[05:22:26] *** Joins: Pseudocrat (~sudo@user/pseudocrat)
[05:26:37] *** Quits: Pseudocrat (~sudo@user/pseudocrat) (Ping timeout: 240 seconds)
[05:26:47] *** Quits: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca) (Ping timeout: 256 seconds)
[05:26:52] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[05:28:30] *** Joins: horseface (~horseface@user/horseface)
[05:29:13] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[05:31:02] <laurus> PlanckWalk: So are we missing something about this, or is the author being a bit... misleading?
[05:31:52] *** Joins: cul8r (~cul8r@2601:8c3:4000:b0d0::f2bf)
[05:33:17] *** Quits: horseface (~horseface@user/horseface) (Ping timeout: 240 seconds)
[05:33:53] *** Quits: etolier (~somewhere@122-199-44-127.ip4.superloop.com) (Ping timeout: 252 seconds)
[05:37:17] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 240 seconds)
[05:38:11] <PlanckWalk> Eh, I'm still working through the proof that B satisfies (c). I'm not convinced yet.
[05:38:25] <laurus> PlanckWalk: That part of the argument is wrong
[05:38:30] <laurus> I found a way around it though if you're interested
[05:39:13] <PlanckWalk> Oh okay, I guess I'll just look at the next bit for now then
[05:39:31] <laurus> Yeah. Unfortunately, the part I'm confused about says to do it in "exactly the same way" as the thing for C.
[05:39:36] <laurus> :-/
[05:39:48] *** Joins: quartz (~quartz@user/quartz)
[05:39:54] *** Quits: Hazey_Dream (~user@cpe5c7d7dbd2142-cm5c7d7dbd2140.cpe.net.cable.rogers.com) (Ping timeout: 250 seconds)
[05:40:10] <[itchyjunk]> metric space <=> normed space , is this true?
[05:40:18] <laurus> PlanckWalk: Hey I _figured it out_!
[05:40:20] <[itchyjunk]> you could always use a metric as a norm right?
[05:40:22] <tusko> I must be doing something very dumb. Why is the fundamental period of cos^2(2t - pi/3) not pi?
[05:40:28] <laurus> My goodness
[05:40:41] <laurus> I think I'm going to cry
[05:40:47] *** Joins: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca)
[05:40:52] <PlanckWalk> Oh awesome
[05:41:08] *** Joins: libsys (~libsys@186.105.187.144)
[05:41:09] <laurus> Yes... I used some of the properties of X to do it
[05:41:17] <PlanckWalk> tusko: Because it has a shoter period that works
[05:41:24] <PlanckWalk> shorter*
[05:41:29] <laurus> And broke down the number of cases to two categories, then one of those to further two categories
[05:41:46] <laurus> PlanckWalk: thank you very much for taking the time to work through some of this with me
[05:41:58] <PlanckWalk> Nice!
[05:42:00] <laurus> so can I tell you about why I'm reading this book?
[05:42:04] <PlanckWalk> Sure
[05:42:20] <PlanckWalk> tusko: cos^2 has period pi
[05:42:24] <tusko> How can I improve my heuristic PlanckWalk? Right now that is when I see cos(something*t + shift) I calculate 2*pi/something
[05:42:57] <laurus> So I spent, or rather, wasted, a ton of time last year on this book _Linear Algebra_ by Peter Lax, and kept finding all this stuff in it that wasn't really well-defined, etc. It bugged me. So I spent a bunch of time writing my own "version" of the book, but I couldn't get some of the proofs quite right
[05:43:02] <PlanckWalk> Because  cos^2(x + pi) = (-cos(x))^2 = cos^2(x)
[05:43:10] <tusko> I see, so the 2pi might need to be pi if the trig function is squared
[05:43:13] <PlanckWalk> laurus: I see
[05:43:33] <laurus> PlanckWalk: So I finally got sick of spinning my wheels on some of those holes and went and looked through a bunch of books to see if that content could be found elsewhere... and that's where I found this book.
[05:43:34] <PlanckWalk> tusko: Yes, when you're trying to find the shortest possible period
[05:43:52] <laurus> So I'm basically using it because of the content, not necessarily because the writing is all that good
[05:44:14] <laurus> And this was a point where I might have just basically given up. I'm assuming this area is just not the author's forte and things will be mostly okay from here on out.
[05:44:25] <PlanckWalk> Hope so! :)
[05:44:37] <laurus> Thank you... again I really appreciate your help, thank you so much.
[05:45:41] <PlanckWalk> tusko: It can also apply to a few other cases where the sign ends up not mattering.
[05:45:47] <tusko> PlanckWalk, perhaps you can also help me to understand these discrete cases. Like, the sum from -inf to inf of e^-(2t-k) * u(2t-k) where u(t) is the step function.
[05:46:12] *** Joins: vysn (~vysn@user/vysn)
[05:46:13] <tusko> Like I want to say that is not periodic because there is a real exponential, that is always changing, and is applied to each term
[05:46:58] <PlanckWalk> As in  f(t) = Sum_{k in Z} e^(2t-k) u(2t-k)?
[05:47:10] <tusko> seems right
[05:47:29] <tusko> It seems like sampling almost
[05:47:34] *** Quits: therufuser (~therufuse@p5b02e22b.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[05:47:41] <tusko> like we'll get a slice of that exponential
[05:47:45] *** Quits: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca) (Ping timeout: 256 seconds)
[05:48:10] <PlanckWalk> Well, you want to check whether or not it actually is periodic
[05:49:07] *** Joins: therufuser (~therufuse@p5b02e5be.dip0.t-ipconnect.de)
[05:49:10] <tusko> I assume not, since its exponential. won't it be increasing without bound until 0 and then decreasing without bound for positive k?
[05:49:40] <PlanckWalk> No, it's not unbounded
[05:49:53] <tusko> that's true and my bounds we're exactly right either
[05:50:15] <PlanckWalk> (Ignore the typo where I forgot the minus sign)
[05:50:25] <tusko> as long as k>2t e^(2t-k) will be increasing and after that it will be decreasing.
[05:50:42] <PlanckWalk> If k > 2t then the corresponding term is zero.
[05:51:02] <tusko> ah, ok beceaus a property of the unit step
[05:51:06] <PlanckWalk> Yes
[05:51:38] <PlanckWalk> To me this one is pretty obviously periodic
[05:51:39] <tusko> in that case, then, e^-(2t-k) is always decreasing
[05:51:44] <tusko> really?
[05:51:48] <PlanckWalk> (After I checked that it's actually well defined)
[05:52:09] <tusko> how are we to interpret this functions graph?
[05:52:45] <tusko> its zero, then at some future time k it is a decaying exponential?
[05:52:54] <PlanckWalk> No, it's not zero anywhere
[05:53:42] *** Joins: user24 (~zero@2a02:810a:1440:7304:c792:4d29:1517:d5fc)
[05:53:44] <tusko> that can't be
[05:53:50] *** Quits: user24 (~zero@2a02:810a:1440:7304:c792:4d29:1517:d5fc) (Remote host closed the connection)
[05:53:57] <tusko> It must be zero everywhere u(2t-k) is not 1
[05:54:15] <PlanckWalk> For any t, there's a value of k for which u(2t-k) is not zero.
[05:54:35] <PlanckWalk> (In fact infinitely many of them)
[05:56:00] *** Joins: Pseudocrat (~sudo@user/pseudocrat)
[05:56:03] <PlanckWalk> In particular if you let  k = floor(2t)  then  u(2t-k) = 1
[05:56:30] <PlanckWalk> (and for all lesser k as well)
[05:57:29] <tusko> I just don't understand
[05:57:43] <PlanckWalk> Well, let's take an example.  t=0.
[05:57:51] *** Quits: xff0x (~xff0x@2001:1a81:53ac:4a00:25b:5701:e54d:ee3e) (Ping timeout: 245 seconds)
[05:58:12] <PlanckWalk> f(0) = Sum_{k in Z} e^-(2*0-k) u(2*0-k)
[05:58:28] <PlanckWalk> = Sum_{k in Z} e^k u(-k)
[05:58:54] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:59:05] <PlanckWalk> The terms are all zero for k > 0, but e^k for all k <= 0.
[05:59:33] <tusko> I see because the u(-t) is a flipped u(t)
[05:59:44] *** Joins: xff0x (~xff0x@2001:1a81:53e8:2500:a319:1c51:2e8e:9977)
[05:59:50] <PlanckWalk> So you can write it as  Sum_{n=0 to inf} e^-n  using n = -k
[06:00:33] *** Quits: Pseudocrat (~sudo@user/pseudocrat) (Ping timeout: 256 seconds)
[06:01:23] <PlanckWalk> In general you can use  n = floor(2t) - k  and rewrite as a sum over n = 0 to inf.
[06:01:34] <tusko> why not just Sum_{n=-inf to 0} e^-k ?
[06:01:58] <PlanckWalk> I was just putting it in the usual form for a geometric series
[06:02:59] <PlanckWalk> But sure, if you're comfortable with series summing up from -inf then go with that :)
[06:03:03] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 256 seconds)
[06:05:03] *** Quits: fweht (uid404746@lymington.irccloud.com) (Quit: Connection closed for inactivity)
[06:05:43] *** Joins: GomJabbar (~dgdf@2607:f8f8:790:5::1:1)
[06:06:40] <Batzy> hey what's a good way to see if a word is in some lexical order up to cyclic permutation? so for example, the word XYXX would return "no" since it can be permuted (cyclically) to XXXY which is in lexical order but the word XYXY would return "yes" since there's no cyclic permutation with higher lexical order. I guess we can just check which part of the word has the longest chain of highest lexical order, and shift to that point
[06:07:03] <Batzy> yeah i guess that works actually
[06:08:19] <tusko> PlanckWalk, what is it about that original function that told you it was periodic?
[06:08:33] <PlanckWalk> The summing over all integers
[06:08:46] <tusko> It just seems to me that its graph should look approximately like a portion of e^-x
[06:08:56] <PlanckWalk> Yes, pieces of it will
[06:09:15] <PlanckWalk> The pieces betweenthe integers
[06:09:22] <Batzy> since when does "The summing over all integers" tell you something is periodic?
[06:09:45] *** Joins: frost (~frost@user/frost)
[06:09:46] <Batzy> oh i guess the actually function in question
[06:09:54] <Batzy> actual*
[06:10:36] <PlanckWalk> Yes for that function, where if you replace t with t+1/2 you get exactly the same effect as replacing k with k-1
[06:11:18] <PlanckWalk> And if you're summing over all k in Z, you're also summing over all k-1 in Z
[06:13:37] <PlanckWalk> So if it's well defined at all, it has to be periodic
[06:15:07] <PlanckWalk> I suppose I should have said "the pieces between the half-integers" back up there.
[06:18:14] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[06:19:06] <tusko> Ok, I'm really really trying to visualize this
[06:20:09] <tusko> Sum_{k in Z} e^(k-2t) u(2t-k)
[06:21:00] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[06:21:03] <tusko> this is zero until at some point u(2t-k) becomes 1 and then we start summing pieces of an exponential
[06:21:36] <tusko> but its like an exponential that keeps increasing faster
[06:21:54] <tusko> Does that seem about right?
[06:22:30] *** Quits: jero98772 (~jero98772@2800:484:1d80:d8ce:3490:26c5:1782:da8c) (Remote host closed the connection)
[06:22:49] *** Quits: cul8r (~cul8r@2601:8c3:4000:b0d0::f2bf) (Quit: abducted by aliens)
[06:30:18] <PlanckWalk> Counting downward in k, the exponentials decrease
[06:30:43] <PlanckWalk> u(2t-k) is 0 for large k, and 1 for small k
[06:31:18] *** Joins: Pseudocrat (~sudo@user/pseudocrat)
[06:31:58] <PlanckWalk> So if you're counting upward, it's more like you're summing lots of tiny exponentials that get bigger until they suddenly get cut off to zero.
[06:31:59] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[06:32:22] <PlanckWalk> (None of the terms are greater than 1)
[06:35:17] *** Quits: Pseudocrat (~sudo@user/pseudocrat) (Ping timeout: 240 seconds)
[06:36:29] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[06:38:43] *** Joins: Fairy (~Fairy@ti0004a400-5385.bb.online.no)
[06:39:45] *** Quits: millido (~millido@84.210.150.128) (Quit: ZNC 1.8.2 - https://znc.in)
[06:44:26] *** Joins: mbuf (~Shakthi@122.162.66.95)
[06:45:07] *** Quits: loadedanvils (uid128751@uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[06:45:28] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.4)
[06:52:55] *** Quits: blackfield (~blackfiel@85.255.4.218) (Ping timeout: 256 seconds)
[06:53:20] *** Joins: millido (~millido@84.210.150.128)
[06:56:04] *** Joins: blackfield (~blackfiel@85.255.4.218)
[06:59:36] *** Joins: Nistar (Nistar@gateway/vpn/protonvpn/nistar)
[06:59:53] *** Quits: Nistar (Nistar@gateway/vpn/protonvpn/nistar) (Client Quit)
[07:01:57] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[07:02:13] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[07:02:48] *** Joins: Pseudocrat (~sudo@user/pseudocrat)
[07:04:34] *** Joins: horseface (~horseface@user/horseface)
[07:05:16] *** Joins: qeed (~qeed@072-190-106-143.res.spectrum.com)
[07:05:43] *** Quits: vrp2zqL7 (~v8XhLN3K@74.5.157.96) (Quit: Quitting)
[07:06:46] *** Joins: Emet-Selch (~haise01@user/haise01)
[07:07:25] *** Quits: Pseudocrat (~sudo@user/pseudocrat) (Ping timeout: 250 seconds)
[07:08:43] *** Quits: darkapex (~darkapex@user/darkapex) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[07:09:55] *** Quits: Azem (~haise01@user/haise01) (Ping timeout: 256 seconds)
[07:10:03] *** Joins: darkapex (~darkapex@user/darkapex)
[07:11:00] *** Parts: laurus (~laurus@user/laurus) (Part)
[07:11:20] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[07:12:06] *** Joins: ppw (~ppw@user/ppw)
[07:12:44] *** Joins: ferdna (~ferdna@user/ferdna)
[07:13:10] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[07:15:39] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Quit: THE RAM IS TOO DAMN HIGH)
[07:17:29] *** Quits: horseface (~horseface@user/horseface) (Client Quit)
[07:25:32] *** Joins: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca)
[07:27:21] *** Quits: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca) (Remote host closed the connection)
[07:27:41] *** Joins: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca)
[07:31:25] *** Quits: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca) (Remote host closed the connection)
[07:31:45] *** Joins: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca)
[07:33:25] *** Quits: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca) (Remote host closed the connection)
[07:33:45] *** Joins: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca)
[07:34:29] *** Quits: johnkeats7 (~johnkeats@2804:14c:32:a0cc:c1ad:5567:c947:cef7) (Ping timeout: 250 seconds)
[07:39:55] *** Quits: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca) (Remote host closed the connection)
[07:40:16] *** Joins: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca)
[07:43:53] *** Quits: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca) (Remote host closed the connection)
[07:44:13] *** Joins: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca)
[07:45:53] *** Quits: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca) (Remote host closed the connection)
[07:46:13] *** Joins: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca)
[07:48:11] *** Quits: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca) (Remote host closed the connection)
[07:48:31] *** Joins: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca)
[07:49:22] *** Quits: beencubed (~beencubed@209.131.238.248) (Quit: Leaving)
[07:49:26] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[07:49:55] *** Joins: beencubed (~beencubed@209.131.238.248)
[07:50:29] *** Quits: ppw (~ppw@user/ppw) (Ping timeout: 256 seconds)
[07:51:13] *** Joins: Pseudocrat (~sudo@user/pseudocrat)
[07:52:53] *** Quits: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca) (Remote host closed the connection)
[07:53:13] *** Joins: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca)
[07:54:53] *** Quits: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca) (Remote host closed the connection)
[07:55:13] *** Joins: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca)
[07:55:17] *** Quits: Pseudocrat (~sudo@user/pseudocrat) (Ping timeout: 240 seconds)
[07:56:57] *** Quits: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca) (Remote host closed the connection)
[07:57:17] *** Joins: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca)
[08:00:53] *** Quits: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca) (Remote host closed the connection)
[08:01:13] *** Joins: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca)
[08:03:06] *** Quits: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca) (Remote host closed the connection)
[08:03:25] *** Joins: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca)
[08:04:04] *** Joins: slidercrank (~slidercra@user/slidercrank)
[08:20:04] *** Joins: pavlushka (~pavlushka@user/pavlushka)
[08:23:01] *** Quits: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca) (Remote host closed the connection)
[08:23:20] *** Joins: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca)
[08:25:54] *** Joins: Pseudocrat (~sudo@user/pseudocrat)
[08:26:26] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[08:26:51] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[08:27:48] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[08:28:10] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:30:11] *** Quits: Pseudocrat (~sudo@user/pseudocrat) (Ping timeout: 250 seconds)
[08:31:51] *** Quits: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca) (Remote host closed the connection)
[08:32:10] *** Joins: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca)
[08:33:50] *** Quits: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca) (Remote host closed the connection)
[08:34:10] *** Joins: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca)
[08:34:31] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 250 seconds)
[08:36:22] *** Quits: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca) (Remote host closed the connection)
[08:36:41] *** Joins: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca)
[08:40:33] *** Quits: sonny (~sonny@bras-base-london1483w-grc-41-65-94-139-157.dsl.bell.ca) (Remote host closed the connection)
[08:43:05] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[08:44:26] *** Quits: Sheilong (uid293653@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[08:46:44] *** Joins: audio (~audio@user/audio)
[08:49:57] *** Quits: lilgopher (~textual@2601:241:8000:38f0:e066:45e5:41b6:82b6) (Ping timeout: 240 seconds)
[08:56:31] *** Joins: frost (~frost@user/frost)
[08:56:35] <alphamul2> Population functions platau in the real world, that way.
[08:57:06] <isekaijin> ?
[08:57:55] <isekaijin> Aaanyway, consider the power series ring k[[x]] with two distinct topologies: (a) the discrete one, (b) the x-adic one.
[08:58:22] <isekaijin> Actually, let's give them names, say, A and B.
[08:58:43] <isekaijin> Then Spec(A) is a two-point space, as we all know.
[08:59:46] <isekaijin> Although I can't find Spec(B) formally defined in any book, I think it should morally be the formal scheme of the origin in A^1. In particular, it should only have one point - the closed point of Spec(A).
[08:59:57] <isekaijin> Is there some way to make this precise?
[09:00:45] <isekaijin> That is, I want to enlarge the domain of the Spec functor from the category of (discrete) commutative rings to the category of topological commutative rings. Is there a precise way to make sense of this?
[09:02:37] *** Quits: bosspotato (~bosspotat@user/bosspotato) (Ping timeout: 240 seconds)
[09:02:40] *** Quits: audio (~audio@user/audio) (Quit: Client closed)
[09:03:39] <alphamul2> e = 500s/(100+s) hmm
[09:06:10] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[09:08:35] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 256 seconds)
[09:12:36] *** Joins: audio (~audio@user/audio)
[09:12:57] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[09:16:17] *** Joins: Pseudocrat (~sudo@user/pseudocrat)
[09:17:37] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[09:18:15] *** Quits: emf (~emf@2620:10d:c090:400::5:b0fe) (Read error: Connection reset by peer)
[09:19:44] *** Joins: lane (~lane@89.45.224.24)
[09:20:17] *** Quits: Pseudocrat (~sudo@user/pseudocrat) (Ping timeout: 240 seconds)
[09:23:52] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-d101-c13b-d21b-fd51.res6.spectrum.com)
[09:24:49] *** Quits: soapsudsxx (~soapsudsx@209.221.40.152) (Remote host closed the connection)
[09:26:29] *** Quits: audio (~audio@user/audio) (Ping timeout: 256 seconds)
[09:34:35] *** Joins: notzmv (~zmv@user/notzmv)
[09:38:16] *** Quits: temp_user_2022 (~amit@2601:445:447f:a2f6:c0a2:d41c:2ddb:9e2e) (Ping timeout: 245 seconds)
[09:49:22] *** Joins: Pseudocrat (~sudo@user/pseudocrat)
[09:51:48] *** Joins: node1 (~hex@user/node1)
[09:53:17] *** Quits: Pseudocrat (~sudo@user/pseudocrat) (Ping timeout: 240 seconds)
[09:54:42] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[09:55:15] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[09:56:42] *** Joins: rain3 (~rain3___@2a02:2f09:d113:6d00:6f23:fba2:d834:1a7)
[10:02:41] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[10:05:08] *** Joins: Pseudocrat (~sudo@user/pseudocrat)
[10:06:32] *** Joins: [-_-] (~fractal@user/---/x-1675478)
[10:07:54] *** Joins: yesman (~BlueBlack@ppp-58-8-249-81.revip2.asianet.co.th)
[10:08:08] *** Joins: Imagine (~BlueBlack@ppp-58-8-249-81.revip2.asianet.co.th)
[10:09:08] *** Quits: yesman (~BlueBlack@ppp-58-8-249-81.revip2.asianet.co.th) (Client Quit)
[10:13:31] *** Quits: bluray (~bluray@user/zapdos) (Ping timeout: 256 seconds)
[10:14:58] *** Quits: Imagine (~BlueBlack@ppp-58-8-249-81.revip2.asianet.co.th) (Quit: Leaving)
[10:16:41] *** Quits: pavlushka (~pavlushka@user/pavlushka) (Ping timeout: 256 seconds)
[10:16:46] *** Joins: vysn (~vysn@user/vysn)
[10:21:00] *** Joins: trbp (~trbp@user/trbp)
[10:30:01] *** Quits: [-_-] (~fractal@user/---/x-1675478) (Quit: ZZZzzz?)
[10:31:21] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:f460:9388:75e8:8181)
[10:37:28] *** Quits: node1 (~hex@user/node1) (Quit: Leaving)
[10:45:57] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[10:45:57] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[10:46:25] *** Joins: node1 (~hex@user/node1)
[10:48:18] *** Quits: CombatVet (~c4@user/combatvet) (Ping timeout: 276 seconds)
[10:48:33] *** Joins: specing_ (~specing@user/specing)
[10:48:33] *** Quits: specing (~specing@user/specing) (Killed (NickServ (GHOST command used by specing_)))
[10:48:53] *** Joins: CombatVet (~c4@user/combatvet)
[10:49:02] *** Quits: dld (~davidlowr@2601:197:600:1210:942a:4683:ce04:8328) (Ping timeout: 252 seconds)
[10:50:10] *** specing_ is now known as specing
[10:51:15] *** Joins: dld (~davidlowr@73.61.8.20)
[10:51:25] *** Joins: freep (~freepppp@46.246.189.172.dsl.dyn.forthnet.gr)
[10:52:56] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[10:53:56] *** Quits: frelleck (~frelleck@user/frelleck) ()
[10:55:52] *** Quits: Boarders_ (sid425905@id-425905.lymington.irccloud.com) (*.net *.split)
[10:55:52] *** Quits: lericson (~lericson@user/lericson) (*.net *.split)
[10:55:52] *** Quits: Fangs (sid141280@id-141280.hampstead.irccloud.com) (*.net *.split)
[10:55:52] *** Quits: elichai2 (sid212594@id-212594.hampstead.irccloud.com) (*.net *.split)
[10:55:52] *** Quits: pdg (sid395042@id-395042.lymington.irccloud.com) (*.net *.split)
[10:55:52] *** Quits: leonardus (sid358597@id-358597.tinside.irccloud.com) (*.net *.split)
[10:55:52] *** Quits: bjs (sid190364@user/bjs) (*.net *.split)
[10:55:52] *** Quits: MizMahem (sid296354@user/mizmahem) (*.net *.split)
[10:55:52] *** Quits: cloudcell (sid48145@id-48145.tinside.irccloud.com) (*.net *.split)
[10:55:52] *** Quits: Etienne (~Etienne@esimon.eu) (*.net *.split)
[10:55:52] *** Quits: whatsupdoc (uid509081@hampstead.irccloud.com) (*.net *.split)
[10:55:52] *** Quits: kurfen_ (~kurfen@213.152.188.7) (*.net *.split)
[10:55:52] *** Quits: michele (~eraser@user/michele) (*.net *.split)
[10:55:52] *** Quits: econo (uid147250@user/econo) (*.net *.split)
[10:55:52] *** Quits: qbt (~qbt@user/edun) (*.net *.split)
[10:55:52] *** Quits: cheater (~Username@user/cheater) (*.net *.split)
[10:55:52] *** Quits: a0z1 (~a0z1@cpc158779-hari22-2-0-cust168.20-2.cable.virginm.net) (*.net *.split)
[10:55:52] *** Quits: orthoplex64 (~crm@70.120.0.94) (*.net *.split)
[10:55:52] *** Quits: nullcone (uid11626@helmsley.irccloud.com) (*.net *.split)
[10:55:52] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (*.net *.split)
[10:55:52] *** Quits: redlegion (sid429547@ilkley.irccloud.com) (*.net *.split)
[10:55:52] *** Quits: macaw (~macaw@87-205-47-92.adsl.inetia.pl) (*.net *.split)
[10:55:52] *** Quits: resistfascism (~jthancoc@c-73-179-2-115.hsd1.fl.comcast.net) (*.net *.split)
[10:55:52] *** Quits: NEYi (~NEYi@109.251.216.38) (*.net *.split)
[10:55:52] *** Quits: nickel8448 (~rahulwadh@147.80.76.34.bc.googleusercontent.com) (*.net *.split)
[10:55:52] *** Quits: Trashlord (~trash@user/trashlord) (*.net *.split)
[10:55:52] *** Quits: Oni^ (oni@kapsi.fi) (*.net *.split)
[10:55:52] *** Quits: X-Scale (~ARM@218.92.108.93.rev.vodafone.pt) (*.net *.split)
[10:55:52] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (*.net *.split)
[10:55:52] *** Quits: `join_subline (~join_subl@135-23-248-130.cpe.pppoe.ca) (*.net *.split)
[10:55:52] *** Quits: hyiltiz (~quassel@31.220.5.250) (*.net *.split)
[10:55:52] *** Quits: FragmentedCurve (~FC@pool-100-2-232-17.nycmny.fios.verizon.net) (*.net *.split)
[10:55:52] *** Quits: rtsn (~nstr@user/rtsn) (*.net *.split)
[10:55:52] *** Quits: Hafydd (~Hafydd@user/hafydd) (*.net *.split)
[10:55:52] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (*.net *.split)
[10:55:52] *** Quits: towel (~towel@user/towel) (*.net *.split)
[10:55:52] *** Quits: Duckle (~Duckle@user/duckle) (*.net *.split)
[10:55:52] *** Quits: Leonarbro (~Leonet@user/leonarbro) (*.net *.split)
[10:55:52] *** Quits: biberao (~Unknown@user/biberao) (*.net *.split)
[10:55:52] *** Quits: mawk (~mawk@wireguard/contributor/mawk) (*.net *.split)
[10:55:52] *** Quits: alphamul2 (~nibbles@205.185.116.30) (*.net *.split)
[10:55:52] *** Quits: swistak (~swistak@185.21.216.141) (*.net *.split)
[10:55:52] *** Quits: davros (~davros@host86-185-61-1.range86-185.btcentralplus.com) (*.net *.split)
[10:55:52] *** Quits: Nitrousoxide (~msdos@user/nitrousoxide) (*.net *.split)
[10:55:52] *** Quits: Dotz0cat (~Dotz0cat@h55.84.187.173.dynamic.ip.windstream.net) (*.net *.split)
[10:55:52] *** Quits: wz1000 (~zubin@static.11.113.47.78.clients.your-server.de) (*.net *.split)
[10:55:52] *** Quits: Pollion (~bombar@crans/pollion) (*.net *.split)
[10:55:52] *** Quits: dskull (~dskull@user/dskull) (*.net *.split)
[10:55:52] *** Quits: fbiagent (~fbiagent@user/fbiagent) (*.net *.split)
[10:55:52] *** Quits: justGhost (~justache@user/justache) (*.net *.split)
[10:55:52] *** Quits: bgs (~bgs@cpe-212-85-160-171.cable.telemach.net) (*.net *.split)
[10:55:52] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (*.net *.split)
[10:55:52] *** Quits: Bobathan (~admin@cpe-65-29-248-157.wi.res.rr.com) (*.net *.split)
[10:55:52] *** Quits: Z-module (~user@aero-astro-estates.mit.edu) (*.net *.split)
[10:55:52] *** Quits: Zairex (~Teekoo@178.62.135.229) (*.net *.split)
[10:55:52] *** Quits: webstran- (~webstrand@user/webstrand) (*.net *.split)
[10:55:52] *** Quits: llorllale (~llorllale@198.98.119.85) (*.net *.split)
[10:55:52] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (*.net *.split)
[10:55:52] *** Quits: jkovac1 (~jkovac1@user/jkovac1) (*.net *.split)
[10:55:52] *** Quits: AviKav (~AviKav@pool-71-191-176-243.washdc.fios.verizon.net) (*.net *.split)
[10:55:52] *** Quits: nejimban (~ben@user/nejimban) (*.net *.split)
[10:55:52] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (*.net *.split)
[10:55:52] *** Quits: grindhold (~quassel@mail.skarphed.org) (*.net *.split)
[10:55:52] *** Quits: juri_ (~juri@178.63.35.222) (*.net *.split)
[10:55:52] *** Quits: voiceofreason (~voiceofre@207.148.10.181) (*.net *.split)
[10:55:52] *** Quits: DefiantN (~DefiantN@user/defiantn) (*.net *.split)
[10:55:52] *** Quits: drdo (~drdo@roach0.drdo.eu) (*.net *.split)
[10:55:52] *** Quits: sek (~sek@user/sek) (*.net *.split)
[10:55:52] *** Quits: carter (sid14827@helmsley.irccloud.com) (*.net *.split)
[10:55:52] *** Quits: yawkat (~yawkat@cats.coffee) (*.net *.split)
[10:55:53] *** Quits: flynn (~mcbloch@user/flynn) (*.net *.split)
[10:56:08] *** Joins: ppw (~ppw@user/ppw)
[10:56:31] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[10:58:05] *** Joins: whatsupdoc (uid509081@hampstead.irccloud.com)
[10:58:05] *** Joins: kurfen_ (~kurfen@213.152.188.7)
[10:58:05] *** Joins: michele (~eraser@user/michele)
[10:58:05] *** Joins: econo (uid147250@user/econo)
[10:58:05] *** Joins: qbt (~qbt@user/edun)
[10:58:05] *** Joins: cheater (~Username@user/cheater)
[10:58:05] *** Joins: a0z1 (~a0z1@cpc158779-hari22-2-0-cust168.20-2.cable.virginm.net)
[10:58:05] *** Joins: orthoplex64 (~crm@70.120.0.94)
[10:58:05] *** Joins: nullcone (uid11626@helmsley.irccloud.com)
[10:58:05] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[10:58:05] *** Joins: redlegion (sid429547@ilkley.irccloud.com)
[10:58:05] *** Joins: macaw (~macaw@87-205-47-92.adsl.inetia.pl)
[10:58:05] *** Joins: resistfascism (~jthancoc@c-73-179-2-115.hsd1.fl.comcast.net)
[10:58:05] *** Joins: NEYi (~NEYi@109.251.216.38)
[10:58:05] *** Joins: nickel8448 (~rahulwadh@147.80.76.34.bc.googleusercontent.com)
[10:58:05] *** Joins: Trashlord (~trash@user/trashlord)
[10:58:05] *** Joins: Oni^ (oni@kapsi.fi)
[10:58:05] *** Joins: X-Scale (~ARM@218.92.108.93.rev.vodafone.pt)
[10:58:05] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[10:58:05] *** Joins: `join_subline (~join_subl@135-23-248-130.cpe.pppoe.ca)
[10:58:05] *** Joins: hyiltiz (~quassel@31.220.5.250)
[10:58:05] *** Joins: biberao (~Unknown@user/biberao)
[10:58:05] *** Joins: FragmentedCurve (~FC@pool-100-2-232-17.nycmny.fios.verizon.net)
[10:58:05] *** Joins: rtsn (~nstr@user/rtsn)
[10:58:05] *** Joins: Hafydd (~Hafydd@user/hafydd)
[10:58:05] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[10:58:05] *** Joins: towel (~towel@user/towel)
[10:58:05] *** Joins: Duckle (~Duckle@user/duckle)
[10:58:05] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[10:58:05] *** Joins: mawk (~mawk@wireguard/contributor/mawk)
[10:58:05] *** Joins: alphamul2 (~nibbles@205.185.116.30)
[10:58:05] *** Joins: swistak (~swistak@185.21.216.141)
[10:58:05] *** Joins: davros (~davros@host86-185-61-1.range86-185.btcentralplus.com)
[10:58:05] *** Joins: Nitrousoxide (~msdos@user/nitrousoxide)
[10:58:05] *** Joins: Dotz0cat (~Dotz0cat@h55.84.187.173.dynamic.ip.windstream.net)
[10:58:05] *** Joins: wz1000 (~zubin@static.11.113.47.78.clients.your-server.de)
[10:58:05] *** Joins: Pollion (~bombar@crans/pollion)
[10:58:05] *** Joins: dskull (~dskull@user/dskull)
[10:58:05] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[10:58:05] *** Joins: justGhost (~justache@user/justache)
[10:58:05] *** Joins: bgs (~bgs@cpe-212-85-160-171.cable.telemach.net)
[10:58:05] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[10:58:05] *** Joins: Bobathan (~admin@cpe-65-29-248-157.wi.res.rr.com)
[10:58:05] *** Joins: Z-module (~user@aero-astro-estates.mit.edu)
[10:58:05] *** Joins: Zairex (~Teekoo@178.62.135.229)
[10:58:05] *** Joins: webstran- (~webstrand@user/webstrand)
[10:58:05] *** Joins: llorllale (~llorllale@198.98.119.85)
[10:58:05] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[10:58:05] *** Joins: jkovac1 (~jkovac1@user/jkovac1)
[10:58:05] *** Joins: AviKav (~AviKav@pool-71-191-176-243.washdc.fios.verizon.net)
[10:58:05] *** Joins: nejimban (~ben@user/nejimban)
[10:58:05] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[10:58:05] *** Joins: grindhold (~quassel@mail.skarphed.org)
[10:58:05] *** Joins: juri_ (~juri@178.63.35.222)
[10:58:05] *** Joins: voiceofreason (~voiceofre@207.148.10.181)
[10:58:05] *** Joins: DefiantN (~DefiantN@user/defiantn)
[10:58:05] *** Joins: drdo (~drdo@roach0.drdo.eu)
[10:58:05] *** Joins: sek (~sek@user/sek)
[10:58:05] *** Joins: carter (sid14827@helmsley.irccloud.com)
[10:58:05] *** Joins: yawkat (~yawkat@cats.coffee)
[10:58:05] *** Joins: flynn (~mcbloch@user/flynn)
[10:58:05] *** Joins: Boarders_ (sid425905@id-425905.lymington.irccloud.com)
[10:58:05] *** Joins: lericson (~lericson@user/lericson)
[10:58:05] *** Joins: Fangs (sid141280@id-141280.hampstead.irccloud.com)
[10:58:05] *** Joins: elichai2 (sid212594@id-212594.hampstead.irccloud.com)
[10:58:05] *** Joins: pdg (sid395042@id-395042.lymington.irccloud.com)
[10:58:05] *** Joins: leonardus (sid358597@id-358597.tinside.irccloud.com)
[10:58:05] *** Joins: bjs (sid190364@user/bjs)
[10:58:05] *** Joins: MizMahem (sid296354@user/mizmahem)
[10:58:05] *** Joins: cloudcell (sid48145@id-48145.tinside.irccloud.com)
[10:58:05] *** Joins: Etienne (~Etienne@esimon.eu)
[10:58:08] *** Quits: leonardus (sid358597@id-358597.tinside.irccloud.com) (Max SendQ exceeded)
[10:58:39] *** Quits: michele (~eraser@user/michele) (Max SendQ exceeded)
[10:59:11] *** Joins: michele (~eraser@user/michele)
[10:59:26] *** Quits: NEYi (~NEYi@109.251.216.38) (Remote host closed the connection)
[10:59:50] *** Joins: NEYi (~NEYi@109.251.216.38)
[10:59:57] *** Joins: leonardus (sid358597@tinside.irccloud.com)
[11:06:44] *** Joins: emf (~emf@2620:10d:c090:400::5:d558)
[11:09:27] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[11:16:44] *** Joins: [-_-] (~fractal@user/---/x-1675478)
[11:18:46] *** Joins: hex_ (~hex@43.230.42.213)
[11:19:09] *** Joins: andreasbuhr (~quassel@p549dbab5.dip0.t-ipconnect.de)
[11:20:17] *** Quits: node1 (~hex@user/node1) (Ping timeout: 240 seconds)
[11:20:51] *** Joins: eijcejcijosjcosd (~jdcojsopc@38.143.66.55)
[11:22:58] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[11:25:43] *** Quits: dskull (~dskull@user/dskull) (Ping timeout: 256 seconds)
[11:26:29] *** Quits: hex_ (~hex@43.230.42.213) (Quit: Leaving)
[11:27:14] *** Joins: evilscreww (~evilscrew@user/evilscreww)
[11:27:19] *** Joins: xkuru (~xkuru@user/xkuru)
[11:27:45] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 256 seconds)
[11:28:54] *** Quits: eijcejcijosjcosd (~jdcojsopc@38.143.66.55) (Remote host closed the connection)
[11:29:10] *** Joins: MajorBiscuit (~MajorBisc@c-001-015-052.client.tudelft.eduvpn.nl)
[11:29:39] *** Joins: dskull (~dskull@user/dskull)
[11:31:30] *** Joins: palasso (~palasso@user/palasso)
[11:32:57] *** Quits: [-_-] (~fractal@user/---/x-1675478) (Quit: rebooting)
[11:33:02] *** Quits: gnoo (gnoo@user/gnoo) (Ping timeout: 240 seconds)
[11:33:19] *** Quits: dskull (~dskull@user/dskull) (Client Quit)
[11:33:26] *** Joins: pavlushka (~pavlushka@user/pavlushka)
[11:34:53] *** Quits: lane (~lane@89.45.224.24) (Ping timeout: 256 seconds)
[11:36:41] *** Joins: blackk (~J@2a02:8389:2301:8980:a401:1830:63a2:8c84)
[11:40:02] <blackk> I need a help in group theory
[11:40:23] <blackk> how do you prove that SO(3,R) is not isomorphic to SL(2,R)/{-I,I}
[11:40:27] <blackk> R is the real numbers
[11:40:54] *** Joins: [-_-] (~fractal@user/---/x-1675478)
[11:41:31] <blackk> originally I wanted to prove SO(3) is not isomorphic to GL(2,R)/R^* but GL(2,R)/R* is isomorphic to SL(2,R)/{-I,I} and I think I can deal with SL easier
[11:41:36] *** Quits: priestly (~sonnius@zen-c6-rtp1g3.rtp.zs.ncren.net) (Ping timeout: 245 seconds)
[11:42:27] *** Joins: gnoo (gnoo@user/gnoo)
[11:42:51] *** Joins: Maturion (~Maturion@p200300ede71a8e003896c4630d493e6d.dip0.t-ipconnect.de)
[11:54:47] *** Emet-Selch is now known as Azem
[11:56:28] *** Quits: [-_-] (~fractal@user/---/x-1675478) (Quit: ZZZzzz?)
[11:57:05] *** Joins: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de)
[12:02:06] *** Joins: qu4nt1n (~qu4nt1n@78.198.214.34)
[12:07:01] *** Quits: qu4nt1n (~qu4nt1n@78.198.214.34) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[12:07:17] *** Quits: emf (~emf@2620:10d:c090:400::5:d558) (Ping timeout: 240 seconds)
[12:07:18] *** Joins: [-_-] (~fractal@user/---/x-1675478)
[12:11:38] *** Joins: TheCatBehemoth (~TheCatBeh@2001:8a0:f55d:b200:ed0d:e2fd:2045:69d8)
[12:16:34] *** Joins: Guest33Zemansky (~Guest33Ze@2001:8a0:65b0:900:7d7e:18cb:463:d637)
[12:17:18] *** Joins: dskull (~dskull@user/dskull)
[12:19:34] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Quit: Leaving)
[12:19:50] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[12:20:48] *** Quits: evilscreww (~evilscrew@user/evilscreww) (Quit: Connection closed)
[12:23:03] *** Quits: xff0x (~xff0x@2001:1a81:53e8:2500:a319:1c51:2e8e:9977) (Ping timeout: 256 seconds)
[12:23:56] *** Joins: xff0x (~xff0x@2001:1a81:53e8:2500:31e6:f5f6:6492:6bc2)
[12:27:49] *** Joins: evilscreww (~evilscrew@user/evilscreww)
[12:27:55] *** Joins: SGautam (uid286066@ilkley.irccloud.com)
[12:31:42] *** Joins: callq (~callq@2409:4062:2e9e:2081:3c70:5be0:414d:6151)
[12:34:27] *** Joins: x_kuru (~xkuru@user/xkuru)
[12:34:58] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[12:35:21] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[12:36:37] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 240 seconds)
[12:43:23] <kamil> one idea is to embed SL(2) into SO(3) and show it is not onto
[12:44:35] <blackk> well the first one is PGL(2) , but that is not isomorphic to SL(2)/{-I,I} it seems
[12:44:56] <Pajus> 5+5 = 10 ?
[12:45:02] <blackk> I know SO(3) is simple
[12:45:08] <blackk> and I am told PGL(2) is not
[12:45:17] <blackk> so I am supposing PSL(2) is a normal subgroup of it
[12:45:23] <blackk> but I can't figure out why
[12:45:59] <blackk> and the answer to why PSL(2) is not exactly PGL(2) is probably a longer thing
[12:46:10] <blackk> for the real numbers
[12:48:29] *** Quits: [-_-] (~fractal@user/---/x-1675478) (Quit: rebooting)
[12:48:35] <kamil> hmm, you can embed matrix A size 2x2 into size 3x3 by putting 1 at position 3x3
[12:50:12] <blackk> but the question of isomprphism does not fix your "embedding" the one you have in mind is just a particular one
[12:50:25] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:50:32] <kamil> weel, it is into but not on
[12:50:33] <blackk> I can always have a map between two sets of the same cardinality that is not onto but the sets are isomorphic
[12:50:54] <blackk> meaning I need to find another map :)
[12:51:07] *** Joins: Klinda (~superleag@user/klinda)
[12:51:31] <blackk> its a question of existence and not "for all"
[12:52:56] * PlanckWalk reads back a bit
[12:53:27] <kamil> hhmm, maybe if u can show that SL(2)/{-1,1} is not simple ...
[12:53:42] <blackk> But it is :)
[12:55:18] <blackk> I made a mistake
[12:55:36] <blackk> PSL(2) or SL(2)/{-1,1} is apparently not PGL(2) or GL(2)/R*
[12:55:51] <blackk> we have to show PGL(2) is not simple
[12:56:08] *** Joins: Simplar (~quassel@188.163.93.241)
[12:56:45] *** Joins: wakeup (~wakeup@user/wakeup)
[12:57:18] <wakeup> p(a, b | c, d) = p(a | b, c, d) p(b | c, d)
[12:57:20] <wakeup> right?
[12:58:57] *** Joins: [-_-] (~fractal@user/---/x-1675478)
[13:00:25] *** Quits: [-_-] (~fractal@user/---/x-1675478) (Client Quit)
[13:00:40] <PlanckWalk> Yes, as you can verify by expressing them in terms of non-conditional probabilities
[13:00:51] <PlanckWalk> p(ab|cd) = p(abcd) / p(cd)
[13:00:54] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0a8-31.dhcp.inet.fi)
[13:01:46] <PlanckWalk> p(a|bcd) p(b|cd) = [p(abcd) / p(bcd)] [p(bcd) / p(cd)] = p(abcd) / p(cd).
[13:02:24] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:02:41] <PlanckWalk> Or just considering the subspace 'cd'
[13:08:52] *** Quits: a0z1 (~a0z1@cpc158779-hari22-2-0-cust168.20-2.cable.virginm.net) (Quit: Leaving)
[13:09:00] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:f460:9388:75e8:8181) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:09:31] *** Quits: whatsupdoc (uid509081@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[13:09:40] *** Parts: qbt (~qbt@user/edun) ()
[13:11:49] *** Joins: [-_-] (~fractal@user/---/x-1675478)
[13:13:43] *** Quits: Guest33Zemansky (~Guest33Ze@2001:8a0:65b0:900:7d7e:18cb:463:d637) (Ping timeout: 256 seconds)
[13:22:16] *** Joins: rendar (~rendar@user/rendar)
[13:22:27] *** Quits: rtsn (~nstr@user/rtsn) (Ping timeout: 256 seconds)
[13:22:32] *** Joins: node1 (~hex@user/node1)
[13:22:34] <rendar> why wolfram alpha says integral of 1/ln x is li(x) ? what is that function?
[13:23:11] <Franciman> rendar: it's defined as the integral of 1/ln x
[13:23:12] <Franciman> :D
[13:23:13] *** Quits: node1 (~hex@user/node1) (Remote host closed the connection)
[13:23:28] <rendar> lol, ok
[13:23:33] <pavonia> https://en.wikipedia.org/wiki/Logarithmic_integral_function
[13:23:41] <Franciman> basically it is helpful in other computations
[13:23:43] <Franciman> so we give it a name
[13:23:52] <Franciman> and it is super hard to compute
[13:23:56] *** Joins: rtsn (~nstr@h-155-4-221-229.NA.cust.bahnhof.se)
[13:24:14] <Franciman> so we keep the name
[13:24:20] <Franciman> not the value
[13:24:25] *** Joins: plankster_ (~plankster@user/plankers)
[13:24:37] *** Quits: plankster (~plankster@user/plankers) (Ping timeout: 240 seconds)
[13:25:22] <rendar> i see
[13:25:26] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[13:25:50] *** Joins: mickey8 (~user@user/mickey)
[13:28:05] *** Joins: horseface (~horseface@user/horseface)
[13:28:19] *** Joins: drogas (~drogas@jump2.jet.uk)
[13:35:34] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:7da5:59e:42b2:ced5)
[13:42:52] *** Quits: evilscreww (~evilscrew@user/evilscreww) (Quit: fuck this)
[13:45:09] *** Joins: walterwhip (~www@user/walterwhip)
[13:46:05] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[13:46:20] *** Joins: Guest33Zemansky (~Guest33Ze@bl5-233-220.dsl.telepac.pt)
[13:46:25] *** Joins: qu4nt1n (~qu4nt1n@78.198.214.34)
[13:48:18] *** Quits: qu4nt1n (~qu4nt1n@78.198.214.34) (Client Quit)
[13:49:45] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[13:59:37] *** Quits: esther (~esther@24-155-112-236.dyn.grandenetworks.net) (Ping timeout: 240 seconds)
[14:03:01] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[14:03:09] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[14:03:16] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[14:06:50] <tom__> What does {V_i : i \in I } is an indexed family of closed subsets of X mean?
[14:07:01] <tom__> Is an indexing set just a collection of natural numbers
[14:07:57] *** Joins: ko (~i.am@user/marlboro)
[14:09:51] <PlanckWalk> Coudl be any set
[14:10:36] <tom__> Surely it doesnt make sense to have an index being a fraction?
[14:10:38] <PlanckWalk> It really just means "there exists a function that maps elements of I to sets"
[14:11:02] <PlanckWalk> Though in this case the sets are closed subsets of X
[14:11:14] <tom__> Hmm im confused
[14:11:32] <PlanckWalk> And sure, you can index with fractions
[14:11:39] <tom__> ok
[14:11:49] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[14:11:53] <PlanckWalk> E.g. you might say that V_x is the interval [0,x]
[14:12:09] <PlanckWalk> So V_{1/2} is the real interval [0,1/2]
[14:12:25] <PlanckWalk> And V_pi is [0,pi]
[14:12:38] *** Quits: kmh_ (~kmh@94.31.106.215) (Quit: Leaving)
[14:12:44] <tom__> so V is a function?
[14:12:53] <PlanckWalk> if you like to think of it as one, yes
[14:12:59] <tom__> that we apply i's to and get sets
[14:13:14] <PlanckWalk> Yep, it's just another notation
[14:13:30] <PlanckWalk> Or a function-like thing in some cases
[14:13:54] <tom__> Ok thanks
[14:13:59] <tom__> This is in the context of compactness
[14:14:49] <tom__> So I am guessing that indexed family is used in the definition because we need a very general way of contructing sets of sets
[14:15:24] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:16:42] <tom__> What are good ways of familiarising oneself with compactness?
[14:17:09] <tom__> Are there any illuminating topologies to consider
[14:19:15] <mycroftiv> basic cantor set infinite binary tree
[14:20:35] *** Quits: Guest33Zemansky (~Guest33Ze@bl5-233-220.dsl.telepac.pt) (Ping timeout: 256 seconds)
[14:21:11] *** Quits: Batzy (~quassel@user/batzy) (Ping timeout: 245 seconds)
[14:21:45] *** Joins: Batzy (~quassel@user/batzy)
[14:24:11] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:25:07] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:25:30] *** Lord_of_Life_ is now known as Lord_of_Life
[14:26:27] *** Joins: esther (~esther@2607:fb90:5fe0:f802:7ad3:db2e:672e:5473)
[14:27:54] *** Joins: kmh (~kmh@2a00:6020:5004:6800:460a:ef03:e89d:7820)
[14:30:37] *** Quits: esther (~esther@2607:fb90:5fe0:f802:7ad3:db2e:672e:5473) (Ping timeout: 240 seconds)
[14:31:56] *** Joins: esther (~esther@24-155-112-236.dyn.grandenetworks.net)
[14:32:15] <PlanckWalk> tom__: The simplest and motivating example is closed an bounded real (or Euclidean in general) sets
[14:32:50] <PlanckWalk> Like real intervals
[14:33:43] *** Quits: blackk (~J@2a02:8389:2301:8980:a401:1830:63a2:8c84) (Quit: Leaving)
[14:34:25] <tom__> Thanks for the suggestions!
[14:34:32] <PlanckWalk> There are a bunch of theorems on closed intervals that generalize to compact sets
[14:35:00] <PlanckWalk> Which is pretty amazing since there are some really bizarre compact sets
[14:35:07] <tom__> So what aspect of finiteness is compactness capturing?
[14:36:04] <PlanckWalk> Eh, the compactness aspect? ;-)
[14:38:35] <tom__> :)
[14:39:55] *** Joins: Oli (~Unknown@user/oli)
[14:40:05] *** Quits: src (~src@user/src) (Quit: Leaving)
[14:40:37] *** Quits: [-_-] (~fractal@user/---/x-1675478) (Quit: ZZZzzz?)
[14:40:38] *** Joins: seninha (~seninha@user/seninha)
[14:40:55] *** Joins: [-_-] (~fractal@user/---/x-1675478)
[14:41:03] *** Joins: Kaylah (~Kaylah@84-198-141-54.access.telenet.be)
[14:43:36] <tom__> So the difference lies in going from points to sets
[14:44:12] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0a8-31.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:44:22] <tom__> Because compact spaces permit infinite elements in the space whereby there is a finite way of separating points
[14:45:29] *** Joins: DnzAtWrk (~DnzAtWrk@1408.pc.puv.fi)
[14:48:09] <wakeup> PlanckWalk I think I understand this: p(ab|cd) = p(abcd) / p(cd). However, I have a question. Here, the trick to compute these distributions or probabilities is to consider e.g. cd a single event, which we can denote by e, i.e. cd = e. So, cd is basically a shorthand for c*d, but what does that mean? If c and d are events, then it means that we
[14:48:10] <wakeup> assume that c and d happen at the same time. Right? If you wanted to be verbose, how would you write cd to emphasize this idea? "c and d"? Can we use "and" here? I guess we should use "union" because events are sets?
[14:48:21] *** Quits: horseface (~horseface@user/horseface) (Client Quit)
[14:49:08] <PlanckWalk> It's actually intersection in this case
[14:49:33] <PlanckWalk> The set of outcomes that are in both events is the intersection.
[14:49:56] <wakeup> yes, intersection, not union
[14:49:57] <wakeup> right
[14:50:09] <PlanckWalk> "Same time" doesn't really mean anything
[14:50:21] <PlanckWalk> Events can refer to things that happen at different times
[14:50:30] <wakeup> but why are "and" and intersection of sets used interchangeably? Shouldn't we use "and" for logical operations?
[14:50:46] <PlanckWalk> Logical operations and set membership are extremely closely linked
[14:51:57] *** Joins: walterwhip (~www@user/walterwhip)
[14:52:29] <PlanckWalk> {x | x in A ∧ x in B} = {x | x in A} ∩ {x | x in B}
[14:52:33] *** Quits: walterwhip (~www@user/walterwhip) (Client Quit)
[14:52:40] <PlanckWalk> (By definition, essentially)
[14:53:26] <PlanckWalk> Similarly for union, set difference, etc
[14:55:10] <wakeup> yea, I understand that, but why can we use "and" in x in A and x in B?
[14:55:19] <wakeup> x in A is some kind of logical operation indeed
[14:55:38] <wakeup> but it's not immediately clear why and can be used here
[14:55:46] <wakeup> I guess I don't know when we can use land
[14:55:52] <wakeup> in generral
[15:00:15] *** Joins: Guest33Zemansky (~Guest33Ze@2001:8a0:65b0:900:d1bd:9ed3:1cae:22a3)
[15:02:13] *** Quits: calcmandan (~quassel@user/calcmandan) (Quit: Visit me at: gopher://gcpp.world)
[15:02:51] *** Joins: calcmandan (~quassel@user/calcmandan)
[15:04:05] <[itchyjunk]> https://openai.com/blog/formal-math/
[15:04:46] *** Joins: aqua (~aqua@user/aqua)
[15:04:48] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[15:05:36] *** Quits: Guest33Zemansky (~Guest33Ze@2001:8a0:65b0:900:d1bd:9ed3:1cae:22a3) (Quit: Client closed)
[15:05:45] *** Joins: plankster (~plankster@user/plankers)
[15:06:43] *** Quits: plankster_ (~plankster@user/plankers) (Ping timeout: 256 seconds)
[15:07:07] *** aqua is now known as kish
[15:07:19] *** kish is now known as kish`
[15:08:41] *** Quits: [-_-] (~fractal@user/---/x-1675478) (Quit: ZZZzzz?)
[15:08:47] <wakeup> let's say you have p(a | b, c, d). Is there a way to get rid of one of the conditions (without, of course, affecting the probability)? In other words, can we write p(a | b, c, d) as e.g. p(a | c, d) * ...?
[15:10:42] <wakeup> I think this is only possible if b does not affect a
[15:10:55] <wakeup> i.e. a and b are independent
[15:10:57] <wakeup> like
[15:11:07] <wakeup> p(a | b) = p(a) only when a and b are indepenent
[15:11:54] *** Quits: drogas (~drogas@jump2.jet.uk) (Quit: Connection closed)
[15:13:13] *** Joins: DnzAtWrk3 (~DnzAtWrk@mobile-access-6df0a8-31.dhcp.inet.fi)
[15:13:52] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[15:16:07] *** Quits: DnzAtWrk (~DnzAtWrk@1408.pc.puv.fi) (Ping timeout: 256 seconds)
[15:16:51] *** Quits: TheCatBehemoth (~TheCatBeh@2001:8a0:f55d:b200:ed0d:e2fd:2045:69d8) (Quit: bbl)
[15:17:17] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[15:17:36] *** Joins: bitd (~bitd@user/bitd)
[15:20:43] <PlanckWalk> Yes, you'll need to know much more about the relation between the events, such as independence.
[15:21:11] <PlanckWalk> You need more than just a,b being independent
[15:22:03] <PlanckWalk> That just tells you that P(ab) = P(a) P(b), nothing about P(abcd) vs P(acd)
[15:23:05] <PlanckWalk> Onc eyou have multiple events you need lots of independence relations to get very far
[15:31:30] *** Quits: DnzAtWrk3 (~DnzAtWrk@mobile-access-6df0a8-31.dhcp.inet.fi) (Read error: Connection reset by peer)
[15:32:36] *** Joins: Emet-Selch (~haise01@user/haise01)
[15:32:54] *** Emet-Selch is now known as haise01
[15:32:58] *** Joins: DnzAtWrk3 (~DnzAtWrk@mobile-access-6df0a8-31.dhcp.inet.fi)
[15:36:17] *** Quits: Azem (~haise01@user/haise01) (Ping timeout: 240 seconds)
[15:37:08] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[15:37:12] <wakeup> PlanckWalk So, what do I need to have p(a | b, c, d) = p(a | c, d)?
[15:38:57] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[15:40:26] <PlanckWalk> b independent of both a and cd would suffice
[15:41:13] <wakeup> why?
[15:41:22] <wakeup> can you explain why the dependence on cd comes into play?
[15:41:54] <wakeup> sure, p(a b | c, d) = p(a | b, c, d) p(b | c, d)
[15:42:15] <PlanckWalk> P(abcd) / P(bcd) = P(acd) P(b) / (P(b) P(cd)) = P(acd) / P(cd) = P(a|cd)
[15:42:31] <wakeup> but that just tells us: p(a b | c, d) = p(a | c, d) p(b)
[15:42:48] <PlanckWalk> Using independence of b from acd in the numerator and b from cd in the denominator
[15:44:15] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[15:46:26] *** Joins: Koen (~Koen@158.244.88.92.rev.sfr.net)
[15:47:47] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:47:58] *** Quits: wakeup (~wakeup@user/wakeup) (Quit: Client closed)
[15:48:25] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 256 seconds)
[15:49:28] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Quit: Leaving)
[15:50:24] *** Joins: yyy (~yyy@5.177.130.167)
[15:54:29] <yyy> Hello, i need help with my school project.I need to simulate the flight of a rocket with 2DoF over the X and Z axes. I've been searching for the formula for a while, but I've only been able to find the formula for the 3-degrees-of-freedom flight simulation. I would be very grateful if you could help. Thank you.
[15:54:52] *** Joins: wakeup (~wakeup@user/wakeup)
[15:56:21] <wakeup> PlanckWalk Why P(abcd) = P(acd) P(b)?
[15:56:53] <PlanckWalk> I posited that b was independent of all combinations of a with cd, including acd
[15:57:31] <PlanckWalk> I.e. P(b) = P(b|a) = P(b|~a) = P(b|acd) = ... etc
[15:58:09] <PlanckWalk> Though I guess you could just weaken it to b being separately independent of acd and of cd.
[15:58:28] <wakeup> I am not understanding
[15:58:35] <wakeup> I am not understanding why we cannot do what I said
[15:58:41] <PlanckWalk> Independence sucks with multiple variables :-p
[15:59:13] <wakeup> if b is indepdenent of a, then P(b) = P(b|a)
[15:59:18] <wakeup> ok, until tere I understand
[15:59:31] <wakeup> but I don't understand this P(b) = P(b|a) = P(b|~a)
[15:59:42] <wakeup> or P(b) = P(b|a) = P(b|acd)
[15:59:49] <PlanckWalk> Well, that part you can derive just from P(b) = P(b|a)
[15:59:51] <wakeup> here you're assming that be is independent of acd
[15:59:54] <wakeup> but why?
[16:00:00] <PlanckWalk> "I posited that b was independent of all combinations of a with cd, including acd"
[16:00:07] <wakeup> but why are you assuming this?
[16:00:11] <wakeup> why is this needed?
[16:00:14] <PlanckWalk> So I can derive the result you wanted
[16:00:23] <PlanckWalk> And why it was needed is in the derivation
[16:00:41] <greenbagels> yyy: I think most people here would be averse to pointing you towards just a formula rather than trying to get you to understand the problem
[16:00:51] <PlanckWalk> And as I said, you probably could just weaken it to b being separately independent of acd and of cd.
[16:00:58] *** Quits: Simplar (~quassel@188.163.93.241) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[16:01:02] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[16:01:03] <wakeup> you derived P(a|cd)
[16:01:34] <PlanckWalk> Yes
[16:01:41] <PlanckWalk> Since that's what you wanted.
[16:03:25] <confuzeus> P(a|cd) is the same as P(a|c,d) in case you are not awoke to it
[16:03:35] <PlanckWalk> You asked "what do I need to have p(a | b, c, d) = p(a | c, d)"
[16:03:45] <PlanckWalk> I gave a condition that works
[16:03:49] <wakeup> confuzeus I know that
[16:04:12] <confuzeus> great.
[16:04:34] <PlanckWalk> I mean really the simplest condition for p(a | b, c, d) = p(a | c, d) is that p(a | b, c, d) = p(a | c, d), but I figured since you were talking about independence that you'd want something to do with independence  :-p
[16:05:05] <yyy> greenbagels: I thought that if I learned the formula, I would understand. It will be much better if I understand the logic because in the second step of my project I need to simulate 6 degrees of freedom flight.
[16:05:46] <greenbagels> yyy: so when you say a rocket, do you very much mean a rocket?
[16:05:50] <PlanckWalk> 6DOF simulation is maybe a hundred times harder :-p
[16:06:05] <greenbagels> With mass and fuel and thrust and all that
[16:06:07] <PlanckWalk> Due to all sorts of fun nonlinearities in rotational dynamics
[16:06:59] <greenbagels> PlanckWalk: a rocket with nonholonomic constraints :~)
[16:07:28] <greenbagels> and 6 dof
[16:07:41] <yyy> greenbagels: no, we're making a Rocket for a competition. and we need to simulate flight in the competition report.
[16:08:01] *** Quits: AimHere (~David@vpn-fn-227.net.ed.ac.uk) (Ping timeout: 256 seconds)
[16:09:02] <greenbagels> yyy: is this for a physics class?
[16:09:26] <greenbagels> ( in any case i think moving to ##physics might be a good plan )
[16:10:03] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[16:12:08] <yyy> greenbagels: There is a competition called Teknofest in my country. I am a 2nd high school student. We don't have many problems other than finding the formulas for the necessary operations for the report. We haven't been able to find a source that we can understand on the internet yet. The circuit board and rocket designs are finished but we have some equations to simulate with simulink. It is a little difficult for us to understand.
[16:12:42] <yyy> greenbagphysics channel. Thank you.
[16:13:07] *** Quits: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[16:13:33] *** Joins: baracurda_ClassN (~baracurda@gateway/tor-sasl/parserblabla)
[16:13:43] <greenbagels> Sure thing; PlanckWalk and I are both there (though I cannot speak for his availability)
[16:13:48] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[16:14:00] <PlanckWalk> I'm out any minute  :-(
[16:14:28] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[16:14:31] <greenbagels> its ok PlanckWalk we love you anyway
[16:14:57] *** Quits: baracurda_ClassN (~baracurda@gateway/tor-sasl/parserblabla) (Remote host closed the connection)
[16:15:04] <sdfgsdfg> hi maths
[16:15:08] <sdfgsdfg> isn't it maths ?
[16:15:24] <sdfgsdfg> the channel title is supposed to be maths
[16:15:28] *** Joins: serh (serh@nemern.icu)
[16:15:39] <greenbagels> sdfgsdfg: "math" vs "maths" is a regional preference
[16:15:39] <sdfgsdfg> I think you made a mistake here
[16:15:58] *** Joins: baracurda (~baracurda@gateway/tor-sasl/parserblabla)
[16:15:58] <sdfgsdfg> who calls it math? what region
[16:16:26] <int-e> https://grammarist.com/spelling/math-maths/
[16:16:51] <sdfgsdfg> wow, didn't know
[16:16:57] <sdfgsdfg> ok
[16:17:42] <sdfgsdfg> math does make more sense now, americans have a better taste
[16:17:53] *** Joins: LucaTM (~LucaTM@user/lucatm)
[16:18:27] <sdfgsdfg> can't say the same about canada :p
[16:18:36] <greenbagels> haha
[16:19:06] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[16:20:37] *** Quits: DnzAtWrk3 (~DnzAtWrk@mobile-access-6df0a8-31.dhcp.inet.fi) (Read error: Connection reset by peer)
[16:20:41] *** Joins: AimHere (~David@92.238.16.159)
[16:22:02] *** Joins: DnzAtWrk3 (~DnzAtWrk@1408.pc.puv.fi)
[16:22:07] *** Quits: trace987 (~trace@ip5b42976d.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[16:22:49] <kamil> yyy: simulate it by taking discrete time steps dt, for example 0.1 secs, find out what mass will drop due to fuel burnt and assume force in that time interval is constant
[16:23:13] *** Joins: pluri (~pluri@user/pluri)
[16:24:07] *** Quits: pavlushka (~pavlushka@user/pavlushka) (Ping timeout: 256 seconds)
[16:25:07] *** haise01 is now known as Azem
[16:26:34] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[16:28:17] *** Quits: esther (~esther@24-155-112-236.dyn.grandenetworks.net) (Ping timeout: 240 seconds)
[16:30:15] *** Joins: pluri_ (~pluri@user/pluri)
[16:31:40] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0a8-31.dhcp.inet.fi)
[16:31:49] *** Quits: pluri (~pluri@user/pluri) (Ping timeout: 256 seconds)
[16:33:32] *** Quits: jj5 (~jj5@211-26-131-173.dyn.dodo.net.au) (Quit: Konversation terminated!)
[16:35:09] *** Joins: yelhamer (~yelhamer@41.98.30.118)
[16:35:13] *** Quits: DnzAtWrk3 (~DnzAtWrk@1408.pc.puv.fi) (Ping timeout: 256 seconds)
[16:35:16] *** Joins: trace987 (~trace@ip5b42976d.dynamic.kabel-deutschland.de)
[16:35:18] *** Quits: yelhamer (~yelhamer@41.98.30.118) (Client Quit)
[16:36:28] *** Quits: yyy (~yyy@5.177.130.167) (Remote host closed the connection)
[16:39:12] *** Joins: jero98772 (~jero98772@2800:484:1d80:d8ce:3490:26c5:1782:da8c)
[16:39:37] *** Joins: jj5 (~jj5@211-26-131-173.dyn.dodo.net.au)
[16:43:19] *** Joins: Hanii (~textual@2a00:23c5:c583:a300:dd6e:d9a5:afdc:11dc)
[16:43:50] *** Quits: PJBoy (~PJBoy@user/pjboy) (Quit: Ping timeout: 252 seconds)
[16:46:30] *** Joins: PJBoy (~PJBoy@user/pjboy)
[16:46:38] *** Joins: magla (~gelignite@d536277f.access.ecotel.net)
[16:49:24] *** Joins: dez (uid92154@user/dez)
[16:51:00] *** Joins: jj5_ (~jj5@211-26-131-173.dyn.dodo.net.au)
[16:51:05] *** Quits: jj5 (~jj5@211-26-131-173.dyn.dodo.net.au) (Ping timeout: 256 seconds)
[16:57:03] *** Joins: Liblx (~Alex@2a02:810c:280:59c:a585:3a95:ffe8:acb4)
[16:58:10] *** Joins: ethrl (~ethereal@user/doforlove33)
[17:05:18] *** Quits: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani) (Ping timeout: 276 seconds)
[17:06:02] *** Quits: pluri_ (~pluri@user/pluri) (Quit: Textual IRC Client: www.textualapp.com)
[17:06:35] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[17:06:44] *** Quits: SGautam (uid286066@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[17:06:50] <kamil> also assume that you mass is constant in that time interval
[17:07:50] <kamil> to simplify even more, take larger time steps, do not count mass drop
[17:08:23] *** Joins: pluri (~pluri@user/pluri)
[17:08:35] *** Quits: magla (~gelignite@d536277f.access.ecotel.net) (Quit: Stay safe!)
[17:10:18] *** Quits: lockywolf (~lockywolf@public.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[17:12:52] *** Joins: lockywolf (~lockywolf@public.lockywolf.net)
[17:16:20] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[17:18:51] *** Quits: Arcorann (~A@user/arcorann) (Ping timeout: 256 seconds)
[17:20:48] *** Joins: savask (~savask@Powder/Developer/savask)
[17:22:04] *** Quits: pluri (~pluri@user/pluri) (Quit: Textual IRC Client: www.textualapp.com)
[17:23:48] <greenbagels> kamil: they left
[17:24:55] *** Joins: Smilex (~Smilex@h164.natout.aau.dk)
[17:27:43] *** Quits: kmh (~kmh@2a00:6020:5004:6800:460a:ef03:e89d:7820) (Quit: Leaving)
[17:28:06] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0a8-31.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:28:51] <Smilex> Hey, I'm trying to solve a problem that says; Prove that the tangent space for the function f: R^2 -> R is the set of vectors for which the following is true - http://mathb.in/70114
[17:29:33] *** Joins: DnzAtWrk (~DnzAtWrk@1408.pc.puv.fi)
[17:29:41] <Smilex> I have noticed how much that equation looks like the normal vector
[17:29:48] <greenbagels> Smilex: are those meant to be partial derivatives?
[17:29:59] <greenbagels> or deltas
[17:30:06] <Smilex> partial derivatives
[17:30:48] <greenbagels> ok, in the future, try \ partial instead of \ delta (im putting a space here because i have a latex to unicode plugin in my client, heh)
[17:31:02] <Smilex> ah! I was wondering about that
[17:31:12] <greenbagels> yeah that will get you ∂ instead of δ
[17:32:39] *** Joins: Smilex8 (~Smilex@h164.natout.aau.dk)
[17:32:45] <greenbagels> i guess the first question to ask Smilex is what your text uses as the deifnition for tangent space
[17:32:58] *** Quits: Smilex (~Smilex@h164.natout.aau.dk) (Killed (NickServ (GHOST command used by Smilex8)))
[17:33:09] *** Quits: Hanii (~textual@2a00:23c5:c583:a300:dd6e:d9a5:afdc:11dc) (Quit: Textual IRC Client: www.textualapp.com)
[17:33:16] *** Smilex8 is now known as Smilex
[17:33:27] *** Quits: ethrl (~ethereal@user/doforlove33) (Remote host closed the connection)
[17:34:08] <Smilex> greenbagels give me a minute
[17:34:48] <isekaijin> Smilex: Your function f : R^2 -> R defines a surface S : f(x,y) - z = 0. Write g(x,y,z) = f(x,y) - z.
[17:35:21] *** Joins: Pickchea (~private@user/pickchea)
[17:35:33] <isekaijin> Now, what's the normal vector to S at the point (x0,y0,z0)?
[17:35:47] <isekaijin> (Assuming that g(x0,y0,z0) = 0, of course.)
[17:36:55] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[17:37:35] <Smilex> greenbagels http://mathb.in/70115 <- Note that I've translated it from the original text
[17:40:57] <Smilex> isekaijin I think it's (x partial, y partial, -1)
[17:41:24] *** Joins: Guest33Zemansky (~Guest33Ze@2001:8a0:65b0:900:d1bd:9ed3:1cae:22a3)
[17:41:33] <isekaijin> Smilex: Now, the tangent plane consists of those vectors that are perpendicular to (f_x, f_y, -1), right?
[17:41:48] <Smilex> isekaijin Yes
[17:42:16] <isekaijin> How do you find the vectors that are perpendicular to, say, (12,34,56) ?
[17:42:30] *** Joins: alo (~alo@host-79-36-108-33.retail.telecomitalia.it)
[17:42:37] <isekaijin> Dot product, right? Like, (12,34,56) . (x,y,z) = 0, right?
[17:42:49] <Smilex> isekaijin Yes
[17:42:58] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[17:43:05] <isekaijin> Now replace (12,34,56) with (f_x, f_y, -1) and you're done.
[17:43:35] *** Quits: alo (~alo@host-79-36-108-33.retail.telecomitalia.it) (Changing host)
[17:43:35] *** Joins: alo (~alo@user/alo)
[17:43:47] <Smilex> Yeah but how do I solve (f_x, f_y, -1) . (x, y, z) = 0 ?
[17:45:31] *** Joins: Oli_ (~Unknown@user/oli)
[17:45:57] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 240 seconds)
[17:47:45] *** Quits: Oli (~Unknown@user/oli) (Ping timeout: 256 seconds)
[17:49:41] *** Quits: Guest33Zemansky (~Guest33Ze@2001:8a0:65b0:900:d1bd:9ed3:1cae:22a3) (Ping timeout: 256 seconds)
[17:51:43] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[17:52:31] *** Quits: Oli_ (~Unknown@user/oli) (Ping timeout: 256 seconds)
[17:53:13] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[17:54:01] *** Quits: BillyZane2 (~BillyZane@185.202.221.34) (Read error: Connection reset by peer)
[17:54:21] *** Joins: BillyZane (~BillyZane@185.202.221.34)
[17:54:26] <Smilex> oh wait, brain fart
[17:54:39] *** Joins: esther (~esther@2607:fb90:5fe2:d14d:f2af:96f:59f4:60f8)
[17:55:48] *** Joins: kmh (~kmh@2a00:6020:5004:6800:9881:9737:5341:5446)
[17:56:36] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[17:57:10] *** Quits: Smilex (~Smilex@h164.natout.aau.dk) (Quit: Client closed)
[17:57:25] *** Joins: [-_-] (~fractal@user/---/x-1675478)
[17:57:37] <[-_-]> Hello
[17:57:53] <Z-module> hi
[17:58:08] <[-_-]> I have a question about elementary row operations
[17:58:08] *** Joins: Guest33Zemansky (~Guest33Ze@2001:8a0:65b0:900:d1bd:9ed3:1cae:22a3)
[17:58:37] <[-_-]> can I have it like this r`_3=-r_3+r_2
[17:58:57] *** Quits: esther (~esther@2607:fb90:5fe2:d14d:f2af:96f:59f4:60f8) (Ping timeout: 240 seconds)
[17:59:04] <[-_-]> one of my friend did this and they are not getting the right answer
[17:59:34] *** Joins: esther (~esther@24-155-112-236.dyn.grandenetworks.net)
[18:00:35] <Z-module> that there is two separate elemenatary opreations:  first multiplying r_3 by -1, and then adding r_2 to the new r_3
[18:01:07] <Z-module> if you had instead used  r`_2 = -r_3 + r_2,  *then* that would be a single elementary operation
[18:02:05] *** Quits: alo (~alo@user/alo) (Quit: alo)
[18:02:30] <Z-module> the operation you did there negates the determinant
[18:03:03] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[18:05:05] <[-_-]> :o
[18:05:06] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[18:05:12] <[-_-]> they look so similar
[18:05:48] *** Quits: rooferdave (~rooferdav@rrcs-24-97-76-202.nys.biz.rr.com) (Quit: The Lounge - https://thelounge.chat)
[18:08:04] *** Joins: rooferdave (~rooferdav@rrcs-24-97-76-202.nys.biz.rr.com)
[18:08:21] *** Joins: node1 (~hex@user/node1)
[18:08:23] *** Quits: Guest33Zemansky (~Guest33Ze@2001:8a0:65b0:900:d1bd:9ed3:1cae:22a3) (Ping timeout: 256 seconds)
[18:09:35] <[-_-]> thanks Z-module
[18:10:14] *** Quits: Liblx (~Alex@2a02:810c:280:59c:a585:3a95:ffe8:acb4) (Quit: Leaving)
[18:10:38] *** Joins: Oli (~Unknown@user/oli)
[18:13:09] *** Quits: Koen (~Koen@158.244.88.92.rev.sfr.net) (Ping timeout: 256 seconds)
[18:14:42] *** Joins: Koen (~Koen@158.244.88.92.rev.sfr.net)
[18:17:14] *** Quits: rooferdave (~rooferdav@rrcs-24-97-76-202.nys.biz.rr.com) (Quit: The Lounge - https://thelounge.chat)
[18:19:23] *** Joins: rooferdave (~rooferdav@rrcs-24-97-76-202.nys.biz.rr.com)
[18:25:03] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[18:26:28] *** Joins: Nistar (Nistar@gateway/vpn/protonvpn/nistar)
[18:26:45] *** Quits: node1 (~hex@user/node1) (Ping timeout: 256 seconds)
[18:32:39] *** Joins: pavlushka (~pavlushka@user/pavlushka)
[18:35:04] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[18:35:52] <Z-module> [-_-]: See the top portion of the 2nd page of  https://intranet.missouriwestern.edu/cas/wp-content/uploads/sites/17/2020/05/Elementary-Row-Operations-for-Matrices-Updated-2013-1.pdf    particularly the "Note" just before section C.
[18:38:25] *** Quits: Koen (~Koen@158.244.88.92.rev.sfr.net) (Ping timeout: 256 seconds)
[18:43:18] *** Joins: DnzAtWrk3 (~DnzAtWrk@mobile-access-6df0a8-31.dhcp.inet.fi)
[18:45:31] *** Joins: magla (~gelignite@d536277f.access.ecotel.net)
[18:46:01] *** Quits: DnzAtWrk (~DnzAtWrk@1408.pc.puv.fi) (Ping timeout: 256 seconds)
[18:46:23] *** Quits: xff0x (~xff0x@2001:1a81:53e8:2500:31e6:f5f6:6492:6bc2) (Ping timeout: 250 seconds)
[18:47:08] *** Joins: xff0x (~xff0x@2001:1a81:53e8:2500:a7da:afdc:1a91:3063)
[18:53:46] *** Quits: Bobathan (~admin@cpe-65-29-248-157.wi.res.rr.com) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[18:54:36] *** Joins: Bobathan (~admin@cpe-65-29-248-157.wi.res.rr.com)
[18:57:35] *** Quits: rooferdave (~rooferdav@rrcs-24-97-76-202.nys.biz.rr.com) (Quit: The Lounge - https://thelounge.chat)
[18:58:36] *** Joins: gooble_gobble (~gooble_go@c-76-16-103-215.hsd1.il.comcast.net)
[19:00:46] *** Joins: temp_user_2022 (~amit@2601:445:447f:a2f6:b910:cb62:dbba:4511)
[19:00:47] <[-_-]> hmm
[19:02:57] *** Quits: acd (~acd@2600:1700:99f3:250::40) (Ping timeout: 240 seconds)
[19:03:32] *** Joins: Pickchea (~private@user/pickchea)
[19:04:26] *** Joins: Koen (~Koen@158.244.88.92.rev.sfr.net)
[19:13:19] *** Quits: rain3 (~rain3___@2a02:2f09:d113:6d00:6f23:fba2:d834:1a7) (Ping timeout: 256 seconds)
[19:17:17] *** Quits: pavlushka (~pavlushka@user/pavlushka) (Ping timeout: 256 seconds)
[19:17:39] *** Quits: wakeup (~wakeup@user/wakeup) (Quit: Client closed)
[19:22:20] *** Quits: magla (~gelignite@d536277f.access.ecotel.net) (Read error: Connection reset by peer)
[19:23:27] *** Joins: magla (~gelignite@d536277f.access.ecotel.net)
[19:24:45] *** Joins: TheCatBehemoth (~TheCatBeh@2001:8a0:f55d:b200:ed0d:e2fd:2045:69d8)
[19:26:18] *** Quits: Oli (~Unknown@user/oli) (Quit: leaving)
[19:31:44] *** Quits: trace987 (~trace@ip5b42976d.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[19:33:09] *** Quits: Koen (~Koen@158.244.88.92.rev.sfr.net) (Ping timeout: 256 seconds)
[19:38:27] *** Quits: confuzeus (~h_m@186-149-117-154.bitcointernet.co.za) (Ping timeout: 268 seconds)
[19:41:30] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[19:41:47] *** Joins: mickey8 (~user@user/mickey)
[19:42:56] <tom__> What is the rigorous way of showing that the collection of singletons under the discrete topology contains no finite subcover
[19:43:43] <tom__> How do we know we cannot construct a finite subcover from {{x} | x \in X}
[19:44:05] *** Joins: neko_ (~neko@140.213.128.224)
[19:44:29] <Franciman> tom__: it depends
[19:44:32] <Franciman> is X infinite?
[19:44:44] <Franciman> a finite subcover would be { {x_1} ,...., {x_n} }
[19:44:56] <Franciman> so you can't extract a finite subcover if X is infinite
[19:45:04] *** neko_ is now known as n3k0
[19:47:14] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[19:47:32] *** Joins: gooble_gobble_1 (~gooble_go@c-76-16-103-215.hsd1.il.comcast.net)
[19:47:41] *** Quits: n3k0 (~neko@140.213.128.224) (Read error: Connection reset by peer)
[19:49:06] <Pickchea> Hey, in the expression `(Π_{0<i<10}(p_i + q_i)) * 2` I can't omit any parenthesis without changing the meaning, right? In other words, I don't know how far the multiplication symbol (capital Pi, I know) reaches.
[19:50:34] <Pickchea> Oh wait, actually 2 * Π(a + b) is the same as Π 2*(a+b), right?
[19:50:43] *** Quits: gooble_gobble (~gooble_go@c-76-16-103-215.hsd1.il.comcast.net) (Ping timeout: 256 seconds)
[19:50:59] <tom__> Franciman: yeah it is infinite
[19:51:11] <Franciman> tom__: ok
[19:51:16] <Franciman> if you have a subcover
[19:51:24] <Franciman> i mean
[19:51:25] <ski> Pickchea : not the same
[19:51:31] <Franciman> does what i say make sense to you ?
[19:51:47] <ski> (if those were sums, they'd be the same)
[19:52:08] <Pickchea> ski, ah, of course.
[19:52:09] <ski> Pickchea : and yes, to the first question
[19:52:15] <tom__> Franciman: Yeah it intuitively makes sense
[19:52:25] <Franciman> tom__: let's make it formal together?
[19:52:29] <tom__> Yeah
[19:52:46] <Franciman> if {U_i} is a cover of X
[19:52:51] <Franciman> what is a subcover of {U_i} ?
[19:53:34] <tom__> The fact that the singletons are unique and infinite could be the key
[19:53:48] <ski> Pickchea : a sum is like a dependant product (which has higher precedence than sum). a product is like a dependant power (which has higher precedence than both sum and product)
[19:53:58] *** Quits: DnzAtWrk3 (~DnzAtWrk@mobile-access-6df0a8-31.dhcp.inet.fi) (Read error: Connection reset by peer)
[19:54:05] <Franciman> care to expand, tom__ ?
[19:54:12] <Franciman> i think it is wise to first understand the meaning of subcover
[19:54:21] <ski> s/a sum/an indexed sum/,s/a product/an indexed product/
[19:54:22] <Pickchea> ski, OK, thanks! I'm asking because the Pi in (Π(p+q))*2 looks so redundantly sandwiched between parentheses but I guess it has to be written like that (without changing the order).
[19:54:38] <ski> Pickchea : i'd commute, if possible
[19:54:52] <tom__> Franciman: A subcover is a subset of an open cover where your space is still included
[19:54:59] <Pickchea> ski, yup, makes sense.
[19:55:04] <tom__> So a subset of a cover that still covers our space
[19:55:06] *** Joins: neverfindme (~hayden@158.123.160.43)
[19:55:25] *** Joins: DnzAtWrk3 (~DnzAtWrk@mobile-access-6df0a8-31.dhcp.inet.fi)
[19:55:37] <tom__> X \subseteq J \subset {u_i}
[19:55:48] <tom__> J would be a subcover
[19:55:51] <Franciman> tom__: perfect
[19:55:58] <tom__> :)
[19:55:58] <Franciman> so take a finite subcover of { {x} : x \in X }
[19:56:23] <Franciman> { {x_1} , ..., {x_n} }
[19:56:29] <Franciman> what space does this cover?
[19:56:39] <Franciman> if you do the union of these sets
[19:56:44] <Franciman> you get {x_1, .., x_n}
[19:56:46] <Franciman> NOW watchout
[19:56:49] <Franciman> there can be duplicates
[19:56:56] <ski>   2 ⋅ (pᵢ + qᵢ)⁽⁰ ˂ ⁱ ˂ ¹⁰⁾
[19:57:04] <Franciman> so it has AT MOST n elements
[19:57:11] <Franciman> in any case it is finite!
[19:57:15] <ski> Pickchea : ^ how i might (privately) write it
[19:57:37] <Franciman> if X is infinite, you can't ever get a finite covering of singletons
[19:57:48] <Franciman> because finite covers of singletons only cover finite sets
[19:59:19] <Pickchea> ski, I have never seen such notation but thanks!
[19:59:28] <Z-module> Right: taking subscoverings of a cover merely means taking some of the original sets in the cover: you don't modify any of the sets at all.
[19:59:52] *** Joins: seninha_ (~seninha@user/seninha)
[20:00:03] <ski> Pickchea : in the sum case, it'd be ⌜2 ⋅ (0 < i < 10) ⋅ (pᵢ + qᵢ)⌝
[20:00:09] *** Quits: baracurda (~baracurda@gateway/tor-sasl/parserblabla) (Ping timeout: 276 seconds)
[20:02:33] <tom__> So as soon as you omit one set from the cover you no longer have a subcover in the case of singletons
[20:02:37] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 256 seconds)
[20:03:30] *** Quits: neverfindme (~hayden@158.123.160.43) (Quit: Leaving)
[20:03:37] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[20:03:42] <ski> Pickchea : although, i mostly use this notation with natural number indices (which are allowed to be zero). so ⌜(i <) 10 ⋅ pᵢ  =  p₀ + p₁ + ⋯ + p₉⌝ and ⌜pᵢ⁽ⁱ ˂⁾ ¹⁰  =  p₀ ⋅ p₁ ⋅ ⋯ ⋅ p₉⌝. so, if the other part doesn't depend on the dummy/bound/index variable, you simply just have ⌜(i <) 10 ⋅ c  =  10 ⋅ c⌝ and ⌜c⁽ⁱ ˂⁾ ¹⁰  =  c¹⁰⌝
[20:03:43] <Z-module> In fact, though it's not important and this never gets used anywhere, it happens to be true that a space X is compact iff every open cover of X has a *minimal* subscover: that means a subcover C that becomes a non-cover as soon as any single set from C is omitted.
[20:04:35] <tom__> interesting
[20:04:49] <Franciman> tom__: it depends, once again
[20:04:57] <Franciman> covers can contain duplicates
[20:05:11] <Franciman> the problem is that a finite subcover has too few elements
[20:05:24] <Z-module> you mean overlapping sets, really, not "duplicates"
[20:05:28] <Franciman> err
[20:05:31] <Franciman> i am terribly sorry, thanks Z-module
[20:05:35] <Franciman> yes overlapping sets
[20:06:03] <tom__> Ok this makes sense now thanks
[20:06:33] <Z-module> Some people get confused about the defintion at first, and they say, "If X is any space, then {X} is a finite open cover of X, so howcome all spaces aren't automatically compact?"  THe answer is that *every* open cover needs to have a finite subcover, not just particular ones.
[20:07:03] <Pickchea> ski, thanks, maybe I'll need it sometime!
[20:08:55] *** Joins: oliverwood (~oliverwoo@node-1w7jra27sm79l0xu1l5l5nxry.ipv6.telus.net)
[20:08:58] <ski> Pickchea : i like how it makes me thing of "indexed sums" as (dependant) products, and "indexed products" as (dependant) powers, thereby more easily making me see associations, and suggest possible rewriting laws, that i otherwise wouldn't think of
[20:09:22] <tom__> Z-module: yeah
[20:09:22] <ski> (e.g. consider what the associative law means, for "dependant products")
[20:10:30] <Z-module> or a better way to have said that would be:  "Let X be any space, and T be the collection of *all* the open sets. Then {X} is a finite open subcover of T, so isn't X compact now?"
[20:12:11] <tom__> Right
[20:13:16] <Franciman> what about paracompactness?
[20:13:20] <Franciman> what is your intuition for it?
[20:13:24] <Franciman> it's very strange lol
[20:13:41] <Z-module> It's a bit strange, but its main use is to make manifolds reasonable
[20:13:50] <Franciman> it's «every open cover has a locally finite refinement»
[20:14:10] <Franciman> the nice thing is that
[20:14:16] <Franciman> if you transform it
[20:14:25] <Franciman> «every open cover has a finite refinement» -> this is compactness
[20:14:35] <Franciman> «every open cover has a locally finite subcover» -> this is compactness
[20:14:37] <Franciman> lol
[20:14:59] <Franciman> so to get a distinct notion, you must s/finite/locally finite/ AND s/subcover/refinement/
[20:15:02] <Franciman> lol
[20:15:05] <tom__> How do you show generally that a one topological space contains another as a subspace?
[20:15:28] <Franciman> well the dumb way is set membership
[20:15:31] <Franciman> otherwise
[20:15:39] <Franciman> you must show a topological embedding
[20:15:45] <Franciman> i.e. an injective function f : X -> Y
[20:15:52] <Franciman> such that f(X) is homeomorphic to X
[20:16:42] <tom__> Is it not bijective?
[20:17:21] <Franciman> no
[20:17:23] <Franciman> e.g.
[20:17:37] <Franciman> i : R -> R^2
[20:17:39] *** Quits: Trashlord (~trash@user/trashlord) (Read error: Connection reset by peer)
[20:17:40] <Franciman> i(x) = (x, 0)
[20:18:46] <tom__> Sorry what is an embedding in topology
[20:18:49] <isekaijin> ski: For vector bundles, we have a theorem that every vector bundle embeds into a free one. Essentially, you're embedding all the fibers into a common vector space. Maybe for dependent functions we could have something similar?
[20:18:56] <tom__> Is it transforming one space into another?
[20:18:59] <Franciman> tom__:
[20:19:01] <isekaijin> ski: Or at least for the dependent functions that we care about in practice.
[20:19:19] <Franciman> tom__: a injective continuous function i : X -> Y, such that i : X -> i(X) is an homeomorphism
[20:19:48] <Z-module> An embedding of X into Y is simply an injectioon  f:X -> Y  where the image f(Y) in its *subspace* topology from Y is homeomorphic to X.
[20:19:51] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 256 seconds)
[20:20:06] <Franciman> Z-module: but
[20:20:12] <Franciman> they must be homeomorphic
[20:20:16] <Franciman> due to the restriction of f
[20:20:20] <Franciman> not due to another function, right?
[20:20:25] <Z-module> sorry, yeah, where the restricted-codomain map   f: X -> f(X)   is itself a homeomorphism.
[20:20:44] <Z-module> not merely that *some* homeomorphism X with f(X) exists
[20:21:40] *** Joins: Trashlord (~trash@user/trashlord)
[20:22:17] <tom__> So the image of this injective function is homeomorphic to X
[20:22:35] <tom__> So we would need to construct three functions to show this
[20:22:53] <tom__> The first injective one and then the bijective one plus inverse for the homeomorphism?
[20:24:20] <Z-module> It suffices to have:  f: X -> Y   is injective, and for all U \subset X,  U is X-open  iff    some Y-open W exists with f(U) = f(X) cap W
[20:25:25] *** Joins: Guest33Zemansky (~Guest33Ze@2001:8a0:65b0:900:ca1:87ea:3e93:3ce9)
[20:26:00] <ski> isekaijin : you could embed into the sum/existential, i think ?
[20:26:22] *** Quits: mbuf (~Shakthi@122.162.66.95) (Quit: Leaving)
[20:26:59] <isekaijin> Yeah, but the sum of the fibers itself might not be easily definable in a language without dependent types.
[20:27:26] *** Joins: pavlushka (~pavlushka@user/pavlushka)
[20:27:52] <isekaijin> The goal is to turn “\pi_{x : A} B(x)” into “A -> B”, where B is a non-dependent type that contains all the B(x).
[20:28:55] <isekaijin> It's probably not possible in the general case, but it's interesting to find out in which cases it's possible.
[20:31:40] *** Joins: lilgopher (~textual@2601:241:8000:38f0:b4e0:9656:29c6:d783)
[20:33:17] <tom__> > "well the dumb way is set membership"
[20:33:28] * ski . o O ( <https://en.wikipedia.org/wiki/Total_space> )
[20:33:36] <tom__> Can someone tell me more about this way of showing one space is a subspace of another
[20:34:56] *** Joins: emf (~emf@2620:10d:c090:400::5:3e0a)
[20:36:05] <isekaijin> ski: The problem here is precisely that the total space needn't be definable in a language without dependent types, so I'm looking for a larger space that contains the total space.
[20:36:08] *** Quits: andreasbuhr (~quassel@p549dbab5.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:36:33] <ski> yea, i understand
[20:36:48] <ski> (although, i'm not sure which kind of language you're having in mind)
[20:37:35] <isekaijin> Something like ML or Haskell.
[20:38:03] <isekaijin> (Without the crazy LANGUAGE pragmas, of course.)
[20:40:04] <isekaijin> But, now that I think about, in these languages, the real struggle is defining types that correspond to manifolds in the first place.
[20:40:08] <isekaijin> about it*
[20:41:18] *** Joins: leib (~leib@2405:201:900a:f021:f0e6:d93d:1679:48cc)
[20:41:50] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[20:42:07] *** Joins: mickey8 (~user@user/mickey)
[20:42:11] *** Quits: Kaylah (~Kaylah@84-198-141-54.access.telenet.be) (Quit: Client closed)
[20:43:17] <ski> having a nicer way to handle quotients would help
[20:44:08] <isekaijin> That's the thing in all programming languages: handling quotients is such a pain.
[20:44:36] <isekaijin> All that you can do is pinky swear that you won't do non-equivalent things to equivalent values.
[20:45:13] <tom__> In exercise 2. Is this a correct formulation of T'. T' = T \cup { v \cup {\inf} : v \subseteq X, where X\V is compact and closed }
[20:45:14] <tom__> https://courses-archive.maths.ox.ac.uk/node/view_material/44048
[20:46:14] <ski> Mercury at least stops you from inadvertently treating the abstract value (equivalence class) as the representation (representant from the class). but you still have to sprinkle `promise_equivalent_solutions' and `promise_deterministic' stuff over the code
[20:47:07] *** Joins: node1 (~hex@user/node1)
[20:51:55] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[20:52:12] <isekaijin> But the whole point to functional or logic programming is that you're manipulating values in your problem domain, not merely representations of them. Otherwise, might as well do imperative programming.
[20:52:21] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[20:53:06] <isekaijin> Of course, sometimes it's impossible to avoid multiple representations of the same value, but the goal is to confine this code to a small module that can be independently verified and then used without care.
[20:53:32] <ski> yea, mostly one'd want to keep those confined to the construction/definition/implementation part of the quotient
[20:54:12] *** Quits: TheCatBehemoth (~TheCatBeh@2001:8a0:f55d:b200:ed0d:e2fd:2045:69d8) (Quit: bbl)
[20:54:31] <ski> (language equality (in the checking mode) on the abstract values will invoke user-defined equality (which is promised to be an equivalence relation) on the representants)
[20:56:33] <isekaijin> Now that I think about it, part of the reason why quotients aren't so bad in mathematics is that we don't really take totally arbitrary quotients.
[20:57:01] <isekaijin> We take reasonable quotients, like quotient of a group by a normal subgroup, or of a ring by a two-sided ideal.
[20:58:31] <isekaijin> But of course programming languages aren't particularly geared towards algebraic structures - why should they be?
[21:01:12] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[21:01:40] *** Quits: mornfall (~mornfall@user/mornfall) (Remote host closed the connection)
[21:02:07] *** Joins: mornfall (~mornfall@user/mornfall)
[21:03:01] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:7da5:59e:42b2:ced5) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:04:04] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[21:04:14] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[21:04:20] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[21:05:31] <joel135> mathematics would have to be unreasonably effective to justify gearing programming languages toward it ;)
[21:05:58] *** Joins: Kaylah (~Kaylah@84-198-141-54.access.telenet.be)
[21:07:18] <Z-module> tom__:  yes, that formulation of that exercise is right, though most places don't even define the one-point compactification of X unless X is also hausdorff, in which case we can just say "where X\V is compact" since in this case X\V is also closed automatically.
[21:09:04] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[21:10:15] <tom__> Z-module: For this exercise I don't need to use an embedding for the subspace bit right?
[21:10:54] <Z-module> right, they mean literally a subspace
[21:11:34] <Z-module> So you have to check that in (C, T'), the subspace-open subsets of X are exactly the original X-open subsets of X
[21:11:40] <tom__> I am a bit confused so they just want you to show C \subseteq X and T \subseteq T' ?
[21:12:07] <tom__> brb
[21:12:56] *** Quits: [-_-] (~fractal@user/---/x-1675478) (Quit: ZZZzzz?)
[21:13:14] <Z-module> no: If  W \subset X,  then W is subspace open iff  W = X cap U   for some U in T'. You need this to happen iff W is in T.
[21:19:35] *** Joins: wakeup (~wakeup@user/wakeup)
[21:20:19] *** Quits: leib (~leib@2405:201:900a:f021:f0e6:d93d:1679:48cc) (Quit: Leaving)
[21:25:47] *** Quits: DnzAtWrk3 (~DnzAtWrk@mobile-access-6df0a8-31.dhcp.inet.fi) (Quit: Leaving)
[21:28:18] *** Quits: callq (~callq@2409:4062:2e9e:2081:3c70:5be0:414d:6151) (Quit: callq)
[21:30:50] *** Quits: magla (~gelignite@d536277f.access.ecotel.net) (Quit: Stay safe!)
[21:31:29] *** Quits: MajorBiscuit (~MajorBisc@c-001-015-052.client.tudelft.eduvpn.nl) (Ping timeout: 250 seconds)
[21:31:30] *** Quits: seninha_ (~seninha@user/seninha) (Quit: Leaving)
[21:31:38] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[21:33:22] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[21:33:56] *** Joins: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani)
[21:33:58] *** Joins: seninha (~seninha@user/seninha)
[21:34:00] *** Joins: eijcejcijosjcosd (~jdcojsopc@134.195.196.200)
[21:34:06] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[21:34:13] <wakeup> PlanckWalk So, what you were saying is that p(a | b, c, d) = p(a | c, d) does not imply that a and b are independent. However, if a and b are independent, and, in addition to that, b is independent of c and d, then p(a | b, c, d) = p(a | c, d)
[21:34:19] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[21:36:08] *** Quits: node1 (~hex@user/node1) (Quit: Leaving)
[21:37:28] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[21:39:10] *** Quits: eijcejcijosjcosd (~jdcojsopc@134.195.196.200) (Remote host closed the connection)
[21:45:25] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Ping timeout: 256 seconds)
[21:52:50] *** Quits: ko (~i.am@user/marlboro) (Quit: a pentium 100 "running" windows 11 trying to play Last of Us II at ps4emu... that's my brain trying understand 0->R->R->R/2R->0)
[21:53:24] *** Quits: trbp (~trbp@user/trbp) ()
[21:53:57] *** Quits: emf (~emf@2620:10d:c090:400::5:3e0a) (Ping timeout: 240 seconds)
[21:54:06] *** Joins: acd (~acd@75.6.9.132)
[21:55:37] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[21:56:54] <Macuser> is it possible to solve for b given c = b - a*sin(b)?
[21:57:08] *** Joins: emf (~emf@163.114.132.7)
[22:03:09] <dude12312414> numerically yes
[22:03:25] *** Joins: lavos (~molt@178-222-245-206.static.isp.telekom.rs)
[22:03:31] <Macuser> set it equal to zero and then do somethin?
[22:03:36] <dude12312414> i don't think there is a closed form "formula" though
[22:04:16] <Macuser> hm this is awkward.
[22:04:36] <dude12312414> numerically you can use Newton-Raphson
[22:05:36] <Macuser> that involves taking a derivative yeah?
[22:05:52] *** Joins: molten (~molt@178-222-245-206.static.isp.telekom.rs)
[22:05:57] <dude12312414> yeah
[22:06:55] <Macuser> yeh i see
[22:06:55] <wakeup> If X is a discrete random variable, then X=x is shortand for X(s) = x, where s is an element of the outcome space and x is the real number, right?
[22:07:02] <wakeup> or is it a shortand for X=s?
[22:07:10] <Macuser> thanks
[22:07:31] *** Quits: molt (~molt@178-222-245-206.static.isp.telekom.rs) (Ping timeout: 256 seconds)
[22:09:27] *** Quits: lavos (~molt@178-222-245-206.static.isp.telekom.rs) (Ping timeout: 256 seconds)
[22:09:42] <wakeup> X=x is the shorthand for the event, which is a set
[22:10:12] *** Joins: vindex10 (~vindex10@gateway/tor-sasl/vindex10)
[22:12:12] *** Joins: confuzeus (~h_m@186-149-117-154.bitcointernet.co.za)
[22:12:21] *** Quits: wakeup (~wakeup@user/wakeup) (Quit: Client closed)
[22:15:49] *** Quits: vindex10 (~vindex10@gateway/tor-sasl/vindex10) (Quit: vindex10)
[22:18:59] *** Quits: Kaylah (~Kaylah@84-198-141-54.access.telenet.be) (Quit: Client closed)
[22:19:57] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[22:24:52] *** Joins: gooble_gobble_2 (~gooble_go@c-76-16-103-215.hsd1.il.comcast.net)
[22:25:56] *** Joins: econo (uid147250@user/econo)
[22:26:07] *** Quits: learner36 (~learner36@cpef81d0fa12c13-cmf81d0fa12c10.cpe.net.cable.rogers.com) (Remote host closed the connection)
[22:27:01] *** Quits: gooble_gobble_2 (~gooble_go@c-76-16-103-215.hsd1.il.comcast.net) (Client Quit)
[22:27:38] *** Joins: Simplar (~Simplar@188.163.93.241)
[22:27:49] *** Quits: gooble_gobble_1 (~gooble_go@c-76-16-103-215.hsd1.il.comcast.net) (Ping timeout: 250 seconds)
[22:28:38] *** Joins: vicfred (~vicfred@user/vicfred)
[22:31:00] <Simplar> how do I prove that even number divided by odd number will give out even result if remainder = 0?
[22:32:02] <riv> that's not true
[22:32:22] <riv> 3*3 / 3 has remainder zero but the result is 3 which is odd
[22:32:35] <ski> nine's not even
[22:33:17] <Simplar> riv: 3*3 = 9, odd
[22:33:20] <Simplar> odd/odd = odd ofc
[22:33:26] <Simplar> I'm talking about even/odd
[22:35:44] <tom__> Z-module: So for that exercise I am confused. Do I really need to show that (x,T) is a subspace of (C,T')? Doesn't the fact it is a subspace or not just decided by the definition of a subspace topology
[22:35:52] <tom__> https://courses-archive.maths.ox.ac.uk/node/view_material/44048
[22:35:57] <tom__> ex 2
[22:36:30] <dude12312414> Simplar: the prime factorization
[22:37:06] <Simplar> dude12312414: even numbers take form of 2k, odd numbers are either 2k+1 or 2k-1
[22:37:12] <dude12312414> well what you really need is Euclid's lemma and induction
[22:37:15] <Simplar> Ah
[22:37:23] <Simplar> So it's proven by Euclid
[22:37:23] *** Joins: LiftLeft (~LiftLeft@187.170.244.154)
[22:37:32] <dude12312414> the point is that an odd prime factor dividing 2k must divide k
[22:37:43] *** Joins: LiftLeft2 (~LiftLeft@187.170.244.154)
[22:37:49] <dude12312414> so 2k/n = 2*(k/n)
[22:38:17] *** Quits: Batzy (~quassel@user/batzy) (Ping timeout: 240 seconds)
[22:38:57] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[22:39:00] <dude12312414> and then you just write n as a product of odd primes
[22:39:00] <Simplar> Clever
[22:39:06] <Simplar> I see
[22:39:33] <Simplar> if even number is raised to the power equal to any natural number, the result is always even, right?
[22:39:44] <Simplar> I prove this from the fact even*even = even
[22:39:51] <Simplar> even*odd = even too
[22:41:09] <ski>   n⁰ = 1
[22:41:35] *** Joins: slidercrank (~slidercra@user/slidercrank)
[22:41:50] <Simplar> ski: 0 isn't a natural number
[22:42:11] <ski> different people have different opinions about that
[22:42:28] <Simplar> ok, if a^b and b > 0
[22:42:41] <ski> (or, if you prefer, there's differing conventions / use of terminology)
[22:43:09] <ski> then, sure
[22:43:36] <Simplar> ski: more interesting, what about the parity of factorials?
[22:43:47] <Simplar> a! for any natural a > 0
[22:43:50] <ski> all but the first two are even ?
[22:44:25] <Simplar> oh, because they are multiplied by 2
[22:45:17] <dude12312414> trick question: is n! + 1 prime?
[22:46:15] <Simplar> dude12312414: if n! exists, then at least for n = 0 it's a prime
[22:46:28] <ski>   f(n) = least prime factor of (1 + ∏_{k < n} f(k))
[22:46:39] <ski> is a nice way to define an infinite sequence of distinct primes
[22:47:29] *** Joins: Pickchea (~private@user/pickchea)
[22:48:08] *** Parts: savask (~savask@Powder/Developer/savask) ()
[22:48:53] *** Quits: specing (~specing@user/specing) (Ping timeout: 256 seconds)
[22:49:02] *** Joins: specing_ (~specing@user/specing)
[22:50:35] *** Quits: dld (~davidlowr@73.61.8.20) (Ping timeout: 256 seconds)
[22:50:46] *** specing_ is now known as specing
[22:51:11] *** Joins: vrp2zqL7 (~v8XhLN3K@74.5.157.96)
[22:52:29] *** Joins: dld (~davidlowr@73.61.8.105)
[22:54:57] *** Joins: magla (~gelignite@d536277f.access.ecotel.net)
[22:59:30] <Z-module> That reminds me, it's been forever since I gave the "formula" for the first prime above any given natural number.
[23:01:16] *** Joins: Batzy (~quassel@user/batzy)
[23:01:27] <Z-module> If m >= 2 is an integer, put d = GCD(m!^(m!) - 1, (2m)!). Let t = (d^d)/GCD(d^d, d!). Clearly d | t; let d^a be the highest power that | t. The first prime > m is:  d/GCD(t/d^a, d)
[23:10:03] *** Quits: Guest33Zemansky (~Guest33Ze@2001:8a0:65b0:900:ca1:87ea:3e93:3ce9) (Quit: Client closed)
[23:13:57] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Quit: THE RAM IS TOO DAMN HIGH)
[23:14:09] *** Quits: dld (~davidlowr@73.61.8.105) (Ping timeout: 256 seconds)
[23:15:08] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[23:16:07] *** Joins: dld (~davidlowr@2601:197:600:1210:3c77:90a4:f938:18fe)
[23:18:56] *** Joins: Kaylah (~Kaylah@84-198-141-54.access.telenet.be)
[23:19:17] *** Quits: LiftLeft2 (~LiftLeft@187.170.244.154) (Ping timeout: 240 seconds)
[23:19:29] *** Quits: LiftLeft (~LiftLeft@187.170.244.154) (Ping timeout: 256 seconds)
[23:20:19] *** Quits: Kaylah (~Kaylah@84-198-141-54.access.telenet.be) (Client Quit)
[23:21:40] <merpnderp> Can someone walking me through this permutations problem? If I'm an NFT artist and I make a painting with 5 possible mouths, eyes, hats, ears, and color schemes, how many permutations are possible?
[23:22:45] <merpnderp> Is it 25!/(25-5)?
[23:23:37] <Decker> choosing a mouth doesn't reduce the choice of eyes or hats
[23:27:27] <Decker> choosing eyes and then choosing a mouth vs choosing a mouth and then choosing eyes are the same result
[23:30:34] <merpnderp> Is it just 5^5?
[23:31:00] <merpnderp> If we just did eyes and mouths, that would be 5*5.
[23:31:06] <merpnderp> So 5^5 feels right.
[23:32:25] *** Joins: LiftLeft2 (~LiftLeft@gateway/vpn/pia/liftleft)
[23:33:28] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[23:33:36] <ski> sounds like it
[23:34:34] *** Quits: magla (~gelignite@d536277f.access.ecotel.net) (Read error: Connection reset by peer)
[23:34:50] *** Joins: magla (~gelignite@d536277f.access.ecotel.net)
[23:36:08] <Decker> ya
[23:36:11] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[23:36:29] *** Quits: kristjansson (sid126207@tinside.irccloud.com) (Ping timeout: 256 seconds)
[23:38:25] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 256 seconds)
[23:38:45] *** Quits: LiftLeft2 (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 256 seconds)
[23:40:07] *** Joins: kristjansson (sid126207@id-126207.tinside.irccloud.com)
[23:41:06] *** Joins: remii (~remii@h5-44-206-46.cust.a3fiber.se)
[23:42:45] <remii> Hey, can I modify the following series to prove that it converges using Leibniz test? https://i.imgur.com/HFnq8XT.png
[23:44:37] <remii> Or can I just straight up use Leibniz test on this?
[23:45:34] <remii> I mean modify it in such a way that the series start from k=0 and use k+1 instead of k.
[23:46:57] *** Quits: emf (~emf@163.114.132.7) (Ping timeout: 240 seconds)
[23:48:06] *** Joins: joilerv (~joilerv@135.129.250.144)
[23:48:42] *** Quits: joilerv (~joilerv@135.129.250.144) (Client Quit)
[23:49:51] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[23:50:11] *** Joins: emf (~emf@2620:10d:c090:400::5:e4c1)
[23:50:32] *** Joins: LiftLeft2 (~LiftLeft@gateway/vpn/pia/liftleft)
[23:52:10] *** Quits: pavlushka (~pavlushka@user/pavlushka) (Read error: Connection reset by peer)
[23:55:41] <greenbagels> remii: whether the power of (-1) is k or k+1 doesnt matter
[23:56:31] <greenbagels> the alternating series test applies in either case
[23:56:36] <remii> greenbagelsTrue, thanks. Are there other ways to prove this converges/diverges without using Leibniz test?
[23:56:45] <remii> greenbagels
[23:56:52] *** Joins: homosexual (~homosexua@stnbmb0127w-ds01-11-18.dynamic.bellmts.net)
[23:57:13] <greenbagels> sure but the first example that came to mind is kind of contrived
[23:57:36] <greenbagels> like if you know some strictly-larger-in-magnitude alternating series that converges, etc etc
[23:57:40] <biberao> LoL
[23:57:41] *** Joins: joilerv (~joilerv@135.129.250.144)
[23:59:46] <greenbagels> alternating series test is probably the easiest remii
