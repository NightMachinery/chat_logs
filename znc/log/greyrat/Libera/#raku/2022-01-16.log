[00:01:41] *** Joins: lichtkind (~lichtkind@p200300d0a7289d63953422102b768b4a.dip0.t-ipconnect.de)
[00:03:08] *** Joins: clarjon1 (~clarjon1@user/clarjon1)
[00:05:04] *** Joins: stanrifkin (~stanrifki@p200300dbcf3c780065439eeb39be1543.dip0.t-ipconnect.de)
[00:05:25] <stanrifkin> how i enter 200 in roman numerals?
[00:05:31] <stanrifkin> ‚Ö≠‚Ö≠
[00:05:41] <stanrifkin> i copied that from unicode-table.com
[00:05:54] <stanrifkin> one ‚Ö≠ works but two of them not.
[00:06:49] <stanrifkin> when i quite them "‚Ö≠‚Ö≠" it just print ‚Ö≠‚Ö≠
[00:07:16] <stanrifkin> and "‚Ö≠‚Ö≠" + 0x200 is says it can't convert to number
[00:07:23] <stanrifkin> but ‚Ö≠ + 0x200 works fine
[00:08:23] <japhb> Looking for Slang::Roman or Math::Roman maybe?
[00:08:49] <stanrifkin> haven't looked into that
[00:08:57] <stanrifkin> thought raku can do it native
[00:19:26] <[Coke]> check the unicode properties on those characters. There's a difference between numbers/numerals, if I recall.
[00:19:42] <stanrifkin> eval: ‚Ö≠ + 0x200
[00:19:42] <evalable6> stanrifkin, rakudo-moar fb909efce: OUTPUT: ¬´WARNINGS for /tmp/J1HIEdYGmN:‚ê§Useless use of "+" in expression "‚Ö≠ + 0x200" in sink context (line 1)‚ê§¬ª
[00:19:55] <stanrifkin> hm...
[00:20:00] <[Coke]> you need to output it.
[00:20:08] <stanrifkin> eval: say ‚Ö≠ + 0x200
[00:20:09] <evalable6> stanrifkin, rakudo-moar fb909efce: OUTPUT: ¬´612‚ê§¬ª
[00:20:19] <stanrifkin> eval: say ‚Ö≠‚Ö≠ + 0x200
[00:20:19] <evalable6> stanrifkin, rakudo-moar fb909efce: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Er‚Ä¶¬ª
[00:20:20] <evalable6> stanrifkin, Full output: https://gist.github.com/d6925d556caf3815e60ba7d5e89037e1
[00:37:31] <stanrifkin> Slang::Roman works. But not in the Repl.
[01:05:04] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[01:05:05] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[01:18:52] *** Parts: stanrifkin (~stanrifki@p200300dbcf3c780065439eeb39be1543.dip0.t-ipconnect.de) (Leaving)
[01:56:04] *** Quits: Kaiepi (~Kaiepi@156.34.47.253) (Remote host closed the connection)
[01:56:54] *** Joins: Kaiepi (~Kaiepi@156.34.47.253)
[02:19:25] *** Quits: hasrthur (~hasrthur@45.89.88.214) (Remote host closed the connection)
[02:38:02] *** Quits: lichtkind (~lichtkind@p200300d0a7289d63953422102b768b4a.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[02:44:25] *** Quits: xinming (~xinming@115.219.38.169) (Ping timeout: 256 seconds)
[02:53:13] *** Joins: eseyman (~manu@lfbn-idf1-1-532-49.w86-242.abo.wanadoo.fr)
[02:57:53] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4)
[03:04:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[03:06:18] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[03:37:34] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:19:54] *** Joins: hasrthur (~hasrthur@45.89.88.214)
[04:22:03] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[04:24:14] *** Quits: hasrthur (~hasrthur@45.89.88.214) (Ping timeout: 250 seconds)
[04:39:40] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[04:44:43] *** Quits: eseyman (~manu@lfbn-idf1-1-532-49.w86-242.abo.wanadoo.fr) (Read error: Connection reset by peer)
[04:45:34] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.4)
[05:45:34] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:45:34] *** Quits: benchable6 (ben-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:45:34] *** Quits: committable6 (com-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:45:34] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:45:34] *** Quits: greppable6 (gre-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:45:34] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:45:34] *** Quits: sourceable6 (sou-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:45:34] *** Quits: coverable6 (cov-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:45:34] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:45:34] *** Quits: nativecallable6 (nat-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:45:34] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:45:34] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:45:34] *** Quits: quotable6 (quo-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:45:34] *** Quits: tellable6 (tel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:45:34] *** Quits: statisfiable6 (sta-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:45:34] *** Quits: notable6 (not-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:45:35] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[05:45:35] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[05:46:26] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[05:46:27] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[05:46:36] *** Joins: benchable6 (ben-able@2001:41d0:2:5eb5::)
[05:47:08] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[05:48:13] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[05:48:17] *** Joins: statisfiable6 (sta-able@2001:41d0:2:5eb5::)
[05:48:26] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[05:48:27] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[05:51:08] *** Quits: clarjon1 (~clarjon1@user/clarjon1) (Read error: Connection reset by peer)
[06:39:32] *** Quits: simcop2387 (~simcop238@perlbot/patrician/simcop2387) (Ping timeout: 240 seconds)
[06:39:35] *** Quits: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot) (Ping timeout: 256 seconds)
[06:45:50] *** Joins: simcop2387 (~simcop238@perlbot/patrician/simcop2387)
[06:46:49] *** Joins: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot)
[06:46:59] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[06:47:19] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[06:47:51] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[06:48:05] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[07:45:59] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[07:46:12] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[07:48:09] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[08:11:34] *** Quits: ProperNoun (~holyShizn@user/propernoun) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[08:11:53] *** Joins: ProperNoun (~holyShizn@user/propernoun)
[08:46:45] *** Joins: nativecallable6 (nat-able@2001:41d0:2:5eb5::)
[09:38:25] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:41:23] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[09:48:39] *** Joins: committable6 (com-able@2001:41d0:2:5eb5::)
[10:05:42] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[10:14:46] *** Joins: xinming (~xinming@115.219.36.164)
[10:36:38] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[10:39:20] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[10:46:21] *** Joins: quotable6 (quo-able@2001:41d0:2:5eb5::)
[11:01:54] *** Joins: epony (epony@user/epony)
[11:10:16] *** Quits: seednode99 (~seednode@user/seednode) (Quit: Nihil supernum.)
[11:11:10] *** Joins: seednode99 (~seednode@user/seednode)
[11:45:20] <Maxdamantus> Does it seem strange that this 243 KiB UTF-8 string requires more than 16 GiB of memory?
[11:45:23] <Maxdamantus> $ jq -n -j 'range(0, 50000) | [., 768] | implode' | raku -e 'slurp;'
[11:45:25] <Maxdamantus> Killed
[11:47:30] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[11:49:52] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[11:50:41] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[11:52:20] <Maxdamantus> eval: my @a; for 0..50000 { @a.push($_, 0x301); }; @a.chrs;
[11:52:32] <evalable6> Maxdamantus, rakudo-moar fb909efce: OUTPUT: ¬´(signal SIGHUP) ¬´timed out after 10 seconds¬ª¬ª
[11:58:55] <MasterDuke> committable6: releases my @a; for 0..50000 { @a.push($_, 0x301); }; @a.chrs;
[12:08:16] <committable6> MasterDuke, https://gist.github.com/2fde89e2dc1b1367bb6914e05054f85e
[12:23:03] *** Joins: lichtkind (~lichtkind@p200300d0a7444b68953422102b768b4a.dip0.t-ipconnect.de)
[12:59:11] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4)
[13:01:58] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[13:30:08] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[13:32:05] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[14:21:18] *** Joins: hasrthur (~hasrthur@45.89.88.214)
[14:25:57] *** Quits: hasrthur (~hasrthur@45.89.88.214) (Ping timeout: 256 seconds)
[14:28:45] *** Joins: Guest35 (~Guest35@33.51-174-155.customer.lyse.net)
[14:30:00] *** Quits: Guest35 (~Guest35@33.51-174-155.customer.lyse.net) (Client Quit)
[15:04:18] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4)
[15:37:25] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:40:14] *** Quits: xinming (~xinming@115.219.36.164) (Ping timeout: 250 seconds)
[15:49:41] <Voldenet> it doesn't seem strange, printing it out to the terminal is also painfully slow
[15:52:42] <Voldenet> btw, jq uses ; as args separator, not ,
[15:53:11] <Voldenet> so `jq -n -j 'range(0; 50000) | [., 768] | implode' | raku -e 'slurp;'`
[16:19:51] <gfldex> lolibloggedalittle: https://gfldex.wordpress.com/2022/01/16/fooled-by-complexety/
[16:20:30] <lizmat> s/complexety/complexity/ ?
[16:33:59] *** Joins: xinming (~xinming@115.219.32.137)
[16:48:42] <gfldex> fixed, thanks
[16:49:40] <Voldenet> last time i checked things like `sub infix:<notnilor>` really slowed down the script
[16:54:07] <Voldenet> > sub notnilor(\maybenil, \alternative) { ‚Ä¶ }; .&needle.&notnilor(Empty)
[16:54:18] <Voldenet> this would be a lot faster to initialize, because grammar doesn't change
[16:54:47] <moon-child> isn't notnilor just //?
[16:55:18] <Voldenet> not exactly
[16:56:21] <Voldenet> m: say Any =:= Nil
[16:56:22] <camelia> rakudo-moar fb909efce: OUTPUT: ¬´False‚ê§¬ª
[16:57:34] <moon-child> ah, sure
[16:57:42] <moon-child> but I don't think that matters in this particular case
[16:59:50] <Voldenet> you can check that it does have very different performance characteristics
[17:00:51] <Voldenet> in fact, having it as operator is a lot faster
[17:01:41] <Voldenet> nevermind, I read numbers wrong
[17:06:06] *** Joins: monkey_ (~user@190.104.116.153)
[17:16:26] *** Quits: xinming (~xinming@115.219.32.137) (Ping timeout: 250 seconds)
[17:18:17] *** Joins: xinming (~xinming@115.219.34.50)
[17:23:48] <gfldex> In a module precomp takes care of that and our grammar engine is not optimised at all.
[17:25:27] <Geth> ¬¶ doc: tbrowder self-assigned Create a tutorial on practical exception handling https://github.com/Raku/doc/issues/4016
[17:31:49] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[17:38:22] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[18:09:34] *** Quits: nebuchad` (~dad@82-65-17-178.subs.proxad.net) (Read error: Connection reset by peer)
[18:21:57] *** Quits: ProperNoun (~holyShizn@user/propernoun) (Ping timeout: 240 seconds)
[18:22:18] *** Quits: monkey_ (~user@190.104.116.153) (Ping timeout: 250 seconds)
[18:41:35] <discord-raku-bot> <Anton Antonov#7232> I assume there are at least a few packages/modules that generate Raku module/package folder structure and some of the files. Any links or recommendations? (I found "Ddt" and some related ones...)
[18:47:45] *** Quits: xinming (~xinming@115.219.34.50) (Ping timeout: 256 seconds)
[18:49:44] *** Joins: xinming (~xinming@115.219.32.78)
[19:23:11] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4)
[19:41:42] *** Joins: monkey_ (~user@190.104.116.153)
[20:00:41] <tbrowder> discord-raku-bot: are you looking to build new module? if so, see module App::Mi6
[20:01:22] <tbrowder> highly recommended (with the --zef option)
[20:01:57] <tbrowder> it's favored by lizmat
[20:02:06] * lizmat is just lazy :-)
[20:02:35] <tbrowder> no, energy conserving for more productivity!
[20:05:39] <tbrowder> it's primarily for use with github. yr mileage may vary with other git servers
[20:20:49] <discord-raku-bot> <Anton Antonov#7232> <@755062053282119803> Thanks!
[20:23:05] <discord-raku-bot> <Anton Antonov#7232> <@755062053282119803> "are you looking to build new module?" -- I want create quickly "disposable" modules that are in fact "data packages". Here by "data package" I mean a Raku module that (1) has certain data in the "resources" folder, (2) has functions for data retrieval and metadata descriptions in the "lib" folder, and (3) likely to have tests for certain invariants that are satisfied by the data.
[20:33:07] <lizmat> a simple module exposing %?RESOURCES should do the trick ?
[20:40:06] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[20:40:48] *** Joins: clarjon1 (~clarjon1@user/clarjon1)
[20:41:43] <discord-raku-bot> <Anton Antonov#7232> @lizmat Yes, I think so. Basically, I am making a conversational agent for data acquisition. After the user has selected the dataset I want the system to generate a data package that makes the use of that dataset convenient. In Raku this means have (most likely) a CSV file in "resources" folder and a module function that reads that CSV file.
[20:41:44] <discord-raku-bot> <Anton Antonov#7232> I think I am repeating myself, but I hope it is more clear I am trying to do...
[20:42:36] <lizmat> are you going to generate that CSV file ?
[20:49:27] <lizmat> Anton Antonov: if that is the case, then maybe it makes more sense to generate Raku source-code, and have that pre-compiled
[20:50:13] <lizmat> it makes developing and installing such a module a bit of a pain, but it will make startup so much faster  :-)
[20:50:45] <discord-raku-bot> <Anton Antonov#7232> @lizmat The dataset it is retrieved with the package `Data::ExampleDatasets`. And yes, pre-compilation would make sense, at least for small dataset.
[20:50:47] <lizmat> see  https://raku.land/zef:lizmat/uniname-words for this approach
[20:52:10] <discord-raku-bot> <Anton Antonov#7232> The process I after is demonstrated / outlined here: https://www.youtube.com/watch?v=eJ7355AJSP4#t=885 .
[20:52:35] <discord-raku-bot> <Anton Antonov#7232> BTW, that is what I am working for my FOSDEM22 Raku presentation...
[20:54:16] <discord-raku-bot> <Anton Antonov#7232> Basically, I am preprogramming the Mathematica-and-Raku conversational agent I presented last year the Wolfram Technology Conference into a "completely Raku" conversational agent.
[21:01:10] *** Joins: hasrthur (~hasrthur@45.89.88.214)
[21:03:12] <discord-raku-bot> <Anton Antonov#7232> @lizmat I definitely have to use BEGIN in my other conversational-agent-related packages. Thanks for providing an example!
[21:03:42] <lizmat> you're welcome  :-)
[21:08:59] *** Joins: ProperNoun (~holyShizn@user/propernoun)
[21:16:07] *** Quits: Kaiepi (~Kaiepi@156.34.47.253) (Remote host closed the connection)
[21:23:17] <discord-raku-bot> <Anton Antonov#7232> @lizmat This article of yours is both concise and  instructive: https://opensource.com/article/18/10/how-phasers-work-perl-6
[21:31:03] *** Joins: Kaiepi (~Kaiepi@156.34.47.253)
[21:34:16] *** Quits: xinming (~xinming@115.219.32.78) (Ping timeout: 250 seconds)
[21:37:55] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[22:06:53] <lizmat> Anton Antonov: thank you
[22:26:19] <tbrowder> i just added a practical example of using CATCH at Raku/doc issue #4016. i would appreciate any comments on it
[22:35:13] <moon-child> tbrowder: it feels a bit contrived to die inline and catch right away.  I wasn't initially sure what or where the error handling was
[22:35:38] <moon-child> what about something like this? http://ix.io/3Mui/perl6
[22:37:56] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[22:37:56] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[22:39:26] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[22:40:42] <tbrowder> moon-child: much better example for sure. my immediate goal was to use the right forms and syntax to fit my real problem. but i think yours is the way to go for the docs (and it looks like an easier drop-in, too). thanks!
[22:40:57] <moon-child> :)
[22:40:59] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[22:42:23] <Voldenet> tbrowder: i'd ditch nested for
[22:43:21] <tbrowder> why?
[22:44:22] <tbrowder> that's a common idiom for us simple coders
[22:44:56] *** Joins: eseyman (~manu@lfbn-idf1-1-532-49.w86-242.abo.wanadoo.fr)
[22:45:13] *** Quits: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[22:45:20] *** Joins: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de)
[22:46:54] <Voldenet> it makes reading, writing and debugging code harder
[22:47:09] <Voldenet> I've changed it a little bit: http://ix.io/3Mun/perl6
[22:47:20] <Voldenet> in real life processing a sheet is long and difficult
[22:48:15] <lizmat> one note: there's currently a bug in the return value of a scope, if CATCH is the last element of a scope
[22:48:38] <lizmat> since it doesn't matter where it is located in a scope, I always suggest to put the CATCH block at the start
[22:48:50] <Voldenet> that makes sense
[22:49:01] <Voldenet> and it may help people get rid of the assumption that it's like try/catch
[22:49:49] <tbrowder> Voldenet: ok, i think i see what you mean, and it is more like my actual use.
[22:50:00] <japhb> Just had failure installing Cairo module on Rakudo HEAD.  Currently building again from scratch to see if it's flaky or hard fail.
[22:50:01] *** Quits: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[22:50:14] *** Joins: discord-raku-bot (~RakuIRC@95.90.183.75)
[22:50:50] <moon-child> Voldenet: actually processing a sheet involves a graph traversal.  I think a nested for-loop is fine in this case, since the interesting computation will happen on cells (rather than rows) anyway
[22:51:32] <Voldenet> + sheet is 2d grid of cells
[22:51:55] *** Quits: Kaiepi (~Kaiepi@156.34.47.253) (Remote host closed the connection)
[22:51:58] <moon-child> (or--depends how clever you are.  If I were making a spreadsheet, I would make its representation columnar and semi-sparse)
[22:52:49] *** Joins: Kaiepi (~Kaiepi@156.34.47.253)
[22:54:14] <Voldenet> if I were making a spreadsheet I'd write rdbms and then ditch the project before even getting into spreadsheet part ;)
[22:54:43] <Voldenet> all important problems were solved before spreadsheets anyway
[22:54:54] <moon-child> yes
[22:54:58] <moon-child> spreadsheets are dumb
[22:55:05] <moon-child> still a better operational model than unix‚Ñ¢
[22:56:45] <tbrowder> i'm not trying to solve the world's probs at the top level, just mine,one at a
[22:57:00] <moon-child> tbrowder: see, that's your mistake
[22:57:08] <tbrowder> time and hope it helps another
[22:57:10] <moon-child> you're likely to actually _get_ somewhere with that sort of strategy
[22:57:17] *** Joins: Sgeo (~Sgeo@user/sgeo)
[22:57:23] <Voldenet> True, to write perfect spreadsheets, you first need to solve world poverty problem
[22:57:30] <moon-child> and what's the point of getting places and doing things??
[22:58:13] <Voldenet> seriously though, especially when things are targeted to beginners - smaller function better
[22:59:14] <tbrowder> no srgument here, but this problem is to hide unnecessary stuff from the use
[23:00:06] <tbrowder> but use good practice while doing it if i can
[23:00:29] <Voldenet> and good CATCHes are good in locating errors as well, encapsulating them in subroutines makes the whole experience smoother later on
[23:01:52] <tbrowder> thanks for the useful comments. i'll improve the example and ask for review again.
[23:11:59] <discord-raku-bot> <Anton Antonov#7232> @moon-child "[...] If I were making a spreadsheet, I would make its representation columnar and semi-sparse"  -- Interesting statement. Can you expand on it?
[23:22:25] *** Quits: discord-raku-bot (~RakuIRC@95.90.183.75) (Remote host closed the connection)
[23:22:32] *** Joins: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de)
[23:26:49] *** Quits: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[23:27:02] *** Joins: discord-raku-bot (~RakuIRC@95.90.183.75)
[23:27:48] <tbrowder> note the Perl reader allows for that, but I turn missing or empty cells into '' for convenience
[23:29:17] <tbrowder> at least i plan that for my initial handling. i have to deal with some weird formats from inexperience spreadsheet creators
[23:30:14] <tbrowder> *inexperienced
[23:30:38] <tbrowder> with weird cell values sometimes.
[23:30:55] <tbrowder> or invalid values
[23:31:01] <moon-child> @Anton Antonov not sure what more there is to say.  Columnar means cells which are immediately above or below one another are stored contiguously.  Semi-sparse means we make an attempt not to store empty cells
[23:34:02] <tbrowder> anyway, i rearranged Voldenet's example per lizmat's comments, made a few other tweaks, and will update the issue example momentarily...
[23:41:38] <discord-raku-bot> <Anton Antonov#7232> @moon-child So, you would use the so called long format? (Which corresponds to a certain sparse array scheme.)
[23:42:53] <moon-child> yes.  Column stores rock
[23:43:01] <discord-raku-bot> <Anton Antonov#7232> @moon-child Do you consider having heterogenous value types in a column?
[23:43:25] <tbrowder> ok, so updated. notice i was able to eliminate the "next" statements, possibly due to moving the CATCH blocks per lizmat.
[23:43:28] <moon-child> sure.  That would just be a part of the sparse representation
[23:43:47] <moon-child> 'run of n packed integers; run of m spaces; a string; run of p floats'
[23:45:24] <tbrowder> yes, the original Excel xlsx files use such a format, and Perl's Spreadsheet::Read preserves it, but I don't
[23:46:05] <moon-child> yeah
[23:46:17] <moon-child> as I said, I wouldn't make a spreadsheet; but if I _were_ to do so...
[23:47:03] <tbrowder> anyhoo, interested parties please review doc issue #4016
[23:48:23] <Voldenet> looks good
[23:48:24] *** Quits: discord-raku-bot (~RakuIRC@95.90.183.75) (Remote host closed the connection)
[23:48:40] *** Joins: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de)
[23:48:43] <Voldenet> I'm not sure whether `say "" ~ .Str` or `say "", .Str` is better
[23:49:05] <moon-child> why do you need more than say .Str?
[23:49:22] <Voldenet> that's an excelent question - have you ever debugged a program where the error is just
[23:49:26] <Voldenet> "Invalid argument"? :D
[23:49:37] <Voldenet> without a stack trace, no less
[23:50:48] <tbrowder> ah, you folks are now point out good hints that would go toward make a good Raku post or a docs chunk  ;-D
[23:51:27] <tbrowder> *pointing *making
[23:51:32] <moon-child> Voldenet: oh, you mean like say "..." ~ .Str
[23:51:47] <Voldenet> Ah, right
[23:51:56] <tbrowder> gotta get back to real world
[23:51:59] <tbrowder> bye
[23:52:00] *** Quits: gfldex (~dex@ip5f5ab74b.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[23:52:00] <moon-child> not literally an empty string :P
[23:52:03] <moon-child> tbrowder: cya
[23:52:13] *** Joins: gfldex (~dex@ip5f5ab74b.dynamic.kabel-deutschland.de)
[23:52:24] <tbrowder> thanks all, cya2
[23:52:39] <discord-raku-bot> <Hydrazer#4827> ~ looks cooler
[23:52:53] <moon-child> for me , is less mental overhead
[23:53:35] *** Quits: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[23:53:47] *** Joins: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de)
[23:54:00] <Voldenet> I use ~ more because it works in the context where you need to just pass the string
[23:54:20] <moon-child> yeah.  ~ is more general, , is more specific
[23:54:31] <moon-child> more specific methods require less context to parse
