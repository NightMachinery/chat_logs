[00:02:40] <Josh_2> Yes (find-user.. ) works at the top level when I wrap it with a (pomo:with-connection ..)
[00:06:26] <Josh_2> It works when I call authorize-login-page but it doesn't work when its called by Hunchentoot
[00:12:03] <Josh_2> I will make an issue on github
[00:28:29] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[00:32:31] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:34:35] *** Joins: akoana (~ah@user/akoana)
[00:36:43] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Remote host closed the connection)
[00:37:29] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[00:39:32] *** Joins: hineios3 (~hineios@a95-93-142-124.cpe.netcabo.pt)
[00:40:40] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[00:41:28] *** Quits: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt) (Ping timeout: 272 seconds)
[00:41:28] *** hineios3 is now known as hineios
[00:50:06] *** Joins: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte)
[01:10:57] *** Quits: mister_m` (~user@c-73-110-154-209.hsd1.il.comcast.net) (Remote host closed the connection)
[01:17:24] *** Quits: makomo (~makomo@user/makomo) (Quit: WeeChat 3.0.1)
[01:19:16] *** Quits: cage (~cage@dynamic-adsl-78-15-22-223.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[01:39:58] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[01:44:28] *** Joins: kpoeck (~kpoeck@87.140.193.0)
[01:49:26] *** Joins: isekaijin (~pyon@user/pyon)
[01:55:34] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 272 seconds)
[01:55:57] *** Joins: rgherdt (~rgherdt@ip5f5af43c.dynamic.kabel-deutschland.de)
[01:59:41] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[02:01:20] *** Joins: PinealGlandOptic (~PinealGla@37.115.210.35)
[02:06:20] *** Quits: IAmRasputin (~ryan.gann@c-71-192-113-162.hsd1.ma.comcast.net) (Ping timeout: 272 seconds)
[02:06:20] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 255 seconds)
[02:07:30] *** Joins: derelict (~derelict@user/derelict)
[02:16:55] *** Quits: zephyr (~alandiper@ec2-34-230-252-114.compute-1.amazonaws.com) (Read error: Connection reset by peer)
[02:16:58] *** Joins: zephyr0 (~alandiper@ec2-34-230-252-114.compute-1.amazonaws.com)
[02:17:10] *** Quits: cuz (~user@38.140.58.234) (Ping timeout: 246 seconds)
[02:17:46] *** Quits: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte) (Ping timeout: 240 seconds)
[02:27:23] *** Quits: pve (~pve@176-93-7-215.bb.dnainternet.fi) (Quit: leaving)
[02:29:25] *** Quits: rgherdt (~rgherdt@ip5f5af43c.dynamic.kabel-deutschland.de) (Ping timeout: 246 seconds)
[02:29:36] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Quit: ERC (IRC client for Emacs 28.0.50))
[02:33:19] *** Joins: karlosz (~karlosz@router.cloyne.org)
[02:35:36] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[02:35:45] *** zephyr0 is now known as zephyr
[02:43:47] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[02:50:22] *** Joins: defaultxr (~defaultxr@99-138-110-241.lightspeed.cicril.sbcglobal.net)
[02:53:22] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 240 seconds)
[02:53:46] *** Joins: pillton (~user@2405:b000:703:2::35:28)
[02:54:47] *** Joins: taiju (~taiju@240b:253:ec40:2400:654f:7566:b735:5f06)
[03:21:23] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[03:22:41] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[03:30:53] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[03:30:58] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 240 seconds)
[03:34:29] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[03:59:49] <defaultxr> hi, is there any way i can make slime/sly's M-. jump to a location for a symbol without actually defining a function or variable with that symbol as its name?
[04:00:21] *** Quits: Alfr (~Alfr@user/alfr) (Killed (osmium.libera.chat (Nickname regained by services)))
[04:00:25] *** Joins: Alfr (~Alfr@user/alfr)
[04:01:00] <Xach> defaultxr: i believe there's a library to do something like that - to record a source location for a thing in a portable way
[04:01:29] <Xach> hmm, don't remember a name though :(
[04:02:10] <defaultxr> hmm, alright, thanks for the pointer, i'll see if i can find anything
[04:05:00] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.2)
[04:05:27] <pillton> defaultxr: An interesting request! What does the symbol represent?
[04:06:52] <Xach> Hmmmmm
[04:13:31] <etimmons> defaultxr: I think mgl-pax has some way of making slime do that. Could be misremembering, though.
[04:15:45] <defaultxr> etimmons, mgl-pax does look promising, thanks
[04:16:37] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[04:21:02] <defaultxr> pillton, usually they are just instances of classes. the instances can be optionally named and looked up by those names later, without polluting the normal symbol namespace of any packages. for example, one of my libraries is used to load audio files into buffers, and having the buffers referenced by the string of the filename means i can ensure that the user doesn't accidentally load 2 copies
[04:21:05] <defaultxr> of the same file if they recompile the lisp file where the audio file is loaded in
[04:21:35] <defaultxr> technically i don't need to have M-. working for the names of the class instances, but it would be nice
[04:23:25] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[04:26:35] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[04:27:41] *** Joins: cjb (~cjb@user/cjb)
[04:34:18] *** Joins: lisp123 (~lisp123@5.30.23.247)
[04:36:50] *** Joins: amb007 (~a_bakic@101.246.204.77.rev.sfr.net)
[04:36:50] *** Quits: amb007 (~a_bakic@101.246.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[04:37:06] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[04:38:53] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 255 seconds)
[04:43:01] *** Quits: kpoeck (~kpoeck@87.140.193.0) (Ping timeout: 246 seconds)
[04:44:10] *** Quits: random-nick (~random-ni@87.116.179.235) (Ping timeout: 246 seconds)
[04:46:46] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[04:48:22] *** Joins: random-nick (~random-ni@87.116.179.235)
[04:50:04] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[04:52:08] <pillton> defaultxr: Right. I'm not sure I agree with using M-. for that. I wonder if you can use SLIME presentations to add a menu option when you right click on a symbol or one of your instances?
[04:54:32] <defaultxr> i'm not familiar with slime presentations tbh, i'd have to look into that
[04:54:33] *** Quits: cammie (~cammie@2001:470:69fc:105::b993) (Quit: issued !quit command)
[04:54:59] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[04:55:18] <defaultxr> personally i think M-. makes perfect sense if i'm able to add the instance as a definition in the M-. list without overwriting any variable or function source locations in the process. but to each their own
[05:00:02] *** Quits: sp41 (~spal@64.253.214.14) (Quit: leaving)
[05:01:54] <_death> well, the menu already has Find Definition
[05:04:02] <_death> so if, say, sb-introspect:find-definition-source were a generic function, and you had a nice interface to generate a method like in https://plaster.tymoon.eu/view/2545#2545 ...
[05:06:00] <defaultxr> yeah, it being a generic function would be ideal (though i'd of course prefer a solution that works on more implementations than just sbcl)
[05:06:21] <defaultxr> (and on sly too, not just slime)
[05:15:55] *** Quits: random-nick (~random-ni@87.116.179.235) (Quit: quit)
[05:17:06] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (Quit: WeeChat 2.2-dev)
[05:20:49] <_death> there is also (swank:ed-in-emacs '("/home/death/tmp/foo.lisp" :position 77)) I guess
[05:22:52] <_death> (which, if you apply a small patch to have it return true, can be added to sb-ext:*ed-functions* so you can use cl:ed ;)
[05:23:51] *** Quits: cjb (~cjb@user/cjb) (Ping timeout: 246 seconds)
[05:27:17] <defaultxr> true, i could probably use that, though i was hoping for something that would better integrate with M-. since i think that is in more common use than cl:ed
[05:38:31] *** Quits: flip214 (~marek@user/flip214) (Ping timeout: 272 seconds)
[05:55:37] *** Joins: igemnace (~ian@user/igemnace)
[05:58:43] *** Joins: char (~Srain@cpe-76-186-124-165.tx.res.rr.com)
[06:07:42] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Remote host closed the connection)
[06:14:59] *** Joins: flip214 (~marek@h081217094109.dyn.cm.kabsi.at)
[06:24:50] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[07:01:18] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[07:04:41] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 255 seconds)
[07:25:27] *** Quits: Josh_2 (~user@37.25.47.130) (Remote host closed the connection)
[07:33:50] <beach> Good morning everyone!
[07:45:29] <cheers> good morning!
[07:50:49] <beach> Hello cheers.
[07:54:26] *** Joins: rt (~robin@user/terpri)
[07:55:31] *** Quits: robin (~robin@user/terpri) (Ping timeout: 256 seconds)
[07:57:23] *** Joins: rt` (~robin@user/terpri)
[08:00:02] *** Quits: rt (~robin@user/terpri) (Ping timeout: 255 seconds)
[08:00:12] *** Joins: cmack (~charlie@99-97-140-18.lightspeed.nsvltn.sbcglobal.net)
[08:06:17] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[08:09:22] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 240 seconds)
[08:09:52] <kakuhen> I have stumbled on yet another CCL bootstrapping problem, and it's way beyond my knowledge and understanding
[08:10:31] <kakuhen> while I was able to successfully bootstrap 1.12.1 from 1.12 on FreeBSD/amd64, Linux is giving me problems (with the same computer) when I attempt loading the bootstrap image
[08:11:04] <kakuhen> I'm getting dropped into the lisp kernel debugger in the middle of loading some streams fasl -- even though I received no warnings or errors when compiling ccl or the level-0 files
[08:12:52] <beach> Maybe someone should rethink CCL bootstrapping, just like it was done for CMUCL.
[08:13:05] *** Quits: taiju (~taiju@240b:253:ec40:2400:654f:7566:b735:5f06) (Ping timeout: 255 seconds)
[08:21:43] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[08:22:54] <kakuhen> the documentation notes that it should be (in theory) possible to compile ccl from another cl implementation, but such a process is experimental and not officially supported
[08:23:36] <kakuhen> in any case, i should probably just be happy with the binaries i'm already provided -- the bootstrap attempt was more of an exercise to see if I could do it on linux, since the distribution I'm on does not offer any official packages for CCL, but it does for ECL
[08:25:50] <beach> kakuhen: rme told me that, while it would be possible to make it so that CCL can bootstrap from other Common Lisp implementations, "it is probably not worth the effort to make it happen" [or something to that effect].
[08:28:24] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[08:29:24] <moon-child> that is a shame
[08:31:06] <beach> I think some day I need to turn the SICL bootstrapping procedure into an implementation-independent library, so that it can be used by other implementations too.  But I currently have absolutely no idea how to do that.
[08:36:01] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:40:25] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 246 seconds)
[08:42:29] *** Joins: akoana (~ah@user/akoana)
[08:56:15] *** Quits: ^[ (~user@user//x-8473491) (Read error: Connection reset by peer)
[08:56:43] *** Joins: ^[ (~user@user//x-8473491)
[09:05:14] *** Quits: srhm (~ascii@user/srhm) (Remote host closed the connection)
[09:05:46] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 240 seconds)
[09:13:03] *** Joins: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte)
[09:23:17] *** Quits: char (~Srain@cpe-76-186-124-165.tx.res.rr.com) (Ping timeout: 255 seconds)
[09:23:53] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[09:24:42] *** Joins: akoana (~ah@user/akoana)
[09:30:35] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:31:23] *** Joins: robin__ (~robin@user/terpri)
[09:33:37] *** Quits: rt` (~robin@user/terpri) (Ping timeout: 246 seconds)
[09:48:58] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[10:06:51] *** Joins: dsk (~dsk@user/dsk)
[10:17:15] *** Joins: shka (~herr@109.231.62.239)
[10:20:44] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Quit: WeeChat 3.1)
[10:24:45] *** Joins: rgherdt (~rgherdt@ip5f5af43c.dynamic.kabel-deutschland.de)
[10:32:16] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 268 seconds)
[10:32:23] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[10:32:40] *** Quits: MichaelRaskin (~MichaelRa@ipb21b6221.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[10:34:14] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[10:50:44] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 258 seconds)
[10:50:57] *** Joins: amb007 (~a_bakic@85.246.204.77.rev.sfr.net)
[10:55:05] *** Quits: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte) (Ping timeout: 255 seconds)
[11:19:34] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[11:29:39] <pjb> beach: Perhaps doing something metalinguistically like in scheme? https://www.youtube.com/watch?v=SrKj4hYic5A
[11:32:21] <beach> Looks interesting.  I'll watch it later.  I am not sure how relevant it is to Common Lisp bootstrapping, though.  I guess I'll find out.  I mean, SICL bootstrapping is already pretty "meta".
[11:34:46] <beach> The first few phases of SICL bootstrapping can be seen as building a circular graph of classes (MOP classes and other essential classes) and generic functions (again MOP and other essential functions).  And we do that by using the standard tools like DEFCLASS, DEFMETHOD, DEFCLASS, DEFUN, DEFMACRO, etc.
[11:34:48] <pjb> beach: each meta-level has its own environment, and processes the lower level.
[11:35:11] <pjb> I imagine that a first step to bootstrap an implementation, is being able to implement and run it inside another implementation.
[11:35:23] <beach> Exactly.
[11:35:44] <beach> That's taken care of with first-class global environments and the AST evaluator.
[11:35:59] <pjb> So in your current system the standard tools are the meta level for the new (bootstrapping) level.
[11:36:04] <beach> I am not sure about this "level" approach, though.
[11:36:37] <pjb> Is it not implied by your various bootstrapping phases?
[11:36:45] *** Joins: Cymew (~ante@host-217-213-66-127.mobileonline.telia.com)
[11:37:38] <beach> I don't see that as levels, no.  Each phase is merely meant to make the object representation different.  First, we use host objects, then bridge objects, and finally ersatz objects.
[11:38:11] <beach> There are no "levels" in the sense of limited functionality or expressiveness in any level.
[11:38:23] <pjb> But perhaps having those bootstrapping phases is only an artifact of the development process. I mean, what would prevent to use the current implementation to generate everything of the new implementation completely independently of the current environment, in one single phase?
[11:38:52] *** Quits: amb007 (~a_bakic@85.246.204.77.rev.sfr.net) (Ping timeout: 272 seconds)
[11:39:04] *** Joins: amb007 (~a_bakic@241.199.204.77.rev.sfr.net)
[11:39:28] <pjb> beach: http://lampwww.epfl.ch/~amin/doc/lms-black.pdf
[11:40:08] *** Quits: raeda (~raeda@24.18.16.139) (Ping timeout: 272 seconds)
[11:40:13] <beach> So the problem I solve is the following:  If I do something like "make-instance" in the host, it will create an opaque host object.  But I need to do that in order to create some SICL classes like T, standard-object, etc.
[11:41:14] *** Quits: pillton (~user@2405:b000:703:2::35:28) (Quit: ERC (IRC client for Emacs 27.2))
[11:41:35] <beach> I then make a new MAKE-INSTANCE etc. that creates instances of those classes that have slots that SICL needs.
[11:41:52] <beach> But they are till host instances, though no longer host classes.
[11:42:04] <pjb> Yes, because you want to re-use the same source in different contexts.
[11:42:19] <beach> Then I define a new MAKE-INSTANCE that take those funny non-host-classshes and create more SICL-like objects called ersatz objects.
[11:42:26] <pjb> But instead, you could just generate a binary that will have a single make-instance in the new image.
[11:42:41] <beach> Oh, I do.
[11:42:46] <beach> Or, rather, I will.
[11:43:09] <beach> All this discussion is just for creating the initial object graph.  No binary yet.
[11:43:15] <pjb> Yes. I understand the step-by-step approach you use, but as a development/learning/testing process.
[11:43:30] <pjb> Ultimately, it could be done in a single step.
[11:44:15] <pjb> Anyways; off to work, now.  Have a good day!
[11:44:22] <beach> The steps are not important as you point out, but I need several different first-class global environments, each one containing objects represented in a different way.  And I need three different such representations.
[11:44:30] <beach> You too.
[11:45:41] *** Joins: pve (~pve@37-136-146-232.rev.dnainternet.fi)
[11:45:44] <beach> So I naturally divided the bootstrapping procedure into three (plus a few more for initial and final stuff) phases, each phase creating objects with a different representation in a different first-class global environment.
[11:47:44] *** Quits: amb007 (~a_bakic@241.199.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[11:48:01] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:57:45] *** Joins: rhett (Username@174-126-122-77.cpe.sparklight.net)
[11:57:54] *** Quits: rhett (Username@174-126-122-77.cpe.sparklight.net) (Excess Flood)
[11:58:32] *** Joins: treflip (~user@95.79.32.99)
[12:03:38] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[12:17:14] *** Joins: joeyxl (~joeyxl@2607:fea8:339f:d8a0:80ae:c19d:c509:c031)
[12:25:20] *** Quits: joeyxl (~joeyxl@2607:fea8:339f:d8a0:80ae:c19d:c509:c031) (Quit: Quit)
[12:25:35] *** Joins: joeyxl (~joeyxl@2607:fea8:339f:d8a0:80ae:c19d:c509:c031)
[12:33:39] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[12:34:39] *** Joins: amb007 (~a_bakic@241.199.204.77.rev.sfr.net)
[12:34:40] *** Quits: amb007 (~a_bakic@241.199.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[12:34:58] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[12:36:32] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:39:09] *** Quits: joeyxl (~joeyxl@2607:fea8:339f:d8a0:80ae:c19d:c509:c031) (Remote host closed the connection)
[12:39:38] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:43:11] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:47:35] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 255 seconds)
[12:52:04] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[12:52:58] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[12:53:17] *** Lord_of_Life_ is now known as Lord_of_Life
[12:57:14] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:05:22] *** Quits: cmack (~charlie@99-97-140-18.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 240 seconds)
[13:10:21] *** Joins: attila_lendvai (~alendvai@1F2E5EC7.dsl.pool.telekom.hu)
[13:14:17] *** Quits: attila_lendvai (~alendvai@1F2E5EC7.dsl.pool.telekom.hu) (Remote host closed the connection)
[13:15:09] *** Joins: attila_lendvai (~alendvai@1F2E5EC7.dsl.pool.telekom.hu)
[13:16:48] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[13:19:46] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 240 seconds)
[13:28:38] *** Quits: Cymew (~ante@host-217-213-66-127.mobileonline.telia.com) (Ping timeout: 268 seconds)
[13:33:46] *** Quits: pjb (~pjb@user/pjb) (Read error: Connection reset by peer)
[13:46:46] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:f08c:c9bc:4856:b89a)
[13:53:02] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:53:34] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:55:16] *** Joins: selwyn (~selwyn@user/selwyn)
[13:58:10] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[14:01:59] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:28:45] <Devon> Anyone know a source compare tool superior to unix diff?
[14:29:53] <contrapunctus> Devon: Emacs ediff? 😀
[14:30:57] <Devon> contrapunctus: thx, I'll try it.
[14:35:21] <contrapunctus> Devon: someone also suggested Delta, once - https://github.com/dandavison/delta
[14:40:28] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[14:42:14] <Devon> contrapunctus: Delta is merely "A viewer for git and diff output" like emacs diff-mode.
[14:45:08] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 252 seconds)
[14:45:43] *** Joins: amb007 (~a_bakic@241.199.204.77.rev.sfr.net)
[14:47:57] <Devon> contrapunctus: Emacs ediff is merely "a comprehensive visual interface to diff & patch" so neither of them actually differs from unix diff.
[14:49:47] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[14:52:37] <Devon> Delta and ediff could be front ends to something better than diff.
[14:52:49] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 246 seconds)
[14:54:09] <splittist> Devon: on what dimension(s) are you measuring superiority?
[14:57:50] *** Quits: attila_lendvai (~alendvai@1F2E5EC7.dsl.pool.telekom.hu) (Read error: Connection reset by peer)
[14:58:07] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[14:58:20] *** Joins: attila_lendvai (~alendvai@1F2E5EC7.dsl.pool.telekom.hu)
[14:59:06] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:01:06] *** Quits: amb007 (~a_bakic@241.199.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[15:01:18] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:02:12] <Devon> splittist: LOL, oh, more like what I'd've written myself.
[15:02:14] <Devon> splittist: smarter choices of where to split hunks.
[15:03:50] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[15:07:30] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[15:25:11] <splittist> Devon: smarter by having knowledge of the underlying semantics of the string? Absolutely. The trick would be to make a tractable way to specify the various edit operations and their costs. I do sometimes wonder if speed is all that important for actual human-readable texts.
[15:31:05] *** Joins: random-nick (~random-ni@87.116.179.201)
[15:34:46] *** Quits: random-nick (~random-ni@87.116.179.201) (Client Quit)
[15:35:41] *** Joins: random-nick (~random-ni@87.116.179.201)
[15:40:54] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:f08c:c9bc:4856:b89a) (Remote host closed the connection)
[15:45:25] *** Joins: lonzo (~lonzo@user/lonzo)
[15:51:24] *** Joins: pjb (~pjb@user/pjb)
[15:54:07] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:55:27] *** Joins: Cymew (~ante@host-217-213-67-230.mobileonline.telia.com)
[16:07:45] <jmercouris> how come (write 'salmon :stream nil) still shows up in my REPL?
[16:07:51] <jmercouris> I would expect it to show up once, but not twice...
[16:08:14] <jmercouris> AKA the return value of the function
[16:08:20] <jmercouris> but not the printing of 'salmon
[16:17:12] <jmercouris> I would have thought that any stream other than t would result in it not printing
[16:18:37] <jmercouris> also with regards to the previous discussion, there is a diff tool that works with SEXP
[16:21:37] <polygon-op> when stream is specified as nil, then it defaults to the standard output
[16:21:51] <jmercouris> son of a potato, I should have read the CLHS more carefully
[16:21:54] <jmercouris> thanks polygon-op
[16:22:43] <polygon-op> I suppose that it could be written differently, i.e (defun write (object &key (stream-p nil stream) …) ) and act based on the fact whether stream-p is true
[16:23:00] <polygon-op> on the other hand nil is not a valid output stream designator
[16:23:34] <polygon-op> (handling nil is a feature of the function format)
[16:24:24] <jmercouris> which is why I thought to pass in nil actually
[16:24:35] <jmercouris> sneaky tomatoes
[16:24:43] <jmercouris> s/tomatoes/language developers
[16:24:48] <jmercouris> sorry, typo
[16:24:56] <polygon-op> neither makes sense to me
[16:25:03] <jmercouris> oh, that's OK :-)
[16:25:06] <jmercouris> it doesn't matter anyway
[16:25:11] <jmercouris> I'm just being silly
[16:25:43] <scymtym> what you expected (write … :string nil) to do is basically the function WRITE-TO-STRING
[16:25:50] *** Joins: cage (~cage@dynamic-adsl-78-15-46-179.clienti.tiscali.it)
[16:26:06] <jmercouris> is "TOMATO" the same as TOMATO?
[16:26:12] <polygon-op> s/[:]string/[:]stream/
[16:26:24] <jmercouris> It's a rhetorical question of course
[16:26:57] <polygon-op> please stick to the channel topic
[16:27:23] <jmercouris> I'm sorry you weren't able to connect the dots
[16:27:23] <scymtym> polygon-op: right, thanks
[16:27:44] <jmercouris> I was pointing out that (WRITE-TO-STRING 'tomato) -> "TOMATO"
[16:27:50] <jmercouris> which is not the same as (write 'tomato)
[16:29:06] <scymtym> i'm confused. shouldn't the comparison be with (with-output-to-string (stream) (write 'tomato :stream stream))? i thought that was the intended behavior
[16:29:41] <jmercouris> I'm actually working on a different problem, not interested in writing a string
[16:29:41] <polygon-op> it should, that's just lack of understanding the difference between the return value and the stream output ,) /me carries with his day
[16:31:34] <scymtym> but what is the desired behavior if it is neither returning a string nor writing to a stream?
[16:32:32] <jmercouris> nevermind, I have solved it
[16:33:19] <scymtym> ok
[16:48:24] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[17:00:44] <shka> Devon: i heard good thing about meld
[17:01:16] <shka> but i mostly used good old kdiff3
[17:01:40] <shka> currently known as Kompare
[17:02:21] * polygon-op http://turtleware.eu/static/paste/0de83150-triangles.webm - "tracing" the triangulation algorithm in CLIM
[17:03:44] *** Quits: lonzo (~lonzo@user/lonzo) (Ping timeout: 252 seconds)
[17:04:22] <_death> cool stuff
[17:05:09] <polygon-op> thanks
[17:08:14] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[17:09:03] <shka> interesting
[17:09:30] <shka> this is part of something bigger?
[17:09:39] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:10:21] <polygon-op> this is part of switch to xrender
[17:10:31] *** Joins: IAmRasputin (~ryan.gann@c-71-192-113-162.hsd1.ma.comcast.net)
[17:10:32] <polygon-op> (and will be possibly reused in non-existant yet opengl backend)
[17:10:40] <shka> got it
[17:10:53] <shka> also wow@opengl
[17:11:20] <polygon-op> there is no work on opengl, just saying that triangulation could be useful
[17:14:32] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 272 seconds)
[17:14:39] <shka> got it
[17:31:52] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[17:38:06] *** Joins: srhm (~ascii@user/srhm)
[17:45:45] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:45:52] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:46:46] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:47:04] *** Quits: Cymew (~ante@host-217-213-67-230.mobileonline.telia.com) (Read error: No route to host)
[17:50:26] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 255 seconds)
[17:52:48] *** Quits: Devon (~user@c-24-2-157-5.hsd1.ma.comcast.net) (Remote host closed the connection)
[17:53:10] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[17:53:21] *** Joins: Devon (~user@c-24-2-157-5.hsd1.ma.comcast.net)
[17:54:06] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[17:54:24] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-57-65-92-163-194.dsl.bell.ca) (Quit: ZNC 1.8.2 - https://znc.in)
[17:54:43] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-57-65-92-163-194.dsl.bell.ca)
[17:55:23] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 255 seconds)
[17:57:46] *** Quits: leo_song (~leo_song@1.156.52.78) (Remote host closed the connection)
[18:00:27] *** Joins: Bike (~Glossina@71.69.170.70)
[18:00:27] *** ChanServ sets mode: +o Bike
[18:01:50] *** Quits: Posterdati (~posterdat@host-82-49-175-12.retail.telecomitalia.it) (Ping timeout: 252 seconds)
[18:03:37] *** Joins: Posterdati (~posterdat@host-82-49-175-12.retail.telecomitalia.it)
[18:04:23] *** Joins: leo_song (~leo_song@1.156.52.78)
[18:06:27] *** Quits: attila_lendvai (~alendvai@1F2E5EC7.dsl.pool.telekom.hu) (Remote host closed the connection)
[18:07:17] *** Joins: makomo (~makomo@user/makomo)
[18:07:54] *** Joins: attila_lendvai (~alendvai@1F2E5EC7.dsl.pool.telekom.hu)
[18:21:20] *** Joins: derelict (~derelict@user/derelict)
[18:27:48] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:38:14] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[18:57:28] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[18:58:10] *** Joins: raeda (~raeda@24.18.16.139)
[19:00:05] *** Quits: raeda (~raeda@24.18.16.139) (Client Quit)
[19:07:50] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 255 seconds)
[19:13:17] *** Quits: treflip (~user@95.79.32.99) (Quit: bb)
[19:24:39] *** Quits: PinealGlandOptic (~PinealGla@37.115.210.35) (Quit: leaving)
[19:28:01] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[19:31:50] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[19:31:51] *** Quits: attila_lendvai (~alendvai@1F2E5EC7.dsl.pool.telekom.hu) (Ping timeout: 268 seconds)
[19:34:50] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 255 seconds)
[19:42:02] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[19:42:27] *** Joins: selwyn (~selwyn@user/selwyn)
[19:49:14] *** Joins: leeb (~leeb@KD111239157039.au-net.ne.jp)
[20:08:54] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[20:12:20] <beach> It seems like someone could write a PDF viewer in Common Lisp as a nice project.  My evince has crashed four times today from a segmentation fault.
[20:13:29] <shka> sounds horrible
[20:13:50] <shka> enince used to be good
[20:13:56] <beach> Yeah.
[20:14:25] <shka> last time i used it was during the gnome 2 days
[20:14:38] <shka> but i hand no complains
[20:14:48] <shka> *had
[20:16:00] <beach> I can't for my life understand why someone would write something like Evince in C/C++, which is apparently what it is written in.
[20:16:32] <shka> C
[20:16:40] <shka> or could be vala actually
[20:16:48] <polygon-op> beach: if I may suggest - you could use atril which is evince fork (from before gnome 3)
[20:16:53] <polygon-op> it is fairly stable
[20:17:06] <beach> polygon-op: Thanks!
[20:17:31] <shka> okular from kde also works fine, but installing it bloats the system because KDE
[20:17:35] * polygon-op keeps quiet about his dissatisfaction with gnome embracing javascript :)
[20:18:02] <shka> yes, evince is written in C
[20:18:03] <beach> But I would like to see applications like this written in Common Lisp to avoid problems like this.
[20:18:50] <beach> Since such applications are already fairly large, it is no problem if the executable contains a full Common Lisp system.
[20:19:02] <shka> mmm, i would rather see a complete web browser in lisp
[20:19:11] <shka> but this would be an monumental task
[20:19:27] <beach> And these applications are generally useful, not only as part of a Lisp OS, so people can just go ahead and write them.
[20:20:53] <beach> shka: Let me say this again, even though I have said it several times.  I think with Common Lisp, there is no need to create a "complete web browser".  We could create library modules for the different tasks that a web browser does, like render HTML, render OGG/vorbis, render different video formats, etc.
[20:21:44] <beach> shka: So we can go ahead an create a "web browser" that makes use of the modules we already have, and that uses existing C or C++ modules where we don't have any.
[20:21:58] <shka> on the one hand, yes
[20:21:58] <beach> Then we can little by little migrate different modules to Common Lisp.
[20:22:41] <shka> on the other, i really with that there was a way to control the damn JS using restarts for instance
[20:23:33] <shka> or be able to hook into the html rendering by injecting mixins into the object representation of the html structure
[20:23:58] <shka> in general, i wish that the browser was hackable
[20:24:10] <beach> Either way, I don't think the need for a "complete web browser" eliminates a need for a document viewer, an editor for music scores, a layout program for printed circuit boards, a movie player, a music player, a figure editor, etc.
[20:25:01] <shka> no, my remark is that i don't really need hackable document viewer, i just need it view documents and not be a pain in the ass ;-)
[20:25:08] <beach> So, let me again urge people to start writing such application in Common Lisp so that we can avoid these crashes and other nasty behavior.  No need to wait for a Lisp OS to get started.
[20:25:44] <shka> anyway, have a good afternoon
[20:26:09] <beach> Me?  Thanks!  No reason not to.  You too!
[20:28:37] <shka> oh, one thing
[20:28:51] <shka> regarding snippets you were mentioning earlier
[20:29:40] <beach> Yes?  Do you want to discuss those in #sicl maybe?
[20:30:03] <shka> since it is also used in the context of the call site optimization, i think it would be a good idea to use fully qualified names when mentioning it
[20:30:13] <shka> beach: i honestly thought that i am on sicl :D
[20:30:38] <shka> (mentioning it in the documentation)
[20:31:01] <beach> What kind of "fully qualified names" do you mean?
[20:31:29] <shka> for instance "debugger snippet" vs "call site optimization snippet"
[20:31:38] <beach> Ah, OK.  Thanks!
[20:32:09] <shka> i am not an expert, but i think it can be confusing
[20:32:12] <shka> anyway, bye!
[20:32:22] <beach> Bye.
[20:44:19] *** Joins: rogersm (~rogersm@92.59.121.109)
[20:55:10] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[20:55:19] *** Joins: amb007 (~a_bakic@209.199.204.77.rev.sfr.net)
[20:55:20] *** Quits: amb007 (~a_bakic@209.199.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[20:55:33] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[20:57:49] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[20:58:32] *** Joins: amb007 (~a_bakic@209.199.204.77.rev.sfr.net)
[20:58:33] *** Quits: amb007 (~a_bakic@209.199.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[20:58:48] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[20:59:45] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[21:00:18] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[21:00:33] *** Joins: amb007 (~a_bakic@209.199.204.77.rev.sfr.net)
[21:03:52] *** Quits: Faed (fade@outrider.deepsky.com) (Remote host closed the connection)
[21:23:14] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[21:25:49] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:29:30] <contrapunctus> Would there be any value in making an implementation-independent static analyzer for Common Lisp code?
[21:30:22] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Quit: ZNC - https://znc.in)
[21:30:30] <contrapunctus> (In the spirit of Emacs Lisp Static Analyzer?)
[21:31:03] *** Quits: minion (~minion@common-lisp.net) (Remote host closed the connection)
[21:31:09] *** Quits: specbot (~specbot@common-lisp.net) (Remote host closed the connection)
[21:31:23] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[21:31:41] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:32:04] *** Joins: minion (~minion@common-lisp.net)
[21:32:06] *** Joins: specbot (~specbot@common-lisp.net)
[21:32:17] <Bike> i think beach's editor project is supposed to include this kind of capability
[21:34:32] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[21:45:17] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[21:48:46] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 272 seconds)
[21:58:44] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Quit: Connection closed)
[22:02:27] *** Quits: amb007 (~a_bakic@209.199.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[22:04:31] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[22:06:36] <jcowan> What is an "analyzer"?
[22:07:03] <jcowan> Is it supposed to do one job, like type checking, or a whole bunch of jobs, like `lint`?
[22:07:23] <Bike> judging by the readme for the emacs lisp static analyzer, it's a pickier compiler without the code generation part, so more like the latter
[22:09:38] *** Joins: Alfr (~Alfr@user/alfr)
[22:13:06] <jcowan> Classic lint would look for known bugs, generate style warnings, warn about easily abused constructions (like fallthrough between clauses without a /*fallthrough*/ comment, etc.
[22:14:53] <jcowan> Here's a cool example from Fortran:
[22:14:56] <aeth> not really popular because compilers tend to catch that, although they're hidden in the most common build process unless you :verbose t your QUICKLOAD
[22:15:46] <jcowan> DO 120 J=1,256 is a beginning-of-loop statement, where the body extends to the line numbered 120 and J is iterated between the given values.
[22:16:16] <Bike> it could be nice to have such things on-line in an editor, and without the additional complications of actual code generation
[22:16:52] <aeth> yeah, but C-c C-k compilation is typically so fast that I can see why that's not a priority
[22:17:03] <aeth> (per-file recompile will catch most things)
[22:17:08] <jcowan> But if you type a period for the comma, an easy mistake, the compiler sees this as DO120J = 1.256 and makes no complaint.
[22:18:47] *** Joins: dsk (~dsk@user/dsk)
[22:18:57] <jcowan> Lint for Fortran, on the other hand, will warn if it sees something like this because it does not ignore spaces, unlike the compiler which is required to do so.
[22:22:44] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 252 seconds)
[22:23:38] *** Joins: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte)
[22:32:45] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[22:33:33] *** Quits: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte) (Quit: Leaving)
[22:34:58] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 240 seconds)
[22:45:53] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[22:46:05] <pve> etimmons: Hey, can I bug you about ASDF a bit?
[22:58:20] *** Joins: attila_lendvai (~alendvai@1F2EF925.nat.pool.telekom.hu)
[23:09:02] *** Quits: attila_lendvai (~alendvai@1F2EF925.nat.pool.telekom.hu) (Ping timeout: 258 seconds)
[23:12:06] *** Quits: Devon (~user@c-24-2-157-5.hsd1.ma.comcast.net) (Quit: ERC (IRC client for Emacs 27.2))
[23:13:20] *** Joins: Devon (~user@c-24-2-157-5.hsd1.ma.comcast.net)
[23:14:58] *** Devon is now known as Devon7
[23:15:07] <contrapunctus> aeth: I thought only SBCL caught type errors at compile time?
[23:15:08] *** Devon7 is now known as Devon
[23:23:22] *** Joins: MichaelRaskin (~MichaelRa@ipb21b6221.dynamic.kabel-deutschland.de)
[23:23:22] *** ChanServ sets mode: +o MichaelRaskin
[23:23:23] <aeth> contrapunctus: In context, it's more about SBCL's STYLE-WARNING/NOTE functionality rather than its (fairly limited) type checking
[23:23:39] <aeth> (most NOTEs are hidden at default optimization levels, though)
[23:25:24] *** Joins: nature (~nature@mail.blazebone.com)
[23:31:20] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[23:32:00] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:36:29] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 255 seconds)
[23:38:45] *** Joins: clos-encounters (~user@167-248-4-131.oa01.lnk01.ne.dynamic.allophone.net)
[23:48:42] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:48:47] *** Quits: rogersm (~rogersm@92.59.121.109) (Quit: Leaving...)
[23:49:35] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[23:49:50] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[23:56:21] *** Joins: Fade (fade@outrider.deepsky.com)
