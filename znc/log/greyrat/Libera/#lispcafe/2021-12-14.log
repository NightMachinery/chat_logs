[00:08:15] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Remote host closed the connection)
[00:08:34] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[00:37:17] <shka> selwyn: i think that i got this omp stuff working in lisp
[00:37:26] <shka> but oh boy, lisp numeric code is CRAP
[00:37:41] <shka> no good libs at all
[00:37:45] <shka> numcl won't build
[00:40:02] <shka> and i had to write (metabang.math::svd-matrix-inverse matrix) because svd-matrix-inverse was not exported for some god damn reason
[00:41:17] <shka> luckly this code is not even performance sensitive so it is not as bad as it could be
[00:58:14] *** Joins: slyrus_ (~slyrus@192-184-223-165.static.sonic.net)
[00:59:29] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 250 seconds)
[01:02:31] *** Quits: slyrus_ (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 252 seconds)
[01:09:44] <random-nick> numcl builds for me on SBCL
[01:09:51] <random-nick> if I increase the dynamic heap size
[01:14:01] <random-nick> if I don't it exhausts the heap
[01:14:08] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[01:17:24] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[01:22:13] *** Quits: jurov (~jurov@rev-81-92-255-39.radiolan.sk) (Ping timeout: 240 seconds)
[01:24:43] <hayley> gilberth: Do you think I could get away with doing partial collections for small parts of oldspace?
[01:46:09] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[01:46:10] <clothespin_> does anybody know how to work gitlab.common-lisp.net
[01:46:12] <clothespin_> ?
[01:47:17] <hayley> You need to ask minion for a sign-up URL...somehow.
[01:47:28] <clothespin_> i am already logged in
[01:52:37] <pl> PhD stands for "Piled Higher and Deeper" :P
[01:53:11] <hayley> https://www.youtube.com/watch?v=RvciU4AJ5Cc
[01:53:12] -ixelp- Backwater (2004 Digital Remaster) - YouTube
[01:53:16] <hayley> clothespin_: Not sure then, sorry.
[01:53:45] <pl> https://phdcomics.com/
[02:34:05] <gilberth> Is gitlab.common-lisp.net for anyone to use for their projects?
[02:34:37] <moon-child> i think so
[02:34:44] <moon-child> i think you have to ask the irc bot for an account?
[02:35:08] <gilberth> In theory I have an ssh account with common-lisp.net.
[02:36:15] <gilberth> Anyhow, that's great news! This is better than using github.
[02:40:01] <gilberth> hayley: Why are you asking me? Do I look like a GC expert? What are you after?
[02:48:41] <hayley> idk
[02:48:59] <gilberth> You don't know?
[02:50:05] <hayley> Not really.
[02:50:34] <gilberth> Is there something you do know?
[02:50:43] <hayley> Caches exist, I guess.
[02:51:25] <gilberth> Have you seen them? Or is this hearsay?
[02:51:29] <hayley> It'd be useful for doing incremental GC on disks, without paging so much. And if each region is, say, L3 sized, the latency to chase pointers might be bearable.
[02:51:53] <hayley> Fair. /me goes to delid CPU and stare very carefully for caches.
[02:52:32] <hayley> OTOH https://www.extremetech.com/extreme/328851-amds-massive-milan-x-cpus-coming-in-q1-2022-with-768mb-of-l3-cache-64-cores is plenty of cache.
[02:52:34] -ixelp- AMD's Massive Milan-X CPUs Coming in Q1 2022 With 768MB of L3 Cache, 64 Cores - ExtremeTech
[02:52:38] <gilberth> Well, there was a time at which caches were external memory chips you could see. And pull.
[02:53:30] <gilberth> hayley: So you want to collect a disk? How would a partial collection look like?
[02:54:13] <hayley> If we have the remembered sets for it, we could just keep e.g. 2GB in primary memory and operate on just that.
[02:56:14] <gilberth> Hmm.
[02:56:52] <hayley> Well, if the SRAM is now stacked on top of the CPU, you could probably pull it, but it would be messy.
[02:57:28] <gilberth> They go 3d?
[02:58:26] <hayley> Then again, the persistent mature object space already exists and was benchmarked already.
[02:58:27] <hayley> Yes.
[03:02:28] * hayley gets an ad for the new MacBook Pro. "Starting from A$2,999"!?
[03:02:46] <hayley> I thought those were supposed to be (very relatively) cheap.
[03:04:47] <semz> Soon you'll be able to run an entire system without RAM, lol.
[03:06:10] <semz> 768MB would probably be enough for a lot of my daily work. No multitasking or Javascript though.
[03:10:07] <gilberth> Once 64kB was enough for daily work. I developed Closure with 16MB of RAM while running X11, Emacs, and Common Lisp.
[03:10:29] <gilberth> These days 768MB would not be enough for a web browser.
[03:11:49] <semz> I'd say 64KB is still in the domain where it limits what you can do.
[03:12:01] <gilberth> My Firefox currently is at 4.32GB on one machine here. I always wonder what that memory is used for.
[03:12:26] <semz> It has to calculate very hard when it'll freeze next and for how long.
[03:13:33] <semz> You can run Lynx or Links on 768MB, a surprising number of sites work with them.
[03:13:34] <gilberth> And I am not one of the ones with a gazillion tabs open. But I have a hunch about what the problem is.
[03:14:29] <gilberth> For tty browsing I would prefer w3m.
[03:15:32] <semz> Links has a graphical mode (links -g)
[03:17:27] <hayley> 1.5GB suffices for Emacs, SBCL, X and Firefox for me.
[03:18:03] <kakuhen> hayley: Find me a cheaper laptop that puts a 50V power line next to a 1V data line. You can't. Therefore the MacBook is actually cheap for what it offers.
[03:18:34] <kakuhen> (this is also why modern macbooks can all die with one drop of water in the right spot)
[03:19:30] *** Quits: susam (~susam@user/susam) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[03:19:40] *** Joins: susam (~susam@user/susam)
[03:20:04] <gilberth> I saw slides about Rust being used in Firefox. I now get the saga, they tried twice to make the renderer parallel and failed. And then rewrote in Rust. Anyhow, the slides said how they needed four words of storage for a single border-style attribute.
[03:21:06] <gilberth> That attribute could be undefined, one of a few enums like 'none', 'solid', and a 'dashed' would have an optional fixnum value.
[03:21:38] <hayley> kakuhen: lol
[03:21:59] <kakuhen> oh also the 50V - 1V thing is real
[03:22:27] <hayley> What would I offer for taking donations^Wsponsorships on GitHub? AIUI you're supposed to entice with something.
[03:22:39] <semz> I have no idea how anyone uses recent FF on 1.5GB, two tabs were enough to regularly choke my 2GB craptop. Was extra miserable due to Linux' awful OOM handling.
[03:22:51] <semz> 10 gigs of swap in constant use?
[03:22:52] <kakuhen> in particular it's in the 15 and 16 inch models -- the 1V line is supposed to go into some muxing chip that lets you switch between integrated and discrete graphics
[03:23:08] <kakuhen> and if a drop of water gets in between those two lines
[03:23:19] <kakuhen> you now have a dead muxing chip and your discrete gpu is forever off
[03:23:24] <gilberth> With Lisp that is one word for the enums. Just a keyword. For the dashed + fixnum pair, you could just say (:dashed . <n>), which is two words. So on average way less than two words as most borders are 'none' or not defined. So this single attribute alone takes four times the space with Rust as with CL.
[03:24:40] <gilberth> And when all for borders are set to same (:dashed . <n>) value, that would five words total for four attributes, as you can share that cons. Rust needs 16 words for that. Terrific! But it's fast and safe.
[03:25:23] <hayley> I have to set goals too? idk, the more the merrier really. If I was going to university in person, I might try to cover the (discounted) bus fare, which is like $4/working day.
[03:25:23] <gilberth> And btw, I don't see the problem in routing a 50V line next to a 1V line.
[03:26:44] <semz> tbf you probably wouldn't share the cons since the attributes would be parsed from CSS
[03:27:18] <gilberth> Hence my hunch is that Firefox is so afraid of sharing that there are gazillion copies of the same thing.
[03:27:39] <hayley> And FWIW I don't like any of the reward ideas. e.g. it'd be stupid not to give anyone access to pre-release versions, so I could have a larger testing userbase. And I am not prioritizing bugs either; I already have an idea of which are the worst.
[03:27:43] <hayley> semz: hash consing goes brrrr
[03:27:51] <semz> hehe
[03:28:15] *** Joins: zbrown[m] (~zbrownsys@2001:470:69fc:105::1:4e81)
[03:28:29] <gilberth> semz: When I parse 'border-style: dashed(10px)' or what ever their syntax is. You parse that 'dashed(10px)' once and distribute it to border-top, border-right, border-bottom, and border-left. It's r/o anyway.
[03:28:45] <semz> Ah fair enough.
[03:29:21] <hayley> Still, hash consing goes brrrr.
[03:29:30] <moon-child> hayley: in principle, if people think that they have exclusive access to the pre-release version, they may be more motivated to test it
[03:29:50] <hayley> I guess.
[03:30:18] <hayley> And I already push pre-release versions because 1. they're all pre-release and 2. I push branches too. What do they think people do instead?
[03:31:56] <gilberth> What is funny to note also, is that sharing and having a GC makes multithreading easier, not harder.
[03:32:20] <hayley> Indeed.
[03:32:47] <hayley> Moreso when you have lock-free algorithms, as you need a concurrent reclamation scheme, and a GC reduces the noise involved in that.
[03:32:59] <gilberth> I mean when your border-style attribute is a pointer to a border style value, stores are atomic automatically. When it is a four word struct as with Firefox, it's not and you need a lock.
[03:33:36] <hayley> Hmm...probably not the sense of "atomic" that any algorithm wants.
[03:33:51] <gilberth> And this is where Rust demands its Mutex<T>.
[03:33:56] <moon-child> hayley: why not?
[03:34:09] <moon-child> say I want to run the renderer in one thread, and a live css editor in another thread
[03:34:17] <hayley> You definitely won't have word tearing, sure, but you might want to fence/CAS/etc.
[03:34:24] <moon-child> I can swap out the attribute (atomically) and then mark the node as dirty (atomically)
[03:34:49] <gilberth> Yes, you can.
[03:34:59] <hayley> e.g. if you go out of order, and mark the node dirty before you swap the attribute, due to out of order execution...
[03:35:09] <gilberth> And everyone would see a proper value, either the old or the new, but no garbage.
[03:35:22] <moon-child> yes
[03:35:35] <gilberth> hayley: Granted, but Rust doesn't solve that either.
[03:35:38] <moon-child> hayley: sure, but you would not need a lock
[03:35:46] <moon-child> which you would if you needed 4 words
[03:35:52] <hayley> Sure.
[03:36:06] <hayley> gilberth: It "solves" OoO weirdness by disallowing it.
[03:36:31] *** Quits: LoopMacro (~LoopMacro@c-24-22-157-127.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[03:36:31] <moon-child> hayley: 'solves'--hmm, I think rust probably suffers from false sharing
[03:36:49] <hayley> It probably does.
[03:36:50] <moon-child> because you 'send' an object from one thread to another, while continuing to access objects allocated close-by on the first thread
[03:37:14] <hayley> It's game over if you have Arc<T> or Mutex<T> anyway.
[03:38:03] <gilberth> hayley: Is it guaranteed that two distinct Mutex<T> protected values written can't be seen out-of-order by an observer?
[03:38:26] <hayley> Yes, locking/unlocking produces fences/happens-before constraints.
[03:38:33] <gilberth> ok
[03:42:13] <gilberth> Anyhow. Rust is hypocritical. They brag about their Result<T> as this kind of forces you to check for errors, while i32 + i32 does yield an i32 with different semantics between debug and release mode. Shouldn't +/2 rather yield a Result<i32>, too?
[03:42:19] * hayley still wonders how to beg for money. Also, if the government would count sponsorship as a part-time job.
[03:42:36] <hayley> gilberth: x.checked_add(y) or something - beautiful, isn't it?
[03:43:10] <gilberth> hayley: But, I still may say x + y and the compiler does not complain.
[03:43:23] <hayley> Yes.
[03:43:31] <gilberth> This is not the philosophy they tell everywhere.
[03:43:54] <gilberth> And build for debug and you get overflow checks. Build for release you get modulo arithmetic.
[03:45:54] <hayley> Even still, /me thinks that sponsorship conflicts with her ethical standards. I'm not giving exclusive versions of anything out, and if someone wants to avoid even the damn BSD license, then they send me an email and we negotiate then and there.
[03:46:12] <gilberth> This gets me to the term "lazy". With C or Rust the compiler and runtime implementation is lazy and pushes all the burden onto the programmer, who they call lazy.
[03:46:37] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 240 seconds)
[03:46:42] <hayley> There's nothing that I can offer, really, I'd rather give it all out for free.
[03:46:59] <gilberth> And? What's the trouble with that?
[03:47:35] <hayley> Cause AIUI most people actually provide something if you donate to them.
[03:48:15] *** Quits: cranium (~cranium@user/cranium) (Ping timeout: 250 seconds)
[03:48:43] <semz> Maybe I'm missing something obvious, but what's the problem with getting paid to be able to work harder/more often on something?
[03:49:05] <hayley> e.g. my arch nemesis sells out and lets you ignore licensing for a mere $20/month.
[03:49:16] <semz> The enticement is that more work gets done
[03:49:17] <gilberth> hayley: Do they? I donate to "Médecins Sans Frontières" what do I get back? Far fetched, I know.
[03:49:57] <hayley> semz: That's the other thing, that I basically work at capacity when I am enjoying it too. So getting paid is really just shutting my parents up about it. 
[03:50:10] <gilberth> hayley: And when your software is free software you give something back to all of us.
[03:50:13] <hayley> gilberth: I guess.
[03:51:16] <gilberth> So I really don't see a problem.
[03:51:24] <hayley> Okay.
[03:52:04] <hayley> I just don't know how to ask for money, I guess. And in part it's only to shut my parents up, but I do need to leave home eventually.
[03:53:24] <gilberth> It happens often that people donate to others because they believe that it has value what they do, without benefiting themselfs. Thus my example of my donation to Médecins Sans Frontières. I believe they do important work, yet I am not benefiting from that.
[03:54:34] <gilberth> hayley: (1) silencing your parents is no good motivation (2) Asking is free (3) You'd need some elevator pitch of sorts.
[03:54:51] * hayley thinks of the Vinesauce software destruction video where the ad goes "How much money would you like to make" and Vinny says "one dollar" 
[03:55:06] <hayley> s/Vinny/Joel - see if I know my names
[03:55:36] <hayley> https://youtu.be/Gh0bczrw4NU?t=559
[03:55:36] -ixelp- [Vinesauce] Joel - Windows 10 Destruction - YouTube
[03:56:02] <hayley> Oh, the transcript is way out, so I have to find the point in the video myself. sigh
[03:56:16] <hayley> https://youtu.be/Gh0bczrw4NU?t=536 rather
[03:56:17] -ixelp- [Vinesauce] Joel - Windows 10 Destruction - YouTube
[03:56:23] <gilberth> Heh, my mother always said she does need just one $currency_unit. Always one more than she would spend.
[03:56:43] <hayley> "What kind of income is going to set you free?" "One dollar."
[03:58:03] <gilberth> Anyhow, when you can get money for doing useful work, go for it. Better than stacking shelves.
[04:04:07] * hayley decides to add "One working day of bus fare" as a donation amount.
[04:05:41] *** Joins: pjb (~pjb@user/pjb)
[04:07:06] <hayley> "Tier pricing must be an integer" Foo, it's $4.50 though.
[04:07:38] <moon-child> it is an integer, though--450 cents
[04:07:50] <hayley> True.
[04:07:59] * hayley decides to use pi dollars.
[04:11:06] <hayley> Also, is this AUD or USD? If the latter, the bus fare is definitely less than US$4.
[04:37:56] <gilberth> BAM! I can evaluate (setq ncons (lambda (x) (cons x nil))); (ncons 'foo) => (FOO)
[04:38:08] <gilberth> This took me how long?
[04:39:01] <hayley> Congrats.
[04:39:27] <gilberth> hayley, the funs starts now, as I want CATCH/THROW.
[04:39:53] * hayley uploads a picture of her proof of age card as an "identity card", but Stripe barfs on it.
[04:39:54] <gilberth> And even CAR could throw.
[04:40:01] <moon-child> gilberth: that wasn't very lisp-n of you
[04:40:37] <gilberth> moon-child: I am a lazy programmer, forgot?
[04:41:37] * hayley rotates the image very slightly and it works. Good machine learning!!
[04:42:07] <moon-child> gilberth: do it with SYMBOL-PLIST like it's the 60s
[04:43:01] <gilberth> moon-child: I was contemplating to do just that. :-)
[04:43:06] <moon-child> :)
[04:43:42] <gilberth> moon-child: Should I also have the PNAME as a list of fixnums with each fixnum being a number of packed chars?
[04:44:15] <moon-child> who needs fixnums?
[04:44:18] <hayley> Even better, the OCR or whatever is non-deterministic, and sometimes reuploading makes it work.
[04:44:23] <moon-child> all you need are symbols and conses
[04:45:08] <gilberth> Nah. All you need is closures. Cons cells are for the lazy.
[04:45:45] <moon-child> mutable conses are lazier than mutable closures
[04:45:59] <moon-child> s/lazier/easier/
[04:46:09] <moon-child> implementation wise
[04:46:20] <gilberth> No SETQ?
[04:46:26] * hayley now has to fill out a tax form.
[04:46:47] <moon-child> no lexical scope!
[04:46:58] <moon-child> hmm
[04:47:28] <moon-child> if you have both lexical and dynamic scope, as cl, then you need special cases
[04:47:32] <gilberth> Lexical scope always was there. It's the lexical closures they didn't came up with. Though there is FUNARG.
[04:47:34] <moon-child> but I guess you do not if you have _only_ dynamic scope
[04:49:03] <gilberth> What should it be? Shallow binding or deep binding?
[04:50:28] <hayley> Damn, where did I put my tax number?
[04:51:22] <gilberth> Anyhow, I now need an "enum" (who came up with the idea to call a variant an enum?) result type for all functions. One variant would indicate a throw. And I need to handle that everywhere.
[04:52:08] <gilberth> And I need to pass my dynamic environment down the route too. And the global.
[04:52:27] <hayley> The bank has it, but I cannot get it from them.
[04:54:38] <gilberth> Note that Rust has local functions, but those functions have no access to the outer scope either. Hmm.
[04:55:31] <moon-child> I thought it does have closures, they are just annoying?
[04:56:58] <gilberth> Hmm. Could they be mutuality recursive? I should check out. But this doesn't save me from that result enum, I would have to check for a throw everywhere.
[04:57:49] *** Quits: Catie (~user@user/catie) (Quit: Going home)
[04:58:05] <gilberth> Globals could be had with unsafe code. But no non-local exits. And one rule of the game is to not use any unsafe code.
[04:58:31] <gilberth> And before you ask, Rust does not guarantee TCO, so CPS won't work either.
[04:59:07] <moon-child> llvm has 'musttail'
[04:59:15] <moon-child> does rust perhaps expose that somewhere?
[04:59:39] <gilberth> moon-child: Who decrements the refcounts?
[05:00:41] <gilberth> Every time I use a value with x.clone() (rc increment) this is like an UNWIND-PROTECT with the decrement at the clean-up. Tail call cannot happen there.
[05:01:00] <moon-child> ah, yes, good point
[05:02:07] <moon-child> (aside: this is a shortcoming of c++: because it uses such mechanisms for memory management, THROW/CATCH must do more work)
[05:03:04] <gilberth> Yes and this is why FFI to setjmp/longjmp won't work for me.
[05:03:35] <gilberth> But with CL a non-local exit must unwind the dynamic environment, too.
[05:04:18] <gilberth> Sth people don't realize when they say that CL should specify TCO.
[05:04:25] <moon-child> yes.  But I think it is relatively rare for a function to open a file or bind a special variable
[05:04:30] <moon-child> and very common for a function to allocate memory
[05:05:16] <gilberth> BLOCK or TAGBODY could raise need of the dynamic environment, too.
[05:06:10] <gilberth> This could hide in things like CHECK-TYPE.
[05:06:27] <moon-child> could.  But again: irreducible usage of those is likely not to be nearly so common as memory allocation
[05:07:17] <gilberth> Of course not. And less common even than passing a pointer. I need that .clone() everywhere.
[05:07:58] <gilberth> Just for passing along.
[05:13:32] *** Quits: random-nick (~random-ni@87.116.160.199) (Ping timeout: 240 seconds)
[05:13:50] <gilberth> BTW I also miss a getc()/ungetc() like stream API for Rust. Either it is well hidden, or it is just not there.
[05:17:05] <moon-child> not there.  They use non-buffered i/o routines by default (read() rather than fread() &c)
[05:17:42] <gilberth> I noticed.
[05:18:43] <gilberth> I wonder, if I also have to cope with EAGAIN and EINTR.
[05:19:20] <hayley> moon-child: AIUI nope.
[05:19:40] * hayley reads https://www.irs.gov/instructions/iw8ben and faints.
[05:21:20] <moon-child> hayley: ?
[05:22:51] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 252 seconds)
[05:25:03] <hayley> moon-child: I have to fill out this form as part of the GitHub sponsorship shit.
[05:25:28] * hayley wonders if just leaving a <something>coin address would be more effective.
[05:25:40] <moon-child> I mean, what was 'nope' a response to?
[05:26:02] <hayley> "nope" to tail calling.
[05:26:33] <moon-child> oh ok
[05:29:37] <hayley> Can I just not bother with the part on "claiming treaty benefits"? IANAL and I don't feel like starting today.
[05:34:35] <hayley> Okay, seems I survived filling out the tax form.
[05:46:16] <gilberth> It's not too bad when I use Result<>, there is some default syntactic sugar for that.
[05:46:49] <hayley> https://github.com/cl-batteries standards.png
[05:46:50] -ixelp- cl-batteries · GitHub
[05:46:58] <hayley> https://xkcd.com/927/
[05:46:58] -ixelp- xkcd: Standards
[05:46:58] <gilberth> I can say foo(..)? and the ? would then either unwrap() or make the function return that Result<>
[05:48:25] <gilberth> hayley: Why do I have the feeling that I should not have a look at your link?
[05:48:35] <hayley> At least there's a RE library included in that group. But everything there has been done before, and the author doesn't really say why I should use their libraries.
[05:48:42] <hayley> gilberth: 20 libraries that have been done before.
[05:49:57] <gilberth> Well, for lexing there is CLEX. What was before that?
[05:50:22] <hayley> Henry Baker's "DISPATCH-TABLE on steroids" or something?
[05:51:04] <hayley> https://plover.com/~mjd/misc/hbaker-archive/Prag-Parse.html
[05:51:13] <gilberth> Yep. But does not build an DFA like CLEX. The olde even circa '97 or so.
[05:51:31] <gilberth> Milady, I know that article.
[05:51:54] <hayley> This was '91, so more olde.
[05:52:19] <gilberth> Yes, but not a DFA like lex(1) is.
[05:52:33] <hayley> There is a TLS library, but they use SBCL-specific FFI. Come on.
[05:52:34] <gilberth> For REs there also is nregex.cl
[05:52:53] <gilberth> FFI? What for?
[05:53:02] <hayley> And the coding style is miserable.
[05:53:05] <hayley> OpenSSL?
[05:53:40] <gilberth> Ah. See, hayley, I was right that reading that would not be safe. How did I know?
[05:54:06] <hayley> You knew because I posted a link that wasn't music to #lispcafe?
[05:54:45] <gilberth> Hmm. Perhaps. But at times you also post links to interesting papers.
[05:55:33] <hayley> It's also pretty easy to guess if it is a paper based on the URL.
[05:56:12] <gilberth> So post links to bad code only?
[05:56:27] <hayley> "The sheer size of these state tables may kill the advantage of instruction and/or data caches." Good thinking, but Baker's timing with the footnote suggests that this is only a DFA problem.
[05:57:14] <hayley> With Unicode, even a dear NFA would lead to huge tables. Though Unicode only was founded at the start of 1991.
[05:57:48] <hayley> gilberth: So, either music, interesting papers, or bad code and/or programming guides?
[06:02:58] <gilberth> You forgot memes.
[06:03:28] <hayley> Or memes, yes.
[06:03:40] <hayley> https://octodon.social/@CobaltVelvet/107440807609279745 I seriously hope no one actually tries this.
[06:05:41] <hayley> The praxis described by that link is incredibly dangerous, to not provide a license, since the author hasn't actively waived copyright and thus has the "right" to sue you for using the software.
[06:06:52] * hayley gets a spam call from Spain about someone spending $790 with her Amazon account (which doesn't exist).
[06:06:55] <moon-child> 'META uses a plethora of AND's and OR's, which can be quite inefficient if not compiled properly'   is he...I think he's talking about the performance of the compiler, not the generated code
[06:08:11] * gilberth 's code approaches line noise with ?s added after almost every function call.
[06:08:41] <gilberth> moon-child: Idk. It is said that the Lisp machine compiler is not particular clever.
[06:09:02] <hayley> Once again I would be somewhat happier if people read <https://applied-langua.ge/posts/the-poverty-of-post-open-source.html>.
[06:09:28] <moon-child> gilberth: later text talks about patching jump addresses
[06:10:18] <gilberth> Patch?
[06:10:43] <moon-child> yes.  As in a single-pass assembler
[06:10:55] <hayley> moon-child: "[16] Apple Coral Common Lisp for the Macintosh appears to handle short-circuits reasonably well."
[06:10:57] * moon-child tries to track down a copy of the first edition of the dragon book, which is referenced
[06:11:04] <hayley> I suspect it's runtime performance.
[06:11:57] <gilberth> moon-child: Are thinking about jumps to jumps to jumps?
[06:12:54] <moon-child> 'one can easily choose the correct short/long jump sequence'  sounds a _lot_ like trying to work with/around a single-pass assembler.  I guess it's both kinda
[06:14:02] * hayley did a lot of bullshit to make LC3-in-LC3 microcode only use short jumps.
[06:16:33] <hayley> Really, I should have made my control flow macros optimize better (e.g. if all cases are handled, then we don't need to jump over, and we don't need to test the last case actually). But instead I just hand coded some parts to shave off a few words.
[06:19:00] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[06:19:47] *** Quits: easye (~user@oxi.slack.net) (Ping timeout: 268 seconds)
[06:20:40] *** Joins: aeth (~aeth@user/aeth)
[06:50:17] * gilberth threw a tag and it was caught.
[06:52:41] <moon-child> ;o
[06:53:24] <gilberth> Why am I doing all this non-sense?
[06:53:45] <moon-child> because you are a masochist?
[06:54:36] <gilberth> I don't think so. It's my weird idea of "fun". Wait a second! Hmm.
[06:55:08] <moon-child> out of curiosity, do you also play dwarf fortress?
[06:55:31] <gilberth> Once you grew a habit of typing .clone() after each variable used and '?' after each function call, it's not that bad. ;)
[06:56:05] <gilberth> As I have no clue what dwarf fortress is, I believe the answer is "No".
[06:56:55] <moon-child> it's a video game.  Tag-line: 'losing is fun'
[07:25:04] <hayley> gilberth: Cause of fearless concurrency, trait based polymorphism, zero cost abstractions, efficient C bindings and the other stuff moon-child probably remembers?
[07:27:15] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[07:27:46] <moon-child> hmm.  How bad would it be to add 4 bytes of overhead to every object in old space?
[07:27:48] <gilberth> hayley: Should I do benchmarks, once I am done?
[07:28:03] <moon-child> I guess that's 25% for conses.  2 bytes?
[07:28:41] <hayley> How much does a dlmalloc add even?
[07:28:48] <dave0> maw
[07:28:59] <gilberth> hayley: We have cons cells.
[07:29:09] <moon-child> not sure.  But I think one of je and mi--forget which--boasted ~10% fragmentation
[07:29:26] <hayley> Looks like dlmalloc has two size words on either end of user data.
[07:29:32] <hayley> ...or rather, one either side.
[07:29:51] <gilberth> And? Is malloc your benchmark?
[07:29:54] <moon-child> but conses should be managed on a freelist, which has no overhead
[07:32:13] <moon-child> (don't need to keep size info around for fixed-size thingies when you have tags to tell you.  I think sicl spends a word on rack length; but I think that may be redundant)
[07:35:00] <moon-child> hmm, actually...
[07:35:33] <moon-child> my idea was to avoid false sharing by migrating objects between thread-specific regions of the global heap, or to a shared region (for contended objects)
[07:35:50] <moon-child> but, operating under the assumption that most objects--even old objects--will remain on the thread they were created
[07:36:30] <moon-child> can avoid allocating that meta-information until an object is actually accessed from a thread other than that which created it
[07:37:18] <moon-child> downside is it's then harder to get at the metadata; you would need a hash table or something like that
[08:03:55] *** Quits: semz (~none@user/semz) (Ping timeout: 250 seconds)
[08:16:29] *** Joins: semz (~none@user/semz)
[08:35:30] *** Joins: sifi (~sifisega@101.100.130.75)
[08:46:15] <moon-child> introducing CMOVCC: conditional move with current continuation
[08:56:29] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (Quit: Lost terminal)
[08:57:44] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[08:58:21] <gilberth> Ok. Here is a benchmark. My ulisp.c takes 0.17s for (FIB 30), the interpreter in Rust takes 10.5s with -O3. Both are interpreters. Using Arc<T> instead of Rc<T> speeds it up to 30s. Using Arc<Mutex<T>> gets me even more speed with 36s taken.
[08:58:53] <gilberth> I am impressed how fast Rust is.
[09:01:43] <gilberth> And Rust doesn't even cons the numbers, they are all tagged. ulisp.c has only 2000 preallocated "fixnums", the rest are consed.
[09:02:49] <moon-child> 'preallocated "fixnums"'  like cpython?
[09:03:07] <gilberth> Perhaps so. Never looked at what cpython does.
[09:03:23] <moon-child> all numbers are bignums, but those in the range -5 to 256 (or something like that) are hash-consed
[09:03:24] <gilberth> But (FIB 30) is way larger than 1000.
[09:04:12] <gilberth> I just have an array of the fixnum objects from -1000 to 1000. The rest is boxed.
[09:04:28] <gilberth> "fixnum" rather
[09:05:49] <gilberth> I am too lazy to bench Go, but my Lisp implementation in Go also was pretty fast and within reach of the C implementation.
[09:06:18] <gilberth> Ironically I can't pull the trick to stack allocate the lexical environments with Rust.
[09:10:15] <moon-child> how are your fibonaccis indexed?  And where do they start?  Is (fib 30) 832040, 1346269, or 2178309?
[09:10:38] <gilberth> Actually I am surprised that Rust is that slow here. That is factor of almost 60 for Rc<RefCell<T>> and 211 for Arc<Mutex<T>>. I doubt that I could apply that much clever coding to get into into reach of C, which I use as base line here.
[09:11:10] <moon-child> I get 2-7s depending.  But I have spent no effort on optimization and use abysmal representations for a number of things
[09:11:11] <gilberth> 1346269
[09:11:31] <moon-child> (that is in c)
[09:11:41] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (Read error: Connection reset by peer)
[09:12:00] <gilberth> What are you doing?
[09:12:11] <moon-child> running (fib 30) in a lisp interpreter written in c
[09:12:43] <gilberth> Your machine must be broken. :-)
[09:15:16] <gilberth> moon-child: Your own implementation?
[09:15:16] <moon-child> actually now I am curious why it is so slow.  I compile with -O2, and my poor object representation should not cause _that_ many problems
[09:15:22] <moon-child> the whole function is only 17 instructions
[09:15:33] <moon-child> global lookups are indirect, but not slow
[09:15:44] <moon-child> gilberth: yeah
[09:15:47] <gilberth> You compile to C?
[09:15:52] <moon-child> no, to bytecode
[09:16:19] <gilberth> Heh, my byte code is yet faster. :-p
[09:18:37] <gilberth> Oh, the version I benched didn't stack allocate even.
[09:20:55] <gilberth> I need to crash. I'll benchmark my Go version tomorrow.
[09:21:08] <moon-child> good night
[09:29:17] *** Joins: humasect (~humasect@2001:1970:57e0:4100::9e43)
[09:29:27] <dave0> byes gilberth !
[09:31:05] *** Quits: humasect (~humasect@2001:1970:57e0:4100::9e43) (Client Quit)
[09:32:06] *** Joins: humasect (~humasect@2001:1970:57e0:4100::9e43)
[09:36:11] <hayley> gilberth: Are you sure you did cargo build --release?
[09:36:22] <hayley> Debug builds are abysmally slow.
[09:36:32] * hayley never debugs Rust code, so doesn't even bother.
[09:38:08] <dave0> hayley: how's your tuesday? i deposited some money in my sisters bank for christmas presents for the nieces and nephews
[09:38:21] <hayley> It's a day.
[09:38:21] <dave0> i'm the uncle so my presents are just casg
[09:38:23] <dave0> cash
[09:38:34] <dave0> hayley: like every other day?
[09:38:41] <hayley> Yes.
[09:39:03] <dave0> covid life
[09:39:53] <dave0> oh i paid dad back $20 for smokes
[09:43:48] <hayley> https://www.youtube.com/watch?v=NSmJEGpZDI8
[09:43:49] -ixelp- Messages - YouTube
[09:44:44] * hayley reads -O3 and wonders if gilberth is invoking rustc directly. Dunno why, but she just hasn't done that ever.
[09:47:39] <hayley> Worse, I can only find -O in the documentation and you have to -C opt-level=3 for all optimisations?
[10:05:54] *** Quits: humasect (~humasect@2001:1970:57e0:4100::9e43) (Quit: Leaving...)
[10:07:24] * hayley gets the same Amazon scam call
[10:08:07] * hayley plays https://www.youtube.com/watch?v=2PoLaX4IA_0 very loudly to the helpdesk
[10:09:00] *** Joins: humasect (~humasect@2001:1970:57e0:4100::9e43)
[10:10:36] <hayley> They hung up after 25 seconds.
[10:24:43] *** Joins: shka (~herr@109.231.0.226)
[10:27:07] <hayley> https://twitter.com/dystopiabreaker/status/1469579222708457473
[10:28:27] <moon-child> at one point, somebody registered domains that were a bitflip away from google.com (and a few other notable ones--forget which) and got rather a lot of hits
[10:34:31] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[10:36:04] *** Quits: remexre (~remexre@user/remexre) (Remote host closed the connection)
[10:45:57] <shka> hi all
[10:46:54] <hayley> hi none
[10:47:11] *** Quits: humasect (~humasect@2001:1970:57e0:4100::9e43) (Remote host closed the connection)
[10:50:34] *** Joins: humasect (~humasect@2001:1970:57e0:4100::9e43)
[10:50:48] *** Joins: remexre (~remexre@user/remexre)
[10:50:55] <humasect> =)
[10:51:22] <moon-child> hi any
[10:53:41] <humasect> allo
[10:57:15] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 250 seconds)
[10:57:40] <hayley> hi some
[11:02:23] <humasect> hi ness 
[11:02:34] <gilberth> hayley: Indeed, a debug build needs 160s for (FIB 30).
[11:04:07] <gilberth> And yes, I used -C opt-level=3. I was writing "-O3" for brevity.
[11:15:22] *** Quits: luis (~luis@lisp/luis) (Ping timeout: 256 seconds)
[11:15:38] <hayley> Okay.
[11:15:46] *** Joins: luis (~luis@lisp/luis)
[11:20:31] <shka> gilberth: sun is up and you still awake
[11:20:43] <shka> you got some sunblock filter or something?
[11:21:45] <shka> why the fuck lisp numeric libs are so bad? :/
[11:22:04] <gilberth> shka: I already was in bed an woke up again, can't sleep. I am taking a break.
[11:22:51] *** Joins: cranium (~cranium@user/cranium)
[11:24:36] *** Joins: treflip (~user@95.79.32.99)
[11:30:01] * hayley does some accounting and remembers some other reasons she might have to work.
[11:30:28] <hayley> Apparently my dad got scammed out of getting paid some hours, and AFAICT he is going to quit this job again. And he is insulting my mum over dinner.
[11:33:43] <hayley> shka: #fortrancafe is that way -->
[11:33:56] <hayley> #lispcafe is for complaining about regex libraries.
[11:34:21] <shka> hayley: #perlcafe
[11:34:42] <shka> seriously though, using (format t...) as substitute for warn
[11:34:50] <shka> which should be error anyway
[11:36:23] <hayley> No, #perlcafe is for doing symbolic algebra, silly.
[11:37:02] <shka> i don't even expect blazing performance, just normal ass interface
[11:37:03] <shka> eeeh
[11:38:16] *** Quits: humasect (~humasect@2001:1970:57e0:4100::9e43) (Read error: Connection reset by peer)
[11:38:22] *** Joins: humasect_ (~humasect@2001:1970:57e0:4100::9e43)
[11:41:41] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[11:48:34] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[11:48:54] <shka> https://quickref.common-lisp.net/fsvd.html#index-approximation_002drmse
[11:49:05] <shka> excellent docstrings my lord
[11:49:10] *** humasect_ is now known as humasect
[11:49:57] <humasect> link to source where it was generated from?
[11:50:06] <moon-child> shka: I will try to excellent docstrings your lord, but I am not sure if I'll succeed
[11:50:35] * shka is annoyed
[12:00:04] <hayley> https://www.youtube.com/watch?v=GAj89NEqX-M
[12:00:05] -ixelp- Bombers - YouTube
[12:21:06] *** Joins: easye (~user@oxi.slack.net)
[12:26:47] <sham1> Meh, bad documentation is a feature of all programming
[12:27:37] <moon-child> yes, but auto-documentation is particularly bad
[12:27:50] <moon-child> even when it is done well, it can not match hand-written documentation
[12:28:00] <moon-child> but it is also prone to gaffs like that linked
[12:31:10] * hayley mentions <https://cal-coop.gitlab.io/netfarm/documentation/> and refuses to elaborate.
[12:32:48] <moon-child> hayley: now, handwritten documentation tends to get out of sync with source code
[12:32:51] <moon-child> you cannot win!
[12:33:13] <hayley> So do normal documentation strings! Foo!
[12:33:30] <sham1> Make it a merge hook to check that you always change documentation
[12:33:40] <moon-child> yeah but it's harder
[12:33:44] <hayley> I'll pitch it to the university startup thing: AI generated documentation from the source code. And I better throw in blockchain and metaverse just to be sure I get money.
[12:33:55] <moon-child> and you can never refer to a nonexistent function or formal parameter
[12:34:14] <moon-child> sham1: how can the hook know if you have made an incompatible change?
[12:34:48] <sham1> That's the neat part. It can't. But it might just make it easier for a human to catch it
[12:35:24] <moon-child> I daresay _most_ changes retain compatibility, especially in larger or more established codebases.  So you add a lot of busy work for little gain
[12:43:37] *** Joins: notzmv (~zmv@user/notzmv)
[12:57:34] <shka> sham1: i also had to use non-exported function
[13:05:27] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Read error: Connection reset by peer)
[13:08:35] *** Quits: greyrat_ (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[13:08:55] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[13:09:04] *** Quits: moon-child (~moon-chil@cardinal.elronnd.net) (Killed (NickServ (GHOST command used by childlikempress)))
[13:09:10] *** childlikempress is now known as moon-child
[13:10:22] *** Joins: selwynning (~selwyn@user/selwyn)
[13:10:39] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[13:11:37] *** Joins: ryanbw1 (~ryanbw@mab.sdf.org)
[13:11:53] *** Server sets mode: +nrt 
[13:16:44] *** Quits: shka (~herr@109.231.0.226) (*.net *.split)
[13:16:44] *** Quits: djuber (~user@65.79.128.64) (*.net *.split)
[13:16:44] *** Quits: clothespin_ (~awolven@c-73-209-95-92.hsd1.il.comcast.net) (*.net *.split)
[13:16:45] *** Quits: gilberth (~gilberth@p5b157756.dip0.t-ipconnect.de) (*.net *.split)
[13:16:45] *** Quits: okflo (~okflo@lisa.diesenbacher.net) (*.net *.split)
[13:16:45] *** Quits: greyrat_ (~greyrat@ip202.ip-51-178-215.eu) (*.net *.split)
[13:16:45] *** Quits: selwyn (~selwyn@user/selwyn) (*.net *.split)
[13:16:45] *** Quits: ryanbw (~ryanbw@mab.sdf.org) (*.net *.split)
[13:16:45] *** Quits: tetrahedron (~derelict@user/derelict) (*.net *.split)
[13:16:46] *** Quits: ratzkewatzke (~ec2-user@ec2-34-217-87-98.us-west-2.compute.amazonaws.com) (*.net *.split)
[13:21:27] *** Joins: ratzkewatzke (~ec2-user@ec2-34-217-87-98.us-west-2.compute.amazonaws.com)
[13:21:51] *** Joins: djuber (~user@65.79.128.64)
[13:21:51] *** Joins: clothespin_ (~awolven@c-73-209-95-92.hsd1.il.comcast.net)
[13:21:51] *** Joins: okflo (~okflo@lisa.diesenbacher.net)
[13:25:01] <hayley> https://www.youtube.com/watch?v=2ckAbYNYZSg
[13:25:02] -ixelp- Nightmare (Cymbaline) (‘The Man’ performed at the Concertgebouw, Amsterdam, 17 Sept 1969) - YouTube
[13:31:13] *** Joins: shka (~herr@109.231.0.226)
[13:32:19] *** Joins: rogersm (~rogersm@90.166.177.48)
[13:49:29] <hayley> https://github.com/robert-strandh/SICL/issues/2#issuecomment-17921351 Deep SICL lore: beach contemplates global mark-compact
[13:49:30] -ixelp- Overall status.text? · Issue #2 · robert-strandh/SICL · GitHub
[13:51:05] <shka> this man
[13:51:30] <shka> i am endlessly impressed by his writing
[13:52:10] <shka> even github comment reads like a book
[13:53:00] <shka> oh, ctrie
[13:53:02] <shka> cool
[13:53:05] <shka> i like ctries
[13:56:56] * hayley reads the ILC 2014 presentation
[13:56:59] <hayley> We were going to use the Compactor?
[14:00:05] <hayley> Looks like a typo, as the GC Handbook calls it the Compressor.
[14:04:44] <shka> hayley: the ability of memory to resist compression is what we call the octane number
[14:04:59] <hayley> "Vat ze fak, it exploded"
[14:10:32] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[14:26:54] *** Quits: treflip (~user@95.79.32.99) (Remote host closed the connection)
[14:27:47] *** Joins: treflip (~user@95.79.32.99)
[14:35:58] <kakuhen> where can i purchase octane booster for my memory
[14:35:59] <kakuhen> thanks
[14:36:40] <hayley> Who would win: beach or https://github.com/giltene/HeapFragger
[14:36:41] -ixelp- GitHub - giltene/HeapFragger: HeapFragger: A heap fragmentation inducer
[14:38:24] <shka> kakuhen: hayley posted link i guess xD
[14:39:16] <kakuhen> make a program that hogs 99% of the heap, exit, and repeat?
[14:39:38] <shka> well, you want to resist "compression" :D
[14:39:40] <moon-child> no, then you can just reclaim everything
[14:40:31] <kakuhen> perhaps not if you use awful refcounting :3c 
[14:40:51] <kakuhen> idk what the hell i did, but Finder is using 516.8 MB with not a single window open
[14:40:58] <kakuhen> i think it forgot how to give back memory to the OS
[14:41:03] <kakuhen> and im too lazy to restart it
[14:41:06] <moon-child> ? no, you should get the same result then.  Or you would have some memory not reclaimed due to cycles
[14:41:11] <kakuhen> i'm more interested in seeing how high this can go
[14:41:25] <moon-child> but the point is not to avoid memory reclamation; the point is to permit reclamation, but still induce fragmentation
[14:41:27] <kakuhen> moon-child: i was mostly joking about how ARC works
[14:41:36] <kakuhen> trust the compiler in inserting retain and release
[14:41:46] <kakuhen> and it's very easy to write code where you allocate a ton of memory where you dont need to
[14:41:58] <moon-child> why?
[14:42:12] <kakuhen> lemme make an example real quick involving dictionaries
[14:42:19] <moon-child> that is not a particular shortcoming of rc vs other memory reclamation strategies
[14:45:44] <kakuhen> ok looks like i was indeed wrong, or at least the compiler is doing the right thing here
[14:45:56] <kakuhen> so if you have a loop and you duplicate a bunch of dictionary items
[14:46:32] <kakuhen> placing the loop within the autorelease block will make you allocate a lot and keep lots of garbage until the loop's finished
[14:47:09] <kakuhen> but moving the autorelease block to where you are doing the whole duplication stuff will actually drain the pool every iteration and your memory usage wont blow up as much
[14:48:20] <kakuhen> http://pastie.org/p/5wL60ZJisXM2YAHGQlpQGF
[14:48:21] -ixelp- Pastie
[14:48:26] <kakuhen> this in particular is what im referring to
[14:48:36] <kakuhen> compiler does different things 
[14:48:49] <kakuhen> and if you do not explicitly set the autorelease block, then you never know whether it does the first or last one
[14:49:37] <kakuhen> and in my experience programs that end up in situations like this will keep tons of junk for a long time
[14:50:31] <kakuhen> the one thing you know for sure is that the pool is always drained with a SIGKILL ;)
[15:01:57] <hayley> I guess most real implementations of RC (C++, Rust, objective-C) have the issue where you decide how long you "pin" the reference.
[15:06:19] * hayley uploaded an image: (73KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/MniJaTqyKGavgVeHZHGLycfC/before-after.jpeg >
[15:07:44] *** Quits: humasect (~humasect@2001:1970:57e0:4100::9e43) (Quit: Leaving...)
[15:14:38] <moon-child> kakuhen: sure, and with gc a compiler could just decide to leave a variable in a register/on the stack, rather than bothering to clear it
[15:14:46] <moon-child> so again, I don't see this as a particular shortcoming of rc
[15:16:47] <hayley> Well, it's rather that you have to manually specify the lifetime of a variable on the stack, sorta.
[15:17:58] <hayley> ...maybe? I am aware that such an interface can make objects unnecessarily too long in straight line code. But I've never seen loops be a problem.
[15:19:11] <hayley> *can make objects live unnecessarily long
[15:30:01] *** Joins: random-nick (~random-ni@87.116.181.93)
[15:39:36] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[15:51:57] <selwynning> life here is much the same apart from slightly more people working from home
[15:52:52] <selwynning> i am supposed to go to a wedding on saturday
[15:52:55] <selwynning> wonder if i will make it
[15:53:26] <Gnuxie> they aren't gonna cancel weddings yet 
[15:53:42] <Gnuxie> it would upset too many people 
[15:56:00] <selwynning> i think so
[15:56:07] <selwynning> but i might get covid by then lol
[15:58:45] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[16:00:42] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (Remote host closed the connection)
[16:21:02] *** Joins: gilberth (~gilberth@p5b157756.dip0.t-ipconnect.de)
[16:21:02] *** ChanServ sets mode: +o gilberth
[16:21:54] * gilberth just got his third vaccination and is grateful.
[16:29:52] * hayley goes to bed.
[16:31:21] <hayley> gilberth: Congrats on upgrading to autism v4.0!
[16:31:37] * hayley had to make the joke before bugging off.
[16:38:13] <edgar-rft> gilberth was vaccinated with grate and now he's full of it.
[16:41:31] <gilberth> hayley: Indeed, why did I upgrade? I usually don't do that. Hmm.
[16:42:22] <ck_> I guess the world doesn't agree on that sentiment
[16:49:07] <gilberth> ?
[17:01:21] <selwynning> https://www.mirror.co.uk/news/politics/queen-corgis-risk-wolf-bear-25633600
[17:12:30] <ck_> gilberth: cov-19 is already on its version ~13, no?
[17:13:04] <gilberth> I am afraid so. Damn upgrades.
[17:13:18] <White_Flame> all these minor version numbers, aren't we at covid-21 yet?
[17:13:26] <ck_> semantic virusing
[17:16:57] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[17:29:30] <dave0> nite all
[17:29:34] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:51:48] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[18:13:17] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 268 seconds)
[18:16:58] <pl> selwynning: lol
[18:17:08] <pl> Wolves would be running the fuck away from humans
[18:17:29] <pl> Bears are more likely to be problematic because they tend to find food from humans easier to get than hunting
[18:17:45] <pl> which sometimes leads to unfortunate encounters (from both povs)
[18:18:38] <selwynning> the british countryside is meant to be a playground for rich people to hunt, not for wolves and bears
[18:19:43] <selwynning> this guy campaigns against that but it is a heroic effort
[18:20:11] <ck_> when will you be selwon?
[18:20:20] <selwynning> lol
[18:21:59] <selwynning> imagine how batshit insane it would be if the queen actually got eaten by a bear
[18:23:23] <Gnuxie> what kinds of bears are going to be in scotland? or whaerever this is? 
[18:24:32] <selwynning> > The Conservative peer said: “Imagine going out of Balmoral with your corgis and being confronted by a bear and a wolf
[18:24:35] <selwynning> wwyd
[18:25:01] <selwynning> it seems that brown bears are native
[18:25:49] <Gnuxie> idk i think balmoral has fairly high security anyways 
[18:27:08] <Gnuxie> but idk why we need to introduce brown bears 
[18:27:14] <Gnuxie> reintroduce*
[18:27:30] <Gnuxie> they're not gonna start eating grey squirrels for us or something 
[18:27:36] <selwynning> nom
[18:51:28] <selwynning> how can the caseload double every two days
[18:59:13] <Gnuxie> wait what 
[19:02:13] <ck_> Gnuxie: https://twitter.com/kallmemeg/status/1469312352944283655 , https://twitter.com/LongDesertTrain/status/1469316447721697282
[19:02:45] <Gnuxie> ohhhh
[19:03:04] <Gnuxie> so the real case numbers haven't shown this.... 
[19:03:27] <Gnuxie> cos they include the old variants 
[19:06:27] <selwynning> started reading one piece today
[19:09:54] <Gnuxie> is it spreading because the population is highly immunised though and it wouldn't in a population that isn't immune? 
[19:10:38] <selwynning> i guess it would spread at least as well if the population wasn't immunised
[19:10:44] <selwynning> i am struck by the high rate though
[19:13:02] <Gnuxie> are we sure about that though? 
[19:13:36] <selwynning> oh
[19:13:49] <selwynning> yeah i guess it crowds out the other strains due to vaccination
[19:14:17] <selwynning> can you get more than one strain at once actually
[19:14:43] <Gnuxie> ahh ok
[19:15:03] <selwynning> but i have not looked at any analysis
[19:15:30] <selwynning> doubling every two days is according to sajid javid
[19:15:36] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[19:15:58] <Gnuxie> it's not according to him though is it, he's just the middle nob 
[19:16:14] <Gnuxie> sorry 
[19:16:31] <Gnuxie> got mad at him 
[19:17:07] <ck_> why?
[19:17:08] <selwynning> i am mad at the backbencers
[19:17:45] <selwynning> they wave through every authoritarian policy when it doesn't affect them
[19:18:07] <selwynning> whether its scrapping the human rights act or leaving the dinghies to sink in the channel
[19:18:30] <selwynning> but when it comes to covid protections, all of a sudden its the 1930s
[19:18:48] <selwynning> and they have to use their conscience to go against the government
[19:26:30] <shka> hi all
[19:26:42] <shka> selwynning: different nick?
[19:26:43] <shka> why?
[19:27:06] <selwynning> seems i got disconnected
[19:27:21] <selwynning> this is my backup
[19:27:56] <shka> right
[19:28:18] <shka> anyway, i managed to get that OMP algorithm working in CL
[19:28:31] <shka> but i am yet to apply it to the random forest
[19:28:33] <selwynning> nice
[19:28:57] <shka> sadly, it fits to one outcome variable 
[19:29:13] <shka> only
[19:31:01] <shka> i wonder if i could run OMP repeatedly, on each Y column 
[19:32:11] <selwynning> can't you modify it
[19:34:07] <shka> i don't see how
[19:35:30] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[19:35:53] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[19:45:57] <gilberth> On average I have 1/3 .clone()s per line. Impressive!
[19:49:28] *** Joins: Catie (~user@user/catie)
[19:57:51] <Gnuxie> i don't think you're supposed to do that 
[19:58:25] <gilberth> No? I am not supposed to incremented refcounts when needed?
[19:58:27] <ck_> as long as they don't double every two days, it'll be just fine
[20:00:38] <gilberth> I mean, you must manually increment those reference counts. There is no automatism. The only thing the compiler does is to complain, when you missed that.
[20:02:12] <Gnuxie> can you show me your code?
[20:02:27] <shka> gilberth: rust?
[20:03:02] <gilberth> shka: Yes, I am having fun.
[20:03:18] <shka> right
[20:03:59] <shka> well you can tell me if omp can be generalized to multiple outputs instead :D
[20:05:33] <gilberth> Gnuxie: <http://clim.rocks/gilbert/rust-take-4.rs.txt> work in progress.
[20:07:05] <gilberth> When I doing something completely stupid, please tell me.
[20:10:03] <selwynning> they should find someone who took a ride in putins taxi
[20:10:40] <shka> selwynning: this story is bullshit
[20:13:07] <shka> dude was already corrupt in the 1991
[20:20:13] <shka> uh, i am to drained to do any more programming on that OMP stuff
[20:20:21] <shka> see you all later
[20:20:45] <selwynning> cya
[20:22:59] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[20:59:36] *** Quits: treflip (~user@95.79.32.99) (Quit: good night ✨)
[21:03:49] *** Joins: treflip (~user@95.79.32.99)
[21:04:10] *** ryanbw1 is now known as ryanbw
[21:09:46] *** Joins: makomo (~makomo@user/makomo)
[21:25:15] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[21:54:43] <pjb> better than copy-and-paste programming: clone programming!
[21:55:28] *** Quits: treflip (~user@95.79.32.99) (Quit: good night ✨)
[21:59:53] <shka> is it possible to simply send something to swank server and instantly disconnect?
[21:59:58] <shka> without waiting for completion
[22:01:15] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:02:28] <semz> Swank starts a new thread per connection, doesn't it? So it'd be equivalent to a bt:make-thread anyway
[22:05:12] <shka> well, i would want to write small program in let's say Go, that could be used to send sexps directly into locally running swank
[22:05:19] <shka> Go because of short startup 
[22:05:41] <shka> and i would want it to exit instantly after sending...
[22:12:09] <pjb> Don't break the protocol. (slime-eval '(bt:make-thread (lambda () (your-background-process)))) 
[22:13:00] <pjb> then (slime-disconnect)
[22:15:06] <shka> yeah, good idea actually
[22:15:39] <pl> shka: send a lambda that spins a new thread, or sends a closure to be executed by another thread from a list? 
[22:15:57] <shka> pl: yeah, that's will be for the better
[22:16:00] <pl> Could be done as simple function/macro in the target image 
[22:16:44] <pl> (defmacro fire-and-forget (&body)...) 
[22:19:18] <pl> It could expand to lparallel:submit-task 
[22:19:29] <pl> Just remember to have one thread gathering results from the channel 
[22:20:59] <shka> heh, this time around it is not about data processing or servers
[22:21:11] <shka> i just want to control my local web browser 
[22:21:15] <shka> which is nyxt
[22:21:22] <shka> which can run internal swank server
[22:22:08] <shka> so the idea is that i can have keyboard shortcuts to do all kinds of wonderful stuff
[22:22:40] <shka> like for instance: gather all URLs from a given buffer and copy it into clipboard
[22:30:33] <ck_> you should create a proxy program, using dedicated assembler, that opens and holds a connection to the swank server and accepts udp packets
[22:31:53] <ck_> from consulting principles we know that this is a job for a few hundred, or a few hundred thousand, usd, and three days or six years of manpower
[22:33:11] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 250 seconds)
[22:40:56] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[23:27:32] *** Joins: kevingal (~quassel@2001:770:c0:401:2d47:2f9b:c1be:64a0)
