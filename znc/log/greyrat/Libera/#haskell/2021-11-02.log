[00:00:25] <aristid> so i'm the creator of the "aws" hackage package, but i haven't had time to maintain it for a long time (i don't really even use haskell these days)
[00:00:32] <aristid> thoughts on how to find a new maintainer?
[00:00:47] *** Quits: fendor (~fendor@77.119.197.65.wireless.dyn.drei.com) (Remote host closed the connection)
[00:01:11] *** Joins: jespada (~jespada@190.7.36.46)
[00:01:18] <geekosaur> mail to haskell-cafe?
[00:01:45] <geekosaur> or if you have any outstanding PRs, offer to pass maintainership to whoever submitted them
[00:01:54] <sagax> https://termbin.com/54b5
[00:01:55] <aristid> i don't want to join any mailing lists :p
[00:01:57] <cigsender> project-matchmaking?
[00:02:04] <Hecate> cigsender: not yet! :<
[00:02:11] <cigsender> :(
[00:03:46] <geekosaur> sagax: you don't. printf is a fragile hack in Haskell
[00:03:48] <Hecate> aristid: hi! the haskell-cafe mailing-list is your best bet to reach out for new maintainers. I would also advise that you use social media platforms like Twitter (with the #haskell hashtag) because lots of professionals are also monitoring and interacting on those platforms
[00:04:09] <aristid> looks like joeyh_ has an outstanding PR to aws :D
[00:04:26] <maerwald> "advise that you use social media" <-- uhm... 
[00:04:41] *** Quits: max22- (~maxime@2a01cb0883359800a1b4cd1a3eb225c1.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[00:04:46] <janus> is irc social media?
[00:04:51] <aristid> yeah i guess i can tweet something
[00:04:54] *** Joins: fendor (~fendor@77.119.197.65.wireless.dyn.drei.com)
[00:04:56] <geekosaur> possibly antisocial media
[00:05:21] <geekosaur> (then again that's also how I feel about twitter most of the time)
[00:05:52] <aristid> Hecate: is there a way to interact haskell-cafe without adding any more emails to my email? i am too close to email bankruptcy already.. :D
[00:05:55] <maerwald> janus: no, because here you get banned if you post your bikini pics
[00:06:10] <sagax> geekosaur: what better then `printf`?
[00:06:44] <janus> maerwald: i have a collection of ansi porn that i can show you if connect to my server
[00:06:46] <sagax> for output with formatting
[00:06:59] <maerwald> janus: you seems like a trustworthy person, why not
[00:07:06] <geekosaur> sagax, printf (badly) wraps the numeric formatting functions in https://downloads.haskell.org/ghc/latest/docs/html/libraries/base-4.15.0.0/Numeric.html
[00:07:10] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 260 seconds)
[00:07:15] <Hecate> aristid: I can cross-post to it if you need to avoid new MLs :P But I'd advise you to post on the Haskell Discourse then :)
[00:07:37] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[00:09:03] *** Quits: jespada (~jespada@190.7.36.46) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[00:09:36] <aristid> Hecate: https://twitter.com/aristidb/status/1455273103278346244?s=21 - retweet would be appreciated :)
[00:10:13] <Hecate> aristid: üëç
[00:13:11] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[00:20:42] *** Quits: mikoto-chan (~mikoto-ch@185.237.102.118) (Ping timeout: 268 seconds)
[00:20:59] *** zero is now known as yin
[00:22:03] *** Joins: mikoto-chan (~mikoto-ch@185.237.102.115)
[00:23:09] *** Quits: mikoto-chan (~mikoto-ch@185.237.102.115) (Client Quit)
[00:23:33] *** Joins: dartford (~dartford@176-157-77-163.abo.bbox.fr)
[00:24:33] <dartford> ok - i want to give this another try, but im going to try and take it slow. im recovering from blast trauma and i hope the other users can be considerate of this
[00:24:43] <dartford> im sorry im not totally with it, but im trying my best
[00:26:13] <Hecate> salut dartford 
[00:26:22] <dartford> hi
[00:28:06] <dartford> i dont understand the termanology used in the paper "Selective Applicative Functors"
[00:28:21] <dartford> eg when describing the type of bind
[00:28:24] <dartford> :t (>>=)
[00:28:25] <lambdabot> Monad m => m a -> (a -> m b) -> m b
[00:28:35] <sclv> [exa]: btw also there's hackage-cli for bulk editing bounds https://github.com/hackage-trustees/hackage-cli
[00:28:46] <dartford> it says;
[00:28:47] <dartford> The operator takes two arguments: an effectful computation f a, which yields a value of type a
[00:28:47] <dartford> when executed
[00:29:20] <janus> sclv: 20:44 <..... [exa]> awpr: anyway apparently the brick maintainer used this https://github.com/hackage-trustees/hackage-cli to do the edits very quickly, might be useful for the stuff you mentioned
[00:29:24] <dartford> i have never heard of a monad f, applied to the type `a' being called "an effectful computation"
[00:29:30] <sclv> oh nice :-)
[00:29:42] <Hecate> dartford: Monads are here to provide the means to have effectful computations in Haskell
[00:29:44] <dartford> eg, the list monad, i normally just think of as a kind of container
[00:29:47] <Hecate> that's literally their whole purpose
[00:29:52] <Hecate> in Haskell
[00:30:05] <sclv> you can also think of the list monad as encompasing the "nondterminism effect"
[00:30:09] <dartford> er, well yeah i guess IO was crucial in the dev of haskell
[00:30:24] <sclv> where instead of one value, you have a nondeterministic collection of values
[00:30:26] <Hecate> dartford: https://wiki.haskell.org/Monads_as_computation
[00:30:37] <dartford> but monads in general also include flattenable containers like list
[00:30:43] <sclv> monads were introduced for effects in general -- not just IO, but state, nondeterminism, etc
[00:30:51] <dartford> which is the kind of bind instance im more used to dealing with
[00:30:56] <janus> but shouldn't it be a set instead of a list if it were really about nondeterminism
[00:31:05] <dartford> its not
[00:31:09] <Hecate> I think the Monad instance for List was also here to provide support for list comprehension operational semantics?
[00:31:23] <sclv> the monad instance for list was for nondeterminism
[00:31:27] <Hecate> as ok :)
[00:31:35] <sclv> https://www.cs.cmu.edu/~crary/819-f09/Moggi91.pdf
[00:31:44] <Hecate> I have to admit I'm never doing (consciously) non-determinism by hand
[00:32:00] <sclv> but this is all historical. you don't have to _agree_ that this is the fundamental way to think about them. you just have to understand that people _do_ think about them that way
[00:32:01] <dartford> its flattenable
[00:32:05] <sclv> so you can read the papers
[00:32:06] <dartford> thats its monadic behaviour
[00:32:19] <monochrom> janus: All of {list, tree, multiset/bag, set} can be used for non-determinism, you have a lot of choice about how much intermediate information to throw away.
[00:32:36] <sclv> the monadic behavior is just that it obeys the laws. its pure calculation. anything else is just a more intuitive way we have of talking about some aspect of the thing
[00:32:48] <dartford> sclv: good call, id rather not speak of nondetermanism at all if thats ok
[00:32:56] <monochrom> For example, if you choose set, you throw away multiplicity.
[00:33:04] <sclv> well you _have_ to understand the effect standpoint if you want to read papers that take it
[00:33:07] <dartford> i get that its important to the discussion of pure vs escaping effects though
[00:33:11] <sclv> so i don't want to convince you that this is the right standpoint
[00:33:18] <dartford> fair
[00:33:19] <sclv> i just want to help you read the paper by answering your question
[00:33:24] <monochrom> But nothing says that the only correct thing to do is to throw away multiplicity.
[00:33:58] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[00:34:10] <dartford> ok, so if we are talking about "effects" this is something to do with the "impure" contents?
[00:34:20] <monochrom> In the case of fitting monads to the Monad type class, you also can't add the Eq constraint to say you want sets.
[00:35:03] <dartford> i think the point is that we want something like IO effects but in a pure setting, right?
[00:36:07] <dartford>  the idea just being to understand how `Monad f => f a' expresses "an effectful computation"
[00:36:10] <sclv> you can be simpler. "Maybe" is the nontermination effect
[00:36:38] <dartford> ok, so if i have Just 1
[00:36:42] <janus> i feel like i am not understanding what people mean when they say non-determinism here. because it doesn't involve randomness. wikipedia says "even for the same input, can exhibit different behaviors on different runs"
[00:36:46] <dartford> hows that "an effectful computation" ?
[00:36:57] <janus> but what is the definition that people use when they associate lists with nondeterminism?
[00:37:02] <dartford> seems more like a container with a value in
[00:37:19] <sclv> its the computation that terminates and yields 1
[00:37:22] <dartford> but where we wouldnt know that it actually has a value just from the type
[00:37:27] <sclv> as opposed to Nothing, which is the computation that does not terminate
[00:37:32] <aristid> i think the point is just that you can build functions that rely on nothing but the monad laws, and they will work for all instances of monad - any intuition to explain monads may be helpful but is never the whole picture
[00:37:37] <dartford> sclv: ok, right, that sounds like we are getting somewhere
[00:37:43] <sclv> the Moggi paper I linked above is the origin of all this
[00:37:44] <monochrom> I simply take it as "4 has two square roots, 2 and -2, how do I express multi-valued functions?"
[00:37:47] <sclv> before haskell even had monads
[00:38:11] <dartford> aristid: the problem is the whole paper is written in this language of effects
[00:38:29] <monochrom> In fact one of the Moggi papers had monad transformers too heh.
[00:38:37] <sclv> `Either String` is error because `Right 1` is the computation which yields 1 and `Left "hello"` is the computation that errors with "hello"
[00:39:09] <dolio> Non-determinism doesn't involve randomness in general.
[00:39:11] <dartford> hows it "effectful" though?
[00:39:11] <sm> janus: my limited understanding: it's not saying random, but "multiple answers", ie no one definite answer
[00:39:12] <sclv> janus: lists are nondeterminism because they encompass computaions that can have multiple outcomes
[00:39:30] <sclv> so like "all possible paths through a tree"
[00:39:34] <dartford> dolio: right, a "pottentially" hanging computation is nondetermanistic, right?
[00:39:47] <dartford> idk if it will return or not
[00:39:48] <dolio> Non-deterministic Turing machines don't do random branches. They either do every branch, or they magically pick the right branch every time, depending on how you want to think about it.
[00:40:00] <sm> so really it's deterministic, just multiple. Confusing term.
[00:40:03] <aristid> lol i haven't hung out in this channel for many years, and still i recognize a few of the people
[00:40:43] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Remote host closed the connection)
[00:40:46] <dartford> the kind of people that start and end a sentence with "right", right?
[00:40:53] <janus> but it requires you to choose an order for them, and you can even choose to have infinite answers.. that just seems like two major differences to how non-deterministic turing machines work
[00:41:02] <monochrom> Well, S->(S,a) is also both "mutable state" and "but it's a stateless function from S to (S,a)".
[00:41:17] <sclv> some papers use "bags" or "unsorted multisets" for true nondeterminism
[00:41:25] <sclv> but we just use list historically because its easier to write :-)
[00:41:26] <dartford> is it nesacary to understand nondetermanism to understand effectful computations?
[00:41:30] <dartford> why are we talking about it?
[00:41:35] <dolio> dartford: Yeah, no answers is encompassed by non-determinism, too.
[00:41:40] <sclv> its necessary to understand why people call list the "nondeterminism effect"
[00:41:45] <monochrom> You will always have this double-speak tension when using math functions to model non-math things.
[00:41:48] <dartford> i mean, as an example other than that uses randomness
[00:42:03] <sclv> if you want to forget about lists and only thing about other monads, like state, or writer, or maybe for effects
[00:42:07] <sclv> then we can ignore nondeterminism for now
[00:42:11] <dartford> thanks
[00:42:19] *** Joins: Null_A (~null_a@2601:645:8700:2290:7887:7a6d:751e:a369)
[00:42:26] <janus> hmmm all right, i suppose it is correct that programming rarely matches programming 100%
[00:42:35] <dartford> ok, so, forgetting about how containers are used to model nondetermanism, as in, options
[00:42:53] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 268 seconds)
[00:43:02] <dartford> [1..], it contains all the numbers, idk which one to select, or something like that
[00:43:12] <monochrom> "I have a partial function X -> Y, oh let's express it by X -> Maybe Y, oh wait now I have a total function again..." same deal.
[00:43:24] <dartford> "could be any of them if i draw a number from it", or something like that, idk
[00:43:33] <monochrom> You have to know you are talking 2 levels at the same time.
[00:44:11] <sclv> how you select a value from a list is known as an _algebra_ for a monad
[00:44:11] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.2)
[00:44:21] <dartford> so, if we just talk about embedding "effects" in monads, are we just talking about being able to change the contents?
[00:44:35] <sclv> no, we say that monads model effects
[00:44:37] <dartford> some older notion akin to saying "weer going to lens into part of it" 
[00:44:46] <sclv> it has nothing to do with lenses
[00:44:54] <dartford> sclv: thats the termanology i dont understand
[00:45:12] <dartford> i mean, if i have writer, then the effect is changing part of it right?
[00:45:23] <cigsender> monads "are" the effects. a `Maybe a` is an `a` with the effect of being possibly-empty
[00:45:27] <sclv> we mean that if `m` is a monad, the difference between `a -> b` and `a -> m b` is that the latter can be thought of as "the former, but with some effect"
[00:45:31] <dartford> or a state rather, if i want to read the value it contains in order to be able to update it
[00:45:45] <dartford> basically, i was working with the state monad almost exclusivly for this
[00:45:47] <sclv> a problem is you're thinking only of containers
[00:45:52] <sclv> monads aren't always containers
[00:45:54] <dartford> so changing the contents becomes the thing
[00:46:01] <sclv> for example, the continuation monad is not a container
[00:46:14] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:46:20] <dartford> so how is that an efectful computation?
[00:46:29] <janus> why is it not a container? just because it can contain a function? :P
[00:46:30] <dartford> if the effect is other than changing the value it contanes
[00:46:50] <sclv> because call/CC is an effect
[00:46:55] <dartford> weer talking about ((a->b) -> b) right?
[00:46:57] <sclv> a control flow effect
[00:47:03] <dartford> seems to contain a value of type `a' to me
[00:47:03] <maerwald> sclv: it just moves you to another container
[00:47:10] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:54f0:825c:9f33:c349) (Remote host closed the connection)
[00:47:18] <dartford> % :t callCC
[00:47:19] <yahb> dartford: MonadCont m => ((a -> m b) -> m a) -> m a
[00:47:27] <janus> sclv: but i can use Cont just fine without call/cc? i don't understand how the existence of call/cc changes whether it is a container or not?
[00:47:47] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[00:47:50] <dartford> so it contains a `a -> m b' ?
[00:48:01] <dolio> What's your definition of, "container"?
[00:48:10] <dartford> i can retrive the value
[00:48:13] <dartford> or change it
[00:48:19] <dartford> depends what instances it satisfies
[00:48:24] <dartford> but there are some values 
[00:48:40] <dartford> and they appear in a way decorated by the nature of the container
[00:48:44] <monochrom> janus: Try to wing "(a -> S -> (R, S)) -> S -> (R, S)" as a container? >:)  (That's "ContT R (State S) a")
[00:49:00] <dartford> eg a functor is a container in an obvious way because of how fmap can change the values
[00:49:22] <sclv> a functor is not a container
[00:49:23] <monochrom> I'm OK with not talking about callCC. Although, callCC still exists.
[00:49:28] <dartford> ie, because functor is a superclass of monad, so then, there must be values that i can at least fmap over
[00:49:34] <cigsender> dartford: given a type `a`, the type `Maybe a` may or may not hold a value of `a`. But `Maybe a` is not a monad, it is a type. `Maybe` is teh monad
[00:50:05] <sclv> its a fine intuition at first, but it doesn't hold for more complex types very easily
[00:50:31] <dartford> but if you can opperate on the values, they must be there, inside it
[00:50:37] <dartford> so it contains them
[00:50:44] <dartford> :t fmap
[00:50:45] <lambdabot> Functor f => (a -> b) -> f a -> f b
[00:50:59] <sclv> `data Phantom a = Phantom`
[00:51:03] <dartford> values of type `a' are having a function applied to them
[00:51:05] <davean> dartford: absotely not
[00:51:13] <sclv> its a "container of zero as" but how is that useful
[00:51:16] <dartford> sclv: seems like the always empty container...
[00:51:21] <maerwald> I think most haskellers think of "collections" or something similar when you say "container"
[00:51:23] <dartford> its a wierd edge case sure
[00:51:33] <maerwald> I have no problem with "container" as a more abstract term
[00:51:35] <sclv> there's also a formal theory of containers from ghani et al.
[00:51:40] <davean> dartford: what about (data Function b = F Int -> b)
[00:51:44] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[00:51:45] <dsal> It seems weird to refer to a function as "containing" a thing.
[00:51:46] <davean> wheres the b inside that?
[00:51:58] <dartford> anyway, even if you only had a getter, id still call it a container, since it can have the values retrived
[00:52:16] <janus> i guess i don't have a definition of container. is Maybe a container according to anyone?
[00:52:20] <sclv> but things with getters are not necessarily functors, and some functors, like phantom, have no getters
[00:52:34] <monochrom> I accept that Maybe is a container.
[00:52:43] <dartford> davean: thats a much better idea, that doesnt seem to be a container of values of type b
[00:52:45] <dsal> I think of Maybe as a container.
[00:52:46] <monochrom> I don't have a definition either. I don't think we need one.
[00:52:50] <sclv> maybe also fits the formal definition: https://www.sciencedirect.com/science/article/pii/S0304397505003373
[00:52:57] <davean> dartford: its also clearly a functor
[00:53:04] <davean> via compose.
[00:53:06] <janus> but Cont has a Susp constructor which is just like Just. so it seems weird that Maybe is a container but Cont wouldn't be
[00:53:24] <monochrom> What I don't accept is the stance "Maybe is only a container".
[00:53:42] <janus> you could choose a polymorphic type parameter for Cont which would make the input type Void and have it be 'isomorphic' to Maybe, no
[00:54:10] <davean> dartford: infact, its also a common monad - reader
[00:54:19] <dartford> there are no values inside the reader monad
[00:54:30] <dartford> so its not a container
[00:54:32] <dartford> ok, done
[00:54:36] <dartford> so, back to effects
[00:54:53] <monochrom> I treat "container" on the same level as "compiler", "interpreter", "programming". I expect grey areas. I expect disagreements.
[00:54:57] <janus> oh no, i meant the "Done" constructor for Cont. Not Susp, which is the one that would be 'disabled' with Void
[00:54:59] <dartford> (we conclude that "not all monads can be thought of as containers, even though they are functors)
[00:55:10] <davean> monochrom: A box is a container, a Box is not.
[00:55:16] <janus> right ok, i accept it is a grey area
[00:55:18] <monochrom> haha
[00:55:39] <dartford> ie, being able to fmap over values of the type parameter, does not mean the Functor contains values of that type that can be "got" 
[00:55:49] <monochrom> Is YAML a programming language? >:)
[00:56:01] <dartford> erp
[00:56:02] <monochrom> ("No! It's a container language!")
[00:56:06] <janus> haha :P
[00:56:09] <davean> monochrom: yes, and you made me think about it, so thats a crime against humanity and I want you prosecuted
[00:56:19] <monochrom> haha
[00:56:26] <dartford> shots fired
[00:56:28] *** Quits: cigsender (~cigsender@74.124.58.162) (Quit: leaving)
[00:56:31] <monochrom> Belated Halloween activities.
[00:56:43] <dartford> soooo, effects?
[00:57:02] <sclv> like you've gotten three answers on effects and a link to one or two papers
[00:57:17] *** Joins: acidjnk (~acidjnk@p200300d0c7441145a0f2d1eed66e92ec.dip0.t-ipconnect.de)
[00:57:19] <dartford> if we refuse to consider containers, are we left with things more obviously embodying the notion of "effectful computations" ?
[00:57:20] <sclv> do you have a specific question
[00:57:23] <dsal> If covariant functors are boxes, are contravariant functors conveyor belts?
[00:57:33] <sclv> no, we should _also_ consider things you personally think of as containers
[00:57:35] <sclv> like maybe
[00:57:42] <dartford> ah ok
[00:57:43] <dartford> thanks
[00:57:51] <dartford> i wasnt sure what was being suggested
[00:58:01] <sclv> the potential nontermination effect is a very nice simple one
[00:58:08] <sclv> as is reader, and state
[00:58:22] <dartford> so what was the "effect" of Maybe?
[00:58:33] <sclv> potential nontermination
[00:58:43] <davean> dsal: a falsehood implies anything you want it to, so maybe?
[00:59:18] <dartford> ok, so, because Nothing certainly returns, but Just nastyLoopingThing wont...
[00:59:38] <sclv> pretend we're in a language without loops
[00:59:41] <dartford> i suppose i might be thinking of effects as basically being IO
[00:59:43] <sclv> or without infinite recursion
[00:59:46] <dartford> i guess thats whats wrong
[01:00:03] <dartford> Just doInfiniteWorkForever
[01:00:24] <dartford> sclv: ok, i dont know how to make that not terminate without loops or recursion...
[01:00:33] <dartford> i cant unfold infinite containers?
[01:00:41] <sclv> you can also simulate IO with appropriate monads. https://hackage.haskell.org/package/IOSpec-0.3.1.1
[01:00:56] <dartford> im just not sure thats whats *meant* by effec
[01:00:59] <dartford> effect*
[01:01:08] <sclv> dartford: i'm saying, to think of Maybe as nontermination as an effect, it helps to think of yourself in a language that has no unlimited recursion
[01:01:14] <dartford> since pottential nontermination is supposed to be thought of as an effect apparently
[01:01:22] <sclv> and Maybe is the effect of halting
[01:01:35] <sclv> or rather of not terminating
[01:01:41] <sclv> not by infinite loop, but by getting "stuck"
[01:01:46] <dartford> huh? you mean, Just? or Nothing?
[01:01:53] <sclv> Maybe itsel
[01:01:55] <monochrom> I think "no answer / failure" is much better than "non-termination".
[01:01:58] <sclv> sure
[01:02:05] <sclv> i'm using the old terminology
[01:02:11] <dartford> oooh right, just "this might return"
[01:02:13] <dartford> fine
[01:02:15] <sclv> you can think of it as "null pointer semantics"
[01:02:15] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[01:02:22] <dartford> so Nothing, is it hanging
[01:02:26] <dartford> notionally
[01:02:44] <sclv> sure
[01:02:55] <dartford> monochrom: right, or you would need some way to make a hanging computation, which would require loops
[01:03:06] <dartford> idk why it was "helpful" to consider a language without loops...
[01:03:25] <dartford> so just to be sure, this is an "effect" why?
[01:03:26] <sclv> because loops are complicated to model as an effect and are beyond the scope of what we're talking about here
[01:03:34] <dartford> because its impure?
[01:03:40] <sclv> there's a richer monad that introduces a "real" notion of loops as an effect
[01:04:10] <sclv> not because its impure, but because you can't rule them out with types and then introduce models of them without a richer type system
[01:04:13] <sclv> its... complicated
[01:04:24] <sclv> because of the halting problem, basically
[01:04:29] <dartford> argh
[01:04:35] <dartford> thwarted once more
[01:04:37] <sclv> so i'm advising ignoring it
[01:05:02] <dartford> yeah, im never going to be able to read this stupidly written paper in the absurd incomprehensible jargon
[01:05:10] <sclv> don't be mean to the paper
[01:05:16] <dartford> sorry paper
[01:05:16] <sclv> its a great paper by very talented people
[01:05:31] <dartford> yeah, that have grapled with the incomprehensible far too much
[01:05:33] <sclv> and i'm sorry you can't read it, but its written in a way very comrehensible compared to most
[01:05:41] <dartford> all their girfriends are already divorced them
[01:05:49] <sclv> ok seriously stop it
[01:05:56] <maerwald> :D
[01:05:57] <dartford> make it simple yo
[01:06:09] <sclv> these are lovely people and you making personal attacks on them is winning you no friends
[01:06:15] <sclv> i'm sorry you're having a hard time with the paper
[01:06:15] *** Joins: mmhat (~mmh@55d4a9b2.access.ecotel.net)
[01:06:21] <sclv> there is NO EXCUSE for that sort of rudeness
[01:06:27] <sclv> to our friends and community members
[01:06:35] <maerwald> what's the paper in question even
[01:06:36] <dartford> i meant that their girlfriends would be angry at people wasting their time, not that they were unlovable
[01:06:48] <dartford> you misunderstood
[01:06:48] <monochrom> The "selective" paper.
[01:06:57] <dartford> i did not mean any form of rudeness
[01:07:03] <sclv> maerwald: the selective functors paper by mokhov, simon marlow et al
[01:07:11] <dartford> other than to the forces of constant derailment that beset our beloveds
[01:07:20] <sclv> seriously i'm going to ask the ops to kick you
[01:07:35] <dartford> why?
[01:07:44] <maerwald> I like selective
[01:07:44] <dartford> because you thought i was being rude when i didnt mean to be
[01:07:46] <sclv> for the continued trolling you're doing right now
[01:07:47] <dartford> i appolgise
[01:07:54] <dartford> im trying to molify you
[01:07:58] <dartford> im sorry!
[01:08:09] <sclv> ok just stop it, and ask questions if you have them
[01:08:11] <dartford> im not trying to troll, i dont know how to get you to not be mad at me
[01:08:18] <sclv> simply don't insult people
[01:08:34] <dartford> i honestly dindt mean to
[01:08:40] <monochrom> Yes I basically ban all sour-grape attitudes.
[01:08:47] <monochrom> and entitlement attitudes.
[01:09:06] <geekosaur> surprised you haven't already
[01:09:10] <dartford> i feel like im being misconstrued, i meant no offence
[01:09:14] <janus> but fog keeps coming back even though he is 'bannable'?
[01:09:23] <dartford> please stop!
[01:09:34] <dartford> i cant deal with this
[01:09:36] *** Quits: dartford (~dartford@176-157-77-163.abo.bbox.fr) (Quit: Connection closed)
[01:09:44] <janus> i don't understand it. it is entitled if you fill multiple screens and refuse to read, but it happens again and again
[01:09:46] <davean> janus: who claimed monochrom was good at banning people?
[01:09:48] <sclv> oh dartford is fog?
[01:10:01] <sclv> jesus i had no idea, wouldn't have engaged
[01:10:07] <monochrom> I did, heh.
[01:10:13] <sclv> sigh
[01:10:17] *** ChanServ sets mode: +o geekosaur
[01:10:47] <davean> Is there some origin story to fog?
[01:10:49] *** geekosaur sets mode: +b *!*@176-157-77-163.abo.bbox.fr
[01:10:57] *** geekosaur sets mode: -o geekosaur
[01:11:03] <geekosaur> enough with that
[01:11:10] <dolio> janus: Here's something to think about. I can write `Cont r (Either (b -> r) b)`. Does it contain an `Either (b -> r) b`?
[01:11:19] <dibblego> the story is: long-term repetition of the above and I recommend: ban
[01:11:38] <davean> dibblego: oh I know that, I'm just curious if theres an actual story or thats just who they are
[01:11:44] <maerwald> I don't know. I always found it entertaining and only mildly disruptive
[01:11:47] <davean> I certainly don't think its to anyone's benefit for them to be back
[01:11:56] <dolio> If so, which one?
[01:14:54] <dolio> Importantly, I can write a single value that works for all `r` and `b`. No need for particular choices.
[01:18:36] *** Joins: nickkkkk_all (~nick_all@2603-6011-f940-1d00-0000-0000-0000-0002.res6.spectrum.com)
[01:20:31] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[01:21:02] <nickkkkk_all> hi guys. i'm reading the cabal docs and i'm a little confused. i ran cabal init thinking it would be interactive like the docs said. when i ran it, it gave me a Changelog.md app/Main.hs and a .cabal file (where I need to add some libraries that aren't exposed yet which I'm trying to learn how to do). but the hs source code has "module Main where" at the top so it doesn't look like it will build an 
[01:21:02] <nickkkkk_all> executable. could someone clarify? sorry for the noob question
[01:21:49] <sclv> its fine, they switched the interactive and the not interactive flags and the docs are out of date
[01:22:01] <sclv> but they will be correct again next release (where they switched the flags back)
[01:22:06] <monochrom> cabal init -i, then it still asks you one last time and you have to say "I really want interactive" (I forgot whether that's a "yes" or "no")
[01:22:20] <nickkkkk_all> oh ok. thanks
[01:22:35] <monochrom> You can also edit your .cabal/config
[01:23:09] <nickkkkk_all> yea i just didn't want to do that manually yet since i don't really know what i'm doing, but i'll search the docs
[01:23:16] <monochrom> But sadly it will still ask you "are you really sure you want interactive? I really want to sell you the non-interactive version"
[01:23:28] <janus> dolio: it must contain an "Either (b -> r) b" because you could choose r to be "Either (b -> r) b" and the "a -> r" function to be 'id'. is the problem here that it recursive?
[01:23:35] <davean> The non-interactive version sucks
[01:23:54] <dolio> janus: It's not recursive.
[01:23:55] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[01:24:16] <maerwald> cabal should get some inspiration from summoner
[01:24:21] <janus> what do you mean by "Importantly, i can write a single value". important for which goal? sorry i am dense
[01:24:24] <sclv> nickkkkk_all: just rerun it with the `-i` flag after clearning out what it generated. interactive is the better default and its coming back. switching the behavior was a misfeature
[01:24:33] <maerwald> https://asciinema.org/a/314375 like that
[01:24:37] <nickkkkk_all> i don't need the module syntax right? i'm not going to be using this code as an external module. i'm following along with a course
[01:24:41] *** Quits: Null_A (~null_a@2601:645:8700:2290:7887:7a6d:751e:a369) (Remote host closed the connection)
[01:24:45] <nickkkkk_all> sclv: thanks
[01:24:56] <monochrom> janus, I don't know the answer either (oh wait what I have done? >:) ), but I very much worry about the same r being used in both "Cont r" and "b->r".
[01:25:02] <dolio> janus: It's important because there is no value of `Either (b -> r) b` in general. :)
[01:25:16] *** Joins: Null_A (~null_a@2601:645:8700:2290:7887:7a6d:751e:a369)
[01:25:26] <sclv> nickkkkk_all: you always want `module Main where` to start your main app file if you're building an executable
[01:25:57] <sclv> every haskell file has `module Something where` near the top -- Main is just the name that the main module of an executable has
[01:25:58] <dolio> No way to write a well defined one for all `r` and `b`, at least.
[01:26:14] <geekosaur> "module Main where" will be the default for an executable, but there's no harm in saying it explicitly
[01:26:19] <monochrom> Normally if I'm looking at "Cont r (Either x y)" I am OK with "yes it contains an Either x y value", but that's when x and y are independent of r.
[01:26:49] <monochrom> And actually it's more like "module Main(main)"
[01:26:54] <janus> dolio: but isn't this similar to saying "Maybe a" is not a container because i can choose Void and then it can't actually store anything?
[01:27:38] <janus> dolio: why should we be able to choose a value for a generic type for it to be a container?
[01:27:38] <maerwald> containers are more like possibilities... so actually non-determinism :D
[01:28:28] *** Quits: Guest41 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 256 seconds)
[01:29:45] *** Quits: Null_A (~null_a@2601:645:8700:2290:7887:7a6d:751e:a369) (Ping timeout: 268 seconds)
[01:29:48] <nickkkkk_all> ok that makes sense. the only haskell i've ever written was for xmonad.hs which i guess technically isn't an executable
[01:30:17] <dolio> Is my value of `Cont r (Either (b -> r) b)` just empty, like the Maybe value?
[01:30:22] <nickkkkk_all> the interactive init process was much better
[01:30:32] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:54f0:825c:9f33:c349)
[01:32:06] <dsal> I'm annoyed at how my coverage test marks things as yellow when they weren't touched even though there's not much room for them to be wrong.
[01:32:11] *** Quits: brainfreeze (~brainfree@2a03:1b20:4:f011::20d) (Quit: Leaving)
[01:35:58] <dolio> For instance, there's no well-defined value `Cont r r` for arbitrary `r`.
[01:36:44] *** Quits: ubert (~Thunderbi@p548c9652.dip0.t-ipconnect.de) (Remote host closed the connection)
[01:36:57] *** Quits: chomwitt (~chomwitt@ppp-2-85-245-90.home.otenet.gr) (Remote host closed the connection)
[01:38:36] <nickkkkk_all> ok is this what I should do? build-depends: codeworld-api, ...
[01:38:37] <janus> dolio: right, but regarding polymorphic types i regard it is possibly containing information (optimistic?). i don't see why there needs to be a value for an arbitrary instantiation
[01:39:00] <janus> dolio: i see it as consistent with "Maybe" being a container
[01:39:35] <nickkkkk_all> when i ran "cabal install codeworld-api" it said that the libraries weren't exposed because i didn't use the --lib flag so i think this is what i'm supposed to do but i'm not sure
[01:39:39] <janus> and i'd even argue that Solo/Identity are containers even though there is no value to construct for an arbitrary instantiation
[01:39:56] <janus> maybe i am not understanding the point about your Either containing a function...
[01:40:13] <monochrom> build-depends is preferred.
[01:40:36] <monochrom> But --lib is OK if you still want "I just run ghci and I have the library available"
[01:40:45] <janus> but i guess i have made the term so permissive that it becomes meaningless :P
[01:41:13] <dolio> I don't know what Solo is. Identity is arguably a container of exactly one thing.
[01:41:48] <nickkkkk_all> i don't really want that. i'm only working with codeworld api in a project so i can follow along with this course. i don't think the api is used after lecture 4 and i'll move on to "real" code bases
[01:41:54] <janus> dolio: i just learnt about this, it is some new one-tuple in ghc 9.2: https://www.reddit.com/r/haskell/comments/qjgg60/fyi_we_have_1tuple_in_base_since_ghc_92/hiurwzr/?context=3
[01:41:55] <dolio> The point of `Cont r r` was that a `Cont r` can't just be an empty container.
[01:42:49] <janus> ooh ok, so it should be able to be empty to be a container? that makes sense, i guess
[01:43:12] <dolio> So, `Cont r a` can't just be empty, and no values of `Either (b -> r) b` can be demonstrated, but we can demonstrate `Cont r (Either (b -> r) b)`.
[01:43:52] <sclv> nickkkkk_all: if you're using a recent cabal you don't need to install the deps explicitly
[01:44:12] <sclv> as long as you use cabal commands `cabal build` `cabal repl` etc it'll install and mange em for you
[01:44:21] <sclv> based on your .cabal file
[01:44:25] <dolio> It's fine to consider containers that can't be empty. But how can you have a container that can't be empty but also not be able to have anything to put in it?
[01:44:57] <nickkkkk_all> sclv: oh nice
[01:45:13] <nickkkkk_all> on another note: dist-newstyle/build/x86_64-linux/ghc-8.10.7/haskell-fun-0.1.0.0/x/haskell-fun/build/haskell-fun/ why????????????/
[01:45:24] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[01:47:04] <monochrom> You can use "cabal install --install-method=copy --overwrite-policy=always --installdir=<???>"
[01:47:45] <sclv> the length paths are because we can have crosscomp and share between multiple compilers and also have different subcomponents
[01:48:06] <nickkkkk_all> ok that's better. so far the cabal defaults are very annoying...
[01:48:08] <sclv> its pretty hard to cut them down without accidentally creating the possibility of incompatible build products being shared
[01:48:34] <nickkkkk_all> sclv: that makes sense. so the default path is good for a real project i assume?
[01:48:50] <sclv> well its unavoidable, it seems
[01:48:59] <sclv> unfortunate though
[01:49:15] <sclv> `cabal run` will run an executable too, so... eh
[01:49:20] <dsal> Is there a place where HPC bugs are filed?  It seems particularly strange that RecordWildCards doesn't show up as record field accesses.
[01:49:30] <dsal> I'm sure that's a really slimy bag of worms.
[01:50:04] <nickkkkk_all> this is a huge learning curve :)
[01:50:25] <monochrom> "cabal run" oversteps its place regarding what should go to stdout.
[01:50:43] <nickkkkk_all> monochrom: what does that mean
[01:51:10] <monochrom> You get an extra "Up to date" line for example.
[01:51:13] <sclv> dsal: those go in the general ghc bug tracker. i think there's a tag or category that would class em as hpc
[01:52:06] <dsal> https://gitlab.haskell.org/ghc/ghc/-/issues/17834
[01:52:08] <monochrom> So suppose your program is meant to output valid json to stdout.  Well now your stdout is polluted.
[01:52:11] <dsal> Looks like someone's already found it.
[01:53:54] <sclv> monochrom: do you think the correct solution is to add a flag for quiet mode or "no junk" or the like? if so and if you can think of the right flag name, please open a ticket
[01:54:26] *** Quits: fendor (~fendor@77.119.197.65.wireless.dyn.drei.com) (Ping timeout: 260 seconds)
[01:54:27] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[01:54:28] <geekosaur> sclv, seems to me that should go to stderr
[01:54:39] <sclv> oh fair point
[01:54:39] <geekosaur> (and yes, that's annoyed me as well)
[01:54:52] <monochrom> To be honest, I simply don't use cabal run.
[01:54:52] <nickkkkk_all> yea that sounds like a reasonable thing. in my case i don't care. my code isn't even working for some reason anyway 
[01:55:10] <monochrom> And there are multiple reasons, not just this one.
[01:55:19] <monochrom> There is no use case at all.
[01:56:13] <nickkkkk_all> it says "Open me on http://127.0.0.1:3000/" but firefox is saying unable to connect
[01:56:21] <monochrom> If I want to use an exe regularly, "cabal install" is the right thing to do, and with --installdir=<something actually on PATH>.  Why would I cd into some development directory to "cabal run" for a program I use regulary?
[01:56:42] <geekosaur> nickkkkk_all, what kind of system are you on? could it have a firewall preventing such connections?
[01:56:43] <monochrom> If I want to test, "cabal repl" and "cabal test" have got that covered.
[01:56:51] <monochrom> So, when do I need "cabal run" again?
[01:57:04] <dsal> Yeah, the other hpc case that bugged me was about derived instances.  Technically, I haven't tested all aspects of various derived junk.  But also, I feel like that's not my job.
[01:57:08] <nickkkkk_all> i don't have any firewalls
[01:57:40] <geekosaur> monochrom, I use iit for programs where the executable would be ephemeral anyway ‚Äî I'm constantly rejiggering various things inside the program
[01:58:13] <nickkkkk_all> that's the case i'm using it for right now. a dumb program that i'm just writing for learning purposes
[01:58:24] <geekosaur> so "cabal run" keeps track for me of when a rebuild is needed, and I don't have an executable in $PATH that'll just have to be overwritten in a few hours anyway
[01:58:38] <monochrom> Yeah there are a few rare moments when I make peace with dist-newstyle/xxx/yyy/zzz/x/xxx
[01:58:38] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 260 seconds)
[01:58:45] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[01:58:59] <sclv> filed a ticket for cabal run, but honestly its probably a bit of a PITA to fix since that shares output with all the other cabal commands
[02:00:22] <nickkkkk_all> geekosaur: it also tells me i need to recompile with the -threaded flag. could that be it?
[02:00:39] <geekosaur> (also I only use it when working on a particular project so I don't really want it on $PATH anyway)
[02:01:08] <geekosaur> nickkkkk_all, that should not prevent connections, I think
[02:01:24] <geekosaur> although if it's demanding -threaded you probably should enable it
[02:01:51] <sclv> you can add  -threaded to the ghc options in the cabal file
[02:02:57] *** Joins: quazimodo (~quazimodo@n1-40-235-47.bla1.nsw.optusnet.com.au)
[02:04:16] *** Joins: G_w (~Gw@197.3.191.56)
[02:04:32] <nickkkkk_all> there isn't a section for that so i guess i'll have to make one
[02:04:42] <nickkkkk_all> just ghc-options:?
[02:05:02] <monochrom> ghc-options: in the same section as the exe's section
[02:06:12] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[02:06:30] *** Joins: hololeap (~hololeap@user/hololeap)
[02:06:35] <nickkkkk_all> that fixed my issue. thanks for the help guys. hopefully before long i won't be asking so many questions
[02:06:40] <nickkkkk_all> i'm gonna get to coding
[02:10:48] <hpc> hopefully you keep asking questions forever, they just get increasingly complicated and obscure :D
[02:16:36] <nickkkkk_all> that's definitely the plan
[02:17:20] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:19:35] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[02:24:39] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[02:25:02] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[02:26:50] *** Joins: thblt (~thblt@user/thblt)
[02:29:31] *** Joins: Axman6 (~Axman6@user/axman6)
[02:30:29] *** Joins: Lycurgus (~juan@98.4.112.204)
[02:31:38] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[02:31:59] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[02:33:40] *** Joins: MQ-17J (~MQ-17J@8.6.144.203)
[02:36:58] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Ping timeout: 268 seconds)
[02:50:03] *** Joins: zero (~z@user/zero)
[02:51:36] <nickkkkk_all> what does this code do? https://paste.tomsmeding.com/1Ek8WGYt
[02:52:02] <Axman6> what do you think it does?
[02:52:03] <nickkkkk_all> well i guess it doesn't do anything. what does it mean?
[02:52:04] <geekosaur> loop forever
[02:52:28] <geekosaur> hm, actually as written it should throw <<loop>>
[02:52:50] <Axman6> > let y = y + 1 in y :: Integer
[02:52:50] *** Quits: yrlnry (~mjd@pool-74-109-22-90.phlapa.fios.verizon.net) (Ping timeout: 260 seconds)
[02:52:52] <lambdabot>  *Exception: <<loop>>
[02:52:55] <geekosaur> the `y`s on both sides of the `=` are the same `y`, so it will forever chase its own tail
[02:53:01] *** Quits: yin (~z@user/zero) (Ping timeout: 245 seconds)
[02:53:10] <nickkkkk_all> so a recursive definition
[02:53:14] <geekosaur> yes
[02:53:15] <hpc> "to calculate y, calculate y and add 1 to it"
[02:53:15] <nickkkkk_all> but it isn't a function
[02:53:40] <hpc> yep, you can write recursive non-function things
[02:53:59] <Axman6> https://i.kym-cdn.com/photos/images/newsfeed/001/393/652/116.jpg
[02:54:01] <nickkkkk_all> as long as there is a way for it to be evaluated completely?
[02:54:04] *** Joins: jushur (~human@user/jushur)
[02:54:07] <hpc> you can even do it in other languages, it's just usually not as useful
[02:54:17] <hpc> void* x = &x; // for instance
[02:54:58] <nickkkkk_all> but that's not really the same thing. i get what you're going fo rthough
[02:55:13] <nickkkkk_all> haskell is strange. 
[02:55:16] *** Joins: __xor (~xor@72.49.199.147)
[02:55:19] <hpc> > let ones = 1 : ones
[02:55:20] <lambdabot>  <no location info>: error: not an expression: ‚Äòlet ones = 1 : ones‚Äô
[02:55:24] <hpc> > let ones = 1 : ones in ones -- doh
[02:55:25] <lambdabot>  [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1...
[02:55:32] <geekosaur> doesn't need that.
[02:55:32] <geekosaur> > let ones = 1 : ones in ones
[02:55:32] <geekosaur> what's needed is that it can be lazily productive before it recurses
[02:55:32] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[02:55:34] <lambdabot>  [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1...
[02:55:44] <hpc> > let x = error x in x -- here's a fun one
[02:55:45] <lambdabot>  "*Exception: *Exception: *Exception: *Exception: *Exception: *Exception: *Ex...
[02:55:51] <Axman6> > let fibs = 1:1: zipWith (+) fibs (tail fibs)
[02:55:52] <lambdabot>  <no location info>: error:
[02:55:52] <lambdabot>      not an expression: ‚Äòlet fibs = 1:1: zipWith (+) fibs (tail fibs)‚Äô
[02:56:04] <Axman6> > let fibs = 1:1: zipWith (+) fibs (tail fibs) in fibs
[02:56:06] <lambdabot>  [1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17...
[02:56:46] *** Quits: _xor (~xor@72.49.199.147) (Ping timeout: 245 seconds)
[02:56:55] <nickkkkk_all> lmfao
[02:56:55] <hpc> lambdabot has some definitions of the infinite list of primes memorized, but i forget how to print them out
[02:57:11] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[02:57:16] <hpc> it's like @where prime_55, or something like that
[02:57:21] <hpc> for a 55-character definition
[02:57:41] <nickkkkk_all> just write some haskell to calculate the zeros of the complex zeta function and append them to a list
[02:57:53] <hpc> recursive definitions are all over the place, you'll want to get very comfortable with them
[02:58:15] <hpc> at the value level, at the type level, in the abstract, etc
[02:58:18] <hpc> @src fix
[02:58:18] <lambdabot> fix f = let x = f x in x
[02:58:38] <Axman6> I keep forgetting to save a gist of the simple mutually recursive primes generator
[02:58:45] <nickkkkk_all> i mean it makes sense mathematically. i'm just trying to adjust from imperative style to functional. i like it more i just have to relearn how to think
[03:00:45] <nickkkkk_all> but i'm gonna have to log off or i'll never do my chem lab report and it's due tomorrow at 8 am :D
[03:02:00] *** Quits: nickkkkk_all (~nick_all@2603-6011-f940-1d00-0000-0000-0000-0002.res6.spectrum.com) (Quit: Leaving)
[03:03:02] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[03:05:18] <Axman6> ok, finally decided to save this as a gist so I can find it again https://gist.github.com/axman6/79be372a4b8507432bcabea42c488c62
[03:05:51] <Axman6> I thow there's a lot of optimisations to be made
[03:08:15] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[03:10:07] <Axman6> I wonder how well this would work in GHC: https://krebsonsecurity.com/2021/11/trojan-source-bug-threatens-the-security-of-all-code/
[03:11:19] <monochrom> Hecate answered this in haskell-cafe: https://gitlab.haskell.org/ghc/ghc/-/issues/20263
[03:12:01] *** Joins: jespada (~jespada@190.7.36.46)
[03:14:17] *** Joins: zzz (~z@user/zero)
[03:14:49] <Axman6> Interesting, I wonder if the researchers contacted the GHC team? the timing seems about right
[03:16:49] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:17:40] *** Quits: zero (~z@user/zero) (Ping timeout: 268 seconds)
[03:17:41] *** zzz is now known as zero
[03:17:57] <thblt> Axman6: The Rust report on the same bug says they've been notified of it privately by the researchers before they went public. I guess same goes for GHC? (no source on the latter though)
[03:18:30] <geekosaur> one can infer the same from the sequence of events in the ticket and its open date
[03:18:47] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:18:48] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:18:48] *** Joins: wroathe (~wroathe@user/wroathe)
[03:18:50] <geekosaur> in particular there was a "set visibility public" event
[03:18:52] <Axman6> Just a bit surprised they'd even thing about GHC!
[03:18:55] <Axman6> think*
[03:19:34] <thblt> Btw the Rust solution is roughly the same, they added an on-by-default linter that fails build that contains those control codes in comments or strings.
[03:21:11] *** Quits: jespada (~jespada@190.7.36.46) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[03:24:49] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[03:25:42] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 268 seconds)
[03:28:46] *** Quits: xff0x (~xff0x@2001:1a81:537f:9c00:f94d:493e:e9e:5a9) (Ping timeout: 268 seconds)
[03:29:27] *** Joins: xff0x (~xff0x@2001:1a81:537f:9c00:96ab:881b:fbec:f66f)
[03:34:57] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[03:36:26] *** Quits: G_w (~Gw@197.3.191.56) (Remote host closed the connection)
[03:39:57] *** Quits: sander (~sander@user/sander) (Quit: So long! :))
[03:41:05] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Remote host closed the connection)
[03:46:36] *** Joins: zzz (~z@user/zero)
[03:49:04] *** zzz is now known as yin
[03:49:45] *** Quits: zero (~z@user/zero) (Ping timeout: 268 seconds)
[03:49:45] *** yin is now known as zero
[03:51:06] *** Quits: acidjnk (~acidjnk@p200300d0c7441145a0f2d1eed66e92ec.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[03:51:10] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[03:51:12] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[03:51:36] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[03:52:29] *** Lord_of_Life_ is now known as Lord_of_Life
[03:54:21] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[03:58:10] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[03:59:05] *** Joins: cross (~cross@spitfire.i.gajendra.net)
[03:59:45] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[04:01:58] <remexre> how far is DataKinds+GADTs from dependent types?
[04:02:37] <monochrom> Very, very far.
[04:04:57] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:06:58] <c_wraith> IIRC, with TypeInType you get to full dependent.... kinds.  
[04:07:08] <maerwald> and yet, not far enough that people come up with creative ways to emulate all sorts of it
[04:08:37] <monochrom> The imitation game has always defined computing. :)
[04:10:37] <monochrom> OK, but there is still a difference between a watertight emulation and a leaky emulation.
[04:11:25] <monochrom> The need for something like the singleton library proves that we have a very leaky emulation for now.
[04:14:00] *** Joins: jespada (~jespada@190.7.36.46)
[04:14:36] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[04:16:34] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[04:19:43] *** Quits: catman (~catman@user/catman) (Read error: Connection reset by peer)
[04:20:43] *** Quits: lbseale (~lbseale@user/ep1ctetus) (Read error: Connection reset by peer)
[04:21:03] *** Quits: mmhat (~mmh@55d4a9b2.access.ecotel.net) (Quit: WeeChat 3.3)
[04:21:33] *** Joins: catman (~catman@user/catman)
[04:24:10] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[04:27:55] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[04:28:19] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Remote host closed the connection)
[04:28:32] *** Quits: catman (~catman@user/catman) (Quit: WeeChat 3.4-dev)
[04:28:54] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[04:29:03] *** Joins: catman (~catman@user/catman)
[04:29:52] *** Joins: sander (~sander@user/sander)
[04:30:53] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[04:31:34] *** Joins: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407)
[04:31:42] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 260 seconds)
[04:32:01] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[04:32:58] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[04:33:19] *** Quits: jespada (~jespada@190.7.36.46) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[04:33:43] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[04:35:42] <catern> dear lazyirc, how would I write a function which yields an infinite stream of binary numbers in a nice elegant recursive style? i.e. 0, 1, 10, 11, etc (I promise this is not homework)
[04:36:01] <catern> (other than the obvious "map to_binary_string integers")
[04:36:27] <Axman6> what type do you want them to be? 
[04:36:39] <catern> strings
[04:36:47] <catern> or lists, anything other than int, I guess
[04:37:16] <Axman6> there's a really cute way to do it and I can't remember...
[04:37:26] <Axman6> iterate isn't a bad place to start though
[04:37:44] <catern> that's how I'm feeling too, lol
[04:38:38] <Axman6> > concat $ iterate (\xs ->  xs ++ map ('1':) xs) [0,1] -- I wonder if this does anything...
[04:38:40] <lambdabot>  error:
[04:38:40] <lambdabot>      ‚Ä¢ No instance for (Num [Char]) arising from the literal ‚Äò0‚Äô
[04:38:40] <lambdabot>      ‚Ä¢ In the expression: 0
[04:39:00] <Axman6> > concat $ iterate (\xs ->  xs ++ map ('1':) xs) ["0","1"] -- I wonder if this does anything...
[04:39:02] <lambdabot>  ["0","1","0","1","10","11","0","1","10","11","10","11","110","111","0","1","...
[04:39:11] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:39:13] <Axman6> > concat $ iterate (\xs ->  map ('1':) xs) ["0","1"] -- I wonder if this does anything...
[04:39:14] <lambdabot>  ["0","1","10","11","110","111","1110","1111","11110","11111","111110","11111...
[04:39:27] <Axman6> no...
[04:39:27] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[04:40:00] <Axman6> > mapM (flip replicateM "01") [1..]
[04:40:07] <lambdabot>  mueval-core: Time limit exceeded
[04:40:16] <Axman6> > map (flip replicateM "01") [1..]
[04:40:16] <shapr> take?
[04:40:17] <lambdabot>  [["0","1"],["00","01","10","11"],["000","001","010","011","100","101","110",...
[04:40:19] <shapr> oh
[04:41:38] <awpr> > reverse <$> let xs = [('1':), ('0':), id] <*> "1":xs in "0":xs
[04:41:39] <lambdabot>  ["0","11","111","1111","11111","111111","1111111","11111111","111111111","11...
[04:41:50] <awpr> bad ordering
[04:42:03] <Axman6> getting the order right is tough
[04:43:55] * Axman6 feels nerdsniped
[04:44:14] * shapr checks to see if Data.Bits has an Enum instance
[04:45:37] <shapr> nope
[04:46:33] *** Parts: quazimodo (~quazimodo@n1-40-235-47.bla1.nsw.optusnet.com.au) ()
[04:50:28] <awpr> > let go xs = xs ++ go (xs <**> [('0':), ('1':)] ) in fmap reverse $ "0":go ["1"]
[04:50:30] <lambdabot>  ["0","1","10","11","100","101","110","111","1000","1001","1010","1011","1100...
[04:53:20] <monochrom> I would map convert_to_binary [0..], and implement convert_to_binary.
[04:54:16] <monochrom> Actually, s/would/would also consider/  All approaches are worth learning.
[04:55:48] <awpr> > fmap ('1':) . flip replicateM "01" =<< [0..] -- this might fix the replicateM solution? 
[04:55:49] <lambdabot>  ["1","10","11","100","101","110","111","1000","1001","1010","1011","1100","1...
[04:56:03] <awpr> eh.  zero isn't a number anyway
[04:57:08] *** Quits: srk (~sorki@user/srk) (Ping timeout: 260 seconds)
[04:57:19] *** Joins: srk_ (~sorki@user/srk)
[04:58:04] *** Quits: tremon (~tremon@217-63-61-89.cable.dynamic.v4.ziggo.nl) (Quit: getting boxed in)
[04:59:59] *** srk_ is now known as srk
[05:01:11] <Clint> too bad showBin didn't show up until base 4.16
[05:06:42] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Ping timeout: 260 seconds)
[05:21:34] <koz> I want to make a pattern synonym which makes a single-item constructo behave like a two-item constructor where both items are the same item.
[05:21:37] <koz> How do I spell that?
[05:21:57] <koz> 'pattern Foo x x <- Bar x' doesn't work.
[05:22:16] <dibblego> @type join (,)
[05:22:17] <lambdabot> b -> (b, b)
[05:23:00] <koz> dibblego: I don't follow.
[05:23:47] *** Joins: fvr (uid503686@id-503686.uxbridge.irccloud.com)
[05:24:47] <dibblego> I guess, why?
[05:25:15] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:27:39] *** Joins: ahlk (~user@2600:1700:31c0:3a10::43)
[05:30:48] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[05:34:04] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[05:34:39] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:40:43] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[05:46:50] *** Joins: Sgeo_ (~Sgeo@user/sgeo)
[05:47:26] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[05:48:08] *** Quits: Sgeo (~Sgeo@user/sgeo) (Ping timeout: 268 seconds)
[05:50:07] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[05:50:35] * zero is the *best* number
[05:53:23] *** Parts: zero (~z@user/zero) ()
[05:54:36] *** Joins: zero (~z@user/zero)
[05:54:39] *** Parts: zero (~z@user/zero) ()
[06:05:30] *** Quits: ahlk (~user@2600:1700:31c0:3a10::43) (Read error: Connection reset by peer)
[06:05:44] *** Joins: ahlk (~user@2600:1700:31c0:3a10::43)
[06:12:11] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 268 seconds)
[06:13:21] *** Quits: trillp (~trillp@69.233.98.238) (Quit: nyaa~)
[06:13:35] *** Quits: emf (~emf@2620:10d:c090:400::5:f24f) (Ping timeout: 264 seconds)
[06:15:39] *** Joins: emf (~emf@2620:10d:c091:480::1:9d5d)
[06:15:54] *** Joins: zmt00 (~zmt00@user/zmt00)
[06:16:42] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[06:17:07] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[06:21:27] *** Quits: xff0x (~xff0x@2001:1a81:537f:9c00:96ab:881b:fbec:f66f) (Ping timeout: 268 seconds)
[06:22:04] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[06:22:47] *** Joins: xff0x (~xff0x@2001:1a81:53bc:d300:c35b:4f80:361f:6318)
[06:26:43] *** Joins: emf_ (~emf@2620:10d:c090:400::5:5f62)
[06:27:00] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 268 seconds)
[06:28:35] *** Quits: emf (~emf@2620:10d:c091:480::1:9d5d) (Ping timeout: 264 seconds)
[06:28:39] *** Quits: boxscape_ (~boxscape_@mue-88-130-59-184.dsl.tropolys.de) (Quit: Connection closed)
[06:31:18] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 268 seconds)
[06:34:26] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[06:41:43] <monochrom> zero : best number :: nobody : perfect  >:)
[06:41:56] *** Joins: boxscape_ (~boxscape_@mue-88-130-59-184.dsl.tropolys.de)
[06:44:16] *** Quits: xff0x (~xff0x@2001:1a81:53bc:d300:c35b:4f80:361f:6318) (Ping timeout: 268 seconds)
[06:45:05] *** Joins: xff0x (~xff0x@2001:1a81:53bc:d300:4699:7f78:c236:affc)
[06:48:43] *** Quits: tcard_ (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp) (Quit: Leaving)
[06:50:12] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.2)
[06:59:41] *** Quits: xff0x (~xff0x@2001:1a81:53bc:d300:4699:7f78:c236:affc) (Ping timeout: 268 seconds)
[07:00:18] *** Joins: xff0x (~xff0x@port-92-195-109-25.dynamic.as20676.net)
[07:06:26] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[07:10:23] *** Joins: mbuf (~Shakthi@171.61.170.115)
[07:11:52] *** Joins: zmt01 (~zmt00@user/zmt00)
[07:13:10] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 260 seconds)
[07:15:34] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 260 seconds)
[07:17:25] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[07:17:50] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 260 seconds)
[07:19:42] *** Joins: stevenxl_ (~stevenlei@174.128.182.120)
[07:30:39] *** Quits: stevenxl_ (~stevenlei@174.128.182.120) (Quit: leaving)
[07:30:55] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[07:35:34] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[07:35:54] *** Quits: alx741 (~alx741@181.196.69.253) (Quit: alx741)
[07:45:50] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 260 seconds)
[07:51:28] *** Quits: boxscape_ (~boxscape_@mue-88-130-59-184.dsl.tropolys.de) (Ping timeout: 268 seconds)
[07:55:22] *** Joins: Krusl (~Krusl@2001:da8:9000:a436:b9ff:5056:861f:3e05)
[07:55:29] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[07:58:32] *** Joins: zmt00 (~zmt00@user/zmt00)
[08:05:26] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Ping timeout: 260 seconds)
[08:05:54] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 260 seconds)
[08:15:04] *** Quits: Krusl (~Krusl@2001:da8:9000:a436:b9ff:5056:861f:3e05) (Read error: Connection reset by peer)
[08:18:03] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:28:18] *** Quits: Athas (athas@2a01:7c8:aaac:1cf:ca09:aa6a:e1e8:dce5) (Quit: ZNC 1.8.2 - https://znc.in)
[08:28:28] *** Joins: Athas (athas@sigkill.dk)
[08:35:17] *** Joins: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp)
[08:41:33] *** Joins: eggplant_ (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[08:41:50] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:54f0:825c:9f33:c349) (Ping timeout: 260 seconds)
[08:41:53] *** Joins: iqubic (~user@2601:602:9502:c70:458b:ca39:de67:50b0)
[08:43:20] <iqubic> What's the best way to test if a given double is a whole number? Should I just use "(\x -> floor x == x)"?
[08:43:42] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[08:45:05] <iqubic> No, that doesn't work, because there's no instance for (Integral Double)
[08:45:35] <iqubic> s/whole/integer/
[08:47:05] *** Joins: zmt00 (~zmt00@user/zmt00)
[08:47:19] <c_wraith> it's a bit of a weird question, because it's generally not a good idea to think of a Double as representing a number
[08:47:30] <c_wraith> It's more like a range of possible numbers
[08:48:06] <iqubic> How so?
[08:48:15] <c_wraith> > 1 / 3
[08:48:17] <lambdabot>  0.3333333333333333
[08:48:24] *** __xor is now known as _xor
[08:48:29] <c_wraith> > 3 * (1 / 3)
[08:48:30] <lambdabot>  1.0
[08:48:47] <c_wraith> there's a bit of a contradiction, there
[08:49:43] <iqubic> Why?
[08:50:47] <c_wraith> if you multiply 0.3333333333333333 by 3, you end up with a string of 9s after the decimal point.  (no, this is not .9 repeating equals one, because that's not repeating)
[08:52:11] <c_wraith> that tells you that the result of (1/3) isn't exactly what it prints, because that would multiply out differently.  But it also isn't exactly the rational 1/3, because that's not encodable in the IEEE-754 format
[08:52:21] <c_wraith> it's... squishier
[08:52:32] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[08:52:59] <iqubic> Yeah. Doubles are weird.
[08:56:08] <c_wraith> quick quiz: is (0.5 + 2^54 - 2^54 - 0.5 ) a whole number?
[08:56:14] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 268 seconds)
[08:56:24] <c_wraith> > 0.5 + 2^54 - 2^54 - 0.5
[08:56:25] <lambdabot>  -0.5
[08:56:40] <c_wraith> It's a weird question to ask about floating-point. :)
[08:57:08] <dsal> Usually the best question when dealing with floating point has "epsilon" somewhere in it.
[08:58:10] *** Joins: zmt00 (~zmt00@user/zmt00)
[08:58:22] <c_wraith> all that said, you can probably get what you want in the obvious cases with `ceiling x == floor x'
[08:58:58] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:00:27] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[09:00:27] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[09:00:27] *** Joins: wroathe (~wroathe@user/wroathe)
[09:03:21] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[09:04:39] *** Joins: zmt01 (~zmt00@user/zmt00)
[09:05:29] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[09:09:10] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 268 seconds)
[09:16:34] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 268 seconds)
[09:18:25] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[09:19:49] *** Quits: Skyfire (~pyon@user/pyon) (Read error: Connection reset by peer)
[09:24:48] *** Joins: zmt00 (~zmt00@user/zmt00)
[09:25:34] *** Quits: zmt00 (~zmt00@user/zmt00) (Remote host closed the connection)
[09:28:17] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 268 seconds)
[09:33:24] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Ping timeout: 276 seconds)
[09:34:07] <Axman6> :t properFraction
[09:34:09] <lambdabot> (RealFrac a, Integral b) => a -> (b, a)
[09:34:21] <Axman6> > properFraction pi
[09:34:22] <lambdabot>  (3,0.14159265358979312)
[09:35:07] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[09:35:38] <Axman6> > let isWhole (properFraction -> (_,x)) = x == 0 in (isWhole 1, isWhole 1000000000001, isWhole pi, isWhole (3 * (1/3))) 
[09:35:38] *** Quits: MQ-17J (~MQ-17J@8.6.144.203) (Read error: Connection reset by peer)
[09:35:40] <lambdabot>  (True,True,False,True)
[09:36:40] *** Joins: MQ-17J (~MQ-17J@8.6.144.203)
[09:39:12] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[09:39:53] *** Joins: hendursaga (~weechat@user/hendursaga)
[09:43:25] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[09:58:58] *** Joins: rkrishnan (~user@223.226.59.167)
[10:09:12] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[10:17:38] *** Quits: timCF_ (~timCF@m91-129-101-112.cust.tele2.ee) (Ping timeout: 268 seconds)
[10:19:46] *** Joins: max22- (~maxime@2a01cb0883359800d15ccd5476102118.ipv6.abo.wanadoo.fr)
[10:29:10] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[10:30:15] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[10:37:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[10:42:55] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[10:48:40] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:49:43] *** Quits: juhp (~juhp@128.106.188.220) (Quit: juhp)
[10:53:39] *** Quits: Sgeo_ (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[10:55:45] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[10:57:11] *** Joins: img (~img@user/img)
[10:59:37] *** Joins: michalz (~michalz@185.246.204.104)
[11:02:51] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:03:14] *** Quits: son0p (~ff@181.136.122.143) (Ping timeout: 260 seconds)
[11:03:56] *** Quits: son0p- (~ff@181.136.122.143) (Ping timeout: 260 seconds)
[11:05:27] *** Joins: fendor (~fendor@77.119.197.65.wireless.dyn.drei.com)
[11:10:56] *** Quits: fizzsegfaultbuzz (~segfaultf@135-180-0-138.static.sonic.net) (Ping timeout: 260 seconds)
[11:14:10] *** Joins: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se)
[11:15:48] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[11:16:22] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[11:17:48] *** Joins: img (~img@user/img)
[11:18:55] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[11:19:08] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[11:22:36] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:c40:37f:b11e:565f)
[11:22:59] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[11:24:00] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[11:24:36] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[11:25:25] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[11:30:23] *** Quits: eggplant_ (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[11:32:44] *** Joins: neurocyte0132889 (~neurocyte@IP-213157011136.dynamic.medianet-world.de)
[11:32:44] *** Quits: neurocyte0132889 (~neurocyte@IP-213157011136.dynamic.medianet-world.de) (Changing host)
[11:32:44] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[11:33:23] *** Quits: fvr (uid503686@id-503686.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[11:35:19] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:38:51] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:40:20] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:42:26] *** Joins: jumper149 (~jumper149@80.240.31.34)
[11:43:39] *** Joins: cfricke (~cfricke@user/cfricke)
[11:49:33] *** Joins: acidjnk (~acidjnk@p200300d0c7441145a0f2d1eed66e92ec.dip0.t-ipconnect.de)
[11:51:07] *** Joins: shidima (~shidima@188-206-67-204.mobile.kpn.net)
[11:53:24] *** Joins: chele (~chele@user/chele)
[11:58:08] <shidima> @Hecate, thanks for the help! Sorry I didn't react, things got a bit hectic :) I Think I solved it: https://paste.tomsmeding.com/60CO6IQm
[11:58:08] <lambdabot> Unknown command, try @list
[12:00:32] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:06:41] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[12:07:50] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Read error: Connection reset by peer)
[12:09:43] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Remote host closed the connection)
[12:10:17] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[12:15:25] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[12:20:47] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[12:21:44] *** Joins: neurocyte0132889 (~neurocyte@IP-213157011136.dynamic.medianet-world.de)
[12:21:44] *** Quits: neurocyte0132889 (~neurocyte@IP-213157011136.dynamic.medianet-world.de) (Changing host)
[12:21:44] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[12:22:41] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[12:23:49] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[12:29:31] *** Joins: img (~img@user/img)
[12:30:12] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[12:31:01] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[12:31:02] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[12:31:51] <shidima> I'm (trying) to follow 'Practical Haskell, a real world guide'. But I keep running into problems with the code from the book. Does any one have any experiance with the book?
[12:34:37] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[12:35:42] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 260 seconds)
[12:36:07] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Remote host closed the connection)
[12:37:35] <merijn> Never heard of it, tbh. But then there seem to be dozens of books I haven't heard of in the past 5 years :p
[12:37:54] <merijn> What kinda problems?
[12:41:33] *** Joins: azeem (~azeem@emp-89-199.eduroam.uu.se)
[12:43:06] *** Quits: timCF (~timCF@200-149-20-81.sta.estpak.ee) (Ping timeout: 260 seconds)
[12:45:31] *** Joins: fvr (uid503686@id-503686.uxbridge.irccloud.com)
[12:45:55] <shidima> Well, the code examples are not working, and I'm not sure it is all my fault. That makes it a bit frustrating.
[12:47:12] *** Joins: ubert (~Thunderbi@p200300ecdf4fca90e6b318fffe838f33.dip0.t-ipconnect.de)
[12:48:09] <merijn> shidima: Can you pastebin an example and the error it gives?
[12:49:49] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[12:51:40] *** Joins: jonathanclarke (~jonathanc@36.252.181.57)
[12:52:02] *** Quits: ubert (~Thunderbi@p200300ecdf4fca90e6b318fffe838f33.dip0.t-ipconnect.de) (Remote host closed the connection)
[12:52:17] *** Joins: mei (~mei@user/mei)
[12:52:20] *** Joins: ubert (~Thunderbi@p200300ecdf4fca90e6b318fffe838f33.dip0.t-ipconnect.de)
[12:52:42] <shidima> The code compiles, but when I run the example in ghci I get an error: https://paste.tomsmeding.com/tK9370YY
[12:52:48] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[12:54:04] <merijn> shidima: oh!
[12:54:26] <merijn> shidima: If that's literally copy paste from the book, it's an error in the book
[12:54:38] <merijn> shidima: Consider this: How many arguments does clientName take?
[12:55:03] <shidima> just one
[12:55:06] <shidima> A string
[12:55:47] <shidima> I tried moving the last bracket around the boolean at the end, but thats not working either :)
[12:56:11] <merijn> oh, there's a bunch of problems there
[12:56:28] <merijn> Starting with: Individual [Person "Jack" "Smith" Male]
[12:56:49] *** Joins: hge (~helmut@2a02:8106:223:e000:2c6e:6ca4:e28e:520)
[12:56:57] <merijn> shidima: If you look at line 5 you see that Individual is defined to take a Person and Bool as arguments
[12:57:05] <merijn> But it's getting a list of Person there
[12:57:36] <[exa]> weird, the code contains normal (parens) ?
[12:57:37] *** Quits: hge (~helmut@2a02:8106:223:e000:2c6e:6ca4:e28e:520) (Client Quit)
[12:57:57] <merijn> [exa]: Copy paste error? Or weird fancy book formatting?
[12:58:39] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[12:59:00] <merijn> shidima: Anyway, even if you replace the [] with () it will go wrong because "Individual (Person "Jack" "Smith" Male) :: Bool -> Client" and you are applying clientName (which wants a Client) to that function and trying to apply the result of that to True
[12:59:04] <[exa]> no idea I just clicked that and wondered where the H does the error come from
[12:59:36] <merijn> [exa]: The error is triggered by line 4 of the error paste
[13:00:22] <[exa]> aah the code isn't in datatypes.hs, ok good :]
[13:00:58] <[exa]> then just bracketing problems :]
[13:01:25] <shidima> Relevant section in the book: https://snipboard.io/6VWrgx.jpg
[13:02:27] <merijn> shidima: Yeah, that is just straight up type error in the example
[13:02:40] <merijn> That's...not a good look
[13:03:10] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[13:03:15] <shidima> It makes it a bit hard if you are still learning :)
[13:03:53] <merijn> shidima: The correct code woulda been: clientName (Individual (Person "Jack" "Smith" Male) False)
[13:04:17] <merijn> i.e. Individual applied to two arguments (Person and Bool) and clientName applied to the result of that
[13:04:45] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Ping timeout: 268 seconds)
[13:05:10] <merijn> Not inspiring a lot of confidence if the text has this level of error, though
[13:05:16] <shidima> Yes, that works. I already had my doubt about the dangeling boolean, but wasent sure about the square brackets
[13:06:15] <shidima> Well, time to find a different book then. To bad, I do like the premis of building something in a book, and not just loose examples
[13:06:31] <merijn> @where books
[13:06:31] <lambdabot> https://www.extrema.is/articles/haskell-books, see also @where LYAH, RWH, YAHT, SOE, HR, PIH, TFwH, wikibook, PCPH, HPFFP, HTAC, TwT, FoP, PFAD, WYAH, non-haskell-books
[13:06:48] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[13:07:30] <merijn> "Thinking Functionally with Haskell" and "Programming in Haskell" are well regarded. Haskell Programming from First Principles is solid but rather verbose and huge
[13:07:55] <shidima> Heh, this book is on the list tho :)
[13:08:30] <shidima> I will look into you sugestions, thanks!
[13:08:52] *** Quits: alzgh (~alzgh@user/alzgh) (Ping timeout: 256 seconds)
[13:13:35] *** Quits: wolfshappen (~waff@irc.furworks.de) (Ping timeout: 260 seconds)
[13:13:43] *** Joins: wolfshappen_ (~waff@irc.furworks.de)
[13:14:12] *** Joins: drownbes (~drownbes@200-149-20-81.sta.estpak.ee)
[13:15:48] *** Joins: thyriaen (~thyriaen@x4dbf0bd8.dyn.telefonica.de)
[13:16:11] *** Joins: juhp (~juhp@128.106.188.220)
[13:17:04] *** Quits: ubert (~Thunderbi@p200300ecdf4fca90e6b318fffe838f33.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[13:17:05] <merijn> shidima: I mean, anyone can edit that list, so it's not necessarily all held in the same regard :p
[13:17:18] <shidima> hehe :)
[13:17:34] *** Joins: hellcatto (~hellcatto@user/runecroon)
[13:19:21] <hellcatto> Hello, I'm using VSCode and haskell-lsp right now. How do I rename identifier using lsp? Usually, with other langs that runs on LSP, I could just press f2 and rename. Is it different keybinding or is not yet an available feature?
[13:20:11] <jneira[m]> it is not available by default yet, nor included in the prebuilt binaries
[13:20:38] <jneira[m]> https://github.com/haskell/haskell-language-server/issues/2193
[13:20:59] <hellcatto> jneira[m]: I see. Thank you for pointing that out.
[13:21:02] <drownbes> Hi. I am using ghc as library to transform ast and write back to file. The problem is that parseModule function gives ast without comments and pragmas. How I extract them from module and insert back into generated file?
[13:22:18] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 260 seconds)
[13:24:22] <dminuoso> drownbes: This is a very complicated problem domain.
[13:24:35] <dminuoso> I recall a variety of papers on that subject
[13:25:11] *** Quits: hellcatto (~hellcatto@user/runecroon) (Quit: Leaving)
[13:26:13] <dminuoso> drownbes: This is called exact printing
[13:26:33] <geekosaur> ghc-exactprint is supposed to be merged as of 9.2.1, but I don't know if you need extra flags to use it
[13:26:52] <geekosaur> this is probably a question for #ghc
[13:29:51] <alanz> geekosaur: the main functionality is in ghc, but you currently still use ghc-exactprint from hackage. Version 1.1. And it may need an update for the actual release. Will do it today
[13:30:06] <drownbes> thx. It's not my case. Our project is stuck for while on 8.6.5. I guess for practical usecase we can just extract pragmas as a strings and ignore comments...
[13:33:02] <drownbes> i came to haskell from js world and there codeshifts using ast are quite common in migrating large codebases to new versions of language. https://astexplorer.net/
[13:33:38] <drownbes> is there any such gui ast explorer for haskell?
[13:34:04] <maerwald> ahahaha
[13:36:10] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[13:37:12] *** Joins: cosimone (~user@93-47-228-48.ip115.fastwebnet.it)
[13:40:31] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Ping timeout: 268 seconds)
[13:45:37] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[13:48:10] *** Joins: gensyst (gensyst@user/gensyst)
[13:48:47] <gensyst> Is there any isMainThread function out there, to check if current thread is the main thread?
[13:49:43] <gensyst> (other than grab the main thread id in main func and pass it around everywhere)
[13:50:09] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Read error: Connection reset by peer)
[13:50:41] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[13:52:32] *** Joins: wonko (~wjc@user/wonko)
[13:53:18] <merijn> gensyst: not afaik
[13:53:56] *** Joins: ubert (~Thunderbi@ip5b405828.dynamic.kabel-deutschland.de)
[13:57:04] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[13:58:00] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[13:58:30] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Client Quit)
[14:01:34] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[14:05:21] *** Quits: thyriaen (~thyriaen@x4dbf0bd8.dyn.telefonica.de) (Quit: Leaving)
[14:09:36] <maerwald> can use a global IORef
[14:12:38] <gensyst> maerwald, i guess that will be fine, thanks
[14:13:13] <maerwald> make sure to use NOINLINE
[14:14:21] <maerwald> foo = unsafePerformIO $ newIORef 0
[14:16:39] *** Quits: Cajun (~Cajun@user/cajun) (Quit: Client closed)
[14:17:24] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[14:19:39] *** Parts: thblt (~thblt@user/thblt) (ERC (IRC client for Emacs 28.0.50))
[14:22:36] <gensyst> thanks!
[14:26:00] <gensyst> maerwald, the NOINLINE ensures the cached version is used in 2nd and later calls?
[14:26:08] <gensyst> (i.e. always the same ioref)
[14:27:56] *** Joins: Cajun (~Cajun@user/cajun)
[14:29:06] *** Quits: shidima (~shidima@188-206-67-204.mobile.kpn.net) (Ping timeout: 260 seconds)
[14:29:31] <maerwald> yeah sorta
[14:29:40] <gensyst> maerwald, and another question is, how to actually make sure this gets called when i call it in main? (other than forcing its evaluation by outputting the main thread id to stdout)
[14:30:51] *** Joins: alx741 (~alx741@181.196.69.253)
[14:31:52] <maerwald> you use writeIORef in `main` to fill it
[14:31:54] <maerwald> that should be enough
[14:32:49] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[14:33:46] *** Joins: yauhsien_ (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[14:33:54] <dminuoso> gensyst: unsafePerformIO can be subtly dangerous. :)
[14:34:40] <maerwald> dminuoso: what's unsafe about this particular pattern other than that it's a hack?
[14:35:16] <dminuoso> Nothing, just saying that the NOINLINE is needed precisely because unsafePerformIO is subtly dangerous.
[14:35:23] <maerwald> sure
[14:37:51] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[14:37:52] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 268 seconds)
[14:37:54] <dminuoso> gensyst: You can assume the thread id of main to be 24. Your program will be right 75% (?) of the time.
[14:38:00] <dminuoso> /s
[14:44:05] *** Joins: arjun (~user@user/arjun)
[14:44:23] <arjun> how do i point to cabal that install this package from this url and not hackage ?
[14:44:25] *** Quits: agoraphobic (~agoraphob@ip11-173.bon.riksnet.se) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[14:44:31] <arjun> its a github master branch
[14:44:38] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[14:45:13] <jneira[m]> `source-repository-package` in `cabal.project`?
[14:45:21] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:45:46] <jneira[m]> https://cabal.readthedocs.io/en/latest/cabal-package.html#pkg-section-source-repository-source-repository
[14:47:24] <gensyst> maerwald, ah, so the initial value is just a dummy value? (undefined for instance)
[14:47:38] <gensyst> (undefined :: ThreadId)
[14:48:14] <gensyst> s/initial value/the value put into newIORef
[14:48:45] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[14:48:59] <gensyst> no, forget that. it seems more like i'll be duplicating the main thread ID. once for newIORef, and then into writeIORef just to make sure it's in there
[14:49:07] <gensyst> kind of unfortunate duplication though
[14:49:57] <arjun> jneira[m]: no good
[14:50:19] <arjun> maybe im missing something here
[14:50:34] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[14:50:56] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:53:37] *** Quits: yauhsien_ (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Remote host closed the connection)
[14:54:12] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[14:54:40] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[15:00:17] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[15:01:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[15:01:35] <arjun> jneira[m]: got it working, nvm, thanks!
[15:07:14] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:12:18] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[15:12:26] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[15:12:39] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:16:15] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[15:20:31] *** Joins: jakalx (~jakalx@base.jakalx.net)
[15:22:46] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[15:23:30] *** Quits: jonathanclarke (~jonathanc@36.252.181.57) (Ping timeout: 268 seconds)
[15:23:36] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:29:03] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[15:29:26] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:30:46] *** Joins: jstolarek (~jstolarek@137.220.120.162)
[15:33:05] *** Joins: shidima (~shidima@84-104-108-90.cable.dynamic.v4.ziggo.nl)
[15:33:13] *** Joins: mikoto-chan (~mikoto-ch@185.25.79.186)
[15:33:13] *** Joins: guniberas (~guniberas@42.191.188.121)
[15:34:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[15:35:12] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:35:28] *** Quits: mikoto-chan (~mikoto-ch@185.25.79.186) (Client Quit)
[15:37:22] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[15:40:54] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Remote host closed the connection)
[15:42:45] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[15:43:50] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Ping timeout: 268 seconds)
[15:47:32] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[15:53:08] *** Joins: kadir (~kadir@95.7.9.203)
[15:53:42] *** Quits: MQ-17J (~MQ-17J@8.6.144.203) (Ping timeout: 268 seconds)
[15:53:43] *** Quits: azeem (~azeem@emp-89-199.eduroam.uu.se) (Ping timeout: 268 seconds)
[15:54:19] *** Joins: azeem (~azeem@2a00:801:23e:a5f6:638b:961c:396f:f659)
[15:55:01] *** Joins: servytor (uid525486@id-525486.hampstead.irccloud.com)
[15:55:36] *** Quits: slowtyper (~slowtyper@user/slowtyper) (Ping timeout: 260 seconds)
[15:55:43] *** Joins: Ainoretho (~ypw@huji-132-64-245-223.xt.huji.ac.il)
[15:55:50] *** Quits: Ainoretho (~ypw@huji-132-64-245-223.xt.huji.ac.il) (Client Quit)
[15:56:36] <servytor> I am trying to decide between common lisp and haskell for a project
[15:57:01] <servytor> I am worried because I have had issues with haskell-language-server borking up when editing in emacs
[15:57:18] *** Joins: jonathanclarke (~jonathanc@110.44.127.167)
[15:58:26] *** Joins: slowtyper (~slowtyper@user/slowtyper)
[15:58:46] *** Joins: Ainoretho (~ypw@huji-132-64-245-223.xt.huji.ac.il)
[16:00:02] *** Quits: Ainoretho (~ypw@huji-132-64-245-223.xt.huji.ac.il) (Client Quit)
[16:00:16] *** Joins: Ainoretho (~ypw@huji-132-64-245-223.xt.huji.ac.il)
[16:01:47] *** Quits: Ainoretho (~ypw@huji-132-64-245-223.xt.huji.ac.il) (Client Quit)
[16:02:02] *** Joins: Ainoretho (~ypw@huji-132-64-245-223.xt.huji.ac.il)
[16:02:14] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[16:02:20] *** Quits: mei (~mei@user/mei) (Ping timeout: 268 seconds)
[16:02:58] *** Quits: jonathanclarke (~jonathanc@110.44.127.167) (Ping timeout: 268 seconds)
[16:06:55] *** Joins: mei (~mei@user/mei)
[16:07:02] *** Quits: Ainoretho (~ypw@huji-132-64-245-223.xt.huji.ac.il) (Quit: WeeChat 3.3)
[16:10:17] *** Parts: kadir (~kadir@95.7.9.203) ()
[16:12:55] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[16:12:59] *** Joins: thyriaen (~thyriaen@x4dbf0bd8.dyn.telefonica.de)
[16:14:29] *** Joins: jonathanclarke (~jonathanc@36.252.181.57)
[16:14:45] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:15:32] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[16:16:21] *** Quits: gensyst (gensyst@user/gensyst) (Quit: Leaving)
[16:18:59] *** Quits: mei (~mei@user/mei) (Ping timeout: 268 seconds)
[16:20:10] *** Joins: yrlnry (~mjd@pool-100-11-2-80.phlapa.fios.verizon.net)
[16:20:58] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[16:21:46] <maerwald> I'm worried too
[16:23:56] *** Quits: max22- (~maxime@2a01cb0883359800d15ccd5476102118.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[16:27:47] *** Quits: azeem (~azeem@2a00:801:23e:a5f6:638b:961c:396f:f659) (Read error: Connection reset by peer)
[16:28:04] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Remote host closed the connection)
[16:28:39] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[16:28:53] *** Joins: azeem (~azeem@emp-89-199.eduroam.uu.se)
[16:29:32] *** Joins: kadir (~kadir@95.7.9.203)
[16:30:05] *** Quits: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se) (Ping timeout: 268 seconds)
[16:31:54] *** Joins: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se)
[16:32:19] <servytor> maerwald: what's your experience with hls?
[16:33:20] <maerwald> it works occasionally
[16:33:47] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[16:33:49] <maerwald> some issues with TH
[16:34:27] *** Joins: mmhat (~mmh@55d4b212.access.ecotel.net)
[16:34:37] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[16:36:01] <dminuoso> The main thing I dislike about HLS is that it adds quite a bit of complexity and moving parts.
[16:36:15] <dminuoso> When things go wrong, it's usually some combination of "restart the entire editor and/or hls"
[16:36:16] *** Quits: azeem (~azeem@emp-89-199.eduroam.uu.se) (Ping timeout: 268 seconds)
[16:36:26] <dminuoso> It adds great value, but it's definitely not lightweight
[16:36:33] <maerwald> I think that's more due to the nature of LSP
[16:37:18] <dminuoso> Perhaps, but stories of stale compilation state are not unhead of, and that's an HLS issue
[16:38:14] <maerwald> if I knew how to fix I would rant more about it
[16:38:16] <dminuoso> But it's absolutely lovely to remove some binding, and then have HLS clean up 17 unused imports with jus one click.
[16:38:33] *** Joins: azeem (~azeem@2a00:801:23e:a5f6:638b:961c:396f:f659)
[16:38:47] <dminuoso> It improved my haskell life considerably, but the brittleness is definitely noticeable at times
[16:39:18] <dminuoso> ghcide should still not be forgotten, as that one is really solid, stable and lightweight.. :)
[16:39:20] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 268 seconds)
[16:40:03] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[16:41:46] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[16:43:03] *** Quits: arjun (~user@user/arjun) (Remote host closed the connection)
[16:43:38] <merijn> dminuoso: Define solid
[16:43:49] <merijn> dminuoso: For me it breaks on everything but the most trivial code
[16:46:15] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[16:46:31] *** Quits: ncopa (~ncopa@gbr2-dev1.alpinelinux.org) (Changing host)
[16:46:31] *** Joins: ncopa (~ncopa@alpine/developer/ncopa)
[16:48:34] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:50:12] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[16:52:55] *** Quits: azeem (~azeem@2a00:801:23e:a5f6:638b:961c:396f:f659) (Ping timeout: 268 seconds)
[16:53:51] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Remote host closed the connection)
[16:54:18] *** Joins: cigsender (~cigsender@74.124.58.162)
[16:54:27] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[16:54:38] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[16:54:57] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[16:57:23] *** Quits: jonathanclarke (~jonathanc@36.252.181.57) (Ping timeout: 264 seconds)
[16:58:48] *** Joins: azeem (~azeem@emp-89-199.eduroam.uu.se)
[16:59:41] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[17:00:15] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[17:06:44] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[17:09:04] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Read error: Connection reset by peer)
[17:09:31] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[17:10:49] *** Joins: jonathanclarke (~jonathanc@36.252.181.57)
[17:11:06] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Remote host closed the connection)
[17:11:40] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[17:14:36] *** Parts: kadir (~kadir@95.7.9.203) ()
[17:16:50] *** Joins: mei (~mei@user/mei)
[17:16:58] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[17:17:36] *** Quits: w1gz (~do@159.89.11.133) (Quit: WeeChat 3.0.1)
[17:18:14] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[17:20:31] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Remote host closed the connection)
[17:22:51] *** Quits: mei (~mei@user/mei) (Read error: Connection reset by peer)
[17:23:00] *** Joins: mei (~mei@user/mei)
[17:23:41] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[17:23:41] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[17:23:41] *** Joins: wroathe (~wroathe@user/wroathe)
[17:25:04] *** Joins: Guest|69 (~Guest|69@89.211.234.25)
[17:25:15] <Guest|69> Hello guys
[17:25:48] <geekosaur> ohai
[17:26:03] <Guest|69> these are my first days using Haskell on Mac , and I'm having a problem:
[17:26:06] <maerwald> Guest|69: run `source ~/.ghcup/env`
[17:27:01] <Guest|69> whenever I restart the terminal and run ghci the terminal gives command not found
[17:27:38] <Guest|69> although I did install it 
[17:30:31] <yushyin> maerwald: i see your crystal ball is working wonderfully today
[17:30:52] <[exa]> Guest|69: you probably need to ensure that the PATH setting is loaded everytime you start the terminal
[17:31:09] <[exa]> Guest|69: did you check bashrc and everything? (not sure that exists on mac though)
[17:31:20] <merijn> [exa]: zsh by default nowadays
[17:31:25] <Guest|69> I thought of that but I didn't know how to do it
[17:31:49] <[exa]> check out if you have any .zshrc or similar files in your home dir
[17:31:56] <Guest|69> sorry but I'm jus
[17:32:00] <dminuoso> merijn: Not sure why ghcide would break for you.
[17:32:06] * [exa] <- totally untouched by Mac
[17:32:06] <Guest|69> new to programming
[17:32:24] *** Quits: Guest|69 (~Guest|69@89.211.234.25) (Quit: Connection closed)
[17:33:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[17:34:11] *** Joins: Guest|58 (~Guest|58@89.211.234.25)
[17:34:33] <[exa]> Guest|58: try something like:   ls -a ~
[17:34:34] *** Joins: do (~do@159.89.11.133)
[17:35:23] <Guest|58> hello I'm guest 69
[17:36:04] *** Quits: mei (~mei@user/mei) (Ping timeout: 268 seconds)
[17:36:09] <merijn> dminuoso: FFI and TH are both brittle
[17:36:29] <Guest|58> so I install Haskell then when I restart my terminal it doesn't work
[17:36:31] <dminuoso> Guess they are brittle irrespective of whether its HLS or ghcide
[17:36:38] <merijn> dminuoso: Also lack of component support
[17:36:41] <dminuoso> Though ffi hasnt been a problem yet, QQ/TH is.
[17:38:17] <maerwald> dminuoso: I have problems with ffi... -fobject-code seems to break stuff
[17:44:01] <Guest|58> how can I save Haskell so I don't have to reinstall it each time I restart my terminal 
[17:45:02] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 260 seconds)
[17:45:37] <yushyin> Guest|58: run `source ~/.ghcup/env` this in your terminal, if this works, add it to the end of your ~/.zshrc
[17:46:49] *** Quits: Nachtgespenst (~user@user/siracusa) (Quit: Bye!)
[17:49:40] *** Joins: boxscape_ (~boxscape_@134.171.69.87)
[17:49:56] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[17:49:56] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[17:49:56] *** Joins: wroathe (~wroathe@user/wroathe)
[17:50:25] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:50:49] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:50:55] <Guest|58> yushyin I got nothing like I simply pressed enter
[17:52:35] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[17:52:35] *** Joins: slack1256 (~slack1256@191.126.99.76)
[17:52:41] <Guest|58> Uploaded file: https://uploads.kiwiirc.com/files/efabc507c63ccc0b8193f4aaebf0af19/Screenshot%202021-11-02%20at%2017.21.36.png
[17:53:19] <slack1256> What is the second most popular numerical hierarchy? The `foundation` library seems to be it, right?
[17:54:05] <merijn> The 2nd most popular is "none" :p
[17:54:10] <geekosaur> Guest|58, it won't do anything visible, but "ghci" should work afterward
[17:54:11] *** do is now known as w1gz
[17:54:35] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[17:54:45] <geekosaur> hm, that screenshot says you're already in ghci
[17:54:56] <slack1256> merijn: :sad: 
[17:55:12] <geekosaur> the "Prelude>" prompt, indicating that the module "Prelude" is active because you didn't load a different module)
[17:55:37] <Guest|58> my problem is when I restart my terminal i can't run ghci
[17:55:57] <geekosaur> right, at that point you run that "source" command and then you should be able to run ghci
[17:55:59] <Guest|58> it's like I didn't install Haskell in the first place
[17:56:21] <geekosaur> if that works, you add the "source" command to your .zshrc so it'll be run automatically when you open a terminal
[17:57:43] <Guest|58> source ~/.ghcup/env this source command ?
[17:57:50] <geekosaur> yes
[17:58:20] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[17:58:29] <geekosaur> to summarize what's going on, the terminal only looks in certain places for commands. the "source" command adds a new place to that list of places, so ghc and ghci should be found afterward
[17:58:58] <Guest|58> thank you
[17:59:20] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[17:59:32] <Guest|58> and how can I add source command to .zshrc?
[17:59:47] <yushyin> but the screenshot indicates that the bootstrap script has already changed the zshrc, so I don't know exactly what's going wrong there
[18:00:38] <maerwald> maybe they're using bash and not zsh
[18:01:01] <maerwald> login shell isn't necessarily the same as user shell
[18:01:22] *** Quits: jonathanclarke (~jonathanc@36.252.181.57) (Ping timeout: 260 seconds)
[18:01:58] <Guest|58> Uploaded file: https://uploads.kiwiirc.com/files/8fbbcbb7702eab5562cc07ab592f52b8/Screenshot%202021-11-02%20at%2017.31.12.png
[18:02:42] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[18:02:50] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Ping timeout: 260 seconds)
[18:03:03] <geekosaur> if it's modern os x, it'll be zsh unless they've made specific (and complicated on os x) changes
[18:03:08] <maerwald> "To update your account to use zsh, please run..."
[18:03:14] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 260 seconds)
[18:04:38] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[18:04:43] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[18:05:05] <Guest|58> I ran it and got no changes made
[18:06:29] <yushyin> I believe you will need to re-login after such a change.
[18:06:45] <merijn> You need to exit and restart the Terminal
[18:07:16] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:07:36] <Guest|58> and then just run ghci?
[18:07:43] <Guest|58> or the source command?
[18:08:44] <Guest|58> Uploaded file: https://uploads.kiwiirc.com/files/efabc507c63ccc0b8193f4aaebf0af19/Screenshot%202021-11-02%20at%2017.21.36.png
[18:10:47] <maerwald> well, seems everything is working
[18:10:54] <yushyin> if you start a new shell and type in 'ghci', it should just work now
[18:11:08] <yushyin> s/shell/terminal/
[18:12:59] *** Quits: slack1256 (~slack1256@191.126.99.76) (Remote host closed the connection)
[18:15:37] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[18:15:58] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[18:15:59] *** Joins: y04nn (~y04nn@92.223.89.196)
[18:16:50] <Guest|58> so every time I open terminal I run the source command then ghci
[18:16:52] <Guest|58> ?
[18:18:44] <yushyin> just ghci should be fine
[18:19:39] <Guest|58> just ghci gives command not found
[18:19:49] *** Joins: mei (~mei@user/mei)
[18:20:30] *** Joins: Skyfire (~pyon@user/pyon)
[18:21:00] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[18:21:29] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[18:22:58] <Guest|58> Uploaded file: https://uploads.kiwiirc.com/files/e03144e0edfc469d108e75dc0d2c96c2/Screenshot%202021-11-02%20at%2017.52.23.png
[18:24:09] *** Joins: jtomas (~jtomas@95.red-88-11-64.dynamicip.rima-tde.net)
[18:25:31] <yushyin> Guest|58: Did you run the command the shell asks you to run? To change your default shell? `chsh -s /bin/zsh'
[18:25:42] <Guest|58> yes
[18:26:43] *** Quits: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se) (Remote host closed the connection)
[18:26:59] *** Joins: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se)
[18:27:07] <geekosaur> huh, when did they make that work? I used to have to run some ugly gui thing to edit apple's binary user database
[18:27:19] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[18:27:31] <geekosaur> (ugly = you could tell they didn't put much work into it and it wasn't really intended for end users)
[18:27:41] <yushyin> Guest|58: maybe do try a re-login
[18:28:34] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[18:28:40] *** Quits: Guest|58 (~Guest|58@89.211.234.25) (Quit: Connection closed)
[18:28:53] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[18:30:13] <merijn> geekosaur: It has worked as long as I know?
[18:30:35] *** Joins: Guest|58 (~Guest|58@89.211.234.25)
[18:30:38] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:31:15] <Guest|58> it's all good]
[18:31:27] <yushyin> Guest|58: hello again ;)
[18:31:28] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Remote host closed the connection)
[18:31:35] <Guest|58> thank you guys for your time and effort
[18:31:45] *** Quits: Guest|58 (~Guest|58@89.211.234.25) (Client Quit)
[18:32:03] *** Joins: max22- (~maxime@2a01cb08833598003c892bb6cec267c2.ipv6.abo.wanadoo.fr)
[18:32:04] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[18:32:06] *** Joins: hippoid (~idris@184.105.6.88)
[18:34:08] *** Joins: kadir (~kadir@95.7.9.203)
[18:35:49] *** Quits: thyriaen (~thyriaen@x4dbf0bd8.dyn.telefonica.de) (Quit: Leaving)
[18:35:59] <hippoid> > fmap (+1) (1, 2)
[18:36:01] <lambdabot>  (1,3)
[18:36:39] <hippoid> what's the reason that (+1) is only applied to the last element of the tuple?
[18:36:49] <merijn> :t (1, 2)
[18:36:50] <lambdabot> (Num a, Num b) => (a, b)
[18:36:54] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[18:37:10] <merijn> hippoid: Now, mentally rewrite that to use the tuple as prefix syntax "(,) a b"
[18:37:14] <merijn> :t fmap
[18:37:15] <lambdabot> Functor f => (a -> b) -> f a -> f b
[18:37:17] <boxscape_> hippoid what would you expect to happen to `fmap (+1) ("hello", 3)` if it were applied to both?
[18:37:29] <merijn> hippoid: And ponder: "what is 'f' in case of a tuple?"
[18:37:44] <dminuoso> Its funny eh, we get that question once a week.
[18:37:46] <maerwald> :t bimap
[18:37:47] <lambdabot> Bifunctor p => (a -> b) -> (c -> d) -> p a c -> p b d
[18:38:05] <hippoid> ok follow up question, is there an easy way to see the implementaiton of fmap for a tuple using hoogle or some vim plugin, etc?
[18:38:17] <dminuoso> sadly no
[18:38:19] <merijn> Using hoogle, yes
[18:38:34] <dminuoso> Or rather, I dont think hoogle can search for instances itself.
[18:38:58] <merijn> hippoid: If you go to the Haddocks for Functor (https://hackage.haskell.org/package/base-4.16.0.0/docs/Prelude.html#v:fmap) then you see a list of instances below it
[18:39:14] <merijn> Those instances have a source link behind them
[18:39:48] *** Joins: Sgeo_ (~Sgeo@user/sgeo)
[18:40:07] <hippoid> ok, thanks all!
[18:41:02] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[18:41:09] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[18:42:40] *** Quits: Sgeo (~Sgeo@user/sgeo) (Ping timeout: 268 seconds)
[18:43:48] *** Quits: azeem (~azeem@emp-89-199.eduroam.uu.se) (Read error: Connection reset by peer)
[18:44:32] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[18:45:03] *** Joins: azeem (~azeem@2a00:801:3c9:cf16:6d84:9e6f:3c27:1ca6)
[18:47:22] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[18:50:04] *** Quits: mei (~mei@user/mei) (Ping timeout: 268 seconds)
[18:50:30] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[18:51:18] *** Quits: guniberas (~guniberas@42.191.188.121) (Ping timeout: 268 seconds)
[18:55:00] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 268 seconds)
[18:57:51] *** Joins: pretty_dumm_guy (~trottel@eduroam-134-96-204-83.uni-saarland.de)
[18:58:54] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:01:29] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:08:01] *** Joins: fizzsegfaultbuzz (~segfaultf@135-180-0-138.static.sonic.net)
[19:08:34] *** Quits: acidjnk (~acidjnk@p200300d0c7441145a0f2d1eed66e92ec.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[19:20:03] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[19:20:17] *** Joins: jonathanclarke (~jonathanc@202.51.76.91)
[19:23:39] *** Joins: fendor_ (~fendor@178.165.199.1.wireless.dyn.drei.com)
[19:24:00] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.2)
[19:24:54] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[19:25:23] *** Joins: Null_A (~null_a@2601:645:8700:2290:7887:7a6d:751e:a369)
[19:25:44] *** Joins: Jing (~textual@2604:a840:3::1021)
[19:26:27] *** Quits: fendor (~fendor@77.119.197.65.wireless.dyn.drei.com) (Ping timeout: 268 seconds)
[19:26:51] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:28:30] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:29:19] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:31:39] *** Joins: lbseale (~lbseale@user/ep1ctetus)
[19:31:48] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:c40:37f:b11e:565f) (Quit: WeeChat 2.8)
[19:32:47] *** Quits: boxscape_ (~boxscape_@134.171.69.87) (Ping timeout: 264 seconds)
[19:34:28] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[19:35:04] *** Quits: jumper149 (~jumper149@80.240.31.34) (Quit: WeeChat 3.2)
[19:35:05] *** Quits: jstolarek (~jstolarek@137.220.120.162) (Ping timeout: 268 seconds)
[19:40:18] *** Quits: wonko (~wjc@user/wonko) (Ping timeout: 260 seconds)
[19:43:14] *** Quits: sagax (~sagax_nb@user/sagax) (Remote host closed the connection)
[19:43:56] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Remote host closed the connection)
[19:46:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[19:47:18] *** Quits: shidima (~shidima@84-104-108-90.cable.dynamic.v4.ziggo.nl) (Ping timeout: 260 seconds)
[19:49:01] *** Quits: nckx (~nckx@tobias.gr) (Quit: Updating my Guix System <https://guix.gnu.org>)
[19:49:22] <zincy> Again I hear from an experienced Haskeller that IO is impure in all languages.
[19:49:35] <zincy> Am I going mad?
[19:50:16] <dminuoso> Seeing as Im not a psychologist, I'm not equipped to answer that question.
[19:50:19] <nitrix> The purity refers to how the effects are modeled by the language, as to not break the semantics/guarantees it provides.
[19:50:40] <geekosaur> IO is kinda by definition impure, since it involves interacting with the "world" outside the program itself
[19:51:13] <dminuoso> zincy: I'd first step back and ask what that sentence means exactly. What do they mean by "IO is impure" and what is meant by "impure" exactly, and what does "in *all* languages" refer to?
[19:51:26] <dminuoso> Without more context, I dont think this is a good basis for a discussion
[19:51:30] <geekosaur> Haskell carefully limits how you do this. Most languages just mix it in willy-nilly, which makes it much harder to reason about what they're doingt
[19:51:38] <maerwald> IO is pure
[19:51:47] <dminuoso> Whether something is "pure" or not should start with what we mean by pure.
[19:52:09] <dminuoso> This is too handwavy
[19:52:48] <maerwald> > seq (putStrLn "lol") 1
[19:52:49] <lambdabot>  1
[19:53:03] <dminuoso> Point of interest, if you use this for demonstration, you should use pseq.
[19:54:51] *** Joins: boxscape_ (~boxscape_@i59F67A65.versanet.de)
[19:55:39] <zincy> dminuoso: So there are lots of competing definitions of "pure"?
[19:55:47] <dminuoso> GHC is free to evalutae this in parallel, so it could be conceivable that lambdabot printed 1 before the other "lol" was printed.
[19:55:59] <maerwald> zincy: not really
[19:56:02] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[19:56:07] <dminuoso> zincy: No, its rather that in some handwavy statement "IO is impure in all languageS", Im not even sure what is meant by that.
[19:56:19] *** Joins: nckx (~nckx@tobias.gr)
[19:56:48] <tomsmeding> there are multiple competing definitions of "pure", though; GCC has a function attribute "pure" that allows IO in its body https://gcc.gnu.org/onlinedocs/gcc-4.7.0/gcc/Function-Attributes.html
[19:57:04] <dminuoso> Purity is usually part of the semantics of the language, not of a type (like say IO)
[19:57:14] <maerwald> tomsmeding: *academic* definitions?
[19:57:15] <tomsmeding> oh hm, it may actually not allow IO
[19:57:22] <dminuoso> So Im not even sure what "IO being pure/impure" even means
[19:57:31] <tomsmeding> maerwald: there are multiple academic definitions of almost everything
[19:57:45] <maerwald> I only know of one formal definition of purity
[19:57:47] <dminuoso> It's the language that can be pure/impure. Or possibly expressions
[19:57:49] <maerwald> can you provide a link to some?
[19:58:39] *** Joins: neightchan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[19:58:55] <tomsmeding> maerwald: cannot provide a link, but I'm fairly sure there are definitions that allow nontermination and definitions that do, in a pure function
[19:59:01] *** Quits: natechan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Read error: No route to host)
[19:59:03] <dminuoso> zincy: At best I can interpret that remark as taking note, that while evaluating expressions can be pure in the sense that the outside world is not touched, executing IO actions can trivially interact with the world.
[19:59:16] <nitrix> I/O translates to effects (if the language is pure) and side-effects (if the language isn't pure).
[19:59:18] *** Joins: sagax (~sagax_nb@user/sagax)
[19:59:23] <zincy> dminuoso: Right so it's an ill formed statement
[19:59:35] <dminuoso> Id say so, yes
[19:59:35] *** Joins: jkaye (~jkaye@BELVEDERE-T.ear2.Denver1.Level3.net)
[20:00:54] <dminuoso> Heck, even the term IO is sort of gibberish in an all encompassing generalization
[20:01:24] <dminuoso> Haskell IO is more than just about outside world interaction, think about forkIO
[20:01:27] <zincy> Yeah I think that is why I felt icky
[20:01:52] <maerwald> I simply look at "IO" in the sense that it can do syscalls
[20:02:08] <maerwald> I have no understanding of worlds
[20:02:36] <dminuoso> maerwald: So any runtime execution that allocates memory via syscalls automatically triggers IO?
[20:02:57] <maerwald> I don't understand your question
[20:03:17] <dminuoso> Nevermind
[20:03:40] <geekosaur> I grant that I did not define that term. but a program has what it does inside itself (internal state ‚Äî a "world") and how it interacts outside itself via syscalls and the like (external state ‚Äî a "world")
[20:04:26] <maerwald> how do you separate the filesystem into internal and external state
[20:04:45] <geekosaur> also in a language like Haskell there is very little direct allocation of memory by a program (only done as part of FFI); mostly it's done behind the scenes by the runtime. as is any actual I/O
[20:05:18] <nitrix> I would say forkIO has implications with the semantics (control flow, concurrency), that's a little immediate than "a world".
[20:05:27] <geekosaur> the filesystem is external state. manipulation of filesystem objects is *driven by* internal state, but the actual manipulation itself is external
[20:05:51] <maerwald> I can't fathom that distinction
[20:06:04] <geekosaur> and yes, forkIO confuses things a bit, because now you have separate internal "worlds" which have to interact with each other as if each was external to the other
[20:06:22] <maerwald> I think of programs in terms of control flow, not worlds
[20:06:47] <maerwald> everything that clouds the control flow is bad: forkIO, objects, filesystem state
[20:06:48] <geekosaur> hm, but "control flow" is somewhat ill-defined in a language like Haskell
[20:06:56] <maerwald> not really
[20:07:06] <nitrix> I view evaluation and control flow independently.
[20:07:21] <nitrix> control flow = execution in my verbiage.
[20:07:22] <dminuoso> nitrix: I dont think works reasonable, given how we tend to encode control flow.
[20:07:26] <maerwald> even laziness clouds control flow
[20:07:41] <maerwald> so I'm not a big fan of that either
[20:08:04] <nitrix> As in the execution is controllable and drives evaluation.
[20:08:04] <geekosaur> that was part of what I meant by "somewhat ill-defined". the rest was how you tend to specify what you want as opposed to how to do it
[20:08:07] <dminuoso> 17:31:52      maerwald | I simply look at "IO" in the sense that it can do syscalls
[20:08:15] <dminuoso> Perhaps this definition is simple and good.
[20:08:19] <maerwald> IO helps me reason about control flow... in some way. But effects? No idea.
[20:08:43] <dminuoso> Because at the end, this capturs nicely what we usually mean by "cant delete a file, call an API or write to a database"
[20:08:45] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[20:08:47] <maerwald> When I look at my mtl code, I usually can't reason about effects. They're all over the places.
[20:09:20] <maerwald> What I can reason about is: this code doesn't do filesystem syscalls.
[20:09:28] <maerwald> But I can't reasonably express this in haskell.
[20:09:43] <maerwald> I have to run a seccomp based syscall filter to verify any of that.
[20:09:45] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[20:10:26] <maerwald> have you ever checked how many files `tar` opens when it extracts an archive?
[20:10:37] <maerwald> I mean all sorts of stuff in /etc and whatnot
[20:10:59] <maerwald> curl is even worse
[20:11:13] <dminuoso> I recall work on programming languages with effect systems that talk about filtering syscalls exactly like that
[20:11:45] <dminuoso> Such that you would have useful extractable semantics, where if you had EffXYZ you could make some useful statement about what your program can or cant do.
[20:11:57] <dminuoso> Mmm, I have to dig this up again
[20:12:12] <maerwald> that would be useful
[20:12:32] <dminuoso> Ill reach out to my buddy tomorrow, pretty sure he showed me a paper on this subject
[20:12:36] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:13:34] <maerwald> I've been playing with sydbox, which is a program that allows to filter syscalls and used in some linux package managers. But it has bugs last I tried, because it isn't widely used
[20:14:28] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[20:14:43] <nitrix> I'm personally not fond of trying to encode everything with types. The static safety is great, but it's blows up so quickly in terms of complexity.
[20:14:58] <maerwald> sure, you can have multiptle orthogonal type systems
[20:15:16] <dminuoso> If memory serves right, in that particular example it was a secondary type system
[20:15:19] <maerwald> you don't need to encode everything into one, that's usually a consequence of compiler maintenance
[20:15:51] <maerwald> imagine GHC would come up with a secondary type system... I can't imagine how much work that would be to get an initial working version
[20:15:58] <maerwald> 3 PhDs and 5 years of work
[20:17:01] *** Quits: yrlnry (~mjd@pool-100-11-2-80.phlapa.fios.verizon.net) (Ping timeout: 268 seconds)
[20:17:40] <maerwald> but... I think having a configurable syscall filter in the RTS... might not be that hard maybe
[20:19:40] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:20:02] *** Quits: pretty_dumm_guy (~trottel@eduroam-134-96-204-83.uni-saarland.de) (Quit: WeeChat 3.3)
[20:20:06] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Ping timeout: 268 seconds)
[20:22:33] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[20:24:25] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[20:25:42] *** Joins: Guest26 (~Guest26@cpc78119-cwma10-2-0-cust127.7-3.cable.virginm.net)
[20:26:14] *** Joins: fef (~thedawn@user/thedawn)
[20:28:17] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[20:29:10] <dminuoso> Mmm, I want to stop using ToJSON instances with servant, it's just darn frustrating to have to create newtype wrappers just to feed some JSON representation in.
[20:29:39] <dminuoso> Im thinking of making some shallow existential `data Jsonable = forall a. ToJSON a => Jsonable a`, and then write my servant APIs to simply return Jsonable
[20:29:47] <dminuoso> Is this reasonable? Is there another way?
[20:33:03] *** Quits: rkrishnan (~user@223.226.59.167) (Ping timeout: 268 seconds)
[20:33:59] *** Quits: ubert (~Thunderbi@ip5b405828.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[20:34:38] *** Joins: econo (uid147250@user/econo)
[20:38:30] *** Quits: Guest26 (~Guest26@cpc78119-cwma10-2-0-cust127.7-3.cable.virginm.net) (Quit: Client closed)
[20:39:23] *** Joins: boxscape_92 (~boxscape_@i59F67A65.versanet.de)
[20:39:23] *** boxscape_92 is now known as boxscape__
[20:39:32] *** Parts: kadir (~kadir@95.7.9.203) ()
[20:41:42] *** Quits: boxscape_ (~boxscape_@i59F67A65.versanet.de) (Ping timeout: 268 seconds)
[20:43:14] *** Joins: Guest92 (~Guest92@2603-7000-3b42-5400-c881-7958-2102-07bc.res6.spectrum.com)
[20:43:59] *** Quits: Guest92 (~Guest92@2603-7000-3b42-5400-c881-7958-2102-07bc.res6.spectrum.com) (Client Quit)
[20:46:24] *** Quits: Jing (~textual@2604:a840:3::1021) (Remote host closed the connection)
[20:47:26] *** Joins: v01d4lph4 (~v01d4lph4@106.215.93.204)
[20:47:26] *** Quits: v01d4lph4 (~v01d4lph4@106.215.93.204) (Changing host)
[20:47:26] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[20:47:49] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[20:50:08] *** Joins: Jing (~textual@2604:a840:3::1021)
[20:51:23] *** Quits: zincy (~tom@2a00:23c8:970c:4801:d180:6949:f6bd:3923) (Ping timeout: 264 seconds)
[20:52:39] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[20:54:39] *** Joins: chomwitt (~chomwitt@2a02:587:dc02:9f00:12c3:7bff:fe6d:d374)
[20:54:47] *** Joins: kadir (~kadir@95.7.9.203)
[20:55:20] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[20:57:06] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:57:58] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[21:00:38] *** Joins: dsamperi (~dsamperi@2603-7000-3b42-5400-c881-7958-2102-07bc.res6.spectrum.com)
[21:04:37] <dsamperi> #cplusplus
[21:08:03] <geekosaur> not interested, sorry
[21:08:06] *** Joins: Inst (~Inst@2601:6c4:4080:3f80:d8ab:2e91:63f7:db6e)
[21:10:26] *** Joins: tcard_ (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp)
[21:10:41] *** Quits: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp) (Remote host closed the connection)
[21:13:02] <dsamperi> First time user. I see no activity. Normal?
[21:13:06] <Inst> does anyone
[21:13:09] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Ping timeout: 268 seconds)
[21:13:15] <Inst> know anything about how the Reflex-FRP project is coming along?
[21:13:37] <geekosaur> dsamperi, it's active at various times
[21:13:45] <geekosaur> usually not continuous though
[21:13:46] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Ping timeout: 268 seconds)
[21:14:20] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Read error: Connection reset by peer)
[21:14:26] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[21:14:44] <geekosaur> Inst, this may be a better question for the haskell-cafe mailing list or the haskell Discourse
[21:14:50] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Remote host closed the connection)
[21:15:06] <Inst> Discourse?
[21:15:28] <geekosaur> discourse.haskell.org
[21:15:31] <Inst> reflex-frp is a thing, but much smaller
[21:15:49] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[21:16:16] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[21:17:05] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[21:22:23] *** Joins: Null_A_ (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[21:24:50] *** Quits: Null_A (~null_a@2601:645:8700:2290:7887:7a6d:751e:a369) (Ping timeout: 260 seconds)
[21:25:56] *** Parts: kadir (~kadir@95.7.9.203) ()
[21:26:59] <dminuoso> dsamperi: Usually activity is very spiky. There's phases without much activity, other times you find multiple concurrent lengthy involving discussions
[21:27:46] <dsamperi> Thanks for the information
[21:28:00] *** Joins: neurocyte0132889 (~neurocyte@IP-213157011136.dynamic.medianet-world.de)
[21:28:00] *** Quits: neurocyte0132889 (~neurocyte@IP-213157011136.dynamic.medianet-world.de) (Changing host)
[21:28:00] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[21:28:11] *** Parts: Partmedia (~kevinz@172-221-159-029.res.spectrum.com) ()
[21:31:23] *** Joins: Null_A (~null_a@2601:645:8700:2290:91de:cb47:8eef:9a3e)
[21:31:54] *** Quits: Null_A_ (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 260 seconds)
[21:32:53] *** Joins: vicfred (~vicfred@user/vicfred)
[21:33:17] *** Quits: mbuf (~Shakthi@171.61.170.115) (Quit: Leaving)
[21:33:58] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[21:34:02] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[21:34:25] <geekosaur> dsamperi, for what it's worth: https://ircbrowse.tomsmeding.com/lchaskell
[21:34:58] <geekosaur> (oy, I'm one of the blabbiest in channel according to that)
[21:36:51] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[21:37:04] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[21:37:37] * dminuoso pokes tomsmeding
[21:37:46] <dminuoso> Is that GDPR compliant?
[21:38:21] <dminuoso> Im willing to bet that IRC handles publically linkable to my name can be considered personal identifiable information.
[21:38:28] <[exa]> dminuoso: can you backtrace merijn's birth date by the profiles here? https://ircbrowse.tomsmeding.com/nick/merijn
[21:39:03] <[exa]> wait you wrote your real name into IRC?
[21:39:14] <dminuoso> No, but it takes no effort to figure out my real name.
[21:39:38] <geekosaur> you can get mine relatively easily as well although you'll have to poke a little bit
[21:40:46] <[exa]> GDPR core rule is "enables finding additional information about a somehow-identifiable individual"
[21:41:10] <[exa]> but anyone can idle on IRC and log and analyze everything so I guess the "additional" doesn't really apply here
[21:41:32] <dminuoso> Just because you can log, does not mean you have the right to do so.
[21:41:36] <boxscape__> geekosaur you more or less have it set in the IRC "real name" field (not sure if that's proper terminology)
[21:41:37] <dminuoso> That's the core of GDPR.
[21:41:39] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:41:53] *** boxscape__ is now known as boxscape_
[21:41:59] <geekosaur> probably do, at that
[21:42:14] <dminuoso> In fact, article one says
[21:42:22] <dminuoso> "This Regulation lays down rules relating to the protection of natural persons with regard to the processing of personal data and rules relating to the free movement of personal data."
[21:42:32] <dminuoso> I'd say processing what I say is about processing personal data as it can get.
[21:42:41] <geekosaur> but even without that you can get it from other places, pretty sure it's one click to link "geekosaur" with (for example) my public FCC database entry that includes full name and address
[21:43:06] <dminuoso> So yeah. Im beginning to suspect operating a website like https://ircbrowse.tomsmeding.com/lchaskell is not GDPR conform.
[21:43:25] *** Joins: yangby (~secret@125.120.162.167)
[21:43:31] <[exa]> dminuoso: I'll actually ask our GDPR law folks
[21:43:50] <shapr> ooh
[21:44:06] <dminuoso> [exa]: GDPR is so easily written, really if you read the definition of personal data:
[21:44:08] <dminuoso> ‚Äòpersonal data‚Äô means any information relating to an identified or identifiable natural person (‚Äòdata subject‚Äô); an identifiable natural person is one who can be identified, directly or indirectly, in particular by reference to an identifier such as a name, an identification number, location data, an online identifier or to one or more factors specific to the physical, physiological,
[21:44:10] <dminuoso> genetic, mental, economic, cultural or social identity of that natural person;
[21:44:15] <dminuoso> This applies.
[21:44:16] *** Quits: darkstardevx (~darkstard@2601:1c2:300:c8a0::6c32) (Ping timeout: 245 seconds)
[21:44:54] <dminuoso> In fact, it even explicitly mentions information relating an idenifiable person, for which an online identifier is sufficient.
[21:45:22] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[21:45:25] <[exa]> dminuoso: well technically I remember yourself identifying here several times already, same did I
[21:45:34] <[exa]> (let's jump to -offtopic? )
[21:45:38] <dminuoso> Sure
[21:45:47] <geekosaur> sad. like anyone can get this trivially just from e.g. client backscroll
[21:45:49] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 268 seconds)
[21:46:16] *** Joins: kadir (~kadir@95.7.9.203)
[21:47:03] *** Quits: yangby (~secret@125.120.162.167) (Client Quit)
[21:52:31] *** Parts: kadir (~kadir@95.7.9.203) ()
[21:53:11] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Ping timeout: 264 seconds)
[21:55:00] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[21:56:40] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[21:57:33] *** Quits: chomwitt (~chomwitt@2a02:587:dc02:9f00:12c3:7bff:fe6d:d374) (Ping timeout: 268 seconds)
[21:57:35] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[22:00:37] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[22:02:25] *** Joins: __monty__ (~toonn@user/toonn)
[22:03:01] *** Joins: chomwitt (~chomwitt@2a02:587:dc02:9f00:12c3:7bff:fe6d:d374)
[22:03:20] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[22:05:12] *** Joins: darkstardevx (~darkstard@50.39.114.152)
[22:05:27] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:06:06] *** Joins: neurocyte0132889 (~neurocyte@IP-213157011136.dynamic.medianet-world.de)
[22:06:07] *** Quits: neurocyte0132889 (~neurocyte@IP-213157011136.dynamic.medianet-world.de) (Changing host)
[22:06:07] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[22:06:48] *** Quits: mmhat (~mmh@55d4b212.access.ecotel.net) (Ping timeout: 268 seconds)
[22:07:32] *** Joins: tremon (~tremon@217-63-61-89.cable.dynamic.v4.ziggo.nl)
[22:08:16] *** Joins: mei (~mei@user/mei)
[22:08:25] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:08:45] *** Quits: Null_A (~null_a@2601:645:8700:2290:91de:cb47:8eef:9a3e) (Remote host closed the connection)
[22:09:15] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 268 seconds)
[22:09:39] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[22:09:40] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[22:10:06] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[22:13:19] *** Joins: jstolarek (~jstolarek@137.220.120.162)
[22:13:23] *** Quits: fvr (uid503686@id-503686.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[22:16:00] *** Joins: Null_A (~null_a@2601:645:8700:2290:91de:cb47:8eef:9a3e)
[22:16:18] *** Quits: y04nn (~y04nn@92.223.89.196) (Remote host closed the connection)
[22:16:41] *** Joins: zincy (~tom@2a00:23c8:970c:4801:b46f:f559:1389:e031)
[22:18:12] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Remote host closed the connection)
[22:18:30] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[22:19:06] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[22:19:49] *** Joins: mmhat (~mmh@55d4a263.access.ecotel.net)
[22:22:08] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:22:30] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Read error: Connection reset by peer)
[22:23:06] <janus> maerwald: when you say you can't reason about effects, is it because you have a fixed monad stack instead of accepting n^2 and having type class constraints all over the place?
[22:23:42] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[22:23:44] <janus> because it seems to me that if people use constraints everywhere instead of specifying the actual monad, then you _can_ reason about which effects are used where?
[22:23:55] <maerwald> I use constraints
[22:24:03] <maerwald> and it makes reasoning impossible
[22:24:10] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[22:24:17] <maerwald> all it tells you is which functions may appear in the body (or not)
[22:24:46] <cigsender> /3/3
[22:24:49] <dsal> The people defining standards on a project I'm working on are very  opposed to "constraint-based DI" kinds of things.
[22:25:20] <maerwald> I dislike thick monad types like `App` a lot, but I don't think mtl is better
[22:25:52] <dsal> Everything should run in the `Handler` monad or whatever.  Except for the things that I've defined in the `Transaction` monad which I guess doesn't get to log because all the logging functions are defined to only work in `Handler` which is how they get their logger function because doing that with a constraint is bad or something.
[22:26:01] <maerwald> I'm not even sure a proper effects system would be better, it just shifts the problem away to where you defined your interpreters
[22:26:10] <maerwald> now everything is so abstract, you don't know anything
[22:26:27] *** Joins: hseg (~gesh@185.120.126.13)
[22:26:29] <dsal> I've failed to try fancier effects systems a few times.
[22:27:47] *** Joins: pavonia (~user@user/siracusa)
[22:28:02] <hseg> working on adding an equivalent of `partition` to Witherable, just noticed that part :: f (Either a b) -> (f a, f b) only fuses a single pass, and in particular doesn't compose to partition arbitrarily many-way partitions in a single pass
[22:28:03] *** Quits: dsrt^ (~dsrt@wsip-98-188-242-6.mc.at.cox.net) (Remote host closed the connection)
[22:28:07] <dsal> The guy who doesn't like the constraint thing is having a hard time selling me on the concerns.  It's something about how constraints can lie because if a function says it wants `:: Eq a => a -> Whatever` then it lies because I can use a `Double` and maybe something weird will happen.
[22:28:23] <hseg> or have I missed something?
[22:28:40] <dsal> Or more concretely, if I make a `HasLogger` it could do something wrong and suddenly we have bugs because the logger doesn't behave properly or whatever.
[22:28:43] <maerwald> dsal: well, they lie because they don't tell you anything about the order of effects
[22:29:03] <geekosaur> dsal, that kinda sounds like a complaint from 18ish hours ago that Maybe a is a lie because you could set a ~ Void
[22:29:17] <dsal> maerwald: I've not heard that particular argument.
[22:29:26] <geekosaur> I have
[22:29:27] <maerwald> well, it's trivially true
[22:29:44] <dsal> Sure, I'm just saying it's not come up.
[22:29:53] <maerwald> on the other hand, it's also an advantage of some sorts
[22:31:08] <dsal> Guy seems to really not like generic stuff in general.  I was told not to use `fold` when `concat` will work because code could change in a way that compiles and doesn't work correctly.  But also, testing is super important, so between writing lots of tests for behavior and not doing stupid things, I don't think the concerns are practical.
[22:31:11] <Boarders> do any of you know how to configure hlint to ignore a hint within a folder (as opposed to module)?
[22:31:41] <maerwald> dsal: well, that argument is true, especially for lens
[22:31:42] <geekosaur> doesn't hlint have a config file?
[22:31:46] <awpr> hseg: I've thought about a similar problem monomorphized to lists, and came up with: `[Sigma (Rep10 f) Identity] -> f []` where `f :: (k -> Type) -> Type`, `Rep10` is some GADT identifying typed fields of `f`, and `Sigma` is `data Sigma k m = forall a. Sigma (k a) (m a)`
[22:32:41] <hseg> yeah, noted something similar on the Witherable issue tracker in offering directions to extend my patch https://github.com/fumieval/witherable/issues/45#issuecomment-958062035
[22:33:05] <maerwald> dsal: lens has caused a serious production bug for me that way, because documentation doesn't propagate and behavior isn't described everywhere.
[22:33:19] <dsal> maerwald: It's not entirely false, but it conflicts with the testing concerns, IMO.
[22:33:24] <Boarders> geekosaur: I am asking what I put in the config file
[22:33:33] <Boarders> to exclude a folder
[22:33:37] <Boarders> so yes, it does have a config file
[22:34:31] <awpr> see also Data.Functor.Naperian, which kind of generalizes unzip the same way this generalizes partitionEithers
[22:34:37] <maerwald> on the other hand, I use fmap a lot
[22:35:00] <maerwald> coworkers would easily see which code was written by me by the amount of fmaps
[22:35:21] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:35:32] <maerwald> nested fmaps, (fmap . fmap), fmap over <$>... fmap all the way
[22:35:53] <hseg> awpr: https://hackage.haskell.org/package/naperian-0.1.0.0/docs/Data-Naperian.html ?
[22:36:24] *** Quits: max22- (~maxime@2a01cb08833598003c892bb6cec267c2.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[22:36:34] <awpr> ah yeah, that one
[22:37:05] <awpr> https://hackage.haskell.org/package/ten-0.1.0.2/docs/Data-Ten-Representable.html is where Representable10 came from, by the way
[22:37:06] <hseg> awpr: note it is the type a ^ r, not pi_{i in r} a(i)
[22:38:10] <hseg> in particular, writing dependently, want some dist :: f (sum_{i in r} a(i)) -> pi_{i in r} f (a(i))
[22:39:51] <awpr> yeah, that's roughly what I wrote before but with `f ~ []` and using isomorphism of `(forall a. Rep10 f a -> m a) ~= f m`
[22:40:07] <awpr> just saying Naperian is the Product->Product analog of this
[22:40:11] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:40:24] <hseg> K
[22:40:58] <awpr> the motivation being: there's precedent for doing that sort of generalization
[22:43:45] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[22:44:27] *** Joins: neurocyte0132889 (~neurocyte@IP-213157011136.dynamic.medianet-world.de)
[22:44:27] *** Quits: neurocyte0132889 (~neurocyte@IP-213157011136.dynamic.medianet-world.de) (Changing host)
[22:44:27] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[22:44:54] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[22:47:21] *** Joins: mrckndt9 (~mrckndt@user/mrckndt)
[22:49:03] *** Joins: desantra (~skykanin@user/skykanin)
[22:49:35] *** Quits: mrckndt (~mrckndt@user/mrckndt) (Ping timeout: 264 seconds)
[22:49:35] *** mrckndt9 is now known as mrckndt
[22:49:43] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Remote host closed the connection)
[22:51:21] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[22:51:26] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Remote host closed the connection)
[22:54:26] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[22:56:13] *** Quits: desantra (~skykanin@user/skykanin) (Quit: WeeChat 3.3)
[22:57:05] *** Joins: nehsou^ (~nehsou@wsip-98-188-242-6.mc.at.cox.net)
[22:57:23] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[22:58:26] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[22:58:45] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[22:59:49] *** Quits: mei (~mei@user/mei) (Ping timeout: 268 seconds)
[23:03:52] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[23:04:36] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:05:44] *** Joins: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com)
[23:07:13] <energizer> is there a name for functions that are like "fold then map", such as subtracting the mean of xs from each x in xs ?
[23:07:42] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:09:04] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 268 seconds)
[23:10:25] <shapr> energizer: do you mean like catamorphism? or perhaps map reduce? https://en.wikipedia.org/wiki/MapReduce
[23:10:56] <boxscape_> that's the opposite, right? Map reduce means you map first, then fold
[23:11:02] <energizer> ^
[23:11:38] <shapr> oh good point
[23:11:51] <tomsmeding> the fact that that requires two traversals of the list makes it, intuitively to me, less of a "standard primitive"
[23:11:57] <tomsmeding> so less likely to have a particular name
[23:14:37] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Ping timeout: 268 seconds)
[23:17:21] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Remote host closed the connection)
[23:17:52] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[23:17:54] *** Joins: max22- (~maxime@2a01cb08833598001e044e1e5445c714.ipv6.abo.wanadoo.fr)
[23:19:38] <[exa]> energizer: you might wrap Reader a bit to do that
[23:20:12] <[exa]> > ( foldl (+) 0 >>= flip fmap length . div >>=  map . flip (-) ) [0,1,2,3,4]
[23:20:14] <lambdabot>  [-2,-1,0,1,2]
[23:20:23] *** Joins: son0p- (~ff@181.136.122.143)
[23:20:53] <boxscape_> kind of seems like you should be able to get away with one traversal with some laziness/mutation stuff
[23:22:22] <tomsmeding> you aren't going to be able to stream the list :p
[23:22:26] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Ping timeout: 260 seconds)
[23:22:33] <tomsmeding> that counts as >1 traversal to my operational ears
[23:22:50] <boxscape_> hmm
[23:24:02] <tomsmeding> (and streaming the list but remembering all elements doesn't count :p )
[23:24:12] <boxscape_> makes sense
[23:24:51] <boxscape_> I'm just imagine something where you add subtract mean as a thunk from each value while traversing, but at the same time mutate the thunk to add the values you are traversing (so you're not storing all values, only the sum)
[23:25:02] <boxscape_> s/add//
[23:25:22] <tomsmeding> isn't that precisely the case I said didn't count
[23:25:28] <tomsmeding> except you're now storing it in a chain of thunks
[23:25:49] <boxscape_> hmm I suppose
[23:28:48] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.3)
[23:29:20] *** Joins: neurocyte0132889 (~neurocyte@IP-213157011136.dynamic.medianet-world.de)
[23:29:20] *** Quits: neurocyte0132889 (~neurocyte@IP-213157011136.dynamic.medianet-world.de) (Changing host)
[23:29:20] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[23:31:35] *** Quits: chomwitt (~chomwitt@2a02:587:dc02:9f00:12c3:7bff:fe6d:d374) (Ping timeout: 264 seconds)
[23:31:54] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:32:37] <boxscape_> can you load a .hs file with cabal repl?
[23:32:53] <boxscape_> when I try it it doesn't seem to import the names
[23:33:26] <monochrom> Perhaps get cabal repl started normally first, then use :load
[23:33:48] <boxscape_> right, that's what I did - if I try to pass it as argument, it fails before that, saying it doesn't take arguments
[23:34:01] <geekosaur> ^ my guess is it loads the compiled form which will only get exported symbols
[23:34:11] <monochrom> If you have multiple components, you may have to say explicity "cabal repl <the component you mean>"
[23:34:28] <geekosaur> but :load should work since cabal repl can't reach inside ghci and change how :load works
[23:34:28] <tomsmeding> boxscape_: works if you give the thing a module name
[23:34:31] <tomsmeding> iirc
[23:34:38] <boxscape_> yes you guys are right, module name works
[23:34:39] <tomsmeding> it's completely weird
[23:34:41] <geekosaur> mm, might need to force source
[23:34:51] <geekosaur> :load *moduleName
[23:35:08] <geekosaur> (the * forces source instead of precompiled)
[23:35:08] <tomsmeding> yeah but if you don't give the file a module header, there is no module name that works there
[23:35:10] <tomsmeding> not even Main
[23:35:32] <boxscape_> yeah it's strange that Main doesn't work
[23:35:36] *** Quits: juhp (~juhp@128.106.188.220) (Ping timeout: 268 seconds)
[23:35:37] <geekosaur> should be the file name in that case
[23:35:50] <geekosaur> *foo.hs
[23:35:52] <monochrom> The thing is I have been doing this my whole life with 100% success rate and no special treatment.
[23:36:23] <boxscape_> geekosaur the asterisk doesn't seem to change things if I don't add a module name
[23:36:47] <tomsmeding> I have a file A.hs containing 'foo = 42'. I have opened a repl with 'cabal repl' outside of a project. How do I load that file so that 'foo' is visible?
[23:36:47] *** Joins: juhp (~juhp@128.106.188.220)
[23:36:50] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:37:04] <tomsmeding> in my experience you can't, until you write 'module Something where' above that file
[23:43:12] *** Quits: Cajun (~Cajun@user/cajun) (Quit: Client closed)
[23:45:29] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[23:46:04] *** Quits: jstolarek (~jstolarek@137.220.120.162) (Ping timeout: 268 seconds)
[23:46:42] *** Quits: alx741 (~alx741@181.196.69.253) (Ping timeout: 268 seconds)
[23:46:50] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[23:48:11] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[23:48:27] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[23:50:02] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:8d15:54ac:ed5f:296c)
[23:51:45] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[23:55:14] *** Joins: jess (~jess@libera/staff/jess)
[23:56:06] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Ping timeout: 260 seconds)
[23:59:12] *** Joins: alx741 (~alx741@186.178.109.189)
