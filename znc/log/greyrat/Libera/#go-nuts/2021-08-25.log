[00:08:27] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 240 seconds)
[00:09:19] *** Joins: khrbt (~znc@user/khrbt)
[00:10:26] *** Quits: Xizor (~Xizor@151.ip-51-68-121.eu) (Quit: ZNC 1.7.5 - https://znc.in)
[00:11:38] *** Joins: Xizor (~Xizor@151.ip-51-68-121.eu)
[00:13:41] *** Joins: kyych (~kyych@30.ip-217-182-64.eu)
[00:16:58] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[00:21:48] *** Joins: enkeyz (~enkeyz@user/enkeyz)
[00:25:00] *** Joins: jpw (~jpw@user/jpw)
[00:27:09] *** Quits: maroloccio (~marolocci@37.100.40.252) (Quit: WeeChat 3.0)
[00:29:07] *** Quits: revolve (~u0_a227@82-132-246-92.dab.02.net) (Ping timeout: 240 seconds)
[00:31:00] *** Joins: revolve (~u0_a227@82-132-246-85.dab.02.net)
[00:34:39] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1006) (Quit: ZNC 1.8.2 - https://znc.in)
[00:42:14] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[00:52:51] *** Parts: kori1 (~kori@li490-89.members.linode.com) ()
[00:55:55] *** Quits: Lutin (~Lutin@user/lutin) (Quit: Lutin)
[00:58:31] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 250 seconds)
[00:58:49] *** Joins: Lutin (~Lutin@user/lutin)
[01:08:18] *** Quits: independent56 (~independe@95.148.175.234) (Remote host closed the connection)
[01:08:36] *** Joins: independent56 (~independe@95.148.175.234)
[01:09:48] *** Quits: independent56 (~independe@95.148.175.234) (Remote host closed the connection)
[01:10:06] *** Joins: independent56 (~independe@95.148.175.234)
[01:16:23] *** Bitflux is now known as Byteflux
[01:17:35] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 250 seconds)
[01:18:31] *** Quits: aman (~aman@user/aman) (Quit: aman)
[01:18:31] *** Quits: aead (~aead@user/aead) (Quit: aead)
[01:19:14] *** Joins: aead (~aead@user/aead)
[01:19:38] *** Joins: mrig (~mrig@user/mrig)
[01:24:31] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 250 seconds)
[01:24:58] *** Quits: Shrike (sid305680@id-305680.brockwell.irccloud.com) ()
[01:25:14] *** Joins: Shrike (sid305680@id-305680.helmsley.irccloud.com)
[01:26:39] *** Quits: aead (~aead@user/aead) (Quit: aead)
[01:26:55] *** Joins: aead (~aead@user/aead)
[01:27:12] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[01:27:37] *** Quits: aead (~aead@user/aead) (Client Quit)
[01:28:02] *** Quits: be3uykpy (~be3uykpy@2a00:a040:19a:b060:b9b6:a40e:efe:d60) (Quit: Leaving)
[01:29:11] *** Joins: aead (~aead@user/aead)
[01:29:37] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[01:32:04] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 252 seconds)
[01:33:10] *** Quits: enkeyz (~enkeyz@user/enkeyz) (Ping timeout: 252 seconds)
[01:33:43] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 252 seconds)
[01:33:47] *** Joins: PinealGlandOptic (~PinealGla@178-133-189-55.mobile.vf-ua.net)
[01:38:36] *** Joins: enkeyz (~enkeyz@user/enkeyz)
[01:40:07] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 250 seconds)
[01:40:22] *** Joins: mrig_ (~mrig@user/mrig)
[01:40:57] *** Quits: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de) (Ping timeout: 248 seconds)
[01:41:05] *** mrig_ is now known as mrig
[01:41:20] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:41:48] *** Quits: aead (~aead@user/aead) (Quit: aead)
[01:42:50] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[01:42:51] *** Quits: GJdan (~quassel@107-190-25-75.cpe.teksavvy.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[01:44:10] *** Quits: enkeyz (~enkeyz@user/enkeyz) (Ping timeout: 252 seconds)
[01:44:44] *** Joins: GJdan (~quassel@107-190-25-75.cpe.teksavvy.com)
[01:45:50] *** Joins: enkeyz (~enkeyz@user/enkeyz)
[01:46:27] *** Joins: lord4163 (~lord4163@90-230-194-205-no86.tbcn.telia.com)
[01:48:57] *** Quits: Natch (~natch@c-e070e255.014-297-73746f25.bbcust.telenor.se) (Ping timeout: 248 seconds)
[01:51:49] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[01:53:55] *** Joins: fikran (~fikran@user/fikran)
[02:00:40] *** Quits: jespada (~jespada@90.254.245.194) (Ping timeout: 252 seconds)
[02:00:47] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:01:44] *** Quits: src (~src@user/src) (Quit: Leaving)
[02:03:13] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:a4b1:e74b:d226:1434) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:03:31] *** Joins: jespada (~jespada@90.254.245.194)
[02:05:43] *** Joins: jawn-smith (~william@cpe-70-119-160-53.tx.res.rr.com)
[02:07:08] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[02:12:45] *** Joins: kulak (~kulak@user/kulak)
[02:13:14] *** Joins: karstensrage (~karstensr@user/karstensrage)
[02:13:57] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[02:14:25] *** Quits: enkeyz (~enkeyz@user/enkeyz) (Ping timeout: 252 seconds)
[02:14:27] *** Quits: yelnah (~felix@193-119-126-117.tpgi.com.au) (Ping timeout: 240 seconds)
[02:14:51] *** Joins: yelnah (~felix@2001:44b8:3082:ad:6f0:21ff:fe3c:d4d7)
[02:15:14] *** Quits: egy (egy@tilde.team) (Quit: ZNC 1.8.1 - https://znc.in)
[02:16:02] *** Joins: enkeyz (~enkeyz@user/enkeyz)
[02:19:33] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 250 seconds)
[02:20:05] *** Joins: noarb (~noarb@user/noarb)
[02:21:59] *** Joins: egy (egy@tilde.team)
[02:25:54] *** Quits: c10l (~c10l@89.34.167.207) (Quit: The Lounge - https://thelounge.chat)
[02:28:15] *** Quits: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:37:04] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[02:40:16] *** Joins: Guest56 (~Guest56@2a00:1370:810c:43d3:7837:68b0:c9e4:7f89)
[02:48:04] *** Quits: Guest56 (~Guest56@2a00:1370:810c:43d3:7837:68b0:c9e4:7f89) (Ping timeout: 246 seconds)
[03:01:14] *** Joins: kodah (~kodah@user/kodah)
[03:03:47] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[03:04:08] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.2)
[03:10:30] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[03:11:26] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 250 seconds)
[03:17:32] *** Joins: codebam (~codebam@user/codebam)
[03:24:59] *** Quits: revolve (~u0_a227@82-132-246-85.dab.02.net) (Ping timeout: 250 seconds)
[03:31:56] *** Joins: almos (~almos@catv-89-133-107-93.catv.broadband.hu)
[03:32:17] *** Quits: jsrnop1 (~mark@user/jsrnop) (Quit: The Lounge - https://thelounge.chat)
[03:32:40] *** Joins: jsrnop1 (~mark@user/jsrnop)
[03:35:06] *** Quits: jawn-smith (~william@cpe-70-119-160-53.tx.res.rr.com) (Remote host closed the connection)
[03:39:07] *** Quits: alrs (alrs@tilde.team) (Ping timeout: 252 seconds)
[03:39:07] *** Quits: egy (egy@tilde.team) (Ping timeout: 240 seconds)
[03:41:09] *** Joins: Natch (~natch@c-e070e255.014-297-73746f25.bbcust.telenor.se)
[03:42:33] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[03:42:52] *** Joins: revolve (~u0_a227@82-132-246-85.dab.02.net)
[03:43:49] *** Quits: enkeyz (~enkeyz@user/enkeyz) (Quit: WeeChat 3.2)
[03:43:52] *** Quits: rschmied (~huh@HSI-KBW-109-193-238-226.hsi7.kabel-badenwuerttemberg.de) (Ping timeout: 268 seconds)
[03:44:43] *** Joins: rschmied (~huh@HSI-KBW-109-193-238-226.hsi7.kabel-badenwuerttemberg.de)
[03:45:30] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[03:45:49] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Client Quit)
[03:46:04] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[03:46:27] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 240 seconds)
[03:46:30] *** Joins: flynn (~mcbloch@user/flynn)
[03:47:35] *** Joins: Guest80 (~Guest80@46-138-158-49.dynamic.spd-mgts.ru)
[03:48:14] *** Parts: Guest80 (~Guest80@46-138-158-49.dynamic.spd-mgts.ru) ()
[03:48:32] *** Quits: almos (~almos@catv-89-133-107-93.catv.broadband.hu) (Quit: Leaving)
[03:48:39] *** Joins: Guest80 (~Guest80@46-138-158-49.dynamic.spd-mgts.ru)
[03:48:56] *** Quits: Guest80 (~Guest80@46-138-158-49.dynamic.spd-mgts.ru) (Client Quit)
[03:50:59] *** Quits: independent56 (~independe@95.148.175.234) (Ping timeout: 250 seconds)
[03:53:04] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[03:54:10] *** Joins: codebam (~codebam@user/codebam)
[04:00:35] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[04:01:07] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[04:02:18] *** Joins: sheldon (~sheldon@user/sheldon)
[04:03:17] *** Joins: fikran (~fikran@user/fikran)
[04:10:49] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 248 seconds)
[04:17:27] *** Joins: rbn (~rbn@sferic.eu)
[04:18:47] *** Quits: rschmied (~huh@HSI-KBW-109-193-238-226.hsi7.kabel-badenwuerttemberg.de) (Ping timeout: 240 seconds)
[04:19:07] *** Joins: rschmied (~huh@hsi-kbw-109-193-238-226.hsi7.kabel-badenwuerttemberg.de)
[04:24:21] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 250 seconds)
[04:31:27] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 240 seconds)
[04:33:16] *** Joins: codebam (~codebam@user/codebam)
[04:43:24] *** Joins: AshLeece[m] (~ashleecei@2001:470:69fc:105::c987)
[04:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:35] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:53:06] *** Quits: compufreak (~compufrea@2603-6010-4903-d184-0218-d705-fa62-f556.res6.spectrum.com) (Ping timeout: 256 seconds)
[04:53:21] *** Joins: bpalmer (~user@user/bpalmer)
[05:00:08] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[05:01:26] *** Joins: davincee (~da1dude@112.201.99.74)
[05:01:34] *** Joins: c10l (~c10l@89.34.167.207)
[05:01:44] *** Parts: karstensrage (~karstensr@user/karstensrage) (Leaving)
[05:01:50] *** Joins: compufreak (~compufrea@cpe-174-103-101-19.columbus.res.rr.com)
[05:04:42] *** Quits: goldfish (~goldfish@user/goldfish) (Quit: Leaving)
[05:04:55] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 252 seconds)
[05:07:01] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[05:08:12] *** Quits: revolve (~u0_a227@82-132-246-85.dab.02.net) (Read error: Connection reset by peer)
[05:12:01] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 250 seconds)
[05:13:03] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[05:15:18] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Client Quit)
[05:15:32] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[05:22:56] *** Quits: PinealGlandOptic (~PinealGla@178-133-189-55.mobile.vf-ua.net) (Quit: leaving)
[05:28:50] *** Joins: ollien (~ollien@ollien.com)
[05:30:31] <ollien> I have an interesting thing I found when reading through a library that I'm kind of confused about. The comment here says that a slice of constant length "does not allocate". How can this possibly be true? The data has to be stored somewhere... https://github.com/agnivade/levenshtein/blob/master/levenshtein.go#L48-L58
[05:32:02] <b0nn> A slice is metadata, with a pointer to the array holding the data
[05:33:03] <b0nn> So I think that they're trying to take advantage of that by expecting the new slice to continue using the array that's already been allocated
[05:34:29] <ollien> already been allocated by who? Is the implication that the compiler will always keep around a buffer of 32 unit16s to use for this call? afaict that's the only allocation that will be performed for that slice
[05:34:48] <ollien> err, rather, it's not like it was previously created as length 32 and reassigned, it's just kind of done in place
[05:36:24] <b0nn> line 57 implies that it will be using the slice of runes created on line 37
[05:37:56] <b0nn> That block of code you have highlighted just creates slices, which are described here https://github.com/golang/go/blob/master/src/runtime/slice.go#L15
[05:38:41] <b0nn> I'm not sure if the conversion from string to []rune involves a change in memory though
[05:38:57] <ollien> no I understand what a slice is, I'm just confused because it doesn't appear to be re-using the slice on line 37 (where is s1 re-sliced?), it seems to be performing an allocation (the call to make), and then slicing it down
[05:40:39] <A_Dragon> that doesnt seem correct. make should always allocate (the slice header, at the very least) as I understand it.
[05:40:52] <A_Dragon> especially make a length and not a cap
[05:41:14] <ollien> yeah, that second bit is where my confusion comes in
[05:41:27] *** Quits: yelnah (~felix@2001:44b8:3082:ad:6f0:21ff:fe3c:d4d7) (Ping timeout: 240 seconds)
[05:41:40] <A_Dragon> b0nn: the conversion to unint16 shouldnt be problematic, string to []rune will be as strings are []byte ([]uint8) and runs would be []uint16
[05:41:47] <A_Dragon> wait no 32, I think
[05:41:48] <A_Dragon> one second
[05:42:33] <A_Dragon> runes are int32
[05:42:39] *** Joins: yelnah (~felix@2001:44b8:30cc:88:6f0:21ff:fe3c:d4d7)
[05:43:22] <A_Dragon> ollien: they may mean that accessing etc wont allocate after the fact?
[05:43:25] <ollien> A_Dragon: I don't think it actually converts the runes to uint64, it just stores numbers in it
[05:43:47] <ollien> A_Dragon: that might be the case? append is never called so I don't see how that could be the implication of that branch (i.e. "for small strings"
[05:43:55] <A_Dragon> yeah
[05:44:12] <A_Dragon> maybe something clever in the compiler does something to prealloc x if it doesnt escape
[05:44:37] <ollien> hilariously, on one of the commit comments the author says "I had to do a double-take as well to understand why it doesn't allocate."
[05:44:45] <A_Dragon> lol
[05:44:51] *** Joins: neurocyte8308 (~neurocyte@45.128.181.41)
[05:44:51] *** Quits: neurocyte8308 (~neurocyte@45.128.181.41) (Changing host)
[05:44:51] *** Joins: neurocyte8308 (~neurocyte@user/neurocyte)
[05:45:39] <rewt> maybe he meant re-allocate
[05:45:48] <A_Dragon> yeah thats what Im thinking
[05:45:58] <A_Dragon> because the slice will never realloc
[05:46:01] <rewt> or maybe golang has some optimization when the length is a const
[05:46:12] <ollien> the slice would never realloc if he just used line 50, either
[05:46:19] <rewt> yeah, true
[05:46:23] <ollien> rewt: that second thought is what I was thinking
[05:46:23] <A_Dragon> rewt: nope, when you make() it allocs to the size you want at runtime
[05:46:42] *** Joins: Artea (~Lufia@artea.com.pt)
[05:46:44] <A_Dragon> which is why a `make([]int, (1 << 64)-1)` will take a bit
[05:46:48] <ollien> ah - I was hoping the fact `minLengthThreshold` is const might meant the compiler could do some magic
[05:46:51] <A_Dragon> if it ever finises
[05:47:07] *** Quits: neurocyte830 (~neurocyte@user/neurocyte) (Ping timeout: 250 seconds)
[05:47:07] *** neurocyte8308 is now known as neurocyte830
[05:47:19] <A_Dragon> now, the reslice to change the current *length* (not cap, cap of that slice remains) might do... something?
[05:47:36] <A_Dragon> they also do a bounds check below so Im inclined to believe they understand the internals, somehow
[05:48:14] <A_Dragon> call it magic, play with it in godbolt maybe
[05:48:22] <ollien> does godbolt support go? awesome
[05:48:33] <ollien> (I write C++ for work, so I'm just used to using it for C++ lol)
[05:50:02] <A_Dragon> It does!
[05:50:16] <A_Dragon> Though note you will need to be able to read go asm
[05:51:08] <ollien> how different could it be (famous last words)
[05:51:30] <A_Dragon> It's based on plan 9
[05:51:53] <A_Dragon> It's arguably closer to an IL than asm
[05:52:06] <A_Dragon> As what things mean change based on where it's compiled
[05:52:30] <A_Dragon> But if you really want to godbolt can also show you the output from gccgo
[05:53:19] *** Quits: haliucinas (~haliucina@5.20.153.21) (Ping timeout: 252 seconds)
[05:54:13] <ollien> https://godbolt.org/z/5WY5drMK4 So I'm still puzzling through this but I thought it was interesting that the second branch (line 56 of the asm) seems to load from existing memory. The second one absolutely performs an allocation on line 126 of the asm
[05:54:46] *** Joins: revolve (~u0_a227@82-132-246-85.dab.02.net)
[05:55:18] <A_Dragon> Will have a look when I'm back at my desk
[05:55:23] <ollien> haha alright
[05:57:51] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[05:58:37] <rewt> looks like it just uses the stack... maybe
[05:58:51] <rewt> https://godbolt.org/z/9316sTcP5
[05:59:01] <ollien> that's what it looks like... the gccgo output seems to be basing this off rbp
[05:59:21] <A_Dragon> interesting
[05:59:33] <ollien> I wonder if the compiler is just smart enough to perform that allocation on call
[05:59:46] <ollien> (at which point, I question if that's truly "no allocation" :P)
[05:59:54] <A_Dragon> so its not-
[05:59:54] <b0nn> Does that mean 'allocation' is really 'heap allocation' if so, that just means that the slice struct used isn't created with SliceOnHeap (or whatever it was called)
[05:59:56] <A_Dragon> yeah
[06:00:04] <ollien> ahhhh
[06:00:15] <ollien> computers are weird
[06:00:20] <A_Dragon> given its `autotemp`, I agree this is just avoiding heap allocs
[06:00:30] <A_Dragon> which, fair enough they will be slower
[06:00:47] <A_Dragon> lets bench this, shall we?
[06:00:57] <ollien> hah yes
[06:01:06] <ollien> sorry, did not want to drag this out, but it was a fun discussion :)
[06:01:08] <ollien> thanks all
[06:01:16] *** Joins: sheldon (~sheldon@user/sheldon)
[06:01:18] <rewt> and with `_ = make(...)`, it's completely optimized away
[06:01:42] <rewt> as long as the length is a const
[06:03:08] <ollien> or an ICE, it seems
[06:03:10] <ollien> but tomato tomato
[06:05:58] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 252 seconds)
[06:08:15] <A_Dragon> go bench says no allocs either
[06:08:18] <A_Dragon> interesting
[06:08:31] <ollien> oh sorry _that's_ what you meant by bench
[06:08:37] <ollien> I thought you meant bench as in "table this conversation"
[06:08:50] <rewt> go table? XD
[06:09:12] *** Quits: Lutin (~Lutin@user/lutin) (Quit: Lutin)
[06:09:16] <ollien> lol
[06:09:35] * b0nn bench pressed it :)
[06:09:39] <A_Dragon> BenchmarkStack-8        1000000000               0.2519 ns/op          0 B/op          0 allocs/op
[06:09:46] <A_Dragon> BenchmarkHeap-8         36485671                29.82 ns/op           80 B/op          1 allocs/op
[06:09:54] <ollien> interesting - I wonder if bench's allocs specifically refers to the heap
[06:10:04] <A_Dragon> func stackAlloc() { x := make([]int, TheConst); x = x[:TheConst] }
[06:10:13] <ollien> the docs don't really specify afaict, they just say "allocation"
[06:10:22] <A_Dragon> func heapAlloc(size int) { x := make([]int, size); x = x[:size] }
[06:10:27] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[06:10:41] <rewt> using the stack isn't really allocating; it's just moving the stack pointer
[06:10:44] <A_Dragon> unless its entirely optimized out, which it may be
[06:10:53] <ollien> memory's gotta come from somewhere rewt :P
[06:11:06] <A_Dragon> ollien: the stack is already alloced
[06:11:06] <rewt> it's already allocated to the stack
[06:11:35] <ollien> it's been a minute since I studied this; is a process guaranteed the full 8MB of stack to be allocated?
[06:11:37] *** Quits: kiril (~kiril@85.91.153.163) (Quit: ZNC - https://znc.in)
[06:11:40] <ollien> (or whatver the limit is set to)
[06:12:17] <A_Dragon> the stack is expanded on call to go functions
[06:12:23] <A_Dragon> if needed
[06:12:36] <ollien> so yeah, there's your allocation :P
[06:12:39] <ollien> but yeah, I getcha
[06:12:39] *** Joins: fikran (~fikran@user/fikran)
[06:12:55] <A_Dragon> yeah but its allocation that happens anyway
[06:13:01] <b0nn> They changed the behaviour
[06:13:12] <A_Dragon> yeah okay stackAlloc is being optimized out
[06:13:16] <A_Dragon> lets return an int from both
[06:13:36] <b0nn> It /was/ a split(able) stack, but now it's not
[06:13:54] <ollien> does it just stay allocated if it was ever allocated?
[06:14:04] <b0nn> So when a stack gets above its allowance the whole thing gets moved IIRC
[06:15:53] <ollien> ah, and it looks like gc can revert that
[06:15:58] <A_Dragon> https://godbolt.org/z/G9eKT7Pne
[06:16:42] <A_Dragon> still 0, bit slower with no inlining understandably
[06:18:51] <ollien> huh
[06:18:55] <ollien> fancy
[06:19:37] *** Quits: CommunistWolf (~gulag@user/communistwolf) (Ping timeout: 250 seconds)
[06:30:32] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[06:33:43] *** Joins: CommunistWolf (~gulag@user/communistwolf)
[06:33:48] *** Quits: venue (~venue@user/venue) (Ping timeout: 250 seconds)
[06:40:25] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 250 seconds)
[06:48:52] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[06:49:59] *** Joins: kulak (~kulak@user/kulak)
[06:51:06] *** Quits: emcconville (~emcconvil@c-98-222-200-8.hsd1.in.comcast.net) (Quit: WeeChat 3.2)
[06:54:08] *** Quits: blinux (~blinux@pool-108-51-228-58.washdc.fios.verizon.net) (Quit: WeeChat 3.2)
[06:54:26] *** Joins: blinux (~blinux@pool-108-51-228-58.washdc.fios.verizon.net)
[06:55:02] *** Joins: haliucinas (~haliucina@5.20.153.21)
[06:56:15] *** Quits: blinux (~blinux@pool-108-51-228-58.washdc.fios.verizon.net) (Client Quit)
[06:56:31] *** Joins: blinux (~blinux@pool-108-51-228-58.washdc.fios.verizon.net)
[06:58:37] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 250 seconds)
[06:58:40] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 240 seconds)
[06:59:27] *** Quits: revolve (~u0_a227@82-132-246-85.dab.02.net) (Ping timeout: 240 seconds)
[06:59:35] *** Joins: aead (~aead@user/aead)
[07:01:48] *** Joins: revolve (~u0_a227@82-132-246-254.dab.02.net)
[07:02:49] *** Quits: c10l (~c10l@89.34.167.207) (Quit: The Lounge - https://thelounge.chat)
[07:02:55] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[07:03:10] *** Joins: c10l (~c10l@89.34.167.207)
[07:04:37] *** Joins: codebam (~codebam@user/codebam)
[07:04:41] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 250 seconds)
[07:09:34] *** Quits: blinux (~blinux@pool-108-51-228-58.washdc.fios.verizon.net) (Quit: WeeChat 3.2)
[07:09:50] *** Joins: blinux (~blinux@pool-108-51-228-58.washdc.fios.verizon.net)
[07:12:16] *** Joins: blinux2 (~blinux@pool-108-51-228-58.washdc.fios.verizon.net)
[07:12:42] *** Quits: blinux2 (~blinux@pool-108-51-228-58.washdc.fios.verizon.net) (Client Quit)
[07:12:59] *** Joins: venue (~venue@user/venue)
[07:13:01] *** Joins: gggpkm_ (~gggpkm@60.10.194.43)
[07:13:21] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 250 seconds)
[07:14:49] *** Joins: codebam (~codebam@user/codebam)
[07:19:31] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[07:25:31] *** Joins: gggpkm (~gggpkm@123.113.176.64)
[07:26:21] *** Quits: gggpkm_ (~gggpkm@60.10.194.43) (Ping timeout: 250 seconds)
[07:28:57] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 250 seconds)
[07:30:14] *** Quits: blinux (~blinux@pool-108-51-228-58.washdc.fios.verizon.net) (Quit: WeeChat 3.2)
[07:30:31] *** Joins: blinux (~blinux@pool-108-51-228-58.washdc.fios.verizon.net)
[07:30:41] *** Joins: codebam (~codebam@user/codebam)
[07:31:50] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:33:15] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[07:39:07] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 240 seconds)
[07:39:45] *** Joins: codebam (~codebam@user/codebam)
[07:41:02] *** Joins: gggp (~textual@111.63.14.115)
[07:42:02] *** Quits: gggp (~textual@111.63.14.115) (Client Quit)
[07:42:42] *** Joins: gggpkm_ (~gggpkm@111.63.14.115)
[07:42:47] *** Quits: gggpkm (~gggpkm@123.113.176.64) (Ping timeout: 240 seconds)
[07:48:40] *** Quits: gggpkm_ (~gggpkm@111.63.14.115) (Quit: Leaving)
[07:50:55] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:53:58] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[07:56:28] *** Quits: c10l (~c10l@89.34.167.207) (Quit: The Lounge - https://thelounge.chat)
[08:01:38] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[08:14:35] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:15:45] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 250 seconds)
[08:16:52] *** Joins: gggp (~textual@111.63.14.115)
[08:17:08] *** Joins: codebam (~codebam@user/codebam)
[08:17:44] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[08:18:27] *** Quits: yelnah (~felix@2001:44b8:30cc:88:6f0:21ff:fe3c:d4d7) (Ping timeout: 240 seconds)
[08:18:28] *** Joins: egy (egy@tilde.team)
[08:18:56] *** Joins: yelnah (~felix@2001:44b8:30cc:88:6f0:21ff:fe3c:d4d7)
[08:19:47] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[08:21:49] *** Quits: gggp (~textual@111.63.14.115) (Ping timeout: 252 seconds)
[08:22:01] *** Joins: fikran (~fikran@user/fikran)
[08:23:59] *** Joins: boingolov (~nastynate@c-71-236-46-219.hsd1.tn.comcast.net)
[08:28:50] *** Joins: oxum (~oxum@122.172.205.112)
[08:33:10] *** Quits: oxum (~oxum@122.172.205.112) (Ping timeout: 240 seconds)
[08:33:33] <opcode> i'm writing a REST API client (so lots of json <-> struct shenanigans) and I'm having trouble getting a struct out of a function.  Go won't let me just return the struct, for some reason, so I'm trying channels and waitgroups and all kinds of junk but all the struct fields end up set to 0 or empty string, etc when I try that.  What's the proper way to get a struct out of a function?
[08:34:51] <opcode> correction:  what's the proper way to get a struct out of a goroutine?
[08:36:33] *** Joins: c10l (~c10l@89.34.167.207)
[08:36:51] *** Quits: c10l (~c10l@89.34.167.207) (Client Quit)
[08:37:54] *** Joins: c10l (~c10l@89.34.167.207)
[08:39:09] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 250 seconds)
[08:40:06] *** Joins: oxum (~oxum@122.172.205.112)
[08:41:26] *** Quits: oxum (~oxum@122.172.205.112) (Remote host closed the connection)
[08:41:41] *** Joins: jpw (~jpw@user/jpw)
[08:43:03] *** Joins: oxum (~oxum@122.172.205.112)
[08:46:05] *** Quits: jpw (~jpw@user/jpw) (Ping timeout: 250 seconds)
[08:46:21] *** Joins: codebam (~codebam@user/codebam)
[08:47:10] *** Joins: jpw (~jpw@user/jpw)
[08:47:40] <b0nn> opcode: It /sounds/ like you are having synchronisation issues with that data (the goroutine is creating and returning the struct before you've informed of the data it should be storing in that struct?
[08:48:06] <b0nn> I mean, it's quite a vague problem description, maybe show some example code - a repo, or play.golang.org
[08:48:18] <opcode> I can't otherwise it would expose my API key
[08:48:25] <opcode> but yeah I understand it's vague
[08:49:26] *** Quits: freakazoid333 (~matt@2603:9000:cf0f:80e3:954b:eb2d:1f9:d99d) (Ping timeout: 250 seconds)
[08:49:27] <opcode> I tried using waitgroups.  I had a call to waitgroup.Wait() and then after that displaying the struct, but no dice
[08:50:03] <opcode> The only way I can get it working is to manually create channels and then call the goroutine over and over, i.e. not in a loop
[08:50:15] <opcode> so i have to do like, c1 = make(chan bla bla bla)
[08:50:27] <opcode> for c1 to cN
[08:50:45] <opcode> and then go thefunction(c1), go thefunction(c2) .... etc.
[08:50:49] <opcode> which breaks DRY
[08:51:10] *** Joins: freakazoid333 (~matt@2603:9000:cf0f:80e3:cd8b:9ec4:e133:78c)
[08:53:07] *** Quits: oxum (~oxum@122.172.205.112) (Remote host closed the connection)
[08:54:11] *** Quits: sztanpet (sztanpet@user/sztanpet) (Quit: asd)
[08:54:14] *** Quits: c10l (~c10l@89.34.167.207) (Quit: The Lounge - https://thelounge.chat)
[08:54:52] *** Joins: c10l (~c10l@89.34.167.207)
[08:58:05] <b0nn> why do you have so many channels?
[08:58:22] <opcode> because that's the only way I've been able to get it to compile
[08:58:36] <b0nn> channel in, channel out is all I would have expected
[08:58:57] <opcode> I'm making network requests, though, so I can't guarantee they'll come back in order
[08:59:10] *** Joins: sztanpet (sztanpet@user/sztanpet)
[08:59:14] <opcode> so if I reuse a channel, my understanding is that variable A's data might end up in variable B
[08:59:22] <b0nn> You need to find a way to better show the problem
[09:00:17] <b0nn> Also, you can add a sticky to your in/out going data, such that it's marked who owns the data
[09:00:30] <b0nn> but.. async processing is always difficult
[09:00:50] <opcode> interesting, did not know about the sticky feature
[09:01:04] <b0nn> it's not a feature
[09:01:17] <b0nn> it's you adding some data to convey who owns it
[09:01:26] <opcode> oh
[09:02:25] <ikke> Sounds like you're trying to use goroutines in a synchronous way
[09:03:01] <opcode> I'm making requests to a stock market data API against a list of symbols, so I want to run the same goroutine against each symbol in a slice
[09:03:48] <opcode> I'm using goroutines because... well, I guess I thought you had to for network requests
[09:04:02] <A_Dragon> you do not, just if you want to do other things while they run
[09:04:03] <ikke> You don't have to
[09:04:04] <opcode> I find the golang docs to be, um, not so helpful
[09:04:11] <A_Dragon> which docs?
[09:04:14] <opcode> any of them
[09:04:25] <opcode> it took me weeks to figure out the mess that is modules
[09:04:27] <ikke> You can just call your functions and wait for the response
[09:04:35] <ikke> without using channels and goroutines
[09:04:37] <opcode> ok so they will block like any other language?
[09:04:40] <ikke> yes
[09:05:14] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:05:25] <A_Dragon> go is like any other language normally
[09:05:34] <A_Dragon> you start a goroutine with `go funcname()`
[09:05:36] <A_Dragon> no other way.
[09:06:05] <opcode> A_Dragon: yes I know how to start one, that's not my obstacle
[09:06:33] <A_Dragon> one of the principles in go (that most people follow) is that the caller decides concurrency
[09:06:35] <opcode> anyways I'll probably bang my head against the wall some more because I like threaded IO for network requests
[09:06:41] <A_Dragon> so, in general, you should expect things to block
[09:06:48] <A_Dragon> unless you explicitly ask them not to
[09:06:48] *** Joins: oxum (~oxum@122.172.205.112)
[09:06:57] <A_Dragon> as for networked I/O, thats also quite easy
[09:07:26] <opcode> for you maybe
[09:07:26] <A_Dragon> so, my next question is
[09:07:34] <A_Dragon> can we have an example of what you've done
[09:07:43] <A_Dragon> so we can see where you may have gone wrong
[09:08:05] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[09:08:17] <opcode> to provide a playground example would require quite a lot of work, and I don't want to just copy+paste my code because I'd be exposing my API key as I mentioned earlier
[09:08:34] <A_Dragon> you could remove your key?
[09:09:15] <opcode> then the code would not be runnable in the playground
[09:09:19] <ikke> When you use goroutines, you cannot expect the data to come back in a deterministic order
[09:09:21] <A_Dragon> thats alright
[09:09:30] <A_Dragon> I just wanna see code, I dont need it to have it compile
[09:09:43] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Read error: Connection reset by peer)
[09:10:04] <opcode> ikke: yeah that's my obstacle
[09:10:20] <bpalmer> I can with careful construction
[09:10:48] <A_Dragon> you cannot, on its own, assume that the order will be sane :D
[09:11:20] <A_Dragon> besides opcode, the playground doesnt do external network requests
[09:12:11] <opcode> that's probably for the best
[09:12:52] <opcode> I'll try b0nn 's suggestion, see if I can replace a bunch of structs with maps and add a tag to my data
[09:12:56] <opcode> thx
[09:14:20] *** Quits: sztanpet (sztanpet@user/sztanpet) (Quit: asd)
[09:14:39] *** Joins: sztanpet (sztanpet@user/sztanpet)
[09:15:26] *** Quits: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net) (Ping timeout: 250 seconds)
[09:16:06] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[09:18:37] *** Joins: mei (~mei@user/mei)
[09:27:16] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:29:25] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 250 seconds)
[09:29:43] *** Quits: oxum (~oxum@122.172.205.112) (Remote host closed the connection)
[09:30:47] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[09:30:49] *** Joins: codebam (~codebam@user/codebam)
[09:33:09] <b0nn> hrm, even the idea of some identifying information in the struct is going to be an effort because you need to ensure that the correct thread gets it
[09:35:46] <bpalmer> thread?
[09:36:20] <opcode> well, my approach, which I'm still writing, is to create a hashtable where the keys are unique values I know will be in the received json
[09:37:06] <opcode> we'll see if this works
[09:37:41] <bpalmer> you want to make n network calls, and get get n pieces of data, and know for each piece of data which network call it is associated with?
[09:39:13] <b0nn> The other idea I had was, pass the receiver channel to the go routine so that when you return the struct, you do so on the channel owned by the caller
[09:39:24] <opcode> bpalmer: sounds about right yes
[09:39:51] <opcode> b0nn: go won't let me return a value from a goroutine
[09:39:58] <opcode> compile error
[09:40:10] <opcode> but i had that idea too
[09:40:12] <b0nn> you pass it a channel to return the value on
[09:40:19] <b0nn> so, you did NOT
[09:40:41] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 250 seconds)
[09:40:44] <opcode> ah yes, well, that's what I'm attempting right now
[09:41:07] *** Quits: yelnah (~felix@2001:44b8:30cc:88:6f0:21ff:fe3c:d4d7) (Ping timeout: 250 seconds)
[09:41:17] <bpalmer> pass it the channel, pass in a unique id to each go routine as a parameter.
[09:41:51] <ikke> goroutines are not async functions like other languages have
[09:41:58] <bpalmer> Alternatively, var foo [10]data; for i := 0; i < 10; i++ { go networkStuff(&foo[i]); }   and just assign to the *parameter
[09:42:11] <opcode> ikke: goroutines are just green threads aren't they
[09:42:13] <bpalmer> although I do need to think about whethere that is fully memory safe.
[09:42:41] <bpalmer> (of course, that latter approach also needs waitgroups, so you know it's safe to go through the array)
[09:44:13] *** Joins: yelnah (~felix@203.221.109.243)
[09:44:15] <ikke> The question is whether you really need a new goroutine for each ticker symbol you want to fetch
[09:44:38] *** Quits: venue (~venue@user/venue) (Quit: adios)
[09:44:50] <opcode> i suppose I don't need one and I could just let it block, but when the requests time out I'd like my app to remain responsive
[09:46:06] <bpalmer> a more scalable way might be to have N things fetching ticker data, a channel to communicate M different ticker symbols to those N things, and an output channel where results are returned.
[09:46:32] <bpalmer> which is a pretty typical pattern in go, I think.
[09:47:50] *** Joins: oxum (~oxum@122.172.205.112)
[09:50:07] <b0nn> I'd flip it around logically, you have a boss processor with worker ticker fetchers
[09:50:50] <b0nn> Hmm, or is it a fan in type situation where the processor is receiving from a fan
[09:54:18] <opcode> k, thanks to b0nn's suggestion, what I ended up doing was creating a map[string]*struct where the keys were ticker symbols and the pointers pointed to structs to hold the response data I wanted
[09:54:24] <opcode> since the response data contains the ticker
[09:54:48] <opcode> I was able to just assign to m[response.Ticker]
[09:54:55] <bpalmer> opcode: ah. That's not safe.
[09:55:16] <opcode> in what way
[09:55:26] <bpalmer> opcode: see https://go.dev/blog/maps  and look for Concurrency
[09:55:46] <b0nn> pointers to data are never threadsafe
[09:56:23] <bpalmer> the most obvious issue is if assigning a new element to the map causes it to need to be resized
[09:57:02] <opcode> well, shit
[09:57:05] <opcode> lol
[09:58:04] <bpalmer> that post shows a simple way to protect this using a mutex.
[10:06:09] *** Joins: frost (~frost@59.71.240.119)
[10:11:01] *** Joins: gggp (~textual@60.10.194.43)
[10:11:38] *** Quits: gggp (~textual@60.10.194.43) (Client Quit)
[10:12:20] *** Joins: gggp (~textual@123.113.176.64)
[10:13:20] *** Quits: gggp (~textual@123.113.176.64) (Client Quit)
[10:14:00] *** Quits: freakazoid333 (~matt@2603:9000:cf0f:80e3:cd8b:9ec4:e133:78c) (Read error: Connection reset by peer)
[10:18:18] *** Quits: oxum (~oxum@122.172.205.112) (Remote host closed the connection)
[10:18:52] *** Joins: theoceaniscool (~theoceani@213.94.16.93)
[10:19:33] <opcode> wait, is it still unsafe if I return the value from the goroutine and perform the assignment in the main thread?
[10:19:44] <opcode> should be safe then, right
[10:20:33] *** Joins: ofh (~felix@2001:44b8:30cc:88:6f0:21ff:fe3c:d4d7)
[10:21:10] *** Quits: yelnah (~felix@203.221.109.243) (Ping timeout: 240 seconds)
[10:21:40] <ikke> yes, the issue is when you try to use the map in different threads
[10:21:50] <ikke> (concurrently)
[10:26:45] *** Joins: oxum (~oxum@122.172.205.112)
[10:28:47] *** Quits: oxum (~oxum@122.172.205.112) (Remote host closed the connection)
[10:29:08] *** Joins: oxum (~oxum@122.172.205.112)
[10:29:13] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[10:31:24] *** Joins: fikran (~fikran@user/fikran)
[10:33:45] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 248 seconds)
[10:35:18] *** Quits: oxum (~oxum@122.172.205.112) (Remote host closed the connection)
[10:36:22] *** Joins: bkircher (~bkircher@2001:a61:245a:8201:c518:484f:1750:7247)
[10:37:30] *** Joins: __alex (~alex@95.90.254.243)
[10:40:03] *** Quits: ofh (~felix@2001:44b8:30cc:88:6f0:21ff:fe3c:d4d7) (Ping timeout: 250 seconds)
[10:40:12] *** Joins: yelnah (~felix@2001:44b8:3084:c0:6f0:21ff:fe3c:d4d7)
[10:47:21] *** Joins: mrig (~mrig@user/mrig)
[10:52:37] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[11:05:44] *** Joins: absc (~absc@dynamic-adsl-94-34-168-146.clienti.tiscali.it)
[11:13:51] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 250 seconds)
[11:13:55] *** Joins: shka (~herr@109.231.62.239)
[11:15:07] *** Quits: shiroyasha (~shiroyash@ec2-3-124-70-31.eu-central-1.compute.amazonaws.com) (Quit: WeeChat 3.2)
[11:17:16] *** Joins: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz)
[11:20:08] *** Joins: saschagrunert (~saschagru@46.128.124.113)
[11:24:43] *** Joins: jjido (~Denis@90.213.58.125)
[11:25:53] *** Joins: ofh (~felix@2001:44b8:3088:5a:6f0:21ff:fe3c:d4d7)
[11:25:59] *** Quits: yelnah (~felix@2001:44b8:3084:c0:6f0:21ff:fe3c:d4d7) (Ping timeout: 250 seconds)
[11:28:40] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[11:34:21] *** Joins: hikhvar796073809 (~thelounge@dynamic-077-012-001-134.77.12.pool.telefonica.de)
[11:38:58] *** Joins: gggpkm (~gggpkm@60.10.194.43)
[11:46:13] *** Joins: abc_ (~abc@user/abc)
[11:46:34] *** Quits: zwindl (~abc@user/abc) (Read error: Connection reset by peer)
[11:46:43] *** Quits: zsnes (~dead@173.82.46.220) (Ping timeout: 268 seconds)
[11:46:54] *** Joins: zsnes (~dead@173.82.46.220)
[11:48:57] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 248 seconds)
[11:49:10] *** Joins: gggpkm_ (~gggpkm@60.10.194.43)
[11:49:30] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:51:37] *** Quits: gggpkm (~gggpkm@60.10.194.43) (Ping timeout: 248 seconds)
[11:53:25] *** Joins: oxum (~oxum@122.172.205.112)
[11:58:10] *** Quits: oxum (~oxum@122.172.205.112) (Ping timeout: 240 seconds)
[11:58:27] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[12:04:01] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[12:04:03] *** Joins: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de)
[12:08:53] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 250 seconds)
[12:09:51] *** Joins: gggp (~textual@60.10.194.43)
[12:10:10] *** Joins: kinduff4 (~kinduff@user/kinduff)
[12:10:30] *** Quits: gggp (~textual@60.10.194.43) (Client Quit)
[12:25:13] *** Quits: kinduff (~kinduff@user/kinduff) (Ping timeout: 248 seconds)
[12:25:13] *** kinduff4 is now known as kinduff
[12:28:46] *** Joins: independent56 (~independe@95.144.68.39)
[12:29:49] *** Quits: svedrin (~quassel@tiamat.funzt-halt.net) (Quit: https://quassel-irc.org - Komfortabler Chat. Überall.)
[12:30:55] *** Joins: svedrin (~quassel@tiamat.funzt-halt.net)
[12:31:00] *** Joins: oxum (~oxum@122.172.205.112)
[12:32:36] *** Quits: khyr0n (~khyr0n@2806:2f0:9140:ecb1:1979:68d6:902:2297) (Ping timeout: 250 seconds)
[12:35:45] *** Quits: oxum (~oxum@122.172.205.112) (Ping timeout: 250 seconds)
[12:38:27] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[12:38:31] *** Joins: gggpkm (~gggpkm@123.113.176.64)
[12:40:05] *** Quits: gggpkm_ (~gggpkm@60.10.194.43) (Ping timeout: 250 seconds)
[12:40:47] *** Joins: fikran (~fikran@user/fikran)
[12:41:27] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[12:45:08] *** abc_ is now known as zwindl
[12:51:58] *** Joins: elf_fortres (~elf_fortr@adsl-72-50-4-46.prtc.net)
[12:52:49] *** Joins: aku (~aku@eagleflow.fi)
[12:54:21] *** Joins: sheldon (~sheldon@user/sheldon)
[12:59:58] *** Quits: sheldon (~sheldon@user/sheldon) (Quit: WeeChat 3.2)
[13:00:35] *** Joins: sheldon (~sheldon@user/sheldon)
[13:01:43] *** CommunistWolf is now known as CapitalistWolf
[13:05:36] *** Joins: tedwing (~anon@lfbn-idf3-1-1409-99.w109-221.abo.wanadoo.fr)
[13:07:34] *** Quits: elf_fortres (~elf_fortr@adsl-72-50-4-46.prtc.net) (Ping timeout: 246 seconds)
[13:08:18] *** Joins: Lutin (~Lutin@lfbn-lyo-1-1349-50.w86-207.abo.wanadoo.fr)
[13:08:41] *** Quits: jespada (~jespada@90.254.245.194) (Ping timeout: 250 seconds)
[13:11:05] *** Joins: jespada (~jespada@90.254.245.194)
[13:16:20] *** Quits: jjido (~Denis@90.213.58.125) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:17:42] *** Joins: ztx (~ztx@user/ztx)
[13:20:49] *** Quits: zwr (~zwr@2804:d45:b966:fb00:3a94:c9d1:2f15:a5ba) (Remote host closed the connection)
[13:21:14] *** Quits: cross (~cross@spitfire.i.gajendra.net) (Quit: Lost terminal)
[13:25:01] *** CapitalistWolf is now known as lupine
[13:27:39] *** Joins: gggpkm_ (~gggpkm@60.10.194.43)
[13:28:18] *** Joins: oxum (~oxum@122.172.205.112)
[13:29:29] *** Quits: revolve (~u0_a227@82-132-246-254.dab.02.net) (Ping timeout: 250 seconds)
[13:29:47] *** Quits: gggpkm (~gggpkm@123.113.176.64) (Ping timeout: 240 seconds)
[13:32:43] *** Quits: oxum (~oxum@122.172.205.112) (Remote host closed the connection)
[13:33:08] *** Joins: eti (~eti@2a07:abc4::1:26e)
[13:33:47] <mort> I'm trying to figure out the go templating engine, but I don't understand why each template needs a name. Is the name you give to `template.New` used for lookup ever?
[13:35:29] <mort> the docs just show `tmpl, err := template.New("foo").Parse("whatever")` and then never go on to mention what that "foo" represents, and even the documentation for New specifically just says it "allocates a new HTML template with the given name"
[13:36:23] <mort> ah, you can include templates in other templates and that does lookup based on the name
[13:39:19] <MrElendig> indeed,
[13:43:40] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[13:46:56] *** Quits: zwindl (~abc@user/abc) (Remote host closed the connection)
[13:47:10] *** Joins: abc_ (~abc@user/abc)
[13:47:37] *** abc_ is now known as zwindl
[13:50:32] <mort> I don't always understand the priorities of documentation
[13:50:50] <mort> for example, https://pkg.go.dev/github.com/mattn/go-sqlite3?utm_source=godoc -- do I really need to know how to write my own sqlite extension in C before I need to know how to open a database file
[14:03:56] *** Joins: karhunkynsii (~karhunkyn@user/karhunkynsi)
[14:05:20] *** Quits: karhunkynsi (~karhunkyn@user/karhunkynsi) (Ping timeout: 250 seconds)
[14:09:10] *** Joins: ppang (~ppang@user/ppang)
[14:10:06] *** Quits: halden (~halden@lden.im) (Quit: Bye)
[14:12:32] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Quit: mikoto-chan)
[14:12:51] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:15:28] *** Joins: halden (~halden@lden.im)
[14:15:48] *** Joins: CoolerX (~CoolerX@user/coolerx)
[14:16:10] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[14:19:37] * MrElendig generally find go docs to be pretty bad (both content and styling/layout)
[14:19:43] <MrElendig> :(
[14:28:50] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[14:35:07] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[14:37:34] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[14:37:44] <A_Dragon> MrElendig: if you know what you'd like them to look like, you could PR
[14:37:54] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[14:38:28] *** Quits: independent56 (~independe@95.144.68.39) (Remote host closed the connection)
[14:38:47] *** Joins: independent56 (~independe@95.144.68.39)
[14:41:02] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[14:41:41] *** Quits: bpalmer (~user@user/bpalmer) (Remote host closed the connection)
[14:48:10] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[14:49:01] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 252 seconds)
[14:50:09] *** Joins: fikran (~fikran@user/fikran)
[14:50:28] *** Quits: independent56 (~independe@95.144.68.39) (Remote host closed the connection)
[14:50:47] *** Joins: independent56 (~independe@95.144.68.39)
[14:51:07] *** Joins: disposedtrolley (~james@125-253-108-46.ip4.superloop.com)
[14:53:56] *** Joins: gggp (~textual@60.10.194.43)
[14:54:51] *** Quits: msk (~msk@49.207.204.61) (Ping timeout: 250 seconds)
[14:59:40] *** Quits: ztx (~ztx@user/ztx) (Ping timeout: 240 seconds)
[15:00:49] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:02:52] <sztanpet> just dont get rid of the terseness
[15:04:11] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[15:06:07] *** Quits: ppang (~ppang@user/ppang) (Ping timeout: 240 seconds)
[15:08:39] *** Joins: shiroyasha (~shiroyash@ec2-3-124-70-31.eu-central-1.compute.amazonaws.com)
[15:09:02] *** Quits: gggp (~textual@60.10.194.43) (Ping timeout: 250 seconds)
[15:17:41] *** lupine is now known as CommunistWolf
[15:19:10] *** Quits: disposedtrolley (~james@125-253-108-46.ip4.superloop.com) (Ping timeout: 240 seconds)
[15:22:31] *** Joins: enkeyz (~enkeyz@user/enkeyz)
[15:23:53] *** Quits: kubblai (sid478659@fedora/kubblai) ()
[15:24:08] *** Joins: kubblai (sid478659@fedora/kubblai)
[15:25:55] *** Joins: gggp (~textual@111.63.14.115)
[15:27:36] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[15:30:04] *** Joins: noonien (~noonien@user/noonien)
[15:34:19] *** Quits: seds (sid492514@user/seds) ()
[15:34:41] *** Joins: seds (sid492514@user/seds)
[15:37:07] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[15:37:11] *** Quits: seds (sid492514@user/seds) (Max SendQ exceeded)
[15:38:23] *** Joins: seds (sid492514@user/seds)
[15:44:11] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[15:45:16] *** Joins: msk (~msk@49.207.204.61)
[15:48:27] *** Joins: CoolerX (~CoolerX@user/coolerx)
[15:51:43] *** Quits: gggp (~textual@111.63.14.115) (Ping timeout: 252 seconds)
[15:52:53] *** Quits: absc (~absc@dynamic-adsl-94-34-168-146.clienti.tiscali.it) (Quit: Leaving.)
[15:54:05] *** Joins: gggp (~textual@111.63.14.115)
[15:54:32] *** Joins: sizeof_void34 (~Thunderbi@109-252-75-112.nat.spd-mgts.ru)
[15:56:50] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (Ping timeout: 272 seconds)
[15:58:26] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[15:58:31] *** Joins: gggpkm (~gggpkm@60.10.194.43)
[16:00:08] *** Quits: gggp (~textual@111.63.14.115) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:00:10] *** Quits: gggpkm_ (~gggpkm@60.10.194.43) (Ping timeout: 240 seconds)
[16:02:27] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 250 seconds)
[16:02:34] *** Quits: independent56 (~independe@95.144.68.39) (Remote host closed the connection)
[16:02:53] *** Joins: independent56 (~independe@95.144.68.39)
[16:03:19] *** Joins: dude (~da1dude@112.201.99.74)
[16:03:42] *** Quits: tylerchambers (sid511381@brockwell.irccloud.com) ()
[16:03:55] *** Joins: Ergo^ (~ergo@91.238.59.144)
[16:03:57] *** Joins: tylerchambers (sid511381@id-511381.helmsley.irccloud.com)
[16:05:02] *** Quits: popey (~popey@ubuntu/member/popey) (Remote host closed the connection)
[16:05:21] *** Joins: popey (~popey@ubuntu/member/popey)
[16:05:53] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[16:06:21] *** Quits: davincee (~da1dude@112.201.99.74) (Ping timeout: 250 seconds)
[16:06:40] *** Joins: gggpkm_ (~gggpkm@222.128.56.240)
[16:07:18] *** Joins: dadude (~da1dude@112.201.99.74)
[16:08:34] *** Quits: independent56 (~independe@95.144.68.39) (Remote host closed the connection)
[16:08:53] *** Joins: independent56 (~independe@95.144.68.39)
[16:09:13] *** Quits: gggpkm (~gggpkm@60.10.194.43) (Ping timeout: 248 seconds)
[16:10:15] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 250 seconds)
[16:10:15] *** Quits: dude (~da1dude@112.201.99.74) (Ping timeout: 250 seconds)
[16:11:33] *** Quits: bkircher (~bkircher@2001:a61:245a:8201:c518:484f:1750:7247) (Quit: WeeChat 3.2)
[16:13:05] *** Joins: normen (~normen@p200300d7173dc9007d610e7cbe17e129.dip0.t-ipconnect.de)
[16:20:09] *** Joins: gggpkm (~gggpkm@111.63.14.115)
[16:21:47] *** Quits: gggpkm_ (~gggpkm@222.128.56.240) (Ping timeout: 240 seconds)
[16:22:14] *** Joins: sheldon_ (~sheldon@user/sheldon)
[16:24:09] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[16:24:12] *** Joins: sheldon__ (~sheldon@user/sheldon)
[16:24:59] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 250 seconds)
[16:26:36] *** Quits: sheldon_ (~sheldon@user/sheldon) (Ping timeout: 250 seconds)
[16:31:04] *** Quits: MrElendig (~Urist@archlinux/op/MrElendig) (Quit: selling nuclear weapons secrets to dprk)
[16:31:33] *** Joins: yoonkn (~user@175.197.208.79)
[16:32:09] *** Joins: mikoto-c1 (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[16:32:13] *** Joins: MrElendig (~Urist@archlinux/op/MrElendig)
[16:32:19] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[16:35:04] <dyeplexer> I am trying to compile delve, however on doing `go install` it fails with assembler errors like: "pkg/proc/amd64util/xsave_amd64.s:1: Error: no such instruction: `text ·cpuid(SB),$0-24'" . Why is this happening?
[16:36:37] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[16:37:34] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[16:38:01] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[16:39:46] *** Quits: independent56 (~independe@95.144.68.39) (Read error: Connection reset by peer)
[16:39:48] *** Quits: tuxmartin (~tuxmartin@93.89.149.106) (Quit: Leaving)
[16:41:12] *** Joins: independent56 (~independe@51.158.144.32)
[16:43:34] *** Quits: enkeyz (~enkeyz@user/enkeyz) (Quit: WeeChat 3.2)
[16:52:07] *** Joins: gggp (~textual@60.10.194.43)
[16:55:05] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:64af:236c:94c0:6372)
[16:56:10] *** Quits: gggp (~textual@60.10.194.43) (Client Quit)
[16:56:54] <moldorcoder7> dyeplexer, try to adapt GOOS and GOARCH
[16:57:07] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[16:57:57] *** Joins: absc (~absc@dynamic-adsl-94-34-168-146.clienti.tiscali.it)
[16:59:31] *** Joins: fikran (~fikran@user/fikran)
[16:59:42] *** Quits: sizeof_void34 (~Thunderbi@109-252-75-112.nat.spd-mgts.ru) (Quit: sizeof_void34)
[17:00:07] *** Joins: Torr (~Torr@user/torr)
[17:01:25] <dyeplexer> moldorcoder7: Same thing happens on explicitly specifying them: https://bpa.st/GSEA . I am not trying to attempt any cross compilation. Just have the go tools installed from my package manager.
[17:04:16] <moldorcoder7> dyeplexer, dunno soirry maybe downgrade / upgrade go version to test iddf it is not current bug
[17:14:48] *** Joins: crm (~crm@70.120.0.94)
[17:16:36] *** Joins: aman (~aman@user/aman)
[17:16:47] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 240 seconds)
[17:17:44] *** Quits: orthoplex64 (~crm@70.120.0.94) (Ping timeout: 250 seconds)
[17:21:21] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:64af:236c:94c0:6372) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:22:08] *** Joins: sheldon (~sheldon@user/sheldon)
[17:23:11] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[17:24:32] <thinkofher> which name for method is more idiomatic: IsAllowed() vs just Allowed(), result is only bool
[17:24:40] *** Quits: sheldon__ (~sheldon@user/sheldon) (Ping timeout: 252 seconds)
[17:24:42] *** Quits: mikoto-c1 (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Quit: mikoto-c1)
[17:26:45] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:30:44] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Ping timeout: 250 seconds)
[17:30:45] *** Joins: sheldon_ (~sheldon@user/sheldon)
[17:30:53] *** Joins: burningserenity (~burningse@102.129.152.100)
[17:31:09] *** Joins: mikoto-c1 (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[17:32:17] *** Quits: sheldon (~sheldon@user/sheldon) (Read error: Connection reset by peer)
[17:32:54] *** Joins: oxum (~oxum@122.172.205.112)
[17:33:21] *** Joins: sheldon (~sheldon@user/sheldon)
[17:33:21] *** Quits: sheldon (~sheldon@user/sheldon) (Client Quit)
[17:35:07] *** Quits: sheldon_ (~sheldon@user/sheldon) (Ping timeout: 240 seconds)
[17:35:10] *** Joins: gggpkm_ (~gggpkm@60.10.194.43)
[17:36:51] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[17:37:47] *** Quits: oxum (~oxum@122.172.205.112) (Ping timeout: 250 seconds)
[17:37:52] *** Quits: gggpkm (~gggpkm@111.63.14.115) (Ping timeout: 252 seconds)
[17:38:32] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 250 seconds)
[17:41:18] *** Quits: deniska (~denis@user/deniska) (Remote host closed the connection)
[17:41:28] *** Joins: deniska (~denis@user/deniska)
[17:45:00] <A_Dragon> I tend to use `IsXXX` when Im looking for a bool value
[17:45:15] <aram> the former
[17:45:48] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:64af:236c:94c0:6372)
[17:51:18] <MrElendig> Allowed is ambigious
[17:51:29] <moldorcoder7> thinkofher, https://stackoverflow.com/questions/20935005/go-idiomatic-way-to-name-boolean-predicate-functions
[17:51:35] <moldorcoder7> apparently go use is itself
[17:51:49] <MrElendig> does it check if something is allowed, or does it set the status to allowed?
[17:52:53] <thinkofher> it checks if something is allowed
[17:55:18] *** Quits: frost (~frost@59.71.240.119) (Quit: Connection closed)
[17:56:16] *** Joins: gggpkm (~gggpkm@111.63.14.115)
[17:57:29] *** Quits: gggpkm_ (~gggpkm@60.10.194.43) (Ping timeout: 248 seconds)
[18:04:34] *** Joins: stmuk (~steve@15.43.187.81.in-addr.arpa)
[18:06:46] *** Quits: aman (~aman@user/aman) (Quit: aman)
[18:08:09] *** Joins: burningserenity_ (~burningse@142-196-178-216.res.spectrum.com)
[18:09:07] *** Quits: burningserenity (~burningse@102.129.152.100) (Ping timeout: 240 seconds)
[18:10:19] *** Joins: CoolerX (~CoolerX@user/coolerx)
[18:12:42] *** Joins: emcconville (~emcconvil@c-98-222-200-8.hsd1.in.comcast.net)
[18:15:52] *** Joins: gggpkm_ (~gggpkm@222.128.56.240)
[18:16:16] *** Quits: gggpkm (~gggpkm@111.63.14.115) (Read error: Connection reset by peer)
[18:16:25] *** Quits: jespada (~jespada@90.254.245.194) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:16:40] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[18:17:02] *** Joins: c10l (~c10l@89.34.167.207)
[18:17:15] *** Joins: jespada (~jespada@90.254.245.194)
[18:21:33] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[18:23:24] <dyeplexer> moldorcoder7: okay
[18:24:07] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 240 seconds)
[18:33:31] <siXy> dyeplexer: what does go versdion say?
[18:33:49] <siXy> go version*
[18:34:08] *** Joins: khyr0n (~khyr0n@2806:2f0:9260:e17b:8c10:d579:6fb:d3b4)
[18:34:15] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-7-253.prtc.net)
[18:35:45] <siXy> dyeplexer: My guess is that either because of something you did, or some insane distro choice, you're using gollvm, which has different assembler syntax and probably won't work for this.
[18:37:10] *** Joins: aman (~aman@user/aman)
[18:37:22] <dyeplexer> siXy: go version go1.12.2 gccgo (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0 linux/amd64
[18:37:35] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[18:37:56] <siXy> Ah yeah using gccgo would also have the same problem.
[18:38:06] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[18:38:07] <dyeplexer> I'll try switching to golang-go instead
[18:38:09] <dyeplexer> then
[18:40:51] <moldorcoder7> dyeplexer, gccgo is no go
[18:41:20] <dyeplexer> ok let's go
[18:47:42] *** Joins: gggp (~textual@60.10.194.43)
[18:48:03] *** Quits: gggp (~textual@60.10.194.43) (Client Quit)
[18:48:26] *** Joins: oxum (~oxum@122.172.205.112)
[18:48:59] *** Joins: azidhaka (~azidhaka@user/azidhaka)
[18:50:59] <dyeplexer> everything works now. thanks
[18:51:25] *** Quits: halden (~halden@lden.im) (Read error: Connection reset by peer)
[18:51:47] <siXy> I'm kind of surprised that ubuntu continues to maintain gccgo
[18:54:19] *** Joins: halden (~halden@lden.im)
[18:54:33] *** Quits: oxum (~oxum@122.172.205.112) (Ping timeout: 248 seconds)
[18:55:15] <dyeplexer> was it dropped a while back?
[18:57:17] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[18:57:36] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[18:59:36] <siXy> In early versions it was sometimes useful. I'm not aware of any reason to use it nowadays, and I wouldn't expect any package maintainers to test against that implementation.
[19:00:07] <Tv_> it had more cpu architecture support, like if you wanted go-on-old-embedded-gadget
[19:00:21] <siXy> IIRC it was faster at one point, too
[19:00:29] <siXy> faster as in runtime faster.
[19:01:10] *** Quits: azidhaka (~azidhaka@user/azidhaka) (Quit: azidhaka)
[19:01:20] <Tv_> but afaik most of that arch need went away when the main go compiler got mips support
[19:03:47] *** Quits: burningserenity_ (~burningse@142-196-178-216.res.spectrum.com) (Ping timeout: 240 seconds)
[19:06:37] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[19:06:46] *** Joins: edrocks (~Ed@user/edrocks)
[19:07:00] <dyeplexer> i see
[19:08:54] *** Joins: fikran (~fikran@user/fikran)
[19:09:32] *** Joins: toddf (~todd@gateway/tor-sasl/toddf)
[19:12:27] *** Joins: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net)
[19:13:07] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1006)
[19:14:09] *** Joins: oxum (~oxum@122.172.205.112)
[19:16:58] *** Quits: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[19:17:04] *** Joins: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de)
[19:17:27] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1006) (Ping timeout: 250 seconds)
[19:17:50] *** Joins: Giedrius (~giedrius@88.118.79.243)
[19:18:20] *** Joins: burningserenity (~burningse@2603-9001-0f01-ad99-0000-0000-0000-1006.inf6.spectrum.com)
[19:19:11] *** Quits: oxum (~oxum@122.172.205.112) (Ping timeout: 250 seconds)
[19:19:18] *** Joins: lidenbrock (~lidenbroc@2804:14c:32:8120:1021:480d:c5d8:afa)
[19:20:24] *** Joins: Giedrius_ (~giedrius@5.133.65.65)
[19:22:05] *** Quits: lidenbrock (~lidenbroc@2804:14c:32:8120:1021:480d:c5d8:afa) (Client Quit)
[19:22:34] *** Joins: enkeyz (~enkeyz@user/enkeyz)
[19:22:47] *** Quits: Giedrius (~giedrius@88.118.79.243) (Ping timeout: 240 seconds)
[19:23:07] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-7-253.prtc.net) (Ping timeout: 246 seconds)
[19:25:43] *** Quits: kmerfeld (~kmerfeld@2600:1700:8c31:a00:dea6:32ff:fe93:748) (Remote host closed the connection)
[19:26:12] *** Joins: kmerfeld (~kmerfeld@2600:1700:8c31:a00:dea6:32ff:fe93:748)
[19:28:58] *** Quits: Jigsy (~Jigsy@user/jigsy) (Ping timeout: 252 seconds)
[19:29:07] *** Joins: sizeof_void34 (~Thunderbi@109-252-75-112.nat.spd-mgts.ru)
[19:30:14] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:64af:236c:94c0:6372) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[19:35:01] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 252 seconds)
[19:35:45] *** Joins: Jigsy (~Jigsy@user/jigsy)
[19:44:14] *** Joins: ztx (~ztx@user/ztx)
[19:45:06] *** Joins: gggpkm (~gggpkm@111.63.14.115)
[19:45:32] *** Joins: pombreda_ (sid227801@id-227801.tinside.irccloud.com)
[19:45:33] *** Joins: codebam (~codebam@user/codebam)
[19:46:27] *** Quits: gggpkm_ (~gggpkm@222.128.56.240) (Ping timeout: 240 seconds)
[19:49:54] *** Quits: aman (~aman@user/aman) (Quit: aman)
[19:54:26] *** Quits: pombreda_ (sid227801@id-227801.tinside.irccloud.com) ()
[19:54:50] *** Joins: pombreda_ (sid227801@id-227801.tinside.irccloud.com)
[19:57:05] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:64af:236c:94c0:6372)
[19:58:14] *** Joins: PinealGlandOptic (~PinealGla@37.115.210.35)
[20:01:50] *** Parts: pombreda_ (sid227801@id-227801.tinside.irccloud.com) ()
[20:05:10] *** Quits: Giedrius_ (~giedrius@5.133.65.65) (Ping timeout: 240 seconds)
[20:05:41] *** Quits: Torr (~Torr@user/torr) (Remote host closed the connection)
[20:06:02] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[20:07:30] *** Joins: user217_ (~andrii@195.138.71.41)
[20:12:34] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:14:19] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[20:15:36] *** Joins: Torr (~Torr@user/torr)
[20:17:44] *** Joins: pombreda (sid227801@id-227801.tinside.irccloud.com)
[20:19:56] <pombreda> Hiya :) I just chatted with someone asserting that a go.sum is not enough to get the list of all direct and indirect module deps of a project at full depth... It felt weird and wrong. Is this the case?
[20:20:45] *** Quits: independent56 (~independe@51.158.144.32) (Read error: Connection reset by peer)
[20:20:54] *** Joins: independent56 (~independe@95.144.68.39)
[20:22:10] *** Joins: oxum (~oxum@122.172.205.112)
[20:24:31] *** Quits: gggpkm (~gggpkm@111.63.14.115) (Ping timeout: 252 seconds)
[20:25:09] <lilgopher> where should be the main types of an API(busiiness types?) defined? I thought it was a good practice to use a "model" or "core" package for it, but I just found this https://rakyll.org/style-packages/ that says otherwise, in the section "Organize by responsibility
[20:25:09] <lilgopher> " it says they should live in a service-layer package, which I have no idea what it means
[20:26:11] <edrocks> lilgopher if you are making a web app or similar you should really just separate your http handlers and any actual business code/db management
[20:26:21] *** Quits: kodah (~kodah@user/kodah) (Ping timeout: 250 seconds)
[20:26:21] <lilgopher> yeah, I agree
[20:26:29] <lilgopher> but where to define the business types?
[20:26:49] <edrocks> ie have an http handlers package under say `app/*` and have actual code to mess with things under `someexample`
[20:27:35] <edrocks> put your business types in someexample
[20:27:40] <lilgopher> what i have been doing is "internal/model" for main types and "handler/" for the handlers
[20:28:42] <shiroyasha> pombreda: https://golang.org/ref/mod#go-sum-files  "The go.sum file contains cryptographic hashes of the module’s direct and indirect dependencies."
[20:28:50] <edrocks> lilgopher something like this https://play.golang.org/p/DYgbWGxiKXZ
[20:29:06] <edrocks> i prefer to separate into concepts like orders, invoices, fulfillments, etc
[20:29:19] <edrocks> depends how big the project is though
[20:29:49] <edrocks> sometimes you can just dump it all into a single package if it's very small but it's always a good idea to have at least one business package and one package to wrap that into an http handler
[20:30:48] <edrocks> this lets you make tools reusing the business package without having to rewrite everything. It also lets you build new http handlers on top of your business package doing multiple things
[20:31:11] *** Quits: edrocks (~Ed@user/edrocks) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:31:31] *** Joins: menace (~someone@ppp-93-104-160-204.dynamic.mnet-online.de)
[20:31:51] *** Quits: menace (~someone@ppp-93-104-160-204.dynamic.mnet-online.de) (Changing host)
[20:31:51] *** Joins: menace (~someone@user/menace)
[20:31:55] *** menace is now known as Deknos
[20:32:12] *** Quits: oxum (~oxum@122.172.205.112) (Remote host closed the connection)
[20:32:43] *** Joins: oxum (~oxum@122.172.205.112)
[20:32:44] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-7-198.prtc.net)
[20:34:54] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Quit: Leaving)
[20:35:48] <lilgopher> hmmm, I will have to think bout this, maybe I will bring an example and mention you later edrocks
[20:37:34] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[20:37:47] *** Quits: user217_ (~andrii@195.138.71.41) (Ping timeout: 240 seconds)
[20:38:13] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[20:40:04] *** Quits: mjorgensen (mjorgensen@2600:3c00::f03c:92ff:fe80:1ccc) (Quit: ZNC 1.8.2 - https://znc.in)
[20:40:17] *** Joins: mjorgensen (mjorgensen@2600:3c00::f03c:92ff:fe80:1ccc)
[20:42:26] *** Quits: oxum (~oxum@122.172.205.112) (Remote host closed the connection)
[20:43:05] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[20:44:04] *** Joins: oxum (~oxum@122.172.205.112)
[20:44:43] *** Quits: saschagrunert (~saschagru@46.128.124.113) (Remote host closed the connection)
[20:48:44] *** Quits: absc (~absc@dynamic-adsl-94-34-168-146.clienti.tiscali.it) (Quit: Leaving.)
[20:49:15] *** Quits: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz) (Quit: Leaving)
[20:51:35] *** Quits: yoonkn (~user@175.197.208.79) (Read error: Connection reset by peer)
[20:51:58] <Tv_> lilgopher: https://www.gobeyond.dev/standard-package-layout/
[21:01:07] <pombreda> shiroyasha: yes, that's my understanding: it should contains a complete list of these with checksums at full depth. That person claiming otherwise had likely smoken something altering judgment :P
[21:01:44] <lilgopher> Tv_ I dont think I understand that article, I still dont have clear the structure of the project after reading that twice
[21:02:21] <lilgopher> I understand the code they provide, tho, but they dont provide a layout example
[21:04:23] *** Joins: adanwan_ (~adanwan@gateway/tor-sasl/adanwan)
[21:05:10] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 244 seconds)
[21:10:11] <lilgopher> if the name of the project of that example is "myapp" and they define a package named "myapp" as a root package, where is that package located?
[21:11:00] <Tv_> that sounds like the toplevel package
[21:11:29] <lilgopher> yeah but I dont understand, are those go files just in the root level?
[21:12:14] <Tv_> you just said root package.. what's hard about that?
[21:12:23] <lilgopher> for example you would have myapp/docker-compose.yml and right next to it myapp/user.go?
[21:12:47] <lilgopher> and a lot of other go files in there?
[21:15:00] <lilgopher> customers.go accounts.go, etc in the root directory?
[21:15:07] *** Quits: mikoto-c1 (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 252 seconds)
[21:15:36] *** Quits: enkeyz (~enkeyz@user/enkeyz) (Quit: WeeChat 3.2)
[21:16:11] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[21:16:24] <Tv_> yes, a Go package can contain multiple files
[21:18:20] *** Joins: fikran (~fikran@user/fikran)
[21:18:25] <lilgopher> I know, I'm just surprissed I guess
[21:18:44] *** Joins: freakazoid333 (~matt@2603:9000:cf0f:80e3:7de2:7b10:e7c:18ed)
[21:19:50] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Quit: mikoto-chan)
[21:20:16] *** Quits: oxum (~oxum@122.172.205.112) (Remote host closed the connection)
[21:20:25] *** Quits: mattypants (~quassel@66-90-146-141.dyn.grandenetworks.net) (Ping timeout: 258 seconds)
[21:20:50] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 250 seconds)
[21:20:56] *** Joins: oxum (~oxum@122.172.205.112)
[21:22:21] *** Joins: nutzz (~nutzz@2001:420:c0c8:1005::766)
[21:25:26] *** Joins: jpw (~jpw@user/jpw)
[21:26:09] *** Quits: oxum (~oxum@122.172.205.112) (Remote host closed the connection)
[21:26:10] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-7-198.prtc.net) (Quit: Client closed)
[21:27:49] *** Joins: oxum (~oxum@122.172.205.112)
[21:29:43] <lilgopher> the mock package they mention in the article is nice
[21:31:55] *** Quits: oxum (~oxum@122.172.205.112) (Remote host closed the connection)
[21:32:17] *** Joins: oxum (~oxum@122.172.205.112)
[21:32:33] <Tv_> quoting the article: "[...] I personally prefer to just write them myself. I find many of the mocking tools to be overly complicated."
[21:34:01] *** Quits: tedwing (~anon@lfbn-idf3-1-1409-99.w109-221.abo.wanadoo.fr) (Quit: leaving)
[21:41:38] *** Quits: oxum (~oxum@122.172.205.112) (Remote host closed the connection)
[21:42:06] *** Joins: oxum (~oxum@122.172.205.112)
[21:47:23] *** Joins: codebam (~codebam@user/codebam)
[21:55:05] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[21:55:18] *** Joins: Snyp (~textual@49.207.225.119)
[21:56:26] *** Quits: Snyp (~textual@49.207.225.119) (Client Quit)
[21:56:50] *** Joins: Snyp (~Snyp@49.207.225.119)
[21:58:51] *** Quits: oxum (~oxum@122.172.205.112) (Remote host closed the connection)
[21:59:04] *** Joins: oxum (~oxum@122.172.205.112)
[22:00:24] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[22:02:13] *** Joins: jpw_ (~jpw@user/jpw)
[22:04:40] *** Quits: jpw (~jpw@user/jpw) (Ping timeout: 240 seconds)
[22:06:25] *** Joins: be3uykpy (~be3uykpy@2a00:a040:19a:b060:71c3:5b96:6cbf:a036)
[22:08:32] *** jpw_ is now known as jpw
[22:08:47] *** Quits: theoceaniscool (~theoceani@213.94.16.93) (Ping timeout: 240 seconds)
[22:11:08] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[22:11:47] *** Joins: Scarecr0w (scarecr0w@user/scarecr0w)
[22:17:13] *** Joins: kulak (~kulak@user/kulak)
[22:17:32] *** Joins: theoceaniscool (~theoceani@213.94.16.93)
[22:18:13] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[22:19:41] *** Joins: zwr (~zwr@2804:d45:b966:fb00:2dfa:2a8a:57b4:4d35)
[22:27:06] *** Quits: acid (~acid@user/acid) (Remote host closed the connection)
[22:31:35] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-58c384-213.dhcp.inet.fi) (Ping timeout: 250 seconds)
[22:42:57] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[22:43:47] *** Quits: be3uykpy (~be3uykpy@2a00:a040:19a:b060:71c3:5b96:6cbf:a036) (Ping timeout: 240 seconds)
[22:45:33] *** Quits: oxum (~oxum@122.172.205.112) (Quit: Leaving...)
[22:46:45] *** Joins: oxum (~oxum@122.172.205.112)
[22:48:29] *** Joins: kulak (~kulak@user/kulak)
[22:49:31] *** Quits: oxum (~oxum@122.172.205.112) (Remote host closed the connection)
[22:51:21] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[22:51:34] *** Quits: Snyp (~Snyp@49.207.225.119) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:53:10] *** Quits: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[22:56:13] *** Joins: jpw_ (~jpw@user/jpw)
[22:56:19] *** Joins: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de)
[22:59:32] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[22:59:47] *** Quits: jpw (~jpw@user/jpw) (Ping timeout: 240 seconds)
[23:00:52] *** Joins: kulak (~kulak@user/kulak)
[23:02:42] *** Joins: edrocks (~Ed@user/edrocks)
[23:02:54] *** Quits: novns (~novns@user/novns) (Quit: ZNC 1.8.2 - https://znc.in)
[23:03:46] *** Joins: novns (~novns@user/novns)
[23:04:54] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[23:05:23] *** Quits: kulak (~kulak@user/kulak) (Ping timeout: 250 seconds)
[23:07:41] *** Quits: nutzz (~nutzz@2001:420:c0c8:1005::766) (Quit: Client closed)
[23:08:05] *** Joins: kulak (~kulak@user/kulak)
[23:10:40] *** Quits: burningserenity (~burningse@2603-9001-0f01-ad99-0000-0000-0000-1006.inf6.spectrum.com) (Ping timeout: 240 seconds)
[23:11:52] *** Joins: burningserenity (~burningse@102.129.153.88)
[23:11:52] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:64af:236c:94c0:6372) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[23:25:29] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 248 seconds)
[23:27:43] *** Joins: fikran (~fikran@user/fikran)
[23:30:05] *** Quits: mei (~mei@user/mei) (Ping timeout: 250 seconds)
[23:31:53] *** Quits: Deknos (~someone@user/menace) (Ping timeout: 248 seconds)
[23:33:08] *** Joins: hamoko (~hamokomat@2001:470:69fc:105::e218)
[23:38:25] *** Joins: wim (~wim@42.be)
[23:44:06] *** Quits: toddf (~todd@gateway/tor-sasl/toddf) (Quit: leaving)
[23:44:07] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 240 seconds)
[23:45:41] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 250 seconds)
[23:47:41] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Remote host closed the connection)
[23:47:49] *** Joins: mrig (~mrig@user/mrig)
[23:48:07] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[23:48:37] *** Quits: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (Quit: ZNC 1.8.2 - https://znc.in)
[23:49:20] *** Quits: hamoko (~hamokomat@2001:470:69fc:105::e218) (Quit: Reconnecting)
[23:49:32] *** Joins: hamoko (~hamoko@2001:470:69fc:105::e218)
[23:49:53] *** Joins: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net)
[23:55:48] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[23:56:57] *** Quits: burningserenity (~burningse@102.129.153.88) (Ping timeout: 248 seconds)
[23:57:14] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1006)
