[00:00:19] *** Joins: molt (~molt@79.140.150.21)
[00:00:55] *** Quits: lemonzest (~lemonzest@user/lemonzest) (Quit: Quitting)
[00:07:55] *** Quits: minimal (~minimal@user/minimal) (Quit: Leaving)
[00:15:38] *** Quits: mohabaks (~mohabaks@gateway/tor-sasl/mohabaks) (Ping timeout: 244 seconds)
[00:20:42] <Lutin> jochum oh sexy cluster :D
[00:24:01] <Lutin> I'm trying to figure out where the first part of a named volume is taken from...any idea ?
[00:24:33] <Lutin> like service_ or so but when I change the service name in the yml it doesn't change it in front of the named volume
[00:25:05] <tabakhase> parent dir / -P / COMPOSE_PROJECT_NAME env
[00:25:35] *** Quits: VaniaPy (~VaniaPy@79.103.24.224.dsl.dyn.forthnet.gr) (Quit: Connection closed)
[00:26:16] <Lutin> tabakhase aha! then my naming is so good... that I couldn't even figure it out... it was alrwdy perfect :)
[00:26:20] <Lutin> thanks!
[00:26:31] * Lutin hands tabakhase a Havana
[00:36:12] *** Quits: ses (uid38151@stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[00:39:06] <Lutin> tabakhase don't put weed in it
[00:41:04] *** Joins: Enissay (~Enissay@user/enissay)
[00:45:09] *** Quits: Haxxa (~Haxxa@122.199.45.186) (Quit: Haxxa flies away.)
[00:46:07] *** Joins: Haxxa (~Haxxa@122.199.45.186)
[00:58:52] *** Quits: mei (~mei@user/mei) (Ping timeout: 245 seconds)
[01:01:24] *** Joins: vidbina_ (~vid@dynamic-078-054-135-042.78.54.pool.telefonica.de)
[01:12:53] *** Quits: jimmyb (~jimmyb@user/jimmyb) (Quit: The Lounge - https://thelounge.chat)
[01:13:30] *** Joins: jimmyb (~jimmyb@user/jimmyb)
[01:23:02] *** Joins: Kobboi (~christoph@2a02:a03f:847d:9b00:54be:b4af:d33d:ea0d)
[01:23:19] <Kobboi> is there a way to name the container that is used for building an image with docker build?
[01:28:18] <tabakhase> Kobboi usecase? and "no..."
[01:30:16] <Kobboi> I am building several containers that take a few hours to build, I want to easily keep track of them and when one of them fails, I want to see which one failed immediately
[01:30:22] *** Joins: idego (idego@user/idego)
[01:30:54] <Kobboi> I guess "inspect" could help, but still, would have been nice
[01:31:22] <Kobboi> I just did a "docker container rename", which I guess is good enough, but for the extra work
[01:34:40] <Lutin> I have something strange with swarm join... when I setup ufw and I allow al traffic on my internal interface for cluster subnet it seems that it fails on join, adding nodes twice to the Manage Address list 
[01:34:55] <Lutin> I wonder why that happens, it also not removes well on a leave
[01:39:54] *** Joins: pvdp (~Pieter@static-n58-105-183-94.rdl4.qld.optusnet.com.au)
[01:46:46] *** Joins: mthall (~quassel@2a01:4f9:4a:2f4d:ecb0:6aff:fed2:c9a1)
[01:50:49] <Kobboi> tabakhase: in general, i would expect most if not all "docker run" options to be available in "docker build"
[01:50:56] <Kobboi> why can't I build in detached mode for example
[01:53:20] <tabakhase> in some sense that a good question... - in another it doesnt make much sense for like 99% :/
[01:54:50] <tabakhase> and buildkit/buildx kinda "started to allow some things" with the "RUN --opt command" pattern
[01:55:41] <tabakhase> well, not even some, think its just --mount | stuffing a --name with in there could be somewhat reasonable i guess
[02:00:05] *** Parts: idego (idego@user/idego) (thanks)
[02:00:56] *** Joins: thiras (~thiras@user/thiras)
[02:07:30] <Lutin> mhh I think I found it... it was already messed up because of FW changes before
[02:14:02] <Lutin> Kobboi name the container that is used ? yes you can 
[02:14:05] <Lutin> tabakhase he can
[02:16:59] <dostoyevsky2> In my wine based containers I would like to be able to use x11 programs while building a container, so I could install a windows app that might want to pop up a window... but I actually solved this with static volumes and installing the software by hand, once to container is built
[02:21:06] <Kobboi> Lutin: keep talking ;) how do I name the container?
[02:21:30] *** Joins: locrian9 (~mike@cpe-104-173-20-162.socal.res.rr.com)
[02:21:37] <Lutin> Kobboi there is an option in the build command
[02:21:51] <Lutin> can't check it at the moment but I use it as well
[02:24:28] <Kobboi> Lutin: well I didn't find it in online doc, nor man pages, nor --help, but maybe I missed it three times
[02:25:10] <Lutin> Kobboi then google... I use it in my buildscript otherwise I cannot remove them
[02:25:47] <Kobboi> Lutin: what is this "google" you speak of
[02:26:06] <Lutin> are you serious 
[02:26:10] <Lutin> ?
[02:26:21] <Kobboi> no, are you serious to think that I did not google?
[02:31:11] <Lutin> Kobboi google harder, I can't check it right now... sorry... we all have difficult days finding things :)
[02:31:36] <tabakhase> Lutin na thats on you to deliver :P
[02:32:29] <Lutin> tabakhase if I could I would :)
[02:33:04] <tabakhase> sick backpedaling move you got there :D
[02:46:16] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Quit: Ping timeout (120 seconds))
[02:47:03] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[02:52:05] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[02:52:28] *** Joins: flynn (~mcbloch@user/flynn)
[03:05:01] *** Quits: DoofusCanadensis (~DoofusCan@2604:3d09:47c:f970:206b:36a9:2ccb:4d1b) (Quit: So long, suckers)
[03:06:57] <Lutin> tabakhase yeah.. sometimes
[03:07:32] <Lutin> when having a swarm should every docker_gwbridge interface have a different IP in that same subnet ?
[03:07:36] <Lutin> it's vague
[03:08:25] <Lutin>  because all defaut to the same .1 in the /24
[03:08:29] <Lutin> so all nodes
[03:10:17] *** Quits: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net) (Remote host closed the connection)
[03:10:27] <Lutin> or it does not remove on a leave and should get overwritten (normally) on a join
[03:12:42] *** Quits: vidbina_ (~vid@dynamic-078-054-135-042.78.54.pool.telefonica.de) (Ping timeout: 256 seconds)
[03:21:45] <Lutin> tabakhase ever seen this on a swarm cluster when creating a network ? Error response from daemon: This node is not a swarm manager. Use "docker swarm init" or "docker swarm join" to connect this node to swarm and try again.
[03:36:39] *** Joins: Bardon_ (~Bardon@user/Bardon)
[03:38:54] *** Quits: Bardon (~Bardon@user/Bardon) (Ping timeout: 272 seconds)
[03:47:33] *** Quits: securethemews (~securethe@5.80.55.13) (Quit: Leaving)
[03:49:16] *** Joins: harpia (~harpia@58.148.205.168.dynamic.vibefibra.com.br)
[03:50:07] *** Quits: Kobboi (~christoph@2a02:a03f:847d:9b00:54be:b4af:d33d:ea0d) (Ping timeout: 245 seconds)
[04:03:31] <matthewcroughan> Has anybody got any examples of pure from scratch images?
[04:03:42] <matthewcroughan> I can't find any from scratch images that don't just copy binaries in from outside.
[04:05:32] *** Quits: Bardon_ (~Bardon@user/Bardon) (Ping timeout: 245 seconds)
[04:06:16] *** Joins: Bardon (~Bardon@user/Bardon)
[04:24:50] *** Joins: Davidian1024 (~Davidian1@d14-69-248-209.try.wideopenwest.com)
[04:26:38] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 258 seconds)
[04:28:52] *** Joins: Bardon_ (~Bardon@user/Bardon)
[04:29:54] *** Quits: Bardon (~Bardon@user/Bardon) (Ping timeout: 252 seconds)
[04:34:47] *** Quits: locrian9 (~mike@cpe-104-173-20-162.socal.res.rr.com) (Quit: leaving)
[04:36:08] <zoredache> matthewcroughan: that is more or less what a scratch image is.  It copies in an image in from outside
[04:36:22] <matthewcroughan> Makes sense the more I'm digging in, yeah.
[04:36:28] <zoredache> matthewcroughan: though you might find lots of multi-stage builds.
[04:36:52] <matthewcroughan> What I want is a FROM scratch which brings in GCC then uses it to compile hello world
[04:37:25] <zoredache> That will build the binary in the first stage using something like alpine, or some common language image, builds the binary as static, then the final stage copies the binary from the build stage
[04:37:40] <matthewcroughan> No, because `apk` is non-deterministic and not reproducible.
[04:38:06] <matthewcroughan> so I want to eliminate all of the possibilities and provide a precompiled gcc that can be used to prove/disprove the determinism of gcc itself.
[04:38:41] <zoredache> matthewcroughan: I know Debian-based images allow you to point at a specific point in time view of the repository
[04:39:23] <matthewcroughan> yeah, but are you sure if you were to `build` those Dockerfiles again your final layer would have the same hash?
[04:39:30] <matthewcroughan> Can you link me to the repo you're talking about?
[04:39:33] <matthewcroughan> Sounds interesting :D
[04:39:44] <zoredache> So just pull something like debian:buster-slim
[04:39:59] <zoredache> you will see a commented out like in the sources.list like `http://snapshot.debian.org/archive/debian/20210511T000000Z buster ...`
[04:40:09] <matthewcroughan> yeah, it's a snapshot, you can't reproduce the layer
[04:40:12] <matthewcroughan> the layer is unreproducible
[04:40:30] <matthewcroughan> reproducible means that the hash of the layer would be the same, but the builds are not deterministic/reproducible, they're snapshots only 
[04:40:55] <zoredache> I mean if you take the exact same packages, shouldn't it be the same?
[04:41:00] <zoredache> I have never tested.
[04:41:18] <matthewcroughan> nope, it's a funny thing :D
[04:41:19] <zoredache> Never really been worried about reproducible to that level
[04:41:25] <matthewcroughan> But impurity/unreproducibility exists everywhere.
[04:41:41] <matthewcroughan> There's only one system I know of which fixes this, outright, Nix.
[04:42:06] <matthewcroughan> And it can only be so perfect, the thesis mentions a few flaws, but it's the only system that even tries, that I'm aware of.
[04:42:49] <matthewcroughan> Even the tar format is unreproducible, because when you run it on a set of files, it'll pack them differently.
[04:43:38] <zoredache> Never seen/tried Nix. But are there any docker images based off nix?
[04:43:41] <matthewcroughan> So Nix went ahead and made its 'NAR' archive format which fixes that. https://github.com/ebkalderon/libnar
[04:43:56] <matthewcroughan> zoredache: Not Docker images, just OCI images, since container images are a standard format.
[04:44:16] <matthewcroughan> So you can consider Nix as an alternative to moby/buildkit. https://github.com/moby/buildkit
[04:44:54] <matthewcroughan> Nix has dockerTools (inappropriately named imo) that provides a set of functions which let you create reproducible OCI images that do have the same hash for each layer every time guaranteed.
[04:58:29] <matthewcroughan> How is the GCC container built? Woah..
[04:58:30] <matthewcroughan> https://hub.docker.com/_/gcc?tab=tags&page=1&ordering=last_updated
[04:58:36] <matthewcroughan> it has a lot of layers!
[04:58:39] *** Quits: Atum_ (~IRC@user/atum/x-2392232) (Quit: Atum_)
[05:00:00] <jochum> fearnothing: you need some sort of communication?
[05:00:12] <jochum> ups didn't scrolldown all the way
[05:06:31] <Lutin> jochum oh my friend, sexy today ?
[05:08:44] *** Joins: m1n10n (georgecloo@cpe-76-184-204-251.tx.res.rr.com)
[05:17:26] *** Joins: saunders (~nicholas@172.103.152.166)
[05:19:17] <kevr> How do I put a max disk usage on docker?
[05:23:05] <kevr> I'm on Ubuntu 20.10. Now I'm getting this error when trying to build a docker image: `failed to create rwlayer: open /var/lib/docker/overlay2/3d877d3598e4354d860f20a083b62a4159b1ce5eb4f4edfd390def42ae9fc7f4/committed`.
[05:23:21] <kevr> I tried running `apt-get install --reinstall docker-ce`, which succeeded, but this issue persists. How should I address this?
[05:23:36] *** Quits: harpia (~harpia@58.148.205.168.dynamic.vibefibra.com.br) (Quit: Leaving)
[05:23:39] <kevr> (i wiped out /var/lib/docker/overlay2 previously)
[05:29:27] *** Joins: Jimmy_H (~Jimmy_H@119.136.154.187)
[05:29:57] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[05:30:20] *** Joins: flynn (~mcbloch@user/flynn)
[05:30:27] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:30:39] <BtbN> docker system prune will clean up unused cruft
[05:30:57] <BtbN> other than that, you need to take care of not filling up your disk yourself
[05:34:56] *** Quits: greatgatsby (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-7.dsl.bell.ca) (Quit: Leaving)
[05:36:26] *** Quits: Jimmy_H (~Jimmy_H@119.136.154.187) (Read error: Connection reset by peer)
[05:42:05] <Lutin> BtbN which is sometimes a challenge ;D
[05:53:53] *** Joins: vlm (~vlm@user/vlm)
[05:55:46] *** Joins: catbehemoth (~vasyl@bras-base-lnglpq6100w-grc-16-206-172-248-225.dsl.bell.ca)
[05:58:17] *** Quits: cim (~cim@205.185.117.110) (Quit: The Lounge - https://thelounge.chat)
[05:58:50] *** Joins: cim (~cim@205.185.117.110)
[06:01:53] *** Quits: goldfish_ (~goldfish@user/goldfish) (Remote host closed the connection)
[06:25:57] *** Quits: m1n10n (georgecloo@cpe-76-184-204-251.tx.res.rr.com) (Remote host closed the connection)
[06:53:09] *** Quits: momomo (~momomo@user/momomo) (Ping timeout: 276 seconds)
[07:02:39] *** Quits: Nightah (~Nightah@user/nightah) (Quit: ZNC - https://znc.in)
[07:07:28] *** Quits: catbehemoth (~vasyl@bras-base-lnglpq6100w-grc-16-206-172-248-225.dsl.bell.ca) (Quit: WeeChat 3.2)
[07:08:19] <matthewcroughan> I'm doing some reproducibility tests, and I'm really curious about what I have found.
[07:08:31] *** Joins: locrian9 (~mike@cpe-23-240-34-32.socal.res.rr.com)
[07:08:49] <matthewcroughan> the difference between docker pull hello-world and docker build on https://github.com/docker-library/hello-world/tree/master/amd64/hello-world is that the permissions of the hello binary are different, along with timestamp.
[07:09:11] <matthewcroughan> I would like to know how the permissions of the binary in the two layers differ
[07:09:31] *** Joins: Nightah (~Nightah@user/nightah)
[07:10:20] <matthewcroughan> https://pastebin.com/raw/Zsz8vPw0
[07:10:58] <matthewcroughan> so bizarre!
[07:15:03] *** Quits: Lutin (~Lutin@user/lutin) (Quit: Lutin)
[07:29:26] <jochum> matthewcroughan: somehow the umask changed, yes.
[07:29:53] <jochum> matthewcroughan: if you realy want to know why, build hello-world with exact the same base-image and see difference
[07:31:10] <matthewcroughan> jochum: ? There is no base image, it's from scratch
[07:33:12] <jochum> matthewcroughan: I'm sorry, I look deeper into it.
[07:33:45] <matthewcroughan> it's quite an interesting difference, I wonder what causes it
[07:33:47] <matthewcroughan> is it the host?
[07:42:08] <jochum> matthewcroughan: In my findings hello has in the container the same permissions as in git
[07:43:31] <jochum> matthewcroughan: maybe you know more, this is what I did: git clone hello-world; cd amd64/..../; docker build . -f ./Dockerfile; docker run -it <image-sha> /hello; find /var/lib/docker . -type f -executable -name 'hello' exec ls -la {} \;
[07:44:33] <jochum> https://bpa.st/EXKA
[07:45:44] <matthewcroughan> jochum: and have you tried the same, but first `docker pull hello-world:latest`
[07:46:17] <matthewcroughan> actually, you can just `docker save hello-world:latest -o tarball.tar.gz`
[07:46:33] <matthewcroughan> extract that tarball, then extract the `layer.tar` that is somewhere within 
[07:46:52] <matthewcroughan> layer.tar will include the hello binary which should have the differing perms.
[07:47:09] <matthewcroughan> I mean, just run a diffoscope on the two layer.tars, that'll ensure that the permissions aren't as a result of extracting it on the host 
[07:47:12] <jochum> matthewcroughan: Id like to see whats on the disk :)
[07:47:19] <matthewcroughan> ?
[07:47:28] <jochum> matthewcroughan: can do an export
[07:49:59] <jochum> matthewcroughan: -rwxr-xr-x from the export
[07:50:13] <jochum> matthewcroughan: not sure thats what you want.
[07:50:37] <matthewcroughan> yeah I'm wondering why the layers would differ like this 
[07:50:46] <matthewcroughan> all you have to do is run a diffoscope on the layers.
[07:51:12] <jochum> nice one that is
[07:52:30] <matthewcroughan> I gotta sleep, so sorry if I don't reply!
[07:52:33] <matthewcroughan> Thanks for the help so far.
[07:52:39] <jochum> np
[07:53:59] *** Joins: HaMsTeRs (~mx@49.130.89.196)
[07:56:34] <jochum> matthewcroughan: from the exports i can confirm what you say
[08:27:54] *** Joins: me-sudoer-dentne (~me-sudoer@45.112.144.181)
[08:35:31] *** Quits: notsponsible (~notsponsi@45.144.113.73) (Quit: notsponsible)
[08:45:16] *** Quits: burrows (burrows@user/burrows) (Quit: Quitting)
[08:45:43] *** Joins: notsponsible (~notsponsi@45.144.113.73)
[08:46:43] *** Joins: burrows (burrows@user/burrows)
[08:56:24] *** Joins: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469)
[08:56:31] *** Joins: svm_invictvs_ (~svm_invic@user/svm-invictvs/x-6696469)
[08:56:41] *** Quits: svm_invictvs_ (~svm_invic@user/svm-invictvs/x-6696469) (Client Quit)
[09:01:03] *** Quits: terabyte (~terabyte@27.176-105-213.static.virginmediabusiness.co.uk) (Quit: Client closed)
[09:09:48] *** Quits: sebastianos (~sebastian@user/sebastianos) (Ping timeout: 268 seconds)
[09:17:27] *** Joins: sebastianos (~sebastian@user/sebastianos)
[09:23:38] *** Quits: locrian9 (~mike@cpe-23-240-34-32.socal.res.rr.com) (Quit: leaving)
[09:28:49] *** Quits: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469) (*.net *.split)
[09:28:50] *** Quits: vlm (~vlm@user/vlm) (*.net *.split)
[09:28:50] *** Quits: fspy (~fspy@user/fspy) (*.net *.split)
[09:28:50] *** Quits: DefiantN (~DefiantN@user/defiantn) (*.net *.split)
[09:28:50] *** Quits: swebb (~swebb@161.97.198.243) (*.net *.split)
[09:28:50] *** Quits: fmy_ (~fmy@60.53.118.121) (*.net *.split)
[09:28:50] *** Quits: ectospasm (~ectospasm@user/ectospasm) (*.net *.split)
[09:28:50] *** Quits: qilx (~quassel@62.201.21.8) (*.net *.split)
[09:28:50] *** Quits: BtbN (btbn@ffmpeg/developer/btbn) (*.net *.split)
[09:28:50] *** Quits: sa (sid1055@tinside.irccloud.com) (*.net *.split)
[09:28:50] *** Quits: weyhmueller (~weyhmuell@blofeld.nc.w9r.de) (*.net *.split)
[09:28:50] *** Quits: Flash (~Flash@user/flash) (*.net *.split)
[09:28:50] *** Quits: irrgit (~irrgit@192.241.175.183) (*.net *.split)
[09:28:50] *** Quits: ezekyel (~ezekyel@user/ezekyel) (*.net *.split)
[09:28:50] *** Quits: jjakob (~quassel@2a01:260:8028:10f0::62) (*.net *.split)
[09:28:50] *** Quits: yjftsjthsd (~yjftsjths@162.127.123.34.bc.googleusercontent.com) (*.net *.split)
[09:28:50] *** Quits: NeuroWinter (~NeuroWint@107.172.219.233) (*.net *.split)
[09:28:51] *** Quits: mattchis (~mattchis@c-73-243-45-46.hsd1.co.comcast.net) (*.net *.split)
[09:28:51] *** Quits: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius) (*.net *.split)
[09:28:51] *** Quits: ornxka (~ornxka@user/ornxka) (*.net *.split)
[09:28:51] *** Quits: SilverEagleDev (~SilverEag@azuracast/lead-developer/SilverEagleDev) (*.net *.split)
[09:28:51] *** Quits: xep (~xep@76-210-4-7.lightspeed.sntcca.sbcglobal.net) (*.net *.split)
[09:28:51] *** Quits: brooks (~bswinnert@containers.neptunenetworks.org) (*.net *.split)
[09:28:51] *** Quits: Milos (~Milos@user/milos) (*.net *.split)
[09:28:51] *** Quits: doc (~doc@user/doc) (*.net *.split)
[09:28:51] *** Quits: Keridos (~Keridos@ironhide.de) (*.net *.split)
[09:28:51] *** Quits: tabakhase (tabakhase@user/tabakhase) (*.net *.split)
[09:28:51] *** Quits: f0rs3ti (~f0rs3ti@pivpn/maintainer/f0rs3ti) (*.net *.split)
[09:28:51] *** Quits: tetrapod (~tetrapod@user/tetrapod) (*.net *.split)
[09:29:07] *** Joins: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469)
[09:29:07] *** Joins: vlm (~vlm@user/vlm)
[09:29:07] *** Joins: fspy (~fspy@user/fspy)
[09:29:07] *** Joins: DefiantN (~DefiantN@user/defiantn)
[09:29:07] *** Joins: ectospasm (~ectospasm@user/ectospasm)
[09:29:07] *** Joins: swebb (~swebb@161.97.198.243)
[09:29:07] *** Joins: fmy_ (~fmy@60.53.118.121)
[09:29:07] *** Joins: qilx (~quassel@62.201.21.8)
[09:29:07] *** Joins: BtbN (btbn@ffmpeg/developer/btbn)
[09:29:07] *** Joins: sa (sid1055@tinside.irccloud.com)
[09:29:07] *** Joins: weyhmueller (~weyhmuell@blofeld.nc.w9r.de)
[09:29:07] *** Joins: Flash (~Flash@user/flash)
[09:29:07] *** Joins: irrgit (~irrgit@192.241.175.183)
[09:29:07] *** Joins: ezekyel (~ezekyel@user/ezekyel)
[09:29:07] *** Joins: jjakob (~quassel@2a01:260:8028:10f0::62)
[09:29:07] *** Joins: yjftsjthsd (~yjftsjths@162.127.123.34.bc.googleusercontent.com)
[09:29:07] *** Joins: NeuroWinter (~NeuroWint@107.172.219.233)
[09:29:07] *** Joins: mattchis (~mattchis@c-73-243-45-46.hsd1.co.comcast.net)
[09:29:07] *** Joins: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius)
[09:29:07] *** Joins: ornxka (~ornxka@user/ornxka)
[09:29:07] *** Joins: SilverEagleDev (~SilverEag@azuracast/lead-developer/SilverEagleDev)
[09:29:07] *** Joins: xep (~xep@76-210-4-7.lightspeed.sntcca.sbcglobal.net)
[09:29:07] *** Joins: brooks (~bswinnert@containers.neptunenetworks.org)
[09:29:07] *** Joins: Milos (~Milos@user/milos)
[09:29:07] *** Joins: doc (~doc@user/doc)
[09:29:07] *** Joins: Keridos (~Keridos@ironhide.de)
[09:29:07] *** Joins: tabakhase (tabakhase@user/tabakhase)
[09:29:07] *** Joins: f0rs3ti (~f0rs3ti@pivpn/maintainer/f0rs3ti)
[09:29:07] *** Joins: tetrapod (~tetrapod@user/tetrapod)
[09:29:15] *** Quits: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius) (Max SendQ exceeded)
[09:29:15] *** Quits: sa (sid1055@tinside.irccloud.com) (Max SendQ exceeded)
[09:29:15] *** Quits: weyhmueller (~weyhmuell@blofeld.nc.w9r.de) (Max SendQ exceeded)
[09:29:31] *** Joins: weyhmueller (~weyhmuell@blofeld.nc.w9r.de)
[09:29:52] *** Joins: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius)
[09:31:03] *** Quits: russjr08 (~russjr08@fw.internal.russ.network) (*.net *.split)
[09:31:03] *** Quits: thekingofbandit (thekingofb@user/thekingofbandit) (*.net *.split)
[09:31:03] *** Quits: BigShip (~BigShip@user/bigship) (*.net *.split)
[09:31:03] *** Quits: thegodsquirrel (~thegodsqu@user/thegodsquirrel) (*.net *.split)
[09:31:03] *** Quits: Pingerfowder (~Pingerfow@bishibosh.stronk.xyz) (*.net *.split)
[09:31:03] *** Quits: simplicity (~yti@user/simplicity) (*.net *.split)
[09:31:03] *** Quits: phenom (~primus@user/phenom) (*.net *.split)
[09:31:04] *** Quits: jrgilman (~jrgilman@67.205.178.139) (*.net *.split)
[09:31:04] *** Quits: robink (~quassel@user/robink) (*.net *.split)
[09:31:04] *** Quits: bsf (~bsf@user/bsf) (*.net *.split)
[09:31:04] *** Quits: optiz0r (~quassel@universe.sihnon.net) (*.net *.split)
[09:31:04] *** Quits: patstoms (~patstoms@tzt.lv) (*.net *.split)
[09:31:04] *** Quits: escherial (~escherial@dainsleif.pw) (*.net *.split)
[09:31:04] *** Quits: calaz (~calaz@user/calaz) (*.net *.split)
[09:31:04] *** Quits: ringo_ (~ringo@157.230.117.128) (*.net *.split)
[09:31:04] *** Quits: fetzie (~fetzie@user/fetzie) (*.net *.split)
[09:31:06] *** Joins: optiz0r_ (~quassel@universe.sihnon.net)
[09:31:19] *** Joins: escherial6 (~escherial@dainsleif.pw)
[09:31:20] *** Joins: russjr086 (~russjr08@fw.internal.russ.network)
[09:31:42] *** Joins: Pingerfowder_ (~Pingerfow@2404:9400:3:0:216:3eff:fee1:1151)
[09:31:45] *** Joins: BigShip (~BigShip@user/bigship)
[09:31:46] *** Joins: armeg (~jrgilman@67.205.178.139)
[09:32:10] *** armeg is now known as jrgilman
[09:32:14] *** Joins: thekingofbandit (thekingofb@user/thekingofbandit)
[09:32:23] *** Joins: phenom (~primus@user/phenom)
[09:32:23] *** Joins: bsf (~bsf@user/bsf)
[09:32:26] *** Joins: calaz (~calaz@user/calaz)
[09:32:33] *** Joins: patstoms (~patstoms@tzt.lv)
[09:32:41] *** Pingerfowder_ is now known as Pingerfowder
[09:32:52] *** Joins: thegodsquirrel (~thegodsqu@user/thegodsquirrel)
[09:33:10] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[09:33:14] *** Joins: TheDcoder (~TheDcoder@user/thedcoder)
[09:33:19] *** Joins: ringo_ (~ringo@157.230.117.128)
[09:34:50] *** Quits: greyrat_ (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[09:36:39] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[09:36:40] *** Joins: roltux (~roltux@containerlinux.nl)
[09:36:43] *** Joins: aidalgol (~aidalgol@user/aidalgol)
[09:37:02] *** Joins: erhandsome (~erhandsom@user/erhandsome)
[09:37:05] *** Joins: dkeohane1 (~dkeohane@ec2-18-189-29-140.us-east-2.compute.amazonaws.com)
[09:37:25] *** Server sets mode: +nrt 
[09:38:42] *** Quits: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net) (Ping timeout: 240 seconds)
[09:39:49] *** Quits: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net) (Ping timeout: 258 seconds)
[09:40:11] *** Joins: wez (~wyoung@about/web/wez)
[09:42:03] *** Joins: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net)
[09:44:49] *** Quits: bencc1 (~bencc1@2a00:a040:197:3af:983c:1dac:9299:901b) (Quit: Leaving)
[09:48:03] *** Joins: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net)
[09:59:00] *** Quits: bouncy (~ben@user/benoit) (Ping timeout: 256 seconds)
[10:09:31] *** Joins: RealKiller (~RealKille@103.134.20.216)
[10:15:18] *** Joins: TomTom (uid45892@id-45892.charlton.irccloud.com)
[10:23:20] *** Quits: TheDcoder (~TheDcoder@user/thedcoder) (Quit: <Insert Generic Quit Message>)
[10:25:01] *** Quits: RealKiller (~RealKille@103.134.20.216) (Ping timeout: 246 seconds)
[10:28:10] *** Quits: BlackIkeEagle (~BlackIkeE@archlinux/trusteduser/blackikeeagle) (Quit: BlackIkeEagle)
[10:28:20] *** Joins: bouncy (~ben@user/benoit)
[10:30:26] *** Joins: BlackIkeEagle (~BlackIkeE@archlinux/trusteduser/blackikeeagle)
[10:33:00] *** Quits: bouncy (~ben@user/benoit) (Ping timeout: 256 seconds)
[10:45:49] *** Joins: mei (~mei@user/mei)
[10:51:29] *** Joins: lemonzest (~lemonzest@user/lemonzest)
[11:05:34] *** Quits: winstonsmith (~winstonsm@109.201.152.177) (Remote host closed the connection)
[11:05:50] *** Joins: winstonsmith (~winstonsm@109.201.152.164)
[11:11:19] *** Joins: jazzy (~jaziz@2600:380:8562:6b2:8c7e:762:5a80:c3e1)
[11:23:02] *** Quits: saunders (~nicholas@172.103.152.166) (Remote host closed the connection)
[11:28:04] *** Quits: HaMsTeRs (~mx@49.130.89.196) (Quit: Konversation terminated!)
[11:32:24] *** Quits: notsponsible (~notsponsi@45.144.113.73) (Quit: notsponsible)
[11:36:08] *** Quits: me-sudoer-dentne (~me-sudoer@45.112.144.181) (Ping timeout: 252 seconds)
[11:39:20] *** Quits: lightstalker (~BT@user/lightstalker) (Ping timeout: 252 seconds)
[11:39:34] *** Joins: lightstalker (~BT@user/lightstalker)
[11:43:13] *** Joins: VaniaPy (~VaniaPy@79.103.24.224.dsl.dyn.forthnet.gr)
[11:43:56] *** Joins: AnapodoPsalidaki (~AnapodoPs@2a02:587:2910:6a35:34fe:716d:5f05:fd2c)
[11:48:26] *** Joins: notsponsible (~notsponsi@45.144.113.73)
[11:53:07] *** Quits: ultima (~ultima@23.81.113.231) (Quit: ZNC 1.8.2 - https://znc.in)
[11:54:02] *** Joins: ultima (~ultima@23.81.113.231)
[12:10:24] *** Joins: me-sudoer-dentne (~me-sudoer@45.112.144.181)
[12:18:34] *** Quits: aminvakil (~aminvakil@2a01:4f8:120:336b:4::1) (Quit: The Lounge - https://thelounge.chat)
[12:19:07] *** Joins: aminvakil (~aminvakil@2a01:4f8:120:336b:4::1)
[12:25:46] *** Quits: lowcrash (~admin@84-255-205-230.static.t-2.net) (Ping timeout: 256 seconds)
[12:29:43] <VaniaPy> Hello,i have a flask app (4 endpoints)
[12:29:46] *** Quits: molt (~molt@79.140.150.21) (Ping timeout: 240 seconds)
[12:30:00] <VaniaPy> The one of them requires conda env to run
[12:30:37] <VaniaPy> would it be better to make a separate container for the conda env ?
[12:31:09] *** Joins: lowcrash (~admin@84-255-205-230.static.t-2.net)
[12:33:19] *** Joins: simplicity (~yti@user/simplicity)
[12:35:49] *** Joins: coc0nut_ (~coc0nut@user/coc0nut)
[12:36:32] *** Quits: coc0nut (~coc0nut@user/coc0nut) (Ping timeout: 256 seconds)
[12:36:44] *** Joins: molt (~molt@79.140.150.21)
[12:41:04] *** Joins: brickfat (~brickfat@user/brickfat)
[12:42:41] *** Joins: lithium (~lithium@user/lithium)
[12:44:43] *** Joins: iomari891 (~iomari891@105.112.138.38)
[12:46:19] *** Quits: brickfat (~brickfat@user/brickfat) (Quit: Leaving)
[12:47:23] *** Joins: mikeliuk (~mikeliuk@109.249.187.96)
[12:55:49] *** Joins: Jimmy_H (~Jimmy_H@119.136.154.187)
[13:20:14] *** Joins: Lutin (~Lutin@user/lutin)
[13:22:54] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[13:27:03] *** Quits: coc0nut_ (~coc0nut@user/coc0nut) (Ping timeout: 276 seconds)
[13:36:37] *** Quits: jazzy (~jaziz@2600:380:8562:6b2:8c7e:762:5a80:c3e1) (Remote host closed the connection)
[13:36:57] *** Joins: jazzy (~jaziz@2600:380:8562:6b2:8c7e:762:5a80:c3e1)
[13:40:36] *** jazzy is now known as jazzy2
[13:40:52] *** jazzy2 is now known as jazzy
[13:41:12] *** jazzy is now known as Jazzy
[13:41:19] *** Jazzy is now known as jazzy
[14:01:47] *** Bardon_ is now known as Bardon
[14:24:20] *** Quits: mz` (~mz`@user/mz/x-8532539) (Quit: WeeChat 2.8)
[14:24:54] *** Quits: molt (~molt@79.140.150.21) (Ping timeout: 276 seconds)
[14:33:21] <[twisti]> i have a command `COPY client/bla bla`, to which docker (with BUILDKIT=1) says `[client-base 5/9] COPY client/package*.json /client/`, `CACHED`. but that directory doesnt exist at all
[14:33:37] <[twisti]> how can that command pass, let alone be cached ? it should throw an error
[14:41:20] *** Quits: TomTom (uid45892@id-45892.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[14:45:25] *** Quits: VaniaPy (~VaniaPy@79.103.24.224.dsl.dyn.forthnet.gr) (Quit: Connection closed)
[14:55:57] *** Quits: sebastianos (~sebastian@user/sebastianos) (Ping timeout: 245 seconds)
[14:56:10] *** Joins: righthand (~righthand@202.38.129.243)
[14:57:22] <Lutin> good afternoon!
[15:02:08] <wez> Good evening!
[15:02:31] <Lutin> wez oh you are already on beer ?
[15:04:28] <wez> Lutin: Nah, not on a Monday night
[15:04:58] <Lutin> wez no indeed...I just got contact with someone who got drunk on sunday evening... that sucks as well
[15:05:39] <wez> Yeah I didn't drink last night either, Friday and Saturday were a different story though :)
[15:06:05] <wez> Local apple cider, free delivery due to their main outlet being shut due to COVID
[15:06:18] <jochum> [twisti]: I'm sorry I have no knowledge about BUILDKIT=1 would need to read the docs
[15:06:56] <Lutin> wez yeah I almost don't drink but people telling me... yeah I'mgonna work today on 11am it sucks
[15:08:14] <wez> heh
[15:09:53] <Lutin> wez people want to live too much
[15:11:24] *** Quits: righthand (~righthand@202.38.129.243) (Quit: Client closed)
[15:12:48] *** Joins: righthand (~ming@58.252.61.109)
[15:14:45] *** Joins: wolfshappen (~waff@irc.furworks.de)
[15:18:28] *** Joins: rewrit3 (~rewrit3@user/rewrit3)
[15:21:17] *** Joins: mike18 (~geri@217-149-162-237.nat.highway.telekom.at)
[15:21:23] <mike18> hi
[15:21:41] <mike18> can the dockerfile also be called DockerfileServer ?
[15:22:11] <[twisti]> it can be called anything
[15:22:21] <[twisti]> you can specify the file with -f YourPersonalizedFilename
[15:22:26] <mike18> yeah
[15:22:40] <mike18> bc i have 2 dockerfiles in the same dir...
[15:22:41] <mike18> ok
[15:22:46] <wez> It can be called mike18IsAwesome
[15:24:56] *** Quits: mike18 (~geri@217-149-162-237.nat.highway.telekom.at) (Remote host closed the connection)
[15:31:50] *** Quits: wolfshappen (~waff@irc.furworks.de) (Quit: later)
[15:32:14] *** Joins: wolfshappen (~waff@irc.furworks.de)
[15:37:09] *** Joins: molt (~molt@79.140.150.21)
[15:39:57] *** Quits: Jimmy_H (~Jimmy_H@119.136.154.187) (Quit: Leaving)
[15:40:03] *** Joins: Atque (~Atque@user/atque)
[15:48:50] *** Quits: righthand (~ming@58.252.61.109) (Ping timeout: 245 seconds)
[16:04:08] *** Joins: ming (~ming@202.38.129.241)
[16:04:42] *** ming is now known as righthand
[16:08:37] <Lutin> mhh my network fails on a swarm node
[16:09:55] <Activ8> put some honey in the lan port
[16:12:55] *** Joins: ming (~ming@202.38.129.241)
[16:12:55] *** Quits: ming (~ming@202.38.129.241) (Client Quit)
[16:24:14] *** Quits: righthand (~ming@202.38.129.241) (Ping timeout: 258 seconds)
[16:26:37] *** Quits: Enissay (~Enissay@user/enissay) (Quit: WeeChat 3.0)
[16:27:21] *** Joins: Enissay (~Enissay@user/enissay)
[16:32:41] *** Quits: Enissay (~Enissay@user/enissay) (Quit: WeeChat 3.0)
[16:33:26] *** Joins: Enissay (~Enissay@user/enissay)
[16:36:20] <Lutin> Activ8 I hate flyshit
[16:39:19] *** Joins: c10l (~c10l@89.34.167.207)
[16:43:42] *** Joins: ash_worksi (~ash_m@user/ash-m/x-3292451)
[16:44:30] <ash_worksi> if you want a command available, do you just throw that in `/opt` and run it with an absolute path (I tried mounting to /usr/local/bin , but that led to problems)
[16:46:19] <[twisti]> what is 'a command' ?
[16:46:33] <[twisti]> if you want to use a program, you have to install it, just like in a regular os
[16:52:05] *** Joins: TomTom (uid45892@id-45892.charlton.irccloud.com)
[16:54:05] *** Quits: mikeliuk (~mikeliuk@109.249.187.96) (Quit: Connection closed)
[16:54:10] *** Joins: mikeliuk84 (~mikeliuk@109.249.187.96)
[16:56:55] *** Joins: Ballerburg9005 (~ICH@dslb-002-201-095-178.002.201.pools.vodafone-ip.de)
[16:57:34] <Ballerburg9005> How can I get an interactive shell during the build process for debugging purposes? "RUN bash" simply skips the command.
[16:57:37] *** Joins: SmokenatorZ1 (~Smokenato@177.172.20.14)
[16:58:19] <tabakhase> Ballerburg9005 kinda not - but you see the last ID in the build, you can use that to create another container and then run your command manualy
[17:00:15] *** Quits: SmokenatorZ (~Smokenato@189-46-177-3.dsl.telesp.net.br) (Ping timeout: 276 seconds)
[17:00:15] *** SmokenatorZ1 is now known as SmokenatorZ
[17:00:31] *** Joins: artok (~azo@mobile-access-b0480d-90.dhcp.inet.fi)
[17:01:22] <Ballerburg9005> tabakhase: that is pretty inconvenient
[17:02:54] <tabakhase> yes and no... its not optimal for sure, but irl youll run into it fairly rarely
[17:03:43] <tabakhase> and a "docker run --rm -it {copypastedId} sh" isnt that far :P
[17:05:46] <Ballerburg9005> tabakhase: could you help me, I don't even see the ID and there is nothing in docker images ls -a
[17:06:19] <Ballerburg9005> I used buildx, is that the problem?
[17:06:45] <Ballerburg9005> it is ARM64, I can't exactly use x86
[17:07:18] <tabakhase> yes buildX is a problem... :/
[17:07:21] *** Joins: ses (uid38151@id-38151.stonehaven.irccloud.com)
[17:07:25] <Ballerburg9005> :'(
[17:07:26] <tabakhase> its cache is in another shim
[17:07:35] *** Quits: SmokenatorZ (~Smokenato@177.172.20.14) (Read error: Connection reset by peer)
[17:08:41] <tabakhase> a normal docker build spits out "---> 769b9341d937" after each step that can be used -- but with buildx that "builder" is technically seperate from your "daemon" or so i think ((dont knwo full details, just that it doesnt work))
[17:09:32] <Ballerburg9005> maybe I can construct a weird bash script that pipes read to iself ..
[17:09:37] *** Joins: SmokenatorZ (~Smokenato@189-69-11-121.dsl.telesp.net.br)
[17:10:32] <[twisti]> Ballerburg9005: nothing you can do will make the docker build process interactive, its specifically designed to be non-interactive, your best bet is to do poor mans debugging - add a step with RUN ls -alsh && pwd && cat somedebugfile.txt && whatever you need for debugging
[17:10:55] <Ballerburg9005>  RUN sh -c 'while read line; do "$line"; done' maybe?
[17:11:28] <Ballerburg9005> maybe with netcat
[17:11:58] <tabakhase> just running with "pipes read to iself"  -- if you install something that DOES need "interaction" there are two common patterns, the tool "expect" for known in/out, and for the super-rare-special-case there is "docker commit" to turn containers back into images :/
[17:12:22] <tabakhase> but for "debugging" - docker run / murking around in the dockerfile it is pretty much
[17:14:03] <Ballerburg9005> I will try netcat, it seems the best workaround
[17:14:03] *** Quits: Ballerburg9005 (~ICH@dslb-002-201-095-178.002.201.pools.vodafone-ip.de) (Quit: Reconnecting)
[17:14:18] *** Joins: Ballerburg9005 (~ICH@dslb-002-201-095-178.002.201.pools.vodafone-ip.de)
[17:14:31] <Ballerburg9005> I will try netcat, it seems the best workaround
[17:20:13] *** Joins: SmokenatorZ9 (~Smokenato@189-69-11-13.dsl.telesp.net.br)
[17:21:18] <Lutin> ok, one node fails on networking it seems, when I create a container it doesn't function on networking, after it it cannot create a container anymore because it cannot attach toa network...this on one swarm node... any suggestions what to check ?
[17:22:56] *** Quits: SmokenatorZ (~Smokenato@189-69-11-121.dsl.telesp.net.br) (Ping timeout: 272 seconds)
[17:22:56] *** SmokenatorZ9 is now known as SmokenatorZ
[17:26:11] *** Joins: sebastianos (~sebastian@user/sebastianos)
[17:27:53] <programmerq> Ballerburg9005▸ just comment out everything in the Dockerfile beyond the spot where you want to debug. complete the build and run that image.
[17:32:29] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Remote host closed the connection)
[17:32:55] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[17:34:34] *** Quits: pvdp (~Pieter@static-n58-105-183-94.rdl4.qld.optusnet.com.au) (Remote host closed the connection)
[17:36:50] <Ballerburg9005> this works like a charm:
[17:36:51] <Ballerburg9005> RUN apk add nmap-ncat; ncat 172.17.0.1 8080 -c 'while true; do read i && echo -en "$($i 2>&1)\n # "; done'
[17:37:19] <Ballerburg9005> and "ncat -lk 8080" on your machine
[17:38:00] <Ballerburg9005> outside the container I mean
[17:40:11] *** Joins: VaniaPy (~VaniaPy@79.103.24.224.dsl.dyn.forthnet.gr)
[17:41:33] <Ballerburg9005> maybe you could even run tmux or screen over pipe?
[17:50:27] *** Quits: mei (~mei@user/mei) (Read error: Connection reset by peer)
[17:50:51] *** Joins: mei (~mei@user/mei)
[17:52:41] *** Quits: Ballerburg9005 (~ICH@dslb-002-201-095-178.002.201.pools.vodafone-ip.de) (Ping timeout: 248 seconds)
[17:53:51] *** Quits: ueberall (ueberall_l@user/ueberall) (Remote host closed the connection)
[17:56:38] <Lutin> OK, weird my docker0 is down... and I can't brink it up
[18:01:26] <Lutin> oh wait this seems to be normal (because of swarm ??) but still..that node...no network on my containers
[18:07:49] *** Joins: ueberall (ueberall_l@user/ueberall)
[18:09:39] <Lutin> ok rejoin worked
[18:09:42] *** Quits: mthall (~quassel@2a01:4f9:4a:2f4d:ecb0:6aff:fed2:c9a1) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:10:21] *** Joins: mthall (~quassel@2a01:4f9:4a:2f4d:ecb0:6aff:fed2:c9a1)
[18:14:33] *** Joins: aesthetikx (~aesthetik@c-107-5-24-40.hsd1.mi.comcast.net)
[18:15:03] <aesthetikx> Does anyone here have experience running selenium webdriver in a docker container, especially on CircleCI or another CI platform?
[18:15:58] *** Joins: brickfat (~brickfat@user/brickfat)
[18:18:09] *** Joins: Anticom (~Anticom@87.190.49.75)
[18:19:31] *** Quits: me-sudoer-dentne (~me-sudoer@45.112.144.181) (Quit: Leaving)
[18:19:46] <tabakhase> aesthetikx dont ask to ask ;-)
[18:19:47] <ada_> aesthetikx: you don't need to qualify your question;  go ahead and explain the problem you're trying t osolve
[18:20:22] <aesthetikx> My test suite running in docker is about twice as slow, I am thinking that it may be because I am forced to use 'disable-gpu' 'disable-dev-shm-usage' and 'no-sandbox' options that I wouldn't otherwise have to outside a docker container
[18:20:54] *** Quits: brickfat (~brickfat@user/brickfat) (Quit: Leaving)
[18:21:18] <akik> aesthetikx: why do you disable /dev/shm ?
[18:21:29] <tabakhase> certainly a factor yea, my puppeteer is about double to native
[18:21:43] <akik> aesthetikx: the default for it is 64 MiB but you can adjust the size
[18:21:56] <aesthetikx> akik I honestly don't remember, it may have been a limitation of CircleCI at the time, I could try without it
[18:22:25] <aesthetikx> is that a shared memory region with the host container, similar to tmp? I am embarassingly not actually shure what it is
[18:23:11] <aesthetikx> host machine*
[18:23:36] <tabakhase> chrome does lots of funny things... "--no-sandbox --disable-setuid-sandbox --disable-dev-shm-usage" is pretty much must-have in docker
[18:24:49] <tabakhase> idk about explicit disable-gpu tho, at least for puppeteer on chrome "headless" seems to take care
[18:30:09] *** Quits: nrg (~NRG@user/nrg) (Quit: ZNC - https://znc.in)
[18:32:37] *** Joins: repo (~repo@user/repo)
[18:34:46] <akik> aesthetikx: i don't think it's shared. for example on my host it's 7.9 gigs but in containers 1 gig
[18:35:02] *** Joins: nrg (~NRG@user/nrg)
[18:35:35] <ada_> you could pass --shm-size with the docker container flags to set the size of the shm mount in your container
[18:35:43] <ada_> I think you could also use the GPU drivers if you wanted GPU acceleration
[18:36:10] <aesthetikx> The gpu issue might be circleci related, I will take a look
[18:36:30] <tabakhase> "disable-shm" is also bit wrongly named... - it still totally does what shm would do, just in /tmp instead of /dev/shm
[18:36:30] *** Quits: nrg (~NRG@user/nrg) (Client Quit)
[18:46:00] *** Quits: jazzy (~jaziz@2600:380:8562:6b2:8c7e:762:5a80:c3e1) (Ping timeout: 256 seconds)
[18:49:41] *** Joins: nrg (~NRG@user/nrg)
[18:52:02] *** Joins: minimal (~minimal@user/minimal)
[18:52:21] <aesthetikx> is there a performance difference tabakhase?
[18:53:45] <tabakhase> for the shm part alone? shouldnt --- in general? yea, as said above, about double to native when ran in docker (its like 3 minutes vs 5)
[18:55:08] <tabakhase> tho i mostly do screencaptures so i never dug into timing all to mutch...  (i do shots of head/foot/fullpage for 1080,mobile,4k,print-view and toss those into image-diff :P)
[18:55:34] <aesthetikx> For like a landing / marketing page to check for changes?
[18:55:45] <aesthetikx> Or for every page in the app?
[18:56:38] <tabakhase> both - some plain stuff on our landings(wordpress backed) - but also for our application (where there is some actual browseractions like logging in and clicking buttons, but not a lot)
[18:58:07] <ash_worksi> if you want a command available, do you just throw that in `/opt` and run it with an absolute path (I tried mounting to /usr/local/bin , but that led to problems)
[18:58:22] <ash_worksi> [twisti]: I mean like a script you wrote yourself
[18:58:29] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[18:59:02] <tabakhase> ash_worksi define problem - and /opt or wherever else noone cares rly, doesnt need "absolute" either, ./bla.sh works just as well
[18:59:06] <[twisti]> if its just a script, you should copy it to an apropriate place in the container, ash_worksi 
[18:59:15] <ash_worksi> also, am I insane for this idea: I wanted dev dbs to be spun up easily so I thought if I committed a db dump to a submodule you could easily pull the current schema
[19:00:48] <tabakhase> ash_worksi not bother with submodules... for a start just throw in a schema.sql and mount that into mysl-dockers initdb.d dir or so...  ((then get work started on using something todo actual migrations in step2))
[19:01:54] <ash_worksi> tabakhase: so, my idea was to keep actual production migrations in their own arena (their own repository, with their own docker-compose file, etc)
[19:02:20] <ash_worksi> and `throw in a schema.sql` was the idea with the submodule
[19:02:45] <tabakhase> there should be no such thing as "production" specific migrations...
[19:02:56] <tabakhase> (submodules are just the cancer of git :P)
[19:03:06] <ash_worksi> so I am coming to realize
[19:03:33] <tabakhase> and "seperate" doesnt make much sense anyhow - its not your sql server who should run those migrations anyhow, but your app on/before boot
[19:04:17] <ash_worksi> well, when you want to deploy a new migration
[19:05:46] <ash_worksi>  sigh
[19:06:47] *** Joins: righthand (~ming@202.38.129.243)
[19:07:23] <tabakhase> any schema changes should be tied to your app... - if you mean "login in with phpmyadmin and changing dans password" that wouldnt be stuck into such a pattern
[19:10:21] <tabakhase> whole thing gets a little extra muddy when you have tables that are "kinda code, not data" (( think, a categories table - that may be administered "by dev", then having a migration inster there can make sense -- but if you have a webpanel where admin logs in to create a new category on prod, "you would never touch that data with migrations"
[19:10:40] <tabakhase> the "problem that you also need some dummy-data in that table on dev" is up to "seeding" then
[19:13:37] *** Quits: Nightah (~Nightah@user/nightah) (Quit: ZNC - https://znc.in)
[19:14:09] *** Joins: Nightah (~Nightah@user/nightah)
[19:15:46] <ash_worksi> I'm trying to KISS this, and it seemed reasonable to keep them separate; the sqitch (migrations) environment is not really the same ballpark as the application, and yes, that's tied to it, and there should be barriers to prevent deploying some changes that require db changes but we don't have to deal with much then that...
[19:22:34] *** Quits: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net) (Read error: Connection reset by peer)
[19:28:08] *** Joins: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net)
[19:29:21] <aesthetikx> Excitingly, whitelisted-ips, disable-gpu, and disable-dev-shm-usage no longer seem to be needed with the latest version of chromedriver, so we shall see if the suite is faster this time
[19:29:48] <aesthetikx> Only no-sandbox is needed
[19:30:55] *** Joins: mikeputnam (~mikeputna@wilug/mikeputnam)
[19:40:35] *** Joins: junktext (~junktext@109.201.152.168)
[19:45:02] *** Quits: lowcrash (~admin@84-255-205-230.static.t-2.net) (Quit: The Lounge - https://thelounge.chat)
[19:46:46] *** Quits: Hackerpcs (~user@user/hackerpcs) (Quit: Hackerpcs)
[19:48:48] *** Joins: Hackerpcs (~user@user/hackerpcs)
[19:59:42] *** Parts: [twisti] (~twisti@toadwater.com) ()
[20:00:05] *** Joins: mz` (~mz`@user/mz/x-8532539)
[20:17:21] *** Quits: travisghansen (~travisgha@192.74.130.86) (Read error: Connection reset by peer)
[20:17:45] *** Joins: travisghansen (~travisgha@192.74.130.86)
[20:17:51] *** Quits: sebastianos (~sebastian@user/sebastianos) (Read error: Connection reset by peer)
[20:19:39] *** Joins: sebastianos (~sebastian@user/sebastianos)
[20:36:30] <ada_> morning 
[20:37:38] <matthewcroughan> Morning.
[20:37:50] <matthewcroughan> ada_: you're probably the only person here who can help me!
[20:38:26] <matthewcroughan> hello-world has different permissions today than it did 5 months ago. Can you help me understand why?
[20:38:57] <ada_> can you elaborate on the difference you noticed?
[20:39:05] <matthewcroughan> the difference between docker pull hello-world and docker build on https://github.com/docker-library/hello-world/tree/master/amd64/hello-world is that the permissions of the hello binary are different, along with timestamp. I would like to know how the permissions of the binary in the two layers differ. https://pastebin.com/raw/Zsz8vPw0
[20:40:01] <ada_> the write bit is disabled
[20:40:44] <ada_> I'm not sure I could say "why" that change was made
[20:40:52] <matthewcroughan> where was it disabled?
[20:41:03] <matthewcroughan> the git repo for hello-world shows the binary has not been changed
[20:41:09] <matthewcroughan> for 2 years in fact 
[20:42:21] <ada_> I haven't found it yet
[20:44:19] *** Joins: fetzie (~fetzie@user/fetzie)
[20:45:04] <ash_worksi> ada_: did you just get here?
[20:45:50] <ash_worksi> (10 minutes ago?)
[20:49:20] <ada_> I'm idle all the time but now I'm actually here
[20:49:36] <ash_worksi> anyway, I was going to ask you for your opinion on a question I already asked: I have an app repo and sql repo; the sql repo has migrations, verify scripts, revert scripts, migrations; rollback test script and a db service with a dumpfile of the current schema; my idea was make that dumpfile a submodule so that anyone can pull the latest schema it to the app repos faux db service 
[20:50:14] <Lutin> ada_ :D
[20:51:27] <ada_> I don't hate git submodules but they're a pain to use correctly;  usually a makefile that does the right things is good for new contributors
[20:52:42] <Lutin> ada_ as long it's no pain in the ass I think you are pretty fine ;)
[20:57:21] *** Joins: Ballerburg9005 (~ICH@dslb-002-201-095-178.002.201.pools.vodafone-ip.de)
[21:01:43] *** Parts: legend (onelegend@wireguard/tunneler/onelegend) (WeeChat 2.8)
[21:02:03] *** Joins: nvmd (~nvmd@user/nvmd)
[21:03:09] <ash_worksi> ada_: a makefile to use in the Dockerfile?
[21:04:47] <ada_> ash_worksi: not necessarily, I was thinking you were talking about setting up the repo on the host 
[21:05:03] <ada_> I imagine that this is two separate images
[21:05:21] *** Quits: Anticom (~Anticom@87.190.49.75) (Quit: Leaving)
[21:05:45] <ash_worksi> ada_: I mean, I have 2 repos, I have been getting a lot of slack today about keeping migrations separate from my app
[21:06:54] <ash_worksi> ada_: but the point is, I was hoping to just have people who access to the app repo just `git clone --recussive-submodules app_repo` 
[21:07:28] <ash_worksi> and then they'd magically have an up-to-date db schema sitting in the initdb.d dir
[21:07:44] <ash_worksi> (which was committed by a dba on the last migration change)
[21:07:59] <matthewcroughan> ada_: Are you suggesting that a change was made to the daemon?
[21:08:00] <ada_> ok
[21:08:02] <ash_worksi> (at least that's what I'm trying to do)
[21:08:08] <ada_> matthewcroughan: no, im not
[21:08:19] <ada_> ash_worksi: sounds feasible
[21:08:32] <ada_> matthewcroughan: I can't pinpoint where a change was made but it for sure isn't to the daemon just to affect hello-world
[21:08:33] <ash_worksi> but my question for you is: what do you think? is that something that makes squimish?
[21:08:38] <matthewcroughan> what do you think changed then? Because the hello-world binary from Git is 2 years old, along with the Dockerfile which is 4 years old.
[21:08:40] <ada_> ash_worksi: no, it doesn't
[21:09:12] <matthewcroughan> it seems possible to bisect, I think I will run older versions of the daemon to figure this out
[21:09:20] <matthewcroughan> on NixOS that's simple enough to try, so I will try it! :D
[21:09:30] <matthewcroughan> will at least allow ruling it out 
[21:09:30] <ash_worksi> ada_: okay, so... that's good :P
[21:09:35] <ada_> matthewcroughan: it's not going to be a daemon change, can almost guarantee that
[21:09:40] <ada_> matthewcroughan: it just doesn't track
[21:09:42] <matthewcroughan> Hmm, alright. Then what could it possibly be!
[21:10:00] <matthewcroughan> The Dockerfile + Binary are years old, yet the results are different.
[21:10:10] <ada_> matthewcroughan: if the dockerfile does a COPY on the hello world binary, then someone couldh ave changed the binary permissions on disk before the copy
[21:10:12] <ash_worksi> ada_: I would ask you a bit more for advice but I'll just hope to catch you later
[21:10:17] <ada_> then it wouldn't be reflected in the dockerfile
[21:10:20] <matthewcroughan> Or somehow what was uploaded to hub.docker.com is different than what the github specifies.
[21:10:30] <ada_> matthewcroughan: that doesn't track
[21:10:45] <matthewcroughan> what do you mean by track?
[21:10:50] <ada_> it doesn't follow
[21:11:11] <matthewcroughan> ah, I thought you meant that the hub's hello-world repo doesn't track github :D
[21:11:13] <ada_> "what was uploaded to dockerhub is different from what is in github" doesn't follow
[21:11:23] <ada_> the build is definitely based on the source in github docker-library repo
[21:11:56] <ada_> the most likely explanation is that the hello-world binary is built outside the dockerfile and COPYd into it;  someone changes the permissions on the binary outside the dockerfile and the COPY just copies it as-is without the +w bit set
[21:12:33] <matthewcroughan> ah
[21:12:38] <matthewcroughan> okay, so that's what Nix calls impurity.
[21:12:40] <matthewcroughan> That makes complete sense.
[21:12:52] <matthewcroughan> I was thinking this was as non-reproducibility, but it's not the case, it's just impurity.
[21:13:01] <ada_> idk, maybe
[21:13:43] <matthewcroughan> This is a very good case of impurity leading to non-reproducibilty. Thank you for solving this.
[21:13:45] <ada_> this is the source of the image
[21:13:47] <ada_> https://github.com/docker-library/hello-world/tree/837f63a4a9cc1e06320f47abb98965b6c5672b30
[21:13:58] <ada_> https://github.com/docker-library/hello-world/tree/master
[21:13:59] <matthewcroughan> how can you tell it's at this hash?
[21:14:10] <matthewcroughan> 837f63...
[21:14:13] <ada_> I don't
[21:14:20] <ada_> go to master branch
[21:14:22] <matthewcroughan> was that a mistake paste?
[21:14:36] <ada_> yes
[21:16:04] <matthewcroughan> Right, so if you produce an image for `amd64/hello-world` by doing `docker build . -t hello-world-impure` and then `docker save hello-world-impure -o hello-world-impure.tar.gz` then extract it to see the `layer.tar` inside... THEN `docker save hello-world:latest -o hello-world.tar.gz`, extract that, and perform a diffoscope on both layer.tars, you'll see the difference I saw and gave to you in the pastebin, hopefully.
[21:16:59] <ada_> https://github.com/docker-library/hello-world/blob/master/Dockerfile-linux.template
[21:17:02] <ada_> tl;dr your answer is here
[21:17:08] <ada_> the dockerfile simply copies the binary from the host
[21:17:09] <programmerq> matthewcroughan▸ docker save hello-world | tar xO a803ca04f00ecd1c10fb4978f7a963d1461f4225e568901bc6990cb46a3e04be/layer.tar | tar -tv
[21:17:16] <programmerq> this shows: -rwxrwxr-x 0/0           13336 2021-03-05 16:25 hello
[21:17:28] <programmerq> so the actual docker image layer has 775 on /hello
[21:18:30] <ada_> the binary lives in the repo
[21:18:37] <ada_> the dockerfile copies the binary as-is into the image
[21:18:47] <ada_> so whoever builds the binary changes the build process to set perms as such
[21:21:13] <programmerq> or if you have 'reg' and 'jq' installed, you can grab the layer directly from the docker hub and show the same thing: `reg manifest hello-world:latest | jq -r '.layers[0].digest' | xargs -n 1 -I '{}' reg layer hello-world:latest@{} | tar -tv`
[21:24:51] *** Quits: ash_worksi (~ash_m@user/ash-m/x-3292451) (Ping timeout: 268 seconds)
[21:26:41] *** Quits: mattypants (~quassel@66-90-146-141.dyn.grandenetworks.net) (Ping timeout: 258 seconds)
[21:33:42] *** Joins: nirojan (sid365686@user/nirojan)
[21:40:42] *** Joins: Atum_ (~IRC@user/atum/x-2392232)
[21:44:54] *** Quits: c10l (~c10l@89.34.167.207) (Quit: The Lounge - https://thelounge.chat)
[21:45:23] *** Joins: c10l (~c10l@89.34.167.207)
[21:53:15] *** Quits: mikeliuk84 (~mikeliuk@109.249.187.96) (Quit: Connection closed)
[21:57:51] <matthewcroughan> programmerq: why is it that mine differs then?
[22:00:05] *** Joins: yogoyo (~paddy@user/yogoyo)
[22:00:12] <programmerq> when you run your build command, are the permissions set to 775 on that binary?
[22:01:04] <programmerq> when I do a git clone, git sets my permissions to 755 on `hello`, not to 775.
[22:01:45] *** Quits: lithium (~lithium@user/lithium) (Ping timeout: 248 seconds)
[22:02:01] <matthewcroughan> `-rwxr-xr-x 1 matthew users 14K Aug  9 03:15 hello` is what I have in git.
[22:03:31] <programmerq> git itself doesn't store permissions per se. it really only tracks whether a file ought to be executable. the git client sets perms in the working directory. I would guess that the folks that run the builder for the official images have a sticky bit or acl on the build server or a git config of some sort to g+x any files that are u+x ?
[22:03:50] <programmerq> I did some light searching, but didn't see any obvious bit in the bashbrew repo (bashbrew is the builder tool they use)
[22:03:56] <jochum> Do i understand it right, the builder of "hello-world" did clone it with a different umask?
[22:03:57] <programmerq> might be worth asking in #docker-library
[22:04:36] <matthewcroughan> programmerq: it's either way a clear and obvious example of what I'm trying to describe in a blog post, which is impurity.
[22:04:38] <programmerq> it's a slow channel, but tianon should respond at some point.
[22:04:46] <jochum> hmm "git doesn't store permissions per se" thats interesting.
[22:04:49] <matthewcroughan> so no matter what the case may be, it's controlled by external factors outside of buildkit.
[22:04:54] <matthewcroughan> that, by definition, is impurity.
[22:05:28] <matthewcroughan> the file is controlled, mutated and modified outside of the Dockerfile, then the Dockerfile copies it in. 
[22:05:33] <jochum> matthewcroughan: its not
[22:05:42] <programmerq> buildkit can only take what it is handed. The git checkout is kind of outside buildkit's control.
[22:05:44] <matthewcroughan> what happened outside is not controlled by buildkit or Docker, this is known as impurity.
[22:05:52] <jochum> matthewcroughan: cause building a image != running a image
[22:06:03] <matthewcroughan> jochum: I'm only referring to building, not running.
[22:06:06] <jochum> where running a images is always the same, whereever you run it.
[22:06:27] <matthewcroughan> That much is true.
[22:06:40] <matthewcroughan> But reproducibility is what I'm interested in, so I'm only talking about building the image.
[22:07:09] <jochum> matthewcroughan: if we both build a sandkastle will they be the same?
[22:07:11] <programmerq> and it is reproducible, if you do the same set of steps to prepare the build context. Having different file permissions in that build context will result in a build with different file permissions.
[22:07:46] <matthewcroughan> programmerq: it's not reproducible unless the external commands are deterministic.
[22:08:01] <matthewcroughan> Let's say you generate something using `wget`, this is not reproducible.
[22:08:03] <programmerq> this is just something you'd need to account for in creating your reproducible build
[22:08:16] <programmerq> that is correct-- doing a wget is a not ideal practice
[22:08:19] <matthewcroughan> yeah, sure, I'm just saying that `COPY` is impure so it offers no guarantees.
[22:08:19] <programmerq> and that's why
[22:08:28] <programmerq> COPY only grabs what is in the build context
[22:08:46] <matthewcroughan> Right, and preparing the build context is not Docker's job, so Docker can't really enforce purity here.
[22:08:47] <programmerq> and if you put something into the build context that is different what you put in another time, then of course the COPY is going to be different.
[22:08:59] <programmerq> right-- it is up to the image author to do that.
[22:09:01] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[22:09:27] <matthewcroughan> And that is very weird and strange, to me!
[22:09:34] <matthewcroughan> Because Docker is primarily a build tool, but when you use COPY all bets are off.
[22:09:42] <programmerq> that's also why built images tend to be the preferred way to distribute containerized applications. once built, that image has a checksum and is immutable.
[22:09:44] <matthewcroughan> It's just something I find interesting.
[22:10:06] <programmerq> yup, garbage in and garbage out. that's going to be true for any system that you might run a copy.
[22:10:10] <programmerq> docker or not
[22:10:40] <artok> ..audio mixing desk..
[22:10:43] <matthewcroughan> Well ;P programmerq
[22:10:54] <matthewcroughan> Nix is quite a bit different, and the more I read the thesis and understand it, the more impressed I am.
[22:10:58] <programmerq> if I had a bash script that copied something, it'd be subject to the same properties.
[22:11:19] <matthewcroughan> There's a section on "Enforcing purity"
[22:11:21] <matthewcroughan> https://edolstra.github.io/pubs/phd-thesis.pdf
[22:11:21] <programmerq> if that something is different between invocations, then the destination will get a different thing
[22:11:35] <matthewcroughan> 7.1.5
[22:11:37] <artok> I started to do even entrypoint +x setting in Dockerfile so there is no problem with permissions
[22:12:21] <artok> and if there is bunch of needed permissions checks for the image, have shell script that you run to set all needed permissions on build time
[22:13:01] *** Quits: AnapodoPsalidaki (~AnapodoPs@2a02:587:2910:6a35:34fe:716d:5f05:fd2c) (Remote host closed the connection)
[22:13:44] <programmerq> and, with this particular thing where you are doing a COPY where the source is a git working directory, you can make the permissions be more deterministic by making it be part of the COPY command: `COPY --chmod 0775 hello /hello`
[22:20:48] <tianon> the official images are all built via something that's roughly `git archive ... | docker build -`
[22:22:19] <tianon> we actively discourage `RUN chmod +x ...` because of ancient issues with AUFS that probably don't apply anymore (certain graph drivers, namely AUFS, were unable to represent that layer correctly)
[22:22:44] <tianon> but it also means your script exists in the layer heirarchy twice because the chmod makes a copy of it
[22:23:05] <tianon> there was a proposal for COPY --chmod=... once upon a time, but IIRC it got hung up on syntax bikeshedding
[22:23:28] <tianon> (or maybe buildkit finally implemented it?  I don't keep up with buildkit)
[22:23:58] <Lutin> artok back from partying again ?
[22:24:04] <Lutin> you naughty boy ;)
[22:24:23] <akik> tianon: chmod works fine with btrfs storage driver when building an image
[22:25:28] <matthewcroughan> programmerq: Looking into it, Nix's method for handling this is more sane.
[22:25:42] <matthewcroughan> > What we absolutely cannot ignore for deployment of Unix software is regular files,
[22:25:42] <matthewcroughan> directories, and symbolic links. Also, while we can get away with disregarding most file
[22:25:42] <matthewcroughan> permissions, the executable bit must be maintained2. This leads to the grammar for FSOs
[22:25:42] <matthewcroughan> shown in Figure 5.1.
[22:25:56] <matthewcroughan> (So sorry for multilining that, I really didn't mean to. Quasselclient is bad.)
[22:26:32] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Ping timeout: 268 seconds)
[22:27:24] <matthewcroughan> So instead of `COPY --chmod` you just put artifacts in $out/bin and the execute bit is set, the perms are unimportant.
[22:29:35] *** Joins: Modx3 (~vel@user/modx3)
[22:32:35] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[22:33:02] <artok> Lutin: sure enough, 4 days of work done, now two nights at home and then 10 nights working =)
[22:33:20] <Lutin> artok wow, cruising again ?
[22:33:24] <artok> yeah
[22:33:24] *** Quits: lemonzest (~lemonzest@user/lemonzest) (Quit: Quitting)
[22:33:50] <Lutin> cool! 
[22:33:53] <Lutin> lots of hot chicks ?
[22:33:57] <Lutin> or men if you prefer 
[22:34:14] <artok> usually some of 'em
[22:35:35] <Lutin> so you won't be bored ;)
[22:35:47] <Lutin> do you bring a your own gear and such ?
[22:38:25] <ada_> dj gig?
[22:39:44] <artok> last 4 days were mixing bands, dj gigs on next 10 days
[22:40:07] <ada_> nice
[22:40:09] <ada_> what are you spinning
[22:40:30] <artok> this and that, mostly house and disco 
[22:43:06] <ada_> noice
[22:45:58] *** Quits: cryocaustik (~cryocaust@user/cryocaustik) (Quit: Ping timeout (120 seconds))
[22:46:19] *** Joins: cryocaustik (~cryocaust@user/cryocaustik)
[22:46:53] <ada_> im playing mostly house and techno lately
[22:52:02] <Lutin> ada_ are you using acid again ?
[22:54:29] <cim> deep house dawg
[22:55:41] *** Quits: winstonsmith (~winstonsm@109.201.152.164) (Remote host closed the connection)
[22:55:51] <Lutin> NOW my custer is sexy
[22:56:00] *** Joins: winstonsmith (~winstonsm@77.247.181.217)
[22:56:09] *** Quits: c10l (~c10l@89.34.167.207) (Ping timeout: 248 seconds)
[22:56:57] <ada_> Lutin: dat 303
[22:57:31] <artok> I don't usually so much subcategory my house... it goes from that disco to techno
[22:57:33] <Lutin> ada_ you are retro :D
[22:57:57] <Lutin> artok it's because of your brain, no worries... drunk people won't notice :P
[22:58:01] <artok> I already picked my last track for the next evening. Ron Trent - Altered States
[22:58:04] *** Joins: s17 (~nobody@user/s17)
[22:58:09] <Lutin> but indeed that is how a DJ should work
[22:58:20] <Lutin> artok first and last ?
[22:58:43] <ada_> I've been trying to find this carlo lio remix of 'sing it back' for weeks
[22:58:54] <ada_> such a dope track
[23:01:38] <artok> is it Dubfire's label?
[23:01:47] <artok> released on that, that is
[23:02:45] <artok> oh no
[23:03:23] <artok> but the carlo lio has released on sci+tec at least
[23:03:38] <ada_> yeah I think it's on sci+tec
[23:04:53] *** Joins: DoofusCanadensis (~DoofusCan@207.229.38.10)
[23:06:25] <artok> ah some releases also on Coyu's Suara
[23:06:25] *** Quits: winstonsmith (~winstonsm@77.247.181.217) (Remote host closed the connection)
[23:06:36] <Lyn> is it possible to find a list of jenkins images? different versions and all - their hub page seems to mention alpine but not any images for it
[23:06:42] *** Joins: winstonsmith (~winstonsm@109.201.152.172)
[23:07:00] <DoofusCanadensis> hub.docker.com
[23:07:16] <artok> Lyn they have version-alpine
[23:07:22] <Lyn> I'm looking there, here's the link https://hub.docker.com/r/jenkins/jenkins
[23:07:26] <DoofusCanadensis> Lyn: the issue is that the Jenkins project is not the "official" distributor of their
[23:07:28] <artok> for example jenkins:2.60.3-alpine
[23:07:48] <DoofusCanadensis> look under tags
[23:08:00] <artok> https://hub.docker.com/_/jenkins
[23:08:03] *** Quits: VaniaPy (~VaniaPy@79.103.24.224.dsl.dyn.forthnet.gr) (Quit: Connection closed)
[23:08:17] <Lyn> wasn't there either :S hmm, that link said it's deprecated
[23:08:29] <artok> oh true
[23:08:35] <DoofusCanadensis> oh, they got it fixed
[23:08:43] <DoofusCanadensis> good stuff
[23:08:56] <DoofusCanadensis> you can filter the tags view to show only, say alpine images
[23:09:05] <artok> there is -alpine images on r/jenkins/jenkins
[23:09:18] <Lyn> oh that works, the filtering
[23:09:20] <Lyn> cheers
[23:11:02] <DoofusCanadensis> yeah, _/jenkins is the wrong repo. you need jenkins/jenkins
[23:11:14] <DoofusCanadensis> so it's still effed up
[23:14:45] *** Joins: AnapodoPsalidaki (~AnapodoPs@2a02:587:2910:6a35:2d15:52e7:c816:8245)
[23:15:05] *** Joins: AnapodoPsalidi (~AnapodoPs@2a02:587:2910:6a35:2d15:52e7:c816:8245)
[23:16:40] <artok> seems that last time I used jenkins was 2 years ago =)
[23:16:41] *** Joins: Votan (~Votan_ver@ip-83-99-115-108.dyn.luxdsl.pt.lu)
[23:16:51] <Votan> Hi, I just updated my box, and now it seems my docker does not want to start anymore: https://0bin.net/paste/xHtinTRu#P92fYk3fk1lRTQZSFc5ySqoJYEpZhUJTwBQ1zClg-+s
[23:17:02] <Votan> Any ideas what's wrong? I didnt touch iptables at all, so not sure why this is blowing up
[23:20:49] *** Quits: kenoba (~kenoba@user/kenoba) (Quit: Ping timeout (120 seconds))
[23:21:10] *** Joins: kenoba (~kenoba@user/kenoba)
[23:21:43] *** Joins: c10l (~c10l@89.34.167.207)
[23:21:44] *** Quits: AnapodoPsalidaki (~AnapodoPs@2a02:587:2910:6a35:2d15:52e7:c816:8245) (Quit: Leaving)
[23:26:56] *** Quits: DeanGuss (~dean@user/deanguss) (Remote host closed the connection)
[23:27:54] *** Quits: Notir (~Notir@user/notir) (Quit: Quitting)
[23:28:01] <artok> ipv6 disabled?
[23:28:12] *** Joins: Notir (~Notir@user/notir)
[23:28:16] *** Joins: DeanGuss (~dean@user/deanguss)
[23:28:47] <Votan> how can I check? I didnt touch any configin months
[23:29:30] *** Quits: blackop (~ocloud@user/blackop) (Ping timeout: 240 seconds)
[23:29:59] *** Joins: blackop (~ocloud@user/blackop)
[23:33:17] <zoredache> Out of curiosity is this a VM or something? Did your kernel update? What OS?
[23:34:48] <zoredache> If the kernel was updated, and your system has a way for you to rebooot with the previous kernel I would be tempted to try that.
[23:35:48] <Votan> It is a Manjao Linux Box baremetal installation. No kernel update since some time, currently 5.13.x
[23:36:37] *** Quits: kenoba (~kenoba@user/kenoba) (Read error: Connection reset by peer)
[23:36:57] *** Joins: kenoba (~kenoba@user/kenoba)
[23:41:59] <zoredache> Odd
[23:51:48] *** Quits: kenoba (~kenoba@user/kenoba) (Ping timeout: 272 seconds)
[23:54:38] *** Joins: kenoba (~kenoba@user/kenoba)
[23:57:18] <Lutin> anyone running read-only containers only ?
[23:58:39] <minimal> Lutin: have done that in the past
[23:58:58] <Lutin> minimal ok but stopped doing it ?
