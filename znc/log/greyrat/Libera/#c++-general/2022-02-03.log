[00:00:29] <pulse> that looks pretty cool
[00:00:41] <LordKalma> NIH?
[00:00:41] <rpav> what i actually am working on / NIH-ing though is a data network thing which doesn't really exist in any way i want, and also basic input ;)
[00:01:28] <rpav> not invented here
[00:02:24] <rpav> but what if instead of "input simple strings" our basic input was structured data that we worked with in a string-editor-like fashion
[00:02:44] <MaddHatter> that looks kind of interesting, if I had a stylus device
[00:03:01] <rpav> and what if this had always been the case, from early 8-bit home computers; _could_ it have been the case
[00:03:37] <rpav> yeah Write is nifty, nothing else really lets you push written text around like that, and works on anything from a phone to a PC
[00:04:17] <MaddHatter> one of the things powershell did that was interesting is passing objects through pipes rather than just a byte stream
[00:04:25] <rpav> yeah
[00:04:42] <rpav> i want an entire personal network where everything is "an object"
[00:04:47] <pulse> the supermario approach
[00:05:14] <rpav> like, i shouldn't have to think "i see some text on my desktop screen, _how_ am i going to get this text to my phone"
[00:05:19] <Shell> rpav: hehe, I was playing with building such a system (using Cap'n Proto as protocol) a while ago.
[00:05:26] <rpav> Shell: cool
[00:05:47] <Shell> it's an idea that's kept coming up since networks became a thing really
[00:06:17] <rpav> Shell: i'm currently working on an, err .. shell .. scripting language to tie to the backend stuff; part of my goal is to not have any fixed encoding/protocol (or language)
[00:06:24] * Shell nodnod
[00:07:04] <pulse> someone should make a winamp replacement
[00:07:05] <rpav> yeah .. it's a dream i've had since i was a kid ;( the irony is that then, nothing was networked and communication was merely a bit tough .. now everything is networked and communication is nearly impossible
[00:07:20] <ville> pulse: audacious
[00:07:27] <pulse> winamp was better
[00:07:49] <LordKalma> never linked winamp, and windows media player was just fine
[00:07:50] <ville> because?
[00:07:51] <LordKalma> don't @ me
[00:07:55] <pulse> although audacious is probably the closest to the glory days of winamp
[00:07:56] <LordKalma> *liked
[00:08:00] * rpav always liked xmms 
[00:08:14] <pulse> ville, the theming system is inferior
[00:08:19] <MaddHatter> there's lots of ways to get text on your screen to your phone and vice-versa. There's a "phone companion" app or similar from just about every laptop and phone manufacturer, it seems like
[00:08:24] <ville> audacious eats winamp skins
[00:08:41] <LordKalma> MaddHatter, KDE has one and it's cross platform
[00:08:41] <MaddHatter> I think windows even has a generic one, although I haven't used it
[00:09:10] <ville> go to https://skins.webamp.org and yu can use them in audacious
[00:09:32] <pulse> hmm
[00:09:34] <pulse> maybe you're right
[00:09:38] <pulse> it's been a while since i tried it
[00:09:40] <ville> maybe? that's what i am using
[00:13:39] <pulse> ok
[00:13:40] <pulse> umm
[00:13:47] <pulse> it's buggy as fuck
[00:13:47] <pulse> lol
[00:13:56] <ville> works fine for me
[00:14:01] <pulse> ugh
[00:14:09] <pulse> i did "add folder"
[00:14:14] <pulse> and typed in "e:" because that's where my music is
[00:14:19] <pulse> expecting to be able to select a folder
[00:14:22] <pulse> and then it went batshit crazy on me
[00:14:33] <pulse> started indexing my whole drive apparently, and got stuck in an error messagebox loop
[00:14:53] *** Quits: jsbach (~jsbach@2a01:c22:a545:5400:3af3:abff:fe57:23d5) (Ping timeout: 250 seconds)
[00:14:58] <pulse> just did it again with "e:\" and it did the same, lol
[00:15:01] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:15:22] <ville> you're on windows?
[00:15:24] <pulse> yes
[00:15:29] <ville> well who cares then
[00:15:57] <pulse> well that's just crappy behavior
[00:16:00] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[00:16:24] <pulse> i got it to work now but i had to crash it twice
[00:16:31] <pulse> the file dialog it uses is something really weird
[00:16:35] <rpav> wait if you're on windows why _not_ just use winamp
[00:16:40] <pulse> exactly
[00:16:41] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[00:16:45] <MaddHatter> probably copying vlc, whose "add folder" also means "recursively scan from that point down for all media files"
[00:16:56] <pulse> it should open the folder dialog, like winamp
[00:16:58] *** Joins: proller (~p@2a02:6b8:b081:1202::1:10)
[00:17:05] <pulse> and if i type in "e:" it should go there and let me select something
[00:17:10] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[00:17:12] <rpav> i hate "library scanning," just let me look at directories
[00:17:22] <rpav> this is perhaps a bit OT for this channel ;)
[00:17:46] <MaddHatter> C++ has a std filesystem interface... finally
[00:18:01] <pulse> now all we need is std::string::split !
[00:18:05] <pulse> coming with c++30 i hear
[00:18:12] <AmR> hahahah
[00:18:28] <MaddHatter> We've had strtok since the dinosaurs and that ought to be good enough for anybody
[00:18:29] <rpav> pulse: ok so forget what i was saying about NIH, i made this one thing ;)
[00:18:35] <pulse> ;)
[00:18:42] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[00:18:47] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[00:18:58] *** Quits: MatSharrow (~matthew@36.115.9.51.dyn.plus.net) (Quit: Konversation terminated!)
[00:19:11] <rpav> cppitertools is nice but doesn't have split or collect or some of nifty shit i made
[00:20:24] <pulse> i wanted to NIH bulletin board software recently, but then i realized i'm not fucking crazy
[00:20:32] <pulse> it looks deceptively easy on the surface
[00:20:37] <pulse> but it's actually complex as hell
[00:20:44] <rpav> like, dial-in or what
[00:20:58] <pulse> something like phpbb but modernized and with less crap codebase
[00:21:00] <rpav> oh
[00:21:06] <pulse> since nothing like that exists, actually
[00:21:24] <pulse> you have a choice of a) dinosaur bulletin boards and b) modern, really crappy and obnoxiously designed bulletin boards
[00:21:26] <pulse> like discourse
[00:21:43] <rpav> yeah i set that up once not too many years hence and there was nothing close to as fully-featured, but it's still the cruftiest BS php codebase
[00:21:46] <yolo> dtor found error, can't throw per c++ guidelines, can log the error, what else can I do other than logging-and-ignore, or logging-and-terminate
[00:22:04] <pulse> yeah. my idea was, ok so let's just make something like phpbb but, you know, sane
[00:22:14] <pulse> but then i started listing features and i quickly realized i'd have to be insane to implement that
[00:22:29] <pulse> not to mention it would get hacked immediately and i'd have to spend the rest of my life patching it
[00:22:54] <pulse> but if i had way too much money, and wanted to build a unique community, i would probably hire people to implement a custom bulletin board anyway
[00:23:39] <MaddHatter> yolo: notify an observer that the caller registered, and if none are registered, ignore and move on
[00:24:05] <yolo> bulletin is a solved problem, it's called gitter|discord|*php*bbs* even twitter|facebook, already had too many of them
[00:24:07] <pulse> rpav, the other acceptable one is probably SMF
[00:24:17] <pulse> yolo, meh, all the modern ones are crap
[00:24:26] <yolo> then you NIH
[00:24:30] <pulse> yeah, but it's hard
[00:24:54] <pulse> it's a ton of work at the very least
[00:25:15] <rpav> SMF?
[00:25:20] <pulse> simple machines forum
[00:25:29] <yolo> SMF is another forum, i think it charges some fee?
[00:25:37] <rpav> that seems new
[00:25:41] <yolo> no it's not
[00:25:45] <pulse> no, that's ... ancient
[00:25:51] <Shell> Vanilla's not bad
[00:25:52] <pulse> yolo, no, SMF is free
[00:26:22] <pulse> vbulletin isn't free anymore though
[00:26:29] <pulse> it used to be afaik
[00:26:33] <Shell> vbulletin was never free I think
[00:26:48] <pulse> hmm, i seem to remember a time when almost every site would run on vbulletin4
[00:26:52] <yolo> seriously, who uses forum these days, just irc|twitter|discord|etc and use some scraping to re-org those messages into forum-style-converstion for archiving
[00:26:54] <pulse> i think it was free but can't remember
[00:27:03] <pulse> yolo, twitter sucks, discord sucks, facebook sucks
[00:27:17] <pulse> forums are a really good way of exchanging information online
[00:27:18] <rpav> everything sucks
[00:27:25] <pulse> irc and forums are kinda cool
[00:27:28] <rpav> itj's just a matter of what sucks the least
[00:27:28] <pulse> given decent admins
[00:27:37] <Shell> it always had cracked versions floating about that everyone used cos running on vbulletin was a signal you were a "serious forum"
[00:27:45] <pulse> hmm
[00:28:01] <yolo> simpility rules(e.g. irc, hacknews) but it's only for geeks, non-geeks like eye-candies
[00:28:11] <pulse> forums can look nice, too
[00:28:42] <yolo> irc is the grandfather of twiter
[00:28:58] <yolo> and qq and facebook, everything instant-messaging
[00:29:16] <pulse> seems like everyone is on discord nowadays, but i can't stand that stupid program
[00:29:18] <yolo> and slack or all the rest, they just moved irc to web
[00:29:26] <pulse> and the communities on discord are obnoxious more often than not
[00:29:28] <rpav> well, it's sortof an intermediate service with a lot of longevity
[00:30:03] <yolo> real man talk in text, the most is to add some emoji, even that is too much for me
[00:30:09] <rpav> irc was pretty late to the game in 88/89, there were plenty of messaging services prior
[00:31:09] <yolo> MaddHatter: any code example you can refer me to read? very intersted
[00:41:32] *** Quits: leonardus (sid358597@id-358597.tinside.irccloud.com) (*.net *.split)
[00:41:32] *** Quits: bjs (sid190364@user/bjs) (*.net *.split)
[00:41:32] *** Quits: jessicara (~shirogits@user/jessicara) (*.net *.split)
[00:41:32] *** Quits: c4017w_ (~c4017@209.52.68.8) (*.net *.split)
[00:41:32] *** Quits: sbrothy (~sbrothy@213.83.133.231) (*.net *.split)
[00:41:32] *** Quits: kurfen_ (~kurfen@213.152.188.7) (*.net *.split)
[00:41:32] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (*.net *.split)
[00:41:32] *** Quits: AmR (~AmREiSa@156.207.136.200) (*.net *.split)
[00:41:32] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (*.net *.split)
[00:41:32] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (*.net *.split)
[00:41:32] *** Quits: ullbeking_ (sid5364@ilkley.irccloud.com) (*.net *.split)
[00:41:32] *** Quits: Tokamak (~Tokamak@172.58.191.35) (*.net *.split)
[00:41:32] *** Quits: seninha (~seninha@user/seninha) (*.net *.split)
[00:41:32] *** Quits: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com) (*.net *.split)
[00:41:32] *** Quits: nickel8448 (~rahulwadh@147.80.76.34.bc.googleusercontent.com) (*.net *.split)
[00:41:32] *** Quits: d12fk (~heiko@exit0.net) (*.net *.split)
[00:41:33] *** Quits: xkuru (~xkuru@user/xkuru) (*.net *.split)
[00:41:33] *** Quits: BluesBoy (~bboy@user/bluesboy) (*.net *.split)
[00:41:33] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (*.net *.split)
[00:41:33] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (*.net *.split)
[00:41:33] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (*.net *.split)
[00:41:33] *** Quits: KombuchaKip (~kip@192.252.230.5) (*.net *.split)
[00:41:33] *** Quits: blackbeard420 (~blackbear@45.33.85.133) (*.net *.split)
[00:41:33] *** Quits: mitch0 (~mitch@94-21-182-186.pool.digikabel.hu) (*.net *.split)
[00:41:33] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (*.net *.split)
[00:41:33] *** Quits: cursey (~cursey@user/cursey) (*.net *.split)
[00:41:33] *** Quits: Donno (~donno@58.84.206.182) (*.net *.split)
[00:41:33] *** Quits: jns (~x@user/jns) (*.net *.split)
[00:41:33] *** Quits: purplex (~purplex@user/purplex) (*.net *.split)
[00:41:34] *** Quits: scoobydoo (~scooby@user/scoobydoo) (*.net *.split)
[00:41:34] *** Quits: peeps[zen] (~peepsalot@openscad/peepsalot) (*.net *.split)
[00:41:34] *** Quits: HvszrStykp (~X@81.171.62.84) (*.net *.split)
[00:41:34] *** Quits: ethoxy (~root@bison.alphaw0lf.xyz) (*.net *.split)
[00:41:34] *** Quits: Cheaterman (~Cheaterma@user/cheaterman) (*.net *.split)
[00:41:34] *** Quits: Spydar007 (~spydar007@user/spydar007) (*.net *.split)
[00:41:34] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (*.net *.split)
[00:41:34] *** Quits: Sevalecan (~sevalecan@user/sevalecan) (*.net *.split)
[00:41:34] *** Quits: NOTevil (~notevil@user/notevil) (*.net *.split)
[00:41:34] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (*.net *.split)
[00:41:34] *** Quits: lh_not_bot (~lh_bot@mingw-w64/developer/lhmouse) (*.net *.split)
[00:41:34] *** Quits: Soliton (~Soliton@wesnoth/developer/soliton) (*.net *.split)
[00:41:34] *** Quits: ac_slater (~ac_slater@c-67-168-6-19.hsd1.wa.comcast.net) (*.net *.split)
[00:41:34] *** Quits: flynn (~mcbloch@user/flynn) (*.net *.split)
[00:41:34] *** Quits: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se) (*.net *.split)
[00:41:34] *** Quits: galik (galik@gateway/vpn/airvpn/galik) (*.net *.split)
[00:41:34] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (*.net *.split)
[00:41:34] *** Quits: lxsameer (lxsameer@user/lxsameer) (*.net *.split)
[00:41:34] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (*.net *.split)
[00:41:34] *** Quits: plastico (~plastico@neomutt/plastico) (*.net *.split)
[00:41:34] *** Quits: nojhan (uid443807@id-443807.lymington.irccloud.com) (*.net *.split)
[00:41:34] *** Quits: emerent (~quassel@p200300cd5704438cba27ebfffed28a59.dip0.t-ipconnect.de) (*.net *.split)
[00:41:34] *** Quits: adeliktas (~adeliktas@i59F5F5AE.versanet.de) (*.net *.split)
[00:41:35] *** Quits: jancoow (~jancoow@user/jancoow) (*.net *.split)
[00:41:35] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (*.net *.split)
[00:41:35] *** Quits: miklcct (~quassel@vps.miklcct.com) (*.net *.split)
[00:41:35] *** Quits: sonOfRa (sonOfRa@user/sonofra) (*.net *.split)
[00:41:35] *** Quits: Furai (~Furai@furai.pl) (*.net *.split)
[00:41:35] *** Quits: DrMax (~DrMax@node-1w7jra94757g0kdpr9wjqf80y.ipv6.telus.net) (*.net *.split)
[00:41:35] *** Quits: buhman (sid411355@user/buhman) (*.net *.split)
[00:41:35] *** Quits: Bodger1234_ (sid503511@id-503511.uxbridge.irccloud.com) (*.net *.split)
[00:41:35] *** Quits: greyblue9 (sid500829@id-500829.ilkley.irccloud.com) (*.net *.split)
[00:41:35] *** Quits: Hobbyboy (Hobbyboy@hobbyboy.co.uk) (*.net *.split)
[00:41:35] *** Quits: BurumaSerafuku (~sjw@69.206.48.64) (*.net *.split)
[00:41:35] *** Quits: tm604 (~tom@perlsite.default.entitypark.uk0.bigv.io) (*.net *.split)
[00:41:35] *** Quits: adeliktas7 (~adeliktas@v15153.1blu.de) (*.net *.split)
[00:41:35] *** Quits: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com) (*.net *.split)
[00:41:35] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (*.net *.split)
[00:41:35] *** Quits: mIGu (mig21@user/naur) (*.net *.split)
[00:41:35] *** Quits: edr (~edr@user/edr) (*.net *.split)
[00:41:35] *** Quits: naur (naur@user/naur) (*.net *.split)
[00:41:35] *** Quits: mattf (mattf@2600:3c03::f03c:92ff:fea6:56a4) (*.net *.split)
[00:41:35] *** Quits: AssKoala (~asskoala@user/asskoala) (*.net *.split)
[00:41:35] *** Quits: fluter (~fluter@user/fluter) (*.net *.split)
[00:41:35] *** Quits: Ameisen (~ameisen@digitalcarbide.com) (*.net *.split)
[00:41:36] *** Quits: OnlineCop (~OnlineCop@user/onlinecop) (*.net *.split)
[00:41:36] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (*.net *.split)
[00:41:36] *** Quits: unyu (~pyon@user/pyon) (*.net *.split)
[00:41:36] *** Quits: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9) (*.net *.split)
[00:41:36] *** Quits: niska (~niska@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[00:41:36] *** Quits: djinni (~djinni@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[00:41:36] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (*.net *.split)
[00:41:36] *** Quits: Kebianizao (~Kebianiza@188.127.160.11) (*.net *.split)
[00:41:36] *** Quits: riksteri (d20812115c@2604:bf00:561:2000::1e6) (*.net *.split)
[00:41:36] *** Quits: qqlq (41d9a4cfcf@2604:bf00:561:2000::2c0) (*.net *.split)
[00:41:36] *** Quits: FLHerne (flh@flherne.uk) (*.net *.split)
[00:41:36] *** Quits: lewisje (~lewisje@72.49.207.113) (*.net *.split)
[00:41:36] *** Quits: phoenix (phoenix@user/phoenix) (*.net *.split)
[00:41:36] *** Quits: RandomReader (~RandomRea@user/randomreader) (*.net *.split)
[00:41:36] *** Quits: nolyc (~nolyc@tinodidriksen.com) (*.net *.split)
[00:41:36] *** Quits: psb___ (sid500598@id-500598.ilkley.irccloud.com) (*.net *.split)
[00:41:36] *** Quits: bdt (~bdt@155.51-174-24.customer.lyse.net) (*.net *.split)
[00:41:36] *** Quits: rb (~augh@theguntretort.com) (*.net *.split)
[00:41:36] *** Quits: udet_ (~udet@ve603.venus.servdiscount-customer.com) (*.net *.split)
[00:41:36] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (*.net *.split)
[00:41:37] *** Quits: msim_ (~msim@2001:8003:d194:d000::d8d) (*.net *.split)
[00:41:37] *** Quits: cncr04s (~cncr04s@afxr.net) (*.net *.split)
[00:41:37] *** Quits: m42e (~m42e@pb42.de) (*.net *.split)
[00:41:37] *** Quits: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de) (*.net *.split)
[00:41:37] *** Quits: nshire_ (~nshire@47.146.41.156) (*.net *.split)
[00:41:37] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (*.net *.split)
[00:41:37] *** Quits: autark (~autark@ti0048a400-0869.bb.online.no) (*.net *.split)
[00:41:37] *** Quits: hfsoulz (~hfsoulz@user/hfsoulz) (*.net *.split)
[00:41:37] *** Quits: ZeroKnight (zeroknight@dimensionzero.net) (*.net *.split)
[00:41:37] *** Quits: MaddHatter (~maddhatt@user/maddhatter) (*.net *.split)
[00:41:37] *** Quits: Dru (~BigDru@cpeac202e794c73-cmac202e794c70.cpe.net.fido.ca) (*.net *.split)
[00:41:37] *** Quits: causative (~halberd@user/causative) (*.net *.split)
[00:41:37] *** Quits: Svitkona (~Svitkona@157.245.38.135) (*.net *.split)
[00:41:37] *** Quits: Cienisty (Cienisty@user/cienisty) (*.net *.split)
[00:41:37] *** Quits: Raziel (~Raziel@user/raziel) (*.net *.split)
[00:41:37] *** Quits: syrius (syrius@titan.stormtek.net) (*.net *.split)
[00:41:37] *** Quits: deepy (deepy@user/deepy) (*.net *.split)
[00:41:37] *** Quits: obiwahn (~heini@user/obiwahn) (*.net *.split)
[00:41:37] *** Quits: geordi (~geordi@tinodidriksen.com) (*.net *.split)
[00:41:37] *** Quits: nelubit (~nelubit@user/nelubit) (*.net *.split)
[00:41:37] *** Quits: sonic (~sonic@user/sonic) (*.net *.split)
[00:41:37] *** Quits: Cyp (~cyp@213.237.88.120) (*.net *.split)
[00:41:37] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (*.net *.split)
[00:41:37] *** Quits: alex88 (~alex88@ip72-207-140-105.lv.lv.cox.net) (*.net *.split)
[00:41:37] *** Quits: eck (~root@user/eck) (*.net *.split)
[00:41:37] *** Quits: ivan (~ivan@user/ivan) (*.net *.split)
[00:41:37] *** Quits: minto (~mintograd@47.201.5.61) (*.net *.split)
[00:41:37] *** Quits: elemongw (~elemongw@20.107.36.50) (*.net *.split)
[00:41:37] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (*.net *.split)
[00:41:37] *** Quits: kaichiuchu (~mike@user/kaichiuchu) (*.net *.split)
[00:41:37] *** Quits: proller (~p@2a02:6b8:b081:1202::1:10) (*.net *.split)
[00:41:37] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (*.net *.split)
[00:41:37] *** Quits: kevr (~kevr@user/kevr) (*.net *.split)
[00:41:37] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (*.net *.split)
[00:41:37] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (*.net *.split)
[00:41:37] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (*.net *.split)
[00:41:37] *** Quits: teepee (~teepee@openscad/teepee) (*.net *.split)
[00:41:37] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (*.net *.split)
[00:41:37] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (*.net *.split)
[00:41:37] *** Quits: CalamityBlue (~CalamityB@2603-8000-d907-cec8-414b-3d39-bc9b-3dcb.res6.spectrum.com) (*.net *.split)
[00:41:37] *** Quits: ville (~ville@user/ville) (*.net *.split)
[00:41:37] *** Quits: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631) (*.net *.split)
[00:41:38] *** Quits: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76) (*.net *.split)
[00:41:38] *** Quits: oj (oj@user/oj) (*.net *.split)
[00:41:38] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (*.net *.split)
[00:41:38] *** Quits: traxex (traxex@user/traxex) (*.net *.split)
[00:41:38] *** Quits: gothicserpent (~gothicser@2604:a880:4:1d0::176:6000) (*.net *.split)
[00:41:38] *** Quits: imMute (~immute@user/immute) (*.net *.split)
[00:41:38] *** Quits: xisop (~xisop@bnull.net) (*.net *.split)
[00:41:38] *** Quits: tabakhase (tabakhase@user/tabakhase) (*.net *.split)
[00:41:38] *** Quits: urdh (~urdh@user/urdh) (*.net *.split)
[00:41:38] *** Quits: computerquip (sid423484@user/computerquip) (*.net *.split)
[00:41:38] *** Quits: shenghi (~shenghi@chrysocolla.mutablevoid.org) (*.net *.split)
[00:41:39] *** Quits: Kerr (~quassel@2601:602:ce00:c8d0:cb1b:59a4:8a8b:230c) (*.net *.split)
[00:41:39] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (*.net *.split)
[00:41:39] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (*.net *.split)
[00:41:39] *** Quits: ivii (~ivan@user/ivii) (*.net *.split)
[00:41:39] *** Quits: temp_user_2022 (~amit@2601:445:447f:a2f6:c0a2:d41c:2ddb:9e2e) (*.net *.split)
[00:41:39] *** Quits: Roughy (~mdaw45ns@user/roughy) (*.net *.split)
[00:41:39] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (*.net *.split)
[00:41:39] *** Quits: DSpider (DSpider@2a02:2f00:1ff:ffff::646c:6198) (*.net *.split)
[00:41:39] *** Quits: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b) (*.net *.split)
[00:41:39] *** Quits: kristjansson (sid126207@id-126207.tinside.irccloud.com) (*.net *.split)
[00:41:39] *** Quits: Terminus (~null@user/terminus) (*.net *.split)
[00:41:39] *** Quits: kalven (~calvin@2a02:470:84:102::24) (*.net *.split)
[00:41:39] *** Quits: MetaNova (zero-one@znc/supporter/metanova) (*.net *.split)
[00:41:39] *** Quits: cpuid (~cpuid@user/cpuid) (*.net *.split)
[00:41:39] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (*.net *.split)
[00:41:39] *** Quits: raekye (~raekye@creatifcubed.com) (*.net *.split)
[00:41:39] *** Quits: wyre (~wyre@user/wyre) (*.net *.split)
[00:41:39] *** Quits: meicceli (meicceli@kapsi.fi) (*.net *.split)
[00:41:39] *** Quits: amosbird (~amosbird@13.75.119.182) (*.net *.split)
[00:41:39] *** Quits: xq (~xq@user/xq) (*.net *.split)
[00:41:39] *** Quits: Artea (~Lufia@artea.com.pt) (*.net *.split)
[00:41:40] *** Quits: InPhase (~InPhase@openscad/inphase) (*.net *.split)
[00:41:40] *** Quits: Ara (~Ara@user/ara) (*.net *.split)
[00:41:40] *** Quits: TingPing (sid2800@id-2800.helmsley.irccloud.com) (*.net *.split)
[00:41:40] *** Quits: renopt (~renopt@lisp.us.to) (*.net *.split)
[00:41:40] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca) (*.net *.split)
[00:41:40] *** Quits: magla (~gelignite@55d436fa.access.ecotel.net) (*.net *.split)
[00:41:40] *** Quits: Simplar (~Simplar@188.163.93.241) (*.net *.split)
[00:41:40] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (*.net *.split)
[00:41:40] *** Quits: adder` (~adder@user/adder) (*.net *.split)
[00:41:40] *** Quits: Khoyo_ (~khoyo@user/khoyo) (*.net *.split)
[00:41:40] *** Quits: foul_owl (~kerry@94.140.8.105) (*.net *.split)
[00:41:40] *** Quits: noarb (~noarb@user/noarb) (*.net *.split)
[00:41:40] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (*.net *.split)
[00:41:40] *** Quits: Fairy97 (~Fairy@ti0004a400-6144.bb.online.no) (*.net *.split)
[00:41:40] *** Quits: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi) (*.net *.split)
[00:41:40] *** Quits: m5zs7k (aquares@web10.mydevil.net) (*.net *.split)
[00:41:40] *** Quits: PJBoy (~PJBoy@user/pjboy) (*.net *.split)
[00:41:40] *** Quits: robod34 (~Username@79.113.227.62) (*.net *.split)
[00:41:40] *** Quits: Spirit532 (~Spirit532@user/Spirit532) (*.net *.split)
[00:41:40] *** Quits: slavfox (~slavfox@93.158.232.111) (*.net *.split)
[00:41:40] *** Quits: Azem (~haise01@user/haise01) (*.net *.split)
[00:41:40] *** Quits: immibis (~hexchat@62.156.144.218) (*.net *.split)
[00:41:40] *** Quits: Munnu (~timo@81-197-122-250.elisa-laajakaista.fi) (*.net *.split)
[00:41:40] *** Quits: jkl (~jkl@user/jkl) (*.net *.split)
[00:41:40] *** Quits: DrMax_ (~DrMax@132.215.96.30) (*.net *.split)
[00:41:40] *** Quits: klys (~mdasoh@show.op8.us) (*.net *.split)
[00:41:40] *** Quits: Friithian (gunqqer@friithian.dev) (*.net *.split)
[00:41:40] *** Quits: dextaa (~DV@user/dextaa) (*.net *.split)
[00:41:40] *** Quits: pa (~pah@user/pah) (*.net *.split)
[00:41:40] *** Quits: yolo (~xxiao@li1120-73.members.linode.com) (*.net *.split)
[00:41:40] *** Quits: lru (~lru@240.ip-51-79-50.net) (*.net *.split)
[00:41:40] *** Quits: beanzilla (~beanzilla@user/beanzilla) (*.net *.split)
[00:41:40] *** Quits: malinus_ (~malinus@172.245.158.16) (*.net *.split)
[00:41:40] *** Quits: mathu (~matt@user/mathu) (*.net *.split)
[00:41:40] *** Quits: Dijky (~Dijky@user/dijky) (*.net *.split)
[00:41:40] *** Quits: dblsaiko (~saiko@crispy.dblsaiko.net) (*.net *.split)
[00:41:41] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a099:f855:9dea:3e32) (*.net *.split)
[00:41:41] *** Quits: pulse (~pulse@user/pulse) (*.net *.split)
[00:41:41] *** Quits: WeblordPepe (~pepe@104.248.83.14) (*.net *.split)
[00:41:41] *** Quits: dld (~davidlowr@2601:197:600:1210:942a:4683:ce04:8328) (*.net *.split)
[00:41:41] *** Quits: wielding (~wielding@user/wielding) (*.net *.split)
[00:41:41] *** Quits: etolier (~somewhere@122-199-44-127.ip4.superloop.com) (*.net *.split)
[00:41:41] *** Quits: Rayke (rayke@user/rayke) (*.net *.split)
[00:41:41] *** Quits: comrad (~quassel@holarse/comrad) (*.net *.split)
[00:41:41] *** Quits: Nixx (~quassel@bulbasaur.sjorsgielen.nl) (*.net *.split)
[00:41:41] *** Quits: tct (~tct@user/tct) (*.net *.split)
[00:41:41] *** Quits: jbalint (~jbalint@2600:6c44:117f:e98a:816a:9488:fb1:7b7) (*.net *.split)
[00:41:41] *** Quits: dzz007 (~dzz007@user/dzz007) (*.net *.split)
[00:41:41] *** Quits: tonitch (~tonitch@user/tonitch) (*.net *.split)
[00:41:41] *** Quits: kkd (~kkd@255.205.154.104.bc.googleusercontent.com) (*.net *.split)
[00:41:41] *** Quits: barometz (~dvanb@i117058.upc-i.chello.nl) (*.net *.split)
[00:41:41] *** Quits: tbe_loki (~loki@loki.codes) (*.net *.split)
[00:41:41] *** Quits: fiesh (~fiesh@2003:fb:1018::21) (*.net *.split)
[00:41:41] *** Quits: woggle (~charles@c-va-26578d734e-1840-1.tingfiber.com) (*.net *.split)
[00:41:41] *** Quits: lockywolf (~lockywolf@public.lockywolf.net) (*.net *.split)
[00:41:41] *** Quits: orkim (~orkim@user/orkim) (*.net *.split)
[00:41:42] *** Quits: chris123123 (~bnc123@streuwerte.de) (*.net *.split)
[00:41:42] *** Quits: HeTo (henkka@beer.modeemi.fi) (*.net *.split)
[00:41:42] *** Quits: Trollmann (~Trollmann@user/trollmann) (*.net *.split)
[00:41:42] *** Quits: baltazar (~baltazar@94-21-182-186.pool.digikabel.hu) (*.net *.split)
[00:41:42] *** Quits: Shell (~shell@user/shell) (*.net *.split)
[00:41:42] *** Quits: zagura (~zagura@user/zagura) (*.net *.split)
[00:41:42] *** Quits: scruffyfurn (scruffyfur@turbous.xshellz.com) (*.net *.split)
[00:41:42] *** Quits: Dragoon (~Dragoon@user/dragoon) (*.net *.split)
[00:41:42] *** Quits: antto (~pewpew@imightbe.antonsavov.net) (*.net *.split)
[00:41:42] *** Quits: bv (~bv@user/bv) (*.net *.split)
[00:41:42] *** Quits: zinc_ (~zinc@163.ip-51-254-203.eu) (*.net *.split)
[00:41:42] *** Quits: manuels (~manuel@80.211.205.88) (*.net *.split)
[00:41:42] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (*.net *.split)
[00:41:42] *** Quits: scjg (~scjgmatri@2001:470:69fc:105::f5d6) (*.net *.split)
[00:41:43] *** Quits: Argorok (sid195487@id-195487.hampstead.irccloud.com) (*.net *.split)
[00:41:43] *** Quits: andreyv (~andrey@user/andreyv) (*.net *.split)
[00:41:43] *** Quits: useful_idiot (~useful_id@gateway/vpn/pia/usefulidiot/x-43226899) (*.net *.split)
[00:41:43] *** Quits: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl) (*.net *.split)
[00:41:43] *** Quits: xkoncek (xkoncek@lounge.fi.muni.cz) (*.net *.split)
[00:41:43] *** Quits: hackkitten (~hackkitte@94.31.104.136) (*.net *.split)
[00:41:43] *** Quits: LangerJan (~jan@user/langerjan) (*.net *.split)
[00:41:43] *** Quits: celphi (sid97751@user/celphi) (*.net *.split)
[00:41:43] *** Quits: packet_lozenge_ (~packet_lo@user/packet-lozenge/x-7125090) (*.net *.split)
[00:41:43] *** Quits: veverak (~veverak@ip-89-102-98-161.net.upcbroadband.cz) (*.net *.split)
[00:41:43] *** Quits: biberu (~biberu@user/biberu) (*.net *.split)
[00:41:43] *** Quits: Alipha (~AliphaX@user/alipha) (*.net *.split)
[00:41:43] *** Quits: mattgirv (quassel@apps.fossgalaxy.com) (*.net *.split)
[00:41:43] *** Quits: rpav (~rpav@user/rpav) (*.net *.split)
[00:41:43] *** Quits: montpol (montpol@fine.mouses.xyz) (*.net *.split)
[00:41:43] *** Quits: Adrinael (adrinael@dsl-hkibng21-54f8c5-237.dhcp.inet.fi) (*.net *.split)
[00:41:43] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[00:41:43] *** Quits: ghenry (~ghenry@ghenry.plus.com) (*.net *.split)
[00:41:43] *** Quits: letto (~letto@86.120.81.105) (*.net *.split)
[00:41:43] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:9151:64f9:5c4c:ad39) (*.net *.split)
[00:41:43] *** Quits: tlophd_becky__ (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4) (*.net *.split)
[00:41:43] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:6013:7539:4fef:cd22) (*.net *.split)
[00:41:43] *** Quits: Kakurady (~nekoyasha@2607:f2c0:eac8:3297:f02b:1d66:81c4:7595) (*.net *.split)
[00:41:43] *** Quits: ambasta (~ambasta@2001:470:69fc:105::1:3973) (*.net *.split)
[00:41:44] *** Quits: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4) (*.net *.split)
[00:41:44] *** Quits: NyB (~archon@2a02:169:1d9::1:0:0) (*.net *.split)
[00:41:44] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (*.net *.split)
[00:41:44] *** Quits: mort (~mort@188.166.114.29) (*.net *.split)
[00:41:44] *** Quits: DrinkyBird (~drinkybir@idlerpg/player/DrinkyBird) (*.net *.split)
[00:41:44] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (*.net *.split)
[00:41:44] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (*.net *.split)
[00:41:44] *** Quits: zmt00 (~zmt00@user/zmt00) (*.net *.split)
[00:41:44] *** Quits: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21) (*.net *.split)
[00:41:45] *** Quits: johnny (~johnny@user/johnny) (*.net *.split)
[00:41:45] *** Quits: xcm (~xcm@user/xcm) (*.net *.split)
[00:41:45] *** Quits: markand (~markand@markand.fr) (*.net *.split)
[00:41:45] *** Quits: BrandonArnold2 (~brandon@ec2-52-27-188-210.us-west-2.compute.amazonaws.com) (*.net *.split)
[00:41:45] *** Quits: micronnn (~micronn@user/micronn) (*.net *.split)
[00:41:45] *** Quits: prime (~prime@user/prime) (*.net *.split)
[00:41:45] *** Quits: sauce (~sauce@omae.wa.mou.shindei.ru) (*.net *.split)
[00:41:45] *** Quits: noent (~quassel@squint.a-oben.org) (*.net *.split)
[00:41:45] *** Quits: NiKaN (sid385034@id-385034.helmsley.irccloud.com) (*.net *.split)
[00:41:45] *** Quits: nightstrike (uid487@id-487.uxbridge.irccloud.com) (*.net *.split)
[00:41:45] *** Quits: tobs (~tobs@taboege.de) (*.net *.split)
[00:41:45] *** Quits: sunny93 (~sunny93@wireguard/tunneler/sunny93) (*.net *.split)
[00:41:45] *** Quits: Brewster (~Brewster@user/brewster) (*.net *.split)
[00:41:45] *** Quits: Guest8100 (~tinloaf@virt-no01.mrvm.net) (*.net *.split)
[00:41:45] *** Quits: lhtseng (sid15322@id-15322.helmsley.irccloud.com) (*.net *.split)
[00:41:45] *** Quits: greenbagels (~gb@user/greenbagels) (*.net *.split)
[00:41:45] *** Quits: Oxyd (~oxyd@user/oxyd) (*.net *.split)
[00:41:46] *** Quits: zoraj (~zoraj@209.126.81.159) (*.net *.split)
[00:44:14] *** Joins: xcm (~xcm@static.90.45.69.159.clients.your-server.de)
[00:44:14] *** Joins: flynn (~mcbloch@user/flynn)
[00:44:14] *** Joins: Soliton (~Soliton@wesnoth/developer/soliton)
[00:44:14] *** Joins: lh_not_bot (~lh_bot@mingw-w64/developer/lhmouse)
[00:44:14] *** Joins: ac_slater (~ac_slater@c-67-168-6-19.hsd1.wa.comcast.net)
[00:44:14] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[00:44:14] *** Joins: NOTevil (~notevil@user/notevil)
[00:44:14] *** Joins: Sevalecan (~sevalecan@user/sevalecan)
[00:44:14] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[00:44:14] *** Joins: Spydar007 (~spydar007@user/spydar007)
[00:44:14] *** Joins: Cheaterman (~Cheaterma@user/cheaterman)
[00:44:14] *** Joins: ethoxy (~root@bison.alphaw0lf.xyz)
[00:44:14] *** Joins: HvszrStykp (~X@81.171.62.84)
[00:44:14] *** Joins: peeps[zen] (~peepsalot@openscad/peepsalot)
[00:44:14] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[00:44:14] *** Joins: purplex (~purplex@user/purplex)
[00:44:14] *** Joins: jns (~x@user/jns)
[00:44:14] *** Joins: Donno (~donno@58.84.206.182)
[00:44:14] *** Joins: cursey (~cursey@user/cursey)
[00:44:14] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[00:44:14] *** Joins: mitch0 (~mitch@94-21-182-186.pool.digikabel.hu)
[00:44:14] *** Joins: blackbeard420 (~blackbear@45.33.85.133)
[00:44:14] *** Joins: KombuchaKip (~kip@192.252.230.5)
[00:44:14] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[00:44:14] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[00:44:14] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[00:44:14] *** Joins: BluesBoy (~bboy@user/bluesboy)
[00:44:14] *** Joins: xkuru (~xkuru@user/xkuru)
[00:44:14] *** Joins: d12fk (~heiko@exit0.net)
[00:44:14] *** Joins: nickel8448 (~rahulwadh@147.80.76.34.bc.googleusercontent.com)
[00:44:14] *** Joins: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com)
[00:44:14] *** Joins: seninha (~seninha@user/seninha)
[00:44:14] *** Joins: Tokamak (~Tokamak@172.58.191.35)
[00:44:14] *** Joins: ullbeking_ (sid5364@ilkley.irccloud.com)
[00:44:14] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[00:44:14] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[00:44:14] *** Joins: AmR (~AmREiSa@156.207.136.200)
[00:44:14] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[00:44:14] *** Joins: kurfen_ (~kurfen@213.152.188.7)
[00:44:14] *** Joins: sbrothy (~sbrothy@213.83.133.231)
[00:44:14] *** Joins: shenghi (~shenghi@chrysocolla.mutablevoid.org)
[00:44:14] *** Joins: computerquip (sid423484@user/computerquip)
[00:44:14] *** Joins: urdh (~urdh@user/urdh)
[00:44:14] *** Joins: tabakhase (tabakhase@user/tabakhase)
[00:44:14] *** Joins: xisop (~xisop@bnull.net)
[00:44:14] *** Joins: imMute (~immute@user/immute)
[00:44:14] *** erbium.libera.chat sets mode: +v npaperbot
[00:44:14] *** Joins: gothicserpent (~gothicser@2604:a880:4:1d0::176:6000)
[00:44:14] *** Joins: traxex (traxex@user/traxex)
[00:44:14] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[00:44:14] *** Joins: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76)
[00:44:14] *** Joins: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631)
[00:44:14] *** Joins: ville (~ville@user/ville)
[00:44:14] *** Joins: CalamityBlue (~CalamityB@2603-8000-d907-cec8-414b-3d39-bc9b-3dcb.res6.spectrum.com)
[00:44:14] *** Joins: zoraj (~zoraj@209.126.81.159)
[00:44:14] *** Joins: Oxyd (~oxyd@user/oxyd)
[00:44:14] *** Joins: greenbagels (~gb@user/greenbagels)
[00:44:14] *** Joins: lhtseng (sid15322@id-15322.helmsley.irccloud.com)
[00:44:14] *** Joins: Guest8100 (~tinloaf@virt-no01.mrvm.net)
[00:44:14] *** Joins: Brewster (~Brewster@user/brewster)
[00:44:14] *** Joins: sunny93 (~sunny93@wireguard/tunneler/sunny93)
[00:44:14] *** Joins: tobs (~tobs@taboege.de)
[00:44:14] *** Joins: nightstrike (uid487@id-487.uxbridge.irccloud.com)
[00:44:14] *** Joins: NiKaN (sid385034@id-385034.helmsley.irccloud.com)
[00:44:14] *** Joins: noent (~quassel@squint.a-oben.org)
[00:44:14] *** Joins: sauce (~sauce@omae.wa.mou.shindei.ru)
[00:44:14] *** Joins: prime (~prime@user/prime)
[00:44:14] *** Joins: micronnn (~micronn@user/micronn)
[00:44:14] *** Joins: BrandonArnold2 (~brandon@ec2-52-27-188-210.us-west-2.compute.amazonaws.com)
[00:44:14] *** Joins: markand (~markand@markand.fr)
[00:44:14] *** Joins: johnny (~johnny@user/johnny)
[00:44:14] *** Joins: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21)
[00:44:14] *** Joins: zmt00 (~zmt00@user/zmt00)
[00:44:14] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[00:44:14] *** Joins: HeTo (henkka@beer.modeemi.fi)
[00:44:14] *** Joins: chris123123 (~bnc123@streuwerte.de)
[00:44:14] *** Joins: orkim (~orkim@user/orkim)
[00:44:14] *** Joins: woggle (~charles@c-va-26578d734e-1840-1.tingfiber.com)
[00:44:14] *** Joins: fiesh (~fiesh@2003:fb:1018::21)
[00:44:14] *** Joins: tbe_loki (~loki@loki.codes)
[00:44:14] *** Joins: lockywolf (~lockywolf@public.lockywolf.net)
[00:44:14] *** Joins: barometz (~dvanb@i117058.upc-i.chello.nl)
[00:44:14] *** Joins: kkd (~kkd@255.205.154.104.bc.googleusercontent.com)
[00:44:14] *** Joins: tonitch (~tonitch@user/tonitch)
[00:44:14] *** Joins: dzz007 (~dzz007@user/dzz007)
[00:44:14] *** Joins: jbalint (~jbalint@2600:6c44:117f:e98a:816a:9488:fb1:7b7)
[00:44:14] *** Joins: tct (~tct@user/tct)
[00:44:14] *** Joins: Nixx (~quassel@bulbasaur.sjorsgielen.nl)
[00:44:14] *** Joins: comrad (~quassel@holarse/comrad)
[00:44:14] *** Joins: Rayke (rayke@user/rayke)
[00:44:14] *** Joins: etolier (~somewhere@122-199-44-127.ip4.superloop.com)
[00:44:14] *** Joins: wielding (~wielding@user/wielding)
[00:44:14] *** Joins: dld (~davidlowr@2601:197:600:1210:942a:4683:ce04:8328)
[00:44:14] *** Joins: WeblordPepe (~pepe@104.248.83.14)
[00:44:14] *** Joins: pulse (~pulse@user/pulse)
[00:44:14] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a099:f855:9dea:3e32)
[00:44:14] *** Joins: dblsaiko (~saiko@crispy.dblsaiko.net)
[00:44:14] *** Joins: kaichiuchu (~mike@user/kaichiuchu)
[00:44:14] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[00:44:14] *** Joins: elemongw (~elemongw@20.107.36.50)
[00:44:14] *** Joins: minto (~mintograd@47.201.5.61)
[00:44:14] *** Joins: ivan (~ivan@user/ivan)
[00:44:14] *** Joins: eck (~root@user/eck)
[00:44:14] *** Joins: alex88 (~alex88@ip72-207-140-105.lv.lv.cox.net)
[00:44:14] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[00:44:14] *** Joins: Cyp (~cyp@213.237.88.120)
[00:44:14] *** Joins: sonic (~sonic@user/sonic)
[00:44:14] *** Joins: nelubit (~nelubit@user/nelubit)
[00:44:14] *** Joins: geordi (~geordi@tinodidriksen.com)
[00:44:14] *** Joins: obiwahn (~heini@user/obiwahn)
[00:44:14] *** Joins: deepy (deepy@user/deepy)
[00:44:14] *** Joins: syrius (syrius@titan.stormtek.net)
[00:44:14] *** Joins: Raziel (~Raziel@user/raziel)
[00:44:14] *** Joins: Svitkona (~Svitkona@157.245.38.135)
[00:44:14] *** Joins: Cienisty (Cienisty@user/cienisty)
[00:44:14] *** Joins: causative (~halberd@user/causative)
[00:44:14] *** Joins: Dru (~BigDru@cpeac202e794c73-cmac202e794c70.cpe.net.fido.ca)
[00:44:14] *** Joins: ZeroKnight (zeroknight@dimensionzero.net)
[00:44:14] *** Joins: autark (~autark@ti0048a400-0869.bb.online.no)
[00:44:14] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[00:44:14] *** Joins: nshire_ (~nshire@47.146.41.156)
[00:44:14] *** Joins: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de)
[00:44:14] *** Joins: MaddHatter (~maddhatt@user/maddhatter)
[00:44:14] *** Joins: m42e (~m42e@pb42.de)
[00:44:14] *** Joins: cncr04s (~cncr04s@afxr.net)
[00:44:14] *** Joins: msim_ (~msim@2001:8003:d194:d000::d8d)
[00:44:14] *** Joins: CodeMouse92 (~CodeMouse@2600:6c46:6000:97b:70c6:453d:f96c:d693)
[00:44:14] *** Joins: Roughy (~mdaw45ns@ti0090a400-4467.bb.online.no)
[00:44:14] *** Joins: DrinkyBird (~drinkybir@idlerpg/player/DrinkyBird)
[00:44:14] *** Joins: mort (~mort@188.166.114.29)
[00:44:14] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[00:44:14] *** Joins: NyB (~archon@2a02:169:1d9::1:0:0)
[00:44:14] *** Joins: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4)
[00:44:14] *** Joins: ambasta (~ambasta@2001:470:69fc:105::1:3973)
[00:44:14] *** Joins: Kakurady (~nekoyasha@2607:f2c0:eac8:3297:f02b:1d66:81c4:7595)
[00:44:14] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:6013:7539:4fef:cd22)
[00:44:14] *** Joins: tlophd_becky__ (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4)
[00:44:14] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:9151:64f9:5c4c:ad39)
[00:44:14] *** Joins: letto (~letto@86.120.81.105)
[00:44:14] *** erbium.libera.chat sets mode: +v geordi
[00:44:14] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[00:44:14] *** Joins: bv (~bv@user/bv)
[00:44:14] *** Joins: antto (~pewpew@imightbe.antonsavov.net)
[00:44:14] *** Joins: Dragoon (~Dragoon@user/dragoon)
[00:44:14] *** Joins: scruffyfurn (scruffyfur@turbous.xshellz.com)
[00:44:14] *** Joins: zagura (~zagura@user/zagura)
[00:44:14] *** Joins: Shell (~shell@user/shell)
[00:44:14] *** Joins: baltazar (~baltazar@94-21-182-186.pool.digikabel.hu)
[00:44:14] *** Joins: Trollmann (~Trollmann@user/trollmann)
[00:44:14] *** Joins: c4017w__ (~c4017@209.52.68.8)
[00:44:14] *** Joins: Dijky (~Dijky@user/dijky)
[00:44:14] *** Joins: mathu (~matt@user/mathu)
[00:44:14] *** Joins: malinus_ (~malinus@172.245.158.16)
[00:44:14] *** Joins: lru (~lru@240.ip-51-79-50.net)
[00:44:14] *** Joins: beanzilla (~beanzilla@user/beanzilla)
[00:44:14] *** Joins: yolo (~xxiao@li1120-73.members.linode.com)
[00:44:14] *** Joins: pa (~pah@user/pah)
[00:44:14] *** Joins: dextaa (~DV@user/dextaa)
[00:44:14] *** Joins: Friithian (gunqqer@friithian.dev)
[00:44:14] *** Joins: klys (~mdasoh@show.op8.us)
[00:44:14] *** Joins: DrMax_ (~DrMax@132.215.96.30)
[00:44:14] *** Joins: jkl (~jkl@user/jkl)
[00:44:14] *** Joins: Munnu (~timo@81-197-122-250.elisa-laajakaista.fi)
[00:44:14] *** Joins: immibis (~hexchat@62.156.144.218)
[00:44:14] *** Joins: Azem (~haise01@user/haise01)
[00:44:14] *** Joins: slavfox (~slavfox@93.158.232.111)
[00:44:14] *** Joins: Spirit532 (~Spirit532@user/Spirit532)
[00:44:14] *** Joins: robod34 (~Username@79.113.227.62)
[00:44:14] *** Joins: PJBoy (~PJBoy@user/pjboy)
[00:44:14] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[00:44:14] *** Joins: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi)
[00:44:14] *** Joins: Fairy97 (~Fairy@ti0004a400-6144.bb.online.no)
[00:44:14] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[00:44:14] *** Joins: noarb (~noarb@user/noarb)
[00:44:14] *** Joins: foul_owl (~kerry@94.140.8.105)
[00:44:14] *** Joins: Khoyo_ (~khoyo@user/khoyo)
[00:44:14] *** Joins: adder` (~adder@user/adder)
[00:44:14] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[00:44:14] *** Joins: Simplar (~Simplar@188.163.93.241)
[00:44:14] *** Joins: magla (~gelignite@55d436fa.access.ecotel.net)
[00:44:14] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca)
[00:44:14] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[00:44:14] *** Joins: proller (~p@2a02:6b8:b081:1202::1:10)
[00:44:14] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Max SendQ exceeded)
[00:44:14] *** Quits: epony (epony@user/epony) (Max SendQ exceeded)
[00:44:32] *** Joins: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se)
[00:44:32] *** Joins: galik (galik@gateway/vpn/airvpn/galik)
[00:44:32] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[00:44:32] *** Joins: lxsameer (lxsameer@user/lxsameer)
[00:44:32] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[00:44:32] *** Joins: plastico (~plastico@neomutt/plastico)
[00:44:32] *** Joins: nojhan (uid443807@id-443807.lymington.irccloud.com)
[00:44:32] *** Joins: emerent (~quassel@p200300cd5704438cba27ebfffed28a59.dip0.t-ipconnect.de)
[00:44:32] *** Joins: adeliktas (~adeliktas@i59F5F5AE.versanet.de)
[00:44:32] *** Joins: jancoow (~jancoow@user/jancoow)
[00:44:32] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[00:44:32] *** Joins: miklcct (~quassel@vps.miklcct.com)
[00:44:32] *** Joins: sonOfRa (sonOfRa@user/sonofra)
[00:44:32] *** Joins: Furai (~Furai@furai.pl)
[00:44:32] *** Joins: DrMax (~DrMax@node-1w7jra94757g0kdpr9wjqf80y.ipv6.telus.net)
[00:44:32] *** Joins: buhman (sid411355@user/buhman)
[00:44:32] *** Joins: Bodger1234_ (sid503511@id-503511.uxbridge.irccloud.com)
[00:44:32] *** Joins: greyblue9 (sid500829@id-500829.ilkley.irccloud.com)
[00:44:32] *** Joins: Hobbyboy (Hobbyboy@hobbyboy.co.uk)
[00:44:32] *** Joins: BurumaSerafuku (~sjw@69.206.48.64)
[00:44:32] *** Joins: tm604 (~tom@perlsite.default.entitypark.uk0.bigv.io)
[00:44:32] *** Joins: adeliktas7 (~adeliktas@v15153.1blu.de)
[00:44:32] *** Joins: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com)
[00:44:32] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[00:44:32] *** Joins: mIGu (mig21@user/naur)
[00:44:32] *** Joins: edr (~edr@user/edr)
[00:44:32] *** Joins: naur (naur@user/naur)
[00:44:32] *** Joins: mattf (mattf@2600:3c03::f03c:92ff:fea6:56a4)
[00:44:32] *** Joins: AssKoala (~asskoala@user/asskoala)
[00:44:32] *** Joins: fluter (~fluter@user/fluter)
[00:44:32] *** Joins: Ameisen (~ameisen@digitalcarbide.com)
[00:44:32] *** Joins: OnlineCop (~OnlineCop@user/onlinecop)
[00:44:32] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[00:44:32] *** Joins: unyu (~pyon@user/pyon)
[00:44:32] *** Joins: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9)
[00:44:32] *** Joins: niska (~niska@static.38.6.217.95.clients.your-server.de)
[00:44:32] *** Joins: djinni (~djinni@static.38.6.217.95.clients.your-server.de)
[00:44:32] *** Joins: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[00:44:32] *** Joins: Kebianizao (~Kebianiza@188.127.160.11)
[00:44:32] *** Joins: qqlq (41d9a4cfcf@2604:bf00:561:2000::2c0)
[00:44:32] *** Joins: riksteri (d20812115c@2604:bf00:561:2000::1e6)
[00:44:32] *** Joins: FLHerne (flh@flherne.uk)
[00:44:32] *** Joins: lewisje (~lewisje@72.49.207.113)
[00:44:32] *** Joins: phoenix (phoenix@user/phoenix)
[00:44:32] *** Joins: RandomReader (~RandomRea@user/randomreader)
[00:44:32] *** Joins: nolyc (~nolyc@tinodidriksen.com)
[00:44:32] *** erbium.libera.chat sets mode: +v nolyc
[00:44:32] *** Joins: psb___ (sid500598@id-500598.ilkley.irccloud.com)
[00:44:32] *** Joins: bdt (~bdt@155.51-174-24.customer.lyse.net)
[00:44:32] *** Joins: rb (~augh@theguntretort.com)
[00:44:32] *** Joins: udet_ (~udet@ve603.venus.servdiscount-customer.com)
[00:44:38] *** Joins: dostoyevsky2 (~sck@static.251.39.47.78.clients.your-server.de)
[00:44:49] *** Joins: Kerr (~quassel@2601:602:ce00:c8d0:cb1b:59a4:8a8b:230c)
[00:44:49] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[00:44:49] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[00:44:49] *** Joins: ivii (~ivan@user/ivii)
[00:44:49] *** Joins: temp_user_2022 (~amit@2601:445:447f:a2f6:c0a2:d41c:2ddb:9e2e)
[00:44:49] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[00:44:49] *** Joins: DSpider (DSpider@2a02:2f00:1ff:ffff::646c:6198)
[00:44:49] *** Joins: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b)
[00:44:49] *** Joins: kristjansson (sid126207@id-126207.tinside.irccloud.com)
[00:44:49] *** Joins: Terminus (~null@user/terminus)
[00:44:49] *** Joins: kalven (~calvin@2a02:470:84:102::24)
[00:44:49] *** Joins: cpuid (~cpuid@user/cpuid)
[00:44:49] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[00:44:49] *** Joins: raekye (~raekye@creatifcubed.com)
[00:44:49] *** Joins: wyre (~wyre@user/wyre)
[00:44:49] *** Joins: meicceli (meicceli@kapsi.fi)
[00:44:49] *** Joins: amosbird (~amosbird@13.75.119.182)
[00:44:49] *** Joins: xq (~xq@user/xq)
[00:44:49] *** Joins: Artea (~Lufia@artea.com.pt)
[00:44:49] *** Joins: InPhase (~InPhase@openscad/inphase)
[00:44:49] *** Joins: Ara (~Ara@user/ara)
[00:44:49] *** Joins: TingPing (sid2800@id-2800.helmsley.irccloud.com)
[00:44:49] *** Joins: renopt (~renopt@lisp.us.to)
[00:44:56] *** Quits: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b) (Ping timeout: 245 seconds)
[00:44:58] *** Joins: epony (epony@lz2.eu)
[00:45:01] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[00:45:01] *** Joins: kevr (~kevr@user/kevr)
[00:45:01] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[00:45:01] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[00:45:01] *** Joins: teepee (~teepee@openscad/teepee)
[00:45:01] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[00:45:01] *** Joins: zinc_ (~zinc@163.ip-51-254-203.eu)
[00:45:01] *** Joins: manuels (~manuel@80.211.205.88)
[00:45:01] *** Joins: rdrg109 (~rdrg109@user/rdrg109)
[00:45:02] *** Joins: leonardus (sid358597@id-358597.tinside.irccloud.com)
[00:45:02] *** Joins: bjs (sid190364@user/bjs)
[00:45:02] *** Joins: jessicara (~shirogits@user/jessicara)
[00:45:08] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (Max SendQ exceeded)
[00:45:10] *** Quits: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76) (Ping timeout: 260 seconds)
[00:45:11] *** Quits: kevr (~kevr@user/kevr) (Max SendQ exceeded)
[00:45:17] *** Joins: scjg (~scjgmatri@2001:470:69fc:105::f5d6)
[00:45:17] *** Joins: Argorok (sid195487@id-195487.hampstead.irccloud.com)
[00:45:17] *** Joins: andreyv (~andrey@user/andreyv)
[00:45:17] *** Joins: useful_idiot (~useful_id@gateway/vpn/pia/usefulidiot/x-43226899)
[00:45:17] *** Joins: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl)
[00:45:17] *** Joins: xkoncek (xkoncek@lounge.fi.muni.cz)
[00:45:17] *** Joins: hackkitten (~hackkitte@94.31.104.136)
[00:45:17] *** Joins: LangerJan (~jan@user/langerjan)
[00:45:17] *** Joins: celphi (sid97751@user/celphi)
[00:45:17] *** Joins: packet_lozenge_ (~packet_lo@user/packet-lozenge/x-7125090)
[00:45:17] *** Joins: veverak (~veverak@ip-89-102-98-161.net.upcbroadband.cz)
[00:45:17] *** Joins: Alipha (~AliphaX@user/alipha)
[00:45:17] *** Joins: biberu (~biberu@user/biberu)
[00:45:17] *** Joins: mattgirv (quassel@apps.fossgalaxy.com)
[00:45:17] *** Joins: rpav (~rpav@user/rpav)
[00:45:17] *** Joins: montpol (montpol@fine.mouses.xyz)
[00:45:17] *** Joins: Adrinael (adrinael@dsl-hkibng21-54f8c5-237.dhcp.inet.fi)
[00:45:17] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[00:45:19] *** Quits: scjg (~scjgmatri@2001:470:69fc:105::f5d6) (Ping timeout: 245 seconds)
[00:45:25] *** Quits: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21) (Ping timeout: 240 seconds)
[00:45:25] *** Quits: ambasta (~ambasta@2001:470:69fc:105::1:3973) (Ping timeout: 250 seconds)
[00:45:25] *** Quits: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4) (Ping timeout: 250 seconds)
[00:45:38] *** Quits: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631) (Ping timeout: 260 seconds)
[00:46:00] *** Quits: CodeMouse92 (~CodeMouse@2600:6c46:6000:97b:70c6:453d:f96c:d693) (Client Quit)
[00:46:14] *** Joins: CodeMouse92 (~CodeMouse@2600:6c46:6000:97b:70c6:453d:f96c:d693)
[00:46:14] *** Quits: wielding (~wielding@user/wielding) (Ping timeout: 252 seconds)
[00:46:58] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[00:47:11] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Read error: Connection reset by peer)
[00:47:13] *** Quits: dostoyevsky2 (~sck@static.251.39.47.78.clients.your-server.de) (Client Quit)
[00:47:26] *** Joins: dostoyevsky2 (~sck@static.251.39.47.78.clients.your-server.de)
[00:47:26] *** Quits: kristjansson (sid126207@id-126207.tinside.irccloud.com) (Ping timeout: 245 seconds)
[00:47:41] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[00:47:49] *** Quits: NiKaN (sid385034@id-385034.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[00:48:04] *** Quits: dostoyevsky2 (~sck@static.251.39.47.78.clients.your-server.de) (Client Quit)
[00:48:20] *** Joins: dostoyevsky2 (~sck@static.251.39.47.78.clients.your-server.de)
[00:48:39] *** Joins: Uswald (~leandre@2a01cb040075f90061f6d68a0f1678fa.ipv6.abo.wanadoo.fr)
[00:49:32] *** Joins: kristjansson (sid126207@tinside.irccloud.com)
[00:50:01] *** Joins: NiKaN (sid385034@helmsley.irccloud.com)
[00:51:54] *** Quits: c4017w__ (~c4017@209.52.68.8) (Quit: Leaving)
[00:52:11] *** Quits: magla (~gelignite@55d436fa.access.ecotel.net) (Quit: Stay safe!)
[00:52:32] <LordKalma> Hahaha all went to shit
[00:52:41] *** Joins: c4017w (~c4017@209.52.68.8)
[00:53:01] *** Quits: Uswald (~leandre@2a01cb040075f90061f6d68a0f1678fa.ipv6.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[00:54:17] *** Quits: c4017w (~c4017@209.52.68.8) (Client Quit)
[00:54:36] *** Joins: c4017w (~c4017@209.52.68.8)
[00:56:35] *** Joins: fukuda (~fukuda@2804:431:c7f5:a3c3:9fdb:d7d3:c39f:3ce6)
[00:56:40] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Quit: Leaving)
[00:57:31] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[00:58:13] *** Quits: fukuda (~fukuda@2804:431:c7f5:a3c3:9fdb:d7d3:c39f:3ce6) (Client Quit)
[00:58:28] *** Joins: oj (oj@2a01:7e01::f03c:92ff:fea3:38a3)
[00:59:10] *** Joins: fukuda (~fukuda@2804:431:c7f5:a3c3:9fdb:d7d3:c39f:3ce6)
[00:59:24] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[01:01:49] *** epony is now known as Guest3959
[01:02:02] *** Joins: kevr (~kevr@user/kevr)
[01:02:04] *** CodeMouse92 is now known as Guest1476
[01:02:19] *** Joins: joaofukuda (~joaofukuk@2804:431:c7f5:a3c3:9fdb:d7d3:c39f:3ce6)
[01:02:20] *** Joins: MetaNova (zero-one@znc/supporter/metanova)
[01:02:23] <ashafq> LordKalma: I guess someone segfaulted.
[01:02:23] *** Quits: Guest1476 (~CodeMouse@2600:6c46:6000:97b:70c6:453d:f96c:d693) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[01:02:33] <ashafq> LordKalma: at-least they have segments to fault on ☹️
[01:02:39] *** Joins: Guest1476 (~CodeMouse@user/codemouse92)
[01:02:54] <LordKalma> Hahah the notice said some networking shenanigans
[01:03:22] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[01:03:29] *** Quits: dostoyevsky2 (~sck@static.251.39.47.78.clients.your-server.de) (Quit: leaving)
[01:03:32] *** Joins: hfsoulz (~hfsoulz@user/hfsoulz)
[01:03:40] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[01:04:39] *** Guest1476 is now known as CodeMouse92
[01:06:02] *** Joins: rdrg109 (~rdrg109@user/rdrg109)
[01:09:45] <lxsameer> (due to the split) hey folks, I want to have a static hashmap of fixed integers to fixed strings (a struct with 3 string fields) all the data is known at compile time. what's the proper way to implement this?
[01:10:15] *** Quits: fukuda (~fukuda@2804:431:c7f5:a3c3:9fdb:d7d3:c39f:3ce6) (Quit: WeeChat 3.4)
[01:11:51] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:9151:64f9:5c4c:ad39) (Ping timeout: 250 seconds)
[01:12:17] <rpav> unordered_map isn't constexpr until maybe very recently? but you can const std::unordered_map<int, std::string_view>
[01:12:36] *** Quits: oj (oj@2a01:7e01::f03c:92ff:fea3:38a3) (Quit: No Ping reply in 180 seconds.)
[01:12:43] <rpav> or if you need it to be ordered, map
[01:12:57] <CarloWood> lxsameer: That depends, as usual.  How many integers are there? What values can they have?
[01:13:06] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:9926:39c3:76e4:f1da)
[01:13:46] <rpav> yeah, if they're _very_ contiguous, you could use a vector
[01:14:34] *** Joins: markong (~kvirc@213.146.188.203)
[01:15:25] <lxsameer> yeah i can use a vector actually
[01:15:42] *** Joins: EdFletcher (~PKD@user/edfletcher)
[01:15:54] <CarloWood> For some people proper means "I want it to work today and be easy to understand".  For me it means "I can't accept it when it uses one more clock cycle than the absolute minimum that is required to get it to work".
[01:16:21] <PJBoy> guess you're only allowed to work on a single architecture then
[01:16:22] <rpav> you could generate a perfect hash, even if they're not, i guess
[01:16:26] *** Joins: oj (oj@user/oj)
[01:16:51] <rpav> PJBoy: one that doesn't multitask, either
[01:16:52] <PJBoy> also man, that's massively unclear
[01:16:55] <CarloWood> #ifdef __QUANTUM_COMPUTER
[01:17:10] <pulse> "perfect hash" isn't that an oxymoron
[01:17:22] <lxsameer> so I have a triple of strings that describes an entity, I have many of them. and It's totally ok to use a vector
[01:17:34] <rpav> pulse: https://en.wikipedia.org/wiki/Perfect_hash_function
[01:17:43] <PJBoy> when you have to decide between having a branch and allowing to end early, or doing a whole dataset but faster
[01:17:45] <CarloWood> lxsameer: you never answered my questions.
[01:17:52] <PJBoy> that's not a decision you can make flawlessly
[01:17:58] <rpav> gperf will generate them for you .. not sure if its output is GPL or what
[01:18:07] *** Quits: robod34 (~Username@79.113.227.62) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:18:17] <PJBoy> I wrote a perfect hash data structure once
[01:18:26] <lxsameer> CarloWood: which one?
[01:18:29] <PJBoy> I've been meaning to see if I can constexpr-ise it for years now
[01:18:44] <pulse> rpav, i see
[01:20:14] <rpav> need an edexpr .. it's evaluated right in your editor, as you type it!
[01:20:51] <lxsameer> CarloWood: for integers, it will be an ordered list of integer starting from 0, and right now there are only about 40 of them but it might grow in the future
[01:21:23] <rpav> well, as long as it doesn't grow in the past, and you inadvertently prevent humanity from evolving
[01:21:30] <CarloWood> lxsameer: then I'd use a std::array (you said it was all known at compile time)
[01:22:11] *** Joins: scjg (~scjgmatri@2001:470:69fc:105::f5d6)
[01:22:22] <CarloWood> Put the array in a .cpp file of course. Not a header.
[01:22:33] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[01:22:57] *** Joins: ivii (~ivan@user/ivii)
[01:24:16] <lxsameer> CarloWood: cool, thank you
[01:27:01] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[01:29:43] <kalven> a constexpr std::unordered_map wouldn't be very useful for this anyway
[01:31:11] *** Joins: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b)
[01:32:41] *** Joins: badone (~badone@209.132.189.152)
[01:34:30] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[01:35:09] *** Joins: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76)
[01:41:55] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:42:02] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:42:02] *** ChanServ sets mode: +v npaperbot
[01:42:08] *** Joins: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631)
[01:42:09] *** Joins: ambasta (~ambasta@2001:470:69fc:105::1:3973)
[01:43:46] *** Quits: DSpider (DSpider@2a02:2f00:1ff:ffff::646c:6198) (Quit: Leaving)
[01:44:46] *** Joins: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4)
[01:44:59] *** Joins: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21)
[01:45:49] *** Joins: wielding (~wielding@user/wielding)
[01:48:24] *** Joins: TheGuestMovie (~TheGuestM@173.231.114.74)
[01:52:31] <TheGuestMovie> Is there some tool to programmatically create virtual machines? Like run a tool that will generate a VBox (or VMware, or whatever) VM with Ubuntu 20.04, that apt installs packages A B C, wgets some files, etc. Like a Dockerfile, for creating VMs.
[01:53:02] *** Quits: EdFletcher (~PKD@user/edfletcher) (Remote host closed the connection)
[01:53:34] <TheGuestMovie> My goal is self-documenting the VM creation in a file
[01:53:35] <BurumaSerafuku> TheGuestMovie: in C++?
[01:54:13] <TheGuestMovie> BurumaSerafuku: sorry, i meant "declaratively" not "programmatically'.
[01:54:24] <BurumaSerafuku> this is a C++ channel
[01:54:29] <TheGuestMovie> oh sorry, wrong channel
[01:54:35] <TheGuestMovie> thought this was #linux
[01:54:40] <TheGuestMovie> clicked the wrong tab
[01:54:50] *** Joins: EdFletcher (~PKD@user/edfletcher)
[01:55:17] *** Joins: c4017w_ (~c4017@209.52.68.8)
[01:55:50] <yolo> TheGuestMovie: nearly all of them(kvm,vbox,vmware) have their command line tools to let you do them programtically(scripting them)
[01:56:24] <Shell> TheGuestMovie: you're looking for Vagrant, fwiw.
[01:56:27] <TheGuestMovie> yolo: I want to do post-VM setup too though. apt install packages, wget + extract packages, run arbitrary Linux commands during setup, etc
[01:56:46] <TheGuestMovie> Shell: thanks, checking it out
[01:56:51] *** Quits: AmR (~AmREiSa@156.207.136.200) (Remote host closed the connection)
[01:57:26] *** Joins: AmR (~AmREiSa@156.207.136.200)
[01:57:34] <yolo> well unlike docker those full-sized vm are not an docker-application, so you probably have-to login and apt-get/rpm/whatever
[01:58:05] <yolo> vagrant is yet another layer of dependency which I never want to deal with
[01:58:53] *** Quits: c4017w (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[01:59:22] <yolo> to do it programmactially on full VMs, ansible might be the right approach though
[01:59:32] <BurumaSerafuku> in C++
[01:59:54] <yolo> popen(ansibile)...
[02:00:05] <TheGuestMovie> yolo: it would appear people who use Vagrant just use it for creating the VM, then follow up with Chef or Ansible to do the post-install steps
[02:00:35] <yolo> yes, or you script the installation yourself, vagrant is not very useful for me at least
[02:00:39] <TheGuestMovie> but this can be done in the Vagrant file
[02:01:21] <yolo> a vagrant file or a few lines of shell scripts, your choice
[02:01:34] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[02:01:55] <TheGuestMovie> yeah, I'm thinking I'll just provide a bash script. This is a bit disappointing, I was hoping for something full-auto, but oh well
[02:02:19] <TheGuestMovie> I can still provide them with a "vagrant up" command that gets a public Ubuntu 20.04 box at least
[02:02:24] <Friithian> why would you ever use gcc's -w (ignore all warnings)?
[02:03:44] <yolo> a simple script to set up a vm with default OS(e.g. linux), another ansible to set up the rest (packages)
[02:04:23] <TheGuestMovie> yep
[02:13:33] <PJBoy> I use gcc's -w for pastes sometimes
[02:16:05] <Alipha> I use -w all the time because I know better than the compiler
[02:17:06] *** Quits: TheGuestMovie (~TheGuestM@173.231.114.74) (Quit: Client closed)
[02:19:48] <yolo> I never used -w because as far as I know there is no such flag, I do use another 20+ -W
[02:20:11] <Friithian> -w  Inhibit all warning messages.
[02:22:29] <yolo> failed to find that in `man gcc` and `gcc --help`, but yet it can be used without errors
[02:22:42] <Friithian> it's in my man page *shrug*
[02:23:03] <yolo> so -w means the opposite -W then
[02:25:01] <yolo> found it, line 2534, honestly i did not know, maybe nobody should ever use it
[02:25:35] <Friithian> that's why I was confused by its existance
[02:31:29] <johnny> why should nobody use it?
[02:32:17] <johnny> also, i wondr how it behaves in the presence of the specifically enabling warning flags?
[02:32:25] <johnny> like -w -Wno-conversion
[02:32:32] <johnny> err
[02:32:37] <johnny> -Wconversion excuse me
[02:34:11] *** Quits: mIGu (mig21@user/naur) (Remote host closed the connection)
[02:35:13] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[02:35:39] *** Quits: Fairy97 (~Fairy@ti0004a400-6144.bb.online.no) (Ping timeout: 256 seconds)
[02:36:04] *** Joins: mIGu (mig21@user/naur)
[02:37:25] <PJBoy> !grab Alipha
[02:37:26] <nolyc> PJBoy: The operation succeeded.
[02:38:03] <PJBoy> that's a classic Alipha thing to say
[02:39:52] <pulse> i use -Wall but i let Mexico pay for it
[02:40:08] <pulse> don't grab me
[02:40:28] <Friithian> -Wall -Wextra -pedantic -Werror
[02:43:16] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.4)
[02:43:23] <johnny> -w -Wall
[02:43:36] <very_sneaky> -Wsanitizer=address,undefined
[02:45:46] *** Quits: Simplar (~Simplar@188.163.93.241) (Quit: Going offline, see ya! (www.adiirc.com))
[02:45:51] *** Quits: sbrothy (~sbrothy@213.83.133.231) (Read error: Connection reset by peer)
[02:46:01] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[02:46:04] <yolo> As a pedantic I found Obama's house has -Wall :)
[02:46:05] <AmR> Mysoft: This is last ver I try https://pastebin.com/UCg9sABR I try replace drive[4] with GetFilePath if that is right way.
[02:46:24] <AmR> This is last ver I try https://pastebin.com/UCg9sABR I try replace drive[4] with GetFilePath if that is right way.
[02:46:24] *** Joins: ivii (~ivan@user/ivii)
[02:52:59] *** Quits: ivii (~ivan@user/ivii) (Ping timeout: 256 seconds)
[02:54:15] *** Joins: ivii (~ivan@user/ivii)
[02:55:49] *** Joins: c4017w__ (~c4017@209.52.68.8)
[02:56:13] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[02:58:12] *** Joins: Led_Zeppelin2 (~user@cpe-68-172-241-89.nj.res.rr.com)
[02:58:37] *** Quits: Stryyker (~stryyke1@about/windows/staff/stryyker) (Remote host closed the connection)
[02:58:40] <Led_Zeppelin2> i am including a library which is header only. I am not specifying a -I but not sure how g++ is finding it.
[02:58:57] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[03:00:14] <Friithian> well if you're on linux and installed it via your package manager it'll be in /usr/include/ (or something) which the compiler automatically searches
[03:04:56] <lru> Led_Zeppelin2: what directory is it in, out of curiosity?
[03:14:19] *** Quits: nojhan (uid443807@id-443807.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[03:15:39] *** Quits: proller (~p@2a02:6b8:b081:1202::1:10) (Ping timeout: 256 seconds)
[03:16:18] *** Joins: c4017w_ (~c4017@209.52.68.8)
[03:20:11] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[03:21:04] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[03:22:57] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 250 seconds)
[03:28:31] *** Joins: proller (~p@80.240.216.69)
[03:32:39] <Led_Zeppelin2> lru, figured it out.
[03:32:46] <Led_Zeppelin2> an include file was including it :p
[03:32:58] <lru> cool
[03:33:29] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[03:33:57] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[03:39:00] *** Quits: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se) (Ping timeout: 250 seconds)
[03:48:06] *** Quits: emerent (~quassel@p200300cd5704438cba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[03:48:24] *** Joins: emerent (~quassel@p200300cd5704437cba27ebfffed28a59.dip0.t-ipconnect.de)
[03:49:53] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[03:49:57] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 240 seconds)
[03:53:36] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:58:14] *** Quits: AmR (~AmREiSa@156.207.136.200) (Remote host closed the connection)
[03:58:40] *** Joins: AmR (~AmREiSa@156.207.136.200)
[04:00:55] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[04:01:07] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[04:03:41] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[04:06:08] *** Joins: Stryyker (~stryyke1@about/windows/staff/stryyker)
[04:12:25] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[04:12:26] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 245 seconds)
[04:13:10] *** Joins: szutt (~szutt@116.37.2.145)
[04:16:48] *** Joins: c4017w__ (~c4017@209.52.68.8)
[04:20:07] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[04:20:15] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[04:20:29] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[04:22:10] *** Quits: AmR (~AmREiSa@156.207.136.200) (Remote host closed the connection)
[04:22:36] *** Joins: AmR (~AmREiSa@156.207.136.200)
[04:25:27] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[04:26:48] *** Joins: lainon (~lainon@2601:7c0:c500:4d20::ae8)
[04:27:37] *** Quits: AmR (~AmREiSa@156.207.136.200) (Remote host closed the connection)
[04:28:09] *** Joins: AmR (~AmREiSa@156.207.136.200)
[04:34:09] *** Quits: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian) (Quit: Please Hold…)
[04:36:27] *** Joins: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian)
[04:38:09] *** Quits: AmR (~AmREiSa@156.207.136.200) (Remote host closed the connection)
[04:38:37] *** Joins: AmR (~AmREiSa@156.207.136.200)
[04:38:37] *** Quits: AmR (~AmREiSa@156.207.136.200) (Client Quit)
[04:46:01] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[04:47:07] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Client Quit)
[04:53:24] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[05:04:08] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[05:14:56] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[05:14:58] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[05:16:14] *** Quits: lainon (~lainon@2601:7c0:c500:4d20::ae8) (Remote host closed the connection)
[05:17:17] *** Joins: c4017w_ (~c4017@209.52.68.8)
[05:19:02] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[05:19:33] <smallville7123> ok so this backtracking bug is fixed by setting the matchdata matches to 0 after popping, eg     iterator.popIterator(match.matches); match.matches = 0; return match;
[05:20:37] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[05:23:12] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[05:25:21] *** Quits: Tokamak (~Tokamak@172.58.191.35) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:26:51] *** Quits: szutt (~szutt@116.37.2.145) (Quit: Client closed)
[05:29:06] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[05:29:55] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:9926:39c3:76e4:f1da) (Ping timeout: 250 seconds)
[05:33:21] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:9926:39c3:76e4:f1da)
[05:33:53] *** Quits: etolier (~somewhere@122-199-44-127.ip4.superloop.com) (Ping timeout: 252 seconds)
[05:36:05] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:b9e2:b772:90e7:5a2b)
[05:39:39] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:6013:7539:4fef:cd22) (Ping timeout: 250 seconds)
[05:41:55] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:42:04] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:42:04] *** ChanServ sets mode: +v npaperbot
[05:42:37] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[05:43:07] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:47:12] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:9926:39c3:76e4:f1da) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:58:54] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:59:05] *** Quits: Guest3959 (epony@lz2.eu) (Quit: QUIT)
[06:04:45] *** Joins: epony (epony@user/epony)
[06:06:12] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[06:17:48] *** Joins: c4017w__ (~c4017@209.52.68.8)
[06:20:57] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[06:24:23] <leonardus> from Accelerated C++: "Most implementations require the names of C++ source files to end in .cpp, .C, or .c"
[06:24:33] <leonardus> were there any implementations that would compile with .C but not .c, or vice versa?
[06:25:14] <leonardus> seeing them listed independently suggests capitalization mattered with at least some implementations, which makes me curious
[06:26:03] <leduyquang753> That statement is simply not true, it's just a name and you can easily tell what kind of source file one is to the compiler if it doesn't follow the default.
[06:26:19] <leduyquang753> `.c` by default is C source file also, not C++.
[06:27:08] <leduyquang753> On *nix, file names are case sensitive so `.C` is different than `.c` and some people use `.C` for C++ source.
[06:27:52] <leonardus> so this was never true even in the early days of C++?
[06:28:11] <leduyquang753> I don't go that far into history.
[06:38:29] *** Quits: Roughy (~mdaw45ns@ti0090a400-4467.bb.online.no) (Quit: Meadow Fresh milk)
[06:38:43] *** Joins: Fairy (~Fairy@ti0004a400-5385.bb.online.no)
[06:38:56] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[06:41:13] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[06:41:29] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:80b2:e90a:7da7:7a8d)
[06:43:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[06:44:04] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[06:44:37] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:b9e2:b772:90e7:5a2b) (Ping timeout: 240 seconds)
[06:55:00] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[06:55:20] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[06:57:04] *** Joins: EdFletcher (~PKD@user/edfletcher)
[06:59:46] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[07:00:42] *** Joins: adeliktas8 (~adeliktas@i59F4A09F.versanet.de)
[07:02:40] *** Quits: adeliktas (~adeliktas@i59F5F5AE.versanet.de) (Ping timeout: 250 seconds)
[07:02:41] *** adeliktas8 is now known as adeliktas
[07:04:48] *** Quits: ivii (~ivan@user/ivii) (Quit: Konversation terminated!)
[07:06:46] *** Joins: Emet-Selch (~haise01@user/haise01)
[07:07:02] *** Quits: xcm (~xcm@static.90.45.69.159.clients.your-server.de) (Remote host closed the connection)
[07:07:20] *** Joins: xcm (~xcm@user/xcm)
[07:09:55] *** Quits: Azem (~haise01@user/haise01) (Ping timeout: 256 seconds)
[07:11:20] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[07:12:44] *** Joins: ferdna (~ferdna@user/ferdna)
[07:18:18] *** Joins: c4017w_ (~c4017@209.52.68.8)
[07:21:37] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[07:28:55] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[07:38:15] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[07:39:07] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[07:51:29] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[07:52:39] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[08:11:23] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[08:12:33] <computerquip> Going back to at least ~2001, I didn't know of any compiler that really cared about extension name.
[08:12:53] <computerquip> DMD infamously used .c to compile as C++ for a long time as well, which was pre-2000.
[08:15:50] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a099:f855:9dea:3e32) (Quit: Quit)
[08:18:49] *** Joins: c4017w__ (~c4017@209.52.68.8)
[08:21:59] *** Joins: JeffH (~JeffH@174-16-131-174.hlrn.qwest.net)
[08:22:27] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[08:25:10] <JeffH> This line increments the pointer then dereferences, right? ‘l_Sum += *(l_pPtr++);’
[08:27:20] <kalven> yes, but l_pPtr++ evaluates to the old value
[08:27:48] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[08:28:10] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:29:10] <JeffH> So I would get the old value, not the new value?  I thought () caused the inside expression to be evaluated first?
[08:31:30] <kalven> yes, but the expression ptr++ has a value as well as a side effect.  the value is the ptr before increment, the side effect is that ptr is incremented
[08:31:49] <kalven> there's a difference betwee postincrement and preincrement
[08:33:20] <JeffH> So the order is value, dereference, side effect?
[08:33:57] <Alipha> yes
[08:34:10] <Alipha> { int x = 3; cout << x++ << ' '; cout << x; }
[08:34:11] <geordi> 3 4
[08:34:23] <JeffH> Ok, thanks
[08:34:50] <Alipha> { int x = 3; cout << ++x << ' '; cout << x; }
[08:34:51] <geordi> 4 4
[08:35:56] <JeffH> Fighting a heisen-bug that shows up when I compile with optimization. Just wanted to understand that line to rule it out.
[08:43:32] *** Quits: JeffH (~JeffH@174-16-131-174.hlrn.qwest.net) (Remote host closed the connection)
[08:52:17] *** Quits: pulse (~pulse@user/pulse) (Read error: Connection reset by peer)
[08:53:37] *** Quits: ville (~ville@user/ville) (Quit: kernel)
[08:56:27] *** Quits: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi) (Ping timeout: 256 seconds)
[08:57:13] *** Joins: ville (~ville@user/ville)
[09:01:47] *** Joins: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::46)
[09:06:10] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[09:07:27] <InPhase> { A a{3}; cout << a++ << ", " << a++; } struct A { int x; int operator++(int) { cout << "Incremented " << x << ", returned "; return x++; } };
[09:07:28] <geordi> Incremented 3, returned 3, Incremented 4, returned 4
[09:08:35] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 256 seconds)
[09:19:18] *** Joins: c4017w_ (~c4017@209.52.68.8)
[09:23:05] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[09:38:16] *** Quits: temp_user_2022 (~amit@2601:445:447f:a2f6:c0a2:d41c:2ddb:9e2e) (Ping timeout: 245 seconds)
[09:41:56] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:42:03] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:42:03] *** ChanServ sets mode: +v npaperbot
[09:49:45] *** Quits: ville (~ville@user/ville) (Read error: Connection reset by peer)
[09:52:57] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 250 seconds)
[10:01:13] *** Quits: galik (galik@gateway/vpn/airvpn/galik) (Quit: Leaving)
[10:02:44] *** Joins: ville (~ville@user/ville)
[10:06:13] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[10:07:39] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[10:08:08] *** Joins: DSpider (~DSpider@82.79.237.125)
[10:11:05] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[10:14:02] *** Joins: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi)
[10:16:18] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:19:37] *** Quits: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi) (Ping timeout: 240 seconds)
[10:19:49] *** Joins: c4017w__ (~c4017@209.52.68.8)
[10:20:57] *** Quits: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::46) (Ping timeout: 240 seconds)
[10:22:13] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[10:23:29] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[10:24:31] *** Joins: galik (galik@gateway/vpn/airvpn/galik)
[10:34:45] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:45:57] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[10:45:57] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[10:49:02] *** Quits: dld (~davidlowr@2601:197:600:1210:942a:4683:ce04:8328) (Ping timeout: 252 seconds)
[10:51:15] *** Joins: dld (~davidlowr@73.61.8.20)
[10:52:56] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[10:54:44] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:a82b:45ec:56a1:f24)
[10:55:52] *** Quits: leonardus (sid358597@id-358597.tinside.irccloud.com) (*.net *.split)
[10:55:52] *** Quits: bjs (sid190364@user/bjs) (*.net *.split)
[10:55:52] *** Quits: jessicara (~shirogits@user/jessicara) (*.net *.split)
[10:55:52] *** Quits: kurfen_ (~kurfen@213.152.188.7) (*.net *.split)
[10:55:52] *** Quits: ullbeking_ (sid5364@ilkley.irccloud.com) (*.net *.split)
[10:55:52] *** Quits: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com) (*.net *.split)
[10:55:52] *** Quits: nickel8448 (~rahulwadh@147.80.76.34.bc.googleusercontent.com) (*.net *.split)
[10:55:52] *** Quits: d12fk (~heiko@exit0.net) (*.net *.split)
[10:55:52] *** Quits: BluesBoy (~bboy@user/bluesboy) (*.net *.split)
[10:55:52] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (*.net *.split)
[10:55:52] *** Quits: KombuchaKip (~kip@192.252.230.5) (*.net *.split)
[10:55:52] *** Quits: Led_Zeppelin2 (~user@cpe-68-172-241-89.nj.res.rr.com) (*.net *.split)
[10:55:52] *** Quits: blackbeard420 (~blackbear@45.33.85.133) (*.net *.split)
[10:55:52] *** Quits: mitch0 (~mitch@94-21-182-186.pool.digikabel.hu) (*.net *.split)
[10:55:52] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (*.net *.split)
[10:55:52] *** Quits: cursey (~cursey@user/cursey) (*.net *.split)
[10:55:52] *** Quits: Donno (~donno@58.84.206.182) (*.net *.split)
[10:55:52] *** Quits: jns (~x@user/jns) (*.net *.split)
[10:55:52] *** Quits: purplex (~purplex@user/purplex) (*.net *.split)
[10:55:52] *** Quits: scoobydoo (~scooby@user/scoobydoo) (*.net *.split)
[10:55:52] *** Quits: peeps[zen] (~peepsalot@openscad/peepsalot) (*.net *.split)
[10:55:52] *** Quits: HvszrStykp (~X@81.171.62.84) (*.net *.split)
[10:55:52] *** Quits: ethoxy (~root@bison.alphaw0lf.xyz) (*.net *.split)
[10:55:52] *** Quits: Cheaterman (~Cheaterma@user/cheaterman) (*.net *.split)
[10:55:52] *** Quits: Spydar007 (~spydar007@user/spydar007) (*.net *.split)
[10:55:52] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (*.net *.split)
[10:55:52] *** Quits: Sevalecan (~sevalecan@user/sevalecan) (*.net *.split)
[10:55:52] *** Quits: NOTevil (~notevil@user/notevil) (*.net *.split)
[10:55:52] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (*.net *.split)
[10:55:52] *** Quits: lh_not_bot (~lh_bot@mingw-w64/developer/lhmouse) (*.net *.split)
[10:55:52] *** Quits: Soliton (~Soliton@wesnoth/developer/soliton) (*.net *.split)
[10:55:53] *** Quits: ac_slater (~ac_slater@c-67-168-6-19.hsd1.wa.comcast.net) (*.net *.split)
[10:55:53] *** Quits: flynn (~mcbloch@user/flynn) (*.net *.split)
[10:57:09] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[10:58:06] *** Joins: Led_Zeppelin2 (~user@cpe-68-172-241-89.nj.res.rr.com)
[10:58:06] *** Joins: kurfen_ (~kurfen@213.152.188.7)
[10:58:06] *** Joins: ullbeking_ (sid5364@ilkley.irccloud.com)
[10:58:06] *** Joins: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com)
[10:58:06] *** Joins: nickel8448 (~rahulwadh@147.80.76.34.bc.googleusercontent.com)
[10:58:06] *** Joins: d12fk (~heiko@exit0.net)
[10:58:06] *** Joins: BluesBoy (~bboy@user/bluesboy)
[10:58:06] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[10:58:06] *** Joins: KombuchaKip (~kip@192.252.230.5)
[10:58:06] *** Joins: blackbeard420 (~blackbear@45.33.85.133)
[10:58:06] *** Joins: mitch0 (~mitch@94-21-182-186.pool.digikabel.hu)
[10:58:06] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[10:58:06] *** Joins: cursey (~cursey@user/cursey)
[10:58:06] *** Joins: Donno (~donno@58.84.206.182)
[10:58:06] *** Joins: jns (~x@user/jns)
[10:58:06] *** Joins: purplex (~purplex@user/purplex)
[10:58:06] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[10:58:06] *** Joins: peeps[zen] (~peepsalot@openscad/peepsalot)
[10:58:06] *** Joins: HvszrStykp (~X@81.171.62.84)
[10:58:06] *** Joins: ethoxy (~root@bison.alphaw0lf.xyz)
[10:58:06] *** Joins: Cheaterman (~Cheaterma@user/cheaterman)
[10:58:06] *** Joins: Spydar007 (~spydar007@user/spydar007)
[10:58:06] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[10:58:06] *** Joins: Sevalecan (~sevalecan@user/sevalecan)
[10:58:06] *** Joins: NOTevil (~notevil@user/notevil)
[10:58:06] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[10:58:06] *** Joins: ac_slater (~ac_slater@c-67-168-6-19.hsd1.wa.comcast.net)
[10:58:06] *** Joins: lh_not_bot (~lh_bot@mingw-w64/developer/lhmouse)
[10:58:06] *** Joins: Soliton (~Soliton@wesnoth/developer/soliton)
[10:58:06] *** Joins: flynn (~mcbloch@user/flynn)
[10:58:06] *** Joins: leonardus (sid358597@id-358597.tinside.irccloud.com)
[10:58:06] *** Joins: bjs (sid190364@user/bjs)
[10:58:06] *** Joins: jessicara (~shirogits@user/jessicara)
[10:58:08] *** Quits: leonardus (sid358597@id-358597.tinside.irccloud.com) (Max SendQ exceeded)
[10:58:39] *** Quits: HvszrStykp (~X@81.171.62.84) (Max SendQ exceeded)
[10:58:52] *** Joins: HvszrStykp (~X@81.171.62.84)
[10:59:47] *** Joins: leonardus (sid358597@tinside.irccloud.com)
[11:01:06] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[11:08:02] *** Quits: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe) (Ping timeout: 240 seconds)
[11:08:07] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[11:09:27] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[11:19:09] *** Joins: andreasbuhr (~quassel@p549dbab5.dip0.t-ipconnect.de)
[11:20:22] *** Joins: c4017w_ (~c4017@209.52.68.8)
[11:21:13] <ville> is there a flag to tell clang++ to not complain about: u32 x = -1; with -Wconversion? shouldn't complain about static values like that where it can figure it out perfectly fine what it means
[11:21:18] *** Joins: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe)
[11:23:53] <ville> also ~0 does no better. still wants a cast, literal suffix or something similar to accept it as something reasonable
[11:24:07] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[11:26:37] *** Quits: foul_owl (~kerry@94.140.8.105) (Ping timeout: 256 seconds)
[11:27:16] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[11:27:19] *** Joins: xkuru (~xkuru@user/xkuru)
[11:27:26] <ville> and clang manual just has a big todo: https://clang.llvm.org/docs/UsersManual.html#controlling-diagnostics-via-command-line-flags
[11:29:59] *** Joins: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi)
[11:31:39] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:33:48] <Haohmaru> clang_manual.lnk (actually a shortcut to gcc-docs)
[11:34:19] <TinoDidriksen> auto x = std::numeric_limits<uint32_t>::max(); unfortunately.
[11:37:37] *** Quits: ethoxy (~root@bison.alphaw0lf.xyz) (Ping timeout: 256 seconds)
[11:38:28] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:2dea:f16f:b001:1064)
[11:39:12] *** Joins: ethoxy (~root@bison.alphaw0lf.xyz)
[11:39:32] *** Joins: janno (~janno@user/Janno)
[11:40:41] <ville> TinoDidriksen: yes not a realistic option
[11:41:37] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:80b2:e90a:7da7:7a8d) (Ping timeout: 240 seconds)
[11:42:32] *** Joins: foul_owl (~kerry@94.140.8.107)
[11:42:49] <MaddHatter> If I build a bunch of my libraries and executables with AddressSanitize, then dynamically link against qt or whatever other libraries that are not built AddressSanitize, can I still rely on AddressSanitize to be accurate?
[11:43:15] <ville> MaddHatter: to an extent certainly
[11:43:57] <MaddHatter> It's complaining about wild pointers and bad frees in qt functions where no pointers are malloc-ed or freed
[11:44:26] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:51ac:e09e:aad0:faee)
[11:44:31] <ville> MaddHatter: ...i wouldn't put too much weight if it complains about things outside the things not built with the sanitizer
[11:44:35] <MaddHatter> a bad free in QDataStream::writeRawBytes is one of them
[11:44:49] <ville> err outside the things built with
[11:45:14] <MaddHatter> yeah, so the question really comes down to should I go rebuild qt with asan
[11:45:25] <MaddHatter> (and if I do, will it make a difference to those kinds of errors)
[11:45:27] <ville> suppress the error?
[11:46:02] <MaddHatter> I will probably end up suppressing things, but I want to avoid the errors first, if I can
[11:46:47] <ville> i guess then have at it
[11:46:48] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[11:47:17] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:2dea:f16f:b001:1064) (Ping timeout: 240 seconds)
[11:47:28] <MaddHatter> naturally, I don't want to go rebuild all 200-however-many dependencies if it won't actually help
[11:47:57] <ville> what does help mean?
[11:48:46] <ville> i can see few outcomes: it continues as is, it confirms there's an error but the report is now more accurate or it confirms there is no error it can detect
[11:49:05] <MaddHatter> reduce errors I don't care about, at least, and find errors I do care about. Fewer false positives, fewer false negatives than just linking against the already-built non-asan versions
[11:50:26] <ville> the lowest effort for reduced errors is suppression file
[11:53:20] <ville> TinoDidriksen: also like i said a literal suffix is enough, no need to be silly and use std::numeric_limits: unsigned x = -1u;
[11:54:47] *** Emet-Selch is now known as Azem
[11:54:55] *** Joins: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se)
[11:55:14] *** Joins: jsbach (~jsbach@2a01:c22:a40c:d700:4679:1947:b982:eeb8)
[12:02:42] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[12:09:21] *** Quits: ac_slater (~ac_slater@c-67-168-6-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[12:13:49] *** Joins: Uswald (~leandre@2a01cb040075f900c9d271e7359ac219.ipv6.abo.wanadoo.fr)
[12:13:49] *** Quits: Uswald (~leandre@2a01cb040075f900c9d271e7359ac219.ipv6.abo.wanadoo.fr) (Changing host)
[12:13:49] *** Joins: Uswald (~leandre@user/Uswald)
[12:15:00] *** Quits: janno (~janno@user/Janno) (Read error: Connection reset by peer)
[12:19:34] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Quit: Leaving)
[12:19:50] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[12:20:53] *** Joins: c4017w__ (~c4017@209.52.68.8)
[12:22:40] *** Joins: ac_slater (~ac_slater@c-67-168-6-19.hsd1.wa.comcast.net)
[12:23:06] *** Joins: robod34 (~Username@79.113.227.62)
[12:24:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[12:28:46] <MaddHatter> I guess access-declarations are deprecated now, but I was using them to hide members, not expose them. Can I still use a member-using declaration to privitize something that's public in a parent?
[12:29:24] <MaddHatter> I guess it's not that hard to write a test. I should just try it.
[12:29:57] <ville> MaddHatter: huh?
[12:30:19] <ville> MaddHatter: are you talking about private: and such?
[12:31:26] <MaddHatter> ville: parent class members can be redeclared in a child class to change their access level. Usually it's done to make something accessible in the child that was inaccessible in the parent, and member-using declarations address that need in a newer way. It's uncommon to make an accessible member inaccessible though, so I don't know if using works for that.
[12:31:29] *** Joins: callq (~callq@2409:4062:2e9e:2081:3c70:5be0:414d:6151)
[12:32:51] <ville> i didn't understand the deprecated bit
[12:34:27] *** Joins: x_kuru (~xkuru@user/xkuru)
[12:35:33] <MaddHatter> access declarations are deprecated. Or at least, that's what the compiler warning claims.
[12:35:47] <MaddHatter> and yes, it does seem 'using' suffices for reducing access, too
[12:36:37] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 240 seconds)
[12:36:41] <ville> MaddHatter: ok i can't imagine what your code looks like at this point
[12:37:20] <MaddHatter> https://godbolt.org/z/TnhTYb1bd
[12:37:21] <Haohmaru> <macaroni.jpg>
[12:37:57] <MaddHatter> remove line 10 'using' for the deprecated version
[12:38:28] <ville> that's just straight up and commenting out line 10 compiles
[12:38:34] <ville> straight up compiler error
[12:39:04] <ville> for some reason i can't see your deprecation warning
[12:39:06] <MaddHatter> the point is that it *shouldn't* compile.
[12:39:44] <ville> could you be clearer. what shouldn't compile? the version with line 10 commented out?
[12:40:23] <MaddHatter> line 17 is what triggers the compilation error. It works as-is. If you remove "using" from line 10, you'll see that it still works (meaning: doesn't compile) but generates a deprecation warning.
[12:40:46] <TinoDidriksen> Without the "using" line, it should absolutely compile. It's simply a public member. There is no deprecation warning?
[12:40:47] <ville> there is no deprecation warning?
[12:40:54] <ville> you've inherited publicly from base, so its members are publicly visible
[12:41:05] *** Quits: lewisje (~lewisje@72.49.207.113) (Quit: Leaving)
[12:41:07] <MaddHatter> sigh. here: https://godbolt.org/z/8cxvMnnWM
[12:41:33] <TinoDidriksen> That's just bad code.
[12:41:38] <TinoDidriksen> What did you expect that to do?
[12:41:56] <MaddHatter> It's not bad code. It blocks access to aa via child.
[12:42:15] <MaddHatter> useful, for example, if parent has a bb that should be accessible through child.
[12:42:21] <TinoDidriksen> Huh, that was ever allowed? I can see why it's deprecated.
[12:42:31] <TinoDidriksen> I've never seen that syntax before.
[12:42:33] <MaddHatter> It's been allowed since pretty much forever, so yes
[12:42:52] <smallville7123> im not sure how i should handle expanding a function in the case where the function name is a function-like macro, and where the function name is not a function-like macro
[12:47:44] <TinoDidriksen> "access declarations were deprecated already in C++98" - right, so it's always been bad code.
[12:48:36] <TinoDidriksen> Pre-standard C++, always been deprecated in C++. Just add the using.
[12:51:24] <ville> yeah was just coming to that as well
[12:51:50] <ville> weren't able to find my 1998 standard
[12:55:18] <MaddHatter> wow, I didn't think it was that old.
[12:56:08] *** Joins: Simplar (~quassel@188.163.93.241)
[12:56:42] <MaddHatter> Kind of makes me wonder why it's taken this long to trigger a deprecation warning
[13:02:19] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:10:16] *** Joins: nojhan (uid443807@id-443807.lymington.irccloud.com)
[13:10:49] <urdh> aargh who wrote this awful code
[13:10:51] <urdh> *reinterpret_cast<T (*)[][N]>(operator new(M * N * sizeof(T)))
[13:11:06] *** Joins: plastico (~plastico@neomutt/plastico)
[13:12:17] *** Quits: msim_ (~msim@2001:8003:d194:d000::d8d) (Ping timeout: 240 seconds)
[13:13:50] <Haohmaru> i'd need an overdose of coffee to even begin parsing what that does
[13:14:14] <Haohmaru> is a function pointer involved?
[13:14:22] <Haohmaru> or is it a lambda thing
[13:14:57] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[13:15:06] <urdh> no, this initializes a member of type T(&)[][N]
[13:15:31] <Haohmaru> x_x
[13:16:00] <Haohmaru> partially specialized template type?
[13:16:11] *** Quits: Uswald (~leandre@user/Uswald) (Ping timeout: 250 seconds)
[13:16:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[13:18:18] <urdh> nope, just an inexplicable fear of std::vector as far as I can tell
[13:19:10] <MaddHatter> but the m*n suggests it's meant to be 2d, not 1d?
[13:19:32] <urdh> yes, but N is compile-time constant
[13:19:53] *** Joins: msim_ (~msim@2001:8003:d194:d000::d8d)
[13:19:59] <urdh> std::vector<std::array<T, N>> is the reasonable approach
[13:20:29] <MaddHatter> can you guarantee vector won't have any padding between the std::arrays that way?
[13:21:09] <MaddHatter> (I assume they're playing pointer offset games and thus care about the specific memory layout.)
[13:21:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[13:22:22] <Haohmaru> iirc an array shouldn't have memory overhead
[13:22:34] <urdh> yeah I don't think so either
[13:23:01] <Haohmaru> { array<uint8_t,3> a; cout << sizeof(a); }
[13:23:02] <geordi> 3
[13:23:29] <urdh> in any case memory layout does not appear to be relevant here
[13:24:40] *** Joins: ivii (~ivan@user/ivii)
[13:24:49] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[13:38:21] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:a85e:5217:60c2:bcc7)
[13:41:17] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:51ac:e09e:aad0:faee) (Ping timeout: 240 seconds)
[13:41:56] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:42:04] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:42:04] *** ChanServ sets mode: +v npaperbot
[13:57:42] *** Quits: galik (galik@gateway/vpn/airvpn/galik) (Quit: Leaving)
[14:00:12] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:240f:2de:4550:ff01)
[14:00:12] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:240f:2de:4550:ff01) (Changing host)
[14:00:12] *** Joins: skapata (~Skapata@user/skapata)
[14:11:27] *** Quits: DSpider (~DSpider@82.79.237.125) (Quit: Leaving)
[14:11:49] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[14:12:42] *** comrad is now known as Hoecker
[14:13:10] <LordKalma> Feature: Add is_msvc to validate if settings.compiler is Visual Studio and msvc compilers. #10310 . Docs here
[14:13:12] <LordKalma> on latest conan
[14:13:14] <LordKalma> cool
[14:13:41] *** Hoecker is now known as comrad
[14:13:52] <PJBoy> now to wait for everyone to adopt it
[14:14:06] <LordKalma> "everyone" is really just CCI
[14:14:08] <PJBoy> shouldn't take that long right?
[14:14:13] <Haohmaru> <clock_ticking_animation.jpg>
[14:14:16] <LordKalma> you can help, start PRing :p
[14:14:31] <PJBoy> true
[14:14:36] <Haohmaru> !fact
[14:14:38] <nolyc> Haohmaru: In a declaration T D the decl-specifier-seq T determines the type T.
[14:14:40] <LordKalma> but I doubt they'll up the requirements to that high before conan 2.0
[14:14:49] <LordKalma> CCI will probably force conan 2.0 when ti launches
[14:14:55] <PJBoy> it's kinda sad there needs to be specific checks for msvc
[14:14:57] <LordKalma> until then they have generous minimums
[14:15:09] <LordKalma> https://docs.conan.io/en/latest/changelog.html
[14:15:15] <LordKalma> anyway, very interesting changelog
[14:16:22] <LordKalma> PJBoy, actually https://docs.conan.io/en/latest/introduction.html#stability
[14:16:30] <LordKalma> "t public repositories, like ConanCenter, assume the use of the latest version of the Conan client, and using an older version may result in failure of packages and recipes created with a newer version of the client."
[14:16:39] <smallville7123> PJBoy: im not sure how i should handle expanding a function in the case where the function name is a function-like macro, and where the function name is not a function-like macro
[14:16:58] <PJBoy> I'm pretty happy with that stability declaration
[14:17:28] <PJBoy> "use the newest shit"
[14:17:58] <LordKalma> it's clever, actually
[14:18:12] <LordKalma> "we won't break conan itself [to make enterprise not be mad at us]
[14:18:14] <PJBoy> "don't use our undocumented crap"
[14:18:27] <LordKalma> but if you want to use our repos, though shit, update"
[14:18:33] <LordKalma> and everybody is using CCI haha
[14:19:48] <PJBoy> smallville7123, what on earth are you talking about
[14:20:07] <PJBoy> how should you handle X where Y is Z and where Y is not Z
[14:20:15] <PJBoy> idk how to interpret that
[14:21:53] *** Joins: c4017w__ (~c4017@209.52.68.8)
[14:21:56] <PJBoy> it's like in the standard where it says:
[14:22:00] <PJBoy> If [...] the object expression refers to the complete object of x or one of that object's base class subobjects but not x or one of its base class subobjects, the behavior is undefined
[14:22:04] <smallville7123> like, in the case of expanding `foo(Y)`     how should i handle correctly expanding `Y` if `foo` does not exist as a function-like macro, and both expanding `Y`, and rescanning, if `foo` does exist as a function-like macro
[14:22:59] <smallville7123> in the context of a PEG parser or similar grammar
[14:23:29] <PJBoy> oh
[14:23:33] <PJBoy> hm
[14:23:59] <PJBoy> I'm not sure what order C does things in
[14:24:12] <PJBoy> that's been one of those things I've always been a bit confused about
[14:24:52] <smallville7123> as i can detect the function via function_call grammar, but i am not sure if i should put that into a sequence like {function_call function_call) or something else depending on the context case
[14:25:21] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[14:25:26] <ville> smallville7123: you've been given the pdf that explains the algorithm
[14:26:10] <smallville7123> or if i should just reparse the parsed function using another grammar match or what
[14:29:05] <smallville7123> as function_call captures the string "foo(Y)" and a am not quite sure how to procede from this (mainly with getting `Y` expanded)
[14:29:40] <smallville7123> and i am*
[14:33:39] *** comrad is now known as commard
[14:34:21] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[14:36:26] <smallville7123> as i know what order it should be expanded in, i am just not sure how to expand `Y` without for example, recursively hitting the same grammar rule or duplicating my grammar
[14:38:25] *** commard is now known as basxdo
[14:40:38] *** Joins: seninha (~seninha@user/seninha)
[14:45:33] *** basxdo is now known as comrad
[14:51:22] <PJBoy> this is why I don't write parsers
[14:52:05] <PJBoy> erm
[14:52:20] <PJBoy> do enums need to do the typedef trick in C?
[14:52:40] <PJBoy> i.e. `typedef enum { ... } type_name;`
[14:52:50] *** Quits: lxsameer (lxsameer@user/lxsameer) (Ping timeout: 250 seconds)
[14:53:24] <PJBoy> "need" is a strong word, but you know what I mean
[14:53:27] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[14:53:43] <PJBoy> yeah you do
[14:53:53] <smallville7123> i should probably just duplicate my grammar to have only 2 function rules, one to check the function argument count, and another to expand function name and function paramaters and then rescan
[14:54:00] <smallville7123> i think i should*
[14:54:41] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[14:58:17] *** Quits: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se) (Ping timeout: 240 seconds)
[15:00:36] *** comrad is now known as meldrian
[15:00:42] *** meldrian is now known as comrad
[15:00:52] <smallville7123> tho... given that i can rescan, i only need a single function rule, right?   eg scan and verify arg count then rescan and do function expansion, and repeat
[15:00:57] <smallville7123> PJBoy:
[15:01:43] <jsbach> Hi, can i capture a guarded class member with lambdas?
[15:02:36] <smallville7123> what do you mean by guarded
[15:02:38] <TinoDidriksen> A private/protected member you mean? Sure.
[15:03:30] <smallville7123> TinoDidriksen: but only where it is otherwise accessible, right?
[15:03:36] <jsbach> smallville7123, #ifdef LOGGING_ACTIVE MyLogger logger("ClassToBeLogged"); #endif
[15:03:59] <TinoDidriksen> Oh, you actually meant guarded...then only if that #if is active.
[15:04:12] <TinoDidriksen> #if happens way before C++ is compiled.
[15:04:21] <jsbach> and do sth like [&logger](){}
[15:04:33] <jsbach> and what happens #if is not active in a lambda case?
[15:04:36] <jsbach> like that
[15:04:44] <TinoDidriksen> Then you get a compile error.
[15:04:53] <jsbach> not nice
[15:04:55] <TinoDidriksen> Can't capture from code that doesn't exist.
[15:05:13] <jsbach> can't i put #ifdef also in capture?
[15:05:16] <smallville7123> jsbach: #ifdef guard all code that uses MyLogger
[15:05:40] <smallville7123> jsbach: you can #ifdef guard anything
[15:05:46] <smallville7123> even other #ifdef guards
[15:05:57] <jsbach> likewise [#ifdef LOGGING_ACTIVE &logger #endif](){}
[15:06:19] <smallville7123> no
[15:06:29] <smallville7123> #ifdef MUST be on a new line
[15:06:34] <jsbach> ok
[15:07:01] <smallville7123> anything that starts with # is a preprocessor directive and MUST be on a new line
[15:07:16] <jsbach> smallville7123, i see
[15:07:16] <smallville7123> eg:
[15:07:25] <smallville7123> [
[15:07:34] <smallville7123> #ifdef LOGGING_ACTIVE
[15:07:39] <smallville7123>  &logger
[15:07:44] <smallville7123> #endif
[15:07:47] <smallville7123> ](){}
[15:07:55] <PJBoy> think it would be easier to write [&]{}
[15:07:57] <smallville7123> like that
[15:08:19] <smallville7123> [&] captures everything by reference
[15:08:28] <PJBoy> yeah, so that's easier
[15:08:40] <LordKalma> [&] is amazingly bugprone
[15:08:53] <smallville7123> which may or may not be desired if you want to capture one thing by value and another by reference
[15:09:01] <PJBoy> just don't write any bugs
[15:09:03] <PJBoy> easy
[15:09:04] *** Joins: gehn (~gehn@user/gehn)
[15:09:22] <urdh> [citation needed]
[15:09:34] <PJBoy> [&citation &needed]
[15:09:35] <smallville7123> and vice versa
[15:09:38] <smallville7123> with [=]
[15:09:45] <LordKalma> example: `QWidget::connect(mybutton, &mybutton::clicked, [&](){foo.bananas()}); // but foo was a local :D`
[15:09:48] <smallville7123> (capture everything by value
[15:10:10] <smallville7123> yea
[15:10:26] <smallville7123> that is a common mistake
[15:11:04] <PJBoy> depends on the context how safe it is
[15:11:16] <jsbach> = was by value right? \
[15:11:24] <PJBoy> passing a lambda to something that wants to keep a copy, that would be unsafe
[15:11:40] <PJBoy> immediately invoking that lambda, that's usually safe
[15:12:02] <smallville7123> as it is possible that when the lambda gets executed the reference to the local variable will no longer exist
[15:12:32] <smallville7123> basically the same as    int & foo() { int x; return x; } // UB
[15:13:03] <PJBoy> that's only UB if something uses the return value
[15:13:10] <smallville7123> or a use-after-free in an allocation context
[15:14:01] <smallville7123> PJBoy: yea, it can return a lamba that references that variable and have same effect
[15:14:21] <PJBoy> but yeah depends on the context of the lambda
[15:14:29] <PJBoy> I don't see why you would ever conditionally capture a logger
[15:14:51] <PJBoy> then again all my loggers are global <_<;
[15:14:53] <smallville7123> one case may be a debug build
[15:15:12] <smallville7123> ed logging enabled in debug and disabled in release
[15:15:17] <smallville7123> eg*
[15:15:22] <jsbach> PJBoy, i think the answer is simple. You want to use some loggers within lambdas which depend on build type ;-)
[15:15:42] <PJBoy> you have local logger variables though?
[15:15:45] <PJBoy> suspicious
[15:15:47] <jsbach> i mean usage of loggers depend on build type
[15:15:59] <jsbach> no. global
[15:16:05] <PJBoy> well you can't capture globals
[15:16:13] <PJBoy> so that makes things easy
[15:16:21] <TinoDidriksen> And you don't need to capture globals.
[15:16:58] <TinoDidriksen> It would be better to use a logger that simply compiles to nothing in release builds, but is otherwise present in the code.
[15:18:03] <PJBoy> that's my approach too ^
[15:22:22] *** Joins: c4017w_ (~c4017@209.52.68.8)
[15:25:45] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[15:32:36] *** Joins: Emet-Selch (~haise01@user/haise01)
[15:32:54] *** Emet-Selch is now known as haise01
[15:36:17] *** Quits: Azem (~haise01@user/haise01) (Ping timeout: 240 seconds)
[15:37:08] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[15:44:15] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[15:44:44] *** Joins: proller (~p@2a02:6b8:0:40c:4ede:d7a4:f153:fe33)
[15:45:43] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:dd48:37e7:aeeb:3a31)
[15:45:50] *** Joins: limubs (~limubs@cgn-89-0-52-200.nc.de)
[15:48:25] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 256 seconds)
[15:49:02] *** Joins: markong (~kvirc@213.146.188.203)
[15:49:28] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Quit: Leaving)
[15:51:53] *** Joins: Roughy (~mdaw45ns@user/roughy)
[15:58:01] *** Quits: joaofukuda (~joaofukuk@2804:431:c7f5:a3c3:9fdb:d7d3:c39f:3ce6) (Quit: Leaving)
[15:58:17] *** Joins: joaofukuda (~joaofukuk@2804:431:c7f5:a3c3:9fdb:d7d3:c39f:3ce6)
[15:58:56] *** Joins: Leone (~Leo@108.175.224.215)
[15:59:38] *** Joins: fukuda (~fukuda@2804:431:c7f5:a3c3:9fdb:d7d3:c39f:3ce6)
[16:00:05] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Remote host closed the connection)
[16:00:58] *** Quits: Simplar (~quassel@188.163.93.241) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[16:01:02] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[16:02:33] *** Quits: fukuda (~fukuda@2804:431:c7f5:a3c3:9fdb:d7d3:c39f:3ce6) (Client Quit)
[16:02:41] *** Joins: fukuda (~fukuda@2804:431:c7f5:a3c3:9fdb:d7d3:c39f:3ce6)
[16:03:14] *** Quits: biberu (~biberu@user/biberu) (Ping timeout: 268 seconds)
[16:05:54] *** Quits: joaofukuda (~joaofukuk@2804:431:c7f5:a3c3:9fdb:d7d3:c39f:3ce6) (Quit: Leaving)
[16:07:10] * smallville7123 wonders if i should rename my parser from CPP to Rescan  *
[16:10:03] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[16:10:37] *** Joins: biberu (~biberu@user/biberu)
[16:18:59] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[16:19:06] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[16:21:16] <TinoDidriksen> It should definitely not be called CPP.
[16:22:53] *** Joins: c4017w__ (~c4017@209.52.68.8)
[16:25:07] *** haise01 is now known as Azem
[16:26:23] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[16:26:34] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[16:34:31] <smallville7123> TinoDidriksen: :)
[16:35:12] <smallville7123> TinoDidriksen: i am making it specifically as a C Preprocessor (to the best of my abilities)
[16:35:27] <smallville7123> C Macro Preprocessor *
[16:37:58] <oj> if I'm iterating over a deque with a range, is it legal to pop_front inside the loop body?
[16:38:44] <oj> I'm invalidating front when I pop it
[16:39:20] <oj> but I guess that element has already been dereferenced and assigned to the loop variable, so it's ok(?)
[16:39:31] <oj> honestly, the semantics are a little hard to reason about
[16:42:30] <smallville7123> i assume not
[16:43:01] <smallville7123> assuming enhanced for loop, it uses iterators to loop over
[16:43:06] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca)
[16:43:23] <smallville7123> popping the front (begining) will invalidate ALL iterators after begin()
[16:43:33] <smallville7123> also invalidate begin() itself
[16:43:48] <smallville7123> also invalidate iterators obtained from begin() itself *
[16:43:50] *** Quits: PJBoy (~PJBoy@user/pjboy) (Quit: Ping timeout: 252 seconds)
[16:46:25] *** Joins: PJBoy (~PJBoy@user/pjboy)
[16:46:36] <smallville7123> a safer approach would be, for example,    for (int i = 0; i < n; ++i) { if (stack()) break; /* ... */ iteratorStack.pop_back(); }
[16:46:38] *** Joins: magla (~gelignite@d536277f.access.ecotel.net)
[16:46:59] <oj> cppreference says that deque::pop_front only invalidates iterators to the erased element
[16:47:00] <smallville7123> if (stack.empty()) break; *
[16:47:35] <oj> but yeah, just while looping over a stack is probably easier to reason about
[16:48:09] <smallville7123> pop front would also invalidate the end as it needs to move all elements, right?
[16:48:21] <smallville7123> or would that depend on the container
[16:48:25] <oj> https://en.cppreference.com/w/cpp/container/deque/pop_front
[16:48:47] <oj> "to the erased element"
[16:48:58] <smallville7123> also where n is the number of items to pop
[16:49:08] <oj> "other references and iterators are not affected"
[16:49:25] <smallville7123> oj: :)
[16:50:10] <oj> I think the whole point of deque is that you don't have to move elements
[16:50:23] <oj> popping is O(1)
[16:52:13] <oj> the tricky bit is that in a range-for, we use the iterator after it's been invalidated, but we immediately increment, so I think we're accessing a valid iterator when we assign the next loop variable
[16:52:36] <oj> what exactly is "iterator invalidation" anyway
[16:53:04] <oj> what even is a computer program?
[16:53:09] <oj> what's the meaning of it all?
[16:53:13] <MaddHatter> 42
[16:58:10] *** Joins: ethrl (~ethereal@user/doforlove33)
[17:02:57] *** Quits: biberu (~biberu@user/biberu) (Ping timeout: 240 seconds)
[17:08:35] *** Quits: magla (~gelignite@d536277f.access.ecotel.net) (Quit: Stay safe!)
[17:10:14] *** Joins: AmR (~AmREiSa@156.207.136.200)
[17:10:18] *** Quits: lockywolf (~lockywolf@public.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[17:10:40] *** Joins: biberu (~biberu@user/biberu)
[17:10:49] *** Quits: fukuda (~fukuda@2804:431:c7f5:a3c3:9fdb:d7d3:c39f:3ce6) (Quit: WeeChat 3.4)
[17:12:52] *** Joins: lockywolf (~lockywolf@public.lockywolf.net)
[17:13:20] <smallville7123> oj: incrementing an invalidated iterator will still result in an invalidated iterator
[17:13:44] <oj> that's what I was wondering
[17:13:46] <oj> and I'm not sure
[17:13:47] <smallville7123> for example, an invalidated iterator may be indexily equivilant to say 353476475757
[17:13:59] <oj> doesn't invalidated iterator just mean that the reference is invalid
[17:14:09] <smallville7123> incrementing it will result in 353476475757
[17:14:11] <oj> increment() may still produce a valid iterator
[17:14:13] <smallville7123> incrementing it will result in 353476475758   *
[17:14:31] <smallville7123> eg iterator++; //  353476475757 ->  353476475758
[17:14:59] <oj> did you get this from the standard?
[17:15:12] <smallville7123> from test casing
[17:16:14] <oj> with deque?
[17:16:15] <smallville7123> how iterators are implemented is implementation defined, but they *CAN* be printed via `iterator - begin()` or `iterator - cbegin()` for const_iterator
[17:16:29] <smallville7123> this may not work for ALL iterators however
[17:16:53] <smallville7123> it it works for *most*
[17:16:56] <smallville7123> but it*
[17:17:05] <oj> I thought begin was a member of a container that returns an iterator
[17:17:11] <smallville7123> it is
[17:17:14] <oj> notaa member of an iterator
[17:17:15] *** Quits: AmR (~AmREiSa@156.207.136.200) (Remote host closed the connection)
[17:17:20] <oj> not a
[17:17:41] *** Joins: AmR (~AmREiSa@156.207.136.200)
[17:17:56] <smallville7123> an iterator subtracted from another iterator will return an integer number equivilant to the difference from subtracting one pointer from another pointer
[17:18:16] <oj> but a pointer pointing to garbage data will not change its address
[17:18:21] <smallville7123> and this can be used to determine the iterator's current *value*
[17:18:46] <smallville7123> oj: it is implementation defined how iterators work
[17:19:28] <oj> are you saying the address gets invalidated?
[17:19:31] <smallville7123> an invalid iterator could be intentional by the underlying container supplying the iterator
[17:20:00] <smallville7123> i dont know how iterator gets invalidated
[17:20:22] <smallville7123> all i know is it is invalidated and set to some random very large value
[17:20:31] <oj> if increment only operates in index-space, and if the next iterator in the index-space is valid, I would assume that increment returns a valid iterator
[17:21:02] <smallville7123> oj: yes, IF the iterator being incremented is valid
[17:21:21] <smallville7123> invalid_iterator++; //  353476475757 ->  353476475758
[17:21:30] <smallville7123> valid_iterator++; //  3 ->  4
[17:21:34] <oj> but how could the index of the iterator change if I haven't changed it
[17:21:48] <smallville7123> implementation detail
[17:21:57] <oj> the iterator could be in a const variable and become invalidated by a pop
[17:21:57] <smallville7123> ask in #C++
[17:22:21] <smallville7123> the implementation could have an internal reference
[17:22:27] <smallville7123> or someing like that
[17:22:31] <smallville7123> ask in #C++
[17:22:46] <oj> sure, this is more of a standard issue tbh
[17:23:22] *** Joins: c4017w_ (~c4017@209.52.68.8)
[17:23:37] <smallville7123> no it isnt
[17:23:49] <smallville7123> iterators are invalidated for a reason
[17:24:02] <oj> what do you mean
[17:24:21] <oj> I'm saying reasoning about iterator invalidation is more like reasoning about the standard
[17:24:23] <smallville7123> iterators ARE NOT index based even if thay SEEM index based
[17:24:27] <smallville7123> they*
[17:24:32] <oj> I'm agreeing that this belongs in #C++
[17:24:42] <smallville7123> yea
[17:24:42] *** Quits: AmR (~AmREiSa@156.207.136.200) (Remote host closed the connection)
[17:25:21] *** Joins: AmR (~AmREiSa@156.207.136.200)
[17:26:47] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[17:33:27] *** Quits: ethrl (~ethereal@user/doforlove33) (Remote host closed the connection)
[17:36:34] <rpav> smallville7123: they _are_ indexes; indexes are also invalidated when iterators are invalidated
[17:37:12] <rpav> (whether they are the user-index of the item, e.g. the value one would pass to vector::operator[], is orthogonal)
[17:38:02] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[17:38:32] <PJBoy> that's a pretty wild interpretation
[17:39:34] <PJBoy> if an iterator is invalid, it just means the iterator preconditions aren't true anymore
[17:39:41] <PJBoy> so it's basically unusable
[17:40:08] <PJBoy> although in many cases it appears to behave sensibly anyway
[17:41:57] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:42:06] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:42:06] *** ChanServ sets mode: +v npaperbot
[17:50:34] *** Joins: pulse (~pulse@user/pulse)
[17:51:43] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[17:57:04] <AmR> Any one Can help me with WinAPI ?
[18:02:35] <Haohmaru> oh noes
[18:02:47] <Haohmaru> where's zap0
[18:04:32] <rpav> PJBoy: and you should basically assume the validity of any index (user-side in this case) mirrors the validity of any given iterator
[18:05:06] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[18:05:42] <rpav> e.g. if you erase something from a vector, any indices you held are going to be garbage; if you erase something from a map, keys other than what you erased remain valid, etc
[18:07:13] <rpav> an iterator is more of a "direct" index, but that doesn't really change what it is or make its validity better/worse than otherss
[18:15:55] <PJBoy> I don't disagree
[18:16:25] <PJBoy> but there are certainly cases where indices outlive iterators
[18:16:35] <PJBoy> like in those naive erase loops on vectors
[18:17:24] <rpav> sure, the "c++ validity" of a pointer notwithstanding
[18:18:28] <rpav> like, if you have an iterator to n+1 and an index n+1, and erase n, technically hte n+1 iterator is invalidated, but you could possibly reuse the index n+1
[18:18:46] <rpav> most of the time the results you get are equally erroneous though
[18:19:18] <ville> you've got the stats to prove that claim about frequency?
[18:20:07] <rpav> like _even if_ a vector iterator was internally a pointer to the vector _and_ an index, rather than a pointer to the item, the standard would likely not change the wording (if for no other reason than you still can't guarantee n+1 is valid)
[18:20:55] <rpav> iterators could implement is_valid though ;)
[18:22:25] <rpav> i suppose the standard could change to "_might_ be invalidated; is_valid() will tell you" .. can't do much for map though without making iterators less efficient
[18:22:45] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[18:23:53] *** Joins: c4017w__ (~c4017@209.52.68.8)
[18:25:03] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[18:25:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[18:25:30] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[18:27:39] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[18:27:43] <PJBoy> could adopt a windows type solution
[18:27:51] <PJBoy> where every iterator has a message loop
[18:28:07] <PJBoy> and containers send off notification messages to iterators when they get invalidated
[18:28:13] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca) (Ping timeout: 256 seconds)
[18:30:25] <rpav> D:
[18:31:18] * Haohmaru WM_PAINTs PJBoy transparent
[18:31:51] <rpav> iterator invalidation is probably a fine low-level default for a lot of things .. i'm not saying it's _bad_, just to note that you shouldn't treat indexes as _more_ valid
[18:38:15] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[18:39:06] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca)
[18:44:59] *** Quits: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe) (Ping timeout: 256 seconds)
[18:45:31] *** Joins: magla (~gelignite@d536277f.access.ecotel.net)
[18:52:37] *** Quits: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi) (Quit: faaa)
[18:52:53] *** Joins: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi)
[18:57:04] *** Joins: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se)
[18:57:26] *** Joins: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe)
[19:00:02] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:dd48:37e7:aeeb:3a31) (Quit: Quit)
[19:00:46] *** Joins: temp_user_2022 (~amit@2601:445:447f:a2f6:b910:cb62:dbba:4511)
[19:05:08] <PJBoy> Haohmaru, I see what you did there
[19:05:13] <PJBoy> oh wait, no I don't
[19:10:03] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:dd48:37e7:aeeb:3a31)
[19:12:41] *** Joins: Uswald (~leandre@2a01cb040075f900c9d271e7359ac219.ipv6.abo.wanadoo.fr)
[19:12:41] *** Quits: Uswald (~leandre@2a01cb040075f900c9d271e7359ac219.ipv6.abo.wanadoo.fr) (Changing host)
[19:12:41] *** Joins: Uswald (~leandre@user/Uswald)
[19:15:28] *** Joins: Tokamak (~Tokamak@172.58.191.35)
[19:15:51] <rpav> PJBoy: so that's what an invisible barrier looks like!
[19:16:57] *** Quits: Uswald (~leandre@user/Uswald) (Ping timeout: 240 seconds)
[19:22:20] *** Quits: magla (~gelignite@d536277f.access.ecotel.net) (Read error: Connection reset by peer)
[19:23:27] *** Joins: magla (~gelignite@d536277f.access.ecotel.net)
[19:23:30] <Alipha> { uint64_t x = -1, y = -1u; cout << x, y; } // ville, be careful
[19:23:31] <geordi> 18446744073709551615, 4294967295
[19:24:22] *** Joins: c4017w_ (~c4017@209.52.68.8)
[19:28:03] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[19:32:41] <PJBoy> that's a good one to keep in mind
[19:35:02] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:39:29] <Alipha> We need u32, etc suffixes
[19:42:30] <ville> Alipha: umm...
[19:42:56] <ville> i do know u is for unsigned. and in real code i have my own _u32 suffix
[19:44:38] <pulse> DWORD64
[19:46:32] <rpav> qword? isn't dword64 wrong and/or redundant
[19:46:50] <rpav> though it keeps reminding me of doom64
[19:49:39] <ville> Alipha: it's just clang being particularly cranky for no reason
[19:49:55] <pulse> typedef unsigned __int64 DWORD64;
[19:50:04] <pulse> typedef unsigned __int64 DWORDLONG;
[19:50:15] <pulse> why do they need so many same types
[19:50:17] <PJBoy> those are both horrible
[19:50:23] <PJBoy> absolutely horrible
[19:50:40] <pulse> typedef unsigned __int64 ULONG64;
[19:53:07] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[19:54:23] <kalven> they shit the bed when they introduced the WORD typedef back in the stone age
[19:55:45] <pulse> i think of CPU architecture when i hear word, not high level code
[19:55:51] <pulse> a bit bizarre
[19:56:11] <rpav> it's from the days when it mattered more
[19:56:13] <MaddHatter> okay, this has to be broken. I ran hello-world and the program runs all the way through its exit. It's been running for 24hr now and still hasn't managed to actually terminate under address sanitizer.
[19:56:59] <MaddHatter> It's been using 100% of a core the whole time, so there's no way it's doing anything except a busy-useless-loop.
[19:57:14] <rpav> though i think it never changed even though actual word size changed, which just makes it all super useful of course
[19:57:31] <kalven> that's the dumb part
[19:58:11] <rpav> MaddHatter: and you left just left it to run? what's the usual runtime?
[19:58:26] <rpav> like, do you expect your hello world to take 12 hours
[19:58:43] <MaddHatter> rpav: a couple seconds
[19:58:57] <rpav> then letting it run for more than a couple seconds is pretty silly
[19:59:08] <MaddHatter> the last time I asked this question, someone said, "yeah, it takes a long time; just let it go overnight"
[19:59:18] <MaddHatter> So I did... and I don't think more time is what it needs at this point
[19:59:34] <rpav> the advice of whoever said that should probably be avoided in the future
[19:59:52] *** Joins: seninha_ (~seninha@user/seninha)
[19:59:58] <rpav> asan typically makes things like 3-5x slower in the worst case .. usually i think i notice ~3x slowdown tops
[20:00:02] <MaddHatter> I have 7 other cores, so it's not like it was a loss or anything
[20:00:14] <rpav> also your hello world program taking _seconds_ rather than _milliseconds_ is likely a bad sign
[20:00:27] <MaddHatter> but the questions remain: 1) wtf is wrong and 2) how do I actually run this with asan?
[20:00:35] <rpav> maybe post your code and let's see
[20:00:50] <rpav> and is this windows or linux
[20:00:55] <MaddHatter> hello world was understating it a little. It's a unit test.
[20:00:59] <MaddHatter> windows
[20:01:07] <rpav> ok windows+asan i am not yet familiar with
[20:01:27] <MaddHatter> (and seconds is probably being a little generous)
[20:01:33] <rpav> maybe run some actual hello worldy thing that's simple with it and verify that it both runs normally and detects errors normally
[20:02:37] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 256 seconds)
[20:09:32] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[20:11:59] <PJBoy> I wasn
[20:12:08] <PJBoy> I wasn't kidding when I said let it run overnight fwiw
[20:12:25] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[20:12:50] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:12:53] <rpav> asan shouldn't take that much longer to complete
[20:13:07] <rpav> if it normally runs in 10s and you're hitting a minute, i'd kill it and check
[20:13:20] <PJBoy> it was *really* bad when I used it
[20:13:31] <PJBoy> so yeah idk
[20:13:42] <rpav> i've used it extensively over the past few years even in code which runs "fast" and it isn't a huge slowdown
[20:14:14] <PJBoy> in windows though
[20:14:14] <rpav> it's possible if you're running it on code that allocates a fuckton and you compiled without optimizations that you will see it be very slow
[20:14:46] <rpav> oh .. if you compiule debug in windows, with debug iterators, you're already screwed so at a minimum /D_ITERATOR_DEBUG_LEVEL=0 always
[20:15:16] <rpav> MS's worst library feature
[20:24:29] *** Joins: paul424 (~tom@ip-5-172-233-41.multi.internet.cyfrowypolsat.pl)
[20:24:53] *** Joins: c4017w__ (~c4017@209.52.68.8)
[20:28:21] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[20:36:08] *** Quits: andreasbuhr (~quassel@p549dbab5.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:39:19] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[20:46:54] *** Quits: AmR (~AmREiSa@156.207.136.200) (Remote host closed the connection)
[20:46:59] *** Joins: sbrothy (~sbrothy@213.83.133.231)
[20:47:30] *** Joins: AmR (~AmREiSa@156.207.136.200)
[20:51:15] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[20:57:10] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[21:02:17] *** Quits: proller (~p@2a02:6b8:0:40c:4ede:d7a4:f153:fe33) (Ping timeout: 240 seconds)
[21:13:11] *** Quits: paul424 (~tom@ip-5-172-233-41.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[21:17:00] *** Quits: AmR (~AmREiSa@156.207.136.200) (Remote host closed the connection)
[21:17:29] *** Joins: AmR (~AmREiSa@156.207.136.200)
[21:19:02] *** Quits: AmR (~AmREiSa@156.207.136.200) (Client Quit)
[21:25:22] *** Joins: c4017w_ (~c4017@209.52.68.8)
[21:28:18] *** Quits: callq (~callq@2409:4062:2e9e:2081:3c70:5be0:414d:6151) (Quit: callq)
[21:28:45] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[21:28:59] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[21:29:57] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 240 seconds)
[21:30:50] *** Quits: magla (~gelignite@d536277f.access.ecotel.net) (Quit: Stay safe!)
[21:31:30] *** Quits: seninha_ (~seninha@user/seninha) (Quit: Leaving)
[21:33:58] *** Joins: seninha (~seninha@user/seninha)
[21:36:16] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[21:39:38] <Alipha> oj: if the element in the ranged-for is currently the front element of the std::deque, then pop_front will cause UB. otherwise, it's fine.
[21:41:57] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:42:05] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:42:05] *** ChanServ sets mode: +v npaperbot
[21:43:51] *** Joins: aosync (~aws@mx1.aosync.me)
[21:46:52] *** Quits: kevr (~kevr@user/kevr) (Remote host closed the connection)
[21:47:37] *** Joins: kevr (~kevr@user/kevr)
[21:55:36] <oj> Alipha: so you'd have to delay by one iteration
[21:55:37] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[21:56:17] <Alipha> Or not use ranged for
[21:56:34] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[21:58:55] <oj> I already abandoned the idea of range-foring the deque
[21:59:05] <oj> it's of academic interest at this point
[22:00:00] <oj> I just think there's no possible way for iter.increment() to return a different value before and after the iterator is invalidated
[22:00:14] <oj> because the iterator itself hasn't mutated, even though it's invalidated
[22:00:49] <oj> and if iter.increment returned the next iterator before, it would still do it even though it's invalidated
[22:01:25] <oj> (or at least this is how I'm reasoning about it)
[22:01:46] <oj> of course, since it's UB, I guess the compiler could technically decide to do whatever
[22:02:32] <oj> "oh, I see you're calling increment on an invalid iterator. Here, have some garbage"
[22:02:49] <oj> - g++ probably
[22:07:59] <Alipha> { deque<int> d{3, 4, 5}; for(int x : d) { cout << x; if(x == 3) d.pop_front(); } }
[22:08:00] <geordi> 3/usr/local/include/c++/12.0.1/debug/safe_iterator.h:332: [+ 12 discarded lines]
[22:10:21] *** Quits: limubs (~limubs@cgn-89-0-52-200.nc.de) (Ping timeout: 256 seconds)
[22:10:41] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 256 seconds)
[22:11:09] <Alipha> But indeed, I'm not sure how a sane, non-debug std::deque wouldn't do "what you expect".
[22:11:23] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[22:12:59] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Read error: Connection reset by peer)
[22:13:03] *** Joins: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[22:15:35] <Alipha> Hm. The complexity requirements of std::deque don't allow it to be a linked list of pointers to arrays, correct? It must be an array of pointers to arrays?
[22:18:09] *** Joins: Deneb (~johnch@23.143.9.51.dyn.plus.net)
[22:19:57] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[22:20:08] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[22:25:53] *** Joins: c4017w__ (~c4017@209.52.68.8)
[22:27:38] *** Joins: Simplar (~Simplar@188.163.93.241)
[22:29:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[22:30:23] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[22:30:25] *** Quits: Tokamak (~Tokamak@172.58.191.35) (Ping timeout: 256 seconds)
[22:32:27] *** Quits: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se) (Ping timeout: 256 seconds)
[22:34:22] *** Joins: Tokamak (~Tokamak@172.58.188.214)
[22:38:21] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca) (Ping timeout: 256 seconds)
[22:42:55] *** Quits: ville (~ville@user/ville) (Quit: ville)
[22:43:15] *** Joins: ville (~ville@user/ville)
[22:44:09] *** Joins: pulse_ (~pulse@user/pulse)
[22:44:30] *** Quits: pulse_ (~pulse@user/pulse) (Read error: Connection reset by peer)
[22:46:01] *** Quits: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe) (Ping timeout: 250 seconds)
[22:46:08] *** Joins: pulse_ (~pulse@user/pulse)
[22:46:38] *** Quits: pulse (~pulse@user/pulse) (Killed (NickServ (GHOST command used by pulse_)))
[22:46:40] *** pulse_ is now known as pulse
[22:48:36] <PJBoy> indeed
[22:48:45] <PJBoy> need random access
[22:50:35] *** Quits: dld (~davidlowr@73.61.8.20) (Ping timeout: 256 seconds)
[22:52:29] *** Joins: dld (~davidlowr@73.61.8.105)
[22:54:57] *** Joins: magla (~gelignite@d536277f.access.ecotel.net)
[22:55:12] <LordKalma> https://devblogs.microsoft.com/cppblog/gsl-4-0-0-is-available-now/
[22:59:27] *** Joins: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe)
[23:09:20] *** Joins: paul424 (~tom@ip-5-172-232-177.multi.internet.cyfrowypolsat.pl)
[23:13:49] <PJBoy> I wonder what the adoption numbers are for gsl
[23:14:09] *** Quits: dld (~davidlowr@73.61.8.105) (Ping timeout: 256 seconds)
[23:14:13] <LordKalma> https://conan.io/center/ms-gsl
[23:14:16] <LordKalma> 21k downloads, not bad
[23:14:25] <PJBoy> possibly all by microsoft
[23:14:26] <LordKalma> holy shit, 4.0.0 is already in
[23:14:39] <LordKalma> ms would use vcpkg internally, you'd expect haha
[23:14:40] <PJBoy> ahaha wow
[23:14:48] <PJBoy> yeah true
[23:15:07] <PJBoy> probably the conan config hasn't changed at all
[23:15:30] <LordKalma> yeah, the easiest CCI PR is a +4 lines diff
[23:15:57] *** Quits: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Read error: Connection reset by peer)
[23:16:07] *** Joins: dld (~davidlowr@2601:197:600:1210:3c77:90a4:f938:18fe)
[23:16:15] *** Joins: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[23:17:58] *** Quits: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Read error: Connection reset by peer)
[23:18:41] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[23:22:49] <LordKalma> PJBoy, https://github.com/conan-io/conan-center-index/pull/9102/files
[23:23:11] <PJBoy> back in January I see
[23:23:22] <LordKalma> Usually it's just conandata.yml and config.yml when nothing changes
[23:23:32] <LordKalma> 7 days ago indeed
[23:23:38] <LordKalma> didn't know the ms blog had that much lag hahah
[23:25:14] *** Joins: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com)
[23:25:22] <PJBoy> makes sense I suppose
[23:25:28] <PJBoy> probably a different department doing blogs
[23:25:47] <PJBoy> or maybe it's just allowing for unexpected quick patches
[23:26:13] <LordKalma> Qt posts stuff on the blog quite quickly regarding releases
[23:26:22] *** Joins: c4017w_ (~c4017@209.52.68.8)
[23:27:37] <PJBoy> to be fair though, GSL is just kinda whatever
[23:27:39] <kalven> https://github.com/scrtwpns/pigment-mixing - itty bitty header, 10MB implementation, containing a 4MB embedded PNG and a copy of stb image to decoder the fucker
[23:27:43] <PJBoy> Qt releases are more significant
[23:28:07] <PJBoy> ahahahaha
[23:28:09] <PJBoy> what
[23:28:59] <PJBoy> how does it have so many stars
[23:29:04] <PJBoy> and forks wtf
[23:29:36] <LordKalma> static const unsigned int mixbox_lut_png_data[4070220/4] =
[23:29:39] <LordKalma> holy shit hahah
[23:29:55] <ville> PJBoy: it's really neat
[23:30:15] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[23:30:16] <LordKalma> I once saw pip as a char array
[23:30:27] <LordKalma> with a comment saying // This scary blob is pip
[23:30:27] <ville> if you were referring to mixbox
[23:30:35] <PJBoy> yeah
[23:31:09] <PJBoy> it's unlicensed, which is curious
[23:31:21] <PJBoy> the website says to get in touch for one
[23:31:22] <ville> that's one of the annoying problems if you're used to painting with actual paint and mixing colors that way, once you switch to digital the colors you get out are just wrong
[23:31:48] <LordKalma> http://miniaud.io/ is public-domain/MIT-0 if you use some options  and it's a 4mb header file with the implementation on it
[23:31:54] <ville> well they are mathematically correct as in doing what the chosen model tells them to, but the model is wrong. mixbox fixes that
[23:31:57] <LordKalma> #define MINIAUDIO_IMPLEMENTATION #include "miniaudio.h"
[23:32:04] <rpav> ville: different color model .. you can find programs that do physically-based paint mixing though
[23:32:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[23:32:21] <PJBoy> ok that was a cool summary
[23:32:31] <LordKalma> hahah never really thought about pigment colour
[23:32:36] <PJBoy> but it was recently recently
[23:32:42] <PJBoy> I'm still surprised it's so popular
[23:32:44] <LordKalma> but once I wanted to print a vector drawing I made... in RGB
[23:32:54] <LordKalma> and discovered printing fabs use CYK
[23:33:02] <PJBoy> and like what are people doing on these forks, that's bad
[23:33:06] <PJBoy> *mad
[23:33:16] <LordKalma> PJBoy, removing the blob?
[23:33:33] <PJBoy> lets find out
[23:33:54] <rpav> LordKalma: even that's not the end of the story .. color is a bit like text (though not as bad) as an end-to-end process
[23:34:01] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[23:34:26] <LordKalma> hahah speaking of color, once in a game show on tv here they had a question that was "which of this is a primary colour?"
[23:34:34] *** Quits: magla (~gelignite@d536277f.access.ecotel.net) (Read error: Connection reset by peer)
[23:34:39] <LordKalma> first, i was screaming at the tv "PIGMENT PRIMARY OR LIGHT PRIMARY?"
[23:34:44] <rpav> ;)
[23:34:50] *** Joins: magla (~gelignite@d536277f.access.ecotel.net)
[23:34:51] <LordKalma> when none of the answers was primary in neither
[23:34:54] <LordKalma> so yeah, there's that
[23:34:55] <LordKalma> haha
[23:35:00] <rpav> additive or subtractive
[23:35:34] <LordKalma> you can always tell they put the journalism interns making the questions haha
[23:35:46] *** Quits: Terminus (~null@user/terminus) (Ping timeout: 245 seconds)
[23:35:51] <LordKalma> 80% is "culture" and anything that's science has the question wrong half the time
[23:36:04] <PJBoy> none of them have done anything
[23:36:09] <PJBoy> I don't get it
[23:36:14] <PJBoy> to people just fork for fun?
[23:36:29] *** Quits: kristjansson (sid126207@tinside.irccloud.com) (Ping timeout: 256 seconds)
[23:36:46] <rpav> it could be worse .. major in journalism, work on game blog writing hundreds of articles about what some person did in skyrim today
[23:36:48] <ville> could be some school thing. fork this. do something useful
[23:36:49] <PJBoy> only exception is this guy https://github.com/aratama/pigment-mixing
[23:36:55] <PJBoy> who converted it to javascript
[23:37:11] <LordKalma> that's not a fork *facepalm*
[23:37:39] <PJBoy> or typescript to be more precise
[23:38:40] *** Joins: Terminus (~null@user/terminus)
[23:38:45] *** Quits: NiKaN (sid385034@helmsley.irccloud.com) (Ping timeout: 256 seconds)
[23:38:49] *** Quits: Leone (~Leo@108.175.224.215) (Read error: Connection reset by peer)
[23:38:58] <LordKalma> you're right, the forks have no commits hahah wtf
[23:39:23] *** Joins: NiKaN (sid385034@id-385034.helmsley.irccloud.com)
[23:39:57] *** Joins: kristjansson (sid126207@id-126207.tinside.irccloud.com)
[23:40:49] *** Joins: proller (~p@2a02:6b8:b081:a405::1:19)
[23:41:46] <ville> another source of these kinds of things from schools are where github activity is used as a metric, so it leads to this kind of behaviour and others
[23:42:06] <ville> pull requests to shift whitespace and whatnot
[23:45:37] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:a82b:45ec:56a1:f24) (Ping timeout: 240 seconds)
[23:48:01] *** Joins: joilerv (~joilerv@135.129.250.144)
[23:48:42] *** Quits: joilerv (~joilerv@135.129.250.144) (Client Quit)
[23:50:07] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:a151:152f:1fb7:8c9f)
[23:51:35] <rpav> is there an easy/std-builtin way to have some `maybe_const_t<C,T>& foo(C<T>& v)`
[23:51:50] <rpav> i think i have a custom type trait that's `copy_const<A,B>`
[23:52:30] <rpav> (it doesn't have to be C<T>, in this case should really just be C)
[23:54:03] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca)
[23:54:10] <PJBoy> unsure of what the goal is
[23:54:27] <rpav> to write one function that takes `const C&` or `C&` and returns `const T&` or `T&` appropriately
[23:54:52] <rpav> of course this only works for free functions because C++ is shit, but it _does_ work for them
[23:55:19] <PJBoy> so like conditional_t<is_const_v<C>, const T&, T&>
[23:55:36] <rpav> yeah that's a pretty simple formulation, good call
[23:55:55] <PJBoy> :)
[23:57:18] <rpav> not sure why i never use conditional_t .. probably because i rarely deal with conditionals depending on actual values
[23:57:59] *** Joins: joilerv (~joilerv@135.129.250.144)
[23:59:54] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
