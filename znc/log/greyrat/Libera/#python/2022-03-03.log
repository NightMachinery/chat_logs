[00:00:03] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[00:00:11] *** Joins: Masterphi (~Masterphi@user/masterphi)
[00:00:30] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::3a92)
[00:00:43] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[00:00:43] *** Quits: kevr (~kevr@user/kevr) (Remote host closed the connection)
[00:00:44] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[00:00:44] *** Quits: domicron (~domicron@gateway/tor-sasl/domicron) (Remote host closed the connection)
[00:00:44] *** Quits: noteness (~noteness@user/noteness) (Remote host closed the connection)
[00:00:45] *** Quits: CombatVet (~c4@user/combatvet) (Remote host closed the connection)
[00:00:45] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[00:01:00] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 240 seconds)
[00:01:03] *** Joins: kevr (~kevr@user/kevr)
[00:01:11] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[00:01:13] <CrtxReavr> Huh. . .
[00:01:22] <CrtxReavr> YOu really can use True, False, & None as dict keys.
[00:01:24] *** Joins: domicron (~domicron@gateway/tor-sasl/domicron)
[00:01:32] *** Joins: noteness (~noteness@user/noteness)
[00:01:34] *** Joins: Seto_Kaiba (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3)
[00:01:38] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[00:01:42] *** Joins: ano (~ano@user/ano)
[00:02:05] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[00:02:05] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::3a92) (Remote host closed the connection)
[00:02:21] *** Quits: kaos02 (~kaos02@12.186.233.220.static.exetel.com.au) (Quit: Lost terminal)
[00:02:22] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[00:02:32] *** Joins: CombatVet (~c4@user/combatvet)
[00:02:33] *** Quits: toma (~RubbishPu@node-1w7jr9yhpl48aghvvyhn682j5.ipv6.telus.net) (Read error: Connection reset by peer)
[00:03:06] *** Quits: BASHitup (~richard@user/yippeekaiyay) (Ping timeout: 272 seconds)
[00:03:08] <grym> None gets a little silly, but true and false don't surprise me
[00:04:24] *** Joins: radiojosh (~Joshua@70-131-32-80.lightspeed.stlsmo.sbcglobal.net)
[00:04:27] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[00:04:31] *** Quits: Hunterkll (~hunterkll@remote.kisaracorporation.com) (Ping timeout: 245 seconds)
[00:04:44] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[00:04:49] *** Joins: pycurious (~Adium@user/pycurious)
[00:05:27] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:196e:3873:bcc9:b76f) (Quit: Client closed)
[00:06:54] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[00:06:57] <Wooble> well I mean you don't get much more immutable than a keyword.
[00:07:12] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[00:08:48] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[00:09:17] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[00:09:31] *** Quits: Fossil (~Fossil@95.85.23.165) (Ping timeout: 245 seconds)
[00:09:34] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[00:09:34] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[00:10:50] *** Joins: Fossil (~Fossil@95.85.23.165)
[00:11:35] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 240 seconds)
[00:11:38] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[00:11:56] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[00:12:48] *** Quits: anshupatia (uid29854@id-29854.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[00:13:16] *** Joins: Guest80 (~Guest80@pool-96-253-74-73.rcmdva.fios.verizon.net)
[00:13:31] *** Joins: Waleed4 (~Waleed@103.104.214.142)
[00:13:37] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[00:13:49] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[00:13:50] *** Quits: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Client Quit)
[00:14:06] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[00:14:28] <Waleed4> FLAVORS = [
[00:14:29] <Waleed4>     "Banana",
[00:14:29] <Waleed4>     "Chocolate",
[00:14:30] <Waleed4>     "Lemon",
[00:14:30] <Waleed4>     "Pistachio",
[00:14:31] <Waleed4>     "Raspberry",
[00:14:31] *** litharge sets mode: +q *!*@103.104.214.142
[00:14:54] *** Quits: ThePhilgrim (~ThePhilgr@151.41.9.171) (Quit: ThePhilgrim)
[00:15:02] *** litharge sets mode: -q *!*@103.104.214.142
[00:15:15] *** Quits: Waleed4 (~Waleed@103.104.214.142) (Client Quit)
[00:15:31] *** Joins: Waleed (~Waleed@103.104.214.142)
[00:15:37] <SnoopJ> "Salty"] ?
[00:15:44] <supakeen> ahaha
[00:15:52] <Wooble> you had me at pistachio
[00:15:56] * SnoopJ was not fast enough to type a bpa.st message
[00:16:00] *** Joins: BASHitup (~richard@user/yippeekaiyay)
[00:16:02] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[00:16:19] <CrtxReavr> I do love me some pistacios.
[00:16:19] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[00:16:27] <Wooble> if only the channel had some kind of bot that notices when people are pasting lots of text! oh well.
[00:16:50] <Waleed> hey i need somebody to explain me what does f1<f2 in FLAVORS list
[00:17:22] <CrtxReavr> When we lived in Iran, as a wee lad, my dad would bring home pistachios in 50 lb. burlap sacks.
[00:17:24] <supakeen> Try pasting your code by using a pastebin and giving us the link.
[00:17:38] *** Quits: roxfan (~roxfan@2a02:a03f:a2be:4f00:812d:c5ec:e86f:78e9) (Ping timeout: 260 seconds)
[00:18:05] <Waleed> FLAVORS = [
[00:18:05] <Waleed>     "Banana",
[00:18:06] <Waleed>     "Chocolate",
[00:18:06] <Waleed>     "Lemon",
[00:18:07] <Waleed>     "Pistachio",
[00:18:07] <Waleed>     "Raspberry",
[00:18:07] *** litharge sets mode: +q *!*@103.104.214.142
[00:18:10] <Wooble> Waleed: if f1 and f2 are flavors from that list, > compares them lexicially (i.e., alphabetically)
[00:18:13] <SnoopJ> Waleed, you can paste your code at https://bpa.st/
[00:18:14] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[00:18:24] <SnoopJ> (the bot will quiet you if you try to paste directly into the channel)
[00:18:27] *** Joins: qlixed (~qlixed@181.44.129.13)
[00:18:30] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[00:18:39] *** litharge sets mode: -q *!*@103.104.214.142
[00:18:47] *** Joins: jamea22 (~jamea@189.237.20.19)
[00:18:56] *** Quits: jamea (~jamea@189.237.20.19) (Ping timeout: 272 seconds)
[00:19:14] <Waleed> okay got it
[00:19:28] <Waleed> I post it on the given link
[00:19:48] *** Joins: Titore (~Titore@user/titore)
[00:19:55] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[00:20:15] *** runelind_ is now known as runelind
[00:20:33] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[00:20:34] <SnoopJ> You'll have to share the link the site gives you so we can see it
[00:20:52] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[00:21:00] <Waleed> https://bpa.st/VDYA
[00:22:28] *** Quits: Masterphi (~Masterphi@user/masterphi) (Quit: Masterphi)
[00:22:38] <SnoopJ> Waleed, `f1<f2` is comparing the two strings
[00:22:42] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[00:22:58] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[00:23:36] <SnoopJ> Strings compare in "alphabetical" order: `"Banana" < "Basketball"` is True, but `"Banana" < "Baccarat"` is False
[00:23:56] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[00:24:38] <Wooble> (and note that all of the lowercase letters are "greater" than all of the uppercase ones, and if you have non-ascii things it's going to be even more surprising)
[00:25:01] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[00:25:18] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[00:25:55] <Waleed> okay got it now
[00:26:14] <Waleed> thanks
[00:26:47] *** Joins: jamea (~jamea@189.237.20.19)
[00:26:48] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Quit: Leaving...)
[00:27:06] *** Joins: Masterphi (~Masterphi@user/masterphi)
[00:27:26] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[00:27:43] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[00:27:53] *** Quits: amogorkon (~amogorkon@port-92-196-27-200.dynamic.as20676.net) (Remote host closed the connection)
[00:27:57] *** Quits: jamea22 (~jamea@189.237.20.19) (Ping timeout: 240 seconds)
[00:27:58] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[00:28:13] *** Quits: Masterphi (~Masterphi@user/masterphi) (Client Quit)
[00:28:16] *** Joins: amogorkon (~amogorkon@port-92-196-27-200.dynamic.as20676.net)
[00:28:56] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[00:29:17] *** Quits: orbisvicis (~orbisvici@user/orbisvicis) (Remote host closed the connection)
[00:29:39] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[00:29:41] *** Joins: orbisvicis (~orbisvici@user/orbisvicis)
[00:29:55] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[00:30:01] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[00:30:13] *** Quits: Waleed (~Waleed@103.104.214.142) (Quit: Client closed)
[00:30:21] *** Quits: qlixed (~qlixed@181.44.129.13) (Ping timeout: 268 seconds)
[00:32:10] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[00:32:29] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[00:32:48] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Client Quit)
[00:33:03] *** Quits: amogorkon (~amogorkon@port-92-196-27-200.dynamic.as20676.net) (Ping timeout: 256 seconds)
[00:33:14] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[00:33:28] *** Joins: Masterphi (~Masterphi@user/masterphi)
[00:33:31] *** Joins: zebrag (~chris@user/zebrag)
[00:34:22] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[00:34:25] *** Quits: orbisvicis (~orbisvici@user/orbisvicis) (Ping timeout: 256 seconds)
[00:34:32] *** Joins: c4017w_ (~c4017@209.52.68.8)
[00:34:39] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[00:34:41] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Client Quit)
[00:34:56] *** Joins: skontomobil (~skontomob@94.31.101.228)
[00:35:09] *** Quits: akmod (~akmod@c-73-228-115-212.hsd1.ut.comcast.net) (Quit: Konversation terminated!)
[00:35:14] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[00:36:43] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[00:37:01] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[00:37:37] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[00:38:23] *** Quits: Guest80 (~Guest80@pool-96-253-74-73.rcmdva.fios.verizon.net) (Ping timeout: 256 seconds)
[00:38:32] *** Joins: jazzy (~jaziz@user/jaziz)
[00:39:03] *** Joins: jamea22 (~jamea@189.237.20.19)
[00:39:10] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[00:39:17] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Changing host)
[00:39:17] *** Joins: bomb-on (~bomb-on@user/bomb-on)
[00:39:27] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[00:39:37] *** Quits: goncalo_ (~goncalo.g@154.61.65.190) (Quit: leaving)
[00:40:57] *** Quits: Titore (~Titore@user/titore) (Quit: Bye!)
[00:41:26] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[00:41:26] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[00:41:40] *** Quits: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52) (Remote host closed the connection)
[00:41:41] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[00:41:48] *** Quits: jamea (~jamea@189.237.20.19) (Ping timeout: 240 seconds)
[00:42:23] *** Quits: loofy (~loofy@user/loofy) (Ping timeout: 272 seconds)
[00:42:43] *** Quits: bluedust (~bluedust@103.165.167.61) (Remote host closed the connection)
[00:42:59] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::3a92)
[00:43:19] *** Joins: bluedust (~bluedust@103.165.167.61)
[00:43:35] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[00:43:52] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[00:44:12] *** Joins: programmar (~whatever@118.69.128.37)
[00:45:02] *** Quits: magla (~gelignite@55d4a4ec.access.ecotel.net) (Quit: Stay safe!)
[00:45:09] <programmar> guys if i have a function such as func(**kargs) and i also have a dict like {a:2, b:3}, how can i pass that dict to func as func(a=2, b=3) ?
[00:45:18] <programmar> or that's not possible in python ?
[00:45:22] *** Joins: loofy (~loofy@user/loofy)
[00:45:25] <supakeen> func(**yourdict)
[00:45:28] <supakeen> (on the calling side)
[00:45:48] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[00:45:49] *** Quits: jamea22 (~jamea@189.237.20.19) (Ping timeout: 240 seconds)
[00:46:04] *** Joins: jamea (~jamea@189.237.20.19)
[00:46:05] <programmar> ah ok thk
[00:46:07] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[00:46:07] *** Quits: harpia (~harpia@143.208.84.100) (Quit: harpia)
[00:46:46] *** Quits: Angs (~Angs@2.69.51.226.mobile.tre.se) (Quit: Leaving)
[00:47:25] *** Quits: bluedust (~bluedust@103.165.167.61) (Ping timeout: 240 seconds)
[00:47:27] *** Quits: bomb-on (~bomb-on@user/bomb-on) (Ping timeout: 256 seconds)
[00:48:01] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[00:48:10] *** Quits: antropez (~antropez@d216-121-208-163.home3.cgocable.net) (Quit: leaving)
[00:48:20] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[00:48:39] *** Joins: data68 (~data@2a02:908:a65:3d80:758c:9049:dcf1:191b)
[00:49:30] <blei> how best to pass a 100MB numpy array to a multiprocessing subprocess? can you avoid pickling?
[00:49:31] *** Joins: resmo (~resmo@2a00:d420:9:8a00:7204:306f:2d78:a771)
[00:49:43] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[00:49:44] <anddam> CrtxReavr: burlap sacks are the best
[00:50:11] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[00:50:14] *** Quits: greedom (~greedom@p200300de670f0d000a73634598407e9e.dip0.t-ipconnect.de) (Remote host closed the connection)
[00:50:25] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[00:50:26] <_ev> //join #tortoise-orm
[00:50:42] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[00:50:46] <anddam> _ev: almost
[00:50:51] *** Quits: loofy (~loofy@user/loofy) (Ping timeout: 256 seconds)
[00:51:13] *** Joins: greedom (~greedom@p200300de670f0d000a73634598407e9e.dip0.t-ipconnect.de)
[00:51:40] *** Quits: spetrosi (~spetrosi@2a02:8308:b:ec00:e1ce:d7b:6a8f:f189) (Quit: Leaving)
[00:52:18] <SnoopJ> blei, you could store the backing data in multiprocessing.shared_memory and create ndarray objects around it (the parts that aren't the buffer are pretty cheap)
[00:52:48] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[00:53:01] *** Joins: mags_ (~mags@096-042-013-246.res.spectrum.com)
[00:53:05] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[00:53:18] *** Joins: NealRame (~a@89.187.163.193)
[00:54:15] <anddam> Tortoise ORM seems interesting, but that led me to Pony ORM, even more interesting
[00:54:24] *** Quits: mags_ (~mags@096-042-013-246.res.spectrum.com) (Client Quit)
[00:54:26] *** Joins: loofy (~loofy@user/loofy)
[00:54:34] *** Joins: parv (~quass@user/parv)
[00:55:03] *** Quits: Joel (~jjshoe@user/joel) (Ping timeout: 272 seconds)
[00:55:08] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[00:55:18] *** Quits: HurricaneHarry (~quassel@84-85-122-182.fixed.kpn.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:55:25] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[00:55:29] *** Joins: Joel (~jjshoe@user/joel)
[00:55:38] <grym> anddam: sqla is the dominating presence in the ORM space, though
[00:55:45] <grym> (and the various wrappers on top of it)
[00:55:51] <blei> i will try it thanks
[00:55:58] <anddam> grym: but I know SQLAlchemy already
[00:56:05] <grym> anddam: oh; great :P
[00:56:36] *** Joins: mags_ (~mags@096-042-013-246.res.spectrum.com)
[00:56:42] <anddam> grym: also Tortoise has "asyncio" in the description on home page, and benchmark charts!
[00:56:46] *** Joins: jamea22 (~jamea@189.237.20.19)
[00:57:09] <anddam> now I might not be clear at all on the whole async shebang, and benchmarks are mostly useless, but does SQLA have those??
[00:57:10] *** Quits: mags_ (~mags@096-042-013-246.res.spectrum.com) (Client Quit)
[00:57:16] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[00:57:33] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[00:58:11] *** Quits: Joel (~jjshoe@user/joel) (Max SendQ exceeded)
[00:58:36] *** Joins: Joel (~jjshoe@user/joel)
[00:59:20] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[00:59:31] *** Joins: HurricaneHarry (~quassel@84-85-122-182.fixed.kpn.net)
[00:59:37] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[00:59:39] <blei> SnoopJ if this array is in the global namespace is it automatically copied to subprocesses via pickle or is it copied on demand? ie, if i don't access the version in the global namespace, that won't be copied?
[00:59:49] *** Quits: jamea (~jamea@189.237.20.19) (Ping timeout: 240 seconds)
[01:00:57] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[01:01:04] *** Quits: sydbarret (~anton@static-186-121-195-1.acelerate.net) (Quit: Going offline, see ya! (www.adiirc.com))
[01:01:10] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[01:01:10] *** Quits: aslicedbanjo (~aslicedba@host86-168-244-88.range86-168.btcentralplus.com) (Quit: Leaving.)
[01:01:40] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[01:01:58] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[01:02:26] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[01:02:28] *** Quits: mags (~mags@097-091-082-103.res.spectrum.com) (Quit: leaving)
[01:02:36] *** Joins: wolfshappen_ (~waff@irc.furworks.de)
[01:02:39] *** Quits: wolfshappen (~waff@irc.furworks.de) (Ping timeout: 272 seconds)
[01:02:49] *** Joins: mags (~mags@097-091-082-103.res.spectrum.com)
[01:02:58] *** Quits: extropiator (~admin@user/extropiator) (Quit: leaving)
[01:03:22] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[01:03:58] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[01:04:16] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[01:05:23] *** Quits: Barones (~Barones@user/Barones) (Quit: Leaving)
[01:05:25] *** Joins: mug3n_ (~mugen@gateway/tor-sasl/mugen)
[01:05:36] <blei> https://stackoverflow.com/questions/7894791/use-numpy-array-in-shared-memory-for-multiprocessing/37746961#37746961
[01:05:37] *** Quits: jamea22 (~jamea@189.237.20.19) (Ping timeout: 240 seconds)
[01:05:59] <SnoopJ> blei, neither. My suggestion is that you store the backing bytes (the `data` member in the ndarray struct) in shared memory, and build new ndarray objects that wrap around it
[01:06:04] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[01:06:09] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[01:06:10] *** Joins: zebrag (~chris@user/zebrag)
[01:06:21] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[01:06:48] <anddam> on a more serious matter, what is defining supported tags in packaging?
[01:06:53] <blei> since I am on Linux, putting the array in the global namespace automatically makes the memory regions available to the forked threads, which works since I am not writing to them from these processes
[01:07:02] <blei> *forked processes
[01:07:12] *** Quits: moose (~moose@user/moose) (Quit: Hopping)
[01:07:34] <grym> anddam: pep 440
[01:07:37] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[01:07:47] <grym> (possibly)
[01:08:00] *** Joins: jamea (~jamea@189.237.20.19)
[01:08:14] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[01:08:15] *** Quits: mug3n (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 240 seconds)
[01:08:33] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[01:09:15] *** Joins: cedric (~cedric@2a01:cb11:821:7c00:2cf3:3ae:83f4:867c)
[01:09:30] *** Quits: mags (~mags@097-091-082-103.res.spectrum.com) (Quit: leaving)
[01:09:33] *** Joins: moose (~moose@user/moose)
[01:09:49] *** Joins: mags (~mags@097-091-082-103.res.spectrum.com)
[01:10:00] *** Quits: pyevery__ (~pyeveryth@64-18-153-56.starry-inc.net) (Read error: Connection reset by peer)
[01:10:19] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[01:10:21] *** Quits: stockh0lm (~Andreas@p200300d2c70c6100f491f44bc7bfe165.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[01:10:24] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[01:10:36] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[01:12:19] *** Joins: pyeveryt_ (~pyeveryth@c-73-38-4-158.hsd1.nh.comcast.net)
[01:12:27] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[01:12:45] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[01:12:49] *** Quits: mags (~mags@097-091-082-103.res.spectrum.com) (Client Quit)
[01:13:06] <SnoopJ> anddam, are you talking about platform tags?
[01:14:07] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[01:14:38] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[01:14:56] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[01:15:02] *** Joins: qlixed (~qlixed@152.170.45.16)
[01:15:05] *** Joins: mags (~mags@097-091-082-103.res.spectrum.com)
[01:16:45] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[01:16:50] *** Quits: Strom (strom@fedora/strom) ()
[01:17:01] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[01:17:21] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[01:18:48] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Remote host closed the connection)
[01:18:55] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[01:19:01] *** Joins: jamea22 (~jamea@189.237.20.19)
[01:19:12] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[01:19:23] *** Joins: Staunch (~Staunch@150.93.99.34.bc.googleusercontent.com)
[01:19:46] *** Quits: pudo (uid16951@id-16951.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[01:21:05] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[01:21:06] *** Quits: thiras (~thiras@user/thiras) (Remote host closed the connection)
[01:21:25] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[01:21:31] *** Joins: thiras (~thiras@user/thiras)
[01:22:16] *** Quits: jamea (~jamea@189.237.20.19) (Ping timeout: 272 seconds)
[01:23:06] *** Joins: johnkeats6 (~johnkeats@2804:14c:32:a0cc:f82f:71a6:6eb0:431b)
[01:23:12] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[01:23:28] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[01:24:39] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[01:25:15] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[01:25:24] *** Quits: pjoter (~october@s166.cyber-folks.pl) (Ping timeout: 240 seconds)
[01:25:33] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[01:26:07] *** Joins: Stench (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[01:26:14] *** Quits: Leliana (is@2a02:2658:1133:0:dead:babe:0:1) (Quit: brb, sex)
[01:26:19] *** Joins: pjoter (~october@s166.cyber-folks.pl)
[01:26:28] *** Joins: Leliana (is@the.one.and.only.revthefox.co.uk)
[01:27:23] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[01:27:35] *** Quits: paul424 (~tom@ip-5-172-234-113.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[01:27:40] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[01:29:07] <programmar> also another question about flask please, so i have a route like this https://pastebin.com/HFZYuN4j which serve a js file as a service worker but i would like to pass a few optional variable to it please, is it possible ?
[01:29:29] <programmar> like render_template(template, var1=something, var2=something)
[01:29:31] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[01:29:37] <programmar> now it's with send_from_directory
[01:29:47] *** Quits: pycurious (~Adium@user/pycurious) (Read error: Connection reset by peer)
[01:29:48] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[01:29:55] *** Joins: pycurious (~Adium@user/pycurious)
[01:29:59] <programmar> or any possible method is ok
[01:30:24] *** Joins: Strom (strom@fedora/strom)
[01:30:30] *** Quits: Staunch (~Staunch@150.93.99.34.bc.googleusercontent.com) (Ping timeout: 272 seconds)
[01:30:45] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[01:31:25] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 240 seconds)
[01:31:36] <anddam> SnoopJ: yes, if you scroll a bit you'll see an odd (to me) message I got building PySide2 on M1 Mac Mini
[01:31:55] <anddam> (that I managed to build after a day)
[01:32:05] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[01:32:12] <blei> custom flags?
[01:32:23] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[01:32:29] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[01:32:37] <anddam> AssertionError: would build wheel with unsupported tag ('cp39', 'cp39', 'macosx_12_0_arm64')
[01:33:01] <SnoopJ> anddam, yea, that's why I asked. I don't think there's a single source that has all of the platform tags (many of them are in their own PEPs) but https://packaging.python.org/en/latest/specifications/platform-compatibility-tags/ collates some information
[01:33:01] <blei> pip install pyside6
[01:33:25] <anddam> but cp38 has no issue building, very same setup except the pyenv python version
[01:34:06] <Wooble> anddam: are you just trying to build from pypi? a lot of the newer versions don't seem to have sdists
[01:34:09] <SnoopJ> er, cp38 the abi tag, not the platform tag
[01:34:18] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[01:34:32] <anddam> consider I didn't even know "tags" existed before I had this error
[01:34:35] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[01:35:07] <anddam> blei: for now I had to check if PySide2 could be built, even a day spent to check a program works is less effort then upgrading the lib
[01:35:07] *** Joins: c4017w__ (~c4017@209.52.68.8)
[01:35:21] <anddam> Wooble: what do you mean build from pypi?
[01:35:33] <blei> custom flags?
[01:35:40] <Wooble> anddam: are you downloading the source, or just pip install pyside2?
[01:35:51] <anddam> from the source, pyside-test project
[01:35:57] *** Quits: parv (~quass@user/parv) (Ping timeout: 240 seconds)
[01:35:59] <anddam> err "pyside-setup"
[01:36:31] <SnoopJ> anddam, PEP 440 is a good read if you want to know what the tags are all about and what each one means
[01:36:34] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[01:36:52] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[01:36:54] *** Quits: ivii (~ivan@user/ivii) (Read error: Connection reset by peer)
[01:37:30] <anddam> yes, grym suggested that earlier
[01:38:12] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[01:38:12] <Wooble> wow, their method of determining valid python versions in setup.py is umm unusual.
[01:38:39] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[01:38:57] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[01:39:21] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[01:40:33] *** Joins: Titore (~Titore@user/titore)
[01:40:38] <anddam> but PEP440 seems to go great length describing the version specifier syntax
[01:40:44] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[01:41:00] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[01:41:10] <SnoopJ> anddam, what is your current question?
[01:41:16] <anddam> what I wonder is what decides (cp38, cp38, macosx_12_0_arm64) is accettable, but cp39 isn't
[01:41:29] <Wooble> anddam: might be related to https://github.com/pypa/packaging/issues/497 except you're on 12, not 11.
[01:41:50] <anddam> I *guess* it's some setting in a project, PySide2 being old could never had 3.9 mentions in first place
[01:42:04] <anddam> "packaging does not know that macOS 10.16 and 11.0 are the same #497
[01:42:09] <Wooble> nah, latest pyside2 works up to py3.10
[01:42:19] <anddam> well, I did not know that about macOS as well
[01:42:26] <SnoopJ> what is reporting the unsupported tag? I don't see that message in pip
[01:42:50] <Wooble> anddam: anyway I think packaging hardcodes stuff and will break until they update it whenever there's a new osx? :/
[01:43:02] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[01:43:02] *** Joins: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr)
[01:43:17] <BrenBarn> I mean that is really Apple's fault if they used version numbers that way
[01:43:19] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[01:43:27] *** Joins: const (~const@user/const)
[01:43:38] <SnoopJ> ah sorry anddam, PEP 425 is the one I was thinking of that goes over tags: https://www.python.org/dev/peps/pep-0425/
[01:43:48] <const> Is there any documentation of the differences and incompatibilities between _decimal and _pydecimal?
[01:43:55] *** Joins: jamea (~jamea@189.237.20.19)
[01:44:07] *** Quits: jamea22 (~jamea@189.237.20.19) (Ping timeout: 256 seconds)
[01:44:07] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[01:44:15] *** Quits: mags (~mags@097-091-082-103.res.spectrum.com) (Quit: leaving)
[01:44:43] <anddam> Wooble | wow, their method of determining valid python versions in setup.py is umm unusua  <<< "their" being pyside-setup's?
[01:44:56] <SnoopJ> const, it seems unlikely. Do you have a problem that is sensitive to the differences in the implementation?
[01:45:11] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[01:45:12] <Wooble> anddam: yeah, but not your problem here. They have a list of specifiers and then parse out the version numbers from it.
[01:45:15] *** Joins: burakcank (~burakcank@has.arrived.and.is.ready-to.party)
[01:45:30] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[01:45:41] <Wooble> you'd get a different error if you were on python 3.11, though! :)
[01:45:43] *** Joins: crackerjack (~crackerja@pear.bnc4free.com)
[01:46:10] *** Joins: mags (~mags@097-091-082-103.res.spectrum.com)
[01:46:13] <anddam> can't wait to get more errors
[01:46:34] <Wooble> (I think, not sure if wheel checks the tag before setup decides if you're allowed to build)
[01:47:05] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[01:47:19] <const> SnoopJ: they appear to have slightly different format specifiers, and also have different exception messages.
[01:47:22] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[01:47:39] <const> format(_pydecimal.Decimal(1), "#f") # => '1.'
[01:47:59] <const> format(_decimal.Decimal(1), "#f") # => ValueError
[01:48:03] <anddam> Wooble: I go through the whole bdist_wheel build phase, then at install it dies
[01:48:09] <Klinda> hello why in this expression you need the ( ) X[(X < 0.2)] = 0.8 ?
[01:48:21] <SnoopJ> const, why are you using them directly?
[01:48:25] <const> I'm not.
[01:48:26] *** Joins: pagios (~pagios@life.is-a.beauty)
[01:48:27] <anddam> I'll hack check_allowed_python_version tomorrow
[01:48:46] <SnoopJ> const, are you observing some difference from using `decimal` public interfaces?
[01:48:49] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[01:48:50] *** Joins: NeilRG (~NeilRG@96-127-194-85.qc.cable.ebox.net)
[01:49:06] <anddam> Klinda: seems some pandas subscript syntax hack
[01:49:11] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[01:49:11] <const> Half my users started having a problem, and the problem turns out to have been that there was a "#" in the format specifier, which fails if decimal is using _decimal, and succeeds if it is using _pydecimal.
[01:49:14] <SnoopJ> I guess you can get one or another of those Decimal implementations easily enough that way. That seems like a bug.
[01:49:19] <BrenBarn> Klinda: you don't, but sometimes people do it because you need parentheses if you want to add more conditions
[01:49:23] <Wooble> Obvious solution is to run with python -O so the assert is removed :)
[01:49:30] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[01:49:31] <BrenBarn> like X[(X < 0.2) & (X > 0.1)]
[01:49:35] *** Joins: sagax (~sagax_nb@user/sagax)
[01:50:03] <const> SnoopJ: Yes, that was my guess.
[01:50:19] <Klinda> I need my brain to think that it just control each element of the 2d matrix
[01:50:32] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[01:50:34] <anddam> BrenBarn: that works overriding operators methods to return something that can be used as slice, right?
[01:51:00] <Wooble> (I'm joking but getting assertion error at runtime is a bad sign :( )
[01:51:12] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[01:51:17] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[01:51:19] <blei> Klinda the parens evaluate the expression X < .2, the result of that expression is used to index into the X array
[01:51:25] <BrenBarn> anddam: well, something that can be used as an index
[01:51:25] <BrenBarn> numpy and pandas do that
[01:51:34] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[01:51:48] *** Quits: EgonX (~EgonX@2601:2c6:47f:879e:300e:d65f:1cca:5ccf) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:52:03] *** Quits: cosimone (~user@93-47-229-38.ip115.fastwebnet.it) (Ping timeout: 256 seconds)
[01:52:06] <anddam> doesn't subscript require some "sliceable" kind of object? (I have never read language definition for it)
[01:52:29] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[01:52:31] <BrenBarn> no
[01:52:44] <anddam> Wooble: meaning you shouldn't have assertion at all or that those should never be triggered?
[01:52:51] <SnoopJ> const, I see some bugs on the tracker about inconsistent behavior, particularly: https://bugs.python.org/issue45739
[01:52:57] <BrenBarn> when you do X[blah] it just calls `X.__getitem__` (or `.__setitem__` if you're assigning to it)
[01:53:08] <BrenBarn> there was an old `__getslice__` and `__setslice__` but that's not needed anymore
[01:53:27] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[01:53:40] <BrenBarn> and the object X can decide how to handle whatever gets passed in, whether that's a slice object or something else
[01:53:43] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[01:53:45] *** Joins: pycurious (~Adium@user/pycurious)
[01:54:12] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[01:54:42] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.3)
[01:54:55] <BrenBarn> so for instance numpy accepts a numpy boolean array as an index and interprets it as "select the items in the positions where this boolean array has True"
[01:55:07] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:88a7:1068:8c94:c172)
[01:55:07] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:88a7:1068:8c94:c172) (Changing host)
[01:55:07] *** Joins: skapata (~Skapata@user/skapata)
[01:55:19] *** Quits: greedom (~greedom@p200300de670f0d000a73634598407e9e.dip0.t-ipconnect.de) (Remote host closed the connection)
[01:55:37] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[01:55:42] <anddam> yes, just found slice objects in data model page
[01:55:44] <anddam> thx
[01:55:57] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[01:56:12] *** Quits: pycurious (~Adium@user/pycurious) (Client Quit)
[01:56:15] <anddam> so it's all https://docs.python.org/3/reference/datamodel.html#emulating-generic-types now
[01:56:40] *** Joins: pycurious (~Adium@user/pycurious)
[01:56:49] *** Quits: programmar (~whatever@118.69.128.37) (Quit: Leaving)
[01:56:51] <CrtxReavr> I hate to disparage jscript (only because it's so easy), but why are you mixing the two?  If you're going to use Python, use Python.  If you're going to use jscript, well. . . Vaya con Dios.
[01:57:09] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[01:57:09] <BrenBarn> anddam: no, that's about typing, it's https://docs.python.org/3/reference/datamodel.html#emulating-container-types
[01:57:42] *** Joins: jmcb (~jmcb@nas47-67.york.ac.uk)
[01:57:44] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[01:58:01] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[01:58:04] *** Joins: cdown_ (~cdown@188.214.11.14)
[01:58:26] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[01:59:37] <SnoopJ> const, it's not exactly documentation, but the problem is a lack of '#' in mpd_parse_fmt_str() here: https://github.com/python/cpython/blob/main/Modules/_decimal/libmpdec/io.c#L789
[01:59:46] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[01:59:48] <anddam> oh right, my bad
[02:00:03] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[02:00:23] *** Joins: extropiator (~admin@user/extropiator)
[02:00:27] *** Joins: oh-bee (~walt@2601:346:8100:5ec0:dab1:816f:a6d6:9b31)
[02:00:46] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 245 seconds)
[02:00:46] *** Quits: cdown (~cdown@163.114.131.1) (Ping timeout: 245 seconds)
[02:00:50] *** cdown_ is now known as cdown
[02:01:22] *** Joins: jamea22 (~jamea@189.237.20.19)
[02:01:41] *** Joins: pycurious (~Adium@user/pycurious)
[02:01:48] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 240 seconds)
[02:01:56] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[02:02:04] *** Joins: EgonX (~EgonX@2601:2c6:47f:879e:300e:d65f:1cca:5ccf)
[02:02:10] *** Quits: jamea (~jamea@189.237.20.19) (Ping timeout: 272 seconds)
[02:02:13] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[02:03:03] <anddam> Wooble: btw I see what I said is wrong, it's not apropos the allowed python versions of pyside-setup
[02:03:19] *** Quits: oh-bee (~walt@2601:346:8100:5ec0:dab1:816f:a6d6:9b31) (Client Quit)
[02:03:35] *** Joins: oh-bee (~walt@2601:346:8100:5ec0:dab1:816f:a6d6:9b31)
[02:03:37] *** Quits: EgonX (~EgonX@2601:2c6:47f:879e:300e:d65f:1cca:5ccf) (Client Quit)
[02:04:02] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[02:04:21] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[02:04:40] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[02:05:10] <const> SnoopJ: thanks
[02:05:33] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[02:06:14] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[02:06:32] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[02:07:46] *** Quits: extropiator (~admin@user/extropiator) (Quit: leaving)
[02:07:48] *** Quits: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr) (Ping timeout: 240 seconds)
[02:07:55] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[02:08:28] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[02:08:30] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[02:08:46] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[02:10:15] *** Joins: esv (~esv@74.124.178.154)
[02:10:32] *** Joins: Lindrian (~Lindrian@about/regex/lindrian)
[02:10:38] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[02:10:39] <SnoopJ> const, I *think* that the format there is at the end of the day pulling from ISO 9899 or thereabouts, by way of IEEE 754
[02:10:56] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[02:11:00] <SnoopJ> or if it's more than that, I can't find information about it, libmpdec points at IEEE 754 points at ISO 9899
[02:11:28] <SnoopJ> err, correction: libmpdec points to the decimal spec points to...
[02:11:50] <esv> hey folks, I deployed a virtual environment and installed some modules, when I run "pip list" it shows way less modules than the one before loading the virual environment, would anyone explain ?
[02:11:51] *** Joins: pyever___ (~pyeveryth@64-18-153-56.starry-inc.net)
[02:12:08] <SnoopJ> const, I still think it's a bug though, encourage you to report it ;)
[02:12:29] <esv> I ran "pip --version" and they seem to be at the same level
[02:12:37] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[02:12:40] <const> SnoopJ: Yes, I'll be doing that - thanks for the info on it.
[02:12:46] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Client Quit)
[02:12:55] *** Joins: foobaz21248 (~foobaz212@152.37.103.80)
[02:13:00] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[02:13:20] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[02:13:21] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:196e:3873:bcc9:b76f)
[02:14:26] *** Quits: pyeveryt_ (~pyeveryth@c-73-38-4-158.hsd1.nh.comcast.net) (Ping timeout: 250 seconds)
[02:15:01] *** Quits: dthpulse (~quassel@podciarou.sk) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:15:02] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[02:15:20] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[02:15:29] *** Joins: roxfan (~roxfan@2a02:a03f:a2be:4f00:812d:c5ec:e86f:78e9)
[02:15:32] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:16:12] *** Joins: dthpulse (~quassel@podciarou.sk)
[02:17:12] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[02:17:13] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[02:17:20] *** Quits: cedric (~cedric@2a01:cb11:821:7c00:2cf3:3ae:83f4:867c) (Quit: Konversation terminated!)
[02:17:28] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[02:18:27] *** Joins: wyclif (~wyclif@user/wyclif)
[02:18:51] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[02:19:24] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[02:19:35] *** Quits: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net) (Quit: The Lounge - https://thelounge.chat)
[02:19:42] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[02:20:56] *** Stench is now known as Staunch
[02:21:01] *** Joins: Viewday116 (~Viewday@user/viewday)
[02:21:34] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[02:21:51] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[02:22:20] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[02:22:20] *** Viewday116 is now known as Viewday11
[02:22:50] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[02:22:56] *** Joins: jamea (~jamea@189.237.20.19)
[02:23:08] *** Joins: xkuru (~xkuru@user/xkuru)
[02:23:37] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[02:23:55] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[02:23:58] *** Quits: t3nj1n_ (~t3nj1n@pool-173-52-219-149.nycmny.fios.verizon.net) (Quit: Leaving)
[02:24:20] *** Quits: jamea22 (~jamea@189.237.20.19) (Ping timeout: 272 seconds)
[02:24:52] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:25:54] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[02:26:12] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[02:26:34] *** Quits: qlixed (~qlixed@152.170.45.16) (Remote host closed the connection)
[02:27:56] *** Joins: qlixed (~qlixed@152.170.45.16)
[02:28:05] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[02:28:22] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[02:30:29] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[02:30:47] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[02:32:32] *** Joins: Veil (~Veil@user/Veil)
[02:32:56] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[02:33:04] <blei> am using multiprocessing on 192 core system, but can't create more than 135 processes, any ideas as to why
[02:33:13] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[02:34:15] <BtbN> define "can't"
[02:35:17] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[02:35:30] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[02:35:34] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[02:35:35] *** Joins: c4017w_ (~c4017@209.52.68.8)
[02:37:41] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[02:37:56] <blei> jupyter kernel dies
[02:37:58] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[02:38:42] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 250 seconds)
[02:39:32] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[02:39:57] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[02:40:16] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[02:40:39] *** Joins: icy_hot (~icy_hot@222.98.218.99)
[02:41:43] *** Joins: arinov (~arinov@213.194.126.155)
[02:42:11] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[02:42:29] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[02:42:38] *** Quits: foobaz21248 (~foobaz212@152.37.103.80) (Quit: Client closed)
[02:42:51] *** Joins: foobaz21248 (~foobaz212@152.37.103.80)
[02:44:23] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[02:44:40] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[02:45:00] *** Joins: Hanii (~textual@2a00:23c5:c583:a300:b8d0:b532:be93:859e)
[02:45:00] *** Quits: arinov_ (~arinov@176.89.17.40) (Ping timeout: 240 seconds)
[02:46:10] <blei> error seems jupyter specific, works from the console
[02:46:24] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[02:46:28] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:196e:3873:bcc9:b76f) (Quit: Client closed)
[02:46:36] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[02:46:53] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[02:47:01] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[02:47:03] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[02:48:08] *** Joins: ripdog (~quassel@user/ripdog)
[02:48:57] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[02:49:14] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[02:49:37] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[02:50:11] *** Quits: blei (~blei@user/blei) (Quit: Client closed)
[02:50:25] *** Quits: _ev (~ev@user/ev/x-8999918) (Quit: Leaving.)
[02:50:57] *** Quits: singularity00 (~singulari@236.lan-hi1-2.static.rozabg.com) (Ping timeout: 272 seconds)
[02:51:06] *** Quits: data68 (~data@2a02:908:a65:3d80:758c:9049:dcf1:191b) (Quit: WeeChat 1.4)
[02:51:15] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[02:51:16] *** Quits: jamea (~jamea@189.237.20.19) (Ping timeout: 250 seconds)
[02:51:35] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[02:51:42] *** Quits: skontomobil (~skontomob@94.31.101.228) (Quit: Leaving)
[02:51:57] *** Joins: hiroshi_ (~freedom@151.35.151.47)
[02:53:01] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Quit: Leaving)
[02:53:30] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[02:53:49] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[02:55:02] *** Joins: blei (~blei@user/blei)
[02:55:50] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[02:56:08] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[02:56:11] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 245 seconds)
[02:56:38] *** Quits: mxp (~mxp@185.16.205.131) (Ping timeout: 272 seconds)
[02:56:58] *** Quits: BillyZane (~BillyZane@185.202.221.61) (Remote host closed the connection)
[02:57:18] *** Joins: BillyZane (~BillyZane@185.202.221.61)
[02:57:20] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 250 seconds)
[02:57:43] *** Quits: oh-bee (~walt@2601:346:8100:5ec0:dab1:816f:a6d6:9b31) (Quit: Konversation terminated!)
[02:57:44] *** Joins: semeion (~semeion@user/semeion)
[02:57:54] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[02:58:10] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[02:58:33] *** Quits: upsala (~zcb@185.209.196.139) (Quit: WeeChat 3.4)
[02:59:53] *** Joins: mxp (~mxp@185.16.205.131)
[03:00:05] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[03:00:12] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[03:00:24] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[03:02:09] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[03:02:27] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[03:03:17] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[03:04:08] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Remote host closed the connection)
[03:04:27] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[03:04:37] *** Quits: dreamon (~dreamon@pd9503c4b.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[03:05:08] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:06:13] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:06:18] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[03:06:35] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[03:06:55] *** Joins: kaos02 (~kaos02@12.186.233.220.static.exetel.com.au)
[03:07:25] *** Quits: samuelbernardo (~samuelber@nata01.lip.pt) (Ping timeout: 256 seconds)
[03:08:17] *** Joins: samuelbernardo (~samuelber@nata02.lip.pt)
[03:08:28] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[03:08:45] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[03:09:55] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[03:10:05] *** Joins: Barones (~Barones@user/Barones)
[03:10:43] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[03:10:59] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[03:11:10] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[03:11:55] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 268 seconds)
[03:12:23] *** Quits: hiroshi_ (~freedom@151.35.151.47) (Quit: hiroshi_)
[03:12:49] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[03:13:05] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[03:13:26] *** Quits: zodd (~zodd@84-106-80-107.cable.dynamic.v4.ziggo.nl) (Remote host closed the connection)
[03:14:12] *** AmyMalik is now known as Ellenor
[03:14:51] *** Joins: beli6147 (~Thunderbi@cpe-76-175-52-6.socal.res.rr.com)
[03:14:55] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[03:15:12] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[03:17:00] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[03:17:20] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[03:17:24] *** Quits: icy_hot (~icy_hot@222.98.218.99) (Quit: WeeChat 3.4)
[03:17:29] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[03:18:37] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:196e:3873:bcc9:b76f)
[03:19:07] <stewie925> hello guys - I have a question on assigining thread names  - https://bpa.st/MUPA
[03:19:08] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Leaving)
[03:19:08] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[03:19:24] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[03:21:05] *** Quits: favreje (~jeff@170.249.173.67) (Quit: WeeChat 3.4)
[03:21:20] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[03:21:36] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[03:23:22] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[03:23:38] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[03:25:30] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[03:25:36] *** Joins: bomb-on (~bomb-on@user/bomb-on)
[03:25:46] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[03:25:49] *** Joins: herjazz (~herjazz@p10513117-ipngn24101marunouchi.tokyo.ocn.ne.jp)
[03:26:15] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[03:27:00] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 240 seconds)
[03:27:40] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[03:27:58] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[03:29:47] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[03:29:48] *** Quits: qlixed (~qlixed@152.170.45.16) (Ping timeout: 268 seconds)
[03:29:48] *** Quits: Barones (~Barones@user/Barones) (Ping timeout: 240 seconds)
[03:30:03] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[03:30:23] *** Joins: orbisvicis (~orbisvici@user/orbisvicis)
[03:31:11] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 245 seconds)
[03:32:05] *** Quits: jambulance (~jam@2001:19f0:5801:9ee:5400:2ff:fec7:76b9) (Quit: WeeChat 3.4)
[03:32:19] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[03:32:36] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[03:33:08] *** Quits: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net) (Quit: Client closed)
[03:33:34] *** Joins: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net)
[03:34:36] *** Quits: orbisvicis (~orbisvici@user/orbisvicis) (Ping timeout: 250 seconds)
[03:34:40] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[03:34:57] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[03:36:18] *** Joins: c4017w__ (~c4017@209.52.68.8)
[03:36:19] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Quit: shibboleth)
[03:36:56] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Remote host closed the connection)
[03:37:12] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[03:37:22] *** Quits: sobkas (~sobkas@95.175.17.217) (Quit: sobkas)
[03:37:38] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 250 seconds)
[03:39:04] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Remote host closed the connection)
[03:39:19] *** Joins: Wulf (~Wulf@user/wulf)
[03:39:22] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[03:39:36] *** Joins: Barones (~Barones@user/Barones)
[03:39:48] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[03:39:50] *** Joins: data68 (~data@2a02:908:a65:3d80:354b:9abc:bedd:1a61)
[03:41:20] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Remote host closed the connection)
[03:41:38] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[03:43:29] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[03:43:33] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[03:43:51] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[03:44:17] *** Joins: extropiator (~admin@user/extropiator)
[03:45:00] *** Quits: p-i-_ (~Ohmu@183.89.25.222) (Remote host closed the connection)
[03:45:45] *** Joins: p-i- (~Ohmu@183.89.25.222)
[03:45:48] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[03:46:05] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[03:47:08] *** Quits: merrinx (~merrinx@ti0028a400-3686.bb.online.no) (Quit: WeeChat 3.3)
[03:47:24] *** Joins: parv (~quass@user/parv)
[03:47:53] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Remote host closed the connection)
[03:48:10] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[03:49:58] *** Joins: eduardo (~eduardo@191.4.126.5)
[03:50:06] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[03:50:21] *** Quits: adiKt (uid472628@id-472628.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[03:50:23] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[03:51:04] *** Quits: const (~const@user/const) (Ping timeout: 250 seconds)
[03:51:14] *** Quits: kmh (~kmh@2a00:6020:5004:6800:75b3:49e:f05a:4982) (Read error: Connection reset by peer)
[03:51:31] *** Joins: kmh (~kmh@2a00:6020:5004:6800:75b3:49e:f05a:4982)
[03:51:48] *** Quits: sn_fk_n (~snufkin@2.221.192.124) (Ping timeout: 240 seconds)
[03:52:12] *** Joins: ssbr (~ssbr@python/site-packages/ssbr)
[03:52:21] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[03:52:39] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[03:53:11] *** Quits: darksun (~darksun@user/darksun) (Remote host closed the connection)
[03:54:36] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[03:54:53] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[03:54:54] *** Quits: brentaarnold (~brentaarn@24.112.92.157) (Ping timeout: 272 seconds)
[03:54:55] *** Joins: audio (~audio@user/audio)
[03:56:29] *** Quits: qpdb (~qpdb@user/qpdb) (Quit: WeeChat 3.3)
[03:56:29] *** Quits: ssbr (~ssbr@python/site-packages/ssbr) (Read error: Connection reset by peer)
[03:56:49] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[03:57:08] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[03:57:12] *** Joins: nosolls (~nosollsma@user/nosolls)
[03:57:53] *** [_] is now known as [itchyjunk]
[03:58:04] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 272 seconds)
[03:58:11] *** Joins: ssbr (~ssbr@python/site-packages/ssbr)
[03:58:42] *** Joins: qlixed (~qlixed@181.44.129.13)
[03:58:46] *** Parts: phox (~phox@S0106a84e3f727bc3.pk.shawcable.net) ()
[03:59:00] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[03:59:19] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[03:59:35] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 240 seconds)
[03:59:54] *** Quits: pkapp_ (~pkapp@2601:58c:c500:6900:b5b8:8033:9f76:62da) (Remote host closed the connection)
[03:59:56] *** Quits: jpaa (~jpaa@161.97.129.36) (Ping timeout: 245 seconds)
[03:59:57] *** Quits: qlixed (~qlixed@181.44.129.13) (Client Quit)
[04:00:04] *** Joins: jpaa (~jpaa@161.97.129.36)
[04:00:10] *** Joins: pkapp (~pkapp@2601:58c:c500:6900:7d43:ad3b:40ec:4e62)
[04:00:11] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[04:01:25] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[04:01:43] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[04:02:03] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:196e:3873:bcc9:b76f) (Quit: Client closed)
[04:02:10] <deltab> stewie925: return a tuple
[04:02:15] <deltab> gah
[04:02:46] *** Quits: Masterphi (~Masterphi@user/masterphi) (Quit: Masterphi)
[04:02:49] *** Quits: nosolls (~nosollsma@user/nosolls) (Quit: Reconnecting)
[04:03:05] *** Joins: nosolls (~nosollsma@user/nosolls)
[04:03:39] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[04:03:45] *** Quits: extropiator (~admin@user/extropiator) (Quit: leaving)
[04:03:58] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[04:05:02] *** Quits: grimvar (~grimvar@i5C75F7AC.versanet.de) (Ping timeout: 272 seconds)
[04:05:52] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Remote host closed the connection)
[04:06:06] *** Joins: grimvar (~grimvar@i5C75F581.versanet.de)
[04:06:09] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[04:07:38] *** Quits: ssbr (~ssbr@python/site-packages/ssbr) (Read error: Connection reset by peer)
[04:07:44] *** Quits: Batzy (~quassel@user/batzy) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[04:08:00] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[04:08:16] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[04:08:50] *** Joins: Batzy (~quassel@user/batzy)
[04:10:13] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[04:10:30] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[04:10:34] *** Joins: brentaarnold (~brentaarn@24.112.92.157)
[04:10:57] *** Quits: gurkenglas (~gurkengla@dslb-188-096-121-068.188.096.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[04:11:14] *** Quits: moog (~moog@107.126.53.115) (Remote host closed the connection)
[04:12:05] *** Joins: kaiseisei (~Thunderbi@user/kaiseisei)
[04:12:25] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[04:12:42] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[04:13:48] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 240 seconds)
[04:14:37] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[04:14:38] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:196e:3873:bcc9:b76f)
[04:14:56] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[04:15:17] <stewie925> hello all, would like to hear your input on https://bpa.st/MUPA
[04:15:30] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[04:15:55] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[04:16:27] *** Quits: vbgunz (~vbgunz@35.141.71.47) (Remote host closed the connection)
[04:16:44] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[04:17:01] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[04:17:30] *** Joins: vbgunz (~vbgunz@35.141.71.47)
[04:17:36] *** Joins: ravan (~ravan@42.201.198.151)
[04:17:36] *** Quits: ravan (~ravan@42.201.198.151) (Changing host)
[04:17:36] *** Joins: ravan (~ravan@user/ravan)
[04:17:52] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[04:18:01] *** Quits: roxfan (~roxfan@2a02:a03f:a2be:4f00:812d:c5ec:e86f:78e9) (Ping timeout: 256 seconds)
[04:19:00] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[04:19:18] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[04:19:19] *** Joins: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr)
[04:19:50] *** Quits: foobaz21248 (~foobaz212@152.37.103.80) (Quit: Client closed)
[04:20:04] *** Joins: foobaz21248 (~foobaz212@152.37.103.80)
[04:21:14] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[04:21:31] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[04:23:33] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[04:23:50] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[04:25:26] *** Quits: revolve (~u0_a227@cpc100838-bagu15-2-0-cust672.1-3.cable.virginm.net) (Ping timeout: 260 seconds)
[04:25:57] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[04:26:13] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[04:26:31] *** Quits: MJ (~mjpieters@zopatista.plus.com) (Ping timeout: 256 seconds)
[04:26:59] *** Joins: Roey (~Roey@user/Roey)
[04:27:26] *** Quits: Barones (~Barones@user/Barones) (Remote host closed the connection)
[04:27:48] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Ping timeout: 240 seconds)
[04:28:09] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Remote host closed the connection)
[04:28:12] *** Quits: kaiseisei (~Thunderbi@user/kaiseisei) (Remote host closed the connection)
[04:28:27] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[04:28:39] *** Joins: sn_fk_n (~snufkin@94.15.173.91)
[04:29:00] *** Joins: MJ (~mjpieters@zopatista.plus.com)
[04:29:10] *** Joins: kaiseisei (~Thunderbi@user/kaiseisei)
[04:30:20] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[04:30:37] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[04:31:12] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[04:32:33] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[04:32:50] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[04:32:57] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.4)
[04:33:34] *** Joins: Masterphi (~Masterphi@user/masterphi)
[04:33:34] *** Quits: Masterphi (~Masterphi@user/masterphi) (Client Quit)
[04:34:17] *** Quits: rinzewind (~rinzewind@user/rinzewind) (Quit: leaving)
[04:34:44] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[04:34:51] *** Quits: five643333496 (~five6@8.40.26.65) (Quit: The Lounge - https://thelounge.chat)
[04:35:02] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[04:36:07] <deltab> stewie925: hi!
[04:36:23] <deltab> you can return a tuple or other structure
[04:36:37] *** Quits: iob (~iob@dynamic-2a00-1028-8390-9e8a-5cf8-25c0-aa4e-e57d.ipv6.o2.cz) (Ping timeout: 240 seconds)
[04:36:45] *** Joins: c4017w_ (~c4017@209.52.68.8)
[04:36:55] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[04:37:11] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[04:37:33] <deltab> there's an answer from someone else on your SO question
[04:38:05] *** Quits: flokuehn (~flokuehn@87.123.247.54) (Ping timeout: 256 seconds)
[04:39:09] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[04:39:26] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[04:39:48] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[04:39:53] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[04:39:55] *** Joins: flokuehn (~flokuehn@87.123.247.86)
[04:40:15] *** Joins: iob (~iob@dynamic-2a00-1028-8390-9e8a-5cf8-25c0-aa4e-e57d.ipv6.o2.cz)
[04:40:27] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Remote host closed the connection)
[04:41:22] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[04:41:39] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[04:42:19] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[04:43:43] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[04:43:59] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[04:44:53] *** Quits: wac (~wac@user/wac) (Quit: Zzzz…)
[04:45:52] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Remote host closed the connection)
[04:46:10] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[04:47:26] *** Quits: iob (~iob@dynamic-2a00-1028-8390-9e8a-5cf8-25c0-aa4e-e57d.ipv6.o2.cz) (Ping timeout: 245 seconds)
[04:48:04] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[04:48:21] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[04:48:45] *** Quits: cognoscente (~cognoscen@216.194.99.109) (Quit: Textual IRC Client: www.textualapp.com)
[04:49:04] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[04:49:37] <stewie925> oh, how did you know about my SO post? hehe
[04:49:40] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[04:49:41] <stewie925> thanks, checking it now
[04:49:44] *** Joins: iob (~iob@dynamic-2a00-1028-8390-9e8a-5cf8-25c0-aa4e-e57d.ipv6.o2.cz)
[04:49:55] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::ef3c) (Quit: Konversation terminated!)
[04:50:22] <stewie925> oh yeah, duh..
[04:50:24] *** Quits: Cera (~Cera@user/Cera) (Quit: Client closed)
[04:50:28] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[04:50:29] *** Quits: foobaz21248 (~foobaz212@152.37.103.80) (Quit: Client closed)
[04:50:38] *** Quits: hub (~hub@user/hub) (Quit: -)
[04:50:45] *** Joins: foobaz21248 (~foobaz212@152.37.103.80)
[04:50:47] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[04:51:11] *** Joins: hub (~hub@user/hub)
[04:51:28] *** Quits: Auron (Auron956@user/auron) ()
[04:51:36] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 245 seconds)
[04:52:19] *** Joins: Cera (~Cera@user/Cera)
[04:52:49] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Remote host closed the connection)
[04:52:50] *** Quits: eduardo (~eduardo@191.4.126.5) (Remote host closed the connection)
[04:53:06] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[04:53:33] *** Joins: revolve (~u0_a227@cpc100838-bagu15-2-0-cust672.1-3.cable.virginm.net)
[04:55:05] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[04:55:08] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[04:55:24] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[04:55:39] *** Quits: foobaz21248 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[04:57:24] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[04:57:40] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[04:58:49] *** Quits: data68 (~data@2a02:908:a65:3d80:354b:9abc:bedd:1a61) (Quit: WeeChat 1.4)
[04:59:30] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[04:59:46] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[05:00:04] <deltab> stewie925: you're not the first person to leave while I was typing an answer and post their question on SO :-)
[05:01:46] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[05:02:03] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[05:02:53] <stewie925> lol
[05:03:23] <stewie925> I just need practice to present my question on stackoverflow too, so thats a good practice
[05:03:27] *** Quits: drbeco (~beco@user/beco) (Quit: Leaving)
[05:03:30] *** Joins: five643333496 (~five6@8.40.26.79)
[05:03:32] *** Quits: Guest3952 (~vit@chello085216193138.chello.sk) (Ping timeout: 268 seconds)
[05:03:45] *** Quits: rje (~textual@65.141.156.170) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:03:54] <stewie925> deltab: so you replied to my SO question? small world
[05:03:55] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[05:04:13] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[05:04:26] <stewie925> oh never mind , ignore my last question
[05:05:10] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 250 seconds)
[05:06:15] *** Joins: six666 (~six666@117.175.116.227)
[05:06:16] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[05:06:33] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[05:08:17] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[05:08:37] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[05:10:27] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[05:10:33] <audio> my script currently downloads ~30 youtube videos per hour. I want to get this to ~300-500. how can i do this? script: https://bpa.st/A3FA
[05:10:46] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[05:11:16] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[05:12:34] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[05:12:37] *** Quits: jmcb (~jmcb@nas47-67.york.ac.uk) (Ping timeout: 240 seconds)
[05:12:48] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[05:12:50] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[05:13:38] <stewie925> your code listing shows mp3 downloads
[05:14:53] <stewie925> maybe multithreading? since downloading is an I/O task
[05:14:55] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[05:15:12] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[05:15:20] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 272 seconds)
[05:15:55] *** Joins: pycurious (~Adium@user/pycurious)
[05:17:01] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[05:17:18] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[05:17:28] <pycurious> Any ideas on how to debug this multiprocessing.Process.terminate/join problem: https://dpaste.org/CCbM - happens when I do a terminate/join - but it does not give me a clue on where in the code this is happening. Perhaps using multiprocessing.Process child executing ProcessPoolExecutor and waiting on future objects is not a good idea for some reason?
[05:18:07] <grym> audio: depends; how much of your available bandwidth are you consuming now?
[05:18:10] <cliluw> Say i is the loop counter of "for i in range(5)" loop. Is it idiomatic Python to check "if i > 0" to detect if I'm not on the first iteration or is it more idiomatic to do "if i:"?
[05:18:23] <audio> grym, idk :<
[05:18:31] <audio> how would i figure that out
[05:19:08] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[05:19:26] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[05:19:33] <grym> audio: some form of network monitor
[05:19:41] *** Quits: zuQe85 (~zuQe8@cpc105060-sgyl40-2-0-cust136.18-2.cable.virginm.net) (Quit: Ping timeout (120 seconds))
[05:19:56] *** Joins: zuQe85 (~zuQe8@cpc105060-sgyl40-2-0-cust136.18-2.cable.virginm.net)
[05:20:55] *** Joins: squarecircle (~root@merkur.platinengarten.hg.tu-darmstadt.de)
[05:21:12] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[05:21:29] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[05:22:26] <deltab> cliluw: I'd use  i > 0  in this situation, as other numbers could make sense there too
[05:23:17] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Remote host closed the connection)
[05:23:34] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[05:24:32] *** Quits: radiojosh (~Joshua@70-131-32-80.lightspeed.stlsmo.sbcglobal.net) (Ping timeout: 240 seconds)
[05:25:20] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[05:25:39] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[05:26:32] *** Quits: m_tadeu (~quassel@bl7-240-233.dsl.telepac.pt) (Ping timeout: 240 seconds)
[05:27:25] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[05:27:41] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[05:28:06] <deltab> pycurious: difficult to tell without the source code
[05:29:00] *** Joins: thiras (~thiras@user/thiras)
[05:29:35] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Remote host closed the connection)
[05:29:53] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[05:30:03] *** Joins: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net)
[05:30:32] *** Quits: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr) (Ping timeout: 272 seconds)
[05:31:21] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[05:32:03] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[05:32:21] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[05:33:09] <pycurious> deltab: That is a python source code exception - it would be helpful if i even understood what does it mean in the python source code. It's thrown from multiprocessing.connection.py
[05:34:20] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[05:34:37] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[05:36:31] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[05:36:48] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[05:37:05] *** Joins: c4017w__ (~c4017@209.52.68.8)
[05:38:20] *** Joins: vicfred (~vicfred@user/vicfred)
[05:38:40] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[05:38:57] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[05:39:11] *** Joins: djapo (~archangel@user/djapo)
[05:39:51] <deltab> I think it's using multiple processes with pipes between them to communicate -- but when it tried to send through a pipe, it found the pipe was closed
[05:40:40] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[05:40:48] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[05:40:52] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[05:41:05] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[05:41:08] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[05:42:59] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[05:43:16] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[05:45:00] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Remote host closed the connection)
[05:45:18] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[05:45:37] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 240 seconds)
[05:47:05] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[05:47:23] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[05:47:56] <deltab> pycurious: could be https://github.com/getsentry/sentry-python/issues/423 ?
[05:48:13] <deltab> check whether you have anything calling exit()
[05:48:28] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[05:49:09] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[05:49:25] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[05:51:24] *** Quits: parv (~quass@user/parv) (Ping timeout: 240 seconds)
[05:51:32] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[05:51:50] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[05:53:52] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[05:54:10] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[05:55:14] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 272 seconds)
[05:56:06] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Remote host closed the connection)
[05:56:16] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:56:23] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[05:56:54] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:84ab:e3a9:1ea3:da7a) (Ping timeout: 260 seconds)
[05:57:48] *** Quits: peteyboy_ (~peteyboy1@95.169.226.66) (Ping timeout: 268 seconds)
[05:58:10] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[05:58:17] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[05:58:19] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[05:58:35] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[05:58:44] *** Praise- is now known as Praise
[05:59:35] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:84ab:e3a9:1ea3:da7a)
[06:00:10] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[06:00:29] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Remote host closed the connection)
[06:00:43] *** Joins: CodePoint (~CodePoint@2600:1700:3070:3790:d907:53e4:549e:c64e)
[06:00:48] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[06:00:51] *** Quits: CodePoint (~CodePoint@2600:1700:3070:3790:d907:53e4:549e:c64e) (Remote host closed the connection)
[06:01:38] *** Joins: ejjfunky (~ejjfunky@125.164.20.168)
[06:02:14] *** Joins: bluedust (~bluedust@103.165.167.61)
[06:02:37] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[06:02:54] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[06:03:36] <mike18> hi why is that type dict[str, Any] ? https://ideone.com/o718S9
[06:04:47] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[06:04:55] *** Joins: foobaz21248 (~foobaz212@152.37.103.80)
[06:05:03] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[06:06:04] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[06:06:38] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[06:07:13] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[06:07:22] *** Joins: summersault (~summersau@179.221.251.36)
[06:07:29] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[06:07:47] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:196e:3873:bcc9:b76f) (Quit: Client closed)
[06:08:05] <nedbat> mike18: that would be a reasonable type for `settings`, since it maps strings to a variety of types
[06:08:27] *** Quits: summersault (~summersau@179.221.251.36) (Remote host closed the connection)
[06:09:24] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[06:09:27] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[06:09:41] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[06:09:41] <mike18> ok
[06:10:27] *** Quits: foobaz21248 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[06:10:38] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Quit: leaving)
[06:11:27] *** Quits: nomic (~nomic@85.203.36.100) (Quit: Leaving)
[06:11:34] *** Joins: hackers (~self@user/hackers)
[06:11:37] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[06:11:39] *** hackers is now known as remote
[06:11:46] *** Quits: justAstache (~justache@user/justache) (Read error: Connection reset by peer)
[06:11:46] <mike18> nedbat: if i know the type - i can convert the variable to int it float?
[06:11:55] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[06:12:05] <nedbat> mike18: "to int it float"?
[06:12:09] *** Quits: pavelow_ (~pavelow@opticalchimp.com) (Quit: No Ping reply in 180 seconds.)
[06:12:10] <mike18> e.g. days_remaining = (end_date - today).days + 1. .... days_remaining shows any
[06:12:11] *** Quits: tj123 (~tjh123@cpe-75-185-104-199.cinci.res.rr.com) (Remote host closed the connection)
[06:12:26] <mike18> so i would do days_remaining = int((end_date - today).days + 1) ?
[06:12:34] *** Joins: tj123 (~tjh123@cpe-75-185-104-199.cinci.res.rr.com)
[06:12:45] *** Joins: pavelow (~pavelow@opticalchimp.com)
[06:12:54] <nedbat> mike18: what type is it without the int() ?  it might already be an int.
[06:13:01] *** Joins: eeesy (~eeesy@38.88.151.122)
[06:13:01] <mike18> it shows any
[06:13:06] *** Joins: justAstache (~justache@user/justache)
[06:13:08] <mike18> in the editor
[06:13:19] <nedbat> mike18: you can do:  days_remaining: int = (end_date ....
[06:13:24] <mike18> oh
[06:13:33] <nedbat> mike18: though it seems odd to me that it can't figure that out on its own
[06:13:34] <mike18> and int(....) ... is that wrong?
[06:13:45] <nedbat> mike18: it's not wrong, just unnecessary. it's already an int
[06:13:54] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[06:13:58] <mike18> casting costs time?
[06:14:13] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[06:15:52] <nedbat> mike18: a microscopic amount, but that's not the issue. it's just redunant.
[06:15:58] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[06:16:03] *** Joins: roxfan (~roxfan@2a02:a03f:a2be:4f00:812d:c5ec:e86f:78e9)
[06:16:08] <nedbat> mike18: it's like writing:  days_remaining = (end_date - today).days + 1 + 0 + 0
[06:16:15] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[06:16:49] *** Quits: Gustavo6046_ (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[06:17:10] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[06:17:57] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[06:18:06] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[06:18:12] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[06:18:15] *** Quits: bomb-on (~bomb-on@user/bomb-on) (Quit: aллилѹіа!)
[06:18:24] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[06:18:33] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[06:18:45] <audio> my script currently downloads ~30 youtube videos per hour. I want to get this to ~300-500. how can i do this? script: https://bpa.st/A3FA
[06:19:28] <mike18> nedbat: also for: return today.strftime("%Y-%m-%d") ... for some reason it thinks its Any .... weired
[06:19:41] <mike18> can i tell it that its a str?
[06:20:04] <nedbat> mike18: you can add an annotation to the function:   def foo() -> str
[06:20:13] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[06:20:13] <mike18> i did that already
[06:20:19] <mike18> but the typecheck fails
[06:20:27] <mike18> bc it seems to return any
[06:20:29] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[06:20:40] <mike18> def foo() -> str: ....
[06:20:52] *** Joins: sentriz_ (~sentriz@109.255.139.98)
[06:20:52] <deltab> what is today.strftime?
[06:20:53] <nedbat> mike18: i don't know what your code looks like, or what editor you are using.  It should understand that strftime makes a string.
[06:21:02] <mike18> strftime says its any...
[06:21:22] <deltab> what type is today?
[06:21:22] <mike18> nedbat: simple func: https://ideone.com/7YbySB
[06:21:30] <mike18> any
[06:21:47] *** Quits: sentriz (~sentriz@109.255.139.98) (Ping timeout: 256 seconds)
[06:21:47] *** sentriz_ is now known as sentriz
[06:22:10] <deltab> that's not executable
[06:22:21] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[06:22:26] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 245 seconds)
[06:22:38] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[06:22:42] *** Joins: Viewday11 (~Viewday@user/viewday)
[06:22:42] <mike18> https://ideone.com/7YbySB
[06:22:43] <deltab> mike18: what type does self.local_time return?
[06:22:51] <mike18> i added it in the paste
[06:23:04] *** Joins: khole (~khole@217.146.83.196)
[06:23:09] <nedbat> mike18: when people ask what type something is, they often mean, what type is it actually, at runtime?  Not, what type does the editor think it will be.
[06:23:40] *** Joins: CodePoint_ (~CodePoint@2600:1700:3070:3790:d907:53e4:549e:c64e)
[06:23:42] <nedbat> mike18: you should put a type annotation on def local_time
[06:23:47] <deltab> okay, annotate local_time with its return type
[06:23:48] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 240 seconds)
[06:23:54] *** Quits: CodePoint_ (~CodePoint@2600:1700:3070:3790:d907:53e4:549e:c64e) (Remote host closed the connection)
[06:23:58] <nedbat> I thought inference would be more widespread, but i don't see it generally :(
[06:24:06] <mike18> wait im wrong that in_timezone doesnt return something?
[06:24:25] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[06:24:42] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[06:24:44] <mike18> what type is self.now.in_timezone(tz_str) ? where self.now is pendulum now
[06:25:05] <deltab> it likely returns something, but of what type?
[06:25:16] <deltab> check the documentation
[06:25:45] <mike18> https://pendulum.eustace.io/docs/ not much docs here
[06:25:51] *** Quits: grep_xtrange (~x@ac255238.ppp.asahi-net.or.jp) (Quit: Quitting)
[06:26:13] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[06:26:32] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[06:26:49] *** Joins: leshaste (~lesshaste@82-69-126-43.dsl.in-addr.zen.co.uk)
[06:26:49] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[06:26:54] <mike18> https://github.com/sdispater/pendulum doesnt even have type annotations ...
[06:27:04] *** Quits: lesshaste (~lesshaste@82-69-126-43.dsl.in-addr.zen.co.uk) (Remote host closed the connection)
[06:27:11] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[06:27:29] <mike18> oh wait: def now(cls, tz: Optional[Union[str, Timezone]] = None) -> "DateTime":
[06:27:39] <mike18> "DateTime" ... what is that? :)
[06:28:12] <mike18> show i use "DateTime" ?
[06:28:21] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[06:28:35] *** Joins: pycurious (~Adium@user/pycurious)
[06:28:47] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[06:29:03] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[06:30:17] <nedbat> mike18: are you sure you want to add type annotations throughout your code?
[06:30:30] <mike18> i mean its helpful no?
[06:30:32] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[06:30:56] <mike18> i guess i need to keep it as Any bc its a 3rd party lib?
[06:31:07] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[06:31:24] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[06:31:33] *** Joins: rje (~textual@50.35.241.164)
[06:32:04] <deltab> mike18: -> pendulum.DateTime
[06:32:27] *** Joins: moog (~moog@107.126.53.115)
[06:32:36] *** Quits: msk (~Thunderbi@89.205.124.59) (Quit: msk)
[06:32:45] <mike18> ok but how can i get the str in the second func than? https://ideone.com/7YbySB
[06:32:53] *** Joins: msk (~Thunderbi@89.205.124.39)
[06:33:24] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[06:33:41] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[06:35:27] <deltab> btw, please only use ideone to show code executing: it's a waste of resources running unrunnable code
[06:35:42] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[06:35:50] <deltab> mike18: hmm, I don't know
[06:35:59] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[06:35:59] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:36:30] *** Joins: semeion (~semeion@user/semeion)
[06:36:31] *** Quits: llh (~UPP@user/llh) (Ping timeout: 256 seconds)
[06:37:11] <deltab> DateTime is in quotes inside the module that defines it so that Python doesn't try to look up the name before it's defined
[06:37:19] <mike18> deltab: it will not execute bc the pendulum lib does not exist
[06:37:31] <mike18> deltab: keep using Any than?
[06:37:36] *** Joins: c4017w_ (~c4017@209.52.68.8)
[06:37:37] <deltab> elsewhere you'd use pendulum.DateTime or the like
[06:37:53] <mike18> bc when i use pendulum.Datetime i get: error: Name "pendulum.Datetime" is not defined
[06:38:02] <mike18> but i did import pendulum
[06:38:05] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[06:38:23] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[06:38:36] <deltab> I was guessing at that, but maybe it's pendulum.datetime or pendulum.datetime.DateTime
[06:38:44] *** Joins: llh (~UPP@user/llh)
[06:38:56] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 272 seconds)
[06:39:37] <pycurious> deltab: thanks for the help.
[06:39:53] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[06:39:53] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:39:53] *** finn_elija is now known as FinnElija
[06:40:21] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Remote host closed the connection)
[06:40:38] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[06:40:41] *** Quits: six666 (~six666@117.175.116.227) (Quit: Client closed)
[06:41:00] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[06:41:08] <deltab> pycurious: oh, there might be something indiscriminately closing files, which could hit the pipe
[06:41:36] *** Joins: djapo (~archangel@user/djapo)
[06:42:22] *** Joins: adeliktas8 (~adeliktas@i59F52FC5.versanet.de)
[06:42:27] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[06:42:45] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[06:43:12] <pycurious> deltab: This is what I'm trying to debug. It's a large project. The main process spawns mp.Process and calls another function , P(). Then P() calls another function C() that calls ProcessPoolExecutor. P() then calls future.result() on the returning value of C(). And then in P() after timeout, I terminate and join the process that ran C(). After timeout, when terminate/join are called on the process that ran C() - I see these exceptions.
[06:43:18] *** Joins: CodePoint (~CodePoint@2600:1700:3070:3790::11)
[06:43:48] *** Quits: adeliktas (~adeliktas@i59F4D9E7.versanet.de) (Ping timeout: 240 seconds)
[06:43:48] *** adeliktas8 is now known as adeliktas
[06:44:12] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[06:44:37] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Remote host closed the connection)
[06:44:54] *** Joins: frost (~frost@user/frost)
[06:44:55] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[06:45:46] <mike18> local_time: pendulum.DateTime = self.now.in_timezone(tz_str) return local_time
[06:45:48] <mike18> nedbat: looks like i need to do:
[06:45:49] <deltab> pycurious: from what I've read of the source code, it makes sense that it'd send a wakeup message then; but that doesn't provide any insight into why the pipe is closed
[06:45:52] *** Quits: frost (~frost@user/frost) (Read error: Connection reset by peer)
[06:45:59] <nedbat> mike18: why do you need to?
[06:46:12] <mike18> bc it thinks its any
[06:46:27] <mike18> i cant just return self.now.in_timezone(tz_str) .... it gives error
[06:46:37] <nedbat> mike18: this goes back to why you need to add the types.
[06:46:43] <pycurious> deltab: so at timeout, when I try to terminate() the process, wakeup is called on the process you mean?
[06:46:44] <nedbat> mike18: your editor can say any, that's fine.
[06:46:47] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[06:46:56] <mike18> nedbat: i run mypy typcheck
[06:46:59] <deltab> pycurious: yes
[06:47:04] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[06:47:05] <mike18> from command line - that gives error
[06:47:29] <mike18> so when i just do: return self.now.in_timezone(tz_str) ...mypy error
[06:48:10] <deltab> pycurious: you can see that in the traceback
[06:48:29] <pycurious> deltab: what pipe is the wakeup trying to write to in mp? It should be part of the .terminate() I guess?
[06:48:48] *** Quits: NealRame (~a@89.187.163.193) (Quit: Konversation terminated!)
[06:49:00] <deltab> pycurious: the one connecting the executor to the child process, I think
[06:49:06] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[06:49:09] *** Joins: Wang-GeBiLao (~Wang-GeBi@117.175.116.227)
[06:49:24] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[06:50:10] *** Joins: frost (~frost@user/frost)
[06:50:13] <deltab> pycurious: see the comment at the top of concurrent/futures/process.py
[06:51:22] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[06:51:40] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[06:52:03] *** Joins: lllh (~UPP@198.48.244.21)
[06:52:04] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 268 seconds)
[06:52:32] <pycurious> deltab: I put this process for a long timeout before I terminate it. By then the process should have done what it was supposed to do already. Not sure why its waking up and trying to write something to the output pipe..Thanks for the pointer in the comment - that looks helpful.
[06:52:59] <deltab> hmm that's maybe not as useful as I thought
[06:53:47] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[06:53:56] *** Quits: frost (~frost@user/frost) (Client Quit)
[06:53:58] <deltab> but you can see in ThreadWakeup that it has a pipe and sends through it to wake up the process
[06:54:04] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[06:54:54] <pycurious> is there a way to kill this process without waking it up?
[06:54:59] <nedbat> mike18: what error do you get? What is the question about how to fix it?
[06:55:02] *** Quits: llh (~UPP@user/llh) (Ping timeout: 240 seconds)
[06:55:09] <mike18> nedbat: fixed it
[06:55:16] <mike18> i need to set the type of self.now
[06:55:33] <mike18> nedbat: its kinda anying that type stuff
[06:55:38] <mike18> anoying
[06:55:41] *** Quits: CodePoint (~CodePoint@2600:1700:3070:3790::11) (Quit: CodePoint)
[06:55:44] *** Quits: khole (~khole@217.146.83.196) (Quit: Leaving)
[06:55:52] <nedbat> mike18: it's your choice to use it. you don't have to.
[06:55:59] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[06:56:09] <mike18> nedbat: but that i could run int type issues?
[06:56:10] *** Joins: frost (~frost@user/frost)
[06:56:13] *** Joins: khole (~khole@217.146.83.196)
[06:56:16] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[06:56:26] <nedbat> mike18: you could.
[06:56:54] <deltab> pycurious: maybe, but all I know about this is what I've found by searching for "wakeup"
[06:57:27] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[06:57:36] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[06:57:53] *** Quits: Wang-GeBiLao (~Wang-GeBi@117.175.116.227) (Quit: Client closed)
[06:57:57] <mike18> nedbat: also how can i tell that that return is a float here:  performance_df["goal"] / performance_df["total"]
[06:57:59] <deltab> pycurious: my guess is that something is closing the pipe without this code knowing about it
[06:58:03] <mike18> its a dataframe
[06:58:10] *** Joins: Wang-GeBiLao (~Wang-GeBi@117.175.116.227)
[06:58:22] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[06:58:24] <nedbat> mike18: why don't you know that it is a float?
[06:58:25] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[06:58:36] <mike18> i know but mypy not :)
[06:58:41] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[06:58:47] <nedbat> mike18: you put an annotation on the function:  def foo() -> float:
[06:58:53] <mike18> i did that already
[06:58:56] <pycurious> deltab: if that exception would print out even which module it was coming from - that would help. I am guessing my top level terminate() call is closing the pipe and trying to kill the child processes/zombies.
[06:59:06] <mike18> nedbat: mypy says: error: Returning Any from function declared to return "float"
[06:59:07] <nedbat> mike18: then mypy knows it's a float. pastebin the code and the error
[06:59:14] *** Quits: djapo (~archangel@user/djapo) (Remote host closed the connection)
[06:59:18] <nedbat> mike18: i don't know how to tell mypy that then.
[06:59:35] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[06:59:35] <mike18> that pandas dataframe is Any
[06:59:36] <nedbat> mike18: perhaps you need more annotations, or mypy needs to have the dataframe types declared
[06:59:53] <deltab> mike18: it doesn't know what type  performance_df["goal"]  and  performance_df["total"]  have
[07:00:19] <mike18> deltab: correct
[07:00:23] <deltab> so it can't work out that the result is a float
[07:00:25] <nedbat> mike18: i don't know how to tell mypy the types of the dataframe columns.
[07:00:30] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[07:00:47] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[07:00:52] *** Quits: agumonke` (~user@88.163.231.79) (Read error: Connection reset by peer)
[07:01:26] *** Joins: djapo (~archangel@user/djapo)
[07:02:14] *** kostkon__ is now known as kostkon_
[07:02:18] <pycurious> deltab: https://dpaste.org/gmSt - I think like 18-20 causes those exceptions I pasted. Line 11 - calls action that then uses ProcessPoolExecutors inside that function
[07:02:33] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[07:02:42] <deltab> mike18: there's a strictly_typed_pandas
[07:02:51] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[07:03:07] <mike18> deltab: that means?
[07:03:28] *** Joins: agumonke` (~user@88.163.231.79)
[07:03:52] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[07:04:18] <SnoopJ> You could annotate those as pandas.Series but I don't think you can be more specific than that.
[07:04:30] *** Joins: SteveR (~SteveR@4.53.131.109)
[07:04:46] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[07:04:46] <mike18> pandas.Series[float, int] ?
[07:04:52] <deltab> https://strictly-typed-pandas.readthedocs.io/en/latest/
[07:05:04] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[07:05:07] <SnoopJ> mike18, there is no such feature in pandas
[07:05:15] <SnoopJ> at least not that I'm aware of
[07:05:21] <mike18> sorry mean: pd.DataFrame[float, int, int]
[07:05:34] <SnoopJ> same thing
[07:06:09] <mike18> that still doesnt help :)
[07:06:28] <SnoopJ> right, because it's a TypeError, the features you're naming don't exist
[07:06:35] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[07:06:38] <SnoopJ> I would look at the link deltab shared if you want to use pandas with typing
[07:06:47] <mike18> an
[07:06:50] <mike18> ok
[07:06:56] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[07:07:04] <SnoopJ> or consider if you could do what you want by pulling the data out of the DataFrame as numpy arrays (which *can* be annotated)
[07:07:11] <mike18> DataSet instead of DataFrame?
[07:07:13] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[07:07:15] <mike18> interesting
[07:08:38] *** Quits: revolve (~u0_a227@cpc100838-bagu15-2-0-cust672.1-3.cable.virginm.net) (Read error: Connection reset by peer)
[07:08:49] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[07:09:06] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[07:09:10] *** Quits: noteness (~noteness@user/noteness) (Remote host closed the connection)
[07:09:23] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[07:09:29] *** Joins: noteness (~noteness@user/noteness)
[07:11:14] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 272 seconds)
[07:11:17] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[07:11:34] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[07:11:52] *** Joins: jamea (~jamea@177.239.81.39)
[07:13:21] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[07:13:38] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[07:15:29] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[07:15:45] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[07:17:39] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[07:17:42] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[07:17:58] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[07:18:10] *** Joins: white2 (~mahengrui@user/mahengrui1)
[07:18:21] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[07:18:58] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[07:19:46] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[07:20:03] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[07:22:01] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Remote host closed the connection)
[07:22:18] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[07:24:08] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Remote host closed the connection)
[07:24:25] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[07:25:49] *** Quits: pkapp (~pkapp@2601:58c:c500:6900:7d43:ad3b:40ec:4e62) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[07:26:05] *** Joins: pkapp (~pkapp@c-75-74-40-214.hsd1.fl.comcast.net)
[07:26:17] *** Joins: fluiD (~fluiD@8.44.151.213)
[07:26:17] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[07:26:35] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[07:27:01] <fluiD> if I need time.time() but nothing else in time, I can't "import time.time". I could "from time import time" but I don't want time(), I still want time.time()
[07:27:14] *** Joins: khole_ (~khole@217.146.83.196)
[07:27:22] *** Joins: DrBrownBear (~Drbb@2600:1700:9aa1:6bc0::49)
[07:27:34] *** Quits: khole_ (~khole@217.146.83.196) (Remote host closed the connection)
[07:27:38] *** Quits: khole (~khole@217.146.83.196) (Quit: Leaving)
[07:28:07] <KirkMcDonald> fluiD: The entire module has to be executed in any case.
[07:28:25] <KirkMcDonald> fluiD: What you're suggesting wouldn't really save you anything.
[07:28:33] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[07:28:50] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[07:29:05] <KirkMcDonald> And, heck, the time module specifically is a built-in.
[07:29:58] <KirkMcDonald> fluiD: In other words, you would do `import time`, and if there's other stuff in that namespace, what does it matter?
[07:29:59] <fluiD> OK. Good to know!
[07:30:10] *** Quits: GreenLlama (~quassel@80-219-124-12.dclient.hispeed.ch) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[07:30:32] *** Quits: efil4cri (~efil4cri@gateway/tor-sasl/wfnintr) (Remote host closed the connection)
[07:30:40] <fluiD> I was told that importing whole modules can be cumbersome.
[07:30:47] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[07:30:47] *** Joins: efil4cri (~efil4cri@gateway/tor-sasl/wfnintr)
[07:31:04] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[07:31:31] <KirkMcDonald> fluiD: Not in Python. It doesn't work that way.
[07:31:48] <SnoopJ> fluiD, what's cumbersome about `import time` ?
[07:32:10] <fluiD> not necessarily "time", but importing other large modules
[07:32:12] *** Quits: tj123 (~tjh123@cpe-75-185-104-199.cinci.res.rr.com) (Ping timeout: 240 seconds)
[07:32:28] *** Joins: GreenLlama (~quassel@80-219-124-12.dclient.hispeed.ch)
[07:33:12] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[07:33:28] * SnoopJ doesn't understand
[07:33:30] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[07:34:37] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 240 seconds)
[07:34:42] <fluiD> Apparently I'm wrong about importing modules. Nevermind. :D
[07:34:54] <fluiD> Hmm.. why don't we just import *?
[07:35:01] *** Joins: Lerroux (~Lerroux@180.190.23.216)
[07:35:06] <jinsun__> it is still just `import module` even if it is large module, it might take longer but not any more cumbersome
[07:35:35] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Remote host closed the connection)
[07:35:51] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[07:36:00] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:06] <fluiD> Oh. I consider taking longer to be cumbersome.
[07:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:36:34] <jinsun__> star imports also run the entire module and you cannot tell where the symbols you use in ourr code come from
[07:36:52] <SnoopJ> modules are sometimes organized so that the top-level import is a little lighter, but this varies from one library to another.
[07:37:08] <jinsun__> so using star imports makes your code unreadable
[07:37:17] <SnoopJ> It's usually more about organization than the actual cost of the import, in my experience.
[07:37:27] <jinsun__> and linters won't like that at all
[07:37:36] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[07:37:37] <fluiD> hahah.. fair enough
[07:37:51] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[07:38:08] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[07:38:19] *** Joins: c4017w__ (~c4017@209.52.68.8)
[07:38:22] <fluiD> ok, another question. I have a program with a thread which opens a socket in blocking mode. My problem is that I have no good way of closing that socket when I'm terminating the program.
[07:39:13] <fluiD> I could make it non blocking with a short timeout, but then I'm wasting resources opening and closing sockets
[07:39:41] *** Joins: revolve (~u0_a227@cpc100838-bagu15-2-0-cust672.1-3.cable.virginm.net)
[07:40:08] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[07:40:08] <fluiD> What's the proper way to handle that?
[07:40:13] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[07:40:25] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[07:40:27] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[07:40:44] <fluiD> My thread function starts with  while (not self.shutdown): but I never get back to that while test if I'm blocked waiting for a connection
[07:40:45] <KirkMcDonald> I mean, when the process ends, the OS will reap the socket.
[07:40:46] *** Quits: yuesbeez (uid458354@id-458354.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[07:41:05] *** Quits: vlado2 (~vlado@2800:484:3587:3c90:8bf1:66d4:72a6:4f9c) (Quit: WeeChat 3.4)
[07:41:14] <fluiD> the thread doesn't appear to stop.
[07:41:30] *** Quits: Wang-GeBiLao (~Wang-GeBi@117.175.116.227) (Quit: Client closed)
[07:41:59] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[07:42:00] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[07:42:29] *** Joins: Wang-GeBiLao (~Wang-GeBi@117.175.116.227)
[07:42:34] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[07:42:40] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[07:42:52] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[07:43:12] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[07:44:42] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Remote host closed the connection)
[07:44:56] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[07:44:59] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[07:46:53] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[07:47:09] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[07:47:24] *** Quits: mat001 (~mat001@c-71-202-208-88.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[07:47:41] *** Quits: sreve (~quassel@p549d70f6.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[07:48:00] *** Joins: sreve (~quassel@p549d72b1.dip0.t-ipconnect.de)
[07:48:30] <fluiD> yeah, I get down to "raise SystemExit(11)" and then it stalls
[07:49:00] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[07:49:18] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[07:51:11] <Lerroux> I'm fairly new to Python. I'm creating a function that uses cv2 to read a QR Code. While that works, there are instances
[07:51:12] <Lerroux> that it fails due to the QR being printed with lower resolution. Now I see that when using Gaussian Blur, most of the QR code I tried now works execpt for a very few.
[07:51:12] <Lerroux> So my solution is something like: https://bpa.st/FEOQ Now my question is (the code works), is there a way I can make that better and more "Pythonic"? Thanks
[07:51:19] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[07:51:37] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[07:52:14] *** Joins: tWqaq (~tWqaq@240e:389:5d1c:ff00:25be:b2b1:4d59:690c)
[07:53:37] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[07:53:53] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[07:55:52] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[07:56:09] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[07:58:08] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[07:58:22] <fluiD> ah, using os._exit(#) instead of raise SystemExit(#) fixes it
[07:58:26] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[08:02:05] *** Quits: mike18 (~geri@71-220-52-187.mpls.qwest.net) (Remote host closed the connection)
[08:03:01] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[08:03:13] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[08:03:32] <audio> my script currently downloads ~30 youtube videos per hour. I want to get this to ~300-500. how can i do this? script: https://bpa.st/A3FA
[08:03:58] <fluiD> spawn child processes? Get a fatter pipe?
[08:04:12] *** Quits: jamea (~jamea@177.239.81.39) (Ping timeout: 240 seconds)
[08:04:57] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[08:06:31] *** Joins: foobaz21248 (~foobaz212@152.37.103.80)
[08:06:48] *** Joins: p-i-_ (~Ohmu@183.89.25.222)
[08:07:45] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 256 seconds)
[08:09:57] *** Quits: p-i- (~Ohmu@183.89.25.222) (Ping timeout: 240 seconds)
[08:11:43] *** Quits: foobaz21248 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[08:17:05] *** Quits: blei (~blei@user/blei) (Quit: Client closed)
[08:18:16] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[08:18:32] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[08:18:58] *** Joins: wyclif (~wyclif@user/wyclif)
[08:20:12] *** Joins: cdown_ (~cdown@163.114.131.1)
[08:21:47] *** Joins: han-solo (~hanish@user/han-solo)
[08:22:19] *** Quits: kiran (~kiranostr@78.40.148.178) (Quit: Toodle-oo!)
[08:22:36] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[08:22:39] *** Joins: kiran (~kiranostr@78.40.148.178)
[08:23:27] *** Quits: cdown (~cdown@188.214.11.14) (Ping timeout: 272 seconds)
[08:23:28] *** cdown_ is now known as cdown
[08:23:48] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[08:24:17] *** Quits: revolve (~u0_a227@cpc100838-bagu15-2-0-cust672.1-3.cable.virginm.net) (Ping timeout: 240 seconds)
[08:24:22] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Ping timeout: 260 seconds)
[08:24:26] *** Joins: wyclif (~wyclif@user/wyclif)
[08:26:17] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 240 seconds)
[08:27:01] <foo> audio: is that with a proxy? Youtube will likely ban you if you get too aggressive
[08:27:15] <foo> ban your IP**
[08:27:18] <audio> oh wow
[08:27:21] <audio> thanks for the heads up
[08:27:21] *** Joins: pmcnabb (~pmcnabb@user/pmcnabb)
[08:27:50] <audio> i don't intend on using any other server than my home computadora
[08:27:55] <foo> (I'm nearly certain of this)
[08:28:41] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[08:30:38] *** Quits: Veil (~Veil@user/Veil) (Read error: Connection reset by peer)
[08:30:47] *** Quits: tableflip (~tableflip@121.99.197.93) (Read error: Connection reset by peer)
[08:30:55] *** Joins: Veil (~Veil@user/Veil)
[08:30:57] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[08:31:12] *** Joins: tableflip (~tableflip@121.99.197.93)
[08:33:03] *** Joins: strugee (~strugee@2602:ffc5:200:4900::1)
[08:35:28] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 272 seconds)
[08:37:48] <deltab> fluiD: you could create a pipe and have your thread listen for it; send to it when you want to signal the thread to end
[08:38:57] *** Quits: BASHitup (~richard@user/yippeekaiyay) (Ping timeout: 240 seconds)
[08:39:01] *** Joins: c4017w_ (~c4017@209.52.68.8)
[08:39:51] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[08:41:20] *** Joins: BASHitup (~richard@user/yippeekaiyay)
[08:42:17] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[08:44:12] *** Quits: r4ulrm (~raul@181.27.127.43) (Ping timeout: 240 seconds)
[08:44:20] *** Joins: r4ulrm (~raul@181.27.127.43)
[08:46:42] *** Joins: sss123next[m] (~sss123nex@2001:470:69fc:105::1:ceac)
[08:47:48] *** Quits: cdown (~cdown@163.114.131.1) (Ping timeout: 240 seconds)
[08:49:55] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[08:50:36] *** Joins: amogorkon (~amogorkon@port-92-196-27-200.dynamic.as20676.net)
[08:51:08] *** Joins: Syzygy__ (~Syzygy@178-190-83-4.adsl.highway.telekom.at)
[08:51:25] *** Joins: newpy_ (~newpy@2601:280:4381:1390:f74b:e8e7:7da:e914)
[08:53:32] *** Quits: Syzygy_ (~Syzygy@2001:871:265:1cdc:b4b3:44f3:ef8:e3b6) (Ping timeout: 250 seconds)
[08:53:59] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[08:54:14] *** Quits: newpy (~newpy@2610:148:2002:0:3248:5755:4741:9e6) (Ping timeout: 260 seconds)
[08:54:42] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[08:57:16] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[09:00:06] *** Joins: zamanf (~dev@213.133.91.246)
[09:00:49] *** Quits: moose (~moose@user/moose) (Ping timeout: 272 seconds)
[09:03:00] *** Quits: SaltHilStroller_ (~SaltHillS@206.223.160.26) (Ping timeout: 240 seconds)
[09:05:02] *** Joins: humanBird (~humanBird@2603-8001-7000-3642-0049-7e86-f26e-5ad4.res6.spectrum.com)
[09:05:23] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[09:05:42] *** Quits: bloody (~bloody@user/bloody) (Quit: okluvyabubye)
[09:11:19] *** Joins: bahamas (~lucian@84.232.140.52)
[09:12:28] *** Quits: jaggz (~jaggz@user/jaggz) (Quit: I saith goodbye)
[09:13:49] *** Quits: Roey (~Roey@user/Roey) (Quit: Client exiting)
[09:14:33] *** Joins: stockh0lm (~Andreas@p200300d2c70bf80011ea30bacc71c432.dip0.t-ipconnect.de)
[09:15:17] *** Quits: KnowledgeShark- (~Knowledge@50.34.198.222) (Quit: Leaving)
[09:15:21] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[09:16:46] *** Joins: nitestryker (~nitestryk@98.42.49.72)
[09:16:48] *** Quits: Wang-GeBiLao (~Wang-GeBi@117.175.116.227) (Quit: Client closed)
[09:21:35] *** Joins: Weldon (~Weldon@117.175.116.227)
[09:24:06] *** Quits: gambl0re (~gambl0re@2607:fea8:a59f:c360::78dd) (Ping timeout: 245 seconds)
[09:25:10] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 250 seconds)
[09:25:18] *** Joins: Everything (~Everythin@37.115.210.35)
[09:26:06] *** Joins: gambl0re (~gambl0re@cpe688f2e1852a3-cm688f2e1852a0.cpe.net.cable.rogers.com)
[09:26:08] *** Quits: agumonke` (~user@88.163.231.79) (Ping timeout: 272 seconds)
[09:26:47] *** Joins: colorado (~fluiD@161.97.231.248)
[09:27:53] *** Quits: jkl (~jkl@user/jkl) (Quit: Gone.)
[09:28:18] *** Joins: jkl (~jkl@user/jkl)
[09:28:48] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[09:29:17] *** Quits: fluiD (~fluiD@8.44.151.213) (Ping timeout: 240 seconds)
[09:30:00] *** Quits: remote (~self@user/hackers) (Quit: leaving)
[09:30:21] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 245 seconds)
[09:31:37] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 256 seconds)
[09:32:55] *** Joins: manti7 (~manti7@176.10.104.94)
[09:33:13] *** Quits: emf (~emf@2620:10d:c090:400::5:b81) (Quit: emf)
[09:33:48] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[09:34:06] *** Joins: emf (~emf@2620:10d:c090:400::5:b81)
[09:35:06] *** Quits: emf (~emf@2620:10d:c090:400::5:b81) (Client Quit)
[09:35:29] *** Quits: johnkeats6 (~johnkeats@2804:14c:32:a0cc:f82f:71a6:6eb0:431b) (Ping timeout: 268 seconds)
[09:36:00] *** Joins: emf (~emf@2620:10d:c090:400::5:b81)
[09:36:59] *** Quits: emf (~emf@2620:10d:c090:400::5:b81) (Client Quit)
[09:38:10] *** Joins: emf (~emf@2620:10d:c090:400::5:b81)
[09:38:37] *** Quits: bim9262 (~bim9262@user/bim9262) (Ping timeout: 240 seconds)
[09:39:00] *** Quits: jjasghar (~jjasghar@idlerpg/player/jjasghar) (Ping timeout: 240 seconds)
[09:39:21] *** Joins: agumonke` (~user@37.175.253.29)
[09:39:22] *** Joins: revolve (~u0_a227@cpc100838-bagu15-2-0-cust672.1-3.cable.virginm.net)
[09:41:20] *** Joins: jjasghar (~jjasghar@idlerpg/player/jjasghar)
[09:41:35] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 240 seconds)
[09:41:48] *** Quits: humberto1 (~humbertow@189.236.30.197) (Ping timeout: 240 seconds)
[09:44:59] *** Quits: ttree (~ttree0@c-73-97-116-42.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[09:44:59] *** Joins: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr)
[09:45:33] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[09:47:25] *** Joins: hams (~hams@73.232.205.0)
[09:47:26] *** Quits: hams (~hams@73.232.205.0) (Changing host)
[09:47:26] *** Joins: hams (~hams@user/hams)
[09:47:42] *** Quits: zamanf (~dev@213.133.91.246) (Read error: Connection reset by peer)
[09:48:01] *** Joins: bim9262 (~bim9262@user/bim9262)
[09:49:16] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Remote host closed the connection)
[09:50:37] *** Quits: leshaste (~lesshaste@82-69-126-43.dsl.in-addr.zen.co.uk) (Read error: Connection reset by peer)
[09:50:42] *** Quits: roxfan (~roxfan@2a02:a03f:a2be:4f00:812d:c5ec:e86f:78e9) (Ping timeout: 260 seconds)
[09:50:48] *** Joins: leshaste (~lesshaste@82-69-126-43.dsl.in-addr.zen.co.uk)
[09:51:10] *** Quits: vishwin (~brioux@2001:470:1f07:302::1) (Ping timeout: 260 seconds)
[09:51:58] <AhmedAmerican> how to run an asyncio lib using trio such as playwright
[09:53:47] *** Joins: vishwin (~brioux@2001:470:1f07:302::1)
[09:55:50] *** Quits: rje (~textual@50.35.241.164) (Ping timeout: 268 seconds)
[09:56:12] *** Joins: howdoi (uid224@id-224.lymington.irccloud.com)
[09:56:12] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Read error: Connection reset by peer)
[09:57:58] *** Joins: dvx (~dvx@5.181.92.64)
[09:58:06] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[09:58:10] *** Joins: radu2424078215 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[09:58:14] *** Quits: radu242407821 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Read error: Connection reset by peer)
[09:58:14] *** radu2424078215 is now known as radu242407821
[09:58:36] *** Quits: strugee (~strugee@2602:ffc5:200:4900::1) (Ping timeout: 240 seconds)
[09:59:15] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 240 seconds)
[09:59:42] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[10:00:21] *** Quits: adiKt (uid472628@id-472628.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[10:00:41] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[10:02:26] <jinsun__> AhmedAmerican: I don't think you can do it if the library is really asyncio only, the library itself has to support running with both asyncio and trio by using something like anyio
[10:03:00] *** Joins: data68 (~data@2a02:908:a65:3d80:748b:2f3a:873a:6c23)
[10:03:42] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[10:03:44] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 250 seconds)
[10:03:55] *** Joins: ravan_ (~ravan@42.201.198.151)
[10:03:55] *** Quits: ravan_ (~ravan@42.201.198.151) (Changing host)
[10:03:55] *** Joins: ravan_ (~ravan@user/ravan)
[10:04:48] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[10:04:57] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 240 seconds)
[10:05:56] *** Joins: not_no2 (~not_not@193.178.220.10)
[10:06:56] *** Joins: rje (~textual@50.35.241.164)
[10:07:37] *** Joins: foobaz21248 (~foobaz212@152.37.103.80)
[10:07:44] *** Joins: strugee (~strugee@2602:ffc5:200:4900::1)
[10:08:12] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[10:08:27] <jinsun__> you can run asyncio part in one thread with asyncio and trio part in another thread with trio I guess, but that's proabably not what you wanted and it would be harder to get right
[10:11:22] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[10:12:25] *** Quits: foobaz21248 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[10:12:50] *** Quits: hams (~hams@user/hams) (Read error: Connection reset by peer)
[10:14:50] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[10:15:49] *** Quits: junktext (~junktext@gateway/vpn/pia/junktext) (Ping timeout: 256 seconds)
[10:17:13] *** Joins: fef (~thedawn@user/thedawn)
[10:19:32] *** Joins: jaggz (~jaggz@user/jaggz)
[10:19:40] *** Joins: parv (~quass@user/parv)
[10:20:17] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[10:21:27] *** Joins: hams (~hams@73.232.205.0)
[10:21:27] *** Quits: hams (~hams@73.232.205.0) (Changing host)
[10:21:27] *** Joins: hams (~hams@user/hams)
[10:22:52] *** Joins: kts (~kts@103.73.237.6)
[10:25:23] *** Joins: diddly_bop_ (~diddly_bo@107-196-11-132.lightspeed.wchtks.sbcglobal.net)
[10:26:44] *** Joins: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[10:26:54] *** Joins: lithammer (~lithammer@arch-vps.cloud.tilaa.com)
[10:27:21] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[10:27:31] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[10:27:43] *** Quits: Elzington (~Elzington@87.249.134.10) (Ping timeout: 256 seconds)
[10:28:11] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[10:28:12] *** Quits: diddly_bop (~diddly_bo@107-196-11-132.lightspeed.wchtks.sbcglobal.net) (Ping timeout: 272 seconds)
[10:28:55] *** Joins: djapo (~archangel@user/djapo)
[10:29:01] *** Quits: the_lanetly_052_ (~the_lanet@194.135.152.253) (Ping timeout: 240 seconds)
[10:29:43] *** Joins: Elzington (~Elzington@68.235.43.22)
[10:30:02] *** Quits: ExpiredKebab (~sgreadly@2407:7000:89aa:b303:1d26:a32b:11ed:1c1c) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[10:30:59] *** Joins: envex (~envex@cpe-173-91-189-33.neo.res.rr.com)
[10:31:02] *** Joins: ExpiredKebab (~sgreadly@2407:7000:89aa:b303:9d32:7b6:5ff9:df11)
[10:31:14] *** Joins: NealRame (~a@89.187.163.193)
[10:32:55] *** Quits: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr) (Remote host closed the connection)
[10:33:15] *** Quits: DrBrownBear (~Drbb@2600:1700:9aa1:6bc0::49) (Remote host closed the connection)
[10:33:17] *** Joins: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr)
[10:33:23] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[10:37:15] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[10:37:16] *** Joins: c4017w__ (~c4017@209.52.68.8)
[10:38:53] *** Joins: spetrosi (~spetrosi@2a02:8308:b:ec00:e1ce:d7b:6a8f:f189)
[10:39:03] *** Quits: SteveR (~SteveR@4.53.131.109) (Ping timeout: 256 seconds)
[10:39:12] *** Joins: jpodivin (~jpodivin@cgnat44-pool3-71-1.poda.cz)
[10:40:11] *** Quits: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr) (Ping timeout: 256 seconds)
[10:40:20] *** Joins: netstar (~alastair@82.19.167.237)
[10:40:28] *** Joins: KombuchaKip (~kip@192.252.230.5)
[10:41:05] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[10:41:31] <netstar> hi. general question. I've an iterator list, of which i am appending. I need to iterate and keep the order and append...is there some way I can check for existing elements for the items without walking it...or better still use the walk and append "manually"
[10:41:52] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 260 seconds)
[10:41:53] *** Quits: ExpiredKebab (~sgreadly@2407:7000:89aa:b303:9d32:7b6:5ff9:df11) (Quit: Textual IRC Client: www.textualapp.com)
[10:42:18] *** Joins: ExpiredKebab (~sgreadly@2407:7000:89aa:b303:9d32:7b6:5ff9:df11)
[10:42:27] *** Quits: Cera (~Cera@user/Cera) (Ping timeout: 256 seconds)
[10:42:54] <netstar> i thought about using a dict for lookup but i cannot iterate and append...in C i'd use a linked list and check as I walked
[10:42:57] *** Quits: axisys (~axisys@ec2-52-207-123-244.compute-1.amazonaws.com) (Ping timeout: 240 seconds)
[10:43:26] *** Joins: theprophet (~theprophe@212.58.102.155)
[10:44:14] *** Joins: lbalhar (~lbalhar@93.185.13.25)
[10:44:30] *** Joins: martti (~martti@46-126-48-136.dynamic.hispeed.ch)
[10:45:28] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[10:46:55] *** Joins: mrwick (~mrwick@user/mrwick)
[10:49:04] <HurricaneHarry> netstar: maybe this is of some use ? https://realpython.com/linked-lists-python/
[10:49:46] <netstar> thanks HurricaneHarry
[10:49:53] <netstar> :)
[10:49:56] *** Quits: stockh0lm (~Andreas@p200300d2c70bf80011ea30bacc71c432.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[10:50:02] *** Joins: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder)
[10:50:11] *** Quits: pyever___ (~pyeveryth@64-18-153-56.starry-inc.net) (Remote host closed the connection)
[10:51:20] *** Joins: stockh0lm (~Andreas@p200300d2c70bf80011ea30bacc71c432.dip0.t-ipconnect.de)
[10:52:16] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[10:52:34] *** Joins: wyclif (~wyclif@user/wyclif)
[10:53:37] *** Quits: esther (~esther@24-155-112-236.dyn.grandenetworks.net) (Ping timeout: 240 seconds)
[10:56:13] *** Joins: malvin (malvin@2a01:7e00::f03c:93ff:fef1:5307)
[10:57:24] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[10:57:52] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[10:58:03] *** Joins: wyclif (~wyclif@user/wyclif)
[10:58:09] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[10:59:38] *** Quits: Jenna16bit (~j16bit@c-73-228-39-16.hsd1.nm.comcast.net) (Ping timeout: 250 seconds)
[11:00:08] *** Joins: Jenna16bit (~j16bit@c-73-228-39-16.hsd1.nm.comcast.net)
[11:00:13] *** Joins: moto (~moto@user/moto)
[11:00:52] <not_no2> yo
[11:00:57] *** Joins: ice9 (~ice9@user/ice9)
[11:01:31] *** Quits: Cyp (~cyp@213.237.85.100) (Read error: Connection reset by peer)
[11:02:07] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[11:03:22] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[11:03:27] *** Joins: rickybob2 (~rickybob@gateway/vpn/pia/rickybob)
[11:03:35] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[11:03:48] *** Quits: white2 (~mahengrui@user/mahengrui1) (Ping timeout: 240 seconds)
[11:04:58] *** Quits: resmo (~resmo@2a00:d420:9:8a00:7204:306f:2d78:a771) (Remote host closed the connection)
[11:05:11] *** Joins: resmo (~resmo@2a00:d420:9:8a00:6e40:6a4b:3886:c997)
[11:06:11] *** Quits: cthulchu_ (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Ping timeout: 245 seconds)
[11:06:33] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 256 seconds)
[11:07:04] *** Joins: white2 (~mahengrui@user/mahengrui1)
[11:07:17] *** Quits: diogenese (~diogenese@diogenese.velotech.net) (Quit: Has anybody seen the bridge?)
[11:07:41] *** Joins: diogenese (~diogenese@diogenese.velotech.net)
[11:08:23] *** Joins: gusto (~Augustus@109.255.100.54)
[11:08:28] *** Joins: wisep__ (~rickybob@gateway/vpn/pia/rickybob)
[11:09:44] *** Joins: dreamon (~dreamon@ppp-88-217-74-38.dynamic.mnet-online.de)
[11:09:57] *** Quits: not_no2 (~not_not@193.178.220.10) (Ping timeout: 256 seconds)
[11:10:09] *** Joins: anshupatia (uid29854@id-29854.helmsley.irccloud.com)
[11:10:17] *** Quits: dld (~davidlowr@2601:197:600:1210:7c23:245c:3a8b:a0db) (Ping timeout: 240 seconds)
[11:11:39] *** Quits: rickybob2 (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 256 seconds)
[11:12:00] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[11:12:33] *** Joins: dld (~davidlowr@73.61.9.48)
[11:14:23] *** Joins: wib_jonas (~wib_jonas@cst2-26-227.cust.vodafone.cz)
[11:14:36] *** Quits: raym (~raym@user/raym) (Ping timeout: 240 seconds)
[11:15:19] *** Quits: wisep__ (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 256 seconds)
[11:15:42] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 272 seconds)
[11:15:54] *** Quits: ravan_ (~ravan@user/ravan) (Quit: Leaving)
[11:16:11] *** Joins: raym (~raym@user/raym)
[11:17:05] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[11:17:10] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[11:17:20] *** Joins: palasso (~palasso@user/palasso)
[11:18:09] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[11:19:12] *** Joins: rendar (~rendar@user/rendar)
[11:21:11] *** Quits: baffodoro (~raffaem@95.74.66.157) (Remote host closed the connection)
[11:22:59] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[11:23:29] *** Joins: pycode1 (~pycode3@93-40-5-81.ip36.fastwebnet.it)
[11:25:55] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[11:26:32] *** Quits: DarkTrick (~DarkTrick@pl-749-047.bunbun.ne.jp) (Ping timeout: 240 seconds)
[11:26:47] *** Joins: k2ro (~k2ro@p5b175bd7.dip0.t-ipconnect.de)
[11:26:57] *** Quits: agumonke` (~user@37.175.253.29) (Ping timeout: 256 seconds)
[11:27:31] *** Joins: DarkTrick (~DarkTrick@pl-749-047.bunbun.ne.jp)
[11:27:32] *** Parts: k2ro (~k2ro@p5b175bd7.dip0.t-ipconnect.de) ()
[11:28:33] *** Joins: upsala (~zcb@185.209.196.139)
[11:30:03] *** Joins: Ergo^ (~ergo@91.238.59.144)
[11:33:06] *** Joins: tatsumaru (~tatsumaru@82.147.131.155)
[11:34:11] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[11:34:29] <tatsumaru> hey guys, new to python, can you please tell me why is that when I type  'listname[0]'  in REPL the output is displayed with quotes but if I do 'print(listname[0])' the output has no quotes?
[11:34:37] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::3a92) (Ping timeout: 240 seconds)
[11:35:46] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[11:36:19] *** Joins: rickybob2 (~rickybob@gateway/vpn/pia/rickybob)
[11:37:28] *** Joins: wisep__ (~rickybob@gateway/vpn/pia/rickybob)
[11:37:58] *** Joins: c4017w_ (~c4017@209.52.68.8)
[11:38:35] *** Quits: masoudd (~masoudd@user/masoudd) (Quit: Leaving)
[11:39:25] *** Quits: white2 (~mahengrui@user/mahengrui1) (Ping timeout: 256 seconds)
[11:39:46] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 272 seconds)
[11:40:13] *** Quits: amogorkon (~amogorkon@port-92-196-27-200.dynamic.as20676.net) (Quit: just use()!)
[11:40:30] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[11:40:36] *** Joins: amogorkon (~amogorkon@port-92-196-27-200.dynamic.as20676.net)
[11:40:49] *** Quits: rickybob2 (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 256 seconds)
[11:41:11] <amogorkon> quick question, is there a german python chan on this network?
[11:41:41] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[11:41:48] *** Joins: kosh (~kosh@user/kosh)
[11:42:01] <amogorkon> <tatsumaru> hey guys, new to python, can you please tell me why is that when I type  'listname[0]'  in REPL the output is displayed with quotes but if I do 'print(listname[0])' the output has no quotes? <- the difference between repr (representation) and str (string)
[11:42:19] *** Quits: netstar (~alastair@82.19.167.237) (Quit: Lost terminal)
[11:42:33] <amogorkon> str is printed "as is", repr is printed with indicators that you're dealing with strings
[11:42:36] *** Joins: white2 (~mahengrui@user/mahengrui1)
[11:43:50] <amogorkon> the idea of repr (which is violated most of the time, but still good to know) is that eval(repr(thing)) == thing holds
[11:44:10] *** Joins: gentooclimax (~gentoocli@2a02-8440-3141-a12f-e37b-616c-4757-cbab.rev.sfr.net)
[11:44:32] <amogorkon> while str(thing) doesn't aspire to any validity
[11:44:35] *** Joins: tgamblin (~tgamblin@cpe64777de11593-cm64777de11590.cpe.net.cable.rogers.com)
[11:46:45] *** Joins: pvergain (~Thunderbi@2a01:e0a:223:690:a7a2:bf54:8291:410d)
[11:47:17] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[11:47:23] *** Joins: roxfan (~roxfan@2a02:a03f:a2be:4f00:812d:c5ec:e86f:78e9)
[11:48:11] <The-Compiler> amogorkon: there is #python.de
[11:48:46] <amogorkon> ah, active?
[11:48:55] <amogorkon> recommendable?
[11:49:03] *** Quits: white2 (~mahengrui@user/mahengrui1) (Ping timeout: 256 seconds)
[11:49:56] *** Joins: tobybl (~tobybl@252.193.115.87.dyn.plus.net)
[11:50:12] *** Quits: Jenna16bit (~j16bit@c-73-228-39-16.hsd1.nm.comcast.net) (Ping timeout: 240 seconds)
[11:51:35] *** Quits: lilibyte (lilibyte@gateway/vpn/protonvpn/lilibyte) (Ping timeout: 256 seconds)
[11:51:39] <audio> what's a cool visualization for objects that that only range in value from 0 to 1?
[11:52:08] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[11:52:26] <amogorkon> wdym "visualisation"?
[11:53:12] *** Joins: Cyp (~cyp@213.237.85.100)
[11:53:50] <amogorkon> <audio> what's a cool visualization for objects that that only range in value from 0 to 1? <- fuzzylogic?
[11:54:05] *** Quits: tobybl (~tobybl@252.193.115.87.dyn.plus.net) (Remote host closed the connection)
[11:54:35] *** Joins: rickybob2 (~rickybob@gateway/vpn/pia/rickybob)
[11:55:13] *** Quits: AlanMD_ (~AlanMD@86.124.30.89) (Remote host closed the connection)
[11:55:44] *** Quits: kickingvegas (~cchoi@c-73-170-198-141.hsd1.ca.comcast.net) (Quit: leaving)
[11:55:53] *** Joins: AlanMD (~AlanMD@86.124.30.89)
[11:56:59] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[11:57:23] <audio> amogorkon, fuzzylogic?
[11:57:38] <audio> amogorkon, by visualization i mean a data visualization that users will actually think is cool and informative
[11:58:15] <audio> amogorkon, the value between 0 and 1 is a measure of how similar an input (song) is to Jimi Hendrix' songs
[11:58:16] <amogorkon> oh.. so more like education?
[11:58:21] <amogorkon> what
[11:58:23] *** Quits: wisep__ (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 256 seconds)
[12:00:33] *** Joins: chele (~chele@user/chele)
[12:02:21] <amogorkon> audio, https://en.wikipedia.org/wiki/Fuzzy_logic
[12:02:38] <amogorkon> i built a library https://github.com/amogorkon/fuzzylogic
[12:02:57] <amogorkon> which also does a bit of visualization
[12:03:17] <audio> amogorkon, that's cool, i think in the past i've talked with coworkers about potentially using your library for something
[12:03:18] <audio> small world
[12:03:31] <amogorkon> oh really? haha
[12:03:46] <audio> i think so
[12:03:59] <amogorkon> cool :) what would be the usecase?
[12:04:01] <audio> or some other fuzzy logic package
[12:04:09] <audio> i forgot but it had to do with text
[12:04:17] <audio> oh yea, we wanted to do OCR text matching
[12:04:21] *** Joins: peteyboy_ (~peteyboy1@95.169.226.66)
[12:04:52] <amogorkon> scikit-fuzzy is the biggest fish in that pond
[12:05:04] *** Quits: Seto_Kaiba (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3) (Ping timeout: 250 seconds)
[12:05:53] *** Joins: alius (~alius@2001:861:4444:49c0:94de:8eb6:7193:6d62)
[12:06:02] <amogorkon> OCR? very cool
[12:07:21] <amogorkon> the usecases i know people used fuzzylogic for were industrial climate control, master's thesis in electrical engineering, control of automonous submarine vehicles and some scientific work in psychology
[12:08:16] *** Joins: Jenna16bit (~j16bit@c-73-228-39-16.hsd1.nm.comcast.net)
[12:08:17] *** Quits: rickybob2 (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 240 seconds)
[12:08:31] *** Joins: arinov_ (~arinov@213.194.126.155)
[12:08:32] *** Joins: foobaz21248 (~foobaz212@152.37.103.80)
[12:08:34] <amogorkon> autonomous*
[12:09:19] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[12:10:50] <amogorkon> i'm amazed by the diversity of applications, never expected it to be useful to anyone
[12:11:02] <The-Compiler> amogorkon: not sure how active #python.de is - despite speaking German I never really was there, just joined
[12:11:13] <amogorkon> k
[12:12:10] *** Joins: bahamas (~lucian@84.232.140.52)
[12:13:01] *** Quits: zlg (~zlg@user/zlg) (Ping timeout: 240 seconds)
[12:13:07] *** Quits: foobaz21248 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[12:13:24] *** Quits: jjasghar (~jjasghar@idlerpg/player/jjasghar) (Ping timeout: 240 seconds)
[12:13:58] *** Quits: humanBird (~humanBird@2603-8001-7000-3642-0049-7e86-f26e-5ad4.res6.spectrum.com) (Quit: Client closed)
[12:13:58] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[12:14:36] *** Quits: NoelFlantier3 (~Hubert@195.201.244.189) (Remote host closed the connection)
[12:14:58] *** Joins: NoelFlantier3 (~Hubert@195.201.244.189)
[12:18:37] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 240 seconds)
[12:18:47] *** Joins: Hunterkll (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3)
[12:19:31] *** Joins: weedmic (~weedmic@2a0d:6fc0:2840:200:d5c7:b64a:7be4:b6c7)
[12:20:21] *** Quits: adiKt (uid472628@id-472628.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[12:20:36] *** Joins: Klinda (~superleag@user/klinda)
[12:23:14] *** Joins: shad (~shad@user/shad)
[12:23:34] *** Joins: masoudd (~masoudd@user/masoudd)
[12:24:24] <tatsumaru> amogorkon: I see, thanks!
[12:26:59] *** Joins: jjasghar (~jjasghar@idlerpg/player/jjasghar)
[12:28:47] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[12:29:15] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[12:29:23] *** Quits: kostkon_ (~androirc@2a02:587:a10f:c988:4142:80fd:5bce:d437) (Ping timeout: 268 seconds)
[12:29:28] *** Quits: emf (~emf@2620:10d:c090:400::5:b81) (Quit: emf)
[12:29:59] *** Joins: bjourne (~bjourne@2001:6b0:1:1140:42bf:ff4:f8fa:50e5)
[12:30:09] *** Quits: cotsuka (~cotsuka@user/cotsuka) (Quit: You have been kicked for being idle)
[12:30:09] *** Quits: berton[m] (~berton@2001:470:69fc:105::ce36) (Quit: You have been kicked for being idle)
[12:30:26] *** Joins: jay-m126 (~jay-m@154.126.169.74)
[12:30:31] *** Joins: jay-m126_ (~jay-m@154.126.169.74)
[12:30:32] *** Joins: jay-m1261 (~jay-m@154.126.169.74)
[12:30:43] *** Quits: pikabell[m] (~pikabellm@2001:470:69fc:105::1:6125) (Quit: You have been kicked for being idle)
[12:31:07] *** Joins: thevishy (~Nishant@2405:201:f005:c007:b514:75a9:41b7:5c1b)
[12:32:47] <tatsumaru> amogorkon: in that case why does repr(list) == str(list) , return true?
[12:33:03] *** Joins: pikabell[m] (~pikabellm@2001:470:69fc:105::1:6125)
[12:33:40] *** Parts: pikabell[m] (~pikabellm@2001:470:69fc:105::1:6125) ()
[12:33:48] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 240 seconds)
[12:34:24] <bjourne> what are some good build tools written in python?
[12:34:36] <The-Compiler> bjourne: define "build tools"
[12:35:15] <The-Compiler> tatsumaru: str(obj) defaults to repr(obj) if that object does not define a __str__
[12:35:38] <bjourne> The-Compiler: "autotools-like software"
[12:35:52] *** Quits: howdoi (uid224@id-224.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[12:36:27] *** Joins: xa0s (~xa0s@mab.sdf.org)
[12:36:53] <tatsumaru> The-Compiler: ah I see, indeed it returns false when the object is a string
[12:37:38] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:37:50] *** Joins: drbeco (~beco@user/beco)
[12:38:21] <KirkMcDonald> bjourne: Portage might be the most notable one.
[12:38:23] <audio> can python-rq send messages back to the function that called it during execution of a queued task?
[12:38:25] <The-Compiler> bjourne: SCons, Waf, maybe Invoke (though that's rather a replacement for Makefiles). No idea about "good", that's just the one I know exist and are somewhat popular.
[12:38:39] *** Joins: c4017w__ (~c4017@209.52.68.8)
[12:38:57] *** Parts: tatsumaru (~tatsumaru@82.147.131.155) ()
[12:40:06] <bjourne> KirkMcDonald: gentoo's portage? that's not exactly what im after
[12:40:07] *** Joins: Guest3952 (~vit@chello085216193138.chello.sk)
[12:42:01] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[12:42:41] *** gentooclimax is now known as climax
[12:43:06] <bjourne> The-Compiler: Waf is what i'm using now. but it has flaws and limitations. something like waf but more polished and better documented would be perfect
[12:43:39] <The-Compiler> bjourne: I'm not really aware of anything (other than SCons, but not sure if that's better)
[12:43:59] <The-Compiler> most projects seem to switch to CMake, which seems kind of weird to me as well
[12:44:22] *** Quits: jay-m1261 (~jay-m@154.126.169.74) (Ping timeout: 272 seconds)
[12:44:22] *** Quits: jay-m126_ (~jay-m@154.126.169.74) (Ping timeout: 272 seconds)
[12:44:23] *** Quits: jay-m126 (~jay-m@154.126.169.74) (Ping timeout: 272 seconds)
[12:45:17] <bjourne> cmake is ok, but its dsl is, in comparision with python, brain damage
[12:45:40] *** Joins: jay-m126 (~jay-m@154.126.169.200)
[12:45:50] *** Joins: jay-m126_ (~jay-m@154.126.169.200)
[12:46:19] <barometz> the main reason I like SCons, conceptually - it doesn't have its own bad language
[12:47:34] <barometz> oh hey this isn't c++-general
[12:49:23] *** Quits: DarkTrick (~DarkTrick@pl-749-047.bunbun.ne.jp) (Ping timeout: 256 seconds)
[12:49:57] *** Joins: DarkTrick (~DarkTrick@pl-749-047.bunbun.ne.jp)
[12:50:17] *** Quits: crackerjack (~crackerja@pear.bnc4free.com) (Ping timeout: 240 seconds)
[12:50:29] *** Quits: Masklin__Gurder (~joel@bioinf-serv.biol.lu.se) (Remote host closed the connection)
[12:50:34] *** Quits: Titore (~Titore@user/titore) (Ping timeout: 250 seconds)
[12:50:57] *** Quits: burakcank (~burakcank@has.arrived.and.is.ready-to.party) (Ping timeout: 240 seconds)
[12:51:02] *** Joins: jay-m1261 (~jay-m@154.126.169.200)
[12:51:16] *** Joins: Snyp (~Snyp@49.207.217.84)
[12:52:05] *** Joins: millido (~millido@84.210.150.128)
[12:53:11] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[12:54:28] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 250 seconds)
[12:55:28] *** Joins: Masterphi (~Masterphi@user/masterphi)
[12:55:32] *** Quits: Masterphi (~Masterphi@user/masterphi) (Client Quit)
[12:55:37] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 256 seconds)
[12:56:38] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[12:57:05] *** Joins: tobybl (~tobybl@dhcp-199-233.inf.ed.ac.uk)
[12:57:26] *** Quits: lbalhar (~lbalhar@93.185.13.25) (Read error: Connection reset by peer)
[12:58:00] <KirkMcDonald> bjourne: Oh, I suppose this conversation should also mention Bazel, which is not written in Python itself, but uses a Python-derived language for its BUILD files.
[12:58:15] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Remote host closed the connection)
[12:58:35] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[13:01:38] *** Quits: bluedust (~bluedust@103.165.167.61) (Remote host closed the connection)
[13:01:52] <zamba> i often want to read data from file and then do something about this data.. i usually have separate functions to do this.. but.. the opening of the file to first read the data.. where does it make sense that this is done.. inside the function or outside?
[13:02:09] <zamba> meaning.. should i pass the filename as the argument or the file's content?
[13:02:30] <amogorkon> zamba, what data?
[13:02:51] *** Joins: ivii (~ivan@user/ivii)
[13:03:02] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 240 seconds)
[13:03:24] <amogorkon> are we talking small text files here or TB of hdf5?
[13:04:10] <zamba> small text files.. i'm usually just reading in xml data
[13:04:28] *** Quits: thevishy (~Nishant@2405:201:f005:c007:b514:75a9:41b7:5c1b) (Quit: Leaving)
[13:04:41] <han-solo> if you make it take an iterable, then you can pass it other things than file
[13:04:50] <han-solo> so flexible and easy to test
[13:04:58] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[13:05:02] *** Joins: thiras (~thiras@user/thiras)
[13:05:45] <amogorkon> i would convert the data into an internal datastructure first, then pass that around
[13:05:59] <amogorkon> if it's just small xml
[13:06:17] <amogorkon> pydantic maybe
[13:07:07] <amogorkon> i'd try to avoid nested dicts and lists when possible
[13:07:34] <zamba> han-solo: what do you mean? the function?
[13:08:48] <zamba> amogorkon: it's a small xml, yes
[13:08:49] <han-solo> yes
[13:08:58] <zamba> can pydandic deal with xmls?
[13:09:13] *** Joins: Titore (~Titore@user/titore)
[13:09:25] <zamba> i'm a sucker for lists and nested dicts.. so i really want a different way of representing the data, if at all possible
[13:09:45] *** Joins: singularity00 (~singulari@236.lan-hi1-2.static.rozabg.com)
[13:10:06] *** Joins: burakcank (~burakcank@has.arrived.and.is.ready-to.party)
[13:10:22] *** Joins: crackerjack (~crackerja@pear.bnc4free.com)
[13:10:32] <amogorkon> zamba, https://pydantic-docs.helpmanual.io/usage/models/#data-binding
[13:10:35] <amogorkon> looks like it
[13:10:55] *** climax is now known as gentooclimax
[13:10:57] *** Joins: plastico (~plastico@neomutt/plastico)
[13:11:06] <han-solo> https://github.com/martinblech/xmltodict
[13:11:14] <zamba> yes, i'm using xmltodict
[13:11:17] <han-solo> ah
[13:11:29] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[13:11:58] *** Joins: bahamas (~lucian@84.232.140.52)
[13:14:01] *** Joins: tatsumaru (~tatsumaru@82.147.131.155)
[13:14:01] *** Joins: lbalhar (~lbalhar@93.185.13.25)
[13:15:11] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.4)
[13:15:40] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[13:16:45] <bjourne> KirkMcDonald: nah i want to specify the build deps and configuration using real python. in the long run it's better for extensibility and reuse
[13:17:36] *** Parts: tatsumaru (~tatsumaru@82.147.131.155) ()
[13:17:59] *** Joins: Auron (Auron956@user/auron)
[13:18:30] *** Joins: bluedust (~bluedust@103.165.167.61)
[13:19:13] *** Quits: gdd (~gdd@129.199.146.230) (Ping timeout: 272 seconds)
[13:19:21] <bjourne> build tools with dsls often make "cookie cutter tasks" easy, like compiling c with gcc. but then you cant extend them for some arcane language and compiler the build tool devs didn't account for
[13:19:59] *** Joins: gurkenglas (~gurkengla@dslb-188-096-121-068.188.096.pools.vodafone-ip.de)
[13:20:11] <KirkMcDonald> bjourne: Bazel is an exceedingly general system in this sense, but it's also fairly heavyweight, and isn't the sort of thing I'd employ for e.g. some random open source project.
[13:20:13] *** Joins: white2 (~mahengrui@user/mahengrui1)
[13:20:19] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[13:20:51] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[13:20:52] <KirkMcDonald> bjourne: But it's the open source version of Google's in-house build system.
[13:21:27] *** Quits: ivii (~ivan@user/ivii) (Ping timeout: 256 seconds)
[13:21:37] <KirkMcDonald> So there isn't a lot you can't convince it to do.
[13:21:56] *** Joins: ivii (~ivan@user/ivii)
[13:22:27] *** gentooclimax is now known as climax
[13:24:04] *** Joins: bluedust_ (~bluedust@185.248.85.10)
[13:24:04] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[13:25:05] *** Quits: dbristow (~dbristow@user/dbristow) (Remote host closed the connection)
[13:25:31] *** Quits: bluedust (~bluedust@103.165.167.61) (Read error: Connection reset by peer)
[13:25:33] *** Joins: rhombus (~rhombus@ip5b408ee5.dynamic.kabel-deutschland.de)
[13:25:33] *** Joins: bluedus__ (~bluedust@103.165.167.61)
[13:26:23] <bjourne> bazel can't do configuration apparently, also written in java, so ugh
[13:26:51] *** Quits: Snyp (~Snyp@49.207.217.84) (Quit: Textual IRC Client: www.textualapp.com)
[13:28:37] *** Quits: bluedust_ (~bluedust@185.248.85.10) (Ping timeout: 240 seconds)
[13:29:57] *** Quits: white2 (~mahengrui@user/mahengrui1) (Ping timeout: 240 seconds)
[13:32:18] *** Joins: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52)
[13:32:37] *** Quits: newpy_ (~newpy@2601:280:4381:1390:f74b:e8e7:7da:e914) (Quit: Leaving)
[13:32:37] *** Quits: asix (~Anders@user/asix) (Ping timeout: 240 seconds)
[13:32:43] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[13:33:19] *** Joins: minip (~minip@user/minip)
[13:33:46] *** Quits: tim__ (~tmart@47-220-163-218.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 272 seconds)
[13:34:03] <zamba> amogorkon: looks interesting.. i'm attempting to adapt that.. but the problem is that my xml structure is one level too far up from what i want.. how can i go down one level before attempting to get the elements?
[13:34:25] *** Joins: tatsumaru (~tatsumaru@82.147.131.155)
[13:34:31] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Quit: Leaving)
[13:34:43] *** Quits: wib_jonas (~wib_jonas@cst2-26-227.cust.vodafone.cz) (Ping timeout: 256 seconds)
[13:35:17] *** Quits: theprophet (~theprophe@212.58.102.155) (Ping timeout: 256 seconds)
[13:35:58] <tatsumaru> The-Compiler: so if print is returning no quotes because this is str then why is str(string) returning quotes while print(string) doesn't?
[13:37:14] *** climax is now known as gentooclimax
[13:37:33] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[13:37:38] *** Quits: gentooclimax (~gentoocli@2a02-8440-3141-a12f-e37b-616c-4757-cbab.rev.sfr.net) (Quit: Konversation terminated!)
[13:37:56] *** Joins: asix (~Anders@user/asix)
[13:38:35] <amogorkon> tatsumaru, because of how things are visually represented in your environment
[13:38:36] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:39:04] <tatsumaru> amogorkon I am using the python repl in terminal
[13:39:19] *** Joins: c4017w_ (~c4017@209.52.68.8)
[13:39:23] <amogorkon> in some environments you don't even see things that are only returned but not printed
[13:39:45] *** Joins: zlg (~zlg@user/zlg)
[13:39:45] <amogorkon> yeah, repl is special
[13:39:53] *** Quits: effprime (~effprime@user/effprime) (Read error: Connection reset by peer)
[13:40:08] *** Quits: Veil (~Veil@user/Veil) (Read error: Connection reset by peer)
[13:40:37] <amogorkon> try to run your code as a module
[13:40:46] *** Joins: effprime (~effprime@user/effprime)
[13:40:54] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[13:41:08] *** Quits: hams (~hams@user/hams) (Read error: Connection reset by peer)
[13:41:13] <amogorkon> that's a different mode of operation
[13:41:14] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[13:41:32] <amogorkon> where you don't see the things that are only returned but not printed
[13:41:47] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[13:42:15] *** Joins: eson123 (~whatever@118.69.128.37)
[13:42:36] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[13:43:17] *** Joins: Veil (~Veil@user/Veil)
[13:44:08] *** Quits: Veil (~Veil@user/Veil) (Read error: Connection reset by peer)
[13:44:24] *** Joins: Veil (~Veil@user/Veil)
[13:44:43] <eson123> hm question please, between representing a dict directly as {1:"data1", 2:"data1", 3:"data2", ...., 1000:"data2"} and declaring a list with only l = ["data1", "data2"] first then re-represent the dict as {1:l[0], 2:l[0], 3:l[1], ...., 1000:l[1]}, does the second method somehow save more memory ?
[13:45:23] *** Joins: Naan (~Naan@user/naan)
[13:45:31] <eson123> since it doesn't store the hold data but only a reference to the list, it could be lighter ?
[13:45:38] *** Joins: pyfisch (~pyfisch@user/pyfisch)
[13:46:27] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Quit: WeeChat 3.4)
[13:46:54] *** Quits: minip (~minip@user/minip) (Remote host closed the connection)
[13:47:01] <amogorkon> eson123> since it doesn't store the hold data but only a reference to the list, it could be lighter ? <- how many entries?
[13:47:23] <eson123> by entries you mean the key:value pair ?
[13:47:43] <amogorkon> yeah
[13:47:44] *** Joins: gentooclimax (~gentoocli@173.15.23.93.rev.sfr.net)
[13:47:49] <eson123> say 1000
[13:47:57] *** Joins: theprophet (~theprophe@212.58.102.155)
[13:48:04] <amogorkon> then it doesn't matter any way
[13:48:36] *** Quits: Veil (~Veil@user/Veil) (Read error: Connection reset by peer)
[13:48:44] <amogorkon> don't put too much thought into optimization at this point
[13:48:46] <eson123> huh, so the reference is as big as the data itself ?
[13:48:51] <Repiphany> There is no holding "only a reference to the list"
[13:48:58] *** Joins: niku (~niku@86-83-36-18.fixed.kpn.net)
[13:49:13] *** Joins: Veil (~Veil@user/Veil)
[13:49:27] <eson123> yea, python doesn't have pointers i forgot
[13:49:28] <davor> I have a couple of csvs with four fields - a timestamp, followed by three sequences of 16 bits, e.g. 2022-01-05 16:00:39.369781,0000000110000000,0010000000000000,1110000000000111 these csvs are somewhat large, a couple of gigs. what's the fastest way to save them as a dataframe into a h5 file with each of the 48 bits being one column?
[13:49:43] <Repiphany> your_list[i] and your_dict[i] would point to the same object in memory, whatever it was
[13:49:47] *** Joins: bomb-on (~bomb-on@user/bomb-on)
[13:49:52] <amogorkon> <eson123> huh, so the reference is as big as the data itself ? <- even if you were to duplicate all data, it shouldn't matter for any practical application (except for microcontrollers, but that's an entirely different cosmos)
[13:50:48] *** Quits: roxfan (~roxfan@2a02:a03f:a2be:4f00:812d:c5ec:e86f:78e9) (Ping timeout: 250 seconds)
[13:51:51] *** Joins: MajorBiscuit (~MajorBisc@c-001-023-033.client.tudelft.eduvpn.nl)
[13:52:05] *** Quits: gentooclimax (~gentoocli@173.15.23.93.rev.sfr.net) (Client Quit)
[13:52:05] *** niku is now known as strNophix
[13:52:22] *** Quits: bzyx (~quassel@89-69-20-238.dynamic.chello.pl) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[13:53:01] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 240 seconds)
[13:54:28] *** litharge sets mode: -b *!*@138.106.57.131
[13:58:03] *** Joins: Payam92 (~Payam@138.106.57.131)
[13:58:18] <Payam92> bjs do you have time?
[13:58:44] *** Joins: foobaz21248 (~foobaz212@152.37.103.80)
[14:01:29] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Remote host closed the connection)
[14:02:45] *** Joins: bahamas (~lucian@84.232.140.52)
[14:04:48] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[14:05:32] *** Quits: kaiseisei (~Thunderbi@user/kaiseisei) (Ping timeout: 250 seconds)
[14:06:11] *** Quits: weibullguy (weibullguy@gateway/vpn/protonvpn/weibullguy) (Ping timeout: 245 seconds)
[14:07:23] *** Quits: millido (~millido@84.210.150.128) (Quit: ZNC 1.8.2 - https://znc.in)
[14:09:12] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[14:09:47] *** Joins: nomic (~nomic@85.203.36.100)
[14:10:12] <mickey8> when using print("%f" % (v)) and v is something like 1.14261574e-175, what placeholder would i use to get that value and not 1142.615 or so
[14:11:27] <parv> How would get even "1142.615" for Xe-175?
[14:12:58] <wyre> are all pinned version updated in the requirements.txt file when I run `python -m pip install -U -r requirements.txt` ?
[14:13:21] <parv> I am seeing all 0's for xe-175 -- no surprise there
[14:13:38] <han-solo> wyre: no
[14:13:39] <parv> ... that is with '%f' format string
[14:14:23] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[14:14:24] <mickey8> parv whatever, you get the point, i want the e version :)
[14:14:39] *** Joins: jmcb (~jmcb@nas47-67.york.ac.uk)
[14:15:52] <wyre> han-solo, so I guess the -U argument is just to upgrade packages as much as the gap you provided when pinning those packages allows, right?
[14:17:02] <parv> mickey8, Try 'e' or 'g' : https://docs.python.org/3/library/string.html?highlight=print%20format
[14:17:31] <mickey8> perfect. thank you
[14:17:40] *** Parts: mickey8 (~user@user/mickey) ()
[14:18:15] <han-solo> wyre: yeah, it just try to upgrade the packages in the environment you run
[14:20:54] *** Joins: Viewday113 (~Viewday@user/viewday)
[14:20:57] *** Quits: audio (~audio@user/audio) (Ping timeout: 240 seconds)
[14:21:04] *** Joins: millido (~millido@84.210.150.128)
[14:22:29] *** Joins: kostkon_ (~androirc@2.142.66.94.static.otenet.gr)
[14:22:46] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[14:22:47] *** Viewday113 is now known as Viewday11
[14:23:09] *** Quits: kts (~kts@103.73.237.6) (Quit: Konversation terminated!)
[14:27:43] *** Joins: WhiteLotus30 (~WhiteLotu@129.232.219.207)
[14:28:13] *** Quits: WhiteLotus30 (~WhiteLotu@129.232.219.207) (Client Quit)
[14:28:52] *** Quits: Tempesta (~Tempesta@user/tempesta) (Read error: Connection reset by peer)
[14:29:11] *** Joins: driib22 (~driib@185.195.233.145)
[14:31:10] *** Quits: driib2 (~driib@185.65.135.238) (Ping timeout: 260 seconds)
[14:31:10] *** driib22 is now known as driib2
[14:31:43] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[14:33:00] *** Joins: esther (~esther@24-155-112-236.dyn.grandenetworks.net)
[14:33:14] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[14:33:32] *** Quits: jay-m126_ (~jay-m@154.126.169.200) (Ping timeout: 240 seconds)
[14:34:20] *** Parts: tatsumaru (~tatsumaru@82.147.131.155) ()
[14:34:22] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[14:34:24] *** Quits: jay-m126 (~jay-m@154.126.169.200) (Read error: Connection reset by peer)
[14:34:27] *** Joins: milkt_ (~debian@gateway/tor-sasl/milkt)
[14:34:34] *** Quits: jay-m1261 (~jay-m@154.126.169.200) (Ping timeout: 268 seconds)
[14:34:34] *** Quits: lbalhar (~lbalhar@93.185.13.25) (Ping timeout: 272 seconds)
[14:34:48] *** Quits: eson123 (~whatever@118.69.128.37) (Quit: Leaving)
[14:35:22] *** Joins: wakeup (~wakeup@user/wakeup)
[14:35:31] *** Joins: jay-m126 (~jay-m@154.126.169.74)
[14:35:55] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 240 seconds)
[14:36:07] *** Joins: jay-m126_ (~jay-m@154.126.169.74)
[14:36:11] <wakeup> I'm learning about flask. Here https://flask.palletsprojects.com/en/2.0.x/appcontext/ it says " A corresponding application context is pushed when a request context is pushed". My question is "pushed where?"
[14:36:32] *** Joins: jay-m1261 (~jay-m@154.126.169.74)
[14:36:58] <wakeup> I think I understand the idea behind contexts, i.e. it's a way, as the name suggests, to have a context for certain variables, it's like deciding to which class a variable belongs at runtime
[14:37:08] <wakeup> but I don't understand where contexts are pushed
[14:37:33] <supakeen> If I had to take a wild guess (not entirely familiar with flask) they keep a 'list' of requests contexts (and application contexts) to handle and they push it into there were something new comes in.
[14:37:41] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[14:37:55] <supakeen> Then something else (another thread) takes it from that 'list', sets its thread-local context to those values and processes the request that way.
[14:38:29] *** Quits: bluedus__ (~bluedust@103.165.167.61) (Remote host closed the connection)
[14:39:04] *** Joins: bluedust (~bluedust@103.165.167.61)
[14:40:04] *** Joins: c4017w__ (~c4017@209.52.68.8)
[14:40:12] *** Joins: WallaceTim[m] (~wallaceti@2001:470:69fc:105::1:cf49)
[14:42:21] <jinsun__> there is a _app_ctx_stack here https://github.com/pallets/flask/blob/main/src/flask/globals.py#L53
[14:42:26] *** Quits: novns (~novns@user/novns) (Quit: ZNC - https://znc.in)
[14:43:09] <jinsun__> which is a LocalStack object from werkzeug.local
[14:43:24] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[14:43:49] *** Joins: novns (~novns@user/novns)
[14:43:50] <wakeup> so I guess supa was roughly correct
[14:43:56] <wakeup> flask maintains a stack of contexts
[14:44:25] *** Quits: bluedust (~bluedust@103.165.167.61) (Ping timeout: 256 seconds)
[14:45:09] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[14:46:55] *** Quits: spithash (~spithash@user/spithash) (Ping timeout: 240 seconds)
[14:47:01] *** Joins: beli6148 (~Thunderbi@cpe-76-175-52-6.socal.res.rr.com)
[14:47:15] *** Quits: n0cturna1 (~n0cturna1@h155173.upc-h.chello.nl) (Quit: WeeChat 3.4)
[14:47:33] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[14:47:51] *** Quits: Weldon (~Weldon@117.175.116.227) (Quit: Client closed)
[14:48:11] *** Joins: spithash (~spithash@user/spithash)
[14:48:39] *** Joins: k2ro (~k2ro@p5b175bd7.dip0.t-ipconnect.de)
[14:49:46] *** Quits: beli6147 (~Thunderbi@cpe-76-175-52-6.socal.res.rr.com) (Ping timeout: 272 seconds)
[14:49:47] *** beli6148 is now known as beli6147
[14:50:05] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[14:51:59] *** Joins: m_tadeu (~quassel@bl7-240-233.dsl.telepac.pt)
[14:52:06] *** Joins: tatsumaru (~tatsumaru@82.147.131.155)
[14:52:55] <tatsumaru> noob question: why is it that list.sort() is applied as a method while sorted(list) takes list as an argument?
[14:52:58] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fb4d-184.dhcp.inet.fi)
[14:53:08] <bjs> tatsumaru: sorted() works on more than just lists
[14:53:35] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 240 seconds)
[14:53:57] <tatsumaru> so it's more efficient to have it as a function rather than implement it as an attribute to each object?
[14:54:04] *** Quits: Amadiro (~Amadiro@191.96.180.90) (Quit: Leaving)
[14:54:29] <han-solo> also the friend "why len is a function and not a method on objects"
[14:54:30] <wakeup> also sort is in plave
[14:54:34] <wakeup> *in place
[14:54:40] <wakeup> while sorted returns a new list
[14:54:44] <wakeup> sorted I guess uses merge sort
[14:54:47] <bjs> tatsumaru: well you'd have to make everyone who writes iterable objects go and copy/paste the sorting code
[14:54:56] <wakeup> while sort probably uses quick sort
[14:54:59] <wakeup> just a guess
[14:54:59] <bjs> tatsumaru: and sorting is not an easy thing to get right, or efficient
[14:55:00] *** Quits: vin (~vin@user/crash) (Quit: WeeChat 2.8)
[14:55:35] <tatsumaru> I see, thanks
[14:55:36] <bjs> sort is not quicksort, it's a complex hybrid of other sorting algorithms
[14:56:02] *** Joins: mickey (~user@user/mickey)
[14:56:15] <bjs> to try be very fast for already- or partially- sorted data, while still being efficient for arbitrary data
[14:58:07] <wakeup> yes, I guess it might use insertion sort for small lists
[14:58:14] <wakeup> anyway, at some point, quicksort must be used
[14:58:28] <bjs> wakeup: no
[14:58:32] <bjs> there is no quicksort i believe
[14:59:01] <wakeup> really? weird
[14:59:09] <bjs> in general you don't want a sorting algorithm that is n^2 in bad cases
[14:59:15] <wakeup> if I remember correctly, C++ uses quicksort and heapsort
[14:59:31] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[14:59:40] <wakeup> bjs yes but quicksort should work very well in practice
[14:59:41] *** Joins: bluedust (~bluedust@103.165.167.61)
[14:59:49] <bjs> wakeup: it doesn't use quicksort
[15:00:46] <tatsumaru> is there a way to reverse a list without affecting the original data like with sorted()?
[15:01:57] <wakeup> https://en.wikipedia.org/wiki/Sort_(C%2B%2B)
[15:02:09] <bjs> wakeup: there's a couple of algorithms Python's list.sort()/sorted() will use,  for very small lists it'll do some insertion sort but for bigger lists it does a variation of mergesort
[15:02:17] <wakeup> well, some implementations of C++ used to have quicksort
[15:02:26] <wakeup> which in practice performs better than heapsort in many cases
[15:02:27] *** Joins: the_lanetly_052_ (~the_lanet@194.135.152.253)
[15:02:33] <wakeup> with heapsort, you need to build the heap first
[15:02:56] <nedbat> wakeup: why would sort() use a different algorithm than sorted() ?
[15:03:09] <bjs> wakeup: It seems the requirement that it be O(nlogn) would mean you can't use quicksort anymore
[15:03:13] <wakeup> bjs exactly, that's what I thought
[15:03:21] <bjs> tatsumaru: for a list you can go x[::-1]  or reversed(x)
[15:03:22] <wakeup> well, some sorting algorithms are in-place while others aren't
[15:03:42] <nedbat> wakeup: i think sorted() just makes a copy list, then sorts it.
[15:03:45] <wakeup> given that sorted returns a new list, it could be a copy indeed and the sorting algorithm could be in place on the copy
[15:04:02] <bjs> it's not really a "copy" because sorted() works on any iterable, and always returns a list
[15:04:07] <bjs> including immutable iterables
[15:04:57] <tatsumaru> more like an export then
[15:05:00] <bjs> I think sorted is just `def sorted(it): l = list(it); l.sort(); return l`
[15:05:09] <wakeup> bjs current C++ standard seems to state that sorting should be nlogn, so you can't use anymore quicksort
[15:05:13] <wakeup> but this seems kind stupid
[15:05:20] <bjs> wakeup: that's what i just said, from your link
[15:05:24] <bjs> it's not kinda stupid, it's a good idea
[15:05:35] <wakeup> yes, but I said that the previous versions of C++ used quicksort
[15:05:37] <wakeup> I had this idea
[15:06:09] <wakeup> it's not a good idea because quicksort works very well in many cases
[15:06:15] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 256 seconds)
[15:06:20] <wakeup> it only takes n^2 in the worst case
[15:06:35] *** Quits: k2ro (~k2ro@p5b175bd7.dip0.t-ipconnect.de) (Quit: k2ro)
[15:07:06] <bjs> The built-in sort functions try to be a good compromise and to get the common cases fast.
[15:08:12] <tatsumaru> bjs, why is it that sorted() returns the actual sorted list while reversed() returns some sort of object identifier?
[15:08:12] *** Quits: data68 (~data@2a02:908:a65:3d80:748b:2f3a:873a:6c23) (Ping timeout: 240 seconds)
[15:08:16] <wakeup> well, I think having guarantees and standards is a good thing
[15:08:20] <wakeup> at least you know what you get
[15:09:52] <bjs> tatsumaru: well actually building a second "copy" list you want to avoid as much as possible.  reversed() can do that, `for x in reversed(some_list):` doesn't have to make a whole copy of the list
[15:09:59] <bjs> tatsumaru: but you can't really do that for sorted(), not easily at least
[15:10:10] *** Quits: wakeup (~wakeup@user/wakeup) (Quit: Client closed)
[15:10:39] <tatsumaru> bjs why is "copying" bad?
[15:10:57] <bjs> tatsumaru: well you end up with many copies
[15:11:00] <bjs> which is wasteful
[15:11:11] <tatsumaru> isn't this how you deal with concurrency?
[15:11:22] <bjs> tatsumaru: I'm not sure I follow
[15:11:23] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[15:11:50] <tykling> I have multiple repos, each with a python package, and the packages have dependencies between them. We are writing unit tests with pytest and use Tox as testrunner. I started integrating with github actions for CI now. My tox.ini usually pulls in dependencies relative to the checkout path (so -e..mydep) but that wont work in github actions, I think I need to make it check out multiple repositories so it
[15:11:51] <tatsumaru> well in concurrent programming immutable data collections are preferred in which case you are always creating copies rather than modifying the original collection
[15:11:56] <tykling> has the deps available when Tox runs, any tips ...
[15:11:59] <tykling> ... on how?
[15:12:30] <tatsumaru> because if multiple things are working with your list you can't afford to change it
[15:12:33] <bjs> tatsumaru: yes I mean you can make a copy if you want explicitly
[15:12:42] <bjs> but isn't it better if the default is to not do that, so you can choose?
[15:12:44] <nedbat> tatsumaru: immutable data collections are more complicated than "just copy it"
[15:12:54] <nedbat> (as i understand them)
[15:13:14] <bjs> yes persistent data structures can do lots of sharing
[15:15:21] *** Joins: agumonke` (~user@37.175.254.13)
[15:15:35] *** Quits: pycode1 (~pycode3@93-40-5-81.ip36.fastwebnet.it) (Ping timeout: 256 seconds)
[15:18:37] *** Quits: eeesy (~eeesy@38.88.151.122) (Ping timeout: 240 seconds)
[15:19:33] *** Quits: milkt_ (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[15:20:24] *** Joins: eeesy (~eeesy@38.88.151.122)
[15:20:46] *** Joins: M5Q[m] (~dno5iqmat@2001:470:69fc:105::1:d05b)
[15:21:15] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[15:22:02] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[15:22:03] *** Quits: eeesy (~eeesy@38.88.151.122) (Read error: Connection reset by peer)
[15:24:03] *** Joins: eeesy (~eeesy@38.88.151.122)
[15:26:37] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[15:27:47] *** Quits: shad (~shad@user/shad) (Ping timeout: 256 seconds)
[15:29:24] *** Quits: gambl0re (~gambl0re@cpe688f2e1852a3-cm688f2e1852a0.cpe.net.cable.rogers.com) (Ping timeout: 240 seconds)
[15:29:25] *** Quits: bluedust (~bluedust@103.165.167.61) (Remote host closed the connection)
[15:30:10] *** Quits: eeesy (~eeesy@38.88.151.122) (Read error: Connection reset by peer)
[15:31:33] *** Quits: tinystoat (~squeek@user/tinystoat) (Remote host closed the connection)
[15:31:41] *** Joins: tinystoat (~squeek@user/tinystoat)
[15:32:24] *** Joins: eeesy (~eeesy@38.88.151.122)
[15:33:31] *** Joins: tmart (~tmart@47-220-163-218.gtwncmkt04.res.dyn.suddenlink.net)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:32] *** Quits: Hackerpcs (~user@user/hackerpcs) (Quit: Hackerpcs)
[15:36:46] *** Joins: sh0ne (~sh0ne@2a06:5b00:6fb:2a00:29df:1465:5942:6ffc)
[15:37:52] *** Joins: bzyx (~quassel@89-69-20-238.dynamic.chello.pl)
[15:38:10] *** Joins: bluedust (~bluedust@103.165.167.61)
[15:38:41] *** Quits: sh0ne (~sh0ne@2a06:5b00:6fb:2a00:29df:1465:5942:6ffc) (Client Quit)
[15:38:46] *** Joins: Hackerpcs (~user@user/hackerpcs)
[15:39:02] *** Quits: Hackerpcs (~user@user/hackerpcs) (Max SendQ exceeded)
[15:40:27] *** Quits: bluedust (~bluedust@103.165.167.61) (Remote host closed the connection)
[15:40:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[15:40:40] *** Quits: tinystoat (~squeek@user/tinystoat) (Quit: Reconnecting)
[15:40:48] *** Joins: tinystoat (~squeek@user/tinystoat)
[15:42:52] *** Quits: zerok (~zerok@user/zerok) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[15:43:02] *** Joins: bahamas (~lucian@84.232.140.52)
[15:43:39] *** Joins: zerok (~zerok@user/zerok)
[15:43:55] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[15:44:47] *** Quits: jmcb (~jmcb@nas47-67.york.ac.uk) (Ping timeout: 256 seconds)
[15:45:57] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.4)
[15:47:55] *** Joins: roxfan (~roxfan@2a02:a03f:a2be:4f00:e18f:706f:27a:7b36)
[15:48:32] *** Parts: tatsumaru (~tatsumaru@82.147.131.155) ()
[15:48:43] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[15:49:40] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[15:50:03] *** Joins: mei (~mei@user/mei)
[15:51:32] *** Quits: parv (~quass@user/parv) (Quit: parv)
[15:52:28] *** Quits: envex (~envex@cpe-173-91-189-33.neo.res.rr.com) (Ping timeout: 272 seconds)
[15:52:34] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 250 seconds)
[15:53:43] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[15:54:21] *** Joins: pycode1 (~pycode3@2001:b07:5d28:551:2f52:7b74:9e1d:5744)
[15:55:10] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:71e5:4f52:ed0e:7b4e)
[15:56:39] *** Quits: arooni_team_b (~arooni@li1062-244.members.linode.com) (Ping timeout: 250 seconds)
[15:56:41] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fb4d-184.dhcp.inet.fi) (Ping timeout: 256 seconds)
[15:58:23] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[15:58:42] *** Joins: Masklin__Gurder (~joel@bioinf-serv.biol.lu.se)
[15:58:58] *** Joins: Atque (~Atque@user/atque)
[15:59:56] *** Joins: arooni (~arooni@li1062-244.members.linode.com)
[16:00:23] *** Joins: shad (~shad@user/shad)
[16:00:50] *** Joins: wakeup (~wakeup@user/wakeup)
[16:03:11] <rburton> how can I tell bdist_wheel what the prefix is?  eg with install i'd use --prefix.  it appears bdist_wheel hard-codes some values.
[16:07:34] *** Quits: mei (~mei@user/mei) (Read error: Connection reset by peer)
[16:08:08] *** Joins: synaps3 (~void@user/synaps3)
[16:08:56] *** Quits: binary01 (~binary01@174.141.153.217) (Ping timeout: 272 seconds)
[16:09:45] *** Quits: lyr (~lyr@user/lyr) (Ping timeout: 256 seconds)
[16:12:51] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[16:13:24] *** Joins: Hackerpcs (~user@user/hackerpcs)
[16:13:25] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:71e5:4f52:ed0e:7b4e)
[16:13:41] *** Quits: shad (~shad@user/shad) (Ping timeout: 256 seconds)
[16:13:52] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[16:14:24] *** Joins: weibullguy (weibullguy@gateway/vpn/protonvpn/weibullguy)
[16:14:46] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:71e5:4f52:ed0e:7b4e) (Ping timeout: 260 seconds)
[16:14:55] *** Joins: leitz (~LeamHall@072-182-158-027.res.spectrum.com)
[16:15:00] *** Joins: jamea (~jamea@177.239.81.39)
[16:15:47] *** Joins: shad (~shad@user/shad)
[16:17:05] *** Joins: n0cturna1 (~n0cturna1@h155173.upc-h.chello.nl)
[16:17:18] *** Joins: Deneb (~johnch@245.82.159.143.dyn.plus.net)
[16:17:21] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[16:17:34] *** Quits: pycode1 (~pycode3@2001:b07:5d28:551:2f52:7b74:9e1d:5744) (Ping timeout: 260 seconds)
[16:17:41] *** Joins: rinzewind (~rinzewind@user/rinzewind)
[16:21:04] *** Joins: zeden (~zeden@user/zeden)
[16:21:06] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[16:21:27] *** Joins: Viewday111 (~Viewday@user/viewday)
[16:21:36] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[16:21:36] *** Viewday111 is now known as Viewday11
[16:21:46] *** Joins: pyeveryt_ (~pyeveryth@64-18-153-56.starry-inc.net)
[16:22:03] *** Quits: mlaogd^ (~mlaogd@207.243.108.170) (Remote host closed the connection)
[16:25:16] *** Joins: k2ro (~k2ro@p5b175bd7.dip0.t-ipconnect.de)
[16:25:49] *** Quits: leitz (~LeamHall@072-182-158-027.res.spectrum.com) (Quit: nappy time)
[16:26:23] *** Quits: aphysically (~aphysical@user/aphysically) (Quit: aphysically)
[16:27:49] *** Quits: weedmic (~weedmic@2a0d:6fc0:2840:200:d5c7:b64a:7be4:b6c7) (Read error: Connection reset by peer)
[16:29:12] *** Joins: shibboleth (~shibbolet@user/shibboleth)
[16:30:12] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[16:30:39] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[16:31:05] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[16:31:28] *** Joins: wyclif (~wyclif@user/wyclif)
[16:31:57] *** Joins: weedmic (~weedmic@2a0d:6fc0:2840:200:d5c7:b64a:7be4:b6c7)
[16:33:48] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Ping timeout: 240 seconds)
[16:35:15] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[16:35:20] *** Joins: leitz (~LeamHall@072-182-158-027.res.spectrum.com)
[16:36:25] *** Joins: slav0nic (slav0nic@python.su)
[16:38:32] *** Quits: alius (~alius@2001:861:4444:49c0:94de:8eb6:7193:6d62) (Quit: Leaving)
[16:40:37] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[16:41:13] *** Joins: Seto_Kaiba (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3)
[16:41:14] *** Joins: c4017w__ (~c4017@209.52.68.8)
[16:42:32] *** Joins: rsx (~dummy@ppp-188-174-132-175.dynamic.mnet-online.de)
[16:43:08] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[16:43:37] *** Joins: wyclif (~wyclif@user/wyclif)
[16:43:55] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:44:08] *** Quits: Hunterkll (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3) (Ping timeout: 250 seconds)
[16:44:36] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[16:45:07] *** Joins: merrinx (~merrinx@ti0028a400-3686.bb.online.no)
[16:47:00] *** Joins: bluedust (~bluedust@103.165.167.61)
[16:47:13] *** Quits: k2ro (~k2ro@p5b175bd7.dip0.t-ipconnect.de) (Quit: k2ro)
[16:47:33] *** Joins: k2ro (~k2ro@p5b175bd7.dip0.t-ipconnect.de)
[16:47:46] *** Joins: tribo (~tribo@p5b0fb69c.dip0.t-ipconnect.de)
[16:47:56] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[16:48:31] *** Quits: herjazz (~herjazz@p10513117-ipngn24101marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[16:49:20] <taeaad> I have a logger that I can set a directory to, log file to, and log to it. Then, I have an API that logs to my console. This call does not log to the same log file. Is there something standard that I am missing? Do I need to assign standard out to the log file too?
[16:51:29] *** Quits: k2ro (~k2ro@p5b175bd7.dip0.t-ipconnect.de) (Client Quit)
[16:51:37] <tribo> why is the result df.quantile([0.25]) from [5, 50, 100, 200] =  38.75?
[16:51:52] *** Joins: k2ro (~k2ro@p5b175bd7.dip0.t-ipconnect.de)
[16:51:58] *** Quits: leitz (~LeamHall@072-182-158-027.res.spectrum.com) (Quit: nappy time)
[16:52:49] *** Joins: bahamas (~lucian@84.232.140.52)
[16:53:05] <taeaad> I should maybe add that the API call uses a function from a library, so I can't change it easily.
[16:54:04] *** Quits: k2ro (~k2ro@p5b175bd7.dip0.t-ipconnect.de) (Client Quit)
[16:54:05] *** Joins: bloody (~bloody@user/bloody)
[16:54:39] *** Joins: sh0ne (~sh0ne@2a06:5b00:6fb:2a00:6864:4f02:315:158c)
[16:54:44] <Payam92> Hi, I get a segmentation fault when running my application . These are the traceback and related files : https://bpa.st/O6MQ
[16:54:47] <Payam92> Can someone help?
[16:54:58] <nedbat> i never noticed that the reference manual mentions Pascal to explain what for-range does: https://docs.python.org/3/reference/compound_stmts.html#for
[16:55:30] *** Joins: evlc (~evlc@l37-193-63-15.novotelecom.ru)
[16:56:17] *** Joins: aknot (~aknot@2603:900a:1503:17bb:5fdd:1d53:b602:2e69)
[16:57:26] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 245 seconds)
[16:57:53] <mrwick> looks like Pascal is mentioned in other places too: https://docs.python.org/3/search.html?q=Pascal&check_keywords=yes&area=default
[16:58:13] *** Quits: stockh0lm (~Andreas@p200300d2c70bf80011ea30bacc71c432.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[16:58:21] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:8151:9b0d:b8cd:32c4)
[16:58:21] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:8151:9b0d:b8cd:32c4) (Changing host)
[16:58:21] *** Joins: skapata (~Skapata@user/skapata)
[16:59:27] *** Joins: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be)
[16:59:41] *** Joins: leitz (~LeamHall@072-182-158-027.res.spectrum.com)
[17:00:17] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[17:01:04] *** Quits: Deneb (~johnch@245.82.159.143.dyn.plus.net) (*.net *.split)
[17:01:04] *** Quits: agumonke` (~user@37.175.254.13) (*.net *.split)
[17:01:04] *** Quits: the_lanetly_052_ (~the_lanet@194.135.152.253) (*.net *.split)
[17:01:04] *** Quits: esther (~esther@24-155-112-236.dyn.grandenetworks.net) (*.net *.split)
[17:01:04] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (*.net *.split)
[17:01:04] *** Quits: gurkenglas (~gurkengla@dslb-188-096-121-068.188.096.pools.vodafone-ip.de) (*.net *.split)
[17:01:04] *** Quits: Cyp (~cyp@213.237.85.100) (*.net *.split)
[17:01:04] *** Quits: amogorkon (~amogorkon@port-92-196-27-200.dynamic.as20676.net) (*.net *.split)
[17:01:04] *** Quits: malvin (malvin@2a01:7e00::f03c:93ff:fef1:5307) (*.net *.split)
[17:01:04] *** Quits: spetrosi (~spetrosi@2a02:8308:b:ec00:e1ce:d7b:6a8f:f189) (*.net *.split)
[17:01:04] *** Quits: strugee (~strugee@2602:ffc5:200:4900::1) (*.net *.split)
[17:01:04] *** Quits: tableflip (~tableflip@121.99.197.93) (*.net *.split)
[17:01:04] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (*.net *.split)
[17:01:04] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (*.net *.split)
[17:01:04] *** Quits: sentriz (~sentriz@109.255.139.98) (*.net *.split)
[17:01:04] *** Quits: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net) (*.net *.split)
[17:01:04] *** Quits: kmh (~kmh@2a00:6020:5004:6800:75b3:49e:f05a:4982) (*.net *.split)
[17:01:04] *** Quits: ripdog (~quassel@user/ripdog) (*.net *.split)
[17:01:04] *** Quits: wolfshappen_ (~waff@irc.furworks.de) (*.net *.split)
[17:01:04] *** Quits: Joel (~jjshoe@user/joel) (*.net *.split)
[17:01:04] *** Quits: loofy (~loofy@user/loofy) (*.net *.split)
[17:01:04] *** Quits: Fossil (~Fossil@95.85.23.165) (*.net *.split)
[17:01:04] *** Quits: dhellmann (~dhellmann@097-081-099-073.res.spectrum.com) (*.net *.split)
[17:01:04] *** Quits: Mechanismus (~LabMonkey@206.255.106.67) (*.net *.split)
[17:01:04] *** Quits: jdmark (~jdmark@user/jdmark) (*.net *.split)
[17:01:04] *** Quits: [RiFo] (~RiFo@user/rifo) (*.net *.split)
[17:01:04] *** Quits: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com) (*.net *.split)
[17:01:04] *** Quits: enkrypt (~enkrypt@user/enkrypt) (*.net *.split)
[17:01:04] *** Quits: theo (~theo@user/theo) (*.net *.split)
[17:01:04] *** Quits: groundboi (~groundboi@user/groundboi) (*.net *.split)
[17:01:04] *** Quits: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2) (*.net *.split)
[17:01:04] *** Quits: Techcable (~Techcable@168.235.93.147) (*.net *.split)
[17:01:04] *** Quits: pulec (~pulec@user/pulec) (*.net *.split)
[17:01:04] *** Quits: madprops (hj8oijo@user/madprops) (*.net *.split)
[17:01:04] *** Quits: pyre (~pyre@crimeboss.nillas-power.com) (*.net *.split)
[17:01:04] *** Quits: MJ94 (mj94@user/mj94) (*.net *.split)
[17:01:04] *** Quits: Vision-_- (~Vision@097-087-115-181.res.spectrum.com) (*.net *.split)
[17:01:04] *** Quits: Belxjander (~Belxjande@p1575007-ipoe.ipoe.ocn.ne.jp) (*.net *.split)
[17:01:04] *** Quits: swistak (~swistak@185.21.216.141) (*.net *.split)
[17:01:04] *** Quits: _mantra (~mantra@216.73.163.13) (*.net *.split)
[17:01:04] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (*.net *.split)
[17:01:04] *** Quits: kiryin (~kiryin@2001:999:62:88ed:bd4f:553a:8989:c61f) (*.net *.split)
[17:01:04] *** Quits: rawrrr (uid540880@id-540880.lymington.irccloud.com) (*.net *.split)
[17:01:04] *** Quits: shailangsa (~shailangs@host86-186-133-59.range86-186.btcentralplus.com) (*.net *.split)
[17:01:04] *** Quits: kadobanana (~mud@user/kadoban) (*.net *.split)
[17:01:04] *** Quits: sleepingforest (~sleepingf@pool-96-235-63-235.pitbpa.east.verizon.net) (*.net *.split)
[17:01:04] *** Quits: Sadale (~Sadale@user/sadale) (*.net *.split)
[17:01:04] *** Quits: Dantali0n (~Dantali0n@2a10:3781:15ed::2003) (*.net *.split)
[17:01:04] *** Quits: stoneware (~stoneware@user/stoneware) (*.net *.split)
[17:01:04] *** Quits: luva (~luva@185.168.9.242) (*.net *.split)
[17:01:04] *** Quits: nepeat (~nepeat@79.110.170.59) (*.net *.split)
[17:01:04] *** Quits: swinnenb (~swinnenb@user/swinnenb) (*.net *.split)
[17:01:04] *** Quits: uuair (~quassel@user/uuair) (*.net *.split)
[17:01:04] *** Quits: Echoz (~chris@user/echoz) (*.net *.split)
[17:01:04] *** Quits: auri (~quassel@fsf/member/auri) (*.net *.split)
[17:01:04] *** Quits: opcode (~opcode@user/opcode) (*.net *.split)
[17:01:04] *** Quits: baakeydow (~baake@2001:41d0:203:b12c::) (*.net *.split)
[17:01:04] *** Quits: launchd (launchd@bitbot/launchd) (*.net *.split)
[17:01:04] *** Quits: _--_ (~csurlee@user/morfeus) (*.net *.split)
[17:01:04] *** Quits: el_kevino (~mote@2604:a880:400:d1::901:5001) (*.net *.split)
[17:01:04] *** Quits: yano (~yano@ircpuzzles/staff/yano) (*.net *.split)
[17:01:04] *** Quits: dob1 (~dob1@user/dob1) (*.net *.split)
[17:01:04] *** Quits: willow (~willow@user/willow) (*.net *.split)
[17:01:04] *** Quits: derelict (derelict@user/derelict) (*.net *.split)
[17:01:04] *** Quits: jab416171 (~jab416171@c-67-161-208-65.hsd1.ut.comcast.net) (*.net *.split)
[17:01:04] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (*.net *.split)
[17:01:04] *** Quits: kristjansson (sid126207@id-126207.tinside.irccloud.com) (*.net *.split)
[17:01:04] *** Quits: newdimension (~newdimens@user/newdimension) (*.net *.split)
[17:01:04] *** Quits: HenryG (~quassel@2607:5300:201:3000::f63) (*.net *.split)
[17:01:04] *** Quits: hays (rootvegeta@fsf/member/hays) (*.net *.split)
[17:01:04] *** Quits: qwedfg (~qwedfg@user/qwedfg) (*.net *.split)
[17:01:04] *** Quits: osxtra (~root@2605:a601:aa30:fe00::83a2:6799) (*.net *.split)
[17:01:04] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:aaa1:59ff:fe3c:ddb4) (*.net *.split)
[17:01:04] *** Quits: notevil (~notevil@user/notevil) (*.net *.split)
[17:01:04] *** Quits: rdz (~roman@2001:620:120:1::12) (*.net *.split)
[17:01:04] *** Quits: funabashi (~funabashi@2a00:d880:5:7d4::dc26) (*.net *.split)
[17:01:04] *** Quits: catbeard (~noise@user/catbeard) (*.net *.split)
[17:01:04] *** Quits: NiKaN (sid385034@id-385034.helmsley.irccloud.com) (*.net *.split)
[17:01:04] *** Quits: quesker (idnet@2600:3c01::f03c:91ff:feac:4ce2) (*.net *.split)
[17:01:04] *** Quits: sunyibo (~dorsch@2a04:52c0:101:443::) (*.net *.split)
[17:01:04] *** Quits: elichai2 (sid212594@2a03:5180:f:4::3:3e72) (*.net *.split)
[17:01:04] *** Quits: eichin (sid27120@2a03:5180:f::69f0) (*.net *.split)
[17:01:04] *** Quits: ThothCastel (sid78195@2a03:5180:f::1:3173) (*.net *.split)
[17:01:04] *** Quits: Evolver (sid32215@user/evolver) (*.net *.split)
[17:01:04] *** Quits: Dan39 (~dan@user/dan39) (*.net *.split)
[17:01:04] *** Quits: erry (~erry@errietta.me) (*.net *.split)
[17:01:04] *** Quits: dodo (~dodo@user/dodo) (*.net *.split)
[17:01:04] *** Quits: zoraj_ (~zoraj@209.126.81.159) (*.net *.split)
[17:01:04] *** Quits: MrC (Ben@mrbenc.net) (*.net *.split)
[17:01:04] *** Quits: sunny93 (~sunny93@wireguard/tunneler/sunny93) (*.net *.split)
[17:01:04] *** Quits: t2mkn (~t2mkn@user/t2mkn) (*.net *.split)
[17:01:04] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (*.net *.split)
[17:01:04] *** Quits: TML (~tml@user/tml) (*.net *.split)
[17:01:04] *** Quits: onur (~onur@user/onur) (*.net *.split)
[17:01:04] *** Quits: Buliarous (~gypsydang@46.232.210.139) (*.net *.split)
[17:01:04] *** Quits: Tashtari (~tashtari@user/tashtari) (*.net *.split)
[17:01:04] *** Quits: nucleargrave (~nucleargr@user/nuclearg1) (*.net *.split)
[17:01:04] *** Quits: Malin (~CIA@pirate.pt) (*.net *.split)
[17:01:04] *** Quits: BtbN (btbn@ffmpeg/developer/btbn) (*.net *.split)
[17:01:04] *** Quits: noyb (~noyb@user/noyb) (*.net *.split)
[17:01:04] *** Quits: postal_blab (~quassel@2a01:4f8:202:53d9::bad:deed) (*.net *.split)
[17:01:04] *** Quits: cren (cren@tilde.team) (*.net *.split)
[17:01:04] *** Quits: dfch (~dfch@user/dfch) (*.net *.split)
[17:01:04] *** Quits: jant (~jant@pavlov.tiddo.net) (*.net *.split)
[17:01:04] *** Quits: iwkse (~iwkse@iurit.com) (*.net *.split)
[17:01:04] *** Quits: ezakimak (~ezakimak@c-174-52-132-123.hsd1.ut.comcast.net) (*.net *.split)
[17:01:04] *** Quits: EsoAlgo (~EsoAlgo@152.70.142.52) (*.net *.split)
[17:01:04] *** Quits: ssiyad (~ssiyad@user/ssiyad) (*.net *.split)
[17:01:04] *** Quits: klotzhauer (~klotzhaue@gibtesnochklopapier.de) (*.net *.split)
[17:01:04] *** Quits: m42e (~m42e@pb42.de) (*.net *.split)
[17:01:04] *** Quits: themill (~stuart@debian/stuart) (*.net *.split)
[17:01:04] *** Quits: sangy (~sangy@archlinux/trusteduser/sangy) (*.net *.split)
[17:01:04] *** Quits: dstein64 (~dstein64@dannyadam.com) (*.net *.split)
[17:01:04] *** Quits: dv^_^ (~dv@eclipse.oxfordfun.com) (*.net *.split)
[17:01:04] *** Quits: trashcatt (~trashcatt@znc.trashcat.xyz) (*.net *.split)
[17:01:04] *** Quits: eN_Joy (~eN_Joy@wsip-72-213-93-155.ok.ok.cox.net) (*.net *.split)
[17:01:04] *** Quits: pacbard (~pacbard@user/pacbard) (*.net *.split)
[17:01:04] *** Quits: dav1d (~dav1d@user/dav1d) (*.net *.split)
[17:01:04] *** Quits: bdiddy_ (~bdiddy@li654-123.members.linode.com) (*.net *.split)
[17:01:04] *** Quits: euidzero_ (~euidzero@158.101.10.150) (*.net *.split)
[17:01:04] *** Quits: alexyov (~alexyov@79.124.0.2) (*.net *.split)
[17:01:04] *** Quits: zwindl (~abc@user/abc) (*.net *.split)
[17:01:04] *** Quits: nbin_ (~nbin@user/nbin) (*.net *.split)
[17:01:04] *** Quits: tdsmith (~tdsmith@kvm.kumokasumi.org) (*.net *.split)
[17:01:04] *** Quits: simon816 (~simon816@ec2-35-178-246-72.eu-west-2.compute.amazonaws.com) (*.net *.split)
[17:01:04] *** Quits: {4144} (~{4144}@46.56.68.191) (*.net *.split)
[17:01:04] *** Quits: timmot (~timmot@207.148.85.201) (*.net *.split)
[17:01:04] *** Quits: easter_egg (~jeffry@85.17.16.26) (*.net *.split)
[17:01:04] *** Quits: deepy (deepy@user/deepy) (*.net *.split)
[17:01:04] *** Quits: ornxka (~ornxka@user/ornxka) (*.net *.split)
[17:01:04] *** Quits: srji (~srji@static.43.141.203.116.clients.your-server.de) (*.net *.split)
[17:01:04] *** Quits: fuz (~fuz@user/fuz) (*.net *.split)
[17:01:04] *** Quits: MightyMu (~MightyMu@104.131.138.31) (*.net *.split)
[17:01:04] *** Quits: mingdao (~mingdao@wireguard/tunneler/mingdao) (*.net *.split)
[17:02:30] *** Joins: Deneb (~johnch@245.82.159.143.dyn.plus.net)
[17:02:30] *** Joins: agumonke` (~user@37.175.254.13)
[17:02:30] *** Joins: the_lanetly_052_ (~the_lanet@194.135.152.253)
[17:02:30] *** Joins: esther (~esther@24-155-112-236.dyn.grandenetworks.net)
[17:02:30] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[17:02:30] *** Joins: gurkenglas (~gurkengla@dslb-188-096-121-068.188.096.pools.vodafone-ip.de)
[17:02:30] *** Joins: Cyp (~cyp@213.237.85.100)
[17:02:30] *** Joins: amogorkon (~amogorkon@port-92-196-27-200.dynamic.as20676.net)
[17:02:30] *** Joins: malvin (malvin@2a01:7e00::f03c:93ff:fef1:5307)
[17:02:30] *** Joins: spetrosi (~spetrosi@2a02:8308:b:ec00:e1ce:d7b:6a8f:f189)
[17:02:30] *** Joins: strugee (~strugee@2602:ffc5:200:4900::1)
[17:02:30] *** Joins: tableflip (~tableflip@121.99.197.93)
[17:02:30] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[17:02:30] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[17:02:30] *** Joins: sentriz (~sentriz@109.255.139.98)
[17:02:30] *** Joins: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net)
[17:02:30] *** Joins: kmh (~kmh@2a00:6020:5004:6800:75b3:49e:f05a:4982)
[17:02:30] *** Joins: ripdog (~quassel@user/ripdog)
[17:02:30] *** Joins: wolfshappen_ (~waff@irc.furworks.de)
[17:02:30] *** Joins: Joel (~jjshoe@user/joel)
[17:02:30] *** Joins: loofy (~loofy@user/loofy)
[17:02:30] *** Joins: Fossil (~Fossil@95.85.23.165)
[17:02:30] *** Joins: dhellmann (~dhellmann@097-081-099-073.res.spectrum.com)
[17:02:30] *** Joins: Mechanismus (~LabMonkey@206.255.106.67)
[17:02:30] *** Joins: jdmark (~jdmark@user/jdmark)
[17:02:30] *** Joins: [RiFo] (~RiFo@user/rifo)
[17:02:30] *** Joins: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com)
[17:02:30] *** Joins: enkrypt (~enkrypt@user/enkrypt)
[17:02:30] *** Joins: theo (~theo@user/theo)
[17:02:30] *** Joins: groundboi (~groundboi@user/groundboi)
[17:02:30] *** Joins: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2)
[17:02:30] *** Joins: Techcable (~Techcable@168.235.93.147)
[17:02:30] *** Joins: pulec (~pulec@user/pulec)
[17:02:30] *** Joins: madprops (hj8oijo@user/madprops)
[17:02:30] *** Joins: pyre (~pyre@crimeboss.nillas-power.com)
[17:02:30] *** Joins: MJ94 (mj94@user/mj94)
[17:02:30] *** Joins: Vision-_- (~Vision@097-087-115-181.res.spectrum.com)
[17:02:30] *** Joins: Belxjander (~Belxjande@p1575007-ipoe.ipoe.ocn.ne.jp)
[17:02:30] *** Joins: swistak (~swistak@185.21.216.141)
[17:02:30] *** Joins: _mantra (~mantra@216.73.163.13)
[17:02:30] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[17:02:30] *** Joins: kiryin (~kiryin@2001:999:62:88ed:bd4f:553a:8989:c61f)
[17:02:30] *** Joins: rawrrr (uid540880@id-540880.lymington.irccloud.com)
[17:02:30] *** Joins: shailangsa (~shailangs@host86-186-133-59.range86-186.btcentralplus.com)
[17:02:30] *** Joins: willow (~willow@user/willow)
[17:02:30] *** Joins: kadobanana (~mud@user/kadoban)
[17:02:30] *** Joins: sleepingforest (~sleepingf@pool-96-235-63-235.pitbpa.east.verizon.net)
[17:02:30] *** Joins: Sadale (~Sadale@user/sadale)
[17:02:30] *** Joins: Dantali0n (~Dantali0n@2a10:3781:15ed::2003)
[17:02:30] *** Joins: stoneware (~stoneware@user/stoneware)
[17:02:30] *** Joins: luva (~luva@185.168.9.242)
[17:02:30] *** Joins: opcode (~opcode@user/opcode)
[17:02:30] *** Joins: nepeat (~nepeat@79.110.170.59)
[17:02:30] *** Joins: swinnenb (~swinnenb@user/swinnenb)
[17:02:30] *** Joins: uuair (~quassel@user/uuair)
[17:02:30] *** Joins: Echoz (~chris@user/echoz)
[17:02:30] *** Joins: auri (~quassel@fsf/member/auri)
[17:02:30] *** Joins: baakeydow (~baake@2001:41d0:203:b12c::)
[17:02:30] *** Joins: launchd (launchd@bitbot/launchd)
[17:02:30] *** Joins: _--_ (~csurlee@user/morfeus)
[17:02:30] *** Joins: el_kevino (~mote@2604:a880:400:d1::901:5001)
[17:02:30] *** Joins: yano (~yano@ircpuzzles/staff/yano)
[17:02:30] *** Joins: dob1 (~dob1@user/dob1)
[17:02:30] *** Joins: derelict (derelict@user/derelict)
[17:02:30] *** Joins: jab416171 (~jab416171@c-67-161-208-65.hsd1.ut.comcast.net)
[17:02:30] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[17:02:30] *** Joins: kristjansson (sid126207@id-126207.tinside.irccloud.com)
[17:02:30] *** Joins: newdimension (~newdimens@user/newdimension)
[17:02:30] *** Joins: HenryG (~quassel@2607:5300:201:3000::f63)
[17:02:30] *** Joins: hays (rootvegeta@fsf/member/hays)
[17:02:30] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[17:02:30] *** Joins: osxtra (~root@2605:a601:aa30:fe00::83a2:6799)
[17:02:30] *** Joins: ElPresidente (~ElPreside@2600:1700:3d10:4870:aaa1:59ff:fe3c:ddb4)
[17:02:30] *** Joins: notevil (~notevil@user/notevil)
[17:02:30] *** Joins: rdz (~roman@2001:620:120:1::12)
[17:02:30] *** Joins: funabashi (~funabashi@2a00:d880:5:7d4::dc26)
[17:02:30] *** Joins: elichai2 (sid212594@2a03:5180:f:4::3:3e72)
[17:02:30] *** Joins: catbeard (~noise@user/catbeard)
[17:02:30] *** Joins: NiKaN (sid385034@id-385034.helmsley.irccloud.com)
[17:02:30] *** Joins: quesker (idnet@2600:3c01::f03c:91ff:feac:4ce2)
[17:02:30] *** Joins: sunyibo (~dorsch@2a04:52c0:101:443::)
[17:02:30] *** Joins: eichin (sid27120@2a03:5180:f::69f0)
[17:02:30] *** Joins: ThothCastel (sid78195@2a03:5180:f::1:3173)
[17:02:30] *** Joins: Evolver (sid32215@user/evolver)
[17:02:30] *** Joins: ornxka (~ornxka@user/ornxka)
[17:02:30] *** Joins: Dan39 (~dan@user/dan39)
[17:02:30] *** Joins: erry (~erry@errietta.me)
[17:02:30] *** Joins: dodo (~dodo@user/dodo)
[17:02:30] *** Joins: zoraj_ (~zoraj@209.126.81.159)
[17:02:30] *** Joins: MrC (Ben@mrbenc.net)
[17:02:30] *** Joins: sunny93 (~sunny93@wireguard/tunneler/sunny93)
[17:02:30] *** Joins: t2mkn (~t2mkn@user/t2mkn)
[17:02:30] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[17:02:30] *** Joins: TML (~tml@user/tml)
[17:02:30] *** Joins: onur (~onur@user/onur)
[17:02:30] *** Joins: Buliarous (~gypsydang@46.232.210.139)
[17:02:30] *** Joins: nucleargrave (~nucleargr@user/nuclearg1)
[17:02:30] *** Joins: Tashtari (~tashtari@user/tashtari)
[17:02:30] *** Joins: Malin (~CIA@pirate.pt)
[17:02:30] *** Joins: BtbN (btbn@ffmpeg/developer/btbn)
[17:02:30] *** Joins: noyb (~noyb@user/noyb)
[17:02:30] *** Joins: postal_blab (~quassel@2a01:4f8:202:53d9::bad:deed)
[17:02:30] *** Joins: cren (cren@tilde.team)
[17:02:30] *** Joins: dfch (~dfch@user/dfch)
[17:02:30] *** Joins: jant (~jant@pavlov.tiddo.net)
[17:02:30] *** Joins: iwkse (~iwkse@iurit.com)
[17:02:30] *** Joins: ezakimak (~ezakimak@c-174-52-132-123.hsd1.ut.comcast.net)
[17:02:30] *** Joins: EsoAlgo (~EsoAlgo@152.70.142.52)
[17:02:30] *** Joins: ssiyad (~ssiyad@user/ssiyad)
[17:02:30] *** Joins: klotzhauer (~klotzhaue@gibtesnochklopapier.de)
[17:02:30] *** Joins: m42e (~m42e@pb42.de)
[17:02:30] *** Joins: themill (~stuart@debian/stuart)
[17:02:30] *** Joins: sangy (~sangy@archlinux/trusteduser/sangy)
[17:02:30] *** Joins: dstein64 (~dstein64@dannyadam.com)
[17:02:30] *** Joins: dv^_^ (~dv@eclipse.oxfordfun.com)
[17:02:30] *** Joins: trashcatt (~trashcatt@znc.trashcat.xyz)
[17:02:30] *** Joins: eN_Joy (~eN_Joy@wsip-72-213-93-155.ok.ok.cox.net)
[17:02:30] *** Joins: pacbard (~pacbard@user/pacbard)
[17:02:30] *** Joins: dav1d (~dav1d@user/dav1d)
[17:02:30] *** Joins: bdiddy_ (~bdiddy@li654-123.members.linode.com)
[17:02:30] *** Joins: euidzero_ (~euidzero@158.101.10.150)
[17:02:30] *** Joins: alexyov (~alexyov@79.124.0.2)
[17:02:30] *** Joins: zwindl (~abc@user/abc)
[17:02:30] *** Joins: nbin_ (~nbin@user/nbin)
[17:02:30] *** Joins: tdsmith (~tdsmith@kvm.kumokasumi.org)
[17:02:30] *** Joins: simon816 (~simon816@ec2-35-178-246-72.eu-west-2.compute.amazonaws.com)
[17:02:30] *** Joins: {4144} (~{4144}@46.56.68.191)
[17:02:30] *** Joins: timmot (~timmot@207.148.85.201)
[17:02:30] *** Joins: easter_egg (~jeffry@85.17.16.26)
[17:02:30] *** Joins: deepy (deepy@user/deepy)
[17:02:30] *** Joins: srji (~srji@static.43.141.203.116.clients.your-server.de)
[17:02:30] *** Joins: fuz (~fuz@user/fuz)
[17:02:30] *** Joins: MightyMu (~MightyMu@104.131.138.31)
[17:02:30] *** Joins: mingdao (~mingdao@wireguard/tunneler/mingdao)
[17:03:16] *** Quits: strugee (~strugee@2602:ffc5:200:4900::1) (Max SendQ exceeded)
[17:03:16] *** Quits: nepeat (~nepeat@79.110.170.59) (Max SendQ exceeded)
[17:03:16] *** Quits: luva (~luva@185.168.9.242) (Max SendQ exceeded)
[17:03:16] *** Quits: Joel (~jjshoe@user/joel) (Max SendQ exceeded)
[17:03:16] *** Quits: euidzero_ (~euidzero@158.101.10.150) (Max SendQ exceeded)
[17:03:16] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (Max SendQ exceeded)
[17:03:16] *** Quits: Techcable (~Techcable@168.235.93.147) (Max SendQ exceeded)
[17:03:16] *** Quits: Malin (~CIA@pirate.pt) (Max SendQ exceeded)
[17:03:16] *** Quits: stoneware (~stoneware@user/stoneware) (Max SendQ exceeded)
[17:03:16] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Max SendQ exceeded)
[17:03:16] *** Quits: shailangsa (~shailangs@host86-186-133-59.range86-186.btcentralplus.com) (Max SendQ exceeded)
[17:03:16] *** Quits: dob1 (~dob1@user/dob1) (Max SendQ exceeded)
[17:03:16] *** Quits: deepy (deepy@user/deepy) (Max SendQ exceeded)
[17:03:16] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Max SendQ exceeded)
[17:03:16] *** Quits: wolfshappen_ (~waff@irc.furworks.de) (Max SendQ exceeded)
[17:03:16] *** Quits: ssiyad (~ssiyad@user/ssiyad) (Max SendQ exceeded)
[17:03:24] *** Joins: ssiyad (~ssiyad@user/ssiyad)
[17:03:24] *** Joins: Techcable (~Techcable@168.235.93.147)
[17:03:30] *** Joins: Guest5436 (~Guest54@2620:10d:c092:400::4:9837)
[17:03:32] *** Joins: wolfshappen (~waff@irc.furworks.de)
[17:03:33] *** Joins: Malin (lounge@pirate.pt)
[17:03:35] *** Joins: euidzero (~euidzero@158.101.10.150)
[17:03:35] *** Joins: dob1 (~dob1@user/dob1)
[17:03:35] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[17:03:40] *** Joins: stoneware (~stoneware@user/stoneware)
[17:03:53] *** Joins: nepeat (~nepeat@79.110.170.59)
[17:03:53] *** Joins: luva (~luva@185.168.9.242)
[17:04:07] *** Joins: Joel (~jjshoe@user/joel)
[17:04:07] *** Joins: deepy (deepy@user/deepy)
[17:04:09] *** Joins: Siecje (~Siecje@97.111.200.32)
[17:04:24] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[17:04:46] <Guest5436> hey folks, I have a function that goes through a directory, extracts some stuff from the files it, and does some logic. I would like to unit-test, not sure how to do the file part. Should I test against an actual dir, or is there a way to create a temp dir?
[17:05:01] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[17:05:32] <Siecje> Why is it important to pass arguments when logging instead of a string? https://vald-phoenix.github.io/pylint-errors/plerr/errors/logging/W1202.html
[17:05:41] <Guest5436> I can't pytest (working at company), we only use native python3.5 and unittest module
[17:05:54] *** Joins: strugee (~strugee@2602:ffc5:200:4900::1)
[17:05:56] <j0hn_mc_clane> you could mock the file stream
[17:05:56] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[17:06:17] *** Quits: esther (~esther@24-155-112-236.dyn.grandenetworks.net) (Ping timeout: 240 seconds)
[17:06:38] *** Joins: vladoski (~vladoski@2001:b07:add:d406:3f91:d489:96a3:e23b)
[17:06:45] <InPhase> Guest5436: Approaches vary, but I usually create a fixed dummy directory with fixed content to follow the testing files around for that sort of thing.
[17:06:57] *** Quits: NiKaN (sid385034@id-385034.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[17:07:13] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[17:07:34] *** Joins: esther (~esther@24-155-112-236.dyn.grandenetworks.net)
[17:08:09] *** Joins: NiKaN (sid385034@id-385034.helmsley.irccloud.com)
[17:08:24] *** Joins: c4017w__ (~c4017@209.52.68.8)
[17:08:26] <InPhase> Guest5436: If the routine being tested mutates contents, you have to be more careful and clever.  But when it's a read/process test, fixed content is the safest.
[17:08:45] <Guest5436> hmm okay
[17:08:57] <Guest5436> I was hoping there was a built in utility like tempfile or something
[17:09:14] <j0hn_mc_clane> why would there be
[17:09:20] <mgedmin> there is
[17:09:30] <mgedmin> you can use tempfile.TemporaryDirectory() as a context manager
[17:09:32] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[17:09:47] <j0hn_mc_clane> yeah ok, but it is just a binding as to ease the pain of creation and deletion when out of scope
[17:09:57] *** Joins: Hunterkll (~hunterkll@remote.kisaracorporation.com)
[17:10:00] <mgedmin> or you can tempfile.mkdtemp() in your test setUp() and shutil.rmtree() it in your test tearDown()
[17:10:45] <mgedmin> for read-only on-disk test fixtures it might be enough to have it in your source tree somewhere; you can find the location by using __file__ in your test module
[17:10:52] *** Joins: rickybob2 (~rickybob@gateway/vpn/pia/rickybob)
[17:10:56] <mgedmin> did python 3.5 (please upgrade please upgrade please) have pathlib?
[17:11:19] <mgedmin> in any case a bunch of os.path.dirname()/os.path.join() combined with __file__ can give you relative pathnames
[17:11:33] * mgedmin strokes beard
[17:11:40] <mgedmin> this is how we had to live before we had pytest and pathlib, you know
[17:12:04] <j0hn_mc_clane> wasnt it added in 3.6?
[17:12:12] *** Joins: sambauer64 (~sambauer6@5-12-118-53.residential.rdsnet.ro)
[17:12:31] <InPhase> Guest5436: Here's an example of a testing hazard:  You have a file manipulation test which deletes a file and then creates it again, and you compare the contents to a known value.  Then the deletion malfunctions AND the file creation malfunctions, and your test still passes.  This sort of thing does go wrong in the real world, so be careful with test-cycles of manipulating persistent state.
[17:12:33] <Guest5436> ah cool it exists :)
[17:12:36] <mgedmin> oh, advice: pass prefix='yourthing-sometestid-' to tempfile.mkdtemp() because eventually your /tmp will be full of annoying tmpXXXXXXX directories and you'll want to know which test forgot to clean up
[17:12:38] *** Quits: Seto_Kaiba (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3) (Ping timeout: 260 seconds)
[17:12:56] <Guest5436> yeah that's why temp files seem like a better option
[17:13:07] * mgedmin had to set up a cron job to wipe these tmp dirs on a buildbot server so they wouldn't fill up his /tmp partition ... 15 years ago
[17:13:10] *** Parts: sambauer64 (~sambauer6@5-12-118-53.residential.rdsnet.ro) ()
[17:14:01] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 256 seconds)
[17:15:55] <j0hn_mc_clane> well we have to do the same thing, but with docker images
[17:16:08] <j0hn_mc_clane> server gets crammed by dangling images
[17:16:12] <exarkun> You can control where tempfile puts files with TEMPDIR.  So you can put all of the temp files from your test run into a single directory to keep or delete as you like.
[17:16:13] <j0hn_mc_clane> so we have to prune it every day
[17:16:34] <exarkun> And/or you can use a test runner that does this automatically for you
[17:16:43] *** Joins: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr)
[17:17:36] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[17:18:16] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:71e5:4f52:ed0e:7b4e)
[17:18:50] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[17:19:08] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[17:20:46] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:71e5:4f52:ed0e:7b4e) (Ping timeout: 245 seconds)
[17:21:04] *** Quits: evlc (~evlc@l37-193-63-15.novotelecom.ru) (Quit: WeeChat 3.4)
[17:22:16] *** Quits: pyeveryt_ (~pyeveryth@64-18-153-56.starry-inc.net) (Remote host closed the connection)
[17:22:20] *** Quits: noteness (~noteness@user/noteness) (Remote host closed the connection)
[17:22:41] <jinsun__> tribo: (50 * 0.25 + 5 * (1/3 - 0.25)) * 3
[17:22:48] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[17:23:07] *** Joins: noteness (~noteness@user/noteness)
[17:24:22] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[17:24:37] *** Quits: p-i-_ (~Ohmu@183.89.25.222) (Read error: Connection reset by peer)
[17:24:40] *** Joins: shailangsa (~shailangs@host86-186-133-59.range86-186.btcentralplus.com)
[17:24:57] *** Quits: shailangsa (~shailangs@host86-186-133-59.range86-186.btcentralplus.com) ()
[17:25:03] *** Quits: aknot (~aknot@2603:900a:1503:17bb:5fdd:1d53:b602:2e69) (Remote host closed the connection)
[17:25:24] *** Joins: p-i- (~Ohmu@mx-ll-183.89.25-222.dynamic.3bb.co.th)
[17:25:43] *** Joins: tasty (~mew@ns3086623.ip-37-187-21.eu)
[17:27:16] *** Joins: theo4 (~theo@user/theo)
[17:28:40] *** Joins: bahamas (~lucian@84.232.140.52)
[17:29:18] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:2d9b:5b3e:4e6b:74da)
[17:29:36] *** Joins: stockh0lm (~Andreas@p200300d2c70bf80011ea30bacc71c432.dip0.t-ipconnect.de)
[17:29:42] <tribo> jinsun__: thank you
[17:30:27] *** Quits: jamea (~jamea@177.239.81.39) (Ping timeout: 256 seconds)
[17:30:59] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[17:31:17] *** Quits: theo (~theo@user/theo) (Ping timeout: 240 seconds)
[17:31:17] *** theo4 is now known as theo
[17:31:26] *** Quits: Lerroux (~Lerroux@180.190.23.216) (Quit: Leaving)
[17:31:33] *** Quits: drbeco (~beco@user/beco) (Quit: Leaving)
[17:35:36] *** Joins: aknot (~aknot@2603:900a:1503:17bb:fc9b:99e3:bd31:3954)
[17:37:15] *** Joins: ELFrederich (~ELFrederi@siemens-industry-software-inc-216-196-155-202.static.fuse.net)
[17:37:16] *** Quits: tasty (~mew@ns3086623.ip-37-187-21.eu) (Changing host)
[17:37:16] *** Joins: tasty (~mew@user/tasty)
[17:37:44] *** Joins: pycode1 (~pycode3@2001:b07:5d28:551:f744:ad84:60eb:aad1)
[17:38:00] <ELFrederich> hi, I was doing some coding challenges on some website several years ago and now I forgot the name of the website.  Can you spit out some ideas?  I think they were multi-language challenges but I'm not sure
[17:38:41] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[17:38:59] <Pilate> hackerrank, leetcode
[17:39:42] <CrtxReavr> "Hi!  Um. . . I ate a bunch of drugs and. . . I was wondering if you could tell me what they were?"
[17:39:44] *** Joins: ivii (~ivan@user/ivii)
[17:40:25] <marduk> cocaine
[17:40:44] * CrtxReavr jams to Surf Punks in his head.
[17:42:58] *** Quits: masoudd (~masoudd@user/masoudd) (Read error: Connection reset by peer)
[17:43:06] <wyre> what's the meaning of `compile` on `pip-compile` from pip-tools?
[17:43:09] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::ef3c)
[17:43:23] *** Joins: masoudd (~masoudd@user/masoudd)
[17:43:46] <wyre> like compile/building software?
[17:44:42] <Payam92> Hi, I get a segmentation fault when running my application . These are the traceback and related files : https://bpa.st/O6MQ
[17:45:11] <ELFrederich> codewars... I found it
[17:46:19] *** Joins: shailangsa (~shailangs@host86-186-133-59.range86-186.btcentralplus.com)
[17:48:01] *** Quits: zlg (~zlg@user/zlg) (Ping timeout: 256 seconds)
[17:51:07] <taeaad> How can I redirect standard out to my logger?
[17:51:10] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:71e5:4f52:ed0e:7b4e)
[17:51:11] *** Quits: roxfan (~roxfan@2a02:a03f:a2be:4f00:e18f:706f:27a:7b36) (Ping timeout: 245 seconds)
[17:51:36] *** Joins: qlixed (~qlixed@181.44.129.13)
[17:52:04] <wyre> taeaad, check https://docs.python.org/3/library/logging.handlers.html
[17:52:18] *** Joins: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec)
[17:52:29] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:71e5:4f52:ed0e:7b4e) (Ping timeout: 252 seconds)
[17:53:23] <Payam92> it really starts to avoid me
[17:53:28] <Payam92> I don't know how to solve it
[17:53:55] <taeaad> wyre: Thanks.
[17:54:24] <Payam92> annoy
[17:54:38] *** Joins: weedmic_ (~weedmic@93-173-109-49.bb.netvision.net.il)
[17:54:43] *** Joins: junktext (~junktext@gateway/vpn/pia/junktext)
[17:55:04] <wyre> taeaad, anyway ... if your system uses journald ... you can set flush=True for your print() and they will be handled by journald
[17:55:35] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[17:55:41] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Remote host closed the connection)
[17:55:48] *** Joins: derpadmin (~Anonymous@homebase.200013.net)
[17:55:54] <wyre> but sure, instead print() you can use the StreamHandler and your logger.whatever() statements will be printed to stdout
[17:56:15] <taeaad> wyre: This seems to work, not sure if it is sane: https://stackoverflow.com/questions/19425736/how-to-redirect-stdout-and-stderr-to-logger-in-python
[17:56:17] *** Quits: MajorBiscuit (~MajorBisc@c-001-023-033.client.tudelft.eduvpn.nl) (Ping timeout: 256 seconds)
[17:56:44] <taeaad> The "UPDATE for Python 3" part.
[17:58:14] <wyre> Teacup, I prefer my suggested approaches ... you don't need to implement a new class
[17:58:36] *** Joins: F0rTh3J3st (~F0rTh3J3s@wsip-174-67-161-18.hr.hr.cox.net)
[17:59:33] <wyre> if you set properly the StreamHandler and the logger ... your logger.<level>() should be printed also in stdout/stderr
[17:59:41] <zen_coder> I need to iterate over all direct sub dirs in a directory and open a certain file, so basically just one level down. What is the best approach for this?
[17:59:43] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[17:59:51] *** Joins: Tempesta (~Tempesta@user/tempesta)
[18:00:37] <wyre> you don't need to implement your own handler, you can use StreamHandler 😜
[18:00:44] *** Quits: derpadmin (~Anonymous@homebase.200013.net) (Quit: leaving)
[18:00:52] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[18:01:28] *** Joins: zlg (~zlg@user/zlg)
[18:01:33] <taeaad> I haven't looked at journald; I am somewhat wary of fiddling with daemons or systemd for that matter but mostly due to macOS or Windows users that want to have Ubuntu behave like their OS. But I have nothing against it—now that you mention it I should learn to use journald anyway.
[18:02:12] <wyre> taeaad, journald is simple, the big point is systemd 😜
[18:02:49] <taeaad> In that case, sounds like a good idea.
[18:03:10] *** Quits: tgamblin (~tgamblin@cpe64777de11593-cm64777de11590.cpe.net.cable.rogers.com) (Remote host closed the connection)
[18:03:21] <wyre> taeaad, journald is just to manage/read/filter logs
[18:05:46] *** Joins: vlado1 (~vlado@2800:484:3587:3c90:8bf1:66d4:72a6:4f9c)
[18:05:59] <jinsun__> zen_coder: so a fixed file name and all subdirectories have that file?
[18:06:48] *** Joins: tgamblin (~tgamblin@2607:fea8:c2a0:97b0::d90e)
[18:07:54] <wyre> taeaad, there is also a journald handler for python logging ... but it's not built-in, it's in python-systemd package https://github.com/systemd/python-systemd
[18:08:07] <wyre> which I've just noticed it's not in PyPI ... 😆
[18:08:31] <wyre> but for sure you can install it with your distro package manager ;-)
[18:09:08] *** Joins: c4017w_ (~c4017@209.52.68.8)
[18:10:02] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[18:10:53] *** Joins: derpadmin (~Anonymous@homebase.200013.net)
[18:11:04] *** Joins: cdown (~cdown@163.114.131.1)
[18:11:08] *** Quits: jdmark (~jdmark@user/jdmark) (Quit: Leaving)
[18:11:10] <taeaad> How come it's not in PyPI?
[18:11:24] *** Joins: jdmark (~jdmark@user/jdmark)
[18:12:22] *** Joins: kts (~kts@103.73.237.243)
[18:12:46] *** Quits: derpadmin (~Anonymous@homebase.200013.net) (Client Quit)
[18:12:50] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 260 seconds)
[18:12:57] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 256 seconds)
[18:13:18] *** Quits: rickybob2 (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 260 seconds)
[18:13:23] *** Quits: aknot (~aknot@2603:900a:1503:17bb:fc9b:99e3:bd31:3954) (Ping timeout: 252 seconds)
[18:13:30] *** Joins: Joeee (~Antonio@188.252.198.59)
[18:13:56] *** Joins: JohnDoe1 (~johndoe1@184-091-099-189.res.spectrum.com)
[18:14:08] <wyre> taeaad, I'm not sure, I'd say it's quite platform-specific ... so being available in your distro repositories is more than enough, you also have pystemd which it's in PyPI but I'm not sure if it will provide you some logging handler for journald
[18:14:28] <wyre> maybe somebody here can explain us why python-systemd is not in PyPI
[18:16:43] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Quit: Leaving)
[18:18:00] <SnoopJ> I couldn't explain that, because it appears to be on PyPI: https://pypi.org/project/systemd-python/
[18:18:15] <SnoopJ> (albeit with a confusing name)
[18:18:49] <SnoopJ> Looks like python-systemd was already taken and they decided to just reverse the name https://github.com/systemd/python-systemd/issues/5
[18:18:57] *** Quits: zaquest (~notzaques@5.130.79.72) (Quit: Leaving)
[18:20:46] *** Joins: Viewday112 (~Viewday@user/viewday)
[18:22:19] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[18:22:20] *** Viewday112 is now known as Viewday11
[18:24:14] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:71e5:4f52:ed0e:7b4e) (Ping timeout: 250 seconds)
[18:26:22] *** Joins: Gerula (~Gerula@user/gerula)
[18:26:29] <andi_> does python stop the computation in an if statement if the statement is false? e.g. pseudocode: if False and dosomestuff(): is "dosomestuff()" called?
[18:26:57] <grym> andi_: that's more to do with the behavior of `and`, which short circuits
[18:26:59] <bjs> andi_: `x and y` will not evaluate y is x is falsey
[18:27:04] <grym> (so no, it's not called)
[18:27:15] <bjs> andi_: same with `x or y` will not evaluate y if x is truthy (aka if bool(x) is True)
[18:27:49] <gurkenglas> How do I get a pytorch dataset or dataloader that is just "normally distributed random tensors of this here shape"
[18:27:50] <andi_> ohh nice to know, i just know this from C and python behaves the same okay
[18:28:28] <bjs> andi_: see https://docs.python.org/3/reference/expressions.html#boolean-operations
[18:28:33] *** Quits: synaps3 (~void@user/synaps3) (Remote host closed the connection)
[18:29:17] *** Quits: slav0nic (slav0nic@python.su) (Remote host closed the connection)
[18:29:45] <taeaad> wyre: So if I just use StreamHandler, then it should be stream_handler = logging.StreamHandler() but with an argument that includes stdout?
[18:29:56] <taeaad> (Without using a custom class)
[18:30:01] <SnoopJ> gurkenglas, write a subclass of Dataset or IterableDataset that provides normally-distributed random Tensors in the appropriate fashion
[18:30:45] *** Joins: data68 (~data@2a02:908:a65:3d80:748b:2f3a:873a:6c23)
[18:31:48] *** Joins: kts_ (~kts@103.73.237.254)
[18:31:54] <SnoopJ> oh, maybe a subclass isn't even needed, TensorDataset(your_tensors) might do the trick: https://pytorch.org/docs/stable/data.html#torch.utils.data.TensorDataset
[18:32:13] *** Quits: kts (~kts@103.73.237.243) (Ping timeout: 256 seconds)
[18:32:22] *** Joins: the_lanetly_052 (~the_lanet@185.30.91.173)
[18:32:42] *** Quits: junktext (~junktext@gateway/vpn/pia/junktext) (Ping timeout: 272 seconds)
[18:33:33] *** Joins: white2 (~mahengrui@user/mahengrui1)
[18:33:37] *** Quits: the_lanetly_052_ (~the_lanet@194.135.152.253) (Ping timeout: 240 seconds)
[18:33:40] <wyre> taeaad, you have to set up your logging config with that StreamHandler
[18:34:08] *** Joins: junktext (~junktext@gateway/vpn/pia/junktext)
[18:34:23] <wyre> taeaad, check this example https://coderzcolumn.com/tutorials/python/logging-config-simple-guide-to-configure-loggers-from-dictionary-and-config-files-in-python
[18:36:11] *** Quits: five643333496 (~five6@8.40.26.79) (Ping timeout: 256 seconds)
[18:36:13] *** Quits: F0rTh3J3st (~F0rTh3J3s@wsip-174-67-161-18.hr.hr.cox.net) (Quit: Leaving)
[18:36:22] <wyre> SnoopJ, I didn't noticed that they reversed the name of the lib 😥
[18:36:50] <wyre> I would hope a link to PyPI in the github repo
[18:37:21] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[18:37:33] <wyre> s/hope/expect/
[18:37:57] <taeaad> Hmm, so either way I have another problem now which is that if I put the API call inside a function it doesn't print anything to stdout to start off with.
[18:38:00] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[18:38:13] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[18:38:20] <taeaad> (The API call function is from a library, not mine...)
[18:38:42] *** Joins: djhankb (~djhankb@208.113.164.68)
[18:39:19] *** Joins: five643333496 (~five6@8.40.26.85)
[18:39:23] *** Joins: zaquest (~notzaques@5.130.79.72)
[18:39:40] *** Quits: cdown (~cdown@163.114.131.1) (Ping timeout: 272 seconds)
[18:39:47] *** Joins: rickybob2 (~rickybob@gateway/vpn/pia/rickybob)
[18:39:50] *** Quits: el_kevino (~mote@2604:a880:400:d1::901:5001) (Quit: WeeChat 3.4)
[18:41:11] *** Joins: herme5 (~mote@2604:a880:400:d1::901:5001)
[18:41:11] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[18:41:29] *** Joins: wisep__ (~rickybob@gateway/vpn/pia/rickybob)
[18:41:33] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[18:41:44] <wyre> taeaad, I think we could help you better if you tell us what library are you using
[18:42:24] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[18:43:10] *** Quits: kts_ (~kts@103.73.237.254) (Quit: Konversation terminated!)
[18:44:06] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 272 seconds)
[18:44:49] *** Joins: humberto1 (~humbertow@189.236.30.197)
[18:45:22] *** Quits: rickybob2 (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 272 seconds)
[18:49:06] *** Joins: rickybob2 (~rickybob@gateway/vpn/pia/rickybob)
[18:49:16] *** Joins: kts (~kts@103.73.237.254)
[18:49:39] *** Joins: dante-as (~dante-as@188.24.161.140)
[18:50:12] *** Joins: bluedust_ (~bluedust@185.248.85.10)
[18:50:13] *** Quits: rvalue (~rvalue@user/rvalue) (Read error: Connection reset by peer)
[18:50:27] *** Joins: rvalue (~rvalue@user/rvalue)
[18:52:17] *** Quits: wisep__ (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 240 seconds)
[18:53:11] *** Quits: bluedust (~bluedust@103.165.167.61) (Ping timeout: 256 seconds)
[18:53:37] *** Quits: five643333496 (~five6@8.40.26.85) (Ping timeout: 240 seconds)
[18:54:10] *** Joins: FluffyMask (~masque@user/fluffymask)
[18:54:17] *** Quits: agumonke` (~user@37.175.254.13) (Ping timeout: 240 seconds)
[18:54:23] *** Joins: lilibyte (~lilibyte@69.174.145.127)
[18:55:08] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[18:55:58] *** Quits: bluedust_ (~bluedust@185.248.85.10) (Remote host closed the connection)
[18:56:00] *** Quits: data68 (~data@2a02:908:a65:3d80:748b:2f3a:873a:6c23) (Quit: WeeChat 1.4)
[18:56:21] *** Joins: lilibyte2 (lilibyte@gateway/vpn/protonvpn/lilibyte)
[18:56:43] *** Quits: lilibyte2 (lilibyte@gateway/vpn/protonvpn/lilibyte) (Client Quit)
[18:57:12] *** Joins: lilibyte2 (lilibyte@gateway/vpn/protonvpn/lilibyte)
[18:57:24] *** Quits: lilibyte2 (lilibyte@gateway/vpn/protonvpn/lilibyte) (Client Quit)
[18:57:39] *** Quits: merrinx (~merrinx@ti0028a400-3686.bb.online.no) (Quit: WeeChat 3.3)
[18:57:49] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:71e5:4f52:ed0e:7b4e)
[18:58:35] *** Joins: merrinx (~merrinx@ti0028a400-3686.bb.online.no)
[18:58:44] *** Joins: chadea (~a@pool-96-241-113-90.washdc.fios.verizon.net)
[18:58:52] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Read error: Connection reset by peer)
[18:59:18] *** Quits: lilibyte (~lilibyte@69.174.145.127) (Ping timeout: 272 seconds)
[18:59:35] <chadea> I am having trouble getting subprocess.run to launch a command without waiting on Windows 10 Python 3.9
[18:59:37] <chadea> run(cmd, shell=False, stdin=None, stdout=None, stderr=None, close_fds=True,
[18:59:38] <chadea> creationflags=(DETACHED_PROCESS | CREATE_NO_WINDOW))
[19:00:07] *** Joins: CodeSpelunker (~CodeSpelu@user/codespelunker)
[19:00:09] *** Joins: akk (~akk@75.161.130.204)
[19:00:13] *** Quits: beli6147 (~Thunderbi@cpe-76-175-52-6.socal.res.rr.com) (Quit: beli6147)
[19:00:23] *** Quits: ijaz (ijaz@2a01:4f8:141:1272::2) (Ping timeout: 250 seconds)
[19:01:25] *** Joins: tj123 (~tjh123@cpe-75-185-104-199.cinci.res.rr.com)
[19:01:39] <gurkenglas> SnoopJ: TensorDataset would give the same tensors each time though :I
[19:01:48] *** Joins: five643333496 (~five6@8.40.26.64)
[19:01:53] <CodeSpelunker> Hi, I'm making a very simple Flask app which adds/removes to a SQLite db, but having some trouble
[19:02:46] <CodeSpelunker> I have a long-lived connection to the db, but when I try to add to it via a Flask route, I get an error about the initiating thread being different than the thread adding to the db
[19:02:57] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[19:03:45] *** Quits: sh0ne (~sh0ne@2a06:5b00:6fb:2a00:6864:4f02:315:158c) (Quit: Textual IRC Client: www.textualapp.com)
[19:04:02] *** Quits: theprophet (~theprophe@212.58.102.155) (Quit: Client closed)
[19:04:02] *** Joins: vulpes_vulpes (~vulpes_vu@62-64-207-88.dynamic.dial.as9105.com)
[19:04:05] <CodeSpelunker> what is the standard Python/Flask idiom for having a long-lived db connection and adding to it?
[19:04:09] <jinsun__> chadea: subprocess.run will wait for the process to finish, if you don't want to wait use subprocess.Popen
[19:04:23] <CodeSpelunker> Does someone have a simple example they could show me?
[19:04:55] *** herme5 is now known as el_kevino
[19:04:57] <akk> CodeSpelunker: Are you using flask-sqlalchemy? That usually takes care of db sessions. Great tutorial: https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-iv-database-legacy
[19:05:04] <chadea> I thought run only waits if check=True
[19:05:19] *** Quits: Payam92 (~Payam@138.106.57.131) (Quit: Client closed)
[19:05:26] <CodeSpelunker> never heard about it.  Thanks for the recommend
[19:05:35] <akk> CodeSpelunker: You might or might not want to go back to part 1 and read through part iv, and there's a github repository you can use to folllow along.
[19:05:55] <CodeSpelunker> right, that was my plan haha
[19:05:55] *** Joins: zebrag (~chris@user/zebrag)
[19:06:19] <akk> CodeSpelunker: That does make it easier, and the git repo is tagged so you can check out each part and try it.
[19:06:48] <chadea> jinsun__: Popen works great thank you
[19:06:57] <jinsun__> chadea: run it waits always, check=True is for raising exception for non-zero exit code
[19:07:01] <CodeSpelunker> oh, uhhh, this looks a bit heavier than I think I was intending
[19:07:23] <CodeSpelunker> I don't need an ORM or anything.  I'll have to look into it a bit more I think
[19:07:50] <akk> CodeSpelunker: The official flask tutorial also has a database section. https://flask.palletsprojects.com/en/2.0.x/tutorial/
[19:08:17] *** Quits: five643333496 (~five6@8.40.26.64) (Ping timeout: 240 seconds)
[19:08:38] <chadea> thanks jinsun__!
[19:08:46] <CodeSpelunker> akk: yes, this is a little better
[19:09:12] <CodeSpelunker> do you know, is this up to date?  I see 2.0.x in the URL, I hope this is not the Python version
[19:09:50] *** Joins: c4017w__ (~c4017@209.52.68.8)
[19:10:07] *** Joins: gambl0re (~gambl0re@2607:fea8:a59f:c360::4f67)
[19:10:45] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[19:11:12] <akk> I'm pretty sure that's version 2 of flask, not of python.
[19:11:24] <wakeup> does anyone here use github actions?
[19:11:33] <wakeup> if yes, what do you use them for
[19:11:37] <wakeup> just to have an idea
[19:11:52] *** Joins: Masterphi (~Masterphi@user/masterphi)
[19:12:15] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[19:13:28] <CodeSpelunker> akk: great, thanks for the help
[19:13:35] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[19:13:53] *** Quits: rickybob2 (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 256 seconds)
[19:13:57] <CodeSpelunker> wakeup: I think it may be similar to other CI/CD runners
[19:14:16] <CodeSpelunker> for instance, running tests per commit or something
[19:14:48] *** Quits: rawrrr (uid540880@id-540880.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[19:14:48] <wakeup> I had a project that was using Travis CI, but it had been a while since I worked on that project, so only today I realised that Travis CI no longer supports free CI
[19:15:02] <wakeup> so I would like to switch tools
[19:15:18] *** Joins: ravan (~ravan@user/ravan)
[19:15:25] <wakeup> so I was wondering if github actions would allow me to perform CI freely for a public repo
[19:15:28] <wakeup> I think so from what I read
[19:15:36] <SnoopJ> gurkenglas, if you want them to be different, you'll have to write the subclass, then.
[19:16:05] *** Joins: jamea (~jamea@10.189-202-213.bestelclientes.com.mx)
[19:16:09] <SnoopJ> I would recommend having a way to seed the generation so you can test with something deterministic, even if you won't run it with a consistent seed in production
[19:16:37] *** Joins: Viewday118 (~Viewday@user/viewday)
[19:16:51] <CodeSpelunker> i think so
[19:18:25] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[19:18:26] *** Viewday118 is now known as Viewday11
[19:18:59] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[19:19:00] *** Quits: vishwin (~brioux@2001:470:1f07:302::1) (Ping timeout: 240 seconds)
[19:19:20] *** Joins: mcleuder_ (~mcleuder@gateway/tor-sasl/mcleuder)
[19:19:40] *** Quits: wakeup (~wakeup@user/wakeup) (Quit: Client closed)
[19:20:13] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[19:20:35] *** Quits: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder) (Ping timeout: 240 seconds)
[19:21:52] *** Joins: ebrau (~ebrau@142.126.175.200)
[19:22:41] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[19:27:01] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 245 seconds)
[19:27:58] *** Joins: Viewday11 (~Viewday@user/viewday)
[19:28:13] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[19:28:58] *** Joins: nomic2 (~nomic@85.203.36.100)
[19:30:12] *** Quits: cecep[m] (~cecep@2001:470:69fc:105::3994) (Quit: You have been kicked for being idle)
[19:30:38] *** Joins: vicfred (~vicfred@user/vicfred)
[19:30:43] *** Quits: nomic (~nomic@85.203.36.100) (Read error: Connection reset by peer)
[19:32:31] *** Quits: adiKt (uid472628@id-472628.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[19:35:15] *** Quits: Hanii (~textual@2a00:23c5:c583:a300:b8d0:b532:be93:859e) (Quit: My iMac has gone to sleep. ZZZzzz…)
[19:35:48] *** Quits: kostkon_ (~androirc@2.142.66.94.static.otenet.gr) (Ping timeout: 240 seconds)
[19:36:38] *** Joins: crashrep (~crashrep@user/crashrep)
[19:36:45] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[19:36:49] *** Joins: memeCowboy (~janho@51.159.67.104)
[19:38:17] *** Joins: vishwin (~brioux@2001:470:1f07:302::1)
[19:38:50] *** Quits: mtk (~mtk@2601:185:200:70:20c:29ff:fe3e:59e4) (Remote host closed the connection)
[19:39:12] *** Quits: baltazar (~baltazar@178-164-190-49.pool.digikabel.hu) (Ping timeout: 272 seconds)
[19:40:21] *** Joins: baltazar (~baltazar@176-241-40-35.pool.digikabel.hu)
[19:42:32] *** Joins: dez (uid92154@user/dez)
[19:42:55] *** Joins: bluedust (~bluedust@185.195.232.154)
[19:43:55] *** Joins: mtk (~mtk@2601:185:200:70:20c:29ff:fe3e:59e4)
[19:44:43] *** Quits: mtk (~mtk@2601:185:200:70:20c:29ff:fe3e:59e4) (Read error: Connection reset by peer)
[19:44:54] *** Quits: dreamon (~dreamon@ppp-88-217-74-38.dynamic.mnet-online.de) (Ping timeout: 272 seconds)
[19:45:38] *** Quits: Midjak (~Midjak@82.66.147.146) (Quit: This computer has gone to sleep)
[19:45:58] *** Joins: powftw (uid448161@id-448161.lymington.irccloud.com)
[19:46:01] *** Joins: mtk (~mtk@2601:185:200:70:20c:29ff:fe3e:59e4)
[19:48:13] *** Joins: roxfan (~roxfan@2a02:a03f:a2be:4f00:e18f:706f:27a:7b36)
[19:48:33] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[19:49:41] *** Quits: tobybl (~tobybl@dhcp-199-233.inf.ed.ac.uk) (Ping timeout: 268 seconds)
[19:50:50] *** Joins: magla (~gelignite@d53619a1.access.ecotel.net)
[19:50:54] *** Quits: eN_Joy (~eN_Joy@wsip-72-213-93-155.ok.ok.cox.net) (Remote host closed the connection)
[19:51:17] *** Quits: mrwick (~mrwick@user/mrwick) (Ping timeout: 256 seconds)
[19:51:36] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[19:51:58] *** Joins: zebrag (~chris@user/zebrag)
[19:52:01] *** Joins: kostkon_ (~androirc@2a02:587:a10f:c988:4142:80fd:5bce:d437)
[19:55:06] *** Joins: mrwick (~mrwick@user/mrwick)
[19:55:31] <Lunatrius> I ran into a weird issue with python 3.10.x where I'm unable to run the scripts of certain packages within git-for-windows (http, pipenv) without running it directly from python (either python <path> or python -m <module>). I've tested this on two systems on python 3.10.0 and 3.10.2 and I can't get it working. The same thing works just fine on the same two systems with python 3.8.3 https://puu.sh/IMBJE/dbf17dcd6a.png
[19:57:20] <Lunatrius> On the contrary, pip and natsort work just fine if I try to run them the same way
[19:57:54] *** Joins: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net)
[19:58:21] *** Quits: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:59:28] *** Quits: mjacob (~mjacob@adrastea.uberspace.de) (Read error: Connection reset by peer)
[19:59:32] *** Quits: pvergain (~Thunderbi@2a01:e0a:223:690:a7a2:bf54:8291:410d) (Quit: pvergain)
[20:01:00] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[20:01:03] *** Quits: zaquest (~notzaques@5.130.79.72) (Read error: Connection reset by peer)
[20:01:14] *** Joins: sanmingzhi1 (~duimech@h96-61-237-176.tlpltn.broadband.dynamic.tds.net)
[20:01:34] *** Quits: spetrosi (~spetrosi@2a02:8308:b:ec00:e1ce:d7b:6a8f:f189) (Quit: Leaving)
[20:02:31] *** Joins: spetrosi (~spetrosi@2a02:8308:b:ec00:e1ce:d7b:6a8f:f189)
[20:02:37] *** Quits: sanmingzhi (~duimech@h96-61-237-176.tlpltn.broadband.dynamic.tds.net) (Ping timeout: 240 seconds)
[20:03:07] *** Joins: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec)
[20:03:36] *** Joins: tatsumaru (~tatsumaru@82.147.131.155)
[20:04:14] *** Joins: Collaken (~flo@ip4d17fdd1.dynamic.kabel-deutschland.de)
[20:04:27] *** Quits: thiras (~thiras@user/thiras) (Remote host closed the connection)
[20:04:44] <tatsumaru> noob question, are variables defined by a for loop e.g. (for item in items) local or global?
[20:04:48] *** Joins: mjacob (~mjacob@adrastea.uberspace.de)
[20:04:51] *** Joins: thiras (~thiras@user/thiras)
[20:05:21] <bjs> tatsumaru: well, it depends where you do it. They're basically just like normal assignments. `item = blah`.  if inside a function then they're local variables
[20:05:26] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: Textual IRC Client: www.textualapp.com)
[20:05:39] <bjs> otherwise they are 'global',  `for` doesn't create its own scope
[20:05:42] *** Joins: evlc (~evlc@l37-193-63-15.novotelecom.ru)
[20:06:08] *** Quits: dvx (~dvx@5.181.92.64) (Remote host closed the connection)
[20:06:38] <tatsumaru> bjs, I see, thanks
[20:06:47] *** Joins: beli6147 (~Thunderbi@cpe-76-175-52-6.socal.res.rr.com)
[20:07:09] <SnoopJ> they should be local unless you've declared the identifier nonlocal/global before, if I'm not mistaken
[20:07:55] *** Joins: kickingvegas (~cchoi@c-73-170-198-141.hsd1.ca.comcast.net)
[20:09:04] *** Joins: bahamas (~lucian@84.232.140.52)
[20:09:06] <tatsumaru> SnoopJ well in repl if you run a 'for item in items' loop you can call item after the loop and it will return the last value from items, which seems non-local.
[20:09:24] <SnoopJ> tatsumaru, it's local to the scope in which the loop is being defined. At the REPL, that's the top-level scope.
[20:09:36] *** Quits: grimvar (~grimvar@i5C75F581.versanet.de) (Ping timeout: 272 seconds)
[20:10:27] <tatsumaru> sure
[20:10:34] *** Joins: c4017w_ (~c4017@209.52.68.8)
[20:10:42] *** Quits: spetrosi (~spetrosi@2a02:8308:b:ec00:e1ce:d7b:6a8f:f189) (Quit: Leaving)
[20:10:47] <bjs> tatsumaru: that is always true,  the variable defined by the for is accessible after the for
[20:10:50] <bjs> even in a file, even in a function
[20:10:50] <SnoopJ> tatsumaru, the REPL is often a special case but that isn't so here, you can do the same thing in a file: https://bpa.st/TTTQ
[20:10:53] *** Joins: Guest65 (~Guest65@206.207.170.196)
[20:11:14] *** Joins: grimvar (~grimvar@i5C75FE8E.versanet.de)
[20:11:33] *** Joins: laptopjazz (~quassel@2603-6010-9103-871e-2441-6010-7385-6842.res6.spectrum.com)
[20:12:04] *** Joins: zaquest (~notzaques@5.130.79.72)
[20:12:12] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 240 seconds)
[20:12:33] <tatsumaru> bjs: doesn't this imply that the loop's variable isn't limited to the scope in which it's defined?
[20:12:44] <Wooble> tatsumaru: a loop doesn't have its own scope
[20:13:03] <bjs> tatsumaru: it is limited to the same scope,  but like I said there is no scope just for `for`
[20:13:20] <Wooble> tatsumaru: scopes are created for a module, a class, a function, or a comprehension.
[20:13:27] <tatsumaru> bjs: oh ok, I misinterpreted something you said about files and functions.
[20:13:30] *** Quits: evlc (~evlc@l37-193-63-15.novotelecom.ru) (Quit: WeeChat 3.4)
[20:13:52] <SnoopJ> tatsumaru, if you visualize the loop as having the same effect as `name = something` at that same location, you should have the right of it.
[20:14:13] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[20:14:16] *** Joins: jmcb (~jmcb@nas47-67.york.ac.uk)
[20:14:16] *** Joins: MajorBiscuit (~MajorBisc@c-001-015-039.client.tudelft.eduvpn.nl)
[20:14:29] <Wooble> tatsumaru: if you're coming from a language where every block gets its own scope, this can be a bit jarring.
[20:14:37] <SnoopJ> (it is actually quite close in terms of the code emitted, you get a STORE_NAME in both cases)
[20:14:46] *** Quits: laptopjazz (~quassel@2603-6010-9103-871e-2441-6010-7385-6842.res6.spectrum.com) (Client Quit)
[20:14:53] *** Joins: rickybob2 (~rickybob@gateway/vpn/pia/rickybob)
[20:15:16] *** Quits: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[20:15:35] *** Quits: jmcb (~jmcb@nas47-67.york.ac.uk) (Client Quit)
[20:15:56] <tatsumaru> I feel like I got it, thanks
[20:16:27] *** Joins: mare (sid522462@id-522462.helmsley.irccloud.com)
[20:16:34] <SnoopJ> Wooble, being able to just open a scope anywhere like you can in C++ would be neat, but I don't see how it could ever work in Python :(
[20:16:54] <Wooble> with newscope(): ?
[20:17:31] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[20:17:37] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 256 seconds)
[20:17:39] <SnoopJ> Wooble, how would that implement the new lexical scope? Store the locals() during __enter__() and restore in __exit__() or something?
[20:17:44] *** Joins: xkuru (~xkuru@user/xkuru)
[20:17:59] *** Joins: undt (~undt@cpc84379-newc18-2-0-cust110.16-2.cable.virginm.net)
[20:18:08] <SnoopJ> oO(`with noscope():`)
[20:18:15] <Wooble> no you just make that magic in the runtime, not a real context manager :)
[20:18:54] *** Joins: bluedust_ (~bluedust@103.165.167.61)
[20:18:54] <SnoopJ> well, I do see how you could *do* it, but I guess I mean a change that would actually be accepted :P
[20:20:59] *** Quits: Z-cat (~Z-cat@user/z-cat) (Ping timeout: 250 seconds)
[20:21:03] *** Quits: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:21:36] *** Joins: Midjak (~Midjak@82.66.147.146)
[20:22:34] *** Joins: KnowledgeShark (~Knowledge@50.34.198.222)
[20:22:34] *** Quits: bluedust (~bluedust@185.195.232.154) (Ping timeout: 260 seconds)
[20:22:51] *** Joins: extropiator (~admin@user/extropiator)
[20:23:03] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[20:24:54] *** Joins: bluedust (~bluedust@117.193.120.37)
[20:25:43] *** Joins: wisep__ (~rickybob@gateway/vpn/pia/rickybob)
[20:26:12] *** Quits: rickybob2 (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 240 seconds)
[20:26:57] *** Joins: rickybob2 (~rickybob@gateway/vpn/pia/rickybob)
[20:27:05] *** Quits: merrinx (~merrinx@ti0028a400-3686.bb.online.no) (Quit: WeeChat 3.3)
[20:27:57] *** Quits: bluedust_ (~bluedust@103.165.167.61) (Ping timeout: 240 seconds)
[20:28:32] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[20:28:53] *** Joins: l4yer (~l4yer@2001:ac8:20:3b00:1011:43f5:3539:a075)
[20:29:24] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 240 seconds)
[20:29:27] *** Joins: Z-cat (~Z-cat@user/z-cat)
[20:29:51] *** Joins: merrinx (~merrinx@ti0028a400-3686.bb.online.no)
[20:30:52] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[20:30:53] *** Quits: wisep__ (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 252 seconds)
[20:33:29] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[20:33:38] *** Quits: rickybob2 (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 252 seconds)
[20:34:21] *** Joins: p-i-_ (~Ohmu@mx-ll-183.89.25-222.dynamic.3bb.co.th)
[20:35:46] *** Quits: CodeSpelunker (~CodeSpelu@user/codespelunker) (Quit: CodeSpelunker)
[20:36:32] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[20:36:37] *** Quits: gurkenglas (~gurkengla@dslb-188-096-121-068.188.096.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[20:37:27] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[20:37:28] *** Joins: gurkenglas (~gurkengla@dslb-188-096-121-068.188.096.pools.vodafone-ip.de)
[20:37:30] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 260 seconds)
[20:37:31] *** Joins: tobybl (~tobybl@252.193.115.87.dyn.plus.net)
[20:38:01] *** Quits: p-i- (~Ohmu@mx-ll-183.89.25-222.dynamic.3bb.co.th) (Ping timeout: 256 seconds)
[20:38:28] *** Quits: zmt00 (~zmt00@user/zmt00) (Quit: Leaving)
[20:38:49] *** Joins: Betal (~Betal@user/betal)
[20:39:15] *** Joins: cthulchu_ (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[20:40:03] *** Joins: gtlsgamr (~gtlsgamr@user/gtlsgamr)
[20:40:17] *** Quits: Guest5436 (~Guest54@2620:10d:c092:400::4:9837) (Ping timeout: 256 seconds)
[20:40:39] <gtlsgamr> Hi. I am writing a CGI script in python. I want to get the parameters that a user send via an HTML form. I want the data in it's raw form. e.g. if the users enters a newline, I want a newline as well.
[20:40:44] *** Joins: zmt00 (~zmt00@user/zmt00)
[20:40:47] <gtlsgamr> is there a way to implement this?
[20:41:16] *** Quits: peteyboy_ (~peteyboy1@95.169.226.66) (Ping timeout: 272 seconds)
[20:41:29] *** Quits: rsx (~dummy@ppp-188-174-132-175.dynamic.mnet-online.de) (Quit: rsx)
[20:42:03] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 3.0)
[20:42:23] *** Quits: Guest65 (~Guest65@206.207.170.196) (Quit: Client closed)
[20:42:56] *** Quits: Strom (strom@fedora/strom) ()
[20:42:57] <SnoopJ> gtlsgamr, I would think that would be the default behavior if you're reading from e.g. a <textarea>
[20:42:58] <Wooble> gtlsgamr: how are you currently doing it that's not including newlines? (and why are you using CGI in 2022?)
[20:43:21] <gtlsgamr> SnoopJ: I am reading from a text area.
[20:43:29] <gtlsgamr> Wooble: Just learning CGi. that's all
[20:43:38] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:2d9b:5b3e:4e6b:74da) (Quit: Konversation terminated!)
[20:43:59] <Wooble> well why are you *learning* CGI in 2022? it's been dead in python like like 25 years
[20:44:05] <gtlsgamr> Checkout my site . https://hitarththummar.xyz/ < there is a comment thing at the bottom that i am testing. If you submit it will show you the string that it receives. The string does not have a newline.
[20:44:12] <SnoopJ> (WSGI is the 'new thing' in Python)
[20:44:23] <gtlsgamr> Wooble: Why would anyone learn anything? Just for the heck of it!
[20:44:33] *** Joins: aknot (~aknot@2603-900a-1503-17bb-edea-6f2e-d4cd-7b2c.inf6.spectrum.com)
[20:44:38] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Ping timeout: 252 seconds)
[20:44:41] <Wooble> gtlsgamr: if you're outputting HTML, a newline won't be displayed by the browser, whitespace is collapsed.
[20:45:01] *** Joins: Strom (strom@fedora/strom)
[20:45:09] <gtlsgamr> suppose I output that to a file.. will the newlines stay?
[20:45:36] <Wooble> yes. and if you View Source on the response you can see the newline.
[20:45:50] <Wooble> for HTML display, you want to replace newlines with <br> tags
[20:46:20] <Wooble> a decent wsgi framework & template system will do this for you seamlessly.
[20:46:48] <Wooble> you could also have the response identify itself as text/plain there
[20:46:52] <gtlsgamr> Ah got it!
[20:46:58] <gtlsgamr> thanks!
[20:47:16] *** Quits: extropiator (~admin@user/extropiator) (Quit: bla)
[20:48:45] <Wooble> but if your goal is to make actual dynamic web content instead of empathizing with how bad web devs in the 90s had it probably don't spend too much time on CGI :)
[20:51:44] *** Joins: asthasr (~asthasr@208.80.78.154)
[20:52:12] *** Joins: radiojosh (~Joshua@70-131-32-80.lightspeed.stlsmo.sbcglobal.net)
[20:53:45] *** Quits: bluedust (~bluedust@117.193.120.37) (Remote host closed the connection)
[20:54:39] *** Joins: Barones (~Barones@user/Barones)
[20:55:30] *** Joins: Iolo (~iolo@dsl-tkubng22-58c02b-220.dhcp.inet.fi)
[20:56:01] <SnoopJ> +1, WSGI is close enough anyway, but without the jank
[20:56:31] * SnoopJ wasn't writing Python when he learned CGI, but imagines it was about as painful as it was for Perl
[20:56:34] *** Joins: sbrown (~sbrown@66.44.16.44)
[20:56:55] <akk> I still use CGI a little, on a couple of web hosts that don't allow setting up WSGI. It's not painful in python.
[20:57:00] *** Joins: rickybob2 (~rickybob@gateway/vpn/pia/rickybob)
[20:57:17] <akk> (though of course not as nice as flask or similar wsgi packages)
[20:57:28] <SnoopJ> yea maybe "painful" isn't quite the right way to put it
[20:58:38] <SnoopJ> I do remember that the book I read took some pains to introduce the reader to Linux by analogy to the Clint Eastwood movie "Firefox" where he has to think in another language to fly a fighter jet :)
[20:59:08] *** Joins: wisep__ (~rickybob@gateway/vpn/pia/rickybob)
[21:00:50] *** Quits: ubert1 (~Thunderbi@2a02:8109:9880:303c:8433:129d:16c2:6bdb) (Remote host closed the connection)
[21:00:54] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 272 seconds)
[21:01:15] <Wooble> the stdlib comes with a gateway to do wsgi over cgi so there's really no excuse :P
[21:02:41] *** Quits: rickybob2 (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 256 seconds)
[21:02:43] *** Joins: kyooo (~kyooo@2a02:a31d:a13c:5600:559d:f748:905d:cda9)
[21:03:21] *** Joins: paul424 (~tom@ip-5-172-234-25.multi.internet.cyfrowypolsat.pl)
[21:03:56] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[21:04:24] <chadea> wtf don't use cgi
[21:05:32] * SnoopJ wishes Libera's catalyst guide included "avoid advocacy debates" from the freenode version
[21:05:52] <taeaad> wyre: meteoblue_dataset_sdk
[21:05:54] *** Joins: cdown (~cdown@188.214.11.14)
[21:06:40] <taeaad> The logging code is in client.py and the variable being logged to INFO that I am trying to grab is job_id.
[21:06:59] <InPhase> SnoopJ: There can be a fine line between advocacy debates and soliciting expert opinions about good choices and practices.
[21:07:07] <taeaad> https://github.com/meteoblue/python-dataset-sdk
[21:07:15] <SnoopJ> InPhase, in this specific case, no such opinion was solicited
[21:07:18] <SnoopJ> but agreed
[21:07:31] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[21:07:32] *** Z-cat is now known as Z-luck
[21:07:37] *** Z-luck is now known as Z-cat
[21:08:16] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[21:08:18] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[21:09:23] *** Quits: pycode1 (~pycode3@2001:b07:5d28:551:f744:ad84:60eb:aad1) (Ping timeout: 252 seconds)
[21:09:58] <InPhase> SnoopJ: I think stackoverflow suffers a little by having no space or acceptance of expert opinion questions.  I find myself having benefitted greatly over the years from the opinions of other people experienced with particular things I am considering, and I try now to return the favor to others.  Although it works best I think with a certain sort of respectful conduct.
[21:10:29] <wyre> taeaad, that library apparently uses logging module as well ... https://github.com/meteoblue/python-dataset-sdk#usage
[21:10:42] *** Joins: kristijonas (~kristijon@81-7-103-234.static.zebra.lt)
[21:10:43] *** Joins: water_27300935_ (~water_273@182.90.128.77)
[21:10:55] <SnoopJ> InPhase, I think SO ends up with slightly different phenomena because it's slightly less interactive. I dunno, I enjoyed the way the old Freenode guide said it, and I don't know why it isn't part of the new guidelines for this network.
[21:11:12] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[21:11:18] *** Joins: c4017w__ (~c4017@209.52.68.8)
[21:11:18] <SnoopJ> But most of the other catalyst guidelines survived the transition/rewrite
[21:11:27] *** Quits: dante-as (~dante-as@188.24.161.140) (Ping timeout: 256 seconds)
[21:11:30] <SnoopJ> (context: https://libera.chat/guides/catalyst)
[21:11:32] *** Quits: mrwick (~mrwick@user/mrwick) (Ping timeout: 240 seconds)
[21:12:47] *** Joins: darksun (~darksun@user/darksun)
[21:12:50] <InPhase> SnoopJ: Yeah.  I think they're trying to micromanage the roles of individual channels a little less, while still offering a bit of cultural guidance for a good overall environment.
[21:13:21] *** Quits: Midjak (~Midjak@82.66.147.146) (Quit: This computer has gone to sleep)
[21:13:37] *** Joins: emf (~emf@2620:10d:c090:400::5:e2d5)
[21:14:22] *** Quits: wisep__ (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 260 seconds)
[21:14:36] *** Joins: Viewday118 (~Viewday@user/viewday)
[21:14:37] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[21:14:39] *** Joins: agumonkey (~user@88.163.231.79)
[21:14:56] *** Quits: mncheck (~mncheck@193.224.205.254) (Remote host closed the connection)
[21:15:01] *** Quits: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[21:15:27] *** Joins: amnrst (~amnrst@45-79-201-163.ip.linodeusercontent.com)
[21:15:31] *** Joins: rickybob2 (~rickybob@gateway/vpn/pia/rickybob)
[21:15:31] <bookworm> it's all just recommendations anyhow, each chan can set the rules however they like
[21:16:11] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[21:16:12] *** Viewday118 is now known as Viewday11
[21:16:12] <bookworm> I know of several chans where ops permanently wear a hat for example, even though the catalyst guide tells them not to
[21:16:14] <SnoopJ> yes, but that specific one was a *great* recommendation
[21:18:02] <InPhase> I became a Linux user in 1994 thanks to some strong IRC advocacy.  I remain grateful for this.  :)
[21:18:10] *** Joins: Roey (~Roey@user/Roey)
[21:18:14] *** Quits: kostkon_ (~androirc@2a02:587:a10f:c988:4142:80fd:5bce:d437) (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
[21:18:15] *** Quits: jay-m126 (~jay-m@154.126.169.74) (Ping timeout: 256 seconds)
[21:18:29] <SnoopJ> InPhase, did you solicit it? ;)
[21:18:33] *** Quits: jay-m1261 (~jay-m@154.126.169.74) (Ping timeout: 256 seconds)
[21:18:34] <InPhase> SnoopJ: I did not.
[21:18:39] <SnoopJ> fair enough!
[21:18:58] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[21:19:02] <InPhase> And notably, I did not even know to ask for it.
[21:19:17] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 272 seconds)
[21:19:23] *** Quits: jay-m126_ (~jay-m@154.126.169.74) (Ping timeout: 256 seconds)
[21:19:23] *** Joins: dreamon (~dreamon@pd9503c4b.dip0.t-ipconnect.de)
[21:19:29] *** Parts: gtlsgamr (~gtlsgamr@user/gtlsgamr) ()
[21:20:09] *** Joins: jay-m126 (~jay-m@gateway/vpn/pia/jay-m126)
[21:20:14] *** Joins: jay-m126_ (~jay-m@gateway/vpn/pia/jay-m126)
[21:20:18] *** Joins: blei (~blei@user/blei)
[21:20:19] *** Joins: mncheck (~mncheck@193.224.205.254)
[21:20:39] *** Quits: mncheck (~mncheck@193.224.205.254) (Remote host closed the connection)
[21:20:51] *** Joins: jay-m1261 (~jay-m@gateway/vpn/pia/jay-m126)
[21:21:29] <bookworm> you'll always get an opinionated answer when you ask someone... no matter where you ask
[21:21:45] <bookworm> and xy problems are a thing
[21:22:13] <bookworm> nothing really irc specific here
[21:23:39] *** Quits: the_lanetly_052 (~the_lanet@185.30.91.173) (Ping timeout: 256 seconds)
[21:23:48] <water_27300935_> In tkinter Treeview, use tags just could be change something by row, can I change something by column?
[21:23:52] <water_27300935_> https://bpa.st/K2PA
[21:24:00] <water_27300935_> https://pasteboard.co/dSBmcVML6GHk.jpg
[21:24:22] *** Quits: tWqaq (~tWqaq@240e:389:5d1c:ff00:25be:b2b1:4d59:690c) (Quit: Leaving)
[21:25:20] <SnoopJ> bookworm, sure, I think the advice I am missing applies off of IRC, too.
[21:25:57] *** Quits: radiojosh (~Joshua@70-131-32-80.lightspeed.stlsmo.sbcglobal.net) (Ping timeout: 240 seconds)
[21:27:19] *** Quits: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 256 seconds)
[21:27:27] *** Joins: tWqaq (~tWqaq@240e:389:5d1c:ff00:25be:b2b1:4d59:690c)
[21:28:37] *** Joins: Viewday118 (~Viewday@user/viewday)
[21:30:27] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[21:30:28] *** Viewday118 is now known as Viewday11
[21:30:50] *** Joins: drbeco (~beco@user/beco)
[21:30:57] *** Quits: white2 (~mahengrui@user/mahengrui1) (Ping timeout: 240 seconds)
[21:31:35] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Ping timeout: 256 seconds)
[21:32:13] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[21:32:28] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[21:33:12] *** Quits: tobybl (~tobybl@252.193.115.87.dyn.plus.net) (Remote host closed the connection)
[21:34:36] <taeaad> wyre: Yes, but somehow I can't get it to write to a file.
[21:34:54] <taeaad> When I call the API it prints to stdout.
[21:34:59] *** Quits: rickybob2 (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 256 seconds)
[21:35:03] *** Quits: jaggz (~jaggz@user/jaggz) (Quit: I saith goodbye)
[21:36:16] <taeaad> Perhaps a correct alteration to logging.basicConfig would work, but so far I can only get it to work by a second step of redirecting stdout. And if I put it all in a function it stops working since within the function it doesn't print to stdout.
[21:36:29] <tatsumaru> hey guys, I noticed that in repl when I assign one list to another variable e.g. list2 = list1, then if I modify either list1 or list2 both lists would change, is that expected behavior? it's not the same with simple variables.
[21:36:53] *** Quits: stockh0lm (~Andreas@p200300d2c70bf80011ea30bacc71c432.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[21:37:11] <Repiphany> Yes, lists are mutable and the names list1 and list2 point to the same list, there is no copying data involved
[21:38:08] <taeaad> I think I overengineered my logger. Can I pass a filename to logging.basicConfig?
[21:38:21] <tatsumaru> Repiphany: but if I do: x = 1 y = x , then if I change x, it won't affect y
[21:38:54] <Repiphany> ints are not mutable, there are no methods that take an int in memory and then modify that memory to be another int
[21:39:46] <Repiphany> tatsumaru: https://nedbatchelder.com/text/names1.html
[21:40:13] <tatsumaru> Repiphany: thanks I will check it out
[21:40:39] <taeaad> Looks like I can: https://docs.python.org/3/howto/logging.html
[21:41:24] *** Joins: Moosadee (~Moosadee@216.185.233.27)
[21:41:39] <bjs> tatsumaru: assignment is the same no matter what the value. `x = y` always makes there be 2 names referring to the same underlying object, no matter what kind of object it is. It's just for immutable objects like integers you can't really tell
[21:41:51] *** Quits: Moosadee (~Moosadee@216.185.233.27) (Client Quit)
[21:42:55] <bjs> tatsumaru: really the key point is that objects don't live "in" variables, but rather variables are just tags/names for objects and one object might have many names.
[21:43:47] *** Joins: peteyboy_ (~peteyboy1@95.169.226.66)
[21:43:58] *** Quits: jay-m1261 (~jay-m@gateway/vpn/pia/jay-m126) (Ping timeout: 272 seconds)
[21:43:58] *** Quits: jay-m126 (~jay-m@gateway/vpn/pia/jay-m126) (Ping timeout: 272 seconds)
[21:44:21] <tatsumaru> so you are just binding a name to an object rather than assigning anything
[21:44:36] *** Quits: jay-m126_ (~jay-m@gateway/vpn/pia/jay-m126) (Ping timeout: 272 seconds)
[21:44:42] <bjs> tatsumaru: well binding a name to an object is exactly what assigning means, at least in Python
[21:45:07] *** Joins: bluedust (~bluedust@117.193.120.37)
[21:45:15] <tatsumaru> a lot of programming tutorials emphasize this notion how variables are boxes and you put stuff inside which seems misleading in light of what was just explained
[21:45:36] <bjs> tatsumaru: if they are tutorials for different programming languages then they might not be misleading
[21:45:57] *** Quits: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2) (Ping timeout: 240 seconds)
[21:46:14] *** Joins: tobybl (~tobybl@252.193.115.87.dyn.plus.net)
[21:46:28] *** Quits: bjourne (~bjourne@2001:6b0:1:1140:42bf:ff4:f8fa:50e5) (Quit: Konversation terminated!)
[21:46:51] *** Quits: bluedust (~bluedust@117.193.120.37) (Remote host closed the connection)
[21:46:55] <bjs> But otherwise yeah, for Python it is misleading.  But lots of tutorials especially ones aimed for new programmers oversimplify things, as to explain how things 'really' work can sometimes be too much work
[21:47:45] *** Joins: minip (~minip@user/minip)
[21:48:00] <tatsumaru> int not being mutable, is that an implementation decision or just a CS fundamental
[21:48:51] <bjs> tatsumaru: it's a decision.
[21:49:27] <tatsumaru> bjs is this why I get an error sometimes saying 'int is not iterable'
[21:49:34] <bjs> tatsumaru: no that's because ints are not iterable
[21:49:40] <bjs> you can't go `for x in 42: ...`
[21:49:59] <bjs> iteration is a fancy name for looping
[21:50:00] <Wooble> tatsumaru: tuples are both immutable and iterable, for example.
[21:50:08] <Wooble> (and strings)
[21:50:13] *** Quits: roxfan (~roxfan@2a02:a03f:a2be:4f00:e18f:706f:27a:7b36) (Ping timeout: 240 seconds)
[21:50:19] *** Joins: kristijonas_ (~kristijon@m83-179-35-123.cust.tele2.lt)
[21:50:34] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[21:50:38] *** Quits: tetravus (~tetravus@c-71-231-69-112.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[21:50:47] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[21:50:51] <tatsumaru> bjs: in that example 'for x in 42' isn't x what gets iterated ?
[21:51:05] <bjs> tatsumaru: `for x in y` then we are looping over y.
[21:51:15] <bjs> like "for each element of y and call it x"
[21:51:17] *** Quits: MajorBiscuit (~MajorBisc@c-001-015-039.client.tudelft.eduvpn.nl) (Ping timeout: 240 seconds)
[21:51:55] <tatsumaru> so essentially you are being told that 42 isn't range(1,43) ?
[21:52:12] *** Quits: tWqaq (~tWqaq@240e:389:5d1c:ff00:25be:b2b1:4d59:690c) (Ping timeout: 240 seconds)
[21:52:29] <bjs> tatsumaru: well, I'm not sure that's quite what it is saying.  range(1,43) is an iterable that has some relation to 42 sure
[21:52:49] *** Quits: kristijonas (~kristijon@81-7-103-234.static.zebra.lt) (Ping timeout: 256 seconds)
[21:53:28] *** Quits: Iolo (~iolo@dsl-tkubng22-58c02b-220.dhcp.inet.fi) (Quit: Leaving)
[21:53:53] <bjs> tatsumaru: the error is really just saying what went wrong, you tried to loop over the elements of an int but ints don't have elements;  maybe *you* meant to write range(1,43) instead but Python doesn't know that.
[21:54:06] <rama> I have a json object and I need to figure out how large in bytes some of the values are, I think doing len(json.dumps(foo['list'].encode('utf-8'))) would be give me the size in bytes from the response right?
[21:54:31] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[21:54:42] *** Joins: mattz (~mattz@49.38.226.195)
[21:56:09] *** Quits: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net) (Ping timeout: 252 seconds)
[21:56:10] <tatsumaru> bjs: oh I get it now, so iterable doesn't mean incrementable, but rather being able to provide a range to iterate upon?
[21:56:29] *** Joins: junktext_ (~junktext@gateway/vpn/pia/junktext)
[21:56:41] <bjs> tatsumaru: well ["hello", "world"] is iterable for example (all lists are).  But I wouldn't say it has a "range"
[21:56:42] *** Quits: magla (~gelignite@d53619a1.access.ecotel.net) (Read error: Connection reset by peer)
[21:56:56] <bjs> just that it has elements, which you can use `for` to loop over each of
[21:57:16] *** Joins: magla (~gelignite@d53619a1.access.ecotel.net)
[21:57:16] *** Joins: Hanii (~textual@2a00:23c5:c583:a300:8d8a:6655:4952:94de)
[21:57:24] *** Quits: ejjfunky (~ejjfunky@125.164.20.168) (Ping timeout: 240 seconds)
[21:57:37] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[21:57:39] <sveinse> tatsumaru: iterable is equivalent of "able to produce a sequence of something". range() is able to produce a sequence of number and thus is iterable. The number 42 is not a sequence
[21:57:42] *** Quits: nicoz (nicoz@ubuntu/member/nicoz) (Quit: Pang timeout)
[21:57:47] <Wooble> rama: yes, assuming they were actually encoded in utf-8 in the response instead of unicode escapes (which are more common)
[21:57:57] *** Quits: junktext (~junktext@gateway/vpn/pia/junktext) (Ping timeout: 240 seconds)
[21:58:30] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[21:58:50] *** Quits: tobybl (~tobybl@252.193.115.87.dyn.plus.net) (Read error: Connection reset by peer)
[21:58:57] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[21:59:00] *** Joins: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2)
[21:59:57] *** Joins: mat001 (~mat001@c-71-202-208-88.hsd1.ca.comcast.net)
[22:00:20] <noarb> when I try to install 'asyncari' from pypi, I get this error about h11, which pip says it already installed just above: https://bpa.st/5B6A in a fresh virtual environment
[22:00:22] *** Joins: stockh0lm (~Andreas@p200300d2c70bf80011ea30bacc71c432.dip0.t-ipconnect.de)
[22:00:29] <han-solo> o'm not sure that `json.dumps` will work there
[22:00:31] <han-solo> or needed
[22:00:40] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:00:43] *** Joins: rje_ (~textual@50.35.241.164)
[22:00:45] *** Quits: mattz (~mattz@49.38.226.195) (Ping timeout: 256 seconds)
[22:00:45] *** Joins: Iolo (~iolo@dsl-tkubng22-58c02b-220.dhcp.inet.fi)
[22:00:45] <rama> Wooble: its weird, im trying to confirm if the size that is calculated is close to the `content-length` that the API returns in its headers, and it looks off
[22:01:03] <bjs> rama: well there may be many JSON strings of different lengths that correspond to the same object
[22:01:49] *** Quits: justAstache (~justache@user/justache) (Ping timeout: 240 seconds)
[22:01:49] <bjs> rama: '{"x": 1}' and '{  "x"  : 1  }'   give the same object, but are different lengths
[22:01:53] *** dcaro is now known as dcaro_away
[22:02:12] <bjs> if you want to know the length of the original data, can't you just get the raw bytes of the original thing
[22:02:43] <Wooble> yeah but if you're looking at the individual values then you need to parse json yourself to find them
[22:02:52] *** Quits: qlixed (~qlixed@181.44.129.13) (Remote host closed the connection)
[22:03:06] *** Joins: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net)
[22:03:31] *** Quits: trace987 (~trace@user/trace) (Remote host closed the connection)
[22:03:36] *** Quits: rje (~textual@50.35.241.164) (Ping timeout: 272 seconds)
[22:03:41] *** Joins: nicoz (nicoz@nicoz.letz.dev)
[22:04:10] <rama> I was trying to avoid using `sys.getsizeof` because that will give me the size of the object rather than the json string, is this correct?
[22:04:58] <bjs> rama: that is correct
[22:05:17] <bjs> if you want to know how many bytes there were in the original data you have to go get the original data
[22:05:30] *** Quits: rje_ (~textual@50.35.241.164) (Ping timeout: 272 seconds)
[22:05:35] <bjs> because like i say, there can be many lumps of bytes that correspond to the same Python object once decoded
[22:05:40] <bjs> and you can't go backwards
[22:05:45] <rama> gotcha
[22:05:50] <jinsun__> noarb: it just says Collecting h11, that doesn't mean it is installed, and the venv where the build happens may not be the same as the venv where you are installing the package
[22:06:04] <bjs> rama: but I guess it's unusual to need to know/check exactly
[22:06:07] <rama> alright i think then messing with the resp.content and leaving it in bytes form will get me closer to where i want to be.
[22:06:24] <bjs> because normally once you have the Python object anything about bytes and content-lengths are long in the past and irrelevant
[22:07:14] <tatsumaru> bjs if int is immutable, does that mean that 1 + 1 doesn't mutate 1, but rather somehow just creates a new object?
[22:07:22] <bjs> tatsumaru: yes that is correct
[22:07:46] <Wooble> tatsumaru: (except probably the 2 object already exists and is reused, but that's an implementation detail)
[22:08:10] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[22:08:29] <tatsumaru> I see, thanks
[22:09:29] *** Joins: justAstache (~justache@user/justache)
[22:11:22] *** Quits: vladoski (~vladoski@2001:b07:add:d406:3f91:d489:96a3:e23b) (Remote host closed the connection)
[22:11:59] *** Joins: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder)
[22:12:03] *** Joins: c4017w_ (~c4017@209.52.68.8)
[22:12:27] <rama> bjs: if you run `resp2 = requests.get('https://api.github.com/users/defunkt')` there is a difference in the resp.content `1175 bytes` and the `content-length``483` is that because the data is compressed? or am i missing something still?
[22:13:32] *** Joins: aslicedbanjo (~aslicedba@host86-160-16-90.range86-160.btcentralplus.com)
[22:13:47] <LyndsySimon> Sorta off-topic, but I thought this might be a good place to ask - does anyone here have a "system" that they use to manage, sort, and automatically respond to inbound emails from recruiters?
[22:14:15] *** Parts: aslicedbanjo (~aslicedba@host86-160-16-90.range86-160.btcentralplus.com) ()
[22:14:35] *** Quits: mcleuder_ (~mcleuder@gateway/tor-sasl/mcleuder) (Ping timeout: 240 seconds)
[22:14:38] *** Joins: aslicedbanjo (~aslicedba@host86-160-16-90.range86-160.btcentralplus.com)
[22:14:43] <rama> LyndsySimon: I dont, but i wish i did i've been getting more and more of these emails in the last few weeks, perhaps your email provider has filters and rules that you can use?
[22:15:29] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 256 seconds)
[22:15:37] *** Joins: Viewday115 (~Viewday@user/viewday)
[22:15:47] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[22:16:07] <LyndsySimon> rama: They definitely do. I've set up a response template in the client that I use to access my gmail account, which is where most of these are ending up. I'm wondering if there is a service out there that does something like this, though. If there isn't, I'm also wondering if I should build one :)
[22:17:05] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[22:17:06] *** Viewday115 is now known as Viewday11
[22:17:25] <LyndsySimon> Basically, I want to respond with my current contact information, a brief list of my most relevant skills, a link to my profiles, my requirements for the role and compensation, and a means of "bypassing" my automation if the person on the other end still thinks it might be a valuable conversation.
[22:18:16] *** Joins: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com)
[22:18:49] *** Quits: undt (~undt@cpc84379-newc18-2-0-cust110.16-2.cable.virginm.net) (Ping timeout: 272 seconds)
[22:19:30] <dba> Curious to know why sometimes this error is thrown `OSError: [Errno 22] Invalid Argument: 'stats.json'` which caused by this line of code `with open('stats.json', 'w') as f:`
[22:19:40] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Remote host closed the connection)
[22:20:00] *** Joins: Guest767 (~Guest767@88.103.7.38)
[22:20:13] *** Joins: Staunch (~Staunch@137.83.202.22)
[22:21:08] <Wooble> dba: can you pastebin the full traceback?
[22:21:19] *** Joins: Viewday115 (~Viewday@user/viewday)
[22:21:39] <han-solo> rama: https://github.com/psf/requests/issues/5319#issuecomment-575946480
[22:21:46] *** Joins: harpia (~harpia@2804:2aec:205:4600:b62e:99ff:fee9:cc51)
[22:22:00] *** Parts: tatsumaru (~tatsumaru@82.147.131.155) ()
[22:22:05] *** Joins: Cera (~Cera@user/Cera)
[22:22:21] *** Joins: tWqaq (~tWqaq@101.93.138.74)
[22:22:25] <han-solo> `requests.get('https://api.github.com/users/defunkt', headers={"Accept-Encoding": "identity"})` # works
[22:22:47] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[22:22:47] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Read error: Connection reset by peer)
[22:22:47] *** Viewday115 is now known as Viewday11
[22:22:54] *** Joins: Lando-HoloNet (~Lando-Spa@user/lando-spacepimp)
[22:24:11] *** Quits: weedmic_ (~weedmic@93-173-109-49.bb.netvision.net.il) (Quit: Konversation terminated!)
[22:25:40] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[22:26:17] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[22:26:34] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[22:27:45] *** Joins: Viewday112 (~Viewday@user/viewday)
[22:27:59] *** Quits: yourfate (~yourfate@cabal.yourfate.org) (Read error: Connection reset by peer)
[22:29:23] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[22:29:24] *** Viewday112 is now known as Viewday11
[22:30:07] *** Joins: rje (~textual@65.141.156.170)
[22:30:11] *** Joins: trace987 (~trace@user/trace)
[22:30:17] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 240 seconds)
[22:31:14] <wyre> taeaad, did you check the link with examples I pasted?
[22:31:58] <wyre> have you tried dictConfig?
[22:33:19] <wyre> if you are able to log the outputs to a file you should be able to dump them in the stdout
[22:33:34] <wyre> just you have to set the handlers for your logger properly
[22:33:48] *** Joins: CodePoint (~CodePoint@173-160-94-242-atlanta.hfc.comcastbusiness.net)
[22:34:29] *** Quits: ebrau (~ebrau@142.126.175.200) (Ping timeout: 256 seconds)
[22:35:26] <wyre> as you can see in those examples ... every logger (even the root logger) has its handler, and every handler has its formatter (among other attributes as the level)
[22:37:08] *** Joins: betuxy (~betuxy@p579adb74.dip0.t-ipconnect.de)
[22:37:11] *** Joins: Stench (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[22:37:53] *** Quits: peteyboy_ (~peteyboy1@95.169.226.66) (Ping timeout: 256 seconds)
[22:37:55] <wyre> s/handler/handler\(s\)/
[22:38:11] *** Joins: undt (undt@gateway/vpn/protonvpn/undt)
[22:38:34] <betuxy> Hey guys I want to communicate with haproxy via a unix socket, the socket works as i can use it with e.g. socat, whats wrong? https://termbin.com/d790 ps I have little to no idea what I'm doing
[22:38:40] *** Stench is now known as Staunch_
[22:38:40] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[22:38:50] *** Quits: gambl0re (~gambl0re@2607:fea8:a59f:c360::4f67) (Ping timeout: 260 seconds)
[22:39:55] *** Joins: Mani2 (~yaaic@2a01:5ec0:7803:f63a:1d38:f53d:f1a:36ab)
[22:40:27] <meejah> betuxy: i would use a networking framework, not raw socket calls (e.g. Twisted is a good async one)
[22:40:41] *** Joins: matinababsi (~yaaic@37.254.226.140)
[22:40:58] *** Quits: Staunch (~Staunch@137.83.202.22) (Ping timeout: 272 seconds)
[22:41:09] <matinababsi> hello
[22:41:38] <exarkun> betuxy: Twisted has a HAProxy PROXY protocol implementation, if that's the way you wanted to talk to HAProxy - https://twistedmatrix.com/documents/current/api/twisted.protocols.haproxy.html
[22:41:44] *** Quits: Iolo (~iolo@dsl-tkubng22-58c02b-220.dhcp.inet.fi) (Remote host closed the connection)
[22:42:35] *** Joins: rickybob2 (~rickybob@gateway/vpn/pia/rickybob)
[22:44:03] *** Joins: wisep__ (~rickybob@gateway/vpn/pia/rickybob)
[22:44:13] <betuxy> mostly as a project to get into programming i wanted to build a client application to talk to the haproxy api
[22:44:19] <Mani2> متین
[22:44:21] <Mani2> خخخ
[22:46:23] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 256 seconds)
[22:46:25] *** Quits: tWqaq (~tWqaq@101.93.138.74) (Ping timeout: 256 seconds)
[22:46:48] *** Quits: Mani2 (~yaaic@2a01:5ec0:7803:f63a:1d38:f53d:f1a:36ab) (Quit: Yaaic - Yet another Android IRC client - http://www.yaaic.org)
[22:47:00] *** Quits: rickybob2 (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 240 seconds)
[22:47:23] <exarkun> betuxy: You can't really learn network programming from the Python documentation.  It just doesn't have all of the information.  It assumes you will learn some of the basics from elsewhere.
[22:47:31] *** Quits: Elzington (~Elzington@68.235.43.22) (Ping timeout: 256 seconds)
[22:47:54] <exarkun> betuxy: https://www.amazon.com/UNIX-Network-Programming-Richard-Stevens/dp/0139498761 was the canonical resource for many years.  It is still probably quite relevant.  I haven't learned around to see if there is anything better these days, though.
[22:48:10] <taeaad> wyre: I did check it yes.
[22:48:24] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Quit: jmiehe)
[22:48:38] <exarkun> betuxy: Notably, it uses C and not Python for its examples.
[22:49:06] *** Quits: brentaarnold (~brentaarn@24.112.92.157) (Ping timeout: 260 seconds)
[22:49:18] <exarkun> betuxy: If you want to stick with just Python, then you could _read_ Twisted instead of using it.  It encodes a lot of lessons about network programming in its implementation and test suite.
[22:49:19] *** Joins: Elzington (~Elzington@87.249.134.31)
[22:49:55] <betuxy> exarkun: yeah I feel theres no way around me for using C to get more in depth info I'll look into the book, thanks for the recommendation
[22:50:08] <taeaad> My objective is just to write to a file for this example. The stdout was a workaround because I thought that I can't alter the function in the SDK. But it seems like I don't have to alter the function, I should just have basicConfig(filename=x, level=logging.INFO) instead of basicConfig(level=logging.INFO).
[22:50:30] <akk> It would probably be a good exercise to read the book and try implementing the C examples in python.
[22:50:52] <taeaad> But for more involved usage, I'd use dictConfig.
[22:50:58] *** Joins: favreje (~jeff@170.249.173.67)
[22:51:07] *** Joins: Iolo (~iolo@dsl-tkubng22-58c02b-220.dhcp.inet.fi)
[22:51:31] *** Joins: k2ro (~k2ro@p5b175bd7.dip0.t-ipconnect.de)
[22:53:21] *** Joins: crashrep (~crashrep@user/crashrep)
[22:53:33] *** Joins: data68 (~data@2a02:908:a65:3d80:86a:91a8:c0b0:ced9)
[22:53:51] *** Quits: Masterphi (~Masterphi@user/masterphi) (Quit: Masterphi)
[22:56:09] *** Parts: water_27300935_ (~water_273@182.90.128.77) (WeeChat 3.4)
[22:56:32] *** Quits: blei (~blei@user/blei) (Quit: Client closed)
[22:57:24] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 240 seconds)
[22:57:52] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[22:58:06] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[22:59:35] *** Joins: howdoi (uid224@id-224.lymington.irccloud.com)
[22:59:45] <wyre> taeaad, here an example of setting a handler without using dictConfig 😜 https://bpa.st/ROZA
[23:00:01] *** Joins: lbalhar (~lbalhar@89-24-44-21.nat.epc.tmcz.cz)
[23:00:42] <wyre> I guess you could customize also your own StreamHandler :)
[23:01:01] <wyre> and add it to your root logger
[23:01:25] *** Joins: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be)
[23:01:52] *** Joins: tmm88 (~tmm88@user/tmm88)
[23:04:35] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Quit: Leaving)
[23:04:59] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[23:06:14] *** Quits: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[23:06:40] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.4)
[23:07:17] <wyre> well, I'm not sure if you could add it tho the root logger without using dictConfig ... but you can create a logger object easily
[23:07:36] <wyre> s/tho/to
[23:08:23] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[23:08:48] *** Joins: jazzy (~jaziz@user/jaziz)
[23:08:57] *** Quits: tmm88 (~tmm88@user/tmm88) (Quit: Lost terminal)
[23:09:03] *** Joins: zeden (~zeden@user/zeden)
[23:09:58] *** Quits: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder) (Quit: WeeChat 3.3)
[23:10:36] *** Quits: wisep__ (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 240 seconds)
[23:10:55] <wyre> taeaad, something like that worked for me https://asciinema.org/a/H4I2eVun0kYnDX1HSsF7QiLhz
[23:11:01] *** Quits: dld (~davidlowr@73.61.9.48) (Ping timeout: 256 seconds)
[23:11:32] *** Quits: zeden (~zeden@user/zeden) (Client Quit)
[23:12:36] *** Quits: arinov_ (~arinov@213.194.126.155) (Ping timeout: 240 seconds)
[23:12:44] *** Joins: c4017w__ (~c4017@209.52.68.8)
[23:12:47] *** Joins: dld (~davidlowr@73.61.8.74)
[23:13:26] *** Joins: PJBoy (~PJBoy@user/pjboy)
[23:14:31] *** Quits: paul424 (~tom@ip-5-172-234-25.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[23:14:55] *** Joins: Viewday117 (~Viewday@user/viewday)
[23:14:56] *** Quits: jamea (~jamea@10.189-202-213.bestelclientes.com.mx) (Ping timeout: 245 seconds)
[23:15:25] *** Quits: JanC (~janc@user/janc) (Remote host closed the connection)
[23:15:40] *** Joins: JanC (~janc@user/janc)
[23:16:07] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[23:16:59] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[23:17:00] *** Viewday117 is now known as Viewday11
[23:17:40] *** Joins: parv (~quass@user/parv)
[23:18:57] *** Quits: kristijonas_ (~kristijon@m83-179-35-123.cust.tele2.lt) (Ping timeout: 256 seconds)
[23:20:24] *** Quits: gtk2 (~gtk2@snf-885513.vm.okeanos.grnet.gr) (Quit: leaving)
[23:20:38] *** Quits: vbgunz (~vbgunz@35.141.71.47) (Remote host closed the connection)
[23:20:55] *** Joins: kristijonas_ (~kristijon@m83-179-35-123.cust.tele2.lt)
[23:21:01] *** Joins: rickybob2 (~rickybob@gateway/vpn/pia/rickybob)
[23:21:40] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:22:15] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[23:22:37] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[23:23:03] *** Quits: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr) (Ping timeout: 268 seconds)
[23:23:33] *** Quits: han-solo (~hanish@user/han-solo) (Quit: leaving)
[23:24:06] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 250 seconds)
[23:24:26] *** Lord_of_Life_ is now known as Lord_of_Life
[23:24:37] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[23:24:42] *** Joins: funhouse (~funhouse@user/funhouse)
[23:25:16] *** Joins: vbgunz (~vbgunz@35.141.71.47)
[23:25:36] *** Quits: powftw (uid448161@id-448161.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[23:25:43] *** Quits: matinababsi (~yaaic@37.254.226.140) (Quit: Yaaic - Yet another Android IRC client - http://www.yaaic.org)
[23:26:14] *** Joins: Pickchea (~private@user/pickchea)
[23:26:55] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 240 seconds)
[23:29:24] *** Joins: bahamas (~lucian@84.232.140.52)
[23:29:52] *** Joins: ThePhilgrim (~ThePhilgr@151.41.9.171)
[23:30:51] *** Quits: CodePoint (~CodePoint@173-160-94-242-atlanta.hfc.comcastbusiness.net) (Ping timeout: 256 seconds)
[23:32:19] *** Joins: wisep__ (~rickybob@gateway/vpn/pia/rickybob)
[23:32:31] *** Quits: junktext_ (~junktext@gateway/vpn/pia/junktext) (Remote host closed the connection)
[23:32:39] *** Quits: BASHitup (~richard@user/yippeekaiyay) (Quit: WeeChat 2.8)
[23:32:43] *** Quits: ThePhilgrim (~ThePhilgr@151.41.9.171) (Client Quit)
[23:32:48] *** Joins: crashrip (~crashrep@user/crashrep)
[23:32:58] *** Joins: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec)
[23:33:18] *** Joins: ThePhilgrim (~ThePhilgr@151.41.9.171)
[23:33:37] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 240 seconds)
[23:33:40] *** Joins: junktext_ (~junktext@gateway/vpn/pia/junktext)
[23:33:49] *** Quits: CombatVet (~c4@user/combatvet) (Remote host closed the connection)
[23:34:05] *** Joins: CombatVet (~c4@user/combatvet)
[23:34:26] <hodapp> hrmph... in pudb, is there any clear way to tell it "no, really, actually actually quit"? I seem to be running into annoyances with a big distributed whatever in Dask where processes keep resurrecting each other
[23:34:40] <hodapp> so I have to smash 'q' and Ctrl-C over and over mostly
[23:35:11] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[23:35:26] *** Quits: rickybob2 (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 272 seconds)
[23:36:16] *** Quits: kristijonas_ (~kristijon@m83-179-35-123.cust.tele2.lt) (Remote host closed the connection)
[23:36:26] *** Joins: kristijonas (~kristijon@m83-179-35-123.cust.tele2.lt)
[23:37:36] *** Quits: wisep__ (~rickybob@gateway/vpn/pia/rickybob) (Read error: Connection reset by peer)
[23:37:38] *** Joins: Fubbe (~ThePhilgr@151.41.9.171)
[23:38:15] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Client Quit)
[23:38:21] *** Quits: Fubbe (~ThePhilgr@151.41.9.171) (Client Quit)
[23:38:24] *** Quits: ThePhilgrim (~ThePhilgr@151.41.9.171) (Quit: ThePhilgrim)
[23:39:00] *** Joins: ThePhilgrim (~ThePhilgr@151.41.9.171)
[23:39:16] *** Joins: CodePoint (~CodePoint@173-160-94-242-atlanta.hfc.comcastbusiness.net)
[23:39:19] *** Joins: Fubbe (~ThePhilgr@151.41.9.171)
[23:40:20] *** Quits: Fubbe (~ThePhilgr@151.41.9.171) (Client Quit)
[23:40:24] *** Quits: ThePhilgrim (~ThePhilgr@151.41.9.171) (Client Quit)
[23:40:42] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[23:41:31] *** Joins: arinov (~arinov@31.143.82.208)
[23:43:20] *** Quits: vulpes_vulpes (~vulpes_vu@62-64-207-88.dynamic.dial.as9105.com) (Remote host closed the connection)
[23:43:30] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[23:44:50] *** Joins: ThePhilgrim (~ThePhilgr@151.41.9.171)
[23:45:49] *** Quits: ThePhilgrim (~ThePhilgr@151.41.9.171) (Client Quit)
[23:46:07] *** Joins: ThePhilgrim (~ThePhilgr@151.41.9.171)
[23:46:27] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[23:47:06] *** Quits: millido (~millido@84.210.150.128) (Quit: ZNC 1.8.2 - https://znc.in)
[23:47:14] *** Quits: k2ro (~k2ro@p5b175bd7.dip0.t-ipconnect.de) (Quit: k2ro)
[23:47:33] *** Joins: rickybob2 (~rickybob@gateway/vpn/pia/rickybob)
[23:47:37] *** Quits: sleepingforest (~sleepingf@pool-96-235-63-235.pitbpa.east.verizon.net) (Ping timeout: 240 seconds)
[23:48:51] *** Joins: roxfan (~roxfan@2a02:a03f:a2be:4f00:e18f:706f:27a:7b36)
[23:50:38] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 272 seconds)
[23:50:43] *** Joins: k2ro (~k2ro@p5b175bd7.dip0.t-ipconnect.de)
[23:51:33] *** Quits: trace987 (~trace@user/trace) (Ping timeout: 256 seconds)
[23:52:12] *** Joins: wisep__ (~rickybob@gateway/vpn/pia/rickybob)
[23:52:37] *** Quits: amogorkon (~amogorkon@port-92-196-27-200.dynamic.as20676.net) (Ping timeout: 240 seconds)
[23:52:41] *** Quits: jpodivin (~jpodivin@cgnat44-pool3-71-1.poda.cz) (Ping timeout: 256 seconds)
[23:53:34] *** Quits: lbalhar (~lbalhar@89-24-44-21.nat.epc.tmcz.cz) (Ping timeout: 250 seconds)
[23:54:45] *** Joins: flok (~flok@keetweej.vanheusden.com)
[23:55:17] <flok> afaik SDL on python is not thread safe. pygame neither. does anyone know of a framework like that which *is* thread safe in python?
[23:55:36] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[23:55:48] *** Quits: rickybob2 (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 240 seconds)
[23:57:42] *** Joins: trace987 (~trace@user/trace)
[23:57:54] <supakeen> Most graphics back ends tend to be unsafe in concurrent access as the screen (or its buffer) is shared state.
[23:58:20] <supakeen> I'm not familiar with any Python bindings that were to prevent that.
[23:58:45] <flok> ok but the biggest hurddle I'm seeing is that SDL also has problems (apparently) threading screen & keyboard access
[23:58:57] *** Quits: Z-cat (~Z-cat@user/z-cat) (Ping timeout: 250 seconds)
[23:59:00] <hodapp> a lot of them are also pretty oriented around event loops
[23:59:44] *** Quits: Deneb (~johnch@245.82.159.143.dyn.plus.net) (Quit: Leaving)
[23:59:53] <flok> for me it is fine if all graphic-output must be done in 1 thread, as long as I can do keyboard in an other
