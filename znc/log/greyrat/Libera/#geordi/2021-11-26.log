[01:40:13] *** Joins: Cyp_ (~cyp@213.237.85.9)
[01:43:51] *** Quits: Cyp (~cyp@192038135092.mbb.telenor.dk) (Ping timeout: 250 seconds)
[03:20:56] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 260 seconds)
[03:22:20] *** Joins: X-Scale` (~ARM@31.22.203.240)
[03:23:31] *** X-Scale` is now known as X-Scale
[09:11:02] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[15:18:28] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[15:18:48] *** Joins: greyrat_ (~greyrat@ip202.ip-51-178-215.eu)
[15:20:47] *** Server sets mode: +nt 
[15:24:36] *** Joins: Griwes_ (~griwes@znc.reaver-project.org)
[15:25:46] *** Joins: enrico_ (~enrico@debian/enrico)
[15:25:59] *** Quits: Griwes (~griwes@znc.reaver-project.org) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: enrico (~enrico@debian/enrico) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: X-Scale (~ARM@31.22.203.240) (Ping timeout: 260 seconds)
[15:26:01] *** Quits: greenbagels (~gb@user/greenbagels) (Ping timeout: 260 seconds)
[15:26:06] *** X-Scale` is now known as X-Scale
[15:33:02] *** Joins: greenbagels (~gb@user/greenbagels)
[19:00:59] *** Joins: great_taste (~great_tas@190.32.235.20)
[19:13:19] *** Joins: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl)
[19:15:26] <CarloWood> { A a; cout << a.o; } struct B {}; struct A : virtual B { int x; int y; static int const o; }; int A::o = offsetof(A, y);
[19:15:26] <geordi> error: conflicting declaration 'int A::o'
[19:15:34] <CarloWood> { A a; cout << a.o; } struct B {}; struct A : virtual B { int x; int y; static int const o; }; int const A::o = offsetof(A, y);
[19:15:34] <geordi> warning: 'offsetof' within non-standard-layout type 'A' is conditionally-supported
[19:15:40] <CarloWood> :/
[19:32:11] <CarloWood> { A a; cout << a.o; } struct B {}; struct A : B { int x; int y; static int const o; }; int const A::o = offsetof(A, y);
[19:32:11] <geordi> 4
[19:32:38] <CarloWood> { A a; cout << a.o; } struct B { virtual ~B() = default; }; struct A : B { int x; int y; static int const o; }; int const A::o = offsetof(A, y);
[19:32:39] <geordi> warning: 'offsetof' within non-standard-layout type 'A' is conditionally-supported
[19:36:22] <CarloWood> { A a; cout << a.o; } struct B { int al }; struct A : B { int x; int y; static int const o; }; int const A::o = offsetof(A, y);
[19:36:22] <geordi> error: expected ';' at end of member declaration (fix known)
[19:36:31] <CarloWood> { A a; cout << a.o; } struct B { int a; }; struct A : B { int x; int y; static int const o; }; int const A::o = offsetof(A, y);
[19:36:31] <geordi> warning: 'offsetof' within non-standard-layout type 'A' is conditionally-supported
[19:36:43] <CarloWood> Conclusion: offsetof is useless.
[20:39:59] <Eelis> extrapolation from "this thing doesn't do the specific thing i need" to "this thing couldn't possibly be useful to anyone" is the #1 logical fallacy in the C++ world
[20:40:29] <Eelis> progressing beyond that fallacy is a sign of C++ maturity
[22:00:12] *** Griwes_ is now known as Griwes
[22:16:06] <CarloWood> { C c; auto p = c.b(); cout << p->n; } class A { int n; A(int _n) : n(_n) {} }; class B { public: int n; B(int _n) : n(_n) {} } class C : protected A, private B { C() : A(1), B(42) {} B const* b() const { return static_cast<B const*>(this); } };
[22:16:06] <geordi> error: expected ';' after class definition (fix known)
[22:16:32] <CarloWood> geordi: fix
[22:16:33] <geordi> error: 'A::A(int)' is private within this context
[22:16:53] <CarloWood> geordi: replace class A with struct A
[22:16:53] <geordi> error: 'C::C()' is private within this context
[22:17:15] <CarloWood> geordi: replace class C with struct C
[22:17:15] <geordi> 42
[22:17:20] <CarloWood> geordi: show
[22:17:21] <geordi> { C c; auto p = c.b(); cout << p->n; } struct A { int n; A(int _n) : n(_n) {} }; class B { public: int n; B(int _n) : n(_n) {} }; struct C : protected A, private B { C() : A(1), B(42) {} B const* b() const { return static_cast<B const*>(this); } };
