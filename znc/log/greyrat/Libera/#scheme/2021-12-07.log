[00:18:30] *** Joins: poselyqualityles (poselyqual@user/poselyqualityles)
[00:19:11] *** Joins: badkins (~badkins@136.56.92.199)
[00:19:33] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[00:20:04] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[00:20:24] *** Joins: gproto23 (~gproto23@user/gproto23)
[00:23:49] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[00:27:17] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 252 seconds)
[00:27:19] *** Joins: cjb (~cjb@user/cjb)
[00:33:25] <dpk> hey, some popular gaming YouTuber played my OpenTTD map. last year. only just found out https://youtube.com/watch?v=R4mLWj5Syno&feature=share
[00:35:35] <dpk> oops. wrong channel. still cool though
[00:36:18] *** Joins: badkins (~badkins@136.56.92.199)
[00:41:12] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 268 seconds)
[00:47:49] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[00:50:03] *** Joins: aeth (~aeth@user/aeth)
[00:53:51] *** Joins: livoreno (~livoreno@user/notzmv)
[01:01:19] *** Joins: badkins (~badkins@136.56.92.199)
[01:06:36] *** Joins: seninha (~seninha@user/seninha)
[01:21:23] *** Quits: wnklmnn (~wnklmnn@2a02:908:4e2:9740:2d8:61ff:fef9:b4c2) (Quit: Leaving)
[01:31:28] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[01:39:53] *** Quits: zwr (~zwr@2804:d45:b966:fb00:ed3f:2af5:12bc:dd1e) (Ping timeout: 252 seconds)
[01:40:30] *** Joins: zwr (~zwr@2804:d45:b966:fb00:c5d2:58a5:f5c6:cdea)
[01:44:24] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[01:58:01] *** Quits: cybersyn (~user@58.186.53.104) (Remote host closed the connection)
[01:58:23] *** Joins: livoreno (~livoreno@user/notzmv)
[02:00:52] *** Quits: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6) (Ping timeout: 265 seconds)
[02:01:20] *** Joins: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6)
[02:04:14] <taw10> Zipheir: are you posting your solutions anywhere? Here are mine: https://github.com/taw10/advent-of-code/tree/main/2021 (spoilers, duh)
[02:06:43] *** Quits: winning-luser (~c@2601:8c1:80:70d0::756) (Remote host closed the connection)
[02:15:26] <skeemer__> Zipheir, what is the scheme implementation you prefer?
[02:22:15] <Franciman> their own, as we all do (kidding, sorry)
[02:22:21] <Zipheir> taw10: Thanks, nice to see some Scheme solutions.  I've been discussing the puzzles and their solutions at http://www.sigwinch.xyz/aoc/2021/index.html , gradually
[02:23:39] <Zipheir> skeemer__: Not that my opinion counts for much, but I usually end up using CHICKEN when I want to do anything using any libraries.  Chez is nice, but the library support doesn't compare.
[02:24:03] <Zipheir> s9fes is still the cleanest implementation I know of.
[02:25:52] <Franciman> inb4 Zipheir is the author of s9fes
[02:25:54] <Franciman> XD
[02:27:26] <Zipheir> Hah, I wish I could say that.  It's by Nils Holm https://t3x.org/s9fes/
[02:27:59] <Zipheir> It's an extremely clean implementation, although this is undercut a bit by its C-ness.
[02:27:59] <Franciman> ahahah thanks
[02:28:50] <Zipheir> It's also not even R5RS-compliant.
[02:30:50] <Franciman> oh it runs on plan9 too
[02:30:53] <Franciman> what a nicety
[02:44:35] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[02:51:58] *** Quits: madage (~madage@user/madage) (Remote host closed the connection)
[02:52:11] *** Joins: madage (~madage@user/madage)
[02:56:00] <skeemer__> Zipheir, your opinion counts for me :)
[02:56:09] *** Quits: jobol (~jobol@2a01:e34:ee5c:ee50:d6be:d9ff:fea3:db03) (Quit: Leaving)
[03:03:41] *** Joins: m455 (~m455@user/m455)
[03:07:22] *** Quits: civodul (~user@guix/contributor/civodul) (Quit: ERC (IRC client for Emacs 27.2))
[03:13:46] *** Joins: madagest (~madage@user/madage)
[03:14:35] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[03:14:50] *** Quits: gerund (~user@dsl-lprbng12-54f9b9-129.dhcp.inet.fi) (Remote host closed the connection)
[03:14:53] *** Quits: madage (~madage@user/madage) (Remote host closed the connection)
[03:15:07] *** Joins: badkins (~badkins@136.56.92.199)
[03:17:12] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[03:17:21] *** Joins: badkins (~badkins@136.56.92.199)
[03:26:57] *** Joins: s-liao (~s-liao@101.86.99.70)
[03:30:21] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:b0e7:974:38ed:f8cd)
[03:39:56] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[03:45:04] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[03:45:34] *** Joins: badkins (~badkins@136.56.92.199)
[03:50:25] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 252 seconds)
[03:52:37] *** Quits: tripfandango (~tripfanda@5.29.28.78) (Ping timeout: 240 seconds)
[03:58:38] *** Quits: evdubs (~evdubs@user/evdubs) (Remote host closed the connection)
[04:00:08] *** Joins: badkins (~badkins@136.56.92.199)
[04:00:51] <sonny> multiple return is just a list?
[04:01:21] <Zipheir> sonny: How so?
[04:01:34] <sonny> I was asking a question because I don't remember
[04:01:41] <sonny> how to return multiple values
[04:01:49] <Zipheir> (values x y z ...)
[04:02:01] <sonny> ah, right
[04:02:22] <Zipheir> You can also return a list, of course, especially if you don't want to deal with let-values, receive, et.c
[04:02:25] <Zipheir> *etc.
[04:05:08] <gwatt> multiple values has the potential to be faster but has poorly defined semantics
[04:05:38] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Ping timeout: 252 seconds)
[04:05:40] <Zipheir> Poorly defined?
[04:06:25] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[04:06:35] <Zipheir> Both R7 and R6 have informal and formal semantics for multiple values.  They seem well-understood enough to me.
[04:07:51] <Zipheir> If they didn't require special binding forms to handle, I'd be totally happy with them...
[04:09:22] <gwatt> Zipheir: I mean that any use of multiple values not inside of a call-with-values continuation is "an error", which is the same as C's nasal demons.
[04:09:22] *** Joins: evdubs (~evdubs@user/evdubs)
[04:09:51] <Zipheir> gwatt: OK.  Yes, that sucks.
[04:10:01] <Zipheir> Although it's a little clearer in R6.
[04:10:48] <Zipheir> I think that's fundamentally the same as my issue with them.  You can't replace a single-valued function with an MV function without rewriting everything around it.
[04:11:55] <Zipheir> Another issue is that they don't fit nicely with pattern matching.
[04:12:42] *** Joins: tfeb (~tfb@88.98.95.237)
[04:13:05] <gwatt> Even r6rs says: "The effect of passing an inappropriate number of values to such a continuation is undefined."
[04:14:18] <Zipheir> Oops, I misremembered.  That's unfortunate.
[04:15:28] *** Quits: tfeb (~tfb@88.98.95.237) (Client Quit)
[04:16:59] <xsperry> are we talking about CL or something else? because as far as I remember, old code will still work if you turn single-value function into a multiple vlaues one
[04:16:59] <Zipheir> Although this makes sense, since it allows implementations to decide how to handle that case.
[04:17:08] <Zipheir> xsperry: Scheme.
[04:17:18] <xsperry> oh sorry, I thought I was in #lisp
[04:17:40] <xsperry> didn't even know scheme had multiple values
[04:18:23] <Zipheir> Yes, since R5RS!
[04:18:47] <gwatt> I think the thing that R6RS cleaned up from R5RS is that `(values x)`  must be identical to `x`
[04:19:56] <Zipheir> In the sense that calling (lambda (x) (values x)) must be a valid with a continuation that expects a single value?
[04:20:27] <gwatt> I think that the following must hold: (eq? (values x) x)
[04:20:49] <Zipheir> That's even stronger, then.
[04:21:15] <xsperry> what about (eq? (values x y) x)?
[04:21:25] <Zipheir> Undefined!
[04:21:27] <gwatt> xsperry: nasal demons
[04:22:53] <Zipheir> gwatt: It's good that R6 clarified that, though I wonder what prompted it.
[04:23:28] <daviid> (eq? (values x y) x) should return #t 
[04:23:36] <Zipheir> Why?
[04:23:40] <daviid> why not
[04:24:48] <Zipheir> Formally, it's comparing two values of different types.  I'd say that should be an error.
[04:25:16] <gwatt> daviid: I think guile and chicken both work that way; they discard extra values when not in a mv context
[04:25:20] <Zipheir> (Preferably one that the compiler catches.)
[04:25:45] <Zipheir> That makes multiple values more bug-prone, IMO.
[04:26:08] <Zipheir> But I can see the convenience value.
[04:26:13] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (Remote host closed the connection)
[04:26:23] <daviid> no, it is not comparing teo values - when the 'consumer' only consumes one values (or less then ...), others should just be discarded
[04:26:26] <xsperry> both are reasonable. values could be treated like a tuple, in which case (eq? (values x y) x) doesn't make sense. or it could have CL semantics, where, without unpacking, (values x y) is treated the same as x 
[04:27:28] <Zipheir> daviid: I mean that that's essentially a type conversion from ⟨a, b⟩ to a.
[04:27:54] <daviid> gwatt: right, guile has been fixed to handle that situation, older guile version would (wrongly) raise an exception
[04:28:30] <Zipheir> It's not wrong per the standards to raise an exception.
[04:29:25] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[04:31:04] <daviid> it is definitely not a 'type conversion' - it should not raise an exception and return #t, nor aware of the 'standard', but if ... it (the std) should be fixed fixed :)
[04:32:41] <Zipheir> You're welcome to take that approach; plenty of Schemes do.
[04:33:18] <Zipheir> My preference is for no silent discarding of values.
[04:34:13] <gwatt> I personally like what go does with multpile values. You can embed a call to a function which returns multiple values inside a function call which expects multiple values and the compiler will put the return values into the call of the next function
[04:34:27] <gwatt> That of course requires some static knowledge of return types
[04:35:05] <Zipheir> Yes.  It's probably impossible with only dynamic types.
[04:37:40] <xsperry> so when would one use values over heterogeneous list?
[04:38:11] *** Joins: kennyd (~bc8165b6@cerf.good1.com)
[04:38:59] <Zipheir> The usual convention is to use values when the returned values are "distinct" in some way.  An example is partition from SRFI 1, which gives you a list of the ps and the not-ps.
[04:39:12] <Zipheir> *and a list of the not-ps.
[04:40:07] <Zipheir> xsperry: So I guess the answer is "when the list would be *too* heterogeneous".
[04:40:32] <Zipheir> And there are the alleged performance benefits of MVs over lists.
[04:40:41] <gwatt> It would be pretty funny if values were just lists. car+cdr would just return its argument
[04:42:45] <Zipheir> The standards also prefer values over fixed-length lists; e.g. floor/ from R7 returns the quotient and remainder as values, not a list.
[04:43:12] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[04:46:39] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 265 seconds)
[04:46:41] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:b0e7:974:38ed:f8cd) (Ping timeout: 256 seconds)
[04:49:00] *** Joins: skapata (~Skapata@user/skapata)
[04:51:17] *** Quits: sonny (~sonny@8.6.144.252) (Ping timeout: 252 seconds)
[04:59:01] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[04:59:34] *** Joins: sonny (~sonny@8.6.144.252)
[05:18:33] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:18:59] *** Joins: seninha (~seninha@user/seninha)
[05:19:35] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[05:22:24] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:7013:e815:a722:b241)
[05:26:37] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:7013:e815:a722:b241) (Ping timeout: 240 seconds)
[05:28:42] *** Quits: sonny (~sonny@8.6.144.252) (Ping timeout: 265 seconds)
[05:33:49] *** Quits: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6) (Ping timeout: 252 seconds)
[05:38:13] *** Quits: poselyqualityles (poselyqual@user/poselyqualityles) (Ping timeout: 252 seconds)
[05:44:43] *** Quits: kennyd (~bc8165b6@cerf.good1.com) (Quit: CGI:IRC)
[05:45:16] *** Joins: kennyd (~bc8165b6@cerf.good1.com)
[05:51:06] <lockywolf> Franciman, if you need it, I think, Chibi runs on plan9 too
[05:51:34] <lockywolf> Although I haven't tried.
[05:58:39] <lockywolf> jcowan, https://r6rs.org/ still does not work
[05:58:51] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[05:58:56] <lockywolf> I do not think it is just the .org domain name propagation
[06:04:28] *** Quits: jao (~jao@194.99.104.13) (Ping timeout: 265 seconds)
[06:08:56] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Quit: jrincayc)
[06:09:10] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[06:12:37] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[06:13:27] *** Joins: aeth (~aeth@user/aeth)
[06:17:49] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[06:19:11] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[06:20:10] *** Joins: badkins (~badkins@136.56.92.199)
[06:25:18] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 268 seconds)
[06:34:43] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[06:35:55] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[06:41:30] *** Joins: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6)
[06:42:23] *** Quits: siiky (~siiky@2001:8a0:ff7d:dd00:1f5d:a8bd:3bdc:60a8) (Ping timeout: 252 seconds)
[06:44:14] *** Joins: siiky (~siiky@2001:8a0:ff52:4b00:d65f:f081:77d0:63d8)
[06:51:59] *** Quits: klovett (~klovett@107.115.32.2) (Ping timeout: 256 seconds)
[06:54:12] *** Joins: sonny (~sonny@2a09:bac0:14::806:90fc)
[07:07:09] <sonny> If my base case is (cons 0 0), will my last expression also have to be a cons pair?
[07:07:37] <sonny> I am wondering if it is possible to build up multiple values recursively 
[07:12:27] <mdhughes> Weird, r6rs.org was up yesterday.
[07:12:34] <sham1> Using (cons 0 0) as your base case will lead to an improper list
[07:12:48] <sonny> I don't want a list
[07:12:52] <sham1> Just note that
[07:12:55] <sonny> I just want to return 2 values
[07:13:06] <sham1> Why not use (values)
[07:13:20] <mdhughes> A pair's fine for doing that.
[07:14:03] <mdhughes> so www.r6rs.org resolves to lambda.csail.mit.edu which just gives an empty Apache page "It works!"
[07:14:50] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 252 seconds)
[07:15:10] <sham1> A pair is fine for that, although it really depends on what you want to return actually
[07:18:48] *** Joins: badkins (~badkins@136.56.92.199)
[07:20:28] <sonny> sham1 a pair of numbers
[07:21:21] <sham1> Well if you know that it's always going to be a pair, you could probably do it with (values) without needing to cons a pair
[07:21:34] <sham1> Going to be two numbers*
[07:28:09] <jcowan> Of course there is no guarantee that returning multiple values *doesn't* cons, as it does in Chibi.
[07:28:52] <jcowan> aaaaand, r6rs.org is baaaack!
[07:31:49] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[07:40:27] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[07:41:15] *** Joins: badkins (~badkins@136.56.92.199)
[07:46:05] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 268 seconds)
[07:49:10] *** Quits: leah2 (~leah@vuxu.org) (Ping timeout: 268 seconds)
[07:53:27] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 29.0.50)
[07:58:39] <sonny> can't really figure it out, so I
[07:58:45] <sonny> m just going to use globals
[08:03:00] <sonny> nvm, it worked I just messed up the logic
[08:04:30] *** Joins: leah2 (~leah@vuxu.org)
[08:05:23] <sonny> but recursion with multiple values is still trickey
[08:05:37] <sonny> s/trickey/tricky/
[08:09:20] <gwatt> r6rs.org was working earlier today for me...
[08:34:57] <mdhughes> Hooray, jcowan!
[08:45:55] <jcowan> down again
[09:02:14] *** Quits: sonny (~sonny@2a09:bac0:14::806:90fc) (Quit: Going offline, see ya! (www.adiirc.com))
[09:16:01] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 252 seconds)
[09:18:08] <mdhughes> Can we get rudybot to curl r6rs.org every few minutes, and if it doesn't see the text, it complains in chat?
[09:20:44] *** Joins: greaser|q (greaser@antihype.space)
[09:21:47] *** Quits: greaser|q (greaser@antihype.space) (Changing host)
[09:21:47] *** Joins: greaser|q (greaser@user/greasemonkey)
[09:21:51] *** greaser|q is now known as GreaseMonkey
[09:24:36] <gwatt> it doesn't even have a dns entry right now
[09:27:54] *** Joins: skapata (~Skapata@user/skapata)
[09:29:38] <mdhughes> Uh, whois r6rs.org works for me?
[09:30:11] <mdhughes> nslookup is less happy: *** Can't find r6rs.org: No answer
[09:30:41] <gwatt> whois and dns are different.
[09:30:59] <mdhughes> nslookup www.r6rs.org: Address: 128.30.16.91
[09:38:03] <gwatt> bleh, there's no entry for r6rs.org, only www.r6r.org, and my browser automagically says "r6rs.org doesn't exist, let's go to https://www.r6rs.org" and of course the site doesn't have https, so my browser says it doesn't work
[09:39:01] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 240 seconds)
[09:58:04] *** Joins: gproto23 (~gproto23@user/gproto23)
[10:00:49] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 265 seconds)
[10:17:45] *** Joins: jobol (~jobol@2a01:e34:ee5c:ee50:d6be:d9ff:fea3:db03)
[10:44:15] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:e033:9fa2:623d:8769)
[10:54:51] *** Quits: kennyd (~bc8165b6@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[11:15:30] <Franciman> thanks lockywolf 
[11:24:15] <lockywolf> http://www.r6rs.org/ works, https://www.r6rs.org/ does not, http://r6rs.org/ does not, https://r6rs.org/ does not
[11:36:13] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:43:11] *** Joins: badkins (~badkins@136.56.92.199)
[11:46:56] *** Joins: mononote (~mononote@user/mononote)
[11:47:49] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 252 seconds)
[11:55:55] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[12:07:27] *** Joins: Avichi (~Avichi@lithe.xs4all.nl)
[12:09:05] *** Joins: notzmv (~zmv@user/notzmv)
[12:10:34] *** Joins: trip_fandango (~tripfanda@2a00:a040:19e:72a1:c17e:3fe7:829e:e3ae)
[12:12:13] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:e033:9fa2:623d:8769) (Ping timeout: 240 seconds)
[12:30:47] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[12:37:05] *** Joins: jao (~jao@194.99.104.13)
[12:38:27] *** Joins: civodul (~user@guix/contributor/civodul)
[12:43:48] *** Quits: jao (~jao@194.99.104.13) (Remote host closed the connection)
[12:48:32] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 265 seconds)
[12:55:18] *** Quits: trip_fandango (~tripfanda@2a00:a040:19e:72a1:c17e:3fe7:829e:e3ae) (Ping timeout: 265 seconds)
[12:57:23] *** Joins: trip_fandango (~tripfanda@5.29.28.78)
[13:05:03] *** Joins: gproto23 (~gproto23@user/gproto23)
[13:39:46] *** Quits: trip_fandango (~tripfanda@5.29.28.78) (Ping timeout: 265 seconds)
[13:53:15] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[13:53:49] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[13:55:31] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[14:06:07] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:06:42] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[14:28:04] *** Joins: trip_fandango (~tripfanda@bzq-219-32-122.isdn.bezeqint.net)
[14:34:55] *** Joins: gabbiel (~user@68.205.230.98)
[14:37:50] <gabbiel> can someone help me understand why this: http://0x0.st/-hFn.txt doesn't work?
[14:40:05] <sjamaan> gabbiel: You only define the first name, but there are no ellipsis to define the rest of the names
[14:41:19] <sjamaan> But I also don't really understand how this is supposed to work in the first place
[14:41:37] <sjamaan> Because body is matched literally in the expansion
[14:44:29] <gabbiel> ok, so I have to add more ellipses then, let me try that
[14:44:59] <sjamaan> Not just adding more, because you can't repeat body twice
[14:45:45] <gabbiel> so that last ... only applies to body?
[14:45:55] <gabbiel> I thought it applied to the whole expression before it
[14:47:57] <gabbiel> also, name will be the same everywhere, but it doesnt matter because syntax rules doesn't care about that identifier I think
[14:51:28] <sjamaan> The pattern has (((name . args) . body) ...) so the entire form can be repeated for different names and args and bodies
[14:51:32] * sjamaan &
[14:53:49] <gabbiel> thats exactly what I want, but it doesnt work idk why
[15:04:21] <amazigh> heyall!
[15:05:37] <amazigh> goal of the day is to make ChezScheme work on rpi400 with alpine.
[15:12:32] *** Joins: thevishy (~Nishant@2405:201:f005:c007:a5d7:38b:39cd:e2ae)
[15:16:37] *** Joins: badkins (~badkins@136.56.92.199)
[15:21:48] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 268 seconds)
[15:28:35] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 268 seconds)
[16:04:13] *** Joins: X-Scale` (~ARM@25.55.43.5.rev.vodafone.pt)
[16:04:33] *** Parts: gabbiel (~user@68.205.230.98) (ERC (IRC client for Emacs 27.2))
[16:06:41] *** Quits: X-Scale (~ARM@31.22.146.100) (Ping timeout: 256 seconds)
[16:06:41] *** X-Scale` is now known as X-Scale
[16:23:51] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[17:02:13] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[17:19:49] *** Joins: badkins (~badkins@136.56.92.199)
[17:52:10] *** Joins: s-liao (~s-liao@101.86.99.70)
[17:52:14] *** Joins: civodul (~user@guix/contributor/civodul)
[17:55:33] *** Joins: kennyd (~bc8165b6@cerf.good1.com)
[18:03:17] *** Joins: seninha (~seninha@user/seninha)
[18:17:11] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[18:18:36] *** Quits: kennyd (~bc8165b6@cerf.good1.com) (Quit: CGI:IRC (Ping timeout))
[18:18:44] <amazigh> racket's chez fork has a very interesting file at the root of the repository named `IMPLEMENTATION.md`
[18:19:50] *** Joins: kennyd (~bc8165b6@cerf.good1.com)
[18:31:05] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[18:34:33] *** Joins: badkins (~badkins@136.56.92.199)
[18:39:08] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 268 seconds)
[18:49:29] *** Quits: trip_fandango (~tripfanda@bzq-219-32-122.isdn.bezeqint.net) (Ping timeout: 252 seconds)
[19:02:46] *** Joins: badkins (~badkins@136.56.92.199)
[19:12:55] *** Joins: X-Scale` (~ARM@46.50.4.128)
[19:15:05] *** Quits: X-Scale (~ARM@25.55.43.5.rev.vodafone.pt) (Ping timeout: 265 seconds)
[19:15:05] *** X-Scale` is now known as X-Scale
[19:19:25] *** Joins: trip_fandango (~tripfanda@2a00:a040:19e:72a1:4501:4dfb:ee8d:2344)
[19:23:54] *** Quits: trip_fandango (~tripfanda@2a00:a040:19e:72a1:4501:4dfb:ee8d:2344) (Ping timeout: 265 seconds)
[19:24:25] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Client closed)
[19:33:01] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:f1f0:a87b:efe3:ebd7)
[19:33:01] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:f1f0:a87b:efe3:ebd7) (Changing host)
[19:33:01] *** Joins: skapata (~Skapata@user/skapata)
[19:43:54] *** Joins: trip_fandango (~tripfanda@2a00:a040:19e:72a1:4501:4dfb:ee8d:2344)
[20:10:52] *** Joins: klovett (~klovett@107.115.32.81)
[20:12:09] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:e9b2:ade6:e9e3:d923) (Remote host closed the connection)
[20:27:42] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 265 seconds)
[20:38:09] *** Joins: jao (~jao@194.99.104.13)
[20:53:03] *** Quits: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6) (Ping timeout: 252 seconds)
[20:53:38] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[20:54:09] *** Joins: badkins (~badkins@136.56.92.199)
[20:59:07] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 268 seconds)
[21:05:49] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 240 seconds)
[21:08:14] <amazigh> I know 2^64 is a big number.
[21:09:16] <amazigh> it is theorically possible to have 2^64 memory locations, where each location store 64bits
[21:10:43] <amazigh> using tagged pointers, that is a couple of bits of every location is used to tell what the rest of the location is refering too, if say there 3 bit of tagging, it means that the system can "only" address 2^(64 - 3) memory locations?
[21:11:39] <gwatt> when tagging you can use the higher N bits, sacrificing total addressable space, or the lower N bits, sacrificing granularity.
[21:12:10] *** Quits: thevishy (~Nishant@2405:201:f005:c007:a5d7:38b:39cd:e2ae) (Quit: Leaving)
[21:12:14] <amazigh> what does granularity mean? 
[21:13:59] *** Joins: badkins (~badkins@136.56.92.199)
[21:14:15] <gwatt> You can't have objects smaller than 2^N bytes.
[21:14:47] *** Joins: mononote (~mononote@user/mononote)
[21:15:57] <gwatt> You need to allocate space such that the lower N bits of the address are guaranteed to be 0 so that you can fill space with the tag
[21:16:38] <sham1> Well you can't allocate memory regions smaller than 2^N but you can still use parts of that word
[21:18:12] <dpk> bear in mind that bog-standard malloc(3) will usually give you memory aligned to something like a round 8 or 16 bytes
[21:19:30] <sham1> That's because it of course has to allocate memory that is properly aligned for every* possible C object
[21:19:44] <sham1> *: Not actually every object possible, but at least those without weird requirements
[21:19:47] <fizzie> Well this hypothetical already started with "2^64 memory locations, where each location store 64bits", so a "byte" in this model is already 64 bits.
[21:20:04] <sham1> You'd probably call them just 64-bit words but yeah
[21:20:47] <dpk> personally, i'd like to see your computer that has 16 exabytes of memory before we get into discussions about how likely we are to run out of memory locations
[21:20:58] <dpk> though i'd also accept 1 exabyte tbh
[21:21:14] <sham1> I want a TiB of memory at consumer prices
[21:21:16] <amazigh> (I always forget there is many layers between say scheme and the actual hardware, memory is not an u64vector iiuc)
[21:21:20] <gwatt> I too would accept 1 exabyte of memory for my computer
[21:21:46] <amazigh> ^^'
[21:21:50] <dpk> amazigh: doch, though it depends on your architecture
[21:21:59] <sham1> Well for a byte machine you'd better off accessing and thinking of it more like a bytevector
[21:22:22] <dpk> well, not only on your architecture, but on your individual CPU
[21:22:37] <dpk> recent amd64 CPUs can effectively and efficiently treat memory as a byte array
[21:23:20] <dpk> others are probably still stuck reading the nearest whole word and shifting off the bits you don't need if you want unaligned memory access
[21:23:52] <sham1> Or just crashing if they can't do unaligned reads or writes
[21:24:02] <dpk> (whether this is something you have to do in assembly yourself or something the CPU does for you invisibly may actually depend on your architecture, i haven't done enough assemblying to know)
[21:25:13] <sham1> Nowadays there are very few platforms that are *that* strict as to crash on unaligned accesses. Nowadays it's usually just a performance characteristic thing where you don't want unaligned accesses because it's slow
[21:26:17] <dpk> i'm surprised nobody has introduced UTF-24, what with unaligned accesses having been penalty-free on Intel CPUs for like five or ten years now. the objection was always that unaligned reads are slow, but if there are CPUs where they aren't …
[21:29:11] <sham1> Well you could always pack three 21-bit Unicode codepoints into one 64-bit word with one bit parity
[21:29:55] <sham1> Although I don't know why you would, since for a lot of text transfer you're better off just going with UTF-8
[21:30:22] <Zipheir> UTF-24 and a whole new collection of surrogates...
[21:30:33] <dpk> why surrogates?
[21:31:00] <Zipheir> Wouldn't such a thing still need some way to represent 32-bit codepoints?
[21:31:14] <dpk> no, Unicode stops at U+10FFFF i.e. just under 21 bits
[21:31:24] <Zipheir> Oh, oops.
[21:31:55] <Zipheir> I guess I've just got the "nice round number" baked into my brain.
[21:32:12] <sham1> #x110000 is a nice round number
[21:32:24] <gwatt> I'm sure we'll soon have enough unicode emojis to blow past that limit
[21:33:17] <Zipheir> Yeah, I wouldn't be surprised if there's another Unicode expansion in our lifetimes.
[21:33:35] <sham1> IIRC there is quite a bit of space still unused within the various planes. And not just with planes and blocks without specific meaning like private use area, but simply areas of Unicode with unassigned codepoints
[21:34:33] <dpk> yeah, planes 3 to 17 are wide open iirc
[21:34:36] <sham1> I mean, the Supplementary Multilingual Plane is full of unused space
[21:34:39] <dpk> although 17 itself is PUA, i think
[21:35:00] <sham1> You also have planes 4 to 13
[21:35:59] <sham1> But yeah. Even with the invasion of emoji, we're not running out for a while
[21:39:12] *** Joins: sonny (~sonny@8.6.144.252)
[21:39:33] *** Quits: taylan (~taylan@user/taylan) (Quit: Leaving)
[21:39:34] <sonny> How does this code fragment work? (foldl + 0 '(1 2 3 4 5 6))
[21:40:16] <sonny> I want to figure out what foldl is doing as it goes through the list
[21:41:05] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 252 seconds)
[21:41:10] <dpk> what language is that? Scheme (at the moment) calls it fold and fold-right, not foldl and presumably foldr
[21:41:22] *** Quits: clacke (88d96f2df3@knopi.disroot.org) (Read error: Connection reset by peer)
[21:41:23] <dpk> anyway, there's an explanation in SRFI 1
[21:41:37] <dpk> sonny: https://srfi.schemers.org/srfi-1/srfi-1.html#fold
[21:42:11] <sonny> dpk: it's racket
[21:44:00] <Zipheir> dpk: Sheesh, it's obviously a left fold.
[21:44:31] <Zipheir> sonny: Do you know the definition of foldl?
[21:44:42] <sham1> A naming convention straight from Haskell, where that kind of a terser name makes sense
[21:44:48] <Zipheir> Who cares.
[21:45:28] <sonny> Zipheir: no, I'm trying to read the srfi now
[21:45:40] <dpk> Zipheir: i mean, i'm bothered if someone is coming in here asking CL or Clojure or something questions ;-)
[21:45:43] <Zipheir> sonny: Equationally, (foldl f e '()) = e and (foldl f e (cons x xs)) = (foldl f (f x e) xs)
[21:46:09] <Zipheir> dpk: Functional programming translates pretty easily between languages, don't you agree?
[21:46:23] <dpk> it was curiosity more than anything, since i think we may end up canonically calling them foldl and foldr in R7RS Large, to work around the current argument-order disaster
[21:46:46] <dpk> (i.e. keep the old ones around with whatever inconsistent argument order they already have, and create new foldl and foldr ones that are all consistent with each other)
[21:46:48] <Zipheir> Hmm, actually, "foldl/r" sounds pretty R6y to me...
[21:47:01] <Zipheir> R6 has a penchant for terse names, too.
[21:47:26] <gwatt> r6rs calls them fold-left / fold-right
[21:47:36] <Zipheir> True.
[21:48:28] <Zipheir> OK, I don't know what I was thinking of.
[21:48:33] <Zipheir> Racket, probably.
[21:48:52] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:f1ba:fd5a:67b3:b8c0)
[21:50:59] <Zipheir> dpk: What's the argument order disaster with the folds?
[21:52:01] <dpk> first issue listed on https://wiki.dpk.io/r7rs-ultraviolet-issues.html
[21:53:07] <Zipheir> Oh, of course, we've talked about this.
[21:53:57] <Zipheir> Yes, it's a mess.
[21:54:21] <amazigh> ah eventually racket 7.7 finished compiling chez, and now I have a working system, I need to run the tests (everybody needs to know!)
[21:56:36] <gwatt> amazigh: why such an old version of racket?
[21:58:54] <Zipheir> sonny: Virtually any function that "crushes" a list down to some value can be written as some kind of fold.
[21:59:43] <sonny> yeah, that is my intuition 
[22:00:05] <sonny> but I have to use a series of translations instead, since my data is complex
[22:00:12] <Zipheir> I think I've already mentioned Origami Programming in this context before.
[22:00:22] <sonny> yeah
[22:00:57] <Zipheir> Translations are often functorial, so `map` is your friend.
[22:02:04] <sham1> I like the convention of calling the reduction function kons and the initial accumalator value knil
[22:02:39] <Zipheir> Clever naming on Olin's part.
[22:04:02] <amazigh> gwatt: that is what is available with alpine
[22:04:42] <sham1> Also since the ultraviolet site mentioned SRFI-14, which is charsets, I wonder how the definitions of the standard charsets given correspond to Unicode character classes
[22:05:05] *** Joins: taylan (~taylan@user/taylan)
[22:07:15] *** Quits: klovett (~klovett@107.115.32.81) (Quit: ZZZzzz…)
[22:19:52] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[22:20:33] <sonny> I notice scheme doesn't have that local variable shadowing, has thrown me off at times
[22:21:48] <sonny> hmm, probably a mistake on my end again
[22:22:02] <Zipheir> How so?  Scheme has lexical scope.
[22:22:28] <Zipheir> Er, binding.
[22:25:53] *** Quits: jobol (~jobol@2a01:e34:ee5c:ee50:d6be:d9ff:fea3:db03) (Quit: Leaving)
[22:25:54] *** Joins: gproto23 (~gproto23@user/gproto23)
[22:26:01] <sonny> yeah, I made a mistake
[22:34:55] <jcowan> I don't think it's such a disaster.  Vector-likes use one order, everything else uses another
[22:36:02] <gwatt> Is it not better to have the same order for everything?
[22:36:43] <jcowan> Better to, yes; a disaster not to, no.
[22:38:32] <jcowan> sham1: https://srfi.schemers.org/srfi-14/contrib/unicode-2019/CharsetDefs.html contain a proposed set of changes to the character class definitions to bring them up to date.
[22:39:35] <sham1> Nice
[22:41:09] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[22:41:33] *** Joins: robin (~robin@user/terpri)
[22:43:43] *** Joins: klovett (~klovett@107.115.32.81)
[22:47:25] <kennyd> scheme has no local shadowing? what happens instead of shadowing?
[22:47:44] <sham1> It does
[23:20:49] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Ping timeout: 252 seconds)
[23:33:36] *** Quits: lagash (lagash@lagash.shelltalk.net) (Quit: ZNC - https://znc.in)
[23:34:16] *** Joins: lagash (lagash@lagash.shelltalk.net)
[23:38:27] *** Quits: lagash (lagash@lagash.shelltalk.net) (Client Quit)
[23:38:48] *** Joins: lagash (lagash@lagash.shelltalk.net)
[23:40:15] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 252 seconds)
[23:41:01] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[23:46:58] *** Joins: mononote (~mononote@user/mononote)
[23:47:32] *** Quits: lagash (lagash@lagash.shelltalk.net) (Quit: ZNC - https://znc.in)
[23:59:12] *** Joins: lagash (lagash@lagash.shelltalk.net)
