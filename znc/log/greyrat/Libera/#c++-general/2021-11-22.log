[00:03:54] *** Quits: kalven (~calvin@2a02:470:84:102::24) (Read error: Connection reset by peer)
[00:04:11] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[00:06:07] <lru> that's the same quote I saw last time...
[00:12:19] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[00:15:11] *** Joins: kalven (~calvin@2a02:470:84:102::24)
[00:15:31] <LordKalma> the random number generator decided to generate the same thing
[00:15:46] <LordKalma> a speenrunner's dream
[00:28:18] *** Joins: noarb (~noarb@user/noarb)
[00:32:41] *** Joins: uzer1 (~uzer@dsl-trebng11-54f912-114.dhcp.inet.fi)
[00:39:51] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[00:40:38] *** Quits: X-Scale (~ARM@83.223.249.106) (Ping timeout: 260 seconds)
[00:41:50] *** X-Scale` is now known as X-Scale
[00:41:50] *** Quits: cm007magnum (~Rheanna@218.78.109.69) (Remote host closed the connection)
[00:41:57] *** Joins: Minori (~Minori@user/minori)
[00:42:50] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[00:43:23] *** Joins: cm007magnum (~Rheanna@218.78.67.149)
[00:48:29] *** Quits: paul424 (~tom@ip-37-248-159-89.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[00:52:03] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[00:55:41] *** Quits: spaceangel (~spaceange@ip-62-245-71-160.net.upcbroadband.cz) (Remote host closed the connection)
[00:56:46] <TheGuestMovie> speedrunning is the most pointless thing I've ever seen. It started out as something interesting to see how skilled people play, now it's "how do I exploit glitches to skip 95% of the game, while auto-jumping constantly becuase it's 0.001% faster than regular running". How can anyone find that enjoyable to watch?
[00:57:03] *** Joins: spaceangel (~spaceange@ip-62-245-71-160.net.upcbroadband.cz)
[00:58:46] <wootehfoot> TheGuestMovie, there are 'glitchless' speedrun categories, so that means you're kinda talking out of your ass
[00:59:11] <TheGuestMovie> well I havent kept up, once I found them shit, I never clicked another link
[00:59:36] <wootehfoot> ignorance is glorified nowadays anyways, keep it up
[00:59:58] <TheGuestMovie> even the glitchless ones...are they still prioritizing speed at the expense of viewability? Cause watching Link jump constantly while making that jumping grunt noise doesnt make for an enjoyable viewing experience
[01:00:24] <TheGuestMovie> Making people compete for a top spot measured only by completion time means the shittiest practices are encouraged
[01:00:32] <TheGuestMovie> sorry if I insulted your honor
[01:01:13] <wootehfoot> oh i don't feel any emotion about this, are you upset?
[01:01:29] <TheGuestMovie> sure I'm livid
[01:01:40] <wootehfoot> here's a lollipop
[01:01:56] * wootehfoot pat pats TheGuestMovie 
[01:02:01] <chris64> this topic might be better suited for ##c++-social :-)
[01:02:09] <TheGuestMovie> I'm not your boyfriend, leave it for him
[01:02:20] <TinoDidriksen> Definitely take it to #C++-social
[01:03:12] <TheGuestMovie> I'm done :)
[01:10:10] *** Quits: sysctl (~user@88.215.77.255) (Quit: Konversation terminated!)
[01:11:23] *** Quits: magla (~gelignite@55d4124a.access.ecotel.net) (Quit: Stay safe!)
[01:12:50] <TheGuestMovie> Are any of you professional C++ developers? (paid by a company to use C++) What are their thoughts on the increasing complexity of C++ with every new standard? I mean even 15 years ago people called it ridiculously complex. Now they just add to it.
[01:13:15] <TheGuestMovie> I get that some new stuff is written to replace old stuff, but the fact that the old stuff stays in the spec, means complexity just increases
[01:13:50] <TheGuestMovie> I don't see that it has increased C++'s adoption except by hobbyists on the Internet
[01:15:42] *** Joins: X-Scale` (~ARM@31.22.202.54)
[01:15:59] <kalven> yes I'm one of thoe c++ developers who get paid for it
[01:16:32] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 240 seconds)
[01:18:46] *** X-Scale` is now known as X-Scale
[01:21:54] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[01:25:07] <RandomReader> I don't think the complexity is much different in other spaces .. different languages may break compatibility faster, but that just means all the existing code (and dependencies) has to be moved, and managing that is at least as complex
[01:25:45] <RandomReader> (probably more in the long run, since the churn makes it unstable by comparison, which makes it hard to maintain a solid foundation long term)
[01:26:15] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:dd8b:a03e:81a4:b487)
[01:27:29] *** Quits: robod34 (Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:31:40] *** Quits: cm007magnum (~Rheanna@218.78.67.149) (Remote host closed the connection)
[01:33:18] *** Joins: cm007magnum (~Rheanna@61.171.38.68)
[01:38:24] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:38:31] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:38:31] *** ChanServ sets mode: +v npaperbot
[01:39:01] *** Joins: badone (~badone@209.132.189.136)
[01:40:01] <TheGuestMovie> well at the very least I'd appreciate some compiler-flag to warn on obsoleted practices.
[01:40:11] <TheGuestMovie> Right now some junior learning C++ doesn't know wtf
[01:40:30] <TheGuestMovie> (maybe the compilers have those flags, you tell me, I just upgraded to C++11)
[01:41:29] <RandomReader> that stuff is usually in the static analysis realm, linters and the like
[01:41:46] <RandomReader> VS includes one, clang-tidy and related tools are also common
[01:41:49] <xisop> i think allowing devs the ability to pass a flag to the compiler to signal which set of features they want is the mostly reasonable approach
[01:42:56] <RandomReader> C++ does have a pretty strong need for foundational education though, it's not particularly suited to picking up by example
[01:43:12] <RandomReader> so investing in training material might be more important than it would in other spaces
[01:43:27] <RandomReader> the best practices kind, not the "intro to programming" kind
[01:43:36] *** Quits: spaceangel (~spaceange@ip-62-245-71-160.net.upcbroadband.cz) (Remote host closed the connection)
[01:44:33] <TheGuestMovie> RandomReader: and? How do I know how I should be writing C++ code in 2021? What clang-tidy rules do I use?
[01:44:43] *** Quits: RoKenn_ (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[01:44:44] <TheGuestMovie> "you figure it out" which means more complexity?
[01:44:54] *** Joins: spaceangel (~spaceange@ip-62-245-71-160.net.upcbroadband.cz)
[01:45:01] <Hello71> imo (and i think according to iso group too) there is already too much subsetting of c++ with e.g. disabling exception handling
[01:45:12] <RandomReader> some places will integrate something along the lines of cppcoreguidelines into their style guides
[01:45:26] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Ping timeout: 260 seconds)
[01:45:55] <johnny> TheGuestMovie, php is a good example. they mostly kept adding junk too, and it's still pretty popular :) hah
[01:46:02] <Hello71> it might be interesting to have an officially recognized "modern methods" subset that could be selected on a per-TU basis
[01:46:15] <johnny> although i do wish some stuff would be removed, or there was some epoch setting of some kind
[01:46:44] <johnny> TheGuestMovie, are you really considering the language or also the library?
[01:46:50] <TheGuestMovie> johnny: idk how popular PHP is, I haven't seen someone mentio nit (positively) in like 10 years. It's the C++ of web languages.
[01:47:04] <xisop> php strangely has types now. what a world
[01:47:09] <johnny> you're not looking in the rihgt places.php is really popular still
[01:47:26] <johnny> and well loved by people who use platforms like symfony and laravel
[01:47:45] <johnny> symfony is my favorite web framework. it's like they took spring, but removed most of the nonsense
[01:47:46] <TheGuestMovie> certainly, genZ kids aren't learning PHP
[01:47:55] <johnny> sure they are.. wordpress still runs the internet
[01:48:20] <johnny> it's just not cool to talk about
[01:48:25] <TheGuestMovie> does the average wordpress admin know PHP? Or do they just use the admin web interface and plugins?
[01:48:34] <johnny> somebody has to keep writing those plugins and themes
[01:48:41] <TheGuestMovie> yeah, old people :)
[01:48:43] <xisop> part of it comes down to how much control and hand-holding you expect from the language. i mean in php and c++ as being on both ends of that spectrum
[01:49:05] <johnny> i think php is actually quite similiar to php in hand holding, in the parts people say PHP is good at even!
[01:49:21] <johnny> php doesn't really help you in the scaryt parts of making a webapp, input and output handling
[01:49:37] <johnny> err similar to C++*
[01:49:43] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[01:49:47] <johnny> of course it's not nearly as difficult
[01:50:06] <johnny> is the common way to output to the screen secure?? nope
[01:50:17] <johnny> is the common way to accept intput from a from secure? nope
[01:50:36] <johnny> accept input from a form*
[01:51:41] <johnny> cludgy languages still hold sway in a lot of ways. php, shell scripts, and C++ ..
[01:51:51] <TheGuestMovie> you know I bitch about C++ but from what I'm reading in C# changelog (C# is my exit strategy), that language is also growing in complexity
[01:51:58] <TheGuestMovie> constantly
[01:52:24] <johnny> do you hae more criticisms for the core language itself or the library?
[01:53:06] <johnny> both for C++ and C#
[01:53:20] *** Joins: Juliu_ (~Juliu@2a02:810b:c640:3ec0:e015:1f5c:5d5e:d494)
[01:53:43] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:dd8b:a03e:81a4:b487) (Ping timeout: 250 seconds)
[01:54:23] <TheGuestMovie> The language itself, but I mean the stdlib is pretty intertwined at this point, looking at https://oleksandrkvl.github.io/2021/04/02/cpp-20-overview.html#lambda-this
[01:55:15] <RandomReader> that isn't related to stdlib...?
[01:56:21] <johnny> that seems like a language feature to me
[01:56:24] <johnny> maybe i'm wrong though
[01:58:34] <TheGuestMovie> yeah it's language, but there's also lots of new low-level std:: functions which become defacto part of the language
[01:59:28] <TheGuestMovie> but just looking at language, this is a completely different code from what I use. Nearly unrecognizable. And already, my codebase is totally unrecognizable from a template-heavy codebase like boost.
[02:00:04] <TheGuestMovie> so it's almost no longer a language, but a language root, and people are writing in different dialects
[02:00:22] <johnny> well templates certainly heavily muddy the waters to me as a C++ noob
[02:01:16] <johnny> i think C++14 an beyond (and especially C++20) actually helps simplify a lot of that, so maybe folks won't have to go too crazy in the future
[02:01:30] <johnny> not tht they wouldn't do mroe of course
[02:01:37] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Quit: Leaving)
[02:02:04] <johnny> TheGuestMovie, btw.. i don't even actually like C++. just so you know
[02:02:20] <johnny> i just had to learn a bit to work on some projects
[02:02:34] <TheGuestMovie> haha
[02:03:10] *** Quits: uzer1 (~uzer@dsl-trebng11-54f912-114.dhcp.inet.fi) (Ping timeout: 260 seconds)
[02:03:56] <johnny> there are definitely some rough edges, but it hasn't been that bad to work in
[02:04:16] <johnny> i definitely wanna really grok templates better if i continue to write in it
[02:05:06] *** Quits: Juliu_ (~Juliu@2a02:810b:c640:3ec0:e015:1f5c:5d5e:d494) (Ping timeout: 268 seconds)
[02:05:43] <johnny> it kinda seems like the committee only incidentally solves some of the rougher edges. it feels like everybody is so focused on solving the problems in the most broad possible way, which leads to a proliferation of options
[02:06:07] <johnny> would be nice if they threw in stuff to help folks like me sometimes
[02:06:31] <immibis> "(1) Every TM / input pair either halts or fails to halt. (2) There exists a TM halt decider for every TM / input pair. (3) A SMTM can become any element of the set of TMs. (4) Therefore a SMTM can become a halt decider for any TM input pair."
[02:06:41] <immibis> anyone have particular experience with halting problem quacks?
[02:07:10] <immibis> "Instead of a Turing Machine that determines whether or not another Turing Machine will halt we construct a DFA lexical analyzer that recognizes the single literal string of “the”."
[02:07:25] <immibis> the above must be the most ridiculous sentence I have read today
[02:08:09] <immibis> wait this is a general channel not offtopic or social, my bad
[02:08:17] <johnny> i did not understand what you were saying with "halting problem quacks" until the next sentence" quacks? :)  lol
[02:08:24] <immibis> some -general channels are off-topic channels
[02:08:30] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[02:08:58] <immibis> johnny: quack as in a person who pushes eccentric scientific theories that are wrong
[02:09:10] <johnny> yeah i got it by the next sentence :)
[02:09:49] <johnny> i kinda like my first misundrestanding though. i was thinking about the halting problem and ducks
[02:12:23] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[02:16:41] *** Joins: Colt (~Colt@user/colt)
[02:21:32] *** Quits: cm007magnum (~Rheanna@61.171.38.68) (Remote host closed the connection)
[02:22:51] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[02:23:16] *** Joins: cm007magnum (~Rheanna@218.78.53.13)
[02:24:35] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:d0b1:b7a3:bdc8:544)
[02:34:20] *** Quits: TheGuestMovie (~TheGuestM@173.231.114.74) (Quit: Client closed)
[02:34:26] *** Quits: Minori (~Minori@user/minori) (Quit: Leaving)
[02:37:28] *** Joins: shailangsa (~shailangs@host86-186-133-114.range86-186.btcentralplus.com)
[02:46:35] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a community of Santa's gnomes at https://indiedevs.net/)
[02:51:59] *** Quits: spaceangel (~spaceange@ip-62-245-71-160.net.upcbroadband.cz) (Remote host closed the connection)
[02:55:41] *** Quits: chris64 (~chris@user/chris64) (Quit: leaving)
[02:59:39] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[03:00:02] *** Quits: johnny (~johnny@user/johnny) (Remote host closed the connection)
[03:04:29] *** Joins: johnny (~johnny@user/johnny)
[03:11:31] *** Quits: cm007magnum (~Rheanna@218.78.53.13) (Remote host closed the connection)
[03:12:06] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[03:14:25] *** Joins: cm007magnum (~Rheanna@218.78.109.69)
[03:20:16] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Read error: Connection reset by peer)
[03:24:24] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:26:23] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[03:27:37] *** Joins: TheGuestMovie (~TheGuestM@173.231.114.74)
[03:31:19] *** Joins: PJBoy (~PJBoy@user/pjboy)
[03:42:31] *** Quits: Burgundy (~yomon@86.127.194.72) (Ping timeout: 268 seconds)
[03:46:20] *** Joins: walkr (~walkr@177-7-165-171.user3p.brasiltelecom.net.br)
[04:00:59] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:3ced:e39f:5a62:729f) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:02:42] *** Quits: cm007magnum (~Rheanna@218.78.109.69) (Remote host closed the connection)
[04:10:09] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:17:08] *** Quits: TheGuestMovie (~TheGuestM@173.231.114.74) (Quit: Client closed)
[04:25:26] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[04:30:39] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[04:40:43] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:45:44] *** Joins: KombuchaKip (~kip@192.252.230.5)
[04:51:54] *** Joins: cm007magnum (~Rheanna@218.78.109.69)
[04:52:49] *** Quits: jehelset (~jeh@ti0005q162-7332.bb.online.no) (Ping timeout: 268 seconds)
[04:55:08] *** Quits: walkr (~walkr@177-7-165-171.user3p.brasiltelecom.net.br) (Read error: Connection reset by peer)
[04:57:23] *** Joins: frost (~frost@user/frost)
[05:23:15] *** Quits: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian) (Ping timeout: 250 seconds)
[05:24:04] *** Joins: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian)
[05:32:49] *** Quits: Guest37__ (~textual@124.168.255.30) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[05:35:06] *** Joins: blackhole (~blackhole@2601:600:9f80:2aa0:3d7f:135a:b66e:9d37)
[05:35:59] *** Joins: malloy (~jimery@116.30.222.115)
[05:38:24] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:38:32] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:38:32] *** ChanServ sets mode: +v npaperbot
[05:40:55] *** Joins: Guest37__ (~textual@124.168.255.30)
[05:41:51] *** Quits: cm007magnum (~Rheanna@218.78.109.69) (Remote host closed the connection)
[05:43:47] *** Joins: cm007magnum (~Rheanna@218.78.94.61)
[05:58:22] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 260 seconds)
[06:00:40] *** Quits: proller (~p@2a02:6b8:b081:8813::1:20) (Ping timeout: 268 seconds)
[06:13:16] *** Joins: proller (~p@80.240.216.69)
[06:15:52] *** Quits: Guest37__ (~textual@124.168.255.30) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[06:31:31] *** Quits: cm007magnum (~Rheanna@218.78.94.61) (Remote host closed the connection)
[06:33:39] *** Joins: cm007magnum (~Rheanna@61.171.38.68)
[06:42:08] *** Quits: shailangsa (~shailangs@host86-186-133-114.range86-186.btcentralplus.com) (Remote host closed the connection)
[06:43:35] *** Joins: Guest37__ (~textual@124.168.255.30)
[06:44:59] *** Quits: Guest37__ (~textual@124.168.255.30) (Client Quit)
[06:52:48] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[06:53:12] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[07:13:16] *** Quits: adeliktas (~adeliktas@2001:16b8:22ae:9400:6070:1d72:baa1:a7ff) (Ping timeout: 256 seconds)
[07:21:22] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[07:21:30] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 260 seconds)
[07:21:31] *** Quits: cm007magnum (~Rheanna@61.171.38.68) (Remote host closed the connection)
[07:23:11] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Remote host closed the connection)
[07:25:11] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[07:29:43] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:29:53] *** Joins: adeliktas (~adeliktas@2001:16b8:22e5:f300:6070:1d72:baa1:a7ff)
[07:34:07] *** Joins: Colt2 (~Colt@ptr-1w23zewqpabrx5264q3.18120a2.ip6.access.telenet.be)
[07:34:07] *** Quits: Colt2 (~Colt@ptr-1w23zewqpabrx5264q3.18120a2.ip6.access.telenet.be) (Changing host)
[07:34:07] *** Joins: Colt2 (~Colt@user/colt)
[07:35:01] *** Quits: Colt (~Colt@user/colt) (Ping timeout: 268 seconds)
[07:36:12] *** Quits: Colt2 (~Colt@user/colt) (Client Quit)
[07:37:01] *** Joins: Colt (~Colt@user/colt)
[07:49:53] *** Quits: Youmu (uid129469@user/condy) ()
[07:49:56] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[07:50:51] *** Joins: Youmu (uid129469@user/condy)
[07:55:02] *** Quits: blackhole (~blackhole@2601:600:9f80:2aa0:3d7f:135a:b66e:9d37) (Ping timeout: 240 seconds)
[08:19:52] *** Joins: cm007magnum (~Rheanna@61.171.38.68)
[08:54:50] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[08:55:58] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[08:58:14] *** Quits: malloy (~jimery@116.30.222.115) (Ping timeout: 250 seconds)
[09:00:23] *** Joins: malloy (~jimery@116.30.222.115)
[09:02:05] *** Quits: cm007magnum (~Rheanna@61.171.38.68) (Remote host closed the connection)
[09:04:20] *** Joins: cm007magnum (~Rheanna@218.78.99.237)
[09:04:43] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[09:13:01] *** Quits: badone (~badone@209.132.189.136) (Quit: ZNC 1.7.5 - https://znc.in)
[09:18:48] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[09:18:48] *** Quits: geordi (~geordi@tinodidriksen.com) (*.net *.split)
[09:18:48] *** Quits: Cienisty (Cienisty@user/cienisty) (*.net *.split)
[09:18:48] *** Quits: flynn (~mcbloch@user/flynn) (*.net *.split)
[09:18:48] *** Quits: Nixx (~quassel@bulbasaur.sjorsgielen.nl) (*.net *.split)
[09:18:48] *** Quits: djinni (~djinni@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[09:18:48] *** Quits: xkoncek (xkoncek@lounge.fi.muni.cz) (*.net *.split)
[09:18:48] *** Quits: yolo_ (~xxiao@159.89.184.51) (*.net *.split)
[09:18:56] *** Joins: yolo (~xxiao@159.89.184.51)
[09:19:02] *** Joins: Nixx (~quassel@bulbasaur.sjorsgielen.nl)
[09:19:02] *** Joins: xkoncek (xkoncek@lounge.fi.muni.cz)
[09:19:06] *** Joins: Cienisty (Cienisty@user/cienisty)
[09:19:08] *** Joins: flynn (~mcbloch@user/flynn)
[09:19:29] *** Joins: geordi (~geordi@tinodidriksen.com)
[09:19:29] *** ChanServ sets mode: +v geordi
[09:19:29] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[09:20:01] *** Joins: djinni (~djinni@static.38.6.217.95.clients.your-server.de)
[09:24:59] *** Quits: mattf (mattf@2600:3c03::f03c:92ff:fea6:56a4) (*.net *.split)
[09:24:59] *** Quits: Soliton (~Soliton@wesnoth/developer/soliton) (*.net *.split)
[09:24:59] *** Quits: mteo (francis@user/francis) (*.net *.split)
[09:25:00] *** Quits: roxlu (~roxlu@2a01:7c8:aac0:286:8c3a:b01c:3830:245b) (*.net *.split)
[09:25:00] *** Quits: tinloaf (~tinloaf@2a03:94e0:163c:57e:bc51:5c66:86e7:1) (*.net *.split)
[09:25:00] *** Quits: bv (~bv@user/bv) (*.net *.split)
[09:25:00] *** Quits: notevil (~notevil@user/notevil) (*.net *.split)
[09:25:00] *** Quits: jns (~x@user/jns) (*.net *.split)
[09:25:00] *** Quits: jessicara (~shirogits@user/jessicara) (*.net *.split)
[09:25:00] *** Quits: alex88 (~alex88@ip72-207-140-105.lv.lv.cox.net) (*.net *.split)
[09:25:00] *** Quits: d12fk (~heiko@exit0.net) (*.net *.split)
[09:25:00] *** Quits: gnomesort (~gnomesort@user/gnomesort) (*.net *.split)
[09:25:00] *** Quits: derwolf (~DerWolf@2a01:4f8:c0c:554a::1) (*.net *.split)
[09:25:00] *** Quits: naur (naur@user/naur) (*.net *.split)
[09:25:00] *** Quits: sauce (~sauce@omae.wa.mou.shindei.ru) (*.net *.split)
[09:25:15] *** Joins: roxlu (~roxlu@2a01:7c8:aac0:286:8c3a:b01c:3830:245b)
[09:25:15] *** Joins: alex88 (~alex88@ip72-207-140-105.lv.lv.cox.net)
[09:25:16] *** Joins: jns (~x@comlink.adminking.com)
[09:25:17] *** Joins: mattf (~mattf@li908-138.members.linode.com)
[09:25:27] *** Joins: Soliton (~Soliton@wesnoth/developer/soliton)
[09:25:29] *** Joins: sauce (~sauce@omae.wa.mou.shindei.ru)
[09:25:40] *** Joins: tinloaf (~tinloaf@2a03:94e0:163c:57e:bc51:5c66:86e7:1)
[09:25:40] *** Joins: notevil (~notevil@user/notevil)
[09:25:55] *** Joins: d12fk (~heiko@exit0.net)
[09:26:13] *** Quits: jns (~x@comlink.adminking.com) (Changing host)
[09:26:13] *** Joins: jns (~x@user/jns)
[09:26:24] *** Joins: bv (~bv@198.7.63.200)
[09:26:27] *** Quits: bv (~bv@198.7.63.200) (Changing host)
[09:26:27] *** Joins: bv (~bv@user/bv)
[09:26:30] *** Joins: derwolf (~DerWolf@2a01:4f8:c0c:554a::1)
[09:27:36] *** Joins: gnomesort (~gnomesort@user/gnomesort)
[09:30:11] *** Joins: naur (naur@user/naur)
[09:30:55] *** Joins: jessicara (~shirogits@user/jessicara)
[09:33:42] *** Joins: blackhole (~blackhole@2601:600:9f80:2aa0:1119:937f:34ed:8f22)
[09:36:45] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[09:38:25] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:38:33] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:38:33] *** ChanServ sets mode: +v npaperbot
[09:41:11] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[09:44:18] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 260 seconds)
[09:44:31] *** Quits: chozorho (~chozorho@2601:146:300:c30::361a) (Ping timeout: 268 seconds)
[09:45:19] *** Joins: chozorho (~chozorho@2601:146:300:c30::3d1b)
[09:46:11] *** Joins: Guest37__ (~textual@124.168.255.30)
[09:46:39] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[09:51:36] *** Quits: cm007magnum (~Rheanna@218.78.99.237) (Remote host closed the connection)
[09:52:23] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:d0b1:b7a3:bdc8:544) (Quit: Quit)
[09:53:14] *** Joins: cm007magnum (~Rheanna@61.171.69.141)
[09:58:31] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:647d:125:2176:c7bc)
[10:01:21] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:9996:15fa:2e5f:f1d)
[10:05:22] *** Parts: adeliktas (~adeliktas@2001:16b8:22e5:f300:6070:1d72:baa1:a7ff) ()
[10:07:26] *** Joins: Juliu_ (~Juliu@2a02:810b:c640:3ec0:a106:3987:8f4b:4644)
[10:09:06] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:647d:125:2176:c7bc) (Ping timeout: 245 seconds)
[10:09:44] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[10:13:57] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[10:30:38] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[10:30:52] *** Quits: Juliu_ (~Juliu@2a02:810b:c640:3ec0:a106:3987:8f4b:4644) (Quit: Quit)
[10:33:36] <malloy> hello, why this code print two lines? how to avoid printting the last line? https://paste.rs/pdN
[10:34:26] <kalven> malloy: while(ifs >> buf_from_f) { .. } is better
[10:36:27] <malloy> kalven: you're right
[10:39:01] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[10:39:34] *** Quits: ville (~ville@178-75-128-81.bb.dnainternet.fi) (Quit: Lost terminal)
[10:40:23] <malloy> but what's the difference ?  it's so tricky
[10:41:14] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:41:37] *** Quits: cm007magnum (~Rheanna@61.171.69.141) (Remote host closed the connection)
[10:41:42] <malloy> it's even an example of "https://www.learncpp.com/cpp-tutorial/basic-file-io/"
[10:44:34] *** Joins: cm007magnum (~Rheanna@61.171.69.141)
[10:45:03] <ambasta> Is it possible to constrain the return type of a function by a concept? i.e. someconcept<decltype(fn)>
[10:46:20] <kalven> malloy: there are unfortunately a lot of bad tutorials out there
[10:46:23] *** Quits: chozorho (~chozorho@2601:146:300:c30::3d1b) (Quit: good night)
[10:47:42] <ambasta> Resolved, tried { fn } -> SomeConcept; and that worked
[10:47:56] *** Quits: blackhole (~blackhole@2601:600:9f80:2aa0:1119:937f:34ed:8f22) (Remote host closed the connection)
[10:48:18] *** Joins: blackhole (~blackhole@2601:600:9f80:2aa0:1119:937f:34ed:8f22)
[10:59:11] *** Joins: ville (~ville@178-75-128-81.bb.dnainternet.fi)
[11:04:08] *** Quits: Guest37__ (~textual@124.168.255.30) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[11:22:39] *** Quits: blackhole (~blackhole@2601:600:9f80:2aa0:1119:937f:34ed:8f22) (Ping timeout: 264 seconds)
[11:31:31] *** Quits: cm007magnum (~Rheanna@61.171.69.141) (Remote host closed the connection)
[11:33:39] *** Joins: cm007magnum (~Rheanna@61.171.21.169)
[11:33:41] *** Quits: letto (~letto@86.120.85.133) (Read error: Connection reset by peer)
[11:33:49] *** Joins: letto2 (~letto@86.120.85.133)
[11:45:42] *** Joins: andreasbuhr (~quassel@p549dbdeb.dip0.t-ipconnect.de)
[11:45:50] *** Quits: andreasbuhr (~quassel@p549dbdeb.dip0.t-ipconnect.de) (Client Quit)
[11:51:20] *** Joins: nojhan (uid443807@id-443807.lymington.irccloud.com)
[12:00:46] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[12:05:19] *** Joins: Guest37__ (~textual@124.168.255.30)
[12:07:08] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[12:09:50] <LordKalma> mornin
[12:10:24] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:12:51] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 276 seconds)
[12:13:59] *** Joins: lpapp (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com)
[12:14:06] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[12:14:11] <lpapp> hi, interesting: "Because of historical accident, the C++ standard also uses unsigned integers to represent the size of containers - many members of the standards body believe this to be a mistake, but it is effectively impossible to fix at this point."
[12:14:58] *** Quits: DrMax (~DrMax@node-1w7jra94757fyzph62x7eqeod.ipv6.telus.net) (Ping timeout: 268 seconds)
[12:16:30] <smallville7123> i hate when fundemental stuff break ;-;
[12:17:14] <sprout> thought of the day.  take the analytical extension of sets and come up with a theory where sets can have size -1
[12:18:10] <LordKalma> qt containers use qsizetype which is basically ssize_t (double s)
[12:18:27] <LordKalma> (in Qt 6, up to Qt 5 they used int which is BS)
[12:18:40] <LordKalma> so that -1 can be used as a magic return value :p
[12:18:59] <LordKalma> also, what's funny, and I wasn't aware of, is that openmp likes sized types
[12:19:01] <Haohmaru> but unsigned overflow was UB, wasn't it?
[12:19:11] <LordKalma> signed, you mean?
[12:19:17] <Haohmaru> * signed
[12:19:21] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 276 seconds)
[12:20:15] <LordKalma> idk
[12:20:19] <LordKalma> the c++ standard is so fucked up
[12:20:24] <Haohmaru> now now
[12:20:35] <LordKalma> mandates 2's complement. doesn't tell you about overflowing...
[12:20:46] <Haohmaru> i might be wrong
[12:20:50] <LordKalma> it has the consistency of blended chicken
[12:21:22] *** Joins: shailangsa (~shailangs@host86-186-133-114.range86-186.btcentralplus.com)
[12:21:35] *** Quits: cm007magnum (~Rheanna@61.171.21.169) (Remote host closed the connection)
[12:22:48] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[12:23:34] *** Joins: cm007magnum (~Rheanna@101.89.150.168)
[12:26:39] *** Joins: DrMax (~DrMax@node-1w7jra94757g12vifipd1cdyo.ipv6.telus.net)
[12:29:51] *** Joins: robod34 (Username@79.113.195.239)
[12:30:37] <ville> LordKalma: c or c++ doesn't require the bit pattern of a null pointer is all zeroes. think about how much code depends on memset() classes with pointers as members...
[12:31:10] <LordKalma>  memset() classes with pointers as members // Don't know what this means
[12:31:32] <Haohmaru> struct some_thing { void * ptr; };
[12:31:34] <ville> struct aa { char* b; char* e; }
[12:32:00] <Haohmaru> where you'd "clear" the whole struct using memset() to zero
[12:32:03] <LordKalma> and what about memsetting them?
[12:32:04] <LordKalma> ahhh
[12:32:07] <LordKalma> interesting
[12:32:14] <ville> and then later on it might get used something like: aa x; memset(); if(x.a == NULL) { ... }
[12:32:14] <Haohmaru> expecting pointers to turn into nullptr
[12:32:58] <LordKalma> that does sound like a C thing to do
[12:34:54] <Haohmaru> yeah it's very "popular" in C
[12:35:13] *** Quits: SuperNintendoSUX (~sjw@69.206.48.64) (Remote host closed the connection)
[12:36:21] <ville> i'd make a claim that it's idiomatic in c and still popular in c++
[12:36:25] *** Joins: SuperNintendoSUX (~sjw@69.206.48.64)
[12:38:22] <Haohmaru> but i'm kind of scared iirc nullptr had some possible funky meanings/behaviors, and if it happens to be equal to 0 then that might not work well on some platforms where RAM address 0 is legit
[12:38:53] <Haohmaru> so it's probably not a bad idea that the value of nullptr can be different
[12:39:02] *** Joins: jehelset (~jeh@ti0005q162-7332.bb.online.no)
[12:39:24] <ville> i don't believe there are modern platforms where null pointer doesn't have all 0 pattern
[12:39:30] <ville> modern as in since 90s
[12:40:15] *** Quits: immibis (~hexchat@62.156.144.218) (Ping timeout: 256 seconds)
[12:40:19] <Haohmaru> yes
[12:40:34] <Haohmaru> it's 0 on avr-gcc
[12:40:44] *** Quits: HvszrStykp (~X@81.171.62.87) (Ping timeout: 246 seconds)
[12:41:03] <Haohmaru> and you can put an array at address 0
[12:42:48] <LordKalma> so who do you distinguish?
[12:43:01] <ville> not a hardware person but i am not sure if anything prevents you from doing the same on x86. it's upto you not to do that and preserve the value
[12:43:16] <ville> LordKalma: by not putting stuff at 0
[12:43:33] <ville> LordKalma: on an avr microcontroller you're the os or you chose on os to run that does memory management for you
[12:43:52] <Haohmaru> forget OSes, it's bare-metal
[12:44:11] <ville> you can stick on OS there
[12:44:22] <LordKalma> so.... couple bytes gone for the sake of nullpt
[12:44:26] <Haohmaru> when your chip has 8K RAM, then that goes from address 0 all the wa to 8191 or so, and it's all yours, the stack goes at the top
[12:44:54] <Haohmaru> one byte would be enough but IMO this isn't nice
[12:45:22] *** Joins: immibis (~hexchat@62.156.144.218)
[12:45:37] *** Joins: andreasbuhr (~quassel@p549dbdeb.dip0.t-ipconnect.de)
[12:45:38] *** Quits: andreasbuhr (~quassel@p549dbdeb.dip0.t-ipconnect.de) (Client Quit)
[12:45:47] <Haohmaru> the linker scripts that come with avr-gcc don't do anything, you could push the whole .data section so it starts from address 1, using the linker scripts but nobody does that
[12:45:51] *** Quits: johnny (~johnny@user/johnny) (Remote host closed the connection)
[12:47:10] <Haohmaru> so the linker puts your variables at $whatever addresses it decides to, and you'd have some object at address 0 if you don't do anything in particular.. thus if you happen to use a pointer to that object, it will be equal to nullptr
[12:47:15] <Haohmaru> if i understand correctly
[12:47:29] *** Joins: soman (~soman@83.139.147.234)
[12:48:39] <LordKalma> use optional<mytype *> everywhere. solved
[12:48:48] *** Joins: johnny (~johnny@user/johnny)
[12:49:21] <Haohmaru> on x86 first there's this "virtual memory" thing, then your whole program goes in RAM and is executed from RAM, then there's also the huge address space (32bit or 64bit addresses), so i doubt you can easily end up with the linker putting legit objects at address 0
[12:50:08] <Latexi95> On ARM devices, it is quite common that the startup vector is located to address 0. So eg. on Cortex-M* there (uint32_t*)0 == default stack pointer
[12:50:38] <LordKalma> on AVR I guess you could use the first addresses for .text? that way you don't ever compare to 0?
[12:50:58] <Haohmaru> i think cortex-M also had this with RAM address 0 being a legit place to put data
[12:51:09] <LordKalma> 9oh yeah, the startup address...
[12:51:20] <Haohmaru> LordKalma on AVR, .text can't be in the RAM
[12:51:34] <Haohmaru> it executes from flash memory only
[12:51:56] <LordKalma> ah yes that thing, yeah, sorry
[12:51:56] <Latexi95> Yes. Sure. It just depends on the mapping. Othen at the bootup 0 is mapped to manufacturer ROM which then jumps to start of flash and SRAM is mapped to start from 0
[12:52:14] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[12:52:26] *** Quits: soman (~soman@83.139.147.234) (Quit: Client closed)
[12:53:08] <LordKalma> ASM best language confirmed
[12:53:27] <Haohmaru> i wonder if the folks brewing the standard, in particular things related to "nullptr", are aware that address 0 is legit
[12:53:40] * Haohmaru slaps LordKalma with NOPs
[12:53:56] <LordKalma> the whole discussion is that the standard washes its hands of what nullptr is
[12:53:58] <lpapp> so, unsigned integers are a mistake?
[12:54:08] <LordKalma> so it's up to compiler vendors to not fuck shit up on your platform
[12:54:23] <Haohmaru> right.. how great
[12:54:41] <Haohmaru> and compiler vendors wash their hands with the linker?
[12:55:15] <LordKalma> idk, why it's probably different teams, when you talk about a "compiler vendor" you presume it includes a pre-processor and a linker
[12:56:02] <LordKalma> I had someone from libc++ tell me that llvm doesn't have an homogenous articulation
[12:56:04] <Haohmaru> go to #gcc and try to ask linker questions
[12:56:11] <LordKalma> so take from that whatever you will
[12:56:12] <LordKalma> hhahah
[12:56:32] <LordKalma> yeah, goes in hand with that I just said also
[12:57:48] <Haohmaru> it just feels slightly OCD-tickling that especially on these chips with very small RAM you'd have to sacrifice one byte of it so that you'd be safe from having some weird bug with nullptr
[12:58:08] <LordKalma> indeed
[12:58:14] *** Quits: greyblue9 (sid500829@id-500829.ilkley.irccloud.com) (Ping timeout: 246 seconds)
[12:58:27] *** Quits: bjs (sid190364@user/bjs) (Ping timeout: 250 seconds)
[12:58:28] *** Quits: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com) (Ping timeout: 250 seconds)
[12:58:34] *** Quits: computerquip (sid423484@user/computerquip) (Ping timeout: 265 seconds)
[12:58:34] *** Quits: headline (sid102736@id-102736.tinside.irccloud.com) (Ping timeout: 265 seconds)
[12:58:36] *** Quits: nojhan (uid443807@id-443807.lymington.irccloud.com) (Ping timeout: 260 seconds)
[12:58:36] *** Quits: Bodger1234_ (sid503511@id-503511.uxbridge.irccloud.com) (Ping timeout: 260 seconds)
[12:58:36] *** Quits: psb_ (sid500598@id-500598.ilkley.irccloud.com) (Ping timeout: 260 seconds)
[12:58:41] *** Quits: Youmu (uid129469@user/condy) (Ping timeout: 250 seconds)
[12:58:44] <LordKalma> I don't know a good solution though
[12:58:56] *** Quits: nightstrike (uid487@id-487.uxbridge.irccloud.com) (Ping timeout: 246 seconds)
[12:59:03] *** Quits: Argorok (sid195487@id-195487.hampstead.irccloud.com) (Ping timeout: 265 seconds)
[12:59:09] <LordKalma> well, the solution would be again to use signed types for pointers
[12:59:10] <LordKalma> and use -1
[12:59:11] *** Quits: leonardus (sid358597@id-358597.tinside.irccloud.com) (Ping timeout: 264 seconds)
[12:59:11] *** Quits: kristjansson_ (sid126207@id-126207.tinside.irccloud.com) (Ping timeout: 264 seconds)
[12:59:19] *** Quits: lhtseng (sid15322@id-15322.helmsley.irccloud.com) (Ping timeout: 250 seconds)
[12:59:22] <Haohmaru> well, one solution would be to use a different value for nullptr, a value which isn't a legit address
[12:59:22] *** Quits: buhman (sid411355@user/buhman) (Ping timeout: 268 seconds)
[12:59:32] *** Quits: NiKaN (sid385034@id-385034.helmsley.irccloud.com) (Ping timeout: 265 seconds)
[12:59:40] <LordKalma> but it's a bit wasted, so half of the possible address space on that size of data
[12:59:49] <LordKalma> hum, yeah, but like, it's the same of what I just said
[13:00:08] <LordKalma> if you have like just enough ram for 4 bits of address space
[13:00:12] <LordKalma> you'd need a 5th bit for that
[13:00:23] <LordKalma> aka, 4 more bits, if we're being realistic
[13:00:32] *** Joins: psb_ (sid500598@ilkley.irccloud.com)
[13:00:34] *** Joins: lhtseng (sid15322@helmsley.irccloud.com)
[13:00:37] *** Joins: kristjansson_ (sid126207@tinside.irccloud.com)
[13:00:38] *** Joins: Bodger1234_ (sid503511@uxbridge.irccloud.com)
[13:00:49] <Haohmaru> however, there might be a chip where it has a 16bit pointer and has 64K RAM, so there practically isn't a free value in the range for the value of nullptr
[13:00:52] *** Joins: nightstrike (uid487@uxbridge.irccloud.com)
[13:01:08] <LordKalma> yeap, that what I just concluded too
[13:01:13] *** Joins: Argorok (sid195487@hampstead.irccloud.com)
[13:01:27] *** Joins: bjs (sid190364@user/bjs)
[13:01:36] *** Joins: buhman (sid411355@user/buhman)
[13:01:38] *** Joins: NiKaN (sid385034@helmsley.irccloud.com)
[13:01:45] *** Joins: Youmu (uid129469@user/condy)
[13:01:55] *** Joins: nojhan (uid443807@lymington.irccloud.com)
[13:01:57] <LordKalma> so you either forgo 1 byte + (alignof(whatever_goes_in_address_0)-1), or you need a larger number to store pointers, which is probably more wasteful than that
[13:02:12] *** Joins: ullbeking_ (sid5364@ilkley.irccloud.com)
[13:02:23] <LordKalma> so we concluded the compiler's decision to leave it at nullptr = 0x00 is probably the least worst solution
[13:03:13] *** Joins: computerquip (sid423484@user/computerquip)
[13:03:26] *** Joins: greyblue9 (sid500829@ilkley.irccloud.com)
[13:03:28] *** Joins: leonardus (sid358597@tinside.irccloud.com)
[13:03:40] <LordKalma> but ideally the bundled default linker scripts for those platforms would have that in mind
[13:03:45] <LordKalma> which they probably don't
[13:03:54] <Haohmaru> i think the AVR with the most RAM is 32K, so it'll work for AVR in particular, to use like 0xFFFF for nullptr
[13:04:36] <LordKalma> what's the size of a pointer in that platform?
[13:04:51] *** Joins: headline (sid102736@tinside.irccloud.com)
[13:05:01] <Haohmaru> the other problem here is that "cleared" structures which contain pointers will no longer be 0-valued, so their initial values (of those structures) will have to be in that different .section
[13:05:23] <Haohmaru> LordKalma it may actually be 24bit
[13:05:28] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[13:05:41] <LordKalma> << 0xFFF;
[13:05:42] <geordi> 4095
[13:05:58] <Haohmaru> because some of the bigger/fancier AVRs support extended external memory like up to 16MB or so
[13:06:06] <LordKalma> sorry hahah that's 12 *facepalms*
[13:06:42] <LordKalma> but yeah, the zero-init problem is also relevant
[13:07:12] <LordKalma> and mind you, in ELF at least, the zero blocks aren't stored as binary zeros, it's just where and how many
[13:07:21] <LordKalma> of course on a .hex file that might not be the case
[13:07:58] <Haohmaru> i don't schprachen ze ELF
[13:08:22] <LordKalma> me neither, just a side note on it
[13:08:41] *** Quits: nightstrike (uid487@uxbridge.irccloud.com) (Ping timeout: 245 seconds)
[13:08:49] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:08:55] *** Joins: nightstrike (uid487@id-487.uxbridge.irccloud.com)
[13:09:23] *** Quits: Guest37__ (~textual@124.168.255.30) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:09:43] <Haohmaru> probably the safest solution is to sacrifice address 0 by either excluding it from the .data section (via linker script) or force the linker to put a dummy object at it
[13:10:45] <LordKalma> yeah, it's that conclusion we reach indeed
[13:10:57] <Haohmaru> or.. i wonder if the compiler could be made to check this.. like, flag all your objects/arrays which you'd ever want a pointer to, with some attribute "warn me if this gets put at address 0"
[13:10:59] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Client Quit)
[13:11:10] <LordKalma> so it would be ideal gcc's default linker scripts for embedded platforms  to do that by default
[13:11:12] <Haohmaru> ehm i meant the linker
[13:12:05] <Haohmaru> on the other hand, i think nullptr really comes into play when you start dealing with dynamic memory, which you shouldn't be doing much on bare-metal
[13:12:05] *** Quits: cm007magnum (~Rheanna@101.89.150.168) (Remote host closed the connection)
[13:12:41] <LordKalma> if at all
[13:13:11] *** Joins: cm007magnum (~Rheanna@218.78.104.50)
[13:13:21] <Haohmaru> yes, tho even if you never use dynamic memory, you still happen to use nullptr here and there when you have pointers
[13:13:57] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 276 seconds)
[13:14:14] <LordKalma> prefering reference semantics is probably best in embedded
[13:14:53] <Haohmaru> yes, references ftw, but sometimes you gotta use a pointer :/
[13:15:02] <LordKalma> indeed
[13:15:28] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[13:15:37] <Haohmaru> i do have a number of functions taking pointers to something and checking if the pointer is == nullptr
[13:15:59] *** Joins: plastico (~plastico@neomutt/plastico)
[13:19:19] <Haohmaru> !fact
[13:19:20] <nolyc> Haohmaru: The end iterator is not dereferenceable. Two end iterators are always equal.
[13:23:40] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:24:06] * Haohmaru makes a linker script to position PJBoy at address 0
[13:25:36] <Haohmaru> a sacrifice for the nullptr gods
[13:26:56] *** Joins: uzer1 (~uzer@dsl-trebng11-54f912-114.dhcp.inet.fi)
[13:36:23] <PJBoy> that's a reasonable sacrifice
[13:37:06] <Haohmaru> but it's unwanted
[13:38:25] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:38:34] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:38:34] *** ChanServ sets mode: +v npaperbot
[13:43:24] *** Joins: Burgundy (~yomon@86.127.194.72)
[13:48:25] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[13:49:30] *** Joins: AmR (~AmREiSa@102.47.62.197)
[13:50:43] *** Joins: teepee (~teepee@openscad/teepee)
[13:52:48] *** Parts: lpapp (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com) ()
[13:55:43] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:990:f1e:8987:d5f9)
[13:59:11] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:7816:2c69:3dcc:933a) (Ping timeout: 264 seconds)
[14:02:04] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:e931:44b2:abc5:155b)
[14:02:05] *** Quits: cm007magnum (~Rheanna@218.78.104.50) (Remote host closed the connection)
[14:03:21] *** Joins: cm007magnum (~Rheanna@218.78.53.13)
[14:05:31] *** Joins: Guest37__ (~textual@124.168.255.30)
[14:05:51] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:990:f1e:8987:d5f9) (Ping timeout: 264 seconds)
[14:09:51] *** Joins: paule32_ (~paule32@user/paule32)
[14:13:06] *** Quits: paule32 (~paule32@user/paule32) (Ping timeout: 260 seconds)
[14:13:55] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:29bf:5ae9:f17:83c0)
[14:14:26] <LordKalma> PJBoy, we spent the morning discussing nullptr=0 shenanigans. You might to read the log
[14:14:43] *** Quits: Trollmann (~Trollmann@user/trollmann) (Ping timeout: 250 seconds)
[14:14:44] <PJBoy> I've probably heard it all before
[14:15:14] <LordKalma> PJBoy, also, since you love OpenMP. The other way I was noticing something. OpenMP likes signed integer types in the for loops.
[14:15:15] *** Joins: Trollmann (~Trollmann@user/trollmann)
[14:15:24] <PJBoy> it does
[14:15:29] <PJBoy> because it's dumb
[14:15:37] <LordKalma> And I don't exactly recall why, I was doing something that either broke on MSVC or the others
[14:15:43] <LordKalma> as in, depending on the openmp version
[14:15:54] <LordKalma> changing something that I don't recall now broke things in one or the other
[14:16:07] <PJBoy> MSVC definitely doesn't allow unsigned int loops for openmp
[14:16:26] <PJBoy> openmp is the cause of most of my mismatched unsigned/signed warnings
[14:17:01] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:e931:44b2:abc5:155b) (Ping timeout: 245 seconds)
[14:17:20] <PJBoy> if I had to speculate
[14:17:45] <PJBoy> I'd say maybe there are SIMD instructions that check if a vector is all/any values are negative
[14:17:57] <PJBoy> and so that plays better for loops somehow
[14:18:14] <PJBoy> but then they got rid of that limitation in openmp 3
[14:18:22] <PJBoy> so idk, maybe it was just lack of consideration
[14:18:45] *** paule32_ is now known as paule32
[14:18:52] <Haohmaru> what was openMP about?
[14:20:06] <PJBoy> openmp is a standardised compiler extension / API for concurrency
[14:20:34] <PJBoy> I pretty much just use it for #pragma omp parallel for
[14:20:48] <PJBoy> get an easy 16x speedup
[14:20:55] <Haohmaru> hm
[14:29:15] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:32:46] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[14:34:03] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[14:36:56] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[14:37:19] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[14:37:39] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 264 seconds)
[14:46:36] *** Joins: cursey (~cursey@user/cursey)
[14:46:41] *** Joins: HvszrStykp (~X@81.171.62.87)
[14:47:26] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[14:49:10] <cbreak> I'd recommend size_t for such loops
[14:49:55] <LordKalma> well, openmp tells you to gtfo
[14:50:11] *** Joins: teepee (~teepee@openscad/teepee)
[14:51:32] <Haohmaru> fork it! \o/
[14:51:53] <Haohmaru> with this big fork: ---E
[14:53:18] *** Joins: pulse (~pulse@user/pulse)
[14:54:28] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[14:54:36] <cbreak> LordKalma: nah, works fine
[14:55:42] <PJBoy> openmp 2 tells you to gtfo
[14:55:59] <PJBoy> openmp 3 fixed it according to SO
[14:57:02] <LordKalma> but MSVC doesn't know what openmp > 2 is
[14:57:33] <cbreak> looking at https://www.openmp.org/wp-content/uploads/OpenMP-API-Specification-5.0.pdf, it seems any integer is supported
[14:57:36] <cbreak> and even iterators are
[14:57:50] <Haohmaru> aww, M$VC
[14:57:54] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[14:58:16] <LordKalma> yeah, openmp 5 is a mirage for msvc
[14:58:23] <LordKalma> so you end up with incompatible code
[14:58:47] <LordKalma> does openmp define any useful #defines to check this stuff?
[14:58:48] <cbreak> people should use a recent-ish compiler
[14:58:59] <Haohmaru> just use gcc
[14:59:00] <cbreak> if msvc can't handle it, use clang, gcc or icc
[14:59:03] <LordKalma> visual studio 2022 preview, man :p
[14:59:22] <LordKalma> https://devblogs.microsoft.com/cppblog/improved-openmp-support-for-cpp-in-visual-studio/
[14:59:26] <LordKalma> this was the last time they talked about it
[14:59:34] <Haohmaru> so it has next-gen spyware, but ancient openmp?
[14:59:41] <Haohmaru> i meant "telemetry"
[15:02:01] *** Quits: Guest37__ (~textual@124.168.255.30) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[15:04:45] <cbreak> do people still use msvc for that?
[15:04:57] <cbreak> I'd expect intel's OpenMP to be quite popular on windows
[15:05:30] *** Joins: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:91ed:5100:5834:6b0b)
[15:05:51] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:9996:15fa:2e5f:f1d) (Ping timeout: 264 seconds)
[15:06:03] *** Joins: X-Scale` (~ARM@31.22.202.54)
[15:08:16] *** Quits: X-Scale (~ARM@31.22.202.54) (Ping timeout: 268 seconds)
[15:08:16] *** Joins: DSpider (DSpider@2a02:2f00:1ff:ffff::646c:6344)
[15:08:16] *** Quits: DSpider (DSpider@2a02:2f00:1ff:ffff::646c:6344) (Client Quit)
[15:08:21] *** X-Scale` is now known as X-Scale
[15:08:34] *** Joins: Guest37__ (~textual@124.168.255.30)
[15:09:36] <PJBoy> MS is trying to with to clang
[15:09:39] <PJBoy> it's the only explanation
[15:09:47] <PJBoy> s/with/switch
[15:10:11] <LordKalma> while the article does mention you can't distribute code with those dlls
[15:10:17] <LordKalma> it's some hope
[15:10:29] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[15:11:27] *** Joins: manjaro-user (~manjaro-u@199-7-159-126.eng.wind.ca)
[15:13:30] <PJBoy> > The new switch currently supports all the same OpenMP 2.0 directives as -openmp, as well as support for unsigned integer indices in parallel for loops according to the OpenMP 3.0 standard
[15:13:42] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[15:13:43] <PJBoy> wow I didn't expect unsigned indices to actually be a point worthy of mentioning
[15:13:46] <LordKalma> ah, maybe it was something else then
[15:13:54] <PJBoy> it's a minor inconvenience at worst
[15:13:57] <LordKalma> (that I was getting messed with)
[15:13:59] <LordKalma> it's not
[15:14:02] *** Joins: Deneb (~johnch@30.125.7.51.dyn.plus.net)
[15:14:23] <PJBoy> you can always cast back into an unsigned int inside the loop
[15:14:35] <cbreak> PJBoy: int is much less big than size_t
[15:14:42] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5cca:96d9:7234:6761)
[15:14:42] <cbreak> does it support long long on msvc?
[15:14:47] <PJBoy> it does
[15:14:47] <cbreak> or ptrdiff_t?
[15:14:57] <PJBoy> the spec says any signed int
[15:15:05] <cbreak> it also says any unsigned int
[15:15:09] <cbreak> or any random access iterator
[15:15:12] <PJBoy> in openmp 3+ sure
[15:15:20] <LordKalma> msvc doesn't support openmp3
[15:15:21] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[15:15:29] <PJBoy> hence the quote I pasted
[15:15:51] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[15:17:08] <LordKalma> https://developercommunity.visualstudio.com/t/please-support-newer-version-of-openmp/351554
[15:17:14] <PJBoy> anyways MSVC isn't my go-to for performance builds anyway
[15:17:34] <LordKalma> "We have added some support for OpenMP 4 SIMD vectorization since Visual Studio 2019 Preview 2."
[15:17:37] <LordKalma> and call it a day
[15:17:51] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:29bf:5ae9:f17:83c0) (Ping timeout: 245 seconds)
[15:17:57] <PJBoy> yeah, I think they wanted to leverage llvm after that haha
[15:18:26] <LordKalma> so complete the fucking feature urgh
[15:19:40] <PJBoy> I really don't like that website
[15:19:58] <PJBoy> like they want community voting on what openmp features to include or whatever
[15:20:04] <PJBoy> but like
[15:20:15] <PJBoy> that site is hard to find, and it's ugly, you don't wanna stay on it too long
[15:20:26] <PJBoy> devs aren't gonna stumble onto it
[15:20:45] <PJBoy> maybe companies would be willing to invest their attention there
[15:21:00] <PJBoy> but on the other hand, they'd have to wait months or years for this stuff to actually get implemented
[15:21:10] <LordKalma> yeah it's shit
[15:21:11] <PJBoy> which is way too long for any business project
[15:21:25] <PJBoy> move that shit to github
[15:21:41] <LordKalma> and in the meanwhile, llvm is both being picked up by everybody, from MS to Intel, and at the same time with diminishing contributor base...
[15:21:50] <PJBoy> yeah isn't that weird
[15:21:58] <PJBoy> it's the most useful it's ever been
[15:22:03] <PJBoy> and the least it's ever been developed
[15:22:06] <LordKalma> it's called leeching
[15:22:30] <PJBoy> I support it
[15:22:39] <LordKalma> leeching?
[15:22:43] <PJBoy> if we could all get together and just use llvm
[15:22:47] <Haohmaru> hm, what? llvm is not being contributed to?
[15:22:48] <PJBoy> and cmake
[15:22:58] <PJBoy> and maybe conan
[15:23:05] <PJBoy> imagine how happy the world would be
[15:23:09] <LordKalma> I support lynching of leechers
[15:23:14] <Haohmaru> conan sounds barbaric
[15:23:51] <PJBoy> idk about the llvm people, but when I license my shit permissively, I'm fully endorsing the idea of leeching
[15:24:04] <PJBoy> I would want people to use my shit
[15:24:22] <Haohmaru> why didn't the llvm people put GPL on it?
[15:24:32] <PJBoy> because GPL sucks
[15:24:33] <cbreak> because that would have been stupid
[15:24:44] <LordKalma> Haohmaru, wait until you hear about a conan-derived project called Barbarian https://github.com/bfgroup/barbarian
[15:24:54] <cbreak> the whole reason why LLVM is designed the way it is is for extensibility / reusability
[15:25:04] <LordKalma> Barbarian is like Conan but allows you to use git repos with a conanfile.py directly instead of needing an artifactory
[15:25:07] <cbreak> GPL adds pointless restrictions on top that go against this
[15:25:17] <Haohmaru> really?
[15:25:40] <PJBoy> plus the BSD guys would love to get rid of GCC
[15:25:42] <cbreak> like, NVidia can use LLVM to compile and optimize code for their GPUs in their driver
[15:25:57] <cbreak> but they couldn't if it would be GPL
[15:26:05] <Haohmaru> huh, but afaik $whatever llvm went for, allows $evil_company to fork it, add magic to it, and sell the result, closed source
[15:26:06] <PJBoy> it's like one of 5 GPL programs that they have to include
[15:26:21] <cbreak> Haohmaru: so?
[15:26:30] <cbreak> it still means LLVM is used :)
[15:26:36] <cbreak> goal succeeded
[15:26:42] <Haohmaru> yeah but..
[15:26:50] <LordKalma> it's funny to read on GCC's FAQ this: (gimme a second)
[15:27:30] <PJBoy> LLVM being usable like this is good for C++ as a whole
[15:27:39] <cbreak> yes.
[15:27:45] <PJBoy> means fewer people will complain about its complexities and poor tool compatibility on reddit
[15:28:08] <Haohmaru> i honestly thought that if GPL makes sense anywhere, it's on a compiler
[15:29:00] <LordKalma> can't find it. It was a funny page GCC has saying "yeah, while we'd love to mandate gcc's output to be gpl too, we can't realistic do that... even us aren't that suicidal-radical"
[15:29:07] <LordKalma> paraphrasing
[15:29:44] <Haohmaru> uhm..
[15:30:33] <Haohmaru> well i don't quite like when $vendor wants money for a compiler, when i'm already buying their chips
[15:30:42] <cbreak> I think where GPL makes sense is for software you don't want to be made closed source.
[15:30:57] <cbreak> even if it costs you users, contributions
[15:31:24] <Haohmaru> yeah i know some folks wouldn't contribute to a project due to GPL
[15:31:31] <Haohmaru> that's a loss
[15:31:40] <cbreak> my company has a strong aversion against GPL
[15:31:59] <cbreak> (there's an aversion against most OSS, for various reasons, but for GPL it's worse)
[15:31:59] <Haohmaru> i myself am still with mixed feelings towards GPL
[15:32:00] *** Joins: CalamityToo (~CalamityB@cpe-108-185-144-94.socal.res.rr.com)
[15:32:04] <cbreak> and that's about _using_ it
[15:32:11] <cbreak> contributing is an even bigger issue
[15:32:32] *** Joins: paul424 (~tom@ip-37-248-158-209.multi.internet.cyfrowypolsat.pl)
[15:32:49] <Haohmaru> yeah i've been making closed-source freeware crapware, and i've avoided using GPL
[15:33:21] <Haohmaru> but if i had to pay for a compiler - f*ck it
[15:34:03] <PJBoy> on the subject, I'm wondering if I wanna reconsider my licensing
[15:34:07] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[15:34:25] <Haohmaru> some $vendors even try to lock-down gcc, like microchip, making a free and a paid version of it
[15:34:26] <PJBoy> I was reminded that MIT/BSD/ISC require attribution of me in derivative works
[15:34:35] <PJBoy> which I really don't want to enforce
[15:34:45] <cbreak> you don't have to enforce it for your own things
[15:34:47] *** Quits: CalamityBlue (~CalamityB@cpe-108-185-144-94.socal.res.rr.com) (Ping timeout: 256 seconds)
[15:34:52] <cbreak> you only have to _follow_ it for the deps you use
[15:34:58] <PJBoy> sure
[15:35:09] <PJBoy> but I wouldn't want anyone else to have to credit me
[15:35:13] *** Joins: proller (~p@2a02:6b8:b081:a404::1:c)
[15:35:16] <LordKalma> Apache is even worse
[15:35:22] <LordKalma> You have to list all contributors
[15:35:25] <PJBoy> just seems like a burden for the sake of ego
[15:35:56] <cbreak> https://en.wikipedia.org/wiki/BSD_licenses#0-clause_license_(%22BSD_Zero_Clause_License%22) ? :D
[15:35:58] <cbreak> 0 clause
[15:36:06] <PJBoy> that's the one
[15:36:11] <PJBoy> I think I'm gonna switch to that
[15:36:32] <PJBoy> there was also a license out there that stops people from using your name for marketing purposes
[15:36:37] <PJBoy> which I was also kinda tempted by
[15:36:46] <LordKalma> It's pretty much all of those
[15:36:54] <LordKalma> Mit-0 is also nice
[15:37:28] *** Quits: scruffyfurn (scruffyfur@turbous.xshellz.com) (Ping timeout: 244 seconds)
[15:37:35] *** Joins: scruffyfurn (scruffyfur@turbous.xshellz.com)
[15:37:54] <johnny> uggh.. and now i'm having to mess with the interaction of C# and the win32 apis due to trying to fix a wine bug.. yay me
[15:38:17] <LordKalma> Fix or work around?
[15:38:25] <LordKalma> Can't you just use cross platform c#?
[15:38:34] <johnny> probably not
[15:38:44] <johnny> the project isn't open source because it uses paid assets
[15:39:02] <PJBoy> this SO would have me believe that the zero clause license has no effect https://opensource.stackexchange.com/questions/9084/recommended-license-for-small-script-without-an-attribution-clause
[15:39:06] <johnny> and i don't know if they even work on linux, and then there's a bug in mono's x11 renderer that prevents it from actually doing what it's supposed to do anyways
[15:39:31] <johnny> which is render a transparent clickthrough window!
[15:40:48] <LordKalma> Not even Avalonia supports transparency on Linux
[15:41:01] <PJBoy> requires too much graphics card support :o
[15:41:04] <PJBoy> *:p
[15:41:55] *** Quits: cm007magnum (~Rheanna@218.78.53.13) (Remote host closed the connection)
[15:43:36] <LordKalma> And a compositor that actually works
[15:44:20] <johnny> what is avalonia?
[15:44:33] *** Joins: cm007magnum (~Rheanna@101.91.232.166)
[15:44:34] <johnny> i know transparency works generally because mangohud works
[15:45:09] <johnny> and of course one can hack around with xprop to force transparent windows
[15:45:21] <LordKalma> Transparency is the bread and butter of ricing
[15:45:31] <johnny> ah yeah.. i forgot.. my term can go transparent too
[15:45:45] <johnny> so the working compositor seems there
[15:49:16] <PJBoy> avalonia is a cross platform GUI goodness
[15:49:33] <PJBoy> based on .NET and XAML
[15:51:01] <LordKalma> C# keeps tempting me away from C++
[15:51:26] <PJBoy> different tools for different fools
[15:51:57] <PJBoy> rust is tempting me away from python
[15:51:59] <PJBoy> as weird as that sounds
[15:52:25] <LordKalma> it does
[15:52:29] <LordKalma> F# would be more in line
[15:52:35] <LordKalma> but it lacks the numpy-like ecosystem
[15:52:38] <PJBoy> python's still king of REST interaction, but still
[15:52:43] <LordKalma> is it?
[15:52:44] <LordKalma> not JS?
[15:52:49] <PJBoy> JS is awful
[15:52:53] <LordKalma> haha yeah
[15:53:02] <PJBoy> I hate writing the JS side of ajax
[15:53:03] <LordKalma> it's been interesting to write this html templates and bootstrap crap
[15:53:34] <PJBoy> HTML god damn kills me
[15:53:48] <PJBoy> I swear it's the most broken and unintuitive markup system ever written
[15:53:57] <LordKalma> https://github.com/ruilvo/radioamadorismo-website/blob/master/frontend/src/views/Repeaters.vue
[15:54:02] <LordKalma> it does get big quick
[15:54:06] <PJBoy> I don't understand how it came to be accepted by all as good enough
[15:54:41] <LordKalma> i think people just kinda had to accept the web
[15:55:01] <LordKalma> but yeah, I wish there was an easy and quick way to do x-platform c++ + c# projects
[15:55:12] <LordKalma> the cmake thread on supporting .net has been very active
[15:55:41] <LordKalma> https://gitlab.kitware.com/cmake/cmake/-/issues/20227
[15:55:50] <PJBoy> there's loads of cross platform c# + c++ software out there
[15:55:53] <PJBoy> it can't be that hard
[15:55:59] <LordKalma> from what I could see
[15:56:02] <LordKalma> it's not easy either
[15:56:06] <PJBoy> :/
[15:56:15] *** Quits: proller (~p@2a02:6b8:b081:a404::1:c) (Ping timeout: 264 seconds)
[15:56:26] <PJBoy> I think it's generally C++ -> shared library, C# consumes that library
[15:56:28] <johnny> PJBoy, generally i used libraries like axios and whatno, and it's all fine
[15:56:42] <johnny> the await pattern is nice enough
[15:56:53] <johnny> and it covers annoyances in the fetch() implementation
[15:56:59] <LordKalma> PJBoy, I wanted to do that on a single build system
[15:57:10] <very_sneaky> does python have an async rest library akin to the complement of axios?
[15:57:24] <LordKalma> but you have to go trough a lot of hops and make it basically independent projects
[15:57:26] <johnny> i dunno.. i stopped writing python mostly in favor of js :)
[15:57:31] <very_sneaky> flask and fastapi are both single threaded aren't they
[15:57:35] <PJBoy> yeah it has aiohttp
[15:57:40] <johnny> because  prefer typescript over python
[15:57:44] <PJBoy> which is async version of requests library
[15:57:56] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[15:58:00] <LordKalma> very_sneaky, async doesn't mean multi-threaded
[15:58:10] <very_sneaky> PJBoy: can that be used to create rest api's though?
[15:58:19] <very_sneaky> async is just a broader term isn't it
[15:58:22] <PJBoy> to create them, probably not
[15:58:31] <very_sneaky> inclusive of co-processing
[15:58:34] <PJBoy> I've been using bottle for my REST API creation
[15:58:46] <LordKalma> django-rest-framework FTW
[15:58:55] <PJBoy> (which is async ofc)
[15:59:00] <very_sneaky> gotcha
[15:59:15] <PJBoy> but bottle sucks
[15:59:17] <PJBoy> I'd avoid it
[15:59:35] <PJBoy> none of my bottle scripts manage to stay alive longer than a day
[15:59:36] <LordKalma> django-rest-framework FTW :D
[15:59:46] <very_sneaky> django is huge though
[15:59:49] <PJBoy> I want simple
[15:59:55] <LordKalma> it is
[15:59:59] <LordKalma> and it's amazing
[16:00:07] <PJBoy> like single file with no config simple?
[16:00:21] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 276 seconds)
[16:00:51] <very_sneaky> i've always preferreed flask - haven't tried fastapi though, i'm hearing it's the new flame
[16:01:28] *** Joins: walkr (~walkr@177-7-165-171.user3p.brasiltelecom.net.br)
[16:02:31] <LordKalma> django needs a project setup, yeah
[16:02:36] <LordKalma> but it does so much heavy lifting
[16:02:58] *** Quits: paul424 (~tom@ip-37-248-158-209.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[16:03:21] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[16:03:34] <PJBoy> tbh though, my problem might be njinx or something
[16:03:42] <LordKalma> ah yeah
[16:03:47] <PJBoy> 'cause my discord bot also gets taken down sometimes by some malformed requests
[16:03:53] <PJBoy> but not nearly as often somehow
[16:03:55] <LordKalma> django makes it very clear their integrated server isn't production worthy
[16:04:08] <LordKalma> gunicorn is nice to serve py wsgi stuff
[16:05:34] <PJBoy> here's a bottle example https://github.com/PJBoy/karen/blob/master/rest/karen.py
[16:05:49] <LordKalma> yeah, that's small
[16:05:53] <PJBoy> that's the kind of simplicity I demand
[16:05:58] <LordKalma> https://github.com/ruilvo/radioamadorismo-website/blob/master/backend/repeaters/serializers.py
[16:06:01] <LordKalma> https://github.com/ruilvo/radioamadorismo-website/blob/master/backend/repeaters/views.py
[16:06:04] <LordKalma> this is what I used
[16:06:12] <LordKalma> but I think my API does much more stuff haha
[16:06:21] <PJBoy> yeah I'm not trying to accomplish much
[16:06:39] <very_sneaky>  lol it looks pretty similar to flask
[16:06:43] <PJBoy> and so I don't want much to acocmplish it
[16:06:50] <PJBoy> yeah it's related to flask
[16:07:03] <PJBoy> flask, bottle, the pun is there
[16:07:09] <very_sneaky> gotcha
[16:07:25] <PJBoy> I think bottle was a single file version of flask
[16:07:28] <very_sneaky> i wish there was a .clang-format that would format my C++ with the PEP8 break rules
[16:07:51] <PJBoy> I to this day, I still haven't found the motivation to learn how to setup venvs properly or any other kind of dependency management
[16:07:57] <cbreak> very_sneaky: why? Those are all dumb.
[16:08:15] <very_sneaky> cbreak: i find it so much more readable than anything i've been able to achieve
[16:08:15] <LordKalma> you can do flask on a single file
[16:08:24] <PJBoy> bottle.py is a single file I meanm
[16:08:28] <LordKalma> ahh ok ok
[16:08:28] <cbreak> very_sneaky: try c++ rules then :)
[16:08:45] <LordKalma> PJBoy, with django I managed a LOT of fitlering options with little code
[16:08:47] <very_sneaky> cbreak: that's my point of comparison - can you suggest something that you find readable?
[16:08:49] <LordKalma> this is the possible query: https://i.gyazo.com/e5c838c6be72ab32dd867d596852f986.png
[16:08:58] <cbreak> very_sneaky: allman style
[16:09:02] <PJBoy> jesus
[16:09:05] <PJBoy> +1 allman
[16:09:28] <LordKalma> best c++ style is MY .clang-format
[16:09:31] <cbreak> I use https://github.com/cbreak-black/ZFSWrapper/blob/ce349e1018f29f62bda064335362d37bf58463a1/.clang-format
[16:09:55] <very_sneaky> is allman just line break for every `{}`?
[16:10:12] <Haohmaru> allman or gtfo
[16:10:19] <very_sneaky> i need something more complex than that - how do i choose to line break for lines that run over the character limit
[16:10:27] <cbreak> very_sneaky: only for block-{}
[16:10:28] <LordKalma> https://github.com/ruilvo/aether_dsp/blob/master/.clang-format
[16:10:29] <very_sneaky> that's what i like about PEP8
[16:10:52] <PJBoy> I need to make a clang format
[16:10:55] <cbreak> my config will break long lines
[16:10:58] <Haohmaru> very_sneaky https://en.wikipedia.org/wiki/Indentation_style#Allman_style
[16:11:03] <PJBoy> with VS Code + clangd, I can test my clang-format in real time D
[16:11:05] <PJBoy> *:D
[16:11:07] <LordKalma> mine's just perfect
[16:11:22] <very_sneaky> Haohmaru: that's what i've been reading - seems to just be stating that `{` and `}` are on lines by themselves
[16:11:29] <LordKalma> I do that
[16:11:35] <PJBoy> yeah allman is symmetric braces
[16:11:44] <PJBoy> i.e. the only aesthetically sensible style
[16:11:48] <very_sneaky> i can get around that - i need rules for breaking long lines though lol
[16:11:57] <LordKalma> read clang-format docs
[16:11:59] <cbreak> very_sneaky: those are included
[16:12:00] <LordKalma> there is stuff for that
[16:12:06] <cbreak> in my config
[16:12:07] <Haohmaru> but on top of that, i always put { } ... i never do "if (something) func();"
[16:12:10] <PJBoy> enable soft word wrap
[16:12:15] <very_sneaky> i have, i couldn't find anything that let me replicate pep8
[16:12:17] <very_sneaky> sadly
[16:12:22] <cbreak> of course not
[16:12:25] <cbreak> because pep8 is junk
[16:12:26] <LordKalma> Haohmaru, +1
[16:12:32] <LordKalma> cbreak, I use black :D
[16:12:32] <cbreak> especially for c++
[16:12:33] <very_sneaky> cbreak, LordKalma: I'll check out both of your clang-format files and see what i think
[16:12:39] <very_sneaky> pep8 is great
[16:12:43] <very_sneaky> for breaking long lines
[16:12:46] <cbreak> pep8 assumes so many stupid python things
[16:12:52] <very_sneaky> it's the python equivalent of allman
[16:14:19] <johnny> PJBoy, allman.. UGGH
[16:14:24] <johnny> plz no
[16:14:32] <PJBoy> allman's top tier
[16:14:47] <johnny> no it sucks
[16:14:52] <johnny> it's one of the worst
[16:14:52] <Haohmaru> no, u
[16:15:02] <PJBoy> all the other ones have anti symmetric braces
[16:15:08] <PJBoy> and are visually cluttering
[16:15:11] <cbreak> everything else is less readable
[16:15:18] <johnny> it's terribly readable
[16:15:20] <cbreak> especially failing to column-align matching {} is a sin
[16:15:35] <johnny> i have a hard time reading allman style code
[16:15:37] <johnny> always have
[16:15:40] <PJBoy> the thing I never understood about non-allman is why you put the closing braces on a newline
[16:15:49] <Haohmaru> johnny really?!
[16:15:49] <PJBoy> I could understand the vertical space argument if they did
[16:15:52] <johnny> i don't care for symmetricity if that's a word
[16:16:02] <johnny> all it does is waste lines
[16:16:06] <LordKalma> motivation for allman style: https://code.visualstudio.com/updates/v1_62#_improved-bracket-pair-guides
[16:16:12] <PJBoy> but having one logic for the closing brace and an opposite logic for the opening brace is like
[16:16:15] <PJBoy> wtf
[16:16:20] <PJBoy> be consistent
[16:16:21] <johnny> eh.. it bothers me not at all
[16:16:28] <Haohmaru> johnny yes, thus i use a portrait-mode display for code ;P~
[16:16:33] <Haohmaru> altho, only here
[16:16:45] <cbreak> with python you need diagonal mode displays
[16:16:47] <johnny> the problem is. the lines themselves are wasted
[16:16:54] <cbreak> because the longer your functions are, the more shifted to the right they become
[16:17:03] <LordKalma> well... make decent functions
[16:17:04] <johnny> that just means you're nesting too mch
[16:17:11] <very_sneaky> this is the kind of breaking i can get behind: https://bpa.st/JGRA
[16:17:14] <Haohmaru> cbreak no, i don't, because i don't let any sneks in
[16:17:16] <cbreak> it's even worse with javascript
[16:17:21] <PJBoy> python has no goto to lessen nesting ;)
[16:17:28] <johnny> it's only worst with js if you keep writing callbacks
[16:17:32] <cbreak> where all the callback nesting for "async" code requires even more nesting
[16:17:43] <cbreak> I should patent diagonal displays
[16:17:49] <PJBoy> I'll accept your line wasting argument when you start putting the closing brace on the same line
[16:17:53] <johnny> cbreak, that's why yo udon't write callbacks
[16:17:59] <LordKalma> what? you can put all .then in the same indentation
[16:18:03] <cbreak> johnny: that's why I don't write JS
[16:18:07] <johnny> PJBoy, then i couldn't visually tell where the function ends
[16:18:12] <johnny> or conditiona
[16:18:17] <PJBoy> why not?
[16:18:26] <PJBoy> the next line will be non indented
[16:18:31] <cbreak> johnny: just use the same heuristic you use for identifying where it starts
[16:18:32] <johnny> oh that's true, it just looks ugly
[16:18:39] <PJBoy> yeah same with the opening brace
[16:18:40] <johnny> that's aesthetics for me
[16:18:56] <cbreak> allman is peak æstetics
[16:18:58] <johnny> you're stating something as objective when it's subjective.. i wanna be clear, i'm not doin that :)
[16:19:03] <PJBoy> I'd actually argue the opening brace is more important to have on its own line
[16:19:08] <PJBoy> because function parameters could be indented
[16:19:15] <very_sneaky> this is why i want a c++ code style standard
[16:19:16] <PJBoy> so it actually makes a useful separation
[16:19:24] <very_sneaky> something that says "thou shalt use this code style"
[16:19:32] <very_sneaky> i need a benevolent dictator
[16:19:33] <johnny> very_sneaky, C/C++ are the least likelky to get such a thig
[16:19:36] <cbreak> very_sneaky: there's a thing like that
[16:19:44] <cbreak> I call it cbreak's .clang-format
[16:19:48] <johnny> i basically use a modified mozilla style in .clang-format
[16:19:50] <PJBoy> in fact ctor initialiser lists *are* indented
[16:19:58] <very_sneaky> cbreak: hahaha. UNDER WHAT AUTHORITY?
[16:20:11] <cbreak> the authority of common sense.
[16:20:14] <johnny> lol
[16:20:21] <very_sneaky> well, now i'm skeptical
[16:20:25] <johnny> because cbreak is used to it.. that's why
[16:20:29] <PJBoy> the c in cbreak stands for common-sense
[16:20:35] <cbreak> yeah.
[16:20:37] <LordKalma> !grab PJBoy
[16:20:37] <nolyc> LordKalma: The operation succeeded.
[16:20:38] <very_sneaky> you think all C++ packages should be managed by the distro, don't you?
[16:20:43] <very_sneaky> or am i thinking of someone else
[16:20:50] <johnny> very_sneaky, most C/C++ people do
[16:21:05] <very_sneaky> johnny: woah
[16:21:08] <PJBoy> idk about most
[16:21:11] <johnny> well most unixy c/C++ people do
[16:21:13] <Haohmaru> PJBoy what does the C in cmake stand for?
[16:21:14] <PJBoy> yeah
[16:21:14] <very_sneaky> big claim, lol
[16:21:16] <cbreak> very_sneaky: I prefer relying on the system for dependencies when it's possible
[16:21:20] <johnny> i meant to say unixy indeed
[16:21:22] <cbreak> because it makes the code more portable
[16:21:35] <cbreak> (or rather, it forces the code itself to be more portable)
[16:21:50] <very_sneaky> i mean i can get behind making the code package agnostic
[16:21:58] <PJBoy> Haohmaru, it's actually a recursive acronym
[16:22:04] <PJBoy> cmake stands for "cmake make"
[16:22:05] <cbreak> this is very important for the kind of software I write
[16:22:10] <johnny> very_sneaky, they like it that distros conrol what libraries you use
[16:22:18] <johnny> to them that's a feature
[16:22:21] <Haohmaru> PJBoy i'm dissapointed
[16:22:49] <very_sneaky> johnny: i've been underwhelmed by the amount of choice available in most distro package managers. it's usually "newest available or gtfo"
[16:23:01] <very_sneaky> what if i have a dependency on an older version
[16:23:09] <johnny> yeah if multiple versions were allowed, then it'd be decent..
[16:23:15] <PJBoy> Haohmaru, raise a defect on cmake then :p
[16:23:22] <johnny> but most distros don't have the people power to handle the kind of work to make it possible
[16:23:25] <Haohmaru> no, i don't even use it
[16:23:41] <cbreak> very_sneaky: come to ubuntu
[16:23:46] <very_sneaky> is there much extra work? just archive and allow people to roll back
[16:23:47] <cbreak> you won't have the newest of anything here...
[16:23:55] <PJBoy> :(
[16:23:59] <johnny> ubuntu's have been too new sometimes, and sometimes too old
[16:24:09] <very_sneaky> cbreak: i said newest available - i didn't mean the *latest*, just that only one version is generally supported
[16:24:21] <johnny> very_sneaky, yeah thatwas kind of ambiguous although i guessed what you meant
[16:24:32] <cbreak> you can have old versions of stuff, if you've had it installed before
[16:24:35] <PJBoy> our workplace had a very specific issue to do with svn and one of its dependencies moving to ubuntu 20.04
[16:24:36] <cbreak> (on ubuntu)
[16:24:41] <PJBoy> and its previous version wasn't available
[16:24:47] <very_sneaky> i'm on arch though, first time using a rolling release - actually more stable than i thought it would be
[16:24:48] <cbreak> and for major versions, there are sometimes multiple
[16:25:18] <johnny> very_sneaky, i use fedora because it straddles the line in the way i care about.. newer verions of wine, the kernel, mesa, and such thigns, but nothing that breaks API
[16:25:30] <very_sneaky> fair
[16:25:53] <johnny> i used to use gentoo back in the day
[16:25:56] <very_sneaky> i think my biggest problem is that it's not a complete solution for most package managers, so my ocd isn't satisfied the way i'd like it to be
[16:26:00] <johnny> and at least gentoo had the slots feture!
[16:26:08] <johnny> you could install multiple verisons of the same package
[16:26:11] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a community of dragon tamers at https://indiedevs.net/)
[16:26:24] <johnny> very_sneaky, but why aren't you on guix or nix tho!
[16:26:30] <johnny> thats' the real question
[16:26:49] <very_sneaky> i feel like i accidentally inviteed this by mentionning arch :P
[16:26:51] <johnny> with guix or nix (or distros like them) we could ditch lang specific package managers
[16:27:02] <johnny> "btw"
[16:27:29] <johnny> very_sneaky, i'm serious in that you should look at both of them even if you don't actually switch to them
[16:27:48] <johnny> like really serious.
[16:28:04] <very_sneaky> huh that's interesting
[16:28:13] <very_sneaky> maybe nixos would make a good docker target for my ci
[16:28:45] <johnny> but for now.. i'm seriously going to bed.    let your braces hug you on their separate lines everyone :)
[16:28:48] *** Joins: pulse (~pulse@user/pulse)
[16:28:52] <PJBoy> aha
[16:29:18] <PJBoy> is allman one of the religions?
[16:29:36] <PJBoy> nah it's not
[16:30:29] <Haohmaru> we can make it
[16:30:46] <Haohmaru> i can write an Orthodox Allman Bible
[16:31:31] <PJBoy> though shalt horizontally align all block scope braces
[16:31:32] *** Quits: cm007magnum (~Rheanna@101.91.232.166) (Remote host closed the connection)
[16:32:01] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:32:01] <PJBoy> man I can't type anymore, what happened to me
[16:33:44] <Haohmaru> you've been blessed by the holy allman spirit
[16:33:48] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[16:37:11] <Haohmaru> and my .hpp code generator will go to heaven
[16:38:14] <Haohmaru> in the beginning there were spaces, and there were four of them, and they were called the holy indentation
[16:43:31] <PJBoy> I can't believe I ever used 8 space
[16:44:42] <PJBoy> I'm scared that I might become a two space guy one day
[16:44:55] <Haohmaru> nah, two spaces is too few
[16:45:20] <Haohmaru> i began really "coding" in mIRC script, and that uses 2 spaces, and there's zero syntax-highlight there
[16:45:22] <Haohmaru> not fun
[16:46:06] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[16:46:37] <Haohmaru> when i went C++ the SDK i was dealing with (as well as the default settings of the IDE) used 4 spaces, which felt uber-wide at first, but this is where indentation started making sense
[16:46:43] <Haohmaru> 8 is excessive tho
[16:47:49] <Haohmaru> !fact
[16:47:50] <nolyc> Haohmaru: A char16_t literal containing multiple c-chars is ill-formed.
[16:52:34] <whupdup> why is that? is it not guaranteed that a char16_t is at least 16 bytes
[16:53:27] <Haohmaru> i'd guess because you're not supposed to be doing that, and you probably did it by mistake
[16:53:41] *** Joins: proller (~p@2a02:6b8:0:40c:7e34:b469:2593:da6e)
[16:54:10] <whupdup> sounds more like a suggestion than a fact
[16:54:33] <whupdup> but I guess if you wanna be doing that you might as well use a union { char16_t str[n]; char str[n]; };
[16:55:19] <whupdup> ...except name the strings differently but whatever
[16:56:12] <PJBoy> it is not guaranteed that a char16_t is at least 16 bytes
[16:56:16] <PJBoy> <_<
[16:57:56] <PJBoy> wasn't UTF-16 encoded in such a way that it would never have the same bits as two ascii chars?
[16:58:24] <Haohmaru> no clue
[17:02:14] <LordKalma> PJBoy> it is not guaranteed that a char16_t is at least 16 bytes  // wuuuttt? 1) you meant bits? 2) wuuuut?
[17:02:32] <PJBoy> I said that in response to whupdup's initial comment
[17:03:16] <PJBoy> (yes it's at least 16 bits)
[17:11:07] <whupdup> yeah I meant bits
[17:12:04] <whupdup> but something inside me totally believed there would be some kind of standard gotcha where a char16_t could end up being some weird size
[17:12:10] <whupdup> even though that makes no sense
[17:13:10] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a community of pixelated dwarves at https://indiedevs.net/)
[17:14:02] <cbreak> char16_t might not be able to contain any utf16 encoded codepoint (for the same reason char8_t can't contain all utf8 encoded codepoints)
[17:14:23] <cbreak> because utf8 and utf16 are multi-code-unit encodings
[17:21:36] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[17:21:46] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[17:23:46] <PJBoy> and utf-32 is fuzzy
[17:23:56] *** Joins: cm007magnum (~Rheanna@101.91.232.166)
[17:24:11] <PJBoy> it can't represent whatever the formalisation of a character is in one unit
[17:24:27] <PJBoy> but it can represent some notion of a technical representation of something character related in one unit
[17:27:24] <cbreak> utf32 can encode all code units
[17:27:39] <cbreak> but of course, some glyphs are combinations of several code units... :)
[17:28:42] <PJBoy> right
[17:28:46] <PJBoy> I swear I'll learn those terms one day
[17:29:22] <PJBoy> if they make it into the C++ standard perhaps
[17:30:59] <cbreak> 💡 is a glyph. It's codepoint U+1F4A1, encodable with one code unit in utf32. Encoded in utf16, it's two code units: U+1F4A1
[17:31:39] <cbreak> sorry, utf16, two code units: d83d dca1, with utf8 it's four code units:  f0 9f 92 a1
[17:31:57] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[17:32:14] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Remote host closed the connection)
[17:34:55] <PJBoy> that makes sense
[17:35:12] <PJBoy> a code unit has bitwidth described by the UTF-N number
[17:35:21] *** Quits: proller (~p@2a02:6b8:0:40c:7e34:b469:2593:da6e) (Ping timeout: 250 seconds)
[17:35:27] *** Quits: flynn (~mcbloch@user/flynn) (Quit: Ping timeout (120 seconds))
[17:35:36] <PJBoy> the code point is a UTF-32 code unit?
[17:35:48] *** Joins: flynn (~mcbloch@user/flynn)
[17:36:11] *** Quits: wille (~wille@static.140.85.76.144.clients.your-server.de) (Quit: Ping timeout (120 seconds))
[17:36:12] <cbreak> a code point is about unicode, code units are about the specific utf encoding
[17:36:34] *** Joins: wille (~wille@static.140.85.76.144.clients.your-server.de)
[17:36:47] <cbreak> I don't know if they always match between code point and utf32 encoding. But probably not, since utf32 exists in big endian and little endian, and unicode code points are just numbers
[17:38:26] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:38:33] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:38:33] *** ChanServ sets mode: +v npaperbot
[17:41:19] *** Joins: sysctl (~user@88.215.77.255)
[17:43:48] <Haohmaru> !fact
[17:43:49] <nolyc> Haohmaru: A local class shall not have static data members.
[17:43:53] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Quit: Hello71)
[17:45:08] *** Joins: pepperoni (~pepperoni@gateway/vpn/pia/pepperoni)
[17:47:08] <PJBoy> right
[17:47:32] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[17:47:35] *** Joins: proller (~p@2a02:6b8:0:40c:c7f:13d7:c631:f2f1)
[17:47:45] <cbreak> { struct X { static const int m = 5; }; }
[17:47:45] <geordi> error: local class 'struct main(int, char**)::X' shall not have static data member 'const int main(int, char**)::X::m'
[17:48:13] <cbreak> { struct X { static constexpr int m = 5; }; }
[17:48:13] <geordi> error: local class 'struct main(int, char**)::X' shall not have static data member 'constexpr const int main(int, char**)::X::m'
[17:49:25] <Haohmaru> because locals have finite lifetime
[17:49:56] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 245 seconds)
[17:51:00] *** Joins: jkaye (~jkaye@2601:281:8300:7530:c25c:6460:bfbf:33d6)
[17:52:20] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[17:54:02] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[17:54:57] <urdh> seems like a pointless restriction, though
[17:55:16] <Haohmaru> no?
[17:55:35] <urdh> why not?
[17:56:05] <urdh> instances of non-local classes also have finite lifetime, but they can have static members
[17:56:10] <Haohmaru> if you make a reference or a pointer pointing to it, and the parent object goes ded (because local), you'll have an invalid reference/pointer
[17:56:10] <urdh> so I don't buy that particular argument
[17:56:15] *** Quits: manjaro-user (~manjaro-u@199-7-159-126.eng.wind.ca) (Ping timeout: 264 seconds)
[17:57:04] <urdh> I could maybe see an argument that it's not clear whether initialization would behave like function-local statics or "global" statics
[17:57:19] <urdh> but in that case I feel like you could make an exception for constexpr
[17:57:44] <cbreak> do you get the same type every call?
[17:57:50] <cbreak> (I think you do)
[17:57:53] <Haohmaru> what should happen to the "constexpr int m" member above ^ after the X struct goes out of scope?
[17:58:01] <urdh> nothing
[17:58:06] <urdh> same as if the class was not local
[17:58:20] <Haohmaru> you expect the m to persist?
[17:58:20] <cbreak> Haohmaru: same that happens to static constexpr int m at function scope.
[17:58:33] <urdh> why not? it's static, so static lifetime seems appropriate?
[17:58:49] <Haohmaru> sketchy
[17:58:58] <cbreak> you can't take its address anyway, since it's constexpr
[17:59:13] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[17:59:18] <urdh> eh, not sketchier than anything else marked static ¯\_(ツ)_/¯
[17:59:45] <Haohmaru> okay, my coffee levels aren't sufficient for this conversation x_x
[18:00:32] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Read error: Connection reset by peer)
[18:00:45] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[18:02:24] <urdh> looks like it's linkage-motivated rather than lifetime-motivated: https://stackoverflow.com/a/8163317/147845
[18:02:58] <urdh> still, feels like constexpr could've been an exception
[18:03:16] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Client Quit)
[18:04:56] <Haohmaru> can't you just add a constexpr member method returning your value of 5 there >:/
[18:05:22] <urdh> sure, and you could also just put the constexpr at function scope instead
[18:05:31] <urdh> but still
[18:05:34] <Haohmaru> no
[18:05:42] <Haohmaru> x.m()
[18:07:27] <urdh> { static constexpr int m = 5; struct X { X() { cout << m; } }; X x; }
[18:07:28] <geordi> 5
[18:07:58] <urdh> depends on how you're using that thing, obviously
[18:08:25] <Haohmaru> if you originally intended it to be a member of X, then it's logical that you meant that
[18:09:07] <Haohmaru> !fact
[18:09:08] <nolyc> Haohmaru: class bad_any_cast : public bad_cast public: const char* what() const noexcept override; ;
[18:09:19] <Haohmaru> wot
[18:11:41] *** Quits: cm007magnum (~Rheanna@101.91.232.166) (Remote host closed the connection)
[18:13:38] *** Joins: cart_man (~rynot@host-78-144-121-71.as13285.net)
[18:14:44] *** Joins: cm007magnum (~Rheanna@61.171.38.68)
[18:16:41] <PJBoy> it's true
[18:30:05] *** Quits: paule32 (~paule32@user/paule32) (Remote host closed the connection)
[18:51:02] *** Quits: Colt (~Colt@user/colt) (Ping timeout: 240 seconds)
[18:52:17] <Haohmaru> !fact
[18:52:18] <nolyc> Haohmaru: Values of type bool participate in integral promotions.
[18:57:23] *** Quits: Volund_ (~Volund@184-089-055-145.res.spectrum.com) (Remote host closed the connection)
[19:01:38] *** Quits: cm007magnum (~Rheanna@61.171.38.68) (Remote host closed the connection)
[19:03:39] *** Joins: cm007magnum (~Rheanna@218.78.67.149)
[19:12:46] <Haohmaru> <Boss> i'm giving you a promotion. a false promotion
[19:14:00] <PJBoy> << "You will now be paid: " << +false
[19:14:01] <geordi> You will now be paid: 0
[19:14:49] <LordKalma> << "You will now be paid: " << (unsigned long long)(+false)-1
[19:14:49] <geordi> You will now be paid: 18446744073709551615
[19:14:53] <LordKalma> now we're talking
[19:14:55] <Haohmaru> you'll never buy a yacht with that pace
[19:15:36] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[19:20:04] *** Quits: walkr (~walkr@177-7-165-171.user3p.brasiltelecom.net.br) (Read error: Connection reset by peer)
[19:20:59] *** Joins: ville_ (~ville@178-75-128-81.bb.dnainternet.fi)
[19:21:00] *** Quits: ville (~ville@178-75-128-81.bb.dnainternet.fi) (Read error: Connection reset by peer)
[19:21:54] <PJBoy> what was that super cool profiler?
[19:21:56] <PJBoy> that had the video
[19:22:08] <LordKalma> https://github.com/plasma-umass/coz
[19:22:09] <PJBoy> argh I'm blanking on it
[19:22:17] <PJBoy> yes!
[19:22:19] <PJBoy> thanks
[19:22:33] <LordKalma> do you know bootstrap?
[19:22:38] <LordKalma> the css lib
[19:24:11] *** Quits: cart_man (~rynot@host-78-144-121-71.as13285.net) (Quit: Konversation terminated!)
[19:24:51] <PJBoy> that one that twitter uses
[19:25:04] <PJBoy> I needed to make a website once and I considered using it
[19:25:13] <TinoDidriksen> It's nice.
[19:25:18] <PJBoy> but then seeing that twitter uses it, I uh
[19:25:30] <PJBoy> did not investigate it too much
[19:26:18] <LordKalma> I was trying to set the minimum width of a responsive element and in good css fashion, failing hard
[19:26:38] <LordKalma> https://i.gyazo.com/833091af6673abe568ed030ddb388df9.mp4
[19:26:46] <LordKalma> basically making the left bar jump up sooner
[19:26:46] <PJBoy> setting widths and heights are among the hardest things you can do in CSS
[19:27:17] <LordKalma> bootstrap has you covered in pretty much all of that
[19:27:23] <LordKalma> it's just... the docs aren't great
[19:27:27] <PJBoy> yeah right
[19:27:42] <PJBoy> dude I swear
[19:27:46] <PJBoy> the CSS problems I have to deal with
[19:27:53] <PJBoy> I can't even describe them to people
[19:28:07] <LordKalma> see how the top bar is responsive from horizontal to menu? bootstrap covers you in all of that
[19:28:27] <Haohmaru> this is where you flip the table and invent an alternative to CSS
[19:28:32] <PJBoy> it's nothing special
[19:28:45] <PJBoy> I do that stuff using the media queries manually
[19:28:59] <LordKalma> Haohmaru, there's SASS
[19:29:04] <LordKalma> which bootstrap uses, btw
[19:29:23] <Haohmaru> i don't even schprachen ze HTML
[19:29:27] <lru> LordKalma: https://2.bp.blogspot.com/-41v6n3Vaf5s/UeRN_XJ0keI/AAAAAAAAN2Y/YxIHhddGiaw/s1600/css.gif
[19:29:42] <PJBoy> `@media only screen and (max-width: 600px)` etc
[19:29:43] <LordKalma> PJBoy, I'm too lazy and this isn't that important for me to go and write a lot of stuff
[19:30:06] <PJBoy> IMO it's better to use CSS features directly where they exist
[19:30:11] <LordKalma> lru, that has been the experience indeed hahaha
[19:30:13] <PJBoy> it's all very well documented
[19:30:24] <PJBoy> it just doesn't make any sense
[19:30:35] <LordKalma> https://getbootstrap.com/docs/5.0/components/navbar/
[19:30:43] <LordKalma> bootstrap has great docs on some things
[19:31:13] <PJBoy> the CSS problem I haven't been able to fix recently is to do with anchors here http://patrickjohnston.org/bank/85
[19:31:32] <PJBoy> if I click any link it scrolls the left panel up and hides the top line
[19:31:37] <LordKalma> https://getbootstrap.com/docs/5.0/layout/grid/#stacked-to-horizontal
[19:31:41] <LordKalma> this is what I'm using in that video
[19:31:46] <LordKalma> "and becomes horizontal at the small breakpoint (sm)."
[19:31:50] <PJBoy> it also hides the top line of the right panel if you scroll back to the top
[19:31:57] <LordKalma> I tried replacing it with other breakpoints, no luck
[19:32:27] <LordKalma> PJBoy, wtf, why?
[19:32:33] <PJBoy> because life's a bitch
[19:33:00] <PJBoy> I seriously don't know
[19:33:13] <PJBoy> and I have no avenues for debugging
[19:33:21] <LordKalma> if the line that was hidden maybe behind the fixed header bar
[19:33:36] <LordKalma> and maybe the #-tag goes "under" it?
[19:33:36] <PJBoy> I do do some stupid crazy hack to get anchors to work on the right page almost correctly
[19:33:39] <LordKalma> something like that
[19:34:01] <LordKalma> just use a framework like everybody else :p
[19:34:16] <PJBoy> no framework would let me make a webpage like this
[19:34:30] <PJBoy> they all only provide functionality for stuff I could easily do without
[19:36:55] <LordKalma> look at how hardcore you are
[19:36:58] *** Joins: walkr (~walkr@177-7-165-171.user3p.brasiltelecom.net.br)
[19:37:10] <PJBoy> <_<
[19:37:14] <LordKalma> damn the C# support on cmake thread is on fire
[19:37:29] <PJBoy> I feel like this webpage should be super simple
[19:37:43] <PJBoy> like if this were win32api, it'd be pretty straight forward
[19:38:09] <PJBoy> and I feel like nothing should be harder to use than win32api
[19:44:57] <Haohmaru> lparam wparam
[19:47:13] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[19:47:15] *** Joins: Hello72 (~Hello71@wireguard/contributor/hello71)
[19:49:25] *** Quits: cq-work (~Z_Lund@user/cq-work) (Quit: WeeChat 3.3)
[19:51:36] *** Quits: cm007magnum (~Rheanna@218.78.67.149) (Remote host closed the connection)
[19:53:50] *** Joins: cm007magnum (~Rheanna@218.78.105.67)
[19:56:01] <PJBoy> llvm have poor documentation >:(
[19:56:51] <PJBoy> googling for .clang-tidy files gets me here https://clang.llvm.org/extra/clang-tidy/
[19:56:57] <PJBoy> which doesn't talk about them
[19:57:10] <LordKalma> See also:
[19:57:10] <LordKalma>     The list of clang-tidy checks
[19:57:41] <PJBoy> I don't know the file format
[19:57:46] <Haohmaru> llvm's documentation is like a redirect to gcc's documentation
[19:57:52] <Haohmaru> how lazy
[19:57:58] <PJBoy> or how to write those checks into a file if I did know it
[19:58:45] <LordKalma> the best way is to use --dump-config
[19:59:21] <LordKalma> https://github.com/ruilvo/aether_dsp/blob/master/.clang-tidy
[19:59:23] <LordKalma> but yeah
[19:59:27] <LordKalma> it's hard to find docs
[19:59:56] <PJBoy> also uh
[20:00:13] <PJBoy> the .config-tidy file doesn't support specifying the -fix option :(
[20:00:44] <LordKalma> well, that's an usage option
[20:00:47] <LordKalma> not a config option
[20:01:08] <LordKalma> clang-tidy --config-file=.clang-tidy --fix file.cpp
[20:01:36] <PJBoy> yeah seemingly
[20:01:48] <PJBoy> but in VS Code I don't invoke clang-tidy directly
[20:02:32] <rpav> you should be able to configure its options, but it should also read ~/.clang-tidy by default, and or ./.clang-tidy, ../.clang-tidy, etc
[20:03:00] <LordKalma> PJBoy, you can go on the problems tab
[20:03:06] <LordKalma> I don't remember if it does have a fix all button
[20:03:15] <PJBoy> I wanted it to fix stuff automatically
[20:03:29] <LordKalma> I wouldn't do that :p
[20:03:39] <LordKalma> at least read and check if you agree
[20:04:00] <PJBoy> I'm just trying to show off
[20:04:03] <LordKalma> --config-file=<
[20:04:10] <LordKalma> https://marketplace.visualstudio.com/items?itemName=llvm-vs-code-extensions.vscode-clangd#:~:text=errors%2C%20warnings%2C%20and%20clang-tidy
[20:04:16] <LordKalma> Code errors are shown as you type (both as red squiggle underlines, and in the "Problems" panel). These are the same as produced by the clang compiler, and suggested fixes can automatically be applied.
[20:04:27] <LordKalma> BUt I think with "automatically" they mean the "quick fix" button
[20:04:31] <PJBoy> yeah
[20:05:44] <rpav> c++ annoyingly lacks dispatch-on-value overloads
[20:06:04] <rpav> though qt annoyingly does this with values, when it could have accomplished it with types
[20:06:58] <LordKalma> what even is that?
[20:09:03] <rpav> you can obviously now `struct S { void foo(int) { ... } };` but instead you could do `struct S { void foo(int == 2) { ... } };` and then when you did `S s; s.foo(2);` it would call that overload
[20:09:47] <rpav> CL does this to great effect, though it's more handy because you have symbols in CL, and you can do like (foo obj 'something) and you "overload" on the symbol `something`
[20:10:49] <rpav> but Qt has a bunch of bullshit Qt::FooRole values and passes them to methods and is a sortof "soft overload" .. you can't have like data(..., Qt::FooRole) { .. }, you have a maze of switch statements and calls
[20:11:36] <rpav> of course, if it had merely been `struct FooRole {}; constexpr FooRoleV = FooRole();` then you could have
[20:12:03] <rpav> but i still blame c++ for not having great value dispatch, nor a great way to implement it (e.g. variadic/template switch)
[20:12:53] <PJBoy> all I can say is you have a very unique coding style
[20:12:59] <PJBoy> or mental model
[20:13:08] <ville_> it's called the if statement
[20:13:09] <rpav> this is purely Qt, i think it's shit but
[20:13:35] <rpav> `if` is the hilariously bad way to do this :p
[20:13:42] <LordKalma> Qt APIs predate constexpr :p
[20:13:47] <LordKalma> or value template paraments
[20:14:12] *** Joins: manjaro-user (~manjaro-u@199-7-159-126.eng.wind.ca)
[20:14:20] <rpav> sure but it still could have been done with values
[20:14:21] *** ville_ is now known as ville
[20:14:56] *** Quits: proller (~p@2a02:6b8:0:40c:c7f:13d7:c631:f2f1) (Ping timeout: 245 seconds)
[20:15:05] <rpav> it just predates type-oriented programming and thus lacks the modern idioms
[20:20:35] <rpav> also notably terrible having a separate "data model" which also manages formatting and tooltips .. i mean wtf
[20:20:48] <LordKalma> how so?
[20:21:29] <rpav> because that's very view-specific, not data-specific
[20:21:44] <LordKalma> an I never bothered with their view model framework
[20:22:16] <rpav> it's obtuse and best to avoid, but it may be the only way to do some things ;/
[20:22:36] <LordKalma> yeah, with Qt quick it certainly ought to help
[20:23:07] <rpav> though i'm not sure, you can probably set a delegate or whatever on the standard model, and have editable columns that way anyway, but i think if you have a ton of data you don't want to duplicate, you need a view
[20:23:41] <LordKalma> and that view proxy shenanigans
[20:23:55] <LordKalma> or model proxy rather
[20:25:05] *** Joins: proller (~p@2a02:6b8:0:40c:e4bb:aee9:bc1b:6952)
[20:33:10] *** Joins: magla (~gelignite@55d4a3e3.access.ecotel.net)
[20:37:48] <AmR> I have Idea Can I ask if it can be done ? this about cmake tool ?
[20:42:07] *** Quits: cm007magnum (~Rheanna@218.78.105.67) (Remote host closed the connection)
[20:42:47] *** Joins: paule32 (~paule32@user/paule32)
[20:43:15] *** Joins: cm007magnum (~Rheanna@61.171.21.169)
[20:43:35] *** Quits: paule32 (~paule32@user/paule32) (Client Quit)
[20:44:11] *** Joins: paule32 (~paule32@user/paule32)
[20:53:28] *** Joins: jpcanepa (~jpcanepa@186.10.191.132)
[20:54:00] *** Joins: paul424 (~tom@ip-37-248-152-78.multi.internet.cyfrowypolsat.pl)
[20:55:09] *** Joins: meator (~meator@user/meator)
[20:59:23] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[21:03:34] *** Quits: CalamityToo (~CalamityB@cpe-108-185-144-94.socal.res.rr.com) (Read error: Connection reset by peer)
[21:10:20] *** Joins: CalamityBlue (~CalamityB@cpe-108-185-144-94.socal.res.rr.com)
[21:11:25] *** Joins: TheGuestMovie (~TheGuestM@173.231.114.74)
[21:11:28] <PJBoy> you can ask whatever you want
[21:11:32] *** Joins: blackhole (~blackhole@2601:600:9f80:2aa0:ac02:78fe:d249:5d36)
[21:16:29] *** Quits: txtsd (~txtsd@user/txtsd) (Ping timeout: 256 seconds)
[21:19:01] <paul424>         boost::variant<Player *m, int32_t> mConcernedPlayer; Does not work with list initialization constructor ServerNotification::ServerNotification(ServerNotificationType type,    Player* concernedPlayer) :        mType(type),        mConcernedPlayer(concernedPlayer)
[21:19:06] <paul424> what do I do wrong ?
[21:21:11] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[21:23:02] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[21:24:25] <ville> !give paul424 testcase
[21:24:26] <nolyc> paul424: A testcase is the _least_ amount of code that replicates your problem, paste it to https://wandbox.org/ then: 1) click run 2) click share 3) click url and 4) paste the url for us. You _must_ use that website. Do _not_ use a different website. Do _not_ paste code to the channel. See the testcase checklist at http://eel.is/iso-c++/testcase/
[21:27:41] *** BrandonArnold2 is now known as BrandonArnold
[21:29:13] *** Joins: AbleBacon_ (~AbleBacon@user/AbleBacon)
[21:29:38] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[21:30:23] *** Quits: hfsoulz (~hfsoulz@user/hfsoulz) (Ping timeout: 264 seconds)
[21:31:38] *** Quits: cm007magnum (~Rheanna@61.171.21.169) (Remote host closed the connection)
[21:32:35] *** Joins: lpapp (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com)
[21:33:11] <lpapp> if I dllexport/import an operator<< overload for a function and then I want to make that as a friend of the class which it expects as an argument, do I also need to put the dllexport/import in the friend declaration or just the function declaration?
[21:33:21] <lpapp> It does not seem to work if I do not also put it in the friend declaration.
[21:33:26] <lpapp> which I find strange personally.
[21:33:35] <paul424> ville, here
[21:33:54] *** Joins: cm007magnum (~Rheanna@61.171.38.68)
[21:35:05] <paul424> upps pardon
[21:35:10] <paul424> https://wandbox.org/permlink/zmRPZMNO3UslcNHB
[21:37:11] <ville> paul424: so what is unclear about that error?
[21:38:04] <Alipha> lpapp: the callers need to know that the function is exported too
[21:38:16] <paul424> why its trying to converse from Players* to int in the first place ...
[21:38:26] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:38:28] <ville> paul424: always look at the first error
[21:38:34] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:38:34] *** ChanServ sets mode: +v npaperbot
[21:38:41] <paul424> aha . arght
[21:38:58] <LordKalma> template argument 1 is invalid
[21:38:58] <LordKalma> why?
[21:39:40] <paul424> LordKalma, yeah anyway , why ?
[21:39:41] <ville> LordKalma: template arguments are in general values or types
[21:40:00] <LordKalma> Player *m of couse
[21:40:06] <LordKalma> Player *
[21:40:09] <LordKalma> no m :D
[21:40:18] <LordKalma> I though the 1 was the int32_t
[21:40:18] <paul424> sure thing , HOW stupid I am :D
[21:40:21] *** Quits: manjaro-user (~manjaro-u@199-7-159-126.eng.wind.ca) (Ping timeout: 245 seconds)
[21:40:22] <LordKalma> programmers count from 0
[21:41:28] *** Joins: hfsoulz (~hfsoulz@user/hfsoulz)
[21:43:21] *** Joins: pulse (~pulse@user/pulse)
[21:44:50] <paul424> simple typo , and I was wondering where the missing m went from 'mConcernedPlayer' went :D
[21:45:05] <lpapp> Alipha: sure, it is exported in the function declaration, but why also in the friend declaration?
[21:46:30] *** Joins: xkuru (~xkuru@user/xkuru)
[21:47:22] <paul424> ville++
[21:50:03] <Alipha> lpapp: you have a friend declaration, a non-friend declaration, and a definition?
[21:53:51] *** Quits: proller (~p@2a02:6b8:0:40c:e4bb:aee9:bc1b:6952) (Ping timeout: 264 seconds)
[21:56:51] *** Quits: jpcanepa (~jpcanepa@186.10.191.132) (Quit: Textual IRC Client: www.textualapp.com)
[22:01:06] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:a1ca:c9d6:7edc:f8dc)
[22:01:07] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:a1ca:c9d6:7edc:f8dc) (Changing host)
[22:01:07] *** Joins: skapata (~Skapata@user/skapata)
[22:12:07] <lpapp> Alipha: sure, typical operator<< overload for a class.
[22:15:04] *** Joins: great_taste (~great_tas@190.32.235.20)
[22:19:00] *** Quits: AbleBacon_ (~AbleBacon@user/AbleBacon) (Quit: I am like MacArthur; I shall return.)
[22:21:37] *** Quits: cm007magnum (~Rheanna@61.171.38.68) (Remote host closed the connection)
[22:23:47] *** Joins: cm007magnum (~Rheanna@218.78.67.149)
[22:23:48] <rpav> a friend declaration, a non-friend declaration, and a definition walk into a bar
[22:25:48] <lpapp> to make some baz?
[22:27:49] *** Joins: spaceangel (~spaceange@ip-62-245-71-160.net.upcbroadband.cz)
[22:33:42] *** Quits: TheGuestMovie (~TheGuestM@173.231.114.74) (Quit: Client closed)
[22:40:10] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[22:45:20] *** Quits: uzer1 (~uzer@dsl-trebng11-54f912-114.dhcp.inet.fi) (Ping timeout: 265 seconds)
[22:50:28] *** Joins: proller (~p@80.240.216.69)
[22:50:47] <great_taste> C++ feels like a prank at times
[22:51:06] <LordKalma> !grab great_taste
[22:51:06] <nolyc> LordKalma: The operation succeeded.
[22:51:48] * great_taste is hoping for the compiler to eventually output "it's just a prank bro"
[22:52:43] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[22:57:08] <vdamewood> I'm waiting for C++ to incorporate features from INTERCAL.
[23:05:32] <comrad> i hope they (the compiler builds) will finally implement the c++ standard and provide a garbage collection :-D
[23:11:14] *** Joins: chris64 (~chris@user/chris64)
[23:11:34] *** Quits: cm007magnum (~Rheanna@218.78.67.149) (Remote host closed the connection)
[23:12:25] <PJBoy> C++23 removes garbage collection support
[23:13:16] *** Joins: cm007magnum (~Rheanna@101.89.150.168)
[23:14:24] <lpapp> I was not aware of garbage collection added
[23:15:03] <lpapp> when was it added
[23:15:32] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[23:15:55] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[23:16:42] <PJBoy> https://en.cppreference.com/w/cpp/memory#Garbage_collector_support
[23:17:00] <PJBoy> it's more like a low level API for supporting a garbage collection implementation
[23:17:16] <PJBoy> that no one of note ever implemented
[23:17:36] <lpapp> at least, it does not have to change the garbage collection algorithm all the time like Java.
[23:17:47] <lpapp> or was it Python, whatever
[23:20:16] *** Joins: andreasbuhr (~quassel@p549dbdeb.dip0.t-ipconnect.de)
[23:20:28] *** Quits: andreasbuhr (~quassel@p549dbdeb.dip0.t-ipconnect.de) (Client Quit)
[23:21:33] *** Quits: blackhole (~blackhole@2601:600:9f80:2aa0:ac02:78fe:d249:5d36) (Read error: Connection reset by peer)
[23:22:01] *** Quits: zagura (~zagura@user/zagura) (*.net *.split)
[23:22:09] *** Joins: zagura (~zagura@user/zagura)
[23:23:19] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[23:24:24] *** Joins: great_taste (~great_tas@190.32.235.20)
[23:25:06] *** Joins: teepee (~teepee@openscad/teepee)
[23:30:19] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[23:34:05] *** Quits: proller (~p@80.240.216.69) (Remote host closed the connection)
[23:34:45] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[23:34:54] *** Joins: TingPing (sid2800@helmsley.irccloud.com)
[23:36:42] <LordKalma> probably java
[23:36:48] <LordKalma> Python's very simple: the infamous GIL
[23:36:53] <LordKalma> which sometimes I don't mind, sometimes I hate
[23:37:14] *** Joins: proller (~p@80.240.216.69)
[23:37:31] <LordKalma> the best GC is probably the .net one
[23:37:33] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[23:37:37] <LordKalma> their JIT implementation is pretty good
[23:39:00] <Alipha> lpapp: typically, you only have the friend declaration and the definition--not have a redundant non-friend declaration
[23:39:37] <LordKalma> wouldn't that even result on overload un-resolution?
[23:41:32] <lpapp> Alipha: how would the caller see it from the dll?
[23:41:51] <lpapp> that is typicall a function declaration.
[23:41:54] <lpapp> typically*
[23:43:00] <Alipha> lpapp: note that a friend declaration is itself also a function declaration
[23:43:41] <lpapp> quite unusual one though
[23:43:45] <Alipha> PJBoy: ironically, just in time for herb to make a gc smart pointer? https://github.com/hsutter/gcpp
[23:44:39] <Alipha> PJBoy: I guess that's 5 years old
[23:45:36] <LordKalma> Tim <last name> from Juce has a talk where they basically implement something like that
[23:45:50] <LordKalma> they can't afford running destructors on the audio callback thread
[23:46:13] <LordKalma> so they have like smartpointers and a thread that checks every once in a while if there's only 1 owner (itself)
[23:46:17] <LordKalma> if yes, destroy the object
[23:46:35] <PJBoy> herb's thing is cool and all, but it won't get the compiler support that the C++11 stuff potentially added
[23:47:36] <PJBoy> I'm not sure how this thing works being single threaded
[23:47:44] <LordKalma> async callbacks?
[23:47:52] <Alipha> LordKalma: and I wrote one. But I want to make a v2 that's more user-friendly but also has the over-flexibility that c++ libraries tend to have :-) https://github.com/alipha/cpp/tree/master/gc
[23:47:52] <PJBoy> in C++?
[23:48:00] <LordKalma> PJBoy, with c++ 20?
[23:48:06] <LordKalma> but if it's 5 years old, no idea
[23:48:08] <PJBoy> this thing builds on MSVC 2015
[23:48:44] <LordKalma> everytime I see variadic templates I give up
[23:48:54] <Alipha> Maybe it only supports single-threaded apps
[23:49:37] *** Joins: TheGuestMovie (~TheGuestM@173.231.114.74)
[23:50:03] <PJBoy> it's the 8 space indentation that kills me
[23:50:39] <LordKalma> https://github.com/hsutter/gcpp/blob/master/test.cpp#L144
[23:50:40] *** Quits: spaceangel (~spaceange@ip-62-245-71-160.net.upcbroadband.cz) (Read error: Connection reset by peer)
[23:50:50] <LordKalma> heap.collect();
[23:50:54] <LordKalma> so... manual GC?
[23:50:57] *** Joins: spaceangel (~spaceange@ip-62-245-71-160.net.upcbroadband.cz)
[23:52:21] <PJBoy> maybe
[23:52:27] <PJBoy> sounds pretty lame though
[23:52:46] *** Quits: chris64 (~chris@user/chris64) (Quit: leaving)
[23:53:07] <LordKalma> Because .collect() and the destructor are explicit, the program can choose when (at a convenient time) and where (e.g., on what thread or processor) to run destructors.
[23:53:12] <LordKalma> it's in the readme.md
[23:53:29] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[23:53:36] <PJBoy> "can" or "have to" though :/
[23:53:49] <LordKalma> can choose the time
[23:53:53] <LordKalma> is must chose *a* time
[23:54:05] <PJBoy> that sounds really meh then
[23:59:30] <Alipha> For mine, you can specify a max heap size and it'll auto-collect if that size is (approximately) reached
